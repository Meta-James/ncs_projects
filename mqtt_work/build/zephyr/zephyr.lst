
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c000 <_vector_table>:
    c000:	90 5f 02 20 05 fe 00 00 df e2 01 00 35 fe 00 00     ._. ........5...
    c010:	35 fe 00 00 35 fe 00 00 35 fe 00 00 35 fe 00 00     5...5...5...5...
	...
    c02c:	11 fb 00 00 35 fe 00 00 00 00 00 00 61 fa 00 00     ....5.......a...
    c03c:	c3 e2 01 00                                         ....

0000c040 <_irq_vector_table>:
    c040:	c5 fd 00 00 c5 fd 00 00 c5 fd 00 00 c5 fd 00 00     ................
    c050:	c5 fd 00 00 c5 fd 00 00 c5 fd 00 00 c5 fd 00 00     ................
    c060:	c5 fd 00 00 c5 fd 00 00 c5 fd 00 00 c5 fd 00 00     ................
    c070:	c5 fd 00 00 c5 fd 00 00 c5 fd 00 00 c5 fd 00 00     ................
    c080:	c5 fd 00 00 c5 fd 00 00 c5 fd 00 00 c5 fd 00 00     ................
    c090:	c5 fd 00 00 c5 fd 00 00 c5 fd 00 00 c5 fd 00 00     ................
    c0a0:	c5 fd 00 00 c5 fd 00 00 c5 fd 00 00 c5 fd 00 00     ................
    c0b0:	11 13 01 00 51 f4 01 00 c5 fd 00 00 c5 fd 00 00     ....Q...........
    c0c0:	c5 fd 00 00 c5 fd 00 00 c5 fd 00 00 c5 fd 00 00     ................
    c0d0:	c5 fd 00 00 c5 fd 00 00 c5 fd 00 00 c5 fd 00 00     ................
    c0e0:	c5 fd 00 00 c5 fd 00 00 6f f4 01 00 c5 fd 00 00     ........o.......
    c0f0:	c5 fd 00 00 c5 fd 00 00 c5 fd 00 00 c5 fd 00 00     ................
    c100:	c5 fd 00 00 c5 fd 00 00 c5 fd 00 00 c5 fd 00 00     ................
    c110:	c5 fd 00 00 c5 fd 00 00 c5 fd 00 00 c5 fd 00 00     ................
    c120:	c5 fd 00 00 c5 fd 00 00 c5 fd 00 00 c5 fd 00 00     ................
    c130:	c5 fd 00 00 c5 fd 00 00 c5 fd 00 00 c5 fd 00 00     ................
    c140:	c5 fd 00 00                                         ....

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	de e6 1e 28 4c bb ce 8f 02 5b 00 00 3c 00 00 00     ...(L....[..<...
    c210:	24 6d 01 00 01 00 00 00 00 c0 00 00 00 c0 00 00     $m..............
    c220:	ff ff 02 91 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

Disassembly of section text:

0000c240 <__aeabi_dmul>:
    c240:	b570      	push	{r4, r5, r6, lr}
    c242:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c246:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c24a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c24e:	bf1d      	ittte	ne
    c250:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c254:	ea94 0f0c 	teqne	r4, ip
    c258:	ea95 0f0c 	teqne	r5, ip
    c25c:	f000 f8de 	bleq	c41c <__aeabi_dmul+0x1dc>
    c260:	442c      	add	r4, r5
    c262:	ea81 0603 	eor.w	r6, r1, r3
    c266:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    c26a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    c26e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    c272:	bf18      	it	ne
    c274:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    c278:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c27c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    c280:	d038      	beq.n	c2f4 <__aeabi_dmul+0xb4>
    c282:	fba0 ce02 	umull	ip, lr, r0, r2
    c286:	f04f 0500 	mov.w	r5, #0
    c28a:	fbe1 e502 	umlal	lr, r5, r1, r2
    c28e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    c292:	fbe0 e503 	umlal	lr, r5, r0, r3
    c296:	f04f 0600 	mov.w	r6, #0
    c29a:	fbe1 5603 	umlal	r5, r6, r1, r3
    c29e:	f09c 0f00 	teq	ip, #0
    c2a2:	bf18      	it	ne
    c2a4:	f04e 0e01 	orrne.w	lr, lr, #1
    c2a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    c2ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    c2b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    c2b4:	d204      	bcs.n	c2c0 <__aeabi_dmul+0x80>
    c2b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    c2ba:	416d      	adcs	r5, r5
    c2bc:	eb46 0606 	adc.w	r6, r6, r6
    c2c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    c2c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    c2c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    c2cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    c2d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    c2d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c2d8:	bf88      	it	hi
    c2da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c2de:	d81e      	bhi.n	c31e <__aeabi_dmul+0xde>
    c2e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    c2e4:	bf08      	it	eq
    c2e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    c2ea:	f150 0000 	adcs.w	r0, r0, #0
    c2ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c2f2:	bd70      	pop	{r4, r5, r6, pc}
    c2f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    c2f8:	ea46 0101 	orr.w	r1, r6, r1
    c2fc:	ea40 0002 	orr.w	r0, r0, r2
    c300:	ea81 0103 	eor.w	r1, r1, r3
    c304:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    c308:	bfc2      	ittt	gt
    c30a:	ebd4 050c 	rsbsgt	r5, r4, ip
    c30e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c312:	bd70      	popgt	{r4, r5, r6, pc}
    c314:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c318:	f04f 0e00 	mov.w	lr, #0
    c31c:	3c01      	subs	r4, #1
    c31e:	f300 80ab 	bgt.w	c478 <__aeabi_dmul+0x238>
    c322:	f114 0f36 	cmn.w	r4, #54	; 0x36
    c326:	bfde      	ittt	le
    c328:	2000      	movle	r0, #0
    c32a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    c32e:	bd70      	pople	{r4, r5, r6, pc}
    c330:	f1c4 0400 	rsb	r4, r4, #0
    c334:	3c20      	subs	r4, #32
    c336:	da35      	bge.n	c3a4 <__aeabi_dmul+0x164>
    c338:	340c      	adds	r4, #12
    c33a:	dc1b      	bgt.n	c374 <__aeabi_dmul+0x134>
    c33c:	f104 0414 	add.w	r4, r4, #20
    c340:	f1c4 0520 	rsb	r5, r4, #32
    c344:	fa00 f305 	lsl.w	r3, r0, r5
    c348:	fa20 f004 	lsr.w	r0, r0, r4
    c34c:	fa01 f205 	lsl.w	r2, r1, r5
    c350:	ea40 0002 	orr.w	r0, r0, r2
    c354:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    c358:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c35c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c360:	fa21 f604 	lsr.w	r6, r1, r4
    c364:	eb42 0106 	adc.w	r1, r2, r6
    c368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c36c:	bf08      	it	eq
    c36e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c372:	bd70      	pop	{r4, r5, r6, pc}
    c374:	f1c4 040c 	rsb	r4, r4, #12
    c378:	f1c4 0520 	rsb	r5, r4, #32
    c37c:	fa00 f304 	lsl.w	r3, r0, r4
    c380:	fa20 f005 	lsr.w	r0, r0, r5
    c384:	fa01 f204 	lsl.w	r2, r1, r4
    c388:	ea40 0002 	orr.w	r0, r0, r2
    c38c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c390:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c394:	f141 0100 	adc.w	r1, r1, #0
    c398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c39c:	bf08      	it	eq
    c39e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c3a2:	bd70      	pop	{r4, r5, r6, pc}
    c3a4:	f1c4 0520 	rsb	r5, r4, #32
    c3a8:	fa00 f205 	lsl.w	r2, r0, r5
    c3ac:	ea4e 0e02 	orr.w	lr, lr, r2
    c3b0:	fa20 f304 	lsr.w	r3, r0, r4
    c3b4:	fa01 f205 	lsl.w	r2, r1, r5
    c3b8:	ea43 0302 	orr.w	r3, r3, r2
    c3bc:	fa21 f004 	lsr.w	r0, r1, r4
    c3c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c3c4:	fa21 f204 	lsr.w	r2, r1, r4
    c3c8:	ea20 0002 	bic.w	r0, r0, r2
    c3cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    c3d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c3d4:	bf08      	it	eq
    c3d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c3da:	bd70      	pop	{r4, r5, r6, pc}
    c3dc:	f094 0f00 	teq	r4, #0
    c3e0:	d10f      	bne.n	c402 <__aeabi_dmul+0x1c2>
    c3e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    c3e6:	0040      	lsls	r0, r0, #1
    c3e8:	eb41 0101 	adc.w	r1, r1, r1
    c3ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c3f0:	bf08      	it	eq
    c3f2:	3c01      	subeq	r4, #1
    c3f4:	d0f7      	beq.n	c3e6 <__aeabi_dmul+0x1a6>
    c3f6:	ea41 0106 	orr.w	r1, r1, r6
    c3fa:	f095 0f00 	teq	r5, #0
    c3fe:	bf18      	it	ne
    c400:	4770      	bxne	lr
    c402:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    c406:	0052      	lsls	r2, r2, #1
    c408:	eb43 0303 	adc.w	r3, r3, r3
    c40c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    c410:	bf08      	it	eq
    c412:	3d01      	subeq	r5, #1
    c414:	d0f7      	beq.n	c406 <__aeabi_dmul+0x1c6>
    c416:	ea43 0306 	orr.w	r3, r3, r6
    c41a:	4770      	bx	lr
    c41c:	ea94 0f0c 	teq	r4, ip
    c420:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    c424:	bf18      	it	ne
    c426:	ea95 0f0c 	teqne	r5, ip
    c42a:	d00c      	beq.n	c446 <__aeabi_dmul+0x206>
    c42c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c430:	bf18      	it	ne
    c432:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c436:	d1d1      	bne.n	c3dc <__aeabi_dmul+0x19c>
    c438:	ea81 0103 	eor.w	r1, r1, r3
    c43c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c440:	f04f 0000 	mov.w	r0, #0
    c444:	bd70      	pop	{r4, r5, r6, pc}
    c446:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c44a:	bf06      	itte	eq
    c44c:	4610      	moveq	r0, r2
    c44e:	4619      	moveq	r1, r3
    c450:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c454:	d019      	beq.n	c48a <__aeabi_dmul+0x24a>
    c456:	ea94 0f0c 	teq	r4, ip
    c45a:	d102      	bne.n	c462 <__aeabi_dmul+0x222>
    c45c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    c460:	d113      	bne.n	c48a <__aeabi_dmul+0x24a>
    c462:	ea95 0f0c 	teq	r5, ip
    c466:	d105      	bne.n	c474 <__aeabi_dmul+0x234>
    c468:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    c46c:	bf1c      	itt	ne
    c46e:	4610      	movne	r0, r2
    c470:	4619      	movne	r1, r3
    c472:	d10a      	bne.n	c48a <__aeabi_dmul+0x24a>
    c474:	ea81 0103 	eor.w	r1, r1, r3
    c478:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c47c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c484:	f04f 0000 	mov.w	r0, #0
    c488:	bd70      	pop	{r4, r5, r6, pc}
    c48a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c48e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    c492:	bd70      	pop	{r4, r5, r6, pc}

0000c494 <__aeabi_drsub>:
    c494:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c498:	e002      	b.n	c4a0 <__adddf3>
    c49a:	bf00      	nop

0000c49c <__aeabi_dsub>:
    c49c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c4a0 <__adddf3>:
    c4a0:	b530      	push	{r4, r5, lr}
    c4a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c4a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c4aa:	ea94 0f05 	teq	r4, r5
    c4ae:	bf08      	it	eq
    c4b0:	ea90 0f02 	teqeq	r0, r2
    c4b4:	bf1f      	itttt	ne
    c4b6:	ea54 0c00 	orrsne.w	ip, r4, r0
    c4ba:	ea55 0c02 	orrsne.w	ip, r5, r2
    c4be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c4c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c4c6:	f000 80e2 	beq.w	c68e <__adddf3+0x1ee>
    c4ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c4ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c4d2:	bfb8      	it	lt
    c4d4:	426d      	neglt	r5, r5
    c4d6:	dd0c      	ble.n	c4f2 <__adddf3+0x52>
    c4d8:	442c      	add	r4, r5
    c4da:	ea80 0202 	eor.w	r2, r0, r2
    c4de:	ea81 0303 	eor.w	r3, r1, r3
    c4e2:	ea82 0000 	eor.w	r0, r2, r0
    c4e6:	ea83 0101 	eor.w	r1, r3, r1
    c4ea:	ea80 0202 	eor.w	r2, r0, r2
    c4ee:	ea81 0303 	eor.w	r3, r1, r3
    c4f2:	2d36      	cmp	r5, #54	; 0x36
    c4f4:	bf88      	it	hi
    c4f6:	bd30      	pophi	{r4, r5, pc}
    c4f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c4fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c500:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c504:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c508:	d002      	beq.n	c510 <__adddf3+0x70>
    c50a:	4240      	negs	r0, r0
    c50c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c510:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c514:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c518:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c51c:	d002      	beq.n	c524 <__adddf3+0x84>
    c51e:	4252      	negs	r2, r2
    c520:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c524:	ea94 0f05 	teq	r4, r5
    c528:	f000 80a7 	beq.w	c67a <__adddf3+0x1da>
    c52c:	f1a4 0401 	sub.w	r4, r4, #1
    c530:	f1d5 0e20 	rsbs	lr, r5, #32
    c534:	db0d      	blt.n	c552 <__adddf3+0xb2>
    c536:	fa02 fc0e 	lsl.w	ip, r2, lr
    c53a:	fa22 f205 	lsr.w	r2, r2, r5
    c53e:	1880      	adds	r0, r0, r2
    c540:	f141 0100 	adc.w	r1, r1, #0
    c544:	fa03 f20e 	lsl.w	r2, r3, lr
    c548:	1880      	adds	r0, r0, r2
    c54a:	fa43 f305 	asr.w	r3, r3, r5
    c54e:	4159      	adcs	r1, r3
    c550:	e00e      	b.n	c570 <__adddf3+0xd0>
    c552:	f1a5 0520 	sub.w	r5, r5, #32
    c556:	f10e 0e20 	add.w	lr, lr, #32
    c55a:	2a01      	cmp	r2, #1
    c55c:	fa03 fc0e 	lsl.w	ip, r3, lr
    c560:	bf28      	it	cs
    c562:	f04c 0c02 	orrcs.w	ip, ip, #2
    c566:	fa43 f305 	asr.w	r3, r3, r5
    c56a:	18c0      	adds	r0, r0, r3
    c56c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c574:	d507      	bpl.n	c586 <__adddf3+0xe6>
    c576:	f04f 0e00 	mov.w	lr, #0
    c57a:	f1dc 0c00 	rsbs	ip, ip, #0
    c57e:	eb7e 0000 	sbcs.w	r0, lr, r0
    c582:	eb6e 0101 	sbc.w	r1, lr, r1
    c586:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c58a:	d31b      	bcc.n	c5c4 <__adddf3+0x124>
    c58c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c590:	d30c      	bcc.n	c5ac <__adddf3+0x10c>
    c592:	0849      	lsrs	r1, r1, #1
    c594:	ea5f 0030 	movs.w	r0, r0, rrx
    c598:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c59c:	f104 0401 	add.w	r4, r4, #1
    c5a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c5a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c5a8:	f080 809a 	bcs.w	c6e0 <__adddf3+0x240>
    c5ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c5b0:	bf08      	it	eq
    c5b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c5b6:	f150 0000 	adcs.w	r0, r0, #0
    c5ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c5be:	ea41 0105 	orr.w	r1, r1, r5
    c5c2:	bd30      	pop	{r4, r5, pc}
    c5c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c5c8:	4140      	adcs	r0, r0
    c5ca:	eb41 0101 	adc.w	r1, r1, r1
    c5ce:	3c01      	subs	r4, #1
    c5d0:	bf28      	it	cs
    c5d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    c5d6:	d2e9      	bcs.n	c5ac <__adddf3+0x10c>
    c5d8:	f091 0f00 	teq	r1, #0
    c5dc:	bf04      	itt	eq
    c5de:	4601      	moveq	r1, r0
    c5e0:	2000      	moveq	r0, #0
    c5e2:	fab1 f381 	clz	r3, r1
    c5e6:	bf08      	it	eq
    c5e8:	3320      	addeq	r3, #32
    c5ea:	f1a3 030b 	sub.w	r3, r3, #11
    c5ee:	f1b3 0220 	subs.w	r2, r3, #32
    c5f2:	da0c      	bge.n	c60e <__adddf3+0x16e>
    c5f4:	320c      	adds	r2, #12
    c5f6:	dd08      	ble.n	c60a <__adddf3+0x16a>
    c5f8:	f102 0c14 	add.w	ip, r2, #20
    c5fc:	f1c2 020c 	rsb	r2, r2, #12
    c600:	fa01 f00c 	lsl.w	r0, r1, ip
    c604:	fa21 f102 	lsr.w	r1, r1, r2
    c608:	e00c      	b.n	c624 <__adddf3+0x184>
    c60a:	f102 0214 	add.w	r2, r2, #20
    c60e:	bfd8      	it	le
    c610:	f1c2 0c20 	rsble	ip, r2, #32
    c614:	fa01 f102 	lsl.w	r1, r1, r2
    c618:	fa20 fc0c 	lsr.w	ip, r0, ip
    c61c:	bfdc      	itt	le
    c61e:	ea41 010c 	orrle.w	r1, r1, ip
    c622:	4090      	lslle	r0, r2
    c624:	1ae4      	subs	r4, r4, r3
    c626:	bfa2      	ittt	ge
    c628:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c62c:	4329      	orrge	r1, r5
    c62e:	bd30      	popge	{r4, r5, pc}
    c630:	ea6f 0404 	mvn.w	r4, r4
    c634:	3c1f      	subs	r4, #31
    c636:	da1c      	bge.n	c672 <__adddf3+0x1d2>
    c638:	340c      	adds	r4, #12
    c63a:	dc0e      	bgt.n	c65a <__adddf3+0x1ba>
    c63c:	f104 0414 	add.w	r4, r4, #20
    c640:	f1c4 0220 	rsb	r2, r4, #32
    c644:	fa20 f004 	lsr.w	r0, r0, r4
    c648:	fa01 f302 	lsl.w	r3, r1, r2
    c64c:	ea40 0003 	orr.w	r0, r0, r3
    c650:	fa21 f304 	lsr.w	r3, r1, r4
    c654:	ea45 0103 	orr.w	r1, r5, r3
    c658:	bd30      	pop	{r4, r5, pc}
    c65a:	f1c4 040c 	rsb	r4, r4, #12
    c65e:	f1c4 0220 	rsb	r2, r4, #32
    c662:	fa20 f002 	lsr.w	r0, r0, r2
    c666:	fa01 f304 	lsl.w	r3, r1, r4
    c66a:	ea40 0003 	orr.w	r0, r0, r3
    c66e:	4629      	mov	r1, r5
    c670:	bd30      	pop	{r4, r5, pc}
    c672:	fa21 f004 	lsr.w	r0, r1, r4
    c676:	4629      	mov	r1, r5
    c678:	bd30      	pop	{r4, r5, pc}
    c67a:	f094 0f00 	teq	r4, #0
    c67e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c682:	bf06      	itte	eq
    c684:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c688:	3401      	addeq	r4, #1
    c68a:	3d01      	subne	r5, #1
    c68c:	e74e      	b.n	c52c <__adddf3+0x8c>
    c68e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c692:	bf18      	it	ne
    c694:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c698:	d029      	beq.n	c6ee <__adddf3+0x24e>
    c69a:	ea94 0f05 	teq	r4, r5
    c69e:	bf08      	it	eq
    c6a0:	ea90 0f02 	teqeq	r0, r2
    c6a4:	d005      	beq.n	c6b2 <__adddf3+0x212>
    c6a6:	ea54 0c00 	orrs.w	ip, r4, r0
    c6aa:	bf04      	itt	eq
    c6ac:	4619      	moveq	r1, r3
    c6ae:	4610      	moveq	r0, r2
    c6b0:	bd30      	pop	{r4, r5, pc}
    c6b2:	ea91 0f03 	teq	r1, r3
    c6b6:	bf1e      	ittt	ne
    c6b8:	2100      	movne	r1, #0
    c6ba:	2000      	movne	r0, #0
    c6bc:	bd30      	popne	{r4, r5, pc}
    c6be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c6c2:	d105      	bne.n	c6d0 <__adddf3+0x230>
    c6c4:	0040      	lsls	r0, r0, #1
    c6c6:	4149      	adcs	r1, r1
    c6c8:	bf28      	it	cs
    c6ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c6ce:	bd30      	pop	{r4, r5, pc}
    c6d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c6d4:	bf3c      	itt	cc
    c6d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c6da:	bd30      	popcc	{r4, r5, pc}
    c6dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c6e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c6e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c6e8:	f04f 0000 	mov.w	r0, #0
    c6ec:	bd30      	pop	{r4, r5, pc}
    c6ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c6f2:	bf1a      	itte	ne
    c6f4:	4619      	movne	r1, r3
    c6f6:	4610      	movne	r0, r2
    c6f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c6fc:	bf1c      	itt	ne
    c6fe:	460b      	movne	r3, r1
    c700:	4602      	movne	r2, r0
    c702:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c706:	bf06      	itte	eq
    c708:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c70c:	ea91 0f03 	teqeq	r1, r3
    c710:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c714:	bd30      	pop	{r4, r5, pc}
    c716:	bf00      	nop

0000c718 <__aeabi_ui2d>:
    c718:	f090 0f00 	teq	r0, #0
    c71c:	bf04      	itt	eq
    c71e:	2100      	moveq	r1, #0
    c720:	4770      	bxeq	lr
    c722:	b530      	push	{r4, r5, lr}
    c724:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c728:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c72c:	f04f 0500 	mov.w	r5, #0
    c730:	f04f 0100 	mov.w	r1, #0
    c734:	e750      	b.n	c5d8 <__adddf3+0x138>
    c736:	bf00      	nop

0000c738 <__aeabi_i2d>:
    c738:	f090 0f00 	teq	r0, #0
    c73c:	bf04      	itt	eq
    c73e:	2100      	moveq	r1, #0
    c740:	4770      	bxeq	lr
    c742:	b530      	push	{r4, r5, lr}
    c744:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c748:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c74c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c750:	bf48      	it	mi
    c752:	4240      	negmi	r0, r0
    c754:	f04f 0100 	mov.w	r1, #0
    c758:	e73e      	b.n	c5d8 <__adddf3+0x138>
    c75a:	bf00      	nop

0000c75c <__aeabi_f2d>:
    c75c:	0042      	lsls	r2, r0, #1
    c75e:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c762:	ea4f 0131 	mov.w	r1, r1, rrx
    c766:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c76a:	bf1f      	itttt	ne
    c76c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c770:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c774:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c778:	4770      	bxne	lr
    c77a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    c77e:	bf08      	it	eq
    c780:	4770      	bxeq	lr
    c782:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    c786:	bf04      	itt	eq
    c788:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    c78c:	4770      	bxeq	lr
    c78e:	b530      	push	{r4, r5, lr}
    c790:	f44f 7460 	mov.w	r4, #896	; 0x380
    c794:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c798:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c79c:	e71c      	b.n	c5d8 <__adddf3+0x138>
    c79e:	bf00      	nop

0000c7a0 <__aeabi_ul2d>:
    c7a0:	ea50 0201 	orrs.w	r2, r0, r1
    c7a4:	bf08      	it	eq
    c7a6:	4770      	bxeq	lr
    c7a8:	b530      	push	{r4, r5, lr}
    c7aa:	f04f 0500 	mov.w	r5, #0
    c7ae:	e00a      	b.n	c7c6 <__aeabi_l2d+0x16>

0000c7b0 <__aeabi_l2d>:
    c7b0:	ea50 0201 	orrs.w	r2, r0, r1
    c7b4:	bf08      	it	eq
    c7b6:	4770      	bxeq	lr
    c7b8:	b530      	push	{r4, r5, lr}
    c7ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c7be:	d502      	bpl.n	c7c6 <__aeabi_l2d+0x16>
    c7c0:	4240      	negs	r0, r0
    c7c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c7c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c7ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c7ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c7d2:	f43f aed8 	beq.w	c586 <__adddf3+0xe6>
    c7d6:	f04f 0203 	mov.w	r2, #3
    c7da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c7de:	bf18      	it	ne
    c7e0:	3203      	addne	r2, #3
    c7e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c7e6:	bf18      	it	ne
    c7e8:	3203      	addne	r2, #3
    c7ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c7ee:	f1c2 0320 	rsb	r3, r2, #32
    c7f2:	fa00 fc03 	lsl.w	ip, r0, r3
    c7f6:	fa20 f002 	lsr.w	r0, r0, r2
    c7fa:	fa01 fe03 	lsl.w	lr, r1, r3
    c7fe:	ea40 000e 	orr.w	r0, r0, lr
    c802:	fa21 f102 	lsr.w	r1, r1, r2
    c806:	4414      	add	r4, r2
    c808:	e6bd      	b.n	c586 <__adddf3+0xe6>
    c80a:	bf00      	nop

0000c80c <__aeabi_d2f>:
    c80c:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c810:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c814:	bf24      	itt	cs
    c816:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c81a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c81e:	d90d      	bls.n	c83c <__aeabi_d2f+0x30>
    c820:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c824:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c828:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c82c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c830:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c834:	bf08      	it	eq
    c836:	f020 0001 	biceq.w	r0, r0, #1
    c83a:	4770      	bx	lr
    c83c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c840:	d121      	bne.n	c886 <__aeabi_d2f+0x7a>
    c842:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c846:	bfbc      	itt	lt
    c848:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c84c:	4770      	bxlt	lr
    c84e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c852:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c856:	f1c2 0218 	rsb	r2, r2, #24
    c85a:	f1c2 0c20 	rsb	ip, r2, #32
    c85e:	fa10 f30c 	lsls.w	r3, r0, ip
    c862:	fa20 f002 	lsr.w	r0, r0, r2
    c866:	bf18      	it	ne
    c868:	f040 0001 	orrne.w	r0, r0, #1
    c86c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c870:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c874:	fa03 fc0c 	lsl.w	ip, r3, ip
    c878:	ea40 000c 	orr.w	r0, r0, ip
    c87c:	fa23 f302 	lsr.w	r3, r3, r2
    c880:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c884:	e7cc      	b.n	c820 <__aeabi_d2f+0x14>
    c886:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c88a:	d107      	bne.n	c89c <__aeabi_d2f+0x90>
    c88c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c890:	bf1e      	ittt	ne
    c892:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c896:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c89a:	4770      	bxne	lr
    c89c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c8a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c8a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c8a8:	4770      	bx	lr
    c8aa:	bf00      	nop

0000c8ac <__aeabi_uldivmod>:
    c8ac:	b953      	cbnz	r3, c8c4 <__aeabi_uldivmod+0x18>
    c8ae:	b94a      	cbnz	r2, c8c4 <__aeabi_uldivmod+0x18>
    c8b0:	2900      	cmp	r1, #0
    c8b2:	bf08      	it	eq
    c8b4:	2800      	cmpeq	r0, #0
    c8b6:	bf1c      	itt	ne
    c8b8:	f04f 31ff 	movne.w	r1, #4294967295
    c8bc:	f04f 30ff 	movne.w	r0, #4294967295
    c8c0:	f000 b980 	b.w	cbc4 <__aeabi_idiv0>
    c8c4:	f1ad 0c08 	sub.w	ip, sp, #8
    c8c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c8cc:	f000 f806 	bl	c8dc <__udivmoddi4>
    c8d0:	f8dd e004 	ldr.w	lr, [sp, #4]
    c8d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c8d8:	b004      	add	sp, #16
    c8da:	4770      	bx	lr

0000c8dc <__udivmoddi4>:
    c8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c8e0:	9d09      	ldr	r5, [sp, #36]	; 0x24
    c8e2:	4604      	mov	r4, r0
    c8e4:	4688      	mov	r8, r1
    c8e6:	2b00      	cmp	r3, #0
    c8e8:	f040 8084 	bne.w	c9f4 <__udivmoddi4+0x118>
    c8ec:	428a      	cmp	r2, r1
    c8ee:	4617      	mov	r7, r2
    c8f0:	d943      	bls.n	c97a <__udivmoddi4+0x9e>
    c8f2:	fab2 f282 	clz	r2, r2
    c8f6:	b142      	cbz	r2, c90a <__udivmoddi4+0x2e>
    c8f8:	f1c2 0020 	rsb	r0, r2, #32
    c8fc:	4091      	lsls	r1, r2
    c8fe:	4097      	lsls	r7, r2
    c900:	fa24 f000 	lsr.w	r0, r4, r0
    c904:	4094      	lsls	r4, r2
    c906:	ea40 0801 	orr.w	r8, r0, r1
    c90a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
    c90e:	0c23      	lsrs	r3, r4, #16
    c910:	fa1f fe87 	uxth.w	lr, r7
    c914:	fbb8 f6fc 	udiv	r6, r8, ip
    c918:	fb0c 8116 	mls	r1, ip, r6, r8
    c91c:	fb06 f00e 	mul.w	r0, r6, lr
    c920:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c924:	4298      	cmp	r0, r3
    c926:	d907      	bls.n	c938 <__udivmoddi4+0x5c>
    c928:	18fb      	adds	r3, r7, r3
    c92a:	f106 31ff 	add.w	r1, r6, #4294967295
    c92e:	d202      	bcs.n	c936 <__udivmoddi4+0x5a>
    c930:	4298      	cmp	r0, r3
    c932:	f200 8131 	bhi.w	cb98 <__udivmoddi4+0x2bc>
    c936:	460e      	mov	r6, r1
    c938:	1a19      	subs	r1, r3, r0
    c93a:	b2a3      	uxth	r3, r4
    c93c:	fbb1 f0fc 	udiv	r0, r1, ip
    c940:	fb0c 1110 	mls	r1, ip, r0, r1
    c944:	fb00 fe0e 	mul.w	lr, r0, lr
    c948:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c94c:	45a6      	cmp	lr, r4
    c94e:	d907      	bls.n	c960 <__udivmoddi4+0x84>
    c950:	193c      	adds	r4, r7, r4
    c952:	f100 33ff 	add.w	r3, r0, #4294967295
    c956:	d202      	bcs.n	c95e <__udivmoddi4+0x82>
    c958:	45a6      	cmp	lr, r4
    c95a:	f200 811a 	bhi.w	cb92 <__udivmoddi4+0x2b6>
    c95e:	4618      	mov	r0, r3
    c960:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    c964:	eba4 040e 	sub.w	r4, r4, lr
    c968:	2600      	movs	r6, #0
    c96a:	b11d      	cbz	r5, c974 <__udivmoddi4+0x98>
    c96c:	40d4      	lsrs	r4, r2
    c96e:	2300      	movs	r3, #0
    c970:	e9c5 4300 	strd	r4, r3, [r5]
    c974:	4631      	mov	r1, r6
    c976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c97a:	b902      	cbnz	r2, c97e <__udivmoddi4+0xa2>
    c97c:	deff      	udf	#255	; 0xff
    c97e:	fab2 f282 	clz	r2, r2
    c982:	2a00      	cmp	r2, #0
    c984:	d152      	bne.n	ca2c <__udivmoddi4+0x150>
    c986:	1bcb      	subs	r3, r1, r7
    c988:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    c98c:	fa1f f887 	uxth.w	r8, r7
    c990:	2601      	movs	r6, #1
    c992:	0c21      	lsrs	r1, r4, #16
    c994:	fbb3 fcfe 	udiv	ip, r3, lr
    c998:	fb0e 301c 	mls	r0, lr, ip, r3
    c99c:	fb08 f90c 	mul.w	r9, r8, ip
    c9a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c9a4:	4589      	cmp	r9, r1
    c9a6:	d90b      	bls.n	c9c0 <__udivmoddi4+0xe4>
    c9a8:	1879      	adds	r1, r7, r1
    c9aa:	f10c 33ff 	add.w	r3, ip, #4294967295
    c9ae:	bf2c      	ite	cs
    c9b0:	2001      	movcs	r0, #1
    c9b2:	2000      	movcc	r0, #0
    c9b4:	4589      	cmp	r9, r1
    c9b6:	d902      	bls.n	c9be <__udivmoddi4+0xe2>
    c9b8:	2800      	cmp	r0, #0
    c9ba:	f000 80f0 	beq.w	cb9e <__udivmoddi4+0x2c2>
    c9be:	469c      	mov	ip, r3
    c9c0:	eba1 0109 	sub.w	r1, r1, r9
    c9c4:	b2a3      	uxth	r3, r4
    c9c6:	fbb1 f0fe 	udiv	r0, r1, lr
    c9ca:	fb0e 1110 	mls	r1, lr, r0, r1
    c9ce:	fb08 f800 	mul.w	r8, r8, r0
    c9d2:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c9d6:	45a0      	cmp	r8, r4
    c9d8:	d907      	bls.n	c9ea <__udivmoddi4+0x10e>
    c9da:	193c      	adds	r4, r7, r4
    c9dc:	f100 33ff 	add.w	r3, r0, #4294967295
    c9e0:	d202      	bcs.n	c9e8 <__udivmoddi4+0x10c>
    c9e2:	45a0      	cmp	r8, r4
    c9e4:	f200 80d2 	bhi.w	cb8c <__udivmoddi4+0x2b0>
    c9e8:	4618      	mov	r0, r3
    c9ea:	eba4 0408 	sub.w	r4, r4, r8
    c9ee:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c9f2:	e7ba      	b.n	c96a <__udivmoddi4+0x8e>
    c9f4:	428b      	cmp	r3, r1
    c9f6:	d909      	bls.n	ca0c <__udivmoddi4+0x130>
    c9f8:	2d00      	cmp	r5, #0
    c9fa:	f000 80be 	beq.w	cb7a <__udivmoddi4+0x29e>
    c9fe:	2600      	movs	r6, #0
    ca00:	e9c5 0100 	strd	r0, r1, [r5]
    ca04:	4630      	mov	r0, r6
    ca06:	4631      	mov	r1, r6
    ca08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ca0c:	fab3 f683 	clz	r6, r3
    ca10:	2e00      	cmp	r6, #0
    ca12:	d14d      	bne.n	cab0 <__udivmoddi4+0x1d4>
    ca14:	428b      	cmp	r3, r1
    ca16:	f0c0 80b3 	bcc.w	cb80 <__udivmoddi4+0x2a4>
    ca1a:	4282      	cmp	r2, r0
    ca1c:	f240 80b0 	bls.w	cb80 <__udivmoddi4+0x2a4>
    ca20:	4630      	mov	r0, r6
    ca22:	2d00      	cmp	r5, #0
    ca24:	d0a6      	beq.n	c974 <__udivmoddi4+0x98>
    ca26:	e9c5 4800 	strd	r4, r8, [r5]
    ca2a:	e7a3      	b.n	c974 <__udivmoddi4+0x98>
    ca2c:	4097      	lsls	r7, r2
    ca2e:	f1c2 0320 	rsb	r3, r2, #32
    ca32:	fa01 f002 	lsl.w	r0, r1, r2
    ca36:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    ca3a:	40d9      	lsrs	r1, r3
    ca3c:	fa24 f303 	lsr.w	r3, r4, r3
    ca40:	fa1f f887 	uxth.w	r8, r7
    ca44:	4094      	lsls	r4, r2
    ca46:	4303      	orrs	r3, r0
    ca48:	fbb1 f0fe 	udiv	r0, r1, lr
    ca4c:	0c1e      	lsrs	r6, r3, #16
    ca4e:	fb0e 1110 	mls	r1, lr, r0, r1
    ca52:	fb00 fc08 	mul.w	ip, r0, r8
    ca56:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
    ca5a:	458c      	cmp	ip, r1
    ca5c:	d90e      	bls.n	ca7c <__udivmoddi4+0x1a0>
    ca5e:	1879      	adds	r1, r7, r1
    ca60:	f100 36ff 	add.w	r6, r0, #4294967295
    ca64:	bf2c      	ite	cs
    ca66:	f04f 0901 	movcs.w	r9, #1
    ca6a:	f04f 0900 	movcc.w	r9, #0
    ca6e:	458c      	cmp	ip, r1
    ca70:	d903      	bls.n	ca7a <__udivmoddi4+0x19e>
    ca72:	f1b9 0f00 	cmp.w	r9, #0
    ca76:	f000 8096 	beq.w	cba6 <__udivmoddi4+0x2ca>
    ca7a:	4630      	mov	r0, r6
    ca7c:	eba1 010c 	sub.w	r1, r1, ip
    ca80:	b29b      	uxth	r3, r3
    ca82:	fbb1 f6fe 	udiv	r6, r1, lr
    ca86:	fb0e 1116 	mls	r1, lr, r6, r1
    ca8a:	fb06 fc08 	mul.w	ip, r6, r8
    ca8e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    ca92:	458c      	cmp	ip, r1
    ca94:	d907      	bls.n	caa6 <__udivmoddi4+0x1ca>
    ca96:	1879      	adds	r1, r7, r1
    ca98:	f106 33ff 	add.w	r3, r6, #4294967295
    ca9c:	d202      	bcs.n	caa4 <__udivmoddi4+0x1c8>
    ca9e:	458c      	cmp	ip, r1
    caa0:	f200 8088 	bhi.w	cbb4 <__udivmoddi4+0x2d8>
    caa4:	461e      	mov	r6, r3
    caa6:	eba1 030c 	sub.w	r3, r1, ip
    caaa:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
    caae:	e770      	b.n	c992 <__udivmoddi4+0xb6>
    cab0:	f1c6 0720 	rsb	r7, r6, #32
    cab4:	fa03 f406 	lsl.w	r4, r3, r6
    cab8:	fa02 fc06 	lsl.w	ip, r2, r6
    cabc:	fa01 fe06 	lsl.w	lr, r1, r6
    cac0:	40fa      	lsrs	r2, r7
    cac2:	fa20 f807 	lsr.w	r8, r0, r7
    cac6:	40f9      	lsrs	r1, r7
    cac8:	fa00 f306 	lsl.w	r3, r0, r6
    cacc:	4322      	orrs	r2, r4
    cace:	ea48 040e 	orr.w	r4, r8, lr
    cad2:	ea4f 4812 	mov.w	r8, r2, lsr #16
    cad6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
    cada:	fa1f f982 	uxth.w	r9, r2
    cade:	fbb1 faf8 	udiv	sl, r1, r8
    cae2:	fb08 111a 	mls	r1, r8, sl, r1
    cae6:	fb0a f009 	mul.w	r0, sl, r9
    caea:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
    caee:	4570      	cmp	r0, lr
    caf0:	d90e      	bls.n	cb10 <__udivmoddi4+0x234>
    caf2:	eb12 0e0e 	adds.w	lr, r2, lr
    caf6:	f10a 31ff 	add.w	r1, sl, #4294967295
    cafa:	bf2c      	ite	cs
    cafc:	f04f 0b01 	movcs.w	fp, #1
    cb00:	f04f 0b00 	movcc.w	fp, #0
    cb04:	4570      	cmp	r0, lr
    cb06:	d902      	bls.n	cb0e <__udivmoddi4+0x232>
    cb08:	f1bb 0f00 	cmp.w	fp, #0
    cb0c:	d04e      	beq.n	cbac <__udivmoddi4+0x2d0>
    cb0e:	468a      	mov	sl, r1
    cb10:	ebae 0e00 	sub.w	lr, lr, r0
    cb14:	b2a4      	uxth	r4, r4
    cb16:	fbbe f0f8 	udiv	r0, lr, r8
    cb1a:	fb08 ee10 	mls	lr, r8, r0, lr
    cb1e:	fb00 f909 	mul.w	r9, r0, r9
    cb22:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
    cb26:	45f1      	cmp	r9, lr
    cb28:	d907      	bls.n	cb3a <__udivmoddi4+0x25e>
    cb2a:	eb12 0e0e 	adds.w	lr, r2, lr
    cb2e:	f100 31ff 	add.w	r1, r0, #4294967295
    cb32:	d201      	bcs.n	cb38 <__udivmoddi4+0x25c>
    cb34:	45f1      	cmp	r9, lr
    cb36:	d840      	bhi.n	cbba <__udivmoddi4+0x2de>
    cb38:	4608      	mov	r0, r1
    cb3a:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    cb3e:	ebae 0e09 	sub.w	lr, lr, r9
    cb42:	fba0 890c 	umull	r8, r9, r0, ip
    cb46:	45ce      	cmp	lr, r9
    cb48:	4641      	mov	r1, r8
    cb4a:	464c      	mov	r4, r9
    cb4c:	d302      	bcc.n	cb54 <__udivmoddi4+0x278>
    cb4e:	d106      	bne.n	cb5e <__udivmoddi4+0x282>
    cb50:	4543      	cmp	r3, r8
    cb52:	d204      	bcs.n	cb5e <__udivmoddi4+0x282>
    cb54:	3801      	subs	r0, #1
    cb56:	ebb8 010c 	subs.w	r1, r8, ip
    cb5a:	eb69 0402 	sbc.w	r4, r9, r2
    cb5e:	b37d      	cbz	r5, cbc0 <__udivmoddi4+0x2e4>
    cb60:	1a5a      	subs	r2, r3, r1
    cb62:	eb6e 0e04 	sbc.w	lr, lr, r4
    cb66:	40f2      	lsrs	r2, r6
    cb68:	fa0e f707 	lsl.w	r7, lr, r7
    cb6c:	fa2e f306 	lsr.w	r3, lr, r6
    cb70:	2600      	movs	r6, #0
    cb72:	4317      	orrs	r7, r2
    cb74:	e9c5 7300 	strd	r7, r3, [r5]
    cb78:	e6fc      	b.n	c974 <__udivmoddi4+0x98>
    cb7a:	462e      	mov	r6, r5
    cb7c:	4628      	mov	r0, r5
    cb7e:	e6f9      	b.n	c974 <__udivmoddi4+0x98>
    cb80:	1a84      	subs	r4, r0, r2
    cb82:	eb61 0103 	sbc.w	r1, r1, r3
    cb86:	2001      	movs	r0, #1
    cb88:	4688      	mov	r8, r1
    cb8a:	e74a      	b.n	ca22 <__udivmoddi4+0x146>
    cb8c:	3802      	subs	r0, #2
    cb8e:	443c      	add	r4, r7
    cb90:	e72b      	b.n	c9ea <__udivmoddi4+0x10e>
    cb92:	3802      	subs	r0, #2
    cb94:	443c      	add	r4, r7
    cb96:	e6e3      	b.n	c960 <__udivmoddi4+0x84>
    cb98:	3e02      	subs	r6, #2
    cb9a:	443b      	add	r3, r7
    cb9c:	e6cc      	b.n	c938 <__udivmoddi4+0x5c>
    cb9e:	f1ac 0c02 	sub.w	ip, ip, #2
    cba2:	4439      	add	r1, r7
    cba4:	e70c      	b.n	c9c0 <__udivmoddi4+0xe4>
    cba6:	3802      	subs	r0, #2
    cba8:	4439      	add	r1, r7
    cbaa:	e767      	b.n	ca7c <__udivmoddi4+0x1a0>
    cbac:	f1aa 0a02 	sub.w	sl, sl, #2
    cbb0:	4496      	add	lr, r2
    cbb2:	e7ad      	b.n	cb10 <__udivmoddi4+0x234>
    cbb4:	3e02      	subs	r6, #2
    cbb6:	4439      	add	r1, r7
    cbb8:	e775      	b.n	caa6 <__udivmoddi4+0x1ca>
    cbba:	3802      	subs	r0, #2
    cbbc:	4496      	add	lr, r2
    cbbe:	e7bc      	b.n	cb3a <__udivmoddi4+0x25e>
    cbc0:	462e      	mov	r6, r5
    cbc2:	e6d7      	b.n	c974 <__udivmoddi4+0x98>

0000cbc4 <__aeabi_idiv0>:
    cbc4:	4770      	bx	lr
    cbc6:	bf00      	nop

0000cbc8 <at_handler>:

	return err;
}

static void at_handler(void *context, const char *response)
{
    cbc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cbcc:	ed2d 8b02 	vpush	{d8}
	int err;
	bool notify = false;
	enum lte_lc_notif_type notif_type;
	struct lte_lc_evt evt;

	if (response == NULL) {
    cbd0:	460e      	mov	r6, r1
{
    cbd2:	b08c      	sub	sp, #48	; 0x30
	if (response == NULL) {
    cbd4:	b971      	cbnz	r1, cbf4 <at_handler+0x2c>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    cbd6:	49b3      	ldr	r1, [pc, #716]	; (cea4 <at_handler+0x2dc>)
    cbd8:	4bb3      	ldr	r3, [pc, #716]	; (cea8 <at_handler+0x2e0>)
		LOG_ERR("Response buffer is NULL-pointer");
    cbda:	48b4      	ldr	r0, [pc, #720]	; (ceac <at_handler+0x2e4>)
    cbdc:	1ac9      	subs	r1, r1, r3
    cbde:	08c9      	lsrs	r1, r1, #3
    cbe0:	0189      	lsls	r1, r1, #6
    cbe2:	f041 0101 	orr.w	r1, r1, #1
    cbe6:	f010 ff63 	bl	1dab0 <log_0>
	}

	if (evt_handler && notify) {
		evt_handler(&evt);
	}
}
    cbea:	b00c      	add	sp, #48	; 0x30
    cbec:	ecbd 8b02 	vpop	{d8}
    cbf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < ARRAY_SIZE(at_notifs); i++) {
    cbf4:	2700      	movs	r7, #0
    cbf6:	4cae      	ldr	r4, [pc, #696]	; (ceb0 <at_handler+0x2e8>)
		if (strncmp(at_notifs[i], notif,
    cbf8:	f854 5b04 	ldr.w	r5, [r4], #4
    cbfc:	4628      	mov	r0, r5
    cbfe:	f011 fcf6 	bl	1e5ee <strlen>
    cc02:	4631      	mov	r1, r6
    cc04:	4602      	mov	r2, r0
    cc06:	4628      	mov	r0, r5
    cc08:	f011 fd04 	bl	1e614 <strncmp>
    cc0c:	4605      	mov	r5, r0
    cc0e:	bb60      	cbnz	r0, cc6a <at_handler+0xa2>
	switch (notif_type) {
    cc10:	2f01      	cmp	r7, #1
			*type = i;
    cc12:	b2fb      	uxtb	r3, r7
	switch (notif_type) {
    cc14:	f000 8109 	beq.w	ce2a <at_handler+0x262>
    cc18:	2b02      	cmp	r3, #2
    cc1a:	f000 818f 	beq.w	cf3c <at_handler+0x374>
	size_t len = sizeof(str_buf) - 1;
    cc1e:	f04f 0809 	mov.w	r8, #9
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
    cc22:	210a      	movs	r1, #10
    cc24:	a807      	add	r0, sp, #28
	size_t len = sizeof(str_buf) - 1;
    cc26:	f8cd 8008 	str.w	r8, [sp, #8]
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
    cc2a:	f013 f82c 	bl	1fc86 <at_params_list_init>
	if (err) {
    cc2e:	4604      	mov	r4, r0
    cc30:	b1f8      	cbz	r0, cc72 <at_handler+0xaa>
    cc32:	4a9c      	ldr	r2, [pc, #624]	; (cea4 <at_handler+0x2dc>)
    cc34:	4b9c      	ldr	r3, [pc, #624]	; (cea8 <at_handler+0x2e0>)
		LOG_ERR("Could not init AT params list, error: %d", err);
    cc36:	4601      	mov	r1, r0
    cc38:	1ad2      	subs	r2, r2, r3
    cc3a:	08d2      	lsrs	r2, r2, #3
    cc3c:	0192      	lsls	r2, r2, #6
    cc3e:	489d      	ldr	r0, [pc, #628]	; (ceb4 <at_handler+0x2ec>)
    cc40:	f042 0201 	orr.w	r2, r2, #1
    cc44:	f010 ff43 	bl	1dace <log_1>
    cc48:	4b97      	ldr	r3, [pc, #604]	; (cea8 <at_handler+0x2e0>)
    cc4a:	4d96      	ldr	r5, [pc, #600]	; (cea4 <at_handler+0x2dc>)
			LOG_ERR("Failed to parse notification (error %d): %s",
    cc4c:	4630      	mov	r0, r6
    cc4e:	1aed      	subs	r5, r5, r3
    cc50:	f001 fec2 	bl	e9d8 <log_strdup>
    cc54:	08ed      	lsrs	r5, r5, #3
    cc56:	01ad      	lsls	r5, r5, #6
    cc58:	f045 0501 	orr.w	r5, r5, #1
    cc5c:	4602      	mov	r2, r0
    cc5e:	462b      	mov	r3, r5
    cc60:	4621      	mov	r1, r4
    cc62:	4895      	ldr	r0, [pc, #596]	; (ceb8 <at_handler+0x2f0>)
    cc64:	f010 ff4a 	bl	1dafc <log_2>
			return;
    cc68:	e7bf      	b.n	cbea <at_handler+0x22>
	for (size_t i = 0; i < ARRAY_SIZE(at_notifs); i++) {
    cc6a:	3701      	adds	r7, #1
    cc6c:	2f03      	cmp	r7, #3
    cc6e:	d1c3      	bne.n	cbf8 <at_handler+0x30>
    cc70:	e7bb      	b.n	cbea <at_handler+0x22>
	err = at_parser_params_from_str(notification,
    cc72:	4601      	mov	r1, r0
    cc74:	aa07      	add	r2, sp, #28
    cc76:	4630      	mov	r0, r6
    cc78:	f012 ffdd 	bl	1fc36 <at_parser_params_from_str>
	if (err) {
    cc7c:	4604      	mov	r4, r0
    cc7e:	2800      	cmp	r0, #0
    cc80:	d05e      	beq.n	cd40 <at_handler+0x178>
    cc82:	4a88      	ldr	r2, [pc, #544]	; (cea4 <at_handler+0x2dc>)
    cc84:	4b88      	ldr	r3, [pc, #544]	; (cea8 <at_handler+0x2e0>)
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
    cc86:	4601      	mov	r1, r0
    cc88:	1ad2      	subs	r2, r2, r3
    cc8a:	08d2      	lsrs	r2, r2, #3
    cc8c:	0192      	lsls	r2, r2, #6
    cc8e:	488b      	ldr	r0, [pc, #556]	; (cebc <at_handler+0x2f4>)
    cc90:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Could not get registration status, error: %d", err);
    cc94:	f010 ff1b 	bl	1dace <log_1>
	at_params_list_free(&resp_list);
    cc98:	a807      	add	r0, sp, #28
    cc9a:	f013 f820 	bl	1fcde <at_params_list_free>
		if (err) {
    cc9e:	2c00      	cmp	r4, #0
    cca0:	d1d2      	bne.n	cc48 <at_handler+0x80>
		if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
    cca2:	f005 03fb 	and.w	r3, r5, #251	; 0xfb
    cca6:	2b01      	cmp	r3, #1
    cca8:	d102      	bne.n	ccb0 <at_handler+0xe8>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    ccaa:	4885      	ldr	r0, [pc, #532]	; (cec0 <at_handler+0x2f8>)
    ccac:	f00f fed4 	bl	1ca58 <z_impl_k_sem_give>
		if (!evt_handler) {
    ccb0:	4c84      	ldr	r4, [pc, #528]	; (cec4 <at_handler+0x2fc>)
    ccb2:	6823      	ldr	r3, [r4, #0]
    ccb4:	2b00      	cmp	r3, #0
    ccb6:	d098      	beq.n	cbea <at_handler+0x22>
		if (reg_status != prev_reg_status) {
    ccb8:	4a83      	ldr	r2, [pc, #524]	; (cec8 <at_handler+0x300>)
    ccba:	7811      	ldrb	r1, [r2, #0]
    ccbc:	42a9      	cmp	r1, r5
    ccbe:	d007      	beq.n	ccd0 <at_handler+0x108>
			prev_reg_status = reg_status;
    ccc0:	7015      	strb	r5, [r2, #0]
			evt.type = LTE_LC_EVT_NW_REG_STATUS;
    ccc2:	2200      	movs	r2, #0
			evt.nw_reg_status = reg_status;
    ccc4:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
			evt.type = LTE_LC_EVT_NW_REG_STATUS;
    ccc8:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
			evt_handler(&evt);
    cccc:	a809      	add	r0, sp, #36	; 0x24
    ccce:	4798      	blx	r3
		if (memcmp(&cell, &prev_cell, sizeof(struct lte_lc_cell))) {
    ccd0:	2208      	movs	r2, #8
    ccd2:	497e      	ldr	r1, [pc, #504]	; (cecc <at_handler+0x304>)
    ccd4:	a803      	add	r0, sp, #12
    ccd6:	f011 fcac 	bl	1e632 <memcmp>
    ccda:	b178      	cbz	r0, ccfc <at_handler+0x134>
			evt.type = LTE_LC_EVT_CELL_UPDATE;
    ccdc:	2304      	movs	r3, #4
			memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
    ccde:	2208      	movs	r2, #8
    cce0:	a903      	add	r1, sp, #12
    cce2:	487a      	ldr	r0, [pc, #488]	; (cecc <at_handler+0x304>)
			evt.type = LTE_LC_EVT_CELL_UPDATE;
    cce4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
    cce8:	f011 fcb3 	bl	1e652 <memcpy>
			memcpy(&evt.cell, &cell, sizeof(struct lte_lc_cell));
    ccec:	2208      	movs	r2, #8
    ccee:	a903      	add	r1, sp, #12
    ccf0:	a80a      	add	r0, sp, #40	; 0x28
    ccf2:	f011 fcae 	bl	1e652 <memcpy>
			evt_handler(&evt);
    ccf6:	6823      	ldr	r3, [r4, #0]
    ccf8:	a809      	add	r0, sp, #36	; 0x24
    ccfa:	4798      	blx	r3
		if (memcmp(&psm_cfg, &prev_psm_cfg,
    ccfc:	2208      	movs	r2, #8
    ccfe:	4974      	ldr	r1, [pc, #464]	; (ced0 <at_handler+0x308>)
    cd00:	a805      	add	r0, sp, #20
    cd02:	f011 fc96 	bl	1e632 <memcmp>
    cd06:	b178      	cbz	r0, cd28 <at_handler+0x160>
			evt.type = LTE_LC_EVT_PSM_UPDATE;
    cd08:	2301      	movs	r3, #1
			memcpy(&prev_psm_cfg, &psm_cfg,
    cd0a:	2208      	movs	r2, #8
    cd0c:	a905      	add	r1, sp, #20
    cd0e:	4870      	ldr	r0, [pc, #448]	; (ced0 <at_handler+0x308>)
			evt.type = LTE_LC_EVT_PSM_UPDATE;
    cd10:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			memcpy(&prev_psm_cfg, &psm_cfg,
    cd14:	f011 fc9d 	bl	1e652 <memcpy>
			memcpy(&evt.psm_cfg, &psm_cfg,
    cd18:	2208      	movs	r2, #8
    cd1a:	a905      	add	r1, sp, #20
    cd1c:	a80a      	add	r0, sp, #40	; 0x28
    cd1e:	f011 fc98 	bl	1e652 <memcpy>
			evt_handler(&evt);
    cd22:	6823      	ldr	r3, [r4, #0]
    cd24:	a809      	add	r0, sp, #36	; 0x24
    cd26:	4798      	blx	r3
	bool notify = false;
    cd28:	2300      	movs	r3, #0
	if (evt_handler && notify) {
    cd2a:	4a66      	ldr	r2, [pc, #408]	; (cec4 <at_handler+0x2fc>)
    cd2c:	6812      	ldr	r2, [r2, #0]
    cd2e:	2a00      	cmp	r2, #0
    cd30:	f43f af5b 	beq.w	cbea <at_handler+0x22>
    cd34:	2b00      	cmp	r3, #0
    cd36:	f43f af58 	beq.w	cbea <at_handler+0x22>
		evt_handler(&evt);
    cd3a:	a809      	add	r0, sp, #36	; 0x24
    cd3c:	4790      	blx	r2
    cd3e:	e754      	b.n	cbea <at_handler+0x22>
	err = at_params_int_get(&resp_list,
    cd40:	2101      	movs	r1, #1
    cd42:	aa01      	add	r2, sp, #4
    cd44:	a807      	add	r0, sp, #28
    cd46:	f013 f856 	bl	1fdf6 <at_params_int_get>
	if (err) {
    cd4a:	4604      	mov	r4, r0
    cd4c:	b148      	cbz	r0, cd62 <at_handler+0x19a>
    cd4e:	4a55      	ldr	r2, [pc, #340]	; (cea4 <at_handler+0x2dc>)
    cd50:	4b55      	ldr	r3, [pc, #340]	; (cea8 <at_handler+0x2e0>)
		LOG_ERR("Could not get registration status, error: %d", err);
    cd52:	4601      	mov	r1, r0
    cd54:	1ad2      	subs	r2, r2, r3
    cd56:	08d2      	lsrs	r2, r2, #3
    cd58:	0192      	lsls	r2, r2, #6
    cd5a:	485e      	ldr	r0, [pc, #376]	; (ced4 <at_handler+0x30c>)
    cd5c:	f042 0201 	orr.w	r2, r2, #1
    cd60:	e798      	b.n	cc94 <at_handler+0xcc>
	*reg_status = status;
    cd62:	f89d 5004 	ldrb.w	r5, [sp, #4]
	if (*reg_status != LTE_LC_NW_REG_UICC_FAIL) {
    cd66:	2d5a      	cmp	r5, #90	; 0x5a
    cd68:	d047      	beq.n	cdfa <at_handler+0x232>
		err = at_params_string_get(&resp_list,
    cd6a:	2102      	movs	r1, #2
    cd6c:	ab02      	add	r3, sp, #8
    cd6e:	aa09      	add	r2, sp, #36	; 0x24
    cd70:	a807      	add	r0, sp, #28
    cd72:	f013 f853 	bl	1fe1c <at_params_string_get>
		if (err) {
    cd76:	4607      	mov	r7, r0
    cd78:	b160      	cbz	r0, cd94 <at_handler+0x1cc>
    cd7a:	4a4a      	ldr	r2, [pc, #296]	; (cea4 <at_handler+0x2dc>)
    cd7c:	4b4a      	ldr	r3, [pc, #296]	; (cea8 <at_handler+0x2e0>)
			LOG_ERR("Could not get tracking area code, error: %d", err);
    cd7e:	4601      	mov	r1, r0
    cd80:	1ad2      	subs	r2, r2, r3
    cd82:	08d2      	lsrs	r2, r2, #3
    cd84:	0192      	lsls	r2, r2, #6
    cd86:	4854      	ldr	r0, [pc, #336]	; (ced8 <at_handler+0x310>)
    cd88:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Could not get cell ID, error: %d", err);
    cd8c:	f010 fe9f 	bl	1dace <log_1>
			goto clean_exit;
    cd90:	463c      	mov	r4, r7
    cd92:	e781      	b.n	cc98 <at_handler+0xd0>
		str_buf[len] = '\0';
    cd94:	9b02      	ldr	r3, [sp, #8]
    cd96:	aa0c      	add	r2, sp, #48	; 0x30
    cd98:	4413      	add	r3, r2
		cell->tac = strtoul(str_buf, NULL, 16);
    cd9a:	4621      	mov	r1, r4
    cd9c:	2210      	movs	r2, #16
    cd9e:	a809      	add	r0, sp, #36	; 0x24
		str_buf[len] = '\0';
    cda0:	f803 4c0c 	strb.w	r4, [r3, #-12]
		cell->tac = strtoul(str_buf, NULL, 16);
    cda4:	f011 fb69 	bl	1e47a <strtoul>
		err = at_params_string_get(&resp_list,
    cda8:	2103      	movs	r1, #3
		cell->tac = strtoul(str_buf, NULL, 16);
    cdaa:	9004      	str	r0, [sp, #16]
		err = at_params_string_get(&resp_list,
    cdac:	ab02      	add	r3, sp, #8
    cdae:	aa09      	add	r2, sp, #36	; 0x24
    cdb0:	a807      	add	r0, sp, #28
		len = sizeof(str_buf) - 1;
    cdb2:	f8cd 8008 	str.w	r8, [sp, #8]
		err = at_params_string_get(&resp_list,
    cdb6:	f013 f831 	bl	1fe1c <at_params_string_get>
		if (err) {
    cdba:	4607      	mov	r7, r0
    cdbc:	b148      	cbz	r0, cdd2 <at_handler+0x20a>
    cdbe:	4a39      	ldr	r2, [pc, #228]	; (cea4 <at_handler+0x2dc>)
    cdc0:	4b39      	ldr	r3, [pc, #228]	; (cea8 <at_handler+0x2e0>)
			LOG_ERR("Could not get cell ID, error: %d", err);
    cdc2:	4601      	mov	r1, r0
    cdc4:	1ad2      	subs	r2, r2, r3
    cdc6:	08d2      	lsrs	r2, r2, #3
    cdc8:	0192      	lsls	r2, r2, #6
    cdca:	4844      	ldr	r0, [pc, #272]	; (cedc <at_handler+0x314>)
    cdcc:	f042 0201 	orr.w	r2, r2, #1
    cdd0:	e7dc      	b.n	cd8c <at_handler+0x1c4>
		str_buf[len] = '\0';
    cdd2:	9b02      	ldr	r3, [sp, #8]
    cdd4:	aa0c      	add	r2, sp, #48	; 0x30
    cdd6:	4413      	add	r3, r2
		cell->id = strtoul(str_buf, NULL, 16);
    cdd8:	4621      	mov	r1, r4
    cdda:	2210      	movs	r2, #16
    cddc:	a809      	add	r0, sp, #36	; 0x24
		str_buf[len] = '\0';
    cdde:	f803 4c0c 	strb.w	r4, [r3, #-12]
		cell->id = strtoul(str_buf, NULL, 16);
    cde2:	f011 fb4a 	bl	1e47a <strtoul>
	if ((*reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
    cde6:	f005 03fb 	and.w	r3, r5, #251	; 0xfb
    cdea:	2b01      	cmp	r3, #1
		cell->id = strtoul(str_buf, NULL, 16);
    cdec:	9003      	str	r0, [sp, #12]
	if ((*reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
    cdee:	d009      	beq.n	ce04 <at_handler+0x23c>
		psm_cfg->tau = -1;
    cdf0:	f04f 33ff 	mov.w	r3, #4294967295
		psm_cfg->active_time = -1;
    cdf4:	e9cd 3305 	strd	r3, r3, [sp, #20]
    cdf8:	e74e      	b.n	cc98 <at_handler+0xd0>
		cell->tac = UINT32_MAX;
    cdfa:	f04f 33ff 	mov.w	r3, #4294967295
		cell->id = UINT32_MAX;
    cdfe:	e9cd 3303 	strd	r3, r3, [sp, #12]
	if ((*reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
    ce02:	e7f5      	b.n	cdf0 <at_handler+0x228>
		err = parse_psm_cfg(&resp_list, true, psm_cfg);
    ce04:	2101      	movs	r1, #1
    ce06:	aa05      	add	r2, sp, #20
    ce08:	a807      	add	r0, sp, #28
    ce0a:	f006 f8d3 	bl	12fb4 <parse_psm_cfg>
		if (err) {
    ce0e:	4604      	mov	r4, r0
    ce10:	2800      	cmp	r0, #0
    ce12:	f43f af41 	beq.w	cc98 <at_handler+0xd0>
    ce16:	4a23      	ldr	r2, [pc, #140]	; (cea4 <at_handler+0x2dc>)
    ce18:	4b23      	ldr	r3, [pc, #140]	; (cea8 <at_handler+0x2e0>)
			LOG_ERR("Failed to parse PSM configuration, error: %d",
    ce1a:	4601      	mov	r1, r0
    ce1c:	1ad2      	subs	r2, r2, r3
    ce1e:	08d2      	lsrs	r2, r2, #3
    ce20:	0192      	lsls	r2, r2, #6
    ce22:	482f      	ldr	r0, [pc, #188]	; (cee0 <at_handler+0x318>)
    ce24:	f042 0201 	orr.w	r2, r2, #1
    ce28:	e734      	b.n	cc94 <at_handler+0xcc>
static int parse_rrc_mode(const char *at_response,
			  enum lte_lc_rrc_mode *mode,
			  size_t mode_index)
{
	int err, temp_mode;
	struct at_param_list resp_list = {0};
    ce2a:	e9cd 0007 	strd	r0, r0, [sp, #28]

	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
    ce2e:	2104      	movs	r1, #4
    ce30:	a807      	add	r0, sp, #28
    ce32:	f012 ff28 	bl	1fc86 <at_params_list_init>
	if (err) {
    ce36:	4604      	mov	r4, r0
    ce38:	b1b0      	cbz	r0, ce68 <at_handler+0x2a0>
    ce3a:	4a1a      	ldr	r2, [pc, #104]	; (cea4 <at_handler+0x2dc>)
    ce3c:	4b1a      	ldr	r3, [pc, #104]	; (cea8 <at_handler+0x2e0>)
		LOG_ERR("Could not init AT params list, error: %d", err);
    ce3e:	4601      	mov	r1, r0
    ce40:	1ad2      	subs	r2, r2, r3
    ce42:	08d2      	lsrs	r2, r2, #3
    ce44:	0192      	lsls	r2, r2, #6
    ce46:	481b      	ldr	r0, [pc, #108]	; (ceb4 <at_handler+0x2ec>)
    ce48:	f042 0201 	orr.w	r2, r2, #1
    ce4c:	f010 fe3f 	bl	1dace <log_1>
			LOG_ERR("Can't parse signalling mode, error: %d", err);
    ce50:	4621      	mov	r1, r4
    ce52:	4a14      	ldr	r2, [pc, #80]	; (cea4 <at_handler+0x2dc>)
    ce54:	4b14      	ldr	r3, [pc, #80]	; (cea8 <at_handler+0x2e0>)
    ce56:	4823      	ldr	r0, [pc, #140]	; (cee4 <at_handler+0x31c>)
    ce58:	1ad2      	subs	r2, r2, r3
    ce5a:	08d2      	lsrs	r2, r2, #3
    ce5c:	0192      	lsls	r2, r2, #6
    ce5e:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Can't parse eDRX, error: %d", err);
    ce62:	f010 fe34 	bl	1dace <log_1>
			return;
    ce66:	e6c0      	b.n	cbea <at_handler+0x22>
		return err;
	}

	/* Parse CSCON response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
    ce68:	4601      	mov	r1, r0
    ce6a:	aa07      	add	r2, sp, #28
    ce6c:	4630      	mov	r0, r6
    ce6e:	f012 fee2 	bl	1fc36 <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
    ce72:	4604      	mov	r4, r0
    ce74:	2800      	cmp	r0, #0
    ce76:	d039      	beq.n	ceec <at_handler+0x324>
    ce78:	4a0a      	ldr	r2, [pc, #40]	; (cea4 <at_handler+0x2dc>)
    ce7a:	4b0b      	ldr	r3, [pc, #44]	; (cea8 <at_handler+0x2e0>)
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
    ce7c:	4601      	mov	r1, r0
    ce7e:	1ad2      	subs	r2, r2, r3
    ce80:	08d2      	lsrs	r2, r2, #3
    ce82:	0192      	lsls	r2, r2, #6
    ce84:	4818      	ldr	r0, [pc, #96]	; (cee8 <at_handler+0x320>)
    ce86:	f042 0201 	orr.w	r2, r2, #1
	}

	/* Get the RRC mode from the response */
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
	if (err) {
		LOG_ERR("Could not get signalling mode, error: %d", err);
    ce8a:	f010 fe20 	bl	1dace <log_1>
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
		err = -EINVAL;
	}

clean_exit:
	at_params_list_free(&resp_list);
    ce8e:	a807      	add	r0, sp, #28
    ce90:	f012 ff25 	bl	1fcde <at_params_list_free>
		if (err) {
    ce94:	2c00      	cmp	r4, #0
    ce96:	d1db      	bne.n	ce50 <at_handler+0x288>
		evt.type = LTE_LC_EVT_RRC_UPDATE;
    ce98:	2303      	movs	r3, #3
		evt.type = LTE_LC_EVT_EDRX_UPDATE;
    ce9a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		notify = true;
    ce9e:	2301      	movs	r3, #1
		break;
    cea0:	e743      	b.n	cd2a <at_handler+0x162>
    cea2:	bf00      	nop
    cea4:	00020aa4 	.word	0x00020aa4
    cea8:	00020a64 	.word	0x00020a64
    ceac:	00022252 	.word	0x00022252
    ceb0:	00020d30 	.word	0x00020d30
    ceb4:	00022272 	.word	0x00022272
    ceb8:	0002236f 	.word	0x0002236f
    cebc:	0002229b 	.word	0x0002229b
    cec0:	20020aa0 	.word	0x20020aa0
    cec4:	20020a9c 	.word	0x20020a9c
    cec8:	20024318 	.word	0x20024318
    cecc:	20020ab8 	.word	0x20020ab8
    ced0:	20020ac0 	.word	0x20020ac0
    ced4:	000222c8 	.word	0x000222c8
    ced8:	000222f5 	.word	0x000222f5
    cedc:	00022321 	.word	0x00022321
    cee0:	00022342 	.word	0x00022342
    cee4:	0002240b 	.word	0x0002240b
    cee8:	0002239b 	.word	0x0002239b
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
    ceec:	4639      	mov	r1, r7
    ceee:	aa05      	add	r2, sp, #20
    cef0:	a807      	add	r0, sp, #28
    cef2:	f012 ff80 	bl	1fdf6 <at_params_int_get>
	if (err) {
    cef6:	4604      	mov	r4, r0
    cef8:	b148      	cbz	r0, cf0e <at_handler+0x346>
    cefa:	4a83      	ldr	r2, [pc, #524]	; (d108 <at_handler+0x540>)
    cefc:	4b83      	ldr	r3, [pc, #524]	; (d10c <at_handler+0x544>)
		LOG_ERR("Could not get signalling mode, error: %d", err);
    cefe:	4601      	mov	r1, r0
    cf00:	1ad2      	subs	r2, r2, r3
    cf02:	08d2      	lsrs	r2, r2, #3
    cf04:	0192      	lsls	r2, r2, #6
    cf06:	4882      	ldr	r0, [pc, #520]	; (d110 <at_handler+0x548>)
    cf08:	f042 0201 	orr.w	r2, r2, #1
    cf0c:	e7bd      	b.n	ce8a <at_handler+0x2c2>
	if (temp_mode == 0) {
    cf0e:	9905      	ldr	r1, [sp, #20]
    cf10:	b911      	cbnz	r1, cf18 <at_handler+0x350>
		*mode = LTE_LC_RRC_MODE_IDLE;
    cf12:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
    cf16:	e7ba      	b.n	ce8e <at_handler+0x2c6>
	} else if (temp_mode == 1) {
    cf18:	2901      	cmp	r1, #1
    cf1a:	d102      	bne.n	cf22 <at_handler+0x35a>
		*mode = LTE_LC_RRC_MODE_CONNECTED;
    cf1c:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
    cf20:	e7b5      	b.n	ce8e <at_handler+0x2c6>
    cf22:	4b7a      	ldr	r3, [pc, #488]	; (d10c <at_handler+0x544>)
    cf24:	4a78      	ldr	r2, [pc, #480]	; (d108 <at_handler+0x540>)
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
    cf26:	487b      	ldr	r0, [pc, #492]	; (d114 <at_handler+0x54c>)
    cf28:	1ad2      	subs	r2, r2, r3
    cf2a:	08d2      	lsrs	r2, r2, #3
    cf2c:	0192      	lsls	r2, r2, #6
    cf2e:	f042 0201 	orr.w	r2, r2, #1
    cf32:	f010 fdcc 	bl	1dace <log_1>
		err = -EINVAL;
    cf36:	f06f 0415 	mvn.w	r4, #21
    cf3a:	e7a8      	b.n	ce8e <at_handler+0x2c6>
{
	int err;
	uint8_t idx;
	struct at_param_list resp_list = {0};
	char tmp_buf[5];
	size_t len = sizeof(tmp_buf) - 1;
    cf3c:	2304      	movs	r3, #4
	switch (sys_mode_current) {
    cf3e:	4d76      	ldr	r5, [pc, #472]	; (d118 <at_handler+0x550>)
	size_t len = sizeof(tmp_buf) - 1;
    cf40:	9303      	str	r3, [sp, #12]
    cf42:	782b      	ldrb	r3, [r5, #0]
	struct at_param_list resp_list = {0};
    cf44:	e9cd 0007 	strd	r0, r0, [sp, #28]
	switch (sys_mode_current) {
    cf48:	3b01      	subs	r3, #1
    cf4a:	2b04      	cmp	r3, #4
    cf4c:	d804      	bhi.n	cf58 <at_handler+0x390>
    cf4e:	e8df f003 	tbb	[pc, r3]
    cf52:	2d19      	.short	0x2d19
    cf54:	1903      	.short	0x1903
    cf56:	2d          	.byte	0x2d
    cf57:	00          	.byte	0x00
    cf58:	4b6c      	ldr	r3, [pc, #432]	; (d10c <at_handler+0x544>)
    cf5a:	496b      	ldr	r1, [pc, #428]	; (d108 <at_handler+0x540>)
		LOG_ERR("No LTE connection available in this system mode");
    cf5c:	486f      	ldr	r0, [pc, #444]	; (d11c <at_handler+0x554>)
    cf5e:	1ac9      	subs	r1, r1, r3
    cf60:	08c9      	lsrs	r1, r1, #3
    cf62:	0189      	lsls	r1, r1, #6
    cf64:	f041 0101 	orr.w	r1, r1, #1
    cf68:	f010 fda2 	bl	1dab0 <log_0>
		return -ENOTCONN;
    cf6c:	f06f 0438 	mvn.w	r4, #56	; 0x38
    cf70:	4a65      	ldr	r2, [pc, #404]	; (d108 <at_handler+0x540>)
    cf72:	4b66      	ldr	r3, [pc, #408]	; (d10c <at_handler+0x544>)
			LOG_ERR("Can't parse eDRX, error: %d", err);
    cf74:	4621      	mov	r1, r4
    cf76:	1ad2      	subs	r2, r2, r3
    cf78:	08d2      	lsrs	r2, r2, #3
    cf7a:	0192      	lsls	r2, r2, #6
    cf7c:	4868      	ldr	r0, [pc, #416]	; (d120 <at_handler+0x558>)
    cf7e:	f042 0201 	orr.w	r2, r2, #1
    cf82:	e76e      	b.n	ce62 <at_handler+0x29a>
	switch (sys_mode_current) {
    cf84:	ed9f 8a67 	vldr	s16, [pc, #412]	; d124 <at_handler+0x55c>
	err = get_ptw_multiplier(&ptw_multiplier);
	if (err) {
		return err;
	}

	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
    cf88:	2105      	movs	r1, #5
    cf8a:	a807      	add	r0, sp, #28
    cf8c:	f012 fe7b 	bl	1fc86 <at_params_list_init>
	if (err) {
    cf90:	4604      	mov	r4, r0
    cf92:	b170      	cbz	r0, cfb2 <at_handler+0x3ea>
    cf94:	4b5d      	ldr	r3, [pc, #372]	; (d10c <at_handler+0x544>)
    cf96:	4a5c      	ldr	r2, [pc, #368]	; (d108 <at_handler+0x540>)
		LOG_ERR("Could not init AT params list, error: %d", err);
    cf98:	4601      	mov	r1, r0
    cf9a:	1ad2      	subs	r2, r2, r3
    cf9c:	08d2      	lsrs	r2, r2, #3
    cf9e:	0192      	lsls	r2, r2, #6
    cfa0:	4861      	ldr	r0, [pc, #388]	; (d128 <at_handler+0x560>)
    cfa2:	f042 0201 	orr.w	r2, r2, #1
    cfa6:	f010 fd92 	bl	1dace <log_1>
		return err;
    cfaa:	e7e1      	b.n	cf70 <at_handler+0x3a8>
		*ptw_multiplier = 2.56;
    cfac:	ed9f 8a5f 	vldr	s16, [pc, #380]	; d12c <at_handler+0x564>
    cfb0:	e7ea      	b.n	cf88 <at_handler+0x3c0>
	}

	/* Parse CEDRXP response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
    cfb2:	4601      	mov	r1, r0
    cfb4:	aa07      	add	r2, sp, #28
    cfb6:	4630      	mov	r0, r6
    cfb8:	f012 fe3d 	bl	1fc36 <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
    cfbc:	4604      	mov	r4, r0
    cfbe:	b188      	cbz	r0, cfe4 <at_handler+0x41c>
    cfc0:	4a51      	ldr	r2, [pc, #324]	; (d108 <at_handler+0x540>)
    cfc2:	4b52      	ldr	r3, [pc, #328]	; (d10c <at_handler+0x544>)
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
    cfc4:	4601      	mov	r1, r0
    cfc6:	1ad2      	subs	r2, r2, r3
    cfc8:	08d2      	lsrs	r2, r2, #3
    cfca:	0192      	lsls	r2, r2, #6
    cfcc:	4858      	ldr	r0, [pc, #352]	; (d130 <at_handler+0x568>)
    cfce:	f042 0201 	orr.w	r2, r2, #1
	}

	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
				   tmp_buf, &len);
	if (err) {
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
    cfd2:	f010 fd7c 	bl	1dace <log_1>
		(int)(100 * (cfg->edrx - (int)cfg->edrx)),
		(int)cfg->ptw,
		(int)(100 * (cfg->ptw - (int)cfg->ptw)));

clean_exit:
	at_params_list_free(&resp_list);
    cfd6:	a807      	add	r0, sp, #28
    cfd8:	f012 fe81 	bl	1fcde <at_params_list_free>
		if (err) {
    cfdc:	2c00      	cmp	r4, #0
    cfde:	d1c7      	bne.n	cf70 <at_handler+0x3a8>
		evt.type = LTE_LC_EVT_EDRX_UPDATE;
    cfe0:	2302      	movs	r3, #2
    cfe2:	e75a      	b.n	ce9a <at_handler+0x2d2>
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
    cfe4:	2103      	movs	r1, #3
    cfe6:	ab03      	add	r3, sp, #12
    cfe8:	aa05      	add	r2, sp, #20
    cfea:	a807      	add	r0, sp, #28
    cfec:	f012 ff16 	bl	1fe1c <at_params_string_get>
	if (err) {
    cff0:	4604      	mov	r4, r0
    cff2:	b148      	cbz	r0, d008 <at_handler+0x440>
    cff4:	4a44      	ldr	r2, [pc, #272]	; (d108 <at_handler+0x540>)
    cff6:	4b45      	ldr	r3, [pc, #276]	; (d10c <at_handler+0x544>)
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
    cff8:	4601      	mov	r1, r0
    cffa:	1ad2      	subs	r2, r2, r3
    cffc:	08d2      	lsrs	r2, r2, #3
    cffe:	0192      	lsls	r2, r2, #6
    d000:	484c      	ldr	r0, [pc, #304]	; (d134 <at_handler+0x56c>)
    d002:	f042 0201 	orr.w	r2, r2, #1
    d006:	e7e4      	b.n	cfd2 <at_handler+0x40a>
	tmp_buf[len] = '\0';
    d008:	9b03      	ldr	r3, [sp, #12]
    d00a:	aa0c      	add	r2, sp, #48	; 0x30
    d00c:	4413      	add	r3, r2
	idx = strtoul(tmp_buf, NULL, 2);
    d00e:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
    d010:	f803 0c1c 	strb.w	r0, [r3, #-28]
	idx = strtoul(tmp_buf, NULL, 2);
    d014:	2202      	movs	r2, #2
    d016:	a805      	add	r0, sp, #20
    d018:	f011 fa2f 	bl	1e47a <strtoul>
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
    d01c:	b2c0      	uxtb	r0, r0
    d01e:	280f      	cmp	r0, #15
    d020:	d844      	bhi.n	d0ac <at_handler+0x4e4>
	switch (sys_mode_current) {
    d022:	782b      	ldrb	r3, [r5, #0]
    d024:	3b01      	subs	r3, #1
    d026:	2b04      	cmp	r3, #4
    d028:	d828      	bhi.n	d07c <at_handler+0x4b4>
    d02a:	e8df f003 	tbb	[pc, r3]
    d02e:	2503      	.short	0x2503
    d030:	0327      	.short	0x0327
    d032:	25          	.byte	0x25
    d033:	00          	.byte	0x00
		multiplier = edrx_lookup_ltem[idx];
    d034:	4b40      	ldr	r3, [pc, #256]	; (d138 <at_handler+0x570>)
		multiplier = edrx_lookup_nbiot[idx];
    d036:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    d03a:	2800      	cmp	r0, #0
    d03c:	d034      	beq.n	d0a8 <at_handler+0x4e0>
    d03e:	f7ff fb7b 	bl	c738 <__aeabi_i2d>
    d042:	a32f      	add	r3, pc, #188	; (adr r3, d100 <at_handler+0x538>)
    d044:	e9d3 2300 	ldrd	r2, r3, [r3]
    d048:	f7ff f8fa 	bl	c240 <__aeabi_dmul>
    d04c:	f7ff fbde 	bl	c80c <__aeabi_d2f>
	len = sizeof(tmp_buf) - 1;
    d050:	2104      	movs	r1, #4
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    d052:	900a      	str	r0, [sp, #40]	; 0x28
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
    d054:	ab03      	add	r3, sp, #12
    d056:	aa05      	add	r2, sp, #20
    d058:	a807      	add	r0, sp, #28
	len = sizeof(tmp_buf) - 1;
    d05a:	9103      	str	r1, [sp, #12]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
    d05c:	f012 fede 	bl	1fe1c <at_params_string_get>
	if (err) {
    d060:	4604      	mov	r4, r0
    d062:	b330      	cbz	r0, d0b2 <at_handler+0x4ea>
    d064:	4a28      	ldr	r2, [pc, #160]	; (d108 <at_handler+0x540>)
    d066:	4b29      	ldr	r3, [pc, #164]	; (d10c <at_handler+0x544>)
		LOG_ERR("Failed to get PTW configuration, error: %d", err);
    d068:	4601      	mov	r1, r0
    d06a:	1ad2      	subs	r2, r2, r3
    d06c:	08d2      	lsrs	r2, r2, #3
    d06e:	0192      	lsls	r2, r2, #6
    d070:	4832      	ldr	r0, [pc, #200]	; (d13c <at_handler+0x574>)
    d072:	f042 0201 	orr.w	r2, r2, #1
    d076:	e7ac      	b.n	cfd2 <at_handler+0x40a>
		multiplier = edrx_lookup_nbiot[idx];
    d078:	4b31      	ldr	r3, [pc, #196]	; (d140 <at_handler+0x578>)
    d07a:	e7dc      	b.n	d036 <at_handler+0x46e>
    d07c:	4b23      	ldr	r3, [pc, #140]	; (d10c <at_handler+0x544>)
    d07e:	4922      	ldr	r1, [pc, #136]	; (d108 <at_handler+0x540>)
		LOG_ERR("No LTE connection available in this system mode");
    d080:	4826      	ldr	r0, [pc, #152]	; (d11c <at_handler+0x554>)
    d082:	1ac9      	subs	r1, r1, r3
    d084:	08c9      	lsrs	r1, r1, #3
    d086:	0189      	lsls	r1, r1, #6
    d088:	f041 0101 	orr.w	r1, r1, #1
    d08c:	f010 fd10 	bl	1dab0 <log_0>
		return -ENOTCONN;
    d090:	f06f 0438 	mvn.w	r4, #56	; 0x38
    d094:	4a1c      	ldr	r2, [pc, #112]	; (d108 <at_handler+0x540>)
    d096:	4b1d      	ldr	r3, [pc, #116]	; (d10c <at_handler+0x544>)
		LOG_ERR("Failed to get eDRX value, error; %d", err);
    d098:	4621      	mov	r1, r4
    d09a:	1ad2      	subs	r2, r2, r3
    d09c:	08d2      	lsrs	r2, r2, #3
    d09e:	0192      	lsls	r2, r2, #6
    d0a0:	4828      	ldr	r0, [pc, #160]	; (d144 <at_handler+0x57c>)
    d0a2:	f042 0201 	orr.w	r2, r2, #1
    d0a6:	e794      	b.n	cfd2 <at_handler+0x40a>
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    d0a8:	4827      	ldr	r0, [pc, #156]	; (d148 <at_handler+0x580>)
    d0aa:	e7d1      	b.n	d050 <at_handler+0x488>
		return -EINVAL;
    d0ac:	f06f 0415 	mvn.w	r4, #21
    d0b0:	e7f0      	b.n	d094 <at_handler+0x4cc>
	tmp_buf[len] = '\0';
    d0b2:	9b03      	ldr	r3, [sp, #12]
    d0b4:	aa0c      	add	r2, sp, #48	; 0x30
    d0b6:	4413      	add	r3, r2
	idx = strtoul(tmp_buf, NULL, 2);
    d0b8:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
    d0ba:	f803 0c1c 	strb.w	r0, [r3, #-28]
	idx = strtoul(tmp_buf, NULL, 2);
    d0be:	2202      	movs	r2, #2
    d0c0:	a805      	add	r0, sp, #20
    d0c2:	f011 f9da 	bl	1e47a <strtoul>
	if (idx > 15) {
    d0c6:	b2c1      	uxtb	r1, r0
    d0c8:	290f      	cmp	r1, #15
    d0ca:	d90c      	bls.n	d0e6 <at_handler+0x51e>
    d0cc:	4b0f      	ldr	r3, [pc, #60]	; (d10c <at_handler+0x544>)
    d0ce:	4a0e      	ldr	r2, [pc, #56]	; (d108 <at_handler+0x540>)
		LOG_ERR("Invalid PTW lookup index: %d", idx);
    d0d0:	481e      	ldr	r0, [pc, #120]	; (d14c <at_handler+0x584>)
    d0d2:	1ad2      	subs	r2, r2, r3
    d0d4:	08d2      	lsrs	r2, r2, #3
    d0d6:	0192      	lsls	r2, r2, #6
    d0d8:	f042 0201 	orr.w	r2, r2, #1
    d0dc:	f010 fcf7 	bl	1dace <log_1>
		err = -EINVAL;
    d0e0:	f06f 0415 	mvn.w	r4, #21
		goto clean_exit;
    d0e4:	e777      	b.n	cfd6 <at_handler+0x40e>
	idx += 1;
    d0e6:	3001      	adds	r0, #1
	cfg->ptw = idx * ptw_multiplier;
    d0e8:	b2c0      	uxtb	r0, r0
    d0ea:	ee07 0a90 	vmov	s15, r0
    d0ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    d0f2:	ee67 7a88 	vmul.f32	s15, s15, s16
    d0f6:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
clean_exit:
    d0fa:	e76c      	b.n	cfd6 <at_handler+0x40e>
    d0fc:	f3af 8000 	nop.w
    d100:	47ae147b 	.word	0x47ae147b
    d104:	40247ae1 	.word	0x40247ae1
    d108:	00020aa4 	.word	0x00020aa4
    d10c:	00020a64 	.word	0x00020a64
    d110:	000223c6 	.word	0x000223c6
    d114:	000223ef 	.word	0x000223ef
    d118:	20024319 	.word	0x20024319
    d11c:	00022432 	.word	0x00022432
    d120:	00022526 	.word	0x00022526
    d124:	3fa3d70a 	.word	0x3fa3d70a
    d128:	00022272 	.word	0x00022272
    d12c:	4023d70a 	.word	0x4023d70a
    d130:	00022462 	.word	0x00022462
    d134:	0002248e 	.word	0x0002248e
    d138:	000210cc 	.word	0x000210cc
    d13c:	000224de 	.word	0x000224de
    d140:	000210ec 	.word	0x000210ec
    d144:	000224ba 	.word	0x000224ba
    d148:	40a3d70a 	.word	0x40a3d70a
    d14c:	00022509 	.word	0x00022509

0000d150 <k_work_submit_to_queue.constprop.0>:
 * @param work_q Address of workqueue.
 * @param work Address of work item.
 *
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
    d150:	4601      	mov	r1, r0
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d152:	f100 0308 	add.w	r3, r0, #8
    d156:	e8d3 2fef 	ldaex	r2, [r3]
    d15a:	f042 0001 	orr.w	r0, r2, #1
    d15e:	e8c3 0fec 	stlex	ip, r0, [r3]
    d162:	f1bc 0f00 	cmp.w	ip, #0
    d166:	d1f6      	bne.n	d156 <k_work_submit_to_queue.constprop.0+0x6>
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    d168:	07d3      	lsls	r3, r2, #31
    d16a:	d402      	bmi.n	d172 <k_work_submit_to_queue.constprop.0+0x22>
		k_queue_append(&work_q->queue, work);
    d16c:	4801      	ldr	r0, [pc, #4]	; (d174 <k_work_submit_to_queue.constprop.0+0x24>)
    d16e:	f012 bfc6 	b.w	200fe <k_queue_append>
	}
}
    d172:	4770      	bx	lr
    d174:	200206c0 	.word	0x200206c0

0000d178 <app_timer_handler>:
	}
}

/* @brief triggers every minute. Publish work if one period has passed */ 
void app_timer_handler(struct k_timer *dummy)
{
    d178:	b510      	push	{r4, lr}
	static uint32_t minutes;

	minutes++;
    d17a:	4c09      	ldr	r4, [pc, #36]	; (d1a0 <app_timer_handler+0x28>)
    d17c:	4909      	ldr	r1, [pc, #36]	; (d1a4 <app_timer_handler+0x2c>)
    d17e:	6822      	ldr	r2, [r4, #0]
    d180:	3201      	adds	r2, #1
    d182:	6022      	str	r2, [r4, #0]
    d184:	434a      	muls	r2, r1
	/* This shall match the PSM interval*/
	if (minutes % TRANSMISSION_INTERVAL == 0) {\
    d186:	f1b2 3f33 	cmp.w	r2, #858993459	; 0x33333333
    d18a:	d802      	bhi.n	d192 <app_timer_handler+0x1a>
 *
 * @return N/A
 */
static inline void k_work_submit(struct k_work *work)
{
	k_work_submit_to_queue(&k_sys_work_q, work);
    d18c:	4806      	ldr	r0, [pc, #24]	; (d1a8 <app_timer_handler+0x30>)
    d18e:	f7ff ffdf 	bl	d150 <k_work_submit_to_queue.constprop.0>
		k_work_submit(&periodic_work);
	}
	printk("Elapsed time: %d\n", minutes);
    d192:	6821      	ldr	r1, [r4, #0]
    d194:	4805      	ldr	r0, [pc, #20]	; (d1ac <app_timer_handler+0x34>)
}
    d196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printk("Elapsed time: %d\n", minutes);
    d19a:	f010 b8ab 	b.w	1d2f4 <printk>
    d19e:	bf00      	nop
    d1a0:	20020820 	.word	0x20020820
    d1a4:	cccccccd 	.word	0xcccccccd
    d1a8:	20020824 	.word	0x20020824
    d1ac:	0002110c 	.word	0x0002110c

0000d1b0 <button_handler>:
	if (has_changed & button_states & DK_BTN1_MSK) {
    d1b0:	4008      	ands	r0, r1
{
    d1b2:	b508      	push	{r3, lr}
	if (has_changed & button_states & DK_BTN1_MSK) {
    d1b4:	07c3      	lsls	r3, r0, #31
    d1b6:	d507      	bpl.n	d1c8 <button_handler+0x18>
		printk("DEV_DBG: button 1 pressed\n");
    d1b8:	4804      	ldr	r0, [pc, #16]	; (d1cc <button_handler+0x1c>)
    d1ba:	f010 f89b 	bl	1d2f4 <printk>
}
    d1be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    d1c2:	4803      	ldr	r0, [pc, #12]	; (d1d0 <button_handler+0x20>)
    d1c4:	f7ff bfc4 	b.w	d150 <k_work_submit_to_queue.constprop.0>
    d1c8:	bd08      	pop	{r3, pc}
    d1ca:	bf00      	nop
    d1cc:	0002111e 	.word	0x0002111e
    d1d0:	200207a8 	.word	0x200207a8

0000d1d4 <mqtt_evt_handler>:
{
    d1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d1d8:	b083      	sub	sp, #12
	switch (evt->type) {
    d1da:	780b      	ldrb	r3, [r1, #0]
{
    d1dc:	4605      	mov	r5, r0
    d1de:	460c      	mov	r4, r1
    d1e0:	af02      	add	r7, sp, #8
    d1e2:	2b07      	cmp	r3, #7
    d1e4:	f200 8092 	bhi.w	d30c <mqtt_evt_handler+0x138>
    d1e8:	e8df f003 	tbb	[pc, r3]
    d1ec:	7b1d1604 	.word	0x7b1d1604
    d1f0:	87909090 	.word	0x87909090
		if (evt->result != 0) {
    d1f4:	69c9      	ldr	r1, [r1, #28]
    d1f6:	b119      	cbz	r1, d200 <mqtt_evt_handler+0x2c>
			printk("MQTT connect failed %d\n", evt->result);
    d1f8:	4846      	ldr	r0, [pc, #280]	; (d314 <mqtt_evt_handler+0x140>)
				printk("Could not app_disconnect: %d\n", err);
    d1fa:	f010 f87b 	bl	1d2f4 <printk>
    d1fe:	e007      	b.n	d210 <mqtt_evt_handler+0x3c>
    d200:	4845      	ldr	r0, [pc, #276]	; (d318 <mqtt_evt_handler+0x144>)
    d202:	f00f fc29 	bl	1ca58 <z_impl_k_sem_give>
		printk("[%s:%d] MQTT client connected!\n", __func__, __LINE__);
    d206:	22bd      	movs	r2, #189	; 0xbd
    d208:	4944      	ldr	r1, [pc, #272]	; (d31c <mqtt_evt_handler+0x148>)
    d20a:	4845      	ldr	r0, [pc, #276]	; (d320 <mqtt_evt_handler+0x14c>)
    d20c:	f010 f872 	bl	1d2f4 <printk>
}
    d210:	3704      	adds	r7, #4
    d212:	46bd      	mov	sp, r7
    d214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printk("[%s:%d] MQTT client disconnected %d\n", __func__,
    d218:	22c3      	movs	r2, #195	; 0xc3
    d21a:	69cb      	ldr	r3, [r1, #28]
    d21c:	4841      	ldr	r0, [pc, #260]	; (d324 <mqtt_evt_handler+0x150>)
    d21e:	493f      	ldr	r1, [pc, #252]	; (d31c <mqtt_evt_handler+0x148>)
		printk("[%s:%d] default: %d\n", __func__, __LINE__,
    d220:	f010 f868 	bl	1d2f4 <printk>
}
    d224:	e7f4      	b.n	d210 <mqtt_evt_handler+0x3c>
		printk("[%s:%d] MQTT PUBLISH result=%d len=%d\n", __func__,
    d226:	694b      	ldr	r3, [r1, #20]
    d228:	22cb      	movs	r2, #203	; 0xcb
    d22a:	9300      	str	r3, [sp, #0]
    d22c:	69cb      	ldr	r3, [r1, #28]
    d22e:	483e      	ldr	r0, [pc, #248]	; (d328 <mqtt_evt_handler+0x154>)
    d230:	493a      	ldr	r1, [pc, #232]	; (d31c <mqtt_evt_handler+0x148>)
    d232:	f010 f85f 	bl	1d2f4 <printk>
		err = publish_get_payload(c, p->message.payload.len);
    d236:	6962      	ldr	r2, [r4, #20]
	uint8_t *end = buf + length;
    d238:	4b3c      	ldr	r3, [pc, #240]	; (d32c <mqtt_evt_handler+0x158>)
	if (length > sizeof(payload_buf)) {
    d23a:	2a80      	cmp	r2, #128	; 0x80
	uint8_t *end = buf + length;
    d23c:	eb03 0602 	add.w	r6, r3, r2
	if (length > sizeof(payload_buf)) {
    d240:	d84c      	bhi.n	d2dc <mqtt_evt_handler+0x108>
	uint8_t *buf = payload_buf;
    d242:	469b      	mov	fp, r3
			printk("mqtt_read_publish_payload: EAGAIN\n");
    d244:	f8df 8118 	ldr.w	r8, [pc, #280]	; d360 <mqtt_evt_handler+0x18c>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&fds, *(uintptr_t *)&nfds, *(uintptr_t *)&timeout, K_SYSCALL_ZSOCK_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_poll(fds, nfds, timeout);
    d248:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d338 <mqtt_evt_handler+0x164>
    d24c:	f8df a114 	ldr.w	sl, [pc, #276]	; d364 <mqtt_evt_handler+0x190>
	while (buf < end) {
    d250:	455e      	cmp	r6, fp
    d252:	d816      	bhi.n	d282 <mqtt_evt_handler+0xae>
			data_print("Received: ", payload_buf,
    d254:	6965      	ldr	r5, [r4, #20]
{
    d256:	466e      	mov	r6, sp
	char buf[len + 1];
    d258:	f105 0308 	add.w	r3, r5, #8
    d25c:	f023 0307 	bic.w	r3, r3, #7
    d260:	ebad 0d03 	sub.w	sp, sp, r3
    d264:	ac02      	add	r4, sp, #8
	memcpy(buf, data, len);
    d266:	462a      	mov	r2, r5
    d268:	4930      	ldr	r1, [pc, #192]	; (d32c <mqtt_evt_handler+0x158>)
    d26a:	4620      	mov	r0, r4
    d26c:	f011 f9f1 	bl	1e652 <memcpy>
	buf[len] = 0;
    d270:	2300      	movs	r3, #0
	printk("%s%s\n", prefix, buf);
    d272:	4622      	mov	r2, r4
    d274:	492e      	ldr	r1, [pc, #184]	; (d330 <mqtt_evt_handler+0x15c>)
    d276:	482f      	ldr	r0, [pc, #188]	; (d334 <mqtt_evt_handler+0x160>)
	buf[len] = 0;
    d278:	5563      	strb	r3, [r4, r5]
	printk("%s%s\n", prefix, buf);
    d27a:	f010 f83b 	bl	1d2f4 <printk>
    d27e:	46b5      	mov	sp, r6
}
    d280:	e7c6      	b.n	d210 <mqtt_evt_handler+0x3c>
		int ret = mqtt_read_publish_payload(c, buf, end - buf);
    d282:	4659      	mov	r1, fp
    d284:	4628      	mov	r0, r5
    d286:	eba6 020b 	sub.w	r2, r6, fp
    d28a:	f011 ff4d 	bl	1f128 <mqtt_read_publish_payload>
		if (ret < 0) {
    d28e:	1e01      	subs	r1, r0, #0
    d290:	da21      	bge.n	d2d6 <mqtt_evt_handler+0x102>
			if (ret != -EAGAIN) {
    d292:	f111 0f0b 	cmn.w	r1, #11
    d296:	d10b      	bne.n	d2b0 <mqtt_evt_handler+0xdc>
			printk("mqtt_read_publish_payload: EAGAIN\n");
    d298:	4640      	mov	r0, r8
    d29a:	f010 f82b 	bl	1d2f4 <printk>
    d29e:	2101      	movs	r1, #1
    d2a0:	4652      	mov	r2, sl
    d2a2:	4825      	ldr	r0, [pc, #148]	; (d338 <mqtt_evt_handler+0x164>)
    d2a4:	f002 f80a 	bl	f2bc <z_impl_zsock_poll>
			if (err > 0 && (fds.revents & POLLIN) == POLLIN) {
    d2a8:	2800      	cmp	r0, #0
    d2aa:	dc0f      	bgt.n	d2cc <mqtt_evt_handler+0xf8>
				return -EIO;
    d2ac:	f06f 0104 	mvn.w	r1, #4
			printk("mqtt_read_publish_payload: Failed! %d\n", err);
    d2b0:	4822      	ldr	r0, [pc, #136]	; (d33c <mqtt_evt_handler+0x168>)
    d2b2:	f010 f81f 	bl	1d2f4 <printk>
			printk("Disconnecting MQTT client...\n");
    d2b6:	4822      	ldr	r0, [pc, #136]	; (d340 <mqtt_evt_handler+0x16c>)
    d2b8:	f010 f81c 	bl	1d2f4 <printk>
			err = mqtt_disconnect(c);
    d2bc:	4628      	mov	r0, r5
    d2be:	f011 fe80 	bl	1efc2 <mqtt_disconnect>
			if (err) {
    d2c2:	4601      	mov	r1, r0
    d2c4:	2800      	cmp	r0, #0
    d2c6:	d0a3      	beq.n	d210 <mqtt_evt_handler+0x3c>
				printk("Could not app_disconnect: %d\n", err);
    d2c8:	481e      	ldr	r0, [pc, #120]	; (d344 <mqtt_evt_handler+0x170>)
    d2ca:	e796      	b.n	d1fa <mqtt_evt_handler+0x26>
			if (err > 0 && (fds.revents & POLLIN) == POLLIN) {
    d2cc:	f8b9 3006 	ldrh.w	r3, [r9, #6]
    d2d0:	07db      	lsls	r3, r3, #31
    d2d2:	d4bd      	bmi.n	d250 <mqtt_evt_handler+0x7c>
    d2d4:	e7ea      	b.n	d2ac <mqtt_evt_handler+0xd8>
		if (ret == 0) {
    d2d6:	d0e9      	beq.n	d2ac <mqtt_evt_handler+0xd8>
		buf += ret;
    d2d8:	448b      	add	fp, r1
    d2da:	e7b9      	b.n	d250 <mqtt_evt_handler+0x7c>
		return -EMSGSIZE;
    d2dc:	f06f 0123 	mvn.w	r1, #35	; 0x23
    d2e0:	e7e6      	b.n	d2b0 <mqtt_evt_handler+0xdc>
		if (evt->result != 0) {
    d2e2:	69c9      	ldr	r1, [r1, #28]
    d2e4:	b109      	cbz	r1, d2ea <mqtt_evt_handler+0x116>
			printk("MQTT PUBACK error %d\n", evt->result);
    d2e6:	4818      	ldr	r0, [pc, #96]	; (d348 <mqtt_evt_handler+0x174>)
    d2e8:	e787      	b.n	d1fa <mqtt_evt_handler+0x26>
    d2ea:	4818      	ldr	r0, [pc, #96]	; (d34c <mqtt_evt_handler+0x178>)
    d2ec:	f00f fbb4 	bl	1ca58 <z_impl_k_sem_give>
		printk("[%s:%d] PUBACK packet id: %u\n", __func__, __LINE__,
    d2f0:	22e3      	movs	r2, #227	; 0xe3
    d2f2:	88a3      	ldrh	r3, [r4, #4]
    d2f4:	4909      	ldr	r1, [pc, #36]	; (d31c <mqtt_evt_handler+0x148>)
    d2f6:	4816      	ldr	r0, [pc, #88]	; (d350 <mqtt_evt_handler+0x17c>)
    d2f8:	e792      	b.n	d220 <mqtt_evt_handler+0x4c>
		if (evt->result != 0) {
    d2fa:	69c9      	ldr	r1, [r1, #28]
    d2fc:	b109      	cbz	r1, d302 <mqtt_evt_handler+0x12e>
			printk("MQTT SUBACK error %d\n", evt->result);
    d2fe:	4815      	ldr	r0, [pc, #84]	; (d354 <mqtt_evt_handler+0x180>)
    d300:	e77b      	b.n	d1fa <mqtt_evt_handler+0x26>
		printk("[%s:%d] SUBACK packet id: %u\n", __func__, __LINE__,
    d302:	22ed      	movs	r2, #237	; 0xed
    d304:	88a3      	ldrh	r3, [r4, #4]
    d306:	4905      	ldr	r1, [pc, #20]	; (d31c <mqtt_evt_handler+0x148>)
    d308:	4813      	ldr	r0, [pc, #76]	; (d358 <mqtt_evt_handler+0x184>)
    d30a:	e789      	b.n	d220 <mqtt_evt_handler+0x4c>
		printk("[%s:%d] default: %d\n", __func__, __LINE__,
    d30c:	22f2      	movs	r2, #242	; 0xf2
    d30e:	4903      	ldr	r1, [pc, #12]	; (d31c <mqtt_evt_handler+0x148>)
    d310:	4812      	ldr	r0, [pc, #72]	; (d35c <mqtt_evt_handler+0x188>)
    d312:	e785      	b.n	d220 <mqtt_evt_handler+0x4c>
    d314:	00021139 	.word	0x00021139
    d318:	20020208 	.word	0x20020208
    d31c:	00021639 	.word	0x00021639
    d320:	00021151 	.word	0x00021151
    d324:	00021171 	.word	0x00021171
    d328:	00021196 	.word	0x00021196
    d32c:	20022357 	.word	0x20022357
    d330:	000212c0 	.word	0x000212c0
    d334:	000212cb 	.word	0x000212cb
    d338:	20020818 	.word	0x20020818
    d33c:	000211e0 	.word	0x000211e0
    d340:	00021207 	.word	0x00021207
    d344:	00021225 	.word	0x00021225
    d348:	00021243 	.word	0x00021243
    d34c:	20020220 	.word	0x20020220
    d350:	00021259 	.word	0x00021259
    d354:	00021277 	.word	0x00021277
    d358:	0002128d 	.word	0x0002128d
    d35c:	000212ab 	.word	0x000212ab
    d360:	000211bd 	.word	0x000211bd
    d364:	006ddd00 	.word	0x006ddd00

0000d368 <data_publish.constprop.0>:
	param.message.topic.qos = qos;
    d368:	2301      	movs	r3, #1
static int data_publish(struct mqtt_client *c, enum mqtt_qos qos,
    d36a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	param.message.topic.topic.utf8 = CONFIG_MQTT_PUB_TOPIC;
    d36e:	4d1c      	ldr	r5, [pc, #112]	; (d3e0 <data_publish.constprop.0+0x78>)
static int data_publish(struct mqtt_client *c, enum mqtt_qos qos,
    d370:	b086      	sub	sp, #24
    d372:	4606      	mov	r6, r0
    d374:	af00      	add	r7, sp, #0
	param.message.topic.topic.size = strlen(CONFIG_MQTT_PUB_TOPIC);
    d376:	4628      	mov	r0, r5
static int data_publish(struct mqtt_client *c, enum mqtt_qos qos,
    d378:	460c      	mov	r4, r1
	param.message.topic.qos = qos;
    d37a:	723b      	strb	r3, [r7, #8]
	param.message.topic.topic.utf8 = CONFIG_MQTT_PUB_TOPIC;
    d37c:	603d      	str	r5, [r7, #0]
	param.message.topic.topic.size = strlen(CONFIG_MQTT_PUB_TOPIC);
    d37e:	f011 f936 	bl	1e5ee <strlen>
	param.message.payload.len = len;
    d382:	e9c7 6403 	strd	r6, r4, [r7, #12]
	param.message.topic.topic.size = strlen(CONFIG_MQTT_PUB_TOPIC);
    d386:	6078      	str	r0, [r7, #4]
	if (z_syscall_trap()) {
		return (uint32_t) arch_syscall_invoke0(K_SYSCALL_SYS_RAND32_GET);
	}
#endif
	compiler_barrier();
	return z_impl_sys_rand32_get();
    d388:	f003 fbba 	bl	10b00 <z_impl_sys_rand32_get>
	param.dup_flag = 0;
    d38c:	7dbb      	ldrb	r3, [r7, #22]
{
    d38e:	46e8      	mov	r8, sp
	param.dup_flag = 0;
    d390:	f023 0303 	bic.w	r3, r3, #3
    d394:	75bb      	strb	r3, [r7, #22]
	char buf[len + 1];
    d396:	f104 0308 	add.w	r3, r4, #8
    d39a:	f023 0307 	bic.w	r3, r3, #7
    d39e:	ebad 0d03 	sub.w	sp, sp, r3
	memcpy(buf, data, len);
    d3a2:	4622      	mov	r2, r4
    d3a4:	4631      	mov	r1, r6
	param.message_id = sys_rand32_get();
    d3a6:	82b8      	strh	r0, [r7, #20]
	memcpy(buf, data, len);
    d3a8:	4668      	mov	r0, sp
    d3aa:	f011 f952 	bl	1e652 <memcpy>
	buf[len] = 0;
    d3ae:	2300      	movs	r3, #0
	printk("%s%s\n", prefix, buf);
    d3b0:	466a      	mov	r2, sp
	buf[len] = 0;
    d3b2:	f80d 3004 	strb.w	r3, [sp, r4]
	printk("%s%s\n", prefix, buf);
    d3b6:	490b      	ldr	r1, [pc, #44]	; (d3e4 <data_publish.constprop.0+0x7c>)
    d3b8:	480b      	ldr	r0, [pc, #44]	; (d3e8 <data_publish.constprop.0+0x80>)
    d3ba:	f00f ff9b 	bl	1d2f4 <printk>
		(unsigned int)strlen(CONFIG_MQTT_PUB_TOPIC));
    d3be:	4628      	mov	r0, r5
    d3c0:	46c5      	mov	sp, r8
    d3c2:	f011 f914 	bl	1e5ee <strlen>
	printk("to topic: %s len: %u\n",
    d3c6:	4629      	mov	r1, r5
		(unsigned int)strlen(CONFIG_MQTT_PUB_TOPIC));
    d3c8:	4602      	mov	r2, r0
	printk("to topic: %s len: %u\n",
    d3ca:	4808      	ldr	r0, [pc, #32]	; (d3ec <data_publish.constprop.0+0x84>)
    d3cc:	f00f ff92 	bl	1d2f4 <printk>
	return mqtt_publish(c, &param);
    d3d0:	4639      	mov	r1, r7
    d3d2:	4807      	ldr	r0, [pc, #28]	; (d3f0 <data_publish.constprop.0+0x88>)
    d3d4:	f011 fdb0 	bl	1ef38 <mqtt_publish>
}
    d3d8:	3718      	adds	r7, #24
    d3da:	46bd      	mov	sp, r7
    d3dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d3e0:	000212d1 	.word	0x000212d1
    d3e4:	000212ec 	.word	0x000212ec
    d3e8:	000212cb 	.word	0x000212cb
    d3ec:	000212f9 	.word	0x000212f9
    d3f0:	200207b4 	.word	0x200207b4

0000d3f4 <bsd_recoverable_error_handler>:
{
    d3f4:	4601      	mov	r1, r0
	printk("bsdlib recoverable error: %u\n", (unsigned int)err);
    d3f6:	4801      	ldr	r0, [pc, #4]	; (d3fc <bsd_recoverable_error_handler+0x8>)
    d3f8:	f00f bf7c 	b.w	1d2f4 <printk>
    d3fc:	0002130f 	.word	0x0002130f

0000d400 <timer_init>:

K_TIMER_DEFINE(app_timer, app_timer_handler, NULL);

/* @brief initializes timer that triggers every minute */
void timer_init(void)
{
    d400:	b507      	push	{r0, r1, r2, lr}
    d402:	2300      	movs	r3, #0
	compiler_barrier();
    d404:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
	z_impl_k_timer_start(timer, duration, period);
    d408:	4803      	ldr	r0, [pc, #12]	; (d418 <timer_init+0x18>)
    d40a:	e9cd 2300 	strd	r2, r3, [sp]
    d40e:	f00f fe2b 	bl	1d068 <z_impl_k_timer_start>
	k_timer_start(&app_timer, K_MINUTES(1), K_MINUTES(1));
}
    d412:	b003      	add	sp, #12
    d414:	f85d fb04 	ldr.w	pc, [sp], #4
    d418:	200200f0 	.word	0x200200f0

0000d41c <app_connect>:
	//Transmission phase over.
	dk_set_led(DK_LED2, 1);
	app_disconnect();
}

void app_connect(void) {
    d41c:	b510      	push	{r4, lr}
	printk("Connecting\n");
    d41e:	4815      	ldr	r0, [pc, #84]	; (d474 <app_connect+0x58>)
    d420:	f00f ff68 	bl	1d2f4 <printk>
	int err;

	err = lte_lc_normal();
    d424:	f005 fe64 	bl	130f0 <lte_lc_normal>
	if(err) {
    d428:	b110      	cbz	r0, d430 <app_connect+0x14>
		printk("LTE: Normal mode failed\n");
    d42a:	4813      	ldr	r0, [pc, #76]	; (d478 <app_connect+0x5c>)
    d42c:	f00f ff62 	bl	1d2f4 <printk>
	}

	err = mqtt_connect(&client);
    d430:	4c12      	ldr	r4, [pc, #72]	; (d47c <app_connect+0x60>)
    d432:	4620      	mov	r0, r4
    d434:	f011 fd3e 	bl	1eeb4 <mqtt_connect>
	if (err != 0) {
    d438:	4601      	mov	r1, r0
    d43a:	b120      	cbz	r0, d446 <app_connect+0x2a>
		printk("ERROR: mqtt_connect %d\n", err);
    d43c:	4810      	ldr	r0, [pc, #64]	; (d480 <app_connect+0x64>)
	}
	app_connected = true;

	/* Wait for connection to finish */
	k_sem_take(&mqtt_connect_ok, K_FOREVER);
}
    d43e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("ERROR: fds_init %d\n", err);
    d442:	f00f bf57 	b.w	1d2f4 <printk>
	if (c->transport.type == MQTT_TRANSPORT_NON_SECURE) {
    d446:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    d44a:	b11b      	cbz	r3, d454 <app_connect+0x38>
		printk("ERROR: fds_init %d\n", err);
    d44c:	f06f 0122 	mvn.w	r1, #34	; 0x22
    d450:	480c      	ldr	r0, [pc, #48]	; (d484 <app_connect+0x68>)
    d452:	e7f4      	b.n	d43e <app_connect+0x22>
		fds.fd = c->transport.tcp.sock;
    d454:	4a0c      	ldr	r2, [pc, #48]	; (d488 <app_connect+0x6c>)
    d456:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d458:	6013      	str	r3, [r2, #0]
	fds.events = POLLIN;
    d45a:	2301      	movs	r3, #1
    d45c:	8093      	strh	r3, [r2, #4]
	app_connected = true;
    d45e:	4a0b      	ldr	r2, [pc, #44]	; (d48c <app_connect+0x70>)
    d460:	7013      	strb	r3, [r2, #0]
	return z_impl_k_sem_take(sem, timeout);
    d462:	f04f 32ff 	mov.w	r2, #4294967295
}
    d466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d46a:	f04f 33ff 	mov.w	r3, #4294967295
    d46e:	4808      	ldr	r0, [pc, #32]	; (d490 <app_connect+0x74>)
    d470:	f00f bb18 	b.w	1caa4 <z_impl_k_sem_take>
    d474:	0002132d 	.word	0x0002132d
    d478:	00021339 	.word	0x00021339
    d47c:	200207b4 	.word	0x200207b4
    d480:	00021352 	.word	0x00021352
    d484:	0002136a 	.word	0x0002136a
    d488:	20020818 	.word	0x20020818
    d48c:	20022356 	.word	0x20022356
    d490:	20020208 	.word	0x20020208

0000d494 <app_disconnect>:

void app_disconnect(void) {
    d494:	b508      	push	{r3, lr}
	printk("Disconnecting\n");
    d496:	480d      	ldr	r0, [pc, #52]	; (d4cc <app_disconnect+0x38>)
    d498:	f00f ff2c 	bl	1d2f4 <printk>
	int err;

	app_connected = 0;
    d49c:	2200      	movs	r2, #0
    d49e:	4b0c      	ldr	r3, [pc, #48]	; (d4d0 <app_disconnect+0x3c>)
    d4a0:	701a      	strb	r2, [r3, #0]

	err = lte_lc_offline();
    d4a2:	f005 fe17 	bl	130d4 <lte_lc_offline>
	if(err) {
    d4a6:	b110      	cbz	r0, d4ae <app_disconnect+0x1a>
		printk("LTE: Offline mode failed\n");
    d4a8:	480a      	ldr	r0, [pc, #40]	; (d4d4 <app_disconnect+0x40>)
    d4aa:	f00f ff23 	bl	1d2f4 <printk>
	}

	err = mqtt_disconnect(&client);
    d4ae:	480a      	ldr	r0, [pc, #40]	; (d4d8 <app_disconnect+0x44>)
    d4b0:	f011 fd87 	bl	1efc2 <mqtt_disconnect>
	if (err != 0) {
    d4b4:	4601      	mov	r1, r0
    d4b6:	b120      	cbz	r0, d4c2 <app_disconnect+0x2e>
	if(err) {
		printk("LTE: Flight mode failed\n");
	}

	printk("LTE: offline\n");*/
}
    d4b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("ERROR: mqtt_connect %d\n", err);
    d4bc:	4807      	ldr	r0, [pc, #28]	; (d4dc <app_disconnect+0x48>)
    d4be:	f00f bf19 	b.w	1d2f4 <printk>
	printk("MQTT: disconnected\n");
    d4c2:	4807      	ldr	r0, [pc, #28]	; (d4e0 <app_disconnect+0x4c>)
}
    d4c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printk("MQTT: disconnected\n");
    d4c8:	f00f bf14 	b.w	1d2f4 <printk>
    d4cc:	0002137e 	.word	0x0002137e
    d4d0:	20022356 	.word	0x20022356
    d4d4:	0002138d 	.word	0x0002138d
    d4d8:	200207b4 	.word	0x200207b4
    d4dc:	00021352 	.word	0x00021352
    d4e0:	000213a7 	.word	0x000213a7

0000d4e4 <publish_samples>:
void publish_samples(struct k_work *item) {
    d4e4:	b508      	push	{r3, lr}
	app_connect();
    d4e6:	f7ff ff99 	bl	d41c <app_connect>
	printk("DEV: Publish Samples");
    d4ea:	480c      	ldr	r0, [pc, #48]	; (d51c <publish_samples+0x38>)
    d4ec:	f00f ff02 	bl	1d2f4 <printk>
	dk_set_led(DK_LED2, 0);
    d4f0:	2100      	movs	r1, #0
    d4f2:	2001      	movs	r0, #1
    d4f4:	f004 fe2a 	bl	1214c <dk_set_led>
	data_publish(&client, MQTT_QOS_1_AT_LEAST_ONCE, testData, TEST_DATA_SIZE);
    d4f8:	4b09      	ldr	r3, [pc, #36]	; (d520 <publish_samples+0x3c>)
    d4fa:	2164      	movs	r1, #100	; 0x64
    d4fc:	6818      	ldr	r0, [r3, #0]
    d4fe:	f7ff ff33 	bl	d368 <data_publish.constprop.0>
	return z_impl_k_sleep(timeout);
    d502:	2100      	movs	r1, #0
    d504:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d508:	f00f fa80 	bl	1ca0c <z_impl_k_sleep>
	dk_set_led(DK_LED2, 1);
    d50c:	2101      	movs	r1, #1
    d50e:	4608      	mov	r0, r1
    d510:	f004 fe1c 	bl	1214c <dk_set_led>
}
    d514:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	app_disconnect();
    d518:	f7ff bfbc 	b.w	d494 <app_disconnect>
    d51c:	000213bb 	.word	0x000213bb
    d520:	20020000 	.word	0x20020000

0000d524 <publish_alarm>:
void publish_alarm(struct k_work *item) {
    d524:	b507      	push	{r0, r1, r2, lr}
	app_connect();
    d526:	f7ff ff79 	bl	d41c <app_connect>
	printk("DEV: Publish alarm\n");
    d52a:	4812      	ldr	r0, [pc, #72]	; (d574 <publish_alarm+0x50>)
    d52c:	f00f fee2 	bl	1d2f4 <printk>
	dk_set_led(DK_LED2, 0);
    d530:	2100      	movs	r1, #0
    d532:	2001      	movs	r0, #1
    d534:	f004 fe0a 	bl	1214c <dk_set_led>
    d538:	f003 fae2 	bl	10b00 <z_impl_sys_rand32_get>
	random_sample = sys_rand32_get() % 255;
    d53c:	23ff      	movs	r3, #255	; 0xff
    d53e:	fbb0 f3f3 	udiv	r3, r0, r3
	data_publish(&client, MQTT_QOS_1_AT_LEAST_ONCE, &curr_sample, 1);
    d542:	2101      	movs	r1, #1
	random_sample = sys_rand32_get() % 255;
    d544:	4403      	add	r3, r0
	data_publish(&client, MQTT_QOS_1_AT_LEAST_ONCE, &curr_sample, 1);
    d546:	f10d 0007 	add.w	r0, sp, #7
	random_sample = sys_rand32_get() % 255;
    d54a:	f88d 3007 	strb.w	r3, [sp, #7]
	data_publish(&client, MQTT_QOS_1_AT_LEAST_ONCE, &curr_sample, 1);
    d54e:	f7ff ff0b 	bl	d368 <data_publish.constprop.0>
	return z_impl_k_sem_take(sem, timeout);
    d552:	f04f 32ff 	mov.w	r2, #4294967295
    d556:	f04f 33ff 	mov.w	r3, #4294967295
    d55a:	4807      	ldr	r0, [pc, #28]	; (d578 <publish_alarm+0x54>)
    d55c:	f00f faa2 	bl	1caa4 <z_impl_k_sem_take>
	dk_set_led(DK_LED2, 1);
    d560:	2101      	movs	r1, #1
    d562:	4608      	mov	r0, r1
    d564:	f004 fdf2 	bl	1214c <dk_set_led>
	app_disconnect();
    d568:	f7ff ff94 	bl	d494 <app_disconnect>
}
    d56c:	b003      	add	sp, #12
    d56e:	f85d fb04 	ldr.w	pc, [sp], #4
    d572:	bf00      	nop
    d574:	000213d0 	.word	0x000213d0
    d578:	20020220 	.word	0x20020220

0000d57c <init_work_items>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    d57c:	2300      	movs	r3, #0
    d57e:	4a05      	ldr	r2, [pc, #20]	; (d594 <init_work_items+0x18>)
    d580:	4905      	ldr	r1, [pc, #20]	; (d598 <init_work_items+0x1c>)
    d582:	6013      	str	r3, [r2, #0]
    d584:	e9c2 1301 	strd	r1, r3, [r2, #4]
    d588:	4a04      	ldr	r2, [pc, #16]	; (d59c <init_work_items+0x20>)
    d58a:	4905      	ldr	r1, [pc, #20]	; (d5a0 <init_work_items+0x24>)
    d58c:	6013      	str	r3, [r2, #0]
    d58e:	e9c2 1301 	strd	r1, r3, [r2, #4]

void init_work_items(void) {
	k_work_init(&alarm_work, publish_alarm);
	k_work_init(&periodic_work, publish_samples);
}
    d592:	4770      	bx	lr
    d594:	200207a8 	.word	0x200207a8
    d598:	0000d525 	.word	0x0000d525
    d59c:	20020824 	.word	0x20020824
    d5a0:	0000d4e5 	.word	0x0000d4e5

0000d5a4 <main>:

void main(void)
{
    d5a4:	b530      	push	{r4, r5, lr}
	struct addrinfo hints = {
    d5a6:	2401      	movs	r4, #1
{
    d5a8:	b09b      	sub	sp, #108	; 0x6c
	int err;

    printk("MQTT gas sensor application example started\n");
    d5aa:	4866      	ldr	r0, [pc, #408]	; (d744 <main+0x1a0>)
    d5ac:	f00f fea2 	bl	1d2f4 <printk>
		printk("LTE Link Connecting ...\n");
    d5b0:	4865      	ldr	r0, [pc, #404]	; (d748 <main+0x1a4>)
    d5b2:	f00f fe9f 	bl	1d2f4 <printk>
		err = lte_lc_init_and_connect();
    d5b6:	f012 fc69 	bl	1fe8c <lte_lc_init_and_connect>
		printk("LTE Link Connected!\n");
    d5ba:	4864      	ldr	r0, [pc, #400]	; (d74c <main+0x1a8>)
    d5bc:	f00f fe9a 	bl	1d2f4 <printk>
	mqtt_client_init(client);
    d5c0:	4863      	ldr	r0, [pc, #396]	; (d750 <main+0x1ac>)
    d5c2:	f011 fc5d 	bl	1ee80 <mqtt_client_init>
	struct addrinfo hints = {
    d5c6:	2250      	movs	r2, #80	; 0x50
    d5c8:	2100      	movs	r1, #0
    d5ca:	a806      	add	r0, sp, #24
    d5cc:	f011 f86c 	bl	1e6a8 <memset>

static inline int getaddrinfo(const char *host, const char *service,
			      const struct zsock_addrinfo *hints,
			      struct zsock_addrinfo **res)
{
	return zsock_getaddrinfo(host, service, hints, res);
    d5d0:	2100      	movs	r1, #0
    d5d2:	4860      	ldr	r0, [pc, #384]	; (d754 <main+0x1b0>)
    d5d4:	ab01      	add	r3, sp, #4
    d5d6:	aa06      	add	r2, sp, #24
    d5d8:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d5dc:	f010 fd4c 	bl	1e078 <zsock_getaddrinfo>
	if (err) {
    d5e0:	4d5d      	ldr	r5, [pc, #372]	; (d758 <main+0x1b4>)
    d5e2:	4601      	mov	r1, r0
    d5e4:	2800      	cmp	r0, #0
    d5e6:	d066      	beq.n	d6b6 <main+0x112>
		printk("ERROR: getaddrinfo failed %d\n", err);
    d5e8:	485c      	ldr	r0, [pc, #368]	; (d75c <main+0x1b8>)
    d5ea:	f00f fe83 	bl	1d2f4 <printk>
	client->broker = &broker;
    d5ee:	4c58      	ldr	r4, [pc, #352]	; (d750 <main+0x1ac>)
	client->evt_cb = mqtt_evt_handler;
    d5f0:	4b5b      	ldr	r3, [pc, #364]	; (d760 <main+0x1bc>)
	client->client_id.utf8 = (uint8_t *)CONFIG_MQTT_CLIENT_ID;
    d5f2:	485c      	ldr	r0, [pc, #368]	; (d764 <main+0x1c0>)
	client->evt_cb = mqtt_evt_handler;
    d5f4:	64a3      	str	r3, [r4, #72]	; 0x48
	client->broker = &broker;
    d5f6:	6365      	str	r5, [r4, #52]	; 0x34
	client->client_id.utf8 = (uint8_t *)CONFIG_MQTT_CLIENT_ID;
    d5f8:	62e0      	str	r0, [r4, #44]	; 0x2c
	client->client_id.size = strlen(CONFIG_MQTT_CLIENT_ID);
    d5fa:	f010 fff8 	bl	1e5ee <strlen>
	client->protocol_version = MQTT_VERSION_3_1_1;
    d5fe:	2204      	movs	r2, #4
    d600:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
	client->rx_buf = rx_buffer;
    d604:	4a58      	ldr	r2, [pc, #352]	; (d768 <main+0x1c4>)
	client->password = NULL;
    d606:	2300      	movs	r3, #0
	client->rx_buf = rx_buffer;
    d608:	64e2      	str	r2, [r4, #76]	; 0x4c
	client->rx_buf_size = sizeof(rx_buffer);
    d60a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
	client->tx_buf = tx_buffer;
    d60e:	4957      	ldr	r1, [pc, #348]	; (d76c <main+0x1c8>)
	client->client_id.size = strlen(CONFIG_MQTT_CLIENT_ID);
    d610:	6320      	str	r0, [r4, #48]	; 0x30
	printk("DEV_DBG: Initalizing buttons and leds.\n");
    d612:	4857      	ldr	r0, [pc, #348]	; (d770 <main+0x1cc>)
	client->tx_buf_size = sizeof(tx_buffer);
    d614:	e9c4 1215 	strd	r1, r2, [r4, #84]	; 0x54
	client->user_name = NULL;
    d618:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
	client->rx_buf_size = sizeof(rx_buffer);
    d61c:	6522      	str	r2, [r4, #80]	; 0x50
	client->transport.type = MQTT_TRANSPORT_NON_SECURE;
    d61e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	printk("DEV_DBG: Initalizing buttons and leds.\n");
    d622:	f00f fe67 	bl	1d2f4 <printk>
	err = dk_buttons_init(button_handler);
    d626:	4853      	ldr	r0, [pc, #332]	; (d774 <main+0x1d0>)
    d628:	f004 fcda 	bl	11fe0 <dk_buttons_init>
	if (err) {
    d62c:	4601      	mov	r1, r0
    d62e:	b110      	cbz	r0, d636 <main+0x92>
		printk("Could not initialize buttons, err code: %d\n", err);
    d630:	4851      	ldr	r0, [pc, #324]	; (d778 <main+0x1d4>)
    d632:	f00f fe5f 	bl	1d2f4 <printk>
	err = dk_leds_init();
    d636:	f004 fc83 	bl	11f40 <dk_leds_init>
	if (err) {
    d63a:	4601      	mov	r1, r0
    d63c:	b110      	cbz	r0, d644 <main+0xa0>
		printk("Could not initialize leds, err code: %d\n", err);
    d63e:	484f      	ldr	r0, [pc, #316]	; (d77c <main+0x1d8>)
    d640:	f00f fe58 	bl	1d2f4 <printk>
	err = dk_set_leds_state(DK_ALL_LEDS_MSK, DK_NO_LEDS_MSK);
    d644:	2100      	movs	r1, #0
    d646:	200f      	movs	r0, #15
    d648:	f012 fa95 	bl	1fb76 <dk_set_leds_state>
	if (err) {
    d64c:	4601      	mov	r1, r0
    d64e:	b110      	cbz	r0, d656 <main+0xb2>
		printk("Could not set leds state, err code: %d\n", err);
    d650:	484b      	ldr	r0, [pc, #300]	; (d780 <main+0x1dc>)
    d652:	f00f fe4f 	bl	1d2f4 <printk>
	client_init(&client);

	//app_connect();

	buttons_leds_init();
	timer_init();
    d656:	f7ff fed3 	bl	d400 <timer_init>
	init_work_items();
    d65a:	f7ff ff8f 	bl	d57c <init_work_items>
	
	err = lte_lc_offline();
    d65e:	f005 fd39 	bl	130d4 <lte_lc_offline>
	if(err) {
    d662:	b110      	cbz	r0, d66a <main+0xc6>
		printk("LTE: Offline mode failed\n");
    d664:	4847      	ldr	r0, [pc, #284]	; (d784 <main+0x1e0>)
    d666:	f00f fe45 	bl	1d2f4 <printk>
	}


	//Lighting LED1 to indicate that the application is connected and enterin main loop.
	dk_set_led(DK_LED1, 0);
    d66a:	2100      	movs	r1, #0
    d66c:	4608      	mov	r0, r1
    d66e:	f004 fd6d 	bl	1214c <dk_set_led>

	while (1) {
		if(app_connected) {
    d672:	4d45      	ldr	r5, [pc, #276]	; (d788 <main+0x1e4>)
    d674:	4c45      	ldr	r4, [pc, #276]	; (d78c <main+0x1e8>)
    d676:	782b      	ldrb	r3, [r5, #0]
    d678:	2b00      	cmp	r3, #0
    d67a:	d05d      	beq.n	d738 <main+0x194>
			err = poll(&fds, 1, mqtt_keepalive_time_left(&client));
    d67c:	4834      	ldr	r0, [pc, #208]	; (d750 <main+0x1ac>)
    d67e:	f011 fd1b 	bl	1f0b8 <mqtt_keepalive_time_left>
    d682:	4602      	mov	r2, r0
    d684:	2101      	movs	r1, #1
    d686:	4620      	mov	r0, r4
    d688:	f001 fe18 	bl	f2bc <z_impl_zsock_poll>
			if (err < 0) {
    d68c:	2800      	cmp	r0, #0
    d68e:	da32      	bge.n	d6f6 <main+0x152>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    d690:	f00e fb0a 	bl	1bca8 <z_impl_z_errno>
				printk("ERROR: poll %d\n", errno);
    d694:	6801      	ldr	r1, [r0, #0]
    d696:	483e      	ldr	r0, [pc, #248]	; (d790 <main+0x1ec>)
				break;
			}

			err = mqtt_live(&client);
			if ((err != 0) && (err != -EAGAIN)) {
				printk("ERROR: mqtt_live %d\n", err);
    d698:	f00f fe2c 	bl	1d2f4 <printk>
		}
		
		
	}

	printk("Disconnecting MQTT client...\n");
    d69c:	483d      	ldr	r0, [pc, #244]	; (d794 <main+0x1f0>)
    d69e:	f00f fe29 	bl	1d2f4 <printk>

	err = mqtt_disconnect(&client);
    d6a2:	482b      	ldr	r0, [pc, #172]	; (d750 <main+0x1ac>)
    d6a4:	f011 fc8d 	bl	1efc2 <mqtt_disconnect>
	if (err) {
    d6a8:	4601      	mov	r1, r0
    d6aa:	b110      	cbz	r0, d6b2 <main+0x10e>
		printk("Could not disconnect MQTT client. Error: %d\n", err);
    d6ac:	483a      	ldr	r0, [pc, #232]	; (d798 <main+0x1f4>)
    d6ae:	f00f fe21 	bl	1d2f4 <printk>
	}
}
    d6b2:	b01b      	add	sp, #108	; 0x6c
    d6b4:	bd30      	pop	{r4, r5, pc}
	addr = result;
    d6b6:	9b01      	ldr	r3, [sp, #4]
	while (addr != NULL) {
    d6b8:	b19b      	cbz	r3, d6e2 <main+0x13e>
		if (addr->ai_addrlen == sizeof(struct sockaddr_in)) {
    d6ba:	6959      	ldr	r1, [r3, #20]
    d6bc:	2908      	cmp	r1, #8
    d6be:	d114      	bne.n	d6ea <main+0x146>
				->sin_addr.s_addr;
    d6c0:	699b      	ldr	r3, [r3, #24]
			broker4->sin_family = AF_INET;
    d6c2:	802c      	strh	r4, [r5, #0]
				->sin_addr.s_addr;
    d6c4:	685b      	ldr	r3, [r3, #4]
			broker4->sin_addr.s_addr =
    d6c6:	606b      	str	r3, [r5, #4]
			broker4->sin_port = htons(CONFIG_MQTT_BROKER_PORT);
    d6c8:	f645 3307 	movw	r3, #23303	; 0x5b07
    d6cc:	806b      	strh	r3, [r5, #2]
	if (z_syscall_trap()) {
		return (char *) arch_syscall_invoke4(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, *(uintptr_t *)&size, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
    d6ce:	2310      	movs	r3, #16
    d6d0:	1d29      	adds	r1, r5, #4
    d6d2:	4620      	mov	r0, r4
    d6d4:	aa02      	add	r2, sp, #8
    d6d6:	f003 f83b 	bl	10750 <z_impl_net_addr_ntop>
			printk("IPv4 Address found %s\n", ipv4_addr);
    d6da:	4830      	ldr	r0, [pc, #192]	; (d79c <main+0x1f8>)
    d6dc:	a902      	add	r1, sp, #8
    d6de:	f00f fe09 	bl	1d2f4 <printk>
}

static inline void freeaddrinfo(struct zsock_addrinfo *ai)
{
	zsock_freeaddrinfo(ai);
    d6e2:	9801      	ldr	r0, [sp, #4]
    d6e4:	f010 fcca 	bl	1e07c <zsock_freeaddrinfo>
    d6e8:	e781      	b.n	d5ee <main+0x4a>
			printk("ai_addrlen = %u should be %u or %u\n",
    d6ea:	2318      	movs	r3, #24
    d6ec:	2208      	movs	r2, #8
    d6ee:	482c      	ldr	r0, [pc, #176]	; (d7a0 <main+0x1fc>)
    d6f0:	f00f fe00 	bl	1d2f4 <printk>
		break;
    d6f4:	e7f5      	b.n	d6e2 <main+0x13e>
			err = mqtt_live(&client);
    d6f6:	4816      	ldr	r0, [pc, #88]	; (d750 <main+0x1ac>)
    d6f8:	f011 fcb7 	bl	1f06a <mqtt_live>
			if ((err != 0) && (err != -EAGAIN)) {
    d6fc:	4601      	mov	r1, r0
    d6fe:	b120      	cbz	r0, d70a <main+0x166>
    d700:	f110 0f0b 	cmn.w	r0, #11
    d704:	d001      	beq.n	d70a <main+0x166>
				printk("ERROR: mqtt_live %d\n", err);
    d706:	4827      	ldr	r0, [pc, #156]	; (d7a4 <main+0x200>)
    d708:	e7c6      	b.n	d698 <main+0xf4>
			if ((fds.revents & POLLIN) == POLLIN) {
    d70a:	88e3      	ldrh	r3, [r4, #6]
    d70c:	07d9      	lsls	r1, r3, #31
    d70e:	d508      	bpl.n	d722 <main+0x17e>
				err = mqtt_input(&client);
    d710:	480f      	ldr	r0, [pc, #60]	; (d750 <main+0x1ac>)
    d712:	f011 fce8 	bl	1f0e6 <mqtt_input>
				if (err != 0) {
    d716:	4601      	mov	r1, r0
    d718:	b118      	cbz	r0, d722 <main+0x17e>
					printk("ERROR: mqtt_input %d\n", err);
    d71a:	4823      	ldr	r0, [pc, #140]	; (d7a8 <main+0x204>)
    d71c:	f00f fdea 	bl	1d2f4 <printk>
					continue;
    d720:	e7a9      	b.n	d676 <main+0xd2>
			if ((fds.revents & POLLERR) == POLLERR) {
    d722:	88e3      	ldrh	r3, [r4, #6]
    d724:	071a      	lsls	r2, r3, #28
    d726:	d503      	bpl.n	d730 <main+0x18c>
				printk("POLLERR\n");
    d728:	4820      	ldr	r0, [pc, #128]	; (d7ac <main+0x208>)
				printk("POLLNVAL\n");
    d72a:	f00f fde3 	bl	1d2f4 <printk>
				break;
    d72e:	e7b5      	b.n	d69c <main+0xf8>
			if ((fds.revents & POLLNVAL) == POLLNVAL) {
    d730:	069b      	lsls	r3, r3, #26
    d732:	d5a0      	bpl.n	d676 <main+0xd2>
				printk("POLLNVAL\n");
    d734:	481e      	ldr	r0, [pc, #120]	; (d7b0 <main+0x20c>)
    d736:	e7f8      	b.n	d72a <main+0x186>
	return z_impl_k_sleep(timeout);
    d738:	2100      	movs	r1, #0
    d73a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d73e:	f00f f965 	bl	1ca0c <z_impl_k_sleep>
    d742:	e798      	b.n	d676 <main+0xd2>
    d744:	000213e4 	.word	0x000213e4
    d748:	00021411 	.word	0x00021411
    d74c:	0002142a 	.word	0x0002142a
    d750:	200207b4 	.word	0x200207b4
    d754:	0002143f 	.word	0x0002143f
    d758:	20022334 	.word	0x20022334
    d75c:	00021450 	.word	0x00021450
    d760:	0000d1d5 	.word	0x0000d1d5
    d764:	000214a9 	.word	0x000214a9
    d768:	200223d7 	.word	0x200223d7
    d76c:	200225cb 	.word	0x200225cb
    d770:	000214b5 	.word	0x000214b5
    d774:	0000d1b1 	.word	0x0000d1b1
    d778:	000214dd 	.word	0x000214dd
    d77c:	00021509 	.word	0x00021509
    d780:	00021532 	.word	0x00021532
    d784:	0002138d 	.word	0x0002138d
    d788:	20022356 	.word	0x20022356
    d78c:	20020818 	.word	0x20020818
    d790:	0002155a 	.word	0x0002155a
    d794:	00021207 	.word	0x00021207
    d798:	000215a8 	.word	0x000215a8
    d79c:	0002146e 	.word	0x0002146e
    d7a0:	00021485 	.word	0x00021485
    d7a4:	0002156a 	.word	0x0002156a
    d7a8:	0002157f 	.word	0x0002157f
    d7ac:	00021595 	.word	0x00021595
    d7b0:	0002159e 	.word	0x0002159e

0000d7b4 <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
    d7b4:	2803      	cmp	r0, #3
{
    d7b6:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
    d7b8:	d906      	bls.n	d7c8 <_check_fd+0x14>
    d7ba:	f00e fa75 	bl	1bca8 <z_impl_z_errno>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
		errno = EBADF;
    d7be:	2309      	movs	r3, #9
    d7c0:	6003      	str	r3, [r0, #0]
    d7c2:	f04f 30ff 	mov.w	r0, #4294967295
		return -1;
	}

	return 0;
}
    d7c6:	bd08      	pop	{r3, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d7c8:	220c      	movs	r2, #12
    d7ca:	4b05      	ldr	r3, [pc, #20]	; (d7e0 <_check_fd+0x2c>)
    d7cc:	fb02 3000 	mla	r0, r2, r0, r3
    d7d0:	3008      	adds	r0, #8
    d7d2:	e8d0 3faf 	lda	r3, [r0]
	if (!atomic_get(&fdtable[fd].refcount)) {
    d7d6:	2b00      	cmp	r3, #0
    d7d8:	d0ef      	beq.n	d7ba <_check_fd+0x6>
	return 0;
    d7da:	2000      	movs	r0, #0
    d7dc:	e7f3      	b.n	d7c6 <_check_fd+0x12>
    d7de:	bf00      	nop
    d7e0:	20020830 	.word	0x20020830

0000d7e4 <z_get_fd_obj>:

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
    d7e4:	b570      	push	{r4, r5, r6, lr}
    d7e6:	4604      	mov	r4, r0
    d7e8:	460d      	mov	r5, r1
    d7ea:	4616      	mov	r6, r2
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
    d7ec:	f7ff ffe2 	bl	d7b4 <_check_fd>
    d7f0:	2800      	cmp	r0, #0
    d7f2:	db0a      	blt.n	d80a <z_get_fd_obj+0x26>
		return NULL;
	}

	fd_entry = &fdtable[fd];

	if (vtable != NULL && fd_entry->vtable != vtable) {
    d7f4:	4a08      	ldr	r2, [pc, #32]	; (d818 <z_get_fd_obj+0x34>)
    d7f6:	b155      	cbz	r5, d80e <z_get_fd_obj+0x2a>
    d7f8:	230c      	movs	r3, #12
    d7fa:	fb03 2304 	mla	r3, r3, r4, r2
    d7fe:	685b      	ldr	r3, [r3, #4]
    d800:	42ab      	cmp	r3, r5
    d802:	d004      	beq.n	d80e <z_get_fd_obj+0x2a>
    d804:	f00e fa50 	bl	1bca8 <z_impl_z_errno>
		errno = err;
    d808:	6006      	str	r6, [r0, #0]
		return NULL;
    d80a:	2000      	movs	r0, #0
    d80c:	e002      	b.n	d814 <z_get_fd_obj+0x30>
		return NULL;
	}

	return fd_entry->obj;
    d80e:	200c      	movs	r0, #12
    d810:	4344      	muls	r4, r0
    d812:	5910      	ldr	r0, [r2, r4]
}
    d814:	bd70      	pop	{r4, r5, r6, pc}
    d816:	bf00      	nop
    d818:	20020830 	.word	0x20020830

0000d81c <z_get_fd_obj_and_vtable>:

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable)
{
    d81c:	b538      	push	{r3, r4, r5, lr}
    d81e:	4605      	mov	r5, r0
    d820:	460c      	mov	r4, r1
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
    d822:	f7ff ffc7 	bl	d7b4 <_check_fd>
    d826:	2800      	cmp	r0, #0
		return NULL;
	}

	fd_entry = &fdtable[fd];
	*vtable = fd_entry->vtable;
    d828:	bfa3      	ittte	ge
    d82a:	230c      	movge	r3, #12
    d82c:	fb03 f005 	mulge.w	r0, r3, r5
    d830:	4a03      	ldrge	r2, [pc, #12]	; (d840 <z_get_fd_obj_and_vtable+0x24>)
		return NULL;
    d832:	2000      	movlt	r0, #0
	*vtable = fd_entry->vtable;
    d834:	bfa1      	itttt	ge
    d836:	1813      	addge	r3, r2, r0
    d838:	685b      	ldrge	r3, [r3, #4]
    d83a:	6023      	strge	r3, [r4, #0]

	return fd_entry->obj;
    d83c:	5810      	ldrge	r0, [r2, r0]
}
    d83e:	bd38      	pop	{r3, r4, r5, pc}
    d840:	20020830 	.word	0x20020830

0000d844 <z_reserve_fd>:

int z_reserve_fd(void)
{
    d844:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
    d846:	2400      	movs	r4, #0
	return z_impl_k_mutex_lock(mutex, timeout);
    d848:	f04f 33ff 	mov.w	r3, #4294967295
    d84c:	f04f 32ff 	mov.w	r2, #4294967295
    d850:	4812      	ldr	r0, [pc, #72]	; (d89c <z_reserve_fd+0x58>)
    d852:	f00e fcb9 	bl	1c1c8 <z_impl_k_mutex_lock>
    d856:	4b12      	ldr	r3, [pc, #72]	; (d8a0 <z_reserve_fd+0x5c>)
    d858:	e8d3 2faf 	lda	r2, [r3]
		if (!atomic_get(&fdtable[fd].refcount)) {
    d85c:	b17a      	cbz	r2, d87e <z_reserve_fd+0x3a>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
    d85e:	3401      	adds	r4, #1
    d860:	2c04      	cmp	r4, #4
    d862:	f103 030c 	add.w	r3, r3, #12
    d866:	d1f7      	bne.n	d858 <z_reserve_fd+0x14>
    d868:	f00e fa1e 	bl	1bca8 <z_impl_z_errno>
	errno = ENFILE;
    d86c:	2317      	movs	r3, #23
	return -1;
    d86e:	f04f 34ff 	mov.w	r4, #4294967295
	errno = ENFILE;
    d872:	6003      	str	r3, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    d874:	4809      	ldr	r0, [pc, #36]	; (d89c <z_reserve_fd+0x58>)
    d876:	f00e fd1f 	bl	1c2b8 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
    d87a:	4620      	mov	r0, r4
    d87c:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    d87e:	e8d3 1fef 	ldaex	r1, [r3]
    d882:	3101      	adds	r1, #1
    d884:	e8c3 1fe0 	stlex	r0, r1, [r3]
    d888:	2800      	cmp	r0, #0
    d88a:	d1f8      	bne.n	d87e <z_reserve_fd+0x3a>
		fdtable[fd].obj = NULL;
    d88c:	230c      	movs	r3, #12
    d88e:	4363      	muls	r3, r4
    d890:	4904      	ldr	r1, [pc, #16]	; (d8a4 <z_reserve_fd+0x60>)
    d892:	18c8      	adds	r0, r1, r3
    d894:	50ca      	str	r2, [r1, r3]
		fdtable[fd].vtable = NULL;
    d896:	6042      	str	r2, [r0, #4]
    d898:	e7ec      	b.n	d874 <z_reserve_fd+0x30>
    d89a:	bf00      	nop
    d89c:	20020150 	.word	0x20020150
    d8a0:	20020838 	.word	0x20020838
    d8a4:	20020830 	.word	0x20020830

0000d8a8 <z_finalize_fd>:
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
    d8a8:	230c      	movs	r3, #12
{
    d8aa:	b510      	push	{r4, lr}
	fdtable[fd].obj = obj;
    d8ac:	4358      	muls	r0, r3
    d8ae:	4c02      	ldr	r4, [pc, #8]	; (d8b8 <z_finalize_fd+0x10>)
    d8b0:	1823      	adds	r3, r4, r0
    d8b2:	5021      	str	r1, [r4, r0]
	fdtable[fd].vtable = vtable;
    d8b4:	605a      	str	r2, [r3, #4]
}
    d8b6:	bd10      	pop	{r4, pc}
    d8b8:	20020830 	.word	0x20020830

0000d8bc <z_free_fd>:
		old_rc = atomic_get(&fdtable[fd].refcount);
    d8bc:	230c      	movs	r3, #12
    d8be:	4a0e      	ldr	r2, [pc, #56]	; (d8f8 <z_free_fd+0x3c>)

void z_free_fd(int fd)
{
    d8c0:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
    d8c2:	fb03 2300 	mla	r3, r3, r0, r2
    d8c6:	3308      	adds	r3, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d8c8:	e8d3 1faf 	lda	r1, [r3]
		if (!old_rc) {
    d8cc:	b191      	cbz	r1, d8f4 <z_free_fd+0x38>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
    d8ce:	1e4c      	subs	r4, r1, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    d8d0:	e8d3 5fef 	ldaex	r5, [r3]
    d8d4:	428d      	cmp	r5, r1
    d8d6:	d104      	bne.n	d8e2 <z_free_fd+0x26>
    d8d8:	e8c3 4fec 	stlex	ip, r4, [r3]
    d8dc:	f1bc 0f00 	cmp.w	ip, #0
    d8e0:	d1f6      	bne.n	d8d0 <z_free_fd+0x14>
    d8e2:	d1f1      	bne.n	d8c8 <z_free_fd+0xc>
	if (old_rc != 1) {
    d8e4:	2901      	cmp	r1, #1
    d8e6:	d105      	bne.n	d8f4 <z_free_fd+0x38>
	fdtable[fd].obj = NULL;
    d8e8:	230c      	movs	r3, #12
    d8ea:	4358      	muls	r0, r3
    d8ec:	2300      	movs	r3, #0
    d8ee:	1811      	adds	r1, r2, r0
    d8f0:	5013      	str	r3, [r2, r0]
	fdtable[fd].vtable = NULL;
    d8f2:	604b      	str	r3, [r1, #4]
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
}
    d8f4:	bd30      	pop	{r4, r5, pc}
    d8f6:	bf00      	nop
    d8f8:	20020830 	.word	0x20020830

0000d8fc <print_digits>:
}
#endif /* CONFIG_PRINTK */

static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
			 bool pad_before, char pad_char, int min_width)
{
    d8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d900:	b087      	sub	sp, #28
    d902:	460f      	mov	r7, r1
    d904:	4619      	mov	r1, r3
	char buf[DIGITS_BUFLEN];
	int i;

	/* Print it backwards into the end of the buffer, low digits first */
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
		buf[i] = "0123456789abcdef"[num % base];
    d906:	9b10      	ldr	r3, [sp, #64]	; 0x40
{
    d908:	4606      	mov	r6, r0
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    d90a:	2514      	movs	r5, #20
{
    d90c:	4610      	mov	r0, r2
		buf[i] = "0123456789abcdef"[num % base];
    d90e:	4698      	mov	r8, r3
{
    d910:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
    d914:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
		buf[i] = "0123456789abcdef"[num % base];
    d918:	4c1e      	ldr	r4, [pc, #120]	; (d994 <print_digits+0x98>)
    d91a:	ea4f 79e3 	mov.w	r9, r3, asr #31
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    d91e:	ea50 0301 	orrs.w	r3, r0, r1
    d922:	d11a      	bne.n	d95a <print_digits+0x5e>
		num /= base;
	}

	if (i == DIGITS_BUFLEN - 1) {
    d924:	2d14      	cmp	r5, #20
		buf[i] = '0';
    d926:	bf08      	it	eq
    d928:	2330      	moveq	r3, #48	; 0x30
	} else {
		i++;
	}

	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    d92a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
		i++;
    d92c:	bf18      	it	ne
    d92e:	3501      	addne	r5, #1
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    d930:	442c      	add	r4, r5
		buf[i] = '0';
    d932:	bf08      	it	eq
    d934:	f88d 3014 	strbeq.w	r3, [sp, #20]
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    d938:	2c15      	cmp	r4, #21
    d93a:	d01b      	beq.n	d974 <print_digits+0x78>
    d93c:	3c15      	subs	r4, #21

	for (/**/; pad > 0 && pad_before; pad--) {
    d93e:	2c00      	cmp	r4, #0
    d940:	dc1a      	bgt.n	d978 <print_digits+0x7c>
		out(pad_char, ctx);
	}
	for (/**/; i < DIGITS_BUFLEN; i++) {
		out(buf[i], ctx);
    d942:	f81d 0005 	ldrb.w	r0, [sp, r5]
    d946:	4639      	mov	r1, r7
	for (/**/; i < DIGITS_BUFLEN; i++) {
    d948:	3501      	adds	r5, #1
		out(buf[i], ctx);
    d94a:	47b0      	blx	r6
	for (/**/; i < DIGITS_BUFLEN; i++) {
    d94c:	2d15      	cmp	r5, #21
    d94e:	d1f8      	bne.n	d942 <print_digits+0x46>
	}
	for (/**/; pad > 0; pad--) {
    d950:	2c00      	cmp	r4, #0
    d952:	dc19      	bgt.n	d988 <print_digits+0x8c>
		out(pad_char, ctx);
	}
}
    d954:	b007      	add	sp, #28
    d956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf[i] = "0123456789abcdef"[num % base];
    d95a:	4642      	mov	r2, r8
    d95c:	464b      	mov	r3, r9
    d95e:	f7fe ffa5 	bl	c8ac <__aeabi_uldivmod>
    d962:	4684      	mov	ip, r0
    d964:	460b      	mov	r3, r1
    d966:	5ca2      	ldrb	r2, [r4, r2]
		num /= base;
    d968:	4660      	mov	r0, ip
		buf[i] = "0123456789abcdef"[num % base];
    d96a:	f80d 2005 	strb.w	r2, [sp, r5]
		num /= base;
    d96e:	4619      	mov	r1, r3
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    d970:	3d01      	subs	r5, #1
    d972:	e7d4      	b.n	d91e <print_digits+0x22>
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    d974:	2400      	movs	r4, #0
	for (/**/; i < DIGITS_BUFLEN; i++) {
    d976:	e7e4      	b.n	d942 <print_digits+0x46>
	for (/**/; pad > 0 && pad_before; pad--) {
    d978:	f1bb 0f00 	cmp.w	fp, #0
    d97c:	d0e1      	beq.n	d942 <print_digits+0x46>
		out(pad_char, ctx);
    d97e:	4639      	mov	r1, r7
    d980:	4650      	mov	r0, sl
    d982:	47b0      	blx	r6
	for (/**/; pad > 0 && pad_before; pad--) {
    d984:	3c01      	subs	r4, #1
    d986:	e7da      	b.n	d93e <print_digits+0x42>
		out(pad_char, ctx);
    d988:	4639      	mov	r1, r7
    d98a:	4650      	mov	r0, sl
    d98c:	47b0      	blx	r6
	for (/**/; pad > 0; pad--) {
    d98e:	3c01      	subs	r4, #1
    d990:	e7de      	b.n	d950 <print_digits+0x54>
    d992:	bf00      	nop
    d994:	0002164a 	.word	0x0002164a

0000d998 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    d998:	680b      	ldr	r3, [r1, #0]
    d99a:	3301      	adds	r3, #1
    d99c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    d99e:	4b01      	ldr	r3, [pc, #4]	; (d9a4 <char_out+0xc>)
    d9a0:	681b      	ldr	r3, [r3, #0]
    d9a2:	4718      	bx	r3
    d9a4:	20020004 	.word	0x20020004

0000d9a8 <__printk_hook_install>:
	_char_out = fn;
    d9a8:	4b01      	ldr	r3, [pc, #4]	; (d9b0 <__printk_hook_install+0x8>)
    d9aa:	6018      	str	r0, [r3, #0]
}
    d9ac:	4770      	bx	lr
    d9ae:	bf00      	nop
    d9b0:	20020004 	.word	0x20020004

0000d9b4 <z_vprintk>:
{
    d9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
    d9b8:	2600      	movs	r6, #0
{
    d9ba:	4605      	mov	r5, r0
    d9bc:	468b      	mov	fp, r1
    d9be:	461c      	mov	r4, r3
	int min_width = -1;
    d9c0:	f04f 38ff 	mov.w	r8, #4294967295
	enum pad_type padding = PAD_NONE;
    d9c4:	4637      	mov	r7, r6
{
    d9c6:	b087      	sub	sp, #28
    d9c8:	f102 3aff 	add.w	sl, r2, #4294967295
			might_format = 0;
    d9cc:	f04f 0900 	mov.w	r9, #0
					break;
    d9d0:	e007      	b.n	d9e2 <z_vprintk+0x2e>
		if (!might_format) {
    d9d2:	f1b9 0f00 	cmp.w	r9, #0
    d9d6:	d10b      	bne.n	d9f0 <z_vprintk+0x3c>
			if (*fmt != '%') {
    d9d8:	2825      	cmp	r0, #37	; 0x25
    d9da:	f000 810a 	beq.w	dbf2 <z_vprintk+0x23e>
				out((int)*fmt, ctx);
    d9de:	4659      	mov	r1, fp
    d9e0:	47a8      	blx	r5
	while (*fmt) {
    d9e2:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
    d9e6:	2800      	cmp	r0, #0
    d9e8:	d1f3      	bne.n	d9d2 <z_vprintk+0x1e>
}
    d9ea:	b007      	add	sp, #28
    d9ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
    d9f0:	287a      	cmp	r0, #122	; 0x7a
    d9f2:	d80a      	bhi.n	da0a <z_vprintk+0x56>
    d9f4:	2862      	cmp	r0, #98	; 0x62
    d9f6:	d810      	bhi.n	da1a <z_vprintk+0x66>
    d9f8:	2830      	cmp	r0, #48	; 0x30
    d9fa:	d051      	beq.n	daa0 <z_vprintk+0xec>
    d9fc:	d844      	bhi.n	da88 <z_vprintk+0xd4>
    d9fe:	2825      	cmp	r0, #37	; 0x25
    da00:	f000 80f5 	beq.w	dbee <z_vprintk+0x23a>
    da04:	282d      	cmp	r0, #45	; 0x2d
    da06:	f000 80fb 	beq.w	dc00 <z_vprintk+0x24c>
					out((int)'%', ctx);
    da0a:	4659      	mov	r1, fp
    da0c:	2025      	movs	r0, #37	; 0x25
    da0e:	47a8      	blx	r5
					out((int)*fmt, ctx);
    da10:	4659      	mov	r1, fp
    da12:	f89a 0000 	ldrb.w	r0, [sl]
    da16:	47a8      	blx	r5
    da18:	e7d8      	b.n	d9cc <z_vprintk+0x18>
    da1a:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
    da1e:	2b17      	cmp	r3, #23
    da20:	d8f3      	bhi.n	da0a <z_vprintk+0x56>
    da22:	a201      	add	r2, pc, #4	; (adr r2, da28 <z_vprintk+0x74>)
    da24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    da28:	0000dbe7 	.word	0x0000dbe7
    da2c:	0000dae9 	.word	0x0000dae9
    da30:	0000da0b 	.word	0x0000da0b
    da34:	0000da0b 	.word	0x0000da0b
    da38:	0000da0b 	.word	0x0000da0b
    da3c:	0000dacb 	.word	0x0000dacb
    da40:	0000dae9 	.word	0x0000dae9
    da44:	0000da0b 	.word	0x0000da0b
    da48:	0000da0b 	.word	0x0000da0b
    da4c:	0000dacb 	.word	0x0000dacb
    da50:	0000da0b 	.word	0x0000da0b
    da54:	0000da0b 	.word	0x0000da0b
    da58:	0000da0b 	.word	0x0000da0b
    da5c:	0000db63 	.word	0x0000db63
    da60:	0000da0b 	.word	0x0000da0b
    da64:	0000da0b 	.word	0x0000da0b
    da68:	0000dbaf 	.word	0x0000dbaf
    da6c:	0000da0b 	.word	0x0000da0b
    da70:	0000dae9 	.word	0x0000dae9
    da74:	0000da0b 	.word	0x0000da0b
    da78:	0000da0b 	.word	0x0000da0b
    da7c:	0000da91 	.word	0x0000da91
    da80:	0000da0b 	.word	0x0000da0b
    da84:	0000dacb 	.word	0x0000dacb
			switch (*fmt) {
    da88:	2839      	cmp	r0, #57	; 0x39
    da8a:	d915      	bls.n	dab8 <z_vprintk+0x104>
    da8c:	2858      	cmp	r0, #88	; 0x58
    da8e:	d1bc      	bne.n	da0a <z_vprintk+0x56>
				if (*fmt == 'p') {
    da90:	f89a 3000 	ldrb.w	r3, [sl]
    da94:	2b70      	cmp	r3, #112	; 0x70
    da96:	d16e      	bne.n	db76 <z_vprintk+0x1c2>
					x = va_arg(ap, unsigned int);
    da98:	2300      	movs	r3, #0
    da9a:	f854 2b04 	ldr.w	r2, [r4], #4
    da9e:	e075      	b.n	db8c <z_vprintk+0x1d8>
				if (min_width < 0 && padding == PAD_NONE) {
    daa0:	f1b8 0f00 	cmp.w	r8, #0
    daa4:	da0b      	bge.n	dabe <z_vprintk+0x10a>
    daa6:	2f00      	cmp	r7, #0
    daa8:	f000 80ac 	beq.w	dc04 <z_vprintk+0x250>
					min_width = *fmt - '0';
    daac:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    dab0:	2f00      	cmp	r7, #0
    dab2:	bf08      	it	eq
    dab4:	2702      	moveq	r7, #2
    dab6:	e794      	b.n	d9e2 <z_vprintk+0x2e>
				if (min_width < 0) {
    dab8:	f1b8 0f00 	cmp.w	r8, #0
    dabc:	dbf6      	blt.n	daac <z_vprintk+0xf8>
					min_width = 10 * min_width + *fmt - '0';
    dabe:	230a      	movs	r3, #10
    dac0:	fb03 0808 	mla	r8, r3, r8, r0
    dac4:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
    dac8:	e7f2      	b.n	dab0 <z_vprintk+0xfc>
				if (*fmt == 'h' && length_mod == 'h') {
    daca:	2868      	cmp	r0, #104	; 0x68
    dacc:	d103      	bne.n	dad6 <z_vprintk+0x122>
    dace:	2e68      	cmp	r6, #104	; 0x68
    dad0:	d106      	bne.n	dae0 <z_vprintk+0x12c>
					length_mod = 'H';
    dad2:	2648      	movs	r6, #72	; 0x48
    dad4:	e785      	b.n	d9e2 <z_vprintk+0x2e>
				} else if (*fmt == 'l' && length_mod == 'l') {
    dad6:	286c      	cmp	r0, #108	; 0x6c
    dad8:	d102      	bne.n	dae0 <z_vprintk+0x12c>
    dada:	2e6c      	cmp	r6, #108	; 0x6c
    dadc:	f000 8094 	beq.w	dc08 <z_vprintk+0x254>
				} else if (length_mod == 0) {
    dae0:	2e00      	cmp	r6, #0
    dae2:	d192      	bne.n	da0a <z_vprintk+0x56>
    dae4:	4606      	mov	r6, r0
    dae6:	e77c      	b.n	d9e2 <z_vprintk+0x2e>
				if (length_mod == 'z') {
    dae8:	2e7a      	cmp	r6, #122	; 0x7a
    daea:	d106      	bne.n	dafa <z_vprintk+0x146>
					d = va_arg(ap, long);
    daec:	46a1      	mov	r9, r4
    daee:	f859 2b04 	ldr.w	r2, [r9], #4
    daf2:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
    daf4:	2875      	cmp	r0, #117	; 0x75
    daf6:	d123      	bne.n	db40 <z_vprintk+0x18c>
    daf8:	e00f      	b.n	db1a <z_vprintk+0x166>
				} else if (length_mod == 'l') {
    dafa:	2e6c      	cmp	r6, #108	; 0x6c
    dafc:	d0f6      	beq.n	daec <z_vprintk+0x138>
				} else if (length_mod == 'L') {
    dafe:	2e4c      	cmp	r6, #76	; 0x4c
    db00:	d105      	bne.n	db0e <z_vprintk+0x15a>
					long long lld = va_arg(ap, long long);
    db02:	3407      	adds	r4, #7
    db04:	f024 0907 	bic.w	r9, r4, #7
					d = (printk_val_t) lld;
    db08:	e8f9 2302 	ldrd	r2, r3, [r9], #8
    db0c:	e7f2      	b.n	daf4 <z_vprintk+0x140>
				} else if (*fmt == 'u') {
    db0e:	2875      	cmp	r0, #117	; 0x75
					d = va_arg(ap, unsigned int);
    db10:	6822      	ldr	r2, [r4, #0]
    db12:	f104 0904 	add.w	r9, r4, #4
				} else if (*fmt == 'u') {
    db16:	d112      	bne.n	db3e <z_vprintk+0x18a>
					d = va_arg(ap, unsigned int);
    db18:	2300      	movs	r3, #0
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
    db1a:	1ef8      	subs	r0, r7, #3
    db1c:	bf18      	it	ne
    db1e:	2001      	movne	r0, #1
    db20:	2f01      	cmp	r7, #1
    db22:	bf0c      	ite	eq
    db24:	2430      	moveq	r4, #48	; 0x30
    db26:	2420      	movne	r4, #32
    db28:	9001      	str	r0, [sp, #4]
    db2a:	200a      	movs	r0, #10
    db2c:	e9cd 4802 	strd	r4, r8, [sp, #8]
    db30:	9000      	str	r0, [sp, #0]
    db32:	4659      	mov	r1, fp
    db34:	4628      	mov	r0, r5
    db36:	f7ff fee1 	bl	d8fc <print_digits>
}
    db3a:	464c      	mov	r4, r9
    db3c:	e746      	b.n	d9cc <z_vprintk+0x18>
					d = va_arg(ap, int);
    db3e:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
    db40:	2a00      	cmp	r2, #0
    db42:	f173 0100 	sbcs.w	r1, r3, #0
    db46:	dae8      	bge.n	db1a <z_vprintk+0x166>
					out((int)'-', ctx);
    db48:	4659      	mov	r1, fp
    db4a:	202d      	movs	r0, #45	; 0x2d
    db4c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    db50:	47a8      	blx	r5
					d = -d;
    db52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    db56:	4252      	negs	r2, r2
    db58:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
					min_width--;
    db5c:	f108 38ff 	add.w	r8, r8, #4294967295
    db60:	e7db      	b.n	db1a <z_vprintk+0x166>
				out('0', ctx);
    db62:	4659      	mov	r1, fp
    db64:	2030      	movs	r0, #48	; 0x30
    db66:	47a8      	blx	r5
				out('x', ctx);
    db68:	4659      	mov	r1, fp
    db6a:	2078      	movs	r0, #120	; 0x78
    db6c:	47a8      	blx	r5
				min_width = sizeof(void *) * 2;
    db6e:	f04f 0808 	mov.w	r8, #8
				padding = PAD_ZERO_BEFORE;
    db72:	2701      	movs	r7, #1
    db74:	e78c      	b.n	da90 <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
    db76:	2e6c      	cmp	r6, #108	; 0x6c
    db78:	d08e      	beq.n	da98 <z_vprintk+0xe4>
				} else if (length_mod == 'L') {
    db7a:	2e4c      	cmp	r6, #76	; 0x4c
    db7c:	d18c      	bne.n	da98 <z_vprintk+0xe4>
					x = va_arg(ap, unsigned long long);
    db7e:	1de3      	adds	r3, r4, #7
    db80:	f023 0307 	bic.w	r3, r3, #7
    db84:	461c      	mov	r4, r3
    db86:	685b      	ldr	r3, [r3, #4]
    db88:	f854 2b08 	ldr.w	r2, [r4], #8
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
    db8c:	1ef8      	subs	r0, r7, #3
    db8e:	bf18      	it	ne
    db90:	2001      	movne	r0, #1
    db92:	2f01      	cmp	r7, #1
    db94:	bf0c      	ite	eq
    db96:	2130      	moveq	r1, #48	; 0x30
    db98:	2120      	movne	r1, #32
    db9a:	e9cd 1802 	strd	r1, r8, [sp, #8]
    db9e:	2110      	movs	r1, #16
    dba0:	9001      	str	r0, [sp, #4]
    dba2:	9100      	str	r1, [sp, #0]
    dba4:	4628      	mov	r0, r5
    dba6:	4659      	mov	r1, fp
    dba8:	f7ff fea8 	bl	d8fc <print_digits>
    dbac:	e70e      	b.n	d9cc <z_vprintk+0x18>
				char *s = va_arg(ap, char *);
    dbae:	f854 3b04 	ldr.w	r3, [r4], #4
				while (*s) {
    dbb2:	4699      	mov	r9, r3
    dbb4:	464a      	mov	r2, r9
    dbb6:	f819 0b01 	ldrb.w	r0, [r9], #1
    dbba:	b978      	cbnz	r0, dbdc <z_vprintk+0x228>
				if (padding == PAD_SPACE_AFTER) {
    dbbc:	2f03      	cmp	r7, #3
    dbbe:	d125      	bne.n	dc0c <z_vprintk+0x258>
					int remaining = min_width - (s - start);
    dbc0:	eba2 0903 	sub.w	r9, r2, r3
    dbc4:	eba8 0909 	sub.w	r9, r8, r9
					while (remaining-- > 0) {
    dbc8:	f1b9 0f00 	cmp.w	r9, #0
    dbcc:	f77f aefe 	ble.w	d9cc <z_vprintk+0x18>
						out(' ', ctx);
    dbd0:	4659      	mov	r1, fp
    dbd2:	2020      	movs	r0, #32
    dbd4:	47a8      	blx	r5
    dbd6:	f109 39ff 	add.w	r9, r9, #4294967295
    dbda:	e7f5      	b.n	dbc8 <z_vprintk+0x214>
					out((int)(*s++), ctx);
    dbdc:	4659      	mov	r1, fp
    dbde:	9304      	str	r3, [sp, #16]
    dbe0:	47a8      	blx	r5
    dbe2:	9b04      	ldr	r3, [sp, #16]
    dbe4:	e7e6      	b.n	dbb4 <z_vprintk+0x200>
				out(c, ctx);
    dbe6:	4659      	mov	r1, fp
    dbe8:	f854 0b04 	ldr.w	r0, [r4], #4
    dbec:	e713      	b.n	da16 <z_vprintk+0x62>
				out((int)'%', ctx);
    dbee:	4659      	mov	r1, fp
    dbf0:	e711      	b.n	da16 <z_vprintk+0x62>
				length_mod = 0;
    dbf2:	464e      	mov	r6, r9
				padding = PAD_NONE;
    dbf4:	464f      	mov	r7, r9
				min_width = -1;
    dbf6:	f04f 38ff 	mov.w	r8, #4294967295
				might_format = 1;
    dbfa:	f04f 0901 	mov.w	r9, #1
    dbfe:	e6f0      	b.n	d9e2 <z_vprintk+0x2e>
			switch (*fmt) {
    dc00:	2703      	movs	r7, #3
    dc02:	e6ee      	b.n	d9e2 <z_vprintk+0x2e>
					padding = PAD_ZERO_BEFORE;
    dc04:	2701      	movs	r7, #1
    dc06:	e6ec      	b.n	d9e2 <z_vprintk+0x2e>
					length_mod = 'L';
    dc08:	264c      	movs	r6, #76	; 0x4c
    dc0a:	e6ea      	b.n	d9e2 <z_vprintk+0x2e>
			might_format = 0;
    dc0c:	4681      	mov	r9, r0
    dc0e:	e6e8      	b.n	d9e2 <z_vprintk+0x2e>

0000dc10 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    dc10:	b507      	push	{r0, r1, r2, lr}
    dc12:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    dc14:	2100      	movs	r1, #0
{
    dc16:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    dc18:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	z_vprintk(char_out, &ctx, fmt, ap);
    dc1a:	4803      	ldr	r0, [pc, #12]	; (dc28 <vprintk+0x18>)
    dc1c:	a901      	add	r1, sp, #4
    dc1e:	f7ff fec9 	bl	d9b4 <z_vprintk>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    dc22:	b003      	add	sp, #12
    dc24:	f85d fb04 	ldr.w	pc, [sp], #4
    dc28:	0000d999 	.word	0x0000d999

0000dc2c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    dc2c:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    dc2e:	2500      	movs	r5, #0
{
    dc30:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    dc32:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    dc36:	4604      	mov	r4, r0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    dc38:	a901      	add	r1, sp, #4
    dc3a:	4805      	ldr	r0, [pc, #20]	; (dc50 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    dc3c:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    dc3e:	f7ff feb9 	bl	d9b4 <z_vprintk>

	if (ctx.count < ctx.max) {
    dc42:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    dc46:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    dc48:	bfb8      	it	lt
    dc4a:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    dc4c:	b005      	add	sp, #20
    dc4e:	bd30      	pop	{r4, r5, pc}
    dc50:	0001d2cf 	.word	0x0001d2cf

0000dc54 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    dc54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    dc58:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
    dc5c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    dc5e:	f019 0808 	ands.w	r8, r9, #8
{
    dc62:	4693      	mov	fp, r2
	if (processing) {
    dc64:	d00e      	beq.n	dc84 <process_event+0x30>
		if (evt == EVT_COMPLETE) {
    dc66:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    dc68:	bf0c      	ite	eq
    dc6a:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    dc6e:	f049 0920 	orrne.w	r9, r9, #32
    dc72:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    dc76:	f38b 8811 	msr	BASEPRI, fp
    dc7a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    dc7e:	b003      	add	sp, #12
    dc80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				transit(mgr, transition_complete);
    dc84:	f8df a190 	ldr.w	sl, [pc, #400]	; de18 <process_event+0x1c4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    dc88:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    dc8c:	2902      	cmp	r1, #2
    dc8e:	d107      	bne.n	dca0 <process_event+0x4c>
			evt = process_recheck(mgr);
    dc90:	4620      	mov	r0, r4
    dc92:	f00f fb49 	bl	1d328 <process_recheck>
		if (evt == EVT_NOP) {
    dc96:	2800      	cmp	r0, #0
    dc98:	d0ed      	beq.n	dc76 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    dc9a:	2801      	cmp	r0, #1
    dc9c:	8b23      	ldrh	r3, [r4, #24]
    dc9e:	d14b      	bne.n	dd38 <process_event+0xe4>
			res = mgr->last_res;
    dca0:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    dca2:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    dca4:	2f00      	cmp	r7, #0
    dca6:	da15      	bge.n	dcd4 <process_event+0x80>
		*clients = mgr->clients;
    dca8:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    dcaa:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    dcae:	e9c4 8800 	strd	r8, r8, [r4]
    dcb2:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    dcb6:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    dcb8:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    dcba:	8b21      	ldrh	r1, [r4, #24]
    dcbc:	f001 0207 	and.w	r2, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    dcc0:	454a      	cmp	r2, r9
    dcc2:	d002      	beq.n	dcca <process_event+0x76>
		if (do_monitors
    dcc4:	68a3      	ldr	r3, [r4, #8]
    dcc6:	2b00      	cmp	r3, #0
    dcc8:	d157      	bne.n	dd7a <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    dcca:	b90d      	cbnz	r5, dcd0 <process_event+0x7c>
		    || (transit != NULL)) {
    dccc:	2e00      	cmp	r6, #0
    dcce:	d06f      	beq.n	ddb0 <process_event+0x15c>
    dcd0:	2300      	movs	r3, #0
    dcd2:	e053      	b.n	dd7c <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    dcd4:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    dcd8:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    dcda:	2a01      	cmp	r2, #1
    dcdc:	d81d      	bhi.n	dd1a <process_event+0xc6>
		*clients = mgr->clients;
    dcde:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    dce2:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    dce4:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    dce6:	b289      	uxth	r1, r1
	list->tail = NULL;
    dce8:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    dcec:	d10a      	bne.n	dd04 <process_event+0xb0>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    dcee:	b13d      	cbz	r5, dd00 <process_event+0xac>
    dcf0:	462a      	mov	r2, r5
    dcf2:	8b63      	ldrh	r3, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    dcf4:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    dcf6:	3301      	adds	r3, #1
    dcf8:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    dcfa:	2a00      	cmp	r2, #0
    dcfc:	d1fa      	bne.n	dcf4 <process_event+0xa0>
    dcfe:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    dd00:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    dd04:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    dd06:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    dd08:	f00f fb0e 	bl	1d328 <process_recheck>
    dd0c:	2800      	cmp	r0, #0
    dd0e:	d0d3      	beq.n	dcb8 <process_event+0x64>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    dd10:	8b23      	ldrh	r3, [r4, #24]
    dd12:	f043 0320 	orr.w	r3, r3, #32
    dd16:	8323      	strh	r3, [r4, #24]
    dd18:	e7ce      	b.n	dcb8 <process_event+0x64>
	} else if (state == ONOFF_STATE_TO_OFF) {
    dd1a:	2b04      	cmp	r3, #4
    dd1c:	d10a      	bne.n	dd34 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    dd1e:	f021 0107 	bic.w	r1, r1, #7
    dd22:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    dd24:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    dd26:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    dd28:	f00f fafe 	bl	1d328 <process_recheck>
    dd2c:	b110      	cbz	r0, dd34 <process_event+0xe0>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    dd2e:	f041 0120 	orr.w	r1, r1, #32
    dd32:	8321      	strh	r1, [r4, #24]
    dd34:	2500      	movs	r5, #0
    dd36:	e7bf      	b.n	dcb8 <process_event+0x64>
		} else if (evt == EVT_START) {
    dd38:	2803      	cmp	r0, #3
    dd3a:	d109      	bne.n	dd50 <process_event+0xfc>
			transit = mgr->transitions->start;
    dd3c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    dd3e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    dd42:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    dd44:	f043 0306 	orr.w	r3, r3, #6
}
    dd48:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
    dd4a:	8323      	strh	r3, [r4, #24]
		res = 0;
    dd4c:	462f      	mov	r7, r5
    dd4e:	e7b4      	b.n	dcba <process_event+0x66>
		} else if (evt == EVT_STOP) {
    dd50:	2804      	cmp	r0, #4
    dd52:	d106      	bne.n	dd62 <process_event+0x10e>
			transit = mgr->transitions->stop;
    dd54:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    dd56:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    dd5a:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    dd5c:	f043 0304 	orr.w	r3, r3, #4
    dd60:	e7f2      	b.n	dd48 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    dd62:	2805      	cmp	r0, #5
    dd64:	d106      	bne.n	dd74 <process_event+0x120>
			transit = mgr->transitions->reset;
    dd66:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    dd68:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    dd6c:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    dd6e:	f043 0305 	orr.w	r3, r3, #5
    dd72:	e7e9      	b.n	dd48 <process_event+0xf4>
    dd74:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    dd76:	462e      	mov	r6, r5
    dd78:	e7e8      	b.n	dd4c <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    dd7a:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    dd7c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    dd80:	8321      	strh	r1, [r4, #24]
    dd82:	f38b 8811 	msr	BASEPRI, fp
    dd86:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    dd8a:	bb03      	cbnz	r3, ddce <process_event+0x17a>
	while (!sys_slist_is_empty(list)) {
    dd8c:	2d00      	cmp	r5, #0
    dd8e:	d131      	bne.n	ddf4 <process_event+0x1a0>
			if (transit != NULL) {
    dd90:	b116      	cbz	r6, dd98 <process_event+0x144>
				transit(mgr, transition_complete);
    dd92:	4651      	mov	r1, sl
    dd94:	4620      	mov	r0, r4
    dd96:	47b0      	blx	r6
	__asm__ volatile(
    dd98:	f04f 0320 	mov.w	r3, #32
    dd9c:	f3ef 8b11 	mrs	fp, BASEPRI
    dda0:	f383 8811 	msr	BASEPRI, r3
    dda4:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    dda8:	8b23      	ldrh	r3, [r4, #24]
    ddaa:	f023 0308 	bic.w	r3, r3, #8
    ddae:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    ddb0:	8b23      	ldrh	r3, [r4, #24]
    ddb2:	06da      	lsls	r2, r3, #27
    ddb4:	d527      	bpl.n	de06 <process_event+0x1b2>
			evt = EVT_COMPLETE;
    ddb6:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    ddb8:	f023 0310 	bic.w	r3, r3, #16
    ddbc:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    ddbe:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    ddc2:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    ddc6:	2900      	cmp	r1, #0
    ddc8:	f47f af60 	bne.w	dc8c <process_event+0x38>
out:
    ddcc:	e753      	b.n	dc76 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    ddce:	68a1      	ldr	r1, [r4, #8]
    ddd0:	2900      	cmp	r1, #0
    ddd2:	d0db      	beq.n	dd8c <process_event+0x138>
    ddd4:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    ddd8:	463b      	mov	r3, r7
    ddda:	4620      	mov	r0, r4
    dddc:	f8d1 b004 	ldr.w	fp, [r1, #4]
    dde0:	9201      	str	r2, [sp, #4]
    dde2:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    dde4:	9a01      	ldr	r2, [sp, #4]
    dde6:	f1b9 0f00 	cmp.w	r9, #0
    ddea:	d0cf      	beq.n	dd8c <process_event+0x138>
    ddec:	4649      	mov	r1, r9
    ddee:	f8d9 9000 	ldr.w	r9, [r9]
    ddf2:	e7f1      	b.n	ddd8 <process_event+0x184>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ddf4:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    ddf6:	463b      	mov	r3, r7
    ddf8:	4620      	mov	r0, r4
    ddfa:	9201      	str	r2, [sp, #4]
    ddfc:	682d      	ldr	r5, [r5, #0]
    ddfe:	f00f faaf 	bl	1d360 <notify_one>
	while (!sys_slist_is_empty(list)) {
    de02:	9a01      	ldr	r2, [sp, #4]
    de04:	e7c2      	b.n	dd8c <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    de06:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    de0a:	bf1e      	ittt	ne
    de0c:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
    de10:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    de12:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    de14:	e7d3      	b.n	ddbe <process_event+0x16a>
    de16:	bf00      	nop
    de18:	0001d38d 	.word	0x0001d38d

0000de1c <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
    de1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    de20:	461e      	mov	r6, r3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
    de22:	2300      	movs	r3, #0
{
    de24:	4689      	mov	r9, r1
    de26:	b0a1      	sub	sp, #132	; 0x84
    de28:	9003      	str	r0, [sp, #12]
	count = 0;
    de2a:	9302      	str	r3, [sp, #8]

	while ((c = *format++)) {
    de2c:	4613      	mov	r3, r2
    de2e:	f813 0b01 	ldrb.w	r0, [r3], #1
    de32:	9306      	str	r3, [sp, #24]
    de34:	b158      	cbz	r0, de4e <z_prf+0x32>
		if (c != '%') {
    de36:	2825      	cmp	r0, #37	; 0x25
    de38:	f000 8081 	beq.w	df3e <z_prf+0x122>
			PUTC(c);
    de3c:	4649      	mov	r1, r9
    de3e:	9b03      	ldr	r3, [sp, #12]
    de40:	4798      	blx	r3
    de42:	3001      	adds	r0, #1
    de44:	f040 844b 	bne.w	e6de <z_prf+0x8c2>
    de48:	f04f 33ff 	mov.w	r3, #4294967295
    de4c:	9302      	str	r3, [sp, #8]
		}
	}
	return count;

#undef PUTC
}
    de4e:	9802      	ldr	r0, [sp, #8]
    de50:	b021      	add	sp, #132	; 0x84
    de52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				switch (c) {
    de56:	2d2b      	cmp	r5, #43	; 0x2b
    de58:	d065      	beq.n	df26 <z_prf+0x10a>
    de5a:	d85c      	bhi.n	df16 <z_prf+0xfa>
    de5c:	2d20      	cmp	r5, #32
    de5e:	d065      	beq.n	df2c <z_prf+0x110>
    de60:	2d23      	cmp	r5, #35	; 0x23
    de62:	d066      	beq.n	df32 <z_prf+0x116>
    de64:	2d00      	cmp	r5, #0
    de66:	d0f2      	beq.n	de4e <z_prf+0x32>
					fzero = true;
    de68:	f8cd 8018 	str.w	r8, [sp, #24]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
    de6c:	f8dd 8018 	ldr.w	r8, [sp, #24]
    de70:	48a4      	ldr	r0, [pc, #656]	; (e104 <z_prf+0x2e8>)
    de72:	f818 5b01 	ldrb.w	r5, [r8], #1
    de76:	4629      	mov	r1, r5
    de78:	f010 fbab 	bl	1e5d2 <strchr>
    de7c:	2800      	cmp	r0, #0
    de7e:	d1ea      	bne.n	de56 <z_prf+0x3a>
			if (c == '*') {
    de80:	2d2a      	cmp	r5, #42	; 0x2a
    de82:	d163      	bne.n	df4c <z_prf+0x130>
				width = va_arg(vargs, int);
    de84:	f856 3b04 	ldr.w	r3, [r6], #4
				c = *format++;
    de88:	f898 5000 	ldrb.w	r5, [r8]
				if (width < 0) {
    de8c:	2b00      	cmp	r3, #0
				width = va_arg(vargs, int);
    de8e:	9307      	str	r3, [sp, #28]
					width = -width;
    de90:	bfbf      	itttt	lt
    de92:	425b      	neglt	r3, r3
    de94:	9307      	strlt	r3, [sp, #28]
					fminus = true;
    de96:	2301      	movlt	r3, #1
    de98:	930d      	strlt	r3, [sp, #52]	; 0x34
				c = *format++;
    de9a:	9b06      	ldr	r3, [sp, #24]
    de9c:	f103 0802 	add.w	r8, r3, #2
			if (c == '.') {
    dea0:	2d2e      	cmp	r5, #46	; 0x2e
    dea2:	d178      	bne.n	df96 <z_prf+0x17a>
				if (c == '*') {
    dea4:	f898 3000 	ldrb.w	r3, [r8]
    dea8:	2b2a      	cmp	r3, #42	; 0x2a
    deaa:	d171      	bne.n	df90 <z_prf+0x174>
					precision = va_arg(vargs, int);
    deac:	f856 4b04 	ldr.w	r4, [r6], #4
				c = *format++;
    deb0:	f108 0801 	add.w	r8, r8, #1
				c = *format++;
    deb4:	f818 5b01 	ldrb.w	r5, [r8], #1
			if (strchr("hlz", c) != NULL) {
    deb8:	4629      	mov	r1, r5
    deba:	4893      	ldr	r0, [pc, #588]	; (e108 <z_prf+0x2ec>)
    debc:	462f      	mov	r7, r5
    debe:	f010 fb88 	bl	1e5d2 <strchr>
    dec2:	2800      	cmp	r0, #0
    dec4:	d06a      	beq.n	df9c <z_prf+0x180>
				c = *format++;
    dec6:	4643      	mov	r3, r8
    dec8:	f813 5b01 	ldrb.w	r5, [r3], #1
				} else if (i == 'h' && c == 'h') {
    decc:	2f68      	cmp	r7, #104	; 0x68
				c = *format++;
    dece:	9306      	str	r3, [sp, #24]
				} else if (i == 'h' && c == 'h') {
    ded0:	d107      	bne.n	dee2 <z_prf+0xc6>
    ded2:	2d68      	cmp	r5, #104	; 0x68
    ded4:	d105      	bne.n	dee2 <z_prf+0xc6>
					i = 'H';
    ded6:	2748      	movs	r7, #72	; 0x48
					c = *format++;
    ded8:	f108 0302 	add.w	r3, r8, #2
    dedc:	f898 5001 	ldrb.w	r5, [r8, #1]
    dee0:	9306      	str	r3, [sp, #24]
			switch (c) {
    dee2:	2d78      	cmp	r5, #120	; 0x78
    dee4:	d808      	bhi.n	def8 <z_prf+0xdc>
    dee6:	2d57      	cmp	r5, #87	; 0x57
    dee8:	d85c      	bhi.n	dfa4 <z_prf+0x188>
    deea:	2d25      	cmp	r5, #37	; 0x25
    deec:	f000 83f3 	beq.w	e6d6 <z_prf+0x8ba>
    def0:	f200 80a2 	bhi.w	e038 <z_prf+0x21c>
    def4:	2d00      	cmp	r5, #0
    def6:	d0aa      	beq.n	de4e <z_prf+0x32>
				PUTC('%');
    def8:	4649      	mov	r1, r9
    defa:	2025      	movs	r0, #37	; 0x25
    defc:	9b03      	ldr	r3, [sp, #12]
    defe:	4798      	blx	r3
    df00:	3001      	adds	r0, #1
    df02:	d0a1      	beq.n	de48 <z_prf+0x2c>
				PUTC(c);
    df04:	4649      	mov	r1, r9
    df06:	4628      	mov	r0, r5
    df08:	9b03      	ldr	r3, [sp, #12]
    df0a:	4798      	blx	r3
    df0c:	3001      	adds	r0, #1
    df0e:	d09b      	beq.n	de48 <z_prf+0x2c>
				count += 2;
    df10:	9b02      	ldr	r3, [sp, #8]
    df12:	3302      	adds	r3, #2
    df14:	e3e5      	b.n	e6e2 <z_prf+0x8c6>
				switch (c) {
    df16:	2d2d      	cmp	r5, #45	; 0x2d
    df18:	d00e      	beq.n	df38 <z_prf+0x11c>
					fzero = true;
    df1a:	2d30      	cmp	r5, #48	; 0x30
    df1c:	9b08      	ldr	r3, [sp, #32]
    df1e:	bf08      	it	eq
    df20:	2301      	moveq	r3, #1
    df22:	9308      	str	r3, [sp, #32]
    df24:	e7a0      	b.n	de68 <z_prf+0x4c>
					fplus = true;
    df26:	2301      	movs	r3, #1
    df28:	9309      	str	r3, [sp, #36]	; 0x24
    df2a:	e79d      	b.n	de68 <z_prf+0x4c>
					fspace = true;
    df2c:	2301      	movs	r3, #1
    df2e:	930c      	str	r3, [sp, #48]	; 0x30
    df30:	e79a      	b.n	de68 <z_prf+0x4c>
					falt = true;
    df32:	f04f 0a01 	mov.w	sl, #1
    df36:	e797      	b.n	de68 <z_prf+0x4c>
				switch (c) {
    df38:	2301      	movs	r3, #1
    df3a:	930d      	str	r3, [sp, #52]	; 0x34
    df3c:	e794      	b.n	de68 <z_prf+0x4c>
			fminus = fplus = fspace = falt = fzero = false;
    df3e:	2300      	movs	r3, #0
    df40:	469a      	mov	sl, r3
    df42:	9308      	str	r3, [sp, #32]
    df44:	930c      	str	r3, [sp, #48]	; 0x30
    df46:	9309      	str	r3, [sp, #36]	; 0x24
    df48:	930d      	str	r3, [sp, #52]	; 0x34
    df4a:	e78f      	b.n	de6c <z_prf+0x50>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    df4c:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
			} else if (!isdigit((int)c)) {
    df50:	2b09      	cmp	r3, #9
				width = 0;
    df52:	9007      	str	r0, [sp, #28]
			} else if (!isdigit((int)c)) {
    df54:	d8a4      	bhi.n	dea0 <z_prf+0x84>
		i = 10 * i + *p++ - '0';
    df56:	220a      	movs	r2, #10
	while (isdigit((int)*p)) {
    df58:	f8dd 8018 	ldr.w	r8, [sp, #24]
    df5c:	f818 5b01 	ldrb.w	r5, [r8], #1
    df60:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
    df64:	2b09      	cmp	r3, #9
    df66:	d89b      	bhi.n	dea0 <z_prf+0x84>
		i = 10 * i + *p++ - '0';
    df68:	9b07      	ldr	r3, [sp, #28]
    df6a:	fb02 5503 	mla	r5, r2, r3, r5
    df6e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
    df72:	e9cd 8306 	strd	r8, r3, [sp, #24]
    df76:	e7ef      	b.n	df58 <z_prf+0x13c>
    df78:	4690      	mov	r8, r2
    df7a:	fb01 3404 	mla	r4, r1, r4, r3
    df7e:	3c30      	subs	r4, #48	; 0x30
	while (isdigit((int)*p)) {
    df80:	4642      	mov	r2, r8
    df82:	f812 3b01 	ldrb.w	r3, [r2], #1
    df86:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    df8a:	2809      	cmp	r0, #9
    df8c:	d9f4      	bls.n	df78 <z_prf+0x15c>
    df8e:	e791      	b.n	deb4 <z_prf+0x98>
	int i = 0;
    df90:	2400      	movs	r4, #0
		i = 10 * i + *p++ - '0';
    df92:	210a      	movs	r1, #10
    df94:	e7f4      	b.n	df80 <z_prf+0x164>
			precision = -1;
    df96:	f04f 34ff 	mov.w	r4, #4294967295
    df9a:	e78d      	b.n	deb8 <z_prf+0x9c>
			i = 0;
    df9c:	4607      	mov	r7, r0
    df9e:	f8cd 8018 	str.w	r8, [sp, #24]
    dfa2:	e79e      	b.n	dee2 <z_prf+0xc6>
    dfa4:	f1a5 0358 	sub.w	r3, r5, #88	; 0x58
    dfa8:	2b20      	cmp	r3, #32
    dfaa:	d8a5      	bhi.n	def8 <z_prf+0xdc>
    dfac:	a201      	add	r2, pc, #4	; (adr r2, dfb4 <z_prf+0x198>)
    dfae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    dfb2:	bf00      	nop
    dfb4:	0000e63b 	.word	0x0000e63b
    dfb8:	0000def9 	.word	0x0000def9
    dfbc:	0000def9 	.word	0x0000def9
    dfc0:	0000def9 	.word	0x0000def9
    dfc4:	0000def9 	.word	0x0000def9
    dfc8:	0000def9 	.word	0x0000def9
    dfcc:	0000def9 	.word	0x0000def9
    dfd0:	0000def9 	.word	0x0000def9
    dfd4:	0000def9 	.word	0x0000def9
    dfd8:	0000def9 	.word	0x0000def9
    dfdc:	0000def9 	.word	0x0000def9
    dfe0:	0000e10d 	.word	0x0000e10d
    dfe4:	0000e1e3 	.word	0x0000e1e3
    dfe8:	0000e045 	.word	0x0000e045
    dfec:	0000e045 	.word	0x0000e045
    dff0:	0000e045 	.word	0x0000e045
    dff4:	0000def9 	.word	0x0000def9
    dff8:	0000e1e3 	.word	0x0000e1e3
    dffc:	0000def9 	.word	0x0000def9
    e000:	0000def9 	.word	0x0000def9
    e004:	0000def9 	.word	0x0000def9
    e008:	0000def9 	.word	0x0000def9
    e00c:	0000e5c7 	.word	0x0000e5c7
    e010:	0000e63b 	.word	0x0000e63b
    e014:	0000e5f1 	.word	0x0000e5f1
    e018:	0000def9 	.word	0x0000def9
    e01c:	0000def9 	.word	0x0000def9
    e020:	0000e613 	.word	0x0000e613
    e024:	0000def9 	.word	0x0000def9
    e028:	0000e63b 	.word	0x0000e63b
    e02c:	0000def9 	.word	0x0000def9
    e030:	0000def9 	.word	0x0000def9
    e034:	0000e63b 	.word	0x0000e63b
			switch (c) {
    e038:	f1a5 0345 	sub.w	r3, r5, #69	; 0x45
    e03c:	b2db      	uxtb	r3, r3
    e03e:	2b02      	cmp	r3, #2
    e040:	f63f af5a 	bhi.w	def8 <z_prf+0xdc>
				u.d = va_arg(vargs, double);
    e044:	3607      	adds	r6, #7
    e046:	f026 0307 	bic.w	r3, r6, #7
    e04a:	4619      	mov	r1, r3
    e04c:	e8f1 2302 	ldrd	r2, r3, [r1], #8
	fract = (double_temp << 11) & ~HIGHBIT64;
    e050:	02d8      	lsls	r0, r3, #11
    e052:	ea40 5052 	orr.w	r0, r0, r2, lsr #21
    e056:	02d6      	lsls	r6, r2, #11
    e058:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
	if (sign) {
    e05c:	2a00      	cmp	r2, #0
				u.d = va_arg(vargs, double);
    e05e:	9101      	str	r1, [sp, #4]
	fract = (double_temp << 11) & ~HIGHBIT64;
    e060:	9604      	str	r6, [sp, #16]
	exp = double_temp >> 52 & 0x7ff;
    e062:	f3c3 510a 	ubfx	r1, r3, #20, #11
	fract = (double_temp << 11) & ~HIGHBIT64;
    e066:	9005      	str	r0, [sp, #20]
	if (sign) {
    e068:	f173 0300 	sbcs.w	r3, r3, #0
	fract = (double_temp << 11) & ~HIGHBIT64;
    e06c:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    e070:	e9cd 6714 	strd	r6, r7, [sp, #80]	; 0x50
	if (sign) {
    e074:	f280 80e5 	bge.w	e242 <z_prf+0x426>
		*buf++ = '-';
    e078:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
    e07a:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
    e07e:	f10d 0765 	add.w	r7, sp, #101	; 0x65
	if (exp == 0x7ff) {
    e082:	f240 73ff 	movw	r3, #2047	; 0x7ff
    e086:	4299      	cmp	r1, r3
    e088:	f040 80f6 	bne.w	e278 <z_prf+0x45c>
		if (!fract) {
    e08c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    e090:	430a      	orrs	r2, r1
    e092:	f1a5 0541 	sub.w	r5, r5, #65	; 0x41
    e096:	f107 0303 	add.w	r3, r7, #3
    e09a:	f040 80e2 	bne.w	e262 <z_prf+0x446>
			if (isupper((int)c)) {
    e09e:	2d19      	cmp	r5, #25
    e0a0:	f200 80d9 	bhi.w	e256 <z_prf+0x43a>
				*buf++ = 'I';
    e0a4:	2249      	movs	r2, #73	; 0x49
    e0a6:	703a      	strb	r2, [r7, #0]
				*buf++ = 'N';
    e0a8:	224e      	movs	r2, #78	; 0x4e
    e0aa:	707a      	strb	r2, [r7, #1]
				*buf++ = 'F';
    e0ac:	2246      	movs	r2, #70	; 0x46
		*buf = 0;
    e0ae:	2400      	movs	r4, #0
			zero.predot = zero.postdot = zero.trail = 0;
    e0b0:	46a2      	mov	sl, r4
    e0b2:	46a3      	mov	fp, r4
		return buf - start;
    e0b4:	ae19      	add	r6, sp, #100	; 0x64
				*buf++ = 'n';
    e0b6:	70ba      	strb	r2, [r7, #2]
		*buf = 0;
    e0b8:	70fc      	strb	r4, [r7, #3]
		return buf - start;
    e0ba:	1b9b      	subs	r3, r3, r6
				if (fplus || fspace || (buf[0] == '-')) {
    e0bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e0be:	2a00      	cmp	r2, #0
    e0c0:	f040 827e 	bne.w	e5c0 <z_prf+0x7a4>
    e0c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e0c6:	2a00      	cmp	r2, #0
    e0c8:	f040 827a 	bne.w	e5c0 <z_prf+0x7a4>
    e0cc:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
    e0d0:	f1a8 022d 	sub.w	r2, r8, #45	; 0x2d
    e0d4:	f1d2 0800 	rsbs	r8, r2, #0
    e0d8:	eb48 0802 	adc.w	r8, r8, r2
				clen += zero.predot + zero.postdot + zero.trail;
    e0dc:	eb0b 060a 	add.w	r6, fp, sl
    e0e0:	4433      	add	r3, r6
    e0e2:	191e      	adds	r6, r3, r4
				if (!isdigit((int)buf[prefix])) {
    e0e4:	ab20      	add	r3, sp, #128	; 0x80
    e0e6:	4443      	add	r3, r8
    e0e8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    e0ec:	3b30      	subs	r3, #48	; 0x30
    e0ee:	2b09      	cmp	r3, #9
    e0f0:	f200 82ff 	bhi.w	e6f2 <z_prf+0x8d6>
			} else if (fzero) {
    e0f4:	9b08      	ldr	r3, [sp, #32]
    e0f6:	2b00      	cmp	r3, #0
    e0f8:	f000 82fe 	beq.w	e6f8 <z_prf+0x8dc>
    e0fc:	9b07      	ldr	r3, [sp, #28]
    e0fe:	af19      	add	r7, sp, #100	; 0x64
    e100:	1b9b      	subs	r3, r3, r6
    e102:	e014      	b.n	e12e <z_prf+0x312>
    e104:	0002165b 	.word	0x0002165b
    e108:	00021661 	.word	0x00021661
				break;
    e10c:	f04f 0800 	mov.w	r8, #0
				buf[0] = va_arg(vargs, int);
    e110:	4632      	mov	r2, r6
				break;
    e112:	4644      	mov	r4, r8
				clen = 1;
    e114:	2601      	movs	r6, #1
				buf[0] = va_arg(vargs, int);
    e116:	f852 3b04 	ldr.w	r3, [r2], #4
    e11a:	9201      	str	r2, [sp, #4]
    e11c:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
				break;
    e120:	af19      	add	r7, sp, #100	; 0x64
				zero_head = precision - clen + prefix;
    e122:	eb04 0308 	add.w	r3, r4, r8
			zero.predot = zero.postdot = zero.trail = 0;
    e126:	2400      	movs	r4, #0
    e128:	46a2      	mov	sl, r4
    e12a:	46a3      	mov	fp, r4
				zero_head = precision - clen + prefix;
    e12c:	1b9b      	subs	r3, r3, r6
			if (zero_head < 0) {
    e12e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
			width -= clen + zero_head;
    e132:	199a      	adds	r2, r3, r6
    e134:	9208      	str	r2, [sp, #32]
    e136:	9a07      	ldr	r2, [sp, #28]
    e138:	1999      	adds	r1, r3, r6
    e13a:	1a55      	subs	r5, r2, r1
			if (!fminus && width > 0) {
    e13c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    e13e:	b912      	cbnz	r2, e146 <z_prf+0x32a>
    e140:	2d00      	cmp	r5, #0
    e142:	f300 82ee 	bgt.w	e722 <z_prf+0x906>
			while (prefix-- > 0) {
    e146:	eb07 0208 	add.w	r2, r7, r8
    e14a:	42ba      	cmp	r2, r7
    e14c:	f040 82eb 	bne.w	e726 <z_prf+0x90a>
			while (zero_head-- > 0) {
    e150:	3b01      	subs	r3, #1
    e152:	f080 82f6 	bcs.w	e742 <z_prf+0x926>
			clen -= prefix;
    e156:	eba6 0608 	sub.w	r6, r6, r8
			if (zero.predot) {
    e15a:	f1bb 0f00 	cmp.w	fp, #0
    e15e:	d010      	beq.n	e182 <z_prf+0x366>
				c = *cptr;
    e160:	7838      	ldrb	r0, [r7, #0]
				while (isdigit((int)c)) {
    e162:	eb07 0806 	add.w	r8, r7, r6
    e166:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    e16a:	2b09      	cmp	r3, #9
    e16c:	eba8 0607 	sub.w	r6, r8, r7
    e170:	f240 82f2 	bls.w	e758 <z_prf+0x93c>
    e174:	46d8      	mov	r8, fp
				while (zero.predot-- > 0) {
    e176:	f1b8 0801 	subs.w	r8, r8, #1
    e17a:	f080 82f6 	bcs.w	e76a <z_prf+0x94e>
				clen -= zero.predot;
    e17e:	eba6 060b 	sub.w	r6, r6, fp
			if (zero.postdot) {
    e182:	f1ba 0f00 	cmp.w	sl, #0
    e186:	d016      	beq.n	e1b6 <z_prf+0x39a>
    e188:	eb07 0806 	add.w	r8, r7, r6
					c = *cptr++;
    e18c:	f817 bb01 	ldrb.w	fp, [r7], #1
					PUTC(c);
    e190:	4649      	mov	r1, r9
    e192:	4658      	mov	r0, fp
    e194:	9b03      	ldr	r3, [sp, #12]
    e196:	4798      	blx	r3
    e198:	3001      	adds	r0, #1
    e19a:	f43f ae55 	beq.w	de48 <z_prf+0x2c>
				} while (c != '.');
    e19e:	f1bb 0f2e 	cmp.w	fp, #46	; 0x2e
    e1a2:	eba8 0607 	sub.w	r6, r8, r7
    e1a6:	d1f1      	bne.n	e18c <z_prf+0x370>
				while (zero.postdot-- > 0) {
    e1a8:	46d0      	mov	r8, sl
    e1aa:	f1b8 0f00 	cmp.w	r8, #0
    e1ae:	f300 82e5 	bgt.w	e77c <z_prf+0x960>
				clen -= zero.postdot;
    e1b2:	eba6 060a 	sub.w	r6, r6, sl
			if (zero.trail) {
    e1b6:	b194      	cbz	r4, e1de <z_prf+0x3c2>
				c = *cptr;
    e1b8:	7838      	ldrb	r0, [r7, #0]
				while (isdigit((int)c) || c == '.') {
    e1ba:	eb07 0806 	add.w	r8, r7, r6
    e1be:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    e1c2:	2b09      	cmp	r3, #9
    e1c4:	eba8 0607 	sub.w	r6, r8, r7
    e1c8:	f240 82e3 	bls.w	e792 <z_prf+0x976>
    e1cc:	282e      	cmp	r0, #46	; 0x2e
    e1ce:	f000 82e0 	beq.w	e792 <z_prf+0x976>
				while (zero.trail-- > 0) {
    e1d2:	46a0      	mov	r8, r4
    e1d4:	f1b8 0f00 	cmp.w	r8, #0
    e1d8:	f300 82e4 	bgt.w	e7a4 <z_prf+0x988>
				clen -= zero.trail;
    e1dc:	1b36      	subs	r6, r6, r4
    e1de:	443e      	add	r6, r7
    e1e0:	e2f3      	b.n	e7ca <z_prf+0x9ae>
				switch (i) {
    e1e2:	6835      	ldr	r5, [r6, #0]
	if (value < 0) {
    e1e4:	1d33      	adds	r3, r6, #4
    e1e6:	2d00      	cmp	r5, #0
    e1e8:	9301      	str	r3, [sp, #4]
    e1ea:	da1c      	bge.n	e226 <z_prf+0x40a>
		*buf++ = '-';
    e1ec:	232d      	movs	r3, #45	; 0x2d
		value = -value;
    e1ee:	4269      	negs	r1, r5
		*buf++ = '-';
    e1f0:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
		*buf++ = ' ';
    e1f4:	f10d 0765 	add.w	r7, sp, #101	; 0x65
	return _to_x(buf, value, 10);
    e1f8:	220a      	movs	r2, #10
    e1fa:	4638      	mov	r0, r7
    e1fc:	f00f fb9e 	bl	1d93c <_to_x>
				if (fplus || fspace || val < 0) {
    e200:	9b09      	ldr	r3, [sp, #36]	; 0x24
	return (buf + _to_udec(buf, value)) - start;
    e202:	4438      	add	r0, r7
    e204:	ae19      	add	r6, sp, #100	; 0x64
    e206:	1b86      	subs	r6, r0, r6
				if (fplus || fspace || val < 0) {
    e208:	2b00      	cmp	r3, #0
    e20a:	f040 826d 	bne.w	e6e8 <z_prf+0x8cc>
    e20e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e210:	2b00      	cmp	r3, #0
    e212:	f040 8269 	bne.w	e6e8 <z_prf+0x8cc>
    e216:	ea4f 78d5 	mov.w	r8, r5, lsr #31
			if (precision >= 0) {
    e21a:	2c00      	cmp	r4, #0
    e21c:	da80      	bge.n	e120 <z_prf+0x304>
			zero.predot = zero.postdot = zero.trail = 0;
    e21e:	2400      	movs	r4, #0
    e220:	46a2      	mov	sl, r4
    e222:	46a3      	mov	fp, r4
    e224:	e766      	b.n	e0f4 <z_prf+0x2d8>
	} else if (fplus) {
    e226:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e228:	b123      	cbz	r3, e234 <z_prf+0x418>
		*buf++ = '+';
    e22a:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
    e22c:	4629      	mov	r1, r5
    e22e:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
    e232:	e7df      	b.n	e1f4 <z_prf+0x3d8>
	} else if (fspace) {
    e234:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e236:	b10b      	cbz	r3, e23c <z_prf+0x420>
		*buf++ = ' ';
    e238:	2320      	movs	r3, #32
    e23a:	e7f7      	b.n	e22c <z_prf+0x410>
    e23c:	4629      	mov	r1, r5
    e23e:	af19      	add	r7, sp, #100	; 0x64
    e240:	e7da      	b.n	e1f8 <z_prf+0x3dc>
	} else if (fplus) {
    e242:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e244:	b10b      	cbz	r3, e24a <z_prf+0x42e>
		*buf++ = '+';
    e246:	232b      	movs	r3, #43	; 0x2b
    e248:	e717      	b.n	e07a <z_prf+0x25e>
	} else if (fspace) {
    e24a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e24c:	b10b      	cbz	r3, e252 <z_prf+0x436>
		*buf++ = ' ';
    e24e:	2320      	movs	r3, #32
    e250:	e713      	b.n	e07a <z_prf+0x25e>
    e252:	af19      	add	r7, sp, #100	; 0x64
    e254:	e715      	b.n	e082 <z_prf+0x266>
				*buf++ = 'i';
    e256:	2269      	movs	r2, #105	; 0x69
    e258:	703a      	strb	r2, [r7, #0]
				*buf++ = 'n';
    e25a:	226e      	movs	r2, #110	; 0x6e
    e25c:	707a      	strb	r2, [r7, #1]
				*buf++ = 'f';
    e25e:	2266      	movs	r2, #102	; 0x66
    e260:	e725      	b.n	e0ae <z_prf+0x292>
			if (isupper((int)c)) {
    e262:	2d19      	cmp	r5, #25
				*buf++ = 'N';
    e264:	bf99      	ittee	ls
    e266:	224e      	movls	r2, #78	; 0x4e
				*buf++ = 'A';
    e268:	2141      	movls	r1, #65	; 0x41
				*buf++ = 'n';
    e26a:	226e      	movhi	r2, #110	; 0x6e
				*buf++ = 'a';
    e26c:	2161      	movhi	r1, #97	; 0x61
				*buf++ = 'N';
    e26e:	bf94      	ite	ls
    e270:	703a      	strbls	r2, [r7, #0]
				*buf++ = 'n';
    e272:	703a      	strbhi	r2, [r7, #0]
				*buf++ = 'a';
    e274:	7079      	strb	r1, [r7, #1]
    e276:	e71a      	b.n	e0ae <z_prf+0x292>
	if ((exp | fract) != 0) {
    e278:	9b04      	ldr	r3, [sp, #16]
    e27a:	9805      	ldr	r0, [sp, #20]
    e27c:	430b      	orrs	r3, r1
    e27e:	930e      	str	r3, [sp, #56]	; 0x38
    e280:	17cb      	asrs	r3, r1, #31
    e282:	4303      	orrs	r3, r0
		c = 'f';
    e284:	2d46      	cmp	r5, #70	; 0x46
	if ((exp | fract) != 0) {
    e286:	930f      	str	r3, [sp, #60]	; 0x3c
		c = 'f';
    e288:	bf08      	it	eq
    e28a:	2566      	moveq	r5, #102	; 0x66
	if ((exp | fract) != 0) {
    e28c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    e290:	4313      	orrs	r3, r2
    e292:	f000 8107 	beq.w	e4a4 <z_prf+0x688>
		if (exp == 0) {
    e296:	2900      	cmp	r1, #0
    e298:	f000 809f 	beq.w	e3da <z_prf+0x5be>
		fract |= HIGHBIT64;
    e29c:	2600      	movs	r6, #0
    e29e:	9b15      	ldr	r3, [sp, #84]	; 0x54
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    e2a0:	f2a1 38fe 	subw	r8, r1, #1022	; 0x3fe
		fract |= HIGHBIT64;
    e2a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    e2a8:	9315      	str	r3, [sp, #84]	; 0x54
	while (exp <= -3) {
    e2aa:	f118 0f02 	cmn.w	r8, #2
    e2ae:	f2c0 80a8 	blt.w	e402 <z_prf+0x5e6>
	while (exp > 0) {
    e2b2:	f1b8 0f00 	cmp.w	r8, #0
    e2b6:	f300 80d4 	bgt.w	e462 <z_prf+0x646>
		_rlrshift(&fract);
    e2ba:	a814      	add	r0, sp, #80	; 0x50
		exp++;
    e2bc:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
    e2c0:	f00f fb60 	bl	1d984 <_rlrshift>
	while (exp < (0 + 4)) {
    e2c4:	f1b8 0f04 	cmp.w	r8, #4
    e2c8:	d1f7      	bne.n	e2ba <z_prf+0x49e>
		precision = 6;		/* Default precision if none given */
    e2ca:	2c00      	cmp	r4, #0
	if ((c == 'g') || (c == 'G')) {
    e2cc:	f005 03df 	and.w	r3, r5, #223	; 0xdf
		precision = 6;		/* Default precision if none given */
    e2d0:	bfb8      	it	lt
    e2d2:	2406      	movlt	r4, #6
	if ((c == 'g') || (c == 'G')) {
    e2d4:	2b47      	cmp	r3, #71	; 0x47
    e2d6:	f040 80ee 	bne.w	e4b6 <z_prf+0x69a>
		if (decexp < (-4 + 1) || decexp > precision) {
    e2da:	1cf1      	adds	r1, r6, #3
    e2dc:	db02      	blt.n	e2e4 <z_prf+0x4c8>
    e2de:	42b4      	cmp	r4, r6
    e2e0:	f280 80e3 	bge.w	e4aa <z_prf+0x68e>
			c += 'e' - 'g';
    e2e4:	3d02      	subs	r5, #2
    e2e6:	b2ed      	uxtb	r5, r5
			if (precision > 0) {
    e2e8:	2c00      	cmp	r4, #0
    e2ea:	f000 80ea 	beq.w	e4c2 <z_prf+0x6a6>
				precision--;
    e2ee:	3c01      	subs	r4, #1
		if (!falt && (precision > 0)) {
    e2f0:	f1ba 0f00 	cmp.w	sl, #0
    e2f4:	f040 80e5 	bne.w	e4c2 <z_prf+0x6a6>
    e2f8:	2c00      	cmp	r4, #0
    e2fa:	bfd4      	ite	le
    e2fc:	f04f 0800 	movle.w	r8, #0
    e300:	f04f 0801 	movgt.w	r8, #1
	if (c == 'f') {
    e304:	2d66      	cmp	r5, #102	; 0x66
    e306:	f040 80de 	bne.w	e4c6 <z_prf+0x6aa>
		if (exp < 0) {
    e30a:	eb14 0b06 	adds.w	fp, r4, r6
    e30e:	f04f 0566 	mov.w	r5, #102	; 0x66
    e312:	f100 80db 	bmi.w	e4cc <z_prf+0x6b0>
	if (exp > 16) {
    e316:	f1bb 0f10 	cmp.w	fp, #16
    e31a:	bfa8      	it	ge
    e31c:	f04f 0b10 	movge.w	fp, #16
    e320:	2310      	movs	r3, #16
	ltemp = 0x0800000000000000;
    e322:	2200      	movs	r2, #0
    e324:	9313      	str	r3, [sp, #76]	; 0x4c
    e326:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    e32a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
	while (exp--) {
    e32e:	f1bb 0b01 	subs.w	fp, fp, #1
    e332:	f080 80ce 	bcs.w	e4d2 <z_prf+0x6b6>
	fract += ltemp;
    e336:	9b14      	ldr	r3, [sp, #80]	; 0x50
    e338:	9a16      	ldr	r2, [sp, #88]	; 0x58
    e33a:	9917      	ldr	r1, [sp, #92]	; 0x5c
    e33c:	189b      	adds	r3, r3, r2
    e33e:	9a15      	ldr	r2, [sp, #84]	; 0x54
    e340:	eb41 0202 	adc.w	r2, r1, r2
    e344:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
	if ((fract >> 32) & 0xF0000000) {
    e348:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
    e34c:	9310      	str	r3, [sp, #64]	; 0x40
    e34e:	2300      	movs	r3, #0
    e350:	9311      	str	r3, [sp, #68]	; 0x44
    e352:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    e356:	4313      	orrs	r3, r2
    e358:	d006      	beq.n	e368 <z_prf+0x54c>
		_ldiv5(&fract);
    e35a:	a814      	add	r0, sp, #80	; 0x50
    e35c:	f00f fb23 	bl	1d9a6 <_ldiv5>
		_rlrshift(&fract);
    e360:	a814      	add	r0, sp, #80	; 0x50
    e362:	f00f fb0f 	bl	1d984 <_rlrshift>
		decexp++;
    e366:	3601      	adds	r6, #1
	if (c == 'f') {
    e368:	2d66      	cmp	r5, #102	; 0x66
    e36a:	f040 80cf 	bne.w	e50c <z_prf+0x6f0>
		if (decexp > 0) {
    e36e:	2e00      	cmp	r6, #0
    e370:	f340 80b6 	ble.w	e4e0 <z_prf+0x6c4>
			while (decexp > 0 && digit_count > 0) {
    e374:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e376:	2b00      	cmp	r3, #0
    e378:	dd07      	ble.n	e38a <z_prf+0x56e>
				*buf++ = _get_digit(&fract, &digit_count);
    e37a:	a913      	add	r1, sp, #76	; 0x4c
    e37c:	a814      	add	r0, sp, #80	; 0x50
    e37e:	f00f fb3a 	bl	1d9f6 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    e382:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
    e384:	f807 0b01 	strb.w	r0, [r7], #1
			while (decexp > 0 && digit_count > 0) {
    e388:	d1f4      	bne.n	e374 <z_prf+0x558>
			zp->predot = decexp;
    e38a:	46b3      	mov	fp, r6
    e38c:	463b      	mov	r3, r7
			decexp = 0;
    e38e:	2600      	movs	r6, #0
		if (falt || (precision > 0)) {
    e390:	f1ba 0f00 	cmp.w	sl, #0
    e394:	d101      	bne.n	e39a <z_prf+0x57e>
    e396:	2c00      	cmp	r4, #0
    e398:	dd15      	ble.n	e3c6 <z_prf+0x5aa>
			*buf++ = '.';
    e39a:	222e      	movs	r2, #46	; 0x2e
    e39c:	f803 2b01 	strb.w	r2, [r3], #1
		if (decexp < 0 && precision > 0) {
    e3a0:	2e00      	cmp	r6, #0
    e3a2:	f000 80ae 	beq.w	e502 <z_prf+0x6e6>
    e3a6:	2c00      	cmp	r4, #0
    e3a8:	f340 80ad 	ble.w	e506 <z_prf+0x6ea>
			zp->postdot = -decexp;
    e3ac:	f1c6 0a00 	rsb	sl, r6, #0
    e3b0:	45a2      	cmp	sl, r4
    e3b2:	bfa8      	it	ge
    e3b4:	46a2      	movge	sl, r4
			precision -= zp->postdot;
    e3b6:	eba4 040a 	sub.w	r4, r4, sl
		while (precision > 0 && digit_count > 0) {
    e3ba:	2c00      	cmp	r4, #0
    e3bc:	dd03      	ble.n	e3c6 <z_prf+0x5aa>
    e3be:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    e3c0:	2a00      	cmp	r2, #0
    e3c2:	f300 8094 	bgt.w	e4ee <z_prf+0x6d2>
	if (prune_zero) {
    e3c6:	f1b8 0f00 	cmp.w	r8, #0
    e3ca:	f040 80b4 	bne.w	e536 <z_prf+0x71a>
	*buf = 0;
    e3ce:	2200      	movs	r2, #0
	return buf - start;
    e3d0:	ae19      	add	r6, sp, #100	; 0x64
	*buf = 0;
    e3d2:	701a      	strb	r2, [r3, #0]
	return buf - start;
    e3d4:	1b9b      	subs	r3, r3, r6
    e3d6:	e671      	b.n	e0bc <z_prf+0x2a0>
				exp--;
    e3d8:	3901      	subs	r1, #1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
    e3da:	9b04      	ldr	r3, [sp, #16]
    e3dc:	18db      	adds	r3, r3, r3
    e3de:	9304      	str	r3, [sp, #16]
    e3e0:	9b05      	ldr	r3, [sp, #20]
    e3e2:	415b      	adcs	r3, r3
    e3e4:	9305      	str	r3, [sp, #20]
    e3e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    e3ea:	2a00      	cmp	r2, #0
    e3ec:	f173 0300 	sbcs.w	r3, r3, #0
    e3f0:	daf2      	bge.n	e3d8 <z_prf+0x5bc>
    e3f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    e3f6:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    e3fa:	e74f      	b.n	e29c <z_prf+0x480>
			_rlrshift(&fract);
    e3fc:	a814      	add	r0, sp, #80	; 0x50
    e3fe:	f00f fac1 	bl	1d984 <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
    e402:	e9dd 2c14 	ldrd	r2, ip, [sp, #80]	; 0x50
    e406:	2300      	movs	r3, #0
    e408:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    e40c:	930b      	str	r3, [sp, #44]	; 0x2c
    e40e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    e412:	2900      	cmp	r1, #0
    e414:	bf08      	it	eq
    e416:	f1b0 3f33 	cmpeq.w	r0, #858993459	; 0x33333333
    e41a:	f108 0801 	add.w	r8, r8, #1
    e41e:	d2ed      	bcs.n	e3fc <z_prf+0x5e0>
		fract *= 5U;
    e420:	2005      	movs	r0, #5
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    e422:	f04f 0e00 	mov.w	lr, #0
		fract *= 5U;
    e426:	fba2 2300 	umull	r2, r3, r2, r0
    e42a:	fb00 330c 	mla	r3, r0, ip, r3
    e42e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
		decexp--;
    e432:	3e01      	subs	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    e434:	2100      	movs	r1, #0
    e436:	f04f 0c00 	mov.w	ip, #0
    e43a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
    e43e:	458c      	cmp	ip, r1
    e440:	bf08      	it	eq
    e442:	459b      	cmpeq	fp, r3
    e444:	d206      	bcs.n	e454 <z_prf+0x638>
    e446:	f1be 0f00 	cmp.w	lr, #0
    e44a:	f43f af2e 	beq.w	e2aa <z_prf+0x48e>
    e44e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    e452:	e72a      	b.n	e2aa <z_prf+0x48e>
			fract <<= 1;
    e454:	1892      	adds	r2, r2, r2
			exp--;
    e456:	f04f 0e01 	mov.w	lr, #1
			fract <<= 1;
    e45a:	415b      	adcs	r3, r3
			exp--;
    e45c:	f108 38ff 	add.w	r8, r8, #4294967295
    e460:	e7e8      	b.n	e434 <z_prf+0x618>
		_ldiv5(&fract);
    e462:	a814      	add	r0, sp, #80	; 0x50
    e464:	f00f fa9f 	bl	1d9a6 <_ldiv5>
		exp--;
    e468:	e9dd 1014 	ldrd	r1, r0, [sp, #80]	; 0x50
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    e46c:	f04f 0e00 	mov.w	lr, #0
		exp--;
    e470:	f108 38ff 	add.w	r8, r8, #4294967295
		decexp++;
    e474:	3601      	adds	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    e476:	2300      	movs	r3, #0
    e478:	f04f 0c00 	mov.w	ip, #0
    e47c:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
    e480:	459c      	cmp	ip, r3
    e482:	bf08      	it	eq
    e484:	4583      	cmpeq	fp, r0
    e486:	d206      	bcs.n	e496 <z_prf+0x67a>
    e488:	f1be 0f00 	cmp.w	lr, #0
    e48c:	f43f af11 	beq.w	e2b2 <z_prf+0x496>
    e490:	e9cd 1014 	strd	r1, r0, [sp, #80]	; 0x50
    e494:	e70d      	b.n	e2b2 <z_prf+0x496>
			fract <<= 1;
    e496:	1849      	adds	r1, r1, r1
			exp--;
    e498:	f04f 0e01 	mov.w	lr, #1
			fract <<= 1;
    e49c:	4140      	adcs	r0, r0
			exp--;
    e49e:	f108 38ff 	add.w	r8, r8, #4294967295
    e4a2:	e7e8      	b.n	e476 <z_prf+0x65a>
    e4a4:	2600      	movs	r6, #0
    e4a6:	46b0      	mov	r8, r6
    e4a8:	e707      	b.n	e2ba <z_prf+0x49e>
			precision -= decexp;
    e4aa:	1ba4      	subs	r4, r4, r6
		if (!falt && (precision > 0)) {
    e4ac:	f1ba 0f00 	cmp.w	sl, #0
    e4b0:	d104      	bne.n	e4bc <z_prf+0x6a0>
			c = 'f';
    e4b2:	2566      	movs	r5, #102	; 0x66
    e4b4:	e720      	b.n	e2f8 <z_prf+0x4dc>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    e4b6:	f04f 0800 	mov.w	r8, #0
    e4ba:	e723      	b.n	e304 <z_prf+0x4e8>
    e4bc:	f04f 0800 	mov.w	r8, #0
    e4c0:	e723      	b.n	e30a <z_prf+0x4ee>
    e4c2:	f04f 0800 	mov.w	r8, #0
		exp = precision + 1;
    e4c6:	f104 0b01 	add.w	fp, r4, #1
    e4ca:	e724      	b.n	e316 <z_prf+0x4fa>
			exp = 0;
    e4cc:	f04f 0b00 	mov.w	fp, #0
    e4d0:	e726      	b.n	e320 <z_prf+0x504>
		_ldiv5(&ltemp);
    e4d2:	a816      	add	r0, sp, #88	; 0x58
    e4d4:	f00f fa67 	bl	1d9a6 <_ldiv5>
		_rlrshift(&ltemp);
    e4d8:	a816      	add	r0, sp, #88	; 0x58
    e4da:	f00f fa53 	bl	1d984 <_rlrshift>
    e4de:	e726      	b.n	e32e <z_prf+0x512>
			*buf++ = '0';
    e4e0:	463b      	mov	r3, r7
    e4e2:	2230      	movs	r2, #48	; 0x30
			zero.predot = zero.postdot = zero.trail = 0;
    e4e4:	f04f 0b00 	mov.w	fp, #0
			*buf++ = '0';
    e4e8:	f803 2b01 	strb.w	r2, [r3], #1
    e4ec:	e750      	b.n	e390 <z_prf+0x574>
			*buf++ = _get_digit(&fract, &digit_count);
    e4ee:	a913      	add	r1, sp, #76	; 0x4c
    e4f0:	a814      	add	r0, sp, #80	; 0x50
    e4f2:	930a      	str	r3, [sp, #40]	; 0x28
    e4f4:	f00f fa7f 	bl	1d9f6 <_get_digit>
    e4f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			precision--;
    e4fa:	3c01      	subs	r4, #1
			*buf++ = _get_digit(&fract, &digit_count);
    e4fc:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
    e500:	e75b      	b.n	e3ba <z_prf+0x59e>
			zero.predot = zero.postdot = zero.trail = 0;
    e502:	46b2      	mov	sl, r6
    e504:	e759      	b.n	e3ba <z_prf+0x59e>
    e506:	f04f 0a00 	mov.w	sl, #0
    e50a:	e75c      	b.n	e3c6 <z_prf+0x5aa>
		*buf = _get_digit(&fract, &digit_count);
    e50c:	a913      	add	r1, sp, #76	; 0x4c
    e50e:	a814      	add	r0, sp, #80	; 0x50
    e510:	f00f fa71 	bl	1d9f6 <_get_digit>
		if (*buf++ != '0') {
    e514:	2830      	cmp	r0, #48	; 0x30
		*buf = _get_digit(&fract, &digit_count);
    e516:	7038      	strb	r0, [r7, #0]
			decexp--;
    e518:	bf18      	it	ne
    e51a:	f106 36ff 	addne.w	r6, r6, #4294967295
		if (falt || (precision > 0)) {
    e51e:	f1ba 0f00 	cmp.w	sl, #0
    e522:	d138      	bne.n	e596 <z_prf+0x77a>
    e524:	2c00      	cmp	r4, #0
    e526:	dc36      	bgt.n	e596 <z_prf+0x77a>
		if (*buf++ != '0') {
    e528:	1c7b      	adds	r3, r7, #1
	if (prune_zero) {
    e52a:	f1b8 0f00 	cmp.w	r8, #0
    e52e:	d044      	beq.n	e5ba <z_prf+0x79e>
			zero.predot = zero.postdot = zero.trail = 0;
    e530:	f04f 0b00 	mov.w	fp, #0
    e534:	46da      	mov	sl, fp
		while (*--buf == '0')
    e536:	4619      	mov	r1, r3
    e538:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    e53c:	2a30      	cmp	r2, #48	; 0x30
    e53e:	d0fa      	beq.n	e536 <z_prf+0x71a>
		if (*buf != '.') {
    e540:	2a2e      	cmp	r2, #46	; 0x2e
    e542:	bf18      	it	ne
    e544:	460b      	movne	r3, r1
    e546:	2400      	movs	r4, #0
	if ((c == 'e') || (c == 'E')) {
    e548:	f005 02df 	and.w	r2, r5, #223	; 0xdf
    e54c:	2a45      	cmp	r2, #69	; 0x45
    e54e:	f47f af3e 	bne.w	e3ce <z_prf+0x5b2>
		if (decexp < 0) {
    e552:	2e00      	cmp	r6, #0
			*buf++ = '-';
    e554:	bfb4      	ite	lt
    e556:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
    e558:	222b      	movge	r2, #43	; 0x2b
		*buf++ = c;
    e55a:	4619      	mov	r1, r3
			decexp = -decexp;
    e55c:	bfb8      	it	lt
    e55e:	4276      	neglt	r6, r6
		if (decexp >= 100) {
    e560:	2e63      	cmp	r6, #99	; 0x63
		*buf++ = c;
    e562:	f801 5b02 	strb.w	r5, [r1], #2
			*buf++ = '-';
    e566:	705a      	strb	r2, [r3, #1]
		if (decexp >= 100) {
    e568:	dd08      	ble.n	e57c <z_prf+0x760>
			*buf++ = (decexp / 100) + '0';
    e56a:	2064      	movs	r0, #100	; 0x64
    e56c:	fb96 f2f0 	sdiv	r2, r6, r0
			decexp %= 100;
    e570:	fb00 6612 	mls	r6, r0, r2, r6
			*buf++ = (decexp / 100) + '0';
    e574:	f102 0530 	add.w	r5, r2, #48	; 0x30
    e578:	1cd9      	adds	r1, r3, #3
    e57a:	709d      	strb	r5, [r3, #2]
		*buf++ = (decexp / 10) + '0';
    e57c:	200a      	movs	r0, #10
    e57e:	fb96 f2f0 	sdiv	r2, r6, r0
    e582:	460b      	mov	r3, r1
		decexp %= 10;
    e584:	fb00 6612 	mls	r6, r0, r2, r6
		*buf++ = (decexp / 10) + '0';
    e588:	f102 0530 	add.w	r5, r2, #48	; 0x30
		*buf++ = decexp + '0';
    e58c:	3630      	adds	r6, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    e58e:	f803 5b02 	strb.w	r5, [r3], #2
		*buf++ = decexp + '0';
    e592:	704e      	strb	r6, [r1, #1]
    e594:	e71b      	b.n	e3ce <z_prf+0x5b2>
			*buf++ = '.';
    e596:	222e      	movs	r2, #46	; 0x2e
    e598:	1cbb      	adds	r3, r7, #2
    e59a:	707a      	strb	r2, [r7, #1]
		while (precision > 0 && digit_count > 0) {
    e59c:	2c00      	cmp	r4, #0
    e59e:	ddc4      	ble.n	e52a <z_prf+0x70e>
    e5a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    e5a2:	2a00      	cmp	r2, #0
    e5a4:	ddc1      	ble.n	e52a <z_prf+0x70e>
			*buf++ = _get_digit(&fract, &digit_count);
    e5a6:	a913      	add	r1, sp, #76	; 0x4c
    e5a8:	a814      	add	r0, sp, #80	; 0x50
    e5aa:	930a      	str	r3, [sp, #40]	; 0x28
    e5ac:	f00f fa23 	bl	1d9f6 <_get_digit>
    e5b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			precision--;
    e5b2:	3c01      	subs	r4, #1
			*buf++ = _get_digit(&fract, &digit_count);
    e5b4:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
    e5b8:	e7f0      	b.n	e59c <z_prf+0x780>
			zero.predot = zero.postdot = zero.trail = 0;
    e5ba:	46c3      	mov	fp, r8
    e5bc:	46c2      	mov	sl, r8
    e5be:	e7c3      	b.n	e548 <z_prf+0x72c>
					prefix = 1;
    e5c0:	f04f 0801 	mov.w	r8, #1
    e5c4:	e58a      	b.n	e0dc <z_prf+0x2c0>
				switch (i) {
    e5c6:	4632      	mov	r2, r6
    e5c8:	f852 3b04 	ldr.w	r3, [r2], #4
    e5cc:	2f68      	cmp	r7, #104	; 0x68
    e5ce:	9201      	str	r2, [sp, #4]
    e5d0:	d006      	beq.n	e5e0 <z_prf+0x7c4>
    e5d2:	2f6c      	cmp	r7, #108	; 0x6c
    e5d4:	d009      	beq.n	e5ea <z_prf+0x7ce>
    e5d6:	2f48      	cmp	r7, #72	; 0x48
    e5d8:	d107      	bne.n	e5ea <z_prf+0x7ce>
					*va_arg(vargs, char *) = count;
    e5da:	9a02      	ldr	r2, [sp, #8]
    e5dc:	701a      	strb	r2, [r3, #0]
					break;
    e5de:	e001      	b.n	e5e4 <z_prf+0x7c8>
					*va_arg(vargs, short *) = count;
    e5e0:	9a02      	ldr	r2, [sp, #8]
    e5e2:	801a      	strh	r2, [r3, #0]
				continue;
    e5e4:	9e01      	ldr	r6, [sp, #4]
    e5e6:	9a06      	ldr	r2, [sp, #24]
    e5e8:	e420      	b.n	de2c <z_prf+0x10>
					*va_arg(vargs, int *) = count;
    e5ea:	9a02      	ldr	r2, [sp, #8]
    e5ec:	601a      	str	r2, [r3, #0]
					break;
    e5ee:	e7f9      	b.n	e5e4 <z_prf+0x7c8>
		*buf++ = '0';
    e5f0:	f647 0330 	movw	r3, #30768	; 0x7830
    e5f4:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
	len = _to_x(buf, value, 16);
    e5f8:	4633      	mov	r3, r6
    e5fa:	f853 1b04 	ldr.w	r1, [r3], #4
    e5fe:	2210      	movs	r2, #16
    e600:	f10d 0066 	add.w	r0, sp, #102	; 0x66
    e604:	9301      	str	r3, [sp, #4]
    e606:	f00f f999 	bl	1d93c <_to_x>
				prefix = 2;
    e60a:	f04f 0802 	mov.w	r8, #2
	return len + (buf - buf0);
    e60e:	1c86      	adds	r6, r0, #2
				break;
    e610:	e603      	b.n	e21a <z_prf+0x3fe>
				cptr = va_arg(vargs, char *);
    e612:	4633      	mov	r3, r6
					precision = INT_MAX;
    e614:	2c00      	cmp	r4, #0
    e616:	bfb8      	it	lt
    e618:	f06f 4400 	mvnlt.w	r4, #2147483648	; 0x80000000
				for (clen = 0; clen < precision; clen++) {
    e61c:	2600      	movs	r6, #0
				cptr = va_arg(vargs, char *);
    e61e:	f853 7b04 	ldr.w	r7, [r3], #4
    e622:	9301      	str	r3, [sp, #4]
				for (clen = 0; clen < precision; clen++) {
    e624:	42b4      	cmp	r4, r6
    e626:	d103      	bne.n	e630 <z_prf+0x814>
    e628:	4626      	mov	r6, r4
    e62a:	2400      	movs	r4, #0
    e62c:	46a0      	mov	r8, r4
    e62e:	e578      	b.n	e122 <z_prf+0x306>
					if (cptr[clen] == '\0') {
    e630:	5dbb      	ldrb	r3, [r7, r6]
    e632:	2b00      	cmp	r3, #0
    e634:	d05b      	beq.n	e6ee <z_prf+0x8d2>
				for (clen = 0; clen < precision; clen++) {
    e636:	3601      	adds	r6, #1
    e638:	e7f4      	b.n	e624 <z_prf+0x808>
				switch (i) {
    e63a:	1d33      	adds	r3, r6, #4
				if (c == 'o') {
    e63c:	2d6f      	cmp	r5, #111	; 0x6f
    e63e:	6831      	ldr	r1, [r6, #0]
    e640:	9301      	str	r3, [sp, #4]
    e642:	d119      	bne.n	e678 <z_prf+0x85c>
	if (alt_form) {
    e644:	f1ba 0f00 	cmp.w	sl, #0
    e648:	d008      	beq.n	e65c <z_prf+0x840>
		*buf++ = '0';
    e64a:	2330      	movs	r3, #48	; 0x30
    e64c:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
		if (!value) {
    e650:	b979      	cbnz	r1, e672 <z_prf+0x856>
			prefix = 0;
    e652:	4688      	mov	r8, r1
			return 1;
    e654:	2601      	movs	r6, #1
			*buf++ = 0;
    e656:	f88d 1065 	strb.w	r1, [sp, #101]	; 0x65
			return 1;
    e65a:	e5de      	b.n	e21a <z_prf+0x3fe>
    e65c:	ad19      	add	r5, sp, #100	; 0x64
	return (buf - buf0) + _to_x(buf, value, 8);
    e65e:	4628      	mov	r0, r5
    e660:	2208      	movs	r2, #8
    e662:	f00f f96b 	bl	1d93c <_to_x>
    e666:	ae19      	add	r6, sp, #100	; 0x64
    e668:	1bad      	subs	r5, r5, r6
    e66a:	182e      	adds	r6, r5, r0
			prefix = 0;
    e66c:	f04f 0800 	mov.w	r8, #0
    e670:	e5d3      	b.n	e21a <z_prf+0x3fe>
		*buf++ = '0';
    e672:	f10d 0565 	add.w	r5, sp, #101	; 0x65
    e676:	e7f2      	b.n	e65e <z_prf+0x842>
				} else if (c == 'u') {
    e678:	2d75      	cmp	r5, #117	; 0x75
    e67a:	d105      	bne.n	e688 <z_prf+0x86c>
	return _to_x(buf, value, 10);
    e67c:	220a      	movs	r2, #10
    e67e:	a819      	add	r0, sp, #100	; 0x64
    e680:	f00f f95c 	bl	1d93c <_to_x>
    e684:	4606      	mov	r6, r0
    e686:	e7f1      	b.n	e66c <z_prf+0x850>
	if (alt_form) {
    e688:	f1ba 0f00 	cmp.w	sl, #0
    e68c:	d011      	beq.n	e6b2 <z_prf+0x896>
		*buf++ = '0';
    e68e:	f647 0330 	movw	r3, #30768	; 0x7830
		*buf++ = 'x';
    e692:	f10d 0766 	add.w	r7, sp, #102	; 0x66
		*buf++ = '0';
    e696:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
	len = _to_x(buf, value, 16);
    e69a:	2210      	movs	r2, #16
    e69c:	4638      	mov	r0, r7
    e69e:	f00f f94d 	bl	1d93c <_to_x>
	if (prefix == 'X') {
    e6a2:	2d58      	cmp	r5, #88	; 0x58
    e6a4:	d007      	beq.n	e6b6 <z_prf+0x89a>
	return len + (buf - buf0);
    e6a6:	ab19      	add	r3, sp, #100	; 0x64
    e6a8:	1aff      	subs	r7, r7, r3
    e6aa:	183e      	adds	r6, r7, r0
						prefix = 2;
    e6ac:	ea4f 084a 	mov.w	r8, sl, lsl #1
    e6b0:	e5b3      	b.n	e21a <z_prf+0x3fe>
    e6b2:	af19      	add	r7, sp, #100	; 0x64
    e6b4:	e7f1      	b.n	e69a <z_prf+0x87e>
    e6b6:	aa19      	add	r2, sp, #100	; 0x64
		if (*buf >= 'a' && *buf <= 'z') {
    e6b8:	f812 3b01 	ldrb.w	r3, [r2], #1
    e6bc:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
    e6c0:	2919      	cmp	r1, #25
    e6c2:	d803      	bhi.n	e6cc <z_prf+0x8b0>
			*buf += 'A' - 'a';
    e6c4:	3b20      	subs	r3, #32
    e6c6:	f802 3c01 	strb.w	r3, [r2, #-1]
	} while (*buf++);
    e6ca:	e7f5      	b.n	e6b8 <z_prf+0x89c>
    e6cc:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    e6d0:	2b00      	cmp	r3, #0
    e6d2:	d1f1      	bne.n	e6b8 <z_prf+0x89c>
    e6d4:	e7e7      	b.n	e6a6 <z_prf+0x88a>
				PUTC('%');
    e6d6:	4649      	mov	r1, r9
    e6d8:	4628      	mov	r0, r5
    e6da:	f7ff bbb0 	b.w	de3e <z_prf+0x22>
				count++;
    e6de:	9b02      	ldr	r3, [sp, #8]
    e6e0:	3301      	adds	r3, #1
				continue;
    e6e2:	e9cd 6301 	strd	r6, r3, [sp, #4]
    e6e6:	e77d      	b.n	e5e4 <z_prf+0x7c8>
					prefix = 1;
    e6e8:	f04f 0801 	mov.w	r8, #1
    e6ec:	e595      	b.n	e21a <z_prf+0x3fe>
    e6ee:	461c      	mov	r4, r3
    e6f0:	e79c      	b.n	e62c <z_prf+0x810>
				zero_head = 0;
    e6f2:	2300      	movs	r3, #0
			cptr = buf;
    e6f4:	af19      	add	r7, sp, #100	; 0x64
    e6f6:	e51c      	b.n	e132 <z_prf+0x316>
				zero_head = 0;
    e6f8:	9b08      	ldr	r3, [sp, #32]
    e6fa:	af19      	add	r7, sp, #100	; 0x64
    e6fc:	e519      	b.n	e132 <z_prf+0x316>
    e6fe:	9309      	str	r3, [sp, #36]	; 0x24
					PUTC(' ');
    e700:	4649      	mov	r1, r9
    e702:	9b03      	ldr	r3, [sp, #12]
    e704:	2020      	movs	r0, #32
    e706:	9207      	str	r2, [sp, #28]
    e708:	4798      	blx	r3
    e70a:	3001      	adds	r0, #1
    e70c:	9a07      	ldr	r2, [sp, #28]
    e70e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e710:	f43f ab9a 	beq.w	de48 <z_prf+0x2c>
				while (width-- > 0) {
    e714:	3a01      	subs	r2, #1
    e716:	d2f2      	bcs.n	e6fe <z_prf+0x8e2>
				count += width;
    e718:	9902      	ldr	r1, [sp, #8]
    e71a:	4429      	add	r1, r5
    e71c:	9102      	str	r1, [sp, #8]
				while (width-- > 0) {
    e71e:	4615      	mov	r5, r2
    e720:	e511      	b.n	e146 <z_prf+0x32a>
    e722:	462a      	mov	r2, r5
    e724:	e7f6      	b.n	e714 <z_prf+0x8f8>
    e726:	9309      	str	r3, [sp, #36]	; 0x24
				PUTC(*cptr++);
    e728:	4649      	mov	r1, r9
    e72a:	9b03      	ldr	r3, [sp, #12]
    e72c:	f817 0b01 	ldrb.w	r0, [r7], #1
    e730:	9207      	str	r2, [sp, #28]
    e732:	4798      	blx	r3
    e734:	3001      	adds	r0, #1
    e736:	9a07      	ldr	r2, [sp, #28]
    e738:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e73a:	f47f ad06 	bne.w	e14a <z_prf+0x32e>
    e73e:	f7ff bb83 	b.w	de48 <z_prf+0x2c>
    e742:	9307      	str	r3, [sp, #28]
				PUTC('0');
    e744:	4649      	mov	r1, r9
    e746:	9b03      	ldr	r3, [sp, #12]
    e748:	2030      	movs	r0, #48	; 0x30
    e74a:	4798      	blx	r3
    e74c:	3001      	adds	r0, #1
    e74e:	9b07      	ldr	r3, [sp, #28]
    e750:	f47f acfe 	bne.w	e150 <z_prf+0x334>
    e754:	f7ff bb78 	b.w	de48 <z_prf+0x2c>
					PUTC(c);
    e758:	4649      	mov	r1, r9
    e75a:	9b03      	ldr	r3, [sp, #12]
    e75c:	4798      	blx	r3
    e75e:	3001      	adds	r0, #1
    e760:	f43f ab72 	beq.w	de48 <z_prf+0x2c>
					c = *++cptr;
    e764:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    e768:	e4fd      	b.n	e166 <z_prf+0x34a>
					PUTC('0');
    e76a:	4649      	mov	r1, r9
    e76c:	2030      	movs	r0, #48	; 0x30
    e76e:	9b03      	ldr	r3, [sp, #12]
    e770:	4798      	blx	r3
    e772:	3001      	adds	r0, #1
    e774:	f47f acff 	bne.w	e176 <z_prf+0x35a>
    e778:	f7ff bb66 	b.w	de48 <z_prf+0x2c>
					PUTC('0');
    e77c:	4649      	mov	r1, r9
    e77e:	2030      	movs	r0, #48	; 0x30
    e780:	9b03      	ldr	r3, [sp, #12]
    e782:	4798      	blx	r3
    e784:	3001      	adds	r0, #1
    e786:	f108 38ff 	add.w	r8, r8, #4294967295
    e78a:	f47f ad0e 	bne.w	e1aa <z_prf+0x38e>
    e78e:	f7ff bb5b 	b.w	de48 <z_prf+0x2c>
					PUTC(c);
    e792:	4649      	mov	r1, r9
    e794:	9b03      	ldr	r3, [sp, #12]
    e796:	4798      	blx	r3
    e798:	3001      	adds	r0, #1
    e79a:	f43f ab55 	beq.w	de48 <z_prf+0x2c>
					c = *++cptr;
    e79e:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    e7a2:	e50c      	b.n	e1be <z_prf+0x3a2>
					PUTC('0');
    e7a4:	4649      	mov	r1, r9
    e7a6:	2030      	movs	r0, #48	; 0x30
    e7a8:	9b03      	ldr	r3, [sp, #12]
    e7aa:	4798      	blx	r3
    e7ac:	3001      	adds	r0, #1
    e7ae:	f108 38ff 	add.w	r8, r8, #4294967295
    e7b2:	f47f ad0f 	bne.w	e1d4 <z_prf+0x3b8>
    e7b6:	f7ff bb47 	b.w	de48 <z_prf+0x2c>
				PUTC(*cptr++);
    e7ba:	4649      	mov	r1, r9
    e7bc:	f817 0b01 	ldrb.w	r0, [r7], #1
    e7c0:	9b03      	ldr	r3, [sp, #12]
    e7c2:	4798      	blx	r3
    e7c4:	3001      	adds	r0, #1
    e7c6:	f43f ab3f 	beq.w	de48 <z_prf+0x2c>
			while (clen-- > 0) {
    e7ca:	1bf3      	subs	r3, r6, r7
    e7cc:	2b00      	cmp	r3, #0
    e7ce:	dcf4      	bgt.n	e7ba <z_prf+0x99e>
			count += clen;
    e7d0:	9b02      	ldr	r3, [sp, #8]
    e7d2:	9a08      	ldr	r2, [sp, #32]
			if (width > 0) {
    e7d4:	2d00      	cmp	r5, #0
			count += clen;
    e7d6:	4413      	add	r3, r2
    e7d8:	9302      	str	r3, [sp, #8]
			if (width > 0) {
    e7da:	f77f af03 	ble.w	e5e4 <z_prf+0x7c8>
    e7de:	462c      	mov	r4, r5
    e7e0:	e006      	b.n	e7f0 <z_prf+0x9d4>
					PUTC(' ');
    e7e2:	4649      	mov	r1, r9
    e7e4:	2020      	movs	r0, #32
    e7e6:	9b03      	ldr	r3, [sp, #12]
    e7e8:	4798      	blx	r3
    e7ea:	3001      	adds	r0, #1
    e7ec:	f43f ab2c 	beq.w	de48 <z_prf+0x2c>
				while (width-- > 0) {
    e7f0:	3c01      	subs	r4, #1
    e7f2:	d2f6      	bcs.n	e7e2 <z_prf+0x9c6>
				count += width;
    e7f4:	9b02      	ldr	r3, [sp, #8]
    e7f6:	442b      	add	r3, r5
    e7f8:	9302      	str	r3, [sp, #8]
    e7fa:	e6f3      	b.n	e5e4 <z_prf+0x7c8>

0000e7fc <nordicsemi_nrf91_init>:
    e7fc:	f04f 0220 	mov.w	r2, #32
    e800:	f3ef 8311 	mrs	r3, BASEPRI
    e804:	f382 8811 	msr	BASEPRI, r2
    e808:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    e80c:	2101      	movs	r1, #1
    e80e:	4a04      	ldr	r2, [pc, #16]	; (e820 <nordicsemi_nrf91_init+0x24>)
    e810:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    e814:	f383 8811 	msr	BASEPRI, r3
    e818:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    e81c:	2000      	movs	r0, #0
    e81e:	4770      	bx	lr
    e820:	40039000 	.word	0x40039000

0000e824 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    e824:	b120      	cbz	r0, e830 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    e826:	4b03      	ldr	r3, [pc, #12]	; (e834 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    e828:	0180      	lsls	r0, r0, #6
    e82a:	f043 0301 	orr.w	r3, r3, #1
    e82e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    e830:	4770      	bx	lr
    e832:	bf00      	nop
    e834:	00020b40 	.word	0x00020b40

0000e838 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    e838:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    e83a:	2200      	movs	r2, #0
{
    e83c:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    e83e:	490f      	ldr	r1, [pc, #60]	; (e87c <enable_logger+0x44>)
    e840:	480f      	ldr	r0, [pc, #60]	; (e880 <enable_logger+0x48>)
    e842:	f011 fe46 	bl	204d2 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    e846:	2200      	movs	r2, #0
    e848:	2300      	movs	r3, #0
    e84a:	2400      	movs	r4, #0
    e84c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    e850:	230e      	movs	r3, #14
    e852:	4d0c      	ldr	r5, [pc, #48]	; (e884 <enable_logger+0x4c>)
    e854:	e9cd 3403 	strd	r3, r4, [sp, #12]
    e858:	f44f 7240 	mov.w	r2, #768	; 0x300
    e85c:	4628      	mov	r0, r5
    e85e:	e9cd 4401 	strd	r4, r4, [sp, #4]
    e862:	4b09      	ldr	r3, [pc, #36]	; (e888 <enable_logger+0x50>)
    e864:	4909      	ldr	r1, [pc, #36]	; (e88c <enable_logger+0x54>)
    e866:	9400      	str	r4, [sp, #0]
    e868:	f00e f98e 	bl	1cb88 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    e86c:	4908      	ldr	r1, [pc, #32]	; (e890 <enable_logger+0x58>)
    e86e:	4628      	mov	r0, r5
    e870:	f011 fd56 	bl	20320 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    e874:	4620      	mov	r0, r4
    e876:	b009      	add	sp, #36	; 0x24
    e878:	bd30      	pop	{r4, r5, pc}
    e87a:	bf00      	nop
    e87c:	0000e895 	.word	0x0000e895
    e880:	20020258 	.word	0x20020258
    e884:	20020290 	.word	0x20020290
    e888:	0000ec7d 	.word	0x0000ec7d
    e88c:	20024490 	.word	0x20024490
    e890:	00021669 	.word	0x00021669

0000e894 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
    e894:	4801      	ldr	r0, [pc, #4]	; (e89c <log_process_thread_timer_expiry_fn+0x8>)
    e896:	f00e b8df 	b.w	1ca58 <z_impl_k_sem_give>
    e89a:	bf00      	nop
    e89c:	200201f0 	.word	0x200201f0

0000e8a0 <log_core_init>:
{
    e8a0:	b508      	push	{r3, lr}
		log_msg_pool_init();
    e8a2:	f000 fa49 	bl	ed38 <log_msg_pool_init>
		log_list_init(&list);
    e8a6:	4809      	ldr	r0, [pc, #36]	; (e8cc <log_core_init+0x2c>)
    e8a8:	f00f f8bf 	bl	1da2a <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    e8ac:	2304      	movs	r3, #4
    e8ae:	2234      	movs	r2, #52	; 0x34
    e8b0:	4907      	ldr	r1, [pc, #28]	; (e8d0 <log_core_init+0x30>)
    e8b2:	4808      	ldr	r0, [pc, #32]	; (e8d4 <log_core_init+0x34>)
    e8b4:	f011 fb89 	bl	1ffca <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    e8b8:	4b07      	ldr	r3, [pc, #28]	; (e8d8 <log_core_init+0x38>)
    e8ba:	4a08      	ldr	r2, [pc, #32]	; (e8dc <log_core_init+0x3c>)
	log_output_timestamp_freq_set(freq);
    e8bc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
    e8c0:	601a      	str	r2, [r3, #0]
}
    e8c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    e8c6:	f000 bc7f 	b.w	f1c8 <log_output_timestamp_freq_set>
    e8ca:	bf00      	nop
    e8cc:	2002086c 	.word	0x2002086c
    e8d0:	20026cd0 	.word	0x20026cd0
    e8d4:	20020874 	.word	0x20020874
    e8d8:	20020008 	.word	0x20020008
    e8dc:	0001da69 	.word	0x0001da69

0000e8e0 <dropped_notify>:
{
    e8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    e8e2:	2500      	movs	r5, #0
    e8e4:	4b0c      	ldr	r3, [pc, #48]	; (e918 <dropped_notify+0x38>)
    e8e6:	e8d3 7fef 	ldaex	r7, [r3]
    e8ea:	e8c3 5fe2 	stlex	r2, r5, [r3]
    e8ee:	2a00      	cmp	r2, #0
    e8f0:	d1f9      	bne.n	e8e6 <dropped_notify+0x6>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    e8f2:	4c0a      	ldr	r4, [pc, #40]	; (e91c <dropped_notify+0x3c>)
    e8f4:	4e0a      	ldr	r6, [pc, #40]	; (e920 <dropped_notify+0x40>)
    e8f6:	1b36      	subs	r6, r6, r4
    e8f8:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    e8fa:	42b5      	cmp	r5, r6
    e8fc:	db00      	blt.n	e900 <dropped_notify+0x20>
}
    e8fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    e900:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    e902:	795b      	ldrb	r3, [r3, #5]
    e904:	b12b      	cbz	r3, e912 <dropped_notify+0x32>
	if (backend->api->dropped != NULL) {
    e906:	6823      	ldr	r3, [r4, #0]
    e908:	68db      	ldr	r3, [r3, #12]
    e90a:	b113      	cbz	r3, e912 <dropped_notify+0x32>
		backend->api->dropped(backend, cnt);
    e90c:	4639      	mov	r1, r7
    e90e:	4620      	mov	r0, r4
    e910:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    e912:	3501      	adds	r5, #1
    e914:	3410      	adds	r4, #16
    e916:	e7f0      	b.n	e8fa <dropped_notify+0x1a>
    e918:	20020864 	.word	0x20020864
    e91c:	00020adc 	.word	0x00020adc
    e920:	00020aec 	.word	0x00020aec

0000e924 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    e924:	4b04      	ldr	r3, [pc, #16]	; (e938 <log_dropped+0x14>)
    e926:	e8d3 2fef 	ldaex	r2, [r3]
    e92a:	3201      	adds	r2, #1
    e92c:	e8c3 2fe1 	stlex	r1, r2, [r3]
    e930:	2900      	cmp	r1, #0
    e932:	d1f8      	bne.n	e926 <log_dropped+0x2>
}
    e934:	4770      	bx	lr
    e936:	bf00      	nop
    e938:	20020864 	.word	0x20020864

0000e93c <log_source_name_get>:
    e93c:	4a04      	ldr	r2, [pc, #16]	; (e950 <log_source_name_get+0x14>)
    e93e:	4b05      	ldr	r3, [pc, #20]	; (e954 <log_source_name_get+0x18>)
    e940:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    e942:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    e946:	bf34      	ite	cc
    e948:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    e94c:	2000      	movcs	r0, #0
}
    e94e:	4770      	bx	lr
    e950:	00020a64 	.word	0x00020a64
    e954:	00020adc 	.word	0x00020adc

0000e958 <log_backend_enable>:
	id += backend - log_backend_get(0);
    e958:	4b09      	ldr	r3, [pc, #36]	; (e980 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
    e95a:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    e95c:	1ac3      	subs	r3, r0, r3
    e95e:	111b      	asrs	r3, r3, #4
    e960:	3301      	adds	r3, #1
{
    e962:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
    e964:	7113      	strb	r3, [r2, #4]
	backend->cb->active = true;
    e966:	2201      	movs	r2, #1
	log_backend_activate(backend, ctx);
    e968:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
    e96a:	4c06      	ldr	r4, [pc, #24]	; (e984 <log_backend_enable+0x2c>)
    e96c:	715a      	strb	r2, [r3, #5]
    e96e:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
    e970:	6019      	str	r1, [r3, #0]
    e972:	b912      	cbnz	r2, e97a <log_backend_enable+0x22>
    e974:	4804      	ldr	r0, [pc, #16]	; (e988 <log_backend_enable+0x30>)
    e976:	f00e f86f 	bl	1ca58 <z_impl_k_sem_give>
	backend_attached = true;
    e97a:	2301      	movs	r3, #1
    e97c:	7023      	strb	r3, [r4, #0]
}
    e97e:	bd10      	pop	{r4, pc}
    e980:	00020adc 	.word	0x00020adc
    e984:	200227bf 	.word	0x200227bf
    e988:	200201f0 	.word	0x200201f0

0000e98c <log_init>:
{
    e98c:	b570      	push	{r4, r5, r6, lr}
    e98e:	4b0f      	ldr	r3, [pc, #60]	; (e9cc <log_init+0x40>)
    e990:	e8d3 5fef 	ldaex	r5, [r3]
    e994:	1c6a      	adds	r2, r5, #1
    e996:	e8c3 2fe1 	stlex	r1, r2, [r3]
    e99a:	2900      	cmp	r1, #0
    e99c:	d1f8      	bne.n	e990 <log_init+0x4>
	if (atomic_inc(&initialized) != 0) {
    e99e:	b92d      	cbnz	r5, e9ac <log_init+0x20>
	return __log_backends_end - __log_backends_start;
    e9a0:	4c0b      	ldr	r4, [pc, #44]	; (e9d0 <log_init+0x44>)
    e9a2:	4e0c      	ldr	r6, [pc, #48]	; (e9d4 <log_init+0x48>)
    e9a4:	1b36      	subs	r6, r6, r4
    e9a6:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    e9a8:	42b5      	cmp	r5, r6
    e9aa:	db00      	blt.n	e9ae <log_init+0x22>
}
    e9ac:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    e9ae:	7b23      	ldrb	r3, [r4, #12]
    e9b0:	b143      	cbz	r3, e9c4 <log_init+0x38>
			if (backend->api->init != NULL) {
    e9b2:	6823      	ldr	r3, [r4, #0]
    e9b4:	695b      	ldr	r3, [r3, #20]
    e9b6:	b103      	cbz	r3, e9ba <log_init+0x2e>
				backend->api->init();
    e9b8:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    e9ba:	2204      	movs	r2, #4
    e9bc:	2100      	movs	r1, #0
    e9be:	4620      	mov	r0, r4
    e9c0:	f7ff ffca 	bl	e958 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    e9c4:	3501      	adds	r5, #1
    e9c6:	3410      	adds	r4, #16
    e9c8:	e7ee      	b.n	e9a8 <log_init+0x1c>
    e9ca:	bf00      	nop
    e9cc:	20020868 	.word	0x20020868
    e9d0:	00020adc 	.word	0x00020adc
    e9d4:	00020aec 	.word	0x00020aec

0000e9d8 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    e9d8:	4b14      	ldr	r3, [pc, #80]	; (ea2c <log_strdup+0x54>)
{
    e9da:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
    e9dc:	4298      	cmp	r0, r3
{
    e9de:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    e9e0:	d302      	bcc.n	e9e8 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    e9e2:	4b13      	ldr	r3, [pc, #76]	; (ea30 <log_strdup+0x58>)
    e9e4:	4298      	cmp	r0, r3
    e9e6:	d31c      	bcc.n	ea22 <log_strdup+0x4a>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    e9e8:	2200      	movs	r2, #0
    e9ea:	2300      	movs	r3, #0
    e9ec:	4811      	ldr	r0, [pc, #68]	; (ea34 <log_strdup+0x5c>)
    e9ee:	a901      	add	r1, sp, #4
    e9f0:	f00d fadc 	bl	1bfac <k_mem_slab_alloc>
	if (err != 0) {
    e9f4:	4605      	mov	r5, r0
    e9f6:	b9b8      	cbnz	r0, ea28 <log_strdup+0x50>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    e9f8:	2201      	movs	r2, #1
    e9fa:	9b01      	ldr	r3, [sp, #4]
    e9fc:	e8d3 1fef 	ldaex	r1, [r3]
    ea00:	e8c3 2fe0 	stlex	r0, r2, [r3]
    ea04:	2800      	cmp	r0, #0
    ea06:	d1f9      	bne.n	e9fc <log_strdup+0x24>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    ea08:	9801      	ldr	r0, [sp, #4]
    ea0a:	4621      	mov	r1, r4
    ea0c:	222d      	movs	r2, #45	; 0x2d
    ea0e:	3004      	adds	r0, #4
    ea10:	f00f fdcc 	bl	1e5ac <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    ea14:	237e      	movs	r3, #126	; 0x7e
    ea16:	9c01      	ldr	r4, [sp, #4]
    ea18:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    ea1c:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	return dup->buf;
    ea20:	3404      	adds	r4, #4
}
    ea22:	4620      	mov	r0, r4
    ea24:	b003      	add	sp, #12
    ea26:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    ea28:	4c03      	ldr	r4, [pc, #12]	; (ea38 <log_strdup+0x60>)
    ea2a:	e7fa      	b.n	ea22 <log_strdup+0x4a>
    ea2c:	000207b0 	.word	0x000207b0
    ea30:	00022acc 	.word	0x00022acc
    ea34:	20020874 	.word	0x20020874
    ea38:	00021671 	.word	0x00021671

0000ea3c <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    ea3c:	b148      	cbz	r0, ea52 <log_is_strdup+0x16>
    ea3e:	4b05      	ldr	r3, [pc, #20]	; (ea54 <log_is_strdup+0x18>)
    ea40:	4298      	cmp	r0, r3
    ea42:	d305      	bcc.n	ea50 <log_is_strdup+0x14>
    ea44:	33d0      	adds	r3, #208	; 0xd0
    ea46:	4298      	cmp	r0, r3
    ea48:	bf2c      	ite	cs
    ea4a:	2000      	movcs	r0, #0
    ea4c:	2001      	movcc	r0, #1
    ea4e:	4770      	bx	lr
    ea50:	2000      	movs	r0, #0
}
    ea52:	4770      	bx	lr
    ea54:	20026cd0 	.word	0x20026cd0

0000ea58 <z_impl_log_process>:
{
    ea58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    ea5c:	4b4a      	ldr	r3, [pc, #296]	; (eb88 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x128>)
{
    ea5e:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    ea60:	781b      	ldrb	r3, [r3, #0]
{
    ea62:	b085      	sub	sp, #20
	if (!backend_attached && !bypass) {
    ea64:	b903      	cbnz	r3, ea68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8>
    ea66:	b340      	cbz	r0, eaba <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5a>
	__asm__ volatile(
    ea68:	f04f 0320 	mov.w	r3, #32
    ea6c:	f3ef 8611 	mrs	r6, BASEPRI
    ea70:	f383 8811 	msr	BASEPRI, r3
    ea74:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    ea78:	4844      	ldr	r0, [pc, #272]	; (eb8c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12c>)
    ea7a:	f00e ffe6 	bl	1da4a <log_list_head_get>
    ea7e:	4605      	mov	r5, r0
	__asm__ volatile(
    ea80:	f386 8811 	msr	BASEPRI, r6
    ea84:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    ea88:	b158      	cbz	r0, eaa2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x42>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    ea8a:	4b41      	ldr	r3, [pc, #260]	; (eb90 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x130>)
    ea8c:	e8d3 2fef 	ldaex	r2, [r3]
    ea90:	3a01      	subs	r2, #1
    ea92:	e8c3 2fe1 	stlex	r1, r2, [r3]
    ea96:	2900      	cmp	r1, #0
    ea98:	d1f8      	bne.n	ea8c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2c>
	if (!bypass) {
    ea9a:	b194      	cbz	r4, eac2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x62>
	log_msg_put(msg);
    ea9c:	4628      	mov	r0, r5
    ea9e:	f00f f8f1 	bl	1dc84 <log_msg_put>
	if (!bypass && dropped_cnt) {
    eaa2:	b924      	cbnz	r4, eaae <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4e>
    eaa4:	4b3b      	ldr	r3, [pc, #236]	; (eb94 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x134>)
    eaa6:	681b      	ldr	r3, [r3, #0]
    eaa8:	b10b      	cbz	r3, eaae <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4e>
		dropped_notify();
    eaaa:	f7ff ff19 	bl	e8e0 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    eaae:	4837      	ldr	r0, [pc, #220]	; (eb8c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12c>)
    eab0:	f00e ffc9 	bl	1da46 <log_list_head_peek>
    eab4:	1e04      	subs	r4, r0, #0
    eab6:	bf18      	it	ne
    eab8:	2401      	movne	r4, #1
}
    eaba:	4620      	mov	r0, r4
    eabc:	b005      	add	sp, #20
    eabe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    eac2:	4b35      	ldr	r3, [pc, #212]	; (eb98 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x138>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    eac4:	781b      	ldrb	r3, [r3, #0]
    eac6:	b9cb      	cbnz	r3, eafc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9c>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    eac8:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    eaca:	07db      	lsls	r3, r3, #31
    eacc:	d416      	bmi.n	eafc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9c>
	msg_str = log_msg_str_get(msg);
    eace:	f00f f8e8 	bl	1dca2 <log_msg_str_get>
    ead2:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    ead4:	4628      	mov	r0, r5
    ead6:	f00f f8b3 	bl	1dc40 <log_msg_nargs_get>
    eada:	4601      	mov	r1, r0
    eadc:	4640      	mov	r0, r8
    eade:	f00e ffc7 	bl	1da70 <z_log_get_s_mask>
    eae2:	4606      	mov	r6, r0
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    eae4:	4f2d      	ldr	r7, [pc, #180]	; (eb9c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x13c>)
    eae6:	4b2e      	ldr	r3, [pc, #184]	; (eba0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x140>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    eae8:	f8df b0d0 	ldr.w	fp, [pc, #208]	; ebbc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x15c>
    eaec:	1bdb      	subs	r3, r3, r7
    eaee:	08db      	lsrs	r3, r3, #3
    eaf0:	9303      	str	r3, [sp, #12]
    eaf2:	4b2c      	ldr	r3, [pc, #176]	; (eba4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x144>)
    eaf4:	1bdb      	subs	r3, r3, r7
    eaf6:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
    eafa:	b936      	cbnz	r6, eb0a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xaa>
    eafc:	4e2a      	ldr	r6, [pc, #168]	; (eba8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x148>)
    eafe:	4f2b      	ldr	r7, [pc, #172]	; (ebac <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14c>)
    eb00:	f04f 0800 	mov.w	r8, #0
    eb04:	1bbf      	subs	r7, r7, r6
    eb06:	113f      	asrs	r7, r7, #4
    eb08:	e03a      	b.n	eb80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x120>
		idx = 31 - __builtin_clz(mask);
    eb0a:	fab6 f186 	clz	r1, r6
    eb0e:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    eb12:	4649      	mov	r1, r9
    eb14:	4628      	mov	r0, r5
    eb16:	f00f f896 	bl	1dc46 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    eb1a:	4b25      	ldr	r3, [pc, #148]	; (ebb0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x150>)
		str = (const char *)log_msg_arg_get(msg, idx);
    eb1c:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    eb1e:	4298      	cmp	r0, r3
    eb20:	d302      	bcc.n	eb28 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc8>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    eb22:	4a24      	ldr	r2, [pc, #144]	; (ebb4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x154>)
    eb24:	4290      	cmp	r0, r2
    eb26:	d31a      	bcc.n	eb5e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfe>
    eb28:	4608      	mov	r0, r1
    eb2a:	f7ff ff87 	bl	ea3c <log_is_strdup>
    eb2e:	4602      	mov	r2, r0
    eb30:	b9a8      	cbnz	r0, eb5e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfe>
    eb32:	4b21      	ldr	r3, [pc, #132]	; (ebb8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x158>)
    eb34:	4299      	cmp	r1, r3
    eb36:	d012      	beq.n	eb5e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfe>
	return msg->hdr.ids.source_id;
    eb38:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    eb3a:	9903      	ldr	r1, [sp, #12]
    eb3c:	f3c3 1389 	ubfx	r3, r3, #6, #10
    eb40:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
    eb42:	bf38      	it	cc
    eb44:	f857 2033 	ldrcc.w	r2, [r7, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    eb48:	ea4f 138a 	mov.w	r3, sl, lsl #6
    eb4c:	f043 0301 	orr.w	r3, r3, #1
    eb50:	f8ad 3000 	strh.w	r3, [sp]
    eb54:	4649      	mov	r1, r9
    eb56:	4643      	mov	r3, r8
    eb58:	4658      	mov	r0, fp
    eb5a:	f00e ffe8 	bl	1db2e <log_3>
		mask &= ~BIT(idx);
    eb5e:	2301      	movs	r3, #1
    eb60:	fa03 f109 	lsl.w	r1, r3, r9
    eb64:	ea26 0601 	bic.w	r6, r6, r1
    eb68:	e7c7      	b.n	eafa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9a>
	return backend->cb->active;
    eb6a:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    eb6c:	795b      	ldrb	r3, [r3, #5]
    eb6e:	b123      	cbz	r3, eb7a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x11a>
	backend->api->put(backend, msg);
    eb70:	6833      	ldr	r3, [r6, #0]
    eb72:	4629      	mov	r1, r5
    eb74:	4630      	mov	r0, r6
    eb76:	681b      	ldr	r3, [r3, #0]
    eb78:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    eb7a:	f108 0801 	add.w	r8, r8, #1
    eb7e:	3610      	adds	r6, #16
    eb80:	45b8      	cmp	r8, r7
    eb82:	dbf2      	blt.n	eb6a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10a>
    eb84:	e78a      	b.n	ea9c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3c>
    eb86:	bf00      	nop
    eb88:	200227bf 	.word	0x200227bf
    eb8c:	2002086c 	.word	0x2002086c
    eb90:	20020860 	.word	0x20020860
    eb94:	20020864 	.word	0x20020864
    eb98:	200227c0 	.word	0x200227c0
    eb9c:	00020a64 	.word	0x00020a64
    eba0:	00020adc 	.word	0x00020adc
    eba4:	00020a9c 	.word	0x00020a9c
    eba8:	00020adc 	.word	0x00020adc
    ebac:	00020aec 	.word	0x00020aec
    ebb0:	000207b0 	.word	0x000207b0
    ebb4:	00022acc 	.word	0x00022acc
    ebb8:	00021671 	.word	0x00021671
    ebbc:	0002168b 	.word	0x0002168b

0000ebc0 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    ebc0:	4b27      	ldr	r3, [pc, #156]	; (ec60 <msg_finalize+0xa0>)
{
    ebc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    ebc4:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    ebc6:	8141      	strh	r1, [r0, #10]
{
    ebc8:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    ebca:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    ebcc:	4d25      	ldr	r5, [pc, #148]	; (ec64 <msg_finalize+0xa4>)
    ebce:	60e0      	str	r0, [r4, #12]
    ebd0:	e8d5 3fef 	ldaex	r3, [r5]
    ebd4:	3301      	adds	r3, #1
    ebd6:	e8c5 3fe2 	stlex	r2, r3, [r5]
    ebda:	2a00      	cmp	r2, #0
    ebdc:	d1f8      	bne.n	ebd0 <msg_finalize+0x10>
	__asm__ volatile(
    ebde:	f04f 0320 	mov.w	r3, #32
    ebe2:	f3ef 8611 	mrs	r6, BASEPRI
    ebe6:	f383 8811 	msr	BASEPRI, r3
    ebea:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    ebee:	481e      	ldr	r0, [pc, #120]	; (ec68 <msg_finalize+0xa8>)
    ebf0:	4621      	mov	r1, r4
    ebf2:	f00e ff1e 	bl	1da32 <log_list_add_tail>
	__asm__ volatile(
    ebf6:	f386 8811 	msr	BASEPRI, r6
    ebfa:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    ebfe:	4b1b      	ldr	r3, [pc, #108]	; (ec6c <msg_finalize+0xac>)
    ec00:	781b      	ldrb	r3, [r3, #0]
    ec02:	b183      	cbz	r3, ec26 <msg_finalize+0x66>
	__asm__ volatile(
    ec04:	f04f 0320 	mov.w	r3, #32
    ec08:	f3ef 8411 	mrs	r4, BASEPRI
    ec0c:	f383 8811 	msr	BASEPRI, r3
    ec10:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    ec14:	2000      	movs	r0, #0
    ec16:	f7ff ff1f 	bl	ea58 <z_impl_log_process>
	__asm__ volatile(
    ec1a:	f384 8811 	msr	BASEPRI, r4
    ec1e:	f3bf 8f6f 	isb	sy
}
    ec22:	b002      	add	sp, #8
    ec24:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    ec26:	4a12      	ldr	r2, [pc, #72]	; (ec70 <msg_finalize+0xb0>)
    ec28:	682b      	ldr	r3, [r5, #0]
    ec2a:	6812      	ldr	r2, [r2, #0]
    ec2c:	2a00      	cmp	r2, #0
    ec2e:	d0f8      	beq.n	ec22 <msg_finalize+0x62>
    ec30:	2b01      	cmp	r3, #1
    ec32:	d10a      	bne.n	ec4a <msg_finalize+0x8a>
	z_impl_k_timer_start(timer, duration, period);
    ec34:	2200      	movs	r2, #0
    ec36:	2300      	movs	r3, #0
    ec38:	480e      	ldr	r0, [pc, #56]	; (ec74 <msg_finalize+0xb4>)
    ec3a:	e9cd 2300 	strd	r2, r3, [sp]
    ec3e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    ec42:	2300      	movs	r3, #0
    ec44:	f00e fa10 	bl	1d068 <z_impl_k_timer_start>
    ec48:	e7eb      	b.n	ec22 <msg_finalize+0x62>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    ec4a:	2b0a      	cmp	r3, #10
    ec4c:	d1e9      	bne.n	ec22 <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
    ec4e:	4809      	ldr	r0, [pc, #36]	; (ec74 <msg_finalize+0xb4>)
    ec50:	f011 fc4b 	bl	204ea <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    ec54:	4808      	ldr	r0, [pc, #32]	; (ec78 <msg_finalize+0xb8>)
}
    ec56:	b002      	add	sp, #8
    ec58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ec5c:	f00d befc 	b.w	1ca58 <z_impl_k_sem_give>
    ec60:	20020008 	.word	0x20020008
    ec64:	20020860 	.word	0x20020860
    ec68:	2002086c 	.word	0x2002086c
    ec6c:	200227c0 	.word	0x200227c0
    ec70:	20020890 	.word	0x20020890
    ec74:	20020258 	.word	0x20020258
    ec78:	200201f0 	.word	0x200201f0

0000ec7c <log_process_thread_func>:
{
    ec7c:	b510      	push	{r4, lr}
	log_init();
    ec7e:	f7ff fe85 	bl	e98c <log_init>
	return z_impl_k_current_get();
    ec82:	f00d fee3 	bl	1ca4c <z_impl_k_current_get>
	proc_tid = process_tid;
    ec86:	4b0c      	ldr	r3, [pc, #48]	; (ecb8 <log_process_thread_func+0x3c>)
    ec88:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    ec8a:	b130      	cbz	r0, ec9a <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    ec8c:	4b0b      	ldr	r3, [pc, #44]	; (ecbc <log_process_thread_func+0x40>)
	    process_tid &&
    ec8e:	681b      	ldr	r3, [r3, #0]
    ec90:	2b09      	cmp	r3, #9
    ec92:	dd02      	ble.n	ec9a <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    ec94:	480a      	ldr	r0, [pc, #40]	; (ecc0 <log_process_thread_func+0x44>)
    ec96:	f00d fedf 	bl	1ca58 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    ec9a:	4c09      	ldr	r4, [pc, #36]	; (ecc0 <log_process_thread_func+0x44>)
    ec9c:	2000      	movs	r0, #0
    ec9e:	f7ff fedb 	bl	ea58 <z_impl_log_process>
		if (log_process(false) == false) {
    eca2:	2800      	cmp	r0, #0
    eca4:	d1fa      	bne.n	ec9c <log_process_thread_func+0x20>
    eca6:	f04f 32ff 	mov.w	r2, #4294967295
    ecaa:	f04f 33ff 	mov.w	r3, #4294967295
    ecae:	4620      	mov	r0, r4
    ecb0:	f00d fef8 	bl	1caa4 <z_impl_k_sem_take>
    ecb4:	e7f2      	b.n	ec9c <log_process_thread_func+0x20>
    ecb6:	bf00      	nop
    ecb8:	20020890 	.word	0x20020890
    ecbc:	20020860 	.word	0x20020860
    ecc0:	200201f0 	.word	0x200201f0

0000ecc4 <z_impl_log_panic>:
{
    ecc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    ecc6:	4f0e      	ldr	r7, [pc, #56]	; (ed00 <z_impl_log_panic+0x3c>)
    ecc8:	783d      	ldrb	r5, [r7, #0]
    ecca:	b975      	cbnz	r5, ecea <z_impl_log_panic+0x26>
	log_init();
    eccc:	f7ff fe5e 	bl	e98c <log_init>
	return __log_backends_end - __log_backends_start;
    ecd0:	4c0c      	ldr	r4, [pc, #48]	; (ed04 <z_impl_log_panic+0x40>)
    ecd2:	4e0d      	ldr	r6, [pc, #52]	; (ed08 <z_impl_log_panic+0x44>)
    ecd4:	1b36      	subs	r6, r6, r4
    ecd6:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    ecd8:	42b5      	cmp	r5, r6
    ecda:	db07      	blt.n	ecec <z_impl_log_panic+0x28>
    ecdc:	2000      	movs	r0, #0
    ecde:	f7ff febb 	bl	ea58 <z_impl_log_process>
		while (log_process(false) == true) {
    ece2:	2800      	cmp	r0, #0
    ece4:	d1fa      	bne.n	ecdc <z_impl_log_panic+0x18>
	panic_mode = true;
    ece6:	2301      	movs	r3, #1
    ece8:	703b      	strb	r3, [r7, #0]
}
    ecea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    ecec:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    ecee:	795b      	ldrb	r3, [r3, #5]
    ecf0:	b11b      	cbz	r3, ecfa <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    ecf2:	6823      	ldr	r3, [r4, #0]
    ecf4:	4620      	mov	r0, r4
    ecf6:	691b      	ldr	r3, [r3, #16]
    ecf8:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    ecfa:	3501      	adds	r5, #1
    ecfc:	3410      	adds	r4, #16
    ecfe:	e7eb      	b.n	ecd8 <z_impl_log_panic+0x14>
    ed00:	200227c0 	.word	0x200227c0
    ed04:	00020adc 	.word	0x00020adc
    ed08:	00020aec 	.word	0x00020aec

0000ed0c <log_free>:
{
    ed0c:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    ed0e:	3804      	subs	r0, #4
    ed10:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    ed12:	e8d0 3fef 	ldaex	r3, [r0]
    ed16:	1e5a      	subs	r2, r3, #1
    ed18:	e8c0 2fe1 	stlex	r1, r2, [r0]
    ed1c:	2900      	cmp	r1, #0
    ed1e:	d1f8      	bne.n	ed12 <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
    ed20:	2b01      	cmp	r3, #1
    ed22:	d103      	bne.n	ed2c <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    ed24:	4803      	ldr	r0, [pc, #12]	; (ed34 <log_free+0x28>)
    ed26:	a901      	add	r1, sp, #4
    ed28:	f00d f972 	bl	1c010 <k_mem_slab_free>
}
    ed2c:	b003      	add	sp, #12
    ed2e:	f85d fb04 	ldr.w	pc, [sp], #4
    ed32:	bf00      	nop
    ed34:	20020874 	.word	0x20020874

0000ed38 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    ed38:	2320      	movs	r3, #32
    ed3a:	4902      	ldr	r1, [pc, #8]	; (ed44 <log_msg_pool_init+0xc>)
    ed3c:	461a      	mov	r2, r3
    ed3e:	4802      	ldr	r0, [pc, #8]	; (ed48 <log_msg_pool_init+0x10>)
    ed40:	f011 b943 	b.w	1ffca <k_mem_slab_init>
    ed44:	20026da0 	.word	0x20026da0
    ed48:	20020894 	.word	0x20020894

0000ed4c <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
    ed4c:	2300      	movs	r3, #0
{
    ed4e:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    ed50:	4d09      	ldr	r5, [pc, #36]	; (ed78 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    ed52:	9301      	str	r3, [sp, #4]
    ed54:	2001      	movs	r0, #1
    ed56:	f7ff fe7f 	bl	ea58 <z_impl_log_process>
    ed5a:	4604      	mov	r4, r0
			log_dropped();
    ed5c:	f7ff fde2 	bl	e924 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    ed60:	2200      	movs	r2, #0
    ed62:	2300      	movs	r3, #0
    ed64:	4628      	mov	r0, r5
    ed66:	a901      	add	r1, sp, #4
    ed68:	f00d f920 	bl	1bfac <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    ed6c:	b108      	cbz	r0, ed72 <log_msg_no_space_handle+0x26>
    ed6e:	2c00      	cmp	r4, #0
    ed70:	d1f0      	bne.n	ed54 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    ed72:	9801      	ldr	r0, [sp, #4]
    ed74:	b003      	add	sp, #12
    ed76:	bd30      	pop	{r4, r5, pc}
    ed78:	20020894 	.word	0x20020894

0000ed7c <log_msg_chunk_alloc>:
	union log_msg_chunk *msg = NULL;
    ed7c:	2300      	movs	r3, #0
{
    ed7e:	b507      	push	{r0, r1, r2, lr}
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    ed80:	2200      	movs	r2, #0
	union log_msg_chunk *msg = NULL;
    ed82:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    ed84:	4806      	ldr	r0, [pc, #24]	; (eda0 <log_msg_chunk_alloc+0x24>)
    ed86:	2300      	movs	r3, #0
    ed88:	a901      	add	r1, sp, #4
    ed8a:	f00d f90f 	bl	1bfac <k_mem_slab_alloc>
	if (err != 0) {
    ed8e:	b110      	cbz	r0, ed96 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    ed90:	f7ff ffdc 	bl	ed4c <log_msg_no_space_handle>
    ed94:	9001      	str	r0, [sp, #4]
}
    ed96:	9801      	ldr	r0, [sp, #4]
    ed98:	b003      	add	sp, #12
    ed9a:	f85d fb04 	ldr.w	pc, [sp], #4
    ed9e:	bf00      	nop
    eda0:	20020894 	.word	0x20020894

0000eda4 <msg_free>:
{
    eda4:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    eda6:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    eda8:	7a45      	ldrb	r5, [r0, #9]
{
    edaa:	b085      	sub	sp, #20
    edac:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    edae:	07d8      	lsls	r0, r3, #31
	return msg->hdr.params.std.nargs;
    edb0:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
    edb4:	d41c      	bmi.n	edf0 <msg_free+0x4c>
    edb6:	b1dd      	cbz	r5, edf0 <msg_free+0x4c>
		uint32_t smask = 0;
    edb8:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
    edba:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    edbc:	4631      	mov	r1, r6
    edbe:	9801      	ldr	r0, [sp, #4]
    edc0:	f00e ff41 	bl	1dc46 <log_msg_arg_get>
    edc4:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    edc6:	f7ff fe39 	bl	ea3c <log_is_strdup>
    edca:	b170      	cbz	r0, edea <msg_free+0x46>
				if (smask == 0) {
    edcc:	b934      	cbnz	r4, eddc <msg_free+0x38>
					smask = z_log_get_s_mask(
    edce:	9b01      	ldr	r3, [sp, #4]
    edd0:	4629      	mov	r1, r5
    edd2:	6918      	ldr	r0, [r3, #16]
    edd4:	f00e fe4c 	bl	1da70 <z_log_get_s_mask>
					if (smask == 0) {
    edd8:	4604      	mov	r4, r0
    edda:	b148      	cbz	r0, edf0 <msg_free+0x4c>
				if (smask & BIT(i)) {
    eddc:	fa24 f306 	lsr.w	r3, r4, r6
    ede0:	07d9      	lsls	r1, r3, #31
    ede2:	d502      	bpl.n	edea <msg_free+0x46>
					log_free(buf);
    ede4:	4638      	mov	r0, r7
    ede6:	f7ff ff91 	bl	ed0c <log_free>
		for (i = 0; i < nargs; i++) {
    edea:	3601      	adds	r6, #1
    edec:	42ae      	cmp	r6, r5
    edee:	d3e5      	bcc.n	edbc <msg_free+0x18>
	if (msg->hdr.params.generic.ext == 1) {
    edf0:	9b01      	ldr	r3, [sp, #4]
    edf2:	7a1a      	ldrb	r2, [r3, #8]
    edf4:	0792      	lsls	r2, r2, #30
    edf6:	d504      	bpl.n	ee02 <msg_free+0x5e>
		cont_free(msg->payload.ext.next);
    edf8:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    edfa:	4c08      	ldr	r4, [pc, #32]	; (ee1c <msg_free+0x78>)
    edfc:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    edfe:	9b03      	ldr	r3, [sp, #12]
    ee00:	b92b      	cbnz	r3, ee0e <msg_free+0x6a>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    ee02:	4806      	ldr	r0, [pc, #24]	; (ee1c <msg_free+0x78>)
    ee04:	a901      	add	r1, sp, #4
    ee06:	f00d f903 	bl	1c010 <k_mem_slab_free>
}
    ee0a:	b005      	add	sp, #20
    ee0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    ee0e:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    ee10:	4620      	mov	r0, r4
    ee12:	a903      	add	r1, sp, #12
    ee14:	f00d f8fc 	bl	1c010 <k_mem_slab_free>
		cont = next;
    ee18:	9503      	str	r5, [sp, #12]
    ee1a:	e7f0      	b.n	edfe <msg_free+0x5a>
    ee1c:	20020894 	.word	0x20020894

0000ee20 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    ee20:	b40e      	push	{r1, r2, r3}
    ee22:	b503      	push	{r0, r1, lr}
    ee24:	ab03      	add	r3, sp, #12
    ee26:	f853 2b04 	ldr.w	r2, [r3], #4
    ee2a:	4601      	mov	r1, r0
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
    ee2c:	4804      	ldr	r0, [pc, #16]	; (ee40 <print_formatted+0x20>)
	va_start(args, fmt);
    ee2e:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
    ee30:	f7fe fdc0 	bl	d9b4 <z_vprintk>
#endif
	va_end(args);

	return length;
}
    ee34:	2000      	movs	r0, #0
    ee36:	b002      	add	sp, #8
    ee38:	f85d eb04 	ldr.w	lr, [sp], #4
    ee3c:	b003      	add	sp, #12
    ee3e:	4770      	bx	lr
    ee40:	0001e04b 	.word	0x0001e04b

0000ee44 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *log_output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
    ee44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    ee48:	f011 0402 	ands.w	r4, r1, #2
{
    ee4c:	b085      	sub	sp, #20
    ee4e:	4606      	mov	r6, r0
    ee50:	4690      	mov	r8, r2
    ee52:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    ee56:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    ee5a:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    ee5e:	d007      	beq.n	ee70 <prefix_print+0x2c>
	if (!format) {
    ee60:	f011 0f44 	tst.w	r1, #68	; 0x44
    ee64:	d137      	bne.n	eed6 <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    ee66:	461a      	mov	r2, r3
    ee68:	4932      	ldr	r1, [pc, #200]	; (ef34 <prefix_print+0xf0>)
    ee6a:	f7ff ffd9 	bl	ee20 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
    ee6e:	4604      	mov	r4, r0
	if (color) {
    ee70:	f1b9 0f00 	cmp.w	r9, #0
    ee74:	d00a      	beq.n	ee8c <prefix_print+0x48>
		const char *log_color = start && (colors[level] != NULL) ?
    ee76:	4b30      	ldr	r3, [pc, #192]	; (ef38 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", log_color);
    ee78:	4630      	mov	r0, r6
		const char *log_color = start && (colors[level] != NULL) ?
    ee7a:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", log_color);
    ee7e:	4b2f      	ldr	r3, [pc, #188]	; (ef3c <prefix_print+0xf8>)
    ee80:	492f      	ldr	r1, [pc, #188]	; (ef40 <prefix_print+0xfc>)
    ee82:	2a00      	cmp	r2, #0
    ee84:	bf08      	it	eq
    ee86:	461a      	moveq	r2, r3
    ee88:	f7ff ffca 	bl	ee20 <print_formatted>
	if (level_on) {
    ee8c:	b13d      	cbz	r5, ee9e <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    ee8e:	4b2d      	ldr	r3, [pc, #180]	; (ef44 <prefix_print+0x100>)
    ee90:	4630      	mov	r0, r6
    ee92:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    ee96:	492c      	ldr	r1, [pc, #176]	; (ef48 <prefix_print+0x104>)
    ee98:	f7ff ffc2 	bl	ee20 <print_formatted>
    ee9c:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    ee9e:	f1b8 0f00 	cmp.w	r8, #0
    eea2:	d044      	beq.n	ef2e <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    eea4:	2301      	movs	r3, #1
    eea6:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    eeaa:	4b28      	ldr	r3, [pc, #160]	; (ef4c <prefix_print+0x108>)
    eeac:	f017 0f10 	tst.w	r7, #16
    eeb0:	4f27      	ldr	r7, [pc, #156]	; (ef50 <prefix_print+0x10c>)
    eeb2:	bf18      	it	ne
    eeb4:	461f      	movne	r7, r3
    eeb6:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    eeba:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    eebe:	f7ff fd3d 	bl	e93c <log_source_name_get>
    eec2:	4639      	mov	r1, r7
    eec4:	4602      	mov	r2, r0
    eec6:	4630      	mov	r0, r6
    eec8:	f7ff ffaa 	bl	ee20 <print_formatted>
    eecc:	4428      	add	r0, r5

	length += ids_print(log_output, level_on, func_on,
			domain_id, source_id, level);

	return length;
}
    eece:	4420      	add	r0, r4
    eed0:	b005      	add	sp, #20
    eed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    eed6:	4a1f      	ldr	r2, [pc, #124]	; (ef54 <prefix_print+0x110>)
    eed8:	6811      	ldr	r1, [r2, #0]
    eeda:	b331      	cbz	r1, ef2a <prefix_print+0xe6>
		timestamp /= timestamp_div;
    eedc:	4a1e      	ldr	r2, [pc, #120]	; (ef58 <prefix_print+0x114>)
    eede:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    eee2:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
    eee4:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
    eee8:	fbb3 f3f4 	udiv	r3, r3, r4
		total_seconds = timestamp / freq;
    eeec:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    eef0:	fbb4 f2fe 	udiv	r2, r4, lr
    eef4:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    eef8:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    eefc:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    ef00:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
    ef04:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    ef08:	fb01 441b 	mls	r4, r1, fp, r4
    ef0c:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    ef10:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    ef14:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    ef18:	e9cd b101 	strd	fp, r1, [sp, #4]
    ef1c:	fb0a e113 	mls	r1, sl, r3, lr
    ef20:	9100      	str	r1, [sp, #0]
    ef22:	490e      	ldr	r1, [pc, #56]	; (ef5c <prefix_print+0x118>)
    ef24:	f7ff ff7c 	bl	ee20 <print_formatted>
    ef28:	e7a1      	b.n	ee6e <prefix_print+0x2a>
		length = 0;
    ef2a:	4608      	mov	r0, r1
    ef2c:	e79f      	b.n	ee6e <prefix_print+0x2a>
	total += print_formatted(log_output,
    ef2e:	4f08      	ldr	r7, [pc, #32]	; (ef50 <prefix_print+0x10c>)
    ef30:	e7c1      	b.n	eeb6 <prefix_print+0x72>
    ef32:	bf00      	nop
    ef34:	000216dc 	.word	0x000216dc
    ef38:	00020b48 	.word	0x00020b48
    ef3c:	000216ce 	.word	0x000216ce
    ef40:	00022398 	.word	0x00022398
    ef44:	00020b5c 	.word	0x00020b5c
    ef48:	00021701 	.word	0x00021701
    ef4c:	000216d8 	.word	0x000216d8
    ef50:	000216d3 	.word	0x000216d3
    ef54:	200208b0 	.word	0x200208b0
    ef58:	200208b4 	.word	0x200208b4
    ef5c:	000216e5 	.word	0x000216e5

0000ef60 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  uint32_t flags, uint8_t level)
{
    ef60:	b538      	push	{r3, r4, r5, lr}
    ef62:	460c      	mov	r4, r1
	if (color) {
    ef64:	07e1      	lsls	r1, r4, #31
{
    ef66:	4605      	mov	r5, r0
	if (color) {
    ef68:	d503      	bpl.n	ef72 <postfix_print+0x12>
		print_formatted(log_output, "%s", log_color);
    ef6a:	4a08      	ldr	r2, [pc, #32]	; (ef8c <postfix_print+0x2c>)
    ef6c:	4908      	ldr	r1, [pc, #32]	; (ef90 <postfix_print+0x30>)
    ef6e:	f7ff ff57 	bl	ee20 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    ef72:	06e2      	lsls	r2, r4, #27
    ef74:	d408      	bmi.n	ef88 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    ef76:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    ef78:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    ef7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
    ef7e:	bf4c      	ite	mi
    ef80:	4904      	ldrmi	r1, [pc, #16]	; (ef94 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    ef82:	4905      	ldrpl	r1, [pc, #20]	; (ef98 <postfix_print+0x38>)
    ef84:	f7ff bf4c 	b.w	ee20 <print_formatted>
}
    ef88:	bd38      	pop	{r3, r4, r5, pc}
    ef8a:	bf00      	nop
    ef8c:	000216ce 	.word	0x000216ce
    ef90:	00022398 	.word	0x00022398
    ef94:	000229aa 	.word	0x000229aa
    ef98:	000229a9 	.word	0x000229a9

0000ef9c <hexdump_line_print>:
{
    ef9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    efa0:	461d      	mov	r5, r3
    efa2:	9b08      	ldr	r3, [sp, #32]
    efa4:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    efa6:	06da      	lsls	r2, r3, #27
{
    efa8:	4604      	mov	r4, r0
    efaa:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    efac:	d405      	bmi.n	efba <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    efae:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    efb0:	bf4c      	ite	mi
    efb2:	492a      	ldrmi	r1, [pc, #168]	; (f05c <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    efb4:	492a      	ldrpl	r1, [pc, #168]	; (f060 <hexdump_line_print+0xc4>)
    efb6:	f7ff ff33 	bl	ee20 <print_formatted>
{
    efba:	f04f 0800 	mov.w	r8, #0
		print_formatted(log_output, " ");
    efbe:	f8df 90a8 	ldr.w	r9, [pc, #168]	; f068 <hexdump_line_print+0xcc>
	for (int i = 0; i < prefix_offset; i++) {
    efc2:	45a8      	cmp	r8, r5
    efc4:	db2a      	blt.n	f01c <hexdump_line_print+0x80>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    efc6:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
    efc8:	f8df 80a0 	ldr.w	r8, [pc, #160]	; f06c <hexdump_line_print+0xd0>
			print_formatted(log_output, "%02x ", data[i]);
    efcc:	f8df 90a0 	ldr.w	r9, [pc, #160]	; f070 <hexdump_line_print+0xd4>
			print_formatted(log_output, " ");
    efd0:	f8df a094 	ldr.w	sl, [pc, #148]	; f068 <hexdump_line_print+0xcc>
		if (i < length) {
    efd4:	42bd      	cmp	r5, r7
    efd6:	d22f      	bcs.n	f038 <hexdump_line_print+0x9c>
			print_formatted(log_output, "%02x ", data[i]);
    efd8:	4649      	mov	r1, r9
    efda:	4620      	mov	r0, r4
    efdc:	5d72      	ldrb	r2, [r6, r5]
    efde:	f7ff ff1f 	bl	ee20 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    efe2:	3501      	adds	r5, #1
    efe4:	2d10      	cmp	r5, #16
    efe6:	d120      	bne.n	f02a <hexdump_line_print+0x8e>
	print_formatted(log_output, "|");
    efe8:	4620      	mov	r0, r4
    efea:	491e      	ldr	r1, [pc, #120]	; (f064 <hexdump_line_print+0xc8>)
    efec:	f7ff ff18 	bl	ee20 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    eff0:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
    eff2:	f8df 8074 	ldr.w	r8, [pc, #116]	; f068 <hexdump_line_print+0xcc>
			print_formatted(log_output, "%c",
    eff6:	f8df 907c 	ldr.w	r9, [pc, #124]	; f074 <hexdump_line_print+0xd8>
		if (i < length) {
    effa:	42af      	cmp	r7, r5
    effc:	d928      	bls.n	f050 <hexdump_line_print+0xb4>
			char c = (char)data[i];
    effe:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
    f000:	4649      	mov	r1, r9
	return (int)((((unsigned)c) >= ' ') &&
    f002:	f1a2 0320 	sub.w	r3, r2, #32
    f006:	2b5f      	cmp	r3, #95	; 0x5f
    f008:	bf28      	it	cs
    f00a:	222e      	movcs	r2, #46	; 0x2e
    f00c:	4620      	mov	r0, r4
    f00e:	f7ff ff07 	bl	ee20 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f012:	3501      	adds	r5, #1
    f014:	2d10      	cmp	r5, #16
    f016:	d114      	bne.n	f042 <hexdump_line_print+0xa6>
}
    f018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    f01c:	4649      	mov	r1, r9
    f01e:	4620      	mov	r0, r4
    f020:	f7ff fefe 	bl	ee20 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    f024:	f108 0801 	add.w	r8, r8, #1
    f028:	e7cb      	b.n	efc2 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    f02a:	076a      	lsls	r2, r5, #29
    f02c:	d1d2      	bne.n	efd4 <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
    f02e:	4651      	mov	r1, sl
    f030:	4620      	mov	r0, r4
    f032:	f7ff fef5 	bl	ee20 <print_formatted>
    f036:	e7cd      	b.n	efd4 <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
    f038:	4641      	mov	r1, r8
    f03a:	4620      	mov	r0, r4
    f03c:	f7ff fef0 	bl	ee20 <print_formatted>
    f040:	e7cf      	b.n	efe2 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    f042:	076b      	lsls	r3, r5, #29
    f044:	d1d9      	bne.n	effa <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    f046:	4641      	mov	r1, r8
    f048:	4620      	mov	r0, r4
    f04a:	f7ff fee9 	bl	ee20 <print_formatted>
    f04e:	e7d4      	b.n	effa <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    f050:	4641      	mov	r1, r8
    f052:	4620      	mov	r0, r4
    f054:	f7ff fee4 	bl	ee20 <print_formatted>
    f058:	e7db      	b.n	f012 <hexdump_line_print+0x76>
    f05a:	bf00      	nop
    f05c:	000229aa 	.word	0x000229aa
    f060:	000229a9 	.word	0x000229a9
    f064:	00021711 	.word	0x00021711
    f068:	0002170f 	.word	0x0002170f
    f06c:	0002170d 	.word	0x0002170d
    f070:	00021707 	.word	0x00021707
    f074:	00021713 	.word	0x00021713

0000f078 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    uint32_t flags)
{
    f078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    f07c:	7a8b      	ldrb	r3, [r1, #10]
    f07e:	4617      	mov	r7, r2
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    f080:	f013 0807 	ands.w	r8, r3, #7
{
    f084:	4605      	mov	r5, r0
    f086:	460e      	mov	r6, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    f088:	7a0a      	ldrb	r2, [r1, #8]
    f08a:	b08a      	sub	sp, #40	; 0x28
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    f08c:	d021      	beq.n	f0d2 <log_output_msg_process+0x5a>
    f08e:	43d2      	mvns	r2, r2
	return msg->hdr.ids.source_id;
    f090:	8949      	ldrh	r1, [r1, #10]
    f092:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    f096:	f3c1 1189 	ubfx	r1, r1, #6, #10
    f09a:	e9cd 8300 	strd	r8, r3, [sp]
    f09e:	9102      	str	r1, [sp, #8]
    f0a0:	68f3      	ldr	r3, [r6, #12]
    f0a2:	4639      	mov	r1, r7
    f0a4:	f002 0201 	and.w	r2, r2, #1
    f0a8:	f7ff fecc 	bl	ee44 <prefix_print>
    f0ac:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    f0ae:	7a34      	ldrb	r4, [r6, #8]
    f0b0:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    f0b2:	f014 0401 	ands.w	r4, r4, #1
    f0b6:	d00e      	beq.n	f0d6 <log_output_msg_process+0x5e>
		std_print(msg, log_output);
    f0b8:	4629      	mov	r1, r5
    f0ba:	4630      	mov	r0, r6
    f0bc:	f00e fe5b 	bl	1dd76 <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    f0c0:	f1b8 0f00 	cmp.w	r8, #0
    f0c4:	d02b      	beq.n	f11e <log_output_msg_process+0xa6>
		postfix_print(log_output, flags, level);
    f0c6:	4642      	mov	r2, r8
    f0c8:	4639      	mov	r1, r7
    f0ca:	4628      	mov	r0, r5
    f0cc:	f7ff ff48 	bl	ef60 <postfix_print>
    f0d0:	e025      	b.n	f11e <log_output_msg_process+0xa6>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    f0d2:	46c1      	mov	r9, r8
    f0d4:	e7eb      	b.n	f0ae <log_output_msg_process+0x36>
	} else if (raw_string) {
    f0d6:	f1b8 0f00 	cmp.w	r8, #0
    f0da:	d126      	bne.n	f12a <log_output_msg_process+0xb2>
	size_t offset = 0;
    f0dc:	4627      	mov	r7, r4
		length = log_output->size;
    f0de:	68eb      	ldr	r3, [r5, #12]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    f0e0:	aa06      	add	r2, sp, #24
		length = log_output->size;
    f0e2:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    f0e4:	4630      	mov	r0, r6
    f0e6:	463b      	mov	r3, r7
    f0e8:	68a9      	ldr	r1, [r5, #8]
    f0ea:	f00e fe30 	bl	1dd4e <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    f0ee:	9a06      	ldr	r2, [sp, #24]
    f0f0:	686b      	ldr	r3, [r5, #4]
    f0f2:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    f0f4:	b13a      	cbz	r2, f106 <log_output_msg_process+0x8e>
			eol = (log_output->buf[length - 1] == '\n');
    f0f6:	68ab      	ldr	r3, [r5, #8]
    f0f8:	4413      	add	r3, r2
    f0fa:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    f0fe:	f1a4 030a 	sub.w	r3, r4, #10
    f102:	425c      	negs	r4, r3
    f104:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    f106:	4628      	mov	r0, r5
    f108:	f00e ff92 	bl	1e030 <log_output_flush>
		offset += length;
    f10c:	9b06      	ldr	r3, [sp, #24]
    f10e:	441f      	add	r7, r3
	} while (length > 0);
    f110:	2b00      	cmp	r3, #0
    f112:	d1e4      	bne.n	f0de <log_output_msg_process+0x66>
	if (eol) {
    f114:	b11c      	cbz	r4, f11e <log_output_msg_process+0xa6>
		print_formatted(log_output, "\r");
    f116:	4628      	mov	r0, r5
    f118:	4913      	ldr	r1, [pc, #76]	; (f168 <log_output_msg_process+0xf0>)
    f11a:	f7ff fe81 	bl	ee20 <print_formatted>
	}

	log_output_flush(log_output);
    f11e:	4628      	mov	r0, r5
    f120:	f00e ff86 	bl	1e030 <log_output_flush>
}
    f124:	b00a      	add	sp, #40	; 0x28
    f126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    f12a:	4630      	mov	r0, r6
    f12c:	f00e fdb9 	bl	1dca2 <log_msg_str_get>
    f130:	490e      	ldr	r1, [pc, #56]	; (f16c <log_output_msg_process+0xf4>)
    f132:	4602      	mov	r2, r0
    f134:	4628      	mov	r0, r5
    f136:	f7ff fe73 	bl	ee20 <print_formatted>
		length = sizeof(buf);
    f13a:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    f13e:	aa05      	add	r2, sp, #20
    f140:	4623      	mov	r3, r4
    f142:	4630      	mov	r0, r6
    f144:	a906      	add	r1, sp, #24
		length = sizeof(buf);
    f146:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    f14a:	f00e fe00 	bl	1dd4e <log_msg_hexdump_data_get>
		if (length) {
    f14e:	9a05      	ldr	r2, [sp, #20]
    f150:	2a00      	cmp	r2, #0
    f152:	d0b8      	beq.n	f0c6 <log_output_msg_process+0x4e>
			hexdump_line_print(log_output, buf, length,
    f154:	464b      	mov	r3, r9
    f156:	4628      	mov	r0, r5
    f158:	9700      	str	r7, [sp, #0]
    f15a:	a906      	add	r1, sp, #24
    f15c:	f7ff ff1e 	bl	ef9c <hexdump_line_print>
			offset += length;
    f160:	9b05      	ldr	r3, [sp, #20]
    f162:	441c      	add	r4, r3
		length = sizeof(buf);
    f164:	e7eb      	b.n	f13e <log_output_msg_process+0xc6>
    f166:	bf00      	nop
    f168:	00021716 	.word	0x00021716
    f16c:	00022398 	.word	0x00022398

0000f170 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    f170:	f242 730f 	movw	r3, #9999	; 0x270f
{
    f174:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    f176:	428b      	cmp	r3, r1
    f178:	bf28      	it	cs
    f17a:	460b      	movcs	r3, r1
	log_output_func_t outf = log_output->func;
    f17c:	6805      	ldr	r5, [r0, #0]
{
    f17e:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    f180:	2105      	movs	r1, #5
    f182:	4668      	mov	r0, sp
    f184:	4a0d      	ldr	r2, [pc, #52]	; (f1bc <log_output_dropped_process+0x4c>)
    f186:	f00e f8c2 	bl	1d30e <snprintk>
    f18a:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    f18c:	6863      	ldr	r3, [r4, #4]
    f18e:	4628      	mov	r0, r5
    f190:	220b      	movs	r2, #11
    f192:	685b      	ldr	r3, [r3, #4]
    f194:	490a      	ldr	r1, [pc, #40]	; (f1c0 <log_output_dropped_process+0x50>)
    f196:	f00e fde1 	bl	1dd5c <buffer_write>
		     log_output->control_block->ctx);
	buffer_write(outf, buf, len, log_output->control_block->ctx);
    f19a:	6863      	ldr	r3, [r4, #4]
    f19c:	4632      	mov	r2, r6
    f19e:	4669      	mov	r1, sp
    f1a0:	4628      	mov	r0, r5
    f1a2:	685b      	ldr	r3, [r3, #4]
    f1a4:	f00e fdda 	bl	1dd5c <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    f1a8:	6863      	ldr	r3, [r4, #4]
    f1aa:	221b      	movs	r2, #27
    f1ac:	4628      	mov	r0, r5
    f1ae:	685b      	ldr	r3, [r3, #4]
    f1b0:	4904      	ldr	r1, [pc, #16]	; (f1c4 <log_output_dropped_process+0x54>)
    f1b2:	f00e fdd3 	bl	1dd5c <buffer_write>
		     log_output->control_block->ctx);
}
    f1b6:	b002      	add	sp, #8
    f1b8:	bd70      	pop	{r4, r5, r6, pc}
    f1ba:	bf00      	nop
    f1bc:	000221e3 	.word	0x000221e3
    f1c0:	00021754 	.word	0x00021754
    f1c4:	00021738 	.word	0x00021738

0000f1c8 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    f1c8:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    f1ca:	2100      	movs	r1, #0
	timestamp_div = 1U;
    f1cc:	4a07      	ldr	r2, [pc, #28]	; (f1ec <log_output_timestamp_freq_set+0x24>)
{
    f1ce:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
    f1d0:	4c07      	ldr	r4, [pc, #28]	; (f1f0 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    f1d2:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    f1d4:	42a0      	cmp	r0, r4
    f1d6:	d804      	bhi.n	f1e2 <log_output_timestamp_freq_set+0x1a>
    f1d8:	b101      	cbz	r1, f1dc <log_output_timestamp_freq_set+0x14>
    f1da:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    f1dc:	4b05      	ldr	r3, [pc, #20]	; (f1f4 <log_output_timestamp_freq_set+0x2c>)
    f1de:	6018      	str	r0, [r3, #0]
}
    f1e0:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
    f1e2:	2101      	movs	r1, #1
		frequency /= 2U;
    f1e4:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    f1e6:	005b      	lsls	r3, r3, #1
    f1e8:	e7f4      	b.n	f1d4 <log_output_timestamp_freq_set+0xc>
    f1ea:	bf00      	nop
    f1ec:	200208b4 	.word	0x200208b4
    f1f0:	000f4240 	.word	0x000f4240
    f1f4:	200208b0 	.word	0x200208b0

0000f1f8 <char_out>:
#include <assert.h>

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    f1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f1fa:	460d      	mov	r5, r1
    f1fc:	4604      	mov	r4, r0
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
		uart_poll_out(uart_dev, data[i]);
    f1fe:	4f06      	ldr	r7, [pc, #24]	; (f218 <char_out+0x20>)
    f200:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
    f202:	42b4      	cmp	r4, r6
    f204:	d101      	bne.n	f20a <char_out+0x12>
	}

	return length;
}
    f206:	4628      	mov	r0, r5
    f208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
    f20a:	6838      	ldr	r0, [r7, #0]
    f20c:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    f210:	6883      	ldr	r3, [r0, #8]
    f212:	685b      	ldr	r3, [r3, #4]
    f214:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
    f216:	e7f4      	b.n	f202 <char_out+0xa>
    f218:	200208cc 	.word	0x200208cc

0000f21c <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    f21c:	4801      	ldr	r0, [pc, #4]	; (f224 <panic+0x8>)
    f21e:	f00e bf07 	b.w	1e030 <log_output_flush>
    f222:	bf00      	nop
    f224:	00020b88 	.word	0x00020b88

0000f228 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, uint32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    f228:	4801      	ldr	r0, [pc, #4]	; (f230 <dropped+0x8>)
    f22a:	f7ff bfa1 	b.w	f170 <log_output_dropped_process>
    f22e:	bf00      	nop
    f230:	00020b88 	.word	0x00020b88

0000f234 <log_backend_uart_init>:

	log_backend_std_put(&log_output_uart, flag, msg);
}

static void log_backend_uart_init(void)
{
    f234:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    f236:	4803      	ldr	r0, [pc, #12]	; (f244 <log_backend_uart_init+0x10>)
    f238:	f00c fd0e 	bl	1bc58 <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    f23c:	4b02      	ldr	r3, [pc, #8]	; (f248 <log_backend_uart_init+0x14>)
    f23e:	6018      	str	r0, [r3, #0]
	assert((void *)uart_dev);
}
    f240:	bd08      	pop	{r3, pc}
    f242:	bf00      	nop
    f244:	00021760 	.word	0x00021760
    f248:	200208cc 	.word	0x200208cc

0000f24c <put>:
{
    f24c:	b510      	push	{r4, lr}
    f24e:	460c      	mov	r4, r1
	log_msg_get(msg);
    f250:	4608      	mov	r0, r1
    f252:	f00e fcec 	bl	1dc2e <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    f256:	4621      	mov	r1, r4
    f258:	4804      	ldr	r0, [pc, #16]	; (f26c <put+0x20>)
    f25a:	220f      	movs	r2, #15
    f25c:	f7ff ff0c 	bl	f078 <log_output_msg_process>
	log_msg_put(msg);
    f260:	4620      	mov	r0, r4
}
    f262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f266:	f00e bd0d 	b.w	1dc84 <log_msg_put>
    f26a:	bf00      	nop
    f26c:	00020b88 	.word	0x00020b88

0000f270 <z_impl_zsock_socket>:

	return fd;
}

int z_impl_zsock_socket(int family, int type, int proto)
{
    f270:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f272:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
    f274:	4c0f      	ldr	r4, [pc, #60]	; (f2b4 <z_impl_zsock_socket+0x44>)
    f276:	4e10      	ldr	r6, [pc, #64]	; (f2b8 <z_impl_zsock_socket+0x48>)
    f278:	42b4      	cmp	r4, r6
    f27a:	d307      	bcc.n	f28c <z_impl_zsock_socket+0x1c>

	if (IS_ENABLED(CONFIG_NET_NATIVE)) {
		return zsock_socket_internal(family, type, proto);
	}

	errno = EAFNOSUPPORT;
    f27c:	f00e ff00 	bl	1e080 <z_errno>
    f280:	232f      	movs	r3, #47	; 0x2f
    f282:	6003      	str	r3, [r0, #0]
	return -1;
}
    f284:	f04f 30ff 	mov.w	r0, #4294967295
    f288:	b002      	add	sp, #8
    f28a:	bd70      	pop	{r4, r5, r6, pc}
		if (sock_family->family != family &&
    f28c:	6823      	ldr	r3, [r4, #0]
    f28e:	42ab      	cmp	r3, r5
    f290:	d000      	beq.n	f294 <z_impl_zsock_socket+0x24>
    f292:	b96b      	cbnz	r3, f2b0 <z_impl_zsock_socket+0x40>
		if (!sock_family->is_supported(family, type, proto)) {
    f294:	4628      	mov	r0, r5
    f296:	6863      	ldr	r3, [r4, #4]
    f298:	e9cd 1200 	strd	r1, r2, [sp]
    f29c:	4798      	blx	r3
    f29e:	e9dd 1200 	ldrd	r1, r2, [sp]
    f2a2:	b128      	cbz	r0, f2b0 <z_impl_zsock_socket+0x40>
		return sock_family->handler(family, type, proto);
    f2a4:	4628      	mov	r0, r5
    f2a6:	68a3      	ldr	r3, [r4, #8]
}
    f2a8:	b002      	add	sp, #8
    f2aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return sock_family->handler(family, type, proto);
    f2ae:	4718      	bx	r3
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
    f2b0:	340c      	adds	r4, #12
    f2b2:	e7e1      	b.n	f278 <z_impl_zsock_socket+0x8>
    f2b4:	00020a58 	.word	0x00020a58
    f2b8:	00020a64 	.word	0x00020a64

0000f2bc <z_impl_zsock_poll>:

	return timeout - elapsed;
}

int z_impl_zsock_poll(struct zsock_pollfd *fds, int nfds, int poll_timeout)
{
    f2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint64_t end;
	bool offload = false;
	const struct fd_op_vtable *offl_vtable = NULL;
	void *offl_ctx = NULL;

	if (poll_timeout < 0) {
    f2c0:	1e14      	subs	r4, r2, #0
{
    f2c2:	b09b      	sub	sp, #108	; 0x6c
    f2c4:	4606      	mov	r6, r0
    f2c6:	9103      	str	r1, [sp, #12]
	if (poll_timeout < 0) {
    f2c8:	db30      	blt.n	f32c <z_impl_zsock_poll+0x70>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    f2ca:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    f2ce:	f240 30e7 	movw	r0, #999	; 0x3e7
    f2d2:	2100      	movs	r1, #0
    f2d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f2d8:	2300      	movs	r3, #0
    f2da:	fbc5 0104 	smlal	r0, r1, r5, r4
    f2de:	f7fd fae5 	bl	c8ac <__aeabi_uldivmod>
    f2e2:	4682      	mov	sl, r0
    f2e4:	468b      	mov	fp, r1
	void *offl_ctx = NULL;
    f2e6:	2500      	movs	r5, #0
		poll_timeout = SYS_FOREVER_MS;
	} else {
		timeout = K_MSEC(poll_timeout);
	}

	end = z_timeout_end_calc(timeout);
    f2e8:	4650      	mov	r0, sl
    f2ea:	4659      	mov	r1, fp
    f2ec:	f011 f8c8 	bl	20480 <z_timeout_end_calc>

	pev = poll_events;
    f2f0:	ab0b      	add	r3, sp, #44	; 0x2c
    f2f2:	9309      	str	r3, [sp, #36]	; 0x24
	const struct fd_op_vtable *offl_vtable = NULL;
    f2f4:	462f      	mov	r7, r5
	for (pfd = fds, i = nfds; i--; pfd++) {
    f2f6:	4633      	mov	r3, r6
	bool offload = false;
    f2f8:	46a8      	mov	r8, r5
	end = z_timeout_end_calc(timeout);
    f2fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
	for (pfd = fds, i = nfds; i--; pfd++) {
    f2fe:	f8dd 900c 	ldr.w	r9, [sp, #12]
    f302:	f1b9 0f00 	cmp.w	r9, #0
    f306:	d118      	bne.n	f33a <z_impl_zsock_poll+0x7e>
			errno = -result;
			return -1;
		}
	}

	if (offload) {
    f308:	f1b8 0f00 	cmp.w	r8, #0
    f30c:	d049      	beq.n	f3a2 <z_impl_zsock_poll+0xe6>
		return z_fdtable_call_ioctl(offl_vtable, offl_ctx,
    f30e:	9b03      	ldr	r3, [sp, #12]
    f310:	9401      	str	r4, [sp, #4]
    f312:	9300      	str	r3, [sp, #0]
    f314:	f44f 7282 	mov.w	r2, #260	; 0x104
    f318:	4633      	mov	r3, r6
    f31a:	4629      	mov	r1, r5
    f31c:	4638      	mov	r0, r7
    f31e:	f00e feb1 	bl	1e084 <z_fdtable_call_ioctl>
    f322:	4604      	mov	r4, r0
			}
		}
	} while (retry);

	return ret;
}
    f324:	4620      	mov	r0, r4
    f326:	b01b      	add	sp, #108	; 0x6c
    f328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		timeout = K_FOREVER;
    f32c:	f04f 3aff 	mov.w	sl, #4294967295
    f330:	f04f 3bff 	mov.w	fp, #4294967295
		poll_timeout = SYS_FOREVER_MS;
    f334:	f04f 34ff 	mov.w	r4, #4294967295
    f338:	e7d5      	b.n	f2e6 <z_impl_zsock_poll+0x2a>
		if (pfd->fd < 0) {
    f33a:	6818      	ldr	r0, [r3, #0]
    f33c:	2800      	cmp	r0, #0
    f33e:	db2c      	blt.n	f39a <z_impl_zsock_poll+0xde>
	ctx = z_get_fd_obj_and_vtable(sock,
    f340:	a90a      	add	r1, sp, #40	; 0x28
    f342:	9306      	str	r3, [sp, #24]
    f344:	f7fe fa6a 	bl	d81c <z_get_fd_obj_and_vtable>
		if (ctx == NULL) {
    f348:	9b06      	ldr	r3, [sp, #24]
    f34a:	4601      	mov	r1, r0
    f34c:	b328      	cbz	r0, f39a <z_impl_zsock_poll+0xde>
		result = z_fdtable_call_ioctl(vtable, ctx,
    f34e:	aa1a      	add	r2, sp, #104	; 0x68
    f350:	9201      	str	r2, [sp, #4]
    f352:	aa09      	add	r2, sp, #36	; 0x24
    f354:	9200      	str	r2, [sp, #0]
    f356:	9006      	str	r0, [sp, #24]
    f358:	f44f 7281 	mov.w	r2, #258	; 0x102
    f35c:	980a      	ldr	r0, [sp, #40]	; 0x28
    f35e:	9307      	str	r3, [sp, #28]
    f360:	f00e fe90 	bl	1e084 <z_fdtable_call_ioctl>
		if (result == -EALREADY) {
    f364:	f110 0f45 	cmn.w	r0, #69	; 0x45
		result = z_fdtable_call_ioctl(vtable, ctx,
    f368:	4602      	mov	r2, r0
		if (result == -EALREADY) {
    f36a:	9b07      	ldr	r3, [sp, #28]
    f36c:	d011      	beq.n	f392 <z_impl_zsock_poll+0xd6>
		} else if (result == -EXDEV) {
    f36e:	f110 0f12 	cmn.w	r0, #18
    f372:	9906      	ldr	r1, [sp, #24]
    f374:	d105      	bne.n	f382 <z_impl_zsock_poll+0xc6>
			if (offl_vtable == NULL || net_socket_is_tls(ctx)) {
    f376:	b90f      	cbnz	r7, f37c <z_impl_zsock_poll+0xc0>
				offl_vtable = vtable;
    f378:	460d      	mov	r5, r1
    f37a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
			offload = true;
    f37c:	f04f 0801 	mov.w	r8, #1
    f380:	e00b      	b.n	f39a <z_impl_zsock_poll+0xde>
		} else if (result != 0) {
    f382:	b150      	cbz	r0, f39a <z_impl_zsock_poll+0xde>
    f384:	9203      	str	r2, [sp, #12]
				errno = -result;
    f386:	f00e fe7b 	bl	1e080 <z_errno>
    f38a:	9a03      	ldr	r2, [sp, #12]
    f38c:	4252      	negs	r2, r2
    f38e:	6002      	str	r2, [r0, #0]
				return -1;
    f390:	e03e      	b.n	f410 <z_impl_zsock_poll+0x154>
			timeout = K_NO_WAIT;
    f392:	f04f 0a00 	mov.w	sl, #0
    f396:	f04f 0b00 	mov.w	fp, #0
	for (pfd = fds, i = nfds; i--; pfd++) {
    f39a:	3308      	adds	r3, #8
    f39c:	f109 39ff 	add.w	r9, r9, #4294967295
    f3a0:	e7af      	b.n	f302 <z_impl_zsock_poll+0x46>
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    f3a2:	ea5a 030b 	orrs.w	r3, sl, fp
    f3a6:	d016      	beq.n	f3d6 <z_impl_zsock_poll+0x11a>
    f3a8:	f1bb 3fff 	cmp.w	fp, #4294967295
    f3ac:	bf08      	it	eq
    f3ae:	f1ba 3fff 	cmpeq.w	sl, #4294967295
    f3b2:	d010      	beq.n	f3d6 <z_impl_zsock_poll+0x11a>
		int64_t remaining = end - z_tick_get();
    f3b4:	f00d fe18 	bl	1cfe8 <z_tick_get>
    f3b8:	9b04      	ldr	r3, [sp, #16]
    f3ba:	ebb3 0a00 	subs.w	sl, r3, r0
    f3be:	9b05      	ldr	r3, [sp, #20]
    f3c0:	eb63 0b01 	sbc.w	fp, r3, r1
    f3c4:	f1ba 0f00 	cmp.w	sl, #0
    f3c8:	f17b 0300 	sbcs.w	r3, fp, #0
    f3cc:	bfbc      	itt	lt
    f3ce:	f04f 0a00 	movlt.w	sl, #0
    f3d2:	f04f 0b00 	movlt.w	fp, #0
			pfd->revents = 0;
    f3d6:	f04f 0900 	mov.w	r9, #0
		ret = k_poll(poll_events, pev - poll_events, timeout);
    f3da:	9909      	ldr	r1, [sp, #36]	; 0x24
    f3dc:	ac0b      	add	r4, sp, #44	; 0x2c
    f3de:	4b34      	ldr	r3, [pc, #208]	; (f4b0 <z_impl_zsock_poll+0x1f4>)
    f3e0:	1b09      	subs	r1, r1, r4
    f3e2:	1089      	asrs	r1, r1, #2
    f3e4:	4359      	muls	r1, r3
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    f3e6:	465b      	mov	r3, fp
    f3e8:	4652      	mov	r2, sl
    f3ea:	4620      	mov	r0, r4
    f3ec:	f00d fe98 	bl	1d120 <z_impl_k_poll>
		if (ret != 0 && ret != -EAGAIN && ret != -EINTR) {
    f3f0:	f100 030b 	add.w	r3, r0, #11
    f3f4:	2b0b      	cmp	r3, #11
    f3f6:	4607      	mov	r7, r0
    f3f8:	d806      	bhi.n	f408 <z_impl_zsock_poll+0x14c>
    f3fa:	f640 0581 	movw	r5, #2177	; 0x881
    f3fe:	40dd      	lsrs	r5, r3
    f400:	43ed      	mvns	r5, r5
    f402:	f015 0501 	ands.w	r5, r5, #1
    f406:	d006      	beq.n	f416 <z_impl_zsock_poll+0x15a>
			errno = -ret;
    f408:	f00e fe3a 	bl	1e080 <z_errno>
    f40c:	427f      	negs	r7, r7
    f40e:	6007      	str	r7, [r0, #0]
			return -1;
    f410:	f04f 34ff 	mov.w	r4, #4294967295
    f414:	e786      	b.n	f324 <z_impl_zsock_poll+0x68>
		pev = poll_events;
    f416:	9409      	str	r4, [sp, #36]	; 0x24
		for (pfd = fds, i = nfds; i--; pfd++) {
    f418:	46b0      	mov	r8, r6
		ret = 0;
    f41a:	462c      	mov	r4, r5
		for (pfd = fds, i = nfds; i--; pfd++) {
    f41c:	9f03      	ldr	r7, [sp, #12]
    f41e:	b9ef      	cbnz	r7, f45c <z_impl_zsock_poll+0x1a0>
		if (retry) {
    f420:	2d00      	cmp	r5, #0
    f422:	f43f af7f 	beq.w	f324 <z_impl_zsock_poll+0x68>
			if (ret > 0) {
    f426:	2c00      	cmp	r4, #0
    f428:	f73f af7c 	bgt.w	f324 <z_impl_zsock_poll+0x68>
			if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    f42c:	ea5a 030b 	orrs.w	r3, sl, fp
    f430:	f43f af78 	beq.w	f324 <z_impl_zsock_poll+0x68>
			if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    f434:	f1bb 3fff 	cmp.w	fp, #4294967295
    f438:	bf08      	it	eq
    f43a:	f1ba 3fff 	cmpeq.w	sl, #4294967295
    f43e:	d0cc      	beq.n	f3da <z_impl_zsock_poll+0x11e>
				int64_t remaining = end - z_tick_get();
    f440:	f00d fdd2 	bl	1cfe8 <z_tick_get>
    f444:	9b04      	ldr	r3, [sp, #16]
    f446:	ebb3 0a00 	subs.w	sl, r3, r0
    f44a:	9b05      	ldr	r3, [sp, #20]
    f44c:	eb63 0b01 	sbc.w	fp, r3, r1
				if (remaining <= 0) {
    f450:	f1ba 0f01 	cmp.w	sl, #1
    f454:	f17b 0300 	sbcs.w	r3, fp, #0
    f458:	dabf      	bge.n	f3da <z_impl_zsock_poll+0x11e>
    f45a:	e763      	b.n	f324 <z_impl_zsock_poll+0x68>
			if (pfd->fd < 0) {
    f45c:	f8d8 0000 	ldr.w	r0, [r8]
			pfd->revents = 0;
    f460:	f8a8 9006 	strh.w	r9, [r8, #6]
			if (pfd->fd < 0) {
    f464:	2800      	cmp	r0, #0
    f466:	db1c      	blt.n	f4a2 <z_impl_zsock_poll+0x1e6>
	ctx = z_get_fd_obj_and_vtable(sock,
    f468:	a90a      	add	r1, sp, #40	; 0x28
    f46a:	f7fe f9d7 	bl	d81c <z_get_fd_obj_and_vtable>
			if (ctx == NULL) {
    f46e:	4601      	mov	r1, r0
    f470:	b920      	cbnz	r0, f47c <z_impl_zsock_poll+0x1c0>
				pfd->revents = ZSOCK_POLLNVAL;
    f472:	2220      	movs	r2, #32
    f474:	f8a8 2006 	strh.w	r2, [r8, #6]
				ret++;
    f478:	3401      	adds	r4, #1
    f47a:	e012      	b.n	f4a2 <z_impl_zsock_poll+0x1e6>
			result = z_fdtable_call_ioctl(vtable, ctx,
    f47c:	ab09      	add	r3, sp, #36	; 0x24
    f47e:	f240 1203 	movw	r2, #259	; 0x103
    f482:	9300      	str	r3, [sp, #0]
    f484:	980a      	ldr	r0, [sp, #40]	; 0x28
    f486:	4643      	mov	r3, r8
    f488:	f00e fdfc 	bl	1e084 <z_fdtable_call_ioctl>
			if (result == -EAGAIN) {
    f48c:	f110 0f0b 	cmn.w	r0, #11
			result = z_fdtable_call_ioctl(vtable, ctx,
    f490:	4602      	mov	r2, r0
			if (result == -EAGAIN) {
    f492:	d00a      	beq.n	f4aa <z_impl_zsock_poll+0x1ee>
			} else if (result != 0) {
    f494:	2800      	cmp	r0, #0
    f496:	f47f af75 	bne.w	f384 <z_impl_zsock_poll+0xc8>
			if (pfd->revents != 0) {
    f49a:	f9b8 2006 	ldrsh.w	r2, [r8, #6]
    f49e:	2a00      	cmp	r2, #0
    f4a0:	d1ea      	bne.n	f478 <z_impl_zsock_poll+0x1bc>
		for (pfd = fds, i = nfds; i--; pfd++) {
    f4a2:	f108 0808 	add.w	r8, r8, #8
    f4a6:	3f01      	subs	r7, #1
    f4a8:	e7b9      	b.n	f41e <z_impl_zsock_poll+0x162>
				retry = true;
    f4aa:	2501      	movs	r5, #1
    f4ac:	e7f9      	b.n	f4a2 <z_impl_zsock_poll+0x1e6>
    f4ae:	bf00      	nop
    f4b0:	cccccccd 	.word	0xcccccccd

0000f4b4 <socket_offload_dns_register>:
void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
	__ASSERT_NO_MSG(ops);
	__ASSERT_NO_MSG(dns_offload == NULL);

	dns_offload = ops;
    f4b4:	4b01      	ldr	r3, [pc, #4]	; (f4bc <socket_offload_dns_register+0x8>)
    f4b6:	6018      	str	r0, [r3, #0]
}
    f4b8:	4770      	bx	lr
    f4ba:	bf00      	nop
    f4bc:	200208d0 	.word	0x200208d0

0000f4c0 <socket_offload_getaddrinfo>:

int socket_offload_getaddrinfo(const char *node, const char *service,
			       const struct zsock_addrinfo *hints,
			       struct zsock_addrinfo **res)
{
    f4c0:	b410      	push	{r4}
	__ASSERT_NO_MSG(dns_offload);
	__ASSERT_NO_MSG(dns_offload->getaddrinfo);

	return dns_offload->getaddrinfo(node, service, hints, res);
    f4c2:	4c03      	ldr	r4, [pc, #12]	; (f4d0 <socket_offload_getaddrinfo+0x10>)
    f4c4:	6824      	ldr	r4, [r4, #0]
    f4c6:	6824      	ldr	r4, [r4, #0]
    f4c8:	46a4      	mov	ip, r4
}
    f4ca:	f85d 4b04 	ldr.w	r4, [sp], #4
	return dns_offload->getaddrinfo(node, service, hints, res);
    f4ce:	4760      	bx	ip
    f4d0:	200208d0 	.word	0x200208d0

0000f4d4 <socket_offload_freeaddrinfo>:
void socket_offload_freeaddrinfo(struct zsock_addrinfo *res)
{
	__ASSERT_NO_MSG(dns_offload);
	__ASSERT_NO_MSG(dns_offload->freeaddrinfo);

	return dns_offload->freeaddrinfo(res);
    f4d4:	4b01      	ldr	r3, [pc, #4]	; (f4dc <socket_offload_freeaddrinfo+0x8>)
    f4d6:	681b      	ldr	r3, [r3, #0]
    f4d8:	685b      	ldr	r3, [r3, #4]
    f4da:	4718      	bx	r3
    f4dc:	200208d0 	.word	0x200208d0

0000f4e0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    f4e0:	b508      	push	{r3, lr}
    f4e2:	4806      	ldr	r0, [pc, #24]	; (f4fc <uart_console_init+0x1c>)
    f4e4:	f00c fbb8 	bl	1bc58 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    f4e8:	4b05      	ldr	r3, [pc, #20]	; (f500 <uart_console_init+0x20>)
    f4ea:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    f4ec:	4805      	ldr	r0, [pc, #20]	; (f504 <uart_console_init+0x24>)
    f4ee:	f001 f8cd 	bl	1068c <__stdout_hook_install>
	__printk_hook_install(console_out);
    f4f2:	4804      	ldr	r0, [pc, #16]	; (f504 <uart_console_init+0x24>)
    f4f4:	f7fe fa58 	bl	d9a8 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    f4f8:	2000      	movs	r0, #0
    f4fa:	bd08      	pop	{r3, pc}
    f4fc:	00021760 	.word	0x00021760
    f500:	200208d4 	.word	0x200208d4
    f504:	0000f509 	.word	0x0000f509

0000f508 <console_out>:
	if ('\n' == c) {
    f508:	280a      	cmp	r0, #10
{
    f50a:	b538      	push	{r3, r4, r5, lr}
    f50c:	4604      	mov	r4, r0
    f50e:	4d07      	ldr	r5, [pc, #28]	; (f52c <console_out+0x24>)
	if ('\n' == c) {
    f510:	d104      	bne.n	f51c <console_out+0x14>
    f512:	6828      	ldr	r0, [r5, #0]
    f514:	6883      	ldr	r3, [r0, #8]
    f516:	210d      	movs	r1, #13
    f518:	685b      	ldr	r3, [r3, #4]
    f51a:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    f51c:	6828      	ldr	r0, [r5, #0]
    f51e:	6883      	ldr	r3, [r0, #8]
    f520:	b2e1      	uxtb	r1, r4
    f522:	685b      	ldr	r3, [r3, #4]
    f524:	4798      	blx	r3
}
    f526:	4620      	mov	r0, r4
    f528:	bd38      	pop	{r3, r4, r5, pc}
    f52a:	bf00      	nop
    f52c:	200208d4 	.word	0x200208d4

0000f530 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    f530:	b570      	push	{r4, r5, r6, lr}
    f532:	4604      	mov	r4, r0
	err = set_off_state(&subdata->flags, ctx);
    f534:	250c      	movs	r5, #12
	size_t offset = (size_t)(mgr - data->mgr);
    f536:	480d      	ldr	r0, [pc, #52]	; (f56c <onoff_stop+0x3c>)
{
    f538:	460e      	mov	r6, r1
	size_t offset = (size_t)(mgr - data->mgr);
    f53a:	1a23      	subs	r3, r4, r0
    f53c:	109a      	asrs	r2, r3, #2
    f53e:	4b0c      	ldr	r3, [pc, #48]	; (f570 <onoff_stop+0x40>)
	err = set_off_state(&subdata->flags, ctx);
    f540:	2140      	movs	r1, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    f542:	4353      	muls	r3, r2
    f544:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
    f546:	435d      	muls	r5, r3
    f548:	f105 0340 	add.w	r3, r5, #64	; 0x40
    f54c:	4418      	add	r0, r3
    f54e:	f00e fe2e 	bl	1e1ae <set_off_state>
	if (err < 0) {
    f552:	1e01      	subs	r1, r0, #0
    f554:	db04      	blt.n	f560 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    f556:	4b07      	ldr	r3, [pc, #28]	; (f574 <onoff_stop+0x44>)
    f558:	442b      	add	r3, r5
    f55a:	685b      	ldr	r3, [r3, #4]
    f55c:	4798      	blx	r3
	return 0;
    f55e:	2100      	movs	r1, #0
	int res;

	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    f560:	4620      	mov	r0, r4
    f562:	4633      	mov	r3, r6
}
    f564:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    f568:	4718      	bx	r3
    f56a:	bf00      	nop
    f56c:	200208e8 	.word	0x200208e8
    f570:	b6db6db7 	.word	0xb6db6db7
    f574:	00020bac 	.word	0x00020bac

0000f578 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    f578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    f57c:	4c0f      	ldr	r4, [pc, #60]	; (f5bc <onoff_start+0x44>)
    f57e:	4d10      	ldr	r5, [pc, #64]	; (f5c0 <onoff_start+0x48>)
    f580:	1b03      	subs	r3, r0, r4
    f582:	109b      	asrs	r3, r3, #2
    f584:	435d      	muls	r5, r3
    f586:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
    f588:	250c      	movs	r5, #12
    f58a:	435d      	muls	r5, r3
{
    f58c:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
    f58e:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
    f592:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    f594:	4420      	add	r0, r4
    f596:	2140      	movs	r1, #64	; 0x40
    f598:	f00e fe22 	bl	1e1e0 <set_starting_state>
	if (err < 0) {
    f59c:	1e01      	subs	r1, r0, #0
    f59e:	db08      	blt.n	f5b2 <onoff_start+0x3a>
	subdata->cb = data->cb;
    f5a0:	4b08      	ldr	r3, [pc, #32]	; (f5c4 <onoff_start+0x4c>)
    f5a2:	442c      	add	r4, r5
	subdata->user_data = data->user_data;
    f5a4:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    f5a8:	4b07      	ldr	r3, [pc, #28]	; (f5c8 <onoff_start+0x50>)
    f5aa:	595b      	ldr	r3, [r3, r5]
	err = async_start(DEVICE_GET(clock_nrf), get_subsys(mgr),
			  &data, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    f5ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    f5b0:	4718      	bx	r3
		notify(mgr, err);
    f5b2:	4638      	mov	r0, r7
    f5b4:	4633      	mov	r3, r6
}
    f5b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    f5ba:	4718      	bx	r3
    f5bc:	200208e8 	.word	0x200208e8
    f5c0:	b6db6db7 	.word	0xb6db6db7
    f5c4:	0001e243 	.word	0x0001e243
    f5c8:	00020bac 	.word	0x00020bac

0000f5cc <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
    f5cc:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    f5ce:	2200      	movs	r2, #0
    f5d0:	2101      	movs	r1, #1
{
    f5d2:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    f5d4:	2005      	movs	r0, #5
    f5d6:	f000 fac9 	bl	fb6c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    f5da:	2005      	movs	r0, #5
    f5dc:	f000 faa8 	bl	fb30 <arch_irq_enable>
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
		nrf_gpio_pin_mcu_select(PIN_XL2,
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
	}
#endif
	nrfx_err = nrfx_clock_init(clock_event_handler);
    f5e0:	480f      	ldr	r0, [pc, #60]	; (f620 <clk_init+0x54>)
    f5e2:	f00c fa45 	bl	1ba70 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    f5e6:	4b0f      	ldr	r3, [pc, #60]	; (f624 <clk_init+0x58>)
    f5e8:	4298      	cmp	r0, r3
    f5ea:	d115      	bne.n	f618 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    f5ec:	f010 fc5b 	bl	1fea6 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    f5f0:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    f5f2:	490d      	ldr	r1, [pc, #52]	; (f628 <clk_init+0x5c>)
    f5f4:	4630      	mov	r0, r6
    f5f6:	f00d fee7 	bl	1d3c8 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    f5fa:	2800      	cmp	r0, #0
    f5fc:	db0b      	blt.n	f616 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    f5fe:	2501      	movs	r5, #1
    f600:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
    f602:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    f604:	4908      	ldr	r1, [pc, #32]	; (f628 <clk_init+0x5c>)
    f606:	f104 001c 	add.w	r0, r4, #28
    f60a:	f00d fedd 	bl	1d3c8 <onoff_manager_init>
		if (err < 0) {
    f60e:	2800      	cmp	r0, #0
    f610:	db01      	blt.n	f616 <clk_init+0x4a>
	}

	return 0;
    f612:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    f614:	64e5      	str	r5, [r4, #76]	; 0x4c
}
    f616:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    f618:	f06f 0004 	mvn.w	r0, #4
    f61c:	e7fb      	b.n	f616 <clk_init+0x4a>
    f61e:	bf00      	nop
    f620:	0000f669 	.word	0x0000f669
    f624:	0bad0000 	.word	0x0bad0000
    f628:	00020bc4 	.word	0x00020bc4

0000f62c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    f62c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    f62e:	230c      	movs	r3, #12
static void clkstarted_handle(const struct device *dev,
    f630:	4601      	mov	r1, r0
	sub_data->cb = NULL;
    f632:	2600      	movs	r6, #0
	clock_control_cb_t callback = sub_data->cb;
    f634:	434b      	muls	r3, r1
    f636:	480a      	ldr	r0, [pc, #40]	; (f660 <clkstarted_handle.constprop.0+0x34>)
    f638:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    f63a:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
    f63c:	e9d4 520e 	ldrd	r5, r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    f640:	4418      	add	r0, r3
	sub_data->cb = NULL;
    f642:	63a6      	str	r6, [r4, #56]	; 0x38
	void *user_data = sub_data->user_data;
    f644:	9201      	str	r2, [sp, #4]
	set_on_state(&sub_data->flags);
    f646:	f00e fde9 	bl	1e21c <set_on_state>
	if (callback) {
    f64a:	b135      	cbz	r5, f65a <clkstarted_handle.constprop.0+0x2e>
		callback(dev, (clock_control_subsys_t)type, user_data);
    f64c:	462b      	mov	r3, r5
    f64e:	9a01      	ldr	r2, [sp, #4]
    f650:	4804      	ldr	r0, [pc, #16]	; (f664 <clkstarted_handle.constprop.0+0x38>)
}
    f652:	b002      	add	sp, #8
    f654:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    f658:	4718      	bx	r3
}
    f65a:	b002      	add	sp, #8
    f65c:	bd70      	pop	{r4, r5, r6, pc}
    f65e:	bf00      	nop
    f660:	200208e8 	.word	0x200208e8
    f664:	2002007c 	.word	0x2002007c

0000f668 <clock_event_handler>:
	switch (event) {
    f668:	b110      	cbz	r0, f670 <clock_event_handler+0x8>
    f66a:	2801      	cmp	r0, #1
    f66c:	d004      	beq.n	f678 <clock_event_handler+0x10>
    f66e:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    f670:	4b03      	ldr	r3, [pc, #12]	; (f680 <clock_event_handler+0x18>)
    f672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    f674:	075b      	lsls	r3, r3, #29
    f676:	d101      	bne.n	f67c <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    f678:	f7ff bfd8 	b.w	f62c <clkstarted_handle.constprop.0>
}
    f67c:	4770      	bx	lr
    f67e:	bf00      	nop
    f680:	200208e8 	.word	0x200208e8

0000f684 <generic_hfclk_start>:
{
    f684:	b508      	push	{r3, lr}
	__asm__ volatile(
    f686:	f04f 0320 	mov.w	r3, #32
    f68a:	f3ef 8111 	mrs	r1, BASEPRI
    f68e:	f383 8811 	msr	BASEPRI, r3
    f692:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    f696:	4a11      	ldr	r2, [pc, #68]	; (f6dc <generic_hfclk_start+0x58>)
    f698:	6813      	ldr	r3, [r2, #0]
    f69a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    f69e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    f6a2:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    f6a4:	d00b      	beq.n	f6be <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    f6a6:	4a0e      	ldr	r2, [pc, #56]	; (f6e0 <generic_hfclk_start+0x5c>)
    f6a8:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    f6ac:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    f6b0:	f013 0301 	ands.w	r3, r3, #1
    f6b4:	d003      	beq.n	f6be <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
    f6b6:	480b      	ldr	r0, [pc, #44]	; (f6e4 <generic_hfclk_start+0x60>)
    f6b8:	f00e fdb0 	bl	1e21c <set_on_state>
			already_started = true;
    f6bc:	2301      	movs	r3, #1
	__asm__ volatile(
    f6be:	f381 8811 	msr	BASEPRI, r1
    f6c2:	f3bf 8f6f 	isb	sy
	if (already_started) {
    f6c6:	b123      	cbz	r3, f6d2 <generic_hfclk_start+0x4e>
}
    f6c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(DEVICE_GET(clock_nrf),
    f6cc:	2000      	movs	r0, #0
    f6ce:	f7ff bfad 	b.w	f62c <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    f6d2:	2001      	movs	r0, #1
}
    f6d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f6d8:	f00c b9da 	b.w	1ba90 <nrfx_clock_start>
    f6dc:	20020938 	.word	0x20020938
    f6e0:	40005000 	.word	0x40005000
    f6e4:	20020928 	.word	0x20020928

0000f6e8 <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    f6e8:	4b07      	ldr	r3, [pc, #28]	; (f708 <generic_hfclk_stop+0x20>)
    f6ea:	e8d3 2fef 	ldaex	r2, [r3]
    f6ee:	f022 0102 	bic.w	r1, r2, #2
    f6f2:	e8c3 1fe0 	stlex	r0, r1, [r3]
    f6f6:	2800      	cmp	r0, #0
    f6f8:	d1f7      	bne.n	f6ea <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    f6fa:	07d3      	lsls	r3, r2, #31
    f6fc:	d402      	bmi.n	f704 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    f6fe:	2001      	movs	r0, #1
    f700:	f00c b9f8 	b.w	1baf4 <nrfx_clock_stop>
}
    f704:	4770      	bx	lr
    f706:	bf00      	nop
    f708:	20020938 	.word	0x20020938

0000f70c <api_blocking_start>:
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    f70c:	2300      	movs	r3, #0
    f70e:	2201      	movs	r2, #1
{
    f710:	b510      	push	{r4, lr}
    f712:	b08a      	sub	sp, #40	; 0x28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    f714:	e9cd 3206 	strd	r3, r2, [sp, #24]
	struct clock_control_async_data data = {
    f718:	9301      	str	r3, [sp, #4]
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    f71a:	aa08      	add	r2, sp, #32
	struct clock_control_async_data data = {
    f71c:	4b0a      	ldr	r3, [pc, #40]	; (f748 <api_blocking_start+0x3c>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    f71e:	e9cd 2208 	strd	r2, r2, [sp, #32]
    f722:	ac04      	add	r4, sp, #16
	err = api_start(dev, subsys, &data);
    f724:	aa01      	add	r2, sp, #4
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    f726:	e9cd 4404 	strd	r4, r4, [sp, #16]
	struct clock_control_async_data data = {
    f72a:	e9cd 3402 	strd	r3, r4, [sp, #8]
	err = api_start(dev, subsys, &data);
    f72e:	f00e fdaf 	bl	1e290 <api_start>
	if (err < 0) {
    f732:	2800      	cmp	r0, #0
    f734:	db05      	blt.n	f742 <api_blocking_start+0x36>
	return z_impl_k_sem_take(sem, timeout);
    f736:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    f73a:	2300      	movs	r3, #0
    f73c:	4620      	mov	r0, r4
    f73e:	f00d f9b1 	bl	1caa4 <z_impl_k_sem_take>
}
    f742:	b00a      	add	sp, #40	; 0x28
    f744:	bd10      	pop	{r4, pc}
    f746:	bf00      	nop
    f748:	0001e257 	.word	0x0001e257

0000f74c <z_nrf_clock_control_lf_on>:
{
    f74c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    f750:	2201      	movs	r2, #1
    f752:	4607      	mov	r7, r0
    f754:	4936      	ldr	r1, [pc, #216]	; (f830 <z_nrf_clock_control_lf_on+0xe4>)
    f756:	e8d1 3fef 	ldaex	r3, [r1]
    f75a:	e8c1 2fe0 	stlex	r0, r2, [r1]
    f75e:	2800      	cmp	r0, #0
    f760:	d1f9      	bne.n	f756 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    f762:	b933      	cbnz	r3, f772 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    f764:	4933      	ldr	r1, [pc, #204]	; (f834 <z_nrf_clock_control_lf_on+0xe8>)
		err = onoff_request(mgr, &cli);
    f766:	4834      	ldr	r0, [pc, #208]	; (f838 <z_nrf_clock_control_lf_on+0xec>)
    f768:	604b      	str	r3, [r1, #4]
    f76a:	60cb      	str	r3, [r1, #12]
    f76c:	608a      	str	r2, [r1, #8]
    f76e:	f00d fe3e 	bl	1d3ee <onoff_request>
	switch (start_mode) {
    f772:	1e7b      	subs	r3, r7, #1
    f774:	2b01      	cmp	r3, #1
    f776:	d82e      	bhi.n	f7d6 <z_nrf_clock_control_lf_on+0x8a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    f778:	2f01      	cmp	r7, #1
    f77a:	d106      	bne.n	f78a <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    f77c:	4b2f      	ldr	r3, [pc, #188]	; (f83c <z_nrf_clock_control_lf_on+0xf0>)
    f77e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    f782:	f003 0303 	and.w	r3, r3, #3
    f786:	2b02      	cmp	r3, #2
    f788:	d025      	beq.n	f7d6 <z_nrf_clock_control_lf_on+0x8a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    f78a:	f010 fdc1 	bl	20310 <k_is_in_isr>
    f78e:	4604      	mov	r4, r0
    f790:	b918      	cbnz	r0, f79a <z_nrf_clock_control_lf_on+0x4e>
	return !z_sys_post_kernel;
    f792:	4b2b      	ldr	r3, [pc, #172]	; (f840 <z_nrf_clock_control_lf_on+0xf4>)
	int key = isr_mode ? irq_lock() : 0;
    f794:	781b      	ldrb	r3, [r3, #0]
    f796:	2b00      	cmp	r3, #0
    f798:	d144      	bne.n	f824 <z_nrf_clock_control_lf_on+0xd8>
	__asm__ volatile(
    f79a:	f04f 0320 	mov.w	r3, #32
    f79e:	f3ef 8611 	mrs	r6, BASEPRI
    f7a2:	f383 8811 	msr	BASEPRI, r3
    f7a6:	f3bf 8f6f 	isb	sy
    f7aa:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    f7ac:	4d23      	ldr	r5, [pc, #140]	; (f83c <z_nrf_clock_control_lf_on+0xf0>)
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    f7ae:	f8df 809c 	ldr.w	r8, [pc, #156]	; f84c <z_nrf_clock_control_lf_on+0x100>
    f7b2:	46a9      	mov	r9, r5
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    f7b4:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    f7b8:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    f7bc:	03d2      	lsls	r2, r2, #15
    f7be:	d50c      	bpl.n	f7da <z_nrf_clock_control_lf_on+0x8e>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    f7c0:	f003 0303 	and.w	r3, r3, #3
    f7c4:	2b02      	cmp	r3, #2
    f7c6:	d001      	beq.n	f7cc <z_nrf_clock_control_lf_on+0x80>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    f7c8:	2f01      	cmp	r7, #1
    f7ca:	d106      	bne.n	f7da <z_nrf_clock_control_lf_on+0x8e>
	if (isr_mode) {
    f7cc:	b334      	cbz	r4, f81c <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    f7ce:	f386 8811 	msr	BASEPRI, r6
    f7d2:	f3bf 8f6f 	isb	sy
}
    f7d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
    f7da:	b1d4      	cbz	r4, f812 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    f7dc:	4630      	mov	r0, r6
    f7de:	f000 fa41 	bl	fc64 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    f7e2:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    f7e6:	b2db      	uxtb	r3, r3
    f7e8:	2b01      	cmp	r3, #1
    f7ea:	d1e3      	bne.n	f7b4 <z_nrf_clock_control_lf_on+0x68>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    f7ec:	f8d8 2000 	ldr.w	r2, [r8]
		    && nrf_clock_event_check(NRF_CLOCK,
    f7f0:	2a00      	cmp	r2, #0
    f7f2:	d0df      	beq.n	f7b4 <z_nrf_clock_control_lf_on+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f7f4:	2200      	movs	r2, #0
    f7f6:	f8c8 2000 	str.w	r2, [r8]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    f7fa:	f8d8 2000 	ldr.w	r2, [r8]
    p_reg->LFCLKSRC = (uint32_t)(source);
    f7fe:	2202      	movs	r2, #2
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f800:	2120      	movs	r1, #32
    f802:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
    f806:	4a0f      	ldr	r2, [pc, #60]	; (f844 <z_nrf_clock_control_lf_on+0xf8>)
    f808:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f80c:	4a0e      	ldr	r2, [pc, #56]	; (f848 <z_nrf_clock_control_lf_on+0xfc>)
    f80e:	6013      	str	r3, [r2, #0]
}
    f810:	e7d0      	b.n	f7b4 <z_nrf_clock_control_lf_on+0x68>
	return z_impl_k_sleep(timeout);
    f812:	2100      	movs	r1, #0
    f814:	2021      	movs	r0, #33	; 0x21
    f816:	f00d f8f9 	bl	1ca0c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    f81a:	e7e2      	b.n	f7e2 <z_nrf_clock_control_lf_on+0x96>
    p_reg->INTENSET = mask;
    f81c:	2302      	movs	r3, #2
    f81e:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
    f822:	e7d8      	b.n	f7d6 <z_nrf_clock_control_lf_on+0x8a>
    p_reg->INTENCLR = mask;
    f824:	2202      	movs	r2, #2
    f826:	4b05      	ldr	r3, [pc, #20]	; (f83c <z_nrf_clock_control_lf_on+0xf0>)
	int key = isr_mode ? irq_lock() : 0;
    f828:	4606      	mov	r6, r0
    f82a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    f82e:	e7bd      	b.n	f7ac <z_nrf_clock_control_lf_on+0x60>
    f830:	2002093c 	.word	0x2002093c
    f834:	200208d8 	.word	0x200208d8
    f838:	20020904 	.word	0x20020904
    f83c:	40005000 	.word	0x40005000
    f840:	20024327 	.word	0x20024327
    f844:	e000e100 	.word	0xe000e100
    f848:	40005008 	.word	0x40005008
    f84c:	40005104 	.word	0x40005104

0000f850 <handle_next_cycle_case>:
 * counter progresses during that time it means that 1 cycle elapsed and
 * interrupt is set pending.
 */
static void handle_next_cycle_case(uint32_t t)
{
	set_comparator(t + 2);
    f850:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    f852:	4b08      	ldr	r3, [pc, #32]	; (f874 <handle_next_cycle_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    f854:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    f858:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    f85c:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
    f860:	4290      	cmp	r0, r2
    f862:	d100      	bne.n	f866 <handle_next_cycle_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
    f864:	4770      	bx	lr
    f866:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
    f86a:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    f86c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    f870:	e7f2      	b.n	f858 <handle_next_cycle_case+0x8>
    f872:	bf00      	nop
    f874:	40015000 	.word	0x40015000

0000f878 <rtc_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    f878:	2200      	movs	r2, #0
    f87a:	4b07      	ldr	r3, [pc, #28]	; (f898 <rtc_nrf_isr+0x20>)
    f87c:	601a      	str	r2, [r3, #0]
    f87e:	681b      	ldr	r3, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	uint32_t t = get_comparator();
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    f880:	4a06      	ldr	r2, [pc, #24]	; (f89c <rtc_nrf_isr+0x24>)
    return p_reg->CC[ch];
    f882:	4b07      	ldr	r3, [pc, #28]	; (f8a0 <rtc_nrf_isr+0x28>)
    f884:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
    f888:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    f88a:	1ac0      	subs	r0, r0, r3
    f88c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    f890:	4403      	add	r3, r0
    f892:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_alarm(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
    f894:	f00d bb3e 	b.w	1cf14 <z_clock_announce>
    f898:	40015140 	.word	0x40015140
    f89c:	20020940 	.word	0x20020940
    f8a0:	40015000 	.word	0x40015000

0000f8a4 <z_clock_driver_init>:
}

int z_clock_driver_init(const struct device *device)
{
    f8a4:	b538      	push	{r3, r4, r5, lr}
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    f8a6:	2400      	movs	r4, #0
    f8a8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    f8ac:	4d0e      	ldr	r5, [pc, #56]	; (f8e8 <z_clock_driver_init+0x44>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    f8ae:	4b0f      	ldr	r3, [pc, #60]	; (f8ec <z_clock_driver_init+0x48>)
    p_reg->PRESCALER = val;
    f8b0:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    f8b4:	601c      	str	r4, [r3, #0]
    f8b6:	681b      	ldr	r3, [r3, #0]
    f8b8:	4b0d      	ldr	r3, [pc, #52]	; (f8f0 <z_clock_driver_init+0x4c>)
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();

	IRQ_CONNECT(RTC_IRQn, 1, rtc_nrf_isr, 0, 0);
    f8ba:	2101      	movs	r1, #1
    f8bc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
    f8c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    f8c4:	4622      	mov	r2, r4
    f8c6:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    f8ca:	2015      	movs	r0, #21
    f8cc:	f000 f94e 	bl	fb6c <z_arm_irq_priority_set>
	irq_enable(RTC_IRQn);
    f8d0:	2015      	movs	r0, #21
    f8d2:	f000 f92d 	bl	fb30 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    f8d6:	2301      	movs	r3, #1
    f8d8:	4a06      	ldr	r2, [pc, #24]	; (f8f4 <z_clock_driver_init+0x50>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	z_nrf_clock_control_lf_on(mode);
    f8da:	2002      	movs	r0, #2
    f8dc:	6013      	str	r3, [r2, #0]
    f8de:	602b      	str	r3, [r5, #0]
    f8e0:	f7ff ff34 	bl	f74c <z_nrf_clock_control_lf_on>

	return 0;
}
    f8e4:	4620      	mov	r0, r4
    f8e6:	bd38      	pop	{r3, r4, r5, pc}
    f8e8:	40015000 	.word	0x40015000
    f8ec:	40015140 	.word	0x40015140
    f8f0:	e000e100 	.word	0xe000e100
    f8f4:	40015008 	.word	0x40015008

0000f8f8 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
    f8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     return p_reg->COUNTER;
    f8fa:	4b2d      	ldr	r3, [pc, #180]	; (f9b0 <z_clock_set_timeout+0xb8>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    f8fc:	4c2d      	ldr	r4, [pc, #180]	; (f9b4 <z_clock_set_timeout+0xbc>)
    f8fe:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);

	uint32_t unannounced = counter_sub(counter(), last_count);
    f902:	4b2d      	ldr	r3, [pc, #180]	; (f9b8 <z_clock_set_timeout+0xc0>)
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    f904:	f1b0 3fff 	cmp.w	r0, #4294967295
    f908:	bf08      	it	eq
    f90a:	4620      	moveq	r0, r4
	uint32_t unannounced = counter_sub(counter(), last_count);
    f90c:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    f90e:	1a52      	subs	r2, r2, r1
    f910:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    f914:	0212      	lsls	r2, r2, #8
    f916:	d438      	bmi.n	f98a <z_clock_set_timeout+0x92>
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
    f918:	3801      	subs	r0, #1
    f91a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    f91e:	42a0      	cmp	r0, r4
    f920:	bfa8      	it	ge
    f922:	4620      	movge	r0, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    f924:	3301      	adds	r3, #1
    f926:	4418      	add	r0, r3
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    f928:	42a0      	cmp	r0, r4
    f92a:	bf94      	ite	ls
    f92c:	180c      	addls	r4, r1, r0
    f92e:	190c      	addhi	r4, r1, r4
    p_reg->INTENCLR = mask;
    f930:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    f934:	2600      	movs	r6, #0
    p_reg->INTENCLR = mask;
    f936:	4a1e      	ldr	r2, [pc, #120]	; (f9b0 <z_clock_set_timeout+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    f938:	4d20      	ldr	r5, [pc, #128]	; (f9bc <z_clock_set_timeout+0xc4>)
    p_reg->INTENCLR = mask;
    f93a:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
     return p_reg->COUNTER;
    f93e:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
    return p_reg->CC[ch];
    f942:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    f946:	602e      	str	r6, [r5, #0]
	return (a - b) & COUNTER_MAX;
    f948:	1a5b      	subs	r3, r3, r1
    f94a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    f94e:	682f      	ldr	r7, [r5, #0]
	if (counter_sub(prev_val, now) == 1) {
    f950:	2b01      	cmp	r3, #1
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    f952:	f021 477f 	bic.w	r7, r1, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    f956:	f8c2 7540 	str.w	r7, [r2, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    f95a:	f8c2 0344 	str.w	r0, [r2, #836]	; 0x344
	if (counter_sub(prev_val, now) == 1) {
    f95e:	d104      	bne.n	f96a <z_clock_set_timeout+0x72>
	z_impl_k_busy_wait(usec_to_wait);
    f960:	200f      	movs	r0, #15
    f962:	f010 fcdb 	bl	2031c <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    f966:	602e      	str	r6, [r5, #0]
    f968:	682b      	ldr	r3, [r5, #0]
    f96a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    f96e:	4b14      	ldr	r3, [pc, #80]	; (f9c0 <z_clock_set_timeout+0xc8>)
    f970:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
    f974:	4b0e      	ldr	r3, [pc, #56]	; (f9b0 <z_clock_set_timeout+0xb8>)
    f976:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    f97a:	1a22      	subs	r2, r4, r0
    f97c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (diff == 1) {
    f980:	2a01      	cmp	r2, #1
    f982:	d104      	bne.n	f98e <z_clock_set_timeout+0x96>
		handle_next_cycle_case(t);
    f984:	f7ff ff64 	bl	f850 <handle_next_cycle_case>
    f988:	e00b      	b.n	f9a2 <z_clock_set_timeout+0xaa>
		ticks = 0;
    f98a:	2000      	movs	r0, #0
    f98c:	e7ca      	b.n	f924 <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    f98e:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    f992:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
     return p_reg->COUNTER;
    f996:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    f99a:	1a24      	subs	r4, r4, r0
    f99c:	3c02      	subs	r4, #2
	if (diff > MAX_CYCLES) {
    f99e:	0223      	lsls	r3, r4, #8
    f9a0:	d4f0      	bmi.n	f984 <z_clock_set_timeout+0x8c>
    p_reg->INTENSET = mask;
    f9a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    f9a6:	4b02      	ldr	r3, [pc, #8]	; (f9b0 <z_clock_set_timeout+0xb8>)
    f9a8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	set_protected_absolute_alarm(cyc);
}
    f9ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f9ae:	bf00      	nop
    f9b0:	40015000 	.word	0x40015000
    f9b4:	007fffff 	.word	0x007fffff
    f9b8:	20020940 	.word	0x20020940
    f9bc:	40015140 	.word	0x40015140
    f9c0:	e000e100 	.word	0xe000e100

0000f9c4 <z_clock_elapsed>:
	__asm__ volatile(
    f9c4:	f04f 0220 	mov.w	r2, #32
    f9c8:	f3ef 8311 	mrs	r3, BASEPRI
    f9cc:	f382 8811 	msr	BASEPRI, r2
    f9d0:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    f9d4:	4a06      	ldr	r2, [pc, #24]	; (f9f0 <z_clock_elapsed+0x2c>)
    f9d6:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    f9da:	4a06      	ldr	r2, [pc, #24]	; (f9f4 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    f9dc:	6812      	ldr	r2, [r2, #0]
    f9de:	1a80      	subs	r0, r0, r2
    f9e0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    f9e4:	f383 8811 	msr	BASEPRI, r3
    f9e8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    f9ec:	4770      	bx	lr
    f9ee:	bf00      	nop
    f9f0:	40015000 	.word	0x40015000
    f9f4:	20020940 	.word	0x20020940

0000f9f8 <z_timer_cycle_get_32>:
	__asm__ volatile(
    f9f8:	f04f 0320 	mov.w	r3, #32
    f9fc:	f3ef 8211 	mrs	r2, BASEPRI
    fa00:	f383 8811 	msr	BASEPRI, r3
    fa04:	f3bf 8f6f 	isb	sy

uint32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    fa08:	4906      	ldr	r1, [pc, #24]	; (fa24 <z_timer_cycle_get_32+0x2c>)
    fa0a:	4b07      	ldr	r3, [pc, #28]	; (fa28 <z_timer_cycle_get_32+0x30>)
    fa0c:	6808      	ldr	r0, [r1, #0]
    fa0e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    fa12:	f382 8811 	msr	BASEPRI, r2
    fa16:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    fa1a:	1a1b      	subs	r3, r3, r0
    fa1c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    fa20:	4418      	add	r0, r3
    fa22:	4770      	bx	lr
    fa24:	20020940 	.word	0x20020940
    fa28:	40015000 	.word	0x40015000

0000fa2c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    fa2c:	4a09      	ldr	r2, [pc, #36]	; (fa54 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    fa2e:	490a      	ldr	r1, [pc, #40]	; (fa58 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    fa30:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    fa32:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    fa34:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
    fa36:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    fa38:	4908      	ldr	r1, [pc, #32]	; (fa5c <arch_swap+0x30>)
    fa3a:	684b      	ldr	r3, [r1, #4]
    fa3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    fa40:	604b      	str	r3, [r1, #4]
    fa42:	2300      	movs	r3, #0
    fa44:	f383 8811 	msr	BASEPRI, r3
    fa48:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    fa4c:	6893      	ldr	r3, [r2, #8]
}
    fa4e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    fa50:	4770      	bx	lr
    fa52:	bf00      	nop
    fa54:	200210b4 	.word	0x200210b4
    fa58:	000210b4 	.word	0x000210b4
    fa5c:	e000ed00 	.word	0xe000ed00

0000fa60 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    fa60:	4929      	ldr	r1, [pc, #164]	; (fb08 <in_fp_endif+0x2c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    fa62:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    fa64:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    fa68:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    fa6a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    fa6e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
    fa72:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    fa76:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
    fa7a:	d004      	beq.n	fa86 <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
    fa7c:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
    fa80:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
    fa84:	e007      	b.n	fa96 <out_fp_endif>

0000fa86 <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
    fa86:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vstmia r0, {s16-s31}
    fa8a:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
    fa8e:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
    fa92:	f050 0004 	orrs.w	r0, r0, #4

0000fa96 <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
    fa96:	f8c2 00c0 	str.w	r0, [r2, #192]	; 0xc0

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    fa9a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    fa9c:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    faa0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    faa4:	4f19      	ldr	r7, [pc, #100]	; (fb0c <in_fp_endif+0x30>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    faa6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    faaa:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    faac:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    faae:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    fab0:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    fab2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    fab4:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    fab6:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
    faba:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
    fabe:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
    fac2:	d105      	bne.n	fad0 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
    fac4:	2300      	movs	r3, #0
    vmsr fpscr, r3
    fac6:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    faca:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
    face:	e005      	b.n	fadc <in_fp_endif>

0000fad0 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
    fad0:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
    fad4:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vldmia r0, {s16-s31}
    fad8:	ec90 8a10 	vldmia	r0, {s16-s31}

0000fadc <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
    fadc:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
    fae0:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
    fae4:	f383 8814 	msr	CONTROL, r3
    isb
    fae8:	f3bf 8f6f 	isb	sy
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    faec:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    faf0:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    faf4:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    faf8:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    fafc:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    fafe:	f00e fbe6 	bl	1e2ce <configure_builtin_stack_guard>
    pop {r2, lr}
    fb02:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    fb06:	4770      	bx	lr
    ldr r1, =_kernel
    fb08:	200210b4 	.word	0x200210b4
    ldr v4, =_SCS_ICSR
    fb0c:	e000ed04 	.word	0xe000ed04

0000fb10 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    fb10:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    fb14:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    fb16:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    fb1a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    fb1e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    fb20:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    fb24:	2902      	cmp	r1, #2
    beq _oops
    fb26:	d0ff      	beq.n	fb28 <_oops>

0000fb28 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    fb28:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    fb2a:	f00e fbd4 	bl	1e2d6 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    fb2e:	bd01      	pop	{r0, pc}

0000fb30 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    fb30:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    fb32:	2b00      	cmp	r3, #0
    fb34:	db08      	blt.n	fb48 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    fb36:	2201      	movs	r2, #1
    fb38:	f000 001f 	and.w	r0, r0, #31
    fb3c:	fa02 f000 	lsl.w	r0, r2, r0
    fb40:	4a02      	ldr	r2, [pc, #8]	; (fb4c <arch_irq_enable+0x1c>)
    fb42:	095b      	lsrs	r3, r3, #5
    fb44:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    fb48:	4770      	bx	lr
    fb4a:	bf00      	nop
    fb4c:	e000e100 	.word	0xe000e100

0000fb50 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    fb50:	4b05      	ldr	r3, [pc, #20]	; (fb68 <arch_irq_is_enabled+0x18>)
    fb52:	0942      	lsrs	r2, r0, #5
    fb54:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    fb58:	2301      	movs	r3, #1
    fb5a:	f000 001f 	and.w	r0, r0, #31
    fb5e:	fa03 f000 	lsl.w	r0, r3, r0
}
    fb62:	4010      	ands	r0, r2
    fb64:	4770      	bx	lr
    fb66:	bf00      	nop
    fb68:	e000e100 	.word	0xe000e100

0000fb6c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    fb6c:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    fb6e:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    fb70:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fb74:	bfac      	ite	ge
    fb76:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fb7a:	4b06      	ldrlt	r3, [pc, #24]	; (fb94 <z_arm_irq_priority_set+0x28>)
    fb7c:	ea4f 1141 	mov.w	r1, r1, lsl #5
    fb80:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fb82:	bfab      	itete	ge
    fb84:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fb88:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fb8c:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fb90:	5419      	strblt	r1, [r3, r0]
}
    fb92:	4770      	bx	lr
    fb94:	e000ed14 	.word	0xe000ed14

0000fb98 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    fb98:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    fb9a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    fb9c:	4b04      	ldr	r3, [pc, #16]	; (fbb0 <_arch_isr_direct_pm+0x18>)
    fb9e:	6a18      	ldr	r0, [r3, #32]
    fba0:	b118      	cbz	r0, fbaa <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    fba2:	2200      	movs	r2, #0
    fba4:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
    fba6:	f010 f989 	bl	1febc <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    fbaa:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    fbac:	bd08      	pop	{r3, pc}
    fbae:	bf00      	nop
    fbb0:	200210b4 	.word	0x200210b4

0000fbb4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    fbb4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    fbb8:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    fbba:	490c      	ldr	r1, [pc, #48]	; (fbec <arch_new_thread+0x38>)
	iframe->a2 = (uint32_t)p1;
    fbbc:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    fbc0:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    fbc2:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    fbc6:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    fbca:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    fbcc:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    fbd0:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    fbd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    fbd8:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    fbdc:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    fbde:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    fbe0:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
    fbe2:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FPU_SHARING)
	thread->arch.mode = 0;
    fbe4:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    fbe8:	4770      	bx	lr
    fbea:	bf00      	nop
    fbec:	0001d481 	.word	0x0001d481

0000fbf0 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    fbf0:	b508      	push	{r3, lr}
    fbf2:	4604      	mov	r4, r0
    fbf4:	460e      	mov	r6, r1
    fbf6:	4615      	mov	r5, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    fbf8:	2300      	movs	r3, #0
    fbfa:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    fbfe:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    fc02:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    fc06:	f383 8814 	msr	CONTROL, r3
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
    fc0a:	f3bf 8f6f 	isb	sy
	z_arm_configure_static_mpu_regions();
    fc0e:	f000 fb8f 	bl	10330 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    fc12:	4b09      	ldr	r3, [pc, #36]	; (fc38 <arch_switch_to_main_thread+0x48>)
    fc14:	609c      	str	r4, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    fc16:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    fc18:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    fc1c:	4628      	mov	r0, r5
    fc1e:	f386 8809 	msr	PSP, r6
    fc22:	2100      	movs	r1, #0
    fc24:	b663      	cpsie	if
    fc26:	f381 8811 	msr	BASEPRI, r1
    fc2a:	f3bf 8f6f 	isb	sy
    fc2e:	2200      	movs	r2, #0
    fc30:	2300      	movs	r3, #0
    fc32:	f00d fc25 	bl	1d480 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    fc36:	bf00      	nop
    fc38:	200210b4 	.word	0x200210b4

0000fc3c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    fc3c:	4901      	ldr	r1, [pc, #4]	; (fc44 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    fc3e:	2210      	movs	r2, #16
	str	r2, [r1]
    fc40:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    fc42:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    fc44:	e000ed10 	.word	0xe000ed10

0000fc48 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    fc48:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    fc4a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    fc4c:	f380 8811 	msr	BASEPRI, r0
	isb
    fc50:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    fc54:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    fc58:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    fc5a:	b662      	cpsie	i
	isb
    fc5c:	f3bf 8f6f 	isb	sy

	bx	lr
    fc60:	4770      	bx	lr
    fc62:	bf00      	nop

0000fc64 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    fc64:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    fc66:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    fc68:	f381 8811 	msr	BASEPRI, r1

	wfe
    fc6c:	bf20      	wfe

	msr	BASEPRI, r0
    fc6e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    fc72:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    fc74:	4770      	bx	lr
    fc76:	bf00      	nop

0000fc78 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    fc78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fc7c:	4606      	mov	r6, r0

	if (esf != NULL) {
    fc7e:	460d      	mov	r5, r1
{
    fc80:	b08b      	sub	sp, #44	; 0x2c
	if (esf != NULL) {
    fc82:	2900      	cmp	r1, #0
    fc84:	d054      	beq.n	fd30 <z_arm_fatal_error+0xb8>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    fc86:	4b2e      	ldr	r3, [pc, #184]	; (fd40 <z_arm_fatal_error+0xc8>)
    fc88:	4c2e      	ldr	r4, [pc, #184]	; (fd44 <z_arm_fatal_error+0xcc>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    fc8a:	482f      	ldr	r0, [pc, #188]	; (fd48 <z_arm_fatal_error+0xd0>)
    fc8c:	1ae4      	subs	r4, r4, r3
    fc8e:	08e4      	lsrs	r4, r4, #3
    fc90:	01a4      	lsls	r4, r4, #6
    fc92:	f044 0401 	orr.w	r4, r4, #1
    fc96:	f8ad 4000 	strh.w	r4, [sp]
    fc9a:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    fc9e:	6809      	ldr	r1, [r1, #0]
    fca0:	f00d ff45 	bl	1db2e <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    fca4:	f8ad 4000 	strh.w	r4, [sp]
    fca8:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
    fcac:	68e9      	ldr	r1, [r5, #12]
    fcae:	4827      	ldr	r0, [pc, #156]	; (fd4c <z_arm_fatal_error+0xd4>)
    fcb0:	f00d ff3d 	bl	1db2e <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    fcb4:	4622      	mov	r2, r4
    fcb6:	69e9      	ldr	r1, [r5, #28]
    fcb8:	4825      	ldr	r0, [pc, #148]	; (fd50 <z_arm_fatal_error+0xd8>)
    fcba:	f00d ff08 	bl	1dace <log_1>
	for (int i = 0; i < 16; i += 4) {
    fcbe:	46a8      	mov	r8, r5
    fcc0:	2700      	movs	r7, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    fcc2:	f8df 9098 	ldr.w	r9, [pc, #152]	; fd5c <z_arm_fatal_error+0xe4>
    fcc6:	edd8 7a08 	vldr	s15, [r8, #32]
    fcca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    fcce:	edcd 7a03 	vstr	s15, [sp, #12]
    fcd2:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
    fcd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    fcda:	edcd 7a05 	vstr	s15, [sp, #20]
    fcde:	edd8 7a0a 	vldr	s15, [r8, #40]	; 0x28
    fce2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    fce6:	edcd 7a07 	vstr	s15, [sp, #28]
    fcea:	edd8 7a0b 	vldr	s15, [r8, #44]	; 0x2c
    fcee:	2208      	movs	r2, #8
    fcf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    fcf4:	1c7b      	adds	r3, r7, #1
    fcf6:	9304      	str	r3, [sp, #16]
    fcf8:	1cbb      	adds	r3, r7, #2
    fcfa:	9306      	str	r3, [sp, #24]
    fcfc:	1cfb      	adds	r3, r7, #3
    fcfe:	9702      	str	r7, [sp, #8]
    fd00:	9308      	str	r3, [sp, #32]
    fd02:	4648      	mov	r0, r9
    fd04:	4623      	mov	r3, r4
    fd06:	eb0d 0102 	add.w	r1, sp, r2
	for (int i = 0; i < 16; i += 4) {
    fd0a:	3704      	adds	r7, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    fd0c:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
    fd10:	f00d ff2c 	bl	1db6c <log_n>
	for (int i = 0; i < 16; i += 4) {
    fd14:	2f10      	cmp	r7, #16
    fd16:	f108 0810 	add.w	r8, r8, #16
    fd1a:	d1d4      	bne.n	fcc6 <z_arm_fatal_error+0x4e>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
    fd1c:	4622      	mov	r2, r4
    fd1e:	6e29      	ldr	r1, [r5, #96]	; 0x60
    fd20:	480c      	ldr	r0, [pc, #48]	; (fd54 <z_arm_fatal_error+0xdc>)
    fd22:	f00d fed4 	bl	1dace <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    fd26:	4622      	mov	r2, r4
    fd28:	69a9      	ldr	r1, [r5, #24]
    fd2a:	480b      	ldr	r0, [pc, #44]	; (fd58 <z_arm_fatal_error+0xe0>)
    fd2c:	f00d fecf 	bl	1dace <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    fd30:	4629      	mov	r1, r5
    fd32:	4630      	mov	r0, r6
    fd34:	f00b ffbe 	bl	1bcb4 <z_fatal_error>
}
    fd38:	b00b      	add	sp, #44	; 0x2c
    fd3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    fd3e:	bf00      	nop
    fd40:	00020a64 	.word	0x00020a64
    fd44:	00020abc 	.word	0x00020abc
    fd48:	000217a8 	.word	0x000217a8
    fd4c:	000217d7 	.word	0x000217d7
    fd50:	00021806 	.word	0x00021806
    fd54:	00021858 	.word	0x00021858
    fd58:	00021867 	.word	0x00021867
    fd5c:	00021815 	.word	0x00021815

0000fd60 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    fd60:	bf30      	wfi
    b z_SysNmiOnReset
    fd62:	f7ff bffd 	b.w	fd60 <z_SysNmiOnReset>
    fd66:	bf00      	nop

0000fd68 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    fd68:	4a14      	ldr	r2, [pc, #80]	; (fdbc <z_arm_prep_c+0x54>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    fd6a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    fd6c:	4b14      	ldr	r3, [pc, #80]	; (fdc0 <z_arm_prep_c+0x58>)
    fd6e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    fd72:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    fd74:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    fd78:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    fd7c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    fd80:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    fd84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    fd88:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    fd8c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    fd90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
    fd94:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    fd98:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
    fd9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    fda0:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    fda4:	2300      	movs	r3, #0
    fda6:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    fdaa:	f00c f801 	bl	1bdb0 <z_bss_zero>
	z_data_copy();
    fdae:	f00c f809 	bl	1bdc4 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    fdb2:	f000 fa85 	bl	102c0 <z_arm_interrupt_init>
	z_cstart();
    fdb6:	f00c f843 	bl	1be40 <z_cstart>
    fdba:	bf00      	nop
    fdbc:	0000c000 	.word	0x0000c000
    fdc0:	e000ed00 	.word	0xe000ed00

0000fdc4 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    fdc4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    fdc6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    fdc8:	4a0b      	ldr	r2, [pc, #44]	; (fdf8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    fdca:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    fdcc:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    fdce:	bf1e      	ittt	ne
	movne	r1, #0
    fdd0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    fdd2:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    fdd4:	f010 f872 	blne	1febc <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    fdd8:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    fdda:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    fdde:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    fde2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    fde6:	4905      	ldr	r1, [pc, #20]	; (fdfc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    fde8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    fdea:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    fdec:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    fdee:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    fdf2:	4903      	ldr	r1, [pc, #12]	; (fe00 <_isr_wrapper+0x3c>)
	bx r1
    fdf4:	4708      	bx	r1
    fdf6:	0000      	.short	0x0000
	ldr r2, =_kernel
    fdf8:	200210b4 	.word	0x200210b4
	ldr r1, =_sw_isr_table
    fdfc:	00020850 	.word	0x00020850
	ldr r1, =z_arm_int_exit
    fe00:	00010281 	.word	0x00010281

0000fe04 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    fe04:	f00d fe0f 	bl	1da26 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    fe08:	2020      	movs	r0, #32
    msr BASEPRI, r0
    fe0a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    fe0e:	4808      	ldr	r0, [pc, #32]	; (fe30 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    fe10:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    fe14:	1840      	adds	r0, r0, r1
    msr PSP, r0
    fe16:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    fe1a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    fe1e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    fe20:	4308      	orrs	r0, r1
    msr CONTROL, r0
    fe22:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    fe26:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    fe2a:	f7ff ff9d 	bl	fd68 <z_arm_prep_c>
    fe2e:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    fe30:	200260d0 	.word	0x200260d0

0000fe34 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    fe34:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    fe38:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    fe3c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    fe3e:	4672      	mov	r2, lr
	bl z_arm_fault
    fe40:	f000 f93e 	bl	100c0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    fe44:	bd01      	pop	{r0, pc}
    fe46:	bf00      	nop

0000fe48 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    fe48:	b570      	push	{r4, r5, r6, lr}
    fe4a:	4b28      	ldr	r3, [pc, #160]	; (feec <usage_fault.isra.0+0xa4>)
    fe4c:	4c28      	ldr	r4, [pc, #160]	; (fef0 <usage_fault.isra.0+0xa8>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    fe4e:	4d29      	ldr	r5, [pc, #164]	; (fef4 <usage_fault.isra.0+0xac>)
    fe50:	1ae4      	subs	r4, r4, r3
    fe52:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** USAGE FAULT *****");
    fe54:	01a4      	lsls	r4, r4, #6
    fe56:	f044 0601 	orr.w	r6, r4, #1
    fe5a:	4631      	mov	r1, r6
    fe5c:	4826      	ldr	r0, [pc, #152]	; (fef8 <usage_fault.isra.0+0xb0>)
    fe5e:	f00d fe27 	bl	1dab0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    fe62:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    fe64:	0193      	lsls	r3, r2, #6
    fe66:	d503      	bpl.n	fe70 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    fe68:	4631      	mov	r1, r6
    fe6a:	4824      	ldr	r0, [pc, #144]	; (fefc <usage_fault.isra.0+0xb4>)
    fe6c:	f00d fe20 	bl	1dab0 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    fe70:	6aab      	ldr	r3, [r5, #40]	; 0x28
    fe72:	01dd      	lsls	r5, r3, #7
    fe74:	d504      	bpl.n	fe80 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    fe76:	4822      	ldr	r0, [pc, #136]	; (ff00 <usage_fault.isra.0+0xb8>)
    fe78:	f044 0101 	orr.w	r1, r4, #1
    fe7c:	f00d fe18 	bl	1dab0 <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    fe80:	4d1c      	ldr	r5, [pc, #112]	; (fef4 <usage_fault.isra.0+0xac>)
    fe82:	6aae      	ldr	r6, [r5, #40]	; 0x28
    fe84:	f416 1680 	ands.w	r6, r6, #1048576	; 0x100000
    fe88:	d005      	beq.n	fe96 <usage_fault.isra.0+0x4e>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    fe8a:	481e      	ldr	r0, [pc, #120]	; (ff04 <usage_fault.isra.0+0xbc>)
    fe8c:	f044 0101 	orr.w	r1, r4, #1
    fe90:	f00d fe0e 	bl	1dab0 <log_0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    fe94:	2602      	movs	r6, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    fe96:	6aab      	ldr	r3, [r5, #40]	; 0x28
    fe98:	0318      	lsls	r0, r3, #12
    fe9a:	d504      	bpl.n	fea6 <usage_fault.isra.0+0x5e>
		PR_FAULT_INFO("  No coprocessor instructions");
    fe9c:	481a      	ldr	r0, [pc, #104]	; (ff08 <usage_fault.isra.0+0xc0>)
    fe9e:	f044 0101 	orr.w	r1, r4, #1
    fea2:	f00d fe05 	bl	1dab0 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    fea6:	4d13      	ldr	r5, [pc, #76]	; (fef4 <usage_fault.isra.0+0xac>)
    fea8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    feaa:	0351      	lsls	r1, r2, #13
    feac:	d504      	bpl.n	feb8 <usage_fault.isra.0+0x70>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    feae:	4817      	ldr	r0, [pc, #92]	; (ff0c <usage_fault.isra.0+0xc4>)
    feb0:	f044 0101 	orr.w	r1, r4, #1
    feb4:	f00d fdfc 	bl	1dab0 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    feb8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    feba:	039a      	lsls	r2, r3, #14
    febc:	d504      	bpl.n	fec8 <usage_fault.isra.0+0x80>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    febe:	4814      	ldr	r0, [pc, #80]	; (ff10 <usage_fault.isra.0+0xc8>)
    fec0:	f044 0101 	orr.w	r1, r4, #1
    fec4:	f00d fdf4 	bl	1dab0 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    fec8:	4d0a      	ldr	r5, [pc, #40]	; (fef4 <usage_fault.isra.0+0xac>)
    feca:	6aab      	ldr	r3, [r5, #40]	; 0x28
    fecc:	03db      	lsls	r3, r3, #15
    fece:	d504      	bpl.n	feda <usage_fault.isra.0+0x92>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    fed0:	4810      	ldr	r0, [pc, #64]	; (ff14 <usage_fault.isra.0+0xcc>)
    fed2:	f044 0101 	orr.w	r1, r4, #1
    fed6:	f00d fdeb 	bl	1dab0 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    feda:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    fedc:	4630      	mov	r0, r6
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    fede:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    fee2:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    fee6:	62ab      	str	r3, [r5, #40]	; 0x28
}
    fee8:	bd70      	pop	{r4, r5, r6, pc}
    feea:	bf00      	nop
    feec:	00020a64 	.word	0x00020a64
    fef0:	00020abc 	.word	0x00020abc
    fef4:	e000ed00 	.word	0xe000ed00
    fef8:	00021895 	.word	0x00021895
    fefc:	000218ad 	.word	0x000218ad
    ff00:	000218c0 	.word	0x000218c0
    ff04:	000218da 	.word	0x000218da
    ff08:	00021904 	.word	0x00021904
    ff0c:	00021922 	.word	0x00021922
    ff10:	00021947 	.word	0x00021947
    ff14:	00021961 	.word	0x00021961

0000ff18 <mem_manage_fault.isra.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    ff18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ff1c:	4b27      	ldr	r3, [pc, #156]	; (ffbc <mem_manage_fault.isra.0+0xa4>)
    ff1e:	4c28      	ldr	r4, [pc, #160]	; (ffc0 <mem_manage_fault.isra.0+0xa8>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    ff20:	4d28      	ldr	r5, [pc, #160]	; (ffc4 <mem_manage_fault.isra.0+0xac>)
    ff22:	1ae4      	subs	r4, r4, r3
    ff24:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    ff26:	01a4      	lsls	r4, r4, #6
    ff28:	f044 0801 	orr.w	r8, r4, #1
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    ff2c:	4607      	mov	r7, r0
    ff2e:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    ff30:	4825      	ldr	r0, [pc, #148]	; (ffc8 <mem_manage_fault.isra.0+0xb0>)
    ff32:	4641      	mov	r1, r8
    ff34:	f00d fdbc 	bl	1dab0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    ff38:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    ff3a:	06d1      	lsls	r1, r2, #27
    ff3c:	d503      	bpl.n	ff46 <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    ff3e:	4641      	mov	r1, r8
    ff40:	4822      	ldr	r0, [pc, #136]	; (ffcc <mem_manage_fault.isra.0+0xb4>)
    ff42:	f00d fdb5 	bl	1dab0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    ff46:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ff48:	071a      	lsls	r2, r3, #28
    ff4a:	d504      	bpl.n	ff56 <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    ff4c:	4820      	ldr	r0, [pc, #128]	; (ffd0 <mem_manage_fault.isra.0+0xb8>)
    ff4e:	f044 0101 	orr.w	r1, r4, #1
    ff52:	f00d fdad 	bl	1dab0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    ff56:	4d1b      	ldr	r5, [pc, #108]	; (ffc4 <mem_manage_fault.isra.0+0xac>)
    ff58:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ff5a:	079b      	lsls	r3, r3, #30
    ff5c:	d512      	bpl.n	ff84 <mem_manage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
    ff5e:	f044 0801 	orr.w	r8, r4, #1
    ff62:	4641      	mov	r1, r8
    ff64:	481b      	ldr	r0, [pc, #108]	; (ffd4 <mem_manage_fault.isra.0+0xbc>)
    ff66:	f00d fda3 	bl	1dab0 <log_0>
		mmfar = SCB->MMFAR;
    ff6a:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    ff6c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ff6e:	0618      	lsls	r0, r3, #24
    ff70:	d508      	bpl.n	ff84 <mem_manage_fault.isra.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    ff72:	4642      	mov	r2, r8
    ff74:	4818      	ldr	r0, [pc, #96]	; (ffd8 <mem_manage_fault.isra.0+0xc0>)
    ff76:	f00d fdaa 	bl	1dace <log_1>
			if (from_hard_fault) {
    ff7a:	b11f      	cbz	r7, ff84 <mem_manage_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    ff7c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ff7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    ff82:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    ff84:	4d0f      	ldr	r5, [pc, #60]	; (ffc4 <mem_manage_fault.isra.0+0xac>)
    ff86:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    ff88:	07d2      	lsls	r2, r2, #31
    ff8a:	d504      	bpl.n	ff96 <mem_manage_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
    ff8c:	4813      	ldr	r0, [pc, #76]	; (ffdc <mem_manage_fault.isra.0+0xc4>)
    ff8e:	f044 0101 	orr.w	r1, r4, #1
    ff92:	f00d fd8d 	bl	1dab0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    ff96:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ff98:	069b      	lsls	r3, r3, #26
    ff9a:	d504      	bpl.n	ffa6 <mem_manage_fault.isra.0+0x8e>
		PR_FAULT_INFO(
    ff9c:	4810      	ldr	r0, [pc, #64]	; (ffe0 <mem_manage_fault.isra.0+0xc8>)
    ff9e:	f044 0101 	orr.w	r1, r4, #1
    ffa2:	f00d fd85 	bl	1dab0 <log_0>
	*recoverable = memory_fault_recoverable(esf);
    ffa6:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    ffa8:	4b06      	ldr	r3, [pc, #24]	; (ffc4 <mem_manage_fault.isra.0+0xac>)
    ffaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    ffac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    ffae:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    ffb2:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    ffb4:	7030      	strb	r0, [r6, #0]
}
    ffb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ffba:	bf00      	nop
    ffbc:	00020a64 	.word	0x00020a64
    ffc0:	00020abc 	.word	0x00020abc
    ffc4:	e000ed00 	.word	0xe000ed00
    ffc8:	0002198c 	.word	0x0002198c
    ffcc:	000219a2 	.word	0x000219a2
    ffd0:	000219d5 	.word	0x000219d5
    ffd4:	000219e8 	.word	0x000219e8
    ffd8:	00021a00 	.word	0x00021a00
    ffdc:	00021a16 	.word	0x00021a16
    ffe0:	00021a35 	.word	0x00021a35

0000ffe4 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    ffe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ffe8:	4b2a      	ldr	r3, [pc, #168]	; (10094 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x94>)
    ffea:	4c2b      	ldr	r4, [pc, #172]	; (10098 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x98>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    ffec:	4d2b      	ldr	r5, [pc, #172]	; (1009c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x9c>)
    ffee:	1ae4      	subs	r4, r4, r3
    fff0:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    fff2:	01a4      	lsls	r4, r4, #6
    fff4:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    fff8:	4607      	mov	r7, r0
    fffa:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    fffc:	4828      	ldr	r0, [pc, #160]	; (100a0 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xa0>)
    fffe:	4641      	mov	r1, r8
   10000:	f00d fd56 	bl	1dab0 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   10004:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   10006:	04d1      	lsls	r1, r2, #19
   10008:	d503      	bpl.n	10012 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x12>
		PR_FAULT_INFO("  Stacking error");
   1000a:	4641      	mov	r1, r8
   1000c:	4825      	ldr	r0, [pc, #148]	; (100a4 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xa4>)
   1000e:	f00d fd4f 	bl	1dab0 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   10012:	6aab      	ldr	r3, [r5, #40]	; 0x28
   10014:	051a      	lsls	r2, r3, #20
   10016:	d504      	bpl.n	10022 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x22>
		PR_FAULT_INFO("  Unstacking error");
   10018:	4823      	ldr	r0, [pc, #140]	; (100a8 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xa8>)
   1001a:	f044 0101 	orr.w	r1, r4, #1
   1001e:	f00d fd47 	bl	1dab0 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   10022:	4d1e      	ldr	r5, [pc, #120]	; (1009c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x9c>)
   10024:	6aab      	ldr	r3, [r5, #40]	; 0x28
   10026:	059b      	lsls	r3, r3, #22
   10028:	d512      	bpl.n	10050 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x50>
		PR_FAULT_INFO("  Precise data bus error");
   1002a:	f044 0801 	orr.w	r8, r4, #1
   1002e:	4641      	mov	r1, r8
   10030:	481e      	ldr	r0, [pc, #120]	; (100ac <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xac>)
   10032:	f00d fd3d 	bl	1dab0 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   10036:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   10038:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1003a:	0418      	lsls	r0, r3, #16
   1003c:	d508      	bpl.n	10050 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x50>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   1003e:	4642      	mov	r2, r8
   10040:	481b      	ldr	r0, [pc, #108]	; (100b0 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xb0>)
   10042:	f00d fd44 	bl	1dace <log_1>
			if (from_hard_fault) {
   10046:	b11f      	cbz	r7, 10050 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x50>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   10048:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1004a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   1004e:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   10050:	4d12      	ldr	r5, [pc, #72]	; (1009c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x9c>)
   10052:	6aab      	ldr	r3, [r5, #40]	; 0x28
   10054:	0559      	lsls	r1, r3, #21
   10056:	d504      	bpl.n	10062 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x62>
		PR_FAULT_INFO("  Imprecise data bus error");
   10058:	4816      	ldr	r0, [pc, #88]	; (100b4 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xb4>)
   1005a:	f044 0101 	orr.w	r1, r4, #1
   1005e:	f00d fd27 	bl	1dab0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   10062:	6aab      	ldr	r3, [r5, #40]	; 0x28
   10064:	05da      	lsls	r2, r3, #23
   10066:	d50d      	bpl.n	10084 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x84>
		PR_FAULT_INFO("  Instruction bus error");
   10068:	4813      	ldr	r0, [pc, #76]	; (100b8 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xb8>)
   1006a:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1006e:	f00d fd1f 	bl	1dab0 <log_0>
	*recoverable = memory_fault_recoverable(esf);
   10072:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   10074:	4a09      	ldr	r2, [pc, #36]	; (1009c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x9c>)
   10076:	6a93      	ldr	r3, [r2, #40]	; 0x28
   10078:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   1007c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   1007e:	7030      	strb	r0, [r6, #0]
}
   10080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   10084:	6aab      	ldr	r3, [r5, #40]	; 0x28
   10086:	049b      	lsls	r3, r3, #18
   10088:	d5f3      	bpl.n	10072 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x72>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1008a:	480c      	ldr	r0, [pc, #48]	; (100bc <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xbc>)
   1008c:	f044 0101 	orr.w	r1, r4, #1
   10090:	e7ed      	b.n	1006e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x6e>
   10092:	bf00      	nop
   10094:	00020a64 	.word	0x00020a64
   10098:	00020abc 	.word	0x00020abc
   1009c:	e000ed00 	.word	0xe000ed00
   100a0:	00021a64 	.word	0x00021a64
   100a4:	00021a7a 	.word	0x00021a7a
   100a8:	000219d5 	.word	0x000219d5
   100ac:	00021a8b 	.word	0x00021a8b
   100b0:	00021aa4 	.word	0x00021aa4
   100b4:	00021ab9 	.word	0x00021ab9
   100b8:	00021ad4 	.word	0x00021ad4
   100bc:	00021a35 	.word	0x00021a35

000100c0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   100c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   100c4:	4b5a      	ldr	r3, [pc, #360]	; (10230 <z_arm_fault+0x170>)
{
   100c6:	4681      	mov	r9, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   100c8:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   100cc:	460f      	mov	r7, r1
   100ce:	4614      	mov	r4, r2
   100d0:	2500      	movs	r5, #0
   100d2:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   100d4:	f3c8 0608 	ubfx	r6, r8, #0, #9
   100d8:	f385 8811 	msr	BASEPRI, r5
   100dc:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   100e0:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   100e4:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   100e8:	d123      	bne.n	10132 <z_arm_fault+0x72>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   100ea:	07d0      	lsls	r0, r2, #31
   100ec:	d421      	bmi.n	10132 <z_arm_fault+0x72>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   100ee:	0651      	lsls	r1, r2, #25
   100f0:	d403      	bmi.n	100fa <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   100f2:	0722      	lsls	r2, r4, #28
   100f4:	d40e      	bmi.n	10114 <z_arm_fault+0x54>
			*nested_exc = true;
   100f6:	2501      	movs	r5, #1
   100f8:	e00e      	b.n	10118 <z_arm_fault+0x58>
   100fa:	494e      	ldr	r1, [pc, #312]	; (10234 <z_arm_fault+0x174>)
   100fc:	4b4e      	ldr	r3, [pc, #312]	; (10238 <z_arm_fault+0x178>)
		PR_FAULT_INFO("Exception occurred in Secure State");
   100fe:	484f      	ldr	r0, [pc, #316]	; (1023c <z_arm_fault+0x17c>)
   10100:	1a5b      	subs	r3, r3, r1
   10102:	08db      	lsrs	r3, r3, #3
   10104:	019b      	lsls	r3, r3, #6
   10106:	f043 0101 	orr.w	r1, r3, #1
   1010a:	f00d fcd1 	bl	1dab0 <log_0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   1010e:	f014 0504 	ands.w	r5, r4, #4
   10112:	d001      	beq.n	10118 <z_arm_fault+0x58>
			ptr_esf = (z_arch_esf_t *)psp;
   10114:	46b9      	mov	r9, r7
	*nested_exc = false;
   10116:	2500      	movs	r5, #0
	*recoverable = false;
   10118:	2300      	movs	r3, #0
   1011a:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   1011e:	1ef3      	subs	r3, r6, #3
   10120:	2b09      	cmp	r3, #9
   10122:	d86c      	bhi.n	101fe <z_arm_fault+0x13e>
   10124:	e8df f003 	tbb	[pc, r3]
   10128:	3e5e5a07 	.word	0x3e5e5a07
   1012c:	6b6b6b6b 	.word	0x6b6b6b6b
   10130:	626b      	.short	0x626b
		return NULL;
   10132:	46a9      	mov	r9, r5
   10134:	e7f0      	b.n	10118 <z_arm_fault+0x58>
	*recoverable = false;
   10136:	f04f 0800 	mov.w	r8, #0
   1013a:	4b3e      	ldr	r3, [pc, #248]	; (10234 <z_arm_fault+0x174>)
   1013c:	4e3e      	ldr	r6, [pc, #248]	; (10238 <z_arm_fault+0x178>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   1013e:	4840      	ldr	r0, [pc, #256]	; (10240 <z_arm_fault+0x180>)
   10140:	1af6      	subs	r6, r6, r3
   10142:	08f6      	lsrs	r6, r6, #3
   10144:	01b6      	lsls	r6, r6, #6
   10146:	f046 0601 	orr.w	r6, r6, #1
   1014a:	4631      	mov	r1, r6
   1014c:	f00d fcb0 	bl	1dab0 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   10150:	4b37      	ldr	r3, [pc, #220]	; (10230 <z_arm_fault+0x170>)
	*recoverable = false;
   10152:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   10156:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   10158:	f014 0402 	ands.w	r4, r4, #2
   1015c:	d005      	beq.n	1016a <z_arm_fault+0xaa>
		PR_EXC("  Bus fault on vector table read");
   1015e:	4631      	mov	r1, r6
   10160:	4838      	ldr	r0, [pc, #224]	; (10244 <z_arm_fault+0x184>)
	PR_FAULT_INFO(
   10162:	f00d fca5 	bl	1dab0 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   10166:	2400      	movs	r4, #0
}
   10168:	e01f      	b.n	101aa <z_arm_fault+0xea>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   1016a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1016c:	005b      	lsls	r3, r3, #1
   1016e:	d51c      	bpl.n	101aa <z_arm_fault+0xea>
		PR_EXC("  Fault escalation (see below)");
   10170:	4631      	mov	r1, r6
   10172:	4835      	ldr	r0, [pc, #212]	; (10248 <z_arm_fault+0x188>)
   10174:	f00d fc9c 	bl	1dab0 <log_0>
		if (SCB_MMFSR != 0) {
   10178:	4b34      	ldr	r3, [pc, #208]	; (1024c <z_arm_fault+0x18c>)
   1017a:	781b      	ldrb	r3, [r3, #0]
   1017c:	b12b      	cbz	r3, 1018a <z_arm_fault+0xca>
			reason = mem_manage_fault(esf, 1, recoverable);
   1017e:	2001      	movs	r0, #1
   10180:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   10184:	f7ff fec8 	bl	ff18 <mem_manage_fault.isra.0>
   10188:	e00e      	b.n	101a8 <z_arm_fault+0xe8>
		} else if (SCB_BFSR != 0) {
   1018a:	4b31      	ldr	r3, [pc, #196]	; (10250 <z_arm_fault+0x190>)
   1018c:	781b      	ldrb	r3, [r3, #0]
   1018e:	b12b      	cbz	r3, 1019c <z_arm_fault+0xdc>
			reason = bus_fault(esf, 1, recoverable);
   10190:	2001      	movs	r0, #1
   10192:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   10196:	f7ff ff25 	bl	ffe4 <bus_fault.isra.0>
   1019a:	e005      	b.n	101a8 <z_arm_fault+0xe8>
		} else if (SCB_UFSR != 0) {
   1019c:	4b2d      	ldr	r3, [pc, #180]	; (10254 <z_arm_fault+0x194>)
   1019e:	881b      	ldrh	r3, [r3, #0]
   101a0:	b29b      	uxth	r3, r3
   101a2:	b113      	cbz	r3, 101aa <z_arm_fault+0xea>
			reason = usage_fault(esf);
   101a4:	f7ff fe50 	bl	fe48 <usage_fault.isra.0>
   101a8:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   101aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   101ae:	b993      	cbnz	r3, 101d6 <z_arm_fault+0x116>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   101b0:	2268      	movs	r2, #104	; 0x68
   101b2:	4649      	mov	r1, r9
   101b4:	a802      	add	r0, sp, #8
   101b6:	f00e fa4c 	bl	1e652 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   101ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
   101bc:	b39d      	cbz	r5, 10226 <z_arm_fault+0x166>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   101be:	f3c3 0208 	ubfx	r2, r3, #0, #9
   101c2:	b922      	cbnz	r2, 101ce <z_arm_fault+0x10e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   101c4:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   101c8:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   101cc:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   101ce:	4620      	mov	r0, r4
   101d0:	a902      	add	r1, sp, #8
   101d2:	f7ff fd51 	bl	fc78 <z_arm_fatal_error>
}
   101d6:	b01d      	add	sp, #116	; 0x74
   101d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   101dc:	2000      	movs	r0, #0
   101de:	f10d 0107 	add.w	r1, sp, #7
   101e2:	e7cf      	b.n	10184 <z_arm_fault+0xc4>
		reason = bus_fault(esf, 0, recoverable);
   101e4:	2000      	movs	r0, #0
   101e6:	f10d 0107 	add.w	r1, sp, #7
   101ea:	e7d4      	b.n	10196 <z_arm_fault+0xd6>
   101ec:	4912      	ldr	r1, [pc, #72]	; (10238 <z_arm_fault+0x178>)
   101ee:	4b11      	ldr	r3, [pc, #68]	; (10234 <z_arm_fault+0x174>)
	PR_FAULT_INFO(
   101f0:	4819      	ldr	r0, [pc, #100]	; (10258 <z_arm_fault+0x198>)
   101f2:	1ac9      	subs	r1, r1, r3
   101f4:	08c9      	lsrs	r1, r1, #3
   101f6:	0189      	lsls	r1, r1, #6
   101f8:	f041 0101 	orr.w	r1, r1, #1
   101fc:	e7b1      	b.n	10162 <z_arm_fault+0xa2>
   101fe:	4a0d      	ldr	r2, [pc, #52]	; (10234 <z_arm_fault+0x174>)
   10200:	4b0d      	ldr	r3, [pc, #52]	; (10238 <z_arm_fault+0x178>)
	PR_FAULT_INFO("***** %s %d) *****",
   10202:	4816      	ldr	r0, [pc, #88]	; (1025c <z_arm_fault+0x19c>)
   10204:	1a9b      	subs	r3, r3, r2
   10206:	08db      	lsrs	r3, r3, #3
   10208:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   1020c:	ea4f 1383 	mov.w	r3, r3, lsl #6
   10210:	4913      	ldr	r1, [pc, #76]	; (10260 <z_arm_fault+0x1a0>)
   10212:	f043 0301 	orr.w	r3, r3, #1
   10216:	bf18      	it	ne
   10218:	4601      	movne	r1, r0
   1021a:	f1a6 0210 	sub.w	r2, r6, #16
   1021e:	4811      	ldr	r0, [pc, #68]	; (10264 <z_arm_fault+0x1a4>)
   10220:	f00d fc6c 	bl	1dafc <log_2>
   10224:	e79f      	b.n	10166 <z_arm_fault+0xa6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   10226:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   1022a:	f023 0301 	bic.w	r3, r3, #1
   1022e:	e7cd      	b.n	101cc <z_arm_fault+0x10c>
   10230:	e000ed00 	.word	0xe000ed00
   10234:	00020a64 	.word	0x00020a64
   10238:	00020abc 	.word	0x00020abc
   1023c:	00021aec 	.word	0x00021aec
   10240:	00021b0f 	.word	0x00021b0f
   10244:	00021b26 	.word	0x00021b26
   10248:	00021b47 	.word	0x00021b47
   1024c:	e000ed28 	.word	0xe000ed28
   10250:	e000ed29 	.word	0xe000ed29
   10254:	e000ed2a 	.word	0xe000ed2a
   10258:	00021b66 	.word	0x00021b66
   1025c:	00021bb1 	.word	0x00021bb1
   10260:	00021b9c 	.word	0x00021b9c
   10264:	00021bca 	.word	0x00021bca

00010268 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   10268:	4b04      	ldr	r3, [pc, #16]	; (1027c <z_arm_fault_init+0x14>)
   1026a:	695a      	ldr	r2, [r3, #20]
   1026c:	f042 0210 	orr.w	r2, r2, #16
   10270:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   10272:	695a      	ldr	r2, [r3, #20]
   10274:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   10278:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   1027a:	4770      	bx	lr
   1027c:	e000ed00 	.word	0xe000ed00

00010280 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   10280:	4b04      	ldr	r3, [pc, #16]	; (10294 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   10282:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   10284:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
   10286:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   10288:	d003      	beq.n	10292 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   1028a:	4903      	ldr	r1, [pc, #12]	; (10298 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   1028c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   10290:	600a      	str	r2, [r1, #0]

00010292 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   10292:	4770      	bx	lr
	ldr r3, =_kernel
   10294:	200210b4 	.word	0x200210b4
	ldr r1, =_SCS_ICSR
   10298:	e000ed04 	.word	0xe000ed04

0001029c <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   1029c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   102a0:	4905      	ldr	r1, [pc, #20]	; (102b8 <sys_arch_reboot+0x1c>)
   102a2:	4b06      	ldr	r3, [pc, #24]	; (102bc <sys_arch_reboot+0x20>)
   102a4:	68ca      	ldr	r2, [r1, #12]
   102a6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   102aa:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   102ac:	60cb      	str	r3, [r1, #12]
   102ae:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   102b2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   102b4:	e7fd      	b.n	102b2 <sys_arch_reboot+0x16>
   102b6:	bf00      	nop
   102b8:	e000ed00 	.word	0xe000ed00
   102bc:	05fa0004 	.word	0x05fa0004

000102c0 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   102c0:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   102c2:	2120      	movs	r1, #32
   102c4:	4803      	ldr	r0, [pc, #12]	; (102d4 <z_arm_interrupt_init+0x14>)
   102c6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   102c8:	3301      	adds	r3, #1
   102ca:	2b41      	cmp	r3, #65	; 0x41
   102cc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   102d0:	d1f9      	bne.n	102c6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   102d2:	4770      	bx	lr
   102d4:	e000e100 	.word	0xe000e100

000102d8 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   102d8:	b510      	push	{r4, lr}
   102da:	4604      	mov	r4, r0
	z_thread_single_abort(thread);
   102dc:	f00c fa20 	bl	1c720 <z_thread_single_abort>

	if (_current == thread) {
   102e0:	4b11      	ldr	r3, [pc, #68]	; (10328 <z_impl_k_thread_abort+0x50>)
   102e2:	689b      	ldr	r3, [r3, #8]
   102e4:	42a3      	cmp	r3, r4
   102e6:	d107      	bne.n	102f8 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   102e8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   102ec:	b183      	cbz	r3, 10310 <z_impl_k_thread_abort+0x38>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   102ee:	4a0f      	ldr	r2, [pc, #60]	; (1032c <z_impl_k_thread_abort+0x54>)
   102f0:	6853      	ldr	r3, [r2, #4]
   102f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   102f6:	6053      	str	r3, [r2, #4]
	__asm__ volatile(
   102f8:	f04f 0320 	mov.w	r3, #32
   102fc:	f3ef 8011 	mrs	r0, BASEPRI
   10300:	f383 8811 	msr	BASEPRI, r3
   10304:	f3bf 8f6f 	isb	sy
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
   10308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
   1030c:	f00f bf25 	b.w	2015a <z_reschedule_irqlock>
   10310:	f04f 0320 	mov.w	r3, #32
   10314:	f3ef 8011 	mrs	r0, BASEPRI
   10318:	f383 8811 	msr	BASEPRI, r3
   1031c:	f3bf 8f6f 	isb	sy

static inline int z_swap_irqlock(unsigned int key)
{
	int ret;
	z_check_stack_sentinel();
	ret = arch_swap(key);
   10320:	f7ff fb84 	bl	fa2c <arch_swap>
	return ret;
   10324:	e7e8      	b.n	102f8 <z_impl_k_thread_abort+0x20>
   10326:	bf00      	nop
   10328:	200210b4 	.word	0x200210b4
   1032c:	e000ed00 	.word	0xe000ed00

00010330 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   10330:	b510      	push	{r4, lr}
		.size = (uint32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   10332:	4b0e      	ldr	r3, [pc, #56]	; (1036c <z_arm_configure_static_mpu_regions+0x3c>)
{
   10334:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   10336:	9302      	str	r3, [sp, #8]
   10338:	4b0d      	ldr	r3, [pc, #52]	; (10370 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   1033a:	4c0e      	ldr	r4, [pc, #56]	; (10374 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   1033c:	9303      	str	r3, [sp, #12]
   1033e:	4b0e      	ldr	r3, [pc, #56]	; (10378 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   10340:	4a0e      	ldr	r2, [pc, #56]	; (1037c <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
   10342:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   10344:	ab02      	add	r3, sp, #8
   10346:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   10348:	a801      	add	r0, sp, #4
   1034a:	4623      	mov	r3, r4
   1034c:	2101      	movs	r1, #1
   1034e:	f000 f93d 	bl	105cc <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   10352:	2300      	movs	r3, #0
   10354:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   10356:	4b0a      	ldr	r3, [pc, #40]	; (10380 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   10358:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   1035a:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1035c:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   1035e:	9305      	str	r3, [sp, #20]
   10360:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   10362:	f000 f93d 	bl	105e0 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   10366:	b008      	add	sp, #32
   10368:	bd10      	pop	{r4, pc}
   1036a:	bf00      	nop
   1036c:	20020000 	.word	0x20020000
   10370:	00000000 	.word	0x00000000
   10374:	20040000 	.word	0x20040000
   10378:	00010006 	.word	0x00010006
   1037c:	20020000 	.word	0x20020000
   10380:	20020258 	.word	0x20020258

00010384 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   10384:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   10386:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   10388:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1038a:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   1038e:	f004 031f 	and.w	r3, r4, #31
   10392:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   10394:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   10396:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   10398:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   1039c:	4904      	ldr	r1, [pc, #16]	; (103b0 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   1039e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   103a2:	f043 0301 	orr.w	r3, r3, #1
   103a6:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   103a8:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   103aa:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   103ac:	bd10      	pop	{r4, pc}
   103ae:	bf00      	nop
   103b0:	e000ed90 	.word	0xe000ed90

000103b4 <region_allocate_and_init.part.0>:
#include "arm_mpu_v8_internal.h"
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
   103b4:	b508      	push	{r3, lr}
   103b6:	4a07      	ldr	r2, [pc, #28]	; (103d4 <region_allocate_and_init.part.0+0x20>)
   103b8:	4b07      	ldr	r3, [pc, #28]	; (103d8 <region_allocate_and_init.part.0+0x24>)
   103ba:	4601      	mov	r1, r0
   103bc:	1ad2      	subs	r2, r2, r3
   103be:	08d2      	lsrs	r2, r2, #3
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   103c0:	0192      	lsls	r2, r2, #6
   103c2:	4806      	ldr	r0, [pc, #24]	; (103dc <region_allocate_and_init.part.0+0x28>)
   103c4:	f042 0201 	orr.w	r2, r2, #1
   103c8:	f00d fb81 	bl	1dace <log_1>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   103cc:	f06f 0015 	mvn.w	r0, #21
   103d0:	bd08      	pop	{r3, pc}
   103d2:	bf00      	nop
   103d4:	00020aac 	.word	0x00020aac
   103d8:	00020a64 	.word	0x00020a64
   103dc:	00021be1 	.word	0x00021be1

000103e0 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   103e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   103e4:	4607      	mov	r7, r0
   103e6:	4688      	mov	r8, r1
   103e8:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   103ea:	2600      	movs	r6, #0
	MPU->RNR = index;
   103ec:	4d56      	ldr	r5, [pc, #344]	; (10548 <mpu_configure_regions_and_partition.constprop.0+0x168>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   103ee:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   103f0:	4546      	cmp	r6, r8
   103f2:	da35      	bge.n	10460 <mpu_configure_regions_and_partition.constprop.0+0x80>
		if (regions[i]->size == 0U) {
   103f4:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
   103f8:	f8d3 9004 	ldr.w	r9, [r3, #4]
   103fc:	f1b9 0f00 	cmp.w	r9, #0
   10400:	d051      	beq.n	104a6 <mpu_configure_regions_and_partition.constprop.0+0xc6>
		&&
   10402:	f1b9 0f1f 	cmp.w	r9, #31
   10406:	d91e      	bls.n	10446 <mpu_configure_regions_and_partition.constprop.0+0x66>
		&&
   10408:	f019 0f1f 	tst.w	r9, #31
   1040c:	d11b      	bne.n	10446 <mpu_configure_regions_and_partition.constprop.0+0x66>
		((part->start &
   1040e:	f8d3 a000 	ldr.w	sl, [r3]
		&&
   10412:	f01a 0f1f 	tst.w	sl, #31
   10416:	d116      	bne.n	10446 <mpu_configure_regions_and_partition.constprop.0+0x66>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   10418:	4650      	mov	r0, sl
   1041a:	f00d ff88 	bl	1e32e <arm_cmse_mpu_region_get>
   1041e:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   10420:	eb09 000a 	add.w	r0, r9, sl
   10424:	3801      	subs	r0, #1
   10426:	f00d ff82 	bl	1e32e <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   1042a:	4583      	cmp	fp, r0
   1042c:	d01c      	beq.n	10468 <mpu_configure_regions_and_partition.constprop.0+0x88>
	return -EINVAL;
   1042e:	f06f 0b15 	mvn.w	fp, #21
   10432:	4a46      	ldr	r2, [pc, #280]	; (1054c <mpu_configure_regions_and_partition.constprop.0+0x16c>)
   10434:	4b46      	ldr	r3, [pc, #280]	; (10550 <mpu_configure_regions_and_partition.constprop.0+0x170>)
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   10436:	4659      	mov	r1, fp
   10438:	1ad2      	subs	r2, r2, r3
   1043a:	08d2      	lsrs	r2, r2, #3
   1043c:	0192      	lsls	r2, r2, #6
   1043e:	4845      	ldr	r0, [pc, #276]	; (10554 <mpu_configure_regions_and_partition.constprop.0+0x174>)
   10440:	f042 0201 	orr.w	r2, r2, #1
   10444:	e008      	b.n	10458 <mpu_configure_regions_and_partition.constprop.0+0x78>
			LOG_ERR("Partition %u: sanity check failed.", i);
   10446:	4631      	mov	r1, r6
   10448:	4a40      	ldr	r2, [pc, #256]	; (1054c <mpu_configure_regions_and_partition.constprop.0+0x16c>)
   1044a:	4b41      	ldr	r3, [pc, #260]	; (10550 <mpu_configure_regions_and_partition.constprop.0+0x170>)
   1044c:	4842      	ldr	r0, [pc, #264]	; (10558 <mpu_configure_regions_and_partition.constprop.0+0x178>)
   1044e:	1ad2      	subs	r2, r2, r3
   10450:	08d2      	lsrs	r2, r2, #3
   10452:	0192      	lsls	r2, r2, #6
   10454:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Invalid underlying region index %u",
   10458:	f00d fb39 	bl	1dace <log_1>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   1045c:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   10460:	4620      	mov	r0, r4
   10462:	b005      	add	sp, #20
   10464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   10468:	f11b 0f16 	cmn.w	fp, #22
   1046c:	d0e1      	beq.n	10432 <mpu_configure_regions_and_partition.constprop.0+0x52>
			(u_reg_index > (reg_index - 1))) {
   1046e:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   10470:	455b      	cmp	r3, fp
   10472:	dbde      	blt.n	10432 <mpu_configure_regions_and_partition.constprop.0+0x52>
	MPU->RNR = index;
   10474:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   10478:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
   1047a:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   1047e:	692b      	ldr	r3, [r5, #16]
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   10480:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   10484:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   10488:	f043 0a1f 	orr.w	sl, r3, #31
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   1048c:	e9d1 3200 	ldrd	r3, r2, [r1]
   10490:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
   10492:	4298      	cmp	r0, r3
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   10494:	f102 39ff 	add.w	r9, r2, #4294967295
		if ((regions[i]->start == u_reg_base) &&
   10498:	d118      	bne.n	104cc <mpu_configure_regions_and_partition.constprop.0+0xec>
   1049a:	45ca      	cmp	sl, r9
   1049c:	d105      	bne.n	104aa <mpu_configure_regions_and_partition.constprop.0+0xca>
			mpu_configure_region(u_reg_index, regions[i]);
   1049e:	fa5f f08b 	uxtb.w	r0, fp
   104a2:	f00d ff23 	bl	1e2ec <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   104a6:	3601      	adds	r6, #1
   104a8:	e7a2      	b.n	103f0 <mpu_configure_regions_and_partition.constprop.0+0x10>
	MPU->RNR = index;
   104aa:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   104ae:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   104b0:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   104b4:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   104b8:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   104ba:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
   104bc:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
   104be:	f00d ff15 	bl	1e2ec <mpu_configure_region>
			if (reg_index == -EINVAL) {
   104c2:	f110 0f16 	cmn.w	r0, #22
   104c6:	d0c9      	beq.n	1045c <mpu_configure_regions_and_partition.constprop.0+0x7c>
			reg_index++;
   104c8:	1c44      	adds	r4, r0, #1
   104ca:	e7ec      	b.n	104a6 <mpu_configure_regions_and_partition.constprop.0+0xc6>
	MPU->RNR = index;
   104cc:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   104d0:	692a      	ldr	r2, [r5, #16]
   104d2:	3b01      	subs	r3, #1
   104d4:	f023 031f 	bic.w	r3, r3, #31
   104d8:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   104dc:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   104de:	45ca      	cmp	sl, r9
   104e0:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   104e2:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
   104e4:	d0eb      	beq.n	104be <mpu_configure_regions_and_partition.constprop.0+0xde>
				mpu_configure_region(reg_index, regions[i]);
   104e6:	f00d ff01 	bl	1e2ec <mpu_configure_region>
			if (reg_index == -EINVAL) {
   104ea:	f110 0f16 	cmn.w	r0, #22
   104ee:	d0b5      	beq.n	1045c <mpu_configure_regions_and_partition.constprop.0+0x7c>
	MPU->RNR = index;
   104f0:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
   104f4:	68ea      	ldr	r2, [r5, #12]
   104f6:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   104fa:	f10a 3aff 	add.w	sl, sl, #4294967295
	attr->rbar = MPU->RBAR &
   104fe:	f362 0304 	bfi	r3, r2, #0, #5
   10502:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   10506:	692b      	ldr	r3, [r5, #16]
   10508:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1050c:	085b      	lsrs	r3, r3, #1
   1050e:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
   10512:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   10516:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
   1051a:	e9d3 1300 	ldrd	r1, r3, [r3]
   1051e:	440b      	add	r3, r1
   10520:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
   10522:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   10526:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
   10528:	4453      	add	r3, sl
   1052a:	eba3 0309 	sub.w	r3, r3, r9
				region_allocate_and_init(reg_index,
   1052e:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i]->start +
   10530:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   10534:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
   10536:	9303      	str	r3, [sp, #12]
   10538:	d902      	bls.n	10540 <mpu_configure_regions_and_partition.constprop.0+0x160>
   1053a:	f7ff ff3b 	bl	103b4 <region_allocate_and_init.part.0>
   1053e:	e7c0      	b.n	104c2 <mpu_configure_regions_and_partition.constprop.0+0xe2>
	region_init(index, region_conf);
   10540:	4669      	mov	r1, sp
   10542:	f7ff ff1f 	bl	10384 <region_init>
			if (reg_index == -EINVAL) {
   10546:	e7bf      	b.n	104c8 <mpu_configure_regions_and_partition.constprop.0+0xe8>
   10548:	e000ed90 	.word	0xe000ed90
   1054c:	00020aac 	.word	0x00020aac
   10550:	00020a64 	.word	0x00020a64
   10554:	00021c2a 	.word	0x00021c2a
   10558:	00021c07 	.word	0x00021c07

0001055c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   1055c:	2205      	movs	r2, #5
   1055e:	4b03      	ldr	r3, [pc, #12]	; (1056c <arm_core_mpu_enable+0x10>)
   10560:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   10562:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10566:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   1056a:	4770      	bx	lr
   1056c:	e000ed90 	.word	0xe000ed90

00010570 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   10570:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   10574:	2200      	movs	r2, #0
   10576:	4b01      	ldr	r3, [pc, #4]	; (1057c <arm_core_mpu_disable+0xc>)
   10578:	605a      	str	r2, [r3, #4]
}
   1057a:	4770      	bx	lr
   1057c:	e000ed90 	.word	0xe000ed90

00010580 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
   10580:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   10582:	4c0e      	ldr	r4, [pc, #56]	; (105bc <arm_mpu_init+0x3c>)
   10584:	6825      	ldr	r5, [r4, #0]
   10586:	2d10      	cmp	r5, #16
   10588:	d814      	bhi.n	105b4 <arm_mpu_init+0x34>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   1058a:	f7ff fff1 	bl	10570 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1058e:	2000      	movs	r0, #0
	MPU->MAIR0 =
   10590:	4b0b      	ldr	r3, [pc, #44]	; (105c0 <arm_mpu_init+0x40>)
   10592:	4a0c      	ldr	r2, [pc, #48]	; (105c4 <arm_mpu_init+0x44>)
   10594:	631a      	str	r2, [r3, #48]	; 0x30
   10596:	4285      	cmp	r5, r0
   10598:	d105      	bne.n	105a6 <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   1059a:	4b0b      	ldr	r3, [pc, #44]	; (105c8 <arm_mpu_init+0x48>)
   1059c:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   1059e:	f7ff ffdd 	bl	1055c <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
   105a2:	2000      	movs	r0, #0
}
   105a4:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   105a6:	6861      	ldr	r1, [r4, #4]
   105a8:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   105ac:	f7ff feea 	bl	10384 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   105b0:	3001      	adds	r0, #1
   105b2:	e7f0      	b.n	10596 <arm_mpu_init+0x16>
		return -1;
   105b4:	f04f 30ff 	mov.w	r0, #4294967295
   105b8:	e7f4      	b.n	105a4 <arm_mpu_init+0x24>
   105ba:	bf00      	nop
   105bc:	00020bd0 	.word	0x00020bd0
   105c0:	e000ed90 	.word	0xe000ed90
   105c4:	0044ffaa 	.word	0x0044ffaa
   105c8:	200227c2 	.word	0x200227c2

000105cc <arm_core_mpu_configure_static_mpu_regions>:
{
   105cc:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   105ce:	4c03      	ldr	r4, [pc, #12]	; (105dc <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   105d0:	7822      	ldrb	r2, [r4, #0]
   105d2:	f7ff ff05 	bl	103e0 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   105d6:	7020      	strb	r0, [r4, #0]
}
   105d8:	bd10      	pop	{r4, pc}
   105da:	bf00      	nop
   105dc:	200227c2 	.word	0x200227c2

000105e0 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   105e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   105e4:	4d26      	ldr	r5, [pc, #152]	; (10680 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
   105e6:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   105e8:	4606      	mov	r6, r0
   105ea:	f04f 0800 	mov.w	r8, #0
   105ee:	46ab      	mov	fp, r5
	MPU->RNR = index;
   105f0:	4f24      	ldr	r7, [pc, #144]	; (10684 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   105f2:	45d0      	cmp	r8, sl
   105f4:	da1b      	bge.n	1062e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   105f6:	f8d6 9004 	ldr.w	r9, [r6, #4]
   105fa:	f1b9 0f00 	cmp.w	r9, #0
   105fe:	d039      	beq.n	10674 <arm_core_mpu_mark_areas_for_dynamic_regions+0x94>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   10600:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   10602:	4608      	mov	r0, r1
   10604:	9101      	str	r1, [sp, #4]
   10606:	f00d fe92 	bl	1e32e <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1060a:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1060c:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1060e:	eb09 0001 	add.w	r0, r9, r1
   10612:	3801      	subs	r0, #1
   10614:	f00d fe8b 	bl	1e32e <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   10618:	4284      	cmp	r4, r0
   1061a:	f04f 0214 	mov.w	r2, #20
   1061e:	4b1a      	ldr	r3, [pc, #104]	; (10688 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa8>)
   10620:	d008      	beq.n	10634 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
   10622:	f06f 0315 	mvn.w	r3, #21
   10626:	fb02 f808 	mul.w	r8, r2, r8
   1062a:	f84b 3008 	str.w	r3, [fp, r8]
}
   1062e:	b003      	add	sp, #12
   10630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   10634:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   10638:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   1063a:	d0f8      	beq.n	1062e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   1063c:	7819      	ldrb	r1, [r3, #0]
   1063e:	42a1      	cmp	r1, r4
   10640:	ddf5      	ble.n	1062e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
   10642:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   10646:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
   10648:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
   1064a:	68fc      	ldr	r4, [r7, #12]
   1064c:	f100 0108 	add.w	r1, r0, #8
   10650:	7b00      	ldrb	r0, [r0, #12]
   10652:	f364 0004 	bfi	r0, r4, #0, #5
   10656:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   10658:	6938      	ldr	r0, [r7, #16]
   1065a:	790c      	ldrb	r4, [r1, #4]
   1065c:	0840      	lsrs	r0, r0, #1
   1065e:	f360 1447 	bfi	r4, r0, #5, #3
   10662:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   10664:	68f9      	ldr	r1, [r7, #12]
   10666:	f021 011f 	bic.w	r1, r1, #31
   1066a:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   1066c:	6939      	ldr	r1, [r7, #16]
   1066e:	f021 011f 	bic.w	r1, r1, #31
   10672:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   10674:	f108 0801 	add.w	r8, r8, #1
   10678:	3514      	adds	r5, #20
   1067a:	360c      	adds	r6, #12
   1067c:	e7b9      	b.n	105f2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   1067e:	bf00      	nop
   10680:	20020944 	.word	0x20020944
   10684:	e000ed90 	.word	0xe000ed90
   10688:	200227c2 	.word	0x200227c2

0001068c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   1068c:	4b01      	ldr	r3, [pc, #4]	; (10694 <__stdout_hook_install+0x8>)
   1068e:	6018      	str	r0, [r3, #0]
}
   10690:	4770      	bx	lr
   10692:	bf00      	nop
   10694:	2002000c 	.word	0x2002000c

00010698 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *_MLIBC_RESTRICT s, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
   10698:	b40c      	push	{r2, r3}
   1069a:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
   1069c:	b909      	cbnz	r1, 106a2 <snprintf+0xa>
		s = &dummy; /* write final NUL to dummy, can't change *s */
   1069e:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = s;
	p.len = (int) len;
   106a2:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
   106a6:	ab07      	add	r3, sp, #28
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   106a8:	9a06      	ldr	r2, [sp, #24]
   106aa:	a902      	add	r1, sp, #8
   106ac:	4805      	ldr	r0, [pc, #20]	; (106c4 <snprintf+0x2c>)
	va_start(vargs, format);
   106ae:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   106b0:	f7fd fbb4 	bl	de1c <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
   106b4:	2200      	movs	r2, #0
   106b6:	9b02      	ldr	r3, [sp, #8]
   106b8:	701a      	strb	r2, [r3, #0]
	return r;
}
   106ba:	b005      	add	sp, #20
   106bc:	f85d eb04 	ldr.w	lr, [sp], #4
   106c0:	b002      	add	sp, #8
   106c2:	4770      	bx	lr
   106c4:	0001e6f5 	.word	0x0001e6f5

000106c8 <sprintf>:

int sprintf(char *_MLIBC_RESTRICT s, const char *_MLIBC_RESTRICT format, ...)
{
   106c8:	b40e      	push	{r1, r2, r3}
   106ca:	b50f      	push	{r0, r1, r2, r3, lr}

	struct emitter p;
	int     r;

	p.ptr = s;
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   106cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
{
   106d0:	ab05      	add	r3, sp, #20
   106d2:	f853 2b04 	ldr.w	r2, [r3], #4
	p.ptr = s;
   106d6:	9002      	str	r0, [sp, #8]
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   106d8:	9103      	str	r1, [sp, #12]

	va_start(vargs, format);
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   106da:	4806      	ldr	r0, [pc, #24]	; (106f4 <sprintf+0x2c>)
   106dc:	a902      	add	r1, sp, #8
	va_start(vargs, format);
   106de:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   106e0:	f7fd fb9c 	bl	de1c <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
   106e4:	2200      	movs	r2, #0
   106e6:	9b02      	ldr	r3, [sp, #8]
   106e8:	701a      	strb	r2, [r3, #0]
	return r;
}
   106ea:	b004      	add	sp, #16
   106ec:	f85d eb04 	ldr.w	lr, [sp], #4
   106f0:	b003      	add	sp, #12
   106f2:	4770      	bx	lr
   106f4:	0001e6f5 	.word	0x0001e6f5

000106f8 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   106f8:	b538      	push	{r3, r4, r5, lr}
   106fa:	4c08      	ldr	r4, [pc, #32]	; (1071c <net_if_init+0x24>)

	NET_DBG("");

	net_tc_tx_init();

	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   106fc:	4d08      	ldr	r5, [pc, #32]	; (10720 <net_if_init+0x28>)
   106fe:	42ac      	cmp	r4, r5
   10700:	4620      	mov	r0, r4
   10702:	d300      	bcc.n	10706 <net_if_init+0xe>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   10704:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @return a pointer to the device driver instance
 */
static inline const struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
   10706:	6803      	ldr	r3, [r0, #0]
   10708:	3404      	adds	r4, #4
	const struct net_if_api *api = net_if_get_device(iface)->api;
   1070a:	681b      	ldr	r3, [r3, #0]
   1070c:	689b      	ldr	r3, [r3, #8]
	if (!api || !api->init) {
   1070e:	2b00      	cmp	r3, #0
   10710:	d0f5      	beq.n	106fe <net_if_init+0x6>
   10712:	681b      	ldr	r3, [r3, #0]
   10714:	2b00      	cmp	r3, #0
   10716:	d0f2      	beq.n	106fe <net_if_init+0x6>
	api->init(iface);
   10718:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   1071a:	e7f0      	b.n	106fe <net_if_init+0x6>
   1071c:	20020238 	.word	0x20020238
   10720:	2002023c 	.word	0x2002023c

00010724 <net_if_post_init>:

void net_if_post_init(void)
{
   10724:	b538      	push	{r3, r4, r5, lr}
   10726:	4c08      	ldr	r4, [pc, #32]	; (10748 <net_if_post_init+0x24>)
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   10728:	4d08      	ldr	r5, [pc, #32]	; (1074c <net_if_post_init+0x28>)
   1072a:	42ac      	cmp	r4, r5
   1072c:	4620      	mov	r0, r4
   1072e:	d300      	bcc.n	10732 <net_if_post_init+0xe>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   10730:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10732:	6803      	ldr	r3, [r0, #0]
   10734:	3404      	adds	r4, #4
   10736:	330c      	adds	r3, #12
   10738:	e8d3 3faf 	lda	r3, [r3]
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   1073c:	071b      	lsls	r3, r3, #28
   1073e:	d4f4      	bmi.n	1072a <net_if_post_init+0x6>
			net_if_up(iface);
   10740:	f00d fffe 	bl	1e740 <net_if_up>
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   10744:	e7f1      	b.n	1072a <net_if_post_init+0x6>
   10746:	bf00      	nop
   10748:	20020238 	.word	0x20020238
   1074c:	2002023c 	.word	0x2002023c

00010750 <z_impl_net_addr_ntop>:
	struct in6_addr *addr6;
	uint16_t *w;
	uint8_t i, bl, bh, longest = 1U;
	int8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
   10750:	2300      	movs	r3, #0
{
   10752:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *ptr = dst;
	int len = -1;
	uint16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
   10756:	2802      	cmp	r0, #2
{
   10758:	b089      	sub	sp, #36	; 0x24
   1075a:	4607      	mov	r7, r0
   1075c:	4616      	mov	r6, r2
	unsigned char zeros[8] = { 0 };
   1075e:	e9cd 3306 	strd	r3, r3, [sp, #24]
{
   10762:	9104      	str	r1, [sp, #16]
	if (family == AF_INET6) {
   10764:	d13e      	bne.n	107e4 <z_impl_net_addr_ntop+0x94>
		addr6 = (struct in6_addr *)src;
		w = (uint16_t *)addr6->s6_addr16;
   10766:	a806      	add	r0, sp, #24
   10768:	9105      	str	r1, [sp, #20]
   1076a:	4601      	mov	r1, r0
{
   1076c:	461a      	mov	r2, r3
   1076e:	e006      	b.n	1077e <z_impl_net_addr_ntop+0x2e>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
   10770:	780c      	ldrb	r4, [r1, #0]
   10772:	3201      	adds	r2, #1
   10774:	3401      	adds	r4, #1
   10776:	700c      	strb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
   10778:	b2d4      	uxtb	r4, r2
   1077a:	2c07      	cmp	r4, #7
   1077c:	d804      	bhi.n	10788 <z_impl_net_addr_ntop+0x38>
				if (UNALIGNED_GET(&w[j]) != 0) {
   1077e:	9c04      	ldr	r4, [sp, #16]
   10780:	f834 4012 	ldrh.w	r4, [r4, r2, lsl #1]
   10784:	2c00      	cmp	r4, #0
   10786:	d0f3      	beq.n	10770 <z_impl_net_addr_ntop+0x20>
		for (i = 0U; i < 8; i++) {
   10788:	3301      	adds	r3, #1
   1078a:	2b08      	cmp	r3, #8
   1078c:	f101 0101 	add.w	r1, r1, #1
   10790:	d1ec      	bne.n	1076c <z_impl_net_addr_ntop+0x1c>
	int8_t pos = -1;
   10792:	f04f 38ff 	mov.w	r8, #4294967295
	uint8_t i, bl, bh, longest = 1U;
   10796:	f04f 0901 	mov.w	r9, #1
			}
		}

		for (i = 0U; i < 8; i++) {
   1079a:	2300      	movs	r3, #0
			if (zeros[i] > longest) {
   1079c:	f810 2b01 	ldrb.w	r2, [r0], #1
   107a0:	454a      	cmp	r2, r9
				longest = zeros[i];
				pos = i;
   107a2:	bf88      	it	hi
   107a4:	fa4f f883 	sxtbhi.w	r8, r3
		for (i = 0U; i < 8; i++) {
   107a8:	f103 0301 	add.w	r3, r3, #1
   107ac:	b2db      	uxtb	r3, r3
				pos = i;
   107ae:	bf88      	it	hi
   107b0:	4691      	movhi	r9, r2
		for (i = 0U; i < 8; i++) {
   107b2:	2b08      	cmp	r3, #8
   107b4:	d1f2      	bne.n	1079c <z_impl_net_addr_ntop+0x4c>
		len = 8;
   107b6:	469b      	mov	fp, r3
   107b8:	f1b9 0f01 	cmp.w	r9, #1
   107bc:	f04f 033a 	mov.w	r3, #58	; 0x3a
   107c0:	bf08      	it	eq
   107c2:	f04f 38ff 	moveq.w	r8, #4294967295
   107c6:	9303      	str	r3, [sp, #12]
	bool needcolon = false;
   107c8:	2100      	movs	r1, #0
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
   107ca:	4634      	mov	r4, r6
   107cc:	460d      	mov	r5, r1
   107ce:	455d      	cmp	r5, fp
   107d0:	db17      	blt.n	10802 <z_impl_net_addr_ntop+0xb2>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
   107d2:	42b4      	cmp	r4, r6
   107d4:	d008      	beq.n	107e8 <z_impl_net_addr_ntop+0x98>
		return NULL;
	}

	if (family == AF_INET) {
   107d6:	2300      	movs	r3, #0
   107d8:	2f01      	cmp	r7, #1
		*(ptr - 1) = '\0';
   107da:	bf0c      	ite	eq
   107dc:	f804 3c01 	strbeq.w	r3, [r4, #-1]
	} else {
		*ptr = '\0';
   107e0:	7023      	strbne	r3, [r4, #0]
   107e2:	e002      	b.n	107ea <z_impl_net_addr_ntop+0x9a>
	} else if (family == AF_INET) {
   107e4:	2801      	cmp	r0, #1
   107e6:	d004      	beq.n	107f2 <z_impl_net_addr_ntop+0xa2>
		return NULL;
   107e8:	2600      	movs	r6, #0
	}

	return dst;
}
   107ea:	4630      	mov	r0, r6
   107ec:	b009      	add	sp, #36	; 0x24
   107ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
   107f2:	232e      	movs	r3, #46	; 0x2e
		len = 4;
   107f4:	f04f 0b04 	mov.w	fp, #4
	int8_t pos = -1;
   107f8:	f04f 38ff 	mov.w	r8, #4294967295
	uint8_t i, bl, bh, longest = 1U;
   107fc:	4681      	mov	r9, r0
		delim = '.';
   107fe:	9303      	str	r3, [sp, #12]
   10800:	e7e2      	b.n	107c8 <z_impl_net_addr_ntop+0x78>
		if (len == 4) {
   10802:	f1bb 0f04 	cmp.w	fp, #4
   10806:	d13b      	bne.n	10880 <z_impl_net_addr_ntop+0x130>
			value = (uint32_t)addr->s4_addr[i];
   10808:	9b04      	ldr	r3, [sp, #16]
   1080a:	5d5a      	ldrb	r2, [r3, r5]
			if (value == 0U) {
   1080c:	b94a      	cbnz	r2, 10822 <z_impl_net_addr_ntop+0xd2>
				*ptr++ = '0';
   1080e:	2330      	movs	r3, #48	; 0x30
   10810:	4620      	mov	r0, r4
   10812:	f800 3b02 	strb.w	r3, [r0], #2
				*ptr++ = delim;
   10816:	9b03      	ldr	r3, [sp, #12]
   10818:	7063      	strb	r3, [r4, #1]
	for (i = 0U; i < len; i++) {
   1081a:	3501      	adds	r5, #1
   1081c:	4604      	mov	r4, r0
   1081e:	b2ed      	uxtb	r5, r5
   10820:	e7d5      	b.n	107ce <z_impl_net_addr_ntop+0x7e>
			l = net_value_to_udec(ptr, value, 0);
   10822:	f04f 0e09 	mov.w	lr, #9
   10826:	f04f 0a00 	mov.w	sl, #0
   1082a:	e9cd 2401 	strd	r2, r4, [sp, #4]
   1082e:	483a      	ldr	r0, [pc, #232]	; (10918 <z_impl_net_addr_ntop+0x1c8>)
		value = value % divisor;
   10830:	f8dd c004 	ldr.w	ip, [sp, #4]
		if ((precision > i) || (temp != 0)) {
   10834:	45f2      	cmp	sl, lr
		value = value % divisor;
   10836:	fbbc f2f0 	udiv	r2, ip, r0
   1083a:	fb00 c212 	mls	r2, r0, r2, ip
   1083e:	9201      	str	r2, [sp, #4]
		if ((precision > i) || (temp != 0)) {
   10840:	dc01      	bgt.n	10846 <z_impl_net_addr_ntop+0xf6>
   10842:	4584      	cmp	ip, r0
   10844:	d308      	bcc.n	10858 <z_impl_net_addr_ntop+0x108>
		temp = value / divisor;
   10846:	fbbc fcf0 	udiv	ip, ip, r0
			*buf++ = (char) (temp + '0');
   1084a:	46f2      	mov	sl, lr
   1084c:	9b02      	ldr	r3, [sp, #8]
   1084e:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
   10852:	f803 cb01 	strb.w	ip, [r3], #1
   10856:	9302      	str	r3, [sp, #8]
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   10858:	220a      	movs	r2, #10
   1085a:	f10e 3eff 	add.w	lr, lr, #4294967295
   1085e:	f1be 3fff 	cmp.w	lr, #4294967295
   10862:	fbb0 f0f2 	udiv	r0, r0, r2
   10866:	d1e3      	bne.n	10830 <z_impl_net_addr_ntop+0xe0>
	*buf = 0;
   10868:	f04f 0200 	mov.w	r2, #0
   1086c:	9b02      	ldr	r3, [sp, #8]
   1086e:	701a      	strb	r2, [r3, #0]
	return buf - start;
   10870:	1b1b      	subs	r3, r3, r4
			ptr += l;
   10872:	b2da      	uxtb	r2, r3
   10874:	fa54 f383 	uxtab	r3, r4, r3
			*ptr++ = delim;
   10878:	1c58      	adds	r0, r3, #1
   1087a:	9b03      	ldr	r3, [sp, #12]
   1087c:	54a3      	strb	r3, [r4, r2]
			continue;
   1087e:	e7cc      	b.n	1081a <z_impl_net_addr_ntop+0xca>
		if (i == pos) {
   10880:	45a8      	cmp	r8, r5
   10882:	d110      	bne.n	108a6 <z_impl_net_addr_ntop+0x156>
			if (needcolon || i == 0U) {
   10884:	b911      	cbnz	r1, 1088c <z_impl_net_addr_ntop+0x13c>
   10886:	f1b8 0f00 	cmp.w	r8, #0
   1088a:	d102      	bne.n	10892 <z_impl_net_addr_ntop+0x142>
				*ptr++ = ':';
   1088c:	233a      	movs	r3, #58	; 0x3a
   1088e:	f804 3b01 	strb.w	r3, [r4], #1
			*ptr++ = ':';
   10892:	233a      	movs	r3, #58	; 0x3a
   10894:	4620      	mov	r0, r4
   10896:	f800 3b01 	strb.w	r3, [r0], #1
			i += longest - 1U;
   1089a:	f109 33ff 	add.w	r3, r9, #4294967295
   1089e:	441d      	add	r5, r3
			needcolon = false;
   108a0:	2100      	movs	r1, #0
			i += longest - 1U;
   108a2:	b2ed      	uxtb	r5, r5
			continue;
   108a4:	e7b9      	b.n	1081a <z_impl_net_addr_ntop+0xca>
		if (needcolon) {
   108a6:	b111      	cbz	r1, 108ae <z_impl_net_addr_ntop+0x15e>
			*ptr++ = ':';
   108a8:	233a      	movs	r3, #58	; 0x3a
   108aa:	f804 3b01 	strb.w	r3, [r4], #1
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   108ae:	9b05      	ldr	r3, [sp, #20]
   108b0:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
   108b4:	0219      	lsls	r1, r3, #8
   108b6:	ea41 2113 	orr.w	r1, r1, r3, lsr #8
		if (bh) {
   108ba:	f411 4f7f 	tst.w	r1, #65280	; 0xff00
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   108be:	b20a      	sxth	r2, r1
		bh = value >> 8;
   108c0:	f3c1 2307 	ubfx	r3, r1, #8, #8
		bl = value & 0xff;
   108c4:	fa5f fa81 	uxtb.w	sl, r1
		if (bh) {
   108c8:	d016      	beq.n	108f8 <z_impl_net_addr_ntop+0x1a8>
			if (bh > 0x0f) {
   108ca:	2b0f      	cmp	r3, #15
		bh = value >> 8;
   108cc:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
   108ce:	d90b      	bls.n	108e8 <z_impl_net_addr_ntop+0x198>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   108d0:	2300      	movs	r3, #0
   108d2:	2261      	movs	r2, #97	; 0x61
   108d4:	4620      	mov	r0, r4
   108d6:	f00d ff64 	bl	1e7a2 <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   108da:	2301      	movs	r3, #1
   108dc:	2261      	movs	r2, #97	; 0x61
   108de:	4651      	mov	r1, sl
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   108e0:	f00d ff5f 	bl	1e7a2 <net_byte_to_hex>
		needcolon = true;
   108e4:	2101      	movs	r1, #1
   108e6:	e798      	b.n	1081a <z_impl_net_addr_ntop+0xca>
				if (bh < 10) {
   108e8:	b25b      	sxtb	r3, r3
   108ea:	2909      	cmp	r1, #9
					*ptr++ = (char)(bh + '0');
   108ec:	bf94      	ite	ls
   108ee:	3330      	addls	r3, #48	; 0x30
					*ptr++ = (char) (bh - 10 + 'a');
   108f0:	3357      	addhi	r3, #87	; 0x57
   108f2:	1c60      	adds	r0, r4, #1
   108f4:	7023      	strb	r3, [r4, #0]
   108f6:	e7f0      	b.n	108da <z_impl_net_addr_ntop+0x18a>
		} else if (bl > 0x0f) {
   108f8:	f1ba 0f0f 	cmp.w	sl, #15
   108fc:	d903      	bls.n	10906 <z_impl_net_addr_ntop+0x1b6>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   108fe:	2261      	movs	r2, #97	; 0x61
   10900:	4651      	mov	r1, sl
   10902:	4620      	mov	r0, r4
   10904:	e7ec      	b.n	108e0 <z_impl_net_addr_ntop+0x190>
			if (bl < 10) {
   10906:	b253      	sxtb	r3, r2
   10908:	f1ba 0f09 	cmp.w	sl, #9
				*ptr++ = (char)(bl + '0');
   1090c:	bf94      	ite	ls
   1090e:	3330      	addls	r3, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
   10910:	3357      	addhi	r3, #87	; 0x57
   10912:	1c60      	adds	r0, r4, #1
   10914:	7023      	strb	r3, [r4, #0]
   10916:	e7e5      	b.n	108e4 <z_impl_net_addr_ntop+0x194>
   10918:	3b9aca00 	.word	0x3b9aca00

0001091c <connect_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int connect_request_encode(const struct mqtt_client *client,
			   struct buf_ctx *buf)
{
   1091c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	} else {
		mqtt_proto_desc = &mqtt_3_1_0_proto_desc;
	}

	/* Reserve space for fixed header. */
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   10920:	680d      	ldr	r5, [r1, #0]
	uint8_t connect_flags = client->clean_session << 1;
   10922:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
	start = buf->cur;

	MQTT_TRC("Encoding Protocol Description. Str:%s Size:%08x.",
		 mqtt_proto_desc->utf8, mqtt_proto_desc->size);

	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   10926:	4b3b      	ldr	r3, [pc, #236]	; (10a14 <connect_request_encode+0xf8>)
   10928:	4a3b      	ldr	r2, [pc, #236]	; (10a18 <connect_request_encode+0xfc>)
{
   1092a:	4607      	mov	r7, r0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   1092c:	f890 005e 	ldrb.w	r0, [r0, #94]	; 0x5e
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   10930:	3505      	adds	r5, #5
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   10932:	2804      	cmp	r0, #4
   10934:	bf0c      	ite	eq
   10936:	4610      	moveq	r0, r2
   10938:	4618      	movne	r0, r3
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1093a:	600d      	str	r5, [r1, #0]
{
   1093c:	4688      	mov	r8, r1
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   1093e:	f00e f817 	bl	1e970 <pack_utf8_str>
	uint8_t connect_flags = client->clean_session << 1;
   10942:	f3c4 0440 	ubfx	r4, r4, #1, #1
	if (err_code != 0) {
   10946:	4603      	mov	r3, r0
   10948:	b938      	cbnz	r0, 1095a <connect_request_encode+0x3e>
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   1094a:	e9d8 2000 	ldrd	r2, r0, [r8]
   1094e:	4290      	cmp	r0, r2
		return err_code;
	}

	MQTT_TRC("Encoding Protocol Version %02x.", client->protocol_version);
	err_code = pack_uint8(client->protocol_version, buf);
   10950:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   10954:	d104      	bne.n	10960 <connect_request_encode+0x44>
		return -ENOMEM;
   10956:	f06f 030b 	mvn.w	r3, #11

	/* Write the flags the connect flags. */
	*connect_flags_pos = connect_flags;

	return mqtt_encode_fixed_header(message_type, start, buf);
}
   1095a:	4618      	mov	r0, r3
   1095c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*(buf->cur++) = val;
   10960:	1c50      	adds	r0, r2, #1
   10962:	f8c8 0000 	str.w	r0, [r8]
   10966:	7011      	strb	r1, [r2, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   10968:	e9d8 6200 	ldrd	r6, r2, [r8]
   1096c:	4296      	cmp	r6, r2
   1096e:	d0f2      	beq.n	10956 <connect_request_encode+0x3a>
	*(buf->cur++) = val;
   10970:	1c72      	adds	r2, r6, #1
   10972:	f8c8 2000 	str.w	r2, [r8]
   10976:	7033      	strb	r3, [r6, #0]
	err_code = pack_uint16(client->keepalive, buf);
   10978:	4641      	mov	r1, r8
   1097a:	f8b7 005c 	ldrh.w	r0, [r7, #92]	; 0x5c
   1097e:	f00d ffe5 	bl	1e94c <pack_uint16>
	if (err_code != 0) {
   10982:	4603      	mov	r3, r0
   10984:	2800      	cmp	r0, #0
   10986:	d1e8      	bne.n	1095a <connect_request_encode+0x3e>
	err_code = pack_utf8_str(&client->client_id, buf);
   10988:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   1098c:	f00d fff0 	bl	1e970 <pack_utf8_str>
	if (err_code != 0) {
   10990:	4603      	mov	r3, r0
   10992:	2800      	cmp	r0, #0
   10994:	d1e1      	bne.n	1095a <connect_request_encode+0x3e>
	if (client->will_topic != NULL) {
   10996:	6c38      	ldr	r0, [r7, #64]	; 0x40
	uint8_t connect_flags = client->clean_session << 1;
   10998:	0064      	lsls	r4, r4, #1
	if (client->will_topic != NULL) {
   1099a:	b1d8      	cbz	r0, 109d4 <connect_request_encode+0xb8>
		connect_flags |= client->will_retain << 5;
   1099c:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
		connect_flags |= MQTT_CONNECT_FLAG_WILL_TOPIC;
   109a0:	f044 0404 	orr.w	r4, r4, #4
		connect_flags |= client->will_retain << 5;
   109a4:	f003 0301 	and.w	r3, r3, #1
   109a8:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   109ac:	7a03      	ldrb	r3, [r0, #8]
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   109ae:	4641      	mov	r1, r8
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   109b0:	00db      	lsls	r3, r3, #3
   109b2:	f003 0318 	and.w	r3, r3, #24
		connect_flags |= client->will_retain << 5;
   109b6:	431c      	orrs	r4, r3
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   109b8:	f00d ffda 	bl	1e970 <pack_utf8_str>
		if (err_code != 0) {
   109bc:	4603      	mov	r3, r0
   109be:	2800      	cmp	r0, #0
   109c0:	d1cb      	bne.n	1095a <connect_request_encode+0x3e>
		if (client->will_message != NULL) {
   109c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
			err_code = pack_utf8_str(client->will_message, buf);
   109c4:	4641      	mov	r1, r8
		if (client->will_message != NULL) {
   109c6:	b30b      	cbz	r3, 10a0c <connect_request_encode+0xf0>
			err_code = pack_utf8_str(client->will_message, buf);
   109c8:	4618      	mov	r0, r3
   109ca:	f00d ffd1 	bl	1e970 <pack_utf8_str>
			if (err_code != 0) {
   109ce:	4603      	mov	r3, r0
   109d0:	2800      	cmp	r0, #0
   109d2:	d1c2      	bne.n	1095a <connect_request_encode+0x3e>
	if (client->user_name != NULL) {
   109d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   109d6:	b138      	cbz	r0, 109e8 <connect_request_encode+0xcc>
		err_code = pack_utf8_str(client->user_name, buf);
   109d8:	4641      	mov	r1, r8
   109da:	f00d ffc9 	bl	1e970 <pack_utf8_str>
		if (err_code != 0) {
   109de:	4603      	mov	r3, r0
   109e0:	2800      	cmp	r0, #0
   109e2:	d1ba      	bne.n	1095a <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_USERNAME;
   109e4:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	if (client->password != NULL) {
   109e8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   109ea:	b138      	cbz	r0, 109fc <connect_request_encode+0xe0>
		err_code = pack_utf8_str(client->password, buf);
   109ec:	4641      	mov	r1, r8
   109ee:	f00d ffbf 	bl	1e970 <pack_utf8_str>
		if (err_code != 0) {
   109f2:	4603      	mov	r3, r0
   109f4:	2800      	cmp	r0, #0
   109f6:	d1b0      	bne.n	1095a <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_PASSWORD;
   109f8:	f044 0440 	orr.w	r4, r4, #64	; 0x40
	*connect_flags_pos = connect_flags;
   109fc:	7034      	strb	r4, [r6, #0]
	return mqtt_encode_fixed_header(message_type, start, buf);
   109fe:	4642      	mov	r2, r8
   10a00:	4629      	mov	r1, r5
}
   10a02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   10a06:	2010      	movs	r0, #16
   10a08:	f00d bfcd 	b.w	1e9a6 <mqtt_encode_fixed_header>
	return pack_uint16(0x0000, buf);
   10a0c:	f00d ff9e 	bl	1e94c <pack_uint16>
   10a10:	e7dd      	b.n	109ce <connect_request_encode+0xb2>
   10a12:	bf00      	nop
   10a14:	00020bf8 	.word	0x00020bf8
   10a18:	00020c00 	.word	0x00020c00

00010a1c <disconnect_encode>:

	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
}

int disconnect_encode(struct buf_ctx *buf)
{
   10a1c:	b510      	push	{r4, lr}
   10a1e:	4604      	mov	r4, r0
	if (buf->end - buf->cur < sizeof(disc_packet)) {
   10a20:	e9d0 0300 	ldrd	r0, r3, [r0]
   10a24:	1a1b      	subs	r3, r3, r0
   10a26:	2b01      	cmp	r3, #1
   10a28:	d908      	bls.n	10a3c <disconnect_encode+0x20>
		return -ENOMEM;
	}

	memcpy(buf->cur, disc_packet, sizeof(disc_packet));
   10a2a:	2202      	movs	r2, #2
   10a2c:	4905      	ldr	r1, [pc, #20]	; (10a44 <disconnect_encode+0x28>)
   10a2e:	f00d fe10 	bl	1e652 <memcpy>
	buf->end = buf->cur + sizeof(disc_packet);

	return 0;
   10a32:	2000      	movs	r0, #0
	buf->end = buf->cur + sizeof(disc_packet);
   10a34:	6823      	ldr	r3, [r4, #0]
   10a36:	3302      	adds	r3, #2
   10a38:	6063      	str	r3, [r4, #4]
}
   10a3a:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   10a3c:	f06f 000b 	mvn.w	r0, #11
   10a40:	e7fb      	b.n	10a3a <disconnect_encode+0x1e>
   10a42:	bf00      	nop
   10a44:	00021c70 	.word	0x00021c70

00010a48 <ping_request_encode>:

	return mqtt_encode_fixed_header(message_type, start, buf);
}

int ping_request_encode(struct buf_ctx *buf)
{
   10a48:	b510      	push	{r4, lr}
   10a4a:	4604      	mov	r4, r0
	if (buf->end - buf->cur < sizeof(ping_packet)) {
   10a4c:	e9d0 0300 	ldrd	r0, r3, [r0]
   10a50:	1a1b      	subs	r3, r3, r0
   10a52:	2b01      	cmp	r3, #1
   10a54:	d908      	bls.n	10a68 <ping_request_encode+0x20>
		return -ENOMEM;
	}

	memcpy(buf->cur, ping_packet, sizeof(ping_packet));
   10a56:	2202      	movs	r2, #2
   10a58:	4905      	ldr	r1, [pc, #20]	; (10a70 <ping_request_encode+0x28>)
   10a5a:	f00d fdfa 	bl	1e652 <memcpy>
	buf->end = buf->cur + sizeof(ping_packet);

	return 0;
   10a5e:	2000      	movs	r0, #0
	buf->end = buf->cur + sizeof(ping_packet);
   10a60:	6823      	ldr	r3, [r4, #0]
   10a62:	3302      	adds	r3, #2
   10a64:	6063      	str	r3, [r4, #4]
}
   10a66:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   10a68:	f06f 000b 	mvn.w	r0, #11
   10a6c:	e7fb      	b.n	10a66 <ping_request_encode+0x1e>
   10a6e:	bf00      	nop
   10a70:	00021c72 	.word	0x00021c72

00010a74 <mqtt_transport_connect>:
#endif /* CONFIG_MQTT_LIB_WEBSOCKET */
};

int mqtt_transport_connect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].connect(client);
   10a74:	2314      	movs	r3, #20
   10a76:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   10a7a:	4353      	muls	r3, r2
   10a7c:	4a01      	ldr	r2, [pc, #4]	; (10a84 <mqtt_transport_connect+0x10>)
   10a7e:	58d3      	ldr	r3, [r2, r3]
   10a80:	4718      	bx	r3
   10a82:	bf00      	nop
   10a84:	00020c08 	.word	0x00020c08

00010a88 <mqtt_transport_write>:
}

int mqtt_transport_write(struct mqtt_client *client, const uint8_t *data,
			 uint32_t datalen)
{
   10a88:	b430      	push	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   10a8a:	2514      	movs	r5, #20
   10a8c:	4c03      	ldr	r4, [pc, #12]	; (10a9c <mqtt_transport_write+0x14>)
   10a8e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   10a92:	fb05 4303 	mla	r3, r5, r3, r4
							  datalen);
}
   10a96:	bc30      	pop	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   10a98:	685b      	ldr	r3, [r3, #4]
   10a9a:	4718      	bx	r3
   10a9c:	00020c08 	.word	0x00020c08

00010aa0 <mqtt_transport_write_msg>:

int mqtt_transport_write_msg(struct mqtt_client *client,
			     const struct msghdr *message)
{
   10aa0:	b410      	push	{r4}
	return transport_fn[client->transport.type].write_msg(client, message);
   10aa2:	2414      	movs	r4, #20
   10aa4:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   10aa8:	4a03      	ldr	r2, [pc, #12]	; (10ab8 <mqtt_transport_write_msg+0x18>)
   10aaa:	fb04 2303 	mla	r3, r4, r3, r2
}
   10aae:	f85d 4b04 	ldr.w	r4, [sp], #4
	return transport_fn[client->transport.type].write_msg(client, message);
   10ab2:	689b      	ldr	r3, [r3, #8]
   10ab4:	4718      	bx	r3
   10ab6:	bf00      	nop
   10ab8:	00020c08 	.word	0x00020c08

00010abc <mqtt_transport_read>:

int mqtt_transport_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			bool shall_block)
{
   10abc:	b470      	push	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   10abe:	2614      	movs	r6, #20
   10ac0:	4d04      	ldr	r5, [pc, #16]	; (10ad4 <mqtt_transport_read+0x18>)
   10ac2:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
   10ac6:	fb06 5404 	mla	r4, r6, r4, r5
   10aca:	68e4      	ldr	r4, [r4, #12]
   10acc:	46a4      	mov	ip, r4
							 shall_block);
}
   10ace:	bc70      	pop	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   10ad0:	4760      	bx	ip
   10ad2:	bf00      	nop
   10ad4:	00020c08 	.word	0x00020c08

00010ad8 <sys_mutex_unlock>:
	return k_mutex_lock(&mutex->kernel_mutex, timeout);
}

static inline int sys_mutex_unlock(struct sys_mutex *mutex)
{
	if (mutex->kernel_mutex.lock_count == 0) {
   10ad8:	68c2      	ldr	r2, [r0, #12]
{
   10ada:	b508      	push	{r3, lr}
	if (mutex->kernel_mutex.lock_count == 0) {
   10adc:	b142      	cbz	r2, 10af0 <sys_mutex_unlock+0x18>
		return -EINVAL;
	}

	if (mutex->kernel_mutex.owner != _current) {
   10ade:	4b07      	ldr	r3, [pc, #28]	; (10afc <sys_mutex_unlock+0x24>)
   10ae0:	6882      	ldr	r2, [r0, #8]
   10ae2:	689b      	ldr	r3, [r3, #8]
   10ae4:	429a      	cmp	r2, r3
   10ae6:	d106      	bne.n	10af6 <sys_mutex_unlock+0x1e>
	return z_impl_k_mutex_unlock(mutex);
   10ae8:	f00b fbe6 	bl	1c2b8 <z_impl_k_mutex_unlock>
		return -EPERM;
	}

	k_mutex_unlock(&mutex->kernel_mutex);
	return 0;
   10aec:	2000      	movs	r0, #0
}
   10aee:	bd08      	pop	{r3, pc}
		return -EINVAL;
   10af0:	f06f 0015 	mvn.w	r0, #21
   10af4:	e7fb      	b.n	10aee <sys_mutex_unlock+0x16>
		return -EPERM;
   10af6:	f04f 30ff 	mov.w	r0, #4294967295
   10afa:	e7f8      	b.n	10aee <sys_mutex_unlock+0x16>
   10afc:	200210b4 	.word	0x200210b4

00010b00 <z_impl_sys_rand32_get>:

static const struct device *entropy_driver;

#if defined(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR)
uint32_t z_impl_sys_rand32_get(void)
{
   10b00:	b513      	push	{r0, r1, r4, lr}
	const struct device *dev = entropy_driver;
   10b02:	4c0a      	ldr	r4, [pc, #40]	; (10b2c <z_impl_sys_rand32_get+0x2c>)
   10b04:	6820      	ldr	r0, [r4, #0]
	uint32_t random_num;
	int ret;

	if (unlikely(!dev)) {
   10b06:	b918      	cbnz	r0, 10b10 <z_impl_sys_rand32_get+0x10>
   10b08:	4809      	ldr	r0, [pc, #36]	; (10b30 <z_impl_sys_rand32_get+0x30>)
   10b0a:	f00b f8a5 	bl	1bc58 <z_impl_device_get_binding>
		dev = device_get_binding(DT_CHOSEN_ZEPHYR_ENTROPY_LABEL);
		__ASSERT((dev != NULL),
			"Device driver for %s (DT_CHOSEN_ZEPHYR_ENTROPY_LABEL) not found. "
			"Check your build configuration!",
			DT_CHOSEN_ZEPHYR_ENTROPY_LABEL);
		entropy_driver = dev;
   10b0e:	6020      	str	r0, [r4, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   10b10:	2204      	movs	r2, #4
   10b12:	6883      	ldr	r3, [r0, #8]
   10b14:	eb0d 0102 	add.w	r1, sp, r2
   10b18:	681b      	ldr	r3, [r3, #0]
   10b1a:	4798      	blx	r3
	}

	ret = entropy_get_entropy(dev, (uint8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
   10b1c:	2800      	cmp	r0, #0
   10b1e:	da02      	bge.n	10b26 <z_impl_sys_rand32_get+0x26>
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   10b20:	f7fe ff6a 	bl	f9f8 <z_timer_cycle_get_32>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
   10b24:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
   10b26:	9801      	ldr	r0, [sp, #4]
   10b28:	b002      	add	sp, #8
   10b2a:	bd10      	pop	{r4, pc}
   10b2c:	20020958 	.word	0x20020958
   10b30:	00021c74 	.word	0x00021c74

00010b34 <nrf_gpio_cfg_sense_set>:

NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   10b34:	4a06      	ldr	r2, [pc, #24]	; (10b50 <nrf_gpio_cfg_sense_set+0x1c>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   10b36:	f000 001f 	and.w	r0, r0, #31
   10b3a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   10b3e:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   10b42:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   10b46:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   10b4a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
   10b4e:	4770      	bx	lr
   10b50:	40842500 	.word	0x40842500

00010b54 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   10b54:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   10b56:	4b09      	ldr	r3, [pc, #36]	; (10b7c <gpio_nrfx_init+0x28>)
   10b58:	781a      	ldrb	r2, [r3, #0]
   10b5a:	b96a      	cbnz	r2, 10b78 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   10b5c:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   10b5e:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   10b60:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   10b62:	2105      	movs	r1, #5
   10b64:	f7ff f802 	bl	fb6c <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   10b68:	2031      	movs	r0, #49	; 0x31
   10b6a:	f7fe ffe1 	bl	fb30 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   10b6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   10b72:	4b03      	ldr	r3, [pc, #12]	; (10b80 <gpio_nrfx_init+0x2c>)
   10b74:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   10b78:	2000      	movs	r0, #0
   10b7a:	bd08      	pop	{r3, pc}
   10b7c:	200227c3 	.word	0x200227c3
   10b80:	40031000 	.word	0x40031000

00010b84 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   10b84:	4b28      	ldr	r3, [pc, #160]	; (10c28 <gpio_nrfx_config+0xa4>)
{
   10b86:	b570      	push	{r4, r5, r6, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   10b88:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   10b8a:	4828      	ldr	r0, [pc, #160]	; (10c2c <gpio_nrfx_config+0xa8>)
   10b8c:	4013      	ands	r3, r2
   10b8e:	4283      	cmp	r3, r0
   10b90:	d03b      	beq.n	10c0a <gpio_nrfx_config+0x86>
   10b92:	d80d      	bhi.n	10bb0 <gpio_nrfx_config+0x2c>
   10b94:	2b06      	cmp	r3, #6
   10b96:	d015      	beq.n	10bc4 <gpio_nrfx_config+0x40>
   10b98:	d805      	bhi.n	10ba6 <gpio_nrfx_config+0x22>
   10b9a:	b19b      	cbz	r3, 10bc4 <gpio_nrfx_config+0x40>
   10b9c:	2b02      	cmp	r3, #2
   10b9e:	d036      	beq.n	10c0e <gpio_nrfx_config+0x8a>
   10ba0:	f06f 0015 	mvn.w	r0, #21
   10ba4:	e030      	b.n	10c08 <gpio_nrfx_config+0x84>
   10ba6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   10baa:	d1f9      	bne.n	10ba0 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   10bac:	2301      	movs	r3, #1
   10bae:	e009      	b.n	10bc4 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   10bb0:	481f      	ldr	r0, [pc, #124]	; (10c30 <gpio_nrfx_config+0xac>)
   10bb2:	4283      	cmp	r3, r0
   10bb4:	d02d      	beq.n	10c12 <gpio_nrfx_config+0x8e>
   10bb6:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   10bba:	d02c      	beq.n	10c16 <gpio_nrfx_config+0x92>
   10bbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   10bc0:	d1ee      	bne.n	10ba0 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   10bc2:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   10bc4:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_PULLUP;
   10bc6:	bf4c      	ite	mi
   10bc8:	2503      	movmi	r5, #3
		pull = NRF_GPIO_PIN_NOPULL;
   10bca:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   10bce:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   10bd2:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
   10bd6:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   10bda:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   10bde:	d006      	beq.n	10bee <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   10be0:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   10be4:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   10be6:	d018      	beq.n	10c1a <gpio_nrfx_config+0x96>
			nrf_gpio_port_out_set(reg, BIT(pin));
   10be8:	2201      	movs	r2, #1
   10bea:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   10bec:	60b2      	str	r2, [r6, #8]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   10bee:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
	return 0;
   10bf2:	2000      	movs	r0, #0
   10bf4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    *p_pin = pin_number & 0x1F;
   10bf8:	f001 011f 	and.w	r1, r1, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   10bfc:	4a0d      	ldr	r2, [pc, #52]	; (10c34 <gpio_nrfx_config+0xb0>)
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   10bfe:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   10c02:	3180      	adds	r1, #128	; 0x80
   10c04:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   10c08:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0D1;
   10c0a:	2307      	movs	r3, #7
   10c0c:	e7da      	b.n	10bc4 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   10c0e:	2304      	movs	r3, #4
   10c10:	e7d8      	b.n	10bc4 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   10c12:	2305      	movs	r3, #5
   10c14:	e7d6      	b.n	10bc4 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   10c16:	2303      	movs	r3, #3
   10c18:	e7d4      	b.n	10bc4 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   10c1a:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   10c1c:	bf42      	ittt	mi
   10c1e:	2201      	movmi	r2, #1
   10c20:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   10c22:	60f2      	strmi	r2, [r6, #12]
}
   10c24:	e7e3      	b.n	10bee <gpio_nrfx_config+0x6a>
   10c26:	bf00      	nop
   10c28:	00f00006 	.word	0x00f00006
   10c2c:	00100006 	.word	0x00100006
   10c30:	00400002 	.word	0x00400002
   10c34:	40842500 	.word	0x40842500

00010c38 <gpio_nrfx_pin_interrupt_configure>:
{
   10c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10c3c:	460d      	mov	r5, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   10c3e:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
   10c40:	f8d0 800c 	ldr.w	r8, [r0, #12]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   10c44:	7a08      	ldrb	r0, [r1, #8]
   10c46:	f005 071f 	and.w	r7, r5, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   10c4a:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   10c4e:	ea47 1740 	orr.w	r7, r7, r0, lsl #5
   10c52:	d10a      	bne.n	10c6a <gpio_nrfx_pin_interrupt_configure+0x32>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   10c54:	486e      	ldr	r0, [pc, #440]	; (10e10 <gpio_nrfx_pin_interrupt_configure+0x1d8>)
    *p_pin = pin_number & 0x1F;
   10c56:	f007 011f 	and.w	r1, r7, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   10c5a:	3180      	adds	r1, #128	; 0x80
   10c5c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   10c60:	07c8      	lsls	r0, r1, #31
   10c62:	d508      	bpl.n	10c76 <gpio_nrfx_pin_interrupt_configure+0x3e>
		return -ENOTSUP;
   10c64:	f06f 0022 	mvn.w	r0, #34	; 0x22
   10c68:	e0c2      	b.n	10df0 <gpio_nrfx_pin_interrupt_configure+0x1b8>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   10c6a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   10c6e:	f8d8 100c 	ldr.w	r1, [r8, #12]
   10c72:	f000 80ae 	beq.w	10dd2 <gpio_nrfx_pin_interrupt_configure+0x19a>
   10c76:	2101      	movs	r1, #1
   10c78:	f8d8 000c 	ldr.w	r0, [r8, #12]
   10c7c:	40a9      	lsls	r1, r5
   10c7e:	4301      	orrs	r1, r0
   10c80:	f8c8 100c 	str.w	r1, [r8, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   10c84:	2101      	movs	r1, #1
   10c86:	f8d8 0014 	ldr.w	r0, [r8, #20]
   10c8a:	40a9      	lsls	r1, r5
   10c8c:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   10c90:	f8d8 2018 	ldr.w	r2, [r8, #24]
   10c94:	bf0c      	ite	eq
   10c96:	4308      	orreq	r0, r1
   10c98:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   10c9a:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   10c9e:	bf0c      	ite	eq
   10ca0:	430a      	orreq	r2, r1
   10ca2:	438a      	bicne	r2, r1
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   10ca4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   10ca8:	f04f 0300 	mov.w	r3, #0
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   10cac:	f8c8 2018 	str.w	r2, [r8, #24]
   10cb0:	f8d8 2010 	ldr.w	r2, [r8, #16]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   10cb4:	4e57      	ldr	r6, [pc, #348]	; (10e14 <gpio_nrfx_pin_interrupt_configure+0x1dc>)
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   10cb6:	bf0c      	ite	eq
   10cb8:	4311      	orreq	r1, r2
   10cba:	ea22 0101 	bicne.w	r1, r2, r1
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   10cbe:	f8c8 0014 	str.w	r0, [r8, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   10cc2:	f8c8 1010 	str.w	r1, [r8, #16]
   10cc6:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
   10cca:	b2d2      	uxtb	r2, r2
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   10ccc:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   10cd0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   10cd4:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   10cd8:	428f      	cmp	r7, r1
   10cda:	d17f      	bne.n	10ddc <gpio_nrfx_pin_interrupt_configure+0x1a4>
		    && (intenset & BIT(i))) {
   10cdc:	fa22 f103 	lsr.w	r1, r2, r3
   10ce0:	07c9      	lsls	r1, r1, #31
   10ce2:	d57b      	bpl.n	10ddc <gpio_nrfx_pin_interrupt_configure+0x1a4>
			(void)atomic_and(mask, ~BIT(i));
   10ce4:	2201      	movs	r2, #1
   10ce6:	409a      	lsls	r2, r3
   10ce8:	43d0      	mvns	r0, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10cea:	494b      	ldr	r1, [pc, #300]	; (10e18 <gpio_nrfx_pin_interrupt_configure+0x1e0>)
   10cec:	e8d1 4fef 	ldaex	r4, [r1]
   10cf0:	4004      	ands	r4, r0
   10cf2:	e8c1 4fec 	stlex	ip, r4, [r1]
   10cf6:	f1bc 0f00 	cmp.w	ip, #0
   10cfa:	d1f7      	bne.n	10cec <gpio_nrfx_pin_interrupt_configure+0xb4>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   10cfc:	009b      	lsls	r3, r3, #2
   10cfe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   10d02:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   10d06:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   10d0a:	f021 0101 	bic.w	r1, r1, #1
   10d0e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->INTENCLR = mask;
   10d12:	f8c6 2308 	str.w	r2, [r6, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   10d16:	2100      	movs	r1, #0
   10d18:	4638      	mov	r0, r7
   10d1a:	f7ff ff0b 	bl	10b34 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   10d1e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   10d22:	40eb      	lsrs	r3, r5
   10d24:	f013 0301 	ands.w	r3, r3, #1
   10d28:	d051      	beq.n	10dce <gpio_nrfx_pin_interrupt_configure+0x196>
		if (data->trig_edge & BIT(pin)) {
   10d2a:	f8d8 3014 	ldr.w	r3, [r8, #20]
   10d2e:	40eb      	lsrs	r3, r5
   10d30:	f013 0401 	ands.w	r4, r3, #1
   10d34:	d05e      	beq.n	10df4 <gpio_nrfx_pin_interrupt_configure+0x1bc>
			if (data->double_edge & BIT(pin)) {
   10d36:	f8d8 3018 	ldr.w	r3, [r8, #24]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   10d3a:	2200      	movs	r2, #0
			if (data->double_edge & BIT(pin)) {
   10d3c:	40eb      	lsrs	r3, r5
   10d3e:	07db      	lsls	r3, r3, #31
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   10d40:	bf48      	it	mi
   10d42:	2503      	movmi	r5, #3
		atomic_val_t prev = atomic_or(mask, BIT(channel));
   10d44:	f04f 0c01 	mov.w	ip, #1
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   10d48:	bf5f      	itttt	pl
   10d4a:	f8d8 1010 	ldrpl.w	r1, [r8, #16]
   10d4e:	fa21 f505 	lsrpl.w	r5, r1, r5
   10d52:	f005 0501 	andpl.w	r5, r5, #1
   10d56:	f1c5 0502 	rsbpl	r5, r5, #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10d5a:	492f      	ldr	r1, [pc, #188]	; (10e18 <gpio_nrfx_pin_interrupt_configure+0x1e0>)
   10d5c:	bf58      	it	pl
   10d5e:	b2ed      	uxtbpl	r5, r5
		atomic_val_t prev = atomic_or(mask, BIT(channel));
   10d60:	fa0c f402 	lsl.w	r4, ip, r2
   10d64:	e8d1 0fef 	ldaex	r0, [r1]
   10d68:	ea40 0304 	orr.w	r3, r0, r4
   10d6c:	e8c1 3fee 	stlex	lr, r3, [r1]
   10d70:	f1be 0f00 	cmp.w	lr, #0
   10d74:	d1f6      	bne.n	10d64 <gpio_nrfx_pin_interrupt_configure+0x12c>
		if ((prev & BIT(channel)) == 0) {
   10d76:	40d0      	lsrs	r0, r2
   10d78:	f010 0301 	ands.w	r3, r0, #1
   10d7c:	d133      	bne.n	10de6 <gpio_nrfx_pin_interrupt_configure+0x1ae>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   10d7e:	0091      	lsls	r1, r2, #2
   10d80:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   10d84:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
   10d88:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
			nrf_gpiote_event_t evt =
   10d8c:	3240      	adds	r2, #64	; 0x40
   10d8e:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
   10d92:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   10d96:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   10d9a:	023f      	lsls	r7, r7, #8
   10d9c:	0092      	lsls	r2, r2, #2
   10d9e:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
   10da2:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
    return ((uint32_t)p_reg + event);
   10da6:	b292      	uxth	r2, r2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   10da8:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
    return ((uint32_t)p_reg + event);
   10dac:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   10db0:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   10db4:	4307      	orrs	r7, r0
   10db6:	f8c1 7510 	str.w	r7, [r1, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   10dba:	6013      	str	r3, [r2, #0]
   10dbc:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   10dbe:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
   10dc2:	f042 0201 	orr.w	r2, r2, #1
   10dc6:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
    p_reg->INTENSET = mask;
   10dca:	f8c6 4304 	str.w	r4, [r6, #772]	; 0x304
	int res = 0;
   10dce:	4618      	mov	r0, r3
   10dd0:	e00e      	b.n	10df0 <gpio_nrfx_pin_interrupt_configure+0x1b8>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   10dd2:	2001      	movs	r0, #1
   10dd4:	40a8      	lsls	r0, r5
   10dd6:	ea21 0100 	bic.w	r1, r1, r0
   10dda:	e751      	b.n	10c80 <gpio_nrfx_pin_interrupt_configure+0x48>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   10ddc:	3301      	adds	r3, #1
   10dde:	2b08      	cmp	r3, #8
   10de0:	f47f af74 	bne.w	10ccc <gpio_nrfx_pin_interrupt_configure+0x94>
   10de4:	e797      	b.n	10d16 <gpio_nrfx_pin_interrupt_configure+0xde>
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   10de6:	3201      	adds	r2, #1
   10de8:	2a08      	cmp	r2, #8
   10dea:	d1b9      	bne.n	10d60 <gpio_nrfx_pin_interrupt_configure+0x128>
	return -ENODEV;
   10dec:	f06f 0012 	mvn.w	r0, #18
}
   10df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((BIT(pin) & data->int_active_level) != 0U) {
   10df4:	f8d8 1010 	ldr.w	r1, [r8, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   10df8:	4638      	mov	r0, r7
	if ((BIT(pin) & data->int_active_level) != 0U) {
   10dfa:	40e9      	lsrs	r1, r5
   10dfc:	f001 0101 	and.w	r1, r1, #1
   10e00:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   10e04:	b2c9      	uxtb	r1, r1
   10e06:	f7ff fe95 	bl	10b34 <nrf_gpio_cfg_sense_set>
	int res = 0;
   10e0a:	4620      	mov	r0, r4
   10e0c:	e7f0      	b.n	10df0 <gpio_nrfx_pin_interrupt_configure+0x1b8>
   10e0e:	bf00      	nop
   10e10:	40842500 	.word	0x40842500
   10e14:	40031000 	.word	0x40031000
   10e18:	20020978 	.word	0x20020978

00010e1c <gpiote_event_handler>:
{
   10e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10e20:	4e3c      	ldr	r6, [pc, #240]	; (10f14 <gpiote_event_handler+0xf8>)
   10e22:	6837      	ldr	r7, [r6, #0]
	if (port_event) {
   10e24:	2f00      	cmp	r7, #0
   10e26:	d04f      	beq.n	10ec8 <gpiote_event_handler+0xac>
	uint32_t bit = 1U << pin;
   10e28:	f04f 0801 	mov.w	r8, #1
	uint32_t pin = 0U;
   10e2c:	f04f 0900 	mov.w	r9, #0
	uint32_t out = data->pin_int_en;
   10e30:	4b39      	ldr	r3, [pc, #228]	; (10f18 <gpiote_event_handler+0xfc>)
   10e32:	68dd      	ldr	r5, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   10e34:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   10e38:	430a      	orrs	r2, r1
   10e3a:	ea25 0502 	bic.w	r5, r5, r2
    return p_reg->IN;
   10e3e:	4a37      	ldr	r2, [pc, #220]	; (10f1c <gpiote_event_handler+0x100>)
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   10e40:	691b      	ldr	r3, [r3, #16]
   10e42:	6914      	ldr	r4, [r2, #16]
   10e44:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
   10e46:	ea25 0404 	bic.w	r4, r5, r4
	while (level_pins) {
   10e4a:	bb75      	cbnz	r5, 10eaa <gpiote_event_handler+0x8e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   10e4c:	6035      	str	r5, [r6, #0]
   10e4e:	6833      	ldr	r3, [r6, #0]
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   10e50:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   10e52:	2501      	movs	r5, #1
   10e54:	461e      	mov	r6, r3
    return p_reg->INTENSET & mask;
   10e56:	4832      	ldr	r0, [pc, #200]	; (10f20 <gpiote_event_handler+0x104>)
   10e58:	4932      	ldr	r1, [pc, #200]	; (10f24 <gpiote_event_handler+0x108>)
   10e5a:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
   10e5e:	fa05 fc03 	lsl.w	ip, r5, r3
   10e62:	ea1c 0f02 	tst.w	ip, r2
   10e66:	d00f      	beq.n	10e88 <gpiote_event_handler+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10e68:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   10e6c:	b162      	cbz	r2, 10e88 <gpiote_event_handler+0x6c>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   10e6e:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   10e72:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   10e76:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   10e7a:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   10e7e:	fa05 f202 	lsl.w	r2, r5, r2
   10e82:	4314      	orrs	r4, r2
   10e84:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   10e88:	3301      	adds	r3, #1
   10e8a:	2b08      	cmp	r3, #8
   10e8c:	d1e5      	bne.n	10e5a <gpiote_event_handler+0x3e>
	if (fired_triggers[0]) {
   10e8e:	b9ec      	cbnz	r4, 10ecc <gpiote_event_handler+0xb0>
	if (port_event) {
   10e90:	b14f      	cbz	r7, 10ea6 <gpiote_event_handler+0x8a>
	uint32_t bit = 1U << pin;
   10e92:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   10e94:	2700      	movs	r7, #0
	uint32_t out = data->pin_int_en;
   10e96:	4d20      	ldr	r5, [pc, #128]	; (10f18 <gpiote_event_handler+0xfc>)
   10e98:	68ec      	ldr	r4, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   10e9a:	e9d5 2105 	ldrd	r2, r1, [r5, #20]
   10e9e:	430a      	orrs	r2, r1
   10ea0:	ea24 0402 	bic.w	r4, r4, r2
	while (level_pins) {
   10ea4:	bb1c      	cbnz	r4, 10eee <gpiote_event_handler+0xd2>
}
   10ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (level_pins & bit) {
   10eaa:	ea15 0f08 	tst.w	r5, r8
   10eae:	d006      	beq.n	10ebe <gpiote_event_handler+0xa2>
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   10eb0:	2100      	movs	r1, #0
   10eb2:	f009 001f 	and.w	r0, r9, #31
   10eb6:	f7ff fe3d 	bl	10b34 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   10eba:	ea25 0508 	bic.w	r5, r5, r8
		++pin;
   10ebe:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
   10ec2:	ea4f 0848 	mov.w	r8, r8, lsl #1
   10ec6:	e7c0      	b.n	10e4a <gpiote_event_handler+0x2e>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   10ec8:	463c      	mov	r4, r7
   10eca:	e7c1      	b.n	10e50 <gpiote_event_handler+0x34>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   10ecc:	4b12      	ldr	r3, [pc, #72]	; (10f18 <gpiote_event_handler+0xfc>)
   10ece:	6859      	ldr	r1, [r3, #4]
   10ed0:	2900      	cmp	r1, #0
   10ed2:	d0dd      	beq.n	10e90 <gpiote_event_handler+0x74>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   10ed4:	680d      	ldr	r5, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   10ed6:	4e14      	ldr	r6, [pc, #80]	; (10f28 <gpiote_event_handler+0x10c>)
		if (cb->pin_mask & pins) {
   10ed8:	688a      	ldr	r2, [r1, #8]
   10eda:	4022      	ands	r2, r4
   10edc:	d002      	beq.n	10ee4 <gpiote_event_handler+0xc8>
			cb->handler(port, cb, cb->pin_mask & pins);
   10ede:	4630      	mov	r0, r6
   10ee0:	684b      	ldr	r3, [r1, #4]
   10ee2:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   10ee4:	2d00      	cmp	r5, #0
   10ee6:	d0d3      	beq.n	10e90 <gpiote_event_handler+0x74>
   10ee8:	4629      	mov	r1, r5
   10eea:	682d      	ldr	r5, [r5, #0]
   10eec:	e7f4      	b.n	10ed8 <gpiote_event_handler+0xbc>
		if (level_pins & bit) {
   10eee:	4226      	tst	r6, r4
   10ef0:	d00c      	beq.n	10f0c <gpiote_event_handler+0xf0>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   10ef2:	6929      	ldr	r1, [r5, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   10ef4:	f007 001f 	and.w	r0, r7, #31
	if ((BIT(pin) & data->int_active_level) != 0U) {
   10ef8:	40f9      	lsrs	r1, r7
   10efa:	f001 0101 	and.w	r1, r1, #1
   10efe:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   10f02:	b2c9      	uxtb	r1, r1
   10f04:	f7ff fe16 	bl	10b34 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   10f08:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   10f0c:	3701      	adds	r7, #1
		bit <<= 1;
   10f0e:	0076      	lsls	r6, r6, #1
   10f10:	e7c8      	b.n	10ea4 <gpiote_event_handler+0x88>
   10f12:	bf00      	nop
   10f14:	4003117c 	.word	0x4003117c
   10f18:	2002095c 	.word	0x2002095c
   10f1c:	40842500 	.word	0x40842500
   10f20:	40031000 	.word	0x40031000
   10f24:	40031100 	.word	0x40031100
   10f28:	200200cc 	.word	0x200200cc

00010f2c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   10f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   10f2e:	794b      	ldrb	r3, [r1, #5]
   10f30:	2b01      	cmp	r3, #1
   10f32:	d029      	beq.n	10f88 <uarte_nrfx_configure+0x5c>
   10f34:	2b03      	cmp	r3, #3
   10f36:	d124      	bne.n	10f82 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   10f38:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   10f3a:	798b      	ldrb	r3, [r1, #6]
   10f3c:	2b03      	cmp	r3, #3
   10f3e:	d120      	bne.n	10f82 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   10f40:	79cc      	ldrb	r4, [r1, #7]
   10f42:	b124      	cbz	r4, 10f4e <uarte_nrfx_configure+0x22>
   10f44:	2c01      	cmp	r4, #1
   10f46:	d11c      	bne.n	10f82 <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   10f48:	6843      	ldr	r3, [r0, #4]
   10f4a:	791b      	ldrb	r3, [r3, #4]
   10f4c:	b1cb      	cbz	r3, 10f82 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   10f4e:	790a      	ldrb	r2, [r1, #4]
   10f50:	b112      	cbz	r2, 10f58 <uarte_nrfx_configure+0x2c>
   10f52:	2a02      	cmp	r2, #2
   10f54:	d115      	bne.n	10f82 <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   10f56:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   10f58:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   10f5a:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   10f5c:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   10f60:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   10f62:	d065      	beq.n	11030 <uarte_nrfx_configure+0x104>
   10f64:	d82d      	bhi.n	10fc2 <uarte_nrfx_configure+0x96>
   10f66:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   10f6a:	d064      	beq.n	11036 <uarte_nrfx_configure+0x10a>
   10f6c:	d816      	bhi.n	10f9c <uarte_nrfx_configure+0x70>
   10f6e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   10f72:	d062      	beq.n	1103a <uarte_nrfx_configure+0x10e>
   10f74:	d80a      	bhi.n	10f8c <uarte_nrfx_configure+0x60>
   10f76:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   10f7a:	d061      	beq.n	11040 <uarte_nrfx_configure+0x114>
   10f7c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   10f80:	d061      	beq.n	11046 <uarte_nrfx_configure+0x11a>
   10f82:	f06f 0022 	mvn.w	r0, #34	; 0x22
   10f86:	e052      	b.n	1102e <uarte_nrfx_configure+0x102>
	switch (cfg->stop_bits) {
   10f88:	2600      	movs	r6, #0
   10f8a:	e7d6      	b.n	10f3a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   10f8c:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   10f90:	d05c      	beq.n	1104c <uarte_nrfx_configure+0x120>
   10f92:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   10f96:	d1f4      	bne.n	10f82 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   10f98:	4b37      	ldr	r3, [pc, #220]	; (11078 <uarte_nrfx_configure+0x14c>)
   10f9a:	e03c      	b.n	11016 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   10f9c:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   10fa0:	d057      	beq.n	11052 <uarte_nrfx_configure+0x126>
   10fa2:	d807      	bhi.n	10fb4 <uarte_nrfx_configure+0x88>
   10fa4:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   10fa8:	d055      	beq.n	11056 <uarte_nrfx_configure+0x12a>
   10faa:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   10fae:	d1e8      	bne.n	10f82 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   10fb0:	4b32      	ldr	r3, [pc, #200]	; (1107c <uarte_nrfx_configure+0x150>)
   10fb2:	e030      	b.n	11016 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   10fb4:	f647 2712 	movw	r7, #31250	; 0x7a12
   10fb8:	42bb      	cmp	r3, r7
   10fba:	d1e2      	bne.n	10f82 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   10fbc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   10fc0:	e029      	b.n	11016 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   10fc2:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   10fc6:	d048      	beq.n	1105a <uarte_nrfx_configure+0x12e>
   10fc8:	d813      	bhi.n	10ff2 <uarte_nrfx_configure+0xc6>
   10fca:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   10fce:	d047      	beq.n	11060 <uarte_nrfx_configure+0x134>
   10fd0:	d809      	bhi.n	10fe6 <uarte_nrfx_configure+0xba>
   10fd2:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   10fd6:	42bb      	cmp	r3, r7
   10fd8:	d044      	beq.n	11064 <uarte_nrfx_configure+0x138>
   10fda:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   10fde:	d1d0      	bne.n	10f82 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   10fe0:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   10fe4:	e017      	b.n	11016 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   10fe6:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   10fea:	d1ca      	bne.n	10f82 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   10fec:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   10ff0:	e011      	b.n	11016 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   10ff2:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   10ff6:	d038      	beq.n	1106a <uarte_nrfx_configure+0x13e>
   10ff8:	d808      	bhi.n	1100c <uarte_nrfx_configure+0xe0>
   10ffa:	4f21      	ldr	r7, [pc, #132]	; (11080 <uarte_nrfx_configure+0x154>)
   10ffc:	42bb      	cmp	r3, r7
   10ffe:	d037      	beq.n	11070 <uarte_nrfx_configure+0x144>
   11000:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   11004:	d1bd      	bne.n	10f82 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   11006:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1100a:	e004      	b.n	11016 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1100c:	4f1d      	ldr	r7, [pc, #116]	; (11084 <uarte_nrfx_configure+0x158>)
   1100e:	42bb      	cmp	r3, r7
   11010:	d1b7      	bne.n	10f82 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   11012:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   11016:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   1101a:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
   1101c:	4334      	orrs	r4, r6
   1101e:	4322      	orrs	r2, r4
   11020:	3304      	adds	r3, #4
   11022:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   11024:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   11028:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1102c:	2000      	movs	r0, #0
}
   1102e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   11030:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   11034:	e7ef      	b.n	11016 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   11036:	4b14      	ldr	r3, [pc, #80]	; (11088 <uarte_nrfx_configure+0x15c>)
   11038:	e7ed      	b.n	11016 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1103a:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1103e:	e7ea      	b.n	11016 <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
   11040:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   11044:	e7e7      	b.n	11016 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   11046:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1104a:	e7e4      	b.n	11016 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1104c:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   11050:	e7e1      	b.n	11016 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   11052:	4b0e      	ldr	r3, [pc, #56]	; (1108c <uarte_nrfx_configure+0x160>)
   11054:	e7df      	b.n	11016 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   11056:	4b0e      	ldr	r3, [pc, #56]	; (11090 <uarte_nrfx_configure+0x164>)
   11058:	e7dd      	b.n	11016 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1105a:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1105e:	e7da      	b.n	11016 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   11060:	4b0c      	ldr	r3, [pc, #48]	; (11094 <uarte_nrfx_configure+0x168>)
   11062:	e7d8      	b.n	11016 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   11064:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   11068:	e7d5      	b.n	11016 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1106a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1106e:	e7d2      	b.n	11016 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   11070:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   11074:	e7cf      	b.n	11016 <uarte_nrfx_configure+0xea>
   11076:	bf00      	nop
   11078:	0013b000 	.word	0x0013b000
   1107c:	004ea000 	.word	0x004ea000
   11080:	0003d090 	.word	0x0003d090
   11084:	000f4240 	.word	0x000f4240
   11088:	00275000 	.word	0x00275000
   1108c:	0075c000 	.word	0x0075c000
   11090:	003af000 	.word	0x003af000
   11094:	013a9000 	.word	0x013a9000

00011098 <uarte_instance_init.constprop.0>:
	.irq_update		= uarte_nrfx_irq_update,
	.irq_callback_set	= uarte_nrfx_irq_callback_set,
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int uarte_instance_init(const struct device *dev,
   11098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	nrf_uarte_disable(uarte);

	data->dev = dev;

	nrf_gpio_pin_write(config->pseltxd, 1);
   1109a:	680f      	ldr	r7, [r1, #0]
static int uarte_instance_init(const struct device *dev,
   1109c:	460d      	mov	r5, r1
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1109e:	2101      	movs	r1, #1
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   110a0:	f04f 0c00 	mov.w	ip, #0
	return config->uarte_regs;
   110a4:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   110a6:	68c6      	ldr	r6, [r0, #12]
	return config->uarte_regs;
   110a8:	681c      	ldr	r4, [r3, #0]
    *p_pin = pin_number & 0x1F;
   110aa:	f007 021f 	and.w	r2, r7, #31
    p_reg->OUTSET = set_mask;
   110ae:	4b2b      	ldr	r3, [pc, #172]	; (1115c <uarte_instance_init.constprop.0+0xc4>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   110b0:	4091      	lsls	r1, r2
   110b2:	f8c4 c500 	str.w	ip, [r4, #1280]	; 0x500
	data->dev = dev;
   110b6:	6030      	str	r0, [r6, #0]
    p_reg->OUTSET = set_mask;
   110b8:	6099      	str	r1, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   110ba:	2103      	movs	r1, #3
   110bc:	3280      	adds	r2, #128	; 0x80
   110be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   110c2:	686a      	ldr	r2, [r5, #4]
   110c4:	1c51      	adds	r1, r2, #1
    *p_pin = pin_number & 0x1F;
   110c6:	bf1e      	ittt	ne
   110c8:	f002 011f 	andne.w	r1, r2, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   110cc:	3180      	addne	r1, #128	; 0x80
   110ce:	f843 c021 	strne.w	ip, [r3, r1, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   110d2:	68a9      	ldr	r1, [r5, #8]
    p_reg->PSEL.TXD = pseltxd;
   110d4:	f8c4 750c 	str.w	r7, [r4, #1292]	; 0x50c
   110d8:	1c4f      	adds	r7, r1, #1
   110da:	bf18      	it	ne
   110dc:	2700      	movne	r7, #0
    p_reg->PSEL.RXD = pselrxd;
   110de:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    *p_pin = pin_number & 0x1F;
   110e2:	bf1e      	ittt	ne
   110e4:	f001 021f 	andne.w	r2, r1, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   110e8:	3280      	addne	r2, #128	; 0x80
   110ea:	f843 7022 	strne.w	r7, [r3, r2, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_NOPULL);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   110ee:	68ef      	ldr	r7, [r5, #12]
   110f0:	1c7a      	adds	r2, r7, #1
   110f2:	d00c      	beq.n	1110e <uarte_instance_init.constprop.0+0x76>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   110f4:	f04f 0c01 	mov.w	ip, #1
    *p_pin = pin_number & 0x1F;
   110f8:	f007 021f 	and.w	r2, r7, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   110fc:	fa0c fc02 	lsl.w	ip, ip, r2
    p_reg->OUTSET = set_mask;
   11100:	f8c3 c008 	str.w	ip, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   11104:	f04f 0c03 	mov.w	ip, #3
   11108:	3280      	adds	r2, #128	; 0x80
   1110a:	f843 c022 	str.w	ip, [r3, r2, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   1110e:	f8c4 7508 	str.w	r7, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   11112:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
		nrf_gpio_cfg_output(config->pselrts);
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   11116:	68c1      	ldr	r1, [r0, #12]
   11118:	3104      	adds	r1, #4
   1111a:	f7ff ff07 	bl	10f2c <uarte_nrfx_configure>
	if (err) {
   1111e:	b9d8      	cbnz	r0, 11158 <uarte_instance_init.constprop.0+0xc0>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   11120:	2308      	movs	r3, #8
   11122:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	}
#endif
	/* Enable receiver and transmitter */
	nrf_uarte_enable(uarte);

	if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   11126:	686b      	ldr	r3, [r5, #4]
   11128:	3301      	adds	r3, #1
   1112a:	d00b      	beq.n	11144 <uarte_instance_init.constprop.0+0xac>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1112c:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
   11130:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   11134:	f106 0314 	add.w	r3, r6, #20

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   11138:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1113c:	2301      	movs	r3, #1
   1113e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11142:	6023      	str	r3, [r4, #0]
		/* Set ENDTX event by requesting fake (zero-length) transfer.
		 * Pointer to RAM variable (data->tx_buffer) is set because
		 * otherwise such operation may result in HardFault or RAM
		 * corruption.
		 */
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
   11144:	68f3      	ldr	r3, [r6, #12]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   11146:	689b      	ldr	r3, [r3, #8]
   11148:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1114c:	2300      	movs	r3, #0
   1114e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11152:	2301      	movs	r3, #1
   11154:	60a3      	str	r3, [r4, #8]
   11156:	60e3      	str	r3, [r4, #12]
		/* switch off transmitter to save an energy */
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
	}
#endif
	return 0;
}
   11158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1115a:	bf00      	nop
   1115c:	40842500 	.word	0x40842500

00011160 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   11160:	b530      	push	{r4, r5, lr}
   11162:	b085      	sub	sp, #20
   11164:	466c      	mov	r4, sp
   11166:	4605      	mov	r5, r0
   11168:	4b08      	ldr	r3, [pc, #32]	; (1118c <uarte_1_init+0x2c>)
   1116a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1116c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   11170:	2200      	movs	r2, #0
   11172:	2101      	movs	r1, #1
   11174:	2009      	movs	r0, #9
   11176:	f7fe fcf9 	bl	fb6c <z_arm_irq_priority_set>
   1117a:	2009      	movs	r0, #9
   1117c:	f7fe fcd8 	bl	fb30 <arch_irq_enable>
   11180:	4621      	mov	r1, r4
   11182:	4628      	mov	r0, r5
   11184:	f7ff ff88 	bl	11098 <uarte_instance_init.constprop.0>
   11188:	b005      	add	sp, #20
   1118a:	bd30      	pop	{r4, r5, pc}
   1118c:	00020af0 	.word	0x00020af0

00011190 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   11190:	b530      	push	{r4, r5, lr}
   11192:	b085      	sub	sp, #20
   11194:	466c      	mov	r4, sp
   11196:	4605      	mov	r5, r0
   11198:	4b08      	ldr	r3, [pc, #32]	; (111bc <uarte_0_init+0x2c>)
   1119a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1119c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   111a0:	2200      	movs	r2, #0
   111a2:	2101      	movs	r1, #1
   111a4:	2008      	movs	r0, #8
   111a6:	f7fe fce1 	bl	fb6c <z_arm_irq_priority_set>
   111aa:	2008      	movs	r0, #8
   111ac:	f7fe fcc0 	bl	fb30 <arch_irq_enable>
   111b0:	4621      	mov	r1, r4
   111b2:	4628      	mov	r0, r5
   111b4:	f7ff ff70 	bl	11098 <uarte_instance_init.constprop.0>
   111b8:	b005      	add	sp, #20
   111ba:	bd30      	pop	{r4, r5, pc}
   111bc:	00020b00 	.word	0x00020b00

000111c0 <_bsdlib_init>:
extern void ipc_proxy_irq_handler(void);

static int init_ret;

static int _bsdlib_init(const struct device *unused)
{
   111c0:	b530      	push	{r4, r5, lr}
	if (!first_time_init) {
   111c2:	4d19      	ldr	r5, [pc, #100]	; (11228 <_bsdlib_init+0x68>)
   111c4:	4c19      	ldr	r4, [pc, #100]	; (1122c <_bsdlib_init+0x6c>)
   111c6:	782b      	ldrb	r3, [r5, #0]
{
   111c8:	b085      	sub	sp, #20
	if (!first_time_init) {
   111ca:	b933      	cbnz	r3, 111da <_bsdlib_init+0x1a>
	list->tail = NULL;
   111cc:	e9c4 3300 	strd	r3, r3, [r4]
	return z_impl_k_mutex_init(mutex);
   111d0:	4817      	ldr	r0, [pc, #92]	; (11230 <_bsdlib_init+0x70>)
   111d2:	f00e ff15 	bl	20000 <z_impl_k_mutex_init>
		sys_slist_init(&shutdown_threads);
		k_mutex_init(&slist_mutex);
		first_time_init = true;
   111d6:	2301      	movs	r3, #1
   111d8:	702b      	strb	r3, [r5, #0]
	}

	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   111da:	2200      	movs	r2, #0
   111dc:	202a      	movs	r0, #42	; 0x2a
   111de:	4611      	mov	r1, r2
   111e0:	f7fe fcc4 	bl	fb6c <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	const bsd_init_params_t init_params = {
   111e4:	4a13      	ldr	r2, [pc, #76]	; (11234 <_bsdlib_init+0x74>)
   111e6:	ab01      	add	r3, sp, #4
   111e8:	ca07      	ldmia	r2, {r0, r1, r2}
   111ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.trace_on = true,
		.bsd_memory_address = BSD_RESERVED_MEMORY_ADDRESS,
		.bsd_memory_size = BSD_RESERVED_MEMORY_SIZE
	};

	init_ret = bsd_init(&init_params);
   111ee:	4618      	mov	r0, r3
   111f0:	f008 fc46 	bl	19a80 <bsd_init>
   111f4:	4b10      	ldr	r3, [pc, #64]	; (11238 <_bsdlib_init+0x78>)
   111f6:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   111f8:	f04f 32ff 	mov.w	r2, #4294967295
   111fc:	f04f 33ff 	mov.w	r3, #4294967295
   11200:	480b      	ldr	r0, [pc, #44]	; (11230 <_bsdlib_init+0x70>)
   11202:	f00a ffe1 	bl	1c1c8 <z_impl_k_mutex_lock>

	k_mutex_lock(&slist_mutex, K_FOREVER);
	if (sys_slist_peek_head(&shutdown_threads) != NULL) {
   11206:	6820      	ldr	r0, [r4, #0]
   11208:	b138      	cbz	r0, 1121a <_bsdlib_init+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1120a:	6804      	ldr	r4, [r0, #0]
	z_impl_k_sem_give(sem);
   1120c:	3004      	adds	r0, #4
   1120e:	f00b fc23 	bl	1ca58 <z_impl_k_sem_give>
		struct shutdown_thread *thread, *next_thread;

		/* Wake up all sleeping threads. */
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   11212:	b114      	cbz	r4, 1121a <_bsdlib_init+0x5a>
   11214:	4620      	mov	r0, r4
   11216:	6824      	ldr	r4, [r4, #0]
   11218:	e7f8      	b.n	1120c <_bsdlib_init+0x4c>
	return z_impl_k_mutex_unlock(mutex);
   1121a:	4805      	ldr	r0, [pc, #20]	; (11230 <_bsdlib_init+0x70>)
   1121c:	f00b f84c 	bl	1c2b8 <z_impl_k_mutex_unlock>
		 */
		return 0;
	}

	return init_ret;
}
   11220:	2000      	movs	r0, #0
   11222:	b005      	add	sp, #20
   11224:	bd30      	pop	{r4, r5, pc}
   11226:	bf00      	nop
   11228:	20022804 	.word	0x20022804
   1122c:	20020980 	.word	0x20020980
   11230:	20020988 	.word	0x20020988
   11234:	00020b10 	.word	0x00020b10
   11238:	2002097c 	.word	0x2002097c

0001123c <bsdlib_shutdown_wait>:

void bsdlib_shutdown_wait(void)
{
   1123c:	b530      	push	{r4, r5, lr}
   1123e:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_sem_init(sem, initial_count, limit);
   11240:	2201      	movs	r2, #1
   11242:	2100      	movs	r1, #0
   11244:	a802      	add	r0, sp, #8
   11246:	f00f f853 	bl	202f0 <z_impl_k_sem_init>
   1124a:	ad01      	add	r5, sp, #4
	return z_impl_k_mutex_lock(mutex, timeout);
   1124c:	f04f 33ff 	mov.w	r3, #4294967295
   11250:	f04f 32ff 	mov.w	r2, #4294967295
   11254:	481c      	ldr	r0, [pc, #112]	; (112c8 <bsdlib_shutdown_wait+0x8c>)
   11256:	f00a ffb7 	bl	1c1c8 <z_impl_k_mutex_lock>
	parent->next = child;
   1125a:	2300      	movs	r3, #0
Z_GENLIST_APPEND(slist, snode)
   1125c:	4c1b      	ldr	r4, [pc, #108]	; (112cc <bsdlib_shutdown_wait+0x90>)
	parent->next = child;
   1125e:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   11260:	6863      	ldr	r3, [r4, #4]
   11262:	bb2b      	cbnz	r3, 112b0 <bsdlib_shutdown_wait+0x74>
	list->head = node;
   11264:	e9c4 5500 	strd	r5, r5, [r4]
	return z_impl_k_mutex_unlock(mutex);
   11268:	4817      	ldr	r0, [pc, #92]	; (112c8 <bsdlib_shutdown_wait+0x8c>)
   1126a:	f00b f825 	bl	1c2b8 <z_impl_k_mutex_unlock>
	return z_impl_k_sem_take(sem, timeout);
   1126e:	f04f 32ff 	mov.w	r2, #4294967295
   11272:	f04f 33ff 	mov.w	r3, #4294967295
   11276:	a802      	add	r0, sp, #8
   11278:	f00b fc14 	bl	1caa4 <z_impl_k_sem_take>
	return z_impl_k_mutex_lock(mutex, timeout);
   1127c:	f04f 32ff 	mov.w	r2, #4294967295
   11280:	f04f 33ff 	mov.w	r3, #4294967295
   11284:	4810      	ldr	r0, [pc, #64]	; (112c8 <bsdlib_shutdown_wait+0x8c>)
   11286:	f00a ff9f 	bl	1c1c8 <z_impl_k_mutex_lock>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1128a:	2200      	movs	r2, #0
   1128c:	6823      	ldr	r3, [r4, #0]
   1128e:	b153      	cbz	r3, 112a6 <bsdlib_shutdown_wait+0x6a>
   11290:	42ab      	cmp	r3, r5
   11292:	d116      	bne.n	112c2 <bsdlib_shutdown_wait+0x86>
Z_GENLIST_REMOVE(slist, snode)
   11294:	9901      	ldr	r1, [sp, #4]
   11296:	b972      	cbnz	r2, 112b6 <bsdlib_shutdown_wait+0x7a>
   11298:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   1129a:	6021      	str	r1, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1129c:	429a      	cmp	r2, r3
   1129e:	d100      	bne.n	112a2 <bsdlib_shutdown_wait+0x66>
	list->tail = node;
   112a0:	6061      	str	r1, [r4, #4]
	parent->next = child;
   112a2:	2300      	movs	r3, #0
   112a4:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   112a6:	4808      	ldr	r0, [pc, #32]	; (112c8 <bsdlib_shutdown_wait+0x8c>)
   112a8:	f00b f806 	bl	1c2b8 <z_impl_k_mutex_unlock>
	(void)k_sem_take(&thread.sem, K_FOREVER);

	k_mutex_lock(&slist_mutex, K_FOREVER);
	sys_slist_find_and_remove(&shutdown_threads, &thread.node);
	k_mutex_unlock(&slist_mutex);
}
   112ac:	b009      	add	sp, #36	; 0x24
   112ae:	bd30      	pop	{r4, r5, pc}
   112b0:	601d      	str	r5, [r3, #0]
	list->tail = node;
   112b2:	6065      	str	r5, [r4, #4]
}
   112b4:	e7d8      	b.n	11268 <bsdlib_shutdown_wait+0x2c>
	parent->next = child;
   112b6:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   112b8:	6861      	ldr	r1, [r4, #4]
   112ba:	4299      	cmp	r1, r3
	list->tail = node;
   112bc:	bf08      	it	eq
   112be:	6062      	streq	r2, [r4, #4]
}
   112c0:	e7ef      	b.n	112a2 <bsdlib_shutdown_wait+0x66>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   112c2:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   112c4:	681b      	ldr	r3, [r3, #0]
   112c6:	e7e2      	b.n	1128e <bsdlib_shutdown_wait+0x52>
   112c8:	20020988 	.word	0x20020988
   112cc:	20020980 	.word	0x20020980

000112d0 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which bsdlib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   112d0:	b570      	push	{r4, r5, r6, lr}
	struct thread_monitor_entry *entry = thread_event_monitor;
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   112d2:	4c0d      	ldr	r4, [pc, #52]	; (11308 <thread_monitor_entry_get+0x38>)
{
   112d4:	4602      	mov	r2, r0
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   112d6:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   112d8:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   112da:	4620      	mov	r0, r4
		entry_age = rpc_event_cnt - entry->cnt;
   112dc:	4b0b      	ldr	r3, [pc, #44]	; (1130c <thread_monitor_entry_get+0x3c>)
   112de:	681b      	ldr	r3, [r3, #0]
		if (entry->id == id) {
   112e0:	6801      	ldr	r1, [r0, #0]
   112e2:	4291      	cmp	r1, r2
   112e4:	d00e      	beq.n	11304 <thread_monitor_entry_get+0x34>
		} else if (entry->id == 0) {
   112e6:	b151      	cbz	r1, 112fe <thread_monitor_entry_get+0x2e>
		entry_age = rpc_event_cnt - entry->cnt;
   112e8:	6841      	ldr	r1, [r0, #4]
   112ea:	1a59      	subs	r1, r3, r1
		if (entry_age > oldest_entry_age) {
   112ec:	42b1      	cmp	r1, r6
   112ee:	bfc4      	itt	gt
   112f0:	4604      	movgt	r4, r0
   112f2:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   112f4:	3d01      	subs	r5, #1
   112f6:	f100 0008 	add.w	r0, r0, #8
   112fa:	d1f1      	bne.n	112e0 <thread_monitor_entry_get+0x10>
   112fc:	4620      	mov	r0, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
   112fe:	3b01      	subs	r3, #1
	new_entry->id = id;
   11300:	6002      	str	r2, [r0, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   11302:	6043      	str	r3, [r0, #4]

	return new_entry;
}
   11304:	bd70      	pop	{r4, r5, r6, pc}
   11306:	bf00      	nop
   11308:	200209a8 	.word	0x200209a8
   1130c:	2002099c 	.word	0x2002099c

00011310 <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   11310:	4668      	mov	r0, sp
   11312:	f020 0107 	bic.w	r1, r0, #7
   11316:	468d      	mov	sp, r1
   11318:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1131a:	4b0d      	ldr	r3, [pc, #52]	; (11350 <rpc_proxy_irq_handler+0x40>)
   1131c:	e8d3 2fef 	ldaex	r2, [r3]
   11320:	3201      	adds	r2, #1
   11322:	e8c3 2fe1 	stlex	r1, r2, [r3]
   11326:	2900      	cmp	r1, #0
   11328:	d1f8      	bne.n	1131c <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
   1132a:	f003 f877 	bl	1441c <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   1132e:	4b09      	ldr	r3, [pc, #36]	; (11354 <rpc_proxy_irq_handler+0x44>)
   11330:	681c      	ldr	r4, [r3, #0]
   11332:	b93c      	cbnz	r4, 11344 <rpc_proxy_irq_handler+0x34>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   11334:	f7fe fc30 	bl	fb98 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   11338:	f7fe ffa2 	bl	10280 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   1133c:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   11340:	4685      	mov	sp, r0
   11342:	4770      	bx	lr
	z_impl_k_sem_give(sem);
   11344:	1d20      	adds	r0, r4, #4
   11346:	f00b fb87 	bl	1ca58 <z_impl_k_sem_give>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1134a:	6824      	ldr	r4, [r4, #0]
	return node->next;
   1134c:	e7f1      	b.n	11332 <rpc_proxy_irq_handler+0x22>
   1134e:	bf00      	nop
   11350:	2002099c 	.word	0x2002099c
   11354:	200209a0 	.word	0x200209a0

00011358 <bsd_os_timedwait>:
{
   11358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1135c:	460c      	mov	r4, r1
   1135e:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_ticks();
   11360:	f00f f88c 	bl	2047c <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   11364:	6823      	ldr	r3, [r4, #0]
   11366:	4680      	mov	r8, r0
   11368:	2b00      	cmp	r3, #0
   1136a:	468a      	mov	sl, r1
   1136c:	d103      	bne.n	11376 <bsd_os_timedwait+0x1e>
	z_impl_k_yield();
   1136e:	f00b fb01 	bl	1c974 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   11372:	203c      	movs	r0, #60	; 0x3c
   11374:	e091      	b.n	1149a <bsd_os_timedwait+0x142>
		*timeout = SYS_FOREVER_MS;
   11376:	bfbc      	itt	lt
   11378:	f04f 33ff 	movlt.w	r3, #4294967295
   1137c:	6023      	strlt	r3, [r4, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1137e:	2201      	movs	r2, #1
   11380:	2100      	movs	r1, #0
   11382:	a802      	add	r0, sp, #8
   11384:	f00e ffb4 	bl	202f0 <z_impl_k_sem_init>
   11388:	ad01      	add	r5, sp, #4
   1138a:	f04f 0320 	mov.w	r3, #32
   1138e:	f3ef 8b11 	mrs	fp, BASEPRI
   11392:	f383 8811 	msr	BASEPRI, r3
   11396:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1139a:	f00b fb57 	bl	1ca4c <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   1139e:	f7ff ff97 	bl	112d0 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   113a2:	4947      	ldr	r1, [pc, #284]	; (114c0 <bsd_os_timedwait+0x168>)
   113a4:	6843      	ldr	r3, [r0, #4]
   113a6:	680a      	ldr	r2, [r1, #0]
   113a8:	4689      	mov	r9, r1
   113aa:	4293      	cmp	r3, r2
   113ac:	f04f 0300 	mov.w	r3, #0
   113b0:	d108      	bne.n	113c4 <bsd_os_timedwait+0x6c>
	parent->next = child;
   113b2:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   113b4:	4b43      	ldr	r3, [pc, #268]	; (114c4 <bsd_os_timedwait+0x16c>)
   113b6:	685a      	ldr	r2, [r3, #4]
   113b8:	2a00      	cmp	r2, #0
   113ba:	d171      	bne.n	114a0 <bsd_os_timedwait+0x148>
	list->head = node;
   113bc:	e9c3 5500 	strd	r5, r5, [r3]
		allow_to_sleep = true;
   113c0:	2301      	movs	r3, #1
}
   113c2:	e000      	b.n	113c6 <bsd_os_timedwait+0x6e>
	entry->cnt = rpc_event_cnt;
   113c4:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   113c6:	f38b 8811 	msr	BASEPRI, fp
   113ca:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   113ce:	2b00      	cmp	r3, #0
   113d0:	d062      	beq.n	11498 <bsd_os_timedwait+0x140>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   113d2:	6823      	ldr	r3, [r4, #0]
   113d4:	1c5a      	adds	r2, r3, #1
   113d6:	d066      	beq.n	114a6 <bsd_os_timedwait+0x14e>
   113d8:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   113dc:	f240 30e7 	movw	r0, #999	; 0x3e7
   113e0:	2100      	movs	r1, #0
   113e2:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   113e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   113ea:	2300      	movs	r3, #0
   113ec:	fbce 010c 	smlal	r0, r1, lr, ip
   113f0:	f7fb fa5c 	bl	c8ac <__aeabi_uldivmod>
   113f4:	4602      	mov	r2, r0
   113f6:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   113f8:	a802      	add	r0, sp, #8
   113fa:	f00b fb53 	bl	1caa4 <z_impl_k_sem_take>
	__asm__ volatile(
   113fe:	f04f 0320 	mov.w	r3, #32
   11402:	f3ef 8b11 	mrs	fp, BASEPRI
   11406:	f383 8811 	msr	BASEPRI, r3
   1140a:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1140e:	2000      	movs	r0, #0
   11410:	4b2c      	ldr	r3, [pc, #176]	; (114c4 <bsd_os_timedwait+0x16c>)
   11412:	681a      	ldr	r2, [r3, #0]
   11414:	b15a      	cbz	r2, 1142e <bsd_os_timedwait+0xd6>
   11416:	42aa      	cmp	r2, r5
   11418:	d14f      	bne.n	114ba <bsd_os_timedwait+0x162>
Z_GENLIST_REMOVE(slist, snode)
   1141a:	9d01      	ldr	r5, [sp, #4]
   1141c:	2800      	cmp	r0, #0
   1141e:	d146      	bne.n	114ae <bsd_os_timedwait+0x156>
   11420:	6859      	ldr	r1, [r3, #4]
	list->head = node;
   11422:	601d      	str	r5, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   11424:	4291      	cmp	r1, r2
   11426:	d100      	bne.n	1142a <bsd_os_timedwait+0xd2>
	list->tail = node;
   11428:	605d      	str	r5, [r3, #4]
	parent->next = child;
   1142a:	2300      	movs	r3, #0
   1142c:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   1142e:	f00b fb0d 	bl	1ca4c <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   11432:	f7ff ff4d 	bl	112d0 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   11436:	f8d9 3000 	ldr.w	r3, [r9]
   1143a:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   1143c:	f38b 8811 	msr	BASEPRI, fp
   11440:	f3bf 8f6f 	isb	sy
	if (*timeout == SYS_FOREVER_MS) {
   11444:	6825      	ldr	r5, [r4, #0]
   11446:	1c6b      	adds	r3, r5, #1
   11448:	d026      	beq.n	11498 <bsd_os_timedwait+0x140>
	return z_impl_k_uptime_ticks();
   1144a:	f00f f817 	bl	2047c <z_impl_k_uptime_ticks>
   1144e:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   11452:	468e      	mov	lr, r1
   11454:	fba8 890c 	umull	r8, r9, r8, ip
   11458:	fba0 010c 	umull	r0, r1, r0, ip
   1145c:	fb0c 990a 	mla	r9, ip, sl, r9
   11460:	fb0c 110e 	mla	r1, ip, lr, r1
   11464:	ea4f 32d8 	mov.w	r2, r8, lsr #15
   11468:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
	remaining = *timeout - k_uptime_delta(&start);
   1146c:	1952      	adds	r2, r2, r5
   1146e:	ea4f 33d9 	mov.w	r3, r9, lsr #15
   11472:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   11476:	0bc5      	lsrs	r5, r0, #15
   11478:	ea45 4541 	orr.w	r5, r5, r1, lsl #17
   1147c:	1b56      	subs	r6, r2, r5
   1147e:	ea4f 3cd1 	mov.w	ip, r1, lsr #15
   11482:	eb63 070c 	sbc.w	r7, r3, ip
	*timeout = remaining > 0 ? remaining : 0;
   11486:	2e00      	cmp	r6, #0
   11488:	f177 0300 	sbcs.w	r3, r7, #0
   1148c:	bfb8      	it	lt
   1148e:	2600      	movlt	r6, #0
   11490:	6026      	str	r6, [r4, #0]
	if (*timeout == 0) {
   11492:	2e00      	cmp	r6, #0
   11494:	f43f af6d 	beq.w	11372 <bsd_os_timedwait+0x1a>
	return 0;
   11498:	2000      	movs	r0, #0
}
   1149a:	b009      	add	sp, #36	; 0x24
   1149c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   114a0:	6015      	str	r5, [r2, #0]
	list->tail = node;
   114a2:	605d      	str	r5, [r3, #4]
   114a4:	e78c      	b.n	113c0 <bsd_os_timedwait+0x68>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   114a6:	f04f 32ff 	mov.w	r2, #4294967295
   114aa:	4613      	mov	r3, r2
   114ac:	e7a4      	b.n	113f8 <bsd_os_timedwait+0xa0>
	parent->next = child;
   114ae:	6005      	str	r5, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   114b0:	6859      	ldr	r1, [r3, #4]
   114b2:	4291      	cmp	r1, r2
	list->tail = node;
   114b4:	bf08      	it	eq
   114b6:	6058      	streq	r0, [r3, #4]
}
   114b8:	e7b7      	b.n	1142a <bsd_os_timedwait+0xd2>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   114ba:	4610      	mov	r0, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   114bc:	6812      	ldr	r2, [r2, #0]
   114be:	e7a9      	b.n	11414 <bsd_os_timedwait+0xbc>
   114c0:	2002099c 	.word	0x2002099c
   114c4:	200209a0 	.word	0x200209a0

000114c8 <bsd_os_errno_set>:
	switch (err_code) {
   114c8:	283c      	cmp	r0, #60	; 0x3c
{
   114ca:	4601      	mov	r1, r0
   114cc:	b508      	push	{r3, lr}
	switch (err_code) {
   114ce:	f300 808f 	bgt.w	115f0 <bsd_os_errno_set+0x128>
   114d2:	2800      	cmp	r0, #0
   114d4:	dc0d      	bgt.n	114f2 <bsd_os_errno_set+0x2a>
   114d6:	4bb0      	ldr	r3, [pc, #704]	; (11798 <bsd_os_errno_set+0x2d0>)
   114d8:	4ab0      	ldr	r2, [pc, #704]	; (1179c <bsd_os_errno_set+0x2d4>)
		LOG_ERR("Untranslated errno %d set by bsdlib!", err_code);
   114da:	48b1      	ldr	r0, [pc, #708]	; (117a0 <bsd_os_errno_set+0x2d8>)
   114dc:	1ad2      	subs	r2, r2, r3
   114de:	08d2      	lsrs	r2, r2, #3
   114e0:	0192      	lsls	r2, r2, #6
   114e2:	f042 0201 	orr.w	r2, r2, #1
   114e6:	f00c faf2 	bl	1dace <log_1>
		errno = 0xBAADBAAD;
   114ea:	f00d ffaf 	bl	1f44c <z_errno>
   114ee:	4bad      	ldr	r3, [pc, #692]	; (117a4 <bsd_os_errno_set+0x2dc>)
   114f0:	e0bf      	b.n	11672 <bsd_os_errno_set+0x1aa>
   114f2:	1e43      	subs	r3, r0, #1
   114f4:	2b3b      	cmp	r3, #59	; 0x3b
   114f6:	d8ee      	bhi.n	114d6 <bsd_os_errno_set+0xe>
   114f8:	a201      	add	r2, pc, #4	; (adr r2, 11500 <bsd_os_errno_set+0x38>)
   114fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   114fe:	bf00      	nop
   11500:	0001166d 	.word	0x0001166d
   11504:	00011677 	.word	0x00011677
   11508:	000114d7 	.word	0x000114d7
   1150c:	000114d7 	.word	0x000114d7
   11510:	0001167f 	.word	0x0001167f
   11514:	000114d7 	.word	0x000114d7
   11518:	000114d7 	.word	0x000114d7
   1151c:	00011687 	.word	0x00011687
   11520:	0001168f 	.word	0x0001168f
   11524:	000114d7 	.word	0x000114d7
   11528:	000114d7 	.word	0x000114d7
   1152c:	00011697 	.word	0x00011697
   11530:	0001169f 	.word	0x0001169f
   11534:	000116a7 	.word	0x000116a7
   11538:	000114d7 	.word	0x000114d7
   1153c:	000114d7 	.word	0x000114d7
   11540:	000114d7 	.word	0x000114d7
   11544:	000114d7 	.word	0x000114d7
   11548:	000114d7 	.word	0x000114d7
   1154c:	000114d7 	.word	0x000114d7
   11550:	000114d7 	.word	0x000114d7
   11554:	000116af 	.word	0x000116af
   11558:	000114d7 	.word	0x000114d7
   1155c:	000116b7 	.word	0x000116b7
   11560:	000114d7 	.word	0x000114d7
   11564:	000114d7 	.word	0x000114d7
   11568:	000114d7 	.word	0x000114d7
   1156c:	000114d7 	.word	0x000114d7
   11570:	000114d7 	.word	0x000114d7
   11574:	000114d7 	.word	0x000114d7
   11578:	000114d7 	.word	0x000114d7
   1157c:	000114d7 	.word	0x000114d7
   11580:	000114d7 	.word	0x000114d7
   11584:	000114d7 	.word	0x000114d7
   11588:	000116bf 	.word	0x000116bf
   1158c:	000114d7 	.word	0x000114d7
   11590:	000116c7 	.word	0x000116c7
   11594:	000114d7 	.word	0x000114d7
   11598:	000114d7 	.word	0x000114d7
   1159c:	0001178f 	.word	0x0001178f
   115a0:	000116cf 	.word	0x000116cf
   115a4:	000116d7 	.word	0x000116d7
   115a8:	000116df 	.word	0x000116df
   115ac:	000116e7 	.word	0x000116e7
   115b0:	000116ef 	.word	0x000116ef
   115b4:	000114d7 	.word	0x000114d7
   115b8:	000116f7 	.word	0x000116f7
   115bc:	000116ff 	.word	0x000116ff
   115c0:	000114d7 	.word	0x000114d7
   115c4:	00011707 	.word	0x00011707
   115c8:	0001170f 	.word	0x0001170f
   115cc:	00011717 	.word	0x00011717
   115d0:	000114d7 	.word	0x000114d7
   115d4:	0001171f 	.word	0x0001171f
   115d8:	000114d7 	.word	0x000114d7
   115dc:	00011727 	.word	0x00011727
   115e0:	0001172f 	.word	0x0001172f
   115e4:	000114d7 	.word	0x000114d7
   115e8:	000114d7 	.word	0x000114d7
   115ec:	00011737 	.word	0x00011737
	switch (err_code) {
   115f0:	f1a0 0369 	sub.w	r3, r0, #105	; 0x69
   115f4:	2b18      	cmp	r3, #24
   115f6:	f63f af6e 	bhi.w	114d6 <bsd_os_errno_set+0xe>
   115fa:	2b18      	cmp	r3, #24
   115fc:	f63f af6b 	bhi.w	114d6 <bsd_os_errno_set+0xe>
   11600:	a201      	add	r2, pc, #4	; (adr r2, 11608 <bsd_os_errno_set+0x140>)
   11602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11606:	bf00      	nop
   11608:	0001173f 	.word	0x0001173f
   1160c:	000114d7 	.word	0x000114d7
   11610:	000114d7 	.word	0x000114d7
   11614:	000114d7 	.word	0x000114d7
   11618:	000114d7 	.word	0x000114d7
   1161c:	000114d7 	.word	0x000114d7
   11620:	000114d7 	.word	0x000114d7
   11624:	00011747 	.word	0x00011747
   11628:	000114d7 	.word	0x000114d7
   1162c:	00011757 	.word	0x00011757
   11630:	0001174f 	.word	0x0001174f
   11634:	000114d7 	.word	0x000114d7
   11638:	000114d7 	.word	0x000114d7
   1163c:	000114d7 	.word	0x000114d7
   11640:	000114d7 	.word	0x000114d7
   11644:	000114d7 	.word	0x000114d7
   11648:	000114d7 	.word	0x000114d7
   1164c:	000114d7 	.word	0x000114d7
   11650:	000114d7 	.word	0x000114d7
   11654:	000114d7 	.word	0x000114d7
   11658:	0001175f 	.word	0x0001175f
   1165c:	00011767 	.word	0x00011767
   11660:	00011771 	.word	0x00011771
   11664:	0001177b 	.word	0x0001177b
   11668:	00011785 	.word	0x00011785
		errno = EPERM;
   1166c:	f00d feee 	bl	1f44c <z_errno>
   11670:	2301      	movs	r3, #1
		errno = 0xBAADBAAD;
   11672:	6003      	str	r3, [r0, #0]
}
   11674:	bd08      	pop	{r3, pc}
		errno = ENOENT;
   11676:	f00d fee9 	bl	1f44c <z_errno>
   1167a:	2302      	movs	r3, #2
   1167c:	e7f9      	b.n	11672 <bsd_os_errno_set+0x1aa>
		errno = EIO;
   1167e:	f00d fee5 	bl	1f44c <z_errno>
   11682:	2305      	movs	r3, #5
   11684:	e7f5      	b.n	11672 <bsd_os_errno_set+0x1aa>
		errno = ENOEXEC;
   11686:	f00d fee1 	bl	1f44c <z_errno>
   1168a:	2308      	movs	r3, #8
   1168c:	e7f1      	b.n	11672 <bsd_os_errno_set+0x1aa>
		errno = EBADF;
   1168e:	f00d fedd 	bl	1f44c <z_errno>
   11692:	2309      	movs	r3, #9
   11694:	e7ed      	b.n	11672 <bsd_os_errno_set+0x1aa>
		errno = ENOMEM;
   11696:	f00d fed9 	bl	1f44c <z_errno>
   1169a:	230c      	movs	r3, #12
   1169c:	e7e9      	b.n	11672 <bsd_os_errno_set+0x1aa>
		errno = EACCES;
   1169e:	f00d fed5 	bl	1f44c <z_errno>
   116a2:	230d      	movs	r3, #13
   116a4:	e7e5      	b.n	11672 <bsd_os_errno_set+0x1aa>
		errno = EFAULT;
   116a6:	f00d fed1 	bl	1f44c <z_errno>
   116aa:	230e      	movs	r3, #14
   116ac:	e7e1      	b.n	11672 <bsd_os_errno_set+0x1aa>
		errno = EINVAL;
   116ae:	f00d fecd 	bl	1f44c <z_errno>
   116b2:	2316      	movs	r3, #22
   116b4:	e7dd      	b.n	11672 <bsd_os_errno_set+0x1aa>
		errno = EMFILE;
   116b6:	f00d fec9 	bl	1f44c <z_errno>
   116ba:	2318      	movs	r3, #24
   116bc:	e7d9      	b.n	11672 <bsd_os_errno_set+0x1aa>
		errno = EAGAIN;
   116be:	f00d fec5 	bl	1f44c <z_errno>
   116c2:	230b      	movs	r3, #11
   116c4:	e7d5      	b.n	11672 <bsd_os_errno_set+0x1aa>
		errno = EDOM;
   116c6:	f00d fec1 	bl	1f44c <z_errno>
   116ca:	2325      	movs	r3, #37	; 0x25
   116cc:	e7d1      	b.n	11672 <bsd_os_errno_set+0x1aa>
		errno = EPROTOTYPE;
   116ce:	f00d febd 	bl	1f44c <z_errno>
   116d2:	2329      	movs	r3, #41	; 0x29
   116d4:	e7cd      	b.n	11672 <bsd_os_errno_set+0x1aa>
		errno = ENOPROTOOPT;
   116d6:	f00d feb9 	bl	1f44c <z_errno>
   116da:	232a      	movs	r3, #42	; 0x2a
   116dc:	e7c9      	b.n	11672 <bsd_os_errno_set+0x1aa>
		errno = EPROTONOSUPPORT;
   116de:	f00d feb5 	bl	1f44c <z_errno>
   116e2:	232b      	movs	r3, #43	; 0x2b
   116e4:	e7c5      	b.n	11672 <bsd_os_errno_set+0x1aa>
		errno = ESOCKTNOSUPPORT;
   116e6:	f00d feb1 	bl	1f44c <z_errno>
   116ea:	232c      	movs	r3, #44	; 0x2c
   116ec:	e7c1      	b.n	11672 <bsd_os_errno_set+0x1aa>
		errno = EOPNOTSUPP;
   116ee:	f00d fead 	bl	1f44c <z_errno>
   116f2:	232d      	movs	r3, #45	; 0x2d
   116f4:	e7bd      	b.n	11672 <bsd_os_errno_set+0x1aa>
		errno = EAFNOSUPPORT;
   116f6:	f00d fea9 	bl	1f44c <z_errno>
   116fa:	232f      	movs	r3, #47	; 0x2f
   116fc:	e7b9      	b.n	11672 <bsd_os_errno_set+0x1aa>
		errno = EADDRINUSE;
   116fe:	f00d fea5 	bl	1f44c <z_errno>
   11702:	2330      	movs	r3, #48	; 0x30
   11704:	e7b5      	b.n	11672 <bsd_os_errno_set+0x1aa>
		errno = ENETDOWN;
   11706:	f00d fea1 	bl	1f44c <z_errno>
   1170a:	233e      	movs	r3, #62	; 0x3e
   1170c:	e7b1      	b.n	11672 <bsd_os_errno_set+0x1aa>
		errno = ENETUNREACH;
   1170e:	f00d fe9d 	bl	1f44c <z_errno>
   11712:	2333      	movs	r3, #51	; 0x33
   11714:	e7ad      	b.n	11672 <bsd_os_errno_set+0x1aa>
		errno = ENETRESET;
   11716:	f00d fe99 	bl	1f44c <z_errno>
   1171a:	2334      	movs	r3, #52	; 0x34
   1171c:	e7a9      	b.n	11672 <bsd_os_errno_set+0x1aa>
		errno = ECONNRESET;
   1171e:	f00d fe95 	bl	1f44c <z_errno>
   11722:	2336      	movs	r3, #54	; 0x36
   11724:	e7a5      	b.n	11672 <bsd_os_errno_set+0x1aa>
		errno = EISCONN;
   11726:	f00d fe91 	bl	1f44c <z_errno>
   1172a:	2338      	movs	r3, #56	; 0x38
   1172c:	e7a1      	b.n	11672 <bsd_os_errno_set+0x1aa>
		errno = ENOTCONN;
   1172e:	f00d fe8d 	bl	1f44c <z_errno>
   11732:	2339      	movs	r3, #57	; 0x39
   11734:	e79d      	b.n	11672 <bsd_os_errno_set+0x1aa>
		errno = ETIMEDOUT;
   11736:	f00d fe89 	bl	1f44c <z_errno>
   1173a:	233c      	movs	r3, #60	; 0x3c
   1173c:	e799      	b.n	11672 <bsd_os_errno_set+0x1aa>
		errno = ENOBUFS;
   1173e:	f00d fe85 	bl	1f44c <z_errno>
   11742:	2337      	movs	r3, #55	; 0x37
   11744:	e795      	b.n	11672 <bsd_os_errno_set+0x1aa>
		errno = EHOSTDOWN;
   11746:	f00d fe81 	bl	1f44c <z_errno>
   1174a:	2343      	movs	r3, #67	; 0x43
   1174c:	e791      	b.n	11672 <bsd_os_errno_set+0x1aa>
		errno = EINPROGRESS;
   1174e:	f00d fe7d 	bl	1f44c <z_errno>
   11752:	2344      	movs	r3, #68	; 0x44
   11754:	e78d      	b.n	11672 <bsd_os_errno_set+0x1aa>
		errno = EALREADY;
   11756:	f00d fe79 	bl	1f44c <z_errno>
   1175a:	2345      	movs	r3, #69	; 0x45
   1175c:	e789      	b.n	11672 <bsd_os_errno_set+0x1aa>
		errno = ECANCELED;
   1175e:	f00d fe75 	bl	1f44c <z_errno>
   11762:	2348      	movs	r3, #72	; 0x48
   11764:	e785      	b.n	11672 <bsd_os_errno_set+0x1aa>
		errno = ENOKEY;
   11766:	f00d fe71 	bl	1f44c <z_errno>
   1176a:	f240 73d1 	movw	r3, #2001	; 0x7d1
   1176e:	e780      	b.n	11672 <bsd_os_errno_set+0x1aa>
		errno = EKEYEXPIRED;
   11770:	f00d fe6c 	bl	1f44c <z_errno>
   11774:	f240 73d2 	movw	r3, #2002	; 0x7d2
   11778:	e77b      	b.n	11672 <bsd_os_errno_set+0x1aa>
		errno = EKEYREVOKED;
   1177a:	f00d fe67 	bl	1f44c <z_errno>
   1177e:	f240 73d3 	movw	r3, #2003	; 0x7d3
   11782:	e776      	b.n	11672 <bsd_os_errno_set+0x1aa>
		errno = EKEYREJECTED;
   11784:	f00d fe62 	bl	1f44c <z_errno>
   11788:	f240 73d4 	movw	r3, #2004	; 0x7d4
   1178c:	e771      	b.n	11672 <bsd_os_errno_set+0x1aa>
		errno = EMSGSIZE;
   1178e:	f00d fe5d 	bl	1f44c <z_errno>
   11792:	2324      	movs	r3, #36	; 0x24
   11794:	e76d      	b.n	11672 <bsd_os_errno_set+0x1aa>
   11796:	bf00      	nop
   11798:	00020a64 	.word	0x00020a64
   1179c:	00020a7c 	.word	0x00020a7c
   117a0:	00021ca0 	.word	0x00021ca0
   117a4:	baadbaad 	.word	0xbaadbaad

000117a8 <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   117a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   117ac:	4b01      	ldr	r3, [pc, #4]	; (117b4 <bsd_os_application_irq_set+0xc>)
   117ae:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   117b2:	4770      	bx	lr
   117b4:	e000e100 	.word	0xe000e100

000117b8 <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   117b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   117bc:	4b01      	ldr	r3, [pc, #4]	; (117c4 <bsd_os_application_irq_clear+0xc>)
   117be:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   117c2:	4770      	bx	lr
   117c4:	e000e100 	.word	0xe000e100

000117c8 <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   117c8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   117cc:	4b01      	ldr	r3, [pc, #4]	; (117d4 <bsd_os_trace_irq_set+0xc>)
   117ce:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   117d2:	4770      	bx	lr
   117d4:	e000e100 	.word	0xe000e100

000117d8 <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   117d8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   117dc:	4b01      	ldr	r3, [pc, #4]	; (117e4 <bsd_os_trace_irq_clear+0xc>)
   117de:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   117e2:	4770      	bx	lr
   117e4:	e000e100 	.word	0xe000e100

000117e8 <bsd_os_init>:
#endif
}

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
   117e8:	b508      	push	{r3, lr}
	list->head = NULL;
   117ea:	2300      	movs	r3, #0
   117ec:	4a07      	ldr	r2, [pc, #28]	; (1180c <bsd_os_init+0x24>)
	list->tail = NULL;
   117ee:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   117f2:	4a07      	ldr	r2, [pc, #28]	; (11810 <bsd_os_init+0x28>)
   117f4:	e8d2 1fef 	ldaex	r1, [r2]
   117f8:	e8c2 3fe0 	stlex	r0, r3, [r2]
   117fc:	2800      	cmp	r0, #0
   117fe:	d1f9      	bne.n	117f4 <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   11800:	f00d fe4f 	bl	1f4a2 <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
	trace_task_create();
}
   11804:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
   11808:	f00d be40 	b.w	1f48c <trace_task_create>
   1180c:	200209a0 	.word	0x200209a0
   11810:	2002099c 	.word	0x2002099c

00011814 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   11814:	f240 2302 	movw	r3, #514	; 0x202
   11818:	4298      	cmp	r0, r3
   1181a:	f000 8087 	beq.w	1192c <z_to_nrf_optname+0x118>
   1181e:	dc07      	bgt.n	11830 <z_to_nrf_optname+0x1c>
   11820:	2801      	cmp	r0, #1
   11822:	d040      	beq.n	118a6 <z_to_nrf_optname+0x92>
   11824:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   11828:	d034      	beq.n	11894 <z_to_nrf_optname+0x80>
   1182a:	f04f 30ff 	mov.w	r0, #4294967295
		retval = -1;
		break;
	}

	return retval;
}
   1182e:	4770      	bx	lr
	switch (z_in_level) {
   11830:	f240 2303 	movw	r3, #515	; 0x203
   11834:	4298      	cmp	r0, r3
   11836:	d1f8      	bne.n	1182a <z_to_nrf_optname+0x16>
		switch (z_in_optname) {
   11838:	3901      	subs	r1, #1
   1183a:	2913      	cmp	r1, #19
   1183c:	d8f5      	bhi.n	1182a <z_to_nrf_optname+0x16>
   1183e:	a301      	add	r3, pc, #4	; (adr r3, 11844 <z_to_nrf_optname+0x30>)
   11840:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   11844:	0001193b 	.word	0x0001193b
   11848:	00011915 	.word	0x00011915
   1184c:	00011919 	.word	0x00011919
   11850:	000118b7 	.word	0x000118b7
   11854:	0001191d 	.word	0x0001191d
   11858:	00011921 	.word	0x00011921
   1185c:	00011925 	.word	0x00011925
   11860:	0001182b 	.word	0x0001182b
   11864:	0001182b 	.word	0x0001182b
   11868:	0001182b 	.word	0x0001182b
   1186c:	0001182b 	.word	0x0001182b
   11870:	0001182b 	.word	0x0001182b
   11874:	0001182b 	.word	0x0001182b
   11878:	0001182b 	.word	0x0001182b
   1187c:	0001182b 	.word	0x0001182b
   11880:	0001182b 	.word	0x0001182b
   11884:	0001182b 	.word	0x0001182b
   11888:	0001182b 	.word	0x0001182b
   1188c:	0001182b 	.word	0x0001182b
   11890:	00011929 	.word	0x00011929
		switch (z_in_optname) {
   11894:	3901      	subs	r1, #1
   11896:	2906      	cmp	r1, #6
   11898:	d8c7      	bhi.n	1182a <z_to_nrf_optname+0x16>
   1189a:	e8df f001 	tbb	[pc, r1]
   1189e:	3f3b      	.short	0x3f3b
   118a0:	4e0c4341 	.word	0x4e0c4341
   118a4:	3d          	.byte	0x3d
   118a5:	00          	.byte	0x00
		switch (z_in_optname) {
   118a6:	2920      	cmp	r1, #32
   118a8:	dcbf      	bgt.n	1182a <z_to_nrf_optname+0x16>
   118aa:	2913      	cmp	r1, #19
   118ac:	dc05      	bgt.n	118ba <z_to_nrf_optname+0xa6>
   118ae:	2902      	cmp	r1, #2
   118b0:	d028      	beq.n	11904 <z_to_nrf_optname+0xf0>
   118b2:	2904      	cmp	r1, #4
   118b4:	d1b9      	bne.n	1182a <z_to_nrf_optname+0x16>
			*nrf_out_optname = NRF_SO_DFU_APPLY;
   118b6:	2304      	movs	r3, #4
   118b8:	e040      	b.n	1193c <z_to_nrf_optname+0x128>
   118ba:	3914      	subs	r1, #20
   118bc:	290c      	cmp	r1, #12
   118be:	d8b4      	bhi.n	1182a <z_to_nrf_optname+0x16>
   118c0:	a301      	add	r3, pc, #4	; (adr r3, 118c8 <z_to_nrf_optname+0xb4>)
   118c2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   118c6:	bf00      	nop
   118c8:	00011929 	.word	0x00011929
   118cc:	000118fd 	.word	0x000118fd
   118d0:	0001182b 	.word	0x0001182b
   118d4:	0001182b 	.word	0x0001182b
   118d8:	0001182b 	.word	0x0001182b
   118dc:	00011901 	.word	0x00011901
   118e0:	0001182b 	.word	0x0001182b
   118e4:	0001182b 	.word	0x0001182b
   118e8:	0001182b 	.word	0x0001182b
   118ec:	0001182b 	.word	0x0001182b
   118f0:	00011909 	.word	0x00011909
   118f4:	0001190d 	.word	0x0001190d
   118f8:	00011911 	.word	0x00011911
			*nrf_out_optname = NRF_SO_SNDTIMEO;
   118fc:	2315      	movs	r3, #21
   118fe:	e01d      	b.n	1193c <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   11900:	2319      	movs	r3, #25
   11902:	e01b      	b.n	1193c <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_REUSEADDR;
   11904:	2328      	movs	r3, #40	; 0x28
   11906:	e019      	b.n	1193c <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_SILENCE_ALL;
   11908:	231e      	movs	r3, #30
   1190a:	e017      	b.n	1193c <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_SILENCE_IP_ECHO_REPLY;
   1190c:	231f      	movs	r3, #31
   1190e:	e015      	b.n	1193c <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_SILENCE_IPV6_ECHO_REPLY;
   11910:	2320      	movs	r3, #32
   11912:	e013      	b.n	1193c <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_RESOURCES;
   11914:	2302      	movs	r3, #2
   11916:	e011      	b.n	1193c <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   11918:	2303      	movs	r3, #3
   1191a:	e00f      	b.n	1193c <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
   1191c:	2305      	movs	r3, #5
   1191e:	e00d      	b.n	1193c <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   11920:	2306      	movs	r3, #6
   11922:	e00b      	b.n	1193c <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   11924:	2307      	movs	r3, #7
   11926:	e009      	b.n	1193c <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   11928:	2314      	movs	r3, #20
   1192a:	e007      	b.n	1193c <z_to_nrf_optname+0x128>
		switch (z_in_optname) {
   1192c:	2902      	cmp	r1, #2
   1192e:	d0f1      	beq.n	11914 <z_to_nrf_optname+0x100>
   11930:	2903      	cmp	r1, #3
   11932:	d0f1      	beq.n	11918 <z_to_nrf_optname+0x104>
   11934:	2901      	cmp	r1, #1
   11936:	f47f af78 	bne.w	1182a <z_to_nrf_optname+0x16>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   1193a:	2301      	movs	r3, #1
	int retval = 0;
   1193c:	2000      	movs	r0, #0
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   1193e:	6013      	str	r3, [r2, #0]
			break;
   11940:	4770      	bx	lr
   11942:	bf00      	nop

00011944 <nrf91_socket_offload_ioctl>:
static int nrf91_socket_offload_ioctl(void *obj, unsigned int request,
				      va_list args)
{
	int sd = OBJ_TO_SD(obj);

	switch (request) {
   11944:	f240 1303 	movw	r3, #259	; 0x103
{
   11948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (request) {
   1194c:	4299      	cmp	r1, r3
{
   1194e:	b091      	sub	sp, #68	; 0x44
	switch (request) {
   11950:	f000 8097 	beq.w	11a82 <nrf91_socket_offload_ioctl+0x13e>
   11954:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
   11958:	d005      	beq.n	11966 <nrf91_socket_offload_ioctl+0x22>
   1195a:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
   1195e:	d171      	bne.n	11a44 <nrf91_socket_offload_ioctl+0x100>
	case ZFD_IOCTL_POLL_PREPARE:
		return -EXDEV;
   11960:	f06f 0411 	mvn.w	r4, #17
   11964:	e01d      	b.n	119a2 <nrf91_socket_offload_ioctl+0x5e>
	for (int i = 0; i < nfds; i++) {
   11966:	f04f 0800 	mov.w	r8, #0
		struct zsock_pollfd *fds;
		int nfds;
		int timeout;

		fds = va_arg(args, struct zsock_pollfd *);
		nfds = va_arg(args, int);
   1196a:	e9d2 a900 	ldrd	sl, r9, [r2]
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = { 0 };
   1196e:	2100      	movs	r1, #0
		timeout = va_arg(args, int);
   11970:	f8d2 b008 	ldr.w	fp, [r2, #8]
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = { 0 };
   11974:	4668      	mov	r0, sp
   11976:	2240      	movs	r2, #64	; 0x40
   11978:	f00c fe96 	bl	1e6a8 <memset>
	for (int i = 0; i < nfds; i++) {
   1197c:	466e      	mov	r6, sp
   1197e:	4655      	mov	r5, sl
   11980:	4657      	mov	r7, sl
	int retval = 0;
   11982:	4644      	mov	r4, r8
		tmp[i].events = 0;
   11984:	4643      	mov	r3, r8
			obj = z_get_fd_obj(fds[i].fd,
   11986:	4940      	ldr	r1, [pc, #256]	; (11a88 <nrf91_socket_offload_ioctl+0x144>)
	for (int i = 0; i < nfds; i++) {
   11988:	45c1      	cmp	r9, r8
   1198a:	dc0e      	bgt.n	119aa <nrf91_socket_offload_ioctl+0x66>
	if (retval > 0) {
   1198c:	2c00      	cmp	r4, #0
   1198e:	dc08      	bgt.n	119a2 <nrf91_socket_offload_ioctl+0x5e>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   11990:	465a      	mov	r2, fp
   11992:	4649      	mov	r1, r9
   11994:	4668      	mov	r0, sp
   11996:	f008 fb67 	bl	1a068 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   1199a:	2300      	movs	r3, #0
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   1199c:	4604      	mov	r4, r0
	for (int i = 0; i < nfds; i++) {
   1199e:	4599      	cmp	r9, r3
   119a0:	dc28      	bgt.n	119f4 <nrf91_socket_offload_ioctl+0xb0>
	 * In Zephyr, fcntl() is just an alias of ioctl().
	 */
	default:
		return nrf91_socket_offload_fcntl(sd, request, args);
	}
}
   119a2:	4620      	mov	r0, r4
   119a4:	b011      	add	sp, #68	; 0x44
   119a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (fds[i].fd < 0) {
   119aa:	6838      	ldr	r0, [r7, #0]
		tmp[i].events = 0;
   119ac:	80b3      	strh	r3, [r6, #4]
		if (fds[i].fd < 0) {
   119ae:	2800      	cmp	r0, #0
		fds[i].revents = 0;
   119b0:	80fb      	strh	r3, [r7, #6]
		if (fds[i].fd < 0) {
   119b2:	da05      	bge.n	119c0 <nrf91_socket_offload_ioctl+0x7c>
			tmp[i].fd = fds[i].fd;
   119b4:	6030      	str	r0, [r6, #0]
	for (int i = 0; i < nfds; i++) {
   119b6:	f108 0801 	add.w	r8, r8, #1
   119ba:	3608      	adds	r6, #8
   119bc:	3708      	adds	r7, #8
   119be:	e7e3      	b.n	11988 <nrf91_socket_offload_ioctl+0x44>
			obj = z_get_fd_obj(fds[i].fd,
   119c0:	2223      	movs	r2, #35	; 0x23
   119c2:	f7fb ff0f 	bl	d7e4 <z_get_fd_obj>
			if (obj != NULL) {
   119c6:	2300      	movs	r3, #0
   119c8:	492f      	ldr	r1, [pc, #188]	; (11a88 <nrf91_socket_offload_ioctl+0x144>)
   119ca:	b178      	cbz	r0, 119ec <nrf91_socket_offload_ioctl+0xa8>
				tmp[i].fd = OBJ_TO_SD(obj);
   119cc:	3801      	subs	r0, #1
   119ce:	6030      	str	r0, [r6, #0]
		if (fds[i].events & POLLIN) {
   119d0:	88b8      	ldrh	r0, [r7, #4]
   119d2:	07c2      	lsls	r2, r0, #31
			tmp[i].events |= NRF_POLLIN;
   119d4:	bf42      	ittt	mi
   119d6:	88b2      	ldrhmi	r2, [r6, #4]
   119d8:	f042 0201 	orrmi.w	r2, r2, #1
   119dc:	80b2      	strhmi	r2, [r6, #4]
		if (fds[i].events & POLLOUT) {
   119de:	0742      	lsls	r2, r0, #29
			tmp[i].events |= NRF_POLLOUT;
   119e0:	bf42      	ittt	mi
   119e2:	88b2      	ldrhmi	r2, [r6, #4]
   119e4:	f042 0202 	orrmi.w	r2, r2, #2
   119e8:	80b2      	strhmi	r2, [r6, #4]
   119ea:	e7e4      	b.n	119b6 <nrf91_socket_offload_ioctl+0x72>
				fds[i].revents = POLLNVAL;
   119ec:	2220      	movs	r2, #32
				retval++;
   119ee:	3401      	adds	r4, #1
				fds[i].revents = POLLNVAL;
   119f0:	80fa      	strh	r2, [r7, #6]
				retval++;
   119f2:	e7ed      	b.n	119d0 <nrf91_socket_offload_ioctl+0x8c>
		if (fds[i].fd < 0) {
   119f4:	f85a 2033 	ldr.w	r2, [sl, r3, lsl #3]
   119f8:	2a00      	cmp	r2, #0
   119fa:	db20      	blt.n	11a3e <nrf91_socket_offload_ioctl+0xfa>
		if (tmp[i].revents & NRF_POLLIN) {
   119fc:	eb0d 02c3 	add.w	r2, sp, r3, lsl #3
   11a00:	88d2      	ldrh	r2, [r2, #6]
   11a02:	07d7      	lsls	r7, r2, #31
			fds[i].revents |= POLLIN;
   11a04:	bf42      	ittt	mi
   11a06:	88e9      	ldrhmi	r1, [r5, #6]
   11a08:	f041 0101 	orrmi.w	r1, r1, #1
   11a0c:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLOUT) {
   11a0e:	0796      	lsls	r6, r2, #30
			fds[i].revents |= POLLOUT;
   11a10:	bf42      	ittt	mi
   11a12:	88e9      	ldrhmi	r1, [r5, #6]
   11a14:	f041 0104 	orrmi.w	r1, r1, #4
   11a18:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLERR) {
   11a1a:	0750      	lsls	r0, r2, #29
			fds[i].revents |= POLLERR;
   11a1c:	bf42      	ittt	mi
   11a1e:	88e9      	ldrhmi	r1, [r5, #6]
   11a20:	f041 0108 	orrmi.w	r1, r1, #8
   11a24:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLNVAL) {
   11a26:	06d1      	lsls	r1, r2, #27
			fds[i].revents |= POLLNVAL;
   11a28:	bf42      	ittt	mi
   11a2a:	88e9      	ldrhmi	r1, [r5, #6]
   11a2c:	f041 0120 	orrmi.w	r1, r1, #32
   11a30:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLHUP) {
   11a32:	0712      	lsls	r2, r2, #28
			fds[i].revents |= POLLHUP;
   11a34:	bf42      	ittt	mi
   11a36:	88ea      	ldrhmi	r2, [r5, #6]
   11a38:	f042 0210 	orrmi.w	r2, r2, #16
   11a3c:	80ea      	strhmi	r2, [r5, #6]
	for (int i = 0; i < nfds; i++) {
   11a3e:	3301      	adds	r3, #1
   11a40:	3508      	adds	r5, #8
   11a42:	e7ac      	b.n	1199e <nrf91_socket_offload_ioctl+0x5a>
	switch (cmd) {
   11a44:	2903      	cmp	r1, #3
	int sd = OBJ_TO_SD(obj);
   11a46:	f100 30ff 	add.w	r0, r0, #4294967295
	switch (cmd) {
   11a4a:	d00b      	beq.n	11a64 <nrf91_socket_offload_ioctl+0x120>
   11a4c:	2904      	cmp	r1, #4
   11a4e:	d111      	bne.n	11a74 <nrf91_socket_offload_ioctl+0x130>
		flags = va_arg(args, int);
   11a50:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   11a52:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   11a56:	d10d      	bne.n	11a74 <nrf91_socket_offload_ioctl+0x130>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   11a58:	2101      	movs	r1, #1
   11a5a:	1392      	asrs	r2, r2, #14
   11a5c:	f008 fb06 	bl	1a06c <nrf_fcntl>
   11a60:	4604      	mov	r4, r0
		break;
   11a62:	e79e      	b.n	119a2 <nrf91_socket_offload_ioctl+0x5e>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   11a64:	2200      	movs	r2, #0
   11a66:	2102      	movs	r1, #2
   11a68:	f008 fb00 	bl	1a06c <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   11a6c:	0380      	lsls	r0, r0, #14
   11a6e:	f400 4480 	and.w	r4, r0, #16384	; 0x4000
		break;
   11a72:	e796      	b.n	119a2 <nrf91_socket_offload_ioctl+0x5e>
	errno = EINVAL;
   11a74:	f00d fd7d 	bl	1f572 <z_errno>
   11a78:	2316      	movs	r3, #22
	return retval;
   11a7a:	f04f 34ff 	mov.w	r4, #4294967295
	errno = EINVAL;
   11a7e:	6003      	str	r3, [r0, #0]
		return nrf91_socket_offload_fcntl(sd, request, args);
   11a80:	e78f      	b.n	119a2 <nrf91_socket_offload_ioctl+0x5e>
	switch (request) {
   11a82:	f06f 042c 	mvn.w	r4, #44	; 0x2c
   11a86:	e78c      	b.n	119a2 <nrf91_socket_offload_ioctl+0x5e>
   11a88:	00020cb8 	.word	0x00020cb8

00011a8c <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   11a8c:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   11a8e:	4b03      	ldr	r3, [pc, #12]	; (11a9c <nrf91_socket_iface_init+0x10>)
   11a90:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   11a92:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   11a94:	4802      	ldr	r0, [pc, #8]	; (11aa0 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   11a96:	769a      	strb	r2, [r3, #26]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   11a98:	f7fd bd0c 	b.w	f4b4 <socket_offload_dns_register>
   11a9c:	200209f8 	.word	0x200209f8
   11aa0:	00020cb0 	.word	0x00020cb0

00011aa4 <nrf91_socket_create>:
{
   11aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11aa6:	4606      	mov	r6, r0
   11aa8:	460d      	mov	r5, r1
   11aaa:	4617      	mov	r7, r2
	int fd = z_reserve_fd();
   11aac:	f7fb feca 	bl	d844 <z_reserve_fd>
	if (fd < 0) {
   11ab0:	1e04      	subs	r4, r0, #0
   11ab2:	db0d      	blt.n	11ad0 <nrf91_socket_create+0x2c>
	family = z_to_nrf_family(family);
   11ab4:	b2b0      	uxth	r0, r6
   11ab6:	f00d fd0f 	bl	1f4d8 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   11aba:	f110 0f2f 	cmn.w	r0, #47	; 0x2f
	family = z_to_nrf_family(family);
   11abe:	4606      	mov	r6, r0
	if (family == -EAFNOSUPPORT) {
   11ac0:	d109      	bne.n	11ad6 <nrf91_socket_create+0x32>
		errno = EAFNOSUPPORT;
   11ac2:	f00d fd56 	bl	1f572 <z_errno>
   11ac6:	232f      	movs	r3, #47	; 0x2f
		errno = EPROTONOSUPPORT;
   11ac8:	6003      	str	r3, [r0, #0]
		z_free_fd(fd);
   11aca:	4620      	mov	r0, r4
   11acc:	f7fb fef6 	bl	d8bc <z_free_fd>
		return -1;
   11ad0:	f04f 34ff 	mov.w	r4, #4294967295
   11ad4:	e01b      	b.n	11b0e <nrf91_socket_create+0x6a>
	switch (socktype) {
   11ad6:	2d03      	cmp	r5, #3
   11ad8:	d003      	beq.n	11ae2 <nrf91_socket_create+0x3e>
   11ada:	2d04      	cmp	r5, #4
   11adc:	bf08      	it	eq
   11ade:	f44f 7500 	moveq.w	r5, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   11ae2:	4638      	mov	r0, r7
   11ae4:	f00d fd14 	bl	1f510 <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   11ae8:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
	proto = z_to_nrf_protocol(proto);
   11aec:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   11aee:	d103      	bne.n	11af8 <nrf91_socket_create+0x54>
		errno = EPROTONOSUPPORT;
   11af0:	f00d fd3f 	bl	1f572 <z_errno>
   11af4:	232b      	movs	r3, #43	; 0x2b
   11af6:	e7e7      	b.n	11ac8 <nrf91_socket_create+0x24>
	retval = nrf_socket(family, type, proto);
   11af8:	4629      	mov	r1, r5
   11afa:	4630      	mov	r0, r6
   11afc:	f008 f9d6 	bl	19eac <nrf_socket>
	if (sd < 0) {
   11b00:	1e01      	subs	r1, r0, #0
   11b02:	dbe2      	blt.n	11aca <nrf91_socket_create+0x26>
	z_finalize_fd(fd, SD_TO_OBJ(sd),
   11b04:	4620      	mov	r0, r4
   11b06:	4a03      	ldr	r2, [pc, #12]	; (11b14 <nrf91_socket_create+0x70>)
   11b08:	3101      	adds	r1, #1
   11b0a:	f7fb fecd 	bl	d8a8 <z_finalize_fd>
}
   11b0e:	4620      	mov	r0, r4
   11b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11b12:	bf00      	nop
   11b14:	00020cb8 	.word	0x00020cb8

00011b18 <nrf91_socket_offload_sendmsg>:
{
   11b18:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   11b1c:	4607      	mov	r7, r0
   11b1e:	4690      	mov	r8, r2
	if (msg == NULL) {
   11b20:	460c      	mov	r4, r1
   11b22:	b319      	cbz	r1, 11b6c <nrf91_socket_offload_sendmsg+0x54>
	for (i = 0; i < msg->msg_iovlen; i++) {
   11b24:	2300      	movs	r3, #0
	ssize_t len = 0;
   11b26:	461a      	mov	r2, r3
   11b28:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   11b2a:	4298      	cmp	r0, r3
   11b2c:	d128      	bne.n	11b80 <nrf91_socket_offload_sendmsg+0x68>
	if (len <= sizeof(buf)) {
   11b2e:	2a80      	cmp	r2, #128	; 0x80
   11b30:	d857      	bhi.n	11be2 <nrf91_socket_offload_sendmsg+0xca>
		for (i = 0; i < msg->msg_iovlen; i++) {
   11b32:	2500      	movs	r5, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   11b34:	f04f 32ff 	mov.w	r2, #4294967295
   11b38:	f04f 33ff 	mov.w	r3, #4294967295
   11b3c:	482a      	ldr	r0, [pc, #168]	; (11be8 <nrf91_socket_offload_sendmsg+0xd0>)
   11b3e:	f00a fb43 	bl	1c1c8 <z_impl_k_mutex_lock>
		len = 0;
   11b42:	462e      	mov	r6, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   11b44:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 11bec <nrf91_socket_offload_sendmsg+0xd4>
		for (i = 0; i < msg->msg_iovlen; i++) {
   11b48:	68e3      	ldr	r3, [r4, #12]
   11b4a:	42ab      	cmp	r3, r5
   11b4c:	d81f      	bhi.n	11b8e <nrf91_socket_offload_sendmsg+0x76>
		ret = nrf91_socket_offload_sendto(obj, buf, len,
   11b4e:	6863      	ldr	r3, [r4, #4]
   11b50:	4632      	mov	r2, r6
   11b52:	9301      	str	r3, [sp, #4]
   11b54:	6823      	ldr	r3, [r4, #0]
   11b56:	4638      	mov	r0, r7
   11b58:	9300      	str	r3, [sp, #0]
   11b5a:	4924      	ldr	r1, [pc, #144]	; (11bec <nrf91_socket_offload_sendmsg+0xd4>)
   11b5c:	4643      	mov	r3, r8
   11b5e:	f00d ff1f 	bl	1f9a0 <nrf91_socket_offload_sendto>
   11b62:	4605      	mov	r5, r0
	return z_impl_k_mutex_unlock(mutex);
   11b64:	4820      	ldr	r0, [pc, #128]	; (11be8 <nrf91_socket_offload_sendmsg+0xd0>)
   11b66:	f00a fba7 	bl	1c2b8 <z_impl_k_mutex_unlock>
		return ret;
   11b6a:	e005      	b.n	11b78 <nrf91_socket_offload_sendmsg+0x60>
		errno = EINVAL;
   11b6c:	f00d fd01 	bl	1f572 <z_errno>
   11b70:	2316      	movs	r3, #22
		return -1;
   11b72:	f04f 35ff 	mov.w	r5, #4294967295
		errno = EINVAL;
   11b76:	6003      	str	r3, [r0, #0]
}
   11b78:	4628      	mov	r0, r5
   11b7a:	b002      	add	sp, #8
   11b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   11b80:	68a1      	ldr	r1, [r4, #8]
   11b82:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   11b86:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   11b88:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   11b8a:	440a      	add	r2, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   11b8c:	e7cd      	b.n	11b2a <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   11b8e:	68a1      	ldr	r1, [r4, #8]
   11b90:	eb09 0006 	add.w	r0, r9, r6
   11b94:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
   11b98:	685a      	ldr	r2, [r3, #4]
   11b9a:	f851 1035 	ldr.w	r1, [r1, r5, lsl #3]
   11b9e:	f00c fd58 	bl	1e652 <memcpy>
			len += msg->msg_iov[i].iov_len;
   11ba2:	68a3      	ldr	r3, [r4, #8]
   11ba4:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   11ba8:	4453      	add	r3, sl
   11baa:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < msg->msg_iovlen; i++) {
   11bac:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   11bae:	441e      	add	r6, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   11bb0:	e7ca      	b.n	11b48 <nrf91_socket_offload_sendmsg+0x30>
		if (msg->msg_iov[i].iov_len == 0) {
   11bb2:	68a1      	ldr	r1, [r4, #8]
   11bb4:	eb01 03c6 	add.w	r3, r1, r6, lsl #3
   11bb8:	685a      	ldr	r2, [r3, #4]
   11bba:	b162      	cbz	r2, 11bd6 <nrf91_socket_offload_sendmsg+0xbe>
		ret = nrf91_socket_offload_sendto(obj, msg->msg_iov[i].iov_base,
   11bbc:	6863      	ldr	r3, [r4, #4]
   11bbe:	4638      	mov	r0, r7
   11bc0:	9301      	str	r3, [sp, #4]
   11bc2:	6823      	ldr	r3, [r4, #0]
   11bc4:	9300      	str	r3, [sp, #0]
   11bc6:	f851 1036 	ldr.w	r1, [r1, r6, lsl #3]
   11bca:	4643      	mov	r3, r8
   11bcc:	f00d fee8 	bl	1f9a0 <nrf91_socket_offload_sendto>
		if (ret < 0) {
   11bd0:	1e05      	subs	r5, r0, #0
   11bd2:	dbd1      	blt.n	11b78 <nrf91_socket_offload_sendmsg+0x60>
		len += ret;
   11bd4:	44a9      	add	r9, r5
	for (i = 0; i < msg->msg_iovlen; i++) {
   11bd6:	3601      	adds	r6, #1
   11bd8:	68e3      	ldr	r3, [r4, #12]
   11bda:	429e      	cmp	r6, r3
   11bdc:	d3e9      	bcc.n	11bb2 <nrf91_socket_offload_sendmsg+0x9a>
   11bde:	464d      	mov	r5, r9
   11be0:	e7ca      	b.n	11b78 <nrf91_socket_offload_sendmsg+0x60>
   11be2:	2600      	movs	r6, #0
	len = 0;
   11be4:	46b1      	mov	r9, r6
   11be6:	e7f7      	b.n	11bd8 <nrf91_socket_offload_sendmsg+0xc0>
   11be8:	2002018c 	.word	0x2002018c
   11bec:	20022805 	.word	0x20022805

00011bf0 <nrf91_socket_offload_accept>:
{
   11bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11bf4:	b08a      	sub	sp, #40	; 0x28
   11bf6:	4607      	mov	r7, r0
   11bf8:	460c      	mov	r4, r1
   11bfa:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
   11bfc:	f7fb fe22 	bl	d844 <z_reserve_fd>
   11c00:	4606      	mov	r6, r0
	if (fd < 0) {
   11c02:	2e00      	cmp	r6, #0
	int sd = OBJ_TO_SD(obj);
   11c04:	f107 30ff 	add.w	r0, r7, #4294967295
	if (fd < 0) {
   11c08:	da05      	bge.n	11c16 <nrf91_socket_offload_accept+0x26>
	return -1;
   11c0a:	f04f 36ff 	mov.w	r6, #4294967295
}
   11c0e:	4630      	mov	r0, r6
   11c10:	b00a      	add	sp, #40	; 0x28
   11c12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((addr != NULL) && (addrlen != NULL)) {
   11c16:	b31c      	cbz	r4, 11c60 <nrf91_socket_offload_accept+0x70>
   11c18:	b32d      	cbz	r5, 11c66 <nrf91_socket_offload_accept+0x76>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   11c1a:	682b      	ldr	r3, [r5, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   11c1c:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   11c1e:	2b08      	cmp	r3, #8
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   11c20:	bf0c      	ite	eq
   11c22:	2310      	moveq	r3, #16
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   11c24:	2324      	movne	r3, #36	; 0x24
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   11c26:	af01      	add	r7, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   11c28:	9300      	str	r3, [sp, #0]
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   11c2a:	4639      	mov	r1, r7
   11c2c:	f008 f9b8 	bl	19fa0 <nrf_accept>
	if (new_sd < 0) {
   11c30:	f1b0 0800 	subs.w	r8, r0, #0
   11c34:	dbe9      	blt.n	11c0a <nrf91_socket_offload_accept+0x1a>
	if ((addr != NULL) && (addrlen != NULL)) {
   11c36:	b164      	cbz	r4, 11c52 <nrf91_socket_offload_accept+0x62>
   11c38:	b15d      	cbz	r5, 11c52 <nrf91_socket_offload_accept+0x62>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   11c3a:	687b      	ldr	r3, [r7, #4]
   11c3c:	2b02      	cmp	r3, #2
   11c3e:	d115      	bne.n	11c6c <nrf91_socket_offload_accept+0x7c>
			*addrlen = sizeof(struct sockaddr_in);
   11c40:	2308      	movs	r3, #8
   11c42:	602b      	str	r3, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
   11c44:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   11c48:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   11c4a:	2301      	movs	r3, #1
   11c4c:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   11c4e:	9b04      	ldr	r3, [sp, #16]
   11c50:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, SD_TO_OBJ(new_sd),
   11c52:	4630      	mov	r0, r6
   11c54:	4a10      	ldr	r2, [pc, #64]	; (11c98 <nrf91_socket_offload_accept+0xa8>)
   11c56:	f108 0101 	add.w	r1, r8, #1
   11c5a:	f7fb fe25 	bl	d8a8 <z_finalize_fd>
	return fd;
   11c5e:	e7d6      	b.n	11c0e <nrf91_socket_offload_accept+0x1e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   11c60:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   11c62:	4627      	mov	r7, r4
   11c64:	e7e1      	b.n	11c2a <nrf91_socket_offload_accept+0x3a>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   11c66:	462a      	mov	r2, r5
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   11c68:	462f      	mov	r7, r5
   11c6a:	e7de      	b.n	11c2a <nrf91_socket_offload_accept+0x3a>
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   11c6c:	2b0a      	cmp	r3, #10
   11c6e:	d10f      	bne.n	11c90 <nrf91_socket_offload_accept+0xa0>
			*addrlen = sizeof(struct sockaddr_in6);
   11c70:	2318      	movs	r3, #24
   11c72:	602b      	str	r3, [r5, #0]
	ptr->sin6_port = nrf_in->sin6_port;
   11c74:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	ptr->sin6_family = AF_INET6;
   11c78:	4620      	mov	r0, r4
	ptr->sin6_port = nrf_in->sin6_port;
   11c7a:	8063      	strh	r3, [r4, #2]
	ptr->sin6_family = AF_INET6;
   11c7c:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   11c7e:	2210      	movs	r2, #16
	ptr->sin6_family = AF_INET6;
   11c80:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   11c84:	a905      	add	r1, sp, #20
   11c86:	f00c fce4 	bl	1e652 <memcpy>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   11c8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11c8c:	7523      	strb	r3, [r4, #20]
}
   11c8e:	e7e0      	b.n	11c52 <nrf91_socket_offload_accept+0x62>
	z_free_fd(fd);
   11c90:	4630      	mov	r0, r6
   11c92:	f7fb fe13 	bl	d8bc <z_free_fd>
   11c96:	e7b8      	b.n	11c0a <nrf91_socket_offload_accept+0x1a>
   11c98:	00020cb8 	.word	0x00020cb8

00011c9c <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   11c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11ca0:	4606      	mov	r6, r0
   11ca2:	460f      	mov	r7, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   11ca4:	2500      	movs	r5, #0
   11ca6:	f04f 0a01 	mov.w	sl, #1

			if (IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS)) {
				val = 1 - val;
			}

			int err = gpio_pin_set_raw(led_devs[i],
   11caa:	f8df 8064 	ldr.w	r8, [pc, #100]	; 11d10 <dk_set_leds_state.part.0+0x74>
   11cae:	f8df 9064 	ldr.w	r9, [pc, #100]	; 11d14 <dk_set_leds_state.part.0+0x78>
		if ((BIT(i) & leds_on_mask) || (BIT(i) & leds_off_mask)) {
   11cb2:	fa26 f205 	lsr.w	r2, r6, r5
   11cb6:	fa27 f305 	lsr.w	r3, r7, r5
   11cba:	4313      	orrs	r3, r2
   11cbc:	07d9      	lsls	r1, r3, #31
   11cbe:	d51b      	bpl.n	11cf8 <dk_set_leds_state.part.0+0x5c>
			int err = gpio_pin_set_raw(led_devs[i],
   11cc0:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
   11cc4:	7919      	ldrb	r1, [r3, #4]
   11cc6:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (value != 0)	{
   11cca:	fa0a f101 	lsl.w	r1, sl, r1
   11cce:	07d3      	lsls	r3, r2, #31
	return api->port_set_bits_raw(port, pins);
   11cd0:	6883      	ldr	r3, [r0, #8]
   11cd2:	bf54      	ite	pl
   11cd4:	68db      	ldrpl	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   11cd6:	691b      	ldrmi	r3, [r3, #16]
   11cd8:	4798      	blx	r3
   11cda:	4604      	mov	r4, r0
						   led_pins[i].number, val);
			if (err) {
   11cdc:	b160      	cbz	r0, 11cf8 <dk_set_leds_state.part.0+0x5c>
   11cde:	4909      	ldr	r1, [pc, #36]	; (11d04 <dk_set_leds_state.part.0+0x68>)
   11ce0:	4b09      	ldr	r3, [pc, #36]	; (11d08 <dk_set_leds_state.part.0+0x6c>)
				LOG_ERR("Cannot write LED gpio");
   11ce2:	480a      	ldr	r0, [pc, #40]	; (11d0c <dk_set_leds_state.part.0+0x70>)
   11ce4:	1ac9      	subs	r1, r1, r3
   11ce6:	08c9      	lsrs	r1, r1, #3
   11ce8:	0189      	lsls	r1, r1, #6
   11cea:	f041 0101 	orr.w	r1, r1, #1
   11cee:	f00b fedf 	bl	1dab0 <log_0>
			}
		}
	}

	return 0;
}
   11cf2:	4620      	mov	r0, r4
   11cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   11cf8:	3501      	adds	r5, #1
   11cfa:	2d04      	cmp	r5, #4
   11cfc:	d1d9      	bne.n	11cb2 <dk_set_leds_state.part.0+0x16>
	return 0;
   11cfe:	2400      	movs	r4, #0
   11d00:	e7f7      	b.n	11cf2 <dk_set_leds_state.part.0+0x56>
   11d02:	bf00      	nop
   11d04:	00020a8c 	.word	0x00020a8c
   11d08:	00020a64 	.word	0x00020a64
   11d0c:	00021cd9 	.word	0x00021cd9
   11d10:	20020a40 	.word	0x20020a40
   11d14:	00020d10 	.word	0x00020d10

00011d18 <button_pressed>:
{
   11d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   11d1a:	f04f 0320 	mov.w	r3, #32
   11d1e:	f3ef 8511 	mrs	r5, BASEPRI
   11d22:	f383 8811 	msr	BASEPRI, r3
   11d26:	f3bf 8f6f 	isb	sy
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   11d2a:	2400      	movs	r4, #0
   11d2c:	4e16      	ldr	r6, [pc, #88]	; (11d88 <button_pressed+0x70>)
			err = gpio_pin_interrupt_configure(button_devs[i],
   11d2e:	4f17      	ldr	r7, [pc, #92]	; (11d8c <button_pressed+0x74>)
   11d30:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   11d34:	f856 0b04 	ldr.w	r0, [r6], #4
   11d38:	7919      	ldrb	r1, [r3, #4]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   11d3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   11d3e:	3401      	adds	r4, #1
   11d40:	f00d fef6 	bl	1fb30 <z_impl_gpio_pin_interrupt_configure>
   11d44:	2c04      	cmp	r4, #4
   11d46:	d00c      	beq.n	11d62 <button_pressed+0x4a>
   11d48:	2800      	cmp	r0, #0
   11d4a:	d0f1      	beq.n	11d30 <button_pressed+0x18>
   11d4c:	4b10      	ldr	r3, [pc, #64]	; (11d90 <button_pressed+0x78>)
   11d4e:	4911      	ldr	r1, [pc, #68]	; (11d94 <button_pressed+0x7c>)
		LOG_ERR("Cannot disable callbacks");
   11d50:	4811      	ldr	r0, [pc, #68]	; (11d98 <button_pressed+0x80>)
   11d52:	1ac9      	subs	r1, r1, r3
   11d54:	08c9      	lsrs	r1, r1, #3
   11d56:	0189      	lsls	r1, r1, #6
   11d58:	f041 0101 	orr.w	r1, r1, #1
   11d5c:	f00b fea8 	bl	1dab0 <log_0>
   11d60:	e001      	b.n	11d66 <button_pressed+0x4e>
	if (err) {
   11d62:	2800      	cmp	r0, #0
   11d64:	d1f2      	bne.n	11d4c <button_pressed+0x34>
	switch (state) {
   11d66:	4b0d      	ldr	r3, [pc, #52]	; (11d9c <button_pressed+0x84>)
   11d68:	781a      	ldrb	r2, [r3, #0]
   11d6a:	b93a      	cbnz	r2, 11d7c <button_pressed+0x64>
		state = STATE_SCANNING;
   11d6c:	2201      	movs	r2, #1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   11d6e:	490c      	ldr	r1, [pc, #48]	; (11da0 <button_pressed+0x88>)
   11d70:	701a      	strb	r2, [r3, #0]
   11d72:	480c      	ldr	r0, [pc, #48]	; (11da4 <button_pressed+0x8c>)
   11d74:	2221      	movs	r2, #33	; 0x21
   11d76:	2300      	movs	r3, #0
   11d78:	f00a ffb8 	bl	1ccec <k_delayed_work_submit_to_queue>
	__asm__ volatile(
   11d7c:	f385 8811 	msr	BASEPRI, r5
   11d80:	f3bf 8f6f 	isb	sy
}
   11d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11d86:	bf00      	nop
   11d88:	200209fc 	.word	0x200209fc
   11d8c:	00020cf0 	.word	0x00020cf0
   11d90:	00020a64 	.word	0x00020a64
   11d94:	00020a8c 	.word	0x00020a8c
   11d98:	00021cef 	.word	0x00021cef
   11d9c:	20022885 	.word	0x20022885
   11da0:	20020358 	.word	0x20020358
   11da4:	200206c0 	.word	0x200206c0

00011da8 <buttons_scan_fn>:
{
   11da8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t ret = 0;
   11dac:	2400      	movs	r4, #0
   11dae:	4e54      	ldr	r6, [pc, #336]	; (11f00 <buttons_scan_fn+0x158>)
		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
   11db0:	f8df a184 	ldr.w	sl, [pc, #388]	; 11f38 <buttons_scan_fn+0x190>
{
   11db4:	46b1      	mov	r9, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   11db6:	4625      	mov	r5, r4
   11db8:	4657      	mov	r7, sl
		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
   11dba:	eb0a 03c5 	add.w	r3, sl, r5, lsl #3
   11dbe:	f859 0b04 	ldr.w	r0, [r9], #4
   11dc2:	f893 8004 	ldrb.w	r8, [r3, #4]
	return api->port_get_raw(port, value);
   11dc6:	6883      	ldr	r3, [r0, #8]
   11dc8:	a901      	add	r1, sp, #4
   11dca:	685b      	ldr	r3, [r3, #4]
   11dcc:	4798      	blx	r3
	if (ret == 0) {
   11dce:	2800      	cmp	r0, #0
   11dd0:	d14a      	bne.n	11e68 <buttons_scan_fn+0xc0>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   11dd2:	2301      	movs	r3, #1
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
   11dd4:	9a01      	ldr	r2, [sp, #4]
   11dd6:	fa03 f808 	lsl.w	r8, r3, r8
   11dda:	ea18 0f02 	tst.w	r8, r2
   11dde:	d003      	beq.n	11de8 <buttons_scan_fn+0x40>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   11de0:	3501      	adds	r5, #1
   11de2:	2d04      	cmp	r5, #4
   11de4:	d1e9      	bne.n	11dba <buttons_scan_fn+0x12>
   11de6:	e04b      	b.n	11e80 <buttons_scan_fn+0xd8>
			ret |= 1U << i;
   11de8:	40ab      	lsls	r3, r5
   11dea:	431c      	orrs	r4, r3
   11dec:	e7f8      	b.n	11de0 <buttons_scan_fn+0x38>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   11dee:	3d04      	subs	r5, #4
   11df0:	2d00      	cmp	r5, #0
   11df2:	d069      	beq.n	11ec8 <buttons_scan_fn+0x120>
			handler->cb(button_state, has_changed);
   11df4:	46aa      	mov	sl, r5
   11df6:	f85a 3b04 	ldr.w	r3, [sl], #4
   11dfa:	4641      	mov	r1, r8
   11dfc:	4620      	mov	r0, r4
   11dfe:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   11e00:	f1ba 0f00 	cmp.w	sl, #0
   11e04:	d060      	beq.n	11ec8 <buttons_scan_fn+0x120>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   11e06:	686d      	ldr	r5, [r5, #4]
	return node->next;
   11e08:	e05c      	b.n	11ec4 <buttons_scan_fn+0x11c>
		initial_run = false;
   11e0a:	2200      	movs	r2, #0
   11e0c:	701a      	strb	r2, [r3, #0]
   11e0e:	e05e      	b.n	11ece <buttons_scan_fn+0x126>
	__asm__ volatile(
   11e10:	f04f 0320 	mov.w	r3, #32
   11e14:	f3ef 8511 	mrs	r5, BASEPRI
   11e18:	f383 8811 	msr	BASEPRI, r3
   11e1c:	f3bf 8f6f 	isb	sy
		switch (state) {
   11e20:	4b38      	ldr	r3, [pc, #224]	; (11f04 <buttons_scan_fn+0x15c>)
   11e22:	781a      	ldrb	r2, [r3, #0]
   11e24:	2a01      	cmp	r2, #1
   11e26:	d11d      	bne.n	11e64 <buttons_scan_fn+0xbc>
			state = STATE_WAITING;
   11e28:	701c      	strb	r4, [r3, #0]
			err = gpio_pin_interrupt_configure(button_devs[i],
   11e2a:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   11e2e:	f856 0b04 	ldr.w	r0, [r6], #4
   11e32:	7919      	ldrb	r1, [r3, #4]
   11e34:	f44f 3210 	mov.w	r2, #147456	; 0x24000
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   11e38:	3401      	adds	r4, #1
   11e3a:	f00d fe79 	bl	1fb30 <z_impl_gpio_pin_interrupt_configure>
   11e3e:	2c04      	cmp	r4, #4
   11e40:	d001      	beq.n	11e46 <buttons_scan_fn+0x9e>
   11e42:	2800      	cmp	r0, #0
   11e44:	d0f1      	beq.n	11e2a <buttons_scan_fn+0x82>
	__asm__ volatile(
   11e46:	f385 8811 	msr	BASEPRI, r5
   11e4a:	f3bf 8f6f 	isb	sy
		if (err) {
   11e4e:	2800      	cmp	r0, #0
   11e50:	d053      	beq.n	11efa <buttons_scan_fn+0x152>
   11e52:	492d      	ldr	r1, [pc, #180]	; (11f08 <buttons_scan_fn+0x160>)
   11e54:	4b2d      	ldr	r3, [pc, #180]	; (11f0c <buttons_scan_fn+0x164>)
			LOG_ERR("Cannot enable callbacks");
   11e56:	482e      	ldr	r0, [pc, #184]	; (11f10 <buttons_scan_fn+0x168>)
   11e58:	1ac9      	subs	r1, r1, r3
   11e5a:	08c9      	lsrs	r1, r1, #3
   11e5c:	0189      	lsls	r1, r1, #6
   11e5e:	f041 0101 	orr.w	r1, r1, #1
   11e62:	e048      	b.n	11ef6 <buttons_scan_fn+0x14e>
		int err = 0;
   11e64:	4620      	mov	r0, r4
   11e66:	e7ee      	b.n	11e46 <buttons_scan_fn+0x9e>
		if (val < 0) {
   11e68:	daba      	bge.n	11de0 <buttons_scan_fn+0x38>
   11e6a:	4b28      	ldr	r3, [pc, #160]	; (11f0c <buttons_scan_fn+0x164>)
   11e6c:	4926      	ldr	r1, [pc, #152]	; (11f08 <buttons_scan_fn+0x160>)
			LOG_ERR("Cannot read gpio pin");
   11e6e:	4829      	ldr	r0, [pc, #164]	; (11f14 <buttons_scan_fn+0x16c>)
   11e70:	1ac9      	subs	r1, r1, r3
   11e72:	08c9      	lsrs	r1, r1, #3
   11e74:	0189      	lsls	r1, r1, #6
   11e76:	f041 0101 	orr.w	r1, r1, #1
   11e7a:	f00b fe19 	bl	1dab0 <log_0>
			return 0;
   11e7e:	2400      	movs	r4, #0
   11e80:	4b25      	ldr	r3, [pc, #148]	; (11f18 <buttons_scan_fn+0x170>)
   11e82:	e8d3 2fef 	ldaex	r2, [r3]
   11e86:	e8c3 4fe1 	stlex	r1, r4, [r3]
   11e8a:	2900      	cmp	r1, #0
   11e8c:	d1f9      	bne.n	11e82 <buttons_scan_fn+0xda>
	if (!initial_run) {
   11e8e:	4b23      	ldr	r3, [pc, #140]	; (11f1c <buttons_scan_fn+0x174>)
   11e90:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 11f3c <buttons_scan_fn+0x194>
   11e94:	781a      	ldrb	r2, [r3, #0]
   11e96:	2a00      	cmp	r2, #0
   11e98:	d1b7      	bne.n	11e0a <buttons_scan_fn+0x62>
		if (button_scan != last_button_scan) {
   11e9a:	f8d9 1000 	ldr.w	r1, [r9]
   11e9e:	42a1      	cmp	r1, r4
   11ea0:	d015      	beq.n	11ece <buttons_scan_fn+0x126>
	if (button_handler_cb != NULL) {
   11ea2:	4b1f      	ldr	r3, [pc, #124]	; (11f20 <buttons_scan_fn+0x178>)
			uint32_t has_changed = (button_scan ^ last_button_scan);
   11ea4:	ea81 0804 	eor.w	r8, r1, r4
	if (button_handler_cb != NULL) {
   11ea8:	681b      	ldr	r3, [r3, #0]
   11eaa:	b113      	cbz	r3, 11eb2 <buttons_scan_fn+0x10a>
		button_handler_cb(button_state, has_changed);
   11eac:	4641      	mov	r1, r8
   11eae:	4620      	mov	r0, r4
   11eb0:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   11eb2:	f04f 33ff 	mov.w	r3, #4294967295
   11eb6:	f04f 32ff 	mov.w	r2, #4294967295
   11eba:	481a      	ldr	r0, [pc, #104]	; (11f24 <buttons_scan_fn+0x17c>)
   11ebc:	f00a f984 	bl	1c1c8 <z_impl_k_mutex_lock>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   11ec0:	4b19      	ldr	r3, [pc, #100]	; (11f28 <buttons_scan_fn+0x180>)
   11ec2:	681d      	ldr	r5, [r3, #0]
   11ec4:	2d00      	cmp	r5, #0
   11ec6:	d192      	bne.n	11dee <buttons_scan_fn+0x46>
	return z_impl_k_mutex_unlock(mutex);
   11ec8:	4816      	ldr	r0, [pc, #88]	; (11f24 <buttons_scan_fn+0x17c>)
   11eca:	f00a f9f5 	bl	1c2b8 <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   11ece:	f8c9 4000 	str.w	r4, [r9]
	if (button_scan != 0) {
   11ed2:	2c00      	cmp	r4, #0
   11ed4:	d09c      	beq.n	11e10 <buttons_scan_fn+0x68>
   11ed6:	f44f 72a4 	mov.w	r2, #328	; 0x148
   11eda:	2300      	movs	r3, #0
   11edc:	4913      	ldr	r1, [pc, #76]	; (11f2c <buttons_scan_fn+0x184>)
   11ede:	4814      	ldr	r0, [pc, #80]	; (11f30 <buttons_scan_fn+0x188>)
   11ee0:	f00a ff04 	bl	1ccec <k_delayed_work_submit_to_queue>
		if (err) {
   11ee4:	b148      	cbz	r0, 11efa <buttons_scan_fn+0x152>
   11ee6:	4908      	ldr	r1, [pc, #32]	; (11f08 <buttons_scan_fn+0x160>)
   11ee8:	4b08      	ldr	r3, [pc, #32]	; (11f0c <buttons_scan_fn+0x164>)
			LOG_ERR("Cannot add work to workqueue");
   11eea:	4812      	ldr	r0, [pc, #72]	; (11f34 <buttons_scan_fn+0x18c>)
   11eec:	1ac9      	subs	r1, r1, r3
   11eee:	08c9      	lsrs	r1, r1, #3
   11ef0:	0189      	lsls	r1, r1, #6
   11ef2:	f041 0101 	orr.w	r1, r1, #1
			LOG_ERR("Cannot enable callbacks");
   11ef6:	f00b fddb 	bl	1dab0 <log_0>
}
   11efa:	b002      	add	sp, #8
   11efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11f00:	200209fc 	.word	0x200209fc
   11f04:	20022885 	.word	0x20022885
   11f08:	00020a8c 	.word	0x00020a8c
   11f0c:	00020a64 	.word	0x00020a64
   11f10:	00021d3a 	.word	0x00021d3a
   11f14:	00021d08 	.word	0x00021d08
   11f18:	20020a50 	.word	0x20020a50
   11f1c:	20020078 	.word	0x20020078
   11f20:	20020a0c 	.word	0x20020a0c
   11f24:	20020a10 	.word	0x20020a10
   11f28:	20020a24 	.word	0x20020a24
   11f2c:	20020358 	.word	0x20020358
   11f30:	200206c0 	.word	0x200206c0
   11f34:	00021d1d 	.word	0x00021d1d
   11f38:	00020cf0 	.word	0x00020cf0
   11f3c:	20020a38 	.word	0x20020a38

00011f40 <dk_leds_init>:
{
   11f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   11f42:	2600      	movs	r6, #0
   11f44:	4d18      	ldr	r5, [pc, #96]	; (11fa8 <dk_leds_init+0x68>)
   11f46:	4f19      	ldr	r7, [pc, #100]	; (11fac <dk_leds_init+0x6c>)
		led_devs[i] = device_get_binding(led_pins[i].port);
   11f48:	6828      	ldr	r0, [r5, #0]
   11f4a:	f009 fe85 	bl	1bc58 <z_impl_device_get_binding>
   11f4e:	f847 0b04 	str.w	r0, [r7], #4
		if (!led_devs[i]) {
   11f52:	b968      	cbnz	r0, 11f70 <dk_leds_init+0x30>
   11f54:	4b16      	ldr	r3, [pc, #88]	; (11fb0 <dk_leds_init+0x70>)
   11f56:	4917      	ldr	r1, [pc, #92]	; (11fb4 <dk_leds_init+0x74>)
			LOG_ERR("Cannot bind gpio device");
   11f58:	4817      	ldr	r0, [pc, #92]	; (11fb8 <dk_leds_init+0x78>)
   11f5a:	1ac9      	subs	r1, r1, r3
   11f5c:	08c9      	lsrs	r1, r1, #3
   11f5e:	0189      	lsls	r1, r1, #6
   11f60:	f041 0101 	orr.w	r1, r1, #1
   11f64:	f00b fda4 	bl	1dab0 <log_0>
			return -ENODEV;
   11f68:	f06f 0412 	mvn.w	r4, #18
}
   11f6c:	4620      	mov	r0, r4
   11f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = gpio_pin_configure(led_devs[i], led_pins[i].number,
   11f70:	f44f 7200 	mov.w	r2, #512	; 0x200
   11f74:	7929      	ldrb	r1, [r5, #4]
   11f76:	f00d fdef 	bl	1fb58 <gpio_pin_configure>
		if (err) {
   11f7a:	4604      	mov	r4, r0
   11f7c:	b150      	cbz	r0, 11f94 <dk_leds_init+0x54>
   11f7e:	4b0c      	ldr	r3, [pc, #48]	; (11fb0 <dk_leds_init+0x70>)
   11f80:	490c      	ldr	r1, [pc, #48]	; (11fb4 <dk_leds_init+0x74>)
			LOG_ERR("Cannot configure LED gpio");
   11f82:	480e      	ldr	r0, [pc, #56]	; (11fbc <dk_leds_init+0x7c>)
   11f84:	1ac9      	subs	r1, r1, r3
   11f86:	08c9      	lsrs	r1, r1, #3
   11f88:	0189      	lsls	r1, r1, #6
   11f8a:	f041 0101 	orr.w	r1, r1, #1
   11f8e:	f00b fd8f 	bl	1dab0 <log_0>
			return err;
   11f92:	e7eb      	b.n	11f6c <dk_leds_init+0x2c>
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   11f94:	3601      	adds	r6, #1
   11f96:	2e04      	cmp	r6, #4
   11f98:	f105 0508 	add.w	r5, r5, #8
   11f9c:	d1d4      	bne.n	11f48 <dk_leds_init+0x8>
}
   11f9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   11fa2:	210f      	movs	r1, #15
   11fa4:	f7ff be7a 	b.w	11c9c <dk_set_leds_state.part.0>
   11fa8:	00020d10 	.word	0x00020d10
   11fac:	20020a40 	.word	0x20020a40
   11fb0:	00020a64 	.word	0x00020a64
   11fb4:	00020a8c 	.word	0x00020a8c
   11fb8:	00021d52 	.word	0x00021d52
   11fbc:	00021d6a 	.word	0x00021d6a

00011fc0 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11fc0:	4b05      	ldr	r3, [pc, #20]	; (11fd8 <dk_read_buttons+0x18>)
   11fc2:	e8d3 3faf 	lda	r3, [r3]
	if (button_state != NULL) {
   11fc6:	b100      	cbz	r0, 11fca <dk_read_buttons+0xa>
		*button_state = current_state;
   11fc8:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   11fca:	4804      	ldr	r0, [pc, #16]	; (11fdc <dk_read_buttons+0x1c>)
   11fcc:	b111      	cbz	r1, 11fd4 <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   11fce:	6802      	ldr	r2, [r0, #0]
   11fd0:	405a      	eors	r2, r3
   11fd2:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   11fd4:	6003      	str	r3, [r0, #0]
}
   11fd6:	4770      	bx	lr
   11fd8:	20020a50 	.word	0x20020a50
   11fdc:	20020a3c 	.word	0x20020a3c

00011fe0 <dk_buttons_init>:
{
   11fe0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	button_handler_cb = button_handler;
   11fe4:	4b48      	ldr	r3, [pc, #288]	; (12108 <dk_buttons_init+0x128>)
   11fe6:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   11fe8:	4d48      	ldr	r5, [pc, #288]	; (1210c <dk_buttons_init+0x12c>)
   11fea:	4f49      	ldr	r7, [pc, #292]	; (12110 <dk_buttons_init+0x130>)
   11fec:	4849      	ldr	r0, [pc, #292]	; (12114 <dk_buttons_init+0x134>)
   11fee:	f00e f807 	bl	20000 <z_impl_k_mutex_init>
   11ff2:	46b9      	mov	r9, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   11ff4:	2600      	movs	r6, #0
   11ff6:	46a8      	mov	r8, r5
		button_devs[i] = device_get_binding(button_pins[i].port);
   11ff8:	6828      	ldr	r0, [r5, #0]
   11ffa:	f009 fe2d 	bl	1bc58 <z_impl_device_get_binding>
   11ffe:	f849 0b04 	str.w	r0, [r9], #4
		if (!button_devs[i]) {
   12002:	b970      	cbnz	r0, 12022 <dk_buttons_init+0x42>
   12004:	4b44      	ldr	r3, [pc, #272]	; (12118 <dk_buttons_init+0x138>)
   12006:	4945      	ldr	r1, [pc, #276]	; (1211c <dk_buttons_init+0x13c>)
			LOG_ERR("Cannot bind gpio device");
   12008:	4845      	ldr	r0, [pc, #276]	; (12120 <dk_buttons_init+0x140>)
   1200a:	1ac9      	subs	r1, r1, r3
   1200c:	08c9      	lsrs	r1, r1, #3
   1200e:	0189      	lsls	r1, r1, #6
   12010:	f041 0101 	orr.w	r1, r1, #1
   12014:	f00b fd4c 	bl	1dab0 <log_0>
			return -ENODEV;
   12018:	f06f 0412 	mvn.w	r4, #18
}
   1201c:	4620      	mov	r0, r4
   1201e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   12022:	f44f 7288 	mov.w	r2, #272	; 0x110
   12026:	7929      	ldrb	r1, [r5, #4]
   12028:	f00d fd96 	bl	1fb58 <gpio_pin_configure>
		if (err) {
   1202c:	4604      	mov	r4, r0
   1202e:	b150      	cbz	r0, 12046 <dk_buttons_init+0x66>
   12030:	493a      	ldr	r1, [pc, #232]	; (1211c <dk_buttons_init+0x13c>)
   12032:	4b39      	ldr	r3, [pc, #228]	; (12118 <dk_buttons_init+0x138>)
			LOG_ERR("Cannot configure button gpio");
   12034:	483b      	ldr	r0, [pc, #236]	; (12124 <dk_buttons_init+0x144>)
   12036:	1ac9      	subs	r1, r1, r3
   12038:	08c9      	lsrs	r1, r1, #3
   1203a:	0189      	lsls	r1, r1, #6
   1203c:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Cannot add work to workqueue");
   12040:	f00b fd36 	bl	1dab0 <log_0>
		return err;
   12044:	e7ea      	b.n	1201c <dk_buttons_init+0x3c>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   12046:	3601      	adds	r6, #1
   12048:	2e04      	cmp	r6, #4
   1204a:	f105 0508 	add.w	r5, r5, #8
   1204e:	d1d3      	bne.n	11ff8 <dk_buttons_init+0x18>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   12050:	4605      	mov	r5, r0
	uint32_t pin_mask = 0;
   12052:	4681      	mov	r9, r0
		pin_mask |= BIT(button_pins[i].number);
   12054:	f04f 0b01 	mov.w	fp, #1
   12058:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 12110 <dk_buttons_init+0x130>
		err = gpio_pin_interrupt_configure(button_devs[i],
   1205c:	eb08 03c5 	add.w	r3, r8, r5, lsl #3
   12060:	f85a 0b04 	ldr.w	r0, [sl], #4
   12064:	791e      	ldrb	r6, [r3, #4]
   12066:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1206a:	4631      	mov	r1, r6
   1206c:	f00d fd60 	bl	1fb30 <z_impl_gpio_pin_interrupt_configure>
		if (err) {
   12070:	4604      	mov	r4, r0
   12072:	b140      	cbz	r0, 12086 <dk_buttons_init+0xa6>
   12074:	4929      	ldr	r1, [pc, #164]	; (1211c <dk_buttons_init+0x13c>)
   12076:	4b28      	ldr	r3, [pc, #160]	; (12118 <dk_buttons_init+0x138>)
			LOG_ERR("Cannot disable callbacks()");
   12078:	482b      	ldr	r0, [pc, #172]	; (12128 <dk_buttons_init+0x148>)
   1207a:	1ac9      	subs	r1, r1, r3
   1207c:	08c9      	lsrs	r1, r1, #3
   1207e:	0189      	lsls	r1, r1, #6
   12080:	f041 0101 	orr.w	r1, r1, #1
   12084:	e7dc      	b.n	12040 <dk_buttons_init+0x60>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   12086:	3501      	adds	r5, #1
		pin_mask |= BIT(button_pins[i].number);
   12088:	fa0b f606 	lsl.w	r6, fp, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1208c:	2d04      	cmp	r5, #4
		pin_mask |= BIT(button_pins[i].number);
   1208e:	ea49 0906 	orr.w	r9, r9, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   12092:	d1e3      	bne.n	1205c <dk_buttons_init+0x7c>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   12094:	4605      	mov	r5, r0
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   12096:	4e25      	ldr	r6, [pc, #148]	; (1212c <dk_buttons_init+0x14c>)
   12098:	4b25      	ldr	r3, [pc, #148]	; (12130 <dk_buttons_init+0x150>)
	callback->pin_mask = pin_mask;
   1209a:	e9c6 3901 	strd	r3, r9, [r6, #4]
		err = gpio_add_callback(button_devs[i], &gpio_cb);
   1209e:	f857 0b04 	ldr.w	r0, [r7], #4
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   120a2:	6883      	ldr	r3, [r0, #8]
   120a4:	69db      	ldr	r3, [r3, #28]
   120a6:	b16b      	cbz	r3, 120c4 <dk_buttons_init+0xe4>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   120a8:	2201      	movs	r2, #1
   120aa:	4631      	mov	r1, r6
   120ac:	4798      	blx	r3
		if (err) {
   120ae:	4604      	mov	r4, r0
   120b0:	b158      	cbz	r0, 120ca <dk_buttons_init+0xea>
   120b2:	491a      	ldr	r1, [pc, #104]	; (1211c <dk_buttons_init+0x13c>)
   120b4:	4b18      	ldr	r3, [pc, #96]	; (12118 <dk_buttons_init+0x138>)
			LOG_ERR("Cannot add callback");
   120b6:	481f      	ldr	r0, [pc, #124]	; (12134 <dk_buttons_init+0x154>)
   120b8:	1ac9      	subs	r1, r1, r3
   120ba:	08c9      	lsrs	r1, r1, #3
   120bc:	0189      	lsls	r1, r1, #6
   120be:	f041 0101 	orr.w	r1, r1, #1
   120c2:	e7bd      	b.n	12040 <dk_buttons_init+0x60>
		return -ENOTSUP;
   120c4:	f06f 0422 	mvn.w	r4, #34	; 0x22
   120c8:	e7f3      	b.n	120b2 <dk_buttons_init+0xd2>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   120ca:	3501      	adds	r5, #1
   120cc:	2d04      	cmp	r5, #4
   120ce:	d1e6      	bne.n	1209e <dk_buttons_init+0xbe>
	k_delayed_work_init(&buttons_scan, buttons_scan_fn);
   120d0:	4919      	ldr	r1, [pc, #100]	; (12138 <dk_buttons_init+0x158>)
   120d2:	481a      	ldr	r0, [pc, #104]	; (1213c <dk_buttons_init+0x15c>)
   120d4:	f00e f985 	bl	203e2 <k_delayed_work_init>
	state = STATE_SCANNING;
   120d8:	2201      	movs	r2, #1
   120da:	4b19      	ldr	r3, [pc, #100]	; (12140 <dk_buttons_init+0x160>)
   120dc:	4917      	ldr	r1, [pc, #92]	; (1213c <dk_buttons_init+0x15c>)
   120de:	701a      	strb	r2, [r3, #0]
   120e0:	4818      	ldr	r0, [pc, #96]	; (12144 <dk_buttons_init+0x164>)
   120e2:	2200      	movs	r2, #0
   120e4:	2300      	movs	r3, #0
   120e6:	f00a fe01 	bl	1ccec <k_delayed_work_submit_to_queue>
	if (err) {
   120ea:	4604      	mov	r4, r0
   120ec:	b140      	cbz	r0, 12100 <dk_buttons_init+0x120>
   120ee:	490b      	ldr	r1, [pc, #44]	; (1211c <dk_buttons_init+0x13c>)
   120f0:	4b09      	ldr	r3, [pc, #36]	; (12118 <dk_buttons_init+0x138>)
		LOG_ERR("Cannot add work to workqueue");
   120f2:	4815      	ldr	r0, [pc, #84]	; (12148 <dk_buttons_init+0x168>)
   120f4:	1ac9      	subs	r1, r1, r3
   120f6:	08c9      	lsrs	r1, r1, #3
   120f8:	0189      	lsls	r1, r1, #6
   120fa:	f041 0101 	orr.w	r1, r1, #1
   120fe:	e79f      	b.n	12040 <dk_buttons_init+0x60>
	dk_read_buttons(NULL, NULL);
   12100:	4601      	mov	r1, r0
   12102:	f7ff ff5d 	bl	11fc0 <dk_read_buttons>
	return 0;
   12106:	e789      	b.n	1201c <dk_buttons_init+0x3c>
   12108:	20020a0c 	.word	0x20020a0c
   1210c:	00020cf0 	.word	0x00020cf0
   12110:	200209fc 	.word	0x200209fc
   12114:	20020a10 	.word	0x20020a10
   12118:	00020a64 	.word	0x00020a64
   1211c:	00020a8c 	.word	0x00020a8c
   12120:	00021d52 	.word	0x00021d52
   12124:	00021d84 	.word	0x00021d84
   12128:	00021da1 	.word	0x00021da1
   1212c:	20020a2c 	.word	0x20020a2c
   12130:	00011d19 	.word	0x00011d19
   12134:	00021dbc 	.word	0x00021dbc
   12138:	00011da9 	.word	0x00011da9
   1213c:	20020358 	.word	0x20020358
   12140:	20022885 	.word	0x20022885
   12144:	200206c0 	.word	0x200206c0
   12148:	00021d1d 	.word	0x00021d1d

0001214c <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
	int err;

	if (led_idx > ARRAY_SIZE(led_pins)) {
   1214c:	2804      	cmp	r0, #4
{
   1214e:	4603      	mov	r3, r0
   12150:	460a      	mov	r2, r1
   12152:	b510      	push	{r4, lr}
	if (led_idx > ARRAY_SIZE(led_pins)) {
   12154:	d90d      	bls.n	12172 <dk_set_led+0x26>
   12156:	4b16      	ldr	r3, [pc, #88]	; (121b0 <dk_set_led+0x64>)
   12158:	4916      	ldr	r1, [pc, #88]	; (121b4 <dk_set_led+0x68>)
		LOG_ERR("LED index out of the range");
   1215a:	4817      	ldr	r0, [pc, #92]	; (121b8 <dk_set_led+0x6c>)
   1215c:	1ac9      	subs	r1, r1, r3
   1215e:	08c9      	lsrs	r1, r1, #3
   12160:	0189      	lsls	r1, r1, #6
   12162:	f041 0101 	orr.w	r1, r1, #1
   12166:	f00b fca3 	bl	1dab0 <log_0>
		return -EINVAL;
   1216a:	f06f 0415 	mvn.w	r4, #21
		IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS) ? !val : val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   1216e:	4620      	mov	r0, r4
   12170:	bd10      	pop	{r4, pc}
	err = gpio_pin_set_raw(led_devs[led_idx], led_pins[led_idx].number,
   12172:	4912      	ldr	r1, [pc, #72]	; (121bc <dk_set_led+0x70>)
   12174:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   12178:	4911      	ldr	r1, [pc, #68]	; (121c0 <dk_set_led+0x74>)
   1217a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   1217e:	7919      	ldrb	r1, [r3, #4]
   12180:	2301      	movs	r3, #1
   12182:	fa03 f101 	lsl.w	r1, r3, r1
	if (value != 0)	{
   12186:	b982      	cbnz	r2, 121aa <dk_set_led+0x5e>
	return api->port_set_bits_raw(port, pins);
   12188:	6883      	ldr	r3, [r0, #8]
   1218a:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1218c:	4798      	blx	r3
   1218e:	4604      	mov	r4, r0
	if (err) {
   12190:	2800      	cmp	r0, #0
   12192:	d0ec      	beq.n	1216e <dk_set_led+0x22>
   12194:	4b06      	ldr	r3, [pc, #24]	; (121b0 <dk_set_led+0x64>)
   12196:	4907      	ldr	r1, [pc, #28]	; (121b4 <dk_set_led+0x68>)
		LOG_ERR("Cannot write LED gpio");
   12198:	480a      	ldr	r0, [pc, #40]	; (121c4 <dk_set_led+0x78>)
   1219a:	1ac9      	subs	r1, r1, r3
   1219c:	08c9      	lsrs	r1, r1, #3
   1219e:	0189      	lsls	r1, r1, #6
   121a0:	f041 0101 	orr.w	r1, r1, #1
   121a4:	f00b fc84 	bl	1dab0 <log_0>
   121a8:	e7e1      	b.n	1216e <dk_set_led+0x22>
   121aa:	6883      	ldr	r3, [r0, #8]
   121ac:	691b      	ldr	r3, [r3, #16]
   121ae:	e7ed      	b.n	1218c <dk_set_led+0x40>
   121b0:	00020a64 	.word	0x00020a64
   121b4:	00020a8c 	.word	0x00020a8c
   121b8:	00021dd0 	.word	0x00021dd0
   121bc:	20020a40 	.word	0x20020a40
   121c0:	00020d10 	.word	0x00020d10
   121c4:	00021cd9 	.word	0x00021cd9

000121c8 <open_socket>:
/* Message queue to return the result in the case of a synchronous call */
K_MSGQ_DEFINE(response_sync, sizeof(struct resp_item), 1, 4);
K_MUTEX_DEFINE(response_sync_get);

static int open_socket(void)
{
   121c8:	b508      	push	{r3, lr}
	return z_impl_zsock_socket(family, type, proto);
   121ca:	f240 2201 	movw	r2, #513	; 0x201
   121ce:	2102      	movs	r1, #2
   121d0:	2066      	movs	r0, #102	; 0x66
   121d2:	f7fd f84d 	bl	f270 <z_impl_zsock_socket>
	common_socket_fd = socket(AF_LTE, SOCK_DGRAM, NPROTO_AT);
   121d6:	4b05      	ldr	r3, [pc, #20]	; (121ec <open_socket+0x24>)
   121d8:	6018      	str	r0, [r3, #0]

	if (common_socket_fd == -1) {
   121da:	3001      	adds	r0, #1
   121dc:	d104      	bne.n	121e8 <open_socket+0x20>
		return -errno;
   121de:	f00d fcd4 	bl	1fb8a <z_errno>
   121e2:	6800      	ldr	r0, [r0, #0]
   121e4:	4240      	negs	r0, r0
	}

	return 0;
}
   121e6:	bd08      	pop	{r3, pc}
	return 0;
   121e8:	2000      	movs	r0, #0
   121ea:	e7fc      	b.n	121e6 <open_socket+0x1e>
   121ec:	20020a58 	.word	0x20020a58

000121f0 <at_cmd_driver_init>:
	}
	notification_handler = handler;
}

static int at_cmd_driver_init(const struct device *dev)
{
   121f0:	b530      	push	{r4, r5, lr}
	static bool initialized;

	if (initialized) {
   121f2:	4d17      	ldr	r5, [pc, #92]	; (12250 <at_cmd_driver_init+0x60>)
{
   121f4:	b089      	sub	sp, #36	; 0x24
	if (initialized) {
   121f6:	782b      	ldrb	r3, [r5, #0]
   121f8:	bb43      	cbnz	r3, 1224c <at_cmd_driver_init+0x5c>

	int err;

	ARG_UNUSED(dev);

	err = open_socket();
   121fa:	f7ff ffe5 	bl	121c8 <open_socket>
	if (err) {
   121fe:	4604      	mov	r4, r0
   12200:	b168      	cbz	r0, 1221e <at_cmd_driver_init+0x2e>
   12202:	4a14      	ldr	r2, [pc, #80]	; (12254 <at_cmd_driver_init+0x64>)
   12204:	4b14      	ldr	r3, [pc, #80]	; (12258 <at_cmd_driver_init+0x68>)
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   12206:	4601      	mov	r1, r0
   12208:	1ad2      	subs	r2, r2, r3
   1220a:	08d2      	lsrs	r2, r2, #3
   1220c:	0192      	lsls	r2, r2, #6
   1220e:	4813      	ldr	r0, [pc, #76]	; (1225c <at_cmd_driver_init+0x6c>)
   12210:	f042 0201 	orr.w	r2, r2, #1
   12214:	f00b fc5b 	bl	1dace <log_1>

	initialized = true;
	LOG_DBG("Common AT socket processing thread created");

	return 0;
}
   12218:	4620      	mov	r0, r4
   1221a:	b009      	add	sp, #36	; 0x24
   1221c:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1221e:	2200      	movs	r2, #0
   12220:	2300      	movs	r3, #0
   12222:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12226:	230a      	movs	r3, #10
   12228:	e9cd 0000 	strd	r0, r0, [sp]
   1222c:	e9cd 0302 	strd	r0, r3, [sp, #8]
   12230:	9004      	str	r0, [sp, #16]
   12232:	f44f 6280 	mov.w	r2, #1024	; 0x400
   12236:	4b0a      	ldr	r3, [pc, #40]	; (12260 <at_cmd_driver_init+0x70>)
   12238:	490a      	ldr	r1, [pc, #40]	; (12264 <at_cmd_driver_init+0x74>)
   1223a:	480b      	ldr	r0, [pc, #44]	; (12268 <at_cmd_driver_init+0x78>)
   1223c:	f00a fca4 	bl	1cb88 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   12240:	490a      	ldr	r1, [pc, #40]	; (1226c <at_cmd_driver_init+0x7c>)
   12242:	f00e f86d 	bl	20320 <z_impl_k_thread_name_set>
	initialized = true;
   12246:	2301      	movs	r3, #1
   12248:	702b      	strb	r3, [r5, #0]
	return 0;
   1224a:	e7e5      	b.n	12218 <at_cmd_driver_init+0x28>
		return 0;
   1224c:	2400      	movs	r4, #0
   1224e:	e7e3      	b.n	12218 <at_cmd_driver_init+0x28>
   12250:	20023312 	.word	0x20023312
   12254:	00020a64 	.word	0x00020a64
   12258:	00020a64 	.word	0x00020a64
   1225c:	00021dff 	.word	0x00021dff
   12260:	00012391 	.word	0x00012391
   12264:	20024790 	.word	0x20024790
   12268:	20020388 	.word	0x20020388
   1226c:	00021e21 	.word	0x00021e21

00012270 <complete_cmd>:
{
   12270:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   12272:	4c08      	ldr	r4, [pc, #32]	; (12294 <complete_cmd+0x24>)
   12274:	f04f 32ff 	mov.w	r2, #4294967295
   12278:	f04f 33ff 	mov.w	r3, #4294967295
   1227c:	4620      	mov	r0, r4
   1227e:	f009 ffa3 	bl	1c1c8 <z_impl_k_mutex_lock>
	current_cmd.cmd = NULL;
   12282:	2200      	movs	r2, #0
   12284:	4b04      	ldr	r3, [pc, #16]	; (12298 <complete_cmd+0x28>)
   12286:	601a      	str	r2, [r3, #0]
	return z_impl_k_mutex_unlock(mutex);
   12288:	4620      	mov	r0, r4
}
   1228a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1228e:	f00a b813 	b.w	1c2b8 <z_impl_k_mutex_unlock>
   12292:	bf00      	nop
   12294:	2002013c 	.word	0x2002013c
   12298:	20020a5c 	.word	0x20020a5c

0001229c <load_cmd_and_write>:
{
   1229c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   122a0:	b086      	sub	sp, #24
		if (current_cmd.cmd != NULL ||
   122a2:	4e32      	ldr	r6, [pc, #200]	; (1236c <load_cmd_and_write+0xd0>)
	return z_impl_k_mutex_lock(mutex, timeout);
   122a4:	f04f 33ff 	mov.w	r3, #4294967295
   122a8:	4637      	mov	r7, r6
   122aa:	f04f 32ff 	mov.w	r2, #4294967295
   122ae:	4830      	ldr	r0, [pc, #192]	; (12370 <load_cmd_and_write+0xd4>)
   122b0:	f009 ff8a 	bl	1c1c8 <z_impl_k_mutex_lock>
   122b4:	4d2f      	ldr	r5, [pc, #188]	; (12374 <load_cmd_and_write+0xd8>)
   122b6:	4b30      	ldr	r3, [pc, #192]	; (12378 <load_cmd_and_write+0xdc>)
	return z_impl_k_msgq_get(msgq, data, timeout);
   122b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 1238c <load_cmd_and_write+0xf0>
   122bc:	1aed      	subs	r5, r5, r3
   122be:	08ed      	lsrs	r5, r5, #3
   122c0:	6833      	ldr	r3, [r6, #0]
   122c2:	2b00      	cmp	r3, #0
   122c4:	d14b      	bne.n	1235e <load_cmd_and_write+0xc2>
   122c6:	2200      	movs	r2, #0
   122c8:	2300      	movs	r3, #0
   122ca:	4631      	mov	r1, r6
   122cc:	4640      	mov	r0, r8
   122ce:	f009 ff1d 	bl	1c10c <z_impl_k_msgq_get>
   122d2:	4604      	mov	r4, r0
   122d4:	2800      	cmp	r0, #0
   122d6:	d142      	bne.n	1235e <load_cmd_and_write+0xc2>
		ret = at_write(current_cmd.cmd);
   122d8:	6831      	ldr	r1, [r6, #0]
	int bytes_to_send = strlen(cmd);
   122da:	4608      	mov	r0, r1
   122dc:	9103      	str	r1, [sp, #12]
   122de:	f00c f986 	bl	1e5ee <strlen>
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   122e2:	4b26      	ldr	r3, [pc, #152]	; (1237c <load_cmd_and_write+0xe0>)
	int bytes_to_send = strlen(cmd);
   122e4:	4602      	mov	r2, r0
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   122e6:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   122e8:	9903      	ldr	r1, [sp, #12]
   122ea:	4623      	mov	r3, r4
   122ec:	e9cd 4400 	strd	r4, r4, [sp]
   122f0:	9202      	str	r2, [sp, #8]
   122f2:	f00b ff03 	bl	1e0fc <z_impl_zsock_sendto>
   122f6:	4601      	mov	r1, r0
	if (bytes_sent == -1) {
   122f8:	1c48      	adds	r0, r1, #1
   122fa:	9a02      	ldr	r2, [sp, #8]
   122fc:	d126      	bne.n	1234c <load_cmd_and_write+0xb0>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
   122fe:	f00d fc44 	bl	1fb8a <z_errno>
   12302:	01ac      	lsls	r4, r5, #6
   12304:	f044 0401 	orr.w	r4, r4, #1
   12308:	4622      	mov	r2, r4
   1230a:	6801      	ldr	r1, [r0, #0]
   1230c:	481c      	ldr	r0, [pc, #112]	; (12380 <load_cmd_and_write+0xe4>)
   1230e:	f00b fbde 	bl	1dace <log_1>
		return -errno;
   12312:	f00d fc3a 	bl	1fb8a <z_errno>
   12316:	6804      	ldr	r4, [r0, #0]
   12318:	4264      	negs	r4, r4
		if (current_cmd.flags & AT_CMD_BUF_CMD) {
   1231a:	7c3b      	ldrb	r3, [r7, #16]
   1231c:	07da      	lsls	r2, r3, #31
   1231e:	d502      	bpl.n	12326 <load_cmd_and_write+0x8a>
			k_free(current_cmd.cmd);
   12320:	6838      	ldr	r0, [r7, #0]
   12322:	f00e fa28 	bl	20776 <k_free>
		if (ret != 0) {
   12326:	b1d4      	cbz	r4, 1235e <load_cmd_and_write+0xc2>
			resp.state = AT_CMD_ERROR_WRITE;
   12328:	2305      	movs	r3, #5
   1232a:	f88d 3014 	strb.w	r3, [sp, #20]
			if (current_cmd.flags & AT_CMD_SYNC) {
   1232e:	7c3b      	ldrb	r3, [r7, #16]
			resp.code = ret;
   12330:	9404      	str	r4, [sp, #16]
			if (current_cmd.flags & AT_CMD_SYNC) {
   12332:	079b      	lsls	r3, r3, #30
   12334:	d507      	bpl.n	12346 <load_cmd_and_write+0xaa>
	return z_impl_k_msgq_put(msgq, data, timeout);
   12336:	f04f 32ff 	mov.w	r2, #4294967295
   1233a:	f04f 33ff 	mov.w	r3, #4294967295
   1233e:	4811      	ldr	r0, [pc, #68]	; (12384 <load_cmd_and_write+0xe8>)
   12340:	a904      	add	r1, sp, #16
   12342:	f009 fe8f 	bl	1c064 <z_impl_k_msgq_put>
			complete_cmd();
   12346:	f7ff ff93 	bl	12270 <complete_cmd>
	} while (ret != 0);
   1234a:	e7b9      	b.n	122c0 <load_cmd_and_write+0x24>
	if (bytes_sent != bytes_to_send) {
   1234c:	428a      	cmp	r2, r1
   1234e:	d0e4      	beq.n	1231a <load_cmd_and_write+0x7e>
		LOG_WRN("Bytes sent (%d) was not the same as expected (%d)",
   12350:	01ab      	lsls	r3, r5, #6
   12352:	480d      	ldr	r0, [pc, #52]	; (12388 <load_cmd_and_write+0xec>)
   12354:	f043 0302 	orr.w	r3, r3, #2
   12358:	f00b fbd0 	bl	1dafc <log_2>
   1235c:	e7dd      	b.n	1231a <load_cmd_and_write+0x7e>
	return z_impl_k_mutex_unlock(mutex);
   1235e:	4804      	ldr	r0, [pc, #16]	; (12370 <load_cmd_and_write+0xd4>)
   12360:	f009 ffaa 	bl	1c2b8 <z_impl_k_mutex_unlock>
}
   12364:	b006      	add	sp, #24
   12366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1236a:	bf00      	nop
   1236c:	20020a5c 	.word	0x20020a5c
   12370:	2002013c 	.word	0x2002013c
   12374:	00020a64 	.word	0x00020a64
   12378:	00020a64 	.word	0x00020a64
   1237c:	20020a58 	.word	0x20020a58
   12380:	00021e36 	.word	0x00021e36
   12384:	200201c8 	.word	0x200201c8
   12388:	00021e59 	.word	0x00021e59
   1238c:	200201a0 	.word	0x200201a0

00012390 <socket_thread_fn>:
{
   12390:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   12394:	f8df 9260 	ldr.w	r9, [pc, #608]	; 125f8 <socket_thread_fn+0x268>
   12398:	4f83      	ldr	r7, [pc, #524]	; (125a8 <socket_thread_fn+0x218>)
   1239a:	46ca      	mov	sl, r9
   1239c:	4b83      	ldr	r3, [pc, #524]	; (125ac <socket_thread_fn+0x21c>)
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   1239e:	4e84      	ldr	r6, [pc, #528]	; (125b0 <socket_thread_fn+0x220>)
   123a0:	1aff      	subs	r7, r7, r3
   123a2:	08ff      	lsrs	r7, r7, #3
		load_cmd_and_write();
   123a4:	f7ff ff7a 	bl	1229c <load_cmd_and_write>
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   123a8:	f8d9 0000 	ldr.w	r0, [r9]
   123ac:	2500      	movs	r5, #0
   123ae:	f640 228c 	movw	r2, #2700	; 0xa8c
   123b2:	462b      	mov	r3, r5
   123b4:	e9cd 5500 	strd	r5, r5, [sp]
   123b8:	497d      	ldr	r1, [pc, #500]	; (125b0 <socket_thread_fn+0x220>)
   123ba:	f00b fed2 	bl	1e162 <z_impl_zsock_recvfrom>
		ret.code  = 0;
   123be:	4c7d      	ldr	r4, [pc, #500]	; (125b4 <socket_thread_fn+0x224>)
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   123c0:	f8df b238 	ldr.w	fp, [pc, #568]	; 125fc <socket_thread_fn+0x26c>
		if (bytes_read < 0) {
   123c4:	42a8      	cmp	r0, r5
   123c6:	4680      	mov	r8, r0
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   123c8:	f8cb 0000 	str.w	r0, [fp]
		ret.code  = 0;
   123cc:	6025      	str	r5, [r4, #0]
		ret.state = AT_CMD_OK;
   123ce:	7125      	strb	r5, [r4, #4]
		if (bytes_read < 0) {
   123d0:	da6a      	bge.n	124a8 <socket_thread_fn+0x118>
			if (errno == EHOSTDOWN) {
   123d2:	f00d fbda 	bl	1fb8a <z_errno>
   123d6:	6803      	ldr	r3, [r0, #0]
   123d8:	2b43      	cmp	r3, #67	; 0x43
   123da:	d122      	bne.n	12422 <socket_thread_fn+0x92>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   123dc:	2301      	movs	r3, #1
   123de:	4c76      	ldr	r4, [pc, #472]	; (125b8 <socket_thread_fn+0x228>)
   123e0:	e8d4 2fef 	ldaex	r2, [r4]
   123e4:	e8c4 3fe1 	stlex	r1, r3, [r4]
   123e8:	2900      	cmp	r1, #0
   123ea:	d1f9      	bne.n	123e0 <socket_thread_fn+0x50>
				close(common_socket_fd);
   123ec:	f8d9 0000 	ldr.w	r0, [r9]
	return z_impl_zsock_close(sock);
   123f0:	f00b fe57 	bl	1e0a2 <z_impl_zsock_close>
				bsdlib_shutdown_wait();
   123f4:	f7fe ff22 	bl	1123c <bsdlib_shutdown_wait>
   123f8:	e8d4 3fef 	ldaex	r3, [r4]
   123fc:	e8c4 5fe2 	stlex	r2, r5, [r4]
   12400:	2a00      	cmp	r2, #0
   12402:	d1f9      	bne.n	123f8 <socket_thread_fn+0x68>
				if (open_socket() != 0) {
   12404:	f7ff fee0 	bl	121c8 <open_socket>
   12408:	2800      	cmp	r0, #0
   1240a:	d0cb      	beq.n	123a4 <socket_thread_fn+0x14>
					LOG_ERR("Failed to open AT socket "
   1240c:	f00d fbbd 	bl	1fb8a <z_errno>
   12410:	01bc      	lsls	r4, r7, #6
   12412:	f044 0401 	orr.w	r4, r4, #1
   12416:	6801      	ldr	r1, [r0, #0]
   12418:	4622      	mov	r2, r4
   1241a:	4868      	ldr	r0, [pc, #416]	; (125bc <socket_thread_fn+0x22c>)
   1241c:	f00b fb57 	bl	1dace <log_1>
   12420:	e7c0      	b.n	123a4 <socket_thread_fn+0x14>
				LOG_ERR("AT socket recv failed with err %d",
   12422:	01bd      	lsls	r5, r7, #6
   12424:	f8db 1000 	ldr.w	r1, [fp]
   12428:	4865      	ldr	r0, [pc, #404]	; (125c0 <socket_thread_fn+0x230>)
   1242a:	f045 0201 	orr.w	r2, r5, #1
   1242e:	f00b fb4e 	bl	1dace <log_1>
			if ((close(common_socket_fd) == 0) &&
   12432:	f8d9 0000 	ldr.w	r0, [r9]
   12436:	f00b fe34 	bl	1e0a2 <z_impl_zsock_close>
   1243a:	bb28      	cbnz	r0, 12488 <socket_thread_fn+0xf8>
			    (open_socket() == 0)) {
   1243c:	f7ff fec4 	bl	121c8 <open_socket>
			if ((close(common_socket_fd) == 0) &&
   12440:	bb10      	cbnz	r0, 12488 <socket_thread_fn+0xf8>
				LOG_INF("AT socket recovered");
   12442:	4860      	ldr	r0, [pc, #384]	; (125c4 <socket_thread_fn+0x234>)
   12444:	f045 0103 	orr.w	r1, r5, #3
   12448:	f00b fb32 	bl	1dab0 <log_0>
				ret.state = AT_CMD_ERROR_READ;
   1244c:	2306      	movs	r3, #6
   1244e:	7123      	strb	r3, [r4, #4]
				ret.code  = -errno;
   12450:	f00d fb9b 	bl	1fb8a <z_errno>
   12454:	6803      	ldr	r3, [r0, #0]
   12456:	425b      	negs	r3, r3
			ret.code  = -EBADMSG;
   12458:	6023      	str	r3, [r4, #0]
		if (current_cmd.cmd != NULL &&
   1245a:	4b5b      	ldr	r3, [pc, #364]	; (125c8 <socket_thread_fn+0x238>)
   1245c:	681a      	ldr	r2, [r3, #0]
   1245e:	b16a      	cbz	r2, 1247c <socket_thread_fn+0xec>
   12460:	7c1b      	ldrb	r3, [r3, #16]
   12462:	079b      	lsls	r3, r3, #30
   12464:	d50a      	bpl.n	1247c <socket_thread_fn+0xec>
		    current_cmd.flags & AT_CMD_SYNC &&
   12466:	7923      	ldrb	r3, [r4, #4]
   12468:	2b07      	cmp	r3, #7
   1246a:	d09b      	beq.n	123a4 <socket_thread_fn+0x14>
	return z_impl_k_msgq_put(msgq, data, timeout);
   1246c:	f04f 32ff 	mov.w	r2, #4294967295
   12470:	f04f 33ff 	mov.w	r3, #4294967295
   12474:	494f      	ldr	r1, [pc, #316]	; (125b4 <socket_thread_fn+0x224>)
   12476:	4855      	ldr	r0, [pc, #340]	; (125cc <socket_thread_fn+0x23c>)
   12478:	f009 fdf4 	bl	1c064 <z_impl_k_msgq_put>
		if (ret.state != AT_CMD_NOTIFICATION) {
   1247c:	7923      	ldrb	r3, [r4, #4]
   1247e:	2b07      	cmp	r3, #7
   12480:	d090      	beq.n	123a4 <socket_thread_fn+0x14>
			complete_cmd();
   12482:	f7ff fef5 	bl	12270 <complete_cmd>
   12486:	e78d      	b.n	123a4 <socket_thread_fn+0x14>
			LOG_ERR("Unrecoverable reception error (err: %d), "
   12488:	f00d fb7f 	bl	1fb8a <z_errno>
   1248c:	f045 0501 	orr.w	r5, r5, #1
   12490:	6801      	ldr	r1, [r0, #0]
   12492:	462a      	mov	r2, r5
   12494:	484e      	ldr	r0, [pc, #312]	; (125d0 <socket_thread_fn+0x240>)
   12496:	f00b fb1a 	bl	1dace <log_1>
			close(common_socket_fd);
   1249a:	f8da 0000 	ldr.w	r0, [sl]
}
   1249e:	b003      	add	sp, #12
   124a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   124a4:	f00b bdfd 	b.w	1e0a2 <z_impl_zsock_close>
		} else if (bytes_read == 0) {
   124a8:	d10a      	bne.n	124c0 <socket_thread_fn+0x130>
			LOG_ERR("AT message empty");
   124aa:	01b9      	lsls	r1, r7, #6
   124ac:	4849      	ldr	r0, [pc, #292]	; (125d4 <socket_thread_fn+0x244>)
   124ae:	f041 0101 	orr.w	r1, r1, #1
   124b2:	f00b fafd 	bl	1dab0 <log_0>
			ret.state = AT_CMD_ERROR_READ;
   124b6:	2306      	movs	r3, #6
   124b8:	7123      	strb	r3, [r4, #4]
			ret.code  = -EBADMSG;
   124ba:	f06f 034c 	mvn.w	r3, #76	; 0x4c
   124be:	e7cb      	b.n	12458 <socket_thread_fn+0xc8>
		} else if (buf[bytes_read - 1] != '\0') {
   124c0:	1833      	adds	r3, r6, r0
   124c2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   124c6:	b153      	cbz	r3, 124de <socket_thread_fn+0x14e>
			LOG_ERR("AT message too large for reception buffer or "
   124c8:	01b9      	lsls	r1, r7, #6
   124ca:	4843      	ldr	r0, [pc, #268]	; (125d8 <socket_thread_fn+0x248>)
   124cc:	f041 0101 	orr.w	r1, r1, #1
   124d0:	f00b faee 	bl	1dab0 <log_0>
			ret.state = AT_CMD_ERROR_READ;
   124d4:	2306      	movs	r3, #6
   124d6:	7123      	strb	r3, [r4, #4]
			ret.code  = -ENOBUFS;
   124d8:	f06f 0336 	mvn.w	r3, #54	; 0x36
   124dc:	e7bc      	b.n	12458 <socket_thread_fn+0xc8>
	ret->state = AT_CMD_NOTIFICATION;
   124de:	2307      	movs	r3, #7
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_OK_STR);
   124e0:	1f45      	subs	r5, r0, #5
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   124e2:	483e      	ldr	r0, [pc, #248]	; (125dc <socket_thread_fn+0x24c>)
	ret->state = AT_CMD_NOTIFICATION;
   124e4:	7123      	strb	r3, [r4, #4]
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   124e6:	f00c f882 	bl	1e5ee <strlen>
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_OK_STR);
   124ea:	4435      	add	r5, r6
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   124ec:	4602      	mov	r2, r0
   124ee:	493b      	ldr	r1, [pc, #236]	; (125dc <socket_thread_fn+0x24c>)
   124f0:	4628      	mov	r0, r5
   124f2:	f00c f88f 	bl	1e614 <strncmp>
		if (match) {
   124f6:	b9c0      	cbnz	r0, 1252a <socket_thread_fn+0x19a>
			ret->state = AT_CMD_OK;
   124f8:	7120      	strb	r0, [r4, #4]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   124fa:	6020      	str	r0, [r4, #0]
		buf[new_len++] = '\0';
   124fc:	2300      	movs	r3, #0
		new_len = tmpstr - buf;
   124fe:	1baa      	subs	r2, r5, r6
		buf[new_len++] = '\0';
   12500:	3201      	adds	r2, #1
   12502:	702b      	strb	r3, [r5, #0]
		if (current_cmd.cmd != NULL &&
   12504:	4d30      	ldr	r5, [pc, #192]	; (125c8 <socket_thread_fn+0x238>)
   12506:	682b      	ldr	r3, [r5, #0]
   12508:	2b00      	cmp	r3, #0
   1250a:	d043      	beq.n	12594 <socket_thread_fn+0x204>
		    current_cmd.resp != NULL &&
   1250c:	6868      	ldr	r0, [r5, #4]
		if (current_cmd.cmd != NULL &&
   1250e:	2800      	cmp	r0, #0
   12510:	d040      	beq.n	12594 <socket_thread_fn+0x204>
		    current_cmd.resp != NULL &&
   12512:	7923      	ldrb	r3, [r4, #4]
   12514:	2b07      	cmp	r3, #7
   12516:	d12e      	bne.n	12576 <socket_thread_fn+0x1e6>
		    notification_handler != NULL) {
   12518:	4b31      	ldr	r3, [pc, #196]	; (125e0 <socket_thread_fn+0x250>)
   1251a:	681b      	ldr	r3, [r3, #0]
		if (ret.state == AT_CMD_NOTIFICATION &&
   1251c:	b913      	cbnz	r3, 12524 <socket_thread_fn+0x194>
		} else if (current_cmd.callback != NULL) {
   1251e:	68ab      	ldr	r3, [r5, #8]
   12520:	2b00      	cmp	r3, #0
   12522:	d09a      	beq.n	1245a <socket_thread_fn+0xca>
			current_cmd.callback(buf);
   12524:	4630      	mov	r0, r6
   12526:	4798      	blx	r3
   12528:	e797      	b.n	1245a <socket_thread_fn+0xca>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   1252a:	4630      	mov	r0, r6
   1252c:	492d      	ldr	r1, [pc, #180]	; (125e4 <socket_thread_fn+0x254>)
   1252e:	f00c f81d 	bl	1e56c <strstr>
		if (tmpstr) {
   12532:	4605      	mov	r5, r0
   12534:	b128      	cbz	r0, 12542 <socket_thread_fn+0x1b2>
			ret->state = AT_CMD_ERROR_CMS;
   12536:	2302      	movs	r3, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   12538:	482b      	ldr	r0, [pc, #172]	; (125e8 <socket_thread_fn+0x258>)
			ret->state = AT_CMD_ERROR_CMS;
   1253a:	7123      	strb	r3, [r4, #4]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   1253c:	f00b ff01 	bl	1e342 <atoi>
   12540:	e7db      	b.n	124fa <socket_thread_fn+0x16a>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   12542:	4630      	mov	r0, r6
   12544:	4929      	ldr	r1, [pc, #164]	; (125ec <socket_thread_fn+0x25c>)
   12546:	f00c f811 	bl	1e56c <strstr>
		if (tmpstr) {
   1254a:	4605      	mov	r5, r0
   1254c:	b108      	cbz	r0, 12552 <socket_thread_fn+0x1c2>
			ret->state = AT_CMD_ERROR_CME;
   1254e:	2303      	movs	r3, #3
   12550:	e7f2      	b.n	12538 <socket_thread_fn+0x1a8>
		match = !strncmp(tmpstr, AT_CMD_ERROR_STR, strlen(AT_CMD_ERROR_STR));
   12552:	4827      	ldr	r0, [pc, #156]	; (125f0 <socket_thread_fn+0x260>)
   12554:	f00c f84b 	bl	1e5ee <strlen>
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_ERROR_STR);
   12558:	f1a8 0508 	sub.w	r5, r8, #8
   1255c:	4435      	add	r5, r6
		match = !strncmp(tmpstr, AT_CMD_ERROR_STR, strlen(AT_CMD_ERROR_STR));
   1255e:	4602      	mov	r2, r0
   12560:	4923      	ldr	r1, [pc, #140]	; (125f0 <socket_thread_fn+0x260>)
   12562:	4628      	mov	r0, r5
   12564:	f00c f856 	bl	1e614 <strncmp>
		if (match) {
   12568:	b9c0      	cbnz	r0, 1259c <socket_thread_fn+0x20c>
			ret->state = AT_CMD_ERROR;
   1256a:	2301      	movs	r3, #1
   1256c:	7123      	strb	r3, [r4, #4]
			ret->code  = -ENOEXEC;
   1256e:	f06f 0307 	mvn.w	r3, #7
   12572:	6023      	str	r3, [r4, #0]
			break;
   12574:	e7c2      	b.n	124fc <socket_thread_fn+0x16c>
			if (current_cmd.resp_size < payload_len) {
   12576:	68eb      	ldr	r3, [r5, #12]
   12578:	429a      	cmp	r2, r3
   1257a:	d908      	bls.n	1258e <socket_thread_fn+0x1fe>
				LOG_ERR("Response buffer not large enough");
   1257c:	01b9      	lsls	r1, r7, #6
   1257e:	481d      	ldr	r0, [pc, #116]	; (125f4 <socket_thread_fn+0x264>)
   12580:	f041 0101 	orr.w	r1, r1, #1
   12584:	f00b fa94 	bl	1dab0 <log_0>
				ret.code  = -EMSGSIZE;
   12588:	f06f 0323 	mvn.w	r3, #35	; 0x23
   1258c:	e764      	b.n	12458 <socket_thread_fn+0xc8>
			memcpy(current_cmd.resp, buf, payload_len);
   1258e:	4631      	mov	r1, r6
   12590:	f00c f85f 	bl	1e652 <memcpy>
		if (ret.state == AT_CMD_NOTIFICATION &&
   12594:	7923      	ldrb	r3, [r4, #4]
   12596:	2b07      	cmp	r3, #7
   12598:	d1c1      	bne.n	1251e <socket_thread_fn+0x18e>
   1259a:	e7bd      	b.n	12518 <socket_thread_fn+0x188>
		new_len = strlen(buf) + 1;
   1259c:	4630      	mov	r0, r6
   1259e:	f00c f826 	bl	1e5ee <strlen>
   125a2:	1c42      	adds	r2, r0, #1
   125a4:	e7ae      	b.n	12504 <socket_thread_fn+0x174>
   125a6:	bf00      	nop
   125a8:	00020a64 	.word	0x00020a64
   125ac:	00020a64 	.word	0x00020a64
   125b0:	20022886 	.word	0x20022886
   125b4:	20020a74 	.word	0x20020a74
   125b8:	20020a7c 	.word	0x20020a7c
   125bc:	00021e8b 	.word	0x00021e8b
   125c0:	00021ebf 	.word	0x00021ebf
   125c4:	00021ee1 	.word	0x00021ee1
   125c8:	20020a5c 	.word	0x20020a5c
   125cc:	200201c8 	.word	0x200201c8
   125d0:	00021ef5 	.word	0x00021ef5
   125d4:	00021f2c 	.word	0x00021f2c
   125d8:	00021f3d 	.word	0x00021f3d
   125dc:	00021f88 	.word	0x00021f88
   125e0:	20020a70 	.word	0x20020a70
   125e4:	00021f8d 	.word	0x00021f8d
   125e8:	20022891 	.word	0x20022891
   125ec:	00021f99 	.word	0x00021f99
   125f0:	00021fa5 	.word	0x00021fa5
   125f4:	00021fad 	.word	0x00021fad
   125f8:	20020a58 	.word	0x20020a58
   125fc:	20020a54 	.word	0x20020a54

00012600 <at_cmd_write>:
{
   12600:	b530      	push	{r4, r5, lr}
   12602:	461c      	mov	r4, r3
   12604:	b089      	sub	sp, #36	; 0x24
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12606:	4b32      	ldr	r3, [pc, #200]	; (126d0 <at_cmd_write+0xd0>)
   12608:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&shutdown_mode) == 1) {
   1260c:	2b01      	cmp	r3, #1
   1260e:	d05c      	beq.n	126ca <at_cmd_write+0xca>
	if (cmd == NULL) {
   12610:	b160      	cbz	r0, 1262c <at_cmd_write+0x2c>
   12612:	1e45      	subs	r5, r0, #1
	for (const char *c = cmd; *c != '\0'; c++) {
   12614:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   12618:	b9d3      	cbnz	r3, 12650 <at_cmd_write+0x50>
   1261a:	492e      	ldr	r1, [pc, #184]	; (126d4 <at_cmd_write+0xd4>)
   1261c:	4b2e      	ldr	r3, [pc, #184]	; (126d8 <at_cmd_write+0xd8>)
		LOG_ERR("Invalid command");
   1261e:	482f      	ldr	r0, [pc, #188]	; (126dc <at_cmd_write+0xdc>)
   12620:	1ac9      	subs	r1, r1, r3
   12622:	08c9      	lsrs	r1, r1, #3
   12624:	0189      	lsls	r1, r1, #6
   12626:	f041 0101 	orr.w	r1, r1, #1
   1262a:	e007      	b.n	1263c <at_cmd_write+0x3c>
   1262c:	4929      	ldr	r1, [pc, #164]	; (126d4 <at_cmd_write+0xd4>)
   1262e:	4b2a      	ldr	r3, [pc, #168]	; (126d8 <at_cmd_write+0xd8>)
		LOG_ERR("cmd is NULL");
   12630:	482b      	ldr	r0, [pc, #172]	; (126e0 <at_cmd_write+0xe0>)
   12632:	1ac9      	subs	r1, r1, r3
   12634:	08c9      	lsrs	r1, r1, #3
   12636:	0189      	lsls	r1, r1, #6
   12638:	f041 0101 	orr.w	r1, r1, #1
   1263c:	f00b fa38 	bl	1dab0 <log_0>
		if (state) {
   12640:	b91c      	cbnz	r4, 1264a <at_cmd_write+0x4a>
		return -EINVAL;
   12642:	f06f 0015 	mvn.w	r0, #21
}
   12646:	b009      	add	sp, #36	; 0x24
   12648:	bd30      	pop	{r4, r5, pc}
			*state = AT_CMD_ERROR_QUEUE;
   1264a:	2304      	movs	r3, #4
   1264c:	7023      	strb	r3, [r4, #0]
   1264e:	e7f8      	b.n	12642 <at_cmd_write+0x42>
		if (*c > ' ') {
   12650:	2b20      	cmp	r3, #32
   12652:	d9df      	bls.n	12614 <at_cmd_write+0x14>
	command.callback = NULL;
   12654:	2300      	movs	r3, #0
   12656:	9305      	str	r3, [sp, #20]
	command.flags = AT_CMD_SYNC;
   12658:	2302      	movs	r3, #2
	command.resp = buf;
   1265a:	e9cd 0103 	strd	r0, r1, [sp, #12]
	command.resp_size = buf_len;
   1265e:	9206      	str	r2, [sp, #24]
	command.flags = AT_CMD_SYNC;
   12660:	f88d 301c 	strb.w	r3, [sp, #28]
	return z_impl_k_mutex_lock(mutex, timeout);
   12664:	f04f 32ff 	mov.w	r2, #4294967295
   12668:	f04f 33ff 	mov.w	r3, #4294967295
   1266c:	481d      	ldr	r0, [pc, #116]	; (126e4 <at_cmd_write+0xe4>)
   1266e:	f009 fdab 	bl	1c1c8 <z_impl_k_mutex_lock>
	return z_impl_k_msgq_put(msgq, data, timeout);
   12672:	f04f 32ff 	mov.w	r2, #4294967295
   12676:	a903      	add	r1, sp, #12
   12678:	f04f 33ff 	mov.w	r3, #4294967295
   1267c:	481a      	ldr	r0, [pc, #104]	; (126e8 <at_cmd_write+0xe8>)
   1267e:	f009 fcf1 	bl	1c064 <z_impl_k_msgq_put>
   12682:	4601      	mov	r1, r0
	ret.code = k_msgq_put(&commands, &command, K_FOREVER);
   12684:	9001      	str	r0, [sp, #4]
	if (ret.code) {
   12686:	b170      	cbz	r0, 126a6 <at_cmd_write+0xa6>
   12688:	4a12      	ldr	r2, [pc, #72]	; (126d4 <at_cmd_write+0xd4>)
   1268a:	4b13      	ldr	r3, [pc, #76]	; (126d8 <at_cmd_write+0xd8>)
		LOG_ERR("Could not enqueue cmd, error %d", ret.code);
   1268c:	4817      	ldr	r0, [pc, #92]	; (126ec <at_cmd_write+0xec>)
   1268e:	1ad2      	subs	r2, r2, r3
   12690:	08d2      	lsrs	r2, r2, #3
   12692:	0192      	lsls	r2, r2, #6
   12694:	f042 0201 	orr.w	r2, r2, #1
   12698:	f00b fa19 	bl	1dace <log_1>
		if (state) {
   1269c:	b10c      	cbz	r4, 126a2 <at_cmd_write+0xa2>
			*state = AT_CMD_ERROR_QUEUE;
   1269e:	2304      	movs	r3, #4
		*state = ret.state;
   126a0:	7023      	strb	r3, [r4, #0]
	return ret.code;
   126a2:	9801      	ldr	r0, [sp, #4]
   126a4:	e7cf      	b.n	12646 <at_cmd_write+0x46>
	load_cmd_and_write();
   126a6:	f7ff fdf9 	bl	1229c <load_cmd_and_write>
	return z_impl_k_msgq_get(msgq, data, timeout);
   126aa:	f04f 32ff 	mov.w	r2, #4294967295
   126ae:	f04f 33ff 	mov.w	r3, #4294967295
   126b2:	a901      	add	r1, sp, #4
   126b4:	480e      	ldr	r0, [pc, #56]	; (126f0 <at_cmd_write+0xf0>)
   126b6:	f009 fd29 	bl	1c10c <z_impl_k_msgq_get>
	return z_impl_k_mutex_unlock(mutex);
   126ba:	480a      	ldr	r0, [pc, #40]	; (126e4 <at_cmd_write+0xe4>)
   126bc:	f009 fdfc 	bl	1c2b8 <z_impl_k_mutex_unlock>
	if (state) {
   126c0:	2c00      	cmp	r4, #0
   126c2:	d0ee      	beq.n	126a2 <at_cmd_write+0xa2>
		*state = ret.state;
   126c4:	f89d 3008 	ldrb.w	r3, [sp, #8]
   126c8:	e7ea      	b.n	126a0 <at_cmd_write+0xa0>
		return -EHOSTDOWN;
   126ca:	f06f 0042 	mvn.w	r0, #66	; 0x42
   126ce:	e7ba      	b.n	12646 <at_cmd_write+0x46>
   126d0:	20020a7c 	.word	0x20020a7c
   126d4:	00020a64 	.word	0x00020a64
   126d8:	00020a64 	.word	0x00020a64
   126dc:	00021fda 	.word	0x00021fda
   126e0:	00021fce 	.word	0x00021fce
   126e4:	20020178 	.word	0x20020178
   126e8:	200201a0 	.word	0x200201a0
   126ec:	00021fea 	.word	0x00021fea
   126f0:	200201c8 	.word	0x200201c8

000126f4 <at_cmd_set_notification_handler>:
{
   126f4:	b538      	push	{r3, r4, r5, lr}
	if (notification_handler != NULL && handler != notification_handler) {
   126f6:	4c09      	ldr	r4, [pc, #36]	; (1271c <at_cmd_set_notification_handler+0x28>)
{
   126f8:	4605      	mov	r5, r0
	if (notification_handler != NULL && handler != notification_handler) {
   126fa:	6821      	ldr	r1, [r4, #0]
   126fc:	b159      	cbz	r1, 12716 <at_cmd_set_notification_handler+0x22>
   126fe:	4281      	cmp	r1, r0
   12700:	d009      	beq.n	12716 <at_cmd_set_notification_handler+0x22>
   12702:	4a07      	ldr	r2, [pc, #28]	; (12720 <at_cmd_set_notification_handler+0x2c>)
   12704:	4b07      	ldr	r3, [pc, #28]	; (12724 <at_cmd_set_notification_handler+0x30>)
		LOG_WRN("Forgetting prior notification handler %p",
   12706:	4808      	ldr	r0, [pc, #32]	; (12728 <at_cmd_set_notification_handler+0x34>)
   12708:	1ad2      	subs	r2, r2, r3
   1270a:	08d2      	lsrs	r2, r2, #3
   1270c:	0192      	lsls	r2, r2, #6
   1270e:	f042 0202 	orr.w	r2, r2, #2
   12712:	f00b f9dc 	bl	1dace <log_1>
	notification_handler = handler;
   12716:	6025      	str	r5, [r4, #0]
}
   12718:	bd38      	pop	{r3, r4, r5, pc}
   1271a:	bf00      	nop
   1271c:	20020a70 	.word	0x20020a70
   12720:	00020a64 	.word	0x00020a64
   12724:	00020a64 	.word	0x00020a64
   12728:	0002200a 	.word	0x0002200a

0001272c <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1272c:	4b0b      	ldr	r3, [pc, #44]	; (1275c <find_node+0x30>)
{
   1272e:	b570      	push	{r4, r5, r6, lr}
   12730:	4604      	mov	r4, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   12732:	6818      	ldr	r0, [r3, #0]
   12734:	b150      	cbz	r0, 1274c <find_node+0x20>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12736:	2500      	movs	r5, #0
   12738:	4603      	mov	r3, r0
   1273a:	6800      	ldr	r0, [r0, #0]
		if (curr->ctx == ctx && curr->handler == handler) {
   1273c:	685e      	ldr	r6, [r3, #4]
   1273e:	428e      	cmp	r6, r1
   12740:	d105      	bne.n	1274e <find_node+0x22>
   12742:	689e      	ldr	r6, [r3, #8]
   12744:	4296      	cmp	r6, r2
   12746:	d102      	bne.n	1274e <find_node+0x22>
			*prev_out = prev;
			return curr;
   12748:	4618      	mov	r0, r3
			*prev_out = prev;
   1274a:	6025      	str	r5, [r4, #0]
		}
		prev = curr;
	}
	return NULL;
}
   1274c:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1274e:	2800      	cmp	r0, #0
   12750:	d0fc      	beq.n	1274c <find_node+0x20>
   12752:	461d      	mov	r5, r3
   12754:	4603      	mov	r3, r0
   12756:	6800      	ldr	r0, [r0, #0]
   12758:	e7f0      	b.n	1273c <find_node+0x10>
   1275a:	bf00      	nop
   1275c:	20020a80 	.word	0x20020a80

00012760 <module_init>:
{
	ARG_UNUSED(dev);

	static bool initialized;

	if (initialized) {
   12760:	4a0c      	ldr	r2, [pc, #48]	; (12794 <module_init+0x34>)
{
   12762:	b508      	push	{r3, lr}
	if (initialized) {
   12764:	7813      	ldrb	r3, [r2, #0]
   12766:	b15b      	cbz	r3, 12780 <module_init+0x20>
   12768:	490b      	ldr	r1, [pc, #44]	; (12798 <module_init+0x38>)
   1276a:	4b0c      	ldr	r3, [pc, #48]	; (1279c <module_init+0x3c>)
		LOG_WRN("Already initialized. Nothing to do");
   1276c:	480c      	ldr	r0, [pc, #48]	; (127a0 <module_init+0x40>)
   1276e:	1ac9      	subs	r1, r1, r3
   12770:	08c9      	lsrs	r1, r1, #3
   12772:	0189      	lsls	r1, r1, #6
   12774:	f041 0102 	orr.w	r1, r1, #2
   12778:	f00b f99a 	bl	1dab0 <log_0>

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
	return 0;
}
   1277c:	2000      	movs	r0, #0
   1277e:	bd08      	pop	{r3, pc}
	initialized = true;
   12780:	2101      	movs	r1, #1
   12782:	7011      	strb	r1, [r2, #0]
	list->head = NULL;
   12784:	4a07      	ldr	r2, [pc, #28]	; (127a4 <module_init+0x44>)
	at_cmd_set_notification_handler(notif_dispatch);
   12786:	4808      	ldr	r0, [pc, #32]	; (127a8 <module_init+0x48>)
	list->tail = NULL;
   12788:	e9c2 3300 	strd	r3, r3, [r2]
   1278c:	f7ff ffb2 	bl	126f4 <at_cmd_set_notification_handler>
	return 0;
   12790:	e7f4      	b.n	1277c <module_init+0x1c>
   12792:	bf00      	nop
   12794:	20023313 	.word	0x20023313
   12798:	00020a74 	.word	0x00020a74
   1279c:	00020a64 	.word	0x00020a64
   127a0:	0002203a 	.word	0x0002203a
   127a4:	20020a80 	.word	0x20020a80
   127a8:	000127b9 	.word	0x000127b9

000127ac <k_mutex_unlock.constprop.0>:
   127ac:	4801      	ldr	r0, [pc, #4]	; (127b4 <k_mutex_unlock.constprop.0+0x8>)
   127ae:	f009 bd83 	b.w	1c2b8 <z_impl_k_mutex_unlock>
   127b2:	bf00      	nop
   127b4:	20020164 	.word	0x20020164

000127b8 <notif_dispatch>:
{
   127b8:	b538      	push	{r3, r4, r5, lr}
   127ba:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   127bc:	f04f 33ff 	mov.w	r3, #4294967295
   127c0:	f04f 32ff 	mov.w	r2, #4294967295
   127c4:	4809      	ldr	r0, [pc, #36]	; (127ec <notif_dispatch+0x34>)
   127c6:	f009 fcff 	bl	1c1c8 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   127ca:	4b09      	ldr	r3, [pc, #36]	; (127f0 <notif_dispatch+0x38>)
   127cc:	681b      	ldr	r3, [r3, #0]
   127ce:	b91b      	cbnz	r3, 127d8 <notif_dispatch+0x20>
}
   127d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   127d4:	f7ff bfea 	b.w	127ac <k_mutex_unlock.constprop.0>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   127d8:	681c      	ldr	r4, [r3, #0]
		curr->handler(curr->ctx, response);
   127da:	4629      	mov	r1, r5
   127dc:	689a      	ldr	r2, [r3, #8]
   127de:	6858      	ldr	r0, [r3, #4]
   127e0:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   127e2:	2c00      	cmp	r4, #0
   127e4:	d0f4      	beq.n	127d0 <notif_dispatch+0x18>
   127e6:	4623      	mov	r3, r4
   127e8:	6824      	ldr	r4, [r4, #0]
   127ea:	e7f6      	b.n	127da <notif_dispatch+0x22>
   127ec:	20020164 	.word	0x20020164
   127f0:	20020a80 	.word	0x20020a80

000127f4 <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   127f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   127f6:	4606      	mov	r6, r0
	if (handler == NULL) {
   127f8:	460c      	mov	r4, r1
   127fa:	b979      	cbnz	r1, 1281c <at_notif_register_handler+0x28>
   127fc:	4a1e      	ldr	r2, [pc, #120]	; (12878 <at_notif_register_handler+0x84>)
   127fe:	4b1f      	ldr	r3, [pc, #124]	; (1287c <at_notif_register_handler+0x88>)
   12800:	1a9b      	subs	r3, r3, r2
   12802:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   12804:	019b      	lsls	r3, r3, #6
   12806:	460a      	mov	r2, r1
   12808:	f043 0301 	orr.w	r3, r3, #1
   1280c:	4601      	mov	r1, r0
   1280e:	481c      	ldr	r0, [pc, #112]	; (12880 <at_notif_register_handler+0x8c>)
   12810:	f00b f974 	bl	1dafc <log_2>
			(uint32_t)context, (uint32_t)handler);
		return -EINVAL;
   12814:	f06f 0015 	mvn.w	r0, #21
	}
	return append_notif_handler(context, handler);
}
   12818:	b002      	add	sp, #8
   1281a:	bd70      	pop	{r4, r5, r6, pc}
   1281c:	f04f 32ff 	mov.w	r2, #4294967295
   12820:	f04f 33ff 	mov.w	r3, #4294967295
   12824:	4817      	ldr	r0, [pc, #92]	; (12884 <at_notif_register_handler+0x90>)
   12826:	f009 fccf 	bl	1c1c8 <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   1282a:	4622      	mov	r2, r4
   1282c:	4631      	mov	r1, r6
   1282e:	a801      	add	r0, sp, #4
   12830:	f7ff ff7c 	bl	1272c <find_node>
   12834:	4605      	mov	r5, r0
   12836:	b118      	cbz	r0, 12840 <at_notif_register_handler+0x4c>
		k_mutex_unlock(&list_mtx);
   12838:	f7ff ffb8 	bl	127ac <k_mutex_unlock.constprop.0>
		return 0;
   1283c:	2000      	movs	r0, #0
   1283e:	e7eb      	b.n	12818 <at_notif_register_handler+0x24>
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   12840:	200c      	movs	r0, #12
   12842:	f00a fcf5 	bl	1d230 <k_malloc>
   12846:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   12848:	b920      	cbnz	r0, 12854 <at_notif_register_handler+0x60>
		k_mutex_unlock(&list_mtx);
   1284a:	f7ff ffaf 	bl	127ac <k_mutex_unlock.constprop.0>
		return -ENOBUFS;
   1284e:	f06f 0036 	mvn.w	r0, #54	; 0x36
   12852:	e7e1      	b.n	12818 <at_notif_register_handler+0x24>
	memset(to_ins, 0, sizeof(struct notif_handler));
   12854:	220c      	movs	r2, #12
   12856:	4629      	mov	r1, r5
   12858:	f00b ff26 	bl	1e6a8 <memset>
	to_ins->ctx     = ctx;
   1285c:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   1285e:	4a0a      	ldr	r2, [pc, #40]	; (12888 <at_notif_register_handler+0x94>)
	parent->next = child;
   12860:	601d      	str	r5, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   12862:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   12864:	e9c3 6401 	strd	r6, r4, [r3, #4]
   12868:	b911      	cbnz	r1, 12870 <at_notif_register_handler+0x7c>
	list->head = node;
   1286a:	e9c2 3300 	strd	r3, r3, [r2]
}
   1286e:	e7e3      	b.n	12838 <at_notif_register_handler+0x44>
	parent->next = child;
   12870:	600b      	str	r3, [r1, #0]
	list->tail = node;
   12872:	6053      	str	r3, [r2, #4]
}
   12874:	e7e0      	b.n	12838 <at_notif_register_handler+0x44>
   12876:	bf00      	nop
   12878:	00020a64 	.word	0x00020a64
   1287c:	00020a74 	.word	0x00020a74
   12880:	0002205d 	.word	0x0002205d
   12884:	20020164 	.word	0x20020164
   12888:	20020a80 	.word	0x20020a80

0001288c <write_uart_string>:
static struct k_work cmd_send_work;



static inline void write_uart_string(const char *str)
{
   1288c:	b538      	push	{r3, r4, r5, lr}
	/* Send characters until, but not including, null */
	for (size_t i = 0; str[i]; i++) {
		uart_poll_out(uart_dev, str[i]);
   1288e:	4d05      	ldr	r5, [pc, #20]	; (128a4 <write_uart_string+0x18>)
   12890:	1e44      	subs	r4, r0, #1
	for (size_t i = 0; str[i]; i++) {
   12892:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   12896:	b901      	cbnz	r1, 1289a <write_uart_string+0xe>
	}
}
   12898:	bd38      	pop	{r3, r4, r5, pc}
		uart_poll_out(uart_dev, str[i]);
   1289a:	6828      	ldr	r0, [r5, #0]
   1289c:	6883      	ldr	r3, [r0, #8]
   1289e:	685b      	ldr	r3, [r3, #4]
   128a0:	4798      	blx	r3
	for (size_t i = 0; str[i]; i++) {
   128a2:	e7f6      	b.n	12892 <write_uart_string+0x6>
   128a4:	20020a98 	.word	0x20020a98

000128a8 <cmd_send>:
	/* Forward the data over UART */
	write_uart_string(response);
}

static void cmd_send(struct k_work *work)
{
   128a8:	b500      	push	{lr}
	enum at_cmd_state state;
	int               err;

	ARG_UNUSED(work);

	err = at_cmd_write(at_buf, at_buf,
   128aa:	4920      	ldr	r1, [pc, #128]	; (1292c <cmd_send+0x84>)
{
   128ac:	b089      	sub	sp, #36	; 0x24
	err = at_cmd_write(at_buf, at_buf,
   128ae:	4608      	mov	r0, r1
   128b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   128b4:	f10d 0303 	add.w	r3, sp, #3
   128b8:	f7ff fea2 	bl	12600 <at_cmd_write>
			   sizeof(at_buf), &state);
	if (err < 0) {
   128bc:	1e01      	subs	r1, r0, #0
   128be:	da0e      	bge.n	128de <cmd_send+0x36>
   128c0:	4b1b      	ldr	r3, [pc, #108]	; (12930 <cmd_send+0x88>)
   128c2:	4a1c      	ldr	r2, [pc, #112]	; (12934 <cmd_send+0x8c>)
		LOG_ERR("Error while processing AT command: %d", err);
   128c4:	481c      	ldr	r0, [pc, #112]	; (12938 <cmd_send+0x90>)
   128c6:	1ad2      	subs	r2, r2, r3
   128c8:	08d2      	lsrs	r2, r2, #3
   128ca:	0192      	lsls	r2, r2, #6
   128cc:	f042 0201 	orr.w	r2, r2, #1
   128d0:	f00b f8fd 	bl	1dace <log_1>
		state = AT_CMD_ERROR;
   128d4:	2301      	movs	r3, #1
   128d6:	f88d 3003 	strb.w	r3, [sp, #3]
	case AT_CMD_OK:
		write_uart_string(at_buf);
		write_uart_string(OK_STR);
		break;
	case AT_CMD_ERROR:
		write_uart_string(ERROR_STR);
   128da:	4818      	ldr	r0, [pc, #96]	; (1293c <cmd_send+0x94>)
   128dc:	e012      	b.n	12904 <cmd_send+0x5c>
	switch (state) {
   128de:	f89d 3003 	ldrb.w	r3, [sp, #3]
   128e2:	2b03      	cmp	r3, #3
   128e4:	d810      	bhi.n	12908 <cmd_send+0x60>
   128e6:	a201      	add	r2, pc, #4	; (adr r2, 128ec <cmd_send+0x44>)
   128e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   128ec:	000128fd 	.word	0x000128fd
   128f0:	000128db 	.word	0x000128db
   128f4:	00012917 	.word	0x00012917
   128f8:	00012925 	.word	0x00012925
		write_uart_string(at_buf);
   128fc:	480b      	ldr	r0, [pc, #44]	; (1292c <cmd_send+0x84>)
   128fe:	f7ff ffc5 	bl	1288c <write_uart_string>
		write_uart_string(OK_STR);
   12902:	480f      	ldr	r0, [pc, #60]	; (12940 <cmd_send+0x98>)
		sprintf(str, "+CMS ERROR: %d\r\n", err);
		write_uart_string(str);
		break;
	case AT_CMD_ERROR_CME:
		sprintf(str, "+CME ERROR: %d\r\n", err);
		write_uart_string(str);
   12904:	f7ff ffc2 	bl	1288c <write_uart_string>
		break;
	default:
		break;
	}

	uart_irq_rx_enable(uart_dev);
   12908:	4b0e      	ldr	r3, [pc, #56]	; (12944 <cmd_send+0x9c>)
   1290a:	6818      	ldr	r0, [r3, #0]
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
   1290c:	f00d f93f 	bl	1fb8e <z_impl_uart_irq_rx_enable>
}
   12910:	b009      	add	sp, #36	; 0x24
   12912:	f85d fb04 	ldr.w	pc, [sp], #4
		sprintf(str, "+CMS ERROR: %d\r\n", err);
   12916:	460a      	mov	r2, r1
   12918:	490b      	ldr	r1, [pc, #44]	; (12948 <cmd_send+0xa0>)
		sprintf(str, "+CME ERROR: %d\r\n", err);
   1291a:	a801      	add	r0, sp, #4
   1291c:	f7fd fed4 	bl	106c8 <sprintf>
		write_uart_string(str);
   12920:	a801      	add	r0, sp, #4
   12922:	e7ef      	b.n	12904 <cmd_send+0x5c>
		sprintf(str, "+CME ERROR: %d\r\n", err);
   12924:	460a      	mov	r2, r1
   12926:	4909      	ldr	r1, [pc, #36]	; (1294c <cmd_send+0xa4>)
   12928:	e7f7      	b.n	1291a <cmd_send+0x72>
   1292a:	bf00      	nop
   1292c:	20023314 	.word	0x20023314
   12930:	00020a64 	.word	0x00020a64
   12934:	00020a6c 	.word	0x00020a6c
   12938:	00022097 	.word	0x00022097
   1293c:	00021fa5 	.word	0x00021fa5
   12940:	00021f88 	.word	0x00021f88
   12944:	20020a98 	.word	0x20020a98
   12948:	000220bd 	.word	0x000220bd
   1294c:	000220ce 	.word	0x000220ce

00012950 <isr>:
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
	}
}

static void isr(const struct device *dev, void *user_data)
{
   12950:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   12954:	4604      	mov	r4, r0
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update) {
   12956:	6883      	ldr	r3, [r0, #8]
   12958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1295a:	b103      	cbz	r3, 1295e <isr+0xe>
		return api->irq_update(dev);
   1295c:	4798      	blx	r3
	if (api->irq_rx_ready) {
   1295e:	68a3      	ldr	r3, [r4, #8]
   12960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   12962:	b1bb      	cbz	r3, 12994 <isr+0x44>
		return api->irq_rx_ready(dev);
   12964:	4620      	mov	r0, r4
   12966:	4798      	blx	r3

	uint8_t character;

	uart_irq_update(dev);

	if (!uart_irq_rx_ready(dev)) {
   12968:	b1a0      	cbz	r0, 12994 <isr+0x44>
   1296a:	f8df 8140 	ldr.w	r8, [pc, #320]	; 12aac <isr+0x15c>
   1296e:	4e44      	ldr	r6, [pc, #272]	; (12a80 <isr+0x130>)
   12970:	4647      	mov	r7, r8
   12972:	4b44      	ldr	r3, [pc, #272]	; (12a84 <isr+0x134>)
		if (at_cmd_len > 0) {
   12974:	4d44      	ldr	r5, [pc, #272]	; (12a88 <isr+0x138>)
   12976:	1af6      	subs	r6, r6, r3
   12978:	08f6      	lsrs	r6, r6, #3
   1297a:	e8d8 3faf 	lda	r3, [r8]

	/*
	 * Check that we are not sending data (buffer must be preserved then),
	 * and that a new character is available before handling each character
	 */
	while ((!k_work_pending(&cmd_send_work)) &&
   1297e:	07db      	lsls	r3, r3, #31
   12980:	d408      	bmi.n	12994 <isr+0x44>
	if (api->fifo_read) {
   12982:	68a3      	ldr	r3, [r4, #8]
   12984:	699b      	ldr	r3, [r3, #24]
   12986:	b12b      	cbz	r3, 12994 <isr+0x44>
		return api->fifo_read(dev, rx_data, size);
   12988:	2201      	movs	r2, #1
   1298a:	4620      	mov	r0, r4
   1298c:	f10d 0107 	add.w	r1, sp, #7
   12990:	4798      	blx	r3
   12992:	b910      	cbnz	r0, 1299a <isr+0x4a>
	       (uart_fifo_read(dev, &character, 1))) {
		uart_rx_handler(character);
	}
}
   12994:	b002      	add	sp, #8
   12996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		uart_rx_handler(character);
   1299a:	f89d 1007 	ldrb.w	r1, [sp, #7]
	switch (character) {
   1299e:	2908      	cmp	r1, #8
   129a0:	d001      	beq.n	129a6 <isr+0x56>
   129a2:	297f      	cmp	r1, #127	; 0x7f
   129a4:	d105      	bne.n	129b2 <isr+0x62>
		if (at_cmd_len > 0) {
   129a6:	682b      	ldr	r3, [r5, #0]
   129a8:	2b00      	cmp	r3, #0
   129aa:	d0e6      	beq.n	1297a <isr+0x2a>
			at_cmd_len--;
   129ac:	3b01      	subs	r3, #1
   129ae:	602b      	str	r3, [r5, #0]
   129b0:	e7e3      	b.n	1297a <isr+0x2a>
	if (!inside_quotes) {
   129b2:	4836      	ldr	r0, [pc, #216]	; (12a8c <isr+0x13c>)
   129b4:	7803      	ldrb	r3, [r0, #0]
   129b6:	b993      	cbnz	r3, 129de <isr+0x8e>
		switch (character) {
   129b8:	290a      	cmp	r1, #10
   129ba:	d01e      	beq.n	129fa <isr+0xaa>
   129bc:	290d      	cmp	r1, #13
   129be:	d00a      	beq.n	129d6 <isr+0x86>
   129c0:	b969      	cbnz	r1, 129de <isr+0x8e>
			if (term_mode == MODE_NULL_TERM) {
   129c2:	4b33      	ldr	r3, [pc, #204]	; (12a90 <isr+0x140>)
   129c4:	781b      	ldrb	r3, [r3, #0]
   129c6:	b3a3      	cbz	r3, 12a32 <isr+0xe2>
			LOG_WRN("Ignored null; would terminate string early.");
   129c8:	01b1      	lsls	r1, r6, #6
   129ca:	4832      	ldr	r0, [pc, #200]	; (12a94 <isr+0x144>)
   129cc:	f041 0102 	orr.w	r1, r1, #2
   129d0:	f00b f86e 	bl	1dab0 <log_0>
			return;
   129d4:	e7d1      	b.n	1297a <isr+0x2a>
			if (term_mode == MODE_CR) {
   129d6:	4a2e      	ldr	r2, [pc, #184]	; (12a90 <isr+0x140>)
   129d8:	7812      	ldrb	r2, [r2, #0]
   129da:	2a01      	cmp	r2, #1
			    at_cmd_len > 0 &&
   129dc:	d029      	beq.n	12a32 <isr+0xe2>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   129de:	f8d5 c000 	ldr.w	ip, [r5]
   129e2:	f10c 0201 	add.w	r2, ip, #1
   129e6:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
   129ea:	d317      	bcc.n	12a1c <isr+0xcc>
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   129ec:	01b2      	lsls	r2, r6, #6
   129ee:	482a      	ldr	r0, [pc, #168]	; (12a98 <isr+0x148>)
   129f0:	f042 0201 	orr.w	r2, r2, #1
   129f4:	f00b f86b 	bl	1dace <log_1>
		return;
   129f8:	e7bf      	b.n	1297a <isr+0x2a>
			if (term_mode == MODE_LF) {
   129fa:	4a25      	ldr	r2, [pc, #148]	; (12a90 <isr+0x140>)
   129fc:	7812      	ldrb	r2, [r2, #0]
   129fe:	2a02      	cmp	r2, #2
   12a00:	d017      	beq.n	12a32 <isr+0xe2>
			if (term_mode == MODE_CR_LF &&
   12a02:	2a03      	cmp	r2, #3
   12a04:	d1eb      	bne.n	129de <isr+0x8e>
   12a06:	f8d5 c000 	ldr.w	ip, [r5]
   12a0a:	f1bc 0f00 	cmp.w	ip, #0
   12a0e:	d0e6      	beq.n	129de <isr+0x8e>
			    at_buf[at_cmd_len - 1] == '\r') {
   12a10:	4a22      	ldr	r2, [pc, #136]	; (12a9c <isr+0x14c>)
   12a12:	4462      	add	r2, ip
			    at_cmd_len > 0 &&
   12a14:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   12a18:	2a0d      	cmp	r2, #13
   12a1a:	e7df      	b.n	129dc <isr+0x8c>
	at_buf[at_cmd_len] = character;
   12a1c:	f8df e07c 	ldr.w	lr, [pc, #124]	; 12a9c <isr+0x14c>
	if (character == '"') {
   12a20:	2922      	cmp	r1, #34	; 0x22
	at_buf[at_cmd_len] = character;
   12a22:	f80e 100c 	strb.w	r1, [lr, ip]
	at_cmd_len++;
   12a26:	602a      	str	r2, [r5, #0]
	if (character == '"') {
   12a28:	d1a7      	bne.n	1297a <isr+0x2a>
	if (!inside_quotes) {
   12a2a:	f083 0301 	eor.w	r3, r3, #1
		inside_quotes = !inside_quotes;
   12a2e:	7003      	strb	r3, [r0, #0]
   12a30:	e7a3      	b.n	1297a <isr+0x2a>
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   12a32:	2200      	movs	r2, #0
   12a34:	6829      	ldr	r1, [r5, #0]
   12a36:	4b19      	ldr	r3, [pc, #100]	; (12a9c <isr+0x14c>)
	inside_quotes = false;
   12a38:	7002      	strb	r2, [r0, #0]
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   12a3a:	545a      	strb	r2, [r3, r1]
	at_cmd_len = 0;
   12a3c:	4619      	mov	r1, r3
   12a3e:	602a      	str	r2, [r5, #0]
		if (*c > ' ') {
   12a40:	f813 2b01 	ldrb.w	r2, [r3], #1
   12a44:	2a20      	cmp	r2, #32
   12a46:	d802      	bhi.n	12a4e <isr+0xfe>
		} else if (*c == '\0') {
   12a48:	2a00      	cmp	r2, #0
   12a4a:	d1f9      	bne.n	12a40 <isr+0xf0>
   12a4c:	e795      	b.n	1297a <isr+0x2a>
	if (at_buf[0]) {
   12a4e:	780b      	ldrb	r3, [r1, #0]
   12a50:	2b00      	cmp	r3, #0
   12a52:	d092      	beq.n	1297a <isr+0x2a>
		uart_irq_rx_disable(uart_dev); /* Stop UART to protect at_buf */
   12a54:	4b12      	ldr	r3, [pc, #72]	; (12aa0 <isr+0x150>)
   12a56:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable) {
   12a58:	6883      	ldr	r3, [r0, #8]
   12a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   12a5c:	b103      	cbz	r3, 12a60 <isr+0x110>
		api->irq_rx_disable(dev);
   12a5e:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12a60:	e8d7 3fef 	ldaex	r3, [r7]
   12a64:	f043 0201 	orr.w	r2, r3, #1
   12a68:	e8c7 2fe1 	stlex	r1, r2, [r7]
   12a6c:	2900      	cmp	r1, #0
   12a6e:	d1f7      	bne.n	12a60 <isr+0x110>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   12a70:	07da      	lsls	r2, r3, #31
   12a72:	d482      	bmi.n	1297a <isr+0x2a>
		k_queue_append(&work_q->queue, work);
   12a74:	490b      	ldr	r1, [pc, #44]	; (12aa4 <isr+0x154>)
   12a76:	480c      	ldr	r0, [pc, #48]	; (12aa8 <isr+0x158>)
   12a78:	f00d fb41 	bl	200fe <k_queue_append>
   12a7c:	e77d      	b.n	1297a <isr+0x2a>
   12a7e:	bf00      	nop
   12a80:	00020a6c 	.word	0x00020a6c
   12a84:	00020a64 	.word	0x00020a64
   12a88:	20020a88 	.word	0x20020a88
   12a8c:	20024314 	.word	0x20024314
   12a90:	20024315 	.word	0x20024315
   12a94:	000220df 	.word	0x000220df
   12a98:	0002210b 	.word	0x0002210b
   12a9c:	20023314 	.word	0x20023314
   12aa0:	20020a98 	.word	0x20020a98
   12aa4:	20020a8c 	.word	0x20020a8c
   12aa8:	20020450 	.word	0x20020450
   12aac:	20020a94 	.word	0x20020a94

00012ab0 <at_host_init>:
	uart_irq_callback_set(uart_dev, isr);
	return err;
}

static int at_host_init(const struct device *arg)
{
   12ab0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	ARG_UNUSED(arg);

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
   12ab4:	2201      	movs	r2, #1
   12ab6:	4b49      	ldr	r3, [pc, #292]	; (12bdc <at_host_init+0x12c>)
	default:
		LOG_ERR("Unknown UART instance %d", uart_id);
		return -EINVAL;
	}

	err = at_notif_register_handler(NULL, response_handler);
   12ab8:	2000      	movs	r0, #0
   12aba:	4949      	ldr	r1, [pc, #292]	; (12be0 <at_host_init+0x130>)
		term_mode = mode;
   12abc:	701a      	strb	r2, [r3, #0]
	err = at_notif_register_handler(NULL, response_handler);
   12abe:	f7ff fe99 	bl	127f4 <at_notif_register_handler>
	if (err != 0) {
   12ac2:	4c48      	ldr	r4, [pc, #288]	; (12be4 <at_host_init+0x134>)
   12ac4:	4a48      	ldr	r2, [pc, #288]	; (12be8 <at_host_init+0x138>)
   12ac6:	4606      	mov	r6, r0
   12ac8:	1aa4      	subs	r4, r4, r2
   12aca:	08e4      	lsrs	r4, r4, #3
   12acc:	b150      	cbz	r0, 12ae4 <at_host_init+0x34>
		LOG_ERR("Can't register handler err=%d", err);
   12ace:	01a2      	lsls	r2, r4, #6
   12ad0:	4601      	mov	r1, r0
   12ad2:	f042 0201 	orr.w	r2, r2, #1
   12ad6:	4845      	ldr	r0, [pc, #276]	; (12bec <at_host_init+0x13c>)
   12ad8:	f00a fff9 	bl	1dace <log_1>
		       K_THREAD_STACK_SIZEOF(at_host_stack_area),
		       CONFIG_AT_HOST_THREAD_PRIO);
	uart_irq_rx_enable(uart_dev);

	return err;
}
   12adc:	4630      	mov	r0, r6
   12ade:	b003      	add	sp, #12
   12ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ae4:	4842      	ldr	r0, [pc, #264]	; (12bf0 <at_host_init+0x140>)
   12ae6:	f009 f8b7 	bl	1bc58 <z_impl_device_get_binding>
	uart_dev = device_get_binding(uart_dev_name);
   12aea:	4d42      	ldr	r5, [pc, #264]	; (12bf4 <at_host_init+0x144>)
   12aec:	6028      	str	r0, [r5, #0]
	if (uart_dev == NULL) {
   12aee:	b988      	cbnz	r0, 12b14 <at_host_init+0x64>
		LOG_ERR("Cannot bind %s\n", uart_dev_name);
   12af0:	01a2      	lsls	r2, r4, #6
   12af2:	493f      	ldr	r1, [pc, #252]	; (12bf0 <at_host_init+0x140>)
   12af4:	4840      	ldr	r0, [pc, #256]	; (12bf8 <at_host_init+0x148>)
   12af6:	f042 0201 	orr.w	r2, r2, #1
   12afa:	f00a ffe8 	bl	1dace <log_1>
		return -EINVAL;
   12afe:	f06f 0115 	mvn.w	r1, #21
		LOG_ERR("UART could not be initialized: %d", err);
   12b02:	01a2      	lsls	r2, r4, #6
   12b04:	483d      	ldr	r0, [pc, #244]	; (12bfc <at_host_init+0x14c>)
   12b06:	f042 0201 	orr.w	r2, r2, #1
   12b0a:	f00a ffe0 	bl	1dace <log_1>
		return -EFAULT;
   12b0e:	f06f 060d 	mvn.w	r6, #13
   12b12:	e7e3      	b.n	12adc <at_host_init+0x2c>
	return z_impl_k_uptime_ticks();
   12b14:	f00d fcb2 	bl	2047c <z_impl_k_uptime_ticks>
   12b18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   12b1c:	460a      	mov	r2, r1
   12b1e:	fba0 0103 	umull	r0, r1, r0, r3
   12b22:	fb03 1102 	mla	r1, r3, r2, r1
   12b26:	ea4f 38d0 	mov.w	r8, r0, lsr #15
   12b2a:	ea4f 1984 	mov.w	r9, r4, lsl #6
			LOG_INF("UART check failed: %d. "
   12b2e:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 12c18 <at_host_init+0x168>
   12b32:	ea48 4841 	orr.w	r8, r8, r1, lsl #17
   12b36:	f049 0a03 	orr.w	sl, r9, #3
		err = uart_err_check(uart_dev);
   12b3a:	6828      	ldr	r0, [r5, #0]
	if (api->err_check != NULL) {
   12b3c:	6883      	ldr	r3, [r0, #8]
   12b3e:	689b      	ldr	r3, [r3, #8]
   12b40:	b393      	cbz	r3, 12ba8 <at_host_init+0xf8>
		return api->err_check(dev);
   12b42:	4798      	blx	r3
		if (err) {
   12b44:	4607      	mov	r7, r0
   12b46:	b378      	cbz	r0, 12ba8 <at_host_init+0xf8>
   12b48:	f00d fc98 	bl	2047c <z_impl_k_uptime_ticks>
   12b4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   12b50:	460a      	mov	r2, r1
   12b52:	fba0 0103 	umull	r0, r1, r0, r3
   12b56:	fb03 1102 	mla	r1, r3, r2, r1
   12b5a:	0bc3      	lsrs	r3, r0, #15
   12b5c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
			if (k_uptime_get_32() - start_time >
   12b60:	eba3 0308 	sub.w	r3, r3, r8
   12b64:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   12b68:	d908      	bls.n	12b7c <at_host_init+0xcc>
				LOG_ERR("UART check failed: %d. "
   12b6a:	4639      	mov	r1, r7
   12b6c:	4824      	ldr	r0, [pc, #144]	; (12c00 <at_host_init+0x150>)
   12b6e:	f049 0201 	orr.w	r2, r9, #1
   12b72:	f00a ffac 	bl	1dace <log_1>
				return -EIO;
   12b76:	f06f 0104 	mvn.w	r1, #4
   12b7a:	e7c2      	b.n	12b02 <at_host_init+0x52>
			LOG_INF("UART check failed: %d. "
   12b7c:	4652      	mov	r2, sl
   12b7e:	4639      	mov	r1, r7
   12b80:	4658      	mov	r0, fp
   12b82:	f00a ffa4 	bl	1dace <log_1>
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   12b86:	6828      	ldr	r0, [r5, #0]
	if (api->fifo_read) {
   12b88:	6883      	ldr	r3, [r0, #8]
   12b8a:	699b      	ldr	r3, [r3, #24]
   12b8c:	b92b      	cbnz	r3, 12b9a <at_host_init+0xea>
	return z_impl_k_sleep(timeout);
   12b8e:	2100      	movs	r1, #0
   12b90:	f44f 70a4 	mov.w	r0, #328	; 0x148
   12b94:	f009 ff3a 	bl	1ca0c <z_impl_k_sleep>
	} while (err);
   12b98:	e7cf      	b.n	12b3a <at_host_init+0x8a>
		return api->fifo_read(dev, rx_data, size);
   12b9a:	2201      	movs	r2, #1
   12b9c:	f10d 0107 	add.w	r1, sp, #7
   12ba0:	4798      	blx	r3
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   12ba2:	2800      	cmp	r0, #0
   12ba4:	d1ef      	bne.n	12b86 <at_host_init+0xd6>
   12ba6:	e7f2      	b.n	12b8e <at_host_init+0xde>
	uart_irq_callback_set(uart_dev, isr);
   12ba8:	6828      	ldr	r0, [r5, #0]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
   12baa:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   12bac:	b123      	cbz	r3, 12bb8 <at_host_init+0x108>
   12bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   12bb0:	b113      	cbz	r3, 12bb8 <at_host_init+0x108>
		api->irq_callback_set(dev, cb, user_data);
   12bb2:	2200      	movs	r2, #0
   12bb4:	4913      	ldr	r1, [pc, #76]	; (12c04 <at_host_init+0x154>)
   12bb6:	4798      	blx	r3
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   12bb8:	2200      	movs	r2, #0
   12bba:	4b13      	ldr	r3, [pc, #76]	; (12c08 <at_host_init+0x158>)
   12bbc:	4913      	ldr	r1, [pc, #76]	; (12c0c <at_host_init+0x15c>)
   12bbe:	601a      	str	r2, [r3, #0]
   12bc0:	e9c3 1201 	strd	r1, r2, [r3, #4]
	k_work_q_start(&at_host_work_q, at_host_stack_area,
   12bc4:	4812      	ldr	r0, [pc, #72]	; (12c10 <at_host_init+0x160>)
   12bc6:	230a      	movs	r3, #10
   12bc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   12bcc:	4911      	ldr	r1, [pc, #68]	; (12c14 <at_host_init+0x164>)
   12bce:	f00a f865 	bl	1cc9c <k_work_q_start>
	uart_irq_rx_enable(uart_dev);
   12bd2:	6828      	ldr	r0, [r5, #0]
   12bd4:	f00c ffdb 	bl	1fb8e <z_impl_uart_irq_rx_enable>
	return err;
   12bd8:	e780      	b.n	12adc <at_host_init+0x2c>
   12bda:	bf00      	nop
   12bdc:	20024315 	.word	0x20024315
   12be0:	0001fb99 	.word	0x0001fb99
   12be4:	00020a6c 	.word	0x00020a6c
   12be8:	00020a64 	.word	0x00020a64
   12bec:	0002212b 	.word	0x0002212b
   12bf0:	00021760 	.word	0x00021760
   12bf4:	20020a98 	.word	0x20020a98
   12bf8:	00022149 	.word	0x00022149
   12bfc:	000221c4 	.word	0x000221c4
   12c00:	00022159 	.word	0x00022159
   12c04:	00012951 	.word	0x00012951
   12c08:	20020a8c 	.word	0x20020a8c
   12c0c:	000128a9 	.word	0x000128a9
   12c10:	20020450 	.word	0x20020450
   12c14:	20024b90 	.word	0x20024b90
   12c18:	0002218f 	.word	0x0002218f

00012c1c <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   12c1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   12c20:	6805      	ldr	r5, [r0, #0]
{
   12c22:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   12c24:	9500      	str	r5, [sp, #0]
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   12c26:	782b      	ldrb	r3, [r5, #0]
{
   12c28:	4680      	mov	r8, r0
   12c2a:	460f      	mov	r7, r1
   12c2c:	4616      	mov	r6, r2
   12c2e:	2b00      	cmp	r3, #0
   12c30:	f000 80cc 	beq.w	12dcc <at_parse_process_element+0x1b0>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   12c34:	4b67      	ldr	r3, [pc, #412]	; (12dd4 <at_parse_process_element+0x1b8>)
   12c36:	781c      	ldrb	r4, [r3, #0]
   12c38:	2c06      	cmp	r4, #6
   12c3a:	d110      	bne.n	12c5e <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   12c3c:	1c6b      	adds	r3, r5, #1
   12c3e:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   12c40:	9a00      	ldr	r2, [sp, #0]
   12c42:	7810      	ldrb	r0, [r2, #0]
   12c44:	f00c ffc2 	bl	1fbcc <is_valid_notification_char>
   12c48:	b930      	cbnz	r0, 12c58 <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   12c4a:	1b53      	subs	r3, r2, r5

		while (isxdigit((int)*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   12c4c:	462a      	mov	r2, r5
   12c4e:	4639      	mov	r1, r7
   12c50:	4630      	mov	r0, r6
   12c52:	f00d f88a 	bl	1fd6a <at_params_string_put>
   12c56:	e01b      	b.n	12c90 <at_parse_process_element+0x74>
			tmpstr++;
   12c58:	3201      	adds	r2, #1
   12c5a:	9200      	str	r2, [sp, #0]
   12c5c:	e7f0      	b.n	12c40 <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   12c5e:	2c07      	cmp	r4, #7
   12c60:	d124      	bne.n	12cac <at_parse_process_element+0x90>
		skip_command_prefix(&tmpstr);
   12c62:	4668      	mov	r0, sp
   12c64:	f00c ffa4 	bl	1fbb0 <skip_command_prefix>
		while (is_valid_notification_char(*tmpstr)) {
   12c68:	9a00      	ldr	r2, [sp, #0]
   12c6a:	7810      	ldrb	r0, [r2, #0]
   12c6c:	f00c ffae 	bl	1fbcc <is_valid_notification_char>
   12c70:	b9a8      	cbnz	r0, 12c9e <at_parse_process_element+0x82>
		at_params_string_put(list, index, start_ptr,
   12c72:	1b53      	subs	r3, r2, r5
   12c74:	4639      	mov	r1, r7
   12c76:	462a      	mov	r2, r5
   12c78:	4630      	mov	r0, r6
   12c7a:	f00d f876 	bl	1fd6a <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   12c7e:	9b00      	ldr	r3, [sp, #0]
   12c80:	781a      	ldrb	r2, [r3, #0]
   12c82:	2a3d      	cmp	r2, #61	; 0x3d
   12c84:	d10e      	bne.n	12ca4 <at_parse_process_element+0x88>
   12c86:	785a      	ldrb	r2, [r3, #1]
   12c88:	2a3f      	cmp	r2, #63	; 0x3f
   12c8a:	d101      	bne.n	12c90 <at_parse_process_element+0x74>
			tmpstr += 2;
   12c8c:	3302      	adds	r3, #2
			tmpstr++;
   12c8e:	9300      	str	r3, [sp, #0]
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   12c90:	2000      	movs	r0, #0
	*str = tmpstr;
   12c92:	9b00      	ldr	r3, [sp, #0]
   12c94:	f8c8 3000 	str.w	r3, [r8]
}
   12c98:	b023      	add	sp, #140	; 0x8c
   12c9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			tmpstr++;
   12c9e:	3201      	adds	r2, #1
   12ca0:	9200      	str	r2, [sp, #0]
   12ca2:	e7e1      	b.n	12c68 <at_parse_process_element+0x4c>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   12ca4:	2a3f      	cmp	r2, #63	; 0x3f
   12ca6:	d1f3      	bne.n	12c90 <at_parse_process_element+0x74>
			tmpstr++;
   12ca8:	3301      	adds	r3, #1
   12caa:	e7f0      	b.n	12c8e <at_parse_process_element+0x72>
	} else if (state == OPTIONAL) {
   12cac:	2c08      	cmp	r4, #8
   12cae:	d103      	bne.n	12cb8 <at_parse_process_element+0x9c>
		at_params_empty_put(list, index);
   12cb0:	4610      	mov	r0, r2
   12cb2:	f00d f835 	bl	1fd20 <at_params_empty_put>
   12cb6:	e7eb      	b.n	12c90 <at_parse_process_element+0x74>
	} else if (state == STRING) {
   12cb8:	2c02      	cmp	r4, #2
   12cba:	d111      	bne.n	12ce0 <at_parse_process_element+0xc4>
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   12cbc:	9a00      	ldr	r2, [sp, #0]
   12cbe:	7811      	ldrb	r1, [r2, #0]
   12cc0:	4608      	mov	r0, r1
   12cc2:	f00c ff6c 	bl	1fb9e <is_lfcr>
   12cc6:	b918      	cbnz	r0, 12cd0 <at_parse_process_element+0xb4>
   12cc8:	b111      	cbz	r1, 12cd0 <at_parse_process_element+0xb4>
			tmpstr++;
   12cca:	3201      	adds	r2, #1
   12ccc:	9200      	str	r2, [sp, #0]
   12cce:	e7f5      	b.n	12cbc <at_parse_process_element+0xa0>
		at_params_string_put(list, index, start_ptr,
   12cd0:	1b53      	subs	r3, r2, r5
		at_params_string_put(list, index, start_ptr,
   12cd2:	462a      	mov	r2, r5
   12cd4:	4639      	mov	r1, r7
   12cd6:	4630      	mov	r0, r6
   12cd8:	f00d f847 	bl	1fd6a <at_params_string_put>
		tmpstr++;
   12cdc:	9b00      	ldr	r3, [sp, #0]
   12cde:	e7e3      	b.n	12ca8 <at_parse_process_element+0x8c>
	} else if (state == QUOTED_STRING) {
   12ce0:	2c03      	cmp	r4, #3
   12ce2:	d109      	bne.n	12cf8 <at_parse_process_element+0xdc>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   12ce4:	9b00      	ldr	r3, [sp, #0]
   12ce6:	781a      	ldrb	r2, [r3, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   12ce8:	2a22      	cmp	r2, #34	; 0x22
   12cea:	d003      	beq.n	12cf4 <at_parse_process_element+0xd8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   12cec:	b112      	cbz	r2, 12cf4 <at_parse_process_element+0xd8>
			tmpstr++;
   12cee:	3301      	adds	r3, #1
   12cf0:	9300      	str	r3, [sp, #0]
   12cf2:	e7f7      	b.n	12ce4 <at_parse_process_element+0xc8>
		at_params_string_put(list, index, start_ptr,
   12cf4:	1b5b      	subs	r3, r3, r5
   12cf6:	e7ec      	b.n	12cd2 <at_parse_process_element+0xb6>
	} else if (state == ARRAY) {
   12cf8:	2c01      	cmp	r4, #1
   12cfa:	d13c      	bne.n	12d76 <at_parse_process_element+0x15a>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   12cfc:	4628      	mov	r0, r5
   12cfe:	220a      	movs	r2, #10
   12d00:	a901      	add	r1, sp, #4
   12d02:	f00b fbba 	bl	1e47a <strtoul>
		tmpstr = next;
   12d06:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   12d08:	4d33      	ldr	r5, [pc, #204]	; (12dd8 <at_parse_process_element+0x1bc>)
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   12d0a:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   12d0c:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   12d0e:	9800      	ldr	r0, [sp, #0]
   12d10:	7803      	ldrb	r3, [r0, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   12d12:	2b29      	cmp	r3, #41	; 0x29
   12d14:	d028      	beq.n	12d68 <at_parse_process_element+0x14c>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   12d16:	b33b      	cbz	r3, 12d68 <at_parse_process_element+0x14c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   12d18:	3b2c      	subs	r3, #44	; 0x2c
   12d1a:	b2db      	uxtb	r3, r3
   12d1c:	3001      	adds	r0, #1
   12d1e:	2b11      	cmp	r3, #17
				tmparray[i++] =
   12d20:	9000      	str	r0, [sp, #0]
   12d22:	d803      	bhi.n	12d2c <at_parse_process_element+0x110>
   12d24:	fa25 f303 	lsr.w	r3, r5, r3
   12d28:	07db      	lsls	r3, r3, #31
   12d2a:	d408      	bmi.n	12d3e <at_parse_process_element+0x122>
				tmpstr++;
   12d2c:	46a1      	mov	r9, r4
   12d2e:	e004      	b.n	12d3a <at_parse_process_element+0x11e>
					tmpstr = next;
   12d30:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   12d32:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   12d36:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   12d38:	d015      	beq.n	12d66 <at_parse_process_element+0x14a>
				tmpstr++;
   12d3a:	464c      	mov	r4, r9
   12d3c:	e7e7      	b.n	12d0e <at_parse_process_element+0xf2>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   12d3e:	220a      	movs	r2, #10
   12d40:	a901      	add	r1, sp, #4
   12d42:	f00b fb9a 	bl	1e47a <strtoul>
				tmparray[i++] =
   12d46:	ab22      	add	r3, sp, #136	; 0x88
   12d48:	f104 0901 	add.w	r9, r4, #1
   12d4c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   12d50:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   12d54:	9800      	ldr	r0, [sp, #0]
   12d56:	f00b fc4a 	bl	1e5ee <strlen>
   12d5a:	4604      	mov	r4, r0
   12d5c:	9801      	ldr	r0, [sp, #4]
   12d5e:	f00b fc46 	bl	1e5ee <strlen>
   12d62:	4284      	cmp	r4, r0
   12d64:	d1e4      	bne.n	12d30 <at_parse_process_element+0x114>
   12d66:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));
   12d68:	4639      	mov	r1, r7
   12d6a:	4630      	mov	r0, r6
   12d6c:	00a3      	lsls	r3, r4, #2
   12d6e:	aa02      	add	r2, sp, #8
   12d70:	f00d f81e 	bl	1fdb0 <at_params_array_put>
   12d74:	e7b2      	b.n	12cdc <at_parse_process_element+0xc0>
	} else if (state == NUMBER) {
   12d76:	2c04      	cmp	r4, #4
   12d78:	d115      	bne.n	12da6 <at_parse_process_element+0x18a>
		int value = (uint32_t)strtoul(tmpstr, &next, 10);
   12d7a:	220a      	movs	r2, #10
   12d7c:	4628      	mov	r0, r5
   12d7e:	a902      	add	r1, sp, #8
   12d80:	f00b fb7b 	bl	1e47a <strtoul>
		tmpstr = next;
   12d84:	9b02      	ldr	r3, [sp, #8]
		if (value <= USHRT_MAX) {
   12d86:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
		int value = (uint32_t)strtoul(tmpstr, &next, 10);
   12d8a:	4602      	mov	r2, r0
		tmpstr = next;
   12d8c:	9300      	str	r3, [sp, #0]
		if (value <= USHRT_MAX) {
   12d8e:	d205      	bcs.n	12d9c <at_parse_process_element+0x180>
			at_params_short_put(list, index, (uint16_t)value);
   12d90:	b282      	uxth	r2, r0
   12d92:	4639      	mov	r1, r7
   12d94:	4630      	mov	r0, r6
   12d96:	f00c ffb0 	bl	1fcfa <at_params_short_put>
   12d9a:	e779      	b.n	12c90 <at_parse_process_element+0x74>
			at_params_int_put(list, index, value);
   12d9c:	4639      	mov	r1, r7
   12d9e:	4630      	mov	r0, r6
   12da0:	f00c ffd0 	bl	1fd44 <at_params_int_put>
   12da4:	e774      	b.n	12c90 <at_parse_process_element+0x74>
	} else if (state == SMS_PDU) {
   12da6:	2c05      	cmp	r4, #5
   12da8:	f47f af72 	bne.w	12c90 <at_parse_process_element+0x74>
		while (isxdigit((int)*tmpstr)) {
   12dac:	9b00      	ldr	r3, [sp, #0]
   12dae:	781a      	ldrb	r2, [r3, #0]

static inline int isxdigit(int a)
{
	unsigned int ua = (unsigned int)a;

	return (int)(((ua - (unsigned)'0') < 10U) ||
   12db0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   12db4:	2909      	cmp	r1, #9
   12db6:	d906      	bls.n	12dc6 <at_parse_process_element+0x1aa>
			((ua | 32U) - (unsigned)'a' < 6U));
   12db8:	f042 0220 	orr.w	r2, r2, #32
   12dbc:	3a61      	subs	r2, #97	; 0x61
	return (int)(((ua - (unsigned)'0') < 10U) ||
   12dbe:	2a05      	cmp	r2, #5
   12dc0:	d901      	bls.n	12dc6 <at_parse_process_element+0x1aa>
		at_params_string_put(list, index, start_ptr,
   12dc2:	1b5b      	subs	r3, r3, r5
   12dc4:	e742      	b.n	12c4c <at_parse_process_element+0x30>
			tmpstr++;
   12dc6:	3301      	adds	r3, #1
   12dc8:	9300      	str	r3, [sp, #0]
   12dca:	e7ef      	b.n	12dac <at_parse_process_element+0x190>
		return -1;
   12dcc:	f04f 30ff 	mov.w	r0, #4294967295
   12dd0:	e762      	b.n	12c98 <at_parse_process_element+0x7c>
   12dd2:	bf00      	nop
   12dd4:	20024316 	.word	0x20024316
   12dd8:	00024001 	.word	0x00024001

00012ddc <at_parse_detect_type>:
{
   12ddc:	b570      	push	{r4, r5, r6, lr}
	const char *tmpstr = *str;
   12dde:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   12de0:	2900      	cmp	r1, #0
{
   12de2:	4605      	mov	r5, r0
   12de4:	7822      	ldrb	r2, [r4, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   12de6:	d144      	bne.n	12e72 <at_parse_detect_type+0x96>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   12de8:	2a2b      	cmp	r2, #43	; 0x2b
   12dea:	4e2a      	ldr	r6, [pc, #168]	; (12e94 <at_parse_detect_type+0xb8>)
   12dec:	d001      	beq.n	12df2 <at_parse_detect_type+0x16>
   12dee:	2a25      	cmp	r2, #37	; 0x25
   12df0:	d104      	bne.n	12dfc <at_parse_detect_type+0x20>
	state = new_state;
   12df2:	2306      	movs	r3, #6
   12df4:	7033      	strb	r3, [r6, #0]
	return 0;
   12df6:	2000      	movs	r0, #0
	*str = tmpstr;
   12df8:	602c      	str	r4, [r5, #0]
}
   12dfa:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((index == 0) && is_command(tmpstr)) {
   12dfc:	4620      	mov	r0, r4
   12dfe:	f00c fef1 	bl	1fbe4 <is_command>
   12e02:	b3a0      	cbz	r0, 12e6e <at_parse_detect_type+0x92>
	state = new_state;
   12e04:	2307      	movs	r3, #7
   12e06:	e7f5      	b.n	12df4 <at_parse_detect_type+0x18>
 * @retval true  If character is number character
 * @retval false If character is something else
 */
static inline bool is_number(char chr)
{
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   12e08:	f647 71e5 	movw	r1, #32741	; 0x7fe5
   12e0c:	fa21 f303 	lsr.w	r3, r1, r3
   12e10:	07d9      	lsls	r1, r3, #31
   12e12:	d50a      	bpl.n	12e2a <at_parse_detect_type+0x4e>
   12e14:	2204      	movs	r2, #4
   12e16:	4b1f      	ldr	r3, [pc, #124]	; (12e94 <at_parse_detect_type+0xb8>)
   12e18:	701a      	strb	r2, [r3, #0]
}
   12e1a:	e7ec      	b.n	12df6 <at_parse_detect_type+0x1a>
	if (chr == '(') {
   12e1c:	2a28      	cmp	r2, #40	; 0x28
   12e1e:	d104      	bne.n	12e2a <at_parse_detect_type+0x4e>
	state = new_state;
   12e20:	2201      	movs	r2, #1
   12e22:	4b1c      	ldr	r3, [pc, #112]	; (12e94 <at_parse_detect_type+0xb8>)
		tmpstr++;
   12e24:	4414      	add	r4, r2
	state = new_state;
   12e26:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   12e28:	e7e5      	b.n	12df6 <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   12e2a:	4610      	mov	r0, r2
   12e2c:	f00c feb7 	bl	1fb9e <is_lfcr>
   12e30:	b170      	cbz	r0, 12e50 <at_parse_detect_type+0x74>
   12e32:	4918      	ldr	r1, [pc, #96]	; (12e94 <at_parse_detect_type+0xb8>)
   12e34:	7808      	ldrb	r0, [r1, #0]
   12e36:	2804      	cmp	r0, #4
   12e38:	d108      	bne.n	12e4c <at_parse_detect_type+0x70>
		while (is_lfcr(*tmpstr)) {
   12e3a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   12e3e:	f00c feae 	bl	1fb9e <is_lfcr>
   12e42:	2800      	cmp	r0, #0
   12e44:	d1f9      	bne.n	12e3a <at_parse_detect_type+0x5e>
	state = new_state;
   12e46:	2305      	movs	r3, #5
   12e48:	700b      	strb	r3, [r1, #0]
}
   12e4a:	e7d4      	b.n	12df6 <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   12e4c:	2808      	cmp	r0, #8
   12e4e:	d0d2      	beq.n	12df6 <at_parse_detect_type+0x1a>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   12e50:	3a2c      	subs	r2, #44	; 0x2c
   12e52:	b2d2      	uxtb	r2, r2
   12e54:	2a11      	cmp	r2, #17
   12e56:	d807      	bhi.n	12e68 <at_parse_detect_type+0x8c>
   12e58:	4b0f      	ldr	r3, [pc, #60]	; (12e98 <at_parse_detect_type+0xbc>)
   12e5a:	fa23 f202 	lsr.w	r2, r3, r2
   12e5e:	07d3      	lsls	r3, r2, #31
   12e60:	d502      	bpl.n	12e68 <at_parse_detect_type+0x8c>
	state = new_state;
   12e62:	2208      	movs	r2, #8
   12e64:	4b0b      	ldr	r3, [pc, #44]	; (12e94 <at_parse_detect_type+0xb8>)
   12e66:	e7d7      	b.n	12e18 <at_parse_detect_type+0x3c>
		return -1;
   12e68:	f04f 30ff 	mov.w	r0, #4294967295
   12e6c:	e7c5      	b.n	12dfa <at_parse_detect_type+0x1e>
	state = new_state;
   12e6e:	2302      	movs	r3, #2
   12e70:	e7c0      	b.n	12df4 <at_parse_detect_type+0x18>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   12e72:	dd03      	ble.n	12e7c <at_parse_detect_type+0xa0>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   12e74:	2a2b      	cmp	r2, #43	; 0x2b
   12e76:	d0f7      	beq.n	12e68 <at_parse_detect_type+0x8c>
   12e78:	2a25      	cmp	r2, #37	; 0x25
   12e7a:	d0f5      	beq.n	12e68 <at_parse_detect_type+0x8c>
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   12e7c:	f1a2 032b 	sub.w	r3, r2, #43	; 0x2b
   12e80:	b2db      	uxtb	r3, r3
   12e82:	2b0e      	cmp	r3, #14
   12e84:	d9c0      	bls.n	12e08 <at_parse_detect_type+0x2c>
	if (chr == '"') {
   12e86:	2a22      	cmp	r2, #34	; 0x22
   12e88:	d1c8      	bne.n	12e1c <at_parse_detect_type+0x40>
	state = new_state;
   12e8a:	2203      	movs	r2, #3
   12e8c:	4b01      	ldr	r3, [pc, #4]	; (12e94 <at_parse_detect_type+0xb8>)
		tmpstr++;
   12e8e:	3401      	adds	r4, #1
	state = new_state;
   12e90:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   12e92:	e7b0      	b.n	12df6 <at_parse_detect_type+0x1a>
   12e94:	20024316 	.word	0x20024316
   12e98:	00024001 	.word	0x00024001

00012e9c <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   12e9c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   12ea0:	4688      	mov	r8, r1
   12ea2:	4616      	mov	r6, r2
   12ea4:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   12ea6:	4604      	mov	r4, r0
   12ea8:	2800      	cmp	r0, #0
   12eaa:	d07c      	beq.n	12fa6 <at_parser_max_params_from_str+0x10a>
   12eac:	2a00      	cmp	r2, #0
   12eae:	d07a      	beq.n	12fa6 <at_parser_max_params_from_str+0x10a>
   12eb0:	6853      	ldr	r3, [r2, #4]
   12eb2:	2b00      	cmp	r3, #0
   12eb4:	d077      	beq.n	12fa6 <at_parser_max_params_from_str+0x10a>
	state = IDLE;
   12eb6:	2500      	movs	r5, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   12eb8:	4610      	mov	r0, r2
   12eba:	f00c fef7 	bl	1fcac <at_params_list_clear>
	const char *str = *at_params_str;
   12ebe:	9401      	str	r4, [sp, #4]
	int index = 0;
   12ec0:	462c      	mov	r4, r5

	max_params_count = MIN(max_params_count, list->param_count);
   12ec2:	6833      	ldr	r3, [r6, #0]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   12ec4:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 12fb0 <at_parser_max_params_from_str+0x114>
   12ec8:	429f      	cmp	r7, r3
   12eca:	bf28      	it	cs
   12ecc:	461f      	movcs	r7, r3
	state = IDLE;
   12ece:	4b37      	ldr	r3, [pc, #220]	; (12fac <at_parser_max_params_from_str+0x110>)
   12ed0:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   12ed2:	9a01      	ldr	r2, [sp, #4]
   12ed4:	7813      	ldrb	r3, [r2, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   12ed6:	2b00      	cmp	r3, #0
   12ed8:	d04b      	beq.n	12f72 <at_parser_max_params_from_str+0xd6>
   12eda:	42a7      	cmp	r7, r4
   12edc:	d949      	bls.n	12f72 <at_parser_max_params_from_str+0xd6>
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   12ede:	2b20      	cmp	r3, #32
   12ee0:	d002      	beq.n	12ee8 <at_parser_max_params_from_str+0x4c>
   12ee2:	3b09      	subs	r3, #9
   12ee4:	2b04      	cmp	r3, #4
   12ee6:	d801      	bhi.n	12eec <at_parser_max_params_from_str+0x50>
			str++;
   12ee8:	3201      	adds	r2, #1
   12eea:	9201      	str	r2, [sp, #4]
		if (at_parse_detect_type(&str, index) == -1) {
   12eec:	4621      	mov	r1, r4
   12eee:	a801      	add	r0, sp, #4
   12ef0:	f7ff ff74 	bl	12ddc <at_parse_detect_type>
   12ef4:	1c42      	adds	r2, r0, #1
   12ef6:	d03c      	beq.n	12f72 <at_parser_max_params_from_str+0xd6>
		if (at_parse_process_element(&str, index, list) == -1) {
   12ef8:	4632      	mov	r2, r6
   12efa:	4621      	mov	r1, r4
   12efc:	a801      	add	r0, sp, #4
   12efe:	f7ff fe8d 	bl	12c1c <at_parse_process_element>
   12f02:	1c43      	adds	r3, r0, #1
   12f04:	d035      	beq.n	12f72 <at_parser_max_params_from_str+0xd6>
		if (is_separator(*str)) {
   12f06:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   12f08:	781a      	ldrb	r2, [r3, #0]
   12f0a:	3a2c      	subs	r2, #44	; 0x2c
   12f0c:	b2d2      	uxtb	r2, r2
   12f0e:	2a11      	cmp	r2, #17
   12f10:	d81a      	bhi.n	12f48 <at_parser_max_params_from_str+0xac>
   12f12:	fa29 f202 	lsr.w	r2, r9, r2
   12f16:	07d1      	lsls	r1, r2, #31
   12f18:	d516      	bpl.n	12f48 <at_parser_max_params_from_str+0xac>
			if (is_lfcr(*(str + 1))) {
   12f1a:	7858      	ldrb	r0, [r3, #1]
   12f1c:	f00c fe3f 	bl	1fb9e <is_lfcr>
   12f20:	b178      	cbz	r0, 12f42 <at_parser_max_params_from_str+0xa6>
				index++;
   12f22:	3401      	adds	r4, #1
				if (index == max_params) {
   12f24:	42bc      	cmp	r4, r7
   12f26:	d039      	beq.n	12f9c <at_parser_max_params_from_str+0x100>
				if (at_parse_detect_type(&str, index) == -1) {
   12f28:	4621      	mov	r1, r4
   12f2a:	a801      	add	r0, sp, #4
   12f2c:	f7ff ff56 	bl	12ddc <at_parse_detect_type>
   12f30:	1c42      	adds	r2, r0, #1
   12f32:	d01e      	beq.n	12f72 <at_parser_max_params_from_str+0xd6>
				if (at_parse_process_element(&str, index,
   12f34:	4632      	mov	r2, r6
   12f36:	4621      	mov	r1, r4
   12f38:	a801      	add	r0, sp, #4
   12f3a:	f7ff fe6f 	bl	12c1c <at_parse_process_element>
   12f3e:	1c43      	adds	r3, r0, #1
   12f40:	d017      	beq.n	12f72 <at_parser_max_params_from_str+0xd6>
			str++;
   12f42:	9b01      	ldr	r3, [sp, #4]
   12f44:	3301      	adds	r3, #1
   12f46:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   12f48:	9a01      	ldr	r2, [sp, #4]
   12f4a:	7810      	ldrb	r0, [r2, #0]
   12f4c:	f00c fe27 	bl	1fb9e <is_lfcr>
   12f50:	b1f8      	cbz	r0, 12f92 <at_parser_max_params_from_str+0xf6>
   12f52:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   12f54:	7811      	ldrb	r1, [r2, #0]
   12f56:	4692      	mov	sl, r2
   12f58:	4608      	mov	r0, r1
   12f5a:	3201      	adds	r2, #1
   12f5c:	f00c fe1f 	bl	1fb9e <is_lfcr>
   12f60:	2800      	cmp	r0, #0
   12f62:	d1f7      	bne.n	12f54 <at_parser_max_params_from_str+0xb8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   12f64:	b119      	cbz	r1, 12f6e <at_parser_max_params_from_str+0xd2>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   12f66:	292b      	cmp	r1, #43	; 0x2b
   12f68:	d001      	beq.n	12f6e <at_parser_max_params_from_str+0xd2>
   12f6a:	2925      	cmp	r1, #37	; 0x25
   12f6c:	d111      	bne.n	12f92 <at_parser_max_params_from_str+0xf6>
				str += i;
   12f6e:	f8cd a004 	str.w	sl, [sp, #4]
	*at_params_str = str;
   12f72:	9b01      	ldr	r3, [sp, #4]
	if (oversized) {
   12f74:	b9a5      	cbnz	r5, 12fa0 <at_parser_max_params_from_str+0x104>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   12f76:	781a      	ldrb	r2, [r3, #0]
		return -EAGAIN;
   12f78:	2a00      	cmp	r2, #0
   12f7a:	bf0c      	ite	eq
   12f7c:	2000      	moveq	r0, #0
   12f7e:	f06f 000a 	mvnne.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   12f82:	f1b8 0f00 	cmp.w	r8, #0
   12f86:	d001      	beq.n	12f8c <at_parser_max_params_from_str+0xf0>
		*next_param_str = (char *)at_params_str;
   12f88:	f8c8 3000 	str.w	r3, [r8]
	}

	return err;
}
   12f8c:	b002      	add	sp, #8
   12f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		index++;
   12f92:	3401      	adds	r4, #1
			oversized = true;
   12f94:	42bc      	cmp	r4, r7
   12f96:	bf08      	it	eq
   12f98:	2501      	moveq	r5, #1
   12f9a:	e79a      	b.n	12ed2 <at_parser_max_params_from_str+0x36>
					oversized = true;
   12f9c:	4605      	mov	r5, r0
   12f9e:	e7e8      	b.n	12f72 <at_parser_max_params_from_str+0xd6>
		return -E2BIG;
   12fa0:	f06f 0006 	mvn.w	r0, #6
   12fa4:	e7ed      	b.n	12f82 <at_parser_max_params_from_str+0xe6>
		return -EINVAL;
   12fa6:	f06f 0015 	mvn.w	r0, #21
   12faa:	e7ef      	b.n	12f8c <at_parser_max_params_from_str+0xf0>
   12fac:	20024316 	.word	0x20024316
   12fb0:	00024001 	.word	0x00024001

00012fb4 <parse_psm_cfg>:
	char timer_str[9] = {0};
   12fb4:	2300      	movs	r3, #0
{
   12fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12fba:	b086      	sub	sp, #24
	char timer_str[9] = {0};
   12fbc:	e9cd 3303 	strd	r3, r3, [sp, #12]
   12fc0:	f88d 3014 	strb.w	r3, [sp, #20]
	char unit_str[4] = {0};
   12fc4:	9301      	str	r3, [sp, #4]
	size_t timer_str_len = sizeof(timer_str) - 1;
   12fc6:	2308      	movs	r3, #8
	size_t tau_idx = is_notif ? AT_CEREG_TAU_INDEX :
   12fc8:	2900      	cmp	r1, #0
	size_t timer_str_len = sizeof(timer_str) - 1;
   12fca:	9302      	str	r3, [sp, #8]
{
   12fcc:	4616      	mov	r6, r2
	err = at_params_string_get(at_params,
   12fce:	bf14      	ite	ne
   12fd0:	2108      	movne	r1, #8
   12fd2:	2109      	moveq	r1, #9
   12fd4:	446b      	add	r3, sp
   12fd6:	aa03      	add	r2, sp, #12
{
   12fd8:	4607      	mov	r7, r0
	size_t tau_idx = is_notif ? AT_CEREG_TAU_INDEX :
   12fda:	bf14      	ite	ne
   12fdc:	f04f 0807 	movne.w	r8, #7
   12fe0:	f04f 0808 	moveq.w	r8, #8
	err = at_params_string_get(at_params,
   12fe4:	f00c ff1a 	bl	1fe1c <at_params_string_get>
	if (err) {
   12fe8:	4604      	mov	r4, r0
   12fea:	b170      	cbz	r0, 1300a <parse_psm_cfg+0x56>
   12fec:	4a32      	ldr	r2, [pc, #200]	; (130b8 <parse_psm_cfg+0x104>)
   12fee:	4b33      	ldr	r3, [pc, #204]	; (130bc <parse_psm_cfg+0x108>)
		LOG_ERR("Could not get TAU, error: %d", err);
   12ff0:	4621      	mov	r1, r4
   12ff2:	1ad2      	subs	r2, r2, r3
   12ff4:	08d2      	lsrs	r2, r2, #3
   12ff6:	0192      	lsls	r2, r2, #6
   12ff8:	4831      	ldr	r0, [pc, #196]	; (130c0 <parse_psm_cfg+0x10c>)
   12ffa:	f042 0201 	orr.w	r2, r2, #1
   12ffe:	f00a fd66 	bl	1dace <log_1>
}
   13002:	4620      	mov	r0, r4
   13004:	b006      	add	sp, #24
   13006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(unit_str, timer_str, unit_str_len);
   1300a:	2203      	movs	r2, #3
   1300c:	a903      	add	r1, sp, #12
   1300e:	a801      	add	r0, sp, #4
   13010:	f00b fb1f 	bl	1e652 <memcpy>
	lut_idx = strtoul(unit_str, NULL, 2);
   13014:	2202      	movs	r2, #2
   13016:	4621      	mov	r1, r4
   13018:	a801      	add	r0, sp, #4
   1301a:	f00b fa2e 	bl	1e47a <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
   1301e:	2807      	cmp	r0, #7
   13020:	d90c      	bls.n	1303c <parse_psm_cfg+0x88>
   13022:	4925      	ldr	r1, [pc, #148]	; (130b8 <parse_psm_cfg+0x104>)
   13024:	4b25      	ldr	r3, [pc, #148]	; (130bc <parse_psm_cfg+0x108>)
		LOG_ERR("Unable to parse periodic TAU string");
   13026:	4827      	ldr	r0, [pc, #156]	; (130c4 <parse_psm_cfg+0x110>)
   13028:	1ac9      	subs	r1, r1, r3
   1302a:	08c9      	lsrs	r1, r1, #3
   1302c:	0189      	lsls	r1, r1, #6
   1302e:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Unable to parse active time string");
   13032:	f00a fd3d 	bl	1dab0 <log_0>
		return err;
   13036:	f06f 0415 	mvn.w	r4, #21
   1303a:	e7e2      	b.n	13002 <parse_psm_cfg+0x4e>
	timer_unit = t3412_lookup[lut_idx];
   1303c:	4b22      	ldr	r3, [pc, #136]	; (130c8 <parse_psm_cfg+0x114>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   1303e:	2202      	movs	r2, #2
	timer_unit = t3412_lookup[lut_idx];
   13040:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   13044:	4621      	mov	r1, r4
   13046:	f10d 000f 	add.w	r0, sp, #15
   1304a:	f00b fa16 	bl	1e47a <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   1304e:	b1fd      	cbz	r5, 13090 <parse_psm_cfg+0xdc>
   13050:	4345      	muls	r5, r0
	err = at_params_string_get(at_params,
   13052:	4641      	mov	r1, r8
   13054:	4638      	mov	r0, r7
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   13056:	6035      	str	r5, [r6, #0]
	err = at_params_string_get(at_params,
   13058:	ab02      	add	r3, sp, #8
   1305a:	aa03      	add	r2, sp, #12
   1305c:	f00c fede 	bl	1fe1c <at_params_string_get>
	if (err) {
   13060:	4604      	mov	r4, r0
   13062:	2800      	cmp	r0, #0
   13064:	d1c2      	bne.n	12fec <parse_psm_cfg+0x38>
	memcpy(unit_str, timer_str, unit_str_len);
   13066:	2203      	movs	r2, #3
   13068:	a903      	add	r1, sp, #12
   1306a:	a801      	add	r0, sp, #4
   1306c:	f00b faf1 	bl	1e652 <memcpy>
	lut_idx = strtoul(unit_str, NULL, 2);
   13070:	2202      	movs	r2, #2
   13072:	4621      	mov	r1, r4
   13074:	a801      	add	r0, sp, #4
   13076:	f00b fa00 	bl	1e47a <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
   1307a:	2807      	cmp	r0, #7
   1307c:	d90b      	bls.n	13096 <parse_psm_cfg+0xe2>
   1307e:	490e      	ldr	r1, [pc, #56]	; (130b8 <parse_psm_cfg+0x104>)
   13080:	4b0e      	ldr	r3, [pc, #56]	; (130bc <parse_psm_cfg+0x108>)
		LOG_ERR("Unable to parse active time string");
   13082:	4812      	ldr	r0, [pc, #72]	; (130cc <parse_psm_cfg+0x118>)
   13084:	1ac9      	subs	r1, r1, r3
   13086:	08c9      	lsrs	r1, r1, #3
   13088:	0189      	lsls	r1, r1, #6
   1308a:	f041 0101 	orr.w	r1, r1, #1
   1308e:	e7d0      	b.n	13032 <parse_psm_cfg+0x7e>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   13090:	f04f 35ff 	mov.w	r5, #4294967295
   13094:	e7dd      	b.n	13052 <parse_psm_cfg+0x9e>
	timer_unit = t3324_lookup[lut_idx];
   13096:	4b0e      	ldr	r3, [pc, #56]	; (130d0 <parse_psm_cfg+0x11c>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   13098:	2202      	movs	r2, #2
	timer_unit = t3324_lookup[lut_idx];
   1309a:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   1309e:	4621      	mov	r1, r4
   130a0:	f10d 000f 	add.w	r0, sp, #15
   130a4:	f00b f9e9 	bl	1e47a <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   130a8:	b115      	cbz	r5, 130b0 <parse_psm_cfg+0xfc>
   130aa:	4368      	muls	r0, r5
   130ac:	6070      	str	r0, [r6, #4]
	return 0;
   130ae:	e7a8      	b.n	13002 <parse_psm_cfg+0x4e>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   130b0:	f04f 30ff 	mov.w	r0, #4294967295
   130b4:	e7fa      	b.n	130ac <parse_psm_cfg+0xf8>
   130b6:	bf00      	nop
   130b8:	00020aa4 	.word	0x00020aa4
   130bc:	00020a64 	.word	0x00020a64
   130c0:	000221ee 	.word	0x000221ee
   130c4:	0002220b 	.word	0x0002220b
   130c8:	00020d74 	.word	0x00020d74
   130cc:	0002222f 	.word	0x0002222f
   130d0:	00020d54 	.word	0x00020d54

000130d4 <lte_lc_offline>:
{
   130d4:	b508      	push	{r3, lr}
	if (at_cmd_write(offline, NULL, 0, NULL) != 0) {
   130d6:	2300      	movs	r3, #0
   130d8:	4804      	ldr	r0, [pc, #16]	; (130ec <lte_lc_offline+0x18>)
   130da:	461a      	mov	r2, r3
   130dc:	4619      	mov	r1, r3
   130de:	f7ff fa8f 	bl	12600 <at_cmd_write>
   130e2:	2800      	cmp	r0, #0
}
   130e4:	bf18      	it	ne
   130e6:	f06f 0004 	mvnne.w	r0, #4
   130ea:	bd08      	pop	{r3, pc}
   130ec:	00022929 	.word	0x00022929

000130f0 <lte_lc_normal>:
{
   130f0:	b508      	push	{r3, lr}
	if (at_cmd_write(normal, NULL, 0, NULL) != 0) {
   130f2:	2300      	movs	r3, #0
   130f4:	4804      	ldr	r0, [pc, #16]	; (13108 <lte_lc_normal+0x18>)
   130f6:	461a      	mov	r2, r3
   130f8:	4619      	mov	r1, r3
   130fa:	f7ff fa81 	bl	12600 <at_cmd_write>
   130fe:	2800      	cmp	r0, #0
}
   13100:	bf18      	it	ne
   13102:	f06f 0004 	mvnne.w	r0, #4
   13106:	bd08      	pop	{r3, pc}
   13108:	0002291f 	.word	0x0002291f

0001310c <lte_lc_system_mode_set>:

	return err;
}

int lte_lc_system_mode_set(enum lte_lc_system_mode mode)
{
   1310c:	b530      	push	{r4, r5, lr}
	int err, len;
	char cmd[50];

	switch (mode) {
   1310e:	4605      	mov	r5, r0
{
   13110:	b08f      	sub	sp, #60	; 0x3c
	switch (mode) {
   13112:	2800      	cmp	r0, #0
   13114:	d040      	beq.n	13198 <lte_lc_system_mode_set+0x8c>
   13116:	1e43      	subs	r3, r0, #1
   13118:	2b04      	cmp	r3, #4
   1311a:	d90e      	bls.n	1313a <lte_lc_system_mode_set+0x2e>
   1311c:	4b1f      	ldr	r3, [pc, #124]	; (1319c <lte_lc_system_mode_set+0x90>)
   1311e:	4920      	ldr	r1, [pc, #128]	; (131a0 <lte_lc_system_mode_set+0x94>)
	case LTE_LC_SYSTEM_MODE_NBIOT:
	case LTE_LC_SYSTEM_MODE_NBIOT_GPS:
	case LTE_LC_SYSTEM_MODE_GPS:
		break;
	default:
		LOG_ERR("Invalid system mode requested");
   13120:	4820      	ldr	r0, [pc, #128]	; (131a4 <lte_lc_system_mode_set+0x98>)
   13122:	1ac9      	subs	r1, r1, r3
   13124:	08c9      	lsrs	r1, r1, #3
   13126:	0189      	lsls	r1, r1, #6
   13128:	f041 0101 	orr.w	r1, r1, #1
   1312c:	f00a fcc0 	bl	1dab0 <log_0>
		return -EINVAL;
   13130:	f06f 0415 	mvn.w	r4, #21

	sys_mode_current = mode;
	sys_mode_target = mode;

	return err;
}
   13134:	4620      	mov	r0, r4
   13136:	b00f      	add	sp, #60	; 0x3c
   13138:	bd30      	pop	{r4, r5, pc}
	len = snprintk(cmd, sizeof(cmd), "AT%%XSYSTEMMODE=%s",
   1313a:	4b1b      	ldr	r3, [pc, #108]	; (131a8 <lte_lc_system_mode_set+0x9c>)
   1313c:	2132      	movs	r1, #50	; 0x32
   1313e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   13142:	4a1a      	ldr	r2, [pc, #104]	; (131ac <lte_lc_system_mode_set+0xa0>)
   13144:	a801      	add	r0, sp, #4
   13146:	f00a f8e2 	bl	1d30e <snprintk>
	if (len < 0) {
   1314a:	2800      	cmp	r0, #0
   1314c:	da0c      	bge.n	13168 <lte_lc_system_mode_set+0x5c>
   1314e:	4b13      	ldr	r3, [pc, #76]	; (1319c <lte_lc_system_mode_set+0x90>)
   13150:	4913      	ldr	r1, [pc, #76]	; (131a0 <lte_lc_system_mode_set+0x94>)
		LOG_ERR("Could not construct system mode command");
   13152:	4817      	ldr	r0, [pc, #92]	; (131b0 <lte_lc_system_mode_set+0xa4>)
   13154:	1ac9      	subs	r1, r1, r3
   13156:	08c9      	lsrs	r1, r1, #3
   13158:	0189      	lsls	r1, r1, #6
   1315a:	f041 0101 	orr.w	r1, r1, #1
   1315e:	f00a fca7 	bl	1dab0 <log_0>
		return -EFAULT;
   13162:	f06f 040d 	mvn.w	r4, #13
   13166:	e7e5      	b.n	13134 <lte_lc_system_mode_set+0x28>
	err = at_cmd_write(cmd, NULL, 0, NULL);
   13168:	2300      	movs	r3, #0
   1316a:	a801      	add	r0, sp, #4
   1316c:	461a      	mov	r2, r3
   1316e:	4619      	mov	r1, r3
   13170:	f7ff fa46 	bl	12600 <at_cmd_write>
	if (err) {
   13174:	4604      	mov	r4, r0
   13176:	b150      	cbz	r0, 1318e <lte_lc_system_mode_set+0x82>
   13178:	4a09      	ldr	r2, [pc, #36]	; (131a0 <lte_lc_system_mode_set+0x94>)
   1317a:	4b08      	ldr	r3, [pc, #32]	; (1319c <lte_lc_system_mode_set+0x90>)
		LOG_ERR("Could not send AT command, error: %d", err);
   1317c:	4601      	mov	r1, r0
   1317e:	1ad2      	subs	r2, r2, r3
   13180:	08d2      	lsrs	r2, r2, #3
   13182:	0192      	lsls	r2, r2, #6
   13184:	480b      	ldr	r0, [pc, #44]	; (131b4 <lte_lc_system_mode_set+0xa8>)
   13186:	f042 0201 	orr.w	r2, r2, #1
   1318a:	f00a fca0 	bl	1dace <log_1>
	sys_mode_current = mode;
   1318e:	4b0a      	ldr	r3, [pc, #40]	; (131b8 <lte_lc_system_mode_set+0xac>)
   13190:	701d      	strb	r5, [r3, #0]
	sys_mode_target = mode;
   13192:	4b0a      	ldr	r3, [pc, #40]	; (131bc <lte_lc_system_mode_set+0xb0>)
   13194:	701d      	strb	r5, [r3, #0]
	return err;
   13196:	e7cd      	b.n	13134 <lte_lc_system_mode_set+0x28>
	switch (mode) {
   13198:	4604      	mov	r4, r0
   1319a:	e7cb      	b.n	13134 <lte_lc_system_mode_set+0x28>
   1319c:	00020a64 	.word	0x00020a64
   131a0:	00020aa4 	.word	0x00020aa4
   131a4:	000225ee 	.word	0x000225ee
   131a8:	00020d3c 	.word	0x00020d3c
   131ac:	0002260c 	.word	0x0002260c
   131b0:	0002261f 	.word	0x0002261f
   131b4:	00022647 	.word	0x00022647
   131b8:	20024319 	.word	0x20024319
   131bc:	20020079 	.word	0x20020079

000131c0 <w_lte_lc_connect>:
{
   131c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!is_initialized) {
   131c4:	4b23      	ldr	r3, [pc, #140]	; (13254 <w_lte_lc_connect+0x94>)
   131c6:	4c24      	ldr	r4, [pc, #144]	; (13258 <w_lte_lc_connect+0x98>)
   131c8:	4924      	ldr	r1, [pc, #144]	; (1325c <w_lte_lc_connect+0x9c>)
   131ca:	781b      	ldrb	r3, [r3, #0]
   131cc:	1a64      	subs	r4, r4, r1
{
   131ce:	4605      	mov	r5, r0
   131d0:	08e4      	lsrs	r4, r4, #3
	if (!is_initialized) {
   131d2:	b94b      	cbnz	r3, 131e8 <w_lte_lc_connect+0x28>
		LOG_ERR("The LTE link controller is not initialized");
   131d4:	01a1      	lsls	r1, r4, #6
   131d6:	4822      	ldr	r0, [pc, #136]	; (13260 <w_lte_lc_connect+0xa0>)
   131d8:	f041 0101 	orr.w	r1, r1, #1
   131dc:	f00a fc68 	bl	1dab0 <log_0>
		return -EPERM;
   131e0:	f04f 30ff 	mov.w	r0, #4294967295
}
   131e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return z_impl_k_sem_init(sem, initial_count, limit);
   131e8:	2201      	movs	r2, #1
   131ea:	2100      	movs	r1, #0
   131ec:	481d      	ldr	r0, [pc, #116]	; (13264 <w_lte_lc_connect+0xa4>)
   131ee:	f00d f87f 	bl	202f0 <z_impl_k_sem_init>
		err = lte_lc_system_mode_set(sys_mode_target);
   131f2:	4e1d      	ldr	r6, [pc, #116]	; (13268 <w_lte_lc_connect+0xa8>)
	return z_impl_k_sem_take(sem, timeout);
   131f4:	4f1b      	ldr	r7, [pc, #108]	; (13264 <w_lte_lc_connect+0xa4>)
			LOG_INF("Network connection attempt timed out");
   131f6:	f8df 8078 	ldr.w	r8, [pc, #120]	; 13270 <w_lte_lc_connect+0xb0>
		err = lte_lc_system_mode_set(sys_mode_target);
   131fa:	7830      	ldrb	r0, [r6, #0]
   131fc:	f7ff ff86 	bl	1310c <lte_lc_system_mode_set>
		if (err) {
   13200:	2800      	cmp	r0, #0
   13202:	d1ef      	bne.n	131e4 <w_lte_lc_connect+0x24>
		err = lte_lc_normal();
   13204:	f7ff ff74 	bl	130f0 <lte_lc_normal>
		if (err || !blocking) {
   13208:	2800      	cmp	r0, #0
   1320a:	d1eb      	bne.n	131e4 <w_lte_lc_connect+0x24>
   1320c:	2d00      	cmp	r5, #0
   1320e:	d0e9      	beq.n	131e4 <w_lte_lc_connect+0x24>
   13210:	f04f 7296 	mov.w	r2, #19660800	; 0x12c0000
   13214:	2300      	movs	r3, #0
   13216:	4638      	mov	r0, r7
   13218:	f009 fc44 	bl	1caa4 <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   1321c:	f110 0f0b 	cmn.w	r0, #11
   13220:	d1e0      	bne.n	131e4 <w_lte_lc_connect+0x24>
			LOG_INF("Network connection attempt timed out");
   13222:	ea4f 1984 	mov.w	r9, r4, lsl #6
   13226:	f049 0903 	orr.w	r9, r9, #3
   1322a:	4649      	mov	r1, r9
   1322c:	4640      	mov	r0, r8
   1322e:	f00a fc3f 	bl	1dab0 <log_0>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   13232:	7833      	ldrb	r3, [r6, #0]
   13234:	2b01      	cmp	r3, #1
   13236:	d10a      	bne.n	1324e <w_lte_lc_connect+0x8e>
				sys_mode_target = sys_mode_fallback;
   13238:	2302      	movs	r3, #2
   1323a:	7033      	strb	r3, [r6, #0]
				err = lte_lc_offline();
   1323c:	f7ff ff4a 	bl	130d4 <lte_lc_offline>
				if (err) {
   13240:	2800      	cmp	r0, #0
   13242:	d1cf      	bne.n	131e4 <w_lte_lc_connect+0x24>
				LOG_INF("Using fallback network mode");
   13244:	4649      	mov	r1, r9
   13246:	4809      	ldr	r0, [pc, #36]	; (1326c <w_lte_lc_connect+0xac>)
   13248:	f00a fc32 	bl	1dab0 <log_0>
	} while (retry);
   1324c:	e7d5      	b.n	131fa <w_lte_lc_connect+0x3a>
				err = -ETIMEDOUT;
   1324e:	f06f 003b 	mvn.w	r0, #59	; 0x3b
   13252:	e7c7      	b.n	131e4 <w_lte_lc_connect+0x24>
   13254:	20024317 	.word	0x20024317
   13258:	00020aa4 	.word	0x00020aa4
   1325c:	00020a64 	.word	0x00020a64
   13260:	0002266c 	.word	0x0002266c
   13264:	20020aa0 	.word	0x20020aa0
   13268:	20020079 	.word	0x20020079
   1326c:	000226bc 	.word	0x000226bc
   13270:	00022697 	.word	0x00022697

00013274 <lte_lc_system_mode_get>:

int lte_lc_system_mode_get(enum lte_lc_system_mode *mode)
{
   13274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err, bitmask = 0;
	struct at_param_list resp_list = {0};
   13278:	2400      	movs	r4, #0
{
   1327a:	b090      	sub	sp, #64	; 0x40
   1327c:	4605      	mov	r5, r0
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
   1327e:	221a      	movs	r2, #26
   13280:	4621      	mov	r1, r4
   13282:	a809      	add	r0, sp, #36	; 0x24
	struct at_param_list resp_list = {0};
   13284:	e9cd 4402 	strd	r4, r4, [sp, #8]
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
   13288:	9408      	str	r4, [sp, #32]
   1328a:	f00b fa0d 	bl	1e6a8 <memset>
	char response_prefix[sizeof(AT_XSYSTEMMODE_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   1328e:	230d      	movs	r3, #13
	char response_prefix[sizeof(AT_XSYSTEMMODE_RESPONSE_PREFIX)] = {0};
   13290:	e9cd 4404 	strd	r4, r4, [sp, #16]
   13294:	9406      	str	r4, [sp, #24]
   13296:	f88d 401c 	strb.w	r4, [sp, #28]
	size_t response_prefix_len = sizeof(response_prefix);
   1329a:	9300      	str	r3, [sp, #0]

	if (mode == NULL) {
   1329c:	2d00      	cmp	r5, #0
   1329e:	f000 80ad 	beq.w	133fc <lte_lc_system_mode_get+0x188>
		return -EINVAL;
	}

	err = at_cmd_write(AT_XSYSTEMMODE_READ, response, sizeof(response),
   132a2:	4623      	mov	r3, r4
   132a4:	221e      	movs	r2, #30
   132a6:	4857      	ldr	r0, [pc, #348]	; (13404 <lte_lc_system_mode_get+0x190>)
   132a8:	a908      	add	r1, sp, #32
   132aa:	f7ff f9a9 	bl	12600 <at_cmd_write>
			   NULL);
	if (err) {
   132ae:	4604      	mov	r4, r0
   132b0:	b168      	cbz	r0, 132ce <lte_lc_system_mode_get+0x5a>
   132b2:	4955      	ldr	r1, [pc, #340]	; (13408 <lte_lc_system_mode_get+0x194>)
   132b4:	4b55      	ldr	r3, [pc, #340]	; (1340c <lte_lc_system_mode_get+0x198>)
		LOG_ERR("Could not send AT command");
   132b6:	4856      	ldr	r0, [pc, #344]	; (13410 <lte_lc_system_mode_get+0x19c>)
   132b8:	1ac9      	subs	r1, r1, r3
   132ba:	08c9      	lsrs	r1, r1, #3
   132bc:	0189      	lsls	r1, r1, #6
   132be:	f041 0101 	orr.w	r1, r1, #1
   132c2:	f00a fbf5 	bl	1dab0 <log_0>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   132c6:	4620      	mov	r0, r4
   132c8:	b010      	add	sp, #64	; 0x40
   132ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = at_params_list_init(&resp_list, AT_XSYSTEMMODE_PARAMS_COUNT);
   132ce:	2105      	movs	r1, #5
   132d0:	a802      	add	r0, sp, #8
   132d2:	f00c fcd8 	bl	1fc86 <at_params_list_init>
	if (err) {
   132d6:	4604      	mov	r4, r0
   132d8:	b158      	cbz	r0, 132f2 <lte_lc_system_mode_get+0x7e>
   132da:	4b4c      	ldr	r3, [pc, #304]	; (1340c <lte_lc_system_mode_get+0x198>)
   132dc:	4a4a      	ldr	r2, [pc, #296]	; (13408 <lte_lc_system_mode_get+0x194>)
		LOG_ERR("Could init AT params list, error: %d", err);
   132de:	4601      	mov	r1, r0
   132e0:	1ad2      	subs	r2, r2, r3
   132e2:	08d2      	lsrs	r2, r2, #3
   132e4:	0192      	lsls	r2, r2, #6
   132e6:	484b      	ldr	r0, [pc, #300]	; (13414 <lte_lc_system_mode_get+0x1a0>)
   132e8:	f042 0201 	orr.w	r2, r2, #1
   132ec:	f00a fbef 	bl	1dace <log_1>
		return err;
   132f0:	e7e9      	b.n	132c6 <lte_lc_system_mode_get+0x52>
	err = at_parser_max_params_from_str(response, NULL, &resp_list,
   132f2:	4601      	mov	r1, r0
   132f4:	2305      	movs	r3, #5
   132f6:	aa02      	add	r2, sp, #8
   132f8:	a808      	add	r0, sp, #32
   132fa:	f7ff fdcf 	bl	12e9c <at_parser_max_params_from_str>
	if (err) {
   132fe:	4604      	mov	r4, r0
   13300:	b158      	cbz	r0, 1331a <lte_lc_system_mode_get+0xa6>
   13302:	4a41      	ldr	r2, [pc, #260]	; (13408 <lte_lc_system_mode_get+0x194>)
   13304:	4b41      	ldr	r3, [pc, #260]	; (1340c <lte_lc_system_mode_get+0x198>)
		LOG_ERR("Could not parse AT response, error: %d", err);
   13306:	4601      	mov	r1, r0
   13308:	1ad2      	subs	r2, r2, r3
   1330a:	08d2      	lsrs	r2, r2, #3
   1330c:	0192      	lsls	r2, r2, #6
   1330e:	4842      	ldr	r0, [pc, #264]	; (13418 <lte_lc_system_mode_get+0x1a4>)
   13310:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Could not parse mode parameter, err: %d", err);
   13314:	f00a fbdb 	bl	1dace <log_1>
			goto clean_exit;
   13318:	e013      	b.n	13342 <lte_lc_system_mode_get+0xce>
	err = at_params_string_get(&resp_list,
   1331a:	4601      	mov	r1, r0
   1331c:	466b      	mov	r3, sp
   1331e:	aa04      	add	r2, sp, #16
   13320:	a802      	add	r0, sp, #8
   13322:	f00c fd7b 	bl	1fe1c <at_params_string_get>
	if (err) {
   13326:	4606      	mov	r6, r0
   13328:	b178      	cbz	r0, 1334a <lte_lc_system_mode_get+0xd6>
   1332a:	4b38      	ldr	r3, [pc, #224]	; (1340c <lte_lc_system_mode_get+0x198>)
   1332c:	4a36      	ldr	r2, [pc, #216]	; (13408 <lte_lc_system_mode_get+0x194>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   1332e:	4601      	mov	r1, r0
   13330:	1ad2      	subs	r2, r2, r3
   13332:	08d2      	lsrs	r2, r2, #3
   13334:	0192      	lsls	r2, r2, #6
   13336:	4839      	ldr	r0, [pc, #228]	; (1341c <lte_lc_system_mode_get+0x1a8>)
   13338:	f042 0201 	orr.w	r2, r2, #1
   1333c:	f00a fbc7 	bl	1dace <log_1>
		goto clean_exit;
   13340:	4634      	mov	r4, r6
	at_params_list_free(&resp_list);
   13342:	a802      	add	r0, sp, #8
   13344:	f00c fccb 	bl	1fcde <at_params_list_free>
	return err;
   13348:	e7bd      	b.n	132c6 <lte_lc_system_mode_get+0x52>
	if (!response_is_valid(response_prefix, response_prefix_len,
   1334a:	4a35      	ldr	r2, [pc, #212]	; (13420 <lte_lc_system_mode_get+0x1ac>)
   1334c:	9900      	ldr	r1, [sp, #0]
   1334e:	a804      	add	r0, sp, #16
   13350:	f00c fd87 	bl	1fe62 <response_is_valid>
   13354:	b960      	cbnz	r0, 13370 <lte_lc_system_mode_get+0xfc>
   13356:	4b2d      	ldr	r3, [pc, #180]	; (1340c <lte_lc_system_mode_get+0x198>)
   13358:	492b      	ldr	r1, [pc, #172]	; (13408 <lte_lc_system_mode_get+0x194>)
		LOG_ERR("Invalid XSYSTEMMODE response");
   1335a:	4832      	ldr	r0, [pc, #200]	; (13424 <lte_lc_system_mode_get+0x1b0>)
   1335c:	1ac9      	subs	r1, r1, r3
   1335e:	08c9      	lsrs	r1, r1, #3
   13360:	0189      	lsls	r1, r1, #6
   13362:	f041 0101 	orr.w	r1, r1, #1
   13366:	f00a fba3 	bl	1dab0 <log_0>
		err = -EIO;
   1336a:	f06f 0404 	mvn.w	r4, #4
		goto clean_exit;
   1336e:	e7e8      	b.n	13342 <lte_lc_system_mode_get+0xce>
	for (size_t i = 1; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   13370:	2701      	movs	r7, #1
		bitmask = param ? bitmask | BIT(i) : bitmask;
   13372:	46b8      	mov	r8, r7
		err = at_params_int_get(&resp_list, i, &param);
   13374:	4639      	mov	r1, r7
   13376:	aa01      	add	r2, sp, #4
   13378:	a802      	add	r0, sp, #8
   1337a:	f00c fd3c 	bl	1fdf6 <at_params_int_get>
		if (err) {
   1337e:	4604      	mov	r4, r0
   13380:	b148      	cbz	r0, 13396 <lte_lc_system_mode_get+0x122>
   13382:	4a21      	ldr	r2, [pc, #132]	; (13408 <lte_lc_system_mode_get+0x194>)
   13384:	4b21      	ldr	r3, [pc, #132]	; (1340c <lte_lc_system_mode_get+0x198>)
			LOG_ERR("Could not parse mode parameter, err: %d", err);
   13386:	4601      	mov	r1, r0
   13388:	1ad2      	subs	r2, r2, r3
   1338a:	08d2      	lsrs	r2, r2, #3
   1338c:	0192      	lsls	r2, r2, #6
   1338e:	4826      	ldr	r0, [pc, #152]	; (13428 <lte_lc_system_mode_get+0x1b4>)
   13390:	f042 0201 	orr.w	r2, r2, #1
   13394:	e7be      	b.n	13314 <lte_lc_system_mode_get+0xa0>
		bitmask = param ? bitmask | BIT(i) : bitmask;
   13396:	9b01      	ldr	r3, [sp, #4]
   13398:	b113      	cbz	r3, 133a0 <lte_lc_system_mode_get+0x12c>
   1339a:	fa08 f307 	lsl.w	r3, r8, r7
   1339e:	431e      	orrs	r6, r3
	for (size_t i = 1; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   133a0:	3701      	adds	r7, #1
   133a2:	2f05      	cmp	r7, #5
   133a4:	d1e6      	bne.n	13374 <lte_lc_system_mode_get+0x100>
	switch (bitmask) {
   133a6:	2e0c      	cmp	r6, #12
   133a8:	d81b      	bhi.n	133e2 <lte_lc_system_mode_get+0x16e>
   133aa:	e8df f006 	tbb	[pc, r6]
   133ae:	1a07      	.short	0x1a07
   133b0:	1a121a10 	.word	0x1a121a10
   133b4:	1a141a1a 	.word	0x1a141a1a
   133b8:	1a16      	.short	0x1a16
   133ba:	18          	.byte	0x18
   133bb:	00          	.byte	0x00
		*mode = LTE_LC_SYSTEM_MODE_NONE;
   133bc:	2300      	movs	r3, #0
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   133be:	702b      	strb	r3, [r5, #0]
	if (sys_mode_current != *mode) {
   133c0:	4b1a      	ldr	r3, [pc, #104]	; (1342c <lte_lc_system_mode_get+0x1b8>)
   133c2:	782a      	ldrb	r2, [r5, #0]
   133c4:	7819      	ldrb	r1, [r3, #0]
   133c6:	4291      	cmp	r1, r2
		sys_mode_current = *mode;
   133c8:	bf18      	it	ne
   133ca:	701a      	strbne	r2, [r3, #0]
   133cc:	e7b9      	b.n	13342 <lte_lc_system_mode_get+0xce>
		*mode = LTE_LC_SYSTEM_MODE_LTEM;
   133ce:	2301      	movs	r3, #1
   133d0:	e7f5      	b.n	133be <lte_lc_system_mode_get+0x14a>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT;
   133d2:	2302      	movs	r3, #2
   133d4:	e7f3      	b.n	133be <lte_lc_system_mode_get+0x14a>
		*mode = LTE_LC_SYSTEM_MODE_GPS;
   133d6:	2303      	movs	r3, #3
   133d8:	e7f1      	b.n	133be <lte_lc_system_mode_get+0x14a>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_GPS;
   133da:	2304      	movs	r3, #4
   133dc:	e7ef      	b.n	133be <lte_lc_system_mode_get+0x14a>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   133de:	2305      	movs	r3, #5
   133e0:	e7ed      	b.n	133be <lte_lc_system_mode_get+0x14a>
   133e2:	4b0a      	ldr	r3, [pc, #40]	; (1340c <lte_lc_system_mode_get+0x198>)
   133e4:	4908      	ldr	r1, [pc, #32]	; (13408 <lte_lc_system_mode_get+0x194>)
		LOG_ERR("Invalid system mode, assuming parsing error");
   133e6:	4812      	ldr	r0, [pc, #72]	; (13430 <lte_lc_system_mode_get+0x1bc>)
   133e8:	1ac9      	subs	r1, r1, r3
   133ea:	08c9      	lsrs	r1, r1, #3
   133ec:	0189      	lsls	r1, r1, #6
   133ee:	f041 0101 	orr.w	r1, r1, #1
   133f2:	f00a fb5d 	bl	1dab0 <log_0>
		err = -EFAULT;
   133f6:	f06f 040d 	mvn.w	r4, #13
		goto clean_exit;
   133fa:	e7a2      	b.n	13342 <lte_lc_system_mode_get+0xce>
		return -EINVAL;
   133fc:	f06f 0415 	mvn.w	r4, #21
   13400:	e761      	b.n	132c6 <lte_lc_system_mode_get+0x52>
   13402:	bf00      	nop
   13404:	000226d8 	.word	0x000226d8
   13408:	00020aa4 	.word	0x00020aa4
   1340c:	00020a64 	.word	0x00020a64
   13410:	000226e8 	.word	0x000226e8
   13414:	00022702 	.word	0x00022702
   13418:	00022727 	.word	0x00022727
   1341c:	00022569 	.word	0x00022569
   13420:	0002274e 	.word	0x0002274e
   13424:	0002275b 	.word	0x0002275b
   13428:	00022778 	.word	0x00022778
   1342c:	20024319 	.word	0x20024319
   13430:	000227a0 	.word	0x000227a0

00013434 <w_lte_lc_init>:
{
   13434:	b570      	push	{r4, r5, r6, lr}
	if (is_initialized) {
   13436:	4e3a      	ldr	r6, [pc, #232]	; (13520 <w_lte_lc_init+0xec>)
{
   13438:	b08e      	sub	sp, #56	; 0x38
	if (is_initialized) {
   1343a:	7833      	ldrb	r3, [r6, #0]
   1343c:	2b00      	cmp	r3, #0
   1343e:	d168      	bne.n	13512 <w_lte_lc_init+0xde>
	err = lte_lc_system_mode_get(&sys_mode_current);
   13440:	4d38      	ldr	r5, [pc, #224]	; (13524 <w_lte_lc_init+0xf0>)
   13442:	4628      	mov	r0, r5
   13444:	f7ff ff16 	bl	13274 <lte_lc_system_mode_get>
	if (err) {
   13448:	4604      	mov	r4, r0
   1344a:	b168      	cbz	r0, 13468 <w_lte_lc_init+0x34>
   1344c:	4a36      	ldr	r2, [pc, #216]	; (13528 <w_lte_lc_init+0xf4>)
   1344e:	4b37      	ldr	r3, [pc, #220]	; (1352c <w_lte_lc_init+0xf8>)
		LOG_ERR("Could not get current system mode, error: %d", err);
   13450:	4601      	mov	r1, r0
   13452:	1ad2      	subs	r2, r2, r3
   13454:	08d2      	lsrs	r2, r2, #3
   13456:	0192      	lsls	r2, r2, #6
   13458:	4835      	ldr	r0, [pc, #212]	; (13530 <w_lte_lc_init+0xfc>)
   1345a:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Can't register AT handler, error: %d", err);
   1345e:	f00a fb36 	bl	1dace <log_1>
}
   13462:	4620      	mov	r0, r4
   13464:	b00e      	add	sp, #56	; 0x38
   13466:	bd70      	pop	{r4, r5, r6, pc}
	err = at_notif_register_handler(NULL, at_handler);
   13468:	4932      	ldr	r1, [pc, #200]	; (13534 <w_lte_lc_init+0x100>)
   1346a:	f7ff f9c3 	bl	127f4 <at_notif_register_handler>
	if (err) {
   1346e:	4604      	mov	r4, r0
   13470:	b148      	cbz	r0, 13486 <w_lte_lc_init+0x52>
   13472:	4a2d      	ldr	r2, [pc, #180]	; (13528 <w_lte_lc_init+0xf4>)
   13474:	4b2d      	ldr	r3, [pc, #180]	; (1352c <w_lte_lc_init+0xf8>)
		LOG_ERR("Can't register AT handler, error: %d", err);
   13476:	4601      	mov	r1, r0
   13478:	1ad2      	subs	r2, r2, r3
   1347a:	08d2      	lsrs	r2, r2, #3
   1347c:	0192      	lsls	r2, r2, #6
   1347e:	482e      	ldr	r0, [pc, #184]	; (13538 <w_lte_lc_init+0x104>)
   13480:	f042 0201 	orr.w	r2, r2, #1
   13484:	e7eb      	b.n	1345e <w_lte_lc_init+0x2a>
	if (sys_mode_current != sys_mode_target) {
   13486:	4b2d      	ldr	r3, [pc, #180]	; (1353c <w_lte_lc_init+0x108>)
   13488:	7818      	ldrb	r0, [r3, #0]
   1348a:	782b      	ldrb	r3, [r5, #0]
   1348c:	4283      	cmp	r3, r0
   1348e:	d00d      	beq.n	134ac <w_lte_lc_init+0x78>
		err = lte_lc_system_mode_set(sys_mode_target);
   13490:	f7ff fe3c 	bl	1310c <lte_lc_system_mode_set>
		if (err) {
   13494:	4604      	mov	r4, r0
   13496:	b148      	cbz	r0, 134ac <w_lte_lc_init+0x78>
   13498:	4a23      	ldr	r2, [pc, #140]	; (13528 <w_lte_lc_init+0xf4>)
   1349a:	4b24      	ldr	r3, [pc, #144]	; (1352c <w_lte_lc_init+0xf8>)
			LOG_ERR("Could not set system mode, error: %d", err);
   1349c:	4601      	mov	r1, r0
   1349e:	1ad2      	subs	r2, r2, r3
   134a0:	08d2      	lsrs	r2, r2, #3
   134a2:	0192      	lsls	r2, r2, #6
   134a4:	4826      	ldr	r0, [pc, #152]	; (13540 <w_lte_lc_init+0x10c>)
   134a6:	f042 0201 	orr.w	r2, r2, #1
   134aa:	e7d8      	b.n	1345e <w_lte_lc_init+0x2a>
	if (at_cmd_write(cereg_5_subscribe, NULL, 0, NULL) != 0) {
   134ac:	2300      	movs	r3, #0
   134ae:	4825      	ldr	r0, [pc, #148]	; (13544 <w_lte_lc_init+0x110>)
   134b0:	461a      	mov	r2, r3
   134b2:	4619      	mov	r1, r3
   134b4:	f7ff f8a4 	bl	12600 <at_cmd_write>
   134b8:	4604      	mov	r4, r0
   134ba:	bb68      	cbnz	r0, 13518 <w_lte_lc_init+0xe4>
	err = at_cmd_write(cscon, NULL, 0, NULL);
   134bc:	4602      	mov	r2, r0
   134be:	4603      	mov	r3, r0
   134c0:	4601      	mov	r1, r0
   134c2:	4821      	ldr	r0, [pc, #132]	; (13548 <w_lte_lc_init+0x114>)
   134c4:	f7ff f89c 	bl	12600 <at_cmd_write>
	if (err) {
   134c8:	4602      	mov	r2, r0
   134ca:	b1f8      	cbz	r0, 1350c <w_lte_lc_init+0xd8>
   134cc:	4b17      	ldr	r3, [pc, #92]	; (1352c <w_lte_lc_init+0xf8>)
   134ce:	4d16      	ldr	r5, [pc, #88]	; (13528 <w_lte_lc_init+0xf4>)
		LOG_WRN("%s failed (%d), RRC notifications are not enabled",
   134d0:	491d      	ldr	r1, [pc, #116]	; (13548 <w_lte_lc_init+0x114>)
   134d2:	1aed      	subs	r5, r5, r3
   134d4:	08ed      	lsrs	r5, r5, #3
   134d6:	01ad      	lsls	r5, r5, #6
   134d8:	f045 0502 	orr.w	r5, r5, #2
   134dc:	462b      	mov	r3, r5
   134de:	481b      	ldr	r0, [pc, #108]	; (1354c <w_lte_lc_init+0x118>)
   134e0:	f00a fb0c 	bl	1dafc <log_2>
		LOG_WRN("%s is supported in nRF9160 modem >= v1.1.0", cscon);
   134e4:	462a      	mov	r2, r5
   134e6:	4918      	ldr	r1, [pc, #96]	; (13548 <w_lte_lc_init+0x114>)
   134e8:	4819      	ldr	r0, [pc, #100]	; (13550 <w_lte_lc_init+0x11c>)
   134ea:	f00a faf0 	bl	1dace <log_1>
		err = at_cmd_write("AT+CGMR", buf, sizeof(buf), NULL);
   134ee:	4623      	mov	r3, r4
   134f0:	2232      	movs	r2, #50	; 0x32
   134f2:	4818      	ldr	r0, [pc, #96]	; (13554 <w_lte_lc_init+0x120>)
   134f4:	a901      	add	r1, sp, #4
   134f6:	f7ff f883 	bl	12600 <at_cmd_write>
		if (err == 0) {
   134fa:	b938      	cbnz	r0, 1350c <w_lte_lc_init+0xd8>
			LOG_WRN("Current modem firmware version: %s",
   134fc:	a801      	add	r0, sp, #4
   134fe:	f7fb fa6b 	bl	e9d8 <log_strdup>
   13502:	462a      	mov	r2, r5
   13504:	4601      	mov	r1, r0
   13506:	4814      	ldr	r0, [pc, #80]	; (13558 <w_lte_lc_init+0x124>)
   13508:	f00a fae1 	bl	1dace <log_1>
	is_initialized = true;
   1350c:	2301      	movs	r3, #1
   1350e:	7033      	strb	r3, [r6, #0]
	return 0;
   13510:	e7a7      	b.n	13462 <w_lte_lc_init+0x2e>
		return -EALREADY;
   13512:	f06f 0444 	mvn.w	r4, #68	; 0x44
   13516:	e7a4      	b.n	13462 <w_lte_lc_init+0x2e>
		return -EIO;
   13518:	f06f 0404 	mvn.w	r4, #4
   1351c:	e7a1      	b.n	13462 <w_lte_lc_init+0x2e>
   1351e:	bf00      	nop
   13520:	20024317 	.word	0x20024317
   13524:	20024319 	.word	0x20024319
   13528:	00020aa4 	.word	0x00020aa4
   1352c:	00020a64 	.word	0x00020a64
   13530:	000227cc 	.word	0x000227cc
   13534:	0000cbc9 	.word	0x0000cbc9
   13538:	000227f9 	.word	0x000227f9
   1353c:	20020079 	.word	0x20020079
   13540:	0002281e 	.word	0x0002281e
   13544:	00022909 	.word	0x00022909
   13548:	00022914 	.word	0x00022914
   1354c:	00022843 	.word	0x00022843
   13550:	00022875 	.word	0x00022875
   13554:	000228a0 	.word	0x000228a0
   13558:	000228a8 	.word	0x000228a8

0001355c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1355c:	b508      	push	{r3, lr}
	z_impl_log_panic();
   1355e:	f7fb fbb1 	bl	ecc4 <z_impl_log_panic>
   13562:	4b06      	ldr	r3, [pc, #24]	; (1357c <k_sys_fatal_error_handler+0x20>)
   13564:	4906      	ldr	r1, [pc, #24]	; (13580 <k_sys_fatal_error_handler+0x24>)
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   13566:	4807      	ldr	r0, [pc, #28]	; (13584 <k_sys_fatal_error_handler+0x28>)
   13568:	1ac9      	subs	r1, r1, r3
   1356a:	08c9      	lsrs	r1, r1, #3
   1356c:	0189      	lsls	r1, r1, #6
   1356e:	f041 0101 	orr.w	r1, r1, #1
   13572:	f00a fa9d 	bl	1dab0 <log_0>
	sys_arch_reboot(0);
   13576:	2000      	movs	r0, #0
   13578:	f7fc fe90 	bl	1029c <sys_arch_reboot>

	CODE_UNREACHABLE;
   1357c:	00020a64 	.word	0x00020a64
   13580:	00020a94 	.word	0x00020a94
   13584:	00022933 	.word	0x00022933

00013588 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   13588:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   1358c:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   1358e:	4c21      	ldr	r4, [pc, #132]	; (13614 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   13590:	4e21      	ldr	r6, [pc, #132]	; (13618 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   13592:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   13596:	f8df 9088 	ldr.w	r9, [pc, #136]	; 13620 <check_ext_api_requests+0x98>
{
   1359a:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   1359c:	45a8      	cmp	r8, r5
   1359e:	d803      	bhi.n	135a8 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   135a0:	2000      	movs	r0, #0
   135a2:	b005      	add	sp, #20
   135a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   135a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   135aa:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   135ae:	681f      	ldr	r7, [r3, #0]
   135b0:	ab01      	add	r3, sp, #4
   135b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   135b6:	220c      	movs	r2, #12
   135b8:	4619      	mov	r1, r3
   135ba:	4638      	mov	r0, r7
   135bc:	f00b f839 	bl	1e632 <memcmp>
   135c0:	b990      	cbnz	r0, 135e8 <check_ext_api_requests+0x60>
   135c2:	b18f      	cbz	r7, 135e8 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   135c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   135c6:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   135c8:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   135ca:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   135cc:	4291      	cmp	r1, r2
   135ce:	d10b      	bne.n	135e8 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   135d0:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   135d2:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   135d4:	4291      	cmp	r1, r2
   135d6:	d807      	bhi.n	135e8 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   135d8:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   135da:	4291      	cmp	r1, r2
   135dc:	d904      	bls.n	135e8 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   135de:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   135e0:	695b      	ldr	r3, [r3, #20]
   135e2:	ea32 0303 	bics.w	r3, r2, r3
   135e6:	d00a      	beq.n	135fe <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   135e8:	6a27      	ldr	r7, [r4, #32]
   135ea:	b167      	cbz	r7, 13606 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   135ec:	480b      	ldr	r0, [pc, #44]	; (1361c <check_ext_api_requests+0x94>)
   135ee:	f009 fe81 	bl	1d2f4 <printk>
			k_panic();
   135f2:	4040      	eors	r0, r0
   135f4:	f380 8811 	msr	BASEPRI, r0
   135f8:	f04f 0004 	mov.w	r0, #4
   135fc:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   135fe:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   13600:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   13602:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   13604:	e7ca      	b.n	1359c <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   13606:	4648      	mov	r0, r9
   13608:	f009 fe74 	bl	1d2f4 <printk>
			*ext_api_req->ext_api = NULL;
   1360c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1360e:	601f      	str	r7, [r3, #0]
   13610:	e7f5      	b.n	135fe <check_ext_api_requests+0x76>
   13612:	bf00      	nop
   13614:	0000c23c 	.word	0x0000c23c
   13618:	00020b1c 	.word	0x00020b1c
   1361c:	00022950 	.word	0x00022950
   13620:	00022979 	.word	0x00022979

00013624 <packet_free_cb>:
   13624:	b510      	push	{r4, lr}
   13626:	4604      	mov	r4, r0
   13628:	6800      	ldr	r0, [r0, #0]
   1362a:	f004 fed3 	bl	183d4 <rpc_logobj_client_data_free>
   1362e:	68a0      	ldr	r0, [r4, #8]
   13630:	b118      	cbz	r0, 1363a <packet_free_cb+0x16>
   13632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13636:	f007 bc81 	b.w	1af3c <nrf_free>
   1363a:	bd10      	pop	{r4, pc}

0001363c <logobj_event_handler>:
   1363c:	b530      	push	{r4, r5, lr}
   1363e:	4b3b      	ldr	r3, [pc, #236]	; (1372c <logobj_event_handler+0xf0>)
   13640:	b085      	sub	sp, #20
   13642:	681d      	ldr	r5, [r3, #0]
   13644:	2d00      	cmp	r5, #0
   13646:	d04c      	beq.n	136e2 <logobj_event_handler+0xa6>
   13648:	f248 0302 	movw	r3, #32770	; 0x8002
   1364c:	4299      	cmp	r1, r3
   1364e:	d053      	beq.n	136f8 <logobj_event_handler+0xbc>
   13650:	d91c      	bls.n	1368c <logobj_event_handler+0x50>
   13652:	f248 0303 	movw	r3, #32771	; 0x8003
   13656:	4299      	cmp	r1, r3
   13658:	d05a      	beq.n	13710 <logobj_event_handler+0xd4>
   1365a:	f249 0301 	movw	r3, #36865	; 0x9001
   1365e:	4299      	cmp	r1, r3
   13660:	d147      	bne.n	136f2 <logobj_event_handler+0xb6>
   13662:	2400      	movs	r4, #0
   13664:	6843      	ldr	r3, [r0, #4]
   13666:	6802      	ldr	r2, [r0, #0]
   13668:	e9cd 4402 	strd	r4, r4, [sp, #8]
   1366c:	e9cd 2300 	strd	r2, r3, [sp]
   13670:	69e8      	ldr	r0, [r5, #28]
   13672:	4669      	mov	r1, sp
   13674:	6803      	ldr	r3, [r0, #0]
   13676:	685b      	ldr	r3, [r3, #4]
   13678:	4798      	blx	r3
   1367a:	3001      	adds	r0, #1
   1367c:	d04e      	beq.n	1371c <logobj_event_handler+0xe0>
   1367e:	4620      	mov	r0, r4
   13680:	682b      	ldr	r3, [r5, #0]
   13682:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   13686:	602b      	str	r3, [r5, #0]
   13688:	b005      	add	sp, #20
   1368a:	bd30      	pop	{r4, r5, pc}
   1368c:	f248 0301 	movw	r3, #32769	; 0x8001
   13690:	4299      	cmp	r1, r3
   13692:	d12e      	bne.n	136f2 <logobj_event_handler+0xb6>
   13694:	68c3      	ldr	r3, [r0, #12]
   13696:	2b00      	cmp	r3, #0
   13698:	d135      	bne.n	13706 <logobj_event_handler+0xca>
   1369a:	6828      	ldr	r0, [r5, #0]
   1369c:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   136a0:	d03e      	beq.n	13720 <logobj_event_handler+0xe4>
   136a2:	682b      	ldr	r3, [r5, #0]
   136a4:	b29b      	uxth	r3, r3
   136a6:	2b01      	cmp	r3, #1
   136a8:	d105      	bne.n	136b6 <logobj_event_handler+0x7a>
   136aa:	682b      	ldr	r3, [r5, #0]
   136ac:	0c1b      	lsrs	r3, r3, #16
   136ae:	041b      	lsls	r3, r3, #16
   136b0:	f043 0302 	orr.w	r3, r3, #2
   136b4:	602b      	str	r3, [r5, #0]
   136b6:	4b1e      	ldr	r3, [pc, #120]	; (13730 <logobj_event_handler+0xf4>)
   136b8:	781a      	ldrb	r2, [r3, #0]
   136ba:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   136be:	2a00      	cmp	r2, #0
   136c0:	d031      	beq.n	13726 <logobj_event_handler+0xea>
   136c2:	4a1c      	ldr	r2, [pc, #112]	; (13734 <logobj_event_handler+0xf8>)
   136c4:	7811      	ldrb	r1, [r2, #0]
   136c6:	b909      	cbnz	r1, 136cc <logobj_event_handler+0x90>
   136c8:	2101      	movs	r1, #1
   136ca:	7011      	strb	r1, [r2, #0]
   136cc:	2000      	movs	r0, #0
   136ce:	7018      	strb	r0, [r3, #0]
   136d0:	682b      	ldr	r3, [r5, #0]
   136d2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   136d6:	602b      	str	r3, [r5, #0]
   136d8:	682b      	ldr	r3, [r5, #0]
   136da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   136de:	602b      	str	r3, [r5, #0]
   136e0:	e7d2      	b.n	13688 <logobj_event_handler+0x4c>
   136e2:	6800      	ldr	r0, [r0, #0]
   136e4:	2800      	cmp	r0, #0
   136e6:	d0cf      	beq.n	13688 <logobj_event_handler+0x4c>
   136e8:	f004 fe74 	bl	183d4 <rpc_logobj_client_data_free>
   136ec:	4628      	mov	r0, r5
   136ee:	b005      	add	sp, #20
   136f0:	bd30      	pop	{r4, r5, pc}
   136f2:	2000      	movs	r0, #0
   136f4:	b005      	add	sp, #20
   136f6:	bd30      	pop	{r4, r5, pc}
   136f8:	682b      	ldr	r3, [r5, #0]
   136fa:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
   136fe:	d00b      	beq.n	13718 <logobj_event_handler+0xdc>
   13700:	68c0      	ldr	r0, [r0, #12]
   13702:	2800      	cmp	r0, #0
   13704:	d0e4      	beq.n	136d0 <logobj_event_handler+0x94>
   13706:	230e      	movs	r3, #14
   13708:	2000      	movs	r0, #0
   1370a:	606b      	str	r3, [r5, #4]
   1370c:	b005      	add	sp, #20
   1370e:	bd30      	pop	{r4, r5, pc}
   13710:	68c3      	ldr	r3, [r0, #12]
   13712:	2b01      	cmp	r3, #1
   13714:	d1a5      	bne.n	13662 <logobj_event_handler+0x26>
   13716:	e7f6      	b.n	13706 <logobj_event_handler+0xca>
   13718:	4618      	mov	r0, r3
   1371a:	e7b5      	b.n	13688 <logobj_event_handler+0x4c>
   1371c:	2002      	movs	r0, #2
   1371e:	e7b3      	b.n	13688 <logobj_event_handler+0x4c>
   13720:	230e      	movs	r3, #14
   13722:	606b      	str	r3, [r5, #4]
   13724:	e7b0      	b.n	13688 <logobj_event_handler+0x4c>
   13726:	4a03      	ldr	r2, [pc, #12]	; (13734 <logobj_event_handler+0xf8>)
   13728:	7011      	strb	r1, [r2, #0]
   1372a:	e7cf      	b.n	136cc <logobj_event_handler+0x90>
   1372c:	20020acc 	.word	0x20020acc
   13730:	2002431a 	.word	0x2002431a
   13734:	2002431b 	.word	0x2002431b

00013738 <logobj_interface_init>:
   13738:	2300      	movs	r3, #0
   1373a:	b510      	push	{r4, lr}
   1373c:	4808      	ldr	r0, [pc, #32]	; (13760 <logobj_interface_init+0x28>)
   1373e:	4c09      	ldr	r4, [pc, #36]	; (13764 <logobj_interface_init+0x2c>)
   13740:	4909      	ldr	r1, [pc, #36]	; (13768 <logobj_interface_init+0x30>)
   13742:	4a0a      	ldr	r2, [pc, #40]	; (1376c <logobj_interface_init+0x34>)
   13744:	7023      	strb	r3, [r4, #0]
   13746:	6003      	str	r3, [r0, #0]
   13748:	700b      	strb	r3, [r1, #0]
   1374a:	6013      	str	r3, [r2, #0]
   1374c:	f004 fe06 	bl	1835c <rpc_logobj_client_init>
   13750:	b918      	cbnz	r0, 1375a <logobj_interface_init+0x22>
   13752:	2201      	movs	r2, #1
   13754:	4b06      	ldr	r3, [pc, #24]	; (13770 <logobj_interface_init+0x38>)
   13756:	701a      	strb	r2, [r3, #0]
   13758:	bd10      	pop	{r4, pc}
   1375a:	f04f 30ff 	mov.w	r0, #4294967295
   1375e:	bd10      	pop	{r4, pc}
   13760:	20020acc 	.word	0x20020acc
   13764:	2002431b 	.word	0x2002431b
   13768:	2002431a 	.word	0x2002431a
   1376c:	20020ac8 	.word	0x20020ac8
   13770:	2002431c 	.word	0x2002431c

00013774 <logobj_interface_open>:
   13774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13778:	2400      	movs	r4, #0
   1377a:	4b5b      	ldr	r3, [pc, #364]	; (138e8 <logobj_interface_open+0x174>)
   1377c:	b084      	sub	sp, #16
   1377e:	781b      	ldrb	r3, [r3, #0]
   13780:	9401      	str	r4, [sp, #4]
   13782:	2b00      	cmp	r3, #0
   13784:	f000 809f 	beq.w	138c6 <logobj_interface_open+0x152>
   13788:	2866      	cmp	r0, #102	; 0x66
   1378a:	4680      	mov	r8, r0
   1378c:	f040 808f 	bne.w	138ae <logobj_interface_open+0x13a>
   13790:	2902      	cmp	r1, #2
   13792:	4689      	mov	r9, r1
   13794:	f040 808b 	bne.w	138ae <logobj_interface_open+0x13a>
   13798:	f240 2305 	movw	r3, #517	; 0x205
   1379c:	429a      	cmp	r2, r3
   1379e:	4692      	mov	sl, r2
   137a0:	f040 8085 	bne.w	138ae <logobj_interface_open+0x13a>
   137a4:	4f51      	ldr	r7, [pc, #324]	; (138ec <logobj_interface_open+0x178>)
   137a6:	683d      	ldr	r5, [r7, #0]
   137a8:	2d00      	cmp	r5, #0
   137aa:	f040 8086 	bne.w	138ba <logobj_interface_open+0x146>
   137ae:	4a50      	ldr	r2, [pc, #320]	; (138f0 <logobj_interface_open+0x17c>)
   137b0:	a801      	add	r0, sp, #4
   137b2:	f007 feeb 	bl	1b58c <interface_socket_allocate>
   137b6:	9b01      	ldr	r3, [sp, #4]
   137b8:	4606      	mov	r6, r0
   137ba:	2b00      	cmp	r3, #0
   137bc:	f000 808d 	beq.w	138da <logobj_interface_open+0x166>
   137c0:	4629      	mov	r1, r5
   137c2:	2204      	movs	r2, #4
   137c4:	484b      	ldr	r0, [pc, #300]	; (138f4 <logobj_interface_open+0x180>)
   137c6:	603b      	str	r3, [r7, #0]
   137c8:	f00a ff6e 	bl	1e6a8 <memset>
   137cc:	9c01      	ldr	r4, [sp, #4]
   137ce:	4629      	mov	r1, r5
   137d0:	e9c4 8903 	strd	r8, r9, [r4, #12]
   137d4:	f8c4 a014 	str.w	sl, [r4, #20]
   137d8:	a802      	add	r0, sp, #8
   137da:	f004 fdc5 	bl	18368 <rpc_logobj_client_request_alloc>
   137de:	2800      	cmp	r0, #0
   137e0:	d142      	bne.n	13868 <logobj_interface_open+0xf4>
   137e2:	2201      	movs	r2, #1
   137e4:	2104      	movs	r1, #4
   137e6:	9b02      	ldr	r3, [sp, #8]
   137e8:	4d43      	ldr	r5, [pc, #268]	; (138f8 <logobj_interface_open+0x184>)
   137ea:	7358      	strb	r0, [r3, #13]
   137ec:	7398      	strb	r0, [r3, #14]
   137ee:	73d8      	strb	r0, [r3, #15]
   137f0:	7258      	strb	r0, [r3, #9]
   137f2:	7298      	strb	r0, [r3, #10]
   137f4:	72d8      	strb	r0, [r3, #11]
   137f6:	7219      	strb	r1, [r3, #8]
   137f8:	702a      	strb	r2, [r5, #0]
   137fa:	731a      	strb	r2, [r3, #12]
   137fc:	6822      	ldr	r2, [r4, #0]
   137fe:	4618      	mov	r0, r3
   13800:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   13804:	6022      	str	r2, [r4, #0]
   13806:	f247 0101 	movw	r1, #28673	; 0x7001
   1380a:	f004 fdc5 	bl	18398 <rpc_logobj_client_request_send>
   1380e:	bb68      	cbnz	r0, 1386c <logobj_interface_open+0xf8>
   13810:	6a61      	ldr	r1, [r4, #36]	; 0x24
   13812:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   13816:	2900      	cmp	r1, #0
   13818:	bf08      	it	eq
   1381a:	f04f 31ff 	moveq.w	r1, #4294967295
   1381e:	ab04      	add	r3, sp, #16
   13820:	f843 1d04 	str.w	r1, [r3, #-4]!
   13824:	4630      	mov	r0, r6
   13826:	4611      	mov	r1, r2
   13828:	f007 ff62 	bl	1b6f0 <interface_socket_wait>
   1382c:	4604      	mov	r4, r0
   1382e:	b310      	cbz	r0, 13876 <logobj_interface_open+0x102>
   13830:	9a01      	ldr	r2, [sp, #4]
   13832:	2e00      	cmp	r6, #0
   13834:	6813      	ldr	r3, [r2, #0]
   13836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1383a:	6013      	str	r3, [r2, #0]
   1383c:	9a01      	ldr	r2, [sp, #4]
   1383e:	6813      	ldr	r3, [r2, #0]
   13840:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   13844:	6013      	str	r3, [r2, #0]
   13846:	9a01      	ldr	r2, [sp, #4]
   13848:	6813      	ldr	r3, [r2, #0]
   1384a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   1384e:	6013      	str	r3, [r2, #0]
   13850:	da3f      	bge.n	138d2 <logobj_interface_open+0x15e>
   13852:	2300      	movs	r3, #0
   13854:	4620      	mov	r0, r4
   13856:	603b      	str	r3, [r7, #0]
   13858:	f04f 36ff 	mov.w	r6, #4294967295
   1385c:	f7fd fe34 	bl	114c8 <bsd_os_errno_set>
   13860:	4630      	mov	r0, r6
   13862:	b004      	add	sp, #16
   13864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13868:	240c      	movs	r4, #12
   1386a:	e7e1      	b.n	13830 <logobj_interface_open+0xbc>
   1386c:	9802      	ldr	r0, [sp, #8]
   1386e:	f004 fda9 	bl	183c4 <rpc_logobj_client_message_free>
   13872:	2405      	movs	r4, #5
   13874:	e7dc      	b.n	13830 <logobj_interface_open+0xbc>
   13876:	4630      	mov	r0, r6
   13878:	f007 ffae 	bl	1b7d8 <interface_socket_from_handle_get>
   1387c:	b120      	cbz	r0, 13888 <logobj_interface_open+0x114>
   1387e:	6844      	ldr	r4, [r0, #4]
   13880:	b114      	cbz	r4, 13888 <logobj_interface_open+0x114>
   13882:	2300      	movs	r3, #0
   13884:	6043      	str	r3, [r0, #4]
   13886:	e7d3      	b.n	13830 <logobj_interface_open+0xbc>
   13888:	4630      	mov	r0, r6
   1388a:	9a01      	ldr	r2, [sp, #4]
   1388c:	6813      	ldr	r3, [r2, #0]
   1388e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   13892:	6013      	str	r3, [r2, #0]
   13894:	9a01      	ldr	r2, [sp, #4]
   13896:	6813      	ldr	r3, [r2, #0]
   13898:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1389c:	6013      	str	r3, [r2, #0]
   1389e:	9a01      	ldr	r2, [sp, #4]
   138a0:	6813      	ldr	r3, [r2, #0]
   138a2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   138a6:	6013      	str	r3, [r2, #0]
   138a8:	b004      	add	sp, #16
   138aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   138ae:	2016      	movs	r0, #22
   138b0:	f7fd fe0a 	bl	114c8 <bsd_os_errno_set>
   138b4:	f04f 36ff 	mov.w	r6, #4294967295
   138b8:	e7d2      	b.n	13860 <logobj_interface_open+0xec>
   138ba:	2001      	movs	r0, #1
   138bc:	f7fd fe04 	bl	114c8 <bsd_os_errno_set>
   138c0:	f04f 36ff 	mov.w	r6, #4294967295
   138c4:	e7cc      	b.n	13860 <logobj_interface_open+0xec>
   138c6:	2070      	movs	r0, #112	; 0x70
   138c8:	f7fd fdfe 	bl	114c8 <bsd_os_errno_set>
   138cc:	f04f 36ff 	mov.w	r6, #4294967295
   138d0:	e7c6      	b.n	13860 <logobj_interface_open+0xec>
   138d2:	4630      	mov	r0, r6
   138d4:	f007 febe 	bl	1b654 <interface_socket_free>
   138d8:	e7bb      	b.n	13852 <logobj_interface_open+0xde>
   138da:	2018      	movs	r0, #24
   138dc:	f7fd fdf4 	bl	114c8 <bsd_os_errno_set>
   138e0:	f04f 36ff 	mov.w	r6, #4294967295
   138e4:	e7bc      	b.n	13860 <logobj_interface_open+0xec>
   138e6:	bf00      	nop
   138e8:	2002431c 	.word	0x2002431c
   138ec:	20020acc 	.word	0x20020acc
   138f0:	00013625 	.word	0x00013625
   138f4:	20020ac8 	.word	0x20020ac8
   138f8:	2002431a 	.word	0x2002431a

000138fc <logobj_interface_read>:
   138fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13900:	b087      	sub	sp, #28
   13902:	2900      	cmp	r1, #0
   13904:	d06b      	beq.n	139de <logobj_interface_read+0xe2>
   13906:	2a00      	cmp	r2, #0
   13908:	4617      	mov	r7, r2
   1390a:	dd68      	ble.n	139de <logobj_interface_read+0xe2>
   1390c:	461d      	mov	r5, r3
   1390e:	4680      	mov	r8, r0
   13910:	460e      	mov	r6, r1
   13912:	f007 ff61 	bl	1b7d8 <interface_socket_from_handle_get>
   13916:	4604      	mov	r4, r0
   13918:	2800      	cmp	r0, #0
   1391a:	d066      	beq.n	139ea <logobj_interface_read+0xee>
   1391c:	bb4d      	cbnz	r5, 13972 <logobj_interface_read+0x76>
   1391e:	69e0      	ldr	r0, [r4, #28]
   13920:	07aa      	lsls	r2, r5, #30
   13922:	6803      	ldr	r3, [r0, #0]
   13924:	68db      	ldr	r3, [r3, #12]
   13926:	d52d      	bpl.n	13984 <logobj_interface_read+0x88>
   13928:	4798      	blx	r3
   1392a:	3001      	adds	r0, #1
   1392c:	d047      	beq.n	139be <logobj_interface_read+0xc2>
   1392e:	6823      	ldr	r3, [r4, #0]
   13930:	69e0      	ldr	r0, [r4, #28]
   13932:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
   13936:	d044      	beq.n	139c2 <logobj_interface_read+0xc6>
   13938:	2100      	movs	r1, #0
   1393a:	6823      	ldr	r3, [r4, #0]
   1393c:	462a      	mov	r2, r5
   1393e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   13942:	6023      	str	r3, [r4, #0]
   13944:	e9cd 1104 	strd	r1, r1, [sp, #16]
   13948:	e9cd 6702 	strd	r6, r7, [sp, #8]
   1394c:	6803      	ldr	r3, [r0, #0]
   1394e:	a902      	add	r1, sp, #8
   13950:	689b      	ldr	r3, [r3, #8]
   13952:	4798      	blx	r3
   13954:	4605      	mov	r5, r0
   13956:	69e0      	ldr	r0, [r4, #28]
   13958:	6803      	ldr	r3, [r0, #0]
   1395a:	68db      	ldr	r3, [r3, #12]
   1395c:	4798      	blx	r3
   1395e:	3001      	adds	r0, #1
   13960:	d003      	beq.n	1396a <logobj_interface_read+0x6e>
   13962:	6823      	ldr	r3, [r4, #0]
   13964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   13968:	6023      	str	r3, [r4, #0]
   1396a:	4628      	mov	r0, r5
   1396c:	b007      	add	sp, #28
   1396e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13972:	f015 0f2a 	tst.w	r5, #42	; 0x2a
   13976:	d1d2      	bne.n	1391e <logobj_interface_read+0x22>
   13978:	202d      	movs	r0, #45	; 0x2d
   1397a:	f7fd fda5 	bl	114c8 <bsd_os_errno_set>
   1397e:	f04f 35ff 	mov.w	r5, #4294967295
   13982:	e7f2      	b.n	1396a <logobj_interface_read+0x6e>
   13984:	6822      	ldr	r2, [r4, #0]
   13986:	f012 5980 	ands.w	r9, r2, #268435456	; 0x10000000
   1398a:	d1cd      	bne.n	13928 <logobj_interface_read+0x2c>
   1398c:	4798      	blx	r3
   1398e:	1c43      	adds	r3, r0, #1
   13990:	d1cd      	bne.n	1392e <logobj_interface_read+0x32>
   13992:	6a22      	ldr	r2, [r4, #32]
   13994:	ab06      	add	r3, sp, #24
   13996:	2a00      	cmp	r2, #0
   13998:	bf18      	it	ne
   1399a:	4610      	movne	r0, r2
   1399c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   139a0:	f843 0d14 	str.w	r0, [r3, #-20]!
   139a4:	4611      	mov	r1, r2
   139a6:	4640      	mov	r0, r8
   139a8:	f007 fea2 	bl	1b6f0 <interface_socket_wait>
   139ac:	b158      	cbz	r0, 139c6 <logobj_interface_read+0xca>
   139ae:	f04f 35ff 	mov.w	r5, #4294967295
   139b2:	f7fd fd89 	bl	114c8 <bsd_os_errno_set>
   139b6:	4628      	mov	r0, r5
   139b8:	b007      	add	sp, #28
   139ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   139be:	2023      	movs	r0, #35	; 0x23
   139c0:	e7f5      	b.n	139ae <logobj_interface_read+0xb2>
   139c2:	461d      	mov	r5, r3
   139c4:	e7c8      	b.n	13958 <logobj_interface_read+0x5c>
   139c6:	4640      	mov	r0, r8
   139c8:	f007 ff06 	bl	1b7d8 <interface_socket_from_handle_get>
   139cc:	4603      	mov	r3, r0
   139ce:	2800      	cmp	r0, #0
   139d0:	d0ad      	beq.n	1392e <logobj_interface_read+0x32>
   139d2:	6840      	ldr	r0, [r0, #4]
   139d4:	2800      	cmp	r0, #0
   139d6:	d0aa      	beq.n	1392e <logobj_interface_read+0x32>
   139d8:	f8c3 9004 	str.w	r9, [r3, #4]
   139dc:	e7e7      	b.n	139ae <logobj_interface_read+0xb2>
   139de:	2016      	movs	r0, #22
   139e0:	f7fd fd72 	bl	114c8 <bsd_os_errno_set>
   139e4:	f04f 35ff 	mov.w	r5, #4294967295
   139e8:	e7bf      	b.n	1396a <logobj_interface_read+0x6e>
   139ea:	2009      	movs	r0, #9
   139ec:	f7fd fd6c 	bl	114c8 <bsd_os_errno_set>
   139f0:	f04f 35ff 	mov.w	r5, #4294967295
   139f4:	e7b9      	b.n	1396a <logobj_interface_read+0x6e>
   139f6:	bf00      	nop

000139f8 <logobj_interface_write>:
   139f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   139fc:	b082      	sub	sp, #8
   139fe:	2900      	cmp	r1, #0
   13a00:	d06b      	beq.n	13ada <logobj_interface_write+0xe2>
   13a02:	2a04      	cmp	r2, #4
   13a04:	d169      	bne.n	13ada <logobj_interface_write+0xe2>
   13a06:	461f      	mov	r7, r3
   13a08:	4606      	mov	r6, r0
   13a0a:	460d      	mov	r5, r1
   13a0c:	f007 fee4 	bl	1b7d8 <interface_socket_from_handle_get>
   13a10:	4604      	mov	r4, r0
   13a12:	2800      	cmp	r0, #0
   13a14:	d074      	beq.n	13b00 <logobj_interface_write+0x108>
   13a16:	b1e7      	cbz	r7, 13a52 <logobj_interface_write+0x5a>
   13a18:	07b8      	lsls	r0, r7, #30
   13a1a:	d56b      	bpl.n	13af4 <logobj_interface_write+0xfc>
   13a1c:	6823      	ldr	r3, [r4, #0]
   13a1e:	039b      	lsls	r3, r3, #14
   13a20:	d564      	bpl.n	13aec <logobj_interface_write+0xf4>
   13a22:	2700      	movs	r7, #0
   13a24:	6823      	ldr	r3, [r4, #0]
   13a26:	2100      	movs	r1, #0
   13a28:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   13a2c:	6023      	str	r3, [r4, #0]
   13a2e:	4668      	mov	r0, sp
   13a30:	f8d5 8000 	ldr.w	r8, [r5]
   13a34:	f004 fc98 	bl	18368 <rpc_logobj_client_request_alloc>
   13a38:	b198      	cbz	r0, 13a62 <logobj_interface_write+0x6a>
   13a3a:	200c      	movs	r0, #12
   13a3c:	6823      	ldr	r3, [r4, #0]
   13a3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   13a42:	6023      	str	r3, [r4, #0]
   13a44:	f7fd fd40 	bl	114c8 <bsd_os_errno_set>
   13a48:	f04f 30ff 	mov.w	r0, #4294967295
   13a4c:	b002      	add	sp, #8
   13a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13a52:	6803      	ldr	r3, [r0, #0]
   13a54:	00d9      	lsls	r1, r3, #3
   13a56:	d4e1      	bmi.n	13a1c <logobj_interface_write+0x24>
   13a58:	6803      	ldr	r3, [r0, #0]
   13a5a:	039a      	lsls	r2, r3, #14
   13a5c:	d548      	bpl.n	13af0 <logobj_interface_write+0xf8>
   13a5e:	2701      	movs	r7, #1
   13a60:	e7e0      	b.n	13a24 <logobj_interface_write+0x2c>
   13a62:	2504      	movs	r5, #4
   13a64:	9b00      	ldr	r3, [sp, #0]
   13a66:	f247 0103 	movw	r1, #28675	; 0x7003
   13a6a:	f8c3 800c 	str.w	r8, [r3, #12]
   13a6e:	7258      	strb	r0, [r3, #9]
   13a70:	7298      	strb	r0, [r3, #10]
   13a72:	72d8      	strb	r0, [r3, #11]
   13a74:	721d      	strb	r5, [r3, #8]
   13a76:	4618      	mov	r0, r3
   13a78:	f004 fc8e 	bl	18398 <rpc_logobj_client_request_send>
   13a7c:	4680      	mov	r8, r0
   13a7e:	bb18      	cbnz	r0, 13ac8 <logobj_interface_write+0xd0>
   13a80:	b1d7      	cbz	r7, 13ab8 <logobj_interface_write+0xc0>
   13a82:	6a61      	ldr	r1, [r4, #36]	; 0x24
   13a84:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   13a88:	2900      	cmp	r1, #0
   13a8a:	bf08      	it	eq
   13a8c:	f04f 31ff 	moveq.w	r1, #4294967295
   13a90:	ab02      	add	r3, sp, #8
   13a92:	f843 1d04 	str.w	r1, [r3, #-4]!
   13a96:	4630      	mov	r0, r6
   13a98:	4611      	mov	r1, r2
   13a9a:	f007 fe29 	bl	1b6f0 <interface_socket_wait>
   13a9e:	b120      	cbz	r0, 13aaa <logobj_interface_write+0xb2>
   13aa0:	6823      	ldr	r3, [r4, #0]
   13aa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   13aa6:	6023      	str	r3, [r4, #0]
   13aa8:	e7cc      	b.n	13a44 <logobj_interface_write+0x4c>
   13aaa:	4630      	mov	r0, r6
   13aac:	f007 fe94 	bl	1b7d8 <interface_socket_from_handle_get>
   13ab0:	4603      	mov	r3, r0
   13ab2:	b108      	cbz	r0, 13ab8 <logobj_interface_write+0xc0>
   13ab4:	6840      	ldr	r0, [r0, #4]
   13ab6:	b9b0      	cbnz	r0, 13ae6 <logobj_interface_write+0xee>
   13ab8:	4628      	mov	r0, r5
   13aba:	6823      	ldr	r3, [r4, #0]
   13abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   13ac0:	6023      	str	r3, [r4, #0]
   13ac2:	b002      	add	sp, #8
   13ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13ac8:	9800      	ldr	r0, [sp, #0]
   13aca:	f004 fc7b 	bl	183c4 <rpc_logobj_client_message_free>
   13ace:	6823      	ldr	r3, [r4, #0]
   13ad0:	2005      	movs	r0, #5
   13ad2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   13ad6:	6023      	str	r3, [r4, #0]
   13ad8:	e7b4      	b.n	13a44 <logobj_interface_write+0x4c>
   13ada:	2016      	movs	r0, #22
   13adc:	f7fd fcf4 	bl	114c8 <bsd_os_errno_set>
   13ae0:	f04f 30ff 	mov.w	r0, #4294967295
   13ae4:	e7b2      	b.n	13a4c <logobj_interface_write+0x54>
   13ae6:	f8c3 8004 	str.w	r8, [r3, #4]
   13aea:	e7d9      	b.n	13aa0 <logobj_interface_write+0xa8>
   13aec:	2073      	movs	r0, #115	; 0x73
   13aee:	e7a9      	b.n	13a44 <logobj_interface_write+0x4c>
   13af0:	2009      	movs	r0, #9
   13af2:	e7a7      	b.n	13a44 <logobj_interface_write+0x4c>
   13af4:	202d      	movs	r0, #45	; 0x2d
   13af6:	f7fd fce7 	bl	114c8 <bsd_os_errno_set>
   13afa:	f04f 30ff 	mov.w	r0, #4294967295
   13afe:	e7a5      	b.n	13a4c <logobj_interface_write+0x54>
   13b00:	2009      	movs	r0, #9
   13b02:	f7fd fce1 	bl	114c8 <bsd_os_errno_set>
   13b06:	f04f 30ff 	mov.w	r0, #4294967295
   13b0a:	e79f      	b.n	13a4c <logobj_interface_write+0x54>

00013b0c <logobj_interface_setopt>:
   13b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   13b0e:	2901      	cmp	r1, #1
   13b10:	b085      	sub	sp, #20
   13b12:	d06d      	beq.n	13bf0 <logobj_interface_setopt+0xe4>
   13b14:	461e      	mov	r6, r3
   13b16:	f240 2305 	movw	r3, #517	; 0x205
   13b1a:	4299      	cmp	r1, r3
   13b1c:	f040 80a0 	bne.w	13c60 <logobj_interface_setopt+0x154>
   13b20:	4607      	mov	r7, r0
   13b22:	4615      	mov	r5, r2
   13b24:	f007 fe58 	bl	1b7d8 <interface_socket_from_handle_get>
   13b28:	4604      	mov	r4, r0
   13b2a:	2800      	cmp	r0, #0
   13b2c:	f000 80c3 	beq.w	13cb6 <logobj_interface_setopt+0x1aa>
   13b30:	2d01      	cmp	r5, #1
   13b32:	d019      	beq.n	13b68 <logobj_interface_setopt+0x5c>
   13b34:	2d02      	cmp	r5, #2
   13b36:	d010      	beq.n	13b5a <logobj_interface_setopt+0x4e>
   13b38:	252a      	movs	r5, #42	; 0x2a
   13b3a:	6803      	ldr	r3, [r0, #0]
   13b3c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   13b40:	6023      	str	r3, [r4, #0]
   13b42:	6823      	ldr	r3, [r4, #0]
   13b44:	4628      	mov	r0, r5
   13b46:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   13b4a:	6023      	str	r3, [r4, #0]
   13b4c:	f7fd fcbc 	bl	114c8 <bsd_os_errno_set>
   13b50:	f04f 35ff 	mov.w	r5, #4294967295
   13b54:	4628      	mov	r0, r5
   13b56:	b005      	add	sp, #20
   13b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13b5a:	b116      	cbz	r6, 13b62 <logobj_interface_setopt+0x56>
   13b5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13b5e:	2b01      	cmp	r3, #1
   13b60:	d04e      	beq.n	13c00 <logobj_interface_setopt+0xf4>
   13b62:	6823      	ldr	r3, [r4, #0]
   13b64:	2516      	movs	r5, #22
   13b66:	e7e9      	b.n	13b3c <logobj_interface_setopt+0x30>
   13b68:	2e00      	cmp	r6, #0
   13b6a:	d0fa      	beq.n	13b62 <logobj_interface_setopt+0x56>
   13b6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13b6e:	2b04      	cmp	r3, #4
   13b70:	d1f7      	bne.n	13b62 <logobj_interface_setopt+0x56>
   13b72:	2100      	movs	r1, #0
   13b74:	a803      	add	r0, sp, #12
   13b76:	f004 fbf7 	bl	18368 <rpc_logobj_client_request_alloc>
   13b7a:	4605      	mov	r5, r0
   13b7c:	2800      	cmp	r0, #0
   13b7e:	d175      	bne.n	13c6c <logobj_interface_setopt+0x160>
   13b80:	9803      	ldr	r0, [sp, #12]
   13b82:	2208      	movs	r2, #8
   13b84:	4629      	mov	r1, r5
   13b86:	300c      	adds	r0, #12
   13b88:	f00a fd8e 	bl	1e6a8 <memset>
   13b8c:	9803      	ldr	r0, [sp, #12]
   13b8e:	4631      	mov	r1, r6
   13b90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   13b92:	300c      	adds	r0, #12
   13b94:	f00a fd5d 	bl	1e652 <memcpy>
   13b98:	2308      	movs	r3, #8
   13b9a:	9803      	ldr	r0, [sp, #12]
   13b9c:	f247 0102 	movw	r1, #28674	; 0x7002
   13ba0:	7203      	strb	r3, [r0, #8]
   13ba2:	7245      	strb	r5, [r0, #9]
   13ba4:	7285      	strb	r5, [r0, #10]
   13ba6:	72c5      	strb	r5, [r0, #11]
   13ba8:	6823      	ldr	r3, [r4, #0]
   13baa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   13bae:	6023      	str	r3, [r4, #0]
   13bb0:	f004 fbf2 	bl	18398 <rpc_logobj_client_request_send>
   13bb4:	2800      	cmp	r0, #0
   13bb6:	d178      	bne.n	13caa <logobj_interface_setopt+0x19e>
   13bb8:	6a61      	ldr	r1, [r4, #36]	; 0x24
   13bba:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   13bbe:	2900      	cmp	r1, #0
   13bc0:	bf08      	it	eq
   13bc2:	f04f 31ff 	moveq.w	r1, #4294967295
   13bc6:	ab04      	add	r3, sp, #16
   13bc8:	f843 1d08 	str.w	r1, [r3, #-8]!
   13bcc:	4638      	mov	r0, r7
   13bce:	4611      	mov	r1, r2
   13bd0:	f007 fd8e 	bl	1b6f0 <interface_socket_wait>
   13bd4:	4605      	mov	r5, r0
   13bd6:	2800      	cmp	r0, #0
   13bd8:	d140      	bne.n	13c5c <logobj_interface_setopt+0x150>
   13bda:	4638      	mov	r0, r7
   13bdc:	f007 fdfc 	bl	1b7d8 <interface_socket_from_handle_get>
   13be0:	2800      	cmp	r0, #0
   13be2:	d04e      	beq.n	13c82 <logobj_interface_setopt+0x176>
   13be4:	6843      	ldr	r3, [r0, #4]
   13be6:	2b00      	cmp	r3, #0
   13be8:	d04b      	beq.n	13c82 <logobj_interface_setopt+0x176>
   13bea:	6045      	str	r5, [r0, #4]
   13bec:	461d      	mov	r5, r3
   13bee:	e035      	b.n	13c5c <logobj_interface_setopt+0x150>
   13bf0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   13bf2:	9400      	str	r4, [sp, #0]
   13bf4:	f007 fe18 	bl	1b828 <interface_socket_setopt>
   13bf8:	4605      	mov	r5, r0
   13bfa:	4628      	mov	r0, r5
   13bfc:	b005      	add	sp, #20
   13bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13c00:	2100      	movs	r1, #0
   13c02:	a802      	add	r0, sp, #8
   13c04:	7835      	ldrb	r5, [r6, #0]
   13c06:	f004 fbaf 	bl	18368 <rpc_logobj_client_request_alloc>
   13c0a:	bb78      	cbnz	r0, 13c6c <logobj_interface_setopt+0x160>
   13c0c:	2d01      	cmp	r5, #1
   13c0e:	bf08      	it	eq
   13c10:	4b2c      	ldreq	r3, [pc, #176]	; (13cc4 <logobj_interface_setopt+0x1b8>)
   13c12:	f04f 0204 	mov.w	r2, #4
   13c16:	bf08      	it	eq
   13c18:	701d      	strbeq	r5, [r3, #0]
   13c1a:	2300      	movs	r3, #0
   13c1c:	9802      	ldr	r0, [sp, #8]
   13c1e:	f247 0101 	movw	r1, #28673	; 0x7001
   13c22:	7243      	strb	r3, [r0, #9]
   13c24:	60c5      	str	r5, [r0, #12]
   13c26:	7283      	strb	r3, [r0, #10]
   13c28:	72c3      	strb	r3, [r0, #11]
   13c2a:	7202      	strb	r2, [r0, #8]
   13c2c:	6823      	ldr	r3, [r4, #0]
   13c2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   13c32:	6023      	str	r3, [r4, #0]
   13c34:	f004 fbb0 	bl	18398 <rpc_logobj_client_request_send>
   13c38:	4606      	mov	r6, r0
   13c3a:	bb80      	cbnz	r0, 13c9e <logobj_interface_setopt+0x192>
   13c3c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   13c3e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   13c42:	2900      	cmp	r1, #0
   13c44:	bf08      	it	eq
   13c46:	f04f 31ff 	moveq.w	r1, #4294967295
   13c4a:	ab04      	add	r3, sp, #16
   13c4c:	f843 1d04 	str.w	r1, [r3, #-4]!
   13c50:	4638      	mov	r0, r7
   13c52:	4611      	mov	r1, r2
   13c54:	f007 fd4c 	bl	1b6f0 <interface_socket_wait>
   13c58:	4605      	mov	r5, r0
   13c5a:	b150      	cbz	r0, 13c72 <logobj_interface_setopt+0x166>
   13c5c:	6823      	ldr	r3, [r4, #0]
   13c5e:	e76d      	b.n	13b3c <logobj_interface_setopt+0x30>
   13c60:	202a      	movs	r0, #42	; 0x2a
   13c62:	f7fd fc31 	bl	114c8 <bsd_os_errno_set>
   13c66:	f04f 35ff 	mov.w	r5, #4294967295
   13c6a:	e773      	b.n	13b54 <logobj_interface_setopt+0x48>
   13c6c:	6823      	ldr	r3, [r4, #0]
   13c6e:	250c      	movs	r5, #12
   13c70:	e764      	b.n	13b3c <logobj_interface_setopt+0x30>
   13c72:	4638      	mov	r0, r7
   13c74:	f007 fdb0 	bl	1b7d8 <interface_socket_from_handle_get>
   13c78:	b140      	cbz	r0, 13c8c <logobj_interface_setopt+0x180>
   13c7a:	6845      	ldr	r5, [r0, #4]
   13c7c:	b135      	cbz	r5, 13c8c <logobj_interface_setopt+0x180>
   13c7e:	6046      	str	r6, [r0, #4]
   13c80:	e7ec      	b.n	13c5c <logobj_interface_setopt+0x150>
   13c82:	4631      	mov	r1, r6
   13c84:	2204      	movs	r2, #4
   13c86:	4810      	ldr	r0, [pc, #64]	; (13cc8 <logobj_interface_setopt+0x1bc>)
   13c88:	f00a fce3 	bl	1e652 <memcpy>
   13c8c:	6823      	ldr	r3, [r4, #0]
   13c8e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   13c92:	6023      	str	r3, [r4, #0]
   13c94:	6823      	ldr	r3, [r4, #0]
   13c96:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   13c9a:	6023      	str	r3, [r4, #0]
   13c9c:	e75a      	b.n	13b54 <logobj_interface_setopt+0x48>
   13c9e:	9802      	ldr	r0, [sp, #8]
   13ca0:	f004 fb90 	bl	183c4 <rpc_logobj_client_message_free>
   13ca4:	2505      	movs	r5, #5
   13ca6:	6823      	ldr	r3, [r4, #0]
   13ca8:	e748      	b.n	13b3c <logobj_interface_setopt+0x30>
   13caa:	9803      	ldr	r0, [sp, #12]
   13cac:	f004 fb8a 	bl	183c4 <rpc_logobj_client_message_free>
   13cb0:	2505      	movs	r5, #5
   13cb2:	6823      	ldr	r3, [r4, #0]
   13cb4:	e742      	b.n	13b3c <logobj_interface_setopt+0x30>
   13cb6:	2009      	movs	r0, #9
   13cb8:	f7fd fc06 	bl	114c8 <bsd_os_errno_set>
   13cbc:	f04f 35ff 	mov.w	r5, #4294967295
   13cc0:	e748      	b.n	13b54 <logobj_interface_setopt+0x48>
   13cc2:	bf00      	nop
   13cc4:	2002431a 	.word	0x2002431a
   13cc8:	20020ac8 	.word	0x20020ac8

00013ccc <logobj_interface_getopt>:
   13ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
   13cce:	2901      	cmp	r1, #1
   13cd0:	b083      	sub	sp, #12
   13cd2:	9e08      	ldr	r6, [sp, #32]
   13cd4:	d030      	beq.n	13d38 <logobj_interface_getopt+0x6c>
   13cd6:	461f      	mov	r7, r3
   13cd8:	f240 2305 	movw	r3, #517	; 0x205
   13cdc:	4299      	cmp	r1, r3
   13cde:	d134      	bne.n	13d4a <logobj_interface_getopt+0x7e>
   13ce0:	4615      	mov	r5, r2
   13ce2:	f007 fd79 	bl	1b7d8 <interface_socket_from_handle_get>
   13ce6:	2800      	cmp	r0, #0
   13ce8:	d037      	beq.n	13d5a <logobj_interface_getopt+0x8e>
   13cea:	2d01      	cmp	r5, #1
   13cec:	d015      	beq.n	13d1a <logobj_interface_getopt+0x4e>
   13cee:	2d02      	cmp	r5, #2
   13cf0:	d10b      	bne.n	13d0a <logobj_interface_getopt+0x3e>
   13cf2:	b387      	cbz	r7, 13d56 <logobj_interface_getopt+0x8a>
   13cf4:	6833      	ldr	r3, [r6, #0]
   13cf6:	b373      	cbz	r3, 13d56 <logobj_interface_getopt+0x8a>
   13cf8:	2300      	movs	r3, #0
   13cfa:	2201      	movs	r2, #1
   13cfc:	4618      	mov	r0, r3
   13cfe:	491a      	ldr	r1, [pc, #104]	; (13d68 <logobj_interface_getopt+0x9c>)
   13d00:	7809      	ldrb	r1, [r1, #0]
   13d02:	7039      	strb	r1, [r7, #0]
   13d04:	6032      	str	r2, [r6, #0]
   13d06:	b003      	add	sp, #12
   13d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13d0a:	2009      	movs	r0, #9
   13d0c:	f7fd fbdc 	bl	114c8 <bsd_os_errno_set>
   13d10:	f04f 33ff 	mov.w	r3, #4294967295
   13d14:	4618      	mov	r0, r3
   13d16:	b003      	add	sp, #12
   13d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13d1a:	b1e7      	cbz	r7, 13d56 <logobj_interface_getopt+0x8a>
   13d1c:	6833      	ldr	r3, [r6, #0]
   13d1e:	2b03      	cmp	r3, #3
   13d20:	d919      	bls.n	13d56 <logobj_interface_getopt+0x8a>
   13d22:	4638      	mov	r0, r7
   13d24:	2204      	movs	r2, #4
   13d26:	4911      	ldr	r1, [pc, #68]	; (13d6c <logobj_interface_getopt+0xa0>)
   13d28:	f00a fc93 	bl	1e652 <memcpy>
   13d2c:	2300      	movs	r3, #0
   13d2e:	2204      	movs	r2, #4
   13d30:	4618      	mov	r0, r3
   13d32:	6032      	str	r2, [r6, #0]
   13d34:	b003      	add	sp, #12
   13d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13d38:	9600      	str	r6, [sp, #0]
   13d3a:	f007 fdbb 	bl	1b8b4 <interface_socket_getopt>
   13d3e:	4603      	mov	r3, r0
   13d40:	2800      	cmp	r0, #0
   13d42:	d1e3      	bne.n	13d0c <logobj_interface_getopt+0x40>
   13d44:	4618      	mov	r0, r3
   13d46:	b003      	add	sp, #12
   13d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13d4a:	202a      	movs	r0, #42	; 0x2a
   13d4c:	f7fd fbbc 	bl	114c8 <bsd_os_errno_set>
   13d50:	f04f 33ff 	mov.w	r3, #4294967295
   13d54:	e7de      	b.n	13d14 <logobj_interface_getopt+0x48>
   13d56:	2016      	movs	r0, #22
   13d58:	e7d8      	b.n	13d0c <logobj_interface_getopt+0x40>
   13d5a:	2009      	movs	r0, #9
   13d5c:	f7fd fbb4 	bl	114c8 <bsd_os_errno_set>
   13d60:	f04f 33ff 	mov.w	r3, #4294967295
   13d64:	e7d6      	b.n	13d14 <logobj_interface_getopt+0x48>
   13d66:	bf00      	nop
   13d68:	2002431b 	.word	0x2002431b
   13d6c:	20020ac8 	.word	0x20020ac8

00013d70 <logobj_interface_close>:
   13d70:	b510      	push	{r4, lr}
   13d72:	4604      	mov	r4, r0
   13d74:	f007 fd30 	bl	1b7d8 <interface_socket_from_handle_get>
   13d78:	b138      	cbz	r0, 13d8a <logobj_interface_close+0x1a>
   13d7a:	4620      	mov	r0, r4
   13d7c:	f007 fc6a 	bl	1b654 <interface_socket_free>
   13d80:	2300      	movs	r3, #0
   13d82:	4a05      	ldr	r2, [pc, #20]	; (13d98 <logobj_interface_close+0x28>)
   13d84:	4618      	mov	r0, r3
   13d86:	6013      	str	r3, [r2, #0]
   13d88:	bd10      	pop	{r4, pc}
   13d8a:	2009      	movs	r0, #9
   13d8c:	f7fd fb9c 	bl	114c8 <bsd_os_errno_set>
   13d90:	f04f 30ff 	mov.w	r0, #4294967295
   13d94:	bd10      	pop	{r4, pc}
   13d96:	bf00      	nop
   13d98:	20020acc 	.word	0x20020acc

00013d9c <rpc_transport_send>:
   13d9c:	f000 bed8 	b.w	14b50 <rpc_transport_ipc_send>

00013da0 <rpc_transport_rpc_alloc>:
   13da0:	f000 bf58 	b.w	14c54 <rpc_transport_ipc_tx_rpc_data_alloc>

00013da4 <rpc_transport_data_alloc>:
   13da4:	f000 bfbe 	b.w	14d24 <rpc_transport_ipc_tx_data_alloc>

00013da8 <rpc_transport_rpc_free>:
   13da8:	f000 bdb6 	b.w	14918 <rpc_transport_ipc_msg_free>

00013dac <rpc_transport_data_free>:
   13dac:	f000 ba64 	b.w	14278 <rpc_transport_ipc_data_free>

00013db0 <ipc_trace_init>:
   13db0:	4b01      	ldr	r3, [pc, #4]	; (13db8 <ipc_trace_init+0x8>)
   13db2:	6018      	str	r0, [r3, #0]
   13db4:	4770      	bx	lr
   13db6:	bf00      	nop
   13db8:	20020adc 	.word	0x20020adc

00013dbc <bsd_os_trace_irq_handler>:
   13dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   13dbe:	4b6e      	ldr	r3, [pc, #440]	; (13f78 <bsd_os_trace_irq_handler+0x1bc>)
   13dc0:	b083      	sub	sp, #12
   13dc2:	781b      	ldrb	r3, [r3, #0]
   13dc4:	2b00      	cmp	r3, #0
   13dc6:	f000 80d3 	beq.w	13f70 <bsd_os_trace_irq_handler+0x1b4>
   13dca:	4b6c      	ldr	r3, [pc, #432]	; (13f7c <bsd_os_trace_irq_handler+0x1c0>)
   13dcc:	681c      	ldr	r4, [r3, #0]
   13dce:	b124      	cbz	r4, 13dda <bsd_os_trace_irq_handler+0x1e>
   13dd0:	68a3      	ldr	r3, [r4, #8]
   13dd2:	6862      	ldr	r2, [r4, #4]
   13dd4:	4293      	cmp	r3, r2
   13dd6:	f040 808c 	bne.w	13ef2 <bsd_os_trace_irq_handler+0x136>
   13dda:	4b69      	ldr	r3, [pc, #420]	; (13f80 <bsd_os_trace_irq_handler+0x1c4>)
   13ddc:	681c      	ldr	r4, [r3, #0]
   13dde:	b11c      	cbz	r4, 13de8 <bsd_os_trace_irq_handler+0x2c>
   13de0:	68a3      	ldr	r3, [r4, #8]
   13de2:	6862      	ldr	r2, [r4, #4]
   13de4:	4293      	cmp	r3, r2
   13de6:	d146      	bne.n	13e76 <bsd_os_trace_irq_handler+0xba>
   13de8:	4b66      	ldr	r3, [pc, #408]	; (13f84 <bsd_os_trace_irq_handler+0x1c8>)
   13dea:	681c      	ldr	r4, [r3, #0]
   13dec:	b11c      	cbz	r4, 13df6 <bsd_os_trace_irq_handler+0x3a>
   13dee:	68a3      	ldr	r3, [r4, #8]
   13df0:	6862      	ldr	r2, [r4, #4]
   13df2:	4293      	cmp	r3, r2
   13df4:	d101      	bne.n	13dfa <bsd_os_trace_irq_handler+0x3e>
   13df6:	b003      	add	sp, #12
   13df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13dfa:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   13dfe:	f8ad 2000 	strh.w	r2, [sp]
   13e02:	7822      	ldrb	r2, [r4, #0]
   13e04:	466e      	mov	r6, sp
   13e06:	f88d 2004 	strb.w	r2, [sp, #4]
   13e0a:	6862      	ldr	r2, [r4, #4]
   13e0c:	2105      	movs	r1, #5
   13e0e:	4293      	cmp	r3, r2
   13e10:	bf2a      	itet	cs
   13e12:	6927      	ldrcs	r7, [r4, #16]
   13e14:	1ad7      	subcc	r7, r2, r3
   13e16:	1aff      	subcs	r7, r7, r3
   13e18:	4293      	cmp	r3, r2
   13e1a:	bf94      	ite	ls
   13e1c:	2500      	movls	r5, #0
   13e1e:	68e5      	ldrhi	r5, [r4, #12]
   13e20:	b2bf      	uxth	r7, r7
   13e22:	bf88      	it	hi
   13e24:	1b52      	subhi	r2, r2, r5
   13e26:	4630      	mov	r0, r6
   13e28:	bf88      	it	hi
   13e2a:	b295      	uxthhi	r5, r2
   13e2c:	f8ad 7002 	strh.w	r7, [sp, #2]
   13e30:	f00b fb42 	bl	1f4b8 <bsd_os_trace_put>
   13e34:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   13e38:	68a0      	ldr	r0, [r4, #8]
   13e3a:	f00b fb3d 	bl	1f4b8 <bsd_os_trace_put>
   13e3e:	68a3      	ldr	r3, [r4, #8]
   13e40:	6922      	ldr	r2, [r4, #16]
   13e42:	441f      	add	r7, r3
   13e44:	4297      	cmp	r7, r2
   13e46:	bf08      	it	eq
   13e48:	68e3      	ldreq	r3, [r4, #12]
   13e4a:	60a7      	str	r7, [r4, #8]
   13e4c:	bf08      	it	eq
   13e4e:	60a3      	streq	r3, [r4, #8]
   13e50:	2d00      	cmp	r5, #0
   13e52:	d0d0      	beq.n	13df6 <bsd_os_trace_irq_handler+0x3a>
   13e54:	2105      	movs	r1, #5
   13e56:	4630      	mov	r0, r6
   13e58:	f8ad 5002 	strh.w	r5, [sp, #2]
   13e5c:	f00b fb2c 	bl	1f4b8 <bsd_os_trace_put>
   13e60:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   13e64:	68e0      	ldr	r0, [r4, #12]
   13e66:	f00b fb27 	bl	1f4b8 <bsd_os_trace_put>
   13e6a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   13e6e:	68e3      	ldr	r3, [r4, #12]
   13e70:	4413      	add	r3, r2
   13e72:	60a3      	str	r3, [r4, #8]
   13e74:	e7bf      	b.n	13df6 <bsd_os_trace_irq_handler+0x3a>
   13e76:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   13e7a:	f8ad 2000 	strh.w	r2, [sp]
   13e7e:	7822      	ldrb	r2, [r4, #0]
   13e80:	466e      	mov	r6, sp
   13e82:	f88d 2004 	strb.w	r2, [sp, #4]
   13e86:	6862      	ldr	r2, [r4, #4]
   13e88:	2105      	movs	r1, #5
   13e8a:	4293      	cmp	r3, r2
   13e8c:	bf2a      	itet	cs
   13e8e:	6927      	ldrcs	r7, [r4, #16]
   13e90:	1ad7      	subcc	r7, r2, r3
   13e92:	1aff      	subcs	r7, r7, r3
   13e94:	4293      	cmp	r3, r2
   13e96:	bf94      	ite	ls
   13e98:	2500      	movls	r5, #0
   13e9a:	68e5      	ldrhi	r5, [r4, #12]
   13e9c:	b2bf      	uxth	r7, r7
   13e9e:	bf88      	it	hi
   13ea0:	1b52      	subhi	r2, r2, r5
   13ea2:	4630      	mov	r0, r6
   13ea4:	bf88      	it	hi
   13ea6:	b295      	uxthhi	r5, r2
   13ea8:	f8ad 7002 	strh.w	r7, [sp, #2]
   13eac:	f00b fb04 	bl	1f4b8 <bsd_os_trace_put>
   13eb0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   13eb4:	68a0      	ldr	r0, [r4, #8]
   13eb6:	f00b faff 	bl	1f4b8 <bsd_os_trace_put>
   13eba:	68a3      	ldr	r3, [r4, #8]
   13ebc:	6922      	ldr	r2, [r4, #16]
   13ebe:	441f      	add	r7, r3
   13ec0:	4297      	cmp	r7, r2
   13ec2:	bf08      	it	eq
   13ec4:	68e3      	ldreq	r3, [r4, #12]
   13ec6:	60a7      	str	r7, [r4, #8]
   13ec8:	bf08      	it	eq
   13eca:	60a3      	streq	r3, [r4, #8]
   13ecc:	2d00      	cmp	r5, #0
   13ece:	d08b      	beq.n	13de8 <bsd_os_trace_irq_handler+0x2c>
   13ed0:	2105      	movs	r1, #5
   13ed2:	4630      	mov	r0, r6
   13ed4:	f8ad 5002 	strh.w	r5, [sp, #2]
   13ed8:	f00b faee 	bl	1f4b8 <bsd_os_trace_put>
   13edc:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   13ee0:	68e0      	ldr	r0, [r4, #12]
   13ee2:	f00b fae9 	bl	1f4b8 <bsd_os_trace_put>
   13ee6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   13eea:	68e3      	ldr	r3, [r4, #12]
   13eec:	4413      	add	r3, r2
   13eee:	60a3      	str	r3, [r4, #8]
   13ef0:	e77a      	b.n	13de8 <bsd_os_trace_irq_handler+0x2c>
   13ef2:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   13ef6:	f8ad 2000 	strh.w	r2, [sp]
   13efa:	7822      	ldrb	r2, [r4, #0]
   13efc:	466e      	mov	r6, sp
   13efe:	f88d 2004 	strb.w	r2, [sp, #4]
   13f02:	6862      	ldr	r2, [r4, #4]
   13f04:	2105      	movs	r1, #5
   13f06:	4293      	cmp	r3, r2
   13f08:	bf2a      	itet	cs
   13f0a:	6927      	ldrcs	r7, [r4, #16]
   13f0c:	1ad7      	subcc	r7, r2, r3
   13f0e:	1aff      	subcs	r7, r7, r3
   13f10:	4293      	cmp	r3, r2
   13f12:	bf94      	ite	ls
   13f14:	2500      	movls	r5, #0
   13f16:	68e5      	ldrhi	r5, [r4, #12]
   13f18:	b2bf      	uxth	r7, r7
   13f1a:	bf88      	it	hi
   13f1c:	1b52      	subhi	r2, r2, r5
   13f1e:	4630      	mov	r0, r6
   13f20:	bf88      	it	hi
   13f22:	b295      	uxthhi	r5, r2
   13f24:	f8ad 7002 	strh.w	r7, [sp, #2]
   13f28:	f00b fac6 	bl	1f4b8 <bsd_os_trace_put>
   13f2c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   13f30:	68a0      	ldr	r0, [r4, #8]
   13f32:	f00b fac1 	bl	1f4b8 <bsd_os_trace_put>
   13f36:	68a3      	ldr	r3, [r4, #8]
   13f38:	6922      	ldr	r2, [r4, #16]
   13f3a:	441f      	add	r7, r3
   13f3c:	4297      	cmp	r7, r2
   13f3e:	bf08      	it	eq
   13f40:	68e3      	ldreq	r3, [r4, #12]
   13f42:	60a7      	str	r7, [r4, #8]
   13f44:	bf08      	it	eq
   13f46:	60a3      	streq	r3, [r4, #8]
   13f48:	2d00      	cmp	r5, #0
   13f4a:	f43f af46 	beq.w	13dda <bsd_os_trace_irq_handler+0x1e>
   13f4e:	2105      	movs	r1, #5
   13f50:	4630      	mov	r0, r6
   13f52:	f8ad 5002 	strh.w	r5, [sp, #2]
   13f56:	f00b faaf 	bl	1f4b8 <bsd_os_trace_put>
   13f5a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   13f5e:	68e0      	ldr	r0, [r4, #12]
   13f60:	f00b faaa 	bl	1f4b8 <bsd_os_trace_put>
   13f64:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   13f68:	68e3      	ldr	r3, [r4, #12]
   13f6a:	4413      	add	r3, r2
   13f6c:	60a3      	str	r3, [r4, #8]
   13f6e:	e734      	b.n	13dda <bsd_os_trace_irq_handler+0x1e>
   13f70:	f7fd fc32 	bl	117d8 <bsd_os_trace_irq_clear>
   13f74:	e729      	b.n	13dca <bsd_os_trace_irq_handler+0xe>
   13f76:	bf00      	nop
   13f78:	2002431d 	.word	0x2002431d
   13f7c:	20020ad8 	.word	0x20020ad8
   13f80:	20020ad0 	.word	0x20020ad0
   13f84:	20020ad4 	.word	0x20020ad4

00013f88 <ipc_trace_handle>:
   13f88:	2200      	movs	r2, #0
   13f8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f8e:	4bb2      	ldr	r3, [pc, #712]	; (14258 <ipc_trace_handle+0x2d0>)
   13f90:	b083      	sub	sp, #12
   13f92:	681b      	ldr	r3, [r3, #0]
   13f94:	6919      	ldr	r1, [r3, #16]
   13f96:	695c      	ldr	r4, [r3, #20]
   13f98:	7c18      	ldrb	r0, [r3, #16]
   13f9a:	741a      	strb	r2, [r3, #16]
   13f9c:	7c58      	ldrb	r0, [r3, #17]
   13f9e:	745a      	strb	r2, [r3, #17]
   13fa0:	7c98      	ldrb	r0, [r3, #18]
   13fa2:	749a      	strb	r2, [r3, #18]
   13fa4:	7cd8      	ldrb	r0, [r3, #19]
   13fa6:	74da      	strb	r2, [r3, #19]
   13fa8:	7d18      	ldrb	r0, [r3, #20]
   13faa:	751a      	strb	r2, [r3, #20]
   13fac:	7d58      	ldrb	r0, [r3, #21]
   13fae:	755a      	strb	r2, [r3, #21]
   13fb0:	7d98      	ldrb	r0, [r3, #22]
   13fb2:	759a      	strb	r2, [r3, #22]
   13fb4:	7dd8      	ldrb	r0, [r3, #23]
   13fb6:	75da      	strb	r2, [r3, #23]
   13fb8:	b1a9      	cbz	r1, 13fe6 <ipc_trace_handle+0x5e>
   13fba:	3901      	subs	r1, #1
   13fbc:	2903      	cmp	r1, #3
   13fbe:	d812      	bhi.n	13fe6 <ipc_trace_handle+0x5e>
   13fc0:	e8df f001 	tbb	[pc, r1]
   13fc4:	1402a97c 	.word	0x1402a97c
   13fc8:	2501      	movs	r5, #1
   13fca:	2003      	movs	r0, #3
   13fcc:	2200      	movs	r2, #0
   13fce:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   13fd2:	4ca2      	ldr	r4, [pc, #648]	; (1425c <ipc_trace_handle+0x2d4>)
   13fd4:	7025      	strb	r5, [r4, #0]
   13fd6:	7a1c      	ldrb	r4, [r3, #8]
   13fd8:	7218      	strb	r0, [r3, #8]
   13fda:	7a58      	ldrb	r0, [r3, #9]
   13fdc:	725a      	strb	r2, [r3, #9]
   13fde:	7a98      	ldrb	r0, [r3, #10]
   13fe0:	729a      	strb	r2, [r3, #10]
   13fe2:	7ada      	ldrb	r2, [r3, #11]
   13fe4:	72d9      	strb	r1, [r3, #11]
   13fe6:	b003      	add	sp, #12
   13fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fec:	2104      	movs	r1, #4
   13fee:	2200      	movs	r2, #0
   13ff0:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   13ff4:	7a1c      	ldrb	r4, [r3, #8]
   13ff6:	7219      	strb	r1, [r3, #8]
   13ff8:	7a59      	ldrb	r1, [r3, #9]
   13ffa:	725a      	strb	r2, [r3, #9]
   13ffc:	4997      	ldr	r1, [pc, #604]	; (1425c <ipc_trace_handle+0x2d4>)
   13ffe:	7a9c      	ldrb	r4, [r3, #10]
   14000:	729a      	strb	r2, [r3, #10]
   14002:	7adc      	ldrb	r4, [r3, #11]
   14004:	72d8      	strb	r0, [r3, #11]
   14006:	700a      	strb	r2, [r1, #0]
   14008:	780b      	ldrb	r3, [r1, #0]
   1400a:	2b00      	cmp	r3, #0
   1400c:	f000 809f 	beq.w	1414e <ipc_trace_handle+0x1c6>
   14010:	4b93      	ldr	r3, [pc, #588]	; (14260 <ipc_trace_handle+0x2d8>)
   14012:	681c      	ldr	r4, [r3, #0]
   14014:	b124      	cbz	r4, 14020 <ipc_trace_handle+0x98>
   14016:	68a3      	ldr	r3, [r4, #8]
   14018:	6862      	ldr	r2, [r4, #4]
   1401a:	4293      	cmp	r3, r2
   1401c:	f040 80d9 	bne.w	141d2 <ipc_trace_handle+0x24a>
   14020:	4b90      	ldr	r3, [pc, #576]	; (14264 <ipc_trace_handle+0x2dc>)
   14022:	681c      	ldr	r4, [r3, #0]
   14024:	b124      	cbz	r4, 14030 <ipc_trace_handle+0xa8>
   14026:	68a3      	ldr	r3, [r4, #8]
   14028:	6862      	ldr	r2, [r4, #4]
   1402a:	4293      	cmp	r3, r2
   1402c:	f040 8092 	bne.w	14154 <ipc_trace_handle+0x1cc>
   14030:	4b8d      	ldr	r3, [pc, #564]	; (14268 <ipc_trace_handle+0x2e0>)
   14032:	681c      	ldr	r4, [r3, #0]
   14034:	2c00      	cmp	r4, #0
   14036:	d0d6      	beq.n	13fe6 <ipc_trace_handle+0x5e>
   14038:	68a3      	ldr	r3, [r4, #8]
   1403a:	6862      	ldr	r2, [r4, #4]
   1403c:	4293      	cmp	r3, r2
   1403e:	d0d2      	beq.n	13fe6 <ipc_trace_handle+0x5e>
   14040:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   14044:	f8ad 2000 	strh.w	r2, [sp]
   14048:	7822      	ldrb	r2, [r4, #0]
   1404a:	466e      	mov	r6, sp
   1404c:	f88d 2004 	strb.w	r2, [sp, #4]
   14050:	6862      	ldr	r2, [r4, #4]
   14052:	2105      	movs	r1, #5
   14054:	4293      	cmp	r3, r2
   14056:	bf2a      	itet	cs
   14058:	6927      	ldrcs	r7, [r4, #16]
   1405a:	1ad7      	subcc	r7, r2, r3
   1405c:	1aff      	subcs	r7, r7, r3
   1405e:	4293      	cmp	r3, r2
   14060:	bf94      	ite	ls
   14062:	2500      	movls	r5, #0
   14064:	68e5      	ldrhi	r5, [r4, #12]
   14066:	b2bf      	uxth	r7, r7
   14068:	bf88      	it	hi
   1406a:	1b52      	subhi	r2, r2, r5
   1406c:	4630      	mov	r0, r6
   1406e:	bf88      	it	hi
   14070:	b295      	uxthhi	r5, r2
   14072:	f8ad 7002 	strh.w	r7, [sp, #2]
   14076:	f00b fa1f 	bl	1f4b8 <bsd_os_trace_put>
   1407a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1407e:	68a0      	ldr	r0, [r4, #8]
   14080:	f00b fa1a 	bl	1f4b8 <bsd_os_trace_put>
   14084:	68a3      	ldr	r3, [r4, #8]
   14086:	6922      	ldr	r2, [r4, #16]
   14088:	441f      	add	r7, r3
   1408a:	4297      	cmp	r7, r2
   1408c:	bf08      	it	eq
   1408e:	68e3      	ldreq	r3, [r4, #12]
   14090:	60a7      	str	r7, [r4, #8]
   14092:	bf08      	it	eq
   14094:	60a3      	streq	r3, [r4, #8]
   14096:	2d00      	cmp	r5, #0
   14098:	d0a5      	beq.n	13fe6 <ipc_trace_handle+0x5e>
   1409a:	2105      	movs	r1, #5
   1409c:	4630      	mov	r0, r6
   1409e:	f8ad 5002 	strh.w	r5, [sp, #2]
   140a2:	f00b fa09 	bl	1f4b8 <bsd_os_trace_put>
   140a6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   140aa:	68e0      	ldr	r0, [r4, #12]
   140ac:	f00b fa04 	bl	1f4b8 <bsd_os_trace_put>
   140b0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   140b4:	68e3      	ldr	r3, [r4, #12]
   140b6:	4413      	add	r3, r2
   140b8:	60a3      	str	r3, [r4, #8]
   140ba:	e794      	b.n	13fe6 <ipc_trace_handle+0x5e>
   140bc:	4a67      	ldr	r2, [pc, #412]	; (1425c <ipc_trace_handle+0x2d4>)
   140be:	7811      	ldrb	r1, [r2, #0]
   140c0:	b109      	cbz	r1, 140c6 <ipc_trace_handle+0x13e>
   140c2:	2100      	movs	r1, #0
   140c4:	7011      	strb	r1, [r2, #0]
   140c6:	68a5      	ldr	r5, [r4, #8]
   140c8:	2d00      	cmp	r5, #0
   140ca:	d03b      	beq.n	14144 <ipc_trace_handle+0x1bc>
   140cc:	f04f 0c00 	mov.w	ip, #0
   140d0:	f8df a190 	ldr.w	sl, [pc, #400]	; 14264 <ipc_trace_handle+0x2dc>
   140d4:	f8df b188 	ldr.w	fp, [pc, #392]	; 14260 <ipc_trace_handle+0x2d8>
   140d8:	4963      	ldr	r1, [pc, #396]	; (14268 <ipc_trace_handle+0x2e0>)
   140da:	46e1      	mov	r9, ip
   140dc:	4666      	mov	r6, ip
   140de:	4662      	mov	r2, ip
   140e0:	f8d1 e000 	ldr.w	lr, [r1]
   140e4:	f8da 8000 	ldr.w	r8, [sl]
   140e8:	f8db 7000 	ldr.w	r7, [fp]
   140ec:	e008      	b.n	14100 <ipc_trace_handle+0x178>
   140ee:	2963      	cmp	r1, #99	; 0x63
   140f0:	d016      	beq.n	14120 <ipc_trace_handle+0x198>
   140f2:	2961      	cmp	r1, #97	; 0x61
   140f4:	bf04      	itt	eq
   140f6:	4607      	moveq	r7, r0
   140f8:	2601      	moveq	r6, #1
   140fa:	3201      	adds	r2, #1
   140fc:	42aa      	cmp	r2, r5
   140fe:	d013      	beq.n	14128 <ipc_trace_handle+0x1a0>
   14100:	1c91      	adds	r1, r2, #2
   14102:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   14106:	6848      	ldr	r0, [r1, #4]
   14108:	7801      	ldrb	r1, [r0, #0]
   1410a:	2962      	cmp	r1, #98	; 0x62
   1410c:	d1ef      	bne.n	140ee <ipc_trace_handle+0x166>
   1410e:	4680      	mov	r8, r0
   14110:	f04f 0901 	mov.w	r9, #1
   14114:	e7f1      	b.n	140fa <ipc_trace_handle+0x172>
   14116:	f7fd fb57 	bl	117c8 <bsd_os_trace_irq_set>
   1411a:	b003      	add	sp, #12
   1411c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14120:	4686      	mov	lr, r0
   14122:	f04f 0c01 	mov.w	ip, #1
   14126:	e7e8      	b.n	140fa <ipc_trace_handle+0x172>
   14128:	2e00      	cmp	r6, #0
   1412a:	f040 8091 	bne.w	14250 <ipc_trace_handle+0x2c8>
   1412e:	f1b9 0f00 	cmp.w	r9, #0
   14132:	d001      	beq.n	14138 <ipc_trace_handle+0x1b0>
   14134:	f8ca 8000 	str.w	r8, [sl]
   14138:	f1bc 0f00 	cmp.w	ip, #0
   1413c:	d002      	beq.n	14144 <ipc_trace_handle+0x1bc>
   1413e:	4a4a      	ldr	r2, [pc, #296]	; (14268 <ipc_trace_handle+0x2e0>)
   14140:	f8c2 e000 	str.w	lr, [r2]
   14144:	2001      	movs	r0, #1
   14146:	2200      	movs	r2, #0
   14148:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   1414c:	e743      	b.n	13fd6 <ipc_trace_handle+0x4e>
   1414e:	f7fd fb43 	bl	117d8 <bsd_os_trace_irq_clear>
   14152:	e75d      	b.n	14010 <ipc_trace_handle+0x88>
   14154:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   14158:	f8ad 2000 	strh.w	r2, [sp]
   1415c:	7822      	ldrb	r2, [r4, #0]
   1415e:	466e      	mov	r6, sp
   14160:	f88d 2004 	strb.w	r2, [sp, #4]
   14164:	6862      	ldr	r2, [r4, #4]
   14166:	2105      	movs	r1, #5
   14168:	4293      	cmp	r3, r2
   1416a:	bf2a      	itet	cs
   1416c:	6927      	ldrcs	r7, [r4, #16]
   1416e:	1ad7      	subcc	r7, r2, r3
   14170:	1aff      	subcs	r7, r7, r3
   14172:	4293      	cmp	r3, r2
   14174:	bf94      	ite	ls
   14176:	2500      	movls	r5, #0
   14178:	68e5      	ldrhi	r5, [r4, #12]
   1417a:	b2bf      	uxth	r7, r7
   1417c:	bf88      	it	hi
   1417e:	1b52      	subhi	r2, r2, r5
   14180:	4630      	mov	r0, r6
   14182:	bf88      	it	hi
   14184:	b295      	uxthhi	r5, r2
   14186:	f8ad 7002 	strh.w	r7, [sp, #2]
   1418a:	f00b f995 	bl	1f4b8 <bsd_os_trace_put>
   1418e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14192:	68a0      	ldr	r0, [r4, #8]
   14194:	f00b f990 	bl	1f4b8 <bsd_os_trace_put>
   14198:	68a3      	ldr	r3, [r4, #8]
   1419a:	6922      	ldr	r2, [r4, #16]
   1419c:	441f      	add	r7, r3
   1419e:	4297      	cmp	r7, r2
   141a0:	bf08      	it	eq
   141a2:	68e3      	ldreq	r3, [r4, #12]
   141a4:	60a7      	str	r7, [r4, #8]
   141a6:	bf08      	it	eq
   141a8:	60a3      	streq	r3, [r4, #8]
   141aa:	2d00      	cmp	r5, #0
   141ac:	f43f af40 	beq.w	14030 <ipc_trace_handle+0xa8>
   141b0:	2105      	movs	r1, #5
   141b2:	4630      	mov	r0, r6
   141b4:	f8ad 5002 	strh.w	r5, [sp, #2]
   141b8:	f00b f97e 	bl	1f4b8 <bsd_os_trace_put>
   141bc:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   141c0:	68e0      	ldr	r0, [r4, #12]
   141c2:	f00b f979 	bl	1f4b8 <bsd_os_trace_put>
   141c6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   141ca:	68e3      	ldr	r3, [r4, #12]
   141cc:	4413      	add	r3, r2
   141ce:	60a3      	str	r3, [r4, #8]
   141d0:	e72e      	b.n	14030 <ipc_trace_handle+0xa8>
   141d2:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   141d6:	f8ad 2000 	strh.w	r2, [sp]
   141da:	7822      	ldrb	r2, [r4, #0]
   141dc:	466e      	mov	r6, sp
   141de:	f88d 2004 	strb.w	r2, [sp, #4]
   141e2:	6862      	ldr	r2, [r4, #4]
   141e4:	2105      	movs	r1, #5
   141e6:	4293      	cmp	r3, r2
   141e8:	bf2a      	itet	cs
   141ea:	6927      	ldrcs	r7, [r4, #16]
   141ec:	1ad7      	subcc	r7, r2, r3
   141ee:	1aff      	subcs	r7, r7, r3
   141f0:	4293      	cmp	r3, r2
   141f2:	bf94      	ite	ls
   141f4:	2500      	movls	r5, #0
   141f6:	68e5      	ldrhi	r5, [r4, #12]
   141f8:	b2bf      	uxth	r7, r7
   141fa:	bf88      	it	hi
   141fc:	1b52      	subhi	r2, r2, r5
   141fe:	4630      	mov	r0, r6
   14200:	bf88      	it	hi
   14202:	b295      	uxthhi	r5, r2
   14204:	f8ad 7002 	strh.w	r7, [sp, #2]
   14208:	f00b f956 	bl	1f4b8 <bsd_os_trace_put>
   1420c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14210:	68a0      	ldr	r0, [r4, #8]
   14212:	f00b f951 	bl	1f4b8 <bsd_os_trace_put>
   14216:	68a3      	ldr	r3, [r4, #8]
   14218:	6922      	ldr	r2, [r4, #16]
   1421a:	441f      	add	r7, r3
   1421c:	4297      	cmp	r7, r2
   1421e:	bf08      	it	eq
   14220:	68e3      	ldreq	r3, [r4, #12]
   14222:	60a7      	str	r7, [r4, #8]
   14224:	bf08      	it	eq
   14226:	60a3      	streq	r3, [r4, #8]
   14228:	2d00      	cmp	r5, #0
   1422a:	f43f aef9 	beq.w	14020 <ipc_trace_handle+0x98>
   1422e:	2105      	movs	r1, #5
   14230:	4630      	mov	r0, r6
   14232:	f8ad 5002 	strh.w	r5, [sp, #2]
   14236:	f00b f93f 	bl	1f4b8 <bsd_os_trace_put>
   1423a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1423e:	68e0      	ldr	r0, [r4, #12]
   14240:	f00b f93a 	bl	1f4b8 <bsd_os_trace_put>
   14244:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   14248:	68e3      	ldr	r3, [r4, #12]
   1424a:	4413      	add	r3, r2
   1424c:	60a3      	str	r3, [r4, #8]
   1424e:	e6e7      	b.n	14020 <ipc_trace_handle+0x98>
   14250:	f8cb 7000 	str.w	r7, [fp]
   14254:	e76b      	b.n	1412e <ipc_trace_handle+0x1a6>
   14256:	bf00      	nop
   14258:	20020adc 	.word	0x20020adc
   1425c:	2002431d 	.word	0x2002431d
   14260:	20020ad8 	.word	0x20020ad8
   14264:	20020ad0 	.word	0x20020ad0
   14268:	20020ad4 	.word	0x20020ad4

0001426c <rpc_trace_coredump_in_progress>:
   1426c:	4b01      	ldr	r3, [pc, #4]	; (14274 <rpc_trace_coredump_in_progress+0x8>)
   1426e:	7818      	ldrb	r0, [r3, #0]
   14270:	4770      	bx	lr
   14272:	bf00      	nop
   14274:	2002431d 	.word	0x2002431d

00014278 <rpc_transport_ipc_data_free>:
   14278:	b510      	push	{r4, lr}
   1427a:	4b0e      	ldr	r3, [pc, #56]	; (142b4 <rpc_transport_ipc_data_free+0x3c>)
   1427c:	4604      	mov	r4, r0
   1427e:	e9d3 2300 	ldrd	r2, r3, [r3]
   14282:	4413      	add	r3, r2
   14284:	4298      	cmp	r0, r3
   14286:	d20d      	bcs.n	142a4 <rpc_transport_ipc_data_free+0x2c>
   14288:	4282      	cmp	r2, r0
   1428a:	d80b      	bhi.n	142a4 <rpc_transport_ipc_data_free+0x2c>
   1428c:	f000 fd1a 	bl	14cc4 <rpc_transport_ipc_tx_rpc_ctrl_alloc>
   14290:	b158      	cbz	r0, 142aa <rpc_transport_ipc_data_free+0x32>
   14292:	4a09      	ldr	r2, [pc, #36]	; (142b8 <rpc_transport_ipc_data_free+0x40>)
   14294:	6084      	str	r4, [r0, #8]
   14296:	6002      	str	r2, [r0, #0]
   14298:	f7ff fd80 	bl	13d9c <rpc_transport_send>
   1429c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   142a0:	f7fd ba82 	b.w	117a8 <bsd_os_application_irq_set>
   142a4:	4620      	mov	r0, r4
   142a6:	f006 fe5f 	bl	1af68 <nrf_shared_free>
   142aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   142ae:	f7fd ba7b 	b.w	117a8 <bsd_os_application_irq_set>
   142b2:	bf00      	nop
   142b4:	20020ae0 	.word	0x20020ae0
   142b8:	00020001 	.word	0x00020001

000142bc <rpc_transport_ipc_init>:
   142bc:	b188      	cbz	r0, 142e2 <rpc_transport_ipc_init+0x26>
   142be:	b510      	push	{r4, lr}
   142c0:	b082      	sub	sp, #8
   142c2:	aa01      	add	r2, sp, #4
   142c4:	4669      	mov	r1, sp
   142c6:	4604      	mov	r4, r0
   142c8:	f000 fb58 	bl	1497c <rpc_transport_ipc_tx_init>
   142cc:	4602      	mov	r2, r0
   142ce:	b148      	cbz	r0, 142e4 <rpc_transport_ipc_init+0x28>
   142d0:	4b12      	ldr	r3, [pc, #72]	; (1431c <rpc_transport_ipc_init+0x60>)
   142d2:	3428      	adds	r4, #40	; 0x28
   142d4:	e894 0003 	ldmia.w	r4, {r0, r1}
   142d8:	e883 0003 	stmia.w	r3, {r0, r1}
   142dc:	4610      	mov	r0, r2
   142de:	b002      	add	sp, #8
   142e0:	bd10      	pop	{r4, pc}
   142e2:	e7fe      	b.n	142e2 <rpc_transport_ipc_init+0x26>
   142e4:	e9dd 1200 	ldrd	r1, r2, [sp]
   142e8:	4620      	mov	r0, r4
   142ea:	f000 f9ef 	bl	146cc <rpc_transport_ipc_rx_init>
   142ee:	4602      	mov	r2, r0
   142f0:	4b0a      	ldr	r3, [pc, #40]	; (1431c <rpc_transport_ipc_init+0x60>)
   142f2:	f104 0128 	add.w	r1, r4, #40	; 0x28
   142f6:	c903      	ldmia	r1, {r0, r1}
   142f8:	e883 0003 	stmia.w	r3, {r0, r1}
   142fc:	2a00      	cmp	r2, #0
   142fe:	d1ed      	bne.n	142dc <rpc_transport_ipc_init+0x20>
   14300:	f44f 6080 	mov.w	r0, #1024	; 0x400
   14304:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   14306:	4906      	ldr	r1, [pc, #24]	; (14320 <rpc_transport_ipc_init+0x64>)
   14308:	015b      	lsls	r3, r3, #5
   1430a:	b2db      	uxtb	r3, r3
   1430c:	f881 332a 	strb.w	r3, [r1, #810]	; 0x32a
   14310:	f8c1 0184 	str.w	r0, [r1, #388]	; 0x184
   14314:	6048      	str	r0, [r1, #4]
   14316:	4610      	mov	r0, r2
   14318:	b002      	add	sp, #8
   1431a:	bd10      	pop	{r4, pc}
   1431c:	20020ae0 	.word	0x20020ae0
   14320:	e000e100 	.word	0xe000e100

00014324 <rpc_transport_ipc_shutdown>:
   14324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14328:	b08c      	sub	sp, #48	; 0x30
   1432a:	f000 fd05 	bl	14d38 <rpc_transport_ipc_tx_suspend>
   1432e:	2200      	movs	r2, #0
   14330:	2010      	movs	r0, #16
   14332:	4b31      	ldr	r3, [pc, #196]	; (143f8 <rpc_transport_ipc_shutdown+0xd4>)
   14334:	f04f 0c01 	mov.w	ip, #1
   14338:	4c30      	ldr	r4, [pc, #192]	; (143fc <rpc_transport_ipc_shutdown+0xd8>)
   1433a:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
   1433e:	6821      	ldr	r1, [r4, #0]
   14340:	2704      	movs	r7, #4
   14342:	910a      	str	r1, [sp, #40]	; 0x28
   14344:	492e      	ldr	r1, [pc, #184]	; (14400 <rpc_transport_ipc_shutdown+0xdc>)
   14346:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   14348:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   1434c:	680d      	ldr	r5, [r1, #0]
   1434e:	950b      	str	r5, [sp, #44]	; 0x2c
   14350:	4d2c      	ldr	r5, [pc, #176]	; (14404 <rpc_transport_ipc_shutdown+0xe0>)
   14352:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   14354:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   14358:	682d      	ldr	r5, [r5, #0]
   1435a:	2640      	movs	r6, #64	; 0x40
   1435c:	9509      	str	r5, [sp, #36]	; 0x24
   1435e:	4d2a      	ldr	r5, [pc, #168]	; (14408 <rpc_transport_ipc_shutdown+0xe4>)
   14360:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
   14364:	f8c3 2598 	str.w	r2, [r3, #1432]	; 0x598
   14368:	f8d5 e000 	ldr.w	lr, [r5]
   1436c:	2580      	movs	r5, #128	; 0x80
   1436e:	f8cd e020 	str.w	lr, [sp, #32]
   14372:	f8dd e020 	ldr.w	lr, [sp, #32]
   14376:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
   1437a:	f8d4 e000 	ldr.w	lr, [r4]
   1437e:	2405      	movs	r4, #5
   14380:	f8cd e01c 	str.w	lr, [sp, #28]
   14384:	f8df e08c 	ldr.w	lr, [pc, #140]	; 14414 <rpc_transport_ipc_shutdown+0xf0>
   14388:	f8dd 801c 	ldr.w	r8, [sp, #28]
   1438c:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
   14390:	f8de e000 	ldr.w	lr, [lr]
   14394:	f8cd e018 	str.w	lr, [sp, #24]
   14398:	f8df e07c 	ldr.w	lr, [pc, #124]	; 14418 <rpc_transport_ipc_shutdown+0xf4>
   1439c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   143a0:	f8c3 25ac 	str.w	r2, [r3, #1452]	; 0x5ac
   143a4:	f8de e000 	ldr.w	lr, [lr]
   143a8:	f8cd e014 	str.w	lr, [sp, #20]
   143ac:	f8dd e014 	ldr.w	lr, [sp, #20]
   143b0:	f8c3 c308 	str.w	ip, [r3, #776]	; 0x308
   143b4:	f8d1 c000 	ldr.w	ip, [r1]
   143b8:	f8cd c010 	str.w	ip, [sp, #16]
   143bc:	f8dd c010 	ldr.w	ip, [sp, #16]
   143c0:	f8c3 7308 	str.w	r7, [r3, #776]	; 0x308
   143c4:	680f      	ldr	r7, [r1, #0]
   143c6:	9703      	str	r7, [sp, #12]
   143c8:	9f03      	ldr	r7, [sp, #12]
   143ca:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   143ce:	6808      	ldr	r0, [r1, #0]
   143d0:	9002      	str	r0, [sp, #8]
   143d2:	9802      	ldr	r0, [sp, #8]
   143d4:	f8c3 6308 	str.w	r6, [r3, #776]	; 0x308
   143d8:	680e      	ldr	r6, [r1, #0]
   143da:	480c      	ldr	r0, [pc, #48]	; (1440c <rpc_transport_ipc_shutdown+0xe8>)
   143dc:	9601      	str	r6, [sp, #4]
   143de:	9e01      	ldr	r6, [sp, #4]
   143e0:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
   143e4:	6809      	ldr	r1, [r1, #0]
   143e6:	4b0a      	ldr	r3, [pc, #40]	; (14410 <rpc_transport_ipc_shutdown+0xec>)
   143e8:	9100      	str	r1, [sp, #0]
   143ea:	9900      	ldr	r1, [sp, #0]
   143ec:	8002      	strh	r2, [r0, #0]
   143ee:	601c      	str	r4, [r3, #0]
   143f0:	b00c      	add	sp, #48	; 0x30
   143f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   143f6:	bf00      	nop
   143f8:	4002a000 	.word	0x4002a000
   143fc:	4002a5a0 	.word	0x4002a5a0
   14400:	4002a308 	.word	0x4002a308
   14404:	4002a590 	.word	0x4002a590
   14408:	4002a598 	.word	0x4002a598
   1440c:	2002234c 	.word	0x2002234c
   14410:	20020af8 	.word	0x20020af8
   14414:	4002a5a8 	.word	0x4002a5a8
   14418:	4002a5ac 	.word	0x4002a5ac

0001441c <bsd_os_application_irq_handler>:
   1441c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14420:	f7fd f9ca 	bl	117b8 <bsd_os_application_irq_clear>
   14424:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 144fc <bsd_os_application_irq_handler+0xe0>
   14428:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 14500 <bsd_os_application_irq_handler+0xe4>
   1442c:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 14504 <bsd_os_application_irq_handler+0xe8>
   14430:	f108 0908 	add.w	r9, r8, #8
   14434:	f858 7b04 	ldr.w	r7, [r8], #4
   14438:	6839      	ldr	r1, [r7, #0]
   1443a:	b361      	cbz	r1, 14496 <bsd_os_application_irq_handler+0x7a>
   1443c:	2400      	movs	r4, #0
   1443e:	e002      	b.n	14446 <bsd_os_application_irq_handler+0x2a>
   14440:	3401      	adds	r4, #1
   14442:	428c      	cmp	r4, r1
   14444:	d227      	bcs.n	14496 <bsd_os_application_irq_handler+0x7a>
   14446:	00e6      	lsls	r6, r4, #3
   14448:	19bd      	adds	r5, r7, r6
   1444a:	68aa      	ldr	r2, [r5, #8]
   1444c:	2a00      	cmp	r2, #0
   1444e:	d0f7      	beq.n	14440 <bsd_os_application_irq_handler+0x24>
   14450:	686a      	ldr	r2, [r5, #4]
   14452:	b2d2      	uxtb	r2, r2
   14454:	2a01      	cmp	r2, #1
   14456:	d1f3      	bne.n	14440 <bsd_os_application_irq_handler+0x24>
   14458:	6868      	ldr	r0, [r5, #4]
   1445a:	f8bb 2000 	ldrh.w	r2, [fp]
   1445e:	ebb2 4f10 	cmp.w	r2, r0, lsr #16
   14462:	d1ed      	bne.n	14440 <bsd_os_application_irq_handler+0x24>
   14464:	68a8      	ldr	r0, [r5, #8]
   14466:	6841      	ldr	r1, [r0, #4]
   14468:	b2c9      	uxtb	r1, r1
   1446a:	2902      	cmp	r1, #2
   1446c:	d02c      	beq.n	144c8 <bsd_os_application_irq_handler+0xac>
   1446e:	2901      	cmp	r1, #1
   14470:	d015      	beq.n	1449e <bsd_os_application_irq_handler+0x82>
   14472:	3604      	adds	r6, #4
   14474:	59b9      	ldr	r1, [r7, r6]
   14476:	3201      	adds	r2, #1
   14478:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   1447c:	f041 0103 	orr.w	r1, r1, #3
   14480:	51b9      	str	r1, [r7, r6]
   14482:	f8ab 2000 	strh.w	r2, [fp]
   14486:	f7fd f98f 	bl	117a8 <bsd_os_application_irq_set>
   1448a:	f858 7c04 	ldr.w	r7, [r8, #-4]
   1448e:	3401      	adds	r4, #1
   14490:	6839      	ldr	r1, [r7, #0]
   14492:	428c      	cmp	r4, r1
   14494:	d3d7      	bcc.n	14446 <bsd_os_application_irq_handler+0x2a>
   14496:	45c1      	cmp	r9, r8
   14498:	d1cc      	bne.n	14434 <bsd_os_application_irq_handler+0x18>
   1449a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1449e:	6801      	ldr	r1, [r0, #0]
   144a0:	0c09      	lsrs	r1, r1, #16
   144a2:	f002 ff2f 	bl	17304 <rpc_handle_ctrl_message>
   144a6:	2801      	cmp	r0, #1
   144a8:	d014      	beq.n	144d4 <bsd_os_application_irq_handler+0xb8>
   144aa:	d310      	bcc.n	144ce <bsd_os_application_irq_handler+0xb2>
   144ac:	2802      	cmp	r0, #2
   144ae:	d007      	beq.n	144c0 <bsd_os_application_irq_handler+0xa4>
   144b0:	2203      	movs	r2, #3
   144b2:	4b11      	ldr	r3, [pc, #68]	; (144f8 <bsd_os_application_irq_handler+0xdc>)
   144b4:	4610      	mov	r0, r2
   144b6:	f8ca 2000 	str.w	r2, [sl]
   144ba:	601a      	str	r2, [r3, #0]
   144bc:	f005 fb00 	bl	19ac0 <rpc_transport_ipc_fault_handler>
   144c0:	f858 7c04 	ldr.w	r7, [r8, #-4]
   144c4:	6839      	ldr	r1, [r7, #0]
   144c6:	e7bb      	b.n	14440 <bsd_os_application_irq_handler+0x24>
   144c8:	f002 ff34 	bl	17334 <rpc_handle_data_message>
   144cc:	e7eb      	b.n	144a6 <bsd_os_application_irq_handler+0x8a>
   144ce:	f8bb 2000 	ldrh.w	r2, [fp]
   144d2:	e7ce      	b.n	14472 <bsd_os_application_irq_handler+0x56>
   144d4:	686a      	ldr	r2, [r5, #4]
   144d6:	f8bb 1000 	ldrh.w	r1, [fp]
   144da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   144de:	f042 0202 	orr.w	r2, r2, #2
   144e2:	606a      	str	r2, [r5, #4]
   144e4:	1c4a      	adds	r2, r1, #1
   144e6:	f8ab 2000 	strh.w	r2, [fp]
   144ea:	f7fd f95d 	bl	117a8 <bsd_os_application_irq_set>
   144ee:	f858 7c04 	ldr.w	r7, [r8, #-4]
   144f2:	6839      	ldr	r1, [r7, #0]
   144f4:	e7a4      	b.n	14440 <bsd_os_application_irq_handler+0x24>
   144f6:	bf00      	nop
   144f8:	20020ae8 	.word	0x20020ae8
   144fc:	20020af0 	.word	0x20020af0
   14500:	2002234c 	.word	0x2002234c
   14504:	20020af8 	.word	0x20020af8

00014508 <IPC_IRQHandler>:
   14508:	b570      	push	{r4, r5, r6, lr}
   1450a:	f44f 6680 	mov.w	r6, #1024	; 0x400
   1450e:	4d62      	ldr	r5, [pc, #392]	; (14698 <IPC_IRQHandler+0x190>)
   14510:	4c62      	ldr	r4, [pc, #392]	; (1469c <IPC_IRQHandler+0x194>)
   14512:	f8c5 6184 	str.w	r6, [r5, #388]	; 0x184
   14516:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   1451a:	b086      	sub	sp, #24
   1451c:	061b      	lsls	r3, r3, #24
   1451e:	d50b      	bpl.n	14538 <IPC_IRQHandler+0x30>
   14520:	f7ff fd32 	bl	13f88 <ipc_trace_handle>
   14524:	f7ff fea2 	bl	1426c <rpc_trace_coredump_in_progress>
   14528:	2800      	cmp	r0, #0
   1452a:	d151      	bne.n	145d0 <IPC_IRQHandler+0xc8>
   1452c:	4b5c      	ldr	r3, [pc, #368]	; (146a0 <IPC_IRQHandler+0x198>)
   1452e:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
   14532:	681b      	ldr	r3, [r3, #0]
   14534:	9301      	str	r3, [sp, #4]
   14536:	9b01      	ldr	r3, [sp, #4]
   14538:	4b58      	ldr	r3, [pc, #352]	; (1469c <IPC_IRQHandler+0x194>)
   1453a:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   1453e:	f012 0201 	ands.w	r2, r2, #1
   14542:	d11c      	bne.n	1457e <IPC_IRQHandler+0x76>
   14544:	f8d3 130c 	ldr.w	r1, [r3, #780]	; 0x30c
   14548:	f011 0140 	ands.w	r1, r1, #64	; 0x40
   1454c:	d145      	bne.n	145da <IPC_IRQHandler+0xd2>
   1454e:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   14552:	0750      	lsls	r0, r2, #29
   14554:	d50c      	bpl.n	14570 <IPC_IRQHandler+0x68>
   14556:	4a53      	ldr	r2, [pc, #332]	; (146a4 <IPC_IRQHandler+0x19c>)
   14558:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   1455c:	6812      	ldr	r2, [r2, #0]
   1455e:	4b52      	ldr	r3, [pc, #328]	; (146a8 <IPC_IRQHandler+0x1a0>)
   14560:	9204      	str	r2, [sp, #16]
   14562:	9a04      	ldr	r2, [sp, #16]
   14564:	681a      	ldr	r2, [r3, #0]
   14566:	2a02      	cmp	r2, #2
   14568:	d079      	beq.n	1465e <IPC_IRQHandler+0x156>
   1456a:	681a      	ldr	r2, [r3, #0]
   1456c:	2a01      	cmp	r2, #1
   1456e:	d05b      	beq.n	14628 <IPC_IRQHandler+0x120>
   14570:	4b4a      	ldr	r3, [pc, #296]	; (1469c <IPC_IRQHandler+0x194>)
   14572:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   14576:	06d2      	lsls	r2, r2, #27
   14578:	d41e      	bmi.n	145b8 <IPC_IRQHandler+0xb0>
   1457a:	b006      	add	sp, #24
   1457c:	bd70      	pop	{r4, r5, r6, pc}
   1457e:	2000      	movs	r0, #0
   14580:	f248 0202 	movw	r2, #32770	; 0x8002
   14584:	4949      	ldr	r1, [pc, #292]	; (146ac <IPC_IRQHandler+0x1a4>)
   14586:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   1458a:	6809      	ldr	r1, [r1, #0]
   1458c:	9102      	str	r1, [sp, #8]
   1458e:	9902      	ldr	r1, [sp, #8]
   14590:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   14594:	4293      	cmp	r3, r2
   14596:	d06b      	beq.n	14670 <IPC_IRQHandler+0x168>
   14598:	d82a      	bhi.n	145f0 <IPC_IRQHandler+0xe8>
   1459a:	2b00      	cmp	r3, #0
   1459c:	d062      	beq.n	14664 <IPC_IRQHandler+0x15c>
   1459e:	2b02      	cmp	r3, #2
   145a0:	d937      	bls.n	14612 <IPC_IRQHandler+0x10a>
   145a2:	f248 0201 	movw	r2, #32769	; 0x8001
   145a6:	4293      	cmp	r3, r2
   145a8:	d15c      	bne.n	14664 <IPC_IRQHandler+0x15c>
   145aa:	2003      	movs	r0, #3
   145ac:	2207      	movs	r2, #7
   145ae:	493e      	ldr	r1, [pc, #248]	; (146a8 <IPC_IRQHandler+0x1a0>)
   145b0:	4b3f      	ldr	r3, [pc, #252]	; (146b0 <IPC_IRQHandler+0x1a8>)
   145b2:	6008      	str	r0, [r1, #0]
   145b4:	601a      	str	r2, [r3, #0]
   145b6:	e7e0      	b.n	1457a <IPC_IRQHandler+0x72>
   145b8:	2100      	movs	r1, #0
   145ba:	4a3e      	ldr	r2, [pc, #248]	; (146b4 <IPC_IRQHandler+0x1ac>)
   145bc:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
   145c0:	6813      	ldr	r3, [r2, #0]
   145c2:	9305      	str	r3, [sp, #20]
   145c4:	9b05      	ldr	r3, [sp, #20]
   145c6:	b006      	add	sp, #24
   145c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   145cc:	f7fd b8ec 	b.w	117a8 <bsd_os_application_irq_set>
   145d0:	23e0      	movs	r3, #224	; 0xe0
   145d2:	f885 332a 	strb.w	r3, [r5, #810]	; 0x32a
   145d6:	606e      	str	r6, [r5, #4]
   145d8:	e7cf      	b.n	1457a <IPC_IRQHandler+0x72>
   145da:	4937      	ldr	r1, [pc, #220]	; (146b8 <IPC_IRQHandler+0x1b0>)
   145dc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   145e0:	680b      	ldr	r3, [r1, #0]
   145e2:	9303      	str	r3, [sp, #12]
   145e4:	9b03      	ldr	r3, [sp, #12]
   145e6:	b006      	add	sp, #24
   145e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   145ec:	f7ff be9a 	b.w	14324 <rpc_transport_ipc_shutdown>
   145f0:	4a32      	ldr	r2, [pc, #200]	; (146bc <IPC_IRQHandler+0x1b4>)
   145f2:	4293      	cmp	r3, r2
   145f4:	d82a      	bhi.n	1464c <IPC_IRQHandler+0x144>
   145f6:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   145fa:	d82a      	bhi.n	14652 <IPC_IRQHandler+0x14a>
   145fc:	f248 0203 	movw	r2, #32771	; 0x8003
   14600:	4293      	cmp	r3, r2
   14602:	d12f      	bne.n	14664 <IPC_IRQHandler+0x15c>
   14604:	2003      	movs	r0, #3
   14606:	2204      	movs	r2, #4
   14608:	4927      	ldr	r1, [pc, #156]	; (146a8 <IPC_IRQHandler+0x1a0>)
   1460a:	4b29      	ldr	r3, [pc, #164]	; (146b0 <IPC_IRQHandler+0x1a8>)
   1460c:	6008      	str	r0, [r1, #0]
   1460e:	601a      	str	r2, [r3, #0]
   14610:	e7b3      	b.n	1457a <IPC_IRQHandler+0x72>
   14612:	2303      	movs	r3, #3
   14614:	4618      	mov	r0, r3
   14616:	4924      	ldr	r1, [pc, #144]	; (146a8 <IPC_IRQHandler+0x1a0>)
   14618:	4a25      	ldr	r2, [pc, #148]	; (146b0 <IPC_IRQHandler+0x1a8>)
   1461a:	600b      	str	r3, [r1, #0]
   1461c:	6013      	str	r3, [r2, #0]
   1461e:	b006      	add	sp, #24
   14620:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   14624:	f005 ba4c 	b.w	19ac0 <rpc_transport_ipc_fault_handler>
   14628:	4a25      	ldr	r2, [pc, #148]	; (146c0 <IPC_IRQHandler+0x1b8>)
   1462a:	4826      	ldr	r0, [pc, #152]	; (146c4 <IPC_IRQHandler+0x1bc>)
   1462c:	6811      	ldr	r1, [r2, #0]
   1462e:	688a      	ldr	r2, [r1, #8]
   14630:	6002      	str	r2, [r0, #0]
   14632:	6849      	ldr	r1, [r1, #4]
   14634:	6041      	str	r1, [r0, #4]
   14636:	b312      	cbz	r2, 1467e <IPC_IRQHandler+0x176>
   14638:	b309      	cbz	r1, 1467e <IPC_IRQHandler+0x176>
   1463a:	6812      	ldr	r2, [r2, #0]
   1463c:	2a10      	cmp	r2, #16
   1463e:	d824      	bhi.n	1468a <IPC_IRQHandler+0x182>
   14640:	680a      	ldr	r2, [r1, #0]
   14642:	2a10      	cmp	r2, #16
   14644:	d821      	bhi.n	1468a <IPC_IRQHandler+0x182>
   14646:	2202      	movs	r2, #2
   14648:	601a      	str	r2, [r3, #0]
   1464a:	e791      	b.n	14570 <IPC_IRQHandler+0x68>
   1464c:	4a1e      	ldr	r2, [pc, #120]	; (146c8 <IPC_IRQHandler+0x1c0>)
   1464e:	4293      	cmp	r3, r2
   14650:	d108      	bne.n	14664 <IPC_IRQHandler+0x15c>
   14652:	2003      	movs	r0, #3
   14654:	4914      	ldr	r1, [pc, #80]	; (146a8 <IPC_IRQHandler+0x1a0>)
   14656:	4a16      	ldr	r2, [pc, #88]	; (146b0 <IPC_IRQHandler+0x1a8>)
   14658:	6008      	str	r0, [r1, #0]
   1465a:	6013      	str	r3, [r2, #0]
   1465c:	e78d      	b.n	1457a <IPC_IRQHandler+0x72>
   1465e:	f7fd f8a3 	bl	117a8 <bsd_os_application_irq_set>
   14662:	e785      	b.n	14570 <IPC_IRQHandler+0x68>
   14664:	2303      	movs	r3, #3
   14666:	4910      	ldr	r1, [pc, #64]	; (146a8 <IPC_IRQHandler+0x1a0>)
   14668:	4a11      	ldr	r2, [pc, #68]	; (146b0 <IPC_IRQHandler+0x1a8>)
   1466a:	600b      	str	r3, [r1, #0]
   1466c:	6013      	str	r3, [r2, #0]
   1466e:	e784      	b.n	1457a <IPC_IRQHandler+0x72>
   14670:	2003      	movs	r0, #3
   14672:	2206      	movs	r2, #6
   14674:	490c      	ldr	r1, [pc, #48]	; (146a8 <IPC_IRQHandler+0x1a0>)
   14676:	4b0e      	ldr	r3, [pc, #56]	; (146b0 <IPC_IRQHandler+0x1a8>)
   14678:	6008      	str	r0, [r1, #0]
   1467a:	601a      	str	r2, [r3, #0]
   1467c:	e77d      	b.n	1457a <IPC_IRQHandler+0x72>
   1467e:	2003      	movs	r0, #3
   14680:	2110      	movs	r1, #16
   14682:	4a0b      	ldr	r2, [pc, #44]	; (146b0 <IPC_IRQHandler+0x1a8>)
   14684:	6018      	str	r0, [r3, #0]
   14686:	6011      	str	r1, [r2, #0]
   14688:	e772      	b.n	14570 <IPC_IRQHandler+0x68>
   1468a:	2003      	movs	r0, #3
   1468c:	f24c 0106 	movw	r1, #49158	; 0xc006
   14690:	4a07      	ldr	r2, [pc, #28]	; (146b0 <IPC_IRQHandler+0x1a8>)
   14692:	6018      	str	r0, [r3, #0]
   14694:	6011      	str	r1, [r2, #0]
   14696:	e76b      	b.n	14570 <IPC_IRQHandler+0x68>
   14698:	e000e100 	.word	0xe000e100
   1469c:	4002a000 	.word	0x4002a000
   146a0:	4002a11c 	.word	0x4002a11c
   146a4:	4002a108 	.word	0x4002a108
   146a8:	20020af8 	.word	0x20020af8
   146ac:	4002a100 	.word	0x4002a100
   146b0:	20020ae8 	.word	0x20020ae8
   146b4:	4002a110 	.word	0x4002a110
   146b8:	4002a118 	.word	0x4002a118
   146bc:	04400004 	.word	0x04400004
   146c0:	20020afc 	.word	0x20020afc
   146c4:	20020af0 	.word	0x20020af0
   146c8:	05500001 	.word	0x05500001

000146cc <rpc_transport_ipc_rx_init>:
   146cc:	2800      	cmp	r0, #0
   146ce:	f000 8109 	beq.w	148e4 <rpc_transport_ipc_rx_init+0x218>
   146d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146d6:	6805      	ldr	r5, [r0, #0]
   146d8:	b097      	sub	sp, #92	; 0x5c
   146da:	2d00      	cmp	r5, #0
   146dc:	f000 80f8 	beq.w	148d0 <rpc_transport_ipc_rx_init+0x204>
   146e0:	6883      	ldr	r3, [r0, #8]
   146e2:	2b00      	cmp	r3, #0
   146e4:	f000 80f4 	beq.w	148d0 <rpc_transport_ipc_rx_init+0x204>
   146e8:	6906      	ldr	r6, [r0, #16]
   146ea:	2e00      	cmp	r6, #0
   146ec:	f000 80f0 	beq.w	148d0 <rpc_transport_ipc_rx_init+0x204>
   146f0:	6a84      	ldr	r4, [r0, #40]	; 0x28
   146f2:	2c00      	cmp	r4, #0
   146f4:	f000 80ec 	beq.w	148d0 <rpc_transport_ipc_rx_init+0x204>
   146f8:	6844      	ldr	r4, [r0, #4]
   146fa:	2c1b      	cmp	r4, #27
   146fc:	f240 80ed 	bls.w	148da <rpc_transport_ipc_rx_init+0x20e>
   14700:	68c4      	ldr	r4, [r0, #12]
   14702:	2c0b      	cmp	r4, #11
   14704:	f240 80e9 	bls.w	148da <rpc_transport_ipc_rx_init+0x20e>
   14708:	f8d0 e014 	ldr.w	lr, [r0, #20]
   1470c:	f1be 0f17 	cmp.w	lr, #23
   14710:	f240 80e3 	bls.w	148da <rpc_transport_ipc_rx_init+0x20e>
   14714:	4604      	mov	r4, r0
   14716:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 1490c <rpc_transport_ipc_rx_init+0x240>
   1471a:	6ba7      	ldr	r7, [r4, #56]	; 0x38
   1471c:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 14910 <rpc_transport_ipc_rx_init+0x244>
   14720:	4690      	mov	r8, r2
   14722:	9101      	str	r1, [sp, #4]
   14724:	4672      	mov	r2, lr
   14726:	2100      	movs	r1, #0
   14728:	4630      	mov	r0, r6
   1472a:	f8ca 7000 	str.w	r7, [sl]
   1472e:	f8cb 3000 	str.w	r3, [fp]
   14732:	f009 ffb9 	bl	1e6a8 <memset>
   14736:	69e3      	ldr	r3, [r4, #28]
   14738:	4630      	mov	r0, r6
   1473a:	6033      	str	r3, [r6, #0]
   1473c:	69a3      	ldr	r3, [r4, #24]
   1473e:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 14914 <rpc_transport_ipc_rx_init+0x248>
   14742:	6073      	str	r3, [r6, #4]
   14744:	f7ff fb34 	bl	13db0 <ipc_trace_init>
   14748:	2200      	movs	r2, #0
   1474a:	2001      	movs	r0, #1
   1474c:	4b67      	ldr	r3, [pc, #412]	; (148ec <rpc_transport_ipc_rx_init+0x220>)
   1474e:	4968      	ldr	r1, [pc, #416]	; (148f0 <rpc_transport_ipc_rx_init+0x224>)
   14750:	f8c3 5610 	str.w	r5, [r3, #1552]	; 0x610
   14754:	6809      	ldr	r1, [r1, #0]
   14756:	f04f 0c80 	mov.w	ip, #128	; 0x80
   1475a:	9106      	str	r1, [sp, #24]
   1475c:	4965      	ldr	r1, [pc, #404]	; (148f4 <rpc_transport_ipc_rx_init+0x228>)
   1475e:	f8dd e018 	ldr.w	lr, [sp, #24]
   14762:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
   14766:	6809      	ldr	r1, [r1, #0]
   14768:	702a      	strb	r2, [r5, #0]
   1476a:	9105      	str	r1, [sp, #20]
   1476c:	706a      	strb	r2, [r5, #1]
   1476e:	70ea      	strb	r2, [r5, #3]
   14770:	70a8      	strb	r0, [r5, #2]
   14772:	9905      	ldr	r1, [sp, #20]
   14774:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   14776:	f8db e000 	ldr.w	lr, [fp]
   1477a:	6069      	str	r1, [r5, #4]
   1477c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   1477e:	61ae      	str	r6, [r5, #24]
   14780:	60a9      	str	r1, [r5, #8]
   14782:	9901      	ldr	r1, [sp, #4]
   14784:	f8c5 e014 	str.w	lr, [r5, #20]
   14788:	6129      	str	r1, [r5, #16]
   1478a:	495b      	ldr	r1, [pc, #364]	; (148f8 <rpc_transport_ipc_rx_init+0x22c>)
   1478c:	f8c5 800c 	str.w	r8, [r5, #12]
   14790:	f8c3 0590 	str.w	r0, [r3, #1424]	; 0x590
   14794:	680c      	ldr	r4, [r1, #0]
   14796:	f5a1 6192 	sub.w	r1, r1, #1168	; 0x490
   1479a:	9407      	str	r4, [sp, #28]
   1479c:	9c07      	ldr	r4, [sp, #28]
   1479e:	2404      	movs	r4, #4
   147a0:	f8c3 4598 	str.w	r4, [r3, #1432]	; 0x598
   147a4:	f8d1 4498 	ldr.w	r4, [r1, #1176]	; 0x498
   147a8:	4f54      	ldr	r7, [pc, #336]	; (148fc <rpc_transport_ipc_rx_init+0x230>)
   147aa:	9408      	str	r4, [sp, #32]
   147ac:	9c08      	ldr	r4, [sp, #32]
   147ae:	2410      	movs	r4, #16
   147b0:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   147b4:	f8d1 44a0 	ldr.w	r4, [r1, #1184]	; 0x4a0
   147b8:	9409      	str	r4, [sp, #36]	; 0x24
   147ba:	9c09      	ldr	r4, [sp, #36]	; 0x24
   147bc:	2440      	movs	r4, #64	; 0x40
   147be:	f8c3 45a8 	str.w	r4, [r3, #1448]	; 0x5a8
   147c2:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	; 0x4a8
   147c6:	940a      	str	r4, [sp, #40]	; 0x28
   147c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   147ca:	f8c3 c5ac 	str.w	ip, [r3, #1452]	; 0x5ac
   147ce:	f8d1 44ac 	ldr.w	r4, [r1, #1196]	; 0x4ac
   147d2:	f44f 6c80 	mov.w	ip, #1024	; 0x400
   147d6:	940b      	str	r4, [sp, #44]	; 0x2c
   147d8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   147da:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   147de:	680c      	ldr	r4, [r1, #0]
   147e0:	940c      	str	r4, [sp, #48]	; 0x30
   147e2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   147e4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   147e8:	688c      	ldr	r4, [r1, #8]
   147ea:	940d      	str	r4, [sp, #52]	; 0x34
   147ec:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   147ee:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   147f2:	690c      	ldr	r4, [r1, #16]
   147f4:	940e      	str	r4, [sp, #56]	; 0x38
   147f6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   147f8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   147fc:	698c      	ldr	r4, [r1, #24]
   147fe:	940f      	str	r4, [sp, #60]	; 0x3c
   14800:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   14802:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   14806:	69cc      	ldr	r4, [r1, #28]
   14808:	f501 7101 	add.w	r1, r1, #516	; 0x204
   1480c:	9410      	str	r4, [sp, #64]	; 0x40
   1480e:	9c10      	ldr	r4, [sp, #64]	; 0x40
   14810:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   14814:	4304      	orrs	r4, r0
   14816:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   1481a:	680d      	ldr	r5, [r1, #0]
   1481c:	4c38      	ldr	r4, [pc, #224]	; (14900 <rpc_transport_ipc_rx_init+0x234>)
   1481e:	9511      	str	r5, [sp, #68]	; 0x44
   14820:	9d11      	ldr	r5, [sp, #68]	; 0x44
   14822:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   14826:	4d37      	ldr	r5, [pc, #220]	; (14904 <rpc_transport_ipc_rx_init+0x238>)
   14828:	f046 0604 	orr.w	r6, r6, #4
   1482c:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   14830:	680e      	ldr	r6, [r1, #0]
   14832:	9612      	str	r6, [sp, #72]	; 0x48
   14834:	9e12      	ldr	r6, [sp, #72]	; 0x48
   14836:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   1483a:	f046 0610 	orr.w	r6, r6, #16
   1483e:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   14842:	680e      	ldr	r6, [r1, #0]
   14844:	9613      	str	r6, [sp, #76]	; 0x4c
   14846:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   14848:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   1484c:	f046 0640 	orr.w	r6, r6, #64	; 0x40
   14850:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   14854:	680e      	ldr	r6, [r1, #0]
   14856:	9614      	str	r6, [sp, #80]	; 0x50
   14858:	9e14      	ldr	r6, [sp, #80]	; 0x50
   1485a:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   1485e:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   14862:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   14866:	f8da 3000 	ldr.w	r3, [sl]
   1486a:	6809      	ldr	r1, [r1, #0]
   1486c:	015b      	lsls	r3, r3, #5
   1486e:	9115      	str	r1, [sp, #84]	; 0x54
   14870:	b2db      	uxtb	r3, r3
   14872:	9915      	ldr	r1, [sp, #84]	; 0x54
   14874:	6022      	str	r2, [r4, #0]
   14876:	f8c9 0000 	str.w	r0, [r9]
   1487a:	f885 332a 	strb.w	r3, [r5, #810]	; 0x32a
   1487e:	f8c5 c184 	str.w	ip, [r5, #388]	; 0x184
   14882:	f8c5 c004 	str.w	ip, [r5, #4]
   14886:	9204      	str	r2, [sp, #16]
   14888:	f8c7 2610 	str.w	r2, [r7, #1552]	; 0x610
   1488c:	f8d7 3610 	ldr.w	r3, [r7, #1552]	; 0x610
   14890:	9304      	str	r3, [sp, #16]
   14892:	9b04      	ldr	r3, [sp, #16]
   14894:	f8d9 3000 	ldr.w	r3, [r9]
   14898:	4283      	cmp	r3, r0
   1489a:	d10f      	bne.n	148bc <rpc_transport_ipc_rx_init+0x1f0>
   1489c:	2614      	movs	r6, #20
   1489e:	4d1a      	ldr	r5, [pc, #104]	; (14908 <rpc_transport_ipc_rx_init+0x23c>)
   148a0:	e000      	b.n	148a4 <rpc_transport_ipc_rx_init+0x1d8>
   148a2:	b15d      	cbz	r5, 148bc <rpc_transport_ipc_rx_init+0x1f0>
   148a4:	a903      	add	r1, sp, #12
   148a6:	2000      	movs	r0, #0
   148a8:	9603      	str	r6, [sp, #12]
   148aa:	f7fc fd55 	bl	11358 <bsd_os_timedwait>
   148ae:	9b03      	ldr	r3, [sp, #12]
   148b0:	f8d9 2000 	ldr.w	r2, [r9]
   148b4:	3b14      	subs	r3, #20
   148b6:	2a01      	cmp	r2, #1
   148b8:	441d      	add	r5, r3
   148ba:	d0f2      	beq.n	148a2 <rpc_transport_ipc_rx_init+0x1d6>
   148bc:	f8d9 3000 	ldr.w	r3, [r9]
   148c0:	2b01      	cmp	r3, #1
   148c2:	bf0a      	itet	eq
   148c4:	200d      	moveq	r0, #13
   148c6:	6820      	ldrne	r0, [r4, #0]
   148c8:	6020      	streq	r0, [r4, #0]
   148ca:	b017      	add	sp, #92	; 0x5c
   148cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148d0:	f24c 000e 	movw	r0, #49166	; 0xc00e
   148d4:	b017      	add	sp, #92	; 0x5c
   148d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148da:	f24c 0009 	movw	r0, #49161	; 0xc009
   148de:	b017      	add	sp, #92	; 0x5c
   148e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148e4:	f24c 000e 	movw	r0, #49166	; 0xc00e
   148e8:	4770      	bx	lr
   148ea:	bf00      	nop
   148ec:	4002a000 	.word	0x4002a000
   148f0:	4002a610 	.word	0x4002a610
   148f4:	4002a614 	.word	0x4002a614
   148f8:	4002a590 	.word	0x4002a590
   148fc:	40005000 	.word	0x40005000
   14900:	20020ae8 	.word	0x20020ae8
   14904:	e000e100 	.word	0xe000e100
   14908:	000249f0 	.word	0x000249f0
   1490c:	20020aec 	.word	0x20020aec
   14910:	20020afc 	.word	0x20020afc
   14914:	20020af8 	.word	0x20020af8

00014918 <rpc_transport_ipc_msg_free>:
   14918:	b470      	push	{r4, r5, r6}
   1491a:	4e17      	ldr	r6, [pc, #92]	; (14978 <rpc_transport_ipc_msg_free+0x60>)
   1491c:	6831      	ldr	r1, [r6, #0]
   1491e:	680d      	ldr	r5, [r1, #0]
   14920:	b1ad      	cbz	r5, 1494e <rpc_transport_ipc_msg_free+0x36>
   14922:	688b      	ldr	r3, [r1, #8]
   14924:	4283      	cmp	r3, r0
   14926:	d024      	beq.n	14972 <rpc_transport_ipc_msg_free+0x5a>
   14928:	2300      	movs	r3, #0
   1492a:	3301      	adds	r3, #1
   1492c:	00da      	lsls	r2, r3, #3
   1492e:	429d      	cmp	r5, r3
   14930:	eb01 0402 	add.w	r4, r1, r2
   14934:	d00b      	beq.n	1494e <rpc_transport_ipc_msg_free+0x36>
   14936:	68a4      	ldr	r4, [r4, #8]
   14938:	42a0      	cmp	r0, r4
   1493a:	d1f6      	bne.n	1492a <rpc_transport_ipc_msg_free+0x12>
   1493c:	3204      	adds	r2, #4
   1493e:	588b      	ldr	r3, [r1, r2]
   14940:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   14944:	f043 0303 	orr.w	r3, r3, #3
   14948:	508b      	str	r3, [r1, r2]
   1494a:	bc70      	pop	{r4, r5, r6}
   1494c:	4770      	bx	lr
   1494e:	6871      	ldr	r1, [r6, #4]
   14950:	680d      	ldr	r5, [r1, #0]
   14952:	2d00      	cmp	r5, #0
   14954:	d0f9      	beq.n	1494a <rpc_transport_ipc_msg_free+0x32>
   14956:	688b      	ldr	r3, [r1, #8]
   14958:	4283      	cmp	r3, r0
   1495a:	d00a      	beq.n	14972 <rpc_transport_ipc_msg_free+0x5a>
   1495c:	2300      	movs	r3, #0
   1495e:	3301      	adds	r3, #1
   14960:	00da      	lsls	r2, r3, #3
   14962:	429d      	cmp	r5, r3
   14964:	eb01 0402 	add.w	r4, r1, r2
   14968:	d0ef      	beq.n	1494a <rpc_transport_ipc_msg_free+0x32>
   1496a:	68a4      	ldr	r4, [r4, #8]
   1496c:	42a0      	cmp	r0, r4
   1496e:	d1f6      	bne.n	1495e <rpc_transport_ipc_msg_free+0x46>
   14970:	e7e4      	b.n	1493c <rpc_transport_ipc_msg_free+0x24>
   14972:	2204      	movs	r2, #4
   14974:	e7e3      	b.n	1493e <rpc_transport_ipc_msg_free+0x26>
   14976:	bf00      	nop
   14978:	20020af0 	.word	0x20020af0

0001497c <rpc_transport_ipc_tx_init>:
   1497c:	2800      	cmp	r0, #0
   1497e:	f000 80b8 	beq.w	14af2 <rpc_transport_ipc_tx_init+0x176>
   14982:	2900      	cmp	r1, #0
   14984:	f000 80b5 	beq.w	14af2 <rpc_transport_ipc_tx_init+0x176>
   14988:	2a00      	cmp	r2, #0
   1498a:	f000 80b2 	beq.w	14af2 <rpc_transport_ipc_tx_init+0x176>
   1498e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14992:	6a04      	ldr	r4, [r0, #32]
   14994:	b085      	sub	sp, #20
   14996:	2c00      	cmp	r4, #0
   14998:	f000 80a6 	beq.w	14ae8 <rpc_transport_ipc_tx_init+0x16c>
   1499c:	6a40      	ldr	r0, [r0, #36]	; 0x24
   1499e:	2800      	cmp	r0, #0
   149a0:	f000 80a2 	beq.w	14ae8 <rpc_transport_ipc_tx_init+0x16c>
   149a4:	f642 4587 	movw	r5, #11399	; 0x2c87
   149a8:	f04f 0a00 	mov.w	sl, #0
   149ac:	4e55      	ldr	r6, [pc, #340]	; (14b04 <rpc_transport_ipc_tx_init+0x188>)
   149ae:	42a8      	cmp	r0, r5
   149b0:	f886 a000 	strb.w	sl, [r6]
   149b4:	f240 80a0 	bls.w	14af8 <rpc_transport_ipc_tx_init+0x17c>
   149b8:	2708      	movs	r7, #8
   149ba:	f8df 9180 	ldr.w	r9, [pc, #384]	; 14b3c <rpc_transport_ipc_tx_init+0x1c0>
   149be:	4620      	mov	r0, r4
   149c0:	4616      	mov	r6, r2
   149c2:	460d      	mov	r5, r1
   149c4:	2244      	movs	r2, #68	; 0x44
   149c6:	4651      	mov	r1, sl
   149c8:	f8c9 4000 	str.w	r4, [r9]
   149cc:	f009 fe6c 	bl	1e6a8 <memset>
   149d0:	f8d9 2000 	ldr.w	r2, [r9]
   149d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
   149d8:	f8df 8164 	ldr.w	r8, [pc, #356]	; 14b40 <rpc_transport_ipc_tx_init+0x1c4>
   149dc:	f882 a001 	strb.w	sl, [r2, #1]
   149e0:	f882 a002 	strb.w	sl, [r2, #2]
   149e4:	f882 a003 	strb.w	sl, [r2, #3]
   149e8:	7017      	strb	r7, [r2, #0]
   149ea:	4618      	mov	r0, r3
   149ec:	2244      	movs	r2, #68	; 0x44
   149ee:	4651      	mov	r1, sl
   149f0:	f8c8 3000 	str.w	r3, [r8]
   149f4:	f009 fe58 	bl	1e6a8 <memset>
   149f8:	f8d8 2000 	ldr.w	r2, [r8]
   149fc:	f104 0388 	add.w	r3, r4, #136	; 0x88
   14a00:	f8df b140 	ldr.w	fp, [pc, #320]	; 14b44 <rpc_transport_ipc_tx_init+0x1c8>
   14a04:	7017      	strb	r7, [r2, #0]
   14a06:	f882 a001 	strb.w	sl, [r2, #1]
   14a0a:	f882 a002 	strb.w	sl, [r2, #2]
   14a0e:	f882 a003 	strb.w	sl, [r2, #3]
   14a12:	4618      	mov	r0, r3
   14a14:	f44f 7200 	mov.w	r2, #512	; 0x200
   14a18:	4651      	mov	r1, sl
   14a1a:	f8cb 3000 	str.w	r3, [fp]
   14a1e:	f009 fe43 	bl	1e6a8 <memset>
   14a22:	4b39      	ldr	r3, [pc, #228]	; (14b08 <rpc_transport_ipc_tx_init+0x18c>)
   14a24:	f504 7c22 	add.w	ip, r4, #648	; 0x288
   14a28:	f8c3 c000 	str.w	ip, [r3]
   14a2c:	4651      	mov	r1, sl
   14a2e:	4660      	mov	r0, ip
   14a30:	f44f 7200 	mov.w	r2, #512	; 0x200
   14a34:	f009 fe38 	bl	1e6a8 <memset>
   14a38:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
   14a3c:	2106      	movs	r1, #6
   14a3e:	f04f 0e01 	mov.w	lr, #1
   14a42:	f44f 3001 	mov.w	r0, #132096	; 0x20400
   14a46:	f44f 3288 	mov.w	r2, #69632	; 0x11000
   14a4a:	4b30      	ldr	r3, [pc, #192]	; (14b0c <rpc_transport_ipc_tx_init+0x190>)
   14a4c:	f504 6491 	add.w	r4, r4, #1160	; 0x488
   14a50:	605c      	str	r4, [r3, #4]
   14a52:	4c2f      	ldr	r4, [pc, #188]	; (14b10 <rpc_transport_ipc_tx_init+0x194>)
   14a54:	f8c3 c008 	str.w	ip, [r3, #8]
   14a58:	8199      	strh	r1, [r3, #12]
   14a5a:	f8a3 e000 	strh.w	lr, [r3]
   14a5e:	4619      	mov	r1, r3
   14a60:	611c      	str	r4, [r3, #16]
   14a62:	4b2c      	ldr	r3, [pc, #176]	; (14b14 <rpc_transport_ipc_tx_init+0x198>)
   14a64:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 14b48 <rpc_transport_ipc_tx_init+0x1cc>
   14a68:	6120      	str	r0, [r4, #16]
   14a6a:	482b      	ldr	r0, [pc, #172]	; (14b18 <rpc_transport_ipc_tx_init+0x19c>)
   14a6c:	6063      	str	r3, [r4, #4]
   14a6e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
   14a72:	60a0      	str	r0, [r4, #8]
   14a74:	f8c4 c000 	str.w	ip, [r4]
   14a78:	4828      	ldr	r0, [pc, #160]	; (14b1c <rpc_transport_ipc_tx_init+0x1a0>)
   14a7a:	60e3      	str	r3, [r4, #12]
   14a7c:	6162      	str	r2, [r4, #20]
   14a7e:	f006 f939 	bl	1acf4 <nrf_mem_register>
   14a82:	2800      	cmp	r0, #0
   14a84:	d132      	bne.n	14aec <rpc_transport_ipc_tx_init+0x170>
   14a86:	f04f 0c02 	mov.w	ip, #2
   14a8a:	2420      	movs	r4, #32
   14a8c:	f8d9 1000 	ldr.w	r1, [r9]
   14a90:	f8db 2000 	ldr.w	r2, [fp]
   14a94:	6029      	str	r1, [r5, #0]
   14a96:	4b1c      	ldr	r3, [pc, #112]	; (14b08 <rpc_transport_ipc_tx_init+0x18c>)
   14a98:	f8d8 1000 	ldr.w	r1, [r8]
   14a9c:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 14b4c <rpc_transport_ipc_tx_init+0x1d0>
   14aa0:	4d1f      	ldr	r5, [pc, #124]	; (14b20 <rpc_transport_ipc_tx_init+0x1a4>)
   14aa2:	6031      	str	r1, [r6, #0]
   14aa4:	f8ce 2000 	str.w	r2, [lr]
   14aa8:	681b      	ldr	r3, [r3, #0]
   14aaa:	491e      	ldr	r1, [pc, #120]	; (14b24 <rpc_transport_ipc_tx_init+0x1a8>)
   14aac:	f502 7200 	add.w	r2, r2, #512	; 0x200
   14ab0:	602a      	str	r2, [r5, #0]
   14ab2:	4e1d      	ldr	r6, [pc, #116]	; (14b28 <rpc_transport_ipc_tx_init+0x1ac>)
   14ab4:	4a1d      	ldr	r2, [pc, #116]	; (14b2c <rpc_transport_ipc_tx_init+0x1b0>)
   14ab6:	4d1e      	ldr	r5, [pc, #120]	; (14b30 <rpc_transport_ipc_tx_init+0x1b4>)
   14ab8:	600b      	str	r3, [r1, #0]
   14aba:	f503 7300 	add.w	r3, r3, #512	; 0x200
   14abe:	491d      	ldr	r1, [pc, #116]	; (14b34 <rpc_transport_ipc_tx_init+0x1b8>)
   14ac0:	6033      	str	r3, [r6, #0]
   14ac2:	8028      	strh	r0, [r5, #0]
   14ac4:	f8c2 c514 	str.w	ip, [r2, #1300]	; 0x514
   14ac8:	6809      	ldr	r1, [r1, #0]
   14aca:	4b1b      	ldr	r3, [pc, #108]	; (14b38 <rpc_transport_ipc_tx_init+0x1bc>)
   14acc:	9103      	str	r1, [sp, #12]
   14ace:	9903      	ldr	r1, [sp, #12]
   14ad0:	f8c2 751c 	str.w	r7, [r2, #1308]	; 0x51c
   14ad4:	6819      	ldr	r1, [r3, #0]
   14ad6:	443b      	add	r3, r7
   14ad8:	9102      	str	r1, [sp, #8]
   14ada:	9902      	ldr	r1, [sp, #8]
   14adc:	f8c2 4524 	str.w	r4, [r2, #1316]	; 0x524
   14ae0:	681b      	ldr	r3, [r3, #0]
   14ae2:	9301      	str	r3, [sp, #4]
   14ae4:	9b01      	ldr	r3, [sp, #4]
   14ae6:	e001      	b.n	14aec <rpc_transport_ipc_tx_init+0x170>
   14ae8:	f24c 0007 	movw	r0, #49159	; 0xc007
   14aec:	b005      	add	sp, #20
   14aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14af2:	f24c 000e 	movw	r0, #49166	; 0xc00e
   14af6:	4770      	bx	lr
   14af8:	f24c 0004 	movw	r0, #49156	; 0xc004
   14afc:	b005      	add	sp, #20
   14afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b02:	bf00      	nop
   14b04:	2002431e 	.word	0x2002431e
   14b08:	20020b28 	.word	0x20020b28
   14b0c:	20020b14 	.word	0x20020b14
   14b10:	20020b38 	.word	0x20020b38
   14b14:	00040080 	.word	0x00040080
   14b18:	00040100 	.word	0x00040100
   14b1c:	20020b00 	.word	0x20020b00
   14b20:	20020b0c 	.word	0x20020b0c
   14b24:	20020b08 	.word	0x20020b08
   14b28:	20020b04 	.word	0x20020b04
   14b2c:	4002a000 	.word	0x4002a000
   14b30:	2002234e 	.word	0x2002234e
   14b34:	4002a514 	.word	0x4002a514
   14b38:	4002a51c 	.word	0x4002a51c
   14b3c:	20020b34 	.word	0x20020b34
   14b40:	20020b2c 	.word	0x20020b2c
   14b44:	20020b30 	.word	0x20020b30
   14b48:	00080040 	.word	0x00080040
   14b4c:	20020b10 	.word	0x20020b10

00014b50 <rpc_transport_ipc_send>:
   14b50:	2800      	cmp	r0, #0
   14b52:	d061      	beq.n	14c18 <rpc_transport_ipc_send+0xc8>
   14b54:	b4f0      	push	{r4, r5, r6, r7}
   14b56:	4b34      	ldr	r3, [pc, #208]	; (14c28 <rpc_transport_ipc_send+0xd8>)
   14b58:	b082      	sub	sp, #8
   14b5a:	681a      	ldr	r2, [r3, #0]
   14b5c:	4b33      	ldr	r3, [pc, #204]	; (14c2c <rpc_transport_ipc_send+0xdc>)
   14b5e:	4282      	cmp	r2, r0
   14b60:	d81e      	bhi.n	14ba0 <rpc_transport_ipc_send+0x50>
   14b62:	681b      	ldr	r3, [r3, #0]
   14b64:	4932      	ldr	r1, [pc, #200]	; (14c30 <rpc_transport_ipc_send+0xe0>)
   14b66:	4283      	cmp	r3, r0
   14b68:	6809      	ldr	r1, [r1, #0]
   14b6a:	d803      	bhi.n	14b74 <rpc_transport_ipc_send+0x24>
   14b6c:	4c31      	ldr	r4, [pc, #196]	; (14c34 <rpc_transport_ipc_send+0xe4>)
   14b6e:	6824      	ldr	r4, [r4, #0]
   14b70:	4284      	cmp	r4, r0
   14b72:	d849      	bhi.n	14c08 <rpc_transport_ipc_send+0xb8>
   14b74:	4281      	cmp	r1, r0
   14b76:	d90e      	bls.n	14b96 <rpc_transport_ipc_send+0x46>
   14b78:	4b2f      	ldr	r3, [pc, #188]	; (14c38 <rpc_transport_ipc_send+0xe8>)
   14b7a:	781b      	ldrb	r3, [r3, #0]
   14b7c:	2b00      	cmp	r3, #0
   14b7e:	d14e      	bne.n	14c1e <rpc_transport_ipc_send+0xce>
   14b80:	1a83      	subs	r3, r0, r2
   14b82:	492e      	ldr	r1, [pc, #184]	; (14c3c <rpc_transport_ipc_send+0xec>)
   14b84:	099f      	lsrs	r7, r3, #6
   14b86:	069b      	lsls	r3, r3, #26
   14b88:	680a      	ldr	r2, [r1, #0]
   14b8a:	4d2d      	ldr	r5, [pc, #180]	; (14c40 <rpc_transport_ipc_send+0xf0>)
   14b8c:	f04f 0403 	mov.w	r4, #3
   14b90:	f04f 0602 	mov.w	r6, #2
   14b94:	d014      	beq.n	14bc0 <rpc_transport_ipc_send+0x70>
   14b96:	f24c 0010 	movw	r0, #49168	; 0xc010
   14b9a:	b002      	add	sp, #8
   14b9c:	bcf0      	pop	{r4, r5, r6, r7}
   14b9e:	4770      	bx	lr
   14ba0:	681b      	ldr	r3, [r3, #0]
   14ba2:	4298      	cmp	r0, r3
   14ba4:	d3f7      	bcc.n	14b96 <rpc_transport_ipc_send+0x46>
   14ba6:	4a23      	ldr	r2, [pc, #140]	; (14c34 <rpc_transport_ipc_send+0xe4>)
   14ba8:	6812      	ldr	r2, [r2, #0]
   14baa:	4290      	cmp	r0, r2
   14bac:	d2f3      	bcs.n	14b96 <rpc_transport_ipc_send+0x46>
   14bae:	2401      	movs	r4, #1
   14bb0:	1ac3      	subs	r3, r0, r3
   14bb2:	4a24      	ldr	r2, [pc, #144]	; (14c44 <rpc_transport_ipc_send+0xf4>)
   14bb4:	099f      	lsrs	r7, r3, #6
   14bb6:	069b      	lsls	r3, r3, #26
   14bb8:	4626      	mov	r6, r4
   14bba:	6812      	ldr	r2, [r2, #0]
   14bbc:	4d22      	ldr	r5, [pc, #136]	; (14c48 <rpc_transport_ipc_send+0xf8>)
   14bbe:	d1ea      	bne.n	14b96 <rpc_transport_ipc_send+0x46>
   14bc0:	6841      	ldr	r1, [r0, #4]
   14bc2:	b2c9      	uxtb	r1, r1
   14bc4:	428e      	cmp	r6, r1
   14bc6:	d122      	bne.n	14c0e <rpc_transport_ipc_send+0xbe>
   14bc8:	2020      	movs	r0, #32
   14bca:	eb02 03c7 	add.w	r3, r2, r7, lsl #3
   14bce:	491f      	ldr	r1, [pc, #124]	; (14c4c <rpc_transport_ipc_send+0xfc>)
   14bd0:	685a      	ldr	r2, [r3, #4]
   14bd2:	880e      	ldrh	r6, [r1, #0]
   14bd4:	b292      	uxth	r2, r2
   14bd6:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
   14bda:	605a      	str	r2, [r3, #4]
   14bdc:	685a      	ldr	r2, [r3, #4]
   14bde:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   14be2:	f042 0201 	orr.w	r2, r2, #1
   14be6:	605a      	str	r2, [r3, #4]
   14be8:	bf00      	nop
   14bea:	3801      	subs	r0, #1
   14bec:	d1fc      	bne.n	14be8 <rpc_transport_ipc_send+0x98>
   14bee:	2201      	movs	r2, #1
   14bf0:	4b17      	ldr	r3, [pc, #92]	; (14c50 <rpc_transport_ipc_send+0x100>)
   14bf2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   14bf6:	682a      	ldr	r2, [r5, #0]
   14bf8:	880b      	ldrh	r3, [r1, #0]
   14bfa:	9201      	str	r2, [sp, #4]
   14bfc:	9a01      	ldr	r2, [sp, #4]
   14bfe:	3301      	adds	r3, #1
   14c00:	800b      	strh	r3, [r1, #0]
   14c02:	b002      	add	sp, #8
   14c04:	bcf0      	pop	{r4, r5, r6, r7}
   14c06:	4770      	bx	lr
   14c08:	4281      	cmp	r1, r0
   14c0a:	d9d0      	bls.n	14bae <rpc_transport_ipc_send+0x5e>
   14c0c:	e7b4      	b.n	14b78 <rpc_transport_ipc_send+0x28>
   14c0e:	f24c 0007 	movw	r0, #49159	; 0xc007
   14c12:	b002      	add	sp, #8
   14c14:	bcf0      	pop	{r4, r5, r6, r7}
   14c16:	4770      	bx	lr
   14c18:	f24c 000e 	movw	r0, #49166	; 0xc00e
   14c1c:	4770      	bx	lr
   14c1e:	f24c 000f 	movw	r0, #49167	; 0xc00f
   14c22:	b002      	add	sp, #8
   14c24:	bcf0      	pop	{r4, r5, r6, r7}
   14c26:	4770      	bx	lr
   14c28:	20020b10 	.word	0x20020b10
   14c2c:	20020b08 	.word	0x20020b08
   14c30:	20020b0c 	.word	0x20020b0c
   14c34:	20020b04 	.word	0x20020b04
   14c38:	2002431e 	.word	0x2002431e
   14c3c:	20020b34 	.word	0x20020b34
   14c40:	4002a00c 	.word	0x4002a00c
   14c44:	20020b2c 	.word	0x20020b2c
   14c48:	4002a004 	.word	0x4002a004
   14c4c:	2002234e 	.word	0x2002234e
   14c50:	4002a000 	.word	0x4002a000

00014c54 <rpc_transport_ipc_tx_rpc_data_alloc>:
   14c54:	4b18      	ldr	r3, [pc, #96]	; (14cb8 <rpc_transport_ipc_tx_rpc_data_alloc+0x64>)
   14c56:	781b      	ldrb	r3, [r3, #0]
   14c58:	bb63      	cbnz	r3, 14cb4 <rpc_transport_ipc_tx_rpc_data_alloc+0x60>
   14c5a:	b4f0      	push	{r4, r5, r6, r7}
   14c5c:	4a17      	ldr	r2, [pc, #92]	; (14cbc <rpc_transport_ipc_tx_rpc_data_alloc+0x68>)
   14c5e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   14c62:	6814      	ldr	r4, [r2, #0]
   14c64:	4b16      	ldr	r3, [pc, #88]	; (14cc0 <rpc_transport_ipc_tx_rpc_data_alloc+0x6c>)
   14c66:	6825      	ldr	r5, [r4, #0]
   14c68:	681e      	ldr	r6, [r3, #0]
   14c6a:	b1a5      	cbz	r5, 14c96 <rpc_transport_ipc_tx_rpc_data_alloc+0x42>
   14c6c:	4607      	mov	r7, r0
   14c6e:	00c1      	lsls	r1, r0, #3
   14c70:	1863      	adds	r3, r4, r1
   14c72:	685a      	ldr	r2, [r3, #4]
   14c74:	b2d2      	uxtb	r2, r2
   14c76:	2a03      	cmp	r2, #3
   14c78:	d104      	bne.n	14c84 <rpc_transport_ipc_tx_rpc_data_alloc+0x30>
   14c7a:	609f      	str	r7, [r3, #8]
   14c7c:	685a      	ldr	r2, [r3, #4]
   14c7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   14c82:	605a      	str	r2, [r3, #4]
   14c84:	685a      	ldr	r2, [r3, #4]
   14c86:	f012 0fff 	tst.w	r2, #255	; 0xff
   14c8a:	d101      	bne.n	14c90 <rpc_transport_ipc_tx_rpc_data_alloc+0x3c>
   14c8c:	689b      	ldr	r3, [r3, #8]
   14c8e:	b12b      	cbz	r3, 14c9c <rpc_transport_ipc_tx_rpc_data_alloc+0x48>
   14c90:	3001      	adds	r0, #1
   14c92:	42a8      	cmp	r0, r5
   14c94:	d1eb      	bne.n	14c6e <rpc_transport_ipc_tx_rpc_data_alloc+0x1a>
   14c96:	2000      	movs	r0, #0
   14c98:	bcf0      	pop	{r4, r5, r6, r7}
   14c9a:	4770      	bx	lr
   14c9c:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   14ca0:	4421      	add	r1, r4
   14ca2:	6088      	str	r0, [r1, #8]
   14ca4:	6843      	ldr	r3, [r0, #4]
   14ca6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   14caa:	f043 0302 	orr.w	r3, r3, #2
   14cae:	6043      	str	r3, [r0, #4]
   14cb0:	bcf0      	pop	{r4, r5, r6, r7}
   14cb2:	4770      	bx	lr
   14cb4:	2000      	movs	r0, #0
   14cb6:	4770      	bx	lr
   14cb8:	2002431e 	.word	0x2002431e
   14cbc:	20020b34 	.word	0x20020b34
   14cc0:	20020b30 	.word	0x20020b30

00014cc4 <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   14cc4:	b4f0      	push	{r4, r5, r6, r7}
   14cc6:	4a15      	ldr	r2, [pc, #84]	; (14d1c <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x58>)
   14cc8:	4b15      	ldr	r3, [pc, #84]	; (14d20 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x5c>)
   14cca:	6814      	ldr	r4, [r2, #0]
   14ccc:	681e      	ldr	r6, [r3, #0]
   14cce:	6825      	ldr	r5, [r4, #0]
   14cd0:	b1ad      	cbz	r5, 14cfe <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x3a>
   14cd2:	2000      	movs	r0, #0
   14cd4:	4607      	mov	r7, r0
   14cd6:	00c1      	lsls	r1, r0, #3
   14cd8:	1863      	adds	r3, r4, r1
   14cda:	685a      	ldr	r2, [r3, #4]
   14cdc:	b2d2      	uxtb	r2, r2
   14cde:	2a03      	cmp	r2, #3
   14ce0:	d104      	bne.n	14cec <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x28>
   14ce2:	609f      	str	r7, [r3, #8]
   14ce4:	685a      	ldr	r2, [r3, #4]
   14ce6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   14cea:	605a      	str	r2, [r3, #4]
   14cec:	685a      	ldr	r2, [r3, #4]
   14cee:	f012 0fff 	tst.w	r2, #255	; 0xff
   14cf2:	d101      	bne.n	14cf8 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x34>
   14cf4:	689b      	ldr	r3, [r3, #8]
   14cf6:	b12b      	cbz	r3, 14d04 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x40>
   14cf8:	3001      	adds	r0, #1
   14cfa:	4285      	cmp	r5, r0
   14cfc:	d1eb      	bne.n	14cd6 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x12>
   14cfe:	2000      	movs	r0, #0
   14d00:	bcf0      	pop	{r4, r5, r6, r7}
   14d02:	4770      	bx	lr
   14d04:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   14d08:	4421      	add	r1, r4
   14d0a:	6088      	str	r0, [r1, #8]
   14d0c:	6843      	ldr	r3, [r0, #4]
   14d0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   14d12:	f043 0301 	orr.w	r3, r3, #1
   14d16:	6043      	str	r3, [r0, #4]
   14d18:	bcf0      	pop	{r4, r5, r6, r7}
   14d1a:	4770      	bx	lr
   14d1c:	20020b2c 	.word	0x20020b2c
   14d20:	20020b28 	.word	0x20020b28

00014d24 <rpc_transport_ipc_tx_data_alloc>:
   14d24:	4b03      	ldr	r3, [pc, #12]	; (14d34 <rpc_transport_ipc_tx_data_alloc+0x10>)
   14d26:	781b      	ldrb	r3, [r3, #0]
   14d28:	b90b      	cbnz	r3, 14d2e <rpc_transport_ipc_tx_data_alloc+0xa>
   14d2a:	f006 b913 	b.w	1af54 <nrf_shared_malloc>
   14d2e:	2000      	movs	r0, #0
   14d30:	4770      	bx	lr
   14d32:	bf00      	nop
   14d34:	2002431e 	.word	0x2002431e

00014d38 <rpc_transport_ipc_tx_suspend>:
   14d38:	2201      	movs	r2, #1
   14d3a:	4b01      	ldr	r3, [pc, #4]	; (14d40 <rpc_transport_ipc_tx_suspend+0x8>)
   14d3c:	701a      	strb	r2, [r3, #0]
   14d3e:	4770      	bx	lr
   14d40:	2002431e 	.word	0x2002431e

00014d44 <secure_client_socket>:
   14d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14d48:	f04f 3cff 	mov.w	ip, #4294967295
   14d4c:	460c      	mov	r4, r1
   14d4e:	680b      	ldr	r3, [r1, #0]
   14d50:	4f45      	ldr	r7, [pc, #276]	; (14e68 <secure_client_socket+0x124>)
   14d52:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   14d56:	600b      	str	r3, [r1, #0]
   14d58:	680b      	ldr	r3, [r1, #0]
   14d5a:	00c6      	lsls	r6, r0, #3
   14d5c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   14d60:	600b      	str	r3, [r1, #0]
   14d62:	eb07 0a06 	add.w	sl, r7, r6
   14d66:	b084      	sub	sp, #16
   14d68:	f8da 3004 	ldr.w	r3, [sl, #4]
   14d6c:	6989      	ldr	r1, [r1, #24]
   14d6e:	f247 0281 	movw	r2, #28801	; 0x7081
   14d72:	4605      	mov	r5, r0
   14d74:	f8d4 8000 	ldr.w	r8, [r4]
   14d78:	e9cd cc02 	strd	ip, ip, [sp, #8]
   14d7c:	f000 fd76 	bl	1586c <ip_interface_request_create>
   14d80:	2800      	cmp	r0, #0
   14d82:	d06c      	beq.n	14e5e <secure_client_socket+0x11a>
   14d84:	f8da 2004 	ldr.w	r2, [sl, #4]
   14d88:	4681      	mov	r9, r0
   14d8a:	2a00      	cmp	r2, #0
   14d8c:	d15c      	bne.n	14e48 <secure_client_socket+0x104>
   14d8e:	4b37      	ldr	r3, [pc, #220]	; (14e6c <secure_client_socket+0x128>)
   14d90:	1971      	adds	r1, r6, r5
   14d92:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   14d96:	2224      	movs	r2, #36	; 0x24
   14d98:	f109 0014 	add.w	r0, r9, #20
   14d9c:	f009 fc59 	bl	1e652 <memcpy>
   14da0:	f8d9 3008 	ldr.w	r3, [r9, #8]
   14da4:	4649      	mov	r1, r9
   14da6:	3324      	adds	r3, #36	; 0x24
   14da8:	f8c9 3008 	str.w	r3, [r9, #8]
   14dac:	6822      	ldr	r2, [r4, #0]
   14dae:	4643      	mov	r3, r8
   14db0:	0c12      	lsrs	r2, r2, #16
   14db2:	0412      	lsls	r2, r2, #16
   14db4:	f042 020a 	orr.w	r2, r2, #10
   14db8:	6022      	str	r2, [r4, #0]
   14dba:	4620      	mov	r0, r4
   14dbc:	f247 0281 	movw	r2, #28801	; 0x7081
   14dc0:	f000 fd74 	bl	158ac <ip_interface_request_send>
   14dc4:	4603      	mov	r3, r0
   14dc6:	b968      	cbnz	r0, 14de4 <secure_client_socket+0xa0>
   14dc8:	6823      	ldr	r3, [r4, #0]
   14dca:	00db      	lsls	r3, r3, #3
   14dcc:	d40e      	bmi.n	14dec <secure_client_socket+0xa8>
   14dce:	ab03      	add	r3, sp, #12
   14dd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14dd4:	210b      	movs	r1, #11
   14dd6:	4628      	mov	r0, r5
   14dd8:	f000 fd7c 	bl	158d4 <ip_interface_wait>
   14ddc:	4603      	mov	r3, r0
   14dde:	b150      	cbz	r0, 14df6 <secure_client_socket+0xb2>
   14de0:	f8c4 8000 	str.w	r8, [r4]
   14de4:	4618      	mov	r0, r3
   14de6:	b004      	add	sp, #16
   14de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14dec:	2373      	movs	r3, #115	; 0x73
   14dee:	4618      	mov	r0, r3
   14df0:	b004      	add	sp, #16
   14df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14df6:	220c      	movs	r2, #12
   14df8:	ab02      	add	r3, sp, #8
   14dfa:	4611      	mov	r1, r2
   14dfc:	4628      	mov	r0, r5
   14dfe:	f000 fd69 	bl	158d4 <ip_interface_wait>
   14e02:	4603      	mov	r3, r0
   14e04:	bb30      	cbnz	r0, 14e54 <secure_client_socket+0x110>
   14e06:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   14e0a:	b138      	cbz	r0, 14e1c <secure_client_socket+0xd8>
   14e0c:	9301      	str	r3, [sp, #4]
   14e0e:	f006 f895 	bl	1af3c <nrf_free>
   14e12:	9b01      	ldr	r3, [sp, #4]
   14e14:	443e      	add	r6, r7
   14e16:	6073      	str	r3, [r6, #4]
   14e18:	f847 3035 	str.w	r3, [r7, r5, lsl #3]
   14e1c:	4618      	mov	r0, r3
   14e1e:	6822      	ldr	r2, [r4, #0]
   14e20:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   14e24:	6022      	str	r2, [r4, #0]
   14e26:	6822      	ldr	r2, [r4, #0]
   14e28:	0c12      	lsrs	r2, r2, #16
   14e2a:	0412      	lsls	r2, r2, #16
   14e2c:	f042 020c 	orr.w	r2, r2, #12
   14e30:	6022      	str	r2, [r4, #0]
   14e32:	6822      	ldr	r2, [r4, #0]
   14e34:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   14e38:	6022      	str	r2, [r4, #0]
   14e3a:	6822      	ldr	r2, [r4, #0]
   14e3c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   14e40:	6022      	str	r2, [r4, #0]
   14e42:	b004      	add	sp, #16
   14e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14e48:	f857 1035 	ldr.w	r1, [r7, r5, lsl #3]
   14e4c:	6800      	ldr	r0, [r0, #0]
   14e4e:	f009 fc00 	bl	1e652 <memcpy>
   14e52:	e79c      	b.n	14d8e <secure_client_socket+0x4a>
   14e54:	2b73      	cmp	r3, #115	; 0x73
   14e56:	d0c5      	beq.n	14de4 <secure_client_socket+0xa0>
   14e58:	f8c4 8000 	str.w	r8, [r4]
   14e5c:	e7c2      	b.n	14de4 <secure_client_socket+0xa0>
   14e5e:	230c      	movs	r3, #12
   14e60:	4618      	mov	r0, r3
   14e62:	b004      	add	sp, #16
   14e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14e68:	20020c94 	.word	0x20020c94
   14e6c:	20020b50 	.word	0x20020b50

00014e70 <tls_interface_init>:
   14e70:	2201      	movs	r2, #1
   14e72:	4b02      	ldr	r3, [pc, #8]	; (14e7c <tls_interface_init+0xc>)
   14e74:	2000      	movs	r0, #0
   14e76:	701a      	strb	r2, [r3, #0]
   14e78:	4770      	bx	lr
   14e7a:	bf00      	nop
   14e7c:	2002431f 	.word	0x2002431f

00014e80 <tls_interface_open>:
   14e80:	b538      	push	{r3, r4, r5, lr}
   14e82:	4b23      	ldr	r3, [pc, #140]	; (14f10 <tls_interface_open+0x90>)
   14e84:	781b      	ldrb	r3, [r3, #0]
   14e86:	2b00      	cmp	r3, #0
   14e88:	d03c      	beq.n	14f04 <tls_interface_open+0x84>
   14e8a:	1e4b      	subs	r3, r1, #1
   14e8c:	2b01      	cmp	r3, #1
   14e8e:	d808      	bhi.n	14ea2 <tls_interface_open+0x22>
   14e90:	4614      	mov	r4, r2
   14e92:	b162      	cbz	r2, 14eae <tls_interface_open+0x2e>
   14e94:	2901      	cmp	r1, #1
   14e96:	d02d      	beq.n	14ef4 <tls_interface_open+0x74>
   14e98:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   14e9c:	bf08      	it	eq
   14e9e:	2202      	moveq	r2, #2
   14ea0:	d00d      	beq.n	14ebe <tls_interface_open+0x3e>
   14ea2:	2029      	movs	r0, #41	; 0x29
   14ea4:	f7fc fb10 	bl	114c8 <bsd_os_errno_set>
   14ea8:	f04f 35ff 	mov.w	r5, #4294967295
   14eac:	e020      	b.n	14ef0 <tls_interface_open+0x70>
   14eae:	2901      	cmp	r1, #1
   14eb0:	bf0b      	itete	eq
   14eb2:	2201      	moveq	r2, #1
   14eb4:	2202      	movne	r2, #2
   14eb6:	f44f 7482 	moveq.w	r4, #260	; 0x104
   14eba:	f44f 7487 	movne.w	r4, #270	; 0x10e
   14ebe:	f000 fd3b 	bl	15938 <ip_interface_open>
   14ec2:	1e05      	subs	r5, r0, #0
   14ec4:	db1b      	blt.n	14efe <tls_interface_open+0x7e>
   14ec6:	4b13      	ldr	r3, [pc, #76]	; (14f14 <tls_interface_open+0x94>)
   14ec8:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
   14ecc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   14ed0:	2224      	movs	r2, #36	; 0x24
   14ed2:	4911      	ldr	r1, [pc, #68]	; (14f18 <tls_interface_open+0x98>)
   14ed4:	f009 fbbd 	bl	1e652 <memcpy>
   14ed8:	4628      	mov	r0, r5
   14eda:	f006 fc7d 	bl	1b7d8 <interface_socket_from_handle_get>
   14ede:	6803      	ldr	r3, [r0, #0]
   14ee0:	6144      	str	r4, [r0, #20]
   14ee2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   14ee6:	6003      	str	r3, [r0, #0]
   14ee8:	6803      	ldr	r3, [r0, #0]
   14eea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   14eee:	6003      	str	r3, [r0, #0]
   14ef0:	4628      	mov	r0, r5
   14ef2:	bd38      	pop	{r3, r4, r5, pc}
   14ef4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   14ef8:	d1d3      	bne.n	14ea2 <tls_interface_open+0x22>
   14efa:	460a      	mov	r2, r1
   14efc:	e7df      	b.n	14ebe <tls_interface_open+0x3e>
   14efe:	f04f 35ff 	mov.w	r5, #4294967295
   14f02:	e7f5      	b.n	14ef0 <tls_interface_open+0x70>
   14f04:	2070      	movs	r0, #112	; 0x70
   14f06:	f7fc fadf 	bl	114c8 <bsd_os_errno_set>
   14f0a:	f04f 35ff 	mov.w	r5, #4294967295
   14f0e:	e7ef      	b.n	14ef0 <tls_interface_open+0x70>
   14f10:	2002431f 	.word	0x2002431f
   14f14:	20020b50 	.word	0x20020b50
   14f18:	00020d94 	.word	0x00020d94

00014f1c <tls_interface_close>:
   14f1c:	b538      	push	{r3, r4, r5, lr}
   14f1e:	4604      	mov	r4, r0
   14f20:	f006 fc5a 	bl	1b7d8 <interface_socket_from_handle_get>
   14f24:	b180      	cbz	r0, 14f48 <tls_interface_close+0x2c>
   14f26:	4d0b      	ldr	r5, [pc, #44]	; (14f54 <tls_interface_close+0x38>)
   14f28:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   14f2c:	b138      	cbz	r0, 14f3e <tls_interface_close+0x22>
   14f2e:	f006 f805 	bl	1af3c <nrf_free>
   14f32:	2300      	movs	r3, #0
   14f34:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   14f38:	f845 3034 	str.w	r3, [r5, r4, lsl #3]
   14f3c:	6053      	str	r3, [r2, #4]
   14f3e:	4620      	mov	r0, r4
   14f40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   14f44:	f000 bdbe 	b.w	15ac4 <ip_interface_close>
   14f48:	2009      	movs	r0, #9
   14f4a:	f7fc fabd 	bl	114c8 <bsd_os_errno_set>
   14f4e:	f04f 30ff 	mov.w	r0, #4294967295
   14f52:	bd38      	pop	{r3, r4, r5, pc}
   14f54:	20020c94 	.word	0x20020c94

00014f58 <tls_interface_sendto>:
   14f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f5c:	b087      	sub	sp, #28
   14f5e:	9103      	str	r1, [sp, #12]
   14f60:	4616      	mov	r6, r2
   14f62:	469b      	mov	fp, r3
   14f64:	4682      	mov	sl, r0
   14f66:	f006 fc37 	bl	1b7d8 <interface_socket_from_handle_get>
   14f6a:	2800      	cmp	r0, #0
   14f6c:	f000 8082 	beq.w	15074 <tls_interface_sendto+0x11c>
   14f70:	2400      	movs	r4, #0
   14f72:	f01b 0f02 	tst.w	fp, #2
   14f76:	bf08      	it	eq
   14f78:	6807      	ldreq	r7, [r0, #0]
   14f7a:	4a40      	ldr	r2, [pc, #256]	; (1507c <tls_interface_sendto+0x124>)
   14f7c:	bf08      	it	eq
   14f7e:	f087 5780 	eoreq.w	r7, r7, #268435456	; 0x10000000
   14f82:	eb0a 09ca 	add.w	r9, sl, sl, lsl #3
   14f86:	4605      	mov	r5, r0
   14f88:	bf0c      	ite	eq
   14f8a:	f3c7 7700 	ubfxeq	r7, r7, #28, #1
   14f8e:	2700      	movne	r7, #0
   14f90:	46a0      	mov	r8, r4
   14f92:	f04f 33ff 	mov.w	r3, #4294967295
   14f96:	eb02 0989 	add.w	r9, r2, r9, lsl #2
   14f9a:	e00f      	b.n	14fbc <tls_interface_sendto+0x64>
   14f9c:	f899 2000 	ldrb.w	r2, [r9]
   14fa0:	2a02      	cmp	r2, #2
   14fa2:	d061      	beq.n	15068 <tls_interface_sendto+0x110>
   14fa4:	692a      	ldr	r2, [r5, #16]
   14fa6:	2a01      	cmp	r2, #1
   14fa8:	d061      	beq.n	1506e <tls_interface_sendto+0x116>
   14faa:	2b00      	cmp	r3, #0
   14fac:	db30      	blt.n	15010 <tls_interface_sendto+0xb8>
   14fae:	f1b8 0f00 	cmp.w	r8, #0
   14fb2:	dc18      	bgt.n	14fe6 <tls_interface_sendto+0x8e>
   14fb4:	441c      	add	r4, r3
   14fb6:	b1df      	cbz	r7, 14ff0 <tls_interface_sendto+0x98>
   14fb8:	42a6      	cmp	r6, r4
   14fba:	dd19      	ble.n	14ff0 <tls_interface_sendto+0x98>
   14fbc:	6829      	ldr	r1, [r5, #0]
   14fbe:	1b32      	subs	r2, r6, r4
   14fc0:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   14fc4:	b289      	uxth	r1, r1
   14fc6:	bfa8      	it	ge
   14fc8:	f44f 6200 	movge.w	r2, #2048	; 0x800
   14fcc:	290c      	cmp	r1, #12
   14fce:	d013      	beq.n	14ff8 <tls_interface_sendto+0xa0>
   14fd0:	6829      	ldr	r1, [r5, #0]
   14fd2:	b289      	uxth	r1, r1
   14fd4:	290b      	cmp	r1, #11
   14fd6:	d0e1      	beq.n	14f9c <tls_interface_sendto+0x44>
   14fd8:	6929      	ldr	r1, [r5, #16]
   14fda:	2901      	cmp	r1, #1
   14fdc:	d024      	beq.n	15028 <tls_interface_sendto+0xd0>
   14fde:	2902      	cmp	r1, #2
   14fe0:	d01a      	beq.n	15018 <tls_interface_sendto+0xc0>
   14fe2:	f04f 0839 	mov.w	r8, #57	; 0x39
   14fe6:	4640      	mov	r0, r8
   14fe8:	f7fc fa6e 	bl	114c8 <bsd_os_errno_set>
   14fec:	f04f 34ff 	mov.w	r4, #4294967295
   14ff0:	4620      	mov	r0, r4
   14ff2:	b007      	add	sp, #28
   14ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ff8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   14ffa:	9903      	ldr	r1, [sp, #12]
   14ffc:	9301      	str	r3, [sp, #4]
   14ffe:	9b10      	ldr	r3, [sp, #64]	; 0x40
   15000:	4421      	add	r1, r4
   15002:	9300      	str	r3, [sp, #0]
   15004:	4650      	mov	r0, sl
   15006:	465b      	mov	r3, fp
   15008:	f000 fdce 	bl	15ba8 <ip_interface_sendto>
   1500c:	1e03      	subs	r3, r0, #0
   1500e:	dad1      	bge.n	14fb4 <tls_interface_sendto+0x5c>
   15010:	f1b8 0f00 	cmp.w	r8, #0
   15014:	ddea      	ble.n	14fec <tls_interface_sendto+0x94>
   15016:	e7e6      	b.n	14fe6 <tls_interface_sendto+0x8e>
   15018:	6829      	ldr	r1, [r5, #0]
   1501a:	b289      	uxth	r1, r1
   1501c:	2902      	cmp	r1, #2
   1501e:	d007      	beq.n	15030 <tls_interface_sendto+0xd8>
   15020:	6829      	ldr	r1, [r5, #0]
   15022:	b289      	uxth	r1, r1
   15024:	2904      	cmp	r1, #4
   15026:	d003      	beq.n	15030 <tls_interface_sendto+0xd8>
   15028:	6829      	ldr	r1, [r5, #0]
   1502a:	b289      	uxth	r1, r1
   1502c:	2905      	cmp	r1, #5
   1502e:	d1d8      	bne.n	14fe2 <tls_interface_sendto+0x8a>
   15030:	f899 1000 	ldrb.w	r1, [r9]
   15034:	2902      	cmp	r1, #2
   15036:	d1b8      	bne.n	14faa <tls_interface_sendto+0x52>
   15038:	4629      	mov	r1, r5
   1503a:	4650      	mov	r0, sl
   1503c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   15040:	f7ff fe80 	bl	14d44 <secure_client_socket>
   15044:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   15048:	4680      	mov	r8, r0
   1504a:	2800      	cmp	r0, #0
   1504c:	d1ad      	bne.n	14faa <tls_interface_sendto+0x52>
   1504e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   15050:	9903      	ldr	r1, [sp, #12]
   15052:	9301      	str	r3, [sp, #4]
   15054:	9b10      	ldr	r3, [sp, #64]	; 0x40
   15056:	4421      	add	r1, r4
   15058:	9300      	str	r3, [sp, #0]
   1505a:	4650      	mov	r0, sl
   1505c:	465b      	mov	r3, fp
   1505e:	f000 fda3 	bl	15ba8 <ip_interface_sendto>
   15062:	1e03      	subs	r3, r0, #0
   15064:	daa6      	bge.n	14fb4 <tls_interface_sendto+0x5c>
   15066:	e7c1      	b.n	14fec <tls_interface_sendto+0x94>
   15068:	f04f 0823 	mov.w	r8, #35	; 0x23
   1506c:	e7bb      	b.n	14fe6 <tls_interface_sendto+0x8e>
   1506e:	f04f 082a 	mov.w	r8, #42	; 0x2a
   15072:	e7b8      	b.n	14fe6 <tls_interface_sendto+0x8e>
   15074:	f04f 0809 	mov.w	r8, #9
   15078:	e7b5      	b.n	14fe6 <tls_interface_sendto+0x8e>
   1507a:	bf00      	nop
   1507c:	20020b50 	.word	0x20020b50

00015080 <tls_interface_recvfrom>:
   15080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15084:	460d      	mov	r5, r1
   15086:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   1508a:	4616      	mov	r6, r2
   1508c:	461f      	mov	r7, r3
   1508e:	4604      	mov	r4, r0
   15090:	f006 fba2 	bl	1b7d8 <interface_socket_from_handle_get>
   15094:	2800      	cmp	r0, #0
   15096:	d038      	beq.n	1510a <tls_interface_recvfrom+0x8a>
   15098:	6803      	ldr	r3, [r0, #0]
   1509a:	b29b      	uxth	r3, r3
   1509c:	2b0c      	cmp	r3, #12
   1509e:	d00f      	beq.n	150c0 <tls_interface_recvfrom+0x40>
   150a0:	6803      	ldr	r3, [r0, #0]
   150a2:	b29b      	uxth	r3, r3
   150a4:	2b0d      	cmp	r3, #13
   150a6:	d00b      	beq.n	150c0 <tls_interface_recvfrom+0x40>
   150a8:	6903      	ldr	r3, [r0, #16]
   150aa:	2b01      	cmp	r3, #1
   150ac:	d01a      	beq.n	150e4 <tls_interface_recvfrom+0x64>
   150ae:	2b02      	cmp	r3, #2
   150b0:	d010      	beq.n	150d4 <tls_interface_recvfrom+0x54>
   150b2:	2023      	movs	r0, #35	; 0x23
   150b4:	f7fc fa08 	bl	114c8 <bsd_os_errno_set>
   150b8:	f04f 30ff 	mov.w	r0, #4294967295
   150bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   150c0:	e9cd 8908 	strd	r8, r9, [sp, #32]
   150c4:	463b      	mov	r3, r7
   150c6:	4632      	mov	r2, r6
   150c8:	4629      	mov	r1, r5
   150ca:	4620      	mov	r0, r4
   150cc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   150d0:	f000 bed0 	b.w	15e74 <ip_interface_recvfrom>
   150d4:	6803      	ldr	r3, [r0, #0]
   150d6:	b29b      	uxth	r3, r3
   150d8:	2b02      	cmp	r3, #2
   150da:	d007      	beq.n	150ec <tls_interface_recvfrom+0x6c>
   150dc:	6803      	ldr	r3, [r0, #0]
   150de:	b29b      	uxth	r3, r3
   150e0:	2b04      	cmp	r3, #4
   150e2:	d003      	beq.n	150ec <tls_interface_recvfrom+0x6c>
   150e4:	6803      	ldr	r3, [r0, #0]
   150e6:	b29b      	uxth	r3, r3
   150e8:	2b05      	cmp	r3, #5
   150ea:	d1e2      	bne.n	150b2 <tls_interface_recvfrom+0x32>
   150ec:	4b08      	ldr	r3, [pc, #32]	; (15110 <tls_interface_recvfrom+0x90>)
   150ee:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   150f2:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   150f6:	2b02      	cmp	r3, #2
   150f8:	d1db      	bne.n	150b2 <tls_interface_recvfrom+0x32>
   150fa:	4601      	mov	r1, r0
   150fc:	4620      	mov	r0, r4
   150fe:	f7ff fe21 	bl	14d44 <secure_client_socket>
   15102:	2800      	cmp	r0, #0
   15104:	d0dc      	beq.n	150c0 <tls_interface_recvfrom+0x40>
   15106:	dcd5      	bgt.n	150b4 <tls_interface_recvfrom+0x34>
   15108:	e7d6      	b.n	150b8 <tls_interface_recvfrom+0x38>
   1510a:	2009      	movs	r0, #9
   1510c:	e7d2      	b.n	150b4 <tls_interface_recvfrom+0x34>
   1510e:	bf00      	nop
   15110:	20020b50 	.word	0x20020b50

00015114 <tls_interface_bind>:
   15114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15118:	b082      	sub	sp, #8
   1511a:	460e      	mov	r6, r1
   1511c:	4617      	mov	r7, r2
   1511e:	4605      	mov	r5, r0
   15120:	f006 fb5a 	bl	1b7d8 <interface_socket_from_handle_get>
   15124:	2800      	cmp	r0, #0
   15126:	d069      	beq.n	151fc <tls_interface_bind+0xe8>
   15128:	6803      	ldr	r3, [r0, #0]
   1512a:	4604      	mov	r4, r0
   1512c:	b29b      	uxth	r3, r3
   1512e:	2b02      	cmp	r3, #2
   15130:	d158      	bne.n	151e4 <tls_interface_bind+0xd0>
   15132:	463a      	mov	r2, r7
   15134:	4631      	mov	r1, r6
   15136:	4628      	mov	r0, r5
   15138:	f001 f9ac 	bl	16494 <ip_interface_bind>
   1513c:	2800      	cmp	r0, #0
   1513e:	d148      	bne.n	151d2 <tls_interface_bind+0xbe>
   15140:	00ee      	lsls	r6, r5, #3
   15142:	4f2f      	ldr	r7, [pc, #188]	; (15200 <tls_interface_bind+0xec>)
   15144:	1973      	adds	r3, r6, r5
   15146:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   1514a:	2b01      	cmp	r3, #1
   1514c:	d002      	beq.n	15154 <tls_interface_bind+0x40>
   1514e:	b002      	add	sp, #8
   15150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15154:	f04f 3cff 	mov.w	ip, #4294967295
   15158:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 15204 <tls_interface_bind+0xf0>
   1515c:	f247 0281 	movw	r2, #28801	; 0x7081
   15160:	eb0a 0906 	add.w	r9, sl, r6
   15164:	f8d9 3004 	ldr.w	r3, [r9, #4]
   15168:	69a1      	ldr	r1, [r4, #24]
   1516a:	4628      	mov	r0, r5
   1516c:	f8cd c004 	str.w	ip, [sp, #4]
   15170:	f000 fb7c 	bl	1586c <ip_interface_request_create>
   15174:	4680      	mov	r8, r0
   15176:	2800      	cmp	r0, #0
   15178:	d03e      	beq.n	151f8 <tls_interface_bind+0xe4>
   1517a:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1517e:	bbaa      	cbnz	r2, 151ec <tls_interface_bind+0xd8>
   15180:	1971      	adds	r1, r6, r5
   15182:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   15186:	2224      	movs	r2, #36	; 0x24
   15188:	f108 0014 	add.w	r0, r8, #20
   1518c:	f009 fa61 	bl	1e652 <memcpy>
   15190:	f8d8 3008 	ldr.w	r3, [r8, #8]
   15194:	4641      	mov	r1, r8
   15196:	3324      	adds	r3, #36	; 0x24
   15198:	f8c8 3008 	str.w	r3, [r8, #8]
   1519c:	6822      	ldr	r2, [r4, #0]
   1519e:	2304      	movs	r3, #4
   151a0:	0c12      	lsrs	r2, r2, #16
   151a2:	0412      	lsls	r2, r2, #16
   151a4:	f042 020a 	orr.w	r2, r2, #10
   151a8:	6022      	str	r2, [r4, #0]
   151aa:	4620      	mov	r0, r4
   151ac:	f247 0281 	movw	r2, #28801	; 0x7081
   151b0:	f000 fb7c 	bl	158ac <ip_interface_request_send>
   151b4:	b968      	cbnz	r0, 151d2 <tls_interface_bind+0xbe>
   151b6:	6823      	ldr	r3, [r4, #0]
   151b8:	00db      	lsls	r3, r3, #3
   151ba:	d415      	bmi.n	151e8 <tls_interface_bind+0xd4>
   151bc:	4628      	mov	r0, r5
   151be:	ab01      	add	r3, sp, #4
   151c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   151c4:	210b      	movs	r1, #11
   151c6:	f000 fb85 	bl	158d4 <ip_interface_wait>
   151ca:	2800      	cmp	r0, #0
   151cc:	d0bf      	beq.n	1514e <tls_interface_bind+0x3a>
   151ce:	2304      	movs	r3, #4
   151d0:	6023      	str	r3, [r4, #0]
   151d2:	2800      	cmp	r0, #0
   151d4:	ddbb      	ble.n	1514e <tls_interface_bind+0x3a>
   151d6:	f7fc f977 	bl	114c8 <bsd_os_errno_set>
   151da:	f04f 30ff 	mov.w	r0, #4294967295
   151de:	b002      	add	sp, #8
   151e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   151e4:	202d      	movs	r0, #45	; 0x2d
   151e6:	e7f6      	b.n	151d6 <tls_interface_bind+0xc2>
   151e8:	2073      	movs	r0, #115	; 0x73
   151ea:	e7f4      	b.n	151d6 <tls_interface_bind+0xc2>
   151ec:	f85a 1035 	ldr.w	r1, [sl, r5, lsl #3]
   151f0:	6800      	ldr	r0, [r0, #0]
   151f2:	f009 fa2e 	bl	1e652 <memcpy>
   151f6:	e7c3      	b.n	15180 <tls_interface_bind+0x6c>
   151f8:	200c      	movs	r0, #12
   151fa:	e7ec      	b.n	151d6 <tls_interface_bind+0xc2>
   151fc:	2009      	movs	r0, #9
   151fe:	e7ea      	b.n	151d6 <tls_interface_bind+0xc2>
   15200:	20020b50 	.word	0x20020b50
   15204:	20020c94 	.word	0x20020c94

00015208 <tls_interface_connect>:
   15208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1520a:	460e      	mov	r6, r1
   1520c:	4617      	mov	r7, r2
   1520e:	4604      	mov	r4, r0
   15210:	f006 fae2 	bl	1b7d8 <interface_socket_from_handle_get>
   15214:	b1e8      	cbz	r0, 15252 <tls_interface_connect+0x4a>
   15216:	4b13      	ldr	r3, [pc, #76]	; (15264 <tls_interface_connect+0x5c>)
   15218:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   1521c:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   15220:	2b02      	cmp	r3, #2
   15222:	d11c      	bne.n	1525e <tls_interface_connect+0x56>
   15224:	6803      	ldr	r3, [r0, #0]
   15226:	4605      	mov	r5, r0
   15228:	b29b      	uxth	r3, r3
   1522a:	2b02      	cmp	r3, #2
   1522c:	d003      	beq.n	15236 <tls_interface_connect+0x2e>
   1522e:	6803      	ldr	r3, [r0, #0]
   15230:	b29b      	uxth	r3, r3
   15232:	2b04      	cmp	r3, #4
   15234:	d113      	bne.n	1525e <tls_interface_connect+0x56>
   15236:	463a      	mov	r2, r7
   15238:	4631      	mov	r1, r6
   1523a:	4620      	mov	r0, r4
   1523c:	f000 ff42 	bl	160c4 <ip_interface_connect>
   15240:	b110      	cbz	r0, 15248 <tls_interface_connect+0x40>
   15242:	2800      	cmp	r0, #0
   15244:	dc06      	bgt.n	15254 <tls_interface_connect+0x4c>
   15246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15248:	4629      	mov	r1, r5
   1524a:	4620      	mov	r0, r4
   1524c:	f7ff fd7a 	bl	14d44 <secure_client_socket>
   15250:	e7f7      	b.n	15242 <tls_interface_connect+0x3a>
   15252:	2009      	movs	r0, #9
   15254:	f7fc f938 	bl	114c8 <bsd_os_errno_set>
   15258:	f04f 30ff 	mov.w	r0, #4294967295
   1525c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1525e:	202d      	movs	r0, #45	; 0x2d
   15260:	e7f8      	b.n	15254 <tls_interface_connect+0x4c>
   15262:	bf00      	nop
   15264:	20020b50 	.word	0x20020b50

00015268 <tls_interface_listen>:
   15268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1526c:	b085      	sub	sp, #20
   1526e:	4689      	mov	r9, r1
   15270:	4605      	mov	r5, r0
   15272:	f006 fab1 	bl	1b7d8 <interface_socket_from_handle_get>
   15276:	2800      	cmp	r0, #0
   15278:	f000 8084 	beq.w	15384 <tls_interface_listen+0x11c>
   1527c:	6803      	ldr	r3, [r0, #0]
   1527e:	4604      	mov	r4, r0
   15280:	00da      	lsls	r2, r3, #3
   15282:	d47d      	bmi.n	15380 <tls_interface_listen+0x118>
   15284:	6903      	ldr	r3, [r0, #16]
   15286:	2b01      	cmp	r3, #1
   15288:	d17a      	bne.n	15380 <tls_interface_listen+0x118>
   1528a:	6803      	ldr	r3, [r0, #0]
   1528c:	b29b      	uxth	r3, r3
   1528e:	2b04      	cmp	r3, #4
   15290:	d05d      	beq.n	1534e <tls_interface_listen+0xe6>
   15292:	6823      	ldr	r3, [r4, #0]
   15294:	b29b      	uxth	r3, r3
   15296:	2b0b      	cmp	r3, #11
   15298:	d172      	bne.n	15380 <tls_interface_listen+0x118>
   1529a:	4a3b      	ldr	r2, [pc, #236]	; (15388 <tls_interface_listen+0x120>)
   1529c:	00ee      	lsls	r6, r5, #3
   1529e:	1973      	adds	r3, r6, r5
   152a0:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   152a4:	9201      	str	r2, [sp, #4]
   152a6:	2b01      	cmp	r3, #1
   152a8:	d16a      	bne.n	15380 <tls_interface_listen+0x118>
   152aa:	2201      	movs	r2, #1
   152ac:	9901      	ldr	r1, [sp, #4]
   152ae:	1973      	adds	r3, r6, r5
   152b0:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
   152b4:	6823      	ldr	r3, [r4, #0]
   152b6:	2b0b      	cmp	r3, #11
   152b8:	d040      	beq.n	1533c <tls_interface_listen+0xd4>
   152ba:	f04f 3cff 	mov.w	ip, #4294967295
   152be:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 1538c <tls_interface_listen+0x124>
   152c2:	f247 0281 	movw	r2, #28801	; 0x7081
   152c6:	eb0a 0806 	add.w	r8, sl, r6
   152ca:	f8d8 3004 	ldr.w	r3, [r8, #4]
   152ce:	69a1      	ldr	r1, [r4, #24]
   152d0:	4628      	mov	r0, r5
   152d2:	6827      	ldr	r7, [r4, #0]
   152d4:	f8cd c00c 	str.w	ip, [sp, #12]
   152d8:	f000 fac8 	bl	1586c <ip_interface_request_create>
   152dc:	4683      	mov	fp, r0
   152de:	2800      	cmp	r0, #0
   152e0:	d046      	beq.n	15370 <tls_interface_listen+0x108>
   152e2:	f8d8 2004 	ldr.w	r2, [r8, #4]
   152e6:	2a00      	cmp	r2, #0
   152e8:	d144      	bne.n	15374 <tls_interface_listen+0x10c>
   152ea:	9b01      	ldr	r3, [sp, #4]
   152ec:	1971      	adds	r1, r6, r5
   152ee:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   152f2:	2224      	movs	r2, #36	; 0x24
   152f4:	f10b 0014 	add.w	r0, fp, #20
   152f8:	f009 f9ab 	bl	1e652 <memcpy>
   152fc:	f8db 2008 	ldr.w	r2, [fp, #8]
   15300:	4659      	mov	r1, fp
   15302:	3224      	adds	r2, #36	; 0x24
   15304:	f8cb 2008 	str.w	r2, [fp, #8]
   15308:	6822      	ldr	r2, [r4, #0]
   1530a:	463b      	mov	r3, r7
   1530c:	0c12      	lsrs	r2, r2, #16
   1530e:	0412      	lsls	r2, r2, #16
   15310:	f042 020a 	orr.w	r2, r2, #10
   15314:	6022      	str	r2, [r4, #0]
   15316:	4620      	mov	r0, r4
   15318:	f247 0281 	movw	r2, #28801	; 0x7081
   1531c:	f000 fac6 	bl	158ac <ip_interface_request_send>
   15320:	b980      	cbnz	r0, 15344 <tls_interface_listen+0xdc>
   15322:	6823      	ldr	r3, [r4, #0]
   15324:	00db      	lsls	r3, r3, #3
   15326:	d41b      	bmi.n	15360 <tls_interface_listen+0xf8>
   15328:	ab03      	add	r3, sp, #12
   1532a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1532e:	210b      	movs	r1, #11
   15330:	4628      	mov	r0, r5
   15332:	f000 facf 	bl	158d4 <ip_interface_wait>
   15336:	b108      	cbz	r0, 1533c <tls_interface_listen+0xd4>
   15338:	6027      	str	r7, [r4, #0]
   1533a:	e003      	b.n	15344 <tls_interface_listen+0xdc>
   1533c:	4649      	mov	r1, r9
   1533e:	4628      	mov	r0, r5
   15340:	f001 f94a 	bl	165d8 <ip_interface_listen>
   15344:	2800      	cmp	r0, #0
   15346:	dc0c      	bgt.n	15362 <tls_interface_listen+0xfa>
   15348:	b005      	add	sp, #20
   1534a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1534e:	4a0e      	ldr	r2, [pc, #56]	; (15388 <tls_interface_listen+0x120>)
   15350:	00ee      	lsls	r6, r5, #3
   15352:	1973      	adds	r3, r6, r5
   15354:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   15358:	9201      	str	r2, [sp, #4]
   1535a:	2b02      	cmp	r3, #2
   1535c:	d199      	bne.n	15292 <tls_interface_listen+0x2a>
   1535e:	e7a4      	b.n	152aa <tls_interface_listen+0x42>
   15360:	2073      	movs	r0, #115	; 0x73
   15362:	f7fc f8b1 	bl	114c8 <bsd_os_errno_set>
   15366:	f04f 30ff 	mov.w	r0, #4294967295
   1536a:	b005      	add	sp, #20
   1536c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15370:	200c      	movs	r0, #12
   15372:	e7f6      	b.n	15362 <tls_interface_listen+0xfa>
   15374:	f85a 1035 	ldr.w	r1, [sl, r5, lsl #3]
   15378:	6800      	ldr	r0, [r0, #0]
   1537a:	f009 f96a 	bl	1e652 <memcpy>
   1537e:	e7b4      	b.n	152ea <tls_interface_listen+0x82>
   15380:	202d      	movs	r0, #45	; 0x2d
   15382:	e7ee      	b.n	15362 <tls_interface_listen+0xfa>
   15384:	2009      	movs	r0, #9
   15386:	e7ec      	b.n	15362 <tls_interface_listen+0xfa>
   15388:	20020b50 	.word	0x20020b50
   1538c:	20020c94 	.word	0x20020c94

00015390 <tls_interface_accept>:
   15390:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15394:	b083      	sub	sp, #12
   15396:	460f      	mov	r7, r1
   15398:	4690      	mov	r8, r2
   1539a:	4699      	mov	r9, r3
   1539c:	4606      	mov	r6, r0
   1539e:	f04f 34ff 	mov.w	r4, #4294967295
   153a2:	f006 fa19 	bl	1b7d8 <interface_socket_from_handle_get>
   153a6:	9401      	str	r4, [sp, #4]
   153a8:	2800      	cmp	r0, #0
   153aa:	d048      	beq.n	1543e <tls_interface_accept+0xae>
   153ac:	6805      	ldr	r5, [r0, #0]
   153ae:	b2ad      	uxth	r5, r5
   153b0:	2d07      	cmp	r5, #7
   153b2:	d144      	bne.n	1543e <tls_interface_accept+0xae>
   153b4:	6803      	ldr	r3, [r0, #0]
   153b6:	00db      	lsls	r3, r3, #3
   153b8:	d443      	bmi.n	15442 <tls_interface_accept+0xb2>
   153ba:	464b      	mov	r3, r9
   153bc:	4642      	mov	r2, r8
   153be:	4639      	mov	r1, r7
   153c0:	4630      	mov	r0, r6
   153c2:	f001 f985 	bl	166d0 <ip_interface_accept>
   153c6:	1e04      	subs	r4, r0, #0
   153c8:	da08      	bge.n	153dc <tls_interface_accept+0x4c>
   153ca:	4620      	mov	r0, r4
   153cc:	f7fc f87c 	bl	114c8 <bsd_os_errno_set>
   153d0:	f04f 34ff 	mov.w	r4, #4294967295
   153d4:	4620      	mov	r0, r4
   153d6:	b003      	add	sp, #12
   153d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   153dc:	f006 f9fc 	bl	1b7d8 <interface_socket_from_handle_get>
   153e0:	6803      	ldr	r3, [r0, #0]
   153e2:	f8df 8068 	ldr.w	r8, [pc, #104]	; 1544c <tls_interface_accept+0xbc>
   153e6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   153ea:	6003      	str	r3, [r0, #0]
   153ec:	6803      	ldr	r3, [r0, #0]
   153ee:	eb04 07c4 	add.w	r7, r4, r4, lsl #3
   153f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   153f6:	00bf      	lsls	r7, r7, #2
   153f8:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   153fc:	4605      	mov	r5, r0
   153fe:	6003      	str	r3, [r0, #0]
   15400:	eb08 0186 	add.w	r1, r8, r6, lsl #2
   15404:	2224      	movs	r2, #36	; 0x24
   15406:	eb08 0007 	add.w	r0, r8, r7
   1540a:	f009 f922 	bl	1e652 <memcpy>
   1540e:	2302      	movs	r3, #2
   15410:	f808 3007 	strb.w	r3, [r8, r7]
   15414:	682a      	ldr	r2, [r5, #0]
   15416:	ab01      	add	r3, sp, #4
   15418:	0c12      	lsrs	r2, r2, #16
   1541a:	0412      	lsls	r2, r2, #16
   1541c:	f042 020b 	orr.w	r2, r2, #11
   15420:	602a      	str	r2, [r5, #0]
   15422:	210c      	movs	r1, #12
   15424:	f64f 72ff 	movw	r2, #65535	; 0xffff
   15428:	4620      	mov	r0, r4
   1542a:	f000 fa53 	bl	158d4 <ip_interface_wait>
   1542e:	4605      	mov	r5, r0
   15430:	2800      	cmp	r0, #0
   15432:	d0cf      	beq.n	153d4 <tls_interface_accept+0x44>
   15434:	4620      	mov	r0, r4
   15436:	f000 fb45 	bl	15ac4 <ip_interface_close>
   1543a:	462c      	mov	r4, r5
   1543c:	e7c5      	b.n	153ca <tls_interface_accept+0x3a>
   1543e:	2409      	movs	r4, #9
   15440:	e7c3      	b.n	153ca <tls_interface_accept+0x3a>
   15442:	202d      	movs	r0, #45	; 0x2d
   15444:	f7fc f840 	bl	114c8 <bsd_os_errno_set>
   15448:	e7c4      	b.n	153d4 <tls_interface_accept+0x44>
   1544a:	bf00      	nop
   1544c:	20020b50 	.word	0x20020b50

00015450 <tls_interface_setopt>:
   15450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15454:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   15458:	b082      	sub	sp, #8
   1545a:	9e08      	ldr	r6, [sp, #32]
   1545c:	d120      	bne.n	154a0 <tls_interface_setopt+0x50>
   1545e:	4698      	mov	r8, r3
   15460:	4617      	mov	r7, r2
   15462:	4605      	mov	r5, r0
   15464:	2b00      	cmp	r3, #0
   15466:	f000 80a0 	beq.w	155aa <tls_interface_setopt+0x15a>
   1546a:	f006 f9b5 	bl	1b7d8 <interface_socket_from_handle_get>
   1546e:	2800      	cmp	r0, #0
   15470:	f000 8097 	beq.w	155a2 <tls_interface_setopt+0x152>
   15474:	6804      	ldr	r4, [r0, #0]
   15476:	b2a4      	uxth	r4, r4
   15478:	2c02      	cmp	r4, #2
   1547a:	d008      	beq.n	1548e <tls_interface_setopt+0x3e>
   1547c:	6803      	ldr	r3, [r0, #0]
   1547e:	b29b      	uxth	r3, r3
   15480:	2b04      	cmp	r3, #4
   15482:	d004      	beq.n	1548e <tls_interface_setopt+0x3e>
   15484:	6803      	ldr	r3, [r0, #0]
   15486:	b29b      	uxth	r3, r3
   15488:	2b05      	cmp	r3, #5
   1548a:	f040 808a 	bne.w	155a2 <tls_interface_setopt+0x152>
   1548e:	1e7a      	subs	r2, r7, #1
   15490:	2a05      	cmp	r2, #5
   15492:	f200 8090 	bhi.w	155b6 <tls_interface_setopt+0x166>
   15496:	e8df f002 	tbb	[pc, r2]
   1549a:	2718      	.short	0x2718
   1549c:	08594b3c 	.word	0x08594b3c
   154a0:	b002      	add	sp, #8
   154a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   154a6:	f001 ba55 	b.w	16954 <ip_interface_setopt>
   154aa:	4601      	mov	r1, r0
   154ac:	e9cd 8600 	strd	r8, r6, [sp]
   154b0:	4628      	mov	r0, r5
   154b2:	f247 0301 	movw	r3, #28673	; 0x7001
   154b6:	f44f 7280 	mov.w	r2, #256	; 0x100
   154ba:	f000 ff75 	bl	163a8 <ip_interface_socketoption_send>
   154be:	2800      	cmp	r0, #0
   154c0:	d161      	bne.n	15586 <tls_interface_setopt+0x136>
   154c2:	2000      	movs	r0, #0
   154c4:	b002      	add	sp, #8
   154c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   154ca:	2e04      	cmp	r6, #4
   154cc:	d15a      	bne.n	15584 <tls_interface_setopt+0x134>
   154ce:	f8d8 0000 	ldr.w	r0, [r8]
   154d2:	2800      	cmp	r0, #0
   154d4:	d05e      	beq.n	15594 <tls_interface_setopt+0x144>
   154d6:	2801      	cmp	r0, #1
   154d8:	d154      	bne.n	15584 <tls_interface_setopt+0x134>
   154da:	4b38      	ldr	r3, [pc, #224]	; (155bc <tls_interface_setopt+0x16c>)
   154dc:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   154e0:	f803 0024 	strb.w	r0, [r3, r4, lsl #2]
   154e4:	2000      	movs	r0, #0
   154e6:	e7ed      	b.n	154c4 <tls_interface_setopt+0x74>
   154e8:	ea5f 0c96 	movs.w	ip, r6, lsr #2
   154ec:	d04a      	beq.n	15584 <tls_interface_setopt+0x134>
   154ee:	f016 0703 	ands.w	r7, r6, #3
   154f2:	d147      	bne.n	15584 <tls_interface_setopt+0x134>
   154f4:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   154f8:	00a4      	lsls	r4, r4, #2
   154fa:	4b30      	ldr	r3, [pc, #192]	; (155bc <tls_interface_setopt+0x16c>)
   154fc:	1d20      	adds	r0, r4, #4
   154fe:	4418      	add	r0, r3
   15500:	4423      	add	r3, r4
   15502:	4632      	mov	r2, r6
   15504:	4641      	mov	r1, r8
   15506:	f883 c003 	strb.w	ip, [r3, #3]
   1550a:	f009 f8a2 	bl	1e652 <memcpy>
   1550e:	4638      	mov	r0, r7
   15510:	e7d8      	b.n	154c4 <tls_interface_setopt+0x74>
   15512:	2e01      	cmp	r6, #1
   15514:	d136      	bne.n	15584 <tls_interface_setopt+0x134>
   15516:	f898 2000 	ldrb.w	r2, [r8]
   1551a:	4b28      	ldr	r3, [pc, #160]	; (155bc <tls_interface_setopt+0x16c>)
   1551c:	3200      	adds	r2, #0
   1551e:	bf18      	it	ne
   15520:	2201      	movne	r2, #1
   15522:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   15526:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   1552a:	7062      	strb	r2, [r4, #1]
   1552c:	2000      	movs	r0, #0
   1552e:	e7c9      	b.n	154c4 <tls_interface_setopt+0x74>
   15530:	2e04      	cmp	r6, #4
   15532:	d127      	bne.n	15584 <tls_interface_setopt+0x134>
   15534:	f8d8 2000 	ldr.w	r2, [r8]
   15538:	2a02      	cmp	r2, #2
   1553a:	d823      	bhi.n	15584 <tls_interface_setopt+0x134>
   1553c:	4b1f      	ldr	r3, [pc, #124]	; (155bc <tls_interface_setopt+0x16c>)
   1553e:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   15542:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   15546:	70a2      	strb	r2, [r4, #2]
   15548:	2000      	movs	r0, #0
   1554a:	e7bb      	b.n	154c4 <tls_interface_setopt+0x74>
   1554c:	4c1c      	ldr	r4, [pc, #112]	; (155c0 <tls_interface_setopt+0x170>)
   1554e:	f854 0035 	ldr.w	r0, [r4, r5, lsl #3]
   15552:	b138      	cbz	r0, 15564 <tls_interface_setopt+0x114>
   15554:	f005 fcf2 	bl	1af3c <nrf_free>
   15558:	2200      	movs	r2, #0
   1555a:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   1555e:	f844 2035 	str.w	r2, [r4, r5, lsl #3]
   15562:	605a      	str	r2, [r3, #4]
   15564:	2e00      	cmp	r6, #0
   15566:	d0ac      	beq.n	154c2 <tls_interface_setopt+0x72>
   15568:	4630      	mov	r0, r6
   1556a:	f005 fcdd 	bl	1af28 <nrf_malloc>
   1556e:	f844 0035 	str.w	r0, [r4, r5, lsl #3]
   15572:	b1c0      	cbz	r0, 155a6 <tls_interface_setopt+0x156>
   15574:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   15578:	4632      	mov	r2, r6
   1557a:	4641      	mov	r1, r8
   1557c:	6066      	str	r6, [r4, #4]
   1557e:	f009 f868 	bl	1e652 <memcpy>
   15582:	e79e      	b.n	154c2 <tls_interface_setopt+0x72>
   15584:	2016      	movs	r0, #22
   15586:	f7fb ff9f 	bl	114c8 <bsd_os_errno_set>
   1558a:	f04f 30ff 	mov.w	r0, #4294967295
   1558e:	b002      	add	sp, #8
   15590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15594:	2202      	movs	r2, #2
   15596:	4b09      	ldr	r3, [pc, #36]	; (155bc <tls_interface_setopt+0x16c>)
   15598:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   1559c:	f803 2024 	strb.w	r2, [r3, r4, lsl #2]
   155a0:	e790      	b.n	154c4 <tls_interface_setopt+0x74>
   155a2:	2009      	movs	r0, #9
   155a4:	e7ef      	b.n	15586 <tls_interface_setopt+0x136>
   155a6:	200c      	movs	r0, #12
   155a8:	e7ed      	b.n	15586 <tls_interface_setopt+0x136>
   155aa:	200e      	movs	r0, #14
   155ac:	f7fb ff8c 	bl	114c8 <bsd_os_errno_set>
   155b0:	f04f 30ff 	mov.w	r0, #4294967295
   155b4:	e786      	b.n	154c4 <tls_interface_setopt+0x74>
   155b6:	202a      	movs	r0, #42	; 0x2a
   155b8:	e7e5      	b.n	15586 <tls_interface_setopt+0x136>
   155ba:	bf00      	nop
   155bc:	20020b50 	.word	0x20020b50
   155c0:	20020c94 	.word	0x20020c94

000155c4 <tls_interface_getopt>:
   155c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   155c6:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   155ca:	b083      	sub	sp, #12
   155cc:	9f08      	ldr	r7, [sp, #32]
   155ce:	d112      	bne.n	155f6 <tls_interface_getopt+0x32>
   155d0:	461d      	mov	r5, r3
   155d2:	b16b      	cbz	r3, 155f0 <tls_interface_getopt+0x2c>
   155d4:	b167      	cbz	r7, 155f0 <tls_interface_getopt+0x2c>
   155d6:	4606      	mov	r6, r0
   155d8:	4614      	mov	r4, r2
   155da:	f006 f8fd 	bl	1b7d8 <interface_socket_from_handle_get>
   155de:	b178      	cbz	r0, 15600 <tls_interface_getopt+0x3c>
   155e0:	3c01      	subs	r4, #1
   155e2:	2c05      	cmp	r4, #5
   155e4:	d859      	bhi.n	1569a <tls_interface_getopt+0xd6>
   155e6:	e8df f004 	tbb	[pc, r4]
   155ea:	2818      	.short	0x2818
   155ec:	0d584c40 	.word	0x0d584c40
   155f0:	200e      	movs	r0, #14
   155f2:	b003      	add	sp, #12
   155f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   155f6:	b003      	add	sp, #12
   155f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   155fc:	f001 ba4c 	b.w	16a98 <ip_interface_getopt>
   15600:	2009      	movs	r0, #9
   15602:	e7f6      	b.n	155f2 <tls_interface_getopt+0x2e>
   15604:	4601      	mov	r1, r0
   15606:	e9cd 5700 	strd	r5, r7, [sp]
   1560a:	4630      	mov	r0, r6
   1560c:	f247 0301 	movw	r3, #28673	; 0x7001
   15610:	f44f 7280 	mov.w	r2, #256	; 0x100
   15614:	f000 fe18 	bl	16248 <ip_interface_socketoption_get>
   15618:	e7eb      	b.n	155f2 <tls_interface_getopt+0x2e>
   1561a:	683b      	ldr	r3, [r7, #0]
   1561c:	2b04      	cmp	r3, #4
   1561e:	d13e      	bne.n	1569e <tls_interface_getopt+0xda>
   15620:	4b22      	ldr	r3, [pc, #136]	; (156ac <tls_interface_getopt+0xe8>)
   15622:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   15626:	f813 3026 	ldrb.w	r3, [r3, r6, lsl #2]
   1562a:	2000      	movs	r0, #0
   1562c:	f1a3 0301 	sub.w	r3, r3, #1
   15630:	fab3 f383 	clz	r3, r3
   15634:	095b      	lsrs	r3, r3, #5
   15636:	602b      	str	r3, [r5, #0]
   15638:	e7db      	b.n	155f2 <tls_interface_getopt+0x2e>
   1563a:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   1563e:	491b      	ldr	r1, [pc, #108]	; (156ac <tls_interface_getopt+0xe8>)
   15640:	683b      	ldr	r3, [r7, #0]
   15642:	00b6      	lsls	r6, r6, #2
   15644:	198a      	adds	r2, r1, r6
   15646:	f013 0403 	ands.w	r4, r3, #3
   1564a:	78d0      	ldrb	r0, [r2, #3]
   1564c:	d129      	bne.n	156a2 <tls_interface_getopt+0xde>
   1564e:	089b      	lsrs	r3, r3, #2
   15650:	4283      	cmp	r3, r0
   15652:	bf28      	it	cs
   15654:	4603      	movcs	r3, r0
   15656:	009a      	lsls	r2, r3, #2
   15658:	b31b      	cbz	r3, 156a2 <tls_interface_getopt+0xde>
   1565a:	3604      	adds	r6, #4
   1565c:	4431      	add	r1, r6
   1565e:	603a      	str	r2, [r7, #0]
   15660:	4628      	mov	r0, r5
   15662:	f008 fff6 	bl	1e652 <memcpy>
   15666:	4620      	mov	r0, r4
   15668:	e7c3      	b.n	155f2 <tls_interface_getopt+0x2e>
   1566a:	683b      	ldr	r3, [r7, #0]
   1566c:	2b01      	cmp	r3, #1
   1566e:	d116      	bne.n	1569e <tls_interface_getopt+0xda>
   15670:	4b0e      	ldr	r3, [pc, #56]	; (156ac <tls_interface_getopt+0xe8>)
   15672:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   15676:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1567a:	7873      	ldrb	r3, [r6, #1]
   1567c:	2000      	movs	r0, #0
   1567e:	702b      	strb	r3, [r5, #0]
   15680:	e7b7      	b.n	155f2 <tls_interface_getopt+0x2e>
   15682:	683b      	ldr	r3, [r7, #0]
   15684:	2b04      	cmp	r3, #4
   15686:	d10a      	bne.n	1569e <tls_interface_getopt+0xda>
   15688:	4b08      	ldr	r3, [pc, #32]	; (156ac <tls_interface_getopt+0xe8>)
   1568a:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   1568e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   15692:	78b3      	ldrb	r3, [r6, #2]
   15694:	2000      	movs	r0, #0
   15696:	602b      	str	r3, [r5, #0]
   15698:	e7ab      	b.n	155f2 <tls_interface_getopt+0x2e>
   1569a:	202a      	movs	r0, #42	; 0x2a
   1569c:	e7a9      	b.n	155f2 <tls_interface_getopt+0x2e>
   1569e:	2016      	movs	r0, #22
   156a0:	e7a7      	b.n	155f2 <tls_interface_getopt+0x2e>
   156a2:	2800      	cmp	r0, #0
   156a4:	d1fb      	bne.n	1569e <tls_interface_getopt+0xda>
   156a6:	6038      	str	r0, [r7, #0]
   156a8:	e7a3      	b.n	155f2 <tls_interface_getopt+0x2e>
   156aa:	bf00      	nop
   156ac:	20020b50 	.word	0x20020b50

000156b0 <tls_rpc_ip_event_handler>:
   156b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   156b2:	f248 0581 	movw	r5, #32897	; 0x8081
   156b6:	42ab      	cmp	r3, r5
   156b8:	460c      	mov	r4, r1
   156ba:	d044      	beq.n	15746 <tls_rpc_ip_event_handler+0x96>
   156bc:	f249 0182 	movw	r1, #36994	; 0x9082
   156c0:	428b      	cmp	r3, r1
   156c2:	4606      	mov	r6, r0
   156c4:	d02d      	beq.n	15722 <tls_rpc_ip_event_handler+0x72>
   156c6:	f248 0102 	movw	r1, #32770	; 0x8002
   156ca:	428b      	cmp	r3, r1
   156cc:	d001      	beq.n	156d2 <tls_rpc_ip_event_handler+0x22>
   156ce:	2001      	movs	r0, #1
   156d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   156d2:	2c00      	cmp	r4, #0
   156d4:	d0fb      	beq.n	156ce <tls_rpc_ip_event_handler+0x1e>
   156d6:	6963      	ldr	r3, [r4, #20]
   156d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   156dc:	d002      	beq.n	156e4 <tls_rpc_ip_event_handler+0x34>
   156de:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   156e2:	d1f4      	bne.n	156ce <tls_rpc_ip_event_handler+0x1e>
   156e4:	6823      	ldr	r3, [r4, #0]
   156e6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   156ea:	6023      	str	r3, [r4, #0]
   156ec:	6955      	ldr	r5, [r2, #20]
   156ee:	bb05      	cbnz	r5, 15732 <tls_rpc_ip_event_handler+0x82>
   156f0:	6823      	ldr	r3, [r4, #0]
   156f2:	0c1b      	lsrs	r3, r3, #16
   156f4:	041b      	lsls	r3, r3, #16
   156f6:	f043 0305 	orr.w	r3, r3, #5
   156fa:	6023      	str	r3, [r4, #0]
   156fc:	6823      	ldr	r3, [r4, #0]
   156fe:	00db      	lsls	r3, r3, #3
   15700:	d50d      	bpl.n	1571e <tls_rpc_ip_event_handler+0x6e>
   15702:	4b2a      	ldr	r3, [pc, #168]	; (157ac <tls_rpc_ip_event_handler+0xfc>)
   15704:	eb06 02c6 	add.w	r2, r6, r6, lsl #3
   15708:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   1570c:	2b02      	cmp	r3, #2
   1570e:	d106      	bne.n	1571e <tls_rpc_ip_event_handler+0x6e>
   15710:	4630      	mov	r0, r6
   15712:	4621      	mov	r1, r4
   15714:	f7ff fb16 	bl	14d44 <secure_client_socket>
   15718:	b108      	cbz	r0, 1571e <tls_rpc_ip_event_handler+0x6e>
   1571a:	2873      	cmp	r0, #115	; 0x73
   1571c:	d10c      	bne.n	15738 <tls_rpc_ip_event_handler+0x88>
   1571e:	2000      	movs	r0, #0
   15720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15722:	2c00      	cmp	r4, #0
   15724:	d0fb      	beq.n	1571e <tls_rpc_ip_event_handler+0x6e>
   15726:	6823      	ldr	r3, [r4, #0]
   15728:	b29b      	uxth	r3, r3
   1572a:	2b0b      	cmp	r3, #11
   1572c:	d1f7      	bne.n	1571e <tls_rpc_ip_event_handler+0x6e>
   1572e:	6915      	ldr	r5, [r2, #16]
   15730:	b1cd      	cbz	r5, 15766 <tls_rpc_ip_event_handler+0xb6>
   15732:	4628      	mov	r0, r5
   15734:	f000 f890 	bl	15858 <rpc_error_to_nrf_bsd_error>
   15738:	6060      	str	r0, [r4, #4]
   1573a:	6823      	ldr	r3, [r4, #0]
   1573c:	2000      	movs	r0, #0
   1573e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   15742:	6023      	str	r3, [r4, #0]
   15744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15746:	2900      	cmp	r1, #0
   15748:	d0e9      	beq.n	1571e <tls_rpc_ip_event_handler+0x6e>
   1574a:	680b      	ldr	r3, [r1, #0]
   1574c:	b29b      	uxth	r3, r3
   1574e:	2b0a      	cmp	r3, #10
   15750:	d1e5      	bne.n	1571e <tls_rpc_ip_event_handler+0x6e>
   15752:	6950      	ldr	r0, [r2, #20]
   15754:	2800      	cmp	r0, #0
   15756:	d1ed      	bne.n	15734 <tls_rpc_ip_event_handler+0x84>
   15758:	680b      	ldr	r3, [r1, #0]
   1575a:	0c1b      	lsrs	r3, r3, #16
   1575c:	041b      	lsls	r3, r3, #16
   1575e:	f043 030b 	orr.w	r3, r3, #11
   15762:	600b      	str	r3, [r1, #0]
   15764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15766:	6823      	ldr	r3, [r4, #0]
   15768:	4f11      	ldr	r7, [pc, #68]	; (157b0 <tls_rpc_ip_event_handler+0x100>)
   1576a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   1576e:	6023      	str	r3, [r4, #0]
   15770:	f857 0030 	ldr.w	r0, [r7, r0, lsl #3]
   15774:	b130      	cbz	r0, 15784 <tls_rpc_ip_event_handler+0xd4>
   15776:	f005 fbe1 	bl	1af3c <nrf_free>
   1577a:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   1577e:	f847 5036 	str.w	r5, [r7, r6, lsl #3]
   15782:	605d      	str	r5, [r3, #4]
   15784:	6823      	ldr	r3, [r4, #0]
   15786:	2000      	movs	r0, #0
   15788:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   1578c:	6023      	str	r3, [r4, #0]
   1578e:	6823      	ldr	r3, [r4, #0]
   15790:	0c1b      	lsrs	r3, r3, #16
   15792:	041b      	lsls	r3, r3, #16
   15794:	f043 030c 	orr.w	r3, r3, #12
   15798:	6023      	str	r3, [r4, #0]
   1579a:	6823      	ldr	r3, [r4, #0]
   1579c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   157a0:	6023      	str	r3, [r4, #0]
   157a2:	6823      	ldr	r3, [r4, #0]
   157a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   157a8:	6023      	str	r3, [r4, #0]
   157aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   157ac:	20020b50 	.word	0x20020b50
   157b0:	20020c94 	.word	0x20020c94

000157b4 <ip_client_event_handler>:
   157b4:	f850 1b08 	ldr.w	r1, [r0], #8
   157b8:	0c09      	lsrs	r1, r1, #16
   157ba:	f001 bb0d 	b.w	16dd8 <rpc_ip_event_handler>
   157be:	bf00      	nop

000157c0 <rpc_ip_client_init>:
   157c0:	4801      	ldr	r0, [pc, #4]	; (157c8 <rpc_ip_client_init+0x8>)
   157c2:	f001 be0b 	b.w	173dc <rpc_client_register>
   157c6:	bf00      	nop
   157c8:	00020db8 	.word	0x00020db8

000157cc <rpc_ip_client_request_alloc>:
   157cc:	2300      	movs	r3, #0
   157ce:	b510      	push	{r4, lr}
   157d0:	b082      	sub	sp, #8
   157d2:	9301      	str	r3, [sp, #4]
   157d4:	b158      	cbz	r0, 157ee <rpc_ip_client_request_alloc+0x22>
   157d6:	4604      	mov	r4, r0
   157d8:	aa01      	add	r2, sp, #4
   157da:	2004      	movs	r0, #4
   157dc:	f001 fe78 	bl	174d0 <rpc_message_alloc>
   157e0:	b918      	cbnz	r0, 157ea <rpc_ip_client_request_alloc+0x1e>
   157e2:	9b01      	ldr	r3, [sp, #4]
   157e4:	b10b      	cbz	r3, 157ea <rpc_ip_client_request_alloc+0x1e>
   157e6:	3308      	adds	r3, #8
   157e8:	6023      	str	r3, [r4, #0]
   157ea:	b002      	add	sp, #8
   157ec:	bd10      	pop	{r4, pc}
   157ee:	2007      	movs	r0, #7
   157f0:	b002      	add	sp, #8
   157f2:	bd10      	pop	{r4, pc}

000157f4 <rpc_ip_client_request_send>:
   157f4:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   157f8:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   157fc:	d10b      	bne.n	15816 <rpc_ip_client_request_send+0x22>
   157fe:	b160      	cbz	r0, 1581a <rpc_ip_client_request_send+0x26>
   15800:	4603      	mov	r3, r0
   15802:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   15806:	2004      	movs	r0, #4
   15808:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1580c:	f843 1d08 	str.w	r1, [r3, #-8]!
   15810:	4619      	mov	r1, r3
   15812:	f001 be4d 	b.w	174b0 <rpc_message_send>
   15816:	200f      	movs	r0, #15
   15818:	4770      	bx	lr
   1581a:	2007      	movs	r0, #7
   1581c:	4770      	bx	lr
   1581e:	bf00      	nop

00015820 <rpc_ip_client_message_free>:
   15820:	b120      	cbz	r0, 1582c <rpc_ip_client_message_free+0xc>
   15822:	f1a0 0108 	sub.w	r1, r0, #8
   15826:	2004      	movs	r0, #4
   15828:	f001 be7e 	b.w	17528 <rpc_message_free>
   1582c:	2007      	movs	r0, #7
   1582e:	4770      	bx	lr

00015830 <rpc_ip_client_data_free>:
   15830:	b118      	cbz	r0, 1583a <rpc_ip_client_data_free+0xa>
   15832:	4601      	mov	r1, r0
   15834:	2004      	movs	r0, #4
   15836:	f001 be83 	b.w	17540 <rpc_message_data_free>
   1583a:	2007      	movs	r0, #7
   1583c:	4770      	bx	lr
   1583e:	bf00      	nop

00015840 <ip_recvd_packet_free_cb>:
   15840:	b510      	push	{r4, lr}
   15842:	4604      	mov	r4, r0
   15844:	6800      	ldr	r0, [r0, #0]
   15846:	f7ff fff3 	bl	15830 <rpc_ip_client_data_free>
   1584a:	68a0      	ldr	r0, [r4, #8]
   1584c:	b118      	cbz	r0, 15856 <ip_recvd_packet_free_cb+0x16>
   1584e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15852:	f005 bb73 	b.w	1af3c <nrf_free>
   15856:	bd10      	pop	{r4, pc}

00015858 <rpc_error_to_nrf_bsd_error>:
   15858:	2810      	cmp	r0, #16
   1585a:	bf9a      	itte	ls
   1585c:	4b02      	ldrls	r3, [pc, #8]	; (15868 <rpc_error_to_nrf_bsd_error+0x10>)
   1585e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   15862:	202d      	movhi	r0, #45	; 0x2d
   15864:	4770      	bx	lr
   15866:	bf00      	nop
   15868:	00020dc8 	.word	0x00020dc8

0001586c <ip_interface_request_create>:
   1586c:	b570      	push	{r4, r5, r6, lr}
   1586e:	2500      	movs	r5, #0
   15870:	b082      	sub	sp, #8
   15872:	ac02      	add	r4, sp, #8
   15874:	f844 5d04 	str.w	r5, [r4, #-4]!
   15878:	4606      	mov	r6, r0
   1587a:	460d      	mov	r5, r1
   1587c:	4620      	mov	r0, r4
   1587e:	4619      	mov	r1, r3
   15880:	4614      	mov	r4, r2
   15882:	f7ff ffa3 	bl	157cc <rpc_ip_client_request_alloc>
   15886:	b960      	cbnz	r0, 158a2 <ip_interface_request_create+0x36>
   15888:	9b01      	ldr	r3, [sp, #4]
   1588a:	2208      	movs	r2, #8
   1588c:	7258      	strb	r0, [r3, #9]
   1588e:	7298      	strb	r0, [r3, #10]
   15890:	72d8      	strb	r0, [r3, #11]
   15892:	4618      	mov	r0, r3
   15894:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   15898:	60dc      	str	r4, [r3, #12]
   1589a:	611d      	str	r5, [r3, #16]
   1589c:	721a      	strb	r2, [r3, #8]
   1589e:	b002      	add	sp, #8
   158a0:	bd70      	pop	{r4, r5, r6, pc}
   158a2:	9b01      	ldr	r3, [sp, #4]
   158a4:	4618      	mov	r0, r3
   158a6:	b002      	add	sp, #8
   158a8:	bd70      	pop	{r4, r5, r6, pc}
   158aa:	bf00      	nop

000158ac <ip_interface_request_send>:
   158ac:	b570      	push	{r4, r5, r6, lr}
   158ae:	460c      	mov	r4, r1
   158b0:	4605      	mov	r5, r0
   158b2:	4611      	mov	r1, r2
   158b4:	4620      	mov	r0, r4
   158b6:	461e      	mov	r6, r3
   158b8:	f7ff ff9c 	bl	157f4 <rpc_ip_client_request_send>
   158bc:	b900      	cbnz	r0, 158c0 <ip_interface_request_send+0x14>
   158be:	bd70      	pop	{r4, r5, r6, pc}
   158c0:	6820      	ldr	r0, [r4, #0]
   158c2:	b108      	cbz	r0, 158c8 <ip_interface_request_send+0x1c>
   158c4:	f7ff ffb4 	bl	15830 <rpc_ip_client_data_free>
   158c8:	4620      	mov	r0, r4
   158ca:	f7ff ffa9 	bl	15820 <rpc_ip_client_message_free>
   158ce:	602e      	str	r6, [r5, #0]
   158d0:	2023      	movs	r0, #35	; 0x23
   158d2:	bd70      	pop	{r4, r5, r6, pc}

000158d4 <ip_interface_wait>:
   158d4:	b538      	push	{r3, r4, r5, lr}
   158d6:	4605      	mov	r5, r0
   158d8:	f005 ff0a 	bl	1b6f0 <interface_socket_wait>
   158dc:	4604      	mov	r4, r0
   158de:	b108      	cbz	r0, 158e4 <ip_interface_wait+0x10>
   158e0:	4620      	mov	r0, r4
   158e2:	bd38      	pop	{r3, r4, r5, pc}
   158e4:	4628      	mov	r0, r5
   158e6:	f005 ff77 	bl	1b7d8 <interface_socket_from_handle_get>
   158ea:	2800      	cmp	r0, #0
   158ec:	d0f8      	beq.n	158e0 <ip_interface_wait+0xc>
   158ee:	6844      	ldr	r4, [r0, #4]
   158f0:	2c00      	cmp	r4, #0
   158f2:	d0f5      	beq.n	158e0 <ip_interface_wait+0xc>
   158f4:	2300      	movs	r3, #0
   158f6:	6043      	str	r3, [r0, #4]
   158f8:	4620      	mov	r0, r4
   158fa:	bd38      	pop	{r3, r4, r5, pc}

000158fc <ip_interface_init>:
   158fc:	b538      	push	{r3, r4, r5, lr}
   158fe:	2300      	movs	r3, #0
   15900:	4d09      	ldr	r5, [pc, #36]	; (15928 <ip_interface_init+0x2c>)
   15902:	4c0a      	ldr	r4, [pc, #40]	; (1592c <ip_interface_init+0x30>)
   15904:	4619      	mov	r1, r3
   15906:	2224      	movs	r2, #36	; 0x24
   15908:	4809      	ldr	r0, [pc, #36]	; (15930 <ip_interface_init+0x34>)
   1590a:	602b      	str	r3, [r5, #0]
   1590c:	6023      	str	r3, [r4, #0]
   1590e:	f008 fecb 	bl	1e6a8 <memset>
   15912:	f7ff ff55 	bl	157c0 <rpc_ip_client_init>
   15916:	b918      	cbnz	r0, 15920 <ip_interface_init+0x24>
   15918:	2201      	movs	r2, #1
   1591a:	4b06      	ldr	r3, [pc, #24]	; (15934 <ip_interface_init+0x38>)
   1591c:	701a      	strb	r2, [r3, #0]
   1591e:	bd38      	pop	{r3, r4, r5, pc}
   15920:	f04f 30ff 	mov.w	r0, #4294967295
   15924:	bd38      	pop	{r3, r4, r5, pc}
   15926:	bf00      	nop
   15928:	20020ce4 	.word	0x20020ce4
   1592c:	20020ce0 	.word	0x20020ce0
   15930:	20020ce8 	.word	0x20020ce8
   15934:	20024320 	.word	0x20024320

00015938 <ip_interface_open>:
   15938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1593c:	2500      	movs	r5, #0
   1593e:	f04f 37ff 	mov.w	r7, #4294967295
   15942:	4c5e      	ldr	r4, [pc, #376]	; (15abc <ip_interface_open+0x184>)
   15944:	4606      	mov	r6, r0
   15946:	7820      	ldrb	r0, [r4, #0]
   15948:	b084      	sub	sp, #16
   1594a:	e9cd 5701 	strd	r5, r7, [sp, #4]
   1594e:	2800      	cmp	r0, #0
   15950:	f000 80b0 	beq.w	15ab4 <ip_interface_open+0x17c>
   15954:	4690      	mov	r8, r2
   15956:	f026 0208 	bic.w	r2, r6, #8
   1595a:	2a02      	cmp	r2, #2
   1595c:	460c      	mov	r4, r1
   1595e:	d002      	beq.n	15966 <ip_interface_open+0x2e>
   15960:	2e05      	cmp	r6, #5
   15962:	f040 808d 	bne.w	15a80 <ip_interface_open+0x148>
   15966:	1e63      	subs	r3, r4, #1
   15968:	2b02      	cmp	r3, #2
   1596a:	f200 809d 	bhi.w	15aa8 <ip_interface_open+0x170>
   1596e:	f1b8 0f00 	cmp.w	r8, #0
   15972:	d159      	bne.n	15a28 <ip_interface_open+0xf0>
   15974:	2c01      	cmp	r4, #1
   15976:	d06f      	beq.n	15a58 <ip_interface_open+0x120>
   15978:	2c03      	cmp	r4, #3
   1597a:	bf18      	it	ne
   1597c:	f04f 0802 	movne.w	r8, #2
   15980:	4a4f      	ldr	r2, [pc, #316]	; (15ac0 <ip_interface_open+0x188>)
   15982:	4621      	mov	r1, r4
   15984:	a801      	add	r0, sp, #4
   15986:	f005 fe01 	bl	1b58c <interface_socket_allocate>
   1598a:	9b01      	ldr	r3, [sp, #4]
   1598c:	4607      	mov	r7, r0
   1598e:	2b00      	cmp	r3, #0
   15990:	d060      	beq.n	15a54 <ip_interface_open+0x11c>
   15992:	2100      	movs	r1, #0
   15994:	a804      	add	r0, sp, #16
   15996:	f840 1d04 	str.w	r1, [r0, #-4]!
   1599a:	e9c3 6403 	strd	r6, r4, [r3, #12]
   1599e:	f8c3 8014 	str.w	r8, [r3, #20]
   159a2:	f7ff ff13 	bl	157cc <rpc_ip_client_request_alloc>
   159a6:	2800      	cmp	r0, #0
   159a8:	d151      	bne.n	15a4e <ip_interface_open+0x116>
   159aa:	f247 0201 	movw	r2, #28673	; 0x7001
   159ae:	f04f 33ff 	mov.w	r3, #4294967295
   159b2:	2108      	movs	r1, #8
   159b4:	9d03      	ldr	r5, [sp, #12]
   159b6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   159ba:	60ea      	str	r2, [r5, #12]
   159bc:	7268      	strb	r0, [r5, #9]
   159be:	72a8      	strb	r0, [r5, #10]
   159c0:	72e8      	strb	r0, [r5, #11]
   159c2:	7229      	strb	r1, [r5, #8]
   159c4:	742b      	strb	r3, [r5, #16]
   159c6:	746b      	strb	r3, [r5, #17]
   159c8:	74ab      	strb	r3, [r5, #18]
   159ca:	74eb      	strb	r3, [r5, #19]
   159cc:	68ab      	ldr	r3, [r5, #8]
   159ce:	2e05      	cmp	r6, #5
   159d0:	f103 030c 	add.w	r3, r3, #12
   159d4:	60ab      	str	r3, [r5, #8]
   159d6:	d003      	beq.n	159e0 <ip_interface_open+0xa8>
   159d8:	2e0a      	cmp	r6, #10
   159da:	bf14      	ite	ne
   159dc:	2601      	movne	r6, #1
   159de:	2602      	moveq	r6, #2
   159e0:	616e      	str	r6, [r5, #20]
   159e2:	f8c5 801c 	str.w	r8, [r5, #28]
   159e6:	61ac      	str	r4, [r5, #24]
   159e8:	f247 0101 	movw	r1, #28673	; 0x7001
   159ec:	4628      	mov	r0, r5
   159ee:	f8dd 8004 	ldr.w	r8, [sp, #4]
   159f2:	f7ff feff 	bl	157f4 <rpc_ip_client_request_send>
   159f6:	4606      	mov	r6, r0
   159f8:	b380      	cbz	r0, 15a5c <ip_interface_open+0x124>
   159fa:	6828      	ldr	r0, [r5, #0]
   159fc:	b108      	cbz	r0, 15a02 <ip_interface_open+0xca>
   159fe:	f7ff ff17 	bl	15830 <rpc_ip_client_data_free>
   15a02:	4628      	mov	r0, r5
   15a04:	f7ff ff0c 	bl	15820 <rpc_ip_client_message_free>
   15a08:	2301      	movs	r3, #1
   15a0a:	2523      	movs	r5, #35	; 0x23
   15a0c:	f8c8 3000 	str.w	r3, [r8]
   15a10:	4638      	mov	r0, r7
   15a12:	f005 fe1f 	bl	1b654 <interface_socket_free>
   15a16:	4628      	mov	r0, r5
   15a18:	f7fb fd56 	bl	114c8 <bsd_os_errno_set>
   15a1c:	f04f 37ff 	mov.w	r7, #4294967295
   15a20:	4638      	mov	r0, r7
   15a22:	b004      	add	sp, #16
   15a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15a28:	2c01      	cmp	r4, #1
   15a2a:	d00a      	beq.n	15a42 <ip_interface_open+0x10a>
   15a2c:	2c02      	cmp	r4, #2
   15a2e:	d10b      	bne.n	15a48 <ip_interface_open+0x110>
   15a30:	f1b8 0f02 	cmp.w	r8, #2
   15a34:	d0a4      	beq.n	15980 <ip_interface_open+0x48>
   15a36:	2029      	movs	r0, #41	; 0x29
   15a38:	f7fb fd46 	bl	114c8 <bsd_os_errno_set>
   15a3c:	f04f 37ff 	mov.w	r7, #4294967295
   15a40:	e7ee      	b.n	15a20 <ip_interface_open+0xe8>
   15a42:	f1b8 0f01 	cmp.w	r8, #1
   15a46:	d1f6      	bne.n	15a36 <ip_interface_open+0xfe>
   15a48:	f04f 0802 	mov.w	r8, #2
   15a4c:	e798      	b.n	15980 <ip_interface_open+0x48>
   15a4e:	9d03      	ldr	r5, [sp, #12]
   15a50:	2d00      	cmp	r5, #0
   15a52:	d1bb      	bne.n	159cc <ip_interface_open+0x94>
   15a54:	2569      	movs	r5, #105	; 0x69
   15a56:	e7db      	b.n	15a10 <ip_interface_open+0xd8>
   15a58:	46a0      	mov	r8, r4
   15a5a:	e791      	b.n	15980 <ip_interface_open+0x48>
   15a5c:	ab02      	add	r3, sp, #8
   15a5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   15a62:	2102      	movs	r1, #2
   15a64:	4638      	mov	r0, r7
   15a66:	f005 fe43 	bl	1b6f0 <interface_socket_wait>
   15a6a:	4605      	mov	r5, r0
   15a6c:	2800      	cmp	r0, #0
   15a6e:	d1cf      	bne.n	15a10 <ip_interface_open+0xd8>
   15a70:	4638      	mov	r0, r7
   15a72:	f005 feb1 	bl	1b7d8 <interface_socket_from_handle_get>
   15a76:	b138      	cbz	r0, 15a88 <ip_interface_open+0x150>
   15a78:	6845      	ldr	r5, [r0, #4]
   15a7a:	b12d      	cbz	r5, 15a88 <ip_interface_open+0x150>
   15a7c:	6046      	str	r6, [r0, #4]
   15a7e:	e7c7      	b.n	15a10 <ip_interface_open+0xd8>
   15a80:	202f      	movs	r0, #47	; 0x2f
   15a82:	f7fb fd21 	bl	114c8 <bsd_os_errno_set>
   15a86:	e7cb      	b.n	15a20 <ip_interface_open+0xe8>
   15a88:	3c02      	subs	r4, #2
   15a8a:	2c01      	cmp	r4, #1
   15a8c:	d8c8      	bhi.n	15a20 <ip_interface_open+0xe8>
   15a8e:	4638      	mov	r0, r7
   15a90:	9b01      	ldr	r3, [sp, #4]
   15a92:	681a      	ldr	r2, [r3, #0]
   15a94:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   15a98:	601a      	str	r2, [r3, #0]
   15a9a:	681a      	ldr	r2, [r3, #0]
   15a9c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   15aa0:	601a      	str	r2, [r3, #0]
   15aa2:	b004      	add	sp, #16
   15aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15aa8:	2016      	movs	r0, #22
   15aaa:	f7fb fd0d 	bl	114c8 <bsd_os_errno_set>
   15aae:	f04f 37ff 	mov.w	r7, #4294967295
   15ab2:	e7b5      	b.n	15a20 <ip_interface_open+0xe8>
   15ab4:	2070      	movs	r0, #112	; 0x70
   15ab6:	f7fb fd07 	bl	114c8 <bsd_os_errno_set>
   15aba:	e7b1      	b.n	15a20 <ip_interface_open+0xe8>
   15abc:	20024320 	.word	0x20024320
   15ac0:	00015841 	.word	0x00015841

00015ac4 <ip_interface_close>:
   15ac4:	f04f 33ff 	mov.w	r3, #4294967295
   15ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15acc:	b082      	sub	sp, #8
   15ace:	4606      	mov	r6, r0
   15ad0:	9300      	str	r3, [sp, #0]
   15ad2:	f005 fe81 	bl	1b7d8 <interface_socket_from_handle_get>
   15ad6:	2800      	cmp	r0, #0
   15ad8:	d062      	beq.n	15ba0 <ip_interface_close+0xdc>
   15ada:	4604      	mov	r4, r0
   15adc:	2100      	movs	r1, #0
   15ade:	a802      	add	r0, sp, #8
   15ae0:	6827      	ldr	r7, [r4, #0]
   15ae2:	f840 1d04 	str.w	r1, [r0, #-4]!
   15ae6:	f8d4 8018 	ldr.w	r8, [r4, #24]
   15aea:	f7ff fe6f 	bl	157cc <rpc_ip_client_request_alloc>
   15aee:	2800      	cmp	r0, #0
   15af0:	d139      	bne.n	15b66 <ip_interface_close+0xa2>
   15af2:	f247 0309 	movw	r3, #28681	; 0x7009
   15af6:	2208      	movs	r2, #8
   15af8:	9d01      	ldr	r5, [sp, #4]
   15afa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   15afe:	60eb      	str	r3, [r5, #12]
   15b00:	f8c5 8010 	str.w	r8, [r5, #16]
   15b04:	7268      	strb	r0, [r5, #9]
   15b06:	72a8      	strb	r0, [r5, #10]
   15b08:	72e8      	strb	r0, [r5, #11]
   15b0a:	722a      	strb	r2, [r5, #8]
   15b0c:	6823      	ldr	r3, [r4, #0]
   15b0e:	f247 0109 	movw	r1, #28681	; 0x7009
   15b12:	0c1b      	lsrs	r3, r3, #16
   15b14:	041b      	lsls	r3, r3, #16
   15b16:	f043 030d 	orr.w	r3, r3, #13
   15b1a:	6023      	str	r3, [r4, #0]
   15b1c:	6823      	ldr	r3, [r4, #0]
   15b1e:	4628      	mov	r0, r5
   15b20:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   15b24:	6023      	str	r3, [r4, #0]
   15b26:	6823      	ldr	r3, [r4, #0]
   15b28:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   15b2c:	6023      	str	r3, [r4, #0]
   15b2e:	f7ff fe61 	bl	157f4 <rpc_ip_client_request_send>
   15b32:	bb38      	cbnz	r0, 15b84 <ip_interface_close+0xc0>
   15b34:	466b      	mov	r3, sp
   15b36:	f64f 72ff 	movw	r2, #65535	; 0xffff
   15b3a:	210e      	movs	r1, #14
   15b3c:	4630      	mov	r0, r6
   15b3e:	f005 fdd7 	bl	1b6f0 <interface_socket_wait>
   15b42:	4604      	mov	r4, r0
   15b44:	b1a0      	cbz	r0, 15b70 <ip_interface_close+0xac>
   15b46:	4c17      	ldr	r4, [pc, #92]	; (15ba4 <ip_interface_close+0xe0>)
   15b48:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   15b4c:	b120      	cbz	r0, 15b58 <ip_interface_close+0x94>
   15b4e:	f7ff fe67 	bl	15820 <rpc_ip_client_message_free>
   15b52:	2300      	movs	r3, #0
   15b54:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   15b58:	4630      	mov	r0, r6
   15b5a:	f005 fd7b 	bl	1b654 <interface_socket_free>
   15b5e:	2000      	movs	r0, #0
   15b60:	b002      	add	sp, #8
   15b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15b66:	9d01      	ldr	r5, [sp, #4]
   15b68:	200c      	movs	r0, #12
   15b6a:	2d00      	cmp	r5, #0
   15b6c:	d1ce      	bne.n	15b0c <ip_interface_close+0x48>
   15b6e:	e012      	b.n	15b96 <ip_interface_close+0xd2>
   15b70:	4630      	mov	r0, r6
   15b72:	f005 fe31 	bl	1b7d8 <interface_socket_from_handle_get>
   15b76:	2800      	cmp	r0, #0
   15b78:	d0e5      	beq.n	15b46 <ip_interface_close+0x82>
   15b7a:	6843      	ldr	r3, [r0, #4]
   15b7c:	2b00      	cmp	r3, #0
   15b7e:	d0e2      	beq.n	15b46 <ip_interface_close+0x82>
   15b80:	6044      	str	r4, [r0, #4]
   15b82:	e7e0      	b.n	15b46 <ip_interface_close+0x82>
   15b84:	6828      	ldr	r0, [r5, #0]
   15b86:	b108      	cbz	r0, 15b8c <ip_interface_close+0xc8>
   15b88:	f7ff fe52 	bl	15830 <rpc_ip_client_data_free>
   15b8c:	4628      	mov	r0, r5
   15b8e:	f7ff fe47 	bl	15820 <rpc_ip_client_message_free>
   15b92:	2023      	movs	r0, #35	; 0x23
   15b94:	6027      	str	r7, [r4, #0]
   15b96:	f7fb fc97 	bl	114c8 <bsd_os_errno_set>
   15b9a:	f04f 30ff 	mov.w	r0, #4294967295
   15b9e:	e7df      	b.n	15b60 <ip_interface_close+0x9c>
   15ba0:	2009      	movs	r0, #9
   15ba2:	e7f8      	b.n	15b96 <ip_interface_close+0xd2>
   15ba4:	20020ce8 	.word	0x20020ce8

00015ba8 <ip_interface_sendto>:
   15ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15bac:	2400      	movs	r4, #0
   15bae:	b089      	sub	sp, #36	; 0x24
   15bb0:	9102      	str	r1, [sp, #8]
   15bb2:	4615      	mov	r5, r2
   15bb4:	4699      	mov	r9, r3
   15bb6:	9406      	str	r4, [sp, #24]
   15bb8:	4607      	mov	r7, r0
   15bba:	9e12      	ldr	r6, [sp, #72]	; 0x48
   15bbc:	f005 fe0c 	bl	1b7d8 <interface_socket_from_handle_get>
   15bc0:	2800      	cmp	r0, #0
   15bc2:	f000 814c 	beq.w	15e5e <ip_interface_sendto+0x2b6>
   15bc6:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   15bca:	f300 8139 	bgt.w	15e40 <ip_interface_sendto+0x298>
   15bce:	6903      	ldr	r3, [r0, #16]
   15bd0:	4604      	mov	r4, r0
   15bd2:	2b01      	cmp	r3, #1
   15bd4:	f000 80ea 	beq.w	15dac <ip_interface_sendto+0x204>
   15bd8:	6822      	ldr	r2, [r4, #0]
   15bda:	0391      	lsls	r1, r2, #14
   15bdc:	d56a      	bpl.n	15cb4 <ip_interface_sendto+0x10c>
   15bde:	f1b9 0f00 	cmp.w	r9, #0
   15be2:	f000 80f3 	beq.w	15dcc <ip_interface_sendto+0x224>
   15be6:	f019 0f02 	tst.w	r9, #2
   15bea:	f000 8133 	beq.w	15e54 <ip_interface_sendto+0x2ac>
   15bee:	2300      	movs	r3, #0
   15bf0:	9303      	str	r3, [sp, #12]
   15bf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15bf4:	f247 0806 	movw	r8, #28678	; 0x7006
   15bf8:	2b00      	cmp	r3, #0
   15bfa:	bf08      	it	eq
   15bfc:	f04f 33ff 	moveq.w	r3, #4294967295
   15c00:	f04f 0b0c 	mov.w	fp, #12
   15c04:	4a9a      	ldr	r2, [pc, #616]	; (15e70 <ip_interface_sendto+0x2c8>)
   15c06:	9307      	str	r3, [sp, #28]
   15c08:	043b      	lsls	r3, r7, #16
   15c0a:	9200      	str	r2, [sp, #0]
   15c0c:	9304      	str	r3, [sp, #16]
   15c0e:	4629      	mov	r1, r5
   15c10:	a806      	add	r0, sp, #24
   15c12:	f7ff fddb 	bl	157cc <rpc_ip_client_request_alloc>
   15c16:	2804      	cmp	r0, #4
   15c18:	f000 8098 	beq.w	15d4c <ip_interface_sendto+0x1a4>
   15c1c:	2800      	cmp	r0, #0
   15c1e:	f040 8123 	bne.w	15e68 <ip_interface_sendto+0x2c0>
   15c22:	9b06      	ldr	r3, [sp, #24]
   15c24:	f883 b008 	strb.w	fp, [r3, #8]
   15c28:	7258      	strb	r0, [r3, #9]
   15c2a:	7298      	strb	r0, [r3, #10]
   15c2c:	72d8      	strb	r0, [r3, #11]
   15c2e:	2e00      	cmp	r6, #0
   15c30:	d053      	beq.n	15cda <ip_interface_sendto+0x132>
   15c32:	68e2      	ldr	r2, [r4, #12]
   15c34:	6871      	ldr	r1, [r6, #4]
   15c36:	428a      	cmp	r2, r1
   15c38:	f040 809a 	bne.w	15d70 <ip_interface_sendto+0x1c8>
   15c3c:	7831      	ldrb	r1, [r6, #0]
   15c3e:	9813      	ldr	r0, [sp, #76]	; 0x4c
   15c40:	4288      	cmp	r0, r1
   15c42:	d10a      	bne.n	15c5a <ip_interface_sendto+0xb2>
   15c44:	2a02      	cmp	r2, #2
   15c46:	f103 001c 	add.w	r0, r3, #28
   15c4a:	f000 80e7 	beq.w	15e1c <ip_interface_sendto+0x274>
   15c4e:	2a0a      	cmp	r2, #10
   15c50:	d103      	bne.n	15c5a <ip_interface_sendto+0xb2>
   15c52:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   15c54:	2a24      	cmp	r2, #36	; 0x24
   15c56:	f000 80ce 	beq.w	15df6 <ip_interface_sendto+0x24e>
   15c5a:	f04f 0a16 	mov.w	sl, #22
   15c5e:	6818      	ldr	r0, [r3, #0]
   15c60:	b110      	cbz	r0, 15c68 <ip_interface_sendto+0xc0>
   15c62:	f7ff fde5 	bl	15830 <rpc_ip_client_data_free>
   15c66:	9b06      	ldr	r3, [sp, #24]
   15c68:	4618      	mov	r0, r3
   15c6a:	f7ff fdd9 	bl	15820 <rpc_ip_client_message_free>
   15c6e:	6823      	ldr	r3, [r4, #0]
   15c70:	0318      	lsls	r0, r3, #12
   15c72:	d40b      	bmi.n	15c8c <ip_interface_sendto+0xe4>
   15c74:	6823      	ldr	r3, [r4, #0]
   15c76:	b29b      	uxth	r3, r3
   15c78:	2b0d      	cmp	r3, #13
   15c7a:	d007      	beq.n	15c8c <ip_interface_sendto+0xe4>
   15c7c:	6823      	ldr	r3, [r4, #0]
   15c7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   15c82:	6023      	str	r3, [r4, #0]
   15c84:	6823      	ldr	r3, [r4, #0]
   15c86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   15c8a:	6023      	str	r3, [r4, #0]
   15c8c:	f1ba 0f00 	cmp.w	sl, #0
   15c90:	f040 8093 	bne.w	15dba <ip_interface_sendto+0x212>
   15c94:	6823      	ldr	r3, [r4, #0]
   15c96:	0119      	lsls	r1, r3, #4
   15c98:	d56d      	bpl.n	15d76 <ip_interface_sendto+0x1ce>
   15c9a:	6823      	ldr	r3, [r4, #0]
   15c9c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   15ca0:	6023      	str	r3, [r4, #0]
   15ca2:	9b00      	ldr	r3, [sp, #0]
   15ca4:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   15ca8:	2800      	cmp	r0, #0
   15caa:	d168      	bne.n	15d7e <ip_interface_sendto+0x1d6>
   15cac:	4628      	mov	r0, r5
   15cae:	b009      	add	sp, #36	; 0x24
   15cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cb4:	6822      	ldr	r2, [r4, #0]
   15cb6:	0092      	lsls	r2, r2, #2
   15cb8:	d406      	bmi.n	15cc8 <ip_interface_sendto+0x120>
   15cba:	2b01      	cmp	r3, #1
   15cbc:	f000 8095 	beq.w	15dea <ip_interface_sendto+0x242>
   15cc0:	6823      	ldr	r3, [r4, #0]
   15cc2:	031b      	lsls	r3, r3, #12
   15cc4:	f140 80b7 	bpl.w	15e36 <ip_interface_sendto+0x28e>
   15cc8:	6823      	ldr	r3, [r4, #0]
   15cca:	031e      	lsls	r6, r3, #12
   15ccc:	f140 80bd 	bpl.w	15e4a <ip_interface_sendto+0x2a2>
   15cd0:	4b67      	ldr	r3, [pc, #412]	; (15e70 <ip_interface_sendto+0x2c8>)
   15cd2:	f8d4 a008 	ldr.w	sl, [r4, #8]
   15cd6:	9300      	str	r3, [sp, #0]
   15cd8:	e7d8      	b.n	15c8c <ip_interface_sendto+0xe4>
   15cda:	4642      	mov	r2, r8
   15cdc:	f8c3 9014 	str.w	r9, [r3, #20]
   15ce0:	69a1      	ldr	r1, [r4, #24]
   15ce2:	9804      	ldr	r0, [sp, #16]
   15ce4:	6119      	str	r1, [r3, #16]
   15ce6:	9902      	ldr	r1, [sp, #8]
   15ce8:	4302      	orrs	r2, r0
   15cea:	60da      	str	r2, [r3, #12]
   15cec:	605d      	str	r5, [r3, #4]
   15cee:	b119      	cbz	r1, 15cf8 <ip_interface_sendto+0x150>
   15cf0:	6818      	ldr	r0, [r3, #0]
   15cf2:	462a      	mov	r2, r5
   15cf4:	f008 fcad 	bl	1e652 <memcpy>
   15cf8:	6823      	ldr	r3, [r4, #0]
   15cfa:	4641      	mov	r1, r8
   15cfc:	9305      	str	r3, [sp, #20]
   15cfe:	6823      	ldr	r3, [r4, #0]
   15d00:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   15d04:	6023      	str	r3, [r4, #0]
   15d06:	6823      	ldr	r3, [r4, #0]
   15d08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   15d0c:	6023      	str	r3, [r4, #0]
   15d0e:	9b06      	ldr	r3, [sp, #24]
   15d10:	4618      	mov	r0, r3
   15d12:	9301      	str	r3, [sp, #4]
   15d14:	f7ff fd6e 	bl	157f4 <rpc_ip_client_request_send>
   15d18:	9b01      	ldr	r3, [sp, #4]
   15d1a:	4682      	mov	sl, r0
   15d1c:	2800      	cmp	r0, #0
   15d1e:	d138      	bne.n	15d92 <ip_interface_sendto+0x1ea>
   15d20:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   15d24:	ab07      	add	r3, sp, #28
   15d26:	4611      	mov	r1, r2
   15d28:	4638      	mov	r0, r7
   15d2a:	f005 fce1 	bl	1b6f0 <interface_socket_wait>
   15d2e:	4603      	mov	r3, r0
   15d30:	b198      	cbz	r0, 15d5a <ip_interface_sendto+0x1b2>
   15d32:	6822      	ldr	r2, [r4, #0]
   15d34:	0312      	lsls	r2, r2, #12
   15d36:	d455      	bmi.n	15de4 <ip_interface_sendto+0x23c>
   15d38:	2b3c      	cmp	r3, #60	; 0x3c
   15d3a:	d017      	beq.n	15d6c <ip_interface_sendto+0x1c4>
   15d3c:	2b0c      	cmp	r3, #12
   15d3e:	d115      	bne.n	15d6c <ip_interface_sendto+0x1c4>
   15d40:	9b00      	ldr	r3, [sp, #0]
   15d42:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   15d46:	b108      	cbz	r0, 15d4c <ip_interface_sendto+0x1a4>
   15d48:	f7ff fd6a 	bl	15820 <rpc_ip_client_message_free>
   15d4c:	9b03      	ldr	r3, [sp, #12]
   15d4e:	2b00      	cmp	r3, #0
   15d50:	f47f af5d 	bne.w	15c0e <ip_interface_sendto+0x66>
   15d54:	f04f 0a23 	mov.w	sl, #35	; 0x23
   15d58:	e789      	b.n	15c6e <ip_interface_sendto+0xc6>
   15d5a:	9001      	str	r0, [sp, #4]
   15d5c:	4638      	mov	r0, r7
   15d5e:	f005 fd3b 	bl	1b7d8 <interface_socket_from_handle_get>
   15d62:	9b01      	ldr	r3, [sp, #4]
   15d64:	b110      	cbz	r0, 15d6c <ip_interface_sendto+0x1c4>
   15d66:	6843      	ldr	r3, [r0, #4]
   15d68:	2b00      	cmp	r3, #0
   15d6a:	d136      	bne.n	15dda <ip_interface_sendto+0x232>
   15d6c:	469a      	mov	sl, r3
   15d6e:	e77e      	b.n	15c6e <ip_interface_sendto+0xc6>
   15d70:	f04f 0a2f 	mov.w	sl, #47	; 0x2f
   15d74:	e773      	b.n	15c5e <ip_interface_sendto+0xb6>
   15d76:	9b00      	ldr	r3, [sp, #0]
   15d78:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   15d7c:	6985      	ldr	r5, [r0, #24]
   15d7e:	f7ff fd4f 	bl	15820 <rpc_ip_client_message_free>
   15d82:	2300      	movs	r3, #0
   15d84:	4628      	mov	r0, r5
   15d86:	9a00      	ldr	r2, [sp, #0]
   15d88:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
   15d8c:	b009      	add	sp, #36	; 0x24
   15d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d92:	6818      	ldr	r0, [r3, #0]
   15d94:	469a      	mov	sl, r3
   15d96:	b108      	cbz	r0, 15d9c <ip_interface_sendto+0x1f4>
   15d98:	f7ff fd4a 	bl	15830 <rpc_ip_client_data_free>
   15d9c:	4650      	mov	r0, sl
   15d9e:	f7ff fd3f 	bl	15820 <rpc_ip_client_message_free>
   15da2:	9b05      	ldr	r3, [sp, #20]
   15da4:	f04f 0a23 	mov.w	sl, #35	; 0x23
   15da8:	6023      	str	r3, [r4, #0]
   15daa:	e760      	b.n	15c6e <ip_interface_sendto+0xc6>
   15dac:	2e00      	cmp	r6, #0
   15dae:	f43f af13 	beq.w	15bd8 <ip_interface_sendto+0x30>
   15db2:	f04f 0a38 	mov.w	sl, #56	; 0x38
   15db6:	4b2e      	ldr	r3, [pc, #184]	; (15e70 <ip_interface_sendto+0x2c8>)
   15db8:	9300      	str	r3, [sp, #0]
   15dba:	4650      	mov	r0, sl
   15dbc:	f7fb fb84 	bl	114c8 <bsd_os_errno_set>
   15dc0:	9b00      	ldr	r3, [sp, #0]
   15dc2:	f04f 35ff 	mov.w	r5, #4294967295
   15dc6:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   15dca:	e76d      	b.n	15ca8 <ip_interface_sendto+0x100>
   15dcc:	6823      	ldr	r3, [r4, #0]
   15dce:	f083 5380 	eor.w	r3, r3, #268435456	; 0x10000000
   15dd2:	f3c3 7300 	ubfx	r3, r3, #28, #1
   15dd6:	9303      	str	r3, [sp, #12]
   15dd8:	e70b      	b.n	15bf2 <ip_interface_sendto+0x4a>
   15dda:	f8c0 a004 	str.w	sl, [r0, #4]
   15dde:	6822      	ldr	r2, [r4, #0]
   15de0:	0312      	lsls	r2, r2, #12
   15de2:	d5a9      	bpl.n	15d38 <ip_interface_sendto+0x190>
   15de4:	f8d4 a008 	ldr.w	sl, [r4, #8]
   15de8:	e741      	b.n	15c6e <ip_interface_sendto+0xc6>
   15dea:	6823      	ldr	r3, [r4, #0]
   15dec:	b29b      	uxth	r3, r3
   15dee:	2b05      	cmp	r3, #5
   15df0:	f47f af6a 	bne.w	15cc8 <ip_interface_sendto+0x120>
   15df4:	e764      	b.n	15cc0 <ip_interface_sendto+0x118>
   15df6:	2210      	movs	r2, #16
   15df8:	8931      	ldrh	r1, [r6, #8]
   15dfa:	835a      	strh	r2, [r3, #26]
   15dfc:	8319      	strh	r1, [r3, #24]
   15dfe:	18b1      	adds	r1, r6, r2
   15e00:	f008 fc27 	bl	1e652 <memcpy>
   15e04:	f247 0207 	movw	r2, #28679	; 0x7007
   15e08:	9b06      	ldr	r3, [sp, #24]
   15e0a:	4690      	mov	r8, r2
   15e0c:	6899      	ldr	r1, [r3, #8]
   15e0e:	8b58      	ldrh	r0, [r3, #26]
   15e10:	3104      	adds	r1, #4
   15e12:	4401      	add	r1, r0
   15e14:	f8c3 9014 	str.w	r9, [r3, #20]
   15e18:	6099      	str	r1, [r3, #8]
   15e1a:	e761      	b.n	15ce0 <ip_interface_sendto+0x138>
   15e1c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   15e1e:	2a10      	cmp	r2, #16
   15e20:	f47f af1b 	bne.w	15c5a <ip_interface_sendto+0xb2>
   15e24:	2204      	movs	r2, #4
   15e26:	8931      	ldrh	r1, [r6, #8]
   15e28:	835a      	strh	r2, [r3, #26]
   15e2a:	8319      	strh	r1, [r3, #24]
   15e2c:	f106 010c 	add.w	r1, r6, #12
   15e30:	f008 fc0f 	bl	1e652 <memcpy>
   15e34:	e7e6      	b.n	15e04 <ip_interface_sendto+0x25c>
   15e36:	4b0e      	ldr	r3, [pc, #56]	; (15e70 <ip_interface_sendto+0x2c8>)
   15e38:	f04f 0a23 	mov.w	sl, #35	; 0x23
   15e3c:	9300      	str	r3, [sp, #0]
   15e3e:	e7bc      	b.n	15dba <ip_interface_sendto+0x212>
   15e40:	4b0b      	ldr	r3, [pc, #44]	; (15e70 <ip_interface_sendto+0x2c8>)
   15e42:	f04f 0a28 	mov.w	sl, #40	; 0x28
   15e46:	9300      	str	r3, [sp, #0]
   15e48:	e7b7      	b.n	15dba <ip_interface_sendto+0x212>
   15e4a:	4b09      	ldr	r3, [pc, #36]	; (15e70 <ip_interface_sendto+0x2c8>)
   15e4c:	f04f 0a39 	mov.w	sl, #57	; 0x39
   15e50:	9300      	str	r3, [sp, #0]
   15e52:	e7b2      	b.n	15dba <ip_interface_sendto+0x212>
   15e54:	4b06      	ldr	r3, [pc, #24]	; (15e70 <ip_interface_sendto+0x2c8>)
   15e56:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   15e5a:	9300      	str	r3, [sp, #0]
   15e5c:	e7ad      	b.n	15dba <ip_interface_sendto+0x212>
   15e5e:	4b04      	ldr	r3, [pc, #16]	; (15e70 <ip_interface_sendto+0x2c8>)
   15e60:	f04f 0a09 	mov.w	sl, #9
   15e64:	9300      	str	r3, [sp, #0]
   15e66:	e7a8      	b.n	15dba <ip_interface_sendto+0x212>
   15e68:	f04f 0a0c 	mov.w	sl, #12
   15e6c:	e6ff      	b.n	15c6e <ip_interface_sendto+0xc6>
   15e6e:	bf00      	nop
   15e70:	20020ce8 	.word	0x20020ce8

00015e74 <ip_interface_recvfrom>:
   15e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e78:	b087      	sub	sp, #28
   15e7a:	2a00      	cmp	r2, #0
   15e7c:	f000 8112 	beq.w	160a4 <ip_interface_recvfrom+0x230>
   15e80:	4680      	mov	r8, r0
   15e82:	468b      	mov	fp, r1
   15e84:	469a      	mov	sl, r3
   15e86:	4691      	mov	r9, r2
   15e88:	b11b      	cbz	r3, 15e92 <ip_interface_recvfrom+0x1e>
   15e8a:	f013 0f3a 	tst.w	r3, #58	; 0x3a
   15e8e:	f000 8107 	beq.w	160a0 <ip_interface_recvfrom+0x22c>
   15e92:	4640      	mov	r0, r8
   15e94:	f005 fca0 	bl	1b7d8 <interface_socket_from_handle_get>
   15e98:	4604      	mov	r4, r0
   15e9a:	2800      	cmp	r0, #0
   15e9c:	f000 8104 	beq.w	160a8 <ip_interface_recvfrom+0x234>
   15ea0:	6803      	ldr	r3, [r0, #0]
   15ea2:	02db      	lsls	r3, r3, #11
   15ea4:	d562      	bpl.n	15f6c <ip_interface_recvfrom+0xf8>
   15ea6:	f01a 0f02 	tst.w	sl, #2
   15eaa:	bf18      	it	ne
   15eac:	2600      	movne	r6, #0
   15eae:	f04f 35ff 	mov.w	r5, #4294967295
   15eb2:	bf08      	it	eq
   15eb4:	6806      	ldreq	r6, [r0, #0]
   15eb6:	f00a 0310 	and.w	r3, sl, #16
   15eba:	bf04      	itt	eq
   15ebc:	f086 5680 	eoreq.w	r6, r6, #268435456	; 0x10000000
   15ec0:	f3c6 7600 	ubfxeq	r6, r6, #28, #1
   15ec4:	9301      	str	r3, [sp, #4]
   15ec6:	6823      	ldr	r3, [r4, #0]
   15ec8:	03df      	lsls	r7, r3, #15
   15eca:	d567      	bpl.n	15f9c <ip_interface_recvfrom+0x128>
   15ecc:	6823      	ldr	r3, [r4, #0]
   15ece:	69e0      	ldr	r0, [r4, #28]
   15ed0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   15ed4:	6023      	str	r3, [r4, #0]
   15ed6:	6803      	ldr	r3, [r0, #0]
   15ed8:	68db      	ldr	r3, [r3, #12]
   15eda:	4798      	blx	r3
   15edc:	4605      	mov	r5, r0
   15ede:	3001      	adds	r0, #1
   15ee0:	d07d      	beq.n	15fde <ip_interface_recvfrom+0x16a>
   15ee2:	45a9      	cmp	r9, r5
   15ee4:	dd03      	ble.n	15eee <ip_interface_recvfrom+0x7a>
   15ee6:	6923      	ldr	r3, [r4, #16]
   15ee8:	2b01      	cmp	r3, #1
   15eea:	f000 80a3 	beq.w	16034 <ip_interface_recvfrom+0x1c0>
   15eee:	f04f 0800 	mov.w	r8, #0
   15ef2:	af02      	add	r7, sp, #8
   15ef4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   15ef6:	b103      	cbz	r3, 15efa <ip_interface_recvfrom+0x86>
   15ef8:	681b      	ldr	r3, [r3, #0]
   15efa:	9a10      	ldr	r2, [sp, #64]	; 0x40
   15efc:	e9cd b902 	strd	fp, r9, [sp, #8]
   15f00:	e9cd 2304 	strd	r2, r3, [sp, #16]
   15f04:	69e0      	ldr	r0, [r4, #28]
   15f06:	4639      	mov	r1, r7
   15f08:	6803      	ldr	r3, [r0, #0]
   15f0a:	4652      	mov	r2, sl
   15f0c:	689b      	ldr	r3, [r3, #8]
   15f0e:	4798      	blx	r3
   15f10:	4605      	mov	r5, r0
   15f12:	69e0      	ldr	r0, [r4, #28]
   15f14:	1c6b      	adds	r3, r5, #1
   15f16:	6803      	ldr	r3, [r0, #0]
   15f18:	bf18      	it	ne
   15f1a:	2701      	movne	r7, #1
   15f1c:	68db      	ldr	r3, [r3, #12]
   15f1e:	bf0a      	itet	eq
   15f20:	2700      	moveq	r7, #0
   15f22:	2600      	movne	r6, #0
   15f24:	2623      	moveq	r6, #35	; 0x23
   15f26:	4798      	blx	r3
   15f28:	3001      	adds	r0, #1
   15f2a:	d132      	bne.n	15f92 <ip_interface_recvfrom+0x11e>
   15f2c:	f1b8 0f00 	cmp.w	r8, #0
   15f30:	f000 80b0 	beq.w	16094 <ip_interface_recvfrom+0x220>
   15f34:	2f00      	cmp	r7, #0
   15f36:	f000 80a1 	beq.w	1607c <ip_interface_recvfrom+0x208>
   15f3a:	6823      	ldr	r3, [r4, #0]
   15f3c:	0318      	lsls	r0, r3, #12
   15f3e:	d506      	bpl.n	15f4e <ip_interface_recvfrom+0xda>
   15f40:	6823      	ldr	r3, [r4, #0]
   15f42:	b29b      	uxth	r3, r3
   15f44:	2b0d      	cmp	r3, #13
   15f46:	d002      	beq.n	15f4e <ip_interface_recvfrom+0xda>
   15f48:	6923      	ldr	r3, [r4, #16]
   15f4a:	2b01      	cmp	r3, #1
   15f4c:	d021      	beq.n	15f92 <ip_interface_recvfrom+0x11e>
   15f4e:	6823      	ldr	r3, [r4, #0]
   15f50:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   15f54:	6823      	ldr	r3, [r4, #0]
   15f56:	f040 80a9 	bne.w	160ac <ip_interface_recvfrom+0x238>
   15f5a:	0319      	lsls	r1, r3, #12
   15f5c:	d473      	bmi.n	16046 <ip_interface_recvfrom+0x1d2>
   15f5e:	2e00      	cmp	r6, #0
   15f60:	f040 8086 	bne.w	16070 <ip_interface_recvfrom+0x1fc>
   15f64:	4628      	mov	r0, r5
   15f66:	b007      	add	sp, #28
   15f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f6c:	6803      	ldr	r3, [r0, #0]
   15f6e:	b29b      	uxth	r3, r3
   15f70:	2b06      	cmp	r3, #6
   15f72:	d071      	beq.n	16058 <ip_interface_recvfrom+0x1e4>
   15f74:	6803      	ldr	r3, [r0, #0]
   15f76:	b29b      	uxth	r3, r3
   15f78:	2b07      	cmp	r3, #7
   15f7a:	bf0c      	ite	eq
   15f7c:	2609      	moveq	r6, #9
   15f7e:	2639      	movne	r6, #57	; 0x39
   15f80:	69e0      	ldr	r0, [r4, #28]
   15f82:	6803      	ldr	r3, [r0, #0]
   15f84:	68db      	ldr	r3, [r3, #12]
   15f86:	4798      	blx	r3
   15f88:	1c43      	adds	r3, r0, #1
   15f8a:	4605      	mov	r5, r0
   15f8c:	d0df      	beq.n	15f4e <ip_interface_recvfrom+0xda>
   15f8e:	f04f 35ff 	mov.w	r5, #4294967295
   15f92:	6823      	ldr	r3, [r4, #0]
   15f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   15f98:	6023      	str	r3, [r4, #0]
   15f9a:	e7e0      	b.n	15f5e <ip_interface_recvfrom+0xea>
   15f9c:	2e00      	cmp	r6, #0
   15f9e:	d07d      	beq.n	1609c <ip_interface_recvfrom+0x228>
   15fa0:	6a26      	ldr	r6, [r4, #32]
   15fa2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   15fa6:	2e00      	cmp	r6, #0
   15fa8:	bf08      	it	eq
   15faa:	f04f 36ff 	moveq.w	r6, #4294967295
   15fae:	af02      	add	r7, sp, #8
   15fb0:	463b      	mov	r3, r7
   15fb2:	4611      	mov	r1, r2
   15fb4:	4640      	mov	r0, r8
   15fb6:	9602      	str	r6, [sp, #8]
   15fb8:	f005 fb9a 	bl	1b6f0 <interface_socket_wait>
   15fbc:	4606      	mov	r6, r0
   15fbe:	b350      	cbz	r0, 16016 <ip_interface_recvfrom+0x1a2>
   15fc0:	6823      	ldr	r3, [r4, #0]
   15fc2:	031a      	lsls	r2, r3, #12
   15fc4:	d532      	bpl.n	1602c <ip_interface_recvfrom+0x1b8>
   15fc6:	6823      	ldr	r3, [r4, #0]
   15fc8:	b29b      	uxth	r3, r3
   15fca:	2b0d      	cmp	r3, #13
   15fcc:	d02e      	beq.n	1602c <ip_interface_recvfrom+0x1b8>
   15fce:	6923      	ldr	r3, [r4, #16]
   15fd0:	f1a3 0801 	sub.w	r8, r3, #1
   15fd4:	fab8 f888 	clz	r8, r8
   15fd8:	ea4f 1858 	mov.w	r8, r8, lsr #5
   15fdc:	e78a      	b.n	15ef4 <ip_interface_recvfrom+0x80>
   15fde:	6823      	ldr	r3, [r4, #0]
   15fe0:	031a      	lsls	r2, r3, #12
   15fe2:	d5db      	bpl.n	15f9c <ip_interface_recvfrom+0x128>
   15fe4:	6823      	ldr	r3, [r4, #0]
   15fe6:	b29b      	uxth	r3, r3
   15fe8:	2b0d      	cmp	r3, #13
   15fea:	d0d7      	beq.n	15f9c <ip_interface_recvfrom+0x128>
   15fec:	6923      	ldr	r3, [r4, #16]
   15fee:	69e0      	ldr	r0, [r4, #28]
   15ff0:	2b01      	cmp	r3, #1
   15ff2:	d033      	beq.n	1605c <ip_interface_recvfrom+0x1e8>
   15ff4:	2639      	movs	r6, #57	; 0x39
   15ff6:	6823      	ldr	r3, [r4, #0]
   15ff8:	0c1b      	lsrs	r3, r3, #16
   15ffa:	041b      	lsls	r3, r3, #16
   15ffc:	f043 030d 	orr.w	r3, r3, #13
   16000:	6023      	str	r3, [r4, #0]
   16002:	6823      	ldr	r3, [r4, #0]
   16004:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   16008:	6023      	str	r3, [r4, #0]
   1600a:	6803      	ldr	r3, [r0, #0]
   1600c:	68db      	ldr	r3, [r3, #12]
   1600e:	4798      	blx	r3
   16010:	3001      	adds	r0, #1
   16012:	d1be      	bne.n	15f92 <ip_interface_recvfrom+0x11e>
   16014:	e79b      	b.n	15f4e <ip_interface_recvfrom+0xda>
   16016:	4640      	mov	r0, r8
   16018:	f005 fbde 	bl	1b7d8 <interface_socket_from_handle_get>
   1601c:	b140      	cbz	r0, 16030 <ip_interface_recvfrom+0x1bc>
   1601e:	6846      	ldr	r6, [r0, #4]
   16020:	b136      	cbz	r6, 16030 <ip_interface_recvfrom+0x1bc>
   16022:	2300      	movs	r3, #0
   16024:	6043      	str	r3, [r0, #4]
   16026:	6823      	ldr	r3, [r4, #0]
   16028:	031a      	lsls	r2, r3, #12
   1602a:	d4cc      	bmi.n	15fc6 <ip_interface_recvfrom+0x152>
   1602c:	69e0      	ldr	r0, [r4, #28]
   1602e:	e7ec      	b.n	1600a <ip_interface_recvfrom+0x196>
   16030:	2601      	movs	r6, #1
   16032:	e748      	b.n	15ec6 <ip_interface_recvfrom+0x52>
   16034:	9b01      	ldr	r3, [sp, #4]
   16036:	b11b      	cbz	r3, 16040 <ip_interface_recvfrom+0x1cc>
   16038:	6823      	ldr	r3, [r4, #0]
   1603a:	00d9      	lsls	r1, r3, #3
   1603c:	d5b0      	bpl.n	15fa0 <ip_interface_recvfrom+0x12c>
   1603e:	e756      	b.n	15eee <ip_interface_recvfrom+0x7a>
   16040:	4698      	mov	r8, r3
   16042:	af02      	add	r7, sp, #8
   16044:	e756      	b.n	15ef4 <ip_interface_recvfrom+0x80>
   16046:	6823      	ldr	r3, [r4, #0]
   16048:	b29b      	uxth	r3, r3
   1604a:	2b0d      	cmp	r3, #13
   1604c:	d187      	bne.n	15f5e <ip_interface_recvfrom+0xea>
   1604e:	68a3      	ldr	r3, [r4, #8]
   16050:	2b00      	cmp	r3, #0
   16052:	d084      	beq.n	15f5e <ip_interface_recvfrom+0xea>
   16054:	68a6      	ldr	r6, [r4, #8]
   16056:	e782      	b.n	15f5e <ip_interface_recvfrom+0xea>
   16058:	2609      	movs	r6, #9
   1605a:	e791      	b.n	15f80 <ip_interface_recvfrom+0x10c>
   1605c:	6803      	ldr	r3, [r0, #0]
   1605e:	68db      	ldr	r3, [r3, #12]
   16060:	4798      	blx	r3
   16062:	3001      	adds	r0, #1
   16064:	d00a      	beq.n	1607c <ip_interface_recvfrom+0x208>
   16066:	2623      	movs	r6, #35	; 0x23
   16068:	6823      	ldr	r3, [r4, #0]
   1606a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1606e:	6023      	str	r3, [r4, #0]
   16070:	4630      	mov	r0, r6
   16072:	f7fb fa29 	bl	114c8 <bsd_os_errno_set>
   16076:	f04f 35ff 	mov.w	r5, #4294967295
   1607a:	e773      	b.n	15f64 <ip_interface_recvfrom+0xf0>
   1607c:	6823      	ldr	r3, [r4, #0]
   1607e:	2500      	movs	r5, #0
   16080:	0c1b      	lsrs	r3, r3, #16
   16082:	041b      	lsls	r3, r3, #16
   16084:	f043 030d 	orr.w	r3, r3, #13
   16088:	6023      	str	r3, [r4, #0]
   1608a:	6823      	ldr	r3, [r4, #0]
   1608c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   16090:	6023      	str	r3, [r4, #0]
   16092:	e767      	b.n	15f64 <ip_interface_recvfrom+0xf0>
   16094:	2f00      	cmp	r7, #0
   16096:	f47f af50 	bne.w	15f3a <ip_interface_recvfrom+0xc6>
   1609a:	e758      	b.n	15f4e <ip_interface_recvfrom+0xda>
   1609c:	2623      	movs	r6, #35	; 0x23
   1609e:	e7c5      	b.n	1602c <ip_interface_recvfrom+0x1b8>
   160a0:	262d      	movs	r6, #45	; 0x2d
   160a2:	e7e5      	b.n	16070 <ip_interface_recvfrom+0x1fc>
   160a4:	2616      	movs	r6, #22
   160a6:	e7e3      	b.n	16070 <ip_interface_recvfrom+0x1fc>
   160a8:	2609      	movs	r6, #9
   160aa:	e7e1      	b.n	16070 <ip_interface_recvfrom+0x1fc>
   160ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   160b0:	6023      	str	r3, [r4, #0]
   160b2:	6823      	ldr	r3, [r4, #0]
   160b4:	2669      	movs	r6, #105	; 0x69
   160b6:	0c1b      	lsrs	r3, r3, #16
   160b8:	041b      	lsls	r3, r3, #16
   160ba:	f043 030d 	orr.w	r3, r3, #13
   160be:	6023      	str	r3, [r4, #0]
   160c0:	e7d6      	b.n	16070 <ip_interface_recvfrom+0x1fc>
   160c2:	bf00      	nop

000160c4 <ip_interface_connect>:
   160c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   160c8:	b082      	sub	sp, #8
   160ca:	2900      	cmp	r1, #0
   160cc:	d04b      	beq.n	16166 <ip_interface_connect+0xa2>
   160ce:	4617      	mov	r7, r2
   160d0:	2a00      	cmp	r2, #0
   160d2:	d048      	beq.n	16166 <ip_interface_connect+0xa2>
   160d4:	4680      	mov	r8, r0
   160d6:	4689      	mov	r9, r1
   160d8:	f005 fb7e 	bl	1b7d8 <interface_socket_from_handle_get>
   160dc:	4605      	mov	r5, r0
   160de:	2800      	cmp	r0, #0
   160e0:	f000 80af 	beq.w	16242 <ip_interface_connect+0x17e>
   160e4:	6803      	ldr	r3, [r0, #0]
   160e6:	b29b      	uxth	r3, r3
   160e8:	2b02      	cmp	r3, #2
   160ea:	d004      	beq.n	160f6 <ip_interface_connect+0x32>
   160ec:	6803      	ldr	r3, [r0, #0]
   160ee:	b29b      	uxth	r3, r3
   160f0:	2b04      	cmp	r3, #4
   160f2:	f040 809d 	bne.w	16230 <ip_interface_connect+0x16c>
   160f6:	6829      	ldr	r1, [r5, #0]
   160f8:	f011 5100 	ands.w	r1, r1, #536870912	; 0x20000000
   160fc:	f040 8089 	bne.w	16212 <ip_interface_connect+0x14e>
   16100:	ae02      	add	r6, sp, #8
   16102:	f8d5 a018 	ldr.w	sl, [r5, #24]
   16106:	f846 1d04 	str.w	r1, [r6, #-4]!
   1610a:	4630      	mov	r0, r6
   1610c:	f7ff fb5e 	bl	157cc <rpc_ip_client_request_alloc>
   16110:	bb98      	cbnz	r0, 1617a <ip_interface_connect+0xb6>
   16112:	2108      	movs	r1, #8
   16114:	ea4f 4208 	mov.w	r2, r8, lsl #16
   16118:	9c01      	ldr	r4, [sp, #4]
   1611a:	f442 43e0 	orr.w	r3, r2, #28672	; 0x7000
   1611e:	f043 0302 	orr.w	r3, r3, #2
   16122:	60e3      	str	r3, [r4, #12]
   16124:	f8c4 a010 	str.w	sl, [r4, #16]
   16128:	7260      	strb	r0, [r4, #9]
   1612a:	72a0      	strb	r0, [r4, #10]
   1612c:	72e0      	strb	r0, [r4, #11]
   1612e:	7221      	strb	r1, [r4, #8]
   16130:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
   16134:	f042 0202 	orr.w	r2, r2, #2
   16138:	60e2      	str	r2, [r4, #12]
   1613a:	68a3      	ldr	r3, [r4, #8]
   1613c:	69aa      	ldr	r2, [r5, #24]
   1613e:	3304      	adds	r3, #4
   16140:	6122      	str	r2, [r4, #16]
   16142:	60a3      	str	r3, [r4, #8]
   16144:	68eb      	ldr	r3, [r5, #12]
   16146:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1614a:	4293      	cmp	r3, r2
   1614c:	d11b      	bne.n	16186 <ip_interface_connect+0xc2>
   1614e:	f899 2000 	ldrb.w	r2, [r9]
   16152:	4297      	cmp	r7, r2
   16154:	d107      	bne.n	16166 <ip_interface_connect+0xa2>
   16156:	2b02      	cmp	r3, #2
   16158:	f104 0018 	add.w	r0, r4, #24
   1615c:	d015      	beq.n	1618a <ip_interface_connect+0xc6>
   1615e:	2b0a      	cmp	r3, #10
   16160:	d101      	bne.n	16166 <ip_interface_connect+0xa2>
   16162:	2f24      	cmp	r7, #36	; 0x24
   16164:	d01d      	beq.n	161a2 <ip_interface_connect+0xde>
   16166:	2416      	movs	r4, #22
   16168:	4620      	mov	r0, r4
   1616a:	f7fb f9ad 	bl	114c8 <bsd_os_errno_set>
   1616e:	f04f 34ff 	mov.w	r4, #4294967295
   16172:	4620      	mov	r0, r4
   16174:	b002      	add	sp, #8
   16176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1617a:	9c01      	ldr	r4, [sp, #4]
   1617c:	2c00      	cmp	r4, #0
   1617e:	d05e      	beq.n	1623e <ip_interface_connect+0x17a>
   16180:	ea4f 4208 	mov.w	r2, r8, lsl #16
   16184:	e7d4      	b.n	16130 <ip_interface_connect+0x6c>
   16186:	242f      	movs	r4, #47	; 0x2f
   16188:	e7ee      	b.n	16168 <ip_interface_connect+0xa4>
   1618a:	2f10      	cmp	r7, #16
   1618c:	d1eb      	bne.n	16166 <ip_interface_connect+0xa2>
   1618e:	2204      	movs	r2, #4
   16190:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   16194:	f109 010c 	add.w	r1, r9, #12
   16198:	82e2      	strh	r2, [r4, #22]
   1619a:	82a3      	strh	r3, [r4, #20]
   1619c:	f008 fa59 	bl	1e652 <memcpy>
   161a0:	e008      	b.n	161b4 <ip_interface_connect+0xf0>
   161a2:	2210      	movs	r2, #16
   161a4:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   161a8:	eb09 0102 	add.w	r1, r9, r2
   161ac:	82e2      	strh	r2, [r4, #22]
   161ae:	82a3      	strh	r3, [r4, #20]
   161b0:	f008 fa4f 	bl	1e652 <memcpy>
   161b4:	68a3      	ldr	r3, [r4, #8]
   161b6:	8ae2      	ldrh	r2, [r4, #22]
   161b8:	f247 0102 	movw	r1, #28674	; 0x7002
   161bc:	4413      	add	r3, r2
   161be:	60a3      	str	r3, [r4, #8]
   161c0:	682f      	ldr	r7, [r5, #0]
   161c2:	682b      	ldr	r3, [r5, #0]
   161c4:	4620      	mov	r0, r4
   161c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   161ca:	602b      	str	r3, [r5, #0]
   161cc:	f7ff fb12 	bl	157f4 <rpc_ip_client_request_send>
   161d0:	b9a8      	cbnz	r0, 161fe <ip_interface_connect+0x13a>
   161d2:	682b      	ldr	r3, [r5, #0]
   161d4:	00db      	lsls	r3, r3, #3
   161d6:	d429      	bmi.n	1622c <ip_interface_connect+0x168>
   161d8:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   161da:	4633      	mov	r3, r6
   161dc:	2c00      	cmp	r4, #0
   161de:	bf08      	it	eq
   161e0:	f04f 34ff 	moveq.w	r4, #4294967295
   161e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   161e8:	2105      	movs	r1, #5
   161ea:	4640      	mov	r0, r8
   161ec:	9401      	str	r4, [sp, #4]
   161ee:	f005 fa7f 	bl	1b6f0 <interface_socket_wait>
   161f2:	4604      	mov	r4, r0
   161f4:	b178      	cbz	r0, 16216 <ip_interface_connect+0x152>
   161f6:	2c73      	cmp	r4, #115	; 0x73
   161f8:	d0b6      	beq.n	16168 <ip_interface_connect+0xa4>
   161fa:	602f      	str	r7, [r5, #0]
   161fc:	e7b4      	b.n	16168 <ip_interface_connect+0xa4>
   161fe:	6820      	ldr	r0, [r4, #0]
   16200:	b108      	cbz	r0, 16206 <ip_interface_connect+0x142>
   16202:	f7ff fb15 	bl	15830 <rpc_ip_client_data_free>
   16206:	4620      	mov	r0, r4
   16208:	f7ff fb0a 	bl	15820 <rpc_ip_client_message_free>
   1620c:	2423      	movs	r4, #35	; 0x23
   1620e:	602f      	str	r7, [r5, #0]
   16210:	e7aa      	b.n	16168 <ip_interface_connect+0xa4>
   16212:	2472      	movs	r4, #114	; 0x72
   16214:	e7a8      	b.n	16168 <ip_interface_connect+0xa4>
   16216:	4640      	mov	r0, r8
   16218:	f005 fade 	bl	1b7d8 <interface_socket_from_handle_get>
   1621c:	2800      	cmp	r0, #0
   1621e:	d0a8      	beq.n	16172 <ip_interface_connect+0xae>
   16220:	6843      	ldr	r3, [r0, #4]
   16222:	2b00      	cmp	r3, #0
   16224:	d0a5      	beq.n	16172 <ip_interface_connect+0xae>
   16226:	6044      	str	r4, [r0, #4]
   16228:	461c      	mov	r4, r3
   1622a:	e7e4      	b.n	161f6 <ip_interface_connect+0x132>
   1622c:	2473      	movs	r4, #115	; 0x73
   1622e:	e79b      	b.n	16168 <ip_interface_connect+0xa4>
   16230:	6803      	ldr	r3, [r0, #0]
   16232:	b29b      	uxth	r3, r3
   16234:	2b05      	cmp	r3, #5
   16236:	bf14      	ite	ne
   16238:	2409      	movne	r4, #9
   1623a:	2438      	moveq	r4, #56	; 0x38
   1623c:	e794      	b.n	16168 <ip_interface_connect+0xa4>
   1623e:	240c      	movs	r4, #12
   16240:	e792      	b.n	16168 <ip_interface_connect+0xa4>
   16242:	2409      	movs	r4, #9
   16244:	e790      	b.n	16168 <ip_interface_connect+0xa4>
   16246:	bf00      	nop

00016248 <ip_interface_socketoption_get>:
   16248:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   1624c:	f04f 34ff 	mov.w	r4, #4294967295
   16250:	b082      	sub	sp, #8
   16252:	9400      	str	r4, [sp, #0]
   16254:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   16256:	2c00      	cmp	r4, #0
   16258:	d05b      	beq.n	16312 <ip_interface_socketoption_get+0xca>
   1625a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1625c:	6824      	ldr	r4, [r4, #0]
   1625e:	2c00      	cmp	r4, #0
   16260:	d057      	beq.n	16312 <ip_interface_socketoption_get+0xca>
   16262:	680c      	ldr	r4, [r1, #0]
   16264:	0266      	lsls	r6, r4, #9
   16266:	d44f      	bmi.n	16308 <ip_interface_socketoption_get+0xc0>
   16268:	680c      	ldr	r4, [r1, #0]
   1626a:	0225      	lsls	r5, r4, #8
   1626c:	d44c      	bmi.n	16308 <ip_interface_socketoption_get+0xc0>
   1626e:	680c      	ldr	r4, [r1, #0]
   16270:	01e4      	lsls	r4, r4, #7
   16272:	d449      	bmi.n	16308 <ip_interface_socketoption_get+0xc0>
   16274:	680c      	ldr	r4, [r1, #0]
   16276:	f014 7c00 	ands.w	ip, r4, #33554432	; 0x2000000
   1627a:	d145      	bne.n	16308 <ip_interface_socketoption_get+0xc0>
   1627c:	460c      	mov	r4, r1
   1627e:	680e      	ldr	r6, [r1, #0]
   16280:	461f      	mov	r7, r3
   16282:	680b      	ldr	r3, [r1, #0]
   16284:	4681      	mov	r9, r0
   16286:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1628a:	600b      	str	r3, [r1, #0]
   1628c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1628e:	a802      	add	r0, sp, #8
   16290:	f840 cd04 	str.w	ip, [r0, #-4]!
   16294:	6819      	ldr	r1, [r3, #0]
   16296:	4615      	mov	r5, r2
   16298:	f8d4 b018 	ldr.w	fp, [r4, #24]
   1629c:	f7ff fa96 	bl	157cc <rpc_ip_client_request_alloc>
   162a0:	2800      	cmp	r0, #0
   162a2:	d146      	bne.n	16332 <ip_interface_socketoption_get+0xea>
   162a4:	f247 0304 	movw	r3, #28676	; 0x7004
   162a8:	2208      	movs	r2, #8
   162aa:	f8dd a004 	ldr.w	sl, [sp, #4]
   162ae:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
   162b2:	f8ca 300c 	str.w	r3, [sl, #12]
   162b6:	f8ca b010 	str.w	fp, [sl, #16]
   162ba:	f88a 0009 	strb.w	r0, [sl, #9]
   162be:	f88a 000a 	strb.w	r0, [sl, #10]
   162c2:	f88a 000b 	strb.w	r0, [sl, #11]
   162c6:	f88a 2008 	strb.w	r2, [sl, #8]
   162ca:	f8da 3008 	ldr.w	r3, [sl, #8]
   162ce:	f8ca 7018 	str.w	r7, [sl, #24]
   162d2:	3308      	adds	r3, #8
   162d4:	f8ca 5014 	str.w	r5, [sl, #20]
   162d8:	f8ca 3008 	str.w	r3, [sl, #8]
   162dc:	f247 0104 	movw	r1, #28676	; 0x7004
   162e0:	4650      	mov	r0, sl
   162e2:	f8da 7000 	ldr.w	r7, [sl]
   162e6:	f7ff fa85 	bl	157f4 <rpc_ip_client_request_send>
   162ea:	b9b8      	cbnz	r0, 1631c <ip_interface_socketoption_get+0xd4>
   162ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   162f0:	466b      	mov	r3, sp
   162f2:	4611      	mov	r1, r2
   162f4:	4648      	mov	r0, r9
   162f6:	f005 f9fb 	bl	1b6f0 <interface_socket_wait>
   162fa:	4605      	mov	r5, r0
   162fc:	b300      	cbz	r0, 16340 <ip_interface_socketoption_get+0xf8>
   162fe:	4638      	mov	r0, r7
   16300:	f7ff fa96 	bl	15830 <rpc_ip_client_data_free>
   16304:	6026      	str	r6, [r4, #0]
   16306:	e000      	b.n	1630a <ip_interface_socketoption_get+0xc2>
   16308:	2523      	movs	r5, #35	; 0x23
   1630a:	4628      	mov	r0, r5
   1630c:	b002      	add	sp, #8
   1630e:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
   16312:	2516      	movs	r5, #22
   16314:	4628      	mov	r0, r5
   16316:	b002      	add	sp, #8
   16318:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
   1631c:	f8da 0000 	ldr.w	r0, [sl]
   16320:	b108      	cbz	r0, 16326 <ip_interface_socketoption_get+0xde>
   16322:	f7ff fa85 	bl	15830 <rpc_ip_client_data_free>
   16326:	4650      	mov	r0, sl
   16328:	f7ff fa7a 	bl	15820 <rpc_ip_client_message_free>
   1632c:	2523      	movs	r5, #35	; 0x23
   1632e:	6026      	str	r6, [r4, #0]
   16330:	e7e5      	b.n	162fe <ip_interface_socketoption_get+0xb6>
   16332:	f8dd a004 	ldr.w	sl, [sp, #4]
   16336:	f1ba 0f00 	cmp.w	sl, #0
   1633a:	d1c6      	bne.n	162ca <ip_interface_socketoption_get+0x82>
   1633c:	250c      	movs	r5, #12
   1633e:	e7e1      	b.n	16304 <ip_interface_socketoption_get+0xbc>
   16340:	4648      	mov	r0, r9
   16342:	f005 fa49 	bl	1b7d8 <interface_socket_from_handle_get>
   16346:	b120      	cbz	r0, 16352 <ip_interface_socketoption_get+0x10a>
   16348:	6843      	ldr	r3, [r0, #4]
   1634a:	b113      	cbz	r3, 16352 <ip_interface_socketoption_get+0x10a>
   1634c:	6045      	str	r5, [r0, #4]
   1634e:	461d      	mov	r5, r3
   16350:	e7d5      	b.n	162fe <ip_interface_socketoption_get+0xb6>
   16352:	f8df b050 	ldr.w	fp, [pc, #80]	; 163a4 <ip_interface_socketoption_get+0x15c>
   16356:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16358:	f85b 0029 	ldr.w	r0, [fp, r9, lsl #2]
   1635c:	681b      	ldr	r3, [r3, #0]
   1635e:	b1b0      	cbz	r0, 1638e <ip_interface_socketoption_get+0x146>
   16360:	6842      	ldr	r2, [r0, #4]
   16362:	429a      	cmp	r2, r3
   16364:	d811      	bhi.n	1638a <ip_interface_socketoption_get+0x142>
   16366:	6801      	ldr	r1, [r0, #0]
   16368:	b179      	cbz	r1, 1638a <ip_interface_socketoption_get+0x142>
   1636a:	980a      	ldr	r0, [sp, #40]	; 0x28
   1636c:	f008 f971 	bl	1e652 <memcpy>
   16370:	f85b 3029 	ldr.w	r3, [fp, r9, lsl #2]
   16374:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   16376:	685b      	ldr	r3, [r3, #4]
   16378:	6013      	str	r3, [r2, #0]
   1637a:	f85b 0029 	ldr.w	r0, [fp, r9, lsl #2]
   1637e:	f7ff fa4f 	bl	15820 <rpc_ip_client_message_free>
   16382:	2300      	movs	r3, #0
   16384:	f84b 3029 	str.w	r3, [fp, r9, lsl #2]
   16388:	e7b9      	b.n	162fe <ip_interface_socketoption_get+0xb6>
   1638a:	2516      	movs	r5, #22
   1638c:	e7f7      	b.n	1637e <ip_interface_socketoption_get+0x136>
   1638e:	461a      	mov	r2, r3
   16390:	980a      	ldr	r0, [sp, #40]	; 0x28
   16392:	4639      	mov	r1, r7
   16394:	f008 f95d 	bl	1e652 <memcpy>
   16398:	f8da 3004 	ldr.w	r3, [sl, #4]
   1639c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1639e:	6013      	str	r3, [r2, #0]
   163a0:	e7ad      	b.n	162fe <ip_interface_socketoption_get+0xb6>
   163a2:	bf00      	nop
   163a4:	20020ce8 	.word	0x20020ce8

000163a8 <ip_interface_socketoption_send>:
   163a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   163ac:	f04f 35ff 	mov.w	r5, #4294967295
   163b0:	680c      	ldr	r4, [r1, #0]
   163b2:	b082      	sub	sp, #8
   163b4:	0266      	lsls	r6, r4, #9
   163b6:	9500      	str	r5, [sp, #0]
   163b8:	d44d      	bmi.n	16456 <ip_interface_socketoption_send+0xae>
   163ba:	680c      	ldr	r4, [r1, #0]
   163bc:	0225      	lsls	r5, r4, #8
   163be:	d44a      	bmi.n	16456 <ip_interface_socketoption_send+0xae>
   163c0:	680c      	ldr	r4, [r1, #0]
   163c2:	01e4      	lsls	r4, r4, #7
   163c4:	d447      	bmi.n	16456 <ip_interface_socketoption_send+0xae>
   163c6:	680c      	ldr	r4, [r1, #0]
   163c8:	f014 7400 	ands.w	r4, r4, #33554432	; 0x2000000
   163cc:	d143      	bne.n	16456 <ip_interface_socketoption_send+0xae>
   163ce:	4688      	mov	r8, r1
   163d0:	f8d1 9000 	ldr.w	r9, [r1]
   163d4:	461f      	mov	r7, r3
   163d6:	680b      	ldr	r3, [r1, #0]
   163d8:	4605      	mov	r5, r0
   163da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   163de:	a802      	add	r0, sp, #8
   163e0:	600b      	str	r3, [r1, #0]
   163e2:	f840 4d04 	str.w	r4, [r0, #-4]!
   163e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   163e8:	4616      	mov	r6, r2
   163ea:	f8d8 a018 	ldr.w	sl, [r8, #24]
   163ee:	f7ff f9ed 	bl	157cc <rpc_ip_client_request_alloc>
   163f2:	bba8      	cbnz	r0, 16460 <ip_interface_socketoption_send+0xb8>
   163f4:	f247 0303 	movw	r3, #28675	; 0x7003
   163f8:	2208      	movs	r2, #8
   163fa:	9c01      	ldr	r4, [sp, #4]
   163fc:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   16400:	60e3      	str	r3, [r4, #12]
   16402:	f8c4 a010 	str.w	sl, [r4, #16]
   16406:	7260      	strb	r0, [r4, #9]
   16408:	72a0      	strb	r0, [r4, #10]
   1640a:	72e0      	strb	r0, [r4, #11]
   1640c:	7222      	strb	r2, [r4, #8]
   1640e:	68a3      	ldr	r3, [r4, #8]
   16410:	6166      	str	r6, [r4, #20]
   16412:	3308      	adds	r3, #8
   16414:	60a3      	str	r3, [r4, #8]
   16416:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16418:	61a7      	str	r7, [r4, #24]
   1641a:	b133      	cbz	r3, 1642a <ip_interface_socketoption_send+0x82>
   1641c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1641e:	b123      	cbz	r3, 1642a <ip_interface_socketoption_send+0x82>
   16420:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   16422:	4619      	mov	r1, r3
   16424:	6820      	ldr	r0, [r4, #0]
   16426:	f008 f914 	bl	1e652 <memcpy>
   1642a:	f247 0103 	movw	r1, #28675	; 0x7003
   1642e:	4620      	mov	r0, r4
   16430:	f7ff f9e0 	bl	157f4 <rpc_ip_client_request_send>
   16434:	4606      	mov	r6, r0
   16436:	b9c0      	cbnz	r0, 1646a <ip_interface_socketoption_send+0xc2>
   16438:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1643c:	466b      	mov	r3, sp
   1643e:	4611      	mov	r1, r2
   16440:	4628      	mov	r0, r5
   16442:	f005 f955 	bl	1b6f0 <interface_socket_wait>
   16446:	4604      	mov	r4, r0
   16448:	b1d0      	cbz	r0, 16480 <ip_interface_socketoption_send+0xd8>
   1644a:	4620      	mov	r0, r4
   1644c:	f8c8 9000 	str.w	r9, [r8]
   16450:	b002      	add	sp, #8
   16452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16456:	2423      	movs	r4, #35	; 0x23
   16458:	4620      	mov	r0, r4
   1645a:	b002      	add	sp, #8
   1645c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16460:	9c01      	ldr	r4, [sp, #4]
   16462:	2c00      	cmp	r4, #0
   16464:	d1d3      	bne.n	1640e <ip_interface_socketoption_send+0x66>
   16466:	240c      	movs	r4, #12
   16468:	e7ef      	b.n	1644a <ip_interface_socketoption_send+0xa2>
   1646a:	6820      	ldr	r0, [r4, #0]
   1646c:	b108      	cbz	r0, 16472 <ip_interface_socketoption_send+0xca>
   1646e:	f7ff f9df 	bl	15830 <rpc_ip_client_data_free>
   16472:	4620      	mov	r0, r4
   16474:	f7ff f9d4 	bl	15820 <rpc_ip_client_message_free>
   16478:	2423      	movs	r4, #35	; 0x23
   1647a:	f8c8 9000 	str.w	r9, [r8]
   1647e:	e7e4      	b.n	1644a <ip_interface_socketoption_send+0xa2>
   16480:	4628      	mov	r0, r5
   16482:	f005 f9a9 	bl	1b7d8 <interface_socket_from_handle_get>
   16486:	2800      	cmp	r0, #0
   16488:	d0df      	beq.n	1644a <ip_interface_socketoption_send+0xa2>
   1648a:	6844      	ldr	r4, [r0, #4]
   1648c:	2c00      	cmp	r4, #0
   1648e:	d0dc      	beq.n	1644a <ip_interface_socketoption_send+0xa2>
   16490:	6046      	str	r6, [r0, #4]
   16492:	e7da      	b.n	1644a <ip_interface_socketoption_send+0xa2>

00016494 <ip_interface_bind>:
   16494:	f04f 33ff 	mov.w	r3, #4294967295
   16498:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1649c:	b083      	sub	sp, #12
   1649e:	9300      	str	r3, [sp, #0]
   164a0:	b3b1      	cbz	r1, 16510 <ip_interface_bind+0x7c>
   164a2:	4616      	mov	r6, r2
   164a4:	b3a2      	cbz	r2, 16510 <ip_interface_bind+0x7c>
   164a6:	4607      	mov	r7, r0
   164a8:	4688      	mov	r8, r1
   164aa:	f005 f995 	bl	1b7d8 <interface_socket_from_handle_get>
   164ae:	4605      	mov	r5, r0
   164b0:	2800      	cmp	r0, #0
   164b2:	d04a      	beq.n	1654a <ip_interface_bind+0xb6>
   164b4:	6803      	ldr	r3, [r0, #0]
   164b6:	b29b      	uxth	r3, r3
   164b8:	2b02      	cmp	r3, #2
   164ba:	d146      	bne.n	1654a <ip_interface_bind+0xb6>
   164bc:	2100      	movs	r1, #0
   164be:	a802      	add	r0, sp, #8
   164c0:	f840 1d04 	str.w	r1, [r0, #-4]!
   164c4:	f8d5 9018 	ldr.w	r9, [r5, #24]
   164c8:	f7ff f980 	bl	157cc <rpc_ip_client_request_alloc>
   164cc:	bb50      	cbnz	r0, 16524 <ip_interface_bind+0x90>
   164ce:	f247 0305 	movw	r3, #28677	; 0x7005
   164d2:	2208      	movs	r2, #8
   164d4:	9c01      	ldr	r4, [sp, #4]
   164d6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   164da:	60e3      	str	r3, [r4, #12]
   164dc:	f8c4 9010 	str.w	r9, [r4, #16]
   164e0:	7260      	strb	r0, [r4, #9]
   164e2:	72a0      	strb	r0, [r4, #10]
   164e4:	72e0      	strb	r0, [r4, #11]
   164e6:	7222      	strb	r2, [r4, #8]
   164e8:	68a3      	ldr	r3, [r4, #8]
   164ea:	3304      	adds	r3, #4
   164ec:	60a3      	str	r3, [r4, #8]
   164ee:	68eb      	ldr	r3, [r5, #12]
   164f0:	f8d8 2004 	ldr.w	r2, [r8, #4]
   164f4:	4293      	cmp	r3, r2
   164f6:	d11a      	bne.n	1652e <ip_interface_bind+0x9a>
   164f8:	f898 2000 	ldrb.w	r2, [r8]
   164fc:	4296      	cmp	r6, r2
   164fe:	d107      	bne.n	16510 <ip_interface_bind+0x7c>
   16500:	2b02      	cmp	r3, #2
   16502:	f104 0018 	add.w	r0, r4, #24
   16506:	d014      	beq.n	16532 <ip_interface_bind+0x9e>
   16508:	2b0a      	cmp	r3, #10
   1650a:	d101      	bne.n	16510 <ip_interface_bind+0x7c>
   1650c:	2e24      	cmp	r6, #36	; 0x24
   1650e:	d01e      	beq.n	1654e <ip_interface_bind+0xba>
   16510:	2416      	movs	r4, #22
   16512:	4620      	mov	r0, r4
   16514:	f7fa ffd8 	bl	114c8 <bsd_os_errno_set>
   16518:	f04f 34ff 	mov.w	r4, #4294967295
   1651c:	4620      	mov	r0, r4
   1651e:	b003      	add	sp, #12
   16520:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16524:	9c01      	ldr	r4, [sp, #4]
   16526:	2c00      	cmp	r4, #0
   16528:	d1de      	bne.n	164e8 <ip_interface_bind+0x54>
   1652a:	240c      	movs	r4, #12
   1652c:	e7f1      	b.n	16512 <ip_interface_bind+0x7e>
   1652e:	242f      	movs	r4, #47	; 0x2f
   16530:	e7ef      	b.n	16512 <ip_interface_bind+0x7e>
   16532:	2e10      	cmp	r6, #16
   16534:	d1ec      	bne.n	16510 <ip_interface_bind+0x7c>
   16536:	2204      	movs	r2, #4
   16538:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1653c:	f108 010c 	add.w	r1, r8, #12
   16540:	82e2      	strh	r2, [r4, #22]
   16542:	82a3      	strh	r3, [r4, #20]
   16544:	f008 f885 	bl	1e652 <memcpy>
   16548:	e00a      	b.n	16560 <ip_interface_bind+0xcc>
   1654a:	2409      	movs	r4, #9
   1654c:	e7e1      	b.n	16512 <ip_interface_bind+0x7e>
   1654e:	2210      	movs	r2, #16
   16550:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   16554:	eb08 0102 	add.w	r1, r8, r2
   16558:	82e2      	strh	r2, [r4, #22]
   1655a:	82a3      	strh	r3, [r4, #20]
   1655c:	f008 f879 	bl	1e652 <memcpy>
   16560:	68a3      	ldr	r3, [r4, #8]
   16562:	8ae2      	ldrh	r2, [r4, #22]
   16564:	f247 0105 	movw	r1, #28677	; 0x7005
   16568:	4413      	add	r3, r2
   1656a:	60a3      	str	r3, [r4, #8]
   1656c:	682b      	ldr	r3, [r5, #0]
   1656e:	4620      	mov	r0, r4
   16570:	0c1b      	lsrs	r3, r3, #16
   16572:	041b      	lsls	r3, r3, #16
   16574:	f043 0303 	orr.w	r3, r3, #3
   16578:	602b      	str	r3, [r5, #0]
   1657a:	682e      	ldr	r6, [r5, #0]
   1657c:	f7ff f93a 	bl	157f4 <rpc_ip_client_request_send>
   16580:	4680      	mov	r8, r0
   16582:	b978      	cbnz	r0, 165a4 <ip_interface_bind+0x110>
   16584:	466b      	mov	r3, sp
   16586:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1658a:	2104      	movs	r1, #4
   1658c:	4638      	mov	r0, r7
   1658e:	f005 f8af 	bl	1b6f0 <interface_socket_wait>
   16592:	4604      	mov	r4, r0
   16594:	b1a0      	cbz	r0, 165c0 <ip_interface_bind+0x12c>
   16596:	682b      	ldr	r3, [r5, #0]
   16598:	0c1b      	lsrs	r3, r3, #16
   1659a:	041b      	lsls	r3, r3, #16
   1659c:	f043 0302 	orr.w	r3, r3, #2
   165a0:	602b      	str	r3, [r5, #0]
   165a2:	e7b6      	b.n	16512 <ip_interface_bind+0x7e>
   165a4:	6820      	ldr	r0, [r4, #0]
   165a6:	b108      	cbz	r0, 165ac <ip_interface_bind+0x118>
   165a8:	f7ff f942 	bl	15830 <rpc_ip_client_data_free>
   165ac:	0c36      	lsrs	r6, r6, #16
   165ae:	0436      	lsls	r6, r6, #16
   165b0:	4620      	mov	r0, r4
   165b2:	f046 0602 	orr.w	r6, r6, #2
   165b6:	f7ff f933 	bl	15820 <rpc_ip_client_message_free>
   165ba:	2423      	movs	r4, #35	; 0x23
   165bc:	602e      	str	r6, [r5, #0]
   165be:	e7a8      	b.n	16512 <ip_interface_bind+0x7e>
   165c0:	4638      	mov	r0, r7
   165c2:	f005 f909 	bl	1b7d8 <interface_socket_from_handle_get>
   165c6:	2800      	cmp	r0, #0
   165c8:	d0a8      	beq.n	1651c <ip_interface_bind+0x88>
   165ca:	6844      	ldr	r4, [r0, #4]
   165cc:	2c00      	cmp	r4, #0
   165ce:	d0a5      	beq.n	1651c <ip_interface_bind+0x88>
   165d0:	f8c0 8004 	str.w	r8, [r0, #4]
   165d4:	e7df      	b.n	16596 <ip_interface_bind+0x102>
   165d6:	bf00      	nop

000165d8 <ip_interface_listen>:
   165d8:	f04f 33ff 	mov.w	r3, #4294967295
   165dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   165e0:	b082      	sub	sp, #8
   165e2:	4606      	mov	r6, r0
   165e4:	9300      	str	r3, [sp, #0]
   165e6:	f005 f8f7 	bl	1b7d8 <interface_socket_from_handle_get>
   165ea:	2800      	cmp	r0, #0
   165ec:	d06c      	beq.n	166c8 <ip_interface_listen+0xf0>
   165ee:	6803      	ldr	r3, [r0, #0]
   165f0:	4604      	mov	r4, r0
   165f2:	b29b      	uxth	r3, r3
   165f4:	2b04      	cmp	r3, #4
   165f6:	d003      	beq.n	16600 <ip_interface_listen+0x28>
   165f8:	6803      	ldr	r3, [r0, #0]
   165fa:	b29b      	uxth	r3, r3
   165fc:	2b0b      	cmp	r3, #11
   165fe:	d163      	bne.n	166c8 <ip_interface_listen+0xf0>
   16600:	2100      	movs	r1, #0
   16602:	4a32      	ldr	r2, [pc, #200]	; (166cc <ip_interface_listen+0xf4>)
   16604:	4630      	mov	r0, r6
   16606:	f005 f83b 	bl	1b680 <interface_socket_packet_handler_update>
   1660a:	4601      	mov	r1, r0
   1660c:	2800      	cmp	r0, #0
   1660e:	d159      	bne.n	166c4 <ip_interface_listen+0xec>
   16610:	a802      	add	r0, sp, #8
   16612:	f840 1d04 	str.w	r1, [r0, #-4]!
   16616:	69a7      	ldr	r7, [r4, #24]
   16618:	f7ff f8d8 	bl	157cc <rpc_ip_client_request_alloc>
   1661c:	bba0      	cbnz	r0, 16688 <ip_interface_listen+0xb0>
   1661e:	f247 0308 	movw	r3, #28680	; 0x7008
   16622:	2208      	movs	r2, #8
   16624:	9d01      	ldr	r5, [sp, #4]
   16626:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1662a:	60eb      	str	r3, [r5, #12]
   1662c:	612f      	str	r7, [r5, #16]
   1662e:	7268      	strb	r0, [r5, #9]
   16630:	72a8      	strb	r0, [r5, #10]
   16632:	72e8      	strb	r0, [r5, #11]
   16634:	722a      	strb	r2, [r5, #8]
   16636:	68ab      	ldr	r3, [r5, #8]
   16638:	f247 0108 	movw	r1, #28680	; 0x7008
   1663c:	3304      	adds	r3, #4
   1663e:	60ab      	str	r3, [r5, #8]
   16640:	6823      	ldr	r3, [r4, #0]
   16642:	4628      	mov	r0, r5
   16644:	0c1b      	lsrs	r3, r3, #16
   16646:	041b      	lsls	r3, r3, #16
   16648:	f043 0306 	orr.w	r3, r3, #6
   1664c:	6023      	str	r3, [r4, #0]
   1664e:	6827      	ldr	r7, [r4, #0]
   16650:	f7ff f8d0 	bl	157f4 <rpc_ip_client_request_send>
   16654:	4680      	mov	r8, r0
   16656:	b9e0      	cbnz	r0, 16692 <ip_interface_listen+0xba>
   16658:	466b      	mov	r3, sp
   1665a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1665e:	2107      	movs	r1, #7
   16660:	4630      	mov	r0, r6
   16662:	f005 f845 	bl	1b6f0 <interface_socket_wait>
   16666:	4605      	mov	r5, r0
   16668:	b308      	cbz	r0, 166ae <ip_interface_listen+0xd6>
   1666a:	6823      	ldr	r3, [r4, #0]
   1666c:	0c1b      	lsrs	r3, r3, #16
   1666e:	041b      	lsls	r3, r3, #16
   16670:	f043 0304 	orr.w	r3, r3, #4
   16674:	6023      	str	r3, [r4, #0]
   16676:	4628      	mov	r0, r5
   16678:	f7fa ff26 	bl	114c8 <bsd_os_errno_set>
   1667c:	f04f 35ff 	mov.w	r5, #4294967295
   16680:	4628      	mov	r0, r5
   16682:	b002      	add	sp, #8
   16684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16688:	9d01      	ldr	r5, [sp, #4]
   1668a:	2d00      	cmp	r5, #0
   1668c:	d1d3      	bne.n	16636 <ip_interface_listen+0x5e>
   1668e:	250c      	movs	r5, #12
   16690:	e7f1      	b.n	16676 <ip_interface_listen+0x9e>
   16692:	6828      	ldr	r0, [r5, #0]
   16694:	b108      	cbz	r0, 1669a <ip_interface_listen+0xc2>
   16696:	f7ff f8cb 	bl	15830 <rpc_ip_client_data_free>
   1669a:	0c3f      	lsrs	r7, r7, #16
   1669c:	043f      	lsls	r7, r7, #16
   1669e:	4628      	mov	r0, r5
   166a0:	f047 0704 	orr.w	r7, r7, #4
   166a4:	f7ff f8bc 	bl	15820 <rpc_ip_client_message_free>
   166a8:	2523      	movs	r5, #35	; 0x23
   166aa:	6027      	str	r7, [r4, #0]
   166ac:	e7e3      	b.n	16676 <ip_interface_listen+0x9e>
   166ae:	4630      	mov	r0, r6
   166b0:	f005 f892 	bl	1b7d8 <interface_socket_from_handle_get>
   166b4:	2800      	cmp	r0, #0
   166b6:	d0e3      	beq.n	16680 <ip_interface_listen+0xa8>
   166b8:	6845      	ldr	r5, [r0, #4]
   166ba:	2d00      	cmp	r5, #0
   166bc:	d0e0      	beq.n	16680 <ip_interface_listen+0xa8>
   166be:	f8c0 8004 	str.w	r8, [r0, #4]
   166c2:	e7d2      	b.n	1666a <ip_interface_listen+0x92>
   166c4:	2523      	movs	r5, #35	; 0x23
   166c6:	e7d6      	b.n	16676 <ip_interface_listen+0x9e>
   166c8:	2509      	movs	r5, #9
   166ca:	e7d4      	b.n	16676 <ip_interface_listen+0x9e>
   166cc:	00015841 	.word	0x00015841

000166d0 <ip_interface_accept>:
   166d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166d4:	f04f 33ff 	mov.w	r3, #4294967295
   166d8:	2500      	movs	r5, #0
   166da:	b087      	sub	sp, #28
   166dc:	460f      	mov	r7, r1
   166de:	4690      	mov	r8, r2
   166e0:	e9cd 5303 	strd	r5, r3, [sp, #12]
   166e4:	4606      	mov	r6, r0
   166e6:	f005 f877 	bl	1b7d8 <interface_socket_from_handle_get>
   166ea:	4604      	mov	r4, r0
   166ec:	2800      	cmp	r0, #0
   166ee:	f000 8123 	beq.w	16938 <ip_interface_accept+0x268>
   166f2:	6803      	ldr	r3, [r0, #0]
   166f4:	b29b      	uxth	r3, r3
   166f6:	2b07      	cmp	r3, #7
   166f8:	d10a      	bne.n	16710 <ip_interface_accept+0x40>
   166fa:	6803      	ldr	r3, [r0, #0]
   166fc:	6805      	ldr	r5, [r0, #0]
   166fe:	00db      	lsls	r3, r3, #3
   16700:	d416      	bmi.n	16730 <ip_interface_accept+0x60>
   16702:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   16706:	d019      	beq.n	1673c <ip_interface_accept+0x6c>
   16708:	6805      	ldr	r5, [r0, #0]
   1670a:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   1670e:	d124      	bne.n	1675a <ip_interface_accept+0x8a>
   16710:	f04f 0909 	mov.w	r9, #9
   16714:	9b03      	ldr	r3, [sp, #12]
   16716:	b113      	cbz	r3, 1671e <ip_interface_accept+0x4e>
   16718:	4628      	mov	r0, r5
   1671a:	f004 ff9b 	bl	1b654 <interface_socket_free>
   1671e:	4648      	mov	r0, r9
   16720:	f04f 39ff 	mov.w	r9, #4294967295
   16724:	f7fa fed0 	bl	114c8 <bsd_os_errno_set>
   16728:	4648      	mov	r0, r9
   1672a:	b007      	add	sp, #28
   1672c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16730:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   16734:	d170      	bne.n	16818 <ip_interface_accept+0x148>
   16736:	f04f 0923 	mov.w	r9, #35	; 0x23
   1673a:	e7eb      	b.n	16714 <ip_interface_accept+0x44>
   1673c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   16740:	ab04      	add	r3, sp, #16
   16742:	4611      	mov	r1, r2
   16744:	4630      	mov	r0, r6
   16746:	f004 ffd3 	bl	1b6f0 <interface_socket_wait>
   1674a:	4681      	mov	r9, r0
   1674c:	2800      	cmp	r0, #0
   1674e:	f000 8082 	beq.w	16856 <ip_interface_accept+0x186>
   16752:	6825      	ldr	r5, [r4, #0]
   16754:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   16758:	d0dc      	beq.n	16714 <ip_interface_accept+0x44>
   1675a:	f04f 30ff 	mov.w	r0, #4294967295
   1675e:	2300      	movs	r3, #0
   16760:	e9cd 0300 	strd	r0, r3, [sp]
   16764:	4a78      	ldr	r2, [pc, #480]	; (16948 <ip_interface_accept+0x278>)
   16766:	6921      	ldr	r1, [r4, #16]
   16768:	a803      	add	r0, sp, #12
   1676a:	f004 ff0f 	bl	1b58c <interface_socket_allocate>
   1676e:	9b03      	ldr	r3, [sp, #12]
   16770:	4605      	mov	r5, r0
   16772:	2b00      	cmp	r3, #0
   16774:	f000 80e4 	beq.w	16940 <ip_interface_accept+0x270>
   16778:	2100      	movs	r1, #0
   1677a:	6962      	ldr	r2, [r4, #20]
   1677c:	a806      	add	r0, sp, #24
   1677e:	615a      	str	r2, [r3, #20]
   16780:	68e2      	ldr	r2, [r4, #12]
   16782:	f840 1d04 	str.w	r1, [r0, #-4]!
   16786:	60da      	str	r2, [r3, #12]
   16788:	6922      	ldr	r2, [r4, #16]
   1678a:	611a      	str	r2, [r3, #16]
   1678c:	f8d4 9018 	ldr.w	r9, [r4, #24]
   16790:	f7ff f81c 	bl	157cc <rpc_ip_client_request_alloc>
   16794:	2800      	cmp	r0, #0
   16796:	d146      	bne.n	16826 <ip_interface_accept+0x156>
   16798:	f247 030c 	movw	r3, #28684	; 0x700c
   1679c:	2108      	movs	r1, #8
   1679e:	f8dd b014 	ldr.w	fp, [sp, #20]
   167a2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   167a6:	f8cb 300c 	str.w	r3, [fp, #12]
   167aa:	f8cb 9010 	str.w	r9, [fp, #16]
   167ae:	f88b 0009 	strb.w	r0, [fp, #9]
   167b2:	f88b 000a 	strb.w	r0, [fp, #10]
   167b6:	f88b 000b 	strb.w	r0, [fp, #11]
   167ba:	f88b 1008 	strb.w	r1, [fp, #8]
   167be:	6823      	ldr	r3, [r4, #0]
   167c0:	f247 010c 	movw	r1, #28684	; 0x700c
   167c4:	0c1b      	lsrs	r3, r3, #16
   167c6:	041b      	lsls	r3, r3, #16
   167c8:	f043 0308 	orr.w	r3, r3, #8
   167cc:	6023      	str	r3, [r4, #0]
   167ce:	4658      	mov	r0, fp
   167d0:	f8d4 9000 	ldr.w	r9, [r4]
   167d4:	f7ff f80e 	bl	157f4 <rpc_ip_client_request_send>
   167d8:	4682      	mov	sl, r0
   167da:	bb60      	cbnz	r0, 16836 <ip_interface_accept+0x166>
   167dc:	6822      	ldr	r2, [r4, #0]
   167de:	9900      	ldr	r1, [sp, #0]
   167e0:	ab04      	add	r3, sp, #16
   167e2:	400a      	ands	r2, r1
   167e4:	6022      	str	r2, [r4, #0]
   167e6:	2109      	movs	r1, #9
   167e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   167ec:	4630      	mov	r0, r6
   167ee:	f004 ff7f 	bl	1b6f0 <interface_socket_wait>
   167f2:	4681      	mov	r9, r0
   167f4:	2800      	cmp	r0, #0
   167f6:	f000 808d 	beq.w	16914 <ip_interface_accept+0x244>
   167fa:	6823      	ldr	r3, [r4, #0]
   167fc:	9a01      	ldr	r2, [sp, #4]
   167fe:	431a      	orrs	r2, r3
   16800:	6022      	str	r2, [r4, #0]
   16802:	6823      	ldr	r3, [r4, #0]
   16804:	0c1b      	lsrs	r3, r3, #16
   16806:	041b      	lsls	r3, r3, #16
   16808:	f043 0307 	orr.w	r3, r3, #7
   1680c:	6023      	str	r3, [r4, #0]
   1680e:	6823      	ldr	r3, [r4, #0]
   16810:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   16814:	6023      	str	r3, [r4, #0]
   16816:	e77d      	b.n	16714 <ip_interface_accept+0x44>
   16818:	f06f 5280 	mvn.w	r2, #268435456	; 0x10000000
   1681c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   16820:	e9cd 2300 	strd	r2, r3, [sp]
   16824:	e79e      	b.n	16764 <ip_interface_accept+0x94>
   16826:	f8dd b014 	ldr.w	fp, [sp, #20]
   1682a:	f04f 090c 	mov.w	r9, #12
   1682e:	f1bb 0f00 	cmp.w	fp, #0
   16832:	d1c4      	bne.n	167be <ip_interface_accept+0xee>
   16834:	e76e      	b.n	16714 <ip_interface_accept+0x44>
   16836:	f8db 0000 	ldr.w	r0, [fp]
   1683a:	b108      	cbz	r0, 16840 <ip_interface_accept+0x170>
   1683c:	f7fe fff8 	bl	15830 <rpc_ip_client_data_free>
   16840:	ea4f 4919 	mov.w	r9, r9, lsr #16
   16844:	4658      	mov	r0, fp
   16846:	ea4f 4909 	mov.w	r9, r9, lsl #16
   1684a:	f7fe ffe9 	bl	15820 <rpc_ip_client_message_free>
   1684e:	f049 0307 	orr.w	r3, r9, #7
   16852:	6023      	str	r3, [r4, #0]
   16854:	e76f      	b.n	16736 <ip_interface_accept+0x66>
   16856:	4630      	mov	r0, r6
   16858:	f004 ffbe 	bl	1b7d8 <interface_socket_from_handle_get>
   1685c:	b130      	cbz	r0, 1686c <ip_interface_accept+0x19c>
   1685e:	f8d0 9004 	ldr.w	r9, [r0, #4]
   16862:	f1b9 0f00 	cmp.w	r9, #0
   16866:	d001      	beq.n	1686c <ip_interface_accept+0x19c>
   16868:	6045      	str	r5, [r0, #4]
   1686a:	e772      	b.n	16752 <ip_interface_accept+0x82>
   1686c:	6823      	ldr	r3, [r4, #0]
   1686e:	03d9      	lsls	r1, r3, #15
   16870:	f53f af73 	bmi.w	1675a <ip_interface_accept+0x8a>
   16874:	4d35      	ldr	r5, [pc, #212]	; (1694c <ip_interface_accept+0x27c>)
   16876:	9903      	ldr	r1, [sp, #12]
   16878:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   1687c:	699b      	ldr	r3, [r3, #24]
   1687e:	618b      	str	r3, [r1, #24]
   16880:	b147      	cbz	r7, 16894 <ip_interface_accept+0x1c4>
   16882:	68cb      	ldr	r3, [r1, #12]
   16884:	2b0a      	cmp	r3, #10
   16886:	d028      	beq.n	168da <ip_interface_accept+0x20a>
   16888:	2b02      	cmp	r3, #2
   1688a:	d103      	bne.n	16894 <ip_interface_accept+0x1c4>
   1688c:	f8d8 2000 	ldr.w	r2, [r8]
   16890:	2a10      	cmp	r2, #16
   16892:	d036      	beq.n	16902 <ip_interface_accept+0x232>
   16894:	680a      	ldr	r2, [r1, #0]
   16896:	482e      	ldr	r0, [pc, #184]	; (16950 <ip_interface_accept+0x280>)
   16898:	4002      	ands	r2, r0
   1689a:	f042 0205 	orr.w	r2, r2, #5
   1689e:	600a      	str	r2, [r1, #0]
   168a0:	9a03      	ldr	r2, [sp, #12]
   168a2:	6811      	ldr	r1, [r2, #0]
   168a4:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
   168a8:	6011      	str	r1, [r2, #0]
   168aa:	6811      	ldr	r1, [r2, #0]
   168ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   168b0:	6011      	str	r1, [r2, #0]
   168b2:	6823      	ldr	r3, [r4, #0]
   168b4:	4003      	ands	r3, r0
   168b6:	f043 0307 	orr.w	r3, r3, #7
   168ba:	6023      	str	r3, [r4, #0]
   168bc:	6823      	ldr	r3, [r4, #0]
   168be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   168c2:	6023      	str	r3, [r4, #0]
   168c4:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   168c8:	f7fe ffaa 	bl	15820 <rpc_ip_client_message_free>
   168cc:	2300      	movs	r3, #0
   168ce:	4648      	mov	r0, r9
   168d0:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
   168d4:	b007      	add	sp, #28
   168d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   168da:	f8d8 2000 	ldr.w	r2, [r8]
   168de:	2a24      	cmp	r2, #36	; 0x24
   168e0:	d1d8      	bne.n	16894 <ip_interface_accept+0x1c4>
   168e2:	703a      	strb	r2, [r7, #0]
   168e4:	2210      	movs	r2, #16
   168e6:	607b      	str	r3, [r7, #4]
   168e8:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   168ec:	f107 0010 	add.w	r0, r7, #16
   168f0:	8b9b      	ldrh	r3, [r3, #28]
   168f2:	813b      	strh	r3, [r7, #8]
   168f4:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
   168f8:	3120      	adds	r1, #32
   168fa:	f007 feaa 	bl	1e652 <memcpy>
   168fe:	9903      	ldr	r1, [sp, #12]
   16900:	e7c8      	b.n	16894 <ip_interface_accept+0x1c4>
   16902:	703a      	strb	r2, [r7, #0]
   16904:	607b      	str	r3, [r7, #4]
   16906:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   1690a:	f107 000c 	add.w	r0, r7, #12
   1690e:	8b9b      	ldrh	r3, [r3, #28]
   16910:	2204      	movs	r2, #4
   16912:	e7ee      	b.n	168f2 <ip_interface_accept+0x222>
   16914:	4630      	mov	r0, r6
   16916:	f004 ff5f 	bl	1b7d8 <interface_socket_from_handle_get>
   1691a:	b138      	cbz	r0, 1692c <ip_interface_accept+0x25c>
   1691c:	f8d0 9004 	ldr.w	r9, [r0, #4]
   16920:	f1b9 0f00 	cmp.w	r9, #0
   16924:	d002      	beq.n	1692c <ip_interface_accept+0x25c>
   16926:	f8c0 a004 	str.w	sl, [r0, #4]
   1692a:	e766      	b.n	167fa <ip_interface_accept+0x12a>
   1692c:	6823      	ldr	r3, [r4, #0]
   1692e:	9a01      	ldr	r2, [sp, #4]
   16930:	46a9      	mov	r9, r5
   16932:	4313      	orrs	r3, r2
   16934:	6023      	str	r3, [r4, #0]
   16936:	e79d      	b.n	16874 <ip_interface_accept+0x1a4>
   16938:	4605      	mov	r5, r0
   1693a:	f04f 0909 	mov.w	r9, #9
   1693e:	e6e9      	b.n	16714 <ip_interface_accept+0x44>
   16940:	f04f 090c 	mov.w	r9, #12
   16944:	e6eb      	b.n	1671e <ip_interface_accept+0x4e>
   16946:	bf00      	nop
   16948:	00015841 	.word	0x00015841
   1694c:	20020ce8 	.word	0x20020ce8
   16950:	ffff0000 	.word	0xffff0000

00016954 <ip_interface_setopt>:
   16954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16958:	2901      	cmp	r1, #1
   1695a:	b084      	sub	sp, #16
   1695c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1695e:	f040 808a 	bne.w	16a76 <ip_interface_setopt+0x122>
   16962:	4617      	mov	r7, r2
   16964:	461d      	mov	r5, r3
   16966:	4680      	mov	r8, r0
   16968:	f004 ff36 	bl	1b7d8 <interface_socket_from_handle_get>
   1696c:	4604      	mov	r4, r0
   1696e:	2800      	cmp	r0, #0
   16970:	f000 808d 	beq.w	16a8e <ip_interface_setopt+0x13a>
   16974:	f1a7 0119 	sub.w	r1, r7, #25
   16978:	290f      	cmp	r1, #15
   1697a:	d872      	bhi.n	16a62 <ip_interface_setopt+0x10e>
   1697c:	e8df f001 	tbb	[pc, r1]
   16980:	7171711a 	.word	0x7171711a
   16984:	61514071 	.word	0x61514071
   16988:	71717171 	.word	0x71717171
   1698c:	08717171 	.word	0x08717171
   16990:	2e04      	cmp	r6, #4
   16992:	d176      	bne.n	16a82 <ip_interface_setopt+0x12e>
   16994:	2d00      	cmp	r5, #0
   16996:	d074      	beq.n	16a82 <ip_interface_setopt+0x12e>
   16998:	4601      	mov	r1, r0
   1699a:	e9cd 5600 	strd	r5, r6, [sp]
   1699e:	4640      	mov	r0, r8
   169a0:	f241 0304 	movw	r3, #4100	; 0x1004
   169a4:	2208      	movs	r2, #8
   169a6:	f7ff fcff 	bl	163a8 <ip_interface_socketoption_send>
   169aa:	bb20      	cbnz	r0, 169f6 <ip_interface_setopt+0xa2>
   169ac:	2000      	movs	r0, #0
   169ae:	b004      	add	sp, #16
   169b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   169b4:	2d00      	cmp	r5, #0
   169b6:	d06c      	beq.n	16a92 <ip_interface_setopt+0x13e>
   169b8:	4628      	mov	r0, r5
   169ba:	f007 fe18 	bl	1e5ee <strlen>
   169be:	42b0      	cmp	r0, r6
   169c0:	d167      	bne.n	16a92 <ip_interface_setopt+0x13e>
   169c2:	6823      	ldr	r3, [r4, #0]
   169c4:	b29b      	uxth	r3, r3
   169c6:	2b02      	cmp	r3, #2
   169c8:	d161      	bne.n	16a8e <ip_interface_setopt+0x13a>
   169ca:	4629      	mov	r1, r5
   169cc:	68e0      	ldr	r0, [r4, #12]
   169ce:	f002 fc79 	bl	192c4 <pdn_interface_pdn_id_get>
   169d2:	9003      	str	r0, [sp, #12]
   169d4:	3001      	adds	r0, #1
   169d6:	bf08      	it	eq
   169d8:	2016      	moveq	r0, #22
   169da:	d00c      	beq.n	169f6 <ip_interface_setopt+0xa2>
   169dc:	2204      	movs	r2, #4
   169de:	ab03      	add	r3, sp, #12
   169e0:	e9cd 3200 	strd	r3, r2, [sp]
   169e4:	4621      	mov	r1, r4
   169e6:	4640      	mov	r0, r8
   169e8:	f243 0310 	movw	r3, #12304	; 0x3010
   169ec:	2208      	movs	r2, #8
   169ee:	f7ff fcdb 	bl	163a8 <ip_interface_socketoption_send>
   169f2:	2800      	cmp	r0, #0
   169f4:	d0da      	beq.n	169ac <ip_interface_setopt+0x58>
   169f6:	f7fa fd67 	bl	114c8 <bsd_os_errno_set>
   169fa:	f04f 30ff 	mov.w	r0, #4294967295
   169fe:	e7d6      	b.n	169ae <ip_interface_setopt+0x5a>
   16a00:	2e04      	cmp	r6, #4
   16a02:	d13e      	bne.n	16a82 <ip_interface_setopt+0x12e>
   16a04:	2d00      	cmp	r5, #0
   16a06:	d03c      	beq.n	16a82 <ip_interface_setopt+0x12e>
   16a08:	4601      	mov	r1, r0
   16a0a:	e9cd 5600 	strd	r5, r6, [sp]
   16a0e:	4640      	mov	r0, r8
   16a10:	f248 0301 	movw	r3, #32769	; 0x8001
   16a14:	f44f 7200 	mov.w	r2, #512	; 0x200
   16a18:	f7ff fcc6 	bl	163a8 <ip_interface_socketoption_send>
   16a1c:	2800      	cmp	r0, #0
   16a1e:	d0c5      	beq.n	169ac <ip_interface_setopt+0x58>
   16a20:	e7e9      	b.n	169f6 <ip_interface_setopt+0xa2>
   16a22:	2e04      	cmp	r6, #4
   16a24:	d12d      	bne.n	16a82 <ip_interface_setopt+0x12e>
   16a26:	b365      	cbz	r5, 16a82 <ip_interface_setopt+0x12e>
   16a28:	4601      	mov	r1, r0
   16a2a:	e9cd 5600 	strd	r5, r6, [sp]
   16a2e:	4640      	mov	r0, r8
   16a30:	f244 0310 	movw	r3, #16400	; 0x4010
   16a34:	f44f 7200 	mov.w	r2, #512	; 0x200
   16a38:	f7ff fcb6 	bl	163a8 <ip_interface_socketoption_send>
   16a3c:	2800      	cmp	r0, #0
   16a3e:	d0b5      	beq.n	169ac <ip_interface_setopt+0x58>
   16a40:	e7d9      	b.n	169f6 <ip_interface_setopt+0xa2>
   16a42:	2e04      	cmp	r6, #4
   16a44:	d11d      	bne.n	16a82 <ip_interface_setopt+0x12e>
   16a46:	b1e5      	cbz	r5, 16a82 <ip_interface_setopt+0x12e>
   16a48:	4601      	mov	r1, r0
   16a4a:	e9cd 5600 	strd	r5, r6, [sp]
   16a4e:	4640      	mov	r0, r8
   16a50:	f246 0310 	movw	r3, #24592	; 0x6010
   16a54:	f44f 7200 	mov.w	r2, #512	; 0x200
   16a58:	f7ff fca6 	bl	163a8 <ip_interface_socketoption_send>
   16a5c:	2800      	cmp	r0, #0
   16a5e:	d0a5      	beq.n	169ac <ip_interface_setopt+0x58>
   16a60:	e7c9      	b.n	169f6 <ip_interface_setopt+0xa2>
   16a62:	9600      	str	r6, [sp, #0]
   16a64:	462b      	mov	r3, r5
   16a66:	463a      	mov	r2, r7
   16a68:	4640      	mov	r0, r8
   16a6a:	2101      	movs	r1, #1
   16a6c:	f004 fedc 	bl	1b828 <interface_socket_setopt>
   16a70:	b004      	add	sp, #16
   16a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16a76:	202a      	movs	r0, #42	; 0x2a
   16a78:	f7fa fd26 	bl	114c8 <bsd_os_errno_set>
   16a7c:	f04f 30ff 	mov.w	r0, #4294967295
   16a80:	e795      	b.n	169ae <ip_interface_setopt+0x5a>
   16a82:	2016      	movs	r0, #22
   16a84:	f7fa fd20 	bl	114c8 <bsd_os_errno_set>
   16a88:	f04f 30ff 	mov.w	r0, #4294967295
   16a8c:	e78f      	b.n	169ae <ip_interface_setopt+0x5a>
   16a8e:	2009      	movs	r0, #9
   16a90:	e7b1      	b.n	169f6 <ip_interface_setopt+0xa2>
   16a92:	200e      	movs	r0, #14
   16a94:	e7af      	b.n	169f6 <ip_interface_setopt+0xa2>
   16a96:	bf00      	nop

00016a98 <ip_interface_getopt>:
   16a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16a9c:	2901      	cmp	r1, #1
   16a9e:	b082      	sub	sp, #8
   16aa0:	9c08      	ldr	r4, [sp, #32]
   16aa2:	d173      	bne.n	16b8c <ip_interface_getopt+0xf4>
   16aa4:	4617      	mov	r7, r2
   16aa6:	461e      	mov	r6, r3
   16aa8:	4680      	mov	r8, r0
   16aaa:	f004 fe95 	bl	1b7d8 <interface_socket_from_handle_get>
   16aae:	2800      	cmp	r0, #0
   16ab0:	d072      	beq.n	16b98 <ip_interface_getopt+0x100>
   16ab2:	f1a7 051e 	sub.w	r5, r7, #30
   16ab6:	2d0a      	cmp	r5, #10
   16ab8:	d858      	bhi.n	16b6c <ip_interface_getopt+0xd4>
   16aba:	e8df f005 	tbb	[pc, r5]
   16abe:	331b      	.short	0x331b
   16ac0:	57575745 	.word	0x57575745
   16ac4:	57575757 	.word	0x57575757
   16ac8:	06          	.byte	0x06
   16ac9:	00          	.byte	0x00
   16aca:	2c00      	cmp	r4, #0
   16acc:	d058      	beq.n	16b80 <ip_interface_getopt+0xe8>
   16ace:	6823      	ldr	r3, [r4, #0]
   16ad0:	2b04      	cmp	r3, #4
   16ad2:	d155      	bne.n	16b80 <ip_interface_getopt+0xe8>
   16ad4:	2e00      	cmp	r6, #0
   16ad6:	d053      	beq.n	16b80 <ip_interface_getopt+0xe8>
   16ad8:	4601      	mov	r1, r0
   16ada:	e9cd 6400 	strd	r6, r4, [sp]
   16ade:	4640      	mov	r0, r8
   16ae0:	f241 0304 	movw	r3, #4100	; 0x1004
   16ae4:	2208      	movs	r2, #8
   16ae6:	f7ff fbaf 	bl	16248 <ip_interface_socketoption_get>
   16aea:	b9b0      	cbnz	r0, 16b1a <ip_interface_getopt+0x82>
   16aec:	2000      	movs	r0, #0
   16aee:	b002      	add	sp, #8
   16af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16af4:	2c00      	cmp	r4, #0
   16af6:	d043      	beq.n	16b80 <ip_interface_getopt+0xe8>
   16af8:	6823      	ldr	r3, [r4, #0]
   16afa:	2b04      	cmp	r3, #4
   16afc:	d140      	bne.n	16b80 <ip_interface_getopt+0xe8>
   16afe:	2e00      	cmp	r6, #0
   16b00:	d03e      	beq.n	16b80 <ip_interface_getopt+0xe8>
   16b02:	4601      	mov	r1, r0
   16b04:	e9cd 6400 	strd	r6, r4, [sp]
   16b08:	4640      	mov	r0, r8
   16b0a:	f248 0301 	movw	r3, #32769	; 0x8001
   16b0e:	f44f 7200 	mov.w	r2, #512	; 0x200
   16b12:	f7ff fb99 	bl	16248 <ip_interface_socketoption_get>
   16b16:	2800      	cmp	r0, #0
   16b18:	d0e8      	beq.n	16aec <ip_interface_getopt+0x54>
   16b1a:	f7fa fcd5 	bl	114c8 <bsd_os_errno_set>
   16b1e:	f04f 30ff 	mov.w	r0, #4294967295
   16b22:	e7e4      	b.n	16aee <ip_interface_getopt+0x56>
   16b24:	b364      	cbz	r4, 16b80 <ip_interface_getopt+0xe8>
   16b26:	6823      	ldr	r3, [r4, #0]
   16b28:	2b04      	cmp	r3, #4
   16b2a:	d129      	bne.n	16b80 <ip_interface_getopt+0xe8>
   16b2c:	b346      	cbz	r6, 16b80 <ip_interface_getopt+0xe8>
   16b2e:	4601      	mov	r1, r0
   16b30:	e9cd 6400 	strd	r6, r4, [sp]
   16b34:	4640      	mov	r0, r8
   16b36:	f244 0310 	movw	r3, #16400	; 0x4010
   16b3a:	f44f 7200 	mov.w	r2, #512	; 0x200
   16b3e:	f7ff fb83 	bl	16248 <ip_interface_socketoption_get>
   16b42:	2800      	cmp	r0, #0
   16b44:	d0d2      	beq.n	16aec <ip_interface_getopt+0x54>
   16b46:	e7e8      	b.n	16b1a <ip_interface_getopt+0x82>
   16b48:	b1d4      	cbz	r4, 16b80 <ip_interface_getopt+0xe8>
   16b4a:	6823      	ldr	r3, [r4, #0]
   16b4c:	2b04      	cmp	r3, #4
   16b4e:	d117      	bne.n	16b80 <ip_interface_getopt+0xe8>
   16b50:	b1b6      	cbz	r6, 16b80 <ip_interface_getopt+0xe8>
   16b52:	4601      	mov	r1, r0
   16b54:	e9cd 6400 	strd	r6, r4, [sp]
   16b58:	4640      	mov	r0, r8
   16b5a:	f246 0310 	movw	r3, #24592	; 0x6010
   16b5e:	f44f 7200 	mov.w	r2, #512	; 0x200
   16b62:	f7ff fb71 	bl	16248 <ip_interface_socketoption_get>
   16b66:	2800      	cmp	r0, #0
   16b68:	d0c0      	beq.n	16aec <ip_interface_getopt+0x54>
   16b6a:	e7d6      	b.n	16b1a <ip_interface_getopt+0x82>
   16b6c:	4633      	mov	r3, r6
   16b6e:	463a      	mov	r2, r7
   16b70:	4640      	mov	r0, r8
   16b72:	2101      	movs	r1, #1
   16b74:	9408      	str	r4, [sp, #32]
   16b76:	b002      	add	sp, #8
   16b78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   16b7c:	f004 be9a 	b.w	1b8b4 <interface_socket_getopt>
   16b80:	2016      	movs	r0, #22
   16b82:	f7fa fca1 	bl	114c8 <bsd_os_errno_set>
   16b86:	f04f 30ff 	mov.w	r0, #4294967295
   16b8a:	e7b0      	b.n	16aee <ip_interface_getopt+0x56>
   16b8c:	202a      	movs	r0, #42	; 0x2a
   16b8e:	f7fa fc9b 	bl	114c8 <bsd_os_errno_set>
   16b92:	f04f 30ff 	mov.w	r0, #4294967295
   16b96:	e7aa      	b.n	16aee <ip_interface_getopt+0x56>
   16b98:	2009      	movs	r0, #9
   16b9a:	f7fa fc95 	bl	114c8 <bsd_os_errno_set>
   16b9e:	f04f 30ff 	mov.w	r0, #4294967295
   16ba2:	e7a4      	b.n	16aee <ip_interface_getopt+0x56>

00016ba4 <ip_interface_getaddrinfo>:
   16ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ba8:	f04f 0c00 	mov.w	ip, #0
   16bac:	2401      	movs	r4, #1
   16bae:	4e75      	ldr	r6, [pc, #468]	; (16d84 <_flash_used+0x60>)
   16bb0:	4d75      	ldr	r5, [pc, #468]	; (16d88 <_flash_used+0x64>)
   16bb2:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 16d98 <_flash_used+0x74>
   16bb6:	4f75      	ldr	r7, [pc, #468]	; (16d8c <_flash_used+0x68>)
   16bb8:	7836      	ldrb	r6, [r6, #0]
   16bba:	b085      	sub	sp, #20
   16bbc:	f8a5 c000 	strh.w	ip, [r5]
   16bc0:	f8c8 4000 	str.w	r4, [r8]
   16bc4:	603c      	str	r4, [r7, #0]
   16bc6:	2e00      	cmp	r6, #0
   16bc8:	d05b      	beq.n	16c82 <ip_interface_getaddrinfo+0xde>
   16bca:	9301      	str	r3, [sp, #4]
   16bcc:	4614      	mov	r4, r2
   16bce:	460b      	mov	r3, r1
   16bd0:	4606      	mov	r6, r0
   16bd2:	b171      	cbz	r1, 16bf2 <ip_interface_getaddrinfo+0x4e>
   16bd4:	4618      	mov	r0, r3
   16bd6:	220a      	movs	r2, #10
   16bd8:	4661      	mov	r1, ip
   16bda:	f007 fbd8 	bl	1e38e <strtol>
   16bde:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   16be2:	1e42      	subs	r2, r0, #1
   16be4:	429a      	cmp	r2, r3
   16be6:	f200 8097 	bhi.w	16d18 <ip_interface_getaddrinfo+0x174>
   16bea:	0203      	lsls	r3, r0, #8
   16bec:	ea43 2020 	orr.w	r0, r3, r0, asr #8
   16bf0:	8028      	strh	r0, [r5, #0]
   16bf2:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 16d9c <_flash_used+0x78>
   16bf6:	f8da 3000 	ldr.w	r3, [sl]
   16bfa:	2b00      	cmp	r3, #0
   16bfc:	d145      	bne.n	16c8a <ip_interface_getaddrinfo+0xe6>
   16bfe:	4a64      	ldr	r2, [pc, #400]	; (16d90 <_flash_used+0x6c>)
   16c00:	6013      	str	r3, [r2, #0]
   16c02:	4a64      	ldr	r2, [pc, #400]	; (16d94 <_flash_used+0x70>)
   16c04:	6013      	str	r3, [r2, #0]
   16c06:	2e00      	cmp	r6, #0
   16c08:	d07a      	beq.n	16d00 <ip_interface_getaddrinfo+0x15c>
   16c0a:	4630      	mov	r0, r6
   16c0c:	f007 fcef 	bl	1e5ee <strlen>
   16c10:	4683      	mov	fp, r0
   16c12:	b144      	cbz	r4, 16c26 <ip_interface_getaddrinfo+0x82>
   16c14:	69e2      	ldr	r2, [r4, #28]
   16c16:	b132      	cbz	r2, 16c26 <ip_interface_getaddrinfo+0x82>
   16c18:	6851      	ldr	r1, [r2, #4]
   16c1a:	2966      	cmp	r1, #102	; 0x66
   16c1c:	d103      	bne.n	16c26 <ip_interface_getaddrinfo+0x82>
   16c1e:	6891      	ldr	r1, [r2, #8]
   16c20:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   16c24:	d07e      	beq.n	16d24 <_flash_used>
   16c26:	f04f 32ff 	mov.w	r2, #4294967295
   16c2a:	2100      	movs	r1, #0
   16c2c:	f10d 0910 	add.w	r9, sp, #16
   16c30:	f849 1d04 	str.w	r1, [r9, #-4]!
   16c34:	4648      	mov	r0, r9
   16c36:	4659      	mov	r1, fp
   16c38:	9200      	str	r2, [sp, #0]
   16c3a:	f7fe fdc7 	bl	157cc <rpc_ip_client_request_alloc>
   16c3e:	9a00      	ldr	r2, [sp, #0]
   16c40:	2800      	cmp	r0, #0
   16c42:	d15f      	bne.n	16d04 <ip_interface_getaddrinfo+0x160>
   16c44:	f247 010d 	movw	r1, #28685	; 0x700d
   16c48:	f04f 0c08 	mov.w	ip, #8
   16c4c:	9d03      	ldr	r5, [sp, #12]
   16c4e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   16c52:	60e9      	str	r1, [r5, #12]
   16c54:	612a      	str	r2, [r5, #16]
   16c56:	7268      	strb	r0, [r5, #9]
   16c58:	72a8      	strb	r0, [r5, #10]
   16c5a:	72e8      	strb	r0, [r5, #11]
   16c5c:	f885 c008 	strb.w	ip, [r5, #8]
   16c60:	2c00      	cmp	r4, #0
   16c62:	d076      	beq.n	16d52 <_flash_used+0x2e>
   16c64:	6862      	ldr	r2, [r4, #4]
   16c66:	f022 0108 	bic.w	r1, r2, #8
   16c6a:	2902      	cmp	r1, #2
   16c6c:	d011      	beq.n	16c92 <ip_interface_getaddrinfo+0xee>
   16c6e:	2a05      	cmp	r2, #5
   16c70:	d176      	bne.n	16d60 <_flash_used+0x3c>
   16c72:	68a1      	ldr	r1, [r4, #8]
   16c74:	2902      	cmp	r1, #2
   16c76:	6039      	str	r1, [r7, #0]
   16c78:	d115      	bne.n	16ca6 <ip_interface_getaddrinfo+0x102>
   16c7a:	2102      	movs	r1, #2
   16c7c:	f8c8 1000 	str.w	r1, [r8]
   16c80:	e00b      	b.n	16c9a <ip_interface_getaddrinfo+0xf6>
   16c82:	2070      	movs	r0, #112	; 0x70
   16c84:	b005      	add	sp, #20
   16c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c8a:	2073      	movs	r0, #115	; 0x73
   16c8c:	b005      	add	sp, #20
   16c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c92:	68a1      	ldr	r1, [r4, #8]
   16c94:	2902      	cmp	r1, #2
   16c96:	6039      	str	r1, [r7, #0]
   16c98:	d0ef      	beq.n	16c7a <ip_interface_getaddrinfo+0xd6>
   16c9a:	2a05      	cmp	r2, #5
   16c9c:	d003      	beq.n	16ca6 <ip_interface_getaddrinfo+0x102>
   16c9e:	2a0a      	cmp	r2, #10
   16ca0:	bf14      	ite	ne
   16ca2:	2201      	movne	r2, #1
   16ca4:	2202      	moveq	r2, #2
   16ca6:	61aa      	str	r2, [r5, #24]
   16ca8:	68e2      	ldr	r2, [r4, #12]
   16caa:	622a      	str	r2, [r5, #32]
   16cac:	68a2      	ldr	r2, [r4, #8]
   16cae:	61ea      	str	r2, [r5, #28]
   16cb0:	6822      	ldr	r2, [r4, #0]
   16cb2:	616a      	str	r2, [r5, #20]
   16cb4:	68aa      	ldr	r2, [r5, #8]
   16cb6:	3210      	adds	r2, #16
   16cb8:	60aa      	str	r2, [r5, #8]
   16cba:	b12e      	cbz	r6, 16cc8 <ip_interface_getaddrinfo+0x124>
   16cbc:	6828      	ldr	r0, [r5, #0]
   16cbe:	b118      	cbz	r0, 16cc8 <ip_interface_getaddrinfo+0x124>
   16cc0:	465a      	mov	r2, fp
   16cc2:	4631      	mov	r1, r6
   16cc4:	f007 fcc5 	bl	1e652 <memcpy>
   16cc8:	2301      	movs	r3, #1
   16cca:	f247 010d 	movw	r1, #28685	; 0x700d
   16cce:	4628      	mov	r0, r5
   16cd0:	f8ca 3000 	str.w	r3, [sl]
   16cd4:	f7fe fd8e 	bl	157f4 <rpc_ip_client_request_send>
   16cd8:	bb10      	cbnz	r0, 16d20 <ip_interface_getaddrinfo+0x17c>
   16cda:	f04f 33ff 	mov.w	r3, #4294967295
   16cde:	9303      	str	r3, [sp, #12]
   16ce0:	4649      	mov	r1, r9
   16ce2:	4628      	mov	r0, r5
   16ce4:	f7fa fb38 	bl	11358 <bsd_os_timedwait>
   16ce8:	f8da 3000 	ldr.w	r3, [sl]
   16cec:	2b01      	cmp	r3, #1
   16cee:	d0f7      	beq.n	16ce0 <ip_interface_getaddrinfo+0x13c>
   16cf0:	4b28      	ldr	r3, [pc, #160]	; (16d94 <_flash_used+0x70>)
   16cf2:	6818      	ldr	r0, [r3, #0]
   16cf4:	bb40      	cbnz	r0, 16d48 <_flash_used+0x24>
   16cf6:	4b26      	ldr	r3, [pc, #152]	; (16d90 <_flash_used+0x6c>)
   16cf8:	9a01      	ldr	r2, [sp, #4]
   16cfa:	681b      	ldr	r3, [r3, #0]
   16cfc:	6013      	str	r3, [r2, #0]
   16cfe:	e7c1      	b.n	16c84 <ip_interface_getaddrinfo+0xe0>
   16d00:	46b3      	mov	fp, r6
   16d02:	e786      	b.n	16c12 <ip_interface_getaddrinfo+0x6e>
   16d04:	9d03      	ldr	r5, [sp, #12]
   16d06:	2d00      	cmp	r5, #0
   16d08:	d1aa      	bne.n	16c60 <ip_interface_getaddrinfo+0xbc>
   16d0a:	200c      	movs	r0, #12
   16d0c:	2300      	movs	r3, #0
   16d0e:	f8ca 3000 	str.w	r3, [sl]
   16d12:	b005      	add	sp, #20
   16d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d18:	2016      	movs	r0, #22
   16d1a:	b005      	add	sp, #20
   16d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d20:	2023      	movs	r0, #35	; 0x23
   16d22:	e7f3      	b.n	16d0c <ip_interface_getaddrinfo+0x168>
   16d24:	f240 2002 	movw	r0, #514	; 0x202
   16d28:	68d1      	ldr	r1, [r2, #12]
   16d2a:	4281      	cmp	r1, r0
   16d2c:	f47f af7b 	bne.w	16c26 <ip_interface_getaddrinfo+0x82>
   16d30:	6991      	ldr	r1, [r2, #24]
   16d32:	2900      	cmp	r1, #0
   16d34:	f43f af77 	beq.w	16c26 <ip_interface_getaddrinfo+0x82>
   16d38:	6860      	ldr	r0, [r4, #4]
   16d3a:	f002 fac3 	bl	192c4 <pdn_interface_pdn_id_get>
   16d3e:	1c43      	adds	r3, r0, #1
   16d40:	f43f af71 	beq.w	16c26 <ip_interface_getaddrinfo+0x82>
   16d44:	4602      	mov	r2, r0
   16d46:	e770      	b.n	16c2a <ip_interface_getaddrinfo+0x86>
   16d48:	4b12      	ldr	r3, [pc, #72]	; (16d94 <_flash_used+0x70>)
   16d4a:	6818      	ldr	r0, [r3, #0]
   16d4c:	2800      	cmp	r0, #0
   16d4e:	d099      	beq.n	16c84 <ip_interface_getaddrinfo+0xe0>
   16d50:	e7dc      	b.n	16d0c <ip_interface_getaddrinfo+0x168>
   16d52:	4621      	mov	r1, r4
   16d54:	2210      	movs	r2, #16
   16d56:	f105 0014 	add.w	r0, r5, #20
   16d5a:	f007 fca5 	bl	1e6a8 <memset>
   16d5e:	e7a9      	b.n	16cb4 <ip_interface_getaddrinfo+0x110>
   16d60:	202f      	movs	r0, #47	; 0x2f
   16d62:	f7fa fbb1 	bl	114c8 <bsd_os_errno_set>
   16d66:	68aa      	ldr	r2, [r5, #8]
   16d68:	3210      	adds	r2, #16
   16d6a:	60aa      	str	r2, [r5, #8]
   16d6c:	b916      	cbnz	r6, 16d74 <_flash_used+0x50>
   16d6e:	f04f 30ff 	mov.w	r0, #4294967295
   16d72:	e7cb      	b.n	16d0c <ip_interface_getaddrinfo+0x168>
   16d74:	6828      	ldr	r0, [r5, #0]
   16d76:	2800      	cmp	r0, #0
   16d78:	d0f9      	beq.n	16d6e <_flash_used+0x4a>
   16d7a:	465a      	mov	r2, fp
   16d7c:	4631      	mov	r1, r6
   16d7e:	f007 fc68 	bl	1e652 <memcpy>
   16d82:	e7f4      	b.n	16d6e <_flash_used+0x4a>
   16d84:	20024320 	.word	0x20024320
   16d88:	20022350 	.word	0x20022350
   16d8c:	20020cd8 	.word	0x20020cd8
   16d90:	20020ce4 	.word	0x20020ce4
   16d94:	20020cdc 	.word	0x20020cdc
   16d98:	20020cd4 	.word	0x20020cd4
   16d9c:	20020ce0 	.word	0x20020ce0

00016da0 <ip_interface_freeaddrinfo>:
   16da0:	b538      	push	{r3, r4, r5, lr}
   16da2:	4d0b      	ldr	r5, [pc, #44]	; (16dd0 <ip_interface_freeaddrinfo+0x30>)
   16da4:	682b      	ldr	r3, [r5, #0]
   16da6:	2b02      	cmp	r3, #2
   16da8:	d000      	beq.n	16dac <ip_interface_freeaddrinfo+0xc>
   16daa:	bd38      	pop	{r3, r4, r5, pc}
   16dac:	b150      	cbz	r0, 16dc4 <ip_interface_freeaddrinfo+0x24>
   16dae:	4604      	mov	r4, r0
   16db0:	6940      	ldr	r0, [r0, #20]
   16db2:	f004 f8c3 	bl	1af3c <nrf_free>
   16db6:	69a0      	ldr	r0, [r4, #24]
   16db8:	b108      	cbz	r0, 16dbe <ip_interface_freeaddrinfo+0x1e>
   16dba:	f004 f8bf 	bl	1af3c <nrf_free>
   16dbe:	4620      	mov	r0, r4
   16dc0:	f004 f8bc 	bl	1af3c <nrf_free>
   16dc4:	2300      	movs	r3, #0
   16dc6:	4a03      	ldr	r2, [pc, #12]	; (16dd4 <ip_interface_freeaddrinfo+0x34>)
   16dc8:	602b      	str	r3, [r5, #0]
   16dca:	6013      	str	r3, [r2, #0]
   16dcc:	bd38      	pop	{r3, r4, r5, pc}
   16dce:	bf00      	nop
   16dd0:	20020ce0 	.word	0x20020ce0
   16dd4:	20020cdc 	.word	0x20020cdc

00016dd8 <rpc_ip_event_handler>:
   16dd8:	f248 030d 	movw	r3, #32781	; 0x800d
   16ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16de0:	4299      	cmp	r1, r3
   16de2:	b089      	sub	sp, #36	; 0x24
   16de4:	4604      	mov	r4, r0
   16de6:	d05c      	beq.n	16ea2 <rpc_ip_event_handler+0xca>
   16de8:	f248 030f 	movw	r3, #32783	; 0x800f
   16dec:	4299      	cmp	r1, r3
   16dee:	460d      	mov	r5, r1
   16df0:	d045      	beq.n	16e7e <rpc_ip_event_handler+0xa6>
   16df2:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   16df6:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   16dfa:	68c0      	ldr	r0, [r0, #12]
   16dfc:	d075      	beq.n	16eea <rpc_ip_event_handler+0x112>
   16dfe:	0c06      	lsrs	r6, r0, #16
   16e00:	4630      	mov	r0, r6
   16e02:	f004 fce9 	bl	1b7d8 <interface_socket_from_handle_get>
   16e06:	4607      	mov	r7, r0
   16e08:	2800      	cmp	r0, #0
   16e0a:	d059      	beq.n	16ec0 <rpc_ip_event_handler+0xe8>
   16e0c:	4601      	mov	r1, r0
   16e0e:	462b      	mov	r3, r5
   16e10:	4622      	mov	r2, r4
   16e12:	4630      	mov	r0, r6
   16e14:	f7fe fc4c 	bl	156b0 <tls_rpc_ip_event_handler>
   16e18:	2800      	cmp	r0, #0
   16e1a:	d04d      	beq.n	16eb8 <rpc_ip_event_handler+0xe0>
   16e1c:	f248 0307 	movw	r3, #32775	; 0x8007
   16e20:	429d      	cmp	r5, r3
   16e22:	d866      	bhi.n	16ef2 <rpc_ip_event_handler+0x11a>
   16e24:	f248 0306 	movw	r3, #32774	; 0x8006
   16e28:	429d      	cmp	r5, r3
   16e2a:	f080 81e7 	bcs.w	171fc <rpc_ip_event_handler+0x424>
   16e2e:	f248 0303 	movw	r3, #32771	; 0x8003
   16e32:	429d      	cmp	r5, r3
   16e34:	f000 81c5 	beq.w	171c2 <rpc_ip_event_handler+0x3ea>
   16e38:	f200 811b 	bhi.w	17072 <rpc_ip_event_handler+0x29a>
   16e3c:	f248 0301 	movw	r3, #32769	; 0x8001
   16e40:	429d      	cmp	r5, r3
   16e42:	f000 8154 	beq.w	170ee <rpc_ip_event_handler+0x316>
   16e46:	f248 0302 	movw	r3, #32770	; 0x8002
   16e4a:	429d      	cmp	r5, r3
   16e4c:	d138      	bne.n	16ec0 <rpc_ip_event_handler+0xe8>
   16e4e:	683b      	ldr	r3, [r7, #0]
   16e50:	0098      	lsls	r0, r3, #2
   16e52:	d531      	bpl.n	16eb8 <rpc_ip_event_handler+0xe0>
   16e54:	683b      	ldr	r3, [r7, #0]
   16e56:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   16e5a:	603b      	str	r3, [r7, #0]
   16e5c:	6963      	ldr	r3, [r4, #20]
   16e5e:	2b00      	cmp	r3, #0
   16e60:	f000 81ea 	beq.w	17238 <rpc_ip_event_handler+0x460>
   16e64:	2b10      	cmp	r3, #16
   16e66:	bf8e      	itee	hi
   16e68:	232d      	movhi	r3, #45	; 0x2d
   16e6a:	4ab9      	ldrls	r2, [pc, #740]	; (17150 <rpc_ip_event_handler+0x378>)
   16e6c:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   16e70:	607b      	str	r3, [r7, #4]
   16e72:	683b      	ldr	r3, [r7, #0]
   16e74:	2000      	movs	r0, #0
   16e76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   16e7a:	603b      	str	r3, [r7, #0]
   16e7c:	e00e      	b.n	16e9c <rpc_ip_event_handler+0xc4>
   16e7e:	6943      	ldr	r3, [r0, #20]
   16e80:	2001      	movs	r0, #1
   16e82:	2b10      	cmp	r3, #16
   16e84:	49b3      	ldr	r1, [pc, #716]	; (17154 <rpc_ip_event_handler+0x37c>)
   16e86:	bf88      	it	hi
   16e88:	222d      	movhi	r2, #45	; 0x2d
   16e8a:	7008      	strb	r0, [r1, #0]
   16e8c:	f04f 0000 	mov.w	r0, #0
   16e90:	bf9c      	itt	ls
   16e92:	4aaf      	ldrls	r2, [pc, #700]	; (17150 <rpc_ip_event_handler+0x378>)
   16e94:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   16e98:	4baf      	ldr	r3, [pc, #700]	; (17158 <rpc_ip_event_handler+0x380>)
   16e9a:	601a      	str	r2, [r3, #0]
   16e9c:	b009      	add	sp, #36	; 0x24
   16e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ea2:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 1716c <rpc_ip_event_handler+0x394>
   16ea6:	6807      	ldr	r7, [r0, #0]
   16ea8:	f8da 2000 	ldr.w	r2, [sl]
   16eac:	2a01      	cmp	r2, #1
   16eae:	d00b      	beq.n	16ec8 <rpc_ip_event_handler+0xf0>
   16eb0:	b117      	cbz	r7, 16eb8 <rpc_ip_event_handler+0xe0>
   16eb2:	4638      	mov	r0, r7
   16eb4:	f7fe fcbc 	bl	15830 <rpc_ip_client_data_free>
   16eb8:	2000      	movs	r0, #0
   16eba:	b009      	add	sp, #36	; 0x24
   16ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ec0:	6820      	ldr	r0, [r4, #0]
   16ec2:	2800      	cmp	r0, #0
   16ec4:	d1f6      	bne.n	16eb4 <rpc_ip_event_handler+0xdc>
   16ec6:	e7f7      	b.n	16eb8 <rpc_ip_event_handler+0xe0>
   16ec8:	6942      	ldr	r2, [r0, #20]
   16eca:	2a00      	cmp	r2, #0
   16ecc:	d045      	beq.n	16f5a <rpc_ip_event_handler+0x182>
   16ece:	2a10      	cmp	r2, #16
   16ed0:	bf8e      	itee	hi
   16ed2:	222d      	movhi	r2, #45	; 0x2d
   16ed4:	499e      	ldrls	r1, [pc, #632]	; (17150 <rpc_ip_event_handler+0x378>)
   16ed6:	f851 2022 	ldrls.w	r2, [r1, r2, lsl #2]
   16eda:	49a0      	ldr	r1, [pc, #640]	; (1715c <rpc_ip_event_handler+0x384>)
   16edc:	600a      	str	r2, [r1, #0]
   16ede:	2202      	movs	r2, #2
   16ee0:	f8ca 2000 	str.w	r2, [sl]
   16ee4:	2f00      	cmp	r7, #0
   16ee6:	d1e4      	bne.n	16eb2 <rpc_ip_event_handler+0xda>
   16ee8:	e7e6      	b.n	16eb8 <rpc_ip_event_handler+0xe0>
   16eea:	f004 fc23 	bl	1b734 <interface_from_internal_id_search>
   16eee:	4606      	mov	r6, r0
   16ef0:	e786      	b.n	16e00 <rpc_ip_event_handler+0x28>
   16ef2:	f248 030c 	movw	r3, #32780	; 0x800c
   16ef6:	429d      	cmp	r5, r3
   16ef8:	f000 813c 	beq.w	17174 <rpc_ip_event_handler+0x39c>
   16efc:	f240 80d5 	bls.w	170aa <rpc_ip_event_handler+0x2d2>
   16f00:	f249 0302 	movw	r3, #36866	; 0x9002
   16f04:	429d      	cmp	r5, r3
   16f06:	f000 811d 	beq.w	17144 <rpc_ip_event_handler+0x36c>
   16f0a:	f249 0303 	movw	r3, #36867	; 0x9003
   16f0e:	429d      	cmp	r5, r3
   16f10:	f000 80f9 	beq.w	17106 <rpc_ip_event_handler+0x32e>
   16f14:	f249 0301 	movw	r3, #36865	; 0x9001
   16f18:	429d      	cmp	r5, r3
   16f1a:	d1d1      	bne.n	16ec0 <rpc_ip_event_handler+0xe8>
   16f1c:	683d      	ldr	r5, [r7, #0]
   16f1e:	f415 1580 	ands.w	r5, r5, #1048576	; 0x100000
   16f22:	f000 8184 	beq.w	1722e <rpc_ip_event_handler+0x456>
   16f26:	68a3      	ldr	r3, [r4, #8]
   16f28:	2b04      	cmp	r3, #4
   16f2a:	f200 81af 	bhi.w	1728c <rpc_ip_event_handler+0x4b4>
   16f2e:	2500      	movs	r5, #0
   16f30:	462e      	mov	r6, r5
   16f32:	6821      	ldr	r1, [r4, #0]
   16f34:	6862      	ldr	r2, [r4, #4]
   16f36:	e9cd 6506 	strd	r6, r5, [sp, #24]
   16f3a:	e9cd 1204 	strd	r1, r2, [sp, #16]
   16f3e:	69f8      	ldr	r0, [r7, #28]
   16f40:	a904      	add	r1, sp, #16
   16f42:	6803      	ldr	r3, [r0, #0]
   16f44:	685b      	ldr	r3, [r3, #4]
   16f46:	4798      	blx	r3
   16f48:	3001      	adds	r0, #1
   16f4a:	f000 818e 	beq.w	1726a <rpc_ip_event_handler+0x492>
   16f4e:	683b      	ldr	r3, [r7, #0]
   16f50:	2000      	movs	r0, #0
   16f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   16f56:	603b      	str	r3, [r7, #0]
   16f58:	e7a0      	b.n	16e9c <rpc_ip_event_handler+0xc4>
   16f5a:	6985      	ldr	r5, [r0, #24]
   16f5c:	016b      	lsls	r3, r5, #5
   16f5e:	4618      	mov	r0, r3
   16f60:	9303      	str	r3, [sp, #12]
   16f62:	f003 ffe1 	bl	1af28 <nrf_malloc>
   16f66:	9002      	str	r0, [sp, #8]
   16f68:	2800      	cmp	r0, #0
   16f6a:	d078      	beq.n	1705e <rpc_ip_event_handler+0x286>
   16f6c:	00ee      	lsls	r6, r5, #3
   16f6e:	1970      	adds	r0, r6, r5
   16f70:	0080      	lsls	r0, r0, #2
   16f72:	f003 ffd9 	bl	1af28 <nrf_malloc>
   16f76:	2800      	cmp	r0, #0
   16f78:	d073      	beq.n	17062 <rpc_ip_event_handler+0x28a>
   16f7a:	2d00      	cmp	r5, #0
   16f7c:	d074      	beq.n	17068 <rpc_ip_event_handler+0x290>
   16f7e:	3610      	adds	r6, #16
   16f80:	1983      	adds	r3, r0, r6
   16f82:	9301      	str	r3, [sp, #4]
   16f84:	9b02      	ldr	r3, [sp, #8]
   16f86:	2204      	movs	r2, #4
   16f88:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 17170 <rpc_ip_event_handler+0x398>
   16f8c:	f100 0810 	add.w	r8, r0, #16
   16f90:	f103 0520 	add.w	r5, r3, #32
   16f94:	e013      	b.n	16fbe <rpc_ip_event_handler+0x1e6>
   16f96:	464a      	mov	r2, r9
   16f98:	f007 fb5b 	bl	1e652 <memcpy>
   16f9c:	2100      	movs	r1, #0
   16f9e:	f855 3c08 	ldr.w	r3, [r5, #-8]
   16fa2:	f108 0808 	add.w	r8, r8, #8
   16fa6:	eb09 0206 	add.w	r2, r9, r6
   16faa:	f803 1009 	strb.w	r1, [r3, r9]
   16fae:	9b01      	ldr	r3, [sp, #4]
   16fb0:	f845 5c04 	str.w	r5, [r5, #-4]
   16fb4:	4598      	cmp	r8, r3
   16fb6:	f105 0520 	add.w	r5, r5, #32
   16fba:	f000 8090 	beq.w	170de <rpc_ip_event_handler+0x306>
   16fbe:	58bb      	ldr	r3, [r7, r2]
   16fc0:	18b9      	adds	r1, r7, r2
   16fc2:	f845 3c20 	str.w	r3, [r5, #-32]
   16fc6:	684b      	ldr	r3, [r1, #4]
   16fc8:	f8db 0000 	ldr.w	r0, [fp]
   16fcc:	2b02      	cmp	r3, #2
   16fce:	bf14      	ite	ne
   16fd0:	2602      	movne	r6, #2
   16fd2:	260a      	moveq	r6, #10
   16fd4:	4b62      	ldr	r3, [pc, #392]	; (17160 <rpc_ip_event_handler+0x388>)
   16fd6:	e945 6007 	strd	r6, r0, [r5, #-28]
   16fda:	681b      	ldr	r3, [r3, #0]
   16fdc:	f102 0614 	add.w	r6, r2, #20
   16fe0:	f845 3c14 	str.w	r3, [r5, #-20]
   16fe4:	8a08      	ldrh	r0, [r1, #16]
   16fe6:	f1a8 0310 	sub.w	r3, r8, #16
   16fea:	f845 0c10 	str.w	r0, [r5, #-16]
   16fee:	f8b1 9012 	ldrh.w	r9, [r1, #18]
   16ff2:	f845 3c0c 	str.w	r3, [r5, #-12]
   16ff6:	4b5b      	ldr	r3, [pc, #364]	; (17164 <rpc_ip_event_handler+0x38c>)
   16ff8:	2804      	cmp	r0, #4
   16ffa:	eb07 0106 	add.w	r1, r7, r6
   16ffe:	881b      	ldrh	r3, [r3, #0]
   17000:	d01e      	beq.n	17040 <rpc_ip_event_handler+0x268>
   17002:	220a      	movs	r2, #10
   17004:	f848 2c0c 	str.w	r2, [r8, #-12]
   17008:	f04f 0224 	mov.w	r2, #36	; 0x24
   1700c:	f828 3c08 	strh.w	r3, [r8, #-8]
   17010:	f808 2c10 	strb.w	r2, [r8, #-16]
   17014:	f855 2c10 	ldr.w	r2, [r5, #-16]
   17018:	4640      	mov	r0, r8
   1701a:	f007 fb1a 	bl	1e652 <memcpy>
   1701e:	f855 3c10 	ldr.w	r3, [r5, #-16]
   17022:	f109 0001 	add.w	r0, r9, #1
   17026:	441e      	add	r6, r3
   17028:	f003 ff7e 	bl	1af28 <nrf_malloc>
   1702c:	19b9      	adds	r1, r7, r6
   1702e:	eb09 0206 	add.w	r2, r9, r6
   17032:	f845 0c08 	str.w	r0, [r5, #-8]
   17036:	2800      	cmp	r0, #0
   17038:	d1ad      	bne.n	16f96 <rpc_ip_event_handler+0x1be>
   1703a:	f108 0808 	add.w	r8, r8, #8
   1703e:	e7b6      	b.n	16fae <rpc_ip_event_handler+0x1d6>
   17040:	2210      	movs	r2, #16
   17042:	2002      	movs	r0, #2
   17044:	f828 3c08 	strh.w	r3, [r8, #-8]
   17048:	f848 0c0c 	str.w	r0, [r8, #-12]
   1704c:	f808 2c10 	strb.w	r2, [r8, #-16]
   17050:	f855 2c10 	ldr.w	r2, [r5, #-16]
   17054:	f1a8 0004 	sub.w	r0, r8, #4
   17058:	f007 fafb 	bl	1e652 <memcpy>
   1705c:	e7df      	b.n	1701e <rpc_ip_event_handler+0x246>
   1705e:	f003 ff6d 	bl	1af3c <nrf_free>
   17062:	210c      	movs	r1, #12
   17064:	4a3d      	ldr	r2, [pc, #244]	; (1715c <rpc_ip_event_handler+0x384>)
   17066:	6011      	str	r1, [r2, #0]
   17068:	9b02      	ldr	r3, [sp, #8]
   1706a:	4a3f      	ldr	r2, [pc, #252]	; (17168 <rpc_ip_event_handler+0x390>)
   1706c:	6827      	ldr	r7, [r4, #0]
   1706e:	6013      	str	r3, [r2, #0]
   17070:	e735      	b.n	16ede <rpc_ip_event_handler+0x106>
   17072:	f248 0304 	movw	r3, #32772	; 0x8004
   17076:	429d      	cmp	r5, r3
   17078:	f000 808f 	beq.w	1719a <rpc_ip_event_handler+0x3c2>
   1707c:	f248 0305 	movw	r3, #32773	; 0x8005
   17080:	429d      	cmp	r5, r3
   17082:	f47f af1d 	bne.w	16ec0 <rpc_ip_event_handler+0xe8>
   17086:	683b      	ldr	r3, [r7, #0]
   17088:	b29b      	uxth	r3, r3
   1708a:	2b03      	cmp	r3, #3
   1708c:	f47f af14 	bne.w	16eb8 <rpc_ip_event_handler+0xe0>
   17090:	6963      	ldr	r3, [r4, #20]
   17092:	2b00      	cmp	r3, #0
   17094:	f000 80eb 	beq.w	1726e <rpc_ip_event_handler+0x496>
   17098:	2b10      	cmp	r3, #16
   1709a:	f200 80bd 	bhi.w	17218 <rpc_ip_event_handler+0x440>
   1709e:	4a2c      	ldr	r2, [pc, #176]	; (17150 <rpc_ip_event_handler+0x378>)
   170a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   170a4:	607b      	str	r3, [r7, #4]
   170a6:	2000      	movs	r0, #0
   170a8:	e6f8      	b.n	16e9c <rpc_ip_event_handler+0xc4>
   170aa:	f248 0308 	movw	r3, #32776	; 0x8008
   170ae:	429d      	cmp	r5, r3
   170b0:	f000 8094 	beq.w	171dc <rpc_ip_event_handler+0x404>
   170b4:	f248 0309 	movw	r3, #32777	; 0x8009
   170b8:	429d      	cmp	r5, r3
   170ba:	f47f af01 	bne.w	16ec0 <rpc_ip_event_handler+0xe8>
   170be:	683b      	ldr	r3, [r7, #0]
   170c0:	b29b      	uxth	r3, r3
   170c2:	2b0d      	cmp	r3, #13
   170c4:	f47f aef8 	bne.w	16eb8 <rpc_ip_event_handler+0xe0>
   170c8:	6960      	ldr	r0, [r4, #20]
   170ca:	2800      	cmp	r0, #0
   170cc:	f000 80d7 	beq.w	1727e <rpc_ip_event_handler+0x4a6>
   170d0:	2810      	cmp	r0, #16
   170d2:	f200 80a1 	bhi.w	17218 <rpc_ip_event_handler+0x440>
   170d6:	4b1e      	ldr	r3, [pc, #120]	; (17150 <rpc_ip_event_handler+0x378>)
   170d8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   170dc:	e7e2      	b.n	170a4 <rpc_ip_event_handler+0x2cc>
   170de:	2100      	movs	r1, #0
   170e0:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
   170e4:	4403      	add	r3, r0
   170e6:	f843 1c04 	str.w	r1, [r3, #-4]
   170ea:	4603      	mov	r3, r0
   170ec:	e7bd      	b.n	1706a <rpc_ip_event_handler+0x292>
   170ee:	683b      	ldr	r3, [r7, #0]
   170f0:	2b01      	cmp	r3, #1
   170f2:	f47f aee1 	bne.w	16eb8 <rpc_ip_event_handler+0xe0>
   170f6:	6960      	ldr	r0, [r4, #20]
   170f8:	2800      	cmp	r0, #0
   170fa:	d1e9      	bne.n	170d0 <rpc_ip_event_handler+0x2f8>
   170fc:	2302      	movs	r3, #2
   170fe:	603b      	str	r3, [r7, #0]
   17100:	69a3      	ldr	r3, [r4, #24]
   17102:	61bb      	str	r3, [r7, #24]
   17104:	e6ca      	b.n	16e9c <rpc_ip_event_handler+0xc4>
   17106:	683b      	ldr	r3, [r7, #0]
   17108:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   1710c:	603b      	str	r3, [r7, #0]
   1710e:	683b      	ldr	r3, [r7, #0]
   17110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   17114:	603b      	str	r3, [r7, #0]
   17116:	683b      	ldr	r3, [r7, #0]
   17118:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1711c:	603b      	str	r3, [r7, #0]
   1711e:	683b      	ldr	r3, [r7, #0]
   17120:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   17124:	603b      	str	r3, [r7, #0]
   17126:	6923      	ldr	r3, [r4, #16]
   17128:	2b6c      	cmp	r3, #108	; 0x6c
   1712a:	d077      	beq.n	1721c <rpc_ip_event_handler+0x444>
   1712c:	2b10      	cmp	r3, #16
   1712e:	bf8c      	ite	hi
   17130:	232d      	movhi	r3, #45	; 0x2d
   17132:	4a07      	ldrls	r2, [pc, #28]	; (17150 <rpc_ip_event_handler+0x378>)
   17134:	f04f 0000 	mov.w	r0, #0
   17138:	bf98      	it	ls
   1713a:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   1713e:	607b      	str	r3, [r7, #4]
   17140:	60bb      	str	r3, [r7, #8]
   17142:	e6ab      	b.n	16e9c <rpc_ip_event_handler+0xc4>
   17144:	683b      	ldr	r3, [r7, #0]
   17146:	b29b      	uxth	r3, r3
   17148:	2b07      	cmp	r3, #7
   1714a:	f47f aeb5 	bne.w	16eb8 <rpc_ip_event_handler+0xe0>
   1714e:	e6fe      	b.n	16f4e <rpc_ip_event_handler+0x176>
   17150:	00020dc8 	.word	0x00020dc8
   17154:	20024321 	.word	0x20024321
   17158:	20020d0c 	.word	0x20020d0c
   1715c:	20020cdc 	.word	0x20020cdc
   17160:	20020cd4 	.word	0x20020cd4
   17164:	20022350 	.word	0x20022350
   17168:	20020ce4 	.word	0x20020ce4
   1716c:	20020ce0 	.word	0x20020ce0
   17170:	20020cd8 	.word	0x20020cd8
   17174:	683b      	ldr	r3, [r7, #0]
   17176:	b29b      	uxth	r3, r3
   17178:	2b08      	cmp	r3, #8
   1717a:	f47f ae9d 	bne.w	16eb8 <rpc_ip_event_handler+0xe0>
   1717e:	6963      	ldr	r3, [r4, #20]
   17180:	2b00      	cmp	r3, #0
   17182:	d189      	bne.n	17098 <rpc_ip_event_handler+0x2c0>
   17184:	4b5e      	ldr	r3, [pc, #376]	; (17300 <rpc_ip_event_handler+0x528>)
   17186:	2001      	movs	r0, #1
   17188:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
   1718c:	683b      	ldr	r3, [r7, #0]
   1718e:	0c1b      	lsrs	r3, r3, #16
   17190:	041b      	lsls	r3, r3, #16
   17192:	f043 0309 	orr.w	r3, r3, #9
   17196:	603b      	str	r3, [r7, #0]
   17198:	e680      	b.n	16e9c <rpc_ip_event_handler+0xc4>
   1719a:	683b      	ldr	r3, [r7, #0]
   1719c:	01db      	lsls	r3, r3, #7
   1719e:	f57f ae8b 	bpl.w	16eb8 <rpc_ip_event_handler+0xe0>
   171a2:	6963      	ldr	r3, [r4, #20]
   171a4:	2b00      	cmp	r3, #0
   171a6:	f47f af77 	bne.w	17098 <rpc_ip_event_handler+0x2c0>
   171aa:	6823      	ldr	r3, [r4, #0]
   171ac:	2b00      	cmp	r3, #0
   171ae:	d071      	beq.n	17294 <rpc_ip_event_handler+0x4bc>
   171b0:	2001      	movs	r0, #1
   171b2:	4b53      	ldr	r3, [pc, #332]	; (17300 <rpc_ip_event_handler+0x528>)
   171b4:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
   171b8:	683b      	ldr	r3, [r7, #0]
   171ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   171be:	603b      	str	r3, [r7, #0]
   171c0:	e66c      	b.n	16e9c <rpc_ip_event_handler+0xc4>
   171c2:	683b      	ldr	r3, [r7, #0]
   171c4:	025a      	lsls	r2, r3, #9
   171c6:	f57f ae77 	bpl.w	16eb8 <rpc_ip_event_handler+0xe0>
   171ca:	6960      	ldr	r0, [r4, #20]
   171cc:	2800      	cmp	r0, #0
   171ce:	f47f af7f 	bne.w	170d0 <rpc_ip_event_handler+0x2f8>
   171d2:	683b      	ldr	r3, [r7, #0]
   171d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   171d8:	603b      	str	r3, [r7, #0]
   171da:	e65f      	b.n	16e9c <rpc_ip_event_handler+0xc4>
   171dc:	683b      	ldr	r3, [r7, #0]
   171de:	b29b      	uxth	r3, r3
   171e0:	2b06      	cmp	r3, #6
   171e2:	f47f ae69 	bne.w	16eb8 <rpc_ip_event_handler+0xe0>
   171e6:	6960      	ldr	r0, [r4, #20]
   171e8:	2800      	cmp	r0, #0
   171ea:	f47f af71 	bne.w	170d0 <rpc_ip_event_handler+0x2f8>
   171ee:	683b      	ldr	r3, [r7, #0]
   171f0:	0c1b      	lsrs	r3, r3, #16
   171f2:	041b      	lsls	r3, r3, #16
   171f4:	f043 0307 	orr.w	r3, r3, #7
   171f8:	603b      	str	r3, [r7, #0]
   171fa:	e64f      	b.n	16e9c <rpc_ip_event_handler+0xc4>
   171fc:	683b      	ldr	r3, [r7, #0]
   171fe:	0299      	lsls	r1, r3, #10
   17200:	f57f ae5a 	bpl.w	16eb8 <rpc_ip_event_handler+0xe0>
   17204:	6963      	ldr	r3, [r4, #20]
   17206:	b33b      	cbz	r3, 17258 <rpc_ip_event_handler+0x480>
   17208:	2b6b      	cmp	r3, #107	; 0x6b
   1720a:	f47f ae2b 	bne.w	16e64 <rpc_ip_event_handler+0x8c>
   1720e:	693b      	ldr	r3, [r7, #16]
   17210:	2b01      	cmp	r3, #1
   17212:	d041      	beq.n	17298 <rpc_ip_event_handler+0x4c0>
   17214:	230c      	movs	r3, #12
   17216:	e62b      	b.n	16e70 <rpc_ip_event_handler+0x98>
   17218:	232d      	movs	r3, #45	; 0x2d
   1721a:	e743      	b.n	170a4 <rpc_ip_event_handler+0x2cc>
   1721c:	2239      	movs	r2, #57	; 0x39
   1721e:	683b      	ldr	r3, [r7, #0]
   17220:	2000      	movs	r0, #0
   17222:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   17226:	603b      	str	r3, [r7, #0]
   17228:	607a      	str	r2, [r7, #4]
   1722a:	60ba      	str	r2, [r7, #8]
   1722c:	e636      	b.n	16e9c <rpc_ip_event_handler+0xc4>
   1722e:	6820      	ldr	r0, [r4, #0]
   17230:	f7fe fafe 	bl	15830 <rpc_ip_client_data_free>
   17234:	4628      	mov	r0, r5
   17236:	e631      	b.n	16e9c <rpc_ip_event_handler+0xc4>
   17238:	683b      	ldr	r3, [r7, #0]
   1723a:	2000      	movs	r0, #0
   1723c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   17240:	603b      	str	r3, [r7, #0]
   17242:	683b      	ldr	r3, [r7, #0]
   17244:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   17248:	603b      	str	r3, [r7, #0]
   1724a:	683b      	ldr	r3, [r7, #0]
   1724c:	0c1b      	lsrs	r3, r3, #16
   1724e:	041b      	lsls	r3, r3, #16
   17250:	f043 0305 	orr.w	r3, r3, #5
   17254:	603b      	str	r3, [r7, #0]
   17256:	e621      	b.n	16e9c <rpc_ip_event_handler+0xc4>
   17258:	683b      	ldr	r3, [r7, #0]
   1725a:	4a29      	ldr	r2, [pc, #164]	; (17300 <rpc_ip_event_handler+0x528>)
   1725c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   17260:	603b      	str	r3, [r7, #0]
   17262:	2001      	movs	r0, #1
   17264:	f842 4026 	str.w	r4, [r2, r6, lsl #2]
   17268:	e618      	b.n	16e9c <rpc_ip_event_handler+0xc4>
   1726a:	2002      	movs	r0, #2
   1726c:	e616      	b.n	16e9c <rpc_ip_event_handler+0xc4>
   1726e:	683b      	ldr	r3, [r7, #0]
   17270:	2000      	movs	r0, #0
   17272:	0c1b      	lsrs	r3, r3, #16
   17274:	041b      	lsls	r3, r3, #16
   17276:	f043 0304 	orr.w	r3, r3, #4
   1727a:	603b      	str	r3, [r7, #0]
   1727c:	e60e      	b.n	16e9c <rpc_ip_event_handler+0xc4>
   1727e:	683b      	ldr	r3, [r7, #0]
   17280:	0c1b      	lsrs	r3, r3, #16
   17282:	041b      	lsls	r3, r3, #16
   17284:	f043 030e 	orr.w	r3, r3, #14
   17288:	603b      	str	r3, [r7, #0]
   1728a:	e607      	b.n	16e9c <rpc_ip_event_handler+0xc4>
   1728c:	8a65      	ldrh	r5, [r4, #18]
   1728e:	b95d      	cbnz	r5, 172a8 <rpc_ip_event_handler+0x4d0>
   17290:	462e      	mov	r6, r5
   17292:	e64e      	b.n	16f32 <rpc_ip_event_handler+0x15a>
   17294:	2000      	movs	r0, #0
   17296:	e78f      	b.n	171b8 <rpc_ip_event_handler+0x3e0>
   17298:	220c      	movs	r2, #12
   1729a:	683b      	ldr	r3, [r7, #0]
   1729c:	2000      	movs	r0, #0
   1729e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   172a2:	603b      	str	r3, [r7, #0]
   172a4:	607a      	str	r2, [r7, #4]
   172a6:	e5f9      	b.n	16e9c <rpc_ip_event_handler+0xc4>
   172a8:	2024      	movs	r0, #36	; 0x24
   172aa:	f003 fe3d 	bl	1af28 <nrf_malloc>
   172ae:	4606      	mov	r6, r0
   172b0:	2800      	cmp	r0, #0
   172b2:	d0da      	beq.n	1726a <rpc_ip_event_handler+0x492>
   172b4:	8a62      	ldrh	r2, [r4, #18]
   172b6:	2a10      	cmp	r2, #16
   172b8:	d009      	beq.n	172ce <rpc_ip_event_handler+0x4f6>
   172ba:	2a04      	cmp	r2, #4
   172bc:	d013      	beq.n	172e6 <rpc_ip_event_handler+0x50e>
   172be:	6820      	ldr	r0, [r4, #0]
   172c0:	f7fe fab6 	bl	15830 <rpc_ip_client_data_free>
   172c4:	4630      	mov	r0, r6
   172c6:	f003 fe39 	bl	1af3c <nrf_free>
   172ca:	2000      	movs	r0, #0
   172cc:	e5e6      	b.n	16e9c <rpc_ip_event_handler+0xc4>
   172ce:	230a      	movs	r3, #10
   172d0:	2524      	movs	r5, #36	; 0x24
   172d2:	6043      	str	r3, [r0, #4]
   172d4:	7005      	strb	r5, [r0, #0]
   172d6:	8a23      	ldrh	r3, [r4, #16]
   172d8:	f104 0114 	add.w	r1, r4, #20
   172dc:	8103      	strh	r3, [r0, #8]
   172de:	3010      	adds	r0, #16
   172e0:	f007 f9b7 	bl	1e652 <memcpy>
   172e4:	e625      	b.n	16f32 <rpc_ip_event_handler+0x15a>
   172e6:	2302      	movs	r3, #2
   172e8:	2510      	movs	r5, #16
   172ea:	6043      	str	r3, [r0, #4]
   172ec:	7005      	strb	r5, [r0, #0]
   172ee:	8a23      	ldrh	r3, [r4, #16]
   172f0:	f104 0114 	add.w	r1, r4, #20
   172f4:	8103      	strh	r3, [r0, #8]
   172f6:	300c      	adds	r0, #12
   172f8:	f007 f9ab 	bl	1e652 <memcpy>
   172fc:	e619      	b.n	16f32 <rpc_ip_event_handler+0x15a>
   172fe:	bf00      	nop
   17300:	20020ce8 	.word	0x20020ce8

00017304 <rpc_handle_ctrl_message>:
   17304:	2902      	cmp	r1, #2
   17306:	b510      	push	{r4, lr}
   17308:	4604      	mov	r4, r0
   1730a:	d00c      	beq.n	17326 <rpc_handle_ctrl_message+0x22>
   1730c:	2904      	cmp	r1, #4
   1730e:	d008      	beq.n	17322 <rpc_handle_ctrl_message+0x1e>
   17310:	2901      	cmp	r1, #1
   17312:	d006      	beq.n	17322 <rpc_handle_ctrl_message+0x1e>
   17314:	6880      	ldr	r0, [r0, #8]
   17316:	b108      	cbz	r0, 1731c <rpc_handle_ctrl_message+0x18>
   17318:	f7fc fd48 	bl	13dac <rpc_transport_data_free>
   1731c:	4620      	mov	r0, r4
   1731e:	f7fc fd43 	bl	13da8 <rpc_transport_rpc_free>
   17322:	2000      	movs	r0, #0
   17324:	bd10      	pop	{r4, pc}
   17326:	6880      	ldr	r0, [r0, #8]
   17328:	2800      	cmp	r0, #0
   1732a:	d0fa      	beq.n	17322 <rpc_handle_ctrl_message+0x1e>
   1732c:	f7fc fd3e 	bl	13dac <rpc_transport_data_free>
   17330:	2000      	movs	r0, #0
   17332:	bd10      	pop	{r4, pc}

00017334 <rpc_handle_data_message>:
   17334:	4b23      	ldr	r3, [pc, #140]	; (173c4 <rpc_handle_data_message+0x90>)
   17336:	6802      	ldr	r2, [r0, #0]
   17338:	8819      	ldrh	r1, [r3, #0]
   1733a:	b292      	uxth	r2, r2
   1733c:	4291      	cmp	r1, r2
   1733e:	d027      	beq.n	17390 <rpc_handle_data_message+0x5c>
   17340:	8a19      	ldrh	r1, [r3, #16]
   17342:	4291      	cmp	r1, r2
   17344:	d02a      	beq.n	1739c <rpc_handle_data_message+0x68>
   17346:	8c19      	ldrh	r1, [r3, #32]
   17348:	4291      	cmp	r1, r2
   1734a:	d02b      	beq.n	173a4 <rpc_handle_data_message+0x70>
   1734c:	8e19      	ldrh	r1, [r3, #48]	; 0x30
   1734e:	4291      	cmp	r1, r2
   17350:	d02a      	beq.n	173a8 <rpc_handle_data_message+0x74>
   17352:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
   17356:	4291      	cmp	r1, r2
   17358:	d028      	beq.n	173ac <rpc_handle_data_message+0x78>
   1735a:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
   1735e:	4291      	cmp	r1, r2
   17360:	d026      	beq.n	173b0 <rpc_handle_data_message+0x7c>
   17362:	f8b3 1060 	ldrh.w	r1, [r3, #96]	; 0x60
   17366:	4291      	cmp	r1, r2
   17368:	d026      	beq.n	173b8 <rpc_handle_data_message+0x84>
   1736a:	f8b3 1070 	ldrh.w	r1, [r3, #112]	; 0x70
   1736e:	4291      	cmp	r1, r2
   17370:	d024      	beq.n	173bc <rpc_handle_data_message+0x88>
   17372:	f8b3 1080 	ldrh.w	r1, [r3, #128]	; 0x80
   17376:	4291      	cmp	r1, r2
   17378:	d01c      	beq.n	173b4 <rpc_handle_data_message+0x80>
   1737a:	f8b3 1090 	ldrh.w	r1, [r3, #144]	; 0x90
   1737e:	4291      	cmp	r1, r2
   17380:	d01e      	beq.n	173c0 <rpc_handle_data_message+0x8c>
   17382:	6880      	ldr	r0, [r0, #8]
   17384:	b160      	cbz	r0, 173a0 <rpc_handle_data_message+0x6c>
   17386:	b510      	push	{r4, lr}
   17388:	f7fc fd10 	bl	13dac <rpc_transport_data_free>
   1738c:	2000      	movs	r0, #0
   1738e:	bd10      	pop	{r4, pc}
   17390:	2200      	movs	r2, #0
   17392:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   17396:	685a      	ldr	r2, [r3, #4]
   17398:	68d9      	ldr	r1, [r3, #12]
   1739a:	4710      	bx	r2
   1739c:	2201      	movs	r2, #1
   1739e:	e7f8      	b.n	17392 <rpc_handle_data_message+0x5e>
   173a0:	2000      	movs	r0, #0
   173a2:	4770      	bx	lr
   173a4:	2202      	movs	r2, #2
   173a6:	e7f4      	b.n	17392 <rpc_handle_data_message+0x5e>
   173a8:	2203      	movs	r2, #3
   173aa:	e7f2      	b.n	17392 <rpc_handle_data_message+0x5e>
   173ac:	2204      	movs	r2, #4
   173ae:	e7f0      	b.n	17392 <rpc_handle_data_message+0x5e>
   173b0:	2205      	movs	r2, #5
   173b2:	e7ee      	b.n	17392 <rpc_handle_data_message+0x5e>
   173b4:	2208      	movs	r2, #8
   173b6:	e7ec      	b.n	17392 <rpc_handle_data_message+0x5e>
   173b8:	2206      	movs	r2, #6
   173ba:	e7ea      	b.n	17392 <rpc_handle_data_message+0x5e>
   173bc:	2207      	movs	r2, #7
   173be:	e7e8      	b.n	17392 <rpc_handle_data_message+0x5e>
   173c0:	2209      	movs	r2, #9
   173c2:	e7e6      	b.n	17392 <rpc_handle_data_message+0x5e>
   173c4:	20020d10 	.word	0x20020d10

000173c8 <rpc_framework_init>:
   173c8:	b508      	push	{r3, lr}
   173ca:	22a0      	movs	r2, #160	; 0xa0
   173cc:	2100      	movs	r1, #0
   173ce:	4802      	ldr	r0, [pc, #8]	; (173d8 <rpc_framework_init+0x10>)
   173d0:	f007 f96a 	bl	1e6a8 <memset>
   173d4:	2000      	movs	r0, #0
   173d6:	bd08      	pop	{r3, pc}
   173d8:	20020d10 	.word	0x20020d10

000173dc <rpc_client_register>:
   173dc:	8803      	ldrh	r3, [r0, #0]
   173de:	2b00      	cmp	r3, #0
   173e0:	d045      	beq.n	1746e <rpc_client_register+0x92>
   173e2:	6842      	ldr	r2, [r0, #4]
   173e4:	4601      	mov	r1, r0
   173e6:	2a00      	cmp	r2, #0
   173e8:	d050      	beq.n	1748c <rpc_client_register+0xb0>
   173ea:	4a30      	ldr	r2, [pc, #192]	; (174ac <rpc_client_register+0xd0>)
   173ec:	8810      	ldrh	r0, [r2, #0]
   173ee:	4283      	cmp	r3, r0
   173f0:	d03d      	beq.n	1746e <rpc_client_register+0x92>
   173f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   173f6:	8a14      	ldrh	r4, [r2, #16]
   173f8:	42a3      	cmp	r3, r4
   173fa:	d035      	beq.n	17468 <rpc_client_register+0x8c>
   173fc:	8c15      	ldrh	r5, [r2, #32]
   173fe:	42ab      	cmp	r3, r5
   17400:	d032      	beq.n	17468 <rpc_client_register+0x8c>
   17402:	8e16      	ldrh	r6, [r2, #48]	; 0x30
   17404:	42b3      	cmp	r3, r6
   17406:	d02f      	beq.n	17468 <rpc_client_register+0x8c>
   17408:	f8b2 7040 	ldrh.w	r7, [r2, #64]	; 0x40
   1740c:	42bb      	cmp	r3, r7
   1740e:	d02b      	beq.n	17468 <rpc_client_register+0x8c>
   17410:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
   17414:	4563      	cmp	r3, ip
   17416:	d027      	beq.n	17468 <rpc_client_register+0x8c>
   17418:	f8b2 e060 	ldrh.w	lr, [r2, #96]	; 0x60
   1741c:	4573      	cmp	r3, lr
   1741e:	d023      	beq.n	17468 <rpc_client_register+0x8c>
   17420:	f8b2 8070 	ldrh.w	r8, [r2, #112]	; 0x70
   17424:	4543      	cmp	r3, r8
   17426:	d01f      	beq.n	17468 <rpc_client_register+0x8c>
   17428:	f8b2 9080 	ldrh.w	r9, [r2, #128]	; 0x80
   1742c:	454b      	cmp	r3, r9
   1742e:	d01b      	beq.n	17468 <rpc_client_register+0x8c>
   17430:	f8b2 a090 	ldrh.w	sl, [r2, #144]	; 0x90
   17434:	4553      	cmp	r3, sl
   17436:	d017      	beq.n	17468 <rpc_client_register+0x8c>
   17438:	b1e0      	cbz	r0, 17474 <rpc_client_register+0x98>
   1743a:	b35c      	cbz	r4, 17494 <rpc_client_register+0xb8>
   1743c:	b365      	cbz	r5, 17498 <rpc_client_register+0xbc>
   1743e:	b36e      	cbz	r6, 1749c <rpc_client_register+0xc0>
   17440:	b377      	cbz	r7, 174a0 <rpc_client_register+0xc4>
   17442:	f1bc 0f00 	cmp.w	ip, #0
   17446:	d02d      	beq.n	174a4 <rpc_client_register+0xc8>
   17448:	f1be 0f00 	cmp.w	lr, #0
   1744c:	d020      	beq.n	17490 <rpc_client_register+0xb4>
   1744e:	f1b8 0f00 	cmp.w	r8, #0
   17452:	d029      	beq.n	174a8 <rpc_client_register+0xcc>
   17454:	f1b9 0f00 	cmp.w	r9, #0
   17458:	d00b      	beq.n	17472 <rpc_client_register+0x96>
   1745a:	2009      	movs	r0, #9
   1745c:	f1ba 0f00 	cmp.w	sl, #0
   17460:	d008      	beq.n	17474 <rpc_client_register+0x98>
   17462:	2004      	movs	r0, #4
   17464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17468:	2007      	movs	r0, #7
   1746a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1746e:	2007      	movs	r0, #7
   17470:	4770      	bx	lr
   17472:	2008      	movs	r0, #8
   17474:	0100      	lsls	r0, r0, #4
   17476:	5213      	strh	r3, [r2, r0]
   17478:	684b      	ldr	r3, [r1, #4]
   1747a:	4402      	add	r2, r0
   1747c:	6053      	str	r3, [r2, #4]
   1747e:	688b      	ldr	r3, [r1, #8]
   17480:	2000      	movs	r0, #0
   17482:	6093      	str	r3, [r2, #8]
   17484:	68cb      	ldr	r3, [r1, #12]
   17486:	60d3      	str	r3, [r2, #12]
   17488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1748c:	200e      	movs	r0, #14
   1748e:	4770      	bx	lr
   17490:	2006      	movs	r0, #6
   17492:	e7ef      	b.n	17474 <rpc_client_register+0x98>
   17494:	2001      	movs	r0, #1
   17496:	e7ed      	b.n	17474 <rpc_client_register+0x98>
   17498:	2002      	movs	r0, #2
   1749a:	e7eb      	b.n	17474 <rpc_client_register+0x98>
   1749c:	2003      	movs	r0, #3
   1749e:	e7e9      	b.n	17474 <rpc_client_register+0x98>
   174a0:	2004      	movs	r0, #4
   174a2:	e7e7      	b.n	17474 <rpc_client_register+0x98>
   174a4:	2005      	movs	r0, #5
   174a6:	e7e5      	b.n	17474 <rpc_client_register+0x98>
   174a8:	2007      	movs	r0, #7
   174aa:	e7e3      	b.n	17474 <rpc_client_register+0x98>
   174ac:	20020d10 	.word	0x20020d10

000174b0 <rpc_message_send>:
   174b0:	b150      	cbz	r0, 174c8 <rpc_message_send+0x18>
   174b2:	b159      	cbz	r1, 174cc <rpc_message_send+0x1c>
   174b4:	684b      	ldr	r3, [r1, #4]
   174b6:	8008      	strh	r0, [r1, #0]
   174b8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   174bc:	f043 0302 	orr.w	r3, r3, #2
   174c0:	604b      	str	r3, [r1, #4]
   174c2:	4608      	mov	r0, r1
   174c4:	f7fc bc6a 	b.w	13d9c <rpc_transport_send>
   174c8:	2007      	movs	r0, #7
   174ca:	4770      	bx	lr
   174cc:	200e      	movs	r0, #14
   174ce:	4770      	bx	lr

000174d0 <rpc_message_alloc>:
   174d0:	b342      	cbz	r2, 17524 <rpc_message_alloc+0x54>
   174d2:	b328      	cbz	r0, 17520 <rpc_message_alloc+0x50>
   174d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   174d6:	2300      	movs	r3, #0
   174d8:	4616      	mov	r6, r2
   174da:	460c      	mov	r4, r1
   174dc:	4605      	mov	r5, r0
   174de:	6013      	str	r3, [r2, #0]
   174e0:	b171      	cbz	r1, 17500 <rpc_message_alloc+0x30>
   174e2:	4608      	mov	r0, r1
   174e4:	f7fc fc5e 	bl	13da4 <rpc_transport_data_alloc>
   174e8:	4607      	mov	r7, r0
   174ea:	b1b8      	cbz	r0, 1751c <rpc_message_alloc+0x4c>
   174ec:	f7fc fc58 	bl	13da0 <rpc_transport_rpc_alloc>
   174f0:	4603      	mov	r3, r0
   174f2:	b180      	cbz	r0, 17516 <rpc_message_alloc+0x46>
   174f4:	2000      	movs	r0, #0
   174f6:	60dc      	str	r4, [r3, #12]
   174f8:	609f      	str	r7, [r3, #8]
   174fa:	801d      	strh	r5, [r3, #0]
   174fc:	6033      	str	r3, [r6, #0]
   174fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17500:	f7fc fc4e 	bl	13da0 <rpc_transport_rpc_alloc>
   17504:	4603      	mov	r3, r0
   17506:	b148      	cbz	r0, 1751c <rpc_message_alloc+0x4c>
   17508:	4627      	mov	r7, r4
   1750a:	60dc      	str	r4, [r3, #12]
   1750c:	609f      	str	r7, [r3, #8]
   1750e:	801d      	strh	r5, [r3, #0]
   17510:	2000      	movs	r0, #0
   17512:	6033      	str	r3, [r6, #0]
   17514:	e7f3      	b.n	174fe <rpc_message_alloc+0x2e>
   17516:	4638      	mov	r0, r7
   17518:	f7fc fc48 	bl	13dac <rpc_transport_data_free>
   1751c:	2004      	movs	r0, #4
   1751e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17520:	2007      	movs	r0, #7
   17522:	4770      	bx	lr
   17524:	200e      	movs	r0, #14
   17526:	4770      	bx	lr

00017528 <rpc_message_free>:
   17528:	b130      	cbz	r0, 17538 <rpc_message_free+0x10>
   1752a:	b139      	cbz	r1, 1753c <rpc_message_free+0x14>
   1752c:	b508      	push	{r3, lr}
   1752e:	4608      	mov	r0, r1
   17530:	f7fc fc3a 	bl	13da8 <rpc_transport_rpc_free>
   17534:	2000      	movs	r0, #0
   17536:	bd08      	pop	{r3, pc}
   17538:	2007      	movs	r0, #7
   1753a:	4770      	bx	lr
   1753c:	200e      	movs	r0, #14
   1753e:	4770      	bx	lr

00017540 <rpc_message_data_free>:
   17540:	b130      	cbz	r0, 17550 <rpc_message_data_free+0x10>
   17542:	b139      	cbz	r1, 17554 <rpc_message_data_free+0x14>
   17544:	b508      	push	{r3, lr}
   17546:	4608      	mov	r0, r1
   17548:	f7fc fc30 	bl	13dac <rpc_transport_data_free>
   1754c:	2000      	movs	r0, #0
   1754e:	bd08      	pop	{r3, pc}
   17550:	2007      	movs	r0, #7
   17552:	4770      	bx	lr
   17554:	200e      	movs	r0, #14
   17556:	4770      	bx	lr

00017558 <packet_free_cb>:
   17558:	b510      	push	{r4, lr}
   1755a:	4604      	mov	r4, r0
   1755c:	b118      	cbz	r0, 17566 <packet_free_cb+0xe>
   1755e:	6800      	ldr	r0, [r0, #0]
   17560:	b108      	cbz	r0, 17566 <packet_free_cb+0xe>
   17562:	f002 fefd 	bl	1a360 <rpc_gnss_client_data_free>
   17566:	68a0      	ldr	r0, [r4, #8]
   17568:	b118      	cbz	r0, 17572 <packet_free_cb+0x1a>
   1756a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1756e:	f003 bce5 	b.w	1af3c <nrf_free>
   17572:	bd10      	pop	{r4, pc}

00017574 <rpc_gnss_event_handler>:
   17574:	b5f0      	push	{r4, r5, r6, r7, lr}
   17576:	4b64      	ldr	r3, [pc, #400]	; (17708 <rpc_gnss_event_handler+0x194>)
   17578:	4606      	mov	r6, r0
   1757a:	6800      	ldr	r0, [r0, #0]
   1757c:	881b      	ldrh	r3, [r3, #0]
   1757e:	6802      	ldr	r2, [r0, #0]
   17580:	b085      	sub	sp, #20
   17582:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   17586:	460d      	mov	r5, r1
   17588:	d037      	beq.n	175fa <rpc_gnss_event_handler+0x86>
   1758a:	f505 433f 	add.w	r3, r5, #48896	; 0xbf00
   1758e:	33ff      	adds	r3, #255	; 0xff
   17590:	b29b      	uxth	r3, r3
   17592:	2b02      	cmp	r3, #2
   17594:	d811      	bhi.n	175ba <rpc_gnss_event_handler+0x46>
   17596:	4c5d      	ldr	r4, [pc, #372]	; (1770c <rpc_gnss_event_handler+0x198>)
   17598:	6823      	ldr	r3, [r4, #0]
   1759a:	075a      	lsls	r2, r3, #29
   1759c:	d410      	bmi.n	175c0 <rpc_gnss_event_handler+0x4c>
   1759e:	6823      	ldr	r3, [r4, #0]
   175a0:	079b      	lsls	r3, r3, #30
   175a2:	d503      	bpl.n	175ac <rpc_gnss_event_handler+0x38>
   175a4:	f244 0303 	movw	r3, #16387	; 0x4003
   175a8:	429d      	cmp	r5, r3
   175aa:	d009      	beq.n	175c0 <rpc_gnss_event_handler+0x4c>
   175ac:	6830      	ldr	r0, [r6, #0]
   175ae:	b120      	cbz	r0, 175ba <rpc_gnss_event_handler+0x46>
   175b0:	f002 fed6 	bl	1a360 <rpc_gnss_client_data_free>
   175b4:	2200      	movs	r2, #0
   175b6:	4b56      	ldr	r3, [pc, #344]	; (17710 <rpc_gnss_event_handler+0x19c>)
   175b8:	601a      	str	r2, [r3, #0]
   175ba:	2000      	movs	r0, #0
   175bc:	b005      	add	sp, #20
   175be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   175c0:	2002      	movs	r0, #2
   175c2:	f003 fcb1 	bl	1af28 <nrf_malloc>
   175c6:	4607      	mov	r7, r0
   175c8:	2800      	cmp	r0, #0
   175ca:	f000 8094 	beq.w	176f6 <rpc_gnss_event_handler+0x182>
   175ce:	2302      	movs	r3, #2
   175d0:	8005      	strh	r5, [r0, #0]
   175d2:	6831      	ldr	r1, [r6, #0]
   175d4:	6872      	ldr	r2, [r6, #4]
   175d6:	484f      	ldr	r0, [pc, #316]	; (17714 <rpc_gnss_event_handler+0x1a0>)
   175d8:	e88d 0086 	stmia.w	sp, {r1, r2, r7}
   175dc:	6800      	ldr	r0, [r0, #0]
   175de:	9303      	str	r3, [sp, #12]
   175e0:	6803      	ldr	r3, [r0, #0]
   175e2:	4669      	mov	r1, sp
   175e4:	685b      	ldr	r3, [r3, #4]
   175e6:	4798      	blx	r3
   175e8:	3001      	adds	r0, #1
   175ea:	d071      	beq.n	176d0 <rpc_gnss_event_handler+0x15c>
   175ec:	2000      	movs	r0, #0
   175ee:	6823      	ldr	r3, [r4, #0]
   175f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   175f4:	6023      	str	r3, [r4, #0]
   175f6:	b005      	add	sp, #20
   175f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   175fa:	4c44      	ldr	r4, [pc, #272]	; (1770c <rpc_gnss_event_handler+0x198>)
   175fc:	4f44      	ldr	r7, [pc, #272]	; (17710 <rpc_gnss_event_handler+0x19c>)
   175fe:	6823      	ldr	r3, [r4, #0]
   17600:	6038      	str	r0, [r7, #0]
   17602:	01d9      	lsls	r1, r3, #7
   17604:	d523      	bpl.n	1764e <rpc_gnss_event_handler+0xda>
   17606:	f242 1302 	movw	r3, #8450	; 0x2102
   1760a:	429d      	cmp	r5, r3
   1760c:	d11f      	bne.n	1764e <rpc_gnss_event_handler+0xda>
   1760e:	6843      	ldr	r3, [r0, #4]
   17610:	b91b      	cbnz	r3, 1761a <rpc_gnss_event_handler+0xa6>
   17612:	6823      	ldr	r3, [r4, #0]
   17614:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   17618:	6023      	str	r3, [r4, #0]
   1761a:	6823      	ldr	r3, [r4, #0]
   1761c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   17620:	6023      	str	r3, [r4, #0]
   17622:	6823      	ldr	r3, [r4, #0]
   17624:	025a      	lsls	r2, r3, #9
   17626:	d430      	bmi.n	1768a <rpc_gnss_event_handler+0x116>
   17628:	f242 0305 	movw	r3, #8197	; 0x2005
   1762c:	429d      	cmp	r5, r3
   1762e:	d12c      	bne.n	1768a <rpc_gnss_event_handler+0x116>
   17630:	6823      	ldr	r3, [r4, #0]
   17632:	0299      	lsls	r1, r3, #10
   17634:	d529      	bpl.n	1768a <rpc_gnss_event_handler+0x116>
   17636:	6843      	ldr	r3, [r0, #4]
   17638:	2b00      	cmp	r3, #0
   1763a:	d157      	bne.n	176ec <rpc_gnss_event_handler+0x178>
   1763c:	6823      	ldr	r3, [r4, #0]
   1763e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   17642:	6023      	str	r3, [r4, #0]
   17644:	6823      	ldr	r3, [r4, #0]
   17646:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1764a:	6023      	str	r3, [r4, #0]
   1764c:	e01d      	b.n	1768a <rpc_gnss_event_handler+0x116>
   1764e:	6823      	ldr	r3, [r4, #0]
   17650:	025b      	lsls	r3, r3, #9
   17652:	d50e      	bpl.n	17672 <rpc_gnss_event_handler+0xfe>
   17654:	f242 1303 	movw	r3, #8451	; 0x2103
   17658:	429d      	cmp	r5, r3
   1765a:	d10a      	bne.n	17672 <rpc_gnss_event_handler+0xfe>
   1765c:	6843      	ldr	r3, [r0, #4]
   1765e:	b91b      	cbnz	r3, 17668 <rpc_gnss_event_handler+0xf4>
   17660:	6823      	ldr	r3, [r4, #0]
   17662:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   17666:	6023      	str	r3, [r4, #0]
   17668:	6823      	ldr	r3, [r4, #0]
   1766a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1766e:	6023      	str	r3, [r4, #0]
   17670:	e00b      	b.n	1768a <rpc_gnss_event_handler+0x116>
   17672:	f242 0301 	movw	r3, #8193	; 0x2001
   17676:	429d      	cmp	r5, r3
   17678:	d10c      	bne.n	17694 <rpc_gnss_event_handler+0x120>
   1767a:	6843      	ldr	r3, [r0, #4]
   1767c:	b92b      	cbnz	r3, 1768a <rpc_gnss_event_handler+0x116>
   1767e:	6823      	ldr	r3, [r4, #0]
   17680:	0c1b      	lsrs	r3, r3, #16
   17682:	041b      	lsls	r3, r3, #16
   17684:	f043 0302 	orr.w	r3, r3, #2
   17688:	6023      	str	r3, [r4, #0]
   1768a:	f002 fe69 	bl	1a360 <rpc_gnss_client_data_free>
   1768e:	2300      	movs	r3, #0
   17690:	603b      	str	r3, [r7, #0]
   17692:	e77a      	b.n	1758a <rpc_gnss_event_handler+0x16>
   17694:	f242 0304 	movw	r3, #8196	; 0x2004
   17698:	429d      	cmp	r5, r3
   1769a:	d1c5      	bne.n	17628 <rpc_gnss_event_handler+0xb4>
   1769c:	6843      	ldr	r3, [r0, #4]
   1769e:	b993      	cbnz	r3, 176c6 <rpc_gnss_event_handler+0x152>
   176a0:	6823      	ldr	r3, [r4, #0]
   176a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   176a6:	6023      	str	r3, [r4, #0]
   176a8:	6823      	ldr	r3, [r4, #0]
   176aa:	b29b      	uxth	r3, r3
   176ac:	2b03      	cmp	r3, #3
   176ae:	6823      	ldr	r3, [r4, #0]
   176b0:	d016      	beq.n	176e0 <rpc_gnss_event_handler+0x16c>
   176b2:	b29b      	uxth	r3, r3
   176b4:	2b04      	cmp	r3, #4
   176b6:	d1d7      	bne.n	17668 <rpc_gnss_event_handler+0xf4>
   176b8:	6823      	ldr	r3, [r4, #0]
   176ba:	0c1b      	lsrs	r3, r3, #16
   176bc:	041b      	lsls	r3, r3, #16
   176be:	f043 0302 	orr.w	r3, r3, #2
   176c2:	6023      	str	r3, [r4, #0]
   176c4:	e7d0      	b.n	17668 <rpc_gnss_event_handler+0xf4>
   176c6:	6823      	ldr	r3, [r4, #0]
   176c8:	b29b      	uxth	r3, r3
   176ca:	2b03      	cmp	r3, #3
   176cc:	d1cc      	bne.n	17668 <rpc_gnss_event_handler+0xf4>
   176ce:	e7f3      	b.n	176b8 <rpc_gnss_event_handler+0x144>
   176d0:	4638      	mov	r0, r7
   176d2:	f003 fc33 	bl	1af3c <nrf_free>
   176d6:	6830      	ldr	r0, [r6, #0]
   176d8:	2800      	cmp	r0, #0
   176da:	f47f af69 	bne.w	175b0 <rpc_gnss_event_handler+0x3c>
   176de:	e76c      	b.n	175ba <rpc_gnss_event_handler+0x46>
   176e0:	0c1b      	lsrs	r3, r3, #16
   176e2:	041b      	lsls	r3, r3, #16
   176e4:	f043 0304 	orr.w	r3, r3, #4
   176e8:	6023      	str	r3, [r4, #0]
   176ea:	e7bd      	b.n	17668 <rpc_gnss_event_handler+0xf4>
   176ec:	6823      	ldr	r3, [r4, #0]
   176ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   176f2:	6023      	str	r3, [r4, #0]
   176f4:	e7c9      	b.n	1768a <rpc_gnss_event_handler+0x116>
   176f6:	6830      	ldr	r0, [r6, #0]
   176f8:	2800      	cmp	r0, #0
   176fa:	f43f af5e 	beq.w	175ba <rpc_gnss_event_handler+0x46>
   176fe:	f002 fe2f 	bl	1a360 <rpc_gnss_client_data_free>
   17702:	4b03      	ldr	r3, [pc, #12]	; (17710 <rpc_gnss_event_handler+0x19c>)
   17704:	601f      	str	r7, [r3, #0]
   17706:	e758      	b.n	175ba <rpc_gnss_event_handler+0x46>
   17708:	20022352 	.word	0x20022352
   1770c:	20020db0 	.word	0x20020db0
   17710:	20020db4 	.word	0x20020db4
   17714:	20020db8 	.word	0x20020db8

00017718 <gnss_interface_write>:
   17718:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1771c:	4a74      	ldr	r2, [pc, #464]	; (178f0 <gnss_interface_write+0x1d8>)
   1771e:	b09f      	sub	sp, #124	; 0x7c
   17720:	4290      	cmp	r0, r2
   17722:	9d26      	ldr	r5, [sp, #152]	; 0x98
   17724:	f040 80d7 	bne.w	178d6 <gnss_interface_write+0x1be>
   17728:	2900      	cmp	r1, #0
   1772a:	f000 80c6 	beq.w	178ba <gnss_interface_write+0x1a2>
   1772e:	2d00      	cmp	r5, #0
   17730:	f000 80c3 	beq.w	178ba <gnss_interface_write+0x1a2>
   17734:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   17736:	2a02      	cmp	r2, #2
   17738:	f040 80bf 	bne.w	178ba <gnss_interface_write+0x1a2>
   1773c:	4c6d      	ldr	r4, [pc, #436]	; (178f4 <gnss_interface_write+0x1dc>)
   1773e:	6822      	ldr	r2, [r4, #0]
   17740:	b292      	uxth	r2, r2
   17742:	2a02      	cmp	r2, #2
   17744:	d004      	beq.n	17750 <gnss_interface_write+0x38>
   17746:	6822      	ldr	r2, [r4, #0]
   17748:	b292      	uxth	r2, r2
   1774a:	2a04      	cmp	r2, #4
   1774c:	f040 80bd 	bne.w	178ca <gnss_interface_write+0x1b2>
   17750:	2b00      	cmp	r3, #0
   17752:	f040 80c6 	bne.w	178e2 <gnss_interface_write+0x1ca>
   17756:	6822      	ldr	r2, [r4, #0]
   17758:	0390      	lsls	r0, r2, #14
   1775a:	d512      	bpl.n	17782 <gnss_interface_write+0x6a>
   1775c:	6822      	ldr	r2, [r4, #0]
   1775e:	882b      	ldrh	r3, [r5, #0]
   17760:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   17764:	6022      	str	r2, [r4, #0]
   17766:	6822      	ldr	r2, [r4, #0]
   17768:	3b01      	subs	r3, #1
   1776a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   1776e:	6022      	str	r2, [r4, #0]
   17770:	2b07      	cmp	r3, #7
   17772:	f200 80a2 	bhi.w	178ba <gnss_interface_write+0x1a2>
   17776:	e8df f003 	tbb	[pc, r3]
   1777a:	7d82      	.short	0x7d82
   1777c:	646e7378 	.word	0x646e7378
   17780:	0869      	.short	0x0869
   17782:	2000      	movs	r0, #0
   17784:	b01f      	add	sp, #124	; 0x7c
   17786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1778a:	4608      	mov	r0, r1
   1778c:	a902      	add	r1, sp, #8
   1778e:	f002 fd9b 	bl	1a2c8 <rpc_gnss_serialize_integrity>
   17792:	2172      	movs	r1, #114	; 0x72
   17794:	4668      	mov	r0, sp
   17796:	f002 fdb1 	bl	1a2fc <rpc_gnss_client_request_alloc>
   1779a:	4605      	mov	r5, r0
   1779c:	9800      	ldr	r0, [sp, #0]
   1779e:	2d00      	cmp	r5, #0
   177a0:	d172      	bne.n	17888 <gnss_interface_write+0x170>
   177a2:	2800      	cmp	r0, #0
   177a4:	d077      	beq.n	17896 <gnss_interface_write+0x17e>
   177a6:	f241 0605 	movw	r6, #4101	; 0x1005
   177aa:	f04f 0c49 	mov.w	ip, #73	; 0x49
   177ae:	2272      	movs	r2, #114	; 0x72
   177b0:	f04f 0e76 	mov.w	lr, #118	; 0x76
   177b4:	f04f 0943 	mov.w	r9, #67	; 0x43
   177b8:	f04f 0854 	mov.w	r8, #84	; 0x54
   177bc:	4f4e      	ldr	r7, [pc, #312]	; (178f8 <gnss_interface_write+0x1e0>)
   177be:	a91e      	add	r1, sp, #120	; 0x78
   177c0:	883b      	ldrh	r3, [r7, #0]
   177c2:	f880 c00f 	strb.w	ip, [r0, #15]
   177c6:	3301      	adds	r3, #1
   177c8:	b29b      	uxth	r3, r3
   177ca:	ea46 4c03 	orr.w	ip, r6, r3, lsl #16
   177ce:	f841 cd74 	str.w	ip, [r1, #-116]!
   177d2:	7145      	strb	r5, [r0, #5]
   177d4:	7185      	strb	r5, [r0, #6]
   177d6:	71c5      	strb	r5, [r0, #7]
   177d8:	7205      	strb	r5, [r0, #8]
   177da:	7245      	strb	r5, [r0, #9]
   177dc:	7285      	strb	r5, [r0, #10]
   177de:	72c5      	strb	r5, [r0, #11]
   177e0:	7102      	strb	r2, [r0, #4]
   177e2:	f880 900c 	strb.w	r9, [r0, #12]
   177e6:	f880 800d 	strb.w	r8, [r0, #13]
   177ea:	f880 e00e 	strb.w	lr, [r0, #14]
   177ee:	6800      	ldr	r0, [r0, #0]
   177f0:	803b      	strh	r3, [r7, #0]
   177f2:	f006 ff2e 	bl	1e652 <memcpy>
   177f6:	4b41      	ldr	r3, [pc, #260]	; (178fc <gnss_interface_write+0x1e4>)
   177f8:	4631      	mov	r1, r6
   177fa:	9800      	ldr	r0, [sp, #0]
   177fc:	601d      	str	r5, [r3, #0]
   177fe:	f002 fd91 	bl	1a324 <rpc_gnss_client_request_send>
   17802:	2800      	cmp	r0, #0
   17804:	d14e      	bne.n	178a4 <gnss_interface_write+0x18c>
   17806:	6823      	ldr	r3, [r4, #0]
   17808:	0299      	lsls	r1, r3, #10
   1780a:	d50b      	bpl.n	17824 <gnss_interface_write+0x10c>
   1780c:	4e3c      	ldr	r6, [pc, #240]	; (17900 <gnss_interface_write+0x1e8>)
   1780e:	4d38      	ldr	r5, [pc, #224]	; (178f0 <gnss_interface_write+0x1d8>)
   17810:	e000      	b.n	17814 <gnss_interface_write+0xfc>
   17812:	b978      	cbnz	r0, 17834 <gnss_interface_write+0x11c>
   17814:	4631      	mov	r1, r6
   17816:	4628      	mov	r0, r5
   17818:	f7f9 fd9e 	bl	11358 <bsd_os_timedwait>
   1781c:	6823      	ldr	r3, [r4, #0]
   1781e:	029a      	lsls	r2, r3, #10
   17820:	d4f7      	bmi.n	17812 <gnss_interface_write+0xfa>
   17822:	b938      	cbnz	r0, 17834 <gnss_interface_write+0x11c>
   17824:	6823      	ldr	r3, [r4, #0]
   17826:	039b      	lsls	r3, r3, #14
   17828:	d4ab      	bmi.n	17782 <gnss_interface_write+0x6a>
   1782a:	2005      	movs	r0, #5
   1782c:	6823      	ldr	r3, [r4, #0]
   1782e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   17832:	6023      	str	r3, [r4, #0]
   17834:	f7f9 fe48 	bl	114c8 <bsd_os_errno_set>
   17838:	f04f 30ff 	mov.w	r0, #4294967295
   1783c:	b01f      	add	sp, #124	; 0x7c
   1783e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   17842:	4608      	mov	r0, r1
   17844:	a902      	add	r1, sp, #8
   17846:	f002 fcf7 	bl	1a238 <rpc_gnss_serialize_time_and_sv_tow>
   1784a:	e7a2      	b.n	17792 <gnss_interface_write+0x7a>
   1784c:	4608      	mov	r0, r1
   1784e:	a902      	add	r1, sp, #8
   17850:	f002 fd1a 	bl	1a288 <rpc_gnss_serialize_location>
   17854:	e79d      	b.n	17792 <gnss_interface_write+0x7a>
   17856:	4608      	mov	r0, r1
   17858:	a902      	add	r1, sp, #8
   1785a:	f002 fcd3 	bl	1a204 <rpc_gnss_serialize_nequick>
   1785e:	e798      	b.n	17792 <gnss_interface_write+0x7a>
   17860:	4608      	mov	r0, r1
   17862:	a902      	add	r1, sp, #8
   17864:	f002 fcaa 	bl	1a1bc <rpc_gnss_serialize_klob>
   17868:	e793      	b.n	17792 <gnss_interface_write+0x7a>
   1786a:	4608      	mov	r0, r1
   1786c:	a902      	add	r1, sp, #8
   1786e:	f002 fc73 	bl	1a158 <rpc_gnss_serialize_alm>
   17872:	e78e      	b.n	17792 <gnss_interface_write+0x7a>
   17874:	4608      	mov	r0, r1
   17876:	a902      	add	r1, sp, #8
   17878:	f002 fc1c 	bl	1a0b4 <rpc_gnss_serialize_ephe>
   1787c:	e789      	b.n	17792 <gnss_interface_write+0x7a>
   1787e:	4608      	mov	r0, r1
   17880:	a902      	add	r1, sp, #8
   17882:	f002 fbf5 	bl	1a070 <rpc_gnss_serialize_utc>
   17886:	e784      	b.n	17792 <gnss_interface_write+0x7a>
   17888:	b128      	cbz	r0, 17896 <gnss_interface_write+0x17e>
   1788a:	6803      	ldr	r3, [r0, #0]
   1788c:	b11b      	cbz	r3, 17896 <gnss_interface_write+0x17e>
   1788e:	4618      	mov	r0, r3
   17890:	f002 fd66 	bl	1a360 <rpc_gnss_client_data_free>
   17894:	9800      	ldr	r0, [sp, #0]
   17896:	f002 fd5b 	bl	1a350 <rpc_gnss_client_message_free>
   1789a:	2023      	movs	r0, #35	; 0x23
   1789c:	f7f9 fe14 	bl	114c8 <bsd_os_errno_set>
   178a0:	f04f 30ff 	mov.w	r0, #4294967295
   178a4:	6823      	ldr	r3, [r4, #0]
   178a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   178aa:	6023      	str	r3, [r4, #0]
   178ac:	6823      	ldr	r3, [r4, #0]
   178ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   178b2:	6023      	str	r3, [r4, #0]
   178b4:	b01f      	add	sp, #124	; 0x7c
   178b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   178ba:	2016      	movs	r0, #22
   178bc:	f7f9 fe04 	bl	114c8 <bsd_os_errno_set>
   178c0:	f04f 30ff 	mov.w	r0, #4294967295
   178c4:	b01f      	add	sp, #124	; 0x7c
   178c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   178ca:	2039      	movs	r0, #57	; 0x39
   178cc:	f7f9 fdfc 	bl	114c8 <bsd_os_errno_set>
   178d0:	f04f 30ff 	mov.w	r0, #4294967295
   178d4:	e756      	b.n	17784 <gnss_interface_write+0x6c>
   178d6:	2009      	movs	r0, #9
   178d8:	f7f9 fdf6 	bl	114c8 <bsd_os_errno_set>
   178dc:	f04f 30ff 	mov.w	r0, #4294967295
   178e0:	e750      	b.n	17784 <gnss_interface_write+0x6c>
   178e2:	202d      	movs	r0, #45	; 0x2d
   178e4:	f7f9 fdf0 	bl	114c8 <bsd_os_errno_set>
   178e8:	f04f 30ff 	mov.w	r0, #4294967295
   178ec:	e74a      	b.n	17784 <gnss_interface_write+0x6c>
   178ee:	bf00      	nop
   178f0:	49765443 	.word	0x49765443
   178f4:	20020db0 	.word	0x20020db0
   178f8:	20022352 	.word	0x20022352
   178fc:	20020db4 	.word	0x20020db4
   17900:	20020064 	.word	0x20020064

00017904 <gnss_interface_read>:
   17904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17908:	4c55      	ldr	r4, [pc, #340]	; (17a60 <gnss_interface_read+0x15c>)
   1790a:	b0b7      	sub	sp, #220	; 0xdc
   1790c:	42a0      	cmp	r0, r4
   1790e:	f040 81fa 	bne.w	17d06 <gnss_interface_read+0x402>
   17912:	460e      	mov	r6, r1
   17914:	2900      	cmp	r1, #0
   17916:	f000 81f0 	beq.w	17cfa <gnss_interface_read+0x3f6>
   1791a:	2ad7      	cmp	r2, #215	; 0xd7
   1791c:	f240 81ed 	bls.w	17cfa <gnss_interface_read+0x3f6>
   17920:	4d50      	ldr	r5, [pc, #320]	; (17a64 <gnss_interface_read+0x160>)
   17922:	469a      	mov	sl, r3
   17924:	682b      	ldr	r3, [r5, #0]
   17926:	b29b      	uxth	r3, r3
   17928:	2b04      	cmp	r3, #4
   1792a:	d004      	beq.n	17936 <gnss_interface_read+0x32>
   1792c:	682b      	ldr	r3, [r5, #0]
   1792e:	b29b      	uxth	r3, r3
   17930:	2b02      	cmp	r3, #2
   17932:	f040 81dc 	bne.w	17cee <gnss_interface_read+0x3ea>
   17936:	f1ba 0f00 	cmp.w	sl, #0
   1793a:	d178      	bne.n	17a2e <gnss_interface_read+0x12a>
   1793c:	2102      	movs	r1, #2
   1793e:	20b6      	movs	r0, #182	; 0xb6
   17940:	2400      	movs	r4, #0
   17942:	682b      	ldr	r3, [r5, #0]
   17944:	f10d 020e 	add.w	r2, sp, #14
   17948:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1794c:	602b      	str	r3, [r5, #0]
   1794e:	ab08      	add	r3, sp, #32
   17950:	9304      	str	r3, [sp, #16]
   17952:	f8df b118 	ldr.w	fp, [pc, #280]	; 17a6c <gnss_interface_read+0x168>
   17956:	ea0a 0301 	and.w	r3, sl, r1
   1795a:	4f43      	ldr	r7, [pc, #268]	; (17a68 <gnss_interface_read+0x164>)
   1795c:	f8df 9110 	ldr.w	r9, [pc, #272]	; 17a70 <gnss_interface_read+0x16c>
   17960:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 17a60 <gnss_interface_read+0x15c>
   17964:	9005      	str	r0, [sp, #20]
   17966:	9107      	str	r1, [sp, #28]
   17968:	9206      	str	r2, [sp, #24]
   1796a:	9301      	str	r3, [sp, #4]
   1796c:	f8db 0000 	ldr.w	r0, [fp]
   17970:	4652      	mov	r2, sl
   17972:	6803      	ldr	r3, [r0, #0]
   17974:	a904      	add	r1, sp, #16
   17976:	689b      	ldr	r3, [r3, #8]
   17978:	4798      	blx	r3
   1797a:	2800      	cmp	r0, #0
   1797c:	da2a      	bge.n	179d4 <gnss_interface_read+0xd0>
   1797e:	9b01      	ldr	r3, [sp, #4]
   17980:	b15b      	cbz	r3, 1799a <gnss_interface_read+0x96>
   17982:	1c42      	adds	r2, r0, #1
   17984:	4603      	mov	r3, r0
   17986:	d125      	bne.n	179d4 <gnss_interface_read+0xd0>
   17988:	b9dc      	cbnz	r4, 179c2 <gnss_interface_read+0xbe>
   1798a:	2023      	movs	r0, #35	; 0x23
   1798c:	461c      	mov	r4, r3
   1798e:	f7f9 fd9b 	bl	114c8 <bsd_os_errno_set>
   17992:	4620      	mov	r0, r4
   17994:	b037      	add	sp, #220	; 0xdc
   17996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1799a:	682a      	ldr	r2, [r5, #0]
   1799c:	783b      	ldrb	r3, [r7, #0]
   1799e:	03d1      	lsls	r1, r2, #15
   179a0:	d40c      	bmi.n	179bc <gnss_interface_read+0xb8>
   179a2:	b95c      	cbnz	r4, 179bc <gnss_interface_read+0xb8>
   179a4:	b163      	cbz	r3, 179c0 <gnss_interface_read+0xbc>
   179a6:	4649      	mov	r1, r9
   179a8:	4640      	mov	r0, r8
   179aa:	f7f9 fcd5 	bl	11358 <bsd_os_timedwait>
   179ae:	682b      	ldr	r3, [r5, #0]
   179b0:	03db      	lsls	r3, r3, #15
   179b2:	d437      	bmi.n	17a24 <gnss_interface_read+0x120>
   179b4:	783b      	ldrb	r3, [r7, #0]
   179b6:	2800      	cmp	r0, #0
   179b8:	d0f4      	beq.n	179a4 <gnss_interface_read+0xa0>
   179ba:	4604      	mov	r4, r0
   179bc:	2b00      	cmp	r3, #0
   179be:	d1d5      	bne.n	1796c <gnss_interface_read+0x68>
   179c0:	2470      	movs	r4, #112	; 0x70
   179c2:	4620      	mov	r0, r4
   179c4:	f04f 34ff 	mov.w	r4, #4294967295
   179c8:	f7f9 fd7e 	bl	114c8 <bsd_os_errno_set>
   179cc:	4620      	mov	r0, r4
   179ce:	b037      	add	sp, #220	; 0xdc
   179d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179d4:	f244 0202 	movw	r2, #16386	; 0x4002
   179d8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   179dc:	4293      	cmp	r3, r2
   179de:	d02f      	beq.n	17a40 <gnss_interface_read+0x13c>
   179e0:	f244 0201 	movw	r2, #16385	; 0x4001
   179e4:	4293      	cmp	r3, r2
   179e6:	d045      	beq.n	17a74 <gnss_interface_read+0x170>
   179e8:	f244 0203 	movw	r2, #16387	; 0x4003
   179ec:	4293      	cmp	r3, r2
   179ee:	f040 8184 	bne.w	17cfa <gnss_interface_read+0x3f6>
   179f2:	2203      	movs	r2, #3
   179f4:	2414      	movs	r4, #20
   179f6:	9b08      	ldr	r3, [sp, #32]
   179f8:	7032      	strb	r2, [r6, #0]
   179fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
   179fc:	60b3      	str	r3, [r6, #8]
   179fe:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   17a02:	e9c6 2303 	strd	r2, r3, [r6, #12]
   17a06:	f8db 0000 	ldr.w	r0, [fp]
   17a0a:	6803      	ldr	r3, [r0, #0]
   17a0c:	68db      	ldr	r3, [r3, #12]
   17a0e:	4798      	blx	r3
   17a10:	2800      	cmp	r0, #0
   17a12:	ddbe      	ble.n	17992 <gnss_interface_read+0x8e>
   17a14:	4620      	mov	r0, r4
   17a16:	682b      	ldr	r3, [r5, #0]
   17a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   17a1c:	602b      	str	r3, [r5, #0]
   17a1e:	b037      	add	sp, #220	; 0xdc
   17a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a24:	783b      	ldrb	r3, [r7, #0]
   17a26:	4604      	mov	r4, r0
   17a28:	2b00      	cmp	r3, #0
   17a2a:	d19f      	bne.n	1796c <gnss_interface_read+0x68>
   17a2c:	e7c8      	b.n	179c0 <gnss_interface_read+0xbc>
   17a2e:	f01a 0f2a 	tst.w	sl, #42	; 0x2a
   17a32:	d183      	bne.n	1793c <gnss_interface_read+0x38>
   17a34:	202d      	movs	r0, #45	; 0x2d
   17a36:	f7f9 fd47 	bl	114c8 <bsd_os_errno_set>
   17a3a:	f04f 34ff 	mov.w	r4, #4294967295
   17a3e:	e7a8      	b.n	17992 <gnss_interface_read+0x8e>
   17a40:	a808      	add	r0, sp, #32
   17a42:	f006 fdd4 	bl	1e5ee <strlen>
   17a46:	2302      	movs	r3, #2
   17a48:	1c44      	adds	r4, r0, #1
   17a4a:	b2a4      	uxth	r4, r4
   17a4c:	f806 3b08 	strb.w	r3, [r6], #8
   17a50:	4622      	mov	r2, r4
   17a52:	a908      	add	r1, sp, #32
   17a54:	4630      	mov	r0, r6
   17a56:	f006 fdfc 	bl	1e652 <memcpy>
   17a5a:	3408      	adds	r4, #8
   17a5c:	e7d3      	b.n	17a06 <gnss_interface_read+0x102>
   17a5e:	bf00      	nop
   17a60:	49765443 	.word	0x49765443
   17a64:	20020db0 	.word	0x20020db0
   17a68:	20024322 	.word	0x20024322
   17a6c:	20020db8 	.word	0x20020db8
   17a70:	20020064 	.word	0x20020064
   17a74:	2401      	movs	r4, #1
   17a76:	a809      	add	r0, sp, #36	; 0x24
   17a78:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   17a7a:	e9c6 0102 	strd	r0, r1, [r6, #8]
   17a7e:	e9c6 2304 	strd	r2, r3, [r6, #16]
   17a82:	990d      	ldr	r1, [sp, #52]	; 0x34
   17a84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17a86:	7034      	strb	r4, [r6, #0]
   17a88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   17a8a:	61b1      	str	r1, [r6, #24]
   17a8c:	9910      	ldr	r1, [sp, #64]	; 0x40
   17a8e:	61f2      	str	r2, [r6, #28]
   17a90:	6233      	str	r3, [r6, #32]
   17a92:	f89d 205d 	ldrb.w	r2, [sp, #93]	; 0x5d
   17a96:	f8dd 304d 	ldr.w	r3, [sp, #77]	; 0x4d
   17a9a:	6271      	str	r1, [r6, #36]	; 0x24
   17a9c:	f8dd 1051 	ldr.w	r1, [sp, #81]	; 0x51
   17aa0:	f886 2044 	strb.w	r2, [r6, #68]	; 0x44
   17aa4:	f8dd 2055 	ldr.w	r2, [sp, #85]	; 0x55
   17aa8:	6373      	str	r3, [r6, #52]	; 0x34
   17aaa:	f8dd 3059 	ldr.w	r3, [sp, #89]	; 0x59
   17aae:	63b1      	str	r1, [r6, #56]	; 0x38
   17ab0:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   17ab4:	63f2      	str	r2, [r6, #60]	; 0x3c
   17ab6:	6433      	str	r3, [r6, #64]	; 0x40
   17ab8:	f8dd 2046 	ldr.w	r2, [sp, #70]	; 0x46
   17abc:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   17ac0:	8531      	strh	r1, [r6, #40]	; 0x28
   17ac2:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
   17ac6:	f8c6 202a 	str.w	r2, [r6, #42]	; 0x2a
   17aca:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   17ace:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
   17ad2:	9b18      	ldr	r3, [sp, #96]	; 0x60
   17ad4:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
   17ad8:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   17adc:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
   17ae0:	f3c3 210f 	ubfx	r1, r3, #8, #16
   17ae4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   17ae6:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   17aea:	8630      	strh	r0, [r6, #48]	; 0x30
   17aec:	f8a6 104a 	strh.w	r1, [r6, #74]	; 0x4a
   17af0:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
   17af4:	f3c3 230f 	ubfx	r3, r3, #8, #16
   17af8:	f8a6 2056 	strh.w	r2, [r6, #86]	; 0x56
   17afc:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   17b00:	f8a6 3062 	strh.w	r3, [r6, #98]	; 0x62
   17b04:	f8dd 3063 	ldr.w	r3, [sp, #99]	; 0x63
   17b08:	f8a6 1046 	strh.w	r1, [r6, #70]	; 0x46
   17b0c:	f886 2048 	strb.w	r2, [r6, #72]	; 0x48
   17b10:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   17b14:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   17b18:	64f3      	str	r3, [r6, #76]	; 0x4c
   17b1a:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
   17b1e:	f886 1050 	strb.w	r1, [r6, #80]	; 0x50
   17b22:	f8a6 2052 	strh.w	r2, [r6, #82]	; 0x52
   17b26:	f886 3054 	strb.w	r3, [r6, #84]	; 0x54
   17b2a:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
   17b2e:	f8dd 106d 	ldr.w	r1, [sp, #109]	; 0x6d
   17b32:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
   17b36:	65b1      	str	r1, [r6, #88]	; 0x58
   17b38:	f886 205c 	strb.w	r2, [r6, #92]	; 0x5c
   17b3c:	f89d 1074 	ldrb.w	r1, [sp, #116]	; 0x74
   17b40:	f8dd 2077 	ldr.w	r2, [sp, #119]	; 0x77
   17b44:	f8a6 305e 	strh.w	r3, [r6, #94]	; 0x5e
   17b48:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
   17b4c:	f886 1060 	strb.w	r1, [r6, #96]	; 0x60
   17b50:	6672      	str	r2, [r6, #100]	; 0x64
   17b52:	f886 3068 	strb.w	r3, [r6, #104]	; 0x68
   17b56:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
   17b5a:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
   17b5e:	9a22      	ldr	r2, [sp, #136]	; 0x88
   17b60:	f89d 0094 	ldrb.w	r0, [sp, #148]	; 0x94
   17b64:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   17b68:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
   17b6c:	f3c2 220f 	ubfx	r2, r2, #8, #16
   17b70:	f8a6 106e 	strh.w	r1, [r6, #110]	; 0x6e
   17b74:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
   17b78:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   17b7c:	f8a6 207a 	strh.w	r2, [r6, #122]	; 0x7a
   17b80:	f89d 207e 	ldrb.w	r2, [sp, #126]	; 0x7e
   17b84:	f8a6 3086 	strh.w	r3, [r6, #134]	; 0x86
   17b88:	f8dd 3081 	ldr.w	r3, [sp, #129]	; 0x81
   17b8c:	f8a6 106a 	strh.w	r1, [r6, #106]	; 0x6a
   17b90:	f886 206c 	strb.w	r2, [r6, #108]	; 0x6c
   17b94:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
   17b98:	f89d 1085 	ldrb.w	r1, [sp, #133]	; 0x85
   17b9c:	6733      	str	r3, [r6, #112]	; 0x70
   17b9e:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
   17ba2:	f886 1074 	strb.w	r1, [r6, #116]	; 0x74
   17ba6:	f8a6 2076 	strh.w	r2, [r6, #118]	; 0x76
   17baa:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
   17bae:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
   17bb2:	f8dd 108b 	ldr.w	r1, [sp, #139]	; 0x8b
   17bb6:	f89d 208f 	ldrb.w	r2, [sp, #143]	; 0x8f
   17bba:	67f1      	str	r1, [r6, #124]	; 0x7c
   17bbc:	f886 2080 	strb.w	r2, [r6, #128]	; 0x80
   17bc0:	f89d 1092 	ldrb.w	r1, [sp, #146]	; 0x92
   17bc4:	f8dd 2095 	ldr.w	r2, [sp, #149]	; 0x95
   17bc8:	f8a6 3082 	strh.w	r3, [r6, #130]	; 0x82
   17bcc:	f89d 3099 	ldrb.w	r3, [sp, #153]	; 0x99
   17bd0:	f886 1084 	strb.w	r1, [r6, #132]	; 0x84
   17bd4:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
   17bd8:	f886 308c 	strb.w	r3, [r6, #140]	; 0x8c
   17bdc:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
   17be0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   17be2:	f89d 40a8 	ldrb.w	r4, [sp, #168]	; 0xa8
   17be6:	f89d 20a7 	ldrb.w	r2, [sp, #167]	; 0xa7
   17bea:	f3c3 210f 	ubfx	r1, r3, #8, #16
   17bee:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   17bf0:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   17bf4:	f8a6 1092 	strh.w	r1, [r6, #146]	; 0x92
   17bf8:	f89d 109c 	ldrb.w	r1, [sp, #156]	; 0x9c
   17bfc:	f8a6 209e 	strh.w	r2, [r6, #158]	; 0x9e
   17c00:	f3c3 230f 	ubfx	r3, r3, #8, #16
   17c04:	f8dd 209f 	ldr.w	r2, [sp, #159]	; 0x9f
   17c08:	f8a6 008e 	strh.w	r0, [r6, #142]	; 0x8e
   17c0c:	f8a6 30aa 	strh.w	r3, [r6, #170]	; 0xaa
   17c10:	f886 1090 	strb.w	r1, [r6, #144]	; 0x90
   17c14:	f89d 30a3 	ldrb.w	r3, [sp, #163]	; 0xa3
   17c18:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	; 0xa4
   17c1c:	f8c6 2094 	str.w	r2, [r6, #148]	; 0x94
   17c20:	f89d 20a6 	ldrb.w	r2, [sp, #166]	; 0xa6
   17c24:	f886 3098 	strb.w	r3, [r6, #152]	; 0x98
   17c28:	f8dd 30a9 	ldr.w	r3, [sp, #169]	; 0xa9
   17c2c:	f8a6 109a 	strh.w	r1, [r6, #154]	; 0x9a
   17c30:	f886 209c 	strb.w	r2, [r6, #156]	; 0x9c
   17c34:	f8bd 20ae 	ldrh.w	r2, [sp, #174]	; 0xae
   17c38:	f89d 10ad 	ldrb.w	r1, [sp, #173]	; 0xad
   17c3c:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
   17c40:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
   17c44:	f886 10a4 	strb.w	r1, [r6, #164]	; 0xa4
   17c48:	f8a6 20a6 	strh.w	r2, [r6, #166]	; 0xa6
   17c4c:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
   17c50:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
   17c54:	f8dd 10b3 	ldr.w	r1, [sp, #179]	; 0xb3
   17c58:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
   17c5c:	f8c6 10ac 	str.w	r1, [r6, #172]	; 0xac
   17c60:	f886 20b0 	strb.w	r2, [r6, #176]	; 0xb0
   17c64:	f8a6 30b2 	strh.w	r3, [r6, #178]	; 0xb2
   17c68:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
   17c6c:	f89d 10bb 	ldrb.w	r1, [sp, #187]	; 0xbb
   17c70:	f89d 00d0 	ldrb.w	r0, [sp, #208]	; 0xd0
   17c74:	9a31      	ldr	r2, [sp, #196]	; 0xc4
   17c76:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   17c7a:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
   17c7e:	f89d 40ba 	ldrb.w	r4, [sp, #186]	; 0xba
   17c82:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   17c86:	f3c2 220f 	ubfx	r2, r2, #8, #16
   17c8a:	f8a6 10b6 	strh.w	r1, [r6, #182]	; 0xb6
   17c8e:	f8a6 30ce 	strh.w	r3, [r6, #206]	; 0xce
   17c92:	f886 40b4 	strb.w	r4, [r6, #180]	; 0xb4
   17c96:	f8a6 20c2 	strh.w	r2, [r6, #194]	; 0xc2
   17c9a:	f8bd 20c2 	ldrh.w	r2, [sp, #194]	; 0xc2
   17c9e:	f89d 10c1 	ldrb.w	r1, [sp, #193]	; 0xc1
   17ca2:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
   17ca6:	f8dd 00bd 	ldr.w	r0, [sp, #189]	; 0xbd
   17caa:	f886 10bc 	strb.w	r1, [r6, #188]	; 0xbc
   17cae:	f8a6 20be 	strh.w	r2, [r6, #190]	; 0xbe
   17cb2:	f8c6 00b8 	str.w	r0, [r6, #184]	; 0xb8
   17cb6:	f886 30c0 	strb.w	r3, [r6, #192]	; 0xc0
   17cba:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
   17cbe:	f8dd 10c7 	ldr.w	r1, [sp, #199]	; 0xc7
   17cc2:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
   17cc6:	f8c6 10c4 	str.w	r1, [r6, #196]	; 0xc4
   17cca:	f886 20c8 	strb.w	r2, [r6, #200]	; 0xc8
   17cce:	f89d 10ce 	ldrb.w	r1, [sp, #206]	; 0xce
   17cd2:	f8dd 20d1 	ldr.w	r2, [sp, #209]	; 0xd1
   17cd6:	f8a6 30ca 	strh.w	r3, [r6, #202]	; 0xca
   17cda:	f89d 30d5 	ldrb.w	r3, [sp, #213]	; 0xd5
   17cde:	f886 10cc 	strb.w	r1, [r6, #204]	; 0xcc
   17ce2:	f8c6 20d0 	str.w	r2, [r6, #208]	; 0xd0
   17ce6:	f886 30d4 	strb.w	r3, [r6, #212]	; 0xd4
   17cea:	24d8      	movs	r4, #216	; 0xd8
   17cec:	e68b      	b.n	17a06 <gnss_interface_read+0x102>
   17cee:	2039      	movs	r0, #57	; 0x39
   17cf0:	f7f9 fbea 	bl	114c8 <bsd_os_errno_set>
   17cf4:	f04f 34ff 	mov.w	r4, #4294967295
   17cf8:	e64b      	b.n	17992 <gnss_interface_read+0x8e>
   17cfa:	2016      	movs	r0, #22
   17cfc:	f7f9 fbe4 	bl	114c8 <bsd_os_errno_set>
   17d00:	f04f 34ff 	mov.w	r4, #4294967295
   17d04:	e645      	b.n	17992 <gnss_interface_read+0x8e>
   17d06:	2009      	movs	r0, #9
   17d08:	f7f9 fbde 	bl	114c8 <bsd_os_errno_set>
   17d0c:	f04f 34ff 	mov.w	r4, #4294967295
   17d10:	e63f      	b.n	17992 <gnss_interface_read+0x8e>
   17d12:	bf00      	nop

00017d14 <gnss_interface_setopt>:
   17d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17d18:	4db3      	ldr	r5, [pc, #716]	; (17fe8 <gnss_interface_setopt+0x2d4>)
   17d1a:	b086      	sub	sp, #24
   17d1c:	682c      	ldr	r4, [r5, #0]
   17d1e:	b2a4      	uxth	r4, r4
   17d20:	2c02      	cmp	r4, #2
   17d22:	d00d      	beq.n	17d40 <gnss_interface_setopt+0x2c>
   17d24:	2a08      	cmp	r2, #8
   17d26:	d00b      	beq.n	17d40 <gnss_interface_setopt+0x2c>
   17d28:	f1a2 040a 	sub.w	r4, r2, #10
   17d2c:	2c01      	cmp	r4, #1
   17d2e:	d907      	bls.n	17d40 <gnss_interface_setopt+0x2c>
   17d30:	200e      	movs	r0, #14
   17d32:	f7f9 fbc9 	bl	114c8 <bsd_os_errno_set>
   17d36:	f04f 30ff 	mov.w	r0, #4294967295
   17d3a:	b006      	add	sp, #24
   17d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17d40:	682c      	ldr	r4, [r5, #0]
   17d42:	0264      	lsls	r4, r4, #9
   17d44:	f100 8149 	bmi.w	17fda <gnss_interface_setopt+0x2c6>
   17d48:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   17d4c:	f040 8139 	bne.w	17fc2 <gnss_interface_setopt+0x2ae>
   17d50:	49a6      	ldr	r1, [pc, #664]	; (17fec <gnss_interface_setopt+0x2d8>)
   17d52:	4288      	cmp	r0, r1
   17d54:	f040 813b 	bne.w	17fce <gnss_interface_setopt+0x2ba>
   17d58:	f1a2 010a 	sub.w	r1, r2, #10
   17d5c:	2901      	cmp	r1, #1
   17d5e:	d902      	bls.n	17d66 <gnss_interface_setopt+0x52>
   17d60:	2b00      	cmp	r3, #0
   17d62:	f000 8112 	beq.w	17f8a <gnss_interface_setopt+0x276>
   17d66:	3a01      	subs	r2, #1
   17d68:	2a0a      	cmp	r2, #10
   17d6a:	f200 810e 	bhi.w	17f8a <gnss_interface_setopt+0x276>
   17d6e:	e8df f012 	tbh	[pc, r2, lsl #1]
   17d72:	007f      	.short	0x007f
   17d74:	0098008c 	.word	0x0098008c
   17d78:	00ae00a2 	.word	0x00ae00a2
   17d7c:	00c500b9 	.word	0x00c500b9
   17d80:	00f300dd 	.word	0x00f300dd
   17d84:	000b00ff 	.word	0x000b00ff
   17d88:	682b      	ldr	r3, [r5, #0]
   17d8a:	b29b      	uxth	r3, r3
   17d8c:	2b04      	cmp	r3, #4
   17d8e:	d1cf      	bne.n	17d30 <gnss_interface_setopt+0x1c>
   17d90:	2203      	movs	r2, #3
   17d92:	f241 0604 	movw	r6, #4100	; 0x1004
   17d96:	2300      	movs	r3, #0
   17d98:	4637      	mov	r7, r6
   17d9a:	f88d 2008 	strb.w	r2, [sp, #8]
   17d9e:	f88d 3009 	strb.w	r3, [sp, #9]
   17da2:	f88d 300a 	strb.w	r3, [sp, #10]
   17da6:	f88d 300b 	strb.w	r3, [sp, #11]
   17daa:	f88d 300c 	strb.w	r3, [sp, #12]
   17dae:	682b      	ldr	r3, [r5, #0]
   17db0:	2112      	movs	r1, #18
   17db2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   17db6:	4668      	mov	r0, sp
   17db8:	602b      	str	r3, [r5, #0]
   17dba:	f002 fa9f 	bl	1a2fc <rpc_gnss_client_request_alloc>
   17dbe:	4604      	mov	r4, r0
   17dc0:	9800      	ldr	r0, [sp, #0]
   17dc2:	2c00      	cmp	r4, #0
   17dc4:	f040 80e7 	bne.w	17f96 <gnss_interface_setopt+0x282>
   17dc8:	2800      	cmp	r0, #0
   17dca:	f000 80eb 	beq.w	17fa4 <gnss_interface_setopt+0x290>
   17dce:	2212      	movs	r2, #18
   17dd0:	f04f 0876 	mov.w	r8, #118	; 0x76
   17dd4:	f04f 0e49 	mov.w	lr, #73	; 0x49
   17dd8:	f04f 0a43 	mov.w	sl, #67	; 0x43
   17ddc:	f04f 0954 	mov.w	r9, #84	; 0x54
   17de0:	f8df c210 	ldr.w	ip, [pc, #528]	; 17ff4 <gnss_interface_setopt+0x2e0>
   17de4:	a906      	add	r1, sp, #24
   17de6:	f8bc 3000 	ldrh.w	r3, [ip]
   17dea:	f880 800e 	strb.w	r8, [r0, #14]
   17dee:	3301      	adds	r3, #1
   17df0:	b29b      	uxth	r3, r3
   17df2:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
   17df6:	f841 6d14 	str.w	r6, [r1, #-20]!
   17dfa:	7144      	strb	r4, [r0, #5]
   17dfc:	7184      	strb	r4, [r0, #6]
   17dfe:	71c4      	strb	r4, [r0, #7]
   17e00:	7204      	strb	r4, [r0, #8]
   17e02:	7244      	strb	r4, [r0, #9]
   17e04:	7284      	strb	r4, [r0, #10]
   17e06:	72c4      	strb	r4, [r0, #11]
   17e08:	7102      	strb	r2, [r0, #4]
   17e0a:	f880 a00c 	strb.w	sl, [r0, #12]
   17e0e:	f880 900d 	strb.w	r9, [r0, #13]
   17e12:	f880 e00f 	strb.w	lr, [r0, #15]
   17e16:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 17ff8 <gnss_interface_setopt+0x2e4>
   17e1a:	6800      	ldr	r0, [r0, #0]
   17e1c:	f8ac 3000 	strh.w	r3, [ip]
   17e20:	f006 fc17 	bl	1e652 <memcpy>
   17e24:	4639      	mov	r1, r7
   17e26:	9800      	ldr	r0, [sp, #0]
   17e28:	f8c8 4000 	str.w	r4, [r8]
   17e2c:	f002 fa7a 	bl	1a324 <rpc_gnss_client_request_send>
   17e30:	2800      	cmp	r0, #0
   17e32:	f040 80bc 	bne.w	17fae <gnss_interface_setopt+0x29a>
   17e36:	4f6e      	ldr	r7, [pc, #440]	; (17ff0 <gnss_interface_setopt+0x2dc>)
   17e38:	4e6c      	ldr	r6, [pc, #432]	; (17fec <gnss_interface_setopt+0x2d8>)
   17e3a:	4639      	mov	r1, r7
   17e3c:	4630      	mov	r0, r6
   17e3e:	f7f9 fa8b 	bl	11358 <bsd_os_timedwait>
   17e42:	682c      	ldr	r4, [r5, #0]
   17e44:	f414 0480 	ands.w	r4, r4, #4194304	; 0x400000
   17e48:	d1f7      	bne.n	17e3a <gnss_interface_setopt+0x126>
   17e4a:	f8d8 0000 	ldr.w	r0, [r8]
   17e4e:	b118      	cbz	r0, 17e58 <gnss_interface_setopt+0x144>
   17e50:	f002 fa86 	bl	1a360 <rpc_gnss_client_data_free>
   17e54:	f8c8 4000 	str.w	r4, [r8]
   17e58:	682b      	ldr	r3, [r5, #0]
   17e5a:	021b      	lsls	r3, r3, #8
   17e5c:	f140 808f 	bpl.w	17f7e <gnss_interface_setopt+0x26a>
   17e60:	2000      	movs	r0, #0
   17e62:	682b      	ldr	r3, [r5, #0]
   17e64:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   17e68:	602b      	str	r3, [r5, #0]
   17e6a:	b006      	add	sp, #24
   17e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17e70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17e72:	2a02      	cmp	r2, #2
   17e74:	f040 8089 	bne.w	17f8a <gnss_interface_setopt+0x276>
   17e78:	2208      	movs	r2, #8
   17e7a:	f241 1603 	movw	r6, #4355	; 0x1103
   17e7e:	881b      	ldrh	r3, [r3, #0]
   17e80:	9202      	str	r2, [sp, #8]
   17e82:	f8ad 300f 	strh.w	r3, [sp, #15]
   17e86:	4637      	mov	r7, r6
   17e88:	e791      	b.n	17dae <gnss_interface_setopt+0x9a>
   17e8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17e8c:	2a02      	cmp	r2, #2
   17e8e:	d17c      	bne.n	17f8a <gnss_interface_setopt+0x276>
   17e90:	2210      	movs	r2, #16
   17e92:	f241 1603 	movw	r6, #4355	; 0x1103
   17e96:	881b      	ldrh	r3, [r3, #0]
   17e98:	9202      	str	r2, [sp, #8]
   17e9a:	f8ad 3011 	strh.w	r3, [sp, #17]
   17e9e:	4637      	mov	r7, r6
   17ea0:	e785      	b.n	17dae <gnss_interface_setopt+0x9a>
   17ea2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17ea4:	2a01      	cmp	r2, #1
   17ea6:	d170      	bne.n	17f8a <gnss_interface_setopt+0x276>
   17ea8:	781b      	ldrb	r3, [r3, #0]
   17eaa:	2b01      	cmp	r3, #1
   17eac:	d16d      	bne.n	17f8a <gnss_interface_setopt+0x276>
   17eae:	f241 1603 	movw	r6, #4355	; 0x1103
   17eb2:	4637      	mov	r7, r6
   17eb4:	e77b      	b.n	17dae <gnss_interface_setopt+0x9a>
   17eb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17eb8:	2a02      	cmp	r2, #2
   17eba:	d166      	bne.n	17f8a <gnss_interface_setopt+0x276>
   17ebc:	2220      	movs	r2, #32
   17ebe:	f241 1603 	movw	r6, #4355	; 0x1103
   17ec2:	881b      	ldrh	r3, [r3, #0]
   17ec4:	9202      	str	r2, [sp, #8]
   17ec6:	f8ad 3013 	strh.w	r3, [sp, #19]
   17eca:	4637      	mov	r7, r6
   17ecc:	e76f      	b.n	17dae <gnss_interface_setopt+0x9a>
   17ece:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17ed0:	2a01      	cmp	r2, #1
   17ed2:	d15a      	bne.n	17f8a <gnss_interface_setopt+0x276>
   17ed4:	f241 1603 	movw	r6, #4355	; 0x1103
   17ed8:	781b      	ldrb	r3, [r3, #0]
   17eda:	9202      	str	r2, [sp, #8]
   17edc:	f88d 300c 	strb.w	r3, [sp, #12]
   17ee0:	4637      	mov	r7, r6
   17ee2:	e764      	b.n	17dae <gnss_interface_setopt+0x9a>
   17ee4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17ee6:	2a01      	cmp	r2, #1
   17ee8:	d14f      	bne.n	17f8a <gnss_interface_setopt+0x276>
   17eea:	2202      	movs	r2, #2
   17eec:	f241 1603 	movw	r6, #4355	; 0x1103
   17ef0:	781b      	ldrb	r3, [r3, #0]
   17ef2:	9202      	str	r2, [sp, #8]
   17ef4:	f88d 300d 	strb.w	r3, [sp, #13]
   17ef8:	4637      	mov	r7, r6
   17efa:	e758      	b.n	17dae <gnss_interface_setopt+0x9a>
   17efc:	682a      	ldr	r2, [r5, #0]
   17efe:	b292      	uxth	r2, r2
   17f00:	2a02      	cmp	r2, #2
   17f02:	f47f af15 	bne.w	17d30 <gnss_interface_setopt+0x1c>
   17f06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17f08:	2a04      	cmp	r2, #4
   17f0a:	d13e      	bne.n	17f8a <gnss_interface_setopt+0x276>
   17f0c:	2101      	movs	r1, #1
   17f0e:	f241 0604 	movw	r6, #4100	; 0x1004
   17f12:	682a      	ldr	r2, [r5, #0]
   17f14:	6818      	ldr	r0, [r3, #0]
   17f16:	0c13      	lsrs	r3, r2, #16
   17f18:	041b      	lsls	r3, r3, #16
   17f1a:	f043 0303 	orr.w	r3, r3, #3
   17f1e:	f8cd 0009 	str.w	r0, [sp, #9]
   17f22:	602b      	str	r3, [r5, #0]
   17f24:	f88d 1008 	strb.w	r1, [sp, #8]
   17f28:	4637      	mov	r7, r6
   17f2a:	e740      	b.n	17dae <gnss_interface_setopt+0x9a>
   17f2c:	682a      	ldr	r2, [r5, #0]
   17f2e:	b292      	uxth	r2, r2
   17f30:	2a04      	cmp	r2, #4
   17f32:	d004      	beq.n	17f3e <gnss_interface_setopt+0x22a>
   17f34:	682a      	ldr	r2, [r5, #0]
   17f36:	b292      	uxth	r2, r2
   17f38:	2a02      	cmp	r2, #2
   17f3a:	f47f aef9 	bne.w	17d30 <gnss_interface_setopt+0x1c>
   17f3e:	2200      	movs	r2, #0
   17f40:	f88d 2008 	strb.w	r2, [sp, #8]
   17f44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17f46:	2a04      	cmp	r2, #4
   17f48:	d11f      	bne.n	17f8a <gnss_interface_setopt+0x276>
   17f4a:	f241 0604 	movw	r6, #4100	; 0x1004
   17f4e:	681b      	ldr	r3, [r3, #0]
   17f50:	4637      	mov	r7, r6
   17f52:	f8cd 3009 	str.w	r3, [sp, #9]
   17f56:	e72a      	b.n	17dae <gnss_interface_setopt+0x9a>
   17f58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17f5a:	2a01      	cmp	r2, #1
   17f5c:	d115      	bne.n	17f8a <gnss_interface_setopt+0x276>
   17f5e:	2240      	movs	r2, #64	; 0x40
   17f60:	f241 1603 	movw	r6, #4355	; 0x1103
   17f64:	781b      	ldrb	r3, [r3, #0]
   17f66:	9202      	str	r2, [sp, #8]
   17f68:	f88d 3015 	strb.w	r3, [sp, #21]
   17f6c:	4637      	mov	r7, r6
   17f6e:	e71e      	b.n	17dae <gnss_interface_setopt+0x9a>
   17f70:	682b      	ldr	r3, [r5, #0]
   17f72:	b29b      	uxth	r3, r3
   17f74:	2b04      	cmp	r3, #4
   17f76:	f47f aedb 	bne.w	17d30 <gnss_interface_setopt+0x1c>
   17f7a:	2202      	movs	r2, #2
   17f7c:	e709      	b.n	17d92 <gnss_interface_setopt+0x7e>
   17f7e:	200e      	movs	r0, #14
   17f80:	f7f9 faa2 	bl	114c8 <bsd_os_errno_set>
   17f84:	f04f 30ff 	mov.w	r0, #4294967295
   17f88:	e76b      	b.n	17e62 <gnss_interface_setopt+0x14e>
   17f8a:	2016      	movs	r0, #22
   17f8c:	f7f9 fa9c 	bl	114c8 <bsd_os_errno_set>
   17f90:	f04f 30ff 	mov.w	r0, #4294967295
   17f94:	e6d1      	b.n	17d3a <gnss_interface_setopt+0x26>
   17f96:	b128      	cbz	r0, 17fa4 <gnss_interface_setopt+0x290>
   17f98:	6803      	ldr	r3, [r0, #0]
   17f9a:	b11b      	cbz	r3, 17fa4 <gnss_interface_setopt+0x290>
   17f9c:	4618      	mov	r0, r3
   17f9e:	f002 f9df 	bl	1a360 <rpc_gnss_client_data_free>
   17fa2:	9800      	ldr	r0, [sp, #0]
   17fa4:	f002 f9d4 	bl	1a350 <rpc_gnss_client_message_free>
   17fa8:	2023      	movs	r0, #35	; 0x23
   17faa:	f7f9 fa8d 	bl	114c8 <bsd_os_errno_set>
   17fae:	682b      	ldr	r3, [r5, #0]
   17fb0:	200e      	movs	r0, #14
   17fb2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   17fb6:	602b      	str	r3, [r5, #0]
   17fb8:	f7f9 fa86 	bl	114c8 <bsd_os_errno_set>
   17fbc:	f04f 30ff 	mov.w	r0, #4294967295
   17fc0:	e6bb      	b.n	17d3a <gnss_interface_setopt+0x26>
   17fc2:	202a      	movs	r0, #42	; 0x2a
   17fc4:	f7f9 fa80 	bl	114c8 <bsd_os_errno_set>
   17fc8:	f04f 30ff 	mov.w	r0, #4294967295
   17fcc:	e6b5      	b.n	17d3a <gnss_interface_setopt+0x26>
   17fce:	2009      	movs	r0, #9
   17fd0:	f7f9 fa7a 	bl	114c8 <bsd_os_errno_set>
   17fd4:	f04f 30ff 	mov.w	r0, #4294967295
   17fd8:	e6af      	b.n	17d3a <gnss_interface_setopt+0x26>
   17fda:	2073      	movs	r0, #115	; 0x73
   17fdc:	f7f9 fa74 	bl	114c8 <bsd_os_errno_set>
   17fe0:	f04f 30ff 	mov.w	r0, #4294967295
   17fe4:	e6a9      	b.n	17d3a <gnss_interface_setopt+0x26>
   17fe6:	bf00      	nop
   17fe8:	20020db0 	.word	0x20020db0
   17fec:	49765443 	.word	0x49765443
   17ff0:	20020064 	.word	0x20020064
   17ff4:	20022352 	.word	0x20022352
   17ff8:	20020db4 	.word	0x20020db4

00017ffc <gnss_interface_getopt>:
   17ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18000:	4c81      	ldr	r4, [pc, #516]	; (18208 <gnss_interface_getopt+0x20c>)
   18002:	b087      	sub	sp, #28
   18004:	6825      	ldr	r5, [r4, #0]
   18006:	4698      	mov	r8, r3
   18008:	b2ad      	uxth	r5, r5
   1800a:	2d02      	cmp	r5, #2
   1800c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1800e:	f040 80dd 	bne.w	181cc <gnss_interface_getopt+0x1d0>
   18012:	6825      	ldr	r5, [r4, #0]
   18014:	03ee      	lsls	r6, r5, #15
   18016:	f100 80eb 	bmi.w	181f0 <gnss_interface_getopt+0x1f4>
   1801a:	6825      	ldr	r5, [r4, #0]
   1801c:	01ed      	lsls	r5, r5, #7
   1801e:	f100 80ed 	bmi.w	181fc <gnss_interface_getopt+0x200>
   18022:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   18026:	f040 80d7 	bne.w	181d8 <gnss_interface_getopt+0x1dc>
   1802a:	4978      	ldr	r1, [pc, #480]	; (1820c <gnss_interface_getopt+0x210>)
   1802c:	4288      	cmp	r0, r1
   1802e:	f040 80d9 	bne.w	181e4 <gnss_interface_getopt+0x1e8>
   18032:	f1b8 0f00 	cmp.w	r8, #0
   18036:	d00b      	beq.n	18050 <gnss_interface_getopt+0x54>
   18038:	b153      	cbz	r3, 18050 <gnss_interface_getopt+0x54>
   1803a:	1e57      	subs	r7, r2, #1
   1803c:	2f05      	cmp	r7, #5
   1803e:	d807      	bhi.n	18050 <gnss_interface_getopt+0x54>
   18040:	e8df f007 	tbb	[pc, r7]
   18044:	0f030f0f 	.word	0x0f030f0f
   18048:	0303      	.short	0x0303
   1804a:	681b      	ldr	r3, [r3, #0]
   1804c:	2b01      	cmp	r3, #1
   1804e:	d00b      	beq.n	18068 <gnss_interface_getopt+0x6c>
   18050:	2016      	movs	r0, #22
   18052:	f7f9 fa39 	bl	114c8 <bsd_os_errno_set>
   18056:	f04f 35ff 	mov.w	r5, #4294967295
   1805a:	4628      	mov	r0, r5
   1805c:	b007      	add	sp, #28
   1805e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18062:	681b      	ldr	r3, [r3, #0]
   18064:	2b02      	cmp	r3, #2
   18066:	d1f3      	bne.n	18050 <gnss_interface_getopt+0x54>
   18068:	6823      	ldr	r3, [r4, #0]
   1806a:	2212      	movs	r2, #18
   1806c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   18070:	2100      	movs	r1, #0
   18072:	a801      	add	r0, sp, #4
   18074:	6023      	str	r3, [r4, #0]
   18076:	f006 fb17 	bl	1e6a8 <memset>
   1807a:	2112      	movs	r1, #18
   1807c:	4668      	mov	r0, sp
   1807e:	f002 f93d 	bl	1a2fc <rpc_gnss_client_request_alloc>
   18082:	4605      	mov	r5, r0
   18084:	9800      	ldr	r0, [sp, #0]
   18086:	2d00      	cmp	r5, #0
   18088:	f040 808a 	bne.w	181a0 <gnss_interface_getopt+0x1a4>
   1808c:	2800      	cmp	r0, #0
   1808e:	f000 808e 	beq.w	181ae <gnss_interface_getopt+0x1b2>
   18092:	f241 1602 	movw	r6, #4354	; 0x1102
   18096:	f04f 0e49 	mov.w	lr, #73	; 0x49
   1809a:	2212      	movs	r2, #18
   1809c:	f04f 0976 	mov.w	r9, #118	; 0x76
   180a0:	f04f 0b43 	mov.w	fp, #67	; 0x43
   180a4:	f04f 0a54 	mov.w	sl, #84	; 0x54
   180a8:	f8df c168 	ldr.w	ip, [pc, #360]	; 18214 <gnss_interface_getopt+0x218>
   180ac:	f880 e00f 	strb.w	lr, [r0, #15]
   180b0:	f8bc 3000 	ldrh.w	r3, [ip]
   180b4:	f880 900e 	strb.w	r9, [r0, #14]
   180b8:	3301      	adds	r3, #1
   180ba:	b29b      	uxth	r3, r3
   180bc:	ea46 4e03 	orr.w	lr, r6, r3, lsl #16
   180c0:	f8cd e004 	str.w	lr, [sp, #4]
   180c4:	7145      	strb	r5, [r0, #5]
   180c6:	7185      	strb	r5, [r0, #6]
   180c8:	71c5      	strb	r5, [r0, #7]
   180ca:	7205      	strb	r5, [r0, #8]
   180cc:	7245      	strb	r5, [r0, #9]
   180ce:	7285      	strb	r5, [r0, #10]
   180d0:	72c5      	strb	r5, [r0, #11]
   180d2:	a901      	add	r1, sp, #4
   180d4:	7102      	strb	r2, [r0, #4]
   180d6:	f880 b00c 	strb.w	fp, [r0, #12]
   180da:	f880 a00d 	strb.w	sl, [r0, #13]
   180de:	f8df 9138 	ldr.w	r9, [pc, #312]	; 18218 <gnss_interface_getopt+0x21c>
   180e2:	6800      	ldr	r0, [r0, #0]
   180e4:	f8ac 3000 	strh.w	r3, [ip]
   180e8:	f006 fab3 	bl	1e652 <memcpy>
   180ec:	4631      	mov	r1, r6
   180ee:	9800      	ldr	r0, [sp, #0]
   180f0:	f8c9 5000 	str.w	r5, [r9]
   180f4:	f002 f916 	bl	1a324 <rpc_gnss_client_request_send>
   180f8:	2800      	cmp	r0, #0
   180fa:	d15d      	bne.n	181b8 <gnss_interface_getopt+0x1bc>
   180fc:	4e44      	ldr	r6, [pc, #272]	; (18210 <gnss_interface_getopt+0x214>)
   180fe:	4d43      	ldr	r5, [pc, #268]	; (1820c <gnss_interface_getopt+0x210>)
   18100:	4631      	mov	r1, r6
   18102:	4628      	mov	r0, r5
   18104:	f7f9 f928 	bl	11358 <bsd_os_timedwait>
   18108:	6823      	ldr	r3, [r4, #0]
   1810a:	01db      	lsls	r3, r3, #7
   1810c:	d4f8      	bmi.n	18100 <gnss_interface_getopt+0x104>
   1810e:	f8d9 0000 	ldr.w	r0, [r9]
   18112:	b1d8      	cbz	r0, 1814c <gnss_interface_getopt+0x150>
   18114:	6825      	ldr	r5, [r4, #0]
   18116:	f015 7500 	ands.w	r5, r5, #33554432	; 0x2000000
   1811a:	d00f      	beq.n	1813c <gnss_interface_getopt+0x140>
   1811c:	2f05      	cmp	r7, #5
   1811e:	d837      	bhi.n	18190 <gnss_interface_getopt+0x194>
   18120:	e8df f007 	tbb	[pc, r7]
   18124:	2b26201a 	.word	0x2b26201a
   18128:	0331      	.short	0x0331
   1812a:	2500      	movs	r5, #0
   1812c:	7b43      	ldrb	r3, [r0, #13]
   1812e:	f888 3000 	strb.w	r3, [r8]
   18132:	f002 f915 	bl	1a360 <rpc_gnss_client_data_free>
   18136:	2300      	movs	r3, #0
   18138:	f8c9 3000 	str.w	r3, [r9]
   1813c:	6823      	ldr	r3, [r4, #0]
   1813e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   18142:	6023      	str	r3, [r4, #0]
   18144:	4628      	mov	r0, r5
   18146:	b007      	add	sp, #28
   18148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1814c:	6823      	ldr	r3, [r4, #0]
   1814e:	4605      	mov	r5, r0
   18150:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   18154:	6023      	str	r3, [r4, #0]
   18156:	e7f5      	b.n	18144 <gnss_interface_getopt+0x148>
   18158:	f8b0 300f 	ldrh.w	r3, [r0, #15]
   1815c:	2500      	movs	r5, #0
   1815e:	f8a8 3000 	strh.w	r3, [r8]
   18162:	e7e6      	b.n	18132 <gnss_interface_getopt+0x136>
   18164:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   18168:	2500      	movs	r5, #0
   1816a:	f8a8 3000 	strh.w	r3, [r8]
   1816e:	e7e0      	b.n	18132 <gnss_interface_getopt+0x136>
   18170:	7b83      	ldrb	r3, [r0, #14]
   18172:	2500      	movs	r5, #0
   18174:	f888 3000 	strb.w	r3, [r8]
   18178:	e7db      	b.n	18132 <gnss_interface_getopt+0x136>
   1817a:	f8b0 3013 	ldrh.w	r3, [r0, #19]
   1817e:	2500      	movs	r5, #0
   18180:	f8a8 3000 	strh.w	r3, [r8]
   18184:	e7d5      	b.n	18132 <gnss_interface_getopt+0x136>
   18186:	7b03      	ldrb	r3, [r0, #12]
   18188:	2500      	movs	r5, #0
   1818a:	f888 3000 	strb.w	r3, [r8]
   1818e:	e7d0      	b.n	18132 <gnss_interface_getopt+0x136>
   18190:	2016      	movs	r0, #22
   18192:	f7f9 f999 	bl	114c8 <bsd_os_errno_set>
   18196:	f04f 35ff 	mov.w	r5, #4294967295
   1819a:	f8d9 0000 	ldr.w	r0, [r9]
   1819e:	e7c8      	b.n	18132 <gnss_interface_getopt+0x136>
   181a0:	b128      	cbz	r0, 181ae <gnss_interface_getopt+0x1b2>
   181a2:	6803      	ldr	r3, [r0, #0]
   181a4:	b11b      	cbz	r3, 181ae <gnss_interface_getopt+0x1b2>
   181a6:	4618      	mov	r0, r3
   181a8:	f002 f8da 	bl	1a360 <rpc_gnss_client_data_free>
   181ac:	9800      	ldr	r0, [sp, #0]
   181ae:	f002 f8cf 	bl	1a350 <rpc_gnss_client_message_free>
   181b2:	2023      	movs	r0, #35	; 0x23
   181b4:	f7f9 f988 	bl	114c8 <bsd_os_errno_set>
   181b8:	6823      	ldr	r3, [r4, #0]
   181ba:	200e      	movs	r0, #14
   181bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   181c0:	6023      	str	r3, [r4, #0]
   181c2:	f04f 35ff 	mov.w	r5, #4294967295
   181c6:	f7f9 f97f 	bl	114c8 <bsd_os_errno_set>
   181ca:	e746      	b.n	1805a <gnss_interface_getopt+0x5e>
   181cc:	200e      	movs	r0, #14
   181ce:	f7f9 f97b 	bl	114c8 <bsd_os_errno_set>
   181d2:	f04f 35ff 	mov.w	r5, #4294967295
   181d6:	e740      	b.n	1805a <gnss_interface_getopt+0x5e>
   181d8:	202a      	movs	r0, #42	; 0x2a
   181da:	f7f9 f975 	bl	114c8 <bsd_os_errno_set>
   181de:	f04f 35ff 	mov.w	r5, #4294967295
   181e2:	e73a      	b.n	1805a <gnss_interface_getopt+0x5e>
   181e4:	2009      	movs	r0, #9
   181e6:	f7f9 f96f 	bl	114c8 <bsd_os_errno_set>
   181ea:	f04f 35ff 	mov.w	r5, #4294967295
   181ee:	e734      	b.n	1805a <gnss_interface_getopt+0x5e>
   181f0:	2005      	movs	r0, #5
   181f2:	f7f9 f969 	bl	114c8 <bsd_os_errno_set>
   181f6:	f04f 35ff 	mov.w	r5, #4294967295
   181fa:	e72e      	b.n	1805a <gnss_interface_getopt+0x5e>
   181fc:	2073      	movs	r0, #115	; 0x73
   181fe:	f7f9 f963 	bl	114c8 <bsd_os_errno_set>
   18202:	f04f 35ff 	mov.w	r5, #4294967295
   18206:	e728      	b.n	1805a <gnss_interface_getopt+0x5e>
   18208:	20020db0 	.word	0x20020db0
   1820c:	49765443 	.word	0x49765443
   18210:	20020064 	.word	0x20020064
   18214:	20022352 	.word	0x20022352
   18218:	20020db4 	.word	0x20020db4

0001821c <gnss_interface_init>:
   1821c:	2100      	movs	r1, #0
   1821e:	b538      	push	{r3, r4, r5, lr}
   18220:	4c0a      	ldr	r4, [pc, #40]	; (1824c <gnss_interface_init+0x30>)
   18222:	4d0b      	ldr	r5, [pc, #44]	; (18250 <gnss_interface_init+0x34>)
   18224:	6822      	ldr	r2, [r4, #0]
   18226:	480b      	ldr	r0, [pc, #44]	; (18254 <gnss_interface_init+0x38>)
   18228:	4b0b      	ldr	r3, [pc, #44]	; (18258 <gnss_interface_init+0x3c>)
   1822a:	402a      	ands	r2, r5
   1822c:	6022      	str	r2, [r4, #0]
   1822e:	8001      	strh	r1, [r0, #0]
   18230:	6019      	str	r1, [r3, #0]
   18232:	f002 f85d 	bl	1a2f0 <rpc_gnss_client_init>
   18236:	b938      	cbnz	r0, 18248 <gnss_interface_init+0x2c>
   18238:	2101      	movs	r1, #1
   1823a:	6823      	ldr	r3, [r4, #0]
   1823c:	4a07      	ldr	r2, [pc, #28]	; (1825c <gnss_interface_init+0x40>)
   1823e:	402b      	ands	r3, r5
   18240:	430b      	orrs	r3, r1
   18242:	7011      	strb	r1, [r2, #0]
   18244:	6023      	str	r3, [r4, #0]
   18246:	bd38      	pop	{r3, r4, r5, pc}
   18248:	2003      	movs	r0, #3
   1824a:	bd38      	pop	{r3, r4, r5, pc}
   1824c:	20020db0 	.word	0x20020db0
   18250:	ffff0000 	.word	0xffff0000
   18254:	20022352 	.word	0x20022352
   18258:	20020db4 	.word	0x20020db4
   1825c:	20024322 	.word	0x20024322

00018260 <gnss_interface_open>:
   18260:	b510      	push	{r4, lr}
   18262:	4b1c      	ldr	r3, [pc, #112]	; (182d4 <gnss_interface_open+0x74>)
   18264:	781b      	ldrb	r3, [r3, #0]
   18266:	b34b      	cbz	r3, 182bc <gnss_interface_open+0x5c>
   18268:	2902      	cmp	r1, #2
   1826a:	d121      	bne.n	182b0 <gnss_interface_open+0x50>
   1826c:	4c1a      	ldr	r4, [pc, #104]	; (182d8 <gnss_interface_open+0x78>)
   1826e:	6823      	ldr	r3, [r4, #0]
   18270:	b29b      	uxth	r3, r3
   18272:	2b01      	cmp	r3, #1
   18274:	d116      	bne.n	182a4 <gnss_interface_open+0x44>
   18276:	6823      	ldr	r3, [r4, #0]
   18278:	4608      	mov	r0, r1
   1827a:	0c1b      	lsrs	r3, r3, #16
   1827c:	041b      	lsls	r3, r3, #16
   1827e:	f043 0302 	orr.w	r3, r3, #2
   18282:	2200      	movs	r2, #0
   18284:	4915      	ldr	r1, [pc, #84]	; (182dc <gnss_interface_open+0x7c>)
   18286:	6023      	str	r3, [r4, #0]
   18288:	f002 f954 	bl	1a534 <packet_handler_create>
   1828c:	4a14      	ldr	r2, [pc, #80]	; (182e0 <gnss_interface_open+0x80>)
   1828e:	6010      	str	r0, [r2, #0]
   18290:	b1d0      	cbz	r0, 182c8 <gnss_interface_open+0x68>
   18292:	6823      	ldr	r3, [r4, #0]
   18294:	6802      	ldr	r2, [r0, #0]
   18296:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1829a:	6812      	ldr	r2, [r2, #0]
   1829c:	6023      	str	r3, [r4, #0]
   1829e:	4790      	blx	r2
   182a0:	4810      	ldr	r0, [pc, #64]	; (182e4 <gnss_interface_open+0x84>)
   182a2:	bd10      	pop	{r4, pc}
   182a4:	2005      	movs	r0, #5
   182a6:	f7f9 f90f 	bl	114c8 <bsd_os_errno_set>
   182aa:	f04f 30ff 	mov.w	r0, #4294967295
   182ae:	bd10      	pop	{r4, pc}
   182b0:	2029      	movs	r0, #41	; 0x29
   182b2:	f7f9 f909 	bl	114c8 <bsd_os_errno_set>
   182b6:	f04f 30ff 	mov.w	r0, #4294967295
   182ba:	bd10      	pop	{r4, pc}
   182bc:	2070      	movs	r0, #112	; 0x70
   182be:	f7f9 f903 	bl	114c8 <bsd_os_errno_set>
   182c2:	f04f 30ff 	mov.w	r0, #4294967295
   182c6:	bd10      	pop	{r4, pc}
   182c8:	200e      	movs	r0, #14
   182ca:	f7f9 f8fd 	bl	114c8 <bsd_os_errno_set>
   182ce:	f04f 30ff 	mov.w	r0, #4294967295
   182d2:	bd10      	pop	{r4, pc}
   182d4:	20024322 	.word	0x20024322
   182d8:	20020db0 	.word	0x20020db0
   182dc:	00017559 	.word	0x00017559
   182e0:	20020db8 	.word	0x20020db8
   182e4:	49765443 	.word	0x49765443

000182e8 <gnss_interface_close>:
   182e8:	b530      	push	{r4, r5, lr}
   182ea:	4b15      	ldr	r3, [pc, #84]	; (18340 <gnss_interface_close+0x58>)
   182ec:	b085      	sub	sp, #20
   182ee:	4298      	cmp	r0, r3
   182f0:	d11f      	bne.n	18332 <gnss_interface_close+0x4a>
   182f2:	4c14      	ldr	r4, [pc, #80]	; (18344 <gnss_interface_close+0x5c>)
   182f4:	6822      	ldr	r2, [r4, #0]
   182f6:	b292      	uxth	r2, r2
   182f8:	2a04      	cmp	r2, #4
   182fa:	d00f      	beq.n	1831c <gnss_interface_close+0x34>
   182fc:	4d12      	ldr	r5, [pc, #72]	; (18348 <gnss_interface_close+0x60>)
   182fe:	6828      	ldr	r0, [r5, #0]
   18300:	b118      	cbz	r0, 1830a <gnss_interface_close+0x22>
   18302:	f002 f937 	bl	1a574 <packet_handler_delete>
   18306:	2300      	movs	r3, #0
   18308:	602b      	str	r3, [r5, #0]
   1830a:	2000      	movs	r0, #0
   1830c:	6823      	ldr	r3, [r4, #0]
   1830e:	0c1b      	lsrs	r3, r3, #16
   18310:	041b      	lsls	r3, r3, #16
   18312:	f043 0301 	orr.w	r3, r3, #1
   18316:	6023      	str	r3, [r4, #0]
   18318:	b005      	add	sp, #20
   1831a:	bd30      	pop	{r4, r5, pc}
   1831c:	2100      	movs	r1, #0
   1831e:	ab04      	add	r3, sp, #16
   18320:	f843 1d04 	str.w	r1, [r3, #-4]!
   18324:	9200      	str	r2, [sp, #0]
   18326:	f44f 7101 	mov.w	r1, #516	; 0x204
   1832a:	2208      	movs	r2, #8
   1832c:	f001 fe60 	bl	19ff0 <nrf_setsockopt>
   18330:	e7e4      	b.n	182fc <gnss_interface_close+0x14>
   18332:	2009      	movs	r0, #9
   18334:	f7f9 f8c8 	bl	114c8 <bsd_os_errno_set>
   18338:	f04f 30ff 	mov.w	r0, #4294967295
   1833c:	e7ec      	b.n	18318 <gnss_interface_close+0x30>
   1833e:	bf00      	nop
   18340:	49765443 	.word	0x49765443
   18344:	20020db0 	.word	0x20020db0
   18348:	20020db8 	.word	0x20020db8

0001834c <rpc_logobj_client_evt_handler>:
   1834c:	b120      	cbz	r0, 18358 <rpc_logobj_client_evt_handler+0xc>
   1834e:	f850 1b08 	ldr.w	r1, [r0], #8
   18352:	0c09      	lsrs	r1, r1, #16
   18354:	f7fb b972 	b.w	1363c <logobj_event_handler>
   18358:	4770      	bx	lr
   1835a:	bf00      	nop

0001835c <rpc_logobj_client_init>:
   1835c:	4801      	ldr	r0, [pc, #4]	; (18364 <rpc_logobj_client_init+0x8>)
   1835e:	f7ff b83d 	b.w	173dc <rpc_client_register>
   18362:	bf00      	nop
   18364:	00020e0c 	.word	0x00020e0c

00018368 <rpc_logobj_client_request_alloc>:
   18368:	2300      	movs	r3, #0
   1836a:	b510      	push	{r4, lr}
   1836c:	b082      	sub	sp, #8
   1836e:	9301      	str	r3, [sp, #4]
   18370:	b961      	cbnz	r1, 1838c <rpc_logobj_client_request_alloc+0x24>
   18372:	b170      	cbz	r0, 18392 <rpc_logobj_client_request_alloc+0x2a>
   18374:	4604      	mov	r4, r0
   18376:	aa01      	add	r2, sp, #4
   18378:	2009      	movs	r0, #9
   1837a:	f7ff f8a9 	bl	174d0 <rpc_message_alloc>
   1837e:	b918      	cbnz	r0, 18388 <rpc_logobj_client_request_alloc+0x20>
   18380:	9b01      	ldr	r3, [sp, #4]
   18382:	b10b      	cbz	r3, 18388 <rpc_logobj_client_request_alloc+0x20>
   18384:	3308      	adds	r3, #8
   18386:	6023      	str	r3, [r4, #0]
   18388:	b002      	add	sp, #8
   1838a:	bd10      	pop	{r4, pc}
   1838c:	200f      	movs	r0, #15
   1838e:	b002      	add	sp, #8
   18390:	bd10      	pop	{r4, pc}
   18392:	200e      	movs	r0, #14
   18394:	b002      	add	sp, #8
   18396:	bd10      	pop	{r4, pc}

00018398 <rpc_logobj_client_request_send>:
   18398:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   1839c:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   183a0:	d10b      	bne.n	183ba <rpc_logobj_client_request_send+0x22>
   183a2:	b160      	cbz	r0, 183be <rpc_logobj_client_request_send+0x26>
   183a4:	4603      	mov	r3, r0
   183a6:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   183aa:	2009      	movs	r0, #9
   183ac:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   183b0:	f843 1d08 	str.w	r1, [r3, #-8]!
   183b4:	4619      	mov	r1, r3
   183b6:	f7ff b87b 	b.w	174b0 <rpc_message_send>
   183ba:	200f      	movs	r0, #15
   183bc:	4770      	bx	lr
   183be:	200e      	movs	r0, #14
   183c0:	4770      	bx	lr
   183c2:	bf00      	nop

000183c4 <rpc_logobj_client_message_free>:
   183c4:	b120      	cbz	r0, 183d0 <rpc_logobj_client_message_free+0xc>
   183c6:	f1a0 0108 	sub.w	r1, r0, #8
   183ca:	2009      	movs	r0, #9
   183cc:	f7ff b8ac 	b.w	17528 <rpc_message_free>
   183d0:	200e      	movs	r0, #14
   183d2:	4770      	bx	lr

000183d4 <rpc_logobj_client_data_free>:
   183d4:	b118      	cbz	r0, 183de <rpc_logobj_client_data_free+0xa>
   183d6:	4601      	mov	r1, r0
   183d8:	2009      	movs	r0, #9
   183da:	f7ff b8b1 	b.w	17540 <rpc_message_data_free>
   183de:	200e      	movs	r0, #14
   183e0:	4770      	bx	lr
   183e2:	bf00      	nop

000183e4 <dfu_client_event_handler>:
   183e4:	f850 1b08 	ldr.w	r1, [r0], #8
   183e8:	0c09      	lsrs	r1, r1, #16
   183ea:	f002 bdc9 	b.w	1af80 <rpc_dfu_event_handler>
   183ee:	bf00      	nop

000183f0 <rpc_dfu_client_init>:
   183f0:	4801      	ldr	r0, [pc, #4]	; (183f8 <rpc_dfu_client_init+0x8>)
   183f2:	f7fe bff3 	b.w	173dc <rpc_client_register>
   183f6:	bf00      	nop
   183f8:	00020e1c 	.word	0x00020e1c

000183fc <rpc_dfu_client_request_alloc>:
   183fc:	2300      	movs	r3, #0
   183fe:	b510      	push	{r4, lr}
   18400:	b082      	sub	sp, #8
   18402:	9301      	str	r3, [sp, #4]
   18404:	b158      	cbz	r0, 1841e <rpc_dfu_client_request_alloc+0x22>
   18406:	4604      	mov	r4, r0
   18408:	aa01      	add	r2, sp, #4
   1840a:	2006      	movs	r0, #6
   1840c:	f7ff f860 	bl	174d0 <rpc_message_alloc>
   18410:	b918      	cbnz	r0, 1841a <rpc_dfu_client_request_alloc+0x1e>
   18412:	9b01      	ldr	r3, [sp, #4]
   18414:	b10b      	cbz	r3, 1841a <rpc_dfu_client_request_alloc+0x1e>
   18416:	3308      	adds	r3, #8
   18418:	6023      	str	r3, [r4, #0]
   1841a:	b002      	add	sp, #8
   1841c:	bd10      	pop	{r4, pc}
   1841e:	2007      	movs	r0, #7
   18420:	b002      	add	sp, #8
   18422:	bd10      	pop	{r4, pc}

00018424 <rpc_dfu_client_request_send>:
   18424:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   18428:	d10b      	bne.n	18442 <rpc_dfu_client_request_send+0x1e>
   1842a:	b160      	cbz	r0, 18446 <rpc_dfu_client_request_send+0x22>
   1842c:	4603      	mov	r3, r0
   1842e:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   18432:	2006      	movs	r0, #6
   18434:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   18438:	f843 1d08 	str.w	r1, [r3, #-8]!
   1843c:	4619      	mov	r1, r3
   1843e:	f7ff b837 	b.w	174b0 <rpc_message_send>
   18442:	200f      	movs	r0, #15
   18444:	4770      	bx	lr
   18446:	2007      	movs	r0, #7
   18448:	4770      	bx	lr
   1844a:	bf00      	nop

0001844c <rpc_dfu_client_message_free>:
   1844c:	b120      	cbz	r0, 18458 <rpc_dfu_client_message_free+0xc>
   1844e:	f1a0 0108 	sub.w	r1, r0, #8
   18452:	2006      	movs	r0, #6
   18454:	f7ff b868 	b.w	17528 <rpc_message_free>
   18458:	2007      	movs	r0, #7
   1845a:	4770      	bx	lr

0001845c <rpc_dfu_client_data_free>:
   1845c:	b118      	cbz	r0, 18466 <rpc_dfu_client_data_free+0xa>
   1845e:	4601      	mov	r1, r0
   18460:	2006      	movs	r0, #6
   18462:	f7ff b86d 	b.w	17540 <rpc_message_data_free>
   18466:	2007      	movs	r0, #7
   18468:	4770      	bx	lr
   1846a:	bf00      	nop

0001846c <packet_free_cb>:
   1846c:	6800      	ldr	r0, [r0, #0]
   1846e:	f003 bae1 	b.w	1ba34 <rpc_at_client_data_free>
   18472:	bf00      	nop

00018474 <at_interface_write>:
   18474:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18478:	b083      	sub	sp, #12
   1847a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1847c:	2c00      	cmp	r4, #0
   1847e:	d16c      	bne.n	1855a <at_interface_write+0xe6>
   18480:	4688      	mov	r8, r1
   18482:	4615      	mov	r5, r2
   18484:	461e      	mov	r6, r3
   18486:	4607      	mov	r7, r0
   18488:	f003 f9a6 	bl	1b7d8 <interface_socket_from_handle_get>
   1848c:	4604      	mov	r4, r0
   1848e:	2e00      	cmp	r6, #0
   18490:	d137      	bne.n	18502 <at_interface_write+0x8e>
   18492:	2800      	cmp	r0, #0
   18494:	d067      	beq.n	18566 <at_interface_write+0xf2>
   18496:	6803      	ldr	r3, [r0, #0]
   18498:	039b      	lsls	r3, r3, #14
   1849a:	d564      	bpl.n	18566 <at_interface_write+0xf2>
   1849c:	6803      	ldr	r3, [r0, #0]
   1849e:	4629      	mov	r1, r5
   184a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   184a4:	6003      	str	r3, [r0, #0]
   184a6:	6803      	ldr	r3, [r0, #0]
   184a8:	4668      	mov	r0, sp
   184aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   184ae:	6023      	str	r3, [r4, #0]
   184b0:	f003 fa96 	bl	1b9e0 <rpc_at_client_request_alloc>
   184b4:	4606      	mov	r6, r0
   184b6:	4638      	mov	r0, r7
   184b8:	f003 f98e 	bl	1b7d8 <interface_socket_from_handle_get>
   184bc:	4681      	mov	r9, r0
   184be:	bb56      	cbnz	r6, 18516 <at_interface_write+0xa2>
   184c0:	2304      	movs	r3, #4
   184c2:	9800      	ldr	r0, [sp, #0]
   184c4:	7203      	strb	r3, [r0, #8]
   184c6:	7246      	strb	r6, [r0, #9]
   184c8:	7286      	strb	r6, [r0, #10]
   184ca:	72c6      	strb	r6, [r0, #11]
   184cc:	60c7      	str	r7, [r0, #12]
   184ce:	bb25      	cbnz	r5, 1851a <at_interface_write+0xa6>
   184d0:	2101      	movs	r1, #1
   184d2:	f003 fa99 	bl	1ba08 <rpc_at_client_request_send>
   184d6:	bb78      	cbnz	r0, 18538 <at_interface_write+0xc4>
   184d8:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
   184dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   184e0:	2900      	cmp	r1, #0
   184e2:	bf08      	it	eq
   184e4:	f04f 31ff 	moveq.w	r1, #4294967295
   184e8:	ab02      	add	r3, sp, #8
   184ea:	f843 1d04 	str.w	r1, [r3, #-4]!
   184ee:	4638      	mov	r0, r7
   184f0:	4611      	mov	r1, r2
   184f2:	f003 f8fd 	bl	1b6f0 <interface_socket_wait>
   184f6:	b320      	cbz	r0, 18542 <at_interface_write+0xce>
   184f8:	6823      	ldr	r3, [r4, #0]
   184fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   184fe:	6023      	str	r3, [r4, #0]
   18500:	e002      	b.n	18508 <at_interface_write+0x94>
   18502:	b390      	cbz	r0, 1856a <at_interface_write+0xf6>
   18504:	6803      	ldr	r3, [r0, #0]
   18506:	202d      	movs	r0, #45	; 0x2d
   18508:	f7f8 ffde 	bl	114c8 <bsd_os_errno_set>
   1850c:	f04f 30ff 	mov.w	r0, #4294967295
   18510:	b003      	add	sp, #12
   18512:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18516:	200c      	movs	r0, #12
   18518:	e7ee      	b.n	184f8 <at_interface_write+0x84>
   1851a:	4641      	mov	r1, r8
   1851c:	6800      	ldr	r0, [r0, #0]
   1851e:	462a      	mov	r2, r5
   18520:	f006 f897 	bl	1e652 <memcpy>
   18524:	2101      	movs	r1, #1
   18526:	9800      	ldr	r0, [sp, #0]
   18528:	f003 fa6e 	bl	1ba08 <rpc_at_client_request_send>
   1852c:	2800      	cmp	r0, #0
   1852e:	d0d3      	beq.n	184d8 <at_interface_write+0x64>
   18530:	9b00      	ldr	r3, [sp, #0]
   18532:	6818      	ldr	r0, [r3, #0]
   18534:	f003 fa7e 	bl	1ba34 <rpc_at_client_data_free>
   18538:	9800      	ldr	r0, [sp, #0]
   1853a:	f003 fa73 	bl	1ba24 <rpc_at_client_message_free>
   1853e:	2023      	movs	r0, #35	; 0x23
   18540:	e7da      	b.n	184f8 <at_interface_write+0x84>
   18542:	4638      	mov	r0, r7
   18544:	f003 f948 	bl	1b7d8 <interface_socket_from_handle_get>
   18548:	4603      	mov	r3, r0
   1854a:	b120      	cbz	r0, 18556 <at_interface_write+0xe2>
   1854c:	6840      	ldr	r0, [r0, #4]
   1854e:	b110      	cbz	r0, 18556 <at_interface_write+0xe2>
   18550:	2200      	movs	r2, #0
   18552:	605a      	str	r2, [r3, #4]
   18554:	e7d0      	b.n	184f8 <at_interface_write+0x84>
   18556:	4628      	mov	r0, r5
   18558:	e7da      	b.n	18510 <at_interface_write+0x9c>
   1855a:	2038      	movs	r0, #56	; 0x38
   1855c:	f7f8 ffb4 	bl	114c8 <bsd_os_errno_set>
   18560:	f04f 30ff 	mov.w	r0, #4294967295
   18564:	e7d4      	b.n	18510 <at_interface_write+0x9c>
   18566:	2016      	movs	r0, #22
   18568:	e7ce      	b.n	18508 <at_interface_write+0x94>
   1856a:	202d      	movs	r0, #45	; 0x2d
   1856c:	e7cc      	b.n	18508 <at_interface_write+0x94>
   1856e:	bf00      	nop

00018570 <at_interface_init>:
   18570:	b508      	push	{r3, lr}
   18572:	f003 fa2f 	bl	1b9d4 <rpc_at_client_init>
   18576:	b910      	cbnz	r0, 1857e <at_interface_init+0xe>
   18578:	2201      	movs	r2, #1
   1857a:	4b01      	ldr	r3, [pc, #4]	; (18580 <at_interface_init+0x10>)
   1857c:	701a      	strb	r2, [r3, #0]
   1857e:	bd08      	pop	{r3, pc}
   18580:	20024323 	.word	0x20024323

00018584 <at_interface_open>:
   18584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18588:	2600      	movs	r6, #0
   1858a:	4b34      	ldr	r3, [pc, #208]	; (1865c <at_interface_open+0xd8>)
   1858c:	b084      	sub	sp, #16
   1858e:	781b      	ldrb	r3, [r3, #0]
   18590:	9601      	str	r6, [sp, #4]
   18592:	2b00      	cmp	r3, #0
   18594:	d05c      	beq.n	18650 <at_interface_open+0xcc>
   18596:	2902      	cmp	r1, #2
   18598:	460d      	mov	r5, r1
   1859a:	d153      	bne.n	18644 <at_interface_open+0xc0>
   1859c:	4680      	mov	r8, r0
   1859e:	4617      	mov	r7, r2
   185a0:	a801      	add	r0, sp, #4
   185a2:	4a2f      	ldr	r2, [pc, #188]	; (18660 <at_interface_open+0xdc>)
   185a4:	f002 fff2 	bl	1b58c <interface_socket_allocate>
   185a8:	9b01      	ldr	r3, [sp, #4]
   185aa:	4604      	mov	r4, r0
   185ac:	b3c3      	cbz	r3, 18620 <at_interface_open+0x9c>
   185ae:	615f      	str	r7, [r3, #20]
   185b0:	4631      	mov	r1, r6
   185b2:	e9c3 8503 	strd	r8, r5, [r3, #12]
   185b6:	a802      	add	r0, sp, #8
   185b8:	f003 fa12 	bl	1b9e0 <rpc_at_client_request_alloc>
   185bc:	4606      	mov	r6, r0
   185be:	4620      	mov	r0, r4
   185c0:	f003 f90a 	bl	1b7d8 <interface_socket_from_handle_get>
   185c4:	4607      	mov	r7, r0
   185c6:	bb16      	cbnz	r6, 1860e <at_interface_open+0x8a>
   185c8:	2304      	movs	r3, #4
   185ca:	9802      	ldr	r0, [sp, #8]
   185cc:	2105      	movs	r1, #5
   185ce:	7246      	strb	r6, [r0, #9]
   185d0:	7286      	strb	r6, [r0, #10]
   185d2:	72c6      	strb	r6, [r0, #11]
   185d4:	7203      	strb	r3, [r0, #8]
   185d6:	60c4      	str	r4, [r0, #12]
   185d8:	f003 fa16 	bl	1ba08 <rpc_at_client_request_send>
   185dc:	4606      	mov	r6, r0
   185de:	bb60      	cbnz	r0, 1863a <at_interface_open+0xb6>
   185e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   185e2:	ab04      	add	r3, sp, #16
   185e4:	2a00      	cmp	r2, #0
   185e6:	bf08      	it	eq
   185e8:	f04f 32ff 	moveq.w	r2, #4294967295
   185ec:	4629      	mov	r1, r5
   185ee:	f843 2d04 	str.w	r2, [r3, #-4]!
   185f2:	4620      	mov	r0, r4
   185f4:	462a      	mov	r2, r5
   185f6:	f003 f87b 	bl	1b6f0 <interface_socket_wait>
   185fa:	4605      	mov	r5, r0
   185fc:	b940      	cbnz	r0, 18610 <at_interface_open+0x8c>
   185fe:	4620      	mov	r0, r4
   18600:	f003 f8ea 	bl	1b7d8 <interface_socket_from_handle_get>
   18604:	b180      	cbz	r0, 18628 <at_interface_open+0xa4>
   18606:	6845      	ldr	r5, [r0, #4]
   18608:	b175      	cbz	r5, 18628 <at_interface_open+0xa4>
   1860a:	6046      	str	r6, [r0, #4]
   1860c:	e000      	b.n	18610 <at_interface_open+0x8c>
   1860e:	250c      	movs	r5, #12
   18610:	4620      	mov	r0, r4
   18612:	f003 f81f 	bl	1b654 <interface_socket_free>
   18616:	4628      	mov	r0, r5
   18618:	f7f8 ff56 	bl	114c8 <bsd_os_errno_set>
   1861c:	f04f 34ff 	mov.w	r4, #4294967295
   18620:	4620      	mov	r0, r4
   18622:	b004      	add	sp, #16
   18624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18628:	4620      	mov	r0, r4
   1862a:	9a01      	ldr	r2, [sp, #4]
   1862c:	6813      	ldr	r3, [r2, #0]
   1862e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   18632:	6013      	str	r3, [r2, #0]
   18634:	b004      	add	sp, #16
   18636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1863a:	9802      	ldr	r0, [sp, #8]
   1863c:	f003 f9f2 	bl	1ba24 <rpc_at_client_message_free>
   18640:	2523      	movs	r5, #35	; 0x23
   18642:	e7e5      	b.n	18610 <at_interface_open+0x8c>
   18644:	2029      	movs	r0, #41	; 0x29
   18646:	f7f8 ff3f 	bl	114c8 <bsd_os_errno_set>
   1864a:	f04f 34ff 	mov.w	r4, #4294967295
   1864e:	e7e7      	b.n	18620 <at_interface_open+0x9c>
   18650:	2070      	movs	r0, #112	; 0x70
   18652:	f7f8 ff39 	bl	114c8 <bsd_os_errno_set>
   18656:	f04f 34ff 	mov.w	r4, #4294967295
   1865a:	e7e1      	b.n	18620 <at_interface_open+0x9c>
   1865c:	20024323 	.word	0x20024323
   18660:	0001846d 	.word	0x0001846d

00018664 <at_interface_close>:
   18664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18668:	b082      	sub	sp, #8
   1866a:	4606      	mov	r6, r0
   1866c:	f003 f8b4 	bl	1b7d8 <interface_socket_from_handle_get>
   18670:	2800      	cmp	r0, #0
   18672:	d051      	beq.n	18718 <at_interface_close+0xb4>
   18674:	230d      	movs	r3, #13
   18676:	6807      	ldr	r7, [r0, #0]
   18678:	6003      	str	r3, [r0, #0]
   1867a:	6803      	ldr	r3, [r0, #0]
   1867c:	4604      	mov	r4, r0
   1867e:	039b      	lsls	r3, r3, #14
   18680:	d42e      	bmi.n	186e0 <at_interface_close+0x7c>
   18682:	2100      	movs	r1, #0
   18684:	4668      	mov	r0, sp
   18686:	f003 f9ab 	bl	1b9e0 <rpc_at_client_request_alloc>
   1868a:	4605      	mov	r5, r0
   1868c:	4630      	mov	r0, r6
   1868e:	f003 f8a3 	bl	1b7d8 <interface_socket_from_handle_get>
   18692:	4680      	mov	r8, r0
   18694:	bb75      	cbnz	r5, 186f4 <at_interface_close+0x90>
   18696:	2304      	movs	r3, #4
   18698:	9800      	ldr	r0, [sp, #0]
   1869a:	2106      	movs	r1, #6
   1869c:	7203      	strb	r3, [r0, #8]
   1869e:	7245      	strb	r5, [r0, #9]
   186a0:	7285      	strb	r5, [r0, #10]
   186a2:	72c5      	strb	r5, [r0, #11]
   186a4:	60c6      	str	r6, [r0, #12]
   186a6:	f003 f9af 	bl	1ba08 <rpc_at_client_request_send>
   186aa:	b9f0      	cbnz	r0, 186ea <at_interface_close+0x86>
   186ac:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
   186b0:	220e      	movs	r2, #14
   186b2:	2900      	cmp	r1, #0
   186b4:	bf08      	it	eq
   186b6:	f04f 31ff 	moveq.w	r1, #4294967295
   186ba:	ab02      	add	r3, sp, #8
   186bc:	f843 1d04 	str.w	r1, [r3, #-4]!
   186c0:	4630      	mov	r0, r6
   186c2:	4611      	mov	r1, r2
   186c4:	f003 f814 	bl	1b6f0 <interface_socket_wait>
   186c8:	4605      	mov	r5, r0
   186ca:	b1a8      	cbz	r0, 186f8 <at_interface_close+0x94>
   186cc:	6027      	str	r7, [r4, #0]
   186ce:	4628      	mov	r0, r5
   186d0:	f04f 35ff 	mov.w	r5, #4294967295
   186d4:	f7f8 fef8 	bl	114c8 <bsd_os_errno_set>
   186d8:	4628      	mov	r0, r5
   186da:	b002      	add	sp, #8
   186dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   186e0:	6803      	ldr	r3, [r0, #0]
   186e2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   186e6:	6003      	str	r3, [r0, #0]
   186e8:	e7cb      	b.n	18682 <at_interface_close+0x1e>
   186ea:	9800      	ldr	r0, [sp, #0]
   186ec:	f003 f99a 	bl	1ba24 <rpc_at_client_message_free>
   186f0:	2523      	movs	r5, #35	; 0x23
   186f2:	e7eb      	b.n	186cc <at_interface_close+0x68>
   186f4:	250c      	movs	r5, #12
   186f6:	e7e9      	b.n	186cc <at_interface_close+0x68>
   186f8:	4630      	mov	r0, r6
   186fa:	f003 f86d 	bl	1b7d8 <interface_socket_from_handle_get>
   186fe:	b120      	cbz	r0, 1870a <at_interface_close+0xa6>
   18700:	6843      	ldr	r3, [r0, #4]
   18702:	b113      	cbz	r3, 1870a <at_interface_close+0xa6>
   18704:	6045      	str	r5, [r0, #4]
   18706:	461d      	mov	r5, r3
   18708:	e7e0      	b.n	186cc <at_interface_close+0x68>
   1870a:	4630      	mov	r0, r6
   1870c:	f002 ffa2 	bl	1b654 <interface_socket_free>
   18710:	4628      	mov	r0, r5
   18712:	b002      	add	sp, #8
   18714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18718:	2516      	movs	r5, #22
   1871a:	e7d8      	b.n	186ce <at_interface_close+0x6a>

0001871c <at_interface_read>:
   1871c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18720:	b087      	sub	sp, #28
   18722:	4688      	mov	r8, r1
   18724:	4615      	mov	r5, r2
   18726:	461e      	mov	r6, r3
   18728:	4607      	mov	r7, r0
   1872a:	f003 f855 	bl	1b7d8 <interface_socket_from_handle_get>
   1872e:	2800      	cmp	r0, #0
   18730:	d056      	beq.n	187e0 <at_interface_read+0xc4>
   18732:	2300      	movs	r3, #0
   18734:	4604      	mov	r4, r0
   18736:	e9cd 8502 	strd	r8, r5, [sp, #8]
   1873a:	e9cd 3304 	strd	r3, r3, [sp, #16]
   1873e:	bb66      	cbnz	r6, 1879a <at_interface_read+0x7e>
   18740:	f016 0502 	ands.w	r5, r6, #2
   18744:	d136      	bne.n	187b4 <at_interface_read+0x98>
   18746:	46a8      	mov	r8, r5
   18748:	6823      	ldr	r3, [r4, #0]
   1874a:	69e0      	ldr	r0, [r4, #28]
   1874c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   18750:	6023      	str	r3, [r4, #0]
   18752:	6803      	ldr	r3, [r0, #0]
   18754:	4632      	mov	r2, r6
   18756:	689b      	ldr	r3, [r3, #8]
   18758:	a902      	add	r1, sp, #8
   1875a:	4798      	blx	r3
   1875c:	f1b0 0900 	subs.w	r9, r0, #0
   18760:	da38      	bge.n	187d4 <at_interface_read+0xb8>
   18762:	bb05      	cbnz	r5, 187a6 <at_interface_read+0x8a>
   18764:	6a25      	ldr	r5, [r4, #32]
   18766:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1876a:	2d00      	cmp	r5, #0
   1876c:	bf08      	it	eq
   1876e:	f04f 35ff 	moveq.w	r5, #4294967295
   18772:	4611      	mov	r1, r2
   18774:	ab01      	add	r3, sp, #4
   18776:	4638      	mov	r0, r7
   18778:	9501      	str	r5, [sp, #4]
   1877a:	f002 ffb9 	bl	1b6f0 <interface_socket_wait>
   1877e:	4605      	mov	r5, r0
   18780:	2800      	cmp	r0, #0
   18782:	d1e1      	bne.n	18748 <at_interface_read+0x2c>
   18784:	4638      	mov	r0, r7
   18786:	f003 f827 	bl	1b7d8 <interface_socket_from_handle_get>
   1878a:	2800      	cmp	r0, #0
   1878c:	d0dc      	beq.n	18748 <at_interface_read+0x2c>
   1878e:	6845      	ldr	r5, [r0, #4]
   18790:	2d00      	cmp	r5, #0
   18792:	d0d9      	beq.n	18748 <at_interface_read+0x2c>
   18794:	f8c0 8004 	str.w	r8, [r0, #4]
   18798:	e7d6      	b.n	18748 <at_interface_read+0x2c>
   1879a:	f016 0f2a 	tst.w	r6, #42	; 0x2a
   1879e:	d1cf      	bne.n	18740 <at_interface_read+0x24>
   187a0:	252d      	movs	r5, #45	; 0x2d
   187a2:	f04f 39ff 	mov.w	r9, #4294967295
   187a6:	4628      	mov	r0, r5
   187a8:	f7f8 fe8e 	bl	114c8 <bsd_os_errno_set>
   187ac:	4648      	mov	r0, r9
   187ae:	b007      	add	sp, #28
   187b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   187b4:	6823      	ldr	r3, [r4, #0]
   187b6:	69e0      	ldr	r0, [r4, #28]
   187b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   187bc:	6023      	str	r3, [r4, #0]
   187be:	6803      	ldr	r3, [r0, #0]
   187c0:	4632      	mov	r2, r6
   187c2:	689b      	ldr	r3, [r3, #8]
   187c4:	a902      	add	r1, sp, #8
   187c6:	4798      	blx	r3
   187c8:	f1b0 3fff 	cmp.w	r0, #4294967295
   187cc:	4681      	mov	r9, r0
   187ce:	d1ed      	bne.n	187ac <at_interface_read+0x90>
   187d0:	2523      	movs	r5, #35	; 0x23
   187d2:	e7e8      	b.n	187a6 <at_interface_read+0x8a>
   187d4:	2d00      	cmp	r5, #0
   187d6:	d1e6      	bne.n	187a6 <at_interface_read+0x8a>
   187d8:	4648      	mov	r0, r9
   187da:	b007      	add	sp, #28
   187dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   187e0:	2516      	movs	r5, #22
   187e2:	f04f 39ff 	mov.w	r9, #4294967295
   187e6:	e7de      	b.n	187a6 <at_interface_read+0x8a>

000187e8 <at_interface_getopt>:
   187e8:	f003 b864 	b.w	1b8b4 <interface_socket_getopt>

000187ec <at_interface_setopt>:
   187ec:	f003 b81c 	b.w	1b828 <interface_socket_setopt>

000187f0 <rpc_at_event_handler>:
   187f0:	b570      	push	{r4, r5, r6, lr}
   187f2:	4606      	mov	r6, r0
   187f4:	b084      	sub	sp, #16
   187f6:	68c0      	ldr	r0, [r0, #12]
   187f8:	460d      	mov	r5, r1
   187fa:	f002 ffed 	bl	1b7d8 <interface_socket_from_handle_get>
   187fe:	4604      	mov	r4, r0
   18800:	b348      	cbz	r0, 18856 <rpc_at_event_handler+0x66>
   18802:	6803      	ldr	r3, [r0, #0]
   18804:	b29b      	uxth	r3, r3
   18806:	2b01      	cmp	r3, #1
   18808:	d01f      	beq.n	1884a <rpc_at_event_handler+0x5a>
   1880a:	6803      	ldr	r3, [r0, #0]
   1880c:	b29b      	uxth	r3, r3
   1880e:	2b0d      	cmp	r3, #13
   18810:	d029      	beq.n	18866 <rpc_at_event_handler+0x76>
   18812:	6803      	ldr	r3, [r0, #0]
   18814:	b29b      	uxth	r3, r3
   18816:	2b02      	cmp	r3, #2
   18818:	d02d      	beq.n	18876 <rpc_at_event_handler+0x86>
   1881a:	3d03      	subs	r5, #3
   1881c:	2d01      	cmp	r5, #1
   1881e:	d817      	bhi.n	18850 <rpc_at_event_handler+0x60>
   18820:	2500      	movs	r5, #0
   18822:	6873      	ldr	r3, [r6, #4]
   18824:	6832      	ldr	r2, [r6, #0]
   18826:	e9cd 5502 	strd	r5, r5, [sp, #8]
   1882a:	e9cd 2300 	strd	r2, r3, [sp]
   1882e:	69e0      	ldr	r0, [r4, #28]
   18830:	4669      	mov	r1, sp
   18832:	6803      	ldr	r3, [r0, #0]
   18834:	685b      	ldr	r3, [r3, #4]
   18836:	4798      	blx	r3
   18838:	3001      	adds	r0, #1
   1883a:	d019      	beq.n	18870 <rpc_at_event_handler+0x80>
   1883c:	4628      	mov	r0, r5
   1883e:	6823      	ldr	r3, [r4, #0]
   18840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   18844:	6023      	str	r3, [r4, #0]
   18846:	b004      	add	sp, #16
   18848:	bd70      	pop	{r4, r5, r6, pc}
   1884a:	2d02      	cmp	r5, #2
   1884c:	d1e5      	bne.n	1881a <rpc_at_event_handler+0x2a>
   1884e:	6005      	str	r5, [r0, #0]
   18850:	2000      	movs	r0, #0
   18852:	b004      	add	sp, #16
   18854:	bd70      	pop	{r4, r5, r6, pc}
   18856:	6830      	ldr	r0, [r6, #0]
   18858:	2800      	cmp	r0, #0
   1885a:	d0f9      	beq.n	18850 <rpc_at_event_handler+0x60>
   1885c:	f003 f8ea 	bl	1ba34 <rpc_at_client_data_free>
   18860:	4620      	mov	r0, r4
   18862:	b004      	add	sp, #16
   18864:	bd70      	pop	{r4, r5, r6, pc}
   18866:	2d02      	cmp	r5, #2
   18868:	d1d7      	bne.n	1881a <rpc_at_event_handler+0x2a>
   1886a:	230e      	movs	r3, #14
   1886c:	6003      	str	r3, [r0, #0]
   1886e:	e7ef      	b.n	18850 <rpc_at_event_handler+0x60>
   18870:	2002      	movs	r0, #2
   18872:	b004      	add	sp, #16
   18874:	bd70      	pop	{r4, r5, r6, pc}
   18876:	6803      	ldr	r3, [r0, #0]
   18878:	029b      	lsls	r3, r3, #10
   1887a:	d5ce      	bpl.n	1881a <rpc_at_event_handler+0x2a>
   1887c:	2d02      	cmp	r5, #2
   1887e:	d1cc      	bne.n	1881a <rpc_at_event_handler+0x2a>
   18880:	6803      	ldr	r3, [r0, #0]
   18882:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   18886:	6003      	str	r3, [r0, #0]
   18888:	6803      	ldr	r3, [r0, #0]
   1888a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1888e:	6003      	str	r3, [r0, #0]
   18890:	e7de      	b.n	18850 <rpc_at_event_handler+0x60>
   18892:	bf00      	nop

00018894 <ok_rsp_parser>:
   18894:	2000      	movs	r0, #0
   18896:	4770      	bx	lr

00018898 <pdn_state_get_parser>:
   18898:	2200      	movs	r2, #0
   1889a:	b570      	push	{r4, r5, r6, lr}
   1889c:	780b      	ldrb	r3, [r1, #0]
   1889e:	b084      	sub	sp, #16
   188a0:	460e      	mov	r6, r1
   188a2:	e9cd 2200 	strd	r2, r2, [sp]
   188a6:	e9cd 2202 	strd	r2, r2, [sp, #8]
   188aa:	b323      	cbz	r3, 188f6 <pdn_state_get_parser+0x5e>
   188ac:	460c      	mov	r4, r1
   188ae:	2b20      	cmp	r3, #32
   188b0:	460d      	mov	r5, r1
   188b2:	d01b      	beq.n	188ec <pdn_state_get_parser+0x54>
   188b4:	700b      	strb	r3, [r1, #0]
   188b6:	3201      	adds	r2, #1
   188b8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   188bc:	18b1      	adds	r1, r6, r2
   188be:	460d      	mov	r5, r1
   188c0:	2b00      	cmp	r3, #0
   188c2:	d1f4      	bne.n	188ae <pdn_state_get_parser+0x16>
   188c4:	2200      	movs	r2, #0
   188c6:	4b0d      	ldr	r3, [pc, #52]	; (188fc <pdn_state_get_parser+0x64>)
   188c8:	702a      	strb	r2, [r5, #0]
   188ca:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   188ce:	4a0c      	ldr	r2, [pc, #48]	; (18900 <pdn_state_get_parser+0x68>)
   188d0:	681b      	ldr	r3, [r3, #0]
   188d2:	2110      	movs	r1, #16
   188d4:	4668      	mov	r0, sp
   188d6:	f7f7 fedf 	bl	10698 <snprintf>
   188da:	4669      	mov	r1, sp
   188dc:	4630      	mov	r0, r6
   188de:	f005 fe45 	bl	1e56c <strstr>
   188e2:	3000      	adds	r0, #0
   188e4:	bf18      	it	ne
   188e6:	2001      	movne	r0, #1
   188e8:	b004      	add	sp, #16
   188ea:	bd70      	pop	{r4, r5, r6, pc}
   188ec:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   188f0:	2b00      	cmp	r3, #0
   188f2:	d1dc      	bne.n	188ae <pdn_state_get_parser+0x16>
   188f4:	e7e6      	b.n	188c4 <pdn_state_get_parser+0x2c>
   188f6:	460d      	mov	r5, r1
   188f8:	e7e4      	b.n	188c4 <pdn_state_get_parser+0x2c>
   188fa:	bf00      	nop
   188fc:	20020ec0 	.word	0x20020ec0
   18900:	00020ed4 	.word	0x00020ed4

00018904 <pdn_id_get_parser>:
   18904:	b570      	push	{r4, r5, r6, lr}
   18906:	780b      	ldrb	r3, [r1, #0]
   18908:	4606      	mov	r6, r0
   1890a:	b313      	cbz	r3, 18952 <pdn_id_get_parser+0x4e>
   1890c:	4608      	mov	r0, r1
   1890e:	2400      	movs	r4, #0
   18910:	460a      	mov	r2, r1
   18912:	2b20      	cmp	r3, #32
   18914:	4615      	mov	r5, r2
   18916:	d017      	beq.n	18948 <pdn_id_get_parser+0x44>
   18918:	7013      	strb	r3, [r2, #0]
   1891a:	3401      	adds	r4, #1
   1891c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   18920:	190a      	adds	r2, r1, r4
   18922:	4615      	mov	r5, r2
   18924:	2b00      	cmp	r3, #0
   18926:	d1f4      	bne.n	18912 <pdn_id_get_parser+0xe>
   18928:	2300      	movs	r3, #0
   1892a:	4608      	mov	r0, r1
   1892c:	702b      	strb	r3, [r5, #0]
   1892e:	213a      	movs	r1, #58	; 0x3a
   18930:	f005 fe4f 	bl	1e5d2 <strchr>
   18934:	b130      	cbz	r0, 18944 <pdn_id_get_parser+0x40>
   18936:	3001      	adds	r0, #1
   18938:	f005 fd03 	bl	1e342 <atoi>
   1893c:	4b06      	ldr	r3, [pc, #24]	; (18958 <pdn_id_get_parser+0x54>)
   1893e:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   18942:	6058      	str	r0, [r3, #4]
   18944:	2000      	movs	r0, #0
   18946:	bd70      	pop	{r4, r5, r6, pc}
   18948:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1894c:	2b00      	cmp	r3, #0
   1894e:	d1e0      	bne.n	18912 <pdn_id_get_parser+0xe>
   18950:	e7ea      	b.n	18928 <pdn_id_get_parser+0x24>
   18952:	460d      	mov	r5, r1
   18954:	e7e8      	b.n	18928 <pdn_id_get_parser+0x24>
   18956:	bf00      	nop
   18958:	20020ec0 	.word	0x20020ec0

0001895c <context_create_parser>:
   1895c:	b570      	push	{r4, r5, r6, lr}
   1895e:	780b      	ldrb	r3, [r1, #0]
   18960:	4606      	mov	r6, r0
   18962:	b313      	cbz	r3, 189aa <context_create_parser+0x4e>
   18964:	4608      	mov	r0, r1
   18966:	2400      	movs	r4, #0
   18968:	460a      	mov	r2, r1
   1896a:	2b20      	cmp	r3, #32
   1896c:	4615      	mov	r5, r2
   1896e:	d017      	beq.n	189a0 <context_create_parser+0x44>
   18970:	7013      	strb	r3, [r2, #0]
   18972:	3401      	adds	r4, #1
   18974:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   18978:	190a      	adds	r2, r1, r4
   1897a:	4615      	mov	r5, r2
   1897c:	2b00      	cmp	r3, #0
   1897e:	d1f4      	bne.n	1896a <context_create_parser+0xe>
   18980:	2300      	movs	r3, #0
   18982:	4608      	mov	r0, r1
   18984:	702b      	strb	r3, [r5, #0]
   18986:	213a      	movs	r1, #58	; 0x3a
   18988:	f005 fe23 	bl	1e5d2 <strchr>
   1898c:	b130      	cbz	r0, 1899c <context_create_parser+0x40>
   1898e:	4b08      	ldr	r3, [pc, #32]	; (189b0 <context_create_parser+0x54>)
   18990:	3001      	adds	r0, #1
   18992:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
   18996:	f005 fcd4 	bl	1e342 <atoi>
   1899a:	6020      	str	r0, [r4, #0]
   1899c:	2000      	movs	r0, #0
   1899e:	bd70      	pop	{r4, r5, r6, pc}
   189a0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   189a4:	2b00      	cmp	r3, #0
   189a6:	d1e0      	bne.n	1896a <context_create_parser+0xe>
   189a8:	e7ea      	b.n	18980 <context_create_parser+0x24>
   189aa:	460d      	mov	r5, r1
   189ac:	e7e8      	b.n	18980 <context_create_parser+0x24>
   189ae:	bf00      	nop
   189b0:	20020ec0 	.word	0x20020ec0

000189b4 <pdn_interface_init>:
   189b4:	f04f 33ff 	mov.w	r3, #4294967295
   189b8:	b510      	push	{r4, lr}
   189ba:	4c0b      	ldr	r4, [pc, #44]	; (189e8 <pdn_interface_init+0x34>)
   189bc:	2228      	movs	r2, #40	; 0x28
   189be:	2100      	movs	r1, #0
   189c0:	480a      	ldr	r0, [pc, #40]	; (189ec <pdn_interface_init+0x38>)
   189c2:	6023      	str	r3, [r4, #0]
   189c4:	f005 fe70 	bl	1e6a8 <memset>
   189c8:	f240 2201 	movw	r2, #513	; 0x201
   189cc:	2102      	movs	r1, #2
   189ce:	2066      	movs	r0, #102	; 0x66
   189d0:	f7ff fdd8 	bl	18584 <at_interface_open>
   189d4:	2800      	cmp	r0, #0
   189d6:	6020      	str	r0, [r4, #0]
   189d8:	db04      	blt.n	189e4 <pdn_interface_init+0x30>
   189da:	2201      	movs	r2, #1
   189dc:	4b04      	ldr	r3, [pc, #16]	; (189f0 <pdn_interface_init+0x3c>)
   189de:	2000      	movs	r0, #0
   189e0:	701a      	strb	r2, [r3, #0]
   189e2:	bd10      	pop	{r4, pc}
   189e4:	2003      	movs	r0, #3
   189e6:	bd10      	pop	{r4, pc}
   189e8:	20020dbc 	.word	0x20020dbc
   189ec:	20020ec0 	.word	0x20020ec0
   189f0:	20024324 	.word	0x20024324

000189f4 <pdn_interface_open>:
   189f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   189f8:	4b66      	ldr	r3, [pc, #408]	; (18b94 <pdn_interface_open+0x1a0>)
   189fa:	b083      	sub	sp, #12
   189fc:	781b      	ldrb	r3, [r3, #0]
   189fe:	2b00      	cmp	r3, #0
   18a00:	f000 80c2 	beq.w	18b88 <pdn_interface_open+0x194>
   18a04:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   18a08:	f040 80ad 	bne.w	18b66 <pdn_interface_open+0x172>
   18a0c:	4c62      	ldr	r4, [pc, #392]	; (18b98 <pdn_interface_open+0x1a4>)
   18a0e:	6825      	ldr	r5, [r4, #0]
   18a10:	b34d      	cbz	r5, 18a66 <pdn_interface_open+0x72>
   18a12:	6863      	ldr	r3, [r4, #4]
   18a14:	2b00      	cmp	r3, #0
   18a16:	f000 8098 	beq.w	18b4a <pdn_interface_open+0x156>
   18a1a:	68a3      	ldr	r3, [r4, #8]
   18a1c:	2b00      	cmp	r3, #0
   18a1e:	f000 8096 	beq.w	18b4e <pdn_interface_open+0x15a>
   18a22:	68e3      	ldr	r3, [r4, #12]
   18a24:	2b00      	cmp	r3, #0
   18a26:	f000 8094 	beq.w	18b52 <pdn_interface_open+0x15e>
   18a2a:	6923      	ldr	r3, [r4, #16]
   18a2c:	2b00      	cmp	r3, #0
   18a2e:	f000 8092 	beq.w	18b56 <pdn_interface_open+0x162>
   18a32:	6963      	ldr	r3, [r4, #20]
   18a34:	2b00      	cmp	r3, #0
   18a36:	f000 8090 	beq.w	18b5a <pdn_interface_open+0x166>
   18a3a:	69a3      	ldr	r3, [r4, #24]
   18a3c:	2b00      	cmp	r3, #0
   18a3e:	f000 808e 	beq.w	18b5e <pdn_interface_open+0x16a>
   18a42:	69e3      	ldr	r3, [r4, #28]
   18a44:	2b00      	cmp	r3, #0
   18a46:	f000 808c 	beq.w	18b62 <pdn_interface_open+0x16e>
   18a4a:	6a23      	ldr	r3, [r4, #32]
   18a4c:	b153      	cbz	r3, 18a64 <pdn_interface_open+0x70>
   18a4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18a50:	2509      	movs	r5, #9
   18a52:	b143      	cbz	r3, 18a66 <pdn_interface_open+0x72>
   18a54:	200c      	movs	r0, #12
   18a56:	f7f8 fd37 	bl	114c8 <bsd_os_errno_set>
   18a5a:	f04f 30ff 	mov.w	r0, #4294967295
   18a5e:	b003      	add	sp, #12
   18a60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18a64:	2508      	movs	r5, #8
   18a66:	2074      	movs	r0, #116	; 0x74
   18a68:	f002 fa5e 	bl	1af28 <nrf_malloc>
   18a6c:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
   18a70:	2800      	cmp	r0, #0
   18a72:	d0ef      	beq.n	18a54 <pdn_interface_open+0x60>
   18a74:	2274      	movs	r2, #116	; 0x74
   18a76:	2100      	movs	r1, #0
   18a78:	f005 fe16 	bl	1e6a8 <memset>
   18a7c:	2101      	movs	r1, #1
   18a7e:	2003      	movs	r0, #3
   18a80:	f04f 37ff 	mov.w	r7, #4294967295
   18a84:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   18a88:	4a44      	ldr	r2, [pc, #272]	; (18b9c <pdn_interface_open+0x1a8>)
   18a8a:	6099      	str	r1, [r3, #8]
   18a8c:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   18a90:	f44f 7180 	mov.w	r1, #256	; 0x100
   18a94:	6718      	str	r0, [r3, #112]	; 0x70
   18a96:	605f      	str	r7, [r3, #4]
   18a98:	4841      	ldr	r0, [pc, #260]	; (18ba0 <pdn_interface_open+0x1ac>)
   18a9a:	f8df 8110 	ldr.w	r8, [pc, #272]	; 18bac <pdn_interface_open+0x1b8>
   18a9e:	f7f7 fdfb 	bl	10698 <snprintf>
   18aa2:	483f      	ldr	r0, [pc, #252]	; (18ba0 <pdn_interface_open+0x1ac>)
   18aa4:	f8d8 9000 	ldr.w	r9, [r8]
   18aa8:	2600      	movs	r6, #0
   18aaa:	f005 fda0 	bl	1e5ee <strlen>
   18aae:	4633      	mov	r3, r6
   18ab0:	4602      	mov	r2, r0
   18ab2:	493b      	ldr	r1, [pc, #236]	; (18ba0 <pdn_interface_open+0x1ac>)
   18ab4:	4648      	mov	r0, r9
   18ab6:	9601      	str	r6, [sp, #4]
   18ab8:	9600      	str	r6, [sp, #0]
   18aba:	f7ff fcdb 	bl	18474 <at_interface_write>
   18abe:	4681      	mov	r9, r0
   18ac0:	4837      	ldr	r0, [pc, #220]	; (18ba0 <pdn_interface_open+0x1ac>)
   18ac2:	f005 fd94 	bl	1e5ee <strlen>
   18ac6:	4548      	cmp	r0, r9
   18ac8:	d153      	bne.n	18b72 <pdn_interface_open+0x17e>
   18aca:	4633      	mov	r3, r6
   18acc:	e9cd 6600 	strd	r6, r6, [sp]
   18ad0:	f44f 7280 	mov.w	r2, #256	; 0x100
   18ad4:	4932      	ldr	r1, [pc, #200]	; (18ba0 <pdn_interface_open+0x1ac>)
   18ad6:	f8d8 0000 	ldr.w	r0, [r8]
   18ada:	f7ff fe1f 	bl	1871c <at_interface_read>
   18ade:	4606      	mov	r6, r0
   18ae0:	4830      	ldr	r0, [pc, #192]	; (18ba4 <pdn_interface_open+0x1b0>)
   18ae2:	f005 fd84 	bl	1e5ee <strlen>
   18ae6:	4286      	cmp	r6, r0
   18ae8:	db15      	blt.n	18b16 <pdn_interface_open+0x122>
   18aea:	4602      	mov	r2, r0
   18aec:	492c      	ldr	r1, [pc, #176]	; (18ba0 <pdn_interface_open+0x1ac>)
   18aee:	482d      	ldr	r0, [pc, #180]	; (18ba4 <pdn_interface_open+0x1b0>)
   18af0:	f005 fd90 	bl	1e614 <strncmp>
   18af4:	b978      	cbnz	r0, 18b16 <pdn_interface_open+0x122>
   18af6:	492a      	ldr	r1, [pc, #168]	; (18ba0 <pdn_interface_open+0x1ac>)
   18af8:	4628      	mov	r0, r5
   18afa:	f7ff ff2f 	bl	1895c <context_create_parser>
   18afe:	b9b0      	cbnz	r0, 18b2e <pdn_interface_open+0x13a>
   18b00:	2202      	movs	r2, #2
   18b02:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   18b06:	f045 40f1 	orr.w	r0, r5, #2021654528	; 0x78800000
   18b0a:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   18b0e:	609a      	str	r2, [r3, #8]
   18b10:	b003      	add	sp, #12
   18b12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18b16:	4824      	ldr	r0, [pc, #144]	; (18ba8 <pdn_interface_open+0x1b4>)
   18b18:	f005 fd69 	bl	1e5ee <strlen>
   18b1c:	4920      	ldr	r1, [pc, #128]	; (18ba0 <pdn_interface_open+0x1ac>)
   18b1e:	4602      	mov	r2, r0
   18b20:	4821      	ldr	r0, [pc, #132]	; (18ba8 <pdn_interface_open+0x1b4>)
   18b22:	f005 fd77 	bl	1e614 <strncmp>
   18b26:	b960      	cbnz	r0, 18b42 <pdn_interface_open+0x14e>
   18b28:	2008      	movs	r0, #8
   18b2a:	f7f8 fccd 	bl	114c8 <bsd_os_errno_set>
   18b2e:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   18b32:	f002 fa03 	bl	1af3c <nrf_free>
   18b36:	2300      	movs	r3, #0
   18b38:	f04f 30ff 	mov.w	r0, #4294967295
   18b3c:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   18b40:	e78d      	b.n	18a5e <pdn_interface_open+0x6a>
   18b42:	2005      	movs	r0, #5
   18b44:	f7f8 fcc0 	bl	114c8 <bsd_os_errno_set>
   18b48:	e7f1      	b.n	18b2e <pdn_interface_open+0x13a>
   18b4a:	2501      	movs	r5, #1
   18b4c:	e78b      	b.n	18a66 <pdn_interface_open+0x72>
   18b4e:	2502      	movs	r5, #2
   18b50:	e789      	b.n	18a66 <pdn_interface_open+0x72>
   18b52:	2503      	movs	r5, #3
   18b54:	e787      	b.n	18a66 <pdn_interface_open+0x72>
   18b56:	2504      	movs	r5, #4
   18b58:	e785      	b.n	18a66 <pdn_interface_open+0x72>
   18b5a:	2505      	movs	r5, #5
   18b5c:	e783      	b.n	18a66 <pdn_interface_open+0x72>
   18b5e:	2506      	movs	r5, #6
   18b60:	e781      	b.n	18a66 <pdn_interface_open+0x72>
   18b62:	2507      	movs	r5, #7
   18b64:	e77f      	b.n	18a66 <pdn_interface_open+0x72>
   18b66:	2029      	movs	r0, #41	; 0x29
   18b68:	f7f8 fcae 	bl	114c8 <bsd_os_errno_set>
   18b6c:	f04f 30ff 	mov.w	r0, #4294967295
   18b70:	e775      	b.n	18a5e <pdn_interface_open+0x6a>
   18b72:	2005      	movs	r0, #5
   18b74:	f7f8 fca8 	bl	114c8 <bsd_os_errno_set>
   18b78:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   18b7c:	f002 f9de 	bl	1af3c <nrf_free>
   18b80:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
   18b84:	4638      	mov	r0, r7
   18b86:	e76a      	b.n	18a5e <pdn_interface_open+0x6a>
   18b88:	2070      	movs	r0, #112	; 0x70
   18b8a:	f7f8 fc9d 	bl	114c8 <bsd_os_errno_set>
   18b8e:	f04f 30ff 	mov.w	r0, #4294967295
   18b92:	e764      	b.n	18a5e <pdn_interface_open+0x6a>
   18b94:	20024324 	.word	0x20024324
   18b98:	20020ec0 	.word	0x20020ec0
   18b9c:	00020eb0 	.word	0x00020eb0
   18ba0:	20020dc0 	.word	0x20020dc0
   18ba4:	00020ec0 	.word	0x00020ec0
   18ba8:	00020ecc 	.word	0x00020ecc
   18bac:	20020dbc 	.word	0x20020dbc

00018bb0 <pdn_interface_connect>:
   18bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18bb4:	b083      	sub	sp, #12
   18bb6:	2900      	cmp	r1, #0
   18bb8:	f000 813d 	beq.w	18e36 <pdn_interface_connect+0x286>
   18bbc:	2a64      	cmp	r2, #100	; 0x64
   18bbe:	4691      	mov	r9, r2
   18bc0:	f200 8139 	bhi.w	18e36 <pdn_interface_connect+0x286>
   18bc4:	4605      	mov	r5, r0
   18bc6:	4608      	mov	r0, r1
   18bc8:	4688      	mov	r8, r1
   18bca:	f005 fd10 	bl	1e5ee <strlen>
   18bce:	2864      	cmp	r0, #100	; 0x64
   18bd0:	f200 8131 	bhi.w	18e36 <pdn_interface_connect+0x286>
   18bd4:	0c2b      	lsrs	r3, r5, #16
   18bd6:	4aa5      	ldr	r2, [pc, #660]	; (18e6c <pdn_interface_connect+0x2bc>)
   18bd8:	041b      	lsls	r3, r3, #16
   18bda:	4293      	cmp	r3, r2
   18bdc:	f040 8122 	bne.w	18e24 <pdn_interface_connect+0x274>
   18be0:	f025 45f1 	bic.w	r5, r5, #2021654528	; 0x78800000
   18be4:	f425 15d0 	bic.w	r5, r5, #1703936	; 0x1a0000
   18be8:	2d09      	cmp	r5, #9
   18bea:	f300 811b 	bgt.w	18e24 <pdn_interface_connect+0x274>
   18bee:	4fa0      	ldr	r7, [pc, #640]	; (18e70 <pdn_interface_connect+0x2c0>)
   18bf0:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   18bf4:	2b00      	cmp	r3, #0
   18bf6:	f000 8115 	beq.w	18e24 <pdn_interface_connect+0x274>
   18bfa:	689a      	ldr	r2, [r3, #8]
   18bfc:	2a00      	cmp	r2, #0
   18bfe:	f000 8111 	beq.w	18e24 <pdn_interface_connect+0x274>
   18c02:	689b      	ldr	r3, [r3, #8]
   18c04:	2b02      	cmp	r3, #2
   18c06:	f040 810d 	bne.w	18e24 <pdn_interface_connect+0x274>
   18c0a:	4e9a      	ldr	r6, [pc, #616]	; (18e74 <pdn_interface_connect+0x2c4>)
   18c0c:	4a9a      	ldr	r2, [pc, #616]	; (18e78 <pdn_interface_connect+0x2c8>)
   18c0e:	f44f 7180 	mov.w	r1, #256	; 0x100
   18c12:	4630      	mov	r0, r6
   18c14:	f7f7 fd40 	bl	10698 <snprintf>
   18c18:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   18c1c:	4604      	mov	r4, r0
   18c1e:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   18c22:	681b      	ldr	r3, [r3, #0]
   18c24:	4a95      	ldr	r2, [pc, #596]	; (18e7c <pdn_interface_connect+0x2cc>)
   18c26:	1830      	adds	r0, r6, r0
   18c28:	f7f7 fd36 	bl	10698 <snprintf>
   18c2c:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   18c30:	4404      	add	r4, r0
   18c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   18c34:	f003 0203 	and.w	r2, r3, #3
   18c38:	2a03      	cmp	r2, #3
   18c3a:	f000 80ea 	beq.w	18e12 <pdn_interface_connect+0x262>
   18c3e:	079b      	lsls	r3, r3, #30
   18c40:	eb06 0004 	add.w	r0, r6, r4
   18c44:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   18c48:	bf4c      	ite	mi
   18c4a:	4b8d      	ldrmi	r3, [pc, #564]	; (18e80 <pdn_interface_connect+0x2d0>)
   18c4c:	4b8d      	ldrpl	r3, [pc, #564]	; (18e84 <pdn_interface_connect+0x2d4>)
   18c4e:	4a8e      	ldr	r2, [pc, #568]	; (18e88 <pdn_interface_connect+0x2d8>)
   18c50:	f7f7 fd22 	bl	10698 <snprintf>
   18c54:	4404      	add	r4, r0
   18c56:	4643      	mov	r3, r8
   18c58:	4a8c      	ldr	r2, [pc, #560]	; (18e8c <pdn_interface_connect+0x2dc>)
   18c5a:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   18c5e:	1930      	adds	r0, r6, r4
   18c60:	f7f7 fd1a 	bl	10698 <snprintf>
   18c64:	4420      	add	r0, r4
   18c66:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   18c6a:	f300 80f7 	bgt.w	18e5c <pdn_interface_connect+0x2ac>
   18c6e:	f8df a23c 	ldr.w	sl, [pc, #572]	; 18eac <pdn_interface_connect+0x2fc>
   18c72:	4880      	ldr	r0, [pc, #512]	; (18e74 <pdn_interface_connect+0x2c4>)
   18c74:	f8da b000 	ldr.w	fp, [sl]
   18c78:	2400      	movs	r4, #0
   18c7a:	f005 fcb8 	bl	1e5ee <strlen>
   18c7e:	4623      	mov	r3, r4
   18c80:	4602      	mov	r2, r0
   18c82:	497c      	ldr	r1, [pc, #496]	; (18e74 <pdn_interface_connect+0x2c4>)
   18c84:	4658      	mov	r0, fp
   18c86:	9401      	str	r4, [sp, #4]
   18c88:	9400      	str	r4, [sp, #0]
   18c8a:	f7ff fbf3 	bl	18474 <at_interface_write>
   18c8e:	4683      	mov	fp, r0
   18c90:	4878      	ldr	r0, [pc, #480]	; (18e74 <pdn_interface_connect+0x2c4>)
   18c92:	f005 fcac 	bl	1e5ee <strlen>
   18c96:	4558      	cmp	r0, fp
   18c98:	d008      	beq.n	18cac <pdn_interface_connect+0xfc>
   18c9a:	2005      	movs	r0, #5
   18c9c:	f7f8 fc14 	bl	114c8 <bsd_os_errno_set>
   18ca0:	f04f 34ff 	mov.w	r4, #4294967295
   18ca4:	4620      	mov	r0, r4
   18ca6:	b003      	add	sp, #12
   18ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18cac:	4623      	mov	r3, r4
   18cae:	e9cd 4400 	strd	r4, r4, [sp]
   18cb2:	f44f 7280 	mov.w	r2, #256	; 0x100
   18cb6:	496f      	ldr	r1, [pc, #444]	; (18e74 <pdn_interface_connect+0x2c4>)
   18cb8:	f8da 0000 	ldr.w	r0, [sl]
   18cbc:	f7ff fd2e 	bl	1871c <at_interface_read>
   18cc0:	4604      	mov	r4, r0
   18cc2:	4873      	ldr	r0, [pc, #460]	; (18e90 <pdn_interface_connect+0x2e0>)
   18cc4:	f005 fc93 	bl	1e5ee <strlen>
   18cc8:	4284      	cmp	r4, r0
   18cca:	f2c0 8091 	blt.w	18df0 <pdn_interface_connect+0x240>
   18cce:	4602      	mov	r2, r0
   18cd0:	4968      	ldr	r1, [pc, #416]	; (18e74 <pdn_interface_connect+0x2c4>)
   18cd2:	486f      	ldr	r0, [pc, #444]	; (18e90 <pdn_interface_connect+0x2e0>)
   18cd4:	f005 fc9e 	bl	1e614 <strncmp>
   18cd8:	2800      	cmp	r0, #0
   18cda:	f040 8089 	bne.w	18df0 <pdn_interface_connect+0x240>
   18cde:	4965      	ldr	r1, [pc, #404]	; (18e74 <pdn_interface_connect+0x2c4>)
   18ce0:	4628      	mov	r0, r5
   18ce2:	f7ff fdd7 	bl	18894 <ok_rsp_parser>
   18ce6:	4604      	mov	r4, r0
   18ce8:	2800      	cmp	r0, #0
   18cea:	d1db      	bne.n	18ca4 <pdn_interface_connect+0xf4>
   18cec:	4a69      	ldr	r2, [pc, #420]	; (18e94 <pdn_interface_connect+0x2e4>)
   18cee:	f44f 7180 	mov.w	r1, #256	; 0x100
   18cf2:	4860      	ldr	r0, [pc, #384]	; (18e74 <pdn_interface_connect+0x2c4>)
   18cf4:	f7f7 fcd0 	bl	10698 <snprintf>
   18cf8:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   18cfc:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   18d00:	681b      	ldr	r3, [r3, #0]
   18d02:	4a65      	ldr	r2, [pc, #404]	; (18e98 <pdn_interface_connect+0x2e8>)
   18d04:	4430      	add	r0, r6
   18d06:	f7f7 fcc7 	bl	10698 <snprintf>
   18d0a:	485a      	ldr	r0, [pc, #360]	; (18e74 <pdn_interface_connect+0x2c4>)
   18d0c:	f8da b000 	ldr.w	fp, [sl]
   18d10:	f005 fc6d 	bl	1e5ee <strlen>
   18d14:	4623      	mov	r3, r4
   18d16:	4602      	mov	r2, r0
   18d18:	4956      	ldr	r1, [pc, #344]	; (18e74 <pdn_interface_connect+0x2c4>)
   18d1a:	4658      	mov	r0, fp
   18d1c:	9401      	str	r4, [sp, #4]
   18d1e:	9400      	str	r4, [sp, #0]
   18d20:	f7ff fba8 	bl	18474 <at_interface_write>
   18d24:	4683      	mov	fp, r0
   18d26:	4853      	ldr	r0, [pc, #332]	; (18e74 <pdn_interface_connect+0x2c4>)
   18d28:	f005 fc61 	bl	1e5ee <strlen>
   18d2c:	4558      	cmp	r0, fp
   18d2e:	d1b4      	bne.n	18c9a <pdn_interface_connect+0xea>
   18d30:	4623      	mov	r3, r4
   18d32:	f44f 7280 	mov.w	r2, #256	; 0x100
   18d36:	494f      	ldr	r1, [pc, #316]	; (18e74 <pdn_interface_connect+0x2c4>)
   18d38:	f8da 0000 	ldr.w	r0, [sl]
   18d3c:	e9cd 4400 	strd	r4, r4, [sp]
   18d40:	f7ff fcec 	bl	1871c <at_interface_read>
   18d44:	4683      	mov	fp, r0
   18d46:	4852      	ldr	r0, [pc, #328]	; (18e90 <pdn_interface_connect+0x2e0>)
   18d48:	f005 fc51 	bl	1e5ee <strlen>
   18d4c:	4583      	cmp	fp, r0
   18d4e:	db4f      	blt.n	18df0 <pdn_interface_connect+0x240>
   18d50:	4602      	mov	r2, r0
   18d52:	4948      	ldr	r1, [pc, #288]	; (18e74 <pdn_interface_connect+0x2c4>)
   18d54:	484e      	ldr	r0, [pc, #312]	; (18e90 <pdn_interface_connect+0x2e0>)
   18d56:	f005 fc5d 	bl	1e614 <strncmp>
   18d5a:	2800      	cmp	r0, #0
   18d5c:	d148      	bne.n	18df0 <pdn_interface_connect+0x240>
   18d5e:	2103      	movs	r1, #3
   18d60:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   18d64:	464a      	mov	r2, r9
   18d66:	6099      	str	r1, [r3, #8]
   18d68:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   18d6c:	4641      	mov	r1, r8
   18d6e:	300c      	adds	r0, #12
   18d70:	f005 fc6f 	bl	1e652 <memcpy>
   18d74:	4a49      	ldr	r2, [pc, #292]	; (18e9c <pdn_interface_connect+0x2ec>)
   18d76:	f44f 7180 	mov.w	r1, #256	; 0x100
   18d7a:	483e      	ldr	r0, [pc, #248]	; (18e74 <pdn_interface_connect+0x2c4>)
   18d7c:	f7f7 fc8c 	bl	10698 <snprintf>
   18d80:	4601      	mov	r1, r0
   18d82:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   18d86:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   18d8a:	681b      	ldr	r3, [r3, #0]
   18d8c:	4a42      	ldr	r2, [pc, #264]	; (18e98 <pdn_interface_connect+0x2e8>)
   18d8e:	1830      	adds	r0, r6, r0
   18d90:	f7f7 fc82 	bl	10698 <snprintf>
   18d94:	4837      	ldr	r0, [pc, #220]	; (18e74 <pdn_interface_connect+0x2c4>)
   18d96:	f8da 6000 	ldr.w	r6, [sl]
   18d9a:	f005 fc28 	bl	1e5ee <strlen>
   18d9e:	4623      	mov	r3, r4
   18da0:	4602      	mov	r2, r0
   18da2:	4934      	ldr	r1, [pc, #208]	; (18e74 <pdn_interface_connect+0x2c4>)
   18da4:	4630      	mov	r0, r6
   18da6:	9401      	str	r4, [sp, #4]
   18da8:	9400      	str	r4, [sp, #0]
   18daa:	f7ff fb63 	bl	18474 <at_interface_write>
   18dae:	4606      	mov	r6, r0
   18db0:	4830      	ldr	r0, [pc, #192]	; (18e74 <pdn_interface_connect+0x2c4>)
   18db2:	f005 fc1c 	bl	1e5ee <strlen>
   18db6:	42b0      	cmp	r0, r6
   18db8:	d153      	bne.n	18e62 <pdn_interface_connect+0x2b2>
   18dba:	4623      	mov	r3, r4
   18dbc:	f44f 7280 	mov.w	r2, #256	; 0x100
   18dc0:	492c      	ldr	r1, [pc, #176]	; (18e74 <pdn_interface_connect+0x2c4>)
   18dc2:	f8da 0000 	ldr.w	r0, [sl]
   18dc6:	e9cd 4400 	strd	r4, r4, [sp]
   18dca:	f7ff fca7 	bl	1871c <at_interface_read>
   18dce:	4606      	mov	r6, r0
   18dd0:	4833      	ldr	r0, [pc, #204]	; (18ea0 <pdn_interface_connect+0x2f0>)
   18dd2:	f005 fc0c 	bl	1e5ee <strlen>
   18dd6:	4286      	cmp	r6, r0
   18dd8:	db33      	blt.n	18e42 <pdn_interface_connect+0x292>
   18dda:	4602      	mov	r2, r0
   18ddc:	4925      	ldr	r1, [pc, #148]	; (18e74 <pdn_interface_connect+0x2c4>)
   18dde:	4830      	ldr	r0, [pc, #192]	; (18ea0 <pdn_interface_connect+0x2f0>)
   18de0:	f005 fc18 	bl	1e614 <strncmp>
   18de4:	bb68      	cbnz	r0, 18e42 <pdn_interface_connect+0x292>
   18de6:	4628      	mov	r0, r5
   18de8:	4922      	ldr	r1, [pc, #136]	; (18e74 <pdn_interface_connect+0x2c4>)
   18dea:	f7ff fd8b 	bl	18904 <pdn_id_get_parser>
   18dee:	e759      	b.n	18ca4 <pdn_interface_connect+0xf4>
   18df0:	482c      	ldr	r0, [pc, #176]	; (18ea4 <pdn_interface_connect+0x2f4>)
   18df2:	f005 fbfc 	bl	1e5ee <strlen>
   18df6:	491f      	ldr	r1, [pc, #124]	; (18e74 <pdn_interface_connect+0x2c4>)
   18df8:	4602      	mov	r2, r0
   18dfa:	482a      	ldr	r0, [pc, #168]	; (18ea4 <pdn_interface_connect+0x2f4>)
   18dfc:	f005 fc0a 	bl	1e614 <strncmp>
   18e00:	2800      	cmp	r0, #0
   18e02:	f47f af4a 	bne.w	18c9a <pdn_interface_connect+0xea>
   18e06:	2008      	movs	r0, #8
   18e08:	f7f8 fb5e 	bl	114c8 <bsd_os_errno_set>
   18e0c:	f04f 34ff 	mov.w	r4, #4294967295
   18e10:	e748      	b.n	18ca4 <pdn_interface_connect+0xf4>
   18e12:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   18e16:	1930      	adds	r0, r6, r4
   18e18:	4b23      	ldr	r3, [pc, #140]	; (18ea8 <pdn_interface_connect+0x2f8>)
   18e1a:	4a1b      	ldr	r2, [pc, #108]	; (18e88 <pdn_interface_connect+0x2d8>)
   18e1c:	f7f7 fc3c 	bl	10698 <snprintf>
   18e20:	4404      	add	r4, r0
   18e22:	e718      	b.n	18c56 <pdn_interface_connect+0xa6>
   18e24:	f04f 34ff 	mov.w	r4, #4294967295
   18e28:	2009      	movs	r0, #9
   18e2a:	f7f8 fb4d 	bl	114c8 <bsd_os_errno_set>
   18e2e:	4620      	mov	r0, r4
   18e30:	b003      	add	sp, #12
   18e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e36:	2016      	movs	r0, #22
   18e38:	f7f8 fb46 	bl	114c8 <bsd_os_errno_set>
   18e3c:	f04f 34ff 	mov.w	r4, #4294967295
   18e40:	e730      	b.n	18ca4 <pdn_interface_connect+0xf4>
   18e42:	4818      	ldr	r0, [pc, #96]	; (18ea4 <pdn_interface_connect+0x2f4>)
   18e44:	f005 fbd3 	bl	1e5ee <strlen>
   18e48:	490a      	ldr	r1, [pc, #40]	; (18e74 <pdn_interface_connect+0x2c4>)
   18e4a:	4602      	mov	r2, r0
   18e4c:	4815      	ldr	r0, [pc, #84]	; (18ea4 <pdn_interface_connect+0x2f4>)
   18e4e:	f005 fbe1 	bl	1e614 <strncmp>
   18e52:	b930      	cbnz	r0, 18e62 <pdn_interface_connect+0x2b2>
   18e54:	2008      	movs	r0, #8
   18e56:	f7f8 fb37 	bl	114c8 <bsd_os_errno_set>
   18e5a:	e723      	b.n	18ca4 <pdn_interface_connect+0xf4>
   18e5c:	f04f 34ff 	mov.w	r4, #4294967295
   18e60:	e720      	b.n	18ca4 <pdn_interface_connect+0xf4>
   18e62:	2005      	movs	r0, #5
   18e64:	f7f8 fb30 	bl	114c8 <bsd_os_errno_set>
   18e68:	e71c      	b.n	18ca4 <pdn_interface_connect+0xf4>
   18e6a:	bf00      	nop
   18e6c:	789a0000 	.word	0x789a0000
   18e70:	20020ec0 	.word	0x20020ec0
   18e74:	20020dc0 	.word	0x20020dc0
   18e78:	00020e38 	.word	0x00020e38
   18e7c:	00020e44 	.word	0x00020e44
   18e80:	00020e58 	.word	0x00020e58
   18e84:	00020e60 	.word	0x00020e60
   18e88:	00020e50 	.word	0x00020e50
   18e8c:	00020e94 	.word	0x00020e94
   18e90:	00020e64 	.word	0x00020e64
   18e94:	00020e68 	.word	0x00020e68
   18e98:	00020e74 	.word	0x00020e74
   18e9c:	00020e78 	.word	0x00020e78
   18ea0:	00020e88 	.word	0x00020e88
   18ea4:	00020ecc 	.word	0x00020ecc
   18ea8:	00020e48 	.word	0x00020e48
   18eac:	20020dbc 	.word	0x20020dbc

00018eb0 <pdn_interface_close>:
   18eb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18eb4:	4a6b      	ldr	r2, [pc, #428]	; (19064 <pdn_interface_close+0x1b4>)
   18eb6:	0c03      	lsrs	r3, r0, #16
   18eb8:	041b      	lsls	r3, r3, #16
   18eba:	4293      	cmp	r3, r2
   18ebc:	b083      	sub	sp, #12
   18ebe:	f040 80ac 	bne.w	1901a <pdn_interface_close+0x16a>
   18ec2:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   18ec6:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   18eca:	2c09      	cmp	r4, #9
   18ecc:	f300 80a5 	bgt.w	1901a <pdn_interface_close+0x16a>
   18ed0:	4d65      	ldr	r5, [pc, #404]	; (19068 <pdn_interface_close+0x1b8>)
   18ed2:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   18ed6:	2800      	cmp	r0, #0
   18ed8:	f000 809f 	beq.w	1901a <pdn_interface_close+0x16a>
   18edc:	6883      	ldr	r3, [r0, #8]
   18ede:	2b00      	cmp	r3, #0
   18ee0:	f000 809b 	beq.w	1901a <pdn_interface_close+0x16a>
   18ee4:	6883      	ldr	r3, [r0, #8]
   18ee6:	2b03      	cmp	r3, #3
   18ee8:	d00b      	beq.n	18f02 <pdn_interface_close+0x52>
   18eea:	6883      	ldr	r3, [r0, #8]
   18eec:	2b02      	cmp	r3, #2
   18eee:	d055      	beq.n	18f9c <pdn_interface_close+0xec>
   18ef0:	f002 f824 	bl	1af3c <nrf_free>
   18ef4:	2300      	movs	r3, #0
   18ef6:	4618      	mov	r0, r3
   18ef8:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   18efc:	b003      	add	sp, #12
   18efe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18f02:	4e5a      	ldr	r6, [pc, #360]	; (1906c <pdn_interface_close+0x1bc>)
   18f04:	4a5a      	ldr	r2, [pc, #360]	; (19070 <pdn_interface_close+0x1c0>)
   18f06:	f44f 7180 	mov.w	r1, #256	; 0x100
   18f0a:	4630      	mov	r0, r6
   18f0c:	f7f7 fbc4 	bl	10698 <snprintf>
   18f10:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   18f14:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   18f18:	681b      	ldr	r3, [r3, #0]
   18f1a:	4a56      	ldr	r2, [pc, #344]	; (19074 <pdn_interface_close+0x1c4>)
   18f1c:	4430      	add	r0, r6
   18f1e:	f8df 8164 	ldr.w	r8, [pc, #356]	; 19084 <pdn_interface_close+0x1d4>
   18f22:	f7f7 fbb9 	bl	10698 <snprintf>
   18f26:	4630      	mov	r0, r6
   18f28:	f8d8 9000 	ldr.w	r9, [r8]
   18f2c:	2700      	movs	r7, #0
   18f2e:	f005 fb5e 	bl	1e5ee <strlen>
   18f32:	4631      	mov	r1, r6
   18f34:	4602      	mov	r2, r0
   18f36:	463b      	mov	r3, r7
   18f38:	4648      	mov	r0, r9
   18f3a:	9701      	str	r7, [sp, #4]
   18f3c:	9700      	str	r7, [sp, #0]
   18f3e:	f7ff fa99 	bl	18474 <at_interface_write>
   18f42:	4681      	mov	r9, r0
   18f44:	4630      	mov	r0, r6
   18f46:	f005 fb52 	bl	1e5ee <strlen>
   18f4a:	4548      	cmp	r0, r9
   18f4c:	f040 8082 	bne.w	19054 <pdn_interface_close+0x1a4>
   18f50:	463b      	mov	r3, r7
   18f52:	e9cd 7700 	strd	r7, r7, [sp]
   18f56:	f44f 7280 	mov.w	r2, #256	; 0x100
   18f5a:	4631      	mov	r1, r6
   18f5c:	f8d8 0000 	ldr.w	r0, [r8]
   18f60:	f7ff fbdc 	bl	1871c <at_interface_read>
   18f64:	4607      	mov	r7, r0
   18f66:	4844      	ldr	r0, [pc, #272]	; (19078 <pdn_interface_close+0x1c8>)
   18f68:	f005 fb41 	bl	1e5ee <strlen>
   18f6c:	4287      	cmp	r7, r0
   18f6e:	da5a      	bge.n	19026 <pdn_interface_close+0x176>
   18f70:	4842      	ldr	r0, [pc, #264]	; (1907c <pdn_interface_close+0x1cc>)
   18f72:	f005 fb3c 	bl	1e5ee <strlen>
   18f76:	493d      	ldr	r1, [pc, #244]	; (1906c <pdn_interface_close+0x1bc>)
   18f78:	4602      	mov	r2, r0
   18f7a:	4840      	ldr	r0, [pc, #256]	; (1907c <pdn_interface_close+0x1cc>)
   18f7c:	f005 fb4a 	bl	1e614 <strncmp>
   18f80:	2800      	cmp	r0, #0
   18f82:	d167      	bne.n	19054 <pdn_interface_close+0x1a4>
   18f84:	2008      	movs	r0, #8
   18f86:	f7f8 fa9f 	bl	114c8 <bsd_os_errno_set>
   18f8a:	2202      	movs	r2, #2
   18f8c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   18f90:	609a      	str	r2, [r3, #8]
   18f92:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   18f96:	6883      	ldr	r3, [r0, #8]
   18f98:	2b02      	cmp	r3, #2
   18f9a:	d1a9      	bne.n	18ef0 <pdn_interface_close+0x40>
   18f9c:	4e33      	ldr	r6, [pc, #204]	; (1906c <pdn_interface_close+0x1bc>)
   18f9e:	4a38      	ldr	r2, [pc, #224]	; (19080 <pdn_interface_close+0x1d0>)
   18fa0:	f44f 7180 	mov.w	r1, #256	; 0x100
   18fa4:	4630      	mov	r0, r6
   18fa6:	f7f7 fb77 	bl	10698 <snprintf>
   18faa:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   18fae:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   18fb2:	681b      	ldr	r3, [r3, #0]
   18fb4:	4a2f      	ldr	r2, [pc, #188]	; (19074 <pdn_interface_close+0x1c4>)
   18fb6:	4430      	add	r0, r6
   18fb8:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 19084 <pdn_interface_close+0x1d4>
   18fbc:	f7f7 fb6c 	bl	10698 <snprintf>
   18fc0:	4630      	mov	r0, r6
   18fc2:	f8d8 9000 	ldr.w	r9, [r8]
   18fc6:	2700      	movs	r7, #0
   18fc8:	f005 fb11 	bl	1e5ee <strlen>
   18fcc:	4631      	mov	r1, r6
   18fce:	4602      	mov	r2, r0
   18fd0:	463b      	mov	r3, r7
   18fd2:	4648      	mov	r0, r9
   18fd4:	9701      	str	r7, [sp, #4]
   18fd6:	9700      	str	r7, [sp, #0]
   18fd8:	f7ff fa4c 	bl	18474 <at_interface_write>
   18fdc:	4681      	mov	r9, r0
   18fde:	4630      	mov	r0, r6
   18fe0:	f005 fb05 	bl	1e5ee <strlen>
   18fe4:	4548      	cmp	r0, r9
   18fe6:	d139      	bne.n	1905c <pdn_interface_close+0x1ac>
   18fe8:	463b      	mov	r3, r7
   18fea:	e9cd 7700 	strd	r7, r7, [sp]
   18fee:	f44f 7280 	mov.w	r2, #256	; 0x100
   18ff2:	4631      	mov	r1, r6
   18ff4:	f8d8 0000 	ldr.w	r0, [r8]
   18ff8:	f7ff fb90 	bl	1871c <at_interface_read>
   18ffc:	4607      	mov	r7, r0
   18ffe:	481e      	ldr	r0, [pc, #120]	; (19078 <pdn_interface_close+0x1c8>)
   19000:	f005 faf5 	bl	1e5ee <strlen>
   19004:	4287      	cmp	r7, r0
   19006:	db16      	blt.n	19036 <pdn_interface_close+0x186>
   19008:	4602      	mov	r2, r0
   1900a:	4631      	mov	r1, r6
   1900c:	481a      	ldr	r0, [pc, #104]	; (19078 <pdn_interface_close+0x1c8>)
   1900e:	f005 fb01 	bl	1e614 <strncmp>
   19012:	b980      	cbnz	r0, 19036 <pdn_interface_close+0x186>
   19014:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   19018:	e76a      	b.n	18ef0 <pdn_interface_close+0x40>
   1901a:	2009      	movs	r0, #9
   1901c:	f7f8 fa54 	bl	114c8 <bsd_os_errno_set>
   19020:	f04f 30ff 	mov.w	r0, #4294967295
   19024:	e76a      	b.n	18efc <pdn_interface_close+0x4c>
   19026:	4602      	mov	r2, r0
   19028:	4631      	mov	r1, r6
   1902a:	4813      	ldr	r0, [pc, #76]	; (19078 <pdn_interface_close+0x1c8>)
   1902c:	f005 faf2 	bl	1e614 <strncmp>
   19030:	2800      	cmp	r0, #0
   19032:	d0aa      	beq.n	18f8a <pdn_interface_close+0xda>
   19034:	e79c      	b.n	18f70 <pdn_interface_close+0xc0>
   19036:	4811      	ldr	r0, [pc, #68]	; (1907c <pdn_interface_close+0x1cc>)
   19038:	f005 fad9 	bl	1e5ee <strlen>
   1903c:	490b      	ldr	r1, [pc, #44]	; (1906c <pdn_interface_close+0x1bc>)
   1903e:	4602      	mov	r2, r0
   19040:	480e      	ldr	r0, [pc, #56]	; (1907c <pdn_interface_close+0x1cc>)
   19042:	f005 fae7 	bl	1e614 <strncmp>
   19046:	b948      	cbnz	r0, 1905c <pdn_interface_close+0x1ac>
   19048:	2008      	movs	r0, #8
   1904a:	f7f8 fa3d 	bl	114c8 <bsd_os_errno_set>
   1904e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   19052:	e74d      	b.n	18ef0 <pdn_interface_close+0x40>
   19054:	2005      	movs	r0, #5
   19056:	f7f8 fa37 	bl	114c8 <bsd_os_errno_set>
   1905a:	e796      	b.n	18f8a <pdn_interface_close+0xda>
   1905c:	2005      	movs	r0, #5
   1905e:	f7f8 fa33 	bl	114c8 <bsd_os_errno_set>
   19062:	e7d7      	b.n	19014 <pdn_interface_close+0x164>
   19064:	789a0000 	.word	0x789a0000
   19068:	20020ec0 	.word	0x20020ec0
   1906c:	20020dc0 	.word	0x20020dc0
   19070:	00020e2c 	.word	0x00020e2c
   19074:	00020e74 	.word	0x00020e74
   19078:	00020e64 	.word	0x00020e64
   1907c:	00020ecc 	.word	0x00020ecc
   19080:	00020e38 	.word	0x00020e38
   19084:	20020dbc 	.word	0x20020dbc

00019088 <pdn_interface_setopt>:
   19088:	b538      	push	{r3, r4, r5, lr}
   1908a:	f240 2502 	movw	r5, #514	; 0x202
   1908e:	42a9      	cmp	r1, r5
   19090:	9c04      	ldr	r4, [sp, #16]
   19092:	d140      	bne.n	19116 <pdn_interface_setopt+0x8e>
   19094:	2b00      	cmp	r3, #0
   19096:	d03e      	beq.n	19116 <pdn_interface_setopt+0x8e>
   19098:	2c00      	cmp	r4, #0
   1909a:	d03c      	beq.n	19116 <pdn_interface_setopt+0x8e>
   1909c:	0c01      	lsrs	r1, r0, #16
   1909e:	4d22      	ldr	r5, [pc, #136]	; (19128 <pdn_interface_setopt+0xa0>)
   190a0:	0409      	lsls	r1, r1, #16
   190a2:	42a9      	cmp	r1, r5
   190a4:	d005      	beq.n	190b2 <pdn_interface_setopt+0x2a>
   190a6:	2009      	movs	r0, #9
   190a8:	f7f8 fa0e 	bl	114c8 <bsd_os_errno_set>
   190ac:	f04f 30ff 	mov.w	r0, #4294967295
   190b0:	bd38      	pop	{r3, r4, r5, pc}
   190b2:	f020 40f1 	bic.w	r0, r0, #2021654528	; 0x78800000
   190b6:	f420 10d0 	bic.w	r0, r0, #1703936	; 0x1a0000
   190ba:	2809      	cmp	r0, #9
   190bc:	dcf3      	bgt.n	190a6 <pdn_interface_setopt+0x1e>
   190be:	491b      	ldr	r1, [pc, #108]	; (1912c <pdn_interface_setopt+0xa4>)
   190c0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   190c4:	2900      	cmp	r1, #0
   190c6:	d0ee      	beq.n	190a6 <pdn_interface_setopt+0x1e>
   190c8:	6888      	ldr	r0, [r1, #8]
   190ca:	2800      	cmp	r0, #0
   190cc:	d0eb      	beq.n	190a6 <pdn_interface_setopt+0x1e>
   190ce:	2a01      	cmp	r2, #1
   190d0:	d128      	bne.n	19124 <pdn_interface_setopt+0x9c>
   190d2:	688a      	ldr	r2, [r1, #8]
   190d4:	b1ea      	cbz	r2, 19112 <pdn_interface_setopt+0x8a>
   190d6:	688a      	ldr	r2, [r1, #8]
   190d8:	2a03      	cmp	r2, #3
   190da:	d01a      	beq.n	19112 <pdn_interface_setopt+0x8a>
   190dc:	688a      	ldr	r2, [r1, #8]
   190de:	2a04      	cmp	r2, #4
   190e0:	d017      	beq.n	19112 <pdn_interface_setopt+0x8a>
   190e2:	08a2      	lsrs	r2, r4, #2
   190e4:	1e50      	subs	r0, r2, #1
   190e6:	2801      	cmp	r0, #1
   190e8:	d815      	bhi.n	19116 <pdn_interface_setopt+0x8e>
   190ea:	07a0      	lsls	r0, r4, #30
   190ec:	d113      	bne.n	19116 <pdn_interface_setopt+0x8e>
   190ee:	6818      	ldr	r0, [r3, #0]
   190f0:	2802      	cmp	r0, #2
   190f2:	d012      	beq.n	1911a <pdn_interface_setopt+0x92>
   190f4:	280a      	cmp	r0, #10
   190f6:	d10e      	bne.n	19116 <pdn_interface_setopt+0x8e>
   190f8:	2002      	movs	r0, #2
   190fa:	2a02      	cmp	r2, #2
   190fc:	d106      	bne.n	1910c <pdn_interface_setopt+0x84>
   190fe:	685b      	ldr	r3, [r3, #4]
   19100:	2b02      	cmp	r3, #2
   19102:	d00c      	beq.n	1911e <pdn_interface_setopt+0x96>
   19104:	2b0a      	cmp	r3, #10
   19106:	d106      	bne.n	19116 <pdn_interface_setopt+0x8e>
   19108:	f040 0002 	orr.w	r0, r0, #2
   1910c:	6708      	str	r0, [r1, #112]	; 0x70
   1910e:	2000      	movs	r0, #0
   19110:	bd38      	pop	{r3, r4, r5, pc}
   19112:	200e      	movs	r0, #14
   19114:	e7c8      	b.n	190a8 <pdn_interface_setopt+0x20>
   19116:	2016      	movs	r0, #22
   19118:	e7c6      	b.n	190a8 <pdn_interface_setopt+0x20>
   1911a:	2001      	movs	r0, #1
   1911c:	e7ed      	b.n	190fa <pdn_interface_setopt+0x72>
   1911e:	f040 0001 	orr.w	r0, r0, #1
   19122:	e7f3      	b.n	1910c <pdn_interface_setopt+0x84>
   19124:	202d      	movs	r0, #45	; 0x2d
   19126:	e7bf      	b.n	190a8 <pdn_interface_setopt+0x20>
   19128:	789a0000 	.word	0x789a0000
   1912c:	20020ec0 	.word	0x20020ec0

00019130 <pdn_interface_getopt>:
   19130:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19134:	f240 2402 	movw	r4, #514	; 0x202
   19138:	b083      	sub	sp, #12
   1913a:	42a1      	cmp	r1, r4
   1913c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1913e:	f040 809f 	bne.w	19280 <pdn_interface_getopt+0x150>
   19142:	461e      	mov	r6, r3
   19144:	2b00      	cmp	r3, #0
   19146:	f000 809b 	beq.w	19280 <pdn_interface_getopt+0x150>
   1914a:	2d00      	cmp	r5, #0
   1914c:	f000 8098 	beq.w	19280 <pdn_interface_getopt+0x150>
   19150:	0c03      	lsrs	r3, r0, #16
   19152:	4955      	ldr	r1, [pc, #340]	; (192a8 <pdn_interface_getopt+0x178>)
   19154:	041b      	lsls	r3, r3, #16
   19156:	428b      	cmp	r3, r1
   19158:	f040 8094 	bne.w	19284 <pdn_interface_getopt+0x154>
   1915c:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   19160:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   19164:	2c09      	cmp	r4, #9
   19166:	f300 808d 	bgt.w	19284 <pdn_interface_getopt+0x154>
   1916a:	4b50      	ldr	r3, [pc, #320]	; (192ac <pdn_interface_getopt+0x17c>)
   1916c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   19170:	2b00      	cmp	r3, #0
   19172:	f000 8087 	beq.w	19284 <pdn_interface_getopt+0x154>
   19176:	6899      	ldr	r1, [r3, #8]
   19178:	2900      	cmp	r1, #0
   1917a:	f000 8083 	beq.w	19284 <pdn_interface_getopt+0x154>
   1917e:	2a02      	cmp	r2, #2
   19180:	d04c      	beq.n	1921c <pdn_interface_getopt+0xec>
   19182:	2a03      	cmp	r2, #3
   19184:	d009      	beq.n	1919a <pdn_interface_getopt+0x6a>
   19186:	2a01      	cmp	r2, #1
   19188:	d052      	beq.n	19230 <pdn_interface_getopt+0x100>
   1918a:	202d      	movs	r0, #45	; 0x2d
   1918c:	f7f8 f99c 	bl	114c8 <bsd_os_errno_set>
   19190:	f04f 30ff 	mov.w	r0, #4294967295
   19194:	b003      	add	sp, #12
   19196:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1919a:	682b      	ldr	r3, [r5, #0]
   1919c:	2b00      	cmp	r3, #0
   1919e:	d06f      	beq.n	19280 <pdn_interface_getopt+0x150>
   191a0:	4a43      	ldr	r2, [pc, #268]	; (192b0 <pdn_interface_getopt+0x180>)
   191a2:	f44f 7180 	mov.w	r1, #256	; 0x100
   191a6:	4843      	ldr	r0, [pc, #268]	; (192b4 <pdn_interface_getopt+0x184>)
   191a8:	f8df 8114 	ldr.w	r8, [pc, #276]	; 192c0 <pdn_interface_getopt+0x190>
   191ac:	f7f7 fa74 	bl	10698 <snprintf>
   191b0:	4840      	ldr	r0, [pc, #256]	; (192b4 <pdn_interface_getopt+0x184>)
   191b2:	f8d8 9000 	ldr.w	r9, [r8]
   191b6:	2700      	movs	r7, #0
   191b8:	f005 fa19 	bl	1e5ee <strlen>
   191bc:	463b      	mov	r3, r7
   191be:	4602      	mov	r2, r0
   191c0:	493c      	ldr	r1, [pc, #240]	; (192b4 <pdn_interface_getopt+0x184>)
   191c2:	4648      	mov	r0, r9
   191c4:	9701      	str	r7, [sp, #4]
   191c6:	9700      	str	r7, [sp, #0]
   191c8:	f7ff f954 	bl	18474 <at_interface_write>
   191cc:	4681      	mov	r9, r0
   191ce:	4839      	ldr	r0, [pc, #228]	; (192b4 <pdn_interface_getopt+0x184>)
   191d0:	f005 fa0d 	bl	1e5ee <strlen>
   191d4:	4548      	cmp	r0, r9
   191d6:	d160      	bne.n	1929a <pdn_interface_getopt+0x16a>
   191d8:	463b      	mov	r3, r7
   191da:	e9cd 7700 	strd	r7, r7, [sp]
   191de:	f44f 7280 	mov.w	r2, #256	; 0x100
   191e2:	4934      	ldr	r1, [pc, #208]	; (192b4 <pdn_interface_getopt+0x184>)
   191e4:	f8d8 0000 	ldr.w	r0, [r8]
   191e8:	f7ff fa98 	bl	1871c <at_interface_read>
   191ec:	4607      	mov	r7, r0
   191ee:	4832      	ldr	r0, [pc, #200]	; (192b8 <pdn_interface_getopt+0x188>)
   191f0:	f005 f9fd 	bl	1e5ee <strlen>
   191f4:	4287      	cmp	r7, r0
   191f6:	db32      	blt.n	1925e <pdn_interface_getopt+0x12e>
   191f8:	4602      	mov	r2, r0
   191fa:	492e      	ldr	r1, [pc, #184]	; (192b4 <pdn_interface_getopt+0x184>)
   191fc:	482e      	ldr	r0, [pc, #184]	; (192b8 <pdn_interface_getopt+0x188>)
   191fe:	f005 fa09 	bl	1e614 <strncmp>
   19202:	4607      	mov	r7, r0
   19204:	bb58      	cbnz	r0, 1925e <pdn_interface_getopt+0x12e>
   19206:	4620      	mov	r0, r4
   19208:	492a      	ldr	r1, [pc, #168]	; (192b4 <pdn_interface_getopt+0x184>)
   1920a:	f7ff fb45 	bl	18898 <pdn_state_get_parser>
   1920e:	2800      	cmp	r0, #0
   19210:	dbbc      	blt.n	1918c <pdn_interface_getopt+0x5c>
   19212:	2301      	movs	r3, #1
   19214:	7030      	strb	r0, [r6, #0]
   19216:	4638      	mov	r0, r7
   19218:	602b      	str	r3, [r5, #0]
   1921a:	e7bb      	b.n	19194 <pdn_interface_getopt+0x64>
   1921c:	682a      	ldr	r2, [r5, #0]
   1921e:	b37a      	cbz	r2, 19280 <pdn_interface_getopt+0x150>
   19220:	2201      	movs	r2, #1
   19222:	2000      	movs	r0, #0
   19224:	681b      	ldr	r3, [r3, #0]
   19226:	7033      	strb	r3, [r6, #0]
   19228:	602a      	str	r2, [r5, #0]
   1922a:	b003      	add	sp, #12
   1922c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19230:	689a      	ldr	r2, [r3, #8]
   19232:	b31a      	cbz	r2, 1927c <pdn_interface_getopt+0x14c>
   19234:	689a      	ldr	r2, [r3, #8]
   19236:	2a04      	cmp	r2, #4
   19238:	d020      	beq.n	1927c <pdn_interface_getopt+0x14c>
   1923a:	682a      	ldr	r2, [r5, #0]
   1923c:	2a07      	cmp	r2, #7
   1923e:	d91f      	bls.n	19280 <pdn_interface_getopt+0x150>
   19240:	f012 0203 	ands.w	r2, r2, #3
   19244:	d11c      	bne.n	19280 <pdn_interface_getopt+0x150>
   19246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   19248:	0799      	lsls	r1, r3, #30
   1924a:	d421      	bmi.n	19290 <pdn_interface_getopt+0x160>
   1924c:	2104      	movs	r1, #4
   1924e:	07db      	lsls	r3, r3, #31
   19250:	d502      	bpl.n	19258 <pdn_interface_getopt+0x128>
   19252:	2302      	movs	r3, #2
   19254:	50b3      	str	r3, [r6, r2]
   19256:	460a      	mov	r2, r1
   19258:	602a      	str	r2, [r5, #0]
   1925a:	2000      	movs	r0, #0
   1925c:	e79a      	b.n	19194 <pdn_interface_getopt+0x64>
   1925e:	4817      	ldr	r0, [pc, #92]	; (192bc <pdn_interface_getopt+0x18c>)
   19260:	f005 f9c5 	bl	1e5ee <strlen>
   19264:	4913      	ldr	r1, [pc, #76]	; (192b4 <pdn_interface_getopt+0x184>)
   19266:	4602      	mov	r2, r0
   19268:	4814      	ldr	r0, [pc, #80]	; (192bc <pdn_interface_getopt+0x18c>)
   1926a:	f005 f9d3 	bl	1e614 <strncmp>
   1926e:	b9a0      	cbnz	r0, 1929a <pdn_interface_getopt+0x16a>
   19270:	2008      	movs	r0, #8
   19272:	f7f8 f929 	bl	114c8 <bsd_os_errno_set>
   19276:	f04f 30ff 	mov.w	r0, #4294967295
   1927a:	e787      	b.n	1918c <pdn_interface_getopt+0x5c>
   1927c:	200e      	movs	r0, #14
   1927e:	e785      	b.n	1918c <pdn_interface_getopt+0x5c>
   19280:	2016      	movs	r0, #22
   19282:	e783      	b.n	1918c <pdn_interface_getopt+0x5c>
   19284:	2009      	movs	r0, #9
   19286:	f7f8 f91f 	bl	114c8 <bsd_os_errno_set>
   1928a:	f04f 30ff 	mov.w	r0, #4294967295
   1928e:	e781      	b.n	19194 <pdn_interface_getopt+0x64>
   19290:	220a      	movs	r2, #10
   19292:	2108      	movs	r1, #8
   19294:	6032      	str	r2, [r6, #0]
   19296:	2204      	movs	r2, #4
   19298:	e7d9      	b.n	1924e <pdn_interface_getopt+0x11e>
   1929a:	2005      	movs	r0, #5
   1929c:	f7f8 f914 	bl	114c8 <bsd_os_errno_set>
   192a0:	f04f 30ff 	mov.w	r0, #4294967295
   192a4:	e772      	b.n	1918c <pdn_interface_getopt+0x5c>
   192a6:	bf00      	nop
   192a8:	789a0000 	.word	0x789a0000
   192ac:	20020ec0 	.word	0x20020ec0
   192b0:	00020e9c 	.word	0x00020e9c
   192b4:	20020dc0 	.word	0x20020dc0
   192b8:	00020ea8 	.word	0x00020ea8
   192bc:	00020ecc 	.word	0x00020ecc
   192c0:	20020dbc 	.word	0x20020dbc

000192c4 <pdn_interface_pdn_id_get>:
   192c4:	2900      	cmp	r1, #0
   192c6:	f000 83b9 	beq.w	19a3c <pdn_interface_pdn_id_get+0x778>
   192ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   192ce:	4ca3      	ldr	r4, [pc, #652]	; (1955c <pdn_interface_pdn_id_get+0x298>)
   192d0:	2802      	cmp	r0, #2
   192d2:	b083      	sub	sp, #12
   192d4:	460d      	mov	r5, r1
   192d6:	6823      	ldr	r3, [r4, #0]
   192d8:	f000 8094 	beq.w	19404 <pdn_interface_pdn_id_get+0x140>
   192dc:	280a      	cmp	r0, #10
   192de:	d03f      	beq.n	19360 <pdn_interface_pdn_id_get+0x9c>
   192e0:	b11b      	cbz	r3, 192ea <pdn_interface_pdn_id_get+0x26>
   192e2:	689b      	ldr	r3, [r3, #8]
   192e4:	2b03      	cmp	r3, #3
   192e6:	f000 8127 	beq.w	19538 <pdn_interface_pdn_id_get+0x274>
   192ea:	6863      	ldr	r3, [r4, #4]
   192ec:	b11b      	cbz	r3, 192f6 <pdn_interface_pdn_id_get+0x32>
   192ee:	689b      	ldr	r3, [r3, #8]
   192f0:	2b03      	cmp	r3, #3
   192f2:	f000 8110 	beq.w	19516 <pdn_interface_pdn_id_get+0x252>
   192f6:	68a3      	ldr	r3, [r4, #8]
   192f8:	b11b      	cbz	r3, 19302 <pdn_interface_pdn_id_get+0x3e>
   192fa:	689b      	ldr	r3, [r3, #8]
   192fc:	2b03      	cmp	r3, #3
   192fe:	f000 80f9 	beq.w	194f4 <pdn_interface_pdn_id_get+0x230>
   19302:	68e3      	ldr	r3, [r4, #12]
   19304:	b11b      	cbz	r3, 1930e <pdn_interface_pdn_id_get+0x4a>
   19306:	689b      	ldr	r3, [r3, #8]
   19308:	2b03      	cmp	r3, #3
   1930a:	f000 80e2 	beq.w	194d2 <pdn_interface_pdn_id_get+0x20e>
   1930e:	6923      	ldr	r3, [r4, #16]
   19310:	b11b      	cbz	r3, 1931a <pdn_interface_pdn_id_get+0x56>
   19312:	689b      	ldr	r3, [r3, #8]
   19314:	2b03      	cmp	r3, #3
   19316:	f000 8123 	beq.w	19560 <pdn_interface_pdn_id_get+0x29c>
   1931a:	6963      	ldr	r3, [r4, #20]
   1931c:	b11b      	cbz	r3, 19326 <pdn_interface_pdn_id_get+0x62>
   1931e:	689b      	ldr	r3, [r3, #8]
   19320:	2b03      	cmp	r3, #3
   19322:	f000 8161 	beq.w	195e8 <pdn_interface_pdn_id_get+0x324>
   19326:	69a3      	ldr	r3, [r4, #24]
   19328:	b11b      	cbz	r3, 19332 <pdn_interface_pdn_id_get+0x6e>
   1932a:	689b      	ldr	r3, [r3, #8]
   1932c:	2b03      	cmp	r3, #3
   1932e:	f000 814a 	beq.w	195c6 <pdn_interface_pdn_id_get+0x302>
   19332:	69e3      	ldr	r3, [r4, #28]
   19334:	b11b      	cbz	r3, 1933e <pdn_interface_pdn_id_get+0x7a>
   19336:	689b      	ldr	r3, [r3, #8]
   19338:	2b03      	cmp	r3, #3
   1933a:	f000 8133 	beq.w	195a4 <pdn_interface_pdn_id_get+0x2e0>
   1933e:	6a23      	ldr	r3, [r4, #32]
   19340:	b11b      	cbz	r3, 1934a <pdn_interface_pdn_id_get+0x86>
   19342:	689b      	ldr	r3, [r3, #8]
   19344:	2b03      	cmp	r3, #3
   19346:	f000 811c 	beq.w	19582 <pdn_interface_pdn_id_get+0x2be>
   1934a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1934c:	b11b      	cbz	r3, 19356 <pdn_interface_pdn_id_get+0x92>
   1934e:	689b      	ldr	r3, [r3, #8]
   19350:	2b03      	cmp	r3, #3
   19352:	f000 80ad 	beq.w	194b0 <pdn_interface_pdn_id_get+0x1ec>
   19356:	f04f 30ff 	mov.w	r0, #4294967295
   1935a:	b003      	add	sp, #12
   1935c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19360:	b11b      	cbz	r3, 1936a <pdn_interface_pdn_id_get+0xa6>
   19362:	689b      	ldr	r3, [r3, #8]
   19364:	2b03      	cmp	r3, #3
   19366:	f000 8335 	beq.w	199d4 <pdn_interface_pdn_id_get+0x710>
   1936a:	6863      	ldr	r3, [r4, #4]
   1936c:	b11b      	cbz	r3, 19376 <pdn_interface_pdn_id_get+0xb2>
   1936e:	689b      	ldr	r3, [r3, #8]
   19370:	2b03      	cmp	r3, #3
   19372:	f000 82fd 	beq.w	19970 <pdn_interface_pdn_id_get+0x6ac>
   19376:	68a3      	ldr	r3, [r4, #8]
   19378:	b11b      	cbz	r3, 19382 <pdn_interface_pdn_id_get+0xbe>
   1937a:	689b      	ldr	r3, [r3, #8]
   1937c:	2b03      	cmp	r3, #3
   1937e:	f000 82d5 	beq.w	1992c <pdn_interface_pdn_id_get+0x668>
   19382:	68e3      	ldr	r3, [r4, #12]
   19384:	b11b      	cbz	r3, 1938e <pdn_interface_pdn_id_get+0xca>
   19386:	689e      	ldr	r6, [r3, #8]
   19388:	2e03      	cmp	r6, #3
   1938a:	f000 81f0 	beq.w	1976e <pdn_interface_pdn_id_get+0x4aa>
   1938e:	6923      	ldr	r3, [r4, #16]
   19390:	b11b      	cbz	r3, 1939a <pdn_interface_pdn_id_get+0xd6>
   19392:	689b      	ldr	r3, [r3, #8]
   19394:	2b03      	cmp	r3, #3
   19396:	f000 8203 	beq.w	197a0 <pdn_interface_pdn_id_get+0x4dc>
   1939a:	6963      	ldr	r3, [r4, #20]
   1939c:	b11b      	cbz	r3, 193a6 <pdn_interface_pdn_id_get+0xe2>
   1939e:	689b      	ldr	r3, [r3, #8]
   193a0:	2b03      	cmp	r3, #3
   193a2:	f000 8215 	beq.w	197d0 <pdn_interface_pdn_id_get+0x50c>
   193a6:	69a3      	ldr	r3, [r4, #24]
   193a8:	b11b      	cbz	r3, 193b2 <pdn_interface_pdn_id_get+0xee>
   193aa:	689b      	ldr	r3, [r3, #8]
   193ac:	2b03      	cmp	r3, #3
   193ae:	f000 8227 	beq.w	19800 <pdn_interface_pdn_id_get+0x53c>
   193b2:	69e3      	ldr	r3, [r4, #28]
   193b4:	b11b      	cbz	r3, 193be <pdn_interface_pdn_id_get+0xfa>
   193b6:	689b      	ldr	r3, [r3, #8]
   193b8:	2b03      	cmp	r3, #3
   193ba:	f000 8239 	beq.w	19830 <pdn_interface_pdn_id_get+0x56c>
   193be:	6a23      	ldr	r3, [r4, #32]
   193c0:	b11b      	cbz	r3, 193ca <pdn_interface_pdn_id_get+0x106>
   193c2:	689b      	ldr	r3, [r3, #8]
   193c4:	2b03      	cmp	r3, #3
   193c6:	f000 824d 	beq.w	19864 <pdn_interface_pdn_id_get+0x5a0>
   193ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
   193cc:	2b00      	cmp	r3, #0
   193ce:	d0c2      	beq.n	19356 <pdn_interface_pdn_id_get+0x92>
   193d0:	689b      	ldr	r3, [r3, #8]
   193d2:	2b03      	cmp	r3, #3
   193d4:	d1bf      	bne.n	19356 <pdn_interface_pdn_id_get+0x92>
   193d6:	4628      	mov	r0, r5
   193d8:	f005 f909 	bl	1e5ee <strlen>
   193dc:	4606      	mov	r6, r0
   193de:	6a60      	ldr	r0, [r4, #36]	; 0x24
   193e0:	300c      	adds	r0, #12
   193e2:	f005 f904 	bl	1e5ee <strlen>
   193e6:	42b0      	cmp	r0, r6
   193e8:	d1b5      	bne.n	19356 <pdn_interface_pdn_id_get+0x92>
   193ea:	6a61      	ldr	r1, [r4, #36]	; 0x24
   193ec:	4628      	mov	r0, r5
   193ee:	310c      	adds	r1, #12
   193f0:	f005 f904 	bl	1e5fc <strcmp>
   193f4:	2800      	cmp	r0, #0
   193f6:	d1ae      	bne.n	19356 <pdn_interface_pdn_id_get+0x92>
   193f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   193fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   193fc:	0792      	lsls	r2, r2, #30
   193fe:	d5aa      	bpl.n	19356 <pdn_interface_pdn_id_get+0x92>
   19400:	2609      	movs	r6, #9
   19402:	e11a      	b.n	1963a <pdn_interface_pdn_id_get+0x376>
   19404:	b11b      	cbz	r3, 1940e <pdn_interface_pdn_id_get+0x14a>
   19406:	689b      	ldr	r3, [r3, #8]
   19408:	2b03      	cmp	r3, #3
   1940a:	f000 82fd 	beq.w	19a08 <pdn_interface_pdn_id_get+0x744>
   1940e:	6863      	ldr	r3, [r4, #4]
   19410:	b11b      	cbz	r3, 1941a <pdn_interface_pdn_id_get+0x156>
   19412:	689b      	ldr	r3, [r3, #8]
   19414:	2b03      	cmp	r3, #3
   19416:	f000 82c5 	beq.w	199a4 <pdn_interface_pdn_id_get+0x6e0>
   1941a:	68a3      	ldr	r3, [r4, #8]
   1941c:	b11b      	cbz	r3, 19426 <pdn_interface_pdn_id_get+0x162>
   1941e:	689b      	ldr	r3, [r3, #8]
   19420:	2b03      	cmp	r3, #3
   19422:	f000 8269 	beq.w	198f8 <pdn_interface_pdn_id_get+0x634>
   19426:	68e3      	ldr	r3, [r4, #12]
   19428:	b11b      	cbz	r3, 19432 <pdn_interface_pdn_id_get+0x16e>
   1942a:	689e      	ldr	r6, [r3, #8]
   1942c:	2e03      	cmp	r6, #3
   1942e:	f000 80ec 	beq.w	1960a <pdn_interface_pdn_id_get+0x346>
   19432:	6923      	ldr	r3, [r4, #16]
   19434:	b11b      	cbz	r3, 1943e <pdn_interface_pdn_id_get+0x17a>
   19436:	689b      	ldr	r3, [r3, #8]
   19438:	2b03      	cmp	r3, #3
   1943a:	f000 814a 	beq.w	196d2 <pdn_interface_pdn_id_get+0x40e>
   1943e:	6963      	ldr	r3, [r4, #20]
   19440:	b11b      	cbz	r3, 1944a <pdn_interface_pdn_id_get+0x186>
   19442:	689b      	ldr	r3, [r3, #8]
   19444:	2b03      	cmp	r3, #3
   19446:	f000 815e 	beq.w	19706 <pdn_interface_pdn_id_get+0x442>
   1944a:	69a3      	ldr	r3, [r4, #24]
   1944c:	b11b      	cbz	r3, 19456 <pdn_interface_pdn_id_get+0x192>
   1944e:	689b      	ldr	r3, [r3, #8]
   19450:	2b03      	cmp	r3, #3
   19452:	f000 8172 	beq.w	1973a <pdn_interface_pdn_id_get+0x476>
   19456:	69e3      	ldr	r3, [r4, #28]
   19458:	b11b      	cbz	r3, 19462 <pdn_interface_pdn_id_get+0x19e>
   1945a:	689b      	ldr	r3, [r3, #8]
   1945c:	2b03      	cmp	r3, #3
   1945e:	f000 821b 	beq.w	19898 <pdn_interface_pdn_id_get+0x5d4>
   19462:	6a23      	ldr	r3, [r4, #32]
   19464:	b11b      	cbz	r3, 1946e <pdn_interface_pdn_id_get+0x1aa>
   19466:	689b      	ldr	r3, [r3, #8]
   19468:	2b03      	cmp	r3, #3
   1946a:	f000 822d 	beq.w	198c8 <pdn_interface_pdn_id_get+0x604>
   1946e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19470:	2b00      	cmp	r3, #0
   19472:	f43f af70 	beq.w	19356 <pdn_interface_pdn_id_get+0x92>
   19476:	689b      	ldr	r3, [r3, #8]
   19478:	2b03      	cmp	r3, #3
   1947a:	f47f af6c 	bne.w	19356 <pdn_interface_pdn_id_get+0x92>
   1947e:	4628      	mov	r0, r5
   19480:	f005 f8b5 	bl	1e5ee <strlen>
   19484:	4606      	mov	r6, r0
   19486:	6a60      	ldr	r0, [r4, #36]	; 0x24
   19488:	300c      	adds	r0, #12
   1948a:	f005 f8b0 	bl	1e5ee <strlen>
   1948e:	4286      	cmp	r6, r0
   19490:	f47f af61 	bne.w	19356 <pdn_interface_pdn_id_get+0x92>
   19494:	6a61      	ldr	r1, [r4, #36]	; 0x24
   19496:	4628      	mov	r0, r5
   19498:	310c      	adds	r1, #12
   1949a:	f005 f8af 	bl	1e5fc <strcmp>
   1949e:	2800      	cmp	r0, #0
   194a0:	f47f af59 	bne.w	19356 <pdn_interface_pdn_id_get+0x92>
   194a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   194a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   194a8:	07d2      	lsls	r2, r2, #31
   194aa:	f57f af54 	bpl.w	19356 <pdn_interface_pdn_id_get+0x92>
   194ae:	e7a7      	b.n	19400 <pdn_interface_pdn_id_get+0x13c>
   194b0:	4628      	mov	r0, r5
   194b2:	f005 f89c 	bl	1e5ee <strlen>
   194b6:	4606      	mov	r6, r0
   194b8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   194ba:	300c      	adds	r0, #12
   194bc:	f005 f897 	bl	1e5ee <strlen>
   194c0:	42b0      	cmp	r0, r6
   194c2:	f47f af48 	bne.w	19356 <pdn_interface_pdn_id_get+0x92>
   194c6:	6a61      	ldr	r1, [r4, #36]	; 0x24
   194c8:	4628      	mov	r0, r5
   194ca:	310c      	adds	r1, #12
   194cc:	f005 f896 	bl	1e5fc <strcmp>
   194d0:	e741      	b.n	19356 <pdn_interface_pdn_id_get+0x92>
   194d2:	4628      	mov	r0, r5
   194d4:	f005 f88b 	bl	1e5ee <strlen>
   194d8:	4606      	mov	r6, r0
   194da:	68e0      	ldr	r0, [r4, #12]
   194dc:	300c      	adds	r0, #12
   194de:	f005 f886 	bl	1e5ee <strlen>
   194e2:	4286      	cmp	r6, r0
   194e4:	f47f af13 	bne.w	1930e <pdn_interface_pdn_id_get+0x4a>
   194e8:	68e1      	ldr	r1, [r4, #12]
   194ea:	4628      	mov	r0, r5
   194ec:	310c      	adds	r1, #12
   194ee:	f005 f885 	bl	1e5fc <strcmp>
   194f2:	e70c      	b.n	1930e <pdn_interface_pdn_id_get+0x4a>
   194f4:	4628      	mov	r0, r5
   194f6:	f005 f87a 	bl	1e5ee <strlen>
   194fa:	4606      	mov	r6, r0
   194fc:	68a0      	ldr	r0, [r4, #8]
   194fe:	300c      	adds	r0, #12
   19500:	f005 f875 	bl	1e5ee <strlen>
   19504:	4286      	cmp	r6, r0
   19506:	f47f aefc 	bne.w	19302 <pdn_interface_pdn_id_get+0x3e>
   1950a:	68a1      	ldr	r1, [r4, #8]
   1950c:	4628      	mov	r0, r5
   1950e:	310c      	adds	r1, #12
   19510:	f005 f874 	bl	1e5fc <strcmp>
   19514:	e6f5      	b.n	19302 <pdn_interface_pdn_id_get+0x3e>
   19516:	4628      	mov	r0, r5
   19518:	f005 f869 	bl	1e5ee <strlen>
   1951c:	4606      	mov	r6, r0
   1951e:	6860      	ldr	r0, [r4, #4]
   19520:	300c      	adds	r0, #12
   19522:	f005 f864 	bl	1e5ee <strlen>
   19526:	4286      	cmp	r6, r0
   19528:	f47f aee5 	bne.w	192f6 <pdn_interface_pdn_id_get+0x32>
   1952c:	6861      	ldr	r1, [r4, #4]
   1952e:	4628      	mov	r0, r5
   19530:	310c      	adds	r1, #12
   19532:	f005 f863 	bl	1e5fc <strcmp>
   19536:	e6de      	b.n	192f6 <pdn_interface_pdn_id_get+0x32>
   19538:	4608      	mov	r0, r1
   1953a:	f005 f858 	bl	1e5ee <strlen>
   1953e:	4606      	mov	r6, r0
   19540:	6820      	ldr	r0, [r4, #0]
   19542:	300c      	adds	r0, #12
   19544:	f005 f853 	bl	1e5ee <strlen>
   19548:	4286      	cmp	r6, r0
   1954a:	f47f aece 	bne.w	192ea <pdn_interface_pdn_id_get+0x26>
   1954e:	6821      	ldr	r1, [r4, #0]
   19550:	4628      	mov	r0, r5
   19552:	310c      	adds	r1, #12
   19554:	f005 f852 	bl	1e5fc <strcmp>
   19558:	e6c7      	b.n	192ea <pdn_interface_pdn_id_get+0x26>
   1955a:	bf00      	nop
   1955c:	20020ec0 	.word	0x20020ec0
   19560:	4628      	mov	r0, r5
   19562:	f005 f844 	bl	1e5ee <strlen>
   19566:	4606      	mov	r6, r0
   19568:	6920      	ldr	r0, [r4, #16]
   1956a:	300c      	adds	r0, #12
   1956c:	f005 f83f 	bl	1e5ee <strlen>
   19570:	4286      	cmp	r6, r0
   19572:	f47f aed2 	bne.w	1931a <pdn_interface_pdn_id_get+0x56>
   19576:	6921      	ldr	r1, [r4, #16]
   19578:	4628      	mov	r0, r5
   1957a:	310c      	adds	r1, #12
   1957c:	f005 f83e 	bl	1e5fc <strcmp>
   19580:	e6cb      	b.n	1931a <pdn_interface_pdn_id_get+0x56>
   19582:	4628      	mov	r0, r5
   19584:	f005 f833 	bl	1e5ee <strlen>
   19588:	4606      	mov	r6, r0
   1958a:	6a20      	ldr	r0, [r4, #32]
   1958c:	300c      	adds	r0, #12
   1958e:	f005 f82e 	bl	1e5ee <strlen>
   19592:	4286      	cmp	r6, r0
   19594:	f47f aed9 	bne.w	1934a <pdn_interface_pdn_id_get+0x86>
   19598:	6a21      	ldr	r1, [r4, #32]
   1959a:	4628      	mov	r0, r5
   1959c:	310c      	adds	r1, #12
   1959e:	f005 f82d 	bl	1e5fc <strcmp>
   195a2:	e6d2      	b.n	1934a <pdn_interface_pdn_id_get+0x86>
   195a4:	4628      	mov	r0, r5
   195a6:	f005 f822 	bl	1e5ee <strlen>
   195aa:	4606      	mov	r6, r0
   195ac:	69e0      	ldr	r0, [r4, #28]
   195ae:	300c      	adds	r0, #12
   195b0:	f005 f81d 	bl	1e5ee <strlen>
   195b4:	4286      	cmp	r6, r0
   195b6:	f47f aec2 	bne.w	1933e <pdn_interface_pdn_id_get+0x7a>
   195ba:	69e1      	ldr	r1, [r4, #28]
   195bc:	4628      	mov	r0, r5
   195be:	310c      	adds	r1, #12
   195c0:	f005 f81c 	bl	1e5fc <strcmp>
   195c4:	e6bb      	b.n	1933e <pdn_interface_pdn_id_get+0x7a>
   195c6:	4628      	mov	r0, r5
   195c8:	f005 f811 	bl	1e5ee <strlen>
   195cc:	4606      	mov	r6, r0
   195ce:	69a0      	ldr	r0, [r4, #24]
   195d0:	300c      	adds	r0, #12
   195d2:	f005 f80c 	bl	1e5ee <strlen>
   195d6:	4286      	cmp	r6, r0
   195d8:	f47f aeab 	bne.w	19332 <pdn_interface_pdn_id_get+0x6e>
   195dc:	69a1      	ldr	r1, [r4, #24]
   195de:	4628      	mov	r0, r5
   195e0:	310c      	adds	r1, #12
   195e2:	f005 f80b 	bl	1e5fc <strcmp>
   195e6:	e6a4      	b.n	19332 <pdn_interface_pdn_id_get+0x6e>
   195e8:	4628      	mov	r0, r5
   195ea:	f005 f800 	bl	1e5ee <strlen>
   195ee:	4606      	mov	r6, r0
   195f0:	6960      	ldr	r0, [r4, #20]
   195f2:	300c      	adds	r0, #12
   195f4:	f004 fffb 	bl	1e5ee <strlen>
   195f8:	4286      	cmp	r6, r0
   195fa:	f47f ae94 	bne.w	19326 <pdn_interface_pdn_id_get+0x62>
   195fe:	6961      	ldr	r1, [r4, #20]
   19600:	4628      	mov	r0, r5
   19602:	310c      	adds	r1, #12
   19604:	f004 fffa 	bl	1e5fc <strcmp>
   19608:	e68d      	b.n	19326 <pdn_interface_pdn_id_get+0x62>
   1960a:	4628      	mov	r0, r5
   1960c:	f004 ffef 	bl	1e5ee <strlen>
   19610:	4607      	mov	r7, r0
   19612:	68e0      	ldr	r0, [r4, #12]
   19614:	300c      	adds	r0, #12
   19616:	f004 ffea 	bl	1e5ee <strlen>
   1961a:	4287      	cmp	r7, r0
   1961c:	f47f af09 	bne.w	19432 <pdn_interface_pdn_id_get+0x16e>
   19620:	68e1      	ldr	r1, [r4, #12]
   19622:	4628      	mov	r0, r5
   19624:	310c      	adds	r1, #12
   19626:	f004 ffe9 	bl	1e5fc <strcmp>
   1962a:	2800      	cmp	r0, #0
   1962c:	f47f af01 	bne.w	19432 <pdn_interface_pdn_id_get+0x16e>
   19630:	68e3      	ldr	r3, [r4, #12]
   19632:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   19634:	07d1      	lsls	r1, r2, #31
   19636:	f57f aefc 	bpl.w	19432 <pdn_interface_pdn_id_get+0x16e>
   1963a:	6858      	ldr	r0, [r3, #4]
   1963c:	1c43      	adds	r3, r0, #1
   1963e:	f47f ae8c 	bne.w	1935a <pdn_interface_pdn_id_get+0x96>
   19642:	4dc6      	ldr	r5, [pc, #792]	; (1995c <pdn_interface_pdn_id_get+0x698>)
   19644:	4ac6      	ldr	r2, [pc, #792]	; (19960 <pdn_interface_pdn_id_get+0x69c>)
   19646:	f44f 7180 	mov.w	r1, #256	; 0x100
   1964a:	4628      	mov	r0, r5
   1964c:	f7f7 f824 	bl	10698 <snprintf>
   19650:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   19654:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   19658:	681b      	ldr	r3, [r3, #0]
   1965a:	4ac2      	ldr	r2, [pc, #776]	; (19964 <pdn_interface_pdn_id_get+0x6a0>)
   1965c:	4428      	add	r0, r5
   1965e:	f8df 830c 	ldr.w	r8, [pc, #780]	; 1996c <pdn_interface_pdn_id_get+0x6a8>
   19662:	f7f7 f819 	bl	10698 <snprintf>
   19666:	4628      	mov	r0, r5
   19668:	f8d8 9000 	ldr.w	r9, [r8]
   1966c:	2700      	movs	r7, #0
   1966e:	f004 ffbe 	bl	1e5ee <strlen>
   19672:	4629      	mov	r1, r5
   19674:	4602      	mov	r2, r0
   19676:	463b      	mov	r3, r7
   19678:	4648      	mov	r0, r9
   1967a:	9701      	str	r7, [sp, #4]
   1967c:	9700      	str	r7, [sp, #0]
   1967e:	f7fe fef9 	bl	18474 <at_interface_write>
   19682:	4681      	mov	r9, r0
   19684:	4628      	mov	r0, r5
   19686:	f004 ffb2 	bl	1e5ee <strlen>
   1968a:	4548      	cmp	r0, r9
   1968c:	f040 81e9 	bne.w	19a62 <pdn_interface_pdn_id_get+0x79e>
   19690:	463b      	mov	r3, r7
   19692:	f44f 7280 	mov.w	r2, #256	; 0x100
   19696:	e9cd 7700 	strd	r7, r7, [sp]
   1969a:	4629      	mov	r1, r5
   1969c:	f8d8 0000 	ldr.w	r0, [r8]
   196a0:	f7ff f83c 	bl	1871c <at_interface_read>
   196a4:	4607      	mov	r7, r0
   196a6:	48b0      	ldr	r0, [pc, #704]	; (19968 <pdn_interface_pdn_id_get+0x6a4>)
   196a8:	f004 ffa1 	bl	1e5ee <strlen>
   196ac:	4287      	cmp	r7, r0
   196ae:	4602      	mov	r2, r0
   196b0:	f2c0 81c7 	blt.w	19a42 <pdn_interface_pdn_id_get+0x77e>
   196b4:	4629      	mov	r1, r5
   196b6:	48ac      	ldr	r0, [pc, #688]	; (19968 <pdn_interface_pdn_id_get+0x6a4>)
   196b8:	f004 ffac 	bl	1e614 <strncmp>
   196bc:	2800      	cmp	r0, #0
   196be:	f040 81c0 	bne.w	19a42 <pdn_interface_pdn_id_get+0x77e>
   196c2:	4629      	mov	r1, r5
   196c4:	4630      	mov	r0, r6
   196c6:	f7ff f91d 	bl	18904 <pdn_id_get_parser>
   196ca:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   196ce:	6858      	ldr	r0, [r3, #4]
   196d0:	e643      	b.n	1935a <pdn_interface_pdn_id_get+0x96>
   196d2:	4628      	mov	r0, r5
   196d4:	f004 ff8b 	bl	1e5ee <strlen>
   196d8:	4606      	mov	r6, r0
   196da:	6920      	ldr	r0, [r4, #16]
   196dc:	300c      	adds	r0, #12
   196de:	f004 ff86 	bl	1e5ee <strlen>
   196e2:	4286      	cmp	r6, r0
   196e4:	f47f aeab 	bne.w	1943e <pdn_interface_pdn_id_get+0x17a>
   196e8:	6921      	ldr	r1, [r4, #16]
   196ea:	4628      	mov	r0, r5
   196ec:	310c      	adds	r1, #12
   196ee:	f004 ff85 	bl	1e5fc <strcmp>
   196f2:	2800      	cmp	r0, #0
   196f4:	f47f aea3 	bne.w	1943e <pdn_interface_pdn_id_get+0x17a>
   196f8:	6923      	ldr	r3, [r4, #16]
   196fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   196fc:	07d2      	lsls	r2, r2, #31
   196fe:	f57f ae9e 	bpl.w	1943e <pdn_interface_pdn_id_get+0x17a>
   19702:	2604      	movs	r6, #4
   19704:	e799      	b.n	1963a <pdn_interface_pdn_id_get+0x376>
   19706:	4628      	mov	r0, r5
   19708:	f004 ff71 	bl	1e5ee <strlen>
   1970c:	4606      	mov	r6, r0
   1970e:	6960      	ldr	r0, [r4, #20]
   19710:	300c      	adds	r0, #12
   19712:	f004 ff6c 	bl	1e5ee <strlen>
   19716:	4286      	cmp	r6, r0
   19718:	f47f ae97 	bne.w	1944a <pdn_interface_pdn_id_get+0x186>
   1971c:	6961      	ldr	r1, [r4, #20]
   1971e:	4628      	mov	r0, r5
   19720:	310c      	adds	r1, #12
   19722:	f004 ff6b 	bl	1e5fc <strcmp>
   19726:	2800      	cmp	r0, #0
   19728:	f47f ae8f 	bne.w	1944a <pdn_interface_pdn_id_get+0x186>
   1972c:	6963      	ldr	r3, [r4, #20]
   1972e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   19730:	07d7      	lsls	r7, r2, #31
   19732:	f57f ae8a 	bpl.w	1944a <pdn_interface_pdn_id_get+0x186>
   19736:	2605      	movs	r6, #5
   19738:	e77f      	b.n	1963a <pdn_interface_pdn_id_get+0x376>
   1973a:	4628      	mov	r0, r5
   1973c:	f004 ff57 	bl	1e5ee <strlen>
   19740:	4606      	mov	r6, r0
   19742:	69a0      	ldr	r0, [r4, #24]
   19744:	300c      	adds	r0, #12
   19746:	f004 ff52 	bl	1e5ee <strlen>
   1974a:	4286      	cmp	r6, r0
   1974c:	f47f ae83 	bne.w	19456 <pdn_interface_pdn_id_get+0x192>
   19750:	69a1      	ldr	r1, [r4, #24]
   19752:	4628      	mov	r0, r5
   19754:	310c      	adds	r1, #12
   19756:	f004 ff51 	bl	1e5fc <strcmp>
   1975a:	2800      	cmp	r0, #0
   1975c:	f47f ae7b 	bne.w	19456 <pdn_interface_pdn_id_get+0x192>
   19760:	69a3      	ldr	r3, [r4, #24]
   19762:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   19764:	07d6      	lsls	r6, r2, #31
   19766:	f57f ae76 	bpl.w	19456 <pdn_interface_pdn_id_get+0x192>
   1976a:	2606      	movs	r6, #6
   1976c:	e765      	b.n	1963a <pdn_interface_pdn_id_get+0x376>
   1976e:	4628      	mov	r0, r5
   19770:	f004 ff3d 	bl	1e5ee <strlen>
   19774:	4607      	mov	r7, r0
   19776:	68e0      	ldr	r0, [r4, #12]
   19778:	300c      	adds	r0, #12
   1977a:	f004 ff38 	bl	1e5ee <strlen>
   1977e:	4287      	cmp	r7, r0
   19780:	f47f ae05 	bne.w	1938e <pdn_interface_pdn_id_get+0xca>
   19784:	68e1      	ldr	r1, [r4, #12]
   19786:	4628      	mov	r0, r5
   19788:	310c      	adds	r1, #12
   1978a:	f004 ff37 	bl	1e5fc <strcmp>
   1978e:	2800      	cmp	r0, #0
   19790:	f47f adfd 	bne.w	1938e <pdn_interface_pdn_id_get+0xca>
   19794:	68e3      	ldr	r3, [r4, #12]
   19796:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   19798:	0791      	lsls	r1, r2, #30
   1979a:	f53f af4e 	bmi.w	1963a <pdn_interface_pdn_id_get+0x376>
   1979e:	e5f6      	b.n	1938e <pdn_interface_pdn_id_get+0xca>
   197a0:	4628      	mov	r0, r5
   197a2:	f004 ff24 	bl	1e5ee <strlen>
   197a6:	4606      	mov	r6, r0
   197a8:	6920      	ldr	r0, [r4, #16]
   197aa:	300c      	adds	r0, #12
   197ac:	f004 ff1f 	bl	1e5ee <strlen>
   197b0:	4286      	cmp	r6, r0
   197b2:	f47f adf2 	bne.w	1939a <pdn_interface_pdn_id_get+0xd6>
   197b6:	6921      	ldr	r1, [r4, #16]
   197b8:	4628      	mov	r0, r5
   197ba:	310c      	adds	r1, #12
   197bc:	f004 ff1e 	bl	1e5fc <strcmp>
   197c0:	2800      	cmp	r0, #0
   197c2:	f47f adea 	bne.w	1939a <pdn_interface_pdn_id_get+0xd6>
   197c6:	6923      	ldr	r3, [r4, #16]
   197c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   197ca:	0792      	lsls	r2, r2, #30
   197cc:	d499      	bmi.n	19702 <pdn_interface_pdn_id_get+0x43e>
   197ce:	e5e4      	b.n	1939a <pdn_interface_pdn_id_get+0xd6>
   197d0:	4628      	mov	r0, r5
   197d2:	f004 ff0c 	bl	1e5ee <strlen>
   197d6:	4606      	mov	r6, r0
   197d8:	6960      	ldr	r0, [r4, #20]
   197da:	300c      	adds	r0, #12
   197dc:	f004 ff07 	bl	1e5ee <strlen>
   197e0:	4286      	cmp	r6, r0
   197e2:	f47f ade0 	bne.w	193a6 <pdn_interface_pdn_id_get+0xe2>
   197e6:	6961      	ldr	r1, [r4, #20]
   197e8:	4628      	mov	r0, r5
   197ea:	310c      	adds	r1, #12
   197ec:	f004 ff06 	bl	1e5fc <strcmp>
   197f0:	2800      	cmp	r0, #0
   197f2:	f47f add8 	bne.w	193a6 <pdn_interface_pdn_id_get+0xe2>
   197f6:	6963      	ldr	r3, [r4, #20]
   197f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   197fa:	0797      	lsls	r7, r2, #30
   197fc:	d49b      	bmi.n	19736 <pdn_interface_pdn_id_get+0x472>
   197fe:	e5d2      	b.n	193a6 <pdn_interface_pdn_id_get+0xe2>
   19800:	4628      	mov	r0, r5
   19802:	f004 fef4 	bl	1e5ee <strlen>
   19806:	4606      	mov	r6, r0
   19808:	69a0      	ldr	r0, [r4, #24]
   1980a:	300c      	adds	r0, #12
   1980c:	f004 feef 	bl	1e5ee <strlen>
   19810:	4286      	cmp	r6, r0
   19812:	f47f adce 	bne.w	193b2 <pdn_interface_pdn_id_get+0xee>
   19816:	69a1      	ldr	r1, [r4, #24]
   19818:	4628      	mov	r0, r5
   1981a:	310c      	adds	r1, #12
   1981c:	f004 feee 	bl	1e5fc <strcmp>
   19820:	2800      	cmp	r0, #0
   19822:	f47f adc6 	bne.w	193b2 <pdn_interface_pdn_id_get+0xee>
   19826:	69a3      	ldr	r3, [r4, #24]
   19828:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1982a:	0796      	lsls	r6, r2, #30
   1982c:	d49d      	bmi.n	1976a <pdn_interface_pdn_id_get+0x4a6>
   1982e:	e5c0      	b.n	193b2 <pdn_interface_pdn_id_get+0xee>
   19830:	4628      	mov	r0, r5
   19832:	f004 fedc 	bl	1e5ee <strlen>
   19836:	4606      	mov	r6, r0
   19838:	69e0      	ldr	r0, [r4, #28]
   1983a:	300c      	adds	r0, #12
   1983c:	f004 fed7 	bl	1e5ee <strlen>
   19840:	4286      	cmp	r6, r0
   19842:	f47f adbc 	bne.w	193be <pdn_interface_pdn_id_get+0xfa>
   19846:	69e1      	ldr	r1, [r4, #28]
   19848:	4628      	mov	r0, r5
   1984a:	310c      	adds	r1, #12
   1984c:	f004 fed6 	bl	1e5fc <strcmp>
   19850:	2800      	cmp	r0, #0
   19852:	f47f adb4 	bne.w	193be <pdn_interface_pdn_id_get+0xfa>
   19856:	69e3      	ldr	r3, [r4, #28]
   19858:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1985a:	0790      	lsls	r0, r2, #30
   1985c:	f57f adaf 	bpl.w	193be <pdn_interface_pdn_id_get+0xfa>
   19860:	2607      	movs	r6, #7
   19862:	e6ea      	b.n	1963a <pdn_interface_pdn_id_get+0x376>
   19864:	4628      	mov	r0, r5
   19866:	f004 fec2 	bl	1e5ee <strlen>
   1986a:	4606      	mov	r6, r0
   1986c:	6a20      	ldr	r0, [r4, #32]
   1986e:	300c      	adds	r0, #12
   19870:	f004 febd 	bl	1e5ee <strlen>
   19874:	4286      	cmp	r6, r0
   19876:	f47f ada8 	bne.w	193ca <pdn_interface_pdn_id_get+0x106>
   1987a:	6a21      	ldr	r1, [r4, #32]
   1987c:	4628      	mov	r0, r5
   1987e:	310c      	adds	r1, #12
   19880:	f004 febc 	bl	1e5fc <strcmp>
   19884:	2800      	cmp	r0, #0
   19886:	f47f ada0 	bne.w	193ca <pdn_interface_pdn_id_get+0x106>
   1988a:	6a23      	ldr	r3, [r4, #32]
   1988c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1988e:	0791      	lsls	r1, r2, #30
   19890:	f57f ad9b 	bpl.w	193ca <pdn_interface_pdn_id_get+0x106>
   19894:	2608      	movs	r6, #8
   19896:	e6d0      	b.n	1963a <pdn_interface_pdn_id_get+0x376>
   19898:	4628      	mov	r0, r5
   1989a:	f004 fea8 	bl	1e5ee <strlen>
   1989e:	4606      	mov	r6, r0
   198a0:	69e0      	ldr	r0, [r4, #28]
   198a2:	300c      	adds	r0, #12
   198a4:	f004 fea3 	bl	1e5ee <strlen>
   198a8:	4286      	cmp	r6, r0
   198aa:	f47f adda 	bne.w	19462 <pdn_interface_pdn_id_get+0x19e>
   198ae:	69e1      	ldr	r1, [r4, #28]
   198b0:	4628      	mov	r0, r5
   198b2:	310c      	adds	r1, #12
   198b4:	f004 fea2 	bl	1e5fc <strcmp>
   198b8:	2800      	cmp	r0, #0
   198ba:	f47f add2 	bne.w	19462 <pdn_interface_pdn_id_get+0x19e>
   198be:	69e3      	ldr	r3, [r4, #28]
   198c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   198c2:	07d0      	lsls	r0, r2, #31
   198c4:	d4cc      	bmi.n	19860 <pdn_interface_pdn_id_get+0x59c>
   198c6:	e5cc      	b.n	19462 <pdn_interface_pdn_id_get+0x19e>
   198c8:	4628      	mov	r0, r5
   198ca:	f004 fe90 	bl	1e5ee <strlen>
   198ce:	4606      	mov	r6, r0
   198d0:	6a20      	ldr	r0, [r4, #32]
   198d2:	300c      	adds	r0, #12
   198d4:	f004 fe8b 	bl	1e5ee <strlen>
   198d8:	4286      	cmp	r6, r0
   198da:	f47f adc8 	bne.w	1946e <pdn_interface_pdn_id_get+0x1aa>
   198de:	6a21      	ldr	r1, [r4, #32]
   198e0:	4628      	mov	r0, r5
   198e2:	310c      	adds	r1, #12
   198e4:	f004 fe8a 	bl	1e5fc <strcmp>
   198e8:	2800      	cmp	r0, #0
   198ea:	f47f adc0 	bne.w	1946e <pdn_interface_pdn_id_get+0x1aa>
   198ee:	6a23      	ldr	r3, [r4, #32]
   198f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   198f2:	07d1      	lsls	r1, r2, #31
   198f4:	d4ce      	bmi.n	19894 <pdn_interface_pdn_id_get+0x5d0>
   198f6:	e5ba      	b.n	1946e <pdn_interface_pdn_id_get+0x1aa>
   198f8:	4628      	mov	r0, r5
   198fa:	f004 fe78 	bl	1e5ee <strlen>
   198fe:	4606      	mov	r6, r0
   19900:	68a0      	ldr	r0, [r4, #8]
   19902:	300c      	adds	r0, #12
   19904:	f004 fe73 	bl	1e5ee <strlen>
   19908:	4286      	cmp	r6, r0
   1990a:	f47f ad8c 	bne.w	19426 <pdn_interface_pdn_id_get+0x162>
   1990e:	68a1      	ldr	r1, [r4, #8]
   19910:	4628      	mov	r0, r5
   19912:	310c      	adds	r1, #12
   19914:	f004 fe72 	bl	1e5fc <strcmp>
   19918:	2800      	cmp	r0, #0
   1991a:	f47f ad84 	bne.w	19426 <pdn_interface_pdn_id_get+0x162>
   1991e:	68a3      	ldr	r3, [r4, #8]
   19920:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   19922:	07d0      	lsls	r0, r2, #31
   19924:	f57f ad7f 	bpl.w	19426 <pdn_interface_pdn_id_get+0x162>
   19928:	2602      	movs	r6, #2
   1992a:	e686      	b.n	1963a <pdn_interface_pdn_id_get+0x376>
   1992c:	4628      	mov	r0, r5
   1992e:	f004 fe5e 	bl	1e5ee <strlen>
   19932:	4606      	mov	r6, r0
   19934:	68a0      	ldr	r0, [r4, #8]
   19936:	300c      	adds	r0, #12
   19938:	f004 fe59 	bl	1e5ee <strlen>
   1993c:	4286      	cmp	r6, r0
   1993e:	f47f ad20 	bne.w	19382 <pdn_interface_pdn_id_get+0xbe>
   19942:	68a1      	ldr	r1, [r4, #8]
   19944:	4628      	mov	r0, r5
   19946:	310c      	adds	r1, #12
   19948:	f004 fe58 	bl	1e5fc <strcmp>
   1994c:	2800      	cmp	r0, #0
   1994e:	f47f ad18 	bne.w	19382 <pdn_interface_pdn_id_get+0xbe>
   19952:	68a3      	ldr	r3, [r4, #8]
   19954:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   19956:	0790      	lsls	r0, r2, #30
   19958:	d4e6      	bmi.n	19928 <pdn_interface_pdn_id_get+0x664>
   1995a:	e512      	b.n	19382 <pdn_interface_pdn_id_get+0xbe>
   1995c:	20020dc0 	.word	0x20020dc0
   19960:	00020e78 	.word	0x00020e78
   19964:	00020e74 	.word	0x00020e74
   19968:	00020e88 	.word	0x00020e88
   1996c:	20020dbc 	.word	0x20020dbc
   19970:	4628      	mov	r0, r5
   19972:	f004 fe3c 	bl	1e5ee <strlen>
   19976:	4606      	mov	r6, r0
   19978:	6860      	ldr	r0, [r4, #4]
   1997a:	300c      	adds	r0, #12
   1997c:	f004 fe37 	bl	1e5ee <strlen>
   19980:	4286      	cmp	r6, r0
   19982:	f47f acf8 	bne.w	19376 <pdn_interface_pdn_id_get+0xb2>
   19986:	6861      	ldr	r1, [r4, #4]
   19988:	4628      	mov	r0, r5
   1998a:	310c      	adds	r1, #12
   1998c:	f004 fe36 	bl	1e5fc <strcmp>
   19990:	2800      	cmp	r0, #0
   19992:	f47f acf0 	bne.w	19376 <pdn_interface_pdn_id_get+0xb2>
   19996:	6863      	ldr	r3, [r4, #4]
   19998:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1999a:	0796      	lsls	r6, r2, #30
   1999c:	f57f aceb 	bpl.w	19376 <pdn_interface_pdn_id_get+0xb2>
   199a0:	2601      	movs	r6, #1
   199a2:	e64a      	b.n	1963a <pdn_interface_pdn_id_get+0x376>
   199a4:	4628      	mov	r0, r5
   199a6:	f004 fe22 	bl	1e5ee <strlen>
   199aa:	4606      	mov	r6, r0
   199ac:	6860      	ldr	r0, [r4, #4]
   199ae:	300c      	adds	r0, #12
   199b0:	f004 fe1d 	bl	1e5ee <strlen>
   199b4:	4286      	cmp	r6, r0
   199b6:	f47f ad30 	bne.w	1941a <pdn_interface_pdn_id_get+0x156>
   199ba:	6861      	ldr	r1, [r4, #4]
   199bc:	4628      	mov	r0, r5
   199be:	310c      	adds	r1, #12
   199c0:	f004 fe1c 	bl	1e5fc <strcmp>
   199c4:	2800      	cmp	r0, #0
   199c6:	f47f ad28 	bne.w	1941a <pdn_interface_pdn_id_get+0x156>
   199ca:	6863      	ldr	r3, [r4, #4]
   199cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   199ce:	07d6      	lsls	r6, r2, #31
   199d0:	d4e6      	bmi.n	199a0 <pdn_interface_pdn_id_get+0x6dc>
   199d2:	e522      	b.n	1941a <pdn_interface_pdn_id_get+0x156>
   199d4:	4608      	mov	r0, r1
   199d6:	f004 fe0a 	bl	1e5ee <strlen>
   199da:	4606      	mov	r6, r0
   199dc:	6820      	ldr	r0, [r4, #0]
   199de:	300c      	adds	r0, #12
   199e0:	f004 fe05 	bl	1e5ee <strlen>
   199e4:	4286      	cmp	r6, r0
   199e6:	f47f acc0 	bne.w	1936a <pdn_interface_pdn_id_get+0xa6>
   199ea:	6821      	ldr	r1, [r4, #0]
   199ec:	4628      	mov	r0, r5
   199ee:	310c      	adds	r1, #12
   199f0:	f004 fe04 	bl	1e5fc <strcmp>
   199f4:	4606      	mov	r6, r0
   199f6:	2800      	cmp	r0, #0
   199f8:	f47f acb7 	bne.w	1936a <pdn_interface_pdn_id_get+0xa6>
   199fc:	6823      	ldr	r3, [r4, #0]
   199fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   19a00:	0797      	lsls	r7, r2, #30
   19a02:	f53f ae1a 	bmi.w	1963a <pdn_interface_pdn_id_get+0x376>
   19a06:	e4b0      	b.n	1936a <pdn_interface_pdn_id_get+0xa6>
   19a08:	4608      	mov	r0, r1
   19a0a:	f004 fdf0 	bl	1e5ee <strlen>
   19a0e:	4606      	mov	r6, r0
   19a10:	6820      	ldr	r0, [r4, #0]
   19a12:	300c      	adds	r0, #12
   19a14:	f004 fdeb 	bl	1e5ee <strlen>
   19a18:	4286      	cmp	r6, r0
   19a1a:	f47f acf8 	bne.w	1940e <pdn_interface_pdn_id_get+0x14a>
   19a1e:	6821      	ldr	r1, [r4, #0]
   19a20:	4628      	mov	r0, r5
   19a22:	310c      	adds	r1, #12
   19a24:	f004 fdea 	bl	1e5fc <strcmp>
   19a28:	4606      	mov	r6, r0
   19a2a:	2800      	cmp	r0, #0
   19a2c:	f47f acef 	bne.w	1940e <pdn_interface_pdn_id_get+0x14a>
   19a30:	6823      	ldr	r3, [r4, #0]
   19a32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   19a34:	07d7      	lsls	r7, r2, #31
   19a36:	f53f ae00 	bmi.w	1963a <pdn_interface_pdn_id_get+0x376>
   19a3a:	e4e8      	b.n	1940e <pdn_interface_pdn_id_get+0x14a>
   19a3c:	f04f 30ff 	mov.w	r0, #4294967295
   19a40:	4770      	bx	lr
   19a42:	480b      	ldr	r0, [pc, #44]	; (19a70 <pdn_interface_pdn_id_get+0x7ac>)
   19a44:	f004 fdd3 	bl	1e5ee <strlen>
   19a48:	490a      	ldr	r1, [pc, #40]	; (19a74 <pdn_interface_pdn_id_get+0x7b0>)
   19a4a:	4602      	mov	r2, r0
   19a4c:	4808      	ldr	r0, [pc, #32]	; (19a70 <pdn_interface_pdn_id_get+0x7ac>)
   19a4e:	f004 fde1 	bl	1e614 <strncmp>
   19a52:	b930      	cbnz	r0, 19a62 <pdn_interface_pdn_id_get+0x79e>
   19a54:	2008      	movs	r0, #8
   19a56:	f7f7 fd37 	bl	114c8 <bsd_os_errno_set>
   19a5a:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   19a5e:	6858      	ldr	r0, [r3, #4]
   19a60:	e47b      	b.n	1935a <pdn_interface_pdn_id_get+0x96>
   19a62:	2005      	movs	r0, #5
   19a64:	f7f7 fd30 	bl	114c8 <bsd_os_errno_set>
   19a68:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   19a6c:	6858      	ldr	r0, [r3, #4]
   19a6e:	e474      	b.n	1935a <pdn_interface_pdn_id_get+0x96>
   19a70:	00020ecc 	.word	0x00020ecc
   19a74:	20020dc0 	.word	0x20020dc0

00019a78 <bsd_platform_error_handler>:
   19a78:	b508      	push	{r3, lr}
   19a7a:	f7f3 fcbb 	bl	d3f4 <bsd_recoverable_error_handler>
   19a7e:	bd08      	pop	{r3, pc}

00019a80 <bsd_init>:
   19a80:	b160      	cbz	r0, 19a9c <bsd_init+0x1c>
   19a82:	b510      	push	{r4, lr}
   19a84:	4c07      	ldr	r4, [pc, #28]	; (19aa4 <bsd_init+0x24>)
   19a86:	7823      	ldrb	r3, [r4, #0]
   19a88:	b92b      	cbnz	r3, 19a96 <bsd_init+0x16>
   19a8a:	f000 f81b 	bl	19ac4 <bsd_platform_init>
   19a8e:	b908      	cbnz	r0, 19a94 <bsd_init+0x14>
   19a90:	2301      	movs	r3, #1
   19a92:	7023      	strb	r3, [r4, #0]
   19a94:	bd10      	pop	{r4, pc}
   19a96:	f04f 30ff 	mov.w	r0, #4294967295
   19a9a:	bd10      	pop	{r4, pc}
   19a9c:	f04f 30ff 	mov.w	r0, #4294967295
   19aa0:	4770      	bx	lr
   19aa2:	bf00      	nop
   19aa4:	20024325 	.word	0x20024325

00019aa8 <unimplemented_method>:
   19aa8:	b40f      	push	{r0, r1, r2, r3}
   19aaa:	b508      	push	{r3, lr}
   19aac:	202d      	movs	r0, #45	; 0x2d
   19aae:	f7f7 fd0b 	bl	114c8 <bsd_os_errno_set>
   19ab2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   19ab6:	f04f 30ff 	mov.w	r0, #4294967295
   19aba:	b004      	add	sp, #16
   19abc:	4770      	bx	lr
   19abe:	bf00      	nop

00019ac0 <rpc_transport_ipc_fault_handler>:
   19ac0:	f7ff bfda 	b.w	19a78 <bsd_platform_error_handler>

00019ac4 <bsd_platform_init>:
   19ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
   19ac6:	f04f 0c00 	mov.w	ip, #0
   19aca:	f247 0660 	movw	r6, #28768	; 0x7060
   19ace:	f24b 0260 	movw	r2, #45152	; 0xb060
   19ad2:	6843      	ldr	r3, [r0, #4]
   19ad4:	4d3a      	ldr	r5, [pc, #232]	; (19bc0 <bsd_platform_init+0xfc>)
   19ad6:	4607      	mov	r7, r0
   19ad8:	602b      	str	r3, [r5, #0]
   19ada:	7801      	ldrb	r1, [r0, #0]
   19adc:	2006      	movs	r0, #6
   19ade:	4561      	cmp	r1, ip
   19ae0:	bf08      	it	eq
   19ae2:	4632      	moveq	r2, r6
   19ae4:	4413      	add	r3, r2
   19ae6:	4c37      	ldr	r4, [pc, #220]	; (19bc4 <bsd_platform_init+0x100>)
   19ae8:	60ab      	str	r3, [r5, #8]
   19aea:	68b9      	ldr	r1, [r7, #8]
   19aec:	6063      	str	r3, [r4, #4]
   19aee:	4b36      	ldr	r3, [pc, #216]	; (19bc8 <bsd_platform_init+0x104>)
   19af0:	b093      	sub	sp, #76	; 0x4c
   19af2:	606a      	str	r2, [r5, #4]
   19af4:	f8a4 c000 	strh.w	ip, [r4]
   19af8:	1a8a      	subs	r2, r1, r2
   19afa:	60ea      	str	r2, [r5, #12]
   19afc:	60a2      	str	r2, [r4, #8]
   19afe:	81a0      	strh	r0, [r4, #12]
   19b00:	6123      	str	r3, [r4, #16]
   19b02:	f001 f883 	bl	1ac0c <nrf_mem_init>
   19b06:	2800      	cmp	r0, #0
   19b08:	d156      	bne.n	19bb8 <bsd_platform_init+0xf4>
   19b0a:	4621      	mov	r1, r4
   19b0c:	a801      	add	r0, sp, #4
   19b0e:	f001 f8f1 	bl	1acf4 <nrf_mem_register>
   19b12:	2800      	cmp	r0, #0
   19b14:	d150      	bne.n	19bb8 <bsd_platform_init+0xf4>
   19b16:	f7f7 fe67 	bl	117e8 <bsd_os_init>
   19b1a:	f7fd fc55 	bl	173c8 <rpc_framework_init>
   19b1e:	2800      	cmp	r0, #0
   19b20:	d14a      	bne.n	19bb8 <bsd_platform_init+0xf4>
   19b22:	783a      	ldrb	r2, [r7, #0]
   19b24:	682b      	ldr	r3, [r5, #0]
   19b26:	bb32      	cbnz	r2, 19b76 <bsd_platform_init+0xb2>
   19b28:	4606      	mov	r6, r0
   19b2a:	2220      	movs	r2, #32
   19b2c:	2408      	movs	r4, #8
   19b2e:	2500      	movs	r5, #0
   19b30:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
   19b34:	f44f 4780 	mov.w	r7, #16384	; 0x4000
   19b38:	f503 5141 	add.w	r1, r3, #12352	; 0x3040
   19b3c:	4411      	add	r1, r2
   19b3e:	9302      	str	r3, [sp, #8]
   19b40:	e9cd 6008 	strd	r6, r0, [sp, #32]
   19b44:	910c      	str	r1, [sp, #48]	; 0x30
   19b46:	9203      	str	r2, [sp, #12]
   19b48:	f103 0140 	add.w	r1, r3, #64	; 0x40
   19b4c:	9205      	str	r2, [sp, #20]
   19b4e:	9207      	str	r2, [sp, #28]
   19b50:	eb0d 0004 	add.w	r0, sp, r4
   19b54:	189a      	adds	r2, r3, r2
   19b56:	3360      	adds	r3, #96	; 0x60
   19b58:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
   19b5c:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   19b60:	e9cd 740d 	strd	r7, r4, [sp, #52]	; 0x34
   19b64:	940f      	str	r4, [sp, #60]	; 0x3c
   19b66:	9104      	str	r1, [sp, #16]
   19b68:	9206      	str	r2, [sp, #24]
   19b6a:	930a      	str	r3, [sp, #40]	; 0x28
   19b6c:	f7fa fba6 	bl	142bc <rpc_transport_ipc_init>
   19b70:	b128      	cbz	r0, 19b7e <bsd_platform_init+0xba>
   19b72:	b013      	add	sp, #76	; 0x4c
   19b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19b76:	441e      	add	r6, r3
   19b78:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   19b7c:	e7d5      	b.n	19b2a <bsd_platform_init+0x66>
   19b7e:	f001 fcf9 	bl	1b574 <interface_init>
   19b82:	b9c8      	cbnz	r0, 19bb8 <bsd_platform_init+0xf4>
   19b84:	f7fe fcf4 	bl	18570 <at_interface_init>
   19b88:	b9b0      	cbnz	r0, 19bb8 <bsd_platform_init+0xf4>
   19b8a:	f7fb feb7 	bl	158fc <ip_interface_init>
   19b8e:	b998      	cbnz	r0, 19bb8 <bsd_platform_init+0xf4>
   19b90:	f7fb f96e 	bl	14e70 <tls_interface_init>
   19b94:	b980      	cbnz	r0, 19bb8 <bsd_platform_init+0xf4>
   19b96:	f001 fa09 	bl	1afac <mfu_interface_init>
   19b9a:	b968      	cbnz	r0, 19bb8 <bsd_platform_init+0xf4>
   19b9c:	f7fe ff0a 	bl	189b4 <pdn_interface_init>
   19ba0:	b950      	cbnz	r0, 19bb8 <bsd_platform_init+0xf4>
   19ba2:	f7fe fb3b 	bl	1821c <gnss_interface_init>
   19ba6:	b938      	cbnz	r0, 19bb8 <bsd_platform_init+0xf4>
   19ba8:	f7f9 fdc6 	bl	13738 <logobj_interface_init>
   19bac:	1b40      	subs	r0, r0, r5
   19bae:	bf18      	it	ne
   19bb0:	2001      	movne	r0, #1
   19bb2:	4240      	negs	r0, r0
   19bb4:	b013      	add	sp, #76	; 0x4c
   19bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19bb8:	f04f 30ff 	mov.w	r0, #4294967295
   19bbc:	b013      	add	sp, #76	; 0x4c
   19bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19bc0:	20020efc 	.word	0x20020efc
   19bc4:	20020ee8 	.word	0x20020ee8
   19bc8:	00021020 	.word	0x00021020

00019bcc <bsd_platform_af_method_table_get>:
   19bcc:	2805      	cmp	r0, #5
   19bce:	d02a      	beq.n	19c26 <bsd_platform_af_method_table_get+0x5a>
   19bd0:	b508      	push	{r3, lr}
   19bd2:	d914      	bls.n	19bfe <bsd_platform_af_method_table_get+0x32>
   19bd4:	280a      	cmp	r0, #10
   19bd6:	d016      	beq.n	19c06 <bsd_platform_af_method_table_get+0x3a>
   19bd8:	2866      	cmp	r0, #102	; 0x66
   19bda:	d11f      	bne.n	19c1c <bsd_platform_af_method_table_get+0x50>
   19bdc:	f240 2302 	movw	r3, #514	; 0x202
   19be0:	429a      	cmp	r2, r3
   19be2:	d035      	beq.n	19c50 <bsd_platform_af_method_table_get+0x84>
   19be4:	f240 2305 	movw	r3, #517	; 0x205
   19be8:	429a      	cmp	r2, r3
   19bea:	d035      	beq.n	19c58 <bsd_platform_af_method_table_get+0x8c>
   19bec:	f240 2301 	movw	r3, #513	; 0x201
   19bf0:	429a      	cmp	r2, r3
   19bf2:	d02f      	beq.n	19c54 <bsd_platform_af_method_table_get+0x88>
   19bf4:	202b      	movs	r0, #43	; 0x2b
   19bf6:	f7f7 fc67 	bl	114c8 <bsd_os_errno_set>
   19bfa:	2000      	movs	r0, #0
   19bfc:	bd08      	pop	{r3, pc}
   19bfe:	2801      	cmp	r0, #1
   19c00:	d016      	beq.n	19c30 <bsd_platform_af_method_table_get+0x64>
   19c02:	2802      	cmp	r0, #2
   19c04:	d10a      	bne.n	19c1c <bsd_platform_af_method_table_get+0x50>
   19c06:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   19c0a:	d21a      	bcs.n	19c42 <bsd_platform_af_method_table_get+0x76>
   19c0c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   19c10:	d21a      	bcs.n	19c48 <bsd_platform_af_method_table_get+0x7c>
   19c12:	3a01      	subs	r2, #1
   19c14:	2a01      	cmp	r2, #1
   19c16:	d8ed      	bhi.n	19bf4 <bsd_platform_af_method_table_get+0x28>
   19c18:	4810      	ldr	r0, [pc, #64]	; (19c5c <bsd_platform_af_method_table_get+0x90>)
   19c1a:	bd08      	pop	{r3, pc}
   19c1c:	2016      	movs	r0, #22
   19c1e:	f7f7 fc53 	bl	114c8 <bsd_os_errno_set>
   19c22:	2000      	movs	r0, #0
   19c24:	bd08      	pop	{r3, pc}
   19c26:	2903      	cmp	r1, #3
   19c28:	480d      	ldr	r0, [pc, #52]	; (19c60 <bsd_platform_af_method_table_get+0x94>)
   19c2a:	bf18      	it	ne
   19c2c:	2000      	movne	r0, #0
   19c2e:	4770      	bx	lr
   19c30:	f240 2303 	movw	r3, #515	; 0x203
   19c34:	429a      	cmp	r2, r3
   19c36:	d009      	beq.n	19c4c <bsd_platform_af_method_table_get+0x80>
   19c38:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   19c3c:	d1da      	bne.n	19bf4 <bsd_platform_af_method_table_get+0x28>
   19c3e:	4809      	ldr	r0, [pc, #36]	; (19c64 <bsd_platform_af_method_table_get+0x98>)
   19c40:	bd08      	pop	{r3, pc}
   19c42:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   19c46:	d1d5      	bne.n	19bf4 <bsd_platform_af_method_table_get+0x28>
   19c48:	4807      	ldr	r0, [pc, #28]	; (19c68 <bsd_platform_af_method_table_get+0x9c>)
   19c4a:	bd08      	pop	{r3, pc}
   19c4c:	4807      	ldr	r0, [pc, #28]	; (19c6c <bsd_platform_af_method_table_get+0xa0>)
   19c4e:	bd08      	pop	{r3, pc}
   19c50:	4807      	ldr	r0, [pc, #28]	; (19c70 <bsd_platform_af_method_table_get+0xa4>)
   19c52:	bd08      	pop	{r3, pc}
   19c54:	4807      	ldr	r0, [pc, #28]	; (19c74 <bsd_platform_af_method_table_get+0xa8>)
   19c56:	bd08      	pop	{r3, pc}
   19c58:	4807      	ldr	r0, [pc, #28]	; (19c78 <bsd_platform_af_method_table_get+0xac>)
   19c5a:	bd08      	pop	{r3, pc}
   19c5c:	00020f08 	.word	0x00020f08
   19c60:	00020ff8 	.word	0x00020ff8
   19c64:	00020fa8 	.word	0x00020fa8
   19c68:	00020f30 	.word	0x00020f30
   19c6c:	00020f58 	.word	0x00020f58
   19c70:	00020f80 	.word	0x00020f80
   19c74:	00020ee0 	.word	0x00020ee0
   19c78:	00020fd0 	.word	0x00020fd0

00019c7c <bsd_platform_fd_method_table_get>:
   19c7c:	b538      	push	{r3, r4, r5, lr}
   19c7e:	4605      	mov	r5, r0
   19c80:	f001 fdaa 	bl	1b7d8 <interface_socket_from_handle_get>
   19c84:	4604      	mov	r4, r0
   19c86:	b960      	cbnz	r0, 19ca2 <bsd_platform_fd_method_table_get+0x26>
   19c88:	4b2c      	ldr	r3, [pc, #176]	; (19d3c <bsd_platform_fd_method_table_get+0xc0>)
   19c8a:	429d      	cmp	r5, r3
   19c8c:	d02f      	beq.n	19cee <bsd_platform_fd_method_table_get+0x72>
   19c8e:	0c2b      	lsrs	r3, r5, #16
   19c90:	4a2b      	ldr	r2, [pc, #172]	; (19d40 <bsd_platform_fd_method_table_get+0xc4>)
   19c92:	041b      	lsls	r3, r3, #16
   19c94:	4293      	cmp	r3, r2
   19c96:	d03d      	beq.n	19d14 <bsd_platform_fd_method_table_get+0x98>
   19c98:	4b2a      	ldr	r3, [pc, #168]	; (19d44 <bsd_platform_fd_method_table_get+0xc8>)
   19c9a:	429d      	cmp	r5, r3
   19c9c:	d149      	bne.n	19d32 <bsd_platform_fd_method_table_get+0xb6>
   19c9e:	482a      	ldr	r0, [pc, #168]	; (19d48 <bsd_platform_fd_method_table_get+0xcc>)
   19ca0:	bd38      	pop	{r3, r4, r5, pc}
   19ca2:	68c3      	ldr	r3, [r0, #12]
   19ca4:	6942      	ldr	r2, [r0, #20]
   19ca6:	2b05      	cmp	r3, #5
   19ca8:	d036      	beq.n	19d18 <bsd_platform_fd_method_table_get+0x9c>
   19caa:	d911      	bls.n	19cd0 <bsd_platform_fd_method_table_get+0x54>
   19cac:	2b0a      	cmp	r3, #10
   19cae:	d013      	beq.n	19cd8 <bsd_platform_fd_method_table_get+0x5c>
   19cb0:	2b66      	cmp	r3, #102	; 0x66
   19cb2:	d11e      	bne.n	19cf2 <bsd_platform_fd_method_table_get+0x76>
   19cb4:	f240 2302 	movw	r3, #514	; 0x202
   19cb8:	429a      	cmp	r2, r3
   19cba:	d02b      	beq.n	19d14 <bsd_platform_fd_method_table_get+0x98>
   19cbc:	f240 2305 	movw	r3, #517	; 0x205
   19cc0:	429a      	cmp	r2, r3
   19cc2:	d02f      	beq.n	19d24 <bsd_platform_fd_method_table_get+0xa8>
   19cc4:	f240 2301 	movw	r3, #513	; 0x201
   19cc8:	429a      	cmp	r2, r3
   19cca:	d11e      	bne.n	19d0a <bsd_platform_fd_method_table_get+0x8e>
   19ccc:	481f      	ldr	r0, [pc, #124]	; (19d4c <bsd_platform_fd_method_table_get+0xd0>)
   19cce:	bd38      	pop	{r3, r4, r5, pc}
   19cd0:	2b01      	cmp	r3, #1
   19cd2:	d013      	beq.n	19cfc <bsd_platform_fd_method_table_get+0x80>
   19cd4:	2b02      	cmp	r3, #2
   19cd6:	d10c      	bne.n	19cf2 <bsd_platform_fd_method_table_get+0x76>
   19cd8:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   19cdc:	d224      	bcs.n	19d28 <bsd_platform_fd_method_table_get+0xac>
   19cde:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   19ce2:	d224      	bcs.n	19d2e <bsd_platform_fd_method_table_get+0xb2>
   19ce4:	3a01      	subs	r2, #1
   19ce6:	2a01      	cmp	r2, #1
   19ce8:	d80f      	bhi.n	19d0a <bsd_platform_fd_method_table_get+0x8e>
   19cea:	4819      	ldr	r0, [pc, #100]	; (19d50 <bsd_platform_fd_method_table_get+0xd4>)
   19cec:	bd38      	pop	{r3, r4, r5, pc}
   19cee:	4819      	ldr	r0, [pc, #100]	; (19d54 <bsd_platform_fd_method_table_get+0xd8>)
   19cf0:	bd38      	pop	{r3, r4, r5, pc}
   19cf2:	2016      	movs	r0, #22
   19cf4:	f7f7 fbe8 	bl	114c8 <bsd_os_errno_set>
   19cf8:	2000      	movs	r0, #0
   19cfa:	bd38      	pop	{r3, r4, r5, pc}
   19cfc:	f240 2303 	movw	r3, #515	; 0x203
   19d00:	429a      	cmp	r2, r3
   19d02:	d0f4      	beq.n	19cee <bsd_platform_fd_method_table_get+0x72>
   19d04:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   19d08:	d0c9      	beq.n	19c9e <bsd_platform_fd_method_table_get+0x22>
   19d0a:	202b      	movs	r0, #43	; 0x2b
   19d0c:	f7f7 fbdc 	bl	114c8 <bsd_os_errno_set>
   19d10:	2000      	movs	r0, #0
   19d12:	bd38      	pop	{r3, r4, r5, pc}
   19d14:	4810      	ldr	r0, [pc, #64]	; (19d58 <bsd_platform_fd_method_table_get+0xdc>)
   19d16:	bd38      	pop	{r3, r4, r5, pc}
   19d18:	6903      	ldr	r3, [r0, #16]
   19d1a:	4810      	ldr	r0, [pc, #64]	; (19d5c <bsd_platform_fd_method_table_get+0xe0>)
   19d1c:	2b03      	cmp	r3, #3
   19d1e:	bf18      	it	ne
   19d20:	2000      	movne	r0, #0
   19d22:	bd38      	pop	{r3, r4, r5, pc}
   19d24:	480e      	ldr	r0, [pc, #56]	; (19d60 <bsd_platform_fd_method_table_get+0xe4>)
   19d26:	bd38      	pop	{r3, r4, r5, pc}
   19d28:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   19d2c:	d1ed      	bne.n	19d0a <bsd_platform_fd_method_table_get+0x8e>
   19d2e:	480d      	ldr	r0, [pc, #52]	; (19d64 <bsd_platform_fd_method_table_get+0xe8>)
   19d30:	bd38      	pop	{r3, r4, r5, pc}
   19d32:	2009      	movs	r0, #9
   19d34:	f7f7 fbc8 	bl	114c8 <bsd_os_errno_set>
   19d38:	4620      	mov	r0, r4
   19d3a:	bd38      	pop	{r3, r4, r5, pc}
   19d3c:	49765432 	.word	0x49765432
   19d40:	789a0000 	.word	0x789a0000
   19d44:	49765443 	.word	0x49765443
   19d48:	00020fa8 	.word	0x00020fa8
   19d4c:	00020ee0 	.word	0x00020ee0
   19d50:	00020f08 	.word	0x00020f08
   19d54:	00020f58 	.word	0x00020f58
   19d58:	00020f80 	.word	0x00020f80
   19d5c:	00020ff8 	.word	0x00020ff8
   19d60:	00020fd0 	.word	0x00020fd0
   19d64:	00020f30 	.word	0x00020f30

00019d68 <bsd_platform_getaddrinfo>:
   19d68:	f7fc bf1c 	b.w	16ba4 <ip_interface_getaddrinfo>

00019d6c <bsd_platform_freeaddrinfo>:
   19d6c:	f7fd b818 	b.w	16da0 <ip_interface_freeaddrinfo>

00019d70 <bsd_platform_poll>:
   19d70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19d74:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   19d78:	b083      	sub	sp, #12
   19d7a:	9200      	str	r2, [sp, #0]
   19d7c:	2800      	cmp	r0, #0
   19d7e:	d048      	beq.n	19e12 <bsd_platform_poll+0xa2>
   19d80:	1e4b      	subs	r3, r1, #1
   19d82:	2b08      	cmp	r3, #8
   19d84:	d845      	bhi.n	19e12 <bsd_platform_poll+0xa2>
   19d86:	4680      	mov	r8, r0
   19d88:	4605      	mov	r5, r0
   19d8a:	2400      	movs	r4, #0
   19d8c:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
   19d90:	88ab      	ldrh	r3, [r5, #4]
   19d92:	6828      	ldr	r0, [r5, #0]
   19d94:	f003 0303 	and.w	r3, r3, #3
   19d98:	a901      	add	r1, sp, #4
   19d9a:	f043 061c 	orr.w	r6, r3, #28
   19d9e:	f001 fd29 	bl	1b7f4 <interface_socket_event_get>
   19da2:	9b01      	ldr	r3, [sp, #4]
   19da4:	3508      	adds	r5, #8
   19da6:	4033      	ands	r3, r6
   19da8:	f825 3c02 	strh.w	r3, [r5, #-2]
   19dac:	b103      	cbz	r3, 19db0 <bsd_platform_poll+0x40>
   19dae:	3401      	adds	r4, #1
   19db0:	42af      	cmp	r7, r5
   19db2:	d1ed      	bne.n	19d90 <bsd_platform_poll+0x20>
   19db4:	bb9c      	cbnz	r4, 19e1e <bsd_platform_poll+0xae>
   19db6:	4669      	mov	r1, sp
   19db8:	4640      	mov	r0, r8
   19dba:	f7f7 facd 	bl	11358 <bsd_os_timedwait>
   19dbe:	4607      	mov	r7, r0
   19dc0:	b108      	cbz	r0, 19dc6 <bsd_platform_poll+0x56>
   19dc2:	283c      	cmp	r0, #60	; 0x3c
   19dc4:	d11d      	bne.n	19e02 <bsd_platform_poll+0x92>
   19dc6:	46c1      	mov	r9, r8
   19dc8:	2600      	movs	r6, #0
   19dca:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   19dce:	f8d9 0000 	ldr.w	r0, [r9]
   19dd2:	f003 0303 	and.w	r3, r3, #3
   19dd6:	a901      	add	r1, sp, #4
   19dd8:	f043 041c 	orr.w	r4, r3, #28
   19ddc:	f001 fd0a 	bl	1b7f4 <interface_socket_event_get>
   19de0:	9b01      	ldr	r3, [sp, #4]
   19de2:	f109 0908 	add.w	r9, r9, #8
   19de6:	4023      	ands	r3, r4
   19de8:	f829 3c02 	strh.w	r3, [r9, #-2]
   19dec:	b103      	cbz	r3, 19df0 <bsd_platform_poll+0x80>
   19dee:	3601      	adds	r6, #1
   19df0:	454d      	cmp	r5, r9
   19df2:	d1ea      	bne.n	19dca <bsd_platform_poll+0x5a>
   19df4:	b90e      	cbnz	r6, 19dfa <bsd_platform_poll+0x8a>
   19df6:	2f00      	cmp	r7, #0
   19df8:	d0dd      	beq.n	19db6 <bsd_platform_poll+0x46>
   19dfa:	4630      	mov	r0, r6
   19dfc:	b003      	add	sp, #12
   19dfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19e02:	2023      	movs	r0, #35	; 0x23
   19e04:	f7f7 fb60 	bl	114c8 <bsd_os_errno_set>
   19e08:	f04f 30ff 	mov.w	r0, #4294967295
   19e0c:	b003      	add	sp, #12
   19e0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19e12:	2016      	movs	r0, #22
   19e14:	f7f7 fb58 	bl	114c8 <bsd_os_errno_set>
   19e18:	f04f 30ff 	mov.w	r0, #4294967295
   19e1c:	e7ee      	b.n	19dfc <bsd_platform_poll+0x8c>
   19e1e:	4620      	mov	r0, r4
   19e20:	e7ec      	b.n	19dfc <bsd_platform_poll+0x8c>
   19e22:	bf00      	nop

00019e24 <bsd_platform_fcntl>:
   19e24:	b508      	push	{r3, lr}
   19e26:	4b06      	ldr	r3, [pc, #24]	; (19e40 <bsd_platform_fcntl+0x1c>)
   19e28:	4298      	cmp	r0, r3
   19e2a:	d003      	beq.n	19e34 <bsd_platform_fcntl+0x10>
   19e2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   19e30:	f001 bd8a 	b.w	1b948 <interface_socket_fcntl>
   19e34:	202d      	movs	r0, #45	; 0x2d
   19e36:	f7f7 fb47 	bl	114c8 <bsd_os_errno_set>
   19e3a:	f04f 30ff 	mov.w	r0, #4294967295
   19e3e:	bd08      	pop	{r3, pc}
   19e40:	49765432 	.word	0x49765432

00019e44 <linked_list_init>:
   19e44:	b128      	cbz	r0, 19e52 <linked_list_init+0xe>
   19e46:	2300      	movs	r3, #0
   19e48:	6003      	str	r3, [r0, #0]
   19e4a:	e9c0 3301 	strd	r3, r3, [r0, #4]
   19e4e:	4618      	mov	r0, r3
   19e50:	4770      	bx	lr
   19e52:	2007      	movs	r0, #7
   19e54:	4770      	bx	lr
   19e56:	bf00      	nop

00019e58 <linked_list_push>:
   19e58:	6802      	ldr	r2, [r0, #0]
   19e5a:	4603      	mov	r3, r0
   19e5c:	3201      	adds	r2, #1
   19e5e:	d00e      	beq.n	19e7e <linked_list_push+0x26>
   19e60:	2200      	movs	r2, #0
   19e62:	600a      	str	r2, [r1, #0]
   19e64:	6802      	ldr	r2, [r0, #0]
   19e66:	b13a      	cbz	r2, 19e78 <linked_list_push+0x20>
   19e68:	6882      	ldr	r2, [r0, #8]
   19e6a:	6011      	str	r1, [r2, #0]
   19e6c:	6081      	str	r1, [r0, #8]
   19e6e:	681a      	ldr	r2, [r3, #0]
   19e70:	2000      	movs	r0, #0
   19e72:	3201      	adds	r2, #1
   19e74:	601a      	str	r2, [r3, #0]
   19e76:	4770      	bx	lr
   19e78:	e9c0 1101 	strd	r1, r1, [r0, #4]
   19e7c:	e7f7      	b.n	19e6e <linked_list_push+0x16>
   19e7e:	2004      	movs	r0, #4
   19e80:	4770      	bx	lr
   19e82:	bf00      	nop

00019e84 <linked_list_pop>:
   19e84:	4603      	mov	r3, r0
   19e86:	6800      	ldr	r0, [r0, #0]
   19e88:	b128      	cbz	r0, 19e96 <linked_list_pop+0x12>
   19e8a:	6858      	ldr	r0, [r3, #4]
   19e8c:	681a      	ldr	r2, [r3, #0]
   19e8e:	6801      	ldr	r1, [r0, #0]
   19e90:	3a01      	subs	r2, #1
   19e92:	6059      	str	r1, [r3, #4]
   19e94:	601a      	str	r2, [r3, #0]
   19e96:	4770      	bx	lr

00019e98 <linked_list_peek>:
   19e98:	6803      	ldr	r3, [r0, #0]
   19e9a:	b10b      	cbz	r3, 19ea0 <linked_list_peek+0x8>
   19e9c:	6840      	ldr	r0, [r0, #4]
   19e9e:	4770      	bx	lr
   19ea0:	4618      	mov	r0, r3
   19ea2:	4770      	bx	lr

00019ea4 <linked_list_size_get>:
   19ea4:	6800      	ldr	r0, [r0, #0]
   19ea6:	4770      	bx	lr

00019ea8 <linked_list_get_next>:
   19ea8:	6800      	ldr	r0, [r0, #0]
   19eaa:	4770      	bx	lr

00019eac <nrf_socket>:
   19eac:	b570      	push	{r4, r5, r6, lr}
   19eae:	4604      	mov	r4, r0
   19eb0:	460d      	mov	r5, r1
   19eb2:	4616      	mov	r6, r2
   19eb4:	f7ff fe8a 	bl	19bcc <bsd_platform_af_method_table_get>
   19eb8:	b130      	cbz	r0, 19ec8 <nrf_socket+0x1c>
   19eba:	6803      	ldr	r3, [r0, #0]
   19ebc:	4632      	mov	r2, r6
   19ebe:	4629      	mov	r1, r5
   19ec0:	4620      	mov	r0, r4
   19ec2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   19ec6:	4718      	bx	r3
   19ec8:	f04f 30ff 	mov.w	r0, #4294967295
   19ecc:	bd70      	pop	{r4, r5, r6, pc}
   19ece:	bf00      	nop

00019ed0 <nrf_close>:
   19ed0:	b510      	push	{r4, lr}
   19ed2:	4604      	mov	r4, r0
   19ed4:	f7ff fed2 	bl	19c7c <bsd_platform_fd_method_table_get>
   19ed8:	b120      	cbz	r0, 19ee4 <nrf_close+0x14>
   19eda:	6843      	ldr	r3, [r0, #4]
   19edc:	4620      	mov	r0, r4
   19ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19ee2:	4718      	bx	r3
   19ee4:	f04f 30ff 	mov.w	r0, #4294967295
   19ee8:	bd10      	pop	{r4, pc}
   19eea:	bf00      	nop

00019eec <nrf_sendto>:
   19eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19ef0:	460d      	mov	r5, r1
   19ef2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   19ef6:	4616      	mov	r6, r2
   19ef8:	461f      	mov	r7, r3
   19efa:	4604      	mov	r4, r0
   19efc:	f7ff febe 	bl	19c7c <bsd_platform_fd_method_table_get>
   19f00:	b158      	cbz	r0, 19f1a <nrf_sendto+0x2e>
   19f02:	e9cd 8908 	strd	r8, r9, [sp, #32]
   19f06:	f8d0 e008 	ldr.w	lr, [r0, #8]
   19f0a:	463b      	mov	r3, r7
   19f0c:	4632      	mov	r2, r6
   19f0e:	4629      	mov	r1, r5
   19f10:	4620      	mov	r0, r4
   19f12:	46f4      	mov	ip, lr
   19f14:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19f18:	4760      	bx	ip
   19f1a:	f04f 30ff 	mov.w	r0, #4294967295
   19f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19f22:	bf00      	nop

00019f24 <nrf_recvfrom>:
   19f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19f28:	460d      	mov	r5, r1
   19f2a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   19f2e:	4616      	mov	r6, r2
   19f30:	461f      	mov	r7, r3
   19f32:	4604      	mov	r4, r0
   19f34:	f7ff fea2 	bl	19c7c <bsd_platform_fd_method_table_get>
   19f38:	b158      	cbz	r0, 19f52 <nrf_recvfrom+0x2e>
   19f3a:	e9cd 8908 	strd	r8, r9, [sp, #32]
   19f3e:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   19f42:	463b      	mov	r3, r7
   19f44:	4632      	mov	r2, r6
   19f46:	4629      	mov	r1, r5
   19f48:	4620      	mov	r0, r4
   19f4a:	46f4      	mov	ip, lr
   19f4c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19f50:	4760      	bx	ip
   19f52:	f04f 30ff 	mov.w	r0, #4294967295
   19f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19f5a:	bf00      	nop

00019f5c <nrf_connect>:
   19f5c:	b570      	push	{r4, r5, r6, lr}
   19f5e:	460d      	mov	r5, r1
   19f60:	4616      	mov	r6, r2
   19f62:	4604      	mov	r4, r0
   19f64:	f7ff fe8a 	bl	19c7c <bsd_platform_fd_method_table_get>
   19f68:	b130      	cbz	r0, 19f78 <nrf_connect+0x1c>
   19f6a:	6943      	ldr	r3, [r0, #20]
   19f6c:	4632      	mov	r2, r6
   19f6e:	4629      	mov	r1, r5
   19f70:	4620      	mov	r0, r4
   19f72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   19f76:	4718      	bx	r3
   19f78:	f04f 30ff 	mov.w	r0, #4294967295
   19f7c:	bd70      	pop	{r4, r5, r6, pc}
   19f7e:	bf00      	nop

00019f80 <nrf_listen>:
   19f80:	b570      	push	{r4, r5, r6, lr}
   19f82:	460d      	mov	r5, r1
   19f84:	4604      	mov	r4, r0
   19f86:	f7ff fe79 	bl	19c7c <bsd_platform_fd_method_table_get>
   19f8a:	b128      	cbz	r0, 19f98 <nrf_listen+0x18>
   19f8c:	6983      	ldr	r3, [r0, #24]
   19f8e:	4629      	mov	r1, r5
   19f90:	4620      	mov	r0, r4
   19f92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   19f96:	4718      	bx	r3
   19f98:	f04f 30ff 	mov.w	r0, #4294967295
   19f9c:	bd70      	pop	{r4, r5, r6, pc}
   19f9e:	bf00      	nop

00019fa0 <nrf_accept>:
   19fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19fa4:	460d      	mov	r5, r1
   19fa6:	4616      	mov	r6, r2
   19fa8:	4604      	mov	r4, r0
   19faa:	f7ff fe67 	bl	19c7c <bsd_platform_fd_method_table_get>
   19fae:	b140      	cbz	r0, 19fc2 <nrf_accept+0x22>
   19fb0:	69c7      	ldr	r7, [r0, #28]
   19fb2:	4632      	mov	r2, r6
   19fb4:	4629      	mov	r1, r5
   19fb6:	4620      	mov	r0, r4
   19fb8:	46bc      	mov	ip, r7
   19fba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19fbe:	2300      	movs	r3, #0
   19fc0:	4760      	bx	ip
   19fc2:	f04f 30ff 	mov.w	r0, #4294967295
   19fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19fca:	bf00      	nop

00019fcc <nrf_bind>:
   19fcc:	b570      	push	{r4, r5, r6, lr}
   19fce:	460d      	mov	r5, r1
   19fd0:	4616      	mov	r6, r2
   19fd2:	4604      	mov	r4, r0
   19fd4:	f7ff fe52 	bl	19c7c <bsd_platform_fd_method_table_get>
   19fd8:	b130      	cbz	r0, 19fe8 <nrf_bind+0x1c>
   19fda:	6903      	ldr	r3, [r0, #16]
   19fdc:	4632      	mov	r2, r6
   19fde:	4629      	mov	r1, r5
   19fe0:	4620      	mov	r0, r4
   19fe2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   19fe6:	4718      	bx	r3
   19fe8:	f04f 30ff 	mov.w	r0, #4294967295
   19fec:	bd70      	pop	{r4, r5, r6, pc}
   19fee:	bf00      	nop

00019ff0 <nrf_setsockopt>:
   19ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19ff4:	f8dd 8018 	ldr.w	r8, [sp, #24]
   19ff8:	460d      	mov	r5, r1
   19ffa:	4616      	mov	r6, r2
   19ffc:	461f      	mov	r7, r3
   19ffe:	4604      	mov	r4, r0
   1a000:	f7ff fe3c 	bl	19c7c <bsd_platform_fd_method_table_get>
   1a004:	b158      	cbz	r0, 1a01e <nrf_setsockopt+0x2e>
   1a006:	f8cd 8018 	str.w	r8, [sp, #24]
   1a00a:	f8d0 e020 	ldr.w	lr, [r0, #32]
   1a00e:	463b      	mov	r3, r7
   1a010:	4632      	mov	r2, r6
   1a012:	4629      	mov	r1, r5
   1a014:	4620      	mov	r0, r4
   1a016:	46f4      	mov	ip, lr
   1a018:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1a01c:	4760      	bx	ip
   1a01e:	f04f 30ff 	mov.w	r0, #4294967295
   1a022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a026:	bf00      	nop

0001a028 <nrf_getsockopt>:
   1a028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a02c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1a030:	460d      	mov	r5, r1
   1a032:	4616      	mov	r6, r2
   1a034:	461f      	mov	r7, r3
   1a036:	4604      	mov	r4, r0
   1a038:	f7ff fe20 	bl	19c7c <bsd_platform_fd_method_table_get>
   1a03c:	b158      	cbz	r0, 1a056 <nrf_getsockopt+0x2e>
   1a03e:	f8cd 8018 	str.w	r8, [sp, #24]
   1a042:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   1a046:	463b      	mov	r3, r7
   1a048:	4632      	mov	r2, r6
   1a04a:	4629      	mov	r1, r5
   1a04c:	4620      	mov	r0, r4
   1a04e:	46f4      	mov	ip, lr
   1a050:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1a054:	4760      	bx	ip
   1a056:	f04f 30ff 	mov.w	r0, #4294967295
   1a05a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a05e:	bf00      	nop

0001a060 <nrf_getaddrinfo>:
   1a060:	f7ff be82 	b.w	19d68 <bsd_platform_getaddrinfo>

0001a064 <nrf_freeaddrinfo>:
   1a064:	f7ff be82 	b.w	19d6c <bsd_platform_freeaddrinfo>

0001a068 <nrf_poll>:
   1a068:	f7ff be82 	b.w	19d70 <bsd_platform_poll>

0001a06c <nrf_fcntl>:
   1a06c:	f7ff beda 	b.w	19e24 <bsd_platform_fcntl>

0001a070 <rpc_gnss_serialize_utc>:
   1a070:	4603      	mov	r3, r0
   1a072:	b1d8      	cbz	r0, 1a0ac <rpc_gnss_serialize_utc+0x3c>
   1a074:	b1d1      	cbz	r1, 1a0ac <rpc_gnss_serialize_utc+0x3c>
   1a076:	2000      	movs	r0, #0
   1a078:	2201      	movs	r2, #1
   1a07a:	7048      	strb	r0, [r1, #1]
   1a07c:	700a      	strb	r2, [r1, #0]
   1a07e:	685a      	ldr	r2, [r3, #4]
   1a080:	2010      	movs	r0, #16
   1a082:	f8c1 2006 	str.w	r2, [r1, #6]
   1a086:	681a      	ldr	r2, [r3, #0]
   1a088:	f8c1 2002 	str.w	r2, [r1, #2]
   1a08c:	f993 200a 	ldrsb.w	r2, [r3, #10]
   1a090:	730a      	strb	r2, [r1, #12]
   1a092:	f993 200d 	ldrsb.w	r2, [r3, #13]
   1a096:	73ca      	strb	r2, [r1, #15]
   1a098:	f993 200c 	ldrsb.w	r2, [r3, #12]
   1a09c:	738a      	strb	r2, [r1, #14]
   1a09e:	7a1a      	ldrb	r2, [r3, #8]
   1a0a0:	728a      	strb	r2, [r1, #10]
   1a0a2:	7ada      	ldrb	r2, [r3, #11]
   1a0a4:	734a      	strb	r2, [r1, #13]
   1a0a6:	7a5b      	ldrb	r3, [r3, #9]
   1a0a8:	72cb      	strb	r3, [r1, #11]
   1a0aa:	4770      	bx	lr
   1a0ac:	f04f 30ff 	mov.w	r0, #4294967295
   1a0b0:	4770      	bx	lr
   1a0b2:	bf00      	nop

0001a0b4 <rpc_gnss_serialize_ephe>:
   1a0b4:	4603      	mov	r3, r0
   1a0b6:	2800      	cmp	r0, #0
   1a0b8:	d04b      	beq.n	1a152 <rpc_gnss_serialize_ephe+0x9e>
   1a0ba:	2900      	cmp	r1, #0
   1a0bc:	d049      	beq.n	1a152 <rpc_gnss_serialize_ephe+0x9e>
   1a0be:	2000      	movs	r0, #0
   1a0c0:	2202      	movs	r2, #2
   1a0c2:	7048      	strb	r0, [r1, #1]
   1a0c4:	700a      	strb	r2, [r1, #0]
   1a0c6:	68da      	ldr	r2, [r3, #12]
   1a0c8:	2040      	movs	r0, #64	; 0x40
   1a0ca:	f8c1 200b 	str.w	r2, [r1, #11]
   1a0ce:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   1a0d2:	f8a1 2009 	strh.w	r2, [r1, #9]
   1a0d6:	f993 2006 	ldrsb.w	r2, [r3, #6]
   1a0da:	720a      	strb	r2, [r1, #8]
   1a0dc:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
   1a0e0:	878a      	strh	r2, [r1, #60]	; 0x3c
   1a0e2:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
   1a0e6:	86ca      	strh	r2, [r1, #54]	; 0x36
   1a0e8:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
   1a0ec:	874a      	strh	r2, [r1, #58]	; 0x3a
   1a0ee:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
   1a0f2:	868a      	strh	r2, [r1, #52]	; 0x34
   1a0f4:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
   1a0f8:	87ca      	strh	r2, [r1, #62]	; 0x3e
   1a0fa:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
   1a0fe:	870a      	strh	r2, [r1, #56]	; 0x38
   1a100:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   1a104:	830a      	strh	r2, [r1, #24]
   1a106:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1a108:	f8c1 2022 	str.w	r2, [r1, #34]	; 0x22
   1a10c:	7c9a      	ldrb	r2, [r3, #18]
   1a10e:	744a      	strb	r2, [r1, #17]
   1a110:	785a      	ldrb	r2, [r3, #1]
   1a112:	70ca      	strb	r2, [r1, #3]
   1a114:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1a116:	62ca      	str	r2, [r1, #44]	; 0x2c
   1a118:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
   1a11c:	84ca      	strh	r2, [r1, #38]	; 0x26
   1a11e:	885a      	ldrh	r2, [r3, #2]
   1a120:	808a      	strh	r2, [r1, #4]
   1a122:	6a1a      	ldr	r2, [r3, #32]
   1a124:	f8c1 201a 	str.w	r2, [r1, #26]
   1a128:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1a12a:	630a      	str	r2, [r1, #48]	; 0x30
   1a12c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1a12e:	f8c1 201e 	str.w	r2, [r1, #30]
   1a132:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1a134:	628a      	str	r2, [r1, #40]	; 0x28
   1a136:	781a      	ldrb	r2, [r3, #0]
   1a138:	708a      	strb	r2, [r1, #2]
   1a13a:	f993 2010 	ldrsb.w	r2, [r3, #16]
   1a13e:	73ca      	strb	r2, [r1, #15]
   1a140:	889a      	ldrh	r2, [r3, #4]
   1a142:	80ca      	strh	r2, [r1, #6]
   1a144:	8a9a      	ldrh	r2, [r3, #20]
   1a146:	824a      	strh	r2, [r1, #18]
   1a148:	7c5a      	ldrb	r2, [r3, #17]
   1a14a:	740a      	strb	r2, [r1, #16]
   1a14c:	699b      	ldr	r3, [r3, #24]
   1a14e:	614b      	str	r3, [r1, #20]
   1a150:	4770      	bx	lr
   1a152:	f04f 30ff 	mov.w	r0, #4294967295
   1a156:	4770      	bx	lr

0001a158 <rpc_gnss_serialize_alm>:
   1a158:	4603      	mov	r3, r0
   1a15a:	b360      	cbz	r0, 1a1b6 <rpc_gnss_serialize_alm+0x5e>
   1a15c:	b359      	cbz	r1, 1a1b6 <rpc_gnss_serialize_alm+0x5e>
   1a15e:	2000      	movs	r0, #0
   1a160:	2203      	movs	r2, #3
   1a162:	7048      	strb	r0, [r1, #1]
   1a164:	700a      	strb	r2, [r1, #0]
   1a166:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   1a16a:	2021      	movs	r0, #33	; 0x21
   1a16c:	f8a1 201d 	strh.w	r2, [r1, #29]
   1a170:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
   1a174:	f8a1 201f 	strh.w	r2, [r1, #31]
   1a178:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
   1a17c:	810a      	strh	r2, [r1, #8]
   1a17e:	889a      	ldrh	r2, [r3, #4]
   1a180:	80ca      	strh	r2, [r1, #6]
   1a182:	78da      	ldrb	r2, [r3, #3]
   1a184:	714a      	strb	r2, [r1, #5]
   1a186:	699a      	ldr	r2, [r3, #24]
   1a188:	f8c1 2019 	str.w	r2, [r1, #25]
   1a18c:	691a      	ldr	r2, [r3, #16]
   1a18e:	f8c1 2011 	str.w	r2, [r1, #17]
   1a192:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   1a196:	814a      	strh	r2, [r1, #10]
   1a198:	68da      	ldr	r2, [r3, #12]
   1a19a:	f8c1 200d 	str.w	r2, [r1, #13]
   1a19e:	7a9a      	ldrb	r2, [r3, #10]
   1a1a0:	730a      	strb	r2, [r1, #12]
   1a1a2:	781a      	ldrb	r2, [r3, #0]
   1a1a4:	708a      	strb	r2, [r1, #2]
   1a1a6:	789a      	ldrb	r2, [r3, #2]
   1a1a8:	710a      	strb	r2, [r1, #4]
   1a1aa:	695a      	ldr	r2, [r3, #20]
   1a1ac:	f8c1 2015 	str.w	r2, [r1, #21]
   1a1b0:	785b      	ldrb	r3, [r3, #1]
   1a1b2:	70cb      	strb	r3, [r1, #3]
   1a1b4:	4770      	bx	lr
   1a1b6:	f04f 30ff 	mov.w	r0, #4294967295
   1a1ba:	4770      	bx	lr

0001a1bc <rpc_gnss_serialize_klob>:
   1a1bc:	4603      	mov	r3, r0
   1a1be:	b1f0      	cbz	r0, 1a1fe <rpc_gnss_serialize_klob+0x42>
   1a1c0:	b1e9      	cbz	r1, 1a1fe <rpc_gnss_serialize_klob+0x42>
   1a1c2:	2000      	movs	r0, #0
   1a1c4:	2204      	movs	r2, #4
   1a1c6:	7048      	strb	r0, [r1, #1]
   1a1c8:	700a      	strb	r2, [r1, #0]
   1a1ca:	f993 2000 	ldrsb.w	r2, [r3]
   1a1ce:	200a      	movs	r0, #10
   1a1d0:	708a      	strb	r2, [r1, #2]
   1a1d2:	f993 2001 	ldrsb.w	r2, [r3, #1]
   1a1d6:	70ca      	strb	r2, [r1, #3]
   1a1d8:	f993 2002 	ldrsb.w	r2, [r3, #2]
   1a1dc:	710a      	strb	r2, [r1, #4]
   1a1de:	f993 2003 	ldrsb.w	r2, [r3, #3]
   1a1e2:	714a      	strb	r2, [r1, #5]
   1a1e4:	f993 2004 	ldrsb.w	r2, [r3, #4]
   1a1e8:	718a      	strb	r2, [r1, #6]
   1a1ea:	f993 2005 	ldrsb.w	r2, [r3, #5]
   1a1ee:	71ca      	strb	r2, [r1, #7]
   1a1f0:	f993 2006 	ldrsb.w	r2, [r3, #6]
   1a1f4:	720a      	strb	r2, [r1, #8]
   1a1f6:	f993 3007 	ldrsb.w	r3, [r3, #7]
   1a1fa:	724b      	strb	r3, [r1, #9]
   1a1fc:	4770      	bx	lr
   1a1fe:	f04f 30ff 	mov.w	r0, #4294967295
   1a202:	4770      	bx	lr

0001a204 <rpc_gnss_serialize_nequick>:
   1a204:	4603      	mov	r3, r0
   1a206:	b198      	cbz	r0, 1a230 <rpc_gnss_serialize_nequick+0x2c>
   1a208:	b191      	cbz	r1, 1a230 <rpc_gnss_serialize_nequick+0x2c>
   1a20a:	2000      	movs	r0, #0
   1a20c:	2205      	movs	r2, #5
   1a20e:	7048      	strb	r0, [r1, #1]
   1a210:	700a      	strb	r2, [r1, #0]
   1a212:	f9b3 2000 	ldrsh.w	r2, [r3]
   1a216:	200a      	movs	r0, #10
   1a218:	804a      	strh	r2, [r1, #2]
   1a21a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   1a21e:	808a      	strh	r2, [r1, #4]
   1a220:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   1a224:	80ca      	strh	r2, [r1, #6]
   1a226:	799a      	ldrb	r2, [r3, #6]
   1a228:	720a      	strb	r2, [r1, #8]
   1a22a:	79db      	ldrb	r3, [r3, #7]
   1a22c:	724b      	strb	r3, [r1, #9]
   1a22e:	4770      	bx	lr
   1a230:	f04f 30ff 	mov.w	r0, #4294967295
   1a234:	4770      	bx	lr
   1a236:	bf00      	nop

0001a238 <rpc_gnss_serialize_time_and_sv_tow>:
   1a238:	b310      	cbz	r0, 1a280 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   1a23a:	b309      	cbz	r1, 1a280 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   1a23c:	b470      	push	{r4, r5, r6}
   1a23e:	2500      	movs	r5, #0
   1a240:	2606      	movs	r6, #6
   1a242:	460c      	mov	r4, r1
   1a244:	704d      	strb	r5, [r1, #1]
   1a246:	700e      	strb	r6, [r1, #0]
   1a248:	462b      	mov	r3, r5
   1a24a:	8805      	ldrh	r5, [r0, #0]
   1a24c:	4602      	mov	r2, r0
   1a24e:	804d      	strh	r5, [r1, #2]
   1a250:	68c5      	ldr	r5, [r0, #12]
   1a252:	f8c1 500a 	str.w	r5, [r1, #10]
   1a256:	8905      	ldrh	r5, [r0, #8]
   1a258:	810d      	strh	r5, [r1, #8]
   1a25a:	6840      	ldr	r0, [r0, #4]
   1a25c:	6048      	str	r0, [r1, #4]
   1a25e:	8a15      	ldrh	r5, [r2, #16]
   1a260:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   1a264:	4408      	add	r0, r1
   1a266:	81c5      	strh	r5, [r0, #14]
   1a268:	7c90      	ldrb	r0, [r2, #18]
   1a26a:	3301      	adds	r3, #1
   1a26c:	2b20      	cmp	r3, #32
   1a26e:	7420      	strb	r0, [r4, #16]
   1a270:	f102 0204 	add.w	r2, r2, #4
   1a274:	f104 0403 	add.w	r4, r4, #3
   1a278:	d1f1      	bne.n	1a25e <rpc_gnss_serialize_time_and_sv_tow+0x26>
   1a27a:	206e      	movs	r0, #110	; 0x6e
   1a27c:	bc70      	pop	{r4, r5, r6}
   1a27e:	4770      	bx	lr
   1a280:	f04f 30ff 	mov.w	r0, #4294967295
   1a284:	4770      	bx	lr
   1a286:	bf00      	nop

0001a288 <rpc_gnss_serialize_location>:
   1a288:	4603      	mov	r3, r0
   1a28a:	b1c8      	cbz	r0, 1a2c0 <rpc_gnss_serialize_location+0x38>
   1a28c:	b1c1      	cbz	r1, 1a2c0 <rpc_gnss_serialize_location+0x38>
   1a28e:	2000      	movs	r0, #0
   1a290:	2207      	movs	r2, #7
   1a292:	7048      	strb	r0, [r1, #1]
   1a294:	700a      	strb	r2, [r1, #0]
   1a296:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   1a29a:	2011      	movs	r0, #17
   1a29c:	814a      	strh	r2, [r1, #10]
   1a29e:	7b9a      	ldrb	r2, [r3, #14]
   1a2a0:	740a      	strb	r2, [r1, #16]
   1a2a2:	681a      	ldr	r2, [r3, #0]
   1a2a4:	f8c1 2002 	str.w	r2, [r1, #2]
   1a2a8:	685a      	ldr	r2, [r3, #4]
   1a2aa:	f8c1 2006 	str.w	r2, [r1, #6]
   1a2ae:	7b1a      	ldrb	r2, [r3, #12]
   1a2b0:	738a      	strb	r2, [r1, #14]
   1a2b2:	7b5a      	ldrb	r2, [r3, #13]
   1a2b4:	73ca      	strb	r2, [r1, #15]
   1a2b6:	7a9a      	ldrb	r2, [r3, #10]
   1a2b8:	730a      	strb	r2, [r1, #12]
   1a2ba:	7adb      	ldrb	r3, [r3, #11]
   1a2bc:	734b      	strb	r3, [r1, #13]
   1a2be:	4770      	bx	lr
   1a2c0:	f04f 30ff 	mov.w	r0, #4294967295
   1a2c4:	4770      	bx	lr
   1a2c6:	bf00      	nop

0001a2c8 <rpc_gnss_serialize_integrity>:
   1a2c8:	b148      	cbz	r0, 1a2de <rpc_gnss_serialize_integrity+0x16>
   1a2ca:	b141      	cbz	r1, 1a2de <rpc_gnss_serialize_integrity+0x16>
   1a2cc:	2200      	movs	r2, #0
   1a2ce:	2308      	movs	r3, #8
   1a2d0:	704a      	strb	r2, [r1, #1]
   1a2d2:	700b      	strb	r3, [r1, #0]
   1a2d4:	6803      	ldr	r3, [r0, #0]
   1a2d6:	2006      	movs	r0, #6
   1a2d8:	f8c1 3002 	str.w	r3, [r1, #2]
   1a2dc:	4770      	bx	lr
   1a2de:	f04f 30ff 	mov.w	r0, #4294967295
   1a2e2:	4770      	bx	lr

0001a2e4 <gnss_client_event_handler>:
   1a2e4:	f850 1b08 	ldr.w	r1, [r0], #8
   1a2e8:	0c09      	lsrs	r1, r1, #16
   1a2ea:	f7fd b943 	b.w	17574 <rpc_gnss_event_handler>
   1a2ee:	bf00      	nop

0001a2f0 <rpc_gnss_client_init>:
   1a2f0:	4801      	ldr	r0, [pc, #4]	; (1a2f8 <rpc_gnss_client_init+0x8>)
   1a2f2:	f7fd b873 	b.w	173dc <rpc_client_register>
   1a2f6:	bf00      	nop
   1a2f8:	00021038 	.word	0x00021038

0001a2fc <rpc_gnss_client_request_alloc>:
   1a2fc:	2300      	movs	r3, #0
   1a2fe:	b510      	push	{r4, lr}
   1a300:	b082      	sub	sp, #8
   1a302:	9301      	str	r3, [sp, #4]
   1a304:	b158      	cbz	r0, 1a31e <rpc_gnss_client_request_alloc+0x22>
   1a306:	4604      	mov	r4, r0
   1a308:	aa01      	add	r2, sp, #4
   1a30a:	2007      	movs	r0, #7
   1a30c:	f7fd f8e0 	bl	174d0 <rpc_message_alloc>
   1a310:	b918      	cbnz	r0, 1a31a <rpc_gnss_client_request_alloc+0x1e>
   1a312:	9b01      	ldr	r3, [sp, #4]
   1a314:	b10b      	cbz	r3, 1a31a <rpc_gnss_client_request_alloc+0x1e>
   1a316:	3308      	adds	r3, #8
   1a318:	6023      	str	r3, [r4, #0]
   1a31a:	b002      	add	sp, #8
   1a31c:	bd10      	pop	{r4, pc}
   1a31e:	2007      	movs	r0, #7
   1a320:	b002      	add	sp, #8
   1a322:	bd10      	pop	{r4, pc}

0001a324 <rpc_gnss_client_request_send>:
   1a324:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   1a328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   1a32c:	d10b      	bne.n	1a346 <rpc_gnss_client_request_send+0x22>
   1a32e:	b160      	cbz	r0, 1a34a <rpc_gnss_client_request_send+0x26>
   1a330:	4603      	mov	r3, r0
   1a332:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1a336:	2007      	movs	r0, #7
   1a338:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1a33c:	f843 1d08 	str.w	r1, [r3, #-8]!
   1a340:	4619      	mov	r1, r3
   1a342:	f7fd b8b5 	b.w	174b0 <rpc_message_send>
   1a346:	200f      	movs	r0, #15
   1a348:	4770      	bx	lr
   1a34a:	2007      	movs	r0, #7
   1a34c:	4770      	bx	lr
   1a34e:	bf00      	nop

0001a350 <rpc_gnss_client_message_free>:
   1a350:	b120      	cbz	r0, 1a35c <rpc_gnss_client_message_free+0xc>
   1a352:	f1a0 0108 	sub.w	r1, r0, #8
   1a356:	2007      	movs	r0, #7
   1a358:	f7fd b8e6 	b.w	17528 <rpc_message_free>
   1a35c:	2007      	movs	r0, #7
   1a35e:	4770      	bx	lr

0001a360 <rpc_gnss_client_data_free>:
   1a360:	b118      	cbz	r0, 1a36a <rpc_gnss_client_data_free+0xa>
   1a362:	4601      	mov	r1, r0
   1a364:	2007      	movs	r0, #7
   1a366:	f7fd b8eb 	b.w	17540 <rpc_message_data_free>
   1a36a:	2007      	movs	r0, #7
   1a36c:	4770      	bx	lr
   1a36e:	bf00      	nop

0001a370 <datagram_handler_init>:
   1a370:	b510      	push	{r4, lr}
   1a372:	4604      	mov	r4, r0
   1a374:	200c      	movs	r0, #12
   1a376:	f000 fdd7 	bl	1af28 <nrf_malloc>
   1a37a:	60e0      	str	r0, [r4, #12]
   1a37c:	b118      	cbz	r0, 1a386 <datagram_handler_init+0x16>
   1a37e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a382:	f7ff bd5f 	b.w	19e44 <linked_list_init>
   1a386:	2004      	movs	r0, #4
   1a388:	bd10      	pop	{r4, pc}
   1a38a:	bf00      	nop

0001a38c <datagram_handler_put>:
   1a38c:	b570      	push	{r4, r5, r6, lr}
   1a38e:	4606      	mov	r6, r0
   1a390:	2014      	movs	r0, #20
   1a392:	460d      	mov	r5, r1
   1a394:	f000 fdc8 	bl	1af28 <nrf_malloc>
   1a398:	b178      	cbz	r0, 1a3ba <datagram_handler_put+0x2e>
   1a39a:	682b      	ldr	r3, [r5, #0]
   1a39c:	4604      	mov	r4, r0
   1a39e:	6043      	str	r3, [r0, #4]
   1a3a0:	686b      	ldr	r3, [r5, #4]
   1a3a2:	4601      	mov	r1, r0
   1a3a4:	6083      	str	r3, [r0, #8]
   1a3a6:	68eb      	ldr	r3, [r5, #12]
   1a3a8:	60c3      	str	r3, [r0, #12]
   1a3aa:	68ab      	ldr	r3, [r5, #8]
   1a3ac:	6103      	str	r3, [r0, #16]
   1a3ae:	68f0      	ldr	r0, [r6, #12]
   1a3b0:	f7ff fd52 	bl	19e58 <linked_list_push>
   1a3b4:	b920      	cbnz	r0, 1a3c0 <datagram_handler_put+0x34>
   1a3b6:	6868      	ldr	r0, [r5, #4]
   1a3b8:	bd70      	pop	{r4, r5, r6, pc}
   1a3ba:	f04f 30ff 	mov.w	r0, #4294967295
   1a3be:	bd70      	pop	{r4, r5, r6, pc}
   1a3c0:	4620      	mov	r0, r4
   1a3c2:	f000 fdbb 	bl	1af3c <nrf_free>
   1a3c6:	f04f 30ff 	mov.w	r0, #4294967295
   1a3ca:	bd70      	pop	{r4, r5, r6, pc}

0001a3cc <datagram_handler_get>:
   1a3cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a3d0:	4607      	mov	r7, r0
   1a3d2:	b084      	sub	sp, #16
   1a3d4:	68c0      	ldr	r0, [r0, #12]
   1a3d6:	460c      	mov	r4, r1
   1a3d8:	4616      	mov	r6, r2
   1a3da:	f7ff fd5d 	bl	19e98 <linked_list_peek>
   1a3de:	2800      	cmp	r0, #0
   1a3e0:	d03b      	beq.n	1a45a <datagram_handler_get+0x8e>
   1a3e2:	6882      	ldr	r2, [r0, #8]
   1a3e4:	4605      	mov	r5, r0
   1a3e6:	e9d4 0300 	ldrd	r0, r3, [r4]
   1a3ea:	429a      	cmp	r2, r3
   1a3ec:	bf28      	it	cs
   1a3ee:	461a      	movcs	r2, r3
   1a3f0:	6062      	str	r2, [r4, #4]
   1a3f2:	b110      	cbz	r0, 1a3fa <datagram_handler_get+0x2e>
   1a3f4:	6869      	ldr	r1, [r5, #4]
   1a3f6:	f004 f92c 	bl	1e652 <memcpy>
   1a3fa:	68a0      	ldr	r0, [r4, #8]
   1a3fc:	b118      	cbz	r0, 1a406 <datagram_handler_get+0x3a>
   1a3fe:	692b      	ldr	r3, [r5, #16]
   1a400:	b10b      	cbz	r3, 1a406 <datagram_handler_get+0x3a>
   1a402:	68ea      	ldr	r2, [r5, #12]
   1a404:	bb02      	cbnz	r2, 1a448 <datagram_handler_get+0x7c>
   1a406:	2300      	movs	r3, #0
   1a408:	60e3      	str	r3, [r4, #12]
   1a40a:	0732      	lsls	r2, r6, #28
   1a40c:	d506      	bpl.n	1a41c <datagram_handler_get+0x50>
   1a40e:	06b3      	lsls	r3, r6, #26
   1a410:	bf4c      	ite	mi
   1a412:	68a8      	ldrmi	r0, [r5, #8]
   1a414:	6860      	ldrpl	r0, [r4, #4]
   1a416:	b004      	add	sp, #16
   1a418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a41c:	68f8      	ldr	r0, [r7, #12]
   1a41e:	f7ff fd31 	bl	19e84 <linked_list_pop>
   1a422:	4680      	mov	r8, r0
   1a424:	2800      	cmp	r0, #0
   1a426:	d0f2      	beq.n	1a40e <datagram_handler_get+0x42>
   1a428:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   1a42c:	6902      	ldr	r2, [r0, #16]
   1a42e:	9300      	str	r3, [sp, #0]
   1a430:	68c3      	ldr	r3, [r0, #12]
   1a432:	e9cd 1201 	strd	r1, r2, [sp, #4]
   1a436:	9303      	str	r3, [sp, #12]
   1a438:	4668      	mov	r0, sp
   1a43a:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
   1a43e:	4798      	blx	r3
   1a440:	4640      	mov	r0, r8
   1a442:	f000 fd7b 	bl	1af3c <nrf_free>
   1a446:	e7e2      	b.n	1a40e <datagram_handler_get+0x42>
   1a448:	68e3      	ldr	r3, [r4, #12]
   1a44a:	429a      	cmp	r2, r3
   1a44c:	bf28      	it	cs
   1a44e:	461a      	movcs	r2, r3
   1a450:	60e2      	str	r2, [r4, #12]
   1a452:	6929      	ldr	r1, [r5, #16]
   1a454:	f004 f8fd 	bl	1e652 <memcpy>
   1a458:	e7d7      	b.n	1a40a <datagram_handler_get+0x3e>
   1a45a:	f04f 30ff 	mov.w	r0, #4294967295
   1a45e:	e7da      	b.n	1a416 <datagram_handler_get+0x4a>

0001a460 <datagram_handler_available>:
   1a460:	b508      	push	{r3, lr}
   1a462:	68c0      	ldr	r0, [r0, #12]
   1a464:	f7ff fd18 	bl	19e98 <linked_list_peek>
   1a468:	b108      	cbz	r0, 1a46e <datagram_handler_available+0xe>
   1a46a:	6880      	ldr	r0, [r0, #8]
   1a46c:	bd08      	pop	{r3, pc}
   1a46e:	f04f 30ff 	mov.w	r0, #4294967295
   1a472:	bd08      	pop	{r3, pc}

0001a474 <datagram_handler_flush>:
   1a474:	b530      	push	{r4, r5, lr}
   1a476:	4605      	mov	r5, r0
   1a478:	68c0      	ldr	r0, [r0, #12]
   1a47a:	b085      	sub	sp, #20
   1a47c:	b9a8      	cbnz	r0, 1a4aa <datagram_handler_flush+0x36>
   1a47e:	e01a      	b.n	1a4b6 <datagram_handler_flush+0x42>
   1a480:	68e8      	ldr	r0, [r5, #12]
   1a482:	f7ff fcff 	bl	19e84 <linked_list_pop>
   1a486:	4604      	mov	r4, r0
   1a488:	b170      	cbz	r0, 1a4a8 <datagram_handler_flush+0x34>
   1a48a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1a48e:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1a492:	e9cd 0100 	strd	r0, r1, [sp]
   1a496:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1a49a:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1a49e:	4668      	mov	r0, sp
   1a4a0:	4798      	blx	r3
   1a4a2:	4620      	mov	r0, r4
   1a4a4:	f000 fd4a 	bl	1af3c <nrf_free>
   1a4a8:	68e8      	ldr	r0, [r5, #12]
   1a4aa:	f7ff fcfb 	bl	19ea4 <linked_list_size_get>
   1a4ae:	2800      	cmp	r0, #0
   1a4b0:	d1e6      	bne.n	1a480 <datagram_handler_flush+0xc>
   1a4b2:	b005      	add	sp, #20
   1a4b4:	bd30      	pop	{r4, r5, pc}
   1a4b6:	2008      	movs	r0, #8
   1a4b8:	b005      	add	sp, #20
   1a4ba:	bd30      	pop	{r4, r5, pc}

0001a4bc <datagram_handler_free>:
   1a4bc:	b530      	push	{r4, r5, lr}
   1a4be:	4605      	mov	r5, r0
   1a4c0:	68c0      	ldr	r0, [r0, #12]
   1a4c2:	b085      	sub	sp, #20
   1a4c4:	b9a0      	cbnz	r0, 1a4f0 <datagram_handler_free+0x34>
   1a4c6:	e01c      	b.n	1a502 <datagram_handler_free+0x46>
   1a4c8:	f7ff fcdc 	bl	19e84 <linked_list_pop>
   1a4cc:	4604      	mov	r4, r0
   1a4ce:	b170      	cbz	r0, 1a4ee <datagram_handler_free+0x32>
   1a4d0:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1a4d4:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1a4d8:	e9cd 0100 	strd	r0, r1, [sp]
   1a4dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1a4e0:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1a4e4:	4668      	mov	r0, sp
   1a4e6:	4798      	blx	r3
   1a4e8:	4620      	mov	r0, r4
   1a4ea:	f000 fd27 	bl	1af3c <nrf_free>
   1a4ee:	68e8      	ldr	r0, [r5, #12]
   1a4f0:	f7ff fcd8 	bl	19ea4 <linked_list_size_get>
   1a4f4:	4604      	mov	r4, r0
   1a4f6:	68e8      	ldr	r0, [r5, #12]
   1a4f8:	2c00      	cmp	r4, #0
   1a4fa:	d1e5      	bne.n	1a4c8 <datagram_handler_free+0xc>
   1a4fc:	f000 fd1e 	bl	1af3c <nrf_free>
   1a500:	60ec      	str	r4, [r5, #12]
   1a502:	b005      	add	sp, #20
   1a504:	bd30      	pop	{r4, r5, pc}
   1a506:	bf00      	nop

0001a508 <null_handler_init>:
   1a508:	2000      	movs	r0, #0
   1a50a:	4770      	bx	lr

0001a50c <null_handler_put>:
   1a50c:	b510      	push	{r4, lr}
   1a50e:	460c      	mov	r4, r1
   1a510:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   1a514:	4620      	mov	r0, r4
   1a516:	4798      	blx	r3
   1a518:	6860      	ldr	r0, [r4, #4]
   1a51a:	bd10      	pop	{r4, pc}

0001a51c <null_handler_get>:
   1a51c:	f04f 30ff 	mov.w	r0, #4294967295
   1a520:	4770      	bx	lr
   1a522:	bf00      	nop

0001a524 <null_handler_available>:
   1a524:	f04f 30ff 	mov.w	r0, #4294967295
   1a528:	4770      	bx	lr
   1a52a:	bf00      	nop

0001a52c <null_handler_flush>:
   1a52c:	2000      	movs	r0, #0
   1a52e:	4770      	bx	lr

0001a530 <null_handler_free>:
   1a530:	4770      	bx	lr
   1a532:	bf00      	nop

0001a534 <packet_handler_create>:
   1a534:	2801      	cmp	r0, #1
   1a536:	b538      	push	{r3, r4, r5, lr}
   1a538:	460d      	mov	r5, r1
   1a53a:	4614      	mov	r4, r2
   1a53c:	d00d      	beq.n	1a55a <packet_handler_create+0x26>
   1a53e:	db11      	blt.n	1a564 <packet_handler_create+0x30>
   1a540:	2803      	cmp	r0, #3
   1a542:	dc0f      	bgt.n	1a564 <packet_handler_create+0x30>
   1a544:	2010      	movs	r0, #16
   1a546:	f000 fcef 	bl	1af28 <nrf_malloc>
   1a54a:	2218      	movs	r2, #24
   1a54c:	b120      	cbz	r0, 1a558 <packet_handler_create+0x24>
   1a54e:	4b08      	ldr	r3, [pc, #32]	; (1a570 <packet_handler_create+0x3c>)
   1a550:	6045      	str	r5, [r0, #4]
   1a552:	4413      	add	r3, r2
   1a554:	6084      	str	r4, [r0, #8]
   1a556:	6003      	str	r3, [r0, #0]
   1a558:	bd38      	pop	{r3, r4, r5, pc}
   1a55a:	2014      	movs	r0, #20
   1a55c:	f000 fce4 	bl	1af28 <nrf_malloc>
   1a560:	2230      	movs	r2, #48	; 0x30
   1a562:	e7f3      	b.n	1a54c <packet_handler_create+0x18>
   1a564:	200c      	movs	r0, #12
   1a566:	f000 fcdf 	bl	1af28 <nrf_malloc>
   1a56a:	2200      	movs	r2, #0
   1a56c:	e7ee      	b.n	1a54c <packet_handler_create+0x18>
   1a56e:	bf00      	nop
   1a570:	00021048 	.word	0x00021048

0001a574 <packet_handler_delete>:
   1a574:	b510      	push	{r4, lr}
   1a576:	4604      	mov	r4, r0
   1a578:	6803      	ldr	r3, [r0, #0]
   1a57a:	691b      	ldr	r3, [r3, #16]
   1a57c:	4798      	blx	r3
   1a57e:	6823      	ldr	r3, [r4, #0]
   1a580:	4620      	mov	r0, r4
   1a582:	695b      	ldr	r3, [r3, #20]
   1a584:	4798      	blx	r3
   1a586:	4620      	mov	r0, r4
   1a588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a58c:	f000 bcd6 	b.w	1af3c <nrf_free>

0001a590 <stream_handler_init>:
   1a590:	b510      	push	{r4, lr}
   1a592:	4604      	mov	r4, r0
   1a594:	200c      	movs	r0, #12
   1a596:	f000 fcc7 	bl	1af28 <nrf_malloc>
   1a59a:	60e0      	str	r0, [r4, #12]
   1a59c:	b128      	cbz	r0, 1a5aa <stream_handler_init+0x1a>
   1a59e:	2300      	movs	r3, #0
   1a5a0:	6123      	str	r3, [r4, #16]
   1a5a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a5a6:	f7ff bc4d 	b.w	19e44 <linked_list_init>
   1a5aa:	2004      	movs	r0, #4
   1a5ac:	bd10      	pop	{r4, pc}
   1a5ae:	bf00      	nop

0001a5b0 <stream_handler_put>:
   1a5b0:	b570      	push	{r4, r5, r6, lr}
   1a5b2:	4606      	mov	r6, r0
   1a5b4:	2014      	movs	r0, #20
   1a5b6:	460d      	mov	r5, r1
   1a5b8:	f000 fcb6 	bl	1af28 <nrf_malloc>
   1a5bc:	b178      	cbz	r0, 1a5de <stream_handler_put+0x2e>
   1a5be:	682b      	ldr	r3, [r5, #0]
   1a5c0:	4604      	mov	r4, r0
   1a5c2:	6043      	str	r3, [r0, #4]
   1a5c4:	686b      	ldr	r3, [r5, #4]
   1a5c6:	4601      	mov	r1, r0
   1a5c8:	6083      	str	r3, [r0, #8]
   1a5ca:	68eb      	ldr	r3, [r5, #12]
   1a5cc:	60c3      	str	r3, [r0, #12]
   1a5ce:	68ab      	ldr	r3, [r5, #8]
   1a5d0:	6103      	str	r3, [r0, #16]
   1a5d2:	68f0      	ldr	r0, [r6, #12]
   1a5d4:	f7ff fc40 	bl	19e58 <linked_list_push>
   1a5d8:	b920      	cbnz	r0, 1a5e4 <stream_handler_put+0x34>
   1a5da:	6868      	ldr	r0, [r5, #4]
   1a5dc:	bd70      	pop	{r4, r5, r6, pc}
   1a5de:	f04f 30ff 	mov.w	r0, #4294967295
   1a5e2:	bd70      	pop	{r4, r5, r6, pc}
   1a5e4:	4620      	mov	r0, r4
   1a5e6:	f000 fca9 	bl	1af3c <nrf_free>
   1a5ea:	f04f 30ff 	mov.w	r0, #4294967295
   1a5ee:	bd70      	pop	{r4, r5, r6, pc}

0001a5f0 <stream_handler_get>:
   1a5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a5f4:	4682      	mov	sl, r0
   1a5f6:	b089      	sub	sp, #36	; 0x24
   1a5f8:	68c0      	ldr	r0, [r0, #12]
   1a5fa:	4689      	mov	r9, r1
   1a5fc:	4693      	mov	fp, r2
   1a5fe:	f7ff fc4b 	bl	19e98 <linked_list_peek>
   1a602:	2800      	cmp	r0, #0
   1a604:	d071      	beq.n	1a6ea <stream_handler_get+0xfa>
   1a606:	4605      	mov	r5, r0
   1a608:	f8d9 0008 	ldr.w	r0, [r9, #8]
   1a60c:	b120      	cbz	r0, 1a618 <stream_handler_get+0x28>
   1a60e:	692b      	ldr	r3, [r5, #16]
   1a610:	b113      	cbz	r3, 1a618 <stream_handler_get+0x28>
   1a612:	68ea      	ldr	r2, [r5, #12]
   1a614:	2a00      	cmp	r2, #0
   1a616:	d15d      	bne.n	1a6d4 <stream_handler_get+0xe4>
   1a618:	2300      	movs	r3, #0
   1a61a:	f8c9 300c 	str.w	r3, [r9, #12]
   1a61e:	f8d9 2000 	ldr.w	r2, [r9]
   1a622:	f8d9 8004 	ldr.w	r8, [r9, #4]
   1a626:	f8da 1010 	ldr.w	r1, [sl, #16]
   1a62a:	9203      	str	r2, [sp, #12]
   1a62c:	f1b8 0f00 	cmp.w	r8, #0
   1a630:	d030      	beq.n	1a694 <stream_handler_get+0xa4>
   1a632:	2400      	movs	r4, #0
   1a634:	f00b 0320 	and.w	r3, fp, #32
   1a638:	9301      	str	r3, [sp, #4]
   1a63a:	f00b 0b08 	and.w	fp, fp, #8
   1a63e:	68ae      	ldr	r6, [r5, #8]
   1a640:	eba8 0304 	sub.w	r3, r8, r4
   1a644:	1a76      	subs	r6, r6, r1
   1a646:	429e      	cmp	r6, r3
   1a648:	4637      	mov	r7, r6
   1a64a:	bf28      	it	cs
   1a64c:	461f      	movcs	r7, r3
   1a64e:	b10a      	cbz	r2, 1a654 <stream_handler_get+0x64>
   1a650:	9a01      	ldr	r2, [sp, #4]
   1a652:	b1aa      	cbz	r2, 1a680 <stream_handler_get+0x90>
   1a654:	f1bb 0f00 	cmp.w	fp, #0
   1a658:	d106      	bne.n	1a668 <stream_handler_get+0x78>
   1a65a:	429e      	cmp	r6, r3
   1a65c:	d921      	bls.n	1a6a2 <stream_handler_get+0xb2>
   1a65e:	f8da 3010 	ldr.w	r3, [sl, #16]
   1a662:	443b      	add	r3, r7
   1a664:	f8ca 3010 	str.w	r3, [sl, #16]
   1a668:	4628      	mov	r0, r5
   1a66a:	f7ff fc1d 	bl	19ea8 <linked_list_get_next>
   1a66e:	443c      	add	r4, r7
   1a670:	4605      	mov	r5, r0
   1a672:	b180      	cbz	r0, 1a696 <stream_handler_get+0xa6>
   1a674:	45a0      	cmp	r8, r4
   1a676:	d90e      	bls.n	1a696 <stream_handler_get+0xa6>
   1a678:	f8d9 2000 	ldr.w	r2, [r9]
   1a67c:	2100      	movs	r1, #0
   1a67e:	e7de      	b.n	1a63e <stream_handler_get+0x4e>
   1a680:	6868      	ldr	r0, [r5, #4]
   1a682:	9302      	str	r3, [sp, #8]
   1a684:	9b03      	ldr	r3, [sp, #12]
   1a686:	4401      	add	r1, r0
   1a688:	463a      	mov	r2, r7
   1a68a:	1918      	adds	r0, r3, r4
   1a68c:	f003 ffe1 	bl	1e652 <memcpy>
   1a690:	9b02      	ldr	r3, [sp, #8]
   1a692:	e7df      	b.n	1a654 <stream_handler_get+0x64>
   1a694:	4644      	mov	r4, r8
   1a696:	4620      	mov	r0, r4
   1a698:	f8c9 4004 	str.w	r4, [r9, #4]
   1a69c:	b009      	add	sp, #36	; 0x24
   1a69e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a6a2:	f8da 000c 	ldr.w	r0, [sl, #12]
   1a6a6:	f7ff fbed 	bl	19e84 <linked_list_pop>
   1a6aa:	4606      	mov	r6, r0
   1a6ac:	b170      	cbz	r0, 1a6cc <stream_handler_get+0xdc>
   1a6ae:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   1a6b2:	e9d0 0103 	ldrd	r0, r1, [r0, #12]
   1a6b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1a6ba:	e9cd 1006 	strd	r1, r0, [sp, #24]
   1a6be:	e9da 3101 	ldrd	r3, r1, [sl, #4]
   1a6c2:	a804      	add	r0, sp, #16
   1a6c4:	4798      	blx	r3
   1a6c6:	4630      	mov	r0, r6
   1a6c8:	f000 fc38 	bl	1af3c <nrf_free>
   1a6cc:	2300      	movs	r3, #0
   1a6ce:	f8ca 3010 	str.w	r3, [sl, #16]
   1a6d2:	e7c9      	b.n	1a668 <stream_handler_get+0x78>
   1a6d4:	f8d9 300c 	ldr.w	r3, [r9, #12]
   1a6d8:	429a      	cmp	r2, r3
   1a6da:	bf28      	it	cs
   1a6dc:	461a      	movcs	r2, r3
   1a6de:	f8c9 200c 	str.w	r2, [r9, #12]
   1a6e2:	6929      	ldr	r1, [r5, #16]
   1a6e4:	f003 ffb5 	bl	1e652 <memcpy>
   1a6e8:	e799      	b.n	1a61e <stream_handler_get+0x2e>
   1a6ea:	f04f 30ff 	mov.w	r0, #4294967295
   1a6ee:	e7d5      	b.n	1a69c <stream_handler_get+0xac>

0001a6f0 <stream_handler_available>:
   1a6f0:	b510      	push	{r4, lr}
   1a6f2:	4604      	mov	r4, r0
   1a6f4:	68c0      	ldr	r0, [r0, #12]
   1a6f6:	f7ff fbcf 	bl	19e98 <linked_list_peek>
   1a6fa:	b150      	cbz	r0, 1a712 <stream_handler_available+0x22>
   1a6fc:	6924      	ldr	r4, [r4, #16]
   1a6fe:	4264      	negs	r4, r4
   1a700:	6883      	ldr	r3, [r0, #8]
   1a702:	441c      	add	r4, r3
   1a704:	f7ff fbd0 	bl	19ea8 <linked_list_get_next>
   1a708:	2800      	cmp	r0, #0
   1a70a:	d1f9      	bne.n	1a700 <stream_handler_available+0x10>
   1a70c:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   1a710:	bd10      	pop	{r4, pc}
   1a712:	f04f 30ff 	mov.w	r0, #4294967295
   1a716:	bd10      	pop	{r4, pc}

0001a718 <stream_handler_flush>:
   1a718:	b530      	push	{r4, r5, lr}
   1a71a:	4605      	mov	r5, r0
   1a71c:	68c0      	ldr	r0, [r0, #12]
   1a71e:	b085      	sub	sp, #20
   1a720:	b9a8      	cbnz	r0, 1a74e <stream_handler_flush+0x36>
   1a722:	e01a      	b.n	1a75a <stream_handler_flush+0x42>
   1a724:	68e8      	ldr	r0, [r5, #12]
   1a726:	f7ff fbad 	bl	19e84 <linked_list_pop>
   1a72a:	4604      	mov	r4, r0
   1a72c:	b170      	cbz	r0, 1a74c <stream_handler_flush+0x34>
   1a72e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1a732:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1a736:	e9cd 0100 	strd	r0, r1, [sp]
   1a73a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1a73e:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1a742:	4668      	mov	r0, sp
   1a744:	4798      	blx	r3
   1a746:	4620      	mov	r0, r4
   1a748:	f000 fbf8 	bl	1af3c <nrf_free>
   1a74c:	68e8      	ldr	r0, [r5, #12]
   1a74e:	f7ff fba9 	bl	19ea4 <linked_list_size_get>
   1a752:	2800      	cmp	r0, #0
   1a754:	d1e6      	bne.n	1a724 <stream_handler_flush+0xc>
   1a756:	b005      	add	sp, #20
   1a758:	bd30      	pop	{r4, r5, pc}
   1a75a:	2008      	movs	r0, #8
   1a75c:	b005      	add	sp, #20
   1a75e:	bd30      	pop	{r4, r5, pc}

0001a760 <stream_handler_free>:
   1a760:	b530      	push	{r4, r5, lr}
   1a762:	4605      	mov	r5, r0
   1a764:	68c0      	ldr	r0, [r0, #12]
   1a766:	b085      	sub	sp, #20
   1a768:	b9a0      	cbnz	r0, 1a794 <stream_handler_free+0x34>
   1a76a:	e01c      	b.n	1a7a6 <stream_handler_free+0x46>
   1a76c:	f7ff fb8a 	bl	19e84 <linked_list_pop>
   1a770:	4604      	mov	r4, r0
   1a772:	b170      	cbz	r0, 1a792 <stream_handler_free+0x32>
   1a774:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1a778:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1a77c:	e9cd 0100 	strd	r0, r1, [sp]
   1a780:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1a784:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1a788:	4668      	mov	r0, sp
   1a78a:	4798      	blx	r3
   1a78c:	4620      	mov	r0, r4
   1a78e:	f000 fbd5 	bl	1af3c <nrf_free>
   1a792:	68e8      	ldr	r0, [r5, #12]
   1a794:	f7ff fb86 	bl	19ea4 <linked_list_size_get>
   1a798:	4604      	mov	r4, r0
   1a79a:	68e8      	ldr	r0, [r5, #12]
   1a79c:	2c00      	cmp	r4, #0
   1a79e:	d1e5      	bne.n	1a76c <stream_handler_free+0xc>
   1a7a0:	f000 fbcc 	bl	1af3c <nrf_free>
   1a7a4:	60ec      	str	r4, [r5, #12]
   1a7a6:	b005      	add	sp, #20
   1a7a8:	bd30      	pop	{r4, r5, pc}
   1a7aa:	bf00      	nop

0001a7ac <mem_free>:
   1a7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a7b0:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 1a880 <mem_free+0xd4>
   1a7b4:	b083      	sub	sp, #12
   1a7b6:	9000      	str	r0, [sp, #0]
   1a7b8:	f10c 0b3c 	add.w	fp, ip, #60	; 0x3c
   1a7bc:	f8dc 3008 	ldr.w	r3, [ip, #8]
   1a7c0:	b12b      	cbz	r3, 1a7ce <mem_free+0x22>
   1a7c2:	f8dc 2000 	ldr.w	r2, [ip]
   1a7c6:	9c00      	ldr	r4, [sp, #0]
   1a7c8:	7810      	ldrb	r0, [r2, #0]
   1a7ca:	42a0      	cmp	r0, r4
   1a7cc:	d006      	beq.n	1a7dc <mem_free+0x30>
   1a7ce:	f10c 0c0c 	add.w	ip, ip, #12
   1a7d2:	45e3      	cmp	fp, ip
   1a7d4:	d1f2      	bne.n	1a7bc <mem_free+0x10>
   1a7d6:	b003      	add	sp, #12
   1a7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a7dc:	f8dc a004 	ldr.w	sl, [ip, #4]
   1a7e0:	eb03 080a 	add.w	r8, r3, sl
   1a7e4:	45c2      	cmp	sl, r8
   1a7e6:	d2f2      	bcs.n	1a7ce <mem_free+0x22>
   1a7e8:	6853      	ldr	r3, [r2, #4]
   1a7ea:	f8cd c004 	str.w	ip, [sp, #4]
   1a7ee:	46d6      	mov	lr, sl
   1a7f0:	469c      	mov	ip, r3
   1a7f2:	f8d2 9010 	ldr.w	r9, [r2, #16]
   1a7f6:	8997      	ldrh	r7, [r2, #12]
   1a7f8:	ebae 000a 	sub.w	r0, lr, sl
   1a7fc:	b3df      	cbz	r7, 1a876 <mem_free+0xca>
   1a7fe:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   1a802:	4290      	cmp	r0, r2
   1a804:	d31c      	bcc.n	1a840 <mem_free+0x94>
   1a806:	4665      	mov	r5, ip
   1a808:	2400      	movs	r4, #0
   1a80a:	f109 0304 	add.w	r3, r9, #4
   1a80e:	e003      	b.n	1a818 <mem_free+0x6c>
   1a810:	885a      	ldrh	r2, [r3, #2]
   1a812:	3304      	adds	r3, #4
   1a814:	4282      	cmp	r2, r0
   1a816:	d815      	bhi.n	1a844 <mem_free+0x98>
   1a818:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   1a81c:	3401      	adds	r4, #1
   1a81e:	42a7      	cmp	r7, r4
   1a820:	fb02 5506 	mla	r5, r2, r6, r5
   1a824:	eba0 0002 	sub.w	r0, r0, r2
   1a828:	461e      	mov	r6, r3
   1a82a:	d1f1      	bne.n	1a810 <mem_free+0x64>
   1a82c:	2000      	movs	r0, #0
   1a82e:	4281      	cmp	r1, r0
   1a830:	d00d      	beq.n	1a84e <mem_free+0xa2>
   1a832:	f10e 0e01 	add.w	lr, lr, #1
   1a836:	45f0      	cmp	r8, lr
   1a838:	d1de      	bne.n	1a7f8 <mem_free+0x4c>
   1a83a:	f8dd c004 	ldr.w	ip, [sp, #4]
   1a83e:	e7c6      	b.n	1a7ce <mem_free+0x22>
   1a840:	4665      	mov	r5, ip
   1a842:	464e      	mov	r6, r9
   1a844:	8833      	ldrh	r3, [r6, #0]
   1a846:	fb00 5003 	mla	r0, r0, r3, r5
   1a84a:	4281      	cmp	r1, r0
   1a84c:	d1f1      	bne.n	1a832 <mem_free+0x86>
   1a84e:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   1a852:	f8dd c004 	ldr.w	ip, [sp, #4]
   1a856:	d0ba      	beq.n	1a7ce <mem_free+0x22>
   1a858:	2301      	movs	r3, #1
   1a85a:	4a08      	ldr	r2, [pc, #32]	; (1a87c <mem_free+0xd0>)
   1a85c:	ea4f 115e 	mov.w	r1, lr, lsr #5
   1a860:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   1a864:	f00e 0e1f 	and.w	lr, lr, #31
   1a868:	fa03 fe0e 	lsl.w	lr, r3, lr
   1a86c:	ea4e 0000 	orr.w	r0, lr, r0
   1a870:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   1a874:	e7af      	b.n	1a7d6 <mem_free+0x2a>
   1a876:	4638      	mov	r0, r7
   1a878:	e7d9      	b.n	1a82e <mem_free+0x82>
   1a87a:	bf00      	nop
   1a87c:	20020f0c 	.word	0x20020f0c
   1a880:	20020f50 	.word	0x20020f50

0001a884 <mem_alloc.constprop.5>:
   1a884:	2800      	cmp	r0, #0
   1a886:	d050      	beq.n	1a92a <mem_alloc.constprop.5+0xa6>
   1a888:	4b6d      	ldr	r3, [pc, #436]	; (1aa40 <mem_alloc.constprop.5+0x1bc>)
   1a88a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   1a88e:	4290      	cmp	r0, r2
   1a890:	d84b      	bhi.n	1a92a <mem_alloc.constprop.5+0xa6>
   1a892:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a896:	f8d3 b08c 	ldr.w	fp, [r3, #140]	; 0x8c
   1a89a:	b083      	sub	sp, #12
   1a89c:	f1bb 0f00 	cmp.w	fp, #0
   1a8a0:	d054      	beq.n	1a94c <mem_alloc.constprop.5+0xc8>
   1a8a2:	f10b 32ff 	add.w	r2, fp, #4294967295
   1a8a6:	4691      	mov	r9, r2
   1a8a8:	2600      	movs	r6, #0
   1a8aa:	f04f 0812 	mov.w	r8, #18
   1a8ae:	4f65      	ldr	r7, [pc, #404]	; (1aa44 <mem_alloc.constprop.5+0x1c0>)
   1a8b0:	9201      	str	r2, [sp, #4]
   1a8b2:	f10b 0e11 	add.w	lr, fp, #17
   1a8b6:	eb06 0209 	add.w	r2, r6, r9
   1a8ba:	f853 4038 	ldr.w	r4, [r3, r8, lsl #3]
   1a8be:	3201      	adds	r2, #1
   1a8c0:	0852      	lsrs	r2, r2, #1
   1a8c2:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
   1a8c6:	f102 0112 	add.w	r1, r2, #18
   1a8ca:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]
   1a8ce:	f857 a02c 	ldr.w	sl, [r7, ip, lsl #2]
   1a8d2:	f853 403e 	ldr.w	r4, [r3, lr, lsl #3]
   1a8d6:	eb03 0cc8 	add.w	ip, r3, r8, lsl #3
   1a8da:	f8dc c004 	ldr.w	ip, [ip, #4]
   1a8de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1a8e2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1a8e6:	f8da a010 	ldr.w	sl, [sl, #16]
   1a8ea:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   1a8ee:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   1a8f2:	f83a a02c 	ldrh.w	sl, [sl, ip, lsl #2]
   1a8f6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1a8fa:	eb03 0cce 	add.w	ip, r3, lr, lsl #3
   1a8fe:	6849      	ldr	r1, [r1, #4]
   1a900:	692d      	ldr	r5, [r5, #16]
   1a902:	6924      	ldr	r4, [r4, #16]
   1a904:	f8dc c004 	ldr.w	ip, [ip, #4]
   1a908:	4550      	cmp	r0, sl
   1a90a:	f835 5021 	ldrh.w	r5, [r5, r1, lsl #2]
   1a90e:	f834 102c 	ldrh.w	r1, [r4, ip, lsl #2]
   1a912:	d915      	bls.n	1a940 <mem_alloc.constprop.5+0xbc>
   1a914:	4288      	cmp	r0, r1
   1a916:	d211      	bcs.n	1a93c <mem_alloc.constprop.5+0xb8>
   1a918:	42a8      	cmp	r0, r5
   1a91a:	d908      	bls.n	1a92e <mem_alloc.constprop.5+0xaa>
   1a91c:	1c56      	adds	r6, r2, #1
   1a91e:	45b1      	cmp	r9, r6
   1a920:	f0c0 8087 	bcc.w	1aa32 <mem_alloc.constprop.5+0x1ae>
   1a924:	f102 0813 	add.w	r8, r2, #19
   1a928:	e7c5      	b.n	1a8b6 <mem_alloc.constprop.5+0x32>
   1a92a:	2000      	movs	r0, #0
   1a92c:	4770      	bx	lr
   1a92e:	f102 39ff 	add.w	r9, r2, #4294967295
   1a932:	454e      	cmp	r6, r9
   1a934:	d87d      	bhi.n	1aa32 <mem_alloc.constprop.5+0x1ae>
   1a936:	f102 0e11 	add.w	lr, r2, #17
   1a93a:	e7bc      	b.n	1a8b6 <mem_alloc.constprop.5+0x32>
   1a93c:	f109 0601 	add.w	r6, r9, #1
   1a940:	45b3      	cmp	fp, r6
   1a942:	d007      	beq.n	1a954 <mem_alloc.constprop.5+0xd0>
   1a944:	2e10      	cmp	r6, #16
   1a946:	d001      	beq.n	1a94c <mem_alloc.constprop.5+0xc8>
   1a948:	45b3      	cmp	fp, r6
   1a94a:	d808      	bhi.n	1a95e <mem_alloc.constprop.5+0xda>
   1a94c:	2000      	movs	r0, #0
   1a94e:	b003      	add	sp, #12
   1a950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a954:	9a01      	ldr	r2, [sp, #4]
   1a956:	2a10      	cmp	r2, #16
   1a958:	bf18      	it	ne
   1a95a:	4616      	movne	r6, r2
   1a95c:	d0f6      	beq.n	1a94c <mem_alloc.constprop.5+0xc8>
   1a95e:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 1aa48 <mem_alloc.constprop.5+0x1c4>
   1a962:	eb03 08c6 	add.w	r8, r3, r6, lsl #3
   1a966:	e9d8 2424 	ldrd	r2, r4, [r8, #144]	; 0x90
   1a96a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1a96e:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   1a972:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   1a976:	f8d2 e004 	ldr.w	lr, [r2, #4]
   1a97a:	691d      	ldr	r5, [r3, #16]
   1a97c:	2c00      	cmp	r4, #0
   1a97e:	d056      	beq.n	1aa2e <mem_alloc.constprop.5+0x1aa>
   1a980:	462a      	mov	r2, r5
   1a982:	4670      	mov	r0, lr
   1a984:	00a4      	lsls	r4, r4, #2
   1a986:	eb05 0904 	add.w	r9, r5, r4
   1a98a:	8851      	ldrh	r1, [r2, #2]
   1a98c:	3204      	adds	r2, #4
   1a98e:	4591      	cmp	r9, r2
   1a990:	4408      	add	r0, r1
   1a992:	d1fa      	bne.n	1a98a <mem_alloc.constprop.5+0x106>
   1a994:	1929      	adds	r1, r5, r4
   1a996:	f8b1 a002 	ldrh.w	sl, [r1, #2]
   1a99a:	4482      	add	sl, r0
   1a99c:	4582      	cmp	sl, r0
   1a99e:	d918      	bls.n	1a9d2 <mem_alloc.constprop.5+0x14e>
   1a9a0:	0941      	lsrs	r1, r0, #5
   1a9a2:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   1a9a6:	f000 041f 	and.w	r4, r0, #31
   1a9aa:	fa22 f904 	lsr.w	r9, r2, r4
   1a9ae:	f019 0f01 	tst.w	r9, #1
   1a9b2:	d007      	beq.n	1a9c4 <mem_alloc.constprop.5+0x140>
   1a9b4:	e013      	b.n	1a9de <mem_alloc.constprop.5+0x15a>
   1a9b6:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   1a9ba:	fa22 f904 	lsr.w	r9, r2, r4
   1a9be:	f019 0f01 	tst.w	r9, #1
   1a9c2:	d10c      	bne.n	1a9de <mem_alloc.constprop.5+0x15a>
   1a9c4:	3001      	adds	r0, #1
   1a9c6:	4582      	cmp	sl, r0
   1a9c8:	ea4f 1150 	mov.w	r1, r0, lsr #5
   1a9cc:	f000 041f 	and.w	r4, r0, #31
   1a9d0:	d1f1      	bne.n	1a9b6 <mem_alloc.constprop.5+0x132>
   1a9d2:	3601      	adds	r6, #1
   1a9d4:	455e      	cmp	r6, fp
   1a9d6:	f108 0808 	add.w	r8, r8, #8
   1a9da:	d3c4      	bcc.n	1a966 <mem_alloc.constprop.5+0xe2>
   1a9dc:	e7b6      	b.n	1a94c <mem_alloc.constprop.5+0xc8>
   1a9de:	2601      	movs	r6, #1
   1a9e0:	fa06 f404 	lsl.w	r4, r6, r4
   1a9e4:	899e      	ldrh	r6, [r3, #12]
   1a9e6:	ea22 0204 	bic.w	r2, r2, r4
   1a9ea:	eba0 000e 	sub.w	r0, r0, lr
   1a9ee:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
   1a9f2:	685c      	ldr	r4, [r3, #4]
   1a9f4:	2e00      	cmp	r6, #0
   1a9f6:	d0a9      	beq.n	1a94c <mem_alloc.constprop.5+0xc8>
   1a9f8:	886a      	ldrh	r2, [r5, #2]
   1a9fa:	4282      	cmp	r2, r0
   1a9fc:	d811      	bhi.n	1aa22 <mem_alloc.constprop.5+0x19e>
   1a9fe:	2100      	movs	r1, #0
   1aa00:	1d2b      	adds	r3, r5, #4
   1aa02:	e003      	b.n	1aa0c <mem_alloc.constprop.5+0x188>
   1aa04:	885a      	ldrh	r2, [r3, #2]
   1aa06:	3304      	adds	r3, #4
   1aa08:	4282      	cmp	r2, r0
   1aa0a:	d80a      	bhi.n	1aa22 <mem_alloc.constprop.5+0x19e>
   1aa0c:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   1aa10:	3101      	adds	r1, #1
   1aa12:	428e      	cmp	r6, r1
   1aa14:	fb02 4405 	mla	r4, r2, r5, r4
   1aa18:	eba0 0002 	sub.w	r0, r0, r2
   1aa1c:	461d      	mov	r5, r3
   1aa1e:	d1f1      	bne.n	1aa04 <mem_alloc.constprop.5+0x180>
   1aa20:	e794      	b.n	1a94c <mem_alloc.constprop.5+0xc8>
   1aa22:	882b      	ldrh	r3, [r5, #0]
   1aa24:	fb00 4003 	mla	r0, r0, r3, r4
   1aa28:	b003      	add	sp, #12
   1aa2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa2e:	4670      	mov	r0, lr
   1aa30:	e7b0      	b.n	1a994 <mem_alloc.constprop.5+0x110>
   1aa32:	f1bb 0f10 	cmp.w	fp, #16
   1aa36:	bf08      	it	eq
   1aa38:	260f      	moveq	r6, #15
   1aa3a:	d090      	beq.n	1a95e <mem_alloc.constprop.5+0xda>
   1aa3c:	e786      	b.n	1a94c <mem_alloc.constprop.5+0xc8>
   1aa3e:	bf00      	nop
   1aa40:	20020f8c 	.word	0x20020f8c
   1aa44:	20020f50 	.word	0x20020f50
   1aa48:	20020f0c 	.word	0x20020f0c

0001aa4c <mem_alloc.constprop.4>:
   1aa4c:	2800      	cmp	r0, #0
   1aa4e:	d04c      	beq.n	1aaea <mem_alloc.constprop.4+0x9e>
   1aa50:	4b6b      	ldr	r3, [pc, #428]	; (1ac00 <mem_alloc.constprop.4+0x1b4>)
   1aa52:	681a      	ldr	r2, [r3, #0]
   1aa54:	4290      	cmp	r0, r2
   1aa56:	d848      	bhi.n	1aaea <mem_alloc.constprop.4+0x9e>
   1aa58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aa5c:	685f      	ldr	r7, [r3, #4]
   1aa5e:	b083      	sub	sp, #12
   1aa60:	9700      	str	r7, [sp, #0]
   1aa62:	2f00      	cmp	r7, #0
   1aa64:	d051      	beq.n	1ab0a <mem_alloc.constprop.4+0xbe>
   1aa66:	1e7a      	subs	r2, r7, #1
   1aa68:	4696      	mov	lr, r2
   1aa6a:	2100      	movs	r1, #0
   1aa6c:	f04f 0c01 	mov.w	ip, #1
   1aa70:	4c64      	ldr	r4, [pc, #400]	; (1ac04 <mem_alloc.constprop.4+0x1b8>)
   1aa72:	9201      	str	r2, [sp, #4]
   1aa74:	eb01 020e 	add.w	r2, r1, lr
   1aa78:	3201      	adds	r2, #1
   1aa7a:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
   1aa7e:	0852      	lsrs	r2, r2, #1
   1aa80:	f102 0801 	add.w	r8, r2, #1
   1aa84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1aa88:	f853 9037 	ldr.w	r9, [r3, r7, lsl #3]
   1aa8c:	f854 a025 	ldr.w	sl, [r4, r5, lsl #2]
   1aa90:	f853 6038 	ldr.w	r6, [r3, r8, lsl #3]
   1aa94:	eb09 0549 	add.w	r5, r9, r9, lsl #1
   1aa98:	eb03 09cc 	add.w	r9, r3, ip, lsl #3
   1aa9c:	f8d9 9004 	ldr.w	r9, [r9, #4]
   1aaa0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   1aaa4:	f8da a010 	ldr.w	sl, [sl, #16]
   1aaa8:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   1aaac:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   1aab0:	f83a a029 	ldrh.w	sl, [sl, r9, lsl #2]
   1aab4:	eb03 0bc8 	add.w	fp, r3, r8, lsl #3
   1aab8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
   1aabc:	6936      	ldr	r6, [r6, #16]
   1aabe:	f8db b004 	ldr.w	fp, [fp, #4]
   1aac2:	692d      	ldr	r5, [r5, #16]
   1aac4:	f8d9 9004 	ldr.w	r9, [r9, #4]
   1aac8:	4550      	cmp	r0, sl
   1aaca:	f836 602b 	ldrh.w	r6, [r6, fp, lsl #2]
   1aace:	f835 5029 	ldrh.w	r5, [r5, r9, lsl #2]
   1aad2:	d913      	bls.n	1aafc <mem_alloc.constprop.4+0xb0>
   1aad4:	42a8      	cmp	r0, r5
   1aad6:	d210      	bcs.n	1aafa <mem_alloc.constprop.4+0xae>
   1aad8:	42b0      	cmp	r0, r6
   1aada:	d908      	bls.n	1aaee <mem_alloc.constprop.4+0xa2>
   1aadc:	45c6      	cmp	lr, r8
   1aade:	4641      	mov	r1, r8
   1aae0:	f0c0 8087 	bcc.w	1abf2 <mem_alloc.constprop.4+0x1a6>
   1aae4:	f108 0c01 	add.w	ip, r8, #1
   1aae8:	e7c4      	b.n	1aa74 <mem_alloc.constprop.4+0x28>
   1aaea:	2000      	movs	r0, #0
   1aaec:	4770      	bx	lr
   1aaee:	f102 3eff 	add.w	lr, r2, #4294967295
   1aaf2:	4571      	cmp	r1, lr
   1aaf4:	d87d      	bhi.n	1abf2 <mem_alloc.constprop.4+0x1a6>
   1aaf6:	4617      	mov	r7, r2
   1aaf8:	e7bc      	b.n	1aa74 <mem_alloc.constprop.4+0x28>
   1aafa:	4639      	mov	r1, r7
   1aafc:	9a00      	ldr	r2, [sp, #0]
   1aafe:	428a      	cmp	r2, r1
   1ab00:	d007      	beq.n	1ab12 <mem_alloc.constprop.4+0xc6>
   1ab02:	2910      	cmp	r1, #16
   1ab04:	d001      	beq.n	1ab0a <mem_alloc.constprop.4+0xbe>
   1ab06:	428a      	cmp	r2, r1
   1ab08:	d808      	bhi.n	1ab1c <mem_alloc.constprop.4+0xd0>
   1ab0a:	2000      	movs	r0, #0
   1ab0c:	b003      	add	sp, #12
   1ab0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab12:	9a01      	ldr	r2, [sp, #4]
   1ab14:	2a10      	cmp	r2, #16
   1ab16:	bf18      	it	ne
   1ab18:	4611      	movne	r1, r2
   1ab1a:	d0f6      	beq.n	1ab0a <mem_alloc.constprop.4+0xbe>
   1ab1c:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 1ac08 <mem_alloc.constprop.4+0x1bc>
   1ab20:	f8dd 9000 	ldr.w	r9, [sp]
   1ab24:	eb03 08c1 	add.w	r8, r3, r1, lsl #3
   1ab28:	e9d8 2602 	ldrd	r2, r6, [r8, #8]
   1ab2c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1ab30:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
   1ab34:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   1ab38:	f8d2 e004 	ldr.w	lr, [r2, #4]
   1ab3c:	691f      	ldr	r7, [r3, #16]
   1ab3e:	2e00      	cmp	r6, #0
   1ab40:	d055      	beq.n	1abee <mem_alloc.constprop.4+0x1a2>
   1ab42:	463a      	mov	r2, r7
   1ab44:	4670      	mov	r0, lr
   1ab46:	00b6      	lsls	r6, r6, #2
   1ab48:	eb07 0a06 	add.w	sl, r7, r6
   1ab4c:	8855      	ldrh	r5, [r2, #2]
   1ab4e:	3204      	adds	r2, #4
   1ab50:	4592      	cmp	sl, r2
   1ab52:	4428      	add	r0, r5
   1ab54:	d1fa      	bne.n	1ab4c <mem_alloc.constprop.4+0x100>
   1ab56:	19bd      	adds	r5, r7, r6
   1ab58:	f8b5 b002 	ldrh.w	fp, [r5, #2]
   1ab5c:	4483      	add	fp, r0
   1ab5e:	4583      	cmp	fp, r0
   1ab60:	d918      	bls.n	1ab94 <mem_alloc.constprop.4+0x148>
   1ab62:	0945      	lsrs	r5, r0, #5
   1ab64:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   1ab68:	f000 061f 	and.w	r6, r0, #31
   1ab6c:	fa22 fa06 	lsr.w	sl, r2, r6
   1ab70:	f01a 0f01 	tst.w	sl, #1
   1ab74:	d007      	beq.n	1ab86 <mem_alloc.constprop.4+0x13a>
   1ab76:	e013      	b.n	1aba0 <mem_alloc.constprop.4+0x154>
   1ab78:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   1ab7c:	fa22 fa06 	lsr.w	sl, r2, r6
   1ab80:	f01a 0f01 	tst.w	sl, #1
   1ab84:	d10c      	bne.n	1aba0 <mem_alloc.constprop.4+0x154>
   1ab86:	3001      	adds	r0, #1
   1ab88:	4583      	cmp	fp, r0
   1ab8a:	ea4f 1550 	mov.w	r5, r0, lsr #5
   1ab8e:	f000 061f 	and.w	r6, r0, #31
   1ab92:	d1f1      	bne.n	1ab78 <mem_alloc.constprop.4+0x12c>
   1ab94:	3101      	adds	r1, #1
   1ab96:	4549      	cmp	r1, r9
   1ab98:	f108 0808 	add.w	r8, r8, #8
   1ab9c:	d3c4      	bcc.n	1ab28 <mem_alloc.constprop.4+0xdc>
   1ab9e:	e7b4      	b.n	1ab0a <mem_alloc.constprop.4+0xbe>
   1aba0:	2101      	movs	r1, #1
   1aba2:	40b1      	lsls	r1, r6
   1aba4:	899e      	ldrh	r6, [r3, #12]
   1aba6:	ea22 0201 	bic.w	r2, r2, r1
   1abaa:	eba0 000e 	sub.w	r0, r0, lr
   1abae:	f84c 2025 	str.w	r2, [ip, r5, lsl #2]
   1abb2:	685c      	ldr	r4, [r3, #4]
   1abb4:	2e00      	cmp	r6, #0
   1abb6:	d0a8      	beq.n	1ab0a <mem_alloc.constprop.4+0xbe>
   1abb8:	887a      	ldrh	r2, [r7, #2]
   1abba:	4282      	cmp	r2, r0
   1abbc:	d811      	bhi.n	1abe2 <mem_alloc.constprop.4+0x196>
   1abbe:	2100      	movs	r1, #0
   1abc0:	1d3b      	adds	r3, r7, #4
   1abc2:	e003      	b.n	1abcc <mem_alloc.constprop.4+0x180>
   1abc4:	885a      	ldrh	r2, [r3, #2]
   1abc6:	3304      	adds	r3, #4
   1abc8:	4282      	cmp	r2, r0
   1abca:	d80a      	bhi.n	1abe2 <mem_alloc.constprop.4+0x196>
   1abcc:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   1abd0:	3101      	adds	r1, #1
   1abd2:	428e      	cmp	r6, r1
   1abd4:	eba0 0002 	sub.w	r0, r0, r2
   1abd8:	fb02 4405 	mla	r4, r2, r5, r4
   1abdc:	461f      	mov	r7, r3
   1abde:	d1f1      	bne.n	1abc4 <mem_alloc.constprop.4+0x178>
   1abe0:	e793      	b.n	1ab0a <mem_alloc.constprop.4+0xbe>
   1abe2:	883b      	ldrh	r3, [r7, #0]
   1abe4:	fb00 4003 	mla	r0, r0, r3, r4
   1abe8:	b003      	add	sp, #12
   1abea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1abee:	4670      	mov	r0, lr
   1abf0:	e7b1      	b.n	1ab56 <mem_alloc.constprop.4+0x10a>
   1abf2:	9a00      	ldr	r2, [sp, #0]
   1abf4:	2a10      	cmp	r2, #16
   1abf6:	bf08      	it	eq
   1abf8:	210f      	moveq	r1, #15
   1abfa:	d08f      	beq.n	1ab1c <mem_alloc.constprop.4+0xd0>
   1abfc:	e785      	b.n	1ab0a <mem_alloc.constprop.4+0xbe>
   1abfe:	bf00      	nop
   1ac00:	20020f8c 	.word	0x20020f8c
   1ac04:	20020f50 	.word	0x20020f50
   1ac08:	20020f0c 	.word	0x20020f0c

0001ac0c <nrf_mem_init>:
   1ac0c:	b570      	push	{r4, r5, r6, lr}
   1ac0e:	2200      	movs	r2, #0
   1ac10:	2501      	movs	r5, #1
   1ac12:	4833      	ldr	r0, [pc, #204]	; (1ace0 <nrf_mem_init+0xd4>)
   1ac14:	0951      	lsrs	r1, r2, #5
   1ac16:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   1ac1a:	f002 031f 	and.w	r3, r2, #31
   1ac1e:	fa05 f303 	lsl.w	r3, r5, r3
   1ac22:	3201      	adds	r2, #1
   1ac24:	4323      	orrs	r3, r4
   1ac26:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   1ac2a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   1ac2e:	d1f1      	bne.n	1ac14 <nrf_mem_init+0x8>
   1ac30:	2400      	movs	r4, #0
   1ac32:	4b2c      	ldr	r3, [pc, #176]	; (1ace4 <nrf_mem_init+0xd8>)
   1ac34:	4621      	mov	r1, r4
   1ac36:	223c      	movs	r2, #60	; 0x3c
   1ac38:	482b      	ldr	r0, [pc, #172]	; (1ace8 <nrf_mem_init+0xdc>)
   1ac3a:	601c      	str	r4, [r3, #0]
   1ac3c:	f003 fd34 	bl	1e6a8 <memset>
   1ac40:	2110      	movs	r1, #16
   1ac42:	2205      	movs	r2, #5
   1ac44:	4b29      	ldr	r3, [pc, #164]	; (1acec <nrf_mem_init+0xe0>)
   1ac46:	4e2a      	ldr	r6, [pc, #168]	; (1acf0 <nrf_mem_init+0xe4>)
   1ac48:	e9c3 4400 	strd	r4, r4, [r3]
   1ac4c:	60d9      	str	r1, [r3, #12]
   1ac4e:	6159      	str	r1, [r3, #20]
   1ac50:	61d9      	str	r1, [r3, #28]
   1ac52:	6259      	str	r1, [r3, #36]	; 0x24
   1ac54:	62d9      	str	r1, [r3, #44]	; 0x2c
   1ac56:	6359      	str	r1, [r3, #52]	; 0x34
   1ac58:	63d9      	str	r1, [r3, #60]	; 0x3c
   1ac5a:	6459      	str	r1, [r3, #68]	; 0x44
   1ac5c:	64d9      	str	r1, [r3, #76]	; 0x4c
   1ac5e:	6559      	str	r1, [r3, #84]	; 0x54
   1ac60:	65d9      	str	r1, [r3, #92]	; 0x5c
   1ac62:	6659      	str	r1, [r3, #100]	; 0x64
   1ac64:	66d9      	str	r1, [r3, #108]	; 0x6c
   1ac66:	6759      	str	r1, [r3, #116]	; 0x74
   1ac68:	67d9      	str	r1, [r3, #124]	; 0x7c
   1ac6a:	609a      	str	r2, [r3, #8]
   1ac6c:	611a      	str	r2, [r3, #16]
   1ac6e:	619a      	str	r2, [r3, #24]
   1ac70:	621a      	str	r2, [r3, #32]
   1ac72:	629a      	str	r2, [r3, #40]	; 0x28
   1ac74:	631a      	str	r2, [r3, #48]	; 0x30
   1ac76:	639a      	str	r2, [r3, #56]	; 0x38
   1ac78:	641a      	str	r2, [r3, #64]	; 0x40
   1ac7a:	649a      	str	r2, [r3, #72]	; 0x48
   1ac7c:	651a      	str	r2, [r3, #80]	; 0x50
   1ac7e:	659a      	str	r2, [r3, #88]	; 0x58
   1ac80:	661a      	str	r2, [r3, #96]	; 0x60
   1ac82:	669a      	str	r2, [r3, #104]	; 0x68
   1ac84:	671a      	str	r2, [r3, #112]	; 0x70
   1ac86:	679a      	str	r2, [r3, #120]	; 0x78
   1ac88:	e9c3 2120 	strd	r2, r1, [r3, #128]	; 0x80
   1ac8c:	e9c3 4422 	strd	r4, r4, [r3, #136]	; 0x88
   1ac90:	e9c3 2124 	strd	r2, r1, [r3, #144]	; 0x90
   1ac94:	e9c3 2126 	strd	r2, r1, [r3, #152]	; 0x98
   1ac98:	e9c3 2128 	strd	r2, r1, [r3, #160]	; 0xa0
   1ac9c:	e9c3 212a 	strd	r2, r1, [r3, #168]	; 0xa8
   1aca0:	e9c3 212c 	strd	r2, r1, [r3, #176]	; 0xb0
   1aca4:	e9c3 212e 	strd	r2, r1, [r3, #184]	; 0xb8
   1aca8:	e9c3 2130 	strd	r2, r1, [r3, #192]	; 0xc0
   1acac:	e9c3 2132 	strd	r2, r1, [r3, #200]	; 0xc8
   1acb0:	e9c3 2134 	strd	r2, r1, [r3, #208]	; 0xd0
   1acb4:	e9c3 2136 	strd	r2, r1, [r3, #216]	; 0xd8
   1acb8:	e9c3 2138 	strd	r2, r1, [r3, #224]	; 0xe0
   1acbc:	e9c3 213a 	strd	r2, r1, [r3, #232]	; 0xe8
   1acc0:	e9c3 213c 	strd	r2, r1, [r3, #240]	; 0xf0
   1acc4:	e9c3 213e 	strd	r2, r1, [r3, #248]	; 0xf8
   1acc8:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   1accc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1acd0:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
   1acd4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1acd8:	4620      	mov	r0, r4
   1acda:	7035      	strb	r5, [r6, #0]
   1acdc:	bd70      	pop	{r4, r5, r6, pc}
   1acde:	bf00      	nop
   1ace0:	20020f0c 	.word	0x20020f0c
   1ace4:	20020f4c 	.word	0x20020f4c
   1ace8:	20020f50 	.word	0x20020f50
   1acec:	20020f8c 	.word	0x20020f8c
   1acf0:	20024326 	.word	0x20024326

0001acf4 <nrf_mem_register>:
   1acf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1acf8:	4b87      	ldr	r3, [pc, #540]	; (1af18 <nrf_mem_register+0x224>)
   1acfa:	b087      	sub	sp, #28
   1acfc:	781b      	ldrb	r3, [r3, #0]
   1acfe:	2b00      	cmp	r3, #0
   1ad00:	f000 808c 	beq.w	1ae1c <nrf_mem_register+0x128>
   1ad04:	b328      	cbz	r0, 1ad52 <nrf_mem_register+0x5e>
   1ad06:	b321      	cbz	r1, 1ad52 <nrf_mem_register+0x5e>
   1ad08:	780b      	ldrb	r3, [r1, #0]
   1ad0a:	f8df 8218 	ldr.w	r8, [pc, #536]	; 1af24 <nrf_mem_register+0x230>
   1ad0e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   1ad12:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   1ad16:	685b      	ldr	r3, [r3, #4]
   1ad18:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   1ad1c:	4463      	add	r3, ip
   1ad1e:	2b10      	cmp	r3, #16
   1ad20:	d811      	bhi.n	1ad46 <nrf_mem_register+0x52>
   1ad22:	f04f 0a00 	mov.w	sl, #0
   1ad26:	4689      	mov	r9, r1
   1ad28:	4b7c      	ldr	r3, [pc, #496]	; (1af1c <nrf_mem_register+0x228>)
   1ad2a:	4f7d      	ldr	r7, [pc, #500]	; (1af20 <nrf_mem_register+0x22c>)
   1ad2c:	681b      	ldr	r3, [r3, #0]
   1ad2e:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
   1ad32:	9300      	str	r3, [sp, #0]
   1ad34:	68b9      	ldr	r1, [r7, #8]
   1ad36:	b191      	cbz	r1, 1ad5e <nrf_mem_register+0x6a>
   1ad38:	f10a 0a01 	add.w	sl, sl, #1
   1ad3c:	f1ba 0f05 	cmp.w	sl, #5
   1ad40:	f107 070c 	add.w	r7, r7, #12
   1ad44:	d1f6      	bne.n	1ad34 <nrf_mem_register+0x40>
   1ad46:	f248 1b07 	movw	fp, #33031	; 0x8107
   1ad4a:	4658      	mov	r0, fp
   1ad4c:	b007      	add	sp, #28
   1ad4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad52:	f248 1b0e 	movw	fp, #33038	; 0x810e
   1ad56:	4658      	mov	r0, fp
   1ad58:	b007      	add	sp, #28
   1ad5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad5e:	f1bc 0f00 	cmp.w	ip, #0
   1ad62:	d061      	beq.n	1ae28 <nrf_mem_register+0x134>
   1ad64:	460d      	mov	r5, r1
   1ad66:	460c      	mov	r4, r1
   1ad68:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1ad6c:	eb0e 0b03 	add.w	fp, lr, r3
   1ad70:	885a      	ldrh	r2, [r3, #2]
   1ad72:	f833 6b04 	ldrh.w	r6, [r3], #4
   1ad76:	4415      	add	r5, r2
   1ad78:	459b      	cmp	fp, r3
   1ad7a:	fb02 4406 	mla	r4, r2, r6, r4
   1ad7e:	d1f7      	bne.n	1ad70 <nrf_mem_register+0x7c>
   1ad80:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1ad84:	42a3      	cmp	r3, r4
   1ad86:	d3d7      	bcc.n	1ad38 <nrf_mem_register+0x44>
   1ad88:	9b00      	ldr	r3, [sp, #0]
   1ad8a:	442b      	add	r3, r5
   1ad8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1ad90:	d2d2      	bcs.n	1ad38 <nrf_mem_register+0x44>
   1ad92:	4c63      	ldr	r4, [pc, #396]	; (1af20 <nrf_mem_register+0x22c>)
   1ad94:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   1ad98:	0092      	lsls	r2, r2, #2
   1ad9a:	f8c0 a000 	str.w	sl, [r0]
   1ad9e:	18a0      	adds	r0, r4, r2
   1ada0:	f844 9002 	str.w	r9, [r4, r2]
   1ada4:	9a00      	ldr	r2, [sp, #0]
   1ada6:	468b      	mov	fp, r1
   1ada8:	e9c0 2501 	strd	r2, r5, [r0, #4]
   1adac:	f899 2001 	ldrb.w	r2, [r9, #1]
   1adb0:	485a      	ldr	r0, [pc, #360]	; (1af1c <nrf_mem_register+0x228>)
   1adb2:	2a01      	cmp	r2, #1
   1adb4:	6003      	str	r3, [r0, #0]
   1adb6:	d0c8      	beq.n	1ad4a <nrf_mem_register+0x56>
   1adb8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   1adbc:	2b00      	cmp	r3, #0
   1adbe:	d0c4      	beq.n	1ad4a <nrf_mem_register+0x56>
   1adc0:	2500      	movs	r5, #0
   1adc2:	f8cd 9004 	str.w	r9, [sp, #4]
   1adc6:	f8cd a00c 	str.w	sl, [sp, #12]
   1adca:	f8cd b014 	str.w	fp, [sp, #20]
   1adce:	9b01      	ldr	r3, [sp, #4]
   1add0:	781f      	ldrb	r7, [r3, #0]
   1add2:	691a      	ldr	r2, [r3, #16]
   1add4:	013b      	lsls	r3, r7, #4
   1add6:	eb03 0907 	add.w	r9, r3, r7
   1adda:	9300      	str	r3, [sp, #0]
   1addc:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   1ade0:	6859      	ldr	r1, [r3, #4]
   1ade2:	f832 4025 	ldrh.w	r4, [r2, r5, lsl #2]
   1ade6:	9102      	str	r1, [sp, #8]
   1ade8:	bb39      	cbnz	r1, 1ae3a <nrf_mem_register+0x146>
   1adea:	9a03      	ldr	r2, [sp, #12]
   1adec:	60dd      	str	r5, [r3, #12]
   1adee:	609a      	str	r2, [r3, #8]
   1adf0:	9b00      	ldr	r3, [sp, #0]
   1adf2:	443b      	add	r3, r7
   1adf4:	461f      	mov	r7, r3
   1adf6:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   1adfa:	684b      	ldr	r3, [r1, #4]
   1adfc:	f858 2037 	ldr.w	r2, [r8, r7, lsl #3]
   1ae00:	3301      	adds	r3, #1
   1ae02:	4294      	cmp	r4, r2
   1ae04:	604b      	str	r3, [r1, #4]
   1ae06:	d912      	bls.n	1ae2e <nrf_mem_register+0x13a>
   1ae08:	9b01      	ldr	r3, [sp, #4]
   1ae0a:	f848 4037 	str.w	r4, [r8, r7, lsl #3]
   1ae0e:	899b      	ldrh	r3, [r3, #12]
   1ae10:	3501      	adds	r5, #1
   1ae12:	429d      	cmp	r5, r3
   1ae14:	d3db      	bcc.n	1adce <nrf_mem_register+0xda>
   1ae16:	f8dd b014 	ldr.w	fp, [sp, #20]
   1ae1a:	e796      	b.n	1ad4a <nrf_mem_register+0x56>
   1ae1c:	f248 1b08 	movw	fp, #33032	; 0x8108
   1ae20:	4658      	mov	r0, fp
   1ae22:	b007      	add	sp, #28
   1ae24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae28:	9b00      	ldr	r3, [sp, #0]
   1ae2a:	4665      	mov	r5, ip
   1ae2c:	e7ae      	b.n	1ad8c <nrf_mem_register+0x98>
   1ae2e:	9b01      	ldr	r3, [sp, #4]
   1ae30:	3501      	adds	r5, #1
   1ae32:	899b      	ldrh	r3, [r3, #12]
   1ae34:	42ab      	cmp	r3, r5
   1ae36:	d8ca      	bhi.n	1adce <nrf_mem_register+0xda>
   1ae38:	e7ed      	b.n	1ae16 <nrf_mem_register+0x122>
   1ae3a:	2600      	movs	r6, #0
   1ae3c:	f101 3aff 	add.w	sl, r1, #4294967295
   1ae40:	9504      	str	r5, [sp, #16]
   1ae42:	eb06 000a 	add.w	r0, r6, sl
   1ae46:	eb09 0206 	add.w	r2, r9, r6
   1ae4a:	3201      	adds	r2, #1
   1ae4c:	3001      	adds	r0, #1
   1ae4e:	f858 c032 	ldr.w	ip, [r8, r2, lsl #3]
   1ae52:	0840      	lsrs	r0, r0, #1
   1ae54:	4d32      	ldr	r5, [pc, #200]	; (1af20 <nrf_mem_register+0x22c>)
   1ae56:	eb09 0100 	add.w	r1, r9, r0
   1ae5a:	eb09 030a 	add.w	r3, r9, sl
   1ae5e:	3101      	adds	r1, #1
   1ae60:	3301      	adds	r3, #1
   1ae62:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   1ae66:	f858 e031 	ldr.w	lr, [r8, r1, lsl #3]
   1ae6a:	f855 b02c 	ldr.w	fp, [r5, ip, lsl #2]
   1ae6e:	f858 c033 	ldr.w	ip, [r8, r3, lsl #3]
   1ae72:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
   1ae76:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   1ae7a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   1ae7e:	f8db b010 	ldr.w	fp, [fp, #16]
   1ae82:	6852      	ldr	r2, [r2, #4]
   1ae84:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
   1ae88:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
   1ae8c:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   1ae90:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   1ae94:	f83b 2022 	ldrh.w	r2, [fp, r2, lsl #2]
   1ae98:	f8de e010 	ldr.w	lr, [lr, #16]
   1ae9c:	6849      	ldr	r1, [r1, #4]
   1ae9e:	f8dc c010 	ldr.w	ip, [ip, #16]
   1aea2:	685b      	ldr	r3, [r3, #4]
   1aea4:	4294      	cmp	r4, r2
   1aea6:	f83e 1021 	ldrh.w	r1, [lr, r1, lsl #2]
   1aeaa:	f83c 3023 	ldrh.w	r3, [ip, r3, lsl #2]
   1aeae:	d92d      	bls.n	1af0c <nrf_mem_register+0x218>
   1aeb0:	429c      	cmp	r4, r3
   1aeb2:	d22d      	bcs.n	1af10 <nrf_mem_register+0x21c>
   1aeb4:	428c      	cmp	r4, r1
   1aeb6:	d924      	bls.n	1af02 <nrf_mem_register+0x20e>
   1aeb8:	1c46      	adds	r6, r0, #1
   1aeba:	45b2      	cmp	sl, r6
   1aebc:	d2c1      	bcs.n	1ae42 <nrf_mem_register+0x14e>
   1aebe:	2610      	movs	r6, #16
   1aec0:	9d04      	ldr	r5, [sp, #16]
   1aec2:	9a02      	ldr	r2, [sp, #8]
   1aec4:	42b2      	cmp	r2, r6
   1aec6:	d911      	bls.n	1aeec <nrf_mem_register+0x1f8>
   1aec8:	9b00      	ldr	r3, [sp, #0]
   1aeca:	443b      	add	r3, r7
   1aecc:	441a      	add	r2, r3
   1aece:	4433      	add	r3, r6
   1aed0:	eb08 0ac2 	add.w	sl, r8, r2, lsl #3
   1aed4:	eb08 09c3 	add.w	r9, r8, r3, lsl #3
   1aed8:	2208      	movs	r2, #8
   1aeda:	4651      	mov	r1, sl
   1aedc:	eb0a 0002 	add.w	r0, sl, r2
   1aee0:	f1aa 0a08 	sub.w	sl, sl, #8
   1aee4:	f003 fbb5 	bl	1e652 <memcpy>
   1aee8:	45d1      	cmp	r9, sl
   1aeea:	d1f5      	bne.n	1aed8 <nrf_mem_register+0x1e4>
   1aeec:	9b00      	ldr	r3, [sp, #0]
   1aeee:	9903      	ldr	r1, [sp, #12]
   1aef0:	443b      	add	r3, r7
   1aef2:	4433      	add	r3, r6
   1aef4:	3301      	adds	r3, #1
   1aef6:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   1aefa:	f848 1033 	str.w	r1, [r8, r3, lsl #3]
   1aefe:	6055      	str	r5, [r2, #4]
   1af00:	e776      	b.n	1adf0 <nrf_mem_register+0xfc>
   1af02:	f100 3aff 	add.w	sl, r0, #4294967295
   1af06:	4556      	cmp	r6, sl
   1af08:	d99b      	bls.n	1ae42 <nrf_mem_register+0x14e>
   1af0a:	e7d8      	b.n	1aebe <nrf_mem_register+0x1ca>
   1af0c:	9d04      	ldr	r5, [sp, #16]
   1af0e:	e7d8      	b.n	1aec2 <nrf_mem_register+0x1ce>
   1af10:	9d04      	ldr	r5, [sp, #16]
   1af12:	f10a 0601 	add.w	r6, sl, #1
   1af16:	e7d4      	b.n	1aec2 <nrf_mem_register+0x1ce>
   1af18:	20024326 	.word	0x20024326
   1af1c:	20020f4c 	.word	0x20020f4c
   1af20:	20020f50 	.word	0x20020f50
   1af24:	20020f8c 	.word	0x20020f8c

0001af28 <nrf_malloc>:
   1af28:	4b03      	ldr	r3, [pc, #12]	; (1af38 <nrf_malloc+0x10>)
   1af2a:	781b      	ldrb	r3, [r3, #0]
   1af2c:	b10b      	cbz	r3, 1af32 <nrf_malloc+0xa>
   1af2e:	f7ff bd8d 	b.w	1aa4c <mem_alloc.constprop.4>
   1af32:	4618      	mov	r0, r3
   1af34:	4770      	bx	lr
   1af36:	bf00      	nop
   1af38:	20024326 	.word	0x20024326

0001af3c <nrf_free>:
   1af3c:	4b04      	ldr	r3, [pc, #16]	; (1af50 <nrf_free+0x14>)
   1af3e:	781b      	ldrb	r3, [r3, #0]
   1af40:	b123      	cbz	r3, 1af4c <nrf_free+0x10>
   1af42:	b118      	cbz	r0, 1af4c <nrf_free+0x10>
   1af44:	4601      	mov	r1, r0
   1af46:	2000      	movs	r0, #0
   1af48:	f7ff bc30 	b.w	1a7ac <mem_free>
   1af4c:	4770      	bx	lr
   1af4e:	bf00      	nop
   1af50:	20024326 	.word	0x20024326

0001af54 <nrf_shared_malloc>:
   1af54:	4b03      	ldr	r3, [pc, #12]	; (1af64 <nrf_shared_malloc+0x10>)
   1af56:	781b      	ldrb	r3, [r3, #0]
   1af58:	b10b      	cbz	r3, 1af5e <nrf_shared_malloc+0xa>
   1af5a:	f7ff bc93 	b.w	1a884 <mem_alloc.constprop.5>
   1af5e:	4618      	mov	r0, r3
   1af60:	4770      	bx	lr
   1af62:	bf00      	nop
   1af64:	20024326 	.word	0x20024326

0001af68 <nrf_shared_free>:
   1af68:	4b04      	ldr	r3, [pc, #16]	; (1af7c <nrf_shared_free+0x14>)
   1af6a:	781b      	ldrb	r3, [r3, #0]
   1af6c:	b123      	cbz	r3, 1af78 <nrf_shared_free+0x10>
   1af6e:	b118      	cbz	r0, 1af78 <nrf_shared_free+0x10>
   1af70:	4601      	mov	r1, r0
   1af72:	2001      	movs	r0, #1
   1af74:	f7ff bc1a 	b.w	1a7ac <mem_free>
   1af78:	4770      	bx	lr
   1af7a:	bf00      	nop
   1af7c:	20024326 	.word	0x20024326

0001af80 <rpc_dfu_event_handler>:
   1af80:	b508      	push	{r3, lr}
   1af82:	4a08      	ldr	r2, [pc, #32]	; (1afa4 <rpc_dfu_event_handler+0x24>)
   1af84:	68c1      	ldr	r1, [r0, #12]
   1af86:	8812      	ldrh	r2, [r2, #0]
   1af88:	4603      	mov	r3, r0
   1af8a:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   1af8e:	d005      	beq.n	1af9c <rpc_dfu_event_handler+0x1c>
   1af90:	6800      	ldr	r0, [r0, #0]
   1af92:	b110      	cbz	r0, 1af9a <rpc_dfu_event_handler+0x1a>
   1af94:	f7fd fa62 	bl	1845c <rpc_dfu_client_data_free>
   1af98:	2000      	movs	r0, #0
   1af9a:	bd08      	pop	{r3, pc}
   1af9c:	4a02      	ldr	r2, [pc, #8]	; (1afa8 <rpc_dfu_event_handler+0x28>)
   1af9e:	2001      	movs	r0, #1
   1afa0:	6013      	str	r3, [r2, #0]
   1afa2:	bd08      	pop	{r3, pc}
   1afa4:	20022354 	.word	0x20022354
   1afa8:	200210a8 	.word	0x200210a8

0001afac <mfu_interface_init>:
   1afac:	2300      	movs	r3, #0
   1afae:	b510      	push	{r4, lr}
   1afb0:	4808      	ldr	r0, [pc, #32]	; (1afd4 <mfu_interface_init+0x28>)
   1afb2:	4909      	ldr	r1, [pc, #36]	; (1afd8 <mfu_interface_init+0x2c>)
   1afb4:	4a09      	ldr	r2, [pc, #36]	; (1afdc <mfu_interface_init+0x30>)
   1afb6:	4c0a      	ldr	r4, [pc, #40]	; (1afe0 <mfu_interface_init+0x34>)
   1afb8:	8003      	strh	r3, [r0, #0]
   1afba:	600b      	str	r3, [r1, #0]
   1afbc:	6013      	str	r3, [r2, #0]
   1afbe:	6023      	str	r3, [r4, #0]
   1afc0:	f7fd fa16 	bl	183f0 <rpc_dfu_client_init>
   1afc4:	b910      	cbnz	r0, 1afcc <mfu_interface_init+0x20>
   1afc6:	2301      	movs	r3, #1
   1afc8:	6023      	str	r3, [r4, #0]
   1afca:	bd10      	pop	{r4, pc}
   1afcc:	f04f 30ff 	mov.w	r0, #4294967295
   1afd0:	bd10      	pop	{r4, pc}
   1afd2:	bf00      	nop
   1afd4:	20022354 	.word	0x20022354
   1afd8:	200210a8 	.word	0x200210a8
   1afdc:	200210a4 	.word	0x200210a4
   1afe0:	2002109c 	.word	0x2002109c

0001afe4 <mfu_interface_open>:
   1afe4:	b508      	push	{r3, lr}
   1afe6:	4b07      	ldr	r3, [pc, #28]	; (1b004 <mfu_interface_open+0x20>)
   1afe8:	681a      	ldr	r2, [r3, #0]
   1afea:	2a01      	cmp	r2, #1
   1afec:	d103      	bne.n	1aff6 <mfu_interface_open+0x12>
   1afee:	2202      	movs	r2, #2
   1aff0:	601a      	str	r2, [r3, #0]
   1aff2:	4805      	ldr	r0, [pc, #20]	; (1b008 <mfu_interface_open+0x24>)
   1aff4:	bd08      	pop	{r3, pc}
   1aff6:	2001      	movs	r0, #1
   1aff8:	f7f6 fa66 	bl	114c8 <bsd_os_errno_set>
   1affc:	f04f 30ff 	mov.w	r0, #4294967295
   1b000:	bd08      	pop	{r3, pc}
   1b002:	bf00      	nop
   1b004:	2002109c 	.word	0x2002109c
   1b008:	49765432 	.word	0x49765432

0001b00c <mfu_interface_close>:
   1b00c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b00e:	4c32      	ldr	r4, [pc, #200]	; (1b0d8 <mfu_interface_close+0xcc>)
   1b010:	b083      	sub	sp, #12
   1b012:	6823      	ldr	r3, [r4, #0]
   1b014:	1e9a      	subs	r2, r3, #2
   1b016:	2a01      	cmp	r2, #1
   1b018:	d857      	bhi.n	1b0ca <mfu_interface_close+0xbe>
   1b01a:	2b03      	cmp	r3, #3
   1b01c:	d004      	beq.n	1b028 <mfu_interface_close+0x1c>
   1b01e:	2301      	movs	r3, #1
   1b020:	2000      	movs	r0, #0
   1b022:	6023      	str	r3, [r4, #0]
   1b024:	b003      	add	sp, #12
   1b026:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b028:	2100      	movs	r1, #0
   1b02a:	4668      	mov	r0, sp
   1b02c:	f7fd f9e6 	bl	183fc <rpc_dfu_client_request_alloc>
   1b030:	4603      	mov	r3, r0
   1b032:	2800      	cmp	r0, #0
   1b034:	d13d      	bne.n	1b0b2 <mfu_interface_close+0xa6>
   1b036:	2104      	movs	r1, #4
   1b038:	4e28      	ldr	r6, [pc, #160]	; (1b0dc <mfu_interface_close+0xd0>)
   1b03a:	9800      	ldr	r0, [sp, #0]
   1b03c:	8832      	ldrh	r2, [r6, #0]
   1b03e:	7201      	strb	r1, [r0, #8]
   1b040:	3201      	adds	r2, #1
   1b042:	b292      	uxth	r2, r2
   1b044:	0411      	lsls	r1, r2, #16
   1b046:	f041 0106 	orr.w	r1, r1, #6
   1b04a:	4d25      	ldr	r5, [pc, #148]	; (1b0e0 <mfu_interface_close+0xd4>)
   1b04c:	60c1      	str	r1, [r0, #12]
   1b04e:	7103      	strb	r3, [r0, #4]
   1b050:	7143      	strb	r3, [r0, #5]
   1b052:	7183      	strb	r3, [r0, #6]
   1b054:	71c3      	strb	r3, [r0, #7]
   1b056:	7243      	strb	r3, [r0, #9]
   1b058:	7283      	strb	r3, [r0, #10]
   1b05a:	72c3      	strb	r3, [r0, #11]
   1b05c:	2106      	movs	r1, #6
   1b05e:	8032      	strh	r2, [r6, #0]
   1b060:	602b      	str	r3, [r5, #0]
   1b062:	f7fd f9df 	bl	18424 <rpc_dfu_client_request_send>
   1b066:	b9d8      	cbnz	r0, 1b0a0 <mfu_interface_close+0x94>
   1b068:	f04f 33ff 	mov.w	r3, #4294967295
   1b06c:	ae02      	add	r6, sp, #8
   1b06e:	4627      	mov	r7, r4
   1b070:	f846 3d04 	str.w	r3, [r6, #-4]!
   1b074:	e004      	b.n	1b080 <mfu_interface_close+0x74>
   1b076:	4631      	mov	r1, r6
   1b078:	4638      	mov	r0, r7
   1b07a:	f7f6 f96d 	bl	11358 <bsd_os_timedwait>
   1b07e:	b9f0      	cbnz	r0, 1b0be <mfu_interface_close+0xb2>
   1b080:	6828      	ldr	r0, [r5, #0]
   1b082:	2800      	cmp	r0, #0
   1b084:	d0f7      	beq.n	1b076 <mfu_interface_close+0x6a>
   1b086:	6905      	ldr	r5, [r0, #16]
   1b088:	f7fd f9e0 	bl	1844c <rpc_dfu_client_message_free>
   1b08c:	2d00      	cmp	r5, #0
   1b08e:	d0c6      	beq.n	1b01e <mfu_interface_close+0x12>
   1b090:	4b14      	ldr	r3, [pc, #80]	; (1b0e4 <mfu_interface_close+0xd8>)
   1b092:	2008      	movs	r0, #8
   1b094:	601d      	str	r5, [r3, #0]
   1b096:	f7f6 fa17 	bl	114c8 <bsd_os_errno_set>
   1b09a:	f04f 30ff 	mov.w	r0, #4294967295
   1b09e:	e7c1      	b.n	1b024 <mfu_interface_close+0x18>
   1b0a0:	9800      	ldr	r0, [sp, #0]
   1b0a2:	6803      	ldr	r3, [r0, #0]
   1b0a4:	b11b      	cbz	r3, 1b0ae <mfu_interface_close+0xa2>
   1b0a6:	4618      	mov	r0, r3
   1b0a8:	f7fd f9d8 	bl	1845c <rpc_dfu_client_data_free>
   1b0ac:	9800      	ldr	r0, [sp, #0]
   1b0ae:	f7fd f9cd 	bl	1844c <rpc_dfu_client_message_free>
   1b0b2:	200c      	movs	r0, #12
   1b0b4:	f7f6 fa08 	bl	114c8 <bsd_os_errno_set>
   1b0b8:	f04f 30ff 	mov.w	r0, #4294967295
   1b0bc:	e7b2      	b.n	1b024 <mfu_interface_close+0x18>
   1b0be:	203c      	movs	r0, #60	; 0x3c
   1b0c0:	f7f6 fa02 	bl	114c8 <bsd_os_errno_set>
   1b0c4:	f04f 30ff 	mov.w	r0, #4294967295
   1b0c8:	e7ac      	b.n	1b024 <mfu_interface_close+0x18>
   1b0ca:	2001      	movs	r0, #1
   1b0cc:	f7f6 f9fc 	bl	114c8 <bsd_os_errno_set>
   1b0d0:	f04f 30ff 	mov.w	r0, #4294967295
   1b0d4:	e7a6      	b.n	1b024 <mfu_interface_close+0x18>
   1b0d6:	bf00      	nop
   1b0d8:	2002109c 	.word	0x2002109c
   1b0dc:	20022354 	.word	0x20022354
   1b0e0:	200210a8 	.word	0x200210a8
   1b0e4:	200210a0 	.word	0x200210a0

0001b0e8 <mfu_interface_sendto>:
   1b0e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b0ec:	4e64      	ldr	r6, [pc, #400]	; (1b280 <mfu_interface_sendto+0x198>)
   1b0ee:	460f      	mov	r7, r1
   1b0f0:	6831      	ldr	r1, [r6, #0]
   1b0f2:	4615      	mov	r5, r2
   1b0f4:	1e8a      	subs	r2, r1, #2
   1b0f6:	2a01      	cmp	r2, #1
   1b0f8:	b082      	sub	sp, #8
   1b0fa:	f200 80b4 	bhi.w	1b266 <mfu_interface_sendto+0x17e>
   1b0fe:	2f00      	cmp	r7, #0
   1b100:	f000 80a5 	beq.w	1b24e <mfu_interface_sendto+0x166>
   1b104:	2d00      	cmp	r5, #0
   1b106:	f000 80a2 	beq.w	1b24e <mfu_interface_sendto+0x166>
   1b10a:	2b00      	cmp	r3, #0
   1b10c:	f040 80b1 	bne.w	1b272 <mfu_interface_sendto+0x18a>
   1b110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b112:	2b00      	cmp	r3, #0
   1b114:	f040 80a1 	bne.w	1b25a <mfu_interface_sendto+0x172>
   1b118:	2902      	cmp	r1, #2
   1b11a:	d04f      	beq.n	1b1bc <mfu_interface_sendto+0xd4>
   1b11c:	46e8      	mov	r8, sp
   1b11e:	4640      	mov	r0, r8
   1b120:	4629      	mov	r1, r5
   1b122:	f7fd f96b 	bl	183fc <rpc_dfu_client_request_alloc>
   1b126:	4606      	mov	r6, r0
   1b128:	b140      	cbz	r0, 1b13c <mfu_interface_sendto+0x54>
   1b12a:	200c      	movs	r0, #12
   1b12c:	f7f6 f9cc 	bl	114c8 <bsd_os_errno_set>
   1b130:	f04f 35ff 	mov.w	r5, #4294967295
   1b134:	4628      	mov	r0, r5
   1b136:	b002      	add	sp, #8
   1b138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b13c:	9b00      	ldr	r3, [sp, #0]
   1b13e:	4639      	mov	r1, r7
   1b140:	6818      	ldr	r0, [r3, #0]
   1b142:	462a      	mov	r2, r5
   1b144:	f003 fa85 	bl	1e652 <memcpy>
   1b148:	2104      	movs	r1, #4
   1b14a:	4c4e      	ldr	r4, [pc, #312]	; (1b284 <mfu_interface_sendto+0x19c>)
   1b14c:	9800      	ldr	r0, [sp, #0]
   1b14e:	8823      	ldrh	r3, [r4, #0]
   1b150:	6045      	str	r5, [r0, #4]
   1b152:	3301      	adds	r3, #1
   1b154:	b29b      	uxth	r3, r3
   1b156:	041a      	lsls	r2, r3, #16
   1b158:	8023      	strh	r3, [r4, #0]
   1b15a:	430a      	orrs	r2, r1
   1b15c:	4c4a      	ldr	r4, [pc, #296]	; (1b288 <mfu_interface_sendto+0x1a0>)
   1b15e:	60c2      	str	r2, [r0, #12]
   1b160:	7246      	strb	r6, [r0, #9]
   1b162:	7286      	strb	r6, [r0, #10]
   1b164:	72c6      	strb	r6, [r0, #11]
   1b166:	7201      	strb	r1, [r0, #8]
   1b168:	6026      	str	r6, [r4, #0]
   1b16a:	f7fd f95b 	bl	18424 <rpc_dfu_client_request_send>
   1b16e:	2800      	cmp	r0, #0
   1b170:	d163      	bne.n	1b23a <mfu_interface_sendto+0x152>
   1b172:	f04f 33ff 	mov.w	r3, #4294967295
   1b176:	ae02      	add	r6, sp, #8
   1b178:	4f41      	ldr	r7, [pc, #260]	; (1b280 <mfu_interface_sendto+0x198>)
   1b17a:	f846 3d04 	str.w	r3, [r6, #-4]!
   1b17e:	e004      	b.n	1b18a <mfu_interface_sendto+0xa2>
   1b180:	4631      	mov	r1, r6
   1b182:	4638      	mov	r0, r7
   1b184:	f7f6 f8e8 	bl	11358 <bsd_os_timedwait>
   1b188:	b978      	cbnz	r0, 1b1aa <mfu_interface_sendto+0xc2>
   1b18a:	6820      	ldr	r0, [r4, #0]
   1b18c:	2800      	cmp	r0, #0
   1b18e:	d0f7      	beq.n	1b180 <mfu_interface_sendto+0x98>
   1b190:	6904      	ldr	r4, [r0, #16]
   1b192:	f7fd f95b 	bl	1844c <rpc_dfu_client_message_free>
   1b196:	2c00      	cmp	r4, #0
   1b198:	d0cc      	beq.n	1b134 <mfu_interface_sendto+0x4c>
   1b19a:	4b3c      	ldr	r3, [pc, #240]	; (1b28c <mfu_interface_sendto+0x1a4>)
   1b19c:	2008      	movs	r0, #8
   1b19e:	601c      	str	r4, [r3, #0]
   1b1a0:	f04f 35ff 	mov.w	r5, #4294967295
   1b1a4:	f7f6 f990 	bl	114c8 <bsd_os_errno_set>
   1b1a8:	e7c4      	b.n	1b134 <mfu_interface_sendto+0x4c>
   1b1aa:	f04f 35ff 	mov.w	r5, #4294967295
   1b1ae:	203c      	movs	r0, #60	; 0x3c
   1b1b0:	f7f6 f98a 	bl	114c8 <bsd_os_errno_set>
   1b1b4:	4628      	mov	r0, r5
   1b1b6:	b002      	add	sp, #8
   1b1b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b1bc:	46e8      	mov	r8, sp
   1b1be:	4619      	mov	r1, r3
   1b1c0:	4640      	mov	r0, r8
   1b1c2:	f7fd f91b 	bl	183fc <rpc_dfu_client_request_alloc>
   1b1c6:	4602      	mov	r2, r0
   1b1c8:	2800      	cmp	r0, #0
   1b1ca:	d1ae      	bne.n	1b12a <mfu_interface_sendto+0x42>
   1b1cc:	f04f 0c08 	mov.w	ip, #8
   1b1d0:	492c      	ldr	r1, [pc, #176]	; (1b284 <mfu_interface_sendto+0x19c>)
   1b1d2:	482f      	ldr	r0, [pc, #188]	; (1b290 <mfu_interface_sendto+0x1a8>)
   1b1d4:	880b      	ldrh	r3, [r1, #0]
   1b1d6:	6804      	ldr	r4, [r0, #0]
   1b1d8:	3301      	adds	r3, #1
   1b1da:	9800      	ldr	r0, [sp, #0]
   1b1dc:	b29b      	uxth	r3, r3
   1b1de:	800b      	strh	r3, [r1, #0]
   1b1e0:	041b      	lsls	r3, r3, #16
   1b1e2:	f043 0303 	orr.w	r3, r3, #3
   1b1e6:	6104      	str	r4, [r0, #16]
   1b1e8:	4c27      	ldr	r4, [pc, #156]	; (1b288 <mfu_interface_sendto+0x1a0>)
   1b1ea:	60c3      	str	r3, [r0, #12]
   1b1ec:	7102      	strb	r2, [r0, #4]
   1b1ee:	7142      	strb	r2, [r0, #5]
   1b1f0:	7182      	strb	r2, [r0, #6]
   1b1f2:	71c2      	strb	r2, [r0, #7]
   1b1f4:	7242      	strb	r2, [r0, #9]
   1b1f6:	7282      	strb	r2, [r0, #10]
   1b1f8:	72c2      	strb	r2, [r0, #11]
   1b1fa:	f880 c008 	strb.w	ip, [r0, #8]
   1b1fe:	2103      	movs	r1, #3
   1b200:	6022      	str	r2, [r4, #0]
   1b202:	f7fd f90f 	bl	18424 <rpc_dfu_client_request_send>
   1b206:	b9c0      	cbnz	r0, 1b23a <mfu_interface_sendto+0x152>
   1b208:	f04f 33ff 	mov.w	r3, #4294967295
   1b20c:	f10d 0908 	add.w	r9, sp, #8
   1b210:	f849 3d04 	str.w	r3, [r9, #-4]!
   1b214:	46b2      	mov	sl, r6
   1b216:	e005      	b.n	1b224 <mfu_interface_sendto+0x13c>
   1b218:	4649      	mov	r1, r9
   1b21a:	4650      	mov	r0, sl
   1b21c:	f7f6 f89c 	bl	11358 <bsd_os_timedwait>
   1b220:	2800      	cmp	r0, #0
   1b222:	d1c2      	bne.n	1b1aa <mfu_interface_sendto+0xc2>
   1b224:	6820      	ldr	r0, [r4, #0]
   1b226:	2800      	cmp	r0, #0
   1b228:	d0f6      	beq.n	1b218 <mfu_interface_sendto+0x130>
   1b22a:	6904      	ldr	r4, [r0, #16]
   1b22c:	f7fd f90e 	bl	1844c <rpc_dfu_client_message_free>
   1b230:	2c00      	cmp	r4, #0
   1b232:	d1b2      	bne.n	1b19a <mfu_interface_sendto+0xb2>
   1b234:	2303      	movs	r3, #3
   1b236:	6033      	str	r3, [r6, #0]
   1b238:	e771      	b.n	1b11e <mfu_interface_sendto+0x36>
   1b23a:	9800      	ldr	r0, [sp, #0]
   1b23c:	6803      	ldr	r3, [r0, #0]
   1b23e:	b11b      	cbz	r3, 1b248 <mfu_interface_sendto+0x160>
   1b240:	4618      	mov	r0, r3
   1b242:	f7fd f90b 	bl	1845c <rpc_dfu_client_data_free>
   1b246:	9800      	ldr	r0, [sp, #0]
   1b248:	f7fd f900 	bl	1844c <rpc_dfu_client_message_free>
   1b24c:	e76d      	b.n	1b12a <mfu_interface_sendto+0x42>
   1b24e:	2016      	movs	r0, #22
   1b250:	f7f6 f93a 	bl	114c8 <bsd_os_errno_set>
   1b254:	f04f 35ff 	mov.w	r5, #4294967295
   1b258:	e76c      	b.n	1b134 <mfu_interface_sendto+0x4c>
   1b25a:	2038      	movs	r0, #56	; 0x38
   1b25c:	f7f6 f934 	bl	114c8 <bsd_os_errno_set>
   1b260:	f04f 35ff 	mov.w	r5, #4294967295
   1b264:	e766      	b.n	1b134 <mfu_interface_sendto+0x4c>
   1b266:	2001      	movs	r0, #1
   1b268:	f7f6 f92e 	bl	114c8 <bsd_os_errno_set>
   1b26c:	f04f 35ff 	mov.w	r5, #4294967295
   1b270:	e760      	b.n	1b134 <mfu_interface_sendto+0x4c>
   1b272:	202d      	movs	r0, #45	; 0x2d
   1b274:	f7f6 f928 	bl	114c8 <bsd_os_errno_set>
   1b278:	f04f 35ff 	mov.w	r5, #4294967295
   1b27c:	e75a      	b.n	1b134 <mfu_interface_sendto+0x4c>
   1b27e:	bf00      	nop
   1b280:	2002109c 	.word	0x2002109c
   1b284:	20022354 	.word	0x20022354
   1b288:	200210a8 	.word	0x200210a8
   1b28c:	200210a0 	.word	0x200210a0
   1b290:	200210a4 	.word	0x200210a4

0001b294 <mfu_interface_setopt>:
   1b294:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b296:	4846      	ldr	r0, [pc, #280]	; (1b3b0 <mfu_interface_setopt+0x11c>)
   1b298:	b083      	sub	sp, #12
   1b29a:	6800      	ldr	r0, [r0, #0]
   1b29c:	3802      	subs	r0, #2
   1b29e:	2801      	cmp	r0, #1
   1b2a0:	d877      	bhi.n	1b392 <mfu_interface_setopt+0xfe>
   1b2a2:	f240 2003 	movw	r0, #515	; 0x203
   1b2a6:	4281      	cmp	r1, r0
   1b2a8:	d16d      	bne.n	1b386 <mfu_interface_setopt+0xf2>
   1b2aa:	3a04      	subs	r2, #4
   1b2ac:	2a03      	cmp	r2, #3
   1b2ae:	d85c      	bhi.n	1b36a <mfu_interface_setopt+0xd6>
   1b2b0:	e8df f002 	tbb	[pc, r2]
   1b2b4:	514e024b 	.word	0x514e024b
   1b2b8:	2407      	movs	r4, #7
   1b2ba:	4625      	mov	r5, r4
   1b2bc:	2100      	movs	r1, #0
   1b2be:	4668      	mov	r0, sp
   1b2c0:	f7fd f89c 	bl	183fc <rpc_dfu_client_request_alloc>
   1b2c4:	4603      	mov	r3, r0
   1b2c6:	2800      	cmp	r0, #0
   1b2c8:	d138      	bne.n	1b33c <mfu_interface_setopt+0xa8>
   1b2ca:	2704      	movs	r7, #4
   1b2cc:	4e39      	ldr	r6, [pc, #228]	; (1b3b4 <mfu_interface_setopt+0x120>)
   1b2ce:	9800      	ldr	r0, [sp, #0]
   1b2d0:	8832      	ldrh	r2, [r6, #0]
   1b2d2:	4629      	mov	r1, r5
   1b2d4:	3201      	adds	r2, #1
   1b2d6:	b292      	uxth	r2, r2
   1b2d8:	ea44 4502 	orr.w	r5, r4, r2, lsl #16
   1b2dc:	4c36      	ldr	r4, [pc, #216]	; (1b3b8 <mfu_interface_setopt+0x124>)
   1b2de:	60c5      	str	r5, [r0, #12]
   1b2e0:	7103      	strb	r3, [r0, #4]
   1b2e2:	7143      	strb	r3, [r0, #5]
   1b2e4:	7183      	strb	r3, [r0, #6]
   1b2e6:	71c3      	strb	r3, [r0, #7]
   1b2e8:	7243      	strb	r3, [r0, #9]
   1b2ea:	7283      	strb	r3, [r0, #10]
   1b2ec:	72c3      	strb	r3, [r0, #11]
   1b2ee:	7207      	strb	r7, [r0, #8]
   1b2f0:	8032      	strh	r2, [r6, #0]
   1b2f2:	6023      	str	r3, [r4, #0]
   1b2f4:	f7fd f896 	bl	18424 <rpc_dfu_client_request_send>
   1b2f8:	b9b8      	cbnz	r0, 1b32a <mfu_interface_setopt+0x96>
   1b2fa:	f04f 33ff 	mov.w	r3, #4294967295
   1b2fe:	ad02      	add	r5, sp, #8
   1b300:	4e2b      	ldr	r6, [pc, #172]	; (1b3b0 <mfu_interface_setopt+0x11c>)
   1b302:	f845 3d04 	str.w	r3, [r5, #-4]!
   1b306:	e005      	b.n	1b314 <mfu_interface_setopt+0x80>
   1b308:	4629      	mov	r1, r5
   1b30a:	4630      	mov	r0, r6
   1b30c:	f7f6 f824 	bl	11358 <bsd_os_timedwait>
   1b310:	2800      	cmp	r0, #0
   1b312:	d131      	bne.n	1b378 <mfu_interface_setopt+0xe4>
   1b314:	6820      	ldr	r0, [r4, #0]
   1b316:	2800      	cmp	r0, #0
   1b318:	d0f6      	beq.n	1b308 <mfu_interface_setopt+0x74>
   1b31a:	6904      	ldr	r4, [r0, #16]
   1b31c:	f7fd f896 	bl	1844c <rpc_dfu_client_message_free>
   1b320:	2c00      	cmp	r4, #0
   1b322:	d13c      	bne.n	1b39e <mfu_interface_setopt+0x10a>
   1b324:	4620      	mov	r0, r4
   1b326:	b003      	add	sp, #12
   1b328:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b32a:	9800      	ldr	r0, [sp, #0]
   1b32c:	6803      	ldr	r3, [r0, #0]
   1b32e:	b11b      	cbz	r3, 1b338 <mfu_interface_setopt+0xa4>
   1b330:	4618      	mov	r0, r3
   1b332:	f7fd f893 	bl	1845c <rpc_dfu_client_data_free>
   1b336:	9800      	ldr	r0, [sp, #0]
   1b338:	f7fd f888 	bl	1844c <rpc_dfu_client_message_free>
   1b33c:	200c      	movs	r0, #12
   1b33e:	f7f6 f8c3 	bl	114c8 <bsd_os_errno_set>
   1b342:	f04f 30ff 	mov.w	r0, #4294967295
   1b346:	b003      	add	sp, #12
   1b348:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b34a:	2405      	movs	r4, #5
   1b34c:	4625      	mov	r5, r4
   1b34e:	e7b5      	b.n	1b2bc <mfu_interface_setopt+0x28>
   1b350:	2408      	movs	r4, #8
   1b352:	4625      	mov	r5, r4
   1b354:	e7b2      	b.n	1b2bc <mfu_interface_setopt+0x28>
   1b356:	b1b3      	cbz	r3, 1b386 <mfu_interface_setopt+0xf2>
   1b358:	9a08      	ldr	r2, [sp, #32]
   1b35a:	2a04      	cmp	r2, #4
   1b35c:	d113      	bne.n	1b386 <mfu_interface_setopt+0xf2>
   1b35e:	2000      	movs	r0, #0
   1b360:	681a      	ldr	r2, [r3, #0]
   1b362:	4b16      	ldr	r3, [pc, #88]	; (1b3bc <mfu_interface_setopt+0x128>)
   1b364:	601a      	str	r2, [r3, #0]
   1b366:	b003      	add	sp, #12
   1b368:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b36a:	202a      	movs	r0, #42	; 0x2a
   1b36c:	f7f6 f8ac 	bl	114c8 <bsd_os_errno_set>
   1b370:	f04f 30ff 	mov.w	r0, #4294967295
   1b374:	b003      	add	sp, #12
   1b376:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b378:	203c      	movs	r0, #60	; 0x3c
   1b37a:	f7f6 f8a5 	bl	114c8 <bsd_os_errno_set>
   1b37e:	f04f 30ff 	mov.w	r0, #4294967295
   1b382:	b003      	add	sp, #12
   1b384:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b386:	2016      	movs	r0, #22
   1b388:	f7f6 f89e 	bl	114c8 <bsd_os_errno_set>
   1b38c:	f04f 30ff 	mov.w	r0, #4294967295
   1b390:	e7c9      	b.n	1b326 <mfu_interface_setopt+0x92>
   1b392:	2001      	movs	r0, #1
   1b394:	f7f6 f898 	bl	114c8 <bsd_os_errno_set>
   1b398:	f04f 30ff 	mov.w	r0, #4294967295
   1b39c:	e7c3      	b.n	1b326 <mfu_interface_setopt+0x92>
   1b39e:	4b08      	ldr	r3, [pc, #32]	; (1b3c0 <mfu_interface_setopt+0x12c>)
   1b3a0:	2008      	movs	r0, #8
   1b3a2:	601c      	str	r4, [r3, #0]
   1b3a4:	f7f6 f890 	bl	114c8 <bsd_os_errno_set>
   1b3a8:	f04f 30ff 	mov.w	r0, #4294967295
   1b3ac:	e7bb      	b.n	1b326 <mfu_interface_setopt+0x92>
   1b3ae:	bf00      	nop
   1b3b0:	2002109c 	.word	0x2002109c
   1b3b4:	20022354 	.word	0x20022354
   1b3b8:	200210a8 	.word	0x200210a8
   1b3bc:	200210a4 	.word	0x200210a4
   1b3c0:	200210a0 	.word	0x200210a0

0001b3c4 <mfu_interface_getopt>:
   1b3c4:	f240 2003 	movw	r0, #515	; 0x203
   1b3c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b3cc:	4281      	cmp	r1, r0
   1b3ce:	b082      	sub	sp, #8
   1b3d0:	9e08      	ldr	r6, [sp, #32]
   1b3d2:	f040 80ae 	bne.w	1b532 <mfu_interface_getopt+0x16e>
   1b3d6:	461d      	mov	r5, r3
   1b3d8:	2b00      	cmp	r3, #0
   1b3da:	f000 80aa 	beq.w	1b532 <mfu_interface_getopt+0x16e>
   1b3de:	2e00      	cmp	r6, #0
   1b3e0:	f000 80a7 	beq.w	1b532 <mfu_interface_getopt+0x16e>
   1b3e4:	4b5e      	ldr	r3, [pc, #376]	; (1b560 <mfu_interface_getopt+0x19c>)
   1b3e6:	681b      	ldr	r3, [r3, #0]
   1b3e8:	3b02      	subs	r3, #2
   1b3ea:	2b01      	cmp	r3, #1
   1b3ec:	f200 80a7 	bhi.w	1b53e <mfu_interface_getopt+0x17a>
   1b3f0:	3a01      	subs	r2, #1
   1b3f2:	2a13      	cmp	r2, #19
   1b3f4:	d879      	bhi.n	1b4ea <mfu_interface_getopt+0x126>
   1b3f6:	e8df f002 	tbb	[pc, r2]
   1b3fa:	5f17      	.short	0x5f17
   1b3fc:	78787878 	.word	0x78787878
   1b400:	78787872 	.word	0x78787872
   1b404:	78787878 	.word	0x78787878
   1b408:	78787878 	.word	0x78787878
   1b40c:	0a78      	.short	0x0a78
   1b40e:	6833      	ldr	r3, [r6, #0]
   1b410:	2b04      	cmp	r3, #4
   1b412:	f040 808e 	bne.w	1b532 <mfu_interface_getopt+0x16e>
   1b416:	2200      	movs	r2, #0
   1b418:	4610      	mov	r0, r2
   1b41a:	4b52      	ldr	r3, [pc, #328]	; (1b564 <mfu_interface_getopt+0x1a0>)
   1b41c:	6819      	ldr	r1, [r3, #0]
   1b41e:	601a      	str	r2, [r3, #0]
   1b420:	6029      	str	r1, [r5, #0]
   1b422:	b002      	add	sp, #8
   1b424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b428:	6833      	ldr	r3, [r6, #0]
   1b42a:	2b24      	cmp	r3, #36	; 0x24
   1b42c:	f040 8081 	bne.w	1b532 <mfu_interface_getopt+0x16e>
   1b430:	2401      	movs	r4, #1
   1b432:	46a0      	mov	r8, r4
   1b434:	2100      	movs	r1, #0
   1b436:	4668      	mov	r0, sp
   1b438:	f7fc ffe0 	bl	183fc <rpc_dfu_client_request_alloc>
   1b43c:	2800      	cmp	r0, #0
   1b43e:	d146      	bne.n	1b4ce <mfu_interface_getopt+0x10a>
   1b440:	4949      	ldr	r1, [pc, #292]	; (1b568 <mfu_interface_getopt+0x1a4>)
   1b442:	9b00      	ldr	r3, [sp, #0]
   1b444:	880a      	ldrh	r2, [r1, #0]
   1b446:	f1b8 0f03 	cmp.w	r8, #3
   1b44a:	f102 0201 	add.w	r2, r2, #1
   1b44e:	b292      	uxth	r2, r2
   1b450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   1b454:	7118      	strb	r0, [r3, #4]
   1b456:	800a      	strh	r2, [r1, #0]
   1b458:	60dc      	str	r4, [r3, #12]
   1b45a:	7158      	strb	r0, [r3, #5]
   1b45c:	7198      	strb	r0, [r3, #6]
   1b45e:	71d8      	strb	r0, [r3, #7]
   1b460:	d04b      	beq.n	1b4fa <mfu_interface_getopt+0x136>
   1b462:	2104      	movs	r1, #4
   1b464:	2200      	movs	r2, #0
   1b466:	4f41      	ldr	r7, [pc, #260]	; (1b56c <mfu_interface_getopt+0x1a8>)
   1b468:	6099      	str	r1, [r3, #8]
   1b46a:	4618      	mov	r0, r3
   1b46c:	4641      	mov	r1, r8
   1b46e:	603a      	str	r2, [r7, #0]
   1b470:	f7fc ffd8 	bl	18424 <rpc_dfu_client_request_send>
   1b474:	2800      	cmp	r0, #0
   1b476:	d14d      	bne.n	1b514 <mfu_interface_getopt+0x150>
   1b478:	f04f 33ff 	mov.w	r3, #4294967295
   1b47c:	ac02      	add	r4, sp, #8
   1b47e:	f844 3d04 	str.w	r3, [r4, #-4]!
   1b482:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 1b560 <mfu_interface_getopt+0x19c>
   1b486:	e005      	b.n	1b494 <mfu_interface_getopt+0xd0>
   1b488:	4621      	mov	r1, r4
   1b48a:	4640      	mov	r0, r8
   1b48c:	f7f5 ff64 	bl	11358 <bsd_os_timedwait>
   1b490:	2800      	cmp	r0, #0
   1b492:	d137      	bne.n	1b504 <mfu_interface_getopt+0x140>
   1b494:	6839      	ldr	r1, [r7, #0]
   1b496:	2900      	cmp	r1, #0
   1b498:	d0f6      	beq.n	1b488 <mfu_interface_getopt+0xc4>
   1b49a:	690c      	ldr	r4, [r1, #16]
   1b49c:	2c00      	cmp	r4, #0
   1b49e:	d154      	bne.n	1b54a <mfu_interface_getopt+0x186>
   1b4a0:	6832      	ldr	r2, [r6, #0]
   1b4a2:	3114      	adds	r1, #20
   1b4a4:	4628      	mov	r0, r5
   1b4a6:	f003 f8d4 	bl	1e652 <memcpy>
   1b4aa:	6838      	ldr	r0, [r7, #0]
   1b4ac:	f7fc ffce 	bl	1844c <rpc_dfu_client_message_free>
   1b4b0:	4620      	mov	r0, r4
   1b4b2:	b002      	add	sp, #8
   1b4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b4b8:	6833      	ldr	r3, [r6, #0]
   1b4ba:	2b04      	cmp	r3, #4
   1b4bc:	d139      	bne.n	1b532 <mfu_interface_getopt+0x16e>
   1b4be:	2402      	movs	r4, #2
   1b4c0:	2100      	movs	r1, #0
   1b4c2:	4668      	mov	r0, sp
   1b4c4:	46a0      	mov	r8, r4
   1b4c6:	f7fc ff99 	bl	183fc <rpc_dfu_client_request_alloc>
   1b4ca:	2800      	cmp	r0, #0
   1b4cc:	d0b8      	beq.n	1b440 <mfu_interface_getopt+0x7c>
   1b4ce:	200c      	movs	r0, #12
   1b4d0:	f7f5 fffa 	bl	114c8 <bsd_os_errno_set>
   1b4d4:	f04f 30ff 	mov.w	r0, #4294967295
   1b4d8:	b002      	add	sp, #8
   1b4da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b4de:	6833      	ldr	r3, [r6, #0]
   1b4e0:	2b04      	cmp	r3, #4
   1b4e2:	d126      	bne.n	1b532 <mfu_interface_getopt+0x16e>
   1b4e4:	2409      	movs	r4, #9
   1b4e6:	46a0      	mov	r8, r4
   1b4e8:	e7a4      	b.n	1b434 <mfu_interface_getopt+0x70>
   1b4ea:	202a      	movs	r0, #42	; 0x2a
   1b4ec:	f7f5 ffec 	bl	114c8 <bsd_os_errno_set>
   1b4f0:	f04f 30ff 	mov.w	r0, #4294967295
   1b4f4:	b002      	add	sp, #8
   1b4f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b4fa:	4a1d      	ldr	r2, [pc, #116]	; (1b570 <mfu_interface_getopt+0x1ac>)
   1b4fc:	2108      	movs	r1, #8
   1b4fe:	6812      	ldr	r2, [r2, #0]
   1b500:	611a      	str	r2, [r3, #16]
   1b502:	e7af      	b.n	1b464 <mfu_interface_getopt+0xa0>
   1b504:	203c      	movs	r0, #60	; 0x3c
   1b506:	f7f5 ffdf 	bl	114c8 <bsd_os_errno_set>
   1b50a:	f04f 30ff 	mov.w	r0, #4294967295
   1b50e:	b002      	add	sp, #8
   1b510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b514:	9800      	ldr	r0, [sp, #0]
   1b516:	6803      	ldr	r3, [r0, #0]
   1b518:	b11b      	cbz	r3, 1b522 <mfu_interface_getopt+0x15e>
   1b51a:	4618      	mov	r0, r3
   1b51c:	f7fc ff9e 	bl	1845c <rpc_dfu_client_data_free>
   1b520:	9800      	ldr	r0, [sp, #0]
   1b522:	f7fc ff93 	bl	1844c <rpc_dfu_client_message_free>
   1b526:	200c      	movs	r0, #12
   1b528:	f7f5 ffce 	bl	114c8 <bsd_os_errno_set>
   1b52c:	f04f 30ff 	mov.w	r0, #4294967295
   1b530:	e7d2      	b.n	1b4d8 <mfu_interface_getopt+0x114>
   1b532:	2016      	movs	r0, #22
   1b534:	f7f5 ffc8 	bl	114c8 <bsd_os_errno_set>
   1b538:	f04f 30ff 	mov.w	r0, #4294967295
   1b53c:	e771      	b.n	1b422 <mfu_interface_getopt+0x5e>
   1b53e:	2001      	movs	r0, #1
   1b540:	f7f5 ffc2 	bl	114c8 <bsd_os_errno_set>
   1b544:	f04f 30ff 	mov.w	r0, #4294967295
   1b548:	e76b      	b.n	1b422 <mfu_interface_getopt+0x5e>
   1b54a:	4b06      	ldr	r3, [pc, #24]	; (1b564 <mfu_interface_getopt+0x1a0>)
   1b54c:	2008      	movs	r0, #8
   1b54e:	601c      	str	r4, [r3, #0]
   1b550:	f7f5 ffba 	bl	114c8 <bsd_os_errno_set>
   1b554:	6838      	ldr	r0, [r7, #0]
   1b556:	f7fc ff79 	bl	1844c <rpc_dfu_client_message_free>
   1b55a:	f04f 30ff 	mov.w	r0, #4294967295
   1b55e:	e760      	b.n	1b422 <mfu_interface_getopt+0x5e>
   1b560:	2002109c 	.word	0x2002109c
   1b564:	200210a0 	.word	0x200210a0
   1b568:	20022354 	.word	0x20022354
   1b56c:	200210a8 	.word	0x200210a8
   1b570:	200210a4 	.word	0x200210a4

0001b574 <interface_init>:
   1b574:	b508      	push	{r3, lr}
   1b576:	f44f 72b4 	mov.w	r2, #360	; 0x168
   1b57a:	2100      	movs	r1, #0
   1b57c:	4802      	ldr	r0, [pc, #8]	; (1b588 <interface_init+0x14>)
   1b57e:	f003 f893 	bl	1e6a8 <memset>
   1b582:	2000      	movs	r0, #0
   1b584:	bd08      	pop	{r3, pc}
   1b586:	bf00      	nop
   1b588:	20024328 	.word	0x20024328

0001b58c <interface_socket_allocate>:
   1b58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b58e:	4b30      	ldr	r3, [pc, #192]	; (1b650 <interface_socket_allocate+0xc4>)
   1b590:	4606      	mov	r6, r0
   1b592:	681d      	ldr	r5, [r3, #0]
   1b594:	4608      	mov	r0, r1
   1b596:	b31d      	cbz	r5, 1b5e0 <interface_socket_allocate+0x54>
   1b598:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   1b59a:	2c00      	cmp	r4, #0
   1b59c:	d04a      	beq.n	1b634 <interface_socket_allocate+0xa8>
   1b59e:	6d1c      	ldr	r4, [r3, #80]	; 0x50
   1b5a0:	2c00      	cmp	r4, #0
   1b5a2:	d049      	beq.n	1b638 <interface_socket_allocate+0xac>
   1b5a4:	6f9c      	ldr	r4, [r3, #120]	; 0x78
   1b5a6:	2c00      	cmp	r4, #0
   1b5a8:	d048      	beq.n	1b63c <interface_socket_allocate+0xb0>
   1b5aa:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
   1b5ae:	2900      	cmp	r1, #0
   1b5b0:	d046      	beq.n	1b640 <interface_socket_allocate+0xb4>
   1b5b2:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
   1b5b6:	b191      	cbz	r1, 1b5de <interface_socket_allocate+0x52>
   1b5b8:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
   1b5bc:	2900      	cmp	r1, #0
   1b5be:	d043      	beq.n	1b648 <interface_socket_allocate+0xbc>
   1b5c0:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
   1b5c4:	2900      	cmp	r1, #0
   1b5c6:	d041      	beq.n	1b64c <interface_socket_allocate+0xc0>
   1b5c8:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
   1b5cc:	2900      	cmp	r1, #0
   1b5ce:	d039      	beq.n	1b644 <interface_socket_allocate+0xb8>
   1b5d0:	f04f 35ff 	mov.w	r5, #4294967295
   1b5d4:	2069      	movs	r0, #105	; 0x69
   1b5d6:	f7f5 ff77 	bl	114c8 <bsd_os_errno_set>
   1b5da:	4628      	mov	r0, r5
   1b5dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b5de:	2505      	movs	r5, #5
   1b5e0:	f04f 0c01 	mov.w	ip, #1
   1b5e4:	f04f 37ff 	mov.w	r7, #4294967295
   1b5e8:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   1b5ec:	00e4      	lsls	r4, r4, #3
   1b5ee:	f843 c004 	str.w	ip, [r3, r4]
   1b5f2:	441c      	add	r4, r3
   1b5f4:	4611      	mov	r1, r2
   1b5f6:	61a7      	str	r7, [r4, #24]
   1b5f8:	4622      	mov	r2, r4
   1b5fa:	f7fe ff9b 	bl	1a534 <packet_handler_create>
   1b5fe:	4603      	mov	r3, r0
   1b600:	61e0      	str	r0, [r4, #28]
   1b602:	b158      	cbz	r0, 1b61c <interface_socket_allocate+0x90>
   1b604:	681b      	ldr	r3, [r3, #0]
   1b606:	681b      	ldr	r3, [r3, #0]
   1b608:	4798      	blx	r3
   1b60a:	b910      	cbnz	r0, 1b612 <interface_socket_allocate+0x86>
   1b60c:	6034      	str	r4, [r6, #0]
   1b60e:	4628      	mov	r0, r5
   1b610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b612:	69e0      	ldr	r0, [r4, #28]
   1b614:	f7fe ffae 	bl	1a574 <packet_handler_delete>
   1b618:	2300      	movs	r3, #0
   1b61a:	61e3      	str	r3, [r4, #28]
   1b61c:	f04f 35ff 	mov.w	r5, #4294967295
   1b620:	2228      	movs	r2, #40	; 0x28
   1b622:	2100      	movs	r1, #0
   1b624:	4620      	mov	r0, r4
   1b626:	f003 f83f 	bl	1e6a8 <memset>
   1b62a:	200c      	movs	r0, #12
   1b62c:	f7f5 ff4c 	bl	114c8 <bsd_os_errno_set>
   1b630:	4628      	mov	r0, r5
   1b632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b634:	2501      	movs	r5, #1
   1b636:	e7d3      	b.n	1b5e0 <interface_socket_allocate+0x54>
   1b638:	2502      	movs	r5, #2
   1b63a:	e7d1      	b.n	1b5e0 <interface_socket_allocate+0x54>
   1b63c:	2503      	movs	r5, #3
   1b63e:	e7cf      	b.n	1b5e0 <interface_socket_allocate+0x54>
   1b640:	2504      	movs	r5, #4
   1b642:	e7cd      	b.n	1b5e0 <interface_socket_allocate+0x54>
   1b644:	2508      	movs	r5, #8
   1b646:	e7cb      	b.n	1b5e0 <interface_socket_allocate+0x54>
   1b648:	2506      	movs	r5, #6
   1b64a:	e7c9      	b.n	1b5e0 <interface_socket_allocate+0x54>
   1b64c:	2507      	movs	r5, #7
   1b64e:	e7c7      	b.n	1b5e0 <interface_socket_allocate+0x54>
   1b650:	20024328 	.word	0x20024328

0001b654 <interface_socket_free>:
   1b654:	2808      	cmp	r0, #8
   1b656:	d900      	bls.n	1b65a <interface_socket_free+0x6>
   1b658:	4770      	bx	lr
   1b65a:	b510      	push	{r4, lr}
   1b65c:	4c07      	ldr	r4, [pc, #28]	; (1b67c <interface_socket_free+0x28>)
   1b65e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1b662:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
   1b666:	69e0      	ldr	r0, [r4, #28]
   1b668:	b108      	cbz	r0, 1b66e <interface_socket_free+0x1a>
   1b66a:	f7fe ff83 	bl	1a574 <packet_handler_delete>
   1b66e:	4620      	mov	r0, r4
   1b670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b674:	2228      	movs	r2, #40	; 0x28
   1b676:	2100      	movs	r1, #0
   1b678:	f003 b816 	b.w	1e6a8 <memset>
   1b67c:	20024328 	.word	0x20024328

0001b680 <interface_socket_packet_handler_update>:
   1b680:	2808      	cmp	r0, #8
   1b682:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b686:	d81e      	bhi.n	1b6c6 <interface_socket_packet_handler_update+0x46>
   1b688:	ea4f 0880 	mov.w	r8, r0, lsl #2
   1b68c:	4e17      	ldr	r6, [pc, #92]	; (1b6ec <interface_socket_packet_handler_update+0x6c>)
   1b68e:	eb08 0300 	add.w	r3, r8, r0
   1b692:	00db      	lsls	r3, r3, #3
   1b694:	58f4      	ldr	r4, [r6, r3]
   1b696:	18f5      	adds	r5, r6, r3
   1b698:	b1ac      	cbz	r4, 1b6c6 <interface_socket_packet_handler_update+0x46>
   1b69a:	460b      	mov	r3, r1
   1b69c:	4604      	mov	r4, r0
   1b69e:	4611      	mov	r1, r2
   1b6a0:	4618      	mov	r0, r3
   1b6a2:	462a      	mov	r2, r5
   1b6a4:	f8d5 901c 	ldr.w	r9, [r5, #28]
   1b6a8:	f7fe ff44 	bl	1a534 <packet_handler_create>
   1b6ac:	61e8      	str	r0, [r5, #28]
   1b6ae:	b1d0      	cbz	r0, 1b6e6 <interface_socket_packet_handler_update+0x66>
   1b6b0:	6803      	ldr	r3, [r0, #0]
   1b6b2:	681b      	ldr	r3, [r3, #0]
   1b6b4:	4798      	blx	r3
   1b6b6:	4607      	mov	r7, r0
   1b6b8:	b948      	cbnz	r0, 1b6ce <interface_socket_packet_handler_update+0x4e>
   1b6ba:	4648      	mov	r0, r9
   1b6bc:	f7fe ff5a 	bl	1a574 <packet_handler_delete>
   1b6c0:	4638      	mov	r0, r7
   1b6c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b6c6:	2705      	movs	r7, #5
   1b6c8:	4638      	mov	r0, r7
   1b6ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b6ce:	69e8      	ldr	r0, [r5, #28]
   1b6d0:	f7fe ff50 	bl	1a574 <packet_handler_delete>
   1b6d4:	eb08 0004 	add.w	r0, r8, r4
   1b6d8:	eb06 06c0 	add.w	r6, r6, r0, lsl #3
   1b6dc:	f8c6 901c 	str.w	r9, [r6, #28]
   1b6e0:	4638      	mov	r0, r7
   1b6e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b6e6:	2704      	movs	r7, #4
   1b6e8:	e7f4      	b.n	1b6d4 <interface_socket_packet_handler_update+0x54>
   1b6ea:	bf00      	nop
   1b6ec:	20024328 	.word	0x20024328

0001b6f0 <interface_socket_wait>:
   1b6f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b6f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1b6f8:	4c0d      	ldr	r4, [pc, #52]	; (1b730 <interface_socket_wait+0x40>)
   1b6fa:	00c0      	lsls	r0, r0, #3
   1b6fc:	5825      	ldr	r5, [r4, r0]
   1b6fe:	4404      	add	r4, r0
   1b700:	4015      	ands	r5, r2
   1b702:	428d      	cmp	r5, r1
   1b704:	d011      	beq.n	1b72a <interface_socket_wait+0x3a>
   1b706:	6860      	ldr	r0, [r4, #4]
   1b708:	b978      	cbnz	r0, 1b72a <interface_socket_wait+0x3a>
   1b70a:	4698      	mov	r8, r3
   1b70c:	460f      	mov	r7, r1
   1b70e:	4616      	mov	r6, r2
   1b710:	4625      	mov	r5, r4
   1b712:	e006      	b.n	1b722 <interface_socket_wait+0x32>
   1b714:	686b      	ldr	r3, [r5, #4]
   1b716:	b943      	cbnz	r3, 1b72a <interface_socket_wait+0x3a>
   1b718:	4641      	mov	r1, r8
   1b71a:	4620      	mov	r0, r4
   1b71c:	f7f5 fe1c 	bl	11358 <bsd_os_timedwait>
   1b720:	b920      	cbnz	r0, 1b72c <interface_socket_wait+0x3c>
   1b722:	6828      	ldr	r0, [r5, #0]
   1b724:	4030      	ands	r0, r6
   1b726:	42b8      	cmp	r0, r7
   1b728:	d1f4      	bne.n	1b714 <interface_socket_wait+0x24>
   1b72a:	2000      	movs	r0, #0
   1b72c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b730:	20024328 	.word	0x20024328

0001b734 <interface_from_internal_id_search>:
   1b734:	4b27      	ldr	r3, [pc, #156]	; (1b7d4 <interface_from_internal_id_search+0xa0>)
   1b736:	681a      	ldr	r2, [r3, #0]
   1b738:	b112      	cbz	r2, 1b740 <interface_from_internal_id_search+0xc>
   1b73a:	699a      	ldr	r2, [r3, #24]
   1b73c:	4282      	cmp	r2, r0
   1b73e:	d039      	beq.n	1b7b4 <interface_from_internal_id_search+0x80>
   1b740:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1b742:	b112      	cbz	r2, 1b74a <interface_from_internal_id_search+0x16>
   1b744:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1b746:	4282      	cmp	r2, r0
   1b748:	d036      	beq.n	1b7b8 <interface_from_internal_id_search+0x84>
   1b74a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   1b74c:	b112      	cbz	r2, 1b754 <interface_from_internal_id_search+0x20>
   1b74e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   1b750:	4282      	cmp	r2, r0
   1b752:	d033      	beq.n	1b7bc <interface_from_internal_id_search+0x88>
   1b754:	6f9a      	ldr	r2, [r3, #120]	; 0x78
   1b756:	b11a      	cbz	r2, 1b760 <interface_from_internal_id_search+0x2c>
   1b758:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   1b75c:	4282      	cmp	r2, r0
   1b75e:	d02f      	beq.n	1b7c0 <interface_from_internal_id_search+0x8c>
   1b760:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
   1b764:	b11a      	cbz	r2, 1b76e <interface_from_internal_id_search+0x3a>
   1b766:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   1b76a:	4282      	cmp	r2, r0
   1b76c:	d02a      	beq.n	1b7c4 <interface_from_internal_id_search+0x90>
   1b76e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
   1b772:	b11a      	cbz	r2, 1b77c <interface_from_internal_id_search+0x48>
   1b774:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   1b778:	4282      	cmp	r2, r0
   1b77a:	d025      	beq.n	1b7c8 <interface_from_internal_id_search+0x94>
   1b77c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   1b780:	b11a      	cbz	r2, 1b78a <interface_from_internal_id_search+0x56>
   1b782:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   1b786:	4282      	cmp	r2, r0
   1b788:	d020      	beq.n	1b7cc <interface_from_internal_id_search+0x98>
   1b78a:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
   1b78e:	b11a      	cbz	r2, 1b798 <interface_from_internal_id_search+0x64>
   1b790:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1b794:	4282      	cmp	r2, r0
   1b796:	d01b      	beq.n	1b7d0 <interface_from_internal_id_search+0x9c>
   1b798:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   1b79c:	b13a      	cbz	r2, 1b7ae <interface_from_internal_id_search+0x7a>
   1b79e:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
   1b7a2:	4283      	cmp	r3, r0
   1b7a4:	bf14      	ite	ne
   1b7a6:	f04f 30ff 	movne.w	r0, #4294967295
   1b7aa:	2008      	moveq	r0, #8
   1b7ac:	4770      	bx	lr
   1b7ae:	f04f 30ff 	mov.w	r0, #4294967295
   1b7b2:	4770      	bx	lr
   1b7b4:	2000      	movs	r0, #0
   1b7b6:	4770      	bx	lr
   1b7b8:	2001      	movs	r0, #1
   1b7ba:	4770      	bx	lr
   1b7bc:	2002      	movs	r0, #2
   1b7be:	4770      	bx	lr
   1b7c0:	2003      	movs	r0, #3
   1b7c2:	4770      	bx	lr
   1b7c4:	2004      	movs	r0, #4
   1b7c6:	4770      	bx	lr
   1b7c8:	2005      	movs	r0, #5
   1b7ca:	4770      	bx	lr
   1b7cc:	2006      	movs	r0, #6
   1b7ce:	4770      	bx	lr
   1b7d0:	2007      	movs	r0, #7
   1b7d2:	4770      	bx	lr
   1b7d4:	20024328 	.word	0x20024328

0001b7d8 <interface_socket_from_handle_get>:
   1b7d8:	2808      	cmp	r0, #8
   1b7da:	d807      	bhi.n	1b7ec <interface_socket_from_handle_get+0x14>
   1b7dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1b7e0:	4b03      	ldr	r3, [pc, #12]	; (1b7f0 <interface_socket_from_handle_get+0x18>)
   1b7e2:	00c0      	lsls	r0, r0, #3
   1b7e4:	581a      	ldr	r2, [r3, r0]
   1b7e6:	b10a      	cbz	r2, 1b7ec <interface_socket_from_handle_get+0x14>
   1b7e8:	4418      	add	r0, r3
   1b7ea:	4770      	bx	lr
   1b7ec:	2000      	movs	r0, #0
   1b7ee:	4770      	bx	lr
   1b7f0:	20024328 	.word	0x20024328

0001b7f4 <interface_socket_event_get>:
   1b7f4:	b119      	cbz	r1, 1b7fe <interface_socket_event_get+0xa>
   1b7f6:	2808      	cmp	r0, #8
   1b7f8:	d902      	bls.n	1b800 <interface_socket_event_get+0xc>
   1b7fa:	2310      	movs	r3, #16
   1b7fc:	600b      	str	r3, [r1, #0]
   1b7fe:	4770      	bx	lr
   1b800:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1b804:	4b07      	ldr	r3, [pc, #28]	; (1b824 <interface_socket_event_get+0x30>)
   1b806:	00c0      	lsls	r0, r0, #3
   1b808:	581a      	ldr	r2, [r3, r0]
   1b80a:	2a00      	cmp	r2, #0
   1b80c:	d0f5      	beq.n	1b7fa <interface_socket_event_get+0x6>
   1b80e:	581b      	ldr	r3, [r3, r0]
   1b810:	0c1b      	lsrs	r3, r3, #16
   1b812:	f003 020a 	and.w	r2, r3, #10
   1b816:	2a0a      	cmp	r2, #10
   1b818:	bf14      	ite	ne
   1b81a:	f003 030f 	andne.w	r3, r3, #15
   1b81e:	f003 030d 	andeq.w	r3, r3, #13
   1b822:	e7eb      	b.n	1b7fc <interface_socket_event_get+0x8>
   1b824:	20024328 	.word	0x20024328

0001b828 <interface_socket_setopt>:
   1b828:	2808      	cmp	r0, #8
   1b82a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b82c:	d82c      	bhi.n	1b888 <interface_socket_setopt+0x60>
   1b82e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1b832:	4e1e      	ldr	r6, [pc, #120]	; (1b8ac <interface_socket_setopt+0x84>)
   1b834:	00c0      	lsls	r0, r0, #3
   1b836:	5834      	ldr	r4, [r6, r0]
   1b838:	b334      	cbz	r4, 1b888 <interface_socket_setopt+0x60>
   1b83a:	2901      	cmp	r1, #1
   1b83c:	d11e      	bne.n	1b87c <interface_socket_setopt+0x54>
   1b83e:	f1a2 0114 	sub.w	r1, r2, #20
   1b842:	2901      	cmp	r1, #1
   1b844:	d81a      	bhi.n	1b87c <interface_socket_setopt+0x54>
   1b846:	9906      	ldr	r1, [sp, #24]
   1b848:	2908      	cmp	r1, #8
   1b84a:	d123      	bne.n	1b894 <interface_socket_setopt+0x6c>
   1b84c:	b313      	cbz	r3, 1b894 <interface_socket_setopt+0x6c>
   1b84e:	6859      	ldr	r1, [r3, #4]
   1b850:	4c17      	ldr	r4, [pc, #92]	; (1b8b0 <interface_socket_setopt+0x88>)
   1b852:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   1b856:	fba4 4101 	umull	r4, r1, r4, r1
   1b85a:	0989      	lsrs	r1, r1, #6
   1b85c:	460c      	mov	r4, r1
   1b85e:	2500      	movs	r5, #0
   1b860:	681b      	ldr	r3, [r3, #0]
   1b862:	fbe7 4503 	umlal	r4, r5, r7, r3
   1b866:	2d01      	cmp	r5, #1
   1b868:	bf08      	it	eq
   1b86a:	2c00      	cmpeq	r4, #0
   1b86c:	d218      	bcs.n	1b8a0 <interface_socket_setopt+0x78>
   1b86e:	4430      	add	r0, r6
   1b870:	2a14      	cmp	r2, #20
   1b872:	bf0c      	ite	eq
   1b874:	6204      	streq	r4, [r0, #32]
   1b876:	6244      	strne	r4, [r0, #36]	; 0x24
   1b878:	2000      	movs	r0, #0
   1b87a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b87c:	202a      	movs	r0, #42	; 0x2a
   1b87e:	f7f5 fe23 	bl	114c8 <bsd_os_errno_set>
   1b882:	f04f 30ff 	mov.w	r0, #4294967295
   1b886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b888:	2009      	movs	r0, #9
   1b88a:	f7f5 fe1d 	bl	114c8 <bsd_os_errno_set>
   1b88e:	f04f 30ff 	mov.w	r0, #4294967295
   1b892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b894:	2016      	movs	r0, #22
   1b896:	f7f5 fe17 	bl	114c8 <bsd_os_errno_set>
   1b89a:	f04f 30ff 	mov.w	r0, #4294967295
   1b89e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b8a0:	2025      	movs	r0, #37	; 0x25
   1b8a2:	f7f5 fe11 	bl	114c8 <bsd_os_errno_set>
   1b8a6:	f04f 30ff 	mov.w	r0, #4294967295
   1b8aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b8ac:	20024328 	.word	0x20024328
   1b8b0:	10624dd3 	.word	0x10624dd3

0001b8b4 <interface_socket_getopt>:
   1b8b4:	b570      	push	{r4, r5, r6, lr}
   1b8b6:	2808      	cmp	r0, #8
   1b8b8:	9d04      	ldr	r5, [sp, #16]
   1b8ba:	d835      	bhi.n	1b928 <interface_socket_getopt+0x74>
   1b8bc:	4c20      	ldr	r4, [pc, #128]	; (1b940 <interface_socket_getopt+0x8c>)
   1b8be:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1b8c2:	00c0      	lsls	r0, r0, #3
   1b8c4:	5826      	ldr	r6, [r4, r0]
   1b8c6:	4404      	add	r4, r0
   1b8c8:	b376      	cbz	r6, 1b928 <interface_socket_getopt+0x74>
   1b8ca:	2901      	cmp	r1, #1
   1b8cc:	d132      	bne.n	1b934 <interface_socket_getopt+0x80>
   1b8ce:	b32b      	cbz	r3, 1b91c <interface_socket_getopt+0x68>
   1b8d0:	b325      	cbz	r5, 1b91c <interface_socket_getopt+0x68>
   1b8d2:	2a04      	cmp	r2, #4
   1b8d4:	d019      	beq.n	1b90a <interface_socket_getopt+0x56>
   1b8d6:	f1a2 0114 	sub.w	r1, r2, #20
   1b8da:	2901      	cmp	r1, #1
   1b8dc:	d82a      	bhi.n	1b934 <interface_socket_getopt+0x80>
   1b8de:	6829      	ldr	r1, [r5, #0]
   1b8e0:	2908      	cmp	r1, #8
   1b8e2:	d11b      	bne.n	1b91c <interface_socket_getopt+0x68>
   1b8e4:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
   1b8e8:	2a14      	cmp	r2, #20
   1b8ea:	bf18      	it	ne
   1b8ec:	4601      	movne	r1, r0
   1b8ee:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1b8f2:	4a14      	ldr	r2, [pc, #80]	; (1b944 <interface_socket_getopt+0x90>)
   1b8f4:	2000      	movs	r0, #0
   1b8f6:	fba2 5201 	umull	r5, r2, r2, r1
   1b8fa:	0992      	lsrs	r2, r2, #6
   1b8fc:	fb04 1112 	mls	r1, r4, r2, r1
   1b900:	fb04 f101 	mul.w	r1, r4, r1
   1b904:	e9c3 2100 	strd	r2, r1, [r3]
   1b908:	bd70      	pop	{r4, r5, r6, pc}
   1b90a:	682a      	ldr	r2, [r5, #0]
   1b90c:	2a04      	cmp	r2, #4
   1b90e:	d105      	bne.n	1b91c <interface_socket_getopt+0x68>
   1b910:	2200      	movs	r2, #0
   1b912:	6861      	ldr	r1, [r4, #4]
   1b914:	4610      	mov	r0, r2
   1b916:	6019      	str	r1, [r3, #0]
   1b918:	6062      	str	r2, [r4, #4]
   1b91a:	bd70      	pop	{r4, r5, r6, pc}
   1b91c:	2016      	movs	r0, #22
   1b91e:	f7f5 fdd3 	bl	114c8 <bsd_os_errno_set>
   1b922:	f04f 30ff 	mov.w	r0, #4294967295
   1b926:	bd70      	pop	{r4, r5, r6, pc}
   1b928:	2009      	movs	r0, #9
   1b92a:	f7f5 fdcd 	bl	114c8 <bsd_os_errno_set>
   1b92e:	f04f 30ff 	mov.w	r0, #4294967295
   1b932:	bd70      	pop	{r4, r5, r6, pc}
   1b934:	202a      	movs	r0, #42	; 0x2a
   1b936:	f7f5 fdc7 	bl	114c8 <bsd_os_errno_set>
   1b93a:	f04f 30ff 	mov.w	r0, #4294967295
   1b93e:	bd70      	pop	{r4, r5, r6, pc}
   1b940:	20024328 	.word	0x20024328
   1b944:	10624dd3 	.word	0x10624dd3

0001b948 <interface_socket_fcntl>:
   1b948:	2808      	cmp	r0, #8
   1b94a:	b510      	push	{r4, lr}
   1b94c:	d826      	bhi.n	1b99c <interface_socket_fcntl+0x54>
   1b94e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1b952:	4c1b      	ldr	r4, [pc, #108]	; (1b9c0 <interface_socket_fcntl+0x78>)
   1b954:	00c3      	lsls	r3, r0, #3
   1b956:	58e0      	ldr	r0, [r4, r3]
   1b958:	b300      	cbz	r0, 1b99c <interface_socket_fcntl+0x54>
   1b95a:	2901      	cmp	r1, #1
   1b95c:	d005      	beq.n	1b96a <interface_socket_fcntl+0x22>
   1b95e:	2902      	cmp	r1, #2
   1b960:	d122      	bne.n	1b9a8 <interface_socket_fcntl+0x60>
   1b962:	58e0      	ldr	r0, [r4, r3]
   1b964:	f3c0 7000 	ubfx	r0, r0, #28, #1
   1b968:	bd10      	pop	{r4, pc}
   1b96a:	07d2      	lsls	r2, r2, #31
   1b96c:	d410      	bmi.n	1b990 <interface_socket_fcntl+0x48>
   1b96e:	58e0      	ldr	r0, [r4, r3]
   1b970:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
   1b974:	d11e      	bne.n	1b9b4 <interface_socket_fcntl+0x6c>
   1b976:	58e2      	ldr	r2, [r4, r3]
   1b978:	b292      	uxth	r2, r2
   1b97a:	2a0a      	cmp	r2, #10
   1b97c:	d01a      	beq.n	1b9b4 <interface_socket_fcntl+0x6c>
   1b97e:	58e2      	ldr	r2, [r4, r3]
   1b980:	b292      	uxth	r2, r2
   1b982:	2a0b      	cmp	r2, #11
   1b984:	d016      	beq.n	1b9b4 <interface_socket_fcntl+0x6c>
   1b986:	58e2      	ldr	r2, [r4, r3]
   1b988:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   1b98c:	50e2      	str	r2, [r4, r3]
   1b98e:	bd10      	pop	{r4, pc}
   1b990:	58e2      	ldr	r2, [r4, r3]
   1b992:	2000      	movs	r0, #0
   1b994:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   1b998:	50e2      	str	r2, [r4, r3]
   1b99a:	bd10      	pop	{r4, pc}
   1b99c:	2009      	movs	r0, #9
   1b99e:	f7f5 fd93 	bl	114c8 <bsd_os_errno_set>
   1b9a2:	f04f 30ff 	mov.w	r0, #4294967295
   1b9a6:	bd10      	pop	{r4, pc}
   1b9a8:	2016      	movs	r0, #22
   1b9aa:	f7f5 fd8d 	bl	114c8 <bsd_os_errno_set>
   1b9ae:	f04f 30ff 	mov.w	r0, #4294967295
   1b9b2:	bd10      	pop	{r4, pc}
   1b9b4:	2023      	movs	r0, #35	; 0x23
   1b9b6:	f7f5 fd87 	bl	114c8 <bsd_os_errno_set>
   1b9ba:	f04f 30ff 	mov.w	r0, #4294967295
   1b9be:	bd10      	pop	{r4, pc}
   1b9c0:	20024328 	.word	0x20024328

0001b9c4 <at_client_evt_handler>:
   1b9c4:	b120      	cbz	r0, 1b9d0 <at_client_evt_handler+0xc>
   1b9c6:	f850 1b08 	ldr.w	r1, [r0], #8
   1b9ca:	0c09      	lsrs	r1, r1, #16
   1b9cc:	f7fc bf10 	b.w	187f0 <rpc_at_event_handler>
   1b9d0:	4770      	bx	lr
   1b9d2:	bf00      	nop

0001b9d4 <rpc_at_client_init>:
   1b9d4:	4801      	ldr	r0, [pc, #4]	; (1b9dc <rpc_at_client_init+0x8>)
   1b9d6:	f7fb bd01 	b.w	173dc <rpc_client_register>
   1b9da:	bf00      	nop
   1b9dc:	00021090 	.word	0x00021090

0001b9e0 <rpc_at_client_request_alloc>:
   1b9e0:	b180      	cbz	r0, 1ba04 <rpc_at_client_request_alloc+0x24>
   1b9e2:	2300      	movs	r3, #0
   1b9e4:	b510      	push	{r4, lr}
   1b9e6:	b082      	sub	sp, #8
   1b9e8:	aa02      	add	r2, sp, #8
   1b9ea:	4604      	mov	r4, r0
   1b9ec:	f842 3d04 	str.w	r3, [r2, #-4]!
   1b9f0:	2003      	movs	r0, #3
   1b9f2:	f7fb fd6d 	bl	174d0 <rpc_message_alloc>
   1b9f6:	b918      	cbnz	r0, 1ba00 <rpc_at_client_request_alloc+0x20>
   1b9f8:	9b01      	ldr	r3, [sp, #4]
   1b9fa:	b10b      	cbz	r3, 1ba00 <rpc_at_client_request_alloc+0x20>
   1b9fc:	3308      	adds	r3, #8
   1b9fe:	6023      	str	r3, [r4, #0]
   1ba00:	b002      	add	sp, #8
   1ba02:	bd10      	pop	{r4, pc}
   1ba04:	200e      	movs	r0, #14
   1ba06:	4770      	bx	lr

0001ba08 <rpc_at_client_request_send>:
   1ba08:	b150      	cbz	r0, 1ba20 <rpc_at_client_request_send+0x18>
   1ba0a:	4603      	mov	r3, r0
   1ba0c:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1ba10:	2003      	movs	r0, #3
   1ba12:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1ba16:	f843 1d08 	str.w	r1, [r3, #-8]!
   1ba1a:	4619      	mov	r1, r3
   1ba1c:	f7fb bd48 	b.w	174b0 <rpc_message_send>
   1ba20:	200e      	movs	r0, #14
   1ba22:	4770      	bx	lr

0001ba24 <rpc_at_client_message_free>:
   1ba24:	b120      	cbz	r0, 1ba30 <rpc_at_client_message_free+0xc>
   1ba26:	f1a0 0108 	sub.w	r1, r0, #8
   1ba2a:	2003      	movs	r0, #3
   1ba2c:	f7fb bd7c 	b.w	17528 <rpc_message_free>
   1ba30:	200e      	movs	r0, #14
   1ba32:	4770      	bx	lr

0001ba34 <rpc_at_client_data_free>:
   1ba34:	b118      	cbz	r0, 1ba3e <rpc_at_client_data_free+0xa>
   1ba36:	4601      	mov	r1, r0
   1ba38:	2003      	movs	r0, #3
   1ba3a:	f7fb bd81 	b.w	17540 <rpc_message_data_free>
   1ba3e:	200e      	movs	r0, #14
   1ba40:	4770      	bx	lr
   1ba42:	bf00      	nop

0001ba44 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   1ba44:	4a07      	ldr	r2, [pc, #28]	; (1ba64 <SystemInit+0x20>)
   1ba46:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   1ba4a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   1ba4e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   1ba52:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1ba56:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   1ba5a:	4b03      	ldr	r3, [pc, #12]	; (1ba68 <SystemInit+0x24>)
   1ba5c:	4a03      	ldr	r2, [pc, #12]	; (1ba6c <SystemInit+0x28>)
   1ba5e:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   1ba60:	4770      	bx	lr
   1ba62:	bf00      	nop
   1ba64:	e000ed00 	.word	0xe000ed00
   1ba68:	20020068 	.word	0x20020068
   1ba6c:	03d09000 	.word	0x03d09000

0001ba70 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   1ba70:	4b04      	ldr	r3, [pc, #16]	; (1ba84 <nrfx_clock_init+0x14>)
   1ba72:	791a      	ldrb	r2, [r3, #4]
   1ba74:	b922      	cbnz	r2, 1ba80 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   1ba76:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   1ba78:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   1ba7a:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   1ba7c:	4802      	ldr	r0, [pc, #8]	; (1ba88 <nrfx_clock_init+0x18>)
   1ba7e:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   1ba80:	4802      	ldr	r0, [pc, #8]	; (1ba8c <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1ba82:	4770      	bx	lr
   1ba84:	200210ac 	.word	0x200210ac
   1ba88:	0bad0000 	.word	0x0bad0000
   1ba8c:	0bad000c 	.word	0x0bad000c

0001ba90 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   1ba90:	b110      	cbz	r0, 1ba98 <nrfx_clock_start+0x8>
   1ba92:	2801      	cmp	r0, #1
   1ba94:	d01e      	beq.n	1bad4 <nrfx_clock_start+0x44>
   1ba96:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1ba98:	4b13      	ldr	r3, [pc, #76]	; (1bae8 <nrfx_clock_start+0x58>)
   1ba9a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1ba9e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   1baa2:	f411 3f80 	tst.w	r1, #65536	; 0x10000
   1baa6:	4619      	mov	r1, r3
   1baa8:	d010      	beq.n	1bacc <nrfx_clock_start+0x3c>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   1baaa:	f002 0203 	and.w	r2, r2, #3
   1baae:	2a02      	cmp	r2, #2
   1bab0:	d10c      	bne.n	1bacc <nrfx_clock_start+0x3c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1bab2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bab6:	2200      	movs	r2, #0
   1bab8:	4b0c      	ldr	r3, [pc, #48]	; (1baec <nrfx_clock_start+0x5c>)
   1baba:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
   1babc:	2202      	movs	r2, #2
   1babe:	681b      	ldr	r3, [r3, #0]
   1bac0:	4b09      	ldr	r3, [pc, #36]	; (1bae8 <nrfx_clock_start+0x58>)
   1bac2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bac6:	2201      	movs	r2, #1
   1bac8:	609a      	str	r2, [r3, #8]
}
   1baca:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   1bacc:	2301      	movs	r3, #1
   1bace:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
   1bad2:	e7f0      	b.n	1bab6 <nrfx_clock_start+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bad4:	2200      	movs	r2, #0
   1bad6:	4b06      	ldr	r3, [pc, #24]	; (1baf0 <nrfx_clock_start+0x60>)
   1bad8:	601a      	str	r2, [r3, #0]
   1bada:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1badc:	4b02      	ldr	r3, [pc, #8]	; (1bae8 <nrfx_clock_start+0x58>)
   1bade:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bae2:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   1bae4:	4770      	bx	lr
   1bae6:	bf00      	nop
   1bae8:	40005000 	.word	0x40005000
   1baec:	40005104 	.word	0x40005104
   1baf0:	40005100 	.word	0x40005100

0001baf4 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1baf4:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   1baf6:	b110      	cbz	r0, 1bafe <nrfx_clock_stop+0xa>
   1baf8:	2801      	cmp	r0, #1
   1bafa:	d016      	beq.n	1bb2a <nrfx_clock_stop+0x36>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   1bafc:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   1bafe:	2202      	movs	r2, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bb00:	2101      	movs	r1, #1
   1bb02:	f242 7510 	movw	r5, #10000	; 0x2710
    p_reg->INTENCLR = mask;
   1bb06:	4c16      	ldr	r4, [pc, #88]	; (1bb60 <nrfx_clock_stop+0x6c>)
   1bb08:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bb0c:	4a15      	ldr	r2, [pc, #84]	; (1bb64 <nrfx_clock_stop+0x70>)
   1bb0e:	6010      	str	r0, [r2, #0]
   1bb10:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bb12:	4a15      	ldr	r2, [pc, #84]	; (1bb68 <nrfx_clock_stop+0x74>)
   1bb14:	6011      	str	r1, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1bb16:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   1bb1a:	03db      	lsls	r3, r3, #15
   1bb1c:	d5ee      	bpl.n	1bafc <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   1bb1e:	2001      	movs	r0, #1
   1bb20:	f004 f9bf 	bl	1fea2 <nrfx_busy_wait>
   1bb24:	3d01      	subs	r5, #1
   1bb26:	d1f6      	bne.n	1bb16 <nrfx_clock_stop+0x22>
   1bb28:	e7e8      	b.n	1bafc <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bb2a:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bb2c:	f242 7510 	movw	r5, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bb30:	4b0e      	ldr	r3, [pc, #56]	; (1bb6c <nrfx_clock_stop+0x78>)
    p_reg->INTENCLR = mask;
   1bb32:	4c0b      	ldr	r4, [pc, #44]	; (1bb60 <nrfx_clock_stop+0x6c>)
   1bb34:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bb38:	601a      	str	r2, [r3, #0]
   1bb3a:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bb3c:	4b0c      	ldr	r3, [pc, #48]	; (1bb70 <nrfx_clock_stop+0x7c>)
   1bb3e:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1bb40:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1bb44:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1bb48:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1bb4c:	03d2      	lsls	r2, r2, #15
   1bb4e:	d5d5      	bpl.n	1bafc <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   1bb50:	2b00      	cmp	r3, #0
   1bb52:	d0d3      	beq.n	1bafc <nrfx_clock_stop+0x8>
   1bb54:	2001      	movs	r0, #1
   1bb56:	f004 f9a4 	bl	1fea2 <nrfx_busy_wait>
   1bb5a:	3d01      	subs	r5, #1
   1bb5c:	d1f0      	bne.n	1bb40 <nrfx_clock_stop+0x4c>
   1bb5e:	e7cd      	b.n	1bafc <nrfx_clock_stop+0x8>
   1bb60:	40005000 	.word	0x40005000
   1bb64:	40005104 	.word	0x40005104
   1bb68:	4000500c 	.word	0x4000500c
   1bb6c:	40005100 	.word	0x40005100
   1bb70:	40005004 	.word	0x40005004

0001bb74 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1bb74:	4b15      	ldr	r3, [pc, #84]	; (1bbcc <nrfx_power_clock_irq_handler+0x58>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   1bb76:	b510      	push	{r4, lr}
   1bb78:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1bb7a:	b14a      	cbz	r2, 1bb90 <nrfx_power_clock_irq_handler+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bb7c:	2000      	movs	r0, #0
    p_reg->INTENCLR = mask;
   1bb7e:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bb80:	6018      	str	r0, [r3, #0]
   1bb82:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   1bb84:	4b12      	ldr	r3, [pc, #72]	; (1bbd0 <nrfx_power_clock_irq_handler+0x5c>)
   1bb86:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1bb8a:	4b12      	ldr	r3, [pc, #72]	; (1bbd4 <nrfx_power_clock_irq_handler+0x60>)
   1bb8c:	681b      	ldr	r3, [r3, #0]
   1bb8e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1bb90:	4b11      	ldr	r3, [pc, #68]	; (1bbd8 <nrfx_power_clock_irq_handler+0x64>)
   1bb92:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1bb94:	b182      	cbz	r2, 1bbb8 <nrfx_power_clock_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bb96:	2200      	movs	r2, #0
   1bb98:	601a      	str	r2, [r3, #0]
   1bb9a:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1bb9c:	4b0c      	ldr	r3, [pc, #48]	; (1bbd0 <nrfx_power_clock_irq_handler+0x5c>)
   1bb9e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1bba2:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1bba6:	f002 0203 	and.w	r2, r2, #3
   1bbaa:	2a01      	cmp	r2, #1
   1bbac:	f04f 0102 	mov.w	r1, #2
   1bbb0:	d103      	bne.n	1bbba <nrfx_power_clock_irq_handler+0x46>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1bbb2:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bbb6:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   1bbb8:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   1bbba:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1bbbe:	4b05      	ldr	r3, [pc, #20]	; (1bbd4 <nrfx_power_clock_irq_handler+0x60>)
   1bbc0:	2001      	movs	r0, #1
}
   1bbc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1bbc6:	681b      	ldr	r3, [r3, #0]
   1bbc8:	4718      	bx	r3
   1bbca:	bf00      	nop
   1bbcc:	40005100 	.word	0x40005100
   1bbd0:	40005000 	.word	0x40005000
   1bbd4:	200210ac 	.word	0x200210ac
   1bbd8:	40005104 	.word	0x40005104

0001bbdc <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   1bbdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1bbde:	4b10      	ldr	r3, [pc, #64]	; (1bc20 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   1bbe0:	4f10      	ldr	r7, [pc, #64]	; (1bc24 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1bbe2:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1bbe6:	3001      	adds	r0, #1
   1bbe8:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1bbec:	42ae      	cmp	r6, r5
   1bbee:	d800      	bhi.n	1bbf2 <z_sys_init_run_level+0x16>
		}
	}
}
   1bbf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   1bbf2:	e9d5 3400 	ldrd	r3, r4, [r5]
   1bbf6:	4620      	mov	r0, r4
   1bbf8:	4798      	blx	r3
   1bbfa:	b170      	cbz	r0, 1bc1a <z_sys_init_run_level+0x3e>
   1bbfc:	b16c      	cbz	r4, 1bc1a <z_sys_init_run_level+0x3e>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
   1bbfe:	2301      	movs	r3, #1
				(dev - __device_start));
   1bc00:	1be4      	subs	r4, r4, r7
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1bc02:	4a09      	ldr	r2, [pc, #36]	; (1bc28 <z_sys_init_run_level+0x4c>)
   1bc04:	1124      	asrs	r4, r4, #4
   1bc06:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   1bc08:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1bc0c:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
   1bc10:	fa03 f404 	lsl.w	r4, r3, r4
   1bc14:	4304      	orrs	r4, r0
   1bc16:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1bc1a:	3508      	adds	r5, #8
   1bc1c:	e7e6      	b.n	1bbec <z_sys_init_run_level+0x10>
   1bc1e:	bf00      	nop
   1bc20:	000210a0 	.word	0x000210a0
   1bc24:	2002007c 	.word	0x2002007c
   1bc28:	200200ec 	.word	0x200200ec

0001bc2c <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   1bc2c:	4b08      	ldr	r3, [pc, #32]	; (1bc50 <z_device_ready+0x24>)
   1bc2e:	1ac0      	subs	r0, r0, r3
   1bc30:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1bc32:	4b08      	ldr	r3, [pc, #32]	; (1bc54 <z_device_ready+0x28>)
   1bc34:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   1bc36:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   1bc3a:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1bc3c:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
   1bc40:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   1bc44:	4210      	tst	r0, r2
}
   1bc46:	bf0c      	ite	eq
   1bc48:	4618      	moveq	r0, r3
   1bc4a:	2000      	movne	r0, #0
   1bc4c:	4770      	bx	lr
   1bc4e:	bf00      	nop
   1bc50:	2002007c 	.word	0x2002007c
   1bc54:	200200ec 	.word	0x200200ec

0001bc58 <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
   1bc58:	4911      	ldr	r1, [pc, #68]	; (1bca0 <z_impl_device_get_binding+0x48>)
{
   1bc5a:	b570      	push	{r4, r5, r6, lr}
   1bc5c:	4605      	mov	r5, r0
   1bc5e:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
   1bc60:	4c10      	ldr	r4, [pc, #64]	; (1bca4 <z_impl_device_get_binding+0x4c>)
   1bc62:	428c      	cmp	r4, r1
   1bc64:	d104      	bne.n	1bc70 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
   1bc66:	4c0f      	ldr	r4, [pc, #60]	; (1bca4 <z_impl_device_get_binding+0x4c>)
   1bc68:	42b4      	cmp	r4, r6
   1bc6a:	d10a      	bne.n	1bc82 <z_impl_device_get_binding+0x2a>
	return NULL;
   1bc6c:	2400      	movs	r4, #0
   1bc6e:	e014      	b.n	1bc9a <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
   1bc70:	4620      	mov	r0, r4
   1bc72:	f7ff ffdb 	bl	1bc2c <z_device_ready>
   1bc76:	b110      	cbz	r0, 1bc7e <z_impl_device_get_binding+0x26>
   1bc78:	6823      	ldr	r3, [r4, #0]
   1bc7a:	42ab      	cmp	r3, r5
   1bc7c:	d00d      	beq.n	1bc9a <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
   1bc7e:	3410      	adds	r4, #16
   1bc80:	e7ef      	b.n	1bc62 <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1bc82:	4620      	mov	r0, r4
   1bc84:	f7ff ffd2 	bl	1bc2c <z_device_ready>
   1bc88:	b908      	cbnz	r0, 1bc8e <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
   1bc8a:	3410      	adds	r4, #16
   1bc8c:	e7ec      	b.n	1bc68 <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1bc8e:	4628      	mov	r0, r5
   1bc90:	6821      	ldr	r1, [r4, #0]
   1bc92:	f002 fcb3 	bl	1e5fc <strcmp>
   1bc96:	2800      	cmp	r0, #0
   1bc98:	d1f7      	bne.n	1bc8a <z_impl_device_get_binding+0x32>
}
   1bc9a:	4620      	mov	r0, r4
   1bc9c:	bd70      	pop	{r4, r5, r6, pc}
   1bc9e:	bf00      	nop
   1bca0:	200200ec 	.word	0x200200ec
   1bca4:	2002007c 	.word	0x2002007c

0001bca8 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1bca8:	4b01      	ldr	r3, [pc, #4]	; (1bcb0 <z_impl_z_errno+0x8>)
   1bcaa:	6898      	ldr	r0, [r3, #8]
}
   1bcac:	3064      	adds	r0, #100	; 0x64
   1bcae:	4770      	bx	lr
   1bcb0:	200210b4 	.word	0x200210b4

0001bcb4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1bcb4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1bcb8:	4605      	mov	r5, r0
   1bcba:	460f      	mov	r7, r1
	__asm__ volatile(
   1bcbc:	f04f 0320 	mov.w	r3, #32
   1bcc0:	f3ef 8811 	mrs	r8, BASEPRI
   1bcc4:	f383 8811 	msr	BASEPRI, r3
   1bcc8:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1bccc:	f000 febe 	bl	1ca4c <z_impl_k_current_get>
   1bcd0:	4c22      	ldr	r4, [pc, #136]	; (1bd5c <z_fatal_error+0xa8>)
   1bcd2:	4b23      	ldr	r3, [pc, #140]	; (1bd60 <z_fatal_error+0xac>)
   1bcd4:	2d04      	cmp	r5, #4
   1bcd6:	eba4 0403 	sub.w	r4, r4, r3
   1bcda:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   1bcde:	bf98      	it	ls
   1bce0:	4a20      	ldrls	r2, [pc, #128]	; (1bd64 <z_fatal_error+0xb0>)
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1bce2:	ea4f 1484 	mov.w	r4, r4, lsl #6
   1bce6:	f044 0301 	orr.w	r3, r4, #1
   1bcea:	4606      	mov	r6, r0
	switch (reason) {
   1bcec:	bf94      	ite	ls
   1bcee:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1bcf2:	4a1d      	ldrhi	r2, [pc, #116]	; (1bd68 <z_fatal_error+0xb4>)
   1bcf4:	f8ad 3000 	strh.w	r3, [sp]
   1bcf8:	4629      	mov	r1, r5
   1bcfa:	2300      	movs	r3, #0
   1bcfc:	481b      	ldr	r0, [pc, #108]	; (1bd6c <z_fatal_error+0xb8>)
   1bcfe:	f001 ff16 	bl	1db2e <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1bd02:	b147      	cbz	r7, 1bd16 <z_fatal_error+0x62>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1bd04:	69fb      	ldr	r3, [r7, #28]
   1bd06:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1bd0a:	b123      	cbz	r3, 1bd16 <z_fatal_error+0x62>
		LOG_ERR("Fault during interrupt handling\n");
   1bd0c:	4818      	ldr	r0, [pc, #96]	; (1bd70 <z_fatal_error+0xbc>)
   1bd0e:	f044 0101 	orr.w	r1, r4, #1
   1bd12:	f001 fecd 	bl	1dab0 <log_0>
	const char *thread_name = k_thread_name_get(thread);
   1bd16:	4630      	mov	r0, r6
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1bd18:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = k_thread_name_get(thread);
   1bd1c:	f004 fb03 	bl	20326 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   1bd20:	b1d0      	cbz	r0, 1bd58 <z_fatal_error+0xa4>
   1bd22:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   1bd24:	4b13      	ldr	r3, [pc, #76]	; (1bd74 <z_fatal_error+0xc0>)
   1bd26:	2a00      	cmp	r2, #0
   1bd28:	bf08      	it	eq
   1bd2a:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   1bd2c:	f7f2 fe54 	bl	e9d8 <log_strdup>
   1bd30:	4623      	mov	r3, r4
   1bd32:	4602      	mov	r2, r0
   1bd34:	4631      	mov	r1, r6
   1bd36:	4810      	ldr	r0, [pc, #64]	; (1bd78 <z_fatal_error+0xc4>)
   1bd38:	f001 fee0 	bl	1dafc <log_2>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1bd3c:	4639      	mov	r1, r7
   1bd3e:	4628      	mov	r0, r5
   1bd40:	f7f7 fc0c 	bl	1355c <k_sys_fatal_error_handler>
	__asm__ volatile(
   1bd44:	f388 8811 	msr	BASEPRI, r8
   1bd48:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1bd4c:	4630      	mov	r0, r6
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   1bd4e:	b002      	add	sp, #8
   1bd50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1bd54:	f7f4 bac0 	b.w	102d8 <z_impl_k_thread_abort>
		thread_name = "unknown";
   1bd58:	4806      	ldr	r0, [pc, #24]	; (1bd74 <z_fatal_error+0xc0>)
   1bd5a:	e7e7      	b.n	1bd2c <z_fatal_error+0x78>
   1bd5c:	00020abc 	.word	0x00020abc
   1bd60:	00020a64 	.word	0x00020a64
   1bd64:	000210b8 	.word	0x000210b8
   1bd68:	000229ac 	.word	0x000229ac
   1bd6c:	000229c2 	.word	0x000229c2
   1bd70:	000229ea 	.word	0x000229ea
   1bd74:	000229ba 	.word	0x000229ba
   1bd78:	00022a0b 	.word	0x00022a0b

0001bd7c <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   1bd7c:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   1bd7e:	4d0b      	ldr	r5, [pc, #44]	; (1bdac <idle+0x30>)
	__asm__ volatile(
   1bd80:	f04f 0220 	mov.w	r2, #32
   1bd84:	f3ef 8311 	mrs	r3, BASEPRI
   1bd88:	f382 8811 	msr	BASEPRI, r2
   1bd8c:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   1bd90:	f004 fb45 	bl	2041e <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1bd94:	2101      	movs	r1, #1
	int32_t ticks = z_get_next_timeout_expiry();
   1bd96:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1bd98:	2802      	cmp	r0, #2
   1bd9a:	bfd8      	it	le
   1bd9c:	4608      	movle	r0, r1
   1bd9e:	f004 fb4e 	bl	2043e <z_set_timeout_expiry>
	_kernel.idle = ticks;
   1bda2:	622c      	str	r4, [r5, #32]
	arch_cpu_idle();
   1bda4:	f7f3 ff50 	bl	fc48 <arch_cpu_idle>
}
   1bda8:	e7ea      	b.n	1bd80 <idle+0x4>
   1bdaa:	bf00      	nop
   1bdac:	200210b4 	.word	0x200210b4

0001bdb0 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1bdb0:	4802      	ldr	r0, [pc, #8]	; (1bdbc <z_bss_zero+0xc>)
   1bdb2:	4a03      	ldr	r2, [pc, #12]	; (1bdc0 <z_bss_zero+0x10>)
   1bdb4:	2100      	movs	r1, #0
   1bdb6:	1a12      	subs	r2, r2, r0
   1bdb8:	f002 bc76 	b.w	1e6a8 <memset>
   1bdbc:	20020258 	.word	0x20020258
   1bdc0:	20024490 	.word	0x20024490

0001bdc4 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1bdc4:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   1bdc6:	4806      	ldr	r0, [pc, #24]	; (1bde0 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1bdc8:	4a06      	ldr	r2, [pc, #24]	; (1bde4 <z_data_copy+0x20>)
   1bdca:	4907      	ldr	r1, [pc, #28]	; (1bde8 <z_data_copy+0x24>)
   1bdcc:	1a12      	subs	r2, r2, r0
   1bdce:	f002 fc40 	bl	1e652 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1bdd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1bdd6:	4a05      	ldr	r2, [pc, #20]	; (1bdec <z_data_copy+0x28>)
   1bdd8:	4905      	ldr	r1, [pc, #20]	; (1bdf0 <z_data_copy+0x2c>)
   1bdda:	4806      	ldr	r0, [pc, #24]	; (1bdf4 <z_data_copy+0x30>)
   1bddc:	f002 bc39 	b.w	1e652 <memcpy>
   1bde0:	20020000 	.word	0x20020000
   1bde4:	20020258 	.word	0x20020258
   1bde8:	00022acc 	.word	0x00022acc
   1bdec:	00000000 	.word	0x00000000
   1bdf0:	00022acc 	.word	0x00022acc
   1bdf4:	20020000 	.word	0x20020000

0001bdf8 <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   1bdf8:	2201      	movs	r2, #1
{
   1bdfa:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   1bdfc:	4b0b      	ldr	r3, [pc, #44]	; (1be2c <bg_thread_main+0x34>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1bdfe:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1be00:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1be02:	f7ff feeb 	bl	1bbdc <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1be06:	4a0a      	ldr	r2, [pc, #40]	; (1be30 <bg_thread_main+0x38>)
   1be08:	490a      	ldr	r1, [pc, #40]	; (1be34 <bg_thread_main+0x3c>)
   1be0a:	480b      	ldr	r0, [pc, #44]	; (1be38 <bg_thread_main+0x40>)
   1be0c:	f001 fa72 	bl	1d2f4 <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1be10:	2003      	movs	r0, #3
   1be12:	f7ff fee3 	bl	1bbdc <z_sys_init_run_level>

	z_init_static_threads();
   1be16:	f000 fee3 	bl	1cbe0 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1be1a:	f7f1 fbc3 	bl	d5a4 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1be1e:	4a07      	ldr	r2, [pc, #28]	; (1be3c <bg_thread_main+0x44>)
   1be20:	7b13      	ldrb	r3, [r2, #12]
   1be22:	f023 0301 	bic.w	r3, r3, #1
   1be26:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1be28:	bd08      	pop	{r3, pc}
   1be2a:	bf00      	nop
   1be2c:	20024327 	.word	0x20024327
   1be30:	000229ab 	.word	0x000229ab
   1be34:	00022a6d 	.word	0x00022a6d
   1be38:	00022a90 	.word	0x00022a90
   1be3c:	200205f8 	.word	0x200205f8

0001be40 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1be40:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   1be44:	b0b9      	sub	sp, #228	; 0xe4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1be46:	f7f2 fd2b 	bl	e8a0 <log_core_init>
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   1be4a:	4b34      	ldr	r3, [pc, #208]	; (1bf1c <z_cstart+0xdc>)
	uint32_t msp =
   1be4c:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1be50:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   1be54:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1be58:	2400      	movs	r4, #0
   1be5a:	23e0      	movs	r3, #224	; 0xe0
   1be5c:	4d30      	ldr	r5, [pc, #192]	; (1bf20 <z_cstart+0xe0>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1be5e:	f04f 0b01 	mov.w	fp, #1
   1be62:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1be66:	77ec      	strb	r4, [r5, #31]
   1be68:	762c      	strb	r4, [r5, #24]
   1be6a:	766c      	strb	r4, [r5, #25]
   1be6c:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1be6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   1be70:	4e2c      	ldr	r6, [pc, #176]	; (1bf24 <z_cstart+0xe4>)
   1be72:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1be76:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1be78:	f7f4 f9f6 	bl	10268 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1be7c:	f7f3 fede 	bl	fc3c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1be80:	f04f 33ff 	mov.w	r3, #4294967295
   1be84:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1be86:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   1be88:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1be8c:	4d26      	ldr	r5, [pc, #152]	; (1bf28 <z_cstart+0xe8>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   1be8e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1be92:	ab06      	add	r3, sp, #24
   1be94:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1be96:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   1be98:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
   1be9c:	f7ff fe9e 	bl	1bbdc <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1bea0:	2001      	movs	r0, #1
   1bea2:	f7ff fe9b 	bl	1bbdc <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1bea6:	f8df a098 	ldr.w	sl, [pc, #152]	; 1bf40 <z_cstart+0x100>
	z_sched_init();
   1beaa:	f000 fd57 	bl	1c95c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1beae:	4b1f      	ldr	r3, [pc, #124]	; (1bf2c <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   1beb0:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1beb2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1beb6:	491e      	ldr	r1, [pc, #120]	; (1bf30 <z_cstart+0xf0>)
   1beb8:	9305      	str	r3, [sp, #20]
   1beba:	4630      	mov	r0, r6
   1bebc:	4653      	mov	r3, sl
   1bebe:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   1bec2:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1bec6:	9400      	str	r4, [sp, #0]
   1bec8:	f000 fe2e 	bl	1cb28 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1becc:	7b73      	ldrb	r3, [r6, #13]
   1bece:	4680      	mov	r8, r0
   1bed0:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   1bed4:	4630      	mov	r0, r6
   1bed6:	7373      	strb	r3, [r6, #13]
   1bed8:	f004 f97d 	bl	201d6 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   1bedc:	230f      	movs	r3, #15
   1bede:	4f15      	ldr	r7, [pc, #84]	; (1bf34 <z_cstart+0xf4>)
   1bee0:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1bee4:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1bee8:	4913      	ldr	r1, [pc, #76]	; (1bf38 <z_cstart+0xf8>)
   1beea:	4b14      	ldr	r3, [pc, #80]	; (1bf3c <z_cstart+0xfc>)
   1beec:	4638      	mov	r0, r7
   1beee:	e9cd b404 	strd	fp, r4, [sp, #16]
   1bef2:	e9cd 4400 	strd	r4, r4, [sp]
   1bef6:	f000 fe17 	bl	1cb28 <z_setup_new_thread>
   1befa:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1befc:	4652      	mov	r2, sl
   1befe:	f023 0304 	bic.w	r3, r3, #4
   1bf02:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1bf04:	f105 0318 	add.w	r3, r5, #24
   1bf08:	4641      	mov	r1, r8
   1bf0a:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
   1bf0c:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1bf10:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   1bf12:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   1bf14:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1bf18:	f7f3 fe6a 	bl	fbf0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1bf1c:	200260d0 	.word	0x200260d0
   1bf20:	e000ed00 	.word	0xe000ed00
   1bf24:	200205f8 	.word	0x200205f8
   1bf28:	200210b4 	.word	0x200210b4
   1bf2c:	00022ab7 	.word	0x00022ab7
   1bf30:	20024f90 	.word	0x20024f90
   1bf34:	20020530 	.word	0x20020530
   1bf38:	20025f90 	.word	0x20025f90
   1bf3c:	0001bd7d 	.word	0x0001bd7d
   1bf40:	0001bdf9 	.word	0x0001bdf9

0001bf44 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   1bf44:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1bf46:	4c06      	ldr	r4, [pc, #24]	; (1bf60 <statics_init+0x1c>)
   1bf48:	4d06      	ldr	r5, [pc, #24]	; (1bf64 <statics_init+0x20>)
   1bf4a:	42ac      	cmp	r4, r5
   1bf4c:	d301      	bcc.n	1bf52 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   1bf4e:	2000      	movs	r0, #0
   1bf50:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1bf52:	4620      	mov	r0, r4
   1bf54:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1bf58:	f003 ffb2 	bl	1fec0 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1bf5c:	3414      	adds	r4, #20
   1bf5e:	e7f4      	b.n	1bf4a <statics_init+0x6>
   1bf60:	20020128 	.word	0x20020128
   1bf64:	2002013c 	.word	0x2002013c

0001bf68 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1bf68:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1bf6a:	4b0e      	ldr	r3, [pc, #56]	; (1bfa4 <init_mem_slab_module+0x3c>)
   1bf6c:	4c0e      	ldr	r4, [pc, #56]	; (1bfa8 <init_mem_slab_module+0x40>)
   1bf6e:	42a3      	cmp	r3, r4
   1bf70:	d301      	bcc.n	1bf76 <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   1bf72:	2000      	movs	r0, #0
	return rc;
}
   1bf74:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1bf76:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1bf7a:	ea41 0200 	orr.w	r2, r1, r0
   1bf7e:	f012 0203 	ands.w	r2, r2, #3
   1bf82:	d10b      	bne.n	1bf9c <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1bf84:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1bf86:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1bf88:	42aa      	cmp	r2, r5
   1bf8a:	d101      	bne.n	1bf90 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1bf8c:	331c      	adds	r3, #28
   1bf8e:	e7ee      	b.n	1bf6e <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1bf90:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1bf92:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
   1bf94:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
   1bf96:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1bf98:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1bf9a:	e7f5      	b.n	1bf88 <init_mem_slab_module+0x20>
		return -EINVAL;
   1bf9c:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1bfa0:	e7e8      	b.n	1bf74 <init_mem_slab_module+0xc>
   1bfa2:	bf00      	nop
   1bfa4:	20020128 	.word	0x20020128
   1bfa8:	20020128 	.word	0x20020128

0001bfac <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1bfac:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   1bfae:	460c      	mov	r4, r1
   1bfb0:	4616      	mov	r6, r2
   1bfb2:	461f      	mov	r7, r3
   1bfb4:	f04f 0320 	mov.w	r3, #32
   1bfb8:	f3ef 8111 	mrs	r1, BASEPRI
   1bfbc:	f383 8811 	msr	BASEPRI, r3
   1bfc0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   1bfc4:	6943      	ldr	r3, [r0, #20]
   1bfc6:	b15b      	cbz	r3, 1bfe0 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   1bfc8:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1bfca:	681b      	ldr	r3, [r3, #0]
   1bfcc:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1bfce:	6983      	ldr	r3, [r0, #24]
   1bfd0:	3301      	adds	r3, #1
   1bfd2:	6183      	str	r3, [r0, #24]
		result = 0;
   1bfd4:	2000      	movs	r0, #0
	__asm__ volatile(
   1bfd6:	f381 8811 	msr	BASEPRI, r1
   1bfda:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   1bfde:	e011      	b.n	1c004 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1bfe0:	ea56 0207 	orrs.w	r2, r6, r7
   1bfe4:	d103      	bne.n	1bfee <k_mem_slab_alloc+0x42>
		result = -ENOMEM;
   1bfe6:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
   1bfea:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1bfec:	e7f3      	b.n	1bfd6 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   1bfee:	4602      	mov	r2, r0
   1bff0:	e9cd 6700 	strd	r6, r7, [sp]
   1bff4:	4804      	ldr	r0, [pc, #16]	; (1c008 <k_mem_slab_alloc+0x5c>)
   1bff6:	f000 fc2f 	bl	1c858 <z_pend_curr>
		if (result == 0) {
   1bffa:	b918      	cbnz	r0, 1c004 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   1bffc:	4b03      	ldr	r3, [pc, #12]	; (1c00c <k_mem_slab_alloc+0x60>)
   1bffe:	689b      	ldr	r3, [r3, #8]
   1c000:	695b      	ldr	r3, [r3, #20]
   1c002:	6023      	str	r3, [r4, #0]
}
   1c004:	b002      	add	sp, #8
   1c006:	bdd0      	pop	{r4, r6, r7, pc}
   1c008:	20024328 	.word	0x20024328
   1c00c:	200210b4 	.word	0x200210b4

0001c010 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1c010:	b570      	push	{r4, r5, r6, lr}
   1c012:	4604      	mov	r4, r0
   1c014:	460d      	mov	r5, r1
	__asm__ volatile(
   1c016:	f04f 0320 	mov.w	r3, #32
   1c01a:	f3ef 8611 	mrs	r6, BASEPRI
   1c01e:	f383 8811 	msr	BASEPRI, r3
   1c022:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1c026:	f004 f92e 	bl	20286 <z_unpend_first_thread>

	if (pending_thread != NULL) {
   1c02a:	b158      	cbz	r0, 1c044 <k_mem_slab_free+0x34>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1c02c:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1c02e:	682a      	ldr	r2, [r5, #0]
   1c030:	67c1      	str	r1, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1c032:	6142      	str	r2, [r0, #20]
		z_ready_thread(pending_thread);
   1c034:	f004 f8cf 	bl	201d6 <z_ready_thread>
		z_reschedule(&lock, key);
   1c038:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   1c03a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1c03e:	4808      	ldr	r0, [pc, #32]	; (1c060 <k_mem_slab_free+0x50>)
   1c040:	f000 b9f6 	b.w	1c430 <z_reschedule>
		**(char ***)mem = slab->free_list;
   1c044:	682b      	ldr	r3, [r5, #0]
   1c046:	6962      	ldr	r2, [r4, #20]
   1c048:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   1c04a:	682b      	ldr	r3, [r5, #0]
   1c04c:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   1c04e:	69a3      	ldr	r3, [r4, #24]
   1c050:	3b01      	subs	r3, #1
   1c052:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1c054:	f386 8811 	msr	BASEPRI, r6
   1c058:	f3bf 8f6f 	isb	sy
}
   1c05c:	bd70      	pop	{r4, r5, r6, pc}
   1c05e:	bf00      	nop
   1c060:	20024328 	.word	0x20024328

0001c064 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   1c064:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c068:	4604      	mov	r4, r0
   1c06a:	4616      	mov	r6, r2
   1c06c:	461f      	mov	r7, r3
   1c06e:	b085      	sub	sp, #20

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   1c070:	f100 0908 	add.w	r9, r0, #8
	__asm__ volatile(
   1c074:	f04f 0320 	mov.w	r3, #32
   1c078:	f3ef 8811 	mrs	r8, BASEPRI
   1c07c:	f383 8811 	msr	BASEPRI, r3
   1c080:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs < msgq->max_msgs) {
   1c084:	6a02      	ldr	r2, [r0, #32]
   1c086:	68c3      	ldr	r3, [r0, #12]
   1c088:	429a      	cmp	r2, r3
   1c08a:	d22b      	bcs.n	1c0e4 <z_impl_k_msgq_put+0x80>
   1c08c:	9103      	str	r1, [sp, #12]
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1c08e:	f004 f8fa 	bl	20286 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   1c092:	9903      	ldr	r1, [sp, #12]
   1c094:	4605      	mov	r5, r0
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
   1c096:	68a2      	ldr	r2, [r4, #8]
		if (pending_thread != NULL) {
   1c098:	b178      	cbz	r0, 1c0ba <z_impl_k_msgq_put+0x56>
   1c09a:	2400      	movs	r4, #0
			(void)memcpy(pending_thread->base.swap_data, data,
   1c09c:	6940      	ldr	r0, [r0, #20]
   1c09e:	f002 fad8 	bl	1e652 <memcpy>
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   1c0a2:	4628      	mov	r0, r5
   1c0a4:	67ec      	str	r4, [r5, #124]	; 0x7c
   1c0a6:	f004 f896 	bl	201d6 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   1c0aa:	4648      	mov	r0, r9
   1c0ac:	4641      	mov	r1, r8
   1c0ae:	f000 f9bf 	bl	1c430 <z_reschedule>
			return 0;
   1c0b2:	4620      	mov	r0, r4
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   1c0b4:	b005      	add	sp, #20
   1c0b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
   1c0ba:	69e0      	ldr	r0, [r4, #28]
   1c0bc:	f002 fac9 	bl	1e652 <memcpy>
		result = 0;
   1c0c0:	2000      	movs	r0, #0
			msgq->write_ptr += msgq->msg_size;
   1c0c2:	69e3      	ldr	r3, [r4, #28]
   1c0c4:	68a2      	ldr	r2, [r4, #8]
   1c0c6:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   1c0c8:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   1c0ca:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   1c0cc:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   1c0ce:	bf04      	itt	eq
   1c0d0:	6923      	ldreq	r3, [r4, #16]
   1c0d2:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   1c0d4:	6a23      	ldr	r3, [r4, #32]
   1c0d6:	3301      	adds	r3, #1
   1c0d8:	6223      	str	r3, [r4, #32]
	__asm__ volatile(
   1c0da:	f388 8811 	msr	BASEPRI, r8
   1c0de:	f3bf 8f6f 	isb	sy
	return result;
   1c0e2:	e7e7      	b.n	1c0b4 <z_impl_k_msgq_put+0x50>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1c0e4:	ea56 0307 	orrs.w	r3, r6, r7
   1c0e8:	d00a      	beq.n	1c100 <z_impl_k_msgq_put+0x9c>
		_current->base.swap_data = (void *) data;
   1c0ea:	4b07      	ldr	r3, [pc, #28]	; (1c108 <z_impl_k_msgq_put+0xa4>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1c0ec:	4602      	mov	r2, r0
		_current->base.swap_data = (void *) data;
   1c0ee:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1c0f0:	4648      	mov	r0, r9
		_current->base.swap_data = (void *) data;
   1c0f2:	6159      	str	r1, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1c0f4:	4641      	mov	r1, r8
   1c0f6:	e9cd 6700 	strd	r6, r7, [sp]
   1c0fa:	f000 fbad 	bl	1c858 <z_pend_curr>
   1c0fe:	e7d9      	b.n	1c0b4 <z_impl_k_msgq_put+0x50>
		result = -ENOMSG;
   1c100:	f06f 004f 	mvn.w	r0, #79	; 0x4f
   1c104:	e7e9      	b.n	1c0da <z_impl_k_msgq_put+0x76>
   1c106:	bf00      	nop
   1c108:	200210b4 	.word	0x200210b4

0001c10c <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   1c10c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1c110:	4604      	mov	r4, r0
   1c112:	4616      	mov	r6, r2
   1c114:	4608      	mov	r0, r1
   1c116:	461f      	mov	r7, r3

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   1c118:	f104 0908 	add.w	r9, r4, #8
	__asm__ volatile(
   1c11c:	f04f 0320 	mov.w	r3, #32
   1c120:	f3ef 8811 	mrs	r8, BASEPRI
   1c124:	f383 8811 	msr	BASEPRI, r3
   1c128:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs > 0) {
   1c12c:	6a23      	ldr	r3, [r4, #32]
   1c12e:	2b00      	cmp	r3, #0
   1c130:	d032      	beq.n	1c198 <z_impl_k_msgq_get+0x8c>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
   1c132:	68a2      	ldr	r2, [r4, #8]
   1c134:	69a1      	ldr	r1, [r4, #24]
   1c136:	f002 fa8c 	bl	1e652 <memcpy>
		msgq->read_ptr += msgq->msg_size;
   1c13a:	69a3      	ldr	r3, [r4, #24]
   1c13c:	68a2      	ldr	r2, [r4, #8]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1c13e:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   1c140:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   1c142:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   1c144:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   1c146:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   1c148:	bf04      	itt	eq
   1c14a:	6923      	ldreq	r3, [r4, #16]
   1c14c:	61a3      	streq	r3, [r4, #24]
		msgq->used_msgs--;
   1c14e:	6a23      	ldr	r3, [r4, #32]
   1c150:	3b01      	subs	r3, #1
   1c152:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1c154:	f004 f897 	bl	20286 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   1c158:	4605      	mov	r5, r0
   1c15a:	b368      	cbz	r0, 1c1b8 <z_impl_k_msgq_get+0xac>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
   1c15c:	6941      	ldr	r1, [r0, #20]
   1c15e:	68a2      	ldr	r2, [r4, #8]
   1c160:	69e0      	ldr	r0, [r4, #28]
   1c162:	f002 fa76 	bl	1e652 <memcpy>
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   1c166:	69e3      	ldr	r3, [r4, #28]
   1c168:	68a2      	ldr	r2, [r4, #8]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   1c16a:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
   1c16c:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   1c16e:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   1c170:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   1c172:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   1c174:	bf04      	itt	eq
   1c176:	6923      	ldreq	r3, [r4, #16]
   1c178:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   1c17a:	6a23      	ldr	r3, [r4, #32]
   1c17c:	3301      	adds	r3, #1
   1c17e:	6223      	str	r3, [r4, #32]
   1c180:	2400      	movs	r4, #0
   1c182:	67ec      	str	r4, [r5, #124]	; 0x7c
			z_ready_thread(pending_thread);
   1c184:	f004 f827 	bl	201d6 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   1c188:	4648      	mov	r0, r9
   1c18a:	4641      	mov	r1, r8
   1c18c:	f000 f950 	bl	1c430 <z_reschedule>
			return 0;
   1c190:	4620      	mov	r0, r4
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   1c192:	b003      	add	sp, #12
   1c194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1c198:	ea56 0307 	orrs.w	r3, r6, r7
   1c19c:	d00a      	beq.n	1c1b4 <z_impl_k_msgq_get+0xa8>
		_current->base.swap_data = data;
   1c19e:	4b09      	ldr	r3, [pc, #36]	; (1c1c4 <z_impl_k_msgq_get+0xb8>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1c1a0:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   1c1a2:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1c1a4:	4648      	mov	r0, r9
		_current->base.swap_data = data;
   1c1a6:	6159      	str	r1, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1c1a8:	4641      	mov	r1, r8
   1c1aa:	e9cd 6700 	strd	r6, r7, [sp]
   1c1ae:	f000 fb53 	bl	1c858 <z_pend_curr>
   1c1b2:	e7ee      	b.n	1c192 <z_impl_k_msgq_get+0x86>
		result = -ENOMSG;
   1c1b4:	f06f 004f 	mvn.w	r0, #79	; 0x4f
	__asm__ volatile(
   1c1b8:	f388 8811 	msr	BASEPRI, r8
   1c1bc:	f3bf 8f6f 	isb	sy
	return result;
   1c1c0:	e7e7      	b.n	1c192 <z_impl_k_msgq_get+0x86>
   1c1c2:	bf00      	nop
   1c1c4:	200210b4 	.word	0x200210b4

0001c1c8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1c1c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1c1cc:	4604      	mov	r4, r0
   1c1ce:	4616      	mov	r6, r2
   1c1d0:	461f      	mov	r7, r3
	__asm__ volatile(
   1c1d2:	f04f 0320 	mov.w	r3, #32
   1c1d6:	f3ef 8811 	mrs	r8, BASEPRI
   1c1da:	f383 8811 	msr	BASEPRI, r3
   1c1de:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1c1e2:	68c3      	ldr	r3, [r0, #12]
   1c1e4:	4a32      	ldr	r2, [pc, #200]	; (1c2b0 <z_impl_k_mutex_lock+0xe8>)
   1c1e6:	b16b      	cbz	r3, 1c204 <z_impl_k_mutex_lock+0x3c>
   1c1e8:	6880      	ldr	r0, [r0, #8]
   1c1ea:	6891      	ldr	r1, [r2, #8]
   1c1ec:	4288      	cmp	r0, r1
   1c1ee:	d019      	beq.n	1c224 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1c1f0:	ea56 0307 	orrs.w	r3, r6, r7
   1c1f4:	d118      	bne.n	1c228 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1c1f6:	f388 8811 	msr	BASEPRI, r8
   1c1fa:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1c1fe:	f06f 000f 	mvn.w	r0, #15
   1c202:	e00c      	b.n	1c21e <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   1c204:	6891      	ldr	r1, [r2, #8]
   1c206:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   1c20a:	3301      	adds	r3, #1
   1c20c:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1c20e:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1c210:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   1c212:	60a3      	str	r3, [r4, #8]
   1c214:	f388 8811 	msr	BASEPRI, r8
   1c218:	f3bf 8f6f 	isb	sy
		return 0;
   1c21c:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1c21e:	b002      	add	sp, #8
   1c220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1c224:	6921      	ldr	r1, [r4, #16]
   1c226:	e7f0      	b.n	1c20a <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1c228:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1c22c:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1c230:	4299      	cmp	r1, r3
   1c232:	bfa8      	it	ge
   1c234:	4619      	movge	r1, r3
   1c236:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1c23a:	428b      	cmp	r3, r1
   1c23c:	dd2c      	ble.n	1c298 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
   1c23e:	f000 fb4d 	bl	1c8dc <z_set_prio>
   1c242:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1c244:	4622      	mov	r2, r4
   1c246:	4641      	mov	r1, r8
   1c248:	e9cd 6700 	strd	r6, r7, [sp]
   1c24c:	4819      	ldr	r0, [pc, #100]	; (1c2b4 <z_impl_k_mutex_lock+0xec>)
   1c24e:	f000 fb03 	bl	1c858 <z_pend_curr>
	if (got_mutex == 0) {
   1c252:	2800      	cmp	r0, #0
   1c254:	d0e3      	beq.n	1c21e <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   1c256:	f04f 0320 	mov.w	r3, #32
   1c25a:	f3ef 8611 	mrs	r6, BASEPRI
   1c25e:	f383 8811 	msr	BASEPRI, r3
   1c262:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1c266:	6823      	ldr	r3, [r4, #0]
   1c268:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c26a:	42a3      	cmp	r3, r4
   1c26c:	d007      	beq.n	1c27e <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1c26e:	b133      	cbz	r3, 1c27e <z_impl_k_mutex_lock+0xb6>
   1c270:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1c274:	4299      	cmp	r1, r3
   1c276:	bfa8      	it	ge
   1c278:	4619      	movge	r1, r3
   1c27a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1c27e:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1c280:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1c284:	4299      	cmp	r1, r3
   1c286:	d109      	bne.n	1c29c <z_impl_k_mutex_lock+0xd4>
	if (resched) {
   1c288:	b16d      	cbz	r5, 1c2a6 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   1c28a:	4631      	mov	r1, r6
   1c28c:	4809      	ldr	r0, [pc, #36]	; (1c2b4 <z_impl_k_mutex_lock+0xec>)
   1c28e:	f000 f8cf 	bl	1c430 <z_reschedule>
	return -EAGAIN;
   1c292:	f06f 000a 	mvn.w	r0, #10
   1c296:	e7c2      	b.n	1c21e <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   1c298:	2500      	movs	r5, #0
   1c29a:	e7d3      	b.n	1c244 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
   1c29c:	f000 fb1e 	bl	1c8dc <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1c2a0:	2800      	cmp	r0, #0
   1c2a2:	d1f2      	bne.n	1c28a <z_impl_k_mutex_lock+0xc2>
   1c2a4:	e7f0      	b.n	1c288 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
   1c2a6:	f386 8811 	msr	BASEPRI, r6
   1c2aa:	f3bf 8f6f 	isb	sy
   1c2ae:	e7f0      	b.n	1c292 <z_impl_k_mutex_lock+0xca>
   1c2b0:	200210b4 	.word	0x200210b4
   1c2b4:	20024328 	.word	0x20024328

0001c2b8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1c2b8:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
   1c2ba:	6883      	ldr	r3, [r0, #8]
{
   1c2bc:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1c2be:	2b00      	cmp	r3, #0
   1c2c0:	d036      	beq.n	1c330 <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1c2c2:	4a1e      	ldr	r2, [pc, #120]	; (1c33c <z_impl_k_mutex_unlock+0x84>)
   1c2c4:	6892      	ldr	r2, [r2, #8]
   1c2c6:	4293      	cmp	r3, r2
   1c2c8:	d135      	bne.n	1c336 <z_impl_k_mutex_unlock+0x7e>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   1c2ca:	7bda      	ldrb	r2, [r3, #15]
   1c2cc:	3a01      	subs	r2, #1
   1c2ce:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   1c2d0:	68c3      	ldr	r3, [r0, #12]
   1c2d2:	2b01      	cmp	r3, #1
   1c2d4:	d005      	beq.n	1c2e2 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1c2d6:	3b01      	subs	r3, #1
   1c2d8:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   1c2da:	f000 f909 	bl	1c4f0 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   1c2de:	2000      	movs	r0, #0
}
   1c2e0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1c2e2:	f04f 0320 	mov.w	r3, #32
   1c2e6:	f3ef 8511 	mrs	r5, BASEPRI
   1c2ea:	f383 8811 	msr	BASEPRI, r3
   1c2ee:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1c2f2:	6901      	ldr	r1, [r0, #16]
   1c2f4:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   1c2f6:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1c2fa:	4299      	cmp	r1, r3
   1c2fc:	d001      	beq.n	1c302 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   1c2fe:	f000 faed 	bl	1c8dc <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1c302:	4620      	mov	r0, r4
   1c304:	f003 ffbf 	bl	20286 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1c308:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1c30a:	b158      	cbz	r0, 1c324 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
   1c30c:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1c310:	6122      	str	r2, [r4, #16]
   1c312:	2200      	movs	r2, #0
   1c314:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1c316:	f003 ff5e 	bl	201d6 <z_ready_thread>
		z_reschedule(&lock, key);
   1c31a:	4629      	mov	r1, r5
   1c31c:	4808      	ldr	r0, [pc, #32]	; (1c340 <z_impl_k_mutex_unlock+0x88>)
   1c31e:	f000 f887 	bl	1c430 <z_reschedule>
   1c322:	e7da      	b.n	1c2da <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1c324:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1c326:	f385 8811 	msr	BASEPRI, r5
   1c32a:	f3bf 8f6f 	isb	sy
   1c32e:	e7d4      	b.n	1c2da <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1c330:	f06f 0015 	mvn.w	r0, #21
   1c334:	e7d4      	b.n	1c2e0 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   1c336:	f04f 30ff 	mov.w	r0, #4294967295
   1c33a:	e7d1      	b.n	1c2e0 <z_impl_k_mutex_unlock+0x28>
   1c33c:	200210b4 	.word	0x200210b4
   1c340:	20024328 	.word	0x20024328

0001c344 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1c344:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c346:	4616      	mov	r6, r2
   1c348:	461f      	mov	r7, r3
	__asm__ volatile(
   1c34a:	f04f 0320 	mov.w	r3, #32
   1c34e:	f3ef 8511 	mrs	r5, BASEPRI
   1c352:	f383 8811 	msr	BASEPRI, r3
   1c356:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   1c35a:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1c35c:	b19c      	cbz	r4, 1c386 <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1c35e:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1c360:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1c362:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1c366:	4294      	cmp	r4, r2
	list->head = node;
   1c368:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1c36a:	bf08      	it	eq
   1c36c:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1c36e:	2101      	movs	r1, #1
   1c370:	4620      	mov	r0, r4
   1c372:	f003 feac 	bl	200ce <z_queue_node_peek>
   1c376:	4604      	mov	r4, r0
	__asm__ volatile(
   1c378:	f385 8811 	msr	BASEPRI, r5
   1c37c:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1c380:	4620      	mov	r0, r4
   1c382:	b003      	add	sp, #12
   1c384:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1c386:	ea56 0307 	orrs.w	r3, r6, r7
   1c38a:	d0f5      	beq.n	1c378 <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1c38c:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1c390:	4629      	mov	r1, r5
   1c392:	4610      	mov	r0, r2
   1c394:	e9cd 6700 	strd	r6, r7, [sp]
   1c398:	f000 fa5e 	bl	1c858 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1c39c:	2800      	cmp	r0, #0
   1c39e:	d1ef      	bne.n	1c380 <z_impl_k_queue_get+0x3c>
   1c3a0:	4b01      	ldr	r3, [pc, #4]	; (1c3a8 <z_impl_k_queue_get+0x64>)
   1c3a2:	689b      	ldr	r3, [r3, #8]
   1c3a4:	695c      	ldr	r4, [r3, #20]
   1c3a6:	e7eb      	b.n	1c380 <z_impl_k_queue_get+0x3c>
   1c3a8:	200210b4 	.word	0x200210b4

0001c3ac <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1c3ac:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1c3ae:	4c08      	ldr	r4, [pc, #32]	; (1c3d0 <z_reset_time_slice+0x24>)
   1c3b0:	6823      	ldr	r3, [r4, #0]
   1c3b2:	b15b      	cbz	r3, 1c3cc <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1c3b4:	f7f3 fb06 	bl	f9c4 <z_clock_elapsed>
   1c3b8:	6822      	ldr	r2, [r4, #0]
   1c3ba:	4906      	ldr	r1, [pc, #24]	; (1c3d4 <z_reset_time_slice+0x28>)
   1c3bc:	4410      	add	r0, r2
   1c3be:	6108      	str	r0, [r1, #16]
		z_set_timeout_expiry(slice_time, false);
	}
}
   1c3c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   1c3c4:	2100      	movs	r1, #0
   1c3c6:	4610      	mov	r0, r2
   1c3c8:	f004 b839 	b.w	2043e <z_set_timeout_expiry>
}
   1c3cc:	bd10      	pop	{r4, pc}
   1c3ce:	bf00      	nop
   1c3d0:	200210f0 	.word	0x200210f0
   1c3d4:	200210b4 	.word	0x200210b4

0001c3d8 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1c3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c3da:	460c      	mov	r4, r1
	__asm__ volatile(
   1c3dc:	f04f 0320 	mov.w	r3, #32
   1c3e0:	f3ef 8511 	mrs	r5, BASEPRI
   1c3e4:	f383 8811 	msr	BASEPRI, r3
   1c3e8:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
   1c3ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1c3f0:	f240 36e7 	movw	r6, #999	; 0x3e7
   1c3f4:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1c3f6:	2200      	movs	r2, #0
   1c3f8:	fbe1 6700 	umlal	r6, r7, r1, r0
   1c3fc:	4b09      	ldr	r3, [pc, #36]	; (1c424 <k_sched_time_slice_set+0x4c>)
   1c3fe:	4630      	mov	r0, r6
   1c400:	611a      	str	r2, [r3, #16]
   1c402:	4639      	mov	r1, r7
   1c404:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c408:	2300      	movs	r3, #0
   1c40a:	f7f0 fa4f 	bl	c8ac <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1c40e:	4b06      	ldr	r3, [pc, #24]	; (1c428 <k_sched_time_slice_set+0x50>)
   1c410:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1c412:	4b06      	ldr	r3, [pc, #24]	; (1c42c <k_sched_time_slice_set+0x54>)
   1c414:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   1c416:	f7ff ffc9 	bl	1c3ac <z_reset_time_slice>
	__asm__ volatile(
   1c41a:	f385 8811 	msr	BASEPRI, r5
   1c41e:	f3bf 8f6f 	isb	sy
	}
}
   1c422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c424:	200210b4 	.word	0x200210b4
   1c428:	200210f0 	.word	0x200210f0
   1c42c:	200210ec 	.word	0x200210ec

0001c430 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1c430:	b949      	cbnz	r1, 1c446 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1c432:	f3ef 8005 	mrs	r0, IPSR
   1c436:	b930      	cbnz	r0, 1c446 <z_reschedule+0x16>
	return _kernel.ready_q.cache;
   1c438:	4b05      	ldr	r3, [pc, #20]	; (1c450 <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   1c43a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1c43c:	689b      	ldr	r3, [r3, #8]
   1c43e:	429a      	cmp	r2, r3
   1c440:	d001      	beq.n	1c446 <z_reschedule+0x16>
	ret = arch_swap(key);
   1c442:	f7f3 baf3 	b.w	fa2c <arch_swap>
   1c446:	f381 8811 	msr	BASEPRI, r1
   1c44a:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1c44e:	4770      	bx	lr
   1c450:	200210b4 	.word	0x200210b4

0001c454 <k_sched_lock>:
	__asm__ volatile(
   1c454:	f04f 0320 	mov.w	r3, #32
   1c458:	f3ef 8111 	mrs	r1, BASEPRI
   1c45c:	f383 8811 	msr	BASEPRI, r3
   1c460:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1c464:	4b04      	ldr	r3, [pc, #16]	; (1c478 <k_sched_lock+0x24>)
   1c466:	689a      	ldr	r2, [r3, #8]
   1c468:	7bd3      	ldrb	r3, [r2, #15]
   1c46a:	3b01      	subs	r3, #1
   1c46c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1c46e:	f381 8811 	msr	BASEPRI, r1
   1c472:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1c476:	4770      	bx	lr
   1c478:	200210b4 	.word	0x200210b4

0001c47c <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1c47c:	4b09      	ldr	r3, [pc, #36]	; (1c4a4 <z_priq_dumb_remove+0x28>)
   1c47e:	f103 0228 	add.w	r2, r3, #40	; 0x28
   1c482:	4282      	cmp	r2, r0
   1c484:	d105      	bne.n	1c492 <z_priq_dumb_remove+0x16>
   1c486:	689b      	ldr	r3, [r3, #8]
   1c488:	428b      	cmp	r3, r1
   1c48a:	d102      	bne.n	1c492 <z_priq_dumb_remove+0x16>
   1c48c:	7b4b      	ldrb	r3, [r1, #13]
   1c48e:	06db      	lsls	r3, r3, #27
   1c490:	d106      	bne.n	1c4a0 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1c492:	e9d1 3200 	ldrd	r3, r2, [r1]
   1c496:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1c498:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c49a:	2300      	movs	r3, #0
	node->prev = NULL;
   1c49c:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1c4a0:	4770      	bx	lr
   1c4a2:	bf00      	nop
   1c4a4:	200210b4 	.word	0x200210b4

0001c4a8 <update_cache>:
{
   1c4a8:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   1c4aa:	4c10      	ldr	r4, [pc, #64]	; (1c4ec <update_cache+0x44>)
{
   1c4ac:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   1c4ae:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1c4b2:	f003 fe8a 	bl	201ca <z_priq_dumb_best>
   1c4b6:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1c4b8:	68a3      	ldr	r3, [r4, #8]
   1c4ba:	7b59      	ldrb	r1, [r3, #13]
   1c4bc:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
   1c4be:	bf44      	itt	mi
   1c4c0:	f041 0108 	orrmi.w	r1, r1, #8
   1c4c4:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
   1c4c6:	b905      	cbnz	r5, 1c4ca <update_cache+0x22>
   1c4c8:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   1c4ca:	b94e      	cbnz	r6, 1c4e0 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
   1c4cc:	7b5a      	ldrb	r2, [r3, #13]
   1c4ce:	06d2      	lsls	r2, r2, #27
   1c4d0:	d106      	bne.n	1c4e0 <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1c4d2:	69aa      	ldr	r2, [r5, #24]
   1c4d4:	b922      	cbnz	r2, 1c4e0 <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
   1c4d6:	89da      	ldrh	r2, [r3, #14]
   1c4d8:	2a7f      	cmp	r2, #127	; 0x7f
   1c4da:	d901      	bls.n	1c4e0 <update_cache+0x38>
		_kernel.ready_q.cache = _current;
   1c4dc:	6263      	str	r3, [r4, #36]	; 0x24
}
   1c4de:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
   1c4e0:	42ab      	cmp	r3, r5
   1c4e2:	d001      	beq.n	1c4e8 <update_cache+0x40>
			z_reset_time_slice();
   1c4e4:	f7ff ff62 	bl	1c3ac <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1c4e8:	6265      	str	r5, [r4, #36]	; 0x24
}
   1c4ea:	e7f8      	b.n	1c4de <update_cache+0x36>
   1c4ec:	200210b4 	.word	0x200210b4

0001c4f0 <k_sched_unlock>:
{
   1c4f0:	b510      	push	{r4, lr}
	__asm__ volatile(
   1c4f2:	f04f 0320 	mov.w	r3, #32
   1c4f6:	f3ef 8411 	mrs	r4, BASEPRI
   1c4fa:	f383 8811 	msr	BASEPRI, r3
   1c4fe:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1c502:	4b08      	ldr	r3, [pc, #32]	; (1c524 <k_sched_unlock+0x34>)
		update_cache(0);
   1c504:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   1c506:	689a      	ldr	r2, [r3, #8]
   1c508:	7bd3      	ldrb	r3, [r2, #15]
   1c50a:	3301      	adds	r3, #1
   1c50c:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1c50e:	f7ff ffcb 	bl	1c4a8 <update_cache>
	__asm__ volatile(
   1c512:	f384 8811 	msr	BASEPRI, r4
   1c516:	f3bf 8f6f 	isb	sy
}
   1c51a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1c51e:	f003 be28 	b.w	20172 <z_reschedule_unlocked>
   1c522:	bf00      	nop
   1c524:	200210b4 	.word	0x200210b4

0001c528 <ready_thread>:
{
   1c528:	b470      	push	{r4, r5, r6}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1c52a:	7b43      	ldrb	r3, [r0, #13]
   1c52c:	06db      	lsls	r3, r3, #27
   1c52e:	d127      	bne.n	1c580 <ready_thread+0x58>
	if (z_is_thread_ready(thread)) {
   1c530:	6983      	ldr	r3, [r0, #24]
   1c532:	bb2b      	cbnz	r3, 1c580 <ready_thread+0x58>
	return list->head == list;
   1c534:	4a13      	ldr	r2, [pc, #76]	; (1c584 <ready_thread+0x5c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c536:	f102 0128 	add.w	r1, r2, #40	; 0x28
   1c53a:	e9d2 340a 	ldrd	r3, r4, [r2, #40]	; 0x28
   1c53e:	428b      	cmp	r3, r1
   1c540:	d018      	beq.n	1c574 <ready_thread+0x4c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c542:	b1bb      	cbz	r3, 1c574 <ready_thread+0x4c>
	if (thread_1->base.prio < thread_2->base.prio) {
   1c544:	f990 500e 	ldrsb.w	r5, [r0, #14]
   1c548:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1c54c:	42ae      	cmp	r6, r5
   1c54e:	dd0c      	ble.n	1c56a <ready_thread+0x42>
	node->prev = successor->prev;
   1c550:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1c552:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   1c556:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1c558:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   1c55a:	7b43      	ldrb	r3, [r0, #13]
   1c55c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1c560:	7343      	strb	r3, [r0, #13]
}
   1c562:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1c564:	2000      	movs	r0, #0
   1c566:	f7ff bf9f 	b.w	1c4a8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1c56a:	429c      	cmp	r4, r3
   1c56c:	d002      	beq.n	1c574 <ready_thread+0x4c>
   1c56e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c570:	2b00      	cmp	r3, #0
   1c572:	d1e9      	bne.n	1c548 <ready_thread+0x20>
	node->prev = list->tail;
   1c574:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
   1c578:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1c57a:	6018      	str	r0, [r3, #0]
	list->tail = node;
   1c57c:	62d0      	str	r0, [r2, #44]	; 0x2c
}
   1c57e:	e7ec      	b.n	1c55a <ready_thread+0x32>
}
   1c580:	bc70      	pop	{r4, r5, r6}
   1c582:	4770      	bx	lr
   1c584:	200210b4 	.word	0x200210b4

0001c588 <z_sched_start>:
{
   1c588:	b510      	push	{r4, lr}
	__asm__ volatile(
   1c58a:	f04f 0220 	mov.w	r2, #32
   1c58e:	f3ef 8411 	mrs	r4, BASEPRI
   1c592:	f382 8811 	msr	BASEPRI, r2
   1c596:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   1c59a:	7b42      	ldrb	r2, [r0, #13]
   1c59c:	0751      	lsls	r1, r2, #29
   1c59e:	d404      	bmi.n	1c5aa <z_sched_start+0x22>
	__asm__ volatile(
   1c5a0:	f384 8811 	msr	BASEPRI, r4
   1c5a4:	f3bf 8f6f 	isb	sy
}
   1c5a8:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1c5aa:	f022 0204 	bic.w	r2, r2, #4
   1c5ae:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1c5b0:	f7ff ffba 	bl	1c528 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1c5b4:	4621      	mov	r1, r4
}
   1c5b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1c5ba:	4801      	ldr	r0, [pc, #4]	; (1c5c0 <z_sched_start+0x38>)
   1c5bc:	f7ff bf38 	b.w	1c430 <z_reschedule>
   1c5c0:	20024328 	.word	0x20024328

0001c5c4 <move_thread_to_end_of_prio_q>:
{
   1c5c4:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1c5c6:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   1c5ca:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1c5cc:	2b00      	cmp	r3, #0
   1c5ce:	da02      	bge.n	1c5d6 <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1c5d0:	4816      	ldr	r0, [pc, #88]	; (1c62c <move_thread_to_end_of_prio_q+0x68>)
   1c5d2:	f7ff ff53 	bl	1c47c <z_priq_dumb_remove>
	return list->head == list;
   1c5d6:	4a16      	ldr	r2, [pc, #88]	; (1c630 <move_thread_to_end_of_prio_q+0x6c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c5d8:	f102 0028 	add.w	r0, r2, #40	; 0x28
   1c5dc:	e9d2 340a 	ldrd	r3, r4, [r2, #40]	; 0x28
   1c5e0:	4283      	cmp	r3, r0
   1c5e2:	d01c      	beq.n	1c61e <move_thread_to_end_of_prio_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c5e4:	b1db      	cbz	r3, 1c61e <move_thread_to_end_of_prio_q+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
   1c5e6:	f991 500e 	ldrsb.w	r5, [r1, #14]
   1c5ea:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1c5ee:	42ae      	cmp	r6, r5
   1c5f0:	dd10      	ble.n	1c614 <move_thread_to_end_of_prio_q+0x50>
	node->prev = successor->prev;
   1c5f2:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   1c5f4:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   1c5f8:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1c5fa:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   1c5fc:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
   1c5fe:	6890      	ldr	r0, [r2, #8]
   1c600:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1c604:	734b      	strb	r3, [r1, #13]
   1c606:	1a43      	subs	r3, r0, r1
   1c608:	4258      	negs	r0, r3
   1c60a:	4158      	adcs	r0, r3
}
   1c60c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1c610:	f7ff bf4a 	b.w	1c4a8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1c614:	429c      	cmp	r4, r3
   1c616:	d002      	beq.n	1c61e <move_thread_to_end_of_prio_q+0x5a>
   1c618:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c61a:	2b00      	cmp	r3, #0
   1c61c:	d1e5      	bne.n	1c5ea <move_thread_to_end_of_prio_q+0x26>
	node->prev = list->tail;
   1c61e:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
   1c622:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1c624:	6019      	str	r1, [r3, #0]
	list->tail = node;
   1c626:	62d1      	str	r1, [r2, #44]	; 0x2c
}
   1c628:	e7e8      	b.n	1c5fc <move_thread_to_end_of_prio_q+0x38>
   1c62a:	bf00      	nop
   1c62c:	200210dc 	.word	0x200210dc
   1c630:	200210b4 	.word	0x200210b4

0001c634 <z_time_slice>:
{
   1c634:	4601      	mov	r1, r0
   1c636:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   1c638:	f04f 0320 	mov.w	r3, #32
   1c63c:	f3ef 8411 	mrs	r4, BASEPRI
   1c640:	f383 8811 	msr	BASEPRI, r3
   1c644:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1c648:	4b16      	ldr	r3, [pc, #88]	; (1c6a4 <z_time_slice+0x70>)
   1c64a:	4a17      	ldr	r2, [pc, #92]	; (1c6a8 <z_time_slice+0x74>)
   1c64c:	6898      	ldr	r0, [r3, #8]
   1c64e:	6815      	ldr	r5, [r2, #0]
   1c650:	42a8      	cmp	r0, r5
   1c652:	461d      	mov	r5, r3
   1c654:	d106      	bne.n	1c664 <z_time_slice+0x30>
			z_reset_time_slice();
   1c656:	f7ff fea9 	bl	1c3ac <z_reset_time_slice>
	__asm__ volatile(
   1c65a:	f384 8811 	msr	BASEPRI, r4
   1c65e:	f3bf 8f6f 	isb	sy
}
   1c662:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   1c664:	2600      	movs	r6, #0
   1c666:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1c668:	4a10      	ldr	r2, [pc, #64]	; (1c6ac <z_time_slice+0x78>)
   1c66a:	6812      	ldr	r2, [r2, #0]
   1c66c:	b1ba      	cbz	r2, 1c69e <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1c66e:	89c2      	ldrh	r2, [r0, #14]
   1c670:	2a7f      	cmp	r2, #127	; 0x7f
   1c672:	d814      	bhi.n	1c69e <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   1c674:	7b42      	ldrb	r2, [r0, #13]
   1c676:	06d2      	lsls	r2, r2, #27
   1c678:	d111      	bne.n	1c69e <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1c67a:	4a0d      	ldr	r2, [pc, #52]	; (1c6b0 <z_time_slice+0x7c>)
   1c67c:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1c680:	6812      	ldr	r2, [r2, #0]
   1c682:	4296      	cmp	r6, r2
   1c684:	db0b      	blt.n	1c69e <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1c686:	4a0b      	ldr	r2, [pc, #44]	; (1c6b4 <z_time_slice+0x80>)
   1c688:	4290      	cmp	r0, r2
   1c68a:	d008      	beq.n	1c69e <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   1c68c:	691a      	ldr	r2, [r3, #16]
   1c68e:	428a      	cmp	r2, r1
   1c690:	dc02      	bgt.n	1c698 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   1c692:	f7ff ff97 	bl	1c5c4 <move_thread_to_end_of_prio_q>
   1c696:	e7de      	b.n	1c656 <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   1c698:	1a52      	subs	r2, r2, r1
   1c69a:	611a      	str	r2, [r3, #16]
   1c69c:	e7dd      	b.n	1c65a <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   1c69e:	2300      	movs	r3, #0
   1c6a0:	612b      	str	r3, [r5, #16]
   1c6a2:	e7da      	b.n	1c65a <z_time_slice+0x26>
   1c6a4:	200210b4 	.word	0x200210b4
   1c6a8:	200210e8 	.word	0x200210e8
   1c6ac:	200210f0 	.word	0x200210f0
   1c6b0:	200210ec 	.word	0x200210ec
   1c6b4:	20020530 	.word	0x20020530

0001c6b8 <z_impl_k_thread_suspend>:
{
   1c6b8:	b570      	push	{r4, r5, r6, lr}
   1c6ba:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1c6bc:	3018      	adds	r0, #24
   1c6be:	f003 fe98 	bl	203f2 <z_abort_timeout>
	__asm__ volatile(
   1c6c2:	f04f 0320 	mov.w	r3, #32
   1c6c6:	f3ef 8611 	mrs	r6, BASEPRI
   1c6ca:	f383 8811 	msr	BASEPRI, r3
   1c6ce:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1c6d2:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1c6d6:	2b00      	cmp	r3, #0
   1c6d8:	da07      	bge.n	1c6ea <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1c6da:	4621      	mov	r1, r4
   1c6dc:	480e      	ldr	r0, [pc, #56]	; (1c718 <z_impl_k_thread_suspend+0x60>)
   1c6de:	f7ff fecd 	bl	1c47c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1c6e2:	7b63      	ldrb	r3, [r4, #13]
   1c6e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1c6e8:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1c6ea:	4d0c      	ldr	r5, [pc, #48]	; (1c71c <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1c6ec:	7b63      	ldrb	r3, [r4, #13]
   1c6ee:	68a8      	ldr	r0, [r5, #8]
   1c6f0:	f043 0310 	orr.w	r3, r3, #16
   1c6f4:	7363      	strb	r3, [r4, #13]
   1c6f6:	1b03      	subs	r3, r0, r4
   1c6f8:	4258      	negs	r0, r3
   1c6fa:	4158      	adcs	r0, r3
   1c6fc:	f7ff fed4 	bl	1c4a8 <update_cache>
	__asm__ volatile(
   1c700:	f386 8811 	msr	BASEPRI, r6
   1c704:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1c708:	68ab      	ldr	r3, [r5, #8]
   1c70a:	42a3      	cmp	r3, r4
   1c70c:	d103      	bne.n	1c716 <z_impl_k_thread_suspend+0x5e>
}
   1c70e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1c712:	f003 bd2e 	b.w	20172 <z_reschedule_unlocked>
}
   1c716:	bd70      	pop	{r4, r5, r6, pc}
   1c718:	200210dc 	.word	0x200210dc
   1c71c:	200210b4 	.word	0x200210b4

0001c720 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   1c720:	6e03      	ldr	r3, [r0, #96]	; 0x60
{
   1c722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c726:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   1c728:	b103      	cbz	r3, 1c72c <z_thread_single_abort+0xc>
		thread->fn_abort();
   1c72a:	4798      	blx	r3
   1c72c:	f104 0018 	add.w	r0, r4, #24
   1c730:	f003 fe5f 	bl	203f2 <z_abort_timeout>
	__asm__ volatile(
   1c734:	f04f 0320 	mov.w	r3, #32
   1c738:	f3ef 8611 	mrs	r6, BASEPRI
   1c73c:	f383 8811 	msr	BASEPRI, r3
   1c740:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1c744:	7b63      	ldrb	r3, [r4, #13]
   1c746:	06d8      	lsls	r0, r3, #27
   1c748:	d123      	bne.n	1c792 <z_thread_single_abort+0x72>
		if (z_is_thread_ready(thread)) {
   1c74a:	69a2      	ldr	r2, [r4, #24]
   1c74c:	bb0a      	cbnz	r2, 1c792 <z_thread_single_abort+0x72>
			if (z_is_thread_queued(thread)) {
   1c74e:	0619      	lsls	r1, r3, #24
   1c750:	d507      	bpl.n	1c762 <z_thread_single_abort+0x42>
				_priq_run_remove(&_kernel.ready_q.runq,
   1c752:	4621      	mov	r1, r4
   1c754:	481e      	ldr	r0, [pc, #120]	; (1c7d0 <z_thread_single_abort+0xb0>)
   1c756:	f7ff fe91 	bl	1c47c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1c75a:	7b63      	ldrb	r3, [r4, #13]
   1c75c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1c760:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   1c762:	4b1c      	ldr	r3, [pc, #112]	; (1c7d4 <z_thread_single_abort+0xb4>)
   1c764:	6898      	ldr	r0, [r3, #8]
   1c766:	1b02      	subs	r2, r0, r4
   1c768:	4250      	negs	r0, r2
   1c76a:	4150      	adcs	r0, r2
   1c76c:	f7ff fe9c 	bl	1c4a8 <update_cache>
			waiter->base.pended_on = NULL;
   1c770:	2700      	movs	r7, #0
		thread->base.thread_state |= mask;
   1c772:	7b63      	ldrb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1c774:	f104 0830 	add.w	r8, r4, #48	; 0x30
   1c778:	f043 0308 	orr.w	r3, r3, #8
   1c77c:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   1c77e:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c780:	4545      	cmp	r5, r8
   1c782:	d000      	beq.n	1c786 <z_thread_single_abort+0x66>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   1c784:	b995      	cbnz	r5, 1c7ac <z_thread_single_abort+0x8c>
	__asm__ volatile(
   1c786:	f386 8811 	msr	BASEPRI, r6
   1c78a:	f3bf 8f6f 	isb	sy
}
   1c78e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
   1c792:	079b      	lsls	r3, r3, #30
   1c794:	d5ec      	bpl.n	1c770 <z_thread_single_abort+0x50>
				_priq_wait_remove(&pended_on(thread)->waitq,
   1c796:	4621      	mov	r1, r4
   1c798:	68a0      	ldr	r0, [r4, #8]
   1c79a:	f7ff fe6f 	bl	1c47c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1c79e:	7b63      	ldrb	r3, [r4, #13]
   1c7a0:	f023 0302 	bic.w	r3, r3, #2
   1c7a4:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   1c7a6:	2300      	movs	r3, #0
   1c7a8:	60a3      	str	r3, [r4, #8]
   1c7aa:	e7e1      	b.n	1c770 <z_thread_single_abort+0x50>
   1c7ac:	f105 0018 	add.w	r0, r5, #24
   1c7b0:	f003 fe1f 	bl	203f2 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   1c7b4:	68a8      	ldr	r0, [r5, #8]
   1c7b6:	4629      	mov	r1, r5
   1c7b8:	f7ff fe60 	bl	1c47c <z_priq_dumb_remove>
   1c7bc:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
   1c7be:	4628      	mov	r0, r5
   1c7c0:	f023 0302 	bic.w	r3, r3, #2
   1c7c4:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   1c7c6:	60af      	str	r7, [r5, #8]
   1c7c8:	67ef      	str	r7, [r5, #124]	; 0x7c
			ready_thread(waiter);
   1c7ca:	f7ff fead 	bl	1c528 <ready_thread>
   1c7ce:	e7d6      	b.n	1c77e <z_thread_single_abort+0x5e>
   1c7d0:	200210dc 	.word	0x200210dc
   1c7d4:	200210b4 	.word	0x200210b4

0001c7d8 <unready_thread>:
{
   1c7d8:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1c7da:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   1c7de:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1c7e0:	2b00      	cmp	r3, #0
   1c7e2:	da06      	bge.n	1c7f2 <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1c7e4:	4807      	ldr	r0, [pc, #28]	; (1c804 <unready_thread+0x2c>)
   1c7e6:	f7ff fe49 	bl	1c47c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1c7ea:	7b4b      	ldrb	r3, [r1, #13]
   1c7ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1c7f0:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   1c7f2:	4b05      	ldr	r3, [pc, #20]	; (1c808 <unready_thread+0x30>)
   1c7f4:	6898      	ldr	r0, [r3, #8]
   1c7f6:	1a43      	subs	r3, r0, r1
   1c7f8:	4258      	negs	r0, r3
   1c7fa:	4158      	adcs	r0, r3
}
   1c7fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1c800:	f7ff be52 	b.w	1c4a8 <update_cache>
   1c804:	200210dc 	.word	0x200210dc
   1c808:	200210b4 	.word	0x200210b4

0001c80c <pend>:
{
   1c80c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c810:	4606      	mov	r6, r0
   1c812:	4614      	mov	r4, r2
   1c814:	461d      	mov	r5, r3
	__asm__ volatile(
   1c816:	f04f 0320 	mov.w	r3, #32
   1c81a:	f3ef 8711 	mrs	r7, BASEPRI
   1c81e:	f383 8811 	msr	BASEPRI, r3
   1c822:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   1c826:	f003 fd06 	bl	20236 <add_to_waitq_locked>
	__asm__ volatile(
   1c82a:	f387 8811 	msr	BASEPRI, r7
   1c82e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1c832:	1c6b      	adds	r3, r5, #1
   1c834:	bf08      	it	eq
   1c836:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   1c83a:	d008      	beq.n	1c84e <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1c83c:	4622      	mov	r2, r4
   1c83e:	462b      	mov	r3, r5
   1c840:	f106 0018 	add.w	r0, r6, #24
   1c844:	4903      	ldr	r1, [pc, #12]	; (1c854 <pend+0x48>)
}
   1c846:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1c84a:	f000 badb 	b.w	1ce04 <z_add_timeout>
   1c84e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c852:	bf00      	nop
   1c854:	000201f7 	.word	0x000201f7

0001c858 <z_pend_curr>:
{
   1c858:	b510      	push	{r4, lr}
   1c85a:	460c      	mov	r4, r1
	pending_current = _current;
   1c85c:	4b06      	ldr	r3, [pc, #24]	; (1c878 <z_pend_curr+0x20>)
{
   1c85e:	4611      	mov	r1, r2
	pending_current = _current;
   1c860:	6898      	ldr	r0, [r3, #8]
   1c862:	4b06      	ldr	r3, [pc, #24]	; (1c87c <z_pend_curr+0x24>)
   1c864:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   1c866:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c86a:	f7ff ffcf 	bl	1c80c <pend>
   1c86e:	4620      	mov	r0, r4
}
   1c870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c874:	f7f3 b8da 	b.w	fa2c <arch_swap>
   1c878:	200210b4 	.word	0x200210b4
   1c87c:	200210e8 	.word	0x200210e8

0001c880 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
   1c880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c882:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
   1c884:	f003 fdf6 	bl	20474 <z_tick_get_32>
   1c888:	182c      	adds	r4, r5, r0
	__asm__ volatile(
   1c88a:	f04f 0320 	mov.w	r3, #32
   1c88e:	f3ef 8711 	mrs	r7, BASEPRI
   1c892:	f383 8811 	msr	BASEPRI, r3
   1c896:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1c89a:	4e0d      	ldr	r6, [pc, #52]	; (1c8d0 <z_tick_sleep.part.0+0x50>)
   1c89c:	4b0d      	ldr	r3, [pc, #52]	; (1c8d4 <z_tick_sleep.part.0+0x54>)
   1c89e:	68b0      	ldr	r0, [r6, #8]
   1c8a0:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   1c8a2:	f7ff ff99 	bl	1c7d8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1c8a6:	68b0      	ldr	r0, [r6, #8]
   1c8a8:	490b      	ldr	r1, [pc, #44]	; (1c8d8 <z_tick_sleep.part.0+0x58>)
   1c8aa:	462a      	mov	r2, r5
   1c8ac:	17eb      	asrs	r3, r5, #31
   1c8ae:	3018      	adds	r0, #24
   1c8b0:	f000 faa8 	bl	1ce04 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1c8b4:	68b2      	ldr	r2, [r6, #8]
   1c8b6:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1c8b8:	7b53      	ldrb	r3, [r2, #13]
   1c8ba:	f043 0310 	orr.w	r3, r3, #16
   1c8be:	7353      	strb	r3, [r2, #13]
   1c8c0:	f7f3 f8b4 	bl	fa2c <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   1c8c4:	f003 fdd6 	bl	20474 <z_tick_get_32>
   1c8c8:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   1c8ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1c8ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c8d0:	200210b4 	.word	0x200210b4
   1c8d4:	200210e8 	.word	0x200210e8
   1c8d8:	000201f7 	.word	0x000201f7

0001c8dc <z_set_prio>:
{
   1c8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c8de:	4604      	mov	r4, r0
   1c8e0:	f04f 0320 	mov.w	r3, #32
   1c8e4:	f3ef 8711 	mrs	r7, BASEPRI
   1c8e8:	f383 8811 	msr	BASEPRI, r3
   1c8ec:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1c8f0:	7b43      	ldrb	r3, [r0, #13]
   1c8f2:	b24e      	sxtb	r6, r1
   1c8f4:	06db      	lsls	r3, r3, #27
   1c8f6:	d12c      	bne.n	1c952 <z_set_prio+0x76>
		if (need_sched) {
   1c8f8:	6983      	ldr	r3, [r0, #24]
   1c8fa:	bb53      	cbnz	r3, 1c952 <z_set_prio+0x76>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   1c8fc:	4d16      	ldr	r5, [pc, #88]	; (1c958 <z_set_prio+0x7c>)
   1c8fe:	4621      	mov	r1, r4
   1c900:	f105 0028 	add.w	r0, r5, #40	; 0x28
   1c904:	f7ff fdba 	bl	1c47c <z_priq_dumb_remove>
	return list->head == list;
   1c908:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1c90a:	462a      	mov	r2, r5
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c90c:	4283      	cmp	r3, r0
				thread->base.prio = prio;
   1c90e:	73a6      	strb	r6, [r4, #14]
   1c910:	d018      	beq.n	1c944 <z_set_prio+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c912:	b1bb      	cbz	r3, 1c944 <z_set_prio+0x68>
   1c914:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
   1c916:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1c91a:	42b5      	cmp	r5, r6
   1c91c:	dd0d      	ble.n	1c93a <z_set_prio+0x5e>
	node->prev = successor->prev;
   1c91e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1c920:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1c924:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1c926:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1c928:	2001      	movs	r0, #1
   1c92a:	f7ff fdbd 	bl	1c4a8 <update_cache>
   1c92e:	2001      	movs	r0, #1
	__asm__ volatile(
   1c930:	f387 8811 	msr	BASEPRI, r7
   1c934:	f3bf 8f6f 	isb	sy
}
   1c938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1c93a:	428b      	cmp	r3, r1
   1c93c:	d002      	beq.n	1c944 <z_set_prio+0x68>
   1c93e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c940:	2b00      	cmp	r3, #0
   1c942:	d1e8      	bne.n	1c916 <z_set_prio+0x3a>
	node->prev = list->tail;
   1c944:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   1c946:	6020      	str	r0, [r4, #0]
	node->prev = list->tail;
   1c948:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1c94a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1c94c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1c94e:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   1c950:	e7ea      	b.n	1c928 <z_set_prio+0x4c>
			thread->base.prio = prio;
   1c952:	2000      	movs	r0, #0
   1c954:	73a6      	strb	r6, [r4, #14]
   1c956:	e7eb      	b.n	1c930 <z_set_prio+0x54>
   1c958:	200210b4 	.word	0x200210b4

0001c95c <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1c95c:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   1c95e:	4b04      	ldr	r3, [pc, #16]	; (1c970 <z_sched_init+0x14>)
   1c960:	4608      	mov	r0, r1
   1c962:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   1c966:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   1c96a:	f7ff bd35 	b.w	1c3d8 <k_sched_time_slice_set>
   1c96e:	bf00      	nop
   1c970:	200210b4 	.word	0x200210b4

0001c974 <z_impl_k_yield>:
{
   1c974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   1c976:	4c23      	ldr	r4, [pc, #140]	; (1ca04 <z_impl_k_yield+0x90>)
   1c978:	4b23      	ldr	r3, [pc, #140]	; (1ca08 <z_impl_k_yield+0x94>)
   1c97a:	68a2      	ldr	r2, [r4, #8]
   1c97c:	429a      	cmp	r2, r3
   1c97e:	d028      	beq.n	1c9d2 <z_impl_k_yield+0x5e>
	__asm__ volatile(
   1c980:	f04f 0320 	mov.w	r3, #32
   1c984:	f3ef 8511 	mrs	r5, BASEPRI
   1c988:	f383 8811 	msr	BASEPRI, r3
   1c98c:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   1c990:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1c994:	68a1      	ldr	r1, [r4, #8]
   1c996:	f7ff fd71 	bl	1c47c <z_priq_dumb_remove>
	return list->head == list;
   1c99a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
   1c99c:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c99e:	4282      	cmp	r2, r0
   1c9a0:	d028      	beq.n	1c9f4 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c9a2:	b33a      	cbz	r2, 1c9f4 <z_impl_k_yield+0x80>
   1c9a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
   1c9a6:	f993 100e 	ldrsb.w	r1, [r3, #14]
   1c9aa:	f992 700e 	ldrsb.w	r7, [r2, #14]
   1c9ae:	428f      	cmp	r7, r1
   1c9b0:	dd1b      	ble.n	1c9ea <z_impl_k_yield+0x76>
	node->prev = successor->prev;
   1c9b2:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1c9b4:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
   1c9b8:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   1c9ba:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
   1c9bc:	7b5a      	ldrb	r2, [r3, #13]
			update_cache(1);
   1c9be:	2001      	movs	r0, #1
   1c9c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1c9c4:	735a      	strb	r2, [r3, #13]
   1c9c6:	f7ff fd6f 	bl	1c4a8 <update_cache>
	__asm__ volatile(
   1c9ca:	f385 8811 	msr	BASEPRI, r5
   1c9ce:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1c9d2:	f04f 0320 	mov.w	r3, #32
   1c9d6:	f3ef 8011 	mrs	r0, BASEPRI
   1c9da:	f383 8811 	msr	BASEPRI, r3
   1c9de:	f3bf 8f6f 	isb	sy
}
   1c9e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1c9e6:	f7f3 b821 	b.w	fa2c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1c9ea:	4296      	cmp	r6, r2
   1c9ec:	d002      	beq.n	1c9f4 <z_impl_k_yield+0x80>
   1c9ee:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c9f0:	2a00      	cmp	r2, #0
   1c9f2:	d1da      	bne.n	1c9aa <z_impl_k_yield+0x36>
	node->prev = list->tail;
   1c9f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	node->next = list;
   1c9f6:	6018      	str	r0, [r3, #0]
	node->prev = list->tail;
   1c9f8:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   1c9fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1c9fc:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1c9fe:	62e3      	str	r3, [r4, #44]	; 0x2c
}
   1ca00:	e7dc      	b.n	1c9bc <z_impl_k_yield+0x48>
   1ca02:	bf00      	nop
   1ca04:	200210b4 	.word	0x200210b4
   1ca08:	20020530 	.word	0x20020530

0001ca0c <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   1ca0c:	460b      	mov	r3, r1
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1ca0e:	3301      	adds	r3, #1
   1ca10:	bf08      	it	eq
   1ca12:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1ca16:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1ca18:	d106      	bne.n	1ca28 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1ca1a:	4b0b      	ldr	r3, [pc, #44]	; (1ca48 <z_impl_k_sleep+0x3c>)
   1ca1c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1ca1e:	f7ff fe4b 	bl	1c6b8 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   1ca22:	f04f 30ff 	mov.w	r0, #4294967295
#endif

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   1ca26:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
   1ca28:	4604      	mov	r4, r0
	if (ticks == 0) {
   1ca2a:	b948      	cbnz	r0, 1ca40 <z_impl_k_sleep+0x34>
	z_impl_k_yield();
   1ca2c:	f7ff ffa2 	bl	1c974 <z_impl_k_yield>
			return (t * to_hz + off) / from_hz;
   1ca30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1ca34:	fb84 3400 	smull	r3, r4, r4, r0
   1ca38:	0bd8      	lsrs	r0, r3, #15
   1ca3a:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   1ca3e:	e7f2      	b.n	1ca26 <z_impl_k_sleep+0x1a>
   1ca40:	f7ff ff1e 	bl	1c880 <z_tick_sleep.part.0>
   1ca44:	4604      	mov	r4, r0
   1ca46:	e7f3      	b.n	1ca30 <z_impl_k_sleep+0x24>
   1ca48:	200210b4 	.word	0x200210b4

0001ca4c <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1ca4c:	4b01      	ldr	r3, [pc, #4]	; (1ca54 <z_impl_k_current_get+0x8>)
   1ca4e:	6898      	ldr	r0, [r3, #8]
   1ca50:	4770      	bx	lr
   1ca52:	bf00      	nop
   1ca54:	200210b4 	.word	0x200210b4

0001ca58 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1ca58:	b538      	push	{r3, r4, r5, lr}
   1ca5a:	4604      	mov	r4, r0
   1ca5c:	f04f 0320 	mov.w	r3, #32
   1ca60:	f3ef 8511 	mrs	r5, BASEPRI
   1ca64:	f383 8811 	msr	BASEPRI, r3
   1ca68:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   1ca6c:	f003 fc0b 	bl	20286 <z_unpend_first_thread>

	if (thread != NULL) {
   1ca70:	b148      	cbz	r0, 1ca86 <z_impl_k_sem_give+0x2e>
   1ca72:	2200      	movs	r2, #0
   1ca74:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1ca76:	f003 fbae 	bl	201d6 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1ca7a:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   1ca7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1ca80:	4807      	ldr	r0, [pc, #28]	; (1caa0 <z_impl_k_sem_give+0x48>)
   1ca82:	f7ff bcd5 	b.w	1c430 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1ca86:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1ca8a:	429a      	cmp	r2, r3
   1ca8c:	bf18      	it	ne
   1ca8e:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1ca90:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1ca92:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1ca94:	f104 0010 	add.w	r0, r4, #16
   1ca98:	f003 fe47 	bl	2072a <z_handle_obj_poll_events>
}
   1ca9c:	e7ed      	b.n	1ca7a <z_impl_k_sem_give+0x22>
   1ca9e:	bf00      	nop
   1caa0:	20024328 	.word	0x20024328

0001caa4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1caa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1caa6:	4614      	mov	r4, r2
   1caa8:	461d      	mov	r5, r3
   1caaa:	f04f 0320 	mov.w	r3, #32
   1caae:	f3ef 8111 	mrs	r1, BASEPRI
   1cab2:	f383 8811 	msr	BASEPRI, r3
   1cab6:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   1caba:	6883      	ldr	r3, [r0, #8]
   1cabc:	b143      	cbz	r3, 1cad0 <z_impl_k_sem_take+0x2c>
		sem->count--;
   1cabe:	3b01      	subs	r3, #1
   1cac0:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   1cac2:	f381 8811 	msr	BASEPRI, r1
   1cac6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1caca:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   1cacc:	b003      	add	sp, #12
   1cace:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1cad0:	ea54 0305 	orrs.w	r3, r4, r5
   1cad4:	d106      	bne.n	1cae4 <z_impl_k_sem_take+0x40>
   1cad6:	f381 8811 	msr	BASEPRI, r1
   1cada:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1cade:	f06f 000f 	mvn.w	r0, #15
   1cae2:	e7f3      	b.n	1cacc <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1cae4:	4602      	mov	r2, r0
   1cae6:	e9cd 4500 	strd	r4, r5, [sp]
   1caea:	4802      	ldr	r0, [pc, #8]	; (1caf4 <z_impl_k_sem_take+0x50>)
   1caec:	f7ff feb4 	bl	1c858 <z_pend_curr>
	return ret;
   1caf0:	e7ec      	b.n	1cacc <z_impl_k_sem_take+0x28>
   1caf2:	bf00      	nop
   1caf4:	20024328 	.word	0x20024328

0001caf8 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1caf8:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1cafa:	4c08      	ldr	r4, [pc, #32]	; (1cb1c <k_sys_work_q_init+0x24>)
   1cafc:	f04f 33ff 	mov.w	r3, #4294967295
   1cb00:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1cb04:	4620      	mov	r0, r4
   1cb06:	4906      	ldr	r1, [pc, #24]	; (1cb20 <k_sys_work_q_init+0x28>)
   1cb08:	f000 f8c8 	bl	1cc9c <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   1cb0c:	4905      	ldr	r1, [pc, #20]	; (1cb24 <k_sys_work_q_init+0x2c>)
   1cb0e:	f104 0018 	add.w	r0, r4, #24
   1cb12:	f003 fc05 	bl	20320 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   1cb16:	2000      	movs	r0, #0
   1cb18:	bd10      	pop	{r4, pc}
   1cb1a:	bf00      	nop
   1cb1c:	200206c0 	.word	0x200206c0
   1cb20:	200268d0 	.word	0x200268d0
   1cb24:	00022abf 	.word	0x00022abf

0001cb28 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1cb28:	e92d 41b0 	stmdb	sp!, {r4, r5, r7, r8, lr}
	sys_dlist_init(&w->waitq);
   1cb2c:	f100 0530 	add.w	r5, r0, #48	; 0x30
   1cb30:	b085      	sub	sp, #20
	list->tail = (sys_dnode_t *)list;
   1cb32:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   1cb36:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   1cb38:	4604      	mov	r4, r0
	thread_base->user_options = (uint8_t)options;
   1cb3a:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1cb3c:	2504      	movs	r5, #4
   1cb3e:	7345      	strb	r5, [r0, #13]

	thread_base->prio = priority;
   1cb40:	9d0d      	ldr	r5, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1cb42:	3207      	adds	r2, #7
	thread_base->prio = priority;
   1cb44:	7385      	strb	r5, [r0, #14]

	thread_base->sched_locked = 0U;
   1cb46:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1cb48:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
   1cb4c:	e9c0 121a 	strd	r1, r2, [r0, #104]	; 0x68
	stack_ptr = (char *)stack + stack_obj_size;
   1cb50:	eb01 0802 	add.w	r8, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1cb54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	node->prev = NULL;
   1cb56:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->sched_locked = 0U;
   1cb5a:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   1cb5c:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1cb5e:	9202      	str	r2, [sp, #8]
   1cb60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1cb62:	9201      	str	r2, [sp, #4]
   1cb64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1cb66:	9200      	str	r2, [sp, #0]
   1cb68:	4642      	mov	r2, r8
   1cb6a:	f7f3 f823 	bl	fbb4 <arch_new_thread>
	if (!_current) {
   1cb6e:	4b05      	ldr	r3, [pc, #20]	; (1cb84 <z_setup_new_thread+0x5c>)
	new_thread->fn_abort = NULL;
   1cb70:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
   1cb74:	689b      	ldr	r3, [r3, #8]
   1cb76:	b103      	cbz	r3, 1cb7a <z_setup_new_thread+0x52>
	new_thread->resource_pool = _current->resource_pool;
   1cb78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   1cb7a:	4640      	mov	r0, r8
   1cb7c:	6763      	str	r3, [r4, #116]	; 0x74
   1cb7e:	b005      	add	sp, #20
   1cb80:	e8bd 81b0 	ldmia.w	sp!, {r4, r5, r7, r8, pc}
   1cb84:	200210b4 	.word	0x200210b4

0001cb88 <z_impl_k_thread_create>:
{
   1cb88:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1cb8a:	2500      	movs	r5, #0
{
   1cb8c:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1cb8e:	9505      	str	r5, [sp, #20]
   1cb90:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
   1cb92:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1cb96:	9504      	str	r5, [sp, #16]
   1cb98:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
   1cb9a:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1cb9c:	9503      	str	r5, [sp, #12]
   1cb9e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1cba0:	9502      	str	r5, [sp, #8]
   1cba2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1cba4:	9501      	str	r5, [sp, #4]
   1cba6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1cba8:	9500      	str	r5, [sp, #0]
   1cbaa:	f7ff ffbd 	bl	1cb28 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1cbae:	1c7b      	adds	r3, r7, #1
   1cbb0:	bf08      	it	eq
   1cbb2:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1cbb6:	d005      	beq.n	1cbc4 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1cbb8:	ea56 0307 	orrs.w	r3, r6, r7
   1cbbc:	d105      	bne.n	1cbca <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   1cbbe:	4620      	mov	r0, r4
   1cbc0:	f7ff fce2 	bl	1c588 <z_sched_start>
}
   1cbc4:	4620      	mov	r0, r4
   1cbc6:	b007      	add	sp, #28
   1cbc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cbca:	4632      	mov	r2, r6
   1cbcc:	463b      	mov	r3, r7
   1cbce:	4903      	ldr	r1, [pc, #12]	; (1cbdc <z_impl_k_thread_create+0x54>)
   1cbd0:	f104 0018 	add.w	r0, r4, #24
   1cbd4:	f000 f916 	bl	1ce04 <z_add_timeout>
   1cbd8:	e7f4      	b.n	1cbc4 <z_impl_k_thread_create+0x3c>
   1cbda:	bf00      	nop
   1cbdc:	000201f7 	.word	0x000201f7

0001cbe0 <z_init_static_threads>:
{
   1cbe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1cbe4:	4e2a      	ldr	r6, [pc, #168]	; (1cc90 <z_init_static_threads+0xb0>)
   1cbe6:	4d2b      	ldr	r5, [pc, #172]	; (1cc94 <z_init_static_threads+0xb4>)
   1cbe8:	46b0      	mov	r8, r6
{
   1cbea:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   1cbec:	42b5      	cmp	r5, r6
   1cbee:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1cbf2:	d310      	bcc.n	1cc16 <z_init_static_threads+0x36>
	k_sched_lock();
   1cbf4:	f7ff fc2e 	bl	1c454 <k_sched_lock>
   1cbf8:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   1cbfc:	f240 36e7 	movw	r6, #999	; 0x3e7
   1cc00:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   1cc02:	4c24      	ldr	r4, [pc, #144]	; (1cc94 <z_init_static_threads+0xb4>)
   1cc04:	f8df a090 	ldr.w	sl, [pc, #144]	; 1cc98 <z_init_static_threads+0xb8>
   1cc08:	4544      	cmp	r4, r8
   1cc0a:	d321      	bcc.n	1cc50 <z_init_static_threads+0x70>
}
   1cc0c:	b006      	add	sp, #24
   1cc0e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   1cc12:	f7ff bc6d 	b.w	1c4f0 <k_sched_unlock>
		z_setup_new_thread(
   1cc16:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1cc1a:	9305      	str	r3, [sp, #20]
   1cc1c:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1cc20:	9304      	str	r3, [sp, #16]
   1cc22:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1cc26:	9303      	str	r3, [sp, #12]
   1cc28:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1cc2c:	9302      	str	r3, [sp, #8]
   1cc2e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1cc32:	9301      	str	r3, [sp, #4]
   1cc34:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1cc38:	9300      	str	r3, [sp, #0]
   1cc3a:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1cc3e:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1cc42:	f7ff ff71 	bl	1cb28 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1cc46:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1cc4a:	65dd      	str	r5, [r3, #92]	; 0x5c
   1cc4c:	4625      	mov	r5, r4
   1cc4e:	e7cd      	b.n	1cbec <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1cc50:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1cc52:	1c5a      	adds	r2, r3, #1
   1cc54:	d00d      	beq.n	1cc72 <z_init_static_threads+0x92>
   1cc56:	4630      	mov	r0, r6
   1cc58:	4639      	mov	r1, r7
					    K_MSEC(thread_data->init_delay));
   1cc5a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1cc5e:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1cc62:	42b9      	cmp	r1, r7
   1cc64:	bf08      	it	eq
   1cc66:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   1cc68:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1cc6a:	d104      	bne.n	1cc76 <z_init_static_threads+0x96>
	z_sched_start(thread);
   1cc6c:	4628      	mov	r0, r5
   1cc6e:	f7ff fc8b 	bl	1c588 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1cc72:	3430      	adds	r4, #48	; 0x30
   1cc74:	e7c8      	b.n	1cc08 <z_init_static_threads+0x28>
   1cc76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1cc7a:	2300      	movs	r3, #0
   1cc7c:	f7ef fe16 	bl	c8ac <__aeabi_uldivmod>
   1cc80:	4602      	mov	r2, r0
   1cc82:	460b      	mov	r3, r1
   1cc84:	f105 0018 	add.w	r0, r5, #24
   1cc88:	4651      	mov	r1, sl
   1cc8a:	f000 f8bb 	bl	1ce04 <z_add_timeout>
   1cc8e:	e7f0      	b.n	1cc72 <z_init_static_threads+0x92>
   1cc90:	200200f0 	.word	0x200200f0
   1cc94:	200200f0 	.word	0x200200f0
   1cc98:	000201f7 	.word	0x000201f7

0001cc9c <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   1cc9c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   1cca0:	b08a      	sub	sp, #40	; 0x28
   1cca2:	4604      	mov	r4, r0
   1cca4:	461d      	mov	r5, r3
   1cca6:	e9cd 2108 	strd	r2, r1, [sp, #32]
	z_impl_k_queue_init(queue);
   1ccaa:	f003 fa1c 	bl	200e6 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   1ccae:	f104 0618 	add.w	r6, r4, #24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1ccb2:	2000      	movs	r0, #0
   1ccb4:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
   1ccb8:	f04f 0800 	mov.w	r8, #0
   1ccbc:	f04f 0900 	mov.w	r9, #0
   1ccc0:	e9cd 5003 	strd	r5, r0, [sp, #12]
   1ccc4:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1ccc8:	e9cd 8906 	strd	r8, r9, [sp, #24]
   1cccc:	4630      	mov	r0, r6
   1ccce:	4b05      	ldr	r3, [pc, #20]	; (1cce4 <k_work_q_start+0x48>)
   1ccd0:	9400      	str	r4, [sp, #0]
   1ccd2:	f7ff ff59 	bl	1cb88 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1ccd6:	4630      	mov	r0, r6
   1ccd8:	4903      	ldr	r1, [pc, #12]	; (1cce8 <k_work_q_start+0x4c>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   1ccda:	b00a      	add	sp, #40	; 0x28
   1ccdc:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
   1cce0:	f003 bb1e 	b.w	20320 <z_impl_k_thread_name_set>
   1cce4:	0001d495 	.word	0x0001d495
   1cce8:	00021d30 	.word	0x00021d30

0001ccec <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   1ccec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ccf0:	4606      	mov	r6, r0
   1ccf2:	460d      	mov	r5, r1
   1ccf4:	4690      	mov	r8, r2
   1ccf6:	4699      	mov	r9, r3
	__asm__ volatile(
   1ccf8:	f04f 0320 	mov.w	r3, #32
   1ccfc:	f3ef 8711 	mrs	r7, BASEPRI
   1cd00:	f383 8811 	msr	BASEPRI, r3
   1cd04:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   1cd08:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   1cd0a:	b17b      	cbz	r3, 1cd2c <k_delayed_work_submit_to_queue+0x40>
   1cd0c:	4283      	cmp	r3, r0
   1cd0e:	d128      	bne.n	1cd62 <k_delayed_work_submit_to_queue+0x76>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   1cd10:	4628      	mov	r0, r5
   1cd12:	f003 fb23 	bl	2035c <work_cancel>
		/* -EALREADY indicates the work has already completed so this
		 * is likely a recurring work.
		 */
		if (err == -EALREADY) {
   1cd16:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
   1cd1a:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   1cd1c:	d008      	beq.n	1cd30 <k_delayed_work_submit_to_queue+0x44>
			err = 0;
		} else if (err < 0) {
   1cd1e:	2800      	cmp	r0, #0
   1cd20:	da07      	bge.n	1cd32 <k_delayed_work_submit_to_queue+0x46>
	__asm__ volatile(
   1cd22:	f387 8811 	msr	BASEPRI, r7
   1cd26:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   1cd2a:	e00f      	b.n	1cd4c <k_delayed_work_submit_to_queue+0x60>
	if (work->work_q == work_q) {
   1cd2c:	2800      	cmp	r0, #0
   1cd2e:	d0ef      	beq.n	1cd10 <k_delayed_work_submit_to_queue+0x24>
	int err = 0;
   1cd30:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1cd32:	ea58 0309 	orrs.w	r3, r8, r9
	work->work_q = work_q;
   1cd36:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1cd38:	d10b      	bne.n	1cd52 <k_delayed_work_submit_to_queue+0x66>
   1cd3a:	f387 8811 	msr	BASEPRI, r7
   1cd3e:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   1cd42:	4629      	mov	r1, r5
   1cd44:	4630      	mov	r0, r6
   1cd46:	f003 faf0 	bl	2032a <k_work_submit_to_queue>
		return 0;
   1cd4a:	2400      	movs	r4, #0
}
   1cd4c:	4620      	mov	r0, r4
   1cd4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   1cd52:	4642      	mov	r2, r8
   1cd54:	464b      	mov	r3, r9
   1cd56:	4904      	ldr	r1, [pc, #16]	; (1cd68 <k_delayed_work_submit_to_queue+0x7c>)
   1cd58:	f105 0010 	add.w	r0, r5, #16
   1cd5c:	f000 f852 	bl	1ce04 <z_add_timeout>
   1cd60:	e7df      	b.n	1cd22 <k_delayed_work_submit_to_queue+0x36>
		err = -EADDRINUSE;
   1cd62:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   1cd66:	e7dc      	b.n	1cd22 <k_delayed_work_submit_to_queue+0x36>
   1cd68:	00020353 	.word	0x00020353

0001cd6c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   1cd6c:	4b03      	ldr	r3, [pc, #12]	; (1cd7c <elapsed+0x10>)
   1cd6e:	681b      	ldr	r3, [r3, #0]
   1cd70:	b90b      	cbnz	r3, 1cd76 <elapsed+0xa>
   1cd72:	f7f2 be27 	b.w	f9c4 <z_clock_elapsed>
}
   1cd76:	2000      	movs	r0, #0
   1cd78:	4770      	bx	lr
   1cd7a:	bf00      	nop
   1cd7c:	200210f4 	.word	0x200210f4

0001cd80 <remove_timeout>:
{
   1cd80:	b530      	push	{r4, r5, lr}
   1cd82:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1cd84:	b168      	cbz	r0, 1cda2 <remove_timeout+0x22>
   1cd86:	4a0a      	ldr	r2, [pc, #40]	; (1cdb0 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   1cd88:	6852      	ldr	r2, [r2, #4]
   1cd8a:	4290      	cmp	r0, r2
   1cd8c:	d009      	beq.n	1cda2 <remove_timeout+0x22>
	if (next(t) != NULL) {
   1cd8e:	b143      	cbz	r3, 1cda2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1cd90:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1cd94:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1cd98:	1912      	adds	r2, r2, r4
   1cd9a:	eb45 0101 	adc.w	r1, r5, r1
   1cd9e:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   1cda2:	6842      	ldr	r2, [r0, #4]
   1cda4:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1cda6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1cda8:	2300      	movs	r3, #0
	node->prev = NULL;
   1cdaa:	e9c0 3300 	strd	r3, r3, [r0]
}
   1cdae:	bd30      	pop	{r4, r5, pc}
   1cdb0:	2002006c 	.word	0x2002006c

0001cdb4 <next_timeout>:
	return list->head == list;
   1cdb4:	4b11      	ldr	r3, [pc, #68]	; (1cdfc <next_timeout+0x48>)

static int32_t next_timeout(void)
{
   1cdb6:	b510      	push	{r4, lr}
   1cdb8:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1cdba:	429c      	cmp	r4, r3
   1cdbc:	bf08      	it	eq
   1cdbe:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1cdc0:	f7ff ffd4 	bl	1cd6c <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   1cdc4:	b1bc      	cbz	r4, 1cdf6 <next_timeout+0x42>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
   1cdc6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1cdca:	1a12      	subs	r2, r2, r0
   1cdcc:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1cdd0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1cdd4:	f173 0100 	sbcs.w	r1, r3, #0
   1cdd8:	da0d      	bge.n	1cdf6 <next_timeout+0x42>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
   1cdda:	4619      	mov	r1, r3
   1cddc:	2a00      	cmp	r2, #0
   1cdde:	f171 0300 	sbcs.w	r3, r1, #0
   1cde2:	4610      	mov	r0, r2
   1cde4:	da00      	bge.n	1cde8 <next_timeout+0x34>
   1cde6:	2000      	movs	r0, #0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1cde8:	4b05      	ldr	r3, [pc, #20]	; (1ce00 <next_timeout+0x4c>)
   1cdea:	691b      	ldr	r3, [r3, #16]
   1cdec:	b113      	cbz	r3, 1cdf4 <next_timeout+0x40>
   1cdee:	4298      	cmp	r0, r3
   1cdf0:	bfa8      	it	ge
   1cdf2:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1cdf4:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1cdf6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1cdfa:	e7f5      	b.n	1cde8 <next_timeout+0x34>
   1cdfc:	2002006c 	.word	0x2002006c
   1ce00:	200210b4 	.word	0x200210b4

0001ce04 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   1ce04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ce08:	9101      	str	r1, [sp, #4]
   1ce0a:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1ce0c:	1c4b      	adds	r3, r1, #1
   1ce0e:	bf08      	it	eq
   1ce10:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1ce14:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1ce16:	d06b      	beq.n	1cef0 <z_add_timeout+0xec>
#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1ce18:	f06f 0301 	mvn.w	r3, #1
   1ce1c:	f04f 3bff 	mov.w	fp, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
   1ce20:	1c54      	adds	r4, r2, #1
   1ce22:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1ce26:	ebb3 0804 	subs.w	r8, r3, r4
   1ce2a:	eb6b 0905 	sbc.w	r9, fp, r5
   1ce2e:	f1b8 0f00 	cmp.w	r8, #0
   1ce32:	f179 0300 	sbcs.w	r3, r9, #0
   1ce36:	db0f      	blt.n	1ce58 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   1ce38:	f7ff ff98 	bl	1cd6c <elapsed>
   1ce3c:	f06f 0301 	mvn.w	r3, #1
   1ce40:	4a32      	ldr	r2, [pc, #200]	; (1cf0c <z_add_timeout+0x108>)
   1ce42:	e9d2 1c00 	ldrd	r1, ip, [r2]
   1ce46:	1a5b      	subs	r3, r3, r1
   1ce48:	eb6b 020c 	sbc.w	r2, fp, ip
   1ce4c:	1b1e      	subs	r6, r3, r4
   1ce4e:	eb62 0705 	sbc.w	r7, r2, r5
   1ce52:	1a34      	subs	r4, r6, r0
   1ce54:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1ce58:	9b01      	ldr	r3, [sp, #4]
   1ce5a:	f8ca 3008 	str.w	r3, [sl, #8]
	__asm__ volatile(
   1ce5e:	f04f 0320 	mov.w	r3, #32
   1ce62:	f3ef 8611 	mrs	r6, BASEPRI
   1ce66:	f383 8811 	msr	BASEPRI, r3
   1ce6a:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   1ce6e:	f7ff ff7d 	bl	1cd6c <elapsed>
	ticks = MAX(1, ticks);
   1ce72:	2c01      	cmp	r4, #1
   1ce74:	f175 0300 	sbcs.w	r3, r5, #0
   1ce78:	bfbc      	itt	lt
   1ce7a:	2401      	movlt	r4, #1
   1ce7c:	2500      	movlt	r5, #0
	return list->head == list;
   1ce7e:	4b24      	ldr	r3, [pc, #144]	; (1cf10 <z_add_timeout+0x10c>)
		to->dticks = ticks + elapsed();
   1ce80:	1824      	adds	r4, r4, r0
   1ce82:	681a      	ldr	r2, [r3, #0]
   1ce84:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ce88:	429a      	cmp	r2, r3
   1ce8a:	e9ca 4504 	strd	r4, r5, [sl, #16]
   1ce8e:	d001      	beq.n	1ce94 <z_add_timeout+0x90>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1ce90:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   1ce92:	b952      	cbnz	r2, 1ceaa <z_add_timeout+0xa6>
	node->prev = list->tail;
   1ce94:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1ce96:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
   1ce9a:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   1ce9e:	685a      	ldr	r2, [r3, #4]
   1cea0:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   1cea4:	f8c3 a004 	str.w	sl, [r3, #4]
}
   1cea8:	e014      	b.n	1ced4 <z_add_timeout+0xd0>
			if (t->dticks > to->dticks) {
   1ceaa:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   1ceae:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   1ceb2:	4544      	cmp	r4, r8
   1ceb4:	eb75 0109 	sbcs.w	r1, r5, r9
   1ceb8:	da1d      	bge.n	1cef6 <z_add_timeout+0xf2>
				t->dticks -= to->dticks;
   1ceba:	ebb8 0004 	subs.w	r0, r8, r4
   1cebe:	eb69 0105 	sbc.w	r1, r9, r5
   1cec2:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   1cec6:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1cec8:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   1cecc:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   1ced0:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   1ced4:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ced6:	429a      	cmp	r2, r3
   1ced8:	d006      	beq.n	1cee8 <z_add_timeout+0xe4>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1ceda:	4592      	cmp	sl, r2
   1cedc:	d104      	bne.n	1cee8 <z_add_timeout+0xe4>
			z_clock_set_timeout(next_timeout(), false);
   1cede:	f7ff ff69 	bl	1cdb4 <next_timeout>
   1cee2:	2100      	movs	r1, #0
   1cee4:	f7f2 fd08 	bl	f8f8 <z_clock_set_timeout>
	__asm__ volatile(
   1cee8:	f386 8811 	msr	BASEPRI, r6
   1ceec:	f3bf 8f6f 	isb	sy
		}
	}
}
   1cef0:	b003      	add	sp, #12
   1cef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   1cef6:	ebb4 0008 	subs.w	r0, r4, r8
   1cefa:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   1cefe:	42ba      	cmp	r2, r7
   1cf00:	e9ca 0104 	strd	r0, r1, [sl, #16]
   1cf04:	d0c6      	beq.n	1ce94 <z_add_timeout+0x90>
   1cf06:	6812      	ldr	r2, [r2, #0]
   1cf08:	e7c3      	b.n	1ce92 <z_add_timeout+0x8e>
   1cf0a:	bf00      	nop
   1cf0c:	200207a0 	.word	0x200207a0
   1cf10:	2002006c 	.word	0x2002006c

0001cf14 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
   1cf14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cf18:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1cf1a:	f7ff fb8b 	bl	1c634 <z_time_slice>
	__asm__ volatile(
   1cf1e:	f04f 0320 	mov.w	r3, #32
   1cf22:	f3ef 8411 	mrs	r4, BASEPRI
   1cf26:	f383 8811 	msr	BASEPRI, r3
   1cf2a:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1cf2e:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 1cfe0 <z_clock_announce+0xcc>
   1cf32:	4d2a      	ldr	r5, [pc, #168]	; (1cfdc <z_clock_announce+0xc8>)
   1cf34:	4651      	mov	r1, sl
	return list->head == list;
   1cf36:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 1cfe4 <z_clock_announce+0xd0>
   1cf3a:	602e      	str	r6, [r5, #0]
   1cf3c:	f8d5 c000 	ldr.w	ip, [r5]
   1cf40:	f8db 0000 	ldr.w	r0, [fp]
   1cf44:	4662      	mov	r2, ip
   1cf46:	e9da 8900 	ldrd	r8, r9, [sl]
   1cf4a:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1cf4c:	4558      	cmp	r0, fp
   1cf4e:	e9cd 2300 	strd	r2, r3, [sp]
   1cf52:	d00d      	beq.n	1cf70 <z_clock_announce+0x5c>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1cf54:	b160      	cbz	r0, 1cf70 <z_clock_announce+0x5c>
   1cf56:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   1cf5a:	45b4      	cmp	ip, r6
   1cf5c:	41bb      	sbcs	r3, r7
   1cf5e:	da1d      	bge.n	1cf9c <z_clock_announce+0x88>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1cf60:	9b00      	ldr	r3, [sp, #0]
   1cf62:	ebb6 0c03 	subs.w	ip, r6, r3
   1cf66:	9b01      	ldr	r3, [sp, #4]
   1cf68:	eb67 0603 	sbc.w	r6, r7, r3
   1cf6c:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   1cf70:	2600      	movs	r6, #0
	curr_tick += announce_remaining;
   1cf72:	9b00      	ldr	r3, [sp, #0]
	announce_remaining = 0;
   1cf74:	602e      	str	r6, [r5, #0]
	curr_tick += announce_remaining;
   1cf76:	eb13 0208 	adds.w	r2, r3, r8
   1cf7a:	9b01      	ldr	r3, [sp, #4]
   1cf7c:	eb43 0309 	adc.w	r3, r3, r9
   1cf80:	e9c1 2300 	strd	r2, r3, [r1]

	z_clock_set_timeout(next_timeout(), false);
   1cf84:	f7ff ff16 	bl	1cdb4 <next_timeout>
   1cf88:	4631      	mov	r1, r6
   1cf8a:	f7f2 fcb5 	bl	f8f8 <z_clock_set_timeout>
	__asm__ volatile(
   1cf8e:	f384 8811 	msr	BASEPRI, r4
   1cf92:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1cf96:	b003      	add	sp, #12
   1cf98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
   1cf9c:	2200      	movs	r2, #0
   1cf9e:	2300      	movs	r3, #0
		curr_tick += dt;
   1cfa0:	eb18 0806 	adds.w	r8, r8, r6
   1cfa4:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   1cfa8:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   1cfac:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   1cfb0:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   1cfb4:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   1cfb6:	f7ff fee3 	bl	1cd80 <remove_timeout>
   1cfba:	f384 8811 	msr	BASEPRI, r4
   1cfbe:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1cfc2:	6883      	ldr	r3, [r0, #8]
   1cfc4:	4798      	blx	r3
	__asm__ volatile(
   1cfc6:	f04f 0320 	mov.w	r3, #32
   1cfca:	f3ef 8411 	mrs	r4, BASEPRI
   1cfce:	f383 8811 	msr	BASEPRI, r3
   1cfd2:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   1cfd6:	4902      	ldr	r1, [pc, #8]	; (1cfe0 <z_clock_announce+0xcc>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1cfd8:	e7b0      	b.n	1cf3c <z_clock_announce+0x28>
   1cfda:	bf00      	nop
   1cfdc:	200210f4 	.word	0x200210f4
   1cfe0:	200207a0 	.word	0x200207a0
   1cfe4:	2002006c 	.word	0x2002006c

0001cfe8 <z_tick_get>:

int64_t z_tick_get(void)
{
   1cfe8:	b510      	push	{r4, lr}
   1cfea:	f04f 0320 	mov.w	r3, #32
   1cfee:	f3ef 8411 	mrs	r4, BASEPRI
   1cff2:	f383 8811 	msr	BASEPRI, r3
   1cff6:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   1cffa:	f7f2 fce3 	bl	f9c4 <z_clock_elapsed>
   1cffe:	4b06      	ldr	r3, [pc, #24]	; (1d018 <z_tick_get+0x30>)
   1d000:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d004:	1812      	adds	r2, r2, r0
   1d006:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   1d00a:	f384 8811 	msr	BASEPRI, r4
   1d00e:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1d012:	4610      	mov	r0, r2
   1d014:	4619      	mov	r1, r3
   1d016:	bd10      	pop	{r4, pc}
   1d018:	200207a0 	.word	0x200207a0

0001d01c <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1d01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1d01e:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   1d022:	1c56      	adds	r6, r2, #1
   1d024:	f143 0700 	adc.w	r7, r3, #0
   1d028:	2f00      	cmp	r7, #0
   1d02a:	bf08      	it	eq
   1d02c:	2e02      	cmpeq	r6, #2
{
   1d02e:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1d030:	d302      	bcc.n	1d038 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1d032:	490c      	ldr	r1, [pc, #48]	; (1d064 <z_timer_expiration_handler+0x48>)
   1d034:	f7ff fee6 	bl	1ce04 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1d038:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1d03a:	3301      	adds	r3, #1
   1d03c:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1d03e:	6a23      	ldr	r3, [r4, #32]
   1d040:	b10b      	cbz	r3, 1d046 <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   1d042:	4620      	mov	r0, r4
   1d044:	4798      	blx	r3
	return list->head == list;
   1d046:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d04a:	42a5      	cmp	r5, r4
   1d04c:	d008      	beq.n	1d060 <z_timer_expiration_handler+0x44>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1d04e:	b13d      	cbz	r5, 1d060 <z_timer_expiration_handler+0x44>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   1d050:	4628      	mov	r0, r5
   1d052:	f003 f872 	bl	2013a <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
   1d056:	4628      	mov	r0, r5
   1d058:	f003 f8bd 	bl	201d6 <z_ready_thread>
   1d05c:	2300      	movs	r3, #0
   1d05e:	67eb      	str	r3, [r5, #124]	; 0x7c

	arch_thread_return_value_set(thread, 0);
}
   1d060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d062:	bf00      	nop
   1d064:	0001d01d 	.word	0x0001d01d

0001d068 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   1d068:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   1d06c:	4619      	mov	r1, r3
   1d06e:	4606      	mov	r6, r0
   1d070:	4610      	mov	r0, r2
   1d072:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1d076:	1c4c      	adds	r4, r1, #1
   1d078:	bf08      	it	eq
   1d07a:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   1d07e:	4680      	mov	r8, r0
   1d080:	4689      	mov	r9, r1
   1d082:	d047      	beq.n	1d114 <z_impl_k_timer_start+0xac>
   1d084:	4614      	mov	r4, r2
   1d086:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
   1d088:	ea54 0305 	orrs.w	r3, r4, r5
   1d08c:	d016      	beq.n	1d0bc <z_impl_k_timer_start+0x54>
   1d08e:	f06f 0301 	mvn.w	r3, #1
   1d092:	ebb3 0a02 	subs.w	sl, r3, r2
   1d096:	f04f 33ff 	mov.w	r3, #4294967295
   1d09a:	eb63 0b05 	sbc.w	fp, r3, r5
   1d09e:	f1ba 0f00 	cmp.w	sl, #0
   1d0a2:	f17b 0300 	sbcs.w	r3, fp, #0
   1d0a6:	da09      	bge.n	1d0bc <z_impl_k_timer_start+0x54>
		period.ticks = MAX(period.ticks - 1, 1);
   1d0a8:	f112 34ff 	adds.w	r4, r2, #4294967295
   1d0ac:	f145 35ff 	adc.w	r5, r5, #4294967295
   1d0b0:	2c01      	cmp	r4, #1
   1d0b2:	f175 0300 	sbcs.w	r3, r5, #0
   1d0b6:	bfbc      	itt	lt
   1d0b8:	2401      	movlt	r4, #1
   1d0ba:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1d0bc:	f06f 0301 	mvn.w	r3, #1
   1d0c0:	1a1b      	subs	r3, r3, r0
   1d0c2:	9300      	str	r3, [sp, #0]
   1d0c4:	f04f 33ff 	mov.w	r3, #4294967295
   1d0c8:	eb63 0301 	sbc.w	r3, r3, r1
   1d0cc:	9301      	str	r3, [sp, #4]
   1d0ce:	e9dd 2300 	ldrd	r2, r3, [sp]
   1d0d2:	2a00      	cmp	r2, #0
   1d0d4:	f173 0300 	sbcs.w	r3, r3, #0
   1d0d8:	da0c      	bge.n	1d0f4 <z_impl_k_timer_start+0x8c>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1d0da:	f110 38ff 	adds.w	r8, r0, #4294967295
   1d0de:	f141 39ff 	adc.w	r9, r1, #4294967295
   1d0e2:	f1b8 0f00 	cmp.w	r8, #0
   1d0e6:	f179 0300 	sbcs.w	r3, r9, #0
   1d0ea:	bfbc      	itt	lt
   1d0ec:	f04f 0800 	movlt.w	r8, #0
   1d0f0:	f04f 0900 	movlt.w	r9, #0
	}
#endif

	(void)z_abort_timeout(&timer->timeout);
   1d0f4:	4630      	mov	r0, r6
   1d0f6:	f003 f97c 	bl	203f2 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   1d0fa:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1d0fc:	4642      	mov	r2, r8
	timer->status = 0U;
   1d0fe:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1d100:	4630      	mov	r0, r6
   1d102:	464b      	mov	r3, r9
   1d104:	4905      	ldr	r1, [pc, #20]	; (1d11c <z_impl_k_timer_start+0xb4>)
	timer->period = period;
   1d106:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   1d10a:	b002      	add	sp, #8
   1d10c:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1d110:	f7ff be78 	b.w	1ce04 <z_add_timeout>
}
   1d114:	b002      	add	sp, #8
   1d116:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   1d11a:	bf00      	nop
   1d11c:	0001d01d 	.word	0x0001d01d

0001d120 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1d120:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d124:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   1d126:	2301      	movs	r3, #1
{
   1d128:	b089      	sub	sp, #36	; 0x24
	struct _poller poller = { .is_polling = true,
   1d12a:	f88d 3014 	strb.w	r3, [sp, #20]
				  .thread     = _current,
   1d12e:	4b29      	ldr	r3, [pc, #164]	; (1d1d4 <z_impl_k_poll+0xb4>)
{
   1d130:	4616      	mov	r6, r2
	struct _poller poller = { .is_polling = true,
   1d132:	689b      	ldr	r3, [r3, #8]
{
   1d134:	4605      	mov	r5, r0
	struct _poller poller = { .is_polling = true,
   1d136:	9306      	str	r3, [sp, #24]
   1d138:	4b27      	ldr	r3, [pc, #156]	; (1d1d8 <z_impl_k_poll+0xb8>)
   1d13a:	9307      	str	r3, [sp, #28]

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, &poller,
   1d13c:	ea52 0307 	orrs.w	r3, r2, r7
   1d140:	bf0c      	ite	eq
   1d142:	2301      	moveq	r3, #1
   1d144:	2300      	movne	r3, #0
   1d146:	aa05      	add	r2, sp, #20
   1d148:	f003 fa8e 	bl	20668 <register_events>
   1d14c:	4680      	mov	r8, r0
	__asm__ volatile(
   1d14e:	f04f 0320 	mov.w	r3, #32
   1d152:	f3ef 8911 	mrs	r9, BASEPRI
   1d156:	f383 8811 	msr	BASEPRI, r3
   1d15a:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   1d15e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1d162:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   1d166:	b963      	cbnz	r3, 1d182 <z_impl_k_poll+0x62>
		clear_event_registrations(events, events_registered, key);
   1d168:	4601      	mov	r1, r0
   1d16a:	464a      	mov	r2, r9
   1d16c:	4628      	mov	r0, r5
   1d16e:	f003 f9de 	bl	2052e <clear_event_registrations>
	__asm__ volatile(
   1d172:	f389 8811 	msr	BASEPRI, r9
   1d176:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   1d17a:	4620      	mov	r0, r4
   1d17c:	b009      	add	sp, #36	; 0x24
   1d17e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller.is_polling = false;
   1d182:	2300      	movs	r3, #0
   1d184:	f88d 3014 	strb.w	r3, [sp, #20]
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1d188:	ea56 0307 	orrs.w	r3, r6, r7
   1d18c:	d106      	bne.n	1d19c <z_impl_k_poll+0x7c>
   1d18e:	f389 8811 	msr	BASEPRI, r9
   1d192:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1d196:	f06f 040a 	mvn.w	r4, #10
   1d19a:	e7ee      	b.n	1d17a <z_impl_k_poll+0x5a>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1d19c:	aa03      	add	r2, sp, #12
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1d19e:	4649      	mov	r1, r9
   1d1a0:	e9cd 6700 	strd	r6, r7, [sp]
   1d1a4:	480d      	ldr	r0, [pc, #52]	; (1d1dc <z_impl_k_poll+0xbc>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1d1a6:	e9cd 2203 	strd	r2, r2, [sp, #12]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1d1aa:	f7ff fb55 	bl	1c858 <z_pend_curr>
   1d1ae:	4604      	mov	r4, r0
	__asm__ volatile(
   1d1b0:	f04f 0320 	mov.w	r3, #32
   1d1b4:	f3ef 8611 	mrs	r6, BASEPRI
   1d1b8:	f383 8811 	msr	BASEPRI, r3
   1d1bc:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1d1c0:	4632      	mov	r2, r6
   1d1c2:	4641      	mov	r1, r8
   1d1c4:	4628      	mov	r0, r5
   1d1c6:	f003 f9b2 	bl	2052e <clear_event_registrations>
	__asm__ volatile(
   1d1ca:	f386 8811 	msr	BASEPRI, r6
   1d1ce:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1d1d2:	e7d2      	b.n	1d17a <z_impl_k_poll+0x5a>
   1d1d4:	200210b4 	.word	0x200210b4
   1d1d8:	000205bb 	.word	0x000205bb
   1d1dc:	20024328 	.word	0x20024328

0001d1e0 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   1d1e0:	b538      	push	{r3, r4, r5, lr}
   1d1e2:	4603      	mov	r3, r0
	__asm__ volatile(
   1d1e4:	f04f 0220 	mov.w	r2, #32
   1d1e8:	f3ef 8511 	mrs	r5, BASEPRI
   1d1ec:	f382 8811 	msr	BASEPRI, r2
   1d1f0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   1d1f4:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1U;
   1d1f6:	2101      	movs	r1, #1
   1d1f8:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1d1fa:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1d1fc:	4283      	cmp	r3, r0
   1d1fe:	d106      	bne.n	1d20e <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1d200:	f385 8811 	msr	BASEPRI, r5
   1d204:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   1d208:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   1d20a:	4620      	mov	r0, r4
   1d20c:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   1d20e:	e9d0 3200 	ldrd	r3, r2, [r0]
   1d212:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1d214:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1d216:	2300      	movs	r3, #0
	node->prev = NULL;
   1d218:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1d21c:	f003 f9b2 	bl	20584 <signal_poll_event>
	z_reschedule(&lock, key);
   1d220:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1d222:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1d224:	4801      	ldr	r0, [pc, #4]	; (1d22c <z_impl_k_poll_signal_raise+0x4c>)
   1d226:	f7ff f903 	bl	1c430 <z_reschedule>
	return rc;
   1d22a:	e7ee      	b.n	1d20a <z_impl_k_poll_signal_raise+0x2a>
   1d22c:	20024328 	.word	0x20024328

0001d230 <k_malloc>:
K_MEM_POOL_DEFINE(_heap_mem_pool, CONFIG_HEAP_MEM_POOL_MIN_SIZE,
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
   1d230:	4601      	mov	r1, r0
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   1d232:	4801      	ldr	r0, [pc, #4]	; (1d238 <k_malloc+0x8>)
   1d234:	f003 ba87 	b.w	20746 <k_mem_pool_malloc>
   1d238:	20020074 	.word	0x20020074

0001d23c <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   1d23c:	b507      	push	{r0, r1, r2, lr}
   1d23e:	9001      	str	r0, [sp, #4]
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   1d240:	f003 f866 	bl	20310 <k_is_in_isr>
   1d244:	9901      	ldr	r1, [sp, #4]
   1d246:	b948      	cbnz	r0, 1d25c <z_thread_malloc+0x20>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   1d248:	4b07      	ldr	r3, [pc, #28]	; (1d268 <z_thread_malloc+0x2c>)
   1d24a:	689b      	ldr	r3, [r3, #8]
   1d24c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (pool) {
   1d24e:	b13b      	cbz	r3, 1d260 <z_thread_malloc+0x24>
		ret = k_mem_pool_malloc(pool, size);
   1d250:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   1d252:	b003      	add	sp, #12
   1d254:	f85d eb04 	ldr.w	lr, [sp], #4
		ret = k_mem_pool_malloc(pool, size);
   1d258:	f003 ba75 	b.w	20746 <k_mem_pool_malloc>
		pool = _HEAP_MEM_POOL;
   1d25c:	4b03      	ldr	r3, [pc, #12]	; (1d26c <z_thread_malloc+0x30>)
   1d25e:	e7f7      	b.n	1d250 <z_thread_malloc+0x14>
}
   1d260:	b003      	add	sp, #12
   1d262:	f85d fb04 	ldr.w	pc, [sp], #4
   1d266:	bf00      	nop
   1d268:	200210b4 	.word	0x200210b4
   1d26c:	20020074 	.word	0x20020074

0001d270 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1d270:	b140      	cbz	r0, 1d284 <sys_notify_validate+0x14>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1d272:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1d274:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1d278:	2b02      	cmp	r3, #2
   1d27a:	d006      	beq.n	1d28a <sys_notify_validate+0x1a>
   1d27c:	2b03      	cmp	r3, #3
   1d27e:	d004      	beq.n	1d28a <sys_notify_validate+0x1a>
   1d280:	2b01      	cmp	r3, #1
   1d282:	d005      	beq.n	1d290 <sys_notify_validate+0x20>
		return -EINVAL;
   1d284:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1d288:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1d28a:	6803      	ldr	r3, [r0, #0]
   1d28c:	2b00      	cmp	r3, #0
   1d28e:	d0f9      	beq.n	1d284 <sys_notify_validate+0x14>
		notify->result = 0;
   1d290:	2300      	movs	r3, #0
   1d292:	6083      	str	r3, [r0, #8]
   1d294:	4618      	mov	r0, r3
   1d296:	4770      	bx	lr

0001d298 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1d298:	6843      	ldr	r3, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   1d29a:	b510      	push	{r4, lr}
	return method & SYS_NOTIFY_METHOD_MASK;
   1d29c:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1d2a0:	2b02      	cmp	r3, #2
	notify->result = res;
   1d2a2:	6081      	str	r1, [r0, #8]
	switch (method) {
   1d2a4:	d00b      	beq.n	1d2be <sys_notify_finalize+0x26>
   1d2a6:	2b03      	cmp	r3, #3
   1d2a8:	d10c      	bne.n	1d2c4 <sys_notify_finalize+0x2c>
	struct k_poll_signal *sig = NULL;
   1d2aa:	2300      	movs	r3, #0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1d2ac:	6804      	ldr	r4, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1d2ae:	2200      	movs	r2, #0
   1d2b0:	6042      	str	r2, [r0, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1d2b2:	b113      	cbz	r3, 1d2ba <sys_notify_finalize+0x22>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
   1d2b4:	4618      	mov	r0, r3
   1d2b6:	f7ff ff93 	bl	1d1e0 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1d2ba:	4620      	mov	r0, r4
   1d2bc:	bd10      	pop	{r4, pc}
	sys_notify_generic_callback rv = 0;
   1d2be:	2400      	movs	r4, #0
		sig = notify->method.signal;
   1d2c0:	6803      	ldr	r3, [r0, #0]
		break;
   1d2c2:	e7f4      	b.n	1d2ae <sys_notify_finalize+0x16>
	switch (method) {
   1d2c4:	2400      	movs	r4, #0
   1d2c6:	4623      	mov	r3, r4
   1d2c8:	e7f1      	b.n	1d2ae <sys_notify_finalize+0x16>

0001d2ca <arch_printk_char_out>:
}
   1d2ca:	2000      	movs	r0, #0
   1d2cc:	4770      	bx	lr

0001d2ce <str_out>:
{
   1d2ce:	b530      	push	{r4, r5, lr}
   1d2d0:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1d2d2:	680c      	ldr	r4, [r1, #0]
   1d2d4:	1c55      	adds	r5, r2, #1
   1d2d6:	b114      	cbz	r4, 1d2de <str_out+0x10>
   1d2d8:	684b      	ldr	r3, [r1, #4]
   1d2da:	4293      	cmp	r3, r2
   1d2dc:	dc01      	bgt.n	1d2e2 <str_out+0x14>
		ctx->count++;
   1d2de:	608d      	str	r5, [r1, #8]
}
   1d2e0:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1d2e2:	3b01      	subs	r3, #1
   1d2e4:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1d2e6:	bf08      	it	eq
   1d2e8:	2200      	moveq	r2, #0
   1d2ea:	608d      	str	r5, [r1, #8]
   1d2ec:	bf0c      	ite	eq
   1d2ee:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1d2f0:	54a0      	strbne	r0, [r4, r2]
   1d2f2:	e7f5      	b.n	1d2e0 <str_out+0x12>

0001d2f4 <printk>:
{
   1d2f4:	b40f      	push	{r0, r1, r2, r3}
   1d2f6:	b507      	push	{r0, r1, r2, lr}
   1d2f8:	a904      	add	r1, sp, #16
   1d2fa:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1d2fe:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1d300:	f7f0 fc86 	bl	dc10 <vprintk>
}
   1d304:	b003      	add	sp, #12
   1d306:	f85d eb04 	ldr.w	lr, [sp], #4
   1d30a:	b004      	add	sp, #16
   1d30c:	4770      	bx	lr

0001d30e <snprintk>:
{
   1d30e:	b40c      	push	{r2, r3}
   1d310:	b507      	push	{r0, r1, r2, lr}
   1d312:	ab04      	add	r3, sp, #16
   1d314:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1d318:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1d31a:	f7f0 fc87 	bl	dc2c <vsnprintk>
}
   1d31e:	b003      	add	sp, #12
   1d320:	f85d eb04 	ldr.w	lr, [sp], #4
   1d324:	b002      	add	sp, #8
   1d326:	4770      	bx	lr

0001d328 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1d328:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1d32a:	f013 0307 	ands.w	r3, r3, #7
   1d32e:	d105      	bne.n	1d33c <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1d330:	6803      	ldr	r3, [r0, #0]
   1d332:	2b00      	cmp	r3, #0
		evt = EVT_START;
   1d334:	bf0c      	ite	eq
   1d336:	2000      	moveq	r0, #0
   1d338:	2003      	movne	r0, #3
   1d33a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1d33c:	2b02      	cmp	r3, #2
   1d33e:	d105      	bne.n	1d34c <process_recheck+0x24>
		   && (mgr->refs == 0)) {
   1d340:	8b43      	ldrh	r3, [r0, #26]
   1d342:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   1d344:	bf14      	ite	ne
   1d346:	2000      	movne	r0, #0
   1d348:	2004      	moveq	r0, #4
   1d34a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1d34c:	2b01      	cmp	r3, #1
   1d34e:	d105      	bne.n	1d35c <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1d350:	6803      	ldr	r3, [r0, #0]
   1d352:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   1d354:	bf0c      	ite	eq
   1d356:	2000      	moveq	r0, #0
   1d358:	2005      	movne	r0, #5
   1d35a:	4770      	bx	lr
	int evt = EVT_NOP;
   1d35c:	2000      	movs	r0, #0
}
   1d35e:	4770      	bx	lr

0001d360 <notify_one>:
{
   1d360:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1d362:	460d      	mov	r5, r1
   1d364:	4606      	mov	r6, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1d366:	4619      	mov	r1, r3
   1d368:	1d28      	adds	r0, r5, #4
{
   1d36a:	9201      	str	r2, [sp, #4]
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1d36c:	9300      	str	r3, [sp, #0]
   1d36e:	f7ff ff93 	bl	1d298 <sys_notify_finalize>
	if (cb) {
   1d372:	4604      	mov	r4, r0
   1d374:	b140      	cbz	r0, 1d388 <notify_one+0x28>
		cb(mgr, cli, state, res);
   1d376:	e9dd 3200 	ldrd	r3, r2, [sp]
   1d37a:	4629      	mov	r1, r5
   1d37c:	4630      	mov	r0, r6
   1d37e:	46a4      	mov	ip, r4
}
   1d380:	b002      	add	sp, #8
   1d382:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb(mgr, cli, state, res);
   1d386:	4760      	bx	ip
}
   1d388:	b002      	add	sp, #8
   1d38a:	bd70      	pop	{r4, r5, r6, pc}

0001d38c <transition_complete>:
{
   1d38c:	b410      	push	{r4}
	__asm__ volatile(
   1d38e:	f04f 0420 	mov.w	r4, #32
   1d392:	f3ef 8211 	mrs	r2, BASEPRI
   1d396:	f384 8811 	msr	BASEPRI, r4
   1d39a:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1d39e:	6141      	str	r1, [r0, #20]
}
   1d3a0:	f85d 4b04 	ldr.w	r4, [sp], #4
	process_event(mgr, EVT_COMPLETE, key);
   1d3a4:	2101      	movs	r1, #1
   1d3a6:	f7f0 bc55 	b.w	dc54 <process_event>

0001d3aa <validate_args>:
{
   1d3aa:	b510      	push	{r4, lr}
   1d3ac:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1d3ae:	b140      	cbz	r0, 1d3c2 <validate_args+0x18>
   1d3b0:	b139      	cbz	r1, 1d3c2 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1d3b2:	1d08      	adds	r0, r1, #4
   1d3b4:	f7ff ff5c 	bl	1d270 <sys_notify_validate>
	if ((rv == 0)
   1d3b8:	b928      	cbnz	r0, 1d3c6 <validate_args+0x1c>
	    && ((cli->notify.flags
   1d3ba:	68a3      	ldr	r3, [r4, #8]
   1d3bc:	f033 0303 	bics.w	r3, r3, #3
   1d3c0:	d001      	beq.n	1d3c6 <validate_args+0x1c>
		rv = -EINVAL;
   1d3c2:	f06f 0015 	mvn.w	r0, #21
}
   1d3c6:	bd10      	pop	{r4, pc}

0001d3c8 <onoff_manager_init>:
{
   1d3c8:	b538      	push	{r3, r4, r5, lr}
   1d3ca:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1d3cc:	4605      	mov	r5, r0
   1d3ce:	b158      	cbz	r0, 1d3e8 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1d3d0:	b151      	cbz	r1, 1d3e8 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1d3d2:	680b      	ldr	r3, [r1, #0]
   1d3d4:	b143      	cbz	r3, 1d3e8 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1d3d6:	684b      	ldr	r3, [r1, #4]
   1d3d8:	b133      	cbz	r3, 1d3e8 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1d3da:	221c      	movs	r2, #28
   1d3dc:	2100      	movs	r1, #0
   1d3de:	f001 f963 	bl	1e6a8 <memset>
	return 0;
   1d3e2:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1d3e4:	612c      	str	r4, [r5, #16]
}
   1d3e6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1d3e8:	f06f 0015 	mvn.w	r0, #21
   1d3ec:	e7fb      	b.n	1d3e6 <onoff_manager_init+0x1e>

0001d3ee <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1d3ee:	b570      	push	{r4, r5, r6, lr}
   1d3f0:	4604      	mov	r4, r0
   1d3f2:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1d3f4:	f7ff ffd9 	bl	1d3aa <validate_args>

	if (rv < 0) {
   1d3f8:	1e05      	subs	r5, r0, #0
   1d3fa:	db31      	blt.n	1d460 <onoff_request+0x72>
   1d3fc:	f04f 0320 	mov.w	r3, #32
   1d400:	f3ef 8111 	mrs	r1, BASEPRI
   1d404:	f383 8811 	msr	BASEPRI, r3
   1d408:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1d40c:	f64f 75ff 	movw	r5, #65535	; 0xffff
   1d410:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1d412:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1d414:	42ab      	cmp	r3, r5
   1d416:	f000 0207 	and.w	r2, r0, #7
   1d41a:	d02e      	beq.n	1d47a <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1d41c:	2a02      	cmp	r2, #2
   1d41e:	d10e      	bne.n	1d43e <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1d420:	3301      	adds	r3, #1
   1d422:	8363      	strh	r3, [r4, #26]
	rv = state;
   1d424:	4615      	mov	r5, r2
		notify = true;
   1d426:	2301      	movs	r3, #1
	__asm__ volatile(
   1d428:	f381 8811 	msr	BASEPRI, r1
   1d42c:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1d430:	b1b3      	cbz	r3, 1d460 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   1d432:	2300      	movs	r3, #0
   1d434:	4631      	mov	r1, r6
   1d436:	4620      	mov	r0, r4
   1d438:	f7ff ff92 	bl	1d360 <notify_one>
   1d43c:	e010      	b.n	1d460 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   1d43e:	0783      	lsls	r3, r0, #30
   1d440:	d001      	beq.n	1d446 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   1d442:	2a06      	cmp	r2, #6
   1d444:	d10e      	bne.n	1d464 <onoff_request+0x76>
	parent->next = child;
   1d446:	2300      	movs	r3, #0
   1d448:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   1d44a:	6863      	ldr	r3, [r4, #4]
   1d44c:	b993      	cbnz	r3, 1d474 <onoff_request+0x86>
	list->head = node;
   1d44e:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   1d452:	4615      	mov	r5, r2
   1d454:	b962      	cbnz	r2, 1d470 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   1d456:	460a      	mov	r2, r1
   1d458:	4620      	mov	r0, r4
   1d45a:	2102      	movs	r1, #2
   1d45c:	f7f0 fbfa 	bl	dc54 <process_event>
		}
	}

	return rv;
}
   1d460:	4628      	mov	r0, r5
   1d462:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   1d464:	2a05      	cmp	r2, #5
   1d466:	bf0c      	ite	eq
   1d468:	f06f 0522 	mvneq.w	r5, #34	; 0x22
   1d46c:	f06f 0504 	mvnne.w	r5, #4
   1d470:	2300      	movs	r3, #0
   1d472:	e7d9      	b.n	1d428 <onoff_request+0x3a>
	parent->next = child;
   1d474:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1d476:	6066      	str	r6, [r4, #4]
}
   1d478:	e7eb      	b.n	1d452 <onoff_request+0x64>
		rv = -EAGAIN;
   1d47a:	f06f 050a 	mvn.w	r5, #10
   1d47e:	e7f7      	b.n	1d470 <onoff_request+0x82>

0001d480 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1d480:	4604      	mov	r4, r0
   1d482:	b508      	push	{r3, lr}
   1d484:	4608      	mov	r0, r1
   1d486:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1d488:	461a      	mov	r2, r3
   1d48a:	47a0      	blx	r4
	return z_impl_k_current_get();
   1d48c:	f7ff fade 	bl	1ca4c <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1d490:	f7f2 ff22 	bl	102d8 <z_impl_k_thread_abort>

0001d494 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   1d494:	b510      	push	{r4, lr}
   1d496:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   1d498:	f04f 33ff 	mov.w	r3, #4294967295
   1d49c:	f04f 32ff 	mov.w	r2, #4294967295
   1d4a0:	4620      	mov	r0, r4
   1d4a2:	f7fe ff4f 	bl	1c344 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   1d4a6:	4603      	mov	r3, r0
   1d4a8:	2800      	cmp	r0, #0
   1d4aa:	d0f5      	beq.n	1d498 <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   1d4ac:	6842      	ldr	r2, [r0, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d4ae:	3308      	adds	r3, #8
   1d4b0:	e8d3 1fef 	ldaex	r1, [r3]
   1d4b4:	f021 0c01 	bic.w	ip, r1, #1
   1d4b8:	e8c3 cfee 	stlex	lr, ip, [r3]
   1d4bc:	f1be 0f00 	cmp.w	lr, #0
   1d4c0:	d1f6      	bne.n	1d4b0 <z_work_q_main+0x1c>
		__ASSERT(handler != NULL, "handler must be provided");

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   1d4c2:	07cb      	lsls	r3, r1, #31
   1d4c4:	d500      	bpl.n	1d4c8 <z_work_q_main+0x34>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   1d4c6:	4790      	blx	r2
	z_impl_k_yield();
   1d4c8:	f7ff fa54 	bl	1c974 <z_impl_k_yield>
   1d4cc:	e7e4      	b.n	1d498 <z_work_q_main+0x4>

0001d4ce <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1d4ce:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1d4d0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1d4d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   1d4d8:	bf2c      	ite	cs
   1d4da:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   1d4de:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   1d4e2:	4770      	bx	lr

0001d4e4 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   1d4e4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   1d4e8:	6880      	ldr	r0, [r0, #8]
   1d4ea:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   1d4ee:	bf2c      	ite	cs
   1d4f0:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   1d4f4:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   1d4f8:	4770      	bx	lr

0001d4fa <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) & 1;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1d4fa:	2201      	movs	r2, #1
{
   1d4fc:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1d4fe:	f7ff ffe6 	bl	1d4ce <chunk_field>
}
   1d502:	0840      	lsrs	r0, r0, #1
   1d504:	bd08      	pop	{r3, pc}

0001d506 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1d506:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1d508:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1d50c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1d510:	d308      	bcc.n	1d524 <set_chunk_used+0x1e>
		if (used) {
   1d512:	684b      	ldr	r3, [r1, #4]
   1d514:	b11a      	cbz	r2, 1d51e <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
   1d516:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1;
   1d51a:	604b      	str	r3, [r1, #4]
   1d51c:	4770      	bx	lr
   1d51e:	f023 0301 	bic.w	r3, r3, #1
   1d522:	e7fa      	b.n	1d51a <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   1d524:	884b      	ldrh	r3, [r1, #2]
   1d526:	b11a      	cbz	r2, 1d530 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
   1d528:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
   1d52c:	804b      	strh	r3, [r1, #2]
		}
	}
}
   1d52e:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
   1d530:	f023 0301 	bic.w	r3, r3, #1
   1d534:	e7fa      	b.n	1d52c <set_chunk_used+0x26>

0001d536 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1d536:	0053      	lsls	r3, r2, #1
   1d538:	2201      	movs	r2, #1
   1d53a:	f7ff bfd3 	b.w	1d4e4 <chunk_set>

0001d53e <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   1d53e:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   1d540:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   1d542:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1d546:	bf2c      	ite	cs
   1d548:	2002      	movcs	r0, #2
   1d54a:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   1d54c:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   1d54e:	fab0 f080 	clz	r0, r0
}
   1d552:	f1c0 001f 	rsb	r0, r0, #31
   1d556:	4770      	bx	lr

0001d558 <merge_chunks>:
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   1d558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d55a:	4616      	mov	r6, r2
   1d55c:	4604      	mov	r4, r0
   1d55e:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1d560:	f7ff ffcb 	bl	1d4fa <chunk_size>
   1d564:	4631      	mov	r1, r6
   1d566:	4605      	mov	r5, r0
   1d568:	4620      	mov	r0, r4
   1d56a:	f7ff ffc6 	bl	1d4fa <chunk_size>
   1d56e:	182b      	adds	r3, r5, r0

	set_chunk_size(h, lc, newsz);
   1d570:	461a      	mov	r2, r3
   1d572:	4639      	mov	r1, r7
   1d574:	4620      	mov	r0, r4
   1d576:	9301      	str	r3, [sp, #4]
   1d578:	f7ff ffdd 	bl	1d536 <set_chunk_size>
	return c + chunk_size(h, c);
   1d57c:	4631      	mov	r1, r6
   1d57e:	4620      	mov	r0, r4
   1d580:	f7ff ffbb 	bl	1d4fa <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1d584:	2200      	movs	r2, #0
   1d586:	1831      	adds	r1, r6, r0
   1d588:	4620      	mov	r0, r4
   1d58a:	9b01      	ldr	r3, [sp, #4]
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   1d58c:	b003      	add	sp, #12
   1d58e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1d592:	f7ff bfa7 	b.w	1d4e4 <chunk_set>

0001d596 <split_chunks>:
{
   1d596:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d598:	4614      	mov	r4, r2
   1d59a:	460e      	mov	r6, r1
   1d59c:	4605      	mov	r5, r0
	size_t sz0 = chunk_size(h, lc);
   1d59e:	f7ff ffac 	bl	1d4fa <chunk_size>
	size_t lsz = rc - lc;
   1d5a2:	1ba3      	subs	r3, r4, r6
	size_t rsz = sz0 - lsz;
   1d5a4:	1b32      	subs	r2, r6, r4
   1d5a6:	1817      	adds	r7, r2, r0
	set_chunk_size(h, lc, lsz);
   1d5a8:	4631      	mov	r1, r6
   1d5aa:	461a      	mov	r2, r3
   1d5ac:	4628      	mov	r0, r5
   1d5ae:	9301      	str	r3, [sp, #4]
   1d5b0:	f7ff ffc1 	bl	1d536 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   1d5b4:	463a      	mov	r2, r7
   1d5b6:	4621      	mov	r1, r4
   1d5b8:	4628      	mov	r0, r5
   1d5ba:	f7ff ffbc 	bl	1d536 <set_chunk_size>
   1d5be:	9b01      	ldr	r3, [sp, #4]
   1d5c0:	2200      	movs	r2, #0
   1d5c2:	4621      	mov	r1, r4
   1d5c4:	4628      	mov	r0, r5
   1d5c6:	f7ff ff8d 	bl	1d4e4 <chunk_set>
	return c + chunk_size(h, c);
   1d5ca:	4621      	mov	r1, r4
   1d5cc:	4628      	mov	r0, r5
   1d5ce:	f7ff ff94 	bl	1d4fa <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1d5d2:	463b      	mov	r3, r7
   1d5d4:	1821      	adds	r1, r4, r0
   1d5d6:	2200      	movs	r2, #0
   1d5d8:	4628      	mov	r0, r5
}
   1d5da:	b003      	add	sp, #12
   1d5dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1d5e0:	f7ff bf80 	b.w	1d4e4 <chunk_set>

0001d5e4 <free_list_remove_bidx>:
{
   1d5e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d5e8:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   1d5ea:	2203      	movs	r2, #3
   1d5ec:	460e      	mov	r6, r1
   1d5ee:	4604      	mov	r4, r0
   1d5f0:	f7ff ff6d 	bl	1d4ce <chunk_field>
	if (next_free_chunk(h, c) == c) {
   1d5f4:	4286      	cmp	r6, r0
   1d5f6:	4605      	mov	r5, r0
   1d5f8:	f107 0804 	add.w	r8, r7, #4
   1d5fc:	d10b      	bne.n	1d616 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   1d5fe:	2301      	movs	r3, #1
   1d600:	fa03 f707 	lsl.w	r7, r3, r7
   1d604:	68e3      	ldr	r3, [r4, #12]
   1d606:	ea23 0307 	bic.w	r3, r3, r7
   1d60a:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   1d60c:	2300      	movs	r3, #0
   1d60e:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   1d612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   1d616:	4631      	mov	r1, r6
   1d618:	2202      	movs	r2, #2
   1d61a:	4620      	mov	r0, r4
   1d61c:	f7ff ff57 	bl	1d4ce <chunk_field>
   1d620:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   1d622:	462b      	mov	r3, r5
   1d624:	4601      	mov	r1, r0
   1d626:	2203      	movs	r2, #3
   1d628:	4620      	mov	r0, r4
		b->next = second;
   1d62a:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   1d62e:	f7ff ff59 	bl	1d4e4 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1d632:	4633      	mov	r3, r6
   1d634:	4629      	mov	r1, r5
   1d636:	4620      	mov	r0, r4
}
   1d638:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1d63c:	2202      	movs	r2, #2
   1d63e:	f7ff bf51 	b.w	1d4e4 <chunk_set>

0001d642 <free_list_remove>:
{
   1d642:	b538      	push	{r3, r4, r5, lr}
   1d644:	4604      	mov	r4, r0
   1d646:	460d      	mov	r5, r1
	return sizeof(void *) > 4 || chunks > 0x7fff;
   1d648:	f7ff ff57 	bl	1d4fa <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1;
   1d64c:	68a3      	ldr	r3, [r4, #8]
   1d64e:	4601      	mov	r1, r0
   1d650:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1d654:	d301      	bcc.n	1d65a <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   1d656:	2801      	cmp	r0, #1
   1d658:	d009      	beq.n	1d66e <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1d65a:	4620      	mov	r0, r4
   1d65c:	f7ff ff6f 	bl	1d53e <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   1d660:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   1d662:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1d664:	4620      	mov	r0, r4
}
   1d666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   1d66a:	f7ff bfbb 	b.w	1d5e4 <free_list_remove_bidx>
}
   1d66e:	bd38      	pop	{r3, r4, r5, pc}

0001d670 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, size_t sz)
{
   1d670:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1d674:	4604      	mov	r4, r0
   1d676:	460f      	mov	r7, r1
	int bi = bucket_idx(h, sz);
   1d678:	f7ff ff61 	bl	1d53e <bucket_idx>
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bi > bucket_idx(h, h->len)) {
   1d67c:	68a1      	ldr	r1, [r4, #8]
	int bi = bucket_idx(h, sz);
   1d67e:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   1d680:	4620      	mov	r0, r4
   1d682:	f7ff ff5c 	bl	1d53e <bucket_idx>
   1d686:	42a8      	cmp	r0, r5
   1d688:	da04      	bge.n	1d694 <alloc_chunk+0x24>
		return 0;
   1d68a:	2100      	movs	r1, #0
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1d68c:	4608      	mov	r0, r1
   1d68e:	b003      	add	sp, #12
   1d690:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (b->next) {
   1d694:	eb04 0985 	add.w	r9, r4, r5, lsl #2
   1d698:	f8d9 8010 	ldr.w	r8, [r9, #16]
   1d69c:	f1b8 0f00 	cmp.w	r8, #0
   1d6a0:	d019      	beq.n	1d6d6 <alloc_chunk+0x66>
   1d6a2:	2603      	movs	r6, #3
			chunkid_t c = b->next;
   1d6a4:	f8d9 1010 	ldr.w	r1, [r9, #16]
			if (chunk_size(h, c) >= sz) {
   1d6a8:	4620      	mov	r0, r4
   1d6aa:	9101      	str	r1, [sp, #4]
   1d6ac:	f7ff ff25 	bl	1d4fa <chunk_size>
   1d6b0:	42b8      	cmp	r0, r7
   1d6b2:	9901      	ldr	r1, [sp, #4]
   1d6b4:	d305      	bcc.n	1d6c2 <alloc_chunk+0x52>
				free_list_remove_bidx(h, c, bi);
   1d6b6:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   1d6b8:	4620      	mov	r0, r4
   1d6ba:	f7ff ff93 	bl	1d5e4 <free_list_remove_bidx>
   1d6be:	9901      	ldr	r1, [sp, #4]
		return c;
   1d6c0:	e7e4      	b.n	1d68c <alloc_chunk+0x1c>
	return chunk_field(h, c, FREE_NEXT);
   1d6c2:	2203      	movs	r2, #3
   1d6c4:	4620      	mov	r0, r4
   1d6c6:	f7ff ff02 	bl	1d4ce <chunk_field>
		} while (--i && b->next != first);
   1d6ca:	3e01      	subs	r6, #1
			b->next = next_free_chunk(h, c);
   1d6cc:	f8c9 0010 	str.w	r0, [r9, #16]
		} while (--i && b->next != first);
   1d6d0:	d001      	beq.n	1d6d6 <alloc_chunk+0x66>
   1d6d2:	4580      	cmp	r8, r0
   1d6d4:	d1e6      	bne.n	1d6a4 <alloc_chunk+0x34>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   1d6d6:	f04f 32ff 	mov.w	r2, #4294967295
   1d6da:	68e3      	ldr	r3, [r4, #12]
   1d6dc:	3501      	adds	r5, #1
   1d6de:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0) {
   1d6e0:	401a      	ands	r2, r3
   1d6e2:	d0d2      	beq.n	1d68a <alloc_chunk+0x1a>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   1d6e4:	fa92 f2a2 	rbit	r2, r2
   1d6e8:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1d6ec:	1d13      	adds	r3, r2, #4
   1d6ee:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   1d6f2:	9101      	str	r1, [sp, #4]
   1d6f4:	e7e0      	b.n	1d6b8 <alloc_chunk+0x48>

0001d6f6 <free_list_add>:
{
   1d6f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d6fa:	4604      	mov	r4, r0
   1d6fc:	460d      	mov	r5, r1
	return sizeof(void *) > 4 || chunks > 0x7fff;
   1d6fe:	f7ff fefc 	bl	1d4fa <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1;
   1d702:	68a3      	ldr	r3, [r4, #8]
   1d704:	4601      	mov	r1, r0
   1d706:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1d70a:	d301      	bcc.n	1d710 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   1d70c:	2801      	cmp	r0, #1
   1d70e:	d035      	beq.n	1d77c <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1d710:	4620      	mov	r0, r4
   1d712:	f7ff ff14 	bl	1d53e <bucket_idx>
	if (b->next == 0) {
   1d716:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1d71a:	6916      	ldr	r6, [r2, #16]
   1d71c:	b99e      	cbnz	r6, 1d746 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   1d71e:	2301      	movs	r3, #1
   1d720:	fa03 f000 	lsl.w	r0, r3, r0
   1d724:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   1d726:	4629      	mov	r1, r5
   1d728:	4303      	orrs	r3, r0
   1d72a:	60e3      	str	r3, [r4, #12]
   1d72c:	4620      	mov	r0, r4
		b->next = c;
   1d72e:	6115      	str	r5, [r2, #16]
   1d730:	462b      	mov	r3, r5
   1d732:	2202      	movs	r2, #2
   1d734:	f7ff fed6 	bl	1d4e4 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1d738:	2203      	movs	r2, #3
   1d73a:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   1d73c:	4620      	mov	r0, r4
}
   1d73e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1d742:	f7ff becf 	b.w	1d4e4 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   1d746:	2202      	movs	r2, #2
   1d748:	4631      	mov	r1, r6
   1d74a:	4620      	mov	r0, r4
   1d74c:	f7ff febf 	bl	1d4ce <chunk_field>
   1d750:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1d752:	4603      	mov	r3, r0
   1d754:	2202      	movs	r2, #2
   1d756:	4629      	mov	r1, r5
   1d758:	4620      	mov	r0, r4
   1d75a:	f7ff fec3 	bl	1d4e4 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1d75e:	4633      	mov	r3, r6
   1d760:	2203      	movs	r2, #3
   1d762:	4629      	mov	r1, r5
   1d764:	4620      	mov	r0, r4
   1d766:	f7ff febd 	bl	1d4e4 <chunk_set>
   1d76a:	2203      	movs	r2, #3
   1d76c:	4639      	mov	r1, r7
   1d76e:	462b      	mov	r3, r5
   1d770:	4620      	mov	r0, r4
   1d772:	f7ff feb7 	bl	1d4e4 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1d776:	2202      	movs	r2, #2
   1d778:	4631      	mov	r1, r6
   1d77a:	e7df      	b.n	1d73c <free_list_add+0x46>
   1d77c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d780 <sys_heap_free>:
{
   1d780:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (mem == NULL) {
   1d782:	2900      	cmp	r1, #0
   1d784:	d052      	beq.n	1d82c <sys_heap_free+0xac>
	struct z_heap *h = heap->heap;
   1d786:	6805      	ldr	r5, [r0, #0]
	set_chunk_used(h, c, false);
   1d788:	2200      	movs	r2, #0
	return big_heap(h) ? 8 : 4;
   1d78a:	68ab      	ldr	r3, [r5, #8]
   1d78c:	4628      	mov	r0, r5
   1d78e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1d792:	bf2c      	ite	cs
   1d794:	2408      	movcs	r4, #8
   1d796:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1d798:	1b09      	subs	r1, r1, r4
   1d79a:	1b4c      	subs	r4, r1, r5
   1d79c:	bf48      	it	mi
   1d79e:	3407      	addmi	r4, #7
   1d7a0:	10e4      	asrs	r4, r4, #3
	set_chunk_used(h, c, false);
   1d7a2:	4621      	mov	r1, r4
   1d7a4:	f7ff feaf 	bl	1d506 <set_chunk_used>
	return c + chunk_size(h, c);
   1d7a8:	4621      	mov	r1, r4
   1d7aa:	f7ff fea6 	bl	1d4fa <chunk_size>
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   1d7ae:	2201      	movs	r2, #1
	return c + chunk_size(h, c);
   1d7b0:	1821      	adds	r1, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   1d7b2:	4628      	mov	r0, r5
   1d7b4:	9101      	str	r1, [sp, #4]
   1d7b6:	f7ff fe8a 	bl	1d4ce <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   1d7ba:	f010 0f01 	tst.w	r0, #1
   1d7be:	9901      	ldr	r1, [sp, #4]
   1d7c0:	d10b      	bne.n	1d7da <sys_heap_free+0x5a>
		free_list_remove(h, right_chunk(h, c));
   1d7c2:	4628      	mov	r0, r5
   1d7c4:	f7ff ff3d 	bl	1d642 <free_list_remove>
	return c + chunk_size(h, c);
   1d7c8:	4621      	mov	r1, r4
   1d7ca:	4628      	mov	r0, r5
   1d7cc:	f7ff fe95 	bl	1d4fa <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1d7d0:	4621      	mov	r1, r4
   1d7d2:	1822      	adds	r2, r4, r0
   1d7d4:	4628      	mov	r0, r5
   1d7d6:	f7ff febf 	bl	1d558 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   1d7da:	2200      	movs	r2, #0
   1d7dc:	4621      	mov	r1, r4
   1d7de:	4628      	mov	r0, r5
   1d7e0:	f7ff fe75 	bl	1d4ce <chunk_field>
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   1d7e4:	2201      	movs	r2, #1
	return c - chunk_field(h, c, LEFT_SIZE);
   1d7e6:	1a21      	subs	r1, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   1d7e8:	4628      	mov	r0, r5
   1d7ea:	9101      	str	r1, [sp, #4]
   1d7ec:	f7ff fe6f 	bl	1d4ce <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   1d7f0:	f010 0601 	ands.w	r6, r0, #1
   1d7f4:	9901      	ldr	r1, [sp, #4]
   1d7f6:	d112      	bne.n	1d81e <sys_heap_free+0x9e>
		free_list_remove(h, left_chunk(h, c));
   1d7f8:	4628      	mov	r0, r5
   1d7fa:	f7ff ff22 	bl	1d642 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   1d7fe:	4621      	mov	r1, r4
   1d800:	4632      	mov	r2, r6
   1d802:	4628      	mov	r0, r5
   1d804:	f7ff fe63 	bl	1d4ce <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   1d808:	4622      	mov	r2, r4
   1d80a:	1a21      	subs	r1, r4, r0
   1d80c:	4628      	mov	r0, r5
   1d80e:	f7ff fea3 	bl	1d558 <merge_chunks>
   1d812:	4621      	mov	r1, r4
   1d814:	4632      	mov	r2, r6
   1d816:	4628      	mov	r0, r5
   1d818:	f7ff fe59 	bl	1d4ce <chunk_field>
   1d81c:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   1d81e:	4621      	mov	r1, r4
   1d820:	4628      	mov	r0, r5
}
   1d822:	b002      	add	sp, #8
   1d824:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_list_add(h, c);
   1d828:	f7ff bf65 	b.w	1d6f6 <free_list_add>
}
   1d82c:	b002      	add	sp, #8
   1d82e:	bd70      	pop	{r4, r5, r6, pc}

0001d830 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1d830:	b570      	push	{r4, r5, r6, lr}
	if (bytes == 0) {
   1d832:	b909      	cbnz	r1, 1d838 <sys_heap_alloc+0x8>
		return NULL;
   1d834:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   1d836:	bd70      	pop	{r4, r5, r6, pc}
	struct z_heap *h = heap->heap;
   1d838:	6805      	ldr	r5, [r0, #0]
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   1d83a:	1dcc      	adds	r4, r1, #7
	return big_heap(h) ? 8 : 4;
   1d83c:	68ab      	ldr	r3, [r5, #8]
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1d83e:	4628      	mov	r0, r5
   1d840:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1d844:	bf2c      	ite	cs
   1d846:	2208      	movcs	r2, #8
   1d848:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   1d84a:	4414      	add	r4, r2
   1d84c:	08e4      	lsrs	r4, r4, #3
   1d84e:	4621      	mov	r1, r4
   1d850:	f7ff ff0e 	bl	1d670 <alloc_chunk>
	if (c == 0) {
   1d854:	4606      	mov	r6, r0
   1d856:	2800      	cmp	r0, #0
   1d858:	d0ec      	beq.n	1d834 <sys_heap_alloc+0x4>
	if (chunk_size(h, c) > chunk_sz) {
   1d85a:	4601      	mov	r1, r0
   1d85c:	4628      	mov	r0, r5
   1d85e:	f7ff fe4c 	bl	1d4fa <chunk_size>
   1d862:	42a0      	cmp	r0, r4
   1d864:	d909      	bls.n	1d87a <sys_heap_alloc+0x4a>
		split_chunks(h, c, c + chunk_sz);
   1d866:	4434      	add	r4, r6
   1d868:	4631      	mov	r1, r6
   1d86a:	4628      	mov	r0, r5
   1d86c:	4622      	mov	r2, r4
   1d86e:	f7ff fe92 	bl	1d596 <split_chunks>
		free_list_add(h, c + chunk_sz);
   1d872:	4621      	mov	r1, r4
   1d874:	4628      	mov	r0, r5
   1d876:	f7ff ff3e 	bl	1d6f6 <free_list_add>
	set_chunk_used(h, c, true);
   1d87a:	4628      	mov	r0, r5
   1d87c:	2201      	movs	r2, #1
   1d87e:	4631      	mov	r1, r6
   1d880:	f7ff fe41 	bl	1d506 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   1d884:	68ab      	ldr	r3, [r5, #8]
   1d886:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1d88a:	bf2c      	ite	cs
   1d88c:	2008      	movcs	r0, #8
   1d88e:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1d890:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   1d894:	4428      	add	r0, r5
	return chunk_mem(h, c);
   1d896:	e7ce      	b.n	1d836 <sys_heap_alloc+0x6>

0001d898 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   1d898:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   1d89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d89e:	bf2c      	ite	cs
   1d8a0:	2508      	movcs	r5, #8
   1d8a2:	2504      	movcc	r5, #4
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   1d8a4:	2300      	movs	r3, #0
	bytes -= heap_footer_bytes(bytes);
   1d8a6:	1b55      	subs	r5, r2, r5
	h->chunk0_hdr_area = 0;
   1d8a8:	2200      	movs	r2, #0
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1d8aa:	1dcc      	adds	r4, r1, #7
   1d8ac:	f024 0407 	bic.w	r4, r4, #7
	heap->heap = h;
   1d8b0:	6004      	str	r4, [r0, #0]
	h->chunk0_hdr_area = 0;
   1d8b2:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
   1d8b6:	2300      	movs	r3, #0
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1d8b8:	440d      	add	r5, r1
   1d8ba:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   1d8be:	1b2d      	subs	r5, r5, r4
   1d8c0:	08ed      	lsrs	r5, r5, #3

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1d8c2:	4629      	mov	r1, r5
   1d8c4:	4620      	mov	r0, r4
	h->len = buf_sz;
   1d8c6:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   1d8c8:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1d8ca:	f7ff fe38 	bl	1d53e <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1d8ce:	0086      	lsls	r6, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1d8d0:	1c41      	adds	r1, r0, #1
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   1d8d2:	4618      	mov	r0, r3
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   1d8d4:	361b      	adds	r6, #27
   1d8d6:	08f6      	lsrs	r6, r6, #3
	for (int i = 0; i < nb_buckets; i++) {
   1d8d8:	f104 0210 	add.w	r2, r4, #16
   1d8dc:	428b      	cmp	r3, r1
   1d8de:	db29      	blt.n	1d934 <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   1d8e0:	4632      	mov	r2, r6
   1d8e2:	4620      	mov	r0, r4
   1d8e4:	2100      	movs	r1, #0
   1d8e6:	f7ff fe26 	bl	1d536 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   1d8ea:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   1d8ec:	4620      	mov	r0, r4
   1d8ee:	2201      	movs	r2, #1
   1d8f0:	2100      	movs	r1, #0
   1d8f2:	f7ff fe08 	bl	1d506 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   1d8f6:	463a      	mov	r2, r7
   1d8f8:	4631      	mov	r1, r6
   1d8fa:	f7ff fe1c 	bl	1d536 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1d8fe:	4633      	mov	r3, r6
   1d900:	4631      	mov	r1, r6
   1d902:	4620      	mov	r0, r4
   1d904:	2200      	movs	r2, #0
   1d906:	f7ff fded 	bl	1d4e4 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   1d90a:	4629      	mov	r1, r5
   1d90c:	4620      	mov	r0, r4
   1d90e:	2200      	movs	r2, #0
   1d910:	f7ff fe11 	bl	1d536 <set_chunk_size>
   1d914:	463b      	mov	r3, r7
   1d916:	4629      	mov	r1, r5
   1d918:	4620      	mov	r0, r4
   1d91a:	2200      	movs	r2, #0
   1d91c:	f7ff fde2 	bl	1d4e4 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   1d920:	4629      	mov	r1, r5
   1d922:	4620      	mov	r0, r4
   1d924:	2201      	movs	r2, #1
   1d926:	f7ff fdee 	bl	1d506 <set_chunk_used>

	free_list_add(h, chunk0_size);
   1d92a:	4631      	mov	r1, r6
}
   1d92c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   1d930:	f7ff bee1 	b.w	1d6f6 <free_list_add>
		h->buckets[i].next = 0;
   1d934:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   1d938:	3301      	adds	r3, #1
   1d93a:	e7cf      	b.n	1d8dc <sys_heap_init+0x44>

0001d93c <_to_x>:
{
   1d93c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d93e:	4603      	mov	r3, r0
   1d940:	4604      	mov	r4, r0
		unsigned int d = n % base;
   1d942:	fbb1 f0f2 	udiv	r0, r1, r2
   1d946:	fb02 1510 	mls	r5, r2, r0, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   1d94a:	2d09      	cmp	r5, #9
   1d94c:	460f      	mov	r7, r1
   1d94e:	bf8c      	ite	hi
   1d950:	2627      	movhi	r6, #39	; 0x27
   1d952:	2600      	movls	r6, #0
		n /= base;
   1d954:	4601      	mov	r1, r0
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   1d956:	4620      	mov	r0, r4
   1d958:	3530      	adds	r5, #48	; 0x30
   1d95a:	4435      	add	r5, r6
	} while (n);
   1d95c:	4297      	cmp	r7, r2
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   1d95e:	f800 5b01 	strb.w	r5, [r0], #1
	} while (n);
   1d962:	d206      	bcs.n	1d972 <_to_x+0x36>
	*buf = 0;
   1d964:	2200      	movs	r2, #0
   1d966:	7002      	strb	r2, [r0, #0]
	len = buf - start;
   1d968:	4622      	mov	r2, r4
   1d96a:	1ac0      	subs	r0, r0, r3
	for (buf--; buf > start; buf--, start++) {
   1d96c:	429a      	cmp	r2, r3
   1d96e:	d802      	bhi.n	1d976 <_to_x+0x3a>
}
   1d970:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d972:	4604      	mov	r4, r0
   1d974:	e7e5      	b.n	1d942 <_to_x+0x6>
		char tmp = *buf;
   1d976:	7811      	ldrb	r1, [r2, #0]
		*buf = *start;
   1d978:	781c      	ldrb	r4, [r3, #0]
   1d97a:	f802 4901 	strb.w	r4, [r2], #-1
		*start = tmp;
   1d97e:	f803 1b01 	strb.w	r1, [r3], #1
	for (buf--; buf > start; buf--, start++) {
   1d982:	e7f3      	b.n	1d96c <_to_x+0x30>

0001d984 <_rlrshift>:
	*v = (*v & 1) + (*v >> 1);
   1d984:	2100      	movs	r1, #0
{
   1d986:	b570      	push	{r4, r5, r6, lr}
	*v = (*v & 1) + (*v >> 1);
   1d988:	e9d0 6500 	ldrd	r6, r5, [r0]
   1d98c:	0872      	lsrs	r2, r6, #1
   1d98e:	f006 0301 	and.w	r3, r6, #1
   1d992:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
   1d996:	189b      	adds	r3, r3, r2
   1d998:	ea4f 0455 	mov.w	r4, r5, lsr #1
   1d99c:	eb44 0101 	adc.w	r1, r4, r1
   1d9a0:	e9c0 3100 	strd	r3, r1, [r0]
}
   1d9a4:	bd70      	pop	{r4, r5, r6, pc}

0001d9a6 <_ldiv5>:
{
   1d9a6:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint64_t rem = *v, quot = 0U, q;
   1d9a8:	e9d0 3200 	ldrd	r3, r2, [r0]
		q = (uint64_t)(hi / 5U) << shifts[i];
   1d9ac:	2705      	movs	r7, #5
	rem += 2U;
   1d9ae:	3302      	adds	r3, #2
   1d9b0:	f142 0200 	adc.w	r2, r2, #0
		q = (uint64_t)(hi / 5U) << shifts[i];
   1d9b4:	fbb2 fef7 	udiv	lr, r2, r7
   1d9b8:	f04f 0c00 	mov.w	ip, #0
		rem -= q * 5U;
   1d9bc:	fb07 f10e 	mul.w	r1, r7, lr
   1d9c0:	ebb3 060c 	subs.w	r6, r3, ip
   1d9c4:	eb62 0101 	sbc.w	r1, r2, r1
		hi = rem >> shifts[i];
   1d9c8:	08f2      	lsrs	r2, r6, #3
   1d9ca:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
		q = (uint64_t)(hi / 5U) << shifts[i];
   1d9ce:	fbb2 f1f7 	udiv	r1, r2, r7
   1d9d2:	00ca      	lsls	r2, r1, #3
		quot += q;
   1d9d4:	eb1c 0402 	adds.w	r4, ip, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   1d9d8:	ea4f 7351 	mov.w	r3, r1, lsr #29
		quot += q;
   1d9dc:	eb4e 0503 	adc.w	r5, lr, r3
		rem -= q * 5U;
   1d9e0:	fba2 2307 	umull	r2, r3, r2, r7
   1d9e4:	1ab3      	subs	r3, r6, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   1d9e6:	fbb3 f3f7 	udiv	r3, r3, r7
		quot += q;
   1d9ea:	18e4      	adds	r4, r4, r3
   1d9ec:	f145 0500 	adc.w	r5, r5, #0
	*v = quot;
   1d9f0:	e9c0 4500 	strd	r4, r5, [r0]
}
   1d9f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001d9f6 <_get_digit>:
	if (*digit_count > 0) {
   1d9f6:	680b      	ldr	r3, [r1, #0]
{
   1d9f8:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
   1d9fa:	2b00      	cmp	r3, #0
   1d9fc:	dd10      	ble.n	1da20 <_get_digit+0x2a>
		*digit_count -= 1;
   1d9fe:	3b01      	subs	r3, #1
   1da00:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
   1da02:	210a      	movs	r1, #10
   1da04:	6802      	ldr	r2, [r0, #0]
   1da06:	6844      	ldr	r4, [r0, #4]
   1da08:	fba2 5601 	umull	r5, r6, r2, r1
   1da0c:	fb01 6604 	mla	r6, r1, r4, r6
		*fr &= 0x0FFFFFFFFFFFFFFFull;
   1da10:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
   1da14:	e9c0 5300 	strd	r5, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   1da18:	0f31      	lsrs	r1, r6, #28
   1da1a:	3130      	adds	r1, #48	; 0x30
}
   1da1c:	4608      	mov	r0, r1
   1da1e:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
   1da20:	2130      	movs	r1, #48	; 0x30
   1da22:	e7fb      	b.n	1da1c <_get_digit+0x26>

0001da24 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1da24:	4770      	bx	lr

0001da26 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   1da26:	f7fe b80d 	b.w	1ba44 <SystemInit>

0001da2a <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   1da2a:	2300      	movs	r3, #0
	list->head = NULL;
   1da2c:	e9c0 3300 	strd	r3, r3, [r0]
}
   1da30:	4770      	bx	lr

0001da32 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   1da32:	6803      	ldr	r3, [r0, #0]
   1da34:	b923      	cbnz	r3, 1da40 <log_list_add_tail+0xe>
		list->head = msg;
   1da36:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   1da38:	2300      	movs	r3, #0
	list->tail = msg;
   1da3a:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   1da3c:	600b      	str	r3, [r1, #0]
}
   1da3e:	4770      	bx	lr
		list->tail->next = msg;
   1da40:	6843      	ldr	r3, [r0, #4]
   1da42:	6019      	str	r1, [r3, #0]
   1da44:	e7f8      	b.n	1da38 <log_list_add_tail+0x6>

0001da46 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   1da46:	6800      	ldr	r0, [r0, #0]
   1da48:	4770      	bx	lr

0001da4a <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
   1da4a:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
   1da4c:	b10b      	cbz	r3, 1da52 <log_list_head_get+0x8>
		list->head = list->head->next;
   1da4e:	681a      	ldr	r2, [r3, #0]
   1da50:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
   1da52:	4618      	mov	r0, r3
   1da54:	4770      	bx	lr

0001da56 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   1da56:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1da58:	f7f1 f990 	bl	ed7c <log_msg_chunk_alloc>

	if (msg != NULL) {
   1da5c:	b118      	cbz	r0, 1da66 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   1da5e:	2301      	movs	r3, #1
   1da60:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1da62:	2300      	movs	r3, #0
   1da64:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   1da66:	bd08      	pop	{r3, pc}

0001da68 <k_cycle_get_32_wrapper>:
   1da68:	f7f1 bfc6 	b.w	f9f8 <z_timer_cycle_get_32>

0001da6c <dummy_timestamp>:
   1da6c:	2000      	movs	r0, #0
   1da6e:	4770      	bx	lr

0001da70 <z_log_get_s_mask>:
{
   1da70:	b5f0      	push	{r4, r5, r6, r7, lr}
   1da72:	4605      	mov	r5, r0
	uint32_t mask = 0;
   1da74:	2000      	movs	r0, #0
				mask |= BIT(arg);
   1da76:	2701      	movs	r7, #1
	uint32_t arg = 0;
   1da78:	4603      	mov	r3, r0
	bool arm = false;
   1da7a:	4602      	mov	r2, r0
	while ((curr = *str++) && arg < nargs) {
   1da7c:	f815 4b01 	ldrb.w	r4, [r5], #1
   1da80:	b10c      	cbz	r4, 1da86 <z_log_get_s_mask+0x16>
   1da82:	428b      	cmp	r3, r1
   1da84:	d300      	bcc.n	1da88 <z_log_get_s_mask+0x18>
}
   1da86:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   1da88:	2c25      	cmp	r4, #37	; 0x25
   1da8a:	d102      	bne.n	1da92 <z_log_get_s_mask+0x22>
			arm = !arm;
   1da8c:	f082 0201 	eor.w	r2, r2, #1
   1da90:	e7f4      	b.n	1da7c <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   1da92:	2a00      	cmp	r2, #0
   1da94:	d0f2      	beq.n	1da7c <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1da96:	f044 0620 	orr.w	r6, r4, #32
   1da9a:	3e61      	subs	r6, #97	; 0x61
   1da9c:	2e19      	cmp	r6, #25
   1da9e:	d8ed      	bhi.n	1da7c <z_log_get_s_mask+0xc>
			if (curr == 's') {
   1daa0:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   1daa2:	bf04      	itt	eq
   1daa4:	fa07 f203 	lsleq.w	r2, r7, r3
   1daa8:	4310      	orreq	r0, r2
			arg++;
   1daaa:	3301      	adds	r3, #1
			arm = false;
   1daac:	2200      	movs	r2, #0
   1daae:	e7e5      	b.n	1da7c <z_log_get_s_mask+0xc>

0001dab0 <log_0>:
{
   1dab0:	b513      	push	{r0, r1, r4, lr}
   1dab2:	4604      	mov	r4, r0
   1dab4:	9101      	str	r1, [sp, #4]
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   1dab6:	f7ff ffce 	bl	1da56 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1daba:	b130      	cbz	r0, 1daca <log_0+0x1a>
		msg_finalize(msg, src_level);
   1dabc:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   1dabe:	6104      	str	r4, [r0, #16]
}
   1dac0:	b002      	add	sp, #8
   1dac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   1dac6:	f7f1 b87b 	b.w	ebc0 <msg_finalize>
}
   1daca:	b002      	add	sp, #8
   1dacc:	bd10      	pop	{r4, pc}

0001dace <log_1>:
{
   1dace:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1dad0:	460c      	mov	r4, r1
   1dad2:	4611      	mov	r1, r2
   1dad4:	4605      	mov	r5, r0
   1dad6:	9101      	str	r1, [sp, #4]
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1dad8:	f7ff ffbd 	bl	1da56 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1dadc:	b160      	cbz	r0, 1daf8 <log_1+0x2a>
		msg->str = str;
   1dade:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   1dae0:	2501      	movs	r5, #1
   1dae2:	7a42      	ldrb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   1dae4:	6144      	str	r4, [r0, #20]
		msg->hdr.params.std.nargs = 1U;
   1dae6:	f365 1207 	bfi	r2, r5, #4, #4
   1daea:	7242      	strb	r2, [r0, #9]
		msg_finalize(msg, src_level);
   1daec:	9901      	ldr	r1, [sp, #4]
}
   1daee:	b003      	add	sp, #12
   1daf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		msg_finalize(msg, src_level);
   1daf4:	f7f1 b864 	b.w	ebc0 <msg_finalize>
}
   1daf8:	b003      	add	sp, #12
   1dafa:	bd30      	pop	{r4, r5, pc}

0001dafc <log_2>:
{
   1dafc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1dafe:	460e      	mov	r6, r1
   1db00:	4619      	mov	r1, r3
   1db02:	4607      	mov	r7, r0
   1db04:	4615      	mov	r5, r2
   1db06:	9101      	str	r1, [sp, #4]
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1db08:	f7ff ffa5 	bl	1da56 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1db0c:	b168      	cbz	r0, 1db2a <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   1db0e:	2202      	movs	r2, #2
   1db10:	7a43      	ldrb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1db12:	e9c0 6505 	strd	r6, r5, [r0, #20]
		msg->hdr.params.std.nargs = 2U;
   1db16:	f362 1307 	bfi	r3, r2, #4, #4
   1db1a:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   1db1c:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   1db1e:	6107      	str	r7, [r0, #16]
}
   1db20:	b003      	add	sp, #12
   1db22:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		msg_finalize(msg, src_level);
   1db26:	f7f1 b84b 	b.w	ebc0 <msg_finalize>
}
   1db2a:	b003      	add	sp, #12
   1db2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001db2e <log_3>:
{
   1db2e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1db32:	460f      	mov	r7, r1
   1db34:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   1db38:	4680      	mov	r8, r0
   1db3a:	4616      	mov	r6, r2
   1db3c:	461d      	mov	r5, r3
   1db3e:	9101      	str	r1, [sp, #4]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1db40:	f7ff ff89 	bl	1da56 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1db44:	b178      	cbz	r0, 1db66 <log_3+0x38>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   1db46:	2203      	movs	r2, #3
   1db48:	7a43      	ldrb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1db4a:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->hdr.params.std.nargs = 3U;
   1db4e:	f362 1307 	bfi	r3, r2, #4, #4
   1db52:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   1db54:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   1db56:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->payload.single.args[2] = arg3;
   1db5a:	61c5      	str	r5, [r0, #28]
}
   1db5c:	b002      	add	sp, #8
   1db5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   1db62:	f7f1 b82d 	b.w	ebc0 <msg_finalize>
}
   1db66:	b002      	add	sp, #8
   1db68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001db6c <log_n>:
{
   1db6c:	b510      	push	{r4, lr}
   1db6e:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   1db70:	f000 f899 	bl	1dca6 <log_msg_create_n>
		if (msg == NULL) {
   1db74:	b120      	cbz	r0, 1db80 <log_n+0x14>
		msg_finalize(msg, src_level);
   1db76:	4621      	mov	r1, r4
}
   1db78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   1db7c:	f7f1 b820 	b.w	ebc0 <msg_finalize>
}
   1db80:	bd10      	pop	{r4, pc}

0001db82 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   1db82:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1db86:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1db88:	8903      	ldrh	r3, [r0, #8]
{
   1db8a:	460e      	mov	r6, r1
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1db8c:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   1db90:	42a3      	cmp	r3, r4
{
   1db92:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
   1db96:	d803      	bhi.n	1dba0 <log_msg_hexdump_data_op+0x1e>
		*length = 0;
   1db98:	2300      	movs	r3, #0
   1db9a:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   1db9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   1dba0:	6811      	ldr	r1, [r2, #0]
   1dba2:	4421      	add	r1, r4
   1dba4:	4299      	cmp	r1, r3
		*length = available_len - offset;
   1dba6:	bf84      	itt	hi
   1dba8:	1b19      	subhi	r1, r3, r4
   1dbaa:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1dbac:	2b0c      	cmp	r3, #12
	req_len = *length;
   1dbae:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1dbb2:	d92b      	bls.n	1dc0c <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   1dbb4:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   1dbb6:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   1dbba:	d82e      	bhi.n	1dc1a <log_msg_hexdump_data_op+0x98>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1dbbc:	2308      	movs	r3, #8
		head_data = msg->payload.ext.data.bytes;
   1dbbe:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1dbc0:	454b      	cmp	r3, r9
   1dbc2:	bf28      	it	cs
   1dbc4:	464b      	movcs	r3, r9
   1dbc6:	4420      	add	r0, r4
   1dbc8:	461d      	mov	r5, r3
			(void)memcpy(&head_data[offset], data, cpy_len);
   1dbca:	461a      	mov	r2, r3
		if (put_op) {
   1dbcc:	b317      	cbz	r7, 1dc14 <log_msg_hexdump_data_op+0x92>
			(void)memcpy(&head_data[offset], data, cpy_len);
   1dbce:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   1dbd0:	f000 fd3f 	bl	1e652 <memcpy>
		req_len -= cpy_len;
   1dbd4:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   1dbd8:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   1dbda:	f1b9 0f00 	cmp.w	r9, #0
   1dbde:	d0dd      	beq.n	1db9c <log_msg_hexdump_data_op+0x1a>
   1dbe0:	f1b8 0f00 	cmp.w	r8, #0
   1dbe4:	d0da      	beq.n	1db9c <log_msg_hexdump_data_op+0x1a>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   1dbe6:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1dbea:	454d      	cmp	r5, r9
   1dbec:	bf28      	it	cs
   1dbee:	464d      	movcs	r5, r9
		if (put_op) {
   1dbf0:	1d20      	adds	r0, r4, #4
			(void)memcpy(&cont->payload.bytes[offset],
   1dbf2:	462a      	mov	r2, r5
   1dbf4:	4440      	add	r0, r8
		if (put_op) {
   1dbf6:	b1bf      	cbz	r7, 1dc28 <log_msg_hexdump_data_op+0xa6>
			(void)memcpy(&cont->payload.bytes[offset],
   1dbf8:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   1dbfa:	f000 fd2a 	bl	1e652 <memcpy>
		offset = 0;
   1dbfe:	2400      	movs	r4, #0
		cont = cont->next;
   1dc00:	f8d8 8000 	ldr.w	r8, [r8]
		req_len -= cpy_len;
   1dc04:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   1dc08:	442e      	add	r6, r5
   1dc0a:	e7e6      	b.n	1dbda <log_msg_hexdump_data_op+0x58>
	struct log_msg_cont *cont = NULL;
   1dc0c:	f04f 0800 	mov.w	r8, #0
		head_data = msg->payload.single.bytes;
   1dc10:	3014      	adds	r0, #20
	if (offset < chunk_len) {
   1dc12:	e7d5      	b.n	1dbc0 <log_msg_hexdump_data_op+0x3e>
			(void)memcpy(data, &head_data[offset], cpy_len);
   1dc14:	4601      	mov	r1, r0
   1dc16:	4630      	mov	r0, r6
   1dc18:	e7da      	b.n	1dbd0 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   1dc1a:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   1dc1c:	2c1b      	cmp	r4, #27
   1dc1e:	d9dc      	bls.n	1dbda <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   1dc20:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   1dc24:	3c1c      	subs	r4, #28
   1dc26:	e7f9      	b.n	1dc1c <log_msg_hexdump_data_op+0x9a>
			(void)memcpy(data, &cont->payload.bytes[offset],
   1dc28:	4601      	mov	r1, r0
   1dc2a:	4630      	mov	r0, r6
   1dc2c:	e7e5      	b.n	1dbfa <log_msg_hexdump_data_op+0x78>

0001dc2e <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1dc2e:	3004      	adds	r0, #4
   1dc30:	e8d0 3fef 	ldaex	r3, [r0]
   1dc34:	3301      	adds	r3, #1
   1dc36:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1dc3a:	2a00      	cmp	r2, #0
   1dc3c:	d1f8      	bne.n	1dc30 <log_msg_get+0x2>
}
   1dc3e:	4770      	bx	lr

0001dc40 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   1dc40:	7a40      	ldrb	r0, [r0, #9]
}
   1dc42:	0900      	lsrs	r0, r0, #4
   1dc44:	4770      	bx	lr

0001dc46 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   1dc46:	7a43      	ldrb	r3, [r0, #9]
   1dc48:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   1dc4c:	ea4f 1213 	mov.w	r2, r3, lsr #4
   1dc50:	d216      	bcs.n	1dc80 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1dc52:	2a03      	cmp	r2, #3
   1dc54:	d803      	bhi.n	1dc5e <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   1dc56:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1dc5a:	6948      	ldr	r0, [r1, #20]
   1dc5c:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   1dc5e:	2901      	cmp	r1, #1
   1dc60:	d803      	bhi.n	1dc6a <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   1dc62:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1dc66:	6988      	ldr	r0, [r1, #24]
   1dc68:	4770      	bx	lr
	cont = msg->payload.ext.next;
   1dc6a:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   1dc6c:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   1dc6e:	2906      	cmp	r1, #6
   1dc70:	d803      	bhi.n	1dc7a <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   1dc72:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1dc76:	6848      	ldr	r0, [r1, #4]
   1dc78:	4770      	bx	lr
		cont = cont->next;
   1dc7a:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   1dc7c:	3907      	subs	r1, #7
		cont = cont->next;
   1dc7e:	e7f6      	b.n	1dc6e <log_msg_arg_get+0x28>
		return 0;
   1dc80:	2000      	movs	r0, #0
}
   1dc82:	4770      	bx	lr

0001dc84 <log_msg_put>:
{
   1dc84:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1dc86:	1d02      	adds	r2, r0, #4
   1dc88:	e8d2 1fef 	ldaex	r1, [r2]
   1dc8c:	3901      	subs	r1, #1
   1dc8e:	e8c2 1fec 	stlex	ip, r1, [r2]
   1dc92:	f1bc 0f00 	cmp.w	ip, #0
   1dc96:	d1f7      	bne.n	1dc88 <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   1dc98:	685b      	ldr	r3, [r3, #4]
   1dc9a:	b90b      	cbnz	r3, 1dca0 <log_msg_put+0x1c>
		msg_free(msg);
   1dc9c:	f7f1 b882 	b.w	eda4 <msg_free>
}
   1dca0:	4770      	bx	lr

0001dca2 <log_msg_str_get>:
}
   1dca2:	6900      	ldr	r0, [r0, #16]
   1dca4:	4770      	bx	lr

0001dca6 <log_msg_create_n>:
{
   1dca6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dcaa:	4681      	mov	r9, r0
   1dcac:	4688      	mov	r8, r1
   1dcae:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1dcb0:	f7f1 f864 	bl	ed7c <log_msg_chunk_alloc>
	if (msg != NULL) {
   1dcb4:	4604      	mov	r4, r0
   1dcb6:	b330      	cbz	r0, 1dd06 <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   1dcb8:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   1dcba:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1dcbc:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   1dcbe:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1dcc0:	8107      	strh	r7, [r0, #8]
   1dcc2:	d909      	bls.n	1dcd8 <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   1dcc4:	2202      	movs	r2, #2
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   1dcc6:	f1a5 0a02 	sub.w	sl, r5, #2
	msg->hdr.params.generic.ext = 1;
   1dcca:	8102      	strh	r2, [r0, #8]
	next = &msg->payload.ext.next;
   1dccc:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   1dcd0:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   1dcd2:	f1ba 0f00 	cmp.w	sl, #0
   1dcd6:	dc0e      	bgt.n	1dcf6 <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
   1dcd8:	7a63      	ldrb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1dcda:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   1dcdc:	f365 1307 	bfi	r3, r5, #4, #4
		msg->str = str;
   1dce0:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   1dce4:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1dce6:	d818      	bhi.n	1dd1a <log_msg_create_n+0x74>
		(void)memcpy(msg->payload.single.args, args,
   1dce8:	4641      	mov	r1, r8
   1dcea:	00aa      	lsls	r2, r5, #2
   1dcec:	f104 0014 	add.w	r0, r4, #20
   1dcf0:	f000 fcaf 	bl	1e652 <memcpy>
	while (nargs != 0U) {
   1dcf4:	e007      	b.n	1dd06 <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1dcf6:	f7f1 f841 	bl	ed7c <log_msg_chunk_alloc>
		if (cont == NULL) {
   1dcfa:	4606      	mov	r6, r0
   1dcfc:	b930      	cbnz	r0, 1dd0c <log_msg_create_n+0x66>
			msg_free(msg);
   1dcfe:	4620      	mov	r0, r4
   1dd00:	f7f1 f850 	bl	eda4 <msg_free>
			return NULL;
   1dd04:	4634      	mov	r4, r6
}
   1dd06:	4620      	mov	r0, r4
   1dd08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   1dd0c:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   1dd10:	f1aa 0a07 	sub.w	sl, sl, #7
		next = &cont->next;
   1dd14:	4683      	mov	fp, r0
		cont->next = NULL;
   1dd16:	6007      	str	r7, [r0, #0]
		n -= ARGS_CONT_MSG;
   1dd18:	e7db      	b.n	1dcd2 <log_msg_create_n+0x2c>
		(void)memcpy(msg->payload.ext.data.args, args,
   1dd1a:	4641      	mov	r1, r8
   1dd1c:	2208      	movs	r2, #8
   1dd1e:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   1dd22:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   1dd24:	f000 fc95 	bl	1e652 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   1dd28:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   1dd2a:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   1dd2e:	2d07      	cmp	r5, #7
   1dd30:	462e      	mov	r6, r5
   1dd32:	bf28      	it	cs
   1dd34:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   1dd36:	ea4f 0986 	mov.w	r9, r6, lsl #2
   1dd3a:	4641      	mov	r1, r8
   1dd3c:	1d38      	adds	r0, r7, #4
   1dd3e:	464a      	mov	r2, r9
   1dd40:	f000 fc87 	bl	1e652 <memcpy>
	while (nargs != 0U) {
   1dd44:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   1dd46:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   1dd48:	44c8      	add	r8, r9
	while (nargs != 0U) {
   1dd4a:	d1f0      	bne.n	1dd2e <log_msg_create_n+0x88>
   1dd4c:	e7db      	b.n	1dd06 <log_msg_create_n+0x60>

0001dd4e <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   1dd4e:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   1dd50:	2400      	movs	r4, #0
   1dd52:	9400      	str	r4, [sp, #0]
   1dd54:	f7ff ff15 	bl	1db82 <log_msg_hexdump_data_op>
}
   1dd58:	b002      	add	sp, #8
   1dd5a:	bd10      	pop	{r4, pc}

0001dd5c <buffer_write>:
{
   1dd5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dd5e:	4606      	mov	r6, r0
   1dd60:	460d      	mov	r5, r1
   1dd62:	4614      	mov	r4, r2
   1dd64:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1dd66:	4621      	mov	r1, r4
   1dd68:	4628      	mov	r0, r5
   1dd6a:	463a      	mov	r2, r7
   1dd6c:	47b0      	blx	r6
	} while (len != 0);
   1dd6e:	1a24      	subs	r4, r4, r0
		buf += processed;
   1dd70:	4405      	add	r5, r0
	} while (len != 0);
   1dd72:	d1f8      	bne.n	1dd66 <buffer_write+0xa>
}
   1dd74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001dd76 <std_print>:
{
   1dd76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1dd7a:	b08e      	sub	sp, #56	; 0x38
   1dd7c:	af0e      	add	r7, sp, #56	; 0x38
   1dd7e:	4680      	mov	r8, r0
   1dd80:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   1dd82:	f7ff ff8e 	bl	1dca2 <log_msg_str_get>
   1dd86:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   1dd88:	4640      	mov	r0, r8
   1dd8a:	f7ff ff59 	bl	1dc40 <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
   1dd8e:	f04f 0900 	mov.w	r9, #0
	uint32_t nargs = log_msg_nargs_get(msg);
   1dd92:	4682      	mov	sl, r0
	uint32_t *args = alloca(sizeof(uint32_t)*nargs);
   1dd94:	0083      	lsls	r3, r0, #2
   1dd96:	3307      	adds	r3, #7
   1dd98:	f023 0307 	bic.w	r3, r3, #7
   1dd9c:	ebad 0d03 	sub.w	sp, sp, r3
   1dda0:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   1dda2:	45d1      	cmp	r9, sl
   1dda4:	d116      	bne.n	1ddd4 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   1dda6:	4640      	mov	r0, r8
   1dda8:	f7ff ff4a 	bl	1dc40 <log_msg_nargs_get>
   1ddac:	280f      	cmp	r0, #15
   1ddae:	d81e      	bhi.n	1ddee <std_print+0x78>
   1ddb0:	e8df f010 	tbh	[pc, r0, lsl #1]
   1ddb4:	00200019 	.word	0x00200019
   1ddb8:	002d0026 	.word	0x002d0026
   1ddbc:	00410036 	.word	0x00410036
   1ddc0:	005d004e 	.word	0x005d004e
   1ddc4:	0081006e 	.word	0x0081006e
   1ddc8:	00ad0096 	.word	0x00ad0096
   1ddcc:	00e100c6 	.word	0x00e100c6
   1ddd0:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   1ddd4:	4649      	mov	r1, r9
   1ddd6:	4640      	mov	r0, r8
   1ddd8:	f7ff ff35 	bl	1dc46 <log_msg_arg_get>
   1dddc:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   1dde0:	f109 0901 	add.w	r9, r9, #1
   1dde4:	e7dd      	b.n	1dda2 <std_print+0x2c>
		print_formatted(log_output, str);
   1dde6:	4631      	mov	r1, r6
   1dde8:	4628      	mov	r0, r5
   1ddea:	f7f1 f819 	bl	ee20 <print_formatted>
}
   1ddee:	46bd      	mov	sp, r7
   1ddf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   1ddf4:	4631      	mov	r1, r6
   1ddf6:	4628      	mov	r0, r5
   1ddf8:	6822      	ldr	r2, [r4, #0]
   1ddfa:	f7f1 f811 	bl	ee20 <print_formatted>
		break;
   1ddfe:	e7f6      	b.n	1ddee <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   1de00:	4631      	mov	r1, r6
   1de02:	e9d4 2300 	ldrd	r2, r3, [r4]
   1de06:	4628      	mov	r0, r5
   1de08:	f7f1 f80a 	bl	ee20 <print_formatted>
		break;
   1de0c:	e7ef      	b.n	1ddee <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   1de0e:	68a3      	ldr	r3, [r4, #8]
   1de10:	4631      	mov	r1, r6
   1de12:	9300      	str	r3, [sp, #0]
   1de14:	4628      	mov	r0, r5
   1de16:	e9d4 2300 	ldrd	r2, r3, [r4]
   1de1a:	f7f1 f801 	bl	ee20 <print_formatted>
		break;
   1de1e:	e7e6      	b.n	1ddee <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1de20:	68e3      	ldr	r3, [r4, #12]
   1de22:	4631      	mov	r1, r6
   1de24:	9301      	str	r3, [sp, #4]
   1de26:	68a3      	ldr	r3, [r4, #8]
   1de28:	4628      	mov	r0, r5
   1de2a:	9300      	str	r3, [sp, #0]
   1de2c:	e9d4 2300 	ldrd	r2, r3, [r4]
   1de30:	f7f0 fff6 	bl	ee20 <print_formatted>
		break;
   1de34:	e7db      	b.n	1ddee <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1de36:	6923      	ldr	r3, [r4, #16]
   1de38:	4631      	mov	r1, r6
   1de3a:	9302      	str	r3, [sp, #8]
   1de3c:	68e3      	ldr	r3, [r4, #12]
   1de3e:	4628      	mov	r0, r5
   1de40:	9301      	str	r3, [sp, #4]
   1de42:	68a3      	ldr	r3, [r4, #8]
   1de44:	9300      	str	r3, [sp, #0]
   1de46:	e9d4 2300 	ldrd	r2, r3, [r4]
   1de4a:	f7f0 ffe9 	bl	ee20 <print_formatted>
		break;
   1de4e:	e7ce      	b.n	1ddee <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1de50:	6963      	ldr	r3, [r4, #20]
   1de52:	4631      	mov	r1, r6
   1de54:	9303      	str	r3, [sp, #12]
   1de56:	6923      	ldr	r3, [r4, #16]
   1de58:	4628      	mov	r0, r5
   1de5a:	9302      	str	r3, [sp, #8]
   1de5c:	68e3      	ldr	r3, [r4, #12]
   1de5e:	9301      	str	r3, [sp, #4]
   1de60:	68a3      	ldr	r3, [r4, #8]
   1de62:	9300      	str	r3, [sp, #0]
   1de64:	e9d4 2300 	ldrd	r2, r3, [r4]
   1de68:	f7f0 ffda 	bl	ee20 <print_formatted>
		break;
   1de6c:	e7bf      	b.n	1ddee <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1de6e:	69a3      	ldr	r3, [r4, #24]
   1de70:	4631      	mov	r1, r6
   1de72:	9304      	str	r3, [sp, #16]
   1de74:	6963      	ldr	r3, [r4, #20]
   1de76:	4628      	mov	r0, r5
   1de78:	9303      	str	r3, [sp, #12]
   1de7a:	6923      	ldr	r3, [r4, #16]
   1de7c:	9302      	str	r3, [sp, #8]
   1de7e:	68e3      	ldr	r3, [r4, #12]
   1de80:	9301      	str	r3, [sp, #4]
   1de82:	68a3      	ldr	r3, [r4, #8]
   1de84:	9300      	str	r3, [sp, #0]
   1de86:	e9d4 2300 	ldrd	r2, r3, [r4]
   1de8a:	f7f0 ffc9 	bl	ee20 <print_formatted>
		break;
   1de8e:	e7ae      	b.n	1ddee <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1de90:	69e3      	ldr	r3, [r4, #28]
   1de92:	4631      	mov	r1, r6
   1de94:	9305      	str	r3, [sp, #20]
   1de96:	69a3      	ldr	r3, [r4, #24]
   1de98:	4628      	mov	r0, r5
   1de9a:	9304      	str	r3, [sp, #16]
   1de9c:	6963      	ldr	r3, [r4, #20]
   1de9e:	9303      	str	r3, [sp, #12]
   1dea0:	6923      	ldr	r3, [r4, #16]
   1dea2:	9302      	str	r3, [sp, #8]
   1dea4:	68e3      	ldr	r3, [r4, #12]
   1dea6:	9301      	str	r3, [sp, #4]
   1dea8:	68a3      	ldr	r3, [r4, #8]
   1deaa:	9300      	str	r3, [sp, #0]
   1deac:	e9d4 2300 	ldrd	r2, r3, [r4]
   1deb0:	f7f0 ffb6 	bl	ee20 <print_formatted>
		break;
   1deb4:	e79b      	b.n	1ddee <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1deb6:	6a23      	ldr	r3, [r4, #32]
   1deb8:	4631      	mov	r1, r6
   1deba:	9306      	str	r3, [sp, #24]
   1debc:	69e3      	ldr	r3, [r4, #28]
   1debe:	4628      	mov	r0, r5
   1dec0:	9305      	str	r3, [sp, #20]
   1dec2:	69a3      	ldr	r3, [r4, #24]
   1dec4:	9304      	str	r3, [sp, #16]
   1dec6:	6963      	ldr	r3, [r4, #20]
   1dec8:	9303      	str	r3, [sp, #12]
   1deca:	6923      	ldr	r3, [r4, #16]
   1decc:	9302      	str	r3, [sp, #8]
   1dece:	68e3      	ldr	r3, [r4, #12]
   1ded0:	9301      	str	r3, [sp, #4]
   1ded2:	68a3      	ldr	r3, [r4, #8]
   1ded4:	9300      	str	r3, [sp, #0]
   1ded6:	e9d4 2300 	ldrd	r2, r3, [r4]
   1deda:	f7f0 ffa1 	bl	ee20 <print_formatted>
		break;
   1dede:	e786      	b.n	1ddee <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1dee0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1dee2:	4631      	mov	r1, r6
   1dee4:	9307      	str	r3, [sp, #28]
   1dee6:	6a23      	ldr	r3, [r4, #32]
   1dee8:	4628      	mov	r0, r5
   1deea:	9306      	str	r3, [sp, #24]
   1deec:	69e3      	ldr	r3, [r4, #28]
   1deee:	9305      	str	r3, [sp, #20]
   1def0:	69a3      	ldr	r3, [r4, #24]
   1def2:	9304      	str	r3, [sp, #16]
   1def4:	6963      	ldr	r3, [r4, #20]
   1def6:	9303      	str	r3, [sp, #12]
   1def8:	6923      	ldr	r3, [r4, #16]
   1defa:	9302      	str	r3, [sp, #8]
   1defc:	68e3      	ldr	r3, [r4, #12]
   1defe:	9301      	str	r3, [sp, #4]
   1df00:	68a3      	ldr	r3, [r4, #8]
   1df02:	9300      	str	r3, [sp, #0]
   1df04:	e9d4 2300 	ldrd	r2, r3, [r4]
   1df08:	f7f0 ff8a 	bl	ee20 <print_formatted>
		break;
   1df0c:	e76f      	b.n	1ddee <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1df0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1df10:	4631      	mov	r1, r6
   1df12:	9308      	str	r3, [sp, #32]
   1df14:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1df16:	4628      	mov	r0, r5
   1df18:	9307      	str	r3, [sp, #28]
   1df1a:	6a23      	ldr	r3, [r4, #32]
   1df1c:	9306      	str	r3, [sp, #24]
   1df1e:	69e3      	ldr	r3, [r4, #28]
   1df20:	9305      	str	r3, [sp, #20]
   1df22:	69a3      	ldr	r3, [r4, #24]
   1df24:	9304      	str	r3, [sp, #16]
   1df26:	6963      	ldr	r3, [r4, #20]
   1df28:	9303      	str	r3, [sp, #12]
   1df2a:	6923      	ldr	r3, [r4, #16]
   1df2c:	9302      	str	r3, [sp, #8]
   1df2e:	68e3      	ldr	r3, [r4, #12]
   1df30:	9301      	str	r3, [sp, #4]
   1df32:	68a3      	ldr	r3, [r4, #8]
   1df34:	9300      	str	r3, [sp, #0]
   1df36:	e9d4 2300 	ldrd	r2, r3, [r4]
   1df3a:	f7f0 ff71 	bl	ee20 <print_formatted>
		break;
   1df3e:	e756      	b.n	1ddee <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1df40:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1df42:	4631      	mov	r1, r6
   1df44:	9309      	str	r3, [sp, #36]	; 0x24
   1df46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1df48:	4628      	mov	r0, r5
   1df4a:	9308      	str	r3, [sp, #32]
   1df4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1df4e:	9307      	str	r3, [sp, #28]
   1df50:	6a23      	ldr	r3, [r4, #32]
   1df52:	9306      	str	r3, [sp, #24]
   1df54:	69e3      	ldr	r3, [r4, #28]
   1df56:	9305      	str	r3, [sp, #20]
   1df58:	69a3      	ldr	r3, [r4, #24]
   1df5a:	9304      	str	r3, [sp, #16]
   1df5c:	6963      	ldr	r3, [r4, #20]
   1df5e:	9303      	str	r3, [sp, #12]
   1df60:	6923      	ldr	r3, [r4, #16]
   1df62:	9302      	str	r3, [sp, #8]
   1df64:	68e3      	ldr	r3, [r4, #12]
   1df66:	9301      	str	r3, [sp, #4]
   1df68:	68a3      	ldr	r3, [r4, #8]
   1df6a:	9300      	str	r3, [sp, #0]
   1df6c:	e9d4 2300 	ldrd	r2, r3, [r4]
   1df70:	f7f0 ff56 	bl	ee20 <print_formatted>
		break;
   1df74:	e73b      	b.n	1ddee <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1df76:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1df78:	4631      	mov	r1, r6
   1df7a:	930a      	str	r3, [sp, #40]	; 0x28
   1df7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1df7e:	4628      	mov	r0, r5
   1df80:	9309      	str	r3, [sp, #36]	; 0x24
   1df82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1df84:	9308      	str	r3, [sp, #32]
   1df86:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1df88:	9307      	str	r3, [sp, #28]
   1df8a:	6a23      	ldr	r3, [r4, #32]
   1df8c:	9306      	str	r3, [sp, #24]
   1df8e:	69e3      	ldr	r3, [r4, #28]
   1df90:	9305      	str	r3, [sp, #20]
   1df92:	69a3      	ldr	r3, [r4, #24]
   1df94:	9304      	str	r3, [sp, #16]
   1df96:	6963      	ldr	r3, [r4, #20]
   1df98:	9303      	str	r3, [sp, #12]
   1df9a:	6923      	ldr	r3, [r4, #16]
   1df9c:	9302      	str	r3, [sp, #8]
   1df9e:	68e3      	ldr	r3, [r4, #12]
   1dfa0:	9301      	str	r3, [sp, #4]
   1dfa2:	68a3      	ldr	r3, [r4, #8]
   1dfa4:	9300      	str	r3, [sp, #0]
   1dfa6:	e9d4 2300 	ldrd	r2, r3, [r4]
   1dfaa:	f7f0 ff39 	bl	ee20 <print_formatted>
		break;
   1dfae:	e71e      	b.n	1ddee <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1dfb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1dfb2:	4631      	mov	r1, r6
   1dfb4:	930b      	str	r3, [sp, #44]	; 0x2c
   1dfb6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1dfb8:	4628      	mov	r0, r5
   1dfba:	930a      	str	r3, [sp, #40]	; 0x28
   1dfbc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1dfbe:	9309      	str	r3, [sp, #36]	; 0x24
   1dfc0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1dfc2:	9308      	str	r3, [sp, #32]
   1dfc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1dfc6:	9307      	str	r3, [sp, #28]
   1dfc8:	6a23      	ldr	r3, [r4, #32]
   1dfca:	9306      	str	r3, [sp, #24]
   1dfcc:	69e3      	ldr	r3, [r4, #28]
   1dfce:	9305      	str	r3, [sp, #20]
   1dfd0:	69a3      	ldr	r3, [r4, #24]
   1dfd2:	9304      	str	r3, [sp, #16]
   1dfd4:	6963      	ldr	r3, [r4, #20]
   1dfd6:	9303      	str	r3, [sp, #12]
   1dfd8:	6923      	ldr	r3, [r4, #16]
   1dfda:	9302      	str	r3, [sp, #8]
   1dfdc:	68e3      	ldr	r3, [r4, #12]
   1dfde:	9301      	str	r3, [sp, #4]
   1dfe0:	68a3      	ldr	r3, [r4, #8]
   1dfe2:	9300      	str	r3, [sp, #0]
   1dfe4:	e9d4 2300 	ldrd	r2, r3, [r4]
   1dfe8:	f7f0 ff1a 	bl	ee20 <print_formatted>
		break;
   1dfec:	e6ff      	b.n	1ddee <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1dfee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1dff0:	4631      	mov	r1, r6
   1dff2:	930c      	str	r3, [sp, #48]	; 0x30
   1dff4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1dff6:	4628      	mov	r0, r5
   1dff8:	930b      	str	r3, [sp, #44]	; 0x2c
   1dffa:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1dffc:	930a      	str	r3, [sp, #40]	; 0x28
   1dffe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1e000:	9309      	str	r3, [sp, #36]	; 0x24
   1e002:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1e004:	9308      	str	r3, [sp, #32]
   1e006:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e008:	9307      	str	r3, [sp, #28]
   1e00a:	6a23      	ldr	r3, [r4, #32]
   1e00c:	9306      	str	r3, [sp, #24]
   1e00e:	69e3      	ldr	r3, [r4, #28]
   1e010:	9305      	str	r3, [sp, #20]
   1e012:	69a3      	ldr	r3, [r4, #24]
   1e014:	9304      	str	r3, [sp, #16]
   1e016:	6963      	ldr	r3, [r4, #20]
   1e018:	9303      	str	r3, [sp, #12]
   1e01a:	6923      	ldr	r3, [r4, #16]
   1e01c:	9302      	str	r3, [sp, #8]
   1e01e:	68e3      	ldr	r3, [r4, #12]
   1e020:	9301      	str	r3, [sp, #4]
   1e022:	68a3      	ldr	r3, [r4, #8]
   1e024:	9300      	str	r3, [sp, #0]
   1e026:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e02a:	f7f0 fef9 	bl	ee20 <print_formatted>
}
   1e02e:	e6de      	b.n	1ddee <std_print+0x78>

0001e030 <log_output_flush>:
		     log_output->control_block->offset,
   1e030:	6842      	ldr	r2, [r0, #4]
{
   1e032:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   1e034:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   1e038:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   1e03a:	6881      	ldr	r1, [r0, #8]
   1e03c:	6800      	ldr	r0, [r0, #0]
   1e03e:	f7ff fe8d 	bl	1dd5c <buffer_write>
	log_output->control_block->offset = 0;
   1e042:	2200      	movs	r2, #0
   1e044:	6863      	ldr	r3, [r4, #4]
   1e046:	601a      	str	r2, [r3, #0]
}
   1e048:	bd10      	pop	{r4, pc}

0001e04a <out_func>:
{
   1e04a:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   1e04c:	684b      	ldr	r3, [r1, #4]
{
   1e04e:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
   1e050:	681a      	ldr	r2, [r3, #0]
   1e052:	68cb      	ldr	r3, [r1, #12]
{
   1e054:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   1e056:	429a      	cmp	r2, r3
   1e058:	d102      	bne.n	1e060 <out_func+0x16>
		log_output_flush(out_ctx);
   1e05a:	4608      	mov	r0, r1
   1e05c:	f7ff ffe8 	bl	1e030 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1e060:	6863      	ldr	r3, [r4, #4]
   1e062:	e8d3 2fef 	ldaex	r2, [r3]
   1e066:	1c51      	adds	r1, r2, #1
   1e068:	e8c3 1fe0 	stlex	r0, r1, [r3]
   1e06c:	2800      	cmp	r0, #0
   1e06e:	d1f8      	bne.n	1e062 <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
   1e070:	68a3      	ldr	r3, [r4, #8]
}
   1e072:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (uint8_t)c;
   1e074:	549d      	strb	r5, [r3, r2]
}
   1e076:	bd38      	pop	{r3, r4, r5, pc}

0001e078 <zsock_getaddrinfo>:
int zsock_getaddrinfo(const char *host, const char *service,
		      const struct zsock_addrinfo *hints,
		      struct zsock_addrinfo **res)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_getaddrinfo(host, service, hints, res);
   1e078:	f7f1 ba22 	b.w	f4c0 <socket_offload_getaddrinfo>

0001e07c <zsock_freeaddrinfo>:
}

void zsock_freeaddrinfo(struct zsock_addrinfo *ai)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_freeaddrinfo(ai);
   1e07c:	f7f1 ba2a 	b.w	f4d4 <socket_offload_freeaddrinfo>

0001e080 <z_errno>:
   1e080:	f7fd be12 	b.w	1bca8 <z_impl_z_errno>

0001e084 <z_fdtable_call_ioctl>:
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
				       unsigned long request, ...)
{
   1e084:	b40c      	push	{r2, r3}
   1e086:	4603      	mov	r3, r0
   1e088:	b507      	push	{r0, r1, r2, lr}
   1e08a:	aa04      	add	r2, sp, #16
   1e08c:	4608      	mov	r0, r1
   1e08e:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list args;
	int res;

	va_start(args, request);
	res = vtable->ioctl(obj, request, args);
   1e092:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   1e094:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   1e096:	4798      	blx	r3
	va_end(args);

	return res;
}
   1e098:	b003      	add	sp, #12
   1e09a:	f85d eb04 	ldr.w	lr, [sp], #4
   1e09e:	b002      	add	sp, #8
   1e0a0:	4770      	bx	lr

0001e0a2 <z_impl_zsock_close>:
{
   1e0a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ctx = z_get_fd_obj_and_vtable(sock,
   1e0a4:	a901      	add	r1, sp, #4
{
   1e0a6:	4605      	mov	r5, r0
	ctx = z_get_fd_obj_and_vtable(sock,
   1e0a8:	f7ef fbb8 	bl	d81c <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   1e0ac:	b940      	cbnz	r0, 1e0c0 <z_impl_zsock_close+0x1e>
		errno = EBADF;
   1e0ae:	f7ff ffe7 	bl	1e080 <z_errno>
   1e0b2:	2309      	movs	r3, #9
		return -1;
   1e0b4:	f04f 34ff 	mov.w	r4, #4294967295
		errno = EBADF;
   1e0b8:	6003      	str	r3, [r0, #0]
}
   1e0ba:	4620      	mov	r0, r4
   1e0bc:	b003      	add	sp, #12
   1e0be:	bd30      	pop	{r4, r5, pc}
	ret = vtable->fd_vtable.close(ctx);
   1e0c0:	9b01      	ldr	r3, [sp, #4]
   1e0c2:	689b      	ldr	r3, [r3, #8]
   1e0c4:	4798      	blx	r3
   1e0c6:	4604      	mov	r4, r0
	z_free_fd(sock);
   1e0c8:	4628      	mov	r0, r5
   1e0ca:	f7ef fbf7 	bl	d8bc <z_free_fd>
	return ret;
   1e0ce:	e7f4      	b.n	1e0ba <z_impl_zsock_close+0x18>

0001e0d0 <z_impl_zsock_connect>:
{
   1e0d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1e0d2:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   1e0d4:	a903      	add	r1, sp, #12
{
   1e0d6:	9201      	str	r2, [sp, #4]
	ctx = z_get_fd_obj_and_vtable(sock,
   1e0d8:	f7ef fba0 	bl	d81c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   1e0dc:	b118      	cbz	r0, 1e0e6 <z_impl_zsock_connect+0x16>
   1e0de:	9b03      	ldr	r3, [sp, #12]
   1e0e0:	9a01      	ldr	r2, [sp, #4]
   1e0e2:	695b      	ldr	r3, [r3, #20]
   1e0e4:	b93b      	cbnz	r3, 1e0f6 <z_impl_zsock_connect+0x26>
   1e0e6:	f7ff ffcb 	bl	1e080 <z_errno>
   1e0ea:	2309      	movs	r3, #9
   1e0ec:	6003      	str	r3, [r0, #0]
   1e0ee:	f04f 30ff 	mov.w	r0, #4294967295
}
   1e0f2:	b004      	add	sp, #16
   1e0f4:	bd10      	pop	{r4, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   1e0f6:	4621      	mov	r1, r4
   1e0f8:	4798      	blx	r3
   1e0fa:	e7fa      	b.n	1e0f2 <z_impl_zsock_connect+0x22>

0001e0fc <z_impl_zsock_sendto>:
{
   1e0fc:	b530      	push	{r4, r5, lr}
   1e0fe:	b087      	sub	sp, #28
   1e100:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   1e102:	a905      	add	r1, sp, #20
{
   1e104:	e9cd 3202 	strd	r3, r2, [sp, #8]
	ctx = z_get_fd_obj_and_vtable(sock,
   1e108:	f7ef fb88 	bl	d81c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   1e10c:	b120      	cbz	r0, 1e118 <z_impl_zsock_sendto+0x1c>
   1e10e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   1e112:	9905      	ldr	r1, [sp, #20]
   1e114:	6a0d      	ldr	r5, [r1, #32]
   1e116:	b93d      	cbnz	r5, 1e128 <z_impl_zsock_sendto+0x2c>
   1e118:	f7ff ffb2 	bl	1e080 <z_errno>
   1e11c:	2309      	movs	r3, #9
   1e11e:	6003      	str	r3, [r0, #0]
   1e120:	f04f 30ff 	mov.w	r0, #4294967295
}
   1e124:	b007      	add	sp, #28
   1e126:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   1e128:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1e12a:	9101      	str	r1, [sp, #4]
   1e12c:	990a      	ldr	r1, [sp, #40]	; 0x28
   1e12e:	9100      	str	r1, [sp, #0]
   1e130:	4621      	mov	r1, r4
   1e132:	47a8      	blx	r5
   1e134:	e7f6      	b.n	1e124 <z_impl_zsock_sendto+0x28>

0001e136 <z_impl_zsock_sendmsg>:
{
   1e136:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1e138:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   1e13a:	a903      	add	r1, sp, #12
{
   1e13c:	9201      	str	r2, [sp, #4]
	ctx = z_get_fd_obj_and_vtable(sock,
   1e13e:	f7ef fb6d 	bl	d81c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendmsg, sock, msg, flags);
   1e142:	b118      	cbz	r0, 1e14c <z_impl_zsock_sendmsg+0x16>
   1e144:	9b03      	ldr	r3, [sp, #12]
   1e146:	9a01      	ldr	r2, [sp, #4]
   1e148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1e14a:	b93b      	cbnz	r3, 1e15c <z_impl_zsock_sendmsg+0x26>
   1e14c:	f7ff ff98 	bl	1e080 <z_errno>
   1e150:	2309      	movs	r3, #9
   1e152:	6003      	str	r3, [r0, #0]
   1e154:	f04f 30ff 	mov.w	r0, #4294967295
}
   1e158:	b004      	add	sp, #16
   1e15a:	bd10      	pop	{r4, pc}
	VTABLE_CALL(sendmsg, sock, msg, flags);
   1e15c:	4621      	mov	r1, r4
   1e15e:	4798      	blx	r3
   1e160:	e7fa      	b.n	1e158 <z_impl_zsock_sendmsg+0x22>

0001e162 <z_impl_zsock_recvfrom>:
{
   1e162:	b530      	push	{r4, r5, lr}
   1e164:	b087      	sub	sp, #28
   1e166:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   1e168:	a905      	add	r1, sp, #20
{
   1e16a:	e9cd 3202 	strd	r3, r2, [sp, #8]
	ctx = z_get_fd_obj_and_vtable(sock,
   1e16e:	f7ef fb55 	bl	d81c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   1e172:	b120      	cbz	r0, 1e17e <z_impl_zsock_recvfrom+0x1c>
   1e174:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   1e178:	9905      	ldr	r1, [sp, #20]
   1e17a:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   1e17c:	b93d      	cbnz	r5, 1e18e <z_impl_zsock_recvfrom+0x2c>
   1e17e:	f7ff ff7f 	bl	1e080 <z_errno>
   1e182:	2309      	movs	r3, #9
   1e184:	6003      	str	r3, [r0, #0]
   1e186:	f04f 30ff 	mov.w	r0, #4294967295
}
   1e18a:	b007      	add	sp, #28
   1e18c:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   1e18e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1e190:	9101      	str	r1, [sp, #4]
   1e192:	990a      	ldr	r1, [sp, #40]	; 0x28
   1e194:	9100      	str	r1, [sp, #0]
   1e196:	4621      	mov	r1, r4
   1e198:	47a8      	blx	r5
   1e19a:	e7f6      	b.n	1e18a <z_impl_zsock_recvfrom+0x28>

0001e19c <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1e19c:	b2cb      	uxtb	r3, r1
   1e19e:	210c      	movs	r1, #12
   1e1a0:	68c2      	ldr	r2, [r0, #12]
   1e1a2:	fb03 2101 	mla	r1, r3, r1, r2
   1e1a6:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   1e1a8:	f000 0007 	and.w	r0, r0, #7
   1e1ac:	4770      	bx	lr

0001e1ae <set_off_state>:
	__asm__ volatile(
   1e1ae:	f04f 0320 	mov.w	r3, #32
   1e1b2:	f3ef 8211 	mrs	r2, BASEPRI
   1e1b6:	f383 8811 	msr	BASEPRI, r3
   1e1ba:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1e1be:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1e1c0:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   1e1c4:	d001      	beq.n	1e1ca <set_off_state+0x1c>
   1e1c6:	428b      	cmp	r3, r1
   1e1c8:	d107      	bne.n	1e1da <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1e1ca:	2301      	movs	r3, #1
   1e1cc:	6003      	str	r3, [r0, #0]
	int err = 0;
   1e1ce:	2000      	movs	r0, #0
	__asm__ volatile(
   1e1d0:	f382 8811 	msr	BASEPRI, r2
   1e1d4:	f3bf 8f6f 	isb	sy
}
   1e1d8:	4770      	bx	lr
		err = -EPERM;
   1e1da:	f04f 30ff 	mov.w	r0, #4294967295
   1e1de:	e7f7      	b.n	1e1d0 <set_off_state+0x22>

0001e1e0 <set_starting_state>:
{
   1e1e0:	b510      	push	{r4, lr}
	__asm__ volatile(
   1e1e2:	f04f 0320 	mov.w	r3, #32
   1e1e6:	f3ef 8211 	mrs	r2, BASEPRI
   1e1ea:	f383 8811 	msr	BASEPRI, r3
   1e1ee:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1e1f2:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1e1f4:	f003 0407 	and.w	r4, r3, #7
   1e1f8:	2c01      	cmp	r4, #1
   1e1fa:	d106      	bne.n	1e20a <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1e1fc:	6001      	str	r1, [r0, #0]
	int err = 0;
   1e1fe:	2000      	movs	r0, #0
	__asm__ volatile(
   1e200:	f382 8811 	msr	BASEPRI, r2
   1e204:	f3bf 8f6f 	isb	sy
}
   1e208:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1e20a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   1e20e:	428b      	cmp	r3, r1
		err = -EBUSY;
   1e210:	bf14      	ite	ne
   1e212:	f04f 30ff 	movne.w	r0, #4294967295
   1e216:	f06f 000f 	mvneq.w	r0, #15
   1e21a:	e7f1      	b.n	1e200 <set_starting_state+0x20>

0001e21c <set_on_state>:
	__asm__ volatile(
   1e21c:	f04f 0320 	mov.w	r3, #32
   1e220:	f3ef 8211 	mrs	r2, BASEPRI
   1e224:	f383 8811 	msr	BASEPRI, r3
   1e228:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1e22c:	6803      	ldr	r3, [r0, #0]
   1e22e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1e232:	f043 0302 	orr.w	r3, r3, #2
   1e236:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1e238:	f382 8811 	msr	BASEPRI, r2
   1e23c:	f3bf 8f6f 	isb	sy
}
   1e240:	4770      	bx	lr

0001e242 <onoff_started_callback>:
{
   1e242:	b410      	push	{r4}
	notify(mgr, 0);
   1e244:	241c      	movs	r4, #28
	return &data->mgr[type];
   1e246:	68c0      	ldr	r0, [r0, #12]
   1e248:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1e24a:	fb03 0004 	mla	r0, r3, r4, r0
   1e24e:	2100      	movs	r1, #0
}
   1e250:	f85d 4b04 	ldr.w	r4, [sp], #4
	notify(mgr, 0);
   1e254:	4710      	bx	r2

0001e256 <blocking_start_callback>:
{
   1e256:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1e258:	f7fe bbfe 	b.w	1ca58 <z_impl_k_sem_give>

0001e25c <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1e25c:	2000      	movs	r0, #0
   1e25e:	f7fd bc49 	b.w	1baf4 <nrfx_clock_stop>

0001e262 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1e262:	2000      	movs	r0, #0
   1e264:	f7fd bc14 	b.w	1ba90 <nrfx_clock_start>

0001e268 <api_stop>:
{
   1e268:	b538      	push	{r3, r4, r5, lr}
	err = set_off_state(&subdata->flags, ctx);
   1e26a:	240c      	movs	r4, #12
   1e26c:	b2c9      	uxtb	r1, r1
   1e26e:	434c      	muls	r4, r1
{
   1e270:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   1e272:	68c0      	ldr	r0, [r0, #12]
   1e274:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1e278:	2180      	movs	r1, #128	; 0x80
   1e27a:	4418      	add	r0, r3
   1e27c:	f7ff ff97 	bl	1e1ae <set_off_state>
	if (err < 0) {
   1e280:	2800      	cmp	r0, #0
   1e282:	db04      	blt.n	1e28e <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   1e284:	6869      	ldr	r1, [r5, #4]
   1e286:	440c      	add	r4, r1
   1e288:	6863      	ldr	r3, [r4, #4]
   1e28a:	4798      	blx	r3
	return 0;
   1e28c:	2000      	movs	r0, #0
}
   1e28e:	bd38      	pop	{r3, r4, r5, pc}

0001e290 <api_start>:
{
   1e290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	err = set_starting_state(&subdata->flags, ctx);
   1e292:	240c      	movs	r4, #12
   1e294:	b2c9      	uxtb	r1, r1
   1e296:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1e298:	68c5      	ldr	r5, [r0, #12]
{
   1e29a:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   1e29c:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1e2a0:	2180      	movs	r1, #128	; 0x80
   1e2a2:	4428      	add	r0, r5
{
   1e2a4:	4617      	mov	r7, r2
	err = set_starting_state(&subdata->flags, ctx);
   1e2a6:	f7ff ff9b 	bl	1e1e0 <set_starting_state>
	if (err < 0) {
   1e2aa:	2800      	cmp	r0, #0
   1e2ac:	db08      	blt.n	1e2c0 <api_start+0x30>
	subdata->cb = data->cb;
   1e2ae:	687b      	ldr	r3, [r7, #4]
   1e2b0:	4425      	add	r5, r4
   1e2b2:	63ab      	str	r3, [r5, #56]	; 0x38
	subdata->user_data = data->user_data;
   1e2b4:	68bb      	ldr	r3, [r7, #8]
   1e2b6:	63eb      	str	r3, [r5, #60]	; 0x3c
	 get_sub_config(dev, type)->start();
   1e2b8:	6873      	ldr	r3, [r6, #4]
   1e2ba:	591b      	ldr	r3, [r3, r4]
   1e2bc:	4798      	blx	r3
	return 0;
   1e2be:	2000      	movs	r0, #0
}
   1e2c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e2c2 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1e2c2:	4770      	bx	lr

0001e2c4 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   1e2c4:	4770      	bx	lr

0001e2c6 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1e2c6:	2100      	movs	r1, #0
   1e2c8:	2001      	movs	r0, #1
   1e2ca:	f7f1 bcd5 	b.w	fc78 <z_arm_fatal_error>

0001e2ce <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1e2ce:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1e2d0:	f383 880b 	msr	PSPLIM, r3
}
   1e2d4:	4770      	bx	lr

0001e2d6 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1e2d6:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1e2d8:	6800      	ldr	r0, [r0, #0]
   1e2da:	f7f1 bccd 	b.w	fc78 <z_arm_fatal_error>

0001e2de <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1e2de:	b508      	push	{r3, lr}
	handler();
   1e2e0:	f7f1 fd3e 	bl	fd60 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1e2e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1e2e8:	f7f1 bfca 	b.w	10280 <z_arm_exc_exit>

0001e2ec <mpu_configure_region>:
{
   1e2ec:	b530      	push	{r4, r5, lr}
	p_attr->rbar = attr->rbar &
   1e2ee:	890a      	ldrh	r2, [r1, #8]
   1e2f0:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
   1e2f2:	680b      	ldr	r3, [r1, #0]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   1e2f4:	684c      	ldr	r4, [r1, #4]
   1e2f6:	f002 021f 	and.w	r2, r2, #31
{
   1e2fa:	b085      	sub	sp, #20
   1e2fc:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	region_conf.base = new_region->start;
   1e300:	9300      	str	r3, [sp, #0]
   1e302:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1e306:	f023 031f 	bic.w	r3, r3, #31
   1e30a:	1e62      	subs	r2, r4, #1
   1e30c:	4413      	add	r3, r2
   1e30e:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   1e312:	280f      	cmp	r0, #15
   1e314:	4604      	mov	r4, r0
   1e316:	9303      	str	r3, [sp, #12]
   1e318:	d905      	bls.n	1e326 <mpu_configure_region+0x3a>
   1e31a:	f7f2 f84b 	bl	103b4 <region_allocate_and_init.part.0>
   1e31e:	4604      	mov	r4, r0
}
   1e320:	4620      	mov	r0, r4
   1e322:	b005      	add	sp, #20
   1e324:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
   1e326:	4669      	mov	r1, sp
   1e328:	f7f2 f82c 	bl	10384 <region_init>
	return region_allocate_and_init(index,
   1e32c:	e7f8      	b.n	1e320 <mpu_configure_region+0x34>

0001e32e <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1e32e:	e840 f000 	tt	r0, r0
   1e332:	b2c3      	uxtb	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   1e334:	f410 3f80 	tst.w	r0, #65536	; 0x10000
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   1e338:	bf14      	ite	ne
   1e33a:	4618      	movne	r0, r3
   1e33c:	f06f 0015 	mvneq.w	r0, #21
   1e340:	4770      	bx	lr

0001e342 <atoi>:

#include <stdlib.h>
#include <ctype.h>

int atoi(const char *s)
{
   1e342:	b530      	push	{r4, r5, lr}
	int n = 0;
	int neg = 0;

	while (isspace(*s)) {
   1e344:	7802      	ldrb	r2, [r0, #0]
   1e346:	4603      	mov	r3, r0
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1e348:	2a20      	cmp	r2, #32
   1e34a:	f100 0001 	add.w	r0, r0, #1
   1e34e:	d0f9      	beq.n	1e344 <atoi+0x2>
   1e350:	f1a2 0109 	sub.w	r1, r2, #9
   1e354:	2904      	cmp	r1, #4
   1e356:	d9f5      	bls.n	1e344 <atoi+0x2>
		s++;
	}
	switch (*s) {
   1e358:	2a2b      	cmp	r2, #43	; 0x2b
   1e35a:	d008      	beq.n	1e36e <atoi+0x2c>
	case '-':
		neg = 1;
		s++;
   1e35c:	2a2d      	cmp	r2, #45	; 0x2d
   1e35e:	bf0a      	itet	eq
   1e360:	4603      	moveq	r3, r0
   1e362:	2100      	movne	r1, #0
   1e364:	2101      	moveq	r1, #1
	switch (*s) {
   1e366:	2000      	movs	r0, #0
	case '+':
		s++;
	}
	/* Compute n as a negative number to avoid overflow on INT_MIN */
	while (isdigit(*s)) {
		n = 10*n - (*s++ - '0');
   1e368:	250a      	movs	r5, #10
   1e36a:	3b01      	subs	r3, #1
   1e36c:	e006      	b.n	1e37c <atoi+0x3a>
		s++;
   1e36e:	4603      	mov	r3, r0
	int neg = 0;
   1e370:	2100      	movs	r1, #0
   1e372:	e7f8      	b.n	1e366 <atoi+0x24>
		n = 10*n - (*s++ - '0');
   1e374:	f1c2 0230 	rsb	r2, r2, #48	; 0x30
   1e378:	fb05 2000 	mla	r0, r5, r0, r2
	while (isdigit(*s)) {
   1e37c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1e380:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   1e384:	2c09      	cmp	r4, #9
   1e386:	d9f5      	bls.n	1e374 <atoi+0x32>
	}
	return neg ? n : -n;
   1e388:	b901      	cbnz	r1, 1e38c <atoi+0x4a>
   1e38a:	4240      	negs	r0, r0
}
   1e38c:	bd30      	pop	{r4, r5, pc}

0001e38e <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   1e38e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e392:	4684      	mov	ip, r0
   1e394:	4688      	mov	r8, r1
	register const char *s = nptr;
   1e396:	4601      	mov	r1, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   1e398:	460c      	mov	r4, r1
   1e39a:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1e39e:	2b20      	cmp	r3, #32
   1e3a0:	d033      	beq.n	1e40a <strtol+0x7c>
   1e3a2:	f1a3 0009 	sub.w	r0, r3, #9
   1e3a6:	2804      	cmp	r0, #4
   1e3a8:	d92f      	bls.n	1e40a <strtol+0x7c>
	} while (isspace(c));
	if (c == '-') {
   1e3aa:	2b2d      	cmp	r3, #45	; 0x2d
   1e3ac:	d12f      	bne.n	1e40e <strtol+0x80>
		neg = 1;
		c = *s++;
   1e3ae:	784b      	ldrb	r3, [r1, #1]
   1e3b0:	1c8c      	adds	r4, r1, #2
		neg = 1;
   1e3b2:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1e3b4:	2a00      	cmp	r2, #0
   1e3b6:	d05c      	beq.n	1e472 <strtol+0xe4>
   1e3b8:	2a10      	cmp	r2, #16
   1e3ba:	d109      	bne.n	1e3d0 <strtol+0x42>
   1e3bc:	2b30      	cmp	r3, #48	; 0x30
   1e3be:	d107      	bne.n	1e3d0 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1e3c0:	7823      	ldrb	r3, [r4, #0]
   1e3c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1e3c6:	2b58      	cmp	r3, #88	; 0x58
   1e3c8:	d14e      	bne.n	1e468 <strtol+0xda>
		c = s[1];
		s += 2;
		base = 16;
   1e3ca:	2210      	movs	r2, #16
		c = s[1];
   1e3cc:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   1e3ce:	3402      	adds	r4, #2
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1e3d0:	2600      	movs	r6, #0
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   1e3d2:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   1e3d6:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
   1e3d8:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   1e3dc:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   1e3de:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1e3e2:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1e3e6:	2d09      	cmp	r5, #9
   1e3e8:	d817      	bhi.n	1e41a <strtol+0x8c>
			c -= '0';
   1e3ea:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1e3ec:	429a      	cmp	r2, r3
   1e3ee:	dd24      	ble.n	1e43a <strtol+0xac>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1e3f0:	1c75      	adds	r5, r6, #1
   1e3f2:	d007      	beq.n	1e404 <strtol+0x76>
   1e3f4:	4570      	cmp	r0, lr
   1e3f6:	d81d      	bhi.n	1e434 <strtol+0xa6>
   1e3f8:	d101      	bne.n	1e3fe <strtol+0x70>
   1e3fa:	454b      	cmp	r3, r9
   1e3fc:	dc1a      	bgt.n	1e434 <strtol+0xa6>
			any = -1;
		} else {
			any = 1;
   1e3fe:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   1e400:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   1e404:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1e408:	e7eb      	b.n	1e3e2 <strtol+0x54>
{
   1e40a:	4621      	mov	r1, r4
   1e40c:	e7c4      	b.n	1e398 <strtol+0xa>
	} else if (c == '+') {
   1e40e:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   1e410:	bf04      	itt	eq
   1e412:	784b      	ldrbeq	r3, [r1, #1]
   1e414:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   1e416:	2100      	movs	r1, #0
   1e418:	e7cc      	b.n	1e3b4 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1e41a:	f043 0520 	orr.w	r5, r3, #32
   1e41e:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1e420:	2d19      	cmp	r5, #25
   1e422:	d80a      	bhi.n	1e43a <strtol+0xac>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1e424:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1e428:	2d1a      	cmp	r5, #26
   1e42a:	bf34      	ite	cc
   1e42c:	2537      	movcc	r5, #55	; 0x37
   1e42e:	2557      	movcs	r5, #87	; 0x57
   1e430:	1b5b      	subs	r3, r3, r5
   1e432:	e7db      	b.n	1e3ec <strtol+0x5e>
			any = -1;
   1e434:	f04f 36ff 	mov.w	r6, #4294967295
   1e438:	e7e4      	b.n	1e404 <strtol+0x76>
		}
	}

	if (any < 0) {
   1e43a:	1c73      	adds	r3, r6, #1
   1e43c:	d109      	bne.n	1e452 <strtol+0xc4>
   1e43e:	f7fd fc33 	bl	1bca8 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   1e442:	2326      	movs	r3, #38	; 0x26
   1e444:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   1e446:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   1e448:	f1b8 0f00 	cmp.w	r8, #0
   1e44c:	d107      	bne.n	1e45e <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1e44e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   1e452:	b101      	cbz	r1, 1e456 <strtol+0xc8>
		acc = -acc;
   1e454:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1e456:	f1b8 0f00 	cmp.w	r8, #0
   1e45a:	d0f8      	beq.n	1e44e <strtol+0xc0>
		*endptr = (char *)(any ? s - 1 : nptr);
   1e45c:	b10e      	cbz	r6, 1e462 <strtol+0xd4>
   1e45e:	f104 3cff 	add.w	ip, r4, #4294967295
   1e462:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   1e466:	e7f2      	b.n	1e44e <strtol+0xc0>
	if (base == 0) {
   1e468:	2330      	movs	r3, #48	; 0x30
   1e46a:	2a00      	cmp	r2, #0
   1e46c:	d1b0      	bne.n	1e3d0 <strtol+0x42>
		base = c == '0' ? 8 : 10;
   1e46e:	2208      	movs	r2, #8
   1e470:	e7ae      	b.n	1e3d0 <strtol+0x42>
	if ((base == 0 || base == 16) &&
   1e472:	2b30      	cmp	r3, #48	; 0x30
   1e474:	d0a4      	beq.n	1e3c0 <strtol+0x32>
		base = c == '0' ? 8 : 10;
   1e476:	220a      	movs	r2, #10
   1e478:	e7aa      	b.n	1e3d0 <strtol+0x42>

0001e47a <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   1e47a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e47e:	4684      	mov	ip, r0
   1e480:	460f      	mov	r7, r1
	register const char *s = nptr;
   1e482:	4605      	mov	r5, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   1e484:	462c      	mov	r4, r5
   1e486:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1e48a:	2b20      	cmp	r3, #32
   1e48c:	d035      	beq.n	1e4fa <strtoul+0x80>
   1e48e:	f1a3 0109 	sub.w	r1, r3, #9
   1e492:	2904      	cmp	r1, #4
   1e494:	d931      	bls.n	1e4fa <strtoul+0x80>
	} while (isspace(c));
	if (c == '-') {
   1e496:	2b2d      	cmp	r3, #45	; 0x2d
   1e498:	d131      	bne.n	1e4fe <strtoul+0x84>
		neg = 1;
   1e49a:	f04f 0e01 	mov.w	lr, #1
		c = *s++;
   1e49e:	786b      	ldrb	r3, [r5, #1]
   1e4a0:	1cac      	adds	r4, r5, #2
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1e4a2:	2a00      	cmp	r2, #0
   1e4a4:	d05e      	beq.n	1e564 <strtoul+0xea>
   1e4a6:	2a10      	cmp	r2, #16
   1e4a8:	d109      	bne.n	1e4be <strtoul+0x44>
   1e4aa:	2b30      	cmp	r3, #48	; 0x30
   1e4ac:	d107      	bne.n	1e4be <strtoul+0x44>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1e4ae:	7823      	ldrb	r3, [r4, #0]
   1e4b0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1e4b4:	2b58      	cmp	r3, #88	; 0x58
   1e4b6:	d150      	bne.n	1e55a <strtoul+0xe0>
		c = s[1];
		s += 2;
		base = 16;
   1e4b8:	2210      	movs	r2, #16
		c = s[1];
   1e4ba:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   1e4bc:	3402      	adds	r4, #2

	if (base == 0) {
		base = c == '0' ? 8 : 10;
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   1e4be:	f04f 31ff 	mov.w	r1, #4294967295
   1e4c2:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1e4c6:	2600      	movs	r6, #0
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   1e4c8:	fb02 f801 	mul.w	r8, r2, r1
	for (acc = 0, any = 0;; c = *s++) {
   1e4cc:	4630      	mov	r0, r6
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   1e4ce:	ea6f 0808 	mvn.w	r8, r8
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1e4d2:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1e4d6:	2d09      	cmp	r5, #9
   1e4d8:	d818      	bhi.n	1e50c <strtoul+0x92>
			c -= '0';
   1e4da:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1e4dc:	429a      	cmp	r2, r3
   1e4de:	dd25      	ble.n	1e52c <strtoul+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1e4e0:	2e00      	cmp	r6, #0
   1e4e2:	db20      	blt.n	1e526 <strtoul+0xac>
   1e4e4:	4288      	cmp	r0, r1
   1e4e6:	d81e      	bhi.n	1e526 <strtoul+0xac>
   1e4e8:	d101      	bne.n	1e4ee <strtoul+0x74>
   1e4ea:	4543      	cmp	r3, r8
   1e4ec:	dc1b      	bgt.n	1e526 <strtoul+0xac>
			any = -1;
		} else {
			any = 1;
   1e4ee:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   1e4f0:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   1e4f4:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1e4f8:	e7eb      	b.n	1e4d2 <strtoul+0x58>
{
   1e4fa:	4625      	mov	r5, r4
   1e4fc:	e7c2      	b.n	1e484 <strtoul+0xa>
	} else if (c == '+') {
   1e4fe:	2b2b      	cmp	r3, #43	; 0x2b
	register int neg = 0, any, cutlim;
   1e500:	f04f 0e00 	mov.w	lr, #0
		c = *s++;
   1e504:	bf04      	itt	eq
   1e506:	786b      	ldrbeq	r3, [r5, #1]
   1e508:	1cac      	addeq	r4, r5, #2
   1e50a:	e7ca      	b.n	1e4a2 <strtoul+0x28>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1e50c:	f043 0520 	orr.w	r5, r3, #32
   1e510:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1e512:	2d19      	cmp	r5, #25
   1e514:	d80a      	bhi.n	1e52c <strtoul+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1e516:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1e51a:	2d1a      	cmp	r5, #26
   1e51c:	bf34      	ite	cc
   1e51e:	2537      	movcc	r5, #55	; 0x37
   1e520:	2557      	movcs	r5, #87	; 0x57
   1e522:	1b5b      	subs	r3, r3, r5
   1e524:	e7da      	b.n	1e4dc <strtoul+0x62>
			any = -1;
   1e526:	f04f 36ff 	mov.w	r6, #4294967295
   1e52a:	e7e3      	b.n	1e4f4 <strtoul+0x7a>
		}
	}
	if (any < 0) {
   1e52c:	2e00      	cmp	r6, #0
   1e52e:	da08      	bge.n	1e542 <strtoul+0xc8>
   1e530:	f7fd fbba 	bl	1bca8 <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   1e534:	2326      	movs	r3, #38	; 0x26
   1e536:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   1e538:	f04f 30ff 	mov.w	r0, #4294967295
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   1e53c:	b947      	cbnz	r7, 1e550 <strtoul+0xd6>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1e53e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   1e542:	f1be 0f00 	cmp.w	lr, #0
   1e546:	d000      	beq.n	1e54a <strtoul+0xd0>
		acc = -acc;
   1e548:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1e54a:	2f00      	cmp	r7, #0
   1e54c:	d0f7      	beq.n	1e53e <strtoul+0xc4>
		*endptr = (char *)(any ? s - 1 : nptr);
   1e54e:	b10e      	cbz	r6, 1e554 <strtoul+0xda>
   1e550:	f104 3cff 	add.w	ip, r4, #4294967295
   1e554:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   1e558:	e7f1      	b.n	1e53e <strtoul+0xc4>
	if (base == 0) {
   1e55a:	2330      	movs	r3, #48	; 0x30
   1e55c:	2a00      	cmp	r2, #0
   1e55e:	d1ae      	bne.n	1e4be <strtoul+0x44>
		base = c == '0' ? 8 : 10;
   1e560:	2208      	movs	r2, #8
   1e562:	e7ac      	b.n	1e4be <strtoul+0x44>
	if ((base == 0 || base == 16) &&
   1e564:	2b30      	cmp	r3, #48	; 0x30
   1e566:	d0a2      	beq.n	1e4ae <strtoul+0x34>
		base = c == '0' ? 8 : 10;
   1e568:	220a      	movs	r2, #10
   1e56a:	e7a8      	b.n	1e4be <strtoul+0x44>

0001e56c <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
   1e56c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
   1e570:	f891 8000 	ldrb.w	r8, [r1]
{
   1e574:	4605      	mov	r5, r0
	if (c != 0) {
   1e576:	f1b8 0f00 	cmp.w	r8, #0
   1e57a:	d010      	beq.n	1e59e <strstr+0x32>
	c = *find++;
   1e57c:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
   1e57e:	4620      	mov	r0, r4
   1e580:	f000 f835 	bl	1e5ee <strlen>
   1e584:	4607      	mov	r7, r0
		do {
			do {
				sc = *s++;
   1e586:	462e      	mov	r6, r5
   1e588:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
   1e58c:	b163      	cbz	r3, 1e5a8 <strstr+0x3c>
					return NULL;
				}
			} while (sc != c);
   1e58e:	4598      	cmp	r8, r3
   1e590:	d108      	bne.n	1e5a4 <strstr+0x38>
		} while (strncmp(s, find, len) != 0);
   1e592:	463a      	mov	r2, r7
   1e594:	4621      	mov	r1, r4
   1e596:	4630      	mov	r0, r6
   1e598:	f000 f83c 	bl	1e614 <strncmp>
   1e59c:	b910      	cbnz	r0, 1e5a4 <strstr+0x38>
	s--;
	}
	return (char *)s;
}
   1e59e:	4628      	mov	r0, r5
   1e5a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   1e5a4:	4635      	mov	r5, r6
   1e5a6:	e7ee      	b.n	1e586 <strstr+0x1a>
					return NULL;
   1e5a8:	461d      	mov	r5, r3
   1e5aa:	e7f8      	b.n	1e59e <strstr+0x32>

0001e5ac <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   1e5ac:	b570      	push	{r4, r5, r6, lr}
   1e5ae:	4605      	mov	r5, r0
   1e5b0:	3901      	subs	r1, #1
   1e5b2:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1e5b4:	b142      	cbz	r2, 1e5c8 <strncpy+0x1c>
   1e5b6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1e5ba:	1e56      	subs	r6, r2, #1
   1e5bc:	b92b      	cbnz	r3, 1e5ca <strncpy+0x1e>
   1e5be:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   1e5c0:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   1e5c4:	42a2      	cmp	r2, r4
   1e5c6:	d1fb      	bne.n	1e5c0 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   1e5c8:	bd70      	pop	{r4, r5, r6, pc}
		n--;
   1e5ca:	4632      	mov	r2, r6
		*d = *s;
   1e5cc:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   1e5d0:	e7ef      	b.n	1e5b2 <strncpy+0x6>

0001e5d2 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   1e5d2:	4603      	mov	r3, r0
   1e5d4:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
   1e5d6:	781a      	ldrb	r2, [r3, #0]
   1e5d8:	4618      	mov	r0, r3
   1e5da:	428a      	cmp	r2, r1
   1e5dc:	f103 0301 	add.w	r3, r3, #1
   1e5e0:	d004      	beq.n	1e5ec <strchr+0x1a>
   1e5e2:	2a00      	cmp	r2, #0
   1e5e4:	d1f7      	bne.n	1e5d6 <strchr+0x4>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
   1e5e6:	2900      	cmp	r1, #0
   1e5e8:	bf18      	it	ne
   1e5ea:	2000      	movne	r0, #0
}
   1e5ec:	4770      	bx	lr

0001e5ee <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1e5ee:	4603      	mov	r3, r0
	size_t n = 0;
   1e5f0:	2000      	movs	r0, #0

	while (*s != '\0') {
   1e5f2:	5c1a      	ldrb	r2, [r3, r0]
   1e5f4:	b902      	cbnz	r2, 1e5f8 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1e5f6:	4770      	bx	lr
		n++;
   1e5f8:	3001      	adds	r0, #1
   1e5fa:	e7fa      	b.n	1e5f2 <strlen+0x4>

0001e5fc <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1e5fc:	3801      	subs	r0, #1
   1e5fe:	3901      	subs	r1, #1
   1e600:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1e604:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1e608:	4293      	cmp	r3, r2
   1e60a:	d101      	bne.n	1e610 <strcmp+0x14>
   1e60c:	2b00      	cmp	r3, #0
   1e60e:	d1f7      	bne.n	1e600 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1e610:	1a98      	subs	r0, r3, r2
   1e612:	4770      	bx	lr

0001e614 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   1e614:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1e616:	2400      	movs	r4, #0
   1e618:	42a2      	cmp	r2, r4
   1e61a:	d008      	beq.n	1e62e <strncmp+0x1a>
   1e61c:	5d03      	ldrb	r3, [r0, r4]
   1e61e:	5d0d      	ldrb	r5, [r1, r4]
   1e620:	42ab      	cmp	r3, r5
   1e622:	d102      	bne.n	1e62a <strncmp+0x16>
   1e624:	3401      	adds	r4, #1
   1e626:	2b00      	cmp	r3, #0
   1e628:	d1f6      	bne.n	1e618 <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   1e62a:	1b58      	subs	r0, r3, r5
   1e62c:	e000      	b.n	1e630 <strncmp+0x1c>
   1e62e:	2000      	movs	r0, #0
}
   1e630:	bd30      	pop	{r4, r5, pc}

0001e632 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1e632:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1e634:	b15a      	cbz	r2, 1e64e <memcmp+0x1c>
   1e636:	3901      	subs	r1, #1
   1e638:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1e63a:	f810 2b01 	ldrb.w	r2, [r0], #1
   1e63e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1e642:	42a0      	cmp	r0, r4
   1e644:	d001      	beq.n	1e64a <memcmp+0x18>
   1e646:	429a      	cmp	r2, r3
   1e648:	d0f7      	beq.n	1e63a <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1e64a:	1ad0      	subs	r0, r2, r3
}
   1e64c:	bd10      	pop	{r4, pc}
		return 0;
   1e64e:	4610      	mov	r0, r2
   1e650:	e7fc      	b.n	1e64c <memcmp+0x1a>

0001e652 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1e652:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1e654:	ea81 0400 	eor.w	r4, r1, r0
   1e658:	07a5      	lsls	r5, r4, #30
   1e65a:	4603      	mov	r3, r0
   1e65c:	d00b      	beq.n	1e676 <memcpy+0x24>
   1e65e:	3b01      	subs	r3, #1
   1e660:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1e662:	4291      	cmp	r1, r2
   1e664:	d11b      	bne.n	1e69e <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1e666:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1e668:	2a00      	cmp	r2, #0
   1e66a:	d0fc      	beq.n	1e666 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1e66c:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   1e670:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   1e672:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   1e676:	079c      	lsls	r4, r3, #30
   1e678:	d1f6      	bne.n	1e668 <memcpy+0x16>
   1e67a:	f022 0403 	bic.w	r4, r2, #3
   1e67e:	1f1d      	subs	r5, r3, #4
   1e680:	0896      	lsrs	r6, r2, #2
   1e682:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1e684:	42b9      	cmp	r1, r7
   1e686:	d105      	bne.n	1e694 <memcpy+0x42>
   1e688:	f06f 0503 	mvn.w	r5, #3
   1e68c:	4423      	add	r3, r4
   1e68e:	fb05 2206 	mla	r2, r5, r6, r2
   1e692:	e7e4      	b.n	1e65e <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1e694:	f851 cb04 	ldr.w	ip, [r1], #4
   1e698:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   1e69c:	e7f2      	b.n	1e684 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   1e69e:	f811 4b01 	ldrb.w	r4, [r1], #1
   1e6a2:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1e6a6:	e7dc      	b.n	1e662 <memcpy+0x10>

0001e6a8 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   1e6a8:	4603      	mov	r3, r0
{
   1e6aa:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
   1e6ac:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1e6ae:	079c      	lsls	r4, r3, #30
   1e6b0:	d111      	bne.n	1e6d6 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1e6b2:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   1e6b6:	f022 0603 	bic.w	r6, r2, #3
   1e6ba:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1e6be:	441e      	add	r6, r3
   1e6c0:	0894      	lsrs	r4, r2, #2
   1e6c2:	42b3      	cmp	r3, r6
   1e6c4:	d10d      	bne.n	1e6e2 <memset+0x3a>
   1e6c6:	f06f 0503 	mvn.w	r5, #3
   1e6ca:	fb05 2204 	mla	r2, r5, r4, r2
   1e6ce:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1e6d0:	4293      	cmp	r3, r2
   1e6d2:	d109      	bne.n	1e6e8 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1e6d4:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1e6d6:	2a00      	cmp	r2, #0
   1e6d8:	d0fc      	beq.n	1e6d4 <memset+0x2c>
		*(d_byte++) = c_byte;
   1e6da:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1e6de:	3a01      	subs	r2, #1
   1e6e0:	e7e5      	b.n	1e6ae <memset+0x6>
		*(d_word++) = c_word;
   1e6e2:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   1e6e6:	e7ec      	b.n	1e6c2 <memset+0x1a>
		*(d_byte++) = c_byte;
   1e6e8:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1e6ec:	e7f0      	b.n	1e6d0 <memset+0x28>

0001e6ee <_stdout_hook_default>:
}
   1e6ee:	f04f 30ff 	mov.w	r0, #4294967295
   1e6f2:	4770      	bx	lr

0001e6f4 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   1e6f4:	684b      	ldr	r3, [r1, #4]
   1e6f6:	2b01      	cmp	r3, #1
   1e6f8:	dd07      	ble.n	1e70a <sprintf_out+0x16>
		*(p->ptr) = c;
   1e6fa:	680b      	ldr	r3, [r1, #0]
   1e6fc:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   1e6fe:	680b      	ldr	r3, [r1, #0]
   1e700:	3301      	adds	r3, #1
   1e702:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   1e704:	684b      	ldr	r3, [r1, #4]
   1e706:	3b01      	subs	r3, #1
   1e708:	604b      	str	r3, [r1, #4]
}
   1e70a:	2000      	movs	r0, #0
   1e70c:	4770      	bx	lr

0001e70e <net_init>:

	return status;
}

static int net_init(const struct device *unused)
{
   1e70e:	b508      	push	{r3, lr}
	net_if_init();
   1e710:	f7f1 fff2 	bl	106f8 <net_if_init>
	net_if_post_init();
   1e714:	f7f2 f806 	bl	10724 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   1e718:	2000      	movs	r0, #0
   1e71a:	bd08      	pop	{r3, pc}

0001e71c <net_if_l2>:
	if (!iface || !iface->if_dev) {
   1e71c:	b110      	cbz	r0, 1e724 <net_if_l2+0x8>
   1e71e:	6800      	ldr	r0, [r0, #0]
   1e720:	b100      	cbz	r0, 1e724 <net_if_l2+0x8>
	return iface->if_dev->l2;
   1e722:	6840      	ldr	r0, [r0, #4]
}
   1e724:	4770      	bx	lr

0001e726 <l2_flags_get>:
{
   1e726:	b510      	push	{r4, lr}
   1e728:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   1e72a:	f7ff fff7 	bl	1e71c <net_if_l2>
   1e72e:	b128      	cbz	r0, 1e73c <l2_flags_get+0x16>
   1e730:	68c2      	ldr	r2, [r0, #12]
   1e732:	b11a      	cbz	r2, 1e73c <l2_flags_get+0x16>
}
   1e734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   1e738:	4618      	mov	r0, r3
   1e73a:	4710      	bx	r2
}
   1e73c:	2000      	movs	r0, #0
   1e73e:	bd10      	pop	{r4, pc}

0001e740 <net_if_up>:
{
   1e740:	b510      	push	{r4, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e742:	6803      	ldr	r3, [r0, #0]
   1e744:	4604      	mov	r4, r0
   1e746:	330c      	adds	r3, #12
   1e748:	e8d3 3faf 	lda	r3, [r3]
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   1e74c:	f013 0301 	ands.w	r3, r3, #1
   1e750:	d10b      	bne.n	1e76a <net_if_up+0x2a>
	     net_if_is_socket_offloaded(iface))) {
   1e752:	6802      	ldr	r2, [r0, #0]
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   1e754:	7e91      	ldrb	r1, [r2, #26]
   1e756:	b151      	cbz	r1, 1e76e <net_if_up+0x2e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e758:	320c      	adds	r2, #12
   1e75a:	e8d2 1fef 	ldaex	r1, [r2]
   1e75e:	f041 0101 	orr.w	r1, r1, #1
   1e762:	e8c2 1fe0 	stlex	r0, r1, [r2]
   1e766:	2800      	cmp	r0, #0
   1e768:	d1f7      	bne.n	1e75a <net_if_up+0x1a>
		return 0;
   1e76a:	2000      	movs	r0, #0
   1e76c:	e018      	b.n	1e7a0 <net_if_up+0x60>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   1e76e:	f7ff ffd5 	bl	1e71c <net_if_l2>
   1e772:	b968      	cbnz	r0, 1e790 <net_if_up+0x50>
   1e774:	6823      	ldr	r3, [r4, #0]
   1e776:	330c      	adds	r3, #12
   1e778:	e8d3 2fef 	ldaex	r2, [r3]
   1e77c:	f042 0201 	orr.w	r2, r2, #1
   1e780:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1e784:	2900      	cmp	r1, #0
   1e786:	d1f7      	bne.n	1e778 <net_if_up+0x38>
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   1e788:	4620      	mov	r0, r4
   1e78a:	f7ff ffcc 	bl	1e726 <l2_flags_get>
   1e78e:	e7ec      	b.n	1e76a <net_if_up+0x2a>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   1e790:	6883      	ldr	r3, [r0, #8]
   1e792:	2b00      	cmp	r3, #0
   1e794:	d0ee      	beq.n	1e774 <net_if_up+0x34>
	status = net_if_l2(iface)->enable(iface, true);
   1e796:	2101      	movs	r1, #1
   1e798:	4620      	mov	r0, r4
   1e79a:	4798      	blx	r3
	if (status < 0) {
   1e79c:	2800      	cmp	r0, #0
   1e79e:	dae9      	bge.n	1e774 <net_if_up+0x34>
}
   1e7a0:	bd10      	pop	{r4, pc}

0001e7a2 <net_byte_to_hex>:
{
   1e7a2:	b530      	push	{r4, r5, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   1e7a4:	090d      	lsrs	r5, r1, #4
		if (i == 0 && !pad && !val) {
   1e7a6:	b1bb      	cbz	r3, 1e7d8 <net_byte_to_hex+0x36>
		if (val < 10) {
   1e7a8:	2d09      	cmp	r5, #9
			*ptr++ = (char) (val - 10 + base);
   1e7aa:	b26b      	sxtb	r3, r5
   1e7ac:	bf86      	itte	hi
   1e7ae:	f1a2 050a 	subhi.w	r5, r2, #10
   1e7b2:	195b      	addhi	r3, r3, r5
			*ptr++ = (char) (val + '0');
   1e7b4:	3330      	addls	r3, #48	; 0x30
   1e7b6:	1c44      	adds	r4, r0, #1
   1e7b8:	7003      	strb	r3, [r0, #0]
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   1e7ba:	f001 030f 	and.w	r3, r1, #15
		if (val < 10) {
   1e7be:	4619      	mov	r1, r3
   1e7c0:	2b09      	cmp	r3, #9
	*ptr = '\0';
   1e7c2:	f04f 0300 	mov.w	r3, #0
			*ptr++ = (char) (val - 10 + base);
   1e7c6:	bf83      	ittte	hi
   1e7c8:	3a0a      	subhi	r2, #10
   1e7ca:	1889      	addhi	r1, r1, r2
   1e7cc:	b2c9      	uxtbhi	r1, r1
			*ptr++ = (char) (val + '0');
   1e7ce:	3130      	addls	r1, #48	; 0x30
   1e7d0:	7021      	strb	r1, [r4, #0]
	*ptr = '\0';
   1e7d2:	7063      	strb	r3, [r4, #1]
   1e7d4:	1c60      	adds	r0, r4, #1
}
   1e7d6:	bd30      	pop	{r4, r5, pc}
		if (i == 0 && !pad && !val) {
   1e7d8:	2d00      	cmp	r5, #0
   1e7da:	d1e5      	bne.n	1e7a8 <net_byte_to_hex+0x6>
   1e7dc:	4604      	mov	r4, r0
   1e7de:	e7ec      	b.n	1e7ba <net_byte_to_hex+0x18>

0001e7e0 <unpack_uint16>:
 */
static int unpack_uint16(struct buf_ctx *buf, uint16_t *val)
{
	MQTT_TRC(">> cur:%p, end:%p", buf->cur, buf->end);

	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   1e7e0:	e9d0 2300 	ldrd	r2, r3, [r0]
   1e7e4:	1a9b      	subs	r3, r3, r2
   1e7e6:	2b01      	cmp	r3, #1
{
   1e7e8:	b510      	push	{r4, lr}
	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   1e7ea:	d90c      	bls.n	1e806 <unpack_uint16+0x26>
		return -EINVAL;
	}

	*val = *(buf->cur++) << 8; /* MSB */
   1e7ec:	4614      	mov	r4, r2
   1e7ee:	1c53      	adds	r3, r2, #1
   1e7f0:	6003      	str	r3, [r0, #0]
   1e7f2:	f814 3b02 	ldrb.w	r3, [r4], #2
   1e7f6:	021b      	lsls	r3, r3, #8
   1e7f8:	800b      	strh	r3, [r1, #0]
	*val |= *(buf->cur++); /* LSB */
   1e7fa:	6004      	str	r4, [r0, #0]

	MQTT_TRC("<< val:%04x", *val);

	return 0;
   1e7fc:	2000      	movs	r0, #0
	*val |= *(buf->cur++); /* LSB */
   1e7fe:	7852      	ldrb	r2, [r2, #1]
   1e800:	4313      	orrs	r3, r2
   1e802:	800b      	strh	r3, [r1, #0]
}
   1e804:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1e806:	f06f 0015 	mvn.w	r0, #21
   1e80a:	e7fb      	b.n	1e804 <unpack_uint16+0x24>

0001e80c <fixed_header_decode>:
	return 0;
}

int fixed_header_decode(struct buf_ctx *buf, uint8_t *type_and_flags,
			uint32_t *length)
{
   1e80c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   1e80e:	e9d0 3400 	ldrd	r3, r4, [r0]
   1e812:	429c      	cmp	r4, r3
   1e814:	d01f      	beq.n	1e856 <fixed_header_decode+0x4a>
	*val = *(buf->cur++);
   1e816:	1c5c      	adds	r4, r3, #1
   1e818:	6004      	str	r4, [r0, #0]
   1e81a:	781b      	ldrb	r3, [r3, #0]
   1e81c:	700b      	strb	r3, [r1, #0]
	*length = 0U;
   1e81e:	2100      	movs	r1, #0
		if (buf->cur >= buf->end) {
   1e820:	6847      	ldr	r7, [r0, #4]
	*length = 0U;
   1e822:	6011      	str	r1, [r2, #0]
		if (buf->cur >= buf->end) {
   1e824:	6804      	ldr	r4, [r0, #0]
   1e826:	42bc      	cmp	r4, r7
   1e828:	d218      	bcs.n	1e85c <fixed_header_decode+0x50>
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   1e82a:	4625      	mov	r5, r4
   1e82c:	f815 3b01 	ldrb.w	r3, [r5], #1
   1e830:	6816      	ldr	r6, [r2, #0]
   1e832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
								<< shift;
   1e836:	408b      	lsls	r3, r1
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   1e838:	4433      	add	r3, r6
   1e83a:	6013      	str	r3, [r2, #0]
	} while ((*(buf->cur++) & MQTT_LENGTH_CONTINUATION_BIT) != 0U);
   1e83c:	6005      	str	r5, [r0, #0]
   1e83e:	f994 4000 	ldrsb.w	r4, [r4]
   1e842:	2c00      	cmp	r4, #0
   1e844:	db04      	blt.n	1e850 <fixed_header_decode+0x44>
	if (*length > MQTT_MAX_PAYLOAD_SIZE) {
   1e846:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   1e84a:	d204      	bcs.n	1e856 <fixed_header_decode+0x4a>
	return 0;
   1e84c:	2000      	movs	r0, #0
   1e84e:	e004      	b.n	1e85a <fixed_header_decode+0x4e>
		if (bytes >= MQTT_MAX_LENGTH_BYTES) {
   1e850:	3107      	adds	r1, #7
   1e852:	291c      	cmp	r1, #28
   1e854:	d1e6      	bne.n	1e824 <fixed_header_decode+0x18>
		return -EINVAL;
   1e856:	f06f 0015 	mvn.w	r0, #21
	if (err_code != 0) {
		return err_code;
	}

	return packet_length_decode(buf, length);
}
   1e85a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -EAGAIN;
   1e85c:	f06f 000a 	mvn.w	r0, #10
   1e860:	e7fb      	b.n	1e85a <fixed_header_decode+0x4e>

0001e862 <connect_ack_decode>:

int connect_ack_decode(const struct mqtt_client *client, struct buf_ctx *buf,
		       struct mqtt_connack_param *param)
{
   1e862:	b530      	push	{r4, r5, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   1e864:	e9d1 3500 	ldrd	r3, r5, [r1]
   1e868:	429d      	cmp	r5, r3
   1e86a:	d102      	bne.n	1e872 <connect_ack_decode+0x10>
		return -EINVAL;
   1e86c:	f06f 0015 	mvn.w	r0, #21
	}

	param->return_code = (enum mqtt_conn_return_code)ret_code;

	return 0;
}
   1e870:	bd30      	pop	{r4, r5, pc}
	*val = *(buf->cur++);
   1e872:	1c5c      	adds	r4, r3, #1
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   1e874:	42a5      	cmp	r5, r4
	*val = *(buf->cur++);
   1e876:	600c      	str	r4, [r1, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   1e878:	d0f8      	beq.n	1e86c <connect_ack_decode+0xa>
	*val = *(buf->cur++);
   1e87a:	461d      	mov	r5, r3
   1e87c:	f815 4b02 	ldrb.w	r4, [r5], #2
   1e880:	600d      	str	r5, [r1, #0]
   1e882:	7859      	ldrb	r1, [r3, #1]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   1e884:	f890 305e 	ldrb.w	r3, [r0, #94]	; 0x5e
	return 0;
   1e888:	2000      	movs	r0, #0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   1e88a:	2b04      	cmp	r3, #4
			flags & MQTT_CONNACK_FLAG_SESSION_PRESENT;
   1e88c:	bf04      	itt	eq
   1e88e:	f004 0301 	andeq.w	r3, r4, #1
		param->session_present_flag =
   1e892:	7013      	strbeq	r3, [r2, #0]
	param->return_code = (enum mqtt_conn_return_code)ret_code;
   1e894:	7051      	strb	r1, [r2, #1]
	return 0;
   1e896:	e7eb      	b.n	1e870 <connect_ack_decode+0xe>

0001e898 <publish_decode>:

int publish_decode(uint8_t flags, uint32_t var_length, struct buf_ctx *buf,
		   struct mqtt_publish_param *param)
{
   1e898:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1e89c:	461c      	mov	r4, r3
   1e89e:	4617      	mov	r7, r2
	int err_code;
	uint32_t var_header_length;

	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   1e8a0:	7da2      	ldrb	r2, [r4, #22]
   1e8a2:	0043      	lsls	r3, r0, #1
   1e8a4:	f022 0203 	bic.w	r2, r2, #3
   1e8a8:	f003 0302 	and.w	r3, r3, #2
   1e8ac:	4313      	orrs	r3, r2
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
	param->message.topic.qos = ((flags & MQTT_HEADER_QOS_MASK) >> 1);
   1e8ae:	f3c0 0041 	ubfx	r0, r0, #1, #2
   1e8b2:	7220      	strb	r0, [r4, #8]
{
   1e8b4:	4688      	mov	r8, r1
	err_code = unpack_uint16(buf, &utf8_strlen);
   1e8b6:	4638      	mov	r0, r7
	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   1e8b8:	75a3      	strb	r3, [r4, #22]
	err_code = unpack_uint16(buf, &utf8_strlen);
   1e8ba:	f10d 0106 	add.w	r1, sp, #6
   1e8be:	f7ff ff8f 	bl	1e7e0 <unpack_uint16>
	if (err_code != 0) {
   1e8c2:	4606      	mov	r6, r0
   1e8c4:	b9c0      	cbnz	r0, 1e8f8 <publish_decode+0x60>
	if ((buf->end - buf->cur) < utf8_strlen) {
   1e8c6:	683b      	ldr	r3, [r7, #0]
   1e8c8:	687a      	ldr	r2, [r7, #4]
   1e8ca:	f8bd 5006 	ldrh.w	r5, [sp, #6]
   1e8ce:	1ad2      	subs	r2, r2, r3
   1e8d0:	42aa      	cmp	r2, r5
   1e8d2:	da02      	bge.n	1e8da <publish_decode+0x42>

	if (var_length < var_header_length) {
		MQTT_ERR("Corrupted PUBLISH message, header length (%u) larger "
			 "than total length (%u)", var_header_length,
			 var_length);
		return -EINVAL;
   1e8d4:	f06f 0615 	mvn.w	r6, #21
   1e8d8:	e00e      	b.n	1e8f8 <publish_decode+0x60>
	str->size = utf8_strlen;
   1e8da:	6065      	str	r5, [r4, #4]
	if (utf8_strlen) {
   1e8dc:	b185      	cbz	r5, 1e900 <publish_decode+0x68>
		str->utf8 = buf->cur;
   1e8de:	6023      	str	r3, [r4, #0]
		buf->cur += utf8_strlen;
   1e8e0:	442b      	add	r3, r5
   1e8e2:	603b      	str	r3, [r7, #0]
	if (param->message.topic.qos > MQTT_QOS_0_AT_MOST_ONCE) {
   1e8e4:	7a23      	ldrb	r3, [r4, #8]
   1e8e6:	b96b      	cbnz	r3, 1e904 <publish_decode+0x6c>
	var_header_length = param->message.topic.topic.size + sizeof(uint16_t);
   1e8e8:	3502      	adds	r5, #2
	if (var_length < var_header_length) {
   1e8ea:	4545      	cmp	r5, r8
   1e8ec:	d8f2      	bhi.n	1e8d4 <publish_decode+0x3c>
	}

	param->message.payload.data = NULL;
   1e8ee:	2300      	movs	r3, #0
	param->message.payload.len = var_length - var_header_length;
   1e8f0:	eba8 0505 	sub.w	r5, r8, r5
	param->message.payload.data = NULL;
   1e8f4:	60e3      	str	r3, [r4, #12]
	param->message.payload.len = var_length - var_header_length;
   1e8f6:	6125      	str	r5, [r4, #16]

	return 0;
}
   1e8f8:	4630      	mov	r0, r6
   1e8fa:	b002      	add	sp, #8
   1e8fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		str->utf8 = NULL;
   1e900:	6025      	str	r5, [r4, #0]
	if (err_code != 0) {
   1e902:	e7ef      	b.n	1e8e4 <publish_decode+0x4c>
		err_code = unpack_uint16(buf, &param->message_id);
   1e904:	4638      	mov	r0, r7
   1e906:	f104 0114 	add.w	r1, r4, #20
   1e90a:	f7ff ff69 	bl	1e7e0 <unpack_uint16>
		if (err_code != 0) {
   1e90e:	b908      	cbnz	r0, 1e914 <publish_decode+0x7c>
		var_header_length += sizeof(uint16_t);
   1e910:	3504      	adds	r5, #4
   1e912:	e7ea      	b.n	1e8ea <publish_decode+0x52>
   1e914:	4606      	mov	r6, r0
   1e916:	e7ef      	b.n	1e8f8 <publish_decode+0x60>

0001e918 <publish_ack_decode>:

int publish_ack_decode(struct buf_ctx *buf, struct mqtt_puback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   1e918:	f7ff bf62 	b.w	1e7e0 <unpack_uint16>

0001e91c <publish_receive_decode>:
}

int publish_receive_decode(struct buf_ctx *buf, struct mqtt_pubrec_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   1e91c:	f7ff bf60 	b.w	1e7e0 <unpack_uint16>

0001e920 <publish_release_decode>:
}

int publish_release_decode(struct buf_ctx *buf, struct mqtt_pubrel_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   1e920:	f7ff bf5e 	b.w	1e7e0 <unpack_uint16>

0001e924 <publish_complete_decode>:
}

int publish_complete_decode(struct buf_ctx *buf,
			    struct mqtt_pubcomp_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   1e924:	f7ff bf5c 	b.w	1e7e0 <unpack_uint16>

0001e928 <subscribe_ack_decode>:
}

int subscribe_ack_decode(struct buf_ctx *buf, struct mqtt_suback_param *param)
{
   1e928:	b538      	push	{r3, r4, r5, lr}
   1e92a:	4605      	mov	r5, r0
   1e92c:	460c      	mov	r4, r1
	int err_code;

	err_code = unpack_uint16(buf, &param->message_id);
   1e92e:	f7ff ff57 	bl	1e7e0 <unpack_uint16>
	if (err_code != 0) {
   1e932:	b930      	cbnz	r0, 1e942 <subscribe_ack_decode+0x1a>
		return err_code;
	}

	return unpack_data(buf->end - buf->cur, buf, &param->return_codes);
   1e934:	e9d5 2300 	ldrd	r2, r3, [r5]
   1e938:	1a99      	subs	r1, r3, r2
	str->len = length;
   1e93a:	60a1      	str	r1, [r4, #8]
	if (length > 0) {
   1e93c:	b111      	cbz	r1, 1e944 <subscribe_ack_decode+0x1c>
		str->data = buf->cur;
   1e93e:	6062      	str	r2, [r4, #4]
		buf->cur += length;
   1e940:	602b      	str	r3, [r5, #0]
}
   1e942:	bd38      	pop	{r3, r4, r5, pc}
		str->data = NULL;
   1e944:	6060      	str	r0, [r4, #4]
   1e946:	e7fc      	b.n	1e942 <subscribe_ack_decode+0x1a>

0001e948 <unsubscribe_ack_decode>:

int unsubscribe_ack_decode(struct buf_ctx *buf,
			   struct mqtt_unsuback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   1e948:	f7ff bf4a 	b.w	1e7e0 <unpack_uint16>

0001e94c <pack_uint16>:
	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   1e94c:	e9d1 3200 	ldrd	r3, r2, [r1]
   1e950:	1ad2      	subs	r2, r2, r3
   1e952:	2a01      	cmp	r2, #1
   1e954:	d909      	bls.n	1e96a <pack_uint16+0x1e>
	*(buf->cur++) = (val >> 8) & 0xFF;
   1e956:	1c5a      	adds	r2, r3, #1
   1e958:	600a      	str	r2, [r1, #0]
   1e95a:	0a02      	lsrs	r2, r0, #8
   1e95c:	701a      	strb	r2, [r3, #0]
	*(buf->cur++) = val & 0xFF;
   1e95e:	680b      	ldr	r3, [r1, #0]
   1e960:	1c5a      	adds	r2, r3, #1
   1e962:	600a      	str	r2, [r1, #0]
   1e964:	7018      	strb	r0, [r3, #0]
	return 0;
   1e966:	2000      	movs	r0, #0
   1e968:	4770      	bx	lr
		return -ENOMEM;
   1e96a:	f06f 000b 	mvn.w	r0, #11
}
   1e96e:	4770      	bx	lr

0001e970 <pack_utf8_str>:
{
   1e970:	b538      	push	{r3, r4, r5, lr}
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   1e972:	e9d1 2300 	ldrd	r2, r3, [r1]
{
   1e976:	4605      	mov	r5, r0
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   1e978:	6840      	ldr	r0, [r0, #4]
   1e97a:	1a9b      	subs	r3, r3, r2
   1e97c:	1c82      	adds	r2, r0, #2
   1e97e:	4293      	cmp	r3, r2
{
   1e980:	460c      	mov	r4, r1
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   1e982:	d30d      	bcc.n	1e9a0 <pack_utf8_str+0x30>
	(void)pack_uint16(str->size, buf);
   1e984:	b280      	uxth	r0, r0
   1e986:	f7ff ffe1 	bl	1e94c <pack_uint16>
	memcpy(buf->cur, str->utf8, str->size);
   1e98a:	e9d5 1200 	ldrd	r1, r2, [r5]
   1e98e:	6820      	ldr	r0, [r4, #0]
   1e990:	f7ff fe5f 	bl	1e652 <memcpy>
	return 0;
   1e994:	2000      	movs	r0, #0
	buf->cur += str->size;
   1e996:	6823      	ldr	r3, [r4, #0]
   1e998:	686a      	ldr	r2, [r5, #4]
   1e99a:	4413      	add	r3, r2
   1e99c:	6023      	str	r3, [r4, #0]
}
   1e99e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   1e9a0:	f06f 000b 	mvn.w	r0, #11
   1e9a4:	e7fb      	b.n	1e99e <pack_utf8_str+0x2e>

0001e9a6 <mqtt_encode_fixed_header>:
	uint32_t length = buf->cur - start;
   1e9a6:	6813      	ldr	r3, [r2, #0]
{
   1e9a8:	b570      	push	{r4, r5, r6, lr}
	uint32_t length = buf->cur - start;
   1e9aa:	1a5c      	subs	r4, r3, r1
	if (length > MQTT_MAX_PAYLOAD_SIZE) {
   1e9ac:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   1e9b0:	d227      	bcs.n	1ea02 <mqtt_encode_fixed_header+0x5c>
   1e9b2:	4625      	mov	r5, r4
   1e9b4:	2600      	movs	r6, #0
	} while (length > 0);
   1e9b6:	09ed      	lsrs	r5, r5, #7
   1e9b8:	b2f3      	uxtb	r3, r6
   1e9ba:	f106 0601 	add.w	r6, r6, #1
   1e9be:	d1fa      	bne.n	1e9b6 <mqtt_encode_fixed_header+0x10>
	fixed_header_length += sizeof(uint8_t);
   1e9c0:	3302      	adds	r3, #2
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   1e9c2:	6856      	ldr	r6, [r2, #4]
	buf->cur = start - fixed_header_length;
   1e9c4:	b2db      	uxtb	r3, r3
   1e9c6:	425d      	negs	r5, r3
   1e9c8:	1acb      	subs	r3, r1, r3
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   1e9ca:	42b3      	cmp	r3, r6
	buf->cur = start - fixed_header_length;
   1e9cc:	6013      	str	r3, [r2, #0]
	*(buf->cur++) = val;
   1e9ce:	bf1e      	ittt	ne
   1e9d0:	3301      	addne	r3, #1
   1e9d2:	6013      	strne	r3, [r2, #0]
   1e9d4:	5548      	strbne	r0, [r1, r5]
	return 0;
   1e9d6:	4620      	mov	r0, r4
			*(buf->cur) = length & MQTT_LENGTH_VALUE_MASK;
   1e9d8:	6813      	ldr	r3, [r2, #0]
   1e9da:	f000 017f 	and.w	r1, r0, #127	; 0x7f
   1e9de:	7019      	strb	r1, [r3, #0]
			if (length > 0) {
   1e9e0:	09c0      	lsrs	r0, r0, #7
				*(buf->cur) |= MQTT_LENGTH_CONTINUATION_BIT;
   1e9e2:	bf1f      	itttt	ne
   1e9e4:	6811      	ldrne	r1, [r2, #0]
   1e9e6:	780b      	ldrbne	r3, [r1, #0]
   1e9e8:	f063 037f 	ornne	r3, r3, #127	; 0x7f
   1e9ec:	700b      	strbne	r3, [r1, #0]
			buf->cur++;
   1e9ee:	6813      	ldr	r3, [r2, #0]
   1e9f0:	3301      	adds	r3, #1
   1e9f2:	6013      	str	r3, [r2, #0]
	} while (length > 0);
   1e9f4:	2800      	cmp	r0, #0
   1e9f6:	d1ef      	bne.n	1e9d8 <mqtt_encode_fixed_header+0x32>
	buf->cur = buf->cur - fixed_header_length;
   1e9f8:	441d      	add	r5, r3
	buf->end = buf->cur + length + fixed_header_length;
   1e9fa:	4423      	add	r3, r4
	buf->cur = buf->cur - fixed_header_length;
   1e9fc:	6015      	str	r5, [r2, #0]
	buf->end = buf->cur + length + fixed_header_length;
   1e9fe:	6053      	str	r3, [r2, #4]
}
   1ea00:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   1ea02:	f06f 0023 	mvn.w	r0, #35	; 0x23
   1ea06:	e7fb      	b.n	1ea00 <mqtt_encode_fixed_header+0x5a>

0001ea08 <publish_encode>:
{
   1ea08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   1ea0c:	7d87      	ldrb	r7, [r0, #22]
   1ea0e:	7a04      	ldrb	r4, [r0, #8]
   1ea10:	f007 0801 	and.w	r8, r7, #1
{
   1ea14:	4605      	mov	r5, r0
   1ea16:	4689      	mov	r9, r1
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   1ea18:	f3c7 0740 	ubfx	r7, r7, #1, #1
	if ((param->message.topic.qos) && (param->message_id == 0U)) {
   1ea1c:	b10c      	cbz	r4, 1ea22 <publish_encode+0x1a>
   1ea1e:	8a83      	ldrh	r3, [r0, #20]
   1ea20:	b383      	cbz	r3, 1ea84 <publish_encode+0x7c>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1ea22:	f8d9 6000 	ldr.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   1ea26:	4649      	mov	r1, r9
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1ea28:	3605      	adds	r6, #5
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   1ea2a:	4628      	mov	r0, r5
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1ea2c:	f8c9 6000 	str.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   1ea30:	f7ff ff9e 	bl	1e970 <pack_utf8_str>
	if (err_code != 0) {
   1ea34:	b9b0      	cbnz	r0, 1ea64 <publish_encode+0x5c>
	if (param->message.topic.qos) {
   1ea36:	7a2b      	ldrb	r3, [r5, #8]
   1ea38:	b9b3      	cbnz	r3, 1ea68 <publish_encode+0x60>
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   1ea3a:	0060      	lsls	r0, r4, #1
   1ea3c:	f000 0006 	and.w	r0, r0, #6
	buf->cur += param->message.payload.len;
   1ea40:	692a      	ldr	r2, [r5, #16]
   1ea42:	f8d9 3000 	ldr.w	r3, [r9]
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   1ea46:	4338      	orrs	r0, r7
   1ea48:	ea40 00c8 	orr.w	r0, r0, r8, lsl #3
	buf->cur += param->message.payload.len;
   1ea4c:	4413      	add	r3, r2
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   1ea4e:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   1ea52:	464a      	mov	r2, r9
   1ea54:	4631      	mov	r1, r6
	buf->cur += param->message.payload.len;
   1ea56:	f8c9 3000 	str.w	r3, [r9]
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   1ea5a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   1ea5e:	f7ff ffa2 	bl	1e9a6 <mqtt_encode_fixed_header>
	if (err_code != 0) {
   1ea62:	b140      	cbz	r0, 1ea76 <publish_encode+0x6e>
}
   1ea64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_uint16(param->message_id, buf);
   1ea68:	4649      	mov	r1, r9
   1ea6a:	8aa8      	ldrh	r0, [r5, #20]
   1ea6c:	f7ff ff6e 	bl	1e94c <pack_uint16>
		if (err_code != 0) {
   1ea70:	2800      	cmp	r0, #0
   1ea72:	d0e2      	beq.n	1ea3a <publish_encode+0x32>
   1ea74:	e7f6      	b.n	1ea64 <publish_encode+0x5c>
	buf->end -= param->message.payload.len;
   1ea76:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1ea7a:	692a      	ldr	r2, [r5, #16]
   1ea7c:	1a9b      	subs	r3, r3, r2
   1ea7e:	f8c9 3004 	str.w	r3, [r9, #4]
	return 0;
   1ea82:	e7ef      	b.n	1ea64 <publish_encode+0x5c>
		return -EINVAL;
   1ea84:	f06f 0015 	mvn.w	r0, #21
   1ea88:	e7ec      	b.n	1ea64 <publish_encode+0x5c>

0001ea8a <mqtt_read_message_chunk>:
	return err_code;
}

static int mqtt_read_message_chunk(struct mqtt_client *client,
				   struct buf_ctx *buf, uint32_t length)
{
   1ea8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ea8c:	460d      	mov	r5, r1
	uint32_t remaining;
	int len;

	/* In case all data requested has already been buffered, return. */
	if (length <= (buf->end - buf->cur)) {
   1ea8e:	e9d1 3100 	ldrd	r3, r1, [r1]
   1ea92:	1acb      	subs	r3, r1, r3
   1ea94:	4293      	cmp	r3, r2
{
   1ea96:	4606      	mov	r6, r0
	if (length <= (buf->end - buf->cur)) {
   1ea98:	d301      	bcc.n	1ea9e <mqtt_read_message_chunk+0x14>
		return 0;
   1ea9a:	2000      	movs	r0, #0
		MQTT_TRC("[CID %p]: Message partially received.", client);
		return -EAGAIN;
	}

	return 0;
}
   1ea9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	remaining = length - (buf->end - buf->cur);
   1ea9e:	1ad4      	subs	r4, r2, r3
	if ((buf->end + remaining > client->rx_buf + client->rx_buf_size) ||
   1eaa0:	190f      	adds	r7, r1, r4
   1eaa2:	e9d0 2313 	ldrd	r2, r3, [r0, #76]	; 0x4c
   1eaa6:	4413      	add	r3, r2
   1eaa8:	429f      	cmp	r7, r3
   1eaaa:	d813      	bhi.n	1ead4 <mqtt_read_message_chunk+0x4a>
   1eaac:	4297      	cmp	r7, r2
   1eaae:	d311      	bcc.n	1ead4 <mqtt_read_message_chunk+0x4a>
	len = mqtt_transport_read(client, buf->end, remaining, false);
   1eab0:	2300      	movs	r3, #0
   1eab2:	4622      	mov	r2, r4
   1eab4:	f7f2 f802 	bl	10abc <mqtt_transport_read>
	if (len < 0) {
   1eab8:	2800      	cmp	r0, #0
   1eaba:	dbef      	blt.n	1ea9c <mqtt_read_message_chunk+0x12>
	if (len == 0) {
   1eabc:	d00d      	beq.n	1eada <mqtt_read_message_chunk+0x50>
	client->internal.rx_buf_datalen += len;
   1eabe:	69f3      	ldr	r3, [r6, #28]
	if (len < remaining) {
   1eac0:	42a0      	cmp	r0, r4
	client->internal.rx_buf_datalen += len;
   1eac2:	4403      	add	r3, r0
   1eac4:	61f3      	str	r3, [r6, #28]
	buf->end += len;
   1eac6:	686b      	ldr	r3, [r5, #4]
   1eac8:	4403      	add	r3, r0
   1eaca:	606b      	str	r3, [r5, #4]
	if (len < remaining) {
   1eacc:	d2e5      	bcs.n	1ea9a <mqtt_read_message_chunk+0x10>
		return -EAGAIN;
   1eace:	f06f 000a 	mvn.w	r0, #10
   1ead2:	e7e3      	b.n	1ea9c <mqtt_read_message_chunk+0x12>
		return -ENOMEM;
   1ead4:	f06f 000b 	mvn.w	r0, #11
   1ead8:	e7e0      	b.n	1ea9c <mqtt_read_message_chunk+0x12>
		return -ENOTCONN;
   1eada:	f06f 0038 	mvn.w	r0, #56	; 0x38
   1eade:	e7dd      	b.n	1ea9c <mqtt_read_message_chunk+0x12>

0001eae0 <mqtt_handle_rx>:

	return err_code;
}

int mqtt_handle_rx(struct mqtt_client *client)
{
   1eae0:	b570      	push	{r4, r5, r6, lr}
	int err_code;
	uint8_t type_and_flags;
	uint32_t var_length;
	struct buf_ctx buf;

	buf.cur = client->rx_buf;
   1eae2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   1eae4:	69c2      	ldr	r2, [r0, #28]
{
   1eae6:	b08c      	sub	sp, #48	; 0x30
	buf.cur = client->rx_buf;
   1eae8:	9302      	str	r3, [sp, #8]
{
   1eaea:	4605      	mov	r5, r0
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   1eaec:	4413      	add	r3, r2
	uint8_t chunk_size = MQTT_FIXED_HEADER_MIN_SIZE;
   1eaee:	2202      	movs	r2, #2
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   1eaf0:	9303      	str	r3, [sp, #12]
		err_code = mqtt_read_message_chunk(client, buf, chunk_size);
   1eaf2:	4628      	mov	r0, r5
   1eaf4:	a902      	add	r1, sp, #8
   1eaf6:	f7ff ffc8 	bl	1ea8a <mqtt_read_message_chunk>
		if (err_code < 0) {
   1eafa:	1e04      	subs	r4, r0, #0
   1eafc:	db2d      	blt.n	1eb5a <mqtt_handle_rx+0x7a>
		buf->cur = client->rx_buf;
   1eafe:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   1eb00:	aa01      	add	r2, sp, #4
   1eb02:	f10d 0103 	add.w	r1, sp, #3
   1eb06:	a802      	add	r0, sp, #8
		buf->cur = client->rx_buf;
   1eb08:	9302      	str	r3, [sp, #8]
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   1eb0a:	f7ff fe7f 	bl	1e80c <fixed_header_decode>
	} while (err_code == -EAGAIN);
   1eb0e:	f110 0f0b 	cmn.w	r0, #11
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   1eb12:	4604      	mov	r4, r0
		chunk_size = 1U;
   1eb14:	f04f 0201 	mov.w	r2, #1
	} while (err_code == -EAGAIN);
   1eb18:	d0eb      	beq.n	1eaf2 <mqtt_handle_rx+0x12>

	err_code = mqtt_read_and_parse_fixed_header(client, &type_and_flags,
						    &var_length, &buf);
	if (err_code < 0) {
   1eb1a:	2800      	cmp	r0, #0
   1eb1c:	db21      	blt.n	1eb62 <mqtt_handle_rx+0x82>
		return (err_code == -EAGAIN) ? 0 : err_code;
	}

	if ((type_and_flags & 0xF0) == MQTT_PKT_TYPE_PUBLISH) {
   1eb1e:	f89d 6003 	ldrb.w	r6, [sp, #3]
   1eb22:	f006 03f0 	and.w	r3, r6, #240	; 0xf0
   1eb26:	2b30      	cmp	r3, #48	; 0x30
   1eb28:	d11e      	bne.n	1eb68 <mqtt_handle_rx+0x88>
	err_code = mqtt_read_message_chunk(client, buf, sizeof(uint16_t));
   1eb2a:	2202      	movs	r2, #2
   1eb2c:	4628      	mov	r0, r5
   1eb2e:	a902      	add	r1, sp, #8
   1eb30:	f7ff ffab 	bl	1ea8a <mqtt_read_message_chunk>
	if (err_code < 0) {
   1eb34:	1e04      	subs	r4, r0, #0
   1eb36:	db10      	blt.n	1eb5a <mqtt_handle_rx+0x7a>
	variable_header_length = *buf->cur << 8; /* MSB */
   1eb38:	9b02      	ldr	r3, [sp, #8]
	if (qos > MQTT_QOS_0_AT_MOST_ONCE) {
   1eb3a:	f016 0f06 	tst.w	r6, #6
   1eb3e:	881a      	ldrh	r2, [r3, #0]
	err_code = mqtt_read_message_chunk(client, buf,
   1eb40:	4628      	mov	r0, r5
   1eb42:	ba52      	rev16	r2, r2
   1eb44:	b292      	uxth	r2, r2
	variable_header_length += sizeof(uint16_t);
   1eb46:	bf0c      	ite	eq
   1eb48:	3202      	addeq	r2, #2
		variable_header_length += sizeof(uint16_t);
   1eb4a:	3204      	addne	r2, #4
	err_code = mqtt_read_message_chunk(client, buf,
   1eb4c:	a902      	add	r1, sp, #8
   1eb4e:	f7ff ff9c 	bl	1ea8a <mqtt_read_message_chunk>
	if (err_code < 0) {
   1eb52:	ea00 74e0 	and.w	r4, r0, r0, asr #31
							&buf);
	} else {
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
	}

	if (err_code < 0) {
   1eb56:	2c00      	cmp	r4, #0
   1eb58:	da0d      	bge.n	1eb76 <mqtt_handle_rx+0x96>
		return (err_code == -EAGAIN) ? 0 : err_code;
   1eb5a:	f114 0f0b 	cmn.w	r4, #11
   1eb5e:	d100      	bne.n	1eb62 <mqtt_handle_rx+0x82>
   1eb60:	2400      	movs	r4, #0
	}

	client->internal.rx_buf_datalen = 0U;

	return 0;
}
   1eb62:	4620      	mov	r0, r4
   1eb64:	b00c      	add	sp, #48	; 0x30
   1eb66:	bd70      	pop	{r4, r5, r6, pc}
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   1eb68:	4628      	mov	r0, r5
   1eb6a:	9a01      	ldr	r2, [sp, #4]
   1eb6c:	a902      	add	r1, sp, #8
   1eb6e:	f7ff ff8c 	bl	1ea8a <mqtt_read_message_chunk>
   1eb72:	4604      	mov	r4, r0
   1eb74:	e7ef      	b.n	1eb56 <mqtt_handle_rx+0x76>
	evt.result = 0;
   1eb76:	2200      	movs	r2, #0
	err_code = mqtt_handle_packet(client, type_and_flags, var_length, &buf);
   1eb78:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1eb7c:	9901      	ldr	r1, [sp, #4]
	evt.result = 0;
   1eb7e:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	switch (type_and_flags & 0xF0) {
   1eb82:	2b60      	cmp	r3, #96	; 0x60
	evt.result = 0;
   1eb84:	920b      	str	r2, [sp, #44]	; 0x2c
	switch (type_and_flags & 0xF0) {
   1eb86:	d066      	beq.n	1ec56 <mqtt_handle_rx+0x176>
   1eb88:	d813      	bhi.n	1ebb2 <mqtt_handle_rx+0xd2>
   1eb8a:	2b40      	cmp	r3, #64	; 0x40
   1eb8c:	d059      	beq.n	1ec42 <mqtt_handle_rx+0x162>
   1eb8e:	d806      	bhi.n	1eb9e <mqtt_handle_rx+0xbe>
   1eb90:	2b20      	cmp	r3, #32
   1eb92:	d02f      	beq.n	1ebf4 <mqtt_handle_rx+0x114>
   1eb94:	2b30      	cmp	r3, #48	; 0x30
   1eb96:	d048      	beq.n	1ec2a <mqtt_handle_rx+0x14a>
	client->internal.rx_buf_datalen = 0U;
   1eb98:	2400      	movs	r4, #0
   1eb9a:	61ec      	str	r4, [r5, #28]
	return 0;
   1eb9c:	e7e1      	b.n	1eb62 <mqtt_handle_rx+0x82>
	switch (type_and_flags & 0xF0) {
   1eb9e:	2b50      	cmp	r3, #80	; 0x50
   1eba0:	d1fa      	bne.n	1eb98 <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_PUBREC;
   1eba2:	2304      	movs	r3, #4
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   1eba4:	a905      	add	r1, sp, #20
   1eba6:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREC;
   1eba8:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   1ebac:	f7ff feb6 	bl	1e91c <publish_receive_decode>
   1ebb0:	e04e      	b.n	1ec50 <mqtt_handle_rx+0x170>
	switch (type_and_flags & 0xF0) {
   1ebb2:	2bb0      	cmp	r3, #176	; 0xb0
   1ebb4:	d05f      	beq.n	1ec76 <mqtt_handle_rx+0x196>
   1ebb6:	d80b      	bhi.n	1ebd0 <mqtt_handle_rx+0xf0>
   1ebb8:	2b70      	cmp	r3, #112	; 0x70
   1ebba:	d054      	beq.n	1ec66 <mqtt_handle_rx+0x186>
   1ebbc:	2b90      	cmp	r3, #144	; 0x90
   1ebbe:	d1eb      	bne.n	1eb98 <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_SUBACK;
   1ebc0:	2307      	movs	r3, #7
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   1ebc2:	a905      	add	r1, sp, #20
   1ebc4:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_SUBACK;
   1ebc6:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   1ebca:	f7ff fead 	bl	1e928 <subscribe_ack_decode>
   1ebce:	e03f      	b.n	1ec50 <mqtt_handle_rx+0x170>
	switch (type_and_flags & 0xF0) {
   1ebd0:	2bd0      	cmp	r3, #208	; 0xd0
   1ebd2:	d1e1      	bne.n	1eb98 <mqtt_handle_rx+0xb8>
		if (client->unacked_ping <= 0) {
   1ebd4:	f995 305f 	ldrsb.w	r3, [r5, #95]	; 0x5f
	int err_code = 0;
   1ebd8:	2400      	movs	r4, #0
		if (client->unacked_ping <= 0) {
   1ebda:	2b00      	cmp	r3, #0
			client->unacked_ping--;
   1ebdc:	bfc8      	it	gt
   1ebde:	f103 32ff 	addgt.w	r2, r3, #4294967295
		evt.type = MQTT_EVT_PINGRESP;
   1ebe2:	f04f 0309 	mov.w	r3, #9
			client->unacked_ping--;
   1ebe6:	bfc8      	it	gt
   1ebe8:	b252      	sxtbgt	r2, r2
   1ebea:	f885 205f 	strb.w	r2, [r5, #95]	; 0x5f
		evt.type = MQTT_EVT_PINGRESP;
   1ebee:	f88d 3010 	strb.w	r3, [sp, #16]
	if (notify_event == true) {
   1ebf2:	e010      	b.n	1ec16 <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_CONNACK;
   1ebf4:	f88d 2010 	strb.w	r2, [sp, #16]
		err_code = connect_ack_decode(client, buf, &evt.param.connack);
   1ebf8:	4628      	mov	r0, r5
   1ebfa:	aa05      	add	r2, sp, #20
   1ebfc:	a902      	add	r1, sp, #8
   1ebfe:	f7ff fe30 	bl	1e862 <connect_ack_decode>
		if (err_code == 0) {
   1ec02:	4604      	mov	r4, r0
   1ec04:	bb28      	cbnz	r0, 1ec52 <mqtt_handle_rx+0x172>
			if (evt.param.connack.return_code ==
   1ec06:	f89d 2015 	ldrb.w	r2, [sp, #21]
   1ec0a:	b95a      	cbnz	r2, 1ec24 <mqtt_handle_rx+0x144>
				MQTT_SET_STATE(client, MQTT_STATE_CONNECTED);
   1ec0c:	69ab      	ldr	r3, [r5, #24]
   1ec0e:	f043 0304 	orr.w	r3, r3, #4
   1ec12:	61ab      	str	r3, [r5, #24]
			evt.result = evt.param.connack.return_code;
   1ec14:	920b      	str	r2, [sp, #44]	; 0x2c
		event_notify(client, &evt);
   1ec16:	4628      	mov	r0, r5
   1ec18:	a904      	add	r1, sp, #16
   1ec1a:	f000 f8c5 	bl	1eda8 <event_notify>
	if (err_code < 0) {
   1ec1e:	2c00      	cmp	r4, #0
   1ec20:	daba      	bge.n	1eb98 <mqtt_handle_rx+0xb8>
   1ec22:	e79e      	b.n	1eb62 <mqtt_handle_rx+0x82>
				err_code = -ECONNREFUSED;
   1ec24:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   1ec28:	e7f4      	b.n	1ec14 <mqtt_handle_rx+0x134>
		evt.type = MQTT_EVT_PUBLISH;
   1ec2a:	2302      	movs	r3, #2
		err_code = publish_decode(type_and_flags, var_length, buf,
   1ec2c:	aa02      	add	r2, sp, #8
		evt.type = MQTT_EVT_PUBLISH;
   1ec2e:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_decode(type_and_flags, var_length, buf,
   1ec32:	ab05      	add	r3, sp, #20
   1ec34:	f7ff fe30 	bl	1e898 <publish_decode>
		client->internal.remaining_payload =
   1ec38:	9b09      	ldr	r3, [sp, #36]	; 0x24
		err_code = publish_decode(type_and_flags, var_length, buf,
   1ec3a:	4604      	mov	r4, r0
		evt.result = err_code;
   1ec3c:	900b      	str	r0, [sp, #44]	; 0x2c
		client->internal.remaining_payload =
   1ec3e:	622b      	str	r3, [r5, #32]
	if (notify_event == true) {
   1ec40:	e7e9      	b.n	1ec16 <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_PUBACK;
   1ec42:	2303      	movs	r3, #3
		err_code = publish_ack_decode(buf, &evt.param.puback);
   1ec44:	a905      	add	r1, sp, #20
   1ec46:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBACK;
   1ec48:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_ack_decode(buf, &evt.param.puback);
   1ec4c:	f7ff fe64 	bl	1e918 <publish_ack_decode>
   1ec50:	4604      	mov	r4, r0
		evt.result = err_code;
   1ec52:	940b      	str	r4, [sp, #44]	; 0x2c
	if (notify_event == true) {
   1ec54:	e7df      	b.n	1ec16 <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_PUBREL;
   1ec56:	2305      	movs	r3, #5
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   1ec58:	a905      	add	r1, sp, #20
   1ec5a:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREL;
   1ec5c:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   1ec60:	f7ff fe5e 	bl	1e920 <publish_release_decode>
   1ec64:	e7f4      	b.n	1ec50 <mqtt_handle_rx+0x170>
		evt.type = MQTT_EVT_PUBCOMP;
   1ec66:	2306      	movs	r3, #6
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   1ec68:	a905      	add	r1, sp, #20
   1ec6a:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBCOMP;
   1ec6c:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   1ec70:	f7ff fe58 	bl	1e924 <publish_complete_decode>
   1ec74:	e7ec      	b.n	1ec50 <mqtt_handle_rx+0x170>
		evt.type = MQTT_EVT_UNSUBACK;
   1ec76:	2308      	movs	r3, #8
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   1ec78:	a905      	add	r1, sp, #20
   1ec7a:	eb0d 0003 	add.w	r0, sp, r3
		evt.type = MQTT_EVT_UNSUBACK;
   1ec7e:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   1ec82:	f7ff fe61 	bl	1e948 <unsubscribe_ack_decode>
   1ec86:	e7e3      	b.n	1ec50 <mqtt_handle_rx+0x170>

0001ec88 <mqtt_client_tcp_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tcp_connect(struct mqtt_client *client)
{
   1ec88:	b538      	push	{r3, r4, r5, lr}
	const struct sockaddr *broker = client->broker;
   1ec8a:	6b45      	ldr	r5, [r0, #52]	; 0x34
{
   1ec8c:	4604      	mov	r4, r0
	int ret;

	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   1ec8e:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   1ec90:	2206      	movs	r2, #6
   1ec92:	2101      	movs	r1, #1
   1ec94:	f7f0 faec 	bl	f270 <z_impl_zsock_socket>
					    IPPROTO_TCP);
	if (client->transport.tcp.sock < 0) {
   1ec98:	2800      	cmp	r0, #0
	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   1ec9a:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tcp.sock < 0) {
   1ec9c:	da04      	bge.n	1eca8 <mqtt_client_tcp_connect+0x20>
   1ec9e:	f7fd f803 	bl	1bca8 <z_impl_z_errno>

	ret = connect(client->transport.tcp.sock, client->broker,
		      peer_addr_size);
	if (ret < 0) {
		(void)close(client->transport.tcp.sock);
		return -errno;
   1eca2:	6800      	ldr	r0, [r0, #0]
   1eca4:	4240      	negs	r0, r0
	}

	MQTT_TRC("Connect completed");
	return 0;
}
   1eca6:	bd38      	pop	{r3, r4, r5, pc}
	if (broker->sa_family == AF_INET) {
   1eca8:	882b      	ldrh	r3, [r5, #0]
	ret = connect(client->transport.tcp.sock, client->broker,
   1ecaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
	if (broker->sa_family == AF_INET) {
   1ecac:	2b01      	cmp	r3, #1
		peer_addr_size = sizeof(struct sockaddr_in);
   1ecae:	bf14      	ite	ne
   1ecb0:	2218      	movne	r2, #24
   1ecb2:	2208      	moveq	r2, #8
	return z_impl_zsock_connect(sock, addr, addrlen);
   1ecb4:	f7ff fa0c 	bl	1e0d0 <z_impl_zsock_connect>
	if (ret < 0) {
   1ecb8:	2800      	cmp	r0, #0
   1ecba:	da03      	bge.n	1ecc4 <mqtt_client_tcp_connect+0x3c>
		(void)close(client->transport.tcp.sock);
   1ecbc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   1ecbe:	f7ff f9f0 	bl	1e0a2 <z_impl_zsock_close>
   1ecc2:	e7ec      	b.n	1ec9e <mqtt_client_tcp_connect+0x16>
	return 0;
   1ecc4:	2000      	movs	r0, #0
   1ecc6:	e7ee      	b.n	1eca6 <mqtt_client_tcp_connect+0x1e>

0001ecc8 <mqtt_client_tcp_write>:

int mqtt_client_tcp_write(struct mqtt_client *client, const uint8_t *data,
			  uint32_t datalen)
{
   1ecc8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t offset = 0U;
   1eccc:	2400      	movs	r4, #0
{
   1ecce:	4606      	mov	r6, r0
   1ecd0:	460f      	mov	r7, r1
   1ecd2:	4615      	mov	r5, r2
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   1ecd4:	46a0      	mov	r8, r4
	int ret;

	while (offset < datalen) {
   1ecd6:	42ac      	cmp	r4, r5
   1ecd8:	d301      	bcc.n	1ecde <mqtt_client_tcp_write+0x16>
		}

		offset += ret;
	}

	return 0;
   1ecda:	2000      	movs	r0, #0
   1ecdc:	e00d      	b.n	1ecfa <mqtt_client_tcp_write+0x32>
		ret = send(client->transport.tcp.sock, data + offset,
   1ecde:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   1ece0:	2300      	movs	r3, #0
   1ece2:	e9cd 8800 	strd	r8, r8, [sp]
   1ece6:	1b2a      	subs	r2, r5, r4
   1ece8:	1939      	adds	r1, r7, r4
   1ecea:	f7ff fa07 	bl	1e0fc <z_impl_zsock_sendto>
		if (ret < 0) {
   1ecee:	1e03      	subs	r3, r0, #0
   1ecf0:	da06      	bge.n	1ed00 <mqtt_client_tcp_write+0x38>
   1ecf2:	f7fc ffd9 	bl	1bca8 <z_impl_z_errno>
			return -errno;
   1ecf6:	6800      	ldr	r0, [r0, #0]
   1ecf8:	4240      	negs	r0, r0
}
   1ecfa:	b002      	add	sp, #8
   1ecfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   1ed00:	441c      	add	r4, r3
   1ed02:	e7e8      	b.n	1ecd6 <mqtt_client_tcp_write+0xe>

0001ed04 <mqtt_client_tcp_write_msg>:

int mqtt_client_tcp_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)

{
   1ed04:	b508      	push	{r3, lr}
	int ret;

	ret = sendmsg(client->transport.tcp.sock, message, 0);
   1ed06:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_sendmsg(sock, msg, flags);
   1ed08:	2200      	movs	r2, #0
   1ed0a:	f7ff fa14 	bl	1e136 <z_impl_zsock_sendmsg>
	if (ret < 0) {
   1ed0e:	2800      	cmp	r0, #0
   1ed10:	da04      	bge.n	1ed1c <mqtt_client_tcp_write_msg+0x18>
   1ed12:	f7fc ffc9 	bl	1bca8 <z_impl_z_errno>
		return -errno;
   1ed16:	6800      	ldr	r0, [r0, #0]
   1ed18:	4240      	negs	r0, r0
	}

	return 0;
}
   1ed1a:	bd08      	pop	{r3, pc}
	return 0;
   1ed1c:	2000      	movs	r0, #0
   1ed1e:	e7fc      	b.n	1ed1a <mqtt_client_tcp_write_msg+0x16>

0001ed20 <mqtt_client_tcp_read>:

int mqtt_client_tcp_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			 bool shall_block)
{
   1ed20:	b513      	push	{r0, r1, r4, lr}
   1ed22:	2400      	movs	r4, #0
	int flags = 0;
	int ret;

	if (!shall_block) {
   1ed24:	2b00      	cmp	r3, #0
		flags |= MSG_DONTWAIT;
   1ed26:	bf14      	ite	ne
   1ed28:	4623      	movne	r3, r4
   1ed2a:	2340      	moveq	r3, #64	; 0x40
	}

	ret = recv(client->transport.tcp.sock, data, buflen, flags);
   1ed2c:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   1ed2e:	e9cd 4400 	strd	r4, r4, [sp]
   1ed32:	f7ff fa16 	bl	1e162 <z_impl_zsock_recvfrom>
	if (ret < 0) {
   1ed36:	2800      	cmp	r0, #0
   1ed38:	da03      	bge.n	1ed42 <mqtt_client_tcp_read+0x22>
   1ed3a:	f7fc ffb5 	bl	1bca8 <z_impl_z_errno>
		return -errno;
   1ed3e:	6800      	ldr	r0, [r0, #0]
   1ed40:	4240      	negs	r0, r0
	}

	return ret;
}
   1ed42:	b002      	add	sp, #8
   1ed44:	bd10      	pop	{r4, pc}

0001ed46 <mqtt_client_tcp_disconnect>:

int mqtt_client_tcp_disconnect(struct mqtt_client *client)
{
   1ed46:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tcp.sock);

	ret = close(client->transport.tcp.sock);
   1ed48:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   1ed4a:	f7ff f9aa 	bl	1e0a2 <z_impl_zsock_close>
	if (ret < 0) {
   1ed4e:	2800      	cmp	r0, #0
   1ed50:	da04      	bge.n	1ed5c <mqtt_client_tcp_disconnect+0x16>
   1ed52:	f7fc ffa9 	bl	1bca8 <z_impl_z_errno>
		return -errno;
   1ed56:	6800      	ldr	r0, [r0, #0]
   1ed58:	4240      	negs	r0, r0
	}

	return 0;
}
   1ed5a:	bd08      	pop	{r3, pc}
	return 0;
   1ed5c:	2000      	movs	r0, #0
   1ed5e:	e7fc      	b.n	1ed5a <mqtt_client_tcp_disconnect+0x14>

0001ed60 <mqtt_transport_disconnect>:

int mqtt_transport_disconnect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].disconnect(client);
   1ed60:	f7ff bff1 	b.w	1ed46 <mqtt_client_tcp_disconnect>

0001ed64 <tx_buf_init>:
	client->internal.remaining_payload = 0U;
}

/** @brief Initialize tx buffer. */
static void tx_buf_init(struct mqtt_client *client, struct buf_ctx *buf)
{
   1ed64:	b538      	push	{r3, r4, r5, lr}
   1ed66:	4604      	mov	r4, r0
   1ed68:	460d      	mov	r5, r1
	memset(client->tx_buf, 0, client->tx_buf_size);
   1ed6a:	6d82      	ldr	r2, [r0, #88]	; 0x58
   1ed6c:	2100      	movs	r1, #0
   1ed6e:	6d40      	ldr	r0, [r0, #84]	; 0x54
   1ed70:	f7ff fc9a 	bl	1e6a8 <memset>
	buf->cur = client->tx_buf;
   1ed74:	6d63      	ldr	r3, [r4, #84]	; 0x54
	buf->end = client->tx_buf + client->tx_buf_size;
   1ed76:	6da2      	ldr	r2, [r4, #88]	; 0x58
	buf->cur = client->tx_buf;
   1ed78:	602b      	str	r3, [r5, #0]
	buf->end = client->tx_buf + client->tx_buf_size;
   1ed7a:	4413      	add	r3, r2
   1ed7c:	606b      	str	r3, [r5, #4]
}
   1ed7e:	bd38      	pop	{r3, r4, r5, pc}

0001ed80 <k_uptime_get>:
{
   1ed80:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   1ed82:	f001 fb7b 	bl	2047c <z_impl_k_uptime_ticks>
   1ed86:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1ed8a:	fba0 2304 	umull	r2, r3, r0, r4
   1ed8e:	fb04 3301 	mla	r3, r4, r1, r3
   1ed92:	0bd0      	lsrs	r0, r2, #15
}
   1ed94:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   1ed98:	0bd9      	lsrs	r1, r3, #15
   1ed9a:	bd10      	pop	{r4, pc}

0001ed9c <mqtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
   1ed9c:	f04f 32ff 	mov.w	r2, #4294967295
   1eda0:	f04f 33ff 	mov.w	r3, #4294967295
   1eda4:	f7fd ba10 	b.w	1c1c8 <z_impl_k_mutex_lock>

0001eda8 <event_notify>:

void event_notify(struct mqtt_client *client, const struct mqtt_evt *evt)
{
   1eda8:	b513      	push	{r0, r1, r4, lr}
	if (client->evt_cb != NULL) {
   1edaa:	6c83      	ldr	r3, [r0, #72]	; 0x48
{
   1edac:	4604      	mov	r4, r0
   1edae:	9101      	str	r1, [sp, #4]
	if (client->evt_cb != NULL) {
   1edb0:	b15b      	cbz	r3, 1edca <event_notify+0x22>

/**@brief Release the lock on the module specific mutex, if any.
 */
static inline void mqtt_mutex_unlock(struct mqtt_client *client)
{
	int ret = sys_mutex_unlock(&client->internal.mutex);
   1edb2:	f7f1 fe91 	bl	10ad8 <sys_mutex_unlock>
		mqtt_mutex_unlock(client);

		client->evt_cb(client, evt);
   1edb6:	4620      	mov	r0, r4
   1edb8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1edba:	9901      	ldr	r1, [sp, #4]
   1edbc:	4798      	blx	r3

		mqtt_mutex_lock(client);
   1edbe:	4620      	mov	r0, r4
	}
}
   1edc0:	b002      	add	sp, #8
   1edc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mqtt_mutex_lock(client);
   1edc6:	f7ff bfe9 	b.w	1ed9c <mqtt_mutex_lock>
}
   1edca:	b002      	add	sp, #8
   1edcc:	bd10      	pop	{r4, pc}

0001edce <client_disconnect.constprop.0>:

static void client_disconnect(struct mqtt_client *client, int result,
   1edce:	b530      	push	{r4, r5, lr}
   1edd0:	b089      	sub	sp, #36	; 0x24
   1edd2:	4604      	mov	r4, r0
   1edd4:	460d      	mov	r5, r1
			      bool notify)
{
	int err_code;

	err_code = mqtt_transport_disconnect(client);
   1edd6:	f7ff ffc3 	bl	1ed60 <mqtt_transport_disconnect>
	if (err_code < 0) {
		MQTT_ERR("Failed to disconnect transport!");
	}

	if (notify) {
		struct mqtt_evt evt = {
   1edda:	221c      	movs	r2, #28
   1eddc:	2100      	movs	r1, #0
   1edde:	4668      	mov	r0, sp
   1ede0:	f7ff fc62 	bl	1e6a8 <memset>
   1ede4:	2301      	movs	r3, #1
			.type = MQTT_EVT_DISCONNECT,
			.result = result,
		};

		/* Notify application. */
		event_notify(client, &evt);
   1ede6:	4669      	mov	r1, sp
   1ede8:	4620      	mov	r0, r4
		struct mqtt_evt evt = {
   1edea:	f88d 3000 	strb.w	r3, [sp]
   1edee:	9507      	str	r5, [sp, #28]
		event_notify(client, &evt);
   1edf0:	f7ff ffda 	bl	1eda8 <event_notify>
	MQTT_STATE_INIT(client);
   1edf4:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   1edf6:	e9c4 3305 	strd	r3, r3, [r4, #20]
	client->internal.remaining_payload = 0U;
   1edfa:	e9c4 3307 	strd	r3, r3, [r4, #28]
	}

	/* Reset internal state. */
	client_reset(client);
}
   1edfe:	b009      	add	sp, #36	; 0x24
   1ee00:	bd30      	pop	{r4, r5, pc}

0001ee02 <read_publish_payload>:
	return err_code;
}

static int read_publish_payload(struct mqtt_client *client, void *buffer,
				size_t length, bool shall_block)
{
   1ee02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ee04:	4617      	mov	r7, r2
   1ee06:	461e      	mov	r6, r3
	int ret;

	NULL_PARAM_CHECK(client);
   1ee08:	4605      	mov	r5, r0
{
   1ee0a:	9101      	str	r1, [sp, #4]
	NULL_PARAM_CHECK(client);
   1ee0c:	b320      	cbz	r0, 1ee58 <read_publish_payload+0x56>

	mqtt_mutex_lock(client);
   1ee0e:	f7ff ffc5 	bl	1ed9c <mqtt_mutex_lock>

	if (client->internal.remaining_payload == 0U) {
   1ee12:	6a2c      	ldr	r4, [r5, #32]
   1ee14:	b1b4      	cbz	r4, 1ee44 <read_publish_payload+0x42>

	if (client->internal.remaining_payload < length) {
		length = client->internal.remaining_payload;
	}

	ret = mqtt_transport_read(client, buffer, length, shall_block);
   1ee16:	42bc      	cmp	r4, r7
   1ee18:	4622      	mov	r2, r4
   1ee1a:	4633      	mov	r3, r6
   1ee1c:	bf28      	it	cs
   1ee1e:	463a      	movcs	r2, r7
   1ee20:	4628      	mov	r0, r5
   1ee22:	9901      	ldr	r1, [sp, #4]
   1ee24:	f7f1 fe4a 	bl	10abc <mqtt_transport_read>
   1ee28:	4604      	mov	r4, r0
	if (!shall_block && ret == -EAGAIN) {
   1ee2a:	b916      	cbnz	r6, 1ee32 <read_publish_payload+0x30>
   1ee2c:	f110 0f0b 	cmn.w	r0, #11
   1ee30:	d008      	beq.n	1ee44 <read_publish_payload+0x42>
		goto exit;
	}

	if (ret <= 0) {
   1ee32:	2c00      	cmp	r4, #0
   1ee34:	dc0c      	bgt.n	1ee50 <read_publish_payload+0x4e>
		if (ret == 0) {
			ret = -ENOTCONN;
   1ee36:	bf08      	it	eq
   1ee38:	f06f 0438 	mvneq.w	r4, #56	; 0x38
		}

		client_disconnect(client, ret, true);
   1ee3c:	4628      	mov	r0, r5
   1ee3e:	4621      	mov	r1, r4
   1ee40:	f7ff ffc5 	bl	1edce <client_disconnect.constprop.0>
   1ee44:	4628      	mov	r0, r5
   1ee46:	f7f1 fe47 	bl	10ad8 <sys_mutex_unlock>

exit:
	mqtt_mutex_unlock(client);

	return ret;
}
   1ee4a:	4620      	mov	r0, r4
   1ee4c:	b003      	add	sp, #12
   1ee4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	client->internal.remaining_payload -= ret;
   1ee50:	6a2b      	ldr	r3, [r5, #32]
   1ee52:	1b1b      	subs	r3, r3, r4
   1ee54:	622b      	str	r3, [r5, #32]
   1ee56:	e7f5      	b.n	1ee44 <read_publish_payload+0x42>
	NULL_PARAM_CHECK(client);
   1ee58:	f06f 0415 	mvn.w	r4, #21
   1ee5c:	e7f5      	b.n	1ee4a <read_publish_payload+0x48>

0001ee5e <client_write>:
{
   1ee5e:	b538      	push	{r3, r4, r5, lr}
   1ee60:	4605      	mov	r5, r0
	err_code = mqtt_transport_write(client, data, datalen);
   1ee62:	f7f1 fe11 	bl	10a88 <mqtt_transport_write>
	if (err_code < 0) {
   1ee66:	1e04      	subs	r4, r0, #0
   1ee68:	da05      	bge.n	1ee76 <client_write+0x18>
		client_disconnect(client, err_code, true);
   1ee6a:	4621      	mov	r1, r4
   1ee6c:	4628      	mov	r0, r5
   1ee6e:	f7ff ffae 	bl	1edce <client_disconnect.constprop.0>
}
   1ee72:	4620      	mov	r0, r4
   1ee74:	bd38      	pop	{r3, r4, r5, pc}
	return (uint32_t)k_uptime_get();
   1ee76:	f7ff ff83 	bl	1ed80 <k_uptime_get>
	return 0;
   1ee7a:	2400      	movs	r4, #0
   1ee7c:	6168      	str	r0, [r5, #20]
   1ee7e:	e7f8      	b.n	1ee72 <client_write+0x14>

0001ee80 <mqtt_client_init>:
{
   1ee80:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK_VOID(client);
   1ee82:	4604      	mov	r4, r0
   1ee84:	b1a8      	cbz	r0, 1eeb2 <mqtt_client_init+0x32>
	MQTT_STATE_INIT(client);
   1ee86:	2500      	movs	r5, #0
	memset(client, 0, sizeof(*client));
   1ee88:	2264      	movs	r2, #100	; 0x64
   1ee8a:	2100      	movs	r1, #0
   1ee8c:	f7ff fc0c 	bl	1e6a8 <memset>
	MQTT_STATE_INIT(client);
   1ee90:	61a5      	str	r5, [r4, #24]
	return z_impl_k_mutex_init(mutex);
   1ee92:	4620      	mov	r0, r4
   1ee94:	f001 f8b4 	bl	20000 <z_impl_k_mutex_init>
	client->protocol_version = MQTT_VERSION_3_1_1;
   1ee98:	2304      	movs	r3, #4
   1ee9a:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	client->clean_session = MQTT_CLEAN_SESSION;
   1ee9e:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   1eea2:	f365 0341 	bfi	r3, r5, #1, #1
   1eea6:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	client->keepalive = MQTT_KEEPALIVE;
   1eeaa:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
   1eeae:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
}
   1eeb2:	bd38      	pop	{r3, r4, r5, pc}

0001eeb4 <mqtt_connect>:
{
   1eeb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   1eeb6:	4605      	mov	r5, r0
   1eeb8:	2800      	cmp	r0, #0
   1eeba:	d03a      	beq.n	1ef32 <mqtt_connect+0x7e>
	NULL_PARAM_CHECK(client->client_id.utf8);
   1eebc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1eebe:	b3c3      	cbz	r3, 1ef32 <mqtt_connect+0x7e>
	mqtt_mutex_lock(client);
   1eec0:	f7ff ff6c 	bl	1ed9c <mqtt_mutex_lock>
	if ((client->tx_buf == NULL) || (client->rx_buf == NULL)) {
   1eec4:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   1eec6:	b38b      	cbz	r3, 1ef2c <mqtt_connect+0x78>
   1eec8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   1eeca:	b37b      	cbz	r3, 1ef2c <mqtt_connect+0x78>
	err_code = mqtt_transport_connect(client);
   1eecc:	4628      	mov	r0, r5
   1eece:	f7f1 fdd1 	bl	10a74 <mqtt_transport_connect>
	if (err_code < 0) {
   1eed2:	1e04      	subs	r4, r0, #0
   1eed4:	db24      	blt.n	1ef20 <mqtt_connect+0x6c>
	tx_buf_init(client, &packet);
   1eed6:	4669      	mov	r1, sp
   1eed8:	4628      	mov	r0, r5
   1eeda:	f7ff ff43 	bl	1ed64 <tx_buf_init>
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   1eede:	69ab      	ldr	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   1eee0:	4669      	mov	r1, sp
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   1eee2:	f043 0302 	orr.w	r3, r3, #2
	err_code = connect_request_encode(client, &packet);
   1eee6:	4628      	mov	r0, r5
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   1eee8:	61ab      	str	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   1eeea:	f7f1 fd17 	bl	1091c <connect_request_encode>
	if (err_code < 0) {
   1eeee:	1e04      	subs	r4, r0, #0
   1eef0:	db13      	blt.n	1ef1a <mqtt_connect+0x66>
	err_code = mqtt_transport_write(client, packet.cur,
   1eef2:	e9dd 1200 	ldrd	r1, r2, [sp]
   1eef6:	4628      	mov	r0, r5
   1eef8:	1a52      	subs	r2, r2, r1
   1eefa:	f7f1 fdc5 	bl	10a88 <mqtt_transport_write>
	if (err_code < 0) {
   1eefe:	1e04      	subs	r4, r0, #0
   1ef00:	db0b      	blt.n	1ef1a <mqtt_connect+0x66>
   1ef02:	f7ff ff3d 	bl	1ed80 <k_uptime_get>
	client->unacked_ping = 0;
   1ef06:	2400      	movs	r4, #0
   1ef08:	6168      	str	r0, [r5, #20]
   1ef0a:	f885 405f 	strb.w	r4, [r5, #95]	; 0x5f
   1ef0e:	4628      	mov	r0, r5
   1ef10:	f7f1 fde2 	bl	10ad8 <sys_mutex_unlock>
}
   1ef14:	4620      	mov	r0, r4
   1ef16:	b003      	add	sp, #12
   1ef18:	bd30      	pop	{r4, r5, pc}
	err_code = mqtt_transport_disconnect(client);
   1ef1a:	4628      	mov	r0, r5
   1ef1c:	f7ff ff20 	bl	1ed60 <mqtt_transport_disconnect>
	MQTT_STATE_INIT(client);
   1ef20:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   1ef22:	e9c5 3305 	strd	r3, r3, [r5, #20]
	client->internal.remaining_payload = 0U;
   1ef26:	e9c5 3307 	strd	r3, r3, [r5, #28]
}
   1ef2a:	e7f0      	b.n	1ef0e <mqtt_connect+0x5a>
		err_code = -ENOMEM;
   1ef2c:	f06f 040b 	mvn.w	r4, #11
   1ef30:	e7f6      	b.n	1ef20 <mqtt_connect+0x6c>
	NULL_PARAM_CHECK(client);
   1ef32:	f06f 0415 	mvn.w	r4, #21
   1ef36:	e7ed      	b.n	1ef14 <mqtt_connect+0x60>

0001ef38 <mqtt_publish>:
{
   1ef38:	b570      	push	{r4, r5, r6, lr}
   1ef3a:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   1ef3c:	4605      	mov	r5, r0
{
   1ef3e:	b08e      	sub	sp, #56	; 0x38
	NULL_PARAM_CHECK(client);
   1ef40:	2800      	cmp	r0, #0
   1ef42:	d03b      	beq.n	1efbc <mqtt_publish+0x84>
	NULL_PARAM_CHECK(param);
   1ef44:	2900      	cmp	r1, #0
   1ef46:	d039      	beq.n	1efbc <mqtt_publish+0x84>
	mqtt_mutex_lock(client);
   1ef48:	f7ff ff28 	bl	1ed9c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   1ef4c:	4628      	mov	r0, r5
   1ef4e:	a901      	add	r1, sp, #4
   1ef50:	f7ff ff08 	bl	1ed64 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   1ef54:	69ab      	ldr	r3, [r5, #24]
   1ef56:	075b      	lsls	r3, r3, #29
   1ef58:	d52d      	bpl.n	1efb6 <mqtt_publish+0x7e>
	err_code = publish_encode(param, &packet);
   1ef5a:	4630      	mov	r0, r6
   1ef5c:	a901      	add	r1, sp, #4
   1ef5e:	f7ff fd53 	bl	1ea08 <publish_encode>
	if (err_code < 0) {
   1ef62:	1e04      	subs	r4, r0, #0
   1ef64:	db1c      	blt.n	1efa0 <mqtt_publish+0x68>
	io_vector[0].iov_base = packet.cur;
   1ef66:	9a01      	ldr	r2, [sp, #4]
	io_vector[0].iov_len = packet.end - packet.cur;
   1ef68:	9b02      	ldr	r3, [sp, #8]
	io_vector[0].iov_base = packet.cur;
   1ef6a:	9203      	str	r2, [sp, #12]
	io_vector[0].iov_len = packet.end - packet.cur;
   1ef6c:	1a9b      	subs	r3, r3, r2
	memset(&msg, 0, sizeof(msg));
   1ef6e:	221c      	movs	r2, #28
	io_vector[0].iov_len = packet.end - packet.cur;
   1ef70:	9304      	str	r3, [sp, #16]
	io_vector[1].iov_base = param->message.payload.data;
   1ef72:	68f3      	ldr	r3, [r6, #12]
	memset(&msg, 0, sizeof(msg));
   1ef74:	2100      	movs	r1, #0
	io_vector[1].iov_base = param->message.payload.data;
   1ef76:	9305      	str	r3, [sp, #20]
	io_vector[1].iov_len = param->message.payload.len;
   1ef78:	6933      	ldr	r3, [r6, #16]
	memset(&msg, 0, sizeof(msg));
   1ef7a:	eb0d 0002 	add.w	r0, sp, r2
	io_vector[1].iov_len = param->message.payload.len;
   1ef7e:	9306      	str	r3, [sp, #24]
	memset(&msg, 0, sizeof(msg));
   1ef80:	f7ff fb92 	bl	1e6a8 <memset>
	msg.msg_iov = io_vector;
   1ef84:	ab03      	add	r3, sp, #12
   1ef86:	9309      	str	r3, [sp, #36]	; 0x24
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   1ef88:	2302      	movs	r3, #2
	err_code = mqtt_transport_write_msg(client, message);
   1ef8a:	4628      	mov	r0, r5
   1ef8c:	a907      	add	r1, sp, #28
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   1ef8e:	930a      	str	r3, [sp, #40]	; 0x28
	err_code = mqtt_transport_write_msg(client, message);
   1ef90:	f7f1 fd86 	bl	10aa0 <mqtt_transport_write_msg>
	if (err_code < 0) {
   1ef94:	1e04      	subs	r4, r0, #0
   1ef96:	da09      	bge.n	1efac <mqtt_publish+0x74>
		client_disconnect(client, err_code, true);
   1ef98:	4621      	mov	r1, r4
   1ef9a:	4628      	mov	r0, r5
   1ef9c:	f7ff ff17 	bl	1edce <client_disconnect.constprop.0>
   1efa0:	4628      	mov	r0, r5
   1efa2:	f7f1 fd99 	bl	10ad8 <sys_mutex_unlock>
}
   1efa6:	4620      	mov	r0, r4
   1efa8:	b00e      	add	sp, #56	; 0x38
   1efaa:	bd70      	pop	{r4, r5, r6, pc}
   1efac:	f7ff fee8 	bl	1ed80 <k_uptime_get>
	return 0;
   1efb0:	2400      	movs	r4, #0
   1efb2:	6168      	str	r0, [r5, #20]
   1efb4:	e7f4      	b.n	1efa0 <mqtt_publish+0x68>
		return -ENOTCONN;
   1efb6:	f06f 0438 	mvn.w	r4, #56	; 0x38
   1efba:	e7f1      	b.n	1efa0 <mqtt_publish+0x68>
	NULL_PARAM_CHECK(client);
   1efbc:	f06f 0415 	mvn.w	r4, #21
   1efc0:	e7f1      	b.n	1efa6 <mqtt_publish+0x6e>

0001efc2 <mqtt_disconnect>:
{
   1efc2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   1efc4:	4605      	mov	r5, r0
   1efc6:	b310      	cbz	r0, 1f00e <mqtt_disconnect+0x4c>
	mqtt_mutex_lock(client);
   1efc8:	f7ff fee8 	bl	1ed9c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   1efcc:	4669      	mov	r1, sp
   1efce:	4628      	mov	r0, r5
   1efd0:	f7ff fec8 	bl	1ed64 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   1efd4:	69ab      	ldr	r3, [r5, #24]
   1efd6:	075b      	lsls	r3, r3, #29
   1efd8:	d516      	bpl.n	1f008 <mqtt_disconnect+0x46>
	err_code = disconnect_encode(&packet);
   1efda:	4668      	mov	r0, sp
   1efdc:	f7f1 fd1e 	bl	10a1c <disconnect_encode>
	if (err_code < 0) {
   1efe0:	1e04      	subs	r4, r0, #0
   1efe2:	db0b      	blt.n	1effc <mqtt_disconnect+0x3a>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   1efe4:	e9dd 1200 	ldrd	r1, r2, [sp]
   1efe8:	4628      	mov	r0, r5
   1efea:	1a52      	subs	r2, r2, r1
   1efec:	f7ff ff37 	bl	1ee5e <client_write>
	if (err_code < 0) {
   1eff0:	1e04      	subs	r4, r0, #0
   1eff2:	db03      	blt.n	1effc <mqtt_disconnect+0x3a>
	client_disconnect(client, 0, true);
   1eff4:	2100      	movs	r1, #0
   1eff6:	4628      	mov	r0, r5
   1eff8:	f7ff fee9 	bl	1edce <client_disconnect.constprop.0>
   1effc:	4628      	mov	r0, r5
   1effe:	f7f1 fd6b 	bl	10ad8 <sys_mutex_unlock>
}
   1f002:	4620      	mov	r0, r4
   1f004:	b003      	add	sp, #12
   1f006:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   1f008:	f06f 0438 	mvn.w	r4, #56	; 0x38
   1f00c:	e7f6      	b.n	1effc <mqtt_disconnect+0x3a>
	NULL_PARAM_CHECK(client);
   1f00e:	f06f 0415 	mvn.w	r4, #21
   1f012:	e7f6      	b.n	1f002 <mqtt_disconnect+0x40>

0001f014 <mqtt_ping>:
{
   1f014:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   1f016:	4605      	mov	r5, r0
   1f018:	b320      	cbz	r0, 1f064 <mqtt_ping+0x50>
	mqtt_mutex_lock(client);
   1f01a:	f7ff febf 	bl	1ed9c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   1f01e:	4669      	mov	r1, sp
   1f020:	4628      	mov	r0, r5
   1f022:	f7ff fe9f 	bl	1ed64 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   1f026:	69ab      	ldr	r3, [r5, #24]
   1f028:	075b      	lsls	r3, r3, #29
   1f02a:	d518      	bpl.n	1f05e <mqtt_ping+0x4a>
	err_code = ping_request_encode(&packet);
   1f02c:	4668      	mov	r0, sp
   1f02e:	f7f1 fd0b 	bl	10a48 <ping_request_encode>
	if (err_code < 0) {
   1f032:	1e04      	subs	r4, r0, #0
   1f034:	db0d      	blt.n	1f052 <mqtt_ping+0x3e>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   1f036:	e9dd 1200 	ldrd	r1, r2, [sp]
   1f03a:	4628      	mov	r0, r5
   1f03c:	1a52      	subs	r2, r2, r1
   1f03e:	f7ff ff0e 	bl	1ee5e <client_write>
	if (client->unacked_ping >= INT8_MAX) {
   1f042:	f995 305f 	ldrsb.w	r3, [r5, #95]	; 0x5f
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   1f046:	4604      	mov	r4, r0
	if (client->unacked_ping >= INT8_MAX) {
   1f048:	2b7f      	cmp	r3, #127	; 0x7f
   1f04a:	d002      	beq.n	1f052 <mqtt_ping+0x3e>
		client->unacked_ping++;
   1f04c:	3301      	adds	r3, #1
   1f04e:	f885 305f 	strb.w	r3, [r5, #95]	; 0x5f
   1f052:	4628      	mov	r0, r5
   1f054:	f7f1 fd40 	bl	10ad8 <sys_mutex_unlock>
}
   1f058:	4620      	mov	r0, r4
   1f05a:	b003      	add	sp, #12
   1f05c:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   1f05e:	f06f 0438 	mvn.w	r4, #56	; 0x38
   1f062:	e7f6      	b.n	1f052 <mqtt_ping+0x3e>
	NULL_PARAM_CHECK(client);
   1f064:	f06f 0415 	mvn.w	r4, #21
   1f068:	e7f6      	b.n	1f058 <mqtt_ping+0x44>

0001f06a <mqtt_live>:
{
   1f06a:	b570      	push	{r4, r5, r6, lr}
	NULL_PARAM_CHECK(client);
   1f06c:	4606      	mov	r6, r0
   1f06e:	b300      	cbz	r0, 1f0b2 <mqtt_live+0x48>
	mqtt_mutex_lock(client);
   1f070:	f7ff fe94 	bl	1ed9c <mqtt_mutex_lock>
	elapsed_time = mqtt_elapsed_time_in_ms_get(
   1f074:	6974      	ldr	r4, [r6, #20]
   1f076:	f7ff fe83 	bl	1ed80 <k_uptime_get>
 *
 * @retval Time elapsed since last_activity time.
 */
static inline uint32_t mqtt_elapsed_time_in_ms_get(uint32_t last_activity)
{
	int32_t diff = k_uptime_get_32() - last_activity;
   1f07a:	1b00      	subs	r0, r0, r4
	if ((client->keepalive > 0) &&
   1f07c:	f8b6 405c 	ldrh.w	r4, [r6, #92]	; 0x5c

	if (diff < 0) {
		return 0;
   1f080:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1f084:	b19c      	cbz	r4, 1f0ae <mqtt_live+0x44>
	    (elapsed_time >= (client->keepalive * 1000))) {
   1f086:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1f08a:	435c      	muls	r4, r3
	if ((client->keepalive > 0) &&
   1f08c:	4284      	cmp	r4, r0
   1f08e:	d80d      	bhi.n	1f0ac <mqtt_live+0x42>
		err_code = mqtt_ping(client);
   1f090:	4630      	mov	r0, r6
   1f092:	f7ff ffbf 	bl	1f014 <mqtt_ping>
		ping_sent = true;
   1f096:	2401      	movs	r4, #1
		err_code = mqtt_ping(client);
   1f098:	4605      	mov	r5, r0
	int ret = sys_mutex_unlock(&client->internal.mutex);
   1f09a:	4630      	mov	r0, r6
   1f09c:	f7f1 fd1c 	bl	10ad8 <sys_mutex_unlock>
		return -EAGAIN;
   1f0a0:	2c00      	cmp	r4, #0
   1f0a2:	bf08      	it	eq
   1f0a4:	f06f 050a 	mvneq.w	r5, #10
}
   1f0a8:	4628      	mov	r0, r5
   1f0aa:	bd70      	pop	{r4, r5, r6, pc}
	bool ping_sent = false;
   1f0ac:	2400      	movs	r4, #0
	int err_code = 0;
   1f0ae:	4625      	mov	r5, r4
   1f0b0:	e7f3      	b.n	1f09a <mqtt_live+0x30>
	NULL_PARAM_CHECK(client);
   1f0b2:	f06f 0515 	mvn.w	r5, #21
   1f0b6:	e7f7      	b.n	1f0a8 <mqtt_live+0x3e>

0001f0b8 <mqtt_keepalive_time_left>:
{
   1f0b8:	b538      	push	{r3, r4, r5, lr}
   1f0ba:	4604      	mov	r4, r0
	uint32_t elapsed_time = mqtt_elapsed_time_in_ms_get(
   1f0bc:	6945      	ldr	r5, [r0, #20]
   1f0be:	f7ff fe5f 	bl	1ed80 <k_uptime_get>
	uint32_t keepalive_ms = 1000U * client->keepalive;
   1f0c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1f0c6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
	int32_t diff = k_uptime_get_32() - last_activity;
   1f0ca:	1b42      	subs	r2, r0, r5
   1f0cc:	434b      	muls	r3, r1
		return 0;
   1f0ce:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	if (client->keepalive == 0) {
   1f0d2:	b119      	cbz	r1, 1f0dc <mqtt_keepalive_time_left+0x24>
	if (keepalive_ms <= elapsed_time) {
   1f0d4:	4293      	cmp	r3, r2
   1f0d6:	d904      	bls.n	1f0e2 <mqtt_keepalive_time_left+0x2a>
	return keepalive_ms - elapsed_time;
   1f0d8:	1a98      	subs	r0, r3, r2
}
   1f0da:	bd38      	pop	{r3, r4, r5, pc}
		return UINT32_MAX;
   1f0dc:	f04f 30ff 	mov.w	r0, #4294967295
   1f0e0:	e7fb      	b.n	1f0da <mqtt_keepalive_time_left+0x22>
		return 0;
   1f0e2:	2000      	movs	r0, #0
   1f0e4:	e7f9      	b.n	1f0da <mqtt_keepalive_time_left+0x22>

0001f0e6 <mqtt_input>:
{
   1f0e6:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   1f0e8:	4605      	mov	r5, r0
   1f0ea:	b1d0      	cbz	r0, 1f122 <mqtt_input+0x3c>
	mqtt_mutex_lock(client);
   1f0ec:	f7ff fe56 	bl	1ed9c <mqtt_mutex_lock>
	if (MQTT_HAS_STATE(client, MQTT_STATE_TCP_CONNECTED)) {
   1f0f0:	69ab      	ldr	r3, [r5, #24]
   1f0f2:	079b      	lsls	r3, r3, #30
   1f0f4:	d50f      	bpl.n	1f116 <mqtt_input+0x30>
	if (client->internal.remaining_payload > 0) {
   1f0f6:	6a2b      	ldr	r3, [r5, #32]
   1f0f8:	b983      	cbnz	r3, 1f11c <mqtt_input+0x36>
	err_code = mqtt_handle_rx(client);
   1f0fa:	4628      	mov	r0, r5
   1f0fc:	f7ff fcf0 	bl	1eae0 <mqtt_handle_rx>
	if (err_code < 0) {
   1f100:	1e04      	subs	r4, r0, #0
   1f102:	da03      	bge.n	1f10c <mqtt_input+0x26>
		client_disconnect(client, err_code, true);
   1f104:	4621      	mov	r1, r4
   1f106:	4628      	mov	r0, r5
   1f108:	f7ff fe61 	bl	1edce <client_disconnect.constprop.0>
	int ret = sys_mutex_unlock(&client->internal.mutex);
   1f10c:	4628      	mov	r0, r5
   1f10e:	f7f1 fce3 	bl	10ad8 <sys_mutex_unlock>
}
   1f112:	4620      	mov	r0, r4
   1f114:	bd38      	pop	{r3, r4, r5, pc}
		err_code = -EACCES;
   1f116:	f06f 040c 	mvn.w	r4, #12
   1f11a:	e7f7      	b.n	1f10c <mqtt_input+0x26>
		return -EBUSY;
   1f11c:	f06f 040f 	mvn.w	r4, #15
   1f120:	e7f4      	b.n	1f10c <mqtt_input+0x26>
	NULL_PARAM_CHECK(client);
   1f122:	f06f 0415 	mvn.w	r4, #21
   1f126:	e7f4      	b.n	1f112 <mqtt_input+0x2c>

0001f128 <mqtt_read_publish_payload>:

int mqtt_read_publish_payload(struct mqtt_client *client, void *buffer,
			      size_t length)
{
	return read_publish_payload(client, buffer, length, false);
   1f128:	2300      	movs	r3, #0
   1f12a:	f7ff be6a 	b.w	1ee02 <read_publish_payload>

0001f12e <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f12e:	6843      	ldr	r3, [r0, #4]
}
   1f130:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f132:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1f134:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   1f136:	600b      	str	r3, [r1, #0]
}
   1f138:	4770      	bx	lr

0001f13a <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f13a:	6843      	ldr	r3, [r0, #4]
   1f13c:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1f13e:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1f140:	4042      	eors	r2, r0
   1f142:	400a      	ands	r2, r1
   1f144:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1f146:	605a      	str	r2, [r3, #4]
}
   1f148:	2000      	movs	r0, #0
   1f14a:	4770      	bx	lr

0001f14c <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f14c:	6843      	ldr	r3, [r0, #4]
}
   1f14e:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f150:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   1f152:	6099      	str	r1, [r3, #8]
}
   1f154:	4770      	bx	lr

0001f156 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f156:	6843      	ldr	r3, [r0, #4]
}
   1f158:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f15a:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   1f15c:	60d9      	str	r1, [r3, #12]
}
   1f15e:	4770      	bx	lr

0001f160 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f160:	6843      	ldr	r3, [r0, #4]
}
   1f162:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f164:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1f166:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   1f168:	4059      	eors	r1, r3
    p_reg->OUT = value;
   1f16a:	6051      	str	r1, [r2, #4]
}
   1f16c:	4770      	bx	lr

0001f16e <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1f16e:	68c3      	ldr	r3, [r0, #12]
{
   1f170:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   1f172:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   1f174:	b158      	cbz	r0, 1f18e <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f176:	2400      	movs	r4, #0
   1f178:	4281      	cmp	r1, r0
   1f17a:	d113      	bne.n	1f1a4 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   1f17c:	6808      	ldr	r0, [r1, #0]
   1f17e:	b95c      	cbnz	r4, 1f198 <gpio_nrfx_manage_callback+0x2a>
   1f180:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   1f182:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1f184:	42a1      	cmp	r1, r4
   1f186:	d100      	bne.n	1f18a <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   1f188:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1f18a:	2000      	movs	r0, #0
   1f18c:	6008      	str	r0, [r1, #0]
	if (set) {
   1f18e:	b972      	cbnz	r2, 1f1ae <gpio_nrfx_manage_callback+0x40>
	return 0;
   1f190:	2000      	movs	r0, #0
}
   1f192:	bd30      	pop	{r4, r5, pc}
   1f194:	4628      	mov	r0, r5
   1f196:	e7ef      	b.n	1f178 <gpio_nrfx_manage_callback+0xa>
   1f198:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f19a:	6898      	ldr	r0, [r3, #8]
   1f19c:	4281      	cmp	r1, r0
	list->tail = node;
   1f19e:	bf08      	it	eq
   1f1a0:	609c      	streq	r4, [r3, #8]
}
   1f1a2:	e7f2      	b.n	1f18a <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f1a4:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f1a6:	4604      	mov	r4, r0
   1f1a8:	2d00      	cmp	r5, #0
   1f1aa:	d1f3      	bne.n	1f194 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   1f1ac:	b13a      	cbz	r2, 1f1be <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   1f1ae:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1f1b0:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1f1b2:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   1f1b4:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1f1b6:	2800      	cmp	r0, #0
   1f1b8:	d1ea      	bne.n	1f190 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   1f1ba:	6099      	str	r1, [r3, #8]
}
   1f1bc:	e7e9      	b.n	1f192 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   1f1be:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1f1c2:	e7e6      	b.n	1f192 <gpio_nrfx_manage_callback+0x24>

0001f1c4 <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   1f1c4:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   1f1c6:	6843      	ldr	r3, [r0, #4]
	if (data->int_driven->disable_tx_irq &&
   1f1c8:	68d2      	ldr	r2, [r2, #12]
	return config->uarte_regs;
   1f1ca:	681b      	ldr	r3, [r3, #0]
	if (data->int_driven->disable_tx_irq &&
   1f1cc:	7b91      	ldrb	r1, [r2, #14]
   1f1ce:	b159      	cbz	r1, 1f1e8 <uarte_nrfx_isr_int+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f1d0:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   1f1d4:	b141      	cbz	r1, 1f1e8 <uarte_nrfx_isr_int+0x24>
    p_reg->INTENCLR = mask;
   1f1d6:	f44f 7180 	mov.w	r1, #256	; 0x100
   1f1da:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f1de:	2101      	movs	r1, #1
   1f1e0:	60d9      	str	r1, [r3, #12]
		data->int_driven->disable_tx_irq = false;
   1f1e2:	2300      	movs	r3, #0
   1f1e4:	7393      	strb	r3, [r2, #14]
		return;
   1f1e6:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f1e8:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1f1ec:	b121      	cbz	r1, 1f1f8 <uarte_nrfx_isr_int+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f1ee:	2100      	movs	r1, #0
   1f1f0:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   1f1f4:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   1f1f8:	6813      	ldr	r3, [r2, #0]
   1f1fa:	b10b      	cbz	r3, 1f200 <uarte_nrfx_isr_int+0x3c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   1f1fc:	6851      	ldr	r1, [r2, #4]
   1f1fe:	4718      	bx	r3
}
   1f200:	4770      	bx	lr

0001f202 <uarte_nrfx_config_get>:
{
   1f202:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1f204:	68c2      	ldr	r2, [r0, #12]
   1f206:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1f20a:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1f20e:	2000      	movs	r0, #0
   1f210:	4770      	bx	lr

0001f212 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1f212:	6843      	ldr	r3, [r0, #4]
   1f214:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1f216:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1f21a:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1f21e:	4770      	bx	lr

0001f220 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1f220:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1f222:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   1f224:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f226:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1f22a:	b148      	cbz	r0, 1f240 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f22c:	2000      	movs	r0, #0
	*c = data->rx_data;
   1f22e:	7d12      	ldrb	r2, [r2, #20]
   1f230:	700a      	strb	r2, [r1, #0]
   1f232:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1f236:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f23a:	2201      	movs	r2, #1
   1f23c:	601a      	str	r2, [r3, #0]
	return 0;
   1f23e:	4770      	bx	lr
		return -1;
   1f240:	f04f 30ff 	mov.w	r0, #4294967295
}
   1f244:	4770      	bx	lr

0001f246 <uarte_nrfx_fifo_fill>:
	return config->uarte_regs;
   1f246:	6843      	ldr	r3, [r0, #4]
{
   1f248:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   1f24a:	681c      	ldr	r4, [r3, #0]
{
   1f24c:	4605      	mov	r5, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f24e:	f8d4 0120 	ldr.w	r0, [r4, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1f252:	b1a0      	cbz	r0, 1f27e <uarte_nrfx_fifo_fill+0x38>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1f254:	68ed      	ldr	r5, [r5, #12]
	if (len > data->int_driven->tx_buff_size) {
   1f256:	68eb      	ldr	r3, [r5, #12]
   1f258:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f25a:	2300      	movs	r3, #0
   1f25c:	4290      	cmp	r0, r2
   1f25e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   1f262:	bfa8      	it	ge
   1f264:	4610      	movge	r0, r2
   1f266:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
	for (int i = 0; i < len; i++) {
   1f26a:	68ea      	ldr	r2, [r5, #12]
   1f26c:	4283      	cmp	r3, r0
   1f26e:	6892      	ldr	r2, [r2, #8]
   1f270:	db06      	blt.n	1f280 <uarte_nrfx_fifo_fill+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f272:	2301      	movs	r3, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1f274:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1f278:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f27c:	60a3      	str	r3, [r4, #8]
}
   1f27e:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   1f280:	5cce      	ldrb	r6, [r1, r3]
   1f282:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
   1f284:	3301      	adds	r3, #1
   1f286:	e7f0      	b.n	1f26a <uarte_nrfx_fifo_fill+0x24>

0001f288 <uarte_nrfx_fifo_read>:
	return config->uarte_regs;
   1f288:	6843      	ldr	r3, [r0, #4]
   1f28a:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f28c:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1f290:	b153      	cbz	r3, 1f2a8 <uarte_nrfx_fifo_read+0x20>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1f292:	68c3      	ldr	r3, [r0, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f294:	2000      	movs	r0, #0
   1f296:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
   1f29a:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f29e:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   1f2a0:	7d1b      	ldrb	r3, [r3, #20]
   1f2a2:	700b      	strb	r3, [r1, #0]
   1f2a4:	6010      	str	r0, [r2, #0]
}
   1f2a6:	4770      	bx	lr
	int num_rx = 0;
   1f2a8:	4618      	mov	r0, r3
}
   1f2aa:	4770      	bx	lr

0001f2ac <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
   1f2ac:	2100      	movs	r1, #0
   1f2ae:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   1f2b0:	6843      	ldr	r3, [r0, #4]
	data->int_driven->disable_tx_irq = false;
   1f2b2:	68d2      	ldr	r2, [r2, #12]
	return config->uarte_regs;
   1f2b4:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   1f2b6:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   1f2b8:	f44f 7280 	mov.w	r2, #256	; 0x100
   1f2bc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1f2c0:	4770      	bx	lr

0001f2c2 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   1f2c2:	2201      	movs	r2, #1
   1f2c4:	68c3      	ldr	r3, [r0, #12]
   1f2c6:	68db      	ldr	r3, [r3, #12]
   1f2c8:	739a      	strb	r2, [r3, #14]
}
   1f2ca:	4770      	bx	lr

0001f2cc <uarte_nrfx_irq_tx_ready_complete>:
	return !data->int_driven->disable_tx_irq &&
   1f2cc:	68c3      	ldr	r3, [r0, #12]
   1f2ce:	68db      	ldr	r3, [r3, #12]
   1f2d0:	7b9b      	ldrb	r3, [r3, #14]
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   1f2d2:	b94b      	cbnz	r3, 1f2e8 <uarte_nrfx_irq_tx_ready_complete+0x1c>
	return config->uarte_regs;
   1f2d4:	6843      	ldr	r3, [r0, #4]
   1f2d6:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f2d8:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return !data->int_driven->disable_tx_irq &&
   1f2dc:	b128      	cbz	r0, 1f2ea <uarte_nrfx_irq_tx_ready_complete+0x1e>
    return p_reg->INTENSET & mask;
   1f2de:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   1f2e2:	f3c0 2000 	ubfx	r0, r0, #8, #1
   1f2e6:	4770      	bx	lr
   1f2e8:	2000      	movs	r0, #0
}
   1f2ea:	4770      	bx	lr

0001f2ec <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   1f2ec:	6843      	ldr	r3, [r0, #4]
   1f2ee:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f2f0:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   1f2f4:	3800      	subs	r0, #0
   1f2f6:	bf18      	it	ne
   1f2f8:	2001      	movne	r0, #1
   1f2fa:	4770      	bx	lr

0001f2fc <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   1f2fc:	2210      	movs	r2, #16
	return config->uarte_regs;
   1f2fe:	6843      	ldr	r3, [r0, #4]
   1f300:	681b      	ldr	r3, [r3, #0]
   1f302:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1f306:	4770      	bx	lr

0001f308 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   1f308:	2210      	movs	r2, #16
	return config->uarte_regs;
   1f30a:	6843      	ldr	r3, [r0, #4]
   1f30c:	681b      	ldr	r3, [r3, #0]
   1f30e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1f312:	4770      	bx	lr

0001f314 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   1f314:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   1f318:	6843      	ldr	r3, [r0, #4]
   1f31a:	681b      	ldr	r3, [r3, #0]
   1f31c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1f320:	4770      	bx	lr

0001f322 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   1f322:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   1f326:	6843      	ldr	r3, [r0, #4]
   1f328:	681b      	ldr	r3, [r3, #0]
   1f32a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1f32e:	4770      	bx	lr

0001f330 <uarte_nrfx_irq_update>:
}
   1f330:	2001      	movs	r0, #1
   1f332:	4770      	bx	lr

0001f334 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   1f334:	68c3      	ldr	r3, [r0, #12]
   1f336:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   1f338:	e9c3 1200 	strd	r1, r2, [r3]
}
   1f33c:	4770      	bx	lr

0001f33e <uarte_nrfx_irq_is_pending>:
{
   1f33e:	b508      	push	{r3, lr}
	return config->uarte_regs;
   1f340:	6843      	ldr	r3, [r0, #4]
{
   1f342:	4602      	mov	r2, r0
	return config->uarte_regs;
   1f344:	6819      	ldr	r1, [r3, #0]
    return p_reg->INTENSET & mask;
   1f346:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   1f34a:	05db      	lsls	r3, r3, #23
   1f34c:	d405      	bmi.n	1f35a <uarte_nrfx_irq_is_pending+0x1c>
   1f34e:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   1f352:	f010 0010 	ands.w	r0, r0, #16
   1f356:	d106      	bne.n	1f366 <uarte_nrfx_irq_is_pending+0x28>
}
   1f358:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   1f35a:	f7ff ffb7 	bl	1f2cc <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   1f35e:	2800      	cmp	r0, #0
   1f360:	d0f5      	beq.n	1f34e <uarte_nrfx_irq_is_pending+0x10>
		||
   1f362:	2001      	movs	r0, #1
   1f364:	e7f8      	b.n	1f358 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   1f366:	4610      	mov	r0, r2
   1f368:	f7ff ffc0 	bl	1f2ec <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   1f36c:	3800      	subs	r0, #0
   1f36e:	bf18      	it	ne
   1f370:	2001      	movne	r0, #1
   1f372:	e7f1      	b.n	1f358 <uarte_nrfx_irq_is_pending+0x1a>

0001f374 <uarte_nrfx_poll_out>:
{
   1f374:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   1f378:	6843      	ldr	r3, [r0, #4]
{
   1f37a:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   1f37e:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1f380:	68c6      	ldr	r6, [r0, #12]
	if (!k_is_in_isr()) {
   1f382:	f000 ffc5 	bl	20310 <k_is_in_isr>
   1f386:	bb98      	cbnz	r0, 1f3f0 <uarte_nrfx_poll_out+0x7c>
		lock = &data->poll_out_lock;
   1f388:	2564      	movs	r5, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1f38a:	f04f 0801 	mov.w	r8, #1
   1f38e:	f106 0710 	add.w	r7, r6, #16
   1f392:	e8d7 3fef 	ldaex	r3, [r7]
   1f396:	2b00      	cmp	r3, #0
   1f398:	d103      	bne.n	1f3a2 <uarte_nrfx_poll_out+0x2e>
   1f39a:	e8c7 8fe2 	stlex	r2, r8, [r7]
   1f39e:	2a00      	cmp	r2, #0
   1f3a0:	d1f7      	bne.n	1f392 <uarte_nrfx_poll_out+0x1e>
		while (atomic_cas((atomic_t *) lock,
   1f3a2:	d007      	beq.n	1f3b4 <uarte_nrfx_poll_out+0x40>
	return z_impl_k_sleep(timeout);
   1f3a4:	2021      	movs	r0, #33	; 0x21
   1f3a6:	2100      	movs	r1, #0
   1f3a8:	3d01      	subs	r5, #1
   1f3aa:	f7fd fb2f 	bl	1ca0c <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   1f3ae:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   1f3b2:	d1ee      	bne.n	1f392 <uarte_nrfx_poll_out+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f3b4:	2300      	movs	r3, #0
   1f3b6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   1f3ba:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1f3be:	f10d 0307 	add.w	r3, sp, #7
   1f3c2:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1f3c6:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f3c8:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    p_reg->TXD.MAXCNT = length;
   1f3cc:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f3d0:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f3d2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
   1f3d6:	b923      	cbnz	r3, 1f3e2 <uarte_nrfx_poll_out+0x6e>
   1f3d8:	2001      	movs	r0, #1
   1f3da:	f000 fd62 	bl	1fea2 <nrfx_busy_wait>
   1f3de:	3d01      	subs	r5, #1
   1f3e0:	d1f7      	bne.n	1f3d2 <uarte_nrfx_poll_out+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f3e2:	2301      	movs	r3, #1
   1f3e4:	60e3      	str	r3, [r4, #12]
	*lock = 0;
   1f3e6:	2300      	movs	r3, #0
   1f3e8:	6133      	str	r3, [r6, #16]
}
   1f3ea:	b002      	add	sp, #8
   1f3ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*lock = 1;
   1f3f0:	2301      	movs	r3, #1
   1f3f2:	6133      	str	r3, [r6, #16]
   1f3f4:	e7de      	b.n	1f3b4 <uarte_nrfx_poll_out+0x40>

0001f3f6 <entropy_cc310_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   1f3f6:	2000      	movs	r0, #0
   1f3f8:	4770      	bx	lr

0001f3fa <entropy_cc310_rng_get_entropy>:
{
   1f3fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f3fe:	460f      	mov	r7, r1
   1f400:	4614      	mov	r4, r2
	size_t offset = 0;
   1f402:	2600      	movs	r6, #0
	int res = -EINVAL;
   1f404:	f06f 0515 	mvn.w	r5, #21
{
   1f408:	b0a6      	sub	sp, #152	; 0x98
	while (length > 0) {
   1f40a:	b91c      	cbnz	r4, 1f414 <entropy_cc310_rng_get_entropy+0x1a>
}
   1f40c:	4628      	mov	r0, r5
   1f40e:	b026      	add	sp, #152	; 0x98
   1f410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		res = spm_request_random_number(spm_buf, sizeof(spm_buf),
   1f414:	2190      	movs	r1, #144	; 0x90
   1f416:	aa01      	add	r2, sp, #4
   1f418:	a802      	add	r0, sp, #8
   1f41a:	f7e8 fde9 	bl	7ff0 <spm_request_random_number>
		if (res < 0) {
   1f41e:	1e05      	subs	r5, r0, #0
   1f420:	dbf4      	blt.n	1f40c <entropy_cc310_rng_get_entropy+0x12>
		if (olen != sizeof(spm_buf)) {
   1f422:	9b01      	ldr	r3, [sp, #4]
   1f424:	2b90      	cmp	r3, #144	; 0x90
   1f426:	d10e      	bne.n	1f446 <entropy_cc310_rng_get_entropy+0x4c>
		to_copy = MIN(length, sizeof(spm_buf));
   1f428:	2c90      	cmp	r4, #144	; 0x90
   1f42a:	46a0      	mov	r8, r4
   1f42c:	bf28      	it	cs
   1f42e:	f04f 0890 	movcs.w	r8, #144	; 0x90
		memcpy(buffer + offset, spm_buf, to_copy);
   1f432:	19b8      	adds	r0, r7, r6
   1f434:	4642      	mov	r2, r8
   1f436:	a902      	add	r1, sp, #8
		length -= to_copy;
   1f438:	eba4 0408 	sub.w	r4, r4, r8
		memcpy(buffer + offset, spm_buf, to_copy);
   1f43c:	f7ff f909 	bl	1e652 <memcpy>
		length -= to_copy;
   1f440:	b2a4      	uxth	r4, r4
		offset += to_copy;
   1f442:	4446      	add	r6, r8
   1f444:	e7e1      	b.n	1f40a <entropy_cc310_rng_get_entropy+0x10>
			return -EINVAL;
   1f446:	f06f 0515 	mvn.w	r5, #21
   1f44a:	e7df      	b.n	1f40c <entropy_cc310_rng_get_entropy+0x12>

0001f44c <z_errno>:
   1f44c:	f7fc bc2c 	b.w	1bca8 <z_impl_z_errno>

0001f450 <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   1f450:	4668      	mov	r0, sp
   1f452:	f020 0107 	bic.w	r1, r0, #7
   1f456:	468d      	mov	sp, r1
   1f458:	b501      	push	{r0, lr}
	bsd_os_trace_irq_handler();
   1f45a:	f7f4 fcaf 	bl	13dbc <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   1f45e:	f7f0 fb9b 	bl	fb98 <_arch_isr_direct_pm>
   1f462:	f7f0 ff0d 	bl	10280 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   1f466:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1f46a:	4685      	mov	sp, r0
   1f46c:	4770      	bx	lr

0001f46e <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   1f46e:	4668      	mov	r0, sp
   1f470:	f020 0107 	bic.w	r1, r0, #7
   1f474:	468d      	mov	sp, r1
   1f476:	b501      	push	{r0, lr}
	IPC_IRQHandler();
   1f478:	f7f5 f846 	bl	14508 <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   1f47c:	f7f0 fb8c 	bl	fb98 <_arch_isr_direct_pm>
   1f480:	f7f0 fefe 	bl	10280 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   1f484:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1f488:	4685      	mov	sp, r0
   1f48a:	4770      	bx	lr

0001f48c <trace_task_create>:
{
   1f48c:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   1f48e:	201d      	movs	r0, #29
   1f490:	2200      	movs	r2, #0
   1f492:	2106      	movs	r1, #6
   1f494:	f7f0 fb6a 	bl	fb6c <z_arm_irq_priority_set>
}
   1f498:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   1f49c:	201d      	movs	r0, #29
   1f49e:	f7f0 bb47 	b.w	fb30 <arch_irq_enable>

0001f4a2 <read_task_create>:
{
   1f4a2:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   1f4a4:	201c      	movs	r0, #28
   1f4a6:	2200      	movs	r2, #0
   1f4a8:	2106      	movs	r1, #6
   1f4aa:	f7f0 fb5f 	bl	fb6c <z_arm_irq_priority_set>
}
   1f4ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   1f4b2:	201c      	movs	r0, #28
   1f4b4:	f7f0 bb3c 	b.w	fb30 <arch_irq_enable>

0001f4b8 <bsd_os_trace_put>:
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   1f4b8:	2000      	movs	r0, #0
   1f4ba:	4770      	bx	lr

0001f4bc <z_to_nrf_flags>:
{
   1f4bc:	4603      	mov	r3, r0
		nrf_flags |= NRF_MSG_DONTWAIT;
   1f4be:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   1f4c2:	bf18      	it	ne
   1f4c4:	2002      	movne	r0, #2
	if (z_flags & MSG_PEEK) {
   1f4c6:	079a      	lsls	r2, r3, #30
		nrf_flags |= NRF_MSG_PEEK;
   1f4c8:	bf48      	it	mi
   1f4ca:	f040 0008 	orrmi.w	r0, r0, #8
	if (z_flags & MSG_TRUNC) {
   1f4ce:	06db      	lsls	r3, r3, #27
		nrf_flags |= NRF_MSG_TRUNC;
   1f4d0:	bf48      	it	mi
   1f4d2:	f040 0020 	orrmi.w	r0, r0, #32
}
   1f4d6:	4770      	bx	lr

0001f4d8 <z_to_nrf_family>:
	switch (z_family) {
   1f4d8:	2806      	cmp	r0, #6
   1f4da:	d80a      	bhi.n	1f4f2 <z_to_nrf_family+0x1a>
   1f4dc:	b198      	cbz	r0, 1f506 <z_to_nrf_family+0x2e>
   1f4de:	3801      	subs	r0, #1
   1f4e0:	2805      	cmp	r0, #5
   1f4e2:	d810      	bhi.n	1f506 <z_to_nrf_family+0x2e>
   1f4e4:	e8df f000 	tbb	[pc, r0]
   1f4e8:	0f0d0312 	.word	0x0f0d0312
   1f4ec:	0b0f      	.short	0x0b0f
   1f4ee:	200a      	movs	r0, #10
   1f4f0:	4770      	bx	lr
   1f4f2:	2866      	cmp	r0, #102	; 0x66
		return NRF_AF_LTE;
   1f4f4:	bf14      	ite	ne
   1f4f6:	f06f 002e 	mvnne.w	r0, #46	; 0x2e
   1f4fa:	2066      	moveq	r0, #102	; 0x66
   1f4fc:	4770      	bx	lr
		return NRF_AF_LOCAL;
   1f4fe:	2001      	movs	r0, #1
   1f500:	4770      	bx	lr
		return NRF_AF_PACKET;
   1f502:	2005      	movs	r0, #5
   1f504:	4770      	bx	lr
		return -EAFNOSUPPORT;
   1f506:	f06f 002e 	mvn.w	r0, #46	; 0x2e
   1f50a:	4770      	bx	lr
		return NRF_AF_INET;
   1f50c:	2002      	movs	r0, #2
}
   1f50e:	4770      	bx	lr

0001f510 <z_to_nrf_protocol>:
	switch (proto) {
   1f510:	f240 1311 	movw	r3, #273	; 0x111
   1f514:	4298      	cmp	r0, r3
   1f516:	d023      	beq.n	1f560 <z_to_nrf_protocol+0x50>
   1f518:	f5b0 7f89 	cmp.w	r0, #274	; 0x112
   1f51c:	da11      	bge.n	1f542 <z_to_nrf_protocol+0x32>
   1f51e:	2811      	cmp	r0, #17
   1f520:	d021      	beq.n	1f566 <z_to_nrf_protocol+0x56>
   1f522:	dc06      	bgt.n	1f532 <z_to_nrf_protocol+0x22>
   1f524:	b300      	cbz	r0, 1f568 <z_to_nrf_protocol+0x58>
		return NRF_IPPROTO_TCP;
   1f526:	2806      	cmp	r0, #6
   1f528:	bf14      	ite	ne
   1f52a:	f06f 002a 	mvnne.w	r0, #42	; 0x2a
   1f52e:	2001      	moveq	r0, #1
   1f530:	4770      	bx	lr
		return NRF_SPROTO_TLS1v2;
   1f532:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   1f536:	bf14      	ite	ne
   1f538:	f06f 002a 	mvnne.w	r0, #42	; 0x2a
   1f53c:	f44f 7082 	moveq.w	r0, #260	; 0x104
   1f540:	4770      	bx	lr
	switch (proto) {
   1f542:	f240 2302 	movw	r3, #514	; 0x202
   1f546:	4298      	cmp	r0, r3
   1f548:	d00e      	beq.n	1f568 <z_to_nrf_protocol+0x58>
   1f54a:	f240 2303 	movw	r3, #515	; 0x203
   1f54e:	4298      	cmp	r0, r3
   1f550:	d00a      	beq.n	1f568 <z_to_nrf_protocol+0x58>
   1f552:	f240 2301 	movw	r3, #513	; 0x201
		return -EPROTONOSUPPORT;
   1f556:	4298      	cmp	r0, r3
   1f558:	bf18      	it	ne
   1f55a:	f06f 002a 	mvnne.w	r0, #42	; 0x2a
   1f55e:	4770      	bx	lr
		return NRF_SPROTO_DTLS1v2;
   1f560:	f44f 7087 	mov.w	r0, #270	; 0x10e
   1f564:	4770      	bx	lr
	switch (proto) {
   1f566:	2002      	movs	r0, #2
}
   1f568:	4770      	bx	lr

0001f56a <nrf91_socket_is_supported>:
}
   1f56a:	2001      	movs	r0, #1
   1f56c:	4770      	bx	lr

0001f56e <nrf91_bsdlib_socket_offload_init>:
}
   1f56e:	2000      	movs	r0, #0
   1f570:	4770      	bx	lr

0001f572 <z_errno>:
   1f572:	f7fc bb99 	b.w	1bca8 <z_impl_z_errno>

0001f576 <nrf91_socket_offload_getsockopt>:
{
   1f576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f57a:	461d      	mov	r5, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   1f57c:	2300      	movs	r3, #0
{
   1f57e:	b086      	sub	sp, #24
   1f580:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_timeo = {0, 0};
   1f584:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   1f588:	f8d8 3000 	ldr.w	r3, [r8]
{
   1f58c:	460c      	mov	r4, r1
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   1f58e:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   1f590:	f240 2302 	movw	r3, #514	; 0x202
   1f594:	4299      	cmp	r1, r3
{
   1f596:	4616      	mov	r6, r2
	int sd = OBJ_TO_SD(obj);
   1f598:	f100 37ff 	add.w	r7, r0, #4294967295
	switch (z_in_level) {
   1f59c:	d005      	beq.n	1f5aa <nrf91_socket_offload_getsockopt+0x34>
   1f59e:	dc30      	bgt.n	1f602 <nrf91_socket_offload_getsockopt+0x8c>
   1f5a0:	2901      	cmp	r1, #1
   1f5a2:	d002      	beq.n	1f5aa <nrf91_socket_offload_getsockopt+0x34>
   1f5a4:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   1f5a8:	d13c      	bne.n	1f624 <nrf91_socket_offload_getsockopt+0xae>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   1f5aa:	4631      	mov	r1, r6
   1f5ac:	4620      	mov	r0, r4
   1f5ae:	aa02      	add	r2, sp, #8
   1f5b0:	f7f2 f930 	bl	11814 <z_to_nrf_optname>
   1f5b4:	2800      	cmp	r0, #0
   1f5b6:	db35      	blt.n	1f624 <nrf91_socket_offload_getsockopt+0xae>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   1f5b8:	2c01      	cmp	r4, #1
   1f5ba:	d126      	bne.n	1f60a <nrf91_socket_offload_getsockopt+0x94>
   1f5bc:	f1a6 0314 	sub.w	r3, r6, #20
   1f5c0:	2b01      	cmp	r3, #1
   1f5c2:	d822      	bhi.n	1f60a <nrf91_socket_offload_getsockopt+0x94>
		nrf_optlen = sizeof(struct nrf_timeval);
   1f5c4:	2308      	movs	r3, #8
   1f5c6:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_timeo;
   1f5c8:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   1f5ca:	aa03      	add	r2, sp, #12
   1f5cc:	4638      	mov	r0, r7
   1f5ce:	9200      	str	r2, [sp, #0]
   1f5d0:	4621      	mov	r1, r4
   1f5d2:	9a02      	ldr	r2, [sp, #8]
   1f5d4:	f7fa fd28 	bl	1a028 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   1f5d8:	4607      	mov	r7, r0
   1f5da:	b970      	cbnz	r0, 1f5fa <nrf91_socket_offload_getsockopt+0x84>
   1f5dc:	b16d      	cbz	r5, 1f5fa <nrf91_socket_offload_getsockopt+0x84>
		*optlen = nrf_optlen;
   1f5de:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   1f5e0:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   1f5e2:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   1f5e6:	d108      	bne.n	1f5fa <nrf91_socket_offload_getsockopt+0x84>
			if (optname == SO_ERROR) {
   1f5e8:	2e04      	cmp	r6, #4
   1f5ea:	d110      	bne.n	1f60e <nrf91_socket_offload_getsockopt+0x98>
				bsd_os_errno_set(*(int *)optval);
   1f5ec:	6828      	ldr	r0, [r5, #0]
   1f5ee:	f7f1 ff6b 	bl	114c8 <bsd_os_errno_set>
				*(int *)optval = errno;
   1f5f2:	f7ff ffbe 	bl	1f572 <z_errno>
   1f5f6:	6803      	ldr	r3, [r0, #0]
   1f5f8:	602b      	str	r3, [r5, #0]
}
   1f5fa:	4638      	mov	r0, r7
   1f5fc:	b006      	add	sp, #24
   1f5fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   1f602:	f240 2303 	movw	r3, #515	; 0x203
   1f606:	4299      	cmp	r1, r3
   1f608:	e7ce      	b.n	1f5a8 <nrf91_socket_offload_getsockopt+0x32>
   1f60a:	462b      	mov	r3, r5
   1f60c:	e7dd      	b.n	1f5ca <nrf91_socket_offload_getsockopt+0x54>
			} else if ((optname == SO_RCVTIMEO) ||
   1f60e:	3e14      	subs	r6, #20
   1f610:	2e01      	cmp	r6, #1
   1f612:	d8f2      	bhi.n	1f5fa <nrf91_socket_offload_getsockopt+0x84>
				((struct timeval *)optval)->tv_sec =
   1f614:	9b04      	ldr	r3, [sp, #16]
   1f616:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   1f618:	9b05      	ldr	r3, [sp, #20]
   1f61a:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   1f61c:	2308      	movs	r3, #8
   1f61e:	f8c8 3000 	str.w	r3, [r8]
   1f622:	e7ea      	b.n	1f5fa <nrf91_socket_offload_getsockopt+0x84>
	errno = ENOPROTOOPT;
   1f624:	f7ff ffa5 	bl	1f572 <z_errno>
   1f628:	232a      	movs	r3, #42	; 0x2a
	return retval;
   1f62a:	f04f 37ff 	mov.w	r7, #4294967295
	errno = ENOPROTOOPT;
   1f62e:	6003      	str	r3, [r0, #0]
	return retval;
   1f630:	e7e3      	b.n	1f5fa <nrf91_socket_offload_getsockopt+0x84>

0001f632 <nrf91_socket_offload_recvfrom>:
{
   1f632:	b570      	push	{r4, r5, r6, lr}
	int sd = OBJ_TO_SD(obj);
   1f634:	1e45      	subs	r5, r0, #1
{
   1f636:	b08e      	sub	sp, #56	; 0x38
   1f638:	4618      	mov	r0, r3
   1f63a:	e9dd 4612 	ldrd	r4, r6, [sp, #72]	; 0x48
   1f63e:	9203      	str	r2, [sp, #12]
   1f640:	f7ff ff3c 	bl	1f4bc <z_to_nrf_flags>
	if (from == NULL) {
   1f644:	9a03      	ldr	r2, [sp, #12]
   1f646:	4603      	mov	r3, r0
   1f648:	b944      	cbnz	r4, 1f65c <nrf91_socket_offload_recvfrom+0x2a>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   1f64a:	4628      	mov	r0, r5
   1f64c:	e9cd 4400 	strd	r4, r4, [sp]
   1f650:	f7fa fc68 	bl	19f24 <nrf_recvfrom>
   1f654:	4605      	mov	r5, r0
}
   1f656:	4628      	mov	r0, r5
   1f658:	b00e      	add	sp, #56	; 0x38
   1f65a:	bd70      	pop	{r4, r5, r6, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   1f65c:	2024      	movs	r0, #36	; 0x24
   1f65e:	9004      	str	r0, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   1f660:	a804      	add	r0, sp, #16
   1f662:	9001      	str	r0, [sp, #4]
   1f664:	a805      	add	r0, sp, #20
   1f666:	9000      	str	r0, [sp, #0]
   1f668:	4628      	mov	r0, r5
   1f66a:	f7fa fc5b 	bl	19f24 <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   1f66e:	9b06      	ldr	r3, [sp, #24]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   1f670:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   1f672:	2b02      	cmp	r3, #2
   1f674:	d109      	bne.n	1f68a <nrf91_socket_offload_recvfrom+0x58>
	ptr->sin_port = nrf_in->sin_port;
   1f676:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   1f67a:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   1f67c:	2301      	movs	r3, #1
   1f67e:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1f680:	9b08      	ldr	r3, [sp, #32]
   1f682:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   1f684:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   1f686:	6033      	str	r3, [r6, #0]
	return retval;
   1f688:	e7e5      	b.n	1f656 <nrf91_socket_offload_recvfrom+0x24>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   1f68a:	2b0a      	cmp	r3, #10
   1f68c:	d1e3      	bne.n	1f656 <nrf91_socket_offload_recvfrom+0x24>
	ptr->sin6_port = nrf_in->sin6_port;
   1f68e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
	ptr->sin6_family = AF_INET6;
   1f692:	4620      	mov	r0, r4
	ptr->sin6_port = nrf_in->sin6_port;
   1f694:	8063      	strh	r3, [r4, #2]
	ptr->sin6_family = AF_INET6;
   1f696:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1f698:	2210      	movs	r2, #16
	ptr->sin6_family = AF_INET6;
   1f69a:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1f69e:	a909      	add	r1, sp, #36	; 0x24
   1f6a0:	f7fe ffd7 	bl	1e652 <memcpy>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   1f6a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f6a6:	7523      	strb	r3, [r4, #20]
			*fromlen = sizeof(struct sockaddr_in6);
   1f6a8:	2318      	movs	r3, #24
   1f6aa:	e7ec      	b.n	1f686 <nrf91_socket_offload_recvfrom+0x54>

0001f6ac <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   1f6ac:	2300      	movs	r3, #0
{
   1f6ae:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   1f6b0:	e9cd 3300 	strd	r3, r3, [sp]
   1f6b4:	f7ff ffbd 	bl	1f632 <nrf91_socket_offload_recvfrom>
}
   1f6b8:	b003      	add	sp, #12
   1f6ba:	f85d fb04 	ldr.w	pc, [sp], #4

0001f6be <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   1f6be:	3801      	subs	r0, #1
   1f6c0:	f7fa bc5e 	b.w	19f80 <nrf_listen>

0001f6c4 <nrf91_socket_offload_close>:
	return nrf_close(sd);
   1f6c4:	3801      	subs	r0, #1
   1f6c6:	f7fa bc03 	b.w	19ed0 <nrf_close>

0001f6ca <nrf91_socket_offload_freeaddrinfo>:
{
   1f6ca:	b538      	push	{r3, r4, r5, lr}
   1f6cc:	4604      	mov	r4, r0
	while (next != NULL) {
   1f6ce:	b904      	cbnz	r4, 1f6d2 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   1f6d0:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   1f6d2:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   1f6d4:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   1f6d6:	f001 f84e 	bl	20776 <k_free>
		k_free(this);
   1f6da:	4620      	mov	r0, r4
   1f6dc:	f001 f84b 	bl	20776 <k_free>
		next = next->ai_next;
   1f6e0:	462c      	mov	r4, r5
   1f6e2:	e7f4      	b.n	1f6ce <nrf91_socket_offload_freeaddrinfo+0x4>

0001f6e4 <z_to_nrf_addrinfo_hints>:
{
   1f6e4:	b538      	push	{r3, r4, r5, lr}
   1f6e6:	460c      	mov	r4, r1
   1f6e8:	4605      	mov	r5, r0
	memset(nrf_out, 0, sizeof(struct nrf_addrinfo));
   1f6ea:	2220      	movs	r2, #32
   1f6ec:	2100      	movs	r1, #0
   1f6ee:	4620      	mov	r0, r4
   1f6f0:	f7fe ffda 	bl	1e6a8 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   1f6f4:	2300      	movs	r3, #0
   1f6f6:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   1f6f8:	68eb      	ldr	r3, [r5, #12]
	switch (socktype) {
   1f6fa:	2b03      	cmp	r3, #3
   1f6fc:	d003      	beq.n	1f706 <z_to_nrf_addrinfo_hints+0x22>
   1f6fe:	2b04      	cmp	r3, #4
   1f700:	bf08      	it	eq
   1f702:	f44f 7300 	moveq.w	r3, #512	; 0x200
	family = z_to_nrf_family(z_in->ai_family);
   1f706:	8928      	ldrh	r0, [r5, #8]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   1f708:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   1f70a:	f7ff fee5 	bl	1f4d8 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   1f70e:	f110 0f2f 	cmn.w	r0, #47	; 0x2f
   1f712:	d00b      	beq.n	1f72c <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   1f714:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   1f716:	6928      	ldr	r0, [r5, #16]
   1f718:	f7ff fefa 	bl	1f510 <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   1f71c:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   1f720:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   1f722:	d003      	beq.n	1f72c <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   1f724:	69e8      	ldr	r0, [r5, #28]
   1f726:	b108      	cbz	r0, 1f72c <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   1f728:	61a0      	str	r0, [r4, #24]
	return 0;
   1f72a:	2000      	movs	r0, #0
}
   1f72c:	bd38      	pop	{r3, r4, r5, pc}

0001f72e <nrf91_socket_offload_connect>:
{
   1f72e:	b570      	push	{r4, r5, r6, lr}
	if (addr->sa_family == AF_INET) {
   1f730:	880b      	ldrh	r3, [r1, #0]
{
   1f732:	460c      	mov	r4, r1
	if (addr->sa_family == AF_INET) {
   1f734:	2b01      	cmp	r3, #1
{
   1f736:	b08a      	sub	sp, #40	; 0x28
	int sd = OBJ_TO_SD(obj);
   1f738:	f100 35ff 	add.w	r5, r0, #4294967295
	if (addr->sa_family == AF_INET) {
   1f73c:	d10f      	bne.n	1f75e <nrf91_socket_offload_connect+0x30>
	nrf_out->sin_port = ptr->sin_port;
   1f73e:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1f740:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   1f742:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   1f746:	2302      	movs	r3, #2
   1f748:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1f74a:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1f74c:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1f750:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   1f752:	4628      	mov	r0, r5
   1f754:	a901      	add	r1, sp, #4
   1f756:	f7fa fc01 	bl	19f5c <nrf_connect>
}
   1f75a:	b00a      	add	sp, #40	; 0x28
   1f75c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (addr->sa_family == AF_INET6) {
   1f75e:	2b02      	cmp	r3, #2
   1f760:	d110      	bne.n	1f784 <nrf91_socket_offload_connect+0x56>
	nrf_out->sin6_port = ptr->sin6_port;
   1f762:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1f764:	2624      	movs	r6, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   1f766:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin6_family = NRF_AF_INET6;
   1f76a:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1f76c:	2210      	movs	r2, #16
   1f76e:	3104      	adds	r1, #4
   1f770:	a805      	add	r0, sp, #20
	nrf_out->sin6_family = NRF_AF_INET6;
   1f772:	9302      	str	r3, [sp, #8]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1f774:	f88d 6004 	strb.w	r6, [sp, #4]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1f778:	f7fe ff6b 	bl	1e652 <memcpy>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   1f77c:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   1f77e:	4632      	mov	r2, r6
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   1f780:	9309      	str	r3, [sp, #36]	; 0x24
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   1f782:	e7e6      	b.n	1f752 <nrf91_socket_offload_connect+0x24>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   1f784:	4628      	mov	r0, r5
   1f786:	f7fa fbe9 	bl	19f5c <nrf_connect>
		if (retval < 0) {
   1f78a:	2800      	cmp	r0, #0
   1f78c:	dae5      	bge.n	1f75a <nrf91_socket_offload_connect+0x2c>
	errno = ENOTSUP;
   1f78e:	f7ff fef0 	bl	1f572 <z_errno>
   1f792:	2323      	movs	r3, #35	; 0x23
   1f794:	6003      	str	r3, [r0, #0]
   1f796:	f04f 30ff 	mov.w	r0, #4294967295
   1f79a:	e7de      	b.n	1f75a <nrf91_socket_offload_connect+0x2c>

0001f79c <nrf91_socket_offload_getaddrinfo>:
{
   1f79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f7a0:	4614      	mov	r4, r2
   1f7a2:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   1f7a4:	2100      	movs	r1, #0
{
   1f7a6:	b093      	sub	sp, #76	; 0x4c
   1f7a8:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1f7aa:	2220      	movs	r2, #32
   1f7ac:	a802      	add	r0, sp, #8
{
   1f7ae:	4698      	mov	r8, r3
	struct nrf_addrinfo *nrf_res = NULL;
   1f7b0:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1f7b2:	f7fe ff79 	bl	1e6a8 <memset>
	if (hints != NULL) {
   1f7b6:	b194      	cbz	r4, 1f7de <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   1f7b8:	4620      	mov	r0, r4
   1f7ba:	a902      	add	r1, sp, #8
   1f7bc:	f7ff ff92 	bl	1f6e4 <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   1f7c0:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
   1f7c4:	f000 80e0 	beq.w	1f988 <nrf91_socket_offload_getaddrinfo+0x1ec>
		} else if (error == -EAFNOSUPPORT) {
   1f7c8:	302f      	adds	r0, #47	; 0x2f
   1f7ca:	f000 80e0 	beq.w	1f98e <nrf91_socket_offload_getaddrinfo+0x1f2>
		if (hints->ai_next != NULL) {
   1f7ce:	6820      	ldr	r0, [r4, #0]
   1f7d0:	b120      	cbz	r0, 1f7dc <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   1f7d2:	ac0a      	add	r4, sp, #40	; 0x28
   1f7d4:	4621      	mov	r1, r4
   1f7d6:	f7ff ff85 	bl	1f6e4 <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   1f7da:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   1f7dc:	ac02      	add	r4, sp, #8
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   1f7de:	4628      	mov	r0, r5
   1f7e0:	4622      	mov	r2, r4
   1f7e2:	4631      	mov	r1, r6
   1f7e4:	ab01      	add	r3, sp, #4
   1f7e6:	f7fa fc3b 	bl	1a060 <nrf_getaddrinfo>
	if (retval != 0) {
   1f7ea:	4605      	mov	r5, r0
   1f7ec:	b1f8      	cbz	r0, 1f82e <nrf91_socket_offload_getaddrinfo+0x92>
	switch (nrf_error) {
   1f7ee:	282f      	cmp	r0, #47	; 0x2f
   1f7f0:	f000 80d0 	beq.w	1f994 <nrf91_socket_offload_getaddrinfo+0x1f8>
   1f7f4:	dc0c      	bgt.n	1f810 <nrf91_socket_offload_getaddrinfo+0x74>
   1f7f6:	280c      	cmp	r0, #12
   1f7f8:	f000 80cf 	beq.w	1f99a <nrf91_socket_offload_getaddrinfo+0x1fe>
		return DNS_EAI_AGAIN;
   1f7fc:	2823      	cmp	r0, #35	; 0x23
   1f7fe:	bf14      	ite	ne
   1f800:	f06f 050a 	mvnne.w	r5, #10
   1f804:	f06f 0502 	mvneq.w	r5, #2
}
   1f808:	4628      	mov	r0, r5
   1f80a:	b013      	add	sp, #76	; 0x4c
   1f80c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (nrf_error) {
   1f810:	2833      	cmp	r0, #51	; 0x33
   1f812:	d006      	beq.n	1f822 <nrf91_socket_offload_getaddrinfo+0x86>
		return DNS_EAI_INPROGRESS;
   1f814:	2873      	cmp	r0, #115	; 0x73
   1f816:	bf14      	ite	ne
   1f818:	f06f 050a 	mvnne.w	r5, #10
   1f81c:	f06f 0563 	mvneq.w	r5, #99	; 0x63
   1f820:	e7f2      	b.n	1f808 <nrf91_socket_offload_getaddrinfo+0x6c>
		errno = ENETUNREACH;
   1f822:	f7ff fea6 	bl	1f572 <z_errno>
   1f826:	6005      	str	r5, [r0, #0]
		return DNS_EAI_SYSTEM;
   1f828:	f06f 050a 	mvn.w	r5, #10
   1f82c:	e7ec      	b.n	1f808 <nrf91_socket_offload_getaddrinfo+0x6c>
	struct zsock_addrinfo *latest_z_res = NULL;
   1f82e:	4681      	mov	r9, r0
	z_out->ai_next = NULL;
   1f830:	4682      	mov	sl, r0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   1f832:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   1f834:	f8c8 0000 	str.w	r0, [r8]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   1f838:	b91e      	cbnz	r6, 1f842 <nrf91_socket_offload_getaddrinfo+0xa6>
	nrf_freeaddrinfo(nrf_res);
   1f83a:	9801      	ldr	r0, [sp, #4]
   1f83c:	f7fa fc12 	bl	1a064 <nrf_freeaddrinfo>
	return retval;
   1f840:	e7e2      	b.n	1f808 <nrf91_socket_offload_getaddrinfo+0x6c>
					k_malloc(sizeof(struct zsock_addrinfo));
   1f842:	2050      	movs	r0, #80	; 0x50
   1f844:	f7fd fcf4 	bl	1d230 <k_malloc>
		if (next_z_res == NULL) {
   1f848:	4604      	mov	r4, r0
   1f84a:	2800      	cmp	r0, #0
   1f84c:	f000 808f 	beq.w	1f96e <nrf91_socket_offload_getaddrinfo+0x1d2>
	z_out->ai_socktype = nrf_in->ai_socktype;
   1f850:	68b3      	ldr	r3, [r6, #8]
	z_out->ai_next = NULL;
   1f852:	f8c0 a000 	str.w	sl, [r0]
	z_out->ai_socktype = nrf_in->ai_socktype;
   1f856:	60c3      	str	r3, [r0, #12]
	family = nrf_to_z_family(nrf_in->ai_family);
   1f858:	6873      	ldr	r3, [r6, #4]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   1f85a:	f8c0 a01c 	str.w	sl, [r0, #28]
	switch (nrf_family) {
   1f85e:	2b0a      	cmp	r3, #10
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   1f860:	f8c0 a004 	str.w	sl, [r0, #4]
	switch (nrf_family) {
   1f864:	dc23      	bgt.n	1f8ae <nrf91_socket_offload_getaddrinfo+0x112>
   1f866:	2b00      	cmp	r3, #0
   1f868:	dd23      	ble.n	1f8b2 <nrf91_socket_offload_getaddrinfo+0x116>
   1f86a:	1e5a      	subs	r2, r3, #1
   1f86c:	2a09      	cmp	r2, #9
   1f86e:	d820      	bhi.n	1f8b2 <nrf91_socket_offload_getaddrinfo+0x116>
   1f870:	e8df f002 	tbb	[pc, r2]
   1f874:	1f1f2905 	.word	0x1f1f2905
   1f878:	1f1f1f25 	.word	0x1f1f1f25
   1f87c:	271f      	.short	0x271f
		return AF_LOCAL;
   1f87e:	2206      	movs	r2, #6
	z_out->ai_family = family;
   1f880:	60a2      	str	r2, [r4, #8]
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1f882:	68f2      	ldr	r2, [r6, #12]
	switch (proto) {
   1f884:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   1f888:	d04c      	beq.n	1f924 <nrf91_socket_offload_getaddrinfo+0x188>
   1f88a:	dc26      	bgt.n	1f8da <nrf91_socket_offload_getaddrinfo+0x13e>
   1f88c:	2a02      	cmp	r2, #2
   1f88e:	d04c      	beq.n	1f92a <nrf91_socket_offload_getaddrinfo+0x18e>
   1f890:	dc1d      	bgt.n	1f8ce <nrf91_socket_offload_getaddrinfo+0x132>
   1f892:	b372      	cbz	r2, 1f8f2 <nrf91_socket_offload_getaddrinfo+0x156>
   1f894:	2a01      	cmp	r2, #1
   1f896:	d04a      	beq.n	1f92e <nrf91_socket_offload_getaddrinfo+0x192>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1f898:	f06f 032a 	mvn.w	r3, #42	; 0x2a
   1f89c:	6123      	str	r3, [r4, #16]
		z_out->ai_addr = NULL;
   1f89e:	2300      	movs	r3, #0
   1f8a0:	61a3      	str	r3, [r4, #24]
			k_free(next_z_res);
   1f8a2:	4620      	mov	r0, r4
   1f8a4:	f000 ff67 	bl	20776 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   1f8a8:	f06f 0506 	mvn.w	r5, #6
   1f8ac:	e061      	b.n	1f972 <nrf91_socket_offload_getaddrinfo+0x1d6>
	switch (nrf_family) {
   1f8ae:	2b66      	cmp	r3, #102	; 0x66
   1f8b0:	d00b      	beq.n	1f8ca <nrf91_socket_offload_getaddrinfo+0x12e>
			k_free(next_z_res);
   1f8b2:	4620      	mov	r0, r4
   1f8b4:	f000 ff5f 	bl	20776 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   1f8b8:	f06f 0508 	mvn.w	r5, #8
   1f8bc:	e059      	b.n	1f972 <nrf91_socket_offload_getaddrinfo+0x1d6>
		return AF_PACKET;
   1f8be:	2203      	movs	r2, #3
   1f8c0:	e7de      	b.n	1f880 <nrf91_socket_offload_getaddrinfo+0xe4>
		return AF_INET6;
   1f8c2:	2202      	movs	r2, #2
   1f8c4:	e7dc      	b.n	1f880 <nrf91_socket_offload_getaddrinfo+0xe4>
	switch (nrf_family) {
   1f8c6:	2201      	movs	r2, #1
   1f8c8:	e7da      	b.n	1f880 <nrf91_socket_offload_getaddrinfo+0xe4>
		return AF_LTE;
   1f8ca:	461a      	mov	r2, r3
   1f8cc:	e7d8      	b.n	1f880 <nrf91_socket_offload_getaddrinfo+0xe4>
	switch (proto) {
   1f8ce:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   1f8d2:	d1e1      	bne.n	1f898 <nrf91_socket_offload_getaddrinfo+0xfc>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1f8d4:	f44f 7281 	mov.w	r2, #258	; 0x102
   1f8d8:	e00b      	b.n	1f8f2 <nrf91_socket_offload_getaddrinfo+0x156>
	switch (proto) {
   1f8da:	f240 2102 	movw	r1, #514	; 0x202
   1f8de:	428a      	cmp	r2, r1
   1f8e0:	d007      	beq.n	1f8f2 <nrf91_socket_offload_getaddrinfo+0x156>
   1f8e2:	f240 2103 	movw	r1, #515	; 0x203
   1f8e6:	428a      	cmp	r2, r1
   1f8e8:	d003      	beq.n	1f8f2 <nrf91_socket_offload_getaddrinfo+0x156>
   1f8ea:	f240 2101 	movw	r1, #513	; 0x201
   1f8ee:	428a      	cmp	r2, r1
   1f8f0:	d1d2      	bne.n	1f898 <nrf91_socket_offload_getaddrinfo+0xfc>
	if (nrf_in->ai_family == NRF_AF_INET) {
   1f8f2:	2b02      	cmp	r3, #2
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1f8f4:	6122      	str	r2, [r4, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
   1f8f6:	d11c      	bne.n	1f932 <nrf91_socket_offload_getaddrinfo+0x196>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   1f8f8:	2008      	movs	r0, #8
   1f8fa:	f7fd fc99 	bl	1d230 <k_malloc>
   1f8fe:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   1f900:	b390      	cbz	r0, 1f968 <nrf91_socket_offload_getaddrinfo+0x1cc>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   1f902:	2308      	movs	r3, #8
   1f904:	6163      	str	r3, [r4, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   1f906:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   1f908:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1f90a:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   1f90c:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   1f90e:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1f910:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   1f912:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   1f914:	f1b9 0f00 	cmp.w	r9, #0
   1f918:	d133      	bne.n	1f982 <nrf91_socket_offload_getaddrinfo+0x1e6>
			*res = next_z_res;
   1f91a:	f8c8 4000 	str.w	r4, [r8]
		next_nrf_res = next_nrf_res->ai_next;
   1f91e:	46a1      	mov	r9, r4
   1f920:	69f6      	ldr	r6, [r6, #28]
   1f922:	e789      	b.n	1f838 <nrf91_socket_offload_getaddrinfo+0x9c>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1f924:	f240 1211 	movw	r2, #273	; 0x111
   1f928:	e7e3      	b.n	1f8f2 <nrf91_socket_offload_getaddrinfo+0x156>
   1f92a:	2211      	movs	r2, #17
   1f92c:	e7e1      	b.n	1f8f2 <nrf91_socket_offload_getaddrinfo+0x156>
   1f92e:	2206      	movs	r2, #6
   1f930:	e7df      	b.n	1f8f2 <nrf91_socket_offload_getaddrinfo+0x156>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   1f932:	2b0a      	cmp	r3, #10
   1f934:	d1b5      	bne.n	1f8a2 <nrf91_socket_offload_getaddrinfo+0x106>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   1f936:	2018      	movs	r0, #24
   1f938:	f7fd fc7a 	bl	1d230 <k_malloc>
   1f93c:	4607      	mov	r7, r0
   1f93e:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   1f940:	b190      	cbz	r0, 1f968 <nrf91_socket_offload_getaddrinfo+0x1cc>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   1f942:	2318      	movs	r3, #24
			(const struct nrf_sockaddr_in6 *)nrf_in->ai_addr);
   1f944:	f8d6 b014 	ldr.w	fp, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   1f948:	6163      	str	r3, [r4, #20]
	ptr->sin6_port = nrf_in->sin6_port;
   1f94a:	f8bb 3008 	ldrh.w	r3, [fp, #8]
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1f94e:	2210      	movs	r2, #16
	ptr->sin6_port = nrf_in->sin6_port;
   1f950:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   1f952:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1f954:	eb0b 0102 	add.w	r1, fp, r2
	ptr->sin6_family = AF_INET6;
   1f958:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1f95c:	f7fe fe79 	bl	1e652 <memcpy>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   1f960:	f8db 3020 	ldr.w	r3, [fp, #32]
   1f964:	753b      	strb	r3, [r7, #20]
		} else if (error == -EAFNOSUPPORT) {
   1f966:	e7d5      	b.n	1f914 <nrf91_socket_offload_getaddrinfo+0x178>
			k_free(next_z_res);
   1f968:	4620      	mov	r0, r4
   1f96a:	f000 ff04 	bl	20776 <k_free>
			retval = DNS_EAI_MEMORY;
   1f96e:	f06f 0509 	mvn.w	r5, #9
		nrf91_socket_offload_freeaddrinfo(*res);
   1f972:	f8d8 0000 	ldr.w	r0, [r8]
   1f976:	f7ff fea8 	bl	1f6ca <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   1f97a:	2300      	movs	r3, #0
   1f97c:	f8c8 3000 	str.w	r3, [r8]
   1f980:	e75b      	b.n	1f83a <nrf91_socket_offload_getaddrinfo+0x9e>
			latest_z_res->ai_next = next_z_res;
   1f982:	f8c9 4000 	str.w	r4, [r9]
   1f986:	e7ca      	b.n	1f91e <nrf91_socket_offload_getaddrinfo+0x182>
			return DNS_EAI_SOCKTYPE;
   1f988:	f06f 0506 	mvn.w	r5, #6
   1f98c:	e73c      	b.n	1f808 <nrf91_socket_offload_getaddrinfo+0x6c>
			return DNS_EAI_ADDRFAMILY;
   1f98e:	f06f 0508 	mvn.w	r5, #8
   1f992:	e739      	b.n	1f808 <nrf91_socket_offload_getaddrinfo+0x6c>
		return DNS_EAI_NONAME;
   1f994:	f06f 0501 	mvn.w	r5, #1
   1f998:	e736      	b.n	1f808 <nrf91_socket_offload_getaddrinfo+0x6c>
		return DNS_EAI_MEMORY;
   1f99a:	f06f 0509 	mvn.w	r5, #9
   1f99e:	e733      	b.n	1f808 <nrf91_socket_offload_getaddrinfo+0x6c>

0001f9a0 <nrf91_socket_offload_sendto>:
{
   1f9a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f9a4:	b08d      	sub	sp, #52	; 0x34
   1f9a6:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1f9a8:	460e      	mov	r6, r1
   1f9aa:	4617      	mov	r7, r2
   1f9ac:	4698      	mov	r8, r3
	int sd = OBJ_TO_SD(obj);
   1f9ae:	1e45      	subs	r5, r0, #1
	if (to == NULL) {
   1f9b0:	b96c      	cbnz	r4, 1f9ce <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   1f9b2:	4618      	mov	r0, r3
   1f9b4:	f7ff fd82 	bl	1f4bc <z_to_nrf_flags>
   1f9b8:	4603      	mov	r3, r0
   1f9ba:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1f9be:	463a      	mov	r2, r7
   1f9c0:	4631      	mov	r1, r6
   1f9c2:	4628      	mov	r0, r5
   1f9c4:	f7fa fa92 	bl	19eec <nrf_sendto>
}
   1f9c8:	b00d      	add	sp, #52	; 0x34
   1f9ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET) {
   1f9ce:	8823      	ldrh	r3, [r4, #0]
   1f9d0:	2b01      	cmp	r3, #1
   1f9d2:	d111      	bne.n	1f9f8 <nrf91_socket_offload_sendto+0x58>
	nrf_out->sin_port = ptr->sin_port;
   1f9d4:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1f9d6:	2110      	movs	r1, #16
	nrf_out->sin_port = ptr->sin_port;
   1f9d8:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   1f9dc:	2302      	movs	r3, #2
   1f9de:	9304      	str	r3, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1f9e0:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   1f9e2:	4640      	mov	r0, r8
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1f9e4:	9306      	str	r3, [sp, #24]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1f9e6:	f88d 100c 	strb.w	r1, [sp, #12]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   1f9ea:	f7ff fd67 	bl	1f4bc <z_to_nrf_flags>
   1f9ee:	4603      	mov	r3, r0
   1f9f0:	9101      	str	r1, [sp, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1f9f2:	aa03      	add	r2, sp, #12
   1f9f4:	9200      	str	r2, [sp, #0]
   1f9f6:	e7e2      	b.n	1f9be <nrf91_socket_offload_sendto+0x1e>
	} else if (to->sa_family == AF_INET6) {
   1f9f8:	2b02      	cmp	r3, #2
   1f9fa:	d116      	bne.n	1fa2a <nrf91_socket_offload_sendto+0x8a>
	nrf_out->sin6_port = ptr->sin6_port;
   1f9fc:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1f9fe:	f04f 0924 	mov.w	r9, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   1fa02:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin6_family = NRF_AF_INET6;
   1fa06:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1fa08:	2210      	movs	r2, #16
   1fa0a:	1d21      	adds	r1, r4, #4
   1fa0c:	a807      	add	r0, sp, #28
	nrf_out->sin6_family = NRF_AF_INET6;
   1fa0e:	9304      	str	r3, [sp, #16]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1fa10:	f88d 900c 	strb.w	r9, [sp, #12]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1fa14:	f7fe fe1d 	bl	1e652 <memcpy>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   1fa18:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1fa1a:	4640      	mov	r0, r8
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   1fa1c:	930b      	str	r3, [sp, #44]	; 0x2c
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1fa1e:	f7ff fd4d 	bl	1f4bc <z_to_nrf_flags>
   1fa22:	f8cd 9004 	str.w	r9, [sp, #4]
   1fa26:	4603      	mov	r3, r0
   1fa28:	e7e3      	b.n	1f9f2 <nrf91_socket_offload_sendto+0x52>
	errno = ENOTSUP;
   1fa2a:	f7ff fda2 	bl	1f572 <z_errno>
   1fa2e:	2323      	movs	r3, #35	; 0x23
   1fa30:	6003      	str	r3, [r0, #0]
	return retval;
   1fa32:	f04f 30ff 	mov.w	r0, #4294967295
   1fa36:	e7c7      	b.n	1f9c8 <nrf91_socket_offload_sendto+0x28>

0001fa38 <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   1fa38:	2300      	movs	r3, #0
{
   1fa3a:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   1fa3c:	e9cd 3300 	strd	r3, r3, [sp]
   1fa40:	f7ff ffae 	bl	1f9a0 <nrf91_socket_offload_sendto>
}
   1fa44:	b003      	add	sp, #12
   1fa46:	f85d fb04 	ldr.w	pc, [sp], #4

0001fa4a <nrf91_socket_offload_setsockopt>:
{
   1fa4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fa4e:	461e      	mov	r6, r3
	switch (z_in_level) {
   1fa50:	f240 2302 	movw	r3, #514	; 0x202
{
   1fa54:	b086      	sub	sp, #24
	switch (z_in_level) {
   1fa56:	4299      	cmp	r1, r3
{
   1fa58:	460c      	mov	r4, r1
   1fa5a:	4615      	mov	r5, r2
   1fa5c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int sd = OBJ_TO_SD(obj);
   1fa5e:	f100 38ff 	add.w	r8, r0, #4294967295
	switch (z_in_level) {
   1fa62:	d005      	beq.n	1fa70 <nrf91_socket_offload_setsockopt+0x26>
   1fa64:	dc20      	bgt.n	1faa8 <nrf91_socket_offload_setsockopt+0x5e>
   1fa66:	2901      	cmp	r1, #1
   1fa68:	d002      	beq.n	1fa70 <nrf91_socket_offload_setsockopt+0x26>
   1fa6a:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   1fa6e:	d126      	bne.n	1fabe <nrf91_socket_offload_setsockopt+0x74>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   1fa70:	4629      	mov	r1, r5
   1fa72:	4620      	mov	r0, r4
   1fa74:	aa03      	add	r2, sp, #12
   1fa76:	f7f1 fecd 	bl	11814 <z_to_nrf_optname>
   1fa7a:	2800      	cmp	r0, #0
   1fa7c:	db1f      	blt.n	1fabe <nrf91_socket_offload_setsockopt+0x74>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   1fa7e:	2c01      	cmp	r4, #1
   1fa80:	d116      	bne.n	1fab0 <nrf91_socket_offload_setsockopt+0x66>
   1fa82:	3d14      	subs	r5, #20
   1fa84:	2d01      	cmp	r5, #1
   1fa86:	d805      	bhi.n	1fa94 <nrf91_socket_offload_setsockopt+0x4a>
		nrf_optlen = sizeof(struct nrf_timeval);
   1fa88:	2708      	movs	r7, #8
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   1fa8a:	6832      	ldr	r2, [r6, #0]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   1fa8c:	6873      	ldr	r3, [r6, #4]
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   1fa8e:	9204      	str	r2, [sp, #16]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   1fa90:	9305      	str	r3, [sp, #20]
		nrf_optval = &nrf_timeo;
   1fa92:	ae04      	add	r6, sp, #16
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   1fa94:	4633      	mov	r3, r6
   1fa96:	4621      	mov	r1, r4
   1fa98:	4640      	mov	r0, r8
   1fa9a:	9a03      	ldr	r2, [sp, #12]
   1fa9c:	9700      	str	r7, [sp, #0]
   1fa9e:	f7fa faa7 	bl	19ff0 <nrf_setsockopt>
}
   1faa2:	b006      	add	sp, #24
   1faa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   1faa8:	f240 2303 	movw	r3, #515	; 0x203
   1faac:	4299      	cmp	r1, r3
   1faae:	e7de      	b.n	1fa6e <nrf91_socket_offload_setsockopt+0x24>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   1fab0:	f5b4 7f8d 	cmp.w	r4, #282	; 0x11a
   1fab4:	d1ee      	bne.n	1fa94 <nrf91_socket_offload_setsockopt+0x4a>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   1fab6:	2d07      	cmp	r5, #7
   1fab8:	bf08      	it	eq
   1faba:	2701      	moveq	r7, #1
   1fabc:	e7ea      	b.n	1fa94 <nrf91_socket_offload_setsockopt+0x4a>
	errno = ENOPROTOOPT;
   1fabe:	f7ff fd58 	bl	1f572 <z_errno>
   1fac2:	232a      	movs	r3, #42	; 0x2a
   1fac4:	6003      	str	r3, [r0, #0]
   1fac6:	f04f 30ff 	mov.w	r0, #4294967295
   1faca:	e7ea      	b.n	1faa2 <nrf91_socket_offload_setsockopt+0x58>

0001facc <nrf91_socket_offload_bind>:
{
   1facc:	b570      	push	{r4, r5, r6, lr}
	if (addr->sa_family == AF_INET) {
   1face:	880b      	ldrh	r3, [r1, #0]
{
   1fad0:	460c      	mov	r4, r1
	if (addr->sa_family == AF_INET) {
   1fad2:	2b01      	cmp	r3, #1
{
   1fad4:	b08a      	sub	sp, #40	; 0x28
	int sd = OBJ_TO_SD(obj);
   1fad6:	f100 35ff 	add.w	r5, r0, #4294967295
	if (addr->sa_family == AF_INET) {
   1fada:	d10f      	bne.n	1fafc <nrf91_socket_offload_bind+0x30>
	nrf_out->sin_port = ptr->sin_port;
   1fadc:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1fade:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   1fae0:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   1fae4:	2302      	movs	r3, #2
   1fae6:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1fae8:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1faea:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1faee:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1faf0:	4628      	mov	r0, r5
   1faf2:	a901      	add	r1, sp, #4
   1faf4:	f7fa fa6a 	bl	19fcc <nrf_bind>
}
   1faf8:	b00a      	add	sp, #40	; 0x28
   1fafa:	bd70      	pop	{r4, r5, r6, pc}
	} else if (addr->sa_family == AF_INET6) {
   1fafc:	2b02      	cmp	r3, #2
   1fafe:	d110      	bne.n	1fb22 <nrf91_socket_offload_bind+0x56>
	nrf_out->sin6_port = ptr->sin6_port;
   1fb00:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1fb02:	2624      	movs	r6, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   1fb04:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin6_family = NRF_AF_INET6;
   1fb08:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1fb0a:	2210      	movs	r2, #16
   1fb0c:	3104      	adds	r1, #4
   1fb0e:	a805      	add	r0, sp, #20
	nrf_out->sin6_family = NRF_AF_INET6;
   1fb10:	9302      	str	r3, [sp, #8]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1fb12:	f88d 6004 	strb.w	r6, [sp, #4]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1fb16:	f7fe fd9c 	bl	1e652 <memcpy>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   1fb1a:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1fb1c:	4632      	mov	r2, r6
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   1fb1e:	9309      	str	r3, [sp, #36]	; 0x24
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1fb20:	e7e6      	b.n	1faf0 <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   1fb22:	f7ff fd26 	bl	1f572 <z_errno>
   1fb26:	2323      	movs	r3, #35	; 0x23
   1fb28:	6003      	str	r3, [r0, #0]
   1fb2a:	f04f 30ff 	mov.w	r0, #4294967295
   1fb2e:	e7e3      	b.n	1faf8 <nrf91_socket_offload_bind+0x2c>

0001fb30 <z_impl_gpio_pin_interrupt_configure>:
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   1fb30:	0413      	lsls	r3, r2, #16
{
   1fb32:	b430      	push	{r4, r5}
	const struct gpio_driver_api *api =
   1fb34:	6884      	ldr	r4, [r0, #8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   1fb36:	d507      	bpl.n	1fb48 <z_impl_gpio_pin_interrupt_configure+0x18>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   1fb38:	2301      	movs	r3, #1
   1fb3a:	68c5      	ldr	r5, [r0, #12]
   1fb3c:	408b      	lsls	r3, r1
   1fb3e:	682d      	ldr	r5, [r5, #0]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   1fb40:	422b      	tst	r3, r5
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   1fb42:	bf18      	it	ne
   1fb44:	f482 22c0 	eorne.w	r2, r2, #393216	; 0x60000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1fb48:	69a4      	ldr	r4, [r4, #24]
   1fb4a:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
   1fb4e:	46a4      	mov	ip, r4
}
   1fb50:	bc30      	pop	{r4, r5}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1fb52:	f402 32b0 	and.w	r2, r2, #90112	; 0x16000
   1fb56:	4760      	bx	ip

0001fb58 <gpio_pin_configure>:
{
   1fb58:	b538      	push	{r3, r4, r5, lr}
   1fb5a:	460c      	mov	r4, r1
	struct gpio_driver_data *data =
   1fb5c:	68c5      	ldr	r5, [r0, #12]
	return api->pin_configure(port, pin, flags);
   1fb5e:	6883      	ldr	r3, [r0, #8]
   1fb60:	681b      	ldr	r3, [r3, #0]
   1fb62:	4798      	blx	r3
	if (ret != 0) {
   1fb64:	b930      	cbnz	r0, 1fb74 <gpio_pin_configure+0x1c>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1fb66:	2201      	movs	r2, #1
   1fb68:	682b      	ldr	r3, [r5, #0]
   1fb6a:	fa02 f104 	lsl.w	r1, r2, r4
   1fb6e:	ea23 0301 	bic.w	r3, r3, r1
   1fb72:	602b      	str	r3, [r5, #0]
}
   1fb74:	bd38      	pop	{r3, r4, r5, pc}

0001fb76 <dk_set_leds_state>:
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   1fb76:	ea40 0301 	orr.w	r3, r0, r1
   1fb7a:	f033 030f 	bics.w	r3, r3, #15
   1fb7e:	d101      	bne.n	1fb84 <dk_set_leds_state+0xe>
   1fb80:	f7f2 b88c 	b.w	11c9c <dk_set_leds_state.part.0>
}
   1fb84:	f06f 0015 	mvn.w	r0, #21
   1fb88:	4770      	bx	lr

0001fb8a <z_errno>:
   1fb8a:	f7fc b88d 	b.w	1bca8 <z_impl_z_errno>

0001fb8e <z_impl_uart_irq_rx_enable>:
	if (api->irq_rx_enable) {
   1fb8e:	6883      	ldr	r3, [r0, #8]
   1fb90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1fb92:	b103      	cbz	r3, 1fb96 <z_impl_uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   1fb94:	4718      	bx	r3
}
   1fb96:	4770      	bx	lr

0001fb98 <response_handler>:
	write_uart_string(response);
   1fb98:	4608      	mov	r0, r1
   1fb9a:	f7f2 be77 	b.w	1288c <write_uart_string>

0001fb9e <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   1fb9e:	280d      	cmp	r0, #13
   1fba0:	d004      	beq.n	1fbac <is_lfcr+0xe>
   1fba2:	f1a0 030a 	sub.w	r3, r0, #10
   1fba6:	4258      	negs	r0, r3
   1fba8:	4158      	adcs	r0, r3
   1fbaa:	4770      	bx	lr
		return true;
   1fbac:	2001      	movs	r0, #1
}
   1fbae:	4770      	bx	lr

0001fbb0 <skip_command_prefix>:
{
   1fbb0:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   1fbb2:	6801      	ldr	r1, [r0, #0]
{
   1fbb4:	4602      	mov	r2, r0
	*cmd += sizeof("AT") - 1;
   1fbb6:	1c8b      	adds	r3, r1, #2
   1fbb8:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   1fbba:	788c      	ldrb	r4, [r1, #2]
   1fbbc:	4620      	mov	r0, r4
   1fbbe:	f7ff ffee 	bl	1fb9e <is_lfcr>
   1fbc2:	b910      	cbnz	r0, 1fbca <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1fbc4:	b10c      	cbz	r4, 1fbca <skip_command_prefix+0x1a>
	(*cmd)++;
   1fbc6:	3103      	adds	r1, #3
   1fbc8:	6011      	str	r1, [r2, #0]
}
   1fbca:	bd10      	pop	{r4, pc}

0001fbcc <is_valid_notification_char>:
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
}

static inline int toupper(int chr)
{
	return (int)((chr >= (int)'a' && chr <=
   1fbcc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1fbd0:	2b19      	cmp	r3, #25
   1fbd2:	bf98      	it	ls
   1fbd4:	3820      	subls	r0, #32
	if ((chr >= 'A') && (chr <= 'Z')) {
   1fbd6:	3841      	subs	r0, #65	; 0x41
   1fbd8:	b2c0      	uxtb	r0, r0
}
   1fbda:	2819      	cmp	r0, #25
   1fbdc:	bf8c      	ite	hi
   1fbde:	2000      	movhi	r0, #0
   1fbe0:	2001      	movls	r0, #1
   1fbe2:	4770      	bx	lr

0001fbe4 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   1fbe4:	b510      	push	{r4, lr}
   1fbe6:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   1fbe8:	f7fe fd01 	bl	1e5ee <strlen>
   1fbec:	2801      	cmp	r0, #1
   1fbee:	d91e      	bls.n	1fc2e <is_command+0x4a>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   1fbf0:	7823      	ldrb	r3, [r4, #0]
   1fbf2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1fbf6:	2a19      	cmp	r2, #25
   1fbf8:	bf98      	it	ls
   1fbfa:	3b20      	subls	r3, #32
   1fbfc:	2b41      	cmp	r3, #65	; 0x41
   1fbfe:	d116      	bne.n	1fc2e <is_command+0x4a>
   1fc00:	7863      	ldrb	r3, [r4, #1]
   1fc02:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1fc06:	2a19      	cmp	r2, #25
   1fc08:	bf98      	it	ls
   1fc0a:	3b20      	subls	r3, #32
   1fc0c:	2b54      	cmp	r3, #84	; 0x54
   1fc0e:	d10e      	bne.n	1fc2e <is_command+0x4a>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1fc10:	78a2      	ldrb	r2, [r4, #2]
   1fc12:	2a25      	cmp	r2, #37	; 0x25
   1fc14:	d00d      	beq.n	1fc32 <is_command+0x4e>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   1fc16:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   1fc1a:	2b23      	cmp	r3, #35	; 0x23
   1fc1c:	d009      	beq.n	1fc32 <is_command+0x4e>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   1fc1e:	4610      	mov	r0, r2
   1fc20:	f7ff ffbd 	bl	1fb9e <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   1fc24:	b910      	cbnz	r0, 1fc2c <is_command+0x48>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1fc26:	fab2 f082 	clz	r0, r2
   1fc2a:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   1fc2c:	bd10      	pop	{r4, pc}
		return false;
   1fc2e:	2000      	movs	r0, #0
   1fc30:	e7fc      	b.n	1fc2c <is_command+0x48>
		return true;
   1fc32:	2001      	movs	r0, #1
   1fc34:	e7fa      	b.n	1fc2c <is_command+0x48>

0001fc36 <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   1fc36:	6813      	ldr	r3, [r2, #0]
   1fc38:	f7f3 b930 	b.w	12e9c <at_parser_max_params_from_str>

0001fc3c <at_params_get>:
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");

	if (index >= list->param_count) {
   1fc3c:	6803      	ldr	r3, [r0, #0]
   1fc3e:	428b      	cmp	r3, r1
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   1fc40:	bf83      	ittte	hi
   1fc42:	230c      	movhi	r3, #12
   1fc44:	6840      	ldrhi	r0, [r0, #4]
   1fc46:	fb03 0001 	mlahi	r0, r3, r1, r0
		return NULL;
   1fc4a:	2000      	movls	r0, #0
}
   1fc4c:	4770      	bx	lr

0001fc4e <at_param_size>:
/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
	__ASSERT(param != NULL, "Parameter cannot be NULL.");

	if (param->type == AT_PARAM_TYPE_NUM_SHORT) {
   1fc4e:	7803      	ldrb	r3, [r0, #0]
   1fc50:	2b01      	cmp	r3, #1
   1fc52:	d006      	beq.n	1fc62 <at_param_size+0x14>
		return sizeof(uint16_t);
	} else if (param->type == AT_PARAM_TYPE_NUM_INT) {
   1fc54:	2b02      	cmp	r3, #2
   1fc56:	d006      	beq.n	1fc66 <at_param_size+0x18>
		return sizeof(uint32_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   1fc58:	3b03      	subs	r3, #3
   1fc5a:	2b01      	cmp	r3, #1
   1fc5c:	d805      	bhi.n	1fc6a <at_param_size+0x1c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   1fc5e:	6840      	ldr	r0, [r0, #4]
   1fc60:	4770      	bx	lr
		return sizeof(uint16_t);
   1fc62:	2002      	movs	r0, #2
   1fc64:	4770      	bx	lr
		return sizeof(uint32_t);
   1fc66:	2004      	movs	r0, #4
   1fc68:	4770      	bx	lr
	}

	return 0;
   1fc6a:	2000      	movs	r0, #0
}
   1fc6c:	4770      	bx	lr

0001fc6e <at_param_clear>:
{
   1fc6e:	b510      	push	{r4, lr}
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   1fc70:	7803      	ldrb	r3, [r0, #0]
{
   1fc72:	4604      	mov	r4, r0
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   1fc74:	3b03      	subs	r3, #3
   1fc76:	2b01      	cmp	r3, #1
   1fc78:	d802      	bhi.n	1fc80 <at_param_clear+0x12>
		k_free(param->value.str_val);
   1fc7a:	6880      	ldr	r0, [r0, #8]
   1fc7c:	f000 fd7b 	bl	20776 <k_free>
	param->value.int_val = 0;
   1fc80:	2300      	movs	r3, #0
   1fc82:	60a3      	str	r3, [r4, #8]
}
   1fc84:	bd10      	pop	{r4, pc}

0001fc86 <at_params_list_init>:

int at_params_list_init(struct at_param_list *list, size_t max_params_count)
{
   1fc86:	b538      	push	{r3, r4, r5, lr}
   1fc88:	460d      	mov	r5, r1
	if (list == NULL) {
   1fc8a:	4604      	mov	r4, r0
   1fc8c:	b140      	cbz	r0, 1fca0 <at_params_list_init+0x1a>
		return -EINVAL;
	}

	/* Array initialized with empty parameters. */
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   1fc8e:	210c      	movs	r1, #12
   1fc90:	4628      	mov	r0, r5
   1fc92:	f000 fd75 	bl	20780 <k_calloc>
   1fc96:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   1fc98:	b128      	cbz	r0, 1fca6 <at_params_list_init+0x20>
		return -ENOMEM;
	}

	list->param_count = max_params_count;
	return 0;
   1fc9a:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   1fc9c:	6025      	str	r5, [r4, #0]
}
   1fc9e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1fca0:	f06f 0015 	mvn.w	r0, #21
   1fca4:	e7fb      	b.n	1fc9e <at_params_list_init+0x18>
		return -ENOMEM;
   1fca6:	f06f 000b 	mvn.w	r0, #11
   1fcaa:	e7f8      	b.n	1fc9e <at_params_list_init+0x18>

0001fcac <at_params_list_clear>:

void at_params_list_clear(struct at_param_list *list)
{
   1fcac:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (list == NULL || list->params == NULL) {
   1fcae:	4604      	mov	r4, r0
   1fcb0:	b130      	cbz	r0, 1fcc0 <at_params_list_clear+0x14>
   1fcb2:	6843      	ldr	r3, [r0, #4]
   1fcb4:	b123      	cbz	r3, 1fcc0 <at_params_list_clear+0x14>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   1fcb6:	2500      	movs	r5, #0
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
   1fcb8:	260c      	movs	r6, #12
	for (size_t i = 0; i < list->param_count; ++i) {
   1fcba:	6823      	ldr	r3, [r4, #0]
   1fcbc:	429d      	cmp	r5, r3
   1fcbe:	d301      	bcc.n	1fcc4 <at_params_list_clear+0x18>
		at_param_init(&params[i]);
	}
}
   1fcc0:	b002      	add	sp, #8
   1fcc2:	bd70      	pop	{r4, r5, r6, pc}
		at_param_clear(&params[i]);
   1fcc4:	6860      	ldr	r0, [r4, #4]
   1fcc6:	fb06 0005 	mla	r0, r6, r5, r0
   1fcca:	9001      	str	r0, [sp, #4]
   1fccc:	f7ff ffcf 	bl	1fc6e <at_param_clear>
	memset(param, 0, sizeof(struct at_param));
   1fcd0:	220c      	movs	r2, #12
   1fcd2:	2100      	movs	r1, #0
   1fcd4:	9801      	ldr	r0, [sp, #4]
   1fcd6:	f7fe fce7 	bl	1e6a8 <memset>
	for (size_t i = 0; i < list->param_count; ++i) {
   1fcda:	3501      	adds	r5, #1
   1fcdc:	e7ed      	b.n	1fcba <at_params_list_clear+0xe>

0001fcde <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   1fcde:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   1fce0:	4604      	mov	r4, r0
   1fce2:	b148      	cbz	r0, 1fcf8 <at_params_list_free+0x1a>
   1fce4:	6843      	ldr	r3, [r0, #4]
   1fce6:	b13b      	cbz	r3, 1fcf8 <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   1fce8:	2500      	movs	r5, #0
	at_params_list_clear(list);
   1fcea:	f7ff ffdf 	bl	1fcac <at_params_list_clear>
	k_free(list->params);
   1fcee:	6860      	ldr	r0, [r4, #4]
	list->param_count = 0;
   1fcf0:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   1fcf2:	f000 fd40 	bl	20776 <k_free>
	list->params = NULL;
   1fcf6:	6065      	str	r5, [r4, #4]
}
   1fcf8:	bd38      	pop	{r3, r4, r5, pc}

0001fcfa <at_params_short_put>:

int at_params_short_put(const struct at_param_list *list, size_t index,
			uint16_t value)
{
   1fcfa:	b538      	push	{r3, r4, r5, lr}
   1fcfc:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   1fcfe:	b160      	cbz	r0, 1fd1a <at_params_short_put+0x20>
   1fd00:	6843      	ldr	r3, [r0, #4]
   1fd02:	b153      	cbz	r3, 1fd1a <at_params_short_put+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1fd04:	f7ff ff9a 	bl	1fc3c <at_params_get>

	if (param == NULL) {
   1fd08:	4604      	mov	r4, r0
   1fd0a:	b130      	cbz	r0, 1fd1a <at_params_short_put+0x20>
		return -EINVAL;
	}

	at_param_clear(param);
   1fd0c:	f7ff ffaf 	bl	1fc6e <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_SHORT;
   1fd10:	2301      	movs	r3, #1
	param->value.int_val = (uint32_t)(value & USHRT_MAX);
	return 0;
   1fd12:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   1fd14:	7023      	strb	r3, [r4, #0]
	param->value.int_val = (uint32_t)(value & USHRT_MAX);
   1fd16:	60a5      	str	r5, [r4, #8]
}
   1fd18:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1fd1a:	f06f 0015 	mvn.w	r0, #21
   1fd1e:	e7fb      	b.n	1fd18 <at_params_short_put+0x1e>

0001fd20 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   1fd20:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   1fd22:	b160      	cbz	r0, 1fd3e <at_params_empty_put+0x1e>
   1fd24:	6843      	ldr	r3, [r0, #4]
   1fd26:	b153      	cbz	r3, 1fd3e <at_params_empty_put+0x1e>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1fd28:	f7ff ff88 	bl	1fc3c <at_params_get>

	if (param == NULL) {
   1fd2c:	4604      	mov	r4, r0
   1fd2e:	b130      	cbz	r0, 1fd3e <at_params_empty_put+0x1e>
		return -EINVAL;
	}

	at_param_clear(param);
   1fd30:	f7ff ff9d 	bl	1fc6e <at_param_clear>

	param->type = AT_PARAM_TYPE_EMPTY;
   1fd34:	2305      	movs	r3, #5
	param->value.int_val = 0;
   1fd36:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   1fd38:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   1fd3a:	60a0      	str	r0, [r4, #8]

	return 0;
}
   1fd3c:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1fd3e:	f06f 0015 	mvn.w	r0, #21
   1fd42:	e7fb      	b.n	1fd3c <at_params_empty_put+0x1c>

0001fd44 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index,
		      uint32_t value)
{
   1fd44:	b538      	push	{r3, r4, r5, lr}
   1fd46:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   1fd48:	b160      	cbz	r0, 1fd64 <at_params_int_put+0x20>
   1fd4a:	6843      	ldr	r3, [r0, #4]
   1fd4c:	b153      	cbz	r3, 1fd64 <at_params_int_put+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1fd4e:	f7ff ff75 	bl	1fc3c <at_params_get>

	if (param == NULL) {
   1fd52:	4604      	mov	r4, r0
   1fd54:	b130      	cbz	r0, 1fd64 <at_params_int_put+0x20>
		return -EINVAL;
	}

	at_param_clear(param);
   1fd56:	f7ff ff8a 	bl	1fc6e <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_INT;
   1fd5a:	2302      	movs	r3, #2
	param->value.int_val = value;
	return 0;
   1fd5c:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_INT;
   1fd5e:	7023      	strb	r3, [r4, #0]
	param->value.int_val = value;
   1fd60:	60a5      	str	r5, [r4, #8]
}
   1fd62:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1fd64:	f06f 0015 	mvn.w	r0, #21
   1fd68:	e7fb      	b.n	1fd62 <at_params_int_put+0x1e>

0001fd6a <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   1fd6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fd6c:	4617      	mov	r7, r2
   1fd6e:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   1fd70:	b1c0      	cbz	r0, 1fda4 <at_params_string_put+0x3a>
   1fd72:	6843      	ldr	r3, [r0, #4]
   1fd74:	b1b3      	cbz	r3, 1fda4 <at_params_string_put+0x3a>
   1fd76:	b1aa      	cbz	r2, 1fda4 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1fd78:	f7ff ff60 	bl	1fc3c <at_params_get>

	if (param == NULL) {
   1fd7c:	4604      	mov	r4, r0
   1fd7e:	b188      	cbz	r0, 1fda4 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	char *param_value = (char *)k_malloc(str_len + 1);
   1fd80:	1c68      	adds	r0, r5, #1
   1fd82:	f7fd fa55 	bl	1d230 <k_malloc>

	if (param_value == NULL) {
   1fd86:	4606      	mov	r6, r0
   1fd88:	b178      	cbz	r0, 1fdaa <__kernel_ram_size+0x2>
		return -ENOMEM;
	}

	memcpy(param_value, str, str_len);
   1fd8a:	462a      	mov	r2, r5
   1fd8c:	4639      	mov	r1, r7
   1fd8e:	f7fe fc60 	bl	1e652 <memcpy>

	at_param_clear(param);
   1fd92:	4620      	mov	r0, r4
   1fd94:	f7ff ff6b 	bl	1fc6e <at_param_clear>
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
   1fd98:	2303      	movs	r3, #3
	param->value.str_val = param_value;

	return 0;
   1fd9a:	2000      	movs	r0, #0
	param->size = str_len;
   1fd9c:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   1fd9e:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   1fda0:	60a6      	str	r6, [r4, #8]
}
   1fda2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   1fda4:	f06f 0015 	mvn.w	r0, #21
   1fda8:	e7fb      	b.n	1fda2 <at_params_string_put+0x38>
		return -ENOMEM;
   1fdaa:	f06f 000b 	mvn.w	r0, #11
   1fdae:	e7f8      	b.n	1fda2 <at_params_string_put+0x38>

0001fdb0 <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const uint32_t *array, size_t array_len)
{
   1fdb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fdb2:	4617      	mov	r7, r2
   1fdb4:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   1fdb6:	b1c0      	cbz	r0, 1fdea <at_params_array_put+0x3a>
   1fdb8:	6843      	ldr	r3, [r0, #4]
   1fdba:	b1b3      	cbz	r3, 1fdea <at_params_array_put+0x3a>
   1fdbc:	b1aa      	cbz	r2, 1fdea <at_params_array_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1fdbe:	f7ff ff3d 	bl	1fc3c <at_params_get>

	if (param == NULL) {
   1fdc2:	4604      	mov	r4, r0
   1fdc4:	b188      	cbz	r0, 1fdea <at_params_array_put+0x3a>
		return -EINVAL;
	}

	uint32_t *param_value = (uint32_t *)k_malloc(array_len);
   1fdc6:	4628      	mov	r0, r5
   1fdc8:	f7fd fa32 	bl	1d230 <k_malloc>

	if (param_value == NULL) {
   1fdcc:	4606      	mov	r6, r0
   1fdce:	b178      	cbz	r0, 1fdf0 <at_params_array_put+0x40>
		return -ENOMEM;
	}

	memcpy(param_value, array, array_len);
   1fdd0:	462a      	mov	r2, r5
   1fdd2:	4639      	mov	r1, r7
   1fdd4:	f7fe fc3d 	bl	1e652 <memcpy>

	at_param_clear(param);
   1fdd8:	4620      	mov	r0, r4
   1fdda:	f7ff ff48 	bl	1fc6e <at_param_clear>
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
   1fdde:	2304      	movs	r3, #4
	param->value.array_val = param_value;

	return 0;
   1fde0:	2000      	movs	r0, #0
	param->size = array_len;
   1fde2:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   1fde4:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   1fde6:	60a6      	str	r6, [r4, #8]
}
   1fde8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   1fdea:	f06f 0015 	mvn.w	r0, #21
   1fdee:	e7fb      	b.n	1fde8 <at_params_array_put+0x38>
		return -ENOMEM;
   1fdf0:	f06f 000b 	mvn.w	r0, #11
   1fdf4:	e7f8      	b.n	1fde8 <at_params_array_put+0x38>

0001fdf6 <at_params_int_get>:
	return 0;
}

int at_params_int_get(const struct at_param_list *list, size_t index,
		      uint32_t *value)
{
   1fdf6:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   1fdf8:	b168      	cbz	r0, 1fe16 <at_params_int_get+0x20>
   1fdfa:	6843      	ldr	r3, [r0, #4]
   1fdfc:	b15b      	cbz	r3, 1fe16 <at_params_int_get+0x20>
   1fdfe:	b152      	cbz	r2, 1fe16 <at_params_int_get+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1fe00:	f7ff ff1c 	bl	1fc3c <at_params_get>

	if (param == NULL) {
   1fe04:	b138      	cbz	r0, 1fe16 <at_params_int_get+0x20>
		return -EINVAL;
	}

	if ((param->type != AT_PARAM_TYPE_NUM_INT) &&
   1fe06:	7803      	ldrb	r3, [r0, #0]
   1fe08:	3b01      	subs	r3, #1
   1fe0a:	2b01      	cmp	r3, #1
   1fe0c:	d803      	bhi.n	1fe16 <at_params_int_get+0x20>
	    (param->type != AT_PARAM_TYPE_NUM_SHORT)) {
		return -EINVAL;
	}

	*value = param->value.int_val;
   1fe0e:	6883      	ldr	r3, [r0, #8]
	return 0;
   1fe10:	2000      	movs	r0, #0
	*value = param->value.int_val;
   1fe12:	6013      	str	r3, [r2, #0]
}
   1fe14:	bd08      	pop	{r3, pc}
		return -EINVAL;
   1fe16:	f06f 0015 	mvn.w	r0, #21
   1fe1a:	e7fb      	b.n	1fe14 <at_params_int_get+0x1e>

0001fe1c <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   1fe1c:	b570      	push	{r4, r5, r6, lr}
   1fe1e:	4616      	mov	r6, r2
   1fe20:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   1fe22:	b1c0      	cbz	r0, 1fe56 <at_params_string_get+0x3a>
   1fe24:	6843      	ldr	r3, [r0, #4]
   1fe26:	b1b3      	cbz	r3, 1fe56 <at_params_string_get+0x3a>
   1fe28:	b1aa      	cbz	r2, 1fe56 <at_params_string_get+0x3a>
	    value == NULL || len == NULL) {
   1fe2a:	b1a4      	cbz	r4, 1fe56 <at_params_string_get+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1fe2c:	f7ff ff06 	bl	1fc3c <at_params_get>

	if (param == NULL) {
   1fe30:	4601      	mov	r1, r0
   1fe32:	b180      	cbz	r0, 1fe56 <at_params_string_get+0x3a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_STRING) {
   1fe34:	7803      	ldrb	r3, [r0, #0]
   1fe36:	2b03      	cmp	r3, #3
   1fe38:	d10d      	bne.n	1fe56 <at_params_string_get+0x3a>
		return -EINVAL;
	}

	size_t param_len = at_param_size(param);
   1fe3a:	f7ff ff08 	bl	1fc4e <at_param_size>

	if (*len < param_len) {
   1fe3e:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   1fe40:	4605      	mov	r5, r0
	if (*len < param_len) {
   1fe42:	4283      	cmp	r3, r0
   1fe44:	d30a      	bcc.n	1fe5c <at_params_string_get+0x40>
		return -ENOMEM;
	}

	memcpy(value, param->value.str_val, param_len);
   1fe46:	4602      	mov	r2, r0
   1fe48:	6889      	ldr	r1, [r1, #8]
   1fe4a:	4630      	mov	r0, r6
   1fe4c:	f7fe fc01 	bl	1e652 <memcpy>
	*len = param_len;

	return 0;
   1fe50:	2000      	movs	r0, #0
	*len = param_len;
   1fe52:	6025      	str	r5, [r4, #0]
}
   1fe54:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1fe56:	f06f 0015 	mvn.w	r0, #21
   1fe5a:	e7fb      	b.n	1fe54 <at_params_string_get+0x38>
		return -ENOMEM;
   1fe5c:	f06f 000b 	mvn.w	r0, #11
   1fe60:	e7f8      	b.n	1fe54 <at_params_string_get+0x38>

0001fe62 <response_is_valid>:
{
   1fe62:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1fe64:	4605      	mov	r5, r0
	if ((response_len < strlen(check)) ||
   1fe66:	4610      	mov	r0, r2
{
   1fe68:	460c      	mov	r4, r1
	if ((response_len < strlen(check)) ||
   1fe6a:	9201      	str	r2, [sp, #4]
   1fe6c:	f7fe fbbf 	bl	1e5ee <strlen>
   1fe70:	42a0      	cmp	r0, r4
   1fe72:	d809      	bhi.n	1fe88 <response_is_valid+0x26>
	    (memcmp(response, check, response_len) != 0)) {
   1fe74:	4622      	mov	r2, r4
   1fe76:	4628      	mov	r0, r5
   1fe78:	9901      	ldr	r1, [sp, #4]
   1fe7a:	f7fe fbda 	bl	1e632 <memcmp>
	if ((response_len < strlen(check)) ||
   1fe7e:	fab0 f080 	clz	r0, r0
   1fe82:	0940      	lsrs	r0, r0, #5
}
   1fe84:	b003      	add	sp, #12
   1fe86:	bd30      	pop	{r4, r5, pc}
		return false;
   1fe88:	2000      	movs	r0, #0
   1fe8a:	e7fb      	b.n	1fe84 <response_is_valid+0x22>

0001fe8c <lte_lc_init_and_connect>:
{
   1fe8c:	b508      	push	{r3, lr}
	ret = w_lte_lc_init();
   1fe8e:	f7f3 fad1 	bl	13434 <w_lte_lc_init>
	if (ret) {
   1fe92:	b920      	cbnz	r0, 1fe9e <lte_lc_init_and_connect+0x12>
}
   1fe94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return w_lte_lc_connect(true);
   1fe98:	2001      	movs	r0, #1
   1fe9a:	f7f3 b991 	b.w	131c0 <w_lte_lc_connect>
}
   1fe9e:	bd08      	pop	{r3, pc}

0001fea0 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1fea0:	4700      	bx	r0

0001fea2 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1fea2:	f000 ba3b 	b.w	2031c <z_impl_k_busy_wait>

0001fea6 <nrfx_clock_enable>:
{
   1fea6:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1fea8:	2005      	movs	r0, #5
   1feaa:	f7ef fe51 	bl	fb50 <arch_irq_is_enabled>
   1feae:	b920      	cbnz	r0, 1feba <nrfx_clock_enable+0x14>
}
   1feb0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1feb4:	2005      	movs	r0, #5
   1feb6:	f7ef be3b 	b.w	fb30 <arch_irq_enable>
   1feba:	bd08      	pop	{r3, pc}

0001febc <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   1febc:	f7fe ba02 	b.w	1e2c4 <z_clock_idle_exit>

0001fec0 <k_heap_init>:
{
   1fec0:	b410      	push	{r4}
   1fec2:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1fec6:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1feca:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   1fece:	f7fd bce3 	b.w	1d898 <sys_heap_init>

0001fed2 <k_heap_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   1fed2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fed6:	4605      	mov	r5, r0
   1fed8:	b085      	sub	sp, #20
   1feda:	460f      	mov	r7, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   1fedc:	4610      	mov	r0, r2
   1fede:	4619      	mov	r1, r3
   1fee0:	f000 face 	bl	20480 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1fee4:	f105 0b14 	add.w	fp, r5, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   1fee8:	9002      	str	r0, [sp, #8]
   1feea:	468a      	mov	sl, r1
	__asm__ volatile(
   1feec:	f04f 0320 	mov.w	r3, #32
   1fef0:	f3ef 8411 	mrs	r4, BASEPRI
   1fef4:	f383 8811 	msr	BASEPRI, r3
   1fef8:	f3bf 8f6f 	isb	sy
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1fefc:	f105 060c 	add.w	r6, r5, #12
		ret = sys_heap_alloc(&h->heap, bytes);
   1ff00:	4639      	mov	r1, r7
   1ff02:	4628      	mov	r0, r5
   1ff04:	f7fd fc94 	bl	1d830 <sys_heap_alloc>
   1ff08:	9003      	str	r0, [sp, #12]
		now = z_tick_get();
   1ff0a:	f7fd f86d 	bl	1cfe8 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   1ff0e:	9b03      	ldr	r3, [sp, #12]
   1ff10:	b13b      	cbz	r3, 1ff22 <k_heap_alloc+0x50>
	__asm__ volatile(
   1ff12:	f384 8811 	msr	BASEPRI, r4
   1ff16:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1ff1a:	4618      	mov	r0, r3
   1ff1c:	b005      	add	sp, #20
   1ff1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   1ff22:	9a02      	ldr	r2, [sp, #8]
   1ff24:	ebb2 0800 	subs.w	r8, r2, r0
   1ff28:	eb6a 0901 	sbc.w	r9, sl, r1
   1ff2c:	f1b8 0f01 	cmp.w	r8, #1
   1ff30:	f179 0200 	sbcs.w	r2, r9, #0
   1ff34:	dbed      	blt.n	1ff12 <k_heap_alloc+0x40>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1ff36:	4632      	mov	r2, r6
   1ff38:	4621      	mov	r1, r4
   1ff3a:	4658      	mov	r0, fp
   1ff3c:	e9cd 8900 	strd	r8, r9, [sp]
   1ff40:	f7fc fc8a 	bl	1c858 <z_pend_curr>
	__asm__ volatile(
   1ff44:	f04f 0320 	mov.w	r3, #32
   1ff48:	f3ef 8411 	mrs	r4, BASEPRI
   1ff4c:	f383 8811 	msr	BASEPRI, r3
   1ff50:	f3bf 8f6f 	isb	sy
   1ff54:	e7d4      	b.n	1ff00 <k_heap_alloc+0x2e>

0001ff56 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   1ff56:	b538      	push	{r3, r4, r5, lr}
   1ff58:	4604      	mov	r4, r0
   1ff5a:	f04f 0320 	mov.w	r3, #32
   1ff5e:	f3ef 8511 	mrs	r5, BASEPRI
   1ff62:	f383 8811 	msr	BASEPRI, r3
   1ff66:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   1ff6a:	f7fd fc09 	bl	1d780 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   1ff6e:	f104 000c 	add.w	r0, r4, #12
   1ff72:	f000 f9ad 	bl	202d0 <z_unpend_all>
   1ff76:	b130      	cbz	r0, 1ff86 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   1ff78:	4629      	mov	r1, r5
   1ff7a:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1ff7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   1ff82:	f7fc ba55 	b.w	1c430 <z_reschedule>
	__asm__ volatile(
   1ff86:	f385 8811 	msr	BASEPRI, r5
   1ff8a:	f3bf 8f6f 	isb	sy
}
   1ff8e:	bd38      	pop	{r3, r4, r5, pc}

0001ff90 <k_mem_pool_alloc>:
 * backend.
 */

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, k_timeout_t timeout)
{
   1ff90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ff92:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   1ff96:	4614      	mov	r4, r2
	block->id.heap = p->heap;
   1ff98:	6800      	ldr	r0, [r0, #0]
{
   1ff9a:	460d      	mov	r5, r1
	block->id.heap = p->heap;
   1ff9c:	6048      	str	r0, [r1, #4]
	block->data = k_heap_alloc(p->heap, size, timeout);
   1ff9e:	4632      	mov	r2, r6
   1ffa0:	463b      	mov	r3, r7
   1ffa2:	4621      	mov	r1, r4
   1ffa4:	f7ff ff95 	bl	1fed2 <k_heap_alloc>
   1ffa8:	6028      	str	r0, [r5, #0]

	/* The legacy API returns -EAGAIN on timeout expiration, but
	 * -ENOMEM if the timeout was K_NO_WAIT. Don't ask.
	 */
	if (size != 0 && block->data == NULL) {
   1ffaa:	b144      	cbz	r4, 1ffbe <k_mem_pool_alloc+0x2e>
   1ffac:	b938      	cbnz	r0, 1ffbe <k_mem_pool_alloc+0x2e>
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
   1ffae:	ea56 0307 	orrs.w	r3, r6, r7
   1ffb2:	bf0c      	ite	eq
   1ffb4:	f06f 000b 	mvneq.w	r0, #11
   1ffb8:	f06f 000a 	mvnne.w	r0, #10
	} else {
		return 0;
	}
}
   1ffbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   1ffbe:	2000      	movs	r0, #0
   1ffc0:	e7fc      	b.n	1ffbc <k_mem_pool_alloc+0x2c>

0001ffc2 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
	k_heap_free(id->heap, id->data);
   1ffc2:	e9d0 1000 	ldrd	r1, r0, [r0]
   1ffc6:	f7ff bfc6 	b.w	1ff56 <k_heap_free>

0001ffca <k_mem_slab_init>:
{
   1ffca:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   1ffcc:	2400      	movs	r4, #0
   1ffce:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1ffd0:	ea41 0402 	orr.w	r4, r1, r2
   1ffd4:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   1ffd8:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   1ffdc:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1ffde:	d10c      	bne.n	1fffa <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   1ffe0:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1ffe2:	42a3      	cmp	r3, r4
   1ffe4:	d103      	bne.n	1ffee <k_mem_slab_init+0x24>
   1ffe6:	e9c0 0000 	strd	r0, r0, [r0]
}
   1ffea:	2000      	movs	r0, #0
}
   1ffec:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   1ffee:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1fff0:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   1fff2:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   1fff4:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   1fff6:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   1fff8:	e7f3      	b.n	1ffe2 <k_mem_slab_init+0x18>
		return -EINVAL;
   1fffa:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1fffe:	e7f5      	b.n	1ffec <k_mem_slab_init+0x22>

00020000 <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   20000:	2300      	movs	r3, #0
   20002:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
   20006:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   2000a:	4618      	mov	r0, r3
   2000c:	4770      	bx	lr

0002000e <queue_insert>:
{
   2000e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20012:	4604      	mov	r4, r0
   20014:	460d      	mov	r5, r1
   20016:	4690      	mov	r8, r2
   20018:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2001a:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   2001e:	f04f 0320 	mov.w	r3, #32
   20022:	f3ef 8711 	mrs	r7, BASEPRI
   20026:	f383 8811 	msr	BASEPRI, r3
   2002a:	f3bf 8f6f 	isb	sy
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   2002e:	4630      	mov	r0, r6
   20030:	f000 f929 	bl	20286 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   20034:	b158      	cbz	r0, 2004e <queue_insert+0x40>
   20036:	2400      	movs	r4, #0
   20038:	f8c0 8014 	str.w	r8, [r0, #20]
   2003c:	67c4      	str	r4, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   2003e:	f000 f8ca 	bl	201d6 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   20042:	4630      	mov	r0, r6
   20044:	4639      	mov	r1, r7
   20046:	f7fc f9f3 	bl	1c430 <z_reschedule>
	return 0;
   2004a:	2000      	movs	r0, #0
   2004c:	e00c      	b.n	20068 <queue_insert+0x5a>
	if (alloc) {
   2004e:	f1b9 0f00 	cmp.w	r9, #0
   20052:	d01b      	beq.n	2008c <queue_insert+0x7e>
		anode = z_thread_malloc(sizeof(*anode));
   20054:	2008      	movs	r0, #8
   20056:	f7fd f8f1 	bl	1d23c <z_thread_malloc>
		if (anode == NULL) {
   2005a:	b938      	cbnz	r0, 2006c <queue_insert+0x5e>
	__asm__ volatile(
   2005c:	f387 8811 	msr	BASEPRI, r7
   20060:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   20064:	f06f 000b 	mvn.w	r0, #11
}
   20068:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   2006c:	2301      	movs	r3, #1
		anode->data = data;
   2006e:	f8c0 8004 	str.w	r8, [r0, #4]
   20072:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   20074:	6803      	ldr	r3, [r0, #0]
   20076:	f003 0203 	and.w	r2, r3, #3
   2007a:	b95d      	cbnz	r5, 20094 <queue_insert+0x86>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2007c:	6823      	ldr	r3, [r4, #0]
   2007e:	4313      	orrs	r3, r2
   20080:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   20082:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   20084:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   20086:	b973      	cbnz	r3, 200a6 <queue_insert+0x98>
	list->tail = node;
   20088:	6060      	str	r0, [r4, #4]
}
   2008a:	e00c      	b.n	200a6 <queue_insert+0x98>
}
   2008c:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   2008e:	f8c8 9000 	str.w	r9, [r8]
}
   20092:	e7ef      	b.n	20074 <queue_insert+0x66>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20094:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   20096:	f033 0303 	bics.w	r3, r3, #3
   2009a:	d110      	bne.n	200be <queue_insert+0xb0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2009c:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   2009e:	6862      	ldr	r2, [r4, #4]
   200a0:	b93a      	cbnz	r2, 200b2 <queue_insert+0xa4>
	list->head = node;
   200a2:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   200a6:	2104      	movs	r1, #4
   200a8:	f104 0010 	add.w	r0, r4, #16
   200ac:	f000 fb3d 	bl	2072a <z_handle_obj_poll_events>
   200b0:	e7c7      	b.n	20042 <queue_insert+0x34>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   200b2:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   200b4:	f003 0303 	and.w	r3, r3, #3
   200b8:	4303      	orrs	r3, r0
   200ba:	6013      	str	r3, [r2, #0]
   200bc:	e7e4      	b.n	20088 <queue_insert+0x7a>
   200be:	4313      	orrs	r3, r2
   200c0:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   200c2:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   200c4:	f003 0303 	and.w	r3, r3, #3
   200c8:	4303      	orrs	r3, r0
   200ca:	602b      	str	r3, [r5, #0]
}
   200cc:	e7eb      	b.n	200a6 <queue_insert+0x98>

000200ce <z_queue_node_peek>:
{
   200ce:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   200d0:	4604      	mov	r4, r0
   200d2:	b130      	cbz	r0, 200e2 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   200d4:	6802      	ldr	r2, [r0, #0]
   200d6:	0793      	lsls	r3, r2, #30
   200d8:	d003      	beq.n	200e2 <z_queue_node_peek+0x14>
		ret = anode->data;
   200da:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   200dc:	b109      	cbz	r1, 200e2 <z_queue_node_peek+0x14>
			k_free(anode);
   200de:	f000 fb4a 	bl	20776 <k_free>
}
   200e2:	4620      	mov	r0, r4
   200e4:	bd10      	pop	{r4, pc}

000200e6 <z_impl_k_queue_init>:
	list->head = NULL;
   200e6:	2300      	movs	r3, #0
	list->tail = NULL;
   200e8:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   200ec:	f100 0308 	add.w	r3, r0, #8
   200f0:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   200f4:	f100 0310 	add.w	r3, r0, #16
   200f8:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   200fc:	4770      	bx	lr

000200fe <k_queue_append>:
{
   200fe:	460a      	mov	r2, r1
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   20100:	2300      	movs	r3, #0
   20102:	6841      	ldr	r1, [r0, #4]
   20104:	f7ff bf83 	b.w	2000e <queue_insert>

00020108 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   20108:	f990 000e 	ldrsb.w	r0, [r0, #14]
   2010c:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   20110:	4298      	cmp	r0, r3
   20112:	bfac      	ite	ge
   20114:	2000      	movge	r0, #0
   20116:	2001      	movlt	r0, #1
   20118:	4770      	bx	lr

0002011a <z_find_first_thread_to_unpend>:
{
   2011a:	b510      	push	{r4, lr}
	__asm__ volatile(
   2011c:	f04f 0320 	mov.w	r3, #32
   20120:	f3ef 8411 	mrs	r4, BASEPRI
   20124:	f383 8811 	msr	BASEPRI, r3
   20128:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   2012c:	f000 f84d 	bl	201ca <z_priq_dumb_best>
	__asm__ volatile(
   20130:	f384 8811 	msr	BASEPRI, r4
   20134:	f3bf 8f6f 	isb	sy
}
   20138:	bd10      	pop	{r4, pc}

0002013a <z_unpend_thread_no_timeout>:
{
   2013a:	b510      	push	{r4, lr}
	__asm__ volatile(
   2013c:	f04f 0320 	mov.w	r3, #32
   20140:	f3ef 8411 	mrs	r4, BASEPRI
   20144:	f383 8811 	msr	BASEPRI, r3
   20148:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2014c:	f000 f81b 	bl	20186 <unpend_thread_no_timeout>
	__asm__ volatile(
   20150:	f384 8811 	msr	BASEPRI, r4
   20154:	f3bf 8f6f 	isb	sy
}
   20158:	bd10      	pop	{r4, pc}

0002015a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2015a:	4603      	mov	r3, r0
   2015c:	b920      	cbnz	r0, 20168 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2015e:	f3ef 8205 	mrs	r2, IPSR
   20162:	b90a      	cbnz	r2, 20168 <z_reschedule_irqlock+0xe>
   20164:	f7ef bc62 	b.w	fa2c <arch_swap>
   20168:	f383 8811 	msr	BASEPRI, r3
   2016c:	f3bf 8f6f 	isb	sy
}
   20170:	4770      	bx	lr

00020172 <z_reschedule_unlocked>:
	__asm__ volatile(
   20172:	f04f 0320 	mov.w	r3, #32
   20176:	f3ef 8011 	mrs	r0, BASEPRI
   2017a:	f383 8811 	msr	BASEPRI, r3
   2017e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   20182:	f7ff bfea 	b.w	2015a <z_reschedule_irqlock>

00020186 <unpend_thread_no_timeout>:
{
   20186:	4601      	mov	r1, r0
   20188:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2018a:	6880      	ldr	r0, [r0, #8]
   2018c:	f7fc f976 	bl	1c47c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   20190:	7b4b      	ldrb	r3, [r1, #13]
   20192:	f023 0302 	bic.w	r3, r3, #2
   20196:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
   20198:	2300      	movs	r3, #0
   2019a:	608b      	str	r3, [r1, #8]
}
   2019c:	bd08      	pop	{r3, pc}

0002019e <z_unpend_thread>:
{
   2019e:	b538      	push	{r3, r4, r5, lr}
   201a0:	4604      	mov	r4, r0
   201a2:	f04f 0320 	mov.w	r3, #32
   201a6:	f3ef 8511 	mrs	r5, BASEPRI
   201aa:	f383 8811 	msr	BASEPRI, r3
   201ae:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   201b2:	f7ff ffe8 	bl	20186 <unpend_thread_no_timeout>
	__asm__ volatile(
   201b6:	f385 8811 	msr	BASEPRI, r5
   201ba:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   201be:	f104 0018 	add.w	r0, r4, #24
}
   201c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   201c6:	f000 b914 	b.w	203f2 <z_abort_timeout>

000201ca <z_priq_dumb_best>:
	return list->head == list;
   201ca:	6803      	ldr	r3, [r0, #0]
}
   201cc:	4298      	cmp	r0, r3
   201ce:	bf14      	ite	ne
   201d0:	4618      	movne	r0, r3
   201d2:	2000      	moveq	r0, #0
   201d4:	4770      	bx	lr

000201d6 <z_ready_thread>:
{
   201d6:	b510      	push	{r4, lr}
	__asm__ volatile(
   201d8:	f04f 0320 	mov.w	r3, #32
   201dc:	f3ef 8411 	mrs	r4, BASEPRI
   201e0:	f383 8811 	msr	BASEPRI, r3
   201e4:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   201e8:	f7fc f99e 	bl	1c528 <ready_thread>
	__asm__ volatile(
   201ec:	f384 8811 	msr	BASEPRI, r4
   201f0:	f3bf 8f6f 	isb	sy
}
   201f4:	bd10      	pop	{r4, pc}

000201f6 <z_thread_timeout>:
{
   201f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   201f8:	4604      	mov	r4, r0
	__asm__ volatile(
   201fa:	f04f 0320 	mov.w	r3, #32
   201fe:	f3ef 8511 	mrs	r5, BASEPRI
   20202:	f383 8811 	msr	BASEPRI, r3
   20206:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   2020a:	f854 3c10 	ldr.w	r3, [r4, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   2020e:	3818      	subs	r0, #24
		if (thread->base.pended_on != NULL) {
   20210:	b11b      	cbz	r3, 2021a <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
   20212:	9001      	str	r0, [sp, #4]
   20214:	f7ff ffb7 	bl	20186 <unpend_thread_no_timeout>
   20218:	9801      	ldr	r0, [sp, #4]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2021a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   2021e:	f023 0314 	bic.w	r3, r3, #20
   20222:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
   20226:	f7fc f97f 	bl	1c528 <ready_thread>
	__asm__ volatile(
   2022a:	f385 8811 	msr	BASEPRI, r5
   2022e:	f3bf 8f6f 	isb	sy
}
   20232:	b003      	add	sp, #12
   20234:	bd30      	pop	{r4, r5, pc}

00020236 <add_to_waitq_locked>:
{
   20236:	b538      	push	{r3, r4, r5, lr}
   20238:	4604      	mov	r4, r0
   2023a:	460d      	mov	r5, r1
	unready_thread(thread);
   2023c:	f7fc facc 	bl	1c7d8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   20240:	7b63      	ldrb	r3, [r4, #13]
   20242:	f043 0302 	orr.w	r3, r3, #2
   20246:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   20248:	b17d      	cbz	r5, 2026a <add_to_waitq_locked+0x34>
   2024a:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   2024c:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2024e:	429d      	cmp	r5, r3
   20250:	d012      	beq.n	20278 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20252:	b18b      	cbz	r3, 20278 <add_to_waitq_locked+0x42>
	if (thread_1->base.prio < thread_2->base.prio) {
   20254:	f994 200e 	ldrsb.w	r2, [r4, #14]
   20258:	f993 100e 	ldrsb.w	r1, [r3, #14]
   2025c:	4291      	cmp	r1, r2
   2025e:	dd05      	ble.n	2026c <add_to_waitq_locked+0x36>
	node->prev = successor->prev;
   20260:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   20262:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   20266:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   20268:	605c      	str	r4, [r3, #4]
}
   2026a:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   2026c:	6869      	ldr	r1, [r5, #4]
   2026e:	428b      	cmp	r3, r1
   20270:	d002      	beq.n	20278 <add_to_waitq_locked+0x42>
   20272:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20274:	2b00      	cmp	r3, #0
   20276:	d1ef      	bne.n	20258 <add_to_waitq_locked+0x22>
	node->prev = list->tail;
   20278:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   2027a:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   2027c:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   2027e:	686b      	ldr	r3, [r5, #4]
   20280:	601c      	str	r4, [r3, #0]
	list->tail = node;
   20282:	606c      	str	r4, [r5, #4]
}
   20284:	e7f1      	b.n	2026a <add_to_waitq_locked+0x34>

00020286 <z_unpend_first_thread>:
{
   20286:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   20288:	f04f 0320 	mov.w	r3, #32
   2028c:	f3ef 8211 	mrs	r2, BASEPRI
   20290:	f383 8811 	msr	BASEPRI, r3
   20294:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   20298:	f7ff ff97 	bl	201ca <z_priq_dumb_best>
   2029c:	4604      	mov	r4, r0
	__asm__ volatile(
   2029e:	f382 8811 	msr	BASEPRI, r2
   202a2:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   202a6:	b188      	cbz	r0, 202cc <z_unpend_first_thread+0x46>
	__asm__ volatile(
   202a8:	f04f 0320 	mov.w	r3, #32
   202ac:	f3ef 8511 	mrs	r5, BASEPRI
   202b0:	f383 8811 	msr	BASEPRI, r3
   202b4:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   202b8:	f7ff ff65 	bl	20186 <unpend_thread_no_timeout>
	__asm__ volatile(
   202bc:	f385 8811 	msr	BASEPRI, r5
   202c0:	f3bf 8f6f 	isb	sy
   202c4:	f104 0018 	add.w	r0, r4, #24
   202c8:	f000 f893 	bl	203f2 <z_abort_timeout>
}
   202cc:	4620      	mov	r0, r4
   202ce:	bd38      	pop	{r3, r4, r5, pc}

000202d0 <z_unpend_all>:
{
   202d0:	b538      	push	{r3, r4, r5, lr}
   202d2:	4605      	mov	r5, r0
	int need_sched = 0;
   202d4:	2000      	movs	r0, #0
	return list->head == list;
   202d6:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   202d8:	42a5      	cmp	r5, r4
   202da:	d000      	beq.n	202de <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   202dc:	b904      	cbnz	r4, 202e0 <z_unpend_all+0x10>
}
   202de:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   202e0:	4620      	mov	r0, r4
   202e2:	f7ff ff5c 	bl	2019e <z_unpend_thread>
		z_ready_thread(thread);
   202e6:	4620      	mov	r0, r4
   202e8:	f7ff ff75 	bl	201d6 <z_ready_thread>
		need_sched = 1;
   202ec:	2001      	movs	r0, #1
   202ee:	e7f2      	b.n	202d6 <z_unpend_all+0x6>

000202f0 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   202f0:	b15a      	cbz	r2, 2030a <z_impl_k_sem_init+0x1a>
   202f2:	428a      	cmp	r2, r1
   202f4:	d309      	bcc.n	2030a <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   202f6:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   202fa:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   202fe:	e9c0 0000 	strd	r0, r0, [r0]
   20302:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   20306:	2000      	movs	r0, #0
   20308:	4770      	bx	lr
		return -EINVAL;
   2030a:	f06f 0015 	mvn.w	r0, #21
}
   2030e:	4770      	bx	lr

00020310 <k_is_in_isr>:
   20310:	f3ef 8005 	mrs	r0, IPSR
}
   20314:	3800      	subs	r0, #0
   20316:	bf18      	it	ne
   20318:	2001      	movne	r0, #1
   2031a:	4770      	bx	lr

0002031c <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   2031c:	f7ee ba82 	b.w	e824 <arch_busy_wait>

00020320 <z_impl_k_thread_name_set>:
}
   20320:	f06f 0046 	mvn.w	r0, #70	; 0x46
   20324:	4770      	bx	lr

00020326 <k_thread_name_get>:
}
   20326:	2000      	movs	r0, #0
   20328:	4770      	bx	lr

0002032a <k_work_submit_to_queue>:
{
   2032a:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2032c:	f101 0308 	add.w	r3, r1, #8
   20330:	e8d3 2fef 	ldaex	r2, [r3]
   20334:	f042 0c01 	orr.w	ip, r2, #1
   20338:	e8c3 cfee 	stlex	lr, ip, [r3]
   2033c:	f1be 0f00 	cmp.w	lr, #0
   20340:	d1f6      	bne.n	20330 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   20342:	07d3      	lsls	r3, r2, #31
   20344:	d403      	bmi.n	2034e <k_work_submit_to_queue+0x24>
}
   20346:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   2034a:	f7ff bed8 	b.w	200fe <k_queue_append>
}
   2034e:	f85d fb04 	ldr.w	pc, [sp], #4

00020352 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   20352:	f1a0 0110 	sub.w	r1, r0, #16
   20356:	6980      	ldr	r0, [r0, #24]
   20358:	f7ff bfe7 	b.w	2032a <k_work_submit_to_queue>

0002035c <work_cancel>:
	CHECKIF(work->work_q == NULL) {
   2035c:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   2035e:	b570      	push	{r4, r5, r6, lr}
   20360:	4604      	mov	r4, r0
	CHECKIF(work->work_q == NULL) {
   20362:	b913      	cbnz	r3, 2036a <work_cancel+0xe>
		return -EALREADY;
   20364:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
   20368:	bd70      	pop	{r4, r5, r6, pc}
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   2036a:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2036e:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   20372:	07db      	lsls	r3, r3, #31
   20374:	d52f      	bpl.n	203d6 <work_cancel+0x7a>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   20376:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   20378:	6a82      	ldr	r2, [r0, #40]	; 0x28
   2037a:	6813      	ldr	r3, [r2, #0]
   2037c:	b913      	cbnz	r3, 20384 <work_cancel+0x28>
			return -EINVAL;
   2037e:	f06f 0015 	mvn.w	r0, #21
   20382:	e7f1      	b.n	20368 <work_cancel+0xc>
   20384:	429c      	cmp	r4, r3
   20386:	d121      	bne.n	203cc <work_cancel+0x70>
Z_GENLIST_REMOVE(sflist, sfnode)
   20388:	6823      	ldr	r3, [r4, #0]
   2038a:	6856      	ldr	r6, [r2, #4]
   2038c:	f023 0003 	bic.w	r0, r3, #3
   20390:	b991      	cbnz	r1, 203b8 <work_cancel+0x5c>
   20392:	42b4      	cmp	r4, r6
	list->head = node;
   20394:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   20396:	d100      	bne.n	2039a <work_cancel+0x3e>
	list->tail = node;
   20398:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2039a:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2039c:	f003 0303 	and.w	r3, r3, #3
   203a0:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   203a2:	2000      	movs	r0, #0
   203a4:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   203a6:	e8d5 3fef 	ldaex	r3, [r5]
   203aa:	f023 0301 	bic.w	r3, r3, #1
   203ae:	e8c5 3fe2 	stlex	r2, r3, [r5]
   203b2:	2a00      	cmp	r2, #0
   203b4:	d0d8      	beq.n	20368 <work_cancel+0xc>
   203b6:	e7f6      	b.n	203a6 <work_cancel+0x4a>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   203b8:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   203ba:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   203bc:	f003 0303 	and.w	r3, r3, #3
   203c0:	ea43 0300 	orr.w	r3, r3, r0
   203c4:	600b      	str	r3, [r1, #0]
	list->tail = node;
   203c6:	bf08      	it	eq
   203c8:	6051      	streq	r1, [r2, #4]
}
   203ca:	e7e6      	b.n	2039a <work_cancel+0x3e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   203cc:	6818      	ldr	r0, [r3, #0]
   203ce:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   203d0:	f020 0303 	bic.w	r3, r0, #3
   203d4:	e7d2      	b.n	2037c <work_cancel+0x20>
		int err = z_abort_timeout(&work->timeout);
   203d6:	3010      	adds	r0, #16
   203d8:	f000 f80b 	bl	203f2 <z_abort_timeout>
		if (err) {
   203dc:	2800      	cmp	r0, #0
   203de:	d0e0      	beq.n	203a2 <work_cancel+0x46>
   203e0:	e7c0      	b.n	20364 <work_cancel+0x8>

000203e2 <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   203e2:	2300      	movs	r3, #0
   203e4:	e9c0 3100 	strd	r3, r1, [r0]
	node->prev = NULL;
   203e8:	e9c0 3304 	strd	r3, r3, [r0, #16]
   203ec:	6083      	str	r3, [r0, #8]
	work->work_q = NULL;
   203ee:	6283      	str	r3, [r0, #40]	; 0x28
}
   203f0:	4770      	bx	lr

000203f2 <z_abort_timeout>:
{
   203f2:	b510      	push	{r4, lr}
	__asm__ volatile(
   203f4:	f04f 0220 	mov.w	r2, #32
   203f8:	f3ef 8411 	mrs	r4, BASEPRI
   203fc:	f382 8811 	msr	BASEPRI, r2
   20400:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   20404:	6803      	ldr	r3, [r0, #0]
   20406:	b13b      	cbz	r3, 20418 <z_abort_timeout+0x26>
			remove_timeout(to);
   20408:	f7fc fcba 	bl	1cd80 <remove_timeout>
			ret = 0;
   2040c:	2000      	movs	r0, #0
	__asm__ volatile(
   2040e:	f384 8811 	msr	BASEPRI, r4
   20412:	f3bf 8f6f 	isb	sy
}
   20416:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   20418:	f06f 0015 	mvn.w	r0, #21
   2041c:	e7f7      	b.n	2040e <z_abort_timeout+0x1c>

0002041e <z_get_next_timeout_expiry>:
{
   2041e:	b510      	push	{r4, lr}
	__asm__ volatile(
   20420:	f04f 0320 	mov.w	r3, #32
   20424:	f3ef 8411 	mrs	r4, BASEPRI
   20428:	f383 8811 	msr	BASEPRI, r3
   2042c:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   20430:	f7fc fcc0 	bl	1cdb4 <next_timeout>
	__asm__ volatile(
   20434:	f384 8811 	msr	BASEPRI, r4
   20438:	f3bf 8f6f 	isb	sy
}
   2043c:	bd10      	pop	{r4, pc}

0002043e <z_set_timeout_expiry>:
{
   2043e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   20440:	4604      	mov	r4, r0
   20442:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
   20444:	f04f 0320 	mov.w	r3, #32
   20448:	f3ef 8511 	mrs	r5, BASEPRI
   2044c:	f383 8811 	msr	BASEPRI, r3
   20450:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   20454:	f7fc fcae 	bl	1cdb4 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   20458:	2801      	cmp	r0, #1
   2045a:	dd05      	ble.n	20468 <z_set_timeout_expiry+0x2a>
   2045c:	42a0      	cmp	r0, r4
   2045e:	9901      	ldr	r1, [sp, #4]
   20460:	dd02      	ble.n	20468 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
   20462:	4620      	mov	r0, r4
   20464:	f7ef fa48 	bl	f8f8 <z_clock_set_timeout>
	__asm__ volatile(
   20468:	f385 8811 	msr	BASEPRI, r5
   2046c:	f3bf 8f6f 	isb	sy
}
   20470:	b003      	add	sp, #12
   20472:	bd30      	pop	{r4, r5, pc}

00020474 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   20474:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   20476:	f7fc fdb7 	bl	1cfe8 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2047a:	bd08      	pop	{r3, pc}

0002047c <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   2047c:	f7fc bdb4 	b.w	1cfe8 <z_tick_get>

00020480 <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
   20480:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   20482:	1c4b      	adds	r3, r1, #1
   20484:	bf08      	it	eq
   20486:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   2048a:	4604      	mov	r4, r0
   2048c:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2048e:	d013      	beq.n	204b8 <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20490:	ea54 0105 	orrs.w	r1, r4, r5
   20494:	d103      	bne.n	2049e <z_timeout_end_calc+0x1e>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
#endif
	return z_tick_get() + MAX(1, dt);
}
   20496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   2049a:	f7fc bda5 	b.w	1cfe8 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2049e:	f06f 0101 	mvn.w	r1, #1
   204a2:	1a0a      	subs	r2, r1, r0
   204a4:	f04f 31ff 	mov.w	r1, #4294967295
   204a8:	eb61 0305 	sbc.w	r3, r1, r5
   204ac:	2a00      	cmp	r2, #0
   204ae:	f173 0100 	sbcs.w	r1, r3, #0
   204b2:	db02      	blt.n	204ba <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   204b4:	4610      	mov	r0, r2
   204b6:	4619      	mov	r1, r3
}
   204b8:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   204ba:	f7fc fd95 	bl	1cfe8 <z_tick_get>
   204be:	2c01      	cmp	r4, #1
   204c0:	f175 0300 	sbcs.w	r3, r5, #0
   204c4:	bfbc      	itt	lt
   204c6:	2401      	movlt	r4, #1
   204c8:	2500      	movlt	r5, #0
   204ca:	1820      	adds	r0, r4, r0
   204cc:	eb45 0101 	adc.w	r1, r5, r1
   204d0:	e7f2      	b.n	204b8 <z_timeout_end_calc+0x38>

000204d2 <k_timer_init>:
	timer->status = 0U;
   204d2:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   204d4:	e9c0 1208 	strd	r1, r2, [r0, #32]
   204d8:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   204dc:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   204e0:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   204e4:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   204e6:	6343      	str	r3, [r0, #52]	; 0x34
}
   204e8:	4770      	bx	lr

000204ea <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   204ea:	b510      	push	{r4, lr}
   204ec:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   204ee:	f7ff ff80 	bl	203f2 <z_abort_timeout>

	if (inactive) {
   204f2:	b9d8      	cbnz	r0, 2052c <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
   204f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   204f6:	b10b      	cbz	r3, 204fc <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   204f8:	4620      	mov	r0, r4
   204fa:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   204fc:	f104 0018 	add.w	r0, r4, #24
   20500:	2100      	movs	r1, #0
   20502:	f7ff fe0a 	bl	2011a <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   20506:	4604      	mov	r4, r0
   20508:	b180      	cbz	r0, 2052c <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
   2050a:	f7ff fe16 	bl	2013a <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
   2050e:	4620      	mov	r0, r4
   20510:	f7ff fe61 	bl	201d6 <z_ready_thread>
	__asm__ volatile(
   20514:	f04f 0320 	mov.w	r3, #32
   20518:	f3ef 8011 	mrs	r0, BASEPRI
   2051c:	f383 8811 	msr	BASEPRI, r3
   20520:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   20524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   20528:	f7ff be17 	b.w	2015a <z_reschedule_irqlock>
   2052c:	bd10      	pop	{r4, pc}

0002052e <clear_event_registrations>:
	while (num_events--) {
   2052e:	2314      	movs	r3, #20
{
   20530:	b530      	push	{r4, r5, lr}
	event->poller = NULL;
   20532:	2400      	movs	r4, #0
   20534:	fb03 0101 	mla	r1, r3, r1, r0
	while (num_events--) {
   20538:	4281      	cmp	r1, r0
   2053a:	d100      	bne.n	2053e <clear_event_registrations+0x10>
}
   2053c:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   2053e:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   20542:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   20546:	f003 030f 	and.w	r3, r3, #15
   2054a:	2b02      	cmp	r3, #2
   2054c:	d80a      	bhi.n	20564 <clear_event_registrations+0x36>
   2054e:	b15b      	cbz	r3, 20568 <clear_event_registrations+0x3a>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   20550:	f851 3c14 	ldr.w	r3, [r1, #-20]
   20554:	b143      	cbz	r3, 20568 <clear_event_registrations+0x3a>
	node->prev->next = node->next;
   20556:	f851 5c10 	ldr.w	r5, [r1, #-16]
   2055a:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   2055c:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   2055e:	e941 4405 	strd	r4, r4, [r1, #-20]
}
   20562:	e001      	b.n	20568 <clear_event_registrations+0x3a>
	switch (event->type) {
   20564:	2b04      	cmp	r3, #4
   20566:	d0f3      	beq.n	20550 <clear_event_registrations+0x22>
	__asm__ volatile(
   20568:	f382 8811 	msr	BASEPRI, r2
   2056c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   20570:	f04f 0320 	mov.w	r3, #32
   20574:	f3ef 8211 	mrs	r2, BASEPRI
   20578:	f383 8811 	msr	BASEPRI, r3
   2057c:	f3bf 8f6f 	isb	sy
   20580:	3914      	subs	r1, #20
   20582:	e7d9      	b.n	20538 <clear_event_registrations+0xa>

00020584 <signal_poll_event>:
{
   20584:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   20586:	6884      	ldr	r4, [r0, #8]
{
   20588:	4605      	mov	r5, r0
   2058a:	460e      	mov	r6, r1
	if (poller) {
   2058c:	b19c      	cbz	r4, 205b6 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   2058e:	68a3      	ldr	r3, [r4, #8]
   20590:	b95b      	cbnz	r3, 205aa <signal_poll_event+0x26>
	int retcode = 0;
   20592:	4618      	mov	r0, r3
		poller->is_polling = false;
   20594:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   20596:	2300      	movs	r3, #0
   20598:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   2059a:	68eb      	ldr	r3, [r5, #12]
   2059c:	f3c3 3104 	ubfx	r1, r3, #12, #5
   205a0:	430e      	orrs	r6, r1
   205a2:	f366 3310 	bfi	r3, r6, #12, #5
   205a6:	60eb      	str	r3, [r5, #12]
	return retcode;
   205a8:	e004      	b.n	205b4 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   205aa:	4798      	blx	r3
		poller->is_polling = false;
   205ac:	2300      	movs	r3, #0
		if (retcode < 0) {
   205ae:	2800      	cmp	r0, #0
		poller->is_polling = false;
   205b0:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   205b2:	daf0      	bge.n	20596 <signal_poll_event+0x12>
}
   205b4:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   205b6:	4620      	mov	r0, r4
   205b8:	e7ed      	b.n	20596 <signal_poll_event+0x12>

000205ba <k_poll_poller_cb>:
{
   205ba:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   205bc:	6883      	ldr	r3, [r0, #8]
{
   205be:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   205c0:	685c      	ldr	r4, [r3, #4]
	if (!z_is_thread_pending(thread)) {
   205c2:	7b63      	ldrb	r3, [r4, #13]
   205c4:	079a      	lsls	r2, r3, #30
   205c6:	d515      	bpl.n	205f4 <k_poll_poller_cb+0x3a>
	if (z_is_thread_timeout_expired(thread)) {
   205c8:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   205cc:	f04f 31ff 	mov.w	r1, #4294967295
   205d0:	f06f 0001 	mvn.w	r0, #1
   205d4:	428b      	cmp	r3, r1
   205d6:	bf08      	it	eq
   205d8:	4282      	cmpeq	r2, r0
   205da:	d014      	beq.n	20606 <k_poll_poller_cb+0x4c>
	z_unpend_thread(thread);
   205dc:	4620      	mov	r0, r4
   205de:	f7ff fdde 	bl	2019e <z_unpend_thread>
	arch_thread_return_value_set(thread,
   205e2:	2d08      	cmp	r5, #8
   205e4:	bf0c      	ite	eq
   205e6:	f06f 0303 	mvneq.w	r3, #3
   205ea:	2300      	movne	r3, #0
   205ec:	67e3      	str	r3, [r4, #124]	; 0x7c
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   205ee:	7b63      	ldrb	r3, [r4, #13]
   205f0:	06db      	lsls	r3, r3, #27
   205f2:	d001      	beq.n	205f8 <k_poll_poller_cb+0x3e>
		return 0;
   205f4:	2000      	movs	r0, #0
}
   205f6:	bd38      	pop	{r3, r4, r5, pc}
	if (!z_is_thread_ready(thread)) {
   205f8:	69a5      	ldr	r5, [r4, #24]
   205fa:	2d00      	cmp	r5, #0
   205fc:	d1fa      	bne.n	205f4 <k_poll_poller_cb+0x3a>
	z_ready_thread(thread);
   205fe:	4620      	mov	r0, r4
   20600:	f7ff fde9 	bl	201d6 <z_ready_thread>
	return 0;
   20604:	e7f6      	b.n	205f4 <k_poll_poller_cb+0x3a>
		return -EAGAIN;
   20606:	f06f 000a 	mvn.w	r0, #10
   2060a:	e7f4      	b.n	205f6 <k_poll_poller_cb+0x3c>

0002060c <add_event>:
{
   2060c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2060e:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   20610:	e9d0 2300 	ldrd	r2, r3, [r0]
   20614:	4290      	cmp	r0, r2
   20616:	4604      	mov	r4, r0
   20618:	460d      	mov	r5, r1
   2061a:	d106      	bne.n	2062a <add_event+0x1e>
	node->prev = list->tail;
   2061c:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   2061e:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   20620:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   20622:	6863      	ldr	r3, [r4, #4]
   20624:	601d      	str	r5, [r3, #0]
	list->tail = node;
   20626:	6065      	str	r5, [r4, #4]
}
   20628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   2062a:	2b00      	cmp	r3, #0
   2062c:	d0f6      	beq.n	2061c <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   2062e:	689b      	ldr	r3, [r3, #8]
   20630:	6879      	ldr	r1, [r7, #4]
   20632:	6858      	ldr	r0, [r3, #4]
   20634:	f7ff fd68 	bl	20108 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   20638:	2800      	cmp	r0, #0
   2063a:	d1ef      	bne.n	2061c <add_event+0x10>
	return list->head == list;
   2063c:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2063e:	42b4      	cmp	r4, r6
   20640:	d0ec      	beq.n	2061c <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   20642:	2e00      	cmp	r6, #0
   20644:	d0ea      	beq.n	2061c <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   20646:	68b3      	ldr	r3, [r6, #8]
   20648:	6878      	ldr	r0, [r7, #4]
   2064a:	6859      	ldr	r1, [r3, #4]
   2064c:	f7ff fd5c 	bl	20108 <z_is_t1_higher_prio_than_t2>
   20650:	b128      	cbz	r0, 2065e <add_event+0x52>
	node->prev = successor->prev;
   20652:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   20654:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   20658:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2065a:	6075      	str	r5, [r6, #4]
			return;
   2065c:	e7e4      	b.n	20628 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   2065e:	6863      	ldr	r3, [r4, #4]
   20660:	429e      	cmp	r6, r3
   20662:	d0db      	beq.n	2061c <add_event+0x10>
   20664:	6836      	ldr	r6, [r6, #0]
   20666:	e7ec      	b.n	20642 <add_event+0x36>

00020668 <register_events>:
{
   20668:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   2066c:	f04f 0a00 	mov.w	sl, #0
{
   20670:	460e      	mov	r6, r1
   20672:	4614      	mov	r4, r2
   20674:	461f      	mov	r7, r3
   20676:	4683      	mov	fp, r0
	int events_registered = 0;
   20678:	4655      	mov	r5, sl
	event->poller = NULL;
   2067a:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
   2067c:	45b2      	cmp	sl, r6
   2067e:	db02      	blt.n	20686 <register_events+0x1e>
}
   20680:	4628      	mov	r0, r5
   20682:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20686:	f04f 0320 	mov.w	r3, #32
   2068a:	f3ef 8911 	mrs	r9, BASEPRI
   2068e:	f383 8811 	msr	BASEPRI, r3
   20692:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   20696:	f89b 200d 	ldrb.w	r2, [fp, #13]
   2069a:	f002 020f 	and.w	r2, r2, #15
   2069e:	2a02      	cmp	r2, #2
   206a0:	d006      	beq.n	206b0 <register_events+0x48>
   206a2:	2a04      	cmp	r2, #4
   206a4:	d008      	beq.n	206b8 <register_events+0x50>
   206a6:	2a01      	cmp	r2, #1
   206a8:	d120      	bne.n	206ec <register_events+0x84>
		if (event->signal->signaled != 0U) {
   206aa:	f8db 3010 	ldr.w	r3, [fp, #16]
   206ae:	e001      	b.n	206b4 <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0) {
   206b0:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
   206b4:	689b      	ldr	r3, [r3, #8]
   206b6:	e002      	b.n	206be <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
   206b8:	f8db 3010 	ldr.w	r3, [fp, #16]
   206bc:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
   206be:	b1ab      	cbz	r3, 206ec <register_events+0x84>
	event->state |= state;
   206c0:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
   206c4:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
   206c8:	f3c3 3104 	ubfx	r1, r3, #12, #5
   206cc:	430a      	orrs	r2, r1
   206ce:	f362 3310 	bfi	r3, r2, #12, #5
   206d2:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
   206d6:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   206da:	f389 8811 	msr	BASEPRI, r9
   206de:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   206e2:	f10a 0a01 	add.w	sl, sl, #1
   206e6:	f10b 0b14 	add.w	fp, fp, #20
   206ea:	e7c7      	b.n	2067c <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   206ec:	2f00      	cmp	r7, #0
   206ee:	d1f4      	bne.n	206da <register_events+0x72>
   206f0:	7823      	ldrb	r3, [r4, #0]
   206f2:	2b00      	cmp	r3, #0
   206f4:	d0f1      	beq.n	206da <register_events+0x72>
	switch (event->type) {
   206f6:	f89b 300d 	ldrb.w	r3, [fp, #13]
   206fa:	f003 030f 	and.w	r3, r3, #15
   206fe:	2b02      	cmp	r3, #2
   20700:	d008      	beq.n	20714 <register_events+0xac>
   20702:	2b04      	cmp	r3, #4
   20704:	d006      	beq.n	20714 <register_events+0xac>
   20706:	2b01      	cmp	r3, #1
   20708:	d10b      	bne.n	20722 <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
   2070a:	4622      	mov	r2, r4
   2070c:	4659      	mov	r1, fp
   2070e:	f8db 0010 	ldr.w	r0, [fp, #16]
   20712:	e004      	b.n	2071e <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
   20714:	4622      	mov	r2, r4
   20716:	4659      	mov	r1, fp
   20718:	f8db 0010 	ldr.w	r0, [fp, #16]
   2071c:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   2071e:	f7ff ff75 	bl	2060c <add_event>
	event->poller = poller;
   20722:	f8cb 4008 	str.w	r4, [fp, #8]
				events_registered += 1;
   20726:	3501      	adds	r5, #1
   20728:	e7d7      	b.n	206da <register_events+0x72>

0002072a <z_handle_obj_poll_events>:
{
   2072a:	4603      	mov	r3, r0
	return list->head == list;
   2072c:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2072e:	4283      	cmp	r3, r0
   20730:	d008      	beq.n	20744 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   20732:	e9d0 3200 	ldrd	r3, r2, [r0]
   20736:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   20738:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2073a:	2300      	movs	r3, #0
	node->prev = NULL;
   2073c:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   20740:	f7ff bf20 	b.w	20584 <signal_poll_event>
}
   20744:	4770      	bx	lr

00020746 <k_mem_pool_malloc>:
{
   20746:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   20748:	2408      	movs	r4, #8
   2074a:	190a      	adds	r2, r1, r4
   2074c:	d208      	bcs.n	20760 <k_mem_pool_malloc+0x1a>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   2074e:	2600      	movs	r6, #0
   20750:	2700      	movs	r7, #0
   20752:	eb0d 0104 	add.w	r1, sp, r4
   20756:	e9cd 6700 	strd	r6, r7, [sp]
   2075a:	f7ff fc19 	bl	1ff90 <k_mem_pool_alloc>
   2075e:	b110      	cbz	r0, 20766 <k_mem_pool_malloc+0x20>
		return NULL;
   20760:	2000      	movs	r0, #0
}
   20762:	b004      	add	sp, #16
   20764:	bdd0      	pop	{r4, r6, r7, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   20766:	4622      	mov	r2, r4
   20768:	9802      	ldr	r0, [sp, #8]
   2076a:	a902      	add	r1, sp, #8
   2076c:	f7fd ff71 	bl	1e652 <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   20770:	9802      	ldr	r0, [sp, #8]
   20772:	3008      	adds	r0, #8
   20774:	e7f5      	b.n	20762 <k_mem_pool_malloc+0x1c>

00020776 <k_free>:
	if (ptr != NULL) {
   20776:	b110      	cbz	r0, 2077e <k_free+0x8>
		k_mem_pool_free_id(ptr);
   20778:	3808      	subs	r0, #8
   2077a:	f7ff bc22 	b.w	1ffc2 <k_mem_pool_free_id>
}
   2077e:	4770      	bx	lr

00020780 <k_calloc>:
{
   20780:	b570      	push	{r4, r5, r6, lr}
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
   20782:	fba0 4501 	umull	r4, r5, r0, r1
   20786:	b935      	cbnz	r5, 20796 <k_calloc+0x16>
	ret = k_malloc(bounds);
   20788:	4620      	mov	r0, r4
   2078a:	f7fc fd51 	bl	1d230 <k_malloc>
	if (ret != NULL) {
   2078e:	4606      	mov	r6, r0
   20790:	b918      	cbnz	r0, 2079a <k_calloc+0x1a>
}
   20792:	4630      	mov	r0, r6
   20794:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   20796:	2600      	movs	r6, #0
   20798:	e7fb      	b.n	20792 <k_calloc+0x12>
		(void)memset(ret, 0, bounds);
   2079a:	4622      	mov	r2, r4
   2079c:	4629      	mov	r1, r5
   2079e:	f7fd ff83 	bl	1e6a8 <memset>
   207a2:	e7f6      	b.n	20792 <k_calloc+0x12>

000207a4 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   207a4:	4770      	bx	lr
