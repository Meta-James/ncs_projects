
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	20000b18 	.word	0x20000b18
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   4:	00001e85 	.word	0x00001e85
   8:	00006437 	.word	0x00006437
   c:	00001eb5 	.word	0x00001eb5
  10:	00001eb5 	.word	0x00001eb5
		if (fdtable[fd].obj == NULL) {
  14:	00001eb5 	.word	0x00001eb5
  18:	00001eb5 	.word	0x00001eb5
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
  1c:	00001eb5 	.word	0x00001eb5
	...
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
  2c:	00001df5 	.word	0x00001df5
  30:	00001eb5 	.word	0x00001eb5
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  34:	00000000 	.word	0x00000000
		fdtable[fd].obj = FD_OBJ_RESERVED;
  38:	00001dad 	.word	0x00001dad
  3c:	000018ed 	.word	0x000018ed

00000040 <_irq_vector_table>:
  40:	00001e45 00001e45 00001e45 00001e45     E...E...E...E...
		sys_pm_notify_power_state_exit(pm_state);
		_sys_pm_power_state_exit_post_ops(pm_state);
	}

	return pm_state;
}
  50:	00001e45 00001e45 00001e45 00001e45     E...E...E...E...
  60:	00001e45 00001e45 00001e45 00001e45     E...E...E...E...
  70:	00001e45 00001e45 00001e45 00001e45     E...E...E...E...
  80:	00001e45 00001e45 00001e45 00001e45     E...E...E...E...
  90:	00001e45 00001e45 00001e45 00001e45     E...E...E...E...
  a0:	00001e45 00001e45 00001e45 00001e45     E...E...E...E...
  b0:	00001e45 00001e45 00001e45 00001e45     E...E...E...E...
  c0:	00001e45 00001e45 00001e45 00001e45     E...E...E...E...
  d0:	00001e45 00001e45 00001e45 00001e45     E...E...E...E...
  e0:	00001e45 00001e45 00001e45 00001e45     E...E...E...E...
  f0:	00001e45 00001e45 00001e45 00001e45     E...E...E...E...
 100:	00001e45 00001e45 00001e45 00001e45     E...E...E...E...
 110:	00001e45 00001e45 00001e45 00001e45     E...E...E...E...
 120:	00001e45 00001e45 00001e45 00001e45     E...E...E...E...
 130:	00001e45 00001e45 00001e45 00001e45     E...E...E...E...
 140:	00001e45 00001e45 00001e45 00001e45     E...E...E...E...
 150:	00001e45                                E...

Disassembly of section text:

00000154 <__aeabi_uldivmod>:
     154:	b953      	cbnz	r3, 16c <__aeabi_uldivmod+0x18>
     156:	b94a      	cbnz	r2, 16c <__aeabi_uldivmod+0x18>
     158:	2900      	cmp	r1, #0
     15a:	bf08      	it	eq
     15c:	2800      	cmpeq	r0, #0
     15e:	bf1c      	itt	ne
     160:	f04f 31ff 	movne.w	r1, #4294967295
     164:	f04f 30ff 	movne.w	r0, #4294967295
     168:	f000 b970 	b.w	44c <__aeabi_idiv0>
     16c:	f1ad 0c08 	sub.w	ip, sp, #8
     170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     174:	f000 f806 	bl	184 <__udivmoddi4>
     178:	f8dd e004 	ldr.w	lr, [sp, #4]
     17c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     180:	b004      	add	sp, #16
     182:	4770      	bx	lr

00000184 <__udivmoddi4>:
     184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     188:	9e08      	ldr	r6, [sp, #32]
     18a:	460d      	mov	r5, r1
     18c:	4604      	mov	r4, r0
     18e:	468a      	mov	sl, r1
     190:	2b00      	cmp	r3, #0
     192:	d17f      	bne.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     194:	428a      	cmp	r2, r1
     196:	4617      	mov	r7, r2
     198:	d941      	bls.n	21e <CONFIG_UART_MUX_RX_STACK_SIZE+0x1e>
     19a:	fab2 f282 	clz	r2, r2
     19e:	b14a      	cbz	r2, 1b4 <__udivmoddi4+0x30>
     1a0:	f1c2 0120 	rsb	r1, r2, #32
     1a4:	fa05 f302 	lsl.w	r3, r5, r2
     1a8:	4097      	lsls	r7, r2
     1aa:	4094      	lsls	r4, r2
     1ac:	fa20 f101 	lsr.w	r1, r0, r1
     1b0:	ea41 0a03 	orr.w	sl, r1, r3
     1b4:	ea4f 4817 	mov.w	r8, r7, lsr #16
     1b8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     1bc:	fa1f f987 	uxth.w	r9, r7
     1c0:	fbba fef8 	udiv	lr, sl, r8
     1c4:	fb08 a31e 	mls	r3, r8, lr, sl
     1c8:	fb0e f109 	mul.w	r1, lr, r9
     1cc:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
     1d0:	4299      	cmp	r1, r3
     1d2:	d906      	bls.n	1e2 <CONFIG_SRAM_SIZE+0x22>
     1d4:	18fb      	adds	r3, r7, r3
     1d6:	d202      	bcs.n	1de <CONFIG_SRAM_SIZE+0x1e>
     1d8:	4299      	cmp	r1, r3
     1da:	f200 8124 	bhi.w	426 <CONFIG_FLASH_SIZE+0x26>
     1de:	f10e 3eff 	add.w	lr, lr, #4294967295
     1e2:	1a59      	subs	r1, r3, r1
     1e4:	b2a3      	uxth	r3, r4
     1e6:	fbb1 f0f8 	udiv	r0, r1, r8
     1ea:	fb08 1110 	mls	r1, r8, r0, r1
     1ee:	fb00 f909 	mul.w	r9, r0, r9
     1f2:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     1f6:	45a1      	cmp	r9, r4
     1f8:	d905      	bls.n	206 <CONFIG_UART_MUX_RX_STACK_SIZE+0x6>
     1fa:	193c      	adds	r4, r7, r4
     1fc:	d202      	bcs.n	204 <CONFIG_UART_MUX_RX_STACK_SIZE+0x4>
     1fe:	45a1      	cmp	r9, r4
     200:	f200 810e 	bhi.w	420 <CONFIG_FLASH_SIZE+0x20>
     204:	3801      	subs	r0, #1
     206:	eba4 0409 	sub.w	r4, r4, r9
     20a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     20e:	2100      	movs	r1, #0
     210:	b11e      	cbz	r6, 21a <CONFIG_UART_MUX_RX_STACK_SIZE+0x1a>
     212:	40d4      	lsrs	r4, r2
     214:	2300      	movs	r3, #0
     216:	e9c6 4300 	strd	r4, r3, [r6]
     21a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     21e:	b902      	cbnz	r2, 222 <CONFIG_UART_MUX_RX_STACK_SIZE+0x22>
     220:	deff      	udf	#255	; 0xff
     222:	fab2 f282 	clz	r2, r2
     226:	2a00      	cmp	r2, #0
     228:	d14f      	bne.n	2ca <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4a>
     22a:	1bcb      	subs	r3, r1, r7
     22c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     230:	fa1f f887 	uxth.w	r8, r7
     234:	2101      	movs	r1, #1
     236:	0c25      	lsrs	r5, r4, #16
     238:	fbb3 fcfe 	udiv	ip, r3, lr
     23c:	fb0e 301c 	mls	r0, lr, ip, r3
     240:	462b      	mov	r3, r5
     242:	fb08 f90c 	mul.w	r9, r8, ip
     246:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     24a:	45a9      	cmp	r9, r5
     24c:	d90a      	bls.n	264 <CONFIG_UART_MUX_RX_STACK_SIZE+0x64>
     24e:	197d      	adds	r5, r7, r5
     250:	bf2c      	ite	cs
     252:	2301      	movcs	r3, #1
     254:	2300      	movcc	r3, #0
     256:	45a9      	cmp	r9, r5
     258:	d902      	bls.n	260 <CONFIG_UART_MUX_RX_STACK_SIZE+0x60>
     25a:	2b00      	cmp	r3, #0
     25c:	f000 80d9 	beq.w	412 <CONFIG_FLASH_SIZE+0x12>
     260:	f10c 3cff 	add.w	ip, ip, #4294967295
     264:	eba5 0509 	sub.w	r5, r5, r9
     268:	b2a3      	uxth	r3, r4
     26a:	fbb5 f0fe 	udiv	r0, r5, lr
     26e:	fb0e 5510 	mls	r5, lr, r0, r5
     272:	fb08 f800 	mul.w	r8, r8, r0
     276:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     27a:	45a0      	cmp	r8, r4
     27c:	d905      	bls.n	28a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa>
     27e:	193c      	adds	r4, r7, r4
     280:	d202      	bcs.n	288 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8>
     282:	45a0      	cmp	r8, r4
     284:	f200 80c9 	bhi.w	41a <CONFIG_FLASH_SIZE+0x1a>
     288:	3801      	subs	r0, #1
     28a:	eba4 0408 	sub.w	r4, r4, r8
     28e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     292:	e7bd      	b.n	210 <CONFIG_UART_MUX_RX_STACK_SIZE+0x10>
     294:	428b      	cmp	r3, r1
     296:	d908      	bls.n	2aa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x2a>
     298:	2e00      	cmp	r6, #0
     29a:	f000 80b1 	beq.w	400 <CONFIG_FLASH_SIZE>
     29e:	2100      	movs	r1, #0
     2a0:	e9c6 0500 	strd	r0, r5, [r6]
     2a4:	4608      	mov	r0, r1
     2a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     2aa:	fab3 f183 	clz	r1, r3
     2ae:	2900      	cmp	r1, #0
     2b0:	d146      	bne.n	340 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x40>
     2b2:	42ab      	cmp	r3, r5
     2b4:	f0c0 80a7 	bcc.w	406 <CONFIG_FLASH_SIZE+0x6>
     2b8:	4282      	cmp	r2, r0
     2ba:	f240 80a4 	bls.w	406 <CONFIG_FLASH_SIZE+0x6>
     2be:	4608      	mov	r0, r1
     2c0:	2e00      	cmp	r6, #0
     2c2:	d0aa      	beq.n	21a <CONFIG_UART_MUX_RX_STACK_SIZE+0x1a>
     2c4:	e9c6 4a00 	strd	r4, sl, [r6]
     2c8:	e7a7      	b.n	21a <CONFIG_UART_MUX_RX_STACK_SIZE+0x1a>
     2ca:	f1c2 0020 	rsb	r0, r2, #32
     2ce:	4097      	lsls	r7, r2
     2d0:	fa01 f302 	lsl.w	r3, r1, r2
     2d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     2d8:	40c1      	lsrs	r1, r0
     2da:	fa24 f500 	lsr.w	r5, r4, r0
     2de:	fa1f f887 	uxth.w	r8, r7
     2e2:	4094      	lsls	r4, r2
     2e4:	431d      	orrs	r5, r3
     2e6:	fbb1 f0fe 	udiv	r0, r1, lr
     2ea:	0c2b      	lsrs	r3, r5, #16
     2ec:	fb0e 1110 	mls	r1, lr, r0, r1
     2f0:	fb00 fc08 	mul.w	ip, r0, r8
     2f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2f8:	459c      	cmp	ip, r3
     2fa:	d909      	bls.n	310 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x10>
     2fc:	18fb      	adds	r3, r7, r3
     2fe:	bf2c      	ite	cs
     300:	2101      	movcs	r1, #1
     302:	2100      	movcc	r1, #0
     304:	459c      	cmp	ip, r3
     306:	d902      	bls.n	30e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xe>
     308:	2900      	cmp	r1, #0
     30a:	f000 8095 	beq.w	438 <CONFIG_FLASH_SIZE+0x38>
     30e:	3801      	subs	r0, #1
     310:	eba3 030c 	sub.w	r3, r3, ip
     314:	b2ad      	uxth	r5, r5
     316:	fbb3 f1fe 	udiv	r1, r3, lr
     31a:	fb0e 3311 	mls	r3, lr, r1, r3
     31e:	fb01 fc08 	mul.w	ip, r1, r8
     322:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     326:	45ac      	cmp	ip, r5
     328:	d905      	bls.n	336 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x36>
     32a:	197d      	adds	r5, r7, r5
     32c:	d202      	bcs.n	334 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x34>
     32e:	45ac      	cmp	ip, r5
     330:	f200 8089 	bhi.w	446 <CONFIG_FLASH_SIZE+0x46>
     334:	3901      	subs	r1, #1
     336:	eba5 030c 	sub.w	r3, r5, ip
     33a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     33e:	e77a      	b.n	236 <CONFIG_UART_MUX_RX_STACK_SIZE+0x36>
     340:	f1c1 0420 	rsb	r4, r1, #32
     344:	408b      	lsls	r3, r1
     346:	fa02 f701 	lsl.w	r7, r2, r1
     34a:	fa05 fc01 	lsl.w	ip, r5, r1
     34e:	40e2      	lsrs	r2, r4
     350:	fa20 f804 	lsr.w	r8, r0, r4
     354:	40e5      	lsrs	r5, r4
     356:	fa00 fe01 	lsl.w	lr, r0, r1
     35a:	4313      	orrs	r3, r2
     35c:	ea48 020c 	orr.w	r2, r8, ip
     360:	ea4f 4813 	mov.w	r8, r3, lsr #16
     364:	ea4f 4c12 	mov.w	ip, r2, lsr #16
     368:	fa1f f983 	uxth.w	r9, r3
     36c:	fbb5 faf8 	udiv	sl, r5, r8
     370:	fb08 551a 	mls	r5, r8, sl, r5
     374:	fb0a f009 	mul.w	r0, sl, r9
     378:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
     37c:	4560      	cmp	r0, ip
     37e:	d90a      	bls.n	396 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x96>
     380:	eb13 0c0c 	adds.w	ip, r3, ip
     384:	bf2c      	ite	cs
     386:	2501      	movcs	r5, #1
     388:	2500      	movcc	r5, #0
     38a:	4560      	cmp	r0, ip
     38c:	d901      	bls.n	392 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x92>
     38e:	2d00      	cmp	r5, #0
     390:	d055      	beq.n	43e <CONFIG_FLASH_SIZE+0x3e>
     392:	f10a 3aff 	add.w	sl, sl, #4294967295
     396:	ebac 0c00 	sub.w	ip, ip, r0
     39a:	b292      	uxth	r2, r2
     39c:	fbbc f0f8 	udiv	r0, ip, r8
     3a0:	fb08 cc10 	mls	ip, r8, r0, ip
     3a4:	fb00 f909 	mul.w	r9, r0, r9
     3a8:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
     3ac:	45e1      	cmp	r9, ip
     3ae:	d905      	bls.n	3bc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xbc>
     3b0:	eb13 0c0c 	adds.w	ip, r3, ip
     3b4:	d201      	bcs.n	3ba <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xba>
     3b6:	45e1      	cmp	r9, ip
     3b8:	d83b      	bhi.n	432 <CONFIG_FLASH_SIZE+0x32>
     3ba:	3801      	subs	r0, #1
     3bc:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
     3c0:	ebac 0c09 	sub.w	ip, ip, r9
     3c4:	fba0 8907 	umull	r8, r9, r0, r7
     3c8:	45cc      	cmp	ip, r9
     3ca:	4645      	mov	r5, r8
     3cc:	464a      	mov	r2, r9
     3ce:	d302      	bcc.n	3d6 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd6>
     3d0:	d106      	bne.n	3e0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xe0>
     3d2:	45c6      	cmp	lr, r8
     3d4:	d204      	bcs.n	3e0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xe0>
     3d6:	3801      	subs	r0, #1
     3d8:	ebb8 0507 	subs.w	r5, r8, r7
     3dc:	eb69 0203 	sbc.w	r2, r9, r3
     3e0:	b32e      	cbz	r6, 42e <CONFIG_FLASH_SIZE+0x2e>
     3e2:	ebbe 0305 	subs.w	r3, lr, r5
     3e6:	eb6c 0c02 	sbc.w	ip, ip, r2
     3ea:	fa23 f201 	lsr.w	r2, r3, r1
     3ee:	fa0c f404 	lsl.w	r4, ip, r4
     3f2:	fa2c f301 	lsr.w	r3, ip, r1
     3f6:	2100      	movs	r1, #0
     3f8:	4314      	orrs	r4, r2
     3fa:	e9c6 4300 	strd	r4, r3, [r6]
     3fe:	e70c      	b.n	21a <CONFIG_UART_MUX_RX_STACK_SIZE+0x1a>
     400:	4631      	mov	r1, r6
     402:	4630      	mov	r0, r6
     404:	e709      	b.n	21a <CONFIG_UART_MUX_RX_STACK_SIZE+0x1a>
     406:	1a84      	subs	r4, r0, r2
     408:	eb65 0303 	sbc.w	r3, r5, r3
     40c:	2001      	movs	r0, #1
     40e:	469a      	mov	sl, r3
     410:	e756      	b.n	2c0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x40>
     412:	f1ac 0c02 	sub.w	ip, ip, #2
     416:	443d      	add	r5, r7
     418:	e724      	b.n	264 <CONFIG_UART_MUX_RX_STACK_SIZE+0x64>
     41a:	3802      	subs	r0, #2
     41c:	443c      	add	r4, r7
     41e:	e734      	b.n	28a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa>
     420:	3802      	subs	r0, #2
     422:	443c      	add	r4, r7
     424:	e6ef      	b.n	206 <CONFIG_UART_MUX_RX_STACK_SIZE+0x6>
     426:	f1ae 0e02 	sub.w	lr, lr, #2
     42a:	443b      	add	r3, r7
     42c:	e6d9      	b.n	1e2 <CONFIG_SRAM_SIZE+0x22>
     42e:	4631      	mov	r1, r6
     430:	e6f3      	b.n	21a <CONFIG_UART_MUX_RX_STACK_SIZE+0x1a>
     432:	3802      	subs	r0, #2
     434:	449c      	add	ip, r3
     436:	e7c1      	b.n	3bc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xbc>
     438:	3802      	subs	r0, #2
     43a:	443b      	add	r3, r7
     43c:	e768      	b.n	310 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x10>
     43e:	f1aa 0a02 	sub.w	sl, sl, #2
     442:	449c      	add	ip, r3
     444:	e7a7      	b.n	396 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x96>
     446:	3902      	subs	r1, #2
     448:	443d      	add	r5, r7
     44a:	e774      	b.n	336 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x36>

0000044c <__aeabi_idiv0>:
     44c:	4770      	bx	lr
     44e:	bf00      	nop

00000450 <main>:
static const nrfx_spim_t spi = NRFX_SPIM_INSTANCE(0);
static uint8_t tx_buffer[SPI_TRANSFER_SIZE];
static const nrfx_spim_xfer_desc_t xfer = NRFX_SPIM_XFER_TX(tx_buffer, SPI_TRANSFER_SIZE);

void main(void)
{
     450:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	printk("Starting SPIM sample\n");

    nrfx_err_t err_code;

    nrfx_spim_config_t spi_config = NRFX_SPIM_DEFAULT_CONFIG(SCLK_PIN, MOSI_PIN, MISO_PIN, CS_PIN);
     452:	466c      	mov	r4, sp
	printk("Starting SPIM sample\n");
     454:	481e      	ldr	r0, [pc, #120]	; (4d0 <main+0x80>)
     456:	f005 fc4c 	bl	5cf2 <printk>
    nrfx_spim_config_t spi_config = NRFX_SPIM_DEFAULT_CONFIG(SCLK_PIN, MOSI_PIN, MISO_PIN, CS_PIN);
     45a:	4b1e      	ldr	r3, [pc, #120]	; (4d4 <main+0x84>)
     45c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     45e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	printk("SPIM init\n");
     462:	481d      	ldr	r0, [pc, #116]	; (4d8 <main+0x88>)
     464:	f005 fc45 	bl	5cf2 <printk>
    err_code = nrfx_spim_init(&spi, &spi_config, NULL, NULL);
     468:	2300      	movs	r3, #0
     46a:	4621      	mov	r1, r4
     46c:	461a      	mov	r2, r3
     46e:	481b      	ldr	r0, [pc, #108]	; (4dc <main+0x8c>)
     470:	f003 f8dc 	bl	362c <nrfx_spim_init>
     474:	4604      	mov	r4, r0
	printk("SPIM error: %d\n",err_code);
     476:	4601      	mov	r1, r0
     478:	4819      	ldr	r0, [pc, #100]	; (4e0 <main+0x90>)
     47a:	f005 fc3a 	bl	5cf2 <printk>
    assert(err_code == NRFX_SUCCESS);
     47e:	4b19      	ldr	r3, [pc, #100]	; (4e4 <main+0x94>)
     480:	429c      	cmp	r4, r3
     482:	d009      	beq.n	498 <main+0x48>
     484:	4918      	ldr	r1, [pc, #96]	; (4e8 <main+0x98>)
     486:	4819      	ldr	r0, [pc, #100]	; (4ec <main+0x9c>)
     488:	231c      	movs	r3, #28
     48a:	4a19      	ldr	r2, [pc, #100]	; (4f0 <main+0xa0>)
     48c:	f005 fc31 	bl	5cf2 <printk>
     490:	211c      	movs	r1, #28
     492:	4817      	ldr	r0, [pc, #92]	; (4f0 <main+0xa0>)
     494:	f005 fcfb 	bl	5e8e <assert_post_action>

    while (1) {
        err_code = nrfx_spim_xfer(&spi, &xfer, NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER);
     498:	4d16      	ldr	r5, [pc, #88]	; (4f4 <main+0xa4>)
     49a:	4e10      	ldr	r6, [pc, #64]	; (4dc <main+0x8c>)
        assert(err_code == NRFX_SUCCESS);
     49c:	4c11      	ldr	r4, [pc, #68]	; (4e4 <main+0x94>)
        err_code = nrfx_spim_xfer(&spi, &xfer, NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER);
     49e:	2204      	movs	r2, #4
     4a0:	4629      	mov	r1, r5
     4a2:	4630      	mov	r0, r6
     4a4:	f003 f986 	bl	37b4 <nrfx_spim_xfer>
        assert(err_code == NRFX_SUCCESS);
     4a8:	42a0      	cmp	r0, r4
     4aa:	d009      	beq.n	4c0 <main+0x70>
     4ac:	490e      	ldr	r1, [pc, #56]	; (4e8 <main+0x98>)
     4ae:	480f      	ldr	r0, [pc, #60]	; (4ec <main+0x9c>)
     4b0:	2320      	movs	r3, #32
     4b2:	4a0f      	ldr	r2, [pc, #60]	; (4f0 <main+0xa0>)
     4b4:	f005 fc1d 	bl	5cf2 <printk>
     4b8:	2120      	movs	r1, #32
     4ba:	480d      	ldr	r0, [pc, #52]	; (4f0 <main+0xa0>)
     4bc:	f005 fce7 	bl	5e8e <assert_post_action>
		printk("Sucess?\n");
     4c0:	480d      	ldr	r0, [pc, #52]	; (4f8 <main+0xa8>)
     4c2:	f005 fc16 	bl	5cf2 <printk>
	return z_impl_k_sleep(timeout);
     4c6:	2100      	movs	r1, #0
     4c8:	2021      	movs	r0, #33	; 0x21
     4ca:	f004 fdf5 	bl	50b8 <z_impl_k_sleep>
    while (1) {
     4ce:	e7e6      	b.n	49e <main+0x4e>
     4d0:	00006f1c 	.word	0x00006f1c
     4d4:	00006da0 	.word	0x00006da0
     4d8:	00006f32 	.word	0x00006f32
     4dc:	00006db8 	.word	0x00006db8
     4e0:	00006f3d 	.word	0x00006f3d
     4e4:	0bad0000 	.word	0x0bad0000
     4e8:	00006f5b 	.word	0x00006f5b
     4ec:	00006f74 	.word	0x00006f74
     4f0:	00006f4d 	.word	0x00006f4d
     4f4:	00006dc0 	.word	0x00006dc0
     4f8:	00006f91 	.word	0x00006f91

000004fc <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     4fc:	680b      	ldr	r3, [r1, #0]
     4fe:	3301      	adds	r3, #1
     500:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     502:	4b01      	ldr	r3, [pc, #4]	; (508 <char_out+0xc>)
     504:	681b      	ldr	r3, [r3, #0]
     506:	4718      	bx	r3
     508:	20000000 	.word	0x20000000

0000050c <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     510:	b085      	sub	sp, #20
     512:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     514:	469b      	mov	fp, r3
     516:	2c01      	cmp	r4, #1
     518:	bfb8      	it	lt
     51a:	2401      	movlt	r4, #1
     51c:	2b01      	cmp	r3, #1
     51e:	bf0c      	ite	eq
     520:	2330      	moveq	r3, #48	; 0x30
     522:	2320      	movne	r3, #32
     524:	4615      	mov	r5, r2
     526:	4606      	mov	r6, r0
     528:	468a      	mov	sl, r1
     52a:	2701      	movs	r7, #1
     52c:	f04f 080a 	mov.w	r8, #10
     530:	2200      	movs	r2, #0
     532:	f8df 9070 	ldr.w	r9, [pc, #112]	; 5a4 <_printk_dec_ulong+0x98>
     536:	9302      	str	r3, [sp, #8]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
     538:	fbb5 f3f9 	udiv	r3, r5, r9
     53c:	9301      	str	r3, [sp, #4]
     53e:	b90a      	cbnz	r2, 544 <_printk_dec_ulong+0x38>
     540:	45a9      	cmp	r9, r5
     542:	d81e      	bhi.n	582 <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
     544:	9b01      	ldr	r3, [sp, #4]
     546:	4651      	mov	r1, sl
     548:	f103 0030 	add.w	r0, r3, #48	; 0x30
     54c:	47b0      	blx	r6
			found_largest_digit = 1;
     54e:	2201      	movs	r2, #1
			digits++;
     550:	3701      	adds	r7, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
     552:	9b01      	ldr	r3, [sp, #4]
		remaining--;
     554:	f108 38ff 	add.w	r8, r8, #4294967295
		remainder %= pos;
     558:	fb09 5513 	mls	r5, r9, r3, r5
		pos /= 10;
     55c:	230a      	movs	r3, #10
	while (pos >= 10) {
     55e:	f1b8 0f01 	cmp.w	r8, #1
		pos /= 10;
     562:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
     566:	d1e7      	bne.n	538 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
     568:	4651      	mov	r1, sl
     56a:	f105 0030 	add.w	r0, r5, #48	; 0x30
     56e:	47b0      	blx	r6

	if (padding == PAD_SPACE_AFTER) {
     570:	f1bb 0f03 	cmp.w	fp, #3
     574:	d102      	bne.n	57c <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
     576:	1be4      	subs	r4, r4, r7
		while (remaining-- > 0) {
     578:	2c00      	cmp	r4, #0
     57a:	dc0e      	bgt.n	59a <_printk_dec_ulong+0x8e>
			out(' ', ctx);
		}
	}
}
     57c:	b005      	add	sp, #20
     57e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     582:	4544      	cmp	r4, r8
     584:	dbe5      	blt.n	552 <_printk_dec_ulong+0x46>
				&& padding < PAD_SPACE_AFTER) {
     586:	f1bb 0f02 	cmp.w	fp, #2
     58a:	d8e2      	bhi.n	552 <_printk_dec_ulong+0x46>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     58c:	4651      	mov	r1, sl
     58e:	9802      	ldr	r0, [sp, #8]
     590:	9203      	str	r2, [sp, #12]
			digits++;
     592:	3701      	adds	r7, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     594:	47b0      	blx	r6
			digits++;
     596:	9a03      	ldr	r2, [sp, #12]
     598:	e7db      	b.n	552 <_printk_dec_ulong+0x46>
			out(' ', ctx);
     59a:	4651      	mov	r1, sl
     59c:	2020      	movs	r0, #32
     59e:	47b0      	blx	r6
     5a0:	3c01      	subs	r4, #1
     5a2:	e7e9      	b.n	578 <_printk_dec_ulong+0x6c>
     5a4:	3b9aca00 	.word	0x3b9aca00

000005a8 <__printk_hook_install>:
	_char_out = fn;
     5a8:	4b01      	ldr	r3, [pc, #4]	; (5b0 <__printk_hook_install+0x8>)
     5aa:	6018      	str	r0, [r3, #0]
}
     5ac:	4770      	bx	lr
     5ae:	bf00      	nop
     5b0:	20000000 	.word	0x20000000

000005b4 <z_vprintk>:
{
     5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
     5b8:	2700      	movs	r7, #0
{
     5ba:	4605      	mov	r5, r0
     5bc:	468b      	mov	fp, r1
	int min_width = -1;
     5be:	f04f 39ff 	mov.w	r9, #4294967295
	enum pad_type padding = PAD_NONE;
     5c2:	46b8      	mov	r8, r7
{
     5c4:	461c      	mov	r4, r3
     5c6:	b08d      	sub	sp, #52	; 0x34
     5c8:	1e53      	subs	r3, r2, #1
     5ca:	9303      	str	r3, [sp, #12]
			might_format = 0;
     5cc:	2600      	movs	r6, #0
					break;
     5ce:	e005      	b.n	5dc <z_vprintk+0x28>
		if (!might_format) {
     5d0:	b96e      	cbnz	r6, 5ee <z_vprintk+0x3a>
			if (*fmt != '%') {
     5d2:	2825      	cmp	r0, #37	; 0x25
     5d4:	f000 8171 	beq.w	8ba <CONFIG_ISR_STACK_SIZE+0xba>
				out((int)*fmt, ctx);
     5d8:	4659      	mov	r1, fp
     5da:	47a8      	blx	r5
	while (*fmt) {
     5dc:	9b03      	ldr	r3, [sp, #12]
     5de:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     5e2:	9303      	str	r3, [sp, #12]
     5e4:	2800      	cmp	r0, #0
     5e6:	d1f3      	bne.n	5d0 <z_vprintk+0x1c>
}
     5e8:	b00d      	add	sp, #52	; 0x34
     5ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
     5ee:	287a      	cmp	r0, #122	; 0x7a
     5f0:	d80a      	bhi.n	608 <z_vprintk+0x54>
     5f2:	2862      	cmp	r0, #98	; 0x62
     5f4:	d810      	bhi.n	618 <z_vprintk+0x64>
     5f6:	2830      	cmp	r0, #48	; 0x30
     5f8:	d054      	beq.n	6a4 <z_vprintk+0xf0>
     5fa:	d845      	bhi.n	688 <z_vprintk+0xd4>
     5fc:	2825      	cmp	r0, #37	; 0x25
     5fe:	f000 815a 	beq.w	8b6 <CONFIG_ISR_STACK_SIZE+0xb6>
     602:	282d      	cmp	r0, #45	; 0x2d
     604:	f000 815f 	beq.w	8c6 <CONFIG_ISR_STACK_SIZE+0xc6>
					out((int)'%', ctx);
     608:	4659      	mov	r1, fp
     60a:	2025      	movs	r0, #37	; 0x25
     60c:	47a8      	blx	r5
					out((int)*fmt, ctx);
     60e:	4659      	mov	r1, fp
     610:	9b03      	ldr	r3, [sp, #12]
     612:	7818      	ldrb	r0, [r3, #0]
     614:	47a8      	blx	r5
     616:	e7d9      	b.n	5cc <z_vprintk+0x18>
     618:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
     61c:	2b17      	cmp	r3, #23
     61e:	d8f3      	bhi.n	608 <z_vprintk+0x54>
     620:	a201      	add	r2, pc, #4	; (adr r2, 628 <z_vprintk+0x74>)
     622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     626:	bf00      	nop
     628:	000008af 	.word	0x000008af
     62c:	000006f3 	.word	0x000006f3
     630:	00000609 	.word	0x00000609
     634:	00000609 	.word	0x00000609
     638:	00000609 	.word	0x00000609
     63c:	000006d5 	.word	0x000006d5
     640:	000006f3 	.word	0x000006f3
     644:	00000609 	.word	0x00000609
     648:	00000609 	.word	0x00000609
     64c:	000006d5 	.word	0x000006d5
     650:	00000609 	.word	0x00000609
     654:	00000609 	.word	0x00000609
     658:	00000609 	.word	0x00000609
     65c:	00000795 	.word	0x00000795
     660:	00000609 	.word	0x00000609
     664:	00000609 	.word	0x00000609
     668:	0000087f 	.word	0x0000087f
     66c:	00000609 	.word	0x00000609
     670:	00000763 	.word	0x00000763
     674:	00000609 	.word	0x00000609
     678:	00000609 	.word	0x00000609
     67c:	00000691 	.word	0x00000691
     680:	00000609 	.word	0x00000609
     684:	000006d5 	.word	0x000006d5
			switch (*fmt) {
     688:	2839      	cmp	r0, #57	; 0x39
     68a:	d91a      	bls.n	6c2 <z_vprintk+0x10e>
     68c:	2858      	cmp	r0, #88	; 0x58
     68e:	d1bb      	bne.n	608 <z_vprintk+0x54>
				if (*fmt == 'p') {
     690:	9b03      	ldr	r3, [sp, #12]
     692:	781b      	ldrb	r3, [r3, #0]
     694:	2b70      	cmp	r3, #112	; 0x70
     696:	f040 8088 	bne.w	7aa <z_vprintk+0x1f6>
					x = va_arg(ap, unsigned int);
     69a:	f854 3b04 	ldr.w	r3, [r4], #4
     69e:	2200      	movs	r2, #0
     6a0:	9306      	str	r3, [sp, #24]
     6a2:	e090      	b.n	7c6 <z_vprintk+0x212>
				if (min_width < 0 && padding == PAD_NONE) {
     6a4:	f1b9 0f00 	cmp.w	r9, #0
     6a8:	da0e      	bge.n	6c8 <z_vprintk+0x114>
     6aa:	f1b8 0f00 	cmp.w	r8, #0
     6ae:	f000 810d 	beq.w	8cc <CONFIG_ISR_STACK_SIZE+0xcc>
					min_width = *fmt - '0';
     6b2:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
     6b6:	f1b8 0f00 	cmp.w	r8, #0
     6ba:	bf08      	it	eq
     6bc:	f04f 0802 	moveq.w	r8, #2
     6c0:	e78c      	b.n	5dc <z_vprintk+0x28>
				if (min_width < 0) {
     6c2:	f1b9 0f00 	cmp.w	r9, #0
     6c6:	dbf4      	blt.n	6b2 <z_vprintk+0xfe>
					min_width = 10 * min_width + *fmt - '0';
     6c8:	230a      	movs	r3, #10
     6ca:	fb03 0909 	mla	r9, r3, r9, r0
     6ce:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
     6d2:	e7f0      	b.n	6b6 <z_vprintk+0x102>
				if (*fmt == 'h' && length_mod == 'h') {
     6d4:	2868      	cmp	r0, #104	; 0x68
     6d6:	d103      	bne.n	6e0 <z_vprintk+0x12c>
     6d8:	2f68      	cmp	r7, #104	; 0x68
     6da:	d106      	bne.n	6ea <z_vprintk+0x136>
					length_mod = 'H';
     6dc:	2748      	movs	r7, #72	; 0x48
     6de:	e77d      	b.n	5dc <z_vprintk+0x28>
				} else if (*fmt == 'l' && length_mod == 'l') {
     6e0:	286c      	cmp	r0, #108	; 0x6c
     6e2:	d102      	bne.n	6ea <z_vprintk+0x136>
     6e4:	2f6c      	cmp	r7, #108	; 0x6c
     6e6:	f000 80f4 	beq.w	8d2 <CONFIG_ISR_STACK_SIZE+0xd2>
				} else if (length_mod == 0) {
     6ea:	2f00      	cmp	r7, #0
     6ec:	d18c      	bne.n	608 <z_vprintk+0x54>
     6ee:	4607      	mov	r7, r0
     6f0:	e774      	b.n	5dc <z_vprintk+0x28>
				if (length_mod == 'z') {
     6f2:	2f7a      	cmp	r7, #122	; 0x7a
     6f4:	d102      	bne.n	6fc <z_vprintk+0x148>
					d = va_arg(ap, int);
     6f6:	f854 6b04 	ldr.w	r6, [r4], #4
     6fa:	e021      	b.n	740 <z_vprintk+0x18c>
				} else if (length_mod == 'l') {
     6fc:	2f6c      	cmp	r7, #108	; 0x6c
     6fe:	d0fa      	beq.n	6f6 <z_vprintk+0x142>
				} else if (length_mod == 'L') {
     700:	2f4c      	cmp	r7, #76	; 0x4c
     702:	d1f8      	bne.n	6f6 <z_vprintk+0x142>
					long long lld = va_arg(ap, long long);
     704:	3407      	adds	r4, #7
     706:	f024 0407 	bic.w	r4, r4, #7
     70a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
     70e:	e9cd 2304 	strd	r2, r3, [sp, #16]
					if (lld > __LONG_MAX__ ||
     712:	9b04      	ldr	r3, [sp, #16]
     714:	f04f 30ff 	mov.w	r0, #4294967295
     718:	f113 4100 	adds.w	r1, r3, #2147483648	; 0x80000000
     71c:	9b05      	ldr	r3, [sp, #20]
     71e:	9108      	str	r1, [sp, #32]
     720:	f143 0100 	adc.w	r1, r3, #0
     724:	9109      	str	r1, [sp, #36]	; 0x24
     726:	2100      	movs	r1, #0
     728:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
     72c:	4299      	cmp	r1, r3
     72e:	bf08      	it	eq
     730:	4290      	cmpeq	r0, r2
     732:	d204      	bcs.n	73e <z_vprintk+0x18a>
						print_err(out, ctx);
     734:	4659      	mov	r1, fp
     736:	4628      	mov	r0, r5
     738:	f005 faba 	bl	5cb0 <print_err>
						break;
     73c:	e746      	b.n	5cc <z_vprintk+0x18>
					d = lld;
     73e:	9e04      	ldr	r6, [sp, #16]
				if (d < 0) {
     740:	2e00      	cmp	r6, #0
     742:	da05      	bge.n	750 <z_vprintk+0x19c>
					out((int)'-', ctx);
     744:	4659      	mov	r1, fp
     746:	202d      	movs	r0, #45	; 0x2d
     748:	47a8      	blx	r5
					d = -d;
     74a:	4276      	negs	r6, r6
					min_width--;
     74c:	f109 39ff 	add.w	r9, r9, #4294967295
				_printk_dec_ulong(out, ctx, d, padding,
     750:	4643      	mov	r3, r8
     752:	4632      	mov	r2, r6
     754:	f8cd 9000 	str.w	r9, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
     758:	4659      	mov	r1, fp
     75a:	4628      	mov	r0, r5
     75c:	f7ff fed6 	bl	50c <_printk_dec_ulong>
				break;
     760:	e734      	b.n	5cc <z_vprintk+0x18>
				if (length_mod == 'z') {
     762:	2f7a      	cmp	r7, #122	; 0x7a
     764:	d102      	bne.n	76c <z_vprintk+0x1b8>
					u = va_arg(ap, unsigned int);
     766:	f854 2b04 	ldr.w	r2, [r4], #4
     76a:	e00f      	b.n	78c <z_vprintk+0x1d8>
				} else if (length_mod == 'l') {
     76c:	2f6c      	cmp	r7, #108	; 0x6c
     76e:	d0fa      	beq.n	766 <z_vprintk+0x1b2>
				} else if (length_mod == 'L') {
     770:	2f4c      	cmp	r7, #76	; 0x4c
     772:	d1f8      	bne.n	766 <z_vprintk+0x1b2>
					if (llu > ~0UL) {
     774:	2100      	movs	r1, #0
     776:	f04f 30ff 	mov.w	r0, #4294967295
					unsigned long long llu =
     77a:	3407      	adds	r4, #7
     77c:	f024 0407 	bic.w	r4, r4, #7
     780:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
     784:	4299      	cmp	r1, r3
     786:	bf08      	it	eq
     788:	4290      	cmpeq	r0, r2
     78a:	d3d3      	bcc.n	734 <z_vprintk+0x180>
				_printk_dec_ulong(out, ctx, u, padding,
     78c:	4643      	mov	r3, r8
     78e:	f8cd 9000 	str.w	r9, [sp]
     792:	e7e1      	b.n	758 <z_vprintk+0x1a4>
				out('0', ctx);
     794:	4659      	mov	r1, fp
     796:	2030      	movs	r0, #48	; 0x30
     798:	47a8      	blx	r5
				out('x', ctx);
     79a:	4659      	mov	r1, fp
     79c:	2078      	movs	r0, #120	; 0x78
     79e:	47a8      	blx	r5
					min_width = 8;
     7a0:	f04f 0908 	mov.w	r9, #8
				padding = PAD_ZERO_BEFORE;
     7a4:	f04f 0801 	mov.w	r8, #1
     7a8:	e772      	b.n	690 <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
     7aa:	2f6c      	cmp	r7, #108	; 0x6c
     7ac:	f43f af75 	beq.w	69a <z_vprintk+0xe6>
				} else if (length_mod == 'L') {
     7b0:	2f4c      	cmp	r7, #76	; 0x4c
     7b2:	f47f af72 	bne.w	69a <z_vprintk+0xe6>
					x = va_arg(ap, unsigned long long);
     7b6:	1de3      	adds	r3, r4, #7
     7b8:	f023 0307 	bic.w	r3, r3, #7
     7bc:	461c      	mov	r4, r3
     7be:	f854 2b08 	ldr.w	r2, [r4], #8
     7c2:	9206      	str	r2, [sp, #24]
     7c4:	685a      	ldr	r2, [r3, #4]
	int digits = 0;
     7c6:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
     7c8:	2310      	movs	r3, #16
	int shift = sizeof(num) * 8;
     7ca:	f04f 0a40 	mov.w	sl, #64	; 0x40
	int digits = 0;
     7ce:	9104      	str	r1, [sp, #16]
	int found_largest_digit = 0;
     7d0:	9107      	str	r1, [sp, #28]
		shift -= 4;
     7d2:	f1aa 0a04 	sub.w	sl, sl, #4
		nibble = (num >> shift) & 0xf;
     7d6:	9906      	ldr	r1, [sp, #24]
     7d8:	f1ca 0e20 	rsb	lr, sl, #32
     7dc:	f1aa 0c20 	sub.w	ip, sl, #32
     7e0:	fa21 f00a 	lsr.w	r0, r1, sl
     7e4:	fa02 fe0e 	lsl.w	lr, r2, lr
     7e8:	ea40 000e 	orr.w	r0, r0, lr
     7ec:	fa22 fc0c 	lsr.w	ip, r2, ip
     7f0:	ea40 000c 	orr.w	r0, r0, ip
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
     7f4:	f010 000f 	ands.w	r0, r0, #15
     7f8:	d107      	bne.n	80a <CONFIG_ISR_STACK_SIZE+0xa>
     7fa:	9907      	ldr	r1, [sp, #28]
     7fc:	b911      	cbnz	r1, 804 <CONFIG_ISR_STACK_SIZE+0x4>
     7fe:	f1ba 0f00 	cmp.w	sl, #0
     802:	d125      	bne.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
			nibble += nibble > 9 ? 87 : 48;
     804:	f04f 0c30 	mov.w	ip, #48	; 0x30
     808:	e005      	b.n	816 <CONFIG_ISR_STACK_SIZE+0x16>
     80a:	2809      	cmp	r0, #9
     80c:	bf8c      	ite	hi
     80e:	f04f 0c57 	movhi.w	ip, #87	; 0x57
     812:	f04f 0c30 	movls.w	ip, #48	; 0x30
     816:	4460      	add	r0, ip
			out((int)nibble, ctx);
     818:	4659      	mov	r1, fp
     81a:	b240      	sxtb	r0, r0
     81c:	920a      	str	r2, [sp, #40]	; 0x28
     81e:	9307      	str	r3, [sp, #28]
     820:	47a8      	blx	r5
			digits++;
     822:	9b04      	ldr	r3, [sp, #16]
	while (shift >= 4) {
     824:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			digits++;
     826:	3301      	adds	r3, #1
     828:	9304      	str	r3, [sp, #16]
	while (shift >= 4) {
     82a:	9b07      	ldr	r3, [sp, #28]
     82c:	f1ba 0f00 	cmp.w	sl, #0
     830:	d123      	bne.n	87a <CONFIG_ISR_STACK_SIZE+0x7a>
	if (padding == PAD_SPACE_AFTER) {
     832:	f1b8 0f03 	cmp.w	r8, #3
     836:	f47f aec9 	bne.w	5cc <z_vprintk+0x18>
		remaining = min_width * 2 - digits;
     83a:	9b04      	ldr	r3, [sp, #16]
     83c:	ebc3 0649 	rsb	r6, r3, r9, lsl #1
		while (remaining-- > 0) {
     840:	2e00      	cmp	r6, #0
     842:	f77f aec3 	ble.w	5cc <z_vprintk+0x18>
			out(' ', ctx);
     846:	4659      	mov	r1, fp
     848:	2020      	movs	r0, #32
     84a:	47a8      	blx	r5
     84c:	3e01      	subs	r6, #1
     84e:	e7f7      	b.n	840 <CONFIG_ISR_STACK_SIZE+0x40>
		if (remaining-- <= min_width) {
     850:	1e59      	subs	r1, r3, #1
     852:	4599      	cmp	r9, r3
     854:	910a      	str	r1, [sp, #40]	; 0x28
     856:	db07      	blt.n	868 <CONFIG_ISR_STACK_SIZE+0x68>
			if (padding == PAD_ZERO_BEFORE) {
     858:	f1b8 0f01 	cmp.w	r8, #1
     85c:	d106      	bne.n	86c <CONFIG_ISR_STACK_SIZE+0x6c>
				out('0', ctx);
     85e:	4659      	mov	r1, fp
     860:	2030      	movs	r0, #48	; 0x30
     862:	920b      	str	r2, [sp, #44]	; 0x2c
				out(' ', ctx);
     864:	47a8      	blx	r5
     866:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
			nibble += nibble > 9 ? 87 : 48;
     868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     86a:	e7b2      	b.n	7d2 <z_vprintk+0x21e>
			} else if (padding == PAD_SPACE_BEFORE) {
     86c:	f1b8 0f02 	cmp.w	r8, #2
     870:	d1fa      	bne.n	868 <CONFIG_ISR_STACK_SIZE+0x68>
				out(' ', ctx);
     872:	4659      	mov	r1, fp
     874:	2020      	movs	r0, #32
     876:	920b      	str	r2, [sp, #44]	; 0x2c
     878:	e7f4      	b.n	864 <CONFIG_ISR_STACK_SIZE+0x64>
			found_largest_digit = 1;
     87a:	9607      	str	r6, [sp, #28]
     87c:	e7a9      	b.n	7d2 <z_vprintk+0x21e>
				char *s = va_arg(ap, char *);
     87e:	f854 6b04 	ldr.w	r6, [r4], #4
				while (*s) {
     882:	46b2      	mov	sl, r6
     884:	4653      	mov	r3, sl
     886:	f81a 0b01 	ldrb.w	r0, [sl], #1
     88a:	b968      	cbnz	r0, 8a8 <CONFIG_ISR_STACK_SIZE+0xa8>
				if (padding == PAD_SPACE_AFTER) {
     88c:	f1b8 0f03 	cmp.w	r8, #3
     890:	d121      	bne.n	8d6 <CONFIG_ISR_STACK_SIZE+0xd6>
					int remaining = min_width - (s - start);
     892:	1b9e      	subs	r6, r3, r6
     894:	eba9 0606 	sub.w	r6, r9, r6
					while (remaining-- > 0) {
     898:	2e00      	cmp	r6, #0
     89a:	f77f ae97 	ble.w	5cc <z_vprintk+0x18>
						out(' ', ctx);
     89e:	4659      	mov	r1, fp
     8a0:	2020      	movs	r0, #32
     8a2:	47a8      	blx	r5
     8a4:	3e01      	subs	r6, #1
     8a6:	e7f7      	b.n	898 <CONFIG_ISR_STACK_SIZE+0x98>
					out((int)(*s++), ctx);
     8a8:	4659      	mov	r1, fp
     8aa:	47a8      	blx	r5
     8ac:	e7ea      	b.n	884 <CONFIG_ISR_STACK_SIZE+0x84>
				out(c, ctx);
     8ae:	4659      	mov	r1, fp
     8b0:	f854 0b04 	ldr.w	r0, [r4], #4
     8b4:	e6ae      	b.n	614 <z_vprintk+0x60>
				out((int)'%', ctx);
     8b6:	4659      	mov	r1, fp
     8b8:	e6ac      	b.n	614 <z_vprintk+0x60>
				length_mod = 0;
     8ba:	4637      	mov	r7, r6
				padding = PAD_NONE;
     8bc:	46b0      	mov	r8, r6
				min_width = -1;
     8be:	f04f 39ff 	mov.w	r9, #4294967295
				might_format = 1;
     8c2:	2601      	movs	r6, #1
     8c4:	e68a      	b.n	5dc <z_vprintk+0x28>
			switch (*fmt) {
     8c6:	f04f 0803 	mov.w	r8, #3
     8ca:	e687      	b.n	5dc <z_vprintk+0x28>
					padding = PAD_ZERO_BEFORE;
     8cc:	f04f 0801 	mov.w	r8, #1
     8d0:	e684      	b.n	5dc <z_vprintk+0x28>
					length_mod = 'L';
     8d2:	274c      	movs	r7, #76	; 0x4c
     8d4:	e682      	b.n	5dc <z_vprintk+0x28>
			might_format = 0;
     8d6:	4606      	mov	r6, r0
		++fmt;
     8d8:	e680      	b.n	5dc <z_vprintk+0x28>
     8da:	bf00      	nop

000008dc <vprintk>:
{
     8dc:	b507      	push	{r0, r1, r2, lr}
     8de:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     8e0:	2100      	movs	r1, #0
{
     8e2:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     8e4:	9101      	str	r1, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
     8e6:	4803      	ldr	r0, [pc, #12]	; (8f4 <vprintk+0x18>)
     8e8:	a901      	add	r1, sp, #4
     8ea:	f7ff fe63 	bl	5b4 <z_vprintk>
}
     8ee:	b003      	add	sp, #12
     8f0:	f85d fb04 	ldr.w	pc, [sp], #4
     8f4:	000004fd 	.word	0x000004fd

000008f8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     8f8:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
     8fa:	2500      	movs	r5, #0
{
     8fc:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
     8fe:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
     902:	4604      	mov	r4, r0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     904:	a901      	add	r1, sp, #4
     906:	4805      	ldr	r0, [pc, #20]	; (91c <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
     908:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     90a:	f7ff fe53 	bl	5b4 <z_vprintk>

	if (ctx.count < ctx.max) {
     90e:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
     912:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     914:	bfb8      	it	lt
     916:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     918:	b005      	add	sp, #20
     91a:	bd30      	pop	{r4, r5, pc}
     91c:	00005ccd 	.word	0x00005ccd

00000920 <nordicsemi_nrf53_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     920:	f04f 0320 	mov.w	r3, #32
     924:	f3ef 8111 	mrs	r1, BASEPRI
     928:	f383 8811 	msr	BASEPRI, r3
     92c:	f3bf 8f6f 	isb	sy
	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_CACHE
#ifdef CONFIG_SOC_NRF5340_CPUAPP
	/* Enable the instruction & data cache */
	NRF_CACHE->ENABLE = CACHE_ENABLE_ENABLE_Msk;
     930:	2301      	movs	r3, #1
     932:	4a09      	ldr	r2, [pc, #36]	; (958 <nordicsemi_nrf53_init+0x38>)
     934:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
#endif /* CONFIG_SOC_NRF5340_CPUNET */
#endif

#if defined(CONFIG_SOC_NRF5340_CPUAPP) && \
	!defined(CONFIG_TRUSTED_EXECUTION_NONSECURE)
	*((u32_t *)0x500046D0) = 0x1;
     938:	f502 525b 	add.w	r2, r2, #14016	; 0x36c0
     93c:	3210      	adds	r2, #16
#endif

#if defined(CONFIG_SOC_DCDC_NRF53X_APP)
	NRF_REGULATORS->VREGMAIN.DCDCEN = 1;
     93e:	6353      	str	r3, [r2, #52]	; 0x34
	*((u32_t *)0x500046D0) = 0x1;
     940:	6013      	str	r3, [r2, #0]
#endif
#if defined(CONFIG_SOC_DCDC_NRF53X_NET)
	NRF_REGULATORS->VREGRADIO.DCDCEN = 1;
     942:	f8c2 3234 	str.w	r3, [r2, #564]	; 0x234
#endif
#if defined(CONFIG_SOC_DCDC_NRF53X_HV)
	NRF_REGULATORS->VREGH.DCDCEN = 1;
     946:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     94a:	f381 8811 	msr	BASEPRI, r1
     94e:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     952:	2000      	movs	r0, #0
     954:	4770      	bx	lr
     956:	bf00      	nop
     958:	50001000 	.word	0x50001000

0000095c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
     95c:	b148      	cbz	r0, 972 <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
     95e:	4b05      	ldr	r3, [pc, #20]	; (974 <arch_busy_wait+0x18>)
     960:	681a      	ldr	r2, [r3, #0]
     962:	4b05      	ldr	r3, [pc, #20]	; (978 <arch_busy_wait+0x1c>)
     964:	fbb2 f2f3 	udiv	r2, r2, r3
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
     968:	4b04      	ldr	r3, [pc, #16]	; (97c <arch_busy_wait+0x20>)
    delay_cycles(cycles);
     96a:	4350      	muls	r0, r2
     96c:	f043 0301 	orr.w	r3, r3, #1
     970:	4718      	bx	r3

void arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
     972:	4770      	bx	lr
     974:	2000006c 	.word	0x2000006c
     978:	000f4240 	.word	0x000f4240
     97c:	00006db0 	.word	0x00006db0

00000980 <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
     980:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
     982:	2200      	movs	r2, #0
{
     984:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
     986:	490f      	ldr	r1, [pc, #60]	; (9c4 <enable_logger+0x44>)
     988:	480f      	ldr	r0, [pc, #60]	; (9c8 <enable_logger+0x48>)
     98a:	f006 f859 	bl	6a40 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
     98e:	2200      	movs	r2, #0
     990:	2300      	movs	r3, #0
     992:	2400      	movs	r4, #0
     994:	e9cd 2306 	strd	r2, r3, [sp, #24]
     998:	230e      	movs	r3, #14
     99a:	4d0c      	ldr	r5, [pc, #48]	; (9cc <enable_logger+0x4c>)
     99c:	e9cd 3403 	strd	r3, r4, [sp, #12]
     9a0:	f44f 7240 	mov.w	r2, #768	; 0x300
     9a4:	4628      	mov	r0, r5
     9a6:	e9cd 4401 	strd	r4, r4, [sp, #4]
     9aa:	4b09      	ldr	r3, [pc, #36]	; (9d0 <enable_logger+0x50>)
     9ac:	4909      	ldr	r1, [pc, #36]	; (9d4 <enable_logger+0x54>)
     9ae:	9400      	str	r4, [sp, #0]
     9b0:	f004 fcde 	bl	5370 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
     9b4:	4908      	ldr	r1, [pc, #32]	; (9d8 <enable_logger+0x58>)
     9b6:	4628      	mov	r0, r5
     9b8:	f006 f839 	bl	6a2e <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
     9bc:	4620      	mov	r0, r4
     9be:	b009      	add	sp, #36	; 0x24
     9c0:	bd30      	pop	{r4, r5, pc}
     9c2:	bf00      	nop
     9c4:	000009dd 	.word	0x000009dd
     9c8:	20000100 	.word	0x20000100
     9cc:	20000168 	.word	0x20000168
     9d0:	00000e91 	.word	0x00000e91
     9d4:	20000418 	.word	0x20000418
     9d8:	00006f9e 	.word	0x00006f9e

000009dc <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
     9dc:	4801      	ldr	r0, [pc, #4]	; (9e4 <log_process_thread_timer_expiry_fn+0x8>)
     9de:	f004 bba7 	b.w	5130 <z_impl_k_sem_give>
     9e2:	bf00      	nop
     9e4:	200000d8 	.word	0x200000d8

000009e8 <z_log_get_s_mask>:
	__ASSERT_NO_MSG(nargs <= 8*sizeof(mask));
     9e8:	2920      	cmp	r1, #32
{
     9ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     9ec:	4605      	mov	r5, r0
     9ee:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(nargs <= 8*sizeof(mask));
     9f0:	d909      	bls.n	a06 <z_log_get_s_mask+0x1e>
     9f2:	4914      	ldr	r1, [pc, #80]	; (a44 <z_log_get_s_mask+0x5c>)
     9f4:	4814      	ldr	r0, [pc, #80]	; (a48 <z_log_get_s_mask+0x60>)
     9f6:	235b      	movs	r3, #91	; 0x5b
     9f8:	4a14      	ldr	r2, [pc, #80]	; (a4c <z_log_get_s_mask+0x64>)
     9fa:	f005 f97a 	bl	5cf2 <printk>
     9fe:	215b      	movs	r1, #91	; 0x5b
     a00:	4812      	ldr	r0, [pc, #72]	; (a4c <z_log_get_s_mask+0x64>)
     a02:	f005 fa44 	bl	5e8e <assert_post_action>
			arm = false;
     a06:	2000      	movs	r0, #0
				mask |= BIT(arg);
     a08:	2701      	movs	r7, #1
			arm = false;
     a0a:	4603      	mov	r3, r0
     a0c:	4602      	mov	r2, r0
	while ((curr = *str++) && arg < nargs) {
     a0e:	f815 1b01 	ldrb.w	r1, [r5], #1
     a12:	b109      	cbz	r1, a18 <z_log_get_s_mask+0x30>
     a14:	42a3      	cmp	r3, r4
     a16:	d300      	bcc.n	a1a <z_log_get_s_mask+0x32>
}
     a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (curr == '%') {
     a1a:	2925      	cmp	r1, #37	; 0x25
     a1c:	d102      	bne.n	a24 <z_log_get_s_mask+0x3c>
			arm = !arm;
     a1e:	f082 0201 	eor.w	r2, r2, #1
     a22:	e7f4      	b.n	a0e <z_log_get_s_mask+0x26>
		} else if (arm && isalpha((int)curr)) {
     a24:	2a00      	cmp	r2, #0
     a26:	d0f2      	beq.n	a0e <z_log_get_s_mask+0x26>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
}

static inline int isalpha(int c)
{
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
     a28:	f041 0620 	orr.w	r6, r1, #32
     a2c:	3e61      	subs	r6, #97	; 0x61
     a2e:	2e19      	cmp	r6, #25
     a30:	d8ed      	bhi.n	a0e <z_log_get_s_mask+0x26>
			if (curr == 's') {
     a32:	2973      	cmp	r1, #115	; 0x73
				mask |= BIT(arg);
     a34:	bf04      	itt	eq
     a36:	fa07 f203 	lsleq.w	r2, r7, r3
     a3a:	4310      	orreq	r0, r2
			arg++;
     a3c:	3301      	adds	r3, #1
			arm = false;
     a3e:	2200      	movs	r2, #0
     a40:	e7e5      	b.n	a0e <z_log_get_s_mask+0x26>
     a42:	bf00      	nop
     a44:	00006fd3 	.word	0x00006fd3
     a48:	00006f74 	.word	0x00006f74
     a4c:	00006fa6 	.word	0x00006fa6

00000a50 <log_core_init>:
{
     a50:	b508      	push	{r3, lr}
		log_msg_pool_init();
     a52:	f000 fa97 	bl	f84 <log_msg_pool_init>
		log_list_init(&list);
     a56:	4809      	ldr	r0, [pc, #36]	; (a7c <log_core_init+0x2c>)
     a58:	f005 fa23 	bl	5ea2 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
     a5c:	2304      	movs	r3, #4
     a5e:	2228      	movs	r2, #40	; 0x28
     a60:	4907      	ldr	r1, [pc, #28]	; (a80 <log_core_init+0x30>)
     a62:	4808      	ldr	r0, [pc, #32]	; (a84 <log_core_init+0x34>)
     a64:	f005 ffa0 	bl	69a8 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
     a68:	4b07      	ldr	r3, [pc, #28]	; (a88 <log_core_init+0x38>)
     a6a:	4a08      	ldr	r2, [pc, #32]	; (a8c <log_core_init+0x3c>)
	log_output_timestamp_freq_set(freq);
     a6c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
     a70:	601a      	str	r2, [r3, #0]
}
     a72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
     a76:	f000 bd75 	b.w	1564 <log_output_timestamp_freq_set>
     a7a:	bf00      	nop
     a7c:	20000144 	.word	0x20000144
     a80:	20001458 	.word	0x20001458
     a84:	2000014c 	.word	0x2000014c
     a88:	20000004 	.word	0x20000004
     a8c:	00005ee7 	.word	0x00005ee7

00000a90 <dropped_notify>:
{
     a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     a92:	2500      	movs	r5, #0
     a94:	4b0d      	ldr	r3, [pc, #52]	; (acc <dropped_notify+0x3c>)
     a96:	e8d3 7fef 	ldaex	r7, [r3]
     a9a:	e8c3 5fe2 	stlex	r2, r5, [r3]
     a9e:	2a00      	cmp	r2, #0
     aa0:	d1f9      	bne.n	a96 <dropped_notify+0x6>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
     aa2:	4c0b      	ldr	r4, [pc, #44]	; (ad0 <dropped_notify+0x40>)
     aa4:	4e0b      	ldr	r6, [pc, #44]	; (ad4 <dropped_notify+0x44>)
     aa6:	1b36      	subs	r6, r6, r4
     aa8:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
     aaa:	42b5      	cmp	r5, r6
     aac:	db00      	blt.n	ab0 <dropped_notify+0x20>
}
     aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
     ab0:	4620      	mov	r0, r4
     ab2:	f005 fa0c 	bl	5ece <log_backend_is_active>
     ab6:	b128      	cbz	r0, ac4 <dropped_notify+0x34>
	if (backend->api->dropped != NULL) {
     ab8:	6823      	ldr	r3, [r4, #0]
     aba:	68db      	ldr	r3, [r3, #12]
     abc:	b113      	cbz	r3, ac4 <dropped_notify+0x34>
		backend->api->dropped(backend, cnt);
     abe:	4639      	mov	r1, r7
     ac0:	4620      	mov	r0, r4
     ac2:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
     ac4:	3501      	adds	r5, #1
     ac6:	3410      	adds	r4, #16
     ac8:	e7ef      	b.n	aaa <dropped_notify+0x1a>
     aca:	bf00      	nop
     acc:	2000013c 	.word	0x2000013c
     ad0:	00006d88 	.word	0x00006d88
     ad4:	00006d98 	.word	0x00006d98

00000ad8 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
     ad8:	4b04      	ldr	r3, [pc, #16]	; (aec <log_dropped+0x14>)
     ada:	e8d3 2fef 	ldaex	r2, [r3]
     ade:	3201      	adds	r2, #1
     ae0:	e8c3 2fe1 	stlex	r1, r2, [r3]
     ae4:	2900      	cmp	r1, #0
     ae6:	d1f8      	bne.n	ada <log_dropped+0x2>
}
     ae8:	4770      	bx	lr
     aea:	bf00      	nop
     aec:	2000013c 	.word	0x2000013c

00000af0 <log_source_name_get>:
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
     af0:	4a04      	ldr	r2, [pc, #16]	; (b04 <log_source_name_get+0x14>)
     af2:	4b05      	ldr	r3, [pc, #20]	; (b08 <log_source_name_get+0x18>)
     af4:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
     af6:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
     afa:	bf34      	ite	cc
     afc:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
     b00:	2000      	movcs	r0, #0
}
     b02:	4770      	bx	lr
     b04:	00006d40 	.word	0x00006d40
     b08:	00006d88 	.word	0x00006d88

00000b0c <log_backend_enable>:
{
     b0c:	b570      	push	{r4, r5, r6, lr}
	id += backend - log_backend_get(0);
     b0e:	4c10      	ldr	r4, [pc, #64]	; (b50 <log_backend_enable+0x44>)
{
     b10:	4605      	mov	r5, r0
	id += backend - log_backend_get(0);
     b12:	1b04      	subs	r4, r0, r4
     b14:	1124      	asrs	r4, r4, #4
     b16:	3401      	adds	r4, #1
{
     b18:	460e      	mov	r6, r1
	log_backend_id_set(backend, id);
     b1a:	b2e4      	uxtb	r4, r4
	__ASSERT_NO_MSG(backend != NULL);
     b1c:	b948      	cbnz	r0, b32 <log_backend_enable+0x26>
     b1e:	490d      	ldr	r1, [pc, #52]	; (b54 <log_backend_enable+0x48>)
     b20:	480d      	ldr	r0, [pc, #52]	; (b58 <log_backend_enable+0x4c>)
     b22:	23c0      	movs	r3, #192	; 0xc0
     b24:	4a0d      	ldr	r2, [pc, #52]	; (b5c <log_backend_enable+0x50>)
     b26:	f005 f8e4 	bl	5cf2 <printk>
     b2a:	21c0      	movs	r1, #192	; 0xc0
     b2c:	480b      	ldr	r0, [pc, #44]	; (b5c <log_backend_enable+0x50>)
     b2e:	f005 f9ae 	bl	5e8e <assert_post_action>
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	__ASSERT_NO_MSG(backend != NULL);
	backend->cb->ctx = ctx;
	backend->cb->active = true;
     b32:	2201      	movs	r2, #1
	backend->cb->id = id;
     b34:	686b      	ldr	r3, [r5, #4]
     b36:	711c      	strb	r4, [r3, #4]
	if (!backend_attached) {
     b38:	4c09      	ldr	r4, [pc, #36]	; (b60 <log_backend_enable+0x54>)
	backend->cb->active = true;
     b3a:	715a      	strb	r2, [r3, #5]
     b3c:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
     b3e:	601e      	str	r6, [r3, #0]
     b40:	b912      	cbnz	r2, b48 <log_backend_enable+0x3c>
     b42:	4808      	ldr	r0, [pc, #32]	; (b64 <log_backend_enable+0x58>)
     b44:	f004 faf4 	bl	5130 <z_impl_k_sem_give>
	backend_attached = true;
     b48:	2301      	movs	r3, #1
     b4a:	7023      	strb	r3, [r4, #0]
}
     b4c:	bd70      	pop	{r4, r5, r6, pc}
     b4e:	bf00      	nop
     b50:	00006d88 	.word	0x00006d88
     b54:	0000701c 	.word	0x0000701c
     b58:	00006f74 	.word	0x00006f74
     b5c:	00006feb 	.word	0x00006feb
     b60:	20000412 	.word	0x20000412
     b64:	200000d8 	.word	0x200000d8

00000b68 <log_init>:
	return __log_backends_end - __log_backends_start;
     b68:	4b17      	ldr	r3, [pc, #92]	; (bc8 <log_init+0x60>)
     b6a:	4a18      	ldr	r2, [pc, #96]	; (bcc <log_init+0x64>)
{
     b6c:	b570      	push	{r4, r5, r6, lr}
     b6e:	1a9b      	subs	r3, r3, r2
	assert(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
     b70:	2b9f      	cmp	r3, #159	; 0x9f
     b72:	ea4f 1623 	mov.w	r6, r3, asr #4
     b76:	d90b      	bls.n	b90 <log_init+0x28>
     b78:	4915      	ldr	r1, [pc, #84]	; (bd0 <log_init+0x68>)
     b7a:	4816      	ldr	r0, [pc, #88]	; (bd4 <log_init+0x6c>)
     b7c:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
     b80:	4a15      	ldr	r2, [pc, #84]	; (bd8 <log_init+0x70>)
     b82:	f005 f8b6 	bl	5cf2 <printk>
     b86:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
     b8a:	4813      	ldr	r0, [pc, #76]	; (bd8 <log_init+0x70>)
     b8c:	f005 f97f 	bl	5e8e <assert_post_action>
     b90:	4b12      	ldr	r3, [pc, #72]	; (bdc <log_init+0x74>)
     b92:	e8d3 4fef 	ldaex	r4, [r3]
     b96:	1c62      	adds	r2, r4, #1
     b98:	e8c3 2fe1 	stlex	r1, r2, [r3]
     b9c:	2900      	cmp	r1, #0
     b9e:	d1f8      	bne.n	b92 <log_init+0x2a>
	if (atomic_inc(&initialized) != 0) {
     ba0:	b914      	cbnz	r4, ba8 <log_init+0x40>
     ba2:	4d0a      	ldr	r5, [pc, #40]	; (bcc <log_init+0x64>)
	for (i = 0; i < log_backend_count_get(); i++) {
     ba4:	42b4      	cmp	r4, r6
     ba6:	db00      	blt.n	baa <log_init+0x42>
}
     ba8:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
     baa:	7b2b      	ldrb	r3, [r5, #12]
     bac:	b143      	cbz	r3, bc0 <log_init+0x58>
			if (backend->api->init != NULL) {
     bae:	682b      	ldr	r3, [r5, #0]
     bb0:	695b      	ldr	r3, [r3, #20]
     bb2:	b103      	cbz	r3, bb6 <log_init+0x4e>
				backend->api->init();
     bb4:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
     bb6:	2204      	movs	r2, #4
     bb8:	2100      	movs	r1, #0
     bba:	4628      	mov	r0, r5
     bbc:	f7ff ffa6 	bl	b0c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
     bc0:	3401      	adds	r4, #1
     bc2:	3510      	adds	r5, #16
     bc4:	e7ee      	b.n	ba4 <log_init+0x3c>
     bc6:	bf00      	nop
     bc8:	00006d98 	.word	0x00006d98
     bcc:	00006d88 	.word	0x00006d88
     bd0:	00007033 	.word	0x00007033
     bd4:	00006f74 	.word	0x00006f74
     bd8:	00006fa6 	.word	0x00006fa6
     bdc:	20000140 	.word	0x20000140

00000be0 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
     be0:	4b14      	ldr	r3, [pc, #80]	; (c34 <log_strdup+0x54>)
{
     be2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
     be4:	4298      	cmp	r0, r3
{
     be6:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
     be8:	d302      	bcc.n	bf0 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
     bea:	4b13      	ldr	r3, [pc, #76]	; (c38 <log_strdup+0x58>)
     bec:	4298      	cmp	r0, r3
     bee:	d31c      	bcc.n	c2a <log_strdup+0x4a>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
     bf0:	2200      	movs	r2, #0
     bf2:	2300      	movs	r3, #0
     bf4:	4811      	ldr	r0, [pc, #68]	; (c3c <log_strdup+0x5c>)
     bf6:	a901      	add	r1, sp, #4
     bf8:	f003 f8b8 	bl	3d6c <k_mem_slab_alloc>
	if (err != 0) {
     bfc:	4605      	mov	r5, r0
     bfe:	b9b8      	cbnz	r0, c30 <log_strdup+0x50>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     c00:	2201      	movs	r2, #1
     c02:	9b01      	ldr	r3, [sp, #4]
     c04:	e8d3 1fef 	ldaex	r1, [r3]
     c08:	e8c3 2fe0 	stlex	r0, r2, [r3]
     c0c:	2800      	cmp	r0, #0
     c0e:	d1f9      	bne.n	c04 <log_strdup+0x24>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
     c10:	9801      	ldr	r0, [sp, #4]
     c12:	4621      	mov	r1, r4
     c14:	221f      	movs	r2, #31
     c16:	3004      	adds	r0, #4
     c18:	f005 fc3e 	bl	6498 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
     c1c:	237e      	movs	r3, #126	; 0x7e
     c1e:	9c01      	ldr	r4, [sp, #4]
     c20:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
     c24:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return dup->buf;
     c28:	3404      	adds	r4, #4
}
     c2a:	4620      	mov	r0, r4
     c2c:	b003      	add	sp, #12
     c2e:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
     c30:	4c03      	ldr	r4, [pc, #12]	; (c40 <log_strdup+0x60>)
     c32:	e7fa      	b.n	c2a <log_strdup+0x4a>
     c34:	00006ab8 	.word	0x00006ab8
     c38:	0000871c 	.word	0x0000871c
     c3c:	2000014c 	.word	0x2000014c
     c40:	00007057 	.word	0x00007057

00000c44 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (u8_t *)buf);
     c44:	b148      	cbz	r0, c5a <log_is_strdup+0x16>
     c46:	4b05      	ldr	r3, [pc, #20]	; (c5c <log_is_strdup+0x18>)
     c48:	4298      	cmp	r0, r3
     c4a:	d305      	bcc.n	c58 <log_is_strdup+0x14>
     c4c:	33a0      	adds	r3, #160	; 0xa0
     c4e:	4298      	cmp	r0, r3
     c50:	bf2c      	ite	cs
     c52:	2000      	movcs	r0, #0
     c54:	2001      	movcc	r0, #1
     c56:	4770      	bx	lr
     c58:	2000      	movs	r0, #0
}
     c5a:	4770      	bx	lr
     c5c:	20001458 	.word	0x20001458

00000c60 <z_impl_log_process>:
	if (!backend_attached && !bypass) {
     c60:	4b4c      	ldr	r3, [pc, #304]	; (d94 <z_impl_log_process+0x134>)
{
     c62:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
     c66:	781b      	ldrb	r3, [r3, #0]
{
     c68:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
     c6a:	b903      	cbnz	r3, c6e <z_impl_log_process+0xe>
     c6c:	b340      	cbz	r0, cc0 <z_impl_log_process+0x60>
	__asm__ volatile(
     c6e:	f04f 0320 	mov.w	r3, #32
     c72:	f3ef 8611 	mrs	r6, BASEPRI
     c76:	f383 8811 	msr	BASEPRI, r3
     c7a:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
     c7e:	4846      	ldr	r0, [pc, #280]	; (d98 <z_impl_log_process+0x138>)
     c80:	f005 f91f 	bl	5ec2 <log_list_head_get>
     c84:	4605      	mov	r5, r0
	__asm__ volatile(
     c86:	f386 8811 	msr	BASEPRI, r6
     c8a:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
     c8e:	b158      	cbz	r0, ca8 <z_impl_log_process+0x48>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
     c90:	4b42      	ldr	r3, [pc, #264]	; (d9c <z_impl_log_process+0x13c>)
     c92:	e8d3 2fef 	ldaex	r2, [r3]
     c96:	3a01      	subs	r2, #1
     c98:	e8c3 2fe1 	stlex	r1, r2, [r3]
     c9c:	2900      	cmp	r1, #0
     c9e:	d1f8      	bne.n	c92 <z_impl_log_process+0x32>
	if (!bypass) {
     ca0:	b194      	cbz	r4, cc8 <z_impl_log_process+0x68>
	log_msg_put(msg);
     ca2:	4628      	mov	r0, r5
     ca4:	f005 fa02 	bl	60ac <log_msg_put>
	if (!bypass && dropped_cnt) {
     ca8:	b924      	cbnz	r4, cb4 <z_impl_log_process+0x54>
     caa:	4b3d      	ldr	r3, [pc, #244]	; (da0 <z_impl_log_process+0x140>)
     cac:	681b      	ldr	r3, [r3, #0]
     cae:	b10b      	cbz	r3, cb4 <z_impl_log_process+0x54>
		dropped_notify();
     cb0:	f7ff feee 	bl	a90 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
     cb4:	4838      	ldr	r0, [pc, #224]	; (d98 <z_impl_log_process+0x138>)
     cb6:	f005 f902 	bl	5ebe <log_list_head_peek>
     cba:	1e04      	subs	r4, r0, #0
     cbc:	bf18      	it	ne
     cbe:	2401      	movne	r4, #1
}
     cc0:	4620      	mov	r0, r4
     cc2:	b003      	add	sp, #12
     cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
     cc8:	4b36      	ldr	r3, [pc, #216]	; (da4 <z_impl_log_process+0x144>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
     cca:	781b      	ldrb	r3, [r3, #0]
     ccc:	b9b3      	cbnz	r3, cfc <z_impl_log_process+0x9c>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
     cce:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
     cd0:	07db      	lsls	r3, r3, #31
     cd2:	d413      	bmi.n	cfc <z_impl_log_process+0x9c>
	msg_str = log_msg_str_get(msg);
     cd4:	f005 f9f9 	bl	60ca <log_msg_str_get>
     cd8:	4681      	mov	r9, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
     cda:	4628      	mov	r0, r5
     cdc:	f005 f9c4 	bl	6068 <log_msg_nargs_get>
     ce0:	4601      	mov	r1, r0
     ce2:	4648      	mov	r0, r9
     ce4:	f7ff fe80 	bl	9e8 <z_log_get_s_mask>
     ce8:	4607      	mov	r7, r0
	return ((u8_t *)data - (u8_t *)__log_const_start)/
     cea:	4a2f      	ldr	r2, [pc, #188]	; (da8 <z_impl_log_process+0x148>)
     cec:	4b2f      	ldr	r3, [pc, #188]	; (dac <z_impl_log_process+0x14c>)
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
     cee:	f8df a0e0 	ldr.w	sl, [pc, #224]	; dd0 <z_impl_log_process+0x170>
     cf2:	1a9b      	subs	r3, r3, r2
     cf4:	ea4f 0bd3 	mov.w	fp, r3, lsr #3
     cf8:	9201      	str	r2, [sp, #4]
	while (mask) {
     cfa:	b937      	cbnz	r7, d0a <z_impl_log_process+0xaa>
     cfc:	4e2c      	ldr	r6, [pc, #176]	; (db0 <z_impl_log_process+0x150>)
     cfe:	4f2d      	ldr	r7, [pc, #180]	; (db4 <z_impl_log_process+0x154>)
     d00:	f04f 0800 	mov.w	r8, #0
     d04:	1bbf      	subs	r7, r7, r6
     d06:	113f      	asrs	r7, r7, #4
     d08:	e041      	b.n	d8e <z_impl_log_process+0x12e>
		idx = 31 - __builtin_clz(mask);
     d0a:	fab7 f887 	clz	r8, r7
     d0e:	f1c8 081f 	rsb	r8, r8, #31
		str = (const char *)log_msg_arg_get(msg, idx);
     d12:	4641      	mov	r1, r8
     d14:	4628      	mov	r0, r5
     d16:	f005 f9aa 	bl	606e <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
     d1a:	4b27      	ldr	r3, [pc, #156]	; (db8 <z_impl_log_process+0x158>)
		str = (const char *)log_msg_arg_get(msg, idx);
     d1c:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
     d1e:	4298      	cmp	r0, r3
     d20:	d302      	bcc.n	d28 <z_impl_log_process+0xc8>
		if (!is_rodata(str) && !log_is_strdup(str) &&
     d22:	4b26      	ldr	r3, [pc, #152]	; (dbc <z_impl_log_process+0x15c>)
     d24:	4298      	cmp	r0, r3
     d26:	d320      	bcc.n	d6a <z_impl_log_process+0x10a>
     d28:	4610      	mov	r0, r2
     d2a:	f7ff ff8b 	bl	c44 <log_is_strdup>
     d2e:	4606      	mov	r6, r0
     d30:	b9d8      	cbnz	r0, d6a <z_impl_log_process+0x10a>
     d32:	4b23      	ldr	r3, [pc, #140]	; (dc0 <z_impl_log_process+0x160>)
     d34:	429a      	cmp	r2, r3
     d36:	d018      	beq.n	d6a <z_impl_log_process+0x10a>
	return msg->hdr.ids.source_id;
     d38:	896b      	ldrh	r3, [r5, #10]
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
     d3a:	4922      	ldr	r1, [pc, #136]	; (dc4 <z_impl_log_process+0x164>)
     d3c:	f3c3 1389 	ubfx	r3, r3, #6, #10
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
     d40:	455b      	cmp	r3, fp
	return __log_const_start[source_id].name;
     d42:	bf38      	it	cc
     d44:	9a01      	ldrcc	r2, [sp, #4]
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
     d46:	4820      	ldr	r0, [pc, #128]	; (dc8 <z_impl_log_process+0x168>)
     d48:	bf38      	it	cc
     d4a:	f852 6033 	ldrcc.w	r6, [r2, r3, lsl #3]
     d4e:	23ad      	movs	r3, #173	; 0xad
     d50:	4652      	mov	r2, sl
     d52:	f004 ffce 	bl	5cf2 <printk>
     d56:	4641      	mov	r1, r8
     d58:	481c      	ldr	r0, [pc, #112]	; (dcc <z_impl_log_process+0x16c>)
     d5a:	464b      	mov	r3, r9
     d5c:	4632      	mov	r2, r6
     d5e:	f004 ffc8 	bl	5cf2 <printk>
     d62:	21ad      	movs	r1, #173	; 0xad
     d64:	4650      	mov	r0, sl
     d66:	f005 f892 	bl	5e8e <assert_post_action>
		mask &= ~BIT(idx);
     d6a:	2301      	movs	r3, #1
     d6c:	fa03 f808 	lsl.w	r8, r3, r8
     d70:	ea27 0708 	bic.w	r7, r7, r8
     d74:	e7c1      	b.n	cfa <z_impl_log_process+0x9a>
			if (log_backend_is_active(backend) &&
     d76:	4630      	mov	r0, r6
     d78:	f005 f8a9 	bl	5ece <log_backend_is_active>
     d7c:	b120      	cbz	r0, d88 <z_impl_log_process+0x128>
	backend->api->put(backend, msg);
     d7e:	6833      	ldr	r3, [r6, #0]
     d80:	4629      	mov	r1, r5
     d82:	4630      	mov	r0, r6
     d84:	681b      	ldr	r3, [r3, #0]
     d86:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
     d88:	f108 0801 	add.w	r8, r8, #1
     d8c:	3610      	adds	r6, #16
     d8e:	45b8      	cmp	r8, r7
     d90:	dbf1      	blt.n	d76 <z_impl_log_process+0x116>
     d92:	e786      	b.n	ca2 <z_impl_log_process+0x42>
     d94:	20000412 	.word	0x20000412
     d98:	20000144 	.word	0x20000144
     d9c:	20000138 	.word	0x20000138
     da0:	2000013c 	.word	0x2000013c
     da4:	20000413 	.word	0x20000413
     da8:	00006d40 	.word	0x00006d40
     dac:	00006d88 	.word	0x00006d88
     db0:	00006d88 	.word	0x00006d88
     db4:	00006d98 	.word	0x00006d98
     db8:	00006ab8 	.word	0x00006ab8
     dbc:	0000871c 	.word	0x0000871c
     dc0:	00007057 	.word	0x00007057
     dc4:	000084bc 	.word	0x000084bc
     dc8:	00006f74 	.word	0x00006f74
     dcc:	00007071 	.word	0x00007071
     dd0:	00006fa6 	.word	0x00006fa6

00000dd4 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
     dd4:	4b27      	ldr	r3, [pc, #156]	; (e74 <msg_finalize+0xa0>)
{
     dd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
     dd8:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
     dda:	8141      	strh	r1, [r0, #10]
{
     ddc:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
     dde:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
     de0:	4d25      	ldr	r5, [pc, #148]	; (e78 <msg_finalize+0xa4>)
     de2:	60e0      	str	r0, [r4, #12]
     de4:	e8d5 3fef 	ldaex	r3, [r5]
     de8:	3301      	adds	r3, #1
     dea:	e8c5 3fe2 	stlex	r2, r3, [r5]
     dee:	2a00      	cmp	r2, #0
     df0:	d1f8      	bne.n	de4 <msg_finalize+0x10>
	__asm__ volatile(
     df2:	f04f 0320 	mov.w	r3, #32
     df6:	f3ef 8611 	mrs	r6, BASEPRI
     dfa:	f383 8811 	msr	BASEPRI, r3
     dfe:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
     e02:	481e      	ldr	r0, [pc, #120]	; (e7c <msg_finalize+0xa8>)
     e04:	4621      	mov	r1, r4
     e06:	f005 f850 	bl	5eaa <log_list_add_tail>
	__asm__ volatile(
     e0a:	f386 8811 	msr	BASEPRI, r6
     e0e:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
     e12:	4b1b      	ldr	r3, [pc, #108]	; (e80 <msg_finalize+0xac>)
     e14:	781b      	ldrb	r3, [r3, #0]
     e16:	b183      	cbz	r3, e3a <msg_finalize+0x66>
	__asm__ volatile(
     e18:	f04f 0320 	mov.w	r3, #32
     e1c:	f3ef 8411 	mrs	r4, BASEPRI
     e20:	f383 8811 	msr	BASEPRI, r3
     e24:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
     e28:	2000      	movs	r0, #0
     e2a:	f7ff ff19 	bl	c60 <z_impl_log_process>
	__asm__ volatile(
     e2e:	f384 8811 	msr	BASEPRI, r4
     e32:	f3bf 8f6f 	isb	sy
}
     e36:	b002      	add	sp, #8
     e38:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
     e3a:	4a12      	ldr	r2, [pc, #72]	; (e84 <msg_finalize+0xb0>)
     e3c:	682b      	ldr	r3, [r5, #0]
     e3e:	6812      	ldr	r2, [r2, #0]
     e40:	2a00      	cmp	r2, #0
     e42:	d0f8      	beq.n	e36 <msg_finalize+0x62>
     e44:	2b01      	cmp	r3, #1
     e46:	d10a      	bne.n	e5e <msg_finalize+0x8a>
	z_impl_k_timer_start(timer, duration, period);
     e48:	2200      	movs	r2, #0
     e4a:	2300      	movs	r3, #0
     e4c:	480e      	ldr	r0, [pc, #56]	; (e88 <msg_finalize+0xb4>)
     e4e:	e9cd 2300 	strd	r2, r3, [sp]
     e52:	f44f 4200 	mov.w	r2, #32768	; 0x8000
     e56:	2300      	movs	r3, #0
     e58:	f004 feae 	bl	5bb8 <z_impl_k_timer_start>
     e5c:	e7eb      	b.n	e36 <msg_finalize+0x62>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
     e5e:	2b0a      	cmp	r3, #10
     e60:	d1e9      	bne.n	e36 <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
     e62:	4809      	ldr	r0, [pc, #36]	; (e88 <msg_finalize+0xb4>)
     e64:	f005 fdf8 	bl	6a58 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
     e68:	4808      	ldr	r0, [pc, #32]	; (e8c <msg_finalize+0xb8>)
}
     e6a:	b002      	add	sp, #8
     e6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     e70:	f004 b95e 	b.w	5130 <z_impl_k_sem_give>
     e74:	20000004 	.word	0x20000004
     e78:	20000138 	.word	0x20000138
     e7c:	20000144 	.word	0x20000144
     e80:	20000413 	.word	0x20000413
     e84:	200001dc 	.word	0x200001dc
     e88:	20000100 	.word	0x20000100
     e8c:	200000d8 	.word	0x200000d8

00000e90 <log_process_thread_func>:
	return __log_backends_end - __log_backends_start;
     e90:	4b16      	ldr	r3, [pc, #88]	; (eec <log_process_thread_func+0x5c>)
     e92:	4a17      	ldr	r2, [pc, #92]	; (ef0 <log_process_thread_func+0x60>)
{
     e94:	b510      	push	{r4, lr}
     e96:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
     e98:	2b00      	cmp	r3, #0
     e9a:	dc0b      	bgt.n	eb4 <log_process_thread_func+0x24>
     e9c:	4915      	ldr	r1, [pc, #84]	; (ef4 <log_process_thread_func+0x64>)
     e9e:	4816      	ldr	r0, [pc, #88]	; (ef8 <log_process_thread_func+0x68>)
     ea0:	f240 437f 	movw	r3, #1151	; 0x47f
     ea4:	4a15      	ldr	r2, [pc, #84]	; (efc <log_process_thread_func+0x6c>)
     ea6:	f004 ff24 	bl	5cf2 <printk>
     eaa:	f240 417f 	movw	r1, #1151	; 0x47f
     eae:	4813      	ldr	r0, [pc, #76]	; (efc <log_process_thread_func+0x6c>)
     eb0:	f004 ffed 	bl	5e8e <assert_post_action>
	log_init();
     eb4:	f7ff fe58 	bl	b68 <log_init>
	return z_impl_k_current_get();
     eb8:	f004 f934 	bl	5124 <z_impl_k_current_get>
	proc_tid = process_tid;
     ebc:	4b10      	ldr	r3, [pc, #64]	; (f00 <log_process_thread_func+0x70>)
     ebe:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
     ec0:	b130      	cbz	r0, ed0 <log_process_thread_func+0x40>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
     ec2:	4b10      	ldr	r3, [pc, #64]	; (f04 <log_process_thread_func+0x74>)
	    process_tid &&
     ec4:	681b      	ldr	r3, [r3, #0]
     ec6:	2b09      	cmp	r3, #9
     ec8:	dd02      	ble.n	ed0 <log_process_thread_func+0x40>
	z_impl_k_sem_give(sem);
     eca:	480f      	ldr	r0, [pc, #60]	; (f08 <log_process_thread_func+0x78>)
     ecc:	f004 f930 	bl	5130 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
     ed0:	4c0d      	ldr	r4, [pc, #52]	; (f08 <log_process_thread_func+0x78>)
     ed2:	2000      	movs	r0, #0
     ed4:	f7ff fec4 	bl	c60 <z_impl_log_process>
		if (log_process(false) == false) {
     ed8:	2800      	cmp	r0, #0
     eda:	d1fa      	bne.n	ed2 <log_process_thread_func+0x42>
     edc:	f04f 32ff 	mov.w	r2, #4294967295
     ee0:	f04f 33ff 	mov.w	r3, #4294967295
     ee4:	4620      	mov	r0, r4
     ee6:	f004 f961 	bl	51ac <z_impl_k_sem_take>
     eea:	e7f2      	b.n	ed2 <log_process_thread_func+0x42>
     eec:	00006d98 	.word	0x00006d98
     ef0:	00006d88 	.word	0x00006d88
     ef4:	000070b2 	.word	0x000070b2
     ef8:	00006f74 	.word	0x00006f74
     efc:	00006fa6 	.word	0x00006fa6
     f00:	200001dc 	.word	0x200001dc
     f04:	20000138 	.word	0x20000138
     f08:	200000d8 	.word	0x200000d8

00000f0c <z_impl_log_panic>:
{
     f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
     f0e:	4f0f      	ldr	r7, [pc, #60]	; (f4c <z_impl_log_panic+0x40>)
     f10:	783d      	ldrb	r5, [r7, #0]
     f12:	b975      	cbnz	r5, f32 <z_impl_log_panic+0x26>
	log_init();
     f14:	f7ff fe28 	bl	b68 <log_init>
     f18:	4c0d      	ldr	r4, [pc, #52]	; (f50 <z_impl_log_panic+0x44>)
     f1a:	4e0e      	ldr	r6, [pc, #56]	; (f54 <z_impl_log_panic+0x48>)
     f1c:	1b36      	subs	r6, r6, r4
     f1e:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
     f20:	42b5      	cmp	r5, r6
     f22:	db07      	blt.n	f34 <z_impl_log_panic+0x28>
     f24:	2000      	movs	r0, #0
     f26:	f7ff fe9b 	bl	c60 <z_impl_log_process>
		while (log_process(false) == true) {
     f2a:	2800      	cmp	r0, #0
     f2c:	d1fa      	bne.n	f24 <z_impl_log_panic+0x18>
	panic_mode = true;
     f2e:	2301      	movs	r3, #1
     f30:	703b      	strb	r3, [r7, #0]
}
     f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
     f34:	4620      	mov	r0, r4
     f36:	f004 ffca 	bl	5ece <log_backend_is_active>
     f3a:	b118      	cbz	r0, f44 <z_impl_log_panic+0x38>
	backend->api->panic(backend);
     f3c:	6823      	ldr	r3, [r4, #0]
     f3e:	4620      	mov	r0, r4
     f40:	691b      	ldr	r3, [r3, #16]
     f42:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
     f44:	3501      	adds	r5, #1
     f46:	3410      	adds	r4, #16
     f48:	e7ea      	b.n	f20 <z_impl_log_panic+0x14>
     f4a:	bf00      	nop
     f4c:	20000413 	.word	0x20000413
     f50:	00006d88 	.word	0x00006d88
     f54:	00006d98 	.word	0x00006d98

00000f58 <log_free>:
{
     f58:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
     f5a:	3804      	subs	r0, #4
     f5c:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
     f5e:	e8d0 3fef 	ldaex	r3, [r0]
     f62:	1e5a      	subs	r2, r3, #1
     f64:	e8c0 2fe1 	stlex	r1, r2, [r0]
     f68:	2900      	cmp	r1, #0
     f6a:	d1f8      	bne.n	f5e <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
     f6c:	2b01      	cmp	r3, #1
     f6e:	d103      	bne.n	f78 <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
     f70:	4803      	ldr	r0, [pc, #12]	; (f80 <log_free+0x28>)
     f72:	a901      	add	r1, sp, #4
     f74:	f002 ff66 	bl	3e44 <k_mem_slab_free>
}
     f78:	b003      	add	sp, #12
     f7a:	f85d fb04 	ldr.w	pc, [sp], #4
     f7e:	bf00      	nop
     f80:	2000014c 	.word	0x2000014c

00000f84 <log_msg_pool_init>:
static u8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
     f84:	2320      	movs	r3, #32
     f86:	4902      	ldr	r1, [pc, #8]	; (f90 <log_msg_pool_init+0xc>)
     f88:	461a      	mov	r2, r3
     f8a:	4802      	ldr	r0, [pc, #8]	; (f94 <log_msg_pool_init+0x10>)
     f8c:	f005 bd0c 	b.w	69a8 <k_mem_slab_init>
     f90:	200014f8 	.word	0x200014f8
     f94:	200001e0 	.word	0x200001e0

00000f98 <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
     f98:	2300      	movs	r3, #0
{
     f9a:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
     f9c:	4d09      	ldr	r5, [pc, #36]	; (fc4 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
     f9e:	9301      	str	r3, [sp, #4]
     fa0:	2001      	movs	r0, #1
     fa2:	f7ff fe5d 	bl	c60 <z_impl_log_process>
     fa6:	4604      	mov	r4, r0
			log_dropped();
     fa8:	f7ff fd96 	bl	ad8 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
     fac:	2200      	movs	r2, #0
     fae:	2300      	movs	r3, #0
     fb0:	4628      	mov	r0, r5
     fb2:	a901      	add	r1, sp, #4
     fb4:	f002 feda 	bl	3d6c <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
     fb8:	b108      	cbz	r0, fbe <log_msg_no_space_handle+0x26>
     fba:	2c00      	cmp	r4, #0
     fbc:	d1f0      	bne.n	fa0 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
     fbe:	9801      	ldr	r0, [sp, #4]
     fc0:	b003      	add	sp, #12
     fc2:	bd30      	pop	{r4, r5, pc}
     fc4:	200001e0 	.word	0x200001e0

00000fc8 <log_msg_chunk_alloc>:
	union log_msg_chunk *msg = NULL;
     fc8:	2300      	movs	r3, #0
{
     fca:	b507      	push	{r0, r1, r2, lr}
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
     fcc:	2200      	movs	r2, #0
	union log_msg_chunk *msg = NULL;
     fce:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
     fd0:	4806      	ldr	r0, [pc, #24]	; (fec <log_msg_chunk_alloc+0x24>)
     fd2:	2300      	movs	r3, #0
     fd4:	a901      	add	r1, sp, #4
     fd6:	f002 fec9 	bl	3d6c <k_mem_slab_alloc>
	if (err != 0) {
     fda:	b110      	cbz	r0, fe2 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
     fdc:	f7ff ffdc 	bl	f98 <log_msg_no_space_handle>
     fe0:	9001      	str	r0, [sp, #4]
}
     fe2:	9801      	ldr	r0, [sp, #4]
     fe4:	b003      	add	sp, #12
     fe6:	f85d fb04 	ldr.w	pc, [sp], #4
     fea:	bf00      	nop
     fec:	200001e0 	.word	0x200001e0

00000ff0 <msg_free>:
{
     ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
     ff2:	7a03      	ldrb	r3, [r0, #8]
	}
}

u32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
     ff4:	7a45      	ldrb	r5, [r0, #9]
{
     ff6:	b085      	sub	sp, #20
     ff8:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
     ffa:	07d8      	lsls	r0, r3, #31
	return msg->hdr.params.std.nargs;
     ffc:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
    1000:	d41c      	bmi.n	103c <msg_free+0x4c>
    1002:	b1dd      	cbz	r5, 103c <msg_free+0x4c>
		u32_t smask = 0;
    1004:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
    1006:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    1008:	4631      	mov	r1, r6
    100a:	9801      	ldr	r0, [sp, #4]
    100c:	f005 f82f 	bl	606e <log_msg_arg_get>
    1010:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    1012:	f7ff fe17 	bl	c44 <log_is_strdup>
    1016:	b170      	cbz	r0, 1036 <msg_free+0x46>
				if (smask == 0) {
    1018:	b934      	cbnz	r4, 1028 <msg_free+0x38>
					smask = z_log_get_s_mask(
    101a:	9b01      	ldr	r3, [sp, #4]
    101c:	4629      	mov	r1, r5
    101e:	6918      	ldr	r0, [r3, #16]
    1020:	f7ff fce2 	bl	9e8 <z_log_get_s_mask>
					if (smask == 0) {
    1024:	4604      	mov	r4, r0
    1026:	b148      	cbz	r0, 103c <msg_free+0x4c>
				if (smask & BIT(i)) {
    1028:	fa24 f306 	lsr.w	r3, r4, r6
    102c:	07d9      	lsls	r1, r3, #31
    102e:	d502      	bpl.n	1036 <msg_free+0x46>
					log_free(buf);
    1030:	4638      	mov	r0, r7
    1032:	f7ff ff91 	bl	f58 <log_free>
		for (i = 0; i < nargs; i++) {
    1036:	3601      	adds	r6, #1
    1038:	42ae      	cmp	r6, r5
    103a:	d3e5      	bcc.n	1008 <msg_free+0x18>
	if (msg->hdr.params.generic.ext == 1) {
    103c:	9b01      	ldr	r3, [sp, #4]
    103e:	7a1a      	ldrb	r2, [r3, #8]
    1040:	0792      	lsls	r2, r2, #30
    1042:	d504      	bpl.n	104e <msg_free+0x5e>
		cont_free(msg->payload.ext.next);
    1044:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    1046:	4c08      	ldr	r4, [pc, #32]	; (1068 <msg_free+0x78>)
    1048:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    104a:	9b03      	ldr	r3, [sp, #12]
    104c:	b92b      	cbnz	r3, 105a <msg_free+0x6a>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    104e:	4806      	ldr	r0, [pc, #24]	; (1068 <msg_free+0x78>)
    1050:	a901      	add	r1, sp, #4
    1052:	f002 fef7 	bl	3e44 <k_mem_slab_free>
}
    1056:	b005      	add	sp, #20
    1058:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    105a:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    105c:	4620      	mov	r0, r4
    105e:	a903      	add	r1, sp, #12
    1060:	f002 fef0 	bl	3e44 <k_mem_slab_free>
		cont = next;
    1064:	9503      	str	r5, [sp, #12]
    1066:	e7f0      	b.n	104a <msg_free+0x5a>
    1068:	200001e0 	.word	0x200001e0

0000106c <log_msg_create_n>:
	}
}

struct log_msg *log_msg_create_n(const char *str, log_arg_t *args, u32_t nargs)
{
	__ASSERT_NO_MSG(nargs < LOG_MAX_NARGS);
    106c:	2a0e      	cmp	r2, #14
{
    106e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1072:	4681      	mov	r9, r0
    1074:	4688      	mov	r8, r1
    1076:	4615      	mov	r5, r2
	__ASSERT_NO_MSG(nargs < LOG_MAX_NARGS);
    1078:	d90b      	bls.n	1092 <log_msg_create_n+0x26>
    107a:	492d      	ldr	r1, [pc, #180]	; (1130 <log_msg_create_n+0xc4>)
    107c:	482d      	ldr	r0, [pc, #180]	; (1134 <log_msg_create_n+0xc8>)
    107e:	f44f 739b 	mov.w	r3, #310	; 0x136
    1082:	4a2d      	ldr	r2, [pc, #180]	; (1138 <log_msg_create_n+0xcc>)
    1084:	f004 fe35 	bl	5cf2 <printk>
    1088:	f44f 719b 	mov.w	r1, #310	; 0x136
    108c:	482a      	ldr	r0, [pc, #168]	; (1138 <log_msg_create_n+0xcc>)
    108e:	f004 fefe 	bl	5e8e <assert_post_action>
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    1092:	f7ff ff99 	bl	fc8 <log_msg_chunk_alloc>

	if (msg != NULL) {
    1096:	4604      	mov	r4, r0
    1098:	b330      	cbz	r0, 10e8 <log_msg_create_n+0x7c>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
    109a:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
    109c:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
    109e:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
    10a0:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    10a2:	8107      	strh	r7, [r0, #8]
    10a4:	d909      	bls.n	10ba <log_msg_create_n+0x4e>
	msg->hdr.params.generic.ext = 1;
    10a6:	2202      	movs	r2, #2
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
    10a8:	f1a5 0a02 	sub.w	sl, r5, #2
	msg->hdr.params.generic.ext = 1;
    10ac:	8102      	strh	r2, [r0, #8]
	next = &msg->payload.ext.next;
    10ae:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
    10b2:	6147      	str	r7, [r0, #20]
	while (n > 0) {
    10b4:	f1ba 0f00 	cmp.w	sl, #0
    10b8:	dc0e      	bgt.n	10d8 <log_msg_create_n+0x6c>

	msg = msg_alloc(nargs);

	if (msg != NULL) {
		msg->str = str;
		msg->hdr.params.std.nargs = nargs;
    10ba:	7a63      	ldrb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
    10bc:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
    10be:	f365 1307 	bfi	r3, r5, #4, #4
		msg->str = str;
    10c2:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
    10c6:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
    10c8:	d818      	bhi.n	10fc <log_msg_create_n+0x90>
		(void)memcpy(msg->payload.single.args, args,
    10ca:	4641      	mov	r1, r8
    10cc:	00aa      	lsls	r2, r5, #2
    10ce:	f104 0014 	add.w	r0, r4, #20
    10d2:	f005 fa00 	bl	64d6 <memcpy>
	while (nargs != 0U) {
    10d6:	e007      	b.n	10e8 <log_msg_create_n+0x7c>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
    10d8:	f7ff ff76 	bl	fc8 <log_msg_chunk_alloc>
		if (cont == NULL) {
    10dc:	4606      	mov	r6, r0
    10de:	b930      	cbnz	r0, 10ee <log_msg_create_n+0x82>
			msg_free(msg);
    10e0:	4620      	mov	r0, r4
    10e2:	f7ff ff85 	bl	ff0 <msg_free>
			return NULL;
    10e6:	4634      	mov	r4, r6
		copy_args_to_msg(msg, args, nargs);
	}

	return msg;
}
    10e8:	4620      	mov	r0, r4
    10ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
    10ee:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
    10f2:	f1aa 0a07 	sub.w	sl, sl, #7
		next = &cont->next;
    10f6:	4683      	mov	fp, r0
		cont->next = NULL;
    10f8:	6007      	str	r7, [r0, #0]
		n -= ARGS_CONT_MSG;
    10fa:	e7db      	b.n	10b4 <log_msg_create_n+0x48>
		(void)memcpy(msg->payload.ext.data.args, args,
    10fc:	4641      	mov	r1, r8
    10fe:	2208      	movs	r2, #8
    1100:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
    1104:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
    1106:	f005 f9e6 	bl	64d6 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
    110a:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
    110c:	f108 0808 	add.w	r8, r8, #8
		u32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
    1110:	2d07      	cmp	r5, #7
    1112:	462e      	mov	r6, r5
    1114:	bf28      	it	cs
    1116:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
    1118:	ea4f 0986 	mov.w	r9, r6, lsl #2
    111c:	4641      	mov	r1, r8
    111e:	1d38      	adds	r0, r7, #4
    1120:	464a      	mov	r2, r9
    1122:	f005 f9d8 	bl	64d6 <memcpy>
	while (nargs != 0U) {
    1126:	1bad      	subs	r5, r5, r6
		cont = cont->next;
    1128:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
    112a:	44c8      	add	r8, r9
	while (nargs != 0U) {
    112c:	d1f0      	bne.n	1110 <log_msg_create_n+0xa4>
    112e:	e7db      	b.n	10e8 <log_msg_create_n+0x7c>
    1130:	000070fe 	.word	0x000070fe
    1134:	00006f74 	.word	0x00006f74
    1138:	000070d2 	.word	0x000070d2

0000113c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    113c:	b40e      	push	{r1, r2, r3}
    113e:	b503      	push	{r0, r1, lr}
    1140:	ab03      	add	r3, sp, #12
    1142:	f853 2b04 	ldr.w	r2, [r3], #4
    1146:	4601      	mov	r1, r0
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
    1148:	4804      	ldr	r0, [pc, #16]	; (115c <print_formatted+0x20>)
	va_start(args, fmt);
    114a:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
    114c:	f7ff fa32 	bl	5b4 <z_vprintk>
#endif
	va_end(args);

	return length;
}
    1150:	2000      	movs	r0, #0
    1152:	b002      	add	sp, #8
    1154:	f85d eb04 	ldr.w	lr, [sp], #4
    1158:	b003      	add	sp, #12
    115a:	4770      	bx	lr
    115c:	00001395 	.word	0x00001395

00001160 <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
    1160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    1164:	f011 0402 	ands.w	r4, r1, #2
{
    1168:	b085      	sub	sp, #20
    116a:	4690      	mov	r8, r2
    116c:	4606      	mov	r6, r0
    116e:	461a      	mov	r2, r3
    1170:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    1174:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    1178:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    117c:	d007      	beq.n	118e <prefix_print+0x2e>
	if (!format) {
    117e:	f011 0f44 	tst.w	r1, #68	; 0x44
    1182:	d137      	bne.n	11f4 <prefix_print+0x94>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    1184:	4932      	ldr	r1, [pc, #200]	; (1250 <prefix_print+0xf0>)
    1186:	f7ff ffd9 	bl	113c <print_formatted>
			length = print_formatted(log_output,
    118a:	4601      	mov	r1, r0
		length += timestamp_print(log_output, flags, timestamp);
    118c:	460c      	mov	r4, r1
	if (color) {
    118e:	f1b9 0f00 	cmp.w	r9, #0
    1192:	d00a      	beq.n	11aa <prefix_print+0x4a>
		const char *color = start && (colors[level] != NULL) ?
    1194:	4b2f      	ldr	r3, [pc, #188]	; (1254 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
    1196:	4630      	mov	r0, r6
		const char *color = start && (colors[level] != NULL) ?
    1198:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
    119c:	4b2e      	ldr	r3, [pc, #184]	; (1258 <prefix_print+0xf8>)
    119e:	492f      	ldr	r1, [pc, #188]	; (125c <prefix_print+0xfc>)
    11a0:	2a00      	cmp	r2, #0
    11a2:	bf08      	it	eq
    11a4:	461a      	moveq	r2, r3
    11a6:	f7ff ffc9 	bl	113c <print_formatted>
	if (level_on) {
    11aa:	b13d      	cbz	r5, 11bc <prefix_print+0x5c>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    11ac:	4b2c      	ldr	r3, [pc, #176]	; (1260 <prefix_print+0x100>)
    11ae:	4630      	mov	r0, r6
    11b0:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    11b4:	492b      	ldr	r1, [pc, #172]	; (1264 <prefix_print+0x104>)
    11b6:	f7ff ffc1 	bl	113c <print_formatted>
    11ba:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    11bc:	f1b8 0f00 	cmp.w	r8, #0
    11c0:	d043      	beq.n	124a <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    11c2:	2301      	movs	r3, #1
    11c4:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    11c8:	4b27      	ldr	r3, [pc, #156]	; (1268 <prefix_print+0x108>)
    11ca:	f017 0f10 	tst.w	r7, #16
    11ce:	4f27      	ldr	r7, [pc, #156]	; (126c <prefix_print+0x10c>)
    11d0:	bf18      	it	ne
    11d2:	461f      	movne	r7, r3
    11d4:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    11d8:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    11dc:	f7ff fc88 	bl	af0 <log_source_name_get>
    11e0:	4639      	mov	r1, r7
    11e2:	4602      	mov	r2, r0
    11e4:	4630      	mov	r0, r6
    11e6:	f7ff ffa9 	bl	113c <print_formatted>
    11ea:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
    11ec:	4420      	add	r0, r4
    11ee:	b005      	add	sp, #20
    11f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    11f4:	4b1e      	ldr	r3, [pc, #120]	; (1270 <prefix_print+0x110>)
    11f6:	6819      	ldr	r1, [r3, #0]
    11f8:	2900      	cmp	r1, #0
    11fa:	d0c7      	beq.n	118c <prefix_print+0x2c>
		timestamp /= timestamp_div;
    11fc:	4b1d      	ldr	r3, [pc, #116]	; (1274 <prefix_print+0x114>)
    11fe:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    1202:	681b      	ldr	r3, [r3, #0]
		ms = (remainder * 1000U) / freq;
    1204:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
    1208:	fbb2 f3f3 	udiv	r3, r2, r3
		seconds = timestamp / freq;
    120c:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    1210:	fbb4 f2fe 	udiv	r2, r4, lr
    1214:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    1218:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    121c:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1220:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
    1224:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1228:	fb01 441b 	mls	r4, r1, fp, r4
    122c:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    1230:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1234:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    1238:	e9cd b101 	strd	fp, r1, [sp, #4]
    123c:	fb0a e113 	mls	r1, sl, r3, lr
    1240:	9100      	str	r1, [sp, #0]
    1242:	490d      	ldr	r1, [pc, #52]	; (1278 <prefix_print+0x118>)
    1244:	f7ff ff7a 	bl	113c <print_formatted>
    1248:	e79f      	b.n	118a <prefix_print+0x2a>
	total += print_formatted(log_output,
    124a:	4f08      	ldr	r7, [pc, #32]	; (126c <prefix_print+0x10c>)
    124c:	e7c2      	b.n	11d4 <prefix_print+0x74>
    124e:	bf00      	nop
    1250:	00007117 	.word	0x00007117
    1254:	00006dd0 	.word	0x00006dd0
    1258:	00007109 	.word	0x00007109
    125c:	00007d14 	.word	0x00007d14
    1260:	00006de4 	.word	0x00006de4
    1264:	0000713c 	.word	0x0000713c
    1268:	00007113 	.word	0x00007113
    126c:	0000710e 	.word	0x0000710e
    1270:	200001fc 	.word	0x200001fc
    1274:	20000200 	.word	0x20000200
    1278:	00007120 	.word	0x00007120

0000127c <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
    127c:	b538      	push	{r3, r4, r5, lr}
    127e:	460c      	mov	r4, r1
	if (color) {
    1280:	07e1      	lsls	r1, r4, #31
{
    1282:	4605      	mov	r5, r0
	if (color) {
    1284:	d503      	bpl.n	128e <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
    1286:	4a08      	ldr	r2, [pc, #32]	; (12a8 <postfix_print+0x2c>)
    1288:	4908      	ldr	r1, [pc, #32]	; (12ac <postfix_print+0x30>)
    128a:	f7ff ff57 	bl	113c <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    128e:	06e2      	lsls	r2, r4, #27
    1290:	d408      	bmi.n	12a4 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1292:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    1294:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    1296:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
    129a:	bf4c      	ite	mi
    129c:	4904      	ldrmi	r1, [pc, #16]	; (12b0 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    129e:	4905      	ldrpl	r1, [pc, #20]	; (12b4 <postfix_print+0x38>)
    12a0:	f7ff bf4c 	b.w	113c <print_formatted>
}
    12a4:	bd38      	pop	{r3, r4, r5, pc}
    12a6:	bf00      	nop
    12a8:	00007109 	.word	0x00007109
    12ac:	00007d14 	.word	0x00007d14
    12b0:	0000843b 	.word	0x0000843b
    12b4:	00007142 	.word	0x00007142

000012b8 <hexdump_line_print>:
{
    12b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    12bc:	461d      	mov	r5, r3
    12be:	9b08      	ldr	r3, [sp, #32]
    12c0:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    12c2:	06da      	lsls	r2, r3, #27
{
    12c4:	4604      	mov	r4, r0
    12c6:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    12c8:	d405      	bmi.n	12d6 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    12ca:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    12cc:	bf4c      	ite	mi
    12ce:	492a      	ldrmi	r1, [pc, #168]	; (1378 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    12d0:	492a      	ldrpl	r1, [pc, #168]	; (137c <hexdump_line_print+0xc4>)
    12d2:	f7ff ff33 	bl	113c <print_formatted>
{
    12d6:	f04f 0800 	mov.w	r8, #0
		print_formatted(log_output, " ");
    12da:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1384 <hexdump_line_print+0xcc>
	for (int i = 0; i < prefix_offset; i++) {
    12de:	45a8      	cmp	r8, r5
    12e0:	db2a      	blt.n	1338 <hexdump_line_print+0x80>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    12e2:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
    12e4:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 1388 <hexdump_line_print+0xd0>
			print_formatted(log_output, "%02x ", data[i]);
    12e8:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 138c <hexdump_line_print+0xd4>
			print_formatted(log_output, " ");
    12ec:	f8df a094 	ldr.w	sl, [pc, #148]	; 1384 <hexdump_line_print+0xcc>
		if (i < length) {
    12f0:	42bd      	cmp	r5, r7
    12f2:	d22f      	bcs.n	1354 <hexdump_line_print+0x9c>
			print_formatted(log_output, "%02x ", data[i]);
    12f4:	4649      	mov	r1, r9
    12f6:	4620      	mov	r0, r4
    12f8:	5d72      	ldrb	r2, [r6, r5]
    12fa:	f7ff ff1f 	bl	113c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    12fe:	3501      	adds	r5, #1
    1300:	2d10      	cmp	r5, #16
    1302:	d120      	bne.n	1346 <hexdump_line_print+0x8e>
	print_formatted(log_output, "|");
    1304:	4620      	mov	r0, r4
    1306:	491e      	ldr	r1, [pc, #120]	; (1380 <hexdump_line_print+0xc8>)
    1308:	f7ff ff18 	bl	113c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    130c:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
    130e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 1384 <hexdump_line_print+0xcc>
			print_formatted(log_output, "%c",
    1312:	f8df 907c 	ldr.w	r9, [pc, #124]	; 1390 <hexdump_line_print+0xd8>
		if (i < length) {
    1316:	42af      	cmp	r7, r5
    1318:	d928      	bls.n	136c <hexdump_line_print+0xb4>
			char c = (char)data[i];
    131a:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
    131c:	4649      	mov	r1, r9
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    131e:	f1a2 0320 	sub.w	r3, r2, #32
    1322:	2b5f      	cmp	r3, #95	; 0x5f
    1324:	bf28      	it	cs
    1326:	222e      	movcs	r2, #46	; 0x2e
    1328:	4620      	mov	r0, r4
    132a:	f7ff ff07 	bl	113c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    132e:	3501      	adds	r5, #1
    1330:	2d10      	cmp	r5, #16
    1332:	d114      	bne.n	135e <hexdump_line_print+0xa6>
}
    1334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    1338:	4649      	mov	r1, r9
    133a:	4620      	mov	r0, r4
    133c:	f7ff fefe 	bl	113c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    1340:	f108 0801 	add.w	r8, r8, #1
    1344:	e7cb      	b.n	12de <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    1346:	076a      	lsls	r2, r5, #29
    1348:	d1d2      	bne.n	12f0 <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
    134a:	4651      	mov	r1, sl
    134c:	4620      	mov	r0, r4
    134e:	f7ff fef5 	bl	113c <print_formatted>
    1352:	e7cd      	b.n	12f0 <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
    1354:	4641      	mov	r1, r8
    1356:	4620      	mov	r0, r4
    1358:	f7ff fef0 	bl	113c <print_formatted>
    135c:	e7cf      	b.n	12fe <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    135e:	076b      	lsls	r3, r5, #29
    1360:	d1d9      	bne.n	1316 <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    1362:	4641      	mov	r1, r8
    1364:	4620      	mov	r0, r4
    1366:	f7ff fee9 	bl	113c <print_formatted>
    136a:	e7d4      	b.n	1316 <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    136c:	4641      	mov	r1, r8
    136e:	4620      	mov	r0, r4
    1370:	f7ff fee4 	bl	113c <print_formatted>
    1374:	e7db      	b.n	132e <hexdump_line_print+0x76>
    1376:	bf00      	nop
    1378:	0000843b 	.word	0x0000843b
    137c:	00007142 	.word	0x00007142
    1380:	0000714f 	.word	0x0000714f
    1384:	0000714d 	.word	0x0000714d
    1388:	0000714b 	.word	0x0000714b
    138c:	00007145 	.word	0x00007145
    1390:	00007151 	.word	0x00007151

00001394 <out_func>:
{
    1394:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    1396:	684b      	ldr	r3, [r1, #4]
{
    1398:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
    139a:	681a      	ldr	r2, [r3, #0]
    139c:	68cb      	ldr	r3, [r1, #12]
{
    139e:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    13a0:	429a      	cmp	r2, r3
    13a2:	d102      	bne.n	13aa <out_func+0x16>
		log_output_flush(out_ctx);
    13a4:	4608      	mov	r0, r1
    13a6:	f005 f803 	bl	63b0 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    13aa:	6863      	ldr	r3, [r4, #4]
    13ac:	e8d3 2fef 	ldaex	r2, [r3]
    13b0:	1c51      	adds	r1, r2, #1
    13b2:	e8c3 1fe0 	stlex	r0, r1, [r3]
    13b6:	2800      	cmp	r0, #0
    13b8:	d1f8      	bne.n	13ac <out_func+0x18>
	out_ctx->buf[idx] = (u8_t)c;
    13ba:	68a3      	ldr	r3, [r4, #8]
    13bc:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
    13be:	6863      	ldr	r3, [r4, #4]
    13c0:	681a      	ldr	r2, [r3, #0]
    13c2:	68e3      	ldr	r3, [r4, #12]
    13c4:	429a      	cmp	r2, r3
    13c6:	d909      	bls.n	13dc <out_func+0x48>
    13c8:	4905      	ldr	r1, [pc, #20]	; (13e0 <out_func+0x4c>)
    13ca:	4806      	ldr	r0, [pc, #24]	; (13e4 <out_func+0x50>)
    13cc:	2378      	movs	r3, #120	; 0x78
    13ce:	4a06      	ldr	r2, [pc, #24]	; (13e8 <out_func+0x54>)
    13d0:	f004 fc8f 	bl	5cf2 <printk>
    13d4:	2178      	movs	r1, #120	; 0x78
    13d6:	4804      	ldr	r0, [pc, #16]	; (13e8 <out_func+0x54>)
    13d8:	f004 fd59 	bl	5e8e <assert_post_action>
}
    13dc:	2000      	movs	r0, #0
    13de:	bd38      	pop	{r3, r4, r5, pc}
    13e0:	00007183 	.word	0x00007183
    13e4:	00006f74 	.word	0x00006f74
    13e8:	00007154 	.word	0x00007154

000013ec <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    u32_t flags)
{
    13ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    13f0:	7a8b      	ldrb	r3, [r1, #10]
    13f2:	4616      	mov	r6, r2
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    13f4:	f013 0707 	ands.w	r7, r3, #7
{
    13f8:	4604      	mov	r4, r0
    13fa:	460d      	mov	r5, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    13fc:	7a0a      	ldrb	r2, [r1, #8]
    13fe:	b08a      	sub	sp, #40	; 0x28
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    1400:	d020      	beq.n	1444 <log_output_msg_process+0x58>
    1402:	43d2      	mvns	r2, r2
	return msg->hdr.ids.source_id;
    1404:	8949      	ldrh	r1, [r1, #10]
    1406:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    140a:	f3c1 1189 	ubfx	r1, r1, #6, #10
    140e:	e9cd 7300 	strd	r7, r3, [sp]
    1412:	9102      	str	r1, [sp, #8]
    1414:	68eb      	ldr	r3, [r5, #12]
    1416:	4631      	mov	r1, r6
    1418:	f002 0201 	and.w	r2, r2, #1
    141c:	f7ff fea0 	bl	1160 <prefix_print>
    1420:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    1422:	7a2b      	ldrb	r3, [r5, #8]
    1424:	43db      	mvns	r3, r3
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    1426:	f013 0801 	ands.w	r8, r3, #1
    142a:	d00d      	beq.n	1448 <log_output_msg_process+0x5c>
		std_print(msg, log_output);
    142c:	4621      	mov	r1, r4
    142e:	4628      	mov	r0, r5
    1430:	f004 fe61 	bl	60f6 <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    1434:	2f00      	cmp	r7, #0
    1436:	d03c      	beq.n	14b2 <log_output_msg_process+0xc6>
		postfix_print(log_output, flags, level);
    1438:	463a      	mov	r2, r7
    143a:	4631      	mov	r1, r6
    143c:	4620      	mov	r0, r4
    143e:	f7ff ff1d 	bl	127c <postfix_print>
    1442:	e036      	b.n	14b2 <log_output_msg_process+0xc6>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    1444:	46b9      	mov	r9, r7
    1446:	e7ec      	b.n	1422 <log_output_msg_process+0x36>
	} else if (raw_string) {
    1448:	2f00      	cmp	r7, #0
    144a:	d138      	bne.n	14be <log_output_msg_process+0xd2>
	__ASSERT_NO_MSG(log_output->size);
    144c:	68e3      	ldr	r3, [r4, #12]
    144e:	b95b      	cbnz	r3, 1468 <log_output_msg_process+0x7c>
    1450:	492a      	ldr	r1, [pc, #168]	; (14fc <log_output_msg_process+0x110>)
    1452:	482b      	ldr	r0, [pc, #172]	; (1500 <log_output_msg_process+0x114>)
    1454:	f240 13b9 	movw	r3, #441	; 0x1b9
    1458:	4a2a      	ldr	r2, [pc, #168]	; (1504 <log_output_msg_process+0x118>)
    145a:	f004 fc4a 	bl	5cf2 <printk>
    145e:	f240 11b9 	movw	r1, #441	; 0x1b9
    1462:	4828      	ldr	r0, [pc, #160]	; (1504 <log_output_msg_process+0x118>)
    1464:	f004 fd13 	bl	5e8e <assert_post_action>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    1468:	2600      	movs	r6, #0
		length = log_output->size;
    146a:	68e3      	ldr	r3, [r4, #12]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    146c:	aa06      	add	r2, sp, #24
		length = log_output->size;
    146e:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    1470:	4628      	mov	r0, r5
    1472:	4633      	mov	r3, r6
    1474:	68a1      	ldr	r1, [r4, #8]
    1476:	f004 fe2a 	bl	60ce <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    147a:	9a06      	ldr	r2, [sp, #24]
    147c:	6863      	ldr	r3, [r4, #4]
    147e:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    1480:	b14a      	cbz	r2, 1496 <log_output_msg_process+0xaa>
			eol = (log_output->buf[length - 1] == '\n');
    1482:	68a3      	ldr	r3, [r4, #8]
    1484:	4413      	add	r3, r2
    1486:	f813 8c01 	ldrb.w	r8, [r3, #-1]
    148a:	f1a8 030a 	sub.w	r3, r8, #10
    148e:	f1d3 0800 	rsbs	r8, r3, #0
    1492:	eb48 0803 	adc.w	r8, r8, r3
		log_output_flush(log_output);
    1496:	4620      	mov	r0, r4
    1498:	f004 ff8a 	bl	63b0 <log_output_flush>
		offset += length;
    149c:	9b06      	ldr	r3, [sp, #24]
    149e:	441e      	add	r6, r3
	} while (length > 0);
    14a0:	2b00      	cmp	r3, #0
    14a2:	d1e2      	bne.n	146a <log_output_msg_process+0x7e>
	if (eol) {
    14a4:	f1b8 0f00 	cmp.w	r8, #0
    14a8:	d003      	beq.n	14b2 <log_output_msg_process+0xc6>
		print_formatted(log_output, "\r");
    14aa:	4620      	mov	r0, r4
    14ac:	4916      	ldr	r1, [pc, #88]	; (1508 <log_output_msg_process+0x11c>)
    14ae:	f7ff fe45 	bl	113c <print_formatted>
	}

	log_output_flush(log_output);
    14b2:	4620      	mov	r0, r4
    14b4:	f004 ff7c 	bl	63b0 <log_output_flush>
}
    14b8:	b00a      	add	sp, #40	; 0x28
    14ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    14be:	4628      	mov	r0, r5
    14c0:	f004 fe03 	bl	60ca <log_msg_str_get>
    14c4:	4911      	ldr	r1, [pc, #68]	; (150c <log_output_msg_process+0x120>)
    14c6:	4602      	mov	r2, r0
    14c8:	4620      	mov	r0, r4
    14ca:	f7ff fe37 	bl	113c <print_formatted>
		length = sizeof(buf);
    14ce:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    14d2:	aa05      	add	r2, sp, #20
    14d4:	4643      	mov	r3, r8
    14d6:	4628      	mov	r0, r5
    14d8:	a906      	add	r1, sp, #24
		length = sizeof(buf);
    14da:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    14de:	f004 fdf6 	bl	60ce <log_msg_hexdump_data_get>
		if (length) {
    14e2:	9a05      	ldr	r2, [sp, #20]
    14e4:	2a00      	cmp	r2, #0
    14e6:	d0a7      	beq.n	1438 <log_output_msg_process+0x4c>
			hexdump_line_print(log_output, buf, length,
    14e8:	464b      	mov	r3, r9
    14ea:	4620      	mov	r0, r4
    14ec:	9600      	str	r6, [sp, #0]
    14ee:	a906      	add	r1, sp, #24
    14f0:	f7ff fee2 	bl	12b8 <hexdump_line_print>
			offset += length;
    14f4:	9b05      	ldr	r3, [sp, #20]
    14f6:	4498      	add	r8, r3
		length = sizeof(buf);
    14f8:	e7eb      	b.n	14d2 <log_output_msg_process+0xe6>
    14fa:	bf00      	nop
    14fc:	000071b3 	.word	0x000071b3
    1500:	00006f74 	.word	0x00006f74
    1504:	00007154 	.word	0x00007154
    1508:	000071c4 	.word	0x000071c4
    150c:	00007d14 	.word	0x00007d14

00001510 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, u32_t cnt)
{
    1510:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;
	struct device *dev = (struct device *)log_output->control_block->ctx;
    1512:	e9d0 4300 	ldrd	r4, r3, [r0]
    1516:	685d      	ldr	r5, [r3, #4]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1518:	f242 730f 	movw	r3, #9999	; 0x270f
    151c:	428b      	cmp	r3, r1
    151e:	bf28      	it	cs
    1520:	460b      	movcs	r3, r1
    1522:	4668      	mov	r0, sp
    1524:	2105      	movs	r1, #5
    1526:	4a0c      	ldr	r2, [pc, #48]	; (1558 <log_output_dropped_process+0x48>)
    1528:	f004 fbf0 	bl	5d0c <snprintk>
    152c:	4606      	mov	r6, r0

	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
    152e:	462b      	mov	r3, r5
    1530:	4620      	mov	r0, r4
    1532:	220b      	movs	r2, #11
    1534:	4909      	ldr	r1, [pc, #36]	; (155c <log_output_dropped_process+0x4c>)
    1536:	f004 fdd1 	bl	60dc <buffer_write>
	buffer_write(outf, buf, len, dev);
    153a:	462b      	mov	r3, r5
    153c:	4632      	mov	r2, r6
    153e:	4669      	mov	r1, sp
    1540:	4620      	mov	r0, r4
    1542:	f004 fdcb 	bl	60dc <buffer_write>
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
    1546:	462b      	mov	r3, r5
    1548:	221b      	movs	r2, #27
    154a:	4620      	mov	r0, r4
    154c:	4904      	ldr	r1, [pc, #16]	; (1560 <log_output_dropped_process+0x50>)
    154e:	f004 fdc5 	bl	60dc <buffer_write>
}
    1552:	b002      	add	sp, #8
    1554:	bd70      	pop	{r4, r5, r6, pc}
    1556:	bf00      	nop
    1558:	0000822a 	.word	0x0000822a
    155c:	00007202 	.word	0x00007202
    1560:	000071e6 	.word	0x000071e6

00001564 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
    1564:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    1566:	2100      	movs	r1, #0
	timestamp_div = 1U;
    1568:	4a07      	ldr	r2, [pc, #28]	; (1588 <log_output_timestamp_freq_set+0x24>)
{
    156a:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
    156c:	4c07      	ldr	r4, [pc, #28]	; (158c <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    156e:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    1570:	42a0      	cmp	r0, r4
    1572:	d804      	bhi.n	157e <log_output_timestamp_freq_set+0x1a>
    1574:	b101      	cbz	r1, 1578 <log_output_timestamp_freq_set+0x14>
    1576:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    1578:	4b05      	ldr	r3, [pc, #20]	; (1590 <log_output_timestamp_freq_set+0x2c>)
    157a:	6018      	str	r0, [r3, #0]
}
    157c:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
    157e:	2101      	movs	r1, #1
		frequency /= 2U;
    1580:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    1582:	005b      	lsls	r3, r3, #1
    1584:	e7f4      	b.n	1570 <log_output_timestamp_freq_set+0xc>
    1586:	bf00      	nop
    1588:	20000200 	.word	0x20000200
    158c:	000f4240 	.word	0x000f4240
    1590:	200001fc 	.word	0x200001fc

00001594 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    1594:	4801      	ldr	r0, [pc, #4]	; (159c <panic+0x8>)
    1596:	f004 bf0b 	b.w	63b0 <log_output_flush>
    159a:	bf00      	nop
    159c:	00006e10 	.word	0x00006e10

000015a0 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, u32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    15a0:	4801      	ldr	r0, [pc, #4]	; (15a8 <dropped+0x8>)
    15a2:	f7ff bfb5 	b.w	1510 <log_output_dropped_process>
    15a6:	bf00      	nop
    15a8:	00006e10 	.word	0x00006e10

000015ac <log_backend_uart_init>:

	log_backend_std_put(&log_output, flag, msg);
}

static void log_backend_uart_init(void)
{
    15ac:	b510      	push	{r4, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    15ae:	4809      	ldr	r0, [pc, #36]	; (15d4 <log_backend_uart_init+0x28>)
    15b0:	f002 fa1c 	bl	39ec <z_impl_device_get_binding>
	struct device *dev;

	dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	assert(dev);
    15b4:	4604      	mov	r4, r0
    15b6:	b948      	cbnz	r0, 15cc <log_backend_uart_init+0x20>
    15b8:	4907      	ldr	r1, [pc, #28]	; (15d8 <log_backend_uart_init+0x2c>)
    15ba:	4808      	ldr	r0, [pc, #32]	; (15dc <log_backend_uart_init+0x30>)
    15bc:	232d      	movs	r3, #45	; 0x2d
    15be:	4a08      	ldr	r2, [pc, #32]	; (15e0 <log_backend_uart_init+0x34>)
    15c0:	f004 fb97 	bl	5cf2 <printk>
    15c4:	212d      	movs	r1, #45	; 0x2d
    15c6:	4806      	ldr	r0, [pc, #24]	; (15e0 <log_backend_uart_init+0x34>)
    15c8:	f004 fc61 	bl	5e8e <assert_post_action>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
    15cc:	4b05      	ldr	r3, [pc, #20]	; (15e4 <log_backend_uart_init+0x38>)
    15ce:	605c      	str	r4, [r3, #4]

	log_output_ctx_set(&log_output, dev);
}
    15d0:	bd10      	pop	{r4, pc}
    15d2:	bf00      	nop
    15d4:	0000720e 	.word	0x0000720e
    15d8:	0000724a 	.word	0x0000724a
    15dc:	00006f74 	.word	0x00006f74
    15e0:	00007215 	.word	0x00007215
    15e4:	2000020c 	.word	0x2000020c

000015e8 <put>:
{
    15e8:	b510      	push	{r4, lr}
    15ea:	460c      	mov	r4, r1
	log_msg_get(msg);
    15ec:	4608      	mov	r0, r1
    15ee:	f004 fd32 	bl	6056 <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    15f2:	4621      	mov	r1, r4
    15f4:	4804      	ldr	r0, [pc, #16]	; (1608 <put+0x20>)
    15f6:	220f      	movs	r2, #15
    15f8:	f7ff fef8 	bl	13ec <log_output_msg_process>
	log_msg_put(msg);
    15fc:	4620      	mov	r0, r4
}
    15fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1602:	f004 bd53 	b.w	60ac <log_msg_put>
    1606:	bf00      	nop
    1608:	00006e10 	.word	0x00006e10

0000160c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    160c:	b510      	push	{r4, lr}
    160e:	4807      	ldr	r0, [pc, #28]	; (162c <uart_console_init+0x20>)
    1610:	f002 f9ec 	bl	39ec <z_impl_device_get_binding>
	__stdout_hook_install(console_out);
    1614:	4c06      	ldr	r4, [pc, #24]	; (1630 <uart_console_init+0x24>)

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    1616:	4b07      	ldr	r3, [pc, #28]	; (1634 <uart_console_init+0x28>)
    1618:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    161a:	4620      	mov	r0, r4
    161c:	f001 f914 	bl	2848 <__stdout_hook_install>
	__printk_hook_install(console_out);
    1620:	4620      	mov	r0, r4
    1622:	f7fe ffc1 	bl	5a8 <__printk_hook_install>
#endif

	uart_console_hook_install();

	return 0;
}
    1626:	2000      	movs	r0, #0
    1628:	bd10      	pop	{r4, pc}
    162a:	bf00      	nop
    162c:	0000720e 	.word	0x0000720e
    1630:	00001639 	.word	0x00001639
    1634:	20000218 	.word	0x20000218

00001638 <console_out>:
	if ('\n' == c) {
    1638:	280a      	cmp	r0, #10
{
    163a:	b538      	push	{r3, r4, r5, lr}
    163c:	4604      	mov	r4, r0
    163e:	4d07      	ldr	r5, [pc, #28]	; (165c <console_out+0x24>)
	if ('\n' == c) {
    1640:	d104      	bne.n	164c <console_out+0x14>
    1642:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
    1644:	6883      	ldr	r3, [r0, #8]
    1646:	210d      	movs	r1, #13
    1648:	685b      	ldr	r3, [r3, #4]
    164a:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    164c:	6828      	ldr	r0, [r5, #0]
    164e:	6883      	ldr	r3, [r0, #8]
    1650:	b2e1      	uxtb	r1, r4
    1652:	685b      	ldr	r3, [r3, #4]
    1654:	4798      	blx	r3
}
    1656:	4620      	mov	r0, r4
    1658:	bd38      	pop	{r3, r4, r5, pc}
    165a:	bf00      	nop
    165c:	20000218 	.word	0x20000218

00001660 <get_status>:
	return &config->subsys[type];
}

static enum clock_control_status get_status(struct device *dev,
					    clock_control_subsys_t subsys)
{
    1660:	b538      	push	{r3, r4, r5, lr}
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
	struct nrf_clock_control_sub_data *data;

	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    1662:	b2cc      	uxtb	r4, r1
    1664:	2c01      	cmp	r4, #1
{
    1666:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    1668:	d909      	bls.n	167e <get_status+0x1e>
    166a:	490b      	ldr	r1, [pc, #44]	; (1698 <get_status+0x38>)
    166c:	480b      	ldr	r0, [pc, #44]	; (169c <get_status+0x3c>)
    166e:	237f      	movs	r3, #127	; 0x7f
    1670:	4a0b      	ldr	r2, [pc, #44]	; (16a0 <get_status+0x40>)
    1672:	f004 fb3e 	bl	5cf2 <printk>
    1676:	217f      	movs	r1, #127	; 0x7f
    1678:	4809      	ldr	r0, [pc, #36]	; (16a0 <get_status+0x40>)
    167a:	f004 fc08 	bl	5e8e <assert_post_action>
	data = get_sub_data(dev, type);
	if (data->started) {
    167e:	210c      	movs	r1, #12
	data = get_sub_data(dev, type);
    1680:	68eb      	ldr	r3, [r5, #12]
	if (data->started) {
    1682:	fb04 3101 	mla	r1, r4, r1, r3
    1686:	7a4b      	ldrb	r3, [r1, #9]
    1688:	b923      	cbnz	r3, 1694 <get_status+0x34>
		return CLOCK_CONTROL_STATUS_ON;
	}

	if (data->ref > 0) {
    168a:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
    168c:	fab0 f080 	clz	r0, r0
    1690:	0940      	lsrs	r0, r0, #5
		return CLOCK_CONTROL_STATUS_STARTING;
	}

	return CLOCK_CONTROL_STATUS_OFF;
}
    1692:	bd38      	pop	{r3, r4, r5, pc}
		return CLOCK_CONTROL_STATUS_ON;
    1694:	2002      	movs	r0, #2
    1696:	e7fc      	b.n	1692 <get_status+0x32>
    1698:	000072a0 	.word	0x000072a0
    169c:	00006f74 	.word	0x00006f74
    16a0:	00007265 	.word	0x00007265

000016a4 <clock_async_start>:
}

static int clock_async_start(struct device *dev,
			     clock_control_subsys_t subsys,
			     struct clock_control_async_data *data)
{
    16a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct nrf_clock_control_sub_config *config;
	struct nrf_clock_control_sub_data *clk_data;
	int key;
	u8_t ref;

	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    16a8:	b2ce      	uxtb	r6, r1
    16aa:	2e01      	cmp	r6, #1
{
    16ac:	4607      	mov	r7, r0
    16ae:	4689      	mov	r9, r1
    16b0:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    16b2:	d909      	bls.n	16c8 <clock_async_start+0x24>
    16b4:	4941      	ldr	r1, [pc, #260]	; (17bc <clock_async_start+0x118>)
    16b6:	4842      	ldr	r0, [pc, #264]	; (17c0 <clock_async_start+0x11c>)
    16b8:	23ef      	movs	r3, #239	; 0xef
    16ba:	4a42      	ldr	r2, [pc, #264]	; (17c4 <clock_async_start+0x120>)
    16bc:	f004 fb19 	bl	5cf2 <printk>
    16c0:	21ef      	movs	r1, #239	; 0xef
    16c2:	4840      	ldr	r0, [pc, #256]	; (17c4 <clock_async_start+0x120>)
    16c4:	f004 fbe3 	bl	5e8e <assert_post_action>
	config = get_sub_config(dev, type);
    16c8:	f8d7 a004 	ldr.w	sl, [r7, #4]
	clk_data = get_sub_data(dev, type);
    16cc:	f8d7 800c 	ldr.w	r8, [r7, #12]

	__ASSERT_NO_MSG((data == NULL) ||
    16d0:	2c00      	cmp	r4, #0
    16d2:	d153      	bne.n	177c <clock_async_start+0xd8>
	__asm__ volatile(
    16d4:	f04f 0320 	mov.w	r3, #32
    16d8:	f3ef 8b11 	mrs	fp, BASEPRI
    16dc:	f383 8811 	msr	BASEPRI, r3
    16e0:	f3bf 8f6f 	isb	sy
	    && is_in_list(&clk_data->list, &data->node)) {
		return -EBUSY;
	}

	key = irq_lock();
	ref = ++clk_data->ref;
    16e4:	230c      	movs	r3, #12
    16e6:	fb06 8303 	mla	r3, r6, r3, r8
    16ea:	7a1d      	ldrb	r5, [r3, #8]
    16ec:	3501      	adds	r5, #1
    16ee:	b2ed      	uxtb	r5, r5
    16f0:	721d      	strb	r5, [r3, #8]
	__ASSERT_NO_MSG(clk_data->ref > 0);
    16f2:	b95d      	cbnz	r5, 170c <clock_async_start+0x68>
    16f4:	4934      	ldr	r1, [pc, #208]	; (17c8 <clock_async_start+0x124>)
    16f6:	4832      	ldr	r0, [pc, #200]	; (17c0 <clock_async_start+0x11c>)
    16f8:	f44f 7380 	mov.w	r3, #256	; 0x100
    16fc:	4a31      	ldr	r2, [pc, #196]	; (17c4 <clock_async_start+0x120>)
    16fe:	f004 faf8 	bl	5cf2 <printk>
    1702:	f44f 7180 	mov.w	r1, #256	; 0x100
    1706:	482f      	ldr	r0, [pc, #188]	; (17c4 <clock_async_start+0x120>)
    1708:	f004 fbc1 	bl	5e8e <assert_post_action>
	__asm__ volatile(
    170c:	f38b 8811 	msr	BASEPRI, fp
    1710:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	if (data) {
    1714:	b344      	cbz	r4, 1768 <clock_async_start+0xc4>
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    1716:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    171a:	2203      	movs	r2, #3
    171c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		bool already_started;

		clock_irqs_disable();
		already_started = clk_data->started;
    1720:	220c      	movs	r2, #12
    1722:	4372      	muls	r2, r6
    1724:	eb08 0302 	add.w	r3, r8, r2
    1728:	7a59      	ldrb	r1, [r3, #9]
		if (!already_started) {
    172a:	b991      	cbnz	r1, 1752 <clock_async_start+0xae>
	__asm__ volatile(
    172c:	f04f 0020 	mov.w	r0, #32
    1730:	f3ef 8c11 	mrs	ip, BASEPRI
    1734:	f380 8811 	msr	BASEPRI, r0
    1738:	f3bf 8f6f 	isb	sy
	return node->next;
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
    173c:	6021      	str	r1, [r4, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    173e:	6858      	ldr	r0, [r3, #4]
    1740:	2800      	cmp	r0, #0
    1742:	d133      	bne.n	17ac <clock_async_start+0x108>
	list->tail = node;
    1744:	605c      	str	r4, [r3, #4]
	list->head = node;
    1746:	f848 4002 	str.w	r4, [r8, r2]
	__asm__ volatile(
    174a:	f38c 8811 	msr	BASEPRI, ip
    174e:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
    1752:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1756:	2203      	movs	r2, #3
    1758:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
			list_append(&clk_data->list, &data->node);
		}
		clock_irqs_enable();

		if (already_started) {
    175c:	b121      	cbz	r1, 1768 <clock_async_start+0xc4>
			data->cb(dev, subsys, data->user_data);
    175e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    1762:	4649      	mov	r1, r9
    1764:	4638      	mov	r0, r7
    1766:	4798      	blx	r3
		}
	}

	if (ref == 1) {
    1768:	2d01      	cmp	r5, #1
    176a:	d105      	bne.n	1778 <clock_async_start+0xd4>
		if (IS_ENABLED(CONFIG_NRF52_ANOMALY_132_WORKAROUND) &&
			(subsys == CLOCK_CONTROL_NRF_SUBSYS_LF)) {
			anomaly_132_workaround();
		}

		nrf_clock_task_trigger(NRF_CLOCK, config->start_tsk);
    176c:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_clock_task_trigger(NRF_CLOCK_Type * p_reg, nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1770:	78b3      	ldrb	r3, [r6, #2]
    1772:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    1776:	601d      	str	r5, [r3, #0]
	}

	return 0;
    1778:	2000      	movs	r0, #0
    177a:	e01c      	b.n	17b6 <clock_async_start+0x112>
	__ASSERT_NO_MSG((data == NULL) ||
    177c:	6863      	ldr	r3, [r4, #4]
    177e:	b94b      	cbnz	r3, 1794 <clock_async_start+0xf0>
    1780:	4912      	ldr	r1, [pc, #72]	; (17cc <clock_async_start+0x128>)
    1782:	480f      	ldr	r0, [pc, #60]	; (17c0 <clock_async_start+0x11c>)
    1784:	23f3      	movs	r3, #243	; 0xf3
    1786:	4a0f      	ldr	r2, [pc, #60]	; (17c4 <clock_async_start+0x120>)
    1788:	f004 fab3 	bl	5cf2 <printk>
    178c:	21f3      	movs	r1, #243	; 0xf3
    178e:	480d      	ldr	r0, [pc, #52]	; (17c4 <clock_async_start+0x120>)
    1790:	f004 fb7d 	bl	5e8e <assert_post_action>
	sys_snode_t *item = sys_slist_peek_head(list);
    1794:	230c      	movs	r3, #12
    1796:	4373      	muls	r3, r6
    1798:	f858 3003 	ldr.w	r3, [r8, r3]
		if (item == node) {
    179c:	429c      	cmp	r4, r3
    179e:	d008      	beq.n	17b2 <clock_async_start+0x10e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    17a0:	2b00      	cmp	r3, #0
    17a2:	d097      	beq.n	16d4 <clock_async_start+0x30>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    17a4:	681b      	ldr	r3, [r3, #0]
	} while (item);
    17a6:	2b00      	cmp	r3, #0
    17a8:	d1f8      	bne.n	179c <clock_async_start+0xf8>
    17aa:	e793      	b.n	16d4 <clock_async_start+0x30>
	parent->next = child;
    17ac:	6004      	str	r4, [r0, #0]
	list->tail = node;
    17ae:	605c      	str	r4, [r3, #4]
}
    17b0:	e7cb      	b.n	174a <clock_async_start+0xa6>
		return -EBUSY;
    17b2:	f06f 000f 	mvn.w	r0, #15
}
    17b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    17ba:	bf00      	nop
    17bc:	000072a0 	.word	0x000072a0
    17c0:	00006f74 	.word	0x00006f74
    17c4:	00007265 	.word	0x00007265
    17c8:	00007312 	.word	0x00007312
    17cc:	000072c4 	.word	0x000072c4

000017d0 <clock_stop>:
{
    17d0:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    17d2:	b2cc      	uxtb	r4, r1
    17d4:	2c01      	cmp	r4, #1
{
    17d6:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    17d8:	d909      	bls.n	17ee <clock_stop+0x1e>
    17da:	4918      	ldr	r1, [pc, #96]	; (183c <clock_stop+0x6c>)
    17dc:	4818      	ldr	r0, [pc, #96]	; (1840 <clock_stop+0x70>)
    17de:	2394      	movs	r3, #148	; 0x94
    17e0:	4a18      	ldr	r2, [pc, #96]	; (1844 <clock_stop+0x74>)
    17e2:	f004 fa86 	bl	5cf2 <printk>
    17e6:	2194      	movs	r1, #148	; 0x94
    17e8:	4816      	ldr	r0, [pc, #88]	; (1844 <clock_stop+0x74>)
    17ea:	f004 fb50 	bl	5e8e <assert_post_action>
	config = get_sub_config(dev, type);
    17ee:	6869      	ldr	r1, [r5, #4]
	data = get_sub_data(dev, type);
    17f0:	68ed      	ldr	r5, [r5, #12]
	__asm__ volatile(
    17f2:	f04f 0320 	mov.w	r3, #32
    17f6:	f3ef 8611 	mrs	r6, BASEPRI
    17fa:	f383 8811 	msr	BASEPRI, r3
    17fe:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
    1802:	220c      	movs	r2, #12
    1804:	4362      	muls	r2, r4
    1806:	18ab      	adds	r3, r5, r2
    1808:	7a18      	ldrb	r0, [r3, #8]
    180a:	b190      	cbz	r0, 1832 <clock_stop+0x62>
	data->ref--;
    180c:	3801      	subs	r0, #1
    180e:	b2c0      	uxtb	r0, r0
    1810:	7218      	strb	r0, [r3, #8]
	if (data->ref == 0) {
    1812:	b988      	cbnz	r0, 1838 <clock_stop+0x68>
		nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
    1814:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    1818:	2101      	movs	r1, #1
	list->head = NULL;
    181a:	50a8      	str	r0, [r5, r2]
    181c:	78e2      	ldrb	r2, [r4, #3]
	list->tail = NULL;
    181e:	6058      	str	r0, [r3, #4]
    1820:	f102 2250 	add.w	r2, r2, #1342197760	; 0x50005000
    1824:	6011      	str	r1, [r2, #0]
		data->started = false;
    1826:	7258      	strb	r0, [r3, #9]
	__asm__ volatile(
    1828:	f386 8811 	msr	BASEPRI, r6
    182c:	f3bf 8f6f 	isb	sy
}
    1830:	bd70      	pop	{r4, r5, r6, pc}
		err = -EALREADY;
    1832:	f06f 0044 	mvn.w	r0, #68	; 0x44
    1836:	e7f7      	b.n	1828 <clock_stop+0x58>
	int err = 0;
    1838:	2000      	movs	r0, #0
    183a:	e7f5      	b.n	1828 <clock_stop+0x58>
    183c:	000072a0 	.word	0x000072a0
    1840:	00006f74 	.word	0x00006f74
    1844:	00007265 	.word	0x00007265

00001848 <clkstarted_handle.constprop.0>:
DEVICE_AND_API_INIT(clock_nrf, DT_INST_LABEL(0),
		    clk_init, &data, &config, PRE_KERNEL_1,
		    CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &clock_control_api);

static void clkstarted_handle(struct device *dev,
    1848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
	struct clock_control_async_data *async_data;

	DBG(dev, type, "Clock started");
	sub_data->started = true;
    184a:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    184c:	4e11      	ldr	r6, [pc, #68]	; (1894 <clkstarted_handle.constprop.0+0x4c>)
static void clkstarted_handle(struct device *dev,
    184e:	4605      	mov	r5, r0
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    1850:	68f3      	ldr	r3, [r6, #12]
	sub_data->started = true;
    1852:	fb04 3400 	mla	r4, r4, r0, r3
    1856:	2301      	movs	r3, #1
    1858:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
    185a:	f04f 0320 	mov.w	r3, #32
    185e:	f3ef 8111 	mrs	r1, BASEPRI
    1862:	f383 8811 	msr	BASEPRI, r3
    1866:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
    186a:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    186c:	b12b      	cbz	r3, 187a <clkstarted_handle.constprop.0+0x32>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    186e:	6860      	ldr	r0, [r4, #4]
    1870:	681a      	ldr	r2, [r3, #0]
    1872:	4283      	cmp	r3, r0
	list->head = node;
    1874:	6022      	str	r2, [r4, #0]
	list->tail = node;
    1876:	bf08      	it	eq
    1878:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
    187a:	f381 8811 	msr	BASEPRI, r1
    187e:	f3bf 8f6f 	isb	sy

	while ((async_data = list_get(&sub_data->list)) != NULL) {
    1882:	b903      	cbnz	r3, 1886 <clkstarted_handle.constprop.0+0x3e>
		async_data->cb(dev, (clock_control_subsys_t)type,
				async_data->user_data);
	}
}
    1884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		async_data->cb(dev, (clock_control_subsys_t)type,
    1886:	4629      	mov	r1, r5
    1888:	e9d3 7201 	ldrd	r7, r2, [r3, #4]
    188c:	4630      	mov	r0, r6
    188e:	47b8      	blx	r7
    1890:	e7e3      	b.n	185a <clkstarted_handle.constprop.0+0x12>
    1892:	bf00      	nop
    1894:	20000078 	.word	0x20000078

00001898 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    1898:	b508      	push	{r3, lr}
#endif
}

NRF_STATIC_INLINE bool nrf_clock_event_check(NRF_CLOCK_Type const * p_reg, nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    189a:	4b11      	ldr	r3, [pc, #68]	; (18e0 <nrf_power_clock_isr+0x48>)
    189c:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    189e:	b16a      	cbz	r2, 18bc <nrf_power_clock_isr+0x24>
    return p_reg->INTENSET & mask;
    18a0:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    18a4:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    18a8:	07d1      	lsls	r1, r2, #31
    18aa:	d507      	bpl.n	18bc <nrf_power_clock_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    18ac:	2200      	movs	r2, #0
    18ae:	601a      	str	r2, [r3, #0]
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    18b0:	4b0c      	ldr	r3, [pc, #48]	; (18e4 <nrf_power_clock_isr+0x4c>)

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    18b2:	68db      	ldr	r3, [r3, #12]
    18b4:	7a58      	ldrb	r0, [r3, #9]
    18b6:	b908      	cbnz	r0, 18bc <nrf_power_clock_isr+0x24>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    18b8:	f7ff ffc6 	bl	1848 <clkstarted_handle.constprop.0>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    18bc:	4b0a      	ldr	r3, [pc, #40]	; (18e8 <nrf_power_clock_isr+0x50>)
    18be:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    18c0:	b162      	cbz	r2, 18dc <nrf_power_clock_isr+0x44>
    return p_reg->INTENSET & mask;
    18c2:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    18c6:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    18ca:	0792      	lsls	r2, r2, #30
    18cc:	d506      	bpl.n	18dc <nrf_power_clock_isr+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    18ce:	2200      	movs	r2, #0
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started();
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    18d0:	2001      	movs	r0, #1
    18d2:	601a      	str	r2, [r3, #0]
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    18d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    18d8:	f7ff bfb6 	b.w	1848 <clkstarted_handle.constprop.0>
}
    18dc:	bd08      	pop	{r3, pc}
    18de:	bf00      	nop
    18e0:	50005100 	.word	0x50005100
    18e4:	20000078 	.word	0x20000078
    18e8:	50005104 	.word	0x50005104

000018ec <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
    18ec:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
    18ee:	4c06      	ldr	r4, [pc, #24]	; (1908 <z_clock_isr+0x1c>)
    18f0:	4906      	ldr	r1, [pc, #24]	; (190c <z_clock_isr+0x20>)
    18f2:	4622      	mov	r2, r4
    18f4:	4806      	ldr	r0, [pc, #24]	; (1910 <z_clock_isr+0x24>)
    18f6:	2317      	movs	r3, #23
    18f8:	f004 f9fb 	bl	5cf2 <printk>
    18fc:	4620      	mov	r0, r4
}
    18fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
    1902:	2117      	movs	r1, #23
    1904:	f004 bac3 	b.w	5e8e <assert_post_action>
    1908:	00007344 	.word	0x00007344
    190c:	000084bc 	.word	0x000084bc
    1910:	00006f74 	.word	0x00006f74

00001914 <handle_next_tick_case>:
 * counter progresses during that time it means that 1 tick elapsed and
 * interrupt is set pending.
 */
static void handle_next_tick_case(u32_t t)
{
	set_comparator(t + 2);
    1914:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    1916:	4b08      	ldr	r3, [pc, #32]	; (1938 <handle_next_tick_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    1918:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    191c:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    1920:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
    1924:	4290      	cmp	r0, r2
    1926:	d100      	bne.n	192a <handle_next_tick_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
    1928:	4770      	bx	lr
    192a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
    192e:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    1930:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1934:	e7f2      	b.n	191c <handle_next_tick_case+0x8>
    1936:	bf00      	nop
    1938:	50015000 	.word	0x50015000

0000193c <rtc1_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    193c:	2200      	movs	r2, #0
    193e:	4b06      	ldr	r3, [pc, #24]	; (1958 <rtc1_nrf_isr+0x1c>)
    1940:	601a      	str	r2, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	u32_t t = get_comparator();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    1942:	4a06      	ldr	r2, [pc, #24]	; (195c <rtc1_nrf_isr+0x20>)
    return p_reg->CC[ch];
    1944:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
    1948:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    194a:	1ac0      	subs	r0, r0, r3
    194c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    1950:	4403      	add	r3, r0
    1952:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_ticks(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    1954:	f004 b80a 	b.w	596c <z_clock_announce>
    1958:	50015140 	.word	0x50015140
    195c:	20000234 	.word	0x20000234

00001960 <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
    1960:	b538      	push	{r3, r4, r5, lr}
    1962:	4814      	ldr	r0, [pc, #80]	; (19b4 <z_clock_driver_init+0x54>)
    1964:	f002 f842 	bl	39ec <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_LABEL(DT_INST(0, nordic_nrf_clock)));
	if (!clock) {
    1968:	b300      	cbz	r0, 19ac <z_clock_driver_init+0x4c>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    196a:	6883      	ldr	r3, [r0, #8]
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    196c:	2400      	movs	r4, #0
    196e:	2101      	movs	r1, #1
    1970:	681b      	ldr	r3, [r3, #0]
    1972:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1974:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    1978:	4d0f      	ldr	r5, [pc, #60]	; (19b8 <z_clock_driver_init+0x58>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    197a:	4b10      	ldr	r3, [pc, #64]	; (19bc <z_clock_driver_init+0x5c>)
    p_reg->PRESCALER = val;
    197c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1980:	601c      	str	r4, [r3, #0]
    1982:	4b0f      	ldr	r3, [pc, #60]	; (19c0 <z_clock_driver_init+0x60>)
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC1_IRQn);
	int_enable();

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    1984:	2101      	movs	r1, #1
    1986:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
    198a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    198e:	4622      	mov	r2, r4
    1990:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    1994:	2015      	movs	r0, #21
    1996:	f000 f947 	bl	1c28 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
    199a:	2015      	movs	r0, #21
    199c:	f000 f934 	bl	1c08 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    19a0:	2301      	movs	r3, #1

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
    19a2:	4620      	mov	r0, r4
    19a4:	4a07      	ldr	r2, [pc, #28]	; (19c4 <z_clock_driver_init+0x64>)
    19a6:	6013      	str	r3, [r2, #0]
    19a8:	602b      	str	r3, [r5, #0]
}
    19aa:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    19ac:	f04f 30ff 	mov.w	r0, #4294967295
    19b0:	e7fb      	b.n	19aa <z_clock_driver_init+0x4a>
    19b2:	bf00      	nop
    19b4:	00007324 	.word	0x00007324
    19b8:	50015000 	.word	0x50015000
    19bc:	50015140 	.word	0x50015140
    19c0:	e000e100 	.word	0xe000e100
    19c4:	50015008 	.word	0x50015008

000019c8 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    19c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     return p_reg->COUNTER;
    19ca:	4b2c      	ldr	r3, [pc, #176]	; (1a7c <z_clock_set_timeout+0xb4>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    19cc:	4c2c      	ldr	r4, [pc, #176]	; (1a80 <z_clock_set_timeout+0xb8>)
    19ce:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	u32_t unannounced = counter_sub(counter(), last_count);
    19d2:	4b2c      	ldr	r3, [pc, #176]	; (1a84 <z_clock_set_timeout+0xbc>)
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    19d4:	f1b0 3fff 	cmp.w	r0, #4294967295
    19d8:	bf08      	it	eq
    19da:	4620      	moveq	r0, r4
	u32_t unannounced = counter_sub(counter(), last_count);
    19dc:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    19de:	1a52      	subs	r2, r2, r1
    19e0:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    19e4:	0212      	lsls	r2, r2, #8
    19e6:	d436      	bmi.n	1a56 <z_clock_set_timeout+0x8e>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    19e8:	3801      	subs	r0, #1
    19ea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    19ee:	42a0      	cmp	r0, r4
    19f0:	bfa8      	it	ge
    19f2:	4620      	movge	r0, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    19f4:	3301      	adds	r3, #1
    19f6:	4418      	add	r0, r3
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    19f8:	42a0      	cmp	r0, r4
    19fa:	bf94      	ite	ls
    19fc:	180c      	addls	r4, r1, r0
    19fe:	190c      	addhi	r4, r1, r4
    p_reg->INTENCLR = mask;
    1a00:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1a04:	2700      	movs	r7, #0
    p_reg->INTENCLR = mask;
    1a06:	4b1d      	ldr	r3, [pc, #116]	; (1a7c <z_clock_set_timeout+0xb4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1a08:	4e1f      	ldr	r6, [pc, #124]	; (1a88 <z_clock_set_timeout+0xc0>)
    p_reg->INTENCLR = mask;
    1a0a:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
     return p_reg->COUNTER;
    1a0e:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    return p_reg->CC[ch];
    1a12:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    1a16:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	return (a - b) & COUNTER_MAX;
    1a1a:	1a52      	subs	r2, r2, r1
    1a1c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (counter_sub(prev_val, now) == 1) {
    1a20:	2a01      	cmp	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1a22:	6037      	str	r7, [r6, #0]
    p_reg->CC[ch] = cc_val;
    1a24:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    1a28:	461d      	mov	r5, r3
    1a2a:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
    1a2e:	d103      	bne.n	1a38 <z_clock_set_timeout+0x70>
	z_impl_k_busy_wait(usec_to_wait);
    1a30:	200f      	movs	r0, #15
    1a32:	f004 fffa 	bl	6a2a <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1a36:	6037      	str	r7, [r6, #0]
    1a38:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    1a3c:	4b13      	ldr	r3, [pc, #76]	; (1a8c <z_clock_set_timeout+0xc4>)
    1a3e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
    1a42:	f8d5 0504 	ldr.w	r0, [r5, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    1a46:	1a23      	subs	r3, r4, r0
    1a48:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (diff == 1) {
    1a4c:	2b01      	cmp	r3, #1
    1a4e:	d104      	bne.n	1a5a <z_clock_set_timeout+0x92>
		handle_next_tick_case(t);
    1a50:	f7ff ff60 	bl	1914 <handle_next_tick_case>
    1a54:	e00b      	b.n	1a6e <z_clock_set_timeout+0xa6>
		ticks = 0;
    1a56:	2000      	movs	r0, #0
    1a58:	e7cc      	b.n	19f4 <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    1a5a:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    1a5e:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
     return p_reg->COUNTER;
    1a62:	f8d5 0504 	ldr.w	r0, [r5, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    1a66:	1a24      	subs	r4, r4, r0
    1a68:	3c02      	subs	r4, #2
	if (diff > MAX_TICKS) {
    1a6a:	0223      	lsls	r3, r4, #8
    1a6c:	d4f0      	bmi.n	1a50 <z_clock_set_timeout+0x88>
    p_reg->INTENSET = mask;
    1a6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    1a72:	4b02      	ldr	r3, [pc, #8]	; (1a7c <z_clock_set_timeout+0xb4>)
    1a74:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	set_protected_absolute_ticks(cyc);
}
    1a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1a7a:	bf00      	nop
    1a7c:	50015000 	.word	0x50015000
    1a80:	007fffff 	.word	0x007fffff
    1a84:	20000234 	.word	0x20000234
    1a88:	50015140 	.word	0x50015140
    1a8c:	e000e100 	.word	0xe000e100

00001a90 <z_clock_elapsed>:

u32_t z_clock_elapsed(void)
{
    1a90:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    1a92:	f04f 0320 	mov.w	r3, #32
    1a96:	f3ef 8511 	mrs	r5, BASEPRI
    1a9a:	f383 8811 	msr	BASEPRI, r3
    1a9e:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1aa2:	481a      	ldr	r0, [pc, #104]	; (1b0c <z_clock_elapsed+0x7c>)
    1aa4:	f003 fd40 	bl	5528 <z_spin_lock_valid>
    1aa8:	b968      	cbnz	r0, 1ac6 <z_clock_elapsed+0x36>
    1aaa:	235c      	movs	r3, #92	; 0x5c
    1aac:	4a18      	ldr	r2, [pc, #96]	; (1b10 <z_clock_elapsed+0x80>)
    1aae:	4919      	ldr	r1, [pc, #100]	; (1b14 <z_clock_elapsed+0x84>)
    1ab0:	4819      	ldr	r0, [pc, #100]	; (1b18 <z_clock_elapsed+0x88>)
    1ab2:	f004 f91e 	bl	5cf2 <printk>
    1ab6:	4915      	ldr	r1, [pc, #84]	; (1b0c <z_clock_elapsed+0x7c>)
    1ab8:	4818      	ldr	r0, [pc, #96]	; (1b1c <z_clock_elapsed+0x8c>)
    1aba:	f004 f91a 	bl	5cf2 <printk>
    1abe:	215c      	movs	r1, #92	; 0x5c
    1ac0:	4813      	ldr	r0, [pc, #76]	; (1b10 <z_clock_elapsed+0x80>)
    1ac2:	f004 f9e4 	bl	5e8e <assert_post_action>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
    1ac6:	4811      	ldr	r0, [pc, #68]	; (1b0c <z_clock_elapsed+0x7c>)
    1ac8:	f003 fd4a 	bl	5560 <z_spin_lock_set_owner>
     return p_reg->COUNTER;
    1acc:	4b14      	ldr	r3, [pc, #80]	; (1b20 <z_clock_elapsed+0x90>)
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1ace:	480f      	ldr	r0, [pc, #60]	; (1b0c <z_clock_elapsed+0x7c>)
    1ad0:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    1ad4:	4b13      	ldr	r3, [pc, #76]	; (1b24 <z_clock_elapsed+0x94>)
	return (a - b) & COUNTER_MAX;
    1ad6:	681b      	ldr	r3, [r3, #0]
    1ad8:	1ae4      	subs	r4, r4, r3
    1ada:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    1ade:	f003 fd31 	bl	5544 <z_spin_unlock_valid>
    1ae2:	b968      	cbnz	r0, 1b00 <z_clock_elapsed+0x70>
    1ae4:	2384      	movs	r3, #132	; 0x84
    1ae6:	4a0a      	ldr	r2, [pc, #40]	; (1b10 <z_clock_elapsed+0x80>)
    1ae8:	490f      	ldr	r1, [pc, #60]	; (1b28 <z_clock_elapsed+0x98>)
    1aea:	480b      	ldr	r0, [pc, #44]	; (1b18 <z_clock_elapsed+0x88>)
    1aec:	f004 f901 	bl	5cf2 <printk>
    1af0:	4906      	ldr	r1, [pc, #24]	; (1b0c <z_clock_elapsed+0x7c>)
    1af2:	480e      	ldr	r0, [pc, #56]	; (1b2c <z_clock_elapsed+0x9c>)
    1af4:	f004 f8fd 	bl	5cf2 <printk>
    1af8:	2184      	movs	r1, #132	; 0x84
    1afa:	4805      	ldr	r0, [pc, #20]	; (1b10 <z_clock_elapsed+0x80>)
    1afc:	f004 f9c7 	bl	5e8e <assert_post_action>
	__asm__ volatile(
    1b00:	f385 8811 	msr	BASEPRI, r5
    1b04:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    1b08:	4620      	mov	r0, r4
    1b0a:	bd38      	pop	{r3, r4, r5, pc}
    1b0c:	20000238 	.word	0x20000238
    1b10:	00007380 	.word	0x00007380
    1b14:	000073a6 	.word	0x000073a6
    1b18:	00006f74 	.word	0x00006f74
    1b1c:	000073bb 	.word	0x000073bb
    1b20:	50015000 	.word	0x50015000
    1b24:	20000234 	.word	0x20000234
    1b28:	000073d3 	.word	0x000073d3
    1b2c:	000073ea 	.word	0x000073ea

00001b30 <z_timer_cycle_get_32>:

u32_t z_timer_cycle_get_32(void)
{
    1b30:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    1b32:	f04f 0320 	mov.w	r3, #32
    1b36:	f3ef 8511 	mrs	r5, BASEPRI
    1b3a:	f383 8811 	msr	BASEPRI, r3
    1b3e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1b42:	481b      	ldr	r0, [pc, #108]	; (1bb0 <z_timer_cycle_get_32+0x80>)
    1b44:	f003 fcf0 	bl	5528 <z_spin_lock_valid>
    1b48:	b968      	cbnz	r0, 1b66 <z_timer_cycle_get_32+0x36>
    1b4a:	235c      	movs	r3, #92	; 0x5c
    1b4c:	4a19      	ldr	r2, [pc, #100]	; (1bb4 <z_timer_cycle_get_32+0x84>)
    1b4e:	491a      	ldr	r1, [pc, #104]	; (1bb8 <z_timer_cycle_get_32+0x88>)
    1b50:	481a      	ldr	r0, [pc, #104]	; (1bbc <z_timer_cycle_get_32+0x8c>)
    1b52:	f004 f8ce 	bl	5cf2 <printk>
    1b56:	4916      	ldr	r1, [pc, #88]	; (1bb0 <z_timer_cycle_get_32+0x80>)
    1b58:	4819      	ldr	r0, [pc, #100]	; (1bc0 <z_timer_cycle_get_32+0x90>)
    1b5a:	f004 f8ca 	bl	5cf2 <printk>
    1b5e:	215c      	movs	r1, #92	; 0x5c
    1b60:	4814      	ldr	r0, [pc, #80]	; (1bb4 <z_timer_cycle_get_32+0x84>)
    1b62:	f004 f994 	bl	5e8e <assert_post_action>
	z_spin_lock_set_owner(l);
    1b66:	4812      	ldr	r0, [pc, #72]	; (1bb0 <z_timer_cycle_get_32+0x80>)
    1b68:	f003 fcfa 	bl	5560 <z_spin_lock_set_owner>
    1b6c:	4b15      	ldr	r3, [pc, #84]	; (1bc4 <z_timer_cycle_get_32+0x94>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1b6e:	4810      	ldr	r0, [pc, #64]	; (1bb0 <z_timer_cycle_get_32+0x80>)
    1b70:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    1b74:	4b14      	ldr	r3, [pc, #80]	; (1bc8 <z_timer_cycle_get_32+0x98>)
    1b76:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
    1b78:	1ae4      	subs	r4, r4, r3
    1b7a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    1b7e:	441c      	add	r4, r3
    1b80:	f003 fce0 	bl	5544 <z_spin_unlock_valid>
    1b84:	b968      	cbnz	r0, 1ba2 <z_timer_cycle_get_32+0x72>
    1b86:	2384      	movs	r3, #132	; 0x84
    1b88:	4a0a      	ldr	r2, [pc, #40]	; (1bb4 <z_timer_cycle_get_32+0x84>)
    1b8a:	4910      	ldr	r1, [pc, #64]	; (1bcc <z_timer_cycle_get_32+0x9c>)
    1b8c:	480b      	ldr	r0, [pc, #44]	; (1bbc <z_timer_cycle_get_32+0x8c>)
    1b8e:	f004 f8b0 	bl	5cf2 <printk>
    1b92:	4907      	ldr	r1, [pc, #28]	; (1bb0 <z_timer_cycle_get_32+0x80>)
    1b94:	480e      	ldr	r0, [pc, #56]	; (1bd0 <z_timer_cycle_get_32+0xa0>)
    1b96:	f004 f8ac 	bl	5cf2 <printk>
    1b9a:	2184      	movs	r1, #132	; 0x84
    1b9c:	4805      	ldr	r0, [pc, #20]	; (1bb4 <z_timer_cycle_get_32+0x84>)
    1b9e:	f004 f976 	bl	5e8e <assert_post_action>
	__asm__ volatile(
    1ba2:	f385 8811 	msr	BASEPRI, r5
    1ba6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    1baa:	4620      	mov	r0, r4
    1bac:	bd38      	pop	{r3, r4, r5, pc}
    1bae:	bf00      	nop
    1bb0:	20000238 	.word	0x20000238
    1bb4:	00007380 	.word	0x00007380
    1bb8:	000073a6 	.word	0x000073a6
    1bbc:	00006f74 	.word	0x00006f74
    1bc0:	000073bb 	.word	0x000073bb
    1bc4:	50015000 	.word	0x50015000
    1bc8:	20000234 	.word	0x20000234
    1bcc:	000073d3 	.word	0x000073d3
    1bd0:	000073ea 	.word	0x000073ea

00001bd4 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    1bd4:	4a09      	ldr	r2, [pc, #36]	; (1bfc <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1bd6:	490a      	ldr	r1, [pc, #40]	; (1c00 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1bd8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1bda:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    1bdc:	66d8      	str	r0, [r3, #108]	; 0x6c
	_current->arch.swap_return_value = _k_neg_eagain;
    1bde:	6719      	str	r1, [r3, #112]	; 0x70

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1be0:	4908      	ldr	r1, [pc, #32]	; (1c04 <arch_swap+0x30>)
    1be2:	684b      	ldr	r3, [r1, #4]
    1be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1be8:	604b      	str	r3, [r1, #4]
    1bea:	2300      	movs	r3, #0
    1bec:	f383 8811 	msr	BASEPRI, r3
    1bf0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1bf4:	6893      	ldr	r3, [r2, #8]
}
    1bf6:	6f18      	ldr	r0, [r3, #112]	; 0x70
    1bf8:	4770      	bx	lr
    1bfa:	bf00      	nop
    1bfc:	200003c4 	.word	0x200003c4
    1c00:	00006f04 	.word	0x00006f04
    1c04:	e000ed00 	.word	0xe000ed00

00001c08 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1c08:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1c0a:	2b00      	cmp	r3, #0
    1c0c:	db08      	blt.n	1c20 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1c0e:	2201      	movs	r2, #1
    1c10:	f000 001f 	and.w	r0, r0, #31
    1c14:	fa02 f000 	lsl.w	r0, r2, r0
    1c18:	4a02      	ldr	r2, [pc, #8]	; (1c24 <arch_irq_enable+0x1c>)
    1c1a:	095b      	lsrs	r3, r3, #5
    1c1c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1c20:	4770      	bx	lr
    1c22:	bf00      	nop
    1c24:	e000e100 	.word	0xe000e100

00001c28 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, u32_t flags)
{
    1c28:	b570      	push	{r4, r5, r6, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
    1c2a:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    1c2c:	2c07      	cmp	r4, #7
{
    1c2e:	4605      	mov	r5, r0
    1c30:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    1c32:	d90e      	bls.n	1c52 <z_arm_irq_priority_set+0x2a>
    1c34:	235b      	movs	r3, #91	; 0x5b
    1c36:	4a10      	ldr	r2, [pc, #64]	; (1c78 <z_arm_irq_priority_set+0x50>)
    1c38:	4910      	ldr	r1, [pc, #64]	; (1c7c <z_arm_irq_priority_set+0x54>)
    1c3a:	4811      	ldr	r0, [pc, #68]	; (1c80 <z_arm_irq_priority_set+0x58>)
    1c3c:	f004 f859 	bl	5cf2 <printk>
    1c40:	4631      	mov	r1, r6
    1c42:	4810      	ldr	r0, [pc, #64]	; (1c84 <z_arm_irq_priority_set+0x5c>)
    1c44:	2207      	movs	r2, #7
    1c46:	f004 f854 	bl	5cf2 <printk>
    1c4a:	215b      	movs	r1, #91	; 0x5b
    1c4c:	480a      	ldr	r0, [pc, #40]	; (1c78 <z_arm_irq_priority_set+0x50>)
    1c4e:	f004 f91e 	bl	5e8e <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1c52:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1c54:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c56:	bfac      	ite	ge
    1c58:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c5c:	4b0a      	ldrlt	r3, [pc, #40]	; (1c88 <z_arm_irq_priority_set+0x60>)
    1c5e:	ea4f 1444 	mov.w	r4, r4, lsl #5
    1c62:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c64:	bfab      	itete	ge
    1c66:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c6a:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c6e:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c72:	555c      	strblt	r4, [r3, r5]
}
    1c74:	bd70      	pop	{r4, r5, r6, pc}
    1c76:	bf00      	nop
    1c78:	000073ff 	.word	0x000073ff
    1c7c:	00007435 	.word	0x00007435
    1c80:	00006f74 	.word	0x00006f74
    1c84:	00007450 	.word	0x00007450
    1c88:	e000ed14 	.word	0xe000ed14

00001c8c <arch_new_thread>:
#ifdef CONFIG_INIT_STACKS
	memset(stack, 0xaa, stack_size);
#endif
#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)stack;
	thread->stack_info.size = stack_size;
    1c8c:	e9c0 1218 	strd	r1, r2, [r0, #96]	; 0x60
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
    1c90:	440a      	add	r2, r1
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(Z_STACK_PTR_ALIGN(stackEnd -
    1c92:	3a20      	subs	r2, #32
    1c94:	f022 0207 	bic.w	r2, r2, #7
#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
    1c98:	6013      	str	r3, [r2, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
    1c9a:	9b00      	ldr	r3, [sp, #0]
	pInitCtx->basic.pc &= 0xfffffffe;
    1c9c:	4907      	ldr	r1, [pc, #28]	; (1cbc <arch_new_thread+0x30>)
	pInitCtx->basic.a2 = (u32_t)parameter1;
    1c9e:	6053      	str	r3, [r2, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    1ca0:	9b01      	ldr	r3, [sp, #4]
	pInitCtx->basic.pc &= 0xfffffffe;
    1ca2:	f021 0101 	bic.w	r1, r1, #1
	pInitCtx->basic.a3 = (u32_t)parameter2;
    1ca6:	6093      	str	r3, [r2, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    1ca8:	9b02      	ldr	r3, [sp, #8]
	pInitCtx->basic.pc &= 0xfffffffe;
    1caa:	6191      	str	r1, [r2, #24]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    1cac:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	pInitCtx->basic.xpsr =
    1cae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1cb2:	61d3      	str	r3, [r2, #28]
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (u32_t)pInitCtx;

	thread->arch.basepri = 0;
    1cb4:	2300      	movs	r3, #0
	thread->callee_saved.psp = (u32_t)pInitCtx;
    1cb6:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1cb8:	66c3      	str	r3, [r0, #108]	; 0x6c

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1cba:	4770      	bx	lr
    1cbc:	00005d27 	.word	0x00005d27

00001cc0 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
    1cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1cc2:	460c      	mov	r4, r1
    1cc4:	4617      	mov	r7, r2
    1cc6:	4606      	mov	r6, r0
    1cc8:	461d      	mov	r5, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    1cca:	f000 fba9 	bl	2420 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);

	_current = main_thread;
    1cce:	4b09      	ldr	r3, [pc, #36]	; (1cf4 <arch_switch_to_main_thread+0x34>)
	start_of_main_stack =
    1cd0:	443c      	add	r4, r7
	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);
    1cd2:	f024 0407 	bic.w	r4, r4, #7
	_current = main_thread;
    1cd6:	609e      	str	r6, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1cd8:	4628      	mov	r0, r5
    1cda:	f384 8809 	msr	PSP, r4
    1cde:	2100      	movs	r1, #0
    1ce0:	b663      	cpsie	if
    1ce2:	f381 8811 	msr	BASEPRI, r1
    1ce6:	f3bf 8f6f 	isb	sy
    1cea:	2200      	movs	r2, #0
    1cec:	2300      	movs	r3, #0
    1cee:	f004 f81a 	bl	5d26 <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1cf2:	bf00      	nop
    1cf4:	200003c4 	.word	0x200003c4

00001cf8 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    1cf8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    1cfa:	4606      	mov	r6, r0

	if (esf != NULL) {
    1cfc:	460c      	mov	r4, r1
    1cfe:	b301      	cbz	r1, 1d42 <z_arm_fatal_error+0x4a>
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    1d00:	4b13      	ldr	r3, [pc, #76]	; (1d50 <z_arm_fatal_error+0x58>)
    1d02:	4d14      	ldr	r5, [pc, #80]	; (1d54 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    1d04:	4814      	ldr	r0, [pc, #80]	; (1d58 <z_arm_fatal_error+0x60>)
    1d06:	1aed      	subs	r5, r5, r3
    1d08:	08ed      	lsrs	r5, r5, #3
    1d0a:	01ad      	lsls	r5, r5, #6
    1d0c:	f045 0501 	orr.w	r5, r5, #1
    1d10:	f8ad 5000 	strh.w	r5, [sp]
    1d14:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    1d18:	6809      	ldr	r1, [r1, #0]
    1d1a:	f004 f922 	bl	5f62 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    1d1e:	f8ad 5000 	strh.w	r5, [sp]
    1d22:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    1d26:	68e1      	ldr	r1, [r4, #12]
    1d28:	480c      	ldr	r0, [pc, #48]	; (1d5c <z_arm_fatal_error+0x64>)
    1d2a:	f004 f91a 	bl	5f62 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    1d2e:	462a      	mov	r2, r5
    1d30:	69e1      	ldr	r1, [r4, #28]
    1d32:	480b      	ldr	r0, [pc, #44]	; (1d60 <z_arm_fatal_error+0x68>)
    1d34:	f004 f8e8 	bl	5f08 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    1d38:	462a      	mov	r2, r5
    1d3a:	69a1      	ldr	r1, [r4, #24]
    1d3c:	4809      	ldr	r0, [pc, #36]	; (1d64 <z_arm_fatal_error+0x6c>)
    1d3e:	f004 f8e3 	bl	5f08 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    1d42:	4621      	mov	r1, r4
    1d44:	4630      	mov	r0, r6
}
    1d46:	b002      	add	sp, #8
    1d48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    1d4c:	f001 be72 	b.w	3a34 <z_fatal_error>
    1d50:	00006d40 	.word	0x00006d40
    1d54:	00006d60 	.word	0x00006d60
    1d58:	00007485 	.word	0x00007485
    1d5c:	000074b4 	.word	0x000074b4
    1d60:	000074e3 	.word	0x000074e3
    1d64:	000074f2 	.word	0x000074f2

00001d68 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1d68:	4a0e      	ldr	r2, [pc, #56]	; (1da4 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    1d6a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1d6c:	4b0e      	ldr	r3, [pc, #56]	; (1da8 <z_arm_prep_c+0x40>)
    1d6e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1d72:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1d74:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1d78:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1d7c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1d80:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1d84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    1d88:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    1d8c:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    1d90:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1d94:	f001 fee4 	bl	3b60 <z_bss_zero>
	z_data_copy();
    1d98:	f001 feec 	bl	3b74 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1d9c:	f000 faf6 	bl	238c <z_arm_interrupt_init>
	z_cstart();
    1da0:	f001 ff26 	bl	3bf0 <z_cstart>
    1da4:	00000000 	.word	0x00000000
    1da8:	e000ed00 	.word	0xe000ed00

00001dac <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1dac:	490f      	ldr	r1, [pc, #60]	; (1dec <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1dae:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1db0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1db4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1db6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1dba:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1dbe:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1dc0:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1dc4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1dc8:	4f09      	ldr	r7, [pc, #36]	; (1df0 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1dca:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1dce:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    1dd0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1dd2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1dd4:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
    movs r3, #0
    1dd6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1dd8:	66d3      	str	r3, [r2, #108]	; 0x6c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1dda:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1dde:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    1de2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1de6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    1dea:	4770      	bx	lr
    ldr r1, =_kernel
    1dec:	200003c4 	.word	0x200003c4
    ldr v4, =_SCS_ICSR
    1df0:	e000ed04 	.word	0xe000ed04

00001df4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    1df4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1df8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1dfa:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1dfe:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1e02:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1e04:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1e08:	2902      	cmp	r1, #2
    beq _oops
    1e0a:	d0ff      	beq.n	1e0c <_oops>

00001e0c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1e0c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    1e0e:	f004 fb0e 	bl	642e <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    1e12:	bd01      	pop	{r0, pc}

00001e14 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1e14:	4901      	ldr	r1, [pc, #4]	; (1e1c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1e16:	2210      	movs	r2, #16
	str	r2, [r1]
    1e18:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1e1a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1e1c:	e000ed10 	.word	0xe000ed10

00001e20 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1e20:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1e22:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1e24:	f380 8811 	msr	BASEPRI, r0
	isb
    1e28:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1e2c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1e30:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1e32:	b662      	cpsie	i
	isb
    1e34:	f3bf 8f6f 	isb	sy

	bx	lr
    1e38:	4770      	bx	lr
    1e3a:	bf00      	nop

00001e3c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1e3c:	bf30      	wfi
    b z_SysNmiOnReset
    1e3e:	f7ff bffd 	b.w	1e3c <z_SysNmiOnReset>
    1e42:	bf00      	nop

00001e44 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1e44:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    1e46:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1e48:	4a0b      	ldr	r2, [pc, #44]	; (1e78 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1e4a:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    1e4c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1e4e:	bf1e      	ittt	ne
	movne	r1, #0
    1e50:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1e52:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    1e54:	f004 fda6 	blne	69a4 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1e58:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1e5a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1e5e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1e62:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1e66:	4905      	ldr	r1, [pc, #20]	; (1e7c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1e68:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1e6a:	c909      	ldmia	r1!, {r0, r3}
#ifdef CONFIG_EXECUTION_BENCHMARKING
	push {r0, r3}	/* Save r0 and r3 into stack */
	bl read_timer_end_of_isr
	pop {r0, r3}	/* Restore r0 and r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    1e6c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1e6e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1e72:	4903      	ldr	r1, [pc, #12]	; (1e80 <_isr_wrapper+0x3c>)
	bx r1
    1e74:	4708      	bx	r1
    1e76:	0000      	.short	0x0000
	ldr r2, =_kernel
    1e78:	200003c4 	.word	0x200003c4
	ldr r1, =_sw_isr_table
    1e7c:	00006b18 	.word	0x00006b18
	ldr r1, =z_arm_int_exit
    1e80:	00001ec9 	.word	0x00001ec9

00001e84 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    1e84:	f004 f80b 	bl	5e9e <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1e88:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1e8a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1e8e:	4808      	ldr	r0, [pc, #32]	; (1eb0 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    1e90:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1e94:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1e96:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1e9a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1e9e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1ea0:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1ea2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1ea6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1eaa:	f7ff ff5d 	bl	1d68 <z_arm_prep_c>
    1eae:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    1eb0:	20000c58 	.word	0x20000c58

00001eb4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1eb4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1eb8:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
    1ebc:	4672      	mov	r2, lr

	push {r0, lr}
    1ebe:	b501      	push	{r0, lr}

	bl z_arm_fault
    1ec0:	f000 f964 	bl	218c <z_arm_fault>

	pop {r0, pc}
    1ec4:	bd01      	pop	{r0, pc}
    1ec6:	bf00      	nop

00001ec8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1ec8:	4b04      	ldr	r3, [pc, #16]	; (1edc <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1eca:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1ecc:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    1ece:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1ed0:	d003      	beq.n	1eda <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1ed2:	4903      	ldr	r1, [pc, #12]	; (1ee0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1ed4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1ed8:	600a      	str	r2, [r1, #0]

00001eda <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1eda:	4770      	bx	lr
	ldr r3, =_kernel
    1edc:	200003c4 	.word	0x200003c4
	ldr r1, =_SCS_ICSR
    1ee0:	e000ed04 	.word	0xe000ed04

00001ee4 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
    1ee4:	b570      	push	{r4, r5, r6, lr}
    1ee6:	4b27      	ldr	r3, [pc, #156]	; (1f84 <usage_fault.isra.0+0xa0>)
    1ee8:	4c27      	ldr	r4, [pc, #156]	; (1f88 <usage_fault.isra.0+0xa4>)
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1eea:	4d28      	ldr	r5, [pc, #160]	; (1f8c <usage_fault.isra.0+0xa8>)
    1eec:	1ae4      	subs	r4, r4, r3
    1eee:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** USAGE FAULT *****");
    1ef0:	01a4      	lsls	r4, r4, #6
    1ef2:	f044 0601 	orr.w	r6, r4, #1
    1ef6:	4631      	mov	r1, r6
    1ef8:	4825      	ldr	r0, [pc, #148]	; (1f90 <usage_fault.isra.0+0xac>)
    1efa:	f003 fff8 	bl	5eee <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1efe:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1f00:	0192      	lsls	r2, r2, #6
    1f02:	d503      	bpl.n	1f0c <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    1f04:	4631      	mov	r1, r6
    1f06:	4823      	ldr	r0, [pc, #140]	; (1f94 <usage_fault.isra.0+0xb0>)
    1f08:	f003 fff1 	bl	5eee <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1f0c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1f0e:	01db      	lsls	r3, r3, #7
    1f10:	d504      	bpl.n	1f1c <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    1f12:	4821      	ldr	r0, [pc, #132]	; (1f98 <usage_fault.isra.0+0xb4>)
    1f14:	f044 0101 	orr.w	r1, r4, #1
    1f18:	f003 ffe9 	bl	5eee <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    1f1c:	4d1b      	ldr	r5, [pc, #108]	; (1f8c <usage_fault.isra.0+0xa8>)
    1f1e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1f20:	02d6      	lsls	r6, r2, #11
    1f22:	d504      	bpl.n	1f2e <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    1f24:	481d      	ldr	r0, [pc, #116]	; (1f9c <usage_fault.isra.0+0xb8>)
    1f26:	f044 0101 	orr.w	r1, r4, #1
    1f2a:	f003 ffe0 	bl	5eee <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1f2e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1f30:	0318      	lsls	r0, r3, #12
    1f32:	d504      	bpl.n	1f3e <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  No coprocessor instructions");
    1f34:	481a      	ldr	r0, [pc, #104]	; (1fa0 <usage_fault.isra.0+0xbc>)
    1f36:	f044 0101 	orr.w	r1, r4, #1
    1f3a:	f003 ffd8 	bl	5eee <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1f3e:	4d13      	ldr	r5, [pc, #76]	; (1f8c <usage_fault.isra.0+0xa8>)
    1f40:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1f42:	0351      	lsls	r1, r2, #13
    1f44:	d504      	bpl.n	1f50 <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    1f46:	4817      	ldr	r0, [pc, #92]	; (1fa4 <usage_fault.isra.0+0xc0>)
    1f48:	f044 0101 	orr.w	r1, r4, #1
    1f4c:	f003 ffcf 	bl	5eee <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1f50:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1f52:	039a      	lsls	r2, r3, #14
    1f54:	d504      	bpl.n	1f60 <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    1f56:	4814      	ldr	r0, [pc, #80]	; (1fa8 <usage_fault.isra.0+0xc4>)
    1f58:	f044 0101 	orr.w	r1, r4, #1
    1f5c:	f003 ffc7 	bl	5eee <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1f60:	4d0a      	ldr	r5, [pc, #40]	; (1f8c <usage_fault.isra.0+0xa8>)
    1f62:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1f64:	03db      	lsls	r3, r3, #15
    1f66:	d504      	bpl.n	1f72 <usage_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    1f68:	4810      	ldr	r0, [pc, #64]	; (1fac <usage_fault.isra.0+0xc8>)
    1f6a:	f044 0101 	orr.w	r1, r4, #1
    1f6e:	f003 ffbe 	bl	5eee <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1f72:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    1f74:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1f76:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    1f7a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    1f7e:	62ab      	str	r3, [r5, #40]	; 0x28
}
    1f80:	bd70      	pop	{r4, r5, r6, pc}
    1f82:	bf00      	nop
    1f84:	00006d40 	.word	0x00006d40
    1f88:	00006d60 	.word	0x00006d60
    1f8c:	e000ed00 	.word	0xe000ed00
    1f90:	00007520 	.word	0x00007520
    1f94:	00007538 	.word	0x00007538
    1f98:	0000754b 	.word	0x0000754b
    1f9c:	00007565 	.word	0x00007565
    1fa0:	0000758f 	.word	0x0000758f
    1fa4:	000075ad 	.word	0x000075ad
    1fa8:	000075d2 	.word	0x000075d2
    1fac:	000075ec 	.word	0x000075ec

00001fb0 <mem_manage_fault.isra.0>:
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    1fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1fb4:	4b30      	ldr	r3, [pc, #192]	; (2078 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x78>)
    1fb6:	4c31      	ldr	r4, [pc, #196]	; (207c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x7c>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1fb8:	4d31      	ldr	r5, [pc, #196]	; (2080 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x80>)
    1fba:	1ae4      	subs	r4, r4, r3
    1fbc:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    1fbe:	01a4      	lsls	r4, r4, #6
    1fc0:	f044 0801 	orr.w	r8, r4, #1
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    1fc4:	4607      	mov	r7, r0
    1fc6:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    1fc8:	482e      	ldr	r0, [pc, #184]	; (2084 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x84>)
    1fca:	4641      	mov	r1, r8
    1fcc:	f003 ff8f 	bl	5eee <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1fd0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1fd2:	06d1      	lsls	r1, r2, #27
    1fd4:	d503      	bpl.n	1fde <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    1fd6:	4641      	mov	r1, r8
    1fd8:	482b      	ldr	r0, [pc, #172]	; (2088 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x88>)
    1fda:	f003 ff88 	bl	5eee <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1fde:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1fe0:	071a      	lsls	r2, r3, #28
    1fe2:	d504      	bpl.n	1fee <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    1fe4:	4829      	ldr	r0, [pc, #164]	; (208c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8c>)
    1fe6:	f044 0101 	orr.w	r1, r4, #1
    1fea:	f003 ff80 	bl	5eee <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1fee:	4d24      	ldr	r5, [pc, #144]	; (2080 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x80>)
    1ff0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1ff2:	079b      	lsls	r3, r3, #30
    1ff4:	d512      	bpl.n	201c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1c>
		PR_FAULT_INFO("  Data Access Violation");
    1ff6:	f044 0801 	orr.w	r8, r4, #1
    1ffa:	4641      	mov	r1, r8
    1ffc:	4824      	ldr	r0, [pc, #144]	; (2090 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x90>)
    1ffe:	f003 ff76 	bl	5eee <log_0>
		mmfar = SCB->MMFAR;
    2002:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2004:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2006:	0618      	lsls	r0, r3, #24
    2008:	d508      	bpl.n	201c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    200a:	4642      	mov	r2, r8
    200c:	4821      	ldr	r0, [pc, #132]	; (2094 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x94>)
    200e:	f003 ff7b 	bl	5f08 <log_1>
			if (from_hard_fault) {
    2012:	b11f      	cbz	r7, 201c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2014:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2016:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    201a:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    201c:	4d18      	ldr	r5, [pc, #96]	; (2080 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x80>)
    201e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2020:	07d1      	lsls	r1, r2, #31
    2022:	d504      	bpl.n	202e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2e>
		PR_FAULT_INFO("  Instruction Access Violation");
    2024:	481c      	ldr	r0, [pc, #112]	; (2098 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x98>)
    2026:	f044 0101 	orr.w	r1, r4, #1
    202a:	f003 ff60 	bl	5eee <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    202e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2030:	069a      	lsls	r2, r3, #26
    2032:	d504      	bpl.n	203e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3e>
		PR_FAULT_INFO(
    2034:	4819      	ldr	r0, [pc, #100]	; (209c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x9c>)
    2036:	f044 0101 	orr.w	r1, r4, #1
    203a:	f003 ff58 	bl	5eee <log_0>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    203e:	4b10      	ldr	r3, [pc, #64]	; (2080 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x80>)
    2040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2042:	06db      	lsls	r3, r3, #27
    2044:	d50e      	bpl.n	2064 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x64>
	__ASSERT(0,
    2046:	4916      	ldr	r1, [pc, #88]	; (20a0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xa0>)
    2048:	f44f 739b 	mov.w	r3, #310	; 0x136
    204c:	4a15      	ldr	r2, [pc, #84]	; (20a4 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xa4>)
    204e:	4816      	ldr	r0, [pc, #88]	; (20a8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xa8>)
    2050:	f003 fe4f 	bl	5cf2 <printk>
    2054:	4815      	ldr	r0, [pc, #84]	; (20ac <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xac>)
    2056:	f003 fe4c 	bl	5cf2 <printk>
    205a:	f44f 719b 	mov.w	r1, #310	; 0x136
    205e:	4811      	ldr	r0, [pc, #68]	; (20a4 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xa4>)
    2060:	f003 ff15 	bl	5e8e <assert_post_action>
	*recoverable = memory_fault_recoverable(esf);
    2064:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2066:	4a06      	ldr	r2, [pc, #24]	; (2080 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x80>)
    2068:	6a93      	ldr	r3, [r2, #40]	; 0x28
    206a:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    206e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    2070:	7030      	strb	r0, [r6, #0]
}
    2072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2076:	bf00      	nop
    2078:	00006d40 	.word	0x00006d40
    207c:	00006d60 	.word	0x00006d60
    2080:	e000ed00 	.word	0xe000ed00
    2084:	00007617 	.word	0x00007617
    2088:	0000762d 	.word	0x0000762d
    208c:	00007660 	.word	0x00007660
    2090:	00007673 	.word	0x00007673
    2094:	0000768b 	.word	0x0000768b
    2098:	000076a1 	.word	0x000076a1
    209c:	000076c0 	.word	0x000076c0
    20a0:	000084bc 	.word	0x000084bc
    20a4:	000076ef 	.word	0x000076ef
    20a8:	00006f74 	.word	0x00006f74
    20ac:	00007729 	.word	0x00007729

000020b0 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    20b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    20b4:	4b2a      	ldr	r3, [pc, #168]	; (2160 <bus_fault.isra.0+0xb0>)
    20b6:	4c2b      	ldr	r4, [pc, #172]	; (2164 <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    20b8:	4d2b      	ldr	r5, [pc, #172]	; (2168 <bus_fault.isra.0+0xb8>)
    20ba:	1ae4      	subs	r4, r4, r3
    20bc:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    20be:	01a4      	lsls	r4, r4, #6
    20c0:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    20c4:	4607      	mov	r7, r0
    20c6:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    20c8:	4828      	ldr	r0, [pc, #160]	; (216c <bus_fault.isra.0+0xbc>)
    20ca:	4641      	mov	r1, r8
    20cc:	f003 ff0f 	bl	5eee <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    20d0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    20d2:	04d1      	lsls	r1, r2, #19
    20d4:	d503      	bpl.n	20de <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    20d6:	4641      	mov	r1, r8
    20d8:	4825      	ldr	r0, [pc, #148]	; (2170 <bus_fault.isra.0+0xc0>)
    20da:	f003 ff08 	bl	5eee <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    20de:	6aab      	ldr	r3, [r5, #40]	; 0x28
    20e0:	051a      	lsls	r2, r3, #20
    20e2:	d504      	bpl.n	20ee <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    20e4:	4823      	ldr	r0, [pc, #140]	; (2174 <bus_fault.isra.0+0xc4>)
    20e6:	f044 0101 	orr.w	r1, r4, #1
    20ea:	f003 ff00 	bl	5eee <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    20ee:	4d1e      	ldr	r5, [pc, #120]	; (2168 <bus_fault.isra.0+0xb8>)
    20f0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    20f2:	059b      	lsls	r3, r3, #22
    20f4:	d512      	bpl.n	211c <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    20f6:	f044 0801 	orr.w	r8, r4, #1
    20fa:	4641      	mov	r1, r8
    20fc:	481e      	ldr	r0, [pc, #120]	; (2178 <bus_fault.isra.0+0xc8>)
    20fe:	f003 fef6 	bl	5eee <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    2102:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2104:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2106:	0418      	lsls	r0, r3, #16
    2108:	d508      	bpl.n	211c <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    210a:	4642      	mov	r2, r8
    210c:	481b      	ldr	r0, [pc, #108]	; (217c <bus_fault.isra.0+0xcc>)
    210e:	f003 fefb 	bl	5f08 <log_1>
			if (from_hard_fault) {
    2112:	b11f      	cbz	r7, 211c <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2114:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2116:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    211a:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    211c:	4d12      	ldr	r5, [pc, #72]	; (2168 <bus_fault.isra.0+0xb8>)
    211e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2120:	0559      	lsls	r1, r3, #21
    2122:	d504      	bpl.n	212e <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    2124:	4816      	ldr	r0, [pc, #88]	; (2180 <bus_fault.isra.0+0xd0>)
    2126:	f044 0101 	orr.w	r1, r4, #1
    212a:	f003 fee0 	bl	5eee <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    212e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2130:	05da      	lsls	r2, r3, #23
    2132:	d50d      	bpl.n	2150 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
    2134:	4813      	ldr	r0, [pc, #76]	; (2184 <bus_fault.isra.0+0xd4>)
    2136:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    213a:	f003 fed8 	bl	5eee <log_0>
	*recoverable = memory_fault_recoverable(esf);
    213e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2140:	4a09      	ldr	r2, [pc, #36]	; (2168 <bus_fault.isra.0+0xb8>)
    2142:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2144:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    2148:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    214a:	7030      	strb	r0, [r6, #0]
}
    214c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    2150:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2152:	049b      	lsls	r3, r3, #18
    2154:	d5f3      	bpl.n	213e <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2156:	480c      	ldr	r0, [pc, #48]	; (2188 <bus_fault.isra.0+0xd8>)
    2158:	f044 0101 	orr.w	r1, r4, #1
    215c:	e7ed      	b.n	213a <bus_fault.isra.0+0x8a>
    215e:	bf00      	nop
    2160:	00006d40 	.word	0x00006d40
    2164:	00006d60 	.word	0x00006d60
    2168:	e000ed00 	.word	0xe000ed00
    216c:	00007763 	.word	0x00007763
    2170:	00007779 	.word	0x00007779
    2174:	00007660 	.word	0x00007660
    2178:	0000778a 	.word	0x0000778a
    217c:	000077a3 	.word	0x000077a3
    2180:	000077b8 	.word	0x000077b8
    2184:	000077d3 	.word	0x000077d3
    2188:	000076c0 	.word	0x000076c0

0000218c <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
    218c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2190:	4b5f      	ldr	r3, [pc, #380]	; (2310 <z_arm_fault+0x184>)
{
    2192:	460f      	mov	r7, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2194:	685d      	ldr	r5, [r3, #4]
    2196:	2600      	movs	r6, #0
{
    2198:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    219a:	f3c5 0408 	ubfx	r4, r5, #0, #9
    219e:	f386 8811 	msr	BASEPRI, r6
    21a2:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    21a6:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    21aa:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    21ae:	d10d      	bne.n	21cc <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    21b0:	f002 030c 	and.w	r3, r2, #12
    21b4:	2b08      	cmp	r3, #8
    21b6:	d11a      	bne.n	21ee <z_arm_fault+0x62>
    21b8:	4956      	ldr	r1, [pc, #344]	; (2314 <z_arm_fault+0x188>)
    21ba:	4b57      	ldr	r3, [pc, #348]	; (2318 <z_arm_fault+0x18c>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    21bc:	4857      	ldr	r0, [pc, #348]	; (231c <z_arm_fault+0x190>)
    21be:	1ac9      	subs	r1, r1, r3
    21c0:	08c9      	lsrs	r1, r1, #3
    21c2:	0189      	lsls	r1, r1, #6
    21c4:	f041 0101 	orr.w	r1, r1, #1
    21c8:	f003 fe91 	bl	5eee <log_0>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    21cc:	f240 33b1 	movw	r3, #945	; 0x3b1
    21d0:	4a53      	ldr	r2, [pc, #332]	; (2320 <z_arm_fault+0x194>)
    21d2:	4954      	ldr	r1, [pc, #336]	; (2324 <z_arm_fault+0x198>)
    21d4:	4854      	ldr	r0, [pc, #336]	; (2328 <z_arm_fault+0x19c>)
    21d6:	f003 fd8c 	bl	5cf2 <printk>
    21da:	4854      	ldr	r0, [pc, #336]	; (232c <z_arm_fault+0x1a0>)
    21dc:	f003 fd89 	bl	5cf2 <printk>
    21e0:	f240 31b1 	movw	r1, #945	; 0x3b1
    21e4:	484e      	ldr	r0, [pc, #312]	; (2320 <z_arm_fault+0x194>)
    21e6:	f003 fe52 	bl	5e8e <assert_post_action>
    21ea:	2700      	movs	r7, #0
    21ec:	e005      	b.n	21fa <z_arm_fault+0x6e>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    21ee:	0712      	lsls	r2, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
    21f0:	bf5c      	itt	pl
    21f2:	4607      	movpl	r7, r0
			*nested_exc = true;
    21f4:	2601      	movpl	r6, #1
	__ASSERT(esf != NULL,
    21f6:	2f00      	cmp	r7, #0
    21f8:	d0e8      	beq.n	21cc <z_arm_fault+0x40>
	*recoverable = false;
    21fa:	2300      	movs	r3, #0
    21fc:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    2200:	1ee3      	subs	r3, r4, #3
    2202:	2b09      	cmp	r3, #9
    2204:	d86a      	bhi.n	22dc <z_arm_fault+0x150>
    2206:	e8df f003 	tbb	[pc, r3]
    220a:	5805      	.short	0x5805
    220c:	69693c5c 	.word	0x69693c5c
    2210:	60696969 	.word	0x60696969
	*recoverable = false;
    2214:	f04f 0800 	mov.w	r8, #0
    2218:	4b3f      	ldr	r3, [pc, #252]	; (2318 <z_arm_fault+0x18c>)
    221a:	4d3e      	ldr	r5, [pc, #248]	; (2314 <z_arm_fault+0x188>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    221c:	4844      	ldr	r0, [pc, #272]	; (2330 <z_arm_fault+0x1a4>)
    221e:	1aed      	subs	r5, r5, r3
    2220:	08ed      	lsrs	r5, r5, #3
    2222:	01ad      	lsls	r5, r5, #6
    2224:	f045 0501 	orr.w	r5, r5, #1
    2228:	4629      	mov	r1, r5
    222a:	f003 fe60 	bl	5eee <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    222e:	4b38      	ldr	r3, [pc, #224]	; (2310 <z_arm_fault+0x184>)
	*recoverable = false;
    2230:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2234:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    2236:	f014 0402 	ands.w	r4, r4, #2
    223a:	d005      	beq.n	2248 <z_arm_fault+0xbc>
		PR_EXC("  Bus fault on vector table read");
    223c:	4629      	mov	r1, r5
    223e:	483d      	ldr	r0, [pc, #244]	; (2334 <z_arm_fault+0x1a8>)
	PR_FAULT_INFO(
    2240:	f003 fe55 	bl	5eee <log_0>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    2244:	2400      	movs	r4, #0
}
    2246:	e01f      	b.n	2288 <z_arm_fault+0xfc>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    2248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    224a:	005b      	lsls	r3, r3, #1
    224c:	d51c      	bpl.n	2288 <z_arm_fault+0xfc>
		PR_EXC("  Fault escalation (see below)");
    224e:	4629      	mov	r1, r5
    2250:	4839      	ldr	r0, [pc, #228]	; (2338 <z_arm_fault+0x1ac>)
    2252:	f003 fe4c 	bl	5eee <log_0>
		if (SCB_MMFSR != 0) {
    2256:	4b39      	ldr	r3, [pc, #228]	; (233c <z_arm_fault+0x1b0>)
    2258:	781b      	ldrb	r3, [r3, #0]
    225a:	b12b      	cbz	r3, 2268 <z_arm_fault+0xdc>
			reason = mem_manage_fault(esf, 1, recoverable);
    225c:	2001      	movs	r0, #1
    225e:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    2262:	f7ff fea5 	bl	1fb0 <mem_manage_fault.isra.0>
    2266:	e00e      	b.n	2286 <z_arm_fault+0xfa>
		} else if (SCB_BFSR != 0) {
    2268:	4b35      	ldr	r3, [pc, #212]	; (2340 <z_arm_fault+0x1b4>)
    226a:	781b      	ldrb	r3, [r3, #0]
    226c:	b12b      	cbz	r3, 227a <z_arm_fault+0xee>
			reason = bus_fault(esf, 1, recoverable);
    226e:	2001      	movs	r0, #1
    2270:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    2274:	f7ff ff1c 	bl	20b0 <bus_fault.isra.0>
    2278:	e005      	b.n	2286 <z_arm_fault+0xfa>
		} else if (SCB_UFSR != 0) {
    227a:	4b32      	ldr	r3, [pc, #200]	; (2344 <z_arm_fault+0x1b8>)
    227c:	881b      	ldrh	r3, [r3, #0]
    227e:	b29b      	uxth	r3, r3
    2280:	b113      	cbz	r3, 2288 <z_arm_fault+0xfc>
			reason = usage_fault(esf);
    2282:	f7ff fe2f 	bl	1ee4 <usage_fault.isra.0>
    2286:	4604      	mov	r4, r0
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    2288:	f89d 3007 	ldrb.w	r3, [sp, #7]
    228c:	b993      	cbnz	r3, 22b4 <z_arm_fault+0x128>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    228e:	2220      	movs	r2, #32
    2290:	4639      	mov	r1, r7
    2292:	a802      	add	r0, sp, #8
    2294:	f004 f91f 	bl	64d6 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    2298:	9b09      	ldr	r3, [sp, #36]	; 0x24
    229a:	b39e      	cbz	r6, 2304 <z_arm_fault+0x178>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    229c:	f3c3 0208 	ubfx	r2, r3, #0, #9
    22a0:	b922      	cbnz	r2, 22ac <z_arm_fault+0x120>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    22a2:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    22a6:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    22aa:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    22ac:	4620      	mov	r0, r4
    22ae:	a902      	add	r1, sp, #8
    22b0:	f7ff fd22 	bl	1cf8 <z_arm_fatal_error>
}
    22b4:	b00a      	add	sp, #40	; 0x28
    22b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    22ba:	2000      	movs	r0, #0
    22bc:	f10d 0107 	add.w	r1, sp, #7
    22c0:	e7cf      	b.n	2262 <z_arm_fault+0xd6>
		reason = bus_fault(esf, 0, recoverable);
    22c2:	2000      	movs	r0, #0
    22c4:	f10d 0107 	add.w	r1, sp, #7
    22c8:	e7d4      	b.n	2274 <z_arm_fault+0xe8>
    22ca:	4912      	ldr	r1, [pc, #72]	; (2314 <z_arm_fault+0x188>)
    22cc:	4b12      	ldr	r3, [pc, #72]	; (2318 <z_arm_fault+0x18c>)
	PR_FAULT_INFO(
    22ce:	481e      	ldr	r0, [pc, #120]	; (2348 <z_arm_fault+0x1bc>)
    22d0:	1ac9      	subs	r1, r1, r3
    22d2:	08c9      	lsrs	r1, r1, #3
    22d4:	0189      	lsls	r1, r1, #6
    22d6:	f041 0101 	orr.w	r1, r1, #1
    22da:	e7b1      	b.n	2240 <z_arm_fault+0xb4>
    22dc:	4a0e      	ldr	r2, [pc, #56]	; (2318 <z_arm_fault+0x18c>)
    22de:	4b0d      	ldr	r3, [pc, #52]	; (2314 <z_arm_fault+0x188>)
	PR_FAULT_INFO("***** %s %d) *****",
    22e0:	481a      	ldr	r0, [pc, #104]	; (234c <z_arm_fault+0x1c0>)
    22e2:	1a9b      	subs	r3, r3, r2
    22e4:	08db      	lsrs	r3, r3, #3
    22e6:	f415 7ff8 	tst.w	r5, #496	; 0x1f0
    22ea:	ea4f 1383 	mov.w	r3, r3, lsl #6
    22ee:	4918      	ldr	r1, [pc, #96]	; (2350 <z_arm_fault+0x1c4>)
    22f0:	f043 0301 	orr.w	r3, r3, #1
    22f4:	bf18      	it	ne
    22f6:	4601      	movne	r1, r0
    22f8:	f1a4 0210 	sub.w	r2, r4, #16
    22fc:	4815      	ldr	r0, [pc, #84]	; (2354 <z_arm_fault+0x1c8>)
    22fe:	f003 fe17 	bl	5f30 <log_2>
    2302:	e79f      	b.n	2244 <z_arm_fault+0xb8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2304:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    2308:	f023 0301 	bic.w	r3, r3, #1
    230c:	e7cd      	b.n	22aa <z_arm_fault+0x11e>
    230e:	bf00      	nop
    2310:	e000ed00 	.word	0xe000ed00
    2314:	00006d60 	.word	0x00006d60
    2318:	00006d40 	.word	0x00006d40
    231c:	000077eb 	.word	0x000077eb
    2320:	000076ef 	.word	0x000076ef
    2324:	00007816 	.word	0x00007816
    2328:	00006f74 	.word	0x00006f74
    232c:	00007829 	.word	0x00007829
    2330:	00007867 	.word	0x00007867
    2334:	0000787e 	.word	0x0000787e
    2338:	0000789f 	.word	0x0000789f
    233c:	e000ed28 	.word	0xe000ed28
    2340:	e000ed29 	.word	0xe000ed29
    2344:	e000ed2a 	.word	0xe000ed2a
    2348:	000078be 	.word	0x000078be
    234c:	00007909 	.word	0x00007909
    2350:	000078f4 	.word	0x000078f4
    2354:	00007922 	.word	0x00007922

00002358 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2358:	4a02      	ldr	r2, [pc, #8]	; (2364 <z_arm_fault_init+0xc>)
    235a:	6953      	ldr	r3, [r2, #20]
    235c:	f043 0310 	orr.w	r3, r3, #16
    2360:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    2362:	4770      	bx	lr
    2364:	e000ed00 	.word	0xe000ed00

00002368 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    2368:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    236c:	4905      	ldr	r1, [pc, #20]	; (2384 <sys_arch_reboot+0x1c>)
    236e:	4b06      	ldr	r3, [pc, #24]	; (2388 <sys_arch_reboot+0x20>)
    2370:	68ca      	ldr	r2, [r1, #12]
    2372:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2376:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2378:	60cb      	str	r3, [r1, #12]
    237a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    237e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2380:	e7fd      	b.n	237e <sys_arch_reboot+0x16>
    2382:	bf00      	nop
    2384:	e000ed00 	.word	0xe000ed00
    2388:	05fa0004 	.word	0x05fa0004

0000238c <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    238c:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    238e:	2120      	movs	r1, #32
    2390:	4803      	ldr	r0, [pc, #12]	; (23a0 <z_arm_interrupt_init+0x14>)
    2392:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2394:	3301      	adds	r3, #1
    2396:	2b45      	cmp	r3, #69	; 0x45
    2398:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    239c:	d1f9      	bne.n	2392 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    239e:	4770      	bx	lr
    23a0:	e000e100 	.word	0xe000e100

000023a4 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    23a4:	b538      	push	{r3, r4, r5, lr}
    23a6:	4604      	mov	r4, r0
	__asm__ volatile(
    23a8:	f04f 0320 	mov.w	r3, #32
    23ac:	f3ef 8511 	mrs	r5, BASEPRI
    23b0:	f383 8811 	msr	BASEPRI, r3
    23b4:	f3bf 8f6f 	isb	sy
	unsigned int key;

	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
    23b8:	7b03      	ldrb	r3, [r0, #12]
    23ba:	07db      	lsls	r3, r3, #31
    23bc:	d50c      	bpl.n	23d8 <z_impl_k_thread_abort+0x34>
    23be:	4912      	ldr	r1, [pc, #72]	; (2408 <z_impl_k_thread_abort+0x64>)
    23c0:	2323      	movs	r3, #35	; 0x23
    23c2:	4a12      	ldr	r2, [pc, #72]	; (240c <z_impl_k_thread_abort+0x68>)
    23c4:	4812      	ldr	r0, [pc, #72]	; (2410 <z_impl_k_thread_abort+0x6c>)
    23c6:	f003 fc94 	bl	5cf2 <printk>
    23ca:	4812      	ldr	r0, [pc, #72]	; (2414 <z_impl_k_thread_abort+0x70>)
    23cc:	f003 fc91 	bl	5cf2 <printk>
    23d0:	2123      	movs	r1, #35	; 0x23
    23d2:	480e      	ldr	r0, [pc, #56]	; (240c <z_impl_k_thread_abort+0x68>)
    23d4:	f003 fd5b 	bl	5e8e <assert_post_action>
		 "essential thread aborted");

	z_thread_single_abort(thread);
    23d8:	4620      	mov	r0, r4
    23da:	f002 fabd 	bl	4958 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    23de:	4b0e      	ldr	r3, [pc, #56]	; (2418 <z_impl_k_thread_abort+0x74>)
    23e0:	689b      	ldr	r3, [r3, #8]
    23e2:	42a3      	cmp	r3, r4
    23e4:	d10b      	bne.n	23fe <z_impl_k_thread_abort+0x5a>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    23e6:	4b0d      	ldr	r3, [pc, #52]	; (241c <z_impl_k_thread_abort+0x78>)
    23e8:	685a      	ldr	r2, [r3, #4]
    23ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
    23ee:	b912      	cbnz	r2, 23f6 <z_impl_k_thread_abort+0x52>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
    23f0:	4628      	mov	r0, r5
    23f2:	f7ff fbef 	bl	1bd4 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    23f6:	685a      	ldr	r2, [r3, #4]
    23f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    23fc:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    23fe:	4628      	mov	r0, r5
}
    2400:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    2404:	f004 baeb 	b.w	69de <z_reschedule_irqlock>
    2408:	00007976 	.word	0x00007976
    240c:	00007935 	.word	0x00007935
    2410:	00006f74 	.word	0x00006f74
    2414:	000079a4 	.word	0x000079a4
    2418:	200003c4 	.word	0x200003c4
    241c:	e000ed00 	.word	0xe000ed00

00002420 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    2420:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    2422:	4b0e      	ldr	r3, [pc, #56]	; (245c <z_arm_configure_static_mpu_regions+0x3c>)
{
    2424:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
    2426:	9302      	str	r3, [sp, #8]
    2428:	4b0d      	ldr	r3, [pc, #52]	; (2460 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    242a:	4c0e      	ldr	r4, [pc, #56]	; (2464 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
    242c:	9303      	str	r3, [sp, #12]
    242e:	4b0e      	ldr	r3, [pc, #56]	; (2468 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2430:	4a0e      	ldr	r2, [pc, #56]	; (246c <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
    2432:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
    2434:	ab02      	add	r3, sp, #8
    2436:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2438:	a801      	add	r0, sp, #4
    243a:	4623      	mov	r3, r4
    243c:	2101      	movs	r1, #1
    243e:	f000 f96d 	bl	271c <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
    2442:	2300      	movs	r3, #0
    2444:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    2446:	4b0a      	ldr	r3, [pc, #40]	; (2470 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    2448:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    244a:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    244c:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
    244e:	9305      	str	r3, [sp, #20]
    2450:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    2452:	f000 f989 	bl	2768 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    2456:	b008      	add	sp, #32
    2458:	bd10      	pop	{r4, pc}
    245a:	bf00      	nop
    245c:	20000000 	.word	0x20000000
    2460:	00000000 	.word	0x00000000
    2464:	20070000 	.word	0x20070000
    2468:	00010006 	.word	0x00010006
    246c:	20000000 	.word	0x20000000
    2470:	20000100 	.word	0x20000100

00002474 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
    2474:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    2476:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    2478:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    247a:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    247e:	f004 031f 	and.w	r3, r4, #31
    2482:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    2484:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    2486:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    2488:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    248c:	4904      	ldr	r1, [pc, #16]	; (24a0 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    248e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    2492:	f043 0301 	orr.w	r3, r3, #1
    2496:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    2498:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    249a:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    249c:	bd10      	pop	{r4, pc}
    249e:	bf00      	nop
    24a0:	e000ed90 	.word	0xe000ed90

000024a4 <region_allocate_and_init.part.0>:
#include <arm_mpu_v8_internal.h>
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const u8_t index,
    24a4:	b508      	push	{r3, lr}
    24a6:	4a07      	ldr	r2, [pc, #28]	; (24c4 <region_allocate_and_init.part.0+0x20>)
    24a8:	4b07      	ldr	r3, [pc, #28]	; (24c8 <region_allocate_and_init.part.0+0x24>)
    24aa:	4601      	mov	r1, r0
    24ac:	1ad2      	subs	r2, r2, r3
    24ae:	08d2      	lsrs	r2, r2, #3
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    24b0:	0192      	lsls	r2, r2, #6
    24b2:	4806      	ldr	r0, [pc, #24]	; (24cc <region_allocate_and_init.part.0+0x28>)
    24b4:	f042 0201 	orr.w	r2, r2, #1
    24b8:	f003 fd26 	bl	5f08 <log_1>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
    24bc:	f06f 0015 	mvn.w	r0, #21
    24c0:	bd08      	pop	{r3, pc}
    24c2:	bf00      	nop
    24c4:	00006d58 	.word	0x00006d58
    24c8:	00006d40 	.word	0x00006d40
    24cc:	000079c3 	.word	0x000079c3

000024d0 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    24d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    24d4:	4607      	mov	r7, r0
    24d6:	4688      	mov	r8, r1
    24d8:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    24da:	2600      	movs	r6, #0
	MPU->RNR = index;
    24dc:	4d56      	ldr	r5, [pc, #344]	; (2638 <mpu_configure_regions_and_partition.constprop.0+0x168>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    24de:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    24e0:	4546      	cmp	r6, r8
    24e2:	da35      	bge.n	2550 <mpu_configure_regions_and_partition.constprop.0+0x80>
		if (regions[i]->size == 0U) {
    24e4:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
    24e8:	f8d3 9004 	ldr.w	r9, [r3, #4]
    24ec:	f1b9 0f00 	cmp.w	r9, #0
    24f0:	d051      	beq.n	2596 <mpu_configure_regions_and_partition.constprop.0+0xc6>
		&&
    24f2:	f1b9 0f1f 	cmp.w	r9, #31
    24f6:	d91e      	bls.n	2536 <mpu_configure_regions_and_partition.constprop.0+0x66>
		&&
    24f8:	f019 0f1f 	tst.w	r9, #31
    24fc:	d11b      	bne.n	2536 <mpu_configure_regions_and_partition.constprop.0+0x66>
		((part->start &
    24fe:	f8d3 a000 	ldr.w	sl, [r3]
		&&
    2502:	f01a 0f1f 	tst.w	sl, #31
    2506:	d116      	bne.n	2536 <mpu_configure_regions_and_partition.constprop.0+0x66>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    2508:	4650      	mov	r0, sl
    250a:	f003 ffbc 	bl	6486 <arm_cmse_mpu_region_get>
    250e:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    2510:	eb09 000a 	add.w	r0, r9, sl
    2514:	3801      	subs	r0, #1
    2516:	f003 ffb6 	bl	6486 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    251a:	4583      	cmp	fp, r0
    251c:	d01c      	beq.n	2558 <mpu_configure_regions_and_partition.constprop.0+0x88>
	return -EINVAL;
    251e:	f06f 0b15 	mvn.w	fp, #21
    2522:	4a46      	ldr	r2, [pc, #280]	; (263c <mpu_configure_regions_and_partition.constprop.0+0x16c>)
    2524:	4b46      	ldr	r3, [pc, #280]	; (2640 <mpu_configure_regions_and_partition.constprop.0+0x170>)
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    2526:	4659      	mov	r1, fp
    2528:	1ad2      	subs	r2, r2, r3
    252a:	08d2      	lsrs	r2, r2, #3
    252c:	0192      	lsls	r2, r2, #6
    252e:	4845      	ldr	r0, [pc, #276]	; (2644 <mpu_configure_regions_and_partition.constprop.0+0x174>)
    2530:	f042 0201 	orr.w	r2, r2, #1
    2534:	e008      	b.n	2548 <mpu_configure_regions_and_partition.constprop.0+0x78>
			LOG_ERR("Partition %u: sanity check failed.", i);
    2536:	4631      	mov	r1, r6
    2538:	4a40      	ldr	r2, [pc, #256]	; (263c <mpu_configure_regions_and_partition.constprop.0+0x16c>)
    253a:	4b41      	ldr	r3, [pc, #260]	; (2640 <mpu_configure_regions_and_partition.constprop.0+0x170>)
    253c:	4842      	ldr	r0, [pc, #264]	; (2648 <mpu_configure_regions_and_partition.constprop.0+0x178>)
    253e:	1ad2      	subs	r2, r2, r3
    2540:	08d2      	lsrs	r2, r2, #3
    2542:	0192      	lsls	r2, r2, #6
    2544:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Invalid underlying region index %u",
    2548:	f003 fcde 	bl	5f08 <log_1>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    254c:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    2550:	4620      	mov	r0, r4
    2552:	b005      	add	sp, #20
    2554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    2558:	f11b 0f16 	cmn.w	fp, #22
    255c:	d0e1      	beq.n	2522 <mpu_configure_regions_and_partition.constprop.0+0x52>
			(u_reg_index > (reg_index - 1))) {
    255e:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    2560:	455b      	cmp	r3, fp
    2562:	dbde      	blt.n	2522 <mpu_configure_regions_and_partition.constprop.0+0x52>
	MPU->RNR = index;
    2564:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    2568:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
    256a:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    256e:	692b      	ldr	r3, [r5, #16]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    2570:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    2574:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    2578:	f043 0a1f 	orr.w	sl, r3, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    257c:	e9d1 3200 	ldrd	r3, r2, [r1]
    2580:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
    2582:	4298      	cmp	r0, r3
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    2584:	f102 39ff 	add.w	r9, r2, #4294967295
		if ((regions[i]->start == u_reg_base) &&
    2588:	d118      	bne.n	25bc <mpu_configure_regions_and_partition.constprop.0+0xec>
    258a:	45ca      	cmp	sl, r9
    258c:	d105      	bne.n	259a <mpu_configure_regions_and_partition.constprop.0+0xca>
			mpu_configure_region(u_reg_index, regions[i]);
    258e:	fa5f f08b 	uxtb.w	r0, fp
    2592:	f003 ff57 	bl	6444 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    2596:	3601      	adds	r6, #1
    2598:	e7a2      	b.n	24e0 <mpu_configure_regions_and_partition.constprop.0+0x10>
	MPU->RNR = index;
    259a:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    259e:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    25a0:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    25a4:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    25a8:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    25aa:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
    25ac:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
    25ae:	f003 ff49 	bl	6444 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    25b2:	f110 0f16 	cmn.w	r0, #22
    25b6:	d0c9      	beq.n	254c <mpu_configure_regions_and_partition.constprop.0+0x7c>
			reg_index++;
    25b8:	1c44      	adds	r4, r0, #1
    25ba:	e7ec      	b.n	2596 <mpu_configure_regions_and_partition.constprop.0+0xc6>
	MPU->RNR = index;
    25bc:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    25c0:	692a      	ldr	r2, [r5, #16]
    25c2:	3b01      	subs	r3, #1
    25c4:	f023 031f 	bic.w	r3, r3, #31
    25c8:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    25cc:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    25ce:	45ca      	cmp	sl, r9
    25d0:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    25d2:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
    25d4:	d0eb      	beq.n	25ae <mpu_configure_regions_and_partition.constprop.0+0xde>
				mpu_configure_region(reg_index, regions[i]);
    25d6:	f003 ff35 	bl	6444 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    25da:	f110 0f16 	cmn.w	r0, #22
    25de:	d0b5      	beq.n	254c <mpu_configure_regions_and_partition.constprop.0+0x7c>
	MPU->RNR = index;
    25e0:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    25e4:	68ea      	ldr	r2, [r5, #12]
    25e6:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
    25ea:	f10a 3aff 	add.w	sl, sl, #4294967295
	attr->rbar = MPU->RBAR &
    25ee:	f362 0304 	bfi	r3, r2, #0, #5
    25f2:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    25f6:	692b      	ldr	r3, [r5, #16]
    25f8:	f89d 2008 	ldrb.w	r2, [sp, #8]
    25fc:	085b      	lsrs	r3, r3, #1
    25fe:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
    2602:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    2606:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
    260a:	e9d3 1300 	ldrd	r1, r3, [r3]
    260e:	440b      	add	r3, r1
    2610:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
    2612:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    2616:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
    2618:	4453      	add	r3, sl
    261a:	eba3 0309 	sub.w	r3, r3, r9
				region_allocate_and_init(reg_index,
    261e:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i]->start +
    2620:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
    2624:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
    2626:	9303      	str	r3, [sp, #12]
    2628:	d902      	bls.n	2630 <mpu_configure_regions_and_partition.constprop.0+0x160>
    262a:	f7ff ff3b 	bl	24a4 <region_allocate_and_init.part.0>
    262e:	e7c0      	b.n	25b2 <mpu_configure_regions_and_partition.constprop.0+0xe2>
	region_init(index, region_conf);
    2630:	4669      	mov	r1, sp
    2632:	f7ff ff1f 	bl	2474 <region_init>
			if (reg_index == -EINVAL) {
    2636:	e7bf      	b.n	25b8 <mpu_configure_regions_and_partition.constprop.0+0xe8>
    2638:	e000ed90 	.word	0xe000ed90
    263c:	00006d58 	.word	0x00006d58
    2640:	00006d40 	.word	0x00006d40
    2644:	00007a0c 	.word	0x00007a0c
    2648:	000079e9 	.word	0x000079e9

0000264c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    264c:	2205      	movs	r2, #5
    264e:	4b03      	ldr	r3, [pc, #12]	; (265c <arm_core_mpu_enable+0x10>)
    2650:	605a      	str	r2, [r3, #4]
    2652:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2656:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    265a:	4770      	bx	lr
    265c:	e000ed90 	.word	0xe000ed90

00002660 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    2660:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2664:	2200      	movs	r2, #0
    2666:	4b01      	ldr	r3, [pc, #4]	; (266c <arm_core_mpu_disable+0xc>)
    2668:	605a      	str	r2, [r3, #4]
}
    266a:	4770      	bx	lr
    266c:	e000ed90 	.word	0xe000ed90

00002670 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
    2670:	b570      	push	{r4, r5, r6, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    2672:	4e20      	ldr	r6, [pc, #128]	; (26f4 <arm_mpu_init+0x84>)
    2674:	6835      	ldr	r5, [r6, #0]
    2676:	2d10      	cmp	r5, #16
    2678:	d913      	bls.n	26a2 <arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    267a:	f240 1339 	movw	r3, #313	; 0x139
    267e:	4a1e      	ldr	r2, [pc, #120]	; (26f8 <arm_mpu_init+0x88>)
    2680:	491e      	ldr	r1, [pc, #120]	; (26fc <arm_mpu_init+0x8c>)
    2682:	481f      	ldr	r0, [pc, #124]	; (2700 <arm_mpu_init+0x90>)
    2684:	f003 fb35 	bl	5cf2 <printk>
    2688:	2210      	movs	r2, #16
    268a:	4629      	mov	r1, r5
    268c:	481d      	ldr	r0, [pc, #116]	; (2704 <arm_mpu_init+0x94>)
    268e:	f003 fb30 	bl	5cf2 <printk>
    2692:	4819      	ldr	r0, [pc, #100]	; (26f8 <arm_mpu_init+0x88>)
    2694:	f240 1139 	movw	r1, #313	; 0x139
    2698:	f003 fbf9 	bl	5e8e <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    269c:	f04f 30ff 	mov.w	r0, #4294967295
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
    26a0:	bd70      	pop	{r4, r5, r6, pc}
	arm_core_mpu_disable();
    26a2:	f7ff ffdd 	bl	2660 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    26a6:	2000      	movs	r0, #0
	MPU->MAIR0 =
    26a8:	4c17      	ldr	r4, [pc, #92]	; (2708 <arm_mpu_init+0x98>)
    26aa:	4a18      	ldr	r2, [pc, #96]	; (270c <arm_mpu_init+0x9c>)
    26ac:	6322      	str	r2, [r4, #48]	; 0x30
    26ae:	4285      	cmp	r5, r0
    26b0:	d119      	bne.n	26e6 <arm_mpu_init+0x76>
	static_regions_num = mpu_config.num_regions;
    26b2:	4b17      	ldr	r3, [pc, #92]	; (2710 <arm_mpu_init+0xa0>)
    26b4:	701d      	strb	r5, [r3, #0]
	arm_core_mpu_enable();
    26b6:	f7ff ffc9 	bl	264c <arm_core_mpu_enable>
	__ASSERT(
    26ba:	6823      	ldr	r3, [r4, #0]
    26bc:	f3c3 2307 	ubfx	r3, r3, #8, #8
    26c0:	2b10      	cmp	r3, #16
    26c2:	d00e      	beq.n	26e2 <arm_mpu_init+0x72>
    26c4:	4913      	ldr	r1, [pc, #76]	; (2714 <arm_mpu_init+0xa4>)
    26c6:	f240 135b 	movw	r3, #347	; 0x15b
    26ca:	4a0b      	ldr	r2, [pc, #44]	; (26f8 <arm_mpu_init+0x88>)
    26cc:	480c      	ldr	r0, [pc, #48]	; (2700 <arm_mpu_init+0x90>)
    26ce:	f003 fb10 	bl	5cf2 <printk>
    26d2:	4811      	ldr	r0, [pc, #68]	; (2718 <arm_mpu_init+0xa8>)
    26d4:	f003 fb0d 	bl	5cf2 <printk>
    26d8:	f240 115b 	movw	r1, #347	; 0x15b
    26dc:	4806      	ldr	r0, [pc, #24]	; (26f8 <arm_mpu_init+0x88>)
    26de:	f003 fbd6 	bl	5e8e <assert_post_action>
	return 0;
    26e2:	2000      	movs	r0, #0
    26e4:	e7dc      	b.n	26a0 <arm_mpu_init+0x30>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    26e6:	6871      	ldr	r1, [r6, #4]
    26e8:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    26ec:	f7ff fec2 	bl	2474 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    26f0:	3001      	adds	r0, #1
    26f2:	e7dc      	b.n	26ae <arm_mpu_init+0x3e>
    26f4:	00006e44 	.word	0x00006e44
    26f8:	00007a2f 	.word	0x00007a2f
    26fc:	000084bc 	.word	0x000084bc
    2700:	00006f74 	.word	0x00006f74
    2704:	00007a6f 	.word	0x00007a6f
    2708:	e000ed90 	.word	0xe000ed90
    270c:	0044ffaa 	.word	0x0044ffaa
    2710:	20000415 	.word	0x20000415
    2714:	00007aa3 	.word	0x00007aa3
    2718:	00007af4 	.word	0x00007af4

0000271c <arm_core_mpu_configure_static_mpu_regions>:
{
    271c:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    271e:	4d0d      	ldr	r5, [pc, #52]	; (2754 <arm_core_mpu_configure_static_mpu_regions+0x38>)
    2720:	460c      	mov	r4, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    2722:	782a      	ldrb	r2, [r5, #0]
    2724:	f7ff fed4 	bl	24d0 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2728:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    272a:	3016      	adds	r0, #22
    272c:	d111      	bne.n	2752 <arm_core_mpu_configure_static_mpu_regions+0x36>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    272e:	f44f 7381 	mov.w	r3, #258	; 0x102
    2732:	4a09      	ldr	r2, [pc, #36]	; (2758 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    2734:	4909      	ldr	r1, [pc, #36]	; (275c <arm_core_mpu_configure_static_mpu_regions+0x40>)
    2736:	480a      	ldr	r0, [pc, #40]	; (2760 <arm_core_mpu_configure_static_mpu_regions+0x44>)
    2738:	f003 fadb 	bl	5cf2 <printk>
    273c:	4621      	mov	r1, r4
    273e:	4809      	ldr	r0, [pc, #36]	; (2764 <arm_core_mpu_configure_static_mpu_regions+0x48>)
    2740:	f003 fad7 	bl	5cf2 <printk>
}
    2744:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    2748:	f44f 7181 	mov.w	r1, #258	; 0x102
    274c:	4802      	ldr	r0, [pc, #8]	; (2758 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    274e:	f003 bb9e 	b.w	5e8e <assert_post_action>
}
    2752:	bd38      	pop	{r3, r4, r5, pc}
    2754:	20000415 	.word	0x20000415
    2758:	00007a2f 	.word	0x00007a2f
    275c:	000084bc 	.word	0x000084bc
    2760:	00006f74 	.word	0x00006f74
    2764:	00007b15 	.word	0x00007b15

00002768 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    2768:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    276c:	4e2f      	ldr	r6, [pc, #188]	; (282c <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
    276e:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    2770:	4605      	mov	r5, r0
    2772:	f04f 0800 	mov.w	r8, #0
    2776:	46b3      	mov	fp, r6
	MPU->RNR = index;
    2778:	4f2d      	ldr	r7, [pc, #180]	; (2830 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    277a:	45c8      	cmp	r8, r9
    277c:	db02      	blt.n	2784 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
}
    277e:	b003      	add	sp, #12
    2780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
    2784:	f8d5 a004 	ldr.w	sl, [r5, #4]
    2788:	f1ba 0f00 	cmp.w	sl, #0
    278c:	d049      	beq.n	2822 <arm_core_mpu_mark_areas_for_dynamic_regions+0xba>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    278e:	6829      	ldr	r1, [r5, #0]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    2790:	4608      	mov	r0, r1
    2792:	9101      	str	r1, [sp, #4]
    2794:	f003 fe77 	bl	6486 <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    2798:	9901      	ldr	r1, [sp, #4]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    279a:	4604      	mov	r4, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    279c:	eb0a 0001 	add.w	r0, sl, r1
    27a0:	3801      	subs	r0, #1
    27a2:	f003 fe70 	bl	6486 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    27a6:	4284      	cmp	r4, r0
    27a8:	f04f 0214 	mov.w	r2, #20
    27ac:	4b21      	ldr	r3, [pc, #132]	; (2834 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
    27ae:	d018      	beq.n	27e2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x7a>
		dyn_reg_info[i].index =
    27b0:	f06f 0315 	mvn.w	r3, #21
    27b4:	fb02 f808 	mul.w	r8, r2, r8
    27b8:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    27bc:	f44f 7389 	mov.w	r3, #274	; 0x112
    27c0:	4a1d      	ldr	r2, [pc, #116]	; (2838 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
    27c2:	491e      	ldr	r1, [pc, #120]	; (283c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
    27c4:	481e      	ldr	r0, [pc, #120]	; (2840 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
    27c6:	f003 fa94 	bl	5cf2 <printk>
    27ca:	4649      	mov	r1, r9
    27cc:	481d      	ldr	r0, [pc, #116]	; (2844 <arm_core_mpu_mark_areas_for_dynamic_regions+0xdc>)
    27ce:	f003 fa90 	bl	5cf2 <printk>
    27d2:	f44f 7189 	mov.w	r1, #274	; 0x112
    27d6:	4818      	ldr	r0, [pc, #96]	; (2838 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
}
    27d8:	b003      	add	sp, #12
    27da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    27de:	f003 bb56 	b.w	5e8e <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    27e2:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    27e6:	6034      	str	r4, [r6, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    27e8:	d0e8      	beq.n	27bc <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    27ea:	7819      	ldrb	r1, [r3, #0]
    27ec:	42a1      	cmp	r1, r4
    27ee:	dde5      	ble.n	27bc <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
    27f0:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    27f4:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
    27f6:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
    27f8:	68fc      	ldr	r4, [r7, #12]
    27fa:	f100 0108 	add.w	r1, r0, #8
    27fe:	7b00      	ldrb	r0, [r0, #12]
    2800:	f364 0004 	bfi	r0, r4, #0, #5
    2804:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    2806:	6938      	ldr	r0, [r7, #16]
    2808:	790c      	ldrb	r4, [r1, #4]
    280a:	0840      	lsrs	r0, r0, #1
    280c:	f360 1447 	bfi	r4, r0, #5, #3
    2810:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    2812:	68f9      	ldr	r1, [r7, #12]
    2814:	f021 011f 	bic.w	r1, r1, #31
    2818:	6071      	str	r1, [r6, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    281a:	6939      	ldr	r1, [r7, #16]
    281c:	f021 011f 	bic.w	r1, r1, #31
    2820:	6131      	str	r1, [r6, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    2822:	f108 0801 	add.w	r8, r8, #1
    2826:	3614      	adds	r6, #20
    2828:	350c      	adds	r5, #12
    282a:	e7a6      	b.n	277a <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    282c:	2000023c 	.word	0x2000023c
    2830:	e000ed90 	.word	0xe000ed90
    2834:	20000415 	.word	0x20000415
    2838:	00007a2f 	.word	0x00007a2f
    283c:	000084bc 	.word	0x000084bc
    2840:	00006f74 	.word	0x00006f74
    2844:	00007b41 	.word	0x00007b41

00002848 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    2848:	4b01      	ldr	r3, [pc, #4]	; (2850 <__stdout_hook_install+0x8>)
    284a:	6018      	str	r0, [r3, #0]
}
    284c:	4770      	bx	lr
    284e:	bf00      	nop
    2850:	20000008 	.word	0x20000008

00002854 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    2854:	6802      	ldr	r2, [r0, #0]
{
    2856:	b510      	push	{r4, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
    2858:	0953      	lsrs	r3, r2, #5
{
    285a:	4604      	mov	r4, r0
    switch (port)
    285c:	d01e      	beq.n	289c <nrf_gpio_pin_port_decode+0x48>
    285e:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    2860:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2864:	bf18      	it	ne
    2866:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
    2868:	f002 021f 	and.w	r2, r2, #31

    return (mask & (1UL << pin_number)) ? true : false;
    286c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    286e:	07db      	lsls	r3, r3, #31
    2870:	d40b      	bmi.n	288a <nrf_gpio_pin_port_decode+0x36>
    2872:	490c      	ldr	r1, [pc, #48]	; (28a4 <nrf_gpio_pin_port_decode+0x50>)
    2874:	480c      	ldr	r0, [pc, #48]	; (28a8 <nrf_gpio_pin_port_decode+0x54>)
    2876:	f240 230d 	movw	r3, #525	; 0x20d
    287a:	4a0c      	ldr	r2, [pc, #48]	; (28ac <nrf_gpio_pin_port_decode+0x58>)
    287c:	f003 fa39 	bl	5cf2 <printk>
    2880:	f240 210d 	movw	r1, #525	; 0x20d
    2884:	4809      	ldr	r0, [pc, #36]	; (28ac <nrf_gpio_pin_port_decode+0x58>)
    2886:	f003 fb02 	bl	5e8e <assert_post_action>
    if (*p_pin < P0_PIN_NUM)
    288a:	6823      	ldr	r3, [r4, #0]
    288c:	2b1f      	cmp	r3, #31
        *p_pin = *p_pin & 0x1F;
    288e:	bf85      	ittet	hi
    2890:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
    2894:	4806      	ldrhi	r0, [pc, #24]	; (28b0 <nrf_gpio_pin_port_decode+0x5c>)
        return NRF_P0;
    2896:	4807      	ldrls	r0, [pc, #28]	; (28b4 <nrf_gpio_pin_port_decode+0x60>)
        *p_pin = *p_pin & 0x1F;
    2898:	6023      	strhi	r3, [r4, #0]
}
    289a:	bd10      	pop	{r4, pc}
    switch (port)
    289c:	f04f 33ff 	mov.w	r3, #4294967295
    28a0:	e7e2      	b.n	2868 <nrf_gpio_pin_port_decode+0x14>
    28a2:	bf00      	nop
    28a4:	00007bb2 	.word	0x00007bb2
    28a8:	00006f74 	.word	0x00006f74
    28ac:	00007b7f 	.word	0x00007b7f
    28b0:	50842800 	.word	0x50842800
    28b4:	50842500 	.word	0x50842500

000028b8 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    28b8:	b570      	push	{r4, r5, r6, lr}
    28ba:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    28bc:	460c      	mov	r4, r1
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    28be:	68c5      	ldr	r5, [r0, #12]
    28c0:	b961      	cbnz	r1, 28dc <gpio_nrfx_manage_callback+0x24>
    28c2:	4922      	ldr	r1, [pc, #136]	; (294c <gpio_nrfx_manage_callback+0x94>)
    28c4:	2324      	movs	r3, #36	; 0x24
    28c6:	4a22      	ldr	r2, [pc, #136]	; (2950 <gpio_nrfx_manage_callback+0x98>)
    28c8:	4822      	ldr	r0, [pc, #136]	; (2954 <gpio_nrfx_manage_callback+0x9c>)
    28ca:	f003 fa12 	bl	5cf2 <printk>
    28ce:	4822      	ldr	r0, [pc, #136]	; (2958 <gpio_nrfx_manage_callback+0xa0>)
    28d0:	f003 fa0f 	bl	5cf2 <printk>
    28d4:	2124      	movs	r1, #36	; 0x24
    28d6:	481e      	ldr	r0, [pc, #120]	; (2950 <gpio_nrfx_manage_callback+0x98>)
    28d8:	f003 fad9 	bl	5e8e <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    28dc:	6863      	ldr	r3, [r4, #4]
    28de:	b963      	cbnz	r3, 28fa <gpio_nrfx_manage_callback+0x42>
    28e0:	491e      	ldr	r1, [pc, #120]	; (295c <gpio_nrfx_manage_callback+0xa4>)
    28e2:	2325      	movs	r3, #37	; 0x25
    28e4:	4a1a      	ldr	r2, [pc, #104]	; (2950 <gpio_nrfx_manage_callback+0x98>)
    28e6:	481b      	ldr	r0, [pc, #108]	; (2954 <gpio_nrfx_manage_callback+0x9c>)
    28e8:	f003 fa03 	bl	5cf2 <printk>
    28ec:	481c      	ldr	r0, [pc, #112]	; (2960 <gpio_nrfx_manage_callback+0xa8>)
    28ee:	f003 fa00 	bl	5cf2 <printk>
    28f2:	2125      	movs	r1, #37	; 0x25
    28f4:	4816      	ldr	r0, [pc, #88]	; (2950 <gpio_nrfx_manage_callback+0x98>)
    28f6:	f003 faca 	bl	5e8e <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
    28fa:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    28fc:	b15b      	cbz	r3, 2916 <gpio_nrfx_manage_callback+0x5e>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    28fe:	2200      	movs	r2, #0
    2900:	429c      	cmp	r4, r3
    2902:	d113      	bne.n	292c <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
    2904:	6823      	ldr	r3, [r4, #0]
    2906:	b95a      	cbnz	r2, 2920 <gpio_nrfx_manage_callback+0x68>
    2908:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
    290a:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    290c:	4294      	cmp	r4, r2
    290e:	d100      	bne.n	2912 <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
    2910:	60ab      	str	r3, [r5, #8]
	parent->next = child;
    2912:	2300      	movs	r3, #0
    2914:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    2916:	b976      	cbnz	r6, 2936 <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    2918:	2000      	movs	r0, #0
				     callback, set);
}
    291a:	bd70      	pop	{r4, r5, r6, pc}
    291c:	460b      	mov	r3, r1
    291e:	e7ef      	b.n	2900 <gpio_nrfx_manage_callback+0x48>
    2920:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    2922:	68ab      	ldr	r3, [r5, #8]
    2924:	429c      	cmp	r4, r3
	list->tail = node;
    2926:	bf08      	it	eq
    2928:	60aa      	streq	r2, [r5, #8]
}
    292a:	e7f2      	b.n	2912 <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    292c:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    292e:	461a      	mov	r2, r3
    2930:	2900      	cmp	r1, #0
    2932:	d1f3      	bne.n	291c <gpio_nrfx_manage_callback+0x64>
			if (!set) {
    2934:	b13e      	cbz	r6, 2946 <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
    2936:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    2938:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    293a:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
    293c:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    293e:	2800      	cmp	r0, #0
    2940:	d1ea      	bne.n	2918 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    2942:	60ac      	str	r4, [r5, #8]
}
    2944:	e7e9      	b.n	291a <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
    2946:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    294a:	e7e6      	b.n	291a <gpio_nrfx_manage_callback+0x62>
    294c:	00007c02 	.word	0x00007c02
    2950:	00007bd5 	.word	0x00007bd5
    2954:	00006f74 	.word	0x00006f74
    2958:	00007c0b 	.word	0x00007c0b
    295c:	00007c1a 	.word	0x00007c1a
    2960:	00007c2c 	.word	0x00007c2c

00002964 <fire_callbacks>:

	return out;
}

static inline void fire_callbacks(struct device *port, u32_t pins)
{
    2964:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct gpio_nrfx_data *data = get_port_data(port);
    2968:	f8d0 800c 	ldr.w	r8, [r0, #12]
{
    296c:	4606      	mov	r6, r0
	/* Instead of calling the common gpio_fire_callbacks() function,
	 * iterate the list of callbacks locally, to be able to perform
	 * additional masking of the pins and to call handlers only for
	 * the currently enabled callbacks.
	 */
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    296e:	f8d8 4004 	ldr.w	r4, [r8, #4]
{
    2972:	460f      	mov	r7, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2974:	b374      	cbz	r4, 29d4 <fire_callbacks+0x70>
	return node->next;
    2976:	6825      	ldr	r5, [r4, #0]
		/* Check currently enabled callbacks (data->int_en) in each
		 * iteration, as some callbacks may get disabled also in any
		 * of the handlers called here.
		 */
		if ((cb->pin_mask & pins) & data->int_en) {
			__ASSERT(cb->handler, "No callback handler!");
    2978:	f8df 9060 	ldr.w	r9, [pc, #96]	; 29dc <fire_callbacks+0x78>
    297c:	2d00      	cmp	r5, #0
    297e:	bf38      	it	cc
    2980:	2500      	movcc	r5, #0
    2982:	f8df a05c 	ldr.w	sl, [pc, #92]	; 29e0 <fire_callbacks+0x7c>
    2986:	f8df b05c 	ldr.w	fp, [pc, #92]	; 29e4 <fire_callbacks+0x80>
		if ((cb->pin_mask & pins) & data->int_en) {
    298a:	f8d8 3010 	ldr.w	r3, [r8, #16]
    298e:	68a2      	ldr	r2, [r4, #8]
    2990:	403b      	ands	r3, r7
    2992:	4213      	tst	r3, r2
    2994:	d016      	beq.n	29c4 <fire_callbacks+0x60>
			__ASSERT(cb->handler, "No callback handler!");
    2996:	6863      	ldr	r3, [r4, #4]
    2998:	b973      	cbnz	r3, 29b8 <fire_callbacks+0x54>
    299a:	4651      	mov	r1, sl
    299c:	f240 13a7 	movw	r3, #423	; 0x1a7
    29a0:	464a      	mov	r2, r9
    29a2:	4658      	mov	r0, fp
    29a4:	f003 f9a5 	bl	5cf2 <printk>
    29a8:	480b      	ldr	r0, [pc, #44]	; (29d8 <fire_callbacks+0x74>)
    29aa:	f003 f9a2 	bl	5cf2 <printk>
    29ae:	f240 11a7 	movw	r1, #423	; 0x1a7
    29b2:	4648      	mov	r0, r9
    29b4:	f003 fa6b 	bl	5e8e <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    29b8:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    29bc:	4621      	mov	r1, r4
    29be:	4630      	mov	r0, r6
    29c0:	403a      	ands	r2, r7
    29c2:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    29c4:	b135      	cbz	r5, 29d4 <fire_callbacks+0x70>
    29c6:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    29c8:	462c      	mov	r4, r5
    29ca:	2b00      	cmp	r3, #0
    29cc:	bf38      	it	cc
    29ce:	2300      	movcc	r3, #0
    29d0:	461d      	mov	r5, r3
    29d2:	e7da      	b.n	298a <fire_callbacks+0x26>
		}
	}
}
    29d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    29d8:	00007c2c 	.word	0x00007c2c
    29dc:	00007c43 	.word	0x00007c43
    29e0:	00007fc0 	.word	0x00007fc0
    29e4:	00006f74 	.word	0x00006f74

000029e8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(struct device *port)
{
    29e8:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    29ea:	4b09      	ldr	r3, [pc, #36]	; (2a10 <gpio_nrfx_init+0x28>)
    29ec:	781a      	ldrb	r2, [r3, #0]
    29ee:	b96a      	cbnz	r2, 2a0c <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    29f0:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    29f2:	200d      	movs	r0, #13
		gpio_initialized = true;
    29f4:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    29f6:	2105      	movs	r1, #5
    29f8:	f7ff f916 	bl	1c28 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    29fc:	200d      	movs	r0, #13
    29fe:	f7ff f903 	bl	1c08 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    2a02:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    2a06:	4b03      	ldr	r3, [pc, #12]	; (2a14 <gpio_nrfx_init+0x2c>)
    2a08:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    2a0c:	2000      	movs	r0, #0
    2a0e:	bd08      	pop	{r3, pc}
    2a10:	20000416 	.word	0x20000416
    2a14:	5000d000 	.word	0x5000d000

00002a18 <gpiote_pin_int_cfg>:
{
    2a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2a1a:	6843      	ldr	r3, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
    2a1c:	68c7      	ldr	r7, [r0, #12]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2a1e:	7a18      	ldrb	r0, [r3, #8]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    2a20:	2300      	movs	r3, #0
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2a22:	f001 051f 	and.w	r5, r1, #31
{
    2a26:	460e      	mov	r6, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    2a28:	4946      	ldr	r1, [pc, #280]	; (2b44 <gpiote_pin_int_cfg+0x12c>)
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2a2a:	ea45 1540 	orr.w	r5, r5, r0, lsl #5
    2a2e:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
    2a32:	b2d2      	uxtb	r2, r2
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2a34:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    2a38:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    2a3c:	f3c0 2005 	ubfx	r0, r0, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    2a40:	4285      	cmp	r5, r0
    2a42:	d169      	bne.n	2b18 <gpiote_pin_int_cfg+0x100>
		    && (intenset & BIT(i))) {
    2a44:	fa22 f003 	lsr.w	r0, r2, r3
    2a48:	07c0      	lsls	r0, r0, #31
    2a4a:	d565      	bpl.n	2b18 <gpiote_pin_int_cfg+0x100>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    2a4c:	009a      	lsls	r2, r3, #2
    2a4e:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    2a52:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    2a56:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    2a5a:	f020 0001 	bic.w	r0, r0, #1
    2a5e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    2a62:	2201      	movs	r2, #1
    2a64:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENCLR = mask;
    2a68:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    2a6c:	4628      	mov	r0, r5
    2a6e:	2100      	movs	r1, #0
    2a70:	f003 fda2 	bl	65b8 <nrf_gpio_cfg_sense_set>
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
    2a74:	68fb      	ldr	r3, [r7, #12]
    2a76:	40f3      	lsrs	r3, r6
    2a78:	f013 0001 	ands.w	r0, r3, #1
    2a7c:	d04b      	beq.n	2b16 <gpiote_pin_int_cfg+0xfe>
    2a7e:	693b      	ldr	r3, [r7, #16]
    2a80:	40f3      	lsrs	r3, r6
    2a82:	f013 0001 	ands.w	r0, r3, #1
    2a86:	d046      	beq.n	2b16 <gpiote_pin_int_cfg+0xfe>
		if (data->trig_edge & BIT(pin)) {
    2a88:	69bb      	ldr	r3, [r7, #24]
    2a8a:	40f3      	lsrs	r3, r6
    2a8c:	f013 0401 	ands.w	r4, r3, #1
    2a90:	d04c      	beq.n	2b2c <gpiote_pin_int_cfg+0x114>
			if (data->double_edge & BIT(pin)) {
    2a92:	69fb      	ldr	r3, [r7, #28]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    2a94:	2400      	movs	r4, #0
			if (data->double_edge & BIT(pin)) {
    2a96:	40f3      	lsrs	r3, r6
    2a98:	07db      	lsls	r3, r3, #31
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    2a9a:	bf4c      	ite	mi
    2a9c:	2603      	movmi	r6, #3
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    2a9e:	6979      	ldrpl	r1, [r7, #20]
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
    2aa0:	4f28      	ldr	r7, [pc, #160]	; (2b44 <gpiote_pin_int_cfg+0x12c>)
    2aa2:	bf5f      	itttt	pl
    2aa4:	fa21 f606 	lsrpl.w	r6, r1, r6
    2aa8:	f006 0601 	andpl.w	r6, r6, #1
    2aac:	f1c6 0602 	rsbpl	r6, r6, #2
    2ab0:	b2f6      	uxtbpl	r6, r6
    2ab2:	f504 73a2 	add.w	r3, r4, #324	; 0x144
    2ab6:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
    2aba:	f010 0003 	ands.w	r0, r0, #3
    2abe:	d12f      	bne.n	2b20 <gpiote_pin_int_cfg+0x108>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    2ac0:	00a2      	lsls	r2, r4, #2
    2ac2:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    2ac6:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    2aca:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2ace:	022d      	lsls	r5, r5, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    2ad0:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    2ad4:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    2ad8:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2adc:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    2ae0:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
    2ae4:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    2ae8:	430e      	orrs	r6, r1
			nrf_gpiote_event_t evt =
    2aea:	f104 0140 	add.w	r1, r4, #64	; 0x40
    2aee:	0089      	lsls	r1, r1, #2
    return ((uint32_t)p_reg + event);
    2af0:	b289      	uxth	r1, r1
    2af2:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    2af6:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2afa:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2afe:	6008      	str	r0, [r1, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    2b00:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    2b04:	f041 0101 	orr.w	r1, r1, #1
    2b08:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    2b0c:	2201      	movs	r2, #1
    2b0e:	fa02 f404 	lsl.w	r4, r2, r4
    p_reg->INTENSET = mask;
    2b12:	f8c7 4304 	str.w	r4, [r7, #772]	; 0x304
}
    2b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    2b18:	3301      	adds	r3, #1
    2b1a:	2b08      	cmp	r3, #8
    2b1c:	d18a      	bne.n	2a34 <gpiote_pin_int_cfg+0x1c>
    2b1e:	e7a5      	b.n	2a6c <gpiote_pin_int_cfg+0x54>
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    2b20:	3401      	adds	r4, #1
    2b22:	2c08      	cmp	r4, #8
    2b24:	d1c5      	bne.n	2ab2 <gpiote_pin_int_cfg+0x9a>
	return -ENODEV;
    2b26:	f06f 0012 	mvn.w	r0, #18
    2b2a:	e7f4      	b.n	2b16 <gpiote_pin_int_cfg+0xfe>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    2b2c:	6979      	ldr	r1, [r7, #20]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    2b2e:	4628      	mov	r0, r5
	if ((BIT(pin) & data->int_active_level) != 0U) {
    2b30:	40f1      	lsrs	r1, r6
    2b32:	f001 0101 	and.w	r1, r1, #1
    2b36:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    2b3a:	b2c9      	uxtb	r1, r1
    2b3c:	f003 fd3c 	bl	65b8 <nrf_gpio_cfg_sense_set>
	int res = 0;
    2b40:	4620      	mov	r0, r4
    2b42:	e7e8      	b.n	2b16 <gpiote_pin_int_cfg+0xfe>
    2b44:	5000d000 	.word	0x5000d000

00002b48 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2b48:	4b2e      	ldr	r3, [pc, #184]	; (2c04 <gpio_nrfx_config+0xbc>)
{
    2b4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2b4c:	4c2e      	ldr	r4, [pc, #184]	; (2c08 <gpio_nrfx_config+0xc0>)
    2b4e:	4013      	ands	r3, r2
    2b50:	42a3      	cmp	r3, r4
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    2b52:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2b54:	d044      	beq.n	2be0 <gpio_nrfx_config+0x98>
    2b56:	d80e      	bhi.n	2b76 <gpio_nrfx_config+0x2e>
    2b58:	2b06      	cmp	r3, #6
    2b5a:	d043      	beq.n	2be4 <gpio_nrfx_config+0x9c>
    2b5c:	d806      	bhi.n	2b6c <gpio_nrfx_config+0x24>
    2b5e:	2b00      	cmp	r3, #0
    2b60:	d040      	beq.n	2be4 <gpio_nrfx_config+0x9c>
    2b62:	2b02      	cmp	r3, #2
    2b64:	d040      	beq.n	2be8 <gpio_nrfx_config+0xa0>
    2b66:	f06f 0015 	mvn.w	r0, #21
    2b6a:	e037      	b.n	2bdc <gpio_nrfx_config+0x94>
    2b6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2b70:	d1f9      	bne.n	2b66 <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0S1;
    2b72:	2401      	movs	r4, #1
    2b74:	e009      	b.n	2b8a <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2b76:	4c25      	ldr	r4, [pc, #148]	; (2c0c <gpio_nrfx_config+0xc4>)
    2b78:	42a3      	cmp	r3, r4
    2b7a:	d037      	beq.n	2bec <gpio_nrfx_config+0xa4>
    2b7c:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    2b80:	d036      	beq.n	2bf0 <gpio_nrfx_config+0xa8>
    2b82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    2b86:	d1ee      	bne.n	2b66 <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_S0H1;
    2b88:	2402      	movs	r4, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    2b8a:	06d5      	lsls	r5, r2, #27
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    2b8c:	f482 7380 	eor.w	r3, r2, #256	; 0x100
		pull = NRF_GPIO_PIN_PULLUP;
    2b90:	bf4c      	ite	mi
    2b92:	2603      	movmi	r6, #3
		pull = NRF_GPIO_PIN_NOPULL;
    2b94:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    2b98:	f3c3 2700 	ubfx	r7, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    2b9c:	0593      	lsls	r3, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
    2b9e:	f3c2 2540 	ubfx	r5, r2, #9, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    2ba2:	d507      	bpl.n	2bb4 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    2ba4:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    2ba6:	f8d0 c004 	ldr.w	ip, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    2baa:	d523      	bpl.n	2bf4 <gpio_nrfx_config+0xac>
			nrf_gpio_port_out_set(reg, BIT(pin));
    2bac:	2301      	movs	r3, #1
    2bae:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    2bb0:	f8cc 3008 	str.w	r3, [ip, #8]
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
    2bb4:	7a03      	ldrb	r3, [r0, #8]
    2bb6:	f001 011f 	and.w	r1, r1, #31
    2bba:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2bbe:	a801      	add	r0, sp, #4
    2bc0:	9101      	str	r1, [sp, #4]
    2bc2:	f7ff fe47 	bl	2854 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2bc6:	9a01      	ldr	r2, [sp, #4]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    2bc8:	ea45 0347 	orr.w	r3, r5, r7, lsl #1
    2bcc:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    2bd0:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2bd4:	3280      	adds	r2, #128	; 0x80
    2bd6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	return 0;
    2bda:	2000      	movs	r0, #0
}
    2bdc:	b003      	add	sp, #12
    2bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
    2be0:	2407      	movs	r4, #7
    2be2:	e7d2      	b.n	2b8a <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2be4:	461c      	mov	r4, r3
    2be6:	e7d0      	b.n	2b8a <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
    2be8:	2404      	movs	r4, #4
    2bea:	e7ce      	b.n	2b8a <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
    2bec:	2405      	movs	r4, #5
    2bee:	e7cc      	b.n	2b8a <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_H0H1;
    2bf0:	2403      	movs	r4, #3
    2bf2:	e7ca      	b.n	2b8a <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    2bf4:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    2bf6:	bf42      	ittt	mi
    2bf8:	2301      	movmi	r3, #1
    2bfa:	408b      	lslmi	r3, r1
    p_reg->OUTCLR = clr_mask;
    2bfc:	f8cc 300c 	strmi.w	r3, [ip, #12]
}
    2c00:	e7d8      	b.n	2bb4 <gpio_nrfx_config+0x6c>
    2c02:	bf00      	nop
    2c04:	00f00006 	.word	0x00f00006
    2c08:	00100006 	.word	0x00100006
    2c0c:	00400002 	.word	0x00400002

00002c10 <gpiote_event_handler>:
{
    2c10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	u32_t fired_triggers[GPIO_COUNT] = {0};
    2c12:	2500      	movs	r5, #0
    2c14:	e9cd 5500 	strd	r5, r5, [sp]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2c18:	4e24      	ldr	r6, [pc, #144]	; (2cac <gpiote_event_handler+0x9c>)
    2c1a:	6834      	ldr	r4, [r6, #0]
	if (port_event) {
    2c1c:	b144      	cbz	r4, 2c30 <gpiote_event_handler+0x20>
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p0));
    2c1e:	4824      	ldr	r0, [pc, #144]	; (2cb0 <gpiote_event_handler+0xa0>)
    2c20:	f003 fcdd 	bl	65de <check_level_trigger_pins>
		fired_triggers[0] =
    2c24:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p1));
    2c26:	4823      	ldr	r0, [pc, #140]	; (2cb4 <gpiote_event_handler+0xa4>)
    2c28:	f003 fcd9 	bl	65de <check_level_trigger_pins>
		fired_triggers[1] =
    2c2c:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2c2e:	6035      	str	r5, [r6, #0]
{
    2c30:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    2c32:	2601      	movs	r6, #1
    2c34:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
    2c36:	4d20      	ldr	r5, [pc, #128]	; (2cb8 <gpiote_event_handler+0xa8>)
    2c38:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
    2c3c:	fa06 f102 	lsl.w	r1, r6, r2
    2c40:	4219      	tst	r1, r3
    2c42:	d01a      	beq.n	2c7a <gpiote_event_handler+0x6a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2c44:	0091      	lsls	r1, r2, #2
    2c46:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    2c4a:	f501 4151 	add.w	r1, r1, #53504	; 0xd100
    2c4e:	680b      	ldr	r3, [r1, #0]
    2c50:	b19b      	cbz	r3, 2c7a <gpiote_event_handler+0x6a>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2c52:	f502 73a2 	add.w	r3, r2, #324	; 0x144
    2c56:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    2c5a:	af02      	add	r7, sp, #8
    2c5c:	f3c3 3040 	ubfx	r0, r3, #13, #1
    2c60:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    2c64:	f850 7c08 	ldr.w	r7, [r0, #-8]
    2c68:	f3c3 2304 	ubfx	r3, r3, #8, #5
    2c6c:	fa06 f303 	lsl.w	r3, r6, r3
    2c70:	433b      	orrs	r3, r7
    2c72:	f840 3c08 	str.w	r3, [r0, #-8]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2c76:	f8c1 c000 	str.w	ip, [r1]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    2c7a:	3201      	adds	r2, #1
    2c7c:	2a08      	cmp	r2, #8
    2c7e:	d1db      	bne.n	2c38 <gpiote_event_handler+0x28>
	if (fired_triggers[0]) {
    2c80:	9900      	ldr	r1, [sp, #0]
    2c82:	b111      	cbz	r1, 2c8a <gpiote_event_handler+0x7a>
		fire_callbacks(DEVICE_GET(gpio_nrfx_p0), fired_triggers[0]);
    2c84:	480a      	ldr	r0, [pc, #40]	; (2cb0 <gpiote_event_handler+0xa0>)
    2c86:	f7ff fe6d 	bl	2964 <fire_callbacks>
	if (fired_triggers[1]) {
    2c8a:	9901      	ldr	r1, [sp, #4]
    2c8c:	b111      	cbz	r1, 2c94 <gpiote_event_handler+0x84>
		fire_callbacks(DEVICE_GET(gpio_nrfx_p1), fired_triggers[1]);
    2c8e:	4809      	ldr	r0, [pc, #36]	; (2cb4 <gpiote_event_handler+0xa4>)
    2c90:	f7ff fe68 	bl	2964 <fire_callbacks>
	if (port_event) {
    2c94:	b144      	cbz	r4, 2ca8 <gpiote_event_handler+0x98>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p0));
    2c96:	4806      	ldr	r0, [pc, #24]	; (2cb0 <gpiote_event_handler+0xa0>)
    2c98:	f003 fd29 	bl	66ee <cfg_level_pins>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
    2c9c:	4805      	ldr	r0, [pc, #20]	; (2cb4 <gpiote_event_handler+0xa4>)
}
    2c9e:	b003      	add	sp, #12
    2ca0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
    2ca4:	f003 bd23 	b.w	66ee <cfg_level_pins>
}
    2ca8:	b003      	add	sp, #12
    2caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2cac:	5000d17c 	.word	0x5000d17c
    2cb0:	200000a8 	.word	0x200000a8
    2cb4:	200000b8 	.word	0x200000b8
    2cb8:	5000d000 	.word	0x5000d000

00002cbc <gpio_pin_set>:
 * @retval 0 If successful.
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set(struct device *port, gpio_pin_t pin, int value)
{
    2cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		(const struct gpio_driver_config *)port->config_info;
	const struct gpio_driver_data *const data =
			(const struct gpio_driver_data *)port->driver_data;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    2cc0:	2501      	movs	r5, #1
    2cc2:	6843      	ldr	r3, [r0, #4]
    2cc4:	408d      	lsls	r5, r1
    2cc6:	681b      	ldr	r3, [r3, #0]
{
    2cc8:	4604      	mov	r4, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    2cca:	421d      	tst	r5, r3
{
    2ccc:	4616      	mov	r6, r2
	const struct gpio_driver_data *const data =
    2cce:	68c7      	ldr	r7, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    2cd0:	d10e      	bne.n	2cf0 <gpio_pin_set+0x34>
    2cd2:	4919      	ldr	r1, [pc, #100]	; (2d38 <gpio_pin_set+0x7c>)
    2cd4:	f240 438a 	movw	r3, #1162	; 0x48a
    2cd8:	4a18      	ldr	r2, [pc, #96]	; (2d3c <gpio_pin_set+0x80>)
    2cda:	4819      	ldr	r0, [pc, #100]	; (2d40 <gpio_pin_set+0x84>)
    2cdc:	f003 f809 	bl	5cf2 <printk>
    2ce0:	4818      	ldr	r0, [pc, #96]	; (2d44 <gpio_pin_set+0x88>)
    2ce2:	f003 f806 	bl	5cf2 <printk>
    2ce6:	f240 418a 	movw	r1, #1162	; 0x48a
    2cea:	4814      	ldr	r0, [pc, #80]	; (2d3c <gpio_pin_set+0x80>)
    2cec:	f003 f8cf 	bl	5e8e <assert_post_action>
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    2cf0:	683b      	ldr	r3, [r7, #0]
    2cf2:	421d      	tst	r5, r3
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    2cf4:	6863      	ldr	r3, [r4, #4]
    2cf6:	bf18      	it	ne
    2cf8:	f086 0601 	eorne.w	r6, r6, #1
    2cfc:	681b      	ldr	r3, [r3, #0]
    2cfe:	421d      	tst	r5, r3
    2d00:	d10e      	bne.n	2d20 <gpio_pin_set+0x64>
    2d02:	490d      	ldr	r1, [pc, #52]	; (2d38 <gpio_pin_set+0x7c>)
    2d04:	f240 4361 	movw	r3, #1121	; 0x461
    2d08:	4a0c      	ldr	r2, [pc, #48]	; (2d3c <gpio_pin_set+0x80>)
    2d0a:	480d      	ldr	r0, [pc, #52]	; (2d40 <gpio_pin_set+0x84>)
    2d0c:	f002 fff1 	bl	5cf2 <printk>
    2d10:	480c      	ldr	r0, [pc, #48]	; (2d44 <gpio_pin_set+0x88>)
    2d12:	f002 ffee 	bl	5cf2 <printk>
    2d16:	f240 4161 	movw	r1, #1121	; 0x461
    2d1a:	4808      	ldr	r0, [pc, #32]	; (2d3c <gpio_pin_set+0x80>)
    2d1c:	f003 f8b7 	bl	5e8e <assert_post_action>
	if (value != 0)	{
    2d20:	b136      	cbz	r6, 2d30 <gpio_pin_set+0x74>
	return api->port_set_bits_raw(port, pins);
    2d22:	68a3      	ldr	r3, [r4, #8]
    2d24:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    2d26:	4629      	mov	r1, r5
    2d28:	4620      	mov	r0, r4
		value = (value != 0) ? 0 : 1;
	}

	return gpio_pin_set_raw(port, pin, value);
}
    2d2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->port_clear_bits_raw(port, pins);
    2d2e:	4718      	bx	r3
    2d30:	68a3      	ldr	r3, [r4, #8]
    2d32:	691b      	ldr	r3, [r3, #16]
    2d34:	e7f7      	b.n	2d26 <gpio_pin_set+0x6a>
    2d36:	bf00      	nop
    2d38:	00007ca7 	.word	0x00007ca7
    2d3c:	00007c7d 	.word	0x00007c7d
    2d40:	00006f74 	.word	0x00006f74
    2d44:	00007ce5 	.word	0x00007ce5

00002d48 <spi_2_init>:
#ifdef CONFIG_SPI_1_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(1);
#endif

#ifdef CONFIG_SPI_2_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(2);
    2d48:	b510      	push	{r4, lr}
    2d4a:	4604      	mov	r4, r0
    2d4c:	2200      	movs	r2, #0
    2d4e:	2101      	movs	r1, #1
    2d50:	200b      	movs	r0, #11
    2d52:	f7fe ff69 	bl	1c28 <z_arm_irq_priority_set>
	nrfx_err_t result = nrfx_spim_init(&get_dev_config(dev)->spim,
    2d56:	6860      	ldr	r0, [r4, #4]
    2d58:	4623      	mov	r3, r4
    2d5a:	4a0d      	ldr	r2, [pc, #52]	; (2d90 <spi_2_init+0x48>)
    2d5c:	f100 010c 	add.w	r1, r0, #12
    2d60:	f000 fc64 	bl	362c <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
    2d64:	4b0b      	ldr	r3, [pc, #44]	; (2d94 <spi_2_init+0x4c>)
    2d66:	4298      	cmp	r0, r3
    2d68:	d00d      	beq.n	2d86 <spi_2_init+0x3e>
    2d6a:	4b0b      	ldr	r3, [pc, #44]	; (2d98 <spi_2_init+0x50>)
    2d6c:	4a0b      	ldr	r2, [pc, #44]	; (2d9c <spi_2_init+0x54>)
		LOG_ERR("Failed to initialize device: %s",
    2d6e:	480c      	ldr	r0, [pc, #48]	; (2da0 <spi_2_init+0x58>)
    2d70:	1ad2      	subs	r2, r2, r3
    2d72:	08d2      	lsrs	r2, r2, #3
    2d74:	0192      	lsls	r2, r2, #6
    2d76:	6821      	ldr	r1, [r4, #0]
    2d78:	f042 0201 	orr.w	r2, r2, #1
    2d7c:	f003 f8c4 	bl	5f08 <log_1>
		return -EBUSY;
    2d80:	f06f 000f 	mvn.w	r0, #15
SPI_NRFX_SPIM_DEVICE(2);
    2d84:	bd10      	pop	{r4, pc}
	spi_context_unlock_unconditionally(&get_dev_data(dev)->ctx);
    2d86:	68e0      	ldr	r0, [r4, #12]
    2d88:	f003 fd0e 	bl	67a8 <spi_context_unlock_unconditionally>
	return 0;
    2d8c:	2000      	movs	r0, #0
SPI_NRFX_SPIM_DEVICE(2);
    2d8e:	e7f9      	b.n	2d84 <spi_2_init+0x3c>
    2d90:	00003131 	.word	0x00003131
    2d94:	0bad0000 	.word	0x0bad0000
    2d98:	00006d40 	.word	0x00006d40
    2d9c:	00006d78 	.word	0x00006d78
    2da0:	00007cf7 	.word	0x00007cf7

00002da4 <transfer_next_chunk>:
{
    2da4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    2da6:	68c5      	ldr	r5, [r0, #12]
	return !!(ctx->rx_buf && ctx->rx_len);
}

static inline size_t spi_context_longest_current_buf(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    2da8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    2daa:	6c6a      	ldr	r2, [r5, #68]	; 0x44
    2dac:	b9eb      	cbnz	r3, 2dea <transfer_next_chunk+0x46>
	if (chunk_len > 0) {
    2dae:	2a00      	cmp	r2, #0
    2db0:	d13e      	bne.n	2e30 <transfer_next_chunk+0x8c>
	int error = 0;
    2db2:	4614      	mov	r4, r2
	_spi_context_cs_control(ctx, on, false);
    2db4:	2200      	movs	r2, #0
    2db6:	4628      	mov	r0, r5
    2db8:	4611      	mov	r1, r2
    2dba:	f003 fccb 	bl	6754 <_spi_context_cs_control.isra.0>
    2dbe:	4a1f      	ldr	r2, [pc, #124]	; (2e3c <transfer_next_chunk+0x98>)
    2dc0:	4b1f      	ldr	r3, [pc, #124]	; (2e40 <transfer_next_chunk+0x9c>)
	LOG_DBG("Transaction finished with status %d", error);
    2dc2:	4920      	ldr	r1, [pc, #128]	; (2e44 <transfer_next_chunk+0xa0>)
    2dc4:	1a9b      	subs	r3, r3, r2
    2dc6:	08db      	lsrs	r3, r3, #3
    2dc8:	019b      	lsls	r3, r3, #6
    2dca:	4622      	mov	r2, r4
    2dcc:	481e      	ldr	r0, [pc, #120]	; (2e48 <transfer_next_chunk+0xa4>)
    2dce:	f043 0304 	orr.w	r3, r3, #4
    2dd2:	f003 f8ad 	bl	5f30 <log_2>
	ctx->sync_status = status;
    2dd6:	626c      	str	r4, [r5, #36]	; 0x24
	z_impl_k_sem_give(sem);
    2dd8:	f105 0014 	add.w	r0, r5, #20
    2ddc:	f002 f9a8 	bl	5130 <z_impl_k_sem_give>
	dev_data->busy = false;
    2de0:	2300      	movs	r3, #0
    2de2:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
}
    2de6:	b004      	add	sp, #16
    2de8:	bd70      	pop	{r4, r5, r6, pc}
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
    2dea:	4619      	mov	r1, r3
    2dec:	b112      	cbz	r2, 2df4 <transfer_next_chunk+0x50>
		return ctx->tx_len;
	} else if (ctx->tx_len < ctx->rx_len) {
    2dee:	4293      	cmp	r3, r2
    2df0:	bf28      	it	cs
    2df2:	4611      	movcs	r1, r2
	const struct spi_nrfx_config *dev_config = get_dev_config(dev);
    2df4:	6840      	ldr	r0, [r0, #4]
		const u8_t *tx_buf = ctx->tx_buf;
    2df6:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if (chunk_len > dev_config->max_chunk_len) {
    2df8:	6886      	ldr	r6, [r0, #8]
		xfer.p_tx_buffer = tx_buf;
    2dfa:	9400      	str	r4, [sp, #0]
    2dfc:	42b1      	cmp	r1, r6
    2dfe:	bf28      	it	cs
    2e00:	4631      	movcs	r1, r6
		dev_data->chunk_len = chunk_len;
    2e02:	64a9      	str	r1, [r5, #72]	; 0x48
	return !!(ctx->tx_buf && ctx->tx_len);
    2e04:	b1b4      	cbz	r4, 2e34 <transfer_next_chunk+0x90>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    2e06:	2b00      	cmp	r3, #0
    2e08:	bf18      	it	ne
    2e0a:	460b      	movne	r3, r1
    2e0c:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    2e0e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    2e10:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    2e12:	b18b      	cbz	r3, 2e38 <transfer_next_chunk+0x94>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    2e14:	2a00      	cmp	r2, #0
    2e16:	bf18      	it	ne
    2e18:	460a      	movne	r2, r1
    2e1a:	9203      	str	r2, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    2e1c:	4669      	mov	r1, sp
    2e1e:	2200      	movs	r2, #0
    2e20:	f000 fcc8 	bl	37b4 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
    2e24:	4b09      	ldr	r3, [pc, #36]	; (2e4c <transfer_next_chunk+0xa8>)
    2e26:	4298      	cmp	r0, r3
    2e28:	d0dd      	beq.n	2de6 <transfer_next_chunk+0x42>
			error = -EIO;
    2e2a:	f06f 0404 	mvn.w	r4, #4
    2e2e:	e7c1      	b.n	2db4 <transfer_next_chunk+0x10>
    2e30:	4611      	mov	r1, r2
    2e32:	e7df      	b.n	2df4 <transfer_next_chunk+0x50>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    2e34:	4623      	mov	r3, r4
    2e36:	e7e9      	b.n	2e0c <transfer_next_chunk+0x68>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    2e38:	461a      	mov	r2, r3
    2e3a:	e7ee      	b.n	2e1a <transfer_next_chunk+0x76>
    2e3c:	00006d40 	.word	0x00006d40
    2e40:	00006d78 	.word	0x00006d78
    2e44:	00007f41 	.word	0x00007f41
    2e48:	00007d17 	.word	0x00007d17
    2e4c:	0bad0000 	.word	0x0bad0000

00002e50 <spi_nrfx_transceive>:
{
    2e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    2e54:	68c4      	ldr	r4, [r0, #12]
{
    2e56:	461d      	mov	r5, r3
    2e58:	b091      	sub	sp, #68	; 0x44
	k_sem_take(&ctx->lock, K_FOREVER);
    2e5a:	1d23      	adds	r3, r4, #4
    2e5c:	4680      	mov	r8, r0
    2e5e:	460f      	mov	r7, r1
    2e60:	4616      	mov	r6, r2
    2e62:	9305      	str	r3, [sp, #20]
	return z_impl_k_sem_take(sem, timeout);
    2e64:	f04f 32ff 	mov.w	r2, #4294967295
    2e68:	f04f 33ff 	mov.w	r3, #4294967295
    2e6c:	1d20      	adds	r0, r4, #4
    2e6e:	f002 f99d 	bl	51ac <z_impl_k_sem_take>
	struct spi_context *ctx = &get_dev_data(dev)->ctx;
    2e72:	4b99      	ldr	r3, [pc, #612]	; (30d8 <spi_nrfx_transceive+0x288>)
    2e74:	4a99      	ldr	r2, [pc, #612]	; (30dc <spi_nrfx_transceive+0x28c>)
    2e76:	f8d8 b00c 	ldr.w	fp, [r8, #12]
	return !!(ctx->config == config);
    2e7a:	1a9b      	subs	r3, r3, r2
    2e7c:	08db      	lsrs	r3, r3, #3
    2e7e:	9303      	str	r3, [sp, #12]
	if (spi_context_configured(ctx, spi_cfg)) {
    2e80:	f8db 3000 	ldr.w	r3, [fp]
    2e84:	429f      	cmp	r7, r3
    2e86:	9b03      	ldr	r3, [sp, #12]
    2e88:	ea4f 1983 	mov.w	r9, r3, lsl #6
    2e8c:	f000 80aa 	beq.w	2fe4 <spi_nrfx_transceive+0x194>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    2e90:	88bb      	ldrh	r3, [r7, #4]
    2e92:	07d9      	lsls	r1, r3, #31
    2e94:	d50f      	bpl.n	2eb6 <spi_nrfx_transceive+0x66>
		LOG_ERR("Slave mode is not supported on %s",
    2e96:	f8d8 1000 	ldr.w	r1, [r8]
    2e9a:	4891      	ldr	r0, [pc, #580]	; (30e0 <spi_nrfx_transceive+0x290>)
    2e9c:	f049 0201 	orr.w	r2, r9, #1
    2ea0:	f003 f832 	bl	5f08 <log_1>
		return -EINVAL;
    2ea4:	f06f 0415 	mvn.w	r4, #21
	z_impl_k_sem_give(sem);
    2ea8:	9805      	ldr	r0, [sp, #20]
    2eaa:	f002 f941 	bl	5130 <z_impl_k_sem_give>
}
    2eae:	4620      	mov	r0, r4
    2eb0:	b011      	add	sp, #68	; 0x44
    2eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (spi_cfg->operation & SPI_MODE_LOOP) {
    2eb6:	071a      	lsls	r2, r3, #28
    2eb8:	d505      	bpl.n	2ec6 <spi_nrfx_transceive+0x76>
		LOG_ERR("Loopback mode is not supported");
    2eba:	488a      	ldr	r0, [pc, #552]	; (30e4 <spi_nrfx_transceive+0x294>)
    2ebc:	f049 0101 	orr.w	r1, r9, #1
		LOG_ERR("Word sizes other than 8 bits"
    2ec0:	f003 f815 	bl	5eee <log_0>
    2ec4:	e7ee      	b.n	2ea4 <spi_nrfx_transceive+0x54>
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
    2ec6:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
    2eca:	d003      	beq.n	2ed4 <spi_nrfx_transceive+0x84>
		LOG_ERR("Only single line mode is supported");
    2ecc:	4886      	ldr	r0, [pc, #536]	; (30e8 <spi_nrfx_transceive+0x298>)
    2ece:	f049 0101 	orr.w	r1, r9, #1
    2ed2:	e7f5      	b.n	2ec0 <spi_nrfx_transceive+0x70>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    2ed4:	f3c3 1345 	ubfx	r3, r3, #5, #6
    2ed8:	2b08      	cmp	r3, #8
    2eda:	d003      	beq.n	2ee4 <spi_nrfx_transceive+0x94>
		LOG_ERR("Word sizes other than 8 bits"
    2edc:	4883      	ldr	r0, [pc, #524]	; (30ec <spi_nrfx_transceive+0x29c>)
    2ede:	f049 0101 	orr.w	r1, r9, #1
    2ee2:	e7ed      	b.n	2ec0 <spi_nrfx_transceive+0x70>
	if (spi_cfg->frequency < 125000) {
    2ee4:	683a      	ldr	r2, [r7, #0]
    2ee6:	4b82      	ldr	r3, [pc, #520]	; (30f0 <spi_nrfx_transceive+0x2a0>)
    2ee8:	429a      	cmp	r2, r3
    2eea:	d803      	bhi.n	2ef4 <spi_nrfx_transceive+0xa4>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    2eec:	4881      	ldr	r0, [pc, #516]	; (30f4 <spi_nrfx_transceive+0x2a4>)
    2eee:	f049 0101 	orr.w	r1, r9, #1
    2ef2:	e7e5      	b.n	2ec0 <spi_nrfx_transceive+0x70>
	const nrfx_spim_t *spim = &get_dev_config(dev)->spim;
    2ef4:	f8d8 3004 	ldr.w	r3, [r8, #4]
	ctx->config = spi_cfg;
    2ef8:	f8cb 7000 	str.w	r7, [fp]
	const nrfx_spim_t *spim = &get_dev_config(dev)->spim;
    2efc:	9304      	str	r3, [sp, #16]
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
    2efe:	68bb      	ldr	r3, [r7, #8]
    2f00:	2b00      	cmp	r3, #0
    2f02:	f000 80c0 	beq.w	3086 <spi_nrfx_transceive+0x236>
    2f06:	f8d3 a000 	ldr.w	sl, [r3]
    2f0a:	f1ba 0f00 	cmp.w	sl, #0
    2f0e:	f000 80ba 	beq.w	3086 <spi_nrfx_transceive+0x236>
		gpio_pin_configure(ctx->config->cs->gpio_dev,
    2f12:	791b      	ldrb	r3, [r3, #4]
    2f14:	9300      	str	r3, [sp, #0]
	struct gpio_driver_data *data =
    2f16:	f8da 300c 	ldr.w	r3, [sl, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    2f1a:	9a00      	ldr	r2, [sp, #0]
	struct gpio_driver_data *data =
    2f1c:	9301      	str	r3, [sp, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    2f1e:	2301      	movs	r3, #1
    2f20:	4093      	lsls	r3, r2
    2f22:	9302      	str	r3, [sp, #8]
    2f24:	f8da 3004 	ldr.w	r3, [sl, #4]
    2f28:	9a02      	ldr	r2, [sp, #8]
    2f2a:	681b      	ldr	r3, [r3, #0]
    2f2c:	421a      	tst	r2, r3
    2f2e:	d10e      	bne.n	2f4e <spi_nrfx_transceive+0xfe>
    2f30:	4971      	ldr	r1, [pc, #452]	; (30f8 <spi_nrfx_transceive+0x2a8>)
    2f32:	f240 23ee 	movw	r3, #750	; 0x2ee
    2f36:	4a71      	ldr	r2, [pc, #452]	; (30fc <spi_nrfx_transceive+0x2ac>)
    2f38:	4871      	ldr	r0, [pc, #452]	; (3100 <spi_nrfx_transceive+0x2b0>)
    2f3a:	f002 feda 	bl	5cf2 <printk>
    2f3e:	4871      	ldr	r0, [pc, #452]	; (3104 <spi_nrfx_transceive+0x2b4>)
    2f40:	f002 fed7 	bl	5cf2 <printk>
    2f44:	f240 21ee 	movw	r1, #750	; 0x2ee
    2f48:	486c      	ldr	r0, [pc, #432]	; (30fc <spi_nrfx_transceive+0x2ac>)
    2f4a:	f002 ffa0 	bl	5e8e <assert_post_action>
	return api->pin_configure(port, pin, flags);
    2f4e:	f8da 3008 	ldr.w	r3, [sl, #8]
    2f52:	f44f 7200 	mov.w	r2, #512	; 0x200
    2f56:	4650      	mov	r0, sl
    2f58:	681b      	ldr	r3, [r3, #0]
    2f5a:	9900      	ldr	r1, [sp, #0]
    2f5c:	4798      	blx	r3
	if (ret != 0) {
    2f5e:	b930      	cbnz	r0, 2f6e <spi_nrfx_transceive+0x11e>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    2f60:	9b01      	ldr	r3, [sp, #4]
    2f62:	9a02      	ldr	r2, [sp, #8]
    2f64:	681b      	ldr	r3, [r3, #0]
    2f66:	ea23 0302 	bic.w	r3, r3, r2
    2f6a:	9a01      	ldr	r2, [sp, #4]
    2f6c:	6013      	str	r3, [r2, #0]
		gpio_pin_set(ctx->config->cs->gpio_dev,
    2f6e:	f8db 2000 	ldr.w	r2, [fp]
    2f72:	6893      	ldr	r3, [r2, #8]
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
    2f74:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
		gpio_pin_set(ctx->config->cs->gpio_dev,
    2f78:	7919      	ldrb	r1, [r3, #4]
    2f7a:	43d2      	mvns	r2, r2
    2f7c:	6818      	ldr	r0, [r3, #0]
    2f7e:	0fd2      	lsrs	r2, r2, #31
    2f80:	f7ff fe9c 	bl	2cbc <gpio_pin_set>
	nrf_spim_configure(spim->p_reg,
    2f84:	9b04      	ldr	r3, [sp, #16]
    2f86:	6819      	ldr	r1, [r3, #0]
    2f88:	88bb      	ldrh	r3, [r7, #4]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    2f8a:	0798      	lsls	r0, r3, #30
    2f8c:	f003 0204 	and.w	r2, r3, #4
    2f90:	d57f      	bpl.n	3092 <spi_nrfx_transceive+0x242>
			return NRF_SPIM_MODE_2;
    2f92:	2a00      	cmp	r2, #0
    2f94:	bf14      	ite	ne
    2f96:	2203      	movne	r2, #3
    2f98:	2202      	moveq	r2, #2
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
    switch (spi_mode)
    2f9a:	2a02      	cmp	r2, #2
	if (operation & SPI_TRANSFER_LSB) {
    2f9c:	f3c3 1300 	ubfx	r3, r3, #4, #1
    2fa0:	d07b      	beq.n	309a <spi_nrfx_transceive+0x24a>
    2fa2:	2a03      	cmp	r2, #3
    2fa4:	d07c      	beq.n	30a0 <spi_nrfx_transceive+0x250>
    2fa6:	2a01      	cmp	r2, #1
    2fa8:	d101      	bne.n	2fae <spi_nrfx_transceive+0x15e>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
    2faa:	f043 0302 	orr.w	r3, r3, #2
	if (frequency < 250000) {
    2fae:	4a56      	ldr	r2, [pc, #344]	; (3108 <spi_nrfx_transceive+0x2b8>)
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    2fb0:	f8c1 3554 	str.w	r3, [r1, #1364]	; 0x554
	nrf_spim_frequency_set(spim->p_reg,
    2fb4:	683b      	ldr	r3, [r7, #0]
	if (frequency < 250000) {
    2fb6:	4293      	cmp	r3, r2
    2fb8:	d975      	bls.n	30a6 <spi_nrfx_transceive+0x256>
	} else if (frequency < 500000) {
    2fba:	4a54      	ldr	r2, [pc, #336]	; (310c <spi_nrfx_transceive+0x2bc>)
    2fbc:	4293      	cmp	r3, r2
    2fbe:	d975      	bls.n	30ac <spi_nrfx_transceive+0x25c>
	} else if (frequency < 1000000) {
    2fc0:	4a53      	ldr	r2, [pc, #332]	; (3110 <spi_nrfx_transceive+0x2c0>)
    2fc2:	4293      	cmp	r3, r2
    2fc4:	d975      	bls.n	30b2 <spi_nrfx_transceive+0x262>
	} else if (frequency < 2000000) {
    2fc6:	4a53      	ldr	r2, [pc, #332]	; (3114 <spi_nrfx_transceive+0x2c4>)
    2fc8:	4293      	cmp	r3, r2
    2fca:	d975      	bls.n	30b8 <spi_nrfx_transceive+0x268>
	} else if (frequency < 4000000) {
    2fcc:	4a52      	ldr	r2, [pc, #328]	; (3118 <spi_nrfx_transceive+0x2c8>)
    2fce:	4293      	cmp	r3, r2
    2fd0:	d975      	bls.n	30be <spi_nrfx_transceive+0x26e>
		return NRF_SPIM_FREQ_8M;
    2fd2:	4a52      	ldr	r2, [pc, #328]	; (311c <spi_nrfx_transceive+0x2cc>)
    2fd4:	4293      	cmp	r3, r2
    2fd6:	bf34      	ite	cc
    2fd8:	f04f 4380 	movcc.w	r3, #1073741824	; 0x40000000
    2fdc:	f04f 4300 	movcs.w	r3, #2147483648	; 0x80000000
    p_reg->FREQUENCY = (uint32_t)frequency;
    2fe0:	f8c1 3524 	str.w	r3, [r1, #1316]	; 0x524
		dev_data->busy = true;
    2fe4:	2201      	movs	r2, #1
	LOG_DBG("tx_bufs %p - rx_bufs %p - %u", tx_bufs, rx_bufs, dfs);
    2fe6:	9b03      	ldr	r3, [sp, #12]
    2fe8:	4f4d      	ldr	r7, [pc, #308]	; (3120 <spi_nrfx_transceive+0x2d0>)
    2fea:	019b      	lsls	r3, r3, #6
    2fec:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    2ff0:	484c      	ldr	r0, [pc, #304]	; (3124 <spi_nrfx_transceive+0x2d4>)
    2ff2:	e9cd 5209 	strd	r5, r2, [sp, #36]	; 0x24
    2ff6:	f043 0304 	orr.w	r3, r3, #4
    2ffa:	2204      	movs	r2, #4
    2ffc:	a907      	add	r1, sp, #28
    2ffe:	e9cd 7607 	strd	r7, r6, [sp, #28]
    3002:	f002 ffca 	bl	5f9a <log_n>
	if (tx_bufs) {
    3006:	2e00      	cmp	r6, #0
    3008:	d05c      	beq.n	30c4 <spi_nrfx_transceive+0x274>
		ctx->current_tx = tx_bufs->buffers;
    300a:	6833      	ldr	r3, [r6, #0]
		ctx->tx_count = tx_bufs->count;
    300c:	6872      	ldr	r2, [r6, #4]
		ctx->current_tx = tx_bufs->buffers;
    300e:	62a3      	str	r3, [r4, #40]	; 0x28
		ctx->tx_count = tx_bufs->count;
    3010:	62e2      	str	r2, [r4, #44]	; 0x2c
		ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
    3012:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
    3014:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
    3016:	63a2      	str	r2, [r4, #56]	; 0x38
		ctx->tx_len = ctx->current_tx->len / dfs;
    3018:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (rx_bufs) {
    301a:	2d00      	cmp	r5, #0
    301c:	d057      	beq.n	30ce <spi_nrfx_transceive+0x27e>
		ctx->current_rx = rx_bufs->buffers;
    301e:	682b      	ldr	r3, [r5, #0]
		ctx->rx_count = rx_bufs->count;
    3020:	686a      	ldr	r2, [r5, #4]
		ctx->current_rx = rx_bufs->buffers;
    3022:	6323      	str	r3, [r4, #48]	; 0x30
		ctx->rx_count = rx_bufs->count;
    3024:	6362      	str	r2, [r4, #52]	; 0x34
		ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
    3026:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
    3028:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
    302a:	6422      	str	r2, [r4, #64]	; 0x40
		ctx->rx_len = ctx->current_rx->len / dfs;
    302c:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->sync_status = 0;
    302e:	2500      	movs	r5, #0
	LOG_DBG("current_tx %p (%zu), current_rx %p (%zu),"
    3030:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	ctx->sync_status = 0;
    3032:	6265      	str	r5, [r4, #36]	; 0x24
	LOG_DBG("current_tx %p (%zu), current_rx %p (%zu),"
    3034:	9308      	str	r3, [sp, #32]
    3036:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3038:	a907      	add	r1, sp, #28
    303a:	9309      	str	r3, [sp, #36]	; 0x24
    303c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    303e:	2209      	movs	r2, #9
    3040:	930a      	str	r3, [sp, #40]	; 0x28
    3042:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3044:	4838      	ldr	r0, [pc, #224]	; (3128 <spi_nrfx_transceive+0x2d8>)
    3046:	930b      	str	r3, [sp, #44]	; 0x2c
    3048:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    304a:	9707      	str	r7, [sp, #28]
    304c:	930c      	str	r3, [sp, #48]	; 0x30
    304e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3050:	930d      	str	r3, [sp, #52]	; 0x34
    3052:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3054:	930e      	str	r3, [sp, #56]	; 0x38
    3056:	6c63      	ldr	r3, [r4, #68]	; 0x44
    3058:	930f      	str	r3, [sp, #60]	; 0x3c
    305a:	f049 0304 	orr.w	r3, r9, #4
    305e:	f002 ff9c 	bl	5f9a <log_n>
	_spi_context_cs_control(ctx, on, false);
    3062:	462a      	mov	r2, r5
    3064:	2101      	movs	r1, #1
    3066:	4620      	mov	r0, r4
    3068:	f003 fb74 	bl	6754 <_spi_context_cs_control.isra.0>
		transfer_next_chunk(dev);
    306c:	4640      	mov	r0, r8
    306e:	f7ff fe99 	bl	2da4 <transfer_next_chunk>
	return z_impl_k_sem_take(sem, timeout);
    3072:	f04f 32ff 	mov.w	r2, #4294967295
    3076:	f104 0014 	add.w	r0, r4, #20
    307a:	f04f 33ff 	mov.w	r3, #4294967295
    307e:	f002 f895 	bl	51ac <z_impl_k_sem_take>
	status = ctx->sync_status;
    3082:	6a64      	ldr	r4, [r4, #36]	; 0x24
	return status;
    3084:	e710      	b.n	2ea8 <spi_nrfx_transceive+0x58>
		LOG_INF("CS control inhibited (no GPIO device)");
    3086:	4829      	ldr	r0, [pc, #164]	; (312c <spi_nrfx_transceive+0x2dc>)
    3088:	f049 0103 	orr.w	r1, r9, #3
    308c:	f002 ff2f 	bl	5eee <log_0>
    3090:	e778      	b.n	2f84 <spi_nrfx_transceive+0x134>
			return NRF_SPIM_MODE_0;
    3092:	3a00      	subs	r2, #0
    3094:	bf18      	it	ne
    3096:	2201      	movne	r2, #1
    3098:	e77f      	b.n	2f9a <spi_nrfx_transceive+0x14a>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    309a:	f043 0304 	orr.w	r3, r3, #4
        break;
    309e:	e786      	b.n	2fae <spi_nrfx_transceive+0x15e>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    30a0:	f043 0306 	orr.w	r3, r3, #6
        break;
    30a4:	e783      	b.n	2fae <spi_nrfx_transceive+0x15e>
		return NRF_SPIM_FREQ_125K;
    30a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    30aa:	e799      	b.n	2fe0 <spi_nrfx_transceive+0x190>
		return NRF_SPIM_FREQ_250K;
    30ac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    30b0:	e796      	b.n	2fe0 <spi_nrfx_transceive+0x190>
		return NRF_SPIM_FREQ_500K;
    30b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    30b6:	e793      	b.n	2fe0 <spi_nrfx_transceive+0x190>
		return NRF_SPIM_FREQ_1M;
    30b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    30bc:	e790      	b.n	2fe0 <spi_nrfx_transceive+0x190>
		return NRF_SPIM_FREQ_2M;
    30be:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    30c2:	e78d      	b.n	2fe0 <spi_nrfx_transceive+0x190>
		ctx->tx_count = 0;
    30c4:	e9c4 660a 	strd	r6, r6, [r4, #40]	; 0x28
		ctx->tx_len = 0;
    30c8:	e9c4 660e 	strd	r6, r6, [r4, #56]	; 0x38
    30cc:	e7a5      	b.n	301a <spi_nrfx_transceive+0x1ca>
		ctx->rx_count = 0;
    30ce:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
		ctx->rx_len = 0;
    30d2:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
    30d6:	e7aa      	b.n	302e <spi_nrfx_transceive+0x1de>
    30d8:	00006d78 	.word	0x00006d78
    30dc:	00006d40 	.word	0x00006d40
    30e0:	00007d3f 	.word	0x00007d3f
    30e4:	00007d61 	.word	0x00007d61
    30e8:	00007d80 	.word	0x00007d80
    30ec:	00007da3 	.word	0x00007da3
    30f0:	0001e847 	.word	0x0001e847
    30f4:	00007dd2 	.word	0x00007dd2
    30f8:	00007ca7 	.word	0x00007ca7
    30fc:	00007c7d 	.word	0x00007c7d
    3100:	00006f74 	.word	0x00006f74
    3104:	00007ce5 	.word	0x00007ce5
    3108:	0003d08f 	.word	0x0003d08f
    310c:	0007a11f 	.word	0x0007a11f
    3110:	000f423f 	.word	0x000f423f
    3114:	001e847f 	.word	0x001e847f
    3118:	003d08ff 	.word	0x003d08ff
    311c:	007a1200 	.word	0x007a1200
    3120:	00007efb 	.word	0x00007efb
    3124:	00007e29 	.word	0x00007e29
    3128:	00007e4a 	.word	0x00007e4a
    312c:	00007e03 	.word	0x00007e03

00003130 <event_handler>:
{
    3130:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    3132:	7803      	ldrb	r3, [r0, #0]
{
    3134:	460d      	mov	r5, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    3136:	2b00      	cmp	r3, #0
    3138:	d166      	bne.n	3208 <event_handler+0xd8>
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    313a:	68cc      	ldr	r4, [r1, #12]
	if (!ctx->tx_len) {
    313c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    313e:	b16a      	cbz	r2, 315c <event_handler+0x2c>
    3140:	4b32      	ldr	r3, [pc, #200]	; (320c <event_handler+0xdc>)
    3142:	4933      	ldr	r1, [pc, #204]	; (3210 <event_handler+0xe0>)
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
    3144:	6ca0      	ldr	r0, [r4, #72]	; 0x48
	if (len > ctx->tx_len) {
    3146:	1a5b      	subs	r3, r3, r1
    3148:	08db      	lsrs	r3, r3, #3
    314a:	4290      	cmp	r0, r2
    314c:	ea4f 1383 	mov.w	r3, r3, lsl #6
    3150:	d91a      	bls.n	3188 <event_handler+0x58>
		LOG_ERR("Update exceeds current buffer");
    3152:	4830      	ldr	r0, [pc, #192]	; (3214 <event_handler+0xe4>)
    3154:	f043 0101 	orr.w	r1, r3, #1
    3158:	f002 fec9 	bl	5eee <log_0>
	if (!ctx->rx_len) {
    315c:	6c62      	ldr	r2, [r4, #68]	; 0x44
    315e:	b16a      	cbz	r2, 317c <event_handler+0x4c>
    3160:	4b2a      	ldr	r3, [pc, #168]	; (320c <event_handler+0xdc>)
    3162:	492b      	ldr	r1, [pc, #172]	; (3210 <event_handler+0xe0>)
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
    3164:	6ca0      	ldr	r0, [r4, #72]	; 0x48
	if (len > ctx->rx_len) {
    3166:	1a5b      	subs	r3, r3, r1
    3168:	08db      	lsrs	r3, r3, #3
    316a:	4290      	cmp	r0, r2
    316c:	ea4f 1383 	mov.w	r3, r3, lsl #6
    3170:	d92a      	bls.n	31c8 <event_handler+0x98>
		LOG_ERR("Update exceeds current buffer");
    3172:	4828      	ldr	r0, [pc, #160]	; (3214 <event_handler+0xe4>)
    3174:	f043 0101 	orr.w	r1, r3, #1
    3178:	f002 feb9 	bl	5eee <log_0>
		transfer_next_chunk(dev);
    317c:	4628      	mov	r0, r5
}
    317e:	b003      	add	sp, #12
    3180:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		transfer_next_chunk(dev);
    3184:	f7ff be0e 	b.w	2da4 <transfer_next_chunk>
	ctx->tx_len -= len;
    3188:	1a12      	subs	r2, r2, r0
    318a:	63e2      	str	r2, [r4, #60]	; 0x3c
	if (!ctx->tx_len) {
    318c:	b9b2      	cbnz	r2, 31bc <event_handler+0x8c>
		ctx->tx_count--;
    318e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3190:	3a01      	subs	r2, #1
    3192:	62e2      	str	r2, [r4, #44]	; 0x2c
		if (ctx->tx_count) {
    3194:	b1b2      	cbz	r2, 31c4 <event_handler+0x94>
			ctx->current_tx++;
    3196:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    3198:	f102 0108 	add.w	r1, r2, #8
    319c:	62a1      	str	r1, [r4, #40]	; 0x28
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
    319e:	6891      	ldr	r1, [r2, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
    31a0:	68d2      	ldr	r2, [r2, #12]
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
    31a2:	63a1      	str	r1, [r4, #56]	; 0x38
			ctx->tx_len = ctx->current_tx->len / dfs;
    31a4:	63e2      	str	r2, [r4, #60]	; 0x3c
	LOG_DBG("tx buf/len %p/%zu", ctx->tx_buf, ctx->tx_len);
    31a6:	f043 0304 	orr.w	r3, r3, #4
    31aa:	f8ad 3000 	strh.w	r3, [sp]
    31ae:	491a      	ldr	r1, [pc, #104]	; (3218 <event_handler+0xe8>)
    31b0:	481a      	ldr	r0, [pc, #104]	; (321c <event_handler+0xec>)
    31b2:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
    31b6:	f002 fed4 	bl	5f62 <log_3>
    31ba:	e7cf      	b.n	315c <event_handler+0x2c>
	} else if (ctx->tx_buf) {
    31bc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    31be:	2a00      	cmp	r2, #0
    31c0:	d0f1      	beq.n	31a6 <event_handler+0x76>
		ctx->tx_buf += dfs * len;
    31c2:	4402      	add	r2, r0
    31c4:	63a2      	str	r2, [r4, #56]	; 0x38
    31c6:	e7ee      	b.n	31a6 <event_handler+0x76>
	ctx->rx_len -= len;
    31c8:	1a12      	subs	r2, r2, r0
    31ca:	6462      	str	r2, [r4, #68]	; 0x44
	if (!ctx->rx_len) {
    31cc:	b9b2      	cbnz	r2, 31fc <event_handler+0xcc>
		ctx->rx_count--;
    31ce:	6b62      	ldr	r2, [r4, #52]	; 0x34
    31d0:	3a01      	subs	r2, #1
    31d2:	6362      	str	r2, [r4, #52]	; 0x34
		if (ctx->rx_count) {
    31d4:	b1b2      	cbz	r2, 3204 <event_handler+0xd4>
			ctx->current_rx++;
    31d6:	6b22      	ldr	r2, [r4, #48]	; 0x30
    31d8:	f102 0108 	add.w	r1, r2, #8
    31dc:	6321      	str	r1, [r4, #48]	; 0x30
			ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
    31de:	6891      	ldr	r1, [r2, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
    31e0:	68d2      	ldr	r2, [r2, #12]
			ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
    31e2:	6421      	str	r1, [r4, #64]	; 0x40
			ctx->rx_len = ctx->current_rx->len / dfs;
    31e4:	6462      	str	r2, [r4, #68]	; 0x44
	LOG_DBG("rx buf/len %p/%zu", ctx->rx_buf, ctx->rx_len);
    31e6:	f043 0304 	orr.w	r3, r3, #4
    31ea:	f8ad 3000 	strh.w	r3, [sp]
    31ee:	490c      	ldr	r1, [pc, #48]	; (3220 <event_handler+0xf0>)
    31f0:	480c      	ldr	r0, [pc, #48]	; (3224 <event_handler+0xf4>)
    31f2:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
    31f6:	f002 feb4 	bl	5f62 <log_3>
    31fa:	e7bf      	b.n	317c <event_handler+0x4c>
	} else if (ctx->rx_buf) {
    31fc:	6c22      	ldr	r2, [r4, #64]	; 0x40
    31fe:	2a00      	cmp	r2, #0
    3200:	d0f1      	beq.n	31e6 <event_handler+0xb6>
		ctx->rx_buf += dfs * len;
    3202:	4402      	add	r2, r0
    3204:	6422      	str	r2, [r4, #64]	; 0x40
    3206:	e7ee      	b.n	31e6 <event_handler+0xb6>
}
    3208:	b003      	add	sp, #12
    320a:	bd30      	pop	{r4, r5, pc}
    320c:	00006d78 	.word	0x00006d78
    3210:	00006d40 	.word	0x00006d40
    3214:	00007e9d 	.word	0x00007e9d
    3218:	00007f15 	.word	0x00007f15
    321c:	00007ebb 	.word	0x00007ebb
    3220:	00007f2b 	.word	0x00007f2b
    3224:	00007ed1 	.word	0x00007ed1

00003228 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
    3228:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    322a:	794b      	ldrb	r3, [r1, #5]
    322c:	2b01      	cmp	r3, #1
    322e:	d02b      	beq.n	3288 <uarte_nrfx_configure+0x60>
    3230:	2b03      	cmp	r3, #3
    3232:	d126      	bne.n	3282 <uarte_nrfx_configure+0x5a>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    3234:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    3236:	798b      	ldrb	r3, [r1, #6]
    3238:	2b03      	cmp	r3, #3
    323a:	d122      	bne.n	3282 <uarte_nrfx_configure+0x5a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    323c:	79cd      	ldrb	r5, [r1, #7]
    323e:	b125      	cbz	r5, 324a <uarte_nrfx_configure+0x22>
    3240:	2d01      	cmp	r5, #1
    3242:	d11e      	bne.n	3282 <uarte_nrfx_configure+0x5a>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    3244:	6843      	ldr	r3, [r0, #4]
    3246:	791b      	ldrb	r3, [r3, #4]
    3248:	b1db      	cbz	r3, 3282 <uarte_nrfx_configure+0x5a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    324a:	790a      	ldrb	r2, [r1, #4]
    324c:	2a01      	cmp	r2, #1
    324e:	d01d      	beq.n	328c <uarte_nrfx_configure+0x64>
    3250:	2a02      	cmp	r2, #2
    3252:	d01f      	beq.n	3294 <uarte_nrfx_configure+0x6c>
    3254:	b9aa      	cbnz	r2, 3282 <uarte_nrfx_configure+0x5a>
    3256:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    3258:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    325a:	6846      	ldr	r6, [r0, #4]
	switch (baudrate) {
    325c:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    3260:	6836      	ldr	r6, [r6, #0]
	switch (baudrate) {
    3262:	d06d      	beq.n	3340 <uarte_nrfx_configure+0x118>
    3264:	d833      	bhi.n	32ce <uarte_nrfx_configure+0xa6>
    3266:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    326a:	d06c      	beq.n	3346 <uarte_nrfx_configure+0x11e>
    326c:	d81c      	bhi.n	32a8 <uarte_nrfx_configure+0x80>
    326e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    3272:	d06a      	beq.n	334a <uarte_nrfx_configure+0x122>
    3274:	d810      	bhi.n	3298 <uarte_nrfx_configure+0x70>
    3276:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    327a:	d069      	beq.n	3350 <uarte_nrfx_configure+0x128>
    327c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    3280:	d069      	beq.n	3356 <uarte_nrfx_configure+0x12e>
    3282:	f06f 0022 	mvn.w	r0, #34	; 0x22
    3286:	e05a      	b.n	333e <uarte_nrfx_configure+0x116>
	switch (cfg->stop_bits) {
    3288:	2700      	movs	r7, #0
    328a:	e7d4      	b.n	3236 <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    328c:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    3290:	220e      	movs	r2, #14
    3292:	e7e1      	b.n	3258 <uarte_nrfx_configure+0x30>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    3294:	2400      	movs	r4, #0
    3296:	e7fb      	b.n	3290 <uarte_nrfx_configure+0x68>
	switch (baudrate) {
    3298:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    329c:	d05e      	beq.n	335c <uarte_nrfx_configure+0x134>
    329e:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    32a2:	d1ee      	bne.n	3282 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    32a4:	4b38      	ldr	r3, [pc, #224]	; (3388 <uarte_nrfx_configure+0x160>)
    32a6:	e03e      	b.n	3326 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    32a8:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    32ac:	d059      	beq.n	3362 <uarte_nrfx_configure+0x13a>
    32ae:	d807      	bhi.n	32c0 <uarte_nrfx_configure+0x98>
    32b0:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    32b4:	d057      	beq.n	3366 <uarte_nrfx_configure+0x13e>
    32b6:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    32ba:	d1e2      	bne.n	3282 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    32bc:	4b33      	ldr	r3, [pc, #204]	; (338c <uarte_nrfx_configure+0x164>)
    32be:	e032      	b.n	3326 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    32c0:	f647 2c12 	movw	ip, #31250	; 0x7a12
    32c4:	4563      	cmp	r3, ip
    32c6:	d1dc      	bne.n	3282 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    32c8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    32cc:	e02b      	b.n	3326 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    32ce:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    32d2:	d04a      	beq.n	336a <uarte_nrfx_configure+0x142>
    32d4:	d813      	bhi.n	32fe <uarte_nrfx_configure+0xd6>
    32d6:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    32da:	d049      	beq.n	3370 <uarte_nrfx_configure+0x148>
    32dc:	d809      	bhi.n	32f2 <uarte_nrfx_configure+0xca>
    32de:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
    32e2:	4563      	cmp	r3, ip
    32e4:	d046      	beq.n	3374 <uarte_nrfx_configure+0x14c>
    32e6:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    32ea:	d1ca      	bne.n	3282 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    32ec:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    32f0:	e019      	b.n	3326 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    32f2:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    32f6:	d1c4      	bne.n	3282 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    32f8:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    32fc:	e013      	b.n	3326 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    32fe:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    3302:	d03a      	beq.n	337a <uarte_nrfx_configure+0x152>
    3304:	d809      	bhi.n	331a <uarte_nrfx_configure+0xf2>
    3306:	f8df c098 	ldr.w	ip, [pc, #152]	; 33a0 <uarte_nrfx_configure+0x178>
    330a:	4563      	cmp	r3, ip
    330c:	d038      	beq.n	3380 <uarte_nrfx_configure+0x158>
    330e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    3312:	d1b6      	bne.n	3282 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    3314:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    3318:	e005      	b.n	3326 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    331a:	f8df c088 	ldr.w	ip, [pc, #136]	; 33a4 <uarte_nrfx_configure+0x17c>
    331e:	4563      	cmp	r3, ip
    3320:	d1af      	bne.n	3282 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    3322:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    3326:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
    332a:	432c      	orrs	r4, r5
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    332c:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->stop
    332e:	433a      	orrs	r2, r7
                    | (uint32_t)p_cfg->hwfc;
    3330:	4322      	orrs	r2, r4
    3332:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    3334:	f8c6 256c 	str.w	r2, [r6, #1388]	; 0x56c
    3338:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    333c:	2000      	movs	r0, #0
}
    333e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    3340:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    3344:	e7ef      	b.n	3326 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    3346:	4b12      	ldr	r3, [pc, #72]	; (3390 <uarte_nrfx_configure+0x168>)
    3348:	e7ed      	b.n	3326 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    334a:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    334e:	e7ea      	b.n	3326 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = 0x00014000;
    3350:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    3354:	e7e7      	b.n	3326 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    3356:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    335a:	e7e4      	b.n	3326 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    335c:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    3360:	e7e1      	b.n	3326 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    3362:	4b0c      	ldr	r3, [pc, #48]	; (3394 <uarte_nrfx_configure+0x16c>)
    3364:	e7df      	b.n	3326 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    3366:	4b0c      	ldr	r3, [pc, #48]	; (3398 <uarte_nrfx_configure+0x170>)
    3368:	e7dd      	b.n	3326 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    336a:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    336e:	e7da      	b.n	3326 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    3370:	4b0a      	ldr	r3, [pc, #40]	; (339c <uarte_nrfx_configure+0x174>)
    3372:	e7d8      	b.n	3326 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    3374:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    3378:	e7d5      	b.n	3326 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    337a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    337e:	e7d2      	b.n	3326 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    3380:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    3384:	e7cf      	b.n	3326 <uarte_nrfx_configure+0xfe>
    3386:	bf00      	nop
    3388:	0013b000 	.word	0x0013b000
    338c:	004ea000 	.word	0x004ea000
    3390:	00275000 	.word	0x00275000
    3394:	0075c000 	.word	0x0075c000
    3398:	003af000 	.word	0x003af000
    339c:	013a9000 	.word	0x013a9000
    33a0:	0003d090 	.word	0x0003d090
    33a4:	000f4240 	.word	0x000f4240

000033a8 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    33a8:	6802      	ldr	r2, [r0, #0]
{
    33aa:	b510      	push	{r4, lr}
    switch (port)
    33ac:	0953      	lsrs	r3, r2, #5
{
    33ae:	4604      	mov	r4, r0
    switch (port)
    33b0:	d01e      	beq.n	33f0 <nrf_gpio_pin_port_decode+0x48>
    33b2:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    33b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    33b8:	bf18      	it	ne
    33ba:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    33bc:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    33c0:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    33c2:	07db      	lsls	r3, r3, #31
    33c4:	d40b      	bmi.n	33de <nrf_gpio_pin_port_decode+0x36>
    33c6:	490c      	ldr	r1, [pc, #48]	; (33f8 <nrf_gpio_pin_port_decode+0x50>)
    33c8:	480c      	ldr	r0, [pc, #48]	; (33fc <nrf_gpio_pin_port_decode+0x54>)
    33ca:	f240 230d 	movw	r3, #525	; 0x20d
    33ce:	4a0c      	ldr	r2, [pc, #48]	; (3400 <nrf_gpio_pin_port_decode+0x58>)
    33d0:	f002 fc8f 	bl	5cf2 <printk>
    33d4:	f240 210d 	movw	r1, #525	; 0x20d
    33d8:	4809      	ldr	r0, [pc, #36]	; (3400 <nrf_gpio_pin_port_decode+0x58>)
    33da:	f002 fd58 	bl	5e8e <assert_post_action>
    if (*p_pin < P0_PIN_NUM)
    33de:	6823      	ldr	r3, [r4, #0]
    33e0:	2b1f      	cmp	r3, #31
        *p_pin = *p_pin & 0x1F;
    33e2:	bf85      	ittet	hi
    33e4:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
    33e8:	4806      	ldrhi	r0, [pc, #24]	; (3404 <nrf_gpio_pin_port_decode+0x5c>)
        return NRF_P0;
    33ea:	4807      	ldrls	r0, [pc, #28]	; (3408 <nrf_gpio_pin_port_decode+0x60>)
        *p_pin = *p_pin & 0x1F;
    33ec:	6023      	strhi	r3, [r4, #0]
}
    33ee:	bd10      	pop	{r4, pc}
    switch (port)
    33f0:	f04f 33ff 	mov.w	r3, #4294967295
    33f4:	e7e2      	b.n	33bc <nrf_gpio_pin_port_decode+0x14>
    33f6:	bf00      	nop
    33f8:	00007bb2 	.word	0x00007bb2
    33fc:	00006f74 	.word	0x00006f74
    3400:	00007b7f 	.word	0x00007b7f
    3404:	50842800 	.word	0x50842800
    3408:	50842500 	.word	0x50842500

0000340c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    340c:	b508      	push	{r3, lr}
	z_impl_log_panic();
    340e:	f7fd fd7d 	bl	f0c <z_impl_log_panic>
    3412:	4b06      	ldr	r3, [pc, #24]	; (342c <k_sys_fatal_error_handler+0x20>)
    3414:	4906      	ldr	r1, [pc, #24]	; (3430 <k_sys_fatal_error_handler+0x24>)
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
    3416:	4807      	ldr	r0, [pc, #28]	; (3434 <k_sys_fatal_error_handler+0x28>)
    3418:	1ac9      	subs	r1, r1, r3
    341a:	08c9      	lsrs	r1, r1, #3
    341c:	0189      	lsls	r1, r1, #6
    341e:	f041 0101 	orr.w	r1, r1, #1
    3422:	f002 fd64 	bl	5eee <log_0>
	sys_arch_reboot(0);
    3426:	2000      	movs	r0, #0
    3428:	f7fe ff9e 	bl	2368 <sys_arch_reboot>

	CODE_UNREACHABLE;
    342c:	00006d40 	.word	0x00006d40
    3430:	00006d48 	.word	0x00006d48
    3434:	00007f65 	.word	0x00007f65

00003438 <nrf53_errata_42>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA_APPLICATION) || defined (DEVELOP_IN_NRF5340_APPLICATION)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    3438:	4b05      	ldr	r3, [pc, #20]	; (3450 <nrf53_errata_42+0x18>)
    343a:	6818      	ldr	r0, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    343c:	3b04      	subs	r3, #4
        #endif
        #if defined (NRF5340_XXAA_APPLICATION) || defined (DEVELOP_IN_NRF5340_APPLICATION)
            if (var1 == 0x07)
    343e:	681b      	ldr	r3, [r3, #0]
    3440:	2b07      	cmp	r3, #7
    3442:	d103      	bne.n	344c <nrf53_errata_42+0x14>
            {
                switch(var2)
    3444:	1e83      	subs	r3, r0, #2
    3446:	4258      	negs	r0, r3
    3448:	4158      	adcs	r0, r3
    344a:	4770      	bx	lr
                    case 0x03ul:
                        return false;
                }
            }
        #endif
        return false;
    344c:	2000      	movs	r0, #0
    #endif
}
    344e:	4770      	bx	lr
    3450:	00ff0134 	.word	0x00ff0134

00003454 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
    3454:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3458:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
    345c:	4b03      	ldr	r3, [pc, #12]	; (346c <SystemCoreClockUpdate+0x18>)
    345e:	f002 0201 	and.w	r2, r2, #1
    3462:	40d3      	lsrs	r3, r2
    3464:	4a02      	ldr	r2, [pc, #8]	; (3470 <SystemCoreClockUpdate+0x1c>)
    3466:	6013      	str	r3, [r2, #0]
#endif
}
    3468:	4770      	bx	lr
    346a:	bf00      	nop
    346c:	07a12000 	.word	0x07a12000
    3470:	2000006c 	.word	0x2000006c

00003474 <SystemInit>:

void SystemInit(void)
{
    3474:	b508      	push	{r3, lr}
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    3476:	f7ff ffdf 	bl	3438 <nrf53_errata_42>
    347a:	b148      	cbz	r0, 3490 <SystemInit+0x1c>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    347c:	4b33      	ldr	r3, [pc, #204]	; (354c <SystemInit+0xd8>)
    347e:	681a      	ldr	r2, [r3, #0]
    3480:	b932      	cbnz	r2, 3490 <SystemInit+0x1c>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    3482:	210d      	movs	r1, #13
    3484:	6019      	str	r1, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    3486:	2101      	movs	r1, #1
    3488:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    348c:	6019      	str	r1, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    348e:	601a      	str	r2, [r3, #0]
{
    3490:	2200      	movs	r2, #0
    3492:	00d3      	lsls	r3, r2, #3
    3494:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    3498:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    349c:	3101      	adds	r1, #1
    349e:	d007      	beq.n	34b0 <SystemInit+0x3c>
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    34a0:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    34a4:	3201      	adds	r2, #1
            *NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    34a6:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    34aa:	2a20      	cmp	r2, #32
            *NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    34ac:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    34ae:	d1f0      	bne.n	3492 <SystemInit+0x1e>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    34b0:	f7ff ffc2 	bl	3438 <nrf53_errata_42>
    34b4:	2800      	cmp	r0, #0
    34b6:	d142      	bne.n	353e <SystemInit+0xca>
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    34b8:	f7ff ffbe 	bl	3438 <nrf53_errata_42>
    34bc:	b138      	cbz	r0, 34ce <SystemInit+0x5a>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    34be:	4b24      	ldr	r3, [pc, #144]	; (3550 <SystemInit+0xdc>)
    34c0:	4a24      	ldr	r2, [pc, #144]	; (3554 <SystemInit+0xe0>)
    34c2:	601a      	str	r2, [r3, #0]
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    34c4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    34c8:	2201      	movs	r2, #1
    34ca:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
    34ce:	f7ff ffb3 	bl	3438 <nrf53_errata_42>
    34d2:	b110      	cbz	r0, 34da <SystemInit+0x66>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    34d4:	2200      	movs	r2, #0
    34d6:	4b20      	ldr	r3, [pc, #128]	; (3558 <SystemInit+0xe4>)
    34d8:	601a      	str	r2, [r3, #0]
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    34da:	f7ff ffad 	bl	3438 <nrf53_errata_42>
    34de:	b150      	cbz	r0, 34f6 <SystemInit+0x82>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    34e0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    34e4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    34e8:	07d1      	lsls	r1, r2, #31
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    34ea:	bf42      	ittt	mi
    34ec:	2200      	movmi	r2, #0
    34ee:	f8c3 2114 	strmi.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    34f2:	f8c3 2118 	strmi.w	r2, [r3, #280]	; 0x118
        return false;
    #else
        #if defined (NRF5340_XXAA_APPLICATION) || defined (DEVELOP_IN_NRF5340_APPLICATION)\
         || defined (NRF5340_XXAA_NETWORK) || defined (DEVELOP_IN_NRF5340_NETWORK)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    34f6:	4b19      	ldr	r3, [pc, #100]	; (355c <SystemInit+0xe8>)
                uint32_t var2 = *(uint32_t *)0x01FF0134ul;
            #endif
        #endif
        #if defined (NRF5340_XXAA_APPLICATION) || defined (DEVELOP_IN_NRF5340_APPLICATION)\
         || defined (NRF5340_XXAA_NETWORK) || defined (DEVELOP_IN_NRF5340_NETWORK)
            if (var1 == 0x07)
    34f8:	681b      	ldr	r3, [r3, #0]
    34fa:	2b07      	cmp	r3, #7
    34fc:	d10e      	bne.n	351c <SystemInit+0xa8>
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    34fe:	4b18      	ldr	r3, [pc, #96]	; (3560 <SystemInit+0xec>)
            {
                switch(var2)
    3500:	681b      	ldr	r3, [r3, #0]
    3502:	3b02      	subs	r3, #2
    3504:	2b01      	cmp	r3, #1
    3506:	d809      	bhi.n	351c <SystemInit+0xa8>

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    3508:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    350c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    3510:	07d2      	lsls	r2, r2, #31
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    3512:	bf44      	itt	mi
    3514:	f06f 0201 	mvnmi.w	r2, #1
    3518:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    351c:	f7ff ff8c 	bl	3438 <nrf53_errata_42>
    3520:	b110      	cbz	r0, 3528 <SystemInit+0xb4>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    3522:	2265      	movs	r2, #101	; 0x65
    3524:	4b0f      	ldr	r3, [pc, #60]	; (3564 <SystemInit+0xf0>)
    3526:	601a      	str	r2, [r3, #0]

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    3528:	4a0f      	ldr	r2, [pc, #60]	; (3568 <SystemInit+0xf4>)
    352a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    352e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    3532:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
}
    3536:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SystemCoreClockUpdate();
    353a:	f7ff bf8b 	b.w	3454 <SystemCoreClockUpdate>
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    353e:	2229      	movs	r2, #41	; 0x29
    3540:	4b08      	ldr	r3, [pc, #32]	; (3564 <SystemInit+0xf0>)
    3542:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    3544:	2203      	movs	r2, #3
    3546:	631a      	str	r2, [r3, #48]	; 0x30
    3548:	e7b6      	b.n	34b8 <SystemInit+0x44>
    354a:	bf00      	nop
    354c:	50004a20 	.word	0x50004a20
    3550:	50039530 	.word	0x50039530
    3554:	beef0044 	.word	0xbeef0044
    3558:	5003254c 	.word	0x5003254c
    355c:	00ff0130 	.word	0x00ff0130
    3560:	00ff0134 	.word	0x00ff0134
    3564:	5000470c 	.word	0x5000470c
    3568:	e000ed00 	.word	0xe000ed00

0000356c <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    356c:	6802      	ldr	r2, [r0, #0]
{
    356e:	b510      	push	{r4, lr}
    switch (port)
    3570:	0953      	lsrs	r3, r2, #5
{
    3572:	4604      	mov	r4, r0
    switch (port)
    3574:	d01e      	beq.n	35b4 <nrf_gpio_pin_port_decode+0x48>
    3576:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    3578:	f64f 73ff 	movw	r3, #65535	; 0xffff
    357c:	bf18      	it	ne
    357e:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    3580:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3584:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3586:	07db      	lsls	r3, r3, #31
    3588:	d40b      	bmi.n	35a2 <nrf_gpio_pin_port_decode+0x36>
    358a:	490c      	ldr	r1, [pc, #48]	; (35bc <nrf_gpio_pin_port_decode+0x50>)
    358c:	480c      	ldr	r0, [pc, #48]	; (35c0 <nrf_gpio_pin_port_decode+0x54>)
    358e:	f240 230d 	movw	r3, #525	; 0x20d
    3592:	4a0c      	ldr	r2, [pc, #48]	; (35c4 <nrf_gpio_pin_port_decode+0x58>)
    3594:	f002 fbad 	bl	5cf2 <printk>
    3598:	f240 210d 	movw	r1, #525	; 0x20d
    359c:	4809      	ldr	r0, [pc, #36]	; (35c4 <nrf_gpio_pin_port_decode+0x58>)
    359e:	f002 fc76 	bl	5e8e <assert_post_action>
    if (*p_pin < P0_PIN_NUM)
    35a2:	6823      	ldr	r3, [r4, #0]
    35a4:	2b1f      	cmp	r3, #31
        *p_pin = *p_pin & 0x1F;
    35a6:	bf85      	ittet	hi
    35a8:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
    35ac:	4806      	ldrhi	r0, [pc, #24]	; (35c8 <nrf_gpio_pin_port_decode+0x5c>)
        return NRF_P0;
    35ae:	4807      	ldrls	r0, [pc, #28]	; (35cc <nrf_gpio_pin_port_decode+0x60>)
        *p_pin = *p_pin & 0x1F;
    35b0:	6023      	strhi	r3, [r4, #0]
}
    35b2:	bd10      	pop	{r4, pc}
    switch (port)
    35b4:	f04f 33ff 	mov.w	r3, #4294967295
    35b8:	e7e2      	b.n	3580 <nrf_gpio_pin_port_decode+0x14>
    35ba:	bf00      	nop
    35bc:	00007bb2 	.word	0x00007bb2
    35c0:	00006f74 	.word	0x00006f74
    35c4:	00007b7f 	.word	0x00007b7f
    35c8:	50842800 	.word	0x50842800
    35cc:	50842500 	.word	0x50842500

000035d0 <irq_handler.part.0>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    35d0:	2300      	movs	r3, #0
{
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    return nrf_spim_event_address_get(p_spim, NRF_SPIM_EVENT_END);
}

static void irq_handler(NRF_SPIM_Type * p_spim, spim_control_block_t * p_cb)
    35d2:	b510      	push	{r4, lr}
    35d4:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
        {
            anomaly_198_disable();
        }
#endif
        nrf_spim_event_clear(p_spim, NRF_SPIM_EVENT_END);
        NRFX_ASSERT(p_cb->handler);
    35d8:	680b      	ldr	r3, [r1, #0]
static void irq_handler(NRF_SPIM_Type * p_spim, spim_control_block_t * p_cb)
    35da:	460c      	mov	r4, r1
        NRFX_ASSERT(p_cb->handler);
    35dc:	b95b      	cbnz	r3, 35f6 <irq_handler.part.0+0x26>
    35de:	4910      	ldr	r1, [pc, #64]	; (3620 <irq_handler.part.0+0x50>)
    35e0:	4810      	ldr	r0, [pc, #64]	; (3624 <irq_handler.part.0+0x54>)
    35e2:	f240 23ff 	movw	r3, #767	; 0x2ff
    35e6:	4a10      	ldr	r2, [pc, #64]	; (3628 <irq_handler.part.0+0x58>)
    35e8:	f002 fb83 	bl	5cf2 <printk>
    35ec:	f240 21ff 	movw	r1, #767	; 0x2ff
    35f0:	480d      	ldr	r0, [pc, #52]	; (3628 <irq_handler.part.0+0x58>)
    35f2:	f002 fc4c 	bl	5e8e <assert_post_action>
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    35f6:	7fe0      	ldrb	r0, [r4, #31]
    35f8:	28ff      	cmp	r0, #255	; 0xff
    35fa:	d003      	beq.n	3604 <irq_handler.part.0+0x34>
            if (p_cb->ss_active_high)
    35fc:	7fa3      	ldrb	r3, [r4, #30]
    35fe:	b15b      	cbz	r3, 3618 <irq_handler.part.0+0x48>
                nrf_gpio_pin_clear(p_cb->ss_pin);
    3600:	f003 f9b8 	bl	6974 <nrf_gpio_pin_clear>
    p_cb->transfer_in_progress = false;
    3604:	2300      	movs	r3, #0
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    3606:	4620      	mov	r0, r4
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
    3608:	7223      	strb	r3, [r4, #8]
    p_cb->transfer_in_progress = false;
    360a:	7763      	strb	r3, [r4, #29]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    360c:	6861      	ldr	r1, [r4, #4]
    360e:	f850 3b08 	ldr.w	r3, [r0], #8
        NRFX_LOG_DEBUG("Event: NRF_SPIM_EVENT_END.");
        finish_transfer(p_cb);
    }
}
    3612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    3616:	4718      	bx	r3
                nrf_gpio_pin_set(p_cb->ss_pin);
    3618:	f003 f9b8 	bl	698c <nrf_gpio_pin_set>
    361c:	e7f2      	b.n	3604 <irq_handler.part.0+0x34>
    361e:	bf00      	nop
    3620:	00007fbe 	.word	0x00007fbe
    3624:	00006f74 	.word	0x00006f74
    3628:	00007f82 	.word	0x00007f82

0000362c <nrfx_spim_init>:
{
    362c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3630:	4681      	mov	r9, r0
    3632:	4692      	mov	sl, r2
    3634:	4698      	mov	r8, r3
    NRFX_ASSERT(p_config);
    3636:	460c      	mov	r4, r1
    3638:	b949      	cbnz	r1, 364e <nrfx_spim_init+0x22>
    363a:	4958      	ldr	r1, [pc, #352]	; (379c <nrfx_spim_init+0x170>)
    363c:	4858      	ldr	r0, [pc, #352]	; (37a0 <nrfx_spim_init+0x174>)
    363e:	23ff      	movs	r3, #255	; 0xff
    3640:	4a58      	ldr	r2, [pc, #352]	; (37a4 <nrfx_spim_init+0x178>)
    3642:	f002 fb56 	bl	5cf2 <printk>
    3646:	21ff      	movs	r1, #255	; 0xff
    3648:	4856      	ldr	r0, [pc, #344]	; (37a4 <nrfx_spim_init+0x178>)
    364a:	f002 fc20 	bl	5e8e <assert_post_action>
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    364e:	2124      	movs	r1, #36	; 0x24
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    3650:	f899 5004 	ldrb.w	r5, [r9, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    3654:	4e54      	ldr	r6, [pc, #336]	; (37a8 <nrfx_spim_init+0x17c>)
    3656:	4369      	muls	r1, r5
    3658:	1873      	adds	r3, r6, r1
    365a:	7f1a      	ldrb	r2, [r3, #28]
    365c:	2a00      	cmp	r2, #0
    365e:	f040 809b 	bne.w	3798 <nrfx_spim_init+0x16c>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    3662:	f8d9 7000 	ldr.w	r7, [r9]
    p_cb->handler = handler;
    3666:	f846 a001 	str.w	sl, [r6, r1]
    p_cb->p_context = p_context;
    366a:	f8c3 8004 	str.w	r8, [r3, #4]
    if (p_config->mode <= NRF_SPIM_MODE_1)
    366e:	7b23      	ldrb	r3, [r4, #12]
    3670:	7820      	ldrb	r0, [r4, #0]
    3672:	2b01      	cmp	r3, #1
    3674:	d87e      	bhi.n	3774 <nrfx_spim_init+0x148>
        nrf_gpio_pin_clear(p_config->sck_pin);
    3676:	f003 f97d 	bl	6974 <nrf_gpio_pin_clear>
    nrf_gpio_cfg(p_config->sck_pin,
    367a:	7823      	ldrb	r3, [r4, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    367c:	a801      	add	r0, sp, #4
    367e:	9301      	str	r3, [sp, #4]
    3680:	f7ff ff74 	bl	356c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    3684:	2201      	movs	r2, #1
    3686:	9b01      	ldr	r3, [sp, #4]
    3688:	3380      	adds	r3, #128	; 0x80
    368a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    368e:	f894 8001 	ldrb.w	r8, [r4, #1]
    3692:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    3696:	d070      	beq.n	377a <nrfx_spim_init+0x14e>
        nrf_gpio_pin_clear(mosi_pin);
    3698:	4640      	mov	r0, r8
    369a:	f003 f96b 	bl	6974 <nrf_gpio_pin_clear>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    369e:	a801      	add	r0, sp, #4
    36a0:	f8cd 8004 	str.w	r8, [sp, #4]
    36a4:	f7ff ff62 	bl	356c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    36a8:	2203      	movs	r2, #3
    36aa:	9b01      	ldr	r3, [sp, #4]
    36ac:	3380      	adds	r3, #128	; 0x80
    36ae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    36b2:	f894 a002 	ldrb.w	sl, [r4, #2]
    36b6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    36ba:	d061      	beq.n	3780 <nrfx_spim_init+0x154>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    36bc:	a801      	add	r0, sp, #4
        nrf_gpio_cfg_input(miso_pin, p_config->miso_pull);
    36be:	f894 b00e 	ldrb.w	fp, [r4, #14]
    nrf_gpio_cfg(
    36c2:	f8cd a004 	str.w	sl, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    36c6:	f7ff ff51 	bl	356c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    36ca:	9b01      	ldr	r3, [sp, #4]
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
    36cc:	ea4f 028b 	mov.w	r2, fp, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    36d0:	3380      	adds	r3, #128	; 0x80
    36d2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    p_cb->ss_pin = p_config->ss_pin;
    36d6:	2324      	movs	r3, #36	; 0x24
    36d8:	fb03 6305 	mla	r3, r3, r5, r6
    36dc:	78e0      	ldrb	r0, [r4, #3]
    if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    36de:	28ff      	cmp	r0, #255	; 0xff
    p_cb->ss_pin = p_config->ss_pin;
    36e0:	77d8      	strb	r0, [r3, #31]
    if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    36e2:	d013      	beq.n	370c <nrfx_spim_init+0xe0>
        if (p_config->ss_active_high)
    36e4:	7923      	ldrb	r3, [r4, #4]
    36e6:	2b00      	cmp	r3, #0
    36e8:	d04d      	beq.n	3786 <nrfx_spim_init+0x15a>
            nrf_gpio_pin_clear(p_config->ss_pin);
    36ea:	f003 f943 	bl	6974 <nrf_gpio_pin_clear>
        nrf_gpio_cfg_output(p_config->ss_pin);
    36ee:	78e3      	ldrb	r3, [r4, #3]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    36f0:	a801      	add	r0, sp, #4
    36f2:	9301      	str	r3, [sp, #4]
    36f4:	f7ff ff3a 	bl	356c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    36f8:	2203      	movs	r2, #3
    36fa:	9b01      	ldr	r3, [sp, #4]
    36fc:	3380      	adds	r3, #128	; 0x80
    36fe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        p_cb->ss_active_high = p_config->ss_active_high;
    3702:	2324      	movs	r3, #36	; 0x24
    3704:	fb03 6305 	mla	r3, r3, r5, r6
    3708:	7922      	ldrb	r2, [r4, #4]
    370a:	779a      	strb	r2, [r3, #30]
    nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
    370c:	7823      	ldrb	r3, [r4, #0]
    p_reg->PSEL.SCK  = sck_pin;
    370e:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
    p_reg->FREQUENCY = (uint32_t)frequency;
    3712:	68a3      	ldr	r3, [r4, #8]
    p_reg->PSEL.MOSI = mosi_pin;
    3714:	f8c7 850c 	str.w	r8, [r7, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
    3718:	f8c7 a510 	str.w	sl, [r7, #1296]	; 0x510
    p_reg->FREQUENCY = (uint32_t)frequency;
    371c:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
    3720:	7b63      	ldrb	r3, [r4, #13]
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
    3722:	7b22      	ldrb	r2, [r4, #12]
    3724:	3b00      	subs	r3, #0
    3726:	bf18      	it	ne
    3728:	2301      	movne	r3, #1
    switch (spi_mode)
    372a:	2a02      	cmp	r2, #2
    372c:	d02e      	beq.n	378c <nrfx_spim_init+0x160>
    372e:	2a03      	cmp	r2, #3
    3730:	d02f      	beq.n	3792 <nrfx_spim_init+0x166>
    3732:	2a01      	cmp	r2, #1
    3734:	d101      	bne.n	373a <nrfx_spim_init+0x10e>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
    3736:	f043 0302 	orr.w	r3, r3, #2
    p_reg->CONFIG = config;
    373a:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
    373e:	79a3      	ldrb	r3, [r4, #6]
    3740:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
    3744:	2307      	movs	r3, #7
    3746:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
    if (p_cb->handler)
    374a:	2324      	movs	r3, #36	; 0x24
    374c:	436b      	muls	r3, r5
    374e:	58f3      	ldr	r3, [r6, r3]
    3750:	b12b      	cbz	r3, 375e <nrfx_spim_init+0x132>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    3752:	f8d9 0000 	ldr.w	r0, [r9]
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    3756:	f340 3007 	sbfx	r0, r0, #12, #8
    375a:	f7fe fa55 	bl	1c08 <arch_irq_enable>
    p_cb->transfer_in_progress = false;
    375e:	2324      	movs	r3, #36	; 0x24
    3760:	fb03 6505 	mla	r5, r3, r5, r6
    3764:	2300      	movs	r3, #0
    3766:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    3768:	2301      	movs	r3, #1
    return err_code;
    376a:	4810      	ldr	r0, [pc, #64]	; (37ac <nrfx_spim_init+0x180>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    376c:	772b      	strb	r3, [r5, #28]
}
    376e:	b003      	add	sp, #12
    3770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        nrf_gpio_pin_set(p_config->sck_pin);
    3774:	f003 f90a 	bl	698c <nrf_gpio_pin_set>
    3778:	e77f      	b.n	367a <nrfx_spim_init+0x4e>
        mosi_pin = NRF_SPIM_PIN_NOT_CONNECTED;
    377a:	f04f 38ff 	mov.w	r8, #4294967295
    377e:	e798      	b.n	36b2 <nrfx_spim_init+0x86>
        miso_pin = NRF_SPIM_PIN_NOT_CONNECTED;
    3780:	f04f 3aff 	mov.w	sl, #4294967295
    3784:	e7a7      	b.n	36d6 <nrfx_spim_init+0xaa>
            nrf_gpio_pin_set(p_config->ss_pin);
    3786:	f003 f901 	bl	698c <nrf_gpio_pin_set>
    378a:	e7b0      	b.n	36ee <nrfx_spim_init+0xc2>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    378c:	f043 0304 	orr.w	r3, r3, #4
        break;
    3790:	e7d3      	b.n	373a <nrfx_spim_init+0x10e>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    3792:	f043 0306 	orr.w	r3, r3, #6
        break;
    3796:	e7d0      	b.n	373a <nrfx_spim_init+0x10e>
        return err_code;
    3798:	4805      	ldr	r0, [pc, #20]	; (37b0 <nrfx_spim_init+0x184>)
    379a:	e7e8      	b.n	376e <nrfx_spim_init+0x142>
    379c:	00007fcc 	.word	0x00007fcc
    37a0:	00006f74 	.word	0x00006f74
    37a4:	00007f82 	.word	0x00007f82
    37a8:	20000290 	.word	0x20000290
    37ac:	0bad0000 	.word	0x0bad0000
    37b0:	0bad0005 	.word	0x0bad0005

000037b4 <nrfx_spim_xfer>:
{
    37b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    37b8:	2324      	movs	r3, #36	; 0x24
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    37ba:	7906      	ldrb	r6, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    37bc:	4f6f      	ldr	r7, [pc, #444]	; (397c <nrfx_spim_xfer+0x1c8>)
{
    37be:	4680      	mov	r8, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    37c0:	fb03 7306 	mla	r3, r3, r6, r7
    37c4:	7f1b      	ldrb	r3, [r3, #28]
{
    37c6:	460c      	mov	r4, r1
    37c8:	4615      	mov	r5, r2
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    37ca:	b95b      	cbnz	r3, 37e4 <nrfx_spim_xfer+0x30>
    37cc:	496c      	ldr	r1, [pc, #432]	; (3980 <nrfx_spim_xfer+0x1cc>)
    37ce:	486d      	ldr	r0, [pc, #436]	; (3984 <nrfx_spim_xfer+0x1d0>)
    37d0:	f240 2396 	movw	r3, #662	; 0x296
    37d4:	4a6c      	ldr	r2, [pc, #432]	; (3988 <nrfx_spim_xfer+0x1d4>)
    37d6:	f002 fa8c 	bl	5cf2 <printk>
    37da:	f240 2196 	movw	r1, #662	; 0x296
    37de:	486a      	ldr	r0, [pc, #424]	; (3988 <nrfx_spim_xfer+0x1d4>)
    37e0:	f002 fb55 	bl	5e8e <assert_post_action>
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    37e4:	6823      	ldr	r3, [r4, #0]
    37e6:	b96b      	cbnz	r3, 3804 <nrfx_spim_xfer+0x50>
    37e8:	6863      	ldr	r3, [r4, #4]
    37ea:	b15b      	cbz	r3, 3804 <nrfx_spim_xfer+0x50>
    37ec:	4967      	ldr	r1, [pc, #412]	; (398c <nrfx_spim_xfer+0x1d8>)
    37ee:	4865      	ldr	r0, [pc, #404]	; (3984 <nrfx_spim_xfer+0x1d0>)
    37f0:	f240 2397 	movw	r3, #663	; 0x297
    37f4:	4a64      	ldr	r2, [pc, #400]	; (3988 <nrfx_spim_xfer+0x1d4>)
    37f6:	f002 fa7c 	bl	5cf2 <printk>
    37fa:	f240 2197 	movw	r1, #663	; 0x297
    37fe:	4862      	ldr	r0, [pc, #392]	; (3988 <nrfx_spim_xfer+0x1d4>)
    3800:	f002 fb45 	bl	5e8e <assert_post_action>
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);
    3804:	68a3      	ldr	r3, [r4, #8]
    3806:	b96b      	cbnz	r3, 3824 <nrfx_spim_xfer+0x70>
    3808:	68e3      	ldr	r3, [r4, #12]
    380a:	b15b      	cbz	r3, 3824 <nrfx_spim_xfer+0x70>
    380c:	4960      	ldr	r1, [pc, #384]	; (3990 <nrfx_spim_xfer+0x1dc>)
    380e:	485d      	ldr	r0, [pc, #372]	; (3984 <nrfx_spim_xfer+0x1d0>)
    3810:	f44f 7326 	mov.w	r3, #664	; 0x298
    3814:	4a5c      	ldr	r2, [pc, #368]	; (3988 <nrfx_spim_xfer+0x1d4>)
    3816:	f002 fa6c 	bl	5cf2 <printk>
    381a:	f44f 7126 	mov.w	r1, #664	; 0x298
    381e:	485a      	ldr	r0, [pc, #360]	; (3988 <nrfx_spim_xfer+0x1d4>)
    3820:	f002 fb35 	bl	5e8e <assert_post_action>
    NRFX_ASSERT(SPIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
    3824:	f898 3004 	ldrb.w	r3, [r8, #4]
    3828:	2b01      	cmp	r3, #1
    382a:	d807      	bhi.n	383c <nrfx_spim_xfer+0x88>
    382c:	68e3      	ldr	r3, [r4, #12]
    382e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    3832:	d203      	bcs.n	383c <nrfx_spim_xfer+0x88>
    3834:	6863      	ldr	r3, [r4, #4]
    3836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    383a:	d30b      	bcc.n	3854 <nrfx_spim_xfer+0xa0>
    383c:	4955      	ldr	r1, [pc, #340]	; (3994 <nrfx_spim_xfer+0x1e0>)
    383e:	4851      	ldr	r0, [pc, #324]	; (3984 <nrfx_spim_xfer+0x1d0>)
    3840:	f240 2399 	movw	r3, #665	; 0x299
    3844:	4a50      	ldr	r2, [pc, #320]	; (3988 <nrfx_spim_xfer+0x1d4>)
    3846:	f002 fa54 	bl	5cf2 <printk>
    384a:	f240 2199 	movw	r1, #665	; 0x299
    384e:	484e      	ldr	r0, [pc, #312]	; (3988 <nrfx_spim_xfer+0x1d4>)
    3850:	f002 fb1d 	bl	5e8e <assert_post_action>
    NRFX_ASSERT(!(flags & NRFX_SPIM_FLAG_HOLD_XFER) ||
    3854:	f015 0908 	ands.w	r9, r5, #8
    3858:	d011      	beq.n	387e <nrfx_spim_xfer+0xca>
    385a:	2324      	movs	r3, #36	; 0x24
    385c:	fb03 7306 	mla	r3, r3, r6, r7
    3860:	7fdb      	ldrb	r3, [r3, #31]
    3862:	2bff      	cmp	r3, #255	; 0xff
    3864:	d00b      	beq.n	387e <nrfx_spim_xfer+0xca>
    3866:	494c      	ldr	r1, [pc, #304]	; (3998 <nrfx_spim_xfer+0x1e4>)
    3868:	4846      	ldr	r0, [pc, #280]	; (3984 <nrfx_spim_xfer+0x1d0>)
    386a:	f44f 7327 	mov.w	r3, #668	; 0x29c
    386e:	4a46      	ldr	r2, [pc, #280]	; (3988 <nrfx_spim_xfer+0x1d4>)
    3870:	f002 fa3f 	bl	5cf2 <printk>
    3874:	f44f 7127 	mov.w	r1, #668	; 0x29c
    3878:	4843      	ldr	r0, [pc, #268]	; (3988 <nrfx_spim_xfer+0x1d4>)
    387a:	f002 fb08 	bl	5e8e <assert_post_action>
    if (p_cb->transfer_in_progress)
    387e:	2324      	movs	r3, #36	; 0x24
    3880:	4373      	muls	r3, r6
    3882:	18fa      	adds	r2, r7, r3
    3884:	7f51      	ldrb	r1, [r2, #29]
    3886:	2900      	cmp	r1, #0
    3888:	d175      	bne.n	3976 <nrfx_spim_xfer+0x1c2>
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
    388a:	58fb      	ldr	r3, [r7, r3]
    388c:	b123      	cbz	r3, 3898 <nrfx_spim_xfer+0xe4>
    388e:	f015 0f14 	tst.w	r5, #20
            p_cb->transfer_in_progress = true;
    3892:	bf04      	itt	eq
    3894:	2301      	moveq	r3, #1
    3896:	7753      	strbeq	r3, [r2, #29]
    p_cb->evt.xfer_desc = *p_xfer_desc;
    3898:	f04f 0c24 	mov.w	ip, #36	; 0x24
    389c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    38a0:	fb0c 7c06 	mla	ip, ip, r6, r7
    38a4:	f10c 0e0c 	add.w	lr, ip, #12
    38a8:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    38ac:	f89c 001f 	ldrb.w	r0, [ip, #31]
    38b0:	28ff      	cmp	r0, #255	; 0xff
    38b2:	d004      	beq.n	38be <nrfx_spim_xfer+0x10a>
            if (p_cb->ss_active_high)
    38b4:	f89c 301e 	ldrb.w	r3, [ip, #30]
    38b8:	b1bb      	cbz	r3, 38ea <nrfx_spim_xfer+0x136>
                nrf_gpio_pin_set(p_cb->ss_pin);
    38ba:	f003 f867 	bl	698c <nrf_gpio_pin_set>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    38be:	6821      	ldr	r1, [r4, #0]
    38c0:	b121      	cbz	r1, 38cc <nrfx_spim_xfer+0x118>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    38c2:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
    38c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    38ca:	d106      	bne.n	38da <nrfx_spim_xfer+0x126>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    38cc:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    38ce:	b17a      	cbz	r2, 38f0 <nrfx_spim_xfer+0x13c>
    38d0:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    38d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    38d8:	d00a      	beq.n	38f0 <nrfx_spim_xfer+0x13c>
        p_cb->transfer_in_progress = false;
    38da:	2324      	movs	r3, #36	; 0x24
    38dc:	fb03 7606 	mla	r6, r3, r6, r7
    38e0:	2300      	movs	r3, #0
        return err_code;
    38e2:	482e      	ldr	r0, [pc, #184]	; (399c <nrfx_spim_xfer+0x1e8>)
        p_cb->transfer_in_progress = false;
    38e4:	7773      	strb	r3, [r6, #29]
}
    38e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                nrf_gpio_pin_clear(p_cb->ss_pin);
    38ea:	f003 f843 	bl	6974 <nrf_gpio_pin_clear>
    38ee:	e7e6      	b.n	38be <nrfx_spim_xfer+0x10a>
    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
    38f0:	f8d8 3000 	ldr.w	r3, [r8]
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
    38f4:	6860      	ldr	r0, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    38f6:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    nrf_spim_rx_buffer_set(p_spim, p_xfer_desc->p_rx_buffer, p_xfer_desc->rx_length);
    38fa:	68e1      	ldr	r1, [r4, #12]
    p_reg->TXD.MAXCNT = length;
    38fc:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    3900:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3904:	2200      	movs	r2, #0
    p_reg->RXD.MAXCNT = length;
    3906:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    390a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
    390e:	f015 0201 	ands.w	r2, r5, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
    3912:	bf18      	it	ne
    3914:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
    3916:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
    391a:	f015 0202 	ands.w	r2, r5, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
    391e:	bf18      	it	ne
    3920:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
    3922:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
    3926:	f1b9 0f00 	cmp.w	r9, #0
    392a:	d101      	bne.n	3930 <nrfx_spim_xfer+0x17c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    392c:	2201      	movs	r2, #1
    392e:	611a      	str	r2, [r3, #16]
    if (!p_cb->handler)
    3930:	2224      	movs	r2, #36	; 0x24
    3932:	4372      	muls	r2, r6
    3934:	58ba      	ldr	r2, [r7, r2]
    3936:	b9aa      	cbnz	r2, 3964 <nrfx_spim_xfer+0x1b0>
        if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
    3938:	f1b9 0f00 	cmp.w	r9, #0
    393c:	d103      	bne.n	3946 <nrfx_spim_xfer+0x192>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    393e:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    3942:	2a00      	cmp	r2, #0
    3944:	d0fb      	beq.n	393e <nrfx_spim_xfer+0x18a>
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    3946:	2324      	movs	r3, #36	; 0x24
    3948:	fb03 7606 	mla	r6, r3, r6, r7
    394c:	7ff0      	ldrb	r0, [r6, #31]
    394e:	28ff      	cmp	r0, #255	; 0xff
    3950:	d003      	beq.n	395a <nrfx_spim_xfer+0x1a6>
                if (p_cb->ss_active_high)
    3952:	7fb3      	ldrb	r3, [r6, #30]
    3954:	b11b      	cbz	r3, 395e <nrfx_spim_xfer+0x1aa>
                    nrf_gpio_pin_clear(p_cb->ss_pin);
    3956:	f003 f80d 	bl	6974 <nrf_gpio_pin_clear>
    return err_code;
    395a:	4811      	ldr	r0, [pc, #68]	; (39a0 <nrfx_spim_xfer+0x1ec>)
    395c:	e7c3      	b.n	38e6 <nrfx_spim_xfer+0x132>
                    nrf_gpio_pin_set(p_cb->ss_pin);
    395e:	f003 f815 	bl	698c <nrf_gpio_pin_set>
    3962:	e7fa      	b.n	395a <nrfx_spim_xfer+0x1a6>
    if (!enable)
    3964:	2240      	movs	r2, #64	; 0x40
    3966:	f015 0f04 	tst.w	r5, #4
    p_reg->INTENCLR = mask;
    396a:	bf14      	ite	ne
    396c:	f8c3 2308 	strne.w	r2, [r3, #776]	; 0x308
    p_reg->INTENSET = mask;
    3970:	f8c3 2304 	streq.w	r2, [r3, #772]	; 0x304
    3974:	e7f1      	b.n	395a <nrfx_spim_xfer+0x1a6>
        return err_code;
    3976:	480b      	ldr	r0, [pc, #44]	; (39a4 <nrfx_spim_xfer+0x1f0>)
    3978:	e7b5      	b.n	38e6 <nrfx_spim_xfer+0x132>
    397a:	bf00      	nop
    397c:	20000290 	.word	0x20000290
    3980:	00007fd5 	.word	0x00007fd5
    3984:	00006f74 	.word	0x00006f74
    3988:	00007f82 	.word	0x00007f82
    398c:	00008001 	.word	0x00008001
    3990:	00008048 	.word	0x00008048
    3994:	0000808f 	.word	0x0000808f
    3998:	000081bf 	.word	0x000081bf
    399c:	0bad000a 	.word	0x0bad000a
    39a0:	0bad0000 	.word	0x0bad0000
    39a4:	0bad000b 	.word	0x0bad000b

000039a8 <nrfx_spim_2_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    39a8:	4803      	ldr	r0, [pc, #12]	; (39b8 <nrfx_spim_2_irq_handler+0x10>)
    39aa:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    39ae:	b113      	cbz	r3, 39b6 <nrfx_spim_2_irq_handler+0xe>
    39b0:	4902      	ldr	r1, [pc, #8]	; (39bc <nrfx_spim_2_irq_handler+0x14>)
    39b2:	f7ff be0d 	b.w	35d0 <irq_handler.part.0>

#if NRFX_CHECK(NRFX_SPIM2_ENABLED)
void nrfx_spim_2_irq_handler(void)
{
    irq_handler(NRF_SPIM2, &m_cb[NRFX_SPIM2_INST_IDX]);
}
    39b6:	4770      	bx	lr
    39b8:	5000b000 	.word	0x5000b000
    39bc:	200002b4 	.word	0x200002b4

000039c0 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(s32_t level)
{
    39c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			if (dev) {
				/* Initialization failed. Clear the API struct
				 * so that device_get_binding() will not succeed
				 * for it.
				 */
				dev->driver_api = NULL;
    39c2:	2700      	movs	r7, #0
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    39c4:	4b08      	ldr	r3, [pc, #32]	; (39e8 <z_sys_init_run_level+0x28>)
    39c6:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    39ca:	3001      	adds	r0, #1
    39cc:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    39d0:	42a6      	cmp	r6, r4
    39d2:	d800      	bhi.n	39d6 <z_sys_init_run_level+0x16>
			}
		}
	}
}
    39d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		retval = entry->init(dev);
    39d6:	e9d4 3500 	ldrd	r3, r5, [r4]
    39da:	4628      	mov	r0, r5
    39dc:	4798      	blx	r3
		if (retval != 0) {
    39de:	b108      	cbz	r0, 39e4 <z_sys_init_run_level+0x24>
			if (dev) {
    39e0:	b105      	cbz	r5, 39e4 <z_sys_init_run_level+0x24>
				dev->driver_api = NULL;
    39e2:	60af      	str	r7, [r5, #8]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    39e4:	3408      	adds	r4, #8
    39e6:	e7f3      	b.n	39d0 <z_sys_init_run_level+0x10>
    39e8:	00006ef0 	.word	0x00006ef0

000039ec <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
    39ec:	4b0f      	ldr	r3, [pc, #60]	; (3a2c <z_impl_device_get_binding+0x40>)
{
    39ee:	b570      	push	{r4, r5, r6, lr}
    39f0:	4605      	mov	r5, r0
    39f2:	461e      	mov	r6, r3
	for (dev = __device_start; dev != __device_end; dev++) {
    39f4:	4c0e      	ldr	r4, [pc, #56]	; (3a30 <z_impl_device_get_binding+0x44>)
    39f6:	429c      	cmp	r4, r3
    39f8:	d104      	bne.n	3a04 <z_impl_device_get_binding+0x18>
		    (dev->name == name)) {
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
    39fa:	4c0d      	ldr	r4, [pc, #52]	; (3a30 <z_impl_device_get_binding+0x44>)
    39fc:	42b4      	cmp	r4, r6
    39fe:	d108      	bne.n	3a12 <z_impl_device_get_binding+0x26>
		    (strcmp(name, dev->name) == 0)) {
			return dev;
		}
	}

	return NULL;
    3a00:	2400      	movs	r4, #0
    3a02:	e010      	b.n	3a26 <z_impl_device_get_binding+0x3a>
		if ((dev->driver_api != NULL) &&
    3a04:	68a2      	ldr	r2, [r4, #8]
    3a06:	b112      	cbz	r2, 3a0e <z_impl_device_get_binding+0x22>
    3a08:	6822      	ldr	r2, [r4, #0]
    3a0a:	42aa      	cmp	r2, r5
    3a0c:	d00b      	beq.n	3a26 <z_impl_device_get_binding+0x3a>
	for (dev = __device_start; dev != __device_end; dev++) {
    3a0e:	3410      	adds	r4, #16
    3a10:	e7f1      	b.n	39f6 <z_impl_device_get_binding+0xa>
		if ((dev->driver_api != NULL) &&
    3a12:	68a3      	ldr	r3, [r4, #8]
    3a14:	b90b      	cbnz	r3, 3a1a <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    3a16:	3410      	adds	r4, #16
    3a18:	e7f0      	b.n	39fc <z_impl_device_get_binding+0x10>
		    (strcmp(name, dev->name) == 0)) {
    3a1a:	4628      	mov	r0, r5
    3a1c:	6821      	ldr	r1, [r4, #0]
    3a1e:	f002 fd4e 	bl	64be <strcmp>
		if ((dev->driver_api != NULL) &&
    3a22:	2800      	cmp	r0, #0
    3a24:	d1f7      	bne.n	3a16 <z_impl_device_get_binding+0x2a>
}
    3a26:	4620      	mov	r0, r4
    3a28:	bd70      	pop	{r4, r5, r6, pc}
    3a2a:	bf00      	nop
    3a2c:	200000d8 	.word	0x200000d8
    3a30:	20000078 	.word	0x20000078

00003a34 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3a34:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3a38:	4605      	mov	r5, r0
    3a3a:	460f      	mov	r7, r1
    3a3c:	f04f 0320 	mov.w	r3, #32
    3a40:	f3ef 8811 	mrs	r8, BASEPRI
    3a44:	f383 8811 	msr	BASEPRI, r3
    3a48:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    3a4c:	f001 fb6a 	bl	5124 <z_impl_k_current_get>
    3a50:	4c2a      	ldr	r4, [pc, #168]	; (3afc <z_fatal_error+0xc8>)
    3a52:	4b2b      	ldr	r3, [pc, #172]	; (3b00 <z_fatal_error+0xcc>)
    3a54:	2d04      	cmp	r5, #4
    3a56:	eba4 0403 	sub.w	r4, r4, r3
    3a5a:	ea4f 04d4 	mov.w	r4, r4, lsr #3
    3a5e:	bf98      	it	ls
    3a60:	4a28      	ldrls	r2, [pc, #160]	; (3b04 <z_fatal_error+0xd0>)
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    3a62:	ea4f 1484 	mov.w	r4, r4, lsl #6
    3a66:	f044 0301 	orr.w	r3, r4, #1
    3a6a:	4606      	mov	r6, r0
	switch (reason) {
    3a6c:	bf94      	ite	ls
    3a6e:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    3a72:	4a25      	ldrhi	r2, [pc, #148]	; (3b08 <z_fatal_error+0xd4>)
    3a74:	f8ad 3000 	strh.w	r3, [sp]
    3a78:	4629      	mov	r1, r5
    3a7a:	2300      	movs	r3, #0
    3a7c:	4823      	ldr	r0, [pc, #140]	; (3b0c <z_fatal_error+0xd8>)
    3a7e:	f002 fa70 	bl	5f62 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    3a82:	b147      	cbz	r7, 3a96 <z_fatal_error+0x62>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    3a84:	69fb      	ldr	r3, [r7, #28]
    3a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
    3a8a:	b123      	cbz	r3, 3a96 <z_fatal_error+0x62>
		LOG_ERR("Fault during interrupt handling\n");
    3a8c:	4820      	ldr	r0, [pc, #128]	; (3b10 <z_fatal_error+0xdc>)
    3a8e:	f044 0101 	orr.w	r1, r4, #1
    3a92:	f002 fa2c 	bl	5eee <log_0>
	const char *thread_name = k_thread_name_get(thread);
    3a96:	4630      	mov	r0, r6
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    3a98:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = k_thread_name_get(thread);
    3a9c:	f002 ffca 	bl	6a34 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
    3aa0:	b348      	cbz	r0, 3af6 <z_fatal_error+0xc2>
    3aa2:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
    3aa4:	4b1b      	ldr	r3, [pc, #108]	; (3b14 <z_fatal_error+0xe0>)
    3aa6:	2a00      	cmp	r2, #0
    3aa8:	bf08      	it	eq
    3aaa:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
    3aac:	f7fd f898 	bl	be0 <log_strdup>
    3ab0:	4623      	mov	r3, r4
    3ab2:	4602      	mov	r2, r0
    3ab4:	4631      	mov	r1, r6
    3ab6:	4818      	ldr	r0, [pc, #96]	; (3b18 <z_fatal_error+0xe4>)
    3ab8:	f002 fa3a 	bl	5f30 <log_2>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
    3abc:	4639      	mov	r1, r7
    3abe:	4628      	mov	r0, r5
    3ac0:	f7ff fca4 	bl	340c <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    3ac4:	2d04      	cmp	r5, #4
    3ac6:	d10c      	bne.n	3ae2 <z_fatal_error+0xae>
    3ac8:	4914      	ldr	r1, [pc, #80]	; (3b1c <z_fatal_error+0xe8>)
    3aca:	238b      	movs	r3, #139	; 0x8b
    3acc:	4a14      	ldr	r2, [pc, #80]	; (3b20 <z_fatal_error+0xec>)
    3ace:	4815      	ldr	r0, [pc, #84]	; (3b24 <z_fatal_error+0xf0>)
    3ad0:	f002 f90f 	bl	5cf2 <printk>
    3ad4:	4814      	ldr	r0, [pc, #80]	; (3b28 <z_fatal_error+0xf4>)
    3ad6:	f002 f90c 	bl	5cf2 <printk>
    3ada:	218b      	movs	r1, #139	; 0x8b
    3adc:	4810      	ldr	r0, [pc, #64]	; (3b20 <z_fatal_error+0xec>)
    3ade:	f002 f9d6 	bl	5e8e <assert_post_action>
	__asm__ volatile(
    3ae2:	f388 8811 	msr	BASEPRI, r8
    3ae6:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    3aea:	4630      	mov	r0, r6
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    3aec:	b002      	add	sp, #8
    3aee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3af2:	f7fe bc57 	b.w	23a4 <z_impl_k_thread_abort>
		thread_name = "unknown";
    3af6:	4807      	ldr	r0, [pc, #28]	; (3b14 <z_fatal_error+0xe0>)
    3af8:	e7d8      	b.n	3aac <z_fatal_error+0x78>
    3afa:	bf00      	nop
    3afc:	00006d60 	.word	0x00006d60
    3b00:	00006d40 	.word	0x00006d40
    3b04:	00006f08 	.word	0x00006f08
    3b08:	000081ef 	.word	0x000081ef
    3b0c:	00008205 	.word	0x00008205
    3b10:	0000822d 	.word	0x0000822d
    3b14:	000081fd 	.word	0x000081fd
    3b18:	0000824e 	.word	0x0000824e
    3b1c:	00008288 	.word	0x00008288
    3b20:	00008266 	.word	0x00008266
    3b24:	00006f74 	.word	0x00006f74
    3b28:	000082a5 	.word	0x000082a5

00003b2c <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    3b2c:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    3b2e:	4d0b      	ldr	r5, [pc, #44]	; (3b5c <idle+0x30>)
	__asm__ volatile(
    3b30:	f04f 0220 	mov.w	r2, #32
    3b34:	f3ef 8311 	mrs	r3, BASEPRI
    3b38:	f382 8811 	msr	BASEPRI, r2
    3b3c:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
    3b40:	f001 fe7c 	bl	583c <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    3b44:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
    3b46:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    3b48:	2802      	cmp	r0, #2
    3b4a:	bfd8      	it	le
    3b4c:	4608      	movle	r0, r1
    3b4e:	f001 febd 	bl	58cc <z_set_timeout_expiry>
	_kernel.idle = ticks;
    3b52:	622c      	str	r4, [r5, #32]
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    3b54:	f7fe f964 	bl	1e20 <arch_cpu_idle>
}
    3b58:	e7ea      	b.n	3b30 <idle+0x4>
    3b5a:	bf00      	nop
    3b5c:	200003c4 	.word	0x200003c4

00003b60 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    3b60:	4802      	ldr	r0, [pc, #8]	; (3b6c <z_bss_zero+0xc>)
    3b62:	4a03      	ldr	r2, [pc, #12]	; (3b70 <z_bss_zero+0x10>)
    3b64:	2100      	movs	r1, #0
    3b66:	1a12      	subs	r2, r2, r0
    3b68:	f002 bce0 	b.w	652c <memset>
    3b6c:	20000100 	.word	0x20000100
    3b70:	20000418 	.word	0x20000418

00003b74 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    3b74:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    3b76:	4806      	ldr	r0, [pc, #24]	; (3b90 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    3b78:	4a06      	ldr	r2, [pc, #24]	; (3b94 <z_data_copy+0x20>)
    3b7a:	4907      	ldr	r1, [pc, #28]	; (3b98 <z_data_copy+0x24>)
    3b7c:	1a12      	subs	r2, r2, r0
    3b7e:	f002 fcaa 	bl	64d6 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    3b82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    3b86:	4a05      	ldr	r2, [pc, #20]	; (3b9c <z_data_copy+0x28>)
    3b88:	4905      	ldr	r1, [pc, #20]	; (3ba0 <z_data_copy+0x2c>)
    3b8a:	4806      	ldr	r0, [pc, #24]	; (3ba4 <z_data_copy+0x30>)
    3b8c:	f002 bca3 	b.w	64d6 <memcpy>
    3b90:	20000000 	.word	0x20000000
    3b94:	200000fc 	.word	0x200000fc
    3b98:	0000871c 	.word	0x0000871c
    3b9c:	00000000 	.word	0x00000000
    3ba0:	0000871c 	.word	0x0000871c
    3ba4:	20000000 	.word	0x20000000

00003ba8 <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
    3ba8:	2201      	movs	r2, #1
{
    3baa:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    3bac:	4b0b      	ldr	r3, [pc, #44]	; (3bdc <bg_thread_main+0x34>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3bae:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    3bb0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3bb2:	f7ff ff05 	bl	39c0 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    3bb6:	4a0a      	ldr	r2, [pc, #40]	; (3be0 <bg_thread_main+0x38>)
    3bb8:	490a      	ldr	r1, [pc, #40]	; (3be4 <bg_thread_main+0x3c>)
    3bba:	480b      	ldr	r0, [pc, #44]	; (3be8 <bg_thread_main+0x40>)
    3bbc:	f002 f899 	bl	5cf2 <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    3bc0:	2003      	movs	r0, #3
    3bc2:	f7ff fefd 	bl	39c0 <z_sys_init_run_level>

	z_init_static_threads();
    3bc6:	f001 fc21 	bl	540c <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    3bca:	f7fc fc41 	bl	450 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    3bce:	4a07      	ldr	r2, [pc, #28]	; (3bec <bg_thread_main+0x44>)
    3bd0:	7b13      	ldrb	r3, [r2, #12]
    3bd2:	f023 0301 	bic.w	r3, r3, #1
    3bd6:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    3bd8:	bd08      	pop	{r3, pc}
    3bda:	bf00      	nop
    3bdc:	20000417 	.word	0x20000417
    3be0:	0000843c 	.word	0x0000843c
    3be4:	00008324 	.word	0x00008324
    3be8:	00008334 	.word	0x00008334
    3bec:	2000034c 	.word	0x2000034c

00003bf0 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    3bf0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
    3bf4:	b0a5      	sub	sp, #148	; 0x94
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
    3bf6:	f7fc ff2b 	bl	a50 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(z_interrupt_stacks[0])) +
    3bfa:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 3ce8 <z_cstart+0xf8>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    3bfe:	f389 8808 	msr	MSP, r9
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3c02:	2400      	movs	r4, #0
    3c04:	23e0      	movs	r3, #224	; 0xe0
    3c06:	4d31      	ldr	r5, [pc, #196]	; (3ccc <z_cstart+0xdc>)
	z_setup_new_thread(&z_main_thread, z_main_stack,
    3c08:	f04f 0b01 	mov.w	fp, #1
    3c0c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    3c10:	77ec      	strb	r4, [r5, #31]
    3c12:	762c      	strb	r4, [r5, #24]
    3c14:	766c      	strb	r4, [r5, #25]
    3c16:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    3c18:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
    3c1a:	4e2d      	ldr	r6, [pc, #180]	; (3cd0 <z_cstart+0xe0>)
    3c1c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    3c20:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    3c22:	f7fe fb99 	bl	2358 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    3c26:	f7fe f8f5 	bl	1e14 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    3c2a:	f04f 33ff 	mov.w	r3, #4294967295
    3c2e:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    3c30:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    3c32:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = 0;
#endif

	_current_cpu->current = dummy_thread;
    3c36:	4d27      	ldr	r5, [pc, #156]	; (3cd4 <z_cstart+0xe4>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    3c38:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	_current_cpu->current = dummy_thread;
    3c3c:	ab07      	add	r3, sp, #28
    3c3e:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    3c40:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
    3c42:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
    3c46:	f7ff febb 	bl	39c0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    3c4a:	2001      	movs	r0, #1
    3c4c:	f7ff feb8 	bl	39c0 <z_sys_init_run_level>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    3c50:	f8df a098 	ldr.w	sl, [pc, #152]	; 3cec <z_cstart+0xfc>
	z_sched_init();
    3c54:	f001 f8dc 	bl	4e10 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    3c58:	f8df 8094 	ldr.w	r8, [pc, #148]	; 3cf0 <z_cstart+0x100>
    3c5c:	4b1e      	ldr	r3, [pc, #120]	; (3cd8 <z_cstart+0xe8>)
	_kernel.ready_q.cache = &z_main_thread;
    3c5e:	626e      	str	r6, [r5, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
    3c60:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3c64:	4641      	mov	r1, r8
    3c66:	4630      	mov	r0, r6
    3c68:	9305      	str	r3, [sp, #20]
    3c6a:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    3c6e:	4653      	mov	r3, sl
    3c70:	e9cd 4401 	strd	r4, r4, [sp, #4]
    3c74:	9400      	str	r4, [sp, #0]
    3c76:	f001 fb23 	bl	52c0 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3c7a:	7b73      	ldrb	r3, [r6, #13]
	z_ready_thread(&z_main_thread);
    3c7c:	4630      	mov	r0, r6
    3c7e:	f023 0304 	bic.w	r3, r3, #4
    3c82:	7373      	strb	r3, [r6, #13]
    3c84:	f000 fc36 	bl	44f4 <z_ready_thread>
	z_setup_new_thread(thread, stack,
    3c88:	230f      	movs	r3, #15
    3c8a:	4f14      	ldr	r7, [pc, #80]	; (3cdc <z_cstart+0xec>)
    3c8c:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3c90:	4638      	mov	r0, r7
    3c92:	e9cd 4302 	strd	r4, r3, [sp, #8]
    3c96:	4912      	ldr	r1, [pc, #72]	; (3ce0 <z_cstart+0xf0>)
    3c98:	4b12      	ldr	r3, [pc, #72]	; (3ce4 <z_cstart+0xf4>)
    3c9a:	e9cd b404 	strd	fp, r4, [sp, #16]
    3c9e:	e9cd 4400 	strd	r4, r4, [sp]
    3ca2:	f001 fb0d 	bl	52c0 <z_setup_new_thread>
    3ca6:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
    3ca8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3cac:	f023 0304 	bic.w	r3, r3, #4
    3cb0:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    3cb2:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
    3cb6:	e9c5 3306 	strd	r3, r3, [r5, #24]
    3cba:	4641      	mov	r1, r8
    3cbc:	4653      	mov	r3, sl
    3cbe:	4630      	mov	r0, r6
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    3cc0:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
    3cc2:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
    3cc4:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
    3cc8:	f7fd fffa 	bl	1cc0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    3ccc:	e000ed00 	.word	0xe000ed00
    3cd0:	2000034c 	.word	0x2000034c
    3cd4:	200003c4 	.word	0x200003c4
    3cd8:	0000835b 	.word	0x0000835b
    3cdc:	200002d8 	.word	0x200002d8
    3ce0:	20000b18 	.word	0x20000b18
    3ce4:	00003b2d 	.word	0x00003b2d
    3ce8:	20001458 	.word	0x20001458
    3cec:	00003ba9 	.word	0x00003ba9
    3cf0:	20000718 	.word	0x20000718

00003cf4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
    3cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3cf8:	4d16      	ldr	r5, [pc, #88]	; (3d54 <init_mem_slab_module+0x60>)
    3cfa:	4c17      	ldr	r4, [pc, #92]	; (3d58 <init_mem_slab_module+0x64>)
    3cfc:	46a8      	mov	r8, r5
    3cfe:	4e17      	ldr	r6, [pc, #92]	; (3d5c <init_mem_slab_module+0x68>)
    3d00:	42ac      	cmp	r4, r5
    3d02:	d90c      	bls.n	3d1e <init_mem_slab_module+0x2a>
    3d04:	4916      	ldr	r1, [pc, #88]	; (3d60 <init_mem_slab_module+0x6c>)
    3d06:	2342      	movs	r3, #66	; 0x42
    3d08:	4632      	mov	r2, r6
    3d0a:	4816      	ldr	r0, [pc, #88]	; (3d64 <init_mem_slab_module+0x70>)
    3d0c:	f001 fff1 	bl	5cf2 <printk>
    3d10:	4815      	ldr	r0, [pc, #84]	; (3d68 <init_mem_slab_module+0x74>)
    3d12:	f001 ffee 	bl	5cf2 <printk>
    3d16:	2142      	movs	r1, #66	; 0x42
    3d18:	4630      	mov	r0, r6
    3d1a:	f002 f8b8 	bl	5e8e <assert_post_action>
    3d1e:	4544      	cmp	r4, r8
    3d20:	d302      	bcc.n	3d28 <init_mem_slab_module+0x34>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
    3d22:	2000      	movs	r0, #0
	return rc;
}
    3d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    3d28:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    3d2c:	ea41 0302 	orr.w	r3, r1, r2
    3d30:	f013 0303 	ands.w	r3, r3, #3
    3d34:	d10b      	bne.n	3d4e <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
    3d36:	68a0      	ldr	r0, [r4, #8]
	slab->free_list = NULL;
    3d38:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    3d3a:	4283      	cmp	r3, r0
    3d3c:	d101      	bne.n	3d42 <init_mem_slab_module+0x4e>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3d3e:	341c      	adds	r4, #28
    3d40:	e7de      	b.n	3d00 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
    3d42:	6967      	ldr	r7, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    3d44:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
    3d46:	600f      	str	r7, [r1, #0]
		slab->free_list = p;
    3d48:	6161      	str	r1, [r4, #20]
		p += slab->block_size;
    3d4a:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    3d4c:	e7f5      	b.n	3d3a <init_mem_slab_module+0x46>
		return -EINVAL;
    3d4e:	f06f 0015 	mvn.w	r0, #21
	return rc;
    3d52:	e7e7      	b.n	3d24 <init_mem_slab_module+0x30>
    3d54:	200000d8 	.word	0x200000d8
    3d58:	200000d8 	.word	0x200000d8
    3d5c:	00008363 	.word	0x00008363
    3d60:	00008388 	.word	0x00008388
    3d64:	00006f74 	.word	0x00006f74
    3d68:	000083a5 	.word	0x000083a5

00003d6c <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    3d6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3d70:	4604      	mov	r4, r0
    3d72:	460d      	mov	r5, r1
    3d74:	4616      	mov	r6, r2
    3d76:	461f      	mov	r7, r3
    3d78:	f04f 0320 	mov.w	r3, #32
    3d7c:	f3ef 8811 	mrs	r8, BASEPRI
    3d80:	f383 8811 	msr	BASEPRI, r3
    3d84:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3d88:	4826      	ldr	r0, [pc, #152]	; (3e24 <k_mem_slab_alloc+0xb8>)
    3d8a:	f001 fbcd 	bl	5528 <z_spin_lock_valid>
    3d8e:	b968      	cbnz	r0, 3dac <k_mem_slab_alloc+0x40>
    3d90:	235c      	movs	r3, #92	; 0x5c
    3d92:	4a25      	ldr	r2, [pc, #148]	; (3e28 <k_mem_slab_alloc+0xbc>)
    3d94:	4925      	ldr	r1, [pc, #148]	; (3e2c <k_mem_slab_alloc+0xc0>)
    3d96:	4826      	ldr	r0, [pc, #152]	; (3e30 <k_mem_slab_alloc+0xc4>)
    3d98:	f001 ffab 	bl	5cf2 <printk>
    3d9c:	4921      	ldr	r1, [pc, #132]	; (3e24 <k_mem_slab_alloc+0xb8>)
    3d9e:	4825      	ldr	r0, [pc, #148]	; (3e34 <k_mem_slab_alloc+0xc8>)
    3da0:	f001 ffa7 	bl	5cf2 <printk>
    3da4:	215c      	movs	r1, #92	; 0x5c
    3da6:	4820      	ldr	r0, [pc, #128]	; (3e28 <k_mem_slab_alloc+0xbc>)
    3da8:	f002 f871 	bl	5e8e <assert_post_action>
	z_spin_lock_set_owner(l);
    3dac:	481d      	ldr	r0, [pc, #116]	; (3e24 <k_mem_slab_alloc+0xb8>)
    3dae:	f001 fbd7 	bl	5560 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
    3db2:	6963      	ldr	r3, [r4, #20]
    3db4:	b1eb      	cbz	r3, 3df2 <k_mem_slab_alloc+0x86>
		/* take a free block */
		*mem = slab->free_list;
    3db6:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
    3db8:	681b      	ldr	r3, [r3, #0]
    3dba:	6163      	str	r3, [r4, #20]
		slab->num_used++;
    3dbc:	69a3      	ldr	r3, [r4, #24]
    3dbe:	3301      	adds	r3, #1
    3dc0:	61a3      	str	r3, [r4, #24]
		result = 0;
    3dc2:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3dc4:	4817      	ldr	r0, [pc, #92]	; (3e24 <k_mem_slab_alloc+0xb8>)
    3dc6:	f001 fbbd 	bl	5544 <z_spin_unlock_valid>
    3dca:	b968      	cbnz	r0, 3de8 <k_mem_slab_alloc+0x7c>
    3dcc:	2384      	movs	r3, #132	; 0x84
    3dce:	4a16      	ldr	r2, [pc, #88]	; (3e28 <k_mem_slab_alloc+0xbc>)
    3dd0:	4919      	ldr	r1, [pc, #100]	; (3e38 <k_mem_slab_alloc+0xcc>)
    3dd2:	4817      	ldr	r0, [pc, #92]	; (3e30 <k_mem_slab_alloc+0xc4>)
    3dd4:	f001 ff8d 	bl	5cf2 <printk>
    3dd8:	4912      	ldr	r1, [pc, #72]	; (3e24 <k_mem_slab_alloc+0xb8>)
    3dda:	4818      	ldr	r0, [pc, #96]	; (3e3c <k_mem_slab_alloc+0xd0>)
    3ddc:	f001 ff89 	bl	5cf2 <printk>
    3de0:	2184      	movs	r1, #132	; 0x84
    3de2:	4811      	ldr	r0, [pc, #68]	; (3e28 <k_mem_slab_alloc+0xbc>)
    3de4:	f002 f853 	bl	5e8e <assert_post_action>
	__asm__ volatile(
    3de8:	f388 8811 	msr	BASEPRI, r8
    3dec:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
    3df0:	e013      	b.n	3e1a <k_mem_slab_alloc+0xae>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    3df2:	ea56 0207 	orrs.w	r2, r6, r7
    3df6:	d103      	bne.n	3e00 <k_mem_slab_alloc+0x94>
		result = -ENOMEM;
    3df8:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
    3dfc:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
    3dfe:	e7e1      	b.n	3dc4 <k_mem_slab_alloc+0x58>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
    3e00:	4622      	mov	r2, r4
    3e02:	4641      	mov	r1, r8
    3e04:	e9cd 6700 	strd	r6, r7, [sp]
    3e08:	4806      	ldr	r0, [pc, #24]	; (3e24 <k_mem_slab_alloc+0xb8>)
    3e0a:	f000 ff41 	bl	4c90 <z_pend_curr>
		if (result == 0) {
    3e0e:	4604      	mov	r4, r0
    3e10:	b918      	cbnz	r0, 3e1a <k_mem_slab_alloc+0xae>
			*mem = _current->base.swap_data;
    3e12:	4b0b      	ldr	r3, [pc, #44]	; (3e40 <k_mem_slab_alloc+0xd4>)
    3e14:	689b      	ldr	r3, [r3, #8]
    3e16:	695b      	ldr	r3, [r3, #20]
    3e18:	602b      	str	r3, [r5, #0]
}
    3e1a:	4620      	mov	r0, r4
    3e1c:	b002      	add	sp, #8
    3e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3e22:	bf00      	nop
    3e24:	200003c0 	.word	0x200003c0
    3e28:	00007380 	.word	0x00007380
    3e2c:	000073a6 	.word	0x000073a6
    3e30:	00006f74 	.word	0x00006f74
    3e34:	000073bb 	.word	0x000073bb
    3e38:	000073d3 	.word	0x000073d3
    3e3c:	000073ea 	.word	0x000073ea
    3e40:	200003c4 	.word	0x200003c4

00003e44 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    3e44:	b570      	push	{r4, r5, r6, lr}
    3e46:	4604      	mov	r4, r0
    3e48:	460d      	mov	r5, r1
	__asm__ volatile(
    3e4a:	f04f 0320 	mov.w	r3, #32
    3e4e:	f3ef 8611 	mrs	r6, BASEPRI
    3e52:	f383 8811 	msr	BASEPRI, r3
    3e56:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3e5a:	4822      	ldr	r0, [pc, #136]	; (3ee4 <k_mem_slab_free+0xa0>)
    3e5c:	f001 fb64 	bl	5528 <z_spin_lock_valid>
    3e60:	b968      	cbnz	r0, 3e7e <k_mem_slab_free+0x3a>
    3e62:	235c      	movs	r3, #92	; 0x5c
    3e64:	4a20      	ldr	r2, [pc, #128]	; (3ee8 <k_mem_slab_free+0xa4>)
    3e66:	4921      	ldr	r1, [pc, #132]	; (3eec <k_mem_slab_free+0xa8>)
    3e68:	4821      	ldr	r0, [pc, #132]	; (3ef0 <k_mem_slab_free+0xac>)
    3e6a:	f001 ff42 	bl	5cf2 <printk>
    3e6e:	491d      	ldr	r1, [pc, #116]	; (3ee4 <k_mem_slab_free+0xa0>)
    3e70:	4820      	ldr	r0, [pc, #128]	; (3ef4 <k_mem_slab_free+0xb0>)
    3e72:	f001 ff3e 	bl	5cf2 <printk>
    3e76:	215c      	movs	r1, #92	; 0x5c
    3e78:	481b      	ldr	r0, [pc, #108]	; (3ee8 <k_mem_slab_free+0xa4>)
    3e7a:	f002 f808 	bl	5e8e <assert_post_action>
	z_spin_lock_set_owner(l);
    3e7e:	4819      	ldr	r0, [pc, #100]	; (3ee4 <k_mem_slab_free+0xa0>)
    3e80:	f001 fb6e 	bl	5560 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    3e84:	4620      	mov	r0, r4
    3e86:	f000 ff33 	bl	4cf0 <z_unpend_first_thread>

	if (pending_thread != NULL) {
    3e8a:	b158      	cbz	r0, 3ea4 <k_mem_slab_free+0x60>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    3e8c:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    3e8e:	682a      	ldr	r2, [r5, #0]
    3e90:	6701      	str	r1, [r0, #112]	; 0x70
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    3e92:	6142      	str	r2, [r0, #20]
		z_ready_thread(pending_thread);
    3e94:	f000 fb2e 	bl	44f4 <z_ready_thread>
		z_reschedule(&lock, key);
    3e98:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
    3e9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
    3e9e:	4811      	ldr	r0, [pc, #68]	; (3ee4 <k_mem_slab_free+0xa0>)
    3ea0:	f000 b958 	b.w	4154 <z_reschedule>
		**(char ***)mem = slab->free_list;
    3ea4:	682b      	ldr	r3, [r5, #0]
    3ea6:	6962      	ldr	r2, [r4, #20]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3ea8:	480e      	ldr	r0, [pc, #56]	; (3ee4 <k_mem_slab_free+0xa0>)
    3eaa:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
    3eac:	682b      	ldr	r3, [r5, #0]
    3eae:	6163      	str	r3, [r4, #20]
		slab->num_used--;
    3eb0:	69a3      	ldr	r3, [r4, #24]
    3eb2:	3b01      	subs	r3, #1
    3eb4:	61a3      	str	r3, [r4, #24]
    3eb6:	f001 fb45 	bl	5544 <z_spin_unlock_valid>
    3eba:	b968      	cbnz	r0, 3ed8 <k_mem_slab_free+0x94>
    3ebc:	2384      	movs	r3, #132	; 0x84
    3ebe:	4a0a      	ldr	r2, [pc, #40]	; (3ee8 <k_mem_slab_free+0xa4>)
    3ec0:	490d      	ldr	r1, [pc, #52]	; (3ef8 <k_mem_slab_free+0xb4>)
    3ec2:	480b      	ldr	r0, [pc, #44]	; (3ef0 <k_mem_slab_free+0xac>)
    3ec4:	f001 ff15 	bl	5cf2 <printk>
    3ec8:	4906      	ldr	r1, [pc, #24]	; (3ee4 <k_mem_slab_free+0xa0>)
    3eca:	480c      	ldr	r0, [pc, #48]	; (3efc <k_mem_slab_free+0xb8>)
    3ecc:	f001 ff11 	bl	5cf2 <printk>
    3ed0:	2184      	movs	r1, #132	; 0x84
    3ed2:	4805      	ldr	r0, [pc, #20]	; (3ee8 <k_mem_slab_free+0xa4>)
    3ed4:	f001 ffdb 	bl	5e8e <assert_post_action>
	__asm__ volatile(
    3ed8:	f386 8811 	msr	BASEPRI, r6
    3edc:	f3bf 8f6f 	isb	sy
}
    3ee0:	bd70      	pop	{r4, r5, r6, pc}
    3ee2:	bf00      	nop
    3ee4:	200003c0 	.word	0x200003c0
    3ee8:	00007380 	.word	0x00007380
    3eec:	000073a6 	.word	0x000073a6
    3ef0:	00006f74 	.word	0x00006f74
    3ef4:	000073bb 	.word	0x000073bb
    3ef8:	000073d3 	.word	0x000073d3
    3efc:	000073ea 	.word	0x000073ea

00003f00 <pended_on.isra.0>:
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
    3f00:	6803      	ldr	r3, [r0, #0]
static _wait_q_t *pended_on(struct k_thread *thread)
    3f02:	b510      	push	{r4, lr}
    3f04:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    3f06:	b95b      	cbnz	r3, 3f20 <pended_on.isra.0+0x20>
    3f08:	4906      	ldr	r1, [pc, #24]	; (3f24 <pended_on.isra.0+0x24>)
    3f0a:	4807      	ldr	r0, [pc, #28]	; (3f28 <pended_on.isra.0+0x28>)
    3f0c:	f240 13d9 	movw	r3, #473	; 0x1d9
    3f10:	4a06      	ldr	r2, [pc, #24]	; (3f2c <pended_on.isra.0+0x2c>)
    3f12:	f001 feee 	bl	5cf2 <printk>
    3f16:	f240 11d9 	movw	r1, #473	; 0x1d9
    3f1a:	4804      	ldr	r0, [pc, #16]	; (3f2c <pended_on.isra.0+0x2c>)
    3f1c:	f001 ffb7 	bl	5e8e <assert_post_action>

	return thread->base.pended_on;
}
    3f20:	6820      	ldr	r0, [r4, #0]
    3f22:	bd10      	pop	{r4, pc}
    3f24:	000083e6 	.word	0x000083e6
    3f28:	00006f74 	.word	0x00006f74
    3f2c:	000083c4 	.word	0x000083c4

00003f30 <z_reset_time_slice>:
{
    3f30:	b510      	push	{r4, lr}
	if (slice_time != 0) {
    3f32:	4c08      	ldr	r4, [pc, #32]	; (3f54 <z_reset_time_slice+0x24>)
    3f34:	6823      	ldr	r3, [r4, #0]
    3f36:	b15b      	cbz	r3, 3f50 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    3f38:	f7fd fdaa 	bl	1a90 <z_clock_elapsed>
    3f3c:	4603      	mov	r3, r0
    3f3e:	6820      	ldr	r0, [r4, #0]
    3f40:	4a05      	ldr	r2, [pc, #20]	; (3f58 <z_reset_time_slice+0x28>)
    3f42:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
    3f44:	2100      	movs	r1, #0
}
    3f46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    3f4a:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    3f4c:	f001 bcbe 	b.w	58cc <z_set_timeout_expiry>
}
    3f50:	bd10      	pop	{r4, pc}
    3f52:	bf00      	nop
    3f54:	20000400 	.word	0x20000400
    3f58:	200003c4 	.word	0x200003c4

00003f5c <k_sched_time_slice_set>:
{
    3f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f5e:	4605      	mov	r5, r0
    3f60:	460c      	mov	r4, r1
	__asm__ volatile(
    3f62:	f04f 0320 	mov.w	r3, #32
    3f66:	f3ef 8611 	mrs	r6, BASEPRI
    3f6a:	f383 8811 	msr	BASEPRI, r3
    3f6e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3f72:	4820      	ldr	r0, [pc, #128]	; (3ff4 <k_sched_time_slice_set+0x98>)
    3f74:	f001 fad8 	bl	5528 <z_spin_lock_valid>
    3f78:	b968      	cbnz	r0, 3f96 <k_sched_time_slice_set+0x3a>
    3f7a:	235c      	movs	r3, #92	; 0x5c
    3f7c:	4a1e      	ldr	r2, [pc, #120]	; (3ff8 <k_sched_time_slice_set+0x9c>)
    3f7e:	491f      	ldr	r1, [pc, #124]	; (3ffc <k_sched_time_slice_set+0xa0>)
    3f80:	481f      	ldr	r0, [pc, #124]	; (4000 <k_sched_time_slice_set+0xa4>)
    3f82:	f001 feb6 	bl	5cf2 <printk>
    3f86:	491b      	ldr	r1, [pc, #108]	; (3ff4 <k_sched_time_slice_set+0x98>)
    3f88:	481e      	ldr	r0, [pc, #120]	; (4004 <k_sched_time_slice_set+0xa8>)
    3f8a:	f001 feb2 	bl	5cf2 <printk>
    3f8e:	215c      	movs	r1, #92	; 0x5c
    3f90:	4819      	ldr	r0, [pc, #100]	; (3ff8 <k_sched_time_slice_set+0x9c>)
    3f92:	f001 ff7c 	bl	5e8e <assert_post_action>
	z_spin_lock_set_owner(l);
    3f96:	4817      	ldr	r0, [pc, #92]	; (3ff4 <k_sched_time_slice_set+0x98>)
    3f98:	f001 fae2 	bl	5560 <z_spin_lock_set_owner>
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
    3f9c:	f44f 4700 	mov.w	r7, #32768	; 0x8000
		_current_cpu->slice_ticks = 0;
    3fa0:	2200      	movs	r2, #0
    3fa2:	f240 30e7 	movw	r0, #999	; 0x3e7
    3fa6:	2100      	movs	r1, #0
    3fa8:	4b17      	ldr	r3, [pc, #92]	; (4008 <k_sched_time_slice_set+0xac>)
    3faa:	fbe7 0105 	umlal	r0, r1, r7, r5
    3fae:	611a      	str	r2, [r3, #16]
    3fb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3fb4:	2300      	movs	r3, #0
    3fb6:	f7fc f8cd 	bl	154 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    3fba:	4b14      	ldr	r3, [pc, #80]	; (400c <k_sched_time_slice_set+0xb0>)
    3fbc:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    3fbe:	4b14      	ldr	r3, [pc, #80]	; (4010 <k_sched_time_slice_set+0xb4>)
    3fc0:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
    3fc2:	f7ff ffb5 	bl	3f30 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3fc6:	480b      	ldr	r0, [pc, #44]	; (3ff4 <k_sched_time_slice_set+0x98>)
    3fc8:	f001 fabc 	bl	5544 <z_spin_unlock_valid>
    3fcc:	b968      	cbnz	r0, 3fea <k_sched_time_slice_set+0x8e>
    3fce:	2384      	movs	r3, #132	; 0x84
    3fd0:	4a09      	ldr	r2, [pc, #36]	; (3ff8 <k_sched_time_slice_set+0x9c>)
    3fd2:	4910      	ldr	r1, [pc, #64]	; (4014 <k_sched_time_slice_set+0xb8>)
    3fd4:	480a      	ldr	r0, [pc, #40]	; (4000 <k_sched_time_slice_set+0xa4>)
    3fd6:	f001 fe8c 	bl	5cf2 <printk>
    3fda:	4906      	ldr	r1, [pc, #24]	; (3ff4 <k_sched_time_slice_set+0x98>)
    3fdc:	480e      	ldr	r0, [pc, #56]	; (4018 <k_sched_time_slice_set+0xbc>)
    3fde:	f001 fe88 	bl	5cf2 <printk>
    3fe2:	2184      	movs	r1, #132	; 0x84
    3fe4:	4804      	ldr	r0, [pc, #16]	; (3ff8 <k_sched_time_slice_set+0x9c>)
    3fe6:	f001 ff52 	bl	5e8e <assert_post_action>
	__asm__ volatile(
    3fea:	f386 8811 	msr	BASEPRI, r6
    3fee:	f3bf 8f6f 	isb	sy
}
    3ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ff4:	200003f8 	.word	0x200003f8
    3ff8:	00007380 	.word	0x00007380
    3ffc:	000073a6 	.word	0x000073a6
    4000:	00006f74 	.word	0x00006f74
    4004:	000073bb 	.word	0x000073bb
    4008:	200003c4 	.word	0x200003c4
    400c:	20000400 	.word	0x20000400
    4010:	200003fc 	.word	0x200003fc
    4014:	000073d3 	.word	0x000073d3
    4018:	000073ea 	.word	0x000073ea

0000401c <z_find_first_thread_to_unpend>:
	pend(thread, wait_q, timeout);
}

ALWAYS_INLINE struct k_thread *z_find_first_thread_to_unpend(_wait_q_t *wait_q,
						     struct k_thread *from)
{
    401c:	b538      	push	{r3, r4, r5, lr}
    401e:	4604      	mov	r4, r0
	__asm__ volatile(
    4020:	f04f 0320 	mov.w	r3, #32
    4024:	f3ef 8511 	mrs	r5, BASEPRI
    4028:	f383 8811 	msr	BASEPRI, r3
    402c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4030:	4818      	ldr	r0, [pc, #96]	; (4094 <z_find_first_thread_to_unpend+0x78>)
    4032:	f001 fa79 	bl	5528 <z_spin_lock_valid>
    4036:	b968      	cbnz	r0, 4054 <z_find_first_thread_to_unpend+0x38>
    4038:	235c      	movs	r3, #92	; 0x5c
    403a:	4a17      	ldr	r2, [pc, #92]	; (4098 <z_find_first_thread_to_unpend+0x7c>)
    403c:	4917      	ldr	r1, [pc, #92]	; (409c <z_find_first_thread_to_unpend+0x80>)
    403e:	4818      	ldr	r0, [pc, #96]	; (40a0 <z_find_first_thread_to_unpend+0x84>)
    4040:	f001 fe57 	bl	5cf2 <printk>
    4044:	4913      	ldr	r1, [pc, #76]	; (4094 <z_find_first_thread_to_unpend+0x78>)
    4046:	4817      	ldr	r0, [pc, #92]	; (40a4 <z_find_first_thread_to_unpend+0x88>)
    4048:	f001 fe53 	bl	5cf2 <printk>
    404c:	215c      	movs	r1, #92	; 0x5c
    404e:	4812      	ldr	r0, [pc, #72]	; (4098 <z_find_first_thread_to_unpend+0x7c>)
    4050:	f001 ff1d 	bl	5e8e <assert_post_action>
	z_spin_lock_set_owner(l);
    4054:	480f      	ldr	r0, [pc, #60]	; (4094 <z_find_first_thread_to_unpend+0x78>)
    4056:	f001 fa83 	bl	5560 <z_spin_lock_set_owner>
	ARG_UNUSED(from);

	struct k_thread *ret = NULL;

	LOCKED(&sched_spinlock) {
		ret = _priq_wait_best(&wait_q->waitq);
    405a:	4620      	mov	r0, r4
    405c:	f002 fcd5 	bl	6a0a <z_priq_dumb_best>
    4060:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4062:	480c      	ldr	r0, [pc, #48]	; (4094 <z_find_first_thread_to_unpend+0x78>)
    4064:	f001 fa6e 	bl	5544 <z_spin_unlock_valid>
    4068:	b968      	cbnz	r0, 4086 <z_find_first_thread_to_unpend+0x6a>
    406a:	2384      	movs	r3, #132	; 0x84
    406c:	4a0a      	ldr	r2, [pc, #40]	; (4098 <z_find_first_thread_to_unpend+0x7c>)
    406e:	490e      	ldr	r1, [pc, #56]	; (40a8 <z_find_first_thread_to_unpend+0x8c>)
    4070:	480b      	ldr	r0, [pc, #44]	; (40a0 <z_find_first_thread_to_unpend+0x84>)
    4072:	f001 fe3e 	bl	5cf2 <printk>
    4076:	4907      	ldr	r1, [pc, #28]	; (4094 <z_find_first_thread_to_unpend+0x78>)
    4078:	480c      	ldr	r0, [pc, #48]	; (40ac <z_find_first_thread_to_unpend+0x90>)
    407a:	f001 fe3a 	bl	5cf2 <printk>
    407e:	2184      	movs	r1, #132	; 0x84
    4080:	4805      	ldr	r0, [pc, #20]	; (4098 <z_find_first_thread_to_unpend+0x7c>)
    4082:	f001 ff04 	bl	5e8e <assert_post_action>
	__asm__ volatile(
    4086:	f385 8811 	msr	BASEPRI, r5
    408a:	f3bf 8f6f 	isb	sy
	}

	return ret;
}
    408e:	4620      	mov	r0, r4
    4090:	bd38      	pop	{r3, r4, r5, pc}
    4092:	bf00      	nop
    4094:	200003f8 	.word	0x200003f8
    4098:	00007380 	.word	0x00007380
    409c:	000073a6 	.word	0x000073a6
    40a0:	00006f74 	.word	0x00006f74
    40a4:	000073bb 	.word	0x000073bb
    40a8:	000073d3 	.word	0x000073d3
    40ac:	000073ea 	.word	0x000073ea

000040b0 <z_unpend_thread_no_timeout>:

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
    40b0:	b538      	push	{r3, r4, r5, lr}
    40b2:	4604      	mov	r4, r0
	__asm__ volatile(
    40b4:	f04f 0320 	mov.w	r3, #32
    40b8:	f3ef 8511 	mrs	r5, BASEPRI
    40bc:	f383 8811 	msr	BASEPRI, r3
    40c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    40c4:	481c      	ldr	r0, [pc, #112]	; (4138 <z_unpend_thread_no_timeout+0x88>)
    40c6:	f001 fa2f 	bl	5528 <z_spin_lock_valid>
    40ca:	b968      	cbnz	r0, 40e8 <z_unpend_thread_no_timeout+0x38>
    40cc:	235c      	movs	r3, #92	; 0x5c
    40ce:	4a1b      	ldr	r2, [pc, #108]	; (413c <z_unpend_thread_no_timeout+0x8c>)
    40d0:	491b      	ldr	r1, [pc, #108]	; (4140 <z_unpend_thread_no_timeout+0x90>)
    40d2:	481c      	ldr	r0, [pc, #112]	; (4144 <z_unpend_thread_no_timeout+0x94>)
    40d4:	f001 fe0d 	bl	5cf2 <printk>
    40d8:	4917      	ldr	r1, [pc, #92]	; (4138 <z_unpend_thread_no_timeout+0x88>)
    40da:	481b      	ldr	r0, [pc, #108]	; (4148 <z_unpend_thread_no_timeout+0x98>)
    40dc:	f001 fe09 	bl	5cf2 <printk>
    40e0:	215c      	movs	r1, #92	; 0x5c
    40e2:	4816      	ldr	r0, [pc, #88]	; (413c <z_unpend_thread_no_timeout+0x8c>)
    40e4:	f001 fed3 	bl	5e8e <assert_post_action>
	z_spin_lock_set_owner(l);
    40e8:	4813      	ldr	r0, [pc, #76]	; (4138 <z_unpend_thread_no_timeout+0x88>)
    40ea:	f001 fa39 	bl	5560 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    40ee:	f104 0008 	add.w	r0, r4, #8
    40f2:	f7ff ff05 	bl	3f00 <pended_on.isra.0>
    40f6:	4621      	mov	r1, r4
    40f8:	f000 f8e0 	bl	42bc <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_PENDING;
}

static inline void z_mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
    40fc:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    40fe:	480e      	ldr	r0, [pc, #56]	; (4138 <z_unpend_thread_no_timeout+0x88>)
    4100:	f023 0302 	bic.w	r3, r3, #2
    4104:	7363      	strb	r3, [r4, #13]
		z_mark_thread_as_not_pending(thread);
		thread->base.pended_on = NULL;
    4106:	2300      	movs	r3, #0
    4108:	60a3      	str	r3, [r4, #8]
    410a:	f001 fa1b 	bl	5544 <z_spin_unlock_valid>
    410e:	b968      	cbnz	r0, 412c <z_unpend_thread_no_timeout+0x7c>
    4110:	2384      	movs	r3, #132	; 0x84
    4112:	4a0a      	ldr	r2, [pc, #40]	; (413c <z_unpend_thread_no_timeout+0x8c>)
    4114:	490d      	ldr	r1, [pc, #52]	; (414c <z_unpend_thread_no_timeout+0x9c>)
    4116:	480b      	ldr	r0, [pc, #44]	; (4144 <z_unpend_thread_no_timeout+0x94>)
    4118:	f001 fdeb 	bl	5cf2 <printk>
    411c:	4906      	ldr	r1, [pc, #24]	; (4138 <z_unpend_thread_no_timeout+0x88>)
    411e:	480c      	ldr	r0, [pc, #48]	; (4150 <z_unpend_thread_no_timeout+0xa0>)
    4120:	f001 fde7 	bl	5cf2 <printk>
    4124:	2184      	movs	r1, #132	; 0x84
    4126:	4805      	ldr	r0, [pc, #20]	; (413c <z_unpend_thread_no_timeout+0x8c>)
    4128:	f001 feb1 	bl	5e8e <assert_post_action>
	__asm__ volatile(
    412c:	f385 8811 	msr	BASEPRI, r5
    4130:	f3bf 8f6f 	isb	sy
	}
}
    4134:	bd38      	pop	{r3, r4, r5, pc}
    4136:	bf00      	nop
    4138:	200003f8 	.word	0x200003f8
    413c:	00007380 	.word	0x00007380
    4140:	000073a6 	.word	0x000073a6
    4144:	00006f74 	.word	0x00006f74
    4148:	000073bb 	.word	0x000073bb
    414c:	000073d3 	.word	0x000073d3
    4150:	000073ea 	.word	0x000073ea

00004154 <z_reschedule>:

	return arch_irq_unlocked(key) && !arch_is_in_isr();
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    4154:	b538      	push	{r3, r4, r5, lr}
    4156:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4158:	460d      	mov	r5, r1
    415a:	b9c1      	cbnz	r1, 418e <z_reschedule+0x3a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    415c:	f3ef 8305 	mrs	r3, IPSR
    4160:	b9ab      	cbnz	r3, 418e <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4162:	f001 f9ef 	bl	5544 <z_spin_unlock_valid>
    4166:	b968      	cbnz	r0, 4184 <z_reschedule+0x30>
    4168:	239b      	movs	r3, #155	; 0x9b
    416a:	4a14      	ldr	r2, [pc, #80]	; (41bc <z_reschedule+0x68>)
    416c:	4914      	ldr	r1, [pc, #80]	; (41c0 <z_reschedule+0x6c>)
    416e:	4815      	ldr	r0, [pc, #84]	; (41c4 <z_reschedule+0x70>)
    4170:	f001 fdbf 	bl	5cf2 <printk>
    4174:	4621      	mov	r1, r4
    4176:	4814      	ldr	r0, [pc, #80]	; (41c8 <z_reschedule+0x74>)
    4178:	f001 fdbb 	bl	5cf2 <printk>
    417c:	219b      	movs	r1, #155	; 0x9b
    417e:	480f      	ldr	r0, [pc, #60]	; (41bc <z_reschedule+0x68>)
    4180:	f001 fe85 	bl	5e8e <assert_post_action>
	if (resched(key.key)) {
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    4184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
    4188:	2000      	movs	r0, #0
    418a:	f7fd bd23 	b.w	1bd4 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    418e:	4620      	mov	r0, r4
    4190:	f001 f9d8 	bl	5544 <z_spin_unlock_valid>
    4194:	b968      	cbnz	r0, 41b2 <z_reschedule+0x5e>
    4196:	2384      	movs	r3, #132	; 0x84
    4198:	4a08      	ldr	r2, [pc, #32]	; (41bc <z_reschedule+0x68>)
    419a:	4909      	ldr	r1, [pc, #36]	; (41c0 <z_reschedule+0x6c>)
    419c:	4809      	ldr	r0, [pc, #36]	; (41c4 <z_reschedule+0x70>)
    419e:	f001 fda8 	bl	5cf2 <printk>
    41a2:	4621      	mov	r1, r4
    41a4:	4808      	ldr	r0, [pc, #32]	; (41c8 <z_reschedule+0x74>)
    41a6:	f001 fda4 	bl	5cf2 <printk>
    41aa:	2184      	movs	r1, #132	; 0x84
    41ac:	4803      	ldr	r0, [pc, #12]	; (41bc <z_reschedule+0x68>)
    41ae:	f001 fe6e 	bl	5e8e <assert_post_action>
    41b2:	f385 8811 	msr	BASEPRI, r5
    41b6:	f3bf 8f6f 	isb	sy
    41ba:	bd38      	pop	{r3, r4, r5, pc}
    41bc:	00007380 	.word	0x00007380
    41c0:	000073d3 	.word	0x000073d3
    41c4:	00006f74 	.word	0x00006f74
    41c8:	000073ea 	.word	0x000073ea

000041cc <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    41cc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    41ce:	f04f 0320 	mov.w	r3, #32
    41d2:	f3ef 8511 	mrs	r5, BASEPRI
    41d6:	f383 8811 	msr	BASEPRI, r3
    41da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    41de:	482b      	ldr	r0, [pc, #172]	; (428c <k_sched_lock+0xc0>)
    41e0:	f001 f9a2 	bl	5528 <z_spin_lock_valid>
    41e4:	b968      	cbnz	r0, 4202 <k_sched_lock+0x36>
    41e6:	235c      	movs	r3, #92	; 0x5c
    41e8:	4a29      	ldr	r2, [pc, #164]	; (4290 <k_sched_lock+0xc4>)
    41ea:	492a      	ldr	r1, [pc, #168]	; (4294 <k_sched_lock+0xc8>)
    41ec:	482a      	ldr	r0, [pc, #168]	; (4298 <k_sched_lock+0xcc>)
    41ee:	f001 fd80 	bl	5cf2 <printk>
    41f2:	4926      	ldr	r1, [pc, #152]	; (428c <k_sched_lock+0xc0>)
    41f4:	4829      	ldr	r0, [pc, #164]	; (429c <k_sched_lock+0xd0>)
    41f6:	f001 fd7c 	bl	5cf2 <printk>
    41fa:	215c      	movs	r1, #92	; 0x5c
    41fc:	4824      	ldr	r0, [pc, #144]	; (4290 <k_sched_lock+0xc4>)
    41fe:	f001 fe46 	bl	5e8e <assert_post_action>
	z_spin_lock_set_owner(l);
    4202:	4822      	ldr	r0, [pc, #136]	; (428c <k_sched_lock+0xc0>)
    4204:	f001 f9ac 	bl	5560 <z_spin_lock_set_owner>
    4208:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
    420c:	b173      	cbz	r3, 422c <k_sched_lock+0x60>
    420e:	4924      	ldr	r1, [pc, #144]	; (42a0 <k_sched_lock+0xd4>)
    4210:	f240 130b 	movw	r3, #267	; 0x10b
    4214:	4a23      	ldr	r2, [pc, #140]	; (42a4 <k_sched_lock+0xd8>)
    4216:	4820      	ldr	r0, [pc, #128]	; (4298 <k_sched_lock+0xcc>)
    4218:	f001 fd6b 	bl	5cf2 <printk>
    421c:	4822      	ldr	r0, [pc, #136]	; (42a8 <k_sched_lock+0xdc>)
    421e:	f001 fd68 	bl	5cf2 <printk>
    4222:	f240 110b 	movw	r1, #267	; 0x10b
    4226:	481f      	ldr	r0, [pc, #124]	; (42a4 <k_sched_lock+0xd8>)
    4228:	f001 fe31 	bl	5e8e <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
    422c:	4c1f      	ldr	r4, [pc, #124]	; (42ac <k_sched_lock+0xe0>)
    422e:	68a2      	ldr	r2, [r4, #8]
    4230:	7bd2      	ldrb	r2, [r2, #15]
    4232:	2a01      	cmp	r2, #1
    4234:	d10e      	bne.n	4254 <k_sched_lock+0x88>
    4236:	491e      	ldr	r1, [pc, #120]	; (42b0 <k_sched_lock+0xe4>)
    4238:	f44f 7386 	mov.w	r3, #268	; 0x10c
    423c:	4a19      	ldr	r2, [pc, #100]	; (42a4 <k_sched_lock+0xd8>)
    423e:	4816      	ldr	r0, [pc, #88]	; (4298 <k_sched_lock+0xcc>)
    4240:	f001 fd57 	bl	5cf2 <printk>
    4244:	4818      	ldr	r0, [pc, #96]	; (42a8 <k_sched_lock+0xdc>)
    4246:	f001 fd54 	bl	5cf2 <printk>
    424a:	f44f 7186 	mov.w	r1, #268	; 0x10c
    424e:	4815      	ldr	r0, [pc, #84]	; (42a4 <k_sched_lock+0xd8>)
    4250:	f001 fe1d 	bl	5e8e <assert_post_action>

	--_current->base.sched_locked;
    4254:	68a2      	ldr	r2, [r4, #8]
    4256:	7bd3      	ldrb	r3, [r2, #15]
    4258:	3b01      	subs	r3, #1
    425a:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    425c:	480b      	ldr	r0, [pc, #44]	; (428c <k_sched_lock+0xc0>)
    425e:	f001 f971 	bl	5544 <z_spin_unlock_valid>
    4262:	b968      	cbnz	r0, 4280 <k_sched_lock+0xb4>
    4264:	2384      	movs	r3, #132	; 0x84
    4266:	4a0a      	ldr	r2, [pc, #40]	; (4290 <k_sched_lock+0xc4>)
    4268:	4912      	ldr	r1, [pc, #72]	; (42b4 <k_sched_lock+0xe8>)
    426a:	480b      	ldr	r0, [pc, #44]	; (4298 <k_sched_lock+0xcc>)
    426c:	f001 fd41 	bl	5cf2 <printk>
    4270:	4906      	ldr	r1, [pc, #24]	; (428c <k_sched_lock+0xc0>)
    4272:	4811      	ldr	r0, [pc, #68]	; (42b8 <k_sched_lock+0xec>)
    4274:	f001 fd3d 	bl	5cf2 <printk>
    4278:	2184      	movs	r1, #132	; 0x84
    427a:	4805      	ldr	r0, [pc, #20]	; (4290 <k_sched_lock+0xc4>)
    427c:	f001 fe07 	bl	5e8e <assert_post_action>
	__asm__ volatile(
    4280:	f385 8811 	msr	BASEPRI, r5
    4284:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    4288:	bd38      	pop	{r3, r4, r5, pc}
    428a:	bf00      	nop
    428c:	200003f8 	.word	0x200003f8
    4290:	00007380 	.word	0x00007380
    4294:	000073a6 	.word	0x000073a6
    4298:	00006f74 	.word	0x00006f74
    429c:	000073bb 	.word	0x000073bb
    42a0:	00008428 	.word	0x00008428
    42a4:	000083fd 	.word	0x000083fd
    42a8:	0000843a 	.word	0x0000843a
    42ac:	200003c4 	.word	0x200003c4
    42b0:	0000843d 	.word	0x0000843d
    42b4:	000073d3 	.word	0x000073d3
    42b8:	000073ea 	.word	0x000073ea

000042bc <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    42bc:	4b11      	ldr	r3, [pc, #68]	; (4304 <z_priq_dumb_remove+0x48>)
{
    42be:	b510      	push	{r4, lr}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    42c0:	f103 0228 	add.w	r2, r3, #40	; 0x28
    42c4:	4282      	cmp	r2, r0
{
    42c6:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    42c8:	d105      	bne.n	42d6 <z_priq_dumb_remove+0x1a>
    42ca:	689b      	ldr	r3, [r3, #8]
    42cc:	428b      	cmp	r3, r1
    42ce:	d102      	bne.n	42d6 <z_priq_dumb_remove+0x1a>
    42d0:	7b4b      	ldrb	r3, [r1, #13]
    42d2:	06db      	lsls	r3, r3, #27
    42d4:	d115      	bne.n	4302 <z_priq_dumb_remove+0x46>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    42d6:	4b0c      	ldr	r3, [pc, #48]	; (4308 <z_priq_dumb_remove+0x4c>)
    42d8:	429c      	cmp	r4, r3
    42da:	d10b      	bne.n	42f4 <z_priq_dumb_remove+0x38>
    42dc:	490b      	ldr	r1, [pc, #44]	; (430c <z_priq_dumb_remove+0x50>)
    42de:	480c      	ldr	r0, [pc, #48]	; (4310 <z_priq_dumb_remove+0x54>)
    42e0:	f240 336b 	movw	r3, #875	; 0x36b
    42e4:	4a0b      	ldr	r2, [pc, #44]	; (4314 <z_priq_dumb_remove+0x58>)
    42e6:	f001 fd04 	bl	5cf2 <printk>
    42ea:	f240 316b 	movw	r1, #875	; 0x36b
    42ee:	4809      	ldr	r0, [pc, #36]	; (4314 <z_priq_dumb_remove+0x58>)
    42f0:	f001 fdcd 	bl	5e8e <assert_post_action>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    42f4:	e9d4 3200 	ldrd	r3, r2, [r4]
    42f8:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    42fa:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    42fc:	2300      	movs	r3, #0
	node->prev = NULL;
    42fe:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    4302:	bd10      	pop	{r4, pc}
    4304:	200003c4 	.word	0x200003c4
    4308:	200002d8 	.word	0x200002d8
    430c:	0000846d 	.word	0x0000846d
    4310:	00006f74 	.word	0x00006f74
    4314:	000083c4 	.word	0x000083c4

00004318 <update_cache>:
{
    4318:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    431a:	4c10      	ldr	r4, [pc, #64]	; (435c <update_cache+0x44>)
{
    431c:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    431e:	f104 0028 	add.w	r0, r4, #40	; 0x28
    4322:	f002 fb72 	bl	6a0a <z_priq_dumb_best>
    4326:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
    4328:	68a3      	ldr	r3, [r4, #8]
    432a:	7b59      	ldrb	r1, [r3, #13]
    432c:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
    432e:	bf44      	itt	mi
    4330:	f041 0108 	orrmi.w	r1, r1, #8
    4334:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
    4336:	b905      	cbnz	r5, 433a <update_cache+0x22>
    4338:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
    433a:	b94e      	cbnz	r6, 4350 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
    433c:	7b5a      	ldrb	r2, [r3, #13]
    433e:	06d2      	lsls	r2, r2, #27
    4340:	d106      	bne.n	4350 <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    4342:	69aa      	ldr	r2, [r5, #24]
    4344:	b922      	cbnz	r2, 4350 <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
    4346:	89da      	ldrh	r2, [r3, #14]
    4348:	2a7f      	cmp	r2, #127	; 0x7f
    434a:	d901      	bls.n	4350 <update_cache+0x38>
		_kernel.ready_q.cache = _current;
    434c:	6263      	str	r3, [r4, #36]	; 0x24
}
    434e:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
    4350:	42ab      	cmp	r3, r5
    4352:	d001      	beq.n	4358 <update_cache+0x40>
			z_reset_time_slice();
    4354:	f7ff fdec 	bl	3f30 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    4358:	6265      	str	r5, [r4, #36]	; 0x24
}
    435a:	e7f8      	b.n	434e <update_cache+0x36>
    435c:	200003c4 	.word	0x200003c4

00004360 <k_sched_unlock>:
{
    4360:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    4362:	f04f 0320 	mov.w	r3, #32
    4366:	f3ef 8511 	mrs	r5, BASEPRI
    436a:	f383 8811 	msr	BASEPRI, r3
    436e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4372:	482d      	ldr	r0, [pc, #180]	; (4428 <k_sched_unlock+0xc8>)
    4374:	f001 f8d8 	bl	5528 <z_spin_lock_valid>
    4378:	b968      	cbnz	r0, 4396 <k_sched_unlock+0x36>
    437a:	235c      	movs	r3, #92	; 0x5c
    437c:	4a2b      	ldr	r2, [pc, #172]	; (442c <k_sched_unlock+0xcc>)
    437e:	492c      	ldr	r1, [pc, #176]	; (4430 <k_sched_unlock+0xd0>)
    4380:	482c      	ldr	r0, [pc, #176]	; (4434 <k_sched_unlock+0xd4>)
    4382:	f001 fcb6 	bl	5cf2 <printk>
    4386:	4928      	ldr	r1, [pc, #160]	; (4428 <k_sched_unlock+0xc8>)
    4388:	482b      	ldr	r0, [pc, #172]	; (4438 <k_sched_unlock+0xd8>)
    438a:	f001 fcb2 	bl	5cf2 <printk>
    438e:	215c      	movs	r1, #92	; 0x5c
    4390:	4826      	ldr	r0, [pc, #152]	; (442c <k_sched_unlock+0xcc>)
    4392:	f001 fd7c 	bl	5e8e <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0, "");
    4396:	4c29      	ldr	r4, [pc, #164]	; (443c <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
    4398:	4823      	ldr	r0, [pc, #140]	; (4428 <k_sched_unlock+0xc8>)
    439a:	f001 f8e1 	bl	5560 <z_spin_lock_set_owner>
    439e:	68a2      	ldr	r2, [r4, #8]
    43a0:	7bd2      	ldrb	r2, [r2, #15]
    43a2:	b972      	cbnz	r2, 43c2 <k_sched_unlock+0x62>
    43a4:	4926      	ldr	r1, [pc, #152]	; (4440 <k_sched_unlock+0xe0>)
    43a6:	f240 330a 	movw	r3, #778	; 0x30a
    43aa:	4a26      	ldr	r2, [pc, #152]	; (4444 <k_sched_unlock+0xe4>)
    43ac:	4821      	ldr	r0, [pc, #132]	; (4434 <k_sched_unlock+0xd4>)
    43ae:	f001 fca0 	bl	5cf2 <printk>
    43b2:	4825      	ldr	r0, [pc, #148]	; (4448 <k_sched_unlock+0xe8>)
    43b4:	f001 fc9d 	bl	5cf2 <printk>
    43b8:	f240 310a 	movw	r1, #778	; 0x30a
    43bc:	4821      	ldr	r0, [pc, #132]	; (4444 <k_sched_unlock+0xe4>)
    43be:	f001 fd66 	bl	5e8e <assert_post_action>
    43c2:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    43c6:	b173      	cbz	r3, 43e6 <k_sched_unlock+0x86>
    43c8:	4920      	ldr	r1, [pc, #128]	; (444c <k_sched_unlock+0xec>)
    43ca:	f240 330b 	movw	r3, #779	; 0x30b
    43ce:	4a1d      	ldr	r2, [pc, #116]	; (4444 <k_sched_unlock+0xe4>)
    43d0:	4818      	ldr	r0, [pc, #96]	; (4434 <k_sched_unlock+0xd4>)
    43d2:	f001 fc8e 	bl	5cf2 <printk>
    43d6:	481c      	ldr	r0, [pc, #112]	; (4448 <k_sched_unlock+0xe8>)
    43d8:	f001 fc8b 	bl	5cf2 <printk>
    43dc:	f240 310b 	movw	r1, #779	; 0x30b
    43e0:	4818      	ldr	r0, [pc, #96]	; (4444 <k_sched_unlock+0xe4>)
    43e2:	f001 fd54 	bl	5e8e <assert_post_action>
		++_current->base.sched_locked;
    43e6:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
    43e8:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    43ea:	7bd3      	ldrb	r3, [r2, #15]
    43ec:	3301      	adds	r3, #1
    43ee:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    43f0:	f7ff ff92 	bl	4318 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    43f4:	480c      	ldr	r0, [pc, #48]	; (4428 <k_sched_unlock+0xc8>)
    43f6:	f001 f8a5 	bl	5544 <z_spin_unlock_valid>
    43fa:	b968      	cbnz	r0, 4418 <k_sched_unlock+0xb8>
    43fc:	2384      	movs	r3, #132	; 0x84
    43fe:	4a0b      	ldr	r2, [pc, #44]	; (442c <k_sched_unlock+0xcc>)
    4400:	4913      	ldr	r1, [pc, #76]	; (4450 <k_sched_unlock+0xf0>)
    4402:	480c      	ldr	r0, [pc, #48]	; (4434 <k_sched_unlock+0xd4>)
    4404:	f001 fc75 	bl	5cf2 <printk>
    4408:	4907      	ldr	r1, [pc, #28]	; (4428 <k_sched_unlock+0xc8>)
    440a:	4812      	ldr	r0, [pc, #72]	; (4454 <k_sched_unlock+0xf4>)
    440c:	f001 fc71 	bl	5cf2 <printk>
    4410:	2184      	movs	r1, #132	; 0x84
    4412:	4806      	ldr	r0, [pc, #24]	; (442c <k_sched_unlock+0xcc>)
    4414:	f001 fd3b 	bl	5e8e <assert_post_action>
	__asm__ volatile(
    4418:	f385 8811 	msr	BASEPRI, r5
    441c:	f3bf 8f6f 	isb	sy
}
    4420:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    4424:	f002 bae7 	b.w	69f6 <z_reschedule_unlocked>
    4428:	200003f8 	.word	0x200003f8
    442c:	00007380 	.word	0x00007380
    4430:	000073a6 	.word	0x000073a6
    4434:	00006f74 	.word	0x00006f74
    4438:	000073bb 	.word	0x000073bb
    443c:	200003c4 	.word	0x200003c4
    4440:	0000848e 	.word	0x0000848e
    4444:	000083c4 	.word	0x000083c4
    4448:	0000843a 	.word	0x0000843a
    444c:	00008428 	.word	0x00008428
    4450:	000073d3 	.word	0x000073d3
    4454:	000073ea 	.word	0x000073ea

00004458 <ready_thread>:
{
    4458:	b570      	push	{r4, r5, r6, lr}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    445a:	7b43      	ldrb	r3, [r0, #13]
    445c:	4604      	mov	r4, r0
    445e:	06db      	lsls	r3, r3, #27
    4460:	d13d      	bne.n	44de <ready_thread+0x86>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
    4462:	6985      	ldr	r5, [r0, #24]
	if (z_is_thread_ready(thread)) {
    4464:	2d00      	cmp	r5, #0
    4466:	d13a      	bne.n	44de <ready_thread+0x86>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4468:	4b1d      	ldr	r3, [pc, #116]	; (44e0 <ready_thread+0x88>)
    446a:	4298      	cmp	r0, r3
    446c:	d10b      	bne.n	4486 <ready_thread+0x2e>
    446e:	491d      	ldr	r1, [pc, #116]	; (44e4 <ready_thread+0x8c>)
    4470:	481d      	ldr	r0, [pc, #116]	; (44e8 <ready_thread+0x90>)
    4472:	f240 3355 	movw	r3, #853	; 0x355
    4476:	4a1d      	ldr	r2, [pc, #116]	; (44ec <ready_thread+0x94>)
    4478:	f001 fc3b 	bl	5cf2 <printk>
    447c:	f240 3155 	movw	r1, #853	; 0x355
    4480:	481a      	ldr	r0, [pc, #104]	; (44ec <ready_thread+0x94>)
    4482:	f001 fd04 	bl	5e8e <assert_post_action>
	return list->head == list;
    4486:	4a1a      	ldr	r2, [pc, #104]	; (44f0 <ready_thread+0x98>)
    4488:	4613      	mov	r3, r2
    448a:	f853 0f28 	ldr.w	r0, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    448e:	4298      	cmp	r0, r3
    4490:	bf18      	it	ne
    4492:	4605      	movne	r5, r0
    4494:	2d00      	cmp	r5, #0
    4496:	4619      	mov	r1, r3
    4498:	462b      	mov	r3, r5
    449a:	bf38      	it	cc
    449c:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    449e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    44a0:	b1bb      	cbz	r3, 44d2 <ready_thread+0x7a>
	if (thread_1->base.prio < thread_2->base.prio) {
    44a2:	f994 600e 	ldrsb.w	r6, [r4, #14]
    44a6:	f993 500e 	ldrsb.w	r5, [r3, #14]
    44aa:	42ae      	cmp	r6, r5
    44ac:	db03      	blt.n	44b6 <ready_thread+0x5e>
	return (node == list->tail) ? NULL : node->next;
    44ae:	4298      	cmp	r0, r3
    44b0:	d00f      	beq.n	44d2 <ready_thread+0x7a>
    44b2:	681b      	ldr	r3, [r3, #0]
    44b4:	e7f4      	b.n	44a0 <ready_thread+0x48>
	node->prev = successor->prev;
    44b6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    44b8:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    44bc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    44be:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
    44c0:	7b63      	ldrb	r3, [r4, #13]
		update_cache(0);
    44c2:	2000      	movs	r0, #0
    44c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    44c8:	7363      	strb	r3, [r4, #13]
}
    44ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    44ce:	f7ff bf23 	b.w	4318 <update_cache>
	node->prev = list->tail;
    44d2:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
    44d6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    44d8:	601c      	str	r4, [r3, #0]
	list->tail = node;
    44da:	62d4      	str	r4, [r2, #44]	; 0x2c
}
    44dc:	e7f0      	b.n	44c0 <ready_thread+0x68>
}
    44de:	bd70      	pop	{r4, r5, r6, pc}
    44e0:	200002d8 	.word	0x200002d8
    44e4:	0000846d 	.word	0x0000846d
    44e8:	00006f74 	.word	0x00006f74
    44ec:	000083c4 	.word	0x000083c4
    44f0:	200003c4 	.word	0x200003c4

000044f4 <z_ready_thread>:
{
    44f4:	b538      	push	{r3, r4, r5, lr}
    44f6:	4604      	mov	r4, r0
	__asm__ volatile(
    44f8:	f04f 0320 	mov.w	r3, #32
    44fc:	f3ef 8511 	mrs	r5, BASEPRI
    4500:	f383 8811 	msr	BASEPRI, r3
    4504:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4508:	4817      	ldr	r0, [pc, #92]	; (4568 <z_ready_thread+0x74>)
    450a:	f001 f80d 	bl	5528 <z_spin_lock_valid>
    450e:	b968      	cbnz	r0, 452c <z_ready_thread+0x38>
    4510:	235c      	movs	r3, #92	; 0x5c
    4512:	4a16      	ldr	r2, [pc, #88]	; (456c <z_ready_thread+0x78>)
    4514:	4916      	ldr	r1, [pc, #88]	; (4570 <z_ready_thread+0x7c>)
    4516:	4817      	ldr	r0, [pc, #92]	; (4574 <z_ready_thread+0x80>)
    4518:	f001 fbeb 	bl	5cf2 <printk>
    451c:	4912      	ldr	r1, [pc, #72]	; (4568 <z_ready_thread+0x74>)
    451e:	4816      	ldr	r0, [pc, #88]	; (4578 <z_ready_thread+0x84>)
    4520:	f001 fbe7 	bl	5cf2 <printk>
    4524:	215c      	movs	r1, #92	; 0x5c
    4526:	4811      	ldr	r0, [pc, #68]	; (456c <z_ready_thread+0x78>)
    4528:	f001 fcb1 	bl	5e8e <assert_post_action>
	z_spin_lock_set_owner(l);
    452c:	480e      	ldr	r0, [pc, #56]	; (4568 <z_ready_thread+0x74>)
    452e:	f001 f817 	bl	5560 <z_spin_lock_set_owner>
		ready_thread(thread);
    4532:	4620      	mov	r0, r4
    4534:	f7ff ff90 	bl	4458 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4538:	480b      	ldr	r0, [pc, #44]	; (4568 <z_ready_thread+0x74>)
    453a:	f001 f803 	bl	5544 <z_spin_unlock_valid>
    453e:	b968      	cbnz	r0, 455c <z_ready_thread+0x68>
    4540:	2384      	movs	r3, #132	; 0x84
    4542:	4a0a      	ldr	r2, [pc, #40]	; (456c <z_ready_thread+0x78>)
    4544:	490d      	ldr	r1, [pc, #52]	; (457c <z_ready_thread+0x88>)
    4546:	480b      	ldr	r0, [pc, #44]	; (4574 <z_ready_thread+0x80>)
    4548:	f001 fbd3 	bl	5cf2 <printk>
    454c:	4906      	ldr	r1, [pc, #24]	; (4568 <z_ready_thread+0x74>)
    454e:	480c      	ldr	r0, [pc, #48]	; (4580 <z_ready_thread+0x8c>)
    4550:	f001 fbcf 	bl	5cf2 <printk>
    4554:	2184      	movs	r1, #132	; 0x84
    4556:	4805      	ldr	r0, [pc, #20]	; (456c <z_ready_thread+0x78>)
    4558:	f001 fc99 	bl	5e8e <assert_post_action>
	__asm__ volatile(
    455c:	f385 8811 	msr	BASEPRI, r5
    4560:	f3bf 8f6f 	isb	sy
}
    4564:	bd38      	pop	{r3, r4, r5, pc}
    4566:	bf00      	nop
    4568:	200003f8 	.word	0x200003f8
    456c:	00007380 	.word	0x00007380
    4570:	000073a6 	.word	0x000073a6
    4574:	00006f74 	.word	0x00006f74
    4578:	000073bb 	.word	0x000073bb
    457c:	000073d3 	.word	0x000073d3
    4580:	000073ea 	.word	0x000073ea

00004584 <z_thread_timeout>:
	if (thread->base.pended_on != NULL) {
    4584:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
    4588:	b570      	push	{r4, r5, r6, lr}
    458a:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    458c:	f1a0 0518 	sub.w	r5, r0, #24
	if (thread->base.pended_on != NULL) {
    4590:	2b00      	cmp	r3, #0
    4592:	d042      	beq.n	461a <z_thread_timeout+0x96>
	__asm__ volatile(
    4594:	f04f 0320 	mov.w	r3, #32
    4598:	f3ef 8611 	mrs	r6, BASEPRI
    459c:	f383 8811 	msr	BASEPRI, r3
    45a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    45a4:	4822      	ldr	r0, [pc, #136]	; (4630 <z_thread_timeout+0xac>)
    45a6:	f000 ffbf 	bl	5528 <z_spin_lock_valid>
    45aa:	b968      	cbnz	r0, 45c8 <z_thread_timeout+0x44>
    45ac:	235c      	movs	r3, #92	; 0x5c
    45ae:	4a21      	ldr	r2, [pc, #132]	; (4634 <z_thread_timeout+0xb0>)
    45b0:	4921      	ldr	r1, [pc, #132]	; (4638 <z_thread_timeout+0xb4>)
    45b2:	4822      	ldr	r0, [pc, #136]	; (463c <z_thread_timeout+0xb8>)
    45b4:	f001 fb9d 	bl	5cf2 <printk>
    45b8:	491d      	ldr	r1, [pc, #116]	; (4630 <z_thread_timeout+0xac>)
    45ba:	4821      	ldr	r0, [pc, #132]	; (4640 <z_thread_timeout+0xbc>)
    45bc:	f001 fb99 	bl	5cf2 <printk>
    45c0:	215c      	movs	r1, #92	; 0x5c
    45c2:	481c      	ldr	r0, [pc, #112]	; (4634 <z_thread_timeout+0xb0>)
    45c4:	f001 fc63 	bl	5e8e <assert_post_action>
	z_spin_lock_set_owner(l);
    45c8:	4819      	ldr	r0, [pc, #100]	; (4630 <z_thread_timeout+0xac>)
    45ca:	f000 ffc9 	bl	5560 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    45ce:	f1a4 0010 	sub.w	r0, r4, #16
    45d2:	f7ff fc95 	bl	3f00 <pended_on.isra.0>
    45d6:	4629      	mov	r1, r5
    45d8:	f7ff fe70 	bl	42bc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    45dc:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    45e0:	4813      	ldr	r0, [pc, #76]	; (4630 <z_thread_timeout+0xac>)
    45e2:	f023 0302 	bic.w	r3, r3, #2
    45e6:	f804 3c0b 	strb.w	r3, [r4, #-11]
		thread->base.pended_on = NULL;
    45ea:	2300      	movs	r3, #0
    45ec:	f844 3c10 	str.w	r3, [r4, #-16]
    45f0:	f000 ffa8 	bl	5544 <z_spin_unlock_valid>
    45f4:	b968      	cbnz	r0, 4612 <z_thread_timeout+0x8e>
    45f6:	2384      	movs	r3, #132	; 0x84
    45f8:	4a0e      	ldr	r2, [pc, #56]	; (4634 <z_thread_timeout+0xb0>)
    45fa:	4912      	ldr	r1, [pc, #72]	; (4644 <z_thread_timeout+0xc0>)
    45fc:	480f      	ldr	r0, [pc, #60]	; (463c <z_thread_timeout+0xb8>)
    45fe:	f001 fb78 	bl	5cf2 <printk>
    4602:	490b      	ldr	r1, [pc, #44]	; (4630 <z_thread_timeout+0xac>)
    4604:	4810      	ldr	r0, [pc, #64]	; (4648 <z_thread_timeout+0xc4>)
    4606:	f001 fb74 	bl	5cf2 <printk>
    460a:	2184      	movs	r1, #132	; 0x84
    460c:	4809      	ldr	r0, [pc, #36]	; (4634 <z_thread_timeout+0xb0>)
    460e:	f001 fc3e 	bl	5e8e <assert_post_action>
	__asm__ volatile(
    4612:	f386 8811 	msr	BASEPRI, r6
    4616:	f3bf 8f6f 	isb	sy
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    461a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	z_ready_thread(thread);
    461e:	4628      	mov	r0, r5
    4620:	f023 0314 	bic.w	r3, r3, #20
    4624:	f804 3c0b 	strb.w	r3, [r4, #-11]
}
    4628:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    462c:	f7ff bf62 	b.w	44f4 <z_ready_thread>
    4630:	200003f8 	.word	0x200003f8
    4634:	00007380 	.word	0x00007380
    4638:	000073a6 	.word	0x000073a6
    463c:	00006f74 	.word	0x00006f74
    4640:	000073bb 	.word	0x000073bb
    4644:	000073d3 	.word	0x000073d3
    4648:	000073ea 	.word	0x000073ea

0000464c <z_sched_start>:
{
    464c:	b538      	push	{r3, r4, r5, lr}
    464e:	4604      	mov	r4, r0
	__asm__ volatile(
    4650:	f04f 0320 	mov.w	r3, #32
    4654:	f3ef 8511 	mrs	r5, BASEPRI
    4658:	f383 8811 	msr	BASEPRI, r3
    465c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4660:	481d      	ldr	r0, [pc, #116]	; (46d8 <z_sched_start+0x8c>)
    4662:	f000 ff61 	bl	5528 <z_spin_lock_valid>
    4666:	b968      	cbnz	r0, 4684 <z_sched_start+0x38>
    4668:	235c      	movs	r3, #92	; 0x5c
    466a:	4a1c      	ldr	r2, [pc, #112]	; (46dc <z_sched_start+0x90>)
    466c:	491c      	ldr	r1, [pc, #112]	; (46e0 <z_sched_start+0x94>)
    466e:	481d      	ldr	r0, [pc, #116]	; (46e4 <z_sched_start+0x98>)
    4670:	f001 fb3f 	bl	5cf2 <printk>
    4674:	4918      	ldr	r1, [pc, #96]	; (46d8 <z_sched_start+0x8c>)
    4676:	481c      	ldr	r0, [pc, #112]	; (46e8 <z_sched_start+0x9c>)
    4678:	f001 fb3b 	bl	5cf2 <printk>
    467c:	215c      	movs	r1, #92	; 0x5c
    467e:	4817      	ldr	r0, [pc, #92]	; (46dc <z_sched_start+0x90>)
    4680:	f001 fc05 	bl	5e8e <assert_post_action>
	z_spin_lock_set_owner(l);
    4684:	4814      	ldr	r0, [pc, #80]	; (46d8 <z_sched_start+0x8c>)
    4686:	f000 ff6b 	bl	5560 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
    468a:	7b63      	ldrb	r3, [r4, #13]
    468c:	075a      	lsls	r2, r3, #29
    468e:	d416      	bmi.n	46be <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4690:	4811      	ldr	r0, [pc, #68]	; (46d8 <z_sched_start+0x8c>)
    4692:	f000 ff57 	bl	5544 <z_spin_unlock_valid>
    4696:	b968      	cbnz	r0, 46b4 <z_sched_start+0x68>
    4698:	2384      	movs	r3, #132	; 0x84
    469a:	4a10      	ldr	r2, [pc, #64]	; (46dc <z_sched_start+0x90>)
    469c:	4913      	ldr	r1, [pc, #76]	; (46ec <z_sched_start+0xa0>)
    469e:	4811      	ldr	r0, [pc, #68]	; (46e4 <z_sched_start+0x98>)
    46a0:	f001 fb27 	bl	5cf2 <printk>
    46a4:	490c      	ldr	r1, [pc, #48]	; (46d8 <z_sched_start+0x8c>)
    46a6:	4812      	ldr	r0, [pc, #72]	; (46f0 <z_sched_start+0xa4>)
    46a8:	f001 fb23 	bl	5cf2 <printk>
    46ac:	2184      	movs	r1, #132	; 0x84
    46ae:	480b      	ldr	r0, [pc, #44]	; (46dc <z_sched_start+0x90>)
    46b0:	f001 fbed 	bl	5e8e <assert_post_action>
	__asm__ volatile(
    46b4:	f385 8811 	msr	BASEPRI, r5
    46b8:	f3bf 8f6f 	isb	sy
}
    46bc:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    46be:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    46c2:	4620      	mov	r0, r4
    46c4:	7363      	strb	r3, [r4, #13]
    46c6:	f7ff fec7 	bl	4458 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    46ca:	4629      	mov	r1, r5
}
    46cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    46d0:	4801      	ldr	r0, [pc, #4]	; (46d8 <z_sched_start+0x8c>)
    46d2:	f7ff bd3f 	b.w	4154 <z_reschedule>
    46d6:	bf00      	nop
    46d8:	200003f8 	.word	0x200003f8
    46dc:	00007380 	.word	0x00007380
    46e0:	000073a6 	.word	0x000073a6
    46e4:	00006f74 	.word	0x00006f74
    46e8:	000073bb 	.word	0x000073bb
    46ec:	000073d3 	.word	0x000073d3
    46f0:	000073ea 	.word	0x000073ea

000046f4 <z_move_thread_to_end_of_prio_q>:
{
    46f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    46f6:	4604      	mov	r4, r0
	__asm__ volatile(
    46f8:	f04f 0320 	mov.w	r3, #32
    46fc:	f3ef 8511 	mrs	r5, BASEPRI
    4700:	f383 8811 	msr	BASEPRI, r3
    4704:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4708:	4837      	ldr	r0, [pc, #220]	; (47e8 <z_move_thread_to_end_of_prio_q+0xf4>)
    470a:	f000 ff0d 	bl	5528 <z_spin_lock_valid>
    470e:	b968      	cbnz	r0, 472c <z_move_thread_to_end_of_prio_q+0x38>
    4710:	235c      	movs	r3, #92	; 0x5c
    4712:	4a36      	ldr	r2, [pc, #216]	; (47ec <z_move_thread_to_end_of_prio_q+0xf8>)
    4714:	4936      	ldr	r1, [pc, #216]	; (47f0 <z_move_thread_to_end_of_prio_q+0xfc>)
    4716:	4837      	ldr	r0, [pc, #220]	; (47f4 <z_move_thread_to_end_of_prio_q+0x100>)
    4718:	f001 faeb 	bl	5cf2 <printk>
    471c:	4932      	ldr	r1, [pc, #200]	; (47e8 <z_move_thread_to_end_of_prio_q+0xf4>)
    471e:	4836      	ldr	r0, [pc, #216]	; (47f8 <z_move_thread_to_end_of_prio_q+0x104>)
    4720:	f001 fae7 	bl	5cf2 <printk>
    4724:	215c      	movs	r1, #92	; 0x5c
    4726:	4831      	ldr	r0, [pc, #196]	; (47ec <z_move_thread_to_end_of_prio_q+0xf8>)
    4728:	f001 fbb1 	bl	5e8e <assert_post_action>
	z_spin_lock_set_owner(l);
    472c:	482e      	ldr	r0, [pc, #184]	; (47e8 <z_move_thread_to_end_of_prio_q+0xf4>)
    472e:	f000 ff17 	bl	5560 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    4732:	f994 300d 	ldrsb.w	r3, [r4, #13]
    4736:	2b00      	cmp	r3, #0
    4738:	da03      	bge.n	4742 <z_move_thread_to_end_of_prio_q+0x4e>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    473a:	4621      	mov	r1, r4
    473c:	482f      	ldr	r0, [pc, #188]	; (47fc <z_move_thread_to_end_of_prio_q+0x108>)
    473e:	f7ff fdbd 	bl	42bc <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4742:	4b2f      	ldr	r3, [pc, #188]	; (4800 <z_move_thread_to_end_of_prio_q+0x10c>)
    4744:	429c      	cmp	r4, r3
    4746:	d10b      	bne.n	4760 <z_move_thread_to_end_of_prio_q+0x6c>
    4748:	492e      	ldr	r1, [pc, #184]	; (4804 <z_move_thread_to_end_of_prio_q+0x110>)
    474a:	482a      	ldr	r0, [pc, #168]	; (47f4 <z_move_thread_to_end_of_prio_q+0x100>)
    474c:	f240 3355 	movw	r3, #853	; 0x355
    4750:	4a2d      	ldr	r2, [pc, #180]	; (4808 <z_move_thread_to_end_of_prio_q+0x114>)
    4752:	f001 face 	bl	5cf2 <printk>
    4756:	f240 3155 	movw	r1, #853	; 0x355
    475a:	482b      	ldr	r0, [pc, #172]	; (4808 <z_move_thread_to_end_of_prio_q+0x114>)
    475c:	f001 fb97 	bl	5e8e <assert_post_action>
	return list->head == list;
    4760:	4a2a      	ldr	r2, [pc, #168]	; (480c <z_move_thread_to_end_of_prio_q+0x118>)
    4762:	4611      	mov	r1, r2
    4764:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4768:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
    476a:	428b      	cmp	r3, r1
    476c:	bf08      	it	eq
    476e:	2300      	moveq	r3, #0
    4770:	2b00      	cmp	r3, #0
    4772:	bf38      	it	cc
    4774:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4776:	2b00      	cmp	r3, #0
    4778:	d02f      	beq.n	47da <z_move_thread_to_end_of_prio_q+0xe6>
	if (thread_1->base.prio < thread_2->base.prio) {
    477a:	f994 700e 	ldrsb.w	r7, [r4, #14]
    477e:	f993 600e 	ldrsb.w	r6, [r3, #14]
    4782:	42b7      	cmp	r7, r6
    4784:	db03      	blt.n	478e <z_move_thread_to_end_of_prio_q+0x9a>
	return (node == list->tail) ? NULL : node->next;
    4786:	4283      	cmp	r3, r0
    4788:	d027      	beq.n	47da <z_move_thread_to_end_of_prio_q+0xe6>
    478a:	681b      	ldr	r3, [r3, #0]
    478c:	e7f3      	b.n	4776 <z_move_thread_to_end_of_prio_q+0x82>
	node->prev = successor->prev;
    478e:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    4790:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
    4794:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    4796:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
    4798:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
    479a:	6890      	ldr	r0, [r2, #8]
    479c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    47a0:	7363      	strb	r3, [r4, #13]
    47a2:	1b03      	subs	r3, r0, r4
    47a4:	4258      	negs	r0, r3
    47a6:	4158      	adcs	r0, r3
    47a8:	f7ff fdb6 	bl	4318 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    47ac:	480e      	ldr	r0, [pc, #56]	; (47e8 <z_move_thread_to_end_of_prio_q+0xf4>)
    47ae:	f000 fec9 	bl	5544 <z_spin_unlock_valid>
    47b2:	b968      	cbnz	r0, 47d0 <z_move_thread_to_end_of_prio_q+0xdc>
    47b4:	2384      	movs	r3, #132	; 0x84
    47b6:	4a0d      	ldr	r2, [pc, #52]	; (47ec <z_move_thread_to_end_of_prio_q+0xf8>)
    47b8:	4915      	ldr	r1, [pc, #84]	; (4810 <z_move_thread_to_end_of_prio_q+0x11c>)
    47ba:	480e      	ldr	r0, [pc, #56]	; (47f4 <z_move_thread_to_end_of_prio_q+0x100>)
    47bc:	f001 fa99 	bl	5cf2 <printk>
    47c0:	4909      	ldr	r1, [pc, #36]	; (47e8 <z_move_thread_to_end_of_prio_q+0xf4>)
    47c2:	4814      	ldr	r0, [pc, #80]	; (4814 <z_move_thread_to_end_of_prio_q+0x120>)
    47c4:	f001 fa95 	bl	5cf2 <printk>
    47c8:	2184      	movs	r1, #132	; 0x84
    47ca:	4808      	ldr	r0, [pc, #32]	; (47ec <z_move_thread_to_end_of_prio_q+0xf8>)
    47cc:	f001 fb5f 	bl	5e8e <assert_post_action>
	__asm__ volatile(
    47d0:	f385 8811 	msr	BASEPRI, r5
    47d4:	f3bf 8f6f 	isb	sy
}
    47d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node->prev = list->tail;
    47da:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
    47de:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    47e0:	601c      	str	r4, [r3, #0]
	list->tail = node;
    47e2:	62d4      	str	r4, [r2, #44]	; 0x2c
}
    47e4:	e7d8      	b.n	4798 <z_move_thread_to_end_of_prio_q+0xa4>
    47e6:	bf00      	nop
    47e8:	200003f8 	.word	0x200003f8
    47ec:	00007380 	.word	0x00007380
    47f0:	000073a6 	.word	0x000073a6
    47f4:	00006f74 	.word	0x00006f74
    47f8:	000073bb 	.word	0x000073bb
    47fc:	200003ec 	.word	0x200003ec
    4800:	200002d8 	.word	0x200002d8
    4804:	0000846d 	.word	0x0000846d
    4808:	000083c4 	.word	0x000083c4
    480c:	200003c4 	.word	0x200003c4
    4810:	000073d3 	.word	0x000073d3
    4814:	000073ea 	.word	0x000073ea

00004818 <z_time_slice>:
{
    4818:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
    481a:	4a15      	ldr	r2, [pc, #84]	; (4870 <z_time_slice+0x58>)
    481c:	4b15      	ldr	r3, [pc, #84]	; (4874 <z_time_slice+0x5c>)
    481e:	6814      	ldr	r4, [r2, #0]
{
    4820:	4601      	mov	r1, r0
	if (pending_current == _current) {
    4822:	6898      	ldr	r0, [r3, #8]
    4824:	42a0      	cmp	r0, r4
    4826:	461c      	mov	r4, r3
    4828:	d103      	bne.n	4832 <z_time_slice+0x1a>
}
    482a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
    482e:	f7ff bb7f 	b.w	3f30 <z_reset_time_slice>
	pending_current = NULL;
    4832:	2500      	movs	r5, #0
    4834:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
    4836:	4a10      	ldr	r2, [pc, #64]	; (4878 <z_time_slice+0x60>)
    4838:	6812      	ldr	r2, [r2, #0]
    483a:	b1b2      	cbz	r2, 486a <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
    483c:	89c2      	ldrh	r2, [r0, #14]
    483e:	2a7f      	cmp	r2, #127	; 0x7f
    4840:	d813      	bhi.n	486a <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    4842:	4a0e      	ldr	r2, [pc, #56]	; (487c <z_time_slice+0x64>)
    4844:	f990 500e 	ldrsb.w	r5, [r0, #14]
    4848:	6812      	ldr	r2, [r2, #0]
    484a:	4295      	cmp	r5, r2
    484c:	db0d      	blt.n	486a <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
    484e:	4a0c      	ldr	r2, [pc, #48]	; (4880 <z_time_slice+0x68>)
    4850:	4290      	cmp	r0, r2
    4852:	d00a      	beq.n	486a <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
    4854:	6982      	ldr	r2, [r0, #24]
    4856:	b942      	cbnz	r2, 486a <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
    4858:	691a      	ldr	r2, [r3, #16]
    485a:	428a      	cmp	r2, r1
    485c:	dc02      	bgt.n	4864 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
    485e:	f7ff ff49 	bl	46f4 <z_move_thread_to_end_of_prio_q>
    4862:	e7e2      	b.n	482a <z_time_slice+0x12>
			_current_cpu->slice_ticks -= ticks;
    4864:	1a52      	subs	r2, r2, r1
    4866:	611a      	str	r2, [r3, #16]
}
    4868:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
    486a:	2300      	movs	r3, #0
    486c:	6123      	str	r3, [r4, #16]
    486e:	e7fb      	b.n	4868 <z_time_slice+0x50>
    4870:	200003f4 	.word	0x200003f4
    4874:	200003c4 	.word	0x200003c4
    4878:	20000400 	.word	0x20000400
    487c:	200003fc 	.word	0x200003fc
    4880:	200002d8 	.word	0x200002d8

00004884 <z_impl_k_thread_suspend>:
{
    4884:	b570      	push	{r4, r5, r6, lr}
    4886:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    4888:	3018      	adds	r0, #24
    488a:	f000 ff89 	bl	57a0 <z_abort_timeout>
	__asm__ volatile(
    488e:	f04f 0320 	mov.w	r3, #32
    4892:	f3ef 8611 	mrs	r6, BASEPRI
    4896:	f383 8811 	msr	BASEPRI, r3
    489a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    489e:	4825      	ldr	r0, [pc, #148]	; (4934 <z_impl_k_thread_suspend+0xb0>)
    48a0:	f000 fe42 	bl	5528 <z_spin_lock_valid>
    48a4:	b968      	cbnz	r0, 48c2 <z_impl_k_thread_suspend+0x3e>
    48a6:	235c      	movs	r3, #92	; 0x5c
    48a8:	4a23      	ldr	r2, [pc, #140]	; (4938 <z_impl_k_thread_suspend+0xb4>)
    48aa:	4924      	ldr	r1, [pc, #144]	; (493c <z_impl_k_thread_suspend+0xb8>)
    48ac:	4824      	ldr	r0, [pc, #144]	; (4940 <z_impl_k_thread_suspend+0xbc>)
    48ae:	f001 fa20 	bl	5cf2 <printk>
    48b2:	4920      	ldr	r1, [pc, #128]	; (4934 <z_impl_k_thread_suspend+0xb0>)
    48b4:	4823      	ldr	r0, [pc, #140]	; (4944 <z_impl_k_thread_suspend+0xc0>)
    48b6:	f001 fa1c 	bl	5cf2 <printk>
    48ba:	215c      	movs	r1, #92	; 0x5c
    48bc:	481e      	ldr	r0, [pc, #120]	; (4938 <z_impl_k_thread_suspend+0xb4>)
    48be:	f001 fae6 	bl	5e8e <assert_post_action>
	z_spin_lock_set_owner(l);
    48c2:	481c      	ldr	r0, [pc, #112]	; (4934 <z_impl_k_thread_suspend+0xb0>)
    48c4:	f000 fe4c 	bl	5560 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    48c8:	f994 300d 	ldrsb.w	r3, [r4, #13]
    48cc:	2b00      	cmp	r3, #0
    48ce:	da07      	bge.n	48e0 <z_impl_k_thread_suspend+0x5c>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    48d0:	4621      	mov	r1, r4
    48d2:	481d      	ldr	r0, [pc, #116]	; (4948 <z_impl_k_thread_suspend+0xc4>)
    48d4:	f7ff fcf2 	bl	42bc <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    48d8:	7b63      	ldrb	r3, [r4, #13]
    48da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    48de:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    48e0:	4d1a      	ldr	r5, [pc, #104]	; (494c <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    48e2:	7b63      	ldrb	r3, [r4, #13]
    48e4:	68a8      	ldr	r0, [r5, #8]
    48e6:	f043 0310 	orr.w	r3, r3, #16
    48ea:	7363      	strb	r3, [r4, #13]
    48ec:	1b03      	subs	r3, r0, r4
    48ee:	4258      	negs	r0, r3
    48f0:	4158      	adcs	r0, r3
    48f2:	f7ff fd11 	bl	4318 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    48f6:	480f      	ldr	r0, [pc, #60]	; (4934 <z_impl_k_thread_suspend+0xb0>)
    48f8:	f000 fe24 	bl	5544 <z_spin_unlock_valid>
    48fc:	b968      	cbnz	r0, 491a <z_impl_k_thread_suspend+0x96>
    48fe:	2384      	movs	r3, #132	; 0x84
    4900:	4a0d      	ldr	r2, [pc, #52]	; (4938 <z_impl_k_thread_suspend+0xb4>)
    4902:	4913      	ldr	r1, [pc, #76]	; (4950 <z_impl_k_thread_suspend+0xcc>)
    4904:	480e      	ldr	r0, [pc, #56]	; (4940 <z_impl_k_thread_suspend+0xbc>)
    4906:	f001 f9f4 	bl	5cf2 <printk>
    490a:	490a      	ldr	r1, [pc, #40]	; (4934 <z_impl_k_thread_suspend+0xb0>)
    490c:	4811      	ldr	r0, [pc, #68]	; (4954 <z_impl_k_thread_suspend+0xd0>)
    490e:	f001 f9f0 	bl	5cf2 <printk>
    4912:	2184      	movs	r1, #132	; 0x84
    4914:	4808      	ldr	r0, [pc, #32]	; (4938 <z_impl_k_thread_suspend+0xb4>)
    4916:	f001 faba 	bl	5e8e <assert_post_action>
	__asm__ volatile(
    491a:	f386 8811 	msr	BASEPRI, r6
    491e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    4922:	68ab      	ldr	r3, [r5, #8]
    4924:	42a3      	cmp	r3, r4
    4926:	d103      	bne.n	4930 <z_impl_k_thread_suspend+0xac>
}
    4928:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    492c:	f002 b863 	b.w	69f6 <z_reschedule_unlocked>
}
    4930:	bd70      	pop	{r4, r5, r6, pc}
    4932:	bf00      	nop
    4934:	200003f8 	.word	0x200003f8
    4938:	00007380 	.word	0x00007380
    493c:	000073a6 	.word	0x000073a6
    4940:	00006f74 	.word	0x00006f74
    4944:	000073bb 	.word	0x000073bb
    4948:	200003ec 	.word	0x200003ec
    494c:	200003c4 	.word	0x200003c4
    4950:	000073d3 	.word	0x000073d3
    4954:	000073ea 	.word	0x000073ea

00004958 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
    4958:	6d83      	ldr	r3, [r0, #88]	; 0x58
{
    495a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    495e:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    4960:	b103      	cbz	r3, 4964 <z_thread_single_abort+0xc>
		thread->fn_abort();
    4962:	4798      	blx	r3
    4964:	f104 0018 	add.w	r0, r4, #24
    4968:	f000 ff1a 	bl	57a0 <z_abort_timeout>
	__asm__ volatile(
    496c:	f04f 0320 	mov.w	r3, #32
    4970:	f3ef 8611 	mrs	r6, BASEPRI
    4974:	f383 8811 	msr	BASEPRI, r3
    4978:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    497c:	4839      	ldr	r0, [pc, #228]	; (4a64 <z_thread_single_abort+0x10c>)
    497e:	f000 fdd3 	bl	5528 <z_spin_lock_valid>
    4982:	b968      	cbnz	r0, 49a0 <z_thread_single_abort+0x48>
    4984:	235c      	movs	r3, #92	; 0x5c
    4986:	4a38      	ldr	r2, [pc, #224]	; (4a68 <z_thread_single_abort+0x110>)
    4988:	4938      	ldr	r1, [pc, #224]	; (4a6c <z_thread_single_abort+0x114>)
    498a:	4839      	ldr	r0, [pc, #228]	; (4a70 <z_thread_single_abort+0x118>)
    498c:	f001 f9b1 	bl	5cf2 <printk>
    4990:	4934      	ldr	r1, [pc, #208]	; (4a64 <z_thread_single_abort+0x10c>)
    4992:	4838      	ldr	r0, [pc, #224]	; (4a74 <z_thread_single_abort+0x11c>)
    4994:	f001 f9ad 	bl	5cf2 <printk>
    4998:	215c      	movs	r1, #92	; 0x5c
    499a:	4833      	ldr	r0, [pc, #204]	; (4a68 <z_thread_single_abort+0x110>)
    499c:	f001 fa77 	bl	5e8e <assert_post_action>
	z_spin_lock_set_owner(l);
    49a0:	4830      	ldr	r0, [pc, #192]	; (4a64 <z_thread_single_abort+0x10c>)
    49a2:	f000 fddd 	bl	5560 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    49a6:	7b63      	ldrb	r3, [r4, #13]
    49a8:	06d8      	lsls	r0, r3, #27
    49aa:	d136      	bne.n	4a1a <z_thread_single_abort+0xc2>
		if (z_is_thread_ready(thread)) {
    49ac:	69a2      	ldr	r2, [r4, #24]
    49ae:	2a00      	cmp	r2, #0
    49b0:	d133      	bne.n	4a1a <z_thread_single_abort+0xc2>
			if (z_is_thread_queued(thread)) {
    49b2:	0619      	lsls	r1, r3, #24
    49b4:	d507      	bpl.n	49c6 <z_thread_single_abort+0x6e>
				_priq_run_remove(&_kernel.ready_q.runq,
    49b6:	4621      	mov	r1, r4
    49b8:	482f      	ldr	r0, [pc, #188]	; (4a78 <z_thread_single_abort+0x120>)
    49ba:	f7ff fc7f 	bl	42bc <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    49be:	7b63      	ldrb	r3, [r4, #13]
    49c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    49c4:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
    49c6:	4b2d      	ldr	r3, [pc, #180]	; (4a7c <z_thread_single_abort+0x124>)
    49c8:	6898      	ldr	r0, [r3, #8]
    49ca:	1b02      	subs	r2, r0, r4
    49cc:	4250      	negs	r0, r2
    49ce:	4150      	adcs	r0, r2
    49d0:	f7ff fca2 	bl	4318 <update_cache>
			waiter->base.pended_on = NULL;
    49d4:	2700      	movs	r7, #0
		thread->base.thread_state |= mask;
    49d6:	7b63      	ldrb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    49d8:	f104 0828 	add.w	r8, r4, #40	; 0x28
    49dc:	f043 0308 	orr.w	r3, r3, #8
    49e0:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    49e2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    49e4:	4545      	cmp	r5, r8
    49e6:	d000      	beq.n	49ea <z_thread_single_abort+0x92>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
    49e8:	bb3d      	cbnz	r5, 4a3a <z_thread_single_abort+0xe2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    49ea:	481e      	ldr	r0, [pc, #120]	; (4a64 <z_thread_single_abort+0x10c>)
    49ec:	f000 fdaa 	bl	5544 <z_spin_unlock_valid>
    49f0:	b968      	cbnz	r0, 4a0e <z_thread_single_abort+0xb6>
    49f2:	2384      	movs	r3, #132	; 0x84
    49f4:	4a1c      	ldr	r2, [pc, #112]	; (4a68 <z_thread_single_abort+0x110>)
    49f6:	4922      	ldr	r1, [pc, #136]	; (4a80 <z_thread_single_abort+0x128>)
    49f8:	481d      	ldr	r0, [pc, #116]	; (4a70 <z_thread_single_abort+0x118>)
    49fa:	f001 f97a 	bl	5cf2 <printk>
    49fe:	4919      	ldr	r1, [pc, #100]	; (4a64 <z_thread_single_abort+0x10c>)
    4a00:	4820      	ldr	r0, [pc, #128]	; (4a84 <z_thread_single_abort+0x12c>)
    4a02:	f001 f976 	bl	5cf2 <printk>
    4a06:	2184      	movs	r1, #132	; 0x84
    4a08:	4817      	ldr	r0, [pc, #92]	; (4a68 <z_thread_single_abort+0x110>)
    4a0a:	f001 fa40 	bl	5e8e <assert_post_action>
	__asm__ volatile(
    4a0e:	f386 8811 	msr	BASEPRI, r6
    4a12:	f3bf 8f6f 	isb	sy
}
    4a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
    4a1a:	079b      	lsls	r3, r3, #30
    4a1c:	d5da      	bpl.n	49d4 <z_thread_single_abort+0x7c>
				_priq_wait_remove(&pended_on(thread)->waitq,
    4a1e:	f104 0008 	add.w	r0, r4, #8
    4a22:	f7ff fa6d 	bl	3f00 <pended_on.isra.0>
    4a26:	4621      	mov	r1, r4
    4a28:	f7ff fc48 	bl	42bc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    4a2c:	7b63      	ldrb	r3, [r4, #13]
    4a2e:	f023 0302 	bic.w	r3, r3, #2
    4a32:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
    4a34:	2300      	movs	r3, #0
    4a36:	60a3      	str	r3, [r4, #8]
    4a38:	e7cc      	b.n	49d4 <z_thread_single_abort+0x7c>
    4a3a:	f105 0018 	add.w	r0, r5, #24
    4a3e:	f000 feaf 	bl	57a0 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
    4a42:	f105 0008 	add.w	r0, r5, #8
    4a46:	f7ff fa5b 	bl	3f00 <pended_on.isra.0>
    4a4a:	4629      	mov	r1, r5
    4a4c:	f7ff fc36 	bl	42bc <z_priq_dumb_remove>
    4a50:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
    4a52:	4628      	mov	r0, r5
    4a54:	f023 0302 	bic.w	r3, r3, #2
    4a58:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
    4a5a:	60af      	str	r7, [r5, #8]
    4a5c:	672f      	str	r7, [r5, #112]	; 0x70
			ready_thread(waiter);
    4a5e:	f7ff fcfb 	bl	4458 <ready_thread>
    4a62:	e7be      	b.n	49e2 <z_thread_single_abort+0x8a>
    4a64:	200003f8 	.word	0x200003f8
    4a68:	00007380 	.word	0x00007380
    4a6c:	000073a6 	.word	0x000073a6
    4a70:	00006f74 	.word	0x00006f74
    4a74:	000073bb 	.word	0x000073bb
    4a78:	200003ec 	.word	0x200003ec
    4a7c:	200003c4 	.word	0x200003c4
    4a80:	000073d3 	.word	0x000073d3
    4a84:	000073ea 	.word	0x000073ea

00004a88 <unready_thread>:
{
    4a88:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    4a8a:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
    4a8e:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    4a90:	2b00      	cmp	r3, #0
    4a92:	da07      	bge.n	4aa4 <unready_thread+0x1c>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    4a94:	4601      	mov	r1, r0
    4a96:	4808      	ldr	r0, [pc, #32]	; (4ab8 <unready_thread+0x30>)
    4a98:	f7ff fc10 	bl	42bc <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    4a9c:	7b63      	ldrb	r3, [r4, #13]
    4a9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4aa2:	7363      	strb	r3, [r4, #13]
	update_cache(thread == _current);
    4aa4:	4b05      	ldr	r3, [pc, #20]	; (4abc <unready_thread+0x34>)
    4aa6:	6898      	ldr	r0, [r3, #8]
    4aa8:	1b03      	subs	r3, r0, r4
    4aaa:	4258      	negs	r0, r3
    4aac:	4158      	adcs	r0, r3
}
    4aae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    4ab2:	f7ff bc31 	b.w	4318 <update_cache>
    4ab6:	bf00      	nop
    4ab8:	200003ec 	.word	0x200003ec
    4abc:	200003c4 	.word	0x200003c4

00004ac0 <z_remove_thread_from_ready_q>:
{
    4ac0:	b538      	push	{r3, r4, r5, lr}
    4ac2:	4604      	mov	r4, r0
	__asm__ volatile(
    4ac4:	f04f 0320 	mov.w	r3, #32
    4ac8:	f3ef 8511 	mrs	r5, BASEPRI
    4acc:	f383 8811 	msr	BASEPRI, r3
    4ad0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4ad4:	4817      	ldr	r0, [pc, #92]	; (4b34 <z_remove_thread_from_ready_q+0x74>)
    4ad6:	f000 fd27 	bl	5528 <z_spin_lock_valid>
    4ada:	b968      	cbnz	r0, 4af8 <z_remove_thread_from_ready_q+0x38>
    4adc:	235c      	movs	r3, #92	; 0x5c
    4ade:	4a16      	ldr	r2, [pc, #88]	; (4b38 <z_remove_thread_from_ready_q+0x78>)
    4ae0:	4916      	ldr	r1, [pc, #88]	; (4b3c <z_remove_thread_from_ready_q+0x7c>)
    4ae2:	4817      	ldr	r0, [pc, #92]	; (4b40 <z_remove_thread_from_ready_q+0x80>)
    4ae4:	f001 f905 	bl	5cf2 <printk>
    4ae8:	4912      	ldr	r1, [pc, #72]	; (4b34 <z_remove_thread_from_ready_q+0x74>)
    4aea:	4816      	ldr	r0, [pc, #88]	; (4b44 <z_remove_thread_from_ready_q+0x84>)
    4aec:	f001 f901 	bl	5cf2 <printk>
    4af0:	215c      	movs	r1, #92	; 0x5c
    4af2:	4811      	ldr	r0, [pc, #68]	; (4b38 <z_remove_thread_from_ready_q+0x78>)
    4af4:	f001 f9cb 	bl	5e8e <assert_post_action>
	z_spin_lock_set_owner(l);
    4af8:	480e      	ldr	r0, [pc, #56]	; (4b34 <z_remove_thread_from_ready_q+0x74>)
    4afa:	f000 fd31 	bl	5560 <z_spin_lock_set_owner>
		unready_thread(thread);
    4afe:	4620      	mov	r0, r4
    4b00:	f7ff ffc2 	bl	4a88 <unready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4b04:	480b      	ldr	r0, [pc, #44]	; (4b34 <z_remove_thread_from_ready_q+0x74>)
    4b06:	f000 fd1d 	bl	5544 <z_spin_unlock_valid>
    4b0a:	b968      	cbnz	r0, 4b28 <z_remove_thread_from_ready_q+0x68>
    4b0c:	2384      	movs	r3, #132	; 0x84
    4b0e:	4a0a      	ldr	r2, [pc, #40]	; (4b38 <z_remove_thread_from_ready_q+0x78>)
    4b10:	490d      	ldr	r1, [pc, #52]	; (4b48 <z_remove_thread_from_ready_q+0x88>)
    4b12:	480b      	ldr	r0, [pc, #44]	; (4b40 <z_remove_thread_from_ready_q+0x80>)
    4b14:	f001 f8ed 	bl	5cf2 <printk>
    4b18:	4906      	ldr	r1, [pc, #24]	; (4b34 <z_remove_thread_from_ready_q+0x74>)
    4b1a:	480c      	ldr	r0, [pc, #48]	; (4b4c <z_remove_thread_from_ready_q+0x8c>)
    4b1c:	f001 f8e9 	bl	5cf2 <printk>
    4b20:	2184      	movs	r1, #132	; 0x84
    4b22:	4805      	ldr	r0, [pc, #20]	; (4b38 <z_remove_thread_from_ready_q+0x78>)
    4b24:	f001 f9b3 	bl	5e8e <assert_post_action>
	__asm__ volatile(
    4b28:	f385 8811 	msr	BASEPRI, r5
    4b2c:	f3bf 8f6f 	isb	sy
}
    4b30:	bd38      	pop	{r3, r4, r5, pc}
    4b32:	bf00      	nop
    4b34:	200003f8 	.word	0x200003f8
    4b38:	00007380 	.word	0x00007380
    4b3c:	000073a6 	.word	0x000073a6
    4b40:	00006f74 	.word	0x00006f74
    4b44:	000073bb 	.word	0x000073bb
    4b48:	000073d3 	.word	0x000073d3
    4b4c:	000073ea 	.word	0x000073ea

00004b50 <add_to_waitq_locked>:
{
    4b50:	b538      	push	{r3, r4, r5, lr}
    4b52:	4604      	mov	r4, r0
    4b54:	460d      	mov	r5, r1
	unready_thread(thread);
    4b56:	f7ff ff97 	bl	4a88 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    4b5a:	7b63      	ldrb	r3, [r4, #13]
    4b5c:	f043 0302 	orr.w	r3, r3, #2
    4b60:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    4b62:	b33d      	cbz	r5, 4bb4 <add_to_waitq_locked+0x64>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4b64:	4b17      	ldr	r3, [pc, #92]	; (4bc4 <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
    4b66:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4b68:	429c      	cmp	r4, r3
    4b6a:	d10b      	bne.n	4b84 <add_to_waitq_locked+0x34>
    4b6c:	4916      	ldr	r1, [pc, #88]	; (4bc8 <add_to_waitq_locked+0x78>)
    4b6e:	4817      	ldr	r0, [pc, #92]	; (4bcc <add_to_waitq_locked+0x7c>)
    4b70:	f240 3355 	movw	r3, #853	; 0x355
    4b74:	4a16      	ldr	r2, [pc, #88]	; (4bd0 <add_to_waitq_locked+0x80>)
    4b76:	f001 f8bc 	bl	5cf2 <printk>
    4b7a:	f240 3155 	movw	r1, #853	; 0x355
    4b7e:	4814      	ldr	r0, [pc, #80]	; (4bd0 <add_to_waitq_locked+0x80>)
    4b80:	f001 f985 	bl	5e8e <assert_post_action>
	return list->head == list;
    4b84:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4b86:	429d      	cmp	r5, r3
    4b88:	bf08      	it	eq
    4b8a:	2300      	moveq	r3, #0
    4b8c:	2b00      	cmp	r3, #0
    4b8e:	bf38      	it	cc
    4b90:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4b92:	b183      	cbz	r3, 4bb6 <add_to_waitq_locked+0x66>
	if (thread_1->base.prio < thread_2->base.prio) {
    4b94:	f994 100e 	ldrsb.w	r1, [r4, #14]
    4b98:	f993 200e 	ldrsb.w	r2, [r3, #14]
    4b9c:	4291      	cmp	r1, r2
    4b9e:	db04      	blt.n	4baa <add_to_waitq_locked+0x5a>
	return (node == list->tail) ? NULL : node->next;
    4ba0:	686a      	ldr	r2, [r5, #4]
    4ba2:	429a      	cmp	r2, r3
    4ba4:	d007      	beq.n	4bb6 <add_to_waitq_locked+0x66>
    4ba6:	681b      	ldr	r3, [r3, #0]
    4ba8:	e7f3      	b.n	4b92 <add_to_waitq_locked+0x42>
	node->prev = successor->prev;
    4baa:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4bac:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    4bb0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4bb2:	605c      	str	r4, [r3, #4]
}
    4bb4:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
    4bb6:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    4bb8:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
    4bba:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    4bbc:	686b      	ldr	r3, [r5, #4]
    4bbe:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4bc0:	606c      	str	r4, [r5, #4]
    4bc2:	e7f7      	b.n	4bb4 <add_to_waitq_locked+0x64>
    4bc4:	200002d8 	.word	0x200002d8
    4bc8:	0000846d 	.word	0x0000846d
    4bcc:	00006f74 	.word	0x00006f74
    4bd0:	000083c4 	.word	0x000083c4

00004bd4 <pend>:
{
    4bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4bd8:	4604      	mov	r4, r0
    4bda:	460d      	mov	r5, r1
    4bdc:	4616      	mov	r6, r2
    4bde:	461f      	mov	r7, r3
	__asm__ volatile(
    4be0:	f04f 0320 	mov.w	r3, #32
    4be4:	f3ef 8811 	mrs	r8, BASEPRI
    4be8:	f383 8811 	msr	BASEPRI, r3
    4bec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4bf0:	481f      	ldr	r0, [pc, #124]	; (4c70 <pend+0x9c>)
    4bf2:	f000 fc99 	bl	5528 <z_spin_lock_valid>
    4bf6:	b968      	cbnz	r0, 4c14 <pend+0x40>
    4bf8:	235c      	movs	r3, #92	; 0x5c
    4bfa:	4a1e      	ldr	r2, [pc, #120]	; (4c74 <pend+0xa0>)
    4bfc:	491e      	ldr	r1, [pc, #120]	; (4c78 <pend+0xa4>)
    4bfe:	481f      	ldr	r0, [pc, #124]	; (4c7c <pend+0xa8>)
    4c00:	f001 f877 	bl	5cf2 <printk>
    4c04:	491a      	ldr	r1, [pc, #104]	; (4c70 <pend+0x9c>)
    4c06:	481e      	ldr	r0, [pc, #120]	; (4c80 <pend+0xac>)
    4c08:	f001 f873 	bl	5cf2 <printk>
    4c0c:	215c      	movs	r1, #92	; 0x5c
    4c0e:	4819      	ldr	r0, [pc, #100]	; (4c74 <pend+0xa0>)
    4c10:	f001 f93d 	bl	5e8e <assert_post_action>
	z_spin_lock_set_owner(l);
    4c14:	4816      	ldr	r0, [pc, #88]	; (4c70 <pend+0x9c>)
    4c16:	f000 fca3 	bl	5560 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    4c1a:	4620      	mov	r0, r4
    4c1c:	4629      	mov	r1, r5
    4c1e:	f7ff ff97 	bl	4b50 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4c22:	4813      	ldr	r0, [pc, #76]	; (4c70 <pend+0x9c>)
    4c24:	f000 fc8e 	bl	5544 <z_spin_unlock_valid>
    4c28:	b968      	cbnz	r0, 4c46 <pend+0x72>
    4c2a:	2384      	movs	r3, #132	; 0x84
    4c2c:	4a11      	ldr	r2, [pc, #68]	; (4c74 <pend+0xa0>)
    4c2e:	4915      	ldr	r1, [pc, #84]	; (4c84 <pend+0xb0>)
    4c30:	4812      	ldr	r0, [pc, #72]	; (4c7c <pend+0xa8>)
    4c32:	f001 f85e 	bl	5cf2 <printk>
    4c36:	490e      	ldr	r1, [pc, #56]	; (4c70 <pend+0x9c>)
    4c38:	4813      	ldr	r0, [pc, #76]	; (4c88 <pend+0xb4>)
    4c3a:	f001 f85a 	bl	5cf2 <printk>
    4c3e:	2184      	movs	r1, #132	; 0x84
    4c40:	480c      	ldr	r0, [pc, #48]	; (4c74 <pend+0xa0>)
    4c42:	f001 f924 	bl	5e8e <assert_post_action>
	__asm__ volatile(
    4c46:	f388 8811 	msr	BASEPRI, r8
    4c4a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4c4e:	1c7b      	adds	r3, r7, #1
    4c50:	bf08      	it	eq
    4c52:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    4c56:	d008      	beq.n	4c6a <pend+0x96>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    4c58:	4632      	mov	r2, r6
    4c5a:	463b      	mov	r3, r7
    4c5c:	f104 0018 	add.w	r0, r4, #24
    4c60:	490a      	ldr	r1, [pc, #40]	; (4c8c <pend+0xb8>)
}
    4c62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4c66:	f000 bcbd 	b.w	55e4 <z_add_timeout>
    4c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4c6e:	bf00      	nop
    4c70:	200003f8 	.word	0x200003f8
    4c74:	00007380 	.word	0x00007380
    4c78:	000073a6 	.word	0x000073a6
    4c7c:	00006f74 	.word	0x00006f74
    4c80:	000073bb 	.word	0x000073bb
    4c84:	000073d3 	.word	0x000073d3
    4c88:	000073ea 	.word	0x000073ea
    4c8c:	00004585 	.word	0x00004585

00004c90 <z_pend_curr>:
{
    4c90:	b538      	push	{r3, r4, r5, lr}
    4c92:	4604      	mov	r4, r0
	pending_current = _current;
    4c94:	4b10      	ldr	r3, [pc, #64]	; (4cd8 <z_pend_curr+0x48>)
{
    4c96:	460d      	mov	r5, r1
	pending_current = _current;
    4c98:	6898      	ldr	r0, [r3, #8]
    4c9a:	4b10      	ldr	r3, [pc, #64]	; (4cdc <z_pend_curr+0x4c>)
{
    4c9c:	4611      	mov	r1, r2
	pending_current = _current;
    4c9e:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    4ca0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    4ca4:	f7ff ff96 	bl	4bd4 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4ca8:	4620      	mov	r0, r4
    4caa:	f000 fc4b 	bl	5544 <z_spin_unlock_valid>
    4cae:	b968      	cbnz	r0, 4ccc <z_pend_curr+0x3c>
    4cb0:	239b      	movs	r3, #155	; 0x9b
    4cb2:	4a0b      	ldr	r2, [pc, #44]	; (4ce0 <z_pend_curr+0x50>)
    4cb4:	490b      	ldr	r1, [pc, #44]	; (4ce4 <z_pend_curr+0x54>)
    4cb6:	480c      	ldr	r0, [pc, #48]	; (4ce8 <z_pend_curr+0x58>)
    4cb8:	f001 f81b 	bl	5cf2 <printk>
    4cbc:	4621      	mov	r1, r4
    4cbe:	480b      	ldr	r0, [pc, #44]	; (4cec <z_pend_curr+0x5c>)
    4cc0:	f001 f817 	bl	5cf2 <printk>
    4cc4:	219b      	movs	r1, #155	; 0x9b
    4cc6:	4806      	ldr	r0, [pc, #24]	; (4ce0 <z_pend_curr+0x50>)
    4cc8:	f001 f8e1 	bl	5e8e <assert_post_action>
    4ccc:	4628      	mov	r0, r5
}
    4cce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4cd2:	f7fc bf7f 	b.w	1bd4 <arch_swap>
    4cd6:	bf00      	nop
    4cd8:	200003c4 	.word	0x200003c4
    4cdc:	200003f4 	.word	0x200003f4
    4ce0:	00007380 	.word	0x00007380
    4ce4:	000073d3 	.word	0x000073d3
    4ce8:	00006f74 	.word	0x00006f74
    4cec:	000073ea 	.word	0x000073ea

00004cf0 <z_unpend_first_thread>:
{
    4cf0:	b538      	push	{r3, r4, r5, lr}
    4cf2:	4604      	mov	r4, r0
	__asm__ volatile(
    4cf4:	f04f 0320 	mov.w	r3, #32
    4cf8:	f3ef 8511 	mrs	r5, BASEPRI
    4cfc:	f383 8811 	msr	BASEPRI, r3
    4d00:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4d04:	483b      	ldr	r0, [pc, #236]	; (4df4 <z_unpend_first_thread+0x104>)
    4d06:	f000 fc0f 	bl	5528 <z_spin_lock_valid>
    4d0a:	b968      	cbnz	r0, 4d28 <z_unpend_first_thread+0x38>
    4d0c:	235c      	movs	r3, #92	; 0x5c
    4d0e:	4a3a      	ldr	r2, [pc, #232]	; (4df8 <z_unpend_first_thread+0x108>)
    4d10:	493a      	ldr	r1, [pc, #232]	; (4dfc <z_unpend_first_thread+0x10c>)
    4d12:	483b      	ldr	r0, [pc, #236]	; (4e00 <z_unpend_first_thread+0x110>)
    4d14:	f000 ffed 	bl	5cf2 <printk>
    4d18:	4936      	ldr	r1, [pc, #216]	; (4df4 <z_unpend_first_thread+0x104>)
    4d1a:	483a      	ldr	r0, [pc, #232]	; (4e04 <z_unpend_first_thread+0x114>)
    4d1c:	f000 ffe9 	bl	5cf2 <printk>
    4d20:	215c      	movs	r1, #92	; 0x5c
    4d22:	4835      	ldr	r0, [pc, #212]	; (4df8 <z_unpend_first_thread+0x108>)
    4d24:	f001 f8b3 	bl	5e8e <assert_post_action>
	z_spin_lock_set_owner(l);
    4d28:	4832      	ldr	r0, [pc, #200]	; (4df4 <z_unpend_first_thread+0x104>)
    4d2a:	f000 fc19 	bl	5560 <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
    4d2e:	4620      	mov	r0, r4
    4d30:	f001 fe6b 	bl	6a0a <z_priq_dumb_best>
    4d34:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4d36:	482f      	ldr	r0, [pc, #188]	; (4df4 <z_unpend_first_thread+0x104>)
    4d38:	f000 fc04 	bl	5544 <z_spin_unlock_valid>
    4d3c:	b968      	cbnz	r0, 4d5a <z_unpend_first_thread+0x6a>
    4d3e:	2384      	movs	r3, #132	; 0x84
    4d40:	4a2d      	ldr	r2, [pc, #180]	; (4df8 <z_unpend_first_thread+0x108>)
    4d42:	4931      	ldr	r1, [pc, #196]	; (4e08 <z_unpend_first_thread+0x118>)
    4d44:	482e      	ldr	r0, [pc, #184]	; (4e00 <z_unpend_first_thread+0x110>)
    4d46:	f000 ffd4 	bl	5cf2 <printk>
    4d4a:	492a      	ldr	r1, [pc, #168]	; (4df4 <z_unpend_first_thread+0x104>)
    4d4c:	482f      	ldr	r0, [pc, #188]	; (4e0c <z_unpend_first_thread+0x11c>)
    4d4e:	f000 ffd0 	bl	5cf2 <printk>
    4d52:	2184      	movs	r1, #132	; 0x84
    4d54:	4828      	ldr	r0, [pc, #160]	; (4df8 <z_unpend_first_thread+0x108>)
    4d56:	f001 f89a 	bl	5e8e <assert_post_action>
	__asm__ volatile(
    4d5a:	f385 8811 	msr	BASEPRI, r5
    4d5e:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    4d62:	2c00      	cmp	r4, #0
    4d64:	d043      	beq.n	4dee <z_unpend_first_thread+0xfe>
	__asm__ volatile(
    4d66:	f04f 0320 	mov.w	r3, #32
    4d6a:	f3ef 8511 	mrs	r5, BASEPRI
    4d6e:	f383 8811 	msr	BASEPRI, r3
    4d72:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4d76:	481f      	ldr	r0, [pc, #124]	; (4df4 <z_unpend_first_thread+0x104>)
    4d78:	f000 fbd6 	bl	5528 <z_spin_lock_valid>
    4d7c:	b968      	cbnz	r0, 4d9a <z_unpend_first_thread+0xaa>
    4d7e:	235c      	movs	r3, #92	; 0x5c
    4d80:	4a1d      	ldr	r2, [pc, #116]	; (4df8 <z_unpend_first_thread+0x108>)
    4d82:	491e      	ldr	r1, [pc, #120]	; (4dfc <z_unpend_first_thread+0x10c>)
    4d84:	481e      	ldr	r0, [pc, #120]	; (4e00 <z_unpend_first_thread+0x110>)
    4d86:	f000 ffb4 	bl	5cf2 <printk>
    4d8a:	491a      	ldr	r1, [pc, #104]	; (4df4 <z_unpend_first_thread+0x104>)
    4d8c:	481d      	ldr	r0, [pc, #116]	; (4e04 <z_unpend_first_thread+0x114>)
    4d8e:	f000 ffb0 	bl	5cf2 <printk>
    4d92:	215c      	movs	r1, #92	; 0x5c
    4d94:	4818      	ldr	r0, [pc, #96]	; (4df8 <z_unpend_first_thread+0x108>)
    4d96:	f001 f87a 	bl	5e8e <assert_post_action>
	z_spin_lock_set_owner(l);
    4d9a:	4816      	ldr	r0, [pc, #88]	; (4df4 <z_unpend_first_thread+0x104>)
    4d9c:	f000 fbe0 	bl	5560 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    4da0:	f104 0008 	add.w	r0, r4, #8
    4da4:	f7ff f8ac 	bl	3f00 <pended_on.isra.0>
    4da8:	4621      	mov	r1, r4
    4daa:	f7ff fa87 	bl	42bc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    4dae:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4db0:	4810      	ldr	r0, [pc, #64]	; (4df4 <z_unpend_first_thread+0x104>)
    4db2:	f023 0302 	bic.w	r3, r3, #2
    4db6:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
    4db8:	2300      	movs	r3, #0
    4dba:	60a3      	str	r3, [r4, #8]
    4dbc:	f000 fbc2 	bl	5544 <z_spin_unlock_valid>
    4dc0:	b968      	cbnz	r0, 4dde <z_unpend_first_thread+0xee>
    4dc2:	2384      	movs	r3, #132	; 0x84
    4dc4:	4a0c      	ldr	r2, [pc, #48]	; (4df8 <z_unpend_first_thread+0x108>)
    4dc6:	4910      	ldr	r1, [pc, #64]	; (4e08 <z_unpend_first_thread+0x118>)
    4dc8:	480d      	ldr	r0, [pc, #52]	; (4e00 <z_unpend_first_thread+0x110>)
    4dca:	f000 ff92 	bl	5cf2 <printk>
    4dce:	4909      	ldr	r1, [pc, #36]	; (4df4 <z_unpend_first_thread+0x104>)
    4dd0:	480e      	ldr	r0, [pc, #56]	; (4e0c <z_unpend_first_thread+0x11c>)
    4dd2:	f000 ff8e 	bl	5cf2 <printk>
    4dd6:	2184      	movs	r1, #132	; 0x84
    4dd8:	4807      	ldr	r0, [pc, #28]	; (4df8 <z_unpend_first_thread+0x108>)
    4dda:	f001 f858 	bl	5e8e <assert_post_action>
	__asm__ volatile(
    4dde:	f385 8811 	msr	BASEPRI, r5
    4de2:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
    4de6:	f104 0018 	add.w	r0, r4, #24
    4dea:	f000 fcd9 	bl	57a0 <z_abort_timeout>
}
    4dee:	4620      	mov	r0, r4
    4df0:	bd38      	pop	{r3, r4, r5, pc}
    4df2:	bf00      	nop
    4df4:	200003f8 	.word	0x200003f8
    4df8:	00007380 	.word	0x00007380
    4dfc:	000073a6 	.word	0x000073a6
    4e00:	00006f74 	.word	0x00006f74
    4e04:	000073bb 	.word	0x000073bb
    4e08:	000073d3 	.word	0x000073d3
    4e0c:	000073ea 	.word	0x000073ea

00004e10 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    4e10:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    4e12:	4b04      	ldr	r3, [pc, #16]	; (4e24 <z_sched_init+0x14>)
    4e14:	4608      	mov	r0, r1
    4e16:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    4e1a:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    4e1e:	f7ff b89d 	b.w	3f5c <k_sched_time_slice_set>
    4e22:	bf00      	nop
    4e24:	200003c4 	.word	0x200003c4

00004e28 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    4e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e2a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    4e2e:	b173      	cbz	r3, 4e4e <z_impl_k_yield+0x26>
    4e30:	4946      	ldr	r1, [pc, #280]	; (4f4c <z_impl_k_yield+0x124>)
    4e32:	f44f 638c 	mov.w	r3, #1120	; 0x460
    4e36:	4a46      	ldr	r2, [pc, #280]	; (4f50 <z_impl_k_yield+0x128>)
    4e38:	4846      	ldr	r0, [pc, #280]	; (4f54 <z_impl_k_yield+0x12c>)
    4e3a:	f000 ff5a 	bl	5cf2 <printk>
    4e3e:	4846      	ldr	r0, [pc, #280]	; (4f58 <z_impl_k_yield+0x130>)
    4e40:	f000 ff57 	bl	5cf2 <printk>
    4e44:	f44f 618c 	mov.w	r1, #1120	; 0x460
    4e48:	4841      	ldr	r0, [pc, #260]	; (4f50 <z_impl_k_yield+0x128>)
    4e4a:	f001 f820 	bl	5e8e <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
    4e4e:	4c43      	ldr	r4, [pc, #268]	; (4f5c <z_impl_k_yield+0x134>)
    4e50:	4e43      	ldr	r6, [pc, #268]	; (4f60 <z_impl_k_yield+0x138>)
    4e52:	68a2      	ldr	r2, [r4, #8]
    4e54:	42b2      	cmp	r2, r6
    4e56:	d067      	beq.n	4f28 <z_impl_k_yield+0x100>
	__asm__ volatile(
    4e58:	f04f 0320 	mov.w	r3, #32
    4e5c:	f3ef 8711 	mrs	r7, BASEPRI
    4e60:	f383 8811 	msr	BASEPRI, r3
    4e64:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4e68:	483e      	ldr	r0, [pc, #248]	; (4f64 <z_impl_k_yield+0x13c>)
    4e6a:	f000 fb5d 	bl	5528 <z_spin_lock_valid>
    4e6e:	b968      	cbnz	r0, 4e8c <z_impl_k_yield+0x64>
    4e70:	235c      	movs	r3, #92	; 0x5c
    4e72:	4a3d      	ldr	r2, [pc, #244]	; (4f68 <z_impl_k_yield+0x140>)
    4e74:	493d      	ldr	r1, [pc, #244]	; (4f6c <z_impl_k_yield+0x144>)
    4e76:	4837      	ldr	r0, [pc, #220]	; (4f54 <z_impl_k_yield+0x12c>)
    4e78:	f000 ff3b 	bl	5cf2 <printk>
    4e7c:	4939      	ldr	r1, [pc, #228]	; (4f64 <z_impl_k_yield+0x13c>)
    4e7e:	483c      	ldr	r0, [pc, #240]	; (4f70 <z_impl_k_yield+0x148>)
    4e80:	f000 ff37 	bl	5cf2 <printk>
    4e84:	215c      	movs	r1, #92	; 0x5c
    4e86:	4838      	ldr	r0, [pc, #224]	; (4f68 <z_impl_k_yield+0x140>)
    4e88:	f001 f801 	bl	5e8e <assert_post_action>
	z_spin_lock_set_owner(l);
    4e8c:	4835      	ldr	r0, [pc, #212]	; (4f64 <z_impl_k_yield+0x13c>)
    4e8e:	f000 fb67 	bl	5560 <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
    4e92:	68a1      	ldr	r1, [r4, #8]
    4e94:	4837      	ldr	r0, [pc, #220]	; (4f74 <z_impl_k_yield+0x14c>)
    4e96:	f7ff fa11 	bl	42bc <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
    4e9a:	68a5      	ldr	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4e9c:	42b5      	cmp	r5, r6
    4e9e:	d10b      	bne.n	4eb8 <z_impl_k_yield+0x90>
    4ea0:	4935      	ldr	r1, [pc, #212]	; (4f78 <z_impl_k_yield+0x150>)
    4ea2:	482c      	ldr	r0, [pc, #176]	; (4f54 <z_impl_k_yield+0x12c>)
    4ea4:	f240 3355 	movw	r3, #853	; 0x355
    4ea8:	4a29      	ldr	r2, [pc, #164]	; (4f50 <z_impl_k_yield+0x128>)
    4eaa:	f000 ff22 	bl	5cf2 <printk>
    4eae:	f240 3155 	movw	r1, #853	; 0x355
    4eb2:	4827      	ldr	r0, [pc, #156]	; (4f50 <z_impl_k_yield+0x128>)
    4eb4:	f000 ffeb 	bl	5e8e <assert_post_action>
	return list->head == list;
    4eb8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4eba:	492e      	ldr	r1, [pc, #184]	; (4f74 <z_impl_k_yield+0x14c>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4ebc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4ebe:	428b      	cmp	r3, r1
    4ec0:	bf08      	it	eq
    4ec2:	2300      	moveq	r3, #0
    4ec4:	2b00      	cmp	r3, #0
    4ec6:	bf38      	it	cc
    4ec8:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4eca:	2b00      	cmp	r3, #0
    4ecc:	d038      	beq.n	4f40 <z_impl_k_yield+0x118>
	if (thread_1->base.prio < thread_2->base.prio) {
    4ece:	f995 600e 	ldrsb.w	r6, [r5, #14]
    4ed2:	f993 000e 	ldrsb.w	r0, [r3, #14]
    4ed6:	4286      	cmp	r6, r0
    4ed8:	db03      	blt.n	4ee2 <z_impl_k_yield+0xba>
	return (node == list->tail) ? NULL : node->next;
    4eda:	4293      	cmp	r3, r2
    4edc:	d030      	beq.n	4f40 <z_impl_k_yield+0x118>
    4ede:	681b      	ldr	r3, [r3, #0]
    4ee0:	e7f3      	b.n	4eca <z_impl_k_yield+0xa2>
	node->prev = successor->prev;
    4ee2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4ee4:	e9c5 3200 	strd	r3, r2, [r5]
	successor->prev->next = node;
    4ee8:	6015      	str	r5, [r2, #0]
	successor->prev = node;
    4eea:	605d      	str	r5, [r3, #4]
			z_mark_thread_as_queued(_current);
    4eec:	68a2      	ldr	r2, [r4, #8]
			update_cache(1);
    4eee:	2001      	movs	r0, #1
	thread->base.thread_state |= states;
    4ef0:	7b53      	ldrb	r3, [r2, #13]
    4ef2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4ef6:	7353      	strb	r3, [r2, #13]
    4ef8:	f7ff fa0e 	bl	4318 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4efc:	4819      	ldr	r0, [pc, #100]	; (4f64 <z_impl_k_yield+0x13c>)
    4efe:	f000 fb21 	bl	5544 <z_spin_unlock_valid>
    4f02:	b968      	cbnz	r0, 4f20 <z_impl_k_yield+0xf8>
    4f04:	2384      	movs	r3, #132	; 0x84
    4f06:	4a18      	ldr	r2, [pc, #96]	; (4f68 <z_impl_k_yield+0x140>)
    4f08:	491c      	ldr	r1, [pc, #112]	; (4f7c <z_impl_k_yield+0x154>)
    4f0a:	4812      	ldr	r0, [pc, #72]	; (4f54 <z_impl_k_yield+0x12c>)
    4f0c:	f000 fef1 	bl	5cf2 <printk>
    4f10:	4914      	ldr	r1, [pc, #80]	; (4f64 <z_impl_k_yield+0x13c>)
    4f12:	481b      	ldr	r0, [pc, #108]	; (4f80 <z_impl_k_yield+0x158>)
    4f14:	f000 feed 	bl	5cf2 <printk>
    4f18:	2184      	movs	r1, #132	; 0x84
    4f1a:	4813      	ldr	r0, [pc, #76]	; (4f68 <z_impl_k_yield+0x140>)
    4f1c:	f000 ffb7 	bl	5e8e <assert_post_action>
	__asm__ volatile(
    4f20:	f387 8811 	msr	BASEPRI, r7
    4f24:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    4f28:	f04f 0320 	mov.w	r3, #32
    4f2c:	f3ef 8011 	mrs	r0, BASEPRI
    4f30:	f383 8811 	msr	BASEPRI, r3
    4f34:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
    4f38:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4f3c:	f7fc be4a 	b.w	1bd4 <arch_swap>
	node->prev = list->tail;
    4f40:	e9c5 1200 	strd	r1, r2, [r5]
	list->tail->next = node;
    4f44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4f46:	601d      	str	r5, [r3, #0]
	list->tail = node;
    4f48:	62e5      	str	r5, [r4, #44]	; 0x2c
}
    4f4a:	e7cf      	b.n	4eec <z_impl_k_yield+0xc4>
    4f4c:	00008428 	.word	0x00008428
    4f50:	000083c4 	.word	0x000083c4
    4f54:	00006f74 	.word	0x00006f74
    4f58:	0000843a 	.word	0x0000843a
    4f5c:	200003c4 	.word	0x200003c4
    4f60:	200002d8 	.word	0x200002d8
    4f64:	200003f8 	.word	0x200003f8
    4f68:	00007380 	.word	0x00007380
    4f6c:	000073a6 	.word	0x000073a6
    4f70:	000073bb 	.word	0x000073bb
    4f74:	200003ec 	.word	0x200003ec
    4f78:	0000846d 	.word	0x0000846d
    4f7c:	000073d3 	.word	0x000073d3
    4f80:	000073ea 	.word	0x000073ea

00004f84 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
{
    4f84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4f88:	4604      	mov	r4, r0
    4f8a:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	u32_t expected_wakeup_time;

	__ASSERT(!arch_is_in_isr(), "");
    4f8e:	b173      	cbz	r3, 4fae <z_tick_sleep+0x2a>
    4f90:	493c      	ldr	r1, [pc, #240]	; (5084 <z_tick_sleep+0x100>)
    4f92:	f240 437e 	movw	r3, #1150	; 0x47e
    4f96:	4a3c      	ldr	r2, [pc, #240]	; (5088 <z_tick_sleep+0x104>)
    4f98:	483c      	ldr	r0, [pc, #240]	; (508c <z_tick_sleep+0x108>)
    4f9a:	f000 feaa 	bl	5cf2 <printk>
    4f9e:	483c      	ldr	r0, [pc, #240]	; (5090 <z_tick_sleep+0x10c>)
    4fa0:	f000 fea7 	bl	5cf2 <printk>
    4fa4:	f240 417e 	movw	r1, #1150	; 0x47e
    4fa8:	4837      	ldr	r0, [pc, #220]	; (5088 <z_tick_sleep+0x104>)
    4faa:	f000 ff70 	bl	5e8e <assert_post_action>

	K_DEBUG("thread %p for %d ticks\n", _current, ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    4fae:	b92c      	cbnz	r4, 4fbc <z_tick_sleep+0x38>
	z_impl_k_yield();
    4fb0:	f7ff ff3a 	bl	4e28 <z_impl_k_yield>
		return ticks;
	}
#endif

	return 0;
}
    4fb4:	4620      	mov	r0, r4
    4fb6:	b002      	add	sp, #8
    4fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_time = ticks + z_tick_get_32();
    4fbc:	f001 fd3c 	bl	6a38 <z_tick_get_32>
	struct k_spinlock local_lock = {};
    4fc0:	2300      	movs	r3, #0
	timeout = Z_TIMEOUT_TICKS(ticks);
    4fc2:	4626      	mov	r6, r4
    4fc4:	17e7      	asrs	r7, r4, #31
	struct k_spinlock local_lock = {};
    4fc6:	9301      	str	r3, [sp, #4]
	expected_wakeup_time = ticks + z_tick_get_32();
    4fc8:	4404      	add	r4, r0
    4fca:	f04f 0320 	mov.w	r3, #32
    4fce:	f3ef 8811 	mrs	r8, BASEPRI
    4fd2:	f383 8811 	msr	BASEPRI, r3
    4fd6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4fda:	a801      	add	r0, sp, #4
    4fdc:	f000 faa4 	bl	5528 <z_spin_lock_valid>
    4fe0:	b968      	cbnz	r0, 4ffe <z_tick_sleep+0x7a>
    4fe2:	235c      	movs	r3, #92	; 0x5c
    4fe4:	4a2b      	ldr	r2, [pc, #172]	; (5094 <z_tick_sleep+0x110>)
    4fe6:	492c      	ldr	r1, [pc, #176]	; (5098 <z_tick_sleep+0x114>)
    4fe8:	4828      	ldr	r0, [pc, #160]	; (508c <z_tick_sleep+0x108>)
    4fea:	f000 fe82 	bl	5cf2 <printk>
    4fee:	482b      	ldr	r0, [pc, #172]	; (509c <z_tick_sleep+0x118>)
    4ff0:	a901      	add	r1, sp, #4
    4ff2:	f000 fe7e 	bl	5cf2 <printk>
    4ff6:	215c      	movs	r1, #92	; 0x5c
    4ff8:	4826      	ldr	r0, [pc, #152]	; (5094 <z_tick_sleep+0x110>)
    4ffa:	f000 ff48 	bl	5e8e <assert_post_action>
	pending_current = _current;
    4ffe:	4d28      	ldr	r5, [pc, #160]	; (50a0 <z_tick_sleep+0x11c>)
	z_spin_lock_set_owner(l);
    5000:	a801      	add	r0, sp, #4
    5002:	f000 faad 	bl	5560 <z_spin_lock_set_owner>
    5006:	68a8      	ldr	r0, [r5, #8]
    5008:	4b26      	ldr	r3, [pc, #152]	; (50a4 <z_tick_sleep+0x120>)
    500a:	6018      	str	r0, [r3, #0]
	z_remove_thread_from_ready_q(_current);
    500c:	f7ff fd58 	bl	4ac0 <z_remove_thread_from_ready_q>
	z_add_thread_timeout(_current, timeout);
    5010:	68a8      	ldr	r0, [r5, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    5012:	4632      	mov	r2, r6
    5014:	463b      	mov	r3, r7
    5016:	3018      	adds	r0, #24
    5018:	4923      	ldr	r1, [pc, #140]	; (50a8 <z_tick_sleep+0x124>)
    501a:	f000 fae3 	bl	55e4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    501e:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5020:	a801      	add	r0, sp, #4
	thread->base.thread_state |= _THREAD_SUSPENDED;
    5022:	7b53      	ldrb	r3, [r2, #13]
    5024:	f043 0310 	orr.w	r3, r3, #16
    5028:	7353      	strb	r3, [r2, #13]
    502a:	f000 fa8b 	bl	5544 <z_spin_unlock_valid>
    502e:	b968      	cbnz	r0, 504c <z_tick_sleep+0xc8>
    5030:	239b      	movs	r3, #155	; 0x9b
    5032:	4a18      	ldr	r2, [pc, #96]	; (5094 <z_tick_sleep+0x110>)
    5034:	491d      	ldr	r1, [pc, #116]	; (50ac <z_tick_sleep+0x128>)
    5036:	4815      	ldr	r0, [pc, #84]	; (508c <z_tick_sleep+0x108>)
    5038:	f000 fe5b 	bl	5cf2 <printk>
    503c:	481c      	ldr	r0, [pc, #112]	; (50b0 <z_tick_sleep+0x12c>)
    503e:	a901      	add	r1, sp, #4
    5040:	f000 fe57 	bl	5cf2 <printk>
    5044:	219b      	movs	r1, #155	; 0x9b
    5046:	4813      	ldr	r0, [pc, #76]	; (5094 <z_tick_sleep+0x110>)
    5048:	f000 ff21 	bl	5e8e <assert_post_action>
    504c:	4640      	mov	r0, r8
    504e:	f7fc fdc1 	bl	1bd4 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    5052:	68ab      	ldr	r3, [r5, #8]
    5054:	7b5b      	ldrb	r3, [r3, #13]
    5056:	06db      	lsls	r3, r3, #27
    5058:	d50e      	bpl.n	5078 <z_tick_sleep+0xf4>
    505a:	4916      	ldr	r1, [pc, #88]	; (50b4 <z_tick_sleep+0x130>)
    505c:	f240 43a3 	movw	r3, #1187	; 0x4a3
    5060:	4a09      	ldr	r2, [pc, #36]	; (5088 <z_tick_sleep+0x104>)
    5062:	480a      	ldr	r0, [pc, #40]	; (508c <z_tick_sleep+0x108>)
    5064:	f000 fe45 	bl	5cf2 <printk>
    5068:	4809      	ldr	r0, [pc, #36]	; (5090 <z_tick_sleep+0x10c>)
    506a:	f000 fe42 	bl	5cf2 <printk>
    506e:	f240 41a3 	movw	r1, #1187	; 0x4a3
    5072:	4805      	ldr	r0, [pc, #20]	; (5088 <z_tick_sleep+0x104>)
    5074:	f000 ff0b 	bl	5e8e <assert_post_action>
	ticks = expected_wakeup_time - z_tick_get_32();
    5078:	f001 fcde 	bl	6a38 <z_tick_get_32>
    507c:	1a24      	subs	r4, r4, r0
    507e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    5082:	e797      	b.n	4fb4 <z_tick_sleep+0x30>
    5084:	00008428 	.word	0x00008428
    5088:	000083c4 	.word	0x000083c4
    508c:	00006f74 	.word	0x00006f74
    5090:	0000843a 	.word	0x0000843a
    5094:	00007380 	.word	0x00007380
    5098:	000073a6 	.word	0x000073a6
    509c:	000073bb 	.word	0x000073bb
    50a0:	200003c4 	.word	0x200003c4
    50a4:	200003f4 	.word	0x200003f4
    50a8:	00004585 	.word	0x00004585
    50ac:	000073d3 	.word	0x000073d3
    50b0:	000073ea 	.word	0x000073ea
    50b4:	000084be 	.word	0x000084be

000050b8 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(k_timeout_t timeout)
{
    50b8:	b538      	push	{r3, r4, r5, lr}
    50ba:	4604      	mov	r4, r0
    50bc:	460d      	mov	r5, r1
    50be:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    50c2:	b173      	cbz	r3, 50e2 <z_impl_k_sleep+0x2a>
    50c4:	4912      	ldr	r1, [pc, #72]	; (5110 <z_impl_k_sleep+0x58>)
    50c6:	f240 43b2 	movw	r3, #1202	; 0x4b2
    50ca:	4a12      	ldr	r2, [pc, #72]	; (5114 <z_impl_k_sleep+0x5c>)
    50cc:	4812      	ldr	r0, [pc, #72]	; (5118 <z_impl_k_sleep+0x60>)
    50ce:	f000 fe10 	bl	5cf2 <printk>
    50d2:	4812      	ldr	r0, [pc, #72]	; (511c <z_impl_k_sleep+0x64>)
    50d4:	f000 fe0d 	bl	5cf2 <printk>
    50d8:	f240 41b2 	movw	r1, #1202	; 0x4b2
    50dc:	480d      	ldr	r0, [pc, #52]	; (5114 <z_impl_k_sleep+0x5c>)
    50de:	f000 fed6 	bl	5e8e <assert_post_action>

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    50e2:	3501      	adds	r5, #1
    50e4:	bf08      	it	eq
    50e6:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    50ea:	d106      	bne.n	50fa <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
    50ec:	4b0c      	ldr	r3, [pc, #48]	; (5120 <z_impl_k_sleep+0x68>)
    50ee:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    50f0:	f7ff fbc8 	bl	4884 <z_impl_k_thread_suspend>
		return (s32_t) K_TICKS_FOREVER;
    50f4:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
    50f8:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
    50fa:	4620      	mov	r0, r4
    50fc:	f7ff ff42 	bl	4f84 <z_tick_sleep>
		} else {
			return (t * to_hz + off) / from_hz;
    5100:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    5104:	fb80 3403 	smull	r3, r4, r0, r3
    5108:	0bd8      	lsrs	r0, r3, #15
    510a:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
    510e:	e7f3      	b.n	50f8 <z_impl_k_sleep+0x40>
    5110:	00008428 	.word	0x00008428
    5114:	000083c4 	.word	0x000083c4
    5118:	00006f74 	.word	0x00006f74
    511c:	0000843a 	.word	0x0000843a
    5120:	200003c4 	.word	0x200003c4

00005124 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    5124:	4b01      	ldr	r3, [pc, #4]	; (512c <z_impl_k_current_get+0x8>)
    5126:	6898      	ldr	r0, [r3, #8]
    5128:	4770      	bx	lr
    512a:	bf00      	nop
    512c:	200003c4 	.word	0x200003c4

00005130 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    5130:	b538      	push	{r3, r4, r5, lr}
    5132:	4604      	mov	r4, r0
    5134:	f04f 0320 	mov.w	r3, #32
    5138:	f3ef 8511 	mrs	r5, BASEPRI
    513c:	f383 8811 	msr	BASEPRI, r3
    5140:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5144:	4814      	ldr	r0, [pc, #80]	; (5198 <z_impl_k_sem_give+0x68>)
    5146:	f000 f9ef 	bl	5528 <z_spin_lock_valid>
    514a:	b968      	cbnz	r0, 5168 <z_impl_k_sem_give+0x38>
    514c:	235c      	movs	r3, #92	; 0x5c
    514e:	4a13      	ldr	r2, [pc, #76]	; (519c <z_impl_k_sem_give+0x6c>)
    5150:	4913      	ldr	r1, [pc, #76]	; (51a0 <z_impl_k_sem_give+0x70>)
    5152:	4814      	ldr	r0, [pc, #80]	; (51a4 <z_impl_k_sem_give+0x74>)
    5154:	f000 fdcd 	bl	5cf2 <printk>
    5158:	490f      	ldr	r1, [pc, #60]	; (5198 <z_impl_k_sem_give+0x68>)
    515a:	4813      	ldr	r0, [pc, #76]	; (51a8 <z_impl_k_sem_give+0x78>)
    515c:	f000 fdc9 	bl	5cf2 <printk>
    5160:	215c      	movs	r1, #92	; 0x5c
    5162:	480e      	ldr	r0, [pc, #56]	; (519c <z_impl_k_sem_give+0x6c>)
    5164:	f000 fe93 	bl	5e8e <assert_post_action>
	z_spin_lock_set_owner(l);
    5168:	480b      	ldr	r0, [pc, #44]	; (5198 <z_impl_k_sem_give+0x68>)
    516a:	f000 f9f9 	bl	5560 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
    516e:	4620      	mov	r0, r4
    5170:	f7ff fdbe 	bl	4cf0 <z_unpend_first_thread>

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);

	if (thread != NULL) {
    5174:	b148      	cbz	r0, 518a <z_impl_k_sem_give+0x5a>
    5176:	2200      	movs	r2, #0
    5178:	6702      	str	r2, [r0, #112]	; 0x70
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    517a:	f7ff f9bb 	bl	44f4 <z_ready_thread>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
    517e:	4629      	mov	r1, r5
}
    5180:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    5184:	4804      	ldr	r0, [pc, #16]	; (5198 <z_impl_k_sem_give+0x68>)
    5186:	f7fe bfe5 	b.w	4154 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    518a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    518e:	429a      	cmp	r2, r3
    5190:	bf18      	it	ne
    5192:	3301      	addne	r3, #1
    5194:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    5196:	e7f2      	b.n	517e <z_impl_k_sem_give+0x4e>
    5198:	20000404 	.word	0x20000404
    519c:	00007380 	.word	0x00007380
    51a0:	000073a6 	.word	0x000073a6
    51a4:	00006f74 	.word	0x00006f74
    51a8:	000073bb 	.word	0x000073bb

000051ac <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    51ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    51ae:	4604      	mov	r4, r0
    51b0:	4616      	mov	r6, r2
    51b2:	461f      	mov	r7, r3
    51b4:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    51b8:	b17b      	cbz	r3, 51da <z_impl_k_sem_take+0x2e>
    51ba:	ea56 0307 	orrs.w	r3, r6, r7
    51be:	d00c      	beq.n	51da <z_impl_k_sem_take+0x2e>
    51c0:	4935      	ldr	r1, [pc, #212]	; (5298 <z_impl_k_sem_take+0xec>)
    51c2:	238c      	movs	r3, #140	; 0x8c
    51c4:	4a35      	ldr	r2, [pc, #212]	; (529c <z_impl_k_sem_take+0xf0>)
    51c6:	4836      	ldr	r0, [pc, #216]	; (52a0 <z_impl_k_sem_take+0xf4>)
    51c8:	f000 fd93 	bl	5cf2 <printk>
    51cc:	4835      	ldr	r0, [pc, #212]	; (52a4 <z_impl_k_sem_take+0xf8>)
    51ce:	f000 fd90 	bl	5cf2 <printk>
    51d2:	218c      	movs	r1, #140	; 0x8c
    51d4:	4831      	ldr	r0, [pc, #196]	; (529c <z_impl_k_sem_take+0xf0>)
    51d6:	f000 fe5a 	bl	5e8e <assert_post_action>
    51da:	f04f 0320 	mov.w	r3, #32
    51de:	f3ef 8511 	mrs	r5, BASEPRI
    51e2:	f383 8811 	msr	BASEPRI, r3
    51e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    51ea:	482f      	ldr	r0, [pc, #188]	; (52a8 <z_impl_k_sem_take+0xfc>)
    51ec:	f000 f99c 	bl	5528 <z_spin_lock_valid>
    51f0:	b968      	cbnz	r0, 520e <z_impl_k_sem_take+0x62>
    51f2:	235c      	movs	r3, #92	; 0x5c
    51f4:	4a2d      	ldr	r2, [pc, #180]	; (52ac <z_impl_k_sem_take+0x100>)
    51f6:	492e      	ldr	r1, [pc, #184]	; (52b0 <z_impl_k_sem_take+0x104>)
    51f8:	4829      	ldr	r0, [pc, #164]	; (52a0 <z_impl_k_sem_take+0xf4>)
    51fa:	f000 fd7a 	bl	5cf2 <printk>
    51fe:	492a      	ldr	r1, [pc, #168]	; (52a8 <z_impl_k_sem_take+0xfc>)
    5200:	482c      	ldr	r0, [pc, #176]	; (52b4 <z_impl_k_sem_take+0x108>)
    5202:	f000 fd76 	bl	5cf2 <printk>
    5206:	215c      	movs	r1, #92	; 0x5c
    5208:	4828      	ldr	r0, [pc, #160]	; (52ac <z_impl_k_sem_take+0x100>)
    520a:	f000 fe40 	bl	5e8e <assert_post_action>
	z_spin_lock_set_owner(l);
    520e:	4826      	ldr	r0, [pc, #152]	; (52a8 <z_impl_k_sem_take+0xfc>)
    5210:	f000 f9a6 	bl	5560 <z_spin_lock_set_owner>
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
    5214:	68a3      	ldr	r3, [r4, #8]
    5216:	b1d3      	cbz	r3, 524e <z_impl_k_sem_take+0xa2>
		sem->count--;
    5218:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    521a:	4823      	ldr	r0, [pc, #140]	; (52a8 <z_impl_k_sem_take+0xfc>)
    521c:	60a3      	str	r3, [r4, #8]
    521e:	f000 f991 	bl	5544 <z_spin_unlock_valid>
    5222:	b968      	cbnz	r0, 5240 <z_impl_k_sem_take+0x94>
    5224:	2384      	movs	r3, #132	; 0x84
    5226:	4a21      	ldr	r2, [pc, #132]	; (52ac <z_impl_k_sem_take+0x100>)
    5228:	4923      	ldr	r1, [pc, #140]	; (52b8 <z_impl_k_sem_take+0x10c>)
    522a:	481d      	ldr	r0, [pc, #116]	; (52a0 <z_impl_k_sem_take+0xf4>)
    522c:	f000 fd61 	bl	5cf2 <printk>
    5230:	491d      	ldr	r1, [pc, #116]	; (52a8 <z_impl_k_sem_take+0xfc>)
    5232:	4822      	ldr	r0, [pc, #136]	; (52bc <z_impl_k_sem_take+0x110>)
    5234:	f000 fd5d 	bl	5cf2 <printk>
    5238:	2184      	movs	r1, #132	; 0x84
    523a:	481c      	ldr	r0, [pc, #112]	; (52ac <z_impl_k_sem_take+0x100>)
    523c:	f000 fe27 	bl	5e8e <assert_post_action>
	__asm__ volatile(
    5240:	f385 8811 	msr	BASEPRI, r5
    5244:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    5248:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
    524a:	b003      	add	sp, #12
    524c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    524e:	ea56 0307 	orrs.w	r3, r6, r7
    5252:	d118      	bne.n	5286 <z_impl_k_sem_take+0xda>
    5254:	4814      	ldr	r0, [pc, #80]	; (52a8 <z_impl_k_sem_take+0xfc>)
    5256:	f000 f975 	bl	5544 <z_spin_unlock_valid>
    525a:	b968      	cbnz	r0, 5278 <z_impl_k_sem_take+0xcc>
    525c:	2384      	movs	r3, #132	; 0x84
    525e:	4a13      	ldr	r2, [pc, #76]	; (52ac <z_impl_k_sem_take+0x100>)
    5260:	4915      	ldr	r1, [pc, #84]	; (52b8 <z_impl_k_sem_take+0x10c>)
    5262:	480f      	ldr	r0, [pc, #60]	; (52a0 <z_impl_k_sem_take+0xf4>)
    5264:	f000 fd45 	bl	5cf2 <printk>
    5268:	490f      	ldr	r1, [pc, #60]	; (52a8 <z_impl_k_sem_take+0xfc>)
    526a:	4814      	ldr	r0, [pc, #80]	; (52bc <z_impl_k_sem_take+0x110>)
    526c:	f000 fd41 	bl	5cf2 <printk>
    5270:	2184      	movs	r1, #132	; 0x84
    5272:	480e      	ldr	r0, [pc, #56]	; (52ac <z_impl_k_sem_take+0x100>)
    5274:	f000 fe0b 	bl	5e8e <assert_post_action>
    5278:	f385 8811 	msr	BASEPRI, r5
    527c:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    5280:	f06f 000f 	mvn.w	r0, #15
    5284:	e7e1      	b.n	524a <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    5286:	4622      	mov	r2, r4
    5288:	4629      	mov	r1, r5
    528a:	e9cd 6700 	strd	r6, r7, [sp]
    528e:	4806      	ldr	r0, [pc, #24]	; (52a8 <z_impl_k_sem_take+0xfc>)
    5290:	f7ff fcfe 	bl	4c90 <z_pend_curr>
	return ret;
    5294:	e7d9      	b.n	524a <z_impl_k_sem_take+0x9e>
    5296:	bf00      	nop
    5298:	0000851e 	.word	0x0000851e
    529c:	000084fe 	.word	0x000084fe
    52a0:	00006f74 	.word	0x00006f74
    52a4:	0000843a 	.word	0x0000843a
    52a8:	20000404 	.word	0x20000404
    52ac:	00007380 	.word	0x00007380
    52b0:	000073a6 	.word	0x000073a6
    52b4:	000073bb 	.word	0x000073bb
    52b8:	000073d3 	.word	0x000073d3
    52bc:	000073ea 	.word	0x000073ea

000052c0 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
    52c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    52c4:	b086      	sub	sp, #24
    52c6:	e9dd 6a11 	ldrd	r6, sl, [sp, #68]	; 0x44
	Z_ASSERT_VALID_PRIO(prio, entry);
    52ca:	2e0f      	cmp	r6, #15
{
    52cc:	4604      	mov	r4, r0
    52ce:	4688      	mov	r8, r1
    52d0:	4691      	mov	r9, r2
    52d2:	461f      	mov	r7, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    52d4:	d127      	bne.n	5326 <z_setup_new_thread+0x66>
    52d6:	4b20      	ldr	r3, [pc, #128]	; (5358 <z_setup_new_thread+0x98>)
    52d8:	429f      	cmp	r7, r3
    52da:	d128      	bne.n	532e <z_setup_new_thread+0x6e>
	sys_dlist_init(&w->waitq);
    52dc:	f104 0328 	add.w	r3, r4, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    52e0:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
	thread_base->thread_state = (u8_t)initial_state;
    52e4:	2304      	movs	r3, #4

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
    52e6:	2500      	movs	r5, #0
	thread_base->thread_state = (u8_t)initial_state;
    52e8:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    52ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
    52ec:	464a      	mov	r2, r9
    52ee:	9302      	str	r3, [sp, #8]
    52f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    52f2:	4641      	mov	r1, r8
    52f4:	9301      	str	r3, [sp, #4]
    52f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    52f8:	4620      	mov	r0, r4
    52fa:	9300      	str	r3, [sp, #0]
	node->prev = NULL;
    52fc:	e9c4 5506 	strd	r5, r5, [r4, #24]
    5300:	463b      	mov	r3, r7
    5302:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	thread_base->user_options = (u8_t)options;
    5306:	f884 a00c 	strb.w	sl, [r4, #12]
	thread_base->prio = priority;
    530a:	73a6      	strb	r6, [r4, #14]
	thread_base->sched_locked = 0U;
    530c:	73e5      	strb	r5, [r4, #15]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    530e:	f7fc fcbd 	bl	1c8c <arch_new_thread>
	if (!_current) {
    5312:	4b12      	ldr	r3, [pc, #72]	; (535c <z_setup_new_thread+0x9c>)
	new_thread->fn_abort = NULL;
    5314:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
	if (!_current) {
    5318:	689b      	ldr	r3, [r3, #8]
    531a:	b103      	cbz	r3, 531e <z_setup_new_thread+0x5e>
	new_thread->resource_pool = _current->resource_pool;
    531c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    531e:	66a3      	str	r3, [r4, #104]	; 0x68
}
    5320:	b006      	add	sp, #24
    5322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    5326:	f106 0310 	add.w	r3, r6, #16
    532a:	2b1e      	cmp	r3, #30
    532c:	d9d6      	bls.n	52dc <z_setup_new_thread+0x1c>
    532e:	f44f 73e7 	mov.w	r3, #462	; 0x1ce
    5332:	4a0b      	ldr	r2, [pc, #44]	; (5360 <z_setup_new_thread+0xa0>)
    5334:	490b      	ldr	r1, [pc, #44]	; (5364 <z_setup_new_thread+0xa4>)
    5336:	480c      	ldr	r0, [pc, #48]	; (5368 <z_setup_new_thread+0xa8>)
    5338:	f000 fcdb 	bl	5cf2 <printk>
    533c:	4631      	mov	r1, r6
    533e:	f06f 030f 	mvn.w	r3, #15
    5342:	220e      	movs	r2, #14
    5344:	4809      	ldr	r0, [pc, #36]	; (536c <z_setup_new_thread+0xac>)
    5346:	f000 fcd4 	bl	5cf2 <printk>
    534a:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
    534e:	4804      	ldr	r0, [pc, #16]	; (5360 <z_setup_new_thread+0xa0>)
    5350:	f000 fd9d 	bl	5e8e <assert_post_action>
    5354:	e7c2      	b.n	52dc <z_setup_new_thread+0x1c>
    5356:	bf00      	nop
    5358:	00003b2d 	.word	0x00003b2d
    535c:	200003c4 	.word	0x200003c4
    5360:	0000856b 	.word	0x0000856b
    5364:	0000858e 	.word	0x0000858e
    5368:	00006f74 	.word	0x00006f74
    536c:	0000860e 	.word	0x0000860e

00005370 <z_impl_k_thread_create>:
{
    5370:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5374:	b087      	sub	sp, #28
    5376:	4604      	mov	r4, r0
    5378:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
    537c:	460d      	mov	r5, r1
    537e:	4690      	mov	r8, r2
    5380:	4699      	mov	r9, r3
    5382:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    5386:	b173      	cbz	r3, 53a6 <z_impl_k_thread_create+0x36>
    5388:	491b      	ldr	r1, [pc, #108]	; (53f8 <z_impl_k_thread_create+0x88>)
    538a:	f240 2343 	movw	r3, #579	; 0x243
    538e:	4a1b      	ldr	r2, [pc, #108]	; (53fc <z_impl_k_thread_create+0x8c>)
    5390:	481b      	ldr	r0, [pc, #108]	; (5400 <z_impl_k_thread_create+0x90>)
    5392:	f000 fcae 	bl	5cf2 <printk>
    5396:	481b      	ldr	r0, [pc, #108]	; (5404 <z_impl_k_thread_create+0x94>)
    5398:	f000 fcab 	bl	5cf2 <printk>
    539c:	f240 2143 	movw	r1, #579	; 0x243
    53a0:	4816      	ldr	r0, [pc, #88]	; (53fc <z_impl_k_thread_create+0x8c>)
    53a2:	f000 fd74 	bl	5e8e <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    53a6:	2300      	movs	r3, #0
    53a8:	9305      	str	r3, [sp, #20]
    53aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
    53ac:	4642      	mov	r2, r8
    53ae:	9304      	str	r3, [sp, #16]
    53b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    53b2:	4629      	mov	r1, r5
    53b4:	9303      	str	r3, [sp, #12]
    53b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    53b8:	4620      	mov	r0, r4
    53ba:	9302      	str	r3, [sp, #8]
    53bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    53be:	9301      	str	r3, [sp, #4]
    53c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    53c2:	9300      	str	r3, [sp, #0]
    53c4:	464b      	mov	r3, r9
    53c6:	f7ff ff7b 	bl	52c0 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    53ca:	1c7b      	adds	r3, r7, #1
    53cc:	bf08      	it	eq
    53ce:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    53d2:	d005      	beq.n	53e0 <z_impl_k_thread_create+0x70>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    53d4:	ea56 0307 	orrs.w	r3, r6, r7
    53d8:	d106      	bne.n	53e8 <z_impl_k_thread_create+0x78>
	z_sched_start(thread);
    53da:	4620      	mov	r0, r4
    53dc:	f7ff f936 	bl	464c <z_sched_start>
}
    53e0:	4620      	mov	r0, r4
    53e2:	b007      	add	sp, #28
    53e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    53e8:	4632      	mov	r2, r6
    53ea:	463b      	mov	r3, r7
    53ec:	4906      	ldr	r1, [pc, #24]	; (5408 <z_impl_k_thread_create+0x98>)
    53ee:	f104 0018 	add.w	r0, r4, #24
    53f2:	f000 f8f7 	bl	55e4 <z_add_timeout>
    53f6:	e7f3      	b.n	53e0 <z_impl_k_thread_create+0x70>
    53f8:	00008428 	.word	0x00008428
    53fc:	0000856b 	.word	0x0000856b
    5400:	00006f74 	.word	0x00006f74
    5404:	0000863f 	.word	0x0000863f
    5408:	00004585 	.word	0x00004585

0000540c <z_init_static_threads>:
{
    540c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    5410:	f8df 9110 	ldr.w	r9, [pc, #272]	; 5524 <z_init_static_threads+0x118>
    5414:	4d3d      	ldr	r5, [pc, #244]	; (550c <z_init_static_threads+0x100>)
    5416:	46c8      	mov	r8, r9
    5418:	f8df a100 	ldr.w	sl, [pc, #256]	; 551c <z_init_static_threads+0x110>
{
    541c:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    541e:	454d      	cmp	r5, r9
    5420:	d90e      	bls.n	5440 <z_init_static_threads+0x34>
    5422:	493b      	ldr	r1, [pc, #236]	; (5510 <z_init_static_threads+0x104>)
    5424:	f44f 732a 	mov.w	r3, #680	; 0x2a8
    5428:	4652      	mov	r2, sl
    542a:	483a      	ldr	r0, [pc, #232]	; (5514 <z_init_static_threads+0x108>)
    542c:	f000 fc61 	bl	5cf2 <printk>
    5430:	4839      	ldr	r0, [pc, #228]	; (5518 <z_init_static_threads+0x10c>)
    5432:	f000 fc5e 	bl	5cf2 <printk>
    5436:	f44f 712a 	mov.w	r1, #680	; 0x2a8
    543a:	4650      	mov	r0, sl
    543c:	f000 fd27 	bl	5e8e <assert_post_action>
    5440:	4545      	cmp	r5, r8
    5442:	f105 0430 	add.w	r4, r5, #48	; 0x30
    5446:	d31f      	bcc.n	5488 <z_init_static_threads+0x7c>
	k_sched_lock();
    5448:	f7fe fec0 	bl	41cc <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    544c:	4c2f      	ldr	r4, [pc, #188]	; (550c <z_init_static_threads+0x100>)
    544e:	4d33      	ldr	r5, [pc, #204]	; (551c <z_init_static_threads+0x110>)
    5450:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 5510 <z_init_static_threads+0x104>
    5454:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 5514 <z_init_static_threads+0x108>
    5458:	4544      	cmp	r4, r8
    545a:	d90e      	bls.n	547a <z_init_static_threads+0x6e>
    545c:	4651      	mov	r1, sl
    545e:	f240 23c7 	movw	r3, #711	; 0x2c7
    5462:	462a      	mov	r2, r5
    5464:	4658      	mov	r0, fp
    5466:	f000 fc44 	bl	5cf2 <printk>
    546a:	482b      	ldr	r0, [pc, #172]	; (5518 <z_init_static_threads+0x10c>)
    546c:	f000 fc41 	bl	5cf2 <printk>
    5470:	f240 21c7 	movw	r1, #711	; 0x2c7
    5474:	4628      	mov	r0, r5
    5476:	f000 fd0a 	bl	5e8e <assert_post_action>
    547a:	4544      	cmp	r4, r8
    547c:	d321      	bcc.n	54c2 <z_init_static_threads+0xb6>
}
    547e:	b007      	add	sp, #28
    5480:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
    5484:	f7fe bf6c 	b.w	4360 <k_sched_unlock>
		z_setup_new_thread(
    5488:	f854 3c04 	ldr.w	r3, [r4, #-4]
    548c:	9305      	str	r3, [sp, #20]
    548e:	f854 3c10 	ldr.w	r3, [r4, #-16]
    5492:	9304      	str	r3, [sp, #16]
    5494:	f854 3c14 	ldr.w	r3, [r4, #-20]
    5498:	9303      	str	r3, [sp, #12]
    549a:	f854 3c18 	ldr.w	r3, [r4, #-24]
    549e:	9302      	str	r3, [sp, #8]
    54a0:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    54a4:	9301      	str	r3, [sp, #4]
    54a6:	f854 3c20 	ldr.w	r3, [r4, #-32]
    54aa:	9300      	str	r3, [sp, #0]
    54ac:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    54b0:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    54b4:	f7ff ff04 	bl	52c0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    54b8:	f854 3c30 	ldr.w	r3, [r4, #-48]
    54bc:	655d      	str	r5, [r3, #84]	; 0x54
    54be:	4625      	mov	r5, r4
    54c0:	e7ad      	b.n	541e <z_init_static_threads+0x12>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    54c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    54c4:	1c5a      	adds	r2, r3, #1
    54c6:	d017      	beq.n	54f8 <z_init_static_threads+0xec>
			return (u32_t)((t * to_hz + off) / from_hz);
    54c8:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
    54cc:	f240 30e7 	movw	r0, #999	; 0x3e7
    54d0:	2100      	movs	r1, #0
					    K_MSEC(thread_data->init_delay));
    54d2:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
    54d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    54da:	2300      	movs	r3, #0
    54dc:	fbce 010c 	smlal	r0, r1, lr, ip
    54e0:	f7fa fe38 	bl	154 <__aeabi_uldivmod>
    54e4:	2700      	movs	r7, #0
    54e6:	4606      	mov	r6, r0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    54e8:	ea56 0307 	orrs.w	r3, r6, r7
			schedule_new_thread(thread_data->init_thread,
    54ec:	f8d4 9000 	ldr.w	r9, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    54f0:	d104      	bne.n	54fc <z_init_static_threads+0xf0>
	z_sched_start(thread);
    54f2:	4648      	mov	r0, r9
    54f4:	f7ff f8aa 	bl	464c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    54f8:	3430      	adds	r4, #48	; 0x30
    54fa:	e7ad      	b.n	5458 <z_init_static_threads+0x4c>
    54fc:	4602      	mov	r2, r0
    54fe:	463b      	mov	r3, r7
    5500:	4907      	ldr	r1, [pc, #28]	; (5520 <z_init_static_threads+0x114>)
    5502:	f109 0018 	add.w	r0, r9, #24
    5506:	f000 f86d 	bl	55e4 <z_add_timeout>
    550a:	e7f5      	b.n	54f8 <z_init_static_threads+0xec>
    550c:	200000d8 	.word	0x200000d8
    5510:	00008664 	.word	0x00008664
    5514:	00006f74 	.word	0x00006f74
    5518:	000083a5 	.word	0x000083a5
    551c:	0000856b 	.word	0x0000856b
    5520:	00004585 	.word	0x00004585
    5524:	200000d8 	.word	0x200000d8

00005528 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    5528:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
    552a:	b138      	cbz	r0, 553c <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3) == _current_cpu->id) {
    552c:	4b04      	ldr	r3, [pc, #16]	; (5540 <z_spin_lock_valid+0x18>)
    552e:	f000 0003 	and.w	r0, r0, #3
    5532:	7d1b      	ldrb	r3, [r3, #20]
    5534:	1ac0      	subs	r0, r0, r3
    5536:	bf18      	it	ne
    5538:	2001      	movne	r0, #1
    553a:	4770      	bx	lr
			return false;
		}
	}
	return true;
    553c:	2001      	movs	r0, #1
}
    553e:	4770      	bx	lr
    5540:	200003c4 	.word	0x200003c4

00005544 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    5544:	4905      	ldr	r1, [pc, #20]	; (555c <z_spin_unlock_valid+0x18>)
{
    5546:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    5548:	688a      	ldr	r2, [r1, #8]
    554a:	7d08      	ldrb	r0, [r1, #20]
    554c:	6819      	ldr	r1, [r3, #0]
    554e:	4302      	orrs	r2, r0
    5550:	2000      	movs	r0, #0
    5552:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
    5554:	bf04      	itt	eq
    5556:	6018      	streq	r0, [r3, #0]
	return true;
    5558:	2001      	moveq	r0, #1
}
    555a:	4770      	bx	lr
    555c:	200003c4 	.word	0x200003c4

00005560 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    5560:	4a02      	ldr	r2, [pc, #8]	; (556c <z_spin_lock_set_owner+0xc>)
    5562:	7d11      	ldrb	r1, [r2, #20]
    5564:	6893      	ldr	r3, [r2, #8]
    5566:	430b      	orrs	r3, r1
    5568:	6003      	str	r3, [r0, #0]
}
    556a:	4770      	bx	lr
    556c:	200003c4 	.word	0x200003c4

00005570 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    5570:	4b03      	ldr	r3, [pc, #12]	; (5580 <elapsed+0x10>)
    5572:	681b      	ldr	r3, [r3, #0]
    5574:	b90b      	cbnz	r3, 557a <elapsed+0xa>
    5576:	f7fc ba8b 	b.w	1a90 <z_clock_elapsed>
}
    557a:	2000      	movs	r0, #0
    557c:	4770      	bx	lr
    557e:	bf00      	nop
    5580:	20000408 	.word	0x20000408

00005584 <next_timeout>:
	return list->head == list;
    5584:	4b0b      	ldr	r3, [pc, #44]	; (55b4 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
    5586:	b510      	push	{r4, lr}
    5588:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    558a:	429c      	cmp	r4, r3
    558c:	bf08      	it	eq
    558e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
    5590:	f7ff ffee 	bl	5570 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    5594:	b154      	cbz	r4, 55ac <next_timeout+0x28>
    5596:	68a3      	ldr	r3, [r4, #8]
    5598:	1a18      	subs	r0, r3, r0
    559a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    559e:	4b06      	ldr	r3, [pc, #24]	; (55b8 <next_timeout+0x34>)
    55a0:	691b      	ldr	r3, [r3, #16]
    55a2:	b113      	cbz	r3, 55aa <next_timeout+0x26>
    55a4:	4298      	cmp	r0, r3
    55a6:	bfa8      	it	ge
    55a8:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    55aa:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    55ac:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    55b0:	e7f5      	b.n	559e <next_timeout+0x1a>
    55b2:	bf00      	nop
    55b4:	20000070 	.word	0x20000070
    55b8:	200003c4 	.word	0x200003c4

000055bc <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    55bc:	6803      	ldr	r3, [r0, #0]
    55be:	b140      	cbz	r0, 55d2 <remove_timeout+0x16>
    55c0:	4a07      	ldr	r2, [pc, #28]	; (55e0 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
    55c2:	6852      	ldr	r2, [r2, #4]
    55c4:	4290      	cmp	r0, r2
    55c6:	d004      	beq.n	55d2 <remove_timeout+0x16>
	if (next(t) != NULL) {
    55c8:	b11b      	cbz	r3, 55d2 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
    55ca:	689a      	ldr	r2, [r3, #8]
    55cc:	6881      	ldr	r1, [r0, #8]
    55ce:	440a      	add	r2, r1
    55d0:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
    55d2:	6842      	ldr	r2, [r0, #4]
    55d4:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    55d6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    55d8:	2300      	movs	r3, #0
	node->prev = NULL;
    55da:	e9c0 3300 	strd	r3, r3, [r0]
}
    55de:	4770      	bx	lr
    55e0:	20000070 	.word	0x20000070

000055e4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    55e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    55e8:	9101      	str	r1, [sp, #4]
    55ea:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    55ec:	1c4b      	adds	r3, r1, #1
    55ee:	bf08      	it	eq
    55f0:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    55f4:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    55f6:	f000 80ad 	beq.w	5754 <z_add_timeout+0x170>
#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    55fa:	f06f 0301 	mvn.w	r3, #1
    55fe:	f04f 3bff 	mov.w	fp, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
    5602:	1c54      	adds	r4, r2, #1
    5604:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    5608:	ebb3 0804 	subs.w	r8, r3, r4
    560c:	eb6b 0905 	sbc.w	r9, fp, r5
    5610:	f1b8 0f00 	cmp.w	r8, #0
    5614:	f179 0300 	sbcs.w	r3, r9, #0
    5618:	db0f      	blt.n	563a <z_add_timeout+0x56>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
    561a:	f7ff ffa9 	bl	5570 <elapsed>
    561e:	f06f 0301 	mvn.w	r3, #1
    5622:	4a52      	ldr	r2, [pc, #328]	; (576c <z_add_timeout+0x188>)
    5624:	e9d2 1c00 	ldrd	r1, ip, [r2]
    5628:	1a5b      	subs	r3, r3, r1
    562a:	eb6b 020c 	sbc.w	r2, fp, ip
    562e:	1b1e      	subs	r6, r3, r4
    5630:	eb62 0705 	sbc.w	r7, r2, r5
    5634:	1a34      	subs	r4, r6, r0
    5636:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    563a:	f8da 3000 	ldr.w	r3, [sl]
    563e:	b163      	cbz	r3, 565a <z_add_timeout+0x76>
    5640:	494b      	ldr	r1, [pc, #300]	; (5770 <z_add_timeout+0x18c>)
    5642:	2367      	movs	r3, #103	; 0x67
    5644:	4a4b      	ldr	r2, [pc, #300]	; (5774 <z_add_timeout+0x190>)
    5646:	484c      	ldr	r0, [pc, #304]	; (5778 <z_add_timeout+0x194>)
    5648:	f000 fb53 	bl	5cf2 <printk>
    564c:	484b      	ldr	r0, [pc, #300]	; (577c <z_add_timeout+0x198>)
    564e:	f000 fb50 	bl	5cf2 <printk>
    5652:	2167      	movs	r1, #103	; 0x67
    5654:	4847      	ldr	r0, [pc, #284]	; (5774 <z_add_timeout+0x190>)
    5656:	f000 fc1a 	bl	5e8e <assert_post_action>
	to->fn = fn;
    565a:	9b01      	ldr	r3, [sp, #4]
	ticks = MAX(1, ticks);
    565c:	2c01      	cmp	r4, #1
	to->fn = fn;
    565e:	f8ca 300c 	str.w	r3, [sl, #12]
	ticks = MAX(1, ticks);
    5662:	f175 0300 	sbcs.w	r3, r5, #0
    5666:	bfb8      	it	lt
    5668:	2401      	movlt	r4, #1
	__asm__ volatile(
    566a:	f04f 0320 	mov.w	r3, #32
    566e:	f3ef 8611 	mrs	r6, BASEPRI
    5672:	f383 8811 	msr	BASEPRI, r3
    5676:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    567a:	4841      	ldr	r0, [pc, #260]	; (5780 <z_add_timeout+0x19c>)
    567c:	f7ff ff54 	bl	5528 <z_spin_lock_valid>
    5680:	b968      	cbnz	r0, 569e <z_add_timeout+0xba>
    5682:	235c      	movs	r3, #92	; 0x5c
    5684:	4a3f      	ldr	r2, [pc, #252]	; (5784 <z_add_timeout+0x1a0>)
    5686:	4940      	ldr	r1, [pc, #256]	; (5788 <z_add_timeout+0x1a4>)
    5688:	483b      	ldr	r0, [pc, #236]	; (5778 <z_add_timeout+0x194>)
    568a:	f000 fb32 	bl	5cf2 <printk>
    568e:	493c      	ldr	r1, [pc, #240]	; (5780 <z_add_timeout+0x19c>)
    5690:	483e      	ldr	r0, [pc, #248]	; (578c <z_add_timeout+0x1a8>)
    5692:	f000 fb2e 	bl	5cf2 <printk>
    5696:	215c      	movs	r1, #92	; 0x5c
    5698:	483a      	ldr	r0, [pc, #232]	; (5784 <z_add_timeout+0x1a0>)
    569a:	f000 fbf8 	bl	5e8e <assert_post_action>
	z_spin_lock_set_owner(l);
    569e:	4838      	ldr	r0, [pc, #224]	; (5780 <z_add_timeout+0x19c>)
    56a0:	f7ff ff5e 	bl	5560 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    56a4:	f7ff ff64 	bl	5570 <elapsed>
    56a8:	4420      	add	r0, r4
	return list->head == list;
    56aa:	4c39      	ldr	r4, [pc, #228]	; (5790 <z_add_timeout+0x1ac>)
    56ac:	f8ca 0008 	str.w	r0, [sl, #8]
    56b0:	6825      	ldr	r5, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    56b2:	42a5      	cmp	r5, r4
    56b4:	d005      	beq.n	56c2 <z_add_timeout+0xde>
		for (t = first(); t != NULL; t = next(t)) {
			__ASSERT(t->dticks >= 0, "");
    56b6:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 5774 <z_add_timeout+0x190>
    56ba:	4f36      	ldr	r7, [pc, #216]	; (5794 <z_add_timeout+0x1b0>)
    56bc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 5778 <z_add_timeout+0x194>
		for (t = first(); t != NULL; t = next(t)) {
    56c0:	b955      	cbnz	r5, 56d8 <z_add_timeout+0xf4>
	node->prev = list->tail;
    56c2:	6863      	ldr	r3, [r4, #4]
	node->next = list;
    56c4:	f8ca 4000 	str.w	r4, [sl]
	node->prev = list->tail;
    56c8:	f8ca 3004 	str.w	r3, [sl, #4]
	list->tail->next = node;
    56cc:	6863      	ldr	r3, [r4, #4]
    56ce:	f8c3 a000 	str.w	sl, [r3]
	list->tail = node;
    56d2:	f8c4 a004 	str.w	sl, [r4, #4]
}
    56d6:	e01d      	b.n	5714 <z_add_timeout+0x130>
			__ASSERT(t->dticks >= 0, "");
    56d8:	68ab      	ldr	r3, [r5, #8]
    56da:	2b00      	cmp	r3, #0
    56dc:	da0c      	bge.n	56f8 <z_add_timeout+0x114>
    56de:	4639      	mov	r1, r7
    56e0:	2370      	movs	r3, #112	; 0x70
    56e2:	464a      	mov	r2, r9
    56e4:	4640      	mov	r0, r8
    56e6:	f000 fb04 	bl	5cf2 <printk>
    56ea:	4824      	ldr	r0, [pc, #144]	; (577c <z_add_timeout+0x198>)
    56ec:	f000 fb01 	bl	5cf2 <printk>
    56f0:	2170      	movs	r1, #112	; 0x70
    56f2:	4648      	mov	r0, r9
    56f4:	f000 fbcb 	bl	5e8e <assert_post_action>

			if (t->dticks > to->dticks) {
    56f8:	68aa      	ldr	r2, [r5, #8]
    56fa:	f8da 3008 	ldr.w	r3, [sl, #8]
    56fe:	429a      	cmp	r2, r3
    5700:	dd2b      	ble.n	575a <z_add_timeout+0x176>
				t->dticks -= to->dticks;
    5702:	1ad3      	subs	r3, r2, r3
    5704:	60ab      	str	r3, [r5, #8]
	node->prev = successor->prev;
    5706:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    5708:	e9ca 5300 	strd	r5, r3, [sl]
	successor->prev->next = node;
    570c:	f8c3 a000 	str.w	sl, [r3]
	successor->prev = node;
    5710:	f8c5 a004 	str.w	sl, [r5, #4]
	return list->head == list;
    5714:	6823      	ldr	r3, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5716:	42a3      	cmp	r3, r4
    5718:	d006      	beq.n	5728 <z_add_timeout+0x144>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    571a:	459a      	cmp	sl, r3
    571c:	d104      	bne.n	5728 <z_add_timeout+0x144>
			z_clock_set_timeout(next_timeout(), false);
    571e:	f7ff ff31 	bl	5584 <next_timeout>
    5722:	2100      	movs	r1, #0
    5724:	f7fc f950 	bl	19c8 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5728:	4815      	ldr	r0, [pc, #84]	; (5780 <z_add_timeout+0x19c>)
    572a:	f7ff ff0b 	bl	5544 <z_spin_unlock_valid>
    572e:	b968      	cbnz	r0, 574c <z_add_timeout+0x168>
    5730:	2384      	movs	r3, #132	; 0x84
    5732:	4a14      	ldr	r2, [pc, #80]	; (5784 <z_add_timeout+0x1a0>)
    5734:	4918      	ldr	r1, [pc, #96]	; (5798 <z_add_timeout+0x1b4>)
    5736:	4810      	ldr	r0, [pc, #64]	; (5778 <z_add_timeout+0x194>)
    5738:	f000 fadb 	bl	5cf2 <printk>
    573c:	4910      	ldr	r1, [pc, #64]	; (5780 <z_add_timeout+0x19c>)
    573e:	4817      	ldr	r0, [pc, #92]	; (579c <z_add_timeout+0x1b8>)
    5740:	f000 fad7 	bl	5cf2 <printk>
    5744:	2184      	movs	r1, #132	; 0x84
    5746:	480f      	ldr	r0, [pc, #60]	; (5784 <z_add_timeout+0x1a0>)
    5748:	f000 fba1 	bl	5e8e <assert_post_action>
	__asm__ volatile(
    574c:	f386 8811 	msr	BASEPRI, r6
    5750:	f3bf 8f6f 	isb	sy
		}
	}
}
    5754:	b003      	add	sp, #12
    5756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
    575a:	1a9b      	subs	r3, r3, r2
    575c:	f8ca 3008 	str.w	r3, [sl, #8]
	return (node == list->tail) ? NULL : node->next;
    5760:	6863      	ldr	r3, [r4, #4]
    5762:	429d      	cmp	r5, r3
    5764:	d0ad      	beq.n	56c2 <z_add_timeout+0xde>
    5766:	682d      	ldr	r5, [r5, #0]
    5768:	e7aa      	b.n	56c0 <z_add_timeout+0xdc>
    576a:	bf00      	nop
    576c:	20000130 	.word	0x20000130
    5770:	000086b5 	.word	0x000086b5
    5774:	00008691 	.word	0x00008691
    5778:	00006f74 	.word	0x00006f74
    577c:	0000843a 	.word	0x0000843a
    5780:	2000040c 	.word	0x2000040c
    5784:	00007380 	.word	0x00007380
    5788:	000073a6 	.word	0x000073a6
    578c:	000073bb 	.word	0x000073bb
    5790:	20000070 	.word	0x20000070
    5794:	000086d5 	.word	0x000086d5
    5798:	000073d3 	.word	0x000073d3
    579c:	000073ea 	.word	0x000073ea

000057a0 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    57a0:	b538      	push	{r3, r4, r5, lr}
    57a2:	4604      	mov	r4, r0
	__asm__ volatile(
    57a4:	f04f 0320 	mov.w	r3, #32
    57a8:	f3ef 8511 	mrs	r5, BASEPRI
    57ac:	f383 8811 	msr	BASEPRI, r3
    57b0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    57b4:	481a      	ldr	r0, [pc, #104]	; (5820 <z_abort_timeout+0x80>)
    57b6:	f7ff feb7 	bl	5528 <z_spin_lock_valid>
    57ba:	b968      	cbnz	r0, 57d8 <z_abort_timeout+0x38>
    57bc:	235c      	movs	r3, #92	; 0x5c
    57be:	4a19      	ldr	r2, [pc, #100]	; (5824 <z_abort_timeout+0x84>)
    57c0:	4919      	ldr	r1, [pc, #100]	; (5828 <z_abort_timeout+0x88>)
    57c2:	481a      	ldr	r0, [pc, #104]	; (582c <z_abort_timeout+0x8c>)
    57c4:	f000 fa95 	bl	5cf2 <printk>
    57c8:	4915      	ldr	r1, [pc, #84]	; (5820 <z_abort_timeout+0x80>)
    57ca:	4819      	ldr	r0, [pc, #100]	; (5830 <z_abort_timeout+0x90>)
    57cc:	f000 fa91 	bl	5cf2 <printk>
    57d0:	215c      	movs	r1, #92	; 0x5c
    57d2:	4814      	ldr	r0, [pc, #80]	; (5824 <z_abort_timeout+0x84>)
    57d4:	f000 fb5b 	bl	5e8e <assert_post_action>
	z_spin_lock_set_owner(l);
    57d8:	4811      	ldr	r0, [pc, #68]	; (5820 <z_abort_timeout+0x80>)
    57da:	f7ff fec1 	bl	5560 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    57de:	6823      	ldr	r3, [r4, #0]
    57e0:	b1db      	cbz	r3, 581a <z_abort_timeout+0x7a>
			remove_timeout(to);
    57e2:	4620      	mov	r0, r4
    57e4:	f7ff feea 	bl	55bc <remove_timeout>
			ret = 0;
    57e8:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    57ea:	480d      	ldr	r0, [pc, #52]	; (5820 <z_abort_timeout+0x80>)
    57ec:	f7ff feaa 	bl	5544 <z_spin_unlock_valid>
    57f0:	b968      	cbnz	r0, 580e <z_abort_timeout+0x6e>
    57f2:	2384      	movs	r3, #132	; 0x84
    57f4:	4a0b      	ldr	r2, [pc, #44]	; (5824 <z_abort_timeout+0x84>)
    57f6:	490f      	ldr	r1, [pc, #60]	; (5834 <z_abort_timeout+0x94>)
    57f8:	480c      	ldr	r0, [pc, #48]	; (582c <z_abort_timeout+0x8c>)
    57fa:	f000 fa7a 	bl	5cf2 <printk>
    57fe:	4908      	ldr	r1, [pc, #32]	; (5820 <z_abort_timeout+0x80>)
    5800:	480d      	ldr	r0, [pc, #52]	; (5838 <z_abort_timeout+0x98>)
    5802:	f000 fa76 	bl	5cf2 <printk>
    5806:	2184      	movs	r1, #132	; 0x84
    5808:	4806      	ldr	r0, [pc, #24]	; (5824 <z_abort_timeout+0x84>)
    580a:	f000 fb40 	bl	5e8e <assert_post_action>
	__asm__ volatile(
    580e:	f385 8811 	msr	BASEPRI, r5
    5812:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    5816:	4620      	mov	r0, r4
    5818:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    581a:	f06f 0415 	mvn.w	r4, #21
    581e:	e7e4      	b.n	57ea <z_abort_timeout+0x4a>
    5820:	2000040c 	.word	0x2000040c
    5824:	00007380 	.word	0x00007380
    5828:	000073a6 	.word	0x000073a6
    582c:	00006f74 	.word	0x00006f74
    5830:	000073bb 	.word	0x000073bb
    5834:	000073d3 	.word	0x000073d3
    5838:	000073ea 	.word	0x000073ea

0000583c <z_get_next_timeout_expiry>:

	return ticks;
}

s32_t z_get_next_timeout_expiry(void)
{
    583c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    583e:	f04f 0320 	mov.w	r3, #32
    5842:	f3ef 8511 	mrs	r5, BASEPRI
    5846:	f383 8811 	msr	BASEPRI, r3
    584a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    584e:	4818      	ldr	r0, [pc, #96]	; (58b0 <z_get_next_timeout_expiry+0x74>)
    5850:	f7ff fe6a 	bl	5528 <z_spin_lock_valid>
    5854:	b968      	cbnz	r0, 5872 <z_get_next_timeout_expiry+0x36>
    5856:	235c      	movs	r3, #92	; 0x5c
    5858:	4a16      	ldr	r2, [pc, #88]	; (58b4 <z_get_next_timeout_expiry+0x78>)
    585a:	4917      	ldr	r1, [pc, #92]	; (58b8 <z_get_next_timeout_expiry+0x7c>)
    585c:	4817      	ldr	r0, [pc, #92]	; (58bc <z_get_next_timeout_expiry+0x80>)
    585e:	f000 fa48 	bl	5cf2 <printk>
    5862:	4913      	ldr	r1, [pc, #76]	; (58b0 <z_get_next_timeout_expiry+0x74>)
    5864:	4816      	ldr	r0, [pc, #88]	; (58c0 <z_get_next_timeout_expiry+0x84>)
    5866:	f000 fa44 	bl	5cf2 <printk>
    586a:	215c      	movs	r1, #92	; 0x5c
    586c:	4811      	ldr	r0, [pc, #68]	; (58b4 <z_get_next_timeout_expiry+0x78>)
    586e:	f000 fb0e 	bl	5e8e <assert_post_action>
	z_spin_lock_set_owner(l);
    5872:	480f      	ldr	r0, [pc, #60]	; (58b0 <z_get_next_timeout_expiry+0x74>)
    5874:	f7ff fe74 	bl	5560 <z_spin_lock_set_owner>
	s32_t ret = (s32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    5878:	f7ff fe84 	bl	5584 <next_timeout>
    587c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    587e:	480c      	ldr	r0, [pc, #48]	; (58b0 <z_get_next_timeout_expiry+0x74>)
    5880:	f7ff fe60 	bl	5544 <z_spin_unlock_valid>
    5884:	b968      	cbnz	r0, 58a2 <z_get_next_timeout_expiry+0x66>
    5886:	2384      	movs	r3, #132	; 0x84
    5888:	4a0a      	ldr	r2, [pc, #40]	; (58b4 <z_get_next_timeout_expiry+0x78>)
    588a:	490e      	ldr	r1, [pc, #56]	; (58c4 <z_get_next_timeout_expiry+0x88>)
    588c:	480b      	ldr	r0, [pc, #44]	; (58bc <z_get_next_timeout_expiry+0x80>)
    588e:	f000 fa30 	bl	5cf2 <printk>
    5892:	4907      	ldr	r1, [pc, #28]	; (58b0 <z_get_next_timeout_expiry+0x74>)
    5894:	480c      	ldr	r0, [pc, #48]	; (58c8 <z_get_next_timeout_expiry+0x8c>)
    5896:	f000 fa2c 	bl	5cf2 <printk>
    589a:	2184      	movs	r1, #132	; 0x84
    589c:	4805      	ldr	r0, [pc, #20]	; (58b4 <z_get_next_timeout_expiry+0x78>)
    589e:	f000 faf6 	bl	5e8e <assert_post_action>
	__asm__ volatile(
    58a2:	f385 8811 	msr	BASEPRI, r5
    58a6:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    58aa:	4620      	mov	r0, r4
    58ac:	bd38      	pop	{r3, r4, r5, pc}
    58ae:	bf00      	nop
    58b0:	2000040c 	.word	0x2000040c
    58b4:	00007380 	.word	0x00007380
    58b8:	000073a6 	.word	0x000073a6
    58bc:	00006f74 	.word	0x00006f74
    58c0:	000073bb 	.word	0x000073bb
    58c4:	000073d3 	.word	0x000073d3
    58c8:	000073ea 	.word	0x000073ea

000058cc <z_set_timeout_expiry>:

void z_set_timeout_expiry(s32_t ticks, bool idle)
{
    58cc:	b570      	push	{r4, r5, r6, lr}
    58ce:	4604      	mov	r4, r0
    58d0:	460d      	mov	r5, r1
	__asm__ volatile(
    58d2:	f04f 0320 	mov.w	r3, #32
    58d6:	f3ef 8611 	mrs	r6, BASEPRI
    58da:	f383 8811 	msr	BASEPRI, r3
    58de:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    58e2:	481b      	ldr	r0, [pc, #108]	; (5950 <z_set_timeout_expiry+0x84>)
    58e4:	f7ff fe20 	bl	5528 <z_spin_lock_valid>
    58e8:	b968      	cbnz	r0, 5906 <z_set_timeout_expiry+0x3a>
    58ea:	235c      	movs	r3, #92	; 0x5c
    58ec:	4a19      	ldr	r2, [pc, #100]	; (5954 <z_set_timeout_expiry+0x88>)
    58ee:	491a      	ldr	r1, [pc, #104]	; (5958 <z_set_timeout_expiry+0x8c>)
    58f0:	481a      	ldr	r0, [pc, #104]	; (595c <z_set_timeout_expiry+0x90>)
    58f2:	f000 f9fe 	bl	5cf2 <printk>
    58f6:	4916      	ldr	r1, [pc, #88]	; (5950 <z_set_timeout_expiry+0x84>)
    58f8:	4819      	ldr	r0, [pc, #100]	; (5960 <z_set_timeout_expiry+0x94>)
    58fa:	f000 f9fa 	bl	5cf2 <printk>
    58fe:	215c      	movs	r1, #92	; 0x5c
    5900:	4814      	ldr	r0, [pc, #80]	; (5954 <z_set_timeout_expiry+0x88>)
    5902:	f000 fac4 	bl	5e8e <assert_post_action>
	z_spin_lock_set_owner(l);
    5906:	4812      	ldr	r0, [pc, #72]	; (5950 <z_set_timeout_expiry+0x84>)
    5908:	f7ff fe2a 	bl	5560 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next = next_timeout();
    590c:	f7ff fe3a 	bl	5584 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    5910:	2801      	cmp	r0, #1
    5912:	dd05      	ble.n	5920 <z_set_timeout_expiry+0x54>
    5914:	42a0      	cmp	r0, r4
    5916:	dd03      	ble.n	5920 <z_set_timeout_expiry+0x54>
			z_clock_set_timeout(ticks, idle);
    5918:	4629      	mov	r1, r5
    591a:	4620      	mov	r0, r4
    591c:	f7fc f854 	bl	19c8 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5920:	480b      	ldr	r0, [pc, #44]	; (5950 <z_set_timeout_expiry+0x84>)
    5922:	f7ff fe0f 	bl	5544 <z_spin_unlock_valid>
    5926:	b968      	cbnz	r0, 5944 <z_set_timeout_expiry+0x78>
    5928:	2384      	movs	r3, #132	; 0x84
    592a:	4a0a      	ldr	r2, [pc, #40]	; (5954 <z_set_timeout_expiry+0x88>)
    592c:	490d      	ldr	r1, [pc, #52]	; (5964 <z_set_timeout_expiry+0x98>)
    592e:	480b      	ldr	r0, [pc, #44]	; (595c <z_set_timeout_expiry+0x90>)
    5930:	f000 f9df 	bl	5cf2 <printk>
    5934:	4906      	ldr	r1, [pc, #24]	; (5950 <z_set_timeout_expiry+0x84>)
    5936:	480c      	ldr	r0, [pc, #48]	; (5968 <z_set_timeout_expiry+0x9c>)
    5938:	f000 f9db 	bl	5cf2 <printk>
    593c:	2184      	movs	r1, #132	; 0x84
    593e:	4805      	ldr	r0, [pc, #20]	; (5954 <z_set_timeout_expiry+0x88>)
    5940:	f000 faa5 	bl	5e8e <assert_post_action>
	__asm__ volatile(
    5944:	f386 8811 	msr	BASEPRI, r6
    5948:	f3bf 8f6f 	isb	sy
		}
	}
}
    594c:	bd70      	pop	{r4, r5, r6, pc}
    594e:	bf00      	nop
    5950:	2000040c 	.word	0x2000040c
    5954:	00007380 	.word	0x00007380
    5958:	000073a6 	.word	0x000073a6
    595c:	00006f74 	.word	0x00006f74
    5960:	000073bb 	.word	0x000073bb
    5964:	000073d3 	.word	0x000073d3
    5968:	000073ea 	.word	0x000073ea

0000596c <z_clock_announce>:

void z_clock_announce(s32_t ticks)
{
    596c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5970:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    5972:	f7fe ff51 	bl	4818 <z_time_slice>
	__asm__ volatile(
    5976:	f04f 0320 	mov.w	r3, #32
    597a:	f3ef 8511 	mrs	r5, BASEPRI
    597e:	f383 8811 	msr	BASEPRI, r3
    5982:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5986:	4847      	ldr	r0, [pc, #284]	; (5aa4 <z_clock_announce+0x138>)
    5988:	f7ff fdce 	bl	5528 <z_spin_lock_valid>
    598c:	b968      	cbnz	r0, 59aa <z_clock_announce+0x3e>
    598e:	235c      	movs	r3, #92	; 0x5c
    5990:	4a45      	ldr	r2, [pc, #276]	; (5aa8 <z_clock_announce+0x13c>)
    5992:	4946      	ldr	r1, [pc, #280]	; (5aac <z_clock_announce+0x140>)
    5994:	4846      	ldr	r0, [pc, #280]	; (5ab0 <z_clock_announce+0x144>)
    5996:	f000 f9ac 	bl	5cf2 <printk>
    599a:	4942      	ldr	r1, [pc, #264]	; (5aa4 <z_clock_announce+0x138>)
    599c:	4845      	ldr	r0, [pc, #276]	; (5ab4 <z_clock_announce+0x148>)
    599e:	f000 f9a8 	bl	5cf2 <printk>
    59a2:	215c      	movs	r1, #92	; 0x5c
    59a4:	4840      	ldr	r0, [pc, #256]	; (5aa8 <z_clock_announce+0x13c>)
    59a6:	f000 fa72 	bl	5e8e <assert_post_action>
	z_spin_lock_set_owner(l);
    59aa:	4f43      	ldr	r7, [pc, #268]	; (5ab8 <z_clock_announce+0x14c>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    59ac:	4e43      	ldr	r6, [pc, #268]	; (5abc <z_clock_announce+0x150>)
    59ae:	46b9      	mov	r9, r7
    59b0:	483c      	ldr	r0, [pc, #240]	; (5aa4 <z_clock_announce+0x138>)
	return list->head == list;
    59b2:	f8df 8114 	ldr.w	r8, [pc, #276]	; 5ac8 <z_clock_announce+0x15c>
    59b6:	f7ff fdd3 	bl	5560 <z_spin_lock_set_owner>
    59ba:	6034      	str	r4, [r6, #0]
    59bc:	f8d8 4000 	ldr.w	r4, [r8]
    59c0:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    59c2:	4544      	cmp	r4, r8
    59c4:	e9d7 0100 	ldrd	r0, r1, [r7]
    59c8:	d005      	beq.n	59d6 <z_clock_announce+0x6a>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    59ca:	b124      	cbz	r4, 59d6 <z_clock_announce+0x6a>
    59cc:	68a3      	ldr	r3, [r4, #8]
    59ce:	4293      	cmp	r3, r2
    59d0:	dd25      	ble.n	5a1e <z_clock_announce+0xb2>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    59d2:	1a9b      	subs	r3, r3, r2
    59d4:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    59d6:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    59d8:	1880      	adds	r0, r0, r2
    59da:	eb41 71e2 	adc.w	r1, r1, r2, asr #31
    59de:	e9c9 0100 	strd	r0, r1, [r9]
	announce_remaining = 0;
    59e2:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
    59e4:	f7ff fdce 	bl	5584 <next_timeout>
    59e8:	4621      	mov	r1, r4
    59ea:	f7fb ffed 	bl	19c8 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    59ee:	482d      	ldr	r0, [pc, #180]	; (5aa4 <z_clock_announce+0x138>)
    59f0:	f7ff fda8 	bl	5544 <z_spin_unlock_valid>
    59f4:	b968      	cbnz	r0, 5a12 <z_clock_announce+0xa6>
    59f6:	2384      	movs	r3, #132	; 0x84
    59f8:	4a2b      	ldr	r2, [pc, #172]	; (5aa8 <z_clock_announce+0x13c>)
    59fa:	4931      	ldr	r1, [pc, #196]	; (5ac0 <z_clock_announce+0x154>)
    59fc:	482c      	ldr	r0, [pc, #176]	; (5ab0 <z_clock_announce+0x144>)
    59fe:	f000 f978 	bl	5cf2 <printk>
    5a02:	4928      	ldr	r1, [pc, #160]	; (5aa4 <z_clock_announce+0x138>)
    5a04:	482f      	ldr	r0, [pc, #188]	; (5ac4 <z_clock_announce+0x158>)
    5a06:	f000 f974 	bl	5cf2 <printk>
    5a0a:	2184      	movs	r1, #132	; 0x84
    5a0c:	4826      	ldr	r0, [pc, #152]	; (5aa8 <z_clock_announce+0x13c>)
    5a0e:	f000 fa3e 	bl	5e8e <assert_post_action>
	__asm__ volatile(
    5a12:	f385 8811 	msr	BASEPRI, r5
    5a16:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    5a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    5a1e:	18c0      	adds	r0, r0, r3
    5a20:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
		announce_remaining -= dt;
    5a24:	1ad3      	subs	r3, r2, r3
    5a26:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    5a28:	2300      	movs	r3, #0
		curr_tick += dt;
    5a2a:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
    5a2e:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
    5a30:	4620      	mov	r0, r4
    5a32:	f7ff fdc3 	bl	55bc <remove_timeout>
    5a36:	481b      	ldr	r0, [pc, #108]	; (5aa4 <z_clock_announce+0x138>)
    5a38:	f7ff fd84 	bl	5544 <z_spin_unlock_valid>
    5a3c:	b968      	cbnz	r0, 5a5a <z_clock_announce+0xee>
    5a3e:	2384      	movs	r3, #132	; 0x84
    5a40:	4a19      	ldr	r2, [pc, #100]	; (5aa8 <z_clock_announce+0x13c>)
    5a42:	491f      	ldr	r1, [pc, #124]	; (5ac0 <z_clock_announce+0x154>)
    5a44:	481a      	ldr	r0, [pc, #104]	; (5ab0 <z_clock_announce+0x144>)
    5a46:	f000 f954 	bl	5cf2 <printk>
    5a4a:	4916      	ldr	r1, [pc, #88]	; (5aa4 <z_clock_announce+0x138>)
    5a4c:	481d      	ldr	r0, [pc, #116]	; (5ac4 <z_clock_announce+0x158>)
    5a4e:	f000 f950 	bl	5cf2 <printk>
    5a52:	2184      	movs	r1, #132	; 0x84
    5a54:	4814      	ldr	r0, [pc, #80]	; (5aa8 <z_clock_announce+0x13c>)
    5a56:	f000 fa1a 	bl	5e8e <assert_post_action>
    5a5a:	f385 8811 	msr	BASEPRI, r5
    5a5e:	f3bf 8f6f 	isb	sy
		t->fn(t);
    5a62:	4620      	mov	r0, r4
    5a64:	68e3      	ldr	r3, [r4, #12]
    5a66:	4798      	blx	r3
	__asm__ volatile(
    5a68:	f04f 0320 	mov.w	r3, #32
    5a6c:	f3ef 8511 	mrs	r5, BASEPRI
    5a70:	f383 8811 	msr	BASEPRI, r3
    5a74:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5a78:	480a      	ldr	r0, [pc, #40]	; (5aa4 <z_clock_announce+0x138>)
    5a7a:	f7ff fd55 	bl	5528 <z_spin_lock_valid>
    5a7e:	b968      	cbnz	r0, 5a9c <z_clock_announce+0x130>
    5a80:	235c      	movs	r3, #92	; 0x5c
    5a82:	4a09      	ldr	r2, [pc, #36]	; (5aa8 <z_clock_announce+0x13c>)
    5a84:	4909      	ldr	r1, [pc, #36]	; (5aac <z_clock_announce+0x140>)
    5a86:	480a      	ldr	r0, [pc, #40]	; (5ab0 <z_clock_announce+0x144>)
    5a88:	f000 f933 	bl	5cf2 <printk>
    5a8c:	4905      	ldr	r1, [pc, #20]	; (5aa4 <z_clock_announce+0x138>)
    5a8e:	4809      	ldr	r0, [pc, #36]	; (5ab4 <z_clock_announce+0x148>)
    5a90:	f000 f92f 	bl	5cf2 <printk>
    5a94:	215c      	movs	r1, #92	; 0x5c
    5a96:	4804      	ldr	r0, [pc, #16]	; (5aa8 <z_clock_announce+0x13c>)
    5a98:	f000 f9f9 	bl	5e8e <assert_post_action>
	z_spin_lock_set_owner(l);
    5a9c:	4801      	ldr	r0, [pc, #4]	; (5aa4 <z_clock_announce+0x138>)
    5a9e:	f7ff fd5f 	bl	5560 <z_spin_lock_set_owner>
	return k;
    5aa2:	e78b      	b.n	59bc <z_clock_announce+0x50>
    5aa4:	2000040c 	.word	0x2000040c
    5aa8:	00007380 	.word	0x00007380
    5aac:	000073a6 	.word	0x000073a6
    5ab0:	00006f74 	.word	0x00006f74
    5ab4:	000073bb 	.word	0x000073bb
    5ab8:	20000130 	.word	0x20000130
    5abc:	20000408 	.word	0x20000408
    5ac0:	000073d3 	.word	0x000073d3
    5ac4:	000073ea 	.word	0x000073ea
    5ac8:	20000070 	.word	0x20000070

00005acc <z_tick_get>:

s64_t z_tick_get(void)
{
    5acc:	b570      	push	{r4, r5, r6, lr}
    5ace:	f04f 0320 	mov.w	r3, #32
    5ad2:	f3ef 8611 	mrs	r6, BASEPRI
    5ad6:	f383 8811 	msr	BASEPRI, r3
    5ada:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5ade:	481b      	ldr	r0, [pc, #108]	; (5b4c <z_tick_get+0x80>)
    5ae0:	f7ff fd22 	bl	5528 <z_spin_lock_valid>
    5ae4:	b968      	cbnz	r0, 5b02 <z_tick_get+0x36>
    5ae6:	235c      	movs	r3, #92	; 0x5c
    5ae8:	4a19      	ldr	r2, [pc, #100]	; (5b50 <z_tick_get+0x84>)
    5aea:	491a      	ldr	r1, [pc, #104]	; (5b54 <z_tick_get+0x88>)
    5aec:	481a      	ldr	r0, [pc, #104]	; (5b58 <z_tick_get+0x8c>)
    5aee:	f000 f900 	bl	5cf2 <printk>
    5af2:	4916      	ldr	r1, [pc, #88]	; (5b4c <z_tick_get+0x80>)
    5af4:	4819      	ldr	r0, [pc, #100]	; (5b5c <z_tick_get+0x90>)
    5af6:	f000 f8fc 	bl	5cf2 <printk>
    5afa:	215c      	movs	r1, #92	; 0x5c
    5afc:	4814      	ldr	r0, [pc, #80]	; (5b50 <z_tick_get+0x84>)
    5afe:	f000 f9c6 	bl	5e8e <assert_post_action>
	z_spin_lock_set_owner(l);
    5b02:	4812      	ldr	r0, [pc, #72]	; (5b4c <z_tick_get+0x80>)
    5b04:	f7ff fd2c 	bl	5560 <z_spin_lock_set_owner>
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
    5b08:	f7fb ffc2 	bl	1a90 <z_clock_elapsed>
    5b0c:	4b14      	ldr	r3, [pc, #80]	; (5b60 <z_tick_get+0x94>)
    5b0e:	e9d3 4500 	ldrd	r4, r5, [r3]
    5b12:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5b14:	480d      	ldr	r0, [pc, #52]	; (5b4c <z_tick_get+0x80>)
    5b16:	f145 0500 	adc.w	r5, r5, #0
    5b1a:	f7ff fd13 	bl	5544 <z_spin_unlock_valid>
    5b1e:	b968      	cbnz	r0, 5b3c <z_tick_get+0x70>
    5b20:	2384      	movs	r3, #132	; 0x84
    5b22:	4a0b      	ldr	r2, [pc, #44]	; (5b50 <z_tick_get+0x84>)
    5b24:	490f      	ldr	r1, [pc, #60]	; (5b64 <z_tick_get+0x98>)
    5b26:	480c      	ldr	r0, [pc, #48]	; (5b58 <z_tick_get+0x8c>)
    5b28:	f000 f8e3 	bl	5cf2 <printk>
    5b2c:	4907      	ldr	r1, [pc, #28]	; (5b4c <z_tick_get+0x80>)
    5b2e:	480e      	ldr	r0, [pc, #56]	; (5b68 <z_tick_get+0x9c>)
    5b30:	f000 f8df 	bl	5cf2 <printk>
    5b34:	2184      	movs	r1, #132	; 0x84
    5b36:	4806      	ldr	r0, [pc, #24]	; (5b50 <z_tick_get+0x84>)
    5b38:	f000 f9a9 	bl	5e8e <assert_post_action>
	__asm__ volatile(
    5b3c:	f386 8811 	msr	BASEPRI, r6
    5b40:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    5b44:	4620      	mov	r0, r4
    5b46:	4629      	mov	r1, r5
    5b48:	bd70      	pop	{r4, r5, r6, pc}
    5b4a:	bf00      	nop
    5b4c:	2000040c 	.word	0x2000040c
    5b50:	00007380 	.word	0x00007380
    5b54:	000073a6 	.word	0x000073a6
    5b58:	00006f74 	.word	0x00006f74
    5b5c:	000073bb 	.word	0x000073bb
    5b60:	20000130 	.word	0x20000130
    5b64:	000073d3 	.word	0x000073d3
    5b68:	000073ea 	.word	0x000073ea

00005b6c <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    5b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    5b6e:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
    5b72:	1c56      	adds	r6, r2, #1
    5b74:	f143 0700 	adc.w	r7, r3, #0
    5b78:	2f00      	cmp	r7, #0
    5b7a:	bf08      	it	eq
    5b7c:	2e02      	cmpeq	r6, #2
{
    5b7e:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    5b80:	d302      	bcc.n	5b88 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    5b82:	490c      	ldr	r1, [pc, #48]	; (5bb4 <z_timer_expiration_handler+0x48>)
    5b84:	f7ff fd2e 	bl	55e4 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    5b88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5b8a:	3301      	adds	r3, #1
    5b8c:	62a3      	str	r3, [r4, #40]	; 0x28

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    5b8e:	69a3      	ldr	r3, [r4, #24]
    5b90:	b10b      	cbz	r3, 5b96 <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
    5b92:	4620      	mov	r0, r4
    5b94:	4798      	blx	r3
	return list->head == list;
    5b96:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5b9a:	42a5      	cmp	r5, r4
    5b9c:	d008      	beq.n	5bb0 <z_timer_expiration_handler+0x44>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    5b9e:	b13d      	cbz	r5, 5bb0 <z_timer_expiration_handler+0x44>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
    5ba0:	4628      	mov	r0, r5
    5ba2:	f7fe fa85 	bl	40b0 <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
    5ba6:	4628      	mov	r0, r5
    5ba8:	f7fe fca4 	bl	44f4 <z_ready_thread>
    5bac:	2300      	movs	r3, #0
    5bae:	672b      	str	r3, [r5, #112]	; 0x70

	arch_thread_return_value_set(thread, 0);
}
    5bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5bb2:	bf00      	nop
    5bb4:	00005b6d 	.word	0x00005b6d

00005bb8 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    5bb8:	e92d 4df3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, sl, fp, lr}
    5bbc:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
    5bc0:	ea54 0105 	orrs.w	r1, r4, r5
{
    5bc4:	4680      	mov	r8, r0
    5bc6:	4616      	mov	r6, r2
    5bc8:	461f      	mov	r7, r3
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
    5bca:	d016      	beq.n	5bfa <z_impl_k_timer_start+0x42>
    5bcc:	f06f 0101 	mvn.w	r1, #1
    5bd0:	ebb1 0a04 	subs.w	sl, r1, r4
    5bd4:	f04f 31ff 	mov.w	r1, #4294967295
    5bd8:	eb61 0b05 	sbc.w	fp, r1, r5
    5bdc:	f1ba 0f00 	cmp.w	sl, #0
    5be0:	f17b 0100 	sbcs.w	r1, fp, #0
    5be4:	da09      	bge.n	5bfa <z_impl_k_timer_start+0x42>
		period.ticks = MAX(period.ticks - 1, 1);
    5be6:	f114 34ff 	adds.w	r4, r4, #4294967295
    5bea:	f145 35ff 	adc.w	r5, r5, #4294967295
    5bee:	2c01      	cmp	r4, #1
    5bf0:	f175 0100 	sbcs.w	r1, r5, #0
    5bf4:	bfbc      	itt	lt
    5bf6:	2401      	movlt	r4, #1
    5bf8:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    5bfa:	f06f 0101 	mvn.w	r1, #1
    5bfe:	1a89      	subs	r1, r1, r2
    5c00:	9100      	str	r1, [sp, #0]
    5c02:	f04f 31ff 	mov.w	r1, #4294967295
    5c06:	eb61 0103 	sbc.w	r1, r1, r3
    5c0a:	9101      	str	r1, [sp, #4]
    5c0c:	e9dd 0100 	ldrd	r0, r1, [sp]
    5c10:	2800      	cmp	r0, #0
    5c12:	f171 0100 	sbcs.w	r1, r1, #0
    5c16:	da09      	bge.n	5c2c <z_impl_k_timer_start+0x74>
		duration.ticks = MAX(duration.ticks - 1, 0);
    5c18:	f112 36ff 	adds.w	r6, r2, #4294967295
    5c1c:	f143 37ff 	adc.w	r7, r3, #4294967295
    5c20:	2e00      	cmp	r6, #0
    5c22:	f177 0300 	sbcs.w	r3, r7, #0
    5c26:	bfbc      	itt	lt
    5c28:	2600      	movlt	r6, #0
    5c2a:	2700      	movlt	r7, #0
	}
#endif

	(void)z_abort_timeout(&timer->timeout);
    5c2c:	4640      	mov	r0, r8
    5c2e:	f7ff fdb7 	bl	57a0 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    5c32:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    5c34:	4632      	mov	r2, r6
	timer->status = 0U;
    5c36:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    5c3a:	4640      	mov	r0, r8
    5c3c:	463b      	mov	r3, r7
    5c3e:	4904      	ldr	r1, [pc, #16]	; (5c50 <z_impl_k_timer_start+0x98>)
	timer->period = period;
    5c40:	e9c8 4508 	strd	r4, r5, [r8, #32]
		     duration);
}
    5c44:	b002      	add	sp, #8
    5c46:	e8bd 4df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    5c4a:	f7ff bccb 	b.w	55e4 <z_add_timeout>
    5c4e:	bf00      	nop
    5c50:	00005b6d 	.word	0x00005b6d

00005c54 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(struct device *unused)
{
    5c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    5c56:	4d0f      	ldr	r5, [pc, #60]	; (5c94 <statics_init+0x40>)
    5c58:	4c0f      	ldr	r4, [pc, #60]	; (5c98 <statics_init+0x44>)
    5c5a:	462f      	mov	r7, r5
    5c5c:	4e0f      	ldr	r6, [pc, #60]	; (5c9c <statics_init+0x48>)
    5c5e:	42ac      	cmp	r4, r5
    5c60:	d90c      	bls.n	5c7c <statics_init+0x28>
    5c62:	490f      	ldr	r1, [pc, #60]	; (5ca0 <statics_init+0x4c>)
    5c64:	2315      	movs	r3, #21
    5c66:	4632      	mov	r2, r6
    5c68:	480e      	ldr	r0, [pc, #56]	; (5ca4 <statics_init+0x50>)
    5c6a:	f000 f842 	bl	5cf2 <printk>
    5c6e:	480e      	ldr	r0, [pc, #56]	; (5ca8 <statics_init+0x54>)
    5c70:	f000 f83f 	bl	5cf2 <printk>
    5c74:	2115      	movs	r1, #21
    5c76:	4630      	mov	r0, r6
    5c78:	f000 f909 	bl	5e8e <assert_post_action>
    5c7c:	42bc      	cmp	r4, r7
    5c7e:	d301      	bcc.n	5c84 <statics_init+0x30>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
    5c80:	2000      	movs	r0, #0
    5c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    5c84:	4620      	mov	r0, r4
    5c86:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    5c8a:	f000 ff07 	bl	6a9c <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    5c8e:	3418      	adds	r4, #24
    5c90:	e7e5      	b.n	5c5e <statics_init+0xa>
    5c92:	bf00      	nop
    5c94:	200000d8 	.word	0x200000d8
    5c98:	200000d8 	.word	0x200000d8
    5c9c:	000086e4 	.word	0x000086e4
    5ca0:	00008706 	.word	0x00008706
    5ca4:	00006f74 	.word	0x00006f74
    5ca8:	000083a5 	.word	0x000083a5

00005cac <arch_printk_char_out>:
}
    5cac:	2000      	movs	r0, #0
    5cae:	4770      	bx	lr

00005cb0 <print_err>:
{
    5cb0:	b570      	push	{r4, r5, r6, lr}
    5cb2:	460d      	mov	r5, r1
    5cb4:	4604      	mov	r4, r0
	out('E', ctx);
    5cb6:	2045      	movs	r0, #69	; 0x45
    5cb8:	47a0      	blx	r4
	out('R', ctx);
    5cba:	4629      	mov	r1, r5
    5cbc:	2052      	movs	r0, #82	; 0x52
    5cbe:	47a0      	blx	r4
	out('R', ctx);
    5cc0:	4629      	mov	r1, r5
    5cc2:	4623      	mov	r3, r4
}
    5cc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
    5cc8:	2052      	movs	r0, #82	; 0x52
    5cca:	4718      	bx	r3

00005ccc <str_out>:
{
    5ccc:	b530      	push	{r4, r5, lr}
    5cce:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    5cd0:	680c      	ldr	r4, [r1, #0]
    5cd2:	1c55      	adds	r5, r2, #1
    5cd4:	b114      	cbz	r4, 5cdc <str_out+0x10>
    5cd6:	684b      	ldr	r3, [r1, #4]
    5cd8:	4293      	cmp	r3, r2
    5cda:	dc01      	bgt.n	5ce0 <str_out+0x14>
		ctx->count++;
    5cdc:	608d      	str	r5, [r1, #8]
}
    5cde:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    5ce0:	3b01      	subs	r3, #1
    5ce2:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    5ce4:	bf08      	it	eq
    5ce6:	2200      	moveq	r2, #0
    5ce8:	608d      	str	r5, [r1, #8]
    5cea:	bf0c      	ite	eq
    5cec:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    5cee:	54a0      	strbne	r0, [r4, r2]
    5cf0:	e7f5      	b.n	5cde <str_out+0x12>

00005cf2 <printk>:
{
    5cf2:	b40f      	push	{r0, r1, r2, r3}
    5cf4:	b507      	push	{r0, r1, r2, lr}
    5cf6:	a904      	add	r1, sp, #16
    5cf8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    5cfc:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    5cfe:	f7fa fded 	bl	8dc <vprintk>
}
    5d02:	b003      	add	sp, #12
    5d04:	f85d eb04 	ldr.w	lr, [sp], #4
    5d08:	b004      	add	sp, #16
    5d0a:	4770      	bx	lr

00005d0c <snprintk>:
{
    5d0c:	b40c      	push	{r2, r3}
    5d0e:	b507      	push	{r0, r1, r2, lr}
    5d10:	ab04      	add	r3, sp, #16
    5d12:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    5d16:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    5d18:	f7fa fdee 	bl	8f8 <vsnprintk>
}
    5d1c:	b003      	add	sp, #12
    5d1e:	f85d eb04 	ldr.w	lr, [sp], #4
    5d22:	b002      	add	sp, #8
    5d24:	4770      	bx	lr

00005d26 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    5d26:	4604      	mov	r4, r0
    5d28:	b508      	push	{r3, lr}
    5d2a:	4608      	mov	r0, r1
    5d2c:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    5d2e:	461a      	mov	r2, r3
    5d30:	47a0      	blx	r4
	return z_impl_k_current_get();
    5d32:	f7ff f9f7 	bl	5124 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    5d36:	f7fc fb35 	bl	23a4 <z_impl_k_thread_abort>

00005d3a <chunk_field>:
}

static inline size_t chunk_field(struct z_heap *h, chunkid_t c,
				 enum chunk_fields f)
{
	void *cmem = &h->buf[c];
    5d3a:	6803      	ldr	r3, [r0, #0]
    5d3c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3

	if (big_heap(h)) {
    5d40:	6883      	ldr	r3, [r0, #8]
    5d42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((u32_t *)cmem)[f];
    5d46:	bf2c      	ite	cs
    5d48:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((u16_t *)cmem)[f];
    5d4c:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
    5d50:	4770      	bx	lr

00005d52 <chunk_set>:

static inline void chunk_set(struct z_heap *h, chunkid_t c,
			     enum chunk_fields f, chunkid_t val)
{
    5d52:	b510      	push	{r4, lr}
	CHECK(c >= h->chunk0 && c < h->len);
	CHECK((val & ~((h->size_mask << 1) + 1)) == 0);
	CHECK((val & h->size_mask) < h->len);

	void *cmem = &h->buf[c];
    5d54:	6804      	ldr	r4, [r0, #0]

	if (big_heap(h)) {
    5d56:	6880      	ldr	r0, [r0, #8]
	void *cmem = &h->buf[c];
    5d58:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if (big_heap(h)) {
    5d5c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((u32_t *)cmem)[f] = (u32_t) val;
    5d60:	bf2c      	ite	cs
    5d62:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		((u16_t *)cmem)[f] = (u16_t) val;
    5d66:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
    5d6a:	bd10      	pop	{r4, pc}

00005d6c <free_list_add>:
		chunk_set(h, second, FREE_PREV, first);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    5d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5d70:	4604      	mov	r4, r0
	return (chunk_field(h, c, SIZE_AND_USED) & ~h->size_mask) != 0;
}

static ALWAYS_INLINE chunkid_t size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
    5d72:	2200      	movs	r2, #0
    5d74:	460d      	mov	r5, r1
    5d76:	f7ff ffe0 	bl	5d3a <chunk_field>
    5d7a:	68e2      	ldr	r2, [r4, #12]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    5d7c:	68a3      	ldr	r3, [r4, #8]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
    5d7e:	4010      	ands	r0, r2
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    5d80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
}

static int bucket_idx(struct z_heap *h, size_t sz)
{
	/* A chunk of size 2 is the minimum size on big heaps */
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
    5d84:	fab0 f280 	clz	r2, r0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    5d88:	bf34      	ite	cc
    5d8a:	2000      	movcc	r0, #0
    5d8c:	2001      	movcs	r0, #1
	int b = bucket_idx(h, size(h, c));

	if (h->buckets[b].list_size++ == 0) {
    5d8e:	6863      	ldr	r3, [r4, #4]
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
    5d90:	f1c0 001f 	rsb	r0, r0, #31
    5d94:	1a80      	subs	r0, r0, r2
    5d96:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
    5d9a:	684a      	ldr	r2, [r1, #4]
    5d9c:	1c56      	adds	r6, r2, #1
    5d9e:	604e      	str	r6, [r1, #4]
    5da0:	b9a2      	cbnz	r2, 5dcc <free_list_add+0x60>
		CHECK(h->buckets[b].next == 0);
		CHECK((h->avail_buckets & (1 << b)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << b);
    5da2:	2201      	movs	r2, #1
    5da4:	fa02 f100 	lsl.w	r1, r2, r0
    5da8:	6962      	ldr	r2, [r4, #20]
    5daa:	430a      	orrs	r2, r1
    5dac:	6162      	str	r2, [r4, #20]
		h->buckets[b].next = c;
		chunk_set(h, c, FREE_PREV, c);
    5dae:	4629      	mov	r1, r5
		h->buckets[b].next = c;
    5db0:	f843 5030 	str.w	r5, [r3, r0, lsl #3]
		chunk_set(h, c, FREE_PREV, c);
    5db4:	2202      	movs	r2, #2
    5db6:	462b      	mov	r3, r5
    5db8:	4620      	mov	r0, r4
    5dba:	f7ff ffca 	bl	5d52 <chunk_set>
		chunk_set(h, c, FREE_NEXT, c);
    5dbe:	2203      	movs	r2, #3
    5dc0:	4629      	mov	r1, r5
		chunkid_t first = free_prev(h, second);

		chunk_set(h, c, FREE_PREV, first);
		chunk_set(h, c, FREE_NEXT, second);
		chunk_set(h, first, FREE_NEXT, c);
		chunk_set(h, second, FREE_PREV, c);
    5dc2:	4620      	mov	r0, r4
	}

	CHECK(h->avail_buckets & (1 << bucket_idx(h, size(h, c))));
}
    5dc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		chunk_set(h, second, FREE_PREV, c);
    5dc8:	f7ff bfc3 	b.w	5d52 <chunk_set>
		chunkid_t second = h->buckets[b].next;
    5dcc:	f853 7030 	ldr.w	r7, [r3, r0, lsl #3]
	return chunk_field(h, c, FREE_PREV);
    5dd0:	2202      	movs	r2, #2
    5dd2:	4639      	mov	r1, r7
    5dd4:	4620      	mov	r0, r4
    5dd6:	f7ff ffb0 	bl	5d3a <chunk_field>
    5dda:	4606      	mov	r6, r0
		chunk_set(h, c, FREE_PREV, first);
    5ddc:	4603      	mov	r3, r0
    5dde:	2202      	movs	r2, #2
    5de0:	4629      	mov	r1, r5
    5de2:	4620      	mov	r0, r4
    5de4:	f7ff ffb5 	bl	5d52 <chunk_set>
		chunk_set(h, c, FREE_NEXT, second);
    5de8:	463b      	mov	r3, r7
    5dea:	2203      	movs	r2, #3
    5dec:	4629      	mov	r1, r5
    5dee:	4620      	mov	r0, r4
    5df0:	f7ff ffaf 	bl	5d52 <chunk_set>
		chunk_set(h, first, FREE_NEXT, c);
    5df4:	2203      	movs	r2, #3
    5df6:	4631      	mov	r1, r6
    5df8:	462b      	mov	r3, r5
    5dfa:	4620      	mov	r0, r4
    5dfc:	f7ff ffa9 	bl	5d52 <chunk_set>
		chunk_set(h, second, FREE_PREV, c);
    5e00:	2202      	movs	r2, #2
    5e02:	4639      	mov	r1, r7
    5e04:	e7dd      	b.n	5dc2 <free_list_add+0x56>

00005e06 <sys_heap_init>:

	return NULL;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    5e06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	CHECK(bytes < 0x800000000ULL);
#endif

	/* Round the start up, the end down */
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
    5e08:	188b      	adds	r3, r1, r2

	heap->heap = (struct z_heap *)addr;
	h->buf = (u64_t *)addr;
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
	h->len = buf_sz;
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
    5e0a:	f647 72ff 	movw	r2, #32767	; 0x7fff
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
    5e0e:	1dcc      	adds	r4, r1, #7
    5e10:	f024 0407 	bic.w	r4, r4, #7
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
    5e14:	f023 0307 	bic.w	r3, r3, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    5e18:	1b1b      	subs	r3, r3, r4
    5e1a:	08db      	lsrs	r3, r3, #3
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
    5e1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    5e20:	bf2c      	ite	cs
    5e22:	f06f 4100 	mvncs.w	r1, #2147483648	; 0x80000000
    5e26:	4611      	movcc	r1, r2
	heap->heap = (struct z_heap *)addr;
    5e28:	6004      	str	r4, [r0, #0]
	h->avail_buckets = 0;
    5e2a:	2000      	movs	r0, #0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    5e2c:	4293      	cmp	r3, r2
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
    5e2e:	60e1      	str	r1, [r4, #12]
    5e30:	bf94      	ite	ls
    5e32:	2100      	movls	r1, #0
    5e34:	2101      	movhi	r1, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
    5e36:	fab3 f683 	clz	r6, r3
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    5e3a:	4617      	mov	r7, r2
				* sizeof(struct z_heap_bucket));

	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);

	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
		heap->heap->buckets[i].list_size = 0;
    5e3c:	4684      	mov	ip, r0
	size_t buckets_bytes = ((bucket_idx(h, buf_sz) + 1)
    5e3e:	f1c1 0120 	rsb	r1, r1, #32
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
    5e42:	f104 0518 	add.w	r5, r4, #24
	size_t buckets_bytes = ((bucket_idx(h, buf_sz) + 1)
    5e46:	1b89      	subs	r1, r1, r6
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
    5e48:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
	h->len = buf_sz;
    5e4c:	e9c4 5301 	strd	r5, r3, [r4, #4]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
    5e50:	3103      	adds	r1, #3
	h->buf = (u64_t *)addr;
    5e52:	6024      	str	r4, [r4, #0]
	h->avail_buckets = 0;
    5e54:	6160      	str	r0, [r4, #20]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
    5e56:	6121      	str	r1, [r4, #16]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    5e58:	68a2      	ldr	r2, [r4, #8]
    5e5a:	42ba      	cmp	r2, r7
    5e5c:	bf94      	ite	ls
    5e5e:	2200      	movls	r2, #0
    5e60:	2201      	movhi	r2, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
    5e62:	f1c2 021f 	rsb	r2, r2, #31
    5e66:	1b92      	subs	r2, r2, r6
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
    5e68:	4290      	cmp	r0, r2
    5e6a:	dd0a      	ble.n	5e82 <sys_heap_init+0x7c>
		heap->heap->buckets[i].next = 0;
	}

	chunk_set(h, h->chunk0, SIZE_AND_USED, buf_sz - h->chunk0);
    5e6c:	4620      	mov	r0, r4
    5e6e:	1a5b      	subs	r3, r3, r1
    5e70:	2200      	movs	r2, #0
    5e72:	f7ff ff6e 	bl	5d52 <chunk_set>
	free_list_add(h, h->chunk0);
    5e76:	4620      	mov	r0, r4
    5e78:	6921      	ldr	r1, [r4, #16]
}
    5e7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, h->chunk0);
    5e7e:	f7ff bf75 	b.w	5d6c <free_list_add>
		heap->heap->buckets[i].list_size = 0;
    5e82:	f8c5 c004 	str.w	ip, [r5, #4]
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
    5e86:	3001      	adds	r0, #1
		heap->heap->buckets[i].next = 0;
    5e88:	f845 cb08 	str.w	ip, [r5], #8
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
    5e8c:	e7e4      	b.n	5e58 <sys_heap_init+0x52>

00005e8e <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    5e8e:	4040      	eors	r0, r0
    5e90:	f380 8811 	msr	BASEPRI, r0
    5e94:	f04f 0004 	mov.w	r0, #4
    5e98:	df02      	svc	2
}
    5e9a:	4770      	bx	lr

00005e9c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    5e9c:	4770      	bx	lr

00005e9e <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
    5e9e:	f7fd bae9 	b.w	3474 <SystemInit>

00005ea2 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
    5ea2:	2300      	movs	r3, #0
	list->head = NULL;
    5ea4:	e9c0 3300 	strd	r3, r3, [r0]
}
    5ea8:	4770      	bx	lr

00005eaa <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
    5eaa:	6803      	ldr	r3, [r0, #0]
    5eac:	b923      	cbnz	r3, 5eb8 <log_list_add_tail+0xe>
		list->head = msg;
    5eae:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
    5eb0:	2300      	movs	r3, #0
	list->tail = msg;
    5eb2:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
    5eb4:	600b      	str	r3, [r1, #0]
}
    5eb6:	4770      	bx	lr
		list->tail->next = msg;
    5eb8:	6843      	ldr	r3, [r0, #4]
    5eba:	6019      	str	r1, [r3, #0]
    5ebc:	e7f8      	b.n	5eb0 <log_list_add_tail+0x6>

00005ebe <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
    5ebe:	6800      	ldr	r0, [r0, #0]
    5ec0:	4770      	bx	lr

00005ec2 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
    5ec2:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
    5ec4:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
    5ec6:	b108      	cbz	r0, 5ecc <log_list_head_get+0xa>
		list->head = list->head->next;
    5ec8:	6802      	ldr	r2, [r0, #0]
    5eca:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
    5ecc:	4770      	bx	lr

00005ece <log_backend_is_active>:
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    5ece:	6843      	ldr	r3, [r0, #4]
}
    5ed0:	7958      	ldrb	r0, [r3, #5]
    5ed2:	4770      	bx	lr

00005ed4 <z_log_msg_std_alloc>:
{
    5ed4:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    5ed6:	f7fb f877 	bl	fc8 <log_msg_chunk_alloc>
	if (msg != NULL) {
    5eda:	b118      	cbz	r0, 5ee4 <z_log_msg_std_alloc+0x10>
		msg->hdr.ref_cnt = 1;
    5edc:	2301      	movs	r3, #1
    5ede:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    5ee0:	2300      	movs	r3, #0
    5ee2:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
    5ee4:	bd08      	pop	{r3, pc}

00005ee6 <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
    5ee6:	f7fb be23 	b.w	1b30 <z_timer_cycle_get_32>

00005eea <dummy_timestamp>:
    5eea:	2000      	movs	r0, #0
    5eec:	4770      	bx	lr

00005eee <log_0>:
{
    5eee:	b538      	push	{r3, r4, r5, lr}
    5ef0:	4605      	mov	r5, r0
    5ef2:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
    5ef4:	f7ff ffee 	bl	5ed4 <z_log_msg_std_alloc>

	if (msg != NULL) {
    5ef8:	b128      	cbz	r0, 5f06 <log_0+0x18>
		msg_finalize(msg, src_level);
    5efa:	4621      	mov	r1, r4
		msg->str = str;
    5efc:	6105      	str	r5, [r0, #16]
}
    5efe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
    5f02:	f7fa bf67 	b.w	dd4 <msg_finalize>
}
    5f06:	bd38      	pop	{r3, r4, r5, pc}

00005f08 <log_1>:
{
    5f08:	b570      	push	{r4, r5, r6, lr}
    5f0a:	4606      	mov	r6, r0
    5f0c:	460d      	mov	r5, r1
    5f0e:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    5f10:	f7ff ffe0 	bl	5ed4 <z_log_msg_std_alloc>

	if (msg != NULL) {
    5f14:	b158      	cbz	r0, 5f2e <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
    5f16:	2101      	movs	r1, #1
    5f18:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
    5f1a:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
    5f1c:	f361 1207 	bfi	r2, r1, #4, #4
    5f20:	7242      	strb	r2, [r0, #9]
		msg_finalize(msg, src_level);
    5f22:	4621      	mov	r1, r4
		msg->payload.single.args[0] = arg1;
    5f24:	6145      	str	r5, [r0, #20]
}
    5f26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
    5f2a:	f7fa bf53 	b.w	dd4 <msg_finalize>
}
    5f2e:	bd70      	pop	{r4, r5, r6, pc}

00005f30 <log_2>:
{
    5f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f34:	4680      	mov	r8, r0
    5f36:	460f      	mov	r7, r1
    5f38:	4616      	mov	r6, r2
    5f3a:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    5f3c:	f7ff ffca 	bl	5ed4 <z_log_msg_std_alloc>

	if (msg != NULL) {
    5f40:	b168      	cbz	r0, 5f5e <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
    5f42:	2202      	movs	r2, #2
    5f44:	7a43      	ldrb	r3, [r0, #9]
		msg_finalize(msg, src_level);
    5f46:	4629      	mov	r1, r5
    5f48:	f362 1307 	bfi	r3, r2, #4, #4
    5f4c:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
    5f4e:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->str = str;
    5f52:	f8c0 8010 	str.w	r8, [r0, #16]
}
    5f56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
    5f5a:	f7fa bf3b 	b.w	dd4 <msg_finalize>
}
    5f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005f62 <log_3>:
{
    5f62:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5f66:	4680      	mov	r8, r0
    5f68:	460f      	mov	r7, r1
    5f6a:	4616      	mov	r6, r2
    5f6c:	461d      	mov	r5, r3
    5f6e:	f8bd 9020 	ldrh.w	r9, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    5f72:	f7ff ffaf 	bl	5ed4 <z_log_msg_std_alloc>

	if (msg != NULL) {
    5f76:	b170      	cbz	r0, 5f96 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
    5f78:	2203      	movs	r2, #3
    5f7a:	7a43      	ldrb	r3, [r0, #9]
		msg_finalize(msg, src_level);
    5f7c:	4649      	mov	r1, r9
    5f7e:	f362 1307 	bfi	r3, r2, #4, #4
    5f82:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
    5f84:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->str = str;
    5f88:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->payload.single.args[2] = arg3;
    5f8c:	61c5      	str	r5, [r0, #28]
}
    5f8e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
    5f92:	f7fa bf1f 	b.w	dd4 <msg_finalize>
}
    5f96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00005f9a <log_n>:
{
    5f9a:	b510      	push	{r4, lr}
    5f9c:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
    5f9e:	f7fb f865 	bl	106c <log_msg_create_n>
		if (msg == NULL) {
    5fa2:	b120      	cbz	r0, 5fae <log_n+0x14>
		msg_finalize(msg, src_level);
    5fa4:	4621      	mov	r1, r4
}
    5fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
    5faa:	f7fa bf13 	b.w	dd4 <msg_finalize>
}
    5fae:	bd10      	pop	{r4, pc}

00005fb0 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    u8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
    5fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5fb4:	461c      	mov	r4, r3
	u32_t available_len = msg->hdr.params.hexdump.length;
    5fb6:	8903      	ldrh	r3, [r0, #8]
{
    5fb8:	460e      	mov	r6, r1
    5fba:	4611      	mov	r1, r2
	u32_t available_len = msg->hdr.params.hexdump.length;
    5fbc:	f3c3 028d 	ubfx	r2, r3, #2, #14
	u8_t *head_data;
	u32_t chunk_len;
	u32_t req_len;
	u32_t cpy_len;

	if (offset >= available_len) {
    5fc0:	42a2      	cmp	r2, r4
{
    5fc2:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
    5fc6:	d803      	bhi.n	5fd0 <log_msg_hexdump_data_op+0x20>
		*length = 0;
    5fc8:	2300      	movs	r3, #0
    5fca:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
    5fcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
    5fd0:	680b      	ldr	r3, [r1, #0]
    5fd2:	4423      	add	r3, r4
    5fd4:	4293      	cmp	r3, r2
		*length = available_len - offset;
    5fd6:	bf84      	itt	hi
    5fd8:	1b13      	subhi	r3, r2, r4
    5fda:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    5fdc:	2a0c      	cmp	r2, #12
	req_len = *length;
    5fde:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    5fe2:	d927      	bls.n	6034 <log_msg_hexdump_data_op+0x84>
	if (offset < chunk_len) {
    5fe4:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
    5fe6:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
    5fea:	d82a      	bhi.n	6042 <log_msg_hexdump_data_op+0x92>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
    5fec:	2208      	movs	r2, #8
		head_data = msg->payload.ext.data.bytes;
    5fee:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    5ff0:	454a      	cmp	r2, r9
    5ff2:	bf28      	it	cs
    5ff4:	464a      	movcs	r2, r9
    5ff6:	4420      	add	r0, r4
    5ff8:	4615      	mov	r5, r2
		if (put_op) {
    5ffa:	b1ff      	cbz	r7, 603c <log_msg_hexdump_data_op+0x8c>
			(void)memcpy(&head_data[offset], data, cpy_len);
    5ffc:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
    5ffe:	f000 fa6a 	bl	64d6 <memcpy>
		req_len -= cpy_len;
    6002:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
    6006:	442e      	add	r6, r5
	while (req_len > 0) {
    6008:	f1b9 0f00 	cmp.w	r9, #0
    600c:	d0de      	beq.n	5fcc <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
    600e:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    6012:	454d      	cmp	r5, r9
    6014:	bf28      	it	cs
    6016:	464d      	movcs	r5, r9
		if (put_op) {
    6018:	1d20      	adds	r0, r4, #4
			(void)memcpy(&cont->payload.bytes[offset],
    601a:	462a      	mov	r2, r5
    601c:	4440      	add	r0, r8
		if (put_op) {
    601e:	b1bf      	cbz	r7, 6050 <log_msg_hexdump_data_op+0xa0>
			(void)memcpy(&cont->payload.bytes[offset],
    6020:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
    6022:	f000 fa58 	bl	64d6 <memcpy>
		offset = 0;
    6026:	2400      	movs	r4, #0
		cont = cont->next;
    6028:	f8d8 8000 	ldr.w	r8, [r8]
		req_len -= cpy_len;
    602c:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
    6030:	442e      	add	r6, r5
    6032:	e7e9      	b.n	6008 <log_msg_hexdump_data_op+0x58>
	struct log_msg_cont *cont = NULL;
    6034:	f04f 0800 	mov.w	r8, #0
		head_data = msg->payload.single.bytes;
    6038:	3014      	adds	r0, #20
	if (offset < chunk_len) {
    603a:	e7d9      	b.n	5ff0 <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
    603c:	4601      	mov	r1, r0
    603e:	4630      	mov	r0, r6
    6040:	e7dd      	b.n	5ffe <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
    6042:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
    6044:	2c1b      	cmp	r4, #27
    6046:	d9df      	bls.n	6008 <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
    6048:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
    604c:	3c1c      	subs	r4, #28
    604e:	e7f9      	b.n	6044 <log_msg_hexdump_data_op+0x94>
			(void)memcpy(data, &cont->payload.bytes[offset],
    6050:	4601      	mov	r1, r0
    6052:	4630      	mov	r0, r6
    6054:	e7e5      	b.n	6022 <log_msg_hexdump_data_op+0x72>

00006056 <log_msg_get>:
    6056:	3004      	adds	r0, #4
    6058:	e8d0 3fef 	ldaex	r3, [r0]
    605c:	3301      	adds	r3, #1
    605e:	e8c0 3fe2 	stlex	r2, r3, [r0]
    6062:	2a00      	cmp	r2, #0
    6064:	d1f8      	bne.n	6058 <log_msg_get+0x2>
}
    6066:	4770      	bx	lr

00006068 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
    6068:	7a40      	ldrb	r0, [r0, #9]
}
    606a:	0900      	lsrs	r0, r0, #4
    606c:	4770      	bx	lr

0000606e <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
    606e:	7a43      	ldrb	r3, [r0, #9]
    6070:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
    6074:	ea4f 1213 	mov.w	r2, r3, lsr #4
    6078:	d216      	bcs.n	60a8 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
    607a:	2a03      	cmp	r2, #3
    607c:	d803      	bhi.n	6086 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
    607e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    6082:	6948      	ldr	r0, [r1, #20]
    6084:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
    6086:	2901      	cmp	r1, #1
    6088:	d803      	bhi.n	6092 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
    608a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    608e:	6988      	ldr	r0, [r1, #24]
    6090:	4770      	bx	lr
	cont = msg->payload.ext.next;
    6092:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
    6094:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
    6096:	2906      	cmp	r1, #6
    6098:	d803      	bhi.n	60a2 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
    609a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    609e:	6848      	ldr	r0, [r1, #4]
    60a0:	4770      	bx	lr
		cont = cont->next;
    60a2:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
    60a4:	3907      	subs	r1, #7
		cont = cont->next;
    60a6:	e7f6      	b.n	6096 <log_msg_arg_get+0x28>
		return 0;
    60a8:	2000      	movs	r0, #0
}
    60aa:	4770      	bx	lr

000060ac <log_msg_put>:
{
    60ac:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    60ae:	1d02      	adds	r2, r0, #4
    60b0:	e8d2 1fef 	ldaex	r1, [r2]
    60b4:	3901      	subs	r1, #1
    60b6:	e8c2 1fec 	stlex	ip, r1, [r2]
    60ba:	f1bc 0f00 	cmp.w	ip, #0
    60be:	d1f7      	bne.n	60b0 <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
    60c0:	685b      	ldr	r3, [r3, #4]
    60c2:	b90b      	cbnz	r3, 60c8 <log_msg_put+0x1c>
		msg_free(msg);
    60c4:	f7fa bf94 	b.w	ff0 <msg_free>
}
    60c8:	4770      	bx	lr

000060ca <log_msg_str_get>:
}
    60ca:	6900      	ldr	r0, [r0, #16]
    60cc:	4770      	bx	lr

000060ce <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      u8_t *data,
			      size_t *length,
			      size_t offset)
{
    60ce:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
    60d0:	2400      	movs	r4, #0
    60d2:	9400      	str	r4, [sp, #0]
    60d4:	f7ff ff6c 	bl	5fb0 <log_msg_hexdump_data_op>
}
    60d8:	b002      	add	sp, #8
    60da:	bd10      	pop	{r4, pc}

000060dc <buffer_write>:
{
    60dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    60de:	4606      	mov	r6, r0
    60e0:	460d      	mov	r5, r1
    60e2:	4614      	mov	r4, r2
    60e4:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    60e6:	4621      	mov	r1, r4
    60e8:	4628      	mov	r0, r5
    60ea:	463a      	mov	r2, r7
    60ec:	47b0      	blx	r6
	} while (len != 0);
    60ee:	1a24      	subs	r4, r4, r0
		buf += processed;
    60f0:	4405      	add	r5, r0
	} while (len != 0);
    60f2:	d1f8      	bne.n	60e6 <buffer_write+0xa>
}
    60f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000060f6 <std_print>:
{
    60f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    60fa:	b08e      	sub	sp, #56	; 0x38
    60fc:	af0e      	add	r7, sp, #56	; 0x38
    60fe:	4680      	mov	r8, r0
    6100:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
    6102:	f7ff ffe2 	bl	60ca <log_msg_str_get>
    6106:	4606      	mov	r6, r0
	u32_t nargs = log_msg_nargs_get(msg);
    6108:	4640      	mov	r0, r8
    610a:	f7ff ffad 	bl	6068 <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
    610e:	f04f 0900 	mov.w	r9, #0
	u32_t nargs = log_msg_nargs_get(msg);
    6112:	4682      	mov	sl, r0
	u32_t *args = alloca(sizeof(u32_t)*nargs);
    6114:	0083      	lsls	r3, r0, #2
    6116:	3307      	adds	r3, #7
    6118:	f023 0307 	bic.w	r3, r3, #7
    611c:	ebad 0d03 	sub.w	sp, sp, r3
    6120:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
    6122:	45d1      	cmp	r9, sl
    6124:	d116      	bne.n	6154 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
    6126:	4640      	mov	r0, r8
    6128:	f7ff ff9e 	bl	6068 <log_msg_nargs_get>
    612c:	280f      	cmp	r0, #15
    612e:	d81e      	bhi.n	616e <std_print+0x78>
    6130:	e8df f010 	tbh	[pc, r0, lsl #1]
    6134:	00200019 	.word	0x00200019
    6138:	002d0026 	.word	0x002d0026
    613c:	00410036 	.word	0x00410036
    6140:	005d004e 	.word	0x005d004e
    6144:	0081006e 	.word	0x0081006e
    6148:	00ad0096 	.word	0x00ad0096
    614c:	00e100c6 	.word	0x00e100c6
    6150:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
    6154:	4649      	mov	r1, r9
    6156:	4640      	mov	r0, r8
    6158:	f7ff ff89 	bl	606e <log_msg_arg_get>
    615c:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
    6160:	f109 0901 	add.w	r9, r9, #1
    6164:	e7dd      	b.n	6122 <std_print+0x2c>
		print_formatted(log_output, str);
    6166:	4631      	mov	r1, r6
    6168:	4628      	mov	r0, r5
    616a:	f7fa ffe7 	bl	113c <print_formatted>
}
    616e:	46bd      	mov	sp, r7
    6170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
    6174:	4631      	mov	r1, r6
    6176:	4628      	mov	r0, r5
    6178:	6822      	ldr	r2, [r4, #0]
    617a:	f7fa ffdf 	bl	113c <print_formatted>
		break;
    617e:	e7f6      	b.n	616e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
    6180:	4631      	mov	r1, r6
    6182:	e9d4 2300 	ldrd	r2, r3, [r4]
    6186:	4628      	mov	r0, r5
    6188:	f7fa ffd8 	bl	113c <print_formatted>
		break;
    618c:	e7ef      	b.n	616e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
    618e:	68a3      	ldr	r3, [r4, #8]
    6190:	4631      	mov	r1, r6
    6192:	9300      	str	r3, [sp, #0]
    6194:	4628      	mov	r0, r5
    6196:	e9d4 2300 	ldrd	r2, r3, [r4]
    619a:	f7fa ffcf 	bl	113c <print_formatted>
		break;
    619e:	e7e6      	b.n	616e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    61a0:	68e3      	ldr	r3, [r4, #12]
    61a2:	4631      	mov	r1, r6
    61a4:	9301      	str	r3, [sp, #4]
    61a6:	68a3      	ldr	r3, [r4, #8]
    61a8:	4628      	mov	r0, r5
    61aa:	9300      	str	r3, [sp, #0]
    61ac:	e9d4 2300 	ldrd	r2, r3, [r4]
    61b0:	f7fa ffc4 	bl	113c <print_formatted>
		break;
    61b4:	e7db      	b.n	616e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    61b6:	6923      	ldr	r3, [r4, #16]
    61b8:	4631      	mov	r1, r6
    61ba:	9302      	str	r3, [sp, #8]
    61bc:	68e3      	ldr	r3, [r4, #12]
    61be:	4628      	mov	r0, r5
    61c0:	9301      	str	r3, [sp, #4]
    61c2:	68a3      	ldr	r3, [r4, #8]
    61c4:	9300      	str	r3, [sp, #0]
    61c6:	e9d4 2300 	ldrd	r2, r3, [r4]
    61ca:	f7fa ffb7 	bl	113c <print_formatted>
		break;
    61ce:	e7ce      	b.n	616e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    61d0:	6963      	ldr	r3, [r4, #20]
    61d2:	4631      	mov	r1, r6
    61d4:	9303      	str	r3, [sp, #12]
    61d6:	6923      	ldr	r3, [r4, #16]
    61d8:	4628      	mov	r0, r5
    61da:	9302      	str	r3, [sp, #8]
    61dc:	68e3      	ldr	r3, [r4, #12]
    61de:	9301      	str	r3, [sp, #4]
    61e0:	68a3      	ldr	r3, [r4, #8]
    61e2:	9300      	str	r3, [sp, #0]
    61e4:	e9d4 2300 	ldrd	r2, r3, [r4]
    61e8:	f7fa ffa8 	bl	113c <print_formatted>
		break;
    61ec:	e7bf      	b.n	616e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    61ee:	69a3      	ldr	r3, [r4, #24]
    61f0:	4631      	mov	r1, r6
    61f2:	9304      	str	r3, [sp, #16]
    61f4:	6963      	ldr	r3, [r4, #20]
    61f6:	4628      	mov	r0, r5
    61f8:	9303      	str	r3, [sp, #12]
    61fa:	6923      	ldr	r3, [r4, #16]
    61fc:	9302      	str	r3, [sp, #8]
    61fe:	68e3      	ldr	r3, [r4, #12]
    6200:	9301      	str	r3, [sp, #4]
    6202:	68a3      	ldr	r3, [r4, #8]
    6204:	9300      	str	r3, [sp, #0]
    6206:	e9d4 2300 	ldrd	r2, r3, [r4]
    620a:	f7fa ff97 	bl	113c <print_formatted>
		break;
    620e:	e7ae      	b.n	616e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    6210:	69e3      	ldr	r3, [r4, #28]
    6212:	4631      	mov	r1, r6
    6214:	9305      	str	r3, [sp, #20]
    6216:	69a3      	ldr	r3, [r4, #24]
    6218:	4628      	mov	r0, r5
    621a:	9304      	str	r3, [sp, #16]
    621c:	6963      	ldr	r3, [r4, #20]
    621e:	9303      	str	r3, [sp, #12]
    6220:	6923      	ldr	r3, [r4, #16]
    6222:	9302      	str	r3, [sp, #8]
    6224:	68e3      	ldr	r3, [r4, #12]
    6226:	9301      	str	r3, [sp, #4]
    6228:	68a3      	ldr	r3, [r4, #8]
    622a:	9300      	str	r3, [sp, #0]
    622c:	e9d4 2300 	ldrd	r2, r3, [r4]
    6230:	f7fa ff84 	bl	113c <print_formatted>
		break;
    6234:	e79b      	b.n	616e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    6236:	6a23      	ldr	r3, [r4, #32]
    6238:	4631      	mov	r1, r6
    623a:	9306      	str	r3, [sp, #24]
    623c:	69e3      	ldr	r3, [r4, #28]
    623e:	4628      	mov	r0, r5
    6240:	9305      	str	r3, [sp, #20]
    6242:	69a3      	ldr	r3, [r4, #24]
    6244:	9304      	str	r3, [sp, #16]
    6246:	6963      	ldr	r3, [r4, #20]
    6248:	9303      	str	r3, [sp, #12]
    624a:	6923      	ldr	r3, [r4, #16]
    624c:	9302      	str	r3, [sp, #8]
    624e:	68e3      	ldr	r3, [r4, #12]
    6250:	9301      	str	r3, [sp, #4]
    6252:	68a3      	ldr	r3, [r4, #8]
    6254:	9300      	str	r3, [sp, #0]
    6256:	e9d4 2300 	ldrd	r2, r3, [r4]
    625a:	f7fa ff6f 	bl	113c <print_formatted>
		break;
    625e:	e786      	b.n	616e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    6260:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6262:	4631      	mov	r1, r6
    6264:	9307      	str	r3, [sp, #28]
    6266:	6a23      	ldr	r3, [r4, #32]
    6268:	4628      	mov	r0, r5
    626a:	9306      	str	r3, [sp, #24]
    626c:	69e3      	ldr	r3, [r4, #28]
    626e:	9305      	str	r3, [sp, #20]
    6270:	69a3      	ldr	r3, [r4, #24]
    6272:	9304      	str	r3, [sp, #16]
    6274:	6963      	ldr	r3, [r4, #20]
    6276:	9303      	str	r3, [sp, #12]
    6278:	6923      	ldr	r3, [r4, #16]
    627a:	9302      	str	r3, [sp, #8]
    627c:	68e3      	ldr	r3, [r4, #12]
    627e:	9301      	str	r3, [sp, #4]
    6280:	68a3      	ldr	r3, [r4, #8]
    6282:	9300      	str	r3, [sp, #0]
    6284:	e9d4 2300 	ldrd	r2, r3, [r4]
    6288:	f7fa ff58 	bl	113c <print_formatted>
		break;
    628c:	e76f      	b.n	616e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    628e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6290:	4631      	mov	r1, r6
    6292:	9308      	str	r3, [sp, #32]
    6294:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6296:	4628      	mov	r0, r5
    6298:	9307      	str	r3, [sp, #28]
    629a:	6a23      	ldr	r3, [r4, #32]
    629c:	9306      	str	r3, [sp, #24]
    629e:	69e3      	ldr	r3, [r4, #28]
    62a0:	9305      	str	r3, [sp, #20]
    62a2:	69a3      	ldr	r3, [r4, #24]
    62a4:	9304      	str	r3, [sp, #16]
    62a6:	6963      	ldr	r3, [r4, #20]
    62a8:	9303      	str	r3, [sp, #12]
    62aa:	6923      	ldr	r3, [r4, #16]
    62ac:	9302      	str	r3, [sp, #8]
    62ae:	68e3      	ldr	r3, [r4, #12]
    62b0:	9301      	str	r3, [sp, #4]
    62b2:	68a3      	ldr	r3, [r4, #8]
    62b4:	9300      	str	r3, [sp, #0]
    62b6:	e9d4 2300 	ldrd	r2, r3, [r4]
    62ba:	f7fa ff3f 	bl	113c <print_formatted>
		break;
    62be:	e756      	b.n	616e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    62c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    62c2:	4631      	mov	r1, r6
    62c4:	9309      	str	r3, [sp, #36]	; 0x24
    62c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    62c8:	4628      	mov	r0, r5
    62ca:	9308      	str	r3, [sp, #32]
    62cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    62ce:	9307      	str	r3, [sp, #28]
    62d0:	6a23      	ldr	r3, [r4, #32]
    62d2:	9306      	str	r3, [sp, #24]
    62d4:	69e3      	ldr	r3, [r4, #28]
    62d6:	9305      	str	r3, [sp, #20]
    62d8:	69a3      	ldr	r3, [r4, #24]
    62da:	9304      	str	r3, [sp, #16]
    62dc:	6963      	ldr	r3, [r4, #20]
    62de:	9303      	str	r3, [sp, #12]
    62e0:	6923      	ldr	r3, [r4, #16]
    62e2:	9302      	str	r3, [sp, #8]
    62e4:	68e3      	ldr	r3, [r4, #12]
    62e6:	9301      	str	r3, [sp, #4]
    62e8:	68a3      	ldr	r3, [r4, #8]
    62ea:	9300      	str	r3, [sp, #0]
    62ec:	e9d4 2300 	ldrd	r2, r3, [r4]
    62f0:	f7fa ff24 	bl	113c <print_formatted>
		break;
    62f4:	e73b      	b.n	616e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    62f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    62f8:	4631      	mov	r1, r6
    62fa:	930a      	str	r3, [sp, #40]	; 0x28
    62fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    62fe:	4628      	mov	r0, r5
    6300:	9309      	str	r3, [sp, #36]	; 0x24
    6302:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6304:	9308      	str	r3, [sp, #32]
    6306:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6308:	9307      	str	r3, [sp, #28]
    630a:	6a23      	ldr	r3, [r4, #32]
    630c:	9306      	str	r3, [sp, #24]
    630e:	69e3      	ldr	r3, [r4, #28]
    6310:	9305      	str	r3, [sp, #20]
    6312:	69a3      	ldr	r3, [r4, #24]
    6314:	9304      	str	r3, [sp, #16]
    6316:	6963      	ldr	r3, [r4, #20]
    6318:	9303      	str	r3, [sp, #12]
    631a:	6923      	ldr	r3, [r4, #16]
    631c:	9302      	str	r3, [sp, #8]
    631e:	68e3      	ldr	r3, [r4, #12]
    6320:	9301      	str	r3, [sp, #4]
    6322:	68a3      	ldr	r3, [r4, #8]
    6324:	9300      	str	r3, [sp, #0]
    6326:	e9d4 2300 	ldrd	r2, r3, [r4]
    632a:	f7fa ff07 	bl	113c <print_formatted>
		break;
    632e:	e71e      	b.n	616e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    6330:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6332:	4631      	mov	r1, r6
    6334:	930b      	str	r3, [sp, #44]	; 0x2c
    6336:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6338:	4628      	mov	r0, r5
    633a:	930a      	str	r3, [sp, #40]	; 0x28
    633c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    633e:	9309      	str	r3, [sp, #36]	; 0x24
    6340:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6342:	9308      	str	r3, [sp, #32]
    6344:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6346:	9307      	str	r3, [sp, #28]
    6348:	6a23      	ldr	r3, [r4, #32]
    634a:	9306      	str	r3, [sp, #24]
    634c:	69e3      	ldr	r3, [r4, #28]
    634e:	9305      	str	r3, [sp, #20]
    6350:	69a3      	ldr	r3, [r4, #24]
    6352:	9304      	str	r3, [sp, #16]
    6354:	6963      	ldr	r3, [r4, #20]
    6356:	9303      	str	r3, [sp, #12]
    6358:	6923      	ldr	r3, [r4, #16]
    635a:	9302      	str	r3, [sp, #8]
    635c:	68e3      	ldr	r3, [r4, #12]
    635e:	9301      	str	r3, [sp, #4]
    6360:	68a3      	ldr	r3, [r4, #8]
    6362:	9300      	str	r3, [sp, #0]
    6364:	e9d4 2300 	ldrd	r2, r3, [r4]
    6368:	f7fa fee8 	bl	113c <print_formatted>
		break;
    636c:	e6ff      	b.n	616e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    636e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6370:	4631      	mov	r1, r6
    6372:	930c      	str	r3, [sp, #48]	; 0x30
    6374:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6376:	4628      	mov	r0, r5
    6378:	930b      	str	r3, [sp, #44]	; 0x2c
    637a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    637c:	930a      	str	r3, [sp, #40]	; 0x28
    637e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6380:	9309      	str	r3, [sp, #36]	; 0x24
    6382:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6384:	9308      	str	r3, [sp, #32]
    6386:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6388:	9307      	str	r3, [sp, #28]
    638a:	6a23      	ldr	r3, [r4, #32]
    638c:	9306      	str	r3, [sp, #24]
    638e:	69e3      	ldr	r3, [r4, #28]
    6390:	9305      	str	r3, [sp, #20]
    6392:	69a3      	ldr	r3, [r4, #24]
    6394:	9304      	str	r3, [sp, #16]
    6396:	6963      	ldr	r3, [r4, #20]
    6398:	9303      	str	r3, [sp, #12]
    639a:	6923      	ldr	r3, [r4, #16]
    639c:	9302      	str	r3, [sp, #8]
    639e:	68e3      	ldr	r3, [r4, #12]
    63a0:	9301      	str	r3, [sp, #4]
    63a2:	68a3      	ldr	r3, [r4, #8]
    63a4:	9300      	str	r3, [sp, #0]
    63a6:	e9d4 2300 	ldrd	r2, r3, [r4]
    63aa:	f7fa fec7 	bl	113c <print_formatted>
}
    63ae:	e6de      	b.n	616e <std_print+0x78>

000063b0 <log_output_flush>:
		     log_output->control_block->offset,
    63b0:	6842      	ldr	r2, [r0, #4]
{
    63b2:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
    63b4:	e9d2 2300 	ldrd	r2, r3, [r2]
{
    63b8:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
    63ba:	6881      	ldr	r1, [r0, #8]
    63bc:	6800      	ldr	r0, [r0, #0]
    63be:	f7ff fe8d 	bl	60dc <buffer_write>
	log_output->control_block->offset = 0;
    63c2:	2200      	movs	r2, #0
    63c4:	6863      	ldr	r3, [r4, #4]
    63c6:	601a      	str	r2, [r3, #0]
}
    63c8:	bd10      	pop	{r4, pc}

000063ca <char_out>:
{
    63ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    63cc:	460d      	mov	r5, r1
    63ce:	4616      	mov	r6, r2
	for (size_t i = 0; i < length; i++) {
    63d0:	4604      	mov	r4, r0
    63d2:	1847      	adds	r7, r0, r1
    63d4:	42bc      	cmp	r4, r7
    63d6:	d101      	bne.n	63dc <char_out+0x12>
}
    63d8:	4628      	mov	r0, r5
    63da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(dev, data[i]);
    63dc:	f814 1b01 	ldrb.w	r1, [r4], #1
    63e0:	68b3      	ldr	r3, [r6, #8]
    63e2:	4630      	mov	r0, r6
    63e4:	685b      	ldr	r3, [r3, #4]
    63e6:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
    63e8:	e7f4      	b.n	63d4 <char_out+0xa>

000063ea <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
    63ea:	2200      	movs	r2, #0
    63ec:	f7fb b95a 	b.w	16a4 <clock_async_start>

000063f0 <clk_init>:
{
    63f0:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    63f2:	2200      	movs	r2, #0
{
    63f4:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    63f6:	2101      	movs	r1, #1
    63f8:	2005      	movs	r0, #5
    63fa:	f7fb fc15 	bl	1c28 <z_arm_irq_priority_set>
	irq_enable(DT_INST_IRQN(0));
    63fe:	2005      	movs	r0, #5
    6400:	f7fb fc02 	bl	1c08 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    6404:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6408:	2202      	movs	r2, #2
    640a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
    640e:	2203      	movs	r2, #3
	list->head = NULL;
    6410:	2000      	movs	r0, #0
    6412:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		sys_slist_init(&(get_sub_data(dev, i)->list));
    6416:	68e3      	ldr	r3, [r4, #12]
	list->tail = NULL;
    6418:	e9c3 0000 	strd	r0, r0, [r3]
    641c:	68e3      	ldr	r3, [r4, #12]
    641e:	e9c3 0003 	strd	r0, r0, [r3, #12]
}
    6422:	bd10      	pop	{r4, pc}

00006424 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    6424:	4770      	bx	lr

00006426 <z_irq_spurious>:
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    6426:	2100      	movs	r1, #0
    6428:	2001      	movs	r0, #1
    642a:	f7fb bc65 	b.w	1cf8 <z_arm_fatal_error>

0000642e <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    642e:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
    6430:	6800      	ldr	r0, [r0, #0]
    6432:	f7fb bc61 	b.w	1cf8 <z_arm_fatal_error>

00006436 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    6436:	b508      	push	{r3, lr}
	handler();
    6438:	f7fb fd00 	bl	1e3c <z_SysNmiOnReset>
	z_arm_int_exit();
}
    643c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    6440:	f7fb bd42 	b.w	1ec8 <z_arm_exc_exit>

00006444 <mpu_configure_region>:
{
    6444:	b530      	push	{r4, r5, lr}
	p_attr->rbar = attr->rbar &
    6446:	890a      	ldrh	r2, [r1, #8]
    6448:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
    644a:	680b      	ldr	r3, [r1, #0]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    644c:	684c      	ldr	r4, [r1, #4]
    644e:	f002 021f 	and.w	r2, r2, #31
{
    6452:	b085      	sub	sp, #20
    6454:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	region_conf.base = new_region->start;
    6458:	9300      	str	r3, [sp, #0]
    645a:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    645e:	f023 031f 	bic.w	r3, r3, #31
    6462:	1e62      	subs	r2, r4, #1
    6464:	4413      	add	r3, r2
    6466:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
    646a:	280f      	cmp	r0, #15
    646c:	4604      	mov	r4, r0
    646e:	9303      	str	r3, [sp, #12]
    6470:	d905      	bls.n	647e <mpu_configure_region+0x3a>
    6472:	f7fc f817 	bl	24a4 <region_allocate_and_init.part.0>
    6476:	4604      	mov	r4, r0
}
    6478:	4620      	mov	r0, r4
    647a:	b005      	add	sp, #20
    647c:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
    647e:	4669      	mov	r1, sp
    6480:	f7fb fff8 	bl	2474 <region_init>
	return region_allocate_and_init(index,
    6484:	e7f8      	b.n	6478 <mpu_configure_region+0x34>

00006486 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    6486:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    648a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    648e:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
    6490:	bf08      	it	eq
    6492:	f06f 0015 	mvneq.w	r0, #21
    6496:	4770      	bx	lr

00006498 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
    6498:	b570      	push	{r4, r5, r6, lr}
    649a:	4605      	mov	r5, r0
    649c:	3901      	subs	r1, #1
    649e:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    64a0:	b142      	cbz	r2, 64b4 <strncpy+0x1c>
    64a2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    64a6:	1e56      	subs	r6, r2, #1
    64a8:	b92b      	cbnz	r3, 64b6 <strncpy+0x1e>
    64aa:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
    64ac:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
    64b0:	42a2      	cmp	r2, r4
    64b2:	d1fb      	bne.n	64ac <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
    64b4:	bd70      	pop	{r4, r5, r6, pc}
		n--;
    64b6:	4632      	mov	r2, r6
		*d = *s;
    64b8:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
    64bc:	e7ef      	b.n	649e <strncpy+0x6>

000064be <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    64be:	1e43      	subs	r3, r0, #1
    64c0:	3901      	subs	r1, #1
    64c2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    64c6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    64ca:	4282      	cmp	r2, r0
    64cc:	d101      	bne.n	64d2 <strcmp+0x14>
    64ce:	2a00      	cmp	r2, #0
    64d0:	d1f7      	bne.n	64c2 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    64d2:	1a10      	subs	r0, r2, r0
    64d4:	4770      	bx	lr

000064d6 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    64d6:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    64d8:	ea81 0400 	eor.w	r4, r1, r0
    64dc:	07a5      	lsls	r5, r4, #30
    64de:	4603      	mov	r3, r0
    64e0:	d00b      	beq.n	64fa <memcpy+0x24>
    64e2:	3b01      	subs	r3, #1
    64e4:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    64e6:	4291      	cmp	r1, r2
    64e8:	d11b      	bne.n	6522 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    64ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    64ec:	2a00      	cmp	r2, #0
    64ee:	d0fc      	beq.n	64ea <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    64f0:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
    64f4:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
    64f6:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
    64fa:	079c      	lsls	r4, r3, #30
    64fc:	d1f6      	bne.n	64ec <memcpy+0x16>
    64fe:	f022 0403 	bic.w	r4, r2, #3
    6502:	1f1d      	subs	r5, r3, #4
    6504:	0896      	lsrs	r6, r2, #2
    6506:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    6508:	42b9      	cmp	r1, r7
    650a:	d105      	bne.n	6518 <memcpy+0x42>
    650c:	f06f 0503 	mvn.w	r5, #3
    6510:	4423      	add	r3, r4
    6512:	fb05 2206 	mla	r2, r5, r6, r2
    6516:	e7e4      	b.n	64e2 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    6518:	f851 cb04 	ldr.w	ip, [r1], #4
    651c:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
    6520:	e7f2      	b.n	6508 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
    6522:	f811 4b01 	ldrb.w	r4, [r1], #1
    6526:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    652a:	e7dc      	b.n	64e6 <memcpy+0x10>

0000652c <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    652c:	4603      	mov	r3, r0
{
    652e:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
    6530:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    6532:	079c      	lsls	r4, r3, #30
    6534:	d111      	bne.n	655a <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    6536:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    653a:	f022 0603 	bic.w	r6, r2, #3
    653e:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    6542:	441e      	add	r6, r3
    6544:	0894      	lsrs	r4, r2, #2
    6546:	42b3      	cmp	r3, r6
    6548:	d10d      	bne.n	6566 <memset+0x3a>
    654a:	f06f 0503 	mvn.w	r5, #3
    654e:	fb05 2204 	mla	r2, r5, r4, r2
    6552:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    6554:	4293      	cmp	r3, r2
    6556:	d109      	bne.n	656c <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    6558:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    655a:	2a00      	cmp	r2, #0
    655c:	d0fc      	beq.n	6558 <memset+0x2c>
		*(d_byte++) = c_byte;
    655e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    6562:	3a01      	subs	r2, #1
    6564:	e7e5      	b.n	6532 <memset+0x6>
		*(d_word++) = c_word;
    6566:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    656a:	e7ec      	b.n	6546 <memset+0x1a>
		*(d_byte++) = c_byte;
    656c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    6570:	e7f0      	b.n	6554 <memset+0x28>

00006572 <_stdout_hook_default>:
}
    6572:	f04f 30ff 	mov.w	r0, #4294967295
    6576:	4770      	bx	lr

00006578 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6578:	6843      	ldr	r3, [r0, #4]
}
    657a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    657c:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    657e:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    6580:	600b      	str	r3, [r1, #0]
}
    6582:	4770      	bx	lr

00006584 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6584:	6843      	ldr	r3, [r0, #4]
    6586:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    6588:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    658a:	4042      	eors	r2, r0
    658c:	400a      	ands	r2, r1
    658e:	4042      	eors	r2, r0
    p_reg->OUT = value;
    6590:	605a      	str	r2, [r3, #4]
}
    6592:	2000      	movs	r0, #0
    6594:	4770      	bx	lr

00006596 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6596:	6843      	ldr	r3, [r0, #4]
}
    6598:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    659a:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    659c:	6099      	str	r1, [r3, #8]
}
    659e:	4770      	bx	lr

000065a0 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    65a0:	6843      	ldr	r3, [r0, #4]
}
    65a2:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    65a4:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    65a6:	60d9      	str	r1, [r3, #12]
}
    65a8:	4770      	bx	lr

000065aa <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    65aa:	6843      	ldr	r3, [r0, #4]
}
    65ac:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    65ae:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    65b0:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
    65b2:	404b      	eors	r3, r1
    p_reg->OUT = value;
    65b4:	6053      	str	r3, [r2, #4]
}
    65b6:	4770      	bx	lr

000065b8 <nrf_gpio_cfg_sense_set>:
{
    65b8:	b513      	push	{r0, r1, r4, lr}
    65ba:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    65bc:	a801      	add	r0, sp, #4
{
    65be:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    65c0:	f7fc f948 	bl	2854 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    65c4:	9b01      	ldr	r3, [sp, #4]
    65c6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    65ca:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    65ce:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    65d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    65d6:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
    65da:	b002      	add	sp, #8
    65dc:	bd10      	pop	{r4, pc}

000065de <check_level_trigger_pins>:
{
    65de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u32_t bit = 1U << pin;
    65e2:	2601      	movs	r6, #1
	u32_t pin = 0U;
    65e4:	2700      	movs	r7, #0
	struct gpio_nrfx_data *data = get_port_data(port);
    65e6:	68c3      	ldr	r3, [r0, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    65e8:	f8d0 8004 	ldr.w	r8, [r0, #4]
	u32_t out = data->int_en & data->pin_int_en;
    65ec:	e9d3 2403 	ldrd	r2, r4, [r3, #12]
    65f0:	4014      	ands	r4, r2
	out &= ~data->trig_edge & ~data->double_edge;
    65f2:	e9d3 2106 	ldrd	r2, r1, [r3, #24]
    65f6:	430a      	orrs	r2, r1
    65f8:	ea24 0402 	bic.w	r4, r4, r2
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
    65fc:	f8d8 2004 	ldr.w	r2, [r8, #4]
	u32_t pin_states = ~(port_in ^ data->int_active_level);
    6600:	695b      	ldr	r3, [r3, #20]
    return p_reg->IN;
    6602:	6915      	ldr	r5, [r2, #16]
    6604:	405d      	eors	r5, r3
	u32_t out = pin_states & level_pins;
    6606:	ea24 0505 	bic.w	r5, r4, r5
	while (level_pins) {
    660a:	b914      	cbnz	r4, 6612 <check_level_trigger_pins+0x34>
}
    660c:	4628      	mov	r0, r5
    660e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
    6612:	4234      	tst	r4, r6
    6614:	d00a      	beq.n	662c <check_level_trigger_pins+0x4e>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    6616:	f898 3008 	ldrb.w	r3, [r8, #8]
    661a:	f007 001f 	and.w	r0, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    661e:	2100      	movs	r1, #0
    6620:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
    6624:	f7ff ffc8 	bl	65b8 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    6628:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
    662c:	3701      	adds	r7, #1
		bit <<= 1;
    662e:	0076      	lsls	r6, r6, #1
    6630:	e7eb      	b.n	660a <check_level_trigger_pins+0x2c>

00006632 <gpio_nrfx_pin_disable_callback>:
	WRITE_BIT(data->int_en, pin, enable);
    6632:	2301      	movs	r3, #1
{
    6634:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
    6636:	68c4      	ldr	r4, [r0, #12]
	WRITE_BIT(data->int_en, pin, enable);
    6638:	fa03 f201 	lsl.w	r2, r3, r1
    663c:	6923      	ldr	r3, [r4, #16]
    663e:	ea23 0302 	bic.w	r3, r3, r2
    6642:	6123      	str	r3, [r4, #16]
}
    6644:	bc10      	pop	{r4}
	return gpiote_pin_int_cfg(port, pin);
    6646:	f7fc b9e7 	b.w	2a18 <gpiote_pin_int_cfg>

0000664a <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
    664a:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
    664e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    6652:	4606      	mov	r6, r0
    6654:	460f      	mov	r7, r1
    6656:	4690      	mov	r8, r2
    6658:	4699      	mov	r9, r3
	struct gpio_nrfx_data *data = get_port_data(port);
    665a:	68c4      	ldr	r4, [r0, #12]
	if ((mode == GPIO_INT_MODE_EDGE) &&
    665c:	d13a      	bne.n	66d4 <gpio_nrfx_pin_interrupt_configure+0x8a>
	u32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    665e:	6843      	ldr	r3, [r0, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6660:	a801      	add	r0, sp, #4
    6662:	7a1a      	ldrb	r2, [r3, #8]
    6664:	f001 031f 	and.w	r3, r1, #31
    6668:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
    666c:	9301      	str	r3, [sp, #4]
    666e:	f7fc f8f1 	bl	2854 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    6672:	9b01      	ldr	r3, [sp, #4]
    6674:	3380      	adds	r3, #128	; 0x80
    6676:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
    667a:	07db      	lsls	r3, r3, #31
    667c:	d434      	bmi.n	66e8 <gpio_nrfx_pin_interrupt_configure+0x9e>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    667e:	2501      	movs	r5, #1
    6680:	68e3      	ldr	r3, [r4, #12]
    6682:	40bd      	lsls	r5, r7
    6684:	431d      	orrs	r5, r3
    6686:	60e5      	str	r5, [r4, #12]
	WRITE_BIT(data->int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    6688:	2501      	movs	r5, #1
    668a:	6923      	ldr	r3, [r4, #16]
    668c:	40bd      	lsls	r5, r7
    668e:	f5b8 5f00 	cmp.w	r8, #8192	; 0x2000
    6692:	bf14      	ite	ne
    6694:	432b      	orrne	r3, r5
    6696:	43ab      	biceq	r3, r5
    6698:	6123      	str	r3, [r4, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    669a:	69a3      	ldr	r3, [r4, #24]
    669c:	f5b8 3fa0 	cmp.w	r8, #81920	; 0x14000
    66a0:	bf0c      	ite	eq
    66a2:	432b      	orreq	r3, r5
    66a4:	43ab      	bicne	r3, r5
    66a6:	61a3      	str	r3, [r4, #24]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    66a8:	69e3      	ldr	r3, [r4, #28]
    66aa:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
    66ae:	bf0c      	ite	eq
    66b0:	432b      	orreq	r3, r5
    66b2:	43ab      	bicne	r3, r5
    66b4:	61e3      	str	r3, [r4, #28]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    66b6:	6963      	ldr	r3, [r4, #20]
    66b8:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
    66bc:	bf0c      	ite	eq
    66be:	431d      	orreq	r5, r3
    66c0:	ea23 0505 	bicne.w	r5, r3, r5
	return gpiote_pin_int_cfg(port, pin);
    66c4:	4639      	mov	r1, r7
    66c6:	4630      	mov	r0, r6
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    66c8:	6165      	str	r5, [r4, #20]
	return gpiote_pin_int_cfg(port, pin);
    66ca:	f7fc f9a5 	bl	2a18 <gpiote_pin_int_cfg>
}
    66ce:	b003      	add	sp, #12
    66d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    66d4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    66d8:	d1d1      	bne.n	667e <gpio_nrfx_pin_interrupt_configure+0x34>
    66da:	2501      	movs	r5, #1
    66dc:	fa05 f301 	lsl.w	r3, r5, r1
    66e0:	68e5      	ldr	r5, [r4, #12]
    66e2:	ea25 0503 	bic.w	r5, r5, r3
    66e6:	e7ce      	b.n	6686 <gpio_nrfx_pin_interrupt_configure+0x3c>
		return -ENOTSUP;
    66e8:	f06f 0022 	mvn.w	r0, #34	; 0x22
    66ec:	e7ef      	b.n	66ce <gpio_nrfx_pin_interrupt_configure+0x84>

000066ee <cfg_level_pins>:
{
    66ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u32_t bit = 1U << pin;
    66f2:	2701      	movs	r7, #1
	u32_t pin = 0U;
    66f4:	2600      	movs	r6, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
    66f6:	68c5      	ldr	r5, [r0, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    66f8:	f8d0 8004 	ldr.w	r8, [r0, #4]
	u32_t out = data->int_en & data->pin_int_en;
    66fc:	e9d5 3403 	ldrd	r3, r4, [r5, #12]
    6700:	401c      	ands	r4, r3
	out &= ~data->trig_edge & ~data->double_edge;
    6702:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
    6706:	4313      	orrs	r3, r2
    6708:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
    670c:	b90c      	cbnz	r4, 6712 <cfg_level_pins+0x24>
}
    670e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
    6712:	4227      	tst	r7, r4
    6714:	d010      	beq.n	6738 <cfg_level_pins+0x4a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    6716:	6969      	ldr	r1, [r5, #20]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    6718:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
    671c:	40f1      	lsrs	r1, r6
    671e:	f001 0101 	and.w	r1, r1, #1
    6722:	f1c1 0103 	rsb	r1, r1, #3
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    6726:	f006 001f 	and.w	r0, r6, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    672a:	b2c9      	uxtb	r1, r1
    672c:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
    6730:	f7ff ff42 	bl	65b8 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    6734:	ea24 0407 	bic.w	r4, r4, r7
		++pin;
    6738:	3601      	adds	r6, #1
		bit <<= 1;
    673a:	007f      	lsls	r7, r7, #1
    673c:	e7e6      	b.n	670c <cfg_level_pins+0x1e>

0000673e <gpio_nrfx_pin_enable_callback>:
	WRITE_BIT(data->int_en, pin, enable);
    673e:	2301      	movs	r3, #1
{
    6740:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
    6742:	68c4      	ldr	r4, [r0, #12]
	WRITE_BIT(data->int_en, pin, enable);
    6744:	fa03 f201 	lsl.w	r2, r3, r1
    6748:	6923      	ldr	r3, [r4, #16]
    674a:	4313      	orrs	r3, r2
    674c:	6123      	str	r3, [r4, #16]
}
    674e:	bc10      	pop	{r4}
	return gpiote_pin_int_cfg(port, pin);
    6750:	f7fc b962 	b.w	2a18 <gpiote_pin_int_cfg>

00006754 <_spi_context_cs_control.isra.0>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
    6754:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
    6756:	6805      	ldr	r5, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
    6758:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
    675a:	b325      	cbz	r5, 67a6 <_spi_context_cs_control.isra.0+0x52>
    675c:	68ab      	ldr	r3, [r5, #8]
    675e:	b313      	cbz	r3, 67a6 <_spi_context_cs_control.isra.0+0x52>
    6760:	6818      	ldr	r0, [r3, #0]
    6762:	b300      	cbz	r0, 67a6 <_spi_context_cs_control.isra.0+0x52>
		if (on) {
    6764:	b161      	cbz	r1, 6780 <_spi_context_cs_control.isra.0+0x2c>
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
    6766:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
			gpio_pin_set(ctx->config->cs->gpio_dev,
    676a:	7919      	ldrb	r1, [r3, #4]
    676c:	0fd2      	lsrs	r2, r2, #31
    676e:	f7fc faa5 	bl	2cbc <gpio_pin_set>
			k_busy_wait(ctx->config->cs->delay);
    6772:	6823      	ldr	r3, [r4, #0]
    6774:	689b      	ldr	r3, [r3, #8]
    6776:	6898      	ldr	r0, [r3, #8]
}
    6778:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
    677c:	f000 b955 	b.w	6a2a <z_impl_k_busy_wait>
			if (!force_off &&
    6780:	b912      	cbnz	r2, 6788 <_spi_context_cs_control.isra.0+0x34>
    6782:	88aa      	ldrh	r2, [r5, #4]
    6784:	0492      	lsls	r2, r2, #18
    6786:	d40e      	bmi.n	67a6 <_spi_context_cs_control.isra.0+0x52>
			k_busy_wait(ctx->config->cs->delay);
    6788:	6898      	ldr	r0, [r3, #8]
    678a:	f000 f94e 	bl	6a2a <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
    678e:	6822      	ldr	r2, [r4, #0]
    6790:	6893      	ldr	r3, [r2, #8]
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
    6792:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
			gpio_pin_set(ctx->config->cs->gpio_dev,
    6796:	7919      	ldrb	r1, [r3, #4]
    6798:	43d2      	mvns	r2, r2
    679a:	6818      	ldr	r0, [r3, #0]
    679c:	0fd2      	lsrs	r2, r2, #31
}
    679e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set(ctx->config->cs->gpio_dev,
    67a2:	f7fc ba8b 	b.w	2cbc <gpio_pin_set>
}
    67a6:	bd38      	pop	{r3, r4, r5, pc}

000067a8 <spi_context_unlock_unconditionally>:
{
    67a8:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
    67aa:	2201      	movs	r2, #1
    67ac:	2100      	movs	r1, #0
{
    67ae:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
    67b0:	f7ff ffd0 	bl	6754 <_spi_context_cs_control.isra.0>
	if (!k_sem_count_get(&ctx->lock)) {
    67b4:	68e3      	ldr	r3, [r4, #12]
    67b6:	b923      	cbnz	r3, 67c2 <spi_context_unlock_unconditionally+0x1a>
	z_impl_k_sem_give(sem);
    67b8:	1d20      	adds	r0, r4, #4
}
    67ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    67be:	f7fe bcb7 	b.w	5130 <z_impl_k_sem_give>
    67c2:	bd10      	pop	{r4, pc}

000067c4 <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    67c4:	68c0      	ldr	r0, [r0, #12]
{
    67c6:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    67c8:	6803      	ldr	r3, [r0, #0]
    67ca:	428b      	cmp	r3, r1
    67cc:	d106      	bne.n	67dc <spi_nrfx_release+0x18>
	if (dev_data->busy) {
    67ce:	f890 404c 	ldrb.w	r4, [r0, #76]	; 0x4c
    67d2:	b934      	cbnz	r4, 67e2 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
    67d4:	f7ff ffe8 	bl	67a8 <spi_context_unlock_unconditionally>
	return 0;
    67d8:	4620      	mov	r0, r4
}
    67da:	bd10      	pop	{r4, pc}
		return -EINVAL;
    67dc:	f06f 0015 	mvn.w	r0, #21
    67e0:	e7fb      	b.n	67da <spi_nrfx_release+0x16>
		return -EBUSY;
    67e2:	f06f 000f 	mvn.w	r0, #15
    67e6:	e7f8      	b.n	67da <spi_nrfx_release+0x16>

000067e8 <uarte_nrfx_config_get>:

static int uarte_nrfx_config_get(struct device *dev, struct uart_config *cfg)
{
    67e8:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    67ea:	68c2      	ldr	r2, [r0, #12]
    67ec:	e892 0003 	ldmia.w	r2, {r0, r1}
    67f0:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
}
    67f4:	2000      	movs	r0, #0
    67f6:	4770      	bx	lr

000067f8 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    67f8:	6843      	ldr	r3, [r0, #4]
    67fa:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    67fc:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    6800:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
static int uarte_nrfx_err_check(struct device *dev)
{
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	/* register bitfields maps to the defines in uart.h */
	return nrf_uarte_errorsrc_get_and_clear(uarte);
}
    6804:	4770      	bx	lr

00006806 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    6806:	6843      	ldr	r3, [r0, #4]
 * @return 0 if a character arrived, -1 if the input buffer is empty.
 */
static int uarte_nrfx_poll_in(struct device *dev, unsigned char *c)
{

	const struct uarte_nrfx_data *data = get_dev_data(dev);
    6808:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
    680a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    680c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (data->async) {
		return -ENOTSUP;
	}
#endif

	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    6810:	b138      	cbz	r0, 6822 <uarte_nrfx_poll_in+0x1c>
		return -1;
	}

	*c = data->rx_data;
    6812:	7b12      	ldrb	r2, [r2, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6814:	2000      	movs	r0, #0
    6816:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6818:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    681a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    681e:	601a      	str	r2, [r3, #0]

	/* clear the interrupt */
	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);

	return 0;
    6820:	4770      	bx	lr
		return -1;
    6822:	f04f 30ff 	mov.w	r0, #4294967295
}
    6826:	4770      	bx	lr

00006828 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(struct device *dev, unsigned char c)
{
    6828:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
    682c:	6843      	ldr	r3, [r0, #4]
{
    682e:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
    6832:	681c      	ldr	r4, [r3, #0]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
    6834:	68c6      	ldr	r6, [r0, #12]
		lock = &data->async->tx_size;
	} else
#endif
		lock = &data->poll_out_lock;

	if (!k_is_in_isr()) {
    6836:	f000 f8f2 	bl	6a1e <k_is_in_isr>
    683a:	b9c0      	cbnz	r0, 686e <uarte_nrfx_poll_out+0x46>
		lock = &data->poll_out_lock;
    683c:	2564      	movs	r5, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    683e:	f04f 0801 	mov.w	r8, #1
    6842:	f106 0708 	add.w	r7, r6, #8
    6846:	e8d7 3fef 	ldaex	r3, [r7]
    684a:	2b00      	cmp	r3, #0
    684c:	d103      	bne.n	6856 <uarte_nrfx_poll_out+0x2e>
    684e:	e8c7 8fe2 	stlex	r2, r8, [r7]
    6852:	2a00      	cmp	r2, #0
    6854:	d1f7      	bne.n	6846 <uarte_nrfx_poll_out+0x1e>
		u8_t safety_cnt = 100;

		while (atomic_cas((atomic_t *) lock,
    6856:	d00c      	beq.n	6872 <uarte_nrfx_poll_out+0x4a>
	return z_impl_k_sleep(timeout);
    6858:	2021      	movs	r0, #33	; 0x21
    685a:	2100      	movs	r1, #0
    685c:	3d01      	subs	r5, #1
    685e:	f7fe fc2b 	bl	50b8 <z_impl_k_sleep>
				(atomic_val_t) 1) == false) {
			/* k_sleep allows other threads to execute and finish
			 * their transactions.
			 */
			k_msleep(1);
			if (--safety_cnt == 0) {
    6862:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    6866:	d1ee      	bne.n	6846 <uarte_nrfx_poll_out+0x1e>
	 */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	/* Release the lock. */
	*lock = 0;
}
    6868:	b002      	add	sp, #8
    686a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*lock = 1;
    686e:	2301      	movs	r3, #1
    6870:	60b3      	str	r3, [r6, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6872:	2300      	movs	r3, #0
    6874:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    6878:	f10d 0307 	add.w	r3, sp, #7
    687c:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    6880:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6882:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    p_reg->TXD.MAXCNT = length;
    6886:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    688a:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    688c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
    6890:	b923      	cbnz	r3, 689c <uarte_nrfx_poll_out+0x74>
    6892:	2001      	movs	r0, #1
    6894:	f000 f86c 	bl	6970 <nrfx_busy_wait>
    6898:	3d01      	subs	r5, #1
    689a:	d1f7      	bne.n	688c <uarte_nrfx_poll_out+0x64>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    689c:	2301      	movs	r3, #1
    689e:	60e3      	str	r3, [r4, #12]
	*lock = 0;
    68a0:	2300      	movs	r3, #0
    68a2:	60b3      	str	r3, [r6, #8]
    68a4:	e7e0      	b.n	6868 <uarte_nrfx_poll_out+0x40>

000068a6 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    68a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    68aa:	f04f 0814 	mov.w	r8, #20
	return config->uarte_regs;
    68ae:	6843      	ldr	r3, [r0, #4]
UART_NRF_UARTE_DEVICE(0);
    68b0:	4605      	mov	r5, r0
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    68b2:	2601      	movs	r6, #1
	struct uarte_nrfx_data *data = get_dev_data(dev);
    68b4:	68c7      	ldr	r7, [r0, #12]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    68b6:	a801      	add	r0, sp, #4
	return config->uarte_regs;
    68b8:	681c      	ldr	r4, [r3, #0]
        nrf_gpio_pin_set(pin_number);
    68ba:	f8cd 8004 	str.w	r8, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    68be:	f7fc fd73 	bl	33a8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    68c2:	9b01      	ldr	r3, [sp, #4]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    68c4:	f04f 0a03 	mov.w	sl, #3
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    68c8:	fa06 f303 	lsl.w	r3, r6, r3
    p_reg->OUTSET = set_mask;
    68cc:	6083      	str	r3, [r0, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    68ce:	a801      	add	r0, sp, #4
    68d0:	f8cd 8004 	str.w	r8, [sp, #4]
    68d4:	f7fc fd68 	bl	33a8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    68d8:	f04f 0b16 	mov.w	fp, #22
    68dc:	9b01      	ldr	r3, [sp, #4]
    68de:	f04f 0900 	mov.w	r9, #0
    68e2:	3380      	adds	r3, #128	; 0x80
    68e4:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    68e8:	a801      	add	r0, sp, #4
    68ea:	f8cd b004 	str.w	fp, [sp, #4]
    68ee:	f7fc fd5b 	bl	33a8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    68f2:	9b01      	ldr	r3, [sp, #4]
    68f4:	3380      	adds	r3, #128	; 0x80
    68f6:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
    68fa:	f8c4 850c 	str.w	r8, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    68fe:	f04f 0813 	mov.w	r8, #19
    6902:	f8c4 b514 	str.w	fp, [r4, #1300]	; 0x514
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6906:	a801      	add	r0, sp, #4
    6908:	f8cd 8004 	str.w	r8, [sp, #4]
    690c:	f7fc fd4c 	bl	33a8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    6910:	9b01      	ldr	r3, [sp, #4]
    6912:	fa06 f303 	lsl.w	r3, r6, r3
    p_reg->OUTSET = set_mask;
    6916:	6083      	str	r3, [r0, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6918:	a801      	add	r0, sp, #4
    691a:	f8cd 8004 	str.w	r8, [sp, #4]
    691e:	f7fc fd43 	bl	33a8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    6922:	9b01      	ldr	r3, [sp, #4]
    6924:	3380      	adds	r3, #128	; 0x80
    6926:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    692a:	f04f 0a15 	mov.w	sl, #21
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    692e:	a801      	add	r0, sp, #4
    6930:	f8cd a004 	str.w	sl, [sp, #4]
    6934:	f7fc fd38 	bl	33a8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    6938:	9b01      	ldr	r3, [sp, #4]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    693a:	68e9      	ldr	r1, [r5, #12]
    693c:	3380      	adds	r3, #128	; 0x80
    693e:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
    p_reg->PSEL.RTS = pselrts;
    6942:	f8c4 8508 	str.w	r8, [r4, #1288]	; 0x508
    6946:	4628      	mov	r0, r5
    p_reg->PSEL.CTS = pselcts;
    6948:	f8c4 a510 	str.w	sl, [r4, #1296]	; 0x510
    694c:	f7fc fc6c 	bl	3228 <uarte_nrfx_configure>
	if (err) {
    6950:	b950      	cbnz	r0, 6968 <uarte_0_init+0xc2>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    6952:	2308      	movs	r3, #8
		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    6954:	370c      	adds	r7, #12
    6956:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    695a:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    695e:	f8c4 7534 	str.w	r7, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    6962:	f8c4 6538 	str.w	r6, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6966:	6026      	str	r6, [r4, #0]
UART_NRF_UARTE_DEVICE(0);
    6968:	b003      	add	sp, #12
    696a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000696e <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    696e:	4700      	bx	r0

00006970 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    6970:	f000 b85b 	b.w	6a2a <z_impl_k_busy_wait>

00006974 <nrf_gpio_pin_clear>:
{
    6974:	b507      	push	{r0, r1, r2, lr}
    6976:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6978:	a801      	add	r0, sp, #4
    697a:	f7fc fdf7 	bl	356c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    697e:	2301      	movs	r3, #1
    6980:	9a01      	ldr	r2, [sp, #4]
    6982:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    6984:	60c3      	str	r3, [r0, #12]
}
    6986:	b003      	add	sp, #12
    6988:	f85d fb04 	ldr.w	pc, [sp], #4

0000698c <nrf_gpio_pin_set>:
{
    698c:	b507      	push	{r0, r1, r2, lr}
    698e:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6990:	a801      	add	r0, sp, #4
    6992:	f7fc fdeb 	bl	356c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    6996:	2301      	movs	r3, #1
    6998:	9a01      	ldr	r2, [sp, #4]
    699a:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    699c:	6083      	str	r3, [r0, #8]
}
    699e:	b003      	add	sp, #12
    69a0:	f85d fb04 	ldr.w	pc, [sp], #4

000069a4 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
    69a4:	f7ff bd3e 	b.w	6424 <z_clock_idle_exit>

000069a8 <k_mem_slab_init>:
{
    69a8:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    69aa:	2400      	movs	r4, #0
    69ac:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    69ae:	ea41 0402 	orr.w	r4, r1, r2
    69b2:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    69b6:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
    69ba:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    69bc:	d10c      	bne.n	69d8 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
    69be:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    69c0:	42a3      	cmp	r3, r4
    69c2:	d103      	bne.n	69cc <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
    69c4:	e9c0 0000 	strd	r0, r0, [r0]
}
    69c8:	2000      	movs	r0, #0
}
    69ca:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    69cc:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    69ce:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
    69d0:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
    69d2:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    69d4:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    69d6:	e7f3      	b.n	69c0 <k_mem_slab_init+0x18>
		return -EINVAL;
    69d8:	f06f 0015 	mvn.w	r0, #21
	return rc;
    69dc:	e7f5      	b.n	69ca <k_mem_slab_init+0x22>

000069de <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    69de:	4603      	mov	r3, r0
    69e0:	b920      	cbnz	r0, 69ec <z_reschedule_irqlock+0xe>
    69e2:	f3ef 8205 	mrs	r2, IPSR
    69e6:	b90a      	cbnz	r2, 69ec <z_reschedule_irqlock+0xe>
    69e8:	f7fb b8f4 	b.w	1bd4 <arch_swap>
    69ec:	f383 8811 	msr	BASEPRI, r3
    69f0:	f3bf 8f6f 	isb	sy
}
    69f4:	4770      	bx	lr

000069f6 <z_reschedule_unlocked>:
	__asm__ volatile(
    69f6:	f04f 0320 	mov.w	r3, #32
    69fa:	f3ef 8011 	mrs	r0, BASEPRI
    69fe:	f383 8811 	msr	BASEPRI, r3
    6a02:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    6a06:	f7ff bfea 	b.w	69de <z_reschedule_irqlock>

00006a0a <z_priq_dumb_best>:
{
    6a0a:	4603      	mov	r3, r0
	return list->head == list;
    6a0c:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6a0e:	4283      	cmp	r3, r0
    6a10:	d003      	beq.n	6a1a <z_priq_dumb_best+0x10>
	if (n != NULL) {
    6a12:	2800      	cmp	r0, #0
    6a14:	bf38      	it	cc
    6a16:	2000      	movcc	r0, #0
    6a18:	4770      	bx	lr
	struct k_thread *thread = NULL;
    6a1a:	2000      	movs	r0, #0
}
    6a1c:	4770      	bx	lr

00006a1e <k_is_in_isr>:
    6a1e:	f3ef 8005 	mrs	r0, IPSR
}
    6a22:	3800      	subs	r0, #0
    6a24:	bf18      	it	ne
    6a26:	2001      	movne	r0, #1
    6a28:	4770      	bx	lr

00006a2a <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
    6a2a:	f7f9 bf97 	b.w	95c <arch_busy_wait>

00006a2e <z_impl_k_thread_name_set>:
}
    6a2e:	f06f 0046 	mvn.w	r0, #70	; 0x46
    6a32:	4770      	bx	lr

00006a34 <k_thread_name_get>:
}
    6a34:	2000      	movs	r0, #0
    6a36:	4770      	bx	lr

00006a38 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
    6a38:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
    6a3a:	f7ff f847 	bl	5acc <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
    6a3e:	bd08      	pop	{r3, pc}

00006a40 <k_timer_init>:
	timer->status = 0U;
    6a40:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    6a42:	e9c0 1206 	strd	r1, r2, [r0, #24]
	sys_dlist_init(&w->waitq);
    6a46:	f100 0210 	add.w	r2, r0, #16
	list->tail = (sys_dnode_t *)list;
    6a4a:	e9c0 2204 	strd	r2, r2, [r0, #16]
	node->prev = NULL;
    6a4e:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    6a52:	6283      	str	r3, [r0, #40]	; 0x28
	timer->user_data = NULL;
    6a54:	62c3      	str	r3, [r0, #44]	; 0x2c
}
    6a56:	4770      	bx	lr

00006a58 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    6a58:	b510      	push	{r4, lr}
    6a5a:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
    6a5c:	f7fe fea0 	bl	57a0 <z_abort_timeout>

	if (inactive) {
    6a60:	b9d8      	cbnz	r0, 6a9a <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
    6a62:	69e3      	ldr	r3, [r4, #28]
    6a64:	b10b      	cbz	r3, 6a6a <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    6a66:	4620      	mov	r0, r4
    6a68:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
    6a6a:	f104 0010 	add.w	r0, r4, #16
    6a6e:	2100      	movs	r1, #0
    6a70:	f7fd fad4 	bl	401c <z_find_first_thread_to_unpend>
	if (thread != NULL) {
    6a74:	4604      	mov	r4, r0
    6a76:	b180      	cbz	r0, 6a9a <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
    6a78:	f7fd fb1a 	bl	40b0 <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
    6a7c:	4620      	mov	r0, r4
    6a7e:	f7fd fd39 	bl	44f4 <z_ready_thread>
    6a82:	f04f 0320 	mov.w	r3, #32
    6a86:	f3ef 8011 	mrs	r0, BASEPRI
    6a8a:	f383 8811 	msr	BASEPRI, r3
    6a8e:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
    6a92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
    6a96:	f7ff bfa2 	b.w	69de <z_reschedule_irqlock>
    6a9a:	bd10      	pop	{r4, pc}

00006a9c <k_heap_init>:
{
    6a9c:	b410      	push	{r4}
    6a9e:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    6aa2:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    6aa6:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    6aa8:	f7ff b9ad 	b.w	5e06 <sys_heap_init>

00006aac <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
    6aac:	4770      	bx	lr
