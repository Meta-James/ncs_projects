
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	20003f28 	.word	0x20003f28
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   4:	00002fb9 	.word	0x00002fb9
   8:	00011fb5 	.word	0x00011fb5
   c:	00002fe9 	.word	0x00002fe9
  10:	00002fe9 	.word	0x00002fe9
		if (fdtable[fd].obj == NULL) {
  14:	00002fe9 	.word	0x00002fe9
  18:	00002fe9 	.word	0x00002fe9
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
  1c:	00002fe9 	.word	0x00002fe9
	...
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
  2c:	00002d95 	.word	0x00002d95
  30:	00002fe9 	.word	0x00002fe9
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  34:	00000000 	.word	0x00000000
		fdtable[fd].obj = FD_OBJ_RESERVED;
  38:	00002d3d 	.word	0x00002d3d
  3c:	0000269d 	.word	0x0000269d

00000040 <_irq_vector_table>:
  40:	00002f79 00002f79 00002f79 00002f79     y/..y/..y/..y/..
		sys_pm_notify_power_state_exit(pm_state);
		_sys_pm_power_state_exit_post_ops(pm_state);
	}

	return pm_state;
}
  50:	00002f79 00002f79 00002f79 00002f79     y/..y/..y/..y/..
  60:	00002f79 00002f79 00002f79 00002f79     y/..y/..y/..y/..
  70:	00002f79 00002f79 00002f79 00002f79     y/..y/..y/..y/..
  80:	00002f79 00002f79 00002f79 00002f79     y/..y/..y/..y/..
  90:	00002f79 00002f79 00002f79 00002f79     y/..y/..y/..y/..
  a0:	00002f79 00002f79 00002f79 00002f79     y/..y/..y/..y/..
  b0:	00002f79 00002f79 00002f79 00002f79     y/..y/..y/..y/..
  c0:	00002f79 00002f79 00002f79 00002f79     y/..y/..y/..y/..
  d0:	00002f79 00002f79 00002f79 00002f79     y/..y/..y/..y/..
  e0:	00002f79 00002f79 00002f79 00002f79     y/..y/..y/..y/..
  f0:	00002f79 00002f79 00002f79 00002f79     y/..y/..y/..y/..
 100:	00002f79 00002f79 00002f79 00002f79     y/..y/..y/..y/..
 110:	00002f79 00002f79 00002f79 00002f79     y/..y/..y/..y/..
 120:	00002f79 00002f79 00002f79 00002f79     y/..y/..y/..y/..
 130:	00002f79 00002f79 00002f79 00002f79     y/..y/..y/..y/..
 140:	00002f79 00002f79 00002f79 00002f79     y/..y/..y/..y/..
 150:	00002f79                                y/..

Disassembly of section text:

00000158 <__aeabi_uldivmod>:
     158:	b953      	cbnz	r3, 170 <__aeabi_uldivmod+0x18>
     15a:	b94a      	cbnz	r2, 170 <__aeabi_uldivmod+0x18>
     15c:	2900      	cmp	r1, #0
     15e:	bf08      	it	eq
     160:	2800      	cmpeq	r0, #0
     162:	bf1c      	itt	ne
     164:	f04f 31ff 	movne.w	r1, #4294967295
     168:	f04f 30ff 	movne.w	r0, #4294967295
     16c:	f000 b984 	b.w	478 <__aeabi_idiv0>
     170:	f1ad 0c08 	sub.w	ip, sp, #8
     174:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     178:	f000 f806 	bl	188 <__udivmoddi4>
     17c:	f8dd e004 	ldr.w	lr, [sp, #4]
     180:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     184:	b004      	add	sp, #16
     186:	4770      	bx	lr

00000188 <__udivmoddi4>:
     188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     18c:	9e09      	ldr	r6, [sp, #36]	; 0x24
     18e:	460d      	mov	r5, r1
     190:	4604      	mov	r4, r0
     192:	468a      	mov	sl, r1
     194:	2b00      	cmp	r3, #0
     196:	f040 8085 	bne.w	2a4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x24>
     19a:	428a      	cmp	r2, r1
     19c:	4617      	mov	r7, r2
     19e:	d944      	bls.n	22a <CONFIG_UART_MUX_RX_STACK_SIZE+0x2a>
     1a0:	fab2 f282 	clz	r2, r2
     1a4:	b14a      	cbz	r2, 1ba <__udivmoddi4+0x32>
     1a6:	f1c2 0120 	rsb	r1, r2, #32
     1aa:	fa05 f302 	lsl.w	r3, r5, r2
     1ae:	4097      	lsls	r7, r2
     1b0:	4094      	lsls	r4, r2
     1b2:	fa20 f101 	lsr.w	r1, r0, r1
     1b6:	ea41 0a03 	orr.w	sl, r1, r3
     1ba:	ea4f 4817 	mov.w	r8, r7, lsr #16
     1be:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     1c2:	fa1f f987 	uxth.w	r9, r7
     1c6:	fbba fef8 	udiv	lr, sl, r8
     1ca:	fb08 a31e 	mls	r3, r8, lr, sl
     1ce:	fb0e f109 	mul.w	r1, lr, r9
     1d2:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
     1d6:	4299      	cmp	r1, r3
     1d8:	d907      	bls.n	1ea <CONFIG_SRAM_SIZE+0x2a>
     1da:	18fb      	adds	r3, r7, r3
     1dc:	f10e 30ff 	add.w	r0, lr, #4294967295
     1e0:	d202      	bcs.n	1e8 <CONFIG_SRAM_SIZE+0x28>
     1e2:	4299      	cmp	r1, r3
     1e4:	f200 8130 	bhi.w	448 <CONFIG_BT_GATT_NUS_THREAD_STACK_SIZE+0x48>
     1e8:	4686      	mov	lr, r0
     1ea:	1a59      	subs	r1, r3, r1
     1ec:	b2a3      	uxth	r3, r4
     1ee:	fbb1 f0f8 	udiv	r0, r1, r8
     1f2:	fb08 1110 	mls	r1, r8, r0, r1
     1f6:	fb00 f909 	mul.w	r9, r0, r9
     1fa:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     1fe:	45a1      	cmp	r9, r4
     200:	d907      	bls.n	212 <CONFIG_UART_MUX_RX_STACK_SIZE+0x12>
     202:	193c      	adds	r4, r7, r4
     204:	f100 33ff 	add.w	r3, r0, #4294967295
     208:	d202      	bcs.n	210 <CONFIG_UART_MUX_RX_STACK_SIZE+0x10>
     20a:	45a1      	cmp	r9, r4
     20c:	f200 8119 	bhi.w	442 <CONFIG_BT_GATT_NUS_THREAD_STACK_SIZE+0x42>
     210:	4618      	mov	r0, r3
     212:	eba4 0409 	sub.w	r4, r4, r9
     216:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     21a:	2100      	movs	r1, #0
     21c:	b11e      	cbz	r6, 226 <CONFIG_UART_MUX_RX_STACK_SIZE+0x26>
     21e:	40d4      	lsrs	r4, r2
     220:	2300      	movs	r3, #0
     222:	e9c6 4300 	strd	r4, r3, [r6]
     226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     22a:	b902      	cbnz	r2, 22e <CONFIG_UART_MUX_RX_STACK_SIZE+0x2e>
     22c:	deff      	udf	#255	; 0xff
     22e:	fab2 f282 	clz	r2, r2
     232:	2a00      	cmp	r2, #0
     234:	d151      	bne.n	2da <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5a>
     236:	1bcb      	subs	r3, r1, r7
     238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     23c:	fa1f f887 	uxth.w	r8, r7
     240:	2101      	movs	r1, #1
     242:	0c25      	lsrs	r5, r4, #16
     244:	fbb3 fcfe 	udiv	ip, r3, lr
     248:	fb0e 301c 	mls	r0, lr, ip, r3
     24c:	fb08 f90c 	mul.w	r9, r8, ip
     250:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     254:	45a9      	cmp	r9, r5
     256:	d90b      	bls.n	270 <CONFIG_UART_MUX_RX_STACK_SIZE+0x70>
     258:	197d      	adds	r5, r7, r5
     25a:	f10c 33ff 	add.w	r3, ip, #4294967295
     25e:	bf2c      	ite	cs
     260:	2001      	movcs	r0, #1
     262:	2000      	movcc	r0, #0
     264:	45a9      	cmp	r9, r5
     266:	d902      	bls.n	26e <CONFIG_UART_MUX_RX_STACK_SIZE+0x6e>
     268:	2800      	cmp	r0, #0
     26a:	f000 80f1 	beq.w	450 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x4>
     26e:	469c      	mov	ip, r3
     270:	eba5 0509 	sub.w	r5, r5, r9
     274:	b2a3      	uxth	r3, r4
     276:	fbb5 f0fe 	udiv	r0, r5, lr
     27a:	fb0e 5510 	mls	r5, lr, r0, r5
     27e:	fb08 f800 	mul.w	r8, r8, r0
     282:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     286:	45a0      	cmp	r8, r4
     288:	d907      	bls.n	29a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1a>
     28a:	193c      	adds	r4, r7, r4
     28c:	f100 33ff 	add.w	r3, r0, #4294967295
     290:	d202      	bcs.n	298 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x18>
     292:	45a0      	cmp	r8, r4
     294:	f200 80d2 	bhi.w	43c <CONFIG_BT_GATT_NUS_THREAD_STACK_SIZE+0x3c>
     298:	4618      	mov	r0, r3
     29a:	eba4 0408 	sub.w	r4, r4, r8
     29e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     2a2:	e7bb      	b.n	21c <CONFIG_UART_MUX_RX_STACK_SIZE+0x1c>
     2a4:	428b      	cmp	r3, r1
     2a6:	d908      	bls.n	2ba <CONFIG_PM_PARTITION_SIZE_PROVISION+0x3a>
     2a8:	2e00      	cmp	r6, #0
     2aa:	f000 80be 	beq.w	42a <CONFIG_BT_GATT_NUS_THREAD_STACK_SIZE+0x2a>
     2ae:	2100      	movs	r1, #0
     2b0:	e9c6 0500 	strd	r0, r5, [r6]
     2b4:	4608      	mov	r0, r1
     2b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     2ba:	fab3 f183 	clz	r1, r3
     2be:	2900      	cmp	r1, #0
     2c0:	d14d      	bne.n	35e <CONFIG_BT_DEVICE_APPEARANCE+0x1d>
     2c2:	42ab      	cmp	r3, r5
     2c4:	f0c0 80b4 	bcc.w	430 <CONFIG_BT_GATT_NUS_THREAD_STACK_SIZE+0x30>
     2c8:	4282      	cmp	r2, r0
     2ca:	f240 80b1 	bls.w	430 <CONFIG_BT_GATT_NUS_THREAD_STACK_SIZE+0x30>
     2ce:	4608      	mov	r0, r1
     2d0:	2e00      	cmp	r6, #0
     2d2:	d0a8      	beq.n	226 <CONFIG_UART_MUX_RX_STACK_SIZE+0x26>
     2d4:	e9c6 4a00 	strd	r4, sl, [r6]
     2d8:	e7a5      	b.n	226 <CONFIG_UART_MUX_RX_STACK_SIZE+0x26>
     2da:	f1c2 0020 	rsb	r0, r2, #32
     2de:	4097      	lsls	r7, r2
     2e0:	fa01 f302 	lsl.w	r3, r1, r2
     2e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     2e8:	40c1      	lsrs	r1, r0
     2ea:	fa24 f500 	lsr.w	r5, r4, r0
     2ee:	fa1f f887 	uxth.w	r8, r7
     2f2:	4094      	lsls	r4, r2
     2f4:	431d      	orrs	r5, r3
     2f6:	fbb1 f0fe 	udiv	r0, r1, lr
     2fa:	0c2b      	lsrs	r3, r5, #16
     2fc:	fb0e 1110 	mls	r1, lr, r0, r1
     300:	fb00 fc08 	mul.w	ip, r0, r8
     304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     308:	459c      	cmp	ip, r3
     30a:	d90e      	bls.n	32a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xaa>
     30c:	18fb      	adds	r3, r7, r3
     30e:	f100 31ff 	add.w	r1, r0, #4294967295
     312:	bf2c      	ite	cs
     314:	f04f 0901 	movcs.w	r9, #1
     318:	f04f 0900 	movcc.w	r9, #0
     31c:	459c      	cmp	ip, r3
     31e:	d903      	bls.n	328 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa8>
     320:	f1b9 0f00 	cmp.w	r9, #0
     324:	f000 8098 	beq.w	458 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xc>
     328:	4608      	mov	r0, r1
     32a:	eba3 030c 	sub.w	r3, r3, ip
     32e:	b2ad      	uxth	r5, r5
     330:	fbb3 f1fe 	udiv	r1, r3, lr
     334:	fb0e 3311 	mls	r3, lr, r1, r3
     338:	fb01 fc08 	mul.w	ip, r1, r8
     33c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     340:	45ac      	cmp	ip, r5
     342:	d907      	bls.n	354 <CONFIG_BT_DEVICE_APPEARANCE+0x13>
     344:	197d      	adds	r5, r7, r5
     346:	f101 33ff 	add.w	r3, r1, #4294967295
     34a:	d202      	bcs.n	352 <CONFIG_BT_DEVICE_APPEARANCE+0x11>
     34c:	45ac      	cmp	ip, r5
     34e:	f200 808a 	bhi.w	466 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x1a>
     352:	4619      	mov	r1, r3
     354:	eba5 030c 	sub.w	r3, r5, ip
     358:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     35c:	e771      	b.n	242 <CONFIG_UART_MUX_RX_STACK_SIZE+0x42>
     35e:	f1c1 0420 	rsb	r4, r1, #32
     362:	408b      	lsls	r3, r1
     364:	fa02 f701 	lsl.w	r7, r2, r1
     368:	fa05 fc01 	lsl.w	ip, r5, r1
     36c:	40e2      	lsrs	r2, r4
     36e:	fa20 f804 	lsr.w	r8, r0, r4
     372:	40e5      	lsrs	r5, r4
     374:	fa00 fe01 	lsl.w	lr, r0, r1
     378:	4313      	orrs	r3, r2
     37a:	ea48 020c 	orr.w	r2, r8, ip
     37e:	ea4f 4813 	mov.w	r8, r3, lsr #16
     382:	ea4f 4c12 	mov.w	ip, r2, lsr #16
     386:	fa1f f983 	uxth.w	r9, r3
     38a:	fbb5 faf8 	udiv	sl, r5, r8
     38e:	fb08 551a 	mls	r5, r8, sl, r5
     392:	fb0a f009 	mul.w	r0, sl, r9
     396:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
     39a:	4560      	cmp	r0, ip
     39c:	d90e      	bls.n	3bc <CONFIG_BT_DEVICE_APPEARANCE+0x7b>
     39e:	eb13 0c0c 	adds.w	ip, r3, ip
     3a2:	f10a 35ff 	add.w	r5, sl, #4294967295
     3a6:	bf2c      	ite	cs
     3a8:	f04f 0b01 	movcs.w	fp, #1
     3ac:	f04f 0b00 	movcc.w	fp, #0
     3b0:	4560      	cmp	r0, ip
     3b2:	d902      	bls.n	3ba <CONFIG_BT_DEVICE_APPEARANCE+0x79>
     3b4:	f1bb 0f00 	cmp.w	fp, #0
     3b8:	d051      	beq.n	45e <CONFIG_BT_HCI_ECC_STACK_SIZE+0x12>
     3ba:	46aa      	mov	sl, r5
     3bc:	ebac 0c00 	sub.w	ip, ip, r0
     3c0:	b292      	uxth	r2, r2
     3c2:	fbbc f0f8 	udiv	r0, ip, r8
     3c6:	fb08 cc10 	mls	ip, r8, r0, ip
     3ca:	fb00 f909 	mul.w	r9, r0, r9
     3ce:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
     3d2:	45e1      	cmp	r9, ip
     3d4:	d907      	bls.n	3e6 <CONFIG_BT_DEVICE_APPEARANCE+0xa5>
     3d6:	eb13 0c0c 	adds.w	ip, r3, ip
     3da:	f100 32ff 	add.w	r2, r0, #4294967295
     3de:	d201      	bcs.n	3e4 <CONFIG_BT_DEVICE_APPEARANCE+0xa3>
     3e0:	45e1      	cmp	r9, ip
     3e2:	d843      	bhi.n	46c <CONFIG_BT_HCI_ECC_STACK_SIZE+0x20>
     3e4:	4610      	mov	r0, r2
     3e6:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
     3ea:	ebac 0c09 	sub.w	ip, ip, r9
     3ee:	fba0 8907 	umull	r8, r9, r0, r7
     3f2:	45cc      	cmp	ip, r9
     3f4:	4645      	mov	r5, r8
     3f6:	464a      	mov	r2, r9
     3f8:	d302      	bcc.n	400 <CONFIG_BT_GATT_NUS_THREAD_STACK_SIZE>
     3fa:	d106      	bne.n	40a <CONFIG_BT_GATT_NUS_THREAD_STACK_SIZE+0xa>
     3fc:	45c6      	cmp	lr, r8
     3fe:	d204      	bcs.n	40a <CONFIG_BT_GATT_NUS_THREAD_STACK_SIZE+0xa>
     400:	3801      	subs	r0, #1
     402:	ebb8 0507 	subs.w	r5, r8, r7
     406:	eb69 0203 	sbc.w	r2, r9, r3
     40a:	b396      	cbz	r6, 472 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x26>
     40c:	ebbe 0305 	subs.w	r3, lr, r5
     410:	eb6c 0c02 	sbc.w	ip, ip, r2
     414:	fa23 f201 	lsr.w	r2, r3, r1
     418:	fa0c f404 	lsl.w	r4, ip, r4
     41c:	fa2c f301 	lsr.w	r3, ip, r1
     420:	2100      	movs	r1, #0
     422:	4314      	orrs	r4, r2
     424:	e9c6 4300 	strd	r4, r3, [r6]
     428:	e6fd      	b.n	226 <CONFIG_UART_MUX_RX_STACK_SIZE+0x26>
     42a:	4631      	mov	r1, r6
     42c:	4630      	mov	r0, r6
     42e:	e6fa      	b.n	226 <CONFIG_UART_MUX_RX_STACK_SIZE+0x26>
     430:	1a84      	subs	r4, r0, r2
     432:	eb65 0303 	sbc.w	r3, r5, r3
     436:	2001      	movs	r0, #1
     438:	469a      	mov	sl, r3
     43a:	e749      	b.n	2d0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x50>
     43c:	3802      	subs	r0, #2
     43e:	443c      	add	r4, r7
     440:	e72b      	b.n	29a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1a>
     442:	3802      	subs	r0, #2
     444:	443c      	add	r4, r7
     446:	e6e4      	b.n	212 <CONFIG_UART_MUX_RX_STACK_SIZE+0x12>
     448:	f1ae 0e02 	sub.w	lr, lr, #2
     44c:	443b      	add	r3, r7
     44e:	e6cc      	b.n	1ea <CONFIG_SRAM_SIZE+0x2a>
     450:	f1ac 0c02 	sub.w	ip, ip, #2
     454:	443d      	add	r5, r7
     456:	e70b      	b.n	270 <CONFIG_UART_MUX_RX_STACK_SIZE+0x70>
     458:	3802      	subs	r0, #2
     45a:	443b      	add	r3, r7
     45c:	e765      	b.n	32a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xaa>
     45e:	f1aa 0a02 	sub.w	sl, sl, #2
     462:	449c      	add	ip, r3
     464:	e7aa      	b.n	3bc <CONFIG_BT_DEVICE_APPEARANCE+0x7b>
     466:	3902      	subs	r1, #2
     468:	443d      	add	r5, r7
     46a:	e773      	b.n	354 <CONFIG_BT_DEVICE_APPEARANCE+0x13>
     46c:	3802      	subs	r0, #2
     46e:	449c      	add	ip, r3
     470:	e7b9      	b.n	3e6 <CONFIG_BT_DEVICE_APPEARANCE+0xa5>
     472:	4631      	mov	r1, r6
     474:	e6d7      	b.n	226 <CONFIG_UART_MUX_RX_STACK_SIZE+0x26>
     476:	bf00      	nop

00000478 <__aeabi_idiv0>:
     478:	4770      	bx	lr
     47a:	bf00      	nop
     47c:	0000      	movs	r0, r0
	...

00000480 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
     480:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
     482:	4d5f      	ldr	r5, [pc, #380]	; (600 <CONFIG_BT_COMPANY_ID+0xf>)
     484:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
     488:	6899      	ldr	r1, [r3, #8]
     48a:	f011 0101 	ands.w	r1, r1, #1
     48e:	d11c      	bne.n	4ca <bt_init+0x4a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
     490:	f640 4003 	movw	r0, #3075	; 0xc03
     494:	aa01      	add	r2, sp, #4
     496:	f004 f841 	bl	451c <bt_hci_cmd_send_sync>
		if (err) {
     49a:	4604      	mov	r4, r0
     49c:	2800      	cmp	r0, #0
     49e:	f040 80ac 	bne.w	5fa <CONFIG_BT_COMPANY_ID+0x9>
		hci_reset_complete(rsp);
     4a2:	9b01      	ldr	r3, [sp, #4]
	u8_t status = buf->data[0];
     4a4:	689b      	ldr	r3, [r3, #8]
	if (status) {
     4a6:	781b      	ldrb	r3, [r3, #0]
     4a8:	b963      	cbnz	r3, 4c4 <bt_init+0x44>
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
     4aa:	f105 0398 	add.w	r3, r5, #152	; 0x98
     4ae:	4618      	mov	r0, r3
     4b0:	f011 ff54 	bl	1235c <atomic_get>
     4b4:	f000 0005 	and.w	r0, r0, #5
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     4b8:	e8d3 2fef 	ldaex	r2, [r3]
     4bc:	e8c3 0fe1 	stlex	r1, r0, [r3]
     4c0:	2900      	cmp	r1, #0
     4c2:	d1f9      	bne.n	4b8 <bt_init+0x38>
		net_buf_unref(rsp);
     4c4:	9801      	ldr	r0, [sp, #4]
     4c6:	f00b fad5 	bl	ba74 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
     4ca:	2100      	movs	r1, #0
     4cc:	f241 0003 	movw	r0, #4099	; 0x1003
     4d0:	aa01      	add	r2, sp, #4
     4d2:	f004 f823 	bl	451c <bt_hci_cmd_send_sync>
	if (err) {
     4d6:	4604      	mov	r4, r0
     4d8:	2800      	cmp	r0, #0
     4da:	f040 808e 	bne.w	5fa <CONFIG_BT_COMPANY_ID+0x9>
	read_local_features_complete(rsp);
     4de:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
     4e0:	2208      	movs	r2, #8
     4e2:	6899      	ldr	r1, [r3, #8]
     4e4:	4847      	ldr	r0, [pc, #284]	; (604 <CONFIG_BT_COMPANY_ID+0x13>)
     4e6:	3101      	adds	r1, #1
     4e8:	f011 fe39 	bl	1215e <memcpy>
	net_buf_unref(rsp);
     4ec:	9801      	ldr	r0, [sp, #4]
     4ee:	f00b fac1 	bl	ba74 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
     4f2:	4621      	mov	r1, r4
     4f4:	f241 0001 	movw	r0, #4097	; 0x1001
     4f8:	aa01      	add	r2, sp, #4
     4fa:	f004 f80f 	bl	451c <bt_hci_cmd_send_sync>
	if (err) {
     4fe:	4604      	mov	r4, r0
     500:	2800      	cmp	r0, #0
     502:	d17a      	bne.n	5fa <CONFIG_BT_COMPANY_ID+0x9>
	read_local_ver_complete(rsp);
     504:	9801      	ldr	r0, [sp, #4]
     506:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
     508:	785a      	ldrb	r2, [r3, #1]
     50a:	f885 2038 	strb.w	r2, [r5, #56]	; 0x38
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
     50e:	78d9      	ldrb	r1, [r3, #3]
     510:	789a      	ldrb	r2, [r3, #2]
     512:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     516:	876a      	strh	r2, [r5, #58]	; 0x3a
	bt_dev.lmp_version = rp->lmp_version;
     518:	791a      	ldrb	r2, [r3, #4]
     51a:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
     51e:	7a19      	ldrb	r1, [r3, #8]
     520:	79da      	ldrb	r2, [r3, #7]
     522:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     526:	87aa      	strh	r2, [r5, #60]	; 0x3c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
     528:	795a      	ldrb	r2, [r3, #5]
     52a:	799b      	ldrb	r3, [r3, #6]
     52c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
     530:	87eb      	strh	r3, [r5, #62]	; 0x3e
	net_buf_unref(rsp);
     532:	f00b fa9f 	bl	ba74 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
     536:	4621      	mov	r1, r4
     538:	f241 0002 	movw	r0, #4098	; 0x1002
     53c:	aa01      	add	r2, sp, #4
     53e:	f003 ffed 	bl	451c <bt_hci_cmd_send_sync>
	if (err) {
     542:	4604      	mov	r4, r0
     544:	2800      	cmp	r0, #0
     546:	d158      	bne.n	5fa <CONFIG_BT_COMPANY_ID+0x9>
	read_supported_commands_complete(rsp);
     548:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
     54a:	2240      	movs	r2, #64	; 0x40
     54c:	6899      	ldr	r1, [r3, #8]
     54e:	482e      	ldr	r0, [pc, #184]	; (608 <CONFIG_BT_COMPANY_ID+0x17>)
     550:	3101      	adds	r1, #1
     552:	f011 fe04 	bl	1215e <memcpy>
	net_buf_unref(rsp);
     556:	9801      	ldr	r0, [sp, #4]
     558:	f00b fa8c 	bl	ba74 <net_buf_unref>
		err = prng_init();
     55c:	f005 fc18 	bl	5d90 <prng_init>
		if (err) {
     560:	4604      	mov	r4, r0
     562:	2800      	cmp	r0, #0
     564:	d149      	bne.n	5fa <CONFIG_BT_COMPANY_ID+0x9>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
     566:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
     56a:	069a      	lsls	r2, r3, #26
     56c:	d40e      	bmi.n	58c <bt_init+0x10c>
		BT_WARN("Controller to host flow control not supported");
     56e:	2157      	movs	r1, #87	; 0x57
     570:	4826      	ldr	r0, [pc, #152]	; (60c <CONFIG_BT_COMPANY_ID+0x1b>)
     572:	f010 fc33 	bl	10ddc <printk>
	if (!BT_FEAT_LE(bt_dev.features)) {
     576:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
     57a:	065b      	lsls	r3, r3, #25
     57c:	d44a      	bmi.n	614 <CONFIG_BT_COMPANY_ID+0x23>
		BT_ERR("Non-LE capable controller detected!");
     57e:	2145      	movs	r1, #69	; 0x45
     580:	4823      	ldr	r0, [pc, #140]	; (610 <CONFIG_BT_COMPANY_ID+0x1f>)
     582:	f010 fc2b 	bl	10ddc <printk>
		return -ENODEV;
     586:	f06f 0412 	mvn.w	r4, #18
     58a:	e036      	b.n	5fa <CONFIG_BT_COMPANY_ID+0x9>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
     58c:	2107      	movs	r1, #7
     58e:	f640 4033 	movw	r0, #3123	; 0xc33
     592:	f003 ff79 	bl	4488 <bt_hci_cmd_create>
	if (!buf) {
     596:	4607      	mov	r7, r0
     598:	b910      	cbnz	r0, 5a0 <bt_init+0x120>
		return -ENOBUFS;
     59a:	f06f 0436 	mvn.w	r4, #54	; 0x36
     59e:	e02c      	b.n	5fa <CONFIG_BT_COMPANY_ID+0x9>
	hbs = net_buf_add(buf, sizeof(*hbs));
     5a0:	2107      	movs	r1, #7
     5a2:	3008      	adds	r0, #8
     5a4:	f00b fbd8 	bl	bd58 <net_buf_simple_add>
	(void)memset(hbs, 0, sizeof(*hbs));
     5a8:	4621      	mov	r1, r4
     5aa:	2207      	movs	r2, #7
	hbs = net_buf_add(buf, sizeof(*hbs));
     5ac:	4606      	mov	r6, r0
	(void)memset(hbs, 0, sizeof(*hbs));
     5ae:	f011 fe01 	bl	121b4 <memset>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
     5b2:	f06f 0304 	mvn.w	r3, #4
     5b6:	7033      	strb	r3, [r6, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
     5b8:	2306      	movs	r3, #6
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
     5ba:	4622      	mov	r2, r4
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
     5bc:	7074      	strb	r4, [r6, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
     5be:	7134      	strb	r4, [r6, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
     5c0:	4639      	mov	r1, r7
     5c2:	f640 4033 	movw	r0, #3123	; 0xc33
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
     5c6:	70f3      	strb	r3, [r6, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
     5c8:	f003 ffa8 	bl	451c <bt_hci_cmd_send_sync>
	if (err) {
     5cc:	4604      	mov	r4, r0
     5ce:	b9a0      	cbnz	r0, 5fa <CONFIG_BT_COMPANY_ID+0x9>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
     5d0:	2101      	movs	r1, #1
     5d2:	f640 4031 	movw	r0, #3121	; 0xc31
     5d6:	f003 ff57 	bl	4488 <bt_hci_cmd_create>
	if (!buf) {
     5da:	4606      	mov	r6, r0
     5dc:	2800      	cmp	r0, #0
     5de:	d0dc      	beq.n	59a <bt_init+0x11a>
	net_buf_add_u8(buf, BT_HCI_CTL_TO_HOST_FLOW_ENABLE);
     5e0:	2101      	movs	r1, #1
     5e2:	3008      	adds	r0, #8
     5e4:	f013 fd2a 	bl	1403c <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
     5e8:	4622      	mov	r2, r4
     5ea:	4631      	mov	r1, r6
     5ec:	f640 4031 	movw	r0, #3121	; 0xc31
     5f0:	f003 ff94 	bl	451c <bt_hci_cmd_send_sync>
	if (err) {
     5f4:	4604      	mov	r4, r0
     5f6:	2800      	cmp	r0, #0
     5f8:	d0bd      	beq.n	576 <bt_init+0xf6>
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
     5fa:	4620      	mov	r0, r4
     5fc:	b003      	add	sp, #12
     5fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
     600:	20000000 	.word	0x20000000
     604:	20000040 	.word	0x20000040
     608:	20000048 	.word	0x20000048
     60c:	00017aa4 	.word	0x00017aa4
     610:	00017ad7 	.word	0x00017ad7
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
     614:	2100      	movs	r1, #0
     616:	f242 0003 	movw	r0, #8195	; 0x2003
     61a:	aa01      	add	r2, sp, #4
     61c:	f003 ff7e 	bl	451c <bt_hci_cmd_send_sync>
	if (err) {
     620:	4604      	mov	r4, r0
     622:	2800      	cmp	r0, #0
     624:	d1e9      	bne.n	5fa <CONFIG_BT_COMPANY_ID+0x9>
	read_le_features_complete(rsp);
     626:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
     628:	2208      	movs	r2, #8
     62a:	6899      	ldr	r1, [r3, #8]
     62c:	48b8      	ldr	r0, [pc, #736]	; (910 <CONFIG_BT_RX_STACK_SIZE+0x78>)
     62e:	3101      	adds	r1, #1
     630:	f011 fd95 	bl	1215e <memcpy>
	net_buf_unref(rsp);
     634:	9801      	ldr	r0, [sp, #4]
     636:	f00b fa1d 	bl	ba74 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
     63a:	4621      	mov	r1, r4
     63c:	f242 0002 	movw	r0, #8194	; 0x2002
     640:	aa01      	add	r2, sp, #4
     642:	f003 ff6b 	bl	451c <bt_hci_cmd_send_sync>
	if (err) {
     646:	4604      	mov	r4, r0
     648:	2800      	cmp	r0, #0
     64a:	d1d6      	bne.n	5fa <CONFIG_BT_COMPANY_ID+0x9>
	le_read_buffer_size_complete(rsp);
     64c:	9b01      	ldr	r3, [sp, #4]
     64e:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
     650:	f8b3 2001 	ldrh.w	r2, [r3, #1]
     654:	b291      	uxth	r1, r2
     656:	f8a5 20b0 	strh.w	r2, [r5, #176]	; 0xb0
	if (!bt_dev.le.mtu) {
     65a:	b121      	cbz	r1, 666 <CONFIG_BT_COMPANY_ID+0x75>
	k_sem_init(&bt_dev.le.pkts, rp->le_max_num, rp->le_max_num);
     65c:	78da      	ldrb	r2, [r3, #3]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
     65e:	48ad      	ldr	r0, [pc, #692]	; (914 <CONFIG_BT_RX_STACK_SIZE+0x7c>)
     660:	4611      	mov	r1, r2
     662:	f014 fcff 	bl	15064 <z_impl_k_sem_init>
	net_buf_unref(rsp);
     666:	9801      	ldr	r0, [sp, #4]
     668:	f00b fa04 	bl	ba74 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
     66c:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
     670:	f016 0620 	ands.w	r6, r6, #32
     674:	f000 80f1 	beq.w	85a <CONFIG_HEAP_MEM_POOL_SIZE+0x5a>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
     678:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
     67c:	071f      	lsls	r7, r3, #28
     67e:	d511      	bpl.n	6a4 <CONFIG_BT_COMPANY_ID+0xb3>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
     680:	2100      	movs	r1, #0
     682:	f242 001c 	movw	r0, #8220	; 0x201c
     686:	aa01      	add	r2, sp, #4
     688:	f003 ff48 	bl	451c <bt_hci_cmd_send_sync>
		if (err) {
     68c:	4604      	mov	r4, r0
     68e:	2800      	cmp	r0, #0
     690:	d1b3      	bne.n	5fa <CONFIG_BT_COMPANY_ID+0x9>
		le_read_supp_states_complete(rsp);
     692:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
     694:	6883      	ldr	r3, [r0, #8]
     696:	f853 2f01 	ldr.w	r2, [r3, #1]!
     69a:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
     69c:	e9c5 232a 	strd	r2, r3, [r5, #168]	; 0xa8
		net_buf_unref(rsp);
     6a0:	f00b f9e8 	bl	ba74 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
     6a4:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
     6a8:	069e      	lsls	r6, r3, #26
     6aa:	d523      	bpl.n	6f4 <CONFIG_BT_COMPANY_ID+0x103>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
     6ac:	4668      	mov	r0, sp
     6ae:	f10d 0102 	add.w	r1, sp, #2
     6b2:	f003 ffa1 	bl	45f8 <hci_le_read_max_data_len>
		if (err) {
     6b6:	4604      	mov	r4, r0
     6b8:	2800      	cmp	r0, #0
     6ba:	d19e      	bne.n	5fa <CONFIG_BT_COMPANY_ID+0x9>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     6bc:	2104      	movs	r1, #4
     6be:	f242 0024 	movw	r0, #8228	; 0x2024
     6c2:	f003 fee1 	bl	4488 <bt_hci_cmd_create>
		if (!buf) {
     6c6:	4606      	mov	r6, r0
     6c8:	2800      	cmp	r0, #0
     6ca:	f43f af66 	beq.w	59a <bt_init+0x11a>
		cp = net_buf_add(buf, sizeof(*cp));
     6ce:	2104      	movs	r1, #4
     6d0:	3008      	adds	r0, #8
     6d2:	f00b fb41 	bl	bd58 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
     6d6:	f8bd 3000 	ldrh.w	r3, [sp]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     6da:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
     6dc:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
     6de:	f8bd 3002 	ldrh.w	r3, [sp, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     6e2:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
     6e4:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     6e6:	f242 0024 	movw	r0, #8228	; 0x2024
     6ea:	f003 ff17 	bl	451c <bt_hci_cmd_send_sync>
		if (err) {
     6ee:	4604      	mov	r4, r0
     6f0:	2800      	cmp	r0, #0
     6f2:	d182      	bne.n	5fa <CONFIG_BT_COMPANY_ID+0x9>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
     6f4:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
     6f8:	065c      	lsls	r4, r3, #25
     6fa:	d510      	bpl.n	71e <CONFIG_BT_COMPANY_ID+0x12d>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
     6fc:	2100      	movs	r1, #0
     6fe:	f242 002a 	movw	r0, #8234	; 0x202a
     702:	aa01      	add	r2, sp, #4
     704:	f003 ff0a 	bl	451c <bt_hci_cmd_send_sync>
		if (err) {
     708:	4604      	mov	r4, r0
     70a:	2800      	cmp	r0, #0
     70c:	f47f af75 	bne.w	5fa <CONFIG_BT_COMPANY_ID+0x9>
		le_read_resolving_list_size_complete(rsp);
     710:	9801      	ldr	r0, [sp, #4]
	bt_dev.le.rl_size = rp->rl_size;
     712:	6883      	ldr	r3, [r0, #8]
     714:	785b      	ldrb	r3, [r3, #1]
     716:	f885 30cc 	strb.w	r3, [r5, #204]	; 0xcc
		net_buf_unref(rsp);
     71a:	f00b f9ab 	bl	ba74 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
     71e:	2108      	movs	r1, #8
     720:	f242 0001 	movw	r0, #8193	; 0x2001
     724:	f003 feb0 	bl	4488 <bt_hci_cmd_create>
	if (!buf) {
     728:	4604      	mov	r4, r0
     72a:	2800      	cmp	r0, #0
     72c:	f43f af35 	beq.w	59a <bt_init+0x11a>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
     730:	2108      	movs	r1, #8
     732:	4408      	add	r0, r1
     734:	f00b fb10 	bl	bd58 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
     738:	f895 10a0 	ldrb.w	r1, [r5, #160]	; 0xa0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
     73c:	f240 2302 	movw	r3, #514	; 0x202
     740:	f011 0f40 	tst.w	r1, #64	; 0x40
     744:	bf08      	it	eq
     746:	2303      	moveq	r3, #3
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
     748:	4602      	mov	r2, r0
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
     74a:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
     74c:	bf4c      	ite	mi
     74e:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
     752:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
     756:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
     75a:	068f      	lsls	r7, r1, #26
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
     75c:	bf48      	it	mi
     75e:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
     762:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     766:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
     76a:	bf18      	it	ne
     76c:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     770:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     774:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
     776:	bf48      	it	mi
     778:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     77c:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
     77e:	bf08      	it	eq
     780:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
     784:	2100      	movs	r1, #0
     786:	f011 fe19 	bl	123bc <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
     78a:	4621      	mov	r1, r4
     78c:	2200      	movs	r2, #0
     78e:	f242 0001 	movw	r0, #8193	; 0x2001
     792:	f003 fec3 	bl	451c <bt_hci_cmd_send_sync>
	if (err) {
     796:	4604      	mov	r4, r0
     798:	2800      	cmp	r0, #0
     79a:	f47f af2e 	bne.w	5fa <CONFIG_BT_COMPANY_ID+0x9>
	if (BT_FEAT_BREDR(bt_dev.features)) {
     79e:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
     7a2:	0698      	lsls	r0, r3, #26
     7a4:	d41e      	bmi.n	7e4 <CONFIG_BT_COMPANY_ID+0x1f3>
	if (bt_dev.le.mtu) {
     7a6:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
     7aa:	b9d9      	cbnz	r1, 7e4 <CONFIG_BT_COMPANY_ID+0x1f3>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
     7ac:	f241 0005 	movw	r0, #4101	; 0x1005
     7b0:	aa01      	add	r2, sp, #4
     7b2:	f003 feb3 	bl	451c <bt_hci_cmd_send_sync>
	if (err) {
     7b6:	4604      	mov	r4, r0
     7b8:	2800      	cmp	r0, #0
     7ba:	f47f af1e 	bne.w	5fa <CONFIG_BT_COMPANY_ID+0x9>
	if (bt_dev.le.mtu) {
     7be:	f8b5 30b0 	ldrh.w	r3, [r5, #176]	; 0xb0
     7c2:	b963      	cbnz	r3, 7de <CONFIG_BT_COMPANY_ID+0x1ed>
	read_buffer_size_complete(rsp);
     7c4:	9b01      	ldr	r3, [sp, #4]
     7c6:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
     7c8:	785a      	ldrb	r2, [r3, #1]
     7ca:	7899      	ldrb	r1, [r3, #2]
     7cc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     7d0:	f8a5 20b0 	strh.w	r2, [r5, #176]	; 0xb0
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
     7d4:	889a      	ldrh	r2, [r3, #4]
     7d6:	484f      	ldr	r0, [pc, #316]	; (914 <CONFIG_BT_RX_STACK_SIZE+0x7c>)
     7d8:	4611      	mov	r1, r2
     7da:	f014 fc43 	bl	15064 <z_impl_k_sem_init>
	net_buf_unref(rsp);
     7de:	9801      	ldr	r0, [sp, #4]
     7e0:	f00b f948 	bl	ba74 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
     7e4:	2108      	movs	r1, #8
     7e6:	f640 4001 	movw	r0, #3073	; 0xc01
     7ea:	f003 fe4d 	bl	4488 <bt_hci_cmd_create>
	if (!buf) {
     7ee:	4604      	mov	r4, r0
     7f0:	2800      	cmp	r0, #0
     7f2:	f43f aed2 	beq.w	59a <bt_init+0x11a>
	ev = net_buf_add(buf, sizeof(*ev));
     7f6:	2108      	movs	r1, #8
     7f8:	4408      	add	r0, r1
     7fa:	f00b faad 	bl	bd58 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     7fe:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
	ev = net_buf_add(buf, sizeof(*ev));
     802:	4602      	mov	r2, r0
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     804:	07d9      	lsls	r1, r3, #31
     806:	d543      	bpl.n	890 <CONFIG_HEAP_MEM_POOL_SIZE+0x90>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
     808:	a13f      	add	r1, pc, #252	; (adr r1, 908 <CONFIG_BT_RX_STACK_SIZE+0x70>)
     80a:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
     80e:	f011 fdd5 	bl	123bc <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
     812:	4621      	mov	r1, r4
     814:	2200      	movs	r2, #0
     816:	f640 4001 	movw	r0, #3073	; 0xc01
     81a:	f003 fe7f 	bl	451c <bt_hci_cmd_send_sync>
	if (err) {
     81e:	4604      	mov	r4, r0
     820:	2800      	cmp	r0, #0
     822:	f47f aeea 	bne.w	5fa <CONFIG_BT_COMPANY_ID+0x9>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
     826:	4601      	mov	r1, r0
     828:	aa01      	add	r2, sp, #4
     82a:	f64f 4001 	movw	r0, #64513	; 0xfc01
     82e:	f003 fe75 	bl	451c <bt_hci_cmd_send_sync>
	if (err) {
     832:	4604      	mov	r4, r0
     834:	b380      	cbz	r0, 898 <CONFIG_BT_RX_STACK_SIZE>
		BT_WARN("Vendor HCI extensions not available");
     836:	2157      	movs	r1, #87	; 0x57
     838:	4837      	ldr	r0, [pc, #220]	; (918 <CONFIG_BT_RX_STACK_SIZE+0x80>)
			BT_WARN("Failed to read supported vendor features");
     83a:	f010 facf 	bl	10ddc <printk>
		err = bt_conn_init();
     83e:	f006 f8f9 	bl	6a34 <bt_conn_init>
		if (err) {
     842:	4604      	mov	r4, r0
     844:	2800      	cmp	r0, #0
     846:	f47f aed8 	bne.w	5fa <CONFIG_BT_COMPANY_ID+0x9>
		if (!bt_dev.id_count) {
     84a:	79eb      	ldrb	r3, [r5, #7]
     84c:	2b00      	cmp	r3, #0
     84e:	d154      	bne.n	8fa <CONFIG_BT_RX_STACK_SIZE+0x62>
			BT_INFO("No ID address. App must call settings_load()");
     850:	2149      	movs	r1, #73	; 0x49
     852:	4832      	ldr	r0, [pc, #200]	; (91c <CONFIG_BT_RX_STACK_SIZE+0x84>)
     854:	f010 fac2 	bl	10ddc <printk>
			return 0;
     858:	e6cf      	b.n	5fa <CONFIG_BT_COMPANY_ID+0x9>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
     85a:	2102      	movs	r1, #2
     85c:	f640 406d 	movw	r0, #3181	; 0xc6d
     860:	f003 fe12 	bl	4488 <bt_hci_cmd_create>
		if (!buf) {
     864:	4604      	mov	r4, r0
     866:	2800      	cmp	r0, #0
     868:	f43f ae97 	beq.w	59a <bt_init+0x11a>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
     86c:	2102      	movs	r1, #2
     86e:	3008      	adds	r0, #8
     870:	f00b fa72 	bl	bd58 <net_buf_simple_add>
		cp_le->le = 0x01;
     874:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
     876:	4621      	mov	r1, r4
		cp_le->le = 0x01;
     878:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
     87a:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
     87c:	4632      	mov	r2, r6
     87e:	f640 406d 	movw	r0, #3181	; 0xc6d
     882:	f003 fe4b 	bl	451c <bt_hci_cmd_send_sync>
		if (err) {
     886:	4604      	mov	r4, r0
     888:	2800      	cmp	r0, #0
     88a:	f43f aef5 	beq.w	678 <CONFIG_BT_COMPANY_ID+0x87>
     88e:	e6b4      	b.n	5fa <CONFIG_BT_COMPANY_ID+0x9>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
     890:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
     894:	4822      	ldr	r0, [pc, #136]	; (920 <CONFIG_BT_RX_STACK_SIZE+0x88>)
     896:	e7ba      	b.n	80e <CONFIG_HEAP_MEM_POOL_SIZE+0xe>
	net_buf_unref(rsp);
     898:	9801      	ldr	r0, [sp, #4]
     89a:	f00b f8eb 	bl	ba74 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
     89e:	4621      	mov	r1, r4
     8a0:	f64f 4002 	movw	r0, #64514	; 0xfc02
     8a4:	aa01      	add	r2, sp, #4
     8a6:	f003 fe39 	bl	451c <bt_hci_cmd_send_sync>
	if (err) {
     8aa:	4604      	mov	r4, r0
     8ac:	b110      	cbz	r0, 8b4 <CONFIG_BT_RX_STACK_SIZE+0x1c>
		BT_WARN("Failed to read supported vendor commands");
     8ae:	2157      	movs	r1, #87	; 0x57
     8b0:	481c      	ldr	r0, [pc, #112]	; (924 <CONFIG_BT_RX_STACK_SIZE+0x8c>)
     8b2:	e7c2      	b.n	83a <CONFIG_HEAP_MEM_POOL_SIZE+0x3a>
	rp.cmds = (void *)rsp->data;
     8b4:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
     8b6:	2202      	movs	r2, #2
     8b8:	6899      	ldr	r1, [r3, #8]
     8ba:	481b      	ldr	r0, [pc, #108]	; (928 <CONFIG_BT_RX_STACK_SIZE+0x90>)
     8bc:	3101      	adds	r1, #1
     8be:	f011 fc4e 	bl	1215e <memcpy>
	net_buf_unref(rsp);
     8c2:	9801      	ldr	r0, [sp, #4]
     8c4:	f00b f8d6 	bl	ba74 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
     8c8:	f895 3089 	ldrb.w	r3, [r5, #137]	; 0x89
     8cc:	075b      	lsls	r3, r3, #29
     8ce:	d5b6      	bpl.n	83e <CONFIG_HEAP_MEM_POOL_SIZE+0x3e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
     8d0:	4621      	mov	r1, r4
     8d2:	f64f 4003 	movw	r0, #64515	; 0xfc03
     8d6:	aa01      	add	r2, sp, #4
     8d8:	f003 fe20 	bl	451c <bt_hci_cmd_send_sync>
		if (err) {
     8dc:	b110      	cbz	r0, 8e4 <CONFIG_BT_RX_STACK_SIZE+0x4c>
			BT_WARN("Failed to read supported vendor features");
     8de:	2157      	movs	r1, #87	; 0x57
     8e0:	4812      	ldr	r0, [pc, #72]	; (92c <CONFIG_BT_RX_STACK_SIZE+0x94>)
     8e2:	e7aa      	b.n	83a <CONFIG_HEAP_MEM_POOL_SIZE+0x3a>
		memcpy(bt_dev.vs_features, rp.feat->features,
     8e4:	2201      	movs	r2, #1
		rp.feat = (void *)rsp->data;
     8e6:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
     8e8:	4811      	ldr	r0, [pc, #68]	; (930 <CONFIG_BT_RX_STACK_SIZE+0x98>)
     8ea:	6899      	ldr	r1, [r3, #8]
     8ec:	4411      	add	r1, r2
     8ee:	f011 fc36 	bl	1215e <memcpy>
		net_buf_unref(rsp);
     8f2:	9801      	ldr	r0, [sp, #4]
     8f4:	f00b f8be 	bl	ba74 <net_buf_unref>
     8f8:	e7a1      	b.n	83e <CONFIG_HEAP_MEM_POOL_SIZE+0x3e>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
     8fa:	2104      	movs	r1, #4
     8fc:	480d      	ldr	r0, [pc, #52]	; (934 <CONFIG_BT_RX_STACK_SIZE+0x9c>)
     8fe:	f011 fd33 	bl	12368 <atomic_or>
	bt_finalize_init();
     902:	f004 fce9 	bl	52d8 <bt_finalize_init>
	return 0;
     906:	e678      	b.n	5fa <CONFIG_BT_COMPANY_ID+0x9>
     908:	02008890 	.word	0x02008890
     90c:	20008000 	.word	0x20008000
     910:	200000a0 	.word	0x200000a0
     914:	200000b4 	.word	0x200000b4
     918:	00017b00 	.word	0x00017b00
     91c:	00017b85 	.word	0x00017b85
     920:	02008810 	.word	0x02008810
     924:	00017b29 	.word	0x00017b29
     928:	20000089 	.word	0x20000089
     92c:	00017b57 	.word	0x00017b57
     930:	20000088 	.word	0x20000088
     934:	20000098 	.word	0x20000098

00000938 <bt_addr_le_to_str.constprop.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     938:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
     93a:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     93c:	b08a      	sub	sp, #40	; 0x28
     93e:	4604      	mov	r4, r0
     940:	460e      	mov	r6, r1
     942:	ad07      	add	r5, sp, #28
     944:	2b03      	cmp	r3, #3
     946:	d820      	bhi.n	98a <bt_addr_le_to_str.constprop.0+0x52>
     948:	e8df f003 	tbb	[pc, r3]
     94c:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
     950:	4911      	ldr	r1, [pc, #68]	; (998 <bt_addr_le_to_str.constprop.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
     952:	4628      	mov	r0, r5
     954:	f011 fbb4 	bl	120c0 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
     958:	7863      	ldrb	r3, [r4, #1]
     95a:	211e      	movs	r1, #30
     95c:	9304      	str	r3, [sp, #16]
     95e:	78a3      	ldrb	r3, [r4, #2]
     960:	4630      	mov	r0, r6
     962:	9303      	str	r3, [sp, #12]
     964:	78e3      	ldrb	r3, [r4, #3]
     966:	4a0d      	ldr	r2, [pc, #52]	; (99c <bt_addr_le_to_str.constprop.0+0x64>)
     968:	9302      	str	r3, [sp, #8]
     96a:	7923      	ldrb	r3, [r4, #4]
     96c:	9505      	str	r5, [sp, #20]
     96e:	9301      	str	r3, [sp, #4]
     970:	7963      	ldrb	r3, [r4, #5]
     972:	9300      	str	r3, [sp, #0]
     974:	79a3      	ldrb	r3, [r4, #6]
     976:	f010 fa3e 	bl	10df6 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
     97a:	b00a      	add	sp, #40	; 0x28
     97c:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
     97e:	4908      	ldr	r1, [pc, #32]	; (9a0 <bt_addr_le_to_str.constprop.0+0x68>)
     980:	e7e7      	b.n	952 <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "public-id");
     982:	4908      	ldr	r1, [pc, #32]	; (9a4 <bt_addr_le_to_str.constprop.0+0x6c>)
     984:	e7e5      	b.n	952 <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "random-id");
     986:	4908      	ldr	r1, [pc, #32]	; (9a8 <bt_addr_le_to_str.constprop.0+0x70>)
     988:	e7e3      	b.n	952 <bt_addr_le_to_str.constprop.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
     98a:	210a      	movs	r1, #10
     98c:	4628      	mov	r0, r5
     98e:	4a07      	ldr	r2, [pc, #28]	; (9ac <bt_addr_le_to_str.constprop.0+0x74>)
     990:	f010 fa31 	bl	10df6 <snprintk>
		break;
     994:	e7e0      	b.n	958 <bt_addr_le_to_str.constprop.0+0x20>
     996:	bf00      	nop
     998:	00015f94 	.word	0x00015f94
     99c:	00015fbd 	.word	0x00015fbd
     9a0:	00015f9b 	.word	0x00015f9b
     9a4:	00015fa2 	.word	0x00015fa2
     9a8:	00015fac 	.word	0x00015fac
     9ac:	00015fb6 	.word	0x00015fb6

000009b0 <disconnected>:
	k_sem_give(&ble_init_ok);
	dk_set_led_on(CON_STATUS_LED);
}

static void disconnected(struct bt_conn *conn, u8_t reason)
{
     9b0:	b510      	push	{r4, lr}
     9b2:	460c      	mov	r4, r1
     9b4:	b088      	sub	sp, #32
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     9b6:	f011 ff34 	bl	12822 <bt_conn_get_dst>
     9ba:	4669      	mov	r1, sp
     9bc:	f7ff ffbc 	bl	938 <bt_addr_le_to_str.constprop.0>

	printk("Disconnected: %s (reason %u)\n", addr, reason);
     9c0:	4622      	mov	r2, r4

	if (auth_conn) {
     9c2:	4c0b      	ldr	r4, [pc, #44]	; (9f0 <disconnected+0x40>)
	printk("Disconnected: %s (reason %u)\n", addr, reason);
     9c4:	480b      	ldr	r0, [pc, #44]	; (9f4 <disconnected+0x44>)
     9c6:	4669      	mov	r1, sp
     9c8:	f010 fa08 	bl	10ddc <printk>
	if (auth_conn) {
     9cc:	6820      	ldr	r0, [r4, #0]
     9ce:	b118      	cbz	r0, 9d8 <disconnected+0x28>
		bt_conn_unref(auth_conn);
     9d0:	f011 ff16 	bl	12800 <bt_conn_unref>
		auth_conn = NULL;
     9d4:	2300      	movs	r3, #0
     9d6:	6023      	str	r3, [r4, #0]
	}

	if (current_conn) {
     9d8:	4c07      	ldr	r4, [pc, #28]	; (9f8 <disconnected+0x48>)
     9da:	6820      	ldr	r0, [r4, #0]
     9dc:	b130      	cbz	r0, 9ec <disconnected+0x3c>
		bt_conn_unref(current_conn);
     9de:	f011 ff0f 	bl	12800 <bt_conn_unref>
		current_conn = NULL;
     9e2:	2300      	movs	r3, #0
		dk_set_led_off(CON_STATUS_LED);
     9e4:	2001      	movs	r0, #1
		current_conn = NULL;
     9e6:	6023      	str	r3, [r4, #0]
		dk_set_led_off(CON_STATUS_LED);
     9e8:	f013 fe8d 	bl	14706 <dk_set_led_off>
	}
}
     9ec:	b008      	add	sp, #32
     9ee:	bd10      	pop	{r4, pc}
     9f0:	200009d8 	.word	0x200009d8
     9f4:	00015fe0 	.word	0x00015fe0
     9f8:	200009dc 	.word	0x200009dc

000009fc <auth_passkey_confirm>:

	printk("Passkey for %s: %06u\n", addr, passkey);
}

static void auth_passkey_confirm(struct bt_conn *conn, unsigned int passkey)
{
     9fc:	b530      	push	{r4, r5, lr}
     9fe:	b089      	sub	sp, #36	; 0x24
     a00:	460c      	mov	r4, r1
     a02:	4605      	mov	r5, r0
	char addr[BT_ADDR_LE_STR_LEN];

	auth_conn = bt_conn_ref(conn);
     a04:	f011 fef5 	bl	127f2 <bt_conn_ref>
     a08:	4b08      	ldr	r3, [pc, #32]	; (a2c <auth_passkey_confirm+0x30>)
     a0a:	6018      	str	r0, [r3, #0]

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     a0c:	4628      	mov	r0, r5
     a0e:	f011 ff08 	bl	12822 <bt_conn_get_dst>
     a12:	4669      	mov	r1, sp
     a14:	f7ff ff90 	bl	938 <bt_addr_le_to_str.constprop.0>

	printk("Passkey for %s: %06u\n", addr, passkey);
     a18:	4622      	mov	r2, r4
     a1a:	4669      	mov	r1, sp
     a1c:	4804      	ldr	r0, [pc, #16]	; (a30 <auth_passkey_confirm+0x34>)
     a1e:	f010 f9dd 	bl	10ddc <printk>
	printk("Press Button 1 to confirm, Button 2 to reject.\n");
     a22:	4804      	ldr	r0, [pc, #16]	; (a34 <auth_passkey_confirm+0x38>)
     a24:	f010 f9da 	bl	10ddc <printk>
}
     a28:	b009      	add	sp, #36	; 0x24
     a2a:	bd30      	pop	{r4, r5, pc}
     a2c:	200009d8 	.word	0x200009d8
     a30:	00015ffe 	.word	0x00015ffe
     a34:	00016014 	.word	0x00016014

00000a38 <pairing_confirm>:
	printk("Pairing cancelled: %s\n", addr);
}


static void pairing_confirm(struct bt_conn *conn)
{
     a38:	b510      	push	{r4, lr}
     a3a:	4604      	mov	r4, r0
     a3c:	b088      	sub	sp, #32
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     a3e:	f011 fef0 	bl	12822 <bt_conn_get_dst>
     a42:	4669      	mov	r1, sp
     a44:	f7ff ff78 	bl	938 <bt_addr_le_to_str.constprop.0>

	bt_conn_auth_pairing_confirm(conn);
     a48:	4620      	mov	r0, r4
     a4a:	f005 ffad 	bl	69a8 <bt_conn_auth_pairing_confirm>

	printk("Pairing confirmed: %s\n", addr);
     a4e:	4669      	mov	r1, sp
     a50:	4802      	ldr	r0, [pc, #8]	; (a5c <pairing_confirm+0x24>)
     a52:	f010 f9c3 	bl	10ddc <printk>
}
     a56:	b008      	add	sp, #32
     a58:	bd10      	pop	{r4, pc}
     a5a:	bf00      	nop
     a5c:	00016044 	.word	0x00016044

00000a60 <security_changed>:
{
     a60:	b530      	push	{r4, r5, lr}
     a62:	4615      	mov	r5, r2
     a64:	b089      	sub	sp, #36	; 0x24
     a66:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     a68:	f011 fedb 	bl	12822 <bt_conn_get_dst>
     a6c:	4669      	mov	r1, sp
     a6e:	f7ff ff63 	bl	938 <bt_addr_le_to_str.constprop.0>
	if (!err) {
     a72:	b935      	cbnz	r5, a82 <security_changed+0x22>
		printk("Security changed: %s level %u\n", addr, level);
     a74:	4622      	mov	r2, r4
     a76:	4669      	mov	r1, sp
     a78:	4805      	ldr	r0, [pc, #20]	; (a90 <security_changed+0x30>)
     a7a:	f010 f9af 	bl	10ddc <printk>
}
     a7e:	b009      	add	sp, #36	; 0x24
     a80:	bd30      	pop	{r4, r5, pc}
		printk("Security failed: %s level %u err %d\n", addr, level,
     a82:	462b      	mov	r3, r5
     a84:	4622      	mov	r2, r4
     a86:	4669      	mov	r1, sp
     a88:	4802      	ldr	r0, [pc, #8]	; (a94 <security_changed+0x34>)
     a8a:	f010 f9a7 	bl	10ddc <printk>
}
     a8e:	e7f6      	b.n	a7e <security_changed+0x1e>
     a90:	0001605b 	.word	0x0001605b
     a94:	0001607a 	.word	0x0001607a

00000a98 <auth_passkey_display>:
{
     a98:	b510      	push	{r4, lr}
     a9a:	460c      	mov	r4, r1
     a9c:	b088      	sub	sp, #32
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     a9e:	f011 fec0 	bl	12822 <bt_conn_get_dst>
     aa2:	4669      	mov	r1, sp
     aa4:	f7ff ff48 	bl	938 <bt_addr_le_to_str.constprop.0>
	printk("Passkey for %s: %06u\n", addr, passkey);
     aa8:	4622      	mov	r2, r4
     aaa:	4669      	mov	r1, sp
     aac:	4802      	ldr	r0, [pc, #8]	; (ab8 <auth_passkey_display+0x20>)
     aae:	f010 f995 	bl	10ddc <printk>
}
     ab2:	b008      	add	sp, #32
     ab4:	bd10      	pop	{r4, pc}
     ab6:	bf00      	nop
     ab8:	00015ffe 	.word	0x00015ffe

00000abc <auth_cancel>:
{
     abc:	b500      	push	{lr}
     abe:	b089      	sub	sp, #36	; 0x24
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     ac0:	f011 feaf 	bl	12822 <bt_conn_get_dst>
     ac4:	4669      	mov	r1, sp
     ac6:	f7ff ff37 	bl	938 <bt_addr_le_to_str.constprop.0>
	printk("Pairing cancelled: %s\n", addr);
     aca:	4669      	mov	r1, sp
     acc:	4802      	ldr	r0, [pc, #8]	; (ad8 <auth_cancel+0x1c>)
     ace:	f010 f985 	bl	10ddc <printk>
}
     ad2:	b009      	add	sp, #36	; 0x24
     ad4:	f85d fb04 	ldr.w	pc, [sp], #4
     ad8:	0001609f 	.word	0x0001609f

00000adc <pairing_complete>:


static void pairing_complete(struct bt_conn *conn, bool bonded)
{
     adc:	b510      	push	{r4, lr}
     ade:	460c      	mov	r4, r1
     ae0:	b088      	sub	sp, #32
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     ae2:	f011 fe9e 	bl	12822 <bt_conn_get_dst>
     ae6:	4669      	mov	r1, sp
     ae8:	f7ff ff26 	bl	938 <bt_addr_le_to_str.constprop.0>

	printk("Pairing completed: %s, bonded: %d\n", addr, bonded);
     aec:	4622      	mov	r2, r4
     aee:	4669      	mov	r1, sp
     af0:	4802      	ldr	r0, [pc, #8]	; (afc <pairing_complete+0x20>)
     af2:	f010 f973 	bl	10ddc <printk>
}
     af6:	b008      	add	sp, #32
     af8:	bd10      	pop	{r4, pc}
     afa:	bf00      	nop
     afc:	000160b6 	.word	0x000160b6

00000b00 <pairing_failed>:


static void pairing_failed(struct bt_conn *conn, enum bt_security_err reason)
{
     b00:	b510      	push	{r4, lr}
     b02:	460c      	mov	r4, r1
     b04:	b088      	sub	sp, #32
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     b06:	f011 fe8c 	bl	12822 <bt_conn_get_dst>
     b0a:	4669      	mov	r1, sp
     b0c:	f7ff ff14 	bl	938 <bt_addr_le_to_str.constprop.0>

	printk("Pairing failed conn: %s, reason %d\n", addr, reason);
     b10:	4622      	mov	r2, r4
     b12:	4669      	mov	r1, sp
     b14:	4802      	ldr	r0, [pc, #8]	; (b20 <pairing_failed+0x20>)
     b16:	f010 f961 	bl	10ddc <printk>
}
     b1a:	b008      	add	sp, #32
     b1c:	bd10      	pop	{r4, pc}
     b1e:	bf00      	nop
     b20:	000160d9 	.word	0x000160d9

00000b24 <bt_receive_cb>:
static struct bt_conn_auth_cb conn_auth_callbacks;
#endif

static void bt_receive_cb(struct bt_conn *conn, const u8_t *const data,
			  u16_t len)
{
     b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char addr[BT_ADDR_LE_STR_LEN] = {0};
     b28:	2400      	movs	r4, #0
{
     b2a:	4607      	mov	r7, r0
     b2c:	b088      	sub	sp, #32
     b2e:	460e      	mov	r6, r1
     b30:	4615      	mov	r5, r2
	char addr[BT_ADDR_LE_STR_LEN] = {0};
     b32:	4621      	mov	r1, r4
     b34:	221a      	movs	r2, #26
     b36:	a801      	add	r0, sp, #4
     b38:	9400      	str	r4, [sp, #0]
     b3a:	f011 fb3b 	bl	121b4 <memset>

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, ARRAY_SIZE(addr));
     b3e:	4638      	mov	r0, r7
     b40:	f011 fe6f 	bl	12822 <bt_conn_get_dst>
     b44:	4669      	mov	r1, sp
     b46:	f7ff fef7 	bl	938 <bt_addr_le_to_str.constprop.0>

	printk("Received data from: %s\n", addr);
     b4a:	4669      	mov	r1, sp
     b4c:	481c      	ldr	r0, [pc, #112]	; (bc0 <bt_receive_cb+0x9c>)
     b4e:	f010 f945 	bl	10ddc <printk>
		if ((pos == len) && (data[len - 1] == '\r')) {
			tx->data[tx->len] = '\n';
			tx->len++;
		}

		k_fifo_put(&fifo_uart_tx_data, tx);
     b52:	4f1c      	ldr	r7, [pc, #112]	; (bc4 <bt_receive_cb+0xa0>)
	for (u16_t pos = 0; pos != len;) {
     b54:	42ac      	cmp	r4, r5
     b56:	d106      	bne.n	b66 <bt_receive_cb+0x42>
	}

	/* Start the UART transfer by enabling the TX ready interrupt */
	uart_irq_tx_enable(uart);
     b58:	4b1b      	ldr	r3, [pc, #108]	; (bc8 <bt_receive_cb+0xa4>)
     b5a:	6818      	ldr	r0, [r3, #0]
static inline void z_impl_uart_irq_tx_enable(struct device *dev)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	if (api->irq_tx_enable) {
     b5c:	6883      	ldr	r3, [r0, #8]
     b5e:	69db      	ldr	r3, [r3, #28]
     b60:	b14b      	cbz	r3, b76 <bt_receive_cb+0x52>
		api->irq_tx_enable(dev);
     b62:	4798      	blx	r3
     b64:	e007      	b.n	b76 <bt_receive_cb+0x52>
		struct uart_data_t *tx = k_malloc(sizeof(*tx));
     b66:	201c      	movs	r0, #28
     b68:	f00d fa3e 	bl	dfe8 <k_malloc>
		if (!tx) {
     b6c:	4680      	mov	r8, r0
     b6e:	b928      	cbnz	r0, b7c <bt_receive_cb+0x58>
			printk("Not able to allocate UART send data buffer\n");
     b70:	4816      	ldr	r0, [pc, #88]	; (bcc <bt_receive_cb+0xa8>)
     b72:	f010 f933 	bl	10ddc <printk>
}
     b76:	b008      	add	sp, #32
     b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((len - pos) > tx_data_size) {
     b7c:	1b2b      	subs	r3, r5, r4
     b7e:	2b13      	cmp	r3, #19
			tx->len = tx_data_size;
     b80:	bf8c      	ite	hi
     b82:	2213      	movhi	r2, #19
			tx->len = (len - pos);
     b84:	b29a      	uxthls	r2, r3
     b86:	8302      	strh	r2, [r0, #24]
		memcpy(tx->data, &data[pos], tx->len);
     b88:	1931      	adds	r1, r6, r4
     b8a:	3004      	adds	r0, #4
     b8c:	f011 fae7 	bl	1215e <memcpy>
		pos += tx->len;
     b90:	f8b8 3018 	ldrh.w	r3, [r8, #24]
     b94:	441c      	add	r4, r3
     b96:	b2a4      	uxth	r4, r4
		if ((pos == len) && (data[len - 1] == '\r')) {
     b98:	42a5      	cmp	r5, r4
     b9a:	d10b      	bne.n	bb4 <bt_receive_cb+0x90>
     b9c:	1972      	adds	r2, r6, r5
     b9e:	f812 2c01 	ldrb.w	r2, [r2, #-1]
     ba2:	2a0d      	cmp	r2, #13
     ba4:	d106      	bne.n	bb4 <bt_receive_cb+0x90>
			tx->data[tx->len] = '\n';
     ba6:	210a      	movs	r1, #10
     ba8:	eb08 0203 	add.w	r2, r8, r3
			tx->len++;
     bac:	3301      	adds	r3, #1
			tx->data[tx->len] = '\n';
     bae:	7111      	strb	r1, [r2, #4]
			tx->len++;
     bb0:	f8a8 3018 	strh.w	r3, [r8, #24]
		k_fifo_put(&fifo_uart_tx_data, tx);
     bb4:	4641      	mov	r1, r8
     bb6:	4638      	mov	r0, r7
     bb8:	f014 fa15 	bl	14fe6 <k_queue_append>
     bbc:	e7ca      	b.n	b54 <bt_receive_cb+0x30>
     bbe:	bf00      	nop
     bc0:	000160fd 	.word	0x000160fd
     bc4:	200005b8 	.word	0x200005b8
     bc8:	200009e4 	.word	0x200009e4
     bcc:	00016115 	.word	0x00016115

00000bd0 <uart_cb>:
{
     bd0:	b570      	push	{r4, r5, r6, lr}
     bd2:	4604      	mov	r4, r0
static inline int z_impl_uart_irq_update(struct device *dev)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	if (api->irq_update) {
     bd4:	6883      	ldr	r3, [r0, #8]
     bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
     bd8:	b103      	cbz	r3, bdc <uart_cb+0xc>
		return api->irq_update(dev);
     bda:	4798      	blx	r3
	if (api->irq_rx_ready) {
     bdc:	68a3      	ldr	r3, [r4, #8]
     bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     be0:	b35b      	cbz	r3, c3a <uart_cb+0x6a>
		return api->irq_rx_ready(dev);
     be2:	4620      	mov	r0, r4
     be4:	4798      	blx	r3
	if (uart_irq_rx_ready(uart)) {
     be6:	b340      	cbz	r0, c3a <uart_cb+0x6a>
		if (!rx) {
     be8:	4d35      	ldr	r5, [pc, #212]	; (cc0 <uart_cb+0xf0>)
     bea:	682e      	ldr	r6, [r5, #0]
     bec:	b936      	cbnz	r6, bfc <uart_cb+0x2c>
			rx = k_malloc(sizeof(*rx));
     bee:	201c      	movs	r0, #28
     bf0:	f00d f9fa 	bl	dfe8 <k_malloc>
     bf4:	6028      	str	r0, [r5, #0]
			if (rx) {
     bf6:	2800      	cmp	r0, #0
     bf8:	d033      	beq.n	c62 <uart_cb+0x92>
				rx->len = 0;
     bfa:	8306      	strh	r6, [r0, #24]
	if (api->fifo_read) {
     bfc:	68a3      	ldr	r3, [r4, #8]
     bfe:	699b      	ldr	r3, [r3, #24]
     c00:	b143      	cbz	r3, c14 <uart_cb+0x44>
		data_length = uart_fifo_read(uart, &rx->data[rx->len],
     c02:	6829      	ldr	r1, [r5, #0]
     c04:	8b0a      	ldrh	r2, [r1, #24]
     c06:	1d10      	adds	r0, r2, #4
		return api->fifo_read(dev, rx_data, size);
     c08:	4401      	add	r1, r0
     c0a:	f1c2 0214 	rsb	r2, r2, #20
     c0e:	4620      	mov	r0, r4
     c10:	4798      	blx	r3
     c12:	4603      	mov	r3, r0
		rx->len += data_length;
     c14:	6829      	ldr	r1, [r5, #0]
     c16:	8b08      	ldrh	r0, [r1, #24]
     c18:	4403      	add	r3, r0
     c1a:	b298      	uxth	r0, r3
     c1c:	8308      	strh	r0, [r1, #24]
		if (rx->len > 0) {
     c1e:	b160      	cbz	r0, c3a <uart_cb+0x6a>
			if ((rx->len == UART_BUF_SIZE) ||
     c20:	2814      	cmp	r0, #20
     c22:	d005      	beq.n	c30 <uart_cb+0x60>
			   (rx->data[rx->len - 1] == '\n') ||
     c24:	4408      	add	r0, r1
     c26:	78c3      	ldrb	r3, [r0, #3]
			if ((rx->len == UART_BUF_SIZE) ||
     c28:	2b0a      	cmp	r3, #10
     c2a:	d001      	beq.n	c30 <uart_cb+0x60>
			   (rx->data[rx->len - 1] == '\n') ||
     c2c:	2b0d      	cmp	r3, #13
     c2e:	d104      	bne.n	c3a <uart_cb+0x6a>
				k_fifo_put(&fifo_uart_rx_data, rx);
     c30:	4824      	ldr	r0, [pc, #144]	; (cc4 <uart_cb+0xf4>)
     c32:	f014 f9d8 	bl	14fe6 <k_queue_append>
				rx = NULL;
     c36:	2300      	movs	r3, #0
     c38:	602b      	str	r3, [r5, #0]
	if (api->irq_tx_ready) {
     c3a:	68a3      	ldr	r3, [r4, #8]
     c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     c3e:	2b00      	cmp	r3, #0
     c40:	d03c      	beq.n	cbc <uart_cb+0xec>
		return api->irq_tx_ready(dev);
     c42:	4620      	mov	r0, r4
     c44:	4798      	blx	r3
	if (uart_irq_tx_ready(uart)) {
     c46:	2800      	cmp	r0, #0
     c48:	d038      	beq.n	cbc <uart_cb+0xec>
	return z_impl_k_queue_get(queue, timeout);
     c4a:	2200      	movs	r2, #0
     c4c:	2300      	movs	r3, #0
     c4e:	481e      	ldr	r0, [pc, #120]	; (cc8 <uart_cb+0xf8>)
     c50:	f00d fc76 	bl	e540 <z_impl_k_queue_get>
		if (!buf) {
     c54:	4605      	mov	r5, r0
     c56:	bb50      	cbnz	r0, cae <uart_cb+0xde>
			uart_irq_tx_disable(uart);
     c58:	4620      	mov	r0, r4
}
     c5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			uart_irq_tx_disable(uart);
     c5e:	f010 b817 	b.w	10c90 <uart_irq_tx_disable>
	if (api->irq_rx_disable) {
     c62:	68a3      	ldr	r3, [r4, #8]
     c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     c66:	b10b      	cbz	r3, c6c <uart_cb+0x9c>
		api->irq_rx_disable(dev);
     c68:	4620      	mov	r0, r4
     c6a:	4798      	blx	r3
}
     c6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				printk("Not able to allocate UART receive buffer\n");
     c70:	4816      	ldr	r0, [pc, #88]	; (ccc <uart_cb+0xfc>)
     c72:	f010 b8b3 	b.w	10ddc <printk>
	if (api->fifo_fill) {
     c76:	695b      	ldr	r3, [r3, #20]
     c78:	b12b      	cbz	r3, c86 <uart_cb+0xb6>
						  &buf->data[written],
     c7a:	1d31      	adds	r1, r6, #4
		return api->fifo_fill(dev, tx_data, size);
     c7c:	4620      	mov	r0, r4
     c7e:	1b92      	subs	r2, r2, r6
     c80:	4429      	add	r1, r5
     c82:	4798      	blx	r3
     c84:	4603      	mov	r3, r0
			written += uart_fifo_fill(uart,
     c86:	4433      	add	r3, r6
     c88:	b29e      	uxth	r6, r3
		while (buf->len > written) {
     c8a:	8b2a      	ldrh	r2, [r5, #24]
     c8c:	68a3      	ldr	r3, [r4, #8]
     c8e:	42b2      	cmp	r2, r6
     c90:	d8f1      	bhi.n	c76 <uart_cb+0xa6>
	if (api->irq_tx_complete) {
     c92:	68a3      	ldr	r3, [r4, #8]
     c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
     c96:	b963      	cbnz	r3, cb2 <uart_cb+0xe2>
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
     c98:	4b0b      	ldr	r3, [pc, #44]	; (cc8 <uart_cb+0xf8>)
		if (k_fifo_is_empty(&fifo_uart_tx_data)) {
     c9a:	681b      	ldr	r3, [r3, #0]
     c9c:	b913      	cbnz	r3, ca4 <uart_cb+0xd4>
			uart_irq_tx_disable(uart);
     c9e:	4620      	mov	r0, r4
     ca0:	f00f fff6 	bl	10c90 <uart_irq_tx_disable>
		k_free(buf);
     ca4:	4628      	mov	r0, r5
}
     ca6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_free(buf);
     caa:	f014 b977 	b.w	14f9c <k_free>
		u16_t written = 0;
     cae:	2600      	movs	r6, #0
     cb0:	e7eb      	b.n	c8a <uart_cb+0xba>
		return api->irq_tx_complete(dev);
     cb2:	4620      	mov	r0, r4
     cb4:	4798      	blx	r3
		while (!uart_irq_tx_complete(uart)) {
     cb6:	2800      	cmp	r0, #0
     cb8:	d0eb      	beq.n	c92 <uart_cb+0xc2>
     cba:	e7ed      	b.n	c98 <uart_cb+0xc8>
}
     cbc:	bd70      	pop	{r4, r5, r6, pc}
     cbe:	bf00      	nop
     cc0:	200009e0 	.word	0x200009e0
     cc4:	2000059c 	.word	0x2000059c
     cc8:	200005b8 	.word	0x200005b8
     ccc:	00016141 	.word	0x00016141

00000cd0 <connected>:
{
     cd0:	b510      	push	{r4, lr}
     cd2:	4604      	mov	r4, r0
     cd4:	b088      	sub	sp, #32
	if (err) {
     cd6:	b121      	cbz	r1, ce2 <connected+0x12>
		printk("Connection failed (err %u)\n", err);
     cd8:	480c      	ldr	r0, [pc, #48]	; (d0c <connected+0x3c>)
     cda:	f010 f87f 	bl	10ddc <printk>
}
     cde:	b008      	add	sp, #32
     ce0:	bd10      	pop	{r4, pc}
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     ce2:	f011 fd9e 	bl	12822 <bt_conn_get_dst>
     ce6:	4669      	mov	r1, sp
     ce8:	f7ff fe26 	bl	938 <bt_addr_le_to_str.constprop.0>
	printk("Connected %s\n", addr);
     cec:	4669      	mov	r1, sp
     cee:	4808      	ldr	r0, [pc, #32]	; (d10 <connected+0x40>)
     cf0:	f010 f874 	bl	10ddc <printk>
	current_conn = bt_conn_ref(conn);
     cf4:	4620      	mov	r0, r4
     cf6:	f011 fd7c 	bl	127f2 <bt_conn_ref>
     cfa:	4b06      	ldr	r3, [pc, #24]	; (d14 <connected+0x44>)
     cfc:	6018      	str	r0, [r3, #0]
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
     cfe:	4806      	ldr	r0, [pc, #24]	; (d18 <connected+0x48>)
     d00:	f00e fde2 	bl	f8c8 <z_impl_k_sem_give>
	dk_set_led_on(CON_STATUS_LED);
     d04:	2001      	movs	r0, #1
     d06:	f013 fcfb 	bl	14700 <dk_set_led_on>
     d0a:	e7e8      	b.n	cde <connected+0xe>
     d0c:	0001616b 	.word	0x0001616b
     d10:	00016187 	.word	0x00016187
     d14:	200009dc 	.word	0x200009dc
     d18:	20000514 	.word	0x20000514

00000d1c <ble_write_thread>:
		k_sleep(K_MSEC(RUN_LED_BLINK_INTERVAL));
	}
}

void ble_write_thread(void)
{
     d1c:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_take(sem, timeout);
     d1e:	f04f 32ff 	mov.w	r2, #4294967295
     d22:	f04f 33ff 	mov.w	r3, #4294967295
     d26:	480d      	ldr	r0, [pc, #52]	; (d5c <ble_write_thread+0x40>)
     d28:	f00e fe12 	bl	f950 <z_impl_k_sem_take>
     d2c:	f04f 32ff 	mov.w	r2, #4294967295
     d30:	f04f 33ff 	mov.w	r3, #4294967295
     d34:	480a      	ldr	r0, [pc, #40]	; (d60 <ble_write_thread+0x44>)
     d36:	f00e fe0b 	bl	f950 <z_impl_k_sem_take>
		if (rx_disabled) {
			rx_disabled = false;
			uart_irq_rx_enable(uart);
		}*/

		if (bt_gatt_nus_send(NULL, "0123456789", 10)) {
     d3a:	4c0a      	ldr	r4, [pc, #40]	; (d64 <ble_write_thread+0x48>)
			printk("Failed to send data over BLE connection\n");
     d3c:	4d0a      	ldr	r5, [pc, #40]	; (d68 <ble_write_thread+0x4c>)
		if (bt_gatt_nus_send(NULL, "0123456789", 10)) {
     d3e:	220a      	movs	r2, #10
     d40:	4621      	mov	r1, r4
     d42:	2000      	movs	r0, #0
     d44:	f001 fdea 	bl	291c <bt_gatt_nus_send>
     d48:	b110      	cbz	r0, d50 <ble_write_thread+0x34>
			printk("Failed to send data over BLE connection\n");
     d4a:	4628      	mov	r0, r5
     d4c:	f010 f846 	bl	10ddc <printk>
	return z_impl_k_sleep(timeout);
     d50:	2100      	movs	r1, #0
     d52:	20a4      	movs	r0, #164	; 0xa4
     d54:	f00e fd7c 	bl	f850 <z_impl_k_sleep>
	for (;;) {
     d58:	e7f1      	b.n	d3e <ble_write_thread+0x22>
     d5a:	bf00      	nop
     d5c:	20000514 	.word	0x20000514
     d60:	200004fc 	.word	0x200004fc
     d64:	00016195 	.word	0x00016195
     d68:	000161a0 	.word	0x000161a0

00000d6c <button_changed>:
{
     d6c:	b538      	push	{r3, r4, r5, lr}
	if (auth_conn) {
     d6e:	4c11      	ldr	r4, [pc, #68]	; (db4 <button_changed+0x48>)
{
     d70:	4603      	mov	r3, r0
	if (auth_conn) {
     d72:	6820      	ldr	r0, [r4, #0]
     d74:	b1e0      	cbz	r0, db0 <button_changed+0x44>
	u32_t buttons = button_state & has_changed;
     d76:	ea03 0501 	and.w	r5, r3, r1
		if (buttons & KEY_PASSKEY_ACCEPT) {
     d7a:	07ea      	lsls	r2, r5, #31
     d7c:	d50a      	bpl.n	d94 <button_changed+0x28>
		bt_conn_auth_passkey_confirm(auth_conn);
     d7e:	f005 fdf7 	bl	6970 <bt_conn_auth_passkey_confirm>
		printk("Numeric Match, conn %p\n", auth_conn);
     d82:	6821      	ldr	r1, [r4, #0]
     d84:	480c      	ldr	r0, [pc, #48]	; (db8 <button_changed+0x4c>)
     d86:	f010 f829 	bl	10ddc <printk>
	bt_conn_unref(auth_conn);
     d8a:	6820      	ldr	r0, [r4, #0]
     d8c:	f011 fd38 	bl	12800 <bt_conn_unref>
	auth_conn = NULL;
     d90:	2300      	movs	r3, #0
     d92:	6023      	str	r3, [r4, #0]
		if (buttons & KEY_PASSKEY_REJECT) {
     d94:	07ab      	lsls	r3, r5, #30
     d96:	d50b      	bpl.n	db0 <button_changed+0x44>
		bt_conn_auth_cancel(auth_conn);
     d98:	6820      	ldr	r0, [r4, #0]
     d9a:	f005 fdf7 	bl	698c <bt_conn_auth_cancel>
		printk("Numeric Reject, conn %p\n", auth_conn);
     d9e:	6821      	ldr	r1, [r4, #0]
     da0:	4806      	ldr	r0, [pc, #24]	; (dbc <button_changed+0x50>)
     da2:	f010 f81b 	bl	10ddc <printk>
	bt_conn_unref(auth_conn);
     da6:	6820      	ldr	r0, [r4, #0]
     da8:	f011 fd2a 	bl	12800 <bt_conn_unref>
	auth_conn = NULL;
     dac:	2300      	movs	r3, #0
     dae:	6023      	str	r3, [r4, #0]
}
     db0:	bd38      	pop	{r3, r4, r5, pc}
     db2:	bf00      	nop
     db4:	200009d8 	.word	0x200009d8
     db8:	000161c9 	.word	0x000161c9
     dbc:	000161e1 	.word	0x000161e1

00000dc0 <led_blink_thread>:
{
     dc0:	b570      	push	{r4, r5, r6, lr}
	printk("Starting Nordic UART service example\n");
     dc2:	4833      	ldr	r0, [pc, #204]	; (e90 <led_blink_thread+0xd0>)
{
     dc4:	b088      	sub	sp, #32
	printk("Starting Nordic UART service example\n");
     dc6:	f010 f809 	bl	10ddc <printk>
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     dca:	4832      	ldr	r0, [pc, #200]	; (e94 <led_blink_thread+0xd4>)
     dcc:	f00c fd60 	bl	d890 <z_impl_device_get_binding>
	uart = device_get_binding("UART_0");
     dd0:	4c31      	ldr	r4, [pc, #196]	; (e98 <led_blink_thread+0xd8>)
     dd2:	4602      	mov	r2, r0
     dd4:	6020      	str	r0, [r4, #0]
	if (!uart) {
     dd6:	b908      	cbnz	r0, ddc <led_blink_thread+0x1c>
		error();
     dd8:	f00f ff5f 	bl	10c9a <error>
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
     ddc:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
     dde:	b11b      	cbz	r3, de8 <led_blink_thread+0x28>
     de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
     de2:	b10b      	cbz	r3, de8 <led_blink_thread+0x28>
		api->irq_callback_set(dev, cb, user_data);
     de4:	492d      	ldr	r1, [pc, #180]	; (e9c <led_blink_thread+0xdc>)
     de6:	4798      	blx	r3
	uart_irq_rx_enable(uart);
     de8:	6820      	ldr	r0, [r4, #0]
	if (api->irq_rx_enable) {
     dea:	6883      	ldr	r3, [r0, #8]
     dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     dee:	b103      	cbz	r3, df2 <led_blink_thread+0x32>
		api->irq_rx_enable(dev);
     df0:	4798      	blx	r3
	err = dk_buttons_init(button_changed);
     df2:	482b      	ldr	r0, [pc, #172]	; (ea0 <led_blink_thread+0xe0>)
     df4:	f00b ff0a 	bl	cc0c <dk_buttons_init>
	if (err) {
     df8:	4601      	mov	r1, r0
     dfa:	b110      	cbz	r0, e02 <led_blink_thread+0x42>
		printk("Cannot init buttons (err: %d)\n", err);
     dfc:	4829      	ldr	r0, [pc, #164]	; (ea4 <led_blink_thread+0xe4>)
     dfe:	f00f ffed 	bl	10ddc <printk>
	err = dk_leds_init();
     e02:	f00b fec3 	bl	cb8c <dk_leds_init>
	if (err) {
     e06:	4601      	mov	r1, r0
     e08:	b110      	cbz	r0, e10 <led_blink_thread+0x50>
		printk("Cannot init LEDs (err: %d)\n", err);
     e0a:	4827      	ldr	r0, [pc, #156]	; (ea8 <led_blink_thread+0xe8>)
     e0c:	f00f ffe6 	bl	10ddc <printk>
	bt_conn_cb_register(&conn_callbacks);
     e10:	4826      	ldr	r0, [pc, #152]	; (eac <led_blink_thread+0xec>)
     e12:	f005 f993 	bl	613c <bt_conn_cb_register>
		bt_conn_auth_cb_register(&conn_auth_callbacks);
     e16:	4826      	ldr	r0, [pc, #152]	; (eb0 <led_blink_thread+0xf0>)
     e18:	f005 fd8e 	bl	6938 <bt_conn_auth_cb_register>
	err = bt_enable(NULL);
     e1c:	2000      	movs	r0, #0
     e1e:	f004 fa6d 	bl	52fc <bt_enable>
	if (err) {
     e22:	2800      	cmp	r0, #0
     e24:	d1d8      	bne.n	dd8 <led_blink_thread+0x18>
	printk("Bluetooth initialized\n");
     e26:	4823      	ldr	r0, [pc, #140]	; (eb4 <led_blink_thread+0xf4>)
     e28:	f00f ffd8 	bl	10ddc <printk>
	z_impl_k_sem_give(sem);
     e2c:	4822      	ldr	r0, [pc, #136]	; (eb8 <led_blink_thread+0xf8>)
     e2e:	f00e fd4b 	bl	f8c8 <z_impl_k_sem_give>
		settings_load();
     e32:	f010 fb9f 	bl	11574 <settings_load>
	err = bt_gatt_nus_init(&nus_cb);
     e36:	4821      	ldr	r0, [pc, #132]	; (ebc <led_blink_thread+0xfc>)
     e38:	f001 fd66 	bl	2908 <bt_gatt_nus_init>
	if (err) {
     e3c:	4604      	mov	r4, r0
     e3e:	b128      	cbz	r0, e4c <led_blink_thread+0x8c>
		printk("Failed to initialize UART service (err: %d)\n", err);
     e40:	4601      	mov	r1, r0
     e42:	481f      	ldr	r0, [pc, #124]	; (ec0 <led_blink_thread+0x100>)
     e44:	f00f ffca 	bl	10ddc <printk>
}
     e48:	b008      	add	sp, #32
     e4a:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), sd,
     e4c:	4e1d      	ldr	r6, [pc, #116]	; (ec4 <led_blink_thread+0x104>)
     e4e:	ad03      	add	r5, sp, #12
     e50:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
     e52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     e54:	6833      	ldr	r3, [r6, #0]
     e56:	491c      	ldr	r1, [pc, #112]	; (ec8 <led_blink_thread+0x108>)
     e58:	602b      	str	r3, [r5, #0]
     e5a:	2301      	movs	r3, #1
     e5c:	2202      	movs	r2, #2
     e5e:	9300      	str	r3, [sp, #0]
     e60:	a803      	add	r0, sp, #12
     e62:	4b1a      	ldr	r3, [pc, #104]	; (ecc <led_blink_thread+0x10c>)
     e64:	f011 fbd0 	bl	12608 <bt_le_adv_start>
	if (err) {
     e68:	4601      	mov	r1, r0
     e6a:	b110      	cbz	r0, e72 <led_blink_thread+0xb2>
		printk("Advertising failed to start (err %d)\n", err);
     e6c:	4818      	ldr	r0, [pc, #96]	; (ed0 <led_blink_thread+0x110>)
     e6e:	f00f ffb5 	bl	10ddc <printk>
		dk_set_led(RUN_STATUS_LED, (++blink_status) % 2);
     e72:	3401      	adds	r4, #1
     e74:	f004 0101 	and.w	r1, r4, #1
     e78:	bf48      	it	mi
     e7a:	4249      	negmi	r1, r1
     e7c:	2000      	movs	r0, #0
     e7e:	f00b ff59 	bl	cd34 <dk_set_led>
	return z_impl_k_sleep(timeout);
     e82:	2100      	movs	r1, #0
     e84:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     e88:	f00e fce2 	bl	f850 <z_impl_k_sleep>
	for (;;) {
     e8c:	e7f1      	b.n	e72 <led_blink_thread+0xb2>
     e8e:	bf00      	nop
     e90:	000161fa 	.word	0x000161fa
     e94:	00016220 	.word	0x00016220
     e98:	200009e4 	.word	0x200009e4
     e9c:	00000bd1 	.word	0x00000bd1
     ea0:	00000d6d 	.word	0x00000d6d
     ea4:	00016227 	.word	0x00016227
     ea8:	00016246 	.word	0x00016246
     eac:	20000148 	.word	0x20000148
     eb0:	20000128 	.word	0x20000128
     eb4:	00016262 	.word	0x00016262
     eb8:	200004fc 	.word	0x200004fc
     ebc:	20000164 	.word	0x20000164
     ec0:	00016279 	.word	0x00016279
     ec4:	000156a0 	.word	0x000156a0
     ec8:	00015738 	.word	0x00015738
     ecc:	00015748 	.word	0x00015748
     ed0:	000162a6 	.word	0x000162a6

00000ed4 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

u8_t crc8_ccitt(u8_t val, const void *buf, size_t cnt)
{
     ed4:	b530      	push	{r4, r5, lr}
	size_t i;
	const u8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
     ed6:	4c0a      	ldr	r4, [pc, #40]	; (f00 <crc8_ccitt+0x2c>)
     ed8:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
     eda:	4291      	cmp	r1, r2
     edc:	d100      	bne.n	ee0 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
     ede:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
     ee0:	f811 3b01 	ldrb.w	r3, [r1], #1
     ee4:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
     ee6:	0903      	lsrs	r3, r0, #4
     ee8:	5ce3      	ldrb	r3, [r4, r3]
     eea:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
     eee:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
     ef0:	f3c3 1303 	ubfx	r3, r3, #4, #4
     ef4:	5ce0      	ldrb	r0, [r4, r3]
     ef6:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
     efa:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
     efc:	e7ed      	b.n	eda <crc8_ccitt+0x6>
     efe:	bf00      	nop
     f00:	00016308 	.word	0x00016308

00000f04 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     f04:	680b      	ldr	r3, [r1, #0]
     f06:	3301      	adds	r3, #1
     f08:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     f0a:	4b01      	ldr	r3, [pc, #4]	; (f10 <char_out+0xc>)
     f0c:	681b      	ldr	r3, [r3, #0]
     f0e:	4718      	bx	r3
     f10:	2000016c 	.word	0x2000016c

00000f14 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f18:	b085      	sub	sp, #20
     f1a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     f1c:	469b      	mov	fp, r3
     f1e:	2c01      	cmp	r4, #1
     f20:	bfb8      	it	lt
     f22:	2401      	movlt	r4, #1
     f24:	2b01      	cmp	r3, #1
     f26:	bf0c      	ite	eq
     f28:	2330      	moveq	r3, #48	; 0x30
     f2a:	2320      	movne	r3, #32
     f2c:	4615      	mov	r5, r2
     f2e:	4606      	mov	r6, r0
     f30:	468a      	mov	sl, r1
     f32:	2701      	movs	r7, #1
     f34:	f04f 080a 	mov.w	r8, #10
     f38:	2200      	movs	r2, #0
     f3a:	f8df 9070 	ldr.w	r9, [pc, #112]	; fac <_printk_dec_ulong+0x98>
     f3e:	9302      	str	r3, [sp, #8]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
     f40:	fbb5 f3f9 	udiv	r3, r5, r9
     f44:	9301      	str	r3, [sp, #4]
     f46:	b90a      	cbnz	r2, f4c <_printk_dec_ulong+0x38>
     f48:	45a9      	cmp	r9, r5
     f4a:	d81e      	bhi.n	f8a <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
     f4c:	9b01      	ldr	r3, [sp, #4]
     f4e:	4651      	mov	r1, sl
     f50:	f103 0030 	add.w	r0, r3, #48	; 0x30
     f54:	47b0      	blx	r6
			found_largest_digit = 1;
     f56:	2201      	movs	r2, #1
			digits++;
     f58:	3701      	adds	r7, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
     f5a:	9b01      	ldr	r3, [sp, #4]
		remaining--;
     f5c:	f108 38ff 	add.w	r8, r8, #4294967295
		remainder %= pos;
     f60:	fb09 5513 	mls	r5, r9, r3, r5
		pos /= 10;
     f64:	230a      	movs	r3, #10
	while (pos >= 10) {
     f66:	f1b8 0f01 	cmp.w	r8, #1
		pos /= 10;
     f6a:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
     f6e:	d1e7      	bne.n	f40 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
     f70:	4651      	mov	r1, sl
     f72:	f105 0030 	add.w	r0, r5, #48	; 0x30
     f76:	47b0      	blx	r6

	if (padding == PAD_SPACE_AFTER) {
     f78:	f1bb 0f03 	cmp.w	fp, #3
     f7c:	d102      	bne.n	f84 <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
     f7e:	1be4      	subs	r4, r4, r7
		while (remaining-- > 0) {
     f80:	2c00      	cmp	r4, #0
     f82:	dc0e      	bgt.n	fa2 <_printk_dec_ulong+0x8e>
			out(' ', ctx);
		}
	}
}
     f84:	b005      	add	sp, #20
     f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     f8a:	4544      	cmp	r4, r8
     f8c:	dbe5      	blt.n	f5a <_printk_dec_ulong+0x46>
				&& padding < PAD_SPACE_AFTER) {
     f8e:	f1bb 0f02 	cmp.w	fp, #2
     f92:	d8e2      	bhi.n	f5a <_printk_dec_ulong+0x46>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     f94:	4651      	mov	r1, sl
     f96:	9802      	ldr	r0, [sp, #8]
     f98:	9203      	str	r2, [sp, #12]
			digits++;
     f9a:	3701      	adds	r7, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     f9c:	47b0      	blx	r6
			digits++;
     f9e:	9a03      	ldr	r2, [sp, #12]
     fa0:	e7db      	b.n	f5a <_printk_dec_ulong+0x46>
			out(' ', ctx);
     fa2:	4651      	mov	r1, sl
     fa4:	2020      	movs	r0, #32
     fa6:	47b0      	blx	r6
     fa8:	3c01      	subs	r4, #1
     faa:	e7e9      	b.n	f80 <_printk_dec_ulong+0x6c>
     fac:	3b9aca00 	.word	0x3b9aca00

00000fb0 <__printk_hook_install>:
	_char_out = fn;
     fb0:	4b01      	ldr	r3, [pc, #4]	; (fb8 <__printk_hook_install+0x8>)
     fb2:	6018      	str	r0, [r3, #0]
}
     fb4:	4770      	bx	lr
     fb6:	bf00      	nop
     fb8:	2000016c 	.word	0x2000016c

00000fbc <z_vprintk>:
{
     fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
     fc0:	2700      	movs	r7, #0
{
     fc2:	4605      	mov	r5, r0
     fc4:	468b      	mov	fp, r1
	int min_width = -1;
     fc6:	f04f 39ff 	mov.w	r9, #4294967295
	enum pad_type padding = PAD_NONE;
     fca:	46b8      	mov	r8, r7
{
     fcc:	461c      	mov	r4, r3
     fce:	b08d      	sub	sp, #52	; 0x34
     fd0:	1e53      	subs	r3, r2, #1
     fd2:	9303      	str	r3, [sp, #12]
			might_format = 0;
     fd4:	2600      	movs	r6, #0
					break;
     fd6:	e005      	b.n	fe4 <z_vprintk+0x28>
		if (!might_format) {
     fd8:	b96e      	cbnz	r6, ff6 <z_vprintk+0x3a>
			if (*fmt != '%') {
     fda:	2825      	cmp	r0, #37	; 0x25
     fdc:	f000 8171 	beq.w	12c2 <z_vprintk+0x306>
				out((int)*fmt, ctx);
     fe0:	4659      	mov	r1, fp
     fe2:	47a8      	blx	r5
	while (*fmt) {
     fe4:	9b03      	ldr	r3, [sp, #12]
     fe6:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     fea:	9303      	str	r3, [sp, #12]
     fec:	2800      	cmp	r0, #0
     fee:	d1f3      	bne.n	fd8 <z_vprintk+0x1c>
}
     ff0:	b00d      	add	sp, #52	; 0x34
     ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
     ff6:	287a      	cmp	r0, #122	; 0x7a
     ff8:	d80a      	bhi.n	1010 <z_vprintk+0x54>
     ffa:	2862      	cmp	r0, #98	; 0x62
     ffc:	d810      	bhi.n	1020 <z_vprintk+0x64>
     ffe:	2830      	cmp	r0, #48	; 0x30
    1000:	d054      	beq.n	10ac <z_vprintk+0xf0>
    1002:	d845      	bhi.n	1090 <z_vprintk+0xd4>
    1004:	2825      	cmp	r0, #37	; 0x25
    1006:	f000 815a 	beq.w	12be <z_vprintk+0x302>
    100a:	282d      	cmp	r0, #45	; 0x2d
    100c:	f000 815f 	beq.w	12ce <z_vprintk+0x312>
					out((int)'%', ctx);
    1010:	4659      	mov	r1, fp
    1012:	2025      	movs	r0, #37	; 0x25
    1014:	47a8      	blx	r5
					out((int)*fmt, ctx);
    1016:	4659      	mov	r1, fp
    1018:	9b03      	ldr	r3, [sp, #12]
    101a:	7818      	ldrb	r0, [r3, #0]
    101c:	47a8      	blx	r5
    101e:	e7d9      	b.n	fd4 <z_vprintk+0x18>
    1020:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
    1024:	2b17      	cmp	r3, #23
    1026:	d8f3      	bhi.n	1010 <z_vprintk+0x54>
    1028:	a201      	add	r2, pc, #4	; (adr r2, 1030 <z_vprintk+0x74>)
    102a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    102e:	bf00      	nop
    1030:	000012b7 	.word	0x000012b7
    1034:	000010fb 	.word	0x000010fb
    1038:	00001011 	.word	0x00001011
    103c:	00001011 	.word	0x00001011
    1040:	00001011 	.word	0x00001011
    1044:	000010dd 	.word	0x000010dd
    1048:	000010fb 	.word	0x000010fb
    104c:	00001011 	.word	0x00001011
    1050:	00001011 	.word	0x00001011
    1054:	000010dd 	.word	0x000010dd
    1058:	00001011 	.word	0x00001011
    105c:	00001011 	.word	0x00001011
    1060:	00001011 	.word	0x00001011
    1064:	0000119d 	.word	0x0000119d
    1068:	00001011 	.word	0x00001011
    106c:	00001011 	.word	0x00001011
    1070:	00001287 	.word	0x00001287
    1074:	00001011 	.word	0x00001011
    1078:	0000116b 	.word	0x0000116b
    107c:	00001011 	.word	0x00001011
    1080:	00001011 	.word	0x00001011
    1084:	00001099 	.word	0x00001099
    1088:	00001011 	.word	0x00001011
    108c:	000010dd 	.word	0x000010dd
			switch (*fmt) {
    1090:	2839      	cmp	r0, #57	; 0x39
    1092:	d91a      	bls.n	10ca <z_vprintk+0x10e>
    1094:	2858      	cmp	r0, #88	; 0x58
    1096:	d1bb      	bne.n	1010 <z_vprintk+0x54>
				if (*fmt == 'p') {
    1098:	9b03      	ldr	r3, [sp, #12]
    109a:	781b      	ldrb	r3, [r3, #0]
    109c:	2b70      	cmp	r3, #112	; 0x70
    109e:	f040 8088 	bne.w	11b2 <z_vprintk+0x1f6>
					x = va_arg(ap, unsigned int);
    10a2:	f854 3b04 	ldr.w	r3, [r4], #4
    10a6:	2200      	movs	r2, #0
    10a8:	9306      	str	r3, [sp, #24]
    10aa:	e090      	b.n	11ce <z_vprintk+0x212>
				if (min_width < 0 && padding == PAD_NONE) {
    10ac:	f1b9 0f00 	cmp.w	r9, #0
    10b0:	da0e      	bge.n	10d0 <z_vprintk+0x114>
    10b2:	f1b8 0f00 	cmp.w	r8, #0
    10b6:	f000 810d 	beq.w	12d4 <z_vprintk+0x318>
					min_width = *fmt - '0';
    10ba:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    10be:	f1b8 0f00 	cmp.w	r8, #0
    10c2:	bf08      	it	eq
    10c4:	f04f 0802 	moveq.w	r8, #2
    10c8:	e78c      	b.n	fe4 <z_vprintk+0x28>
				if (min_width < 0) {
    10ca:	f1b9 0f00 	cmp.w	r9, #0
    10ce:	dbf4      	blt.n	10ba <z_vprintk+0xfe>
					min_width = 10 * min_width + *fmt - '0';
    10d0:	230a      	movs	r3, #10
    10d2:	fb03 0909 	mla	r9, r3, r9, r0
    10d6:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    10da:	e7f0      	b.n	10be <z_vprintk+0x102>
				if (*fmt == 'h' && length_mod == 'h') {
    10dc:	2868      	cmp	r0, #104	; 0x68
    10de:	d103      	bne.n	10e8 <z_vprintk+0x12c>
    10e0:	2f68      	cmp	r7, #104	; 0x68
    10e2:	d106      	bne.n	10f2 <z_vprintk+0x136>
					length_mod = 'H';
    10e4:	2748      	movs	r7, #72	; 0x48
    10e6:	e77d      	b.n	fe4 <z_vprintk+0x28>
				} else if (*fmt == 'l' && length_mod == 'l') {
    10e8:	286c      	cmp	r0, #108	; 0x6c
    10ea:	d102      	bne.n	10f2 <z_vprintk+0x136>
    10ec:	2f6c      	cmp	r7, #108	; 0x6c
    10ee:	f000 80f4 	beq.w	12da <z_vprintk+0x31e>
				} else if (length_mod == 0) {
    10f2:	2f00      	cmp	r7, #0
    10f4:	d18c      	bne.n	1010 <z_vprintk+0x54>
    10f6:	4607      	mov	r7, r0
    10f8:	e774      	b.n	fe4 <z_vprintk+0x28>
				if (length_mod == 'z') {
    10fa:	2f7a      	cmp	r7, #122	; 0x7a
    10fc:	d102      	bne.n	1104 <z_vprintk+0x148>
					d = va_arg(ap, int);
    10fe:	f854 6b04 	ldr.w	r6, [r4], #4
    1102:	e021      	b.n	1148 <z_vprintk+0x18c>
				} else if (length_mod == 'l') {
    1104:	2f6c      	cmp	r7, #108	; 0x6c
    1106:	d0fa      	beq.n	10fe <z_vprintk+0x142>
				} else if (length_mod == 'L') {
    1108:	2f4c      	cmp	r7, #76	; 0x4c
    110a:	d1f8      	bne.n	10fe <z_vprintk+0x142>
					long long lld = va_arg(ap, long long);
    110c:	3407      	adds	r4, #7
    110e:	f024 0407 	bic.w	r4, r4, #7
    1112:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    1116:	e9cd 2304 	strd	r2, r3, [sp, #16]
					if (lld > __LONG_MAX__ ||
    111a:	9b04      	ldr	r3, [sp, #16]
    111c:	f04f 30ff 	mov.w	r0, #4294967295
    1120:	f113 4100 	adds.w	r1, r3, #2147483648	; 0x80000000
    1124:	9b05      	ldr	r3, [sp, #20]
    1126:	9108      	str	r1, [sp, #32]
    1128:	f143 0100 	adc.w	r1, r3, #0
    112c:	9109      	str	r1, [sp, #36]	; 0x24
    112e:	2100      	movs	r1, #0
    1130:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    1134:	4299      	cmp	r1, r3
    1136:	bf08      	it	eq
    1138:	4290      	cmpeq	r0, r2
    113a:	d204      	bcs.n	1146 <z_vprintk+0x18a>
						print_err(out, ctx);
    113c:	4659      	mov	r1, fp
    113e:	4628      	mov	r0, r5
    1140:	f00f fe2b 	bl	10d9a <print_err>
						break;
    1144:	e746      	b.n	fd4 <z_vprintk+0x18>
					d = lld;
    1146:	9e04      	ldr	r6, [sp, #16]
				if (d < 0) {
    1148:	2e00      	cmp	r6, #0
    114a:	da05      	bge.n	1158 <z_vprintk+0x19c>
					out((int)'-', ctx);
    114c:	4659      	mov	r1, fp
    114e:	202d      	movs	r0, #45	; 0x2d
    1150:	47a8      	blx	r5
					d = -d;
    1152:	4276      	negs	r6, r6
					min_width--;
    1154:	f109 39ff 	add.w	r9, r9, #4294967295
				_printk_dec_ulong(out, ctx, d, padding,
    1158:	4643      	mov	r3, r8
    115a:	4632      	mov	r2, r6
    115c:	f8cd 9000 	str.w	r9, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
    1160:	4659      	mov	r1, fp
    1162:	4628      	mov	r0, r5
    1164:	f7ff fed6 	bl	f14 <_printk_dec_ulong>
				break;
    1168:	e734      	b.n	fd4 <z_vprintk+0x18>
				if (length_mod == 'z') {
    116a:	2f7a      	cmp	r7, #122	; 0x7a
    116c:	d102      	bne.n	1174 <z_vprintk+0x1b8>
					u = va_arg(ap, unsigned int);
    116e:	f854 2b04 	ldr.w	r2, [r4], #4
    1172:	e00f      	b.n	1194 <z_vprintk+0x1d8>
				} else if (length_mod == 'l') {
    1174:	2f6c      	cmp	r7, #108	; 0x6c
    1176:	d0fa      	beq.n	116e <z_vprintk+0x1b2>
				} else if (length_mod == 'L') {
    1178:	2f4c      	cmp	r7, #76	; 0x4c
    117a:	d1f8      	bne.n	116e <z_vprintk+0x1b2>
					if (llu > ~0UL) {
    117c:	2100      	movs	r1, #0
    117e:	f04f 30ff 	mov.w	r0, #4294967295
					unsigned long long llu =
    1182:	3407      	adds	r4, #7
    1184:	f024 0407 	bic.w	r4, r4, #7
    1188:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
    118c:	4299      	cmp	r1, r3
    118e:	bf08      	it	eq
    1190:	4290      	cmpeq	r0, r2
    1192:	d3d3      	bcc.n	113c <z_vprintk+0x180>
				_printk_dec_ulong(out, ctx, u, padding,
    1194:	4643      	mov	r3, r8
    1196:	f8cd 9000 	str.w	r9, [sp]
    119a:	e7e1      	b.n	1160 <z_vprintk+0x1a4>
				out('0', ctx);
    119c:	4659      	mov	r1, fp
    119e:	2030      	movs	r0, #48	; 0x30
    11a0:	47a8      	blx	r5
				out('x', ctx);
    11a2:	4659      	mov	r1, fp
    11a4:	2078      	movs	r0, #120	; 0x78
    11a6:	47a8      	blx	r5
					min_width = 8;
    11a8:	f04f 0908 	mov.w	r9, #8
				padding = PAD_ZERO_BEFORE;
    11ac:	f04f 0801 	mov.w	r8, #1
    11b0:	e772      	b.n	1098 <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
    11b2:	2f6c      	cmp	r7, #108	; 0x6c
    11b4:	f43f af75 	beq.w	10a2 <z_vprintk+0xe6>
				} else if (length_mod == 'L') {
    11b8:	2f4c      	cmp	r7, #76	; 0x4c
    11ba:	f47f af72 	bne.w	10a2 <z_vprintk+0xe6>
					x = va_arg(ap, unsigned long long);
    11be:	1de3      	adds	r3, r4, #7
    11c0:	f023 0307 	bic.w	r3, r3, #7
    11c4:	461c      	mov	r4, r3
    11c6:	f854 2b08 	ldr.w	r2, [r4], #8
    11ca:	9206      	str	r2, [sp, #24]
    11cc:	685a      	ldr	r2, [r3, #4]
	int digits = 0;
    11ce:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
    11d0:	2310      	movs	r3, #16
	int shift = sizeof(num) * 8;
    11d2:	f04f 0a40 	mov.w	sl, #64	; 0x40
	int digits = 0;
    11d6:	9104      	str	r1, [sp, #16]
	int found_largest_digit = 0;
    11d8:	9107      	str	r1, [sp, #28]
		shift -= 4;
    11da:	f1aa 0a04 	sub.w	sl, sl, #4
		nibble = (num >> shift) & 0xf;
    11de:	9906      	ldr	r1, [sp, #24]
    11e0:	f1ca 0e20 	rsb	lr, sl, #32
    11e4:	f1aa 0c20 	sub.w	ip, sl, #32
    11e8:	fa21 f00a 	lsr.w	r0, r1, sl
    11ec:	fa02 fe0e 	lsl.w	lr, r2, lr
    11f0:	ea40 000e 	orr.w	r0, r0, lr
    11f4:	fa22 fc0c 	lsr.w	ip, r2, ip
    11f8:	ea40 000c 	orr.w	r0, r0, ip
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
    11fc:	f010 000f 	ands.w	r0, r0, #15
    1200:	d107      	bne.n	1212 <z_vprintk+0x256>
    1202:	9907      	ldr	r1, [sp, #28]
    1204:	b911      	cbnz	r1, 120c <z_vprintk+0x250>
    1206:	f1ba 0f00 	cmp.w	sl, #0
    120a:	d125      	bne.n	1258 <z_vprintk+0x29c>
			nibble += nibble > 9 ? 87 : 48;
    120c:	f04f 0c30 	mov.w	ip, #48	; 0x30
    1210:	e005      	b.n	121e <z_vprintk+0x262>
    1212:	2809      	cmp	r0, #9
    1214:	bf8c      	ite	hi
    1216:	f04f 0c57 	movhi.w	ip, #87	; 0x57
    121a:	f04f 0c30 	movls.w	ip, #48	; 0x30
    121e:	4460      	add	r0, ip
			out((int)nibble, ctx);
    1220:	4659      	mov	r1, fp
    1222:	b240      	sxtb	r0, r0
    1224:	920a      	str	r2, [sp, #40]	; 0x28
    1226:	9307      	str	r3, [sp, #28]
    1228:	47a8      	blx	r5
			digits++;
    122a:	9b04      	ldr	r3, [sp, #16]
	while (shift >= 4) {
    122c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			digits++;
    122e:	3301      	adds	r3, #1
    1230:	9304      	str	r3, [sp, #16]
	while (shift >= 4) {
    1232:	9b07      	ldr	r3, [sp, #28]
    1234:	f1ba 0f00 	cmp.w	sl, #0
    1238:	d123      	bne.n	1282 <z_vprintk+0x2c6>
	if (padding == PAD_SPACE_AFTER) {
    123a:	f1b8 0f03 	cmp.w	r8, #3
    123e:	f47f aec9 	bne.w	fd4 <z_vprintk+0x18>
		remaining = min_width * 2 - digits;
    1242:	9b04      	ldr	r3, [sp, #16]
    1244:	ebc3 0649 	rsb	r6, r3, r9, lsl #1
		while (remaining-- > 0) {
    1248:	2e00      	cmp	r6, #0
    124a:	f77f aec3 	ble.w	fd4 <z_vprintk+0x18>
			out(' ', ctx);
    124e:	4659      	mov	r1, fp
    1250:	2020      	movs	r0, #32
    1252:	47a8      	blx	r5
    1254:	3e01      	subs	r6, #1
    1256:	e7f7      	b.n	1248 <z_vprintk+0x28c>
		if (remaining-- <= min_width) {
    1258:	1e59      	subs	r1, r3, #1
    125a:	4599      	cmp	r9, r3
    125c:	910a      	str	r1, [sp, #40]	; 0x28
    125e:	db07      	blt.n	1270 <z_vprintk+0x2b4>
			if (padding == PAD_ZERO_BEFORE) {
    1260:	f1b8 0f01 	cmp.w	r8, #1
    1264:	d106      	bne.n	1274 <z_vprintk+0x2b8>
				out('0', ctx);
    1266:	4659      	mov	r1, fp
    1268:	2030      	movs	r0, #48	; 0x30
    126a:	920b      	str	r2, [sp, #44]	; 0x2c
				out(' ', ctx);
    126c:	47a8      	blx	r5
    126e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
			nibble += nibble > 9 ? 87 : 48;
    1270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1272:	e7b2      	b.n	11da <z_vprintk+0x21e>
			} else if (padding == PAD_SPACE_BEFORE) {
    1274:	f1b8 0f02 	cmp.w	r8, #2
    1278:	d1fa      	bne.n	1270 <z_vprintk+0x2b4>
				out(' ', ctx);
    127a:	4659      	mov	r1, fp
    127c:	2020      	movs	r0, #32
    127e:	920b      	str	r2, [sp, #44]	; 0x2c
    1280:	e7f4      	b.n	126c <z_vprintk+0x2b0>
			found_largest_digit = 1;
    1282:	9607      	str	r6, [sp, #28]
    1284:	e7a9      	b.n	11da <z_vprintk+0x21e>
				char *s = va_arg(ap, char *);
    1286:	f854 6b04 	ldr.w	r6, [r4], #4
				while (*s) {
    128a:	46b2      	mov	sl, r6
    128c:	4653      	mov	r3, sl
    128e:	f81a 0b01 	ldrb.w	r0, [sl], #1
    1292:	b968      	cbnz	r0, 12b0 <z_vprintk+0x2f4>
				if (padding == PAD_SPACE_AFTER) {
    1294:	f1b8 0f03 	cmp.w	r8, #3
    1298:	d121      	bne.n	12de <z_vprintk+0x322>
					int remaining = min_width - (s - start);
    129a:	1b9e      	subs	r6, r3, r6
    129c:	eba9 0606 	sub.w	r6, r9, r6
					while (remaining-- > 0) {
    12a0:	2e00      	cmp	r6, #0
    12a2:	f77f ae97 	ble.w	fd4 <z_vprintk+0x18>
						out(' ', ctx);
    12a6:	4659      	mov	r1, fp
    12a8:	2020      	movs	r0, #32
    12aa:	47a8      	blx	r5
    12ac:	3e01      	subs	r6, #1
    12ae:	e7f7      	b.n	12a0 <z_vprintk+0x2e4>
					out((int)(*s++), ctx);
    12b0:	4659      	mov	r1, fp
    12b2:	47a8      	blx	r5
    12b4:	e7ea      	b.n	128c <z_vprintk+0x2d0>
				out(c, ctx);
    12b6:	4659      	mov	r1, fp
    12b8:	f854 0b04 	ldr.w	r0, [r4], #4
    12bc:	e6ae      	b.n	101c <z_vprintk+0x60>
				out((int)'%', ctx);
    12be:	4659      	mov	r1, fp
    12c0:	e6ac      	b.n	101c <z_vprintk+0x60>
				length_mod = 0;
    12c2:	4637      	mov	r7, r6
				padding = PAD_NONE;
    12c4:	46b0      	mov	r8, r6
				min_width = -1;
    12c6:	f04f 39ff 	mov.w	r9, #4294967295
				might_format = 1;
    12ca:	2601      	movs	r6, #1
    12cc:	e68a      	b.n	fe4 <z_vprintk+0x28>
			switch (*fmt) {
    12ce:	f04f 0803 	mov.w	r8, #3
    12d2:	e687      	b.n	fe4 <z_vprintk+0x28>
					padding = PAD_ZERO_BEFORE;
    12d4:	f04f 0801 	mov.w	r8, #1
    12d8:	e684      	b.n	fe4 <z_vprintk+0x28>
					length_mod = 'L';
    12da:	274c      	movs	r7, #76	; 0x4c
    12dc:	e682      	b.n	fe4 <z_vprintk+0x28>
			might_format = 0;
    12de:	4606      	mov	r6, r0
		++fmt;
    12e0:	e680      	b.n	fe4 <z_vprintk+0x28>
    12e2:	bf00      	nop

000012e4 <vprintk>:
{
    12e4:	b507      	push	{r0, r1, r2, lr}
    12e6:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    12e8:	2100      	movs	r1, #0
{
    12ea:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    12ec:	9101      	str	r1, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
    12ee:	4803      	ldr	r0, [pc, #12]	; (12fc <vprintk+0x18>)
    12f0:	a901      	add	r1, sp, #4
    12f2:	f7ff fe63 	bl	fbc <z_vprintk>
}
    12f6:	b003      	add	sp, #12
    12f8:	f85d fb04 	ldr.w	pc, [sp], #4
    12fc:	00000f05 	.word	0x00000f05

00001300 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    1300:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    1302:	2500      	movs	r5, #0
{
    1304:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    1306:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    130a:	4604      	mov	r4, r0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    130c:	a901      	add	r1, sp, #4
    130e:	4805      	ldr	r0, [pc, #20]	; (1324 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    1310:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    1312:	f7ff fe53 	bl	fbc <z_vprintk>

	if (ctx.count < ctx.max) {
    1316:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    131a:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    131c:	bfb8      	it	lt
    131e:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    1320:	b005      	add	sp, #20
    1322:	bd30      	pop	{r4, r5, pc}
    1324:	00010db7 	.word	0x00010db7

00001328 <nordicsemi_nrf53_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    1328:	f04f 0320 	mov.w	r3, #32
    132c:	f3ef 8111 	mrs	r1, BASEPRI
    1330:	f383 8811 	msr	BASEPRI, r3
    1334:	f3bf 8f6f 	isb	sy
	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_CACHE
#ifdef CONFIG_SOC_NRF5340_CPUAPP
	/* Enable the instruction & data cache */
	NRF_CACHE->ENABLE = CACHE_ENABLE_ENABLE_Msk;
    1338:	2301      	movs	r3, #1
    133a:	4a09      	ldr	r2, [pc, #36]	; (1360 <nordicsemi_nrf53_init+0x38>)
    133c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
#endif /* CONFIG_SOC_NRF5340_CPUNET */
#endif

#if defined(CONFIG_SOC_NRF5340_CPUAPP) && \
	!defined(CONFIG_TRUSTED_EXECUTION_NONSECURE)
	*((u32_t *)0x500046D0) = 0x1;
    1340:	f502 525b 	add.w	r2, r2, #14016	; 0x36c0
    1344:	3210      	adds	r2, #16
#endif

#if defined(CONFIG_SOC_DCDC_NRF53X_APP)
	NRF_REGULATORS->VREGMAIN.DCDCEN = 1;
    1346:	6353      	str	r3, [r2, #52]	; 0x34
	*((u32_t *)0x500046D0) = 0x1;
    1348:	6013      	str	r3, [r2, #0]
#endif
#if defined(CONFIG_SOC_DCDC_NRF53X_NET)
	NRF_REGULATORS->VREGRADIO.DCDCEN = 1;
    134a:	f8c2 3234 	str.w	r3, [r2, #564]	; 0x234
#endif
#if defined(CONFIG_SOC_DCDC_NRF53X_HV)
	NRF_REGULATORS->VREGH.DCDCEN = 1;
    134e:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1352:	f381 8811 	msr	BASEPRI, r1
    1356:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    135a:	2000      	movs	r0, #0
    135c:	4770      	bx	lr
    135e:	bf00      	nop
    1360:	50001000 	.word	0x50001000

00001364 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1364:	b148      	cbz	r0, 137a <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    1366:	4b05      	ldr	r3, [pc, #20]	; (137c <arch_busy_wait+0x18>)
    1368:	681a      	ldr	r2, [r3, #0]
    136a:	4b05      	ldr	r3, [pc, #20]	; (1380 <arch_busy_wait+0x1c>)
    136c:	fbb2 f2f3 	udiv	r2, r2, r3
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    1370:	4b04      	ldr	r3, [pc, #16]	; (1384 <arch_busy_wait+0x20>)
    delay_cycles(cycles);
    1372:	4350      	muls	r0, r2
    1374:	f043 0301 	orr.w	r3, r3, #1
    1378:	4718      	bx	r3

void arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    137a:	4770      	bx	lr
    137c:	200002bc 	.word	0x200002bc
    1380:	000f4240 	.word	0x000f4240
    1384:	00015730 	.word	0x00015730

00001388 <nvs_prev_ate>:

/* walking through allocation entry list, from newest to oldest entries
 * read ate from addr, modify addr to the previous ate
 */
static int nvs_prev_ate(struct nvs_fs *fs, u32_t *addr, struct nvs_ate *ate)
{
    1388:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    138c:	2308      	movs	r3, #8
{
    138e:	460d      	mov	r5, r1
    1390:	b085      	sub	sp, #20
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    1392:	6809      	ldr	r1, [r1, #0]
{
    1394:	4607      	mov	r7, r0
	int rc;
	struct nvs_ate close_ate, end_ate;
	u32_t data_end_addr, ate_end_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    1396:	7c04      	ldrb	r4, [r0, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    1398:	f00f ffc3 	bl	11322 <nvs_flash_rd>

	rc = nvs_flash_ate_rd(fs, *addr, ate);
	if (rc) {
    139c:	b968      	cbnz	r0, 13ba <nvs_prev_ate+0x32>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    139e:	2108      	movs	r1, #8
    13a0:	4620      	mov	r0, r4
    13a2:	f010 f80a 	bl	113ba <nvs_al_size.isra.0>
		return rc;
	}

	*addr += ate_size;
    13a6:	6829      	ldr	r1, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
    13a8:	89bb      	ldrh	r3, [r7, #12]
	*addr += ate_size;
    13aa:	4401      	add	r1, r0
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
    13ac:	b28a      	uxth	r2, r1
    13ae:	1a1b      	subs	r3, r3, r0
    13b0:	429a      	cmp	r2, r3
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    13b2:	4606      	mov	r6, r0
	*addr += ate_size;
    13b4:	6029      	str	r1, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
    13b6:	d003      	beq.n	13c0 <nvs_prev_ate+0x38>
		return 0;
    13b8:	2000      	movs	r0, #0
	/* remark: if there was absolutely no valid data in the sector *addr
	 * is kept at sector_end - 2*ate_size, the next read will contain
	 * invalid data and continue with a sector jump
	 */
	return 0;
}
    13ba:	b005      	add	sp, #20
    13bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
    13c0:	0c0b      	lsrs	r3, r1, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
    13c2:	bf09      	itett	eq
    13c4:	89fb      	ldrheq	r3, [r7, #14]
		*addr -= (1 << ADDR_SECT_SHIFT);
    13c6:	f5a1 3180 	subne.w	r1, r1, #65536	; 0x10000
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
    13ca:	f103 33ff 	addeq.w	r3, r3, #4294967295
    13ce:	eb01 4103 	addeq.w	r1, r1, r3, lsl #16
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    13d2:	466a      	mov	r2, sp
    13d4:	2308      	movs	r3, #8
    13d6:	4638      	mov	r0, r7
    13d8:	6029      	str	r1, [r5, #0]
    13da:	f00f ffa2 	bl	11322 <nvs_flash_rd>
	if (rc) {
    13de:	2800      	cmp	r0, #0
    13e0:	d1eb      	bne.n	13ba <nvs_prev_ate+0x32>
    13e2:	466a      	mov	r2, sp
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    13e4:	4603      	mov	r3, r0
		if (data8[i] != value) {
    13e6:	f812 1b01 	ldrb.w	r1, [r2], #1
    13ea:	29ff      	cmp	r1, #255	; 0xff
    13ec:	d115      	bne.n	141a <nvs_prev_ate+0x92>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    13ee:	3301      	adds	r3, #1
    13f0:	2b08      	cmp	r3, #8
    13f2:	d1f8      	bne.n	13e6 <nvs_prev_ate+0x5e>
		*addr = fs->ate_wra;
    13f4:	687b      	ldr	r3, [r7, #4]
    13f6:	602b      	str	r3, [r5, #0]
		return 0;
    13f8:	e7df      	b.n	13ba <nvs_prev_ate+0x32>
		if (close_ate.offset < (fs->sector_size - ate_size) &&
    13fa:	89bb      	ldrh	r3, [r7, #12]
    13fc:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    1400:	1b9b      	subs	r3, r3, r6
    1402:	4299      	cmp	r1, r3
    1404:	d20f      	bcs.n	1426 <nvs_prev_ate+0x9e>
		    !(close_ate.offset % ate_size)) {
    1406:	fbb1 f3f6 	udiv	r3, r1, r6
    140a:	fb06 1313 	mls	r3, r6, r3, r1
		if (close_ate.offset < (fs->sector_size - ate_size) &&
    140e:	b953      	cbnz	r3, 1426 <nvs_prev_ate+0x9e>
			(*addr) &= ADDR_SECT_MASK;
    1410:	0c24      	lsrs	r4, r4, #16
    1412:	0424      	lsls	r4, r4, #16
			(*addr) += close_ate.offset;
    1414:	440c      	add	r4, r1
    1416:	602c      	str	r4, [r5, #0]
			return 0;
    1418:	e7cf      	b.n	13ba <nvs_prev_ate+0x32>
	if (!nvs_ate_crc8_check(&close_ate)) {
    141a:	4668      	mov	r0, sp
    141c:	f00f ffb8 	bl	11390 <nvs_ate_crc8_check>
    1420:	682c      	ldr	r4, [r5, #0]
    1422:	2800      	cmp	r0, #0
    1424:	d0e9      	beq.n	13fa <nvs_prev_ate+0x72>
	data_end_addr = *addr & ADDR_SECT_MASK;
    1426:	4b10      	ldr	r3, [pc, #64]	; (1468 <nvs_prev_ate+0xe0>)
	*addr -= ate_size;
    1428:	1ba4      	subs	r4, r4, r6
			data_end_addr &= ADDR_SECT_MASK;
    142a:	4699      	mov	r9, r3
	*addr -= ate_size;
    142c:	602c      	str	r4, [r5, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
    142e:	ea04 0803 	and.w	r8, r4, r3
	while (ate_end_addr > data_end_addr) {
    1432:	45a0      	cmp	r8, r4
    1434:	d2c0      	bcs.n	13b8 <nvs_prev_ate+0x30>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    1436:	2308      	movs	r3, #8
    1438:	4621      	mov	r1, r4
    143a:	4638      	mov	r0, r7
    143c:	eb0d 0203 	add.w	r2, sp, r3
    1440:	f00f ff6f 	bl	11322 <nvs_flash_rd>
		if (rc) {
    1444:	2800      	cmp	r0, #0
    1446:	d1b8      	bne.n	13ba <nvs_prev_ate+0x32>
		if (!nvs_ate_crc8_check(&end_ate)) {
    1448:	a802      	add	r0, sp, #8
    144a:	f00f ffa1 	bl	11390 <nvs_ate_crc8_check>
    144e:	b940      	cbnz	r0, 1462 <nvs_prev_ate+0xda>
			data_end_addr += end_ate.offset + end_ate.len;
    1450:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    1454:	f8bd 200c 	ldrh.w	r2, [sp, #12]
			data_end_addr &= ADDR_SECT_MASK;
    1458:	ea08 0809 	and.w	r8, r8, r9
			data_end_addr += end_ate.offset + end_ate.len;
    145c:	4413      	add	r3, r2
    145e:	4498      	add	r8, r3
			*addr = ate_end_addr;
    1460:	602c      	str	r4, [r5, #0]
		ate_end_addr -= ate_size;
    1462:	1ba4      	subs	r4, r4, r6
    1464:	e7e5      	b.n	1432 <nvs_prev_ate+0xaa>
    1466:	bf00      	nop
    1468:	ffff0000 	.word	0xffff0000

0000146c <nvs_gc>:
/* garbage collection: the address ate_wra has been updated to the new sector
 * that has just been started. The data to gc is in the sector after this new
 * sector.
 */
static int nvs_gc(struct nvs_fs *fs)
{
    146c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct nvs_ate close_ate, gc_ate, wlk_ate;
	u32_t sec_addr, gc_addr, gc_prev_addr, wlk_addr, wlk_prev_addr,
	      data_addr, stop_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    1470:	2108      	movs	r1, #8
{
    1472:	b095      	sub	sp, #84	; 0x54
    1474:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    1476:	7c00      	ldrb	r0, [r0, #16]
    1478:	f00f ff9f 	bl	113ba <nvs_al_size.isra.0>
    147c:	4606      	mov	r6, r0

	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    147e:	686b      	ldr	r3, [r5, #4]
	nvs_sector_advance(fs, &sec_addr);
    1480:	89e8      	ldrh	r0, [r5, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    1482:	0c1b      	lsrs	r3, r3, #16
    1484:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &sec_addr);
    1486:	a903      	add	r1, sp, #12
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    1488:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
    148a:	f00f ffa0 	bl	113ce <nvs_sector_advance.isra.0>
	gc_addr = sec_addr + fs->sector_size - ate_size;
    148e:	9b03      	ldr	r3, [sp, #12]
    1490:	89a9      	ldrh	r1, [r5, #12]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    1492:	af06      	add	r7, sp, #24
	gc_addr = sec_addr + fs->sector_size - ate_size;
    1494:	4419      	add	r1, r3
    1496:	1b89      	subs	r1, r1, r6
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    1498:	2308      	movs	r3, #8
    149a:	463a      	mov	r2, r7
    149c:	4628      	mov	r0, r5
	gc_addr = sec_addr + fs->sector_size - ate_size;
    149e:	9104      	str	r1, [sp, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    14a0:	f00f ff3f 	bl	11322 <nvs_flash_rd>

	/* if the sector is not closed don't do gc */
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
	if (rc < 0) {
    14a4:	1e04      	subs	r4, r0, #0
    14a6:	db71      	blt.n	158c <nvs_gc+0x120>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    14a8:	2300      	movs	r3, #0
		if (data8[i] != value) {
    14aa:	5cfa      	ldrb	r2, [r7, r3]
    14ac:	2aff      	cmp	r2, #255	; 0xff
    14ae:	d171      	bne.n	1594 <nvs_gc+0x128>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    14b0:	3301      	adds	r3, #1
    14b2:	2b08      	cmp	r3, #8
    14b4:	d1f9      	bne.n	14aa <nvs_gc+0x3e>
		return rc;
	}

	rc = nvs_ate_cmp_const(&close_ate, 0xff);
	if (!rc) {
		rc = nvs_flash_erase_sector(fs, sec_addr);
    14b6:	4628      	mov	r0, r5
    14b8:	9903      	ldr	r1, [sp, #12]
    14ba:	f00f ffb7 	bl	1142c <nvs_flash_erase_sector>
    14be:	4604      	mov	r4, r0
		if (rc) {
    14c0:	e064      	b.n	158c <nvs_gc+0x120>
		bytes_to_copy = MIN(block_size, len);
    14c2:	4557      	cmp	r7, sl
    14c4:	463e      	mov	r6, r7
    14c6:	bf28      	it	cs
    14c8:	4656      	movcs	r6, sl
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
    14ca:	4641      	mov	r1, r8
    14cc:	4633      	mov	r3, r6
    14ce:	4628      	mov	r0, r5
    14d0:	aa0c      	add	r2, sp, #48	; 0x30
    14d2:	f00f ff26 	bl	11322 <nvs_flash_rd>
		if (rc) {
    14d6:	4604      	mov	r4, r0
    14d8:	2800      	cmp	r0, #0
    14da:	d157      	bne.n	158c <nvs_gc+0x120>
	if (!len) {
    14dc:	b136      	cbz	r6, 14ec <nvs_gc+0x80>
    14de:	4633      	mov	r3, r6
    14e0:	4628      	mov	r0, r5
    14e2:	68a9      	ldr	r1, [r5, #8]
    14e4:	aa0c      	add	r2, sp, #48	; 0x30
    14e6:	f00f ffc7 	bl	11478 <nvs_flash_al_wrt.part.0>
    14ea:	4604      	mov	r4, r0
	fs->data_wra += nvs_al_size(fs, len);
    14ec:	4631      	mov	r1, r6
    14ee:	7c28      	ldrb	r0, [r5, #16]
    14f0:	f00f ff63 	bl	113ba <nvs_al_size.isra.0>
    14f4:	68aa      	ldr	r2, [r5, #8]
    14f6:	4402      	add	r2, r0
    14f8:	60aa      	str	r2, [r5, #8]
		if (rc) {
    14fa:	2c00      	cmp	r4, #0
    14fc:	d146      	bne.n	158c <nvs_gc+0x120>
		len -= bytes_to_copy;
    14fe:	ebaa 0a06 	sub.w	sl, sl, r6
		addr += bytes_to_copy;
    1502:	44b0      	add	r8, r6
    1504:	e038      	b.n	1578 <nvs_gc+0x10c>
				return rc;
			}
		}

		/* stop gc at end of the sector */
		if (gc_prev_addr == stop_addr) {
    1506:	9b01      	ldr	r3, [sp, #4]
    1508:	455b      	cmp	r3, fp
    150a:	d0d4      	beq.n	14b6 <nvs_gc+0x4a>
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    150c:	4628      	mov	r0, r5
    150e:	aa08      	add	r2, sp, #32
    1510:	a904      	add	r1, sp, #16
		gc_prev_addr = gc_addr;
    1512:	f8dd b010 	ldr.w	fp, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    1516:	f7ff ff37 	bl	1388 <nvs_prev_ate>
		if (rc) {
    151a:	4604      	mov	r4, r0
    151c:	2800      	cmp	r0, #0
    151e:	d135      	bne.n	158c <nvs_gc+0x120>
		wlk_addr = fs->ate_wra;
    1520:	686b      	ldr	r3, [r5, #4]
    1522:	9305      	str	r3, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    1524:	4628      	mov	r0, r5
    1526:	aa0a      	add	r2, sp, #40	; 0x28
    1528:	a905      	add	r1, sp, #20
			wlk_prev_addr = wlk_addr;
    152a:	9f05      	ldr	r7, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    152c:	f7ff ff2c 	bl	1388 <nvs_prev_ate>
			if (rc) {
    1530:	4604      	mov	r4, r0
    1532:	bb58      	cbnz	r0, 158c <nvs_gc+0x120>
			if ((wlk_ate.id == gc_ate.id) &&
    1534:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
    1538:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    153c:	429a      	cmp	r2, r3
    153e:	d1f1      	bne.n	1524 <nvs_gc+0xb8>
			    (!nvs_ate_crc8_check(&wlk_ate))) {
    1540:	a80a      	add	r0, sp, #40	; 0x28
    1542:	f00f ff25 	bl	11390 <nvs_ate_crc8_check>
			if ((wlk_ate.id == gc_ate.id) &&
    1546:	2800      	cmp	r0, #0
    1548:	d1ec      	bne.n	1524 <nvs_gc+0xb8>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
    154a:	455f      	cmp	r7, fp
    154c:	d1db      	bne.n	1506 <nvs_gc+0x9a>
    154e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    1552:	2b00      	cmp	r3, #0
    1554:	d0d7      	beq.n	1506 <nvs_gc+0x9a>
			data_addr += gc_ate.offset;
    1556:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    155a:	ea0b 0809 	and.w	r8, fp, r9
			data_addr += gc_ate.offset;
    155e:	4498      	add	r8, r3
			gc_ate.offset = (u16_t)(fs->data_wra & ADDR_OFFS_MASK);
    1560:	68ab      	ldr	r3, [r5, #8]
			nvs_ate_crc8_update(&gc_ate);
    1562:	a808      	add	r0, sp, #32
			gc_ate.offset = (u16_t)(fs->data_wra & ADDR_OFFS_MASK);
    1564:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			nvs_ate_crc8_update(&gc_ate);
    1568:	f00f ff1e 	bl	113a8 <nvs_ate_crc8_update>
	block_size = NVS_BLOCK_SIZE & ~(fs->write_block_size - 1U);
    156c:	7c2f      	ldrb	r7, [r5, #16]
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
    156e:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
	block_size = NVS_BLOCK_SIZE & ~(fs->write_block_size - 1U);
    1572:	427f      	negs	r7, r7
    1574:	f007 0720 	and.w	r7, r7, #32
	while (len) {
    1578:	f1ba 0f00 	cmp.w	sl, #0
    157c:	d1a1      	bne.n	14c2 <nvs_gc+0x56>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
    157e:	4628      	mov	r0, r5
    1580:	a908      	add	r1, sp, #32
    1582:	f00f ffbd 	bl	11500 <nvs_flash_ate_wrt>
			if (rc) {
    1586:	4604      	mov	r4, r0
    1588:	2800      	cmp	r0, #0
    158a:	d0bc      	beq.n	1506 <nvs_gc+0x9a>
	rc = nvs_flash_erase_sector(fs, sec_addr);
	if (rc) {
		return rc;
	}
	return 0;
}
    158c:	4620      	mov	r0, r4
    158e:	b015      	add	sp, #84	; 0x54
    1590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	stop_addr = gc_addr - ate_size;
    1594:	9b04      	ldr	r3, [sp, #16]
	gc_addr += close_ate.offset;
    1596:	f8bd 101a 	ldrh.w	r1, [sp, #26]
	stop_addr = gc_addr - ate_size;
    159a:	1b9a      	subs	r2, r3, r6
    159c:	9201      	str	r2, [sp, #4]
	gc_addr &= ADDR_SECT_MASK;
    159e:	4a03      	ldr	r2, [pc, #12]	; (15ac <nvs_gc+0x140>)
    15a0:	4013      	ands	r3, r2
	gc_addr += close_ate.offset;
    15a2:	440b      	add	r3, r1
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    15a4:	4691      	mov	r9, r2
	gc_addr += close_ate.offset;
    15a6:	9304      	str	r3, [sp, #16]
    15a8:	e7b0      	b.n	150c <nvs_gc+0xa0>
    15aa:	bf00      	nop
    15ac:	ffff0000 	.word	0xffff0000

000015b0 <nvs_init>:
	}
	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
    15b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    15b4:	4604      	mov	r4, r0
    15b6:	460d      	mov	r5, r1
    15b8:	b087      	sub	sp, #28

	int rc;
	struct flash_pages_info info;

	k_mutex_init(&fs->nvs_lock);
    15ba:	f100 0614 	add.w	r6, r0, #20
	return z_impl_k_mutex_init(mutex);
    15be:	4630      	mov	r0, r6
    15c0:	f013 fcf1 	bl	14fa6 <z_impl_k_mutex_init>
    15c4:	4628      	mov	r0, r5
    15c6:	f00c f963 	bl	d890 <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
    15ca:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
    15cc:	b948      	cbnz	r0, 15e2 <nvs_init+0x32>
		LOG_ERR("No valid flash device found");
    15ce:	2145      	movs	r1, #69	; 0x45
    15d0:	487f      	ldr	r0, [pc, #508]	; (17d0 <nvs_init+0x220>)
    15d2:	f00f fc03 	bl	10ddc <printk>
		return -ENXIO;
    15d6:	f06f 0505 	mvn.w	r5, #5
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
    15da:	4628      	mov	r0, r5
    15dc:	b007      	add	sp, #28
    15de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
static inline size_t z_impl_flash_get_write_block_size(struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->driver_api;

	return api->write_block_size;
    15e2:	6883      	ldr	r3, [r0, #8]
	fs->write_block_size = flash_get_write_block_size(fs->flash_device);
    15e4:	7d1b      	ldrb	r3, [r3, #20]
	if (fs->write_block_size > NVS_BLOCK_SIZE) {
    15e6:	2b20      	cmp	r3, #32
	fs->write_block_size = flash_get_write_block_size(fs->flash_device);
    15e8:	7423      	strb	r3, [r4, #16]
	if (fs->write_block_size > NVS_BLOCK_SIZE) {
    15ea:	d906      	bls.n	15fa <nvs_init+0x4a>
		LOG_ERR("Unsupported write block size");
    15ec:	2145      	movs	r1, #69	; 0x45
    15ee:	4879      	ldr	r0, [pc, #484]	; (17d4 <nvs_init+0x224>)
		LOG_ERR("Configuration error - sector count");
    15f0:	f00f fbf4 	bl	10ddc <printk>
		return -EINVAL;
    15f4:	f06f 0515 	mvn.w	r5, #21
    15f8:	e7ef      	b.n	15da <nvs_init+0x2a>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
    15fa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    15fc:	6821      	ldr	r1, [r4, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
    15fe:	aa03      	add	r2, sp, #12
    1600:	f012 fec5 	bl	1438e <z_impl_flash_get_page_info_by_offs>
	if (rc) {
    1604:	b110      	cbz	r0, 160c <nvs_init+0x5c>
		LOG_ERR("Unable to get page info");
    1606:	2145      	movs	r1, #69	; 0x45
    1608:	4873      	ldr	r0, [pc, #460]	; (17d8 <nvs_init+0x228>)
    160a:	e7f1      	b.n	15f0 <nvs_init+0x40>
	if (!fs->sector_size || fs->sector_size % info.size) {
    160c:	89a3      	ldrh	r3, [r4, #12]
    160e:	b12b      	cbz	r3, 161c <nvs_init+0x6c>
    1610:	9a04      	ldr	r2, [sp, #16]
    1612:	fbb3 f5f2 	udiv	r5, r3, r2
    1616:	fb02 3515 	mls	r5, r2, r5, r3
    161a:	b115      	cbz	r5, 1622 <nvs_init+0x72>
		LOG_ERR("Invalid sector size");
    161c:	2145      	movs	r1, #69	; 0x45
    161e:	486f      	ldr	r0, [pc, #444]	; (17dc <nvs_init+0x22c>)
    1620:	e7e6      	b.n	15f0 <nvs_init+0x40>
	if (fs->sector_count < 2) {
    1622:	89e3      	ldrh	r3, [r4, #14]
    1624:	2b01      	cmp	r3, #1
    1626:	d802      	bhi.n	162e <nvs_init+0x7e>
		LOG_ERR("Configuration error - sector count");
    1628:	2145      	movs	r1, #69	; 0x45
    162a:	486d      	ldr	r0, [pc, #436]	; (17e0 <nvs_init+0x230>)
    162c:	e7e0      	b.n	15f0 <nvs_init+0x40>
	u32_t addr = 0U;
    162e:	9500      	str	r5, [sp, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    1630:	f04f 32ff 	mov.w	r2, #4294967295
    1634:	f04f 33ff 	mov.w	r3, #4294967295
    1638:	4630      	mov	r0, r6
    163a:	f00c fcf1 	bl	e020 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    163e:	2108      	movs	r1, #8
    1640:	7c20      	ldrb	r0, [r4, #16]
    1642:	f00f feba 	bl	113ba <nvs_al_size.isra.0>
	u16_t i, closed_sectors = 0;
    1646:	46a9      	mov	r9, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    1648:	4607      	mov	r7, r0
	for (i = 0; i < fs->sector_count; i++) {
    164a:	89e3      	ldrh	r3, [r4, #14]
    164c:	fa1f f885 	uxth.w	r8, r5
    1650:	4543      	cmp	r3, r8
    1652:	d863      	bhi.n	171c <nvs_init+0x16c>
	if (closed_sectors == fs->sector_count) {
    1654:	89e3      	ldrh	r3, [r4, #14]
    1656:	454b      	cmp	r3, r9
    1658:	f000 809f 	beq.w	179a <nvs_init+0x1ea>
	if (i == fs->sector_count) {
    165c:	4598      	cmp	r8, r3
    165e:	d10a      	bne.n	1676 <nvs_init+0xc6>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, 0xff,
    1660:	9900      	ldr	r1, [sp, #0]
    1662:	2208      	movs	r2, #8
    1664:	4620      	mov	r0, r4
    1666:	1bc9      	subs	r1, r1, r7
    1668:	f00f febc 	bl	113e4 <nvs_flash_cmp_const.constprop.0>
		if (!rc) {
    166c:	b918      	cbnz	r0, 1676 <nvs_init+0xc6>
			nvs_sector_advance(fs, &addr);
    166e:	4669      	mov	r1, sp
    1670:	89e0      	ldrh	r0, [r4, #14]
    1672:	f00f feac 	bl	113ce <nvs_sector_advance.isra.0>
	fs->ate_wra = addr - ate_size;
    1676:	9b00      	ldr	r3, [sp, #0]
    1678:	1bda      	subs	r2, r3, r7
    167a:	6062      	str	r2, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
    167c:	4a59      	ldr	r2, [pc, #356]	; (17e4 <nvs_init+0x234>)
			fs->data_wra = addr & ADDR_SECT_MASK;
    167e:	4690      	mov	r8, r2
	fs->data_wra = addr & ADDR_SECT_MASK;
    1680:	4013      	ands	r3, r2
    1682:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
    1684:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    1688:	4299      	cmp	r1, r3
    168a:	d30e      	bcc.n	16aa <nvs_init+0xfa>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    168c:	2308      	movs	r3, #8
    168e:	4620      	mov	r0, r4
    1690:	aa01      	add	r2, sp, #4
    1692:	f00f fe46 	bl	11322 <nvs_flash_rd>
		if (rc) {
    1696:	4605      	mov	r5, r0
    1698:	bb18      	cbnz	r0, 16e2 <nvs_init+0x132>
    169a:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
    169c:	f813 2b01 	ldrb.w	r2, [r3], #1
    16a0:	2aff      	cmp	r2, #255	; 0xff
    16a2:	d17d      	bne.n	17a0 <nvs_init+0x1f0>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    16a4:	3501      	adds	r5, #1
    16a6:	2d08      	cmp	r5, #8
    16a8:	d1f8      	bne.n	169c <nvs_init+0xec>
	while (fs->ate_wra > fs->data_wra) {
    16aa:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
    16ae:	428a      	cmp	r2, r1
    16b0:	d906      	bls.n	16c0 <nvs_init+0x110>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, 0xff, empty_len);
    16b2:	4620      	mov	r0, r4
    16b4:	1a52      	subs	r2, r2, r1
    16b6:	f00f fe95 	bl	113e4 <nvs_flash_cmp_const.constprop.0>
		if (rc < 0) {
    16ba:	1e05      	subs	r5, r0, #0
    16bc:	db11      	blt.n	16e2 <nvs_init+0x132>
		if (!rc) {
    16be:	d14f      	bne.n	1760 <nvs_init+0x1b0>
	addr = fs->ate_wra & ADDR_SECT_MASK;
    16c0:	6863      	ldr	r3, [r4, #4]
    16c2:	f8df 8120 	ldr.w	r8, [pc, #288]	; 17e4 <nvs_init+0x234>
	nvs_sector_advance(fs, &addr);
    16c6:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
    16c8:	ea03 0308 	and.w	r3, r3, r8
	nvs_sector_advance(fs, &addr);
    16cc:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
    16ce:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
    16d0:	f00f fe7d 	bl	113ce <nvs_sector_advance.isra.0>
	rc = nvs_flash_cmp_const(fs, addr, 0xff, fs->sector_size);
    16d4:	4620      	mov	r0, r4
    16d6:	89a2      	ldrh	r2, [r4, #12]
    16d8:	9900      	ldr	r1, [sp, #0]
    16da:	f00f fe83 	bl	113e4 <nvs_flash_cmp_const.constprop.0>
	if (rc < 0) {
    16de:	1e05      	subs	r5, r0, #0
    16e0:	da43      	bge.n	176a <nvs_init+0x1ba>
	return z_impl_k_mutex_unlock(mutex);
    16e2:	4630      	mov	r0, r6
    16e4:	f00c fd80 	bl	e1e8 <z_impl_k_mutex_unlock>
	if (rc) {
    16e8:	2d00      	cmp	r5, #0
    16ea:	f47f af76 	bne.w	15da <nvs_init+0x2a>
	fs->ready = true;
    16ee:	2301      	movs	r3, #1
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    16f0:	89e2      	ldrh	r2, [r4, #14]
	fs->ready = true;
    16f2:	7463      	strb	r3, [r4, #17]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    16f4:	2149      	movs	r1, #73	; 0x49
    16f6:	89a3      	ldrh	r3, [r4, #12]
    16f8:	483b      	ldr	r0, [pc, #236]	; (17e8 <nvs_init+0x238>)
    16fa:	f00f fb6f 	bl	10ddc <printk>
	LOG_INF("alloc wra: %d, %x",
    16fe:	6862      	ldr	r2, [r4, #4]
    1700:	2149      	movs	r1, #73	; 0x49
    1702:	b293      	uxth	r3, r2
    1704:	4839      	ldr	r0, [pc, #228]	; (17ec <nvs_init+0x23c>)
    1706:	0c12      	lsrs	r2, r2, #16
    1708:	f00f fb68 	bl	10ddc <printk>
	LOG_INF("data wra: %d, %x",
    170c:	68a2      	ldr	r2, [r4, #8]
    170e:	2149      	movs	r1, #73	; 0x49
    1710:	b293      	uxth	r3, r2
    1712:	4837      	ldr	r0, [pc, #220]	; (17f0 <nvs_init+0x240>)
    1714:	0c12      	lsrs	r2, r2, #16
    1716:	f00f fb61 	bl	10ddc <printk>
	return 0;
    171a:	e75e      	b.n	15da <nvs_init+0x2a>
		       (u16_t)(fs->sector_size - ate_size);
    171c:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
    171e:	042b      	lsls	r3, r5, #16
		       (u16_t)(fs->sector_size - ate_size);
    1720:	1bc9      	subs	r1, r1, r7
		addr = (i << ADDR_SECT_SHIFT) +
    1722:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, 0xff,
    1726:	2208      	movs	r2, #8
    1728:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
    172a:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, 0xff,
    172c:	f00f fe5a 	bl	113e4 <nvs_flash_cmp_const.constprop.0>
		if (rc) {
    1730:	b170      	cbz	r0, 1750 <nvs_init+0x1a0>
			nvs_sector_advance(fs, &addr);
    1732:	4669      	mov	r1, sp
    1734:	89e0      	ldrh	r0, [r4, #14]
    1736:	f00f fe4a 	bl	113ce <nvs_sector_advance.isra.0>
			closed_sectors++;
    173a:	f109 0901 	add.w	r9, r9, #1
			rc = nvs_flash_cmp_const(fs, addr, 0xff,
    173e:	2208      	movs	r2, #8
    1740:	4620      	mov	r0, r4
    1742:	9900      	ldr	r1, [sp, #0]
			closed_sectors++;
    1744:	fa1f f989 	uxth.w	r9, r9
			rc = nvs_flash_cmp_const(fs, addr, 0xff,
    1748:	f00f fe4c 	bl	113e4 <nvs_flash_cmp_const.constprop.0>
			if (!rc) {
    174c:	2800      	cmp	r0, #0
    174e:	d081      	beq.n	1654 <nvs_init+0xa4>
	for (i = 0; i < fs->sector_count; i++) {
    1750:	3501      	adds	r5, #1
    1752:	e77a      	b.n	164a <nvs_init+0x9a>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    1754:	f1b9 0f00 	cmp.w	r9, #0
    1758:	d037      	beq.n	17ca <nvs_init+0x21a>
				rc = -ESPIPE;
    175a:	f06f 051c 	mvn.w	r5, #28
    175e:	e7c0      	b.n	16e2 <nvs_init+0x132>
		fs->data_wra += fs->write_block_size;
    1760:	68a3      	ldr	r3, [r4, #8]
    1762:	7c22      	ldrb	r2, [r4, #16]
    1764:	4413      	add	r3, r2
    1766:	60a3      	str	r3, [r4, #8]
    1768:	e79f      	b.n	16aa <nvs_init+0xfa>
	if (rc) {
    176a:	d0ba      	beq.n	16e2 <nvs_init+0x132>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    176c:	4620      	mov	r0, r4
    176e:	6861      	ldr	r1, [r4, #4]
    1770:	f00f fe5c 	bl	1142c <nvs_flash_erase_sector>
		if (rc) {
    1774:	4605      	mov	r5, r0
    1776:	2800      	cmp	r0, #0
    1778:	d1b3      	bne.n	16e2 <nvs_init+0x132>
		fs->ate_wra &= ADDR_SECT_MASK;
    177a:	6863      	ldr	r3, [r4, #4]
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    177c:	89a0      	ldrh	r0, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
    177e:	ea03 0308 	and.w	r3, r3, r8
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    1782:	4403      	add	r3, r0
    1784:	eba3 0047 	sub.w	r0, r3, r7, lsl #1
    1788:	6060      	str	r0, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    178a:	ea00 0008 	and.w	r0, r0, r8
    178e:	60a0      	str	r0, [r4, #8]
		rc = nvs_gc(fs);
    1790:	4620      	mov	r0, r4
    1792:	f7ff fe6b 	bl	146c <nvs_gc>
    1796:	4605      	mov	r5, r0
end:
    1798:	e7a3      	b.n	16e2 <nvs_init+0x132>
		rc = -EDEADLK;
    179a:	f06f 0520 	mvn.w	r5, #32
    179e:	e7a0      	b.n	16e2 <nvs_init+0x132>
		if (!nvs_ate_crc8_check(&last_ate)) {
    17a0:	a801      	add	r0, sp, #4
    17a2:	f00f fdf5 	bl	11390 <nvs_ate_crc8_check>
    17a6:	6865      	ldr	r5, [r4, #4]
    17a8:	b978      	cbnz	r0, 17ca <nvs_init+0x21a>
			fs->data_wra = addr & ADDR_SECT_MASK;
    17aa:	9800      	ldr	r0, [sp, #0]
			fs->data_wra += last_ate.offset;
    17ac:	f8bd 2006 	ldrh.w	r2, [sp, #6]
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    17b0:	f8bd 9008 	ldrh.w	r9, [sp, #8]
			fs->data_wra = addr & ADDR_SECT_MASK;
    17b4:	ea00 0008 	and.w	r0, r0, r8
			fs->data_wra += last_ate.offset;
    17b8:	4402      	add	r2, r0
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    17ba:	4649      	mov	r1, r9
    17bc:	7c20      	ldrb	r0, [r4, #16]
    17be:	f00f fdfc 	bl	113ba <nvs_al_size.isra.0>
    17c2:	4410      	add	r0, r2
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    17c4:	42a8      	cmp	r0, r5
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    17c6:	60a0      	str	r0, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    17c8:	d0c4      	beq.n	1754 <nvs_init+0x1a4>
		fs->ate_wra -= ate_size;
    17ca:	1bed      	subs	r5, r5, r7
    17cc:	6065      	str	r5, [r4, #4]
    17ce:	e759      	b.n	1684 <nvs_init+0xd4>
    17d0:	00016335 	.word	0x00016335
    17d4:	00016356 	.word	0x00016356
    17d8:	00016378 	.word	0x00016378
    17dc:	00016395 	.word	0x00016395
    17e0:	000163ae 	.word	0x000163ae
    17e4:	ffff0000 	.word	0xffff0000
    17e8:	000163d6 	.word	0x000163d6
    17ec:	000163f2 	.word	0x000163f2
    17f0:	00016409 	.word	0x00016409

000017f4 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, u16_t id, const void *data, size_t len)
{
    17f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    17f8:	461e      	mov	r6, r3
	struct nvs_ate wlk_ate;
	u32_t wlk_addr, rd_addr;
	u16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
    17fa:	7c43      	ldrb	r3, [r0, #17]
{
    17fc:	4604      	mov	r4, r0
    17fe:	4689      	mov	r9, r1
    1800:	4690      	mov	r8, r2
    1802:	b089      	sub	sp, #36	; 0x24
	if (!fs->ready) {
    1804:	b94b      	cbnz	r3, 181a <nvs_write+0x26>
		LOG_ERR("NVS not initialized");
    1806:	2145      	movs	r1, #69	; 0x45
    1808:	4864      	ldr	r0, [pc, #400]	; (199c <nvs_write+0x1a8>)
    180a:	f00f fae7 	bl	10ddc <printk>
		return -EACCES;
    180e:	f06f 050c 	mvn.w	r5, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
    1812:	4628      	mov	r0, r5
    1814:	b009      	add	sp, #36	; 0x24
    1816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    181a:	f890 b010 	ldrb.w	fp, [r0, #16]
    181e:	2108      	movs	r1, #8
    1820:	4658      	mov	r0, fp
    1822:	f00f fdca 	bl	113ba <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 3 * ate_size)) ||
    1826:	89a3      	ldrh	r3, [r4, #12]
    1828:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    182c:	1a9b      	subs	r3, r3, r2
    182e:	42b3      	cmp	r3, r6
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    1830:	4682      	mov	sl, r0
	if ((len > (fs->sector_size - 3 * ate_size)) ||
    1832:	f0c0 80ae 	bcc.w	1992 <nvs_write+0x19e>
    1836:	b11e      	cbz	r6, 1840 <nvs_write+0x4c>
	    ((len > 0) && (data == NULL))) {
    1838:	f1b8 0f00 	cmp.w	r8, #0
    183c:	f000 80a9 	beq.w	1992 <nvs_write+0x19e>
	wlk_addr = fs->ate_wra;
    1840:	6863      	ldr	r3, [r4, #4]
    1842:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    1844:	4620      	mov	r0, r4
    1846:	aa04      	add	r2, sp, #16
    1848:	a903      	add	r1, sp, #12
		rd_addr = wlk_addr;
    184a:	9f03      	ldr	r7, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    184c:	f7ff fd9c 	bl	1388 <nvs_prev_ate>
		if (rc) {
    1850:	4605      	mov	r5, r0
    1852:	2800      	cmp	r0, #0
    1854:	d1dd      	bne.n	1812 <nvs_write+0x1e>
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
    1856:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    185a:	454b      	cmp	r3, r9
    185c:	d005      	beq.n	186a <nvs_write+0x76>
		if (wlk_addr == fs->ate_wra) {
    185e:	6862      	ldr	r2, [r4, #4]
    1860:	9b03      	ldr	r3, [sp, #12]
    1862:	429a      	cmp	r2, r3
    1864:	d1ee      	bne.n	1844 <nvs_write+0x50>
		if (len == 0) {
    1866:	b9d6      	cbnz	r6, 189e <nvs_write+0xaa>
    1868:	e7d3      	b.n	1812 <nvs_write+0x1e>
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
    186a:	a804      	add	r0, sp, #16
    186c:	f00f fd90 	bl	11390 <nvs_ate_crc8_check>
    1870:	2800      	cmp	r0, #0
    1872:	d1f4      	bne.n	185e <nvs_write+0x6a>
		if (len == 0) {
    1874:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    1878:	b17e      	cbz	r6, 189a <nvs_write+0xa6>
		} else if (len == wlk_ate.len) {
    187a:	42b3      	cmp	r3, r6
    187c:	d10f      	bne.n	189e <nvs_write+0xaa>
		rd_addr += wlk_ate.offset;
    187e:	f8bd 0012 	ldrh.w	r0, [sp, #18]
		rd_addr &= ADDR_SECT_MASK;
    1882:	0c39      	lsrs	r1, r7, #16
    1884:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
    1886:	4401      	add	r1, r0
    1888:	4633      	mov	r3, r6
    188a:	4642      	mov	r2, r8
    188c:	4620      	mov	r0, r4
    188e:	f00f fd56 	bl	1133e <nvs_flash_block_cmp>
			if (rc <= 0) {
    1892:	2800      	cmp	r0, #0
    1894:	dc03      	bgt.n	189e <nvs_write+0xaa>
    1896:	4605      	mov	r5, r0
    1898:	e7bb      	b.n	1812 <nvs_write+0x1e>
			if (wlk_ate.len == 0U) {
    189a:	2b00      	cmp	r3, #0
    189c:	d0b9      	beq.n	1812 <nvs_write+0x1e>
	data_size = nvs_al_size(fs, len);
    189e:	4631      	mov	r1, r6
    18a0:	4658      	mov	r0, fp
    18a2:	f00f fd8a 	bl	113ba <nvs_al_size.isra.0>
	if (data_size) {
    18a6:	4607      	mov	r7, r0
    18a8:	2800      	cmp	r0, #0
    18aa:	d13f      	bne.n	192c <nvs_write+0x138>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
    18ac:	f104 0a14 	add.w	sl, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
    18b0:	f04f 33ff 	mov.w	r3, #4294967295
    18b4:	f04f 32ff 	mov.w	r2, #4294967295
    18b8:	4650      	mov	r0, sl
    18ba:	f00c fbb1 	bl	e020 <z_impl_k_mutex_lock>
	gc_count = 0;
    18be:	2300      	movs	r3, #0
	fs->ate_wra &= ADDR_SECT_MASK;
    18c0:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 19a0 <nvs_write+0x1ac>
		if (gc_count == fs->sector_count) {
    18c4:	89e2      	ldrh	r2, [r4, #14]
    18c6:	4293      	cmp	r3, r2
    18c8:	d060      	beq.n	198c <nvs_write+0x198>
		if (fs->ate_wra >= fs->data_wra + required_space) {
    18ca:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
    18ce:	1878      	adds	r0, r7, r1
    18d0:	4282      	cmp	r2, r0
    18d2:	d32e      	bcc.n	1932 <nvs_write+0x13e>
	entry.part = 0xff;
    18d4:	23ff      	movs	r3, #255	; 0xff
	nvs_ate_crc8_update(&entry);
    18d6:	a806      	add	r0, sp, #24
	entry.id = id;
    18d8:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.offset = (u16_t)(fs->data_wra & ADDR_OFFS_MASK);
    18dc:	f8ad 101a 	strh.w	r1, [sp, #26]
	entry.len = (u16_t)len;
    18e0:	f8ad 601c 	strh.w	r6, [sp, #28]
	entry.part = 0xff;
    18e4:	f88d 301e 	strb.w	r3, [sp, #30]
	nvs_ate_crc8_update(&entry);
    18e8:	f00f fd5e 	bl	113a8 <nvs_ate_crc8_update>
	if (!len) {
    18ec:	b136      	cbz	r6, 18fc <nvs_write+0x108>
    18ee:	4633      	mov	r3, r6
    18f0:	4642      	mov	r2, r8
    18f2:	4620      	mov	r0, r4
    18f4:	68a1      	ldr	r1, [r4, #8]
    18f6:	f00f fdbf 	bl	11478 <nvs_flash_al_wrt.part.0>
    18fa:	4605      	mov	r5, r0
	fs->data_wra += nvs_al_size(fs, len);
    18fc:	4631      	mov	r1, r6
    18fe:	7c20      	ldrb	r0, [r4, #16]
    1900:	f00f fd5b 	bl	113ba <nvs_al_size.isra.0>
    1904:	68a3      	ldr	r3, [r4, #8]
    1906:	4403      	add	r3, r0
    1908:	60a3      	str	r3, [r4, #8]
	if (rc) {
    190a:	2d00      	cmp	r5, #0
    190c:	d144      	bne.n	1998 <nvs_write+0x1a4>
	rc = nvs_flash_ate_wrt(fs, &entry);
    190e:	4620      	mov	r0, r4
    1910:	a906      	add	r1, sp, #24
    1912:	f00f fdf5 	bl	11500 <nvs_flash_ate_wrt>
	if (rc) {
    1916:	4605      	mov	r5, r0
    1918:	2800      	cmp	r0, #0
    191a:	d13d      	bne.n	1998 <nvs_write+0x1a4>
	rc = len;
    191c:	4632      	mov	r2, r6
    191e:	9201      	str	r2, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
    1920:	4650      	mov	r0, sl
    1922:	f00c fc61 	bl	e1e8 <z_impl_k_mutex_unlock>
	return rc;
    1926:	9a01      	ldr	r2, [sp, #4]
    1928:	4615      	mov	r5, r2
    192a:	e772      	b.n	1812 <nvs_write+0x1e>
		required_space = data_size + ate_size;
    192c:	4457      	add	r7, sl
    192e:	b2bf      	uxth	r7, r7
    1930:	e7bc      	b.n	18ac <nvs_write+0xb8>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    1932:	2108      	movs	r1, #8
    1934:	7c20      	ldrb	r0, [r4, #16]
    1936:	9301      	str	r3, [sp, #4]
    1938:	f00f fd3f 	bl	113ba <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
    193c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1940:	f8ad 1018 	strh.w	r1, [sp, #24]
	close_ate.len = 0U;
    1944:	2100      	movs	r1, #0
    1946:	f8ad 101c 	strh.w	r1, [sp, #28]
	close_ate.offset = (u16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
    194a:	1811      	adds	r1, r2, r0
    194c:	f8ad 101a 	strh.w	r1, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
    1950:	89a1      	ldrh	r1, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
    1952:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
    1956:	440a      	add	r2, r1
    1958:	1a10      	subs	r0, r2, r0
    195a:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
    195c:	a806      	add	r0, sp, #24
    195e:	f00f fd23 	bl	113a8 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
    1962:	a906      	add	r1, sp, #24
    1964:	4620      	mov	r0, r4
    1966:	f00f fdcb 	bl	11500 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
    196a:	89e0      	ldrh	r0, [r4, #14]
    196c:	1d21      	adds	r1, r4, #4
    196e:	f00f fd2e 	bl	113ce <nvs_sector_advance.isra.0>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    1972:	6862      	ldr	r2, [r4, #4]
		rc = nvs_gc(fs);
    1974:	4620      	mov	r0, r4
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    1976:	ea02 020b 	and.w	r2, r2, fp
    197a:	60a2      	str	r2, [r4, #8]
		rc = nvs_gc(fs);
    197c:	f7ff fd76 	bl	146c <nvs_gc>
		if (rc) {
    1980:	4602      	mov	r2, r0
    1982:	2800      	cmp	r0, #0
    1984:	d1cb      	bne.n	191e <nvs_write+0x12a>
		gc_count++;
    1986:	9b01      	ldr	r3, [sp, #4]
    1988:	3301      	adds	r3, #1
		if (gc_count == fs->sector_count) {
    198a:	e79b      	b.n	18c4 <nvs_write+0xd0>
			rc = -ENOSPC;
    198c:	f06f 021b 	mvn.w	r2, #27
    1990:	e7c5      	b.n	191e <nvs_write+0x12a>
		return -EINVAL;
    1992:	f06f 0515 	mvn.w	r5, #21
    1996:	e73c      	b.n	1812 <nvs_write+0x1e>
			if (rc) {
    1998:	462a      	mov	r2, r5
    199a:	e7c0      	b.n	191e <nvs_write+0x12a>
    199c:	0001631c 	.word	0x0001631c
    19a0:	ffff0000 	.word	0xffff0000

000019a4 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, u16_t id, void *data, size_t len,
		      u16_t cnt)
{
    19a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    19a8:	461e      	mov	r6, r3
	u32_t wlk_addr, rd_addr;
	u16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
    19aa:	7c43      	ldrb	r3, [r0, #17]
{
    19ac:	4604      	mov	r4, r0
    19ae:	460f      	mov	r7, r1
    19b0:	4690      	mov	r8, r2
    19b2:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
	if (!fs->ready) {
    19b6:	b943      	cbnz	r3, 19ca <nvs_read_hist+0x26>
		LOG_ERR("NVS not initialized");
    19b8:	4828      	ldr	r0, [pc, #160]	; (1a5c <nvs_read_hist+0xb8>)
    19ba:	2145      	movs	r1, #69	; 0x45
    19bc:	f00f fa0e 	bl	10ddc <printk>
		return -EACCES;
    19c0:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
    19c4:	b004      	add	sp, #16
    19c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    19ca:	2108      	movs	r1, #8
    19cc:	7c00      	ldrb	r0, [r0, #16]
    19ce:	f00f fcf4 	bl	113ba <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
    19d2:	89a3      	ldrh	r3, [r4, #12]
    19d4:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    19d8:	42b3      	cmp	r3, r6
    19da:	d33b      	bcc.n	1a54 <nvs_read_hist+0xb0>
	cnt_his = 0U;
    19dc:	f04f 0a00 	mov.w	sl, #0
	wlk_addr = fs->ate_wra;
    19e0:	6863      	ldr	r3, [r4, #4]
    19e2:	9301      	str	r3, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    19e4:	4620      	mov	r0, r4
    19e6:	aa02      	add	r2, sp, #8
    19e8:	a901      	add	r1, sp, #4
		rd_addr = wlk_addr;
    19ea:	9d01      	ldr	r5, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    19ec:	f7ff fccc 	bl	1388 <nvs_prev_ate>
		if (rc) {
    19f0:	2800      	cmp	r0, #0
    19f2:	d1e7      	bne.n	19c4 <nvs_read_hist+0x20>
		if ((wlk_ate.id == id) &&  (!nvs_ate_crc8_check(&wlk_ate))) {
    19f4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    19f8:	42bb      	cmp	r3, r7
    19fa:	d107      	bne.n	1a0c <nvs_read_hist+0x68>
    19fc:	a802      	add	r0, sp, #8
    19fe:	f00f fcc7 	bl	11390 <nvs_ate_crc8_check>
    1a02:	b918      	cbnz	r0, 1a0c <nvs_read_hist+0x68>
			cnt_his++;
    1a04:	f10a 0a01 	add.w	sl, sl, #1
    1a08:	fa1f fa8a 	uxth.w	sl, sl
		if (wlk_addr == fs->ate_wra) {
    1a0c:	6862      	ldr	r2, [r4, #4]
    1a0e:	9b01      	ldr	r3, [sp, #4]
    1a10:	429a      	cmp	r2, r3
    1a12:	d018      	beq.n	1a46 <nvs_read_hist+0xa2>
	while (cnt_his <= cnt) {
    1a14:	45ca      	cmp	sl, r9
    1a16:	d9e5      	bls.n	19e4 <nvs_read_hist+0x40>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    1a18:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    1a1c:	b1bb      	cbz	r3, 1a4e <nvs_read_hist+0xaa>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    1a1e:	45ca      	cmp	sl, r9
    1a20:	d315      	bcc.n	1a4e <nvs_read_hist+0xaa>
	rd_addr += wlk_ate.offset;
    1a22:	f8bd 100a 	ldrh.w	r1, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
    1a26:	0c2d      	lsrs	r5, r5, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    1a28:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
    1a2a:	ea4f 4505 	mov.w	r5, r5, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    1a2e:	bf28      	it	cs
    1a30:	4633      	movcs	r3, r6
    1a32:	4642      	mov	r2, r8
    1a34:	4620      	mov	r0, r4
    1a36:	4429      	add	r1, r5
    1a38:	f00f fc73 	bl	11322 <nvs_flash_rd>
	if (rc) {
    1a3c:	2800      	cmp	r0, #0
    1a3e:	d1c1      	bne.n	19c4 <nvs_read_hist+0x20>
	return wlk_ate.len;
    1a40:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    1a44:	e7be      	b.n	19c4 <nvs_read_hist+0x20>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    1a46:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    1a4a:	42bb      	cmp	r3, r7
    1a4c:	d0e4      	beq.n	1a18 <nvs_read_hist+0x74>
		return -ENOENT;
    1a4e:	f06f 0001 	mvn.w	r0, #1
    1a52:	e7b7      	b.n	19c4 <nvs_read_hist+0x20>
		return -EINVAL;
    1a54:	f06f 0015 	mvn.w	r0, #21
    1a58:	e7b4      	b.n	19c4 <nvs_read_hist+0x20>
    1a5a:	bf00      	nop
    1a5c:	0001631c 	.word	0x0001631c

00001a60 <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    1a60:	4b09      	ldr	r3, [pc, #36]	; (1a88 <get_flash_area_from_id+0x28>)
{
    1a62:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
    1a64:	681d      	ldr	r5, [r3, #0]
		if (flash_map[i].fa_id == idx) {
    1a66:	4b09      	ldr	r3, [pc, #36]	; (1a8c <get_flash_area_from_id+0x2c>)
{
    1a68:	4602      	mov	r2, r0
		if (flash_map[i].fa_id == idx) {
    1a6a:	681c      	ldr	r4, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
    1a6c:	2300      	movs	r3, #0
    1a6e:	429d      	cmp	r5, r3
    1a70:	dc01      	bgt.n	1a76 <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
    1a72:	2000      	movs	r0, #0
}
    1a74:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
    1a76:	0119      	lsls	r1, r3, #4
    1a78:	5c61      	ldrb	r1, [r4, r1]
    1a7a:	eb04 1003 	add.w	r0, r4, r3, lsl #4
    1a7e:	4291      	cmp	r1, r2
    1a80:	d0f8      	beq.n	1a74 <get_flash_area_from_id+0x14>
	for (int i = 0; i < flash_map_entries; i++) {
    1a82:	3301      	adds	r3, #1
    1a84:	e7f3      	b.n	1a6e <get_flash_area_from_id+0xe>
    1a86:	bf00      	nop
    1a88:	00015770 	.word	0x00015770
    1a8c:	20000170 	.word	0x20000170

00001a90 <flash_area_open>:

int flash_area_open(u8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    1a90:	4b08      	ldr	r3, [pc, #32]	; (1ab4 <flash_area_open+0x24>)
{
    1a92:	b510      	push	{r4, lr}
	if (flash_map == NULL) {
    1a94:	681b      	ldr	r3, [r3, #0]
{
    1a96:	460c      	mov	r4, r1
	if (flash_map == NULL) {
    1a98:	b12b      	cbz	r3, 1aa6 <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
    1a9a:	f7ff ffe1 	bl	1a60 <get_flash_area_from_id>
	if (area == NULL) {
    1a9e:	b128      	cbz	r0, 1aac <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
    1aa0:	6020      	str	r0, [r4, #0]
	return 0;
    1aa2:	2000      	movs	r0, #0
}
    1aa4:	bd10      	pop	{r4, pc}
		return -EACCES;
    1aa6:	f06f 000c 	mvn.w	r0, #12
    1aaa:	e7fb      	b.n	1aa4 <flash_area_open+0x14>
		return -ENOENT;
    1aac:	f06f 0001 	mvn.w	r0, #1
    1ab0:	e7f8      	b.n	1aa4 <flash_area_open+0x14>
    1ab2:	bf00      	nop
    1ab4:	20000170 	.word	0x20000170

00001ab8 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, u32_t *cnt, struct flash_sector *ret)
{
    1ab8:	b530      	push	{r4, r5, lr}
    1aba:	b089      	sub	sp, #36	; 0x24
    1abc:	460c      	mov	r4, r1
    1abe:	4615      	mov	r5, r2
	cb_data->area_idx = idx;
    1ac0:	9001      	str	r0, [sp, #4]
	fa = get_flash_area_from_id(idx);
    1ac2:	f7ff ffcd 	bl	1a60 <get_flash_area_from_id>
	if (fa == NULL) {
    1ac6:	b1b8      	cbz	r0, 1af8 <flash_area_get_sectors+0x40>
	cb_data->area_off = fa->fa_off;
    1ac8:	6843      	ldr	r3, [r0, #4]
	cb_data->ret_len = *cnt;
    1aca:	6822      	ldr	r2, [r4, #0]
	cb_data->area_off = fa->fa_off;
    1acc:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    1ace:	6883      	ldr	r3, [r0, #8]
	flash_dev = device_get_binding(fa->fa_dev_name);
    1ad0:	68c0      	ldr	r0, [r0, #12]
	cb_data->ret = ret;
    1ad2:	e9cd 3503 	strd	r3, r5, [sp, #12]
	cb_data->ret_idx = 0U;
    1ad6:	2300      	movs	r3, #0
	cb_data->status = 0;
    1ad8:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    1adc:	9305      	str	r3, [sp, #20]
    1ade:	f00b fed7 	bl	d890 <z_impl_device_get_binding>
	if (flash_dev == NULL) {
    1ae2:	b160      	cbz	r0, 1afe <flash_area_get_sectors+0x46>
	flash_page_foreach(flash_dev, cb, cb_data);
    1ae4:	4907      	ldr	r1, [pc, #28]	; (1b04 <flash_area_get_sectors+0x4c>)
    1ae6:	aa01      	add	r2, sp, #4
    1ae8:	f012 fc55 	bl	14396 <flash_page_foreach>
	if (cb_data->status == 0) {
    1aec:	9807      	ldr	r0, [sp, #28]
    1aee:	b908      	cbnz	r0, 1af4 <flash_area_get_sectors+0x3c>
		*cnt = cb_data->ret_idx;
    1af0:	9b05      	ldr	r3, [sp, #20]
    1af2:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    1af4:	b009      	add	sp, #36	; 0x24
    1af6:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    1af8:	f06f 0015 	mvn.w	r0, #21
    1afc:	e7fa      	b.n	1af4 <flash_area_get_sectors+0x3c>
		return -ENODEV;
    1afe:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    1b02:	e7f7      	b.n	1af4 <flash_area_get_sectors+0x3c>
    1b04:	00011539 	.word	0x00011539

00001b08 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    1b08:	4b10      	ldr	r3, [pc, #64]	; (1b4c <settings_save_one+0x44>)
{
    1b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
    1b0e:	681c      	ldr	r4, [r3, #0]
{
    1b10:	4605      	mov	r5, r0
    1b12:	460e      	mov	r6, r1
    1b14:	4617      	mov	r7, r2
	if (!cs) {
    1b16:	b1ac      	cbz	r4, 1b44 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
    1b18:	f04f 32ff 	mov.w	r2, #4294967295
    1b1c:	f04f 33ff 	mov.w	r3, #4294967295
    1b20:	480b      	ldr	r0, [pc, #44]	; (1b50 <settings_save_one+0x48>)
    1b22:	f00c fa7d 	bl	e020 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    1b26:	6863      	ldr	r3, [r4, #4]
    1b28:	4632      	mov	r2, r6
    1b2a:	f8d3 8008 	ldr.w	r8, [r3, #8]
    1b2e:	4629      	mov	r1, r5
    1b30:	463b      	mov	r3, r7
    1b32:	4620      	mov	r0, r4
    1b34:	47c0      	blx	r8
    1b36:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    1b38:	4805      	ldr	r0, [pc, #20]	; (1b50 <settings_save_one+0x48>)
    1b3a:	f00c fb55 	bl	e1e8 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    1b3e:	4620      	mov	r0, r4
    1b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    1b44:	f06f 0401 	mvn.w	r4, #1
    1b48:	e7f9      	b.n	1b3e <settings_save_one+0x36>
    1b4a:	bf00      	nop
    1b4c:	200009f0 	.word	0x200009f0
    1b50:	20000588 	.word	0x20000588

00001b54 <settings_src_register>:
	return node->next;
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
    1b54:	2300      	movs	r3, #0
    1b56:	6003      	str	r3, [r0, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    1b58:	4b04      	ldr	r3, [pc, #16]	; (1b6c <settings_src_register+0x18>)
    1b5a:	685a      	ldr	r2, [r3, #4]
    1b5c:	b912      	cbnz	r2, 1b64 <settings_src_register+0x10>
	list->head = node;
    1b5e:	e9c3 0000 	strd	r0, r0, [r3]
}
    1b62:	4770      	bx	lr
	parent->next = child;
    1b64:	6010      	str	r0, [r2, #0]
	list->tail = node;
    1b66:	6058      	str	r0, [r3, #4]
}
    1b68:	4770      	bx	lr
    1b6a:	bf00      	nop
    1b6c:	200009e8 	.word	0x200009e8

00001b70 <settings_dst_register>:
	settings_save_dst = cs;
    1b70:	4b01      	ldr	r3, [pc, #4]	; (1b78 <settings_dst_register+0x8>)
    1b72:	6018      	str	r0, [r3, #0]
}
    1b74:	4770      	bx	lr
    1b76:	bf00      	nop
    1b78:	200009f0 	.word	0x200009f0

00001b7c <settings_load_subtree>:
	const struct settings_load_arg arg = {
    1b7c:	2300      	movs	r3, #0
{
    1b7e:	b530      	push	{r4, r5, lr}
    1b80:	b085      	sub	sp, #20
    1b82:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
    1b84:	e9cd 3302 	strd	r3, r3, [sp, #8]
    1b88:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    1b8a:	f04f 33ff 	mov.w	r3, #4294967295
    1b8e:	f04f 32ff 	mov.w	r2, #4294967295
    1b92:	480b      	ldr	r0, [pc, #44]	; (1bc0 <settings_load_subtree+0x44>)
    1b94:	f00c fa44 	bl	e020 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    1b98:	4b0a      	ldr	r3, [pc, #40]	; (1bc4 <settings_load_subtree+0x48>)
    1b9a:	681c      	ldr	r4, [r3, #0]
    1b9c:	b134      	cbz	r4, 1bac <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
    1b9e:	6863      	ldr	r3, [r4, #4]
    1ba0:	4620      	mov	r0, r4
    1ba2:	681b      	ldr	r3, [r3, #0]
    1ba4:	a901      	add	r1, sp, #4
    1ba6:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1ba8:	6824      	ldr	r4, [r4, #0]
	return node->next;
    1baa:	e7f7      	b.n	1b9c <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
    1bac:	4628      	mov	r0, r5
    1bae:	f000 f8dd 	bl	1d6c <settings_commit_subtree>
    1bb2:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    1bb4:	4802      	ldr	r0, [pc, #8]	; (1bc0 <settings_load_subtree+0x44>)
    1bb6:	f00c fb17 	bl	e1e8 <z_impl_k_mutex_unlock>
}
    1bba:	4620      	mov	r0, r4
    1bbc:	b005      	add	sp, #20
    1bbe:	bd30      	pop	{r4, r5, pc}
    1bc0:	20000588 	.word	0x20000588
    1bc4:	200009e8 	.word	0x200009e8

00001bc8 <settings_load_subtree_direct>:
{
    1bc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
    1bca:	e9cd 0101 	strd	r0, r1, [sp, #4]
    1bce:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
    1bd0:	f04f 33ff 	mov.w	r3, #4294967295
    1bd4:	f04f 32ff 	mov.w	r2, #4294967295
    1bd8:	4809      	ldr	r0, [pc, #36]	; (1c00 <settings_load_subtree_direct+0x38>)
    1bda:	f00c fa21 	bl	e020 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    1bde:	4b09      	ldr	r3, [pc, #36]	; (1c04 <settings_load_subtree_direct+0x3c>)
    1be0:	681c      	ldr	r4, [r3, #0]
    1be2:	b134      	cbz	r4, 1bf2 <settings_load_subtree_direct+0x2a>
		cs->cs_itf->csi_load(cs, &arg);
    1be4:	6863      	ldr	r3, [r4, #4]
    1be6:	4620      	mov	r0, r4
    1be8:	681b      	ldr	r3, [r3, #0]
    1bea:	a901      	add	r1, sp, #4
    1bec:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1bee:	6824      	ldr	r4, [r4, #0]
	return node->next;
    1bf0:	e7f7      	b.n	1be2 <settings_load_subtree_direct+0x1a>
	return z_impl_k_mutex_unlock(mutex);
    1bf2:	4803      	ldr	r0, [pc, #12]	; (1c00 <settings_load_subtree_direct+0x38>)
    1bf4:	f00c faf8 	bl	e1e8 <z_impl_k_mutex_unlock>
}
    1bf8:	2000      	movs	r0, #0
    1bfa:	b004      	add	sp, #16
    1bfc:	bd10      	pop	{r4, pc}
    1bfe:	bf00      	nop
    1c00:	20000588 	.word	0x20000588
    1c04:	200009e8 	.word	0x200009e8

00001c08 <settings_store_init>:
	list->head = NULL;
    1c08:	2200      	movs	r2, #0
    1c0a:	4b02      	ldr	r3, [pc, #8]	; (1c14 <settings_store_init+0xc>)
	list->tail = NULL;
    1c0c:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    1c10:	4770      	bx	lr
    1c12:	bf00      	nop
    1c14:	200009e8 	.word	0x200009e8

00001c18 <settings_init>:
	list->head = NULL;
    1c18:	2200      	movs	r2, #0
    1c1a:	4b02      	ldr	r3, [pc, #8]	; (1c24 <settings_init+0xc>)
	list->tail = NULL;
    1c1c:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
    1c20:	f7ff bff2 	b.w	1c08 <settings_store_init>
    1c24:	200009f4 	.word	0x200009f4

00001c28 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
    1c28:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    1c2c:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
    1c2e:	460e      	mov	r6, r1
    1c30:	b109      	cbz	r1, 1c36 <settings_parse_and_lookup+0xe>
		*next = NULL;
    1c32:	2300      	movs	r3, #0
    1c34:	600b      	str	r3, [r1, #0]
	}

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    1c36:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 1ce8 <settings_parse_and_lookup+0xc0>
    1c3a:	2500      	movs	r5, #0
    1c3c:	46c2      	mov	sl, r8
    1c3e:	4c25      	ldr	r4, [pc, #148]	; (1cd4 <settings_parse_and_lookup+0xac>)
    1c40:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1cec <settings_parse_and_lookup+0xc4>
    1c44:	4544      	cmp	r4, r8
    1c46:	d90c      	bls.n	1c62 <settings_parse_and_lookup+0x3a>
    1c48:	4923      	ldr	r1, [pc, #140]	; (1cd8 <settings_parse_and_lookup+0xb0>)
    1c4a:	2394      	movs	r3, #148	; 0x94
    1c4c:	464a      	mov	r2, r9
    1c4e:	4823      	ldr	r0, [pc, #140]	; (1cdc <settings_parse_and_lookup+0xb4>)
    1c50:	f00f f8c4 	bl	10ddc <printk>
    1c54:	4822      	ldr	r0, [pc, #136]	; (1ce0 <settings_parse_and_lookup+0xb8>)
    1c56:	f00f f8c1 	bl	10ddc <printk>
    1c5a:	2194      	movs	r1, #148	; 0x94
    1c5c:	4648      	mov	r0, r9
    1c5e:	f00f fb53 	bl	11308 <assert_post_action>
    1c62:	4554      	cmp	r4, sl
    1c64:	d308      	bcc.n	1c78 <settings_parse_and_lookup+0x50>
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    1c66:	4b1f      	ldr	r3, [pc, #124]	; (1ce4 <settings_parse_and_lookup+0xbc>)
    1c68:	681c      	ldr	r4, [r3, #0]
    1c6a:	b10c      	cbz	r4, 1c70 <settings_parse_and_lookup+0x48>
    1c6c:	3c14      	subs	r4, #20
    1c6e:	b9c4      	cbnz	r4, 1ca2 <settings_parse_and_lookup+0x7a>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
    1c70:	4628      	mov	r0, r5
    1c72:	b002      	add	sp, #8
    1c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    1c78:	4638      	mov	r0, r7
    1c7a:	6821      	ldr	r1, [r4, #0]
    1c7c:	aa01      	add	r2, sp, #4
    1c7e:	f00f fc80 	bl	11582 <settings_name_steq>
    1c82:	b160      	cbz	r0, 1c9e <settings_parse_and_lookup+0x76>
		if (!bestmatch) {
    1c84:	b925      	cbnz	r5, 1c90 <settings_parse_and_lookup+0x68>
			if (next) {
    1c86:	b10e      	cbz	r6, 1c8c <settings_parse_and_lookup+0x64>
				*next = tmpnext;
    1c88:	9b01      	ldr	r3, [sp, #4]
    1c8a:	6033      	str	r3, [r6, #0]
    1c8c:	4625      	mov	r5, r4
    1c8e:	e006      	b.n	1c9e <settings_parse_and_lookup+0x76>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    1c90:	2200      	movs	r2, #0
    1c92:	6829      	ldr	r1, [r5, #0]
    1c94:	6820      	ldr	r0, [r4, #0]
    1c96:	f00f fc74 	bl	11582 <settings_name_steq>
    1c9a:	2800      	cmp	r0, #0
    1c9c:	d1f3      	bne.n	1c86 <settings_parse_and_lookup+0x5e>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    1c9e:	3414      	adds	r4, #20
    1ca0:	e7d0      	b.n	1c44 <settings_parse_and_lookup+0x1c>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    1ca2:	4638      	mov	r0, r7
    1ca4:	6821      	ldr	r1, [r4, #0]
    1ca6:	aa01      	add	r2, sp, #4
    1ca8:	f00f fc6b 	bl	11582 <settings_name_steq>
    1cac:	b160      	cbz	r0, 1cc8 <settings_parse_and_lookup+0xa0>
		if (!bestmatch) {
    1cae:	b925      	cbnz	r5, 1cba <settings_parse_and_lookup+0x92>
			if (next) {
    1cb0:	b10e      	cbz	r6, 1cb6 <settings_parse_and_lookup+0x8e>
				*next = tmpnext;
    1cb2:	9b01      	ldr	r3, [sp, #4]
    1cb4:	6033      	str	r3, [r6, #0]
    1cb6:	4625      	mov	r5, r4
    1cb8:	e006      	b.n	1cc8 <settings_parse_and_lookup+0xa0>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    1cba:	2200      	movs	r2, #0
    1cbc:	6829      	ldr	r1, [r5, #0]
    1cbe:	6820      	ldr	r0, [r4, #0]
    1cc0:	f00f fc5f 	bl	11582 <settings_name_steq>
    1cc4:	2800      	cmp	r0, #0
    1cc6:	d1f3      	bne.n	1cb0 <settings_parse_and_lookup+0x88>
Z_GENLIST_PEEK_NEXT(slist, snode)
    1cc8:	f114 0f14 	cmn.w	r4, #20
    1ccc:	d0d0      	beq.n	1c70 <settings_parse_and_lookup+0x48>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1cce:	6964      	ldr	r4, [r4, #20]
    1cd0:	e7cb      	b.n	1c6a <settings_parse_and_lookup+0x42>
    1cd2:	bf00      	nop
    1cd4:	00015560 	.word	0x00015560
    1cd8:	0001646b 	.word	0x0001646b
    1cdc:	00016493 	.word	0x00016493
    1ce0:	000164b0 	.word	0x000164b0
    1ce4:	200009f4 	.word	0x200009f4
    1ce8:	000155c4 	.word	0x000155c4
    1cec:	00016439 	.word	0x00016439

00001cf0 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
    1cf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1cf4:	b085      	sub	sp, #20
    1cf6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    1cfa:	4604      	mov	r4, r0
    1cfc:	460d      	mov	r5, r1
    1cfe:	4616      	mov	r6, r2
    1d00:	461f      	mov	r7, r3
	int rc;
	const char *name_key = name;
    1d02:	9003      	str	r0, [sp, #12]

	if (load_arg && load_arg->subtree &&
    1d04:	f1b8 0f00 	cmp.w	r8, #0
    1d08:	d018      	beq.n	1d3c <settings_call_set_handler+0x4c>
    1d0a:	f8d8 1000 	ldr.w	r1, [r8]
    1d0e:	b181      	cbz	r1, 1d32 <settings_call_set_handler+0x42>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
    1d10:	aa03      	add	r2, sp, #12
    1d12:	f00f fc36 	bl	11582 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
    1d16:	b960      	cbnz	r0, 1d32 <settings_call_set_handler+0x42>

		if (rc != 0) {
			LOG_ERR("set-value failure. key: %s error(%d)",
				log_strdup(name), rc);
			/* Ignoring the error */
			rc = 0;
    1d18:	2000      	movs	r0, #0
    1d1a:	e007      	b.n	1d2c <settings_call_set_handler+0x3c>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
    1d1c:	f8d8 3008 	ldr.w	r3, [r8, #8]
    1d20:	4632      	mov	r2, r6
    1d22:	9300      	str	r3, [sp, #0]
    1d24:	4629      	mov	r1, r5
    1d26:	463b      	mov	r3, r7
    1d28:	9803      	ldr	r0, [sp, #12]
    1d2a:	47c8      	blx	r9
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
    1d2c:	b005      	add	sp, #20
    1d2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (load_arg && load_arg->cb) {
    1d32:	f8d8 9004 	ldr.w	r9, [r8, #4]
    1d36:	f1b9 0f00 	cmp.w	r9, #0
    1d3a:	d1ef      	bne.n	1d1c <settings_call_set_handler+0x2c>
		ch = settings_parse_and_lookup(name, &name_key);
    1d3c:	4620      	mov	r0, r4
    1d3e:	a903      	add	r1, sp, #12
    1d40:	f7ff ff72 	bl	1c28 <settings_parse_and_lookup>
		if (!ch) {
    1d44:	2800      	cmp	r0, #0
    1d46:	d0e7      	beq.n	1d18 <settings_call_set_handler+0x28>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
    1d48:	463b      	mov	r3, r7
    1d4a:	f8d0 8008 	ldr.w	r8, [r0, #8]
    1d4e:	4632      	mov	r2, r6
    1d50:	4629      	mov	r1, r5
    1d52:	9803      	ldr	r0, [sp, #12]
    1d54:	47c0      	blx	r8
		if (rc != 0) {
    1d56:	4603      	mov	r3, r0
    1d58:	2800      	cmp	r0, #0
    1d5a:	d0dd      	beq.n	1d18 <settings_call_set_handler+0x28>
			LOG_ERR("set-value failure. key: %s error(%d)",
    1d5c:	4622      	mov	r2, r4
    1d5e:	2145      	movs	r1, #69	; 0x45
    1d60:	4801      	ldr	r0, [pc, #4]	; (1d68 <settings_call_set_handler+0x78>)
    1d62:	f00f f83b 	bl	10ddc <printk>
    1d66:	e7d7      	b.n	1d18 <settings_call_set_handler+0x28>
    1d68:	000164cf 	.word	0x000164cf

00001d6c <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
    1d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int rc;
	int rc2;

	rc = 0;

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    1d70:	4f23      	ldr	r7, [pc, #140]	; (1e00 <settings_commit_subtree+0x94>)
{
    1d72:	4606      	mov	r6, r0
	rc = 0;
    1d74:	2500      	movs	r5, #0
    1d76:	46b9      	mov	r9, r7
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    1d78:	4c22      	ldr	r4, [pc, #136]	; (1e04 <settings_commit_subtree+0x98>)
    1d7a:	f8df 809c 	ldr.w	r8, [pc, #156]	; 1e18 <settings_commit_subtree+0xac>
    1d7e:	42bc      	cmp	r4, r7
    1d80:	d90c      	bls.n	1d9c <settings_commit_subtree+0x30>
    1d82:	4921      	ldr	r1, [pc, #132]	; (1e08 <settings_commit_subtree+0x9c>)
    1d84:	23f4      	movs	r3, #244	; 0xf4
    1d86:	4642      	mov	r2, r8
    1d88:	4820      	ldr	r0, [pc, #128]	; (1e0c <settings_commit_subtree+0xa0>)
    1d8a:	f00f f827 	bl	10ddc <printk>
    1d8e:	4820      	ldr	r0, [pc, #128]	; (1e10 <settings_commit_subtree+0xa4>)
    1d90:	f00f f824 	bl	10ddc <printk>
    1d94:	21f4      	movs	r1, #244	; 0xf4
    1d96:	4640      	mov	r0, r8
    1d98:	f00f fab6 	bl	11308 <assert_post_action>
    1d9c:	454c      	cmp	r4, r9
    1d9e:	d307      	bcc.n	1db0 <settings_commit_subtree+0x44>
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    1da0:	4b1c      	ldr	r3, [pc, #112]	; (1e14 <settings_commit_subtree+0xa8>)
    1da2:	681c      	ldr	r4, [r3, #0]
    1da4:	b10c      	cbz	r4, 1daa <settings_commit_subtree+0x3e>
    1da6:	3c14      	subs	r4, #20
    1da8:	b9a4      	cbnz	r4, 1dd4 <settings_commit_subtree+0x68>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
    1daa:	4628      	mov	r0, r5
    1dac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    1db0:	b91e      	cbnz	r6, 1dba <settings_commit_subtree+0x4e>
		if (ch->h_commit) {
    1db2:	68e3      	ldr	r3, [r4, #12]
    1db4:	b94b      	cbnz	r3, 1dca <settings_commit_subtree+0x5e>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    1db6:	3414      	adds	r4, #20
    1db8:	e7e1      	b.n	1d7e <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    1dba:	2200      	movs	r2, #0
    1dbc:	4631      	mov	r1, r6
    1dbe:	6820      	ldr	r0, [r4, #0]
    1dc0:	f00f fbdf 	bl	11582 <settings_name_steq>
    1dc4:	2800      	cmp	r0, #0
    1dc6:	d1f4      	bne.n	1db2 <settings_commit_subtree+0x46>
    1dc8:	e7f5      	b.n	1db6 <settings_commit_subtree+0x4a>
			rc2 = ch->h_commit();
    1dca:	4798      	blx	r3
				rc = rc2;
    1dcc:	2d00      	cmp	r5, #0
    1dce:	bf08      	it	eq
    1dd0:	4605      	moveq	r5, r0
    1dd2:	e7f0      	b.n	1db6 <settings_commit_subtree+0x4a>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    1dd4:	b936      	cbnz	r6, 1de4 <settings_commit_subtree+0x78>
		if (ch->h_commit) {
    1dd6:	68e3      	ldr	r3, [r4, #12]
    1dd8:	b963      	cbnz	r3, 1df4 <settings_commit_subtree+0x88>
Z_GENLIST_PEEK_NEXT(slist, snode)
    1dda:	f114 0f14 	cmn.w	r4, #20
    1dde:	d0e4      	beq.n	1daa <settings_commit_subtree+0x3e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1de0:	6964      	ldr	r4, [r4, #20]
    1de2:	e7df      	b.n	1da4 <settings_commit_subtree+0x38>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    1de4:	2200      	movs	r2, #0
    1de6:	4631      	mov	r1, r6
    1de8:	6820      	ldr	r0, [r4, #0]
    1dea:	f00f fbca 	bl	11582 <settings_name_steq>
    1dee:	2800      	cmp	r0, #0
    1df0:	d1f1      	bne.n	1dd6 <settings_commit_subtree+0x6a>
    1df2:	e7f2      	b.n	1dda <settings_commit_subtree+0x6e>
			rc2 = ch->h_commit();
    1df4:	4798      	blx	r3
				rc = rc2;
    1df6:	2d00      	cmp	r5, #0
    1df8:	bf08      	it	eq
    1dfa:	4605      	moveq	r5, r0
    1dfc:	e7ed      	b.n	1dda <settings_commit_subtree+0x6e>
    1dfe:	bf00      	nop
    1e00:	000155c4 	.word	0x000155c4
    1e04:	00015560 	.word	0x00015560
    1e08:	0001646b 	.word	0x0001646b
    1e0c:	00016493 	.word	0x00016493
    1e10:	000164b0 	.word	0x000164b0
    1e14:	200009f4 	.word	0x200009f4
    1e18:	00016439 	.word	0x00016439

00001e1c <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
    1e1c:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
    1e1e:	4c06      	ldr	r4, [pc, #24]	; (1e38 <settings_subsys_init+0x1c>)
    1e20:	7823      	ldrb	r3, [r4, #0]
    1e22:	b93b      	cbnz	r3, 1e34 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
    1e24:	f7ff fef8 	bl	1c18 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
    1e28:	f000 f864 	bl	1ef4 <settings_backend_init>

	if (!err) {
    1e2c:	b908      	cbnz	r0, 1e32 <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
    1e2e:	2301      	movs	r3, #1
    1e30:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
    1e32:	bd10      	pop	{r4, pc}
		return 0;
    1e34:	2000      	movs	r0, #0
    1e36:	e7fc      	b.n	1e32 <settings_subsys_init+0x16>
    1e38:	20001f0e 	.word	0x20001f0e

00001e3c <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
    1e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1e40:	4680      	mov	r8, r0
    1e42:	4689      	mov	r9, r1
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	u16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
    1e44:	8e84      	ldrh	r4, [r0, #52]	; 0x34
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
    1e46:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 1ef0 <settings_nvs_load+0xb4>
	name_id = cf->last_name_id + 1;
    1e4a:	3401      	adds	r4, #1
{
    1e4c:	b098      	sub	sp, #96	; 0x60
	name_id = cf->last_name_id + 1;
    1e4e:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    1e50:	f100 0608 	add.w	r6, r0, #8
		name_id--;
    1e54:	1e65      	subs	r5, r4, #1
    1e56:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
    1e58:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    1e5c:	d045      	beq.n	1eea <settings_nvs_load+0xae>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    1e5e:	234a      	movs	r3, #74	; 0x4a
    1e60:	4629      	mov	r1, r5
    1e62:	aa05      	add	r2, sp, #20
    1e64:	4630      	mov	r0, r6
    1e66:	f00f fb60 	bl	1152a <nvs_read>
    1e6a:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
    1e6e:	343f      	adds	r4, #63	; 0x3f
    1e70:	b2a4      	uxth	r4, r4
    1e72:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    1e74:	4621      	mov	r1, r4
    1e76:	2301      	movs	r3, #1
    1e78:	4630      	mov	r0, r6
    1e7a:	f10d 020b 	add.w	r2, sp, #11
    1e7e:	f00f fb54 	bl	1152a <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
    1e82:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    1e84:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
    1e86:	dc03      	bgt.n	1e90 <settings_nvs_load+0x54>
    1e88:	2800      	cmp	r0, #0
    1e8a:	dc03      	bgt.n	1e94 <settings_nvs_load+0x58>
{
    1e8c:	462c      	mov	r4, r5
    1e8e:	e7e1      	b.n	1e54 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
    1e90:	2800      	cmp	r0, #0
    1e92:	dc16      	bgt.n	1ec2 <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
    1e94:	f8b8 3034 	ldrh.w	r3, [r8, #52]	; 0x34
    1e98:	42ab      	cmp	r3, r5
    1e9a:	d109      	bne.n	1eb0 <settings_nvs_load+0x74>
				cf->last_name_id--;
    1e9c:	4642      	mov	r2, r8
    1e9e:	1e6b      	subs	r3, r5, #1
    1ea0:	f822 3f34 	strh.w	r3, [r2, #52]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
    1ea4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1ea8:	2302      	movs	r3, #2
    1eaa:	4630      	mov	r0, r6
    1eac:	f7ff fca2 	bl	17f4 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
    1eb0:	4629      	mov	r1, r5
    1eb2:	4630      	mov	r0, r6
    1eb4:	f00f fb35 	bl	11522 <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
    1eb8:	4621      	mov	r1, r4
    1eba:	4630      	mov	r0, r6
    1ebc:	f00f fb31 	bl	11522 <nvs_delete>
			continue;
    1ec0:	e7e4      	b.n	1e8c <settings_nvs_load+0x50>
		name[rc1] = '\0';
    1ec2:	ab18      	add	r3, sp, #96	; 0x60
    1ec4:	441f      	add	r7, r3
    1ec6:	2300      	movs	r3, #0
		ret = settings_call_set_handler(
    1ec8:	4652      	mov	r2, sl
		name[rc1] = '\0';
    1eca:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
    1ece:	a805      	add	r0, sp, #20
    1ed0:	f8cd 9000 	str.w	r9, [sp]
    1ed4:	ab03      	add	r3, sp, #12
		read_fn_arg.fs = &cf->cf_nvs;
    1ed6:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
    1ed8:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
    1edc:	f7ff ff08 	bl	1cf0 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
    1ee0:	2800      	cmp	r0, #0
    1ee2:	d0d3      	beq.n	1e8c <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
    1ee4:	b018      	add	sp, #96	; 0x60
    1ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1eea:	2000      	movs	r0, #0
	return ret;
    1eec:	e7fa      	b.n	1ee4 <settings_nvs_load+0xa8>
    1eee:	bf00      	nop
    1ef0:	000115f5 	.word	0x000115f5

00001ef4 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
    1ef4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	u16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	u32_t sector_cnt = 1;
    1ef6:	2501      	movs	r5, #1

	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
    1ef8:	4669      	mov	r1, sp
    1efa:	4628      	mov	r0, r5
	u32_t sector_cnt = 1;
    1efc:	9501      	str	r5, [sp, #4]
	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
    1efe:	f7ff fdc7 	bl	1a90 <flash_area_open>
	if (rc) {
    1f02:	4604      	mov	r4, r0
    1f04:	2800      	cmp	r0, #0
    1f06:	d136      	bne.n	1f76 <settings_backend_init+0x82>
		return rc;
	}

	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
    1f08:	4628      	mov	r0, r5
    1f0a:	aa02      	add	r2, sp, #8
    1f0c:	a901      	add	r1, sp, #4
    1f0e:	f7ff fdd3 	bl	1ab8 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
    1f12:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
    1f16:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
    1f18:	d02d      	beq.n	1f76 <settings_backend_init+0x82>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
    1f1a:	b138      	cbz	r0, 1f2c <settings_backend_init+0x38>
    1f1c:	340c      	adds	r4, #12
    1f1e:	d005      	beq.n	1f2c <settings_backend_init+0x38>
		k_panic();
    1f20:	4040      	eors	r0, r0
    1f22:	f380 8811 	msr	BASEPRI, r0
    1f26:	f04f 0004 	mov.w	r0, #4
    1f2a:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
    1f2c:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
    1f2e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
    1f32:	d223      	bcs.n	1f7c <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
    1f34:	2300      	movs	r3, #0
	size_t nvs_sector_size, nvs_size = 0;
    1f36:	4618      	mov	r0, r3
		if (nvs_size > fa->fa_size) {
    1f38:	9a00      	ldr	r2, [sp, #0]
    1f3a:	6895      	ldr	r5, [r2, #8]
		nvs_size += nvs_sector_size;
    1f3c:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
    1f3e:	4285      	cmp	r5, r0
    1f40:	b29c      	uxth	r4, r3
    1f42:	d303      	bcc.n	1f4c <settings_backend_init+0x58>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
    1f44:	3301      	adds	r3, #1
    1f46:	2b08      	cmp	r3, #8
    1f48:	d1f8      	bne.n	1f3c <settings_backend_init+0x48>
    1f4a:	461c      	mov	r4, r3
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
    1f4c:	4d0d      	ldr	r5, [pc, #52]	; (1f84 <settings_backend_init+0x90>)
	default_settings_nvs.cf_nvs.sector_count = cnt;
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
    1f4e:	6853      	ldr	r3, [r2, #4]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;

	rc = settings_nvs_backend_init(&default_settings_nvs);
    1f50:	4628      	mov	r0, r5
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
    1f52:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
    1f54:	68d3      	ldr	r3, [r2, #12]
	default_settings_nvs.cf_nvs.sector_count = cnt;
    1f56:	82ec      	strh	r4, [r5, #22]
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
    1f58:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
    1f5a:	63ab      	str	r3, [r5, #56]	; 0x38
	rc = settings_nvs_backend_init(&default_settings_nvs);
    1f5c:	f00f fbde 	bl	1171c <settings_nvs_backend_init>
	if (rc) {
    1f60:	4604      	mov	r4, r0
    1f62:	b940      	cbnz	r0, 1f76 <settings_backend_init+0x82>
	cf->cf_store.cs_itf = &settings_nvs_itf;
    1f64:	4e08      	ldr	r6, [pc, #32]	; (1f88 <settings_backend_init+0x94>)
	settings_src_register(&cf->cf_store);
    1f66:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
    1f68:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
    1f6a:	f7ff fdf3 	bl	1b54 <settings_src_register>
	settings_dst_register(&cf->cf_store);
    1f6e:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
    1f70:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
    1f72:	f7ff fdfd 	bl	1b70 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
    1f76:	4620      	mov	r0, r4
    1f78:	b004      	add	sp, #16
    1f7a:	bd70      	pop	{r4, r5, r6, pc}
		return -EDOM;
    1f7c:	f06f 0424 	mvn.w	r4, #36	; 0x24
    1f80:	e7f9      	b.n	1f76 <settings_backend_init+0x82>
    1f82:	bf00      	nop
    1f84:	200009fc 	.word	0x200009fc
    1f88:	20000174 	.word	0x20000174

00001f8c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    1f8c:	b510      	push	{r4, lr}
    1f8e:	4807      	ldr	r0, [pc, #28]	; (1fac <uart_console_init+0x20>)
    1f90:	f00b fc7e 	bl	d890 <z_impl_device_get_binding>
	__stdout_hook_install(console_out);
    1f94:	4c06      	ldr	r4, [pc, #24]	; (1fb0 <uart_console_init+0x24>)

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    1f96:	4b07      	ldr	r3, [pc, #28]	; (1fb4 <uart_console_init+0x28>)
    1f98:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    1f9a:	4620      	mov	r0, r4
    1f9c:	f001 fc9e 	bl	38dc <__stdout_hook_install>
	__printk_hook_install(console_out);
    1fa0:	4620      	mov	r0, r4
    1fa2:	f7ff f805 	bl	fb0 <__printk_hook_install>
#endif

	uart_console_hook_install();

	return 0;
}
    1fa6:	2000      	movs	r0, #0
    1fa8:	bd10      	pop	{r4, pc}
    1faa:	bf00      	nop
    1fac:	00016220 	.word	0x00016220
    1fb0:	00001fb9 	.word	0x00001fb9
    1fb4:	20000a38 	.word	0x20000a38

00001fb8 <console_out>:
	if ('\n' == c) {
    1fb8:	280a      	cmp	r0, #10
{
    1fba:	b538      	push	{r3, r4, r5, lr}
    1fbc:	4604      	mov	r4, r0
    1fbe:	4d07      	ldr	r5, [pc, #28]	; (1fdc <console_out+0x24>)
	if ('\n' == c) {
    1fc0:	d104      	bne.n	1fcc <console_out+0x14>
    1fc2:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
    1fc4:	6883      	ldr	r3, [r0, #8]
    1fc6:	210d      	movs	r1, #13
    1fc8:	685b      	ldr	r3, [r3, #4]
    1fca:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    1fcc:	6828      	ldr	r0, [r5, #0]
    1fce:	6883      	ldr	r3, [r0, #8]
    1fd0:	b2e1      	uxtb	r1, r4
    1fd2:	685b      	ldr	r3, [r3, #4]
    1fd4:	4798      	blx	r3
}
    1fd6:	4620      	mov	r0, r4
    1fd8:	bd38      	pop	{r3, r4, r5, pc}
    1fda:	bf00      	nop
    1fdc:	20000a38 	.word	0x20000a38

00001fe0 <get_status>:
	return &config->subsys[type];
}

static enum clock_control_status get_status(struct device *dev,
					    clock_control_subsys_t subsys)
{
    1fe0:	b538      	push	{r3, r4, r5, lr}
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
	struct nrf_clock_control_sub_data *data;

	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    1fe2:	b2cc      	uxtb	r4, r1
    1fe4:	2c01      	cmp	r4, #1
{
    1fe6:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    1fe8:	d909      	bls.n	1ffe <get_status+0x1e>
    1fea:	490b      	ldr	r1, [pc, #44]	; (2018 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x18>)
    1fec:	480b      	ldr	r0, [pc, #44]	; (201c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1c>)
    1fee:	237f      	movs	r3, #127	; 0x7f
    1ff0:	4a0b      	ldr	r2, [pc, #44]	; (2020 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x20>)
    1ff2:	f00e fef3 	bl	10ddc <printk>
    1ff6:	217f      	movs	r1, #127	; 0x7f
    1ff8:	4809      	ldr	r0, [pc, #36]	; (2020 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x20>)
    1ffa:	f00f f985 	bl	11308 <assert_post_action>
	data = get_sub_data(dev, type);
	if (data->started) {
    1ffe:	210c      	movs	r1, #12
	data = get_sub_data(dev, type);
    2000:	68eb      	ldr	r3, [r5, #12]
	if (data->started) {
    2002:	fb04 3101 	mla	r1, r4, r1, r3
    2006:	7a4b      	ldrb	r3, [r1, #9]
    2008:	b923      	cbnz	r3, 2014 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x14>
		return CLOCK_CONTROL_STATUS_ON;
	}

	if (data->ref > 0) {
    200a:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
    200c:	fab0 f080 	clz	r0, r0
    2010:	0940      	lsrs	r0, r0, #5
		return CLOCK_CONTROL_STATUS_STARTING;
	}

	return CLOCK_CONTROL_STATUS_OFF;
}
    2012:	bd38      	pop	{r3, r4, r5, pc}
		return CLOCK_CONTROL_STATUS_ON;
    2014:	2002      	movs	r0, #2
    2016:	e7fc      	b.n	2012 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x12>
    2018:	0001653a 	.word	0x0001653a
    201c:	00016493 	.word	0x00016493
    2020:	000164ff 	.word	0x000164ff

00002024 <clock_async_start>:
}

static int clock_async_start(struct device *dev,
			     clock_control_subsys_t subsys,
			     struct clock_control_async_data *data)
{
    2024:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct nrf_clock_control_sub_config *config;
	struct nrf_clock_control_sub_data *clk_data;
	int key;
	u8_t ref;

	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2028:	b2ce      	uxtb	r6, r1
    202a:	2e01      	cmp	r6, #1
{
    202c:	4607      	mov	r7, r0
    202e:	4689      	mov	r9, r1
    2030:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2032:	d909      	bls.n	2048 <clock_async_start+0x24>
    2034:	4941      	ldr	r1, [pc, #260]	; (213c <clock_async_start+0x118>)
    2036:	4842      	ldr	r0, [pc, #264]	; (2140 <clock_async_start+0x11c>)
    2038:	23ef      	movs	r3, #239	; 0xef
    203a:	4a42      	ldr	r2, [pc, #264]	; (2144 <clock_async_start+0x120>)
    203c:	f00e fece 	bl	10ddc <printk>
    2040:	21ef      	movs	r1, #239	; 0xef
    2042:	4840      	ldr	r0, [pc, #256]	; (2144 <clock_async_start+0x120>)
    2044:	f00f f960 	bl	11308 <assert_post_action>
	config = get_sub_config(dev, type);
    2048:	f8d7 a004 	ldr.w	sl, [r7, #4]
	clk_data = get_sub_data(dev, type);
    204c:	f8d7 800c 	ldr.w	r8, [r7, #12]

	__ASSERT_NO_MSG((data == NULL) ||
    2050:	2c00      	cmp	r4, #0
    2052:	d153      	bne.n	20fc <clock_async_start+0xd8>
	__asm__ volatile(
    2054:	f04f 0320 	mov.w	r3, #32
    2058:	f3ef 8b11 	mrs	fp, BASEPRI
    205c:	f383 8811 	msr	BASEPRI, r3
    2060:	f3bf 8f6f 	isb	sy
	    && is_in_list(&clk_data->list, &data->node)) {
		return -EBUSY;
	}

	key = irq_lock();
	ref = ++clk_data->ref;
    2064:	230c      	movs	r3, #12
    2066:	fb06 8303 	mla	r3, r6, r3, r8
    206a:	7a1d      	ldrb	r5, [r3, #8]
    206c:	3501      	adds	r5, #1
    206e:	b2ed      	uxtb	r5, r5
    2070:	721d      	strb	r5, [r3, #8]
	__ASSERT_NO_MSG(clk_data->ref > 0);
    2072:	b95d      	cbnz	r5, 208c <clock_async_start+0x68>
    2074:	4934      	ldr	r1, [pc, #208]	; (2148 <clock_async_start+0x124>)
    2076:	4832      	ldr	r0, [pc, #200]	; (2140 <clock_async_start+0x11c>)
    2078:	f44f 7380 	mov.w	r3, #256	; 0x100
    207c:	4a31      	ldr	r2, [pc, #196]	; (2144 <clock_async_start+0x120>)
    207e:	f00e fead 	bl	10ddc <printk>
    2082:	f44f 7180 	mov.w	r1, #256	; 0x100
    2086:	482f      	ldr	r0, [pc, #188]	; (2144 <clock_async_start+0x120>)
    2088:	f00f f93e 	bl	11308 <assert_post_action>
	__asm__ volatile(
    208c:	f38b 8811 	msr	BASEPRI, fp
    2090:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	if (data) {
    2094:	b344      	cbz	r4, 20e8 <clock_async_start+0xc4>
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    2096:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    209a:	2203      	movs	r2, #3
    209c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		bool already_started;

		clock_irqs_disable();
		already_started = clk_data->started;
    20a0:	220c      	movs	r2, #12
    20a2:	4372      	muls	r2, r6
    20a4:	eb08 0302 	add.w	r3, r8, r2
    20a8:	7a59      	ldrb	r1, [r3, #9]
		if (!already_started) {
    20aa:	b991      	cbnz	r1, 20d2 <clock_async_start+0xae>
	__asm__ volatile(
    20ac:	f04f 0020 	mov.w	r0, #32
    20b0:	f3ef 8c11 	mrs	ip, BASEPRI
    20b4:	f380 8811 	msr	BASEPRI, r0
    20b8:	f3bf 8f6f 	isb	sy
	parent->next = child;
    20bc:	6021      	str	r1, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
    20be:	6858      	ldr	r0, [r3, #4]
    20c0:	2800      	cmp	r0, #0
    20c2:	d133      	bne.n	212c <clock_async_start+0x108>
	list->tail = node;
    20c4:	605c      	str	r4, [r3, #4]
	list->head = node;
    20c6:	f848 4002 	str.w	r4, [r8, r2]
	__asm__ volatile(
    20ca:	f38c 8811 	msr	BASEPRI, ip
    20ce:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
    20d2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    20d6:	2203      	movs	r2, #3
    20d8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
			list_append(&clk_data->list, &data->node);
		}
		clock_irqs_enable();

		if (already_started) {
    20dc:	b121      	cbz	r1, 20e8 <clock_async_start+0xc4>
			data->cb(dev, subsys, data->user_data);
    20de:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    20e2:	4649      	mov	r1, r9
    20e4:	4638      	mov	r0, r7
    20e6:	4798      	blx	r3
		}
	}

	if (ref == 1) {
    20e8:	2d01      	cmp	r5, #1
    20ea:	d105      	bne.n	20f8 <clock_async_start+0xd4>
		if (IS_ENABLED(CONFIG_NRF52_ANOMALY_132_WORKAROUND) &&
			(subsys == CLOCK_CONTROL_NRF_SUBSYS_LF)) {
			anomaly_132_workaround();
		}

		nrf_clock_task_trigger(NRF_CLOCK, config->start_tsk);
    20ec:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_clock_task_trigger(NRF_CLOCK_Type * p_reg, nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    20f0:	78b3      	ldrb	r3, [r6, #2]
    20f2:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    20f6:	601d      	str	r5, [r3, #0]
	}

	return 0;
    20f8:	2000      	movs	r0, #0
    20fa:	e01c      	b.n	2136 <clock_async_start+0x112>
	__ASSERT_NO_MSG((data == NULL) ||
    20fc:	6863      	ldr	r3, [r4, #4]
    20fe:	b94b      	cbnz	r3, 2114 <clock_async_start+0xf0>
    2100:	4912      	ldr	r1, [pc, #72]	; (214c <clock_async_start+0x128>)
    2102:	480f      	ldr	r0, [pc, #60]	; (2140 <clock_async_start+0x11c>)
    2104:	23f3      	movs	r3, #243	; 0xf3
    2106:	4a0f      	ldr	r2, [pc, #60]	; (2144 <clock_async_start+0x120>)
    2108:	f00e fe68 	bl	10ddc <printk>
    210c:	21f3      	movs	r1, #243	; 0xf3
    210e:	480d      	ldr	r0, [pc, #52]	; (2144 <clock_async_start+0x120>)
    2110:	f00f f8fa 	bl	11308 <assert_post_action>
	sys_snode_t *item = sys_slist_peek_head(list);
    2114:	230c      	movs	r3, #12
    2116:	4373      	muls	r3, r6
    2118:	f858 3003 	ldr.w	r3, [r8, r3]
		if (item == node) {
    211c:	429c      	cmp	r4, r3
    211e:	d008      	beq.n	2132 <clock_async_start+0x10e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    2120:	2b00      	cmp	r3, #0
    2122:	d097      	beq.n	2054 <clock_async_start+0x30>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2124:	681b      	ldr	r3, [r3, #0]
	} while (item);
    2126:	2b00      	cmp	r3, #0
    2128:	d1f8      	bne.n	211c <clock_async_start+0xf8>
    212a:	e793      	b.n	2054 <clock_async_start+0x30>
	parent->next = child;
    212c:	6004      	str	r4, [r0, #0]
	list->tail = node;
    212e:	605c      	str	r4, [r3, #4]
}
    2130:	e7cb      	b.n	20ca <clock_async_start+0xa6>
		return -EBUSY;
    2132:	f06f 000f 	mvn.w	r0, #15
}
    2136:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    213a:	bf00      	nop
    213c:	0001653a 	.word	0x0001653a
    2140:	00016493 	.word	0x00016493
    2144:	000164ff 	.word	0x000164ff
    2148:	000165ac 	.word	0x000165ac
    214c:	0001655e 	.word	0x0001655e

00002150 <clock_stop>:
{
    2150:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2152:	b2cc      	uxtb	r4, r1
    2154:	2c01      	cmp	r4, #1
{
    2156:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2158:	d909      	bls.n	216e <clock_stop+0x1e>
    215a:	4918      	ldr	r1, [pc, #96]	; (21bc <clock_stop+0x6c>)
    215c:	4818      	ldr	r0, [pc, #96]	; (21c0 <clock_stop+0x70>)
    215e:	2394      	movs	r3, #148	; 0x94
    2160:	4a18      	ldr	r2, [pc, #96]	; (21c4 <clock_stop+0x74>)
    2162:	f00e fe3b 	bl	10ddc <printk>
    2166:	2194      	movs	r1, #148	; 0x94
    2168:	4816      	ldr	r0, [pc, #88]	; (21c4 <clock_stop+0x74>)
    216a:	f00f f8cd 	bl	11308 <assert_post_action>
	config = get_sub_config(dev, type);
    216e:	6869      	ldr	r1, [r5, #4]
	data = get_sub_data(dev, type);
    2170:	68ed      	ldr	r5, [r5, #12]
	__asm__ volatile(
    2172:	f04f 0320 	mov.w	r3, #32
    2176:	f3ef 8611 	mrs	r6, BASEPRI
    217a:	f383 8811 	msr	BASEPRI, r3
    217e:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
    2182:	220c      	movs	r2, #12
    2184:	4362      	muls	r2, r4
    2186:	18ab      	adds	r3, r5, r2
    2188:	7a18      	ldrb	r0, [r3, #8]
    218a:	b190      	cbz	r0, 21b2 <clock_stop+0x62>
	data->ref--;
    218c:	3801      	subs	r0, #1
    218e:	b2c0      	uxtb	r0, r0
    2190:	7218      	strb	r0, [r3, #8]
	if (data->ref == 0) {
    2192:	b988      	cbnz	r0, 21b8 <clock_stop+0x68>
		nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
    2194:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    2198:	2101      	movs	r1, #1
	list->head = NULL;
    219a:	50a8      	str	r0, [r5, r2]
    219c:	78e2      	ldrb	r2, [r4, #3]
	list->tail = NULL;
    219e:	6058      	str	r0, [r3, #4]
    21a0:	f102 2250 	add.w	r2, r2, #1342197760	; 0x50005000
    21a4:	6011      	str	r1, [r2, #0]
		data->started = false;
    21a6:	7258      	strb	r0, [r3, #9]
	__asm__ volatile(
    21a8:	f386 8811 	msr	BASEPRI, r6
    21ac:	f3bf 8f6f 	isb	sy
}
    21b0:	bd70      	pop	{r4, r5, r6, pc}
		err = -EALREADY;
    21b2:	f06f 0044 	mvn.w	r0, #68	; 0x44
    21b6:	e7f7      	b.n	21a8 <clock_stop+0x58>
	int err = 0;
    21b8:	2000      	movs	r0, #0
    21ba:	e7f5      	b.n	21a8 <clock_stop+0x58>
    21bc:	0001653a 	.word	0x0001653a
    21c0:	00016493 	.word	0x00016493
    21c4:	000164ff 	.word	0x000164ff

000021c8 <clkstarted_handle.constprop.0>:
DEVICE_AND_API_INIT(clock_nrf, DT_INST_LABEL(0),
		    clk_init, &data, &config, PRE_KERNEL_1,
		    CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &clock_control_api);

static void clkstarted_handle(struct device *dev,
    21c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
	struct clock_control_async_data *async_data;

	DBG(dev, type, "Clock started");
	sub_data->started = true;
    21ca:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    21cc:	4e11      	ldr	r6, [pc, #68]	; (2214 <clkstarted_handle.constprop.0+0x4c>)
static void clkstarted_handle(struct device *dev,
    21ce:	4605      	mov	r5, r0
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    21d0:	68f3      	ldr	r3, [r6, #12]
	sub_data->started = true;
    21d2:	fb04 3400 	mla	r4, r4, r0, r3
    21d6:	2301      	movs	r3, #1
    21d8:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
    21da:	f04f 0320 	mov.w	r3, #32
    21de:	f3ef 8111 	mrs	r1, BASEPRI
    21e2:	f383 8811 	msr	BASEPRI, r3
    21e6:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
    21ea:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    21ec:	b12b      	cbz	r3, 21fa <clkstarted_handle.constprop.0+0x32>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    21ee:	6860      	ldr	r0, [r4, #4]
    21f0:	681a      	ldr	r2, [r3, #0]
    21f2:	4283      	cmp	r3, r0
	list->head = node;
    21f4:	6022      	str	r2, [r4, #0]
	list->tail = node;
    21f6:	bf08      	it	eq
    21f8:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
    21fa:	f381 8811 	msr	BASEPRI, r1
    21fe:	f3bf 8f6f 	isb	sy

	while ((async_data = list_get(&sub_data->list)) != NULL) {
    2202:	b903      	cbnz	r3, 2206 <clkstarted_handle.constprop.0+0x3e>
		async_data->cb(dev, (clock_control_subsys_t)type,
				async_data->user_data);
	}
}
    2204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		async_data->cb(dev, (clock_control_subsys_t)type,
    2206:	4629      	mov	r1, r5
    2208:	e9d3 7201 	ldrd	r7, r2, [r3, #4]
    220c:	4630      	mov	r0, r6
    220e:	47b8      	blx	r7
    2210:	e7e3      	b.n	21da <clkstarted_handle.constprop.0+0x12>
    2212:	bf00      	nop
    2214:	200003cc 	.word	0x200003cc

00002218 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    2218:	b508      	push	{r3, lr}
#endif
}

NRF_STATIC_INLINE bool nrf_clock_event_check(NRF_CLOCK_Type const * p_reg, nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    221a:	4b11      	ldr	r3, [pc, #68]	; (2260 <nrf_power_clock_isr+0x48>)
    221c:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    221e:	b16a      	cbz	r2, 223c <nrf_power_clock_isr+0x24>
    return p_reg->INTENSET & mask;
    2220:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    2224:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    2228:	07d1      	lsls	r1, r2, #31
    222a:	d507      	bpl.n	223c <nrf_power_clock_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    222c:	2200      	movs	r2, #0
    222e:	601a      	str	r2, [r3, #0]
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    2230:	4b0c      	ldr	r3, [pc, #48]	; (2264 <nrf_power_clock_isr+0x4c>)

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    2232:	68db      	ldr	r3, [r3, #12]
    2234:	7a58      	ldrb	r0, [r3, #9]
    2236:	b908      	cbnz	r0, 223c <nrf_power_clock_isr+0x24>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    2238:	f7ff ffc6 	bl	21c8 <clkstarted_handle.constprop.0>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    223c:	4b0a      	ldr	r3, [pc, #40]	; (2268 <nrf_power_clock_isr+0x50>)
    223e:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    2240:	b162      	cbz	r2, 225c <nrf_power_clock_isr+0x44>
    return p_reg->INTENSET & mask;
    2242:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    2246:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    224a:	0792      	lsls	r2, r2, #30
    224c:	d506      	bpl.n	225c <nrf_power_clock_isr+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    224e:	2200      	movs	r2, #0
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started();
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2250:	2001      	movs	r0, #1
    2252:	601a      	str	r2, [r3, #0]
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    2254:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2258:	f7ff bfb6 	b.w	21c8 <clkstarted_handle.constprop.0>
}
    225c:	bd08      	pop	{r3, pc}
    225e:	bf00      	nop
    2260:	50005100 	.word	0x50005100
    2264:	200003cc 	.word	0x200003cc
    2268:	50005104 	.word	0x50005104

0000226c <bt_rpmsg_init>:

static int bt_rpmsg_init(struct device *unused)
{
	ARG_UNUSED(unused);

	return bt_hci_driver_register(&drv);
    226c:	4801      	ldr	r0, [pc, #4]	; (2274 <bt_rpmsg_init+0x8>)
    226e:	f003 b81f 	b.w	52b0 <bt_hci_driver_register>
    2272:	bf00      	nop
    2274:	00015798 	.word	0x00015798

00002278 <bt_rpmsg_send>:
{
    2278:	b510      	push	{r4, lr}
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    227a:	7d02      	ldrb	r2, [r0, #20]
    227c:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    227e:	b152      	cbz	r2, 2296 <bt_rpmsg_send+0x1e>
    2280:	2a02      	cmp	r2, #2
    2282:	d009      	beq.n	2298 <bt_rpmsg_send+0x20>
		BT_ERR("Unknown type %u", bt_buf_get_type(buf));
    2284:	2145      	movs	r1, #69	; 0x45
    2286:	480b      	ldr	r0, [pc, #44]	; (22b4 <bt_rpmsg_send+0x3c>)
		BT_ERR("Failed to send (err %d)", err);
    2288:	f00e fda8 	bl	10ddc <printk>
	net_buf_unref(buf);
    228c:	4620      	mov	r0, r4
    228e:	f009 fbf1 	bl	ba74 <net_buf_unref>
}
    2292:	2000      	movs	r0, #0
    2294:	bd10      	pop	{r4, pc}
	switch (bt_buf_get_type(buf)) {
    2296:	2201      	movs	r2, #1
	net_buf_push_u8(buf, pkt_indicator);
    2298:	4611      	mov	r1, r2
    229a:	f104 0008 	add.w	r0, r4, #8
    229e:	f011 fea6 	bl	13fee <net_buf_simple_push_u8>
	err = bt_rpmsg_platform_send(buf);
    22a2:	4620      	mov	r0, r4
    22a4:	f000 f9e4 	bl	2670 <bt_rpmsg_platform_send>
	if (err < 0) {
    22a8:	1e02      	subs	r2, r0, #0
    22aa:	daef      	bge.n	228c <bt_rpmsg_send+0x14>
		BT_ERR("Failed to send (err %d)", err);
    22ac:	2145      	movs	r1, #69	; 0x45
    22ae:	4802      	ldr	r0, [pc, #8]	; (22b8 <bt_rpmsg_send+0x40>)
    22b0:	e7ea      	b.n	2288 <bt_rpmsg_send+0x10>
    22b2:	bf00      	nop
    22b4:	000165de 	.word	0x000165de
    22b8:	000165f3 	.word	0x000165f3

000022bc <bt_rpmsg_rx>:
{
    22bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	pkt_indicator = *data++;
    22c0:	4680      	mov	r8, r0
    22c2:	f818 2b01 	ldrb.w	r2, [r8], #1
{
    22c6:	4606      	mov	r6, r0
	switch (pkt_indicator) {
    22c8:	2a02      	cmp	r2, #2
{
    22ca:	460d      	mov	r5, r1
	remaining -= sizeof(pkt_indicator);
    22cc:	f101 33ff 	add.w	r3, r1, #4294967295
	switch (pkt_indicator) {
    22d0:	d03e      	beq.n	2350 <bt_rpmsg_rx+0x94>
    22d2:	2a04      	cmp	r2, #4
    22d4:	d169      	bne.n	23aa <bt_rpmsg_rx+0xee>
	if (remaining < sizeof(hdr)) {
    22d6:	2b01      	cmp	r3, #1
    22d8:	d806      	bhi.n	22e8 <bt_rpmsg_rx+0x2c>
		BT_ERR("Not enough data for event header");
    22da:	2145      	movs	r1, #69	; 0x45
    22dc:	4835      	ldr	r0, [pc, #212]	; (23b4 <bt_rpmsg_rx+0xf8>)
		BT_ERR("Event payload length is not correct");
    22de:	f00e fd7d 	bl	10ddc <printk>
}
    22e2:	b002      	add	sp, #8
    22e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (evt_type) {
    22e8:	7843      	ldrb	r3, [r0, #1]
    22ea:	2b3e      	cmp	r3, #62	; 0x3e
    22ec:	d110      	bne.n	2310 <bt_rpmsg_rx+0x54>
		switch (subevt_type) {
    22ee:	78c7      	ldrb	r7, [r0, #3]
    22f0:	1ebb      	subs	r3, r7, #2
    22f2:	425f      	negs	r7, r3
    22f4:	415f      	adcs	r7, r3
	memcpy((void *)&hdr, data, sizeof(hdr));
    22f6:	2202      	movs	r2, #2
    22f8:	4641      	mov	r1, r8
    22fa:	a801      	add	r0, sp, #4
    22fc:	f00f ff2f 	bl	1215e <memcpy>
	if (remaining != hdr.len) {
    2300:	f89d 3005 	ldrb.w	r3, [sp, #5]
	remaining -= sizeof(hdr);
    2304:	3d03      	subs	r5, #3
	if (remaining != hdr.len) {
    2306:	429d      	cmp	r5, r3
    2308:	d004      	beq.n	2314 <bt_rpmsg_rx+0x58>
		BT_ERR("Event payload length is not correct");
    230a:	2145      	movs	r1, #69	; 0x45
    230c:	482a      	ldr	r0, [pc, #168]	; (23b8 <bt_rpmsg_rx+0xfc>)
    230e:	e7e6      	b.n	22de <bt_rpmsg_rx+0x22>
		return false;
    2310:	2700      	movs	r7, #0
    2312:	e7f0      	b.n	22f6 <bt_rpmsg_rx+0x3a>
	buf = bt_buf_get_evt(hdr.evt, discardable, K_NO_WAIT);
    2314:	2200      	movs	r2, #0
    2316:	2300      	movs	r3, #0
    2318:	4639      	mov	r1, r7
    231a:	f89d 0004 	ldrb.w	r0, [sp, #4]
    231e:	f003 fc13 	bl	5b48 <bt_buf_get_evt>
	if (!buf) {
    2322:	4604      	mov	r4, r0
    2324:	b920      	cbnz	r0, 2330 <bt_rpmsg_rx+0x74>
		if (discardable) {
    2326:	2f00      	cmp	r7, #0
    2328:	d1db      	bne.n	22e2 <bt_rpmsg_rx+0x26>
			BT_ERR("No available event buffers!");
    232a:	2145      	movs	r1, #69	; 0x45
    232c:	4823      	ldr	r0, [pc, #140]	; (23bc <bt_rpmsg_rx+0x100>)
    232e:	e7d6      	b.n	22de <bt_rpmsg_rx+0x22>
	net_buf_add_mem(buf, &hdr, sizeof(hdr));
    2330:	f100 0708 	add.w	r7, r0, #8
    2334:	2202      	movs	r2, #2
    2336:	a901      	add	r1, sp, #4
    2338:	4638      	mov	r0, r7
    233a:	f011 fe73 	bl	14024 <net_buf_simple_add_mem>
	net_buf_add_mem(buf, data, remaining);
    233e:	462a      	mov	r2, r5
    2340:	1cf1      	adds	r1, r6, #3
	net_buf_add_mem(buf, data, remaining);
    2342:	4638      	mov	r0, r7
    2344:	f011 fe6e 	bl	14024 <net_buf_simple_add_mem>
		bt_recv(buf);
    2348:	4620      	mov	r0, r4
    234a:	f002 ff87 	bl	525c <bt_recv>
		BT_HEXDUMP_DBG(buf->data, buf->len, "RX buf payload:");
    234e:	e7c8      	b.n	22e2 <bt_rpmsg_rx+0x26>
	if (remaining < sizeof(hdr)) {
    2350:	2b03      	cmp	r3, #3
    2352:	d802      	bhi.n	235a <bt_rpmsg_rx+0x9e>
		BT_ERR("Not enough data for ACL header");
    2354:	2145      	movs	r1, #69	; 0x45
    2356:	481a      	ldr	r0, [pc, #104]	; (23c0 <bt_rpmsg_rx+0x104>)
    2358:	e7c1      	b.n	22de <bt_rpmsg_rx+0x22>
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
    235a:	2200      	movs	r2, #0
    235c:	2300      	movs	r3, #0
    235e:	2003      	movs	r0, #3
    2360:	f003 fb98 	bl	5a94 <bt_buf_get_rx>
	if (buf) {
    2364:	4604      	mov	r4, r0
    2366:	b1d0      	cbz	r0, 239e <bt_rpmsg_rx+0xe2>
		memcpy((void *)&hdr, data, sizeof(hdr));
    2368:	2204      	movs	r2, #4
    236a:	4641      	mov	r1, r8
    236c:	eb0d 0002 	add.w	r0, sp, r2
    2370:	f00f fef5 	bl	1215e <memcpy>
		net_buf_add_mem(buf, &hdr, sizeof(hdr));
    2374:	2204      	movs	r2, #4
    2376:	f104 0708 	add.w	r7, r4, #8
    237a:	4638      	mov	r0, r7
    237c:	eb0d 0102 	add.w	r1, sp, r2
    2380:	f011 fe50 	bl	14024 <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    2384:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		remaining -= sizeof(hdr);
    2388:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    238a:	429d      	cmp	r5, r3
    238c:	d00a      	beq.n	23a4 <bt_rpmsg_rx+0xe8>
		BT_ERR("ACL payload length is not correct");
    238e:	2145      	movs	r1, #69	; 0x45
    2390:	480c      	ldr	r0, [pc, #48]	; (23c4 <bt_rpmsg_rx+0x108>)
    2392:	f00e fd23 	bl	10ddc <printk>
		net_buf_unref(buf);
    2396:	4620      	mov	r0, r4
    2398:	f009 fb6c 	bl	ba74 <net_buf_unref>
	if (buf) {
    239c:	e7a1      	b.n	22e2 <bt_rpmsg_rx+0x26>
		BT_ERR("No available ACL buffers!");
    239e:	2145      	movs	r1, #69	; 0x45
    23a0:	4809      	ldr	r0, [pc, #36]	; (23c8 <bt_rpmsg_rx+0x10c>)
    23a2:	e79c      	b.n	22de <bt_rpmsg_rx+0x22>
	net_buf_add_mem(buf, data, remaining);
    23a4:	462a      	mov	r2, r5
    23a6:	1d71      	adds	r1, r6, #5
    23a8:	e7cb      	b.n	2342 <bt_rpmsg_rx+0x86>
		BT_ERR("Unknown HCI type %u", pkt_indicator);
    23aa:	2145      	movs	r1, #69	; 0x45
    23ac:	4807      	ldr	r0, [pc, #28]	; (23cc <bt_rpmsg_rx+0x110>)
    23ae:	f00e fd15 	bl	10ddc <printk>
		BT_HEXDUMP_DBG(buf->data, buf->len, "RX buf payload:");
    23b2:	e796      	b.n	22e2 <bt_rpmsg_rx+0x26>
    23b4:	00016610 	.word	0x00016610
    23b8:	00016636 	.word	0x00016636
    23bc:	0001665f 	.word	0x0001665f
    23c0:	00016680 	.word	0x00016680
    23c4:	000166c3 	.word	0x000166c3
    23c8:	000166a4 	.word	0x000166a4
    23cc:	000166ea 	.word	0x000166ea

000023d0 <virtio_set_status>:
	return *(volatile u8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(u8_t data, mem_addr_t addr)
{
	*(volatile u8_t *)addr = data;
    23d0:	4b01      	ldr	r3, [pc, #4]	; (23d8 <virtio_set_status+0x8>)
    23d2:	7019      	strb	r1, [r3, #0]
}

static void virtio_set_status(struct virtio_device *vdev, unsigned char status)
{
	sys_write8(status, VDEV_STATUS_ADDR);
}
    23d4:	4770      	bx	lr
    23d6:	bf00      	nop
    23d8:	20070000 	.word	0x20070000

000023dc <ns_bind_cb>:
{
	rpmsg_destroy_ept(ep);
}

static void ns_bind_cb(struct rpmsg_device *rdev, const char *name, u32_t dest)
{
    23dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	(void)rpmsg_create_ept(&ep,
    23de:	4b09      	ldr	r3, [pc, #36]	; (2404 <ns_bind_cb+0x28>)
    23e0:	9302      	str	r3, [sp, #8]
    23e2:	4b09      	ldr	r3, [pc, #36]	; (2408 <ns_bind_cb+0x2c>)
    23e4:	e9cd 2300 	strd	r2, r3, [sp]
    23e8:	460a      	mov	r2, r1
    23ea:	f04f 33ff 	mov.w	r3, #4294967295
    23ee:	4601      	mov	r1, r0
    23f0:	4806      	ldr	r0, [pc, #24]	; (240c <ns_bind_cb+0x30>)
    23f2:	f00b f823 	bl	d43c <rpmsg_create_ept>
	z_impl_k_sem_give(sem);
    23f6:	4806      	ldr	r0, [pc, #24]	; (2410 <ns_bind_cb+0x34>)
				dest,
				endpoint_cb,
				rpmsg_service_unbind);

	k_sem_give(&ready_sem);
}
    23f8:	b005      	add	sp, #20
    23fa:	f85d eb04 	ldr.w	lr, [sp], #4
    23fe:	f00d ba63 	b.w	f8c8 <z_impl_k_sem_give>
    2402:	bf00      	nop
    2404:	0001179d 	.word	0x0001179d
    2408:	000117a1 	.word	0x000117a1
    240c:	20000acc 	.word	0x20000acc
    2410:	2000052c 	.word	0x2000052c

00002414 <virtio_notify>:
	status = ipm_send(ipm_tx_handle, 0, 0, NULL, 0);
    2414:	4b0a      	ldr	r3, [pc, #40]	; (2440 <virtio_notify+0x2c>)
{
    2416:	b513      	push	{r0, r1, r4, lr}
	status = ipm_send(ipm_tx_handle, 0, 0, NULL, 0);
    2418:	6818      	ldr	r0, [r3, #0]
			   const void *data, int size)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->driver_api;

	return api->send(ipmdev, wait, id, data, size);
    241a:	2300      	movs	r3, #0
    241c:	6882      	ldr	r2, [r0, #8]
    241e:	9300      	str	r3, [sp, #0]
    2420:	6814      	ldr	r4, [r2, #0]
    2422:	4619      	mov	r1, r3
    2424:	461a      	mov	r2, r3
    2426:	47a0      	blx	r4
	if (status != 0) {
    2428:	4602      	mov	r2, r0
    242a:	b130      	cbz	r0, 243a <virtio_notify+0x26>
		BT_ERR("ipm_send failed to notify: %d", status);
    242c:	2145      	movs	r1, #69	; 0x45
    242e:	4805      	ldr	r0, [pc, #20]	; (2444 <virtio_notify+0x30>)
}
    2430:	b002      	add	sp, #8
    2432:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("ipm_send failed to notify: %d", status);
    2436:	f00e bcd1 	b.w	10ddc <printk>
}
    243a:	b002      	add	sp, #8
    243c:	bd10      	pop	{r4, pc}
    243e:	bf00      	nop
    2440:	20000b10 	.word	0x20000b10
    2444:	00016717 	.word	0x00016717

00002448 <bt_rpmsg_rx_thread>:

static void bt_rpmsg_rx_thread(void *p1, void *p2, void *p3)
{
    2448:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_take(sem, timeout);
    244a:	4d07      	ldr	r5, [pc, #28]	; (2468 <bt_rpmsg_rx_thread+0x20>)

	while (1) {
		int status = k_sem_take(&rx_sem, K_FOREVER);

		if (status == 0) {
			virtqueue_notification(vq[0]);
    244c:	4c07      	ldr	r4, [pc, #28]	; (246c <bt_rpmsg_rx_thread+0x24>)
    244e:	f04f 32ff 	mov.w	r2, #4294967295
    2452:	f04f 33ff 	mov.w	r3, #4294967295
    2456:	4628      	mov	r0, r5
    2458:	f00d fa7a 	bl	f950 <z_impl_k_sem_take>
		if (status == 0) {
    245c:	2800      	cmp	r0, #0
    245e:	d1f6      	bne.n	244e <bt_rpmsg_rx_thread+0x6>
			virtqueue_notification(vq[0]);
    2460:	6820      	ldr	r0, [r4, #0]
    2462:	f012 fbe6 	bl	14c32 <virtqueue_notification>
	while (1) {
    2466:	e7f2      	b.n	244e <bt_rpmsg_rx_thread+0x6>
    2468:	20000544 	.word	0x20000544
    246c:	20000be0 	.word	0x20000be0

00002470 <ipm_callback>:
	z_impl_k_sem_give(sem);
    2470:	4801      	ldr	r0, [pc, #4]	; (2478 <ipm_callback+0x8>)
    2472:	f00d ba29 	b.w	f8c8 <z_impl_k_sem_give>
    2476:	bf00      	nop
    2478:	20000544 	.word	0x20000544

0000247c <bt_rpmsg_platform_init>:
		}
	}
}

int bt_rpmsg_platform_init(void)
{
    247c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    247e:	4b5b      	ldr	r3, [pc, #364]	; (25ec <bt_rpmsg_platform_init+0x170>)
{
    2480:	b08b      	sub	sp, #44	; 0x2c
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    2482:	9308      	str	r3, [sp, #32]
    2484:	2306      	movs	r3, #6
    2486:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    248a:	2200      	movs	r2, #0
    248c:	2300      	movs	r3, #0
    248e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    2492:	2300      	movs	r3, #0
    2494:	f06f 0207 	mvn.w	r2, #7
    2498:	e9cd 3301 	strd	r3, r3, [sp, #4]
    249c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    24a0:	4953      	ldr	r1, [pc, #332]	; (25f0 <bt_rpmsg_platform_init+0x174>)
    24a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    24a6:	9300      	str	r3, [sp, #0]
    24a8:	4852      	ldr	r0, [pc, #328]	; (25f4 <bt_rpmsg_platform_init+0x178>)
    24aa:	4b53      	ldr	r3, [pc, #332]	; (25f8 <bt_rpmsg_platform_init+0x17c>)
    24ac:	f00d fb4a 	bl	fb44 <z_impl_k_thread_create>
			bt_rpmsg_rx_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_BT_RPMSG_NRF53_RX_PRIO),
			0, K_NO_WAIT);

	/* Libmetal setup */
	err = metal_init(&metal_params);
    24b0:	a808      	add	r0, sp, #32
    24b2:	f00a feff 	bl	d2b4 <metal_init>
	if (err) {
    24b6:	4604      	mov	r4, r0
    24b8:	b138      	cbz	r0, 24ca <bt_rpmsg_platform_init+0x4e>
		BT_ERR("metal_init: failed - error code %d", err);
    24ba:	2145      	movs	r1, #69	; 0x45
    24bc:	4602      	mov	r2, r0
    24be:	484f      	ldr	r0, [pc, #316]	; (25fc <bt_rpmsg_platform_init+0x180>)
		return err;
	}

	err = metal_register_generic_device(&shm_device);
	if (err) {
		BT_ERR("Couldn't register shared memory device: %d", err);
    24c0:	f00e fc8c 	bl	10ddc <printk>

	/* Wait til nameservice ep is setup */
	k_sem_take(&ready_sem, K_FOREVER);

	return 0;
}
    24c4:	4620      	mov	r0, r4
    24c6:	b00b      	add	sp, #44	; 0x2c
    24c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = metal_register_generic_device(&shm_device);
    24ca:	484d      	ldr	r0, [pc, #308]	; (2600 <bt_rpmsg_platform_init+0x184>)
    24cc:	f00a fed2 	bl	d274 <metal_register_generic_device>
	if (err) {
    24d0:	4604      	mov	r4, r0
    24d2:	b118      	cbz	r0, 24dc <bt_rpmsg_platform_init+0x60>
		BT_ERR("Couldn't register shared memory device: %d", err);
    24d4:	4602      	mov	r2, r0
    24d6:	2145      	movs	r1, #69	; 0x45
    24d8:	484a      	ldr	r0, [pc, #296]	; (2604 <bt_rpmsg_platform_init+0x188>)
    24da:	e7f1      	b.n	24c0 <bt_rpmsg_platform_init+0x44>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
    24dc:	4d4a      	ldr	r5, [pc, #296]	; (2608 <bt_rpmsg_platform_init+0x18c>)
    24de:	494b      	ldr	r1, [pc, #300]	; (260c <bt_rpmsg_platform_init+0x190>)
    24e0:	462a      	mov	r2, r5
    24e2:	484b      	ldr	r0, [pc, #300]	; (2610 <bt_rpmsg_platform_init+0x194>)
    24e4:	f012 f91e 	bl	14724 <metal_device_open>
	if (err) {
    24e8:	4604      	mov	r4, r0
    24ea:	b118      	cbz	r0, 24f4 <bt_rpmsg_platform_init+0x78>
		BT_ERR("metal_device_open failed: %d", err);
    24ec:	4602      	mov	r2, r0
    24ee:	2145      	movs	r1, #69	; 0x45
    24f0:	4848      	ldr	r0, [pc, #288]	; (2614 <bt_rpmsg_platform_init+0x198>)
    24f2:	e7e5      	b.n	24c0 <bt_rpmsg_platform_init+0x44>
	io = metal_device_io_region(device, 0);
    24f4:	682b      	ldr	r3, [r5, #0]
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
    24f6:	4f48      	ldr	r7, [pc, #288]	; (2618 <bt_rpmsg_platform_init+0x19c>)
		? &device->regions[index]
		: NULL);
    24f8:	689a      	ldr	r2, [r3, #8]
    24fa:	b93a      	cbnz	r2, 250c <bt_rpmsg_platform_init+0x90>
    24fc:	603a      	str	r2, [r7, #0]
		BT_ERR("metal_device_io_region failed to get region");
    24fe:	2145      	movs	r1, #69	; 0x45
    2500:	4846      	ldr	r0, [pc, #280]	; (261c <bt_rpmsg_platform_init+0x1a0>)
		BT_ERR("Could not get RX IPM device handle");
    2502:	f00e fc6b 	bl	10ddc <printk>
		return -ENODEV;
    2506:	f06f 0412 	mvn.w	r4, #18
    250a:	e7db      	b.n	24c4 <bt_rpmsg_platform_init+0x48>
    250c:	330c      	adds	r3, #12
	io = metal_device_io_region(device, 0);
    250e:	603b      	str	r3, [r7, #0]
	if (!io) {
    2510:	2b00      	cmp	r3, #0
    2512:	d0f4      	beq.n	24fe <bt_rpmsg_platform_init+0x82>
    2514:	4842      	ldr	r0, [pc, #264]	; (2620 <bt_rpmsg_platform_init+0x1a4>)
    2516:	f00b f9bb 	bl	d890 <z_impl_device_get_binding>
	ipm_tx_handle = device_get_binding("IPM_0");
    251a:	4b42      	ldr	r3, [pc, #264]	; (2624 <bt_rpmsg_platform_init+0x1a8>)
    251c:	6018      	str	r0, [r3, #0]
	if (!ipm_tx_handle) {
    251e:	b910      	cbnz	r0, 2526 <bt_rpmsg_platform_init+0xaa>
		BT_ERR("Could not get TX IPM device handle");
    2520:	2145      	movs	r1, #69	; 0x45
    2522:	4841      	ldr	r0, [pc, #260]	; (2628 <bt_rpmsg_platform_init+0x1ac>)
    2524:	e7ed      	b.n	2502 <bt_rpmsg_platform_init+0x86>
    2526:	4841      	ldr	r0, [pc, #260]	; (262c <bt_rpmsg_platform_init+0x1b0>)
    2528:	f00b f9b2 	bl	d890 <z_impl_device_get_binding>
	if (!ipm_rx_handle) {
    252c:	b910      	cbnz	r0, 2534 <bt_rpmsg_platform_init+0xb8>
		BT_ERR("Could not get RX IPM device handle");
    252e:	2145      	movs	r1, #69	; 0x45
    2530:	483f      	ldr	r0, [pc, #252]	; (2630 <bt_rpmsg_platform_init+0x1b4>)
    2532:	e7e6      	b.n	2502 <bt_rpmsg_platform_init+0x86>
					 ipm_callback_t cb, void *context)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->driver_api;

	api->register_callback(ipmdev, cb, context);
    2534:	6883      	ldr	r3, [r0, #8]
    2536:	4622      	mov	r2, r4
    2538:	685b      	ldr	r3, [r3, #4]
    253a:	493e      	ldr	r1, [pc, #248]	; (2634 <bt_rpmsg_platform_init+0x1b8>)
    253c:	4798      	blx	r3
#endif

#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
static inline void *metal_allocate_memory(unsigned int size)
{
	return k_malloc(size);
    253e:	20b4      	movs	r0, #180	; 0xb4
    2540:	f00b fd52 	bl	dfe8 <k_malloc>
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = metal_allocate_memory(vq_size);
	if (vqs) {
    2544:	4606      	mov	r6, r0
    2546:	b118      	cbz	r0, 2550 <bt_rpmsg_platform_init+0xd4>
		memset(vqs, 0x00, vq_size);
    2548:	22b4      	movs	r2, #180	; 0xb4
    254a:	4621      	mov	r1, r4
    254c:	f00f fe32 	bl	121b4 <memset>
	vq[0] = virtqueue_allocate(VRING_SIZE);
    2550:	4d39      	ldr	r5, [pc, #228]	; (2638 <bt_rpmsg_platform_init+0x1bc>)
    2552:	602e      	str	r6, [r5, #0]
	if (!vq[0]) {
    2554:	b936      	cbnz	r6, 2564 <bt_rpmsg_platform_init+0xe8>
		BT_ERR("virtqueue_allocate failed to alloc vq[0]");
    2556:	2145      	movs	r1, #69	; 0x45
    2558:	4838      	ldr	r0, [pc, #224]	; (263c <bt_rpmsg_platform_init+0x1c0>)
		BT_ERR("virtqueue_allocate failed to alloc vq[1]");
    255a:	f00e fc3f 	bl	10ddc <printk>
		return -ENOMEM;
    255e:	f06f 040b 	mvn.w	r4, #11
    2562:	e7af      	b.n	24c4 <bt_rpmsg_platform_init+0x48>
    2564:	20b4      	movs	r0, #180	; 0xb4
    2566:	f00b fd3f 	bl	dfe8 <k_malloc>
	if (vqs) {
    256a:	4604      	mov	r4, r0
    256c:	b118      	cbz	r0, 2576 <bt_rpmsg_platform_init+0xfa>
		memset(vqs, 0x00, vq_size);
    256e:	22b4      	movs	r2, #180	; 0xb4
    2570:	2100      	movs	r1, #0
    2572:	f00f fe1f 	bl	121b4 <memset>
	vq[1] = virtqueue_allocate(VRING_SIZE);
    2576:	606c      	str	r4, [r5, #4]
	if (!vq[1]) {
    2578:	b914      	cbnz	r4, 2580 <bt_rpmsg_platform_init+0x104>
		BT_ERR("virtqueue_allocate failed to alloc vq[1]");
    257a:	2145      	movs	r1, #69	; 0x45
    257c:	4830      	ldr	r0, [pc, #192]	; (2640 <bt_rpmsg_platform_init+0x1c4>)
    257e:	e7ec      	b.n	255a <bt_rpmsg_platform_init+0xde>
	rvrings[0].io = io;
    2580:	4b30      	ldr	r3, [pc, #192]	; (2644 <bt_rpmsg_platform_init+0x1c8>)
	rvrings[0].info.vaddr = (void *)VRING_TX_ADDRESS;
    2582:	4a31      	ldr	r2, [pc, #196]	; (2648 <bt_rpmsg_platform_init+0x1cc>)
	rvrings[1].vq = vq[1];
    2584:	619c      	str	r4, [r3, #24]
	rvrings[0].info.vaddr = (void *)VRING_TX_ADDRESS;
    2586:	605a      	str	r2, [r3, #4]
	rvrings[0].info.align = VRING_ALIGNMENT;
    2588:	2204      	movs	r2, #4
    258a:	609a      	str	r2, [r3, #8]
	rvrings[1].info.align = VRING_ALIGNMENT;
    258c:	621a      	str	r2, [r3, #32]
	vdev.role = RPMSG_MASTER;
    258e:	2200      	movs	r2, #0
    2590:	4c2e      	ldr	r4, [pc, #184]	; (264c <bt_rpmsg_platform_init+0x1d0>)
	rvrings[0].info.num_descs = VRING_SIZE;
    2592:	2110      	movs	r1, #16
	vdev.role = RPMSG_MASTER;
    2594:	61a2      	str	r2, [r4, #24]
	vdev.vrings_num = VRING_COUNT;
    2596:	2202      	movs	r2, #2
	rvrings[0].io = io;
    2598:	6838      	ldr	r0, [r7, #0]
	rvrings[0].vq = vq[0];
    259a:	682d      	ldr	r5, [r5, #0]
	rvrings[0].io = io;
    259c:	6158      	str	r0, [r3, #20]
	rvrings[0].vq = vq[0];
    259e:	601d      	str	r5, [r3, #0]
	rvrings[1].io = io;
    25a0:	62d8      	str	r0, [r3, #44]	; 0x2c
	vdev.vrings_num = VRING_COUNT;
    25a2:	62a2      	str	r2, [r4, #40]	; 0x28
	rvrings[1].info.vaddr = (void *)VRING_RX_ADDRESS;
    25a4:	482a      	ldr	r0, [pc, #168]	; (2650 <bt_rpmsg_platform_init+0x1d4>)
	vdev.func = &dispatch;
    25a6:	4a2b      	ldr	r2, [pc, #172]	; (2654 <bt_rpmsg_platform_init+0x1d8>)
	rpmsg_virtio_init_shm_pool(&shpool, (void *)SHM_START_ADDR, SHM_SIZE);
    25a8:	4d2b      	ldr	r5, [pc, #172]	; (2658 <bt_rpmsg_platform_init+0x1dc>)
	rvrings[0].info.num_descs = VRING_SIZE;
    25aa:	8199      	strh	r1, [r3, #12]
	rvrings[1].info.vaddr = (void *)VRING_RX_ADDRESS;
    25ac:	61d8      	str	r0, [r3, #28]
	rvrings[1].info.num_descs = VRING_SIZE;
    25ae:	8499      	strh	r1, [r3, #36]	; 0x24
	vdev.func = &dispatch;
    25b0:	6222      	str	r2, [r4, #32]
	rpmsg_virtio_init_shm_pool(&shpool, (void *)SHM_START_ADDR, SHM_SIZE);
    25b2:	4628      	mov	r0, r5
    25b4:	f44f 42f8 	mov.w	r2, #31744	; 0x7c00
    25b8:	4928      	ldr	r1, [pc, #160]	; (265c <bt_rpmsg_platform_init+0x1e0>)
	vdev.vrings_info = &rvrings[0];
    25ba:	62e3      	str	r3, [r4, #44]	; 0x2c
	rpmsg_virtio_init_shm_pool(&shpool, (void *)SHM_START_ADDR, SHM_SIZE);
    25bc:	f012 fca8 	bl	14f10 <rpmsg_virtio_init_shm_pool>
	err = rpmsg_init_vdev(&rvdev, &vdev, ns_bind_cb, io, &shpool);
    25c0:	4621      	mov	r1, r4
    25c2:	683b      	ldr	r3, [r7, #0]
    25c4:	4a26      	ldr	r2, [pc, #152]	; (2660 <bt_rpmsg_platform_init+0x1e4>)
    25c6:	4827      	ldr	r0, [pc, #156]	; (2664 <bt_rpmsg_platform_init+0x1e8>)
    25c8:	9500      	str	r5, [sp, #0]
    25ca:	f00b f869 	bl	d6a0 <rpmsg_init_vdev>
	if (err) {
    25ce:	4604      	mov	r4, r0
    25d0:	b118      	cbz	r0, 25da <bt_rpmsg_platform_init+0x15e>
		BT_ERR("rpmsg_init_vdev failed %d", err);
    25d2:	4602      	mov	r2, r0
    25d4:	2145      	movs	r1, #69	; 0x45
    25d6:	4824      	ldr	r0, [pc, #144]	; (2668 <bt_rpmsg_platform_init+0x1ec>)
    25d8:	e772      	b.n	24c0 <bt_rpmsg_platform_init+0x44>
	return z_impl_k_sem_take(sem, timeout);
    25da:	f04f 32ff 	mov.w	r2, #4294967295
    25de:	f04f 33ff 	mov.w	r3, #4294967295
    25e2:	4822      	ldr	r0, [pc, #136]	; (266c <bt_rpmsg_platform_init+0x1f0>)
    25e4:	f00d f9b4 	bl	f950 <z_impl_k_sem_take>
	return 0;
    25e8:	e76c      	b.n	24c4 <bt_rpmsg_platform_init+0x48>
    25ea:	bf00      	nop
    25ec:	0000d305 	.word	0x0000d305
    25f0:	20002a90 	.word	0x20002a90
    25f4:	20000a54 	.word	0x20000a54
    25f8:	00002449 	.word	0x00002449
    25fc:	0001673a 	.word	0x0001673a
    2600:	20000184 	.word	0x20000184
    2604:	00016762 	.word	0x00016762
    2608:	20000ac8 	.word	0x20000ac8
    260c:	00016792 	.word	0x00016792
    2610:	0001679c 	.word	0x0001679c
    2614:	000167a4 	.word	0x000167a4
    2618:	20000b0c 	.word	0x20000b0c
    261c:	000167c6 	.word	0x000167c6
    2620:	000167f7 	.word	0x000167f7
    2624:	20000b10 	.word	0x20000b10
    2628:	000167fd 	.word	0x000167fd
    262c:	00016825 	.word	0x00016825
    2630:	0001682b 	.word	0x0001682b
    2634:	00002471 	.word	0x00002471
    2638:	20000be0 	.word	0x20000be0
    263c:	00016853 	.word	0x00016853
    2640:	00016881 	.word	0x00016881
    2644:	20000ba4 	.word	0x20000ba4
    2648:	20077c00 	.word	0x20077c00
    264c:	20000780 	.word	0x20000780
    2650:	20077800 	.word	0x20077800
    2654:	000157ac 	.word	0x000157ac
    2658:	20000bd4 	.word	0x20000bd4
    265c:	20070400 	.word	0x20070400
    2660:	000023dd 	.word	0x000023dd
    2664:	20000b14 	.word	0x20000b14
    2668:	000168af 	.word	0x000168af
    266c:	2000052c 	.word	0x2000052c

00002670 <bt_rpmsg_platform_send>:

int bt_rpmsg_platform_send(struct net_buf *buf)
{
    2670:	b513      	push	{r0, r1, r4, lr}
	return rpmsg_send(&ep, buf->data, buf->len);
    2672:	6883      	ldr	r3, [r0, #8]
    2674:	8981      	ldrh	r1, [r0, #12]
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	if (ept->dest_addr == RPMSG_ADDR_ANY)
    2676:	4807      	ldr	r0, [pc, #28]	; (2694 <bt_rpmsg_platform_send+0x24>)
    2678:	6a82      	ldr	r2, [r0, #40]	; 0x28
    267a:	1c54      	adds	r4, r2, #1
    267c:	d007      	beq.n	268e <bt_rpmsg_platform_send+0x1e>
		return RPMSG_ERR_ADDR;
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
    267e:	2401      	movs	r4, #1
    2680:	e9cd 1400 	strd	r1, r4, [sp]
    2684:	6a41      	ldr	r1, [r0, #36]	; 0x24
    2686:	f00a fec7 	bl	d418 <rpmsg_send_offchannel_raw>
}
    268a:	b002      	add	sp, #8
    268c:	bd10      	pop	{r4, pc}
		return RPMSG_ERR_ADDR;
    268e:	4802      	ldr	r0, [pc, #8]	; (2698 <bt_rpmsg_platform_send+0x28>)
	return rpmsg_send(&ep, buf->data, buf->len);
    2690:	e7fb      	b.n	268a <bt_rpmsg_platform_send+0x1a>
    2692:	bf00      	nop
    2694:	20000acc 	.word	0x20000acc
    2698:	fffff829 	.word	0xfffff829

0000269c <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
    269c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
    269e:	4c06      	ldr	r4, [pc, #24]	; (26b8 <z_clock_isr+0x1c>)
    26a0:	4906      	ldr	r1, [pc, #24]	; (26bc <z_clock_isr+0x20>)
    26a2:	4622      	mov	r2, r4
    26a4:	4806      	ldr	r0, [pc, #24]	; (26c0 <z_clock_isr+0x24>)
    26a6:	2317      	movs	r3, #23
    26a8:	f00e fb98 	bl	10ddc <printk>
    26ac:	4620      	mov	r0, r4
}
    26ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
    26b2:	2117      	movs	r1, #23
    26b4:	f00e be28 	b.w	11308 <assert_post_action>
    26b8:	000168e2 	.word	0x000168e2
    26bc:	00019ede 	.word	0x00019ede
    26c0:	00016493 	.word	0x00016493

000026c4 <handle_next_tick_case>:
 * counter progresses during that time it means that 1 tick elapsed and
 * interrupt is set pending.
 */
static void handle_next_tick_case(u32_t t)
{
	set_comparator(t + 2);
    26c4:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    26c6:	4b08      	ldr	r3, [pc, #32]	; (26e8 <handle_next_tick_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    26c8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    26cc:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    26d0:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
    26d4:	4290      	cmp	r0, r2
    26d6:	d100      	bne.n	26da <handle_next_tick_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
    26d8:	4770      	bx	lr
    26da:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
    26de:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    26e0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    26e4:	e7f2      	b.n	26cc <handle_next_tick_case+0x8>
    26e6:	bf00      	nop
    26e8:	50015000 	.word	0x50015000

000026ec <rtc1_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    26ec:	2200      	movs	r2, #0
    26ee:	4b06      	ldr	r3, [pc, #24]	; (2708 <rtc1_nrf_isr+0x1c>)
    26f0:	601a      	str	r2, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	u32_t t = get_comparator();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    26f2:	4a06      	ldr	r2, [pc, #24]	; (270c <rtc1_nrf_isr+0x20>)
    return p_reg->CC[ch];
    26f4:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
    26f8:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    26fa:	1ac0      	subs	r0, r0, r3
    26fc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    2700:	4403      	add	r3, r0
    2702:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_ticks(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    2704:	f00d be1c 	b.w	10340 <z_clock_announce>
    2708:	50015140 	.word	0x50015140
    270c:	20000be8 	.word	0x20000be8

00002710 <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
    2710:	b538      	push	{r3, r4, r5, lr}
    2712:	4814      	ldr	r0, [pc, #80]	; (2764 <z_clock_driver_init+0x54>)
    2714:	f00b f8bc 	bl	d890 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_LABEL(DT_INST(0, nordic_nrf_clock)));
	if (!clock) {
    2718:	b300      	cbz	r0, 275c <z_clock_driver_init+0x4c>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    271a:	6883      	ldr	r3, [r0, #8]
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    271c:	2400      	movs	r4, #0
    271e:	2101      	movs	r1, #1
    2720:	681b      	ldr	r3, [r3, #0]
    2722:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2724:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2728:	4d0f      	ldr	r5, [pc, #60]	; (2768 <z_clock_driver_init+0x58>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    272a:	4b10      	ldr	r3, [pc, #64]	; (276c <z_clock_driver_init+0x5c>)
    p_reg->PRESCALER = val;
    272c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2730:	601c      	str	r4, [r3, #0]
    2732:	4b0f      	ldr	r3, [pc, #60]	; (2770 <z_clock_driver_init+0x60>)
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC1_IRQn);
	int_enable();

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    2734:	2101      	movs	r1, #1
    2736:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
    273a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    273e:	4622      	mov	r2, r4
    2740:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    2744:	2015      	movs	r0, #21
    2746:	f000 fb45 	bl	2dd4 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
    274a:	2015      	movs	r0, #21
    274c:	f000 fb32 	bl	2db4 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    2750:	2301      	movs	r3, #1

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
    2752:	4620      	mov	r0, r4
    2754:	4a07      	ldr	r2, [pc, #28]	; (2774 <z_clock_driver_init+0x64>)
    2756:	6013      	str	r3, [r2, #0]
    2758:	602b      	str	r3, [r5, #0]
}
    275a:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    275c:	f04f 30ff 	mov.w	r0, #4294967295
    2760:	e7fb      	b.n	275a <z_clock_driver_init+0x4a>
    2762:	bf00      	nop
    2764:	000165be 	.word	0x000165be
    2768:	50015000 	.word	0x50015000
    276c:	50015140 	.word	0x50015140
    2770:	e000e100 	.word	0xe000e100
    2774:	50015008 	.word	0x50015008

00002778 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    2778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     return p_reg->COUNTER;
    277a:	4b2c      	ldr	r3, [pc, #176]	; (282c <z_clock_set_timeout+0xb4>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    277c:	4c2c      	ldr	r4, [pc, #176]	; (2830 <z_clock_set_timeout+0xb8>)
    277e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	u32_t unannounced = counter_sub(counter(), last_count);
    2782:	4b2c      	ldr	r3, [pc, #176]	; (2834 <z_clock_set_timeout+0xbc>)
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2784:	f1b0 3fff 	cmp.w	r0, #4294967295
    2788:	bf08      	it	eq
    278a:	4620      	moveq	r0, r4
	u32_t unannounced = counter_sub(counter(), last_count);
    278c:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    278e:	1a52      	subs	r2, r2, r1
    2790:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    2794:	0212      	lsls	r2, r2, #8
    2796:	d436      	bmi.n	2806 <z_clock_set_timeout+0x8e>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    2798:	3801      	subs	r0, #1
    279a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    279e:	42a0      	cmp	r0, r4
    27a0:	bfa8      	it	ge
    27a2:	4620      	movge	r0, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    27a4:	3301      	adds	r3, #1
    27a6:	4418      	add	r0, r3
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    27a8:	42a0      	cmp	r0, r4
    27aa:	bf94      	ite	ls
    27ac:	180c      	addls	r4, r1, r0
    27ae:	190c      	addhi	r4, r1, r4
    p_reg->INTENCLR = mask;
    27b0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    27b4:	2700      	movs	r7, #0
    p_reg->INTENCLR = mask;
    27b6:	4b1d      	ldr	r3, [pc, #116]	; (282c <z_clock_set_timeout+0xb4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    27b8:	4e1f      	ldr	r6, [pc, #124]	; (2838 <z_clock_set_timeout+0xc0>)
    p_reg->INTENCLR = mask;
    27ba:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
     return p_reg->COUNTER;
    27be:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    return p_reg->CC[ch];
    27c2:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    27c6:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	return (a - b) & COUNTER_MAX;
    27ca:	1a52      	subs	r2, r2, r1
    27cc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (counter_sub(prev_val, now) == 1) {
    27d0:	2a01      	cmp	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    27d2:	6037      	str	r7, [r6, #0]
    p_reg->CC[ch] = cc_val;
    27d4:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    27d8:	461d      	mov	r5, r3
    27da:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
    27de:	d103      	bne.n	27e8 <z_clock_set_timeout+0x70>
	z_impl_k_busy_wait(usec_to_wait);
    27e0:	200f      	movs	r0, #15
    27e2:	f012 fc55 	bl	15090 <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    27e6:	6037      	str	r7, [r6, #0]
    27e8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    27ec:	4b13      	ldr	r3, [pc, #76]	; (283c <z_clock_set_timeout+0xc4>)
    27ee:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
    27f2:	f8d5 0504 	ldr.w	r0, [r5, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    27f6:	1a23      	subs	r3, r4, r0
    27f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (diff == 1) {
    27fc:	2b01      	cmp	r3, #1
    27fe:	d104      	bne.n	280a <z_clock_set_timeout+0x92>
		handle_next_tick_case(t);
    2800:	f7ff ff60 	bl	26c4 <handle_next_tick_case>
    2804:	e00b      	b.n	281e <z_clock_set_timeout+0xa6>
		ticks = 0;
    2806:	2000      	movs	r0, #0
    2808:	e7cc      	b.n	27a4 <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    280a:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    280e:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
     return p_reg->COUNTER;
    2812:	f8d5 0504 	ldr.w	r0, [r5, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    2816:	1a24      	subs	r4, r4, r0
    2818:	3c02      	subs	r4, #2
	if (diff > MAX_TICKS) {
    281a:	0223      	lsls	r3, r4, #8
    281c:	d4f0      	bmi.n	2800 <z_clock_set_timeout+0x88>
    p_reg->INTENSET = mask;
    281e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2822:	4b02      	ldr	r3, [pc, #8]	; (282c <z_clock_set_timeout+0xb4>)
    2824:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	set_protected_absolute_ticks(cyc);
}
    2828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    282a:	bf00      	nop
    282c:	50015000 	.word	0x50015000
    2830:	007fffff 	.word	0x007fffff
    2834:	20000be8 	.word	0x20000be8
    2838:	50015140 	.word	0x50015140
    283c:	e000e100 	.word	0xe000e100

00002840 <z_clock_elapsed>:

u32_t z_clock_elapsed(void)
{
    2840:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    2842:	f04f 0320 	mov.w	r3, #32
    2846:	f3ef 8511 	mrs	r5, BASEPRI
    284a:	f383 8811 	msr	BASEPRI, r3
    284e:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2852:	481a      	ldr	r0, [pc, #104]	; (28bc <z_clock_elapsed+0x7c>)
    2854:	f00d fa52 	bl	fcfc <z_spin_lock_valid>
    2858:	b968      	cbnz	r0, 2876 <z_clock_elapsed+0x36>
    285a:	235c      	movs	r3, #92	; 0x5c
    285c:	4a18      	ldr	r2, [pc, #96]	; (28c0 <z_clock_elapsed+0x80>)
    285e:	4919      	ldr	r1, [pc, #100]	; (28c4 <z_clock_elapsed+0x84>)
    2860:	4819      	ldr	r0, [pc, #100]	; (28c8 <z_clock_elapsed+0x88>)
    2862:	f00e fabb 	bl	10ddc <printk>
    2866:	4915      	ldr	r1, [pc, #84]	; (28bc <z_clock_elapsed+0x7c>)
    2868:	4818      	ldr	r0, [pc, #96]	; (28cc <z_clock_elapsed+0x8c>)
    286a:	f00e fab7 	bl	10ddc <printk>
    286e:	215c      	movs	r1, #92	; 0x5c
    2870:	4813      	ldr	r0, [pc, #76]	; (28c0 <z_clock_elapsed+0x80>)
    2872:	f00e fd49 	bl	11308 <assert_post_action>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
    2876:	4811      	ldr	r0, [pc, #68]	; (28bc <z_clock_elapsed+0x7c>)
    2878:	f00d fa5c 	bl	fd34 <z_spin_lock_set_owner>
     return p_reg->COUNTER;
    287c:	4b14      	ldr	r3, [pc, #80]	; (28d0 <z_clock_elapsed+0x90>)
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    287e:	480f      	ldr	r0, [pc, #60]	; (28bc <z_clock_elapsed+0x7c>)
    2880:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    2884:	4b13      	ldr	r3, [pc, #76]	; (28d4 <z_clock_elapsed+0x94>)
	return (a - b) & COUNTER_MAX;
    2886:	681b      	ldr	r3, [r3, #0]
    2888:	1ae4      	subs	r4, r4, r3
    288a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    288e:	f00d fa43 	bl	fd18 <z_spin_unlock_valid>
    2892:	b968      	cbnz	r0, 28b0 <z_clock_elapsed+0x70>
    2894:	2384      	movs	r3, #132	; 0x84
    2896:	4a0a      	ldr	r2, [pc, #40]	; (28c0 <z_clock_elapsed+0x80>)
    2898:	490f      	ldr	r1, [pc, #60]	; (28d8 <z_clock_elapsed+0x98>)
    289a:	480b      	ldr	r0, [pc, #44]	; (28c8 <z_clock_elapsed+0x88>)
    289c:	f00e fa9e 	bl	10ddc <printk>
    28a0:	4906      	ldr	r1, [pc, #24]	; (28bc <z_clock_elapsed+0x7c>)
    28a2:	480e      	ldr	r0, [pc, #56]	; (28dc <z_clock_elapsed+0x9c>)
    28a4:	f00e fa9a 	bl	10ddc <printk>
    28a8:	2184      	movs	r1, #132	; 0x84
    28aa:	4805      	ldr	r0, [pc, #20]	; (28c0 <z_clock_elapsed+0x80>)
    28ac:	f00e fd2c 	bl	11308 <assert_post_action>
	__asm__ volatile(
    28b0:	f385 8811 	msr	BASEPRI, r5
    28b4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    28b8:	4620      	mov	r0, r4
    28ba:	bd38      	pop	{r3, r4, r5, pc}
    28bc:	20000bec 	.word	0x20000bec
    28c0:	0001691e 	.word	0x0001691e
    28c4:	00016944 	.word	0x00016944
    28c8:	00016493 	.word	0x00016493
    28cc:	00016959 	.word	0x00016959
    28d0:	50015000 	.word	0x50015000
    28d4:	20000be8 	.word	0x20000be8
    28d8:	00016971 	.word	0x00016971
    28dc:	00016988 	.word	0x00016988

000028e0 <on_receive>:
			  const struct bt_gatt_attr *attr,
			  const void *buf,
			  u16_t len,
			  u16_t offset,
			  u8_t flags)
{
    28e0:	b510      	push	{r4, lr}
    28e2:	461c      	mov	r4, r3
	LOG_DBG("Received data, handle %d, conn %p",
		attr->handle, conn);

	if (nus_cb.received_cb) {
    28e4:	4b03      	ldr	r3, [pc, #12]	; (28f4 <on_receive+0x14>)
{
    28e6:	4611      	mov	r1, r2
	if (nus_cb.received_cb) {
    28e8:	681b      	ldr	r3, [r3, #0]
    28ea:	b10b      	cbz	r3, 28f0 <on_receive+0x10>
		nus_cb.received_cb(conn, buf, len);
    28ec:	4622      	mov	r2, r4
    28ee:	4798      	blx	r3
}
	return len;
}
    28f0:	4620      	mov	r0, r4
    28f2:	bd10      	pop	{r4, pc}
    28f4:	20000c08 	.word	0x20000c08

000028f8 <on_sent>:
{
	ARG_UNUSED(user_data);

	LOG_DBG("Data send, conn %p", conn);

	if (nus_cb.sent_cb) {
    28f8:	4b02      	ldr	r3, [pc, #8]	; (2904 <on_sent+0xc>)
    28fa:	685b      	ldr	r3, [r3, #4]
    28fc:	b103      	cbz	r3, 2900 <on_sent+0x8>
		nus_cb.sent_cb(conn);
    28fe:	4718      	bx	r3
	}
}
    2900:	4770      	bx	lr
    2902:	bf00      	nop
    2904:	20000c08 	.word	0x20000c08

00002908 <bt_gatt_nus_init>:
			       NULL, on_receive, NULL),
);

int bt_gatt_nus_init(struct bt_gatt_nus_cb *callbacks)
{
	if (callbacks) {
    2908:	b120      	cbz	r0, 2914 <bt_gatt_nus_init+0xc>
		nus_cb.received_cb = callbacks->received_cb;
    290a:	4b03      	ldr	r3, [pc, #12]	; (2918 <bt_gatt_nus_init+0x10>)
    290c:	6802      	ldr	r2, [r0, #0]
    290e:	601a      	str	r2, [r3, #0]
		nus_cb.sent_cb     = callbacks->sent_cb;
    2910:	6842      	ldr	r2, [r0, #4]
    2912:	605a      	str	r2, [r3, #4]
	}

	return 0;
}
    2914:	2000      	movs	r0, #0
    2916:	4770      	bx	lr
    2918:	20000c08 	.word	0x20000c08

0000291c <bt_gatt_nus_send>:

int bt_gatt_nus_send(struct bt_conn *conn, const u8_t *data, uint16_t len)
{
    291c:	b570      	push	{r4, r5, r6, lr}
    291e:	460e      	mov	r6, r1
    2920:	4615      	mov	r5, r2
    2922:	4604      	mov	r4, r0
    2924:	b086      	sub	sp, #24
	struct bt_gatt_notify_params params = {0};
    2926:	2100      	movs	r1, #0
    2928:	2218      	movs	r2, #24
    292a:	4668      	mov	r0, sp
    292c:	f00f fc42 	bl	121b4 <memset>
	const struct bt_gatt_attr *attr = &nus_svc.attrs[2];

	params.attr = attr;
    2930:	490b      	ldr	r1, [pc, #44]	; (2960 <bt_gatt_nus_send+0x44>)
	params.data = data;
	params.len = len;
	params.func = on_sent;
    2932:	4b0c      	ldr	r3, [pc, #48]	; (2964 <bt_gatt_nus_send+0x48>)
	params.data = data;
    2934:	e9cd 1601 	strd	r1, r6, [sp, #4]
	params.len = len;
    2938:	f8ad 500c 	strh.w	r5, [sp, #12]
	params.func = on_sent;
    293c:	9304      	str	r3, [sp, #16]

	if (!conn) {
    293e:	b92c      	cbnz	r4, 294c <bt_gatt_nus_send+0x30>
		LOG_DBG("Notification send to all connected peers");
		return bt_gatt_notify_cb(NULL, &params);
	} else if (bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
		return bt_gatt_notify_cb(conn, &params);
    2940:	4669      	mov	r1, sp
    2942:	4620      	mov	r0, r4
    2944:	f006 fe7e 	bl	9644 <bt_gatt_notify_cb>
	} else {
		return -EINVAL;
	}
}
    2948:	b006      	add	sp, #24
    294a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
    294c:	2201      	movs	r2, #1
    294e:	4620      	mov	r0, r4
    2950:	f007 f88a 	bl	9a68 <bt_gatt_is_subscribed>
    2954:	2800      	cmp	r0, #0
    2956:	d1f3      	bne.n	2940 <bt_gatt_nus_send+0x24>
		return -EINVAL;
    2958:	f06f 0015 	mvn.w	r0, #21
    295c:	e7f4      	b.n	2948 <bt_gatt_nus_send+0x2c>
    295e:	bf00      	nop
    2960:	000157f8 	.word	0x000157f8
    2964:	000028f9 	.word	0x000028f9

00002968 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    2968:	b5f0      	push	{r4, r5, r6, r7, lr}
    296a:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
    296c:	4e26      	ldr	r6, [pc, #152]	; (2a08 <tc_aes128_set_encrypt_key+0xa0>)
{
    296e:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    2970:	ad01      	add	r5, sp, #4
{
    2972:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    2974:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    2976:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2978:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    297a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    297c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    2980:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
    2984:	4638      	mov	r0, r7
    2986:	2f00      	cmp	r7, #0
    2988:	d039      	beq.n	29fe <tc_aes128_set_encrypt_key+0x96>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    298a:	2c00      	cmp	r4, #0
    298c:	d039      	beq.n	2a02 <tc_aes128_set_encrypt_key+0x9a>
    298e:	1f38      	subs	r0, r7, #4
    2990:	4602      	mov	r2, r0
    2992:	4621      	mov	r1, r4
    2994:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    2996:	784b      	ldrb	r3, [r1, #1]
    2998:	780d      	ldrb	r5, [r1, #0]
    299a:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    299c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    29a0:	78cd      	ldrb	r5, [r1, #3]
    29a2:	3104      	adds	r1, #4
    29a4:	432b      	orrs	r3, r5
    29a6:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
    29aa:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    29ac:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    29b0:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    29b4:	d1ef      	bne.n	2996 <tc_aes128_set_encrypt_key+0x2e>
    29b6:	2104      	movs	r1, #4
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
    29b8:	4c14      	ldr	r4, [pc, #80]	; (2a0c <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
    29ba:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    29bc:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    29be:	d116      	bne.n	29ee <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    29c0:	f3c3 4207 	ubfx	r2, r3, #16, #8
    29c4:	5ca5      	ldrb	r5, [r4, r2]
    29c6:	0e1a      	lsrs	r2, r3, #24
    29c8:	5ca2      	ldrb	r2, [r4, r2]
    29ca:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    29ce:	f3c3 2507 	ubfx	r5, r3, #8, #8
    29d2:	5d65      	ldrb	r5, [r4, r5]
    29d4:	b2db      	uxtb	r3, r3
    29d6:	5ce3      	ldrb	r3, [r4, r3]
    29d8:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    29dc:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    29e0:	ad0c      	add	r5, sp, #48	; 0x30
    29e2:	f021 0303 	bic.w	r3, r1, #3
    29e6:	442b      	add	r3, r5
    29e8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    29ec:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
    29ee:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    29f2:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    29f4:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    29f6:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    29f8:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    29fa:	d1de      	bne.n	29ba <tc_aes128_set_encrypt_key+0x52>
	}

	return TC_CRYPTO_SUCCESS;
    29fc:	2001      	movs	r0, #1
}
    29fe:	b00d      	add	sp, #52	; 0x34
    2a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    2a02:	4620      	mov	r0, r4
    2a04:	e7fb      	b.n	29fe <tc_aes128_set_encrypt_key+0x96>
    2a06:	bf00      	nop
    2a08:	000156b4 	.word	0x000156b4
    2a0c:	000169a9 	.word	0x000169a9

00002a10 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    2a10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2a14:	4615      	mov	r5, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    2a16:	4606      	mov	r6, r0
{
    2a18:	b089      	sub	sp, #36	; 0x24
	if (out == (uint8_t *) 0) {
    2a1a:	2800      	cmp	r0, #0
    2a1c:	d058      	beq.n	2ad0 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    2a1e:	2900      	cmp	r1, #0
    2a20:	d059      	beq.n	2ad6 <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    2a22:	2a00      	cmp	r2, #0
    2a24:	d059      	beq.n	2ada <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    2a26:	2310      	movs	r3, #16
    2a28:	460a      	mov	r2, r1
    2a2a:	4668      	mov	r0, sp
    2a2c:	4619      	mov	r1, r3
		s[i] = sbox[s[i]];
    2a2e:	4c2c      	ldr	r4, [pc, #176]	; (2ae0 <tc_aes_encrypt+0xd0>)
	(void)_copy(state, sizeof(state), in, sizeof(state));
    2a30:	f00e febe 	bl	117b0 <_copy>
	add_round_key(state, s->words);
    2a34:	4629      	mov	r1, r5
    2a36:	4668      	mov	r0, sp
    2a38:	f00e fed2 	bl	117e0 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
    2a3c:	46a1      	mov	r9, r4
    2a3e:	f105 0710 	add.w	r7, r5, #16
    2a42:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
    2a44:	46e8      	mov	r8, sp
{
    2a46:	466a      	mov	r2, sp
    2a48:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
    2a4a:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    2a4c:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
    2a4e:	5c61      	ldrb	r1, [r4, r1]
    2a50:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    2a54:	d1f9      	bne.n	2a4a <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
    2a56:	4668      	mov	r0, sp
    2a58:	f00e ff07 	bl	1186a <shift_rows>
	mult_row_column(t, s);
    2a5c:	4669      	mov	r1, sp
    2a5e:	a804      	add	r0, sp, #16
    2a60:	f00e ff3c 	bl	118dc <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    2a64:	a901      	add	r1, sp, #4
    2a66:	a805      	add	r0, sp, #20
    2a68:	f00e ff38 	bl	118dc <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
    2a6c:	a902      	add	r1, sp, #8
    2a6e:	a806      	add	r0, sp, #24
    2a70:	f00e ff34 	bl	118dc <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
    2a74:	a903      	add	r1, sp, #12
    2a76:	a807      	add	r0, sp, #28
    2a78:	f00e ff30 	bl	118dc <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    2a7c:	2310      	movs	r3, #16
    2a7e:	4668      	mov	r0, sp
    2a80:	4619      	mov	r1, r3
    2a82:	eb0d 0203 	add.w	r2, sp, r3
    2a86:	f00e fe93 	bl	117b0 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    2a8a:	4639      	mov	r1, r7
    2a8c:	4668      	mov	r0, sp
    2a8e:	3710      	adds	r7, #16
    2a90:	f00e fea6 	bl	117e0 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
    2a94:	42af      	cmp	r7, r5
    2a96:	d1d5      	bne.n	2a44 <tc_aes_encrypt+0x34>
    2a98:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
    2a9a:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
    2a9e:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
    2aa0:	f819 3003 	ldrb.w	r3, [r9, r3]
    2aa4:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    2aa8:	d1f7      	bne.n	2a9a <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
    2aaa:	4668      	mov	r0, sp
    2aac:	f00e fedd 	bl	1186a <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    2ab0:	4629      	mov	r1, r5
    2ab2:	4668      	mov	r0, sp
    2ab4:	f00e fe94 	bl	117e0 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    2ab8:	2310      	movs	r3, #16
    2aba:	466a      	mov	r2, sp
    2abc:	4619      	mov	r1, r3
    2abe:	4630      	mov	r0, r6
    2ac0:	f00e fe76 	bl	117b0 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    2ac4:	4668      	mov	r0, sp
    2ac6:	2210      	movs	r2, #16
    2ac8:	4621      	mov	r1, r4
    2aca:	f00e fe7e 	bl	117ca <_set>

	return TC_CRYPTO_SUCCESS;
    2ace:	2001      	movs	r0, #1
}
    2ad0:	b009      	add	sp, #36	; 0x24
    2ad2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
    2ad6:	4608      	mov	r0, r1
    2ad8:	e7fa      	b.n	2ad0 <tc_aes_encrypt+0xc0>
    2ada:	4610      	mov	r0, r2
    2adc:	e7f8      	b.n	2ad0 <tc_aes_encrypt+0xc0>
    2ade:	bf00      	nop
    2ae0:	000169a9 	.word	0x000169a9

00002ae4 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
    2ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    2ae8:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    2aea:	6803      	ldr	r3, [r0, #0]
{
    2aec:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    2aee:	9303      	str	r3, [sp, #12]
    2af0:	6843      	ldr	r3, [r0, #4]
    2af2:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 2cac <compress+0x1c8>
    2af6:	9304      	str	r3, [sp, #16]
    2af8:	6883      	ldr	r3, [r0, #8]
    2afa:	9c03      	ldr	r4, [sp, #12]
    2afc:	9305      	str	r3, [sp, #20]
    2afe:	68c3      	ldr	r3, [r0, #12]
{
    2b00:	9102      	str	r1, [sp, #8]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    2b02:	9306      	str	r3, [sp, #24]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    2b04:	6903      	ldr	r3, [r0, #16]
    2b06:	9307      	str	r3, [sp, #28]
    2b08:	6943      	ldr	r3, [r0, #20]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    2b0a:	e9dd e206 	ldrd	lr, r2, [sp, #24]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    2b0e:	9308      	str	r3, [sp, #32]
    2b10:	6983      	ldr	r3, [r0, #24]
    2b12:	9309      	str	r3, [sp, #36]	; 0x24
    2b14:	69c3      	ldr	r3, [r0, #28]
    2b16:	e9dd cb08 	ldrd	ip, fp, [sp, #32]
    2b1a:	4698      	mov	r8, r3
    2b1c:	930a      	str	r3, [sp, #40]	; 0x28
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    2b1e:	9b05      	ldr	r3, [sp, #20]
    2b20:	9301      	str	r3, [sp, #4]
    2b22:	9b04      	ldr	r3, [sp, #16]
    2b24:	9300      	str	r3, [sp, #0]
	n = (((unsigned int)(*((*c)++))) << 24);
    2b26:	9b02      	ldr	r3, [sp, #8]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
		t1 = work_space[i] = n;
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
		t2 = Sigma0(a) + Maj(a, b, c);
    2b28:	9e01      	ldr	r6, [sp, #4]
    2b2a:	59dd      	ldr	r5, [r3, r7]
		t1 = work_space[i] = n;
    2b2c:	ab0c      	add	r3, sp, #48	; 0x30
    2b2e:	ba2d      	rev	r5, r5
    2b30:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
    2b32:	f85a 3b04 	ldr.w	r3, [sl], #4
    2b36:	3704      	adds	r7, #4
    2b38:	eb05 0903 	add.w	r9, r5, r3
    2b3c:	ea4f 25f2 	mov.w	r5, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    2b40:	ea85 15b2 	eor.w	r5, r5, r2, ror #6
    2b44:	ea85 6572 	eor.w	r5, r5, r2, ror #25
    2b48:	444d      	add	r5, r9
    2b4a:	ea2b 0302 	bic.w	r3, fp, r2
    2b4e:	ea02 090c 	and.w	r9, r2, ip
    2b52:	ea83 0309 	eor.w	r3, r3, r9
    2b56:	442b      	add	r3, r5
    2b58:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
    2b5a:	e9dd 1500 	ldrd	r1, r5, [sp]
	return (((a) >> n) | ((a) << (32 - n)));
    2b5e:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    2b62:	404d      	eors	r5, r1
    2b64:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
    2b68:	4025      	ands	r5, r4
    2b6a:	ea01 0906 	and.w	r9, r1, r6
    2b6e:	ea85 0509 	eor.w	r5, r5, r9
    2b72:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
    2b76:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
    2b78:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
    2b7a:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
    2b7e:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
    2b80:	46b6      	mov	lr, r6
    2b82:	46d8      	mov	r8, fp
    2b84:	f040 8081 	bne.w	2c8a <compress+0x1a6>
    2b88:	f04f 0a10 	mov.w	sl, #16
    2b8c:	4946      	ldr	r1, [pc, #280]	; (2ca8 <compress+0x1c4>)
    2b8e:	910b      	str	r1, [sp, #44]	; 0x2c
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
    2b90:	4651      	mov	r1, sl
    2b92:	f10a 0a01 	add.w	sl, sl, #1
    2b96:	ae1c      	add	r6, sp, #112	; 0x70
    2b98:	f00a 070f 	and.w	r7, sl, #15
    2b9c:	eb06 0787 	add.w	r7, r6, r7, lsl #2
    2ba0:	f857 6c40 	ldr.w	r6, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    2ba4:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
    2ba8:	ea4f 48b6 	mov.w	r8, r6, ror #18
		s1 = work_space[(i+14)&0x0f];
    2bac:	f101 070e 	add.w	r7, r1, #14
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    2bb0:	3109      	adds	r1, #9
		s0 = work_space[(i+1)&0x0f];
    2bb2:	9602      	str	r6, [sp, #8]
		s0 = sigma0(s0);
    2bb4:	ea88 18f6 	eor.w	r8, r8, r6, ror #7
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    2bb8:	f001 010f 	and.w	r1, r1, #15
		s1 = work_space[(i+14)&0x0f];
    2bbc:	ae1c      	add	r6, sp, #112	; 0x70
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    2bbe:	eb06 0989 	add.w	r9, r6, r9, lsl #2
    2bc2:	eb06 0181 	add.w	r1, r6, r1, lsl #2
		s1 = work_space[(i+14)&0x0f];
    2bc6:	f007 070f 	and.w	r7, r7, #15
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    2bca:	f851 1c40 	ldr.w	r1, [r1, #-64]
		s1 = work_space[(i+14)&0x0f];
    2bce:	eb06 0787 	add.w	r7, r6, r7, lsl #2
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    2bd2:	f859 6c40 	ldr.w	r6, [r9, #-64]
		s1 = work_space[(i+14)&0x0f];
    2bd6:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    2bda:	4431      	add	r1, r6
		s0 = sigma0(s0);
    2bdc:	9e02      	ldr	r6, [sp, #8]
	return (((a) >> n) | ((a) << (32 - n)));
    2bde:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s0 = sigma0(s0);
    2be2:	ea88 08d6 	eor.w	r8, r8, r6, lsr #3
		s1 = sigma1(s1);
    2be6:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
    2bea:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    2bee:	4441      	add	r1, r8
    2bf0:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    2bf2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    2bf4:	f849 1c40 	str.w	r1, [r9, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
    2bf8:	ea4f 29f5 	mov.w	r9, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    2bfc:	ea05 0802 	and.w	r8, r5, r2
    2c00:	ea89 19b5 	eor.w	r9, r9, r5, ror #6
    2c04:	ea2c 0705 	bic.w	r7, ip, r5
    2c08:	f856 eb04 	ldr.w	lr, [r6], #4
    2c0c:	ea87 0708 	eor.w	r7, r7, r8
    2c10:	ea89 6975 	eor.w	r9, r9, r5, ror #25
    2c14:	444f      	add	r7, r9
    2c16:	4477      	add	r7, lr
    2c18:	960b      	str	r6, [sp, #44]	; 0x2c
		t2 = Sigma0(a) + Maj(a, b, c);
    2c1a:	9e00      	ldr	r6, [sp, #0]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    2c1c:	4439      	add	r1, r7
    2c1e:	4459      	add	r1, fp
		t2 = Sigma0(a) + Maj(a, b, c);
    2c20:	ea04 0e06 	and.w	lr, r4, r6
    2c24:	ea84 0b06 	eor.w	fp, r4, r6
		h = g; g = f; f = e; e = d + t1;
    2c28:	9e01      	ldr	r6, [sp, #4]
	return (((a) >> n) | ((a) << (32 - n)));
    2c2a:	ea4f 3773 	mov.w	r7, r3, ror #13
		h = g; g = f; f = e; e = d + t1;
    2c2e:	440e      	add	r6, r1
		t2 = Sigma0(a) + Maj(a, b, c);
    2c30:	ea87 07b3 	eor.w	r7, r7, r3, ror #2
    2c34:	ea0b 0b03 	and.w	fp, fp, r3
    2c38:	ea8b 0b0e 	eor.w	fp, fp, lr
		h = g; g = f; f = e; e = d + t1;
    2c3c:	46b0      	mov	r8, r6
		t2 = Sigma0(a) + Maj(a, b, c);
    2c3e:	ea87 57b3 	eor.w	r7, r7, r3, ror #22
    2c42:	9e00      	ldr	r6, [sp, #0]
    2c44:	445f      	add	r7, fp
	for ( ; i < 64; ++i) {
    2c46:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
    2c4a:	46e3      	mov	fp, ip
		d = c; c = b; b = a; a = t1 + t2;
    2c4c:	4439      	add	r1, r7
	for ( ; i < 64; ++i) {
    2c4e:	9601      	str	r6, [sp, #4]
    2c50:	d123      	bne.n	2c9a <compress+0x1b6>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
    2c52:	9e03      	ldr	r6, [sp, #12]
    2c54:	440e      	add	r6, r1
    2c56:	9904      	ldr	r1, [sp, #16]
    2c58:	6006      	str	r6, [r0, #0]
    2c5a:	4419      	add	r1, r3
    2c5c:	9b05      	ldr	r3, [sp, #20]
    2c5e:	6041      	str	r1, [r0, #4]
    2c60:	4423      	add	r3, r4
    2c62:	9900      	ldr	r1, [sp, #0]
    2c64:	6083      	str	r3, [r0, #8]
    2c66:	9b06      	ldr	r3, [sp, #24]
    2c68:	440b      	add	r3, r1
    2c6a:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
    2c6c:	9b07      	ldr	r3, [sp, #28]
    2c6e:	4443      	add	r3, r8
    2c70:	6103      	str	r3, [r0, #16]
    2c72:	9b08      	ldr	r3, [sp, #32]
    2c74:	442b      	add	r3, r5
    2c76:	6143      	str	r3, [r0, #20]
    2c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2c7a:	4413      	add	r3, r2
    2c7c:	6183      	str	r3, [r0, #24]
    2c7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2c80:	4463      	add	r3, ip
    2c82:	61c3      	str	r3, [r0, #28]
}
    2c84:	b01d      	add	sp, #116	; 0x74
    2c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2c8a:	9900      	ldr	r1, [sp, #0]
    2c8c:	46e3      	mov	fp, ip
    2c8e:	e9cd 4100 	strd	r4, r1, [sp]
    2c92:	4694      	mov	ip, r2
		d = c; c = b; b = a; a = t1 + t2;
    2c94:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    2c96:	462a      	mov	r2, r5
    2c98:	e745      	b.n	2b26 <compress+0x42>
    2c9a:	4694      	mov	ip, r2
    2c9c:	9400      	str	r4, [sp, #0]
    2c9e:	462a      	mov	r2, r5
    2ca0:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    2ca2:	4645      	mov	r5, r8
		d = c; c = b; b = a; a = t1 + t2;
    2ca4:	460b      	mov	r3, r1
    2ca6:	e773      	b.n	2b90 <compress+0xac>
    2ca8:	00015888 	.word	0x00015888
    2cac:	00015848 	.word	0x00015848

00002cb0 <tc_sha256_init>:
{
    2cb0:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
    2cb2:	4604      	mov	r4, r0
    2cb4:	b1c8      	cbz	r0, 2cea <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
    2cb6:	2270      	movs	r2, #112	; 0x70
    2cb8:	2100      	movs	r1, #0
    2cba:	f00e fd86 	bl	117ca <_set>
	s->iv[1] = 0xbb67ae85;
    2cbe:	4b0b      	ldr	r3, [pc, #44]	; (2cec <tc_sha256_init+0x3c>)
    2cc0:	4a0b      	ldr	r2, [pc, #44]	; (2cf0 <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
    2cc2:	490c      	ldr	r1, [pc, #48]	; (2cf4 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
    2cc4:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
    2cc8:	4b0b      	ldr	r3, [pc, #44]	; (2cf8 <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
    2cca:	480c      	ldr	r0, [pc, #48]	; (2cfc <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
    2ccc:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
    2cd0:	4b0b      	ldr	r3, [pc, #44]	; (2d00 <tc_sha256_init+0x50>)
    2cd2:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
    2cd6:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
    2cd8:	4b0a      	ldr	r3, [pc, #40]	; (2d04 <tc_sha256_init+0x54>)
    2cda:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
    2cdc:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    2ce0:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    2ce4:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
    2ce8:	61e3      	str	r3, [r4, #28]
}
    2cea:	bd10      	pop	{r4, pc}
    2cec:	bb67ae85 	.word	0xbb67ae85
    2cf0:	6a09e667 	.word	0x6a09e667
    2cf4:	3c6ef372 	.word	0x3c6ef372
    2cf8:	a54ff53a 	.word	0xa54ff53a
    2cfc:	510e527f 	.word	0x510e527f
    2d00:	9b05688c 	.word	0x9b05688c
    2d04:	1f83d9ab 	.word	0x1f83d9ab

00002d08 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    2d08:	4a09      	ldr	r2, [pc, #36]	; (2d30 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2d0a:	490a      	ldr	r1, [pc, #40]	; (2d34 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    2d0c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    2d0e:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    2d10:	66d8      	str	r0, [r3, #108]	; 0x6c
	_current->arch.swap_return_value = _k_neg_eagain;
    2d12:	6719      	str	r1, [r3, #112]	; 0x70

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2d14:	4908      	ldr	r1, [pc, #32]	; (2d38 <arch_swap+0x30>)
    2d16:	684b      	ldr	r3, [r1, #4]
    2d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2d1c:	604b      	str	r3, [r1, #4]
    2d1e:	2300      	movs	r3, #0
    2d20:	f383 8811 	msr	BASEPRI, r3
    2d24:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2d28:	6893      	ldr	r3, [r2, #8]
}
    2d2a:	6f18      	ldr	r0, [r3, #112]	; 0x70
    2d2c:	4770      	bx	lr
    2d2e:	bf00      	nop
    2d30:	20001e10 	.word	0x20001e10
    2d34:	00015f7c 	.word	0x00015f7c
    2d38:	e000ed00 	.word	0xe000ed00

00002d3c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2d3c:	4913      	ldr	r1, [pc, #76]	; (2d8c <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    2d3e:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2d40:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    2d44:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2d46:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2d4a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2d4e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2d50:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2d54:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2d58:	4f0d      	ldr	r7, [pc, #52]	; (2d90 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2d5a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2d5e:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    2d60:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2d62:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2d64:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
    movs r3, #0
    2d66:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2d68:	66d3      	str	r3, [r2, #108]	; 0x6c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2d6a:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2d6e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    2d72:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2d76:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    2d7a:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    2d7e:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    2d80:	f00f f910 	bl	11fa4 <configure_builtin_stack_guard>
    pop {r2, lr}
    2d84:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    2d88:	4770      	bx	lr
    2d8a:	0000      	.short	0x0000
    ldr r1, =_kernel
    2d8c:	20001e10 	.word	0x20001e10
    ldr v4, =_SCS_ICSR
    2d90:	e000ed04 	.word	0xe000ed04

00002d94 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    2d94:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2d98:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2d9a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2d9e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2da2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2da4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2da8:	2902      	cmp	r1, #2
    beq _oops
    2daa:	d0ff      	beq.n	2dac <_oops>

00002dac <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2dac:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    2dae:	f00f f8fd 	bl	11fac <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    2db2:	bd01      	pop	{r0, pc}

00002db4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2db4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    2db6:	2b00      	cmp	r3, #0
    2db8:	db08      	blt.n	2dcc <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2dba:	2201      	movs	r2, #1
    2dbc:	f000 001f 	and.w	r0, r0, #31
    2dc0:	fa02 f000 	lsl.w	r0, r2, r0
    2dc4:	4a02      	ldr	r2, [pc, #8]	; (2dd0 <arch_irq_enable+0x1c>)
    2dc6:	095b      	lsrs	r3, r3, #5
    2dc8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    2dcc:	4770      	bx	lr
    2dce:	bf00      	nop
    2dd0:	e000e100 	.word	0xe000e100

00002dd4 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, u32_t flags)
{
    2dd4:	b570      	push	{r4, r5, r6, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
    2dd6:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    2dd8:	2c07      	cmp	r4, #7
{
    2dda:	4605      	mov	r5, r0
    2ddc:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    2dde:	d90e      	bls.n	2dfe <z_arm_irq_priority_set+0x2a>
    2de0:	235b      	movs	r3, #91	; 0x5b
    2de2:	4a10      	ldr	r2, [pc, #64]	; (2e24 <z_arm_irq_priority_set+0x50>)
    2de4:	4910      	ldr	r1, [pc, #64]	; (2e28 <z_arm_irq_priority_set+0x54>)
    2de6:	4811      	ldr	r0, [pc, #68]	; (2e2c <z_arm_irq_priority_set+0x58>)
    2de8:	f00d fff8 	bl	10ddc <printk>
    2dec:	4631      	mov	r1, r6
    2dee:	4810      	ldr	r0, [pc, #64]	; (2e30 <z_arm_irq_priority_set+0x5c>)
    2df0:	2207      	movs	r2, #7
    2df2:	f00d fff3 	bl	10ddc <printk>
    2df6:	215b      	movs	r1, #91	; 0x5b
    2df8:	480a      	ldr	r0, [pc, #40]	; (2e24 <z_arm_irq_priority_set+0x50>)
    2dfa:	f00e fa85 	bl	11308 <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2dfe:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2e00:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2e02:	bfac      	ite	ge
    2e04:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2e08:	4b0a      	ldrlt	r3, [pc, #40]	; (2e34 <z_arm_irq_priority_set+0x60>)
    2e0a:	ea4f 1444 	mov.w	r4, r4, lsl #5
    2e0e:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2e10:	bfab      	itete	ge
    2e12:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2e16:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2e1a:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2e1e:	555c      	strblt	r4, [r3, r5]
}
    2e20:	bd70      	pop	{r4, r5, r6, pc}
    2e22:	bf00      	nop
    2e24:	00016aa9 	.word	0x00016aa9
    2e28:	00016adf 	.word	0x00016adf
    2e2c:	00016493 	.word	0x00016493
    2e30:	00016afa 	.word	0x00016afa
    2e34:	e000ed14 	.word	0xe000ed14

00002e38 <arch_new_thread>:
#ifdef CONFIG_INIT_STACKS
	memset(stack, 0xaa, stack_size);
#endif
#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)stack;
	thread->stack_info.size = stack_size;
    2e38:	e9c0 1218 	strd	r1, r2, [r0, #96]	; 0x60
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
    2e3c:	440a      	add	r2, r1
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(Z_STACK_PTR_ALIGN(stackEnd -
    2e3e:	3a20      	subs	r2, #32
    2e40:	f022 0207 	bic.w	r2, r2, #7
#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
    2e44:	6013      	str	r3, [r2, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
    2e46:	9b00      	ldr	r3, [sp, #0]
	pInitCtx->basic.pc &= 0xfffffffe;
    2e48:	4907      	ldr	r1, [pc, #28]	; (2e68 <arch_new_thread+0x30>)
	pInitCtx->basic.a2 = (u32_t)parameter1;
    2e4a:	6053      	str	r3, [r2, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    2e4c:	9b01      	ldr	r3, [sp, #4]
	pInitCtx->basic.pc &= 0xfffffffe;
    2e4e:	f021 0101 	bic.w	r1, r1, #1
	pInitCtx->basic.a3 = (u32_t)parameter2;
    2e52:	6093      	str	r3, [r2, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    2e54:	9b02      	ldr	r3, [sp, #8]
	pInitCtx->basic.pc &= 0xfffffffe;
    2e56:	6191      	str	r1, [r2, #24]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    2e58:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	pInitCtx->basic.xpsr =
    2e5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2e5e:	61d3      	str	r3, [r2, #28]
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (u32_t)pInitCtx;

	thread->arch.basepri = 0;
    2e60:	2300      	movs	r3, #0
	thread->callee_saved.psp = (u32_t)pInitCtx;
    2e62:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    2e64:	66c3      	str	r3, [r0, #108]	; 0x6c

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    2e66:	4770      	bx	lr
    2e68:	00010e11 	.word	0x00010e11

00002e6c <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
    2e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e6e:	460d      	mov	r5, r1
    2e70:	4614      	mov	r4, r2
    2e72:	4607      	mov	r7, r0
    2e74:	461e      	mov	r6, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    2e76:	f000 fb1d 	bl	34b4 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);

	_current = main_thread;
    2e7a:	4b0a      	ldr	r3, [pc, #40]	; (2ea4 <arch_switch_to_main_thread+0x38>)
	start_of_main_stack =
    2e7c:	442c      	add	r4, r5
	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);
    2e7e:	f024 0407 	bic.w	r4, r4, #7
	_current = main_thread;
    2e82:	609f      	str	r7, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    2e84:	f385 880b 	msr	PSPLIM, r5

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    2e88:	4630      	mov	r0, r6
    2e8a:	f384 8809 	msr	PSP, r4
    2e8e:	2100      	movs	r1, #0
    2e90:	b663      	cpsie	if
    2e92:	f381 8811 	msr	BASEPRI, r1
    2e96:	f3bf 8f6f 	isb	sy
    2e9a:	2200      	movs	r2, #0
    2e9c:	2300      	movs	r3, #0
    2e9e:	f00d ffb7 	bl	10e10 <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2ea2:	bf00      	nop
    2ea4:	20001e10 	.word	0x20001e10

00002ea8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2ea8:	4901      	ldr	r1, [pc, #4]	; (2eb0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    2eaa:	2210      	movs	r2, #16
	str	r2, [r1]
    2eac:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2eae:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2eb0:	e000ed10 	.word	0xe000ed10

00002eb4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2eb4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    2eb6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2eb8:	f380 8811 	msr	BASEPRI, r0
	isb
    2ebc:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2ec0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2ec4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    2ec6:	b662      	cpsie	i
	isb
    2ec8:	f3bf 8f6f 	isb	sy

	bx	lr
    2ecc:	4770      	bx	lr
    2ece:	bf00      	nop

00002ed0 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    2ed0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2ed2:	4605      	mov	r5, r0

	if (esf != NULL) {
    2ed4:	460c      	mov	r4, r1
    2ed6:	b1c9      	cbz	r1, 2f0c <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    2ed8:	688b      	ldr	r3, [r1, #8]
    2eda:	4810      	ldr	r0, [pc, #64]	; (2f1c <z_arm_fatal_error+0x4c>)
    2edc:	9300      	str	r3, [sp, #0]
    2ede:	e9d1 2300 	ldrd	r2, r3, [r1]
    2ee2:	2145      	movs	r1, #69	; 0x45
    2ee4:	f00d ff7a 	bl	10ddc <printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    2ee8:	6963      	ldr	r3, [r4, #20]
    2eea:	2145      	movs	r1, #69	; 0x45
    2eec:	9300      	str	r3, [sp, #0]
    2eee:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    2ef2:	480b      	ldr	r0, [pc, #44]	; (2f20 <z_arm_fatal_error+0x50>)
    2ef4:	f00d ff72 	bl	10ddc <printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    2ef8:	2145      	movs	r1, #69	; 0x45
    2efa:	69e2      	ldr	r2, [r4, #28]
    2efc:	4809      	ldr	r0, [pc, #36]	; (2f24 <z_arm_fatal_error+0x54>)
    2efe:	f00d ff6d 	bl	10ddc <printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    2f02:	2145      	movs	r1, #69	; 0x45
    2f04:	69a2      	ldr	r2, [r4, #24]
    2f06:	4808      	ldr	r0, [pc, #32]	; (2f28 <z_arm_fatal_error+0x58>)
    2f08:	f00d ff68 	bl	10ddc <printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    2f0c:	4621      	mov	r1, r4
    2f0e:	4628      	mov	r0, r5
}
    2f10:	b003      	add	sp, #12
    2f12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    2f16:	f00a bce5 	b.w	d8e4 <z_fatal_error>
    2f1a:	bf00      	nop
    2f1c:	00016b2f 	.word	0x00016b2f
    2f20:	00016b63 	.word	0x00016b63
    2f24:	00016b97 	.word	0x00016b97
    2f28:	00016bab 	.word	0x00016bab

00002f2c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2f2c:	bf30      	wfi
    b z_SysNmiOnReset
    2f2e:	f7ff bffd 	b.w	2f2c <z_SysNmiOnReset>
    2f32:	bf00      	nop

00002f34 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2f34:	4a0e      	ldr	r2, [pc, #56]	; (2f70 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    2f36:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2f38:	4b0e      	ldr	r3, [pc, #56]	; (2f74 <z_arm_prep_c+0x40>)
    2f3a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2f3e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2f40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2f44:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2f48:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2f4c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2f50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    2f54:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    2f58:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    2f5c:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2f60:	f00a fd42 	bl	d9e8 <z_bss_zero>
	z_data_copy();
    2f64:	f00a fd4a 	bl	d9fc <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2f68:	f000 fa5a 	bl	3420 <z_arm_interrupt_init>
	z_cstart();
    2f6c:	f00a fd84 	bl	da78 <z_cstart>
    2f70:	00000000 	.word	0x00000000
    2f74:	e000ed00 	.word	0xe000ed00

00002f78 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2f78:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    2f7a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    2f7c:	4a0b      	ldr	r2, [pc, #44]	; (2fac <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    2f7e:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    2f80:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    2f82:	bf1e      	ittt	ne
	movne	r1, #0
    2f84:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    2f86:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    2f88:	f011 ffc7 	blne	14f1a <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    2f8c:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    2f8e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    2f92:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    2f96:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    2f9a:	4905      	ldr	r1, [pc, #20]	; (2fb0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2f9c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    2f9e:	c909      	ldmia	r1!, {r0, r3}
#ifdef CONFIG_EXECUTION_BENCHMARKING
	push {r0, r3}	/* Save r0 and r3 into stack */
	bl read_timer_end_of_isr
	pop {r0, r3}	/* Restore r0 and r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    2fa0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2fa2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2fa6:	4903      	ldr	r1, [pc, #12]	; (2fb4 <_isr_wrapper+0x3c>)
	bx r1
    2fa8:	4708      	bx	r1
    2faa:	0000      	.short	0x0000
	ldr r2, =_kernel
    2fac:	20001e10 	.word	0x20001e10
	ldr r1, =_sw_isr_table
    2fb0:	000152fc 	.word	0x000152fc
	ldr r1, =z_arm_int_exit
    2fb4:	000033e1 	.word	0x000033e1

00002fb8 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    2fb8:	f00e f9ae 	bl	11318 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2fbc:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2fbe:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2fc2:	4808      	ldr	r0, [pc, #32]	; (2fe4 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    2fc4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    2fc8:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2fca:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2fce:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2fd2:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2fd4:	4308      	orrs	r0, r1
    msr CONTROL, r0
    2fd6:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2fda:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2fde:	f7ff ffa9 	bl	2f34 <z_arm_prep_c>
    2fe2:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    2fe4:	20004068 	.word	0x20004068

00002fe8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    2fe8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2fec:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
    2ff0:	4672      	mov	r2, lr

	push {r0, lr}
    2ff2:	b501      	push	{r0, lr}

	bl z_arm_fault
    2ff4:	f000 f920 	bl	3238 <z_arm_fault>

	pop {r0, pc}
    2ff8:	bd01      	pop	{r0, pc}
    2ffa:	bf00      	nop

00002ffc <bus_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2ffc:	b570      	push	{r4, r5, r6, lr}
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2ffe:	4c23      	ldr	r4, [pc, #140]	; (308c <bus_fault.isra.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    3000:	4606      	mov	r6, r0
    3002:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    3004:	4822      	ldr	r0, [pc, #136]	; (3090 <bus_fault.isra.0+0x94>)
    3006:	2145      	movs	r1, #69	; 0x45
    3008:	f00d fee8 	bl	10ddc <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    300c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    300e:	04d1      	lsls	r1, r2, #19
    3010:	d503      	bpl.n	301a <bus_fault.isra.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    3012:	2145      	movs	r1, #69	; 0x45
    3014:	481f      	ldr	r0, [pc, #124]	; (3094 <bus_fault.isra.0+0x98>)
    3016:	f00d fee1 	bl	10ddc <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    301a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    301c:	051a      	lsls	r2, r3, #20
    301e:	d503      	bpl.n	3028 <bus_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    3020:	2145      	movs	r1, #69	; 0x45
    3022:	481d      	ldr	r0, [pc, #116]	; (3098 <bus_fault.isra.0+0x9c>)
    3024:	f00d feda 	bl	10ddc <printk>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    3028:	4c18      	ldr	r4, [pc, #96]	; (308c <bus_fault.isra.0+0x90>)
    302a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    302c:	059b      	lsls	r3, r3, #22
    302e:	d510      	bpl.n	3052 <bus_fault.isra.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    3030:	481a      	ldr	r0, [pc, #104]	; (309c <bus_fault.isra.0+0xa0>)
    3032:	2145      	movs	r1, #69	; 0x45
    3034:	f00d fed2 	bl	10ddc <printk>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    3038:	6ba2      	ldr	r2, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    303a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    303c:	0418      	lsls	r0, r3, #16
    303e:	d508      	bpl.n	3052 <bus_fault.isra.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    3040:	2145      	movs	r1, #69	; 0x45
    3042:	4817      	ldr	r0, [pc, #92]	; (30a0 <bus_fault.isra.0+0xa4>)
    3044:	f00d feca 	bl	10ddc <printk>
			if (from_hard_fault) {
    3048:	b11e      	cbz	r6, 3052 <bus_fault.isra.0+0x56>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    304a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    304c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    3050:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3052:	4c0e      	ldr	r4, [pc, #56]	; (308c <bus_fault.isra.0+0x90>)
    3054:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3056:	0559      	lsls	r1, r3, #21
    3058:	d503      	bpl.n	3062 <bus_fault.isra.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    305a:	2145      	movs	r1, #69	; 0x45
    305c:	4811      	ldr	r0, [pc, #68]	; (30a4 <bus_fault.isra.0+0xa8>)
    305e:	f00d febd 	bl	10ddc <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    3062:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3064:	05da      	lsls	r2, r3, #23
    3066:	d50b      	bpl.n	3080 <bus_fault.isra.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    3068:	2145      	movs	r1, #69	; 0x45
    306a:	480f      	ldr	r0, [pc, #60]	; (30a8 <bus_fault.isra.0+0xac>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    306c:	f00d feb6 	bl	10ddc <printk>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
    3070:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3072:	4a06      	ldr	r2, [pc, #24]	; (308c <bus_fault.isra.0+0x90>)
    3074:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3076:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    307a:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    307c:	7028      	strb	r0, [r5, #0]

	return reason;
}
    307e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    3080:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3082:	049b      	lsls	r3, r3, #18
    3084:	d5f4      	bpl.n	3070 <bus_fault.isra.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    3086:	2145      	movs	r1, #69	; 0x45
    3088:	4808      	ldr	r0, [pc, #32]	; (30ac <bus_fault.isra.0+0xb0>)
    308a:	e7ef      	b.n	306c <bus_fault.isra.0+0x70>
    308c:	e000ed00 	.word	0xe000ed00
    3090:	00016bde 	.word	0x00016bde
    3094:	00016bf9 	.word	0x00016bf9
    3098:	00016c0f 	.word	0x00016c0f
    309c:	00016c27 	.word	0x00016c27
    30a0:	00016c45 	.word	0x00016c45
    30a4:	00016c5f 	.word	0x00016c5f
    30a8:	00016c7f 	.word	0x00016c7f
    30ac:	00016c9c 	.word	0x00016c9c

000030b0 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
    30b0:	b538      	push	{r3, r4, r5, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    30b2:	4c21      	ldr	r4, [pc, #132]	; (3138 <usage_fault.isra.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    30b4:	2145      	movs	r1, #69	; 0x45
    30b6:	4821      	ldr	r0, [pc, #132]	; (313c <usage_fault.isra.0+0x8c>)
    30b8:	f00d fe90 	bl	10ddc <printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    30bc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    30be:	0195      	lsls	r5, r2, #6
    30c0:	d503      	bpl.n	30ca <usage_fault.isra.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    30c2:	2145      	movs	r1, #69	; 0x45
    30c4:	481e      	ldr	r0, [pc, #120]	; (3140 <usage_fault.isra.0+0x90>)
    30c6:	f00d fe89 	bl	10ddc <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    30ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    30cc:	01dc      	lsls	r4, r3, #7
    30ce:	d503      	bpl.n	30d8 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    30d0:	2145      	movs	r1, #69	; 0x45
    30d2:	481c      	ldr	r0, [pc, #112]	; (3144 <usage_fault.isra.0+0x94>)
    30d4:	f00d fe82 	bl	10ddc <printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    30d8:	4d17      	ldr	r5, [pc, #92]	; (3138 <usage_fault.isra.0+0x88>)
    30da:	6aac      	ldr	r4, [r5, #40]	; 0x28
    30dc:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    30e0:	d004      	beq.n	30ec <usage_fault.isra.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    30e2:	2145      	movs	r1, #69	; 0x45
    30e4:	4818      	ldr	r0, [pc, #96]	; (3148 <usage_fault.isra.0+0x98>)
    30e6:	f00d fe79 	bl	10ddc <printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    30ea:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    30ec:	6aab      	ldr	r3, [r5, #40]	; 0x28
    30ee:	0318      	lsls	r0, r3, #12
    30f0:	d503      	bpl.n	30fa <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    30f2:	2145      	movs	r1, #69	; 0x45
    30f4:	4815      	ldr	r0, [pc, #84]	; (314c <usage_fault.isra.0+0x9c>)
    30f6:	f00d fe71 	bl	10ddc <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    30fa:	4d0f      	ldr	r5, [pc, #60]	; (3138 <usage_fault.isra.0+0x88>)
    30fc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    30fe:	0351      	lsls	r1, r2, #13
    3100:	d503      	bpl.n	310a <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    3102:	2145      	movs	r1, #69	; 0x45
    3104:	4812      	ldr	r0, [pc, #72]	; (3150 <usage_fault.isra.0+0xa0>)
    3106:	f00d fe69 	bl	10ddc <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    310a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    310c:	039a      	lsls	r2, r3, #14
    310e:	d503      	bpl.n	3118 <usage_fault.isra.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    3110:	2145      	movs	r1, #69	; 0x45
    3112:	4810      	ldr	r0, [pc, #64]	; (3154 <usage_fault.isra.0+0xa4>)
    3114:	f00d fe62 	bl	10ddc <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    3118:	4d07      	ldr	r5, [pc, #28]	; (3138 <usage_fault.isra.0+0x88>)
    311a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    311c:	03db      	lsls	r3, r3, #15
    311e:	d503      	bpl.n	3128 <usage_fault.isra.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    3120:	2145      	movs	r1, #69	; 0x45
    3122:	480d      	ldr	r0, [pc, #52]	; (3158 <usage_fault.isra.0+0xa8>)
    3124:	f00d fe5a 	bl	10ddc <printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3128:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    312a:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    312c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    3130:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    3134:	62ab      	str	r3, [r5, #40]	; 0x28
}
    3136:	bd38      	pop	{r3, r4, r5, pc}
    3138:	e000ed00 	.word	0xe000ed00
    313c:	00016cd0 	.word	0x00016cd0
    3140:	00016ced 	.word	0x00016ced
    3144:	00016d05 	.word	0x00016d05
    3148:	00016d24 	.word	0x00016d24
    314c:	00016d53 	.word	0x00016d53
    3150:	00016d76 	.word	0x00016d76
    3154:	00016da0 	.word	0x00016da0
    3158:	00016dbf 	.word	0x00016dbf

0000315c <mem_manage_fault.isra.0>:
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    315c:	b570      	push	{r4, r5, r6, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    315e:	4c2a      	ldr	r4, [pc, #168]	; (3208 <mem_manage_fault.isra.0+0xac>)
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    3160:	4606      	mov	r6, r0
    3162:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    3164:	4829      	ldr	r0, [pc, #164]	; (320c <mem_manage_fault.isra.0+0xb0>)
    3166:	2145      	movs	r1, #69	; 0x45
    3168:	f00d fe38 	bl	10ddc <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    316c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    316e:	06d1      	lsls	r1, r2, #27
    3170:	d503      	bpl.n	317a <mem_manage_fault.isra.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    3172:	2145      	movs	r1, #69	; 0x45
    3174:	4826      	ldr	r0, [pc, #152]	; (3210 <mem_manage_fault.isra.0+0xb4>)
    3176:	f00d fe31 	bl	10ddc <printk>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    317a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    317c:	071a      	lsls	r2, r3, #28
    317e:	d503      	bpl.n	3188 <mem_manage_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    3180:	2145      	movs	r1, #69	; 0x45
    3182:	4824      	ldr	r0, [pc, #144]	; (3214 <mem_manage_fault.isra.0+0xb8>)
    3184:	f00d fe2a 	bl	10ddc <printk>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    3188:	4c1f      	ldr	r4, [pc, #124]	; (3208 <mem_manage_fault.isra.0+0xac>)
    318a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    318c:	079b      	lsls	r3, r3, #30
    318e:	d510      	bpl.n	31b2 <mem_manage_fault.isra.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
    3190:	4821      	ldr	r0, [pc, #132]	; (3218 <mem_manage_fault.isra.0+0xbc>)
    3192:	2145      	movs	r1, #69	; 0x45
    3194:	f00d fe22 	bl	10ddc <printk>
		mmfar = SCB->MMFAR;
    3198:	6b62      	ldr	r2, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    319a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    319c:	0618      	lsls	r0, r3, #24
    319e:	d508      	bpl.n	31b2 <mem_manage_fault.isra.0+0x56>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    31a0:	2145      	movs	r1, #69	; 0x45
    31a2:	481e      	ldr	r0, [pc, #120]	; (321c <mem_manage_fault.isra.0+0xc0>)
    31a4:	f00d fe1a 	bl	10ddc <printk>
			if (from_hard_fault) {
    31a8:	b11e      	cbz	r6, 31b2 <mem_manage_fault.isra.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    31aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    31ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    31b0:	62a3      	str	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    31b2:	4c15      	ldr	r4, [pc, #84]	; (3208 <mem_manage_fault.isra.0+0xac>)
    31b4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    31b6:	07d1      	lsls	r1, r2, #31
    31b8:	d503      	bpl.n	31c2 <mem_manage_fault.isra.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
    31ba:	2145      	movs	r1, #69	; 0x45
    31bc:	4818      	ldr	r0, [pc, #96]	; (3220 <mem_manage_fault.isra.0+0xc4>)
    31be:	f00d fe0d 	bl	10ddc <printk>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    31c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    31c4:	069a      	lsls	r2, r3, #26
    31c6:	d503      	bpl.n	31d0 <mem_manage_fault.isra.0+0x74>
		PR_FAULT_INFO(
    31c8:	2145      	movs	r1, #69	; 0x45
    31ca:	4816      	ldr	r0, [pc, #88]	; (3224 <mem_manage_fault.isra.0+0xc8>)
    31cc:	f00d fe06 	bl	10ddc <printk>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    31d0:	4b0d      	ldr	r3, [pc, #52]	; (3208 <mem_manage_fault.isra.0+0xac>)
    31d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    31d4:	06db      	lsls	r3, r3, #27
    31d6:	d50e      	bpl.n	31f6 <mem_manage_fault.isra.0+0x9a>
	__ASSERT(0,
    31d8:	4913      	ldr	r1, [pc, #76]	; (3228 <mem_manage_fault.isra.0+0xcc>)
    31da:	f44f 739b 	mov.w	r3, #310	; 0x136
    31de:	4a13      	ldr	r2, [pc, #76]	; (322c <mem_manage_fault.isra.0+0xd0>)
    31e0:	4813      	ldr	r0, [pc, #76]	; (3230 <mem_manage_fault.isra.0+0xd4>)
    31e2:	f00d fdfb 	bl	10ddc <printk>
    31e6:	4813      	ldr	r0, [pc, #76]	; (3234 <mem_manage_fault.isra.0+0xd8>)
    31e8:	f00d fdf8 	bl	10ddc <printk>
    31ec:	f44f 719b 	mov.w	r1, #310	; 0x136
    31f0:	480e      	ldr	r0, [pc, #56]	; (322c <mem_manage_fault.isra.0+0xd0>)
    31f2:	f00e f889 	bl	11308 <assert_post_action>
	*recoverable = memory_fault_recoverable(esf);
    31f6:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    31f8:	4a03      	ldr	r2, [pc, #12]	; (3208 <mem_manage_fault.isra.0+0xac>)
    31fa:	6a93      	ldr	r3, [r2, #40]	; 0x28
    31fc:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    3200:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    3202:	7028      	strb	r0, [r5, #0]
}
    3204:	bd70      	pop	{r4, r5, r6, pc}
    3206:	bf00      	nop
    3208:	e000ed00 	.word	0xe000ed00
    320c:	00016def 	.word	0x00016def
    3210:	00016e0a 	.word	0x00016e0a
    3214:	00016c0f 	.word	0x00016c0f
    3218:	00016e42 	.word	0x00016e42
    321c:	00016e5f 	.word	0x00016e5f
    3220:	00016e7a 	.word	0x00016e7a
    3224:	00016c9c 	.word	0x00016c9c
    3228:	00019ede 	.word	0x00019ede
    322c:	00016e9e 	.word	0x00016e9e
    3230:	00016493 	.word	0x00016493
    3234:	00016ed8 	.word	0x00016ed8

00003238 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
    3238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    323c:	4b52      	ldr	r3, [pc, #328]	; (3388 <z_arm_fault+0x150>)
{
    323e:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3240:	f8d3 8004 	ldr.w	r8, [r3, #4]
    3244:	2500      	movs	r5, #0
{
    3246:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3248:	f3c8 0708 	ubfx	r7, r8, #0, #9
    324c:	f385 8811 	msr	BASEPRI, r5
    3250:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    3254:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    3258:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    325c:	d107      	bne.n	326e <z_arm_fault+0x36>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    325e:	f002 030c 	and.w	r3, r2, #12
    3262:	2b08      	cmp	r3, #8
    3264:	d114      	bne.n	3290 <z_arm_fault+0x58>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    3266:	2145      	movs	r1, #69	; 0x45
    3268:	4848      	ldr	r0, [pc, #288]	; (338c <z_arm_fault+0x154>)
    326a:	f00d fdb7 	bl	10ddc <printk>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    326e:	f240 33b1 	movw	r3, #945	; 0x3b1
    3272:	4a47      	ldr	r2, [pc, #284]	; (3390 <z_arm_fault+0x158>)
    3274:	4947      	ldr	r1, [pc, #284]	; (3394 <z_arm_fault+0x15c>)
    3276:	4848      	ldr	r0, [pc, #288]	; (3398 <z_arm_fault+0x160>)
    3278:	f00d fdb0 	bl	10ddc <printk>
    327c:	4847      	ldr	r0, [pc, #284]	; (339c <z_arm_fault+0x164>)
    327e:	f00d fdad 	bl	10ddc <printk>
    3282:	f240 31b1 	movw	r1, #945	; 0x3b1
    3286:	4842      	ldr	r0, [pc, #264]	; (3390 <z_arm_fault+0x158>)
    3288:	f00e f83e 	bl	11308 <assert_post_action>
    328c:	2600      	movs	r6, #0
    328e:	e005      	b.n	329c <z_arm_fault+0x64>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    3290:	0712      	lsls	r2, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
    3292:	bf5c      	itt	pl
    3294:	4606      	movpl	r6, r0
			*nested_exc = true;
    3296:	2501      	movpl	r5, #1
	__ASSERT(esf != NULL,
    3298:	2e00      	cmp	r6, #0
    329a:	d0e8      	beq.n	326e <z_arm_fault+0x36>
	*recoverable = false;
    329c:	2300      	movs	r3, #0
    329e:	1efa      	subs	r2, r7, #3
    32a0:	461c      	mov	r4, r3
    32a2:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    32a6:	4613      	mov	r3, r2
    32a8:	2b09      	cmp	r3, #9
    32aa:	d85b      	bhi.n	3364 <z_arm_fault+0x12c>
    32ac:	e8df f003 	tbb	[pc, r3]
    32b0:	33534f05 	.word	0x33534f05
    32b4:	5a5a5a5a 	.word	0x5a5a5a5a
    32b8:	575a      	.short	0x575a
	PR_FAULT_INFO("***** HARD FAULT *****");
    32ba:	2145      	movs	r1, #69	; 0x45
    32bc:	4838      	ldr	r0, [pc, #224]	; (33a0 <z_arm_fault+0x168>)
    32be:	f00d fd8d 	bl	10ddc <printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    32c2:	4b31      	ldr	r3, [pc, #196]	; (3388 <z_arm_fault+0x150>)
	*recoverable = false;
    32c4:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    32c8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    32ca:	f014 0402 	ands.w	r4, r4, #2
    32ce:	d005      	beq.n	32dc <z_arm_fault+0xa4>
		PR_EXC("  Bus fault on vector table read");
    32d0:	2145      	movs	r1, #69	; 0x45
    32d2:	4834      	ldr	r0, [pc, #208]	; (33a4 <z_arm_fault+0x16c>)
	PR_FAULT_INFO(
    32d4:	f00d fd82 	bl	10ddc <printk>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    32d8:	2400      	movs	r4, #0
}
    32da:	e01f      	b.n	331c <z_arm_fault+0xe4>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    32dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    32de:	005b      	lsls	r3, r3, #1
    32e0:	d51c      	bpl.n	331c <z_arm_fault+0xe4>
		PR_EXC("  Fault escalation (see below)");
    32e2:	2145      	movs	r1, #69	; 0x45
    32e4:	4830      	ldr	r0, [pc, #192]	; (33a8 <z_arm_fault+0x170>)
    32e6:	f00d fd79 	bl	10ddc <printk>
		if (SCB_MMFSR != 0) {
    32ea:	4b30      	ldr	r3, [pc, #192]	; (33ac <z_arm_fault+0x174>)
    32ec:	781b      	ldrb	r3, [r3, #0]
    32ee:	b12b      	cbz	r3, 32fc <z_arm_fault+0xc4>
			reason = mem_manage_fault(esf, 1, recoverable);
    32f0:	2001      	movs	r0, #1
    32f2:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    32f6:	f7ff ff31 	bl	315c <mem_manage_fault.isra.0>
    32fa:	e00e      	b.n	331a <z_arm_fault+0xe2>
		} else if (SCB_BFSR != 0) {
    32fc:	4b2c      	ldr	r3, [pc, #176]	; (33b0 <z_arm_fault+0x178>)
    32fe:	781b      	ldrb	r3, [r3, #0]
    3300:	b12b      	cbz	r3, 330e <z_arm_fault+0xd6>
			reason = bus_fault(esf, 1, recoverable);
    3302:	2001      	movs	r0, #1
    3304:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    3308:	f7ff fe78 	bl	2ffc <bus_fault.isra.0>
    330c:	e005      	b.n	331a <z_arm_fault+0xe2>
		} else if (SCB_UFSR != 0) {
    330e:	4b29      	ldr	r3, [pc, #164]	; (33b4 <z_arm_fault+0x17c>)
    3310:	881b      	ldrh	r3, [r3, #0]
    3312:	b29b      	uxth	r3, r3
    3314:	b113      	cbz	r3, 331c <z_arm_fault+0xe4>
			reason = usage_fault(esf);
    3316:	f7ff fecb 	bl	30b0 <usage_fault.isra.0>
    331a:	4604      	mov	r4, r0
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    331c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3320:	b993      	cbnz	r3, 3348 <z_arm_fault+0x110>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    3322:	2220      	movs	r2, #32
    3324:	4631      	mov	r1, r6
    3326:	a802      	add	r0, sp, #8
    3328:	f00e ff19 	bl	1215e <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    332c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    332e:	b335      	cbz	r5, 337e <z_arm_fault+0x146>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    3330:	f3c3 0208 	ubfx	r2, r3, #0, #9
    3334:	b922      	cbnz	r2, 3340 <z_arm_fault+0x108>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    3336:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    333a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    333e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    3340:	4620      	mov	r0, r4
    3342:	a902      	add	r1, sp, #8
    3344:	f7ff fdc4 	bl	2ed0 <z_arm_fatal_error>
}
    3348:	b00a      	add	sp, #40	; 0x28
    334a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    334e:	2000      	movs	r0, #0
    3350:	f10d 0107 	add.w	r1, sp, #7
    3354:	e7cf      	b.n	32f6 <z_arm_fault+0xbe>
		reason = bus_fault(esf, 0, recoverable);
    3356:	2000      	movs	r0, #0
    3358:	f10d 0107 	add.w	r1, sp, #7
    335c:	e7d4      	b.n	3308 <z_arm_fault+0xd0>
	PR_FAULT_INFO(
    335e:	2145      	movs	r1, #69	; 0x45
    3360:	4815      	ldr	r0, [pc, #84]	; (33b8 <z_arm_fault+0x180>)
    3362:	e7b7      	b.n	32d4 <z_arm_fault+0x9c>
	PR_FAULT_INFO("***** %s %d) *****",
    3364:	4915      	ldr	r1, [pc, #84]	; (33bc <z_arm_fault+0x184>)
    3366:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    336a:	4a15      	ldr	r2, [pc, #84]	; (33c0 <z_arm_fault+0x188>)
    336c:	4815      	ldr	r0, [pc, #84]	; (33c4 <z_arm_fault+0x18c>)
    336e:	bf08      	it	eq
    3370:	460a      	moveq	r2, r1
    3372:	f1a7 0310 	sub.w	r3, r7, #16
    3376:	2145      	movs	r1, #69	; 0x45
    3378:	f00d fd30 	bl	10ddc <printk>
    337c:	e7ac      	b.n	32d8 <z_arm_fault+0xa0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    337e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    3382:	f023 0301 	bic.w	r3, r3, #1
    3386:	e7da      	b.n	333e <z_arm_fault+0x106>
    3388:	e000ed00 	.word	0xe000ed00
    338c:	00016f40 	.word	0x00016f40
    3390:	00016e9e 	.word	0x00016e9e
    3394:	00016f70 	.word	0x00016f70
    3398:	00016493 	.word	0x00016493
    339c:	00016f83 	.word	0x00016f83
    33a0:	00016fc1 	.word	0x00016fc1
    33a4:	00016fdd 	.word	0x00016fdd
    33a8:	00017003 	.word	0x00017003
    33ac:	e000ed28 	.word	0xe000ed28
    33b0:	e000ed29 	.word	0xe000ed29
    33b4:	e000ed2a 	.word	0xe000ed2a
    33b8:	00017027 	.word	0x00017027
    33bc:	00016f12 	.word	0x00016f12
    33c0:	00016f27 	.word	0x00016f27
    33c4:	00017062 	.word	0x00017062

000033c8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    33c8:	4b04      	ldr	r3, [pc, #16]	; (33dc <z_arm_fault_init+0x14>)
    33ca:	695a      	ldr	r2, [r3, #20]
    33cc:	f042 0210 	orr.w	r2, r2, #16
    33d0:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    33d2:	695a      	ldr	r2, [r3, #20]
    33d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    33d8:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    33da:	4770      	bx	lr
    33dc:	e000ed00 	.word	0xe000ed00

000033e0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    33e0:	4b04      	ldr	r3, [pc, #16]	; (33f4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    33e2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    33e4:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    33e6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    33e8:	d003      	beq.n	33f2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    33ea:	4903      	ldr	r1, [pc, #12]	; (33f8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    33ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    33f0:	600a      	str	r2, [r1, #0]

000033f2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    33f2:	4770      	bx	lr
	ldr r3, =_kernel
    33f4:	20001e10 	.word	0x20001e10
	ldr r1, =_SCS_ICSR
    33f8:	e000ed04 	.word	0xe000ed04

000033fc <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    33fc:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3400:	4905      	ldr	r1, [pc, #20]	; (3418 <sys_arch_reboot+0x1c>)
    3402:	4b06      	ldr	r3, [pc, #24]	; (341c <sys_arch_reboot+0x20>)
    3404:	68ca      	ldr	r2, [r1, #12]
    3406:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    340a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    340c:	60cb      	str	r3, [r1, #12]
    340e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    3412:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3414:	e7fd      	b.n	3412 <sys_arch_reboot+0x16>
    3416:	bf00      	nop
    3418:	e000ed00 	.word	0xe000ed00
    341c:	05fa0004 	.word	0x05fa0004

00003420 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    3420:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3422:	2120      	movs	r1, #32
    3424:	4803      	ldr	r0, [pc, #12]	; (3434 <z_arm_interrupt_init+0x14>)
    3426:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    3428:	3301      	adds	r3, #1
    342a:	2b45      	cmp	r3, #69	; 0x45
    342c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    3430:	d1f9      	bne.n	3426 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    3432:	4770      	bx	lr
    3434:	e000e100 	.word	0xe000e100

00003438 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    3438:	b538      	push	{r3, r4, r5, lr}
    343a:	4604      	mov	r4, r0
	__asm__ volatile(
    343c:	f04f 0320 	mov.w	r3, #32
    3440:	f3ef 8511 	mrs	r5, BASEPRI
    3444:	f383 8811 	msr	BASEPRI, r3
    3448:	f3bf 8f6f 	isb	sy
	unsigned int key;

	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
    344c:	7b03      	ldrb	r3, [r0, #12]
    344e:	07db      	lsls	r3, r3, #31
    3450:	d50c      	bpl.n	346c <z_impl_k_thread_abort+0x34>
    3452:	4912      	ldr	r1, [pc, #72]	; (349c <z_impl_k_thread_abort+0x64>)
    3454:	2323      	movs	r3, #35	; 0x23
    3456:	4a12      	ldr	r2, [pc, #72]	; (34a0 <z_impl_k_thread_abort+0x68>)
    3458:	4812      	ldr	r0, [pc, #72]	; (34a4 <z_impl_k_thread_abort+0x6c>)
    345a:	f00d fcbf 	bl	10ddc <printk>
    345e:	4812      	ldr	r0, [pc, #72]	; (34a8 <z_impl_k_thread_abort+0x70>)
    3460:	f00d fcbc 	bl	10ddc <printk>
    3464:	2123      	movs	r1, #35	; 0x23
    3466:	480e      	ldr	r0, [pc, #56]	; (34a0 <z_impl_k_thread_abort+0x68>)
    3468:	f00d ff4e 	bl	11308 <assert_post_action>
		 "essential thread aborted");

	z_thread_single_abort(thread);
    346c:	4620      	mov	r0, r4
    346e:	f00b fdb3 	bl	efd8 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    3472:	4b0e      	ldr	r3, [pc, #56]	; (34ac <z_impl_k_thread_abort+0x74>)
    3474:	689b      	ldr	r3, [r3, #8]
    3476:	42a3      	cmp	r3, r4
    3478:	d10b      	bne.n	3492 <z_impl_k_thread_abort+0x5a>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    347a:	4b0d      	ldr	r3, [pc, #52]	; (34b0 <z_impl_k_thread_abort+0x78>)
    347c:	685a      	ldr	r2, [r3, #4]
    347e:	f3c2 0208 	ubfx	r2, r2, #0, #9
    3482:	b912      	cbnz	r2, 348a <z_impl_k_thread_abort+0x52>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
    3484:	4628      	mov	r0, r5
    3486:	f7ff fc3f 	bl	2d08 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    348a:	685a      	ldr	r2, [r3, #4]
    348c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    3490:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    3492:	4628      	mov	r0, r5
}
    3494:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    3498:	f011 bdb8 	b.w	1500c <z_reschedule_irqlock>
    349c:	000170bb 	.word	0x000170bb
    34a0:	0001707a 	.word	0x0001707a
    34a4:	00016493 	.word	0x00016493
    34a8:	000170e9 	.word	0x000170e9
    34ac:	20001e10 	.word	0x20001e10
    34b0:	e000ed00 	.word	0xe000ed00

000034b4 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    34b4:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    34b6:	4b0e      	ldr	r3, [pc, #56]	; (34f0 <z_arm_configure_static_mpu_regions+0x3c>)
{
    34b8:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
    34ba:	9302      	str	r3, [sp, #8]
    34bc:	4b0d      	ldr	r3, [pc, #52]	; (34f4 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    34be:	4c0e      	ldr	r4, [pc, #56]	; (34f8 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
    34c0:	9303      	str	r3, [sp, #12]
    34c2:	4b0e      	ldr	r3, [pc, #56]	; (34fc <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    34c4:	4a0e      	ldr	r2, [pc, #56]	; (3500 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
    34c6:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
    34c8:	ab02      	add	r3, sp, #8
    34ca:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    34cc:	a801      	add	r0, sp, #4
    34ce:	4623      	mov	r3, r4
    34d0:	2101      	movs	r1, #1
    34d2:	f000 f96d 	bl	37b0 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
    34d6:	2300      	movs	r3, #0
    34d8:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    34da:	4b0a      	ldr	r3, [pc, #40]	; (3504 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    34dc:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    34de:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    34e0:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
    34e2:	9305      	str	r3, [sp, #20]
    34e4:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    34e6:	f000 f989 	bl	37fc <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    34ea:	b008      	add	sp, #32
    34ec:	bd10      	pop	{r4, pc}
    34ee:	bf00      	nop
    34f0:	20000000 	.word	0x20000000
    34f4:	00000000 	.word	0x00000000
    34f8:	20070000 	.word	0x20070000
    34fc:	00010006 	.word	0x00010006
    3500:	20000000 	.word	0x20000000
    3504:	20000780 	.word	0x20000780

00003508 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
    3508:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    350a:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    350c:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    350e:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    3512:	f004 031f 	and.w	r3, r4, #31
    3516:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    3518:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    351a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    351c:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    3520:	4904      	ldr	r1, [pc, #16]	; (3534 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    3522:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    3526:	f043 0301 	orr.w	r3, r3, #1
    352a:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    352c:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    352e:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    3530:	bd10      	pop	{r4, pc}
    3532:	bf00      	nop
    3534:	e000ed90 	.word	0xe000ed90

00003538 <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const u8_t index,
	const struct k_mem_partition *new_region)
{
    3538:	b530      	push	{r4, r5, lr}

	LOG_DBG("Configure MPU region at index 0x%x", index);

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    353a:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
    353c:	680c      	ldr	r4, [r1, #0]
{
    353e:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_k_mem_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, u32_t base, u32_t size)
{
	p_attr->rbar = attr->rbar &
    3540:	890a      	ldrh	r2, [r1, #8]
    3542:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
    3544:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    3546:	3b01      	subs	r3, #1
    3548:	f024 041f 	bic.w	r4, r4, #31
    354c:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    354e:	f002 021f 	and.w	r2, r2, #31
    3552:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    3556:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
    355a:	280f      	cmp	r0, #15
    355c:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
    355e:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    3562:	9303      	str	r3, [sp, #12]
    3564:	d909      	bls.n	357a <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    3566:	4602      	mov	r2, r0
    3568:	2145      	movs	r1, #69	; 0x45
    356a:	4806      	ldr	r0, [pc, #24]	; (3584 <mpu_configure_region+0x4c>)
    356c:	f00d fc36 	bl	10ddc <printk>
		return -EINVAL;
    3570:	f06f 0415 	mvn.w	r4, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
    3574:	4620      	mov	r0, r4
    3576:	b005      	add	sp, #20
    3578:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
    357a:	4669      	mov	r1, sp
    357c:	f7ff ffc4 	bl	3508 <region_init>
	return region_allocate_and_init(index,
    3580:	e7f8      	b.n	3574 <mpu_configure_region+0x3c>
    3582:	bf00      	nop
    3584:	00017108 	.word	0x00017108

00003588 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    3588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    358c:	4680      	mov	r8, r0
    358e:	4689      	mov	r9, r1
    3590:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    3592:	2700      	movs	r7, #0
	MPU->RNR = index;
    3594:	4d4e      	ldr	r5, [pc, #312]	; (36d0 <mpu_configure_regions_and_partition.constprop.0+0x148>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    3596:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    3598:	454f      	cmp	r7, r9
    359a:	da29      	bge.n	35f0 <mpu_configure_regions_and_partition.constprop.0+0x68>
		if (regions[i]->size == 0U) {
    359c:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
    35a0:	f8d3 a004 	ldr.w	sl, [r3, #4]
    35a4:	f1ba 0f00 	cmp.w	sl, #0
    35a8:	d042      	beq.n	3630 <mpu_configure_regions_and_partition.constprop.0+0xa8>
		&&
    35aa:	f1ba 0f1f 	cmp.w	sl, #31
    35ae:	d918      	bls.n	35e2 <mpu_configure_regions_and_partition.constprop.0+0x5a>
		&&
    35b0:	f01a 0f1f 	tst.w	sl, #31
    35b4:	d115      	bne.n	35e2 <mpu_configure_regions_and_partition.constprop.0+0x5a>
		((part->start &
    35b6:	f8d3 b000 	ldr.w	fp, [r3]
		&&
    35ba:	f01b 0f1f 	tst.w	fp, #31
    35be:	d110      	bne.n	35e2 <mpu_configure_regions_and_partition.constprop.0+0x5a>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    35c0:	4658      	mov	r0, fp
    35c2:	f00e fcfe 	bl	11fc2 <arm_cmse_mpu_region_get>
    35c6:	4606      	mov	r6, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    35c8:	eb0a 000b 	add.w	r0, sl, fp
    35cc:	3801      	subs	r0, #1
    35ce:	f00e fcf8 	bl	11fc2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    35d2:	4286      	cmp	r6, r0
    35d4:	d010      	beq.n	35f8 <mpu_configure_regions_and_partition.constprop.0+0x70>
	return -EINVAL;
    35d6:	f06f 0615 	mvn.w	r6, #21
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    35da:	4632      	mov	r2, r6
    35dc:	2145      	movs	r1, #69	; 0x45
    35de:	483d      	ldr	r0, [pc, #244]	; (36d4 <mpu_configure_regions_and_partition.constprop.0+0x14c>)
    35e0:	e002      	b.n	35e8 <mpu_configure_regions_and_partition.constprop.0+0x60>
			LOG_ERR("Partition %u: sanity check failed.", i);
    35e2:	463a      	mov	r2, r7
    35e4:	2145      	movs	r1, #69	; 0x45
    35e6:	483c      	ldr	r0, [pc, #240]	; (36d8 <mpu_configure_regions_and_partition.constprop.0+0x150>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    35e8:	f00d fbf8 	bl	10ddc <printk>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    35ec:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    35f0:	4620      	mov	r0, r4
    35f2:	b005      	add	sp, #20
    35f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    35f8:	f116 0f16 	cmn.w	r6, #22
    35fc:	d0ed      	beq.n	35da <mpu_configure_regions_and_partition.constprop.0+0x52>
			(u_reg_index > (reg_index - 1))) {
    35fe:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    3600:	42b3      	cmp	r3, r6
    3602:	dbea      	blt.n	35da <mpu_configure_regions_and_partition.constprop.0+0x52>
	MPU->RNR = index;
    3604:	60ae      	str	r6, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    3606:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
    3608:	60ae      	str	r6, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    360a:	692b      	ldr	r3, [r5, #16]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    360c:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    3610:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    3614:	f043 0b1f 	orr.w	fp, r3, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    3618:	e9d1 3200 	ldrd	r3, r2, [r1]
    361c:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
    361e:	4298      	cmp	r0, r3
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    3620:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i]->start == u_reg_base) &&
    3624:	d116      	bne.n	3654 <mpu_configure_regions_and_partition.constprop.0+0xcc>
    3626:	45d3      	cmp	fp, sl
    3628:	d104      	bne.n	3634 <mpu_configure_regions_and_partition.constprop.0+0xac>
			mpu_configure_region(u_reg_index, regions[i]);
    362a:	b2f0      	uxtb	r0, r6
    362c:	f7ff ff84 	bl	3538 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    3630:	3701      	adds	r7, #1
    3632:	e7b1      	b.n	3598 <mpu_configure_regions_and_partition.constprop.0+0x10>
	MPU->RNR = index;
    3634:	60ae      	str	r6, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    3636:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    3638:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    363c:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    3640:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    3642:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
    3644:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
    3646:	f7ff ff77 	bl	3538 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    364a:	f110 0f16 	cmn.w	r0, #22
    364e:	d0cd      	beq.n	35ec <mpu_configure_regions_and_partition.constprop.0+0x64>
			reg_index++;
    3650:	1c44      	adds	r4, r0, #1
    3652:	e7ed      	b.n	3630 <mpu_configure_regions_and_partition.constprop.0+0xa8>
	MPU->RNR = index;
    3654:	60ae      	str	r6, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    3656:	692a      	ldr	r2, [r5, #16]
    3658:	3b01      	subs	r3, #1
    365a:	f023 031f 	bic.w	r3, r3, #31
    365e:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    3662:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    3664:	45d3      	cmp	fp, sl
    3666:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    3668:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
    366a:	d0ec      	beq.n	3646 <mpu_configure_regions_and_partition.constprop.0+0xbe>
				mpu_configure_region(reg_index, regions[i]);
    366c:	f7ff ff64 	bl	3538 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    3670:	f110 0f16 	cmn.w	r0, #22
    3674:	d0ba      	beq.n	35ec <mpu_configure_regions_and_partition.constprop.0+0x64>
	MPU->RNR = index;
    3676:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
    3678:	68ea      	ldr	r2, [r5, #12]
    367a:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
    367e:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = MPU->RBAR &
    3682:	f362 0304 	bfi	r3, r2, #0, #5
    3686:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    368a:	692b      	ldr	r3, [r5, #16]
    368c:	f89d 2008 	ldrb.w	r2, [sp, #8]
    3690:	085b      	lsrs	r3, r3, #1
    3692:	f363 1247 	bfi	r2, r3, #5, #3
    3696:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
    369a:	f858 2027 	ldr.w	r2, [r8, r7, lsl #2]
			reg_index++;
    369e:	3001      	adds	r0, #1
			fill_region.base = regions[i]->start +
    36a0:	e9d2 3200 	ldrd	r3, r2, [r2]
    36a4:	4413      	add	r3, r2
    36a6:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
    36a8:	f023 031f 	bic.w	r3, r3, #31
    36ac:	445b      	add	r3, fp
    36ae:	eba3 030a 	sub.w	r3, r3, sl
    36b2:	b2c0      	uxtb	r0, r0
    36b4:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
    36b8:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
    36ba:	9303      	str	r3, [sp, #12]
    36bc:	d903      	bls.n	36c6 <mpu_configure_regions_and_partition.constprop.0+0x13e>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    36be:	4602      	mov	r2, r0
    36c0:	2145      	movs	r1, #69	; 0x45
    36c2:	4806      	ldr	r0, [pc, #24]	; (36dc <mpu_configure_regions_and_partition.constprop.0+0x154>)
    36c4:	e790      	b.n	35e8 <mpu_configure_regions_and_partition.constprop.0+0x60>
	region_init(index, region_conf);
    36c6:	4669      	mov	r1, sp
    36c8:	f7ff ff1e 	bl	3508 <region_init>
    36cc:	e7c0      	b.n	3650 <mpu_configure_regions_and_partition.constprop.0+0xc8>
    36ce:	bf00      	nop
    36d0:	e000ed90 	.word	0xe000ed90
    36d4:	0001715b 	.word	0x0001715b
    36d8:	00017133 	.word	0x00017133
    36dc:	00017108 	.word	0x00017108

000036e0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    36e0:	2205      	movs	r2, #5
    36e2:	4b03      	ldr	r3, [pc, #12]	; (36f0 <arm_core_mpu_enable+0x10>)
    36e4:	605a      	str	r2, [r3, #4]
    36e6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    36ea:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    36ee:	4770      	bx	lr
    36f0:	e000ed90 	.word	0xe000ed90

000036f4 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    36f4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    36f8:	2200      	movs	r2, #0
    36fa:	4b01      	ldr	r3, [pc, #4]	; (3700 <arm_core_mpu_disable+0xc>)
    36fc:	605a      	str	r2, [r3, #4]
}
    36fe:	4770      	bx	lr
    3700:	e000ed90 	.word	0xe000ed90

00003704 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
    3704:	b570      	push	{r4, r5, r6, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    3706:	4e20      	ldr	r6, [pc, #128]	; (3788 <arm_mpu_init+0x84>)
    3708:	6835      	ldr	r5, [r6, #0]
    370a:	2d10      	cmp	r5, #16
    370c:	d913      	bls.n	3736 <arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    370e:	f240 1339 	movw	r3, #313	; 0x139
    3712:	4a1e      	ldr	r2, [pc, #120]	; (378c <arm_mpu_init+0x88>)
    3714:	491e      	ldr	r1, [pc, #120]	; (3790 <arm_mpu_init+0x8c>)
    3716:	481f      	ldr	r0, [pc, #124]	; (3794 <arm_mpu_init+0x90>)
    3718:	f00d fb60 	bl	10ddc <printk>
    371c:	2210      	movs	r2, #16
    371e:	4629      	mov	r1, r5
    3720:	481d      	ldr	r0, [pc, #116]	; (3798 <arm_mpu_init+0x94>)
    3722:	f00d fb5b 	bl	10ddc <printk>
    3726:	4819      	ldr	r0, [pc, #100]	; (378c <arm_mpu_init+0x88>)
    3728:	f240 1139 	movw	r1, #313	; 0x139
    372c:	f00d fdec 	bl	11308 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    3730:	f04f 30ff 	mov.w	r0, #4294967295
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
    3734:	bd70      	pop	{r4, r5, r6, pc}
	arm_core_mpu_disable();
    3736:	f7ff ffdd 	bl	36f4 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    373a:	2000      	movs	r0, #0
	MPU->MAIR0 =
    373c:	4c17      	ldr	r4, [pc, #92]	; (379c <arm_mpu_init+0x98>)
    373e:	4a18      	ldr	r2, [pc, #96]	; (37a0 <arm_mpu_init+0x9c>)
    3740:	6322      	str	r2, [r4, #48]	; 0x30
    3742:	4285      	cmp	r5, r0
    3744:	d119      	bne.n	377a <arm_mpu_init+0x76>
	static_regions_num = mpu_config.num_regions;
    3746:	4b17      	ldr	r3, [pc, #92]	; (37a4 <arm_mpu_init+0xa0>)
    3748:	701d      	strb	r5, [r3, #0]
	arm_core_mpu_enable();
    374a:	f7ff ffc9 	bl	36e0 <arm_core_mpu_enable>
	__ASSERT(
    374e:	6823      	ldr	r3, [r4, #0]
    3750:	f3c3 2307 	ubfx	r3, r3, #8, #8
    3754:	2b10      	cmp	r3, #16
    3756:	d00e      	beq.n	3776 <arm_mpu_init+0x72>
    3758:	4913      	ldr	r1, [pc, #76]	; (37a8 <arm_mpu_init+0xa4>)
    375a:	f240 135b 	movw	r3, #347	; 0x15b
    375e:	4a0b      	ldr	r2, [pc, #44]	; (378c <arm_mpu_init+0x88>)
    3760:	480c      	ldr	r0, [pc, #48]	; (3794 <arm_mpu_init+0x90>)
    3762:	f00d fb3b 	bl	10ddc <printk>
    3766:	4811      	ldr	r0, [pc, #68]	; (37ac <arm_mpu_init+0xa8>)
    3768:	f00d fb38 	bl	10ddc <printk>
    376c:	f240 115b 	movw	r1, #347	; 0x15b
    3770:	4806      	ldr	r0, [pc, #24]	; (378c <arm_mpu_init+0x88>)
    3772:	f00d fdc9 	bl	11308 <assert_post_action>
	return 0;
    3776:	2000      	movs	r0, #0
    3778:	e7dc      	b.n	3734 <arm_mpu_init+0x30>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    377a:	6871      	ldr	r1, [r6, #4]
    377c:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    3780:	f7ff fec2 	bl	3508 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3784:	3001      	adds	r0, #1
    3786:	e7dc      	b.n	3742 <arm_mpu_init+0x3e>
    3788:	00015948 	.word	0x00015948
    378c:	00017183 	.word	0x00017183
    3790:	00019ede 	.word	0x00019ede
    3794:	00016493 	.word	0x00016493
    3798:	000171c3 	.word	0x000171c3
    379c:	e000ed90 	.word	0xe000ed90
    37a0:	0044ffaa 	.word	0x0044ffaa
    37a4:	20001f0f 	.word	0x20001f0f
    37a8:	000171f7 	.word	0x000171f7
    37ac:	00017248 	.word	0x00017248

000037b0 <arm_core_mpu_configure_static_mpu_regions>:
{
    37b0:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    37b2:	4d0d      	ldr	r5, [pc, #52]	; (37e8 <arm_core_mpu_configure_static_mpu_regions+0x38>)
    37b4:	460c      	mov	r4, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    37b6:	782a      	ldrb	r2, [r5, #0]
    37b8:	f7ff fee6 	bl	3588 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    37bc:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    37be:	3016      	adds	r0, #22
    37c0:	d111      	bne.n	37e6 <arm_core_mpu_configure_static_mpu_regions+0x36>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    37c2:	f44f 7381 	mov.w	r3, #258	; 0x102
    37c6:	4a09      	ldr	r2, [pc, #36]	; (37ec <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    37c8:	4909      	ldr	r1, [pc, #36]	; (37f0 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    37ca:	480a      	ldr	r0, [pc, #40]	; (37f4 <arm_core_mpu_configure_static_mpu_regions+0x44>)
    37cc:	f00d fb06 	bl	10ddc <printk>
    37d0:	4621      	mov	r1, r4
    37d2:	4809      	ldr	r0, [pc, #36]	; (37f8 <arm_core_mpu_configure_static_mpu_regions+0x48>)
    37d4:	f00d fb02 	bl	10ddc <printk>
}
    37d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    37dc:	f44f 7181 	mov.w	r1, #258	; 0x102
    37e0:	4802      	ldr	r0, [pc, #8]	; (37ec <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    37e2:	f00d bd91 	b.w	11308 <assert_post_action>
}
    37e6:	bd38      	pop	{r3, r4, r5, pc}
    37e8:	20001f0f 	.word	0x20001f0f
    37ec:	00017183 	.word	0x00017183
    37f0:	00019ede 	.word	0x00019ede
    37f4:	00016493 	.word	0x00016493
    37f8:	00017269 	.word	0x00017269

000037fc <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    37fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3800:	4e2f      	ldr	r6, [pc, #188]	; (38c0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
    3802:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    3804:	4605      	mov	r5, r0
    3806:	f04f 0800 	mov.w	r8, #0
    380a:	46b3      	mov	fp, r6
	MPU->RNR = index;
    380c:	4f2d      	ldr	r7, [pc, #180]	; (38c4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    380e:	45c8      	cmp	r8, r9
    3810:	db02      	blt.n	3818 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
}
    3812:	b003      	add	sp, #12
    3814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
    3818:	f8d5 a004 	ldr.w	sl, [r5, #4]
    381c:	f1ba 0f00 	cmp.w	sl, #0
    3820:	d049      	beq.n	38b6 <arm_core_mpu_mark_areas_for_dynamic_regions+0xba>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    3822:	6829      	ldr	r1, [r5, #0]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    3824:	4608      	mov	r0, r1
    3826:	9101      	str	r1, [sp, #4]
    3828:	f00e fbcb 	bl	11fc2 <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    382c:	9901      	ldr	r1, [sp, #4]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    382e:	4604      	mov	r4, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    3830:	eb0a 0001 	add.w	r0, sl, r1
    3834:	3801      	subs	r0, #1
    3836:	f00e fbc4 	bl	11fc2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    383a:	4284      	cmp	r4, r0
    383c:	f04f 0214 	mov.w	r2, #20
    3840:	4b21      	ldr	r3, [pc, #132]	; (38c8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
    3842:	d018      	beq.n	3876 <arm_core_mpu_mark_areas_for_dynamic_regions+0x7a>
		dyn_reg_info[i].index =
    3844:	f06f 0315 	mvn.w	r3, #21
    3848:	fb02 f808 	mul.w	r8, r2, r8
    384c:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    3850:	f44f 7389 	mov.w	r3, #274	; 0x112
    3854:	4a1d      	ldr	r2, [pc, #116]	; (38cc <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
    3856:	491e      	ldr	r1, [pc, #120]	; (38d0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
    3858:	481e      	ldr	r0, [pc, #120]	; (38d4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
    385a:	f00d fabf 	bl	10ddc <printk>
    385e:	4649      	mov	r1, r9
    3860:	481d      	ldr	r0, [pc, #116]	; (38d8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xdc>)
    3862:	f00d fabb 	bl	10ddc <printk>
    3866:	f44f 7189 	mov.w	r1, #274	; 0x112
    386a:	4818      	ldr	r0, [pc, #96]	; (38cc <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
}
    386c:	b003      	add	sp, #12
    386e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    3872:	f00d bd49 	b.w	11308 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    3876:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    387a:	6034      	str	r4, [r6, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    387c:	d0e8      	beq.n	3850 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    387e:	7819      	ldrb	r1, [r3, #0]
    3880:	42a1      	cmp	r1, r4
    3882:	dde5      	ble.n	3850 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
    3884:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    3888:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
    388a:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
    388c:	68fc      	ldr	r4, [r7, #12]
    388e:	f100 0108 	add.w	r1, r0, #8
    3892:	7b00      	ldrb	r0, [r0, #12]
    3894:	f364 0004 	bfi	r0, r4, #0, #5
    3898:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    389a:	6938      	ldr	r0, [r7, #16]
    389c:	790c      	ldrb	r4, [r1, #4]
    389e:	0840      	lsrs	r0, r0, #1
    38a0:	f360 1447 	bfi	r4, r0, #5, #3
    38a4:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    38a6:	68f9      	ldr	r1, [r7, #12]
    38a8:	f021 011f 	bic.w	r1, r1, #31
    38ac:	6071      	str	r1, [r6, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    38ae:	6939      	ldr	r1, [r7, #16]
    38b0:	f021 011f 	bic.w	r1, r1, #31
    38b4:	6131      	str	r1, [r6, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    38b6:	f108 0801 	add.w	r8, r8, #1
    38ba:	3614      	adds	r6, #20
    38bc:	350c      	adds	r5, #12
    38be:	e7a6      	b.n	380e <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    38c0:	20000c10 	.word	0x20000c10
    38c4:	e000ed90 	.word	0xe000ed90
    38c8:	20001f0f 	.word	0x20001f0f
    38cc:	00017183 	.word	0x00017183
    38d0:	00019ede 	.word	0x00019ede
    38d4:	00016493 	.word	0x00016493
    38d8:	00017295 	.word	0x00017295

000038dc <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    38dc:	4b01      	ldr	r3, [pc, #4]	; (38e4 <__stdout_hook_install+0x8>)
    38de:	6018      	str	r0, [r3, #0]
}
    38e0:	4770      	bx	lr
    38e2:	bf00      	nop
    38e4:	200001ec 	.word	0x200001ec

000038e8 <remoteproc_mgr_boot>:
{
	/* UARTE */
	/* Assign specific GPIOs that will be used to get UARTE from
	 * nRF5340 Network MCU.
	 */
	NRF_P0->PIN_CNF[CPUNET_UARTE_PIN_TX] =
    38e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	NRF_SPU->EXTDOMAIN[0].PERM = 1 << 4;
}
#endif /* !CONFIG_TRUSTED_EXECUTION_NONSECURE */

static int remoteproc_mgr_boot(struct device *dev)
{
    38ec:	b508      	push	{r3, lr}
	NRF_P0->PIN_CNF[CPUNET_UARTE_PIN_TX] =
    38ee:	4b0c      	ldr	r3, [pc, #48]	; (3920 <remoteproc_mgr_boot+0x38>)

	/* Initialize inter-processor shared memory block to zero. It is
	 * assumed that the application image has access to the shared
	 * memory at this point (see #24147).
	 */
	memset((void *) SHM_BASE_ADDRESS, 0, SHM_SIZE);
    38f0:	2100      	movs	r1, #0
	NRF_P0->PIN_CNF[CPUNET_UARTE_PIN_TX] =
    38f2:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
	NRF_P0->PIN_CNF[CPUNET_UARTE_PIN_RX] =
    38f6:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
	NRF_P0->PIN_CNF[CPUNET_UARTE_PIN_RTS] =
    38fa:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	NRF_P0->PIN_CNF[CPUNET_UARTE_PIN_CTS] =
    38fe:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	NRF_SPU->EXTDOMAIN[0].PERM = 1 << 4;
    3902:	2210      	movs	r2, #16
    3904:	4b07      	ldr	r3, [pc, #28]	; (3924 <remoteproc_mgr_boot+0x3c>)
	memset((void *) SHM_BASE_ADDRESS, 0, SHM_SIZE);
    3906:	4808      	ldr	r0, [pc, #32]	; (3928 <remoteproc_mgr_boot+0x40>)
	NRF_SPU->EXTDOMAIN[0].PERM = 1 << 4;
    3908:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
	memset((void *) SHM_BASE_ADDRESS, 0, SHM_SIZE);
    390c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3910:	f00e fc50 	bl	121b4 <memset>
#endif

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
    3914:	2000      	movs	r0, #0
    3916:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    391a:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");

	return 0;
}
    391e:	bd08      	pop	{r3, pc}
    3920:	50842500 	.word	0x50842500
    3924:	50003000 	.word	0x50003000
    3928:	20070000 	.word	0x20070000

0000392c <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const u8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    392c:	4b0e      	ldr	r3, [pc, #56]	; (3968 <bt_hex_real+0x3c>)
    392e:	2940      	cmp	r1, #64	; 0x40
    3930:	bf28      	it	cs
    3932:	2140      	movcs	r1, #64	; 0x40
{
    3934:	b570      	push	{r4, r5, r6, lr}
    3936:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    3938:	4c0c      	ldr	r4, [pc, #48]	; (396c <bt_hex_real+0x40>)
    393a:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
    393c:	42b0      	cmp	r0, r6
    393e:	f103 0302 	add.w	r3, r3, #2
    3942:	d104      	bne.n	394e <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    3944:	2300      	movs	r3, #0
    3946:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    394a:	4807      	ldr	r0, [pc, #28]	; (3968 <bt_hex_real+0x3c>)
    394c:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    394e:	7802      	ldrb	r2, [r0, #0]
    3950:	0912      	lsrs	r2, r2, #4
    3952:	5ca2      	ldrb	r2, [r4, r2]
    3954:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    3958:	f810 2b01 	ldrb.w	r2, [r0], #1
    395c:	f002 020f 	and.w	r2, r2, #15
    3960:	5ca2      	ldrb	r2, [r4, r2]
    3962:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    3966:	e7e9      	b.n	393c <bt_hex_real+0x10>
    3968:	20001f10 	.word	0x20001f10
    396c:	000172ed 	.word	0x000172ed

00003970 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    3970:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
    3972:	7803      	ldrb	r3, [r0, #0]
    3974:	b08b      	sub	sp, #44	; 0x2c
    3976:	4604      	mov	r4, r0
    3978:	ad07      	add	r5, sp, #28
    397a:	2b03      	cmp	r3, #3
    397c:	d821      	bhi.n	39c2 <bt_addr_le_str_real+0x52>
    397e:	e8df f003 	tbb	[pc, r3]
    3982:	1a02      	.short	0x1a02
    3984:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    3986:	4912      	ldr	r1, [pc, #72]	; (39d0 <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
    3988:	4628      	mov	r0, r5
    398a:	f00e fb99 	bl	120c0 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    398e:	7863      	ldrb	r3, [r4, #1]
    3990:	211e      	movs	r1, #30
    3992:	9304      	str	r3, [sp, #16]
    3994:	78a3      	ldrb	r3, [r4, #2]
    3996:	4a0f      	ldr	r2, [pc, #60]	; (39d4 <bt_addr_le_str_real+0x64>)
    3998:	9303      	str	r3, [sp, #12]
    399a:	78e3      	ldrb	r3, [r4, #3]
    399c:	9505      	str	r5, [sp, #20]
    399e:	9302      	str	r3, [sp, #8]
    39a0:	7923      	ldrb	r3, [r4, #4]
    39a2:	480d      	ldr	r0, [pc, #52]	; (39d8 <bt_addr_le_str_real+0x68>)
    39a4:	9301      	str	r3, [sp, #4]
    39a6:	7963      	ldrb	r3, [r4, #5]
    39a8:	9300      	str	r3, [sp, #0]
    39aa:	79a3      	ldrb	r3, [r4, #6]
    39ac:	f00d fa23 	bl	10df6 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    39b0:	4809      	ldr	r0, [pc, #36]	; (39d8 <bt_addr_le_str_real+0x68>)
    39b2:	b00b      	add	sp, #44	; 0x2c
    39b4:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    39b6:	4909      	ldr	r1, [pc, #36]	; (39dc <bt_addr_le_str_real+0x6c>)
    39b8:	e7e6      	b.n	3988 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    39ba:	4909      	ldr	r1, [pc, #36]	; (39e0 <bt_addr_le_str_real+0x70>)
    39bc:	e7e4      	b.n	3988 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    39be:	4909      	ldr	r1, [pc, #36]	; (39e4 <bt_addr_le_str_real+0x74>)
    39c0:	e7e2      	b.n	3988 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    39c2:	210a      	movs	r1, #10
    39c4:	4628      	mov	r0, r5
    39c6:	4a08      	ldr	r2, [pc, #32]	; (39e8 <bt_addr_le_str_real+0x78>)
    39c8:	f00d fa15 	bl	10df6 <snprintk>
		break;
    39cc:	e7df      	b.n	398e <bt_addr_le_str_real+0x1e>
    39ce:	bf00      	nop
    39d0:	00015f94 	.word	0x00015f94
    39d4:	00015fbd 	.word	0x00015fbd
    39d8:	20001f91 	.word	0x20001f91
    39dc:	00015f9b 	.word	0x00015f9b
    39e0:	00015fa2 	.word	0x00015fa2
    39e4:	00015fac 	.word	0x00015fac
    39e8:	00015fb6 	.word	0x00015fb6

000039ec <save_id>:
#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
	int err;
	BT_INFO("Saving ID");
    39ec:	2149      	movs	r1, #73	; 0x49
{
    39ee:	b508      	push	{r3, lr}
	BT_INFO("Saving ID");
    39f0:	4809      	ldr	r0, [pc, #36]	; (3a18 <save_id+0x2c>)
    39f2:	f00d f9f3 	bl	10ddc <printk>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
    39f6:	4909      	ldr	r1, [pc, #36]	; (3a1c <save_id+0x30>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
    39f8:	4809      	ldr	r0, [pc, #36]	; (3a20 <save_id+0x34>)
    39fa:	79ca      	ldrb	r2, [r1, #7]
    39fc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    3a00:	f7fe f882 	bl	1b08 <settings_save_one>
	if (err) {
    3a04:	4602      	mov	r2, r0
    3a06:	b128      	cbz	r0, 3a14 <save_id+0x28>
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
    3a08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save ID (err %d)", err);
    3a0c:	2145      	movs	r1, #69	; 0x45
    3a0e:	4805      	ldr	r0, [pc, #20]	; (3a24 <save_id+0x38>)
    3a10:	f00d b9e4 	b.w	10ddc <printk>
}
    3a14:	bd08      	pop	{r3, pc}
    3a16:	bf00      	nop
    3a18:	00017305 	.word	0x00017305
    3a1c:	20000000 	.word	0x20000000
    3a20:	00017314 	.word	0x00017314
    3a24:	0001731a 	.word	0x0001731a

00003a28 <set>:
{
    3a28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3a2a:	4616      	mov	r6, r2
    3a2c:	461f      	mov	r7, r3
	if (!name) {
    3a2e:	4604      	mov	r4, r0
    3a30:	b930      	cbnz	r0, 3a40 <set+0x18>
		BT_ERR("Insufficient number of arguments");
    3a32:	2145      	movs	r1, #69	; 0x45
    3a34:	4819      	ldr	r0, [pc, #100]	; (3a9c <set+0x74>)
    3a36:	f00d f9d1 	bl	10ddc <printk>
	return -ENOENT;
    3a3a:	f06f 0401 	mvn.w	r4, #1
    3a3e:	e013      	b.n	3a68 <set+0x40>
	len = settings_name_next(name, &next);
    3a40:	a901      	add	r1, sp, #4
    3a42:	f00d fdc1 	bl	115c8 <settings_name_next>
	if (!strncmp(name, "id", len)) {
    3a46:	4916      	ldr	r1, [pc, #88]	; (3aa0 <set+0x78>)
	len = settings_name_next(name, &next);
    3a48:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
    3a4a:	4620      	mov	r0, r4
    3a4c:	f00e fb68 	bl	12120 <strncmp>
    3a50:	4604      	mov	r4, r0
    3a52:	2800      	cmp	r0, #0
    3a54:	d1f1      	bne.n	3a3a <set+0x12>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3a56:	4d13      	ldr	r5, [pc, #76]	; (3aa4 <set+0x7c>)
    3a58:	e8d5 3faf 	lda	r3, [r5]
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
    3a5c:	075b      	lsls	r3, r3, #29
    3a5e:	d506      	bpl.n	3a6e <set+0x46>
			BT_WARN("Ignoring identities stored in flash");
    3a60:	2157      	movs	r1, #87	; 0x57
    3a62:	4811      	ldr	r0, [pc, #68]	; (3aa8 <set+0x80>)
    3a64:	f00d f9ba 	bl	10ddc <printk>
}
    3a68:	4620      	mov	r0, r4
    3a6a:	b003      	add	sp, #12
    3a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
    3a6e:	3d98      	subs	r5, #152	; 0x98
    3a70:	2207      	movs	r2, #7
    3a72:	4629      	mov	r1, r5
    3a74:	4638      	mov	r0, r7
    3a76:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
    3a78:	2806      	cmp	r0, #6
    3a7a:	d80a      	bhi.n	3a92 <set+0x6a>
				BT_ERR("Invalid length ID address in storage");
    3a7c:	2145      	movs	r1, #69	; 0x45
    3a7e:	480b      	ldr	r0, [pc, #44]	; (3aac <set+0x84>)
    3a80:	f00d f9ac 	bl	10ddc <printk>
			(void)memset(bt_dev.id_addr, 0,
    3a84:	2207      	movs	r2, #7
    3a86:	4621      	mov	r1, r4
    3a88:	4628      	mov	r0, r5
    3a8a:	f00e fb93 	bl	121b4 <memset>
			bt_dev.id_count = 0U;
    3a8e:	71ec      	strb	r4, [r5, #7]
    3a90:	e7ea      	b.n	3a68 <set+0x40>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
    3a92:	2307      	movs	r3, #7
    3a94:	fbb0 f0f3 	udiv	r0, r0, r3
    3a98:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
    3a9a:	e7e5      	b.n	3a68 <set+0x40>
    3a9c:	0001733a 	.word	0x0001733a
    3aa0:	00015fa9 	.word	0x00015fa9
    3aa4:	20000098 	.word	0x20000098
    3aa8:	00017360 	.word	0x00017360
    3aac:	00017389 	.word	0x00017389

00003ab0 <bt_settings_encode_key>:
{
    3ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ab4:	b088      	sub	sp, #32
    3ab6:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    3aba:	799c      	ldrb	r4, [r3, #6]
    3abc:	795d      	ldrb	r5, [r3, #5]
    3abe:	791e      	ldrb	r6, [r3, #4]
    3ac0:	78df      	ldrb	r7, [r3, #3]
    3ac2:	f893 c002 	ldrb.w	ip, [r3, #2]
    3ac6:	f893 e001 	ldrb.w	lr, [r3, #1]
    3aca:	781b      	ldrb	r3, [r3, #0]
	if (key) {
    3acc:	f1b8 0f00 	cmp.w	r8, #0
    3ad0:	d00e      	beq.n	3af0 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
    3ad2:	e9cd 3806 	strd	r3, r8, [sp, #24]
    3ad6:	e9cd ce04 	strd	ip, lr, [sp, #16]
    3ada:	4613      	mov	r3, r2
    3adc:	e9cd 6702 	strd	r6, r7, [sp, #8]
    3ae0:	e9cd 4500 	strd	r4, r5, [sp]
    3ae4:	4a08      	ldr	r2, [pc, #32]	; (3b08 <bt_settings_encode_key+0x58>)
    3ae6:	f00d f986 	bl	10df6 <snprintk>
}
    3aea:	b008      	add	sp, #32
    3aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
    3af0:	e9cd e305 	strd	lr, r3, [sp, #20]
    3af4:	e9cd 7c03 	strd	r7, ip, [sp, #12]
    3af8:	4613      	mov	r3, r2
    3afa:	e9cd 5601 	strd	r5, r6, [sp, #4]
    3afe:	4a03      	ldr	r2, [pc, #12]	; (3b0c <bt_settings_encode_key+0x5c>)
    3b00:	9400      	str	r4, [sp, #0]
    3b02:	f00d f978 	bl	10df6 <snprintk>
}
    3b06:	e7f0      	b.n	3aea <bt_settings_encode_key+0x3a>
    3b08:	000173b3 	.word	0x000173b3
    3b0c:	000173d7 	.word	0x000173d7

00003b10 <bt_settings_save_id>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3b10:	4907      	ldr	r1, [pc, #28]	; (3b30 <bt_settings_save_id+0x20>)
    3b12:	e8d1 3fef 	ldaex	r3, [r1]
    3b16:	f043 0201 	orr.w	r2, r3, #1
    3b1a:	e8c1 2fe0 	stlex	r0, r2, [r1]
    3b1e:	2800      	cmp	r0, #0
    3b20:	d1f7      	bne.n	3b12 <bt_settings_save_id+0x2>
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    3b22:	07db      	lsls	r3, r3, #31
    3b24:	d403      	bmi.n	3b2e <bt_settings_save_id+0x1e>
		k_queue_append(&work_q->queue, work);
    3b26:	4803      	ldr	r0, [pc, #12]	; (3b34 <bt_settings_save_id+0x24>)
    3b28:	3908      	subs	r1, #8
    3b2a:	f011 ba5c 	b.w	14fe6 <k_queue_append>
K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
}
    3b2e:	4770      	bx	lr
    3b30:	200001f8 	.word	0x200001f8
    3b34:	20001e54 	.word	0x20001e54

00003b38 <commit>:

static int commit(void)
{
    3b38:	b538      	push	{r3, r4, r5, lr}
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
    3b3a:	4c13      	ldr	r4, [pc, #76]	; (3b88 <commit+0x50>)
    3b3c:	79e3      	ldrb	r3, [r4, #7]
    3b3e:	b96b      	cbnz	r3, 3b5c <commit+0x24>
		bt_setup_public_id_addr();
    3b40:	f001 fca2 	bl	5488 <bt_setup_public_id_addr>
	}

	if (!bt_dev.id_count) {
    3b44:	79e3      	ldrb	r3, [r4, #7]
    3b46:	b94b      	cbnz	r3, 3b5c <commit+0x24>
		int err;

		err = bt_setup_random_id_addr();
    3b48:	f001 fd2a 	bl	55a0 <bt_setup_random_id_addr>
		if (err) {
    3b4c:	4604      	mov	r4, r0
    3b4e:	b128      	cbz	r0, 3b5c <commit+0x24>
			BT_ERR("Unable to setup an identity address");
    3b50:	2145      	movs	r1, #69	; 0x45
    3b52:	480e      	ldr	r0, [pc, #56]	; (3b8c <commit+0x54>)
    3b54:	f00d f942 	bl	10ddc <printk>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
    3b58:	4620      	mov	r0, r4
    3b5a:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3b5c:	4d0c      	ldr	r5, [pc, #48]	; (3b90 <commit+0x58>)
    3b5e:	e8d5 3faf 	lda	r3, [r5]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    3b62:	079b      	lsls	r3, r3, #30
    3b64:	d401      	bmi.n	3b6a <commit+0x32>
		bt_finalize_init();
    3b66:	f001 fbb7 	bl	52d8 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3b6a:	e8d5 4fef 	ldaex	r4, [r5]
    3b6e:	f424 4300 	bic.w	r3, r4, #32768	; 0x8000
    3b72:	e8c5 3fe2 	stlex	r2, r3, [r5]
    3b76:	2a00      	cmp	r2, #0
    3b78:	d1f7      	bne.n	3b6a <commit+0x32>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
    3b7a:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
    3b7e:	d0eb      	beq.n	3b58 <commit+0x20>
		bt_settings_save_id();
    3b80:	f7ff ffc6 	bl	3b10 <bt_settings_save_id>
	return 0;
    3b84:	2400      	movs	r4, #0
    3b86:	e7e7      	b.n	3b58 <commit+0x20>
    3b88:	20000000 	.word	0x20000000
    3b8c:	000173f8 	.word	0x000173f8
    3b90:	20000098 	.word	0x20000098

00003b94 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
    3b94:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
    3b96:	f7fe f941 	bl	1e1c <settings_subsys_init>
	if (err) {
    3b9a:	4604      	mov	r4, r0
    3b9c:	b120      	cbz	r0, 3ba8 <bt_settings_init+0x14>
		BT_ERR("settings_subsys_init failed (err %d)", err);
    3b9e:	4602      	mov	r2, r0
    3ba0:	2145      	movs	r1, #69	; 0x45
    3ba2:	4802      	ldr	r0, [pc, #8]	; (3bac <bt_settings_init+0x18>)
    3ba4:	f00d f91a 	bl	10ddc <printk>
		return err;
	}

	return 0;
}
    3ba8:	4620      	mov	r0, r4
    3baa:	bd10      	pop	{r4, pc}
    3bac:	00017421 	.word	0x00017421

00003bb0 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    3bb0:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    3bb2:	7802      	ldrb	r2, [r0, #0]
{
    3bb4:	4604      	mov	r4, r0
	switch (src->type) {
    3bb6:	2a01      	cmp	r2, #1
{
    3bb8:	460b      	mov	r3, r1
	switch (src->type) {
    3bba:	d016      	beq.n	3bea <uuid_to_uuid128+0x3a>
    3bbc:	2a02      	cmp	r2, #2
    3bbe:	d02c      	beq.n	3c1a <uuid_to_uuid128+0x6a>
    3bc0:	b98a      	cbnz	r2, 3be6 <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    3bc2:	460d      	mov	r5, r1
    3bc4:	4a18      	ldr	r2, [pc, #96]	; (3c28 <uuid_to_uuid128+0x78>)
    3bc6:	f102 0710 	add.w	r7, r2, #16
    3bca:	462e      	mov	r6, r5
    3bcc:	6810      	ldr	r0, [r2, #0]
    3bce:	6851      	ldr	r1, [r2, #4]
    3bd0:	3208      	adds	r2, #8
    3bd2:	c603      	stmia	r6!, {r0, r1}
    3bd4:	42ba      	cmp	r2, r7
    3bd6:	4635      	mov	r5, r6
    3bd8:	d1f7      	bne.n	3bca <uuid_to_uuid128+0x1a>
    3bda:	7812      	ldrb	r2, [r2, #0]
    3bdc:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    3bde:	8862      	ldrh	r2, [r4, #2]
	dst[0] = val;
    3be0:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    3be2:	0a12      	lsrs	r2, r2, #8
    3be4:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    3be6:	bcf0      	pop	{r4, r5, r6, r7}
    3be8:	4770      	bx	lr
		*dst = uuid128_base;
    3bea:	460d      	mov	r5, r1
    3bec:	4a0e      	ldr	r2, [pc, #56]	; (3c28 <uuid_to_uuid128+0x78>)
    3bee:	f102 0710 	add.w	r7, r2, #16
    3bf2:	462e      	mov	r6, r5
    3bf4:	6810      	ldr	r0, [r2, #0]
    3bf6:	6851      	ldr	r1, [r2, #4]
    3bf8:	3208      	adds	r2, #8
    3bfa:	c603      	stmia	r6!, {r0, r1}
    3bfc:	42ba      	cmp	r2, r7
    3bfe:	4635      	mov	r5, r6
    3c00:	d1f7      	bne.n	3bf2 <uuid_to_uuid128+0x42>
    3c02:	7812      	ldrb	r2, [r2, #0]
    3c04:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    3c06:	6862      	ldr	r2, [r4, #4]
    3c08:	f3c2 2107 	ubfx	r1, r2, #8, #8
	dst[0] = val;
    3c0c:	735a      	strb	r2, [r3, #13]
	sys_put_le16(val >> 16, &dst[2]);
    3c0e:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    3c10:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    3c12:	0a12      	lsrs	r2, r2, #8
    3c14:	7399      	strb	r1, [r3, #14]
    3c16:	741a      	strb	r2, [r3, #16]
}
    3c18:	e7e5      	b.n	3be6 <uuid_to_uuid128+0x36>
		memcpy(dst, src, sizeof(*dst));
    3c1a:	4601      	mov	r1, r0
}
    3c1c:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    3c1e:	2211      	movs	r2, #17
    3c20:	4618      	mov	r0, r3
    3c22:	f00e ba9c 	b.w	1215e <memcpy>
    3c26:	bf00      	nop
    3c28:	0001745a 	.word	0x0001745a

00003c2c <le_dhkey_complete>:
{
    3c2c:	b510      	push	{r4, lr}
	if (dh_key_cb) {
    3c2e:	4c06      	ldr	r4, [pc, #24]	; (3c48 <le_dhkey_complete+0x1c>)
    3c30:	6822      	ldr	r2, [r4, #0]
    3c32:	b132      	cbz	r2, 3c42 <le_dhkey_complete+0x16>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    3c34:	6880      	ldr	r0, [r0, #8]
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    3c36:	7803      	ldrb	r3, [r0, #0]
    3c38:	b923      	cbnz	r3, 3c44 <le_dhkey_complete+0x18>
    3c3a:	3001      	adds	r0, #1
    3c3c:	4790      	blx	r2
		dh_key_cb = NULL;
    3c3e:	2300      	movs	r3, #0
    3c40:	6023      	str	r3, [r4, #0]
}
    3c42:	bd10      	pop	{r4, pc}
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    3c44:	2000      	movs	r0, #0
    3c46:	e7f9      	b.n	3c3c <le_dhkey_complete+0x10>
    3c48:	20000c3c 	.word	0x20000c3c

00003c4c <hci_data_buf_overflow>:
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    3c4c:	6883      	ldr	r3, [r0, #8]
    3c4e:	2157      	movs	r1, #87	; 0x57
    3c50:	781a      	ldrb	r2, [r3, #0]
    3c52:	4801      	ldr	r0, [pc, #4]	; (3c58 <hci_data_buf_overflow+0xc>)
    3c54:	f00d b8c2 	b.w	10ddc <printk>
    3c58:	0001746b 	.word	0x0001746b

00003c5c <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    3c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c5e:	4606      	mov	r6, r0
	u8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    3c60:	2500      	movs	r5, #0
    3c62:	4f09      	ldr	r7, [pc, #36]	; (3c88 <id_find+0x2c>)
    3c64:	79fb      	ldrb	r3, [r7, #7]
    3c66:	b2ec      	uxtb	r4, r5
    3c68:	42a3      	cmp	r3, r4
    3c6a:	d802      	bhi.n	3c72 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    3c6c:	f06f 0401 	mvn.w	r4, #1
    3c70:	e008      	b.n	3c84 <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    3c72:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    3c76:	4630      	mov	r0, r6
    3c78:	4439      	add	r1, r7
    3c7a:	f00e fb80 	bl	1237e <bt_addr_le_cmp>
    3c7e:	3501      	adds	r5, #1
    3c80:	2800      	cmp	r0, #0
    3c82:	d1ef      	bne.n	3c64 <id_find+0x8>
}
    3c84:	4620      	mov	r0, r4
    3c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3c88:	20000000 	.word	0x20000000

00003c8c <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    3c8c:	6843      	ldr	r3, [r0, #4]
{
    3c8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    3c90:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    3c92:	0558      	lsls	r0, r3, #21
    3c94:	d408      	bmi.n	3ca8 <valid_adv_param+0x1c>
		return false;
	}

	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    3c96:	6922      	ldr	r2, [r4, #16]
    3c98:	b10a      	cbz	r2, 3c9e <valid_adv_param+0x12>
    3c9a:	07d9      	lsls	r1, r3, #31
    3c9c:	d504      	bpl.n	3ca8 <valid_adv_param+0x1c>
	if (param->id >= bt_dev.id_count ||
    3c9e:	4d16      	ldr	r5, [pc, #88]	; (3cf8 <valid_adv_param+0x6c>)
    3ca0:	7820      	ldrb	r0, [r4, #0]
    3ca2:	79eb      	ldrb	r3, [r5, #7]
    3ca4:	4283      	cmp	r3, r0
    3ca6:	d802      	bhi.n	3cae <valid_adv_param+0x22>
			return false;
    3ca8:	2000      	movs	r0, #0
		return false;
	}

	return valid_adv_ext_param(param);
}
    3caa:	b003      	add	sp, #12
    3cac:	bd30      	pop	{r4, r5, pc}
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    3cae:	2300      	movs	r3, #0
    3cb0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    3cb4:	4669      	mov	r1, sp
    3cb6:	4428      	add	r0, r5
    3cb8:	9300      	str	r3, [sp, #0]
    3cba:	f8cd 3003 	str.w	r3, [sp, #3]
    3cbe:	f00e fb5e 	bl	1237e <bt_addr_le_cmp>
	if (param->id >= bt_dev.id_count ||
    3cc2:	2800      	cmp	r0, #0
    3cc4:	d0f0      	beq.n	3ca8 <valid_adv_param+0x1c>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    3cc6:	6863      	ldr	r3, [r4, #4]
    3cc8:	07da      	lsls	r2, r3, #31
    3cca:	d406      	bmi.n	3cda <valid_adv_param+0x4e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    3ccc:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
    3cd0:	2a08      	cmp	r2, #8
    3cd2:	d802      	bhi.n	3cda <valid_adv_param+0x4e>
    3cd4:	68a2      	ldr	r2, [r4, #8]
    3cd6:	2a9f      	cmp	r2, #159	; 0x9f
    3cd8:	d9e6      	bls.n	3ca8 <valid_adv_param+0x1c>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    3cda:	06db      	lsls	r3, r3, #27
    3cdc:	d401      	bmi.n	3ce2 <valid_adv_param+0x56>
    3cde:	6923      	ldr	r3, [r4, #16]
    3ce0:	b943      	cbnz	r3, 3cf4 <valid_adv_param+0x68>
		if (param->interval_min > param->interval_max ||
    3ce2:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    3ce6:	429a      	cmp	r2, r3
    3ce8:	d8de      	bhi.n	3ca8 <valid_adv_param+0x1c>
    3cea:	2a1f      	cmp	r2, #31
    3cec:	d9dc      	bls.n	3ca8 <valid_adv_param+0x1c>
		    param->interval_min < 0x0020 ||
    3cee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    3cf2:	d8d9      	bhi.n	3ca8 <valid_adv_param+0x1c>
	return true;
    3cf4:	2001      	movs	r0, #1
    3cf6:	e7d8      	b.n	3caa <valid_adv_param+0x1e>
    3cf8:	20000000 	.word	0x20000000

00003cfc <le_pkey_complete>:
{
    3cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    3cfe:	6886      	ldr	r6, [r0, #8]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3d00:	f06f 0110 	mvn.w	r1, #16
    3d04:	480e      	ldr	r0, [pc, #56]	; (3d40 <le_pkey_complete+0x44>)
    3d06:	f00e fb3d 	bl	12384 <atomic_and>
	if (!evt->status) {
    3d0a:	7833      	ldrb	r3, [r6, #0]
    3d0c:	b943      	cbnz	r3, 3d20 <le_pkey_complete+0x24>
		memcpy(pub_key, evt->key, 64);
    3d0e:	1c71      	adds	r1, r6, #1
    3d10:	2240      	movs	r2, #64	; 0x40
    3d12:	480c      	ldr	r0, [pc, #48]	; (3d44 <le_pkey_complete+0x48>)
    3d14:	f00e fa23 	bl	1215e <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    3d18:	2108      	movs	r1, #8
    3d1a:	4809      	ldr	r0, [pc, #36]	; (3d40 <le_pkey_complete+0x44>)
    3d1c:	f00e fb24 	bl	12368 <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3d20:	4d09      	ldr	r5, [pc, #36]	; (3d48 <le_pkey_complete+0x4c>)
		cb->func(evt->status ? NULL : pub_key);
    3d22:	4f08      	ldr	r7, [pc, #32]	; (3d44 <le_pkey_complete+0x48>)
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3d24:	682c      	ldr	r4, [r5, #0]
    3d26:	b90c      	cbnz	r4, 3d2c <le_pkey_complete+0x30>
	pub_key_cb = NULL;
    3d28:	602c      	str	r4, [r5, #0]
}
    3d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->func(evt->status ? NULL : pub_key);
    3d2c:	7832      	ldrb	r2, [r6, #0]
    3d2e:	6823      	ldr	r3, [r4, #0]
    3d30:	2a00      	cmp	r2, #0
    3d32:	bf0c      	ite	eq
    3d34:	4638      	moveq	r0, r7
    3d36:	2000      	movne	r0, #0
    3d38:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3d3a:	6864      	ldr	r4, [r4, #4]
    3d3c:	e7f3      	b.n	3d26 <le_pkey_complete+0x2a>
    3d3e:	bf00      	nop
    3d40:	20000098 	.word	0x20000098
    3d44:	20001faf 	.word	0x20001faf
    3d48:	20000c40 	.word	0x20000c40

00003d4c <le_data_len_change>:
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3d4c:	6883      	ldr	r3, [r0, #8]
{
    3d4e:	b510      	push	{r4, lr}
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3d50:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    3d52:	4620      	mov	r0, r4
    3d54:	f002 fb36 	bl	63c4 <bt_conn_lookup_handle>
	if (!conn) {
    3d58:	b930      	cbnz	r0, 3d68 <le_data_len_change+0x1c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3d5a:	4622      	mov	r2, r4
}
    3d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3d60:	2145      	movs	r1, #69	; 0x45
    3d62:	4803      	ldr	r0, [pc, #12]	; (3d70 <le_data_len_change+0x24>)
    3d64:	f00d b83a 	b.w	10ddc <printk>
}
    3d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    3d6c:	f00e bd48 	b.w	12800 <bt_conn_unref>
    3d70:	00017498 	.word	0x00017498

00003d74 <hci_disconn_complete_prio>:
{
    3d74:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    3d76:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    3d78:	781a      	ldrb	r2, [r3, #0]
    3d7a:	b9aa      	cbnz	r2, 3da8 <hci_disconn_complete_prio+0x34>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3d7c:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    3d80:	4628      	mov	r0, r5
    3d82:	f002 fb1f 	bl	63c4 <bt_conn_lookup_handle>
	if (!conn) {
    3d86:	4604      	mov	r4, r0
    3d88:	b930      	cbnz	r0, 3d98 <hci_disconn_complete_prio+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
    3d8a:	462a      	mov	r2, r5
}
    3d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    3d90:	2145      	movs	r1, #69	; 0x45
    3d92:	4806      	ldr	r0, [pc, #24]	; (3dac <hci_disconn_complete_prio+0x38>)
    3d94:	f00d b822 	b.w	10ddc <printk>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    3d98:	2101      	movs	r1, #1
    3d9a:	f002 fb8f 	bl	64bc <bt_conn_set_state>
	bt_conn_unref(conn);
    3d9e:	4620      	mov	r0, r4
}
    3da0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    3da4:	f00e bd2c 	b.w	12800 <bt_conn_unref>
}
    3da8:	bd38      	pop	{r3, r4, r5, pc}
    3daa:	bf00      	nop
    3dac:	000174c1 	.word	0x000174c1

00003db0 <hci_disconn_complete>:
{
    3db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    3db2:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    3db4:	7835      	ldrb	r5, [r6, #0]
    3db6:	b9c5      	cbnz	r5, 3dea <hci_disconn_complete+0x3a>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3db8:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    3dbc:	4638      	mov	r0, r7
    3dbe:	f002 fb01 	bl	63c4 <bt_conn_lookup_handle>
	if (!conn) {
    3dc2:	4604      	mov	r4, r0
    3dc4:	b930      	cbnz	r0, 3dd4 <hci_disconn_complete+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
    3dc6:	463a      	mov	r2, r7
}
    3dc8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    3dcc:	2145      	movs	r1, #69	; 0x45
    3dce:	4807      	ldr	r0, [pc, #28]	; (3dec <hci_disconn_complete+0x3c>)
    3dd0:	f00d b804 	b.w	10ddc <printk>
	conn->err = evt->reason;
    3dd4:	78f3      	ldrb	r3, [r6, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3dd6:	4629      	mov	r1, r5
	conn->err = evt->reason;
    3dd8:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3dda:	f002 fb6f 	bl	64bc <bt_conn_set_state>
		bt_conn_unref(conn);
    3dde:	4620      	mov	r0, r4
	conn->handle = 0U;
    3de0:	8025      	strh	r5, [r4, #0]
}
    3de2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    3de6:	f00e bd0b 	b.w	12800 <bt_conn_unref>
}
    3dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3dec:	000174c1 	.word	0x000174c1

00003df0 <hci_vendor_event>:
		BT_WARN("Unhandled vendor-specific event: %s",
    3df0:	8981      	ldrh	r1, [r0, #12]
{
    3df2:	b508      	push	{r3, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    3df4:	6880      	ldr	r0, [r0, #8]
    3df6:	f7ff fd99 	bl	392c <bt_hex_real>
}
    3dfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    3dfe:	4602      	mov	r2, r0
    3e00:	2157      	movs	r1, #87	; 0x57
    3e02:	4801      	ldr	r0, [pc, #4]	; (3e08 <hci_vendor_event+0x18>)
    3e04:	f00c bfea 	b.w	10ddc <printk>
    3e08:	000174ec 	.word	0x000174ec

00003e0c <le_conn_update_complete>:
{
    3e0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    3e0e:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    3e10:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    3e14:	4630      	mov	r0, r6
    3e16:	f002 fad5 	bl	63c4 <bt_conn_lookup_handle>
	if (!conn) {
    3e1a:	4604      	mov	r4, r0
    3e1c:	b930      	cbnz	r0, 3e2c <le_conn_update_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3e1e:	4632      	mov	r2, r6
    3e20:	2145      	movs	r1, #69	; 0x45
    3e22:	481b      	ldr	r0, [pc, #108]	; (3e90 <le_conn_update_complete+0x84>)
    3e24:	f00c ffda 	bl	10ddc <printk>
}
    3e28:	b002      	add	sp, #8
    3e2a:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
    3e2c:	782b      	ldrb	r3, [r5, #0]
    3e2e:	b9bb      	cbnz	r3, 3e60 <le_conn_update_complete+0x54>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    3e30:	792a      	ldrb	r2, [r5, #4]
    3e32:	78eb      	ldrb	r3, [r5, #3]
    3e34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3e38:	f8a0 3092 	strh.w	r3, [r0, #146]	; 0x92
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    3e3c:	79aa      	ldrb	r2, [r5, #6]
    3e3e:	796b      	ldrb	r3, [r5, #5]
    3e40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3e44:	f8a0 3098 	strh.w	r3, [r0, #152]	; 0x98
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    3e48:	79eb      	ldrb	r3, [r5, #7]
    3e4a:	7a2a      	ldrb	r2, [r5, #8]
    3e4c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3e50:	f8a0 309a 	strh.w	r3, [r0, #154]	; 0x9a
		notify_le_param_updated(conn);
    3e54:	f002 f8f4 	bl	6040 <notify_le_param_updated>
	bt_conn_unref(conn);
    3e58:	4620      	mov	r0, r4
    3e5a:	f00e fcd1 	bl	12800 <bt_conn_unref>
    3e5e:	e7e3      	b.n	3e28 <le_conn_update_complete+0x1c>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    3e60:	2b1a      	cmp	r3, #26
    3e62:	d1f9      	bne.n	3e58 <le_conn_update_complete+0x4c>
    3e64:	78c3      	ldrb	r3, [r0, #3]
    3e66:	2b01      	cmp	r3, #1
    3e68:	d1f6      	bne.n	3e58 <le_conn_update_complete+0x4c>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    3e6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
    3e6e:	3004      	adds	r0, #4
    3e70:	f00e fa7a 	bl	12368 <atomic_or>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    3e74:	0543      	lsls	r3, r0, #21
    3e76:	d4ef      	bmi.n	3e58 <le_conn_update_complete+0x4c>
		param.interval_min = conn->le.interval_min;
    3e78:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
		bt_l2cap_update_conn_param(conn, &param);
    3e7c:	4669      	mov	r1, sp
		param.interval_min = conn->le.interval_min;
    3e7e:	9300      	str	r3, [sp, #0]
		param.latency = conn->le.pending_latency;
    3e80:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
		bt_l2cap_update_conn_param(conn, &param);
    3e84:	4620      	mov	r0, r4
		param.latency = conn->le.pending_latency;
    3e86:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
    3e88:	f00e ff01 	bl	12c8e <bt_l2cap_update_conn_param>
    3e8c:	e7e4      	b.n	3e58 <le_conn_update_complete+0x4c>
    3e8e:	bf00      	nop
    3e90:	00017498 	.word	0x00017498

00003e94 <update_sec_level>:
{
    3e94:	b510      	push	{r4, lr}
	if (!conn->encrypt) {
    3e96:	7ac3      	ldrb	r3, [r0, #11]
{
    3e98:	4604      	mov	r4, r0
	if (!conn->encrypt) {
    3e9a:	b913      	cbnz	r3, 3ea2 <update_sec_level+0xe>
		conn->sec_level = BT_SECURITY_L1;
    3e9c:	2301      	movs	r3, #1
    3e9e:	7243      	strb	r3, [r0, #9]
}
    3ea0:	bd10      	pop	{r4, pc}
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
    3ea2:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
    3ea6:	b1cb      	cbz	r3, 3edc <update_sec_level+0x48>
    3ea8:	7b5a      	ldrb	r2, [r3, #13]
    3eaa:	07d1      	lsls	r1, r2, #31
    3eac:	d516      	bpl.n	3edc <update_sec_level+0x48>
		if (conn->le.keys->flags & BT_KEYS_SC &&
    3eae:	06d2      	lsls	r2, r2, #27
    3eb0:	d512      	bpl.n	3ed8 <update_sec_level+0x44>
    3eb2:	7b1b      	ldrb	r3, [r3, #12]
    3eb4:	2b10      	cmp	r3, #16
    3eb6:	d10f      	bne.n	3ed8 <update_sec_level+0x44>
			conn->sec_level = BT_SECURITY_L4;
    3eb8:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
    3eba:	7263      	strb	r3, [r4, #9]
	if (conn->required_sec_level > conn->sec_level) {
    3ebc:	7aa2      	ldrb	r2, [r4, #10]
    3ebe:	7a63      	ldrb	r3, [r4, #9]
    3ec0:	429a      	cmp	r2, r3
    3ec2:	d9ed      	bls.n	3ea0 <update_sec_level+0xc>
		BT_ERR("Failed to set required security level");
    3ec4:	2145      	movs	r1, #69	; 0x45
    3ec6:	4806      	ldr	r0, [pc, #24]	; (3ee0 <update_sec_level+0x4c>)
    3ec8:	f00c ff88 	bl	10ddc <printk>
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTH_FAIL);
    3ecc:	4620      	mov	r0, r4
}
    3ece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTH_FAIL);
    3ed2:	2105      	movs	r1, #5
    3ed4:	f002 bbb6 	b.w	6644 <bt_conn_disconnect>
			conn->sec_level = BT_SECURITY_L3;
    3ed8:	2303      	movs	r3, #3
    3eda:	e7ee      	b.n	3eba <update_sec_level+0x26>
		conn->sec_level = BT_SECURITY_L2;
    3edc:	2302      	movs	r3, #2
    3ede:	e7ec      	b.n	3eba <update_sec_level+0x26>
    3ee0:	00017515 	.word	0x00017515

00003ee4 <hci_encrypt_key_refresh_complete>:
{
    3ee4:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    3ee6:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    3ee8:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    3eec:	4630      	mov	r0, r6
    3eee:	f002 fa69 	bl	63c4 <bt_conn_lookup_handle>
	if (!conn) {
    3ef2:	4604      	mov	r4, r0
    3ef4:	b930      	cbnz	r0, 3f04 <hci_encrypt_key_refresh_complete+0x20>
		BT_ERR("Unable to look up conn with handle %u", handle);
    3ef6:	4632      	mov	r2, r6
}
    3ef8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    3efc:	2145      	movs	r1, #69	; 0x45
    3efe:	4811      	ldr	r0, [pc, #68]	; (3f44 <hci_encrypt_key_refresh_complete+0x60>)
    3f00:	f00c bf6c 	b.w	10ddc <printk>
	if (evt->status) {
    3f04:	7829      	ldrb	r1, [r5, #0]
    3f06:	b179      	cbz	r1, 3f28 <hci_encrypt_key_refresh_complete+0x44>
	conn->required_sec_level = conn->sec_level;
    3f08:	2929      	cmp	r1, #41	; 0x29
    3f0a:	bf88      	it	hi
    3f0c:	2208      	movhi	r2, #8
    3f0e:	7a43      	ldrb	r3, [r0, #9]
    3f10:	7283      	strb	r3, [r0, #10]
	switch (hci_err) {
    3f12:	bf9c      	itt	ls
    3f14:	4b0c      	ldrls	r3, [pc, #48]	; (3f48 <hci_encrypt_key_refresh_complete+0x64>)
    3f16:	5c5a      	ldrbls	r2, [r3, r1]
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    3f18:	4620      	mov	r0, r4
    3f1a:	f002 f8fb 	bl	6114 <bt_conn_security_changed>
	bt_conn_unref(conn);
    3f1e:	4620      	mov	r0, r4
}
    3f20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    3f24:	f00e bc6c 	b.w	12800 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    3f28:	7883      	ldrb	r3, [r0, #2]
    3f2a:	2b01      	cmp	r3, #1
    3f2c:	d104      	bne.n	3f38 <hci_encrypt_key_refresh_complete+0x54>
		bt_smp_update_keys(conn);
    3f2e:	f007 fa05 	bl	b33c <bt_smp_update_keys>
		update_sec_level(conn);
    3f32:	4620      	mov	r0, r4
    3f34:	f7ff ffae 	bl	3e94 <update_sec_level>
	conn->required_sec_level = conn->sec_level;
    3f38:	7a63      	ldrb	r3, [r4, #9]
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    3f3a:	2200      	movs	r2, #0
	conn->required_sec_level = conn->sec_level;
    3f3c:	72a3      	strb	r3, [r4, #10]
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    3f3e:	7829      	ldrb	r1, [r5, #0]
    3f40:	e7ea      	b.n	3f18 <hci_encrypt_key_refresh_complete+0x34>
    3f42:	bf00      	nop
    3f44:	000174c1 	.word	0x000174c1
    3f48:	00017e10 	.word	0x00017e10

00003f4c <hci_encrypt_change>:
{
    3f4c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    3f4e:	6885      	ldr	r5, [r0, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3f50:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    3f54:	4630      	mov	r0, r6
    3f56:	f002 fa35 	bl	63c4 <bt_conn_lookup_handle>
	if (!conn) {
    3f5a:	4604      	mov	r4, r0
    3f5c:	b930      	cbnz	r0, 3f6c <hci_encrypt_change+0x20>
		BT_ERR("Unable to look up conn with handle %u", handle);
    3f5e:	4632      	mov	r2, r6
}
    3f60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    3f64:	2145      	movs	r1, #69	; 0x45
    3f66:	4812      	ldr	r0, [pc, #72]	; (3fb0 <hci_encrypt_change+0x64>)
    3f68:	f00c bf38 	b.w	10ddc <printk>
	if (evt->status) {
    3f6c:	7829      	ldrb	r1, [r5, #0]
    3f6e:	b179      	cbz	r1, 3f90 <hci_encrypt_change+0x44>
	conn->required_sec_level = conn->sec_level;
    3f70:	2929      	cmp	r1, #41	; 0x29
    3f72:	bf88      	it	hi
    3f74:	2208      	movhi	r2, #8
    3f76:	7a43      	ldrb	r3, [r0, #9]
    3f78:	7283      	strb	r3, [r0, #10]
	switch (hci_err) {
    3f7a:	bf9c      	itt	ls
    3f7c:	4b0d      	ldrls	r3, [pc, #52]	; (3fb4 <hci_encrypt_change+0x68>)
    3f7e:	5c5a      	ldrbls	r2, [r3, r1]
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    3f80:	4620      	mov	r0, r4
    3f82:	f002 f8c7 	bl	6114 <bt_conn_security_changed>
	bt_conn_unref(conn);
    3f86:	4620      	mov	r0, r4
}
    3f88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    3f8c:	f00e bc38 	b.w	12800 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    3f90:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
    3f92:	78eb      	ldrb	r3, [r5, #3]
	if (conn->type == BT_CONN_TYPE_LE) {
    3f94:	2a01      	cmp	r2, #1
	conn->encrypt = evt->encrypt;
    3f96:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
    3f98:	d105      	bne.n	3fa6 <hci_encrypt_change+0x5a>
		if (conn->encrypt) {
    3f9a:	b10b      	cbz	r3, 3fa0 <hci_encrypt_change+0x54>
			bt_smp_update_keys(conn);
    3f9c:	f007 f9ce 	bl	b33c <bt_smp_update_keys>
		update_sec_level(conn);
    3fa0:	4620      	mov	r0, r4
    3fa2:	f7ff ff77 	bl	3e94 <update_sec_level>
	conn->required_sec_level = conn->sec_level;
    3fa6:	7a63      	ldrb	r3, [r4, #9]
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    3fa8:	2200      	movs	r2, #0
	conn->required_sec_level = conn->sec_level;
    3faa:	72a3      	strb	r3, [r4, #10]
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    3fac:	7829      	ldrb	r1, [r5, #0]
    3fae:	e7e7      	b.n	3f80 <hci_encrypt_change+0x34>
    3fb0:	000174c1 	.word	0x000174c1
    3fb4:	00017e10 	.word	0x00017e10

00003fb8 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(u8_t role, bt_addr_le_t *peer_addr)
    3fb8:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    3fba:	4c0c      	ldr	r4, [pc, #48]	; (3fec <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(u8_t role, bt_addr_le_t *peer_addr)
    3fbc:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    3fbe:	2205      	movs	r2, #5
    3fc0:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
    3fc4:	f002 fa38 	bl	6438 <bt_conn_lookup_state_le>
		if (!conn) {
    3fc8:	b970      	cbnz	r0, 3fe8 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
    3fca:	4b09      	ldr	r3, [pc, #36]	; (3ff0 <find_pending_connect.part.0+0x38>)
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    3fcc:	4669      	mov	r1, sp
						       BT_ADDR_LE_NONE,
    3fce:	6818      	ldr	r0, [r3, #0]
    3fd0:	889a      	ldrh	r2, [r3, #4]
    3fd2:	799b      	ldrb	r3, [r3, #6]
    3fd4:	9000      	str	r0, [sp, #0]
    3fd6:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    3fda:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
    3fde:	2204      	movs	r2, #4
						       BT_ADDR_LE_NONE,
    3fe0:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    3fe4:	f002 fa28 	bl	6438 <bt_conn_lookup_state_le>
}
    3fe8:	b002      	add	sp, #8
    3fea:	bd10      	pop	{r4, pc}
    3fec:	20000000 	.word	0x20000000
    3ff0:	000156e8 	.word	0x000156e8

00003ff4 <hci_cmd_done>:
{
    3ff4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3ff8:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    3ffa:	7990      	ldrb	r0, [r2, #6]
{
    3ffc:	460f      	mov	r7, r1
    3ffe:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    4000:	f007 fb98 	bl	b734 <net_buf_pool_get>
    4004:	4d2a      	ldr	r5, [pc, #168]	; (40b0 <hci_cmd_done+0xbc>)
    4006:	4285      	cmp	r5, r0
    4008:	d00e      	beq.n	4028 <hci_cmd_done+0x34>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    400a:	79a4      	ldrb	r4, [r4, #6]
    400c:	4620      	mov	r0, r4
    400e:	f007 fb91 	bl	b734 <net_buf_pool_get>
    4012:	4623      	mov	r3, r4
    4014:	e9cd 0500 	strd	r0, r5, [sp]
    4018:	4632      	mov	r2, r6
    401a:	2157      	movs	r1, #87	; 0x57
    401c:	4825      	ldr	r0, [pc, #148]	; (40b4 <hci_cmd_done+0xc0>)
    401e:	f00c fedd 	bl	10ddc <printk>
}
    4022:	b002      	add	sp, #8
    4024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
    4028:	4620      	mov	r0, r4
    402a:	f007 fb8b 	bl	b744 <net_buf_id>
    402e:	f04f 080c 	mov.w	r8, #12
    4032:	4d21      	ldr	r5, [pc, #132]	; (40b8 <hci_cmd_done+0xc4>)
    4034:	fb08 5300 	mla	r3, r8, r0, r5
    4038:	885b      	ldrh	r3, [r3, #2]
    403a:	42b3      	cmp	r3, r6
    403c:	d00a      	beq.n	4054 <hci_cmd_done+0x60>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    403e:	4620      	mov	r0, r4
    4040:	f007 fb80 	bl	b744 <net_buf_id>
    4044:	fb08 5000 	mla	r0, r8, r0, r5
    4048:	4632      	mov	r2, r6
    404a:	8843      	ldrh	r3, [r0, #2]
    404c:	2157      	movs	r1, #87	; 0x57
    404e:	481b      	ldr	r0, [pc, #108]	; (40bc <hci_cmd_done+0xc8>)
    4050:	f00c fec4 	bl	10ddc <printk>
	if (cmd(buf)->state && !status) {
    4054:	4620      	mov	r0, r4
    4056:	f007 fb75 	bl	b744 <net_buf_id>
    405a:	260c      	movs	r6, #12
    405c:	fb06 5000 	mla	r0, r6, r0, r5
    4060:	6843      	ldr	r3, [r0, #4]
    4062:	b15b      	cbz	r3, 407c <hci_cmd_done+0x88>
    4064:	b957      	cbnz	r7, 407c <hci_cmd_done+0x88>
		struct cmd_state_set *update = cmd(buf)->state;
    4066:	4620      	mov	r0, r4
    4068:	f007 fb6c 	bl	b744 <net_buf_id>
    406c:	fb06 5000 	mla	r0, r6, r0, r5
    4070:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    4072:	7a1a      	ldrb	r2, [r3, #8]
    4074:	e9d3 0100 	ldrd	r0, r1, [r3]
    4078:	f00e f98f 	bl	1239a <atomic_set_bit_to>
	if (cmd(buf)->sync) {
    407c:	4620      	mov	r0, r4
    407e:	f007 fb61 	bl	b744 <net_buf_id>
    4082:	260c      	movs	r6, #12
    4084:	fb06 5000 	mla	r0, r6, r0, r5
    4088:	6883      	ldr	r3, [r0, #8]
    408a:	2b00      	cmp	r3, #0
    408c:	d0c9      	beq.n	4022 <hci_cmd_done+0x2e>
		cmd(buf)->status = status;
    408e:	4620      	mov	r0, r4
    4090:	f007 fb58 	bl	b744 <net_buf_id>
    4094:	4370      	muls	r0, r6
    4096:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    4098:	4620      	mov	r0, r4
    409a:	f007 fb53 	bl	b744 <net_buf_id>
    409e:	fb06 5500 	mla	r5, r6, r0, r5
    40a2:	68a8      	ldr	r0, [r5, #8]
}
    40a4:	b002      	add	sp, #8
    40a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_impl_k_sem_give(sem);
    40aa:	f00b bc0d 	b.w	f8c8 <z_impl_k_sem_give>
    40ae:	bf00      	nop
    40b0:	200006cc 	.word	0x200006cc
    40b4:	00017540 	.word	0x00017540
    40b8:	20000c24 	.word	0x20000c24
    40bc:	0001757a 	.word	0x0001757a

000040c0 <handle_event>:
{
    40c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    40c2:	4605      	mov	r5, r0
    40c4:	4614      	mov	r4, r2
    40c6:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
    40c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		if (handler->event != event) {
    40cc:	7822      	ldrb	r2, [r4, #0]
    40ce:	42aa      	cmp	r2, r5
    40d0:	d010      	beq.n	40f4 <handle_event+0x34>
	for (i = 0; i < num_handlers; i++) {
    40d2:	3408      	adds	r4, #8
    40d4:	429c      	cmp	r4, r3
    40d6:	d1f9      	bne.n	40cc <handle_event+0xc>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    40d8:	8984      	ldrh	r4, [r0, #12]
    40da:	6880      	ldr	r0, [r0, #8]
    40dc:	4621      	mov	r1, r4
    40de:	f7ff fc25 	bl	392c <bt_hex_real>
    40e2:	4623      	mov	r3, r4
    40e4:	9000      	str	r0, [sp, #0]
    40e6:	462a      	mov	r2, r5
    40e8:	2157      	movs	r1, #87	; 0x57
    40ea:	480b      	ldr	r0, [pc, #44]	; (4118 <handle_event+0x58>)
    40ec:	f00c fe76 	bl	10ddc <printk>
}
    40f0:	b003      	add	sp, #12
    40f2:	bd30      	pop	{r4, r5, pc}
		if (buf->len < handler->min_len) {
    40f4:	8982      	ldrh	r2, [r0, #12]
    40f6:	7863      	ldrb	r3, [r4, #1]
    40f8:	4293      	cmp	r3, r2
    40fa:	d907      	bls.n	410c <handle_event+0x4c>
			BT_ERR("Too small (%u bytes) event 0x%02x",
    40fc:	462b      	mov	r3, r5
    40fe:	2145      	movs	r1, #69	; 0x45
    4100:	4806      	ldr	r0, [pc, #24]	; (411c <handle_event+0x5c>)
}
    4102:	b003      	add	sp, #12
    4104:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    4108:	f00c be68 	b.w	10ddc <printk>
		handler->handler(buf);
    410c:	6863      	ldr	r3, [r4, #4]
}
    410e:	b003      	add	sp, #12
    4110:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		handler->handler(buf);
    4114:	4718      	bx	r3
    4116:	bf00      	nop
    4118:	000175d9 	.word	0x000175d9
    411c:	000175b2 	.word	0x000175b2

00004120 <hci_le_meta_event>:
{
    4120:	b510      	push	{r4, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    4122:	2101      	movs	r1, #1
{
    4124:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    4126:	3008      	adds	r0, #8
    4128:	f007 fdf4 	bl	bd14 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    412c:	4621      	mov	r1, r4
}
    412e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    4132:	230a      	movs	r3, #10
    4134:	4a01      	ldr	r2, [pc, #4]	; (413c <hci_le_meta_event+0x1c>)
    4136:	7800      	ldrb	r0, [r0, #0]
    4138:	f7ff bfc2 	b.w	40c0 <handle_event>
    413c:	00015970 	.word	0x00015970

00004140 <hci_rx_thread>:
{
    4140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
    4144:	4f41      	ldr	r7, [pc, #260]	; (424c <hci_rx_thread+0x10c>)
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    4146:	f8df 8124 	ldr.w	r8, [pc, #292]	; 426c <hci_rx_thread+0x12c>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    414a:	4e41      	ldr	r6, [pc, #260]	; (4250 <hci_rx_thread+0x110>)
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
    414c:	f04f 32ff 	mov.w	r2, #4294967295
    4150:	f04f 33ff 	mov.w	r3, #4294967295
    4154:	4638      	mov	r0, r7
    4156:	f007 fbfb 	bl	b950 <net_buf_get>
    415a:	7d02      	ldrb	r2, [r0, #20]
    415c:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
    415e:	2a01      	cmp	r2, #1
    4160:	d042      	beq.n	41e8 <hci_rx_thread+0xa8>
    4162:	2a03      	cmp	r2, #3
    4164:	d16f      	bne.n	4246 <hci_rx_thread+0x106>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    4166:	8983      	ldrh	r3, [r0, #12]
    4168:	2b03      	cmp	r3, #3
    416a:	d80c      	bhi.n	4186 <hci_rx_thread+0x46>
    416c:	f240 5305 	movw	r3, #1285	; 0x505
    4170:	4632      	mov	r2, r6
    4172:	4938      	ldr	r1, [pc, #224]	; (4254 <hci_rx_thread+0x114>)
    4174:	4838      	ldr	r0, [pc, #224]	; (4258 <hci_rx_thread+0x118>)
    4176:	f00c fe31 	bl	10ddc <printk>
    417a:	4040      	eors	r0, r0
    417c:	f380 8811 	msr	BASEPRI, r0
    4180:	f04f 0003 	mov.w	r0, #3
    4184:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    4186:	2104      	movs	r1, #4
    4188:	f104 0008 	add.w	r0, r4, #8
    418c:	f007 fdc2 	bl	bd14 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    4190:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    4192:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    4194:	f8b0 9000 	ldrh.w	r9, [r0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    4198:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
    419a:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
    419c:	f3c9 000b 	ubfx	r0, r9, #0, #12
	if (buf->len != len) {
    41a0:	4293      	cmp	r3, r2
	acl(buf)->handle = bt_acl_handle(handle);
    41a2:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
    41a4:	d007      	beq.n	41b6 <hci_rx_thread+0x76>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    41a6:	2145      	movs	r1, #69	; 0x45
    41a8:	482c      	ldr	r0, [pc, #176]	; (425c <hci_rx_thread+0x11c>)
    41aa:	f00c fe17 	bl	10ddc <printk>
			net_buf_unref(buf);
    41ae:	4620      	mov	r0, r4
    41b0:	f007 fc60 	bl	ba74 <net_buf_unref>
			break;
    41b4:	e015      	b.n	41e2 <hci_rx_thread+0xa2>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    41b6:	f002 f905 	bl	63c4 <bt_conn_lookup_handle>
	if (!conn) {
    41ba:	4605      	mov	r5, r0
    41bc:	b928      	cbnz	r0, 41ca <hci_rx_thread+0x8a>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    41be:	2145      	movs	r1, #69	; 0x45
    41c0:	8ae2      	ldrh	r2, [r4, #22]
    41c2:	4827      	ldr	r0, [pc, #156]	; (4260 <hci_rx_thread+0x120>)
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    41c4:	f00c fe0a 	bl	10ddc <printk>
    41c8:	e7f1      	b.n	41ae <hci_rx_thread+0x6e>
	acl(buf)->index = bt_conn_index(conn);
    41ca:	f002 fbfb 	bl	69c4 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    41ce:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
    41d0:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    41d2:	ea4f 3219 	mov.w	r2, r9, lsr #12
    41d6:	4628      	mov	r0, r5
    41d8:	f001 ffb8 	bl	614c <bt_conn_recv>
	bt_conn_unref(conn);
    41dc:	4628      	mov	r0, r5
    41de:	f00e fb0f 	bl	12800 <bt_conn_unref>
	z_impl_k_yield();
    41e2:	f00b f9ef 	bl	f5c4 <z_impl_k_yield>
	while (1) {
    41e6:	e7b1      	b.n	414c <hci_rx_thread+0xc>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    41e8:	8983      	ldrh	r3, [r0, #12]
    41ea:	2b01      	cmp	r3, #1
    41ec:	d80c      	bhi.n	4208 <hci_rx_thread+0xc8>
    41ee:	f241 4382 	movw	r3, #5250	; 0x1482
    41f2:	4632      	mov	r2, r6
    41f4:	4917      	ldr	r1, [pc, #92]	; (4254 <hci_rx_thread+0x114>)
    41f6:	4818      	ldr	r0, [pc, #96]	; (4258 <hci_rx_thread+0x118>)
    41f8:	f00c fdf0 	bl	10ddc <printk>
    41fc:	4040      	eors	r0, r0
    41fe:	f380 8811 	msr	BASEPRI, r0
    4202:	f04f 0003 	mov.w	r0, #3
    4206:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    4208:	2102      	movs	r1, #2
    420a:	f104 0008 	add.w	r0, r4, #8
    420e:	f007 fd81 	bl	bd14 <net_buf_simple_pull_mem>
    4212:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    4214:	7800      	ldrb	r0, [r0, #0]
    4216:	f00e f88f 	bl	12338 <bt_hci_evt_get_flags>
    421a:	0783      	lsls	r3, r0, #30
    421c:	d40c      	bmi.n	4238 <hci_rx_thread+0xf8>
    421e:	f241 4386 	movw	r3, #5254	; 0x1486
    4222:	4632      	mov	r2, r6
    4224:	490f      	ldr	r1, [pc, #60]	; (4264 <hci_rx_thread+0x124>)
    4226:	480c      	ldr	r0, [pc, #48]	; (4258 <hci_rx_thread+0x118>)
    4228:	f00c fdd8 	bl	10ddc <printk>
    422c:	4040      	eors	r0, r0
    422e:	f380 8811 	msr	BASEPRI, r0
    4232:	f04f 0003 	mov.w	r0, #3
    4236:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    4238:	2305      	movs	r3, #5
    423a:	4642      	mov	r2, r8
    423c:	4621      	mov	r1, r4
    423e:	7828      	ldrb	r0, [r5, #0]
    4240:	f7ff ff3e 	bl	40c0 <handle_event>
	net_buf_unref(buf);
    4244:	e7b3      	b.n	41ae <hci_rx_thread+0x6e>
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    4246:	2145      	movs	r1, #69	; 0x45
    4248:	4807      	ldr	r0, [pc, #28]	; (4268 <hci_rx_thread+0x128>)
    424a:	e7bb      	b.n	41c4 <hci_rx_thread+0x84>
    424c:	200000ec 	.word	0x200000ec
    4250:	00017600 	.word	0x00017600
    4254:	00017634 	.word	0x00017634
    4258:	00016493 	.word	0x00016493
    425c:	0001764d 	.word	0x0001764d
    4260:	00017676 	.word	0x00017676
    4264:	0001769d 	.word	0x0001769d
    4268:	000176cb 	.word	0x000176cb
    426c:	00015a10 	.word	0x00015a10

00004270 <hci_num_completed_packets>:
{
    4270:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i = 0; i < evt->num_handles; i++) {
    4274:	2500      	movs	r5, #0
			tx->pending_no_cb = 0U;
    4276:	46a8      	mov	r8, r5
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    4278:	6887      	ldr	r7, [r0, #8]
    427a:	f8df 9104 	ldr.w	r9, [pc, #260]	; 4380 <hci_num_completed_packets+0x110>
	for (i = 0; i < evt->num_handles; i++) {
    427e:	783b      	ldrb	r3, [r7, #0]
    4280:	429d      	cmp	r5, r3
    4282:	db01      	blt.n	4288 <hci_num_completed_packets+0x18>
}
    4284:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    4288:	eb07 0385 	add.w	r3, r7, r5, lsl #2
    428c:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    4290:	f8b3 6003 	ldrh.w	r6, [r3, #3]
    4294:	f04f 0320 	mov.w	r3, #32
    4298:	f3ef 8a11 	mrs	sl, BASEPRI
    429c:	f383 8811 	msr	BASEPRI, r3
    42a0:	f3bf 8f6f 	isb	sy
		conn = bt_conn_lookup_handle(handle);
    42a4:	4658      	mov	r0, fp
    42a6:	f002 f88d 	bl	63c4 <bt_conn_lookup_handle>
		if (!conn) {
    42aa:	4604      	mov	r4, r0
    42ac:	b950      	cbnz	r0, 42c4 <hci_num_completed_packets+0x54>
	__asm__ volatile(
    42ae:	f38a 8811 	msr	BASEPRI, sl
    42b2:	f3bf 8f6f 	isb	sy
			BT_ERR("No connection for handle %u", handle);
    42b6:	2145      	movs	r1, #69	; 0x45
    42b8:	465a      	mov	r2, fp
    42ba:	482f      	ldr	r0, [pc, #188]	; (4378 <hci_num_completed_packets+0x108>)
    42bc:	f00c fd8e 	bl	10ddc <printk>
	for (i = 0; i < evt->num_handles; i++) {
    42c0:	3501      	adds	r5, #1
    42c2:	e7dc      	b.n	427e <hci_num_completed_packets+0xe>
    42c4:	f38a 8811 	msr	BASEPRI, sl
    42c8:	f3bf 8f6f 	isb	sy
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    42cc:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
    42d0:	b346      	cbz	r6, 4324 <hci_num_completed_packets+0xb4>
	__asm__ volatile(
    42d2:	f04f 0320 	mov.w	r3, #32
    42d6:	f3ef 8211 	mrs	r2, BASEPRI
    42da:	f383 8811 	msr	BASEPRI, r3
    42de:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    42e2:	69e3      	ldr	r3, [r4, #28]
    42e4:	b16b      	cbz	r3, 4302 <hci_num_completed_packets+0x92>
				conn->pending_no_cb--;
    42e6:	3b01      	subs	r3, #1
    42e8:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    42ea:	f382 8811 	msr	BASEPRI, r2
    42ee:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    42f2:	4620      	mov	r0, r4
    42f4:	f001 fea0 	bl	6038 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
    42f8:	3e01      	subs	r6, #1
    42fa:	f00b fae5 	bl	f8c8 <z_impl_k_sem_give>
    42fe:	b2b6      	uxth	r6, r6
    4300:	e7e6      	b.n	42d0 <hci_num_completed_packets+0x60>
Z_GENLIST_IS_EMPTY(slist)
    4302:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
    4304:	b12b      	cbz	r3, 4312 <hci_num_completed_packets+0xa2>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    4306:	69a1      	ldr	r1, [r4, #24]
    4308:	6818      	ldr	r0, [r3, #0]
    430a:	428b      	cmp	r3, r1
	list->head = node;
    430c:	6160      	str	r0, [r4, #20]
	list->tail = node;
    430e:	bf08      	it	eq
    4310:	61a0      	streq	r0, [r4, #24]
    4312:	f382 8811 	msr	BASEPRI, r2
    4316:	f3bf 8f6f 	isb	sy
			if (!node) {
    431a:	b93b      	cbnz	r3, 432c <hci_num_completed_packets+0xbc>
				BT_ERR("packets count mismatch");
    431c:	2145      	movs	r1, #69	; 0x45
    431e:	4817      	ldr	r0, [pc, #92]	; (437c <hci_num_completed_packets+0x10c>)
    4320:	f00c fd5c 	bl	10ddc <printk>
		bt_conn_unref(conn);
    4324:	4620      	mov	r0, r4
    4326:	f00e fa6b 	bl	12800 <bt_conn_unref>
    432a:	e7c9      	b.n	42c0 <hci_num_completed_packets+0x50>
	__asm__ volatile(
    432c:	f04f 0220 	mov.w	r2, #32
    4330:	f3ef 8111 	mrs	r1, BASEPRI
    4334:	f382 8811 	msr	BASEPRI, r2
    4338:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    433c:	68da      	ldr	r2, [r3, #12]
    433e:	61e2      	str	r2, [r4, #28]
	parent->next = child;
    4340:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
    4344:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    4346:	f8c3 800c 	str.w	r8, [r3, #12]
    434a:	b98a      	cbnz	r2, 4370 <hci_num_completed_packets+0x100>
	list->head = node;
    434c:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    4350:	f381 8811 	msr	BASEPRI, r1
    4354:	f3bf 8f6f 	isb	sy
    4358:	2101      	movs	r1, #1
    435a:	f104 0030 	add.w	r0, r4, #48	; 0x30
    435e:	f00e f803 	bl	12368 <atomic_or>
    4362:	07c3      	lsls	r3, r0, #31
    4364:	d4c5      	bmi.n	42f2 <hci_num_completed_packets+0x82>
		k_queue_append(&work_q->queue, work);
    4366:	4651      	mov	r1, sl
    4368:	4648      	mov	r0, r9
    436a:	f010 fe3c 	bl	14fe6 <k_queue_append>
    436e:	e7c0      	b.n	42f2 <hci_num_completed_packets+0x82>
	parent->next = child;
    4370:	6013      	str	r3, [r2, #0]
	list->tail = node;
    4372:	6263      	str	r3, [r4, #36]	; 0x24
}
    4374:	e7ec      	b.n	4350 <hci_num_completed_packets+0xe0>
    4376:	bf00      	nop
    4378:	000176e4 	.word	0x000176e4
    437c:	00017705 	.word	0x00017705
    4380:	20001e54 	.word	0x20001e54

00004384 <le_adv_start_add_conn>:
	return 0;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    4384:	b5f0      	push	{r4, r5, r6, r7, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    4386:	4b28      	ldr	r3, [pc, #160]	; (4428 <le_adv_start_add_conn+0xa4>)
    4388:	4605      	mov	r5, r0
    438a:	460f      	mov	r7, r1
    438c:	b085      	sub	sp, #20
	struct adv_id_check_data check_data = {
		.id = adv->id,
    438e:	7801      	ldrb	r1, [r0, #0]
    4390:	f103 002c 	add.w	r0, r3, #44	; 0x2c
    4394:	f00d ffe2 	bl	1235c <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    4398:	f010 0f40 	tst.w	r0, #64	; 0x40
    439c:	461a      	mov	r2, r3
    439e:	d008      	beq.n	43b2 <le_adv_start_add_conn+0x2e>
    43a0:	f103 002c 	add.w	r0, r3, #44	; 0x2c
    43a4:	f00d ffda 	bl	1235c <atomic_get>
    43a8:	05c0      	lsls	r0, r0, #23
    43aa:	d502      	bpl.n	43b2 <le_adv_start_add_conn+0x2e>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
    43ac:	7e1b      	ldrb	r3, [r3, #24]
    43ae:	428b      	cmp	r3, r1
    43b0:	d131      	bne.n	4416 <le_adv_start_add_conn+0x92>
	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
	if (check_data.adv_enabled) {
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
    43b2:	462e      	mov	r6, r5
    43b4:	f816 3b0b 	ldrb.w	r3, [r6], #11

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    43b8:	4669      	mov	r1, sp
	bt_dev.adv_conn_id = adv->id;
    43ba:	f882 3037 	strb.w	r3, [r2, #55]	; 0x37
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    43be:	2300      	movs	r3, #0
    43c0:	4630      	mov	r0, r6
    43c2:	9300      	str	r3, [sp, #0]
    43c4:	f8cd 3003 	str.w	r3, [sp, #3]
    43c8:	f00d ffd9 	bl	1237e <bt_addr_le_cmp>
    43cc:	4604      	mov	r4, r0
    43ce:	7828      	ldrb	r0, [r5, #0]
    43d0:	b164      	cbz	r4, 43ec <le_adv_start_add_conn+0x68>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
		*out_conn = conn;
		return 0;
	}

	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    43d2:	4631      	mov	r1, r6
    43d4:	f002 f856 	bl	6484 <bt_conn_exists_le>
    43d8:	4604      	mov	r4, r0
    43da:	b9f8      	cbnz	r0, 441c <le_adv_start_add_conn+0x98>
		return -EINVAL;
	}

	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    43dc:	7828      	ldrb	r0, [r5, #0]
    43de:	4631      	mov	r1, r6
    43e0:	f001 ffb4 	bl	634c <bt_conn_add_le>
	if (!conn) {
    43e4:	4605      	mov	r5, r0
    43e6:	b1e0      	cbz	r0, 4422 <le_adv_start_add_conn+0x9e>
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    43e8:	2105      	movs	r1, #5
    43ea:	e00e      	b.n	440a <le_adv_start_add_conn+0x86>
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    43ec:	f06f 03ff 	mvn.w	r3, #255	; 0xff
    43f0:	9302      	str	r3, [sp, #8]
    43f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    43f6:	a902      	add	r1, sp, #8
    43f8:	f8ad 300c 	strh.w	r3, [sp, #12]
    43fc:	f88d 300e 	strb.w	r3, [sp, #14]
    4400:	f001 ffa4 	bl	634c <bt_conn_add_le>
		if (!conn) {
    4404:	4605      	mov	r5, r0
    4406:	b160      	cbz	r0, 4422 <le_adv_start_add_conn+0x9e>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    4408:	2104      	movs	r1, #4
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    440a:	f002 f857 	bl	64bc <bt_conn_set_state>
	*out_conn = conn;
    440e:	603d      	str	r5, [r7, #0]
	return 0;
}
    4410:	4620      	mov	r0, r4
    4412:	b005      	add	sp, #20
    4414:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOTSUP;
    4416:	f06f 0422 	mvn.w	r4, #34	; 0x22
    441a:	e7f9      	b.n	4410 <le_adv_start_add_conn+0x8c>
		return -EINVAL;
    441c:	f06f 0415 	mvn.w	r4, #21
    4420:	e7f6      	b.n	4410 <le_adv_start_add_conn+0x8c>
		return -ENOMEM;
    4422:	f06f 040b 	mvn.w	r4, #11
    4426:	e7f3      	b.n	4410 <le_adv_start_add_conn+0x8c>
    4428:	20000000 	.word	0x20000000

0000442c <hci_cmd_status>:
{
    442c:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    442e:	2104      	movs	r1, #4
{
    4430:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    4432:	3008      	adds	r0, #8
    4434:	f007 fc6e 	bl	bd14 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    4438:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    443a:	7801      	ldrb	r1, [r0, #0]
    443c:	4622      	mov	r2, r4
    443e:	8840      	ldrh	r0, [r0, #2]
    4440:	f7ff fdd8 	bl	3ff4 <hci_cmd_done>
	if (ncmd) {
    4444:	b125      	cbz	r5, 4450 <hci_cmd_status+0x24>
}
    4446:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    444a:	4802      	ldr	r0, [pc, #8]	; (4454 <hci_cmd_status+0x28>)
    444c:	f00b ba3c 	b.w	f8c8 <z_impl_k_sem_give>
    4450:	bd38      	pop	{r3, r4, r5, pc}
    4452:	bf00      	nop
    4454:	200000d0 	.word	0x200000d0

00004458 <hci_cmd_complete>:
{
    4458:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    445a:	2103      	movs	r1, #3
{
    445c:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    445e:	3008      	adds	r0, #8
    4460:	f007 fc58 	bl	bd14 <net_buf_simple_pull_mem>
	status = buf->data[0];
    4464:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    4466:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    4468:	4622      	mov	r2, r4
    446a:	7819      	ldrb	r1, [r3, #0]
    446c:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    4470:	f7ff fdc0 	bl	3ff4 <hci_cmd_done>
	if (ncmd) {
    4474:	b125      	cbz	r5, 4480 <hci_cmd_complete+0x28>
}
    4476:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    447a:	4802      	ldr	r0, [pc, #8]	; (4484 <hci_cmd_complete+0x2c>)
    447c:	f00b ba24 	b.w	f8c8 <z_impl_k_sem_give>
    4480:	bd38      	pop	{r3, r4, r5, pc}
    4482:	bf00      	nop
    4484:	200000d0 	.word	0x200000d0

00004488 <bt_hci_cmd_create>:
{
    4488:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    448c:	f04f 32ff 	mov.w	r2, #4294967295
{
    4490:	4605      	mov	r5, r0
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    4492:	f04f 33ff 	mov.w	r3, #4294967295
    4496:	481c      	ldr	r0, [pc, #112]	; (4508 <bt_hci_cmd_create+0x80>)
{
    4498:	460e      	mov	r6, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    449a:	f00f fd9a 	bl	13fd2 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
    449e:	4604      	mov	r4, r0
    44a0:	b958      	cbnz	r0, 44ba <bt_hci_cmd_create+0x32>
    44a2:	491a      	ldr	r1, [pc, #104]	; (450c <bt_hci_cmd_create+0x84>)
    44a4:	481a      	ldr	r0, [pc, #104]	; (4510 <bt_hci_cmd_create+0x88>)
    44a6:	f44f 7393 	mov.w	r3, #294	; 0x126
    44aa:	4a1a      	ldr	r2, [pc, #104]	; (4514 <bt_hci_cmd_create+0x8c>)
    44ac:	f00c fc96 	bl	10ddc <printk>
    44b0:	f44f 7193 	mov.w	r1, #294	; 0x126
    44b4:	4817      	ldr	r0, [pc, #92]	; (4514 <bt_hci_cmd_create+0x8c>)
    44b6:	f00c ff27 	bl	11308 <assert_post_action>
	*(u8_t *)net_buf_user_data(buf) = type;
    44ba:	2700      	movs	r7, #0
	net_buf_reserve(buf, BT_BUF_RESERVE);
    44bc:	f104 0b08 	add.w	fp, r4, #8
    44c0:	2101      	movs	r1, #1
    44c2:	4658      	mov	r0, fp
    44c4:	f007 fa78 	bl	b9b8 <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
    44c8:	4620      	mov	r0, r4
    44ca:	7527      	strb	r7, [r4, #20]
    44cc:	f007 f93a 	bl	b744 <net_buf_id>
    44d0:	f04f 0a0c 	mov.w	sl, #12
    44d4:	f8df 8040 	ldr.w	r8, [pc, #64]	; 4518 <bt_hci_cmd_create+0x90>
    44d8:	fb0a 8000 	mla	r0, sl, r0, r8
    44dc:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
    44de:	4620      	mov	r0, r4
    44e0:	f007 f930 	bl	b744 <net_buf_id>
    44e4:	fb0a 8000 	mla	r0, sl, r0, r8
    44e8:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
    44ea:	4620      	mov	r0, r4
    44ec:	f007 f92a 	bl	b744 <net_buf_id>
    44f0:	fb0a 8000 	mla	r0, sl, r0, r8
	hdr = net_buf_add(buf, sizeof(*hdr));
    44f4:	2103      	movs	r1, #3
	cmd(buf)->state = NULL;
    44f6:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    44f8:	4658      	mov	r0, fp
    44fa:	f007 fc2d 	bl	bd58 <net_buf_simple_add>
	hdr->param_len = param_len;
    44fe:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    4500:	8005      	strh	r5, [r0, #0]
}
    4502:	4620      	mov	r0, r4
    4504:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4508:	200006cc 	.word	0x200006cc
    450c:	00019246 	.word	0x00019246
    4510:	00016493 	.word	0x00016493
    4514:	00017600 	.word	0x00017600
    4518:	20000c24 	.word	0x20000c24

0000451c <bt_hci_cmd_send_sync>:
{
    451c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4520:	4680      	mov	r8, r0
    4522:	4615      	mov	r5, r2
	if (!buf) {
    4524:	460c      	mov	r4, r1
{
    4526:	b086      	sub	sp, #24
	if (!buf) {
    4528:	b921      	cbnz	r1, 4534 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
    452a:	f7ff ffad 	bl	4488 <bt_hci_cmd_create>
		if (!buf) {
    452e:	4604      	mov	r4, r0
    4530:	2800      	cmp	r0, #0
    4532:	d04f      	beq.n	45d4 <bt_hci_cmd_send_sync+0xb8>
	return z_impl_k_sem_init(sem, initial_count, limit);
    4534:	2201      	movs	r2, #1
    4536:	2100      	movs	r1, #0
    4538:	4668      	mov	r0, sp
    453a:	f010 fd93 	bl	15064 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    453e:	4620      	mov	r0, r4
    4540:	f007 f900 	bl	b744 <net_buf_id>
    4544:	230c      	movs	r3, #12
    4546:	4e25      	ldr	r6, [pc, #148]	; (45dc <bt_hci_cmd_send_sync+0xc0>)
    4548:	fb03 6000 	mla	r0, r3, r0, r6
    454c:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    4550:	4620      	mov	r0, r4
    4552:	f007 fad5 	bl	bb00 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    4556:	4621      	mov	r1, r4
    4558:	4821      	ldr	r0, [pc, #132]	; (45e0 <bt_hci_cmd_send_sync+0xc4>)
    455a:	f007 fa57 	bl	ba0c <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    455e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    4562:	2300      	movs	r3, #0
    4564:	4668      	mov	r0, sp
    4566:	f00b f9f3 	bl	f950 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    456a:	4607      	mov	r7, r0
    456c:	b180      	cbz	r0, 4590 <bt_hci_cmd_send_sync+0x74>
    456e:	f240 1371 	movw	r3, #369	; 0x171
    4572:	4a1c      	ldr	r2, [pc, #112]	; (45e4 <bt_hci_cmd_send_sync+0xc8>)
    4574:	491c      	ldr	r1, [pc, #112]	; (45e8 <bt_hci_cmd_send_sync+0xcc>)
    4576:	481d      	ldr	r0, [pc, #116]	; (45ec <bt_hci_cmd_send_sync+0xd0>)
    4578:	f00c fc30 	bl	10ddc <printk>
    457c:	4639      	mov	r1, r7
    457e:	481c      	ldr	r0, [pc, #112]	; (45f0 <bt_hci_cmd_send_sync+0xd4>)
    4580:	f00c fc2c 	bl	10ddc <printk>
    4584:	4040      	eors	r0, r0
    4586:	f380 8811 	msr	BASEPRI, r0
    458a:	f04f 0003 	mov.w	r0, #3
    458e:	df02      	svc	2
	status = cmd(buf)->status;
    4590:	4620      	mov	r0, r4
    4592:	f007 f8d7 	bl	b744 <net_buf_id>
    4596:	230c      	movs	r3, #12
    4598:	4343      	muls	r3, r0
    459a:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
    459c:	b18e      	cbz	r6, 45c2 <bt_hci_cmd_send_sync+0xa6>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    459e:	4633      	mov	r3, r6
    45a0:	4642      	mov	r2, r8
    45a2:	2157      	movs	r1, #87	; 0x57
    45a4:	4813      	ldr	r0, [pc, #76]	; (45f4 <bt_hci_cmd_send_sync+0xd8>)
    45a6:	f00c fc19 	bl	10ddc <printk>
		net_buf_unref(buf);
    45aa:	4620      	mov	r0, r4
    45ac:	f007 fa62 	bl	ba74 <net_buf_unref>
			return -EIO;
    45b0:	2e09      	cmp	r6, #9
    45b2:	bf0c      	ite	eq
    45b4:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
    45b8:	f06f 0004 	mvnne.w	r0, #4
}
    45bc:	b006      	add	sp, #24
    45be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
    45c2:	b115      	cbz	r5, 45ca <bt_hci_cmd_send_sync+0xae>
	return 0;
    45c4:	4630      	mov	r0, r6
		*rsp = buf;
    45c6:	602c      	str	r4, [r5, #0]
    45c8:	e7f8      	b.n	45bc <bt_hci_cmd_send_sync+0xa0>
		net_buf_unref(buf);
    45ca:	4620      	mov	r0, r4
    45cc:	f007 fa52 	bl	ba74 <net_buf_unref>
	return 0;
    45d0:	4628      	mov	r0, r5
    45d2:	e7f3      	b.n	45bc <bt_hci_cmd_send_sync+0xa0>
			return -ENOBUFS;
    45d4:	f06f 0036 	mvn.w	r0, #54	; 0x36
    45d8:	e7f0      	b.n	45bc <bt_hci_cmd_send_sync+0xa0>
    45da:	bf00      	nop
    45dc:	20000c24 	.word	0x20000c24
    45e0:	20000108 	.word	0x20000108
    45e4:	00017600 	.word	0x00017600
    45e8:	00017721 	.word	0x00017721
    45ec:	00016493 	.word	0x00016493
    45f0:	0001772a 	.word	0x0001772a
    45f4:	0001774a 	.word	0x0001774a

000045f8 <hci_le_read_max_data_len>:
{
    45f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    45fa:	4606      	mov	r6, r0
    45fc:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    45fe:	f242 002f 	movw	r0, #8239	; 0x202f
    4602:	2100      	movs	r1, #0
    4604:	aa01      	add	r2, sp, #4
    4606:	f7ff ff89 	bl	451c <bt_hci_cmd_send_sync>
	if (err) {
    460a:	4604      	mov	r4, r0
    460c:	b130      	cbz	r0, 461c <hci_le_read_max_data_len+0x24>
		BT_ERR("Failed to read DLE max data len");
    460e:	2145      	movs	r1, #69	; 0x45
    4610:	4808      	ldr	r0, [pc, #32]	; (4634 <hci_le_read_max_data_len+0x3c>)
    4612:	f00c fbe3 	bl	10ddc <printk>
}
    4616:	4620      	mov	r0, r4
    4618:	b002      	add	sp, #8
    461a:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    461c:	9801      	ldr	r0, [sp, #4]
    461e:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    4620:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    4624:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    4626:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    462a:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    462c:	f007 fa22 	bl	ba74 <net_buf_unref>
	return 0;
    4630:	e7f1      	b.n	4616 <hci_le_read_max_data_len+0x1e>
    4632:	bf00      	nop
    4634:	0001776b 	.word	0x0001776b

00004638 <set_le_adv_enable_legacy>:
{
    4638:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    463a:	4606      	mov	r6, r0
    463c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    463e:	f242 000a 	movw	r0, #8202	; 0x200a
    4642:	2101      	movs	r1, #1
    4644:	f7ff ff20 	bl	4488 <bt_hci_cmd_create>
	if (!buf) {
    4648:	4604      	mov	r4, r0
    464a:	b1e8      	cbz	r0, 4688 <set_le_adv_enable_legacy+0x50>
	if (enable) {
    464c:	3008      	adds	r0, #8
    464e:	b1cd      	cbz	r5, 4684 <set_le_adv_enable_legacy+0x4c>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    4650:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    4652:	f00f fcf3 	bl	1403c <net_buf_simple_add_u8>
	state->bit = bit;
    4656:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
    4658:	4620      	mov	r0, r4
	cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
    465a:	3614      	adds	r6, #20
	state->bit = bit;
    465c:	9302      	str	r3, [sp, #8]
	state->target = target;
    465e:	9601      	str	r6, [sp, #4]
	state->val = val;
    4660:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    4664:	f007 f86e 	bl	b744 <net_buf_id>
    4668:	220c      	movs	r2, #12
    466a:	4b09      	ldr	r3, [pc, #36]	; (4690 <set_le_adv_enable_legacy+0x58>)
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    466c:	4621      	mov	r1, r4
	cmd(buf)->state = &state;
    466e:	fb02 3000 	mla	r0, r2, r0, r3
    4672:	ab01      	add	r3, sp, #4
    4674:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    4676:	2200      	movs	r2, #0
    4678:	f242 000a 	movw	r0, #8202	; 0x200a
    467c:	f7ff ff4e 	bl	451c <bt_hci_cmd_send_sync>
}
    4680:	b004      	add	sp, #16
    4682:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    4684:	4629      	mov	r1, r5
    4686:	e7e4      	b.n	4652 <set_le_adv_enable_legacy+0x1a>
		return -ENOBUFS;
    4688:	f06f 0036 	mvn.w	r0, #54	; 0x36
    468c:	e7f8      	b.n	4680 <set_le_adv_enable_legacy+0x48>
    468e:	bf00      	nop
    4690:	20000c24 	.word	0x20000c24

00004694 <hci_set_ad>:
{
    4694:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4698:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    469a:	2120      	movs	r1, #32
{
    469c:	4682      	mov	sl, r0
    469e:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    46a0:	f7ff fef2 	bl	4488 <bt_hci_cmd_create>
	if (!buf) {
    46a4:	4606      	mov	r6, r0
    46a6:	2800      	cmp	r0, #0
    46a8:	d055      	beq.n	4756 <hci_set_ad+0xc2>
	set_data = net_buf_add(buf, sizeof(*set_data));
    46aa:	2120      	movs	r1, #32
    46ac:	3008      	adds	r0, #8
    46ae:	f007 fb53 	bl	bd58 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
    46b2:	2220      	movs	r2, #32
	set_data = net_buf_add(buf, sizeof(*set_data));
    46b4:	4681      	mov	r9, r0
	(void)memset(set_data, 0, sizeof(*set_data));
    46b6:	2100      	movs	r1, #0
    46b8:	f00d fd7c 	bl	121b4 <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    46bc:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
	u8_t set_data_len = 0;
    46c0:	2500      	movs	r5, #0
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    46c2:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
    46c6:	9300      	str	r3, [sp, #0]
		for (size_t j = 0; j < ad[i].len; j++) {
    46c8:	2300      	movs	r3, #0
    46ca:	f8d4 8000 	ldr.w	r8, [r4]
    46ce:	6862      	ldr	r2, [r4, #4]
    46d0:	4293      	cmp	r3, r2
    46d2:	d30d      	bcc.n	46f0 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
    46d4:	9b00      	ldr	r3, [sp, #0]
    46d6:	3408      	adds	r4, #8
    46d8:	429c      	cmp	r4, r3
    46da:	d1f5      	bne.n	46c8 <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    46dc:	2200      	movs	r2, #0
    46de:	4631      	mov	r1, r6
    46e0:	4650      	mov	r0, sl
	*data_len = set_data_len;
    46e2:	f889 5000 	strb.w	r5, [r9]
}
    46e6:	b003      	add	sp, #12
    46e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    46ec:	f7ff bf16 	b.w	451c <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    46f0:	f898 2001 	ldrb.w	r2, [r8, #1]
			u8_t type = data[j].type;
    46f4:	1ca8      	adds	r0, r5, #2
			if ((set_data_len + len + 2) > set_data_len_max) {
    46f6:	1881      	adds	r1, r0, r2
    46f8:	291f      	cmp	r1, #31
			u8_t type = data[j].type;
    46fa:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    46fe:	d913      	bls.n	4728 <hci_set_ad+0x94>
				if (type != BT_DATA_NAME_COMPLETE || !len) {
    4700:	f1bc 0f09 	cmp.w	ip, #9
				len = set_data_len_max - (set_data_len + 2);
    4704:	f1c5 021d 	rsb	r2, r5, #29
				if (type != BT_DATA_NAME_COMPLETE || !len) {
    4708:	d100      	bne.n	470c <hci_set_ad+0x78>
    470a:	b95a      	cbnz	r2, 4724 <hci_set_ad+0x90>
					BT_ERR("Too big advertising data");
    470c:	2145      	movs	r1, #69	; 0x45
    470e:	4813      	ldr	r0, [pc, #76]	; (475c <hci_set_ad+0xc8>)
    4710:	f00c fb64 	bl	10ddc <printk>
		net_buf_unref(buf);
    4714:	4630      	mov	r0, r6
    4716:	f007 f9ad 	bl	ba74 <net_buf_unref>
					return -EINVAL;
    471a:	f06f 0015 	mvn.w	r0, #21
}
    471e:	b003      	add	sp, #12
    4720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    4724:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    4728:	b2d7      	uxtb	r7, r2
    472a:	1c79      	adds	r1, r7, #1
    472c:	f80b 1005 	strb.w	r1, [fp, r5]
    4730:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
    4732:	b2c9      	uxtb	r1, r1
    4734:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
    4738:	f8d8 1004 	ldr.w	r1, [r8, #4]
    473c:	fa5b f080 	uxtab	r0, fp, r0
    4740:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    4742:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
    4744:	f00d fd0b 	bl	1215e <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    4748:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    474a:	443d      	add	r5, r7
    474c:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
    474e:	3301      	adds	r3, #1
    4750:	f108 0808 	add.w	r8, r8, #8
    4754:	e7bb      	b.n	46ce <hci_set_ad+0x3a>
		return -ENOBUFS;
    4756:	f06f 0036 	mvn.w	r0, #54	; 0x36
    475a:	e7e0      	b.n	471e <hci_set_ad+0x8a>
    475c:	00017790 	.word	0x00017790

00004760 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
    4760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4764:	b086      	sub	sp, #24
    4766:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
    476a:	4604      	mov	r4, r0
    476c:	460f      	mov	r7, r1
    476e:	4615      	mov	r5, r2
	struct bt_ad d[2] = {};
    4770:	2100      	movs	r1, #0
    4772:	2210      	movs	r2, #16
    4774:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
    4776:	461e      	mov	r6, r3
    4778:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
	struct bt_ad d[2] = {};
    477c:	f00d fd1a 	bl	121b4 <memset>
	if (use_name) {
    4780:	f1b8 0f00 	cmp.w	r8, #0
    4784:	d00e      	beq.n	47a4 <le_adv_update.constprop.0+0x44>
		if ((ad && ad_has_name(ad, ad_len)) ||
    4786:	bbac      	cbnz	r4, 47f4 <le_adv_update.constprop.0+0x94>
    4788:	2d00      	cmp	r5, #0
    478a:	d13e      	bne.n	480a <le_adv_update.constprop.0+0xaa>
		data = (struct bt_data)BT_DATA(
    478c:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 4844 <le_adv_update.constprop.0+0xe4>
    4790:	4650      	mov	r0, sl
    4792:	f00d fcb2 	bl	120fa <strlen>
    4796:	2309      	movs	r3, #9
    4798:	f88d 0001 	strb.w	r0, [sp, #1]
    479c:	f88d 3000 	strb.w	r3, [sp]
    47a0:	f8cd a004 	str.w	sl, [sp, #4]
	d[0].len = ad_len;
    47a4:	e9cd 4702 	strd	r4, r7, [sp, #8]
	if (use_name && !scannable) {
    47a8:	f1b8 0f00 	cmp.w	r8, #0
    47ac:	d02f      	beq.n	480e <le_adv_update.constprop.0+0xae>
    47ae:	f1b9 0f00 	cmp.w	r9, #0
    47b2:	d12c      	bne.n	480e <le_adv_update.constprop.0+0xae>
		d[1].len = 1;
    47b4:	2301      	movs	r3, #1
		d_len = 2;
    47b6:	2202      	movs	r2, #2
		d[1].data = &data;
    47b8:	f8cd d010 	str.w	sp, [sp, #16]
		d[1].len = 1;
    47bc:	9305      	str	r3, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    47be:	f242 0008 	movw	r0, #8200	; 0x2008
    47c2:	a902      	add	r1, sp, #8
    47c4:	f7ff ff66 	bl	4694 <hci_set_ad>
	if (err) {
    47c8:	4604      	mov	r4, r0
    47ca:	b930      	cbnz	r0, 47da <le_adv_update.constprop.0+0x7a>
	if (scannable) {
    47cc:	f1b9 0f00 	cmp.w	r9, #0
    47d0:	d11f      	bne.n	4812 <le_adv_update.constprop.0+0xb2>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    47d2:	2104      	movs	r1, #4
    47d4:	481a      	ldr	r0, [pc, #104]	; (4840 <le_adv_update.constprop.0+0xe0>)
    47d6:	f00d fdc7 	bl	12368 <atomic_or>
}
    47da:	4620      	mov	r0, r4
    47dc:	b006      	add	sp, #24
    47de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    47e2:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
    47e6:	3a08      	subs	r2, #8
    47e8:	2a01      	cmp	r2, #1
    47ea:	d925      	bls.n	4838 <le_adv_update.constprop.0+0xd8>
	for (i = 0; i < ad_len; i++) {
    47ec:	3301      	adds	r3, #1
    47ee:	429f      	cmp	r7, r3
    47f0:	d1f7      	bne.n	47e2 <le_adv_update.constprop.0+0x82>
    47f2:	e7c9      	b.n	4788 <le_adv_update.constprop.0+0x28>
    47f4:	2300      	movs	r3, #0
    47f6:	e7fa      	b.n	47ee <le_adv_update.constprop.0+0x8e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    47f8:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
    47fc:	3a08      	subs	r2, #8
    47fe:	2a01      	cmp	r2, #1
    4800:	d91a      	bls.n	4838 <le_adv_update.constprop.0+0xd8>
	for (i = 0; i < ad_len; i++) {
    4802:	3301      	adds	r3, #1
    4804:	429e      	cmp	r6, r3
    4806:	d1f7      	bne.n	47f8 <le_adv_update.constprop.0+0x98>
    4808:	e7c0      	b.n	478c <le_adv_update.constprop.0+0x2c>
    480a:	2300      	movs	r3, #0
    480c:	e7fa      	b.n	4804 <le_adv_update.constprop.0+0xa4>
	d_len = 1;
    480e:	2201      	movs	r2, #1
    4810:	e7d5      	b.n	47be <le_adv_update.constprop.0+0x5e>
		d[0].data = sd;
    4812:	2201      	movs	r2, #1
		d[0].len = sd_len;
    4814:	e9cd 5602 	strd	r5, r6, [sp, #8]
		if (use_name) {
    4818:	f1b8 0f00 	cmp.w	r8, #0
    481c:	d003      	beq.n	4826 <le_adv_update.constprop.0+0xc6>
			d[1].len = 1;
    481e:	9205      	str	r2, [sp, #20]
			d_len = 2;
    4820:	2202      	movs	r2, #2
			d[1].data = &data;
    4822:	f8cd d010 	str.w	sp, [sp, #16]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    4826:	f242 0009 	movw	r0, #8201	; 0x2009
    482a:	a902      	add	r1, sp, #8
    482c:	f7ff ff32 	bl	4694 <hci_set_ad>
		if (err) {
    4830:	2800      	cmp	r0, #0
    4832:	d0ce      	beq.n	47d2 <le_adv_update.constprop.0+0x72>
    4834:	4604      	mov	r4, r0
    4836:	e7d0      	b.n	47da <le_adv_update.constprop.0+0x7a>
			return -EINVAL;
    4838:	f06f 0415 	mvn.w	r4, #21
    483c:	e7cd      	b.n	47da <le_adv_update.constprop.0+0x7a>
    483e:	bf00      	nop
    4840:	2000002c 	.word	0x2000002c
    4844:	000162f4 	.word	0x000162f4

00004848 <set_random_address>:
{
    4848:	b570      	push	{r4, r5, r6, lr}
#define BT_ADDR_LE_NONE ((bt_addr_le_t[]) { { 0, \
			 { { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } } } })

static inline int bt_addr_cmp(const bt_addr_t *a, const bt_addr_t *b)
{
	return memcmp(a, b, sizeof(*a));
    484a:	4e15      	ldr	r6, [pc, #84]	; (48a0 <set_random_address+0x58>)
    484c:	2206      	movs	r2, #6
    484e:	f106 0131 	add.w	r1, r6, #49	; 0x31
    4852:	4605      	mov	r5, r0
    4854:	f00d fc73 	bl	1213e <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    4858:	4604      	mov	r4, r0
    485a:	b1e0      	cbz	r0, 4896 <set_random_address+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    485c:	2106      	movs	r1, #6
    485e:	f242 0005 	movw	r0, #8197	; 0x2005
    4862:	f7ff fe11 	bl	4488 <bt_hci_cmd_create>
	if (!buf) {
    4866:	4604      	mov	r4, r0
    4868:	b1b8      	cbz	r0, 489a <set_random_address+0x52>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    486a:	2206      	movs	r2, #6
    486c:	4629      	mov	r1, r5
    486e:	3008      	adds	r0, #8
    4870:	f00f fbd8 	bl	14024 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    4874:	4621      	mov	r1, r4
    4876:	2200      	movs	r2, #0
    4878:	f242 0005 	movw	r0, #8197	; 0x2005
    487c:	f7ff fe4e 	bl	451c <bt_hci_cmd_send_sync>
	if (err) {
    4880:	4604      	mov	r4, r0
    4882:	b940      	cbnz	r0, 4896 <set_random_address+0x4e>
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    4884:	2206      	movs	r2, #6
    4886:	4629      	mov	r1, r5
    4888:	f106 0031 	add.w	r0, r6, #49	; 0x31
    488c:	f00d fc67 	bl	1215e <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    4890:	2301      	movs	r3, #1
    4892:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}
    4896:	4620      	mov	r0, r4
    4898:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    489a:	f06f 0436 	mvn.w	r4, #54	; 0x36
    489e:	e7fa      	b.n	4896 <set_random_address+0x4e>
    48a0:	20000000 	.word	0x20000000

000048a4 <le_adv_set_random_addr.isra.0>:
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, u32_t options,
    48a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    48a8:	4605      	mov	r5, r0
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    48aa:	f011 0001 	ands.w	r0, r1, #1
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, u32_t options,
    48ae:	460e      	mov	r6, r1
    48b0:	4690      	mov	r8, r2
    48b2:	461c      	mov	r4, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    48b4:	d027      	beq.n	4906 <le_adv_set_random_addr.isra.0+0x62>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    48b6:	4f25      	ldr	r7, [pc, #148]	; (494c <le_adv_set_random_addr.isra.0+0xa8>)
    48b8:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    48bc:	5cfb      	ldrb	r3, [r7, r3]
    48be:	ea4f 09c5 	mov.w	r9, r5, lsl #3
    48c2:	2b01      	cmp	r3, #1
    48c4:	d008      	beq.n	48d8 <le_adv_set_random_addr.isra.0+0x34>
			*own_addr_type = id_addr->type;
    48c6:	eba9 0505 	sub.w	r5, r9, r5
    48ca:	5d7b      	ldrb	r3, [r7, r5]
    48cc:	7023      	strb	r3, [r4, #0]
		if (dir_adv) {
    48ce:	f1b8 0f00 	cmp.w	r8, #0
    48d2:	d10c      	bne.n	48ee <le_adv_set_random_addr.isra.0+0x4a>
	return 0;
    48d4:	2000      	movs	r0, #0
    48d6:	e007      	b.n	48e8 <le_adv_set_random_addr.isra.0+0x44>
				err = set_adv_random_address(adv, &id_addr->a);
    48d8:	2007      	movs	r0, #7
    48da:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    48de:	4438      	add	r0, r7
    48e0:	f7ff ffb2 	bl	4848 <set_random_address>
				if (err) {
    48e4:	2800      	cmp	r0, #0
    48e6:	d0ee      	beq.n	48c6 <le_adv_set_random_addr.isra.0+0x22>
}
    48e8:	b003      	add	sp, #12
    48ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (IS_ENABLED(CONFIG_BT_SMP) &&
    48ee:	f897 00a0 	ldrb.w	r0, [r7, #160]	; 0xa0
    48f2:	f010 0040 	ands.w	r0, r0, #64	; 0x40
    48f6:	d0f7      	beq.n	48e8 <le_adv_set_random_addr.isra.0+0x44>
			    BT_FEAT_LE_PRIVACY(bt_dev.le.features) &&
    48f8:	f016 0020 	ands.w	r0, r6, #32
    48fc:	d0f4      	beq.n	48e8 <le_adv_set_random_addr.isra.0+0x44>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    48fe:	f043 0302 	orr.w	r3, r3, #2
    4902:	7023      	strb	r3, [r4, #0]
    4904:	e7e6      	b.n	48d4 <le_adv_set_random_addr.isra.0+0x30>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    4906:	074b      	lsls	r3, r1, #29
    4908:	d510      	bpl.n	492c <le_adv_set_random_addr.isra.0+0x88>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    490a:	4e10      	ldr	r6, [pc, #64]	; (494c <le_adv_set_random_addr.isra.0+0xa8>)
    490c:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    4910:	5cf3      	ldrb	r3, [r6, r3]
    4912:	00ef      	lsls	r7, r5, #3
    4914:	2b01      	cmp	r3, #1
    4916:	d105      	bne.n	4924 <le_adv_set_random_addr.isra.0+0x80>
				err = set_adv_random_address(adv, &id_addr->a);
    4918:	2007      	movs	r0, #7
    491a:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    491e:	4430      	add	r0, r6
    4920:	f7ff ff92 	bl	4848 <set_random_address>
			*own_addr_type = id_addr->type;
    4924:	1b7d      	subs	r5, r7, r5
    4926:	5d73      	ldrb	r3, [r6, r5]
			*own_addr_type = BT_ADDR_LE_RANDOM;
    4928:	7023      	strb	r3, [r4, #0]
		if (err) {
    492a:	e7dd      	b.n	48e8 <le_adv_set_random_addr.isra.0+0x44>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    492c:	2106      	movs	r1, #6
    492e:	4668      	mov	r0, sp
    4930:	f001 fa5c 	bl	5dec <bt_rand>
	if (err) {
    4934:	b940      	cbnz	r0, 4948 <le_adv_set_random_addr.isra.0+0xa4>
	nrpa.val[5] &= 0x3f;
    4936:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
    493a:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
    493c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4940:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
    4944:	f7ff ff80 	bl	4848 <set_random_address>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    4948:	2301      	movs	r3, #1
    494a:	e7ed      	b.n	4928 <le_adv_set_random_addr.isra.0+0x84>
    494c:	20000000 	.word	0x20000000

00004950 <bt_id_add>:
{
    4950:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    4952:	4f4c      	ldr	r7, [pc, #304]	; (4a84 <bt_id_add+0x134>)
{
    4954:	4604      	mov	r4, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    4956:	f897 20cc 	ldrb.w	r2, [r7, #204]	; 0xcc
    495a:	463d      	mov	r5, r7
    495c:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
    4960:	b10a      	cbz	r2, 4966 <bt_id_add+0x16>
    4962:	4293      	cmp	r3, r2
    4964:	d908      	bls.n	4978 <bt_id_add+0x28>
		bt_dev.le.rl_entries++;
    4966:	3301      	adds	r3, #1
    4968:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
		keys->state |= BT_KEYS_ID_ADDED;
    496c:	7a23      	ldrb	r3, [r4, #8]
    496e:	f043 0304 	orr.w	r3, r3, #4
    4972:	7223      	strb	r3, [r4, #8]
}
    4974:	b003      	add	sp, #12
    4976:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    4978:	2100      	movs	r1, #0
    497a:	2206      	movs	r2, #6
    497c:	4608      	mov	r0, r1
    497e:	f001 fd5b 	bl	6438 <bt_conn_lookup_state_le>
	if (conn) {
    4982:	4606      	mov	r6, r0
    4984:	b168      	cbz	r0, 49a2 <bt_id_add+0x52>
    4986:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    498a:	f107 0098 	add.w	r0, r7, #152	; 0x98
    498e:	f00d fceb 	bl	12368 <atomic_or>
	keys->state |= flag;
    4992:	7a23      	ldrb	r3, [r4, #8]
		bt_conn_unref(conn);
    4994:	4630      	mov	r0, r6
	keys->state |= flag;
    4996:	f043 0301 	orr.w	r3, r3, #1
    499a:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
    499c:	f00d ff30 	bl	12800 <bt_conn_unref>
		return;
    49a0:	e7e8      	b.n	4974 <bt_id_add+0x24>
	func(&bt_dev.adv, data);
    49a2:	4601      	mov	r1, r0
    49a4:	f107 0018 	add.w	r0, r7, #24
    49a8:	f00d fd18 	bl	123dc <adv_pause_enabled>
	if (bt_dev.le.rl_entries) {
    49ac:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
    49b0:	b143      	cbz	r3, 49c4 <bt_id_add+0x74>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    49b2:	4630      	mov	r0, r6
    49b4:	f00d fd68 	bl	12488 <addr_res_enable>
		if (err) {
    49b8:	b120      	cbz	r0, 49c4 <bt_id_add+0x74>
			BT_WARN("Failed to disable address resolution");
    49ba:	2157      	movs	r1, #87	; 0x57
    49bc:	4832      	ldr	r0, [pc, #200]	; (4a88 <bt_id_add+0x138>)
		BT_WARN("Set privacy mode command is not supported");
    49be:	f00c fa0d 	bl	10ddc <printk>
	if (err) {
    49c2:	e01c      	b.n	49fe <bt_id_add+0xae>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
    49c4:	f895 20cd 	ldrb.w	r2, [r5, #205]	; 0xcd
    49c8:	f895 30cc 	ldrb.w	r3, [r5, #204]	; 0xcc
    49cc:	429a      	cmp	r2, r3
    49ce:	d11e      	bne.n	4a0e <bt_id_add+0xbe>
		BT_WARN("Resolving list size exceeded. Switching to host.");
    49d0:	2157      	movs	r1, #87	; 0x57
    49d2:	482e      	ldr	r0, [pc, #184]	; (4a8c <bt_id_add+0x13c>)
    49d4:	f00c fa02 	bl	10ddc <printk>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
    49d8:	2200      	movs	r2, #0
    49da:	f242 0029 	movw	r0, #8233	; 0x2029
    49de:	4611      	mov	r1, r2
    49e0:	f7ff fd9c 	bl	451c <bt_hci_cmd_send_sync>
		if (err) {
    49e4:	b110      	cbz	r0, 49ec <bt_id_add+0x9c>
			BT_ERR("Failed to clear resolution list");
    49e6:	2145      	movs	r1, #69	; 0x45
    49e8:	4829      	ldr	r0, [pc, #164]	; (4a90 <bt_id_add+0x140>)
    49ea:	e7e8      	b.n	49be <bt_id_add+0x6e>
		bt_dev.le.rl_entries++;
    49ec:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    49f0:	3301      	adds	r3, #1
    49f2:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
		keys->state |= BT_KEYS_ID_ADDED;
    49f6:	7a23      	ldrb	r3, [r4, #8]
    49f8:	f043 0304 	orr.w	r3, r3, #4
    49fc:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    49fe:	2001      	movs	r0, #1
    4a00:	f00d fd42 	bl	12488 <addr_res_enable>
	func(&bt_dev.adv, data);
    4a04:	2100      	movs	r1, #0
    4a06:	4823      	ldr	r0, [pc, #140]	; (4a94 <bt_id_add+0x144>)
    4a08:	f00d fcfd 	bl	12406 <adv_unpause_enabled>
}
    4a0c:	e7b2      	b.n	4974 <bt_id_add+0x24>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
    4a0e:	1c67      	adds	r7, r4, #1
    4a10:	4638      	mov	r0, r7
    4a12:	f104 012a 	add.w	r1, r4, #42	; 0x2a
    4a16:	f00d fd06 	bl	12426 <hci_id_add.isra.0>
	if (err) {
    4a1a:	4606      	mov	r6, r0
    4a1c:	b110      	cbz	r0, 4a24 <bt_id_add+0xd4>
		BT_ERR("Failed to add IRK to controller");
    4a1e:	2145      	movs	r1, #69	; 0x45
    4a20:	481d      	ldr	r0, [pc, #116]	; (4a98 <bt_id_add+0x148>)
    4a22:	e7cc      	b.n	49be <bt_id_add+0x6e>
	bt_dev.le.rl_entries++;
    4a24:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    4a28:	3301      	adds	r3, #1
    4a2a:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
	keys->state |= BT_KEYS_ID_ADDED;
    4a2e:	7a23      	ldrb	r3, [r4, #8]
    4a30:	f043 0304 	orr.w	r3, r3, #4
    4a34:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
    4a36:	f895 306f 	ldrb.w	r3, [r5, #111]	; 0x6f
    4a3a:	075b      	lsls	r3, r3, #29
    4a3c:	d402      	bmi.n	4a44 <bt_id_add+0xf4>
		BT_WARN("Set privacy mode command is not supported");
    4a3e:	2157      	movs	r1, #87	; 0x57
    4a40:	4816      	ldr	r0, [pc, #88]	; (4a9c <bt_id_add+0x14c>)
    4a42:	e7bc      	b.n	49be <bt_id_add+0x6e>
	bt_addr_le_copy(&cp.id_addr, addr);
    4a44:	4639      	mov	r1, r7
    4a46:	4668      	mov	r0, sp
    4a48:	f00d fc8b 	bl	12362 <bt_addr_le_copy>
	cp.mode = mode;
    4a4c:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    4a4e:	2108      	movs	r1, #8
    4a50:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
    4a54:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    4a58:	f7ff fd16 	bl	4488 <bt_hci_cmd_create>
	if (!buf) {
    4a5c:	4604      	mov	r4, r0
    4a5e:	b910      	cbnz	r0, 4a66 <bt_id_add+0x116>
		BT_ERR("Failed to set privacy mode");
    4a60:	2145      	movs	r1, #69	; 0x45
    4a62:	480f      	ldr	r0, [pc, #60]	; (4aa0 <bt_id_add+0x150>)
    4a64:	e7ab      	b.n	49be <bt_id_add+0x6e>
	net_buf_add_mem(buf, &cp, sizeof(cp));
    4a66:	2208      	movs	r2, #8
    4a68:	4669      	mov	r1, sp
    4a6a:	4410      	add	r0, r2
    4a6c:	f00f fada 	bl	14024 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
    4a70:	4632      	mov	r2, r6
    4a72:	4621      	mov	r1, r4
    4a74:	f242 004e 	movw	r0, #8270	; 0x204e
    4a78:	f7ff fd50 	bl	451c <bt_hci_cmd_send_sync>
	if (err) {
    4a7c:	2800      	cmp	r0, #0
    4a7e:	d0be      	beq.n	49fe <bt_id_add+0xae>
    4a80:	e7ee      	b.n	4a60 <bt_id_add+0x110>
    4a82:	bf00      	nop
    4a84:	20000000 	.word	0x20000000
    4a88:	000177ae 	.word	0x000177ae
    4a8c:	000177d8 	.word	0x000177d8
    4a90:	0001780e 	.word	0x0001780e
    4a94:	20000018 	.word	0x20000018
    4a98:	00017833 	.word	0x00017833
    4a9c:	00017858 	.word	0x00017858
    4aa0:	00017887 	.word	0x00017887

00004aa4 <bt_id_del>:
{
    4aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size ||
    4aa8:	4f3f      	ldr	r7, [pc, #252]	; (4ba8 <bt_id_del+0x104>)
{
    4aaa:	4604      	mov	r4, r0
	if (!bt_dev.le.rl_size ||
    4aac:	f897 20cc 	ldrb.w	r2, [r7, #204]	; 0xcc
    4ab0:	463d      	mov	r5, r7
    4ab2:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
    4ab6:	b112      	cbz	r2, 4abe <bt_id_del+0x1a>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    4ab8:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
    4aba:	4293      	cmp	r3, r2
    4abc:	dd08      	ble.n	4ad0 <bt_id_del+0x2c>
		bt_dev.le.rl_entries--;
    4abe:	3b01      	subs	r3, #1
    4ac0:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
		keys->state &= ~BT_KEYS_ID_ADDED;
    4ac4:	7a23      	ldrb	r3, [r4, #8]
    4ac6:	f023 0304 	bic.w	r3, r3, #4
    4aca:	7223      	strb	r3, [r4, #8]
}
    4acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    4ad0:	2100      	movs	r1, #0
    4ad2:	2206      	movs	r2, #6
    4ad4:	4608      	mov	r0, r1
    4ad6:	f001 fcaf 	bl	6438 <bt_conn_lookup_state_le>
	if (conn) {
    4ada:	4606      	mov	r6, r0
    4adc:	b170      	cbz	r0, 4afc <bt_id_del+0x58>
    4ade:	f107 0098 	add.w	r0, r7, #152	; 0x98
    4ae2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    4ae6:	f00d fc3f 	bl	12368 <atomic_or>
	keys->state |= flag;
    4aea:	7a23      	ldrb	r3, [r4, #8]
		bt_conn_unref(conn);
    4aec:	4630      	mov	r0, r6
	keys->state |= flag;
    4aee:	f043 0302 	orr.w	r3, r3, #2
    4af2:	7223      	strb	r3, [r4, #8]
}
    4af4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
    4af8:	f00d be82 	b.w	12800 <bt_conn_unref>
	func(&bt_dev.adv, data);
    4afc:	4601      	mov	r1, r0
    4afe:	f107 0018 	add.w	r0, r7, #24
    4b02:	f00d fc6b 	bl	123dc <adv_pause_enabled>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    4b06:	4630      	mov	r0, r6
    4b08:	f00d fcbe 	bl	12488 <addr_res_enable>
	if (err) {
    4b0c:	4606      	mov	r6, r0
    4b0e:	b180      	cbz	r0, 4b32 <bt_id_del+0x8e>
		BT_ERR("Disabling address resolution failed (err %d)", err);
    4b10:	4602      	mov	r2, r0
    4b12:	2145      	movs	r1, #69	; 0x45
    4b14:	4825      	ldr	r0, [pc, #148]	; (4bac <bt_id_del+0x108>)
    4b16:	f00c f961 	bl	10ddc <printk>
	if (bt_dev.le.rl_entries) {
    4b1a:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    4b1e:	b113      	cbz	r3, 4b26 <bt_id_del+0x82>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    4b20:	2001      	movs	r0, #1
    4b22:	f00d fcb1 	bl	12488 <addr_res_enable>
}
    4b26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	func(&bt_dev.adv, data);
    4b2a:	2100      	movs	r1, #0
    4b2c:	4820      	ldr	r0, [pc, #128]	; (4bb0 <bt_id_del+0x10c>)
    4b2e:	f00d bc6a 	b.w	12406 <adv_unpause_enabled>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    4b32:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
    4b36:	f897 20cc 	ldrb.w	r2, [r7, #204]	; 0xcc
    4b3a:	429a      	cmp	r2, r3
    4b3c:	d20c      	bcs.n	4b58 <bt_id_del+0xb4>
		bt_dev.le.rl_entries--;
    4b3e:	3b01      	subs	r3, #1
    4b40:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
		keys->state &= ~BT_KEYS_ID_ADDED;
    4b44:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    4b46:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
    4b48:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    4b4c:	2002      	movs	r0, #2
    4b4e:	4919      	ldr	r1, [pc, #100]	; (4bb4 <bt_id_del+0x110>)
		keys->state &= ~BT_KEYS_ID_ADDED;
    4b50:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    4b52:	f006 fcb3 	bl	b4bc <bt_keys_foreach>
		goto done;
    4b56:	e7e0      	b.n	4b1a <bt_id_del+0x76>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
    4b58:	2107      	movs	r1, #7
    4b5a:	f242 0028 	movw	r0, #8232	; 0x2028
    4b5e:	f7ff fc93 	bl	4488 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
    4b62:	f104 0801 	add.w	r8, r4, #1
	if (!buf) {
    4b66:	4607      	mov	r7, r0
    4b68:	b920      	cbnz	r0, 4b74 <bt_id_del+0xd0>
		BT_ERR("Failed to remove IRK from controller");
    4b6a:	2145      	movs	r1, #69	; 0x45
    4b6c:	4812      	ldr	r0, [pc, #72]	; (4bb8 <bt_id_del+0x114>)
    4b6e:	f00c f935 	bl	10ddc <printk>
		goto done;
    4b72:	e7d2      	b.n	4b1a <bt_id_del+0x76>
	cp = net_buf_add(buf, sizeof(*cp));
    4b74:	2107      	movs	r1, #7
    4b76:	3008      	adds	r0, #8
    4b78:	f007 f8ee 	bl	bd58 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    4b7c:	4641      	mov	r1, r8
    4b7e:	f00d fbf0 	bl	12362 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
    4b82:	4632      	mov	r2, r6
    4b84:	4639      	mov	r1, r7
    4b86:	f242 0028 	movw	r0, #8232	; 0x2028
    4b8a:	f7ff fcc7 	bl	451c <bt_hci_cmd_send_sync>
	if (err) {
    4b8e:	2800      	cmp	r0, #0
    4b90:	d1eb      	bne.n	4b6a <bt_id_del+0xc6>
	bt_dev.le.rl_entries--;
    4b92:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    4b96:	3b01      	subs	r3, #1
    4b98:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
	keys->state &= ~BT_KEYS_ID_ADDED;
    4b9c:	7a23      	ldrb	r3, [r4, #8]
    4b9e:	f023 0304 	bic.w	r3, r3, #4
    4ba2:	7223      	strb	r3, [r4, #8]
    4ba4:	e7b9      	b.n	4b1a <bt_id_del+0x76>
    4ba6:	bf00      	nop
    4ba8:	20000000 	.word	0x20000000
    4bac:	000178a7 	.word	0x000178a7
    4bb0:	20000018 	.word	0x20000018
    4bb4:	00012477 	.word	0x00012477
    4bb8:	000178d9 	.word	0x000178d9

00004bbc <id_create.isra.0>:
static void id_create(u8_t id, bt_addr_le_t *addr, u8_t *irk)
    4bbc:	b530      	push	{r4, r5, lr}
    4bbe:	4d17      	ldr	r5, [pc, #92]	; (4c1c <id_create.isra.0+0x60>)
    4bc0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    4bc4:	460c      	mov	r4, r1
static void id_create(u8_t id, bt_addr_le_t *addr, u8_t *irk)
    4bc6:	b085      	sub	sp, #20
    4bc8:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    4bca:	b1a9      	cbz	r1, 4bf8 <id_create.isra.0+0x3c>
    4bcc:	2300      	movs	r3, #0
    4bce:	4620      	mov	r0, r4
    4bd0:	a902      	add	r1, sp, #8
    4bd2:	9302      	str	r3, [sp, #8]
    4bd4:	f8cd 300b 	str.w	r3, [sp, #11]
    4bd8:	f00d fbd1 	bl	1237e <bt_addr_le_cmp>
    4bdc:	b160      	cbz	r0, 4bf8 <id_create.isra.0+0x3c>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    4bde:	4621      	mov	r1, r4
    4be0:	4628      	mov	r0, r5
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    4be2:	f00d fbbe 	bl	12362 <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    4be6:	480e      	ldr	r0, [pc, #56]	; (4c20 <id_create.isra.0+0x64>)
    4be8:	f00d fbb8 	bl	1235c <atomic_get>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    4bec:	0783      	lsls	r3, r0, #30
    4bee:	d501      	bpl.n	4bf4 <id_create.isra.0+0x38>
		bt_settings_save_id();
    4bf0:	f7fe ff8e 	bl	3b10 <bt_settings_save_id>
}
    4bf4:	b005      	add	sp, #20
    4bf6:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
    4bf8:	4668      	mov	r0, sp
    4bfa:	f00d fc95 	bl	12528 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    4bfe:	4668      	mov	r0, sp
    4c00:	f7ff f82c 	bl	3c5c <id_find>
    4c04:	2800      	cmp	r0, #0
    4c06:	daf7      	bge.n	4bf8 <id_create.isra.0+0x3c>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    4c08:	4669      	mov	r1, sp
    4c0a:	4628      	mov	r0, r5
    4c0c:	f00d fba9 	bl	12362 <bt_addr_le_copy>
		if (addr) {
    4c10:	2c00      	cmp	r4, #0
    4c12:	d0e8      	beq.n	4be6 <id_create.isra.0+0x2a>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    4c14:	4629      	mov	r1, r5
    4c16:	4620      	mov	r0, r4
    4c18:	e7e3      	b.n	4be2 <id_create.isra.0+0x26>
    4c1a:	bf00      	nop
    4c1c:	20000000 	.word	0x20000000
    4c20:	20000098 	.word	0x20000098

00004c24 <bt_send>:
	return bt_dev.drv->send(buf);
    4c24:	4b02      	ldr	r3, [pc, #8]	; (4c30 <bt_send+0xc>)
    4c26:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    4c2a:	691b      	ldr	r3, [r3, #16]
    4c2c:	4718      	bx	r3
    4c2e:	bf00      	nop
    4c30:	20000000 	.word	0x20000000

00004c34 <bt_hci_cmd_send>:
{
    4c34:	b538      	push	{r3, r4, r5, lr}
    4c36:	4605      	mov	r5, r0
	if (!buf) {
    4c38:	460c      	mov	r4, r1
    4c3a:	b919      	cbnz	r1, 4c44 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    4c3c:	f7ff fc24 	bl	4488 <bt_hci_cmd_create>
		if (!buf) {
    4c40:	4604      	mov	r4, r0
    4c42:	b1c0      	cbz	r0, 4c76 <bt_hci_cmd_send+0x42>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    4c44:	f640 4335 	movw	r3, #3125	; 0xc35
    4c48:	429d      	cmp	r5, r3
    4c4a:	d10e      	bne.n	4c6a <bt_hci_cmd_send+0x36>
		err = bt_send(buf);
    4c4c:	4620      	mov	r0, r4
    4c4e:	f7ff ffe9 	bl	4c24 <bt_send>
		if (err) {
    4c52:	4605      	mov	r5, r0
    4c54:	b138      	cbz	r0, 4c66 <bt_hci_cmd_send+0x32>
			BT_ERR("Unable to send to driver (err %d)", err);
    4c56:	4602      	mov	r2, r0
    4c58:	2145      	movs	r1, #69	; 0x45
    4c5a:	4808      	ldr	r0, [pc, #32]	; (4c7c <bt_hci_cmd_send+0x48>)
    4c5c:	f00c f8be 	bl	10ddc <printk>
			net_buf_unref(buf);
    4c60:	4620      	mov	r0, r4
    4c62:	f006 ff07 	bl	ba74 <net_buf_unref>
}
    4c66:	4628      	mov	r0, r5
    4c68:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    4c6a:	4621      	mov	r1, r4
    4c6c:	4804      	ldr	r0, [pc, #16]	; (4c80 <bt_hci_cmd_send+0x4c>)
    4c6e:	f006 fecd 	bl	ba0c <net_buf_put>
	return 0;
    4c72:	2500      	movs	r5, #0
    4c74:	e7f7      	b.n	4c66 <bt_hci_cmd_send+0x32>
			return -ENOBUFS;
    4c76:	f06f 0536 	mvn.w	r5, #54	; 0x36
    4c7a:	e7f4      	b.n	4c66 <bt_hci_cmd_send+0x32>
    4c7c:	00017903 	.word	0x00017903
    4c80:	20000108 	.word	0x20000108

00004c84 <report_completed_packet>:
{
    4c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c86:	4604      	mov	r4, r0
	u16_t handle = acl(buf)->handle;
    4c88:	8ac6      	ldrh	r6, [r0, #22]
 *
 * @param buf Buffer to destroy.
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    4c8a:	7980      	ldrb	r0, [r0, #6]
    4c8c:	f006 fd52 	bl	b734 <net_buf_pool_get>

	k_lifo_put(&pool->free, buf);
    4c90:	4621      	mov	r1, r4
    4c92:	f010 f9ad 	bl	14ff0 <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    4c96:	4b24      	ldr	r3, [pc, #144]	; (4d28 <report_completed_packet+0xa4>)
    4c98:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
    4c9c:	069b      	lsls	r3, r3, #26
    4c9e:	d541      	bpl.n	4d24 <report_completed_packet+0xa0>
	conn = bt_conn_lookup_index(acl(buf)->index);
    4ca0:	7d60      	ldrb	r0, [r4, #21]
    4ca2:	f001 feb5 	bl	6a10 <bt_conn_lookup_index>
	if (!conn) {
    4ca6:	4605      	mov	r5, r0
    4ca8:	b930      	cbnz	r0, 4cb8 <report_completed_packet+0x34>
		BT_WARN("Unable to look up conn with index 0x%02x",
    4caa:	7d62      	ldrb	r2, [r4, #21]
    4cac:	2157      	movs	r1, #87	; 0x57
}
    4cae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_WARN("Unable to look up conn with index 0x%02x",
    4cb2:	481e      	ldr	r0, [pc, #120]	; (4d2c <report_completed_packet+0xa8>)
    4cb4:	f00c b892 	b.w	10ddc <printk>
	if (!bt_conn_is_handle_valid(conn)) {
    4cb8:	7b43      	ldrb	r3, [r0, #13]
struct bt_conn *bt_conn_lookup_handle(u16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	return conn->state == BT_CONN_CONNECTED ||
	       conn->state == BT_CONN_DISCONNECT ||
    4cba:	1fda      	subs	r2, r3, #7
    4cbc:	2a01      	cmp	r2, #1
    4cbe:	d90a      	bls.n	4cd6 <report_completed_packet+0x52>
    4cc0:	2b01      	cmp	r3, #1
    4cc2:	d008      	beq.n	4cd6 <report_completed_packet+0x52>
		BT_WARN("Not reporting packet for non-connected conn");
    4cc4:	481a      	ldr	r0, [pc, #104]	; (4d30 <report_completed_packet+0xac>)
    4cc6:	2157      	movs	r1, #87	; 0x57
    4cc8:	f00c f888 	bl	10ddc <printk>
		bt_conn_unref(conn);
    4ccc:	4628      	mov	r0, r5
}
    4cce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    4cd2:	f00d bd95 	b.w	12800 <bt_conn_unref>
	bt_conn_unref(conn);
    4cd6:	4628      	mov	r0, r5
    4cd8:	f00d fd92 	bl	12800 <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
    4cdc:	2105      	movs	r1, #5
    4cde:	f640 4035 	movw	r0, #3125	; 0xc35
    4ce2:	f7ff fbd1 	bl	4488 <bt_hci_cmd_create>
	if (!buf) {
    4ce6:	4604      	mov	r4, r0
    4ce8:	b928      	cbnz	r0, 4cf6 <report_completed_packet+0x72>
}
    4cea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to allocate new HCI command");
    4cee:	2145      	movs	r1, #69	; 0x45
    4cf0:	4810      	ldr	r0, [pc, #64]	; (4d34 <report_completed_packet+0xb0>)
    4cf2:	f00c b873 	b.w	10ddc <printk>
	cp = net_buf_add(buf, sizeof(*cp));
    4cf6:	f100 0708 	add.w	r7, r0, #8
    4cfa:	2101      	movs	r1, #1
    4cfc:	4638      	mov	r0, r7
    4cfe:	f007 f82b 	bl	bd58 <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
    4d02:	2501      	movs	r5, #1
	hc = net_buf_add(buf, sizeof(*hc));
    4d04:	2104      	movs	r1, #4
	cp->num_handles = sys_cpu_to_le16(1);
    4d06:	7005      	strb	r5, [r0, #0]
	hc = net_buf_add(buf, sizeof(*hc));
    4d08:	4638      	mov	r0, r7
    4d0a:	f007 f825 	bl	bd58 <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
    4d0e:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
    4d10:	8006      	strh	r6, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
    4d12:	7085      	strb	r5, [r0, #2]
    4d14:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    4d16:	4621      	mov	r1, r4
}
    4d18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    4d1c:	f640 4035 	movw	r0, #3125	; 0xc35
    4d20:	f7ff bf88 	b.w	4c34 <bt_hci_cmd_send>
}
    4d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4d26:	bf00      	nop
    4d28:	20000000 	.word	0x20000000
    4d2c:	0001792a 	.word	0x0001792a
    4d30:	00017958 	.word	0x00017958
    4d34:	00017989 	.word	0x00017989

00004d38 <le_ltk_request>:
{
    4d38:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
    4d3a:	6884      	ldr	r4, [r0, #8]
{
    4d3c:	b087      	sub	sp, #28
	handle = sys_le16_to_cpu(evt->handle);
    4d3e:	8826      	ldrh	r6, [r4, #0]
    4d40:	b2b7      	uxth	r7, r6
	conn = bt_conn_lookup_handle(handle);
    4d42:	4638      	mov	r0, r7
    4d44:	f001 fb3e 	bl	63c4 <bt_conn_lookup_handle>
	if (!conn) {
    4d48:	4605      	mov	r5, r0
    4d4a:	b930      	cbnz	r0, 4d5a <le_ltk_request+0x22>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    4d4c:	463a      	mov	r2, r7
    4d4e:	2145      	movs	r1, #69	; 0x45
    4d50:	481f      	ldr	r0, [pc, #124]	; (4dd0 <le_ltk_request+0x98>)
    4d52:	f00c f843 	bl	10ddc <printk>
}
    4d56:	b007      	add	sp, #28
    4d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
    4d5a:	af02      	add	r7, sp, #8
    4d5c:	f8d4 2002 	ldr.w	r2, [r4, #2]
    4d60:	f8d4 3006 	ldr.w	r3, [r4, #6]
    4d64:	9701      	str	r7, [sp, #4]
    4d66:	8961      	ldrh	r1, [r4, #10]
    4d68:	9100      	str	r1, [sp, #0]
    4d6a:	f00e ffea 	bl	13d42 <bt_smp_request_ltk>
    4d6e:	b1f0      	cbz	r0, 4dae <le_ltk_request+0x76>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    4d70:	2112      	movs	r1, #18
    4d72:	f242 001a 	movw	r0, #8218	; 0x201a
    4d76:	f7ff fb87 	bl	4488 <bt_hci_cmd_create>
	if (!buf) {
    4d7a:	4604      	mov	r4, r0
    4d7c:	b938      	cbnz	r0, 4d8e <le_ltk_request+0x56>
		BT_ERR("Out of command buffers");
    4d7e:	2145      	movs	r1, #69	; 0x45
    4d80:	4814      	ldr	r0, [pc, #80]	; (4dd4 <le_ltk_request+0x9c>)
    4d82:	f00c f82b 	bl	10ddc <printk>
	bt_conn_unref(conn);
    4d86:	4628      	mov	r0, r5
    4d88:	f00d fd3a 	bl	12800 <bt_conn_unref>
    4d8c:	e7e3      	b.n	4d56 <le_ltk_request+0x1e>
	cp = net_buf_add(buf, sizeof(*cp));
    4d8e:	2112      	movs	r1, #18
    4d90:	3008      	adds	r0, #8
    4d92:	f006 ffe1 	bl	bd58 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    4d96:	4639      	mov	r1, r7
    4d98:	2210      	movs	r2, #16
	cp->handle = sys_cpu_to_le16(handle);
    4d9a:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    4d9e:	f00d f9de 	bl	1215e <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    4da2:	4621      	mov	r1, r4
    4da4:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    4da8:	f7ff ff44 	bl	4c34 <bt_hci_cmd_send>
    4dac:	e7eb      	b.n	4d86 <le_ltk_request+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    4dae:	2102      	movs	r1, #2
    4db0:	f242 001b 	movw	r0, #8219	; 0x201b
    4db4:	f7ff fb68 	bl	4488 <bt_hci_cmd_create>
	if (!buf) {
    4db8:	4604      	mov	r4, r0
    4dba:	2800      	cmp	r0, #0
    4dbc:	d0df      	beq.n	4d7e <le_ltk_request+0x46>
	cp = net_buf_add(buf, sizeof(*cp));
    4dbe:	2102      	movs	r1, #2
    4dc0:	3008      	adds	r0, #8
    4dc2:	f006 ffc9 	bl	bd58 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    4dc6:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
    4dc8:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    4dca:	f242 001b 	movw	r0, #8219	; 0x201b
    4dce:	e7eb      	b.n	4da8 <le_ltk_request+0x70>
    4dd0:	00017498 	.word	0x00017498
    4dd4:	000179b1 	.word	0x000179b1

00004dd8 <conn_auto_initiate>:
{
    4dd8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    4dda:	7b43      	ldrb	r3, [r0, #13]
{
    4ddc:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    4dde:	2b07      	cmp	r3, #7
    4de0:	d11e      	bne.n	4e20 <conn_auto_initiate+0x48>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    4de2:	1d06      	adds	r6, r0, #4
    4de4:	4630      	mov	r0, r6
    4de6:	f00d fab9 	bl	1235c <atomic_get>
    4dea:	0485      	lsls	r5, r0, #18
    4dec:	d41a      	bmi.n	4e24 <conn_auto_initiate+0x4c>
    4dee:	78e3      	ldrb	r3, [r4, #3]
    4df0:	b123      	cbz	r3, 4dfc <conn_auto_initiate+0x24>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    4df2:	4b2e      	ldr	r3, [pc, #184]	; (4eac <conn_auto_initiate+0xd4>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    4df4:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
    4df8:	0718      	lsls	r0, r3, #28
    4dfa:	d513      	bpl.n	4e24 <conn_auto_initiate+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    4dfc:	2102      	movs	r1, #2
    4dfe:	f242 0016 	movw	r0, #8214	; 0x2016
    4e02:	f7ff fb41 	bl	4488 <bt_hci_cmd_create>
	if (!buf) {
    4e06:	4605      	mov	r5, r0
    4e08:	b160      	cbz	r0, 4e24 <conn_auto_initiate+0x4c>
	cp = net_buf_add(buf, sizeof(*cp));
    4e0a:	2102      	movs	r1, #2
    4e0c:	3008      	adds	r0, #8
    4e0e:	f006 ffa3 	bl	bd58 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    4e12:	8823      	ldrh	r3, [r4, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    4e14:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(conn->handle);
    4e16:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    4e18:	f242 0016 	movw	r0, #8214	; 0x2016
    4e1c:	f7ff ff0a 	bl	4c34 <bt_hci_cmd_send>
}
    4e20:	b002      	add	sp, #8
    4e22:	bd70      	pop	{r4, r5, r6, pc}
    4e24:	4630      	mov	r0, r6
    4e26:	f00d fa99 	bl	1235c <atomic_get>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    4e2a:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    4e2e:	4d1f      	ldr	r5, [pc, #124]	; (4eac <conn_auto_initiate+0xd4>)
    4e30:	d113      	bne.n	4e5a <conn_auto_initiate+0x82>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    4e32:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
    4e36:	07d9      	lsls	r1, r3, #31
    4e38:	d50f      	bpl.n	4e5a <conn_auto_initiate+0x82>
		err = bt_le_set_phy(conn,
    4e3a:	2202      	movs	r2, #2
    4e3c:	4620      	mov	r0, r4
    4e3e:	4611      	mov	r1, r2
    4e40:	f00d fbb7 	bl	125b2 <bt_le_set_phy>
		if (!err) {
    4e44:	4602      	mov	r2, r0
    4e46:	b920      	cbnz	r0, 4e52 <conn_auto_initiate+0x7a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    4e48:	2180      	movs	r1, #128	; 0x80
    4e4a:	4630      	mov	r0, r6
    4e4c:	f00d fa8c 	bl	12368 <atomic_or>
			return;
    4e50:	e7e6      	b.n	4e20 <conn_auto_initiate+0x48>
		BT_ERR("Failed to set LE PHY (%d)", err);
    4e52:	2145      	movs	r1, #69	; 0x45
    4e54:	4816      	ldr	r0, [pc, #88]	; (4eb0 <conn_auto_initiate+0xd8>)
    4e56:	f00b ffc1 	bl	10ddc <printk>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    4e5a:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
    4e5e:	069a      	lsls	r2, r3, #26
    4e60:	d512      	bpl.n	4e88 <conn_auto_initiate+0xb0>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    4e62:	f10d 0106 	add.w	r1, sp, #6
    4e66:	a801      	add	r0, sp, #4
    4e68:	f7ff fbc6 	bl	45f8 <hci_le_read_max_data_len>
		if (!err) {
    4e6c:	b960      	cbnz	r0, 4e88 <conn_auto_initiate+0xb0>
			err = bt_le_set_data_len(conn, tx_octets, tx_time);
    4e6e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    4e72:	4620      	mov	r0, r4
    4e74:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    4e78:	f00d fb7e 	bl	12578 <bt_le_set_data_len>
			if (err) {
    4e7c:	4602      	mov	r2, r0
    4e7e:	b118      	cbz	r0, 4e88 <conn_auto_initiate+0xb0>
				BT_ERR("Failed to set data len (%d)", err);
    4e80:	2145      	movs	r1, #69	; 0x45
    4e82:	480c      	ldr	r0, [pc, #48]	; (4eb4 <conn_auto_initiate+0xdc>)
    4e84:	f00b ffaa 	bl	10ddc <printk>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    4e88:	78e3      	ldrb	r3, [r4, #3]
    4e8a:	2b01      	cmp	r3, #1
    4e8c:	d1c8      	bne.n	4e20 <conn_auto_initiate+0x48>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    4e8e:	4630      	mov	r0, r6
    4e90:	f00d fa64 	bl	1235c <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_UPDATE)) {
    4e94:	05c3      	lsls	r3, r0, #23
    4e96:	d4c3      	bmi.n	4e20 <conn_auto_initiate+0x48>
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					k_timeout_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    4e98:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    4e9c:	2300      	movs	r3, #0
    4e9e:	f104 015c 	add.w	r1, r4, #92	; 0x5c
    4ea2:	4805      	ldr	r0, [pc, #20]	; (4eb8 <conn_auto_initiate+0xe0>)
    4ea4:	f00a ff74 	bl	fd90 <k_delayed_work_submit_to_queue>
    4ea8:	e7ba      	b.n	4e20 <conn_auto_initiate+0x48>
    4eaa:	bf00      	nop
    4eac:	20000000 	.word	0x20000000
    4eb0:	000179cd 	.word	0x000179cd
    4eb4:	000179ec 	.word	0x000179ec
    4eb8:	20001e54 	.word	0x20001e54

00004ebc <le_phy_update_complete>:
{
    4ebc:	b538      	push	{r3, r4, r5, lr}
	u16_t handle = sys_le16_to_cpu(evt->handle);
    4ebe:	6883      	ldr	r3, [r0, #8]
    4ec0:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    4ec4:	4628      	mov	r0, r5
    4ec6:	f001 fa7d 	bl	63c4 <bt_conn_lookup_handle>
	if (!conn) {
    4eca:	4604      	mov	r4, r0
    4ecc:	b930      	cbnz	r0, 4edc <le_phy_update_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    4ece:	462a      	mov	r2, r5
}
    4ed0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    4ed4:	2145      	movs	r1, #69	; 0x45
    4ed6:	480c      	ldr	r0, [pc, #48]	; (4f08 <le_phy_update_complete+0x4c>)
    4ed8:	f00b bf80 	b.w	10ddc <printk>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    4edc:	1d05      	adds	r5, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4ede:	f06f 0180 	mvn.w	r1, #128	; 0x80
    4ee2:	4628      	mov	r0, r5
    4ee4:	f00d fa4e 	bl	12384 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    4ee8:	0603      	lsls	r3, r0, #24
    4eea:	d507      	bpl.n	4efc <le_phy_update_complete+0x40>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    4eec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    4ef0:	4628      	mov	r0, r5
    4ef2:	f00d fa39 	bl	12368 <atomic_or>
		conn_auto_initiate(conn);
    4ef6:	4620      	mov	r0, r4
    4ef8:	f7ff ff6e 	bl	4dd8 <conn_auto_initiate>
	bt_conn_unref(conn);
    4efc:	4620      	mov	r0, r4
}
    4efe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    4f02:	f00d bc7d 	b.w	12800 <bt_conn_unref>
    4f06:	bf00      	nop
    4f08:	00017498 	.word	0x00017498

00004f0c <le_remote_feat_complete>:
{
    4f0c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    4f0e:	6885      	ldr	r5, [r0, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    4f10:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    4f14:	4630      	mov	r0, r6
    4f16:	f001 fa55 	bl	63c4 <bt_conn_lookup_handle>
	if (!conn) {
    4f1a:	4604      	mov	r4, r0
    4f1c:	b930      	cbnz	r0, 4f2c <le_remote_feat_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    4f1e:	4632      	mov	r2, r6
}
    4f20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    4f24:	2145      	movs	r1, #69	; 0x45
    4f26:	480b      	ldr	r0, [pc, #44]	; (4f54 <le_remote_feat_complete+0x48>)
    4f28:	f00b bf58 	b.w	10ddc <printk>
	if (!evt->status) {
    4f2c:	782b      	ldrb	r3, [r5, #0]
    4f2e:	b923      	cbnz	r3, 4f3a <le_remote_feat_complete+0x2e>
		memcpy(conn->le.features, evt->features,
    4f30:	2208      	movs	r2, #8
    4f32:	1ce9      	adds	r1, r5, #3
    4f34:	30a0      	adds	r0, #160	; 0xa0
    4f36:	f00d f912 	bl	1215e <memcpy>
    4f3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    4f3e:	1d20      	adds	r0, r4, #4
    4f40:	f00d fa12 	bl	12368 <atomic_or>
	conn_auto_initiate(conn);
    4f44:	4620      	mov	r0, r4
    4f46:	f7ff ff47 	bl	4dd8 <conn_auto_initiate>
	bt_conn_unref(conn);
    4f4a:	4620      	mov	r0, r4
}
    4f4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    4f50:	f00d bc56 	b.w	12800 <bt_conn_unref>
    4f54:	00017498 	.word	0x00017498

00004f58 <le_conn_param_neg_reply>:
{
    4f58:	b570      	push	{r4, r5, r6, lr}
    4f5a:	4606      	mov	r6, r0
    4f5c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    4f5e:	f242 0021 	movw	r0, #8225	; 0x2021
    4f62:	2103      	movs	r1, #3
    4f64:	f7ff fa90 	bl	4488 <bt_hci_cmd_create>
	if (!buf) {
    4f68:	4604      	mov	r4, r0
    4f6a:	b928      	cbnz	r0, 4f78 <le_conn_param_neg_reply+0x20>
}
    4f6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    4f70:	2145      	movs	r1, #69	; 0x45
    4f72:	4808      	ldr	r0, [pc, #32]	; (4f94 <le_conn_param_neg_reply+0x3c>)
    4f74:	f00b bf32 	b.w	10ddc <printk>
	cp = net_buf_add(buf, sizeof(*cp));
    4f78:	2103      	movs	r1, #3
    4f7a:	3008      	adds	r0, #8
    4f7c:	f006 feec 	bl	bd58 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    4f80:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    4f82:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    4f84:	4621      	mov	r1, r4
}
    4f86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    4f8a:	f242 0021 	movw	r0, #8225	; 0x2021
    4f8e:	f7ff be51 	b.w	4c34 <bt_hci_cmd_send>
    4f92:	bf00      	nop
    4f94:	00017a0d 	.word	0x00017a0d

00004f98 <le_conn_param_req>:
{
    4f98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    4f9a:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    4f9c:	78d9      	ldrb	r1, [r3, #3]
    4f9e:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    4fa0:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    4fa2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4fa6:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    4faa:	7959      	ldrb	r1, [r3, #5]
    4fac:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
    4fae:	b2bc      	uxth	r4, r7
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    4fb0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4fb4:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    4fb8:	799a      	ldrb	r2, [r3, #6]
    4fba:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
    4fbc:	4620      	mov	r0, r4
	param.latency = sys_le16_to_cpu(evt->latency);
    4fbe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4fc2:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    4fc6:	7a1a      	ldrb	r2, [r3, #8]
    4fc8:	7a5b      	ldrb	r3, [r3, #9]
    4fca:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    4fce:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    4fd2:	f001 f9f7 	bl	63c4 <bt_conn_lookup_handle>
	if (!conn) {
    4fd6:	4606      	mov	r6, r0
    4fd8:	b950      	cbnz	r0, 4ff0 <le_conn_param_req+0x58>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    4fda:	2145      	movs	r1, #69	; 0x45
    4fdc:	481c      	ldr	r0, [pc, #112]	; (5050 <le_conn_param_req+0xb8>)
    4fde:	4622      	mov	r2, r4
    4fe0:	f00b fefc 	bl	10ddc <printk>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    4fe4:	2102      	movs	r1, #2
    4fe6:	4620      	mov	r0, r4
    4fe8:	f7ff ffb6 	bl	4f58 <le_conn_param_neg_reply>
}
    4fec:	b003      	add	sp, #12
    4fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    4ff0:	4669      	mov	r1, sp
    4ff2:	f001 f855 	bl	60a0 <le_param_req>
    4ff6:	b938      	cbnz	r0, 5008 <le_conn_param_req+0x70>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    4ff8:	211e      	movs	r1, #30
    4ffa:	4620      	mov	r0, r4
    4ffc:	f7ff ffac 	bl	4f58 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    5000:	4630      	mov	r0, r6
    5002:	f00d fbfd 	bl	12800 <bt_conn_unref>
    5006:	e7f1      	b.n	4fec <le_conn_param_req+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    5008:	210e      	movs	r1, #14
    500a:	f242 0020 	movw	r0, #8224	; 0x2020
    500e:	f7ff fa3b 	bl	4488 <bt_hci_cmd_create>
	if (!buf) {
    5012:	4605      	mov	r5, r0
    5014:	2800      	cmp	r0, #0
    5016:	d0f3      	beq.n	5000 <le_conn_param_req+0x68>
	cp = net_buf_add(buf, sizeof(*cp));
    5018:	210e      	movs	r1, #14
    501a:	3008      	adds	r0, #8
    501c:	f006 fe9c 	bl	bd58 <net_buf_simple_add>
    5020:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
    5022:	220e      	movs	r2, #14
    5024:	2100      	movs	r1, #0
    5026:	f00d f8c5 	bl	121b4 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    502a:	f8bd 3000 	ldrh.w	r3, [sp]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    502e:	4629      	mov	r1, r5
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    5030:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    5032:	f8bd 3002 	ldrh.w	r3, [sp, #2]
	cp->handle = sys_cpu_to_le16(handle);
    5036:	8027      	strh	r7, [r4, #0]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    5038:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    503a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    503e:	f242 0020 	movw	r0, #8224	; 0x2020
	cp->latency = sys_cpu_to_le16(param->latency);
    5042:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    5044:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5048:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    504a:	f7ff fdf3 	bl	4c34 <bt_hci_cmd_send>
    504e:	e7d7      	b.n	5000 <le_conn_param_req+0x68>
    5050:	00017498 	.word	0x00017498

00005054 <hci_tx_thread>:
{
    5054:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    5058:	f8df 812c 	ldr.w	r8, [pc, #300]	; 5188 <hci_tx_thread+0x134>
		BT_ASSERT(err == 0);
    505c:	f8df 9154 	ldr.w	r9, [pc, #340]	; 51b4 <hci_tx_thread+0x160>
			ev_count += bt_conn_prepare_events(&events[1]);
    5060:	f108 0a14 	add.w	sl, r8, #20
		events[0].state = K_POLL_STATE_NOT_READY;
    5064:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    5068:	4650      	mov	r0, sl
		events[0].state = K_POLL_STATE_NOT_READY;
    506a:	f36f 3310 	bfc	r3, #12, #5
    506e:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    5072:	f001 f933 	bl	62dc <bt_conn_prepare_events>
    5076:	1c46      	adds	r6, r0, #1
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    5078:	f04f 32ff 	mov.w	r2, #4294967295
    507c:	f04f 33ff 	mov.w	r3, #4294967295
    5080:	4631      	mov	r1, r6
    5082:	4841      	ldr	r0, [pc, #260]	; (5188 <hci_tx_thread+0x134>)
    5084:	f00b fc98 	bl	109b8 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    5088:	b160      	cbz	r0, 50a4 <hci_tx_thread+0x50>
    508a:	f241 43f3 	movw	r3, #5363	; 0x14f3
    508e:	464a      	mov	r2, r9
    5090:	493e      	ldr	r1, [pc, #248]	; (518c <hci_tx_thread+0x138>)
    5092:	483f      	ldr	r0, [pc, #252]	; (5190 <hci_tx_thread+0x13c>)
    5094:	f00b fea2 	bl	10ddc <printk>
    5098:	4040      	eors	r0, r0
    509a:	f380 8811 	msr	BASEPRI, r0
    509e:	f04f 0003 	mov.w	r0, #3
    50a2:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    50a4:	4d3b      	ldr	r5, [pc, #236]	; (5194 <hci_tx_thread+0x140>)
{
    50a6:	4f38      	ldr	r7, [pc, #224]	; (5188 <hci_tx_thread+0x134>)
    50a8:	f105 0bd0 	add.w	fp, r5, #208	; 0xd0
	for (; count; ev++, count--) {
    50ac:	b916      	cbnz	r6, 50b4 <hci_tx_thread+0x60>
	z_impl_k_yield();
    50ae:	f00a fa89 	bl	f5c4 <z_impl_k_yield>
	while (1) {
    50b2:	e7d7      	b.n	5064 <hci_tx_thread+0x10>
		switch (ev->state) {
    50b4:	68fa      	ldr	r2, [r7, #12]
    50b6:	f3c2 3204 	ubfx	r2, r2, #12, #5
    50ba:	2a01      	cmp	r2, #1
    50bc:	d954      	bls.n	5168 <hci_tx_thread+0x114>
    50be:	2a04      	cmp	r2, #4
    50c0:	d15c      	bne.n	517c <hci_tx_thread+0x128>
			if (ev->tag == BT_EVENT_CMD_TX) {
    50c2:	7b3b      	ldrb	r3, [r7, #12]
    50c4:	2b00      	cmp	r3, #0
    50c6:	d152      	bne.n	516e <hci_tx_thread+0x11a>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    50c8:	2200      	movs	r2, #0
    50ca:	2300      	movs	r3, #0
    50cc:	4832      	ldr	r0, [pc, #200]	; (5198 <hci_tx_thread+0x144>)
    50ce:	f006 fc3f 	bl	b950 <net_buf_get>
	BT_ASSERT(buf);
    50d2:	4604      	mov	r4, r0
    50d4:	b960      	cbnz	r0, 50f0 <hci_tx_thread+0x9c>
    50d6:	f241 4395 	movw	r3, #5269	; 0x1495
    50da:	464a      	mov	r2, r9
    50dc:	492f      	ldr	r1, [pc, #188]	; (519c <hci_tx_thread+0x148>)
    50de:	482c      	ldr	r0, [pc, #176]	; (5190 <hci_tx_thread+0x13c>)
    50e0:	f00b fe7c 	bl	10ddc <printk>
    50e4:	4040      	eors	r0, r0
    50e6:	f380 8811 	msr	BASEPRI, r0
    50ea:	f04f 0003 	mov.w	r0, #3
    50ee:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    50f0:	f04f 33ff 	mov.w	r3, #4294967295
    50f4:	f04f 32ff 	mov.w	r2, #4294967295
    50f8:	4658      	mov	r0, fp
    50fa:	f00a fc29 	bl	f950 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    50fe:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
    5102:	b153      	cbz	r3, 511a <hci_tx_thread+0xc6>
		BT_ERR("Uncleared pending sent_cmd");
    5104:	2145      	movs	r1, #69	; 0x45
    5106:	4826      	ldr	r0, [pc, #152]	; (51a0 <hci_tx_thread+0x14c>)
    5108:	f00b fe68 	bl	10ddc <printk>
		net_buf_unref(bt_dev.sent_cmd);
    510c:	f8d5 00e8 	ldr.w	r0, [r5, #232]	; 0xe8
    5110:	f006 fcb0 	bl	ba74 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    5114:	2300      	movs	r3, #0
    5116:	f8c5 30e8 	str.w	r3, [r5, #232]	; 0xe8
	bt_dev.sent_cmd = net_buf_ref(buf);
    511a:	4620      	mov	r0, r4
    511c:	f006 fcf0 	bl	bb00 <net_buf_ref>
    5120:	f8c5 00e8 	str.w	r0, [r5, #232]	; 0xe8
	err = bt_send(buf);
    5124:	4620      	mov	r0, r4
    5126:	f7ff fd7d 	bl	4c24 <bt_send>
	if (err) {
    512a:	4602      	mov	r2, r0
    512c:	b1e0      	cbz	r0, 5168 <hci_tx_thread+0x114>
		BT_ERR("Unable to send to driver (err %d)", err);
    512e:	2145      	movs	r1, #69	; 0x45
    5130:	481c      	ldr	r0, [pc, #112]	; (51a4 <hci_tx_thread+0x150>)
    5132:	f00b fe53 	bl	10ddc <printk>
	z_impl_k_sem_give(sem);
    5136:	481c      	ldr	r0, [pc, #112]	; (51a8 <hci_tx_thread+0x154>)
    5138:	f00a fbc6 	bl	f8c8 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    513c:	4620      	mov	r0, r4
    513e:	f006 fb01 	bl	b744 <net_buf_id>
    5142:	220c      	movs	r2, #12
    5144:	4b19      	ldr	r3, [pc, #100]	; (51ac <hci_tx_thread+0x158>)
    5146:	211f      	movs	r1, #31
    5148:	fb02 3000 	mla	r0, r2, r0, r3
    514c:	4622      	mov	r2, r4
    514e:	8840      	ldrh	r0, [r0, #2]
    5150:	f7fe ff50 	bl	3ff4 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    5154:	f8d5 00e8 	ldr.w	r0, [r5, #232]	; 0xe8
    5158:	f006 fc8c 	bl	ba74 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    515c:	2300      	movs	r3, #0
		net_buf_unref(buf);
    515e:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    5160:	f8c5 30e8 	str.w	r3, [r5, #232]	; 0xe8
		net_buf_unref(buf);
    5164:	f006 fc86 	bl	ba74 <net_buf_unref>
	for (; count; ev++, count--) {
    5168:	3714      	adds	r7, #20
    516a:	3e01      	subs	r6, #1
    516c:	e79e      	b.n	50ac <hci_tx_thread+0x58>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    516e:	2b01      	cmp	r3, #1
    5170:	d1fa      	bne.n	5168 <hci_tx_thread+0x114>
					conn = CONTAINER_OF(ev->fifo,
    5172:	6938      	ldr	r0, [r7, #16]
					bt_conn_process_tx(conn);
    5174:	3834      	subs	r0, #52	; 0x34
    5176:	f001 fb7b 	bl	6870 <bt_conn_process_tx>
    517a:	e7f5      	b.n	5168 <hci_tx_thread+0x114>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    517c:	2157      	movs	r1, #87	; 0x57
    517e:	480c      	ldr	r0, [pc, #48]	; (51b0 <hci_tx_thread+0x15c>)
    5180:	f00b fe2c 	bl	10ddc <printk>
    5184:	e7f0      	b.n	5168 <hci_tx_thread+0x114>
    5186:	bf00      	nop
    5188:	200001fc 	.word	0x200001fc
    518c:	00017721 	.word	0x00017721
    5190:	00016493 	.word	0x00016493
    5194:	20000000 	.word	0x20000000
    5198:	20000108 	.word	0x20000108
    519c:	00019246 	.word	0x00019246
    51a0:	00017a2c 	.word	0x00017a2c
    51a4:	00017903 	.word	0x00017903
    51a8:	200000d0 	.word	0x200000d0
    51ac:	20000c24 	.word	0x20000c24
    51b0:	00017a4c 	.word	0x00017a4c
    51b4:	00017600 	.word	0x00017600

000051b8 <hci_event_prio>:
{
    51b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    51bc:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    51be:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    51c2:	4630      	mov	r0, r6
    51c4:	f00e ff22 	bl	1400c <net_buf_simple_headroom>
	state->len = buf->len;
    51c8:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    51cc:	4605      	mov	r5, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
    51ce:	f1b8 0f01 	cmp.w	r8, #1
    51d2:	d80c      	bhi.n	51ee <hci_event_prio+0x36>
    51d4:	f641 03ee 	movw	r3, #6382	; 0x18ee
    51d8:	4a1b      	ldr	r2, [pc, #108]	; (5248 <hci_event_prio+0x90>)
    51da:	491c      	ldr	r1, [pc, #112]	; (524c <hci_event_prio+0x94>)
    51dc:	481c      	ldr	r0, [pc, #112]	; (5250 <hci_event_prio+0x98>)
    51de:	f00b fdfd 	bl	10ddc <printk>
    51e2:	4040      	eors	r0, r0
    51e4:	f380 8811 	msr	BASEPRI, r0
    51e8:	f04f 0003 	mov.w	r0, #3
    51ec:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    51ee:	2102      	movs	r1, #2
    51f0:	4630      	mov	r0, r6
    51f2:	f006 fd8f 	bl	bd14 <net_buf_simple_pull_mem>
    51f6:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    51f8:	7800      	ldrb	r0, [r0, #0]
    51fa:	f00d f89d 	bl	12338 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    51fe:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    5200:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    5202:	d40c      	bmi.n	521e <hci_event_prio+0x66>
    5204:	f641 03f2 	movw	r3, #6386	; 0x18f2
    5208:	4a0f      	ldr	r2, [pc, #60]	; (5248 <hci_event_prio+0x90>)
    520a:	4912      	ldr	r1, [pc, #72]	; (5254 <hci_event_prio+0x9c>)
    520c:	4810      	ldr	r0, [pc, #64]	; (5250 <hci_event_prio+0x98>)
    520e:	f00b fde5 	bl	10ddc <printk>
    5212:	4040      	eors	r0, r0
    5214:	f380 8811 	msr	BASEPRI, r0
    5218:	f04f 0003 	mov.w	r0, #3
    521c:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    521e:	2305      	movs	r3, #5
    5220:	4621      	mov	r1, r4
    5222:	4a0d      	ldr	r2, [pc, #52]	; (5258 <hci_event_prio+0xa0>)
    5224:	7838      	ldrb	r0, [r7, #0]
    5226:	f7fe ff4b 	bl	40c0 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    522a:	07b3      	lsls	r3, r6, #30
    522c:	d507      	bpl.n	523e <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    522e:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    5230:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    5234:	fa10 f585 	uxtah	r5, r0, r5
    5238:	60a5      	str	r5, [r4, #8]
}
    523a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    523e:	4620      	mov	r0, r4
}
    5240:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    5244:	f006 bc16 	b.w	ba74 <net_buf_unref>
    5248:	00017600 	.word	0x00017600
    524c:	00017634 	.word	0x00017634
    5250:	00016493 	.word	0x00016493
    5254:	00017a72 	.word	0x00017a72
    5258:	00015a38 	.word	0x00015a38

0000525c <bt_recv>:
{
    525c:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    525e:	7d02      	ldrb	r2, [r0, #20]
    5260:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
    5262:	2a01      	cmp	r2, #1
    5264:	d007      	beq.n	5276 <bt_recv+0x1a>
    5266:	2a03      	cmp	r2, #3
    5268:	d113      	bne.n	5292 <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
    526a:	480f      	ldr	r0, [pc, #60]	; (52a8 <bt_recv+0x4c>)
    526c:	4629      	mov	r1, r5
    526e:	f006 fbcd 	bl	ba0c <net_buf_put>
		return 0;
    5272:	2000      	movs	r0, #0
    5274:	e00c      	b.n	5290 <bt_recv+0x34>
		u8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    5276:	6883      	ldr	r3, [r0, #8]
    5278:	7818      	ldrb	r0, [r3, #0]
    527a:	f00d f85d 	bl	12338 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    527e:	07c3      	lsls	r3, r0, #31
		u8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    5280:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    5282:	d502      	bpl.n	528a <bt_recv+0x2e>
			hci_event_prio(buf);
    5284:	4628      	mov	r0, r5
    5286:	f7ff ff97 	bl	51b8 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    528a:	f014 0002 	ands.w	r0, r4, #2
    528e:	d1ec      	bne.n	526a <bt_recv+0xe>
}
    5290:	bd38      	pop	{r3, r4, r5, pc}
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    5292:	2145      	movs	r1, #69	; 0x45
    5294:	4805      	ldr	r0, [pc, #20]	; (52ac <bt_recv+0x50>)
    5296:	f00b fda1 	bl	10ddc <printk>
		net_buf_unref(buf);
    529a:	4628      	mov	r0, r5
    529c:	f006 fbea 	bl	ba74 <net_buf_unref>
		return -EINVAL;
    52a0:	f06f 0015 	mvn.w	r0, #21
    52a4:	e7f4      	b.n	5290 <bt_recv+0x34>
    52a6:	bf00      	nop
    52a8:	200000ec 	.word	0x200000ec
    52ac:	00017a8b 	.word	0x00017a8b

000052b0 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    52b0:	4a08      	ldr	r2, [pc, #32]	; (52d4 <bt_hci_driver_register+0x24>)
{
    52b2:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    52b4:	f8d2 0124 	ldr.w	r0, [r2, #292]	; 0x124
    52b8:	b930      	cbnz	r0, 52c8 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    52ba:	68d9      	ldr	r1, [r3, #12]
    52bc:	b139      	cbz	r1, 52ce <bt_hci_driver_register+0x1e>
    52be:	6919      	ldr	r1, [r3, #16]
    52c0:	b129      	cbz	r1, 52ce <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    52c2:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
	return 0;
    52c6:	4770      	bx	lr
		return -EALREADY;
    52c8:	f06f 0044 	mvn.w	r0, #68	; 0x44
    52cc:	4770      	bx	lr
		return -EINVAL;
    52ce:	f06f 0015 	mvn.w	r0, #21
}
    52d2:	4770      	bx	lr
    52d4:	20000000 	.word	0x20000000

000052d8 <bt_finalize_init>:
    52d8:	2102      	movs	r1, #2
    52da:	4801      	ldr	r0, [pc, #4]	; (52e0 <bt_finalize_init+0x8>)
    52dc:	f00d b844 	b.w	12368 <atomic_or>
    52e0:	20000098 	.word	0x20000098

000052e4 <init_work>:
{
    52e4:	b510      	push	{r4, lr}
	err = bt_init();
    52e6:	f7fb f8cb 	bl	480 <bt_init>
	if (ready_cb) {
    52ea:	4b03      	ldr	r3, [pc, #12]	; (52f8 <init_work+0x14>)
    52ec:	681b      	ldr	r3, [r3, #0]
    52ee:	b113      	cbz	r3, 52f6 <init_work+0x12>
}
    52f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    52f4:	4718      	bx	r3
}
    52f6:	bd10      	pop	{r4, pc}
    52f8:	20000c44 	.word	0x20000c44

000052fc <bt_enable>:
{
    52fc:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	if (!bt_dev.drv) {
    5300:	4d35      	ldr	r5, [pc, #212]	; (53d8 <bt_enable+0xdc>)
{
    5302:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    5304:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
{
    5308:	b088      	sub	sp, #32
	if (!bt_dev.drv) {
    530a:	b94b      	cbnz	r3, 5320 <bt_enable+0x24>
		BT_ERR("No HCI driver registered");
    530c:	2145      	movs	r1, #69	; 0x45
    530e:	4833      	ldr	r0, [pc, #204]	; (53dc <bt_enable+0xe0>)
    5310:	f00b fd64 	bl	10ddc <printk>
		return -ENODEV;
    5314:	f06f 0412 	mvn.w	r4, #18
}
    5318:	4620      	mov	r0, r4
    531a:	b008      	add	sp, #32
    531c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    5320:	2101      	movs	r1, #1
    5322:	f105 0098 	add.w	r0, r5, #152	; 0x98
    5326:	f00d f81f 	bl	12368 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    532a:	07c2      	lsls	r2, r0, #31
    532c:	d451      	bmi.n	53d2 <bt_enable+0xd6>
		err = bt_settings_init();
    532e:	f7fe fc31 	bl	3b94 <bt_settings_init>
		if (err) {
    5332:	4604      	mov	r4, r0
    5334:	2800      	cmp	r0, #0
    5336:	d1ef      	bne.n	5318 <bt_enable+0x1c>
	ready_cb = cb;
    5338:	4b29      	ldr	r3, [pc, #164]	; (53e0 <bt_enable+0xe4>)
    533a:	f04f 0800 	mov.w	r8, #0
    533e:	f04f 0900 	mov.w	r9, #0
    5342:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    5344:	f06f 0308 	mvn.w	r3, #8
    5348:	e9cd 0000 	strd	r0, r0, [sp]
    534c:	e9cd 0302 	strd	r0, r3, [sp, #8]
    5350:	9004      	str	r0, [sp, #16]
    5352:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5356:	e9cd 8906 	strd	r8, r9, [sp, #24]
    535a:	4b22      	ldr	r3, [pc, #136]	; (53e4 <bt_enable+0xe8>)
    535c:	4922      	ldr	r1, [pc, #136]	; (53e8 <bt_enable+0xec>)
    535e:	4823      	ldr	r0, [pc, #140]	; (53ec <bt_enable+0xf0>)
    5360:	f00a fbf0 	bl	fb44 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    5364:	4922      	ldr	r1, [pc, #136]	; (53f0 <bt_enable+0xf4>)
    5366:	4821      	ldr	r0, [pc, #132]	; (53ec <bt_enable+0xf0>)
    5368:	f00f fe94 	bl	15094 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    536c:	f06f 0307 	mvn.w	r3, #7
    5370:	f640 0298 	movw	r2, #2200	; 0x898
    5374:	e9cd 4302 	strd	r4, r3, [sp, #8]
    5378:	e9cd 8906 	strd	r8, r9, [sp, #24]
    537c:	e9cd 4400 	strd	r4, r4, [sp]
    5380:	4b1c      	ldr	r3, [pc, #112]	; (53f4 <bt_enable+0xf8>)
    5382:	491d      	ldr	r1, [pc, #116]	; (53f8 <bt_enable+0xfc>)
    5384:	9404      	str	r4, [sp, #16]
    5386:	481d      	ldr	r0, [pc, #116]	; (53fc <bt_enable+0x100>)
    5388:	f00a fbdc 	bl	fb44 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    538c:	491c      	ldr	r1, [pc, #112]	; (5400 <bt_enable+0x104>)
    538e:	481b      	ldr	r0, [pc, #108]	; (53fc <bt_enable+0x100>)
    5390:	f00f fe80 	bl	15094 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
    5394:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    5398:	68db      	ldr	r3, [r3, #12]
    539a:	4798      	blx	r3
	if (err) {
    539c:	4604      	mov	r4, r0
    539e:	b128      	cbz	r0, 53ac <bt_enable+0xb0>
		BT_ERR("HCI driver open failed (%d)", err);
    53a0:	4602      	mov	r2, r0
    53a2:	2145      	movs	r1, #69	; 0x45
    53a4:	4817      	ldr	r0, [pc, #92]	; (5404 <bt_enable+0x108>)
    53a6:	f00b fd19 	bl	10ddc <printk>
		return err;
    53aa:	e7b5      	b.n	5318 <bt_enable+0x1c>
	if (!cb) {
    53ac:	b926      	cbnz	r6, 53b8 <bt_enable+0xbc>
}
    53ae:	b008      	add	sp, #32
    53b0:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
		return bt_init();
    53b4:	f7fb b864 	b.w	480 <bt_init>
    53b8:	2101      	movs	r1, #1
    53ba:	f105 0094 	add.w	r0, r5, #148	; 0x94
    53be:	f00c ffd3 	bl	12368 <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    53c2:	07c3      	lsls	r3, r0, #31
    53c4:	d4a8      	bmi.n	5318 <bt_enable+0x1c>
		k_queue_append(&work_q->queue, work);
    53c6:	4810      	ldr	r0, [pc, #64]	; (5408 <bt_enable+0x10c>)
    53c8:	f105 018c 	add.w	r1, r5, #140	; 0x8c
    53cc:	f00f fe0b 	bl	14fe6 <k_queue_append>
    53d0:	e7a2      	b.n	5318 <bt_enable+0x1c>
		return -EALREADY;
    53d2:	f06f 0444 	mvn.w	r4, #68	; 0x44
    53d6:	e79f      	b.n	5318 <bt_enable+0x1c>
    53d8:	20000000 	.word	0x20000000
    53dc:	00017bb7 	.word	0x00017bb7
    53e0:	20000c44 	.word	0x20000c44
    53e4:	00005055 	.word	0x00005055
    53e8:	20003728 	.word	0x20003728
    53ec:	20000cbc 	.word	0x20000cbc
    53f0:	00017bd5 	.word	0x00017bd5
    53f4:	00004141 	.word	0x00004141
    53f8:	20002e90 	.word	0x20002e90
    53fc:	20000c48 	.word	0x20000c48
    5400:	00017bdb 	.word	0x00017bdb
    5404:	00017be1 	.word	0x00017be1
    5408:	20001e54 	.word	0x20001e54

0000540c <bt_get_name>:
}
    540c:	4800      	ldr	r0, [pc, #0]	; (5410 <bt_get_name+0x4>)
    540e:	4770      	bx	lr
    5410:	000162f4 	.word	0x000162f4

00005414 <bt_id_create>:
{
    5414:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5416:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    5418:	4605      	mov	r5, r0
    541a:	b918      	cbnz	r0, 5424 <bt_id_create+0x10>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    541c:	b314      	cbz	r4, 5464 <bt_id_create+0x50>
		return -EINVAL;
    541e:	f06f 0415 	mvn.w	r4, #21
    5422:	e01c      	b.n	545e <bt_id_create+0x4a>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    5424:	2300      	movs	r3, #0
    5426:	4669      	mov	r1, sp
    5428:	9300      	str	r3, [sp, #0]
    542a:	f8cd 3003 	str.w	r3, [sp, #3]
    542e:	f00c ffa6 	bl	1237e <bt_addr_le_cmp>
    5432:	2800      	cmp	r0, #0
    5434:	d0f2      	beq.n	541c <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    5436:	782b      	ldrb	r3, [r5, #0]
    5438:	2b01      	cmp	r3, #1
    543a:	d104      	bne.n	5446 <bt_id_create+0x32>
    543c:	79ab      	ldrb	r3, [r5, #6]
    543e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    5442:	2bc0      	cmp	r3, #192	; 0xc0
    5444:	d004      	beq.n	5450 <bt_id_create+0x3c>
			BT_ERR("Only static random identity address supported");
    5446:	2145      	movs	r1, #69	; 0x45
    5448:	480d      	ldr	r0, [pc, #52]	; (5480 <bt_id_create+0x6c>)
    544a:	f00b fcc7 	bl	10ddc <printk>
			return -EINVAL;
    544e:	e7e6      	b.n	541e <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    5450:	4628      	mov	r0, r5
    5452:	f7fe fc03 	bl	3c5c <id_find>
    5456:	2800      	cmp	r0, #0
    5458:	dbe0      	blt.n	541c <bt_id_create+0x8>
			return -EALREADY;
    545a:	f06f 0444 	mvn.w	r4, #68	; 0x44
}
    545e:	4620      	mov	r0, r4
    5460:	b003      	add	sp, #12
    5462:	bd30      	pop	{r4, r5, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    5464:	4b07      	ldr	r3, [pc, #28]	; (5484 <bt_id_create+0x70>)
    5466:	79dc      	ldrb	r4, [r3, #7]
    5468:	2c01      	cmp	r4, #1
    546a:	d006      	beq.n	547a <bt_id_create+0x66>
	new_id = bt_dev.id_count++;
    546c:	1c62      	adds	r2, r4, #1
	id_create(new_id, addr, irk);
    546e:	4629      	mov	r1, r5
    5470:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    5472:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
    5474:	f7ff fba2 	bl	4bbc <id_create.isra.0>
	return new_id;
    5478:	e7f1      	b.n	545e <bt_id_create+0x4a>
		return -ENOMEM;
    547a:	f06f 040b 	mvn.w	r4, #11
    547e:	e7ee      	b.n	545e <bt_id_create+0x4a>
    5480:	00017c02 	.word	0x00017c02
    5484:	20000000 	.word	0x20000000

00005488 <bt_setup_public_id_addr>:
{
    5488:	b570      	push	{r4, r5, r6, lr}
    548a:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    548c:	2100      	movs	r1, #0
    548e:	f241 0009 	movw	r0, #4105	; 0x1009
    5492:	aa01      	add	r2, sp, #4
    5494:	f7ff f842 	bl	451c <bt_hci_cmd_send_sync>
	if (err) {
    5498:	4e1c      	ldr	r6, [pc, #112]	; (550c <bt_setup_public_id_addr+0x84>)
    549a:	4604      	mov	r4, r0
    549c:	b138      	cbz	r0, 54ae <bt_setup_public_id_addr+0x26>
		BT_WARN("Failed to read public address");
    549e:	2157      	movs	r1, #87	; 0x57
    54a0:	481b      	ldr	r0, [pc, #108]	; (5510 <bt_setup_public_id_addr+0x88>)
    54a2:	f00b fc9b 	bl	10ddc <printk>
	bt_dev.id_count = bt_read_public_addr(&addr);
    54a6:	2300      	movs	r3, #0
    54a8:	71f3      	strb	r3, [r6, #7]
}
    54aa:	b006      	add	sp, #24
    54ac:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    54ae:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
    54b0:	2206      	movs	r2, #6
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    54b2:	689d      	ldr	r5, [r3, #8]
    54b4:	a904      	add	r1, sp, #16
    54b6:	3501      	adds	r5, #1
    54b8:	9004      	str	r0, [sp, #16]
    54ba:	f8ad 0014 	strh.w	r0, [sp, #20]
    54be:	4628      	mov	r0, r5
    54c0:	f00c fe3d 	bl	1213e <memcmp>
    54c4:	b918      	cbnz	r0, 54ce <bt_setup_public_id_addr+0x46>
		net_buf_unref(rsp);
    54c6:	9801      	ldr	r0, [sp, #4]
    54c8:	f006 fad4 	bl	ba74 <net_buf_unref>
    54cc:	e7eb      	b.n	54a6 <bt_setup_public_id_addr+0x1e>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    54ce:	4b11      	ldr	r3, [pc, #68]	; (5514 <bt_setup_public_id_addr+0x8c>)
    54d0:	2206      	movs	r2, #6
    54d2:	6818      	ldr	r0, [r3, #0]
    54d4:	889b      	ldrh	r3, [r3, #4]
    54d6:	9002      	str	r0, [sp, #8]
    54d8:	a902      	add	r1, sp, #8
    54da:	4628      	mov	r0, r5
    54dc:	f8ad 300c 	strh.w	r3, [sp, #12]
    54e0:	f00c fe2d 	bl	1213e <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    54e4:	2800      	cmp	r0, #0
    54e6:	d0ee      	beq.n	54c6 <bt_setup_public_id_addr+0x3e>
	memcpy(dst, src, sizeof(*dst));
    54e8:	4629      	mov	r1, r5
    54ea:	2206      	movs	r2, #6
    54ec:	f10d 0011 	add.w	r0, sp, #17
    54f0:	f00c fe35 	bl	1215e <memcpy>
	net_buf_unref(rsp);
    54f4:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    54f6:	f88d 4010 	strb.w	r4, [sp, #16]
	net_buf_unref(rsp);
    54fa:	f006 fabb 	bl	ba74 <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
    54fe:	2301      	movs	r3, #1
	id_create(BT_ID_DEFAULT, &addr, irk);
    5500:	4620      	mov	r0, r4
    5502:	a904      	add	r1, sp, #16
	bt_dev.id_count = bt_read_public_addr(&addr);
    5504:	71f3      	strb	r3, [r6, #7]
	id_create(BT_ID_DEFAULT, &addr, irk);
    5506:	f7ff fb59 	bl	4bbc <id_create.isra.0>
    550a:	e7ce      	b.n	54aa <bt_setup_public_id_addr+0x22>
    550c:	20000000 	.word	0x20000000
    5510:	00017c35 	.word	0x00017c35
    5514:	000156ef 	.word	0x000156ef

00005518 <bt_read_static_addr>:
{
    5518:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    551c:	4b1c      	ldr	r3, [pc, #112]	; (5590 <bt_read_static_addr+0x78>)
{
    551e:	4607      	mov	r7, r0
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    5520:	f893 408a 	ldrb.w	r4, [r3, #138]	; 0x8a
{
    5524:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    5526:	f014 0401 	ands.w	r4, r4, #1
    552a:	d104      	bne.n	5536 <bt_read_static_addr+0x1e>
		BT_WARN("Read Static Addresses command not available");
    552c:	2157      	movs	r1, #87	; 0x57
    552e:	4819      	ldr	r0, [pc, #100]	; (5594 <bt_read_static_addr+0x7c>)
		BT_WARN("No static addresses stored in controller");
    5530:	f00b fc54 	bl	10ddc <printk>
    5534:	e00c      	b.n	5550 <bt_read_static_addr+0x38>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    5536:	2100      	movs	r1, #0
    5538:	f64f 4009 	movw	r0, #64521	; 0xfc09
    553c:	aa01      	add	r2, sp, #4
    553e:	f7fe ffed 	bl	451c <bt_hci_cmd_send_sync>
	if (err) {
    5542:	4605      	mov	r5, r0
    5544:	b140      	cbz	r0, 5558 <bt_read_static_addr+0x40>
		BT_WARN("Failed to read static addresses");
    5546:	2157      	movs	r1, #87	; 0x57
    5548:	4813      	ldr	r0, [pc, #76]	; (5598 <bt_read_static_addr+0x80>)
    554a:	f00b fc47 	bl	10ddc <printk>
    554e:	2400      	movs	r4, #0
}
    5550:	4620      	mov	r0, r4
    5552:	b002      	add	sp, #8
    5554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    5558:	f04f 0816 	mov.w	r8, #22
	rp = (void *)rsp->data;
    555c:	9b01      	ldr	r3, [sp, #4]
    555e:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    5560:	785c      	ldrb	r4, [r3, #1]
    5562:	42b4      	cmp	r4, r6
    5564:	bf28      	it	cs
    5566:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    5568:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
    556a:	42ac      	cmp	r4, r5
    556c:	dc07      	bgt.n	557e <bt_read_static_addr+0x66>
	net_buf_unref(rsp);
    556e:	9801      	ldr	r0, [sp, #4]
    5570:	f006 fa80 	bl	ba74 <net_buf_unref>
	if (!cnt) {
    5574:	2c00      	cmp	r4, #0
    5576:	d1eb      	bne.n	5550 <bt_read_static_addr+0x38>
		BT_WARN("No static addresses stored in controller");
    5578:	2157      	movs	r1, #87	; 0x57
    557a:	4808      	ldr	r0, [pc, #32]	; (559c <bt_read_static_addr+0x84>)
    557c:	e7d8      	b.n	5530 <bt_read_static_addr+0x18>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    557e:	fb08 7005 	mla	r0, r8, r5, r7
    5582:	2216      	movs	r2, #22
    5584:	4631      	mov	r1, r6
    5586:	f00c fdea 	bl	1215e <memcpy>
	for (i = 0; i < cnt; i++) {
    558a:	3501      	adds	r5, #1
    558c:	e7ed      	b.n	556a <bt_read_static_addr+0x52>
    558e:	bf00      	nop
    5590:	20000000 	.word	0x20000000
    5594:	00017c58 	.word	0x00017c58
    5598:	00017c89 	.word	0x00017c89
    559c:	00017cae 	.word	0x00017cae

000055a0 <bt_setup_random_id_addr>:
{
    55a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!bt_dev.id_count) {
    55a2:	4d14      	ldr	r5, [pc, #80]	; (55f4 <bt_setup_random_id_addr+0x54>)
{
    55a4:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    55a6:	79ec      	ldrb	r4, [r5, #7]
    55a8:	b9f4      	cbnz	r4, 55e8 <bt_setup_random_id_addr+0x48>
		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    55aa:	2101      	movs	r1, #1
    55ac:	a802      	add	r0, sp, #8
    55ae:	f7ff ffb3 	bl	5518 <bt_read_static_addr>
    55b2:	71e8      	strb	r0, [r5, #7]
		if (bt_dev.id_count) {
    55b4:	b1c0      	cbz	r0, 55e8 <bt_setup_random_id_addr+0x48>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    55b6:	2716      	movs	r7, #22
    55b8:	e00f      	b.n	55da <bt_setup_random_id_addr+0x3a>
    55ba:	ab02      	add	r3, sp, #8
    55bc:	fb07 3106 	mla	r1, r7, r6, r3
    55c0:	2206      	movs	r2, #6
    55c2:	f10d 0001 	add.w	r0, sp, #1
    55c6:	f00c fdca 	bl	1215e <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    55ca:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
    55cc:	4669      	mov	r1, sp
    55ce:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
    55d0:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
    55d4:	f7ff faf2 	bl	4bbc <id_create.isra.0>
			for (u8_t i = 0; i < bt_dev.id_count; i++) {
    55d8:	3401      	adds	r4, #1
    55da:	79eb      	ldrb	r3, [r5, #7]
    55dc:	b2e6      	uxtb	r6, r4
    55de:	42b3      	cmp	r3, r6
    55e0:	d8eb      	bhi.n	55ba <bt_setup_random_id_addr+0x1a>
			return 0;
    55e2:	2000      	movs	r0, #0
}
    55e4:	b009      	add	sp, #36	; 0x24
    55e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
    55e8:	2100      	movs	r1, #0
    55ea:	4608      	mov	r0, r1
    55ec:	f7ff ff12 	bl	5414 <bt_id_create>
    55f0:	e7f8      	b.n	55e4 <bt_setup_random_id_addr+0x44>
    55f2:	bf00      	nop
    55f4:	20000000 	.word	0x20000000

000055f8 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    55f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
    55fc:	f04f 0a00 	mov.w	sl, #0
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
    5600:	6905      	ldr	r5, [r0, #16]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5602:	4e7a      	ldr	r6, [pc, #488]	; (57ec <bt_le_adv_start_legacy+0x1f4>)
{
    5604:	b08d      	sub	sp, #52	; 0x34
	bool dir_adv = (param->peer != NULL), scannable;
    5606:	ebb5 0b0a 	subs.w	fp, r5, sl
{
    560a:	4604      	mov	r4, r0
    560c:	f106 0098 	add.w	r0, r6, #152	; 0x98
	bool dir_adv = (param->peer != NULL), scannable;
    5610:	bf18      	it	ne
    5612:	f04f 0b01 	movne.w	fp, #1
{
    5616:	4691      	mov	r9, r2
    5618:	4698      	mov	r8, r3
    561a:	9103      	str	r1, [sp, #12]
	struct bt_conn *conn = NULL;
    561c:	f8cd a014 	str.w	sl, [sp, #20]
    5620:	f00c fe9c 	bl	1235c <atomic_get>
	int err;
	struct bt_le_ext_adv *adv;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    5624:	0780      	lsls	r0, r0, #30
    5626:	f140 80d4 	bpl.w	57d2 <bt_le_adv_start_legacy+0x1da>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    562a:	4620      	mov	r0, r4
    562c:	f7fe fb2e 	bl	3c8c <valid_adv_param>
    5630:	4607      	mov	r7, r0
    5632:	2800      	cmp	r0, #0
    5634:	f000 80d0 	beq.w	57d8 <bt_le_adv_start_legacy+0x1e0>

	if (!bt_le_adv_random_addr_check(param)) {
		return -EINVAL;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
    5638:	4651      	mov	r1, sl
    563a:	220f      	movs	r2, #15
    563c:	a808      	add	r0, sp, #32
    563e:	f00c fdb9 	bl	121b4 <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    5642:	68a3      	ldr	r3, [r4, #8]
    5644:	f106 002c 	add.w	r0, r6, #44	; 0x2c
    5648:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    564c:	68e3      	ldr	r3, [r4, #12]
	set_param.channel_map  = 0x07;
	set_param.filter_policy = get_filter_policy(param->options);
    564e:	f88d a02e 	strb.w	sl, [sp, #46]	; 0x2e
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    5652:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = 0x07;
    5656:	2307      	movs	r3, #7
    5658:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    565c:	f00c fe7e 	bl	1235c <atomic_get>

	adv = adv_new_legacy();
	if (!adv || atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    5660:	0641      	lsls	r1, r0, #25
    5662:	f100 80bc 	bmi.w	57de <bt_le_adv_start_legacy+0x1e6>
		return -EALREADY;
	}

	if (adv->id != param->id) {
    5666:	7e32      	ldrb	r2, [r6, #24]
    5668:	7823      	ldrb	r3, [r4, #0]
    566a:	429a      	cmp	r2, r3
    566c:	d005      	beq.n	567a <bt_le_adv_start_legacy+0x82>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    566e:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    5672:	f106 0098 	add.w	r0, r6, #152	; 0x98
    5676:	f00c fe85 	bl	12384 <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
    567a:	7820      	ldrb	r0, [r4, #0]
	bt_dev.adv_conn_id = adv->id;

	err = le_adv_set_random_addr(adv, param->options, dir_adv,
    567c:	465a      	mov	r2, fp
	adv->id = param->id;
    567e:	7630      	strb	r0, [r6, #24]
	bt_dev.adv_conn_id = adv->id;
    5680:	f886 0037 	strb.w	r0, [r6, #55]	; 0x37
	err = le_adv_set_random_addr(adv, param->options, dir_adv,
    5684:	6861      	ldr	r1, [r4, #4]
    5686:	f10d 0325 	add.w	r3, sp, #37	; 0x25
    568a:	f7ff f90b 	bl	48a4 <le_adv_set_random_addr.isra.0>
				     &set_param.own_addr_type);
	if (err) {
    568e:	4606      	mov	r6, r0
    5690:	2800      	cmp	r0, #0
    5692:	d167      	bne.n	5764 <bt_le_adv_start_legacy+0x16c>
		return err;
	}

	if (dir_adv) {
    5694:	2d00      	cmp	r5, #0
    5696:	d043      	beq.n	5720 <bt_le_adv_start_legacy+0x128>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    5698:	6921      	ldr	r1, [r4, #16]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    569a:	4855      	ldr	r0, [pc, #340]	; (57f0 <bt_le_adv_start_legacy+0x1f8>)
    569c:	f00c fe61 	bl	12362 <bt_addr_le_copy>
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    56a0:	6860      	ldr	r0, [r4, #4]
    56a2:	07c2      	lsls	r2, r0, #31
    56a4:	d544      	bpl.n	5730 <bt_le_adv_start_legacy+0x138>
		scannable = true;

		if (dir_adv) {
    56a6:	2d00      	cmp	r5, #0
    56a8:	d03f      	beq.n	572a <bt_le_adv_start_legacy+0x132>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    56aa:	f010 0f10 	tst.w	r0, #16
    56ae:	bf14      	ite	ne
    56b0:	2304      	movne	r3, #4
    56b2:	2301      	moveq	r3, #1
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
    56b4:	6921      	ldr	r1, [r4, #16]
    56b6:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    56ba:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    56be:	f00c fe50 	bl	12362 <bt_addr_le_copy>

		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
					     BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    56c2:	210f      	movs	r1, #15
    56c4:	f242 0006 	movw	r0, #8198	; 0x2006
    56c8:	f7fe fede 	bl	4488 <bt_hci_cmd_create>
	if (!buf) {
    56cc:	4606      	mov	r6, r0
    56ce:	2800      	cmp	r0, #0
    56d0:	f000 8088 	beq.w	57e4 <bt_le_adv_start_legacy+0x1ec>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    56d4:	220f      	movs	r2, #15
    56d6:	a908      	add	r1, sp, #32
    56d8:	3008      	adds	r0, #8
    56da:	f00e fca3 	bl	14024 <net_buf_simple_add_mem>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    56de:	4631      	mov	r1, r6
    56e0:	2200      	movs	r2, #0
    56e2:	f242 0006 	movw	r0, #8198	; 0x2006
    56e6:	f7fe ff19 	bl	451c <bt_hci_cmd_send_sync>
	if (err) {
    56ea:	4606      	mov	r6, r0
    56ec:	2800      	cmp	r0, #0
    56ee:	d139      	bne.n	5764 <bt_le_adv_start_legacy+0x16c>
		return err;
	}

	if (!dir_adv) {
    56f0:	b355      	cbz	r5, 5748 <bt_le_adv_start_legacy+0x150>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    56f2:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    56f4:	07db      	lsls	r3, r3, #31
    56f6:	d439      	bmi.n	576c <bt_le_adv_start_legacy+0x174>
	return set_le_adv_enable_legacy(adv, enable);
    56f8:	2101      	movs	r1, #1
    56fa:	483e      	ldr	r0, [pc, #248]	; (57f4 <bt_le_adv_start_legacy+0x1fc>)
    56fc:	f7fe ff9c 	bl	4638 <set_le_adv_enable_legacy>
			return err;
		}
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    5700:	4606      	mov	r6, r0
    5702:	2800      	cmp	r0, #0
    5704:	d03a      	beq.n	577c <bt_le_adv_start_legacy+0x184>
		BT_ERR("Failed to start advertiser");
    5706:	483c      	ldr	r0, [pc, #240]	; (57f8 <bt_le_adv_start_legacy+0x200>)
    5708:	2145      	movs	r1, #69	; 0x45
    570a:	f00b fb67 	bl	10ddc <printk>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    570e:	9805      	ldr	r0, [sp, #20]
    5710:	b340      	cbz	r0, 5764 <bt_le_adv_start_legacy+0x16c>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5712:	2100      	movs	r1, #0
    5714:	f000 fed2 	bl	64bc <bt_conn_set_state>
			bt_conn_unref(conn);
    5718:	9805      	ldr	r0, [sp, #20]
    571a:	f00d f871 	bl	12800 <bt_conn_unref>
    571e:	e021      	b.n	5764 <bt_le_adv_start_legacy+0x16c>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    5720:	9506      	str	r5, [sp, #24]
    5722:	a906      	add	r1, sp, #24
    5724:	f8cd 501b 	str.w	r5, [sp, #27]
    5728:	e7b7      	b.n	569a <bt_le_adv_start_legacy+0xa2>
			set_param.type = BT_HCI_ADV_IND;
    572a:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
    572e:	e7c8      	b.n	56c2 <bt_le_adv_start_legacy+0xca>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    5730:	f1b8 0f00 	cmp.w	r8, #0
    5734:	d106      	bne.n	5744 <bt_le_adv_start_legacy+0x14c>
    5736:	f3c0 07c0 	ubfx	r7, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
    573a:	f1c7 0303 	rsb	r3, r7, #3
    573e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    5742:	e7be      	b.n	56c2 <bt_le_adv_start_legacy+0xca>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    5744:	2701      	movs	r7, #1
    5746:	e7f8      	b.n	573a <bt_le_adv_start_legacy+0x142>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, scannable,
    5748:	6863      	ldr	r3, [r4, #4]
    574a:	4642      	mov	r2, r8
    574c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    5750:	e9cd 7300 	strd	r7, r3, [sp]
    5754:	4649      	mov	r1, r9
    5756:	9b16      	ldr	r3, [sp, #88]	; 0x58
    5758:	9803      	ldr	r0, [sp, #12]
    575a:	f7ff f801 	bl	4760 <le_adv_update.constprop.0>
		if (err) {
    575e:	4606      	mov	r6, r0
    5760:	2800      	cmp	r0, #0
    5762:	d0c6      	beq.n	56f2 <bt_le_adv_start_legacy+0xfa>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    5764:	4630      	mov	r0, r6
    5766:	b00d      	add	sp, #52	; 0x34
    5768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = le_adv_start_add_conn(adv, &conn);
    576c:	4821      	ldr	r0, [pc, #132]	; (57f4 <bt_le_adv_start_legacy+0x1fc>)
    576e:	a905      	add	r1, sp, #20
    5770:	f7fe fe08 	bl	4384 <le_adv_start_add_conn>
		if (err) {
    5774:	4606      	mov	r6, r0
    5776:	2800      	cmp	r0, #0
    5778:	d0be      	beq.n	56f8 <bt_le_adv_start_legacy+0x100>
    577a:	e7f3      	b.n	5764 <bt_le_adv_start_legacy+0x16c>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    577c:	9805      	ldr	r0, [sp, #20]
    577e:	b108      	cbz	r0, 5784 <bt_le_adv_start_legacy+0x18c>
		bt_conn_unref(conn);
    5780:	f00d f83e 	bl	12800 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    5784:	bb1d      	cbnz	r5, 57ce <bt_le_adv_start_legacy+0x1d6>
    5786:	6862      	ldr	r2, [r4, #4]
    5788:	f082 0202 	eor.w	r2, r2, #2
    578c:	f3c2 0240 	ubfx	r2, r2, #1, #1
    5790:	210b      	movs	r1, #11
    5792:	481a      	ldr	r0, [pc, #104]	; (57fc <bt_le_adv_start_legacy+0x204>)
    5794:	f00c fe01 	bl	1239a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
    5798:	6862      	ldr	r2, [r4, #4]
    579a:	2107      	movs	r1, #7
    579c:	4817      	ldr	r0, [pc, #92]	; (57fc <bt_le_adv_start_legacy+0x204>)
    579e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    57a2:	f00c fdfa 	bl	1239a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    57a6:	6862      	ldr	r2, [r4, #4]
    57a8:	2108      	movs	r1, #8
    57aa:	4814      	ldr	r0, [pc, #80]	; (57fc <bt_le_adv_start_legacy+0x204>)
    57ac:	f002 0201 	and.w	r2, r2, #1
    57b0:	f00c fdf3 	bl	1239a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    57b4:	463a      	mov	r2, r7
    57b6:	2109      	movs	r1, #9
    57b8:	4810      	ldr	r0, [pc, #64]	; (57fc <bt_le_adv_start_legacy+0x204>)
    57ba:	f00c fdee 	bl	1239a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    57be:	6862      	ldr	r2, [r4, #4]
    57c0:	210a      	movs	r1, #10
    57c2:	480e      	ldr	r0, [pc, #56]	; (57fc <bt_le_adv_start_legacy+0x204>)
    57c4:	f3c2 0280 	ubfx	r2, r2, #2, #1
    57c8:	f00c fde7 	bl	1239a <atomic_set_bit_to>
	return 0;
    57cc:	e7ca      	b.n	5764 <bt_le_adv_start_legacy+0x16c>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    57ce:	2200      	movs	r2, #0
    57d0:	e7de      	b.n	5790 <bt_le_adv_start_legacy+0x198>
		return -EAGAIN;
    57d2:	f06f 060a 	mvn.w	r6, #10
    57d6:	e7c5      	b.n	5764 <bt_le_adv_start_legacy+0x16c>
		return -EINVAL;
    57d8:	f06f 0615 	mvn.w	r6, #21
    57dc:	e7c2      	b.n	5764 <bt_le_adv_start_legacy+0x16c>
		return -EALREADY;
    57de:	f06f 0644 	mvn.w	r6, #68	; 0x44
    57e2:	e7bf      	b.n	5764 <bt_le_adv_start_legacy+0x16c>
		return -ENOBUFS;
    57e4:	f06f 0636 	mvn.w	r6, #54	; 0x36
    57e8:	e7bc      	b.n	5764 <bt_le_adv_start_legacy+0x16c>
    57ea:	bf00      	nop
    57ec:	20000000 	.word	0x20000000
    57f0:	20000023 	.word	0x20000023
    57f4:	20000018 	.word	0x20000018
    57f8:	00017cdc 	.word	0x00017cdc
    57fc:	2000002c 	.word	0x2000002c

00005800 <bt_le_adv_stop>:

	return bt_le_adv_start_legacy(param, ad, ad_len, sd, sd_len);
}

int bt_le_adv_stop(void)
{
    5800:	b530      	push	{r4, r5, lr}
    5802:	4c22      	ldr	r4, [pc, #136]	; (588c <bt_le_adv_stop+0x8c>)
    5804:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    5808:	b085      	sub	sp, #20
    580a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    580e:	f00c fdb9 	bl	12384 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5812:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    5816:	f00c fda1 	bl	1235c <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    581a:	0642      	lsls	r2, r0, #25
    581c:	f3c0 1380 	ubfx	r3, r0, #6, #1
    5820:	d531      	bpl.n	5886 <bt_le_adv_stop+0x86>
    5822:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    5826:	f00c fd99 	bl	1235c <atomic_get>
		 */
		adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    582a:	05c3      	lsls	r3, r0, #23
    582c:	d521      	bpl.n	5872 <bt_le_adv_stop+0x72>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    582e:	2300      	movs	r3, #0
    5830:	4669      	mov	r1, sp
    5832:	f104 0023 	add.w	r0, r4, #35	; 0x23
    5836:	9300      	str	r3, [sp, #0]
    5838:	f8cd 3003 	str.w	r3, [sp, #3]
    583c:	f00c fd9f 	bl	1237e <bt_addr_le_cmp>
    5840:	7e25      	ldrb	r5, [r4, #24]
    5842:	b9e0      	cbnz	r0, 587e <bt_le_adv_stop+0x7e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
    5844:	4b12      	ldr	r3, [pc, #72]	; (5890 <bt_le_adv_stop+0x90>)
    5846:	a902      	add	r1, sp, #8
    5848:	889a      	ldrh	r2, [r3, #4]
    584a:	6818      	ldr	r0, [r3, #0]
    584c:	f8ad 200c 	strh.w	r2, [sp, #12]
    5850:	2204      	movs	r2, #4
    5852:	799b      	ldrb	r3, [r3, #6]
    5854:	9002      	str	r0, [sp, #8]
    5856:	f88d 300e 	strb.w	r3, [sp, #14]
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    585a:	4628      	mov	r0, r5
    585c:	f000 fdec 	bl	6438 <bt_conn_lookup_state_le>
    5860:	4604      	mov	r4, r0
	if (conn) {
    5862:	b130      	cbz	r0, 5872 <bt_le_adv_stop+0x72>
		conn->err = status;
    5864:	2100      	movs	r1, #0
    5866:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5868:	f000 fe28 	bl	64bc <bt_conn_set_state>
		bt_conn_unref(conn);
    586c:	4620      	mov	r0, r4
    586e:	f00c ffc7 	bl	12800 <bt_conn_unref>
		err = set_le_adv_enable_ext(adv, false, NULL);
		if (err) {
			return err;
		}
	} else {
		err = set_le_adv_enable_legacy(adv, false);
    5872:	2100      	movs	r1, #0
    5874:	4807      	ldr	r0, [pc, #28]	; (5894 <bt_le_adv_stop+0x94>)
    5876:	f7fe fedf 	bl	4638 <set_le_adv_enable_legacy>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    587a:	b005      	add	sp, #20
    587c:	bd30      	pop	{r4, r5, pc}
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    587e:	2205      	movs	r2, #5
    5880:	f104 0123 	add.w	r1, r4, #35	; 0x23
    5884:	e7e9      	b.n	585a <bt_le_adv_stop+0x5a>
		return 0;
    5886:	4618      	mov	r0, r3
    5888:	e7f7      	b.n	587a <bt_le_adv_stop+0x7a>
    588a:	bf00      	nop
    588c:	20000000 	.word	0x20000000
    5890:	000156e8 	.word	0x000156e8
    5894:	20000018 	.word	0x20000018

00005898 <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    5898:	b513      	push	{r0, r1, r4, lr}
    589a:	4818      	ldr	r0, [pc, #96]	; (58fc <bt_le_adv_resume+0x64>)
    589c:	f00c fd5e 	bl	1235c <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    58a0:	0501      	lsls	r1, r0, #20
    58a2:	d529      	bpl.n	58f8 <bt_le_adv_resume+0x60>
    58a4:	4815      	ldr	r0, [pc, #84]	; (58fc <bt_le_adv_resume+0x64>)
    58a6:	f00c fd59 	bl	1235c <atomic_get>
    58aa:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    58ac:	f3c0 1480 	ubfx	r4, r0, #6, #1
    58b0:	d422      	bmi.n	58f8 <bt_le_adv_resume+0x60>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    58b2:	4812      	ldr	r0, [pc, #72]	; (58fc <bt_le_adv_resume+0x64>)
    58b4:	f00c fd52 	bl	1235c <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    58b8:	05c3      	lsls	r3, r0, #23
    58ba:	d51d      	bpl.n	58f8 <bt_le_adv_resume+0x60>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
    58bc:	4810      	ldr	r0, [pc, #64]	; (5900 <bt_le_adv_resume+0x68>)
    58be:	a901      	add	r1, sp, #4
    58c0:	f7fe fd60 	bl	4384 <le_adv_start_add_conn>
	if (err) {
    58c4:	b9c0      	cbnz	r0, 58f8 <bt_le_adv_resume+0x60>
	return set_le_adv_enable_legacy(adv, enable);
    58c6:	2101      	movs	r1, #1
    58c8:	480d      	ldr	r0, [pc, #52]	; (5900 <bt_le_adv_resume+0x68>)
    58ca:	f7fe feb5 	bl	4638 <set_le_adv_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		le_adv_set_private_addr(adv);
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    58ce:	b150      	cbz	r0, 58e6 <bt_le_adv_resume+0x4e>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    58d0:	4621      	mov	r1, r4
    58d2:	9801      	ldr	r0, [sp, #4]
    58d4:	f000 fdf2 	bl	64bc <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    58d8:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    58dc:	4807      	ldr	r0, [pc, #28]	; (58fc <bt_le_adv_resume+0x64>)
    58de:	f00c fd51 	bl	12384 <atomic_and>
	return (old & mask) != 0;
    58e2:	f3c0 24c0 	ubfx	r4, r0, #11, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
    58e6:	9801      	ldr	r0, [sp, #4]
    58e8:	f00c ff8a 	bl	12800 <bt_conn_unref>
	if (persist_paused) {
    58ec:	b124      	cbz	r4, 58f8 <bt_le_adv_resume+0x60>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    58ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
    58f2:	4802      	ldr	r0, [pc, #8]	; (58fc <bt_le_adv_resume+0x64>)
    58f4:	f00c fd38 	bl	12368 <atomic_or>
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
    58f8:	b002      	add	sp, #8
    58fa:	bd10      	pop	{r4, pc}
    58fc:	2000002c 	.word	0x2000002c
    5900:	20000018 	.word	0x20000018

00005904 <enh_conn_complete>:
{
    5904:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	u16_t handle = sys_le16_to_cpu(evt->handle);
    5908:	f8b0 7001 	ldrh.w	r7, [r0, #1]
{
    590c:	4604      	mov	r4, r0
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    590e:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
    5912:	4859      	ldr	r0, [pc, #356]	; (5a78 <enh_conn_complete+0x174>)
    5914:	f00c fd36 	bl	12384 <atomic_and>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    5918:	0443      	lsls	r3, r0, #17
	u16_t handle = sys_le16_to_cpu(evt->handle);
    591a:	fa1f f887 	uxth.w	r8, r7
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    591e:	d504      	bpl.n	592a <enh_conn_complete+0x26>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
    5920:	2200      	movs	r2, #0
    5922:	2002      	movs	r0, #2
    5924:	4955      	ldr	r1, [pc, #340]	; (5a7c <enh_conn_complete+0x178>)
    5926:	f005 fdc9 	bl	b4bc <bt_keys_foreach>
	if (evt->status) {
    592a:	7825      	ldrb	r5, [r4, #0]
    592c:	b305      	cbz	r5, 5970 <enh_conn_complete+0x6c>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    592e:	2d3c      	cmp	r5, #60	; 0x3c
    5930:	d118      	bne.n	5964 <enh_conn_complete+0x60>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5932:	f06f 0140 	mvn.w	r1, #64	; 0x40
    5936:	4852      	ldr	r0, [pc, #328]	; (5a80 <enh_conn_complete+0x17c>)
    5938:	f00c fd24 	bl	12384 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    593c:	2000      	movs	r0, #0
    593e:	f7fe fb3b 	bl	3fb8 <find_pending_connect.part.0>
		if (!conn) {
    5942:	4604      	mov	r4, r0
    5944:	b930      	cbnz	r0, 5954 <enh_conn_complete+0x50>
			BT_ERR("No pending slave connection");
    5946:	2145      	movs	r1, #69	; 0x45
    5948:	484e      	ldr	r0, [pc, #312]	; (5a84 <enh_conn_complete+0x180>)
    594a:	f00b fa47 	bl	10ddc <printk>
}
    594e:	b004      	add	sp, #16
    5950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    5954:	7305      	strb	r5, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5956:	2100      	movs	r1, #0
    5958:	f000 fdb0 	bl	64bc <bt_conn_set_state>
		bt_conn_unref(conn);
    595c:	4620      	mov	r0, r4
	bt_conn_unref(conn);
    595e:	f00c ff4f 	bl	12800 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    5962:	e7f4      	b.n	594e <enh_conn_complete+0x4a>
		BT_WARN("Unexpected status 0x%02x", evt->status);
    5964:	462a      	mov	r2, r5
    5966:	2157      	movs	r1, #87	; 0x57
    5968:	4847      	ldr	r0, [pc, #284]	; (5a88 <enh_conn_complete+0x184>)
    596a:	f00b fa37 	bl	10ddc <printk>
		return;
    596e:	e7ee      	b.n	594e <enh_conn_complete+0x4a>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    5970:	7923      	ldrb	r3, [r4, #4]
    5972:	1d26      	adds	r6, r4, #4
    5974:	3b02      	subs	r3, #2
    5976:	2b01      	cmp	r3, #1
    5978:	d82c      	bhi.n	59d4 <enh_conn_complete+0xd0>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    597a:	4631      	mov	r1, r6
    597c:	a802      	add	r0, sp, #8
    597e:	f00c fcf0 	bl	12362 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    5982:	f89d 3008 	ldrb.w	r3, [sp, #8]
    5986:	2206      	movs	r2, #6
    5988:	3b02      	subs	r3, #2
    598a:	f104 0111 	add.w	r1, r4, #17
    598e:	f10d 0001 	add.w	r0, sp, #1
    5992:	f88d 3008 	strb.w	r3, [sp, #8]
    5996:	f00c fbe2 	bl	1215e <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    599a:	2301      	movs	r3, #1
    599c:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    59a0:	78e3      	ldrb	r3, [r4, #3]
    59a2:	2b01      	cmp	r3, #1
    59a4:	d10c      	bne.n	59c0 <enh_conn_complete+0xbc>
    59a6:	a802      	add	r0, sp, #8
    59a8:	f7fe fb06 	bl	3fb8 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    59ac:	78e3      	ldrb	r3, [r4, #3]
    59ae:	4605      	mov	r5, r0
    59b0:	2b01      	cmp	r3, #1
    59b2:	d104      	bne.n	59be <enh_conn_complete+0xba>
    59b4:	f06f 0140 	mvn.w	r1, #64	; 0x40
    59b8:	4831      	ldr	r0, [pc, #196]	; (5a80 <enh_conn_complete+0x17c>)
    59ba:	f00c fce3 	bl	12384 <atomic_and>
	if (!conn) {
    59be:	b9e5      	cbnz	r5, 59fa <enh_conn_complete+0xf6>
		BT_ERR("Unable to add new conn for handle %u", handle);
    59c0:	4642      	mov	r2, r8
    59c2:	2145      	movs	r1, #69	; 0x45
    59c4:	4831      	ldr	r0, [pc, #196]	; (5a8c <enh_conn_complete+0x188>)
    59c6:	f00b fa09 	bl	10ddc <printk>
		bt_hci_disconnect(handle, BT_HCI_ERR_MEM_CAPACITY_EXCEEDED);
    59ca:	2107      	movs	r1, #7
    59cc:	4640      	mov	r0, r8
    59ce:	f00c fdb9 	bl	12544 <bt_hci_disconnect>
		return;
    59d2:	e7bc      	b.n	594e <enh_conn_complete+0x4a>
		u8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
    59d4:	78e3      	ldrb	r3, [r4, #3]
		bt_addr_le_copy(&id_addr,
    59d6:	4631      	mov	r1, r6
		u8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
    59d8:	2b01      	cmp	r3, #1
    59da:	bf04      	itt	eq
    59dc:	4b2c      	ldreq	r3, [pc, #176]	; (5a90 <enh_conn_complete+0x18c>)
    59de:	f893 5037 	ldrbeq.w	r5, [r3, #55]	; 0x37
		bt_addr_le_copy(&id_addr,
    59e2:	4628      	mov	r0, r5
    59e4:	f00c fd68 	bl	124b8 <bt_lookup_id_addr>
    59e8:	4601      	mov	r1, r0
    59ea:	a802      	add	r0, sp, #8
    59ec:	f00c fcb9 	bl	12362 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    59f0:	4631      	mov	r1, r6
    59f2:	4668      	mov	r0, sp
    59f4:	f00c fcb5 	bl	12362 <bt_addr_le_copy>
    59f8:	e7d2      	b.n	59a0 <enh_conn_complete+0x9c>
	conn->handle = handle;
    59fa:	4628      	mov	r0, r5
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    59fc:	a902      	add	r1, sp, #8
	conn->handle = handle;
    59fe:	f820 7b7c 	strh.w	r7, [r0], #124
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    5a02:	f00c fcae 	bl	12362 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    5a06:	7e22      	ldrb	r2, [r4, #24]
    5a08:	7de3      	ldrb	r3, [r4, #23]
    5a0a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    5a0e:	f8a5 3092 	strh.w	r3, [r5, #146]	; 0x92
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    5a12:	7ea2      	ldrb	r2, [r4, #26]
    5a14:	7e63      	ldrb	r3, [r4, #25]
    5a16:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    5a1a:	f8a5 3098 	strh.w	r3, [r5, #152]	; 0x98
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    5a1e:	7ee3      	ldrb	r3, [r4, #27]
    5a20:	7f22      	ldrb	r2, [r4, #28]
    5a22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    5a26:	f8a5 309a 	strh.w	r3, [r5, #154]	; 0x9a
	conn->role = evt->role;
    5a2a:	78e3      	ldrb	r3, [r4, #3]
	conn->err = 0U;
    5a2c:	2400      	movs	r4, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    5a2e:	2b01      	cmp	r3, #1
	conn->role = evt->role;
    5a30:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
    5a32:	732c      	strb	r4, [r5, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    5a34:	d116      	bne.n	5a64 <enh_conn_complete+0x160>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    5a36:	4669      	mov	r1, sp
    5a38:	f105 0083 	add.w	r0, r5, #131	; 0x83
    5a3c:	f00c fc91 	bl	12362 <bt_addr_le_copy>
						&bt_dev.id_addr[conn->id]);
    5a40:	7a29      	ldrb	r1, [r5, #8]
    5a42:	4e13      	ldr	r6, [pc, #76]	; (5a90 <enh_conn_complete+0x18c>)
    5a44:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
    5a48:	4431      	add	r1, r6
    5a4a:	f105 008a 	add.w	r0, r5, #138	; 0x8a
    5a4e:	f00c fc88 	bl	12362 <bt_addr_le_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    5a52:	4622      	mov	r2, r4
    5a54:	f8d6 10ac 	ldr.w	r1, [r6, #172]	; 0xac
    5a58:	f001 0340 	and.w	r3, r1, #64	; 0x40
    5a5c:	4313      	orrs	r3, r2
    5a5e:	d001      	beq.n	5a64 <enh_conn_complete+0x160>
			bt_le_adv_resume();
    5a60:	f7ff ff1a 	bl	5898 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    5a64:	2107      	movs	r1, #7
    5a66:	4628      	mov	r0, r5
    5a68:	f000 fd28 	bl	64bc <bt_conn_set_state>
	conn_auto_initiate(conn);
    5a6c:	4628      	mov	r0, r5
    5a6e:	f7ff f9b3 	bl	4dd8 <conn_auto_initiate>
	bt_conn_unref(conn);
    5a72:	4628      	mov	r0, r5
    5a74:	e773      	b.n	595e <enh_conn_complete+0x5a>
    5a76:	bf00      	nop
    5a78:	20000098 	.word	0x20000098
    5a7c:	00012509 	.word	0x00012509
    5a80:	2000002c 	.word	0x2000002c
    5a84:	00017cfc 	.word	0x00017cfc
    5a88:	00017d1d 	.word	0x00017d1d
    5a8c:	00017d3b 	.word	0x00017d3b
    5a90:	20000000 	.word	0x20000000

00005a94 <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN,
    5a94:	2801      	cmp	r0, #1
{
    5a96:	b570      	push	{r4, r5, r6, lr}
    5a98:	4605      	mov	r5, r0
    5a9a:	4616      	mov	r6, r2
    5a9c:	461c      	mov	r4, r3
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN,
    5a9e:	d01f      	beq.n	5ae0 <bt_buf_get_rx+0x4c>
    5aa0:	2803      	cmp	r0, #3
    5aa2:	d00e      	beq.n	5ac2 <bt_buf_get_rx+0x2e>
    5aa4:	490f      	ldr	r1, [pc, #60]	; (5ae4 <bt_buf_get_rx+0x50>)
    5aa6:	f242 03da 	movw	r3, #8410	; 0x20da
    5aaa:	4a0f      	ldr	r2, [pc, #60]	; (5ae8 <bt_buf_get_rx+0x54>)
    5aac:	480f      	ldr	r0, [pc, #60]	; (5aec <bt_buf_get_rx+0x58>)
    5aae:	f00b f995 	bl	10ddc <printk>
    5ab2:	480f      	ldr	r0, [pc, #60]	; (5af0 <bt_buf_get_rx+0x5c>)
    5ab4:	f00b f992 	bl	10ddc <printk>
    5ab8:	f242 01da 	movw	r1, #8410	; 0x20da
    5abc:	480a      	ldr	r0, [pc, #40]	; (5ae8 <bt_buf_get_rx+0x54>)
    5abe:	f00b fc23 	bl	11308 <assert_post_action>

#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	if (type == BT_BUF_EVT) {
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
    5ac2:	4632      	mov	r2, r6
    5ac4:	4623      	mov	r3, r4
    5ac6:	480b      	ldr	r0, [pc, #44]	; (5af4 <bt_buf_get_rx+0x60>)
		buf = net_buf_alloc(&hci_rx_pool, timeout);
    5ac8:	f00e fa83 	bl	13fd2 <net_buf_alloc_fixed>
    5acc:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    5ace:	b12c      	cbz	r4, 5adc <bt_buf_get_rx+0x48>
		net_buf_reserve(buf, BT_BUF_RESERVE);
    5ad0:	2101      	movs	r1, #1
    5ad2:	f104 0008 	add.w	r0, r4, #8
    5ad6:	f005 ff6f 	bl	b9b8 <net_buf_simple_reserve>
	*(u8_t *)net_buf_user_data(buf) = type;
    5ada:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    5adc:	4620      	mov	r0, r4
    5ade:	bd70      	pop	{r4, r5, r6, pc}
		buf = net_buf_alloc(&hci_rx_pool, timeout);
    5ae0:	4805      	ldr	r0, [pc, #20]	; (5af8 <bt_buf_get_rx+0x64>)
    5ae2:	e7f1      	b.n	5ac8 <bt_buf_get_rx+0x34>
    5ae4:	00017d65 	.word	0x00017d65
    5ae8:	00017600 	.word	0x00017600
    5aec:	00016493 	.word	0x00016493
    5af0:	00017d91 	.word	0x00017d91
    5af4:	200005f0 	.word	0x200005f0
    5af8:	200006f8 	.word	0x200006f8

00005afc <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    5afc:	4602      	mov	r2, r0
    5afe:	460b      	mov	r3, r1
    5b00:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
    5b02:	f04f 0120 	mov.w	r1, #32
    5b06:	f3ef 8511 	mrs	r5, BASEPRI
    5b0a:	f381 8811 	msr	BASEPRI, r1
    5b0e:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
	bt_dev.sent_cmd = NULL;
    5b12:	2000      	movs	r0, #0
	buf = bt_dev.sent_cmd;
    5b14:	490b      	ldr	r1, [pc, #44]	; (5b44 <bt_buf_get_cmd_complete+0x48>)
    5b16:	f8d1 40e8 	ldr.w	r4, [r1, #232]	; 0xe8
	bt_dev.sent_cmd = NULL;
    5b1a:	f8c1 00e8 	str.w	r0, [r1, #232]	; 0xe8
	__asm__ volatile(
    5b1e:	f385 8811 	msr	BASEPRI, r5
    5b22:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    5b26:	b924      	cbnz	r4, 5b32 <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    5b28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    5b2c:	2001      	movs	r0, #1
    5b2e:	f7ff bfb1 	b.w	5a94 <bt_buf_get_rx>
    5b32:	2101      	movs	r1, #1
		buf->len = 0U;
    5b34:	81a0      	strh	r0, [r4, #12]
    5b36:	7521      	strb	r1, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
    5b38:	f104 0008 	add.w	r0, r4, #8
    5b3c:	f005 ff3c 	bl	b9b8 <net_buf_simple_reserve>
}
    5b40:	4620      	mov	r0, r4
    5b42:	bd70      	pop	{r4, r5, r6, pc}
    5b44:	20000000 	.word	0x20000000

00005b48 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(u8_t evt, bool discardable, k_timeout_t timeout)
{
    5b48:	b570      	push	{r4, r5, r6, lr}
    5b4a:	4604      	mov	r4, r0
	switch (evt) {
    5b4c:	2c0f      	cmp	r4, #15
{
    5b4e:	460d      	mov	r5, r1
    5b50:	4610      	mov	r0, r2
    5b52:	4619      	mov	r1, r3
	switch (evt) {
    5b54:	d805      	bhi.n	5b62 <bt_buf_get_evt+0x1a>
    5b56:	2c0d      	cmp	r4, #13
    5b58:	d912      	bls.n	5b80 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    5b5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    5b5e:	f7ff bfcd 	b.w	5afc <bt_buf_get_cmd_complete>
	switch (evt) {
    5b62:	2c13      	cmp	r4, #19
    5b64:	d10c      	bne.n	5b80 <bt_buf_get_evt+0x38>
			buf = net_buf_alloc(&num_complete_pool, timeout);
    5b66:	480b      	ldr	r0, [pc, #44]	; (5b94 <bt_buf_get_evt+0x4c>)
			buf = net_buf_alloc(&discardable_pool, timeout);
    5b68:	f00e fa33 	bl	13fd2 <net_buf_alloc_fixed>
			if (buf) {
    5b6c:	4604      	mov	r4, r0
    5b6e:	b128      	cbz	r0, 5b7c <bt_buf_get_evt+0x34>
				net_buf_reserve(buf, BT_BUF_RESERVE);
    5b70:	2101      	movs	r1, #1
    5b72:	3008      	adds	r0, #8
    5b74:	f005 ff20 	bl	b9b8 <net_buf_simple_reserve>
    5b78:	2301      	movs	r3, #1
    5b7a:	7523      	strb	r3, [r4, #20]
}
    5b7c:	4620      	mov	r0, r4
    5b7e:	bd70      	pop	{r4, r5, r6, pc}
			buf = net_buf_alloc(&discardable_pool, timeout);
    5b80:	4602      	mov	r2, r0
    5b82:	460b      	mov	r3, r1
		if (discardable) {
    5b84:	b10d      	cbz	r5, 5b8a <bt_buf_get_evt+0x42>
			buf = net_buf_alloc(&discardable_pool, timeout);
    5b86:	4804      	ldr	r0, [pc, #16]	; (5b98 <bt_buf_get_evt+0x50>)
    5b88:	e7ee      	b.n	5b68 <bt_buf_get_evt+0x20>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    5b8a:	2001      	movs	r0, #1
}
    5b8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    5b90:	f7ff bf80 	b.w	5a94 <bt_buf_get_rx>
    5b94:	20000724 	.word	0x20000724
    5b98:	20000674 	.word	0x20000674

00005b9c <bt_pub_key_gen>:
}
#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_ECC)
int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    5b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    5b9e:	4e1c      	ldr	r6, [pc, #112]	; (5c10 <bt_pub_key_gen+0x74>)
    5ba0:	f896 306a 	ldrb.w	r3, [r6, #106]	; 0x6a
    5ba4:	f003 0306 	and.w	r3, r3, #6
    5ba8:	2b06      	cmp	r3, #6
    5baa:	d007      	beq.n	5bbc <bt_pub_key_gen+0x20>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
    5bac:	2157      	movs	r1, #87	; 0x57
    5bae:	4819      	ldr	r0, [pc, #100]	; (5c14 <bt_pub_key_gen+0x78>)
    5bb0:	f00b f914 	bl	10ddc <printk>
		return -ENOTSUP;
    5bb4:	f06f 0422 	mvn.w	r4, #34	; 0x22
		pub_key_cb = NULL;
		return err;
	}

	return 0;
}
    5bb8:	4620      	mov	r0, r4
    5bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	new_cb->_next = pub_key_cb;
    5bbc:	4f16      	ldr	r7, [pc, #88]	; (5c18 <bt_pub_key_gen+0x7c>)
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    5bbe:	2110      	movs	r1, #16
    5bc0:	683b      	ldr	r3, [r7, #0]
	pub_key_cb = new_cb;
    5bc2:	6038      	str	r0, [r7, #0]
	new_cb->_next = pub_key_cb;
    5bc4:	6043      	str	r3, [r0, #4]
    5bc6:	f106 0098 	add.w	r0, r6, #152	; 0x98
    5bca:	f00c fbcd 	bl	12368 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    5bce:	f010 0510 	ands.w	r5, r0, #16
    5bd2:	d11a      	bne.n	5c0a <bt_pub_key_gen+0x6e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5bd4:	f06f 0108 	mvn.w	r1, #8
    5bd8:	f106 0098 	add.w	r0, r6, #152	; 0x98
    5bdc:	f00c fbd2 	bl	12384 <atomic_and>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    5be0:	462a      	mov	r2, r5
    5be2:	4629      	mov	r1, r5
    5be4:	f242 0025 	movw	r0, #8229	; 0x2025
    5be8:	f7fe fc98 	bl	451c <bt_hci_cmd_send_sync>
	if (err) {
    5bec:	4604      	mov	r4, r0
    5bee:	2800      	cmp	r0, #0
    5bf0:	d0e2      	beq.n	5bb8 <bt_pub_key_gen+0x1c>
		BT_ERR("Sending LE P256 Public Key command failed");
    5bf2:	2145      	movs	r1, #69	; 0x45
    5bf4:	4809      	ldr	r0, [pc, #36]	; (5c1c <bt_pub_key_gen+0x80>)
    5bf6:	f00b f8f1 	bl	10ddc <printk>
    5bfa:	f06f 0110 	mvn.w	r1, #16
    5bfe:	f106 0098 	add.w	r0, r6, #152	; 0x98
    5c02:	f00c fbbf 	bl	12384 <atomic_and>
		pub_key_cb = NULL;
    5c06:	603d      	str	r5, [r7, #0]
		return err;
    5c08:	e7d6      	b.n	5bb8 <bt_pub_key_gen+0x1c>
		return 0;
    5c0a:	2400      	movs	r4, #0
    5c0c:	e7d4      	b.n	5bb8 <bt_pub_key_gen+0x1c>
    5c0e:	bf00      	nop
    5c10:	20000000 	.word	0x20000000
    5c14:	00017db1 	.word	0x00017db1
    5c18:	20000c40 	.word	0x20000c40
    5c1c:	00017dd5 	.word	0x00017dd5

00005c20 <bt_pub_key_get>:

const u8_t *bt_pub_key_get(void)
{
    5c20:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5c22:	4804      	ldr	r0, [pc, #16]	; (5c34 <bt_pub_key_get+0x14>)
    5c24:	f00c fb9a 	bl	1235c <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    5c28:	f010 0f08 	tst.w	r0, #8
		return pub_key;
	}

	return NULL;
}
    5c2c:	4802      	ldr	r0, [pc, #8]	; (5c38 <bt_pub_key_get+0x18>)
    5c2e:	bf08      	it	eq
    5c30:	2000      	moveq	r0, #0
    5c32:	bd08      	pop	{r3, pc}
    5c34:	20000098 	.word	0x20000098
    5c38:	20001faf 	.word	0x20001faf

00005c3c <bt_dh_key_gen>:

int bt_dh_key_gen(const u8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    5c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    5c3e:	4d1a      	ldr	r5, [pc, #104]	; (5ca8 <bt_dh_key_gen+0x6c>)
{
    5c40:	4606      	mov	r6, r0
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    5c42:	682b      	ldr	r3, [r5, #0]
    5c44:	b113      	cbz	r3, 5c4c <bt_dh_key_gen+0x10>
		return -EBUSY;
    5c46:	f06f 000f 	mvn.w	r0, #15
		dh_key_cb = NULL;
		return err;
	}

	return 0;
}
    5c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5c4c:	4817      	ldr	r0, [pc, #92]	; (5cac <bt_dh_key_gen+0x70>)
    5c4e:	f00c fb85 	bl	1235c <atomic_get>
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    5c52:	06c2      	lsls	r2, r0, #27
    5c54:	f3c0 1700 	ubfx	r7, r0, #4, #1
    5c58:	d4f5      	bmi.n	5c46 <bt_dh_key_gen+0xa>
    5c5a:	4814      	ldr	r0, [pc, #80]	; (5cac <bt_dh_key_gen+0x70>)
    5c5c:	f00c fb7e 	bl	1235c <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    5c60:	0703      	lsls	r3, r0, #28
    5c62:	d51d      	bpl.n	5ca0 <bt_dh_key_gen+0x64>
	dh_key_cb = cb;
    5c64:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    5c66:	f242 0026 	movw	r0, #8230	; 0x2026
    5c6a:	2140      	movs	r1, #64	; 0x40
    5c6c:	f7fe fc0c 	bl	4488 <bt_hci_cmd_create>
	if (!buf) {
    5c70:	4604      	mov	r4, r0
    5c72:	b918      	cbnz	r0, 5c7c <bt_dh_key_gen+0x40>
		dh_key_cb = NULL;
    5c74:	6028      	str	r0, [r5, #0]
		return -ENOBUFS;
    5c76:	f06f 0036 	mvn.w	r0, #54	; 0x36
    5c7a:	e7e6      	b.n	5c4a <bt_dh_key_gen+0xe>
	cp = net_buf_add(buf, sizeof(*cp));
    5c7c:	2140      	movs	r1, #64	; 0x40
    5c7e:	3008      	adds	r0, #8
    5c80:	f006 f86a 	bl	bd58 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    5c84:	2240      	movs	r2, #64	; 0x40
    5c86:	4631      	mov	r1, r6
    5c88:	f00c fa69 	bl	1215e <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    5c8c:	463a      	mov	r2, r7
    5c8e:	4621      	mov	r1, r4
    5c90:	f242 0026 	movw	r0, #8230	; 0x2026
    5c94:	f7fe fc42 	bl	451c <bt_hci_cmd_send_sync>
	if (err) {
    5c98:	2800      	cmp	r0, #0
    5c9a:	d0d6      	beq.n	5c4a <bt_dh_key_gen+0xe>
		dh_key_cb = NULL;
    5c9c:	602f      	str	r7, [r5, #0]
		return err;
    5c9e:	e7d4      	b.n	5c4a <bt_dh_key_gen+0xe>
		return -EADDRNOTAVAIL;
    5ca0:	f06f 0030 	mvn.w	r0, #48	; 0x30
    5ca4:	e7d1      	b.n	5c4a <bt_dh_key_gen+0xe>
    5ca6:	bf00      	nop
    5ca8:	20000c3c 	.word	0x20000c3c
    5cac:	20000098 	.word	0x20000098

00005cb0 <prng_reseed.constprop.0>:

#include "hci_core.h"

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
    5cb0:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
	u8_t seed[32];
	s64_t extra;
	size_t i;
	int ret;

	for (i = 0; i < (sizeof(seed) / 8); i++) {
    5cb4:	2500      	movs	r5, #0
static int prng_reseed(struct tc_hmac_prng_struct *h)
    5cb6:	b08c      	sub	sp, #48	; 0x30
		struct bt_hci_rp_le_rand *rp;
		struct net_buf *rsp;

		ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    5cb8:	2100      	movs	r1, #0
    5cba:	f242 0018 	movw	r0, #8216	; 0x2018
    5cbe:	aa02      	add	r2, sp, #8
    5cc0:	f7fe fc2c 	bl	451c <bt_hci_cmd_send_sync>
		if (ret) {
    5cc4:	4604      	mov	r4, r0
    5cc6:	bb68      	cbnz	r0, 5d24 <prng_reseed.constprop.0+0x74>
			return ret;
		}

		rp = (void *)rsp->data;
    5cc8:	9b02      	ldr	r3, [sp, #8]
		memcpy(&seed[i * 8], rp->rand, 8);
    5cca:	2208      	movs	r2, #8
    5ccc:	6899      	ldr	r1, [r3, #8]
    5cce:	ab04      	add	r3, sp, #16
    5cd0:	eb03 00c5 	add.w	r0, r3, r5, lsl #3
    5cd4:	3101      	adds	r1, #1
    5cd6:	f00c fa42 	bl	1215e <memcpy>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
    5cda:	3501      	adds	r5, #1

		net_buf_unref(rsp);
    5cdc:	9802      	ldr	r0, [sp, #8]
    5cde:	f005 fec9 	bl	ba74 <net_buf_unref>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
    5ce2:	2d04      	cmp	r5, #4
    5ce4:	d1e8      	bne.n	5cb8 <prng_reseed.constprop.0+0x8>
	return z_impl_k_uptime_ticks();
    5ce6:	f00f fa42 	bl	1516e <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    5cea:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    5cee:	fba0 bc05 	umull	fp, ip, r0, r5
    5cf2:	fb05 cc01 	mla	ip, r5, r1, ip
    5cf6:	ea4f 32db 	mov.w	r2, fp, lsr #15
    5cfa:	ea42 424c 	orr.w	r2, r2, ip, lsl #17
    5cfe:	ea4f 33dc 	mov.w	r3, ip, lsr #15
	}

	extra = k_uptime_get();
    5d02:	e9cd 2302 	strd	r2, r3, [sp, #8]

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (u8_t *)&extra,
    5d06:	2308      	movs	r3, #8
    5d08:	2220      	movs	r2, #32
    5d0a:	9300      	str	r3, [sp, #0]
    5d0c:	4807      	ldr	r0, [pc, #28]	; (5d2c <prng_reseed.constprop.0+0x7c>)
    5d0e:	446b      	add	r3, sp
    5d10:	a904      	add	r1, sp, #16
    5d12:	f00c f8e3 	bl	11edc <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
    5d16:	b928      	cbnz	r0, 5d24 <prng_reseed.constprop.0+0x74>
		BT_ERR("Failed to re-seed PRNG");
    5d18:	2145      	movs	r1, #69	; 0x45
    5d1a:	4805      	ldr	r0, [pc, #20]	; (5d30 <prng_reseed.constprop.0+0x80>)
    5d1c:	f00b f85e 	bl	10ddc <printk>
    5d20:	f06f 0404 	mvn.w	r4, #4
		return -EIO;
	}

	return 0;
}
    5d24:	4620      	mov	r0, r4
    5d26:	b00c      	add	sp, #48	; 0x30
    5d28:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
    5d2c:	200007b0 	.word	0x200007b0
    5d30:	00017e3a 	.word	0x00017e3a

00005d34 <sys_memcpy_swap.constprop.0>:
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
{
	u8_t *pdst = (u8_t *)dst;
	const u8_t *psrc = (const u8_t *)src;

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
    5d34:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
    5d36:	b570      	push	{r4, r5, r6, lr}
    5d38:	4604      	mov	r4, r0
    5d3a:	460d      	mov	r5, r1
    5d3c:	f101 0610 	add.w	r6, r1, #16
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
    5d40:	d919      	bls.n	5d76 <sys_memcpy_swap.constprop.0+0x42>
    5d42:	42b0      	cmp	r0, r6
    5d44:	d20e      	bcs.n	5d64 <sys_memcpy_swap.constprop.0+0x30>
    5d46:	490e      	ldr	r1, [pc, #56]	; (5d80 <sys_memcpy_swap.constprop.0+0x4c>)
    5d48:	f240 2317 	movw	r3, #535	; 0x217
    5d4c:	4a0d      	ldr	r2, [pc, #52]	; (5d84 <sys_memcpy_swap.constprop.0+0x50>)
    5d4e:	480e      	ldr	r0, [pc, #56]	; (5d88 <sys_memcpy_swap.constprop.0+0x54>)
    5d50:	f00b f844 	bl	10ddc <printk>
    5d54:	480d      	ldr	r0, [pc, #52]	; (5d8c <sys_memcpy_swap.constprop.0+0x58>)
    5d56:	f00b f841 	bl	10ddc <printk>
    5d5a:	f240 2117 	movw	r1, #535	; 0x217
    5d5e:	4809      	ldr	r0, [pc, #36]	; (5d84 <sys_memcpy_swap.constprop.0+0x50>)
    5d60:	f00b fad2 	bl	11308 <assert_post_action>
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
    5d64:	4633      	mov	r3, r6
    5d66:	3c01      	subs	r4, #1
		*pdst++ = *psrc--;
    5d68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
	for (; length > 0; length--) {
    5d6c:	42ab      	cmp	r3, r5
		*pdst++ = *psrc--;
    5d6e:	f804 2f01 	strb.w	r2, [r4, #1]!
	for (; length > 0; length--) {
    5d72:	d1f9      	bne.n	5d68 <sys_memcpy_swap.constprop.0+0x34>
	}
}
    5d74:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
    5d76:	d0e6      	beq.n	5d46 <sys_memcpy_swap.constprop.0+0x12>
    5d78:	f100 0310 	add.w	r3, r0, #16
    5d7c:	4299      	cmp	r1, r3
    5d7e:	e7e1      	b.n	5d44 <sys_memcpy_swap.constprop.0+0x10>
    5d80:	00017e81 	.word	0x00017e81
    5d84:	00017e56 	.word	0x00017e56
    5d88:	00016493 	.word	0x00016493
    5d8c:	00017ed8 	.word	0x00017ed8

00005d90 <prng_init>:

int prng_init(void)
{
    5d90:	b513      	push	{r0, r1, r4, lr}
	struct bt_hci_rp_le_rand *rp;
	struct net_buf *rsp;
	int ret;

	/* Check first that HCI_LE_Rand is supported */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    5d92:	4b13      	ldr	r3, [pc, #76]	; (5de0 <prng_init+0x50>)
    5d94:	f993 3063 	ldrsb.w	r3, [r3, #99]	; 0x63
    5d98:	2b00      	cmp	r3, #0
    5d9a:	da1d      	bge.n	5dd8 <prng_init+0x48>
		return -ENOTSUP;
	}

	ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    5d9c:	2100      	movs	r1, #0
    5d9e:	f242 0018 	movw	r0, #8216	; 0x2018
    5da2:	aa01      	add	r2, sp, #4
    5da4:	f7fe fbba 	bl	451c <bt_hci_cmd_send_sync>
	if (ret) {
    5da8:	b988      	cbnz	r0, 5dce <prng_init+0x3e>
		return ret;
	}

	rp = (void *)rsp->data;
    5daa:	9b01      	ldr	r3, [sp, #4]

	ret = tc_hmac_prng_init(&prng, rp->rand, sizeof(rp->rand));
    5dac:	2208      	movs	r2, #8
    5dae:	6899      	ldr	r1, [r3, #8]
    5db0:	480c      	ldr	r0, [pc, #48]	; (5de4 <prng_init+0x54>)
    5db2:	3101      	adds	r1, #1
    5db4:	f00c f872 	bl	11e9c <tc_hmac_prng_init>
    5db8:	4604      	mov	r4, r0

	net_buf_unref(rsp);
    5dba:	9801      	ldr	r0, [sp, #4]
    5dbc:	f005 fe5a 	bl	ba74 <net_buf_unref>

	if (ret == TC_CRYPTO_FAIL) {
    5dc0:	b93c      	cbnz	r4, 5dd2 <prng_init+0x42>
		BT_ERR("Failed to initialize PRNG");
    5dc2:	4809      	ldr	r0, [pc, #36]	; (5de8 <prng_init+0x58>)
    5dc4:	2145      	movs	r1, #69	; 0x45
    5dc6:	f00b f809 	bl	10ddc <printk>
		return -EIO;
    5dca:	f06f 0004 	mvn.w	r0, #4
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
    5dce:	b002      	add	sp, #8
    5dd0:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
    5dd2:	f7ff ff6d 	bl	5cb0 <prng_reseed.constprop.0>
    5dd6:	e7fa      	b.n	5dce <prng_init+0x3e>
		return -ENOTSUP;
    5dd8:	f06f 0022 	mvn.w	r0, #34	; 0x22
    5ddc:	e7f7      	b.n	5dce <prng_init+0x3e>
    5dde:	bf00      	nop
    5de0:	20000000 	.word	0x20000000
    5de4:	200007b0 	.word	0x200007b0
    5de8:	00017f0a 	.word	0x00017f0a

00005dec <bt_rand>:

int bt_rand(void *buf, size_t len)
{
    5dec:	b538      	push	{r3, r4, r5, lr}
	int ret;

	ret = tc_hmac_prng_generate(buf, len, &prng);
    5dee:	4a0a      	ldr	r2, [pc, #40]	; (5e18 <bt_rand+0x2c>)
{
    5df0:	4604      	mov	r4, r0
    5df2:	460d      	mov	r5, r1
	ret = tc_hmac_prng_generate(buf, len, &prng);
    5df4:	f00c f88b 	bl	11f0e <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
    5df8:	1c43      	adds	r3, r0, #1
    5dfa:	d107      	bne.n	5e0c <bt_rand+0x20>
		ret = prng_reseed(&prng);
    5dfc:	f7ff ff58 	bl	5cb0 <prng_reseed.constprop.0>
		if (ret) {
    5e00:	b948      	cbnz	r0, 5e16 <bt_rand+0x2a>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
    5e02:	4629      	mov	r1, r5
    5e04:	4620      	mov	r0, r4
    5e06:	4a04      	ldr	r2, [pc, #16]	; (5e18 <bt_rand+0x2c>)
    5e08:	f00c f881 	bl	11f0e <tc_hmac_prng_generate>
	}

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
    5e0c:	2801      	cmp	r0, #1
    5e0e:	bf14      	ite	ne
    5e10:	f06f 0004 	mvnne.w	r0, #4
    5e14:	2000      	moveq	r0, #0
	}

	return -EIO;
}
    5e16:	bd38      	pop	{r3, r4, r5, pc}
    5e18:	200007b0 	.word	0x200007b0

00005e1c <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    5e1c:	2300      	movs	r3, #0
{
    5e1e:	4601      	mov	r1, r0
	tx->user_data = NULL;
    5e20:	e9c0 3301 	strd	r3, r3, [r0, #4]
	tx->pending_no_cb = 0U;
    5e24:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    5e26:	4801      	ldr	r0, [pc, #4]	; (5e2c <tx_free+0x10>)
    5e28:	f00f b8dd 	b.w	14fe6 <k_queue_append>
    5e2c:	200005d4 	.word	0x200005d4

00005e30 <notify_connected>:
{
    5e30:	b538      	push	{r3, r4, r5, lr}
    5e32:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    5e34:	4b08      	ldr	r3, [pc, #32]	; (5e58 <notify_connected+0x28>)
    5e36:	681d      	ldr	r5, [r3, #0]
    5e38:	7b21      	ldrb	r1, [r4, #12]
    5e3a:	b92d      	cbnz	r5, 5e48 <notify_connected+0x18>
	if (!conn->err) {
    5e3c:	b951      	cbnz	r1, 5e54 <notify_connected+0x24>
		bt_gatt_connected(conn);
    5e3e:	4620      	mov	r0, r4
}
    5e40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
    5e44:	f003 bf2c 	b.w	9ca0 <bt_gatt_connected>
		if (cb->connected) {
    5e48:	682b      	ldr	r3, [r5, #0]
    5e4a:	b10b      	cbz	r3, 5e50 <notify_connected+0x20>
			cb->connected(conn, conn->err);
    5e4c:	4620      	mov	r0, r4
    5e4e:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    5e50:	69ad      	ldr	r5, [r5, #24]
    5e52:	e7f1      	b.n	5e38 <notify_connected+0x8>
}
    5e54:	bd38      	pop	{r3, r4, r5, pc}
    5e56:	bf00      	nop
    5e58:	20000d34 	.word	0x20000d34

00005e5c <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    5e5c:	b570      	push	{r4, r5, r6, lr}
    5e5e:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    5e60:	f100 0634 	add.w	r6, r0, #52	; 0x34
    5e64:	2200      	movs	r2, #0
    5e66:	2300      	movs	r3, #0
    5e68:	4630      	mov	r0, r6
    5e6a:	f005 fd71 	bl	b950 <net_buf_get>
    5e6e:	4605      	mov	r5, r0
    5e70:	bb50      	cbnz	r0, 5ec8 <conn_cleanup+0x6c>
		}

		net_buf_unref(buf);
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
    5e72:	6963      	ldr	r3, [r4, #20]
    5e74:	b173      	cbz	r3, 5e94 <conn_cleanup+0x38>
    5e76:	4918      	ldr	r1, [pc, #96]	; (5ed8 <conn_cleanup+0x7c>)
    5e78:	f240 53df 	movw	r3, #1503	; 0x5df
    5e7c:	4a17      	ldr	r2, [pc, #92]	; (5edc <conn_cleanup+0x80>)
    5e7e:	4818      	ldr	r0, [pc, #96]	; (5ee0 <conn_cleanup+0x84>)
    5e80:	f00a ffac 	bl	10ddc <printk>
    5e84:	4817      	ldr	r0, [pc, #92]	; (5ee4 <conn_cleanup+0x88>)
    5e86:	f00a ffa9 	bl	10ddc <printk>
    5e8a:	f240 51df 	movw	r1, #1503	; 0x5df
    5e8e:	4813      	ldr	r0, [pc, #76]	; (5edc <conn_cleanup+0x80>)
    5e90:	f00b fa3a 	bl	11308 <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
    5e94:	69e3      	ldr	r3, [r4, #28]
    5e96:	b15b      	cbz	r3, 5eb0 <conn_cleanup+0x54>
    5e98:	4913      	ldr	r1, [pc, #76]	; (5ee8 <conn_cleanup+0x8c>)
    5e9a:	4811      	ldr	r0, [pc, #68]	; (5ee0 <conn_cleanup+0x84>)
    5e9c:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
    5ea0:	4a0e      	ldr	r2, [pc, #56]	; (5edc <conn_cleanup+0x80>)
    5ea2:	f00a ff9b 	bl	10ddc <printk>
    5ea6:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
    5eaa:	480c      	ldr	r0, [pc, #48]	; (5edc <conn_cleanup+0x80>)
    5eac:	f00b fa2c 	bl	11308 <assert_post_action>

	bt_conn_reset_rx_state(conn);
    5eb0:	4620      	mov	r0, r4
    5eb2:	f00c fc13 	bl	126dc <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    5eb6:	f104 015c 	add.w	r1, r4, #92	; 0x5c
    5eba:	2200      	movs	r2, #0

	k_delayed_work_submit(&conn->update_work, K_NO_WAIT);
}
    5ebc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5ec0:	2300      	movs	r3, #0
    5ec2:	480a      	ldr	r0, [pc, #40]	; (5eec <conn_cleanup+0x90>)
    5ec4:	f009 bf64 	b.w	fd90 <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
    5ec8:	6968      	ldr	r0, [r5, #20]
    5eca:	b108      	cbz	r0, 5ed0 <conn_cleanup+0x74>
			tx_free(tx_data(buf)->tx);
    5ecc:	f7ff ffa6 	bl	5e1c <tx_free>
		net_buf_unref(buf);
    5ed0:	4628      	mov	r0, r5
    5ed2:	f005 fdcf 	bl	ba74 <net_buf_unref>
    5ed6:	e7c5      	b.n	5e64 <conn_cleanup+0x8>
    5ed8:	00017f63 	.word	0x00017f63
    5edc:	00017f33 	.word	0x00017f33
    5ee0:	00016493 	.word	0x00016493
    5ee4:	00017f89 	.word	0x00017f89
    5ee8:	00017f9e 	.word	0x00017f9e
    5eec:	20001e54 	.word	0x20001e54

00005ef0 <send_frag>:
{
    5ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5ef4:	4604      	mov	r4, r0
    5ef6:	460e      	mov	r6, r1
    5ef8:	4691      	mov	r9, r2
    5efa:	461f      	mov	r7, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    5efc:	694d      	ldr	r5, [r1, #20]
	return z_impl_k_sem_take(sem, timeout);
    5efe:	f04f 33ff 	mov.w	r3, #4294967295
    5f02:	f04f 32ff 	mov.w	r2, #4294967295
    5f06:	4847      	ldr	r0, [pc, #284]	; (6024 <send_frag+0x134>)
    5f08:	f009 fd22 	bl	f950 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
    5f0c:	7b63      	ldrb	r3, [r4, #13]
    5f0e:	2b07      	cmp	r3, #7
    5f10:	d148      	bne.n	5fa4 <send_frag+0xb4>
	hdr = net_buf_push(buf, sizeof(*hdr));
    5f12:	2104      	movs	r1, #4
    5f14:	f106 0008 	add.w	r0, r6, #8
    5f18:	f005 feba 	bl	bc90 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    5f1c:	8822      	ldrh	r2, [r4, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    5f1e:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    5f20:	ea42 3209 	orr.w	r2, r2, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    5f24:	3b04      	subs	r3, #4
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    5f26:	8002      	strh	r2, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    5f28:	8043      	strh	r3, [r0, #2]
	__asm__ volatile(
    5f2a:	f04f 0320 	mov.w	r3, #32
    5f2e:	f3ef 8211 	mrs	r2, BASEPRI
    5f32:	f383 8811 	msr	BASEPRI, r3
    5f36:	f3bf 8f6f 	isb	sy
	if (tx) {
    5f3a:	2d00      	cmp	r5, #0
    5f3c:	d044      	beq.n	5fc8 <send_frag+0xd8>
	parent->next = child;
    5f3e:	2300      	movs	r3, #0
    5f40:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    5f42:	69a3      	ldr	r3, [r4, #24]
    5f44:	2b00      	cmp	r3, #0
    5f46:	d13c      	bne.n	5fc2 <send_frag+0xd2>
	list->head = node;
    5f48:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    5f4c:	f382 8811 	msr	BASEPRI, r2
    5f50:	f3bf 8f6f 	isb	sy
    5f54:	2302      	movs	r3, #2
	err = bt_send(buf);
    5f56:	4630      	mov	r0, r6
    5f58:	7533      	strb	r3, [r6, #20]
    5f5a:	f7fe fe63 	bl	4c24 <bt_send>
	if (err) {
    5f5e:	4602      	mov	r2, r0
    5f60:	2800      	cmp	r0, #0
    5f62:	d05c      	beq.n	601e <send_frag+0x12e>
		BT_ERR("Unable to send to driver (err %d)", err);
    5f64:	2145      	movs	r1, #69	; 0x45
    5f66:	4830      	ldr	r0, [pc, #192]	; (6028 <send_frag+0x138>)
    5f68:	f00a ff38 	bl	10ddc <printk>
	__asm__ volatile(
    5f6c:	f04f 0320 	mov.w	r3, #32
    5f70:	f3ef 8911 	mrs	r9, BASEPRI
    5f74:	f383 8811 	msr	BASEPRI, r3
    5f78:	f3bf 8f6f 	isb	sy
		if (tx) {
    5f7c:	2d00      	cmp	r5, #0
    5f7e:	d039      	beq.n	5ff4 <send_frag+0x104>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5f80:	2200      	movs	r2, #0
    5f82:	6963      	ldr	r3, [r4, #20]
    5f84:	b153      	cbz	r3, 5f9c <send_frag+0xac>
    5f86:	429d      	cmp	r5, r3
    5f88:	d131      	bne.n	5fee <send_frag+0xfe>
Z_GENLIST_REMOVE(slist, snode)
    5f8a:	682b      	ldr	r3, [r5, #0]
    5f8c:	bb4a      	cbnz	r2, 5fe2 <send_frag+0xf2>
    5f8e:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
    5f90:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    5f92:	4295      	cmp	r5, r2
    5f94:	d100      	bne.n	5f98 <send_frag+0xa8>
	list->tail = node;
    5f96:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    5f98:	2300      	movs	r3, #0
    5f9a:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    5f9c:	f389 8811 	msr	BASEPRI, r9
    5fa0:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    5fa4:	481f      	ldr	r0, [pc, #124]	; (6024 <send_frag+0x134>)
    5fa6:	f009 fc8f 	bl	f8c8 <z_impl_k_sem_give>
	if (tx) {
    5faa:	b115      	cbz	r5, 5fb2 <send_frag+0xc2>
		tx_free(tx);
    5fac:	4628      	mov	r0, r5
    5fae:	f7ff ff35 	bl	5e1c <tx_free>
	if (always_consume) {
    5fb2:	b11f      	cbz	r7, 5fbc <send_frag+0xcc>
		net_buf_unref(buf);
    5fb4:	4630      	mov	r0, r6
    5fb6:	f005 fd5d 	bl	ba74 <net_buf_unref>
	return false;
    5fba:	2700      	movs	r7, #0
}
    5fbc:	4638      	mov	r0, r7
    5fbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5fc2:	601d      	str	r5, [r3, #0]
	list->tail = node;
    5fc4:	61a5      	str	r5, [r4, #24]
}
    5fc6:	e7c1      	b.n	5f4c <send_frag+0x5c>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
    5fc8:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
    5fca:	b133      	cbz	r3, 5fda <send_frag+0xea>
			pending_no_cb = &tail_tx->pending_no_cb;
    5fcc:	f103 080c 	add.w	r8, r3, #12
    5fd0:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    5fd2:	3301      	adds	r3, #1
    5fd4:	f8c8 3000 	str.w	r3, [r8]
    5fd8:	e7b8      	b.n	5f4c <send_frag+0x5c>
			pending_no_cb = &conn->pending_no_cb;
    5fda:	69e3      	ldr	r3, [r4, #28]
    5fdc:	f104 081c 	add.w	r8, r4, #28
    5fe0:	e7f7      	b.n	5fd2 <send_frag+0xe2>
	parent->next = child;
    5fe2:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    5fe4:	69a3      	ldr	r3, [r4, #24]
    5fe6:	429d      	cmp	r5, r3
	list->tail = node;
    5fe8:	bf08      	it	eq
    5fea:	61a2      	streq	r2, [r4, #24]
}
    5fec:	e7d4      	b.n	5f98 <send_frag+0xa8>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    5fee:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5ff0:	681b      	ldr	r3, [r3, #0]
    5ff2:	e7c7      	b.n	5f84 <send_frag+0x94>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
    5ff4:	f8d8 3000 	ldr.w	r3, [r8]
    5ff8:	b95b      	cbnz	r3, 6012 <send_frag+0x122>
    5ffa:	490c      	ldr	r1, [pc, #48]	; (602c <send_frag+0x13c>)
    5ffc:	480c      	ldr	r0, [pc, #48]	; (6030 <send_frag+0x140>)
    5ffe:	f240 5371 	movw	r3, #1393	; 0x571
    6002:	4a0c      	ldr	r2, [pc, #48]	; (6034 <send_frag+0x144>)
    6004:	f00a feea 	bl	10ddc <printk>
    6008:	f240 5171 	movw	r1, #1393	; 0x571
    600c:	4809      	ldr	r0, [pc, #36]	; (6034 <send_frag+0x144>)
    600e:	f00b f97b 	bl	11308 <assert_post_action>
			(*pending_no_cb)--;
    6012:	f8d8 3000 	ldr.w	r3, [r8]
    6016:	3b01      	subs	r3, #1
    6018:	f8c8 3000 	str.w	r3, [r8]
    601c:	e7be      	b.n	5f9c <send_frag+0xac>
	return true;
    601e:	2701      	movs	r7, #1
    6020:	e7cc      	b.n	5fbc <send_frag+0xcc>
    6022:	bf00      	nop
    6024:	200000b4 	.word	0x200000b4
    6028:	00017903 	.word	0x00017903
    602c:	00017fb7 	.word	0x00017fb7
    6030:	00016493 	.word	0x00016493
    6034:	00017f33 	.word	0x00017f33

00006038 <bt_conn_get_pkts>:
}
    6038:	4800      	ldr	r0, [pc, #0]	; (603c <bt_conn_get_pkts+0x4>)
    603a:	4770      	bx	lr
    603c:	200000b4 	.word	0x200000b4

00006040 <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    6040:	1d03      	adds	r3, r0, #4
{
    6042:	b570      	push	{r4, r5, r6, lr}
    6044:	4604      	mov	r4, r0
    6046:	4618      	mov	r0, r3
    6048:	f00c fb45 	bl	126d6 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    604c:	0582      	lsls	r2, r0, #22
    604e:	d515      	bpl.n	607c <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
    6050:	f8b4 2092 	ldrh.w	r2, [r4, #146]	; 0x92
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    6054:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    6058:	4291      	cmp	r1, r2
    605a:	d80f      	bhi.n	607c <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
    605c:	f8b4 1096 	ldrh.w	r1, [r4, #150]	; 0x96
    6060:	4291      	cmp	r1, r2
    6062:	d30b      	bcc.n	607c <notify_le_param_updated+0x3c>
	    conn->le.latency == conn->le.pending_latency &&
    6064:	e9d4 1226 	ldrd	r1, r2, [r4, #152]	; 0x98
    6068:	4291      	cmp	r1, r2
    606a:	d107      	bne.n	607c <notify_le_param_updated+0x3c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    606c:	e8d3 2fef 	ldaex	r2, [r3]
    6070:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    6074:	e8c3 2fe1 	stlex	r1, r2, [r3]
    6078:	2900      	cmp	r1, #0
    607a:	d1f7      	bne.n	606c <notify_le_param_updated+0x2c>
	for (cb = callback_list; cb; cb = cb->_next) {
    607c:	4b07      	ldr	r3, [pc, #28]	; (609c <notify_le_param_updated+0x5c>)
    607e:	681d      	ldr	r5, [r3, #0]
    6080:	b905      	cbnz	r5, 6084 <notify_le_param_updated+0x44>
}
    6082:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    6084:	68ee      	ldr	r6, [r5, #12]
    6086:	b13e      	cbz	r6, 6098 <notify_le_param_updated+0x58>
			cb->le_param_updated(conn, conn->le.interval,
    6088:	4620      	mov	r0, r4
    608a:	f8b4 309a 	ldrh.w	r3, [r4, #154]	; 0x9a
    608e:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
    6092:	f8b4 1092 	ldrh.w	r1, [r4, #146]	; 0x92
    6096:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    6098:	69ad      	ldr	r5, [r5, #24]
    609a:	e7f1      	b.n	6080 <notify_le_param_updated+0x40>
    609c:	20000d34 	.word	0x20000d34

000060a0 <le_param_req>:
{
    60a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    60a2:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    60a4:	4608      	mov	r0, r1
{
    60a6:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    60a8:	f00c fa0e 	bl	124c8 <bt_le_conn_params_valid>
    60ac:	4604      	mov	r4, r0
    60ae:	b910      	cbnz	r0, 60b6 <le_param_req+0x16>
		return false;
    60b0:	2400      	movs	r4, #0
}
    60b2:	4620      	mov	r0, r4
    60b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    60b6:	4b09      	ldr	r3, [pc, #36]	; (60dc <le_param_req+0x3c>)
    60b8:	681e      	ldr	r6, [r3, #0]
    60ba:	2e00      	cmp	r6, #0
    60bc:	d0f9      	beq.n	60b2 <le_param_req+0x12>
		if (!cb->le_param_req) {
    60be:	68b3      	ldr	r3, [r6, #8]
    60c0:	b90b      	cbnz	r3, 60c6 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    60c2:	69b6      	ldr	r6, [r6, #24]
    60c4:	e7f9      	b.n	60ba <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    60c6:	4629      	mov	r1, r5
    60c8:	4638      	mov	r0, r7
    60ca:	4798      	blx	r3
    60cc:	2800      	cmp	r0, #0
    60ce:	d0ef      	beq.n	60b0 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    60d0:	4628      	mov	r0, r5
    60d2:	f00c f9f9 	bl	124c8 <bt_le_conn_params_valid>
    60d6:	2800      	cmp	r0, #0
    60d8:	d1f3      	bne.n	60c2 <le_param_req+0x22>
    60da:	e7e9      	b.n	60b0 <le_param_req+0x10>
    60dc:	20000d34 	.word	0x20000d34

000060e0 <bt_conn_identity_resolved>:
{
    60e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->role == BT_HCI_ROLE_MASTER) {
    60e2:	78c3      	ldrb	r3, [r0, #3]
{
    60e4:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
    60e6:	b93b      	cbnz	r3, 60f8 <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
    60e8:	f100 068a 	add.w	r6, r0, #138	; 0x8a
	for (cb = callback_list; cb; cb = cb->_next) {
    60ec:	4b08      	ldr	r3, [pc, #32]	; (6110 <bt_conn_identity_resolved+0x30>)
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    60ee:	f104 077c 	add.w	r7, r4, #124	; 0x7c
	for (cb = callback_list; cb; cb = cb->_next) {
    60f2:	681d      	ldr	r5, [r3, #0]
    60f4:	b91d      	cbnz	r5, 60fe <bt_conn_identity_resolved+0x1e>
}
    60f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
    60f8:	f100 0683 	add.w	r6, r0, #131	; 0x83
    60fc:	e7f6      	b.n	60ec <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
    60fe:	692b      	ldr	r3, [r5, #16]
    6100:	b11b      	cbz	r3, 610a <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    6102:	463a      	mov	r2, r7
    6104:	4631      	mov	r1, r6
    6106:	4620      	mov	r0, r4
    6108:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    610a:	69ad      	ldr	r5, [r5, #24]
    610c:	e7f2      	b.n	60f4 <bt_conn_identity_resolved+0x14>
    610e:	bf00      	nop
    6110:	20000d34 	.word	0x20000d34

00006114 <bt_conn_security_changed>:
{
    6114:	b570      	push	{r4, r5, r6, lr}
    6116:	4605      	mov	r5, r0
    6118:	4616      	mov	r6, r2
	bt_l2cap_security_changed(conn, hci_err);
    611a:	f00c fd69 	bl	12bf0 <bt_l2cap_security_changed>
	for (cb = callback_list; cb; cb = cb->_next) {
    611e:	4b06      	ldr	r3, [pc, #24]	; (6138 <bt_conn_security_changed+0x24>)
    6120:	681c      	ldr	r4, [r3, #0]
    6122:	b904      	cbnz	r4, 6126 <bt_conn_security_changed+0x12>
}
    6124:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->security_changed) {
    6126:	6963      	ldr	r3, [r4, #20]
    6128:	b11b      	cbz	r3, 6132 <bt_conn_security_changed+0x1e>
			cb->security_changed(conn, conn->sec_level, err);
    612a:	4632      	mov	r2, r6
    612c:	4628      	mov	r0, r5
    612e:	7a69      	ldrb	r1, [r5, #9]
    6130:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    6132:	69a4      	ldr	r4, [r4, #24]
    6134:	e7f5      	b.n	6122 <bt_conn_security_changed+0xe>
    6136:	bf00      	nop
    6138:	20000d34 	.word	0x20000d34

0000613c <bt_conn_cb_register>:
	cb->_next = callback_list;
    613c:	4b02      	ldr	r3, [pc, #8]	; (6148 <bt_conn_cb_register+0xc>)
    613e:	681a      	ldr	r2, [r3, #0]
	callback_list = cb;
    6140:	6018      	str	r0, [r3, #0]
	cb->_next = callback_list;
    6142:	6182      	str	r2, [r0, #24]
}
    6144:	4770      	bx	lr
    6146:	bf00      	nop
    6148:	20000d34 	.word	0x20000d34

0000614c <bt_conn_recv>:
{
    614c:	b570      	push	{r4, r5, r6, lr}
    614e:	4616      	mov	r6, r2
    6150:	4604      	mov	r4, r0
    6152:	460d      	mov	r5, r1
	tx_notify(conn);
    6154:	f00c fad6 	bl	12704 <tx_notify>
	switch (flags) {
    6158:	2e01      	cmp	r6, #1
    615a:	d015      	beq.n	6188 <bt_conn_recv+0x3c>
    615c:	2e02      	cmp	r6, #2
    615e:	d14e      	bne.n	61fe <bt_conn_recv+0xb2>
		len = sys_le16_to_cpu(hdr->len);
    6160:	68ab      	ldr	r3, [r5, #8]
    6162:	881e      	ldrh	r6, [r3, #0]
		if (conn->rx_len) {
    6164:	89e3      	ldrh	r3, [r4, #14]
    6166:	b133      	cbz	r3, 6176 <bt_conn_recv+0x2a>
			BT_ERR("Unexpected first L2CAP frame");
    6168:	482b      	ldr	r0, [pc, #172]	; (6218 <bt_conn_recv+0xcc>)
    616a:	2145      	movs	r1, #69	; 0x45
    616c:	f00a fe36 	bl	10ddc <printk>
			bt_conn_reset_rx_state(conn);
    6170:	4620      	mov	r0, r4
    6172:	f00c fab3 	bl	126dc <bt_conn_reset_rx_state>
		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    6176:	89ab      	ldrh	r3, [r5, #12]
    6178:	1af3      	subs	r3, r6, r3
    617a:	3304      	adds	r3, #4
    617c:	b29b      	uxth	r3, r3
    617e:	81e3      	strh	r3, [r4, #14]
		if (conn->rx_len) {
    6180:	2b00      	cmp	r3, #0
    6182:	d031      	beq.n	61e8 <bt_conn_recv+0x9c>
			conn->rx = buf;
    6184:	6125      	str	r5, [r4, #16]
}
    6186:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->rx_len) {
    6188:	89e3      	ldrh	r3, [r4, #14]
    618a:	b95b      	cbnz	r3, 61a4 <bt_conn_recv+0x58>
			BT_ERR("Unexpected L2CAP continuation");
    618c:	2145      	movs	r1, #69	; 0x45
    618e:	4823      	ldr	r0, [pc, #140]	; (621c <bt_conn_recv+0xd0>)
			BT_ERR("L2CAP data overflow");
    6190:	f00a fe24 	bl	10ddc <printk>
			bt_conn_reset_rx_state(conn);
    6194:	4620      	mov	r0, r4
    6196:	f00c faa1 	bl	126dc <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    619a:	4628      	mov	r0, r5
}
    619c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    61a0:	f005 bc68 	b.w	ba74 <net_buf_unref>
		if (buf->len > conn->rx_len) {
    61a4:	89ae      	ldrh	r6, [r5, #12]
    61a6:	42b3      	cmp	r3, r6
    61a8:	d202      	bcs.n	61b0 <bt_conn_recv+0x64>
			BT_ERR("L2CAP data overflow");
    61aa:	2145      	movs	r1, #69	; 0x45
    61ac:	481c      	ldr	r0, [pc, #112]	; (6220 <bt_conn_recv+0xd4>)
    61ae:	e7ef      	b.n	6190 <bt_conn_recv+0x44>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    61b0:	6920      	ldr	r0, [r4, #16]
    61b2:	3008      	adds	r0, #8
    61b4:	f00d ff2e 	bl	14014 <net_buf_simple_tailroom>
    61b8:	4286      	cmp	r6, r0
    61ba:	d902      	bls.n	61c2 <bt_conn_recv+0x76>
			BT_ERR("Not enough buffer space for L2CAP data");
    61bc:	2145      	movs	r1, #69	; 0x45
    61be:	4819      	ldr	r0, [pc, #100]	; (6224 <bt_conn_recv+0xd8>)
    61c0:	e7e6      	b.n	6190 <bt_conn_recv+0x44>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    61c2:	6920      	ldr	r0, [r4, #16]
    61c4:	89aa      	ldrh	r2, [r5, #12]
    61c6:	68a9      	ldr	r1, [r5, #8]
    61c8:	3008      	adds	r0, #8
    61ca:	f00d ff2b 	bl	14024 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    61ce:	89e3      	ldrh	r3, [r4, #14]
    61d0:	89aa      	ldrh	r2, [r5, #12]
		net_buf_unref(buf);
    61d2:	4628      	mov	r0, r5
		conn->rx_len -= buf->len;
    61d4:	1a9b      	subs	r3, r3, r2
    61d6:	81e3      	strh	r3, [r4, #14]
		net_buf_unref(buf);
    61d8:	f005 fc4c 	bl	ba74 <net_buf_unref>
		if (conn->rx_len) {
    61dc:	89e3      	ldrh	r3, [r4, #14]
    61de:	2b00      	cmp	r3, #0
    61e0:	d1d1      	bne.n	6186 <bt_conn_recv+0x3a>
		buf = conn->rx;
    61e2:	6925      	ldr	r5, [r4, #16]
		conn->rx_len = 0U;
    61e4:	81e3      	strh	r3, [r4, #14]
		conn->rx = NULL;
    61e6:	6123      	str	r3, [r4, #16]
	len = sys_le16_to_cpu(hdr->len);
    61e8:	68ab      	ldr	r3, [r5, #8]
    61ea:	881a      	ldrh	r2, [r3, #0]
	if (sizeof(*hdr) + len != buf->len) {
    61ec:	89ab      	ldrh	r3, [r5, #12]
    61ee:	1d11      	adds	r1, r2, #4
    61f0:	4299      	cmp	r1, r3
    61f2:	d00a      	beq.n	620a <bt_conn_recv+0xbe>
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
    61f4:	2145      	movs	r1, #69	; 0x45
    61f6:	480c      	ldr	r0, [pc, #48]	; (6228 <bt_conn_recv+0xdc>)
    61f8:	f00a fdf0 	bl	10ddc <printk>
		net_buf_unref(buf);
    61fc:	e7cd      	b.n	619a <bt_conn_recv+0x4e>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    61fe:	4632      	mov	r2, r6
    6200:	2145      	movs	r1, #69	; 0x45
    6202:	480a      	ldr	r0, [pc, #40]	; (622c <bt_conn_recv+0xe0>)
    6204:	f00a fdea 	bl	10ddc <printk>
		bt_conn_reset_rx_state(conn);
    6208:	e7c4      	b.n	6194 <bt_conn_recv+0x48>
	bt_l2cap_recv(conn, buf);
    620a:	4629      	mov	r1, r5
    620c:	4620      	mov	r0, r4
}
    620e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    6212:	f000 bed1 	b.w	6fb8 <bt_l2cap_recv>
    6216:	bf00      	nop
    6218:	00017fca 	.word	0x00017fca
    621c:	00017fec 	.word	0x00017fec
    6220:	0001800f 	.word	0x0001800f
    6224:	00018028 	.word	0x00018028
    6228:	00018077 	.word	0x00018077
    622c:	00018054 	.word	0x00018054

00006230 <bt_conn_send_cb>:
{
    6230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6234:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    6236:	7b43      	ldrb	r3, [r0, #13]
{
    6238:	4606      	mov	r6, r0
	if (conn->state != BT_CONN_CONNECTED) {
    623a:	2b07      	cmp	r3, #7
{
    623c:	460d      	mov	r5, r1
    623e:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    6240:	d009      	beq.n	6256 <bt_conn_send_cb+0x26>
		BT_ERR("not connected!");
    6242:	4821      	ldr	r0, [pc, #132]	; (62c8 <bt_conn_send_cb+0x98>)
    6244:	2145      	movs	r1, #69	; 0x45
    6246:	f00a fdc9 	bl	10ddc <printk>
		net_buf_unref(buf);
    624a:	4628      	mov	r0, r5
    624c:	f005 fc12 	bl	ba74 <net_buf_unref>
			return -ENOTCONN;
    6250:	f06f 0038 	mvn.w	r0, #56	; 0x38
    6254:	e01a      	b.n	628c <bt_conn_send_cb+0x5c>
	if (cb) {
    6256:	2a00      	cmp	r2, #0
    6258:	d034      	beq.n	62c4 <bt_conn_send_cb+0x94>
	return z_impl_k_current_get();
    625a:	f009 fb2f 	bl	f8bc <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    625e:	4b1b      	ldr	r3, [pc, #108]	; (62cc <bt_conn_send_cb+0x9c>)
    6260:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    6262:	481b      	ldr	r0, [pc, #108]	; (62d0 <bt_conn_send_cb+0xa0>)
    6264:	bf07      	ittee	eq
    6266:	2200      	moveq	r2, #0
    6268:	2300      	moveq	r3, #0
    626a:	f04f 32ff 	movne.w	r2, #4294967295
    626e:	f04f 33ff 	movne.w	r3, #4294967295
    6272:	f008 f965 	bl	e540 <z_impl_k_queue_get>
    6276:	4604      	mov	r4, r0
		if (!tx) {
    6278:	b950      	cbnz	r0, 6290 <bt_conn_send_cb+0x60>
			BT_ERR("Unable to allocate TX context");
    627a:	2145      	movs	r1, #69	; 0x45
    627c:	4815      	ldr	r0, [pc, #84]	; (62d4 <bt_conn_send_cb+0xa4>)
    627e:	f00a fdad 	bl	10ddc <printk>
			net_buf_unref(buf);
    6282:	4628      	mov	r0, r5
    6284:	f005 fbf6 	bl	ba74 <net_buf_unref>
			return -ENOBUFS;
    6288:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    628c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    6290:	7b73      	ldrb	r3, [r6, #13]
    6292:	2b07      	cmp	r3, #7
    6294:	d00a      	beq.n	62ac <bt_conn_send_cb+0x7c>
			BT_WARN("Disconnected while allocating context");
    6296:	2157      	movs	r1, #87	; 0x57
    6298:	480f      	ldr	r0, [pc, #60]	; (62d8 <bt_conn_send_cb+0xa8>)
    629a:	f00a fd9f 	bl	10ddc <printk>
			net_buf_unref(buf);
    629e:	4628      	mov	r0, r5
    62a0:	f005 fbe8 	bl	ba74 <net_buf_unref>
			tx_free(tx);
    62a4:	4620      	mov	r0, r4
    62a6:	f7ff fdb9 	bl	5e1c <tx_free>
    62aa:	e7d1      	b.n	6250 <bt_conn_send_cb+0x20>
		tx->pending_no_cb = 0U;
    62ac:	2300      	movs	r3, #0
		tx->user_data = user_data;
    62ae:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    62b2:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    62b4:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    62b6:	f106 0034 	add.w	r0, r6, #52	; 0x34
    62ba:	4629      	mov	r1, r5
    62bc:	f005 fba6 	bl	ba0c <net_buf_put>
	return 0;
    62c0:	2000      	movs	r0, #0
    62c2:	e7e3      	b.n	628c <bt_conn_send_cb+0x5c>
		tx_data(buf)->tx = NULL;
    62c4:	614a      	str	r2, [r1, #20]
    62c6:	e7f6      	b.n	62b6 <bt_conn_send_cb+0x86>
    62c8:	00018098 	.word	0x00018098
    62cc:	20001e70 	.word	0x20001e70
    62d0:	200005d4 	.word	0x200005d4
    62d4:	000180ac 	.word	0x000180ac
    62d8:	000180cf 	.word	0x000180cf

000062dc <bt_conn_prepare_events>:
{
	int i, ev_count = 0;

	BT_DBG("");

	conn_change.signaled = 0U;
    62dc:	2200      	movs	r2, #0
    62de:	4b18      	ldr	r3, [pc, #96]	; (6340 <bt_conn_prepare_events+0x64>)
{
    62e0:	b510      	push	{r4, lr}
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    62e2:	2101      	movs	r1, #1
	conn_change.signaled = 0U;
    62e4:	609a      	str	r2, [r3, #8]
{
    62e6:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    62e8:	f00a fb18 	bl	1091c <k_poll_event_init>
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		struct bt_conn *conn = &conns[i];

		if (!atomic_get(&conn->ref)) {
    62ec:	4b15      	ldr	r3, [pc, #84]	; (6344 <bt_conn_prepare_events+0x68>)
    62ee:	f103 0058 	add.w	r0, r3, #88	; 0x58
    62f2:	f00c f9f0 	bl	126d6 <atomic_get>
    62f6:	4619      	mov	r1, r3
    62f8:	b908      	cbnz	r0, 62fe <bt_conn_prepare_events+0x22>
		}

		if (conn->state == BT_CONN_DISCONNECTED &&
		    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
			conn_cleanup(conn);
			continue;
    62fa:	2001      	movs	r0, #1
				  &conn->tx_queue);
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
	}

	return ev_count;
}
    62fc:	bd10      	pop	{r4, pc}
		if (conn->state == BT_CONN_DISCONNECTED &&
    62fe:	7b5a      	ldrb	r2, [r3, #13]
    6300:	b97a      	cbnz	r2, 6322 <bt_conn_prepare_events+0x46>
    6302:	1d1a      	adds	r2, r3, #4
    6304:	e8d2 0fef 	ldaex	r0, [r2]
    6308:	f020 0c40 	bic.w	ip, r0, #64	; 0x40
    630c:	e8c2 cfee 	stlex	lr, ip, [r2]
    6310:	f1be 0f00 	cmp.w	lr, #0
    6314:	d1f6      	bne.n	6304 <bt_conn_prepare_events+0x28>
    6316:	0642      	lsls	r2, r0, #25
    6318:	d503      	bpl.n	6322 <bt_conn_prepare_events+0x46>
			conn_cleanup(conn);
    631a:	4618      	mov	r0, r3
    631c:	f7ff fd9e 	bl	5e5c <conn_cleanup>
    6320:	e7eb      	b.n	62fa <bt_conn_prepare_events+0x1e>
		if (conn->state != BT_CONN_CONNECTED) {
    6322:	7b4b      	ldrb	r3, [r1, #13]
    6324:	2b07      	cmp	r3, #7
    6326:	d1e8      	bne.n	62fa <bt_conn_prepare_events+0x1e>
		k_poll_event_init(&events[ev_count],
    6328:	4b07      	ldr	r3, [pc, #28]	; (6348 <bt_conn_prepare_events+0x6c>)
    632a:	f104 0014 	add.w	r0, r4, #20
    632e:	2200      	movs	r2, #0
    6330:	2104      	movs	r1, #4
    6332:	f00a faf3 	bl	1091c <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    6336:	2301      	movs	r3, #1
    6338:	2002      	movs	r0, #2
    633a:	f884 3020 	strb.w	r3, [r4, #32]
	return ev_count;
    633e:	e7dd      	b.n	62fc <bt_conn_prepare_events+0x20>
    6340:	20000238 	.word	0x20000238
    6344:	20000dd8 	.word	0x20000dd8
    6348:	20000e0c 	.word	0x20000e0c

0000634c <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(u8_t id, const bt_addr_le_t *peer)
{
    634c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!atomic_get(&conns[i].ref)) {
    6350:	4c18      	ldr	r4, [pc, #96]	; (63b4 <bt_conn_add_le+0x68>)
{
    6352:	4607      	mov	r7, r0
		if (!atomic_get(&conns[i].ref)) {
    6354:	f104 0858 	add.w	r8, r4, #88	; 0x58
    6358:	4640      	mov	r0, r8
{
    635a:	460e      	mov	r6, r1
		if (!atomic_get(&conns[i].ref)) {
    635c:	f00c f9bb 	bl	126d6 <atomic_get>
    6360:	4605      	mov	r5, r0
    6362:	b110      	cbz	r0, 636a <bt_conn_add_le+0x1e>
	struct bt_conn *conn = conn_new();

	if (!conn) {
		return NULL;
    6364:	2000      	movs	r0, #0
	conn->type = BT_CONN_TYPE_LE;
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    6366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(conn, 0, sizeof(*conn));
    636a:	4601      	mov	r1, r0
    636c:	22ac      	movs	r2, #172	; 0xac
    636e:	4620      	mov	r0, r4
    6370:	f00b ff20 	bl	121b4 <memset>
	k_delayed_work_init(&conn->update_work, conn_update_timeout);
    6374:	4910      	ldr	r1, [pc, #64]	; (63b8 <bt_conn_add_le+0x6c>)
    6376:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    637a:	f00e feec 	bl	15156 <k_delayed_work_init>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    637e:	4b0f      	ldr	r3, [pc, #60]	; (63bc <bt_conn_add_le+0x70>)
    6380:	62a5      	str	r5, [r4, #40]	; 0x28
    6382:	e9c4 350b 	strd	r3, r5, [r4, #44]	; 0x2c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6386:	2501      	movs	r5, #1
    6388:	e8d8 3fef 	ldaex	r3, [r8]
    638c:	e8c8 5fe2 	stlex	r2, r5, [r8]
    6390:	2a00      	cmp	r2, #0
    6392:	d1f9      	bne.n	6388 <bt_conn_add_le+0x3c>
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    6394:	2207      	movs	r2, #7
    6396:	4631      	mov	r1, r6
    6398:	f104 007c 	add.w	r0, r4, #124	; 0x7c
	conn->id = id;
    639c:	7227      	strb	r7, [r4, #8]
    639e:	f00b fede 	bl	1215e <memcpy>
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    63a2:	4b07      	ldr	r3, [pc, #28]	; (63c0 <bt_conn_add_le+0x74>)
			conn = &conns[i];
    63a4:	4620      	mov	r0, r4
	conn->sec_level = BT_SECURITY_L1;
    63a6:	7265      	strb	r5, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
    63a8:	72a5      	strb	r5, [r4, #10]
	conn->type = BT_CONN_TYPE_LE;
    63aa:	70a5      	strb	r5, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    63ac:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	return conn;
    63b0:	e7d9      	b.n	6366 <bt_conn_add_le+0x1a>
    63b2:	bf00      	nop
    63b4:	20000dd8 	.word	0x20000dd8
    63b8:	00006705 	.word	0x00006705
    63bc:	0001274b 	.word	0x0001274b
    63c0:	00280018 	.word	0x00280018

000063c4 <bt_conn_lookup_handle>:
struct bt_conn *bt_conn_lookup_handle(u16_t handle)
{
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    63c4:	4a0c      	ldr	r2, [pc, #48]	; (63f8 <bt_conn_lookup_handle+0x34>)
{
    63c6:	b508      	push	{r3, lr}
    63c8:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    63ca:	f102 0058 	add.w	r0, r2, #88	; 0x58
    63ce:	f00c f982 	bl	126d6 <atomic_get>
    63d2:	4611      	mov	r1, r2
    63d4:	b160      	cbz	r0, 63f0 <bt_conn_lookup_handle+0x2c>
			continue;
		}

		/* We only care about connections with a valid handle */
		if (!bt_conn_is_handle_valid(&conns[i])) {
    63d6:	7b52      	ldrb	r2, [r2, #13]
    63d8:	1fd0      	subs	r0, r2, #7
    63da:	2801      	cmp	r0, #1
    63dc:	d901      	bls.n	63e2 <bt_conn_lookup_handle+0x1e>
    63de:	2a01      	cmp	r2, #1
    63e0:	d107      	bne.n	63f2 <bt_conn_lookup_handle+0x2e>
			continue;
		}

		if (conns[i].handle == handle) {
    63e2:	880a      	ldrh	r2, [r1, #0]
    63e4:	429a      	cmp	r2, r3
    63e6:	d104      	bne.n	63f2 <bt_conn_lookup_handle+0x2e>
#endif /* defined(CONFIG_BT_BREDR) */
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
	atomic_val_t old = atomic_inc(&conn->ref);
    63e8:	4804      	ldr	r0, [pc, #16]	; (63fc <bt_conn_lookup_handle+0x38>)
    63ea:	f00c f982 	bl	126f2 <atomic_inc>
		if (!bt_conn_is_handle_valid(&conns[i])) {
    63ee:	4802      	ldr	r0, [pc, #8]	; (63f8 <bt_conn_lookup_handle+0x34>)
}
    63f0:	bd08      	pop	{r3, pc}
	return NULL;
    63f2:	2000      	movs	r0, #0
    63f4:	e7fc      	b.n	63f0 <bt_conn_lookup_handle+0x2c>
    63f6:	bf00      	nop
    63f8:	20000dd8 	.word	0x20000dd8
    63fc:	20000e30 	.word	0x20000e30

00006400 <bt_conn_lookup_addr_le>:
{
    6400:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    6402:	4c0c      	ldr	r4, [pc, #48]	; (6434 <bt_conn_lookup_addr_le+0x34>)
{
    6404:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    6406:	f104 0058 	add.w	r0, r4, #88	; 0x58
{
    640a:	460a      	mov	r2, r1
		if (!atomic_get(&conns[i].ref)) {
    640c:	f00c f963 	bl	126d6 <atomic_get>
    6410:	b908      	cbnz	r0, 6416 <bt_conn_lookup_addr_le+0x16>
	return NULL;
    6412:	2000      	movs	r0, #0
}
    6414:	bd10      	pop	{r4, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    6416:	78a1      	ldrb	r1, [r4, #2]
    6418:	2901      	cmp	r1, #1
    641a:	d1fa      	bne.n	6412 <bt_conn_lookup_addr_le+0x12>
		if (bt_conn_is_peer_addr_le(&conns[i], id, peer)) {
    641c:	4619      	mov	r1, r3
    641e:	4620      	mov	r0, r4
    6420:	f00c f9c7 	bl	127b2 <bt_conn_is_peer_addr_le>
    6424:	2800      	cmp	r0, #0
    6426:	d0f4      	beq.n	6412 <bt_conn_lookup_addr_le+0x12>
	atomic_val_t old = atomic_inc(&conn->ref);
    6428:	f104 0058 	add.w	r0, r4, #88	; 0x58
    642c:	f00c f961 	bl	126f2 <atomic_inc>
		if (bt_conn_is_peer_addr_le(&conns[i], id, peer)) {
    6430:	4620      	mov	r0, r4
			return bt_conn_ref(&conns[i]);
    6432:	e7ef      	b.n	6414 <bt_conn_lookup_addr_le+0x14>
    6434:	20000dd8 	.word	0x20000dd8

00006438 <bt_conn_lookup_state_le>:
{
    6438:	b570      	push	{r4, r5, r6, lr}
		if (!atomic_get(&conns[i].ref)) {
    643a:	4c10      	ldr	r4, [pc, #64]	; (647c <bt_conn_lookup_state_le+0x44>)
{
    643c:	4605      	mov	r5, r0
		if (!atomic_get(&conns[i].ref)) {
    643e:	f104 0058 	add.w	r0, r4, #88	; 0x58
{
    6442:	4616      	mov	r6, r2
		if (!atomic_get(&conns[i].ref)) {
    6444:	f00c f947 	bl	126d6 <atomic_get>
    6448:	b908      	cbnz	r0, 644e <bt_conn_lookup_state_le+0x16>
	return NULL;
    644a:	2000      	movs	r0, #0
}
    644c:	bd70      	pop	{r4, r5, r6, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    644e:	78a3      	ldrb	r3, [r4, #2]
    6450:	2b01      	cmp	r3, #1
    6452:	d1fa      	bne.n	644a <bt_conn_lookup_state_le+0x12>
		if (peer && !bt_conn_is_peer_addr_le(&conns[i], id, peer)) {
    6454:	b951      	cbnz	r1, 646c <bt_conn_lookup_state_le+0x34>
		if (conns[i].state == state && conns[i].id == id) {
    6456:	7b63      	ldrb	r3, [r4, #13]
    6458:	42b3      	cmp	r3, r6
    645a:	d1f6      	bne.n	644a <bt_conn_lookup_state_le+0x12>
    645c:	7a23      	ldrb	r3, [r4, #8]
    645e:	42ab      	cmp	r3, r5
    6460:	d1f3      	bne.n	644a <bt_conn_lookup_state_le+0x12>
	atomic_val_t old = atomic_inc(&conn->ref);
    6462:	4807      	ldr	r0, [pc, #28]	; (6480 <bt_conn_lookup_state_le+0x48>)
    6464:	f00c f945 	bl	126f2 <atomic_inc>
			return bt_conn_ref(&conns[i]);
    6468:	4804      	ldr	r0, [pc, #16]	; (647c <bt_conn_lookup_state_le+0x44>)
    646a:	e7ef      	b.n	644c <bt_conn_lookup_state_le+0x14>
		if (peer && !bt_conn_is_peer_addr_le(&conns[i], id, peer)) {
    646c:	460a      	mov	r2, r1
    646e:	4620      	mov	r0, r4
    6470:	4629      	mov	r1, r5
    6472:	f00c f99e 	bl	127b2 <bt_conn_is_peer_addr_le>
    6476:	2800      	cmp	r0, #0
    6478:	d1ed      	bne.n	6456 <bt_conn_lookup_state_le+0x1e>
    647a:	e7e6      	b.n	644a <bt_conn_lookup_state_le+0x12>
    647c:	20000dd8 	.word	0x20000dd8
    6480:	20000e30 	.word	0x20000e30

00006484 <bt_conn_exists_le>:
{
    6484:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
    6486:	f7ff ffbb 	bl	6400 <bt_conn_lookup_addr_le>
	if (conn) {
    648a:	4604      	mov	r4, r0
    648c:	b170      	cbz	r0, 64ac <bt_conn_exists_le+0x28>
		BT_WARN("Found valid connection in %s state",
    648e:	7b43      	ldrb	r3, [r0, #13]
    6490:	2157      	movs	r1, #87	; 0x57
    6492:	2b08      	cmp	r3, #8
    6494:	bf96      	itet	ls
    6496:	4a06      	ldrls	r2, [pc, #24]	; (64b0 <bt_conn_exists_le+0x2c>)
    6498:	4a06      	ldrhi	r2, [pc, #24]	; (64b4 <bt_conn_exists_le+0x30>)
    649a:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
    649e:	4806      	ldr	r0, [pc, #24]	; (64b8 <bt_conn_exists_le+0x34>)
    64a0:	f00a fc9c 	bl	10ddc <printk>
		bt_conn_unref(conn);
    64a4:	4620      	mov	r0, r4
    64a6:	f00c f9ab 	bl	12800 <bt_conn_unref>
		return true;
    64aa:	2001      	movs	r0, #1
}
    64ac:	bd10      	pop	{r4, pc}
    64ae:	bf00      	nop
    64b0:	00015a60 	.word	0x00015a60
    64b4:	000180fa 	.word	0x000180fa
    64b8:	00018104 	.word	0x00018104

000064bc <bt_conn_set_state>:
{
    64bc:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
    64be:	7b46      	ldrb	r6, [r0, #13]
{
    64c0:	4604      	mov	r4, r0
	if (conn->state == state) {
    64c2:	428e      	cmp	r6, r1
{
    64c4:	460d      	mov	r5, r1
	if (conn->state == state) {
    64c6:	d10b      	bne.n	64e0 <bt_conn_set_state+0x24>
		BT_WARN("no transition %s", state2str(state));
    64c8:	2157      	movs	r1, #87	; 0x57
    64ca:	2e08      	cmp	r6, #8
    64cc:	bf96      	itet	ls
    64ce:	4b56      	ldrls	r3, [pc, #344]	; (6628 <bt_conn_set_state+0x16c>)
	if (conn->state == state) {
    64d0:	4a56      	ldrhi	r2, [pc, #344]	; (662c <bt_conn_set_state+0x170>)
    64d2:	f853 2026 	ldrls.w	r2, [r3, r6, lsl #2]
		BT_WARN("no transition %s", state2str(state));
    64d6:	4856      	ldr	r0, [pc, #344]	; (6630 <bt_conn_set_state+0x174>)
}
    64d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
    64dc:	f00a bc7e 	b.w	10ddc <printk>
	conn->state = state;
    64e0:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
    64e2:	b916      	cbnz	r6, 64ea <bt_conn_set_state+0x2e>
	atomic_val_t old = atomic_inc(&conn->ref);
    64e4:	3058      	adds	r0, #88	; 0x58
    64e6:	f00c f904 	bl	126f2 <atomic_inc>
	switch (conn->state) {
    64ea:	7b63      	ldrb	r3, [r4, #13]
    64ec:	2b08      	cmp	r3, #8
    64ee:	f200 8096 	bhi.w	661e <bt_conn_set_state+0x162>
    64f2:	e8df f003 	tbb	[pc, r3]
    64f6:	0532      	.short	0x0532
    64f8:	98989898 	.word	0x98989898
    64fc:	1c98      	.short	0x1c98
    64fe:	98          	.byte	0x98
    64ff:	00          	.byte	0x00
		tx->pending_no_cb = 0U;
    6500:	2600      	movs	r6, #0
	z_impl_k_sem_give(sem);
    6502:	4d4c      	ldr	r5, [pc, #304]	; (6634 <bt_conn_set_state+0x178>)
	__asm__ volatile(
    6504:	f04f 0320 	mov.w	r3, #32
    6508:	f3ef 8211 	mrs	r2, BASEPRI
    650c:	f383 8811 	msr	BASEPRI, r3
    6510:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    6514:	69e3      	ldr	r3, [r4, #28]
    6516:	2b00      	cmp	r3, #0
    6518:	d062      	beq.n	65e0 <bt_conn_set_state+0x124>
			conn->pending_no_cb--;
    651a:	3b01      	subs	r3, #1
    651c:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    651e:	f382 8811 	msr	BASEPRI, r2
    6522:	f3bf 8f6f 	isb	sy
    6526:	4628      	mov	r0, r5
    6528:	f009 f9ce 	bl	f8c8 <z_impl_k_sem_give>
}
    652c:	e7ea      	b.n	6504 <bt_conn_set_state+0x48>
		if (conn->type == BT_CONN_TYPE_SCO) {
    652e:	78a3      	ldrb	r3, [r4, #2]
    6530:	2b04      	cmp	r3, #4
    6532:	d078      	beq.n	6626 <bt_conn_set_state+0x16a>
	z_impl_k_queue_init(queue);
    6534:	f104 0034 	add.w	r0, r4, #52	; 0x34
    6538:	f00e fd48 	bl	14fcc <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    653c:	2100      	movs	r1, #0
    653e:	483e      	ldr	r0, [pc, #248]	; (6638 <bt_conn_set_state+0x17c>)
    6540:	f00a fb4a 	bl	10bd8 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    6544:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    6546:	4620      	mov	r0, r4
	list->tail = NULL;
    6548:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
    654c:	f000 fce2 	bl	6f14 <bt_l2cap_connected>
		notify_connected(conn);
    6550:	4620      	mov	r0, r4
}
    6552:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify_connected(conn);
    6556:	f7ff bc6b 	b.w	5e30 <notify_connected>
		if (conn->type == BT_CONN_TYPE_SCO) {
    655a:	78a3      	ldrb	r3, [r4, #2]
    655c:	2b04      	cmp	r3, #4
    655e:	d104      	bne.n	656a <bt_conn_set_state+0xae>
			bt_conn_unref(conn);
    6560:	4620      	mov	r0, r4
}
    6562:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
    6566:	f00c b94b 	b.w	12800 <bt_conn_unref>
		switch (old_state) {
    656a:	2e08      	cmp	r6, #8
    656c:	d85b      	bhi.n	6626 <bt_conn_set_state+0x16a>
    656e:	a301      	add	r3, pc, #4	; (adr r3, 6574 <bt_conn_set_state+0xb8>)
    6570:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
    6574:	000065d9 	.word	0x000065d9
    6578:	00006599 	.word	0x00006599
    657c:	000065cb 	.word	0x000065cb
    6580:	00006561 	.word	0x00006561
    6584:	00006561 	.word	0x00006561
    6588:	000065cb 	.word	0x000065cb
    658c:	000065cb 	.word	0x000065cb
    6590:	000065d9 	.word	0x000065d9
    6594:	000065d9 	.word	0x000065d9
			tx_notify(conn);
    6598:	4620      	mov	r0, r4
    659a:	f00c f8b3 	bl	12704 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    659e:	78a3      	ldrb	r3, [r4, #2]
    65a0:	2b01      	cmp	r3, #1
    65a2:	d103      	bne.n	65ac <bt_conn_set_state+0xf0>
				k_delayed_work_cancel(&conn->update_work);
    65a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    65a8:	f009 fc7c 	bl	fea4 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    65ac:	3404      	adds	r4, #4
    65ae:	e8d4 3fef 	ldaex	r3, [r4]
    65b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    65b6:	e8c4 3fe2 	stlex	r2, r3, [r4]
    65ba:	2a00      	cmp	r2, #0
    65bc:	d1f7      	bne.n	65ae <bt_conn_set_state+0xf2>
}
    65be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    65c2:	2100      	movs	r1, #0
    65c4:	481c      	ldr	r0, [pc, #112]	; (6638 <bt_conn_set_state+0x17c>)
    65c6:	f00a bb07 	b.w	10bd8 <z_impl_k_poll_signal_raise>
			if (conn->err) {
    65ca:	7b23      	ldrb	r3, [r4, #12]
    65cc:	2b00      	cmp	r3, #0
    65ce:	d0c7      	beq.n	6560 <bt_conn_set_state+0xa4>
				notify_connected(conn);
    65d0:	4620      	mov	r0, r4
    65d2:	f7ff fc2d 	bl	5e30 <notify_connected>
    65d6:	e7c3      	b.n	6560 <bt_conn_set_state+0xa4>
			BT_WARN("Invalid (%u) old state", state);
    65d8:	462a      	mov	r2, r5
    65da:	2157      	movs	r1, #87	; 0x57
    65dc:	4817      	ldr	r0, [pc, #92]	; (663c <bt_conn_set_state+0x180>)
    65de:	e77b      	b.n	64d8 <bt_conn_set_state+0x1c>
Z_GENLIST_IS_EMPTY(slist)
    65e0:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    65e2:	b128      	cbz	r0, 65f0 <bt_conn_set_state+0x134>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    65e4:	69a1      	ldr	r1, [r4, #24]
    65e6:	6803      	ldr	r3, [r0, #0]
    65e8:	4288      	cmp	r0, r1
	list->head = node;
    65ea:	6163      	str	r3, [r4, #20]
	list->tail = node;
    65ec:	bf08      	it	eq
    65ee:	61a3      	streq	r3, [r4, #24]
    65f0:	f382 8811 	msr	BASEPRI, r2
    65f4:	f3bf 8f6f 	isb	sy
		if (!node) {
    65f8:	b1a8      	cbz	r0, 6626 <bt_conn_set_state+0x16a>
	__asm__ volatile(
    65fa:	f04f 0220 	mov.w	r2, #32
    65fe:	f3ef 8311 	mrs	r3, BASEPRI
    6602:	f382 8811 	msr	BASEPRI, r2
    6606:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    660a:	68c2      	ldr	r2, [r0, #12]
    660c:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    660e:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    6610:	f383 8811 	msr	BASEPRI, r3
    6614:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    6618:	f7ff fc00 	bl	5e1c <tx_free>
    661c:	e783      	b.n	6526 <bt_conn_set_state+0x6a>
		BT_WARN("no valid (%u) state was set", state);
    661e:	462a      	mov	r2, r5
    6620:	2157      	movs	r1, #87	; 0x57
    6622:	4807      	ldr	r0, [pc, #28]	; (6640 <bt_conn_set_state+0x184>)
    6624:	e758      	b.n	64d8 <bt_conn_set_state+0x1c>
}
    6626:	bd70      	pop	{r4, r5, r6, pc}
    6628:	00015a60 	.word	0x00015a60
    662c:	000180fa 	.word	0x000180fa
    6630:	0001812c 	.word	0x0001812c
    6634:	200000b4 	.word	0x200000b4
    6638:	20000238 	.word	0x20000238
    663c:	00018142 	.word	0x00018142
    6640:	0001815e 	.word	0x0001815e

00006644 <bt_conn_disconnect>:
	return bt_le_set_phy(conn, param->pref_tx_phy, param->pref_rx_phy);
}
#endif

int bt_conn_disconnect(struct bt_conn *conn, u8_t reason)
{
    6644:	b538      	push	{r3, r4, r5, lr}
    6646:	7b43      	ldrb	r3, [r0, #13]
    6648:	4604      	mov	r4, r0
    664a:	3b02      	subs	r3, #2
    664c:	460d      	mov	r5, r1
    664e:	2b06      	cmp	r3, #6
    6650:	d805      	bhi.n	665e <bt_conn_disconnect+0x1a>
    6652:	e8df f003 	tbb	[pc, r3]
    6656:	0408      	.short	0x0408
    6658:	1b0c0e04 	.word	0x1b0c0e04
    665c:	0c          	.byte	0x0c
    665d:	00          	.byte	0x00
	    conn->type == BT_CONN_TYPE_LE) {
		bt_le_set_auto_conn(&conn->le.dst, NULL);
	}
#endif /* !defined(CONFIG_BT_WHITELIST) */

	switch (conn->state) {
    665e:	f06f 0538 	mvn.w	r5, #56	; 0x38
		return 0;
	case BT_CONN_DISCONNECTED:
	default:
		return -ENOTCONN;
	}
}
    6662:	4628      	mov	r0, r5
    6664:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
    6666:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    6668:	2100      	movs	r1, #0
    666a:	f7ff ff27 	bl	64bc <bt_conn_set_state>
		return 0;
    666e:	2500      	movs	r5, #0
    6670:	e7f7      	b.n	6662 <bt_conn_disconnect+0x1e>
		BT_WARN("Deprecated: Use bt_le_adv_stop instead");
    6672:	2157      	movs	r1, #87	; 0x57
    6674:	480b      	ldr	r0, [pc, #44]	; (66a4 <bt_conn_disconnect+0x60>)
    6676:	f00a fbb1 	bl	10ddc <printk>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    667a:	4620      	mov	r0, r4
		conn->err = reason;
    667c:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    667e:	2100      	movs	r1, #0
    6680:	f7ff ff1c 	bl	64bc <bt_conn_set_state>
}
    6684:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_adv_stop();
    6688:	f7ff b8ba 	b.w	5800 <bt_le_adv_stop>
	err = bt_hci_disconnect(conn->handle, reason);
    668c:	8800      	ldrh	r0, [r0, #0]
    668e:	f00b ff59 	bl	12544 <bt_hci_disconnect>
	if (err) {
    6692:	4605      	mov	r5, r0
    6694:	2800      	cmp	r0, #0
    6696:	d1e4      	bne.n	6662 <bt_conn_disconnect+0x1e>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    6698:	2108      	movs	r1, #8
    669a:	4620      	mov	r0, r4
    669c:	f7ff ff0e 	bl	64bc <bt_conn_set_state>
	return 0;
    66a0:	e7df      	b.n	6662 <bt_conn_disconnect+0x1e>
    66a2:	bf00      	nop
    66a4:	0001817f 	.word	0x0001817f

000066a8 <send_conn_le_param_update>:
{
    66a8:	b538      	push	{r3, r4, r5, lr}
    66aa:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    66ac:	4608      	mov	r0, r1
{
    66ae:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    66b0:	f00b ff0a 	bl	124c8 <bt_le_conn_params_valid>
    66b4:	b308      	cbz	r0, 66fa <send_conn_le_param_update+0x52>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    66b6:	4b12      	ldr	r3, [pc, #72]	; (6700 <send_conn_le_param_update+0x58>)
    66b8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
    66bc:	0799      	lsls	r1, r3, #30
    66be:	d407      	bmi.n	66d0 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    66c0:	78e3      	ldrb	r3, [r4, #3]
    66c2:	b173      	cbz	r3, 66e2 <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
    66c4:	4629      	mov	r1, r5
    66c6:	4620      	mov	r0, r4
}
    66c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    66cc:	f00c badf 	b.w	12c8e <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    66d0:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
    66d4:	079a      	lsls	r2, r3, #30
    66d6:	d5f3      	bpl.n	66c0 <send_conn_le_param_update+0x18>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    66d8:	1d20      	adds	r0, r4, #4
    66da:	f00b fffc 	bl	126d6 <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    66de:	0543      	lsls	r3, r0, #21
    66e0:	d4ee      	bmi.n	66c0 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    66e2:	4629      	mov	r1, r5
    66e4:	4620      	mov	r0, r4
    66e6:	f00c f89e 	bl	12826 <bt_conn_le_conn_update>
		if (rc == 0) {
    66ea:	b928      	cbnz	r0, 66f8 <send_conn_le_param_update+0x50>
			conn->le.pending_latency = param->latency;
    66ec:	88ab      	ldrh	r3, [r5, #4]
    66ee:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
			conn->le.pending_timeout = param->timeout;
    66f2:	88eb      	ldrh	r3, [r5, #6]
    66f4:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
}
    66f8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    66fa:	f06f 0015 	mvn.w	r0, #21
    66fe:	e7fb      	b.n	66f8 <send_conn_le_param_update+0x50>
    6700:	20000000 	.word	0x20000000

00006704 <conn_update_timeout>:
{
    6704:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    6706:	f810 3c4f 	ldrb.w	r3, [r0, #-79]
{
    670a:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, update_work);
    670c:	f1a0 065c 	sub.w	r6, r0, #92	; 0x5c
	if (conn->state == BT_CONN_DISCONNECTED) {
    6710:	b993      	cbnz	r3, 6738 <conn_update_timeout+0x34>
		bt_l2cap_disconnected(conn);
    6712:	4630      	mov	r0, r6
    6714:	f00c f9cd 	bl	12ab2 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    6718:	4b1b      	ldr	r3, [pc, #108]	; (6788 <conn_update_timeout+0x84>)
    671a:	681d      	ldr	r5, [r3, #0]
    671c:	b925      	cbnz	r5, 6728 <conn_update_timeout+0x24>
		bt_conn_unref(conn);
    671e:	4630      	mov	r0, r6
    6720:	f00c f86e 	bl	12800 <bt_conn_unref>
}
    6724:	b002      	add	sp, #8
    6726:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->disconnected) {
    6728:	686b      	ldr	r3, [r5, #4]
    672a:	b11b      	cbz	r3, 6734 <conn_update_timeout+0x30>
			cb->disconnected(conn, conn->err);
    672c:	4630      	mov	r0, r6
    672e:	f814 1c50 	ldrb.w	r1, [r4, #-80]
    6732:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    6734:	69ad      	ldr	r5, [r5, #24]
    6736:	e7f1      	b.n	671c <conn_update_timeout+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
    6738:	f810 3c5a 	ldrb.w	r3, [r0, #-90]
    673c:	2b01      	cmp	r3, #1
    673e:	d1f1      	bne.n	6724 <conn_update_timeout+0x20>
		if (atomic_test_and_clear_bit(conn->flags,
    6740:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6744:	e8d5 3fef 	ldaex	r3, [r5]
    6748:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    674c:	e8c5 2fe1 	stlex	r1, r2, [r5]
    6750:	2900      	cmp	r1, #0
    6752:	d1f7      	bne.n	6744 <conn_update_timeout+0x40>
    6754:	059b      	lsls	r3, r3, #22
    6756:	d510      	bpl.n	677a <conn_update_timeout+0x76>
			param = BT_LE_CONN_PARAM(conn->le.interval_min,
    6758:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    675a:	9300      	str	r3, [sp, #0]
    675c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    675e:	9301      	str	r3, [sp, #4]
			send_conn_le_param_update(conn, param);
    6760:	4669      	mov	r1, sp
    6762:	4630      	mov	r0, r6
    6764:	f7ff ffa0 	bl	66a8 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6768:	e8d5 3fef 	ldaex	r3, [r5]
    676c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6770:	e8c5 3fe2 	stlex	r2, r3, [r5]
    6774:	2a00      	cmp	r2, #0
    6776:	d0d5      	beq.n	6724 <conn_update_timeout+0x20>
    6778:	e7f6      	b.n	6768 <conn_update_timeout+0x64>
			param = BT_LE_CONN_PARAM(
    677a:	466b      	mov	r3, sp
    677c:	4a03      	ldr	r2, [pc, #12]	; (678c <conn_update_timeout+0x88>)
    677e:	6810      	ldr	r0, [r2, #0]
    6780:	6851      	ldr	r1, [r2, #4]
    6782:	c303      	stmia	r3!, {r0, r1}
    6784:	e7ec      	b.n	6760 <conn_update_timeout+0x5c>
    6786:	bf00      	nop
    6788:	20000d34 	.word	0x20000d34
    678c:	000156e0 	.word	0x000156e0

00006790 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
    6790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6792:	4604      	mov	r4, r0
    6794:	460d      	mov	r5, r1
    6796:	4617      	mov	r7, r2
    6798:	461e      	mov	r6, r3

	/*
	 * PDU must not be allocated from ISR as we block with 'K_FOREVER'
	 * during the allocation
	 */
	__ASSERT_NO_MSG(!k_is_in_isr());
    679a:	f00e fc73 	bl	15084 <k_is_in_isr>
    679e:	b158      	cbz	r0, 67b8 <bt_conn_create_pdu_timeout+0x28>
    67a0:	4910      	ldr	r1, [pc, #64]	; (67e4 <bt_conn_create_pdu_timeout+0x54>)
    67a2:	4811      	ldr	r0, [pc, #68]	; (67e8 <bt_conn_create_pdu_timeout+0x58>)
    67a4:	f640 13e8 	movw	r3, #2536	; 0x9e8
    67a8:	4a10      	ldr	r2, [pc, #64]	; (67ec <bt_conn_create_pdu_timeout+0x5c>)
    67aa:	f00a fb17 	bl	10ddc <printk>
    67ae:	f640 11e8 	movw	r1, #2536	; 0x9e8
    67b2:	480e      	ldr	r0, [pc, #56]	; (67ec <bt_conn_create_pdu_timeout+0x5c>)
    67b4:	f00a fda8 	bl	11308 <assert_post_action>
	} else {
#if defined(CONFIG_NET_BUF_LOG)
		buf = net_buf_alloc_fixed_debug(pool, timeout, func,
							line);
#else
		buf = net_buf_alloc(pool, timeout);
    67b8:	480d      	ldr	r0, [pc, #52]	; (67f0 <bt_conn_create_pdu_timeout+0x60>)
    67ba:	463a      	mov	r2, r7
    67bc:	2c00      	cmp	r4, #0
    67be:	bf18      	it	ne
    67c0:	4620      	movne	r0, r4
    67c2:	4633      	mov	r3, r6
    67c4:	f00d fc05 	bl	13fd2 <net_buf_alloc_fixed>
#endif
	}

	if (!buf) {
    67c8:	4604      	mov	r4, r0
    67ca:	b928      	cbnz	r0, 67d8 <bt_conn_create_pdu_timeout+0x48>
		BT_WARN("Unable to allocate buffer within timeout");
    67cc:	2157      	movs	r1, #87	; 0x57
    67ce:	4809      	ldr	r0, [pc, #36]	; (67f4 <bt_conn_create_pdu_timeout+0x64>)
    67d0:	f00a fb04 	bl	10ddc <printk>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
    67d4:	4620      	mov	r0, r4
    67d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_reserve(buf, reserve);
    67d8:	1d69      	adds	r1, r5, #5
    67da:	3008      	adds	r0, #8
    67dc:	f005 f8ec 	bl	b9b8 <net_buf_simple_reserve>
	return buf;
    67e0:	e7f8      	b.n	67d4 <bt_conn_create_pdu_timeout+0x44>
    67e2:	bf00      	nop
    67e4:	000181ab 	.word	0x000181ab
    67e8:	00016493 	.word	0x00016493
    67ec:	00017f33 	.word	0x00017f33
    67f0:	2000061c 	.word	0x2000061c
    67f4:	000181ba 	.word	0x000181ba

000067f8 <bt_conn_create_frag_timeout>:
{
    67f8:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    67fa:	4801      	ldr	r0, [pc, #4]	; (6800 <bt_conn_create_frag_timeout+0x8>)
    67fc:	f7ff bfc8 	b.w	6790 <bt_conn_create_pdu_timeout>
    6800:	200006a0 	.word	0x200006a0

00006804 <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    6804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6808:	4606      	mov	r6, r0
	frag = bt_conn_create_frag(0);
    680a:	f04f 33ff 	mov.w	r3, #4294967295
    680e:	f04f 32ff 	mov.w	r2, #4294967295
    6812:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    6814:	460c      	mov	r4, r1
	frag = bt_conn_create_frag(0);
    6816:	f7ff ffef 	bl	67f8 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    681a:	7833      	ldrb	r3, [r6, #0]
	frag = bt_conn_create_frag(0);
    681c:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    681e:	2b07      	cmp	r3, #7
    6820:	f04f 0600 	mov.w	r6, #0
    6824:	d005      	beq.n	6832 <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
    6826:	f005 f925 	bl	ba74 <net_buf_unref>
		return NULL;
    682a:	4635      	mov	r5, r6
}
    682c:	4628      	mov	r0, r5
    682e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    6832:	6146      	str	r6, [r0, #20]
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    6834:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.mtu;
    6838:	4e0c      	ldr	r6, [pc, #48]	; (686c <create_frag.isra.0+0x68>)
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    683a:	4638      	mov	r0, r7
    683c:	f8b6 80b0 	ldrh.w	r8, [r6, #176]	; 0xb0
    6840:	f00d fbe8 	bl	14014 <net_buf_simple_tailroom>
    6844:	4580      	cmp	r8, r0
    6846:	d20c      	bcs.n	6862 <create_frag.isra.0+0x5e>
	return bt_dev.le.mtu;
    6848:	f8b6 60b0 	ldrh.w	r6, [r6, #176]	; 0xb0
	net_buf_add_mem(frag, buf->data, frag_len);
    684c:	f854 1f08 	ldr.w	r1, [r4, #8]!
    6850:	4632      	mov	r2, r6
    6852:	4638      	mov	r0, r7
    6854:	f00d fbe6 	bl	14024 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    6858:	4631      	mov	r1, r6
    685a:	4620      	mov	r0, r4
    685c:	f005 fa3a 	bl	bcd4 <net_buf_simple_pull>
	return frag;
    6860:	e7e4      	b.n	682c <create_frag.isra.0+0x28>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    6862:	4638      	mov	r0, r7
    6864:	f00d fbd6 	bl	14014 <net_buf_simple_tailroom>
    6868:	b286      	uxth	r6, r0
    686a:	e7ef      	b.n	684c <create_frag.isra.0+0x48>
    686c:	20000000 	.word	0x20000000

00006870 <bt_conn_process_tx>:
{
    6870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    6872:	7b43      	ldrb	r3, [r0, #13]
{
    6874:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    6876:	b973      	cbnz	r3, 6896 <bt_conn_process_tx+0x26>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6878:	1d03      	adds	r3, r0, #4
    687a:	e8d3 2fef 	ldaex	r2, [r3]
    687e:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    6882:	e8c3 1fe4 	stlex	r4, r1, [r3]
    6886:	2c00      	cmp	r4, #0
    6888:	d1f7      	bne.n	687a <bt_conn_process_tx+0xa>
    688a:	0653      	lsls	r3, r2, #25
    688c:	d503      	bpl.n	6896 <bt_conn_process_tx+0x26>
}
    688e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    6892:	f7ff bae3 	b.w	5e5c <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    6896:	2200      	movs	r2, #0
    6898:	2300      	movs	r3, #0
    689a:	f105 0034 	add.w	r0, r5, #52	; 0x34
    689e:	f005 f857 	bl	b950 <net_buf_get>
	BT_ASSERT(buf);
    68a2:	4604      	mov	r4, r0
    68a4:	b960      	cbnz	r0, 68c0 <bt_conn_process_tx+0x50>
    68a6:	f240 631d 	movw	r3, #1565	; 0x61d
    68aa:	4a1f      	ldr	r2, [pc, #124]	; (6928 <bt_conn_process_tx+0xb8>)
    68ac:	491f      	ldr	r1, [pc, #124]	; (692c <bt_conn_process_tx+0xbc>)
    68ae:	4820      	ldr	r0, [pc, #128]	; (6930 <bt_conn_process_tx+0xc0>)
    68b0:	f00a fa94 	bl	10ddc <printk>
    68b4:	4040      	eors	r0, r0
    68b6:	f380 8811 	msr	BASEPRI, r0
    68ba:	f04f 0003 	mov.w	r0, #3
    68be:	df02      	svc	2
	return bt_dev.le.mtu;
    68c0:	4f1c      	ldr	r7, [pc, #112]	; (6934 <bt_conn_process_tx+0xc4>)
	if (buf->len <= conn_mtu(conn)) {
    68c2:	89a1      	ldrh	r1, [r4, #12]
    68c4:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
    68c8:	4291      	cmp	r1, r2
    68ca:	d807      	bhi.n	68dc <bt_conn_process_tx+0x6c>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    68cc:	2300      	movs	r3, #0
    68ce:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
    68d0:	4621      	mov	r1, r4
    68d2:	4628      	mov	r0, r5
    68d4:	f7ff fb0c 	bl	5ef0 <send_frag>
	if (!send_buf(conn, buf)) {
    68d8:	b140      	cbz	r0, 68ec <bt_conn_process_tx+0x7c>
}
    68da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
    68dc:	f105 060d 	add.w	r6, r5, #13
    68e0:	4621      	mov	r1, r4
    68e2:	4630      	mov	r0, r6
    68e4:	f7ff ff8e 	bl	6804 <create_frag.isra.0>
	if (!frag) {
    68e8:	4601      	mov	r1, r0
    68ea:	b920      	cbnz	r0, 68f6 <bt_conn_process_tx+0x86>
		net_buf_unref(buf);
    68ec:	4620      	mov	r0, r4
}
    68ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    68f2:	f005 b8bf 	b.w	ba74 <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    68f6:	2301      	movs	r3, #1
    68f8:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    68fa:	4628      	mov	r0, r5
    68fc:	f7ff faf8 	bl	5ef0 <send_frag>
    6900:	2800      	cmp	r0, #0
    6902:	d0f3      	beq.n	68ec <bt_conn_process_tx+0x7c>
	while (buf->len > conn_mtu(conn)) {
    6904:	89a2      	ldrh	r2, [r4, #12]
    6906:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
    690a:	429a      	cmp	r2, r3
    690c:	d802      	bhi.n	6914 <bt_conn_process_tx+0xa4>
	return send_frag(conn, buf, BT_ACL_CONT, false);
    690e:	2300      	movs	r3, #0
    6910:	2201      	movs	r2, #1
    6912:	e7dd      	b.n	68d0 <bt_conn_process_tx+0x60>
		frag = create_frag(conn, buf);
    6914:	4621      	mov	r1, r4
    6916:	4630      	mov	r0, r6
    6918:	f7ff ff74 	bl	6804 <create_frag.isra.0>
		if (!frag) {
    691c:	4601      	mov	r1, r0
    691e:	2800      	cmp	r0, #0
    6920:	d0e4      	beq.n	68ec <bt_conn_process_tx+0x7c>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    6922:	2301      	movs	r3, #1
    6924:	461a      	mov	r2, r3
    6926:	e7e8      	b.n	68fa <bt_conn_process_tx+0x8a>
    6928:	00017f33 	.word	0x00017f33
    692c:	00019246 	.word	0x00019246
    6930:	00016493 	.word	0x00016493
    6934:	20000000 	.word	0x20000000

00006938 <bt_conn_auth_cb_register>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
    6938:	4b0c      	ldr	r3, [pc, #48]	; (696c <bt_conn_auth_cb_register+0x34>)
    693a:	b908      	cbnz	r0, 6940 <bt_conn_auth_cb_register+0x8>
		bt_auth = NULL;
    693c:	6018      	str	r0, [r3, #0]
		return 0;
    693e:	4770      	bx	lr
	}

	if (bt_auth) {
    6940:	681a      	ldr	r2, [r3, #0]
    6942:	b962      	cbnz	r2, 695e <bt_conn_auth_cb_register+0x26>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
    6944:	6902      	ldr	r2, [r0, #16]
    6946:	b93a      	cbnz	r2, 6958 <bt_conn_auth_cb_register+0x20>
    6948:	6802      	ldr	r2, [r0, #0]
    694a:	b95a      	cbnz	r2, 6964 <bt_conn_auth_cb_register+0x2c>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
    694c:	6842      	ldr	r2, [r0, #4]
    694e:	b94a      	cbnz	r2, 6964 <bt_conn_auth_cb_register+0x2c>
    6950:	6882      	ldr	r2, [r0, #8]
    6952:	b93a      	cbnz	r2, 6964 <bt_conn_auth_cb_register+0x2c>
    6954:	6942      	ldr	r2, [r0, #20]
    6956:	b92a      	cbnz	r2, 6964 <bt_conn_auth_cb_register+0x2c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
    6958:	6018      	str	r0, [r3, #0]
	return 0;
    695a:	2000      	movs	r0, #0
    695c:	4770      	bx	lr
		return -EALREADY;
    695e:	f06f 0044 	mvn.w	r0, #68	; 0x44
    6962:	4770      	bx	lr
		return -EINVAL;
    6964:	f06f 0015 	mvn.w	r0, #21
}
    6968:	4770      	bx	lr
    696a:	bf00      	nop
    696c:	20000d30 	.word	0x20000d30

00006970 <bt_conn_auth_passkey_confirm>:
	return -EINVAL;
}

int bt_conn_auth_passkey_confirm(struct bt_conn *conn)
{
	if (!bt_auth) {
    6970:	4a05      	ldr	r2, [pc, #20]	; (6988 <bt_conn_auth_passkey_confirm+0x18>)
    6972:	6812      	ldr	r2, [r2, #0]
    6974:	b122      	cbz	r2, 6980 <bt_conn_auth_passkey_confirm+0x10>
		return -EINVAL;
	}

	if (IS_ENABLED(CONFIG_BT_SMP) &&
    6976:	7883      	ldrb	r3, [r0, #2]
    6978:	2b01      	cmp	r3, #1
    697a:	d101      	bne.n	6980 <bt_conn_auth_passkey_confirm+0x10>
	    conn->type == BT_CONN_TYPE_LE) {
		return bt_smp_auth_passkey_confirm(conn);
    697c:	f00d ba8f 	b.w	13e9e <bt_smp_auth_passkey_confirm>
		return ssp_confirm_reply(conn);
	}
#endif /* CONFIG_BT_BREDR */

	return -EINVAL;
}
    6980:	f06f 0015 	mvn.w	r0, #21
    6984:	4770      	bx	lr
    6986:	bf00      	nop
    6988:	20000d30 	.word	0x20000d30

0000698c <bt_conn_auth_cancel>:

int bt_conn_auth_cancel(struct bt_conn *conn)
{
	if (!bt_auth) {
    698c:	4a05      	ldr	r2, [pc, #20]	; (69a4 <bt_conn_auth_cancel+0x18>)
    698e:	6812      	ldr	r2, [r2, #0]
    6990:	b122      	cbz	r2, 699c <bt_conn_auth_cancel+0x10>
		return -EINVAL;
	}

	if (IS_ENABLED(CONFIG_BT_SMP) && conn->type == BT_CONN_TYPE_LE) {
    6992:	7883      	ldrb	r3, [r0, #2]
    6994:	2b01      	cmp	r3, #1
    6996:	d101      	bne.n	699c <bt_conn_auth_cancel+0x10>
		return bt_smp_auth_cancel(conn);
    6998:	f00d bab4 	b.w	13f04 <bt_smp_auth_cancel>
		}
	}
#endif /* CONFIG_BT_BREDR */

	return -EINVAL;
}
    699c:	f06f 0015 	mvn.w	r0, #21
    69a0:	4770      	bx	lr
    69a2:	bf00      	nop
    69a4:	20000d30 	.word	0x20000d30

000069a8 <bt_conn_auth_pairing_confirm>:

int bt_conn_auth_pairing_confirm(struct bt_conn *conn)
{
	if (!bt_auth) {
    69a8:	4a05      	ldr	r2, [pc, #20]	; (69c0 <bt_conn_auth_pairing_confirm+0x18>)
    69aa:	6812      	ldr	r2, [r2, #0]
    69ac:	b122      	cbz	r2, 69b8 <bt_conn_auth_pairing_confirm+0x10>
		return -EINVAL;
	}

	switch (conn->type) {
    69ae:	7883      	ldrb	r3, [r0, #2]
    69b0:	2b01      	cmp	r3, #1
    69b2:	d101      	bne.n	69b8 <bt_conn_auth_pairing_confirm+0x10>
#if defined(CONFIG_BT_SMP)
	case BT_CONN_TYPE_LE:
		return bt_smp_auth_pairing_confirm(conn);
    69b4:	f00d bacb 	b.w	13f4e <bt_smp_auth_pairing_confirm>
		return ssp_confirm_reply(conn);
#endif /* CONFIG_BT_BREDR */
	default:
		return -EINVAL;
	}
}
    69b8:	f06f 0015 	mvn.w	r0, #21
    69bc:	4770      	bx	lr
    69be:	bf00      	nop
    69c0:	20000d30 	.word	0x20000d30

000069c4 <bt_conn_index>:
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_index(struct bt_conn *conn)
{
	u8_t index = conn - conns;
    69c4:	4b0c      	ldr	r3, [pc, #48]	; (69f8 <bt_conn_index+0x34>)
{
    69c6:	b510      	push	{r4, lr}
	u8_t index = conn - conns;
    69c8:	1ac0      	subs	r0, r0, r3
    69ca:	1083      	asrs	r3, r0, #2
    69cc:	480b      	ldr	r0, [pc, #44]	; (69fc <bt_conn_index+0x38>)
    69ce:	4358      	muls	r0, r3

	__ASSERT(index < CONFIG_BT_MAX_CONN, "Invalid bt_conn pointer");
    69d0:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
    69d4:	d00e      	beq.n	69f4 <bt_conn_index+0x30>
    69d6:	490a      	ldr	r1, [pc, #40]	; (6a00 <bt_conn_index+0x3c>)
    69d8:	f640 239f 	movw	r3, #2719	; 0xa9f
    69dc:	4a09      	ldr	r2, [pc, #36]	; (6a04 <bt_conn_index+0x40>)
    69de:	480a      	ldr	r0, [pc, #40]	; (6a08 <bt_conn_index+0x44>)
    69e0:	f00a f9fc 	bl	10ddc <printk>
    69e4:	4809      	ldr	r0, [pc, #36]	; (6a0c <bt_conn_index+0x48>)
    69e6:	f00a f9f9 	bl	10ddc <printk>
    69ea:	f640 219f 	movw	r1, #2719	; 0xa9f
    69ee:	4805      	ldr	r0, [pc, #20]	; (6a04 <bt_conn_index+0x40>)
    69f0:	f00a fc8a 	bl	11308 <assert_post_action>
	return index;
}
    69f4:	4620      	mov	r0, r4
    69f6:	bd10      	pop	{r4, pc}
    69f8:	20000dd8 	.word	0x20000dd8
    69fc:	2fa0be83 	.word	0x2fa0be83
    6a00:	000181e8 	.word	0x000181e8
    6a04:	00017f33 	.word	0x00017f33
    6a08:	00016493 	.word	0x00016493
    6a0c:	000181f2 	.word	0x000181f2

00006a10 <bt_conn_lookup_index>:

struct bt_conn *bt_conn_lookup_index(u8_t index)
{
    6a10:	b508      	push	{r3, lr}
	struct bt_conn *conn;

	if (index >= ARRAY_SIZE(conns)) {
    6a12:	b108      	cbz	r0, 6a18 <bt_conn_lookup_index+0x8>
		return NULL;
    6a14:	2000      	movs	r0, #0
	if (!atomic_get(&conn->ref)) {
		return NULL;
	}

	return bt_conn_ref(conn);
}
    6a16:	bd08      	pop	{r3, pc}
	if (!atomic_get(&conn->ref)) {
    6a18:	4804      	ldr	r0, [pc, #16]	; (6a2c <bt_conn_lookup_index+0x1c>)
    6a1a:	f00b fe5c 	bl	126d6 <atomic_get>
    6a1e:	2800      	cmp	r0, #0
    6a20:	d0f8      	beq.n	6a14 <bt_conn_lookup_index+0x4>
	atomic_val_t old = atomic_inc(&conn->ref);
    6a22:	4802      	ldr	r0, [pc, #8]	; (6a2c <bt_conn_lookup_index+0x1c>)
    6a24:	f00b fe65 	bl	126f2 <atomic_inc>
	return bt_conn_ref(conn);
    6a28:	4801      	ldr	r0, [pc, #4]	; (6a30 <bt_conn_lookup_index+0x20>)
    6a2a:	e7f4      	b.n	6a16 <bt_conn_lookup_index+0x6>
    6a2c:	20000e30 	.word	0x20000e30
    6a30:	20000dd8 	.word	0x20000dd8

00006a34 <bt_conn_init>:

int bt_conn_init(void)
{
    6a34:	b570      	push	{r4, r5, r6, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    6a36:	2400      	movs	r4, #0
    6a38:	4d0a      	ldr	r5, [pc, #40]	; (6a64 <bt_conn_init+0x30>)
		k_fifo_put(&free_tx, &conn_tx[i]);
    6a3a:	4e0b      	ldr	r6, [pc, #44]	; (6a68 <bt_conn_init+0x34>)
    6a3c:	4629      	mov	r1, r5
    6a3e:	4630      	mov	r0, r6
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    6a40:	3401      	adds	r4, #1
		k_fifo_put(&free_tx, &conn_tx[i]);
    6a42:	f00e fad0 	bl	14fe6 <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    6a46:	2c0a      	cmp	r4, #10
    6a48:	f105 0510 	add.w	r5, r5, #16
    6a4c:	d1f6      	bne.n	6a3c <bt_conn_init+0x8>
	}

	bt_att_init();
    6a4e:	f00c fb98 	bl	13182 <bt_att_init>

	err = bt_smp_init();
    6a52:	f004 fcf5 	bl	b440 <bt_smp_init>
	if (err) {
    6a56:	4604      	mov	r4, r0
    6a58:	b908      	cbnz	r0, 6a5e <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
    6a5a:	f00c f939 	bl	12cd0 <bt_l2cap_init>
#endif /* !defined(CONFIG_BT_WHITELIST) */
		}
	}

	return 0;
}
    6a5e:	4620      	mov	r0, r4
    6a60:	bd70      	pop	{r4, r5, r6, pc}
    6a62:	bf00      	nop
    6a64:	20000d38 	.word	0x20000d38
    6a68:	200005d4 	.word	0x200005d4

00006a6c <get_ident>:

static u8_t get_ident(void)
{
	static u8_t ident;

	ident++;
    6a6c:	4b04      	ldr	r3, [pc, #16]	; (6a80 <get_ident+0x14>)
    6a6e:	781a      	ldrb	r2, [r3, #0]
    6a70:	3201      	adds	r2, #1
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
    6a72:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    6a76:	bf08      	it	eq
    6a78:	2201      	moveq	r2, #1
    6a7a:	701a      	strb	r2, [r3, #0]
	}

	return ident;
}
    6a7c:	7818      	ldrb	r0, [r3, #0]
    6a7e:	4770      	bx	lr
    6a80:	20001fef 	.word	0x20001fef

00006a84 <l2cap_server_lookup_psm>:
#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
static struct bt_l2cap_server *l2cap_server_lookup_psm(u16_t psm)
{
	struct bt_l2cap_server *server;

	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    6a84:	4a08      	ldr	r2, [pc, #32]	; (6aa8 <l2cap_server_lookup_psm+0x24>)
{
    6a86:	4603      	mov	r3, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    6a88:	6810      	ldr	r0, [r2, #0]
    6a8a:	b158      	cbz	r0, 6aa4 <l2cap_server_lookup_psm+0x20>
    6a8c:	3808      	subs	r0, #8
    6a8e:	b900      	cbnz	r0, 6a92 <l2cap_server_lookup_psm+0xe>
    6a90:	4770      	bx	lr
		if (server->psm == psm) {
    6a92:	8802      	ldrh	r2, [r0, #0]
    6a94:	429a      	cmp	r2, r3
    6a96:	d005      	beq.n	6aa4 <l2cap_server_lookup_psm+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
    6a98:	f110 0208 	adds.w	r2, r0, #8
    6a9c:	d001      	beq.n	6aa2 <l2cap_server_lookup_psm+0x1e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    6a9e:	6880      	ldr	r0, [r0, #8]
    6aa0:	e7f3      	b.n	6a8a <l2cap_server_lookup_psm+0x6>
			return server;
		}
	}

	return NULL;
    6aa2:	4610      	mov	r0, r2
}
    6aa4:	4770      	bx	lr
    6aa6:	bf00      	nop
    6aa8:	20000f34 	.word	0x20000f34

00006aac <l2cap_accept>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    6aac:	b508      	push	{r3, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    6aae:	4b07      	ldr	r3, [pc, #28]	; (6acc <l2cap_accept+0x20>)
{
    6ab0:	4602      	mov	r2, r0
		if (l2cap->chan.chan.conn) {
    6ab2:	6818      	ldr	r0, [r3, #0]
    6ab4:	b918      	cbnz	r0, 6abe <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    6ab6:	4a06      	ldr	r2, [pc, #24]	; (6ad0 <l2cap_accept+0x24>)
    6ab8:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
    6aba:	600b      	str	r3, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    6abc:	bd08      	pop	{r3, pc}
	BT_ERR("No available L2CAP context for conn %p", conn);
    6abe:	4805      	ldr	r0, [pc, #20]	; (6ad4 <l2cap_accept+0x28>)
    6ac0:	2145      	movs	r1, #69	; 0x45
    6ac2:	f00a f98b 	bl	10ddc <printk>
    6ac6:	f06f 000b 	mvn.w	r0, #11
    6aca:	e7f7      	b.n	6abc <l2cap_accept+0x10>
    6acc:	20000e84 	.word	0x20000e84
    6ad0:	00015ab4 	.word	0x00015ab4
    6ad4:	00018276 	.word	0x00018276

00006ad8 <l2cap_create_le_sig_pdu.isra.0>:
	if (code == BT_L2CAP_DISCONN_REQ) {
    6ad8:	2806      	cmp	r0, #6
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    6ada:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6adc:	4605      	mov	r5, r0
    6ade:	460f      	mov	r7, r1
	return bt_conn_create_pdu_timeout(pool,
    6ae0:	480e      	ldr	r0, [pc, #56]	; (6b1c <l2cap_create_le_sig_pdu.isra.0+0x44>)
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    6ae2:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
    6ae4:	f04f 0300 	mov.w	r3, #0
    6ae8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    6aec:	f04f 0104 	mov.w	r1, #4
    6af0:	bf18      	it	ne
    6af2:	2000      	movne	r0, #0
    6af4:	f7ff fe4c 	bl	6790 <bt_conn_create_pdu_timeout>
	if (!buf) {
    6af8:	4604      	mov	r4, r0
    6afa:	b930      	cbnz	r0, 6b0a <l2cap_create_le_sig_pdu.isra.0+0x32>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    6afc:	462a      	mov	r2, r5
    6afe:	2145      	movs	r1, #69	; 0x45
    6b00:	4807      	ldr	r0, [pc, #28]	; (6b20 <l2cap_create_le_sig_pdu.isra.0+0x48>)
    6b02:	f00a f96b 	bl	10ddc <printk>
}
    6b06:	4620      	mov	r0, r4
    6b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	hdr = net_buf_add(buf, sizeof(*hdr));
    6b0a:	2104      	movs	r1, #4
    6b0c:	3008      	adds	r0, #8
    6b0e:	f005 f923 	bl	bd58 <net_buf_simple_add>
	hdr->code = code;
    6b12:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
    6b14:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    6b16:	8046      	strh	r6, [r0, #2]
	return buf;
    6b18:	e7f5      	b.n	6b06 <l2cap_create_le_sig_pdu.isra.0+0x2e>
    6b1a:	bf00      	nop
    6b1c:	20000648 	.word	0x20000648
    6b20:	000182a2 	.word	0x000182a2

00006b24 <l2cap_chan_tx_init>:
{
    6b24:	b538      	push	{r3, r4, r5, lr}
    6b26:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6b28:	2500      	movs	r5, #0
	(void)memset(&chan->tx, 0, sizeof(chan->tx));
    6b2a:	220c      	movs	r2, #12
    6b2c:	2100      	movs	r1, #0
    6b2e:	3048      	adds	r0, #72	; 0x48
    6b30:	f00b fb40 	bl	121b4 <memset>
    6b34:	f104 0350 	add.w	r3, r4, #80	; 0x50
    6b38:	e8d3 2fef 	ldaex	r2, [r3]
    6b3c:	e8c3 5fe1 	stlex	r1, r5, [r3]
    6b40:	2900      	cmp	r1, #0
    6b42:	d1f9      	bne.n	6b38 <l2cap_chan_tx_init+0x14>
	z_impl_k_queue_init(queue);
    6b44:	f104 0054 	add.w	r0, r4, #84	; 0x54
    6b48:	f00e fa40 	bl	14fcc <z_impl_k_queue_init>
    6b4c:	4b02      	ldr	r3, [pc, #8]	; (6b58 <l2cap_chan_tx_init+0x34>)
    6b4e:	6765      	str	r5, [r4, #116]	; 0x74
    6b50:	e9c4 351e 	strd	r3, r5, [r4, #120]	; 0x78
}
    6b54:	bd38      	pop	{r3, r4, r5, pc}
    6b56:	bf00      	nop
    6b58:	00012b99 	.word	0x00012b99

00006b5c <k_work_submit_to_queue.constprop.0>:
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
    6b5c:	4601      	mov	r1, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6b5e:	f100 0308 	add.w	r3, r0, #8
    6b62:	e8d3 2fef 	ldaex	r2, [r3]
    6b66:	f042 0001 	orr.w	r0, r2, #1
    6b6a:	e8c3 0fec 	stlex	ip, r0, [r3]
    6b6e:	f1bc 0f00 	cmp.w	ip, #0
    6b72:	d1f6      	bne.n	6b62 <k_work_submit_to_queue.constprop.0+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    6b74:	07d3      	lsls	r3, r2, #31
    6b76:	d402      	bmi.n	6b7e <k_work_submit_to_queue.constprop.0+0x22>
		k_queue_append(&work_q->queue, work);
    6b78:	4801      	ldr	r0, [pc, #4]	; (6b80 <k_work_submit_to_queue.constprop.0+0x24>)
    6b7a:	f00e ba34 	b.w	14fe6 <k_queue_append>
}
    6b7e:	4770      	bx	lr
    6b80:	20001e54 	.word	0x20001e54

00006b84 <l2cap_rtx_timeout>:
{
    6b84:	b538      	push	{r3, r4, r5, lr}
    6b86:	4604      	mov	r4, r0
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
    6b88:	f1a0 0510 	sub.w	r5, r0, #16
	BT_ERR("chan %p timeout", chan);
    6b8c:	462a      	mov	r2, r5
    6b8e:	2145      	movs	r1, #69	; 0x45
    6b90:	4806      	ldr	r0, [pc, #24]	; (6bac <l2cap_rtx_timeout+0x28>)
    6b92:	f00a f923 	bl	10ddc <printk>
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    6b96:	f854 0c10 	ldr.w	r0, [r4, #-16]
    6b9a:	4629      	mov	r1, r5
    6b9c:	f00b ff5b 	bl	12a56 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    6ba0:	4628      	mov	r0, r5
}
    6ba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    6ba6:	f00b bf6f 	b.w	12a88 <bt_l2cap_chan_del>
    6baa:	bf00      	nop
    6bac:	000182cf 	.word	0x000182cf

00006bb0 <l2cap_chan_le_send>:
{
    6bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6bb4:	4606      	mov	r6, r0
    6bb6:	460d      	mov	r5, r1
    6bb8:	4617      	mov	r7, r2
    6bba:	b085      	sub	sp, #20
	if (!test_and_dec(&ch->tx.credits)) {
    6bbc:	f100 0850 	add.w	r8, r0, #80	; 0x50
		old_value = atomic_get(target);
    6bc0:	4640      	mov	r0, r8
    6bc2:	f00b feb2 	bl	1292a <atomic_get>
		if (!old_value) {
    6bc6:	2800      	cmp	r0, #0
    6bc8:	f000 80b8 	beq.w	6d3c <l2cap_chan_le_send+0x18c>
		new_value = old_value - 1;
    6bcc:	1e43      	subs	r3, r0, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    6bce:	e8d8 2fef 	ldaex	r2, [r8]
    6bd2:	4282      	cmp	r2, r0
    6bd4:	d103      	bne.n	6bde <l2cap_chan_le_send+0x2e>
    6bd6:	e8c8 3fe1 	stlex	r1, r3, [r8]
    6bda:	2900      	cmp	r1, #0
    6bdc:	d1f7      	bne.n	6bce <l2cap_chan_le_send+0x1e>
	} while (atomic_cas(target, old_value, new_value) == 0);
    6bde:	d1ef      	bne.n	6bc0 <l2cap_chan_le_send+0x10>
	net_buf_simple_save(&buf->b, &state);
    6be0:	f105 0b08 	add.w	fp, r5, #8
	state->offset = net_buf_simple_headroom(buf);
    6be4:	4658      	mov	r0, fp
    6be6:	f00d fa11 	bl	1400c <net_buf_simple_headroom>
	state->len = buf->len;
    6bea:	f8b5 a00c 	ldrh.w	sl, [r5, #12]
	if (buf->len + sdu_hdr_len > ch->tx.mps) {
    6bee:	f8b6 304c 	ldrh.w	r3, [r6, #76]	; 0x4c
    6bf2:	eb0a 0207 	add.w	r2, sl, r7
    6bf6:	429a      	cmp	r2, r3
	state->offset = net_buf_simple_headroom(buf);
    6bf8:	9002      	str	r0, [sp, #8]
    6bfa:	d81e      	bhi.n	6c3a <l2cap_chan_le_send+0x8a>
	if (net_buf_headroom(buf) >= headroom && !buf->frags) {
    6bfc:	4658      	mov	r0, fp
    6bfe:	f00d fa05 	bl	1400c <net_buf_simple_headroom>
	headroom = BT_L2CAP_CHAN_SEND_RESERVE + sdu_hdr_len;
    6c02:	f107 0309 	add.w	r3, r7, #9
	if (net_buf_headroom(buf) >= headroom && !buf->frags) {
    6c06:	b29b      	uxth	r3, r3
    6c08:	4298      	cmp	r0, r3
    6c0a:	d316      	bcc.n	6c3a <l2cap_chan_le_send+0x8a>
    6c0c:	682b      	ldr	r3, [r5, #0]
    6c0e:	b9a3      	cbnz	r3, 6c3a <l2cap_chan_le_send+0x8a>
		if (sdu_hdr_len) {
    6c10:	b137      	cbz	r7, 6c20 <l2cap_chan_le_send+0x70>
			net_buf_push_le16(buf, net_buf_frags_len(buf));
    6c12:	4628      	mov	r0, r5
    6c14:	f00b fe3f 	bl	12896 <net_buf_frags_len>
    6c18:	b281      	uxth	r1, r0
    6c1a:	4658      	mov	r0, fp
    6c1c:	f00d f9de 	bl	13fdc <net_buf_simple_push_le16>
		return net_buf_ref(buf);
    6c20:	4628      	mov	r0, r5
    6c22:	f004 ff6d 	bl	bb00 <net_buf_ref>
	if (!seg) {
    6c26:	4604      	mov	r4, r0
    6c28:	2800      	cmp	r0, #0
    6c2a:	d138      	bne.n	6c9e <l2cap_chan_le_send+0xee>
	return atomic_add(target, 1);
    6c2c:	2101      	movs	r1, #1
    6c2e:	4640      	mov	r0, r8
    6c30:	f00b fe7e 	bl	12930 <atomic_add>
		return -EAGAIN;
    6c34:	f06f 070a 	mvn.w	r7, #10
    6c38:	e07a      	b.n	6d30 <l2cap_chan_le_send+0x180>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    6c3a:	79a8      	ldrb	r0, [r5, #6]
    6c3c:	f004 fd7a 	bl	b734 <net_buf_pool_get>
	seg = net_buf_alloc(pool, K_NO_WAIT);
    6c40:	2200      	movs	r2, #0
    6c42:	2300      	movs	r3, #0
    6c44:	f00d f9c5 	bl	13fd2 <net_buf_alloc_fixed>
	if (seg) {
    6c48:	4604      	mov	r4, r0
    6c4a:	2800      	cmp	r0, #0
    6c4c:	d04f      	beq.n	6cee <l2cap_chan_le_send+0x13e>
		net_buf_reserve(seg, BT_L2CAP_CHAN_SEND_RESERVE);
    6c4e:	2109      	movs	r1, #9
    6c50:	3008      	adds	r0, #8
    6c52:	f004 feb1 	bl	b9b8 <net_buf_simple_reserve>
	if (sdu_hdr_len) {
    6c56:	f104 0908 	add.w	r9, r4, #8
    6c5a:	b137      	cbz	r7, 6c6a <l2cap_chan_le_send+0xba>
		net_buf_add_le16(seg, net_buf_frags_len(buf));
    6c5c:	4628      	mov	r0, r5
    6c5e:	f00b fe1a 	bl	12896 <net_buf_frags_len>
    6c62:	b281      	uxth	r1, r0
    6c64:	4648      	mov	r0, r9
    6c66:	f00d f9f0 	bl	1404a <net_buf_simple_add_le16>
	len = MIN(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    6c6a:	4648      	mov	r0, r9
    6c6c:	f00d f9d2 	bl	14014 <net_buf_simple_tailroom>
    6c70:	f8b6 104c 	ldrh.w	r1, [r6, #76]	; 0x4c
    6c74:	1bc9      	subs	r1, r1, r7
    6c76:	4288      	cmp	r0, r1
    6c78:	d242      	bcs.n	6d00 <l2cap_chan_le_send+0x150>
    6c7a:	4648      	mov	r0, r9
    6c7c:	f00d f9ca 	bl	14014 <net_buf_simple_tailroom>
    6c80:	b282      	uxth	r2, r0
	len = MIN(buf->len, len);
    6c82:	89a9      	ldrh	r1, [r5, #12]
	net_buf_add_mem(seg, buf->data, len);
    6c84:	4648      	mov	r0, r9
    6c86:	428a      	cmp	r2, r1
    6c88:	bf28      	it	cs
    6c8a:	460a      	movcs	r2, r1
    6c8c:	68a9      	ldr	r1, [r5, #8]
    6c8e:	9203      	str	r2, [sp, #12]
    6c90:	f00d f9c8 	bl	14024 <net_buf_simple_add_mem>
	net_buf_pull(buf, len);
    6c94:	9a03      	ldr	r2, [sp, #12]
    6c96:	4658      	mov	r0, fp
    6c98:	4611      	mov	r1, r2
    6c9a:	f005 f81b 	bl	bcd4 <net_buf_simple_pull>
	len = seg->len - sdu_hdr_len;
    6c9e:	89a2      	ldrh	r2, [r4, #12]
	if ((buf == seg || !buf->len) && ch->chan.ops->sent) {
    6ca0:	42a5      	cmp	r5, r4
    6ca2:	f8b6 1048 	ldrh.w	r1, [r6, #72]	; 0x48
	len = seg->len - sdu_hdr_len;
    6ca6:	eba2 0707 	sub.w	r7, r2, r7
	if ((buf == seg || !buf->len) && ch->chan.ops->sent) {
    6caa:	d001      	beq.n	6cb0 <l2cap_chan_le_send+0x100>
    6cac:	89ab      	ldrh	r3, [r5, #12]
    6cae:	bb4b      	cbnz	r3, 6d04 <l2cap_chan_le_send+0x154>
    6cb0:	6873      	ldr	r3, [r6, #4]
    6cb2:	695b      	ldr	r3, [r3, #20]
    6cb4:	b333      	cbz	r3, 6d04 <l2cap_chan_le_send+0x154>
		err = bt_l2cap_send_cb(ch->chan.conn, ch->tx.cid, seg,
    6cb6:	4b24      	ldr	r3, [pc, #144]	; (6d48 <l2cap_chan_le_send+0x198>)
    6cb8:	9600      	str	r6, [sp, #0]
		err = bt_l2cap_send_cb(ch->chan.conn, ch->tx.cid, seg,
    6cba:	4622      	mov	r2, r4
    6cbc:	6830      	ldr	r0, [r6, #0]
    6cbe:	f00b ff11 	bl	12ae4 <bt_l2cap_send_cb>
    6cc2:	4604      	mov	r4, r0
	if (err) {
    6cc4:	b308      	cbz	r0, 6d0a <l2cap_chan_le_send+0x15a>
		BT_WARN("Unable to send seg %d", err);
    6cc6:	4602      	mov	r2, r0
    6cc8:	2157      	movs	r1, #87	; 0x57
    6cca:	4820      	ldr	r0, [pc, #128]	; (6d4c <l2cap_chan_le_send+0x19c>)
    6ccc:	f00a f886 	bl	10ddc <printk>
    6cd0:	2101      	movs	r1, #1
    6cd2:	4640      	mov	r0, r8
    6cd4:	f00b fe2c 	bl	12930 <atomic_add>
		if (err == -ENOBUFS) {
    6cd8:	f114 0f37 	cmn.w	r4, #55	; 0x37
    6cdc:	d12c      	bne.n	6d38 <l2cap_chan_le_send+0x188>
	buf->data = buf->__buf + state->offset;
    6cde:	6928      	ldr	r0, [r5, #16]
    6ce0:	9b02      	ldr	r3, [sp, #8]
	buf->len = state->len;
    6ce2:	f8a5 a00c 	strh.w	sl, [r5, #12]
	buf->data = buf->__buf + state->offset;
    6ce6:	fa10 f083 	uxtah	r0, r0, r3
    6cea:	60a8      	str	r0, [r5, #8]
	buf->len = state->len;
    6cec:	e7a2      	b.n	6c34 <l2cap_chan_le_send+0x84>
	return bt_conn_create_pdu_timeout(pool,
    6cee:	2200      	movs	r2, #0
    6cf0:	2300      	movs	r3, #0
    6cf2:	2104      	movs	r1, #4
    6cf4:	f7ff fd4c 	bl	6790 <bt_conn_create_pdu_timeout>
	if (!seg) {
    6cf8:	4604      	mov	r4, r0
    6cfa:	2800      	cmp	r0, #0
    6cfc:	d1ab      	bne.n	6c56 <l2cap_chan_le_send+0xa6>
    6cfe:	e795      	b.n	6c2c <l2cap_chan_le_send+0x7c>
	len = MIN(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    6d00:	b28a      	uxth	r2, r1
    6d02:	e7be      	b.n	6c82 <l2cap_chan_le_send+0xd2>
		err = bt_l2cap_send_cb(ch->chan.conn, ch->tx.cid, seg,
    6d04:	4b12      	ldr	r3, [pc, #72]	; (6d50 <l2cap_chan_le_send+0x1a0>)
    6d06:	9600      	str	r6, [sp, #0]
    6d08:	e7d7      	b.n	6cba <l2cap_chan_le_send+0x10a>
	if (!atomic_get(&ch->tx.credits)) {
    6d0a:	4640      	mov	r0, r8
    6d0c:	f00b fe0d 	bl	1292a <atomic_get>
    6d10:	b970      	cbnz	r0, 6d30 <l2cap_chan_le_send+0x180>
		atomic_clear_bit(ch->chan.status, BT_L2CAP_STATUS_OUT);
    6d12:	f106 0130 	add.w	r1, r6, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6d16:	e8d1 3fef 	ldaex	r3, [r1]
    6d1a:	f023 0301 	bic.w	r3, r3, #1
    6d1e:	e8c1 3fe2 	stlex	r2, r3, [r1]
    6d22:	2a00      	cmp	r2, #0
    6d24:	d1f7      	bne.n	6d16 <l2cap_chan_le_send+0x166>
		if (ch->chan.ops->status) {
    6d26:	6873      	ldr	r3, [r6, #4]
    6d28:	699b      	ldr	r3, [r3, #24]
    6d2a:	b10b      	cbz	r3, 6d30 <l2cap_chan_le_send+0x180>
			ch->chan.ops->status(&ch->chan, ch->chan.status);
    6d2c:	4630      	mov	r0, r6
    6d2e:	4798      	blx	r3
}
    6d30:	4638      	mov	r0, r7
    6d32:	b005      	add	sp, #20
    6d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6d38:	4627      	mov	r7, r4
    6d3a:	e7f9      	b.n	6d30 <l2cap_chan_le_send+0x180>
		BT_WARN("No credits to transmit packet");
    6d3c:	2157      	movs	r1, #87	; 0x57
    6d3e:	4805      	ldr	r0, [pc, #20]	; (6d54 <l2cap_chan_le_send+0x1a4>)
    6d40:	f00a f84c 	bl	10ddc <printk>
    6d44:	e776      	b.n	6c34 <l2cap_chan_le_send+0x84>
    6d46:	bf00      	nop
    6d48:	00012a3f 	.word	0x00012a3f
    6d4c:	000182e4 	.word	0x000182e4
    6d50:	00012a39 	.word	0x00012a39
    6d54:	000182ff 	.word	0x000182ff

00006d58 <l2cap_le_conn_req>:
{
    6d58:	b538      	push	{r3, r4, r5, lr}
    6d5a:	4604      	mov	r4, r0
	ch->chan.ident = get_ident();
    6d5c:	f7ff fe86 	bl	6a6c <get_ident>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_LE_CONN_REQ,
    6d60:	220a      	movs	r2, #10
	ch->chan.ident = get_ident();
    6d62:	4601      	mov	r1, r0
    6d64:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_LE_CONN_REQ,
    6d68:	2014      	movs	r0, #20
    6d6a:	f7ff feb5 	bl	6ad8 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    6d6e:	4605      	mov	r5, r0
    6d70:	b1e8      	cbz	r0, 6dae <l2cap_le_conn_req+0x56>
	req = net_buf_add(buf, sizeof(*req));
    6d72:	210a      	movs	r1, #10
    6d74:	3008      	adds	r0, #8
    6d76:	f004 ffef 	bl	bd58 <net_buf_simple_add>
	req->psm = sys_cpu_to_le16(ch->chan.psm);
    6d7a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    6d7c:	f44f 12a0 	mov.w	r2, #1310720	; 0x140000
    6d80:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->rx.cid);
    6d82:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    6d84:	f104 0110 	add.w	r1, r4, #16
    6d88:	8043      	strh	r3, [r0, #2]
	req->mtu = sys_cpu_to_le16(ch->rx.mtu);
    6d8a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    6d8c:	8083      	strh	r3, [r0, #4]
	req->mps = sys_cpu_to_le16(ch->rx.mps);
    6d8e:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    6d92:	80c3      	strh	r3, [r0, #6]
	req->credits = sys_cpu_to_le16(ch->rx.init_credits);
    6d94:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    6d98:	8103      	strh	r3, [r0, #8]
    6d9a:	2300      	movs	r3, #0
    6d9c:	4805      	ldr	r0, [pc, #20]	; (6db4 <l2cap_le_conn_req+0x5c>)
    6d9e:	f008 fff7 	bl	fd90 <k_delayed_work_submit_to_queue>
	bt_l2cap_send(chan->chan.conn, BT_L2CAP_CID_LE_SIG, buf);
    6da2:	6820      	ldr	r0, [r4, #0]
    6da4:	4629      	mov	r1, r5
    6da6:	f00b ff19 	bl	12bdc <bt_l2cap_send.constprop.0>
	return 0;
    6daa:	2000      	movs	r0, #0
}
    6dac:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
    6dae:	f06f 000b 	mvn.w	r0, #11
    6db2:	e7fb      	b.n	6dac <l2cap_le_conn_req+0x54>
    6db4:	20001e54 	.word	0x20001e54

00006db8 <l2cap_chan_send_credits.isra.0>:
static void l2cap_chan_send_credits(struct bt_l2cap_le_chan *chan,
    6db8:	b570      	push	{r4, r5, r6, lr}
    6dba:	f8b0 6042 	ldrh.w	r6, [r0, #66]	; 0x42
    6dbe:	4604      	mov	r4, r0
	if (credits > chan->rx.init_credits) {
    6dc0:	428e      	cmp	r6, r1
    6dc2:	bf28      	it	cs
    6dc4:	460e      	movcs	r6, r1
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CREDITS, get_ident(),
    6dc6:	f7ff fe51 	bl	6a6c <get_ident>
    6dca:	2204      	movs	r2, #4
    6dcc:	4601      	mov	r1, r0
    6dce:	2016      	movs	r0, #22
    6dd0:	f7ff fe82 	bl	6ad8 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    6dd4:	4605      	mov	r5, r0
    6dd6:	2800      	cmp	r0, #0
    6dd8:	d13a      	bne.n	6e50 <l2cap_chan_send_credits.isra.0+0x98>
		BT_ERR("Unable to send credits update");
    6dda:	2145      	movs	r1, #69	; 0x45
    6ddc:	4826      	ldr	r0, [pc, #152]	; (6e78 <l2cap_chan_send_credits.isra.0+0xc0>)
    6dde:	f009 fffd 	bl	10ddc <printk>
	atomic_set_bit(chan->status, BT_L2CAP_STATUS_SHUTDOWN);
    6de2:	f104 0630 	add.w	r6, r4, #48	; 0x30
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6de6:	e8d6 3fef 	ldaex	r3, [r6]
    6dea:	f043 0302 	orr.w	r3, r3, #2
    6dee:	e8c6 3fe2 	stlex	r2, r3, [r6]
    6df2:	2a00      	cmp	r2, #0
    6df4:	d1f7      	bne.n	6de6 <l2cap_chan_send_credits.isra.0+0x2e>
	if (ch->_sdu) {
    6df6:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    6dfa:	b128      	cbz	r0, 6e08 <l2cap_chan_send_credits.isra.0+0x50>
		net_buf_unref(ch->_sdu);
    6dfc:	f004 fe3a 	bl	ba74 <net_buf_unref>
		ch->_sdu = NULL;
    6e00:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
		ch->_sdu_len = 0U;
    6e04:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
	if (ch->tx_buf) {
    6e08:	6f20      	ldr	r0, [r4, #112]	; 0x70
    6e0a:	b118      	cbz	r0, 6e14 <l2cap_chan_send_credits.isra.0+0x5c>
		net_buf_unref(ch->tx_buf);
    6e0c:	f004 fe32 	bl	ba74 <net_buf_unref>
		ch->tx_buf = NULL;
    6e10:	2300      	movs	r3, #0
    6e12:	6723      	str	r3, [r4, #112]	; 0x70
	while ((buf = net_buf_get(&ch->tx_queue, K_NO_WAIT))) {
    6e14:	f104 0554 	add.w	r5, r4, #84	; 0x54
    6e18:	2200      	movs	r2, #0
    6e1a:	2300      	movs	r3, #0
    6e1c:	4628      	mov	r0, r5
    6e1e:	f004 fd97 	bl	b950 <net_buf_get>
    6e22:	b978      	cbnz	r0, 6e44 <l2cap_chan_send_credits.isra.0+0x8c>
	while ((buf = net_buf_get(&ch->rx_queue, K_NO_WAIT))) {
    6e24:	f104 0594 	add.w	r5, r4, #148	; 0x94
    6e28:	2200      	movs	r2, #0
    6e2a:	2300      	movs	r3, #0
    6e2c:	4628      	mov	r0, r5
    6e2e:	f004 fd8f 	bl	b950 <net_buf_get>
    6e32:	b950      	cbnz	r0, 6e4a <l2cap_chan_send_credits.isra.0+0x92>
	if (chan->ops->status) {
    6e34:	6863      	ldr	r3, [r4, #4]
    6e36:	699b      	ldr	r3, [r3, #24]
    6e38:	b1eb      	cbz	r3, 6e76 <l2cap_chan_send_credits.isra.0+0xbe>
		chan->ops->status(chan, chan->status);
    6e3a:	4631      	mov	r1, r6
    6e3c:	4620      	mov	r0, r4
}
    6e3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		chan->ops->status(chan, chan->status);
    6e42:	4718      	bx	r3
		net_buf_unref(buf);
    6e44:	f004 fe16 	bl	ba74 <net_buf_unref>
    6e48:	e7e6      	b.n	6e18 <l2cap_chan_send_credits.isra.0+0x60>
		net_buf_unref(buf);
    6e4a:	f004 fe13 	bl	ba74 <net_buf_unref>
    6e4e:	e7eb      	b.n	6e28 <l2cap_chan_send_credits.isra.0+0x70>
	atomic_add(&chan->rx.credits, credits);
    6e50:	4631      	mov	r1, r6
    6e52:	f104 0044 	add.w	r0, r4, #68	; 0x44
    6e56:	f00b fd6b 	bl	12930 <atomic_add>
	ev = net_buf_add(buf, sizeof(*ev));
    6e5a:	2104      	movs	r1, #4
    6e5c:	f105 0008 	add.w	r0, r5, #8
    6e60:	f004 ff7a 	bl	bd58 <net_buf_simple_add>
	ev->cid = sys_cpu_to_le16(chan->rx.cid);
    6e64:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
	bt_l2cap_send(chan->chan.conn, BT_L2CAP_CID_LE_SIG, buf);
    6e66:	4629      	mov	r1, r5
	ev->credits = sys_cpu_to_le16(credits);
    6e68:	8046      	strh	r6, [r0, #2]
	ev->cid = sys_cpu_to_le16(chan->rx.cid);
    6e6a:	8003      	strh	r3, [r0, #0]
	bt_l2cap_send(chan->chan.conn, BT_L2CAP_CID_LE_SIG, buf);
    6e6c:	6820      	ldr	r0, [r4, #0]
}
    6e6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_send(chan->chan.conn, BT_L2CAP_CID_LE_SIG, buf);
    6e72:	f00b beb3 	b.w	12bdc <bt_l2cap_send.constprop.0>
}
    6e76:	bd70      	pop	{r4, r5, r6, pc}
    6e78:	00018322 	.word	0x00018322

00006e7c <l2cap_chan_add>:
	if (ch->rx.cid > 0) {
    6e7c:	8f8b      	ldrh	r3, [r1, #60]	; 0x3c
{
    6e7e:	b570      	push	{r4, r5, r6, lr}
    6e80:	4605      	mov	r5, r0
    6e82:	460c      	mov	r4, r1
    6e84:	4616      	mov	r6, r2
	if (ch->rx.cid > 0) {
    6e86:	b92b      	cbnz	r3, 6e94 <l2cap_chan_add+0x18>
	for (cid = L2CAP_LE_CID_DYN_START; cid <= L2CAP_LE_CID_DYN_END; cid++) {
    6e88:	2140      	movs	r1, #64	; 0x40
		if (!bt_l2cap_le_lookup_rx_cid(conn, cid)) {
    6e8a:	4628      	mov	r0, r5
    6e8c:	f00b fef0 	bl	12c70 <bt_l2cap_le_lookup_rx_cid>
    6e90:	bb50      	cbnz	r0, 6ee8 <l2cap_chan_add+0x6c>
			ch->rx.cid = cid;
    6e92:	87a1      	strh	r1, [r4, #60]	; 0x3c
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    6e94:	491c      	ldr	r1, [pc, #112]	; (6f08 <l2cap_chan_add+0x8c>)
    6e96:	f104 0010 	add.w	r0, r4, #16
    6e9a:	f00e f95c 	bl	15156 <k_delayed_work_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6e9e:	2200      	movs	r2, #0
    6ea0:	f104 0330 	add.w	r3, r4, #48	; 0x30
    6ea4:	e8d3 1fef 	ldaex	r1, [r3]
    6ea8:	e8c3 2fe0 	stlex	r0, r2, [r3]
    6eac:	2800      	cmp	r0, #0
    6eae:	d1f9      	bne.n	6ea4 <l2cap_chan_add+0x28>
	parent->next = child;
    6eb0:	60a2      	str	r2, [r4, #8]
Z_GENLIST_APPEND(slist, snode)
    6eb2:	6d6a      	ldr	r2, [r5, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
    6eb4:	f104 0308 	add.w	r3, r4, #8
    6eb8:	bb02      	cbnz	r2, 6efc <l2cap_chan_add+0x80>
	list->head = node;
    6eba:	e9c5 3314 	strd	r3, r3, [r5, #80]	; 0x50
	if (L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    6ebe:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
	chan->conn = conn;
    6ec0:	6025      	str	r5, [r4, #0]
	if (L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    6ec2:	3b40      	subs	r3, #64	; 0x40
    6ec4:	b29b      	uxth	r3, r3
    6ec6:	2b3f      	cmp	r3, #63	; 0x3f
	chan->destroy = destroy;
    6ec8:	60e6      	str	r6, [r4, #12]
	if (L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    6eca:	d81a      	bhi.n	6f02 <l2cap_chan_add+0x86>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    6ecc:	2300      	movs	r3, #0
    6ece:	4a0f      	ldr	r2, [pc, #60]	; (6f0c <l2cap_chan_add+0x90>)
    6ed0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    6ed4:	e9c4 2323 	strd	r2, r3, [r4, #140]	; 0x8c
    6ed8:	f104 0094 	add.w	r0, r4, #148	; 0x94
    6edc:	f00e f876 	bl	14fcc <z_impl_k_queue_init>
	chan->state = state;
    6ee0:	2001      	movs	r0, #1
    6ee2:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
    6ee6:	bd70      	pop	{r4, r5, r6, pc}
	for (cid = L2CAP_LE_CID_DYN_START; cid <= L2CAP_LE_CID_DYN_END; cid++) {
    6ee8:	3101      	adds	r1, #1
    6eea:	b289      	uxth	r1, r1
    6eec:	2980      	cmp	r1, #128	; 0x80
    6eee:	d1cc      	bne.n	6e8a <l2cap_chan_add+0xe>
		BT_ERR("Unable to allocate L2CAP CID");
    6ef0:	4807      	ldr	r0, [pc, #28]	; (6f10 <l2cap_chan_add+0x94>)
    6ef2:	2145      	movs	r1, #69	; 0x45
    6ef4:	f009 ff72 	bl	10ddc <printk>
    6ef8:	2000      	movs	r0, #0
    6efa:	e7f4      	b.n	6ee6 <l2cap_chan_add+0x6a>
	parent->next = child;
    6efc:	6013      	str	r3, [r2, #0]
	list->tail = node;
    6efe:	656b      	str	r3, [r5, #84]	; 0x54
}
    6f00:	e7dd      	b.n	6ebe <l2cap_chan_add+0x42>
	return true;
    6f02:	2001      	movs	r0, #1
    6f04:	e7ef      	b.n	6ee6 <l2cap_chan_add+0x6a>
    6f06:	bf00      	nop
    6f08:	00006b85 	.word	0x00006b85
    6f0c:	000071f1 	.word	0x000071f1
    6f10:	00018345 	.word	0x00018345

00006f14 <bt_l2cap_connected>:
{
    6f14:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    6f18:	4e21      	ldr	r6, [pc, #132]	; (6fa0 <bt_l2cap_connected+0x8c>)
{
    6f1a:	4605      	mov	r5, r0
    6f1c:	46b0      	mov	r8, r6
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    6f1e:	4c21      	ldr	r4, [pc, #132]	; (6fa4 <bt_l2cap_connected+0x90>)
    6f20:	4f21      	ldr	r7, [pc, #132]	; (6fa8 <bt_l2cap_connected+0x94>)
    6f22:	42b4      	cmp	r4, r6
    6f24:	d90e      	bls.n	6f44 <bt_l2cap_connected+0x30>
    6f26:	4921      	ldr	r1, [pc, #132]	; (6fac <bt_l2cap_connected+0x98>)
    6f28:	f44f 73ab 	mov.w	r3, #342	; 0x156
    6f2c:	463a      	mov	r2, r7
    6f2e:	4820      	ldr	r0, [pc, #128]	; (6fb0 <bt_l2cap_connected+0x9c>)
    6f30:	f009 ff54 	bl	10ddc <printk>
    6f34:	481f      	ldr	r0, [pc, #124]	; (6fb4 <bt_l2cap_connected+0xa0>)
    6f36:	f009 ff51 	bl	10ddc <printk>
    6f3a:	f44f 71ab 	mov.w	r1, #342	; 0x156
    6f3e:	4638      	mov	r0, r7
    6f40:	f00a f9e2 	bl	11308 <assert_post_action>
    6f44:	4544      	cmp	r4, r8
    6f46:	d302      	bcc.n	6f4e <bt_l2cap_connected+0x3a>
}
    6f48:	b002      	add	sp, #8
    6f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (fchan->accept(conn, &chan) < 0) {
    6f4e:	4628      	mov	r0, r5
    6f50:	6863      	ldr	r3, [r4, #4]
    6f52:	a901      	add	r1, sp, #4
    6f54:	4798      	blx	r3
    6f56:	2800      	cmp	r0, #0
    6f58:	db20      	blt.n	6f9c <bt_l2cap_connected+0x88>
		ch = BT_L2CAP_LE_CHAN(chan);
    6f5a:	9901      	ldr	r1, [sp, #4]
		ch->rx.cid = fchan->cid;
    6f5c:	8823      	ldrh	r3, [r4, #0]
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    6f5e:	4628      	mov	r0, r5
    6f60:	68a2      	ldr	r2, [r4, #8]
		ch->rx.cid = fchan->cid;
    6f62:	878b      	strh	r3, [r1, #60]	; 0x3c
		ch->tx.cid = fchan->cid;
    6f64:	f8a1 3048 	strh.w	r3, [r1, #72]	; 0x48
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    6f68:	f7ff ff88 	bl	6e7c <l2cap_chan_add>
    6f6c:	2800      	cmp	r0, #0
    6f6e:	d0eb      	beq.n	6f48 <bt_l2cap_connected+0x34>
		if (chan->ops->connected) {
    6f70:	9801      	ldr	r0, [sp, #4]
    6f72:	6843      	ldr	r3, [r0, #4]
    6f74:	681b      	ldr	r3, [r3, #0]
    6f76:	b103      	cbz	r3, 6f7a <bt_l2cap_connected+0x66>
			chan->ops->connected(chan);
    6f78:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6f7a:	9b01      	ldr	r3, [sp, #4]
    6f7c:	3330      	adds	r3, #48	; 0x30
    6f7e:	e8d3 2fef 	ldaex	r2, [r3]
    6f82:	f042 0201 	orr.w	r2, r2, #1
    6f86:	e8c3 2fe1 	stlex	r1, r2, [r3]
    6f8a:	2900      	cmp	r1, #0
    6f8c:	d1f7      	bne.n	6f7e <bt_l2cap_connected+0x6a>
		if (chan->ops->status) {
    6f8e:	9801      	ldr	r0, [sp, #4]
    6f90:	6843      	ldr	r3, [r0, #4]
    6f92:	699b      	ldr	r3, [r3, #24]
    6f94:	b113      	cbz	r3, 6f9c <bt_l2cap_connected+0x88>
			chan->ops->status(chan, chan->status);
    6f96:	f100 0130 	add.w	r1, r0, #48	; 0x30
    6f9a:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    6f9c:	340c      	adds	r4, #12
    6f9e:	e7c0      	b.n	6f22 <bt_l2cap_connected+0xe>
    6fa0:	00015548 	.word	0x00015548
    6fa4:	00015524 	.word	0x00015524
    6fa8:	00018367 	.word	0x00018367
    6fac:	00018398 	.word	0x00018398
    6fb0:	00016493 	.word	0x00016493
    6fb4:	000164b0 	.word	0x000164b0

00006fb8 <bt_l2cap_recv>:
{
    6fb8:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
    6fba:	898b      	ldrh	r3, [r1, #12]
{
    6fbc:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
    6fbe:	2b03      	cmp	r3, #3
{
    6fc0:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    6fc2:	d804      	bhi.n	6fce <bt_l2cap_recv+0x16>
		BT_ERR("Too small L2CAP PDU received");
    6fc4:	2145      	movs	r1, #69	; 0x45
    6fc6:	481e      	ldr	r0, [pc, #120]	; (7040 <bt_l2cap_recv+0x88>)
		BT_WARN("Ignoring data received while channel has shutdown");
    6fc8:	f009 ff08 	bl	10ddc <printk>
		net_buf_unref(buf);
    6fcc:	e00f      	b.n	6fee <bt_l2cap_recv+0x36>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    6fce:	2104      	movs	r1, #4
    6fd0:	f104 0008 	add.w	r0, r4, #8
    6fd4:	f004 fe9e 	bl	bd14 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
    6fd8:	8842      	ldrh	r2, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    6fda:	4628      	mov	r0, r5
    6fdc:	4611      	mov	r1, r2
    6fde:	f00b fe47 	bl	12c70 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    6fe2:	4605      	mov	r5, r0
    6fe4:	b940      	cbnz	r0, 6ff8 <bt_l2cap_recv+0x40>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    6fe6:	2157      	movs	r1, #87	; 0x57
    6fe8:	4816      	ldr	r0, [pc, #88]	; (7044 <bt_l2cap_recv+0x8c>)
    6fea:	f009 fef7 	bl	10ddc <printk>
	net_buf_unref(buf);
    6fee:	4620      	mov	r0, r4
}
    6ff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
    6ff4:	f004 bd3e 	b.w	ba74 <net_buf_unref>
	if (L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    6ff8:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    6ffa:	3b40      	subs	r3, #64	; 0x40
    6ffc:	b29b      	uxth	r3, r3
    6ffe:	2b3f      	cmp	r3, #63	; 0x3f
    7000:	d819      	bhi.n	7036 <bt_l2cap_recv+0x7e>
	if (chan->chan.state == BT_L2CAP_DISCONNECT) {
    7002:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
    7006:	2b04      	cmp	r3, #4
    7008:	d102      	bne.n	7010 <bt_l2cap_recv+0x58>
		BT_WARN("Ignoring data received while disconnecting");
    700a:	2157      	movs	r1, #87	; 0x57
    700c:	480e      	ldr	r0, [pc, #56]	; (7048 <bt_l2cap_recv+0x90>)
    700e:	e7db      	b.n	6fc8 <bt_l2cap_recv+0x10>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    7010:	3030      	adds	r0, #48	; 0x30
    7012:	f00b fc8a 	bl	1292a <atomic_get>
	if (atomic_test_bit(chan->chan.status, BT_L2CAP_STATUS_SHUTDOWN)) {
    7016:	0783      	lsls	r3, r0, #30
    7018:	d502      	bpl.n	7020 <bt_l2cap_recv+0x68>
		BT_WARN("Ignoring data received while channel has shutdown");
    701a:	2157      	movs	r1, #87	; 0x57
    701c:	480b      	ldr	r0, [pc, #44]	; (704c <bt_l2cap_recv+0x94>)
    701e:	e7d3      	b.n	6fc8 <bt_l2cap_recv+0x10>
	net_buf_put(&chan->rx_queue, buf);
    7020:	f105 0094 	add.w	r0, r5, #148	; 0x94
    7024:	4621      	mov	r1, r4
    7026:	f004 fcf1 	bl	ba0c <net_buf_put>
	k_work_submit_to_queue(&k_sys_work_q, work);
    702a:	f105 0088 	add.w	r0, r5, #136	; 0x88
}
    702e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    7032:	f7ff bd93 	b.w	6b5c <k_work_submit_to_queue.constprop.0>
	chan->ops->recv(chan, buf);
    7036:	6843      	ldr	r3, [r0, #4]
    7038:	4621      	mov	r1, r4
    703a:	691b      	ldr	r3, [r3, #16]
    703c:	4798      	blx	r3
    703e:	e7d6      	b.n	6fee <bt_l2cap_recv+0x36>
    7040:	000183bf 	.word	0x000183bf
    7044:	000183e1 	.word	0x000183e1
    7048:	0001840b 	.word	0x0001840b
    704c:	0001843b 	.word	0x0001843b

00007050 <bt_l2cap_chan_disconnect>:

	return l2cap_le_connect(conn, BT_L2CAP_LE_CHAN(chan), psm);
}

int bt_l2cap_chan_disconnect(struct bt_l2cap_chan *chan)
{
    7050:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->conn;
	struct net_buf *buf;
	struct bt_l2cap_disconn_req *req;
	struct bt_l2cap_le_chan *ch;

	if (!conn) {
    7052:	6803      	ldr	r3, [r0, #0]
{
    7054:	4604      	mov	r4, r0
	if (!conn) {
    7056:	b323      	cbz	r3, 70a2 <bt_l2cap_chan_disconnect+0x52>
	ch = BT_L2CAP_LE_CHAN(chan);

	BT_DBG("chan %p scid 0x%04x dcid 0x%04x", chan, ch->rx.cid,
	       ch->tx.cid);

	ch->chan.ident = get_ident();
    7058:	f7ff fd08 	bl	6a6c <get_ident>

	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_DISCONN_REQ,
    705c:	2204      	movs	r2, #4
	ch->chan.ident = get_ident();
    705e:	4601      	mov	r1, r0
    7060:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_DISCONN_REQ,
    7064:	2006      	movs	r0, #6
    7066:	f7ff fd37 	bl	6ad8 <l2cap_create_le_sig_pdu.isra.0>
				      ch->chan.ident, sizeof(*req));
	if (!buf) {
    706a:	4605      	mov	r5, r0
    706c:	b1e0      	cbz	r0, 70a8 <bt_l2cap_chan_disconnect+0x58>
		return -ENOMEM;
	}

	req = net_buf_add(buf, sizeof(*req));
    706e:	2104      	movs	r1, #4
    7070:	3008      	adds	r0, #8
    7072:	f004 fe71 	bl	bd58 <net_buf_simple_add>
	req->dcid = sys_cpu_to_le16(ch->rx.cid);
    7076:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    7078:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    707c:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->tx.cid);
    707e:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    7082:	f104 0110 	add.w	r1, r4, #16
    7086:	8043      	strh	r3, [r0, #2]
    7088:	2300      	movs	r3, #0
    708a:	4809      	ldr	r0, [pc, #36]	; (70b0 <bt_l2cap_chan_disconnect+0x60>)
    708c:	f008 fe80 	bl	fd90 <k_delayed_work_submit_to_queue>
	bt_l2cap_send(chan->chan.conn, BT_L2CAP_CID_LE_SIG, buf);
    7090:	6820      	ldr	r0, [r4, #0]
    7092:	4629      	mov	r1, r5
    7094:	f00b fda2 	bl	12bdc <bt_l2cap_send.constprop.0>
	chan->state = state;
    7098:	2304      	movs	r3, #4

	l2cap_chan_send_req(ch, buf, L2CAP_DISC_TIMEOUT);
	bt_l2cap_chan_set_state(chan, BT_L2CAP_DISCONNECT);

	return 0;
    709a:	2000      	movs	r0, #0
	chan->state = state;
    709c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
    70a0:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTCONN;
    70a2:	f06f 0038 	mvn.w	r0, #56	; 0x38
    70a6:	e7fb      	b.n	70a0 <bt_l2cap_chan_disconnect+0x50>
		return -ENOMEM;
    70a8:	f06f 000b 	mvn.w	r0, #11
    70ac:	e7f8      	b.n	70a0 <bt_l2cap_chan_disconnect+0x50>
    70ae:	bf00      	nop
    70b0:	20001e54 	.word	0x20001e54

000070b4 <l2cap_chan_le_recv_seg>:
	u16_t seg = 0U;
    70b4:	2300      	movs	r3, #0
{
    70b6:	b570      	push	{r4, r5, r6, lr}
    70b8:	460d      	mov	r5, r1
	len = net_buf_frags_len(chan->_sdu);
    70ba:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
{
    70be:	b086      	sub	sp, #24
    70c0:	4604      	mov	r4, r0
	len = net_buf_frags_len(chan->_sdu);
    70c2:	4608      	mov	r0, r1
	u16_t seg = 0U;
    70c4:	f8ad 3016 	strh.w	r3, [sp, #22]
	len = net_buf_frags_len(chan->_sdu);
    70c8:	f00b fbe5 	bl	12896 <net_buf_frags_len>
	if (len) {
    70cc:	b283      	uxth	r3, r0
	len = net_buf_frags_len(chan->_sdu);
    70ce:	4606      	mov	r6, r0
	if (len) {
    70d0:	b12b      	cbz	r3, 70de <l2cap_chan_le_recv_seg+0x2a>
		memcpy(&seg, net_buf_user_data(chan->_sdu), sizeof(seg));
    70d2:	2202      	movs	r2, #2
    70d4:	3114      	adds	r1, #20
    70d6:	f10d 0016 	add.w	r0, sp, #22
    70da:	f00b f840 	bl	1215e <memcpy>
	if (len + buf->len > chan->_sdu_len) {
    70de:	89a8      	ldrh	r0, [r5, #12]
    70e0:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
    70e4:	fa10 f686 	uxtah	r6, r0, r6
    70e8:	429e      	cmp	r6, r3
    70ea:	dd08      	ble.n	70fe <l2cap_chan_le_recv_seg+0x4a>
		BT_ERR("SDU length mismatch");
    70ec:	2145      	movs	r1, #69	; 0x45
    70ee:	483c      	ldr	r0, [pc, #240]	; (71e0 <l2cap_chan_le_recv_seg+0x12c>)
		BT_ERR("Unable to store SDU");
    70f0:	f009 fe74 	bl	10ddc <printk>
		bt_l2cap_chan_disconnect(&chan->chan);
    70f4:	4620      	mov	r0, r4
    70f6:	f7ff ffab 	bl	7050 <bt_l2cap_chan_disconnect>
}
    70fa:	b006      	add	sp, #24
    70fc:	bd70      	pop	{r4, r5, r6, pc}
	seg++;
    70fe:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 *
 * @return Pointer to the user data of the buffer.
 */
static inline void *net_buf_user_data(const struct net_buf *buf)
{
	return (void *)buf->user_data;
    7102:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    7106:	3301      	adds	r3, #1
	memcpy(net_buf_user_data(chan->_sdu), &seg, sizeof(seg));
    7108:	2202      	movs	r2, #2
    710a:	f10d 0116 	add.w	r1, sp, #22
    710e:	3014      	adds	r0, #20
	seg++;
    7110:	f8ad 3016 	strh.w	r3, [sp, #22]
	memcpy(net_buf_user_data(chan->_sdu), &seg, sizeof(seg));
    7114:	f00b f823 	bl	1215e <memcpy>
	len = net_buf_append_bytes(chan->_sdu, buf->len, buf->data, K_NO_WAIT,
    7118:	4b32      	ldr	r3, [pc, #200]	; (71e4 <l2cap_chan_le_recv_seg+0x130>)
    711a:	2200      	movs	r2, #0
    711c:	9302      	str	r3, [sp, #8]
    711e:	2300      	movs	r3, #0
    7120:	e9cd 2300 	strd	r2, r3, [sp]
    7124:	9403      	str	r4, [sp, #12]
    7126:	68aa      	ldr	r2, [r5, #8]
    7128:	89a9      	ldrh	r1, [r5, #12]
    712a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    712e:	f00c ff95 	bl	1405c <net_buf_append_bytes>
	if (len != buf->len) {
    7132:	89ab      	ldrh	r3, [r5, #12]
    7134:	b280      	uxth	r0, r0
    7136:	4283      	cmp	r3, r0
    7138:	d002      	beq.n	7140 <l2cap_chan_le_recv_seg+0x8c>
		BT_ERR("Unable to store SDU");
    713a:	2145      	movs	r1, #69	; 0x45
    713c:	482a      	ldr	r0, [pc, #168]	; (71e8 <l2cap_chan_le_recv_seg+0x134>)
    713e:	e7d7      	b.n	70f0 <l2cap_chan_le_recv_seg+0x3c>
	if (net_buf_frags_len(chan->_sdu) < chan->_sdu_len) {
    7140:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
    7144:	4630      	mov	r0, r6
    7146:	f00b fba6 	bl	12896 <net_buf_frags_len>
    714a:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
    714e:	4298      	cmp	r0, r3
    7150:	d225      	bcs.n	719e <l2cap_chan_le_recv_seg+0xea>
		if (!atomic_get(&chan->rx.credits) &&
    7152:	f104 0344 	add.w	r3, r4, #68	; 0x44
    7156:	4618      	mov	r0, r3
    7158:	f00b fbe7 	bl	1292a <atomic_get>
    715c:	2800      	cmp	r0, #0
    715e:	d1cc      	bne.n	70fa <l2cap_chan_le_recv_seg+0x46>
    7160:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
    7164:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    7168:	4291      	cmp	r1, r2
    716a:	d1c6      	bne.n	70fa <l2cap_chan_le_recv_seg+0x46>
	atomic_val_t old_credits = atomic_get(&chan->rx.credits);
    716c:	4618      	mov	r0, r3
    716e:	f00b fbdc 	bl	1292a <atomic_get>
    7172:	4606      	mov	r6, r0
	credits = ((chan->_sdu_len - net_buf_frags_len(buf)) +
    7174:	4628      	mov	r0, r5
    7176:	f00b fb8e 	bl	12896 <net_buf_frags_len>
    717a:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
    717e:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
    7182:	440b      	add	r3, r1
    7184:	3b01      	subs	r3, #1
    7186:	1a1b      	subs	r3, r3, r0
		   (chan->rx.mps - 1)) / chan->rx.mps;
    7188:	fbb3 f1f1 	udiv	r1, r3, r1
	if (credits < old_credits) {
    718c:	b28b      	uxth	r3, r1
    718e:	429e      	cmp	r6, r3
    7190:	dcb3      	bgt.n	70fa <l2cap_chan_le_recv_seg+0x46>
	credits -= old_credits;
    7192:	1b89      	subs	r1, r1, r6
	l2cap_chan_send_credits(chan, buf, credits);
    7194:	4620      	mov	r0, r4
    7196:	b289      	uxth	r1, r1
    7198:	f7ff fe0e 	bl	6db8 <l2cap_chan_send_credits.isra.0>
    719c:	e7ad      	b.n	70fa <l2cap_chan_le_recv_seg+0x46>
	chan->_sdu = NULL;
    719e:	2300      	movs	r3, #0
    71a0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	chan->_sdu_len = 0U;
    71a4:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
	err = chan->chan.ops->recv(&chan->chan, buf);
    71a8:	6863      	ldr	r3, [r4, #4]
    71aa:	4631      	mov	r1, r6
    71ac:	4620      	mov	r0, r4
    71ae:	691b      	ldr	r3, [r3, #16]
	l2cap_chan_le_recv_sdu(chan, buf, seg);
    71b0:	f8bd 5016 	ldrh.w	r5, [sp, #22]
	err = chan->chan.ops->recv(&chan->chan, buf);
    71b4:	4798      	blx	r3
	if (err < 0) {
    71b6:	1e02      	subs	r2, r0, #0
    71b8:	da0d      	bge.n	71d6 <l2cap_chan_le_recv_seg+0x122>
		if (err != -EINPROGRESS) {
    71ba:	f112 0f44 	cmn.w	r2, #68	; 0x44
    71be:	d09c      	beq.n	70fa <l2cap_chan_le_recv_seg+0x46>
			BT_ERR("err %d", err);
    71c0:	480a      	ldr	r0, [pc, #40]	; (71ec <l2cap_chan_le_recv_seg+0x138>)
    71c2:	2145      	movs	r1, #69	; 0x45
    71c4:	f009 fe0a 	bl	10ddc <printk>
			bt_l2cap_chan_disconnect(&chan->chan);
    71c8:	4620      	mov	r0, r4
    71ca:	f7ff ff41 	bl	7050 <bt_l2cap_chan_disconnect>
	net_buf_unref(buf);
    71ce:	4630      	mov	r0, r6
    71d0:	f004 fc50 	bl	ba74 <net_buf_unref>
    71d4:	e791      	b.n	70fa <l2cap_chan_le_recv_seg+0x46>
	l2cap_chan_send_credits(chan, buf, seg);
    71d6:	4629      	mov	r1, r5
    71d8:	4620      	mov	r0, r4
    71da:	f7ff fded 	bl	6db8 <l2cap_chan_send_credits.isra.0>
    71de:	e7f6      	b.n	71ce <l2cap_chan_le_recv_seg+0x11a>
    71e0:	00018472 	.word	0x00018472
    71e4:	00012921 	.word	0x00012921
    71e8:	0001848b 	.word	0x0001848b
    71ec:	000184a4 	.word	0x000184a4

000071f0 <l2cap_rx_process>:
{
    71f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    71f4:	4604      	mov	r4, r0
		BT_ERR("No credits to receive packet");
    71f6:	4f31      	ldr	r7, [pc, #196]	; (72bc <l2cap_rx_process+0xcc>)
			BT_ERR("err %d", err);
    71f8:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 72c4 <l2cap_rx_process+0xd4>
			BT_ERR("Unable to allocate buffer for SDU");
    71fc:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 72c8 <l2cap_rx_process+0xd8>
	struct bt_l2cap_le_chan *ch = CHAN_RX(work);
    7200:	f1a0 0588 	sub.w	r5, r0, #136	; 0x88
	while ((buf = net_buf_get(&ch->rx_queue, K_NO_WAIT))) {
    7204:	2200      	movs	r2, #0
    7206:	2300      	movs	r3, #0
    7208:	f104 000c 	add.w	r0, r4, #12
    720c:	f004 fba0 	bl	b950 <net_buf_get>
    7210:	4606      	mov	r6, r0
    7212:	b908      	cbnz	r0, 7218 <l2cap_rx_process+0x28>
}
    7214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!test_and_dec(&chan->rx.credits)) {
    7218:	f1a4 0344 	sub.w	r3, r4, #68	; 0x44
		old_value = atomic_get(target);
    721c:	4618      	mov	r0, r3
    721e:	f00b fb84 	bl	1292a <atomic_get>
		if (!old_value) {
    7222:	2800      	cmp	r0, #0
    7224:	d047      	beq.n	72b6 <l2cap_rx_process+0xc6>
		new_value = old_value - 1;
    7226:	1e42      	subs	r2, r0, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    7228:	e8d3 1fef 	ldaex	r1, [r3]
    722c:	4281      	cmp	r1, r0
    722e:	d104      	bne.n	723a <l2cap_rx_process+0x4a>
    7230:	e8c3 2fec 	stlex	ip, r2, [r3]
    7234:	f1bc 0f00 	cmp.w	ip, #0
    7238:	d1f6      	bne.n	7228 <l2cap_rx_process+0x38>
	} while (atomic_cas(target, old_value, new_value) == 0);
    723a:	d1ef      	bne.n	721c <l2cap_rx_process+0x2c>
	if (chan->_sdu) {
    723c:	f854 3c08 	ldr.w	r3, [r4, #-8]
    7240:	b9db      	cbnz	r3, 727a <l2cap_rx_process+0x8a>
	sdu_len = net_buf_pull_le16(buf);
    7242:	f106 0008 	add.w	r0, r6, #8
    7246:	f00c fed9 	bl	13ffc <net_buf_simple_pull_le16>
	if (sdu_len > chan->rx.mtu) {
    724a:	f834 3c4a 	ldrh.w	r3, [r4, #-74]
	sdu_len = net_buf_pull_le16(buf);
    724e:	4682      	mov	sl, r0
	if (sdu_len > chan->rx.mtu) {
    7250:	4283      	cmp	r3, r0
    7252:	d204      	bcs.n	725e <l2cap_rx_process+0x6e>
		BT_ERR("Invalid SDU length");
    7254:	2145      	movs	r1, #69	; 0x45
    7256:	481a      	ldr	r0, [pc, #104]	; (72c0 <l2cap_rx_process+0xd0>)
		BT_ERR("No credits to receive packet");
    7258:	f009 fdc0 	bl	10ddc <printk>
    725c:	e022      	b.n	72a4 <l2cap_rx_process+0xb4>
	if (chan->chan.ops->alloc_buf) {
    725e:	f854 3c84 	ldr.w	r3, [r4, #-132]
    7262:	68da      	ldr	r2, [r3, #12]
    7264:	b18a      	cbz	r2, 728a <l2cap_rx_process+0x9a>
		chan->_sdu = chan->chan.ops->alloc_buf(&chan->chan);
    7266:	4628      	mov	r0, r5
    7268:	4790      	blx	r2
    726a:	f844 0c08 	str.w	r0, [r4, #-8]
		if (!chan->_sdu) {
    726e:	b910      	cbnz	r0, 7276 <l2cap_rx_process+0x86>
			BT_ERR("Unable to allocate buffer for SDU");
    7270:	2145      	movs	r1, #69	; 0x45
    7272:	4648      	mov	r0, r9
    7274:	e7f0      	b.n	7258 <l2cap_rx_process+0x68>
		chan->_sdu_len = sdu_len;
    7276:	f824 ac04 	strh.w	sl, [r4, #-4]
		l2cap_chan_le_recv_seg(chan, buf);
    727a:	4631      	mov	r1, r6
    727c:	4628      	mov	r0, r5
    727e:	f7ff ff19 	bl	70b4 <l2cap_chan_le_recv_seg>
		net_buf_unref(buf);
    7282:	4630      	mov	r0, r6
    7284:	f004 fbf6 	bl	ba74 <net_buf_unref>
    7288:	e7bc      	b.n	7204 <l2cap_rx_process+0x14>
	err = chan->chan.ops->recv(&chan->chan, buf);
    728a:	4631      	mov	r1, r6
    728c:	4628      	mov	r0, r5
    728e:	691b      	ldr	r3, [r3, #16]
    7290:	4798      	blx	r3
	if (err) {
    7292:	4602      	mov	r2, r0
    7294:	b150      	cbz	r0, 72ac <l2cap_rx_process+0xbc>
		if (err != -EINPROGRESS) {
    7296:	f110 0f44 	cmn.w	r0, #68	; 0x44
    729a:	d0f2      	beq.n	7282 <l2cap_rx_process+0x92>
			BT_ERR("err %d", err);
    729c:	2145      	movs	r1, #69	; 0x45
    729e:	4640      	mov	r0, r8
    72a0:	f009 fd9c 	bl	10ddc <printk>
		bt_l2cap_chan_disconnect(&chan->chan);
    72a4:	4628      	mov	r0, r5
    72a6:	f7ff fed3 	bl	7050 <bt_l2cap_chan_disconnect>
		return;
    72aa:	e7ea      	b.n	7282 <l2cap_rx_process+0x92>
	l2cap_chan_send_credits(chan, buf, 1);
    72ac:	2101      	movs	r1, #1
    72ae:	4628      	mov	r0, r5
    72b0:	f7ff fd82 	bl	6db8 <l2cap_chan_send_credits.isra.0>
    72b4:	e7e5      	b.n	7282 <l2cap_rx_process+0x92>
		BT_ERR("No credits to receive packet");
    72b6:	2145      	movs	r1, #69	; 0x45
    72b8:	4638      	mov	r0, r7
    72ba:	e7cd      	b.n	7258 <l2cap_rx_process+0x68>
    72bc:	000184ef 	.word	0x000184ef
    72c0:	000184b0 	.word	0x000184b0
    72c4:	000184a4 	.word	0x000184a4
    72c8:	000184c8 	.word	0x000184c8

000072cc <l2cap_recv>:
{
    72cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buf->len < sizeof(*hdr)) {
    72d0:	898b      	ldrh	r3, [r1, #12]
{
    72d2:	4680      	mov	r8, r0
	if (buf->len < sizeof(*hdr)) {
    72d4:	2b03      	cmp	r3, #3
{
    72d6:	460c      	mov	r4, r1
    72d8:	b085      	sub	sp, #20
	if (buf->len < sizeof(*hdr)) {
    72da:	d804      	bhi.n	72e6 <l2cap_recv+0x1a>
		BT_ERR("Too small L2CAP signaling PDU");
    72dc:	2145      	movs	r1, #69	; 0x45
    72de:	48ad      	ldr	r0, [pc, #692]	; (7594 <l2cap_recv+0x2c8>)
		BT_ERR("Too small LE Credits packet size");
    72e0:	f009 fd7c 	bl	10ddc <printk>
		return;
    72e4:	e00e      	b.n	7304 <l2cap_recv+0x38>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    72e6:	2104      	movs	r1, #4
    72e8:	f104 0008 	add.w	r0, r4, #8
    72ec:	f004 fd12 	bl	bd14 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    72f0:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    72f2:	8843      	ldrh	r3, [r0, #2]
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    72f4:	4606      	mov	r6, r0
	if (buf->len != len) {
    72f6:	428b      	cmp	r3, r1
    72f8:	d008      	beq.n	730c <l2cap_recv+0x40>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    72fa:	460a      	mov	r2, r1
    72fc:	48a6      	ldr	r0, [pc, #664]	; (7598 <l2cap_recv+0x2cc>)
    72fe:	2145      	movs	r1, #69	; 0x45
    7300:	f009 fd6c 	bl	10ddc <printk>
}
    7304:	2000      	movs	r0, #0
    7306:	b005      	add	sp, #20
    7308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!hdr->ident) {
    730c:	7845      	ldrb	r5, [r0, #1]
    730e:	b915      	cbnz	r5, 7316 <l2cap_recv+0x4a>
		BT_ERR("Invalid ident value in L2CAP PDU");
    7310:	2145      	movs	r1, #69	; 0x45
    7312:	48a2      	ldr	r0, [pc, #648]	; (759c <l2cap_recv+0x2d0>)
    7314:	e7e4      	b.n	72e0 <l2cap_recv+0x14>
	switch (hdr->code) {
    7316:	7802      	ldrb	r2, [r0, #0]
    7318:	2a01      	cmp	r2, #1
    731a:	f000 81ca 	beq.w	76b2 <l2cap_recv+0x3e6>
    731e:	1f93      	subs	r3, r2, #6
    7320:	b2d8      	uxtb	r0, r3
    7322:	2810      	cmp	r0, #16
    7324:	f200 81cb 	bhi.w	76be <l2cap_recv+0x3f2>
    7328:	2b10      	cmp	r3, #16
    732a:	f200 81c8 	bhi.w	76be <l2cap_recv+0x3f2>
    732e:	e8df f013 	tbh	[pc, r3, lsl #1]
    7332:	0143      	.short	0x0143
    7334:	01c6018b 	.word	0x01c6018b
    7338:	01c601c6 	.word	0x01c601c6
    733c:	01c601c6 	.word	0x01c601c6
    7340:	01c601c6 	.word	0x01c601c6
    7344:	01c601c6 	.word	0x01c601c6
    7348:	01c601c6 	.word	0x01c601c6
    734c:	00160011 	.word	0x00160011
    7350:	019900c5 	.word	0x019900c5
	if (buf->len < sizeof(*rsp)) {
    7354:	2901      	cmp	r1, #1
    7356:	d8d5      	bhi.n	7304 <l2cap_recv+0x38>
		BT_ERR("Too small LE conn param rsp");
    7358:	2145      	movs	r1, #69	; 0x45
    735a:	4891      	ldr	r0, [pc, #580]	; (75a0 <l2cap_recv+0x2d4>)
    735c:	e7c0      	b.n	72e0 <l2cap_recv+0x14>
	if (buf->len < sizeof(*req)) {
    735e:	2909      	cmp	r1, #9
    7360:	d802      	bhi.n	7368 <l2cap_recv+0x9c>
		BT_ERR("Too small LE conn req packet size");
    7362:	2145      	movs	r1, #69	; 0x45
    7364:	488f      	ldr	r0, [pc, #572]	; (75a4 <l2cap_recv+0x2d8>)
    7366:	e7bb      	b.n	72e0 <l2cap_recv+0x14>
	struct bt_l2cap_le_conn_req *req = (void *)buf->data;
    7368:	68a3      	ldr	r3, [r4, #8]
	mtu = sys_le16_to_cpu(req->mtu);
    736a:	889e      	ldrh	r6, [r3, #4]
    736c:	b2b2      	uxth	r2, r6
	if (mtu < L2CAP_LE_MIN_MTU || mps < L2CAP_LE_MIN_MTU) {
    736e:	2a16      	cmp	r2, #22
    7370:	d903      	bls.n	737a <l2cap_recv+0xae>
	mps = sys_le16_to_cpu(req->mps);
    7372:	88df      	ldrh	r7, [r3, #6]
    7374:	b2ba      	uxth	r2, r7
	if (mtu < L2CAP_LE_MIN_MTU || mps < L2CAP_LE_MIN_MTU) {
    7376:	2a16      	cmp	r2, #22
    7378:	d802      	bhi.n	7380 <l2cap_recv+0xb4>
		BT_ERR("Invalid LE-Conn Req params");
    737a:	2145      	movs	r1, #69	; 0x45
    737c:	488a      	ldr	r0, [pc, #552]	; (75a8 <l2cap_recv+0x2dc>)
    737e:	e7af      	b.n	72e0 <l2cap_recv+0x14>
		le_conn_req(l2cap, hdr->ident, buf);
    7380:	f8d8 4000 	ldr.w	r4, [r8]
	psm = sys_le16_to_cpu(req->psm);
    7384:	f8b3 b000 	ldrh.w	fp, [r3]
	scid = sys_le16_to_cpu(req->scid);
    7388:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	credits = sys_le16_to_cpu(req->credits);
    738c:	891b      	ldrh	r3, [r3, #8]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    738e:	4629      	mov	r1, r5
	credits = sys_le16_to_cpu(req->credits);
    7390:	f8ad 3000 	strh.w	r3, [sp]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    7394:	220a      	movs	r2, #10
	credits = sys_le16_to_cpu(req->credits);
    7396:	b29b      	uxth	r3, r3
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    7398:	2015      	movs	r0, #21
	credits = sys_le16_to_cpu(req->credits);
    739a:	9301      	str	r3, [sp, #4]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    739c:	f7ff fb9c 	bl	6ad8 <l2cap_create_le_sig_pdu.isra.0>
	scid = sys_le16_to_cpu(req->scid);
    73a0:	fa1f f988 	uxth.w	r9, r8
	if (!buf) {
    73a4:	4605      	mov	r5, r0
    73a6:	2800      	cmp	r0, #0
    73a8:	d0ac      	beq.n	7304 <l2cap_recv+0x38>
	rsp = net_buf_add(buf, sizeof(*rsp));
    73aa:	210a      	movs	r1, #10
    73ac:	3008      	adds	r0, #8
    73ae:	f004 fcd3 	bl	bd58 <net_buf_simple_add>
	(void)memset(rsp, 0, sizeof(*rsp));
    73b2:	220a      	movs	r2, #10
    73b4:	2100      	movs	r1, #0
	rsp = net_buf_add(buf, sizeof(*rsp));
    73b6:	4682      	mov	sl, r0
	(void)memset(rsp, 0, sizeof(*rsp));
    73b8:	f00a fefc 	bl	121b4 <memset>
	server = l2cap_server_lookup_psm(psm);
    73bc:	4658      	mov	r0, fp
    73be:	f7ff fb61 	bl	6a84 <l2cap_server_lookup_psm>
	if (!server) {
    73c2:	4683      	mov	fp, r0
    73c4:	b908      	cbnz	r0, 73ca <l2cap_recv+0xfe>
		return BT_L2CAP_LE_ERR_PSM_NOT_SUPP;
    73c6:	2202      	movs	r2, #2
    73c8:	e004      	b.n	73d4 <l2cap_recv+0x108>
	if (conn->sec_level < server->sec_level) {
    73ca:	7a61      	ldrb	r1, [r4, #9]
    73cc:	7882      	ldrb	r2, [r0, #2]
    73ce:	4291      	cmp	r1, r2
    73d0:	d207      	bcs.n	73e2 <l2cap_recv+0x116>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_LE_ERR_AUTHENTICATION);
    73d2:	2205      	movs	r2, #5
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
    73d4:	4629      	mov	r1, r5
    73d6:	4620      	mov	r0, r4
		rsp->result = sys_cpu_to_le16(BT_L2CAP_LE_ERR_NO_RESOURCES);
    73d8:	f8aa 2008 	strh.w	r2, [sl, #8]
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
    73dc:	f00b fbfe 	bl	12bdc <bt_l2cap_send.constprop.0>
    73e0:	e790      	b.n	7304 <l2cap_recv+0x38>
	if (!L2CAP_LE_CID_IS_DYN(scid)) {
    73e2:	f1a9 0240 	sub.w	r2, r9, #64	; 0x40
    73e6:	2a3f      	cmp	r2, #63	; 0x3f
    73e8:	d901      	bls.n	73ee <l2cap_recv+0x122>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_LE_ERR_INVALID_SCID);
    73ea:	2209      	movs	r2, #9
    73ec:	e7f2      	b.n	73d4 <l2cap_recv+0x108>
	chan = bt_l2cap_le_lookup_tx_cid(conn, scid);
    73ee:	4649      	mov	r1, r9
    73f0:	4620      	mov	r0, r4
    73f2:	f00b fc2d 	bl	12c50 <bt_l2cap_le_lookup_tx_cid>
    73f6:	9003      	str	r0, [sp, #12]
	if (chan) {
    73f8:	b108      	cbz	r0, 73fe <l2cap_recv+0x132>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_LE_ERR_SCID_IN_USE);
    73fa:	220a      	movs	r2, #10
    73fc:	e7ea      	b.n	73d4 <l2cap_recv+0x108>
	err = server->accept(conn, &chan);
    73fe:	4620      	mov	r0, r4
    7400:	f8db 2004 	ldr.w	r2, [fp, #4]
    7404:	a903      	add	r1, sp, #12
    7406:	4790      	blx	r2
	if (err < 0) {
    7408:	2800      	cmp	r0, #0
    740a:	da12      	bge.n	7432 <l2cap_recv+0x166>
	switch (err) {
    740c:	f110 0f0c 	cmn.w	r0, #12
    7410:	d052      	beq.n	74b8 <l2cap_recv+0x1ec>
    7412:	f110 0f0b 	cmn.w	r0, #11
    7416:	da07      	bge.n	7428 <l2cap_recv+0x15c>
    7418:	f110 0f23 	cmn.w	r0, #35	; 0x23
    741c:	d0d3      	beq.n	73c6 <l2cap_recv+0xfa>
    741e:	300d      	adds	r0, #13
    7420:	bf14      	ite	ne
    7422:	220b      	movne	r2, #11
    7424:	2206      	moveq	r2, #6
    7426:	e7d5      	b.n	73d4 <l2cap_recv+0x108>
		return BT_L2CAP_LE_ERR_KEY_SIZE;
    7428:	3001      	adds	r0, #1
    742a:	bf14      	ite	ne
    742c:	220b      	movne	r2, #11
    742e:	2207      	moveq	r2, #7
    7430:	e7d0      	b.n	73d4 <l2cap_recv+0x108>
	chan->required_sec_level = server->sec_level;
    7432:	f89b 2002 	ldrb.w	r2, [fp, #2]
    7436:	9903      	ldr	r1, [sp, #12]
	if (l2cap_chan_add(conn, chan, l2cap_chan_destroy)) {
    7438:	4620      	mov	r0, r4
	chan->required_sec_level = server->sec_level;
    743a:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
	if (l2cap_chan_add(conn, chan, l2cap_chan_destroy)) {
    743e:	4a5b      	ldr	r2, [pc, #364]	; (75ac <l2cap_recv+0x2e0>)
    7440:	f7ff fd1c 	bl	6e7c <l2cap_chan_add>
    7444:	b3c0      	cbz	r0, 74b8 <l2cap_recv+0x1ec>
		struct bt_l2cap_le_chan *ch = BT_L2CAP_LE_CHAN(chan);
    7446:	f8dd 900c 	ldr.w	r9, [sp, #12]
		l2cap_chan_tx_init(ch);
    744a:	4648      	mov	r0, r9
    744c:	f7ff fb6a 	bl	6b24 <l2cap_chan_tx_init>
		ch->tx.init_credits = credits;
    7450:	f8bd 3000 	ldrh.w	r3, [sp]
		l2cap_chan_tx_give_credits(ch, credits);
    7454:	9901      	ldr	r1, [sp, #4]
		ch->tx.init_credits = credits;
    7456:	f8a9 304e 	strh.w	r3, [r9, #78]	; 0x4e
		l2cap_chan_tx_give_credits(ch, credits);
    745a:	4648      	mov	r0, r9
		ch->tx.cid = scid;
    745c:	f8a9 8048 	strh.w	r8, [r9, #72]	; 0x48
		ch->tx.mps = mps;
    7460:	f8a9 704c 	strh.w	r7, [r9, #76]	; 0x4c
		ch->tx.mtu = mtu;
    7464:	f8a9 604a 	strh.w	r6, [r9, #74]	; 0x4a
		l2cap_chan_tx_give_credits(ch, credits);
    7468:	f00b fabc 	bl	129e4 <l2cap_chan_tx_give_credits>
		l2cap_chan_rx_init(ch);
    746c:	4648      	mov	r0, r9
    746e:	f00b fa95 	bl	1299c <l2cap_chan_rx_init>
	atomic_add(&chan->rx.credits, credits);
    7472:	f8b9 1042 	ldrh.w	r1, [r9, #66]	; 0x42
    7476:	f109 0044 	add.w	r0, r9, #68	; 0x44
    747a:	f00b fa59 	bl	12930 <atomic_add>
		chan->psm = server->psm;
    747e:	9803      	ldr	r0, [sp, #12]
    7480:	f8bb 2000 	ldrh.w	r2, [fp]
    7484:	86c2      	strh	r2, [r0, #54]	; 0x36
	chan->state = state;
    7486:	2203      	movs	r2, #3
    7488:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
		if (chan->ops->connected) {
    748c:	6842      	ldr	r2, [r0, #4]
    748e:	6812      	ldr	r2, [r2, #0]
    7490:	b102      	cbz	r2, 7494 <l2cap_recv+0x1c8>
			chan->ops->connected(chan);
    7492:	4790      	blx	r2
		rsp->dcid = sys_cpu_to_le16(ch->rx.cid);
    7494:	f8b9 203c 	ldrh.w	r2, [r9, #60]	; 0x3c
    7498:	f8aa 2000 	strh.w	r2, [sl]
		rsp->mps = sys_cpu_to_le16(ch->rx.mps);
    749c:	f8b9 2040 	ldrh.w	r2, [r9, #64]	; 0x40
    74a0:	f8aa 2004 	strh.w	r2, [sl, #4]
		rsp->mtu = sys_cpu_to_le16(ch->rx.mtu);
    74a4:	f8b9 203e 	ldrh.w	r2, [r9, #62]	; 0x3e
    74a8:	f8aa 2002 	strh.w	r2, [sl, #2]
		rsp->credits = sys_cpu_to_le16(ch->rx.init_credits);
    74ac:	f8b9 2042 	ldrh.w	r2, [r9, #66]	; 0x42
    74b0:	f8aa 2006 	strh.w	r2, [sl, #6]
		rsp->result = BT_L2CAP_LE_SUCCESS;
    74b4:	2200      	movs	r2, #0
    74b6:	e78d      	b.n	73d4 <l2cap_recv+0x108>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_LE_ERR_NO_RESOURCES);
    74b8:	2204      	movs	r2, #4
    74ba:	e78b      	b.n	73d4 <l2cap_recv+0x108>
	if (buf->len < sizeof(*rsp)) {
    74bc:	2909      	cmp	r1, #9
    74be:	d802      	bhi.n	74c6 <l2cap_recv+0x1fa>
		BT_ERR("Too small LE conn rsp packet size");
    74c0:	2145      	movs	r1, #69	; 0x45
    74c2:	483b      	ldr	r0, [pc, #236]	; (75b0 <l2cap_recv+0x2e4>)
    74c4:	e70c      	b.n	72e0 <l2cap_recv+0x14>
	struct bt_l2cap_le_conn_rsp *rsp = (void *)buf->data;
    74c6:	68a3      	ldr	r3, [r4, #8]
		le_conn_rsp(l2cap, hdr->ident, buf);
    74c8:	f8d8 7000 	ldr.w	r7, [r8]
	result = sys_le16_to_cpu(rsp->result);
    74cc:	891e      	ldrh	r6, [r3, #8]
	dcid = sys_le16_to_cpu(rsp->dcid);
    74ce:	f8b3 b000 	ldrh.w	fp, [r3]
	mtu = sys_le16_to_cpu(rsp->mtu);
    74d2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
	mps = sys_le16_to_cpu(rsp->mps);
    74d6:	f8b3 9004 	ldrh.w	r9, [r3, #4]
	credits = sys_le16_to_cpu(rsp->credits);
    74da:	f8b3 8006 	ldrh.w	r8, [r3, #6]
	if (result == BT_L2CAP_LE_SUCCESS ||
    74de:	f026 0308 	bic.w	r3, r6, #8
    74e2:	b2a9      	uxth	r1, r5
    74e4:	b10b      	cbz	r3, 74ea <l2cap_recv+0x21e>
    74e6:	2e05      	cmp	r6, #5
    74e8:	d10b      	bne.n	7502 <l2cap_recv+0x236>
		chan = l2cap_lookup_ident(conn, ident);
    74ea:	2200      	movs	r2, #0
		chan = l2cap_remove_ident(conn, ident);
    74ec:	4638      	mov	r0, r7
    74ee:	f00b f9da 	bl	128a6 <__l2cap_lookup_ident>
    74f2:	4604      	mov	r4, r0
	if (!chan) {
    74f4:	b938      	cbnz	r0, 7506 <l2cap_recv+0x23a>
		BT_ERR("Cannot find channel for ident %u", ident);
    74f6:	462a      	mov	r2, r5
    74f8:	2145      	movs	r1, #69	; 0x45
    74fa:	482e      	ldr	r0, [pc, #184]	; (75b4 <l2cap_recv+0x2e8>)
    74fc:	f009 fc6e 	bl	10ddc <printk>
		return;
    7500:	e700      	b.n	7304 <l2cap_recv+0x38>
		chan = l2cap_remove_ident(conn, ident);
    7502:	2201      	movs	r2, #1
    7504:	e7f2      	b.n	74ec <l2cap_recv+0x220>
	k_delayed_work_cancel(&chan->chan.rtx_work);
    7506:	3010      	adds	r0, #16
    7508:	f008 fccc 	bl	fea4 <k_delayed_work_cancel>
	chan->chan.ident = 0U;
    750c:	2300      	movs	r3, #0
	switch (result) {
    750e:	2e05      	cmp	r6, #5
	chan->chan.ident = 0U;
    7510:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	switch (result) {
    7514:	d01b      	beq.n	754e <l2cap_recv+0x282>
    7516:	2e08      	cmp	r6, #8
    7518:	d019      	beq.n	754e <l2cap_recv+0x282>
    751a:	bb26      	cbnz	r6, 7566 <l2cap_recv+0x29a>
	chan->state = state;
    751c:	2303      	movs	r3, #3
    751e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if (chan->chan.ops->connected) {
    7522:	6863      	ldr	r3, [r4, #4]
		chan->tx.cid = dcid;
    7524:	f8a4 b048 	strh.w	fp, [r4, #72]	; 0x48
		if (chan->chan.ops->connected) {
    7528:	681b      	ldr	r3, [r3, #0]
		chan->tx.mtu = mtu;
    752a:	f8a4 a04a 	strh.w	sl, [r4, #74]	; 0x4a
		chan->tx.mps = mps;
    752e:	f8a4 904c 	strh.w	r9, [r4, #76]	; 0x4c
		if (chan->chan.ops->connected) {
    7532:	b10b      	cbz	r3, 7538 <l2cap_recv+0x26c>
			chan->chan.ops->connected(&chan->chan);
    7534:	4620      	mov	r0, r4
    7536:	4798      	blx	r3
		l2cap_chan_tx_give_credits(chan, credits);
    7538:	4641      	mov	r1, r8
    753a:	4620      	mov	r0, r4
    753c:	f00b fa52 	bl	129e4 <l2cap_chan_tx_give_credits>
	atomic_add(&chan->rx.credits, credits);
    7540:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
    7544:	f104 0044 	add.w	r0, r4, #68	; 0x44
    7548:	f00b f9f2 	bl	12930 <atomic_add>
}
    754c:	e6da      	b.n	7304 <l2cap_recv+0x38>
	switch (err) {
    754e:	2e05      	cmp	r6, #5
		if (l2cap_change_security(chan, result) == 0) {
    7550:	6820      	ldr	r0, [r4, #0]
	switch (err) {
    7552:	d00c      	beq.n	756e <l2cap_recv+0x2a2>
    7554:	2e08      	cmp	r6, #8
    7556:	d102      	bne.n	755e <l2cap_recv+0x292>
		if (conn->sec_level >= BT_SECURITY_L2) {
    7558:	7a43      	ldrb	r3, [r0, #9]
    755a:	2b01      	cmp	r3, #1
    755c:	d915      	bls.n	758a <l2cap_recv+0x2be>
		bt_l2cap_chan_remove(conn, &chan->chan);
    755e:	4621      	mov	r1, r4
    7560:	4638      	mov	r0, r7
    7562:	f00b fa78 	bl	12a56 <bt_l2cap_chan_remove>
		bt_l2cap_chan_del(&chan->chan);
    7566:	4620      	mov	r0, r4
	bt_l2cap_chan_del(&chan->chan);
    7568:	f00b fa8e 	bl	12a88 <bt_l2cap_chan_del>
    756c:	e6ca      	b.n	7304 <l2cap_recv+0x38>
		if (conn->sec_level < BT_SECURITY_L2) {
    756e:	7a43      	ldrb	r3, [r0, #9]
    7570:	2b01      	cmp	r3, #1
    7572:	d90a      	bls.n	758a <l2cap_recv+0x2be>
		} else if (conn->sec_level < BT_SECURITY_L3) {
    7574:	2b02      	cmp	r3, #2
    7576:	d00a      	beq.n	758e <l2cap_recv+0x2c2>
		} else if (conn->sec_level < BT_SECURITY_L4) {
    7578:	2b03      	cmp	r3, #3
    757a:	d1f0      	bne.n	755e <l2cap_recv+0x292>
			sec = BT_SECURITY_L4;
    757c:	2104      	movs	r1, #4
	return bt_conn_set_security(chan->chan.conn, sec);
    757e:	f00b f8e7 	bl	12750 <bt_conn_set_security>
		if (l2cap_change_security(chan, result) == 0) {
    7582:	2800      	cmp	r0, #0
    7584:	f43f aebe 	beq.w	7304 <l2cap_recv+0x38>
    7588:	e7e9      	b.n	755e <l2cap_recv+0x292>
		sec = BT_SECURITY_L2;
    758a:	2102      	movs	r1, #2
    758c:	e7f7      	b.n	757e <l2cap_recv+0x2b2>
			sec = BT_SECURITY_L3;
    758e:	2103      	movs	r1, #3
    7590:	e7f5      	b.n	757e <l2cap_recv+0x2b2>
    7592:	bf00      	nop
    7594:	00018511 	.word	0x00018511
    7598:	00018534 	.word	0x00018534
    759c:	0001855a 	.word	0x0001855a
    75a0:	00018580 	.word	0x00018580
    75a4:	000185a1 	.word	0x000185a1
    75a8:	000185c8 	.word	0x000185c8
    75ac:	00012945 	.word	0x00012945
    75b0:	000185e8 	.word	0x000185e8
    75b4:	0001860f 	.word	0x0001860f
	if (buf->len < sizeof(*req)) {
    75b8:	2903      	cmp	r1, #3
    75ba:	f67f aed2 	bls.w	7362 <l2cap_recv+0x96>
	struct bt_l2cap_disconn_req *req = (void *)buf->data;
    75be:	68a7      	ldr	r7, [r4, #8]
		le_disconn_req(l2cap, hdr->ident, buf);
    75c0:	f8d8 6000 	ldr.w	r6, [r8]
	chan = l2cap_remove_rx_cid(conn, dcid);
    75c4:	8839      	ldrh	r1, [r7, #0]
    75c6:	4630      	mov	r0, r6
    75c8:	f00b f98a 	bl	128e0 <l2cap_remove_rx_cid>
	if (!chan) {
    75cc:	4604      	mov	r4, r0
    75ce:	bb28      	cbnz	r0, 761c <l2cap_recv+0x350>
		data.scid = req->scid;
    75d0:	78fa      	ldrb	r2, [r7, #3]
    75d2:	78bb      	ldrb	r3, [r7, #2]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    75d4:	4629      	mov	r1, r5
		data.scid = req->scid;
    75d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    75da:	f8ad 300c 	strh.w	r3, [sp, #12]
		data.dcid = req->dcid;
    75de:	787a      	ldrb	r2, [r7, #1]
    75e0:	783b      	ldrb	r3, [r7, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    75e2:	2001      	movs	r0, #1
		data.dcid = req->dcid;
    75e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    75e8:	2206      	movs	r2, #6
		data.dcid = req->dcid;
    75ea:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    75ee:	f7ff fa73 	bl	6ad8 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    75f2:	4605      	mov	r5, r0
    75f4:	2800      	cmp	r0, #0
    75f6:	f43f ae85 	beq.w	7304 <l2cap_recv+0x38>
	rej = net_buf_add(buf, sizeof(*rej));
    75fa:	f100 0708 	add.w	r7, r0, #8
    75fe:	2102      	movs	r1, #2
    7600:	4638      	mov	r0, r7
    7602:	f004 fba9 	bl	bd58 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    7606:	2302      	movs	r3, #2
    7608:	7044      	strb	r4, [r0, #1]
    760a:	7003      	strb	r3, [r0, #0]
		net_buf_add_mem(buf, data, data_len);
    760c:	2204      	movs	r2, #4
    760e:	4638      	mov	r0, r7
    7610:	a903      	add	r1, sp, #12
    7612:	f00c fd07 	bl	14024 <net_buf_simple_add_mem>
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
    7616:	4629      	mov	r1, r5
    7618:	4630      	mov	r0, r6
    761a:	e6df      	b.n	73dc <l2cap_recv+0x110>
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_DISCONN_RSP, ident,
    761c:	4629      	mov	r1, r5
    761e:	2204      	movs	r2, #4
    7620:	2007      	movs	r0, #7
    7622:	f7ff fa59 	bl	6ad8 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    7626:	4605      	mov	r5, r0
    7628:	2800      	cmp	r0, #0
    762a:	f43f ae6b 	beq.w	7304 <l2cap_recv+0x38>
	rsp = net_buf_add(buf, sizeof(*rsp));
    762e:	2104      	movs	r1, #4
    7630:	3008      	adds	r0, #8
    7632:	f004 fb91 	bl	bd58 <net_buf_simple_add>
	rsp->dcid = sys_cpu_to_le16(chan->rx.cid);
    7636:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    7638:	8003      	strh	r3, [r0, #0]
	rsp->scid = sys_cpu_to_le16(chan->tx.cid);
    763a:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    763e:	8043      	strh	r3, [r0, #2]
	bt_l2cap_chan_del(&chan->chan);
    7640:	4620      	mov	r0, r4
    7642:	f00b fa21 	bl	12a88 <bt_l2cap_chan_del>
    7646:	e7e6      	b.n	7616 <l2cap_recv+0x34a>
	if (buf->len < sizeof(*rsp)) {
    7648:	2903      	cmp	r1, #3
    764a:	d802      	bhi.n	7652 <l2cap_recv+0x386>
		BT_ERR("Too small LE disconn rsp packet size");
    764c:	2145      	movs	r1, #69	; 0x45
    764e:	4828      	ldr	r0, [pc, #160]	; (76f0 <l2cap_recv+0x424>)
    7650:	e646      	b.n	72e0 <l2cap_recv+0x14>
	scid = sys_le16_to_cpu(rsp->scid);
    7652:	68a3      	ldr	r3, [r4, #8]
	chan = l2cap_remove_rx_cid(conn, scid);
    7654:	f8d8 0000 	ldr.w	r0, [r8]
    7658:	8859      	ldrh	r1, [r3, #2]
    765a:	f00b f941 	bl	128e0 <l2cap_remove_rx_cid>
	if (!chan) {
    765e:	2800      	cmp	r0, #0
    7660:	d182      	bne.n	7568 <l2cap_recv+0x29c>
    7662:	e64f      	b.n	7304 <l2cap_recv+0x38>
	if (buf->len < sizeof(*ev)) {
    7664:	2903      	cmp	r1, #3
    7666:	d802      	bhi.n	766e <l2cap_recv+0x3a2>
		BT_ERR("Too small LE Credits packet size");
    7668:	2145      	movs	r1, #69	; 0x45
    766a:	4822      	ldr	r0, [pc, #136]	; (76f4 <l2cap_recv+0x428>)
    766c:	e638      	b.n	72e0 <l2cap_recv+0x14>
	struct bt_l2cap_le_credits *ev = (void *)buf->data;
    766e:	68a2      	ldr	r2, [r4, #8]
	chan = bt_l2cap_le_lookup_tx_cid(conn, cid);
    7670:	f8d8 0000 	ldr.w	r0, [r8]
    7674:	8811      	ldrh	r1, [r2, #0]
    7676:	f00b faeb 	bl	12c50 <bt_l2cap_le_lookup_tx_cid>
	if (!chan) {
    767a:	4604      	mov	r4, r0
    767c:	b910      	cbnz	r0, 7684 <l2cap_recv+0x3b8>
		BT_ERR("Unable to find channel of LE Credits packet");
    767e:	2145      	movs	r1, #69	; 0x45
    7680:	481d      	ldr	r0, [pc, #116]	; (76f8 <l2cap_recv+0x42c>)
    7682:	e62d      	b.n	72e0 <l2cap_recv+0x14>
	if (atomic_get(&ch->tx.credits) + credits > UINT16_MAX) {
    7684:	3050      	adds	r0, #80	; 0x50
	credits = sys_le16_to_cpu(ev->credits);
    7686:	8851      	ldrh	r1, [r2, #2]
	if (atomic_get(&ch->tx.credits) + credits > UINT16_MAX) {
    7688:	f00b f94f 	bl	1292a <atomic_get>
    768c:	4408      	add	r0, r1
    768e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    7692:	db07      	blt.n	76a4 <l2cap_recv+0x3d8>
		BT_ERR("Credits overflow");
    7694:	2145      	movs	r1, #69	; 0x45
    7696:	4819      	ldr	r0, [pc, #100]	; (76fc <l2cap_recv+0x430>)
    7698:	f009 fba0 	bl	10ddc <printk>
		bt_l2cap_chan_disconnect(chan);
    769c:	4620      	mov	r0, r4
    769e:	f7ff fcd7 	bl	7050 <bt_l2cap_chan_disconnect>
		return;
    76a2:	e62f      	b.n	7304 <l2cap_recv+0x38>
	l2cap_chan_tx_give_credits(ch, credits);
    76a4:	4620      	mov	r0, r4
    76a6:	f00b f99d 	bl	129e4 <l2cap_chan_tx_give_credits>
	l2cap_chan_tx_resume(ch);
    76aa:	4620      	mov	r0, r4
    76ac:	f00b f9b3 	bl	12a16 <l2cap_chan_tx_resume>
    76b0:	e628      	b.n	7304 <l2cap_recv+0x38>
	chan = l2cap_remove_ident(conn, ident);
    76b2:	4629      	mov	r1, r5
    76b4:	f8d8 0000 	ldr.w	r0, [r8]
    76b8:	f00b f8f5 	bl	128a6 <__l2cap_lookup_ident>
    76bc:	e7cf      	b.n	765e <l2cap_recv+0x392>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    76be:	2157      	movs	r1, #87	; 0x57
    76c0:	480f      	ldr	r0, [pc, #60]	; (7700 <l2cap_recv+0x434>)
    76c2:	f009 fb8b 	bl	10ddc <printk>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    76c6:	2202      	movs	r2, #2
    76c8:	2001      	movs	r0, #1
    76ca:	7871      	ldrb	r1, [r6, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
    76cc:	f8d8 5000 	ldr.w	r5, [r8]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    76d0:	f7ff fa02 	bl	6ad8 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    76d4:	4604      	mov	r4, r0
    76d6:	2800      	cmp	r0, #0
    76d8:	f43f ae14 	beq.w	7304 <l2cap_recv+0x38>
	rej = net_buf_add(buf, sizeof(*rej));
    76dc:	2102      	movs	r1, #2
    76de:	3008      	adds	r0, #8
    76e0:	f004 fb3a 	bl	bd58 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    76e4:	2300      	movs	r3, #0
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
    76e6:	4621      	mov	r1, r4
	rej->reason = sys_cpu_to_le16(reason);
    76e8:	7003      	strb	r3, [r0, #0]
    76ea:	7043      	strb	r3, [r0, #1]
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
    76ec:	4628      	mov	r0, r5
    76ee:	e675      	b.n	73dc <l2cap_recv+0x110>
    76f0:	00018635 	.word	0x00018635
    76f4:	0001865f 	.word	0x0001865f
    76f8:	00018685 	.word	0x00018685
    76fc:	000186b6 	.word	0x000186b6
    7700:	000186cc 	.word	0x000186cc

00007704 <bt_att_destroy>:

	return 0;
}

void bt_att_destroy(struct bt_l2cap_chan *chan)
{
    7704:	b507      	push	{r0, r1, r2, lr}
	struct bt_att *att = ATT_CHAN(chan);
    7706:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&att_slab, (void **)&att);
    7708:	a901      	add	r1, sp, #4
    770a:	4803      	ldr	r0, [pc, #12]	; (7718 <bt_att_destroy+0x14>)
    770c:	f006 fc0e 	bl	df2c <k_mem_slab_free>
}
    7710:	b003      	add	sp, #12
    7712:	f85d fb04 	ldr.w	pc, [sp], #4
    7716:	bf00      	nop
    7718:	200004ac 	.word	0x200004ac

0000771c <find_type_cb>:
{
    771c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    7720:	f642 0301 	movw	r3, #10241	; 0x2801
    7724:	f04f 0800 	mov.w	r8, #0
{
    7728:	b090      	sub	sp, #64	; 0x40
	struct bt_att *att = data->att;
    772a:	680e      	ldr	r6, [r1, #0]
{
    772c:	4605      	mov	r5, r0
    772e:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    7730:	6800      	ldr	r0, [r0, #0]
    7732:	a90b      	add	r1, sp, #44	; 0x2c
	struct bt_conn *conn = att->chan.chan.conn;
    7734:	6837      	ldr	r7, [r6, #0]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    7736:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
    773a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    773e:	f00a fda9 	bl	12294 <bt_uuid_cmp>
    7742:	2800      	cmp	r0, #0
    7744:	d033      	beq.n	77ae <find_type_cb+0x92>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    7746:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    774a:	6828      	ldr	r0, [r5, #0]
    774c:	a90b      	add	r1, sp, #44	; 0x2c
    774e:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
    7752:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    7756:	f00a fd9d 	bl	12294 <bt_uuid_cmp>
    775a:	b150      	cbz	r0, 7772 <find_type_cb+0x56>
		if (data->group &&
    775c:	68a3      	ldr	r3, [r4, #8]
    775e:	b123      	cbz	r3, 776a <find_type_cb+0x4e>
		    attr->handle > sys_le16_to_cpu(data->group->end_handle)) {
    7760:	8a2a      	ldrh	r2, [r5, #16]
		if (data->group &&
    7762:	8859      	ldrh	r1, [r3, #2]
    7764:	4291      	cmp	r1, r2
    7766:	d200      	bcs.n	776a <find_type_cb+0x4e>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    7768:	805a      	strh	r2, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    776a:	2001      	movs	r0, #1
}
    776c:	b010      	add	sp, #64	; 0x40
    776e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    7772:	6862      	ldr	r2, [r4, #4]
    7774:	f8b6 304a 	ldrh.w	r3, [r6, #74]	; 0x4a
    7778:	8992      	ldrh	r2, [r2, #12]
    777a:	1a9b      	subs	r3, r3, r2
    777c:	2b03      	cmp	r3, #3
    777e:	d9f5      	bls.n	776c <find_type_cb+0x50>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    7780:	686e      	ldr	r6, [r5, #4]
    7782:	9000      	str	r0, [sp, #0]
    7784:	2310      	movs	r3, #16
    7786:	4629      	mov	r1, r5
    7788:	4638      	mov	r0, r7
    778a:	aa02      	add	r2, sp, #8
    778c:	47b0      	blx	r6
	if (read < 0) {
    778e:	1e06      	subs	r6, r0, #0
    7790:	db0d      	blt.n	77ae <find_type_cb+0x92>
	if (read != data->value_len) {
    7792:	7c22      	ldrb	r2, [r4, #16]
    7794:	68e0      	ldr	r0, [r4, #12]
    7796:	42b2      	cmp	r2, r6
    7798:	d028      	beq.n	77ec <find_type_cb+0xd0>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    779a:	4601      	mov	r1, r0
    779c:	a80b      	add	r0, sp, #44	; 0x2c
    779e:	f00a fda3 	bl	122e8 <bt_uuid_create>
    77a2:	b938      	cbnz	r0, 77b4 <find_type_cb+0x98>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
    77a4:	2157      	movs	r1, #87	; 0x57
    77a6:	7c22      	ldrb	r2, [r4, #16]
    77a8:	4812      	ldr	r0, [pc, #72]	; (77f4 <find_type_cb+0xd8>)
			BT_WARN("Unable to create UUID: size %d", read);
    77aa:	f009 fb17 	bl	10ddc <printk>
	data->group = NULL;
    77ae:	2300      	movs	r3, #0
    77b0:	60a3      	str	r3, [r4, #8]
    77b2:	e7da      	b.n	776a <find_type_cb+0x4e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    77b4:	b2f2      	uxtb	r2, r6
    77b6:	a902      	add	r1, sp, #8
    77b8:	a806      	add	r0, sp, #24
    77ba:	f00a fd95 	bl	122e8 <bt_uuid_create>
    77be:	b918      	cbnz	r0, 77c8 <find_type_cb+0xac>
			BT_WARN("Unable to create UUID: size %d", read);
    77c0:	4632      	mov	r2, r6
    77c2:	2157      	movs	r1, #87	; 0x57
    77c4:	480c      	ldr	r0, [pc, #48]	; (77f8 <find_type_cb+0xdc>)
    77c6:	e7f0      	b.n	77aa <find_type_cb+0x8e>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    77c8:	a906      	add	r1, sp, #24
    77ca:	a80b      	add	r0, sp, #44	; 0x2c
    77cc:	f00a fd62 	bl	12294 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    77d0:	2800      	cmp	r0, #0
    77d2:	d1ec      	bne.n	77ae <find_type_cb+0x92>
	data->err = 0x00;
    77d4:	2300      	movs	r3, #0
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    77d6:	6860      	ldr	r0, [r4, #4]
	data->err = 0x00;
    77d8:	7463      	strb	r3, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    77da:	2104      	movs	r1, #4
    77dc:	3008      	adds	r0, #8
    77de:	f004 fabb 	bl	bd58 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    77e2:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    77e4:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    77e6:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    77e8:	8043      	strh	r3, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
    77ea:	e7be      	b.n	776a <find_type_cb+0x4e>
	} else if (memcmp(data->value, uuid, read)) {
    77ec:	a902      	add	r1, sp, #8
    77ee:	f00a fca6 	bl	1213e <memcmp>
    77f2:	e7ed      	b.n	77d0 <find_type_cb+0xb4>
    77f4:	000186f8 	.word	0x000186f8
    77f8:	0001871c 	.word	0x0001871c

000077fc <att_cb.isra.0>:
static bt_conn_tx_cb_t att_cb(struct net_buf *buf)
    77fc:	b508      	push	{r3, lr}
	switch (att_op_get_type(buf->data[0])) {
    77fe:	7800      	ldrb	r0, [r0, #0]
    7800:	f00b fa67 	bl	12cd2 <att_op_get_type>
    7804:	3801      	subs	r0, #1
    7806:	b2c0      	uxtb	r0, r0
    7808:	2804      	cmp	r0, #4
    780a:	bf96      	itet	ls
    780c:	4b02      	ldrls	r3, [pc, #8]	; (7818 <att_cb.isra.0+0x1c>)
    780e:	4803      	ldrhi	r0, [pc, #12]	; (781c <att_cb.isra.0+0x20>)
    7810:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
}
    7814:	bd08      	pop	{r3, pc}
    7816:	bf00      	nop
    7818:	00015ad0 	.word	0x00015ad0
    781c:	00012f7f 	.word	0x00012f7f

00007820 <att_send>:
{
    7820:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    7824:	4698      	mov	r8, r3
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    7826:	688b      	ldr	r3, [r1, #8]
{
    7828:	4607      	mov	r7, r0
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    782a:	781b      	ldrb	r3, [r3, #0]
{
    782c:	460e      	mov	r6, r1
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    782e:	2bd2      	cmp	r3, #210	; 0xd2
{
    7830:	4615      	mov	r5, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    7832:	d10e      	bne.n	7852 <att_send+0x32>
		err = bt_smp_sign(conn, buf);
    7834:	f00c fb30 	bl	13e98 <bt_smp_sign>
		if (err) {
    7838:	4604      	mov	r4, r0
    783a:	b150      	cbz	r0, 7852 <att_send+0x32>
			BT_ERR("Error signing data");
    783c:	480c      	ldr	r0, [pc, #48]	; (7870 <att_send+0x50>)
    783e:	2145      	movs	r1, #69	; 0x45
    7840:	f009 facc 	bl	10ddc <printk>
			net_buf_unref(buf);
    7844:	4630      	mov	r0, r6
    7846:	f004 f915 	bl	ba74 <net_buf_unref>
}
    784a:	4620      	mov	r0, r4
    784c:	b002      	add	sp, #8
    784e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf,
    7852:	b91d      	cbnz	r5, 785c <att_send+0x3c>
				cb ? cb : att_cb(buf),
    7854:	68b0      	ldr	r0, [r6, #8]
    7856:	f7ff ffd1 	bl	77fc <att_cb.isra.0>
    785a:	4605      	mov	r5, r0
	return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf,
    785c:	462b      	mov	r3, r5
    785e:	4632      	mov	r2, r6
    7860:	2104      	movs	r1, #4
    7862:	4638      	mov	r0, r7
    7864:	f8cd 8000 	str.w	r8, [sp]
    7868:	f00b f93c 	bl	12ae4 <bt_l2cap_send_cb>
    786c:	4604      	mov	r4, r0
    786e:	e7ec      	b.n	784a <att_send+0x2a>
    7870:	00018740 	.word	0x00018740

00007874 <att_get>:
{
    7874:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    7876:	2104      	movs	r1, #4
    7878:	f00b f9ea 	bl	12c50 <bt_l2cap_le_lookup_tx_cid>
	__ASSERT(chan, "No ATT channel found");
    787c:	4604      	mov	r4, r0
    787e:	b960      	cbnz	r0, 789a <att_get+0x26>
    7880:	4907      	ldr	r1, [pc, #28]	; (78a0 <att_get+0x2c>)
    7882:	2371      	movs	r3, #113	; 0x71
    7884:	4a07      	ldr	r2, [pc, #28]	; (78a4 <att_get+0x30>)
    7886:	4808      	ldr	r0, [pc, #32]	; (78a8 <att_get+0x34>)
    7888:	f009 faa8 	bl	10ddc <printk>
    788c:	4807      	ldr	r0, [pc, #28]	; (78ac <att_get+0x38>)
    788e:	f009 faa5 	bl	10ddc <printk>
    7892:	2171      	movs	r1, #113	; 0x71
    7894:	4803      	ldr	r0, [pc, #12]	; (78a4 <att_get+0x30>)
    7896:	f009 fd37 	bl	11308 <assert_post_action>
}
    789a:	4620      	mov	r0, r4
    789c:	bd10      	pop	{r4, pc}
    789e:	bf00      	nop
    78a0:	00018787 	.word	0x00018787
    78a4:	00018758 	.word	0x00018758
    78a8:	00016493 	.word	0x00016493
    78ac:	0001878c 	.word	0x0001878c

000078b0 <bt_att_accept>:
{
    78b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    78b2:	2200      	movs	r2, #0
{
    78b4:	4606      	mov	r6, r0
    78b6:	460d      	mov	r5, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    78b8:	2300      	movs	r3, #0
    78ba:	4810      	ldr	r0, [pc, #64]	; (78fc <bt_att_accept+0x4c>)
    78bc:	a901      	add	r1, sp, #4
    78be:	f006 fac9 	bl	de54 <k_mem_slab_alloc>
    78c2:	4604      	mov	r4, r0
    78c4:	b148      	cbz	r0, 78da <bt_att_accept+0x2a>
		BT_ERR("No available ATT context for conn %p", conn);
    78c6:	4632      	mov	r2, r6
    78c8:	2145      	movs	r1, #69	; 0x45
    78ca:	480d      	ldr	r0, [pc, #52]	; (7900 <bt_att_accept+0x50>)
    78cc:	f009 fa86 	bl	10ddc <printk>
    78d0:	f06f 040b 	mvn.w	r4, #11
}
    78d4:	4620      	mov	r0, r4
    78d6:	b002      	add	sp, #8
    78d8:	bd70      	pop	{r4, r5, r6, pc}
	(void)memset(att, 0, sizeof(*att));
    78da:	4601      	mov	r1, r0
    78dc:	f44f 7298 	mov.w	r2, #304	; 0x130
    78e0:	9801      	ldr	r0, [sp, #4]
    78e2:	f00a fc67 	bl	121b4 <memset>
	att->chan.chan.ops = &ops;
    78e6:	9801      	ldr	r0, [sp, #4]
    78e8:	4b06      	ldr	r3, [pc, #24]	; (7904 <bt_att_accept+0x54>)
    78ea:	6043      	str	r3, [r0, #4]
	return z_impl_k_sem_init(sem, initial_count, limit);
    78ec:	220a      	movs	r2, #10
    78ee:	30e0      	adds	r0, #224	; 0xe0
    78f0:	4611      	mov	r1, r2
    78f2:	f00d fbb7 	bl	15064 <z_impl_k_sem_init>
	*chan = &att->chan.chan;
    78f6:	9b01      	ldr	r3, [sp, #4]
    78f8:	602b      	str	r3, [r5, #0]
	return 0;
    78fa:	e7eb      	b.n	78d4 <bt_att_accept+0x24>
    78fc:	200004ac 	.word	0x200004ac
    7900:	000187a3 	.word	0x000187a3
    7904:	00015bcc 	.word	0x00015bcc

00007908 <bt_att_connected>:
{
    7908:	b510      	push	{r4, lr}
    790a:	4604      	mov	r4, r0
	z_impl_k_queue_init(queue);
    790c:	30f8      	adds	r0, #248	; 0xf8
    790e:	f00d fb5d 	bl	14fcc <z_impl_k_queue_init>
    7912:	f504 708a 	add.w	r0, r4, #276	; 0x114
    7916:	f00d fb59 	bl	14fcc <z_impl_k_queue_init>
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    791a:	2317      	movs	r3, #23
	k_delayed_work_init(&att->timeout_work, att_timeout);
    791c:	4905      	ldr	r1, [pc, #20]	; (7934 <bt_att_connected+0x2c>)
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    791e:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    7922:	87e3      	strh	r3, [r4, #62]	; 0x3e
	k_delayed_work_init(&att->timeout_work, att_timeout);
    7924:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    7928:	f00d fc15 	bl	15156 <k_delayed_work_init>
	list->head = NULL;
    792c:	2300      	movs	r3, #0
	list->tail = NULL;
    792e:	e9c4 332e 	strd	r3, r3, [r4, #184]	; 0xb8
}
    7932:	bd10      	pop	{r4, pc}
    7934:	000085e1 	.word	0x000085e1

00007938 <att_send_req>:
{
    7938:	b573      	push	{r0, r1, r4, r5, r6, lr}
    793a:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(req);
    793c:	460c      	mov	r4, r1
    793e:	b959      	cbnz	r1, 7958 <att_send_req+0x20>
    7940:	492e      	ldr	r1, [pc, #184]	; (79fc <att_send_req+0xc4>)
    7942:	482f      	ldr	r0, [pc, #188]	; (7a00 <att_send_req+0xc8>)
    7944:	f44f 7397 	mov.w	r3, #302	; 0x12e
    7948:	4a2e      	ldr	r2, [pc, #184]	; (7a04 <att_send_req+0xcc>)
    794a:	f009 fa47 	bl	10ddc <printk>
    794e:	f44f 7197 	mov.w	r1, #302	; 0x12e
    7952:	482c      	ldr	r0, [pc, #176]	; (7a04 <att_send_req+0xcc>)
    7954:	f009 fcd8 	bl	11308 <assert_post_action>
	__ASSERT_NO_MSG(req->func);
    7958:	6863      	ldr	r3, [r4, #4]
    795a:	b95b      	cbnz	r3, 7974 <att_send_req+0x3c>
    795c:	492a      	ldr	r1, [pc, #168]	; (7a08 <att_send_req+0xd0>)
    795e:	4828      	ldr	r0, [pc, #160]	; (7a00 <att_send_req+0xc8>)
    7960:	f240 132f 	movw	r3, #303	; 0x12f
    7964:	4a27      	ldr	r2, [pc, #156]	; (7a04 <att_send_req+0xcc>)
    7966:	f009 fa39 	bl	10ddc <printk>
    796a:	f240 112f 	movw	r1, #303	; 0x12f
    796e:	4825      	ldr	r0, [pc, #148]	; (7a04 <att_send_req+0xcc>)
    7970:	f009 fcca 	bl	11308 <assert_post_action>
	__ASSERT_NO_MSG(!att->req);
    7974:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    7978:	b15b      	cbz	r3, 7992 <att_send_req+0x5a>
    797a:	4924      	ldr	r1, [pc, #144]	; (7a0c <att_send_req+0xd4>)
    797c:	4820      	ldr	r0, [pc, #128]	; (7a00 <att_send_req+0xc8>)
    797e:	f44f 7398 	mov.w	r3, #304	; 0x130
    7982:	4a20      	ldr	r2, [pc, #128]	; (7a04 <att_send_req+0xcc>)
    7984:	f009 fa2a 	bl	10ddc <printk>
    7988:	f44f 7198 	mov.w	r1, #304	; 0x130
    798c:	481d      	ldr	r0, [pc, #116]	; (7a04 <att_send_req+0xcc>)
    798e:	f009 fcbb 	bl	11308 <assert_post_action>
	att->req = req;
    7992:	f8c5 40b4 	str.w	r4, [r5, #180]	; 0xb4
	return z_impl_k_sem_take(sem, timeout);
    7996:	2200      	movs	r2, #0
    7998:	2300      	movs	r3, #0
    799a:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
    799e:	f007 ffd7 	bl	f950 <z_impl_k_sem_take>
	if (k_sem_take(&att->tx_sem, K_NO_WAIT) < 0) {
    79a2:	2800      	cmp	r0, #0
    79a4:	da08      	bge.n	79b8 <att_send_req+0x80>
		k_fifo_put(&att->tx_queue, req->buf);
    79a6:	f105 00f8 	add.w	r0, r5, #248	; 0xf8
    79aa:	6921      	ldr	r1, [r4, #16]
    79ac:	f00d fb1b 	bl	14fe6 <k_queue_append>
		return 0;
    79b0:	2500      	movs	r5, #0
}
    79b2:	4628      	mov	r0, r5
    79b4:	b002      	add	sp, #8
    79b6:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_simple_save(&req->buf->b, &req->state);
    79b8:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    79ba:	f106 0008 	add.w	r0, r6, #8
    79be:	f00c fb25 	bl	1400c <net_buf_simple_headroom>
	state->len = buf->len;
    79c2:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
    79c4:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    79c6:	81e3      	strh	r3, [r4, #14]
	err = bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    79c8:	6920      	ldr	r0, [r4, #16]
    79ca:	682d      	ldr	r5, [r5, #0]
    79cc:	f004 f898 	bl	bb00 <net_buf_ref>
    79d0:	6923      	ldr	r3, [r4, #16]
    79d2:	4601      	mov	r1, r0
    79d4:	6898      	ldr	r0, [r3, #8]
    79d6:	f7ff ff11 	bl	77fc <att_cb.isra.0>
    79da:	2600      	movs	r6, #0
    79dc:	4603      	mov	r3, r0
    79de:	460a      	mov	r2, r1
    79e0:	4628      	mov	r0, r5
    79e2:	2104      	movs	r1, #4
    79e4:	9600      	str	r6, [sp, #0]
    79e6:	f00b f87d 	bl	12ae4 <bt_l2cap_send_cb>
	if (err) {
    79ea:	4605      	mov	r5, r0
    79ec:	2800      	cmp	r0, #0
    79ee:	d0e0      	beq.n	79b2 <att_send_req+0x7a>
		net_buf_unref(req->buf);
    79f0:	6920      	ldr	r0, [r4, #16]
    79f2:	f004 f83f 	bl	ba74 <net_buf_unref>
		req->buf = NULL;
    79f6:	6126      	str	r6, [r4, #16]
		return err;
    79f8:	e7db      	b.n	79b2 <att_send_req+0x7a>
    79fa:	bf00      	nop
    79fc:	000187dd 	.word	0x000187dd
    7a00:	00016493 	.word	0x00016493
    7a04:	00018758 	.word	0x00018758
    7a08:	000187cd 	.word	0x000187cd
    7a0c:	000187d7 	.word	0x000187d7

00007a10 <att_req_sent>:
{
    7a10:	b538      	push	{r3, r4, r5, lr}
    7a12:	4604      	mov	r4, r0
    7a14:	460d      	mov	r5, r1
	struct bt_att *att = att_get(conn);
    7a16:	f7ff ff2d 	bl	7874 <att_get>
	if (att->req) {
    7a1a:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
    7a1e:	b13b      	cbz	r3, 7a30 <att_req_sent+0x20>
    7a20:	f100 01c0 	add.w	r1, r0, #192	; 0xc0
    7a24:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    7a28:	2300      	movs	r3, #0
    7a2a:	4804      	ldr	r0, [pc, #16]	; (7a3c <att_req_sent+0x2c>)
    7a2c:	f008 f9b0 	bl	fd90 <k_delayed_work_submit_to_queue>
	att_pdu_sent(conn, user_data);
    7a30:	4629      	mov	r1, r5
    7a32:	4620      	mov	r0, r4
}
    7a34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	att_pdu_sent(conn, user_data);
    7a38:	f00b baa1 	b.w	12f7e <att_pdu_sent>
    7a3c:	20001e54 	.word	0x20001e54

00007a40 <att_chan_get>:
{
    7a40:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    7a42:	7b43      	ldrb	r3, [r0, #13]
    7a44:	2b07      	cmp	r3, #7
    7a46:	d005      	beq.n	7a54 <att_chan_get+0x14>
		BT_WARN("Not connected");
    7a48:	2157      	movs	r1, #87	; 0x57
    7a4a:	480c      	ldr	r0, [pc, #48]	; (7a7c <att_chan_get+0x3c>)
		BT_WARN("ATT context flagged as disconnected");
    7a4c:	f009 f9c6 	bl	10ddc <printk>
		return NULL;
    7a50:	2400      	movs	r4, #0
    7a52:	e008      	b.n	7a66 <att_chan_get+0x26>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    7a54:	2104      	movs	r1, #4
    7a56:	f00b f90b 	bl	12c70 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    7a5a:	4604      	mov	r4, r0
    7a5c:	b928      	cbnz	r0, 7a6a <att_chan_get+0x2a>
		BT_ERR("Unable to find ATT channel");
    7a5e:	2145      	movs	r1, #69	; 0x45
    7a60:	4807      	ldr	r0, [pc, #28]	; (7a80 <att_chan_get+0x40>)
    7a62:	f009 f9bb 	bl	10ddc <printk>
}
    7a66:	4620      	mov	r0, r4
    7a68:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7a6a:	f100 03b0 	add.w	r3, r0, #176	; 0xb0
    7a6e:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    7a72:	075b      	lsls	r3, r3, #29
    7a74:	d5f7      	bpl.n	7a66 <att_chan_get+0x26>
		BT_WARN("ATT context flagged as disconnected");
    7a76:	2157      	movs	r1, #87	; 0x57
    7a78:	4802      	ldr	r0, [pc, #8]	; (7a84 <att_chan_get+0x44>)
    7a7a:	e7e7      	b.n	7a4c <att_chan_get+0xc>
    7a7c:	000187e1 	.word	0x000187e1
    7a80:	000187f4 	.word	0x000187f4
    7a84:	00018814 	.word	0x00018814

00007a88 <prep_write_cb>:
{
    7a88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7a8a:	460c      	mov	r4, r1
    7a8c:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
    7a8e:	4601      	mov	r1, r0
    7a90:	222a      	movs	r2, #42	; 0x2a
    7a92:	6820      	ldr	r0, [r4, #0]
    7a94:	f00b fe5e 	bl	13754 <bt_gatt_check_perm>
    7a98:	4605      	mov	r5, r0
    7a9a:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    7a9c:	2800      	cmp	r0, #0
    7a9e:	d12d      	bne.n	7afc <prep_write_cb+0x74>
	if (!(attr->perm & BT_GATT_PERM_PREPARE_WRITE)) {
    7aa0:	7cb3      	ldrb	r3, [r6, #18]
    7aa2:	065b      	lsls	r3, r3, #25
    7aa4:	d514      	bpl.n	7ad0 <prep_write_cb+0x48>
	write = attr->write(data->conn, attr, data->value, data->len,
    7aa6:	2301      	movs	r3, #1
    7aa8:	9301      	str	r3, [sp, #4]
    7aaa:	89e3      	ldrh	r3, [r4, #14]
    7aac:	4631      	mov	r1, r6
    7aae:	9300      	str	r3, [sp, #0]
    7ab0:	68b7      	ldr	r7, [r6, #8]
    7ab2:	89a3      	ldrh	r3, [r4, #12]
    7ab4:	68a2      	ldr	r2, [r4, #8]
    7ab6:	6820      	ldr	r0, [r4, #0]
    7ab8:	47b8      	blx	r7
	if (write != 0) {
    7aba:	b148      	cbz	r0, 7ad0 <prep_write_cb+0x48>
	if (err < 0 && err >= -0xff) {
    7abc:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
    7ac0:	bf32      	itee	cc
    7ac2:	230e      	movcc	r3, #14
		return -err;
    7ac4:	4243      	negcs	r3, r0
    7ac6:	b2db      	uxtbcs	r3, r3
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    7ac8:	7423      	strb	r3, [r4, #16]
}
    7aca:	4628      	mov	r0, r5
    7acc:	b003      	add	sp, #12
    7ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
	data->buf = net_buf_alloc(&prep_pool, K_NO_WAIT);
    7ad0:	2200      	movs	r2, #0
    7ad2:	2300      	movs	r3, #0
    7ad4:	480a      	ldr	r0, [pc, #40]	; (7b00 <prep_write_cb+0x78>)
    7ad6:	f00c fa7c 	bl	13fd2 <net_buf_alloc_fixed>
    7ada:	6060      	str	r0, [r4, #4]
	if (!data->buf) {
    7adc:	b908      	cbnz	r0, 7ae2 <prep_write_cb+0x5a>
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    7ade:	2309      	movs	r3, #9
    7ae0:	e7f2      	b.n	7ac8 <prep_write_cb+0x40>
	attr_data->handle = attr->handle;
    7ae2:	8a33      	ldrh	r3, [r6, #16]
	net_buf_add_mem(data->buf, data->value, data->len);
    7ae4:	89a2      	ldrh	r2, [r4, #12]
	attr_data->handle = attr->handle;
    7ae6:	8283      	strh	r3, [r0, #20]
	attr_data->offset = data->offset;
    7ae8:	89e3      	ldrh	r3, [r4, #14]
	net_buf_add_mem(data->buf, data->value, data->len);
    7aea:	68a1      	ldr	r1, [r4, #8]
	attr_data->offset = data->offset;
    7aec:	82c3      	strh	r3, [r0, #22]
	net_buf_add_mem(data->buf, data->value, data->len);
    7aee:	3008      	adds	r0, #8
    7af0:	f00c fa98 	bl	14024 <net_buf_simple_add_mem>
	data->err = 0U;
    7af4:	2300      	movs	r3, #0
	return BT_GATT_ITER_CONTINUE;
    7af6:	2501      	movs	r5, #1
	data->err = 0U;
    7af8:	7423      	strb	r3, [r4, #16]
	return BT_GATT_ITER_CONTINUE;
    7afa:	e7e6      	b.n	7aca <prep_write_cb+0x42>
		return BT_GATT_ITER_STOP;
    7afc:	2500      	movs	r5, #0
    7afe:	e7e4      	b.n	7aca <prep_write_cb+0x42>
    7b00:	20000750 	.word	0x20000750

00007b04 <bt_att_create_pdu>:
{
    7b04:	b570      	push	{r4, r5, r6, lr}
    7b06:	460e      	mov	r6, r1
    7b08:	4615      	mov	r5, r2
	att = att_chan_get(conn);
    7b0a:	f7ff ff99 	bl	7a40 <att_chan_get>
	if (!att) {
    7b0e:	4604      	mov	r4, r0
    7b10:	b148      	cbz	r0, 7b26 <bt_att_create_pdu+0x22>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    7b12:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
    7b16:	1c6b      	adds	r3, r5, #1
    7b18:	4293      	cmp	r3, r2
    7b1a:	d906      	bls.n	7b2a <bt_att_create_pdu+0x26>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    7b1c:	2157      	movs	r1, #87	; 0x57
    7b1e:	4813      	ldr	r0, [pc, #76]	; (7b6c <bt_att_create_pdu+0x68>)
    7b20:	f009 f95c 	bl	10ddc <printk>
		return NULL;
    7b24:	2400      	movs	r4, #0
}
    7b26:	4620      	mov	r0, r4
    7b28:	bd70      	pop	{r4, r5, r6, pc}
	switch (att_op_get_type(op)) {
    7b2a:	4630      	mov	r0, r6
    7b2c:	f00b f8d1 	bl	12cd2 <att_op_get_type>
    7b30:	2802      	cmp	r0, #2
    7b32:	d001      	beq.n	7b38 <bt_att_create_pdu+0x34>
    7b34:	2804      	cmp	r0, #4
    7b36:	d10e      	bne.n	7b56 <bt_att_create_pdu+0x52>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
    7b38:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    7b3c:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
    7b3e:	2100      	movs	r1, #0
    7b40:	4608      	mov	r0, r1
    7b42:	f00a ffcc 	bl	12ade <bt_l2cap_create_pdu_timeout>
    7b46:	4604      	mov	r4, r0
	if (!buf) {
    7b48:	b950      	cbnz	r0, 7b60 <bt_att_create_pdu+0x5c>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
    7b4a:	4632      	mov	r2, r6
    7b4c:	2145      	movs	r1, #69	; 0x45
    7b4e:	4808      	ldr	r0, [pc, #32]	; (7b70 <bt_att_create_pdu+0x6c>)
    7b50:	f009 f944 	bl	10ddc <printk>
		return NULL;
    7b54:	e7e7      	b.n	7b26 <bt_att_create_pdu+0x22>
		buf = bt_l2cap_create_pdu(NULL, 0);
    7b56:	f04f 32ff 	mov.w	r2, #4294967295
    7b5a:	f04f 33ff 	mov.w	r3, #4294967295
    7b5e:	e7ee      	b.n	7b3e <bt_att_create_pdu+0x3a>
	hdr = net_buf_add(buf, sizeof(*hdr));
    7b60:	2101      	movs	r1, #1
    7b62:	3008      	adds	r0, #8
    7b64:	f004 f8f8 	bl	bd58 <net_buf_simple_add>
	hdr->code = op;
    7b68:	7006      	strb	r6, [r0, #0]
	return buf;
    7b6a:	e7dc      	b.n	7b26 <bt_att_create_pdu+0x22>
    7b6c:	0001883d 	.word	0x0001883d
    7b70:	000182a2 	.word	0x000182a2

00007b74 <att_indicate>:
{
    7b74:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    7b76:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    7b78:	f101 0008 	add.w	r0, r1, #8
{
    7b7c:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    7b7e:	f00c fa3d 	bl	13ffc <net_buf_simple_pull_le16>
	bt_gatt_notification(conn, handle, buf->data, buf->len);
    7b82:	89a3      	ldrh	r3, [r4, #12]
	handle = net_buf_pull_le16(buf);
    7b84:	4601      	mov	r1, r0
	bt_gatt_notification(conn, handle, buf->data, buf->len);
    7b86:	68a2      	ldr	r2, [r4, #8]
    7b88:	4628      	mov	r0, r5
    7b8a:	f00b fe0e 	bl	137aa <bt_gatt_notification>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    7b8e:	2200      	movs	r2, #0
    7b90:	211e      	movs	r1, #30
    7b92:	4628      	mov	r0, r5
    7b94:	f7ff ffb6 	bl	7b04 <bt_att_create_pdu>
	if (!buf) {
    7b98:	4602      	mov	r2, r0
    7b9a:	b130      	cbz	r0, 7baa <att_indicate+0x36>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent, NULL);
    7b9c:	2300      	movs	r3, #0
    7b9e:	2104      	movs	r1, #4
    7ba0:	9300      	str	r3, [sp, #0]
    7ba2:	4628      	mov	r0, r5
    7ba4:	4b02      	ldr	r3, [pc, #8]	; (7bb0 <att_indicate+0x3c>)
    7ba6:	f00a ff9d 	bl	12ae4 <bt_l2cap_send_cb>
}
    7baa:	2000      	movs	r0, #0
    7bac:	b003      	add	sp, #12
    7bae:	bd30      	pop	{r4, r5, pc}
    7bb0:	00012fd7 	.word	0x00012fd7

00007bb4 <att_mtu_req>:
	mtu_client = sys_le16_to_cpu(req->mtu);
    7bb4:	688b      	ldr	r3, [r1, #8]
{
    7bb6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	mtu_client = sys_le16_to_cpu(req->mtu);
    7bba:	881e      	ldrh	r6, [r3, #0]
{
    7bbc:	4605      	mov	r5, r0
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    7bbe:	2e16      	cmp	r6, #22
    7bc0:	d922      	bls.n	7c08 <att_mtu_req+0x54>
	struct bt_conn *conn = att->chan.chan.conn;
    7bc2:	f8d0 8000 	ldr.w	r8, [r0]
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    7bc6:	2202      	movs	r2, #2
    7bc8:	2103      	movs	r1, #3
    7bca:	4640      	mov	r0, r8
    7bcc:	f7ff ff9a 	bl	7b04 <bt_att_create_pdu>
	if (!pdu) {
    7bd0:	4607      	mov	r7, r0
    7bd2:	b1d8      	cbz	r0, 7c0c <att_mtu_req+0x58>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    7bd4:	2102      	movs	r1, #2
    7bd6:	3008      	adds	r0, #8
    7bd8:	f004 f8be 	bl	bd58 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    7bdc:	2400      	movs	r4, #0
    7bde:	f06f 0308 	mvn.w	r3, #8
    7be2:	7044      	strb	r4, [r0, #1]
    7be4:	7003      	strb	r3, [r0, #0]
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent, NULL);
    7be6:	463a      	mov	r2, r7
    7be8:	2104      	movs	r1, #4
    7bea:	4640      	mov	r0, r8
    7bec:	4b08      	ldr	r3, [pc, #32]	; (7c10 <att_mtu_req+0x5c>)
    7bee:	9400      	str	r4, [sp, #0]
    7bf0:	f00a ff78 	bl	12ae4 <bt_l2cap_send_cb>
	att->chan.rx.mtu = MIN(mtu_client, mtu_server);
    7bf4:	2ef7      	cmp	r6, #247	; 0xf7
    7bf6:	bf28      	it	cs
    7bf8:	26f7      	movcs	r6, #247	; 0xf7
	return 0;
    7bfa:	4620      	mov	r0, r4
	att->chan.rx.mtu = MIN(mtu_client, mtu_server);
    7bfc:	87ee      	strh	r6, [r5, #62]	; 0x3e
	att->chan.tx.mtu = att->chan.rx.mtu;
    7bfe:	f8a5 604a 	strh.w	r6, [r5, #74]	; 0x4a
}
    7c02:	b002      	add	sp, #8
    7c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_INVALID_PDU;
    7c08:	2004      	movs	r0, #4
    7c0a:	e7fa      	b.n	7c02 <att_mtu_req+0x4e>
		return BT_ATT_ERR_UNLIKELY;
    7c0c:	200e      	movs	r0, #14
    7c0e:	e7f8      	b.n	7c02 <att_mtu_req+0x4e>
    7c10:	00013001 	.word	0x00013001

00007c14 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    7c14:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    7c18:	4688      	mov	r8, r1
    7c1a:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    7c1c:	2101      	movs	r1, #1
    7c1e:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    7c20:	4605      	mov	r5, r0
    7c22:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    7c24:	f7ff ff6e 	bl	7b04 <bt_att_create_pdu>
	if (!buf) {
    7c28:	4604      	mov	r4, r0
    7c2a:	b180      	cbz	r0, 7c4e <send_err_rsp.part.0+0x3a>
	rsp = net_buf_add(buf, sizeof(*rsp));
    7c2c:	2104      	movs	r1, #4
    7c2e:	3008      	adds	r0, #8
    7c30:	f004 f892 	bl	bd58 <net_buf_simple_add>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent, NULL);
    7c34:	2300      	movs	r3, #0
	rsp->request = req;
    7c36:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
    7c3a:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
    7c3e:	70c6      	strb	r6, [r0, #3]
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent, NULL);
    7c40:	4622      	mov	r2, r4
    7c42:	9300      	str	r3, [sp, #0]
    7c44:	2104      	movs	r1, #4
    7c46:	4628      	mov	r0, r5
    7c48:	4b02      	ldr	r3, [pc, #8]	; (7c54 <send_err_rsp.part.0+0x40>)
    7c4a:	f00a ff4b 	bl	12ae4 <bt_l2cap_send_cb>
}
    7c4e:	b002      	add	sp, #8
    7c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7c54:	00013001 	.word	0x00013001

00007c58 <bt_att_recv>:
{
    7c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    7c5a:	898b      	ldrh	r3, [r1, #12]
{
    7c5c:	4604      	mov	r4, r0
    7c5e:	460e      	mov	r6, r1
	if (buf->len < sizeof(*hdr)) {
    7c60:	b92b      	cbnz	r3, 7c6e <bt_att_recv+0x16>
		BT_ERR("Too small ATT PDU received");
    7c62:	2145      	movs	r1, #69	; 0x45
    7c64:	4836      	ldr	r0, [pc, #216]	; (7d40 <bt_att_recv+0xe8>)
			BT_WARN("Ignoring unexpected indication");
    7c66:	f009 f8b9 	bl	10ddc <printk>
}
    7c6a:	2000      	movs	r0, #0
    7c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    7c6e:	2101      	movs	r1, #1
    7c70:	f106 0008 	add.w	r0, r6, #8
    7c74:	f004 f84e 	bl	bd14 <net_buf_simple_pull_mem>
		if (hdr->code == handlers[i].op) {
    7c78:	4932      	ldr	r1, [pc, #200]	; (7d44 <bt_att_recv+0xec>)
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    7c7a:	4605      	mov	r5, r0
		if (hdr->code == handlers[i].op) {
    7c7c:	7802      	ldrb	r2, [r0, #0]
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    7c7e:	2300      	movs	r3, #0
    7c80:	4608      	mov	r0, r1
		if (hdr->code == handlers[i].op) {
    7c82:	f811 7033 	ldrb.w	r7, [r1, r3, lsl #3]
    7c86:	4297      	cmp	r7, r2
    7c88:	d116      	bne.n	7cb8 <bt_att_recv+0x60>
		if (handler->type == ATT_REQUEST &&
    7c8a:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
    7c8e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    7c92:	789f      	ldrb	r7, [r3, #2]
    7c94:	2f01      	cmp	r7, #1
    7c96:	d124      	bne.n	7ce2 <bt_att_recv+0x8a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7c98:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
    7c9c:	e8d2 3fef 	ldaex	r3, [r2]
    7ca0:	f043 0101 	orr.w	r1, r3, #1
    7ca4:	e8c2 1fee 	stlex	lr, r1, [r2]
    7ca8:	f1be 0f00 	cmp.w	lr, #0
    7cac:	d1f6      	bne.n	7c9c <bt_att_recv+0x44>
    7cae:	07da      	lsls	r2, r3, #31
    7cb0:	d529      	bpl.n	7d06 <bt_att_recv+0xae>
			BT_WARN("Ignoring unexpected request");
    7cb2:	2157      	movs	r1, #87	; 0x57
    7cb4:	4824      	ldr	r0, [pc, #144]	; (7d48 <bt_att_recv+0xf0>)
    7cb6:	e7d6      	b.n	7c66 <bt_att_recv+0xe>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    7cb8:	3301      	adds	r3, #1
    7cba:	2b1b      	cmp	r3, #27
    7cbc:	d1e1      	bne.n	7c82 <bt_att_recv+0x2a>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
    7cbe:	2157      	movs	r1, #87	; 0x57
    7cc0:	4822      	ldr	r0, [pc, #136]	; (7d4c <bt_att_recv+0xf4>)
    7cc2:	f009 f88b 	bl	10ddc <printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    7cc6:	7829      	ldrb	r1, [r5, #0]
    7cc8:	4608      	mov	r0, r1
    7cca:	f00b f802 	bl	12cd2 <att_op_get_type>
    7cce:	2800      	cmp	r0, #0
    7cd0:	d0cb      	beq.n	7c6a <bt_att_recv+0x12>
	if (!req) {
    7cd2:	2900      	cmp	r1, #0
    7cd4:	d0c9      	beq.n	7c6a <bt_att_recv+0x12>
    7cd6:	2306      	movs	r3, #6
    7cd8:	2200      	movs	r2, #0
    7cda:	6820      	ldr	r0, [r4, #0]
    7cdc:	f7ff ff9a 	bl	7c14 <send_err_rsp.part.0>
    7ce0:	e7c3      	b.n	7c6a <bt_att_recv+0x12>
		} else if (handler->type == ATT_INDICATION &&
    7ce2:	2f05      	cmp	r7, #5
    7ce4:	d10f      	bne.n	7d06 <bt_att_recv+0xae>
    7ce6:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
    7cea:	e8d2 3fef 	ldaex	r3, [r2]
    7cee:	f043 0102 	orr.w	r1, r3, #2
    7cf2:	e8c2 1fee 	stlex	lr, r1, [r2]
    7cf6:	f1be 0f00 	cmp.w	lr, #0
    7cfa:	d1f6      	bne.n	7cea <bt_att_recv+0x92>
    7cfc:	079b      	lsls	r3, r3, #30
    7cfe:	d502      	bpl.n	7d06 <bt_att_recv+0xae>
			BT_WARN("Ignoring unexpected indication");
    7d00:	2157      	movs	r1, #87	; 0x57
    7d02:	4813      	ldr	r0, [pc, #76]	; (7d50 <bt_att_recv+0xf8>)
    7d04:	e7af      	b.n	7c66 <bt_att_recv+0xe>
	if (buf->len < handler->expect_len) {
    7d06:	eb00 030c 	add.w	r3, r0, ip
    7d0a:	89b2      	ldrh	r2, [r6, #12]
    7d0c:	7859      	ldrb	r1, [r3, #1]
    7d0e:	4291      	cmp	r1, r2
    7d10:	d908      	bls.n	7d24 <bt_att_recv+0xcc>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    7d12:	2145      	movs	r1, #69	; 0x45
    7d14:	782b      	ldrb	r3, [r5, #0]
    7d16:	480f      	ldr	r0, [pc, #60]	; (7d54 <bt_att_recv+0xfc>)
    7d18:	f009 f860 	bl	10ddc <printk>
	if (handler->type == ATT_REQUEST && err) {
    7d1c:	2f01      	cmp	r7, #1
    7d1e:	d1a4      	bne.n	7c6a <bt_att_recv+0x12>
		err = BT_ATT_ERR_INVALID_PDU;
    7d20:	2304      	movs	r3, #4
    7d22:	e008      	b.n	7d36 <bt_att_recv+0xde>
		err = handler->func(att, buf);
    7d24:	685b      	ldr	r3, [r3, #4]
    7d26:	4631      	mov	r1, r6
    7d28:	4620      	mov	r0, r4
    7d2a:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    7d2c:	2f01      	cmp	r7, #1
		err = handler->func(att, buf);
    7d2e:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    7d30:	d19b      	bne.n	7c6a <bt_att_recv+0x12>
    7d32:	2800      	cmp	r0, #0
    7d34:	d099      	beq.n	7c6a <bt_att_recv+0x12>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    7d36:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    7d38:	2900      	cmp	r1, #0
    7d3a:	d096      	beq.n	7c6a <bt_att_recv+0x12>
    7d3c:	e7cc      	b.n	7cd8 <bt_att_recv+0x80>
    7d3e:	bf00      	nop
    7d40:	00018867 	.word	0x00018867
    7d44:	00015ae4 	.word	0x00015ae4
    7d48:	00018887 	.word	0x00018887
    7d4c:	000188f0 	.word	0x000188f0
    7d50:	000188a8 	.word	0x000188a8
    7d54:	000188cc 	.word	0x000188cc

00007d58 <att_write_rsp>:
{
    7d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    7d5c:	460d      	mov	r5, r1
    7d5e:	3900      	subs	r1, #0
    7d60:	bf18      	it	ne
    7d62:	2101      	movne	r1, #1
{
    7d64:	b088      	sub	sp, #32
    7d66:	4606      	mov	r6, r0
    7d68:	4690      	mov	r8, r2
    7d6a:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    7d6c:	f00b fd49 	bl	13802 <bt_gatt_change_aware>
    7d70:	2800      	cmp	r0, #0
    7d72:	d04e      	beq.n	7e12 <att_write_rsp+0xba>
	if (!handle) {
    7d74:	2f00      	cmp	r7, #0
    7d76:	d04e      	beq.n	7e16 <att_write_rsp+0xbe>
	(void)memset(&data, 0, sizeof(data));
    7d78:	2218      	movs	r2, #24
    7d7a:	2100      	movs	r1, #0
    7d7c:	a802      	add	r0, sp, #8
    7d7e:	f00a fa19 	bl	121b4 <memset>
	if (rsp) {
    7d82:	f1b8 0f00 	cmp.w	r8, #0
    7d86:	d124      	bne.n	7dd2 <att_write_rsp+0x7a>
	data.offset = offset;
    7d88:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    7d8c:	4639      	mov	r1, r7
	data.offset = offset;
    7d8e:	f8ad 301a 	strh.w	r3, [sp, #26]
	data.value = value;
    7d92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    7d94:	4638      	mov	r0, r7
	data.value = value;
    7d96:	9305      	str	r3, [sp, #20]
	data.len = len;
    7d98:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    7d9c:	4a1f      	ldr	r2, [pc, #124]	; (7e1c <att_write_rsp+0xc4>)
	data.len = len;
    7d9e:	f8ad 3018 	strh.w	r3, [sp, #24]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    7da2:	2301      	movs	r3, #1
    7da4:	f88d 301c 	strb.w	r3, [sp, #28]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    7da8:	ab02      	add	r3, sp, #8
	data.conn = conn;
    7daa:	9602      	str	r6, [sp, #8]
	data.req = req;
    7dac:	f88d 5010 	strb.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    7db0:	f00a ffcb 	bl	12d4a <bt_gatt_foreach_attr>
	if (data.err) {
    7db4:	f89d 401c 	ldrb.w	r4, [sp, #28]
    7db8:	b30c      	cbz	r4, 7dfe <att_write_rsp+0xa6>
		if (rsp) {
    7dba:	f1b8 0f00 	cmp.w	r8, #0
    7dbe:	d019      	beq.n	7df4 <att_write_rsp+0x9c>
			net_buf_unref(data.buf);
    7dc0:	9803      	ldr	r0, [sp, #12]
    7dc2:	f003 fe57 	bl	ba74 <net_buf_unref>
	if (!req) {
    7dc6:	b975      	cbnz	r5, 7de6 <att_write_rsp+0x8e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    7dc8:	2400      	movs	r4, #0
}
    7dca:	4620      	mov	r0, r4
    7dcc:	b008      	add	sp, #32
    7dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    7dd2:	2200      	movs	r2, #0
    7dd4:	4641      	mov	r1, r8
    7dd6:	4630      	mov	r0, r6
    7dd8:	f7ff fe94 	bl	7b04 <bt_att_create_pdu>
    7ddc:	9003      	str	r0, [sp, #12]
		if (!data.buf) {
    7dde:	2800      	cmp	r0, #0
    7de0:	d1d2      	bne.n	7d88 <att_write_rsp+0x30>
			return BT_ATT_ERR_UNLIKELY;
    7de2:	240e      	movs	r4, #14
    7de4:	e7f1      	b.n	7dca <att_write_rsp+0x72>
    7de6:	463a      	mov	r2, r7
    7de8:	4629      	mov	r1, r5
    7dea:	4630      	mov	r0, r6
    7dec:	f89d 301c 	ldrb.w	r3, [sp, #28]
    7df0:	f7ff ff10 	bl	7c14 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    7df4:	2d18      	cmp	r5, #24
    7df6:	d1e7      	bne.n	7dc8 <att_write_rsp+0x70>
    7df8:	f89d 401c 	ldrb.w	r4, [sp, #28]
    7dfc:	e7e5      	b.n	7dca <att_write_rsp+0x72>
	if (data.buf) {
    7dfe:	9a03      	ldr	r2, [sp, #12]
    7e00:	2a00      	cmp	r2, #0
    7e02:	d0e1      	beq.n	7dc8 <att_write_rsp+0x70>
		(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    7e04:	2104      	movs	r1, #4
    7e06:	4630      	mov	r0, r6
    7e08:	4b05      	ldr	r3, [pc, #20]	; (7e20 <att_write_rsp+0xc8>)
    7e0a:	9400      	str	r4, [sp, #0]
    7e0c:	f00a fe6a 	bl	12ae4 <bt_l2cap_send_cb>
    7e10:	e7db      	b.n	7dca <att_write_rsp+0x72>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    7e12:	2412      	movs	r4, #18
    7e14:	e7d9      	b.n	7dca <att_write_rsp+0x72>
		return BT_ATT_ERR_INVALID_HANDLE;
    7e16:	2401      	movs	r4, #1
    7e18:	e7d7      	b.n	7dca <att_write_rsp+0x72>
    7e1a:	bf00      	nop
    7e1c:	0001302b 	.word	0x0001302b
    7e20:	00013001 	.word	0x00013001

00007e24 <att_exec_write_req>:
{
    7e24:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	u8_t err = 0U;
    7e28:	2400      	movs	r4, #0
	return att_exec_write_rsp(att, req->flags);
    7e2a:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    7e2c:	6807      	ldr	r7, [r0, #0]
	return att_exec_write_rsp(att, req->flags);
    7e2e:	f893 8000 	ldrb.w	r8, [r3]
	while ((buf = net_buf_get(&att->prep_queue, K_NO_WAIT))) {
    7e32:	f500 768a 	add.w	r6, r0, #276	; 0x114
    7e36:	2200      	movs	r2, #0
    7e38:	2300      	movs	r3, #0
    7e3a:	4630      	mov	r0, r6
    7e3c:	f003 fd88 	bl	b950 <net_buf_get>
    7e40:	4605      	mov	r5, r0
    7e42:	b988      	cbnz	r0, 7e68 <att_exec_write_req+0x44>
	if (err) {
    7e44:	bb64      	cbnz	r4, 7ea0 <att_exec_write_req+0x7c>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_EXEC_WRITE_RSP, 0);
    7e46:	4622      	mov	r2, r4
    7e48:	2119      	movs	r1, #25
    7e4a:	4638      	mov	r0, r7
    7e4c:	f7ff fe5a 	bl	7b04 <bt_att_create_pdu>
	if (!buf) {
    7e50:	4602      	mov	r2, r0
    7e52:	b338      	cbz	r0, 7ea4 <att_exec_write_req+0x80>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent, NULL);
    7e54:	2104      	movs	r1, #4
    7e56:	4638      	mov	r0, r7
    7e58:	4b13      	ldr	r3, [pc, #76]	; (7ea8 <att_exec_write_req+0x84>)
    7e5a:	9400      	str	r4, [sp, #0]
    7e5c:	f00a fe42 	bl	12ae4 <bt_l2cap_send_cb>
}
    7e60:	4620      	mov	r0, r4
    7e62:	b004      	add	sp, #16
    7e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!err && flags == BT_ATT_FLAG_EXEC) {
    7e68:	b9b4      	cbnz	r4, 7e98 <att_exec_write_req+0x74>
    7e6a:	f1b8 0f01 	cmp.w	r8, #1
    7e6e:	d113      	bne.n	7e98 <att_exec_write_req+0x74>
			err = att_write_rsp(conn, BT_ATT_OP_EXEC_WRITE_REQ, 0,
    7e70:	89aa      	ldrh	r2, [r5, #12]
    7e72:	8aab      	ldrh	r3, [r5, #20]
    7e74:	9202      	str	r2, [sp, #8]
    7e76:	68aa      	ldr	r2, [r5, #8]
    7e78:	2118      	movs	r1, #24
    7e7a:	9201      	str	r2, [sp, #4]
    7e7c:	8aea      	ldrh	r2, [r5, #22]
    7e7e:	4638      	mov	r0, r7
    7e80:	9200      	str	r2, [sp, #0]
    7e82:	4622      	mov	r2, r4
    7e84:	f7ff ff68 	bl	7d58 <att_write_rsp>
			if (err) {
    7e88:	4604      	mov	r4, r0
    7e8a:	b128      	cbz	r0, 7e98 <att_exec_write_req+0x74>
	if (!req) {
    7e8c:	4603      	mov	r3, r0
    7e8e:	2118      	movs	r1, #24
    7e90:	4638      	mov	r0, r7
    7e92:	8aaa      	ldrh	r2, [r5, #20]
    7e94:	f7ff febe 	bl	7c14 <send_err_rsp.part.0>
		net_buf_unref(buf);
    7e98:	4628      	mov	r0, r5
    7e9a:	f003 fdeb 	bl	ba74 <net_buf_unref>
    7e9e:	e7ca      	b.n	7e36 <att_exec_write_req+0x12>
		return 0;
    7ea0:	4604      	mov	r4, r0
    7ea2:	e7dd      	b.n	7e60 <att_exec_write_req+0x3c>
		return BT_ATT_ERR_UNLIKELY;
    7ea4:	240e      	movs	r4, #14
    7ea6:	e7db      	b.n	7e60 <att_exec_write_req+0x3c>
    7ea8:	00013001 	.word	0x00013001

00007eac <att_prepare_write_req>:
{
    7eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7eb0:	460c      	mov	r4, r1
    7eb2:	4606      	mov	r6, r0
	req = net_buf_pull_mem(buf, sizeof(*req));
    7eb4:	2104      	movs	r1, #4
{
    7eb6:	b089      	sub	sp, #36	; 0x24
	req = net_buf_pull_mem(buf, sizeof(*req));
    7eb8:	f104 0008 	add.w	r0, r4, #8
    7ebc:	f003 ff2a 	bl	bd14 <net_buf_simple_pull_mem>
	struct bt_conn *conn = att->chan.chan.conn;
    7ec0:	6835      	ldr	r5, [r6, #0]
	handle = sys_le16_to_cpu(req->handle);
    7ec2:	f8b0 a000 	ldrh.w	sl, [r0]
	offset = sys_le16_to_cpu(req->offset);
    7ec6:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!bt_gatt_change_aware(conn, true)) {
    7eca:	2101      	movs	r1, #1
    7ecc:	4628      	mov	r0, r5
	return att_prep_write_rsp(att, handle, offset, buf->data, buf->len);
    7ece:	f8d4 8008 	ldr.w	r8, [r4, #8]
    7ed2:	89a7      	ldrh	r7, [r4, #12]
	handle = sys_le16_to_cpu(req->handle);
    7ed4:	fa1f fb8a 	uxth.w	fp, sl
	if (!bt_gatt_change_aware(conn, true)) {
    7ed8:	f00b fc93 	bl	13802 <bt_gatt_change_aware>
    7edc:	2800      	cmp	r0, #0
    7ede:	d04c      	beq.n	7f7a <att_prepare_write_req+0xce>
	if (!handle) {
    7ee0:	f1bb 0f00 	cmp.w	fp, #0
    7ee4:	d04b      	beq.n	7f7e <att_prepare_write_req+0xd2>
	(void)memset(&data, 0, sizeof(data));
    7ee6:	2214      	movs	r2, #20
    7ee8:	2100      	movs	r1, #0
    7eea:	a803      	add	r0, sp, #12
    7eec:	f00a f962 	bl	121b4 <memset>
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    7ef0:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    7ef2:	4659      	mov	r1, fp
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    7ef4:	f88d 301c 	strb.w	r3, [sp, #28]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    7ef8:	4658      	mov	r0, fp
    7efa:	4a23      	ldr	r2, [pc, #140]	; (7f88 <att_prepare_write_req+0xdc>)
    7efc:	ab03      	add	r3, sp, #12
	data.conn = conn;
    7efe:	9503      	str	r5, [sp, #12]
	data.offset = offset;
    7f00:	f8ad 901a 	strh.w	r9, [sp, #26]
	data.value = value;
    7f04:	f8cd 8014 	str.w	r8, [sp, #20]
	data.len = len;
    7f08:	f8ad 7018 	strh.w	r7, [sp, #24]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    7f0c:	f00a ff1d 	bl	12d4a <bt_gatt_foreach_attr>
	if (data.err) {
    7f10:	f89d 401c 	ldrb.w	r4, [sp, #28]
    7f14:	b154      	cbz	r4, 7f2c <att_prepare_write_req+0x80>
	if (!req) {
    7f16:	4623      	mov	r3, r4
    7f18:	465a      	mov	r2, fp
    7f1a:	2116      	movs	r1, #22
    7f1c:	4628      	mov	r0, r5
    7f1e:	f7ff fe79 	bl	7c14 <send_err_rsp.part.0>
		return 0;
    7f22:	2400      	movs	r4, #0
}
    7f24:	4620      	mov	r0, r4
    7f26:	b009      	add	sp, #36	; 0x24
    7f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_buf_put(&att->prep_queue, data.buf);
    7f2c:	9904      	ldr	r1, [sp, #16]
    7f2e:	f506 708a 	add.w	r0, r6, #276	; 0x114
    7f32:	f003 fd6b 	bl	ba0c <net_buf_put>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_PREPARE_WRITE_RSP, 0);
    7f36:	4622      	mov	r2, r4
    7f38:	2117      	movs	r1, #23
    7f3a:	4628      	mov	r0, r5
    7f3c:	f7ff fde2 	bl	7b04 <bt_att_create_pdu>
    7f40:	9004      	str	r0, [sp, #16]
	if (!data.buf) {
    7f42:	b1f0      	cbz	r0, 7f82 <att_prepare_write_req+0xd6>
	rsp = net_buf_add(data.buf, sizeof(*rsp));
    7f44:	2104      	movs	r1, #4
    7f46:	3008      	adds	r0, #8
    7f48:	f003 ff06 	bl	bd58 <net_buf_simple_add>
    7f4c:	4606      	mov	r6, r0
	rsp->handle = sys_cpu_to_le16(handle);
    7f4e:	f8a0 a000 	strh.w	sl, [r0]
	rsp->offset = sys_cpu_to_le16(offset);
    7f52:	f8a0 9002 	strh.w	r9, [r0, #2]
	net_buf_add(data.buf, len);
    7f56:	9804      	ldr	r0, [sp, #16]
    7f58:	4639      	mov	r1, r7
    7f5a:	3008      	adds	r0, #8
    7f5c:	f003 fefc 	bl	bd58 <net_buf_simple_add>
	memcpy(rsp->value, value, len);
    7f60:	463a      	mov	r2, r7
    7f62:	4641      	mov	r1, r8
    7f64:	1d30      	adds	r0, r6, #4
    7f66:	f00a f8fa 	bl	1215e <memcpy>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    7f6a:	2104      	movs	r1, #4
    7f6c:	4628      	mov	r0, r5
    7f6e:	4b07      	ldr	r3, [pc, #28]	; (7f8c <att_prepare_write_req+0xe0>)
    7f70:	9a04      	ldr	r2, [sp, #16]
    7f72:	9400      	str	r4, [sp, #0]
    7f74:	f00a fdb6 	bl	12ae4 <bt_l2cap_send_cb>
	return 0;
    7f78:	e7d4      	b.n	7f24 <att_prepare_write_req+0x78>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    7f7a:	2412      	movs	r4, #18
    7f7c:	e7d2      	b.n	7f24 <att_prepare_write_req+0x78>
		return BT_ATT_ERR_INVALID_HANDLE;
    7f7e:	2401      	movs	r4, #1
    7f80:	e7d0      	b.n	7f24 <att_prepare_write_req+0x78>
		return BT_ATT_ERR_UNLIKELY;
    7f82:	240e      	movs	r4, #14
    7f84:	e7ce      	b.n	7f24 <att_prepare_write_req+0x78>
    7f86:	bf00      	nop
    7f88:	00007a89 	.word	0x00007a89
    7f8c:	00013001 	.word	0x00013001

00007f90 <att_read_group_req>:
{
    7f90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u8_t uuid_len = buf->len - sizeof(*req);
    7f94:	7b0c      	ldrb	r4, [r1, #12]
{
    7f96:	4606      	mov	r6, r0
	u8_t uuid_len = buf->len - sizeof(*req);
    7f98:	3c04      	subs	r4, #4
    7f9a:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    7f9c:	2c02      	cmp	r4, #2
{
    7f9e:	4608      	mov	r0, r1
    7fa0:	b08f      	sub	sp, #60	; 0x3c
	if (uuid_len != 2 && uuid_len != 16) {
    7fa2:	d001      	beq.n	7fa8 <att_read_group_req+0x18>
    7fa4:	2c10      	cmp	r4, #16
    7fa6:	d16f      	bne.n	8088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>
	req = net_buf_pull_mem(buf, sizeof(*req));
    7fa8:	2104      	movs	r1, #4
    7faa:	3008      	adds	r0, #8
	struct bt_conn *conn = att->chan.chan.conn;
    7fac:	f8d6 9000 	ldr.w	r9, [r6]
	req = net_buf_pull_mem(buf, sizeof(*req));
    7fb0:	f003 feb0 	bl	bd14 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    7fb4:	f10d 0810 	add.w	r8, sp, #16
	start_handle = sys_le16_to_cpu(req->start_handle);
    7fb8:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    7fba:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    7fbc:	1d01      	adds	r1, r0, #4
    7fbe:	4622      	mov	r2, r4
    7fc0:	4640      	mov	r0, r8
    7fc2:	f00a f991 	bl	122e8 <bt_uuid_create>
    7fc6:	2800      	cmp	r0, #0
    7fc8:	d060      	beq.n	808c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>
	if (!start || !end) {
    7fca:	2d00      	cmp	r5, #0
    7fcc:	d036      	beq.n	803c <CONFIG_FPROTECT_BLOCK_SIZE+0x3c>
    7fce:	2400      	movs	r4, #0
    7fd0:	b39f      	cbz	r7, 803a <CONFIG_FPROTECT_BLOCK_SIZE+0x3a>
	if (start > end) {
    7fd2:	42bd      	cmp	r5, r7
    7fd4:	d832      	bhi.n	803c <CONFIG_FPROTECT_BLOCK_SIZE+0x3c>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    7fd6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    7fda:	4640      	mov	r0, r8
    7fdc:	a903      	add	r1, sp, #12
    7fde:	f88d 400c 	strb.w	r4, [sp, #12]
    7fe2:	f8ad 300e 	strh.w	r3, [sp, #14]
    7fe6:	f00a f955 	bl	12294 <bt_uuid_cmp>
    7fea:	bb90      	cbnz	r0, 8052 <CONFIG_FPROTECT_BLOCK_SIZE+0x52>
	struct bt_conn *conn = att->chan.chan.conn;
    7fec:	f8d6 9000 	ldr.w	r9, [r6]
	(void)memset(&data, 0, sizeof(data));
    7ff0:	2214      	movs	r2, #20
    7ff2:	2100      	movs	r1, #0
    7ff4:	a809      	add	r0, sp, #36	; 0x24
    7ff6:	f00a f8dd 	bl	121b4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    7ffa:	2201      	movs	r2, #1
    7ffc:	2111      	movs	r1, #17
    7ffe:	4648      	mov	r0, r9
    8000:	f7ff fd80 	bl	7b04 <bt_att_create_pdu>
    8004:	900b      	str	r0, [sp, #44]	; 0x2c
	if (!data.buf) {
    8006:	2800      	cmp	r0, #0
    8008:	d040      	beq.n	808c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    800a:	2101      	movs	r1, #1
    800c:	3008      	adds	r0, #8
	data.uuid = uuid;
    800e:	e9cd 6809 	strd	r6, r8, [sp, #36]	; 0x24
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    8012:	f003 fea1 	bl	bd58 <net_buf_simple_add>
	data.rsp->len = 0U;
    8016:	2600      	movs	r6, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    8018:	900c      	str	r0, [sp, #48]	; 0x30
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    801a:	ab09      	add	r3, sp, #36	; 0x24
	data.rsp->len = 0U;
    801c:	7006      	strb	r6, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    801e:	4639      	mov	r1, r7
    8020:	4628      	mov	r0, r5
    8022:	4a1b      	ldr	r2, [pc, #108]	; (8090 <CONFIG_FPROTECT_BLOCK_SIZE+0x90>)
	data.group = NULL;
    8024:	960d      	str	r6, [sp, #52]	; 0x34
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    8026:	f00a fe90 	bl	12d4a <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    802a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    802c:	781c      	ldrb	r4, [r3, #0]
    802e:	bb1c      	cbnz	r4, 8078 <CONFIG_FPROTECT_BLOCK_SIZE+0x78>
		net_buf_unref(data.buf);
    8030:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8032:	f003 fd1f 	bl	ba74 <net_buf_unref>
	if (!req) {
    8036:	230a      	movs	r3, #10
    8038:	e018      	b.n	806c <CONFIG_FPROTECT_BLOCK_SIZE+0x6c>
			*err = 0U;
    803a:	463d      	mov	r5, r7
	if (!req) {
    803c:	2301      	movs	r3, #1
    803e:	462a      	mov	r2, r5
    8040:	2110      	movs	r1, #16
    8042:	4648      	mov	r0, r9
    8044:	f7ff fde6 	bl	7c14 <send_err_rsp.part.0>
		return 0;
    8048:	2400      	movs	r4, #0
}
    804a:	4620      	mov	r0, r4
    804c:	b00f      	add	sp, #60	; 0x3c
    804e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    8052:	f642 0301 	movw	r3, #10241	; 0x2801
    8056:	4640      	mov	r0, r8
    8058:	a909      	add	r1, sp, #36	; 0x24
    805a:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
    805e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    8062:	f00a f917 	bl	12294 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    8066:	2800      	cmp	r0, #0
    8068:	d0c0      	beq.n	7fec <att_read_group_req+0x5c>
	if (!req) {
    806a:	2310      	movs	r3, #16
    806c:	462a      	mov	r2, r5
    806e:	2110      	movs	r1, #16
    8070:	4648      	mov	r0, r9
    8072:	f7ff fdcf 	bl	7c14 <send_err_rsp.part.0>
		return 0;
    8076:	e7e8      	b.n	804a <CONFIG_FPROTECT_BLOCK_SIZE+0x4a>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    8078:	2104      	movs	r1, #4
    807a:	4648      	mov	r0, r9
    807c:	4b05      	ldr	r3, [pc, #20]	; (8094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>)
    807e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8080:	9600      	str	r6, [sp, #0]
    8082:	f00a fd2f 	bl	12ae4 <bt_l2cap_send_cb>
	return 0;
    8086:	e7df      	b.n	8048 <CONFIG_FPROTECT_BLOCK_SIZE+0x48>
		return BT_ATT_ERR_INVALID_PDU;
    8088:	2404      	movs	r4, #4
    808a:	e7de      	b.n	804a <CONFIG_FPROTECT_BLOCK_SIZE+0x4a>
		return BT_ATT_ERR_UNLIKELY;
    808c:	240e      	movs	r4, #14
    808e:	e7dc      	b.n	804a <CONFIG_FPROTECT_BLOCK_SIZE+0x4a>
    8090:	00012dfb 	.word	0x00012dfb
    8094:	00013001 	.word	0x00013001

00008098 <att_read_mult_req>:
{
    8098:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    809c:	6806      	ldr	r6, [r0, #0]
{
    809e:	b089      	sub	sp, #36	; 0x24
	(void)memset(&data, 0, sizeof(data));
    80a0:	2214      	movs	r2, #20
{
    80a2:	4605      	mov	r5, r0
    80a4:	460c      	mov	r4, r1
	(void)memset(&data, 0, sizeof(data));
    80a6:	a803      	add	r0, sp, #12
    80a8:	2100      	movs	r1, #0
    80aa:	f00a f883 	bl	121b4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    80ae:	2200      	movs	r2, #0
    80b0:	210f      	movs	r1, #15
    80b2:	4630      	mov	r0, r6
    80b4:	f7ff fd26 	bl	7b04 <bt_att_create_pdu>
    80b8:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
    80ba:	b378      	cbz	r0, 811c <att_read_mult_req+0x84>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    80bc:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    80c0:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8124 <att_read_mult_req+0x8c>
	data.att = att;
    80c4:	9503      	str	r5, [sp, #12]
		handle = net_buf_pull_le16(buf);
    80c6:	f104 0708 	add.w	r7, r4, #8
	while (buf->len >= sizeof(u16_t)) {
    80ca:	89a3      	ldrh	r3, [r4, #12]
    80cc:	2b01      	cmp	r3, #1
    80ce:	d808      	bhi.n	80e2 <att_read_mult_req+0x4a>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    80d0:	2400      	movs	r4, #0
    80d2:	2104      	movs	r1, #4
    80d4:	4630      	mov	r0, r6
    80d6:	4b12      	ldr	r3, [pc, #72]	; (8120 <att_read_mult_req+0x88>)
    80d8:	9a05      	ldr	r2, [sp, #20]
    80da:	9400      	str	r4, [sp, #0]
    80dc:	f00a fd02 	bl	12ae4 <bt_l2cap_send_cb>
	return 0;
    80e0:	e018      	b.n	8114 <att_read_mult_req+0x7c>
		handle = net_buf_pull_le16(buf);
    80e2:	4638      	mov	r0, r7
    80e4:	f00b ff8a 	bl	13ffc <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    80e8:	ab03      	add	r3, sp, #12
    80ea:	464a      	mov	r2, r9
    80ec:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    80ee:	4605      	mov	r5, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    80f0:	f88d 801c 	strb.w	r8, [sp, #28]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    80f4:	f00a fe29 	bl	12d4a <bt_gatt_foreach_attr>
		if (data.err) {
    80f8:	f89d 301c 	ldrb.w	r3, [sp, #28]
    80fc:	2b00      	cmp	r3, #0
    80fe:	d0e4      	beq.n	80ca <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    8100:	9805      	ldr	r0, [sp, #20]
    8102:	f003 fcb7 	bl	ba74 <net_buf_unref>
	if (!req) {
    8106:	462a      	mov	r2, r5
    8108:	210e      	movs	r1, #14
    810a:	4630      	mov	r0, r6
    810c:	f89d 301c 	ldrb.w	r3, [sp, #28]
    8110:	f7ff fd80 	bl	7c14 <send_err_rsp.part.0>
			return 0;
    8114:	2000      	movs	r0, #0
}
    8116:	b009      	add	sp, #36	; 0x24
    8118:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    811c:	200e      	movs	r0, #14
    811e:	e7fa      	b.n	8116 <att_read_mult_req+0x7e>
    8120:	00013001 	.word	0x00013001
    8124:	00013087 	.word	0x00013087

00008128 <att_read_rsp>:
{
    8128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    812c:	6806      	ldr	r6, [r0, #0]
{
    812e:	4604      	mov	r4, r0
    8130:	460f      	mov	r7, r1
    8132:	b088      	sub	sp, #32
	if (!bt_gatt_change_aware(conn, true)) {
    8134:	2101      	movs	r1, #1
    8136:	4630      	mov	r0, r6
{
    8138:	4690      	mov	r8, r2
    813a:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
    813c:	f00b fb61 	bl	13802 <bt_gatt_change_aware>
    8140:	b3a0      	cbz	r0, 81ac <att_read_rsp+0x84>
	if (!handle) {
    8142:	b3ad      	cbz	r5, 81b0 <att_read_rsp+0x88>
	(void)memset(&data, 0, sizeof(data));
    8144:	2214      	movs	r2, #20
    8146:	2100      	movs	r1, #0
    8148:	a803      	add	r0, sp, #12
    814a:	f00a f833 	bl	121b4 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    814e:	2200      	movs	r2, #0
    8150:	4641      	mov	r1, r8
    8152:	4630      	mov	r0, r6
    8154:	f7ff fcd6 	bl	7b04 <bt_att_create_pdu>
    8158:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
    815a:	b358      	cbz	r0, 81b4 <att_read_rsp+0x8c>
	data.offset = offset;
    815c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    8160:	4629      	mov	r1, r5
	data.offset = offset;
    8162:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    8166:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    8168:	4628      	mov	r0, r5
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    816a:	f88d 301c 	strb.w	r3, [sp, #28]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    816e:	4a12      	ldr	r2, [pc, #72]	; (81b8 <att_read_rsp+0x90>)
    8170:	ab03      	add	r3, sp, #12
	data.att = att;
    8172:	9403      	str	r4, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    8174:	f00a fde9 	bl	12d4a <bt_gatt_foreach_attr>
	if (data.err) {
    8178:	f89d 401c 	ldrb.w	r4, [sp, #28]
    817c:	b174      	cbz	r4, 819c <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    817e:	9805      	ldr	r0, [sp, #20]
    8180:	f003 fc78 	bl	ba74 <net_buf_unref>
	if (!req) {
    8184:	462a      	mov	r2, r5
    8186:	4639      	mov	r1, r7
    8188:	4630      	mov	r0, r6
    818a:	f89d 301c 	ldrb.w	r3, [sp, #28]
    818e:	f7ff fd41 	bl	7c14 <send_err_rsp.part.0>
		return 0;
    8192:	2400      	movs	r4, #0
}
    8194:	4620      	mov	r0, r4
    8196:	b008      	add	sp, #32
    8198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    819c:	2104      	movs	r1, #4
    819e:	4630      	mov	r0, r6
    81a0:	4b06      	ldr	r3, [pc, #24]	; (81bc <att_read_rsp+0x94>)
    81a2:	9a05      	ldr	r2, [sp, #20]
    81a4:	9400      	str	r4, [sp, #0]
    81a6:	f00a fc9d 	bl	12ae4 <bt_l2cap_send_cb>
	return 0;
    81aa:	e7f3      	b.n	8194 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    81ac:	2412      	movs	r4, #18
    81ae:	e7f1      	b.n	8194 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    81b0:	2401      	movs	r4, #1
    81b2:	e7ef      	b.n	8194 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    81b4:	240e      	movs	r4, #14
    81b6:	e7ed      	b.n	8194 <att_read_rsp+0x6c>
    81b8:	00013087 	.word	0x00013087
    81bc:	00013001 	.word	0x00013001

000081c0 <att_read_type_req>:
{
    81c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u8_t uuid_len = buf->len - sizeof(*req);
    81c4:	7b0c      	ldrb	r4, [r1, #12]
{
    81c6:	4606      	mov	r6, r0
	u8_t uuid_len = buf->len - sizeof(*req);
    81c8:	3c04      	subs	r4, #4
    81ca:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    81cc:	2c02      	cmp	r4, #2
{
    81ce:	4608      	mov	r0, r1
    81d0:	b08f      	sub	sp, #60	; 0x3c
	if (uuid_len != 2 && uuid_len != 16) {
    81d2:	d001      	beq.n	81d8 <att_read_type_req+0x18>
    81d4:	2c10      	cmp	r4, #16
    81d6:	d152      	bne.n	827e <att_read_type_req+0xbe>
	req = net_buf_pull_mem(buf, sizeof(*req));
    81d8:	2104      	movs	r1, #4
    81da:	3008      	adds	r0, #8
	struct bt_conn *conn = att->chan.chan.conn;
    81dc:	f8d6 9000 	ldr.w	r9, [r6]
	req = net_buf_pull_mem(buf, sizeof(*req));
    81e0:	f003 fd98 	bl	bd14 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    81e4:	f10d 080c 	add.w	r8, sp, #12
	start_handle = sys_le16_to_cpu(req->start_handle);
    81e8:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    81ea:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    81ec:	1d01      	adds	r1, r0, #4
    81ee:	4622      	mov	r2, r4
    81f0:	4640      	mov	r0, r8
    81f2:	f00a f879 	bl	122e8 <bt_uuid_create>
    81f6:	b188      	cbz	r0, 821c <att_read_type_req+0x5c>
	if (!start || !end) {
    81f8:	b19d      	cbz	r5, 8222 <att_read_type_req+0x62>
    81fa:	b18f      	cbz	r7, 8220 <att_read_type_req+0x60>
	if (start > end) {
    81fc:	42bd      	cmp	r5, r7
    81fe:	d810      	bhi.n	8222 <att_read_type_req+0x62>
	struct bt_conn *conn = att->chan.chan.conn;
    8200:	f8d6 9000 	ldr.w	r9, [r6]
	(void)memset(&data, 0, sizeof(data));
    8204:	2218      	movs	r2, #24
    8206:	2100      	movs	r1, #0
    8208:	a808      	add	r0, sp, #32
    820a:	f009 ffd3 	bl	121b4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    820e:	2201      	movs	r2, #1
    8210:	2109      	movs	r1, #9
    8212:	4648      	mov	r0, r9
    8214:	f7ff fc76 	bl	7b04 <bt_att_create_pdu>
    8218:	900a      	str	r0, [sp, #40]	; 0x28
	if (!data.buf) {
    821a:	b968      	cbnz	r0, 8238 <att_read_type_req+0x78>
		return BT_ATT_ERR_UNLIKELY;
    821c:	240e      	movs	r4, #14
    821e:	e007      	b.n	8230 <att_read_type_req+0x70>
			*err = 0U;
    8220:	463d      	mov	r5, r7
	if (!req) {
    8222:	2301      	movs	r3, #1
    8224:	462a      	mov	r2, r5
    8226:	2108      	movs	r1, #8
    8228:	4648      	mov	r0, r9
    822a:	f7ff fcf3 	bl	7c14 <send_err_rsp.part.0>
		return 0;
    822e:	2400      	movs	r4, #0
}
    8230:	4620      	mov	r0, r4
    8232:	b00f      	add	sp, #60	; 0x3c
    8234:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    8238:	2101      	movs	r1, #1
    823a:	3008      	adds	r0, #8
	data.uuid = uuid;
    823c:	e9cd 6808 	strd	r6, r8, [sp, #32]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    8240:	f003 fd8a 	bl	bd58 <net_buf_simple_add>
	data.rsp->len = 0U;
    8244:	2600      	movs	r6, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    8246:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    8248:	900b      	str	r0, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    824a:	4639      	mov	r1, r7
	data.rsp->len = 0U;
    824c:	7006      	strb	r6, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    824e:	4a0d      	ldr	r2, [pc, #52]	; (8284 <att_read_type_req+0xc4>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    8250:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    8254:	4628      	mov	r0, r5
    8256:	ab08      	add	r3, sp, #32
    8258:	f00a fd77 	bl	12d4a <bt_gatt_foreach_attr>
	if (data.err) {
    825c:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
    8260:	b12c      	cbz	r4, 826e <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    8262:	980a      	ldr	r0, [sp, #40]	; 0x28
    8264:	f003 fc06 	bl	ba74 <net_buf_unref>
	if (!req) {
    8268:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    826c:	e7da      	b.n	8224 <att_read_type_req+0x64>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    826e:	2104      	movs	r1, #4
    8270:	4648      	mov	r0, r9
    8272:	4b05      	ldr	r3, [pc, #20]	; (8288 <att_read_type_req+0xc8>)
    8274:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8276:	9400      	str	r4, [sp, #0]
    8278:	f00a fc34 	bl	12ae4 <bt_l2cap_send_cb>
	return 0;
    827c:	e7d8      	b.n	8230 <att_read_type_req+0x70>
		return BT_ATT_ERR_INVALID_PDU;
    827e:	2404      	movs	r4, #4
    8280:	e7d6      	b.n	8230 <att_read_type_req+0x70>
    8282:	bf00      	nop
    8284:	00012ec7 	.word	0x00012ec7
    8288:	00013001 	.word	0x00013001

0000828c <att_find_type_req>:
{
    828c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8290:	4688      	mov	r8, r1
	struct bt_conn *conn = att->chan.chan.conn;
    8292:	f8d0 9000 	ldr.w	r9, [r0]
{
    8296:	4607      	mov	r7, r0
	req = net_buf_pull_mem(buf, sizeof(*req));
    8298:	2106      	movs	r1, #6
{
    829a:	b089      	sub	sp, #36	; 0x24
	req = net_buf_pull_mem(buf, sizeof(*req));
    829c:	f108 0008 	add.w	r0, r8, #8
    82a0:	f003 fd38 	bl	bd14 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    82a4:	8806      	ldrh	r6, [r0, #0]
	if (!start || !end) {
    82a6:	b316      	cbz	r6, 82ee <att_find_type_req+0x62>
	end_handle = sys_le16_to_cpu(req->end_handle);
    82a8:	f8b0 a002 	ldrh.w	sl, [r0, #2]
	if (!start || !end) {
    82ac:	f1ba 0f00 	cmp.w	sl, #0
    82b0:	d01c      	beq.n	82ec <att_find_type_req+0x60>
	if (start > end) {
    82b2:	45b2      	cmp	sl, r6
    82b4:	d31b      	bcc.n	82ee <att_find_type_req+0x62>
	type = sys_le16_to_cpu(req->type);
    82b6:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    82b8:	2400      	movs	r4, #0
    82ba:	f8ad 300a 	strh.w	r3, [sp, #10]
    82be:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    82c2:	a903      	add	r1, sp, #12
    82c4:	a802      	add	r0, sp, #8
	value = buf->data;
    82c6:	f8d8 b008 	ldr.w	fp, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    82ca:	f88d 4008 	strb.w	r4, [sp, #8]
    82ce:	f88d 400c 	strb.w	r4, [sp, #12]
    82d2:	f8ad 300e 	strh.w	r3, [sp, #14]
    82d6:	f009 ffdd 	bl	12294 <bt_uuid_cmp>
    82da:	4605      	mov	r5, r0
    82dc:	b190      	cbz	r0, 8304 <att_find_type_req+0x78>
	if (!req) {
    82de:	230a      	movs	r3, #10
    82e0:	4632      	mov	r2, r6
    82e2:	2106      	movs	r1, #6
    82e4:	4648      	mov	r0, r9
    82e6:	f7ff fc95 	bl	7c14 <send_err_rsp.part.0>
		return 0;
    82ea:	e007      	b.n	82fc <att_find_type_req+0x70>
			*err = 0U;
    82ec:	4656      	mov	r6, sl
	if (!req) {
    82ee:	2301      	movs	r3, #1
    82f0:	4632      	mov	r2, r6
    82f2:	2106      	movs	r1, #6
    82f4:	4648      	mov	r0, r9
    82f6:	f7ff fc8d 	bl	7c14 <send_err_rsp.part.0>
		return 0;
    82fa:	2400      	movs	r4, #0
}
    82fc:	4620      	mov	r0, r4
    82fe:	b009      	add	sp, #36	; 0x24
    8300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return att_find_type_rsp(att, start_handle, end_handle, value,
    8304:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = att->chan.chan.conn;
    8308:	f8d7 8000 	ldr.w	r8, [r7]
	(void)memset(&data, 0, sizeof(data));
    830c:	4601      	mov	r1, r0
    830e:	2214      	movs	r2, #20
    8310:	a803      	add	r0, sp, #12
    8312:	f009 ff4f 	bl	121b4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    8316:	462a      	mov	r2, r5
    8318:	2107      	movs	r1, #7
    831a:	4640      	mov	r0, r8
    831c:	f7ff fbf2 	bl	7b04 <bt_att_create_pdu>
    8320:	9004      	str	r0, [sp, #16]
	if (!data.buf) {
    8322:	b308      	cbz	r0, 8368 <att_find_type_req+0xdc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    8324:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    8326:	4651      	mov	r1, sl
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    8328:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    832c:	4630      	mov	r0, r6
    832e:	4a0f      	ldr	r2, [pc, #60]	; (836c <att_find_type_req+0xe0>)
    8330:	ab03      	add	r3, sp, #12
	data.value_len = value_len;
    8332:	f88d 401c 	strb.w	r4, [sp, #28]
	data.value = value;
    8336:	e9cd 5b05 	strd	r5, fp, [sp, #20]
	data.att = att;
    833a:	9703      	str	r7, [sp, #12]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    833c:	f00a fd05 	bl	12d4a <bt_gatt_foreach_attr>
	if (data.err) {
    8340:	f89d 401d 	ldrb.w	r4, [sp, #29]
    8344:	b144      	cbz	r4, 8358 <att_find_type_req+0xcc>
		net_buf_unref(data.buf);
    8346:	9804      	ldr	r0, [sp, #16]
    8348:	f003 fb94 	bl	ba74 <net_buf_unref>
	if (!req) {
    834c:	4632      	mov	r2, r6
    834e:	2106      	movs	r1, #6
    8350:	4640      	mov	r0, r8
    8352:	f89d 301d 	ldrb.w	r3, [sp, #29]
    8356:	e7ce      	b.n	82f6 <att_find_type_req+0x6a>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    8358:	2104      	movs	r1, #4
    835a:	4640      	mov	r0, r8
    835c:	4b04      	ldr	r3, [pc, #16]	; (8370 <att_find_type_req+0xe4>)
    835e:	9a04      	ldr	r2, [sp, #16]
    8360:	9400      	str	r4, [sp, #0]
    8362:	f00a fbbf 	bl	12ae4 <bt_l2cap_send_cb>
	return 0;
    8366:	e7c9      	b.n	82fc <att_find_type_req+0x70>
		return BT_ATT_ERR_UNLIKELY;
    8368:	240e      	movs	r4, #14
	return att_find_type_rsp(att, start_handle, end_handle, value,
    836a:	e7c7      	b.n	82fc <att_find_type_req+0x70>
    836c:	0000771d 	.word	0x0000771d
    8370:	00013001 	.word	0x00013001

00008374 <att_find_info_req>:
{
    8374:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    8376:	688b      	ldr	r3, [r1, #8]
{
    8378:	4607      	mov	r7, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
    837a:	881d      	ldrh	r5, [r3, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    837c:	6806      	ldr	r6, [r0, #0]
{
    837e:	b087      	sub	sp, #28
	if (!start || !end) {
    8380:	b195      	cbz	r5, 83a8 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    8382:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    8384:	b17c      	cbz	r4, 83a6 <att_find_info_req+0x32>
	if (start > end) {
    8386:	42ac      	cmp	r4, r5
    8388:	d30e      	bcc.n	83a8 <att_find_info_req+0x34>
	(void)memset(&data, 0, sizeof(data));
    838a:	2210      	movs	r2, #16
    838c:	2100      	movs	r1, #0
    838e:	a802      	add	r0, sp, #8
    8390:	f009 ff10 	bl	121b4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    8394:	2200      	movs	r2, #0
    8396:	2105      	movs	r1, #5
    8398:	4630      	mov	r0, r6
    839a:	f7ff fbb3 	bl	7b04 <bt_att_create_pdu>
    839e:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    83a0:	b958      	cbnz	r0, 83ba <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    83a2:	200e      	movs	r0, #14
	return att_find_info_rsp(att, start_handle, end_handle);
    83a4:	e007      	b.n	83b6 <att_find_info_req+0x42>
			*err = 0U;
    83a6:	4625      	mov	r5, r4
	if (!req) {
    83a8:	2301      	movs	r3, #1
    83aa:	462a      	mov	r2, r5
    83ac:	2104      	movs	r1, #4
    83ae:	4630      	mov	r0, r6
    83b0:	f7ff fc30 	bl	7c14 <send_err_rsp.part.0>
		return 0;
    83b4:	2000      	movs	r0, #0
}
    83b6:	b007      	add	sp, #28
    83b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    83ba:	4621      	mov	r1, r4
    83bc:	4628      	mov	r0, r5
    83be:	4a0a      	ldr	r2, [pc, #40]	; (83e8 <att_find_info_req+0x74>)
    83c0:	ab02      	add	r3, sp, #8
	data.att = att;
    83c2:	9702      	str	r7, [sp, #8]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    83c4:	f00a fcc1 	bl	12d4a <bt_gatt_foreach_attr>
	if (!data.rsp) {
    83c8:	9c04      	ldr	r4, [sp, #16]
    83ca:	b924      	cbnz	r4, 83d6 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    83cc:	9803      	ldr	r0, [sp, #12]
    83ce:	f003 fb51 	bl	ba74 <net_buf_unref>
	if (!req) {
    83d2:	230a      	movs	r3, #10
    83d4:	e7e9      	b.n	83aa <att_find_info_req+0x36>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    83d6:	2400      	movs	r4, #0
    83d8:	2104      	movs	r1, #4
    83da:	4630      	mov	r0, r6
    83dc:	4b03      	ldr	r3, [pc, #12]	; (83ec <att_find_info_req+0x78>)
    83de:	9a03      	ldr	r2, [sp, #12]
    83e0:	9400      	str	r4, [sp, #0]
    83e2:	f00a fb7f 	bl	12ae4 <bt_l2cap_send_cb>
	return 0;
    83e6:	e7e5      	b.n	83b4 <att_find_info_req+0x40>
    83e8:	00012d61 	.word	0x00012d61
    83ec:	00013001 	.word	0x00013001

000083f0 <bt_att_req_alloc>:
	/* tx and rx MTU shall be symmetric */
	return att->chan.tx.mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    83f0:	b513      	push	{r0, r1, r4, lr}
	struct bt_att_req *req = NULL;
    83f2:	2400      	movs	r4, #0
{
    83f4:	4602      	mov	r2, r0
    83f6:	460b      	mov	r3, r1

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    83f8:	4807      	ldr	r0, [pc, #28]	; (8418 <bt_att_req_alloc+0x28>)
    83fa:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
    83fc:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    83fe:	f005 fd29 	bl	de54 <k_mem_slab_alloc>
    8402:	4601      	mov	r1, r0
    8404:	b930      	cbnz	r0, 8414 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
    8406:	221c      	movs	r2, #28
    8408:	9801      	ldr	r0, [sp, #4]
    840a:	f009 fed3 	bl	121b4 <memset>

	return req;
    840e:	9801      	ldr	r0, [sp, #4]
}
    8410:	b002      	add	sp, #8
    8412:	bd10      	pop	{r4, pc}
		return NULL;
    8414:	4620      	mov	r0, r4
    8416:	e7fb      	b.n	8410 <bt_att_req_alloc+0x20>
    8418:	200004c8 	.word	0x200004c8

0000841c <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    841c:	b507      	push	{r0, r1, r2, lr}
    841e:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
    8420:	a901      	add	r1, sp, #4
    8422:	4803      	ldr	r0, [pc, #12]	; (8430 <bt_att_req_free+0x14>)
    8424:	f005 fd82 	bl	df2c <k_mem_slab_free>
}
    8428:	b003      	add	sp, #12
    842a:	f85d fb04 	ldr.w	pc, [sp], #4
    842e:	bf00      	nop
    8430:	200004c8 	.word	0x200004c8

00008434 <att_handle_rsp>:
{
    8434:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    8438:	4604      	mov	r4, r0
	k_delayed_work_cancel(&att->timeout_work);
    843a:	30c0      	adds	r0, #192	; 0xc0
{
    843c:	460e      	mov	r6, r1
    843e:	4617      	mov	r7, r2
    8440:	4698      	mov	r8, r3
	k_delayed_work_cancel(&att->timeout_work);
    8442:	f007 fd2f 	bl	fea4 <k_delayed_work_cancel>
	if (!att->req) {
    8446:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
    844a:	f04f 0a00 	mov.w	sl, #0
    844e:	b9f5      	cbnz	r5, 848e <att_handle_rsp+0x5a>
		BT_WARN("No pending ATT request");
    8450:	2157      	movs	r1, #87	; 0x57
    8452:	481d      	ldr	r0, [pc, #116]	; (84c8 <att_handle_rsp+0x94>)
    8454:	f008 fcc2 	bl	10ddc <printk>
Z_GENLIST_IS_EMPTY(slist)
    8458:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
Z_GENLIST_GET(slist, snode)
    845c:	b159      	cbz	r1, 8476 <att_handle_rsp+0x42>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    845e:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
    8462:	680b      	ldr	r3, [r1, #0]
    8464:	4291      	cmp	r1, r2
	list->head = node;
    8466:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    846a:	d101      	bne.n	8470 <att_handle_rsp+0x3c>
	list->tail = node;
    846c:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
	att_send_req(att, ATT_REQ(node));
    8470:	4620      	mov	r0, r4
    8472:	f7ff fa61 	bl	7938 <att_send_req>
	if (func) {
    8476:	b135      	cbz	r5, 8486 <att_handle_rsp+0x52>
		func(att->chan.chan.conn, err, pdu, len, params);
    8478:	463b      	mov	r3, r7
    847a:	4632      	mov	r2, r6
    847c:	4641      	mov	r1, r8
    847e:	6820      	ldr	r0, [r4, #0]
    8480:	f8cd 9000 	str.w	r9, [sp]
    8484:	47a8      	blx	r5
}
    8486:	2000      	movs	r0, #0
    8488:	b002      	add	sp, #8
    848a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (att->req == &cancel) {
    848e:	4b0f      	ldr	r3, [pc, #60]	; (84cc <att_handle_rsp+0x98>)
    8490:	429d      	cmp	r5, r3
    8492:	d103      	bne.n	849c <att_handle_rsp+0x68>
	bt_att_func_t func = NULL;
    8494:	4655      	mov	r5, sl
		att->req = NULL;
    8496:	f8c4 a0b4 	str.w	sl, [r4, #180]	; 0xb4
		goto process;
    849a:	e7dd      	b.n	8458 <att_handle_rsp+0x24>
	if (att->req->buf) {
    849c:	6928      	ldr	r0, [r5, #16]
    849e:	b128      	cbz	r0, 84ac <att_handle_rsp+0x78>
		net_buf_unref(att->req->buf);
    84a0:	f003 fae8 	bl	ba74 <net_buf_unref>
		att->req->buf = NULL;
    84a4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    84a8:	f8c3 a010 	str.w	sl, [r3, #16]
	att->req->func = NULL;
    84ac:	f04f 0a00 	mov.w	sl, #0
	func = att->req->func;
    84b0:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    84b4:	6845      	ldr	r5, [r0, #4]
	att->req->func = NULL;
    84b6:	f8c0 a004 	str.w	sl, [r0, #4]
	params = att->req->user_data;
    84ba:	f8d0 9018 	ldr.w	r9, [r0, #24]
	att_req_destroy(att->req);
    84be:	f00a fe62 	bl	13186 <att_req_destroy>
	att->req = NULL;
    84c2:	f8c4 a0b4 	str.w	sl, [r4, #180]	; 0xb4
    84c6:	e7c7      	b.n	8458 <att_handle_rsp+0x24>
    84c8:	0001890f 	.word	0x0001890f
    84cc:	20000f3c 	.word	0x20000f3c

000084d0 <att_error_rsp>:
	if (!att->req || att->req == &cancel) {
    84d0:	f8d0 20b4 	ldr.w	r2, [r0, #180]	; 0xb4
{
    84d4:	b570      	push	{r4, r5, r6, lr}
    84d6:	4604      	mov	r4, r0
	if (!att->req || att->req == &cancel) {
    84d8:	b352      	cbz	r2, 8530 <att_error_rsp+0x60>
    84da:	4b1a      	ldr	r3, [pc, #104]	; (8544 <att_error_rsp+0x74>)
    84dc:	429a      	cmp	r2, r3
    84de:	d027      	beq.n	8530 <att_error_rsp+0x60>
	if (att->req->buf) {
    84e0:	6913      	ldr	r3, [r2, #16]
	rsp = (void *)buf->data;
    84e2:	6888      	ldr	r0, [r1, #8]
	if (att->req->buf) {
    84e4:	b12b      	cbz	r3, 84f2 <att_error_rsp+0x22>
	buf->data = buf->__buf + state->offset;
    84e6:	8995      	ldrh	r5, [r2, #12]
    84e8:	6919      	ldr	r1, [r3, #16]
    84ea:	4429      	add	r1, r5
    84ec:	6099      	str	r1, [r3, #8]
	buf->len = state->len;
    84ee:	89d1      	ldrh	r1, [r2, #14]
    84f0:	8199      	strh	r1, [r3, #12]
	if (att->req->retrying) {
    84f2:	7d13      	ldrb	r3, [r2, #20]
	err = rsp->error;
    84f4:	78c5      	ldrb	r5, [r0, #3]
	if (att->req->retrying) {
    84f6:	b9e3      	cbnz	r3, 8532 <att_error_rsp+0x62>
	switch (err) {
    84f8:	2d05      	cmp	r5, #5
	if (!att_change_security(att->chan.chan.conn, err)) {
    84fa:	6820      	ldr	r0, [r4, #0]
	switch (err) {
    84fc:	d006      	beq.n	850c <att_error_rsp+0x3c>
    84fe:	2d0f      	cmp	r5, #15
    8500:	d117      	bne.n	8532 <att_error_rsp+0x62>
		if (conn->sec_level >= BT_SECURITY_L2)
    8502:	7a43      	ldrb	r3, [r0, #9]
    8504:	2b01      	cmp	r3, #1
    8506:	d814      	bhi.n	8532 <att_error_rsp+0x62>
		sec = BT_SECURITY_L2;
    8508:	2102      	movs	r1, #2
    850a:	e007      	b.n	851c <att_error_rsp+0x4c>
		if (conn->sec_level < BT_SECURITY_L2) {
    850c:	7a43      	ldrb	r3, [r0, #9]
    850e:	2b01      	cmp	r3, #1
    8510:	d9fa      	bls.n	8508 <att_error_rsp+0x38>
		} else if (conn->sec_level < BT_SECURITY_L3) {
    8512:	2b02      	cmp	r3, #2
    8514:	d00a      	beq.n	852c <att_error_rsp+0x5c>
		} else if (conn->sec_level < BT_SECURITY_L4) {
    8516:	2b03      	cmp	r3, #3
    8518:	d10b      	bne.n	8532 <att_error_rsp+0x62>
			sec = BT_SECURITY_L4;
    851a:	2104      	movs	r1, #4
	return bt_conn_set_security(conn, sec);
    851c:	f00a f918 	bl	12750 <bt_conn_set_security>
	if (!att_change_security(att->chan.chan.conn, err)) {
    8520:	b938      	cbnz	r0, 8532 <att_error_rsp+0x62>
		att->req->retrying = true;
    8522:	2201      	movs	r2, #1
    8524:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    8528:	751a      	strb	r2, [r3, #20]
}
    852a:	bd70      	pop	{r4, r5, r6, pc}
			sec = BT_SECURITY_L3;
    852c:	2103      	movs	r1, #3
    852e:	e7f5      	b.n	851c <att_error_rsp+0x4c>
		err = BT_ATT_ERR_UNLIKELY;
    8530:	250e      	movs	r5, #14
	return att_handle_rsp(att, NULL, 0, err);
    8532:	2200      	movs	r2, #0
    8534:	462b      	mov	r3, r5
    8536:	4620      	mov	r0, r4
}
    8538:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(att, NULL, 0, err);
    853c:	4611      	mov	r1, r2
    853e:	f7ff bf79 	b.w	8434 <att_handle_rsp>
    8542:	bf00      	nop
    8544:	20000f3c 	.word	0x20000f3c

00008548 <bt_att_encrypt_change>:
{
    8548:	b573      	push	{r0, r1, r4, r5, r6, lr}
    854a:	4604      	mov	r4, r0
	if (hci_status) {
    854c:	b151      	cbz	r1, 8564 <bt_att_encrypt_change+0x1c>
		if (att->req) {
    854e:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
    8552:	b38b      	cbz	r3, 85b8 <bt_att_encrypt_change+0x70>
			att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    8554:	2200      	movs	r2, #0
    8556:	2305      	movs	r3, #5
    8558:	4611      	mov	r1, r2
}
    855a:	b002      	add	sp, #8
    855c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    8560:	f7ff bf68 	b.w	8434 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
    8564:	6805      	ldr	r5, [r0, #0]
	bt_gatt_encrypt_change(conn);
    8566:	4628      	mov	r0, r5
    8568:	f001 fbf6 	bl	9d58 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
    856c:	7a6b      	ldrb	r3, [r5, #9]
    856e:	2b01      	cmp	r3, #1
    8570:	d022      	beq.n	85b8 <bt_att_encrypt_change+0x70>
	if (!att->req || !att->req->retrying) {
    8572:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    8576:	b1fb      	cbz	r3, 85b8 <bt_att_encrypt_change+0x70>
    8578:	7d1b      	ldrb	r3, [r3, #20]
    857a:	b1eb      	cbz	r3, 85b8 <bt_att_encrypt_change+0x70>
	k_sem_take(&att->tx_sem, K_FOREVER);
    857c:	f104 06e0 	add.w	r6, r4, #224	; 0xe0
    8580:	f04f 33ff 	mov.w	r3, #4294967295
    8584:	f04f 32ff 	mov.w	r2, #4294967295
    8588:	4630      	mov	r0, r6
    858a:	f007 f9e1 	bl	f950 <z_impl_k_sem_take>
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    858e:	6823      	ldr	r3, [r4, #0]
    8590:	7b5b      	ldrb	r3, [r3, #13]
    8592:	2b07      	cmp	r3, #7
    8594:	d012      	beq.n	85bc <bt_att_encrypt_change+0x74>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, att->req->buf,
    8596:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    859a:	2600      	movs	r6, #0
    859c:	6919      	ldr	r1, [r3, #16]
    859e:	6888      	ldr	r0, [r1, #8]
    85a0:	f7ff f92c 	bl	77fc <att_cb.isra.0>
    85a4:	9600      	str	r6, [sp, #0]
    85a6:	4603      	mov	r3, r0
    85a8:	460a      	mov	r2, r1
    85aa:	4628      	mov	r0, r5
    85ac:	2104      	movs	r1, #4
    85ae:	f00a fa99 	bl	12ae4 <bt_l2cap_send_cb>
	att->req->buf = NULL;
    85b2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    85b6:	611e      	str	r6, [r3, #16]
}
    85b8:	b002      	add	sp, #8
    85ba:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    85bc:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
    85c0:	e8d3 3faf 	lda	r3, [r3]
	if (!att_is_connected(att)) {
    85c4:	075b      	lsls	r3, r3, #29
    85c6:	d5e6      	bpl.n	8596 <bt_att_encrypt_change+0x4e>
		BT_WARN("Disconnected");
    85c8:	2157      	movs	r1, #87	; 0x57
    85ca:	4804      	ldr	r0, [pc, #16]	; (85dc <bt_att_encrypt_change+0x94>)
    85cc:	f008 fc06 	bl	10ddc <printk>
	z_impl_k_sem_give(sem);
    85d0:	4630      	mov	r0, r6
}
    85d2:	b002      	add	sp, #8
    85d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    85d8:	f007 b976 	b.w	f8c8 <z_impl_k_sem_give>
    85dc:	0001892b 	.word	0x0001892b

000085e0 <att_timeout>:
{
    85e0:	b510      	push	{r4, lr}
    85e2:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    85e4:	2145      	movs	r1, #69	; 0x45
    85e6:	4807      	ldr	r0, [pc, #28]	; (8604 <att_timeout+0x24>)
    85e8:	f008 fbf8 	bl	10ddc <printk>
	att_reset(att);
    85ec:	f1a4 00c0 	sub.w	r0, r4, #192	; 0xc0
    85f0:	f00a fe09 	bl	13206 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    85f4:	f854 0cc0 	ldr.w	r0, [r4, #-192]
    85f8:	f001 fc20 	bl	9e3c <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    85fc:	2300      	movs	r3, #0
    85fe:	f844 3cc0 	str.w	r3, [r4, #-192]
}
    8602:	bd10      	pop	{r4, pc}
    8604:	0001893d 	.word	0x0001893d

00008608 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
    8608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    860c:	460c      	mov	r4, r1
    860e:	4616      	mov	r6, r2
    8610:	4698      	mov	r8, r3
	struct bt_att *att;
	int err;

	__ASSERT_NO_MSG(conn);
    8612:	4607      	mov	r7, r0
    8614:	b958      	cbnz	r0, 862e <bt_att_send+0x26>
    8616:	4922      	ldr	r1, [pc, #136]	; (86a0 <bt_att_send+0x98>)
    8618:	4822      	ldr	r0, [pc, #136]	; (86a4 <bt_att_send+0x9c>)
    861a:	f640 03fc 	movw	r3, #2300	; 0x8fc
    861e:	4a22      	ldr	r2, [pc, #136]	; (86a8 <bt_att_send+0xa0>)
    8620:	f008 fbdc 	bl	10ddc <printk>
    8624:	f640 01fc 	movw	r1, #2300	; 0x8fc
    8628:	481f      	ldr	r0, [pc, #124]	; (86a8 <bt_att_send+0xa0>)
    862a:	f008 fe6d 	bl	11308 <assert_post_action>
	__ASSERT_NO_MSG(buf);
    862e:	b95c      	cbnz	r4, 8648 <bt_att_send+0x40>
    8630:	491e      	ldr	r1, [pc, #120]	; (86ac <bt_att_send+0xa4>)
    8632:	481c      	ldr	r0, [pc, #112]	; (86a4 <bt_att_send+0x9c>)
    8634:	f640 03fd 	movw	r3, #2301	; 0x8fd
    8638:	4a1b      	ldr	r2, [pc, #108]	; (86a8 <bt_att_send+0xa0>)
    863a:	f008 fbcf 	bl	10ddc <printk>
    863e:	f640 01fd 	movw	r1, #2301	; 0x8fd
    8642:	4819      	ldr	r0, [pc, #100]	; (86a8 <bt_att_send+0xa0>)
    8644:	f008 fe60 	bl	11308 <assert_post_action>

	att = att_chan_get(conn);
    8648:	4638      	mov	r0, r7
    864a:	f7ff f9f9 	bl	7a40 <att_chan_get>
	if (!att) {
    864e:	4605      	mov	r5, r0
    8650:	b938      	cbnz	r0, 8662 <bt_att_send+0x5a>
		net_buf_unref(buf);
    8652:	4620      	mov	r0, r4
    8654:	f003 fa0e 	bl	ba74 <net_buf_unref>
		return -ENOTCONN;
    8658:	f06f 0438 	mvn.w	r4, #56	; 0x38
		}
		return err;
	}

	return 0;
}
    865c:	4620      	mov	r0, r4
    865e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!cb) {
    8662:	b96e      	cbnz	r6, 8680 <bt_att_send+0x78>
	return z_impl_k_sem_take(sem, timeout);
    8664:	2200      	movs	r2, #0
    8666:	2300      	movs	r3, #0
    8668:	30e0      	adds	r0, #224	; 0xe0
    866a:	f007 f971 	bl	f950 <z_impl_k_sem_take>
		if (k_sem_take(&att->tx_sem, K_NO_WAIT) < 0) {
    866e:	2800      	cmp	r0, #0
    8670:	da06      	bge.n	8680 <bt_att_send+0x78>
			k_fifo_put(&att->tx_queue, buf);
    8672:	4621      	mov	r1, r4
    8674:	f105 00f8 	add.w	r0, r5, #248	; 0xf8
    8678:	f00c fcb5 	bl	14fe6 <k_queue_append>
			return 0;
    867c:	4634      	mov	r4, r6
    867e:	e7ed      	b.n	865c <bt_att_send+0x54>
	err = att_send(conn, buf, cb, user_data);
    8680:	4621      	mov	r1, r4
    8682:	4643      	mov	r3, r8
    8684:	4632      	mov	r2, r6
    8686:	4638      	mov	r0, r7
    8688:	f7ff f8ca 	bl	7820 <att_send>
	if (err) {
    868c:	4604      	mov	r4, r0
    868e:	2800      	cmp	r0, #0
    8690:	d0e4      	beq.n	865c <bt_att_send+0x54>
		if (!cb) {
    8692:	2e00      	cmp	r6, #0
    8694:	d1e2      	bne.n	865c <bt_att_send+0x54>
	z_impl_k_sem_give(sem);
    8696:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
    869a:	f007 f915 	bl	f8c8 <z_impl_k_sem_give>
}
    869e:	e7dd      	b.n	865c <bt_att_send+0x54>
    86a0:	00018271 	.word	0x00018271
    86a4:	00016493 	.word	0x00016493
    86a8:	00018758 	.word	0x00018758
    86ac:	00019246 	.word	0x00019246

000086b0 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
    86b0:	b538      	push	{r3, r4, r5, lr}
    86b2:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
    86b4:	4605      	mov	r5, r0
    86b6:	b958      	cbnz	r0, 86d0 <bt_att_req_send+0x20>
    86b8:	491c      	ldr	r1, [pc, #112]	; (872c <bt_att_req_send+0x7c>)
    86ba:	481d      	ldr	r0, [pc, #116]	; (8730 <bt_att_req_send+0x80>)
    86bc:	f640 131f 	movw	r3, #2335	; 0x91f
    86c0:	4a1c      	ldr	r2, [pc, #112]	; (8734 <bt_att_req_send+0x84>)
    86c2:	f008 fb8b 	bl	10ddc <printk>
    86c6:	f640 111f 	movw	r1, #2335	; 0x91f
    86ca:	481a      	ldr	r0, [pc, #104]	; (8734 <bt_att_req_send+0x84>)
    86cc:	f008 fe1c 	bl	11308 <assert_post_action>
	__ASSERT_NO_MSG(req);
    86d0:	b95c      	cbnz	r4, 86ea <bt_att_req_send+0x3a>
    86d2:	4919      	ldr	r1, [pc, #100]	; (8738 <bt_att_req_send+0x88>)
    86d4:	4816      	ldr	r0, [pc, #88]	; (8730 <bt_att_req_send+0x80>)
    86d6:	f44f 6312 	mov.w	r3, #2336	; 0x920
    86da:	4a16      	ldr	r2, [pc, #88]	; (8734 <bt_att_req_send+0x84>)
    86dc:	f008 fb7e 	bl	10ddc <printk>
    86e0:	f44f 6112 	mov.w	r1, #2336	; 0x920
    86e4:	4813      	ldr	r0, [pc, #76]	; (8734 <bt_att_req_send+0x84>)
    86e6:	f008 fe0f 	bl	11308 <assert_post_action>

	att = att_chan_get(conn);
    86ea:	4628      	mov	r0, r5
    86ec:	f7ff f9a8 	bl	7a40 <att_chan_get>
	if (!att) {
    86f0:	4605      	mov	r5, r0
    86f2:	b930      	cbnz	r0, 8702 <bt_att_req_send+0x52>
		net_buf_unref(req->buf);
    86f4:	6920      	ldr	r0, [r4, #16]
    86f6:	f003 f9bd 	bl	ba74 <net_buf_unref>
		req->buf = NULL;
		return -ENOTCONN;
    86fa:	f06f 0038 	mvn.w	r0, #56	; 0x38
		req->buf = NULL;
    86fe:	6125      	str	r5, [r4, #16]
		sys_slist_append(&att->reqs, &req->node);
		return 0;
	}

	return att_send_req(att, req);
}
    8700:	bd38      	pop	{r3, r4, r5, pc}
	if (att->req) {
    8702:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
    8706:	b163      	cbz	r3, 8722 <bt_att_req_send+0x72>
	parent->next = child;
    8708:	2000      	movs	r0, #0
    870a:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
    870c:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
    8710:	b91b      	cbnz	r3, 871a <bt_att_req_send+0x6a>
		return 0;
    8712:	4618      	mov	r0, r3
	list->head = node;
    8714:	e9c5 442e 	strd	r4, r4, [r5, #184]	; 0xb8
}
    8718:	e7f2      	b.n	8700 <bt_att_req_send+0x50>
	parent->next = child;
    871a:	601c      	str	r4, [r3, #0]
	list->tail = node;
    871c:	f8c5 40bc 	str.w	r4, [r5, #188]	; 0xbc
}
    8720:	e7ee      	b.n	8700 <bt_att_req_send+0x50>
	return att_send_req(att, req);
    8722:	4621      	mov	r1, r4
}
    8724:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return att_send_req(att, req);
    8728:	f7ff b906 	b.w	7938 <att_send_req>
    872c:	00018271 	.word	0x00018271
    8730:	00016493 	.word	0x00016493
    8734:	00018758 	.word	0x00018758
    8738:	000187dd 	.word	0x000187dd

0000873c <bt_att_req_cancel>:

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
    873c:	b510      	push	{r4, lr}
    873e:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("req %p", req);

	if (!conn || !req) {
    8740:	b370      	cbz	r0, 87a0 <bt_att_req_cancel+0x64>
    8742:	b369      	cbz	r1, 87a0 <bt_att_req_cancel+0x64>
		return;
	}

	att = att_chan_get(conn);
    8744:	f7ff f97c 	bl	7a40 <att_chan_get>
	if (!att) {
    8748:	b350      	cbz	r0, 87a0 <bt_att_req_cancel+0x64>
		return;
	}

	/* Check if request is outstanding */
	if (att->req == req) {
    874a:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
    874e:	429c      	cmp	r4, r3
    8750:	d107      	bne.n	8762 <bt_att_req_cancel+0x26>
		att->req = &cancel;
    8752:	4b14      	ldr	r3, [pc, #80]	; (87a4 <bt_att_req_cancel+0x68>)
    8754:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
	} else {
		/* Remove request from the list */
		sys_slist_find_and_remove(&att->reqs, &req->node);
	}

	att_req_destroy(req);
    8758:	4620      	mov	r0, r4
}
    875a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	att_req_destroy(req);
    875e:	f00a bd12 	b.w	13186 <att_req_destroy>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    8762:	2200      	movs	r2, #0
    8764:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
    8768:	2b00      	cmp	r3, #0
    876a:	d0f5      	beq.n	8758 <bt_att_req_cancel+0x1c>
    876c:	429c      	cmp	r4, r3
    876e:	d114      	bne.n	879a <bt_att_req_cancel+0x5e>
Z_GENLIST_REMOVE(slist, snode)
    8770:	6823      	ldr	r3, [r4, #0]
    8772:	b952      	cbnz	r2, 878a <bt_att_req_cancel+0x4e>
    8774:	f8d0 20bc 	ldr.w	r2, [r0, #188]	; 0xbc
	list->head = node;
    8778:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
Z_GENLIST_REMOVE(slist, snode)
    877c:	4294      	cmp	r4, r2
    877e:	d101      	bne.n	8784 <bt_att_req_cancel+0x48>
	list->tail = node;
    8780:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	parent->next = child;
    8784:	2300      	movs	r3, #0
    8786:	6023      	str	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    8788:	e7e6      	b.n	8758 <bt_att_req_cancel+0x1c>
	parent->next = child;
    878a:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    878c:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
    8790:	429c      	cmp	r4, r3
	list->tail = node;
    8792:	bf08      	it	eq
    8794:	f8c0 20bc 	streq.w	r2, [r0, #188]	; 0xbc
}
    8798:	e7f4      	b.n	8784 <bt_att_req_cancel+0x48>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    879a:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    879c:	681b      	ldr	r3, [r3, #0]
    879e:	e7e3      	b.n	8768 <bt_att_req_cancel+0x2c>
}
    87a0:	bd10      	pop	{r4, pc}
    87a2:	bf00      	nop
    87a4:	20000f3c 	.word	0x20000f3c

000087a8 <db_hash_set>:

static u8_t stored_hash[16];

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
    87a8:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
    87aa:	4618      	mov	r0, r3
{
    87ac:	4614      	mov	r4, r2
	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
    87ae:	4907      	ldr	r1, [pc, #28]	; (87cc <db_hash_set+0x24>)
    87b0:	2210      	movs	r2, #16
    87b2:	47a0      	blx	r4
	if (len < 0) {
    87b4:	1e04      	subs	r4, r0, #0
    87b6:	da06      	bge.n	87c6 <db_hash_set+0x1e>
		BT_ERR("Failed to decode value (err %zd)", len);
    87b8:	4622      	mov	r2, r4
    87ba:	2145      	movs	r1, #69	; 0x45
    87bc:	4804      	ldr	r0, [pc, #16]	; (87d0 <db_hash_set+0x28>)
    87be:	f008 fb0d 	bl	10ddc <printk>
	}

	BT_HEXDUMP_DBG(stored_hash, sizeof(stored_hash), "Stored Hash: ");

	return 0;
}
    87c2:	4620      	mov	r0, r4
    87c4:	bd10      	pop	{r4, pc}
	return 0;
    87c6:	2400      	movs	r4, #0
    87c8:	e7fb      	b.n	87c2 <db_hash_set+0x1a>
    87ca:	bf00      	nop
    87cc:	20002000 	.word	0x20002000
    87d0:	00018955 	.word	0x00018955

000087d4 <db_hash_store>:
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
    87d4:	2210      	movs	r2, #16
{
    87d6:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
    87d8:	4906      	ldr	r1, [pc, #24]	; (87f4 <db_hash_store+0x20>)
    87da:	4807      	ldr	r0, [pc, #28]	; (87f8 <db_hash_store+0x24>)
    87dc:	f7f9 f994 	bl	1b08 <settings_save_one>
	if (err) {
    87e0:	4602      	mov	r2, r0
    87e2:	b128      	cbz	r0, 87f0 <db_hash_store+0x1c>
}
    87e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
    87e8:	2145      	movs	r1, #69	; 0x45
    87ea:	4804      	ldr	r0, [pc, #16]	; (87fc <db_hash_store+0x28>)
    87ec:	f008 baf6 	b.w	10ddc <printk>
}
    87f0:	bd08      	pop	{r3, pc}
    87f2:	bf00      	nop
    87f4:	20001ff0 	.word	0x20001ff0
    87f8:	0001897b 	.word	0x0001897b
    87fc:	00018983 	.word	0x00018983

00008800 <sc_store>:
{
    8800:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
    8802:	4605      	mov	r5, r0
    8804:	f815 2b01 	ldrb.w	r2, [r5], #1
{
    8808:	4604      	mov	r4, r0
    880a:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
    880c:	b1ca      	cbz	r2, 8842 <sc_store+0x42>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
    880e:	ae02      	add	r6, sp, #8
    8810:	2104      	movs	r1, #4
    8812:	4630      	mov	r0, r6
    8814:	f008 fa4c 	bl	10cb0 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
    8818:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
    881a:	462b      	mov	r3, r5
    881c:	2124      	movs	r1, #36	; 0x24
    881e:	4a0a      	ldr	r2, [pc, #40]	; (8848 <sc_store+0x48>)
    8820:	a803      	add	r0, sp, #12
    8822:	f7fb f945 	bl	3ab0 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
    8826:	2204      	movs	r2, #4
    8828:	f104 0108 	add.w	r1, r4, #8
    882c:	a803      	add	r0, sp, #12
    882e:	f7f9 f96b 	bl	1b08 <settings_save_one>
	if (err) {
    8832:	4602      	mov	r2, r0
    8834:	b118      	cbz	r0, 883e <sc_store+0x3e>
		BT_ERR("failed to store SC (err %d)", err);
    8836:	2145      	movs	r1, #69	; 0x45
    8838:	4804      	ldr	r0, [pc, #16]	; (884c <sc_store+0x4c>)
    883a:	f008 facf 	bl	10ddc <printk>
}
    883e:	b00c      	add	sp, #48	; 0x30
    8840:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
    8842:	9200      	str	r2, [sp, #0]
    8844:	e7e9      	b.n	881a <sc_store+0x1a>
    8846:	bf00      	nop
    8848:	00018d3b 	.word	0x00018d3b
    884c:	000189ae 	.word	0x000189ae

00008850 <find_static_attr>:
{
    8850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    8854:	4f18      	ldr	r7, [pc, #96]	; (88b8 <find_static_attr+0x68>)
{
    8856:	4605      	mov	r5, r0
	u16_t handle = 1;
    8858:	2601      	movs	r6, #1
    885a:	46b8      	mov	r8, r7
    885c:	4c17      	ldr	r4, [pc, #92]	; (88bc <find_static_attr+0x6c>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    885e:	f8df 906c 	ldr.w	r9, [pc, #108]	; 88cc <find_static_attr+0x7c>
    8862:	f1a4 0a08 	sub.w	sl, r4, #8
    8866:	45ba      	cmp	sl, r7
    8868:	d90e      	bls.n	8888 <find_static_attr+0x38>
    886a:	4915      	ldr	r1, [pc, #84]	; (88c0 <find_static_attr+0x70>)
    886c:	f240 4399 	movw	r3, #1177	; 0x499
    8870:	464a      	mov	r2, r9
    8872:	4814      	ldr	r0, [pc, #80]	; (88c4 <find_static_attr+0x74>)
    8874:	f008 fab2 	bl	10ddc <printk>
    8878:	4813      	ldr	r0, [pc, #76]	; (88c8 <find_static_attr+0x78>)
    887a:	f008 faaf 	bl	10ddc <printk>
    887e:	f240 4199 	movw	r1, #1177	; 0x499
    8882:	4648      	mov	r0, r9
    8884:	f008 fd40 	bl	11308 <assert_post_action>
    8888:	45c2      	cmp	sl, r8
    888a:	d212      	bcs.n	88b2 <find_static_attr+0x62>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    888c:	2100      	movs	r1, #0
			if (attr == &static_svc->attrs[i]) {
    888e:	2214      	movs	r2, #20
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    8890:	f854 cc04 	ldr.w	ip, [r4, #-4]
    8894:	e006      	b.n	88a4 <find_static_attr+0x54>
			if (attr == &static_svc->attrs[i]) {
    8896:	f854 3c08 	ldr.w	r3, [r4, #-8]
    889a:	fb02 3301 	mla	r3, r2, r1, r3
    889e:	429d      	cmp	r5, r3
    88a0:	d008      	beq.n	88b4 <find_static_attr+0x64>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    88a2:	3101      	adds	r1, #1
    88a4:	1873      	adds	r3, r6, r1
    88a6:	458c      	cmp	ip, r1
    88a8:	b298      	uxth	r0, r3
    88aa:	d1f4      	bne.n	8896 <find_static_attr+0x46>
    88ac:	4606      	mov	r6, r0
    88ae:	3408      	adds	r4, #8
    88b0:	e7d7      	b.n	8862 <find_static_attr+0x12>
	return 0;
    88b2:	2000      	movs	r0, #0
}
    88b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    88b8:	00015560 	.word	0x00015560
    88bc:	00015550 	.word	0x00015550
    88c0:	000189ff 	.word	0x000189ff
    88c4:	00016493 	.word	0x00016493
    88c8:	000164b0 	.word	0x000164b0
    88cc:	000189cf 	.word	0x000189cf

000088d0 <gatt_notify>:
{
    88d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    88d4:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
    88d6:	8992      	ldrh	r2, [r2, #12]
{
    88d8:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    88da:	3202      	adds	r2, #2
    88dc:	211b      	movs	r1, #27
{
    88de:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    88e0:	f7ff f910 	bl	7b04 <bt_att_create_pdu>
	if (!buf) {
    88e4:	4605      	mov	r5, r0
    88e6:	b1c8      	cbz	r0, 891c <gatt_notify+0x4c>
	nfy = net_buf_add(buf, sizeof(*nfy));
    88e8:	f100 0908 	add.w	r9, r0, #8
    88ec:	2102      	movs	r1, #2
    88ee:	4648      	mov	r0, r9
    88f0:	f003 fa32 	bl	bd58 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    88f4:	4606      	mov	r6, r0
	net_buf_add(buf, params->len);
    88f6:	89a1      	ldrh	r1, [r4, #12]
	nfy->handle = sys_cpu_to_le16(handle);
    88f8:	f826 8b02 	strh.w	r8, [r6], #2
	net_buf_add(buf, params->len);
    88fc:	4648      	mov	r0, r9
    88fe:	f003 fa2b 	bl	bd58 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
    8902:	89a2      	ldrh	r2, [r4, #12]
    8904:	68a1      	ldr	r1, [r4, #8]
    8906:	4630      	mov	r0, r6
    8908:	f009 fc29 	bl	1215e <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
    890c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    8910:	4629      	mov	r1, r5
    8912:	4638      	mov	r0, r7
}
    8914:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
    8918:	f7ff be76 	b.w	8608 <bt_att_send>
		BT_WARN("No buffer available to send notification");
    891c:	2157      	movs	r1, #87	; 0x57
    891e:	4803      	ldr	r0, [pc, #12]	; (892c <gatt_notify+0x5c>)
    8920:	f008 fa5c 	bl	10ddc <printk>
}
    8924:	f06f 000b 	mvn.w	r0, #11
    8928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    892c:	00018a2e 	.word	0x00018a2e

00008930 <gatt_send.constprop.0>:
static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
    8930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8934:	4606      	mov	r6, r0
    8936:	4688      	mov	r8, r1
    8938:	4617      	mov	r7, r2
	if (params) {
    893a:	461c      	mov	r4, r3
    893c:	b31b      	cbz	r3, 8986 <gatt_send.constprop.0+0x56>
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    893e:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    8942:	2100      	movs	r1, #0
    8944:	f7ff fd54 	bl	83f0 <bt_att_req_alloc>
		if (!req) {
    8948:	4605      	mov	r5, r0
    894a:	b920      	cbnz	r0, 8956 <gatt_send.constprop.0+0x26>
			return -ENOMEM;
    894c:	f06f 040b 	mvn.w	r4, #11
}
    8950:	4620      	mov	r0, r4
    8952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		req->destroy = destroy;
    8956:	2300      	movs	r3, #0
		req->user_data = params;
    8958:	6184      	str	r4, [r0, #24]
		err = bt_att_req_send(conn, req);
    895a:	4601      	mov	r1, r0
		req->buf = buf;
    895c:	f8c0 8010 	str.w	r8, [r0, #16]
		req->func = func;
    8960:	6047      	str	r7, [r0, #4]
		req->destroy = destroy;
    8962:	6083      	str	r3, [r0, #8]
		err = bt_att_req_send(conn, req);
    8964:	4630      	mov	r0, r6
    8966:	f7ff fea3 	bl	86b0 <bt_att_req_send>
		if (err) {
    896a:	4604      	mov	r4, r0
    896c:	2800      	cmp	r0, #0
    896e:	d0ef      	beq.n	8950 <gatt_send.constprop.0+0x20>
			bt_att_req_free(req);
    8970:	4628      	mov	r0, r5
    8972:	f7ff fd53 	bl	841c <bt_att_req_free>
	if (err) {
    8976:	2c00      	cmp	r4, #0
    8978:	d0ea      	beq.n	8950 <gatt_send.constprop.0+0x20>
		BT_ERR("Error sending ATT PDU: %d", err);
    897a:	4622      	mov	r2, r4
    897c:	2145      	movs	r1, #69	; 0x45
    897e:	4804      	ldr	r0, [pc, #16]	; (8990 <gatt_send.constprop.0+0x60>)
    8980:	f008 fa2c 	bl	10ddc <printk>
    8984:	e7e4      	b.n	8950 <gatt_send.constprop.0+0x20>
		err = bt_att_send(conn, buf, NULL, NULL);
    8986:	461a      	mov	r2, r3
    8988:	f7ff fe3e 	bl	8608 <bt_att_send>
    898c:	4604      	mov	r4, r0
    898e:	e7f2      	b.n	8976 <gatt_send.constprop.0+0x46>
    8990:	00018a5c 	.word	0x00018a5c

00008994 <gatt_indicate>:
{
    8994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8998:	4614      	mov	r4, r2
				sizeof(*ind) + params->len);
    899a:	8a12      	ldrh	r2, [r2, #16]
{
    899c:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    899e:	3202      	adds	r2, #2
    89a0:	211d      	movs	r1, #29
{
    89a2:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    89a4:	f7ff f8ae 	bl	7b04 <bt_att_create_pdu>
	if (!buf) {
    89a8:	4605      	mov	r5, r0
    89aa:	b1e8      	cbz	r0, 89e8 <gatt_indicate+0x54>
	ind = net_buf_add(buf, sizeof(*ind));
    89ac:	f100 0808 	add.w	r8, r0, #8
    89b0:	2102      	movs	r1, #2
    89b2:	4640      	mov	r0, r8
    89b4:	f003 f9d0 	bl	bd58 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    89b8:	4606      	mov	r6, r0
	net_buf_add(buf, params->len);
    89ba:	8a21      	ldrh	r1, [r4, #16]
	ind->handle = sys_cpu_to_le16(handle);
    89bc:	f826 9b02 	strh.w	r9, [r6], #2
	net_buf_add(buf, params->len);
    89c0:	4640      	mov	r0, r8
    89c2:	f003 f9c9 	bl	bd58 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    89c6:	4630      	mov	r0, r6
    89c8:	8a22      	ldrh	r2, [r4, #16]
    89ca:	68e1      	ldr	r1, [r4, #12]
    89cc:	f009 fbc7 	bl	1215e <memcpy>
	if (!params->func) {
    89d0:	68a3      	ldr	r3, [r4, #8]
    89d2:	b933      	cbnz	r3, 89e2 <gatt_indicate+0x4e>
		return gatt_send(conn, buf, NULL, NULL, NULL);
    89d4:	461a      	mov	r2, r3
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    89d6:	4629      	mov	r1, r5
    89d8:	4638      	mov	r0, r7
}
    89da:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    89de:	f7ff bfa7 	b.w	8930 <gatt_send.constprop.0>
    89e2:	4623      	mov	r3, r4
    89e4:	4a04      	ldr	r2, [pc, #16]	; (89f8 <gatt_indicate+0x64>)
    89e6:	e7f6      	b.n	89d6 <gatt_indicate+0x42>
		BT_WARN("No buffer available to send indication");
    89e8:	2157      	movs	r1, #87	; 0x57
    89ea:	4804      	ldr	r0, [pc, #16]	; (89fc <gatt_indicate+0x68>)
    89ec:	f008 f9f6 	bl	10ddc <printk>
}
    89f0:	f06f 000b 	mvn.w	r0, #11
    89f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    89f8:	000132d1 	.word	0x000132d1
    89fc:	00018a7b 	.word	0x00018a7b

00008a00 <ccc_save>:
{
    8a00:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    8a02:	6882      	ldr	r2, [r0, #8]
    8a04:	4b0b      	ldr	r3, [pc, #44]	; (8a34 <ccc_save+0x34>)
{
    8a06:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    8a08:	429a      	cmp	r2, r3
{
    8a0a:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    8a0c:	d110      	bne.n	8a30 <ccc_save+0x30>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
    8a0e:	790a      	ldrb	r2, [r1, #4]
    8a10:	68c0      	ldr	r0, [r0, #12]
    8a12:	6809      	ldr	r1, [r1, #0]
    8a14:	f00a fd00 	bl	13418 <ccc_find_cfg>
	if (!cfg) {
    8a18:	b150      	cbz	r0, 8a30 <ccc_save+0x30>
	save->store[save->count].handle = attr->handle;
    8a1a:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
    8a1e:	8a29      	ldrh	r1, [r5, #16]
    8a20:	eb04 0283 	add.w	r2, r4, r3, lsl #2
    8a24:	8111      	strh	r1, [r2, #8]
	save->store[save->count].value = cfg->value;
    8a26:	8901      	ldrh	r1, [r0, #8]
	save->count++;
    8a28:	3301      	adds	r3, #1
	save->store[save->count].value = cfg->value;
    8a2a:	8151      	strh	r1, [r2, #10]
	save->count++;
    8a2c:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
    8a30:	2001      	movs	r0, #1
    8a32:	bd38      	pop	{r3, r4, r5, pc}
    8a34:	00008ac9 	.word	0x00008ac9

00008a38 <ccc_load>:
{
    8a38:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    8a3a:	4a22      	ldr	r2, [pc, #136]	; (8ac4 <ccc_load+0x8c>)
{
    8a3c:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    8a3e:	6881      	ldr	r1, [r0, #8]
{
    8a40:	4603      	mov	r3, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    8a42:	4291      	cmp	r1, r2
    8a44:	d002      	beq.n	8a4c <ccc_load+0x14>
		return BT_GATT_ITER_CONTINUE;
    8a46:	2001      	movs	r0, #1
}
    8a48:	b002      	add	sp, #8
    8a4a:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
    8a4c:	68a2      	ldr	r2, [r4, #8]
	ccc = attr->user_data;
    8a4e:	68c6      	ldr	r6, [r0, #12]
	if (!load->entry) {
    8a50:	b94a      	cbnz	r2, 8a66 <ccc_load+0x2e>
	cfg = ccc_find_cfg(ccc, addr, id);
    8a52:	4630      	mov	r0, r6
    8a54:	7922      	ldrb	r2, [r4, #4]
    8a56:	6821      	ldr	r1, [r4, #0]
    8a58:	f00a fcde 	bl	13418 <ccc_find_cfg>
	if (!cfg) {
    8a5c:	2800      	cmp	r0, #0
    8a5e:	d0f2      	beq.n	8a46 <ccc_load+0xe>
	clear_ccc_cfg(cfg);
    8a60:	f00a fc99 	bl	13396 <clear_ccc_cfg>
    8a64:	e7ef      	b.n	8a46 <ccc_load+0xe>
	} else if (!load->count) {
    8a66:	68e0      	ldr	r0, [r4, #12]
    8a68:	2800      	cmp	r0, #0
    8a6a:	d0ed      	beq.n	8a48 <ccc_load+0x10>
	if (load->entry->handle != attr->handle) {
    8a6c:	8812      	ldrh	r2, [r2, #0]
    8a6e:	8a1b      	ldrh	r3, [r3, #16]
    8a70:	429a      	cmp	r2, r3
    8a72:	d00a      	beq.n	8a8a <ccc_load+0x52>
		if (load->entry->handle < attr->handle) {
    8a74:	d2e7      	bcs.n	8a46 <ccc_load+0xe>
	load->count--;
    8a76:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
    8a78:	68a3      	ldr	r3, [r4, #8]
	load->count--;
    8a7a:	3801      	subs	r0, #1
	load->entry++;
    8a7c:	3304      	adds	r3, #4
	load->count--;
    8a7e:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    8a80:	3800      	subs	r0, #0
    8a82:	bf18      	it	ne
    8a84:	2001      	movne	r0, #1
	load->entry++;
    8a86:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    8a88:	e7de      	b.n	8a48 <ccc_load+0x10>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
    8a8a:	4630      	mov	r0, r6
    8a8c:	7922      	ldrb	r2, [r4, #4]
    8a8e:	6821      	ldr	r1, [r4, #0]
    8a90:	f00a fcc2 	bl	13418 <ccc_find_cfg>
	if (!cfg) {
    8a94:	4605      	mov	r5, r0
    8a96:	b980      	cbnz	r0, 8aba <ccc_load+0x82>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
    8a98:	9000      	str	r0, [sp, #0]
    8a9a:	4602      	mov	r2, r0
    8a9c:	f8cd 0003 	str.w	r0, [sp, #3]
    8aa0:	4669      	mov	r1, sp
    8aa2:	4630      	mov	r0, r6
    8aa4:	f00a fcb8 	bl	13418 <ccc_find_cfg>
		if (!cfg) {
    8aa8:	4605      	mov	r5, r0
    8aaa:	2800      	cmp	r0, #0
    8aac:	d0e3      	beq.n	8a76 <ccc_load+0x3e>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
    8aae:	6821      	ldr	r1, [r4, #0]
    8ab0:	3001      	adds	r0, #1
    8ab2:	f00a fc6d 	bl	13390 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
    8ab6:	7923      	ldrb	r3, [r4, #4]
    8ab8:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
    8aba:	68a3      	ldr	r3, [r4, #8]
    8abc:	885b      	ldrh	r3, [r3, #2]
    8abe:	812b      	strh	r3, [r5, #8]
    8ac0:	e7d9      	b.n	8a76 <ccc_load+0x3e>
    8ac2:	bf00      	nop
    8ac4:	00008ac9 	.word	0x00008ac9

00008ac8 <bt_gatt_attr_write_ccc>:
{
    8ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8acc:	461f      	mov	r7, r3
    8ace:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    8ad2:	4606      	mov	r6, r0
    8ad4:	4688      	mov	r8, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
    8ad6:	f8d1 900c 	ldr.w	r9, [r1, #12]
	if (offset) {
    8ada:	2b00      	cmp	r3, #0
    8adc:	d144      	bne.n	8b68 <bt_gatt_attr_write_ccc+0xa0>
	if (!len || len > sizeof(u16_t)) {
    8ade:	1e7b      	subs	r3, r7, #1
    8ae0:	2b01      	cmp	r3, #1
    8ae2:	d844      	bhi.n	8b6e <bt_gatt_attr_write_ccc+0xa6>
	if (len < sizeof(u16_t)) {
    8ae4:	2f01      	cmp	r7, #1
		value = *(u8_t *)buf;
    8ae6:	7815      	ldrb	r5, [r2, #0]
	return ((u16_t)src[1] << 8) | src[0];
    8ae8:	bf18      	it	ne
    8aea:	7853      	ldrbne	r3, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
    8aec:	4649      	mov	r1, r9
		value = *(u8_t *)buf;
    8aee:	bf0c      	ite	eq
    8af0:	b2ad      	uxtheq	r5, r5
    8af2:	ea45 2503 	orrne.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
    8af6:	f00a fc9e 	bl	13436 <find_ccc_cfg>
	if (!cfg) {
    8afa:	4604      	mov	r4, r0
    8afc:	b9b0      	cbnz	r0, 8b2c <bt_gatt_attr_write_ccc+0x64>
		if (!value) {
    8afe:	b915      	cbnz	r5, 8b06 <bt_gatt_attr_write_ccc+0x3e>
			return len;
    8b00:	4638      	mov	r0, r7
}
    8b02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
    8b06:	4649      	mov	r1, r9
    8b08:	f00a fc95 	bl	13436 <find_ccc_cfg>
		if (!cfg) {
    8b0c:	4604      	mov	r4, r0
    8b0e:	b930      	cbnz	r0, 8b1e <bt_gatt_attr_write_ccc+0x56>
			BT_WARN("No space to store CCC cfg");
    8b10:	4818      	ldr	r0, [pc, #96]	; (8b74 <bt_gatt_attr_write_ccc+0xac>)
    8b12:	2157      	movs	r1, #87	; 0x57
    8b14:	f008 f962 	bl	10ddc <printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    8b18:	f06f 0010 	mvn.w	r0, #16
    8b1c:	e7f1      	b.n	8b02 <bt_gatt_attr_write_ccc+0x3a>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    8b1e:	f106 017c 	add.w	r1, r6, #124	; 0x7c
    8b22:	3001      	adds	r0, #1
    8b24:	f00a fc34 	bl	13390 <bt_addr_le_copy>
		cfg->id = conn->id;
    8b28:	7a33      	ldrb	r3, [r6, #8]
    8b2a:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
    8b2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
    8b30:	b973      	cbnz	r3, 8b50 <bt_gatt_attr_write_ccc+0x88>
	if (cfg->value != ccc->value) {
    8b32:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
    8b36:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
    8b38:	42ab      	cmp	r3, r5
    8b3a:	d003      	beq.n	8b44 <bt_gatt_attr_write_ccc+0x7c>
		gatt_ccc_changed(attr, ccc);
    8b3c:	4649      	mov	r1, r9
    8b3e:	4640      	mov	r0, r8
    8b40:	f00a fbbc 	bl	132bc <gatt_ccc_changed>
	if (!value) {
    8b44:	2d00      	cmp	r5, #0
    8b46:	d1db      	bne.n	8b00 <bt_gatt_attr_write_ccc+0x38>
		clear_ccc_cfg(cfg);
    8b48:	4620      	mov	r0, r4
    8b4a:	f00a fc24 	bl	13396 <clear_ccc_cfg>
    8b4e:	e7d7      	b.n	8b00 <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
    8b50:	462a      	mov	r2, r5
    8b52:	4641      	mov	r1, r8
    8b54:	4630      	mov	r0, r6
    8b56:	4798      	blx	r3
		if (write < 0) {
    8b58:	2800      	cmp	r0, #0
    8b5a:	dbd2      	blt.n	8b02 <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
    8b5c:	1e42      	subs	r2, r0, #1
    8b5e:	2a01      	cmp	r2, #1
    8b60:	d9e7      	bls.n	8b32 <bt_gatt_attr_write_ccc+0x6a>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    8b62:	f06f 000d 	mvn.w	r0, #13
    8b66:	e7cc      	b.n	8b02 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    8b68:	f06f 0006 	mvn.w	r0, #6
    8b6c:	e7c9      	b.n	8b02 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    8b6e:	f06f 000c 	mvn.w	r0, #12
    8b72:	e7c6      	b.n	8b02 <bt_gatt_attr_write_ccc+0x3a>
    8b74:	00018aa7 	.word	0x00018aa7

00008b78 <sc_commit>:
{
    8b78:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    8b7a:	4c0a      	ldr	r4, [pc, #40]	; (8ba4 <sc_commit+0x2c>)
    8b7c:	f06f 0102 	mvn.w	r1, #2
    8b80:	4620      	mov	r0, r4
    8b82:	f00a fc16 	bl	133b2 <atomic_and>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8b86:	e8d4 3faf 	lda	r3, [r4]
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    8b8a:	07db      	lsls	r3, r3, #31
    8b8c:	d507      	bpl.n	8b9e <sc_commit+0x26>
    8b8e:	f44f 72a4 	mov.w	r2, #328	; 0x148
    8b92:	2300      	movs	r3, #0
    8b94:	4804      	ldr	r0, [pc, #16]	; (8ba8 <sc_commit+0x30>)
    8b96:	f1a4 0120 	sub.w	r1, r4, #32
    8b9a:	f007 f8f9 	bl	fd90 <k_delayed_work_submit_to_queue>
}
    8b9e:	2000      	movs	r0, #0
    8ba0:	bd10      	pop	{r4, pc}
    8ba2:	bf00      	nop
    8ba4:	20000fd0 	.word	0x20000fd0
    8ba8:	20001e54 	.word	0x20001e54

00008bac <gatt_sub_find_free>:
{
    8bac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8bae:	4606      	mov	r6, r0
	if (free_sub) {
    8bb0:	460c      	mov	r4, r1
    8bb2:	b109      	cbz	r1, 8bb8 <gatt_sub_find_free+0xc>
		*free_sub = NULL;
    8bb4:	2300      	movs	r3, #0
    8bb6:	600b      	str	r3, [r1, #0]
		if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
    8bb8:	4d16      	ldr	r5, [pc, #88]	; (8c14 <gatt_sub_find_free+0x68>)
    8bba:	4630      	mov	r0, r6
    8bbc:	462a      	mov	r2, r5
    8bbe:	f812 1b01 	ldrb.w	r1, [r2], #1
    8bc2:	f009 fdf6 	bl	127b2 <bt_conn_is_peer_addr_le>
    8bc6:	462f      	mov	r7, r5
    8bc8:	b9f8      	cbnz	r0, 8c0a <gatt_sub_find_free+0x5e>
		} else if (free_sub &&
    8bca:	b14c      	cbz	r4, 8be0 <gatt_sub_find_free+0x34>
			   !bt_addr_le_cmp(BT_ADDR_LE_ANY, &sub->peer)) {
    8bcc:	9000      	str	r0, [sp, #0]
	return memcmp(a, b, sizeof(*a));
    8bce:	2207      	movs	r2, #7
    8bd0:	f8cd 0003 	str.w	r0, [sp, #3]
    8bd4:	1c69      	adds	r1, r5, #1
    8bd6:	4668      	mov	r0, sp
    8bd8:	f009 fab1 	bl	1213e <memcmp>
		} else if (free_sub &&
    8bdc:	b900      	cbnz	r0, 8be0 <gatt_sub_find_free+0x34>
			*free_sub = sub;
    8bde:	6025      	str	r5, [r4, #0]
		if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
    8be0:	4630      	mov	r0, r6
    8be2:	4a0d      	ldr	r2, [pc, #52]	; (8c18 <gatt_sub_find_free+0x6c>)
    8be4:	7c39      	ldrb	r1, [r7, #16]
    8be6:	f009 fde4 	bl	127b2 <bt_conn_is_peer_addr_le>
    8bea:	b980      	cbnz	r0, 8c0e <gatt_sub_find_free+0x62>
		} else if (free_sub &&
    8bec:	b154      	cbz	r4, 8c04 <gatt_sub_find_free+0x58>
			   !bt_addr_le_cmp(BT_ADDR_LE_ANY, &sub->peer)) {
    8bee:	9000      	str	r0, [sp, #0]
    8bf0:	2207      	movs	r2, #7
    8bf2:	f8cd 0003 	str.w	r0, [sp, #3]
    8bf6:	4908      	ldr	r1, [pc, #32]	; (8c18 <gatt_sub_find_free+0x6c>)
    8bf8:	4668      	mov	r0, sp
    8bfa:	f009 faa0 	bl	1213e <memcmp>
		} else if (free_sub &&
    8bfe:	b908      	cbnz	r0, 8c04 <gatt_sub_find_free+0x58>
			*free_sub = sub;
    8c00:	4b06      	ldr	r3, [pc, #24]	; (8c1c <gatt_sub_find_free+0x70>)
    8c02:	6023      	str	r3, [r4, #0]
	return NULL;
    8c04:	2000      	movs	r0, #0
}
    8c06:	b003      	add	sp, #12
    8c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct gatt_sub *sub = &subscriptions[i];
    8c0a:	4628      	mov	r0, r5
    8c0c:	e7fb      	b.n	8c06 <gatt_sub_find_free+0x5a>
    8c0e:	4803      	ldr	r0, [pc, #12]	; (8c1c <gatt_sub_find_free+0x70>)
    8c10:	e7f9      	b.n	8c06 <gatt_sub_find_free+0x5a>
    8c12:	bf00      	nop
    8c14:	20000fec 	.word	0x20000fec
    8c18:	20000ffd 	.word	0x20000ffd
    8c1c:	20000ffc 	.word	0x20000ffc

00008c20 <find_cf_cfg_by_addr>:
{
    8c20:	b570      	push	{r4, r5, r6, lr}
			if (id == cf_cfg[i].id &&
    8c22:	4c0e      	ldr	r4, [pc, #56]	; (8c5c <find_cf_cfg_by_addr+0x3c>)
{
    8c24:	4606      	mov	r6, r0
			if (id == cf_cfg[i].id &&
    8c26:	7823      	ldrb	r3, [r4, #0]
{
    8c28:	460d      	mov	r5, r1
			if (id == cf_cfg[i].id &&
    8c2a:	4283      	cmp	r3, r0
    8c2c:	d00a      	beq.n	8c44 <find_cf_cfg_by_addr+0x24>
    8c2e:	7c23      	ldrb	r3, [r4, #16]
    8c30:	42b3      	cmp	r3, r6
    8c32:	d111      	bne.n	8c58 <find_cf_cfg_by_addr+0x38>
    8c34:	2207      	movs	r2, #7
    8c36:	4628      	mov	r0, r5
    8c38:	4909      	ldr	r1, [pc, #36]	; (8c60 <find_cf_cfg_by_addr+0x40>)
    8c3a:	f009 fa80 	bl	1213e <memcmp>
    8c3e:	b958      	cbnz	r0, 8c58 <find_cf_cfg_by_addr+0x38>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    8c40:	2001      	movs	r0, #1
    8c42:	e006      	b.n	8c52 <find_cf_cfg_by_addr+0x32>
    8c44:	2207      	movs	r2, #7
    8c46:	4628      	mov	r0, r5
    8c48:	1c61      	adds	r1, r4, #1
    8c4a:	f009 fa78 	bl	1213e <memcmp>
			if (id == cf_cfg[i].id &&
    8c4e:	2800      	cmp	r0, #0
    8c50:	d1ed      	bne.n	8c2e <find_cf_cfg_by_addr+0xe>
				return &cf_cfg[i];
    8c52:	eb04 1000 	add.w	r0, r4, r0, lsl #4
    8c56:	e000      	b.n	8c5a <find_cf_cfg_by_addr+0x3a>
	return NULL;
    8c58:	2000      	movs	r0, #0
}
    8c5a:	bd70      	pop	{r4, r5, r6, pc}
    8c5c:	20000f58 	.word	0x20000f58
    8c60:	20000f69 	.word	0x20000f69

00008c64 <find_sc_cfg>:
{
    8c64:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
    8c66:	4c0e      	ldr	r4, [pc, #56]	; (8ca0 <find_sc_cfg+0x3c>)
{
    8c68:	4605      	mov	r5, r0
		if (id == sc_cfg[i].id &&
    8c6a:	7823      	ldrb	r3, [r4, #0]
{
    8c6c:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
    8c6e:	4283      	cmp	r3, r0
    8c70:	d00a      	beq.n	8c88 <find_sc_cfg+0x24>
    8c72:	7b23      	ldrb	r3, [r4, #12]
    8c74:	42ab      	cmp	r3, r5
    8c76:	d111      	bne.n	8c9c <find_sc_cfg+0x38>
    8c78:	2207      	movs	r2, #7
    8c7a:	4631      	mov	r1, r6
    8c7c:	4809      	ldr	r0, [pc, #36]	; (8ca4 <find_sc_cfg+0x40>)
    8c7e:	f009 fa5e 	bl	1213e <memcmp>
    8c82:	b958      	cbnz	r0, 8c9c <find_sc_cfg+0x38>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    8c84:	2001      	movs	r0, #1
    8c86:	e005      	b.n	8c94 <find_sc_cfg+0x30>
    8c88:	2207      	movs	r2, #7
    8c8a:	1c60      	adds	r0, r4, #1
    8c8c:	f009 fa57 	bl	1213e <memcmp>
		if (id == sc_cfg[i].id &&
    8c90:	2800      	cmp	r0, #0
    8c92:	d1ee      	bne.n	8c72 <find_sc_cfg+0xe>
			return &sc_cfg[i];
    8c94:	230c      	movs	r3, #12
    8c96:	fb03 4000 	mla	r0, r3, r0, r4
    8c9a:	e000      	b.n	8c9e <find_sc_cfg+0x3a>
	return NULL;
    8c9c:	2000      	movs	r0, #0
}
    8c9e:	bd70      	pop	{r4, r5, r6, pc}
    8ca0:	20001ef6 	.word	0x20001ef6
    8ca4:	20001f03 	.word	0x20001f03

00008ca8 <sc_save>:
{
    8ca8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    8cac:	4680      	mov	r8, r0
    8cae:	460f      	mov	r7, r1
    8cb0:	4616      	mov	r6, r2
    8cb2:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
    8cb4:	f7ff ffd6 	bl	8c64 <find_sc_cfg>
	if (!cfg) {
    8cb8:	4604      	mov	r4, r0
    8cba:	b998      	cbnz	r0, 8ce4 <sc_save+0x3c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    8cbc:	4669      	mov	r1, sp
    8cbe:	9000      	str	r0, [sp, #0]
    8cc0:	f8cd 0003 	str.w	r0, [sp, #3]
    8cc4:	f7ff ffce 	bl	8c64 <find_sc_cfg>
		if (!cfg) {
    8cc8:	4604      	mov	r4, r0
    8cca:	b930      	cbnz	r0, 8cda <sc_save+0x32>
			BT_ERR("unable to save SC: no cfg left");
    8ccc:	2145      	movs	r1, #69	; 0x45
    8cce:	4812      	ldr	r0, [pc, #72]	; (8d18 <sc_save+0x70>)
    8cd0:	f008 f884 	bl	10ddc <printk>
}
    8cd4:	b002      	add	sp, #8
    8cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&cfg->peer, peer);
    8cda:	4639      	mov	r1, r7
		cfg->id = id;
    8cdc:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
    8ce0:	f00a fb56 	bl	13390 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
    8ce4:	8922      	ldrh	r2, [r4, #8]
    8ce6:	8963      	ldrh	r3, [r4, #10]
    8ce8:	b96a      	cbnz	r2, 8d06 <sc_save+0x5e>
    8cea:	b973      	cbnz	r3, 8d0a <sc_save+0x62>
		cfg->data.start = start;
    8cec:	8126      	strh	r6, [r4, #8]
		*end = new_end;
    8cee:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
    8cf0:	4621      	mov	r1, r4
    8cf2:	f811 0b01 	ldrb.w	r0, [r1], #1
    8cf6:	f009 fc7e 	bl	125f6 <bt_addr_le_is_bonded>
    8cfa:	2800      	cmp	r0, #0
    8cfc:	d0ea      	beq.n	8cd4 <sc_save+0x2c>
		sc_store(cfg);
    8cfe:	4620      	mov	r0, r4
    8d00:	f7ff fd7e 	bl	8800 <sc_store>
    8d04:	e7e6      	b.n	8cd4 <sc_save+0x2c>
	if (new_start >= *start && new_end <= *end) {
    8d06:	4296      	cmp	r6, r2
    8d08:	d302      	bcc.n	8d10 <sc_save+0x68>
    8d0a:	429d      	cmp	r5, r3
    8d0c:	d8ef      	bhi.n	8cee <sc_save+0x46>
    8d0e:	e7e1      	b.n	8cd4 <sc_save+0x2c>
	if (*end < new_end) {
    8d10:	429d      	cmp	r5, r3
		*start = new_start;
    8d12:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
    8d14:	d9ec      	bls.n	8cf0 <sc_save+0x48>
    8d16:	e7ea      	b.n	8cee <sc_save+0x46>
    8d18:	00018ac6 	.word	0x00018ac6

00008d1c <notify_cb>:
{
    8d1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    8d20:	4b31      	ldr	r3, [pc, #196]	; (8de8 <notify_cb+0xcc>)
    8d22:	6882      	ldr	r2, [r0, #8]
{
    8d24:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    8d26:	429a      	cmp	r2, r3
{
    8d28:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    8d2a:	d113      	bne.n	8d54 <notify_cb+0x38>
	ccc = attr->user_data;
    8d2c:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    8d2e:	4b2f      	ldr	r3, [pc, #188]	; (8dec <notify_cb+0xd0>)
    8d30:	429f      	cmp	r7, r3
    8d32:	d013      	beq.n	8d5c <notify_cb+0x40>
		if (cfg->value != data->type) {
    8d34:	893a      	ldrh	r2, [r7, #8]
    8d36:	88ab      	ldrh	r3, [r5, #4]
    8d38:	429a      	cmp	r2, r3
    8d3a:	d10b      	bne.n	8d54 <notify_cb+0x38>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    8d3c:	4639      	mov	r1, r7
    8d3e:	f811 0b01 	ldrb.w	r0, [r1], #1
    8d42:	f7fd fb5d 	bl	6400 <bt_conn_lookup_addr_le>
		if (!conn) {
    8d46:	4604      	mov	r4, r0
    8d48:	b120      	cbz	r0, 8d54 <notify_cb+0x38>
		if (conn->state != BT_CONN_CONNECTED) {
    8d4a:	7b43      	ldrb	r3, [r0, #13]
    8d4c:	2b07      	cmp	r3, #7
    8d4e:	d02d      	beq.n	8dac <notify_cb+0x90>
			bt_conn_unref(conn);
    8d50:	f009 fd56 	bl	12800 <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
    8d54:	2001      	movs	r0, #1
}
    8d56:	b003      	add	sp, #12
    8d58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    8d5c:	f04f 0800 	mov.w	r8, #0
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    8d60:	46c1      	mov	r9, r8
    8d62:	4c23      	ldr	r4, [pc, #140]	; (8df0 <notify_cb+0xd4>)
    8d64:	2207      	movs	r2, #7
    8d66:	4669      	mov	r1, sp
    8d68:	4620      	mov	r0, r4
    8d6a:	f8cd 9000 	str.w	r9, [sp]
    8d6e:	f8cd 9003 	str.w	r9, [sp, #3]
    8d72:	f009 f9e4 	bl	1213e <memcmp>
    8d76:	b178      	cbz	r0, 8d98 <notify_cb+0x7c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    8d78:	2207      	movs	r2, #7
    8d7a:	4621      	mov	r1, r4
    8d7c:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    8d80:	f7fd fb5a 	bl	6438 <bt_conn_lookup_state_le>
			if (!conn) {
    8d84:	b978      	cbnz	r0, 8da6 <notify_cb+0x8a>
				sc = (struct sc_data *)data->ind_params->data;
    8d86:	68ab      	ldr	r3, [r5, #8]
				sc_save(cfg->id, &cfg->peer,
    8d88:	4621      	mov	r1, r4
				sc = (struct sc_data *)data->ind_params->data;
    8d8a:	68da      	ldr	r2, [r3, #12]
				sc_save(cfg->id, &cfg->peer,
    8d8c:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    8d90:	8853      	ldrh	r3, [r2, #2]
    8d92:	8812      	ldrh	r2, [r2, #0]
    8d94:	f7ff ff88 	bl	8ca8 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    8d98:	340c      	adds	r4, #12
    8d9a:	f1b8 0f00 	cmp.w	r8, #0
    8d9e:	d1c9      	bne.n	8d34 <notify_cb+0x18>
    8da0:	f04f 0801 	mov.w	r8, #1
    8da4:	e7de      	b.n	8d64 <notify_cb+0x48>
			bt_conn_unref(conn);
    8da6:	f009 fd2b 	bl	12800 <bt_conn_unref>
    8daa:	e7f5      	b.n	8d98 <notify_cb+0x7c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    8dac:	697b      	ldr	r3, [r7, #20]
    8dae:	b123      	cbz	r3, 8dba <notify_cb+0x9e>
    8db0:	4631      	mov	r1, r6
    8db2:	4798      	blx	r3
    8db4:	b908      	cbnz	r0, 8dba <notify_cb+0x9e>
			bt_conn_unref(conn);
    8db6:	4620      	mov	r0, r4
    8db8:	e7ca      	b.n	8d50 <notify_cb+0x34>
		if (data->type == BT_GATT_CCC_INDICATE) {
    8dba:	8a31      	ldrh	r1, [r6, #16]
    8dbc:	88ab      	ldrh	r3, [r5, #4]
    8dbe:	3901      	subs	r1, #1
    8dc0:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, attr->handle - 1,
    8dc2:	4620      	mov	r0, r4
    8dc4:	68aa      	ldr	r2, [r5, #8]
    8dc6:	b289      	uxth	r1, r1
		if (data->type == BT_GATT_CCC_INDICATE) {
    8dc8:	d10b      	bne.n	8de2 <notify_cb+0xc6>
			err = gatt_indicate(conn, attr->handle - 1,
    8dca:	f7ff fde3 	bl	8994 <gatt_indicate>
			err = gatt_notify(conn, attr->handle - 1,
    8dce:	4606      	mov	r6, r0
		bt_conn_unref(conn);
    8dd0:	4620      	mov	r0, r4
    8dd2:	f009 fd15 	bl	12800 <bt_conn_unref>
		if (err < 0) {
    8dd6:	2e00      	cmp	r6, #0
    8dd8:	f04f 0000 	mov.w	r0, #0
    8ddc:	dbbb      	blt.n	8d56 <notify_cb+0x3a>
		data->err = 0;
    8dde:	6028      	str	r0, [r5, #0]
    8de0:	e7b8      	b.n	8d54 <notify_cb+0x38>
			err = gatt_notify(conn, attr->handle - 1,
    8de2:	f7ff fd75 	bl	88d0 <gatt_notify>
    8de6:	e7f2      	b.n	8dce <notify_cb+0xb2>
    8de8:	00008ac9 	.word	0x00008ac9
    8dec:	20000278 	.word	0x20000278
    8df0:	20001ef7 	.word	0x20001ef7

00008df4 <sc_set>:
{
    8df4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8df8:	460e      	mov	r6, r1
    8dfa:	4690      	mov	r8, r2
    8dfc:	4699      	mov	r9, r3
	if (!name) {
    8dfe:	4604      	mov	r4, r0
{
    8e00:	b087      	sub	sp, #28
	if (!name) {
    8e02:	b948      	cbnz	r0, 8e18 <sc_set+0x24>
		BT_ERR("Insufficient number of arguments");
    8e04:	2145      	movs	r1, #69	; 0x45
    8e06:	4829      	ldr	r0, [pc, #164]	; (8eac <sc_set+0xb8>)
    8e08:	f007 ffe8 	bl	10ddc <printk>
		return -EINVAL;
    8e0c:	f06f 0515 	mvn.w	r5, #21
}
    8e10:	4628      	mov	r0, r5
    8e12:	b007      	add	sp, #28
    8e14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
    8e18:	a902      	add	r1, sp, #8
    8e1a:	f009 fa17 	bl	1224c <bt_settings_decode_key>
	if (err) {
    8e1e:	4605      	mov	r5, r0
    8e20:	b128      	cbz	r0, 8e2e <sc_set+0x3a>
		BT_ERR("Unable to decode address %s", log_strdup(name));
    8e22:	4622      	mov	r2, r4
    8e24:	2145      	movs	r1, #69	; 0x45
    8e26:	4822      	ldr	r0, [pc, #136]	; (8eb0 <sc_set+0xbc>)
    8e28:	f007 ffd8 	bl	10ddc <printk>
    8e2c:	e7ee      	b.n	8e0c <sc_set+0x18>
	settings_name_next(name, &next);
    8e2e:	4620      	mov	r0, r4
    8e30:	a901      	add	r1, sp, #4
    8e32:	f008 fbc9 	bl	115c8 <settings_name_next>
	if (!next) {
    8e36:	9801      	ldr	r0, [sp, #4]
    8e38:	b1d8      	cbz	r0, 8e72 <sc_set+0x7e>
		id = strtol(next, NULL, 10);
    8e3a:	220a      	movs	r2, #10
    8e3c:	4629      	mov	r1, r5
    8e3e:	f009 f8c9 	bl	11fd4 <strtol>
    8e42:	b2c7      	uxtb	r7, r0
	cfg = find_sc_cfg(id, &addr);
    8e44:	4638      	mov	r0, r7
    8e46:	a902      	add	r1, sp, #8
    8e48:	f7ff ff0c 	bl	8c64 <find_sc_cfg>
	if (!cfg && len_rd) {
    8e4c:	4604      	mov	r4, r0
    8e4e:	bb28      	cbnz	r0, 8e9c <sc_set+0xa8>
    8e50:	2e00      	cmp	r6, #0
    8e52:	d0dd      	beq.n	8e10 <sc_set+0x1c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    8e54:	a904      	add	r1, sp, #16
    8e56:	9004      	str	r0, [sp, #16]
    8e58:	f8cd 0013 	str.w	r0, [sp, #19]
    8e5c:	f7ff ff02 	bl	8c64 <find_sc_cfg>
		if (!cfg) {
    8e60:	4604      	mov	r4, r0
    8e62:	b940      	cbnz	r0, 8e76 <sc_set+0x82>
			BT_ERR("Unable to restore SC: no cfg left");
    8e64:	2145      	movs	r1, #69	; 0x45
    8e66:	4813      	ldr	r0, [pc, #76]	; (8eb4 <sc_set+0xc0>)
    8e68:	f007 ffb8 	bl	10ddc <printk>
			return -ENOMEM;
    8e6c:	f06f 050b 	mvn.w	r5, #11
    8e70:	e7ce      	b.n	8e10 <sc_set+0x1c>
		id = BT_ID_DEFAULT;
    8e72:	462f      	mov	r7, r5
    8e74:	e7e6      	b.n	8e44 <sc_set+0x50>
		cfg->id = id;
    8e76:	f800 7b01 	strb.w	r7, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
    8e7a:	a902      	add	r1, sp, #8
    8e7c:	f00a fa88 	bl	13390 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
    8e80:	f104 0108 	add.w	r1, r4, #8
    8e84:	2204      	movs	r2, #4
    8e86:	4648      	mov	r0, r9
    8e88:	47c0      	blx	r8
		if (len < 0) {
    8e8a:	1e04      	subs	r4, r0, #0
    8e8c:	dac0      	bge.n	8e10 <sc_set+0x1c>
			BT_ERR("Failed to decode value (err %zd)", len);
    8e8e:	4622      	mov	r2, r4
    8e90:	2145      	movs	r1, #69	; 0x45
    8e92:	4809      	ldr	r0, [pc, #36]	; (8eb8 <sc_set+0xc4>)
    8e94:	f007 ffa2 	bl	10ddc <printk>
			return len;
    8e98:	4625      	mov	r5, r4
    8e9a:	e7b9      	b.n	8e10 <sc_set+0x1c>
	if (len_rd) {
    8e9c:	2e00      	cmp	r6, #0
    8e9e:	d1ef      	bne.n	8e80 <sc_set+0x8c>
		memset(cfg, 0, sizeof(*cfg));
    8ea0:	220c      	movs	r2, #12
    8ea2:	4631      	mov	r1, r6
    8ea4:	f009 f986 	bl	121b4 <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
    8ea8:	e7b2      	b.n	8e10 <sc_set+0x1c>
    8eaa:	bf00      	nop
    8eac:	0001733a 	.word	0x0001733a
    8eb0:	00018aea 	.word	0x00018aea
    8eb4:	00018b0b 	.word	0x00018b0b
    8eb8:	00018955 	.word	0x00018955

00008ebc <find_cf_cfg>:
{
    8ebc:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if (!conn) {
    8ebe:	4605      	mov	r5, r0
    8ec0:	4c15      	ldr	r4, [pc, #84]	; (8f18 <find_cf_cfg+0x5c>)
    8ec2:	b140      	cbz	r0, 8ed6 <find_cf_cfg+0x1a>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    8ec4:	4622      	mov	r2, r4
    8ec6:	f812 1b01 	ldrb.w	r1, [r2], #1
    8eca:	f009 fc72 	bl	127b2 <bt_conn_is_peer_addr_le>
    8ece:	b1c0      	cbz	r0, 8f02 <find_cf_cfg+0x46>
}
    8ed0:	4620      	mov	r0, r4
    8ed2:	b003      	add	sp, #12
    8ed4:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    8ed6:	9000      	str	r0, [sp, #0]
    8ed8:	2207      	movs	r2, #7
    8eda:	f8cd 0003 	str.w	r0, [sp, #3]
    8ede:	4669      	mov	r1, sp
    8ee0:	1c60      	adds	r0, r4, #1
    8ee2:	f009 f92c 	bl	1213e <memcmp>
    8ee6:	2800      	cmp	r0, #0
    8ee8:	d0f2      	beq.n	8ed0 <find_cf_cfg+0x14>
    8eea:	2207      	movs	r2, #7
    8eec:	4669      	mov	r1, sp
    8eee:	f104 0011 	add.w	r0, r4, #17
    8ef2:	9500      	str	r5, [sp, #0]
    8ef4:	f8cd 5003 	str.w	r5, [sp, #3]
    8ef8:	f009 f921 	bl	1213e <memcmp>
    8efc:	b948      	cbnz	r0, 8f12 <find_cf_cfg+0x56>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    8efe:	3410      	adds	r4, #16
    8f00:	e7e6      	b.n	8ed0 <find_cf_cfg+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    8f02:	4628      	mov	r0, r5
    8f04:	7c21      	ldrb	r1, [r4, #16]
    8f06:	f104 0211 	add.w	r2, r4, #17
    8f0a:	f009 fc52 	bl	127b2 <bt_conn_is_peer_addr_le>
    8f0e:	2800      	cmp	r0, #0
    8f10:	d1f5      	bne.n	8efe <find_cf_cfg+0x42>
	return NULL;
    8f12:	2400      	movs	r4, #0
    8f14:	e7dc      	b.n	8ed0 <find_cf_cfg+0x14>
    8f16:	bf00      	nop
    8f18:	20000f58 	.word	0x20000f58

00008f1c <cf_write>:
{
    8f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8f20:	461e      	mov	r6, r3
    8f22:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    8f26:	4607      	mov	r7, r0
	if (offset > sizeof(cfg->data)) {
    8f28:	2b01      	cmp	r3, #1
{
    8f2a:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
    8f2c:	d83b      	bhi.n	8fa6 <cf_write+0x8a>
	if (offset + len > sizeof(cfg->data)) {
    8f2e:	4433      	add	r3, r6
    8f30:	2b01      	cmp	r3, #1
    8f32:	4635      	mov	r5, r6
    8f34:	dc3a      	bgt.n	8fac <cf_write+0x90>
	cfg = find_cf_cfg(conn);
    8f36:	f7ff ffc1 	bl	8ebc <find_cf_cfg>
	if (!cfg) {
    8f3a:	4604      	mov	r4, r0
    8f3c:	b960      	cbnz	r0, 8f58 <cf_write+0x3c>
		cfg = find_cf_cfg(NULL);
    8f3e:	f7ff ffbd 	bl	8ebc <find_cf_cfg>
	if (!cfg) {
    8f42:	4604      	mov	r4, r0
    8f44:	b940      	cbnz	r0, 8f58 <cf_write+0x3c>
		BT_WARN("No space to store Client Supported Features");
    8f46:	2157      	movs	r1, #87	; 0x57
    8f48:	481a      	ldr	r0, [pc, #104]	; (8fb4 <cf_write+0x98>)
    8f4a:	f007 ff47 	bl	10ddc <printk>
    8f4e:	f06f 0510 	mvn.w	r5, #16
}
    8f52:	4628      	mov	r0, r5
    8f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i < len && i < last_byte; i++) {
    8f58:	2300      	movs	r3, #0
    8f5a:	429e      	cmp	r6, r3
    8f5c:	d914      	bls.n	8f88 <cf_write+0x6c>
    8f5e:	b13b      	cbz	r3, 8f70 <cf_write+0x54>
		cfg->data[i] |= value[i] & ((1 << last_bit) - 1);
    8f60:	f898 3000 	ldrb.w	r3, [r8]
    8f64:	7a22      	ldrb	r2, [r4, #8]
    8f66:	f003 0301 	and.w	r3, r3, #1
    8f6a:	4313      	orrs	r3, r2
    8f6c:	7223      	strb	r3, [r4, #8]
	for (i = 0U; i < len && i < last_byte; i++) {
    8f6e:	e00d      	b.n	8f8c <cf_write+0x70>
    8f70:	7a21      	ldrb	r1, [r4, #8]
		u8_t chg_bits = value[i] ^ cfg->data[i];
    8f72:	f898 2000 	ldrb.w	r2, [r8]
	for (i = 0U; i < len && i < last_byte; i++) {
    8f76:	2301      	movs	r3, #1
		u8_t chg_bits = value[i] ^ cfg->data[i];
    8f78:	404a      	eors	r2, r1
			if ((BIT(bit) & chg_bits) &&
    8f7a:	07d0      	lsls	r0, r2, #31
    8f7c:	d5ed      	bpl.n	8f5a <cf_write+0x3e>
    8f7e:	07ca      	lsls	r2, r1, #31
    8f80:	d5eb      	bpl.n	8f5a <cf_write+0x3e>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    8f82:	f06f 0512 	mvn.w	r5, #18
    8f86:	e7e4      	b.n	8f52 <cf_write+0x36>
	for (i = 0U; i < len && i < last_byte; i++) {
    8f88:	2e00      	cmp	r6, #0
    8f8a:	d1e9      	bne.n	8f60 <cf_write+0x44>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    8f8c:	f107 017c 	add.w	r1, r7, #124	; 0x7c
    8f90:	1c60      	adds	r0, r4, #1
    8f92:	f00a f9fd 	bl	13390 <bt_addr_le_copy>
	cfg->id = conn->id;
    8f96:	4620      	mov	r0, r4
    8f98:	7a3b      	ldrb	r3, [r7, #8]
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    8f9a:	2100      	movs	r1, #0
	cfg->id = conn->id;
    8f9c:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    8fa0:	f00a fa63 	bl	1346a <atomic_set_bit>
	return len;
    8fa4:	e7d5      	b.n	8f52 <cf_write+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    8fa6:	f06f 0506 	mvn.w	r5, #6
    8faa:	e7d2      	b.n	8f52 <cf_write+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    8fac:	f06f 050c 	mvn.w	r5, #12
    8fb0:	e7cf      	b.n	8f52 <cf_write+0x36>
    8fb2:	bf00      	nop
    8fb4:	00018b32 	.word	0x00018b32

00008fb8 <sc_indicate_rsp>:
{
    8fb8:	b538      	push	{r3, r4, r5, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    8fba:	4d10      	ldr	r5, [pc, #64]	; (8ffc <sc_indicate_rsp+0x44>)
    8fbc:	4604      	mov	r4, r0
    8fbe:	f06f 0102 	mvn.w	r1, #2
    8fc2:	4628      	mov	r0, r5
    8fc4:	f00a f9f5 	bl	133b2 <atomic_and>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8fc8:	e8d5 3faf 	lda	r3, [r5]
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    8fcc:	07da      	lsls	r2, r3, #31
    8fce:	d506      	bpl.n	8fde <sc_indicate_rsp+0x26>
    8fd0:	2200      	movs	r2, #0
    8fd2:	2300      	movs	r3, #0
    8fd4:	480a      	ldr	r0, [pc, #40]	; (9000 <sc_indicate_rsp+0x48>)
    8fd6:	f1a5 0120 	sub.w	r1, r5, #32
    8fda:	f006 fed9 	bl	fd90 <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
    8fde:	4620      	mov	r0, r4
    8fe0:	f7ff ff6c 	bl	8ebc <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    8fe4:	b140      	cbz	r0, 8ff8 <sc_indicate_rsp+0x40>
    8fe6:	7a03      	ldrb	r3, [r0, #8]
    8fe8:	07db      	lsls	r3, r3, #31
    8fea:	d505      	bpl.n	8ff8 <sc_indicate_rsp+0x40>
}
    8fec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    8ff0:	2100      	movs	r1, #0
    8ff2:	300c      	adds	r0, #12
    8ff4:	f00a ba39 	b.w	1346a <atomic_set_bit>
}
    8ff8:	bd38      	pop	{r3, r4, r5, pc}
    8ffa:	bf00      	nop
    8ffc:	20000fd0 	.word	0x20000fd0
    9000:	20001e54 	.word	0x20001e54

00009004 <cf_set>:
{
    9004:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    9008:	4688      	mov	r8, r1
    900a:	4616      	mov	r6, r2
    900c:	461f      	mov	r7, r3
	if (!name) {
    900e:	4605      	mov	r5, r0
    9010:	b948      	cbnz	r0, 9026 <cf_set+0x22>
		BT_ERR("Insufficient number of arguments");
    9012:	2145      	movs	r1, #69	; 0x45
    9014:	4821      	ldr	r0, [pc, #132]	; (909c <cf_set+0x98>)
    9016:	f007 fee1 	bl	10ddc <printk>
		return -EINVAL;
    901a:	f06f 0415 	mvn.w	r4, #21
}
    901e:	4620      	mov	r0, r4
    9020:	b004      	add	sp, #16
    9022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
    9026:	a902      	add	r1, sp, #8
    9028:	f009 f910 	bl	1224c <bt_settings_decode_key>
	if (err) {
    902c:	4604      	mov	r4, r0
    902e:	b128      	cbz	r0, 903c <cf_set+0x38>
		BT_ERR("Unable to decode address %s", log_strdup(name));
    9030:	462a      	mov	r2, r5
    9032:	2145      	movs	r1, #69	; 0x45
    9034:	481a      	ldr	r0, [pc, #104]	; (90a0 <cf_set+0x9c>)
    9036:	f007 fed1 	bl	10ddc <printk>
    903a:	e7ee      	b.n	901a <cf_set+0x16>
	settings_name_next(name, &next);
    903c:	4628      	mov	r0, r5
    903e:	a901      	add	r1, sp, #4
    9040:	f008 fac2 	bl	115c8 <settings_name_next>
	if (!next) {
    9044:	9801      	ldr	r0, [sp, #4]
    9046:	b190      	cbz	r0, 906e <cf_set+0x6a>
		id = strtol(next, NULL, 10);
    9048:	220a      	movs	r2, #10
    904a:	4621      	mov	r1, r4
    904c:	f008 ffc2 	bl	11fd4 <strtol>
    9050:	b2c0      	uxtb	r0, r0
	cfg = find_cf_cfg_by_addr(id, &addr);
    9052:	a902      	add	r1, sp, #8
    9054:	f7ff fde4 	bl	8c20 <find_cf_cfg_by_addr>
	if (!cfg) {
    9058:	4601      	mov	r1, r0
    905a:	b950      	cbnz	r0, 9072 <cf_set+0x6e>
		cfg = find_cf_cfg(NULL);
    905c:	f7ff ff2e 	bl	8ebc <find_cf_cfg>
		if (!cfg) {
    9060:	4601      	mov	r1, r0
    9062:	b930      	cbnz	r0, 9072 <cf_set+0x6e>
			BT_ERR("Unable to restore CF: no cfg left");
    9064:	2145      	movs	r1, #69	; 0x45
    9066:	480f      	ldr	r0, [pc, #60]	; (90a4 <cf_set+0xa0>)
    9068:	f007 feb8 	bl	10ddc <printk>
			return 0;
    906c:	e7d7      	b.n	901e <cf_set+0x1a>
		id = BT_ID_DEFAULT;
    906e:	4620      	mov	r0, r4
    9070:	e7ef      	b.n	9052 <cf_set+0x4e>
	if (len_rd) {
    9072:	f1b8 0f00 	cmp.w	r8, #0
    9076:	d00c      	beq.n	9092 <cf_set+0x8e>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
    9078:	2201      	movs	r2, #1
    907a:	4638      	mov	r0, r7
    907c:	3108      	adds	r1, #8
    907e:	47b0      	blx	r6
		if (len < 0) {
    9080:	1e05      	subs	r5, r0, #0
    9082:	dacc      	bge.n	901e <cf_set+0x1a>
			BT_ERR("Failed to decode value (err %zd)", len);
    9084:	462a      	mov	r2, r5
    9086:	2145      	movs	r1, #69	; 0x45
    9088:	4807      	ldr	r0, [pc, #28]	; (90a8 <cf_set+0xa4>)
    908a:	f007 fea7 	bl	10ddc <printk>
			return len;
    908e:	462c      	mov	r4, r5
    9090:	e7c5      	b.n	901e <cf_set+0x1a>
		clear_cf_cfg(cfg);
    9092:	4608      	mov	r0, r1
    9094:	f00a f9a4 	bl	133e0 <clear_cf_cfg>
    9098:	e7c1      	b.n	901e <cf_set+0x1a>
    909a:	bf00      	nop
    909c:	0001733a 	.word	0x0001733a
    90a0:	00018aea 	.word	0x00018aea
    90a4:	00018b63 	.word	0x00018b63
    90a8:	00018955 	.word	0x00018955

000090ac <gatt_write_ccc.constprop.0>:
static int gatt_write_ccc(struct bt_conn *conn, u16_t handle, u16_t value,
    90ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    90b0:	4688      	mov	r8, r1
    90b2:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    90b4:	2112      	movs	r1, #18
    90b6:	2204      	movs	r2, #4
static int gatt_write_ccc(struct bt_conn *conn, u16_t handle, u16_t value,
    90b8:	4606      	mov	r6, r0
    90ba:	461d      	mov	r5, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    90bc:	f7fe fd22 	bl	7b04 <bt_att_create_pdu>
	if (!buf) {
    90c0:	4604      	mov	r4, r0
    90c2:	b1e8      	cbz	r0, 9100 <gatt_write_ccc.constprop.0+0x54>
	req = net_buf_add(buf, sizeof(*req));
    90c4:	f100 0908 	add.w	r9, r0, #8
    90c8:	2102      	movs	r1, #2
    90ca:	4648      	mov	r0, r9
    90cc:	f002 fe44 	bl	bd58 <net_buf_simple_add>
	net_buf_add_le16(buf, value);
    90d0:	4639      	mov	r1, r7
	req->handle = sys_cpu_to_le16(handle);
    90d2:	f8a0 8000 	strh.w	r8, [r0]
	net_buf_add_le16(buf, value);
    90d6:	4648      	mov	r0, r9
    90d8:	f00a ffb7 	bl	1404a <net_buf_simple_add_le16>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    90dc:	f105 030c 	add.w	r3, r5, #12
    90e0:	e8d3 2fef 	ldaex	r2, [r3]
    90e4:	f042 0204 	orr.w	r2, r2, #4
    90e8:	e8c3 2fe1 	stlex	r1, r2, [r3]
    90ec:	2900      	cmp	r1, #0
    90ee:	d1f7      	bne.n	90e0 <gatt_write_ccc.constprop.0+0x34>
	return gatt_send(conn, buf, func, params, NULL);
    90f0:	462b      	mov	r3, r5
    90f2:	4621      	mov	r1, r4
    90f4:	4630      	mov	r0, r6
}
    90f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, func, params, NULL);
    90fa:	4a03      	ldr	r2, [pc, #12]	; (9108 <gatt_write_ccc.constprop.0+0x5c>)
    90fc:	f7ff bc18 	b.w	8930 <gatt_send.constprop.0>
}
    9100:	f06f 000b 	mvn.w	r0, #11
    9104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9108:	0001365f 	.word	0x0001365f

0000910c <bt_gatt_clear_sc>:
{
    910c:	b570      	push	{r4, r5, r6, lr}
    910e:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
    9110:	f7ff fda8 	bl	8c64 <find_sc_cfg>
	if (!cfg) {
    9114:	4604      	mov	r4, r0
    9116:	b1e8      	cbz	r0, 9154 <bt_gatt_clear_sc+0x48>
		if (cfg->id) {
    9118:	4605      	mov	r5, r0
    911a:	f815 2b01 	ldrb.w	r2, [r5], #1
    911e:	b1e2      	cbz	r2, 915a <bt_gatt_clear_sc+0x4e>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
    9120:	ae02      	add	r6, sp, #8
    9122:	2104      	movs	r1, #4
    9124:	4630      	mov	r0, r6
    9126:	f007 fdc3 	bl	10cb0 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
    912a:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
    912c:	4a0c      	ldr	r2, [pc, #48]	; (9160 <bt_gatt_clear_sc+0x54>)
    912e:	462b      	mov	r3, r5
    9130:	2124      	movs	r1, #36	; 0x24
    9132:	a803      	add	r0, sp, #12
    9134:	f7fa fcbc 	bl	3ab0 <bt_settings_encode_key>
		err = settings_delete(key);
    9138:	a803      	add	r0, sp, #12
    913a:	f008 fa1e 	bl	1157a <settings_delete>
		if (err) {
    913e:	4602      	mov	r2, r0
    9140:	b118      	cbz	r0, 914a <bt_gatt_clear_sc+0x3e>
			BT_ERR("failed to delete SC (err %d)", err);
    9142:	2145      	movs	r1, #69	; 0x45
    9144:	4807      	ldr	r0, [pc, #28]	; (9164 <bt_gatt_clear_sc+0x58>)
    9146:	f007 fe49 	bl	10ddc <printk>
	memset(cfg, 0, sizeof(*cfg));
    914a:	220c      	movs	r2, #12
    914c:	2100      	movs	r1, #0
    914e:	4620      	mov	r0, r4
    9150:	f009 f830 	bl	121b4 <memset>
}
    9154:	2000      	movs	r0, #0
    9156:	b00c      	add	sp, #48	; 0x30
    9158:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
    915a:	9200      	str	r2, [sp, #0]
    915c:	e7e6      	b.n	912c <bt_gatt_clear_sc+0x20>
    915e:	bf00      	nop
    9160:	00018d3b 	.word	0x00018d3b
    9164:	00018b8a 	.word	0x00018b8a

00009168 <sc_clear>:
{
    9168:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    916a:	f100 067c 	add.w	r6, r0, #124	; 0x7c
{
    916e:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    9170:	4631      	mov	r1, r6
    9172:	7a00      	ldrb	r0, [r0, #8]
    9174:	f009 fa3f 	bl	125f6 <bt_addr_le_is_bonded>
    9178:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
    917a:	4631      	mov	r1, r6
    917c:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    917e:	b14d      	cbz	r5, 9194 <sc_clear+0x2c>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
    9180:	f7ff ffc4 	bl	910c <bt_gatt_clear_sc>
		if (err) {
    9184:	4602      	mov	r2, r0
    9186:	b170      	cbz	r0, 91a6 <sc_clear+0x3e>
}
    9188:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Failed to clear SC %d", err);
    918c:	2145      	movs	r1, #69	; 0x45
    918e:	4806      	ldr	r0, [pc, #24]	; (91a8 <sc_clear+0x40>)
    9190:	f007 be24 	b.w	10ddc <printk>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
    9194:	f7ff fd66 	bl	8c64 <find_sc_cfg>
		if (cfg) {
    9198:	b128      	cbz	r0, 91a6 <sc_clear+0x3e>
	memset(cfg, 0, sizeof(*cfg));
    919a:	4629      	mov	r1, r5
}
    919c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
    91a0:	220c      	movs	r2, #12
    91a2:	f009 b807 	b.w	121b4 <memset>
}
    91a6:	bd70      	pop	{r4, r5, r6, pc}
    91a8:	00018bac 	.word	0x00018bac

000091ac <disconnected_cb>:
	if (attr->write != bt_gatt_attr_write_ccc) {
    91ac:	6882      	ldr	r2, [r0, #8]
    91ae:	4b20      	ldr	r3, [pc, #128]	; (9230 <disconnected_cb+0x84>)
{
    91b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    91b4:	429a      	cmp	r2, r3
{
    91b6:	4606      	mov	r6, r0
    91b8:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    91ba:	d102      	bne.n	91c2 <disconnected_cb+0x16>
	ccc = attr->user_data;
    91bc:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
    91be:	8963      	ldrh	r3, [r4, #10]
    91c0:	b9c3      	cbnz	r3, 91f4 <disconnected_cb+0x48>
}
    91c2:	2001      	movs	r0, #1
    91c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    91c8:	f105 087c 	add.w	r8, r5, #124	; 0x7c
    91cc:	4641      	mov	r1, r8
    91ce:	7a28      	ldrb	r0, [r5, #8]
    91d0:	f009 fa11 	bl	125f6 <bt_addr_le_is_bonded>
    91d4:	b948      	cbnz	r0, 91ea <disconnected_cb+0x3e>
				if (ccc == &sc_ccc) {
    91d6:	4b17      	ldr	r3, [pc, #92]	; (9234 <disconnected_cb+0x88>)
    91d8:	429c      	cmp	r4, r3
    91da:	d102      	bne.n	91e2 <disconnected_cb+0x36>
					sc_clear(conn);
    91dc:	4628      	mov	r0, r5
    91de:	f7ff ffc3 	bl	9168 <sc_clear>
				clear_ccc_cfg(cfg);
    91e2:	4620      	mov	r0, r4
    91e4:	f00a f8d7 	bl	13396 <clear_ccc_cfg>
	if (!value_used) {
    91e8:	e019      	b.n	921e <disconnected_cb+0x72>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    91ea:	4641      	mov	r1, r8
    91ec:	4638      	mov	r0, r7
    91ee:	f00a f8cf 	bl	13390 <bt_addr_le_copy>
	if (!value_used) {
    91f2:	e014      	b.n	921e <disconnected_cb+0x72>
		if (!cfg->value) {
    91f4:	8923      	ldrh	r3, [r4, #8]
    91f6:	b193      	cbz	r3, 921e <disconnected_cb+0x72>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    91f8:	4627      	mov	r7, r4
    91fa:	f817 1b01 	ldrb.w	r1, [r7], #1
    91fe:	4628      	mov	r0, r5
    9200:	463a      	mov	r2, r7
    9202:	f009 fad6 	bl	127b2 <bt_conn_is_peer_addr_le>
    9206:	2800      	cmp	r0, #0
    9208:	d1de      	bne.n	91c8 <disconnected_cb+0x1c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    920a:	4639      	mov	r1, r7
    920c:	7820      	ldrb	r0, [r4, #0]
    920e:	f7fd f8f7 	bl	6400 <bt_conn_lookup_addr_le>
			if (tmp) {
    9212:	b120      	cbz	r0, 921e <disconnected_cb+0x72>
				if (tmp->state == BT_CONN_CONNECTED) {
    9214:	7b45      	ldrb	r5, [r0, #13]
				bt_conn_unref(tmp);
    9216:	f009 faf3 	bl	12800 <bt_conn_unref>
	if (!value_used) {
    921a:	2d07      	cmp	r5, #7
    921c:	d0d1      	beq.n	91c2 <disconnected_cb+0x16>
		ccc->value = 0U;
    921e:	2100      	movs	r1, #0
		if (ccc->cfg_changed) {
    9220:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
    9222:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
    9224:	2b00      	cmp	r3, #0
    9226:	d0cc      	beq.n	91c2 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
    9228:	4630      	mov	r0, r6
    922a:	4798      	blx	r3
    922c:	e7c9      	b.n	91c2 <disconnected_cb+0x16>
    922e:	bf00      	nop
    9230:	00008ac9 	.word	0x00008ac9
    9234:	20000278 	.word	0x20000278

00009238 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    9238:	2201      	movs	r2, #1
{
    923a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    923c:	4b20      	ldr	r3, [pc, #128]	; (92c0 <bt_gatt_init+0x88>)
    923e:	e8d3 1fef 	ldaex	r1, [r3]
    9242:	2900      	cmp	r1, #0
    9244:	d103      	bne.n	924e <bt_gatt_init+0x16>
    9246:	e8c3 2fe0 	stlex	r0, r2, [r3]
    924a:	2800      	cmp	r0, #0
    924c:	d1f7      	bne.n	923e <bt_gatt_init+0x6>
	if (!atomic_cas(&init, 0, 1)) {
    924e:	d032      	beq.n	92b6 <bt_gatt_init+0x7e>
}
    9250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		last_static_handle += svc->attr_count;
    9252:	4a1c      	ldr	r2, [pc, #112]	; (92c4 <bt_gatt_init+0x8c>)
    9254:	6863      	ldr	r3, [r4, #4]
    9256:	8811      	ldrh	r1, [r2, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    9258:	3408      	adds	r4, #8
		last_static_handle += svc->attr_count;
    925a:	440b      	add	r3, r1
    925c:	8013      	strh	r3, [r2, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    925e:	42ac      	cmp	r4, r5
    9260:	d90e      	bls.n	9280 <bt_gatt_init+0x48>
    9262:	4919      	ldr	r1, [pc, #100]	; (92c8 <bt_gatt_init+0x90>)
    9264:	f44f 7375 	mov.w	r3, #980	; 0x3d4
    9268:	4632      	mov	r2, r6
    926a:	4818      	ldr	r0, [pc, #96]	; (92cc <bt_gatt_init+0x94>)
    926c:	f007 fdb6 	bl	10ddc <printk>
    9270:	4817      	ldr	r0, [pc, #92]	; (92d0 <bt_gatt_init+0x98>)
    9272:	f007 fdb3 	bl	10ddc <printk>
    9276:	f44f 7175 	mov.w	r1, #980	; 0x3d4
    927a:	4630      	mov	r0, r6
    927c:	f008 f844 	bl	11308 <assert_post_action>
    9280:	42bc      	cmp	r4, r7
    9282:	d3e6      	bcc.n	9252 <bt_gatt_init+0x1a>
	k_delayed_work_init(&db_hash_work, db_hash_process);
    9284:	4913      	ldr	r1, [pc, #76]	; (92d4 <bt_gatt_init+0x9c>)
    9286:	4814      	ldr	r0, [pc, #80]	; (92d8 <bt_gatt_init+0xa0>)
    9288:	f00b ff65 	bl	15156 <k_delayed_work_init>
    928c:	2300      	movs	r3, #0
    928e:	f44f 72a4 	mov.w	r2, #328	; 0x148
    9292:	4911      	ldr	r1, [pc, #68]	; (92d8 <bt_gatt_init+0xa0>)
    9294:	4811      	ldr	r0, [pc, #68]	; (92dc <bt_gatt_init+0xa4>)
    9296:	f006 fd7b 	bl	fd90 <k_delayed_work_submit_to_queue>
		k_delayed_work_init(&gatt_sc.work, sc_process);
    929a:	4911      	ldr	r1, [pc, #68]	; (92e0 <bt_gatt_init+0xa8>)
    929c:	4811      	ldr	r0, [pc, #68]	; (92e4 <bt_gatt_init+0xac>)
    929e:	f00b ff5a 	bl	15156 <k_delayed_work_init>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    92a2:	4b11      	ldr	r3, [pc, #68]	; (92e8 <bt_gatt_init+0xb0>)
    92a4:	e8d3 2fef 	ldaex	r2, [r3]
    92a8:	f042 0202 	orr.w	r2, r2, #2
    92ac:	e8c3 2fe1 	stlex	r1, r2, [r3]
    92b0:	2900      	cmp	r1, #0
    92b2:	d0cd      	beq.n	9250 <bt_gatt_init+0x18>
    92b4:	e7f6      	b.n	92a4 <bt_gatt_init+0x6c>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    92b6:	4d0d      	ldr	r5, [pc, #52]	; (92ec <bt_gatt_init+0xb4>)
    92b8:	4c0d      	ldr	r4, [pc, #52]	; (92f0 <bt_gatt_init+0xb8>)
    92ba:	462f      	mov	r7, r5
    92bc:	4e0d      	ldr	r6, [pc, #52]	; (92f4 <bt_gatt_init+0xbc>)
    92be:	e7ce      	b.n	925e <bt_gatt_init+0x26>
    92c0:	20000fd4 	.word	0x20000fd4
    92c4:	20001ef4 	.word	0x20001ef4
    92c8:	00018a06 	.word	0x00018a06
    92cc:	00016493 	.word	0x00016493
    92d0:	000164b0 	.word	0x000164b0
    92d4:	0001374f 	.word	0x0001374f
    92d8:	20000f78 	.word	0x20000f78
    92dc:	20001e54 	.word	0x20001e54
    92e0:	000098d5 	.word	0x000098d5
    92e4:	20000fb0 	.word	0x20000fb0
    92e8:	20000fd0 	.word	0x20000fd0
    92ec:	00015560 	.word	0x00015560
    92f0:	00015548 	.word	0x00015548
    92f4:	000189cf 	.word	0x000189cf

000092f8 <bt_gatt_attr_value_handle>:
{
    92f8:	b508      	push	{r3, lr}
	if ((attr != NULL)
    92fa:	b180      	cbz	r0, 931e <bt_gatt_attr_value_handle+0x26>
	    && (attr->read == bt_gatt_attr_read_chrc)) {
    92fc:	6841      	ldr	r1, [r0, #4]
    92fe:	4b09      	ldr	r3, [pc, #36]	; (9324 <bt_gatt_attr_value_handle+0x2c>)
    9300:	4299      	cmp	r1, r3
    9302:	d10c      	bne.n	931e <bt_gatt_attr_value_handle+0x26>
		handle = chrc->value_handle;
    9304:	68c3      	ldr	r3, [r0, #12]
    9306:	889b      	ldrh	r3, [r3, #4]
		if (handle == 0) {
    9308:	b91b      	cbnz	r3, 9312 <bt_gatt_attr_value_handle+0x1a>
			handle = (attr->handle ? : find_static_attr(attr)) + 1U;
    930a:	8a03      	ldrh	r3, [r0, #16]
    930c:	b11b      	cbz	r3, 9316 <bt_gatt_attr_value_handle+0x1e>
    930e:	3301      	adds	r3, #1
    9310:	b29b      	uxth	r3, r3
}
    9312:	4618      	mov	r0, r3
    9314:	bd08      	pop	{r3, pc}
			handle = (attr->handle ? : find_static_attr(attr)) + 1U;
    9316:	f7ff fa9b 	bl	8850 <find_static_attr>
    931a:	1c43      	adds	r3, r0, #1
    931c:	e7f8      	b.n	9310 <bt_gatt_attr_value_handle+0x18>
	u16_t handle = 0;
    931e:	2300      	movs	r3, #0
    9320:	e7f7      	b.n	9312 <bt_gatt_attr_value_handle+0x1a>
    9322:	bf00      	nop
    9324:	000136d7 	.word	0x000136d7

00009328 <bt_gatt_foreach_attr_type>:
{
    9328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    932c:	b089      	sub	sp, #36	; 0x24
    932e:	9300      	str	r3, [sp, #0]
		num_matches = UINT16_MAX;
    9330:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
    9334:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48
    9338:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
    933a:	2d00      	cmp	r5, #0
    933c:	bf08      	it	eq
    933e:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    9340:	4b2f      	ldr	r3, [pc, #188]	; (9400 <bt_gatt_foreach_attr_type+0xd8>)
{
    9342:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
    9344:	881b      	ldrh	r3, [r3, #0]
{
    9346:	9101      	str	r1, [sp, #4]
	if (start_handle <= last_static_handle) {
    9348:	4283      	cmp	r3, r0
    934a:	d34d      	bcc.n	93e8 <bt_gatt_foreach_attr_type+0xc0>
		u16_t handle = 1;
    934c:	2401      	movs	r4, #1
    934e:	4e2d      	ldr	r6, [pc, #180]	; (9404 <bt_gatt_foreach_attr_type+0xdc>)
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    9350:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 9414 <bt_gatt_foreach_attr_type+0xec>
    9354:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 9418 <bt_gatt_foreach_attr_type+0xf0>
    9358:	f1a6 0908 	sub.w	r9, r6, #8
    935c:	45d1      	cmp	r9, sl
    935e:	d90e      	bls.n	937e <bt_gatt_foreach_attr_type+0x56>
    9360:	4929      	ldr	r1, [pc, #164]	; (9408 <bt_gatt_foreach_attr_type+0xe0>)
    9362:	f240 5356 	movw	r3, #1366	; 0x556
    9366:	465a      	mov	r2, fp
    9368:	4828      	ldr	r0, [pc, #160]	; (940c <bt_gatt_foreach_attr_type+0xe4>)
    936a:	f007 fd37 	bl	10ddc <printk>
    936e:	4828      	ldr	r0, [pc, #160]	; (9410 <bt_gatt_foreach_attr_type+0xe8>)
    9370:	f007 fd34 	bl	10ddc <printk>
    9374:	f240 5156 	movw	r1, #1366	; 0x556
    9378:	4658      	mov	r0, fp
    937a:	f007 ffc5 	bl	11308 <assert_post_action>
    937e:	4b25      	ldr	r3, [pc, #148]	; (9414 <bt_gatt_foreach_attr_type+0xec>)
    9380:	4599      	cmp	r9, r3
    9382:	d231      	bcs.n	93e8 <bt_gatt_foreach_attr_type+0xc0>
			if (handle + static_svc->attr_count < start_handle) {
    9384:	f856 3c04 	ldr.w	r3, [r6, #-4]
    9388:	4423      	add	r3, r4
    938a:	42bb      	cmp	r3, r7
    938c:	d234      	bcs.n	93f8 <bt_gatt_foreach_attr_type+0xd0>
				handle += static_svc->attr_count;
    938e:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    9390:	3608      	adds	r6, #8
    9392:	e7e1      	b.n	9358 <bt_gatt_foreach_attr_type+0x30>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    9394:	4640      	mov	r0, r8
    9396:	9903      	ldr	r1, [sp, #12]
    9398:	f008 ff7c 	bl	12294 <bt_uuid_cmp>
    939c:	b1c8      	cbz	r0, 93d2 <bt_gatt_foreach_attr_type+0xaa>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    939e:	3401      	adds	r4, #1
    93a0:	f109 0901 	add.w	r9, r9, #1
    93a4:	b2a4      	uxth	r4, r4
    93a6:	f856 3c04 	ldr.w	r3, [r6, #-4]
    93aa:	454b      	cmp	r3, r9
    93ac:	d9f0      	bls.n	9390 <bt_gatt_foreach_attr_type+0x68>
				memcpy(&attr, &static_svc->attrs[i],
    93ae:	2214      	movs	r2, #20
    93b0:	f856 1c08 	ldr.w	r1, [r6, #-8]
    93b4:	a803      	add	r0, sp, #12
    93b6:	fb02 1109 	mla	r1, r2, r9, r1
    93ba:	f008 fed0 	bl	1215e <memcpy>
	if (attr->handle > end_handle) {
    93be:	9b01      	ldr	r3, [sp, #4]
				attr.handle = handle;
    93c0:	f8ad 401c 	strh.w	r4, [sp, #28]
	if (attr->handle > end_handle) {
    93c4:	429c      	cmp	r4, r3
    93c6:	d80f      	bhi.n	93e8 <bt_gatt_foreach_attr_type+0xc0>
	if (attr->handle < start_handle) {
    93c8:	42bc      	cmp	r4, r7
    93ca:	d3e8      	bcc.n	939e <bt_gatt_foreach_attr_type+0x76>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    93cc:	f1b8 0f00 	cmp.w	r8, #0
    93d0:	d1e0      	bne.n	9394 <bt_gatt_foreach_attr_type+0x6c>
	if (attr_data && attr_data != attr->user_data) {
    93d2:	9b00      	ldr	r3, [sp, #0]
    93d4:	b95b      	cbnz	r3, 93ee <bt_gatt_foreach_attr_type+0xc6>
	*num_matches -= 1;
    93d6:	3d01      	subs	r5, #1
    93d8:	b2ad      	uxth	r5, r5
	result = func(attr, user_data);
    93da:	9914      	ldr	r1, [sp, #80]	; 0x50
    93dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    93de:	a803      	add	r0, sp, #12
    93e0:	4798      	blx	r3
	if (!*num_matches) {
    93e2:	b10d      	cbz	r5, 93e8 <bt_gatt_foreach_attr_type+0xc0>
				if (gatt_foreach_iter(&attr, start_handle,
    93e4:	2800      	cmp	r0, #0
    93e6:	d1da      	bne.n	939e <bt_gatt_foreach_attr_type+0x76>
}
    93e8:	b009      	add	sp, #36	; 0x24
    93ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr_data && attr_data != attr->user_data) {
    93ee:	9b06      	ldr	r3, [sp, #24]
    93f0:	9a00      	ldr	r2, [sp, #0]
    93f2:	429a      	cmp	r2, r3
    93f4:	d1d3      	bne.n	939e <bt_gatt_foreach_attr_type+0x76>
    93f6:	e7ee      	b.n	93d6 <bt_gatt_foreach_attr_type+0xae>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    93f8:	f04f 0900 	mov.w	r9, #0
    93fc:	e7d3      	b.n	93a6 <bt_gatt_foreach_attr_type+0x7e>
    93fe:	bf00      	nop
    9400:	20001ef4 	.word	0x20001ef4
    9404:	00015550 	.word	0x00015550
    9408:	000189ff 	.word	0x000189ff
    940c:	00016493 	.word	0x00016493
    9410:	000164b0 	.word	0x000164b0
    9414:	00015560 	.word	0x00015560
    9418:	000189cf 	.word	0x000189cf

0000941c <db_hash_gen>:
{
    941c:	b530      	push	{r4, r5, lr}
	u8_t key[16] = {};
    941e:	2400      	movs	r4, #0
{
    9420:	b0c9      	sub	sp, #292	; 0x124
    9422:	4605      	mov	r5, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    9424:	4669      	mov	r1, sp
    9426:	aa1c      	add	r2, sp, #112	; 0x70
    9428:	a804      	add	r0, sp, #16
	u8_t key[16] = {};
    942a:	e9cd 4400 	strd	r4, r4, [sp]
    942e:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    9432:	f008 fac6 	bl	119c2 <tc_cmac_setup>
    9436:	b928      	cbnz	r0, 9444 <db_hash_gen+0x28>
		BT_ERR("Unable to setup AES CMAC");
    9438:	2145      	movs	r1, #69	; 0x45
    943a:	4812      	ldr	r0, [pc, #72]	; (9484 <db_hash_gen+0x68>)
		BT_ERR("Unable to calculate hash");
    943c:	f007 fcce 	bl	10ddc <printk>
}
    9440:	b049      	add	sp, #292	; 0x124
    9442:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    9444:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9448:	2001      	movs	r0, #1
    944a:	4a0f      	ldr	r2, [pc, #60]	; (9488 <db_hash_gen+0x6c>)
    944c:	ab04      	add	r3, sp, #16
    944e:	f00a f973 	bl	13738 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    9452:	480e      	ldr	r0, [pc, #56]	; (948c <db_hash_gen+0x70>)
    9454:	a904      	add	r1, sp, #16
    9456:	f008 fb4b 	bl	11af0 <tc_cmac_final>
    945a:	b910      	cbnz	r0, 9462 <db_hash_gen+0x46>
		BT_ERR("Unable to calculate hash");
    945c:	2145      	movs	r1, #69	; 0x45
    945e:	480c      	ldr	r0, [pc, #48]	; (9490 <db_hash_gen+0x74>)
    9460:	e7ec      	b.n	943c <db_hash_gen+0x20>
    9462:	4b0a      	ldr	r3, [pc, #40]	; (948c <db_hash_gen+0x70>)
    9464:	f103 0210 	add.w	r2, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		u8_t tmp = ((u8_t *)buf)[i];
    9468:	7819      	ldrb	r1, [r3, #0]

		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    946a:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
    946e:	3401      	adds	r4, #1
    9470:	2c08      	cmp	r4, #8
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    9472:	f803 0b01 	strb.w	r0, [r3], #1
		((u8_t *)buf)[length - 1 - i] = tmp;
    9476:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
    9478:	d1f6      	bne.n	9468 <db_hash_gen+0x4c>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
    947a:	2d00      	cmp	r5, #0
    947c:	d0e0      	beq.n	9440 <db_hash_gen+0x24>
		db_hash_store();
    947e:	f7ff f9a9 	bl	87d4 <db_hash_store>
    9482:	e7dd      	b.n	9440 <db_hash_gen+0x24>
    9484:	00018bc7 	.word	0x00018bc7
    9488:	000132e1 	.word	0x000132e1
    948c:	20001ff0 	.word	0x20001ff0
    9490:	00018be5 	.word	0x00018be5

00009494 <db_hash_commit>:

static int db_hash_commit(void)
{
    9494:	b510      	push	{r4, lr}
	int err;

	/* Stop work and generate the hash */
	err = k_delayed_work_cancel(&db_hash_work);
    9496:	4823      	ldr	r0, [pc, #140]	; (9524 <db_hash_commit+0x90>)
    9498:	f006 fd04 	bl	fea4 <k_delayed_work_cancel>
	if (!err) {
    949c:	b908      	cbnz	r0, 94a2 <db_hash_commit+0xe>
		db_hash_gen(false);
    949e:	f7ff ffbd 	bl	941c <db_hash_gen>
	}

	/* Check if hash matches then skip SC update */
	if (!memcmp(stored_hash, db_hash, sizeof(stored_hash))) {
    94a2:	2210      	movs	r2, #16
    94a4:	4920      	ldr	r1, [pc, #128]	; (9528 <db_hash_commit+0x94>)
    94a6:	4821      	ldr	r0, [pc, #132]	; (952c <db_hash_commit+0x98>)
    94a8:	f008 fe49 	bl	1213e <memcmp>
    94ac:	b948      	cbnz	r0, 94c2 <db_hash_commit+0x2e>
		BT_DBG("Database Hash matches");
		k_delayed_work_cancel(&gatt_sc.work);
    94ae:	4820      	ldr	r0, [pc, #128]	; (9530 <db_hash_commit+0x9c>)
    94b0:	f006 fcf8 	bl	fea4 <k_delayed_work_cancel>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    94b4:	f06f 0101 	mvn.w	r1, #1
    94b8:	481e      	ldr	r0, [pc, #120]	; (9534 <db_hash_commit+0xa0>)
    94ba:	f009 ff7a 	bl	133b2 <atomic_and>

	/* Hash did not match overwrite with current hash */
	db_hash_store();

	return 0;
}
    94be:	2000      	movs	r0, #0
    94c0:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    94c2:	491d      	ldr	r1, [pc, #116]	; (9538 <db_hash_commit+0xa4>)
    94c4:	f101 0338 	add.w	r3, r1, #56	; 0x38
    94c8:	e8d3 2fef 	ldaex	r2, [r3]
    94cc:	f042 0001 	orr.w	r0, r2, #1
    94d0:	e8c3 0fe4 	stlex	r4, r0, [r3]
    94d4:	2c00      	cmp	r4, #0
    94d6:	d1f7      	bne.n	94c8 <db_hash_commit+0x34>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    94d8:	f012 0f01 	tst.w	r2, #1
    94dc:	460a      	mov	r2, r1
    94de:	d10f      	bne.n	9500 <db_hash_commit+0x6c>
		gatt_sc.start = start;
    94e0:	4a16      	ldr	r2, [pc, #88]	; (953c <db_hash_commit+0xa8>)
    94e2:	614a      	str	r2, [r1, #20]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    94e4:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
    94e8:	079b      	lsls	r3, r3, #30
    94ea:	d406      	bmi.n	94fa <db_hash_commit+0x66>
    94ec:	f44f 72a4 	mov.w	r2, #328	; 0x148
    94f0:	2300      	movs	r3, #0
    94f2:	490f      	ldr	r1, [pc, #60]	; (9530 <db_hash_commit+0x9c>)
    94f4:	4812      	ldr	r0, [pc, #72]	; (9540 <db_hash_commit+0xac>)
    94f6:	f006 fc4b 	bl	fd90 <k_delayed_work_submit_to_queue>
	db_hash_store();
    94fa:	f7ff f96b 	bl	87d4 <db_hash_store>
	return 0;
    94fe:	e7de      	b.n	94be <db_hash_commit+0x2a>
	if (new_start >= *start && new_end <= *end) {
    9500:	8ac8      	ldrh	r0, [r1, #22]
    9502:	8a89      	ldrh	r1, [r1, #20]
    9504:	2901      	cmp	r1, #1
    9506:	f64f 71ff 	movw	r1, #65535	; 0xffff
    950a:	d805      	bhi.n	9518 <db_hash_commit+0x84>
    950c:	4288      	cmp	r0, r1
    950e:	d0f4      	beq.n	94fa <db_hash_commit+0x66>
		*end = new_end;
    9510:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9514:	82d1      	strh	r1, [r2, #22]
    9516:	e7e5      	b.n	94e4 <db_hash_commit+0x50>
		*start = new_start;
    9518:	2401      	movs	r4, #1
	if (*end < new_end) {
    951a:	4288      	cmp	r0, r1
		*start = new_start;
    951c:	8294      	strh	r4, [r2, #20]
	if (*end < new_end) {
    951e:	d0e1      	beq.n	94e4 <db_hash_commit+0x50>
    9520:	e7f6      	b.n	9510 <db_hash_commit+0x7c>
    9522:	bf00      	nop
    9524:	20000f78 	.word	0x20000f78
    9528:	20001ff0 	.word	0x20001ff0
    952c:	20002000 	.word	0x20002000
    9530:	20000fb0 	.word	0x20000fb0
    9534:	20000fd0 	.word	0x20000fd0
    9538:	20000f98 	.word	0x20000f98
    953c:	ffff0001 	.word	0xffff0001
    9540:	20001e54 	.word	0x20001e54

00009544 <ccc_set_direct>:
{
    9544:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9548:	b0b9      	sub	sp, #228	; 0xe4
    954a:	4688      	mov	r8, r1
    954c:	4616      	mov	r6, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    954e:	492c      	ldr	r1, [pc, #176]	; (9600 <ccc_set_direct+0xbc>)
    9550:	466a      	mov	r2, sp
    9552:	9840      	ldr	r0, [sp, #256]	; 0x100
{
    9554:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    9556:	f008 f814 	bl	11582 <settings_name_steq>
    955a:	b948      	cbnz	r0, 9570 <ccc_set_direct+0x2c>
			BT_ERR("Invalid key");
    955c:	2145      	movs	r1, #69	; 0x45
    955e:	4829      	ldr	r0, [pc, #164]	; (9604 <ccc_set_direct+0xc0>)
    9560:	f007 fc3c 	bl	10ddc <printk>
    9564:	f06f 0515 	mvn.w	r5, #21
}
    9568:	4628      	mov	r0, r5
    956a:	b039      	add	sp, #228	; 0xe4
    956c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
    9570:	9c00      	ldr	r4, [sp, #0]
		settings_name_next(name, &next);
    9572:	a901      	add	r1, sp, #4
    9574:	4620      	mov	r0, r4
    9576:	f008 f827 	bl	115c8 <settings_name_next>
		if (!name) {
    957a:	b93c      	cbnz	r4, 958c <ccc_set_direct+0x48>
			BT_ERR("Insufficient number of arguments");
    957c:	2145      	movs	r1, #69	; 0x45
    957e:	4822      	ldr	r0, [pc, #136]	; (9608 <ccc_set_direct+0xc4>)
    9580:	f007 fc2c 	bl	10ddc <printk>
			return -EINVAL;
    9584:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
    9588:	4625      	mov	r5, r4
    958a:	e7ed      	b.n	9568 <ccc_set_direct+0x24>
		} else if (!next) {
    958c:	9801      	ldr	r0, [sp, #4]
    958e:	b978      	cbnz	r0, 95b0 <ccc_set_direct+0x6c>
		err = bt_settings_decode_key(name, &addr);
    9590:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = strtol(next, NULL, 10);
    9594:	f88d 0014 	strb.w	r0, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
    9598:	4649      	mov	r1, r9
    959a:	4620      	mov	r0, r4
    959c:	f008 fe56 	bl	1224c <bt_settings_decode_key>
		if (err) {
    95a0:	4605      	mov	r5, r0
    95a2:	b150      	cbz	r0, 95ba <ccc_set_direct+0x76>
			BT_ERR("Unable to decode address %s", log_strdup(name));
    95a4:	4622      	mov	r2, r4
    95a6:	2145      	movs	r1, #69	; 0x45
    95a8:	4818      	ldr	r0, [pc, #96]	; (960c <ccc_set_direct+0xc8>)
    95aa:	f007 fc17 	bl	10ddc <printk>
    95ae:	e7e9      	b.n	9584 <ccc_set_direct+0x40>
			load.addr_with_id.id = strtol(next, NULL, 10);
    95b0:	220a      	movs	r2, #10
    95b2:	2100      	movs	r1, #0
    95b4:	f008 fd0e 	bl	11fd4 <strtol>
    95b8:	e7ea      	b.n	9590 <ccc_set_direct+0x4c>
		load.addr_with_id.addr = &addr;
    95ba:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
    95be:	f1b8 0f00 	cmp.w	r8, #0
    95c2:	d019      	beq.n	95f8 <ccc_set_direct+0xb4>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
    95c4:	f10d 0820 	add.w	r8, sp, #32
    95c8:	22c0      	movs	r2, #192	; 0xc0
    95ca:	4641      	mov	r1, r8
    95cc:	4638      	mov	r0, r7
    95ce:	47b0      	blx	r6
			if (len < 0) {
    95d0:	1e04      	subs	r4, r0, #0
    95d2:	da05      	bge.n	95e0 <ccc_set_direct+0x9c>
				BT_ERR("Failed to decode value (err %zd)", len);
    95d4:	4622      	mov	r2, r4
    95d6:	2145      	movs	r1, #69	; 0x45
    95d8:	480d      	ldr	r0, [pc, #52]	; (9610 <ccc_set_direct+0xcc>)
    95da:	f007 fbff 	bl	10ddc <printk>
				return len;
    95de:	e7d3      	b.n	9588 <ccc_set_direct+0x44>
			load.count = len / sizeof(*ccc_store);
    95e0:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
    95e2:	f8cd 8018 	str.w	r8, [sp, #24]
			load.count = len / sizeof(*ccc_store);
    95e6:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
    95e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    95ec:	2001      	movs	r0, #1
    95ee:	4a09      	ldr	r2, [pc, #36]	; (9614 <ccc_set_direct+0xd0>)
    95f0:	ab04      	add	r3, sp, #16
    95f2:	f00a f8a1 	bl	13738 <bt_gatt_foreach_attr>
	return 0;
    95f6:	e7b7      	b.n	9568 <ccc_set_direct+0x24>
			load.count = 0;
    95f8:	e9cd 0006 	strd	r0, r0, [sp, #24]
    95fc:	e7f4      	b.n	95e8 <ccc_set_direct+0xa4>
    95fe:	bf00      	nop
    9600:	00018c03 	.word	0x00018c03
    9604:	00018c0a 	.word	0x00018c0a
    9608:	0001733a 	.word	0x0001733a
    960c:	00018aea 	.word	0x00018aea
    9610:	00018955 	.word	0x00018955
    9614:	00008a39 	.word	0x00008a39

00009618 <bt_gatt_attr_next>:
	struct bt_gatt_attr *next = NULL;
    9618:	2300      	movs	r3, #0
{
    961a:	b507      	push	{r0, r1, r2, lr}
	u16_t handle = attr->handle ? : find_static_attr(attr);
    961c:	8a01      	ldrh	r1, [r0, #16]
	struct bt_gatt_attr *next = NULL;
    961e:	9301      	str	r3, [sp, #4]
	u16_t handle = attr->handle ? : find_static_attr(attr);
    9620:	b911      	cbnz	r1, 9628 <bt_gatt_attr_next+0x10>
    9622:	f7ff f915 	bl	8850 <find_static_attr>
    9626:	4601      	mov	r1, r0
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
    9628:	3101      	adds	r1, #1
    962a:	b289      	uxth	r1, r1
    962c:	4608      	mov	r0, r1
    962e:	4a04      	ldr	r2, [pc, #16]	; (9640 <bt_gatt_attr_next+0x28>)
    9630:	ab01      	add	r3, sp, #4
    9632:	f00a f881 	bl	13738 <bt_gatt_foreach_attr>
}
    9636:	9801      	ldr	r0, [sp, #4]
    9638:	b003      	add	sp, #12
    963a:	f85d fb04 	ldr.w	pc, [sp], #4
    963e:	bf00      	nop
    9640:	000132b7 	.word	0x000132b7

00009644 <bt_gatt_notify_cb>:
{
    9644:	b5f0      	push	{r4, r5, r6, r7, lr}
    9646:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
    9648:	460e      	mov	r6, r1
{
    964a:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
    964c:	b971      	cbnz	r1, 966c <bt_gatt_notify_cb+0x28>
    964e:	4947      	ldr	r1, [pc, #284]	; (976c <bt_gatt_notify_cb+0x128>)
    9650:	f240 7329 	movw	r3, #1833	; 0x729
    9654:	4a46      	ldr	r2, [pc, #280]	; (9770 <bt_gatt_notify_cb+0x12c>)
    9656:	4847      	ldr	r0, [pc, #284]	; (9774 <bt_gatt_notify_cb+0x130>)
    9658:	f007 fbc0 	bl	10ddc <printk>
    965c:	4846      	ldr	r0, [pc, #280]	; (9778 <bt_gatt_notify_cb+0x134>)
    965e:	f007 fbbd 	bl	10ddc <printk>
    9662:	f240 7129 	movw	r1, #1833	; 0x729
    9666:	4842      	ldr	r0, [pc, #264]	; (9770 <bt_gatt_notify_cb+0x12c>)
    9668:	f007 fe4e 	bl	11308 <assert_post_action>
	__ASSERT(params->attr, "invalid parameters\n");
    966c:	6873      	ldr	r3, [r6, #4]
    966e:	b973      	cbnz	r3, 968e <bt_gatt_notify_cb+0x4a>
    9670:	4942      	ldr	r1, [pc, #264]	; (977c <bt_gatt_notify_cb+0x138>)
    9672:	f240 732a 	movw	r3, #1834	; 0x72a
    9676:	4a3e      	ldr	r2, [pc, #248]	; (9770 <bt_gatt_notify_cb+0x12c>)
    9678:	483e      	ldr	r0, [pc, #248]	; (9774 <bt_gatt_notify_cb+0x130>)
    967a:	f007 fbaf 	bl	10ddc <printk>
    967e:	483e      	ldr	r0, [pc, #248]	; (9778 <bt_gatt_notify_cb+0x134>)
    9680:	f007 fbac 	bl	10ddc <printk>
    9684:	f240 712a 	movw	r1, #1834	; 0x72a
    9688:	4839      	ldr	r0, [pc, #228]	; (9770 <bt_gatt_notify_cb+0x12c>)
    968a:	f007 fe3d 	bl	11308 <assert_post_action>
    968e:	4b3c      	ldr	r3, [pc, #240]	; (9780 <bt_gatt_notify_cb+0x13c>)
    9690:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    9694:	079a      	lsls	r2, r3, #30
    9696:	d562      	bpl.n	975e <bt_gatt_notify_cb+0x11a>
	attr = params->attr;
    9698:	6870      	ldr	r0, [r6, #4]
    969a:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    969c:	b115      	cbz	r5, 96a4 <bt_gatt_notify_cb+0x60>
    969e:	7b6b      	ldrb	r3, [r5, #13]
    96a0:	2b07      	cmp	r3, #7
    96a2:	d15f      	bne.n	9764 <bt_gatt_notify_cb+0x120>
	handle = attr->handle ? : find_static_attr(attr);
    96a4:	8a04      	ldrh	r4, [r0, #16]
    96a6:	b93c      	cbnz	r4, 96b8 <bt_gatt_notify_cb+0x74>
    96a8:	f7ff f8d2 	bl	8850 <find_static_attr>
	if (!handle) {
    96ac:	4604      	mov	r4, r0
    96ae:	b918      	cbnz	r0, 96b8 <bt_gatt_notify_cb+0x74>
		return -ENOENT;
    96b0:	f06f 0001 	mvn.w	r0, #1
}
    96b4:	b00b      	add	sp, #44	; 0x2c
    96b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (params->uuid) {
    96b8:	6832      	ldr	r2, [r6, #0]
    96ba:	b1b2      	cbz	r2, 96ea <bt_gatt_notify_cb+0xa6>
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    96bc:	a905      	add	r1, sp, #20
    96be:	9102      	str	r1, [sp, #8]
    96c0:	4930      	ldr	r1, [pc, #192]	; (9784 <bt_gatt_notify_cb+0x140>)
		attr = NULL;
    96c2:	2300      	movs	r3, #0
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    96c4:	9101      	str	r1, [sp, #4]
    96c6:	2101      	movs	r1, #1
    96c8:	4620      	mov	r0, r4
    96ca:	9100      	str	r1, [sp, #0]
    96cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
		attr = NULL;
    96d0:	9305      	str	r3, [sp, #20]
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    96d2:	f7ff fe29 	bl	9328 <bt_gatt_foreach_attr_type>
		if (!attr) {
    96d6:	9805      	ldr	r0, [sp, #20]
    96d8:	2800      	cmp	r0, #0
    96da:	d0e9      	beq.n	96b0 <bt_gatt_notify_cb+0x6c>
		handle = attr->handle ? : find_static_attr(attr);
    96dc:	8a04      	ldrh	r4, [r0, #16]
    96de:	b924      	cbnz	r4, 96ea <bt_gatt_notify_cb+0xa6>
    96e0:	f7ff f8b6 	bl	8850 <find_static_attr>
		if (!handle) {
    96e4:	4604      	mov	r4, r0
    96e6:	2800      	cmp	r0, #0
    96e8:	d0e2      	beq.n	96b0 <bt_gatt_notify_cb+0x6c>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    96ea:	9b05      	ldr	r3, [sp, #20]
    96ec:	af07      	add	r7, sp, #28
    96ee:	6818      	ldr	r0, [r3, #0]
    96f0:	2300      	movs	r3, #0
    96f2:	f88d 301c 	strb.w	r3, [sp, #28]
    96f6:	f642 0303 	movw	r3, #10243	; 0x2803
    96fa:	4639      	mov	r1, r7
    96fc:	f8ad 301e 	strh.w	r3, [sp, #30]
    9700:	f008 fdc8 	bl	12294 <bt_uuid_cmp>
    9704:	b950      	cbnz	r0, 971c <bt_gatt_notify_cb+0xd8>
		struct bt_gatt_chrc *chrc = attr->user_data;
    9706:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
    9708:	68c3      	ldr	r3, [r0, #12]
    970a:	799b      	ldrb	r3, [r3, #6]
    970c:	06db      	lsls	r3, r3, #27
    970e:	d402      	bmi.n	9716 <bt_gatt_notify_cb+0xd2>
			return -EINVAL;
    9710:	f06f 0015 	mvn.w	r0, #21
    9714:	e7ce      	b.n	96b4 <bt_gatt_notify_cb+0x70>
		handle = bt_gatt_attr_value_handle(attr);
    9716:	f7ff fdef 	bl	92f8 <bt_gatt_attr_value_handle>
    971a:	4604      	mov	r4, r0
	if (conn) {
    971c:	b12d      	cbz	r5, 972a <bt_gatt_notify_cb+0xe6>
		return gatt_notify(conn, handle, params);
    971e:	4632      	mov	r2, r6
    9720:	4621      	mov	r1, r4
    9722:	4628      	mov	r0, r5
    9724:	f7ff f8d4 	bl	88d0 <gatt_notify>
    9728:	e7c4      	b.n	96b4 <bt_gatt_notify_cb+0x70>
	data.err = -ENOTCONN;
    972a:	f06f 0338 	mvn.w	r3, #56	; 0x38
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    972e:	f642 1202 	movw	r2, #10498	; 0x2902
	data.err = -ENOTCONN;
    9732:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
    9734:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    9736:	f8ad 201a 	strh.w	r2, [sp, #26]
    973a:	4a13      	ldr	r2, [pc, #76]	; (9788 <bt_gatt_notify_cb+0x144>)
    973c:	4620      	mov	r0, r4
    973e:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
    9742:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    9746:	f64f 71ff 	movw	r1, #65535	; 0xffff
    974a:	462b      	mov	r3, r5
    974c:	9702      	str	r7, [sp, #8]
    974e:	aa06      	add	r2, sp, #24
	data.nfy_params = params;
    9750:	9609      	str	r6, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    9752:	f88d 5018 	strb.w	r5, [sp, #24]
    9756:	f7ff fde7 	bl	9328 <bt_gatt_foreach_attr_type>
	return data.err;
    975a:	9807      	ldr	r0, [sp, #28]
    975c:	e7aa      	b.n	96b4 <bt_gatt_notify_cb+0x70>
		return -EAGAIN;
    975e:	f06f 000a 	mvn.w	r0, #10
    9762:	e7a7      	b.n	96b4 <bt_gatt_notify_cb+0x70>
		return -ENOTCONN;
    9764:	f06f 0038 	mvn.w	r0, #56	; 0x38
    9768:	e7a4      	b.n	96b4 <bt_gatt_notify_cb+0x70>
    976a:	bf00      	nop
    976c:	00018c1b 	.word	0x00018c1b
    9770:	000189cf 	.word	0x000189cf
    9774:	00016493 	.word	0x00016493
    9778:	00018c22 	.word	0x00018c22
    977c:	00018c38 	.word	0x00018c38
    9780:	20000098 	.word	0x20000098
    9784:	00013413 	.word	0x00013413
    9788:	00008d1d 	.word	0x00008d1d

0000978c <bt_gatt_indicate>:
{
    978c:	b5f0      	push	{r4, r5, r6, r7, lr}
    978e:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
    9790:	460e      	mov	r6, r1
{
    9792:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
    9794:	b971      	cbnz	r1, 97b4 <bt_gatt_indicate+0x28>
    9796:	4947      	ldr	r1, [pc, #284]	; (98b4 <bt_gatt_indicate+0x128>)
    9798:	f240 736b 	movw	r3, #1899	; 0x76b
    979c:	4a46      	ldr	r2, [pc, #280]	; (98b8 <bt_gatt_indicate+0x12c>)
    979e:	4847      	ldr	r0, [pc, #284]	; (98bc <bt_gatt_indicate+0x130>)
    97a0:	f007 fb1c 	bl	10ddc <printk>
    97a4:	4846      	ldr	r0, [pc, #280]	; (98c0 <bt_gatt_indicate+0x134>)
    97a6:	f007 fb19 	bl	10ddc <printk>
    97aa:	f240 716b 	movw	r1, #1899	; 0x76b
    97ae:	4842      	ldr	r0, [pc, #264]	; (98b8 <bt_gatt_indicate+0x12c>)
    97b0:	f007 fdaa 	bl	11308 <assert_post_action>
	__ASSERT(params->attr, "invalid parameters\n");
    97b4:	6873      	ldr	r3, [r6, #4]
    97b6:	b973      	cbnz	r3, 97d6 <bt_gatt_indicate+0x4a>
    97b8:	4942      	ldr	r1, [pc, #264]	; (98c4 <bt_gatt_indicate+0x138>)
    97ba:	f240 736c 	movw	r3, #1900	; 0x76c
    97be:	4a3e      	ldr	r2, [pc, #248]	; (98b8 <bt_gatt_indicate+0x12c>)
    97c0:	483e      	ldr	r0, [pc, #248]	; (98bc <bt_gatt_indicate+0x130>)
    97c2:	f007 fb0b 	bl	10ddc <printk>
    97c6:	483e      	ldr	r0, [pc, #248]	; (98c0 <bt_gatt_indicate+0x134>)
    97c8:	f007 fb08 	bl	10ddc <printk>
    97cc:	f240 716c 	movw	r1, #1900	; 0x76c
    97d0:	4839      	ldr	r0, [pc, #228]	; (98b8 <bt_gatt_indicate+0x12c>)
    97d2:	f007 fd99 	bl	11308 <assert_post_action>
    97d6:	4b3c      	ldr	r3, [pc, #240]	; (98c8 <bt_gatt_indicate+0x13c>)
    97d8:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    97dc:	079a      	lsls	r2, r3, #30
    97de:	d563      	bpl.n	98a8 <bt_gatt_indicate+0x11c>
	attr = params->attr;
    97e0:	6870      	ldr	r0, [r6, #4]
    97e2:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    97e4:	b115      	cbz	r5, 97ec <bt_gatt_indicate+0x60>
    97e6:	7b6b      	ldrb	r3, [r5, #13]
    97e8:	2b07      	cmp	r3, #7
    97ea:	d160      	bne.n	98ae <bt_gatt_indicate+0x122>
	handle = attr->handle ? : find_static_attr(attr);
    97ec:	8a04      	ldrh	r4, [r0, #16]
    97ee:	b93c      	cbnz	r4, 9800 <bt_gatt_indicate+0x74>
    97f0:	f7ff f82e 	bl	8850 <find_static_attr>
	if (!handle) {
    97f4:	4604      	mov	r4, r0
    97f6:	b918      	cbnz	r0, 9800 <bt_gatt_indicate+0x74>
		return -ENOENT;
    97f8:	f06f 0001 	mvn.w	r0, #1
}
    97fc:	b00b      	add	sp, #44	; 0x2c
    97fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (params->uuid) {
    9800:	6832      	ldr	r2, [r6, #0]
    9802:	b1b2      	cbz	r2, 9832 <bt_gatt_indicate+0xa6>
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    9804:	a905      	add	r1, sp, #20
    9806:	9102      	str	r1, [sp, #8]
    9808:	4930      	ldr	r1, [pc, #192]	; (98cc <bt_gatt_indicate+0x140>)
		attr = NULL;
    980a:	2300      	movs	r3, #0
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    980c:	9101      	str	r1, [sp, #4]
    980e:	2101      	movs	r1, #1
    9810:	4620      	mov	r0, r4
    9812:	9100      	str	r1, [sp, #0]
    9814:	f64f 71ff 	movw	r1, #65535	; 0xffff
		attr = NULL;
    9818:	9305      	str	r3, [sp, #20]
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    981a:	f7ff fd85 	bl	9328 <bt_gatt_foreach_attr_type>
		if (!attr) {
    981e:	9805      	ldr	r0, [sp, #20]
    9820:	2800      	cmp	r0, #0
    9822:	d0e9      	beq.n	97f8 <bt_gatt_indicate+0x6c>
		handle = attr->handle ? : find_static_attr(attr);
    9824:	8a04      	ldrh	r4, [r0, #16]
    9826:	b924      	cbnz	r4, 9832 <bt_gatt_indicate+0xa6>
    9828:	f7ff f812 	bl	8850 <find_static_attr>
		if (!handle) {
    982c:	4604      	mov	r4, r0
    982e:	2800      	cmp	r0, #0
    9830:	d0e2      	beq.n	97f8 <bt_gatt_indicate+0x6c>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    9832:	9b05      	ldr	r3, [sp, #20]
    9834:	af07      	add	r7, sp, #28
    9836:	6818      	ldr	r0, [r3, #0]
    9838:	2300      	movs	r3, #0
    983a:	f88d 301c 	strb.w	r3, [sp, #28]
    983e:	f642 0303 	movw	r3, #10243	; 0x2803
    9842:	4639      	mov	r1, r7
    9844:	f8ad 301e 	strh.w	r3, [sp, #30]
    9848:	f008 fd24 	bl	12294 <bt_uuid_cmp>
    984c:	b950      	cbnz	r0, 9864 <bt_gatt_indicate+0xd8>
		struct bt_gatt_chrc *chrc = attr->user_data;
    984e:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    9850:	68c3      	ldr	r3, [r0, #12]
    9852:	799b      	ldrb	r3, [r3, #6]
    9854:	069b      	lsls	r3, r3, #26
    9856:	d402      	bmi.n	985e <bt_gatt_indicate+0xd2>
			return -EINVAL;
    9858:	f06f 0015 	mvn.w	r0, #21
    985c:	e7ce      	b.n	97fc <bt_gatt_indicate+0x70>
		handle = bt_gatt_attr_value_handle(attr);
    985e:	f7ff fd4b 	bl	92f8 <bt_gatt_attr_value_handle>
    9862:	4604      	mov	r4, r0
	if (conn) {
    9864:	b12d      	cbz	r5, 9872 <bt_gatt_indicate+0xe6>
		return gatt_indicate(conn, handle, params);
    9866:	4632      	mov	r2, r6
    9868:	4621      	mov	r1, r4
    986a:	4628      	mov	r0, r5
    986c:	f7ff f892 	bl	8994 <gatt_indicate>
    9870:	e7c4      	b.n	97fc <bt_gatt_indicate+0x70>
	data.err = -ENOTCONN;
    9872:	f06f 0338 	mvn.w	r3, #56	; 0x38
    9876:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    9878:	2302      	movs	r3, #2
    987a:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    987e:	f642 1302 	movw	r3, #10498	; 0x2902
    9882:	f8ad 301a 	strh.w	r3, [sp, #26]
    9886:	4b12      	ldr	r3, [pc, #72]	; (98d0 <bt_gatt_indicate+0x144>)
    9888:	4620      	mov	r0, r4
    988a:	9301      	str	r3, [sp, #4]
    988c:	2301      	movs	r3, #1
    988e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9892:	9300      	str	r3, [sp, #0]
    9894:	9702      	str	r7, [sp, #8]
    9896:	462b      	mov	r3, r5
    9898:	aa06      	add	r2, sp, #24
	data.ind_params = params;
    989a:	9609      	str	r6, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    989c:	f88d 5018 	strb.w	r5, [sp, #24]
    98a0:	f7ff fd42 	bl	9328 <bt_gatt_foreach_attr_type>
	return data.err;
    98a4:	9807      	ldr	r0, [sp, #28]
    98a6:	e7a9      	b.n	97fc <bt_gatt_indicate+0x70>
		return -EAGAIN;
    98a8:	f06f 000a 	mvn.w	r0, #10
    98ac:	e7a6      	b.n	97fc <bt_gatt_indicate+0x70>
		return -ENOTCONN;
    98ae:	f06f 0038 	mvn.w	r0, #56	; 0x38
    98b2:	e7a3      	b.n	97fc <bt_gatt_indicate+0x70>
    98b4:	00018c1b 	.word	0x00018c1b
    98b8:	000189cf 	.word	0x000189cf
    98bc:	00016493 	.word	0x00016493
    98c0:	00018c22 	.word	0x00018c22
    98c4:	00018c38 	.word	0x00018c38
    98c8:	20000098 	.word	0x20000098
    98cc:	00013413 	.word	0x00013413
    98d0:	00008d1d 	.word	0x00008d1d

000098d4 <sc_process>:
{
    98d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    98d6:	4604      	mov	r4, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
    98d8:	f100 0520 	add.w	r5, r0, #32
    98dc:	e8d5 3faf 	lda	r3, [r5]
    98e0:	079b      	lsls	r3, r3, #30
    98e2:	d50e      	bpl.n	9902 <sc_process+0x2e>
    98e4:	4919      	ldr	r1, [pc, #100]	; (994c <sc_process+0x78>)
    98e6:	f44f 7360 	mov.w	r3, #896	; 0x380
    98ea:	4a19      	ldr	r2, [pc, #100]	; (9950 <sc_process+0x7c>)
    98ec:	4819      	ldr	r0, [pc, #100]	; (9954 <sc_process+0x80>)
    98ee:	f007 fa75 	bl	10ddc <printk>
    98f2:	4819      	ldr	r0, [pc, #100]	; (9958 <sc_process+0x84>)
    98f4:	f007 fa72 	bl	10ddc <printk>
    98f8:	f44f 7160 	mov.w	r1, #896	; 0x380
    98fc:	4814      	ldr	r0, [pc, #80]	; (9950 <sc_process+0x7c>)
    98fe:	f007 fd03 	bl	11308 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
    9902:	f854 3c04 	ldr.w	r3, [r4, #-4]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9906:	f06f 0101 	mvn.w	r1, #1
    990a:	4628      	mov	r0, r5
    990c:	9301      	str	r3, [sp, #4]
    990e:	f009 fd50 	bl	133b2 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
    9912:	4b12      	ldr	r3, [pc, #72]	; (995c <sc_process+0x88>)
	sc->start = 0U;
    9914:	2000      	movs	r0, #0
	sc->params.attr = &_1_gatt_svc.attrs[2];
    9916:	f844 3c14 	str.w	r3, [r4, #-20]
	sc->params.func = sc_indicate_rsp;
    991a:	4b11      	ldr	r3, [pc, #68]	; (9960 <sc_process+0x8c>)
	sc->start = 0U;
    991c:	f824 0c04 	strh.w	r0, [r4, #-4]
	sc->params.func = sc_indicate_rsp;
    9920:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.data = &sc_range[0];
    9924:	ab01      	add	r3, sp, #4
    9926:	f844 3c0c 	str.w	r3, [r4, #-12]
	sc->params.len = sizeof(sc_range);
    992a:	2304      	movs	r3, #4
	sc->end = 0U;
    992c:	f824 0c02 	strh.w	r0, [r4, #-2]
	sc->params.len = sizeof(sc_range);
    9930:	f824 3c08 	strh.w	r3, [r4, #-8]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    9934:	f1a4 0118 	sub.w	r1, r4, #24
    9938:	f7ff ff28 	bl	978c <bt_gatt_indicate>
    993c:	b918      	cbnz	r0, 9946 <sc_process+0x72>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
    993e:	2101      	movs	r1, #1
    9940:	4628      	mov	r0, r5
    9942:	f009 fd92 	bl	1346a <atomic_set_bit>
}
    9946:	b003      	add	sp, #12
    9948:	bd30      	pop	{r4, r5, pc}
    994a:	bf00      	nop
    994c:	00018c45 	.word	0x00018c45
    9950:	000189cf 	.word	0x000189cf
    9954:	00016493 	.word	0x00016493
    9958:	00018c76 	.word	0x00018c76
    995c:	00015c10 	.word	0x00015c10
    9960:	00008fb9 	.word	0x00008fb9

00009964 <update_ccc>:
	if (attr->write != bt_gatt_attr_write_ccc) {
    9964:	6882      	ldr	r2, [r0, #8]
    9966:	4b39      	ldr	r3, [pc, #228]	; (9a4c <update_ccc+0xe8>)
{
    9968:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    996c:	429a      	cmp	r2, r3
{
    996e:	4604      	mov	r4, r0
    9970:	460e      	mov	r6, r1
	struct bt_conn *conn = data->conn;
    9972:	680d      	ldr	r5, [r1, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
    9974:	d116      	bne.n	99a4 <update_ccc+0x40>
	ccc = attr->user_data;
    9976:	68c7      	ldr	r7, [r0, #12]
		if (!cfg->value ||
    9978:	893b      	ldrh	r3, [r7, #8]
    997a:	b19b      	cbz	r3, 99a4 <update_ccc+0x40>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    997c:	463a      	mov	r2, r7
    997e:	4628      	mov	r0, r5
    9980:	f812 1b01 	ldrb.w	r1, [r2], #1
    9984:	f008 ff15 	bl	127b2 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    9988:	b160      	cbz	r0, 99a4 <update_ccc+0x40>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    998a:	222a      	movs	r2, #42	; 0x2a
    998c:	4621      	mov	r1, r4
    998e:	4628      	mov	r0, r5
    9990:	f009 fee0 	bl	13754 <bt_gatt_check_perm>
		if (err) {
    9994:	b1d8      	cbz	r0, 99ce <update_ccc+0x6a>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    9996:	2803      	cmp	r0, #3
    9998:	d108      	bne.n	99ac <update_ccc+0x48>
				BT_WARN("CCC %p not writable", attr);
    999a:	4622      	mov	r2, r4
    999c:	2157      	movs	r1, #87	; 0x57
    999e:	482c      	ldr	r0, [pc, #176]	; (9a50 <update_ccc+0xec>)
    99a0:	f007 fa1c 	bl	10ddc <printk>
}
    99a4:	2001      	movs	r0, #1
    99a6:	b002      	add	sp, #8
    99a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				sec = BT_SECURITY_L3;
    99ac:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
    99ae:	4628      	mov	r0, r5
				sec = BT_SECURITY_L3;
    99b0:	bf14      	ite	ne
    99b2:	f04f 0802 	movne.w	r8, #2
    99b6:	f04f 0803 	moveq.w	r8, #3
			    bt_conn_get_security(conn) < sec) {
    99ba:	f008 fef8 	bl	127ae <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
    99be:	4580      	cmp	r8, r0
    99c0:	d905      	bls.n	99ce <update_ccc+0x6a>
				if (data->sec < sec) {
    99c2:	7933      	ldrb	r3, [r6, #4]
    99c4:	4543      	cmp	r3, r8
    99c6:	d2ed      	bcs.n	99a4 <update_ccc+0x40>
					data->sec = sec;
    99c8:	f886 8004 	strb.w	r8, [r6, #4]
    99cc:	e7ea      	b.n	99a4 <update_ccc+0x40>
		gatt_ccc_changed(attr, ccc);
    99ce:	4639      	mov	r1, r7
    99d0:	4620      	mov	r0, r4
    99d2:	f009 fc73 	bl	132bc <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    99d6:	4b1f      	ldr	r3, [pc, #124]	; (9a54 <update_ccc+0xf0>)
    99d8:	429f      	cmp	r7, r3
    99da:	d1e3      	bne.n	99a4 <update_ccc+0x40>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    99dc:	7a28      	ldrb	r0, [r5, #8]
    99de:	f105 017c 	add.w	r1, r5, #124	; 0x7c
    99e2:	f7ff f93f 	bl	8c64 <find_sc_cfg>
	if (!cfg) {
    99e6:	4604      	mov	r4, r0
    99e8:	2800      	cmp	r0, #0
    99ea:	d0db      	beq.n	99a4 <update_ccc+0x40>
	if (!(cfg->data.start || cfg->data.end)) {
    99ec:	8902      	ldrh	r2, [r0, #8]
    99ee:	8943      	ldrh	r3, [r0, #10]
    99f0:	ea52 0103 	orrs.w	r1, r2, r3
    99f4:	d0d6      	beq.n	99a4 <update_ccc+0x40>
	index = bt_conn_index(conn);
    99f6:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    99f8:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    99fc:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
    9a00:	f7fc ffe0 	bl	69c4 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    9a04:	2314      	movs	r3, #20
    9a06:	4914      	ldr	r1, [pc, #80]	; (9a58 <update_ccc+0xf4>)
    9a08:	4a14      	ldr	r2, [pc, #80]	; (9a5c <update_ccc+0xf8>)
    9a0a:	fb03 1300 	mla	r3, r3, r0, r1
    9a0e:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    9a10:	4a13      	ldr	r2, [pc, #76]	; (9a60 <update_ccc+0xfc>)
    9a12:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    9a14:	aa01      	add	r2, sp, #4
    9a16:	60da      	str	r2, [r3, #12]
	sc_restore_params[index].len = sizeof(sc_range);
    9a18:	2204      	movs	r2, #4
    9a1a:	821a      	strh	r2, [r3, #16]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    9a1c:	b203      	sxth	r3, r0
    9a1e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    9a22:	4628      	mov	r0, r5
    9a24:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    9a28:	f7ff feb0 	bl	978c <bt_gatt_indicate>
    9a2c:	b118      	cbz	r0, 9a36 <update_ccc+0xd2>
		BT_ERR("SC restore indication failed");
    9a2e:	2145      	movs	r1, #69	; 0x45
    9a30:	480c      	ldr	r0, [pc, #48]	; (9a64 <update_ccc+0x100>)
    9a32:	f007 f9d3 	bl	10ddc <printk>
	memset(&cfg->data, 0, sizeof(cfg->data));
    9a36:	2204      	movs	r2, #4
    9a38:	2100      	movs	r1, #0
    9a3a:	f104 0008 	add.w	r0, r4, #8
    9a3e:	f008 fbb9 	bl	121b4 <memset>
		sc_store(cfg);
    9a42:	4620      	mov	r0, r4
    9a44:	f7fe fedc 	bl	8800 <sc_store>
    9a48:	e7ac      	b.n	99a4 <update_ccc+0x40>
    9a4a:	bf00      	nop
    9a4c:	00008ac9 	.word	0x00008ac9
    9a50:	00018c91 	.word	0x00018c91
    9a54:	20000278 	.word	0x20000278
    9a58:	20000fd8 	.word	0x20000fd8
    9a5c:	00015c10 	.word	0x00015c10
    9a60:	0001347f 	.word	0x0001347f
    9a64:	00018caa 	.word	0x00018caa

00009a68 <bt_gatt_is_subscribed>:
{
    9a68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9a6a:	460c      	mov	r4, r1
    9a6c:	4617      	mov	r7, r2
	__ASSERT(conn, "invalid parameter\n");
    9a6e:	4606      	mov	r6, r0
    9a70:	b970      	cbnz	r0, 9a90 <bt_gatt_is_subscribed+0x28>
    9a72:	4933      	ldr	r1, [pc, #204]	; (9b40 <bt_gatt_is_subscribed+0xd8>)
    9a74:	f640 0398 	movw	r3, #2200	; 0x898
    9a78:	4a32      	ldr	r2, [pc, #200]	; (9b44 <bt_gatt_is_subscribed+0xdc>)
    9a7a:	4833      	ldr	r0, [pc, #204]	; (9b48 <bt_gatt_is_subscribed+0xe0>)
    9a7c:	f007 f9ae 	bl	10ddc <printk>
    9a80:	4832      	ldr	r0, [pc, #200]	; (9b4c <bt_gatt_is_subscribed+0xe4>)
    9a82:	f007 f9ab 	bl	10ddc <printk>
    9a86:	f640 0198 	movw	r1, #2200	; 0x898
    9a8a:	482e      	ldr	r0, [pc, #184]	; (9b44 <bt_gatt_is_subscribed+0xdc>)
    9a8c:	f007 fc3c 	bl	11308 <assert_post_action>
	__ASSERT(attr, "invalid parameter\n");
    9a90:	b974      	cbnz	r4, 9ab0 <bt_gatt_is_subscribed+0x48>
    9a92:	492f      	ldr	r1, [pc, #188]	; (9b50 <bt_gatt_is_subscribed+0xe8>)
    9a94:	f640 0399 	movw	r3, #2201	; 0x899
    9a98:	4a2a      	ldr	r2, [pc, #168]	; (9b44 <bt_gatt_is_subscribed+0xdc>)
    9a9a:	482b      	ldr	r0, [pc, #172]	; (9b48 <bt_gatt_is_subscribed+0xe0>)
    9a9c:	f007 f99e 	bl	10ddc <printk>
    9aa0:	482a      	ldr	r0, [pc, #168]	; (9b4c <bt_gatt_is_subscribed+0xe4>)
    9aa2:	f007 f99b 	bl	10ddc <printk>
    9aa6:	f640 0199 	movw	r1, #2201	; 0x899
    9aaa:	4826      	ldr	r0, [pc, #152]	; (9b44 <bt_gatt_is_subscribed+0xdc>)
    9aac:	f007 fc2c 	bl	11308 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
    9ab0:	7b73      	ldrb	r3, [r6, #13]
    9ab2:	2b07      	cmp	r3, #7
    9ab4:	d002      	beq.n	9abc <bt_gatt_is_subscribed+0x54>
		return false;
    9ab6:	2000      	movs	r0, #0
}
    9ab8:	b003      	add	sp, #12
    9aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    9abc:	2300      	movs	r3, #0
    9abe:	f88d 3004 	strb.w	r3, [sp, #4]
    9ac2:	f642 0303 	movw	r3, #10243	; 0x2803
    9ac6:	6820      	ldr	r0, [r4, #0]
    9ac8:	a901      	add	r1, sp, #4
    9aca:	f8ad 3006 	strh.w	r3, [sp, #6]
    9ace:	f008 fbe1 	bl	12294 <bt_uuid_cmp>
    9ad2:	b940      	cbnz	r0, 9ae6 <bt_gatt_is_subscribed+0x7e>
		if (!(chrc->properties &
    9ad4:	68e3      	ldr	r3, [r4, #12]
    9ad6:	799b      	ldrb	r3, [r3, #6]
    9ad8:	f013 0030 	ands.w	r0, r3, #48	; 0x30
    9adc:	d0ec      	beq.n	9ab8 <bt_gatt_is_subscribed+0x50>
		attr = bt_gatt_attr_next(attr);
    9ade:	4620      	mov	r0, r4
    9ae0:	f7ff fd9a 	bl	9618 <bt_gatt_attr_next>
    9ae4:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
    9ae6:	2300      	movs	r3, #0
    9ae8:	6820      	ldr	r0, [r4, #0]
    9aea:	f88d 3004 	strb.w	r3, [sp, #4]
    9aee:	f642 1302 	movw	r3, #10498	; 0x2902
    9af2:	a901      	add	r1, sp, #4
    9af4:	f8ad 3006 	strh.w	r3, [sp, #6]
    9af8:	f008 fbcc 	bl	12294 <bt_uuid_cmp>
    9afc:	b118      	cbz	r0, 9b06 <bt_gatt_is_subscribed+0x9e>
		attr = bt_gatt_attr_next(attr);
    9afe:	4620      	mov	r0, r4
    9b00:	f7ff fd8a 	bl	9618 <bt_gatt_attr_next>
    9b04:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
    9b06:	2500      	movs	r5, #0
    9b08:	f642 1302 	movw	r3, #10498	; 0x2902
    9b0c:	6820      	ldr	r0, [r4, #0]
    9b0e:	a901      	add	r1, sp, #4
    9b10:	f88d 5004 	strb.w	r5, [sp, #4]
    9b14:	f8ad 3006 	strh.w	r3, [sp, #6]
    9b18:	f008 fbbc 	bl	12294 <bt_uuid_cmp>
    9b1c:	2800      	cmp	r0, #0
    9b1e:	d1ca      	bne.n	9ab6 <bt_gatt_is_subscribed+0x4e>
	ccc = attr->user_data;
    9b20:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
    9b22:	4630      	mov	r0, r6
    9b24:	4622      	mov	r2, r4
    9b26:	f812 1b01 	ldrb.w	r1, [r2], #1
    9b2a:	f008 fe42 	bl	127b2 <bt_conn_is_peer_addr_le>
    9b2e:	2800      	cmp	r0, #0
    9b30:	d0c1      	beq.n	9ab6 <bt_gatt_is_subscribed+0x4e>
    9b32:	8923      	ldrh	r3, [r4, #8]
    9b34:	421f      	tst	r7, r3
    9b36:	bf14      	ite	ne
    9b38:	2001      	movne	r0, #1
    9b3a:	2000      	moveq	r0, #0
    9b3c:	e7bc      	b.n	9ab8 <bt_gatt_is_subscribed+0x50>
    9b3e:	bf00      	nop
    9b40:	00018271 	.word	0x00018271
    9b44:	000189cf 	.word	0x000189cf
    9b48:	00016493 	.word	0x00016493
    9b4c:	00018ccc 	.word	0x00018ccc
    9b50:	00018c40 	.word	0x00018c40

00009b54 <bt_gatt_unsubscribe>:
{
    9b54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9b58:	460e      	mov	r6, r1
	__ASSERT(conn, "invalid parameters\n");
    9b5a:	4680      	mov	r8, r0
    9b5c:	b970      	cbnz	r0, 9b7c <bt_gatt_unsubscribe+0x28>
    9b5e:	494b      	ldr	r1, [pc, #300]	; (9c8c <bt_gatt_unsubscribe+0x138>)
    9b60:	f640 6347 	movw	r3, #3655	; 0xe47
    9b64:	4a4a      	ldr	r2, [pc, #296]	; (9c90 <bt_gatt_unsubscribe+0x13c>)
    9b66:	484b      	ldr	r0, [pc, #300]	; (9c94 <bt_gatt_unsubscribe+0x140>)
    9b68:	f007 f938 	bl	10ddc <printk>
    9b6c:	484a      	ldr	r0, [pc, #296]	; (9c98 <bt_gatt_unsubscribe+0x144>)
    9b6e:	f007 f935 	bl	10ddc <printk>
    9b72:	f640 6147 	movw	r1, #3655	; 0xe47
    9b76:	4846      	ldr	r0, [pc, #280]	; (9c90 <bt_gatt_unsubscribe+0x13c>)
    9b78:	f007 fbc6 	bl	11308 <assert_post_action>
	__ASSERT(params, "invalid parameters\n");
    9b7c:	b976      	cbnz	r6, 9b9c <bt_gatt_unsubscribe+0x48>
    9b7e:	4947      	ldr	r1, [pc, #284]	; (9c9c <bt_gatt_unsubscribe+0x148>)
    9b80:	f640 6348 	movw	r3, #3656	; 0xe48
    9b84:	4a42      	ldr	r2, [pc, #264]	; (9c90 <bt_gatt_unsubscribe+0x13c>)
    9b86:	4843      	ldr	r0, [pc, #268]	; (9c94 <bt_gatt_unsubscribe+0x140>)
    9b88:	f007 f928 	bl	10ddc <printk>
    9b8c:	4842      	ldr	r0, [pc, #264]	; (9c98 <bt_gatt_unsubscribe+0x144>)
    9b8e:	f007 f925 	bl	10ddc <printk>
    9b92:	f640 6148 	movw	r1, #3656	; 0xe48
    9b96:	483e      	ldr	r0, [pc, #248]	; (9c90 <bt_gatt_unsubscribe+0x13c>)
    9b98:	f007 fbb6 	bl	11308 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
    9b9c:	f898 300d 	ldrb.w	r3, [r8, #13]
    9ba0:	2b07      	cmp	r3, #7
    9ba2:	d170      	bne.n	9c86 <bt_gatt_unsubscribe+0x132>
	sub = gatt_sub_find(conn);
    9ba4:	2100      	movs	r1, #0
    9ba6:	4640      	mov	r0, r8
    9ba8:	f7ff f800 	bl	8bac <gatt_sub_find_free>
	if (!sub) {
    9bac:	4607      	mov	r7, r0
    9bae:	b920      	cbnz	r0, 9bba <bt_gatt_unsubscribe+0x66>
		return -EINVAL;
    9bb0:	f06f 0015 	mvn.w	r0, #21
}
    9bb4:	b003      	add	sp, #12
    9bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
    9bba:	6884      	ldr	r4, [r0, #8]
    9bbc:	b1d4      	cbz	r4, 9bf4 <bt_gatt_unsubscribe+0xa0>
    9bbe:	f1b4 0510 	subs.w	r5, r4, #16
    9bc2:	d019      	beq.n	9bf8 <bt_gatt_unsubscribe+0xa4>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    9bc4:	6824      	ldr	r4, [r4, #0]
    9bc6:	b104      	cbz	r4, 9bca <bt_gatt_unsubscribe+0x76>
    9bc8:	3c10      	subs	r4, #16
    9bca:	f04f 0900 	mov.w	r9, #0
    9bce:	46cb      	mov	fp, r9
    9bd0:	46ca      	mov	sl, r9
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9bd2:	f106 020c 	add.w	r2, r6, #12
    9bd6:	b98d      	cbnz	r5, 9bfc <bt_gatt_unsubscribe+0xa8>
	if (!found) {
    9bd8:	f1bb 0f00 	cmp.w	fp, #0
    9bdc:	d0e8      	beq.n	9bb0 <bt_gatt_unsubscribe+0x5c>
	if (has_subscription) {
    9bde:	f1ba 0f00 	cmp.w	sl, #0
    9be2:	d045      	beq.n	9c70 <bt_gatt_unsubscribe+0x11c>
		params->notify(conn, params, NULL, 0);
    9be4:	462b      	mov	r3, r5
    9be6:	462a      	mov	r2, r5
    9be8:	4631      	mov	r1, r6
    9bea:	4640      	mov	r0, r8
    9bec:	6834      	ldr	r4, [r6, #0]
    9bee:	47a0      	blx	r4
		return 0;
    9bf0:	4628      	mov	r0, r5
    9bf2:	e7df      	b.n	9bb4 <bt_gatt_unsubscribe+0x60>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
    9bf4:	4625      	mov	r5, r4
    9bf6:	e7e8      	b.n	9bca <bt_gatt_unsubscribe+0x76>
    9bf8:	462c      	mov	r4, r5
    9bfa:	e7e6      	b.n	9bca <bt_gatt_unsubscribe+0x76>
		if (params == tmp) {
    9bfc:	42b5      	cmp	r5, r6
    9bfe:	f105 0110 	add.w	r1, r5, #16
    9c02:	d128      	bne.n	9c56 <bt_gatt_unsubscribe+0x102>
Z_GENLIST_REMOVE(slist, snode)
    9c04:	692b      	ldr	r3, [r5, #16]
    9c06:	f1b9 0f00 	cmp.w	r9, #0
    9c0a:	d11c      	bne.n	9c46 <bt_gatt_unsubscribe+0xf2>
    9c0c:	68f8      	ldr	r0, [r7, #12]
	list->head = node;
    9c0e:	60bb      	str	r3, [r7, #8]
Z_GENLIST_REMOVE(slist, snode)
    9c10:	4281      	cmp	r1, r0
    9c12:	d100      	bne.n	9c16 <bt_gatt_unsubscribe+0xc2>
	list->tail = node;
    9c14:	60fb      	str	r3, [r7, #12]
	parent->next = child;
    9c16:	2300      	movs	r3, #0
    9c18:	612b      	str	r3, [r5, #16]
    9c1a:	e8d2 1faf 	lda	r1, [r2]
			if (atomic_test_bit(params->flags,
    9c1e:	074b      	lsls	r3, r1, #29
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    9c20:	f3c1 0b80 	ubfx	fp, r1, #2, #1
    9c24:	d51f      	bpl.n	9c66 <bt_gatt_unsubscribe+0x112>
	bt_att_req_cancel(conn, params);
    9c26:	4631      	mov	r1, r6
    9c28:	4640      	mov	r0, r8
    9c2a:	9201      	str	r2, [sp, #4]
    9c2c:	f7fe fd86 	bl	873c <bt_att_req_cancel>
}
    9c30:	9a01      	ldr	r2, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
    9c32:	b1dc      	cbz	r4, 9c6c <bt_gatt_unsubscribe+0x118>
Z_GENLIST_PEEK_NEXT(slist, snode)
    9c34:	f114 0110 	adds.w	r1, r4, #16
    9c38:	d002      	beq.n	9c40 <bt_gatt_unsubscribe+0xec>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    9c3a:	6921      	ldr	r1, [r4, #16]
    9c3c:	b101      	cbz	r1, 9c40 <bt_gatt_unsubscribe+0xec>
    9c3e:	3910      	subs	r1, #16
    9c40:	4625      	mov	r5, r4
    9c42:	460c      	mov	r4, r1
    9c44:	e7c7      	b.n	9bd6 <bt_gatt_unsubscribe+0x82>
	parent->next = child;
    9c46:	f8c9 3000 	str.w	r3, [r9]
Z_GENLIST_REMOVE(slist, snode)
    9c4a:	68f8      	ldr	r0, [r7, #12]
    9c4c:	4281      	cmp	r1, r0
	list->tail = node;
    9c4e:	bf08      	it	eq
    9c50:	f8c7 900c 	streq.w	r9, [r7, #12]
}
    9c54:	e7df      	b.n	9c16 <bt_gatt_unsubscribe+0xc2>
		if (tmp->value_handle == params->value_handle) {
    9c56:	88ad      	ldrh	r5, [r5, #4]
    9c58:	88b0      	ldrh	r0, [r6, #4]
    9c5a:	4689      	mov	r9, r1
    9c5c:	4285      	cmp	r5, r0
    9c5e:	bf08      	it	eq
    9c60:	f04f 0a01 	moveq.w	sl, #1
    9c64:	e7e5      	b.n	9c32 <bt_gatt_unsubscribe+0xde>
			found = true;
    9c66:	f04f 0b01 	mov.w	fp, #1
    9c6a:	e7e2      	b.n	9c32 <bt_gatt_unsubscribe+0xde>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
    9c6c:	4621      	mov	r1, r4
    9c6e:	e7e7      	b.n	9c40 <bt_gatt_unsubscribe+0xec>
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
    9c70:	4633      	mov	r3, r6
    9c72:	4652      	mov	r2, sl
    9c74:	4640      	mov	r0, r8
    9c76:	88f1      	ldrh	r1, [r6, #6]
	params->value = 0x0000;
    9c78:	f8a6 a008 	strh.w	sl, [r6, #8]
}
    9c7c:	b003      	add	sp, #12
    9c7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
    9c82:	f7ff ba13 	b.w	90ac <gatt_write_ccc.constprop.0>
		return -ENOTCONN;
    9c86:	f06f 0038 	mvn.w	r0, #56	; 0x38
    9c8a:	e793      	b.n	9bb4 <bt_gatt_unsubscribe+0x60>
    9c8c:	00018271 	.word	0x00018271
    9c90:	000189cf 	.word	0x000189cf
    9c94:	00016493 	.word	0x00016493
    9c98:	00018c22 	.word	0x00018c22
    9c9c:	00018c1b 	.word	0x00018c1b

00009ca0 <bt_gatt_connected>:
	data.sec = BT_SECURITY_L1;
    9ca0:	2301      	movs	r3, #1
{
    9ca2:	b570      	push	{r4, r5, r6, lr}
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    9ca4:	f100 067c 	add.w	r6, r0, #124	; 0x7c
{
    9ca8:	b08e      	sub	sp, #56	; 0x38
    9caa:	4605      	mov	r5, r0
	data.conn = conn;
    9cac:	9003      	str	r0, [sp, #12]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    9cae:	4631      	mov	r1, r6
    9cb0:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
    9cb2:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    9cb6:	f008 fc9e 	bl	125f6 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
    9cba:	b190      	cbz	r0, 9ce2 <bt_gatt_connected+0x42>
		if (conn->id) {
    9cbc:	7a2a      	ldrb	r2, [r5, #8]
    9cbe:	b362      	cbz	r2, 9d1a <bt_gatt_connected+0x7a>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
    9cc0:	ac02      	add	r4, sp, #8
    9cc2:	2104      	movs	r1, #4
    9cc4:	4620      	mov	r0, r4
    9cc6:	f006 fff3 	bl	10cb0 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
    9cca:	9400      	str	r4, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
    9ccc:	2124      	movs	r1, #36	; 0x24
    9cce:	4a1f      	ldr	r2, [pc, #124]	; (9d4c <bt_gatt_connected+0xac>)
    9cd0:	a805      	add	r0, sp, #20
    9cd2:	4633      	mov	r3, r6
    9cd4:	f7f9 feec 	bl	3ab0 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
    9cd8:	aa05      	add	r2, sp, #20
    9cda:	4610      	mov	r0, r2
    9cdc:	491c      	ldr	r1, [pc, #112]	; (9d50 <bt_gatt_connected+0xb0>)
    9cde:	f7f7 ff73 	bl	1bc8 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    9ce2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9ce6:	2001      	movs	r0, #1
    9ce8:	4a1a      	ldr	r2, [pc, #104]	; (9d54 <bt_gatt_connected+0xb4>)
    9cea:	ab03      	add	r3, sp, #12
    9cec:	f009 fd24 	bl	13738 <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
    9cf0:	4628      	mov	r0, r5
    9cf2:	f008 fd5c 	bl	127ae <bt_conn_get_security>
    9cf6:	f89d 1010 	ldrb.w	r1, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    9cfa:	4288      	cmp	r0, r1
    9cfc:	d202      	bcs.n	9d04 <bt_gatt_connected+0x64>
		bt_conn_set_security(conn, data.sec);
    9cfe:	4628      	mov	r0, r5
    9d00:	f008 fd26 	bl	12750 <bt_conn_set_security>
	sub = gatt_sub_find(conn);
    9d04:	2100      	movs	r1, #0
    9d06:	4628      	mov	r0, r5
    9d08:	f7fe ff50 	bl	8bac <gatt_sub_find_free>
	if (!sub) {
    9d0c:	b118      	cbz	r0, 9d16 <bt_gatt_connected+0x76>
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
    9d0e:	6884      	ldr	r4, [r0, #8]
    9d10:	b10c      	cbz	r4, 9d16 <bt_gatt_connected+0x76>
    9d12:	3c10      	subs	r4, #16
    9d14:	b91c      	cbnz	r4, 9d1e <bt_gatt_connected+0x7e>
}
    9d16:	b00e      	add	sp, #56	; 0x38
    9d18:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
    9d1a:	9200      	str	r2, [sp, #0]
    9d1c:	e7d6      	b.n	9ccc <bt_gatt_connected+0x2c>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
    9d1e:	4631      	mov	r1, r6
    9d20:	7a28      	ldrb	r0, [r5, #8]
    9d22:	f008 fc68 	bl	125f6 <bt_addr_le_is_bonded>
    9d26:	b158      	cbz	r0, 9d40 <bt_gatt_connected+0xa0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9d28:	f104 030c 	add.w	r3, r4, #12
    9d2c:	e8d3 3faf 	lda	r3, [r3]
    9d30:	079b      	lsls	r3, r3, #30
    9d32:	d405      	bmi.n	9d40 <bt_gatt_connected+0xa0>
			gatt_write_ccc(conn, params->ccc_handle, params->value,
    9d34:	4623      	mov	r3, r4
    9d36:	4628      	mov	r0, r5
    9d38:	8922      	ldrh	r2, [r4, #8]
    9d3a:	88e1      	ldrh	r1, [r4, #6]
    9d3c:	f7ff f9b6 	bl	90ac <gatt_write_ccc.constprop.0>
Z_GENLIST_PEEK_NEXT(slist, snode)
    9d40:	f114 0f10 	cmn.w	r4, #16
    9d44:	d0e7      	beq.n	9d16 <bt_gatt_connected+0x76>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    9d46:	6924      	ldr	r4, [r4, #16]
    9d48:	e7e2      	b.n	9d10 <bt_gatt_connected+0x70>
    9d4a:	bf00      	nop
    9d4c:	00018c06 	.word	0x00018c06
    9d50:	00009545 	.word	0x00009545
    9d54:	00009965 	.word	0x00009965

00009d58 <bt_gatt_encrypt_change>:
{
    9d58:	b507      	push	{r0, r1, r2, lr}
	data.conn = conn;
    9d5a:	9000      	str	r0, [sp, #0]
	data.sec = BT_SECURITY_L1;
    9d5c:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    9d5e:	466b      	mov	r3, sp
    9d60:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9d64:	4a03      	ldr	r2, [pc, #12]	; (9d74 <bt_gatt_encrypt_change+0x1c>)
	data.sec = BT_SECURITY_L1;
    9d66:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    9d6a:	f009 fce5 	bl	13738 <bt_gatt_foreach_attr>
}
    9d6e:	b003      	add	sp, #12
    9d70:	f85d fb04 	ldr.w	pc, [sp], #4
    9d74:	00009965 	.word	0x00009965

00009d78 <db_hash_read>:
{
    9d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9d7a:	4604      	mov	r4, r0
	err = k_delayed_work_cancel(&db_hash_work);
    9d7c:	4810      	ldr	r0, [pc, #64]	; (9dc0 <db_hash_read+0x48>)
{
    9d7e:	4615      	mov	r5, r2
    9d80:	461f      	mov	r7, r3
    9d82:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	err = k_delayed_work_cancel(&db_hash_work);
    9d86:	f006 f88d 	bl	fea4 <k_delayed_work_cancel>
	if (!err) {
    9d8a:	b910      	cbnz	r0, 9d92 <db_hash_read+0x1a>
		db_hash_gen(true);
    9d8c:	2001      	movs	r0, #1
    9d8e:	f7ff fb45 	bl	941c <db_hash_gen>
	bt_gatt_change_aware(conn, true);
    9d92:	2101      	movs	r1, #1
    9d94:	4620      	mov	r0, r4
    9d96:	f009 fd34 	bl	13802 <bt_gatt_change_aware>
	if (offset > value_len) {
    9d9a:	2e10      	cmp	r6, #16
    9d9c:	d80c      	bhi.n	9db8 <db_hash_read+0x40>
	len = MIN(buf_len, value_len - offset);
    9d9e:	f1c6 0410 	rsb	r4, r6, #16
    9da2:	42bc      	cmp	r4, r7
    9da4:	bfa8      	it	ge
    9da6:	463c      	movge	r4, r7
	memcpy(buf, (u8_t *)value + offset, len);
    9da8:	4906      	ldr	r1, [pc, #24]	; (9dc4 <db_hash_read+0x4c>)
    9daa:	4622      	mov	r2, r4
    9dac:	4628      	mov	r0, r5
    9dae:	4431      	add	r1, r6
    9db0:	f008 f9d5 	bl	1215e <memcpy>
}
    9db4:	4620      	mov	r0, r4
    9db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    9db8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
    9dbc:	e7fa      	b.n	9db4 <db_hash_read+0x3c>
    9dbe:	bf00      	nop
    9dc0:	20000f78 	.word	0x20000f78
    9dc4:	20001ff0 	.word	0x20001ff0

00009dc8 <bt_gatt_store_ccc>:
	save.count = 0;
    9dc8:	2300      	movs	r3, #0
{
    9dca:	b570      	push	{r4, r5, r6, lr}
    9dcc:	4604      	mov	r4, r0
    9dce:	b0c0      	sub	sp, #256	; 0x100
    9dd0:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
    9dd2:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
    9dd4:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
    9dd8:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
    9dda:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9dde:	2001      	movs	r0, #1
    9de0:	4a13      	ldr	r2, [pc, #76]	; (9e30 <bt_gatt_store_ccc+0x68>)
    9de2:	ab0d      	add	r3, sp, #52	; 0x34
    9de4:	f009 fca8 	bl	13738 <bt_gatt_foreach_attr>
	if (id) {
    9de8:	b1ec      	cbz	r4, 9e26 <bt_gatt_store_ccc+0x5e>
		u8_to_dec(id_str, sizeof(id_str), id);
    9dea:	ae03      	add	r6, sp, #12
    9dec:	4622      	mov	r2, r4
    9dee:	2104      	movs	r1, #4
    9df0:	4630      	mov	r0, r6
    9df2:	f006 ff5d 	bl	10cb0 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
    9df6:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    9df8:	4a0e      	ldr	r2, [pc, #56]	; (9e34 <bt_gatt_store_ccc+0x6c>)
    9dfa:	462b      	mov	r3, r5
    9dfc:	2124      	movs	r1, #36	; 0x24
    9dfe:	a804      	add	r0, sp, #16
    9e00:	f7f9 fe56 	bl	3ab0 <bt_settings_encode_key>
	if (save.count) {
    9e04:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
    9e06:	b182      	cbz	r2, 9e2a <bt_gatt_store_ccc+0x62>
		len = save.count * sizeof(*save.store);
    9e08:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
    9e0a:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
    9e0c:	a804      	add	r0, sp, #16
    9e0e:	f7f7 fe7b 	bl	1b08 <settings_save_one>
	if (err) {
    9e12:	4604      	mov	r4, r0
    9e14:	b120      	cbz	r0, 9e20 <bt_gatt_store_ccc+0x58>
		BT_ERR("Failed to store CCCs (err %d)", err);
    9e16:	4602      	mov	r2, r0
    9e18:	2145      	movs	r1, #69	; 0x45
    9e1a:	4807      	ldr	r0, [pc, #28]	; (9e38 <bt_gatt_store_ccc+0x70>)
    9e1c:	f006 ffde 	bl	10ddc <printk>
}
    9e20:	4620      	mov	r0, r4
    9e22:	b040      	add	sp, #256	; 0x100
    9e24:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    9e26:	9400      	str	r4, [sp, #0]
    9e28:	e7e6      	b.n	9df8 <bt_gatt_store_ccc+0x30>
		str = NULL;
    9e2a:	4611      	mov	r1, r2
    9e2c:	e7ee      	b.n	9e0c <bt_gatt_store_ccc+0x44>
    9e2e:	bf00      	nop
    9e30:	00008a01 	.word	0x00008a01
    9e34:	00018c06 	.word	0x00018c06
    9e38:	00018ce1 	.word	0x00018ce1

00009e3c <bt_gatt_disconnected>:
{
    9e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9e40:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    9e42:	4603      	mov	r3, r0
    9e44:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9e48:	2001      	movs	r0, #1
{
    9e4a:	b08d      	sub	sp, #52	; 0x34
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    9e4c:	4a48      	ldr	r2, [pc, #288]	; (9f70 <bt_gatt_disconnected+0x134>)
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    9e4e:	f104 067c 	add.w	r6, r4, #124	; 0x7c
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    9e52:	f009 fc71 	bl	13738 <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    9e56:	4631      	mov	r1, r6
    9e58:	7a20      	ldrb	r0, [r4, #8]
    9e5a:	f008 fbcc 	bl	125f6 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    9e5e:	b378      	cbz	r0, 9ec0 <bt_gatt_disconnected+0x84>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
    9e60:	4631      	mov	r1, r6
    9e62:	7a20      	ldrb	r0, [r4, #8]
    9e64:	f7ff ffb0 	bl	9dc8 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
    9e68:	4620      	mov	r0, r4
    9e6a:	f7ff f827 	bl	8ebc <find_cf_cfg>
	if (!cfg) {
    9e6e:	4605      	mov	r5, r0
    9e70:	2800      	cmp	r0, #0
    9e72:	d04f      	beq.n	9f14 <bt_gatt_disconnected+0xd8>
		if (conn->id) {
    9e74:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
    9e76:	3508      	adds	r5, #8
		if (conn->id) {
    9e78:	2a00      	cmp	r2, #0
    9e7a:	d04d      	beq.n	9f18 <bt_gatt_disconnected+0xdc>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
    9e7c:	af02      	add	r7, sp, #8
    9e7e:	2104      	movs	r1, #4
    9e80:	4638      	mov	r0, r7
    9e82:	f006 ff15 	bl	10cb0 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
    9e86:	4633      	mov	r3, r6
    9e88:	9700      	str	r7, [sp, #0]
    9e8a:	2124      	movs	r1, #36	; 0x24
    9e8c:	4a39      	ldr	r2, [pc, #228]	; (9f74 <bt_gatt_disconnected+0x138>)
    9e8e:	a803      	add	r0, sp, #12
    9e90:	f7f9 fe0e 	bl	3ab0 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
    9e94:	7a23      	ldrb	r3, [r4, #8]
    9e96:	2701      	movs	r7, #1
    9e98:	b93b      	cbnz	r3, 9eaa <bt_gatt_disconnected+0x6e>
		bt_settings_encode_key(key, sizeof(key), "cf",
    9e9a:	2300      	movs	r3, #0
    9e9c:	2124      	movs	r1, #36	; 0x24
    9e9e:	9300      	str	r3, [sp, #0]
    9ea0:	4a34      	ldr	r2, [pc, #208]	; (9f74 <bt_gatt_disconnected+0x138>)
    9ea2:	4633      	mov	r3, r6
    9ea4:	a803      	add	r0, sp, #12
    9ea6:	f7f9 fe03 	bl	3ab0 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
    9eaa:	463a      	mov	r2, r7
    9eac:	4629      	mov	r1, r5
    9eae:	a803      	add	r0, sp, #12
    9eb0:	f7f7 fe2a 	bl	1b08 <settings_save_one>
	if (err) {
    9eb4:	4602      	mov	r2, r0
    9eb6:	b118      	cbz	r0, 9ec0 <bt_gatt_disconnected+0x84>
		BT_ERR("Failed to store Client Features (err %d)", err);
    9eb8:	2145      	movs	r1, #69	; 0x45
    9eba:	482f      	ldr	r0, [pc, #188]	; (9f78 <bt_gatt_disconnected+0x13c>)
    9ebc:	f006 ff8e 	bl	10ddc <printk>
	sub = gatt_sub_find(conn);
    9ec0:	2100      	movs	r1, #0
    9ec2:	4620      	mov	r0, r4
    9ec4:	f7fe fe72 	bl	8bac <gatt_sub_find_free>
	if (!sub) {
    9ec8:	4607      	mov	r7, r0
    9eca:	b3b0      	cbz	r0, 9f3a <bt_gatt_disconnected+0xfe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    9ecc:	6883      	ldr	r3, [r0, #8]
    9ece:	b3a3      	cbz	r3, 9f3a <bt_gatt_disconnected+0xfe>
    9ed0:	f1b3 0810 	subs.w	r8, r3, #16
    9ed4:	d031      	beq.n	9f3a <bt_gatt_disconnected+0xfe>
    9ed6:	681d      	ldr	r5, [r3, #0]
    9ed8:	b105      	cbz	r5, 9edc <bt_gatt_disconnected+0xa0>
    9eda:	3d10      	subs	r5, #16
    9edc:	f04f 0b00 	mov.w	fp, #0
			params->value = 0U;
    9ee0:	46da      	mov	sl, fp
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
    9ee2:	f107 0901 	add.w	r9, r7, #1
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    9ee6:	4631      	mov	r1, r6
    9ee8:	7a20      	ldrb	r0, [r4, #8]
    9eea:	f008 fb84 	bl	125f6 <bt_addr_le_is_bonded>
    9eee:	b9a8      	cbnz	r0, 9f1c <bt_gatt_disconnected+0xe0>
			gatt_sub_remove(conn, sub, prev, params);
    9ef0:	4643      	mov	r3, r8
    9ef2:	465a      	mov	r2, fp
    9ef4:	4639      	mov	r1, r7
    9ef6:	4620      	mov	r0, r4
			params->value = 0U;
    9ef8:	f8a8 a008 	strh.w	sl, [r8, #8]
			gatt_sub_remove(conn, sub, prev, params);
    9efc:	f009 fb8f 	bl	1361e <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    9f00:	b1dd      	cbz	r5, 9f3a <bt_gatt_disconnected+0xfe>
Z_GENLIST_PEEK_NEXT(slist, snode)
    9f02:	f115 0110 	adds.w	r1, r5, #16
    9f06:	d002      	beq.n	9f0e <bt_gatt_disconnected+0xd2>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    9f08:	6929      	ldr	r1, [r5, #16]
    9f0a:	b101      	cbz	r1, 9f0e <bt_gatt_disconnected+0xd2>
    9f0c:	3910      	subs	r1, #16
    9f0e:	46a8      	mov	r8, r5
    9f10:	460d      	mov	r5, r1
    9f12:	e7e8      	b.n	9ee6 <bt_gatt_disconnected+0xaa>
		len = 0;
    9f14:	4607      	mov	r7, r0
    9f16:	e7c0      	b.n	9e9a <bt_gatt_disconnected+0x5e>
    9f18:	2701      	movs	r7, #1
    9f1a:	e7be      	b.n	9e9a <bt_gatt_disconnected+0x5e>
    9f1c:	f108 030c 	add.w	r3, r8, #12
    9f20:	e8d3 3faf 	lda	r3, [r3]
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    9f24:	07db      	lsls	r3, r3, #31
    9f26:	d4e3      	bmi.n	9ef0 <bt_gatt_disconnected+0xb4>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
    9f28:	787b      	ldrb	r3, [r7, #1]
    9f2a:	b11b      	cbz	r3, 9f34 <bt_gatt_disconnected+0xf8>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
    9f2c:	4631      	mov	r1, r6
    9f2e:	4648      	mov	r0, r9
    9f30:	f009 fa2e 	bl	13390 <bt_addr_le_copy>
			prev = &params->node;
    9f34:	f108 0b10 	add.w	fp, r8, #16
    9f38:	e7e2      	b.n	9f00 <bt_gatt_disconnected+0xc4>
	cfg = find_cf_cfg(conn);
    9f3a:	4620      	mov	r0, r4
    9f3c:	f7fe ffbe 	bl	8ebc <find_cf_cfg>
	if (!cfg) {
    9f40:	4605      	mov	r5, r0
    9f42:	b138      	cbz	r0, 9f54 <bt_gatt_disconnected+0x118>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    9f44:	4631      	mov	r1, r6
    9f46:	7a20      	ldrb	r0, [r4, #8]
    9f48:	f008 fb55 	bl	125f6 <bt_addr_le_is_bonded>
    9f4c:	b928      	cbnz	r0, 9f5a <bt_gatt_disconnected+0x11e>
		clear_cf_cfg(cfg);
    9f4e:	4628      	mov	r0, r5
    9f50:	f009 fa46 	bl	133e0 <clear_cf_cfg>
}
    9f54:	b00d      	add	sp, #52	; 0x34
    9f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    9f5a:	4631      	mov	r1, r6
    9f5c:	1c68      	adds	r0, r5, #1
    9f5e:	f009 fa17 	bl	13390 <bt_addr_le_copy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9f62:	f06f 0102 	mvn.w	r1, #2
    9f66:	f105 000c 	add.w	r0, r5, #12
    9f6a:	f009 fa22 	bl	133b2 <atomic_and>
}
    9f6e:	e7f1      	b.n	9f54 <bt_gatt_disconnected+0x118>
    9f70:	000091ad 	.word	0x000091ad
    9f74:	00018d35 	.word	0x00018d35
    9f78:	00018d04 	.word	0x00018d04

00009f7c <get_io_capa>:
static const u8_t *sc_public_key;
static K_SEM_DEFINE(sc_local_pkey_ready, 0, 1);

static u8_t get_io_capa(void)
{
	if (!bt_auth) {
    9f7c:	4b10      	ldr	r3, [pc, #64]	; (9fc0 <get_io_capa+0x44>)
    9f7e:	681b      	ldr	r3, [r3, #0]
    9f80:	b1bb      	cbz	r3, 9fb2 <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    9f82:	681a      	ldr	r2, [r3, #0]
    9f84:	b142      	cbz	r2, 9f98 <get_io_capa+0x1c>
    9f86:	6859      	ldr	r1, [r3, #4]
    9f88:	b131      	cbz	r1, 9f98 <get_io_capa+0x1c>
    9f8a:	6899      	ldr	r1, [r3, #8]
    9f8c:	b911      	cbnz	r1, 9f94 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    9f8e:	490d      	ldr	r1, [pc, #52]	; (9fc4 <get_io_capa+0x48>)
    9f90:	7809      	ldrb	r1, [r1, #0]
    9f92:	b939      	cbnz	r1, 9fa4 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    9f94:	2004      	movs	r0, #4
    9f96:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    9f98:	490a      	ldr	r1, [pc, #40]	; (9fc4 <get_io_capa+0x48>)
    9f9a:	7809      	ldrb	r1, [r1, #0]
    9f9c:	b111      	cbz	r1, 9fa4 <get_io_capa+0x28>
    9f9e:	b10a      	cbz	r2, 9fa4 <get_io_capa+0x28>
    9fa0:	6899      	ldr	r1, [r3, #8]
    9fa2:	b941      	cbnz	r1, 9fb6 <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
    9fa4:	685b      	ldr	r3, [r3, #4]
    9fa6:	b943      	cbnz	r3, 9fba <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
    9fa8:	2a00      	cmp	r2, #0
    9faa:	bf0c      	ite	eq
    9fac:	2003      	moveq	r0, #3
    9fae:	2000      	movne	r0, #0
    9fb0:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
    9fb2:	2003      	movs	r0, #3
    9fb4:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
    9fb6:	2001      	movs	r0, #1
    9fb8:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
    9fba:	2002      	movs	r0, #2
	}
}
    9fbc:	4770      	bx	lr
    9fbe:	bf00      	nop
    9fc0:	20000d30 	.word	0x20000d30
    9fc4:	20002011 	.word	0x20002011

00009fc8 <sys_memcpy_swap>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
    9fc8:	4288      	cmp	r0, r1
{
    9fca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9fcc:	4604      	mov	r4, r0
    9fce:	460d      	mov	r5, r1
    9fd0:	4616      	mov	r6, r2
    9fd2:	eb00 0702 	add.w	r7, r0, r2
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
    9fd6:	d91a      	bls.n	a00e <sys_memcpy_swap+0x46>
    9fd8:	188b      	adds	r3, r1, r2
    9fda:	4298      	cmp	r0, r3
    9fdc:	d20e      	bcs.n	9ffc <sys_memcpy_swap+0x34>
    9fde:	490d      	ldr	r1, [pc, #52]	; (a014 <sys_memcpy_swap+0x4c>)
    9fe0:	f240 2317 	movw	r3, #535	; 0x217
    9fe4:	4a0c      	ldr	r2, [pc, #48]	; (a018 <sys_memcpy_swap+0x50>)
    9fe6:	480d      	ldr	r0, [pc, #52]	; (a01c <sys_memcpy_swap+0x54>)
    9fe8:	f006 fef8 	bl	10ddc <printk>
    9fec:	480c      	ldr	r0, [pc, #48]	; (a020 <sys_memcpy_swap+0x58>)
    9fee:	f006 fef5 	bl	10ddc <printk>
    9ff2:	f240 2117 	movw	r1, #535	; 0x217
    9ff6:	4808      	ldr	r0, [pc, #32]	; (a018 <sys_memcpy_swap+0x50>)
    9ff8:	f007 f986 	bl	11308 <assert_post_action>
	psrc += length - 1;
    9ffc:	3e01      	subs	r6, #1
    9ffe:	4435      	add	r5, r6
		*pdst++ = *psrc--;
    a000:	f815 3901 	ldrb.w	r3, [r5], #-1
    a004:	f804 3b01 	strb.w	r3, [r4], #1
	for (; length > 0; length--) {
    a008:	42bc      	cmp	r4, r7
    a00a:	d1f9      	bne.n	a000 <sys_memcpy_swap+0x38>
}
    a00c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
    a00e:	d0e6      	beq.n	9fde <sys_memcpy_swap+0x16>
    a010:	42b9      	cmp	r1, r7
    a012:	e7e3      	b.n	9fdc <sys_memcpy_swap+0x14>
    a014:	00017e81 	.word	0x00017e81
    a018:	00017e56 	.word	0x00017e56
    a01c:	00016493 	.word	0x00016493
    a020:	00017ed8 	.word	0x00017ed8

0000a024 <get_auth.isra.0>:
	oobd_present = enable;
}

static u8_t get_auth(struct bt_conn *conn, u8_t auth)
{
	if (sc_supported) {
    a024:	4b0c      	ldr	r3, [pc, #48]	; (a058 <get_auth.isra.0+0x34>)
static u8_t get_auth(struct bt_conn *conn, u8_t auth)
    a026:	b510      	push	{r4, lr}
	if (sc_supported) {
    a028:	781b      	ldrb	r3, [r3, #0]
    a02a:	b17b      	cbz	r3, a04c <get_auth.isra.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
    a02c:	f000 040f 	and.w	r4, r0, #15
	} else {
		auth &= BT_SMP_AUTH_MASK;
	}

	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    a030:	f7ff ffa4 	bl	9f7c <get_io_capa>
		auth &= ~(BT_SMP_AUTH_MITM);
	} else {
		auth |= BT_SMP_AUTH_MITM;
	}

	if (bondable) {
    a034:	4b09      	ldr	r3, [pc, #36]	; (a05c <get_auth.isra.0+0x38>)
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    a036:	2803      	cmp	r0, #3
	if (bondable) {
    a038:	781b      	ldrb	r3, [r3, #0]
		auth &= ~(BT_SMP_AUTH_MITM);
    a03a:	bf0c      	ite	eq
    a03c:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
    a040:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
    a044:	b12b      	cbz	r3, a052 <get_auth.isra.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
    a046:	f044 0001 	orr.w	r0, r4, #1
	} else {
		auth &= ~BT_SMP_AUTH_BONDING;
	}

	return auth;
}
    a04a:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
    a04c:	f000 0407 	and.w	r4, r0, #7
    a050:	e7ee      	b.n	a030 <get_auth.isra.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
    a052:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
    a056:	e7f8      	b.n	a04a <get_auth.isra.0+0x26>
    a058:	20002011 	.word	0x20002011
    a05c:	200003ca 	.word	0x200003ca

0000a060 <smp_chan_get>:
		return false;
	}
}

static struct bt_smp *smp_chan_get(struct bt_conn *conn)
{
    a060:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    a062:	2106      	movs	r1, #6
    a064:	f008 fe04 	bl	12c70 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    a068:	4604      	mov	r4, r0
    a06a:	b918      	cbnz	r0, a074 <smp_chan_get+0x14>
		BT_ERR("Unable to find SMP channel");
    a06c:	2145      	movs	r1, #69	; 0x45
    a06e:	4802      	ldr	r0, [pc, #8]	; (a078 <smp_chan_get+0x18>)
    a070:	f006 feb4 	bl	10ddc <printk>
		return NULL;
	}

	return CONTAINER_OF(chan, struct bt_smp, chan);
}
    a074:	4620      	mov	r0, r4
    a076:	bd10      	pop	{r4, pc}
    a078:	00018d46 	.word	0x00018d46

0000a07c <bt_smp_accept>:
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    a07c:	b508      	push	{r3, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
    a07e:	4b07      	ldr	r3, [pc, #28]	; (a09c <bt_smp_accept+0x20>)
{
    a080:	4602      	mov	r2, r0
		if (smp->chan.chan.conn) {
    a082:	6818      	ldr	r0, [r3, #0]
    a084:	b918      	cbnz	r0, a08e <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.chan.ops = &ops;
    a086:	4a06      	ldr	r2, [pc, #24]	; (a0a0 <bt_smp_accept+0x24>)
    a088:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan.chan;
    a08a:	600b      	str	r3, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    a08c:	bd08      	pop	{r3, pc}
	BT_ERR("No available SMP context for conn %p", conn);
    a08e:	4805      	ldr	r0, [pc, #20]	; (a0a4 <bt_smp_accept+0x28>)
    a090:	2145      	movs	r1, #69	; 0x45
    a092:	f006 fea3 	bl	10ddc <printk>
    a096:	f06f 000b 	mvn.w	r0, #11
    a09a:	e7f7      	b.n	a08c <bt_smp_accept+0x10>
    a09c:	2000100c 	.word	0x2000100c
    a0a0:	00015d84 	.word	0x00015d84
    a0a4:	00018d66 	.word	0x00018d66

0000a0a8 <smp_init>:
{
    a0a8:	b538      	push	{r3, r4, r5, lr}
    a0aa:	4604      	mov	r4, r0
	(void)memset((u8_t *)smp + sizeof(smp->chan), 0,
    a0ac:	f100 05b0 	add.w	r5, r0, #176	; 0xb0
    a0b0:	22ec      	movs	r2, #236	; 0xec
    a0b2:	2100      	movs	r1, #0
    a0b4:	4628      	mov	r0, r5
    a0b6:	f008 f87d 	bl	121b4 <memset>
	if (bt_rand(smp->prnd, 16)) {
    a0ba:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
    a0be:	2110      	movs	r1, #16
    a0c0:	f7fb fe94 	bl	5dec <bt_rand>
    a0c4:	4604      	mov	r4, r0
    a0c6:	b948      	cbnz	r0, a0dc <smp_init+0x34>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    a0c8:	2105      	movs	r1, #5
    a0ca:	4628      	mov	r0, r5
    a0cc:	f009 fbc1 	bl	13852 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
    a0d0:	f7fb fda6 	bl	5c20 <bt_pub_key_get>
    a0d4:	4b02      	ldr	r3, [pc, #8]	; (a0e0 <smp_init+0x38>)
    a0d6:	6018      	str	r0, [r3, #0]
}
    a0d8:	4620      	mov	r0, r4
    a0da:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    a0dc:	2408      	movs	r4, #8
    a0de:	e7fb      	b.n	a0d8 <smp_init+0x30>
    a0e0:	200011c8 	.word	0x200011c8

0000a0e4 <smp_send.isra.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    a0e4:	4613      	mov	r3, r2
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    a0e6:	2200      	movs	r2, #0
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    a0e8:	b513      	push	{r0, r1, r4, lr}
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    a0ea:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    a0ec:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    a0ee:	460a      	mov	r2, r1
    a0f0:	6800      	ldr	r0, [r0, #0]
    a0f2:	2106      	movs	r1, #6
    a0f4:	f008 fcf6 	bl	12ae4 <bt_l2cap_send_cb>
    a0f8:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    a0fc:	2300      	movs	r3, #0
    a0fe:	4804      	ldr	r0, [pc, #16]	; (a110 <smp_send.isra.0+0x2c>)
    a100:	f504 71ce 	add.w	r1, r4, #412	; 0x19c
}
    a104:	b002      	add	sp, #8
    a106:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a10a:	f005 be41 	b.w	fd90 <k_delayed_work_submit_to_queue>
    a10e:	bf00      	nop
    a110:	20001e54 	.word	0x20001e54

0000a114 <compute_and_check_and_send_slave_dhcheck>:
	(void)memset(r, 0, sizeof(r));
    a114:	2210      	movs	r2, #16
{
    a116:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a11a:	4604      	mov	r4, r0
    a11c:	b0a3      	sub	sp, #140	; 0x8c
	(void)memset(r, 0, sizeof(r));
    a11e:	2100      	movs	r1, #0
    a120:	eb0d 0002 	add.w	r0, sp, r2
    a124:	f008 f846 	bl	121b4 <memset>
	switch (smp->method) {
    a128:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    a12c:	2b05      	cmp	r3, #5
    a12e:	d87e      	bhi.n	a22e <compute_and_check_and_send_slave_dhcheck+0x11a>
    a130:	e8df f003 	tbb	[pc, r3]
    a134:	09030309 	.word	0x09030309
    a138:	7f7d      	.short	0x7f7d
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    a13a:	2204      	movs	r2, #4
    a13c:	f504 71c4 	add.w	r1, r4, #392	; 0x188
    a140:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    a142:	f008 f80c 	bl	1215e <memcpy>
	u8_t m[53] = { 0x00, /* counter */
    a146:	4b63      	ldr	r3, [pc, #396]	; (a2d4 <compute_and_check_and_send_slave_dhcheck+0x1c0>)
		   &smp->chan.chan.conn->le.init_addr,
    a148:	f8d4 9000 	ldr.w	r9, [r4]
	u8_t m[53] = { 0x00, /* counter */
    a14c:	aa14      	add	r2, sp, #80	; 0x50
    a14e:	f103 0630 	add.w	r6, r3, #48	; 0x30
    a152:	4615      	mov	r5, r2
    a154:	6818      	ldr	r0, [r3, #0]
    a156:	6859      	ldr	r1, [r3, #4]
    a158:	3308      	adds	r3, #8
    a15a:	c503      	stmia	r5!, {r0, r1}
    a15c:	42b3      	cmp	r3, r6
    a15e:	462a      	mov	r2, r5
    a160:	d1f7      	bne.n	a152 <compute_and_check_and_send_slave_dhcheck+0x3e>
    a162:	6818      	ldr	r0, [r3, #0]
    a164:	791b      	ldrb	r3, [r3, #4]
    a166:	6028      	str	r0, [r5, #0]
    a168:	712b      	strb	r3, [r5, #4]
	sys_memcpy_swap(ws, w, 32);
    a16a:	ad0c      	add	r5, sp, #48	; 0x30
    a16c:	2220      	movs	r2, #32
    a16e:	4628      	mov	r0, r5
    a170:	f204 1147 	addw	r1, r4, #327	; 0x147
    a174:	f7ff ff28 	bl	9fc8 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    a178:	2220      	movs	r2, #32
    a17a:	4629      	mov	r1, r5
    a17c:	4856      	ldr	r0, [pc, #344]	; (a2d8 <compute_and_check_and_send_slave_dhcheck+0x1c4>)
    a17e:	ab08      	add	r3, sp, #32
    a180:	f009 fb7c 	bl	1387c <bt_smp_aes_cmac>
	if (err) {
    a184:	2800      	cmp	r0, #0
    a186:	d152      	bne.n	a22e <compute_and_check_and_send_slave_dhcheck+0x11a>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    a188:	f104 07e7 	add.w	r7, r4, #231	; 0xe7
	sys_memcpy_swap(m + 5, n1, 16);
    a18c:	2210      	movs	r2, #16
    a18e:	4639      	mov	r1, r7
    a190:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    a194:	f104 08d7 	add.w	r8, r4, #215	; 0xd7
	sys_memcpy_swap(m + 5, n1, 16);
    a198:	f7ff ff16 	bl	9fc8 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
    a19c:	2210      	movs	r2, #16
    a19e:	4641      	mov	r1, r8
    a1a0:	f10d 0065 	add.w	r0, sp, #101	; 0x65
    a1a4:	f7ff ff10 	bl	9fc8 <sys_memcpy_swap>
	m[37] = a1->type;
    a1a8:	f899 3083 	ldrb.w	r3, [r9, #131]	; 0x83
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    a1ac:	2206      	movs	r2, #6
    a1ae:	f109 0184 	add.w	r1, r9, #132	; 0x84
    a1b2:	f10d 0076 	add.w	r0, sp, #118	; 0x76
	m[37] = a1->type;
    a1b6:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    a1ba:	f7ff ff05 	bl	9fc8 <sys_memcpy_swap>
	m[44] = a2->type;
    a1be:	f899 308a 	ldrb.w	r3, [r9, #138]	; 0x8a
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    a1c2:	2206      	movs	r2, #6
    a1c4:	f109 018b 	add.w	r1, r9, #139	; 0x8b
    a1c8:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    a1cc:	f204 1677 	addw	r6, r4, #375	; 0x177
	m[44] = a2->type;
    a1d0:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    a1d4:	f7ff fef8 	bl	9fc8 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    a1d8:	4633      	mov	r3, r6
    a1da:	2235      	movs	r2, #53	; 0x35
    a1dc:	a914      	add	r1, sp, #80	; 0x50
    a1de:	a808      	add	r0, sp, #32
    a1e0:	f009 fb4c 	bl	1387c <bt_smp_aes_cmac>
	if (err) {
    a1e4:	bb18      	cbnz	r0, a22e <compute_and_check_and_send_slave_dhcheck+0x11a>
	sys_mem_swap(mackey, 16);
    a1e6:	4630      	mov	r0, r6
    a1e8:	f009 fb80 	bl	138ec <sys_mem_swap.constprop.0>
	m[0] = 0x01;
    a1ec:	2301      	movs	r3, #1
		   smp->tk)) {
    a1ee:	f104 09f7 	add.w	r9, r4, #247	; 0xf7
	m[0] = 0x01;
    a1f2:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    a1f6:	2235      	movs	r2, #53	; 0x35
    a1f8:	464b      	mov	r3, r9
    a1fa:	a914      	add	r1, sp, #80	; 0x50
    a1fc:	a808      	add	r0, sp, #32
    a1fe:	f009 fb3d 	bl	1387c <bt_smp_aes_cmac>
	if (err) {
    a202:	b9a0      	cbnz	r0, a22e <compute_and_check_and_send_slave_dhcheck+0x11a>
	sys_mem_swap(ltk, 16);
    a204:	4648      	mov	r0, r9
    a206:	f009 fb71 	bl	138ec <sys_mem_swap.constprop.0>
		   &smp->chan.chan.conn->le.resp_addr,
    a20a:	4622      	mov	r2, r4
    a20c:	f852 3bc1 	ldr.w	r3, [r2], #193
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    a210:	a914      	add	r1, sp, #80	; 0x50
    a212:	9103      	str	r1, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
    a214:	f103 0183 	add.w	r1, r3, #131	; 0x83
		   &smp->chan.chan.conn->le.resp_addr,
    a218:	338a      	adds	r3, #138	; 0x8a
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    a21a:	e9cd 2300 	strd	r2, r3, [sp]
    a21e:	9102      	str	r1, [sp, #8]
    a220:	463a      	mov	r2, r7
    a222:	4641      	mov	r1, r8
    a224:	4630      	mov	r0, r6
    a226:	ab04      	add	r3, sp, #16
    a228:	f009 fb6e 	bl	13908 <smp_f6>
    a22c:	b148      	cbz	r0, a242 <compute_and_check_and_send_slave_dhcheck+0x12e>
		return BT_SMP_ERR_UNSPECIFIED;
    a22e:	2008      	movs	r0, #8
    a230:	e048      	b.n	a2c4 <compute_and_check_and_send_slave_dhcheck+0x1b0>
		if (smp->oobd_remote) {
    a232:	f8d4 1194 	ldr.w	r1, [r4, #404]	; 0x194
    a236:	2900      	cmp	r1, #0
    a238:	d085      	beq.n	a146 <compute_and_check_and_send_slave_dhcheck+0x32>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    a23a:	2210      	movs	r2, #16
    a23c:	eb0d 0002 	add.w	r0, sp, r2
    a240:	e77f      	b.n	a142 <compute_and_check_and_send_slave_dhcheck+0x2e>
	if (smp->method == LE_SC_OOB) {
    a242:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    a246:	2b05      	cmp	r3, #5
    a248:	d108      	bne.n	a25c <compute_and_check_and_send_slave_dhcheck+0x148>
			memcpy(r, smp->oobd_local->r, sizeof(r));
    a24a:	2210      	movs	r2, #16
		if (smp->oobd_local) {
    a24c:	f8d4 1190 	ldr.w	r1, [r4, #400]	; 0x190
			memcpy(r, smp->oobd_local->r, sizeof(r));
    a250:	eb0d 0002 	add.w	r0, sp, r2
		if (smp->oobd_local) {
    a254:	2900      	cmp	r1, #0
    a256:	d038      	beq.n	a2ca <compute_and_check_and_send_slave_dhcheck+0x1b6>
			memcpy(r, smp->oobd_local->r, sizeof(r));
    a258:	f007 ff81 	bl	1215e <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
    a25c:	4622      	mov	r2, r4
    a25e:	f852 3bba 	ldr.w	r3, [r2], #186
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    a262:	4630      	mov	r0, r6
		   &smp->chan.chan.conn->le.resp_addr, re)) {
    a264:	f103 018a 	add.w	r1, r3, #138	; 0x8a
		   &smp->chan.chan.conn->le.init_addr,
    a268:	3383      	adds	r3, #131	; 0x83
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    a26a:	e9cd 2300 	strd	r2, r3, [sp]
    a26e:	9102      	str	r1, [sp, #8]
    a270:	4642      	mov	r2, r8
    a272:	4639      	mov	r1, r7
    a274:	9503      	str	r5, [sp, #12]
    a276:	ab04      	add	r3, sp, #16
    a278:	f009 fb46 	bl	13908 <smp_f6>
    a27c:	2800      	cmp	r0, #0
    a27e:	d1d6      	bne.n	a22e <compute_and_check_and_send_slave_dhcheck+0x11a>
	if (memcmp(smp->e, re, 16)) {
    a280:	4629      	mov	r1, r5
    a282:	2210      	movs	r2, #16
    a284:	f204 1067 	addw	r0, r4, #359	; 0x167
    a288:	f007 ff59 	bl	1213e <memcmp>
    a28c:	4605      	mov	r5, r0
    a28e:	b9f8      	cbnz	r0, a2d0 <compute_and_check_and_send_slave_dhcheck+0x1bc>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
    a290:	210d      	movs	r1, #13
    a292:	4620      	mov	r0, r4
    a294:	f009 fbb1 	bl	139fa <smp_create_pdu.isra.0>
	if (!buf) {
    a298:	4606      	mov	r6, r0
    a29a:	2800      	cmp	r0, #0
    a29c:	d0c7      	beq.n	a22e <compute_and_check_and_send_slave_dhcheck+0x11a>
	req = net_buf_add(buf, sizeof(*req));
    a29e:	2110      	movs	r1, #16
    a2a0:	3008      	adds	r0, #8
    a2a2:	f001 fd59 	bl	bd58 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
    a2a6:	2210      	movs	r2, #16
    a2a8:	a914      	add	r1, sp, #80	; 0x50
    a2aa:	f007 ff58 	bl	1215e <memcpy>
	smp_send(smp, buf, NULL, NULL);
    a2ae:	462a      	mov	r2, r5
    a2b0:	4631      	mov	r1, r6
    a2b2:	4620      	mov	r0, r4
    a2b4:	f7ff ff16 	bl	a0e4 <smp_send.isra.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    a2b8:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    a2bc:	2101      	movs	r1, #1
    a2be:	f009 fac8 	bl	13852 <atomic_set_bit>
	return 0;
    a2c2:	4628      	mov	r0, r5
}
    a2c4:	b023      	add	sp, #140	; 0x8c
    a2c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			memset(r, 0, sizeof(r));
    a2ca:	f007 ff73 	bl	121b4 <memset>
    a2ce:	e7c5      	b.n	a25c <compute_and_check_and_send_slave_dhcheck+0x148>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    a2d0:	200b      	movs	r0, #11
    a2d2:	e7f7      	b.n	a2c4 <compute_and_check_and_send_slave_dhcheck+0x1b0>
    a2d4:	000156f5 	.word	0x000156f5
    a2d8:	00019022 	.word	0x00019022

0000a2dc <sc_send_public_key>:
{
    a2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    a2de:	210c      	movs	r1, #12
{
    a2e0:	4605      	mov	r5, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    a2e2:	f009 fb8a 	bl	139fa <smp_create_pdu.isra.0>
	if (!req_buf) {
    a2e6:	4604      	mov	r4, r0
    a2e8:	b1b0      	cbz	r0, a318 <sc_send_public_key+0x3c>
	req = net_buf_add(req_buf, sizeof(*req));
    a2ea:	2140      	movs	r1, #64	; 0x40
    a2ec:	3008      	adds	r0, #8
    a2ee:	f001 fd33 	bl	bd58 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
    a2f2:	4f0a      	ldr	r7, [pc, #40]	; (a31c <sc_send_public_key+0x40>)
    a2f4:	2220      	movs	r2, #32
    a2f6:	6839      	ldr	r1, [r7, #0]
	req = net_buf_add(req_buf, sizeof(*req));
    a2f8:	4606      	mov	r6, r0
	memcpy(req->x, sc_public_key, sizeof(req->x));
    a2fa:	f007 ff30 	bl	1215e <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    a2fe:	2220      	movs	r2, #32
    a300:	6839      	ldr	r1, [r7, #0]
    a302:	18b0      	adds	r0, r6, r2
    a304:	4411      	add	r1, r2
    a306:	f007 ff2a 	bl	1215e <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
    a30a:	4628      	mov	r0, r5
    a30c:	2200      	movs	r2, #0
    a30e:	4621      	mov	r1, r4
    a310:	f7ff fee8 	bl	a0e4 <smp_send.isra.0>
	return 0;
    a314:	2000      	movs	r0, #0
}
    a316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    a318:	2008      	movs	r0, #8
    a31a:	e7fc      	b.n	a316 <sc_send_public_key+0x3a>
    a31c:	200011c8 	.word	0x200011c8

0000a320 <smp_send_pairing_confirm>:
{
    a320:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
    a322:	f890 40b8 	ldrb.w	r4, [r0, #184]	; 0xb8
{
    a326:	4605      	mov	r5, r0
	switch (smp->method) {
    a328:	2c02      	cmp	r4, #2
    a32a:	d824      	bhi.n	a376 <smp_send_pairing_confirm+0x56>
    a32c:	b14c      	cbz	r4, a342 <smp_send_pairing_confirm+0x22>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    a32e:	f890 318c 	ldrb.w	r3, [r0, #396]	; 0x18c
    a332:	f8d0 4188 	ldr.w	r4, [r0, #392]	; 0x188
    a336:	40dc      	lsrs	r4, r3
    a338:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
    a33c:	f064 047f 	orn	r4, r4, #127	; 0x7f
    a340:	b2e4      	uxtb	r4, r4
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    a342:	2103      	movs	r1, #3
    a344:	4628      	mov	r0, r5
    a346:	f009 fb58 	bl	139fa <smp_create_pdu.isra.0>
	if (!buf) {
    a34a:	4606      	mov	r6, r0
    a34c:	b1a8      	cbz	r0, a37a <smp_send_pairing_confirm+0x5a>
	req = net_buf_add(buf, sizeof(*req));
    a34e:	2110      	movs	r1, #16
    a350:	3008      	adds	r0, #8
    a352:	f001 fd01 	bl	bd58 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    a356:	9000      	str	r0, [sp, #0]
    a358:	4810      	ldr	r0, [pc, #64]	; (a39c <smp_send_pairing_confirm+0x7c>)
    a35a:	4623      	mov	r3, r4
    a35c:	6800      	ldr	r0, [r0, #0]
    a35e:	f105 02d7 	add.w	r2, r5, #215	; 0xd7
    a362:	f205 1107 	addw	r1, r5, #263	; 0x107
    a366:	f009 fb1b 	bl	139a0 <smp_f4>
    a36a:	4604      	mov	r4, r0
    a36c:	b148      	cbz	r0, a382 <smp_send_pairing_confirm+0x62>
		net_buf_unref(buf);
    a36e:	4630      	mov	r0, r6
    a370:	f001 fb80 	bl	ba74 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    a374:	e001      	b.n	a37a <smp_send_pairing_confirm+0x5a>
	switch (smp->method) {
    a376:	2c03      	cmp	r4, #3
    a378:	d001      	beq.n	a37e <smp_send_pairing_confirm+0x5e>
		return BT_SMP_ERR_UNSPECIFIED;
    a37a:	2008      	movs	r0, #8
    a37c:	e00c      	b.n	a398 <smp_send_pairing_confirm+0x78>
	switch (smp->method) {
    a37e:	2400      	movs	r4, #0
    a380:	e7df      	b.n	a342 <smp_send_pairing_confirm+0x22>
	smp_send(smp, buf, NULL, NULL);
    a382:	4602      	mov	r2, r0
    a384:	4631      	mov	r1, r6
    a386:	4628      	mov	r0, r5
    a388:	f7ff feac 	bl	a0e4 <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    a38c:	f105 00b4 	add.w	r0, r5, #180	; 0xb4
    a390:	4621      	mov	r1, r4
    a392:	f009 fa68 	bl	13866 <atomic_clear_bit>
	return 0;
    a396:	4620      	mov	r0, r4
}
    a398:	b002      	add	sp, #8
    a39a:	bd70      	pop	{r4, r5, r6, pc}
    a39c:	200011c8 	.word	0x200011c8

0000a3a0 <smp_public_key_slave.part.0>:
static u8_t smp_public_key_slave(struct bt_smp *smp)
    a3a0:	b538      	push	{r3, r4, r5, lr}
    a3a2:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
    a3a6:	4604      	mov	r4, r0
    a3a8:	2b05      	cmp	r3, #5
    a3aa:	d814      	bhi.n	a3d6 <smp_public_key_slave.part.0+0x36>
    a3ac:	e8df f003 	tbb	[pc, r3]
    a3b0:	030d3603 	.word	0x030d3603
    a3b4:	5313      	.short	0x5313
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    a3b6:	30b0      	adds	r0, #176	; 0xb0
    a3b8:	2104      	movs	r1, #4
    a3ba:	f009 fa4a 	bl	13852 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
    a3be:	4620      	mov	r0, r4
    a3c0:	f7ff ffae 	bl	a320 <smp_send_pairing_confirm>
		if (err) {
    a3c4:	2800      	cmp	r0, #0
    a3c6:	d037      	beq.n	a438 <smp_public_key_slave.part.0+0x98>
}
    a3c8:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    a3ca:	2104      	movs	r1, #4
    a3cc:	f500 70c4 	add.w	r0, r0, #392	; 0x188
    a3d0:	f7fb fd0c 	bl	5dec <bt_rand>
    a3d4:	b108      	cbz	r0, a3da <smp_public_key_slave.part.0+0x3a>
	switch (smp->method) {
    a3d6:	2008      	movs	r0, #8
    a3d8:	e7f6      	b.n	a3c8 <smp_public_key_slave.part.0+0x28>
		smp->passkey %= 1000000;
    a3da:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
    a3de:	4a1f      	ldr	r2, [pc, #124]	; (a45c <smp_public_key_slave.part.0+0xbc>)
	if (bt_auth && bt_auth->passkey_display) {
    a3e0:	4d1f      	ldr	r5, [pc, #124]	; (a460 <smp_public_key_slave.part.0+0xc0>)
		smp->passkey %= 1000000;
    a3e2:	fbb1 f3f2 	udiv	r3, r1, r2
    a3e6:	fb02 1313 	mls	r3, r2, r3, r1
    a3ea:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
	if (bt_auth && bt_auth->passkey_display) {
    a3ee:	682b      	ldr	r3, [r5, #0]
	smp->passkey_round = 0U;
    a3f0:	f884 018c 	strb.w	r0, [r4, #396]	; 0x18c
	if (bt_auth && bt_auth->passkey_display) {
    a3f4:	b163      	cbz	r3, a410 <smp_public_key_slave.part.0+0x70>
    a3f6:	681b      	ldr	r3, [r3, #0]
    a3f8:	b153      	cbz	r3, a410 <smp_public_key_slave.part.0+0x70>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    a3fa:	210a      	movs	r1, #10
    a3fc:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    a400:	f009 fa27 	bl	13852 <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    a404:	682b      	ldr	r3, [r5, #0]
    a406:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
    a40a:	681b      	ldr	r3, [r3, #0]
    a40c:	6820      	ldr	r0, [r4, #0]
    a40e:	4798      	blx	r3
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    a410:	2103      	movs	r1, #3
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    a412:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    a416:	f009 fa1c 	bl	13852 <atomic_set_bit>
		break;
    a41a:	e00d      	b.n	a438 <smp_public_key_slave.part.0+0x98>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    a41c:	2103      	movs	r1, #3
    a41e:	30b0      	adds	r0, #176	; 0xb0
    a420:	f009 fa17 	bl	13852 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    a424:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    a428:	2109      	movs	r1, #9
    a42a:	f009 fa12 	bl	13852 <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
    a42e:	4b0c      	ldr	r3, [pc, #48]	; (a460 <smp_public_key_slave.part.0+0xc0>)
    a430:	6820      	ldr	r0, [r4, #0]
    a432:	681b      	ldr	r3, [r3, #0]
    a434:	685b      	ldr	r3, [r3, #4]
    a436:	4798      	blx	r3
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
    a438:	490a      	ldr	r1, [pc, #40]	; (a464 <smp_public_key_slave.part.0+0xc4>)
    a43a:	f204 1007 	addw	r0, r4, #263	; 0x107
    a43e:	f7fb fbfd 	bl	5c3c <bt_dh_key_gen>
    a442:	4605      	mov	r5, r0
    a444:	2800      	cmp	r0, #0
    a446:	d1c6      	bne.n	a3d6 <smp_public_key_slave.part.0+0x36>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    a448:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    a44c:	2107      	movs	r1, #7
    a44e:	f009 fa00 	bl	13852 <atomic_set_bit>
	return 0;
    a452:	4628      	mov	r0, r5
    a454:	e7b8      	b.n	a3c8 <smp_public_key_slave.part.0+0x28>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    a456:	2104      	movs	r1, #4
    a458:	e7db      	b.n	a412 <smp_public_key_slave.part.0+0x72>
    a45a:	bf00      	nop
    a45c:	000f4240 	.word	0x000f4240
    a460:	20000d30 	.word	0x20000d30
    a464:	0000a929 	.word	0x0000a929

0000a468 <smp_ident_info>:
{
    a468:	b570      	push	{r4, r5, r6, lr}
    a46a:	460b      	mov	r3, r1
    a46c:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    a46e:	210c      	movs	r1, #12
    a470:	30b4      	adds	r0, #180	; 0xb4
    a472:	f009 fabc 	bl	139ee <atomic_test_bit>
    a476:	b1c0      	cbz	r0, a4aa <smp_ident_info+0x42>
		struct bt_smp_ident_info *req = (void *)buf->data;
    a478:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    a47a:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    a47c:	2002      	movs	r0, #2
    a47e:	f103 057c 	add.w	r5, r3, #124	; 0x7c
    a482:	462a      	mov	r2, r5
    a484:	7a19      	ldrb	r1, [r3, #8]
    a486:	f009 fd8f 	bl	13fa8 <bt_keys_get_type>
		if (!keys) {
    a48a:	b948      	cbnz	r0, a4a0 <smp_ident_info+0x38>
			BT_ERR("Unable to get keys for %s",
    a48c:	4628      	mov	r0, r5
    a48e:	f7f9 fa6f 	bl	3970 <bt_addr_le_str_real>
    a492:	2145      	movs	r1, #69	; 0x45
    a494:	4602      	mov	r2, r0
    a496:	4808      	ldr	r0, [pc, #32]	; (a4b8 <smp_ident_info+0x50>)
    a498:	f006 fca0 	bl	10ddc <printk>
			return BT_SMP_ERR_UNSPECIFIED;
    a49c:	2008      	movs	r0, #8
}
    a49e:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->irk.val, req->irk, 16);
    a4a0:	2210      	movs	r2, #16
    a4a2:	4631      	mov	r1, r6
    a4a4:	302a      	adds	r0, #42	; 0x2a
    a4a6:	f007 fe5a 	bl	1215e <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    a4aa:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    a4ae:	2109      	movs	r1, #9
    a4b0:	f009 f9cf 	bl	13852 <atomic_set_bit>
	return 0;
    a4b4:	2000      	movs	r0, #0
    a4b6:	e7f2      	b.n	a49e <smp_ident_info+0x36>
    a4b8:	00018d90 	.word	0x00018d90

0000a4bc <smp_encrypt_info>:
{
    a4bc:	b570      	push	{r4, r5, r6, lr}
    a4be:	460b      	mov	r3, r1
    a4c0:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    a4c2:	210c      	movs	r1, #12
    a4c4:	30b4      	adds	r0, #180	; 0xb4
    a4c6:	f009 fa92 	bl	139ee <atomic_test_bit>
    a4ca:	b1c0      	cbz	r0, a4fe <smp_encrypt_info+0x42>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    a4cc:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    a4ce:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    a4d0:	2004      	movs	r0, #4
    a4d2:	f103 057c 	add.w	r5, r3, #124	; 0x7c
    a4d6:	462a      	mov	r2, r5
    a4d8:	7a19      	ldrb	r1, [r3, #8]
    a4da:	f009 fd65 	bl	13fa8 <bt_keys_get_type>
		if (!keys) {
    a4de:	b948      	cbnz	r0, a4f4 <smp_encrypt_info+0x38>
			BT_ERR("Unable to get keys for %s",
    a4e0:	4628      	mov	r0, r5
    a4e2:	f7f9 fa45 	bl	3970 <bt_addr_le_str_real>
    a4e6:	2145      	movs	r1, #69	; 0x45
    a4e8:	4602      	mov	r2, r0
    a4ea:	4808      	ldr	r0, [pc, #32]	; (a50c <smp_encrypt_info+0x50>)
    a4ec:	f006 fc76 	bl	10ddc <printk>
			return BT_SMP_ERR_UNSPECIFIED;
    a4f0:	2008      	movs	r0, #8
}
    a4f2:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
    a4f4:	2210      	movs	r2, #16
    a4f6:	4631      	mov	r1, r6
    a4f8:	301a      	adds	r0, #26
    a4fa:	f007 fe30 	bl	1215e <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
    a4fe:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    a502:	2107      	movs	r1, #7
    a504:	f009 f9a5 	bl	13852 <atomic_set_bit>
	return 0;
    a508:	2000      	movs	r0, #0
    a50a:	e7f2      	b.n	a4f2 <smp_encrypt_info+0x36>
    a50c:	00018d90 	.word	0x00018d90

0000a510 <smp_pairing_req>:
{
    a510:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
    a514:	f8d1 8008 	ldr.w	r8, [r1, #8]
{
    a518:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    a51a:	f898 3003 	ldrb.w	r3, [r8, #3]
    a51e:	3b07      	subs	r3, #7
    a520:	2b09      	cmp	r3, #9
    a522:	d904      	bls.n	a52e <smp_pairing_req+0x1e>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    a524:	2506      	movs	r5, #6
}
    a526:	4628      	mov	r0, r5
    a528:	b002      	add	sp, #8
    a52a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_conn *conn = smp->chan.chan.conn;
    a52e:	6807      	ldr	r7, [r0, #0]
	if (!conn->le.keys) {
    a530:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
    a534:	b163      	cbz	r3, a550 <smp_pairing_req+0x40>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
    a536:	f104 06b4 	add.w	r6, r4, #180	; 0xb4
    a53a:	210e      	movs	r1, #14
    a53c:	4630      	mov	r0, r6
    a53e:	f009 fa56 	bl	139ee <atomic_test_bit>
    a542:	b980      	cbnz	r0, a566 <smp_pairing_req+0x56>
		int ret = smp_init(smp);
    a544:	4620      	mov	r0, r4
    a546:	f7ff fdaf 	bl	a0a8 <smp_init>
		if (ret) {
    a54a:	b160      	cbz	r0, a566 <smp_pairing_req+0x56>
			return ret;
    a54c:	b2c5      	uxtb	r5, r0
    a54e:	e7ea      	b.n	a526 <smp_pairing_req+0x16>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    a550:	7a38      	ldrb	r0, [r7, #8]
    a552:	f107 017c 	add.w	r1, r7, #124	; 0x7c
    a556:	f000 ff89 	bl	b46c <bt_keys_get_addr>
    a55a:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
		if (!conn->le.keys) {
    a55e:	2800      	cmp	r0, #0
    a560:	d1e9      	bne.n	a536 <smp_pairing_req+0x26>
			return BT_SMP_ERR_UNSPECIFIED;
    a562:	2508      	movs	r5, #8
    a564:	e7df      	b.n	a526 <smp_pairing_req+0x16>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    a566:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
    a568:	2206      	movs	r2, #6
    a56a:	4641      	mov	r1, r8
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    a56c:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
	memcpy(smp->preq + 1, req, sizeof(*req));
    a570:	f104 00ba 	add.w	r0, r4, #186	; 0xba
    a574:	f007 fdf3 	bl	1215e <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    a578:	2302      	movs	r3, #2
    a57a:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
	rsp->auth_req = get_auth(conn, req->auth_req);
    a57e:	f898 0002 	ldrb.w	r0, [r8, #2]
    a582:	f7ff fd4f 	bl	a024 <get_auth.isra.0>
    a586:	f884 00c3 	strb.w	r0, [r4, #195]	; 0xc3
    a58a:	4605      	mov	r5, r0
	rsp->io_capability = get_io_capa();
    a58c:	f7ff fcf6 	bl	9f7c <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    a590:	4bb5      	ldr	r3, [pc, #724]	; (a868 <smp_pairing_req+0x358>)
	rsp->io_capability = get_io_capa();
    a592:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    a596:	781b      	ldrb	r3, [r3, #0]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    a598:	072a      	lsls	r2, r5, #28
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    a59a:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    a59e:	f04f 0310 	mov.w	r3, #16
    a5a2:	f884 30c4 	strb.w	r3, [r4, #196]	; 0xc4
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    a5a6:	f898 3004 	ldrb.w	r3, [r8, #4]
    a5aa:	f003 0303 	and.w	r3, r3, #3
    a5ae:	f884 30c5 	strb.w	r3, [r4, #197]	; 0xc5
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    a5b2:	f898 3005 	ldrb.w	r3, [r8, #5]
    a5b6:	f003 0301 	and.w	r3, r3, #1
    a5ba:	f884 30c6 	strb.w	r3, [r4, #198]	; 0xc6
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    a5be:	d510      	bpl.n	a5e2 <smp_pairing_req+0xd2>
    a5c0:	f898 3002 	ldrb.w	r3, [r8, #2]
    a5c4:	071b      	lsls	r3, r3, #28
    a5c6:	d50c      	bpl.n	a5e2 <smp_pairing_req+0xd2>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    a5c8:	2105      	movs	r1, #5
    a5ca:	4630      	mov	r0, r6
    a5cc:	f009 f941 	bl	13852 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
    a5d0:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
    a5d4:	f003 0302 	and.w	r3, r3, #2
    a5d8:	f884 30c5 	strb.w	r3, [r4, #197]	; 0xc5
		rsp->resp_key_dist &= SEND_KEYS_SC;
    a5dc:	2300      	movs	r3, #0
    a5de:	f884 30c6 	strb.w	r3, [r4, #198]	; 0xc6
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    a5e2:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    a5e6:	069d      	lsls	r5, r3, #26
    a5e8:	d507      	bpl.n	a5fa <smp_pairing_req+0xea>
    a5ea:	f898 3002 	ldrb.w	r3, [r8, #2]
    a5ee:	0698      	lsls	r0, r3, #26
    a5f0:	d503      	bpl.n	a5fa <smp_pairing_req+0xea>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    a5f2:	2113      	movs	r1, #19
    a5f4:	4630      	mov	r0, r6
    a5f6:	f009 f92c 	bl	13852 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
    a5fa:	f894 30c6 	ldrb.w	r3, [r4, #198]	; 0xc6
    a5fe:	f884 3198 	strb.w	r3, [r4, #408]	; 0x198
	smp->remote_dist = rsp->init_key_dist;
    a602:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
    a606:	f884 3199 	strb.w	r3, [r4, #409]	; 0x199
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    a60a:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    a60e:	07d9      	lsls	r1, r3, #31
    a610:	d507      	bpl.n	a622 <smp_pairing_req+0x112>
    a612:	f898 3002 	ldrb.w	r3, [r8, #2]
    a616:	07da      	lsls	r2, r3, #31
    a618:	d503      	bpl.n	a622 <smp_pairing_req+0x112>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    a61a:	210c      	movs	r1, #12
    a61c:	4630      	mov	r0, r6
    a61e:	f009 f918 	bl	13852 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    a622:	2103      	movs	r1, #3
    a624:	4630      	mov	r0, r6
    a626:	f009 f914 	bl	13852 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    a62a:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
    a62c:	f898 5000 	ldrb.w	r5, [r8]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    a630:	f009 f9dd 	bl	139ee <atomic_test_bit>
    a634:	f8d4 8000 	ldr.w	r8, [r4]
    a638:	2800      	cmp	r0, #0
    a63a:	d14b      	bne.n	a6d4 <smp_pairing_req+0x1c4>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    a63c:	2d04      	cmp	r5, #4
    a63e:	d816      	bhi.n	a66e <smp_pairing_req+0x15e>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    a640:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    a644:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    a648:	4318      	orrs	r0, r3
    a64a:	f010 0004 	ands.w	r0, r0, #4
    a64e:	d00e      	beq.n	a66e <smp_pairing_req+0x15e>
	method = gen_method_legacy[remote_io][get_io_capa()];
    a650:	f7ff fc94 	bl	9f7c <get_io_capa>
    a654:	4b85      	ldr	r3, [pc, #532]	; (a86c <smp_pairing_req+0x35c>)
    a656:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    a65a:	441d      	add	r5, r3
    a65c:	5c28      	ldrb	r0, [r5, r0]
	if (method == PASSKEY_ROLE) {
    a65e:	2804      	cmp	r0, #4
    a660:	d105      	bne.n	a66e <smp_pairing_req+0x15e>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    a662:	f898 3003 	ldrb.w	r3, [r8, #3]
			method = PASSKEY_INPUT;
    a666:	2b00      	cmp	r3, #0
    a668:	bf0c      	ite	eq
    a66a:	2002      	moveq	r0, #2
    a66c:	2001      	movne	r0, #1
	smp->method = get_pair_method(smp, req->io_capability);
    a66e:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
	if (!conn->le.keys) {
    a672:	f8d8 30a8 	ldr.w	r3, [r8, #168]	; 0xa8
    a676:	b93b      	cbnz	r3, a688 <smp_pairing_req+0x178>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    a678:	f898 0008 	ldrb.w	r0, [r8, #8]
    a67c:	f108 017c 	add.w	r1, r8, #124	; 0x7c
    a680:	f000 fef4 	bl	b46c <bt_keys_get_addr>
    a684:	f8c8 00a8 	str.w	r0, [r8, #168]	; 0xa8
	if (!conn->le.keys ||
    a688:	f8d8 20a8 	ldr.w	r2, [r8, #168]	; 0xa8
    a68c:	2a00      	cmp	r2, #0
    a68e:	d142      	bne.n	a716 <smp_pairing_req+0x206>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    a690:	2105      	movs	r1, #5
    a692:	4630      	mov	r0, r6
    a694:	f009 f9ab 	bl	139ee <atomic_test_bit>
    a698:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    a69c:	2800      	cmp	r0, #0
    a69e:	f040 80b9 	bne.w	a814 <smp_pairing_req+0x304>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    a6a2:	461d      	mov	r5, r3
    a6a4:	2b00      	cmp	r3, #0
    a6a6:	d154      	bne.n	a752 <smp_pairing_req+0x242>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    a6a8:	210e      	movs	r1, #14
    a6aa:	4630      	mov	r0, r6
    a6ac:	f009 f99f 	bl	139ee <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    a6b0:	2800      	cmp	r0, #0
    a6b2:	d14e      	bne.n	a752 <smp_pairing_req+0x242>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    a6b4:	4f6e      	ldr	r7, [pc, #440]	; (a870 <smp_pairing_req+0x360>)
    a6b6:	683b      	ldr	r3, [r7, #0]
    a6b8:	2b00      	cmp	r3, #0
    a6ba:	d04a      	beq.n	a752 <smp_pairing_req+0x242>
	    bt_auth && bt_auth->pairing_confirm) {
    a6bc:	695b      	ldr	r3, [r3, #20]
    a6be:	2b00      	cmp	r3, #0
    a6c0:	d047      	beq.n	a752 <smp_pairing_req+0x242>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    a6c2:	4630      	mov	r0, r6
    a6c4:	2109      	movs	r1, #9
    a6c6:	f009 f8c4 	bl	13852 <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    a6ca:	683b      	ldr	r3, [r7, #0]
    a6cc:	6820      	ldr	r0, [r4, #0]
    a6ce:	695b      	ldr	r3, [r3, #20]
    a6d0:	4798      	blx	r3
		return 0;
    a6d2:	e728      	b.n	a526 <smp_pairing_req+0x16>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
    a6d4:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    a6d8:	f894 20c3 	ldrb.w	r2, [r4, #195]	; 0xc3
    a6dc:	ea00 0302 	and.w	r3, r0, r2
    a6e0:	071b      	lsls	r3, r3, #28
    a6e2:	d506      	bpl.n	a6f2 <smp_pairing_req+0x1e2>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    a6e4:	f894 10c2 	ldrb.w	r1, [r4, #194]	; 0xc2
    a6e8:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
    a6ec:	430b      	orrs	r3, r1
    a6ee:	07d9      	lsls	r1, r3, #31
    a6f0:	d40d      	bmi.n	a70e <smp_pairing_req+0x1fe>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    a6f2:	2d04      	cmp	r5, #4
    a6f4:	d80d      	bhi.n	a712 <smp_pairing_req+0x202>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    a6f6:	4310      	orrs	r0, r2
    a6f8:	f010 0004 	ands.w	r0, r0, #4
    a6fc:	d0b7      	beq.n	a66e <smp_pairing_req+0x15e>
	return gen_method_sc[remote_io][get_io_capa()];
    a6fe:	f7ff fc3d 	bl	9f7c <get_io_capa>
    a702:	4b5c      	ldr	r3, [pc, #368]	; (a874 <smp_pairing_req+0x364>)
    a704:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    a708:	441d      	add	r5, r3
    a70a:	5c28      	ldrb	r0, [r5, r0]
    a70c:	e7af      	b.n	a66e <smp_pairing_req+0x15e>
			return LE_SC_OOB;
    a70e:	2005      	movs	r0, #5
    a710:	e7ad      	b.n	a66e <smp_pairing_req+0x15e>
		return JUST_WORKS;
    a712:	2000      	movs	r0, #0
    a714:	e7ab      	b.n	a66e <smp_pairing_req+0x15e>
	    !(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
    a716:	89d1      	ldrh	r1, [r2, #14]
	if (!conn->le.keys ||
    a718:	f011 0f24 	tst.w	r1, #36	; 0x24
    a71c:	d0b8      	beq.n	a690 <smp_pairing_req+0x180>
	return MIN(req->max_key_size, rsp->max_key_size);
    a71e:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
    a722:	f894 00bd 	ldrb.w	r0, [r4, #189]	; 0xbd
	if (conn->le.keys->enc_size > get_encryption_key_size(smp)) {
    a726:	7b12      	ldrb	r2, [r2, #12]
    a728:	4283      	cmp	r3, r0
    a72a:	bf28      	it	cs
    a72c:	4603      	movcs	r3, r0
    a72e:	429a      	cmp	r2, r3
    a730:	d901      	bls.n	a736 <smp_pairing_req+0x226>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
    a732:	2503      	movs	r5, #3
    a734:	e6f7      	b.n	a526 <smp_pairing_req+0x16>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    a736:	068a      	lsls	r2, r1, #26
    a738:	d404      	bmi.n	a744 <smp_pairing_req+0x234>
	if (!IS_ENABLED(CONFIG_BT_SMP_ALLOW_UNAUTH_OVERWRITE) &&
    a73a:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    a73e:	2b00      	cmp	r3, #0
    a740:	d1a6      	bne.n	a690 <smp_pairing_req+0x180>
    a742:	e7f6      	b.n	a732 <smp_pairing_req+0x222>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    a744:	2105      	movs	r1, #5
    a746:	4630      	mov	r0, r6
    a748:	f009 f951 	bl	139ee <atomic_test_bit>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    a74c:	2800      	cmp	r0, #0
    a74e:	d1f4      	bne.n	a73a <smp_pairing_req+0x22a>
    a750:	e7ef      	b.n	a732 <smp_pairing_req+0x222>
	ret = send_pairing_rsp(smp);
    a752:	4620      	mov	r0, r4
    a754:	f009 f98a 	bl	13a6c <send_pairing_rsp>
	if (ret) {
    a758:	4605      	mov	r5, r0
    a75a:	2800      	cmp	r0, #0
    a75c:	f47f aee3 	bne.w	a526 <smp_pairing_req+0x16>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    a760:	2103      	movs	r1, #3
    a762:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    a766:	f009 f874 	bl	13852 <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
    a76a:	6825      	ldr	r5, [r4, #0]
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
    a76c:	7a28      	ldrb	r0, [r5, #8]
    a76e:	f105 017c 	add.w	r1, r5, #124	; 0x7c
    a772:	f000 ff0b 	bl	b58c <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
    a776:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
    a77a:	b148      	cbz	r0, a790 <smp_pairing_req+0x280>
    a77c:	7b43      	ldrb	r3, [r0, #13]
    a77e:	07db      	lsls	r3, r3, #31
    a780:	d506      	bpl.n	a790 <smp_pairing_req+0x280>
    a782:	b92a      	cbnz	r2, a790 <smp_pairing_req+0x280>
		BT_ERR("JustWorks failed, authenticated keys present");
    a784:	2145      	movs	r1, #69	; 0x45
    a786:	483c      	ldr	r0, [pc, #240]	; (a878 <smp_pairing_req+0x368>)
    a788:	f006 fb28 	bl	10ddc <printk>
				return BT_SMP_ERR_UNSPECIFIED;
    a78c:	2208      	movs	r2, #8
    a78e:	e005      	b.n	a79c <smp_pairing_req+0x28c>
	switch (smp->method) {
    a790:	2a01      	cmp	r2, #1
    a792:	d030      	beq.n	a7f6 <smp_pairing_req+0x2e6>
    a794:	2a02      	cmp	r2, #2
    a796:	d003      	beq.n	a7a0 <smp_pairing_req+0x290>
    a798:	2a00      	cmp	r2, #0
    a79a:	d136      	bne.n	a80a <smp_pairing_req+0x2fa>
	return legacy_request_tk(smp);
    a79c:	4615      	mov	r5, r2
    a79e:	e6c2      	b.n	a526 <smp_pairing_req+0x16>
			if (bt_rand(&passkey, sizeof(passkey))) {
    a7a0:	2104      	movs	r1, #4
    a7a2:	eb0d 0001 	add.w	r0, sp, r1
    a7a6:	f7fb fb21 	bl	5dec <bt_rand>
    a7aa:	2800      	cmp	r0, #0
    a7ac:	d1ee      	bne.n	a78c <smp_pairing_req+0x27c>
			passkey %= 1000000;
    a7ae:	9901      	ldr	r1, [sp, #4]
    a7b0:	4a32      	ldr	r2, [pc, #200]	; (a87c <smp_pairing_req+0x36c>)
		if (bt_auth && bt_auth->passkey_display) {
    a7b2:	4f2f      	ldr	r7, [pc, #188]	; (a870 <smp_pairing_req+0x360>)
			passkey %= 1000000;
    a7b4:	fbb1 f3f2 	udiv	r3, r1, r2
    a7b8:	fb02 1313 	mls	r3, r2, r3, r1
    a7bc:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
    a7be:	683b      	ldr	r3, [r7, #0]
    a7c0:	b153      	cbz	r3, a7d8 <smp_pairing_req+0x2c8>
    a7c2:	681b      	ldr	r3, [r3, #0]
    a7c4:	b143      	cbz	r3, a7d8 <smp_pairing_req+0x2c8>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    a7c6:	210a      	movs	r1, #10
    a7c8:	4630      	mov	r0, r6
    a7ca:	f009 f842 	bl	13852 <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
    a7ce:	683b      	ldr	r3, [r7, #0]
    a7d0:	4628      	mov	r0, r5
    a7d2:	681b      	ldr	r3, [r3, #0]
    a7d4:	9901      	ldr	r1, [sp, #4]
    a7d6:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
    a7d8:	9b01      	ldr	r3, [sp, #4]
	dst[1] = val >> 8;
    a7da:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    a7de:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
	sys_put_le16(val >> 16, &dst[2]);
    a7e2:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    a7e4:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
	dst[1] = val >> 8;
    a7e8:	0a1b      	lsrs	r3, r3, #8
    a7ea:	f884 20f8 	strb.w	r2, [r4, #248]	; 0xf8
    a7ee:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
	return 0;
    a7f2:	2200      	movs	r2, #0
		break;
    a7f4:	e7d2      	b.n	a79c <smp_pairing_req+0x28c>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    a7f6:	4630      	mov	r0, r6
    a7f8:	2109      	movs	r1, #9
    a7fa:	f009 f82a 	bl	13852 <atomic_set_bit>
		bt_auth->passkey_entry(conn);
    a7fe:	4b1c      	ldr	r3, [pc, #112]	; (a870 <smp_pairing_req+0x360>)
    a800:	4628      	mov	r0, r5
    a802:	681b      	ldr	r3, [r3, #0]
    a804:	685b      	ldr	r3, [r3, #4]
    a806:	4798      	blx	r3
    a808:	e7f3      	b.n	a7f2 <smp_pairing_req+0x2e2>
		BT_ERR("Unknown pairing method (%u)", smp->method);
    a80a:	2145      	movs	r1, #69	; 0x45
    a80c:	481c      	ldr	r0, [pc, #112]	; (a880 <smp_pairing_req+0x370>)
    a80e:	f006 fae5 	bl	10ddc <printk>
		return BT_SMP_ERR_UNSPECIFIED;
    a812:	e7bb      	b.n	a78c <smp_pairing_req+0x27c>
	if ((IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) ||
    a814:	7aba      	ldrb	r2, [r7, #10]
    a816:	461d      	mov	r5, r3
    a818:	2a04      	cmp	r2, #4
    a81a:	d115      	bne.n	a848 <smp_pairing_req+0x338>
	     conn->required_sec_level == BT_SECURITY_L4) &&
    a81c:	2b00      	cmp	r3, #0
    a81e:	d088      	beq.n	a732 <smp_pairing_req+0x222>
	return MIN(req->max_key_size, rsp->max_key_size);
    a820:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
    a824:	f894 20c4 	ldrb.w	r2, [r4, #196]	; 0xc4
	     conn->required_sec_level == BT_SECURITY_L4) &&
    a828:	4293      	cmp	r3, r2
    a82a:	bf28      	it	cs
    a82c:	4613      	movcs	r3, r2
    a82e:	2b10      	cmp	r3, #16
    a830:	f47f ae78 	bne.w	a524 <smp_pairing_req+0x14>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    a834:	210c      	movs	r1, #12
    a836:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    a83a:	f009 f80a 	bl	13852 <atomic_set_bit>
	return send_pairing_rsp(smp);
    a83e:	4620      	mov	r0, r4
    a840:	f009 f914 	bl	13a6c <send_pairing_rsp>
    a844:	4605      	mov	r5, r0
    a846:	e66e      	b.n	a526 <smp_pairing_req+0x16>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    a848:	2b00      	cmp	r3, #0
    a84a:	d1f3      	bne.n	a834 <smp_pairing_req+0x324>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    a84c:	210e      	movs	r1, #14
    a84e:	4630      	mov	r0, r6
    a850:	f009 f8cd 	bl	139ee <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    a854:	2800      	cmp	r0, #0
    a856:	d1ed      	bne.n	a834 <smp_pairing_req+0x324>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    a858:	4f05      	ldr	r7, [pc, #20]	; (a870 <smp_pairing_req+0x360>)
    a85a:	683b      	ldr	r3, [r7, #0]
    a85c:	2b00      	cmp	r3, #0
    a85e:	d0e9      	beq.n	a834 <smp_pairing_req+0x324>
	    bt_auth && bt_auth->pairing_confirm) {
    a860:	695b      	ldr	r3, [r3, #20]
    a862:	2b00      	cmp	r3, #0
    a864:	d0e6      	beq.n	a834 <smp_pairing_req+0x324>
    a866:	e72c      	b.n	a6c2 <smp_pairing_req+0x1b2>
    a868:	20002010 	.word	0x20002010
    a86c:	00018ff0 	.word	0x00018ff0
    a870:	20000d30 	.word	0x20000d30
    a874:	00019009 	.word	0x00019009
    a878:	00018daf 	.word	0x00018daf
    a87c:	000f4240 	.word	0x000f4240
    a880:	00018de1 	.word	0x00018de1

0000a884 <smp_pairing_complete>:
{
    a884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a888:	4604      	mov	r4, r0
	if (!status) {
    a88a:	460d      	mov	r5, r1
    a88c:	4f24      	ldr	r7, [pc, #144]	; (a920 <smp_pairing_complete+0x9c>)
    a88e:	f100 08b4 	add.w	r8, r0, #180	; 0xb4
    a892:	b9b1      	cbnz	r1, a8c2 <smp_pairing_complete+0x3e>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    a894:	210c      	movs	r1, #12
    a896:	4640      	mov	r0, r8
    a898:	f009 f8a9 	bl	139ee <atomic_test_bit>
		if (bond_flag) {
    a89c:	4605      	mov	r5, r0
    a89e:	b120      	cbz	r0, a8aa <smp_pairing_complete+0x26>
			bt_keys_store(smp->chan.chan.conn->le.keys);
    a8a0:	6823      	ldr	r3, [r4, #0]
    a8a2:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
    a8a6:	f000 ff1b 	bl	b6e0 <bt_keys_store>
		if (bt_auth && bt_auth->pairing_complete) {
    a8aa:	683b      	ldr	r3, [r7, #0]
    a8ac:	b123      	cbz	r3, a8b8 <smp_pairing_complete+0x34>
    a8ae:	699b      	ldr	r3, [r3, #24]
    a8b0:	b113      	cbz	r3, a8b8 <smp_pairing_complete+0x34>
			bt_auth->pairing_complete(smp->chan.chan.conn,
    a8b2:	4629      	mov	r1, r5
			bt_auth->pairing_failed(smp->chan.chan.conn, auth_err);
    a8b4:	6820      	ldr	r0, [r4, #0]
    a8b6:	4798      	blx	r3
	smp_reset(smp);
    a8b8:	4620      	mov	r0, r4
}
    a8ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	smp_reset(smp);
    a8be:	f009 b92b 	b.w	13b18 <smp_reset>
	switch (smp_err) {
    a8c2:	1e4b      	subs	r3, r1, #1
    a8c4:	b2db      	uxtb	r3, r3
    a8c6:	2b0d      	cmp	r3, #13
    a8c8:	bf96      	itet	ls
    a8ca:	4a16      	ldrls	r2, [pc, #88]	; (a924 <smp_pairing_complete+0xa0>)
	if (!status) {
    a8cc:	2608      	movhi	r6, #8
    a8ce:	5cd6      	ldrbls	r6, [r2, r3]
		if (smp->chan.chan.conn->le.keys &&
    a8d0:	6803      	ldr	r3, [r0, #0]
    a8d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    a8d6:	b153      	cbz	r3, a8ee <smp_pairing_complete+0x6a>
    a8d8:	7b1b      	ldrb	r3, [r3, #12]
    a8da:	b9d3      	cbnz	r3, a912 <smp_pairing_complete+0x8e>
			bt_keys_clear(smp->chan.chan.conn->le.keys);
    a8dc:	6823      	ldr	r3, [r4, #0]
    a8de:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
    a8e2:	f000 fe63 	bl	b5ac <bt_keys_clear>
			smp->chan.chan.conn->le.keys = NULL;
    a8e6:	2200      	movs	r2, #0
    a8e8:	6823      	ldr	r3, [r4, #0]
    a8ea:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    a8ee:	2102      	movs	r1, #2
    a8f0:	4640      	mov	r0, r8
    a8f2:	f009 f87c 	bl	139ee <atomic_test_bit>
    a8f6:	b920      	cbnz	r0, a902 <smp_pairing_complete+0x7e>
			bt_conn_security_changed(smp->chan.chan.conn, status,
    a8f8:	4632      	mov	r2, r6
    a8fa:	4629      	mov	r1, r5
    a8fc:	6820      	ldr	r0, [r4, #0]
    a8fe:	f7fb fc09 	bl	6114 <bt_conn_security_changed>
		if (bt_auth && bt_auth->pairing_failed) {
    a902:	683b      	ldr	r3, [r7, #0]
    a904:	2b00      	cmp	r3, #0
    a906:	d0d7      	beq.n	a8b8 <smp_pairing_complete+0x34>
    a908:	69db      	ldr	r3, [r3, #28]
    a90a:	2b00      	cmp	r3, #0
    a90c:	d0d4      	beq.n	a8b8 <smp_pairing_complete+0x34>
			bt_auth->pairing_failed(smp->chan.chan.conn, auth_err);
    a90e:	4631      	mov	r1, r6
    a910:	e7d0      	b.n	a8b4 <smp_pairing_complete+0x30>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
    a912:	2102      	movs	r1, #2
    a914:	4640      	mov	r0, r8
    a916:	f009 f86a 	bl	139ee <atomic_test_bit>
		    (!smp->chan.chan.conn->le.keys->enc_size ||
    a91a:	2800      	cmp	r0, #0
    a91c:	d1de      	bne.n	a8dc <smp_pairing_complete+0x58>
    a91e:	e7e6      	b.n	a8ee <smp_pairing_complete+0x6a>
    a920:	20000d30 	.word	0x20000d30
    a924:	00018fe2 	.word	0x00018fe2

0000a928 <bt_smp_dhkey_ready>:
{
    a928:	b510      	push	{r4, lr}
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    a92a:	2107      	movs	r1, #7
{
    a92c:	4604      	mov	r4, r0
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    a92e:	4816      	ldr	r0, [pc, #88]	; (a988 <bt_smp_dhkey_ready+0x60>)
    a930:	f009 f8de 	bl	13af0 <atomic_test_and_clear_bit>
    a934:	b338      	cbz	r0, a986 <bt_smp_dhkey_ready+0x5e>
	if (!dhkey) {
    a936:	b92c      	cbnz	r4, a944 <bt_smp_dhkey_ready+0x1c>
		smp_error(smp, BT_SMP_ERR_DHKEY_CHECK_FAILED);
    a938:	210b      	movs	r1, #11
}
    a93a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
    a93e:	4813      	ldr	r0, [pc, #76]	; (a98c <bt_smp_dhkey_ready+0x64>)
    a940:	f009 b90d 	b.w	13b5e <smp_error>
	memcpy(smp->dhkey, dhkey, 32);
    a944:	4621      	mov	r1, r4
    a946:	2220      	movs	r2, #32
    a948:	4811      	ldr	r0, [pc, #68]	; (a990 <bt_smp_dhkey_ready+0x68>)
    a94a:	f007 fc08 	bl	1215e <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    a94e:	2109      	movs	r1, #9
    a950:	480d      	ldr	r0, [pc, #52]	; (a988 <bt_smp_dhkey_ready+0x60>)
    a952:	f009 f84c 	bl	139ee <atomic_test_bit>
    a956:	b128      	cbz	r0, a964 <bt_smp_dhkey_ready+0x3c>
}
    a958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    a95c:	2108      	movs	r1, #8
    a95e:	480a      	ldr	r0, [pc, #40]	; (a988 <bt_smp_dhkey_ready+0x60>)
    a960:	f008 bf77 	b.w	13852 <atomic_set_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
    a964:	210f      	movs	r1, #15
    a966:	4808      	ldr	r0, [pc, #32]	; (a988 <bt_smp_dhkey_ready+0x60>)
    a968:	f009 f841 	bl	139ee <atomic_test_bit>
    a96c:	2800      	cmp	r0, #0
    a96e:	d1f3      	bne.n	a958 <bt_smp_dhkey_ready+0x30>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
    a970:	2108      	movs	r1, #8
    a972:	4805      	ldr	r0, [pc, #20]	; (a988 <bt_smp_dhkey_ready+0x60>)
    a974:	f009 f83b 	bl	139ee <atomic_test_bit>
    a978:	b128      	cbz	r0, a986 <bt_smp_dhkey_ready+0x5e>
		err = compute_and_check_and_send_slave_dhcheck(smp);
    a97a:	4804      	ldr	r0, [pc, #16]	; (a98c <bt_smp_dhkey_ready+0x64>)
    a97c:	f7ff fbca 	bl	a114 <compute_and_check_and_send_slave_dhcheck>
		if (err) {
    a980:	4601      	mov	r1, r0
    a982:	2800      	cmp	r0, #0
    a984:	d1d9      	bne.n	a93a <bt_smp_dhkey_ready+0x12>
}
    a986:	bd10      	pop	{r4, pc}
    a988:	200010c0 	.word	0x200010c0
    a98c:	2000100c 	.word	0x2000100c
    a990:	20001153 	.word	0x20001153

0000a994 <bt_smp_recv>:
{
    a994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    a996:	898b      	ldrh	r3, [r1, #12]
{
    a998:	4604      	mov	r4, r0
    a99a:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    a99c:	b92b      	cbnz	r3, a9aa <bt_smp_recv+0x16>
		BT_ERR("Too small SMP PDU received");
    a99e:	2145      	movs	r1, #69	; 0x45
    a9a0:	4825      	ldr	r0, [pc, #148]	; (aa38 <bt_smp_recv+0xa4>)
    a9a2:	f006 fa1b 	bl	10ddc <printk>
}
    a9a6:	2000      	movs	r0, #0
    a9a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    a9aa:	2101      	movs	r1, #1
    a9ac:	f105 0008 	add.w	r0, r5, #8
    a9b0:	f001 f9b0 	bl	bd14 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    a9b4:	2104      	movs	r1, #4
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    a9b6:	4606      	mov	r6, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    a9b8:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    a9bc:	f009 f817 	bl	139ee <atomic_test_bit>
    a9c0:	7832      	ldrb	r2, [r6, #0]
    a9c2:	b120      	cbz	r0, a9ce <bt_smp_recv+0x3a>
		BT_WARN("SMP command (code 0x%02x) received after timeout",
    a9c4:	2157      	movs	r1, #87	; 0x57
    a9c6:	481d      	ldr	r0, [pc, #116]	; (aa3c <bt_smp_recv+0xa8>)
    a9c8:	f006 fa08 	bl	10ddc <printk>
		return 0;
    a9cc:	e7eb      	b.n	a9a6 <bt_smp_recv+0x12>
	if (hdr->code >= ARRAY_SIZE(handlers) || !handlers[hdr->code].func) {
    a9ce:	2a0d      	cmp	r2, #13
    a9d0:	d803      	bhi.n	a9da <bt_smp_recv+0x46>
    a9d2:	4f1b      	ldr	r7, [pc, #108]	; (aa40 <bt_smp_recv+0xac>)
    a9d4:	f857 3032 	ldr.w	r3, [r7, r2, lsl #3]
    a9d8:	b943      	cbnz	r3, a9ec <bt_smp_recv+0x58>
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
    a9da:	2157      	movs	r1, #87	; 0x57
    a9dc:	4819      	ldr	r0, [pc, #100]	; (aa44 <bt_smp_recv+0xb0>)
    a9de:	f006 f9fd 	bl	10ddc <printk>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    a9e2:	2107      	movs	r1, #7
		smp_error(smp, err);
    a9e4:	4620      	mov	r0, r4
    a9e6:	f009 f8ba 	bl	13b5e <smp_error>
    a9ea:	e7dc      	b.n	a9a6 <bt_smp_recv+0x12>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
    a9ec:	4611      	mov	r1, r2
    a9ee:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    a9f2:	f009 f87d 	bl	13af0 <atomic_test_and_clear_bit>
    a9f6:	7833      	ldrb	r3, [r6, #0]
    a9f8:	b948      	cbnz	r0, aa0e <bt_smp_recv+0x7a>
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
    a9fa:	461a      	mov	r2, r3
    a9fc:	2157      	movs	r1, #87	; 0x57
    a9fe:	4812      	ldr	r0, [pc, #72]	; (aa48 <bt_smp_recv+0xb4>)
    aa00:	f006 f9ec 	bl	10ddc <printk>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    aa04:	7833      	ldrb	r3, [r6, #0]
    aa06:	2b05      	cmp	r3, #5
    aa08:	d0cd      	beq.n	a9a6 <bt_smp_recv+0x12>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    aa0a:	2108      	movs	r1, #8
    aa0c:	e7ea      	b.n	a9e4 <bt_smp_recv+0x50>
	if (buf->len != handlers[hdr->code].expect_len) {
    aa0e:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    aa12:	89aa      	ldrh	r2, [r5, #12]
    aa14:	7909      	ldrb	r1, [r1, #4]
    aa16:	4291      	cmp	r1, r2
    aa18:	d005      	beq.n	aa26 <bt_smp_recv+0x92>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    aa1a:	2145      	movs	r1, #69	; 0x45
    aa1c:	480b      	ldr	r0, [pc, #44]	; (aa4c <bt_smp_recv+0xb8>)
    aa1e:	f006 f9dd 	bl	10ddc <printk>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    aa22:	210a      	movs	r1, #10
    aa24:	e7de      	b.n	a9e4 <bt_smp_recv+0x50>
	err = handlers[hdr->code].func(smp, buf);
    aa26:	4629      	mov	r1, r5
    aa28:	4620      	mov	r0, r4
    aa2a:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
    aa2e:	4798      	blx	r3
	if (err) {
    aa30:	4601      	mov	r1, r0
    aa32:	2800      	cmp	r0, #0
    aa34:	d0b7      	beq.n	a9a6 <bt_smp_recv+0x12>
    aa36:	e7d5      	b.n	a9e4 <bt_smp_recv+0x50>
    aa38:	00018e02 	.word	0x00018e02
    aa3c:	00018e22 	.word	0x00018e22
    aa40:	00015d14 	.word	0x00015d14
    aa44:	00018e58 	.word	0x00018e58
    aa48:	00018e77 	.word	0x00018e77
    aa4c:	000188cc 	.word	0x000188cc

0000aa50 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
    aa50:	4b11      	ldr	r3, [pc, #68]	; (aa98 <bt_smp_pkey_ready+0x48>)
{
    aa52:	b510      	push	{r4, lr}
	sc_public_key = pkey;
    aa54:	6018      	str	r0, [r3, #0]
	if (!pkey) {
    aa56:	b928      	cbnz	r0, aa64 <bt_smp_pkey_ready+0x14>
}
    aa58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Public key not available");
    aa5c:	2157      	movs	r1, #87	; 0x57
    aa5e:	480f      	ldr	r0, [pc, #60]	; (aa9c <bt_smp_pkey_ready+0x4c>)
    aa60:	f006 b9bc 	b.w	10ddc <printk>
	z_impl_k_sem_give(sem);
    aa64:	480e      	ldr	r0, [pc, #56]	; (aaa0 <bt_smp_pkey_ready+0x50>)
    aa66:	f004 ff2f 	bl	f8c8 <z_impl_k_sem_give>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    aa6a:	4c0e      	ldr	r4, [pc, #56]	; (aaa4 <bt_smp_pkey_ready+0x54>)
    aa6c:	e8d4 3faf 	lda	r3, [r4]
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    aa70:	065b      	lsls	r3, r3, #25
    aa72:	d510      	bpl.n	aa96 <bt_smp_pkey_ready+0x46>
	err = sc_send_public_key(smp);
    aa74:	f1a4 00b4 	sub.w	r0, r4, #180	; 0xb4
    aa78:	f7ff fc30 	bl	a2dc <sc_send_public_key>
	if (err) {
    aa7c:	4601      	mov	r1, r0
    aa7e:	b928      	cbnz	r0, aa8c <bt_smp_pkey_ready+0x3c>
    aa80:	f1a4 00b4 	sub.w	r0, r4, #180	; 0xb4
    aa84:	f7ff fc8c 	bl	a3a0 <smp_public_key_slave.part.0>
		if (err) {
    aa88:	4601      	mov	r1, r0
    aa8a:	b120      	cbz	r0, aa96 <bt_smp_pkey_ready+0x46>
			smp_error(smp, err);
    aa8c:	4806      	ldr	r0, [pc, #24]	; (aaa8 <bt_smp_pkey_ready+0x58>)
}
    aa8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
    aa92:	f009 b864 	b.w	13b5e <smp_error>
}
    aa96:	bd10      	pop	{r4, pc}
    aa98:	200011c8 	.word	0x200011c8
    aa9c:	00018e97 	.word	0x00018e97
    aaa0:	2000055c 	.word	0x2000055c
    aaa4:	200010c0 	.word	0x200010c0
    aaa8:	2000100c 	.word	0x2000100c

0000aaac <smp_pairing_failed>:
{
    aaac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    aaae:	4605      	mov	r5, r0
	struct bt_smp_pairing_fail *req = (void *)buf->data;
    aab0:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    aab2:	f855 7bb4 	ldr.w	r7, [r5], #180
	BT_ERR("reason 0x%x", req->reason);
    aab6:	2145      	movs	r1, #69	; 0x45
{
    aab8:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
    aaba:	7832      	ldrb	r2, [r6, #0]
    aabc:	480e      	ldr	r0, [pc, #56]	; (aaf8 <smp_pairing_failed+0x4c>)
    aabe:	f006 f98d 	bl	10ddc <printk>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    aac2:	2109      	movs	r1, #9
    aac4:	4628      	mov	r0, r5
    aac6:	f009 f813 	bl	13af0 <atomic_test_and_clear_bit>
    aaca:	b140      	cbz	r0, aade <smp_pairing_failed+0x32>
		if (bt_auth && bt_auth->cancel) {
    aacc:	4b0b      	ldr	r3, [pc, #44]	; (aafc <smp_pairing_failed+0x50>)
    aace:	681b      	ldr	r3, [r3, #0]
    aad0:	b963      	cbnz	r3, aaec <smp_pairing_failed+0x40>
	smp_pairing_complete(smp, req->reason);
    aad2:	4620      	mov	r0, r4
    aad4:	7831      	ldrb	r1, [r6, #0]
    aad6:	f7ff fed5 	bl	a884 <smp_pairing_complete>
}
    aada:	2000      	movs	r0, #0
    aadc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
    aade:	210a      	movs	r1, #10
    aae0:	4628      	mov	r0, r5
    aae2:	f009 f805 	bl	13af0 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    aae6:	2800      	cmp	r0, #0
    aae8:	d1f0      	bne.n	aacc <smp_pairing_failed+0x20>
    aaea:	e7f2      	b.n	aad2 <smp_pairing_failed+0x26>
		if (bt_auth && bt_auth->cancel) {
    aaec:	691b      	ldr	r3, [r3, #16]
    aaee:	2b00      	cmp	r3, #0
    aaf0:	d0ef      	beq.n	aad2 <smp_pairing_failed+0x26>
			bt_auth->cancel(conn);
    aaf2:	4638      	mov	r0, r7
    aaf4:	4798      	blx	r3
    aaf6:	e7ec      	b.n	aad2 <smp_pairing_failed+0x26>
    aaf8:	00018eb5 	.word	0x00018eb5
    aafc:	20000d30 	.word	0x20000d30

0000ab00 <smp_timeout>:
{
    ab00:	b510      	push	{r4, lr}
    ab02:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
    ab04:	2145      	movs	r1, #69	; 0x45
    ab06:	4807      	ldr	r0, [pc, #28]	; (ab24 <smp_timeout+0x24>)
    ab08:	f006 f968 	bl	10ddc <printk>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
    ab0c:	f5a4 70ce 	sub.w	r0, r4, #412	; 0x19c
    ab10:	2108      	movs	r1, #8
    ab12:	f7ff feb7 	bl	a884 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    ab16:	f1a4 00e8 	sub.w	r0, r4, #232	; 0xe8
    ab1a:	2104      	movs	r1, #4
}
    ab1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    ab20:	f008 be97 	b.w	13852 <atomic_set_bit>
    ab24:	00018ec6 	.word	0x00018ec6

0000ab28 <smp_master_ident>:
{
    ab28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ab2a:	4604      	mov	r4, r0
    ab2c:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
    ab2e:	f850 5bb4 	ldr.w	r5, [r0], #180
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    ab32:	210c      	movs	r1, #12
    ab34:	f008 ff5b 	bl	139ee <atomic_test_bit>
    ab38:	b320      	cbz	r0, ab84 <smp_master_ident+0x5c>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    ab3a:	f105 077c 	add.w	r7, r5, #124	; 0x7c
    ab3e:	7a29      	ldrb	r1, [r5, #8]
    ab40:	463a      	mov	r2, r7
    ab42:	2004      	movs	r0, #4
		struct bt_smp_master_ident *req = (void *)buf->data;
    ab44:	689e      	ldr	r6, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    ab46:	f009 fa2f 	bl	13fa8 <bt_keys_get_type>
		if (!keys) {
    ab4a:	4605      	mov	r5, r0
    ab4c:	b948      	cbnz	r0, ab62 <smp_master_ident+0x3a>
			BT_ERR("Unable to get keys for %s",
    ab4e:	4638      	mov	r0, r7
    ab50:	f7f8 ff0e 	bl	3970 <bt_addr_le_str_real>
    ab54:	2145      	movs	r1, #69	; 0x45
    ab56:	4602      	mov	r2, r0
    ab58:	4815      	ldr	r0, [pc, #84]	; (abb0 <smp_master_ident+0x88>)
    ab5a:	f006 f93f 	bl	10ddc <printk>
			return BT_SMP_ERR_UNSPECIFIED;
    ab5e:	2008      	movs	r0, #8
}
    ab60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
    ab62:	2202      	movs	r2, #2
    ab64:	4631      	mov	r1, r6
    ab66:	3018      	adds	r0, #24
    ab68:	f007 faf9 	bl	1215e <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
    ab6c:	2208      	movs	r2, #8
    ab6e:	1cb1      	adds	r1, r6, #2
    ab70:	f105 0010 	add.w	r0, r5, #16
    ab74:	f007 faf3 	bl	1215e <memcpy>
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    ab78:	f894 3199 	ldrb.w	r3, [r4, #409]	; 0x199
    ab7c:	f023 0301 	bic.w	r3, r3, #1
    ab80:	f884 3199 	strb.w	r3, [r4, #409]	; 0x199
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    ab84:	f894 3199 	ldrb.w	r3, [r4, #409]	; 0x199
    ab88:	079a      	lsls	r2, r3, #30
    ab8a:	d50d      	bpl.n	aba8 <smp_master_ident+0x80>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    ab8c:	2108      	movs	r1, #8
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    ab8e:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    ab92:	f008 fe5e 	bl	13852 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
    ab96:	f8b4 5198 	ldrh.w	r5, [r4, #408]	; 0x198
    ab9a:	b91d      	cbnz	r5, aba4 <smp_master_ident+0x7c>
		smp_pairing_complete(smp, 0);
    ab9c:	4629      	mov	r1, r5
    ab9e:	4620      	mov	r0, r4
    aba0:	f7ff fe70 	bl	a884 <smp_pairing_complete>
	return 0;
    aba4:	2000      	movs	r0, #0
    aba6:	e7db      	b.n	ab60 <smp_master_ident+0x38>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    aba8:	075b      	lsls	r3, r3, #29
    abaa:	d5f4      	bpl.n	ab96 <smp_master_ident+0x6e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    abac:	210a      	movs	r1, #10
    abae:	e7ee      	b.n	ab8e <smp_master_ident+0x66>
    abb0:	00018d90 	.word	0x00018d90

0000abb4 <smp_ident_sent>:
{
    abb4:	b510      	push	{r4, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
    abb6:	7883      	ldrb	r3, [r0, #2]
    abb8:	2b01      	cmp	r3, #1
    abba:	d121      	bne.n	ac00 <smp_ident_sent+0x4c>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
    abbc:	2106      	movs	r1, #6
    abbe:	f008 f847 	bl	12c50 <bt_l2cap_le_lookup_tx_cid>
		__ASSERT(chan, "No SMP channel found");
    abc2:	4604      	mov	r4, r0
    abc4:	b970      	cbnz	r0, abe4 <smp_ident_sent+0x30>
    abc6:	490f      	ldr	r1, [pc, #60]	; (ac04 <smp_ident_sent+0x50>)
    abc8:	f240 330a 	movw	r3, #778	; 0x30a
    abcc:	4a0e      	ldr	r2, [pc, #56]	; (ac08 <smp_ident_sent+0x54>)
    abce:	480f      	ldr	r0, [pc, #60]	; (ac0c <smp_ident_sent+0x58>)
    abd0:	f006 f904 	bl	10ddc <printk>
    abd4:	480e      	ldr	r0, [pc, #56]	; (ac10 <smp_ident_sent+0x5c>)
    abd6:	f006 f901 	bl	10ddc <printk>
    abda:	f240 310a 	movw	r1, #778	; 0x30a
    abde:	480a      	ldr	r0, [pc, #40]	; (ac08 <smp_ident_sent+0x54>)
    abe0:	f006 fb92 	bl	11308 <assert_post_action>
		smp->local_dist &= ~dist_complete;
    abe4:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
    abe8:	f023 0301 	bic.w	r3, r3, #1
    abec:	f884 3198 	strb.w	r3, [r4, #408]	; 0x198
		if (!smp->local_dist && !smp->remote_dist) {
    abf0:	f8b4 1198 	ldrh.w	r1, [r4, #408]	; 0x198
    abf4:	b921      	cbnz	r1, ac00 <smp_ident_sent+0x4c>
			smp_pairing_complete(smp, 0);
    abf6:	4620      	mov	r0, r4
}
    abf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_pairing_complete(smp, 0);
    abfc:	f7ff be42 	b.w	a884 <smp_pairing_complete>
}
    ac00:	bd10      	pop	{r4, pc}
    ac02:	bf00      	nop
    ac04:	00018787 	.word	0x00018787
    ac08:	00018ed7 	.word	0x00018ed7
    ac0c:	00016493 	.word	0x00016493
    ac10:	00018f06 	.word	0x00018f06

0000ac14 <bt_smp_encrypt_change>:
{
    ac14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->conn;
    ac18:	4605      	mov	r5, r0
{
    ac1a:	460e      	mov	r6, r1
	struct bt_conn *conn = chan->conn;
    ac1c:	f855 7bb4 	ldr.w	r7, [r5], #180
{
    ac20:	4604      	mov	r4, r0
    ac22:	b089      	sub	sp, #36	; 0x24
	atomic_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    ac24:	2101      	movs	r1, #1
    ac26:	4628      	mov	r0, r5
    ac28:	f008 fe1d 	bl	13866 <atomic_clear_bit>
	if (hci_status) {
    ac2c:	b946      	cbnz	r6, ac40 <bt_smp_encrypt_change+0x2c>
	if (!conn->encrypt) {
    ac2e:	7afb      	ldrb	r3, [r7, #11]
    ac30:	b133      	cbz	r3, ac40 <bt_smp_encrypt_change+0x2c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    ac32:	2103      	movs	r1, #3
    ac34:	f008 fedb 	bl	139ee <atomic_test_bit>
    ac38:	b928      	cbnz	r0, ac46 <bt_smp_encrypt_change+0x32>
		smp_reset(smp);
    ac3a:	4620      	mov	r0, r4
    ac3c:	f008 ff6c 	bl	13b18 <smp_reset>
}
    ac40:	b009      	add	sp, #36	; 0x24
    ac42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    ac46:	2105      	movs	r1, #5
    ac48:	4628      	mov	r0, r5
    ac4a:	f008 fed0 	bl	139ee <atomic_test_bit>
    ac4e:	b198      	cbz	r0, ac78 <bt_smp_encrypt_change+0x64>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    ac50:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
    ac54:	071f      	lsls	r7, r3, #28
    ac56:	d507      	bpl.n	ac68 <bt_smp_encrypt_change+0x54>
    ac58:	f894 3199 	ldrb.w	r3, [r4, #409]	; 0x199
    ac5c:	071e      	lsls	r6, r3, #28
    ac5e:	d503      	bpl.n	ac68 <bt_smp_encrypt_change+0x54>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
    ac60:	2110      	movs	r1, #16
    ac62:	4628      	mov	r0, r5
    ac64:	f008 fdf5 	bl	13852 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
    ac68:	f8b4 3198 	ldrh.w	r3, [r4, #408]	; 0x198
    ac6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    ac70:	f023 0308 	bic.w	r3, r3, #8
    ac74:	f8a4 3198 	strh.w	r3, [r4, #408]	; 0x198
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
    ac78:	f894 3199 	ldrb.w	r3, [r4, #409]	; 0x199
    ac7c:	07d8      	lsls	r0, r3, #31
    ac7e:	d515      	bpl.n	acac <bt_smp_encrypt_change+0x98>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
    ac80:	2106      	movs	r1, #6
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    ac82:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    ac86:	f008 fde4 	bl	13852 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
    ac8a:	4628      	mov	r0, r5
    ac8c:	2102      	movs	r1, #2
    ac8e:	f008 fde0 	bl	13852 <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
    ac92:	6820      	ldr	r0, [r4, #0]
	if (!keys) {
    ac94:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
    ac98:	b983      	cbnz	r3, acbc <bt_smp_encrypt_change+0xa8>
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
    ac9a:	307c      	adds	r0, #124	; 0x7c
    ac9c:	f7f8 fe68 	bl	3970 <bt_addr_le_str_real>
    aca0:	2145      	movs	r1, #69	; 0x45
    aca2:	4602      	mov	r2, r0
    aca4:	483f      	ldr	r0, [pc, #252]	; (ada4 <bt_smp_encrypt_change+0x190>)
    aca6:	f006 f899 	bl	10ddc <printk>
		return BT_SMP_ERR_UNSPECIFIED;
    acaa:	e7c9      	b.n	ac40 <bt_smp_encrypt_change+0x2c>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    acac:	0799      	lsls	r1, r3, #30
    acae:	d501      	bpl.n	acb4 <bt_smp_encrypt_change+0xa0>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    acb0:	2108      	movs	r1, #8
    acb2:	e7e6      	b.n	ac82 <bt_smp_encrypt_change+0x6e>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    acb4:	075a      	lsls	r2, r3, #29
    acb6:	d5e8      	bpl.n	ac8a <bt_smp_encrypt_change+0x76>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    acb8:	210a      	movs	r1, #10
    acba:	e7e2      	b.n	ac82 <bt_smp_encrypt_change+0x6e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    acbc:	2105      	movs	r1, #5
    acbe:	4628      	mov	r0, r5
    acc0:	f008 fe95 	bl	139ee <atomic_test_bit>
    acc4:	4680      	mov	r8, r0
    acc6:	b9a0      	cbnz	r0, acf2 <bt_smp_encrypt_change+0xde>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    acc8:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
    accc:	07db      	lsls	r3, r3, #31
    acce:	d510      	bpl.n	acf2 <bt_smp_encrypt_change+0xde>
	struct bt_keys *keys = conn->le.keys;
    acd0:	6823      	ldr	r3, [r4, #0]
		bt_rand((void *)&rand, sizeof(rand));
    acd2:	211a      	movs	r1, #26
    acd4:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
    acd6:	f8d3 60a8 	ldr.w	r6, [r3, #168]	; 0xa8
		bt_rand((void *)&rand, sizeof(rand));
    acda:	f7fb f887 	bl	5dec <bt_rand>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
    acde:	2106      	movs	r1, #6
    ace0:	4620      	mov	r0, r4
    ace2:	f008 fe8a 	bl	139fa <smp_create_pdu.isra.0>
		if (!buf) {
    ace6:	4607      	mov	r7, r0
    ace8:	b958      	cbnz	r0, ad02 <bt_smp_encrypt_change+0xee>
			BT_ERR("Unable to allocate Encrypt Info buffer");
    acea:	2145      	movs	r1, #69	; 0x45
    acec:	482e      	ldr	r0, [pc, #184]	; (ada8 <bt_smp_encrypt_change+0x194>)
			BT_ERR("Unable to allocate Master Ident buffer");
    acee:	f006 f875 	bl	10ddc <printk>
	if (!smp->local_dist && !smp->remote_dist) {
    acf2:	f8b4 1198 	ldrh.w	r1, [r4, #408]	; 0x198
    acf6:	2900      	cmp	r1, #0
    acf8:	d1a2      	bne.n	ac40 <bt_smp_encrypt_change+0x2c>
		smp_pairing_complete(smp, 0);
    acfa:	4620      	mov	r0, r4
    acfc:	f7ff fdc2 	bl	a884 <smp_pairing_complete>
    ad00:	e79e      	b.n	ac40 <bt_smp_encrypt_change+0x2c>
		info = net_buf_add(buf, sizeof(*info));
    ad02:	2110      	movs	r1, #16
    ad04:	3008      	adds	r0, #8
    ad06:	f001 f827 	bl	bd58 <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
    ad0a:	7b32      	ldrb	r2, [r6, #12]
    ad0c:	a901      	add	r1, sp, #4
		info = net_buf_add(buf, sizeof(*info));
    ad0e:	4681      	mov	r9, r0
		memcpy(info->ltk, rand.key, keys->enc_size);
    ad10:	f007 fa25 	bl	1215e <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    ad14:	7b30      	ldrb	r0, [r6, #12]
    ad16:	280f      	cmp	r0, #15
    ad18:	d805      	bhi.n	ad26 <bt_smp_encrypt_change+0x112>
			(void)memset(info->ltk + keys->enc_size, 0,
    ad1a:	f1c0 0210 	rsb	r2, r0, #16
    ad1e:	4641      	mov	r1, r8
    ad20:	4448      	add	r0, r9
    ad22:	f007 fa47 	bl	121b4 <memset>
		smp_send(smp, buf, NULL, NULL);
    ad26:	4639      	mov	r1, r7
    ad28:	2200      	movs	r2, #0
    ad2a:	4620      	mov	r0, r4
    ad2c:	f7ff f9da 	bl	a0e4 <smp_send.isra.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_MASTER_IDENT,
    ad30:	2107      	movs	r1, #7
    ad32:	4620      	mov	r0, r4
    ad34:	f008 fe61 	bl	139fa <smp_create_pdu.isra.0>
		if (!buf) {
    ad38:	4607      	mov	r7, r0
    ad3a:	b910      	cbnz	r0, ad42 <bt_smp_encrypt_change+0x12e>
			BT_ERR("Unable to allocate Master Ident buffer");
    ad3c:	2145      	movs	r1, #69	; 0x45
    ad3e:	481b      	ldr	r0, [pc, #108]	; (adac <bt_smp_encrypt_change+0x198>)
    ad40:	e7d5      	b.n	acee <bt_smp_encrypt_change+0xda>
		ident = net_buf_add(buf, sizeof(*ident));
    ad42:	210a      	movs	r1, #10
    ad44:	3008      	adds	r0, #8
    ad46:	f001 f807 	bl	bd58 <net_buf_simple_add>
    ad4a:	4680      	mov	r8, r0
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
    ad4c:	2208      	movs	r2, #8
    ad4e:	a905      	add	r1, sp, #20
    ad50:	3002      	adds	r0, #2
    ad52:	f007 fa04 	bl	1215e <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
    ad56:	2202      	movs	r2, #2
    ad58:	a907      	add	r1, sp, #28
    ad5a:	4640      	mov	r0, r8
    ad5c:	f007 f9ff 	bl	1215e <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
    ad60:	4639      	mov	r1, r7
    ad62:	4620      	mov	r0, r4
    ad64:	4a12      	ldr	r2, [pc, #72]	; (adb0 <bt_smp_encrypt_change+0x19c>)
    ad66:	f7ff f9bd 	bl	a0e4 <smp_send.isra.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    ad6a:	210c      	movs	r1, #12
    ad6c:	4628      	mov	r0, r5
    ad6e:	f008 fe3e 	bl	139ee <atomic_test_bit>
    ad72:	2800      	cmp	r0, #0
    ad74:	d0bd      	beq.n	acf2 <bt_smp_encrypt_change+0xde>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    ad76:	4630      	mov	r0, r6
    ad78:	2101      	movs	r1, #1
    ad7a:	f009 f925 	bl	13fc8 <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, rand.key,
    ad7e:	a901      	add	r1, sp, #4
    ad80:	2210      	movs	r2, #16
    ad82:	f106 004a 	add.w	r0, r6, #74	; 0x4a
    ad86:	f007 f9ea 	bl	1215e <memcpy>
			memcpy(keys->slave_ltk.rand, rand.rand,
    ad8a:	a905      	add	r1, sp, #20
    ad8c:	2208      	movs	r2, #8
    ad8e:	f106 0040 	add.w	r0, r6, #64	; 0x40
    ad92:	f007 f9e4 	bl	1215e <memcpy>
			memcpy(keys->slave_ltk.ediv, rand.ediv,
    ad96:	2202      	movs	r2, #2
    ad98:	a907      	add	r1, sp, #28
    ad9a:	f106 0048 	add.w	r0, r6, #72	; 0x48
    ad9e:	f007 f9de 	bl	1215e <memcpy>
    ada2:	e7a6      	b.n	acf2 <bt_smp_encrypt_change+0xde>
    ada4:	00018f1d 	.word	0x00018f1d
    ada8:	00018f37 	.word	0x00018f37
    adac:	00018f63 	.word	0x00018f63
    adb0:	0000abb5 	.word	0x0000abb5

0000adb4 <bt_smp_connected>:
{
    adb4:	b510      	push	{r4, lr}
    adb6:	4604      	mov	r4, r0
	k_delayed_work_init(&smp->work, smp_timeout);
    adb8:	4904      	ldr	r1, [pc, #16]	; (adcc <bt_smp_connected+0x18>)
    adba:	f500 70ce 	add.w	r0, r0, #412	; 0x19c
    adbe:	f00a f9ca 	bl	15156 <k_delayed_work_init>
	smp_reset(smp);
    adc2:	4620      	mov	r0, r4
}
    adc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
    adc8:	f008 bea6 	b.w	13b18 <smp_reset>
    adcc:	0000ab01 	.word	0x0000ab01

0000add0 <smp_pairing_random>:
{
    add0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    add4:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    add6:	f100 07e7 	add.w	r7, r0, #231	; 0xe7
    adda:	6889      	ldr	r1, [r1, #8]
{
    addc:	b09e      	sub	sp, #120	; 0x78
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    adde:	2210      	movs	r2, #16
    ade0:	4638      	mov	r0, r7
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    ade2:	f104 06b4 	add.w	r6, r4, #180	; 0xb4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    ade6:	f007 f9ba 	bl	1215e <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    adea:	2105      	movs	r1, #5
    adec:	4630      	mov	r0, r6
    adee:	f008 fdfe 	bl	139ee <atomic_test_bit>
    adf2:	2800      	cmp	r0, #0
    adf4:	d13d      	bne.n	ae72 <smp_pairing_random+0xa2>
	struct bt_conn *conn = smp->chan.chan.conn;
    adf6:	46a0      	mov	r8, r4
    adf8:	f858 3bf7 	ldr.w	r3, [r8], #247
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    adfc:	ad0a      	add	r5, sp, #40	; 0x28
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    adfe:	f103 028a 	add.w	r2, r3, #138	; 0x8a
    ae02:	3383      	adds	r3, #131	; 0x83
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    ae04:	9201      	str	r2, [sp, #4]
    ae06:	9300      	str	r3, [sp, #0]
    ae08:	4639      	mov	r1, r7
    ae0a:	4640      	mov	r0, r8
    ae0c:	9502      	str	r5, [sp, #8]
    ae0e:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
    ae12:	f104 02b9 	add.w	r2, r4, #185	; 0xb9
    ae16:	f008 fec0 	bl	13b9a <smp_c1>
	if (err) {
    ae1a:	b108      	cbz	r0, ae20 <smp_pairing_random+0x50>
	switch (smp->method) {
    ae1c:	2508      	movs	r5, #8
    ae1e:	e096      	b.n	af4e <smp_pairing_random+0x17e>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    ae20:	2210      	movs	r2, #16
    ae22:	4629      	mov	r1, r5
    ae24:	f104 00c7 	add.w	r0, r4, #199	; 0xc7
    ae28:	f007 f989 	bl	1213e <memcmp>
    ae2c:	2800      	cmp	r0, #0
    ae2e:	f040 808d 	bne.w	af4c <smp_pairing_random+0x17c>
	memcpy(out, r2, 8);
    ae32:	2208      	movs	r2, #8
    ae34:	4639      	mov	r1, r7
    ae36:	4628      	mov	r0, r5
    ae38:	f007 f991 	bl	1215e <memcpy>
	memcpy(out + 8, r1, 8);
    ae3c:	2208      	movs	r2, #8
    ae3e:	f104 01d7 	add.w	r1, r4, #215	; 0xd7
    ae42:	a80c      	add	r0, sp, #48	; 0x30
    ae44:	f007 f98b 	bl	1215e <memcpy>
	return bt_encrypt_le(k, out, out);
    ae48:	462a      	mov	r2, r5
    ae4a:	4629      	mov	r1, r5
    ae4c:	4640      	mov	r0, r8
    ae4e:	f007 fc19 	bl	12684 <bt_encrypt_le>
		if (err) {
    ae52:	2800      	cmp	r0, #0
    ae54:	d1e2      	bne.n	ae1c <smp_pairing_random+0x4c>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
    ae56:	4629      	mov	r1, r5
    ae58:	2210      	movs	r2, #16
    ae5a:	4640      	mov	r0, r8
    ae5c:	f007 f97f 	bl	1215e <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    ae60:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    ae62:	4630      	mov	r0, r6
    ae64:	f008 fcf5 	bl	13852 <atomic_set_bit>
	return smp_send_pairing_random(smp);
    ae68:	4620      	mov	r0, r4
    ae6a:	f008 fde6 	bl	13a3a <smp_send_pairing_random>
    ae6e:	4605      	mov	r5, r0
    ae70:	e06d      	b.n	af4e <smp_pairing_random+0x17e>
	switch (smp->method) {
    ae72:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    ae76:	2b05      	cmp	r3, #5
    ae78:	d8d0      	bhi.n	ae1c <smp_pairing_random+0x4c>
    ae7a:	a201      	add	r2, pc, #4	; (adr r2, ae80 <smp_pairing_random+0xb0>)
    ae7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ae80:	0000af07 	.word	0x0000af07
    ae84:	0000af15 	.word	0x0000af15
    ae88:	0000af15 	.word	0x0000af15
    ae8c:	0000ae99 	.word	0x0000ae99
    ae90:	0000ae1d 	.word	0x0000ae1d
    ae94:	0000afa1 	.word	0x0000afa1
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
    ae98:	4b5a      	ldr	r3, [pc, #360]	; (b004 <smp_pairing_random+0x234>)
	sys_memcpy_swap(m, u, 32);
    ae9a:	2220      	movs	r2, #32
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
    ae9c:	681d      	ldr	r5, [r3, #0]
	sys_memcpy_swap(m, u, 32);
    ae9e:	f204 1107 	addw	r1, r4, #263	; 0x107
    aea2:	a80a      	add	r0, sp, #40	; 0x28
    aea4:	f7ff f890 	bl	9fc8 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    aea8:	2220      	movs	r2, #32
    aeaa:	4629      	mov	r1, r5
    aeac:	a812      	add	r0, sp, #72	; 0x48
    aeae:	f7ff f88b 	bl	9fc8 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
    aeb2:	2210      	movs	r2, #16
    aeb4:	f104 01d7 	add.w	r1, r4, #215	; 0xd7
    aeb8:	a81a      	add	r0, sp, #104	; 0x68
    aeba:	f7ff f885 	bl	9fc8 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
    aebe:	2210      	movs	r2, #16
    aec0:	4639      	mov	r1, r7
    aec2:	a806      	add	r0, sp, #24
    aec4:	f7ff f880 	bl	9fc8 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    aec8:	ab06      	add	r3, sp, #24
    aeca:	2250      	movs	r2, #80	; 0x50
    aecc:	4618      	mov	r0, r3
    aece:	a90a      	add	r1, sp, #40	; 0x28
    aed0:	f008 fcd4 	bl	1387c <bt_smp_aes_cmac>
	if (err) {
    aed4:	2800      	cmp	r0, #0
    aed6:	d1a1      	bne.n	ae1c <smp_pairing_random+0x4c>
	memcpy(passkey, xs + 12, 4);
    aed8:	2204      	movs	r2, #4
    aeda:	a909      	add	r1, sp, #36	; 0x24
    aedc:	a805      	add	r0, sp, #20
    aede:	f007 f93e 	bl	1215e <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    aee2:	9b05      	ldr	r3, [sp, #20]
    aee4:	4948      	ldr	r1, [pc, #288]	; (b008 <smp_pairing_random+0x238>)
    aee6:	ba1b      	rev	r3, r3
    aee8:	fbb3 f2f1 	udiv	r2, r3, r1
    aeec:	fb01 3312 	mls	r3, r1, r2, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    aef0:	4630      	mov	r0, r6
    aef2:	2109      	movs	r1, #9
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    aef4:	9305      	str	r3, [sp, #20]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    aef6:	f008 fcac 	bl	13852 <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    aefa:	4b44      	ldr	r3, [pc, #272]	; (b00c <smp_pairing_random+0x23c>)
    aefc:	9905      	ldr	r1, [sp, #20]
    aefe:	681b      	ldr	r3, [r3, #0]
    af00:	6820      	ldr	r0, [r4, #0]
    af02:	689b      	ldr	r3, [r3, #8]
    af04:	4798      	blx	r3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    af06:	210d      	movs	r1, #13
    af08:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    af0c:	f008 fca1 	bl	13852 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    af10:	210f      	movs	r1, #15
    af12:	e7a6      	b.n	ae62 <smp_pairing_random+0x92>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    af14:	f894 218c 	ldrb.w	r2, [r4, #396]	; 0x18c
    af18:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    af1c:	4939      	ldr	r1, [pc, #228]	; (b004 <smp_pairing_random+0x234>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    af1e:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    af20:	ad0a      	add	r5, sp, #40	; 0x28
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    af22:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    af26:	9500      	str	r5, [sp, #0]
    af28:	463a      	mov	r2, r7
    af2a:	6809      	ldr	r1, [r1, #0]
    af2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    af30:	f204 1007 	addw	r0, r4, #263	; 0x107
    af34:	f008 fd34 	bl	139a0 <smp_f4>
    af38:	2800      	cmp	r0, #0
    af3a:	f47f af6f 	bne.w	ae1c <smp_pairing_random+0x4c>
	if (memcmp(smp->pcnf, cfm, 16)) {
    af3e:	2210      	movs	r2, #16
    af40:	4629      	mov	r1, r5
    af42:	f104 00c7 	add.w	r0, r4, #199	; 0xc7
    af46:	f007 f8fa 	bl	1213e <memcmp>
    af4a:	b120      	cbz	r0, af56 <smp_pairing_random+0x186>
		return BT_SMP_ERR_CONFIRM_FAILED;
    af4c:	2504      	movs	r5, #4
}
    af4e:	4628      	mov	r0, r5
    af50:	b01e      	add	sp, #120	; 0x78
    af52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		atomic_set_bit(&smp->allowed_cmds,
    af56:	f104 07b0 	add.w	r7, r4, #176	; 0xb0
    af5a:	2103      	movs	r1, #3
    af5c:	4638      	mov	r0, r7
    af5e:	f008 fc78 	bl	13852 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
    af62:	4620      	mov	r0, r4
    af64:	f008 fd69 	bl	13a3a <smp_send_pairing_random>
		if (err) {
    af68:	4605      	mov	r5, r0
    af6a:	2800      	cmp	r0, #0
    af6c:	d1ef      	bne.n	af4e <smp_pairing_random+0x17e>
		smp->passkey_round++;
    af6e:	f894 318c 	ldrb.w	r3, [r4, #396]	; 0x18c
    af72:	3301      	adds	r3, #1
    af74:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
    af76:	2b14      	cmp	r3, #20
		smp->passkey_round++;
    af78:	f884 318c 	strb.w	r3, [r4, #396]	; 0x18c
		if (smp->passkey_round == 20U) {
    af7c:	d108      	bne.n	af90 <smp_pairing_random+0x1c0>
			atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    af7e:	4638      	mov	r0, r7
    af80:	210d      	movs	r1, #13
    af82:	f008 fc66 	bl	13852 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    af86:	210f      	movs	r1, #15
    af88:	4630      	mov	r0, r6
    af8a:	f008 fc62 	bl	13852 <atomic_set_bit>
			return 0;
    af8e:	e7de      	b.n	af4e <smp_pairing_random+0x17e>
		if (bt_rand(smp->prnd, 16)) {
    af90:	2110      	movs	r1, #16
    af92:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
    af96:	f7fa ff29 	bl	5dec <bt_rand>
    af9a:	2800      	cmp	r0, #0
    af9c:	d0d7      	beq.n	af4e <smp_pairing_random+0x17e>
    af9e:	e73d      	b.n	ae1c <smp_pairing_random+0x4c>
		if (bt_rand(smp->prnd, 16)) {
    afa0:	2110      	movs	r1, #16
    afa2:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
    afa6:	f7fa ff21 	bl	5dec <bt_rand>
    afaa:	2800      	cmp	r0, #0
    afac:	f47f af36 	bne.w	ae1c <smp_pairing_random+0x4c>
		if (bt_auth && bt_auth->oob_data_request) {
    afb0:	4f16      	ldr	r7, [pc, #88]	; (b00c <smp_pairing_random+0x23c>)
    afb2:	683b      	ldr	r3, [r7, #0]
    afb4:	b193      	cbz	r3, afdc <smp_pairing_random+0x20c>
    afb6:	68db      	ldr	r3, [r3, #12]
    afb8:	b183      	cbz	r3, afdc <smp_pairing_random+0x20c>
			struct bt_conn_oob_info info = {
    afba:	4b15      	ldr	r3, [pc, #84]	; (b010 <smp_pairing_random+0x240>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    afbc:	f894 20bb 	ldrb.w	r2, [r4, #187]	; 0xbb
			struct bt_conn_oob_info info = {
    afc0:	881b      	ldrh	r3, [r3, #0]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
    afc2:	07d2      	lsls	r2, r2, #31
			struct bt_conn_oob_info info = {
    afc4:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    afc8:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    afcc:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
    afd0:	d406      	bmi.n	afe0 <smp_pairing_random+0x210>
				     BT_CONN_OOB_BOTH_PEERS :
    afd2:	2b00      	cmp	r3, #0
    afd4:	bf0c      	ite	eq
    afd6:	2003      	moveq	r0, #3
    afd8:	2001      	movne	r0, #1
    afda:	e004      	b.n	afe6 <smp_pairing_random+0x216>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
    afdc:	2502      	movs	r5, #2
    afde:	e7b6      	b.n	af4e <smp_pairing_random+0x17e>
				     BT_CONN_OOB_BOTH_PEERS :
    afe0:	2b00      	cmp	r3, #0
    afe2:	bf18      	it	ne
    afe4:	2002      	movne	r0, #2
			smp->oobd_local = NULL;
    afe6:	2500      	movs	r5, #0
	info->lesc.oob_config = oob_config;
    afe8:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
    afec:	210b      	movs	r1, #11
    afee:	4630      	mov	r0, r6
			smp->oobd_remote = NULL;
    aff0:	e9c4 5564 	strd	r5, r5, [r4, #400]	; 0x190
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
    aff4:	f008 fc2d 	bl	13852 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    aff8:	683b      	ldr	r3, [r7, #0]
    affa:	6820      	ldr	r0, [r4, #0]
    affc:	68db      	ldr	r3, [r3, #12]
    affe:	a90a      	add	r1, sp, #40	; 0x28
    b000:	4798      	blx	r3
			return 0;
    b002:	e7a4      	b.n	af4e <smp_pairing_random+0x17e>
    b004:	200011c8 	.word	0x200011c8
    b008:	000f4240 	.word	0x000f4240
    b00c:	20000d30 	.word	0x20000d30
    b010:	0001572a 	.word	0x0001572a

0000b014 <smp_public_key>:
{
    b014:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
    b016:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
    b018:	f200 1407 	addw	r4, r0, #263	; 0x107
{
    b01c:	4605      	mov	r5, r0
	memcpy(smp->pkey, req->x, 32);
    b01e:	2220      	movs	r2, #32
    b020:	4631      	mov	r1, r6
    b022:	4620      	mov	r0, r4
    b024:	f007 f89b 	bl	1215e <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
    b028:	2220      	movs	r2, #32
    b02a:	f205 1027 	addw	r0, r5, #295	; 0x127
    b02e:	18b1      	adds	r1, r6, r2
    b030:	f007 f895 	bl	1215e <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
    b034:	2240      	movs	r2, #64	; 0x40
    b036:	4620      	mov	r0, r4
    b038:	491c      	ldr	r1, [pc, #112]	; (b0ac <smp_public_key+0x98>)
    b03a:	f007 f880 	bl	1213e <memcmp>
    b03e:	b148      	cbz	r0, b054 <smp_public_key+0x40>
	if (!sc_public_key) {
    b040:	4b1b      	ldr	r3, [pc, #108]	; (b0b0 <smp_public_key+0x9c>)
    b042:	681c      	ldr	r4, [r3, #0]
    b044:	bb44      	cbnz	r4, b098 <smp_public_key+0x84>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    b046:	f105 00b4 	add.w	r0, r5, #180	; 0xb4
    b04a:	2106      	movs	r1, #6
    b04c:	f008 fc01 	bl	13852 <atomic_set_bit>
		return 0;
    b050:	4620      	mov	r0, r4
}
    b052:	bd70      	pop	{r4, r5, r6, pc}
		BT_INFO("Remote is using Debug Public key");
    b054:	2149      	movs	r1, #73	; 0x49
    b056:	4817      	ldr	r0, [pc, #92]	; (b0b4 <smp_public_key+0xa0>)
    b058:	f005 fec0 	bl	10ddc <printk>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    b05c:	210d      	movs	r1, #13
    b05e:	f105 00b4 	add.w	r0, r5, #180	; 0xb4
    b062:	f008 fbf6 	bl	13852 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
    b066:	682c      	ldr	r4, [r5, #0]
	if (!conn->le.keys) {
    b068:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    b06c:	b933      	cbnz	r3, b07c <smp_public_key+0x68>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    b06e:	7a20      	ldrb	r0, [r4, #8]
    b070:	f104 017c 	add.w	r1, r4, #124	; 0x7c
    b074:	f000 f9fa 	bl	b46c <bt_keys_get_addr>
    b078:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
	if (!conn->le.keys ||
    b07c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    b080:	2b00      	cmp	r3, #0
    b082:	d0dd      	beq.n	b040 <smp_public_key+0x2c>
    b084:	89da      	ldrh	r2, [r3, #14]
    b086:	f002 0224 	and.w	r2, r2, #36	; 0x24
    b08a:	2a00      	cmp	r2, #0
    b08c:	d0d8      	beq.n	b040 <smp_public_key+0x2c>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
    b08e:	7b5b      	ldrb	r3, [r3, #13]
    b090:	079b      	lsls	r3, r3, #30
    b092:	d5d5      	bpl.n	b040 <smp_public_key+0x2c>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
    b094:	2003      	movs	r0, #3
    b096:	e7dc      	b.n	b052 <smp_public_key+0x3e>
	err = sc_send_public_key(smp);
    b098:	4628      	mov	r0, r5
    b09a:	f7ff f91f 	bl	a2dc <sc_send_public_key>
	if (err) {
    b09e:	2800      	cmp	r0, #0
    b0a0:	d1d7      	bne.n	b052 <smp_public_key+0x3e>
    b0a2:	4628      	mov	r0, r5
}
    b0a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b0a8:	f7ff b97a 	b.w	a3a0 <smp_public_key_slave.part.0>
    b0ac:	00019032 	.word	0x00019032
    b0b0:	200011c8 	.word	0x200011c8
    b0b4:	00018f8f 	.word	0x00018f8f

0000b0b8 <smp_ident_addr_info>:
{
    b0b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
    b0bc:	688f      	ldr	r7, [r1, #8]
{
    b0be:	4604      	mov	r4, r0
	return BT_ADDR_IS_RPA(&addr->a);
}

static inline bool bt_addr_le_is_identity(const bt_addr_le_t *addr)
{
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    b0c0:	783b      	ldrb	r3, [r7, #0]
	struct bt_conn *conn = smp->chan.chan.conn;
    b0c2:	6805      	ldr	r5, [r0, #0]
    b0c4:	b1c3      	cbz	r3, b0f8 <smp_ident_addr_info+0x40>
	if (!bt_addr_le_is_identity(&req->addr)) {
    b0c6:	79bb      	ldrb	r3, [r7, #6]
    b0c8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    b0cc:	2bc0      	cmp	r3, #192	; 0xc0
    b0ce:	d013      	beq.n	b0f8 <smp_ident_addr_info+0x40>
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
    b0d0:	4638      	mov	r0, r7
    b0d2:	f7f8 fc4d 	bl	3970 <bt_addr_le_str_real>
    b0d6:	2145      	movs	r1, #69	; 0x45
    b0d8:	4602      	mov	r2, r0
    b0da:	4837      	ldr	r0, [pc, #220]	; (b1b8 <smp_ident_addr_info+0x100>)
    b0dc:	f005 fe7e 	bl	10ddc <printk>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
    b0e0:	f105 007c 	add.w	r0, r5, #124	; 0x7c
    b0e4:	f7f8 fc44 	bl	3970 <bt_addr_le_str_real>
    b0e8:	2145      	movs	r1, #69	; 0x45
    b0ea:	4602      	mov	r2, r0
    b0ec:	4833      	ldr	r0, [pc, #204]	; (b1bc <smp_ident_addr_info+0x104>)
    b0ee:	f005 fe75 	bl	10ddc <printk>
		return BT_SMP_ERR_INVALID_PARAMS;
    b0f2:	200a      	movs	r0, #10
}
    b0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    b0f8:	210c      	movs	r1, #12
    b0fa:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    b0fe:	f008 fc76 	bl	139ee <atomic_test_bit>
    b102:	2800      	cmp	r0, #0
    b104:	d03e      	beq.n	b184 <smp_ident_addr_info+0xcc>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    b106:	f105 087c 	add.w	r8, r5, #124	; 0x7c
    b10a:	4642      	mov	r2, r8
    b10c:	2002      	movs	r0, #2
    b10e:	7a29      	ldrb	r1, [r5, #8]
    b110:	f008 ff4a 	bl	13fa8 <bt_keys_get_type>
		if (!keys) {
    b114:	4606      	mov	r6, r0
    b116:	b948      	cbnz	r0, b12c <smp_ident_addr_info+0x74>
			BT_ERR("Unable to get keys for %s",
    b118:	4640      	mov	r0, r8
    b11a:	f7f8 fc29 	bl	3970 <bt_addr_le_str_real>
    b11e:	2145      	movs	r1, #69	; 0x45
    b120:	4602      	mov	r2, r0
    b122:	4827      	ldr	r0, [pc, #156]	; (b1c0 <smp_ident_addr_info+0x108>)
    b124:	f005 fe5a 	bl	10ddc <printk>
			return BT_SMP_ERR_UNSPECIFIED;
    b128:	2008      	movs	r0, #8
    b12a:	e7e3      	b.n	b0f4 <smp_ident_addr_info+0x3c>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    b12c:	78eb      	ldrb	r3, [r5, #3]
    b12e:	2b00      	cmp	r3, #0
    b130:	d13e      	bne.n	b1b0 <smp_ident_addr_info+0xf8>
			dst = &conn->le.resp_addr;
    b132:	f105 018a 	add.w	r1, r5, #138	; 0x8a
	if (addr->type != BT_ADDR_LE_RANDOM) {
    b136:	780b      	ldrb	r3, [r1, #0]
    b138:	2b01      	cmp	r3, #1
    b13a:	d120      	bne.n	b17e <smp_ident_addr_info+0xc6>
		if (bt_addr_le_is_rpa(dst)) {
    b13c:	798b      	ldrb	r3, [r1, #6]
    b13e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    b142:	2b40      	cmp	r3, #64	; 0x40
    b144:	d11b      	bne.n	b17e <smp_ident_addr_info+0xc6>
	memcpy(dst, src, sizeof(*dst));
    b146:	2206      	movs	r2, #6
    b148:	3101      	adds	r1, #1
    b14a:	f106 003a 	add.w	r0, r6, #58	; 0x3a
    b14e:	f007 f806 	bl	1215e <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    b152:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
    b156:	b193      	cbz	r3, b17e <smp_ident_addr_info+0xc6>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
    b158:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
    b15c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    b160:	2bc0      	cmp	r3, #192	; 0xc0
    b162:	d00c      	beq.n	b17e <smp_ident_addr_info+0xc6>
	memcpy(dst, src, sizeof(*dst));
    b164:	2207      	movs	r2, #7
    b166:	4639      	mov	r1, r7
    b168:	1c70      	adds	r0, r6, #1
    b16a:	f006 fff8 	bl	1215e <memcpy>
    b16e:	2207      	movs	r2, #7
    b170:	4639      	mov	r1, r7
    b172:	4640      	mov	r0, r8
    b174:	f006 fff3 	bl	1215e <memcpy>
				bt_conn_identity_resolved(conn);
    b178:	4628      	mov	r0, r5
    b17a:	f7fa ffb1 	bl	60e0 <bt_conn_identity_resolved>
		bt_id_add(keys);
    b17e:	4630      	mov	r0, r6
    b180:	f7f9 fbe6 	bl	4950 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    b184:	f894 3199 	ldrb.w	r3, [r4, #409]	; 0x199
    b188:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    b18c:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    b18e:	f884 2199 	strb.w	r2, [r4, #409]	; 0x199
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    b192:	d504      	bpl.n	b19e <smp_ident_addr_info+0xe6>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    b194:	210a      	movs	r1, #10
    b196:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    b19a:	f008 fb5a 	bl	13852 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
    b19e:	f8b4 5198 	ldrh.w	r5, [r4, #408]	; 0x198
    b1a2:	b91d      	cbnz	r5, b1ac <smp_ident_addr_info+0xf4>
		smp_pairing_complete(smp, 0);
    b1a4:	4629      	mov	r1, r5
    b1a6:	4620      	mov	r0, r4
    b1a8:	f7ff fb6c 	bl	a884 <smp_pairing_complete>
	return 0;
    b1ac:	2000      	movs	r0, #0
    b1ae:	e7a1      	b.n	b0f4 <smp_ident_addr_info+0x3c>
			dst = &conn->le.init_addr;
    b1b0:	f105 0183 	add.w	r1, r5, #131	; 0x83
    b1b4:	e7bf      	b.n	b136 <smp_ident_addr_info+0x7e>
    b1b6:	bf00      	nop
    b1b8:	00018fb5 	.word	0x00018fb5
    b1bc:	00018fce 	.word	0x00018fce
    b1c0:	00018d90 	.word	0x00018d90

0000b1c4 <bt_smp_start_security>:
{
    b1c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
    b1c8:	78c4      	ldrb	r4, [r0, #3]
{
    b1ca:	4605      	mov	r5, r0
	switch (conn->role) {
    b1cc:	2c01      	cmp	r4, #1
    b1ce:	d005      	beq.n	b1dc <bt_smp_start_security+0x18>
		return -EINVAL;
    b1d0:	f06f 0415 	mvn.w	r4, #21
}
    b1d4:	4620      	mov	r0, r4
    b1d6:	b003      	add	sp, #12
    b1d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
    b1dc:	f7fe ff40 	bl	a060 <smp_chan_get>
	if (!smp) {
    b1e0:	4606      	mov	r6, r0
    b1e2:	2800      	cmp	r0, #0
    b1e4:	f000 80a0 	beq.w	b328 <bt_smp_start_security+0x164>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    b1e8:	f100 07b4 	add.w	r7, r0, #180	; 0xb4
    b1ec:	2104      	movs	r1, #4
    b1ee:	4638      	mov	r0, r7
    b1f0:	f008 fbfd 	bl	139ee <atomic_test_bit>
    b1f4:	2800      	cmp	r0, #0
    b1f6:	f040 809a 	bne.w	b32e <bt_smp_start_security+0x16a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    b1fa:	2103      	movs	r1, #3
    b1fc:	4638      	mov	r0, r7
    b1fe:	f008 fbf6 	bl	139ee <atomic_test_bit>
    b202:	b110      	cbz	r0, b20a <bt_smp_start_security+0x46>
		return -EBUSY;
    b204:	f06f 040f 	mvn.w	r4, #15
    b208:	e7e4      	b.n	b1d4 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    b20a:	4621      	mov	r1, r4
    b20c:	4638      	mov	r0, r7
    b20e:	f008 fbee 	bl	139ee <atomic_test_bit>
    b212:	2800      	cmp	r0, #0
    b214:	d1f6      	bne.n	b204 <bt_smp_start_security+0x40>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
    b216:	7aab      	ldrb	r3, [r5, #10]
	switch (conn->required_sec_level) {
    b218:	2b03      	cmp	r3, #3
    b21a:	d03d      	beq.n	b298 <bt_smp_start_security+0xd4>
    b21c:	d82c      	bhi.n	b278 <bt_smp_start_security+0xb4>
    b21e:	3b01      	subs	r3, #1
    b220:	2b01      	cmp	r3, #1
    b222:	d946      	bls.n	b2b2 <bt_smp_start_security+0xee>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
    b224:	210b      	movs	r1, #11
    b226:	1d28      	adds	r0, r5, #4
    b228:	f008 fbe1 	bl	139ee <atomic_test_bit>
    b22c:	2800      	cmp	r0, #0
    b22e:	d1cf      	bne.n	b1d0 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
    b230:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
    b234:	b983      	cbnz	r3, b258 <bt_smp_start_security+0x94>
						     conn->id, &conn->le.dst);
    b236:	f105 047c 	add.w	r4, r5, #124	; 0x7c
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
    b23a:	4622      	mov	r2, r4
    b23c:	2020      	movs	r0, #32
    b23e:	7a29      	ldrb	r1, [r5, #8]
    b240:	f000 f954 	bl	b4ec <bt_keys_find>
    b244:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
		if (!conn->le.keys) {
    b248:	b930      	cbnz	r0, b258 <bt_smp_start_security+0x94>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    b24a:	4622      	mov	r2, r4
    b24c:	2004      	movs	r0, #4
    b24e:	7a29      	ldrb	r1, [r5, #8]
    b250:	f000 f94c 	bl	b4ec <bt_keys_find>
    b254:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
	if (!conn->le.keys ||
    b258:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
    b25c:	2b00      	cmp	r3, #0
    b25e:	d0b7      	beq.n	b1d0 <bt_smp_start_security+0xc>
    b260:	89da      	ldrh	r2, [r3, #14]
    b262:	f002 0224 	and.w	r2, r2, #36	; 0x24
    b266:	2a00      	cmp	r2, #0
    b268:	d0b2      	beq.n	b1d0 <bt_smp_start_security+0xc>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
    b26a:	7aaa      	ldrb	r2, [r5, #10]
    b26c:	2a02      	cmp	r2, #2
    b26e:	d920      	bls.n	b2b2 <bt_smp_start_security+0xee>
    b270:	7b5b      	ldrb	r3, [r3, #13]
    b272:	07db      	lsls	r3, r3, #31
    b274:	d5ac      	bpl.n	b1d0 <bt_smp_start_security+0xc>
    b276:	e01c      	b.n	b2b2 <bt_smp_start_security+0xee>
	switch (conn->required_sec_level) {
    b278:	2b04      	cmp	r3, #4
    b27a:	d1d3      	bne.n	b224 <bt_smp_start_security+0x60>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    b27c:	f7fe fe7e 	bl	9f7c <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    b280:	2803      	cmp	r0, #3
    b282:	d104      	bne.n	b28e <bt_smp_start_security+0xca>
    b284:	4b2b      	ldr	r3, [pc, #172]	; (b334 <bt_smp_start_security+0x170>)
    b286:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    b288:	b1f3      	cbz	r3, b2c8 <bt_smp_start_security+0x104>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    b28a:	68dc      	ldr	r4, [r3, #12]
    b28c:	b10c      	cbz	r4, b292 <bt_smp_start_security+0xce>
    b28e:	4b2a      	ldr	r3, [pc, #168]	; (b338 <bt_smp_start_security+0x174>)
    b290:	781c      	ldrb	r4, [r3, #0]
    b292:	f004 0401 	and.w	r4, r4, #1
    b296:	e00a      	b.n	b2ae <bt_smp_start_security+0xea>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    b298:	f7fe fe70 	bl	9f7c <get_io_capa>
    b29c:	2803      	cmp	r0, #3
    b29e:	d106      	bne.n	b2ae <bt_smp_start_security+0xea>
		       (bt_auth && bt_auth->oob_data_request);
    b2a0:	4b24      	ldr	r3, [pc, #144]	; (b334 <bt_smp_start_security+0x170>)
    b2a2:	681c      	ldr	r4, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    b2a4:	b11c      	cbz	r4, b2ae <bt_smp_start_security+0xea>
		       (bt_auth && bt_auth->oob_data_request);
    b2a6:	68e4      	ldr	r4, [r4, #12]
    b2a8:	3c00      	subs	r4, #0
    b2aa:	bf18      	it	ne
    b2ac:	2401      	movne	r4, #1
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
    b2ae:	2c00      	cmp	r4, #0
    b2b0:	d0b8      	beq.n	b224 <bt_smp_start_security+0x60>
	if (!conn->le.keys) {
    b2b2:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
    b2b6:	b14b      	cbz	r3, b2cc <bt_smp_start_security+0x108>
	if (smp_init(smp) != 0) {
    b2b8:	4630      	mov	r0, r6
    b2ba:	f7fe fef5 	bl	a0a8 <smp_init>
    b2be:	4604      	mov	r4, r0
    b2c0:	b180      	cbz	r0, b2e4 <bt_smp_start_security+0x120>
		return -ENOBUFS;
    b2c2:	f06f 0436 	mvn.w	r4, #54	; 0x36
    b2c6:	e785      	b.n	b1d4 <bt_smp_start_security+0x10>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    b2c8:	2400      	movs	r4, #0
    b2ca:	e7e2      	b.n	b292 <bt_smp_start_security+0xce>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    b2cc:	7a28      	ldrb	r0, [r5, #8]
    b2ce:	f105 017c 	add.w	r1, r5, #124	; 0x7c
    b2d2:	f000 f8cb 	bl	b46c <bt_keys_get_addr>
    b2d6:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
		if (!conn->le.keys) {
    b2da:	2800      	cmp	r0, #0
    b2dc:	d1ec      	bne.n	b2b8 <bt_smp_start_security+0xf4>
			return -ENOMEM;
    b2de:	f06f 040b 	mvn.w	r4, #11
    b2e2:	e777      	b.n	b1d4 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
    b2e4:	210b      	movs	r1, #11
    b2e6:	4630      	mov	r0, r6
    b2e8:	f008 fb87 	bl	139fa <smp_create_pdu.isra.0>
	if (!req_buf) {
    b2ec:	4680      	mov	r8, r0
    b2ee:	2800      	cmp	r0, #0
    b2f0:	d0e7      	beq.n	b2c2 <bt_smp_start_security+0xfe>
	req = net_buf_add(req_buf, sizeof(*req));
    b2f2:	2101      	movs	r1, #1
    b2f4:	3008      	adds	r0, #8
    b2f6:	f000 fd2f 	bl	bd58 <net_buf_simple_add>
    b2fa:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
    b2fc:	2009      	movs	r0, #9
    b2fe:	f7fe fe91 	bl	a024 <get_auth.isra.0>
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    b302:	4623      	mov	r3, r4
    b304:	f889 0000 	strb.w	r0, [r9]
    b308:	4642      	mov	r2, r8
    b30a:	2106      	movs	r1, #6
    b30c:	4628      	mov	r0, r5
    b30e:	9400      	str	r4, [sp, #0]
    b310:	f007 fbe8 	bl	12ae4 <bt_l2cap_send_cb>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    b314:	4638      	mov	r0, r7
    b316:	210e      	movs	r1, #14
    b318:	f008 fa9b 	bl	13852 <atomic_set_bit>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
    b31c:	2101      	movs	r1, #1
    b31e:	f106 00b0 	add.w	r0, r6, #176	; 0xb0
    b322:	f008 fa96 	bl	13852 <atomic_set_bit>
	return 0;
    b326:	e755      	b.n	b1d4 <bt_smp_start_security+0x10>
		return -ENOTCONN;
    b328:	f06f 0438 	mvn.w	r4, #56	; 0x38
    b32c:	e752      	b.n	b1d4 <bt_smp_start_security+0x10>
		return -EIO;
    b32e:	f06f 0404 	mvn.w	r4, #4
    b332:	e74f      	b.n	b1d4 <bt_smp_start_security+0x10>
    b334:	20000d30 	.word	0x20000d30
    b338:	20002011 	.word	0x20002011

0000b33c <bt_smp_update_keys>:
{
    b33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b33e:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
    b340:	f7fe fe8e 	bl	a060 <smp_chan_get>
	if (!smp) {
    b344:	4605      	mov	r5, r0
    b346:	2800      	cmp	r0, #0
    b348:	d076      	beq.n	b438 <bt_smp_update_keys+0xfc>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    b34a:	f100 06b4 	add.w	r6, r0, #180	; 0xb4
    b34e:	2103      	movs	r1, #3
    b350:	4630      	mov	r0, r6
    b352:	f008 fb4c 	bl	139ee <atomic_test_bit>
    b356:	2800      	cmp	r0, #0
    b358:	d06e      	beq.n	b438 <bt_smp_update_keys+0xfc>
	if (conn->le.keys) {
    b35a:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
    b35e:	b108      	cbz	r0, b364 <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
    b360:	f000 f924 	bl	b5ac <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    b364:	f104 077c 	add.w	r7, r4, #124	; 0x7c
    b368:	4639      	mov	r1, r7
    b36a:	7a20      	ldrb	r0, [r4, #8]
    b36c:	f000 f87e 	bl	b46c <bt_keys_get_addr>
    b370:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
	if (!conn->le.keys) {
    b374:	b968      	cbnz	r0, b392 <bt_smp_update_keys+0x56>
		BT_ERR("Unable to get keys for %s",
    b376:	4638      	mov	r0, r7
    b378:	f7f8 fafa 	bl	3970 <bt_addr_le_str_real>
    b37c:	2145      	movs	r1, #69	; 0x45
    b37e:	4602      	mov	r2, r0
    b380:	482e      	ldr	r0, [pc, #184]	; (b43c <bt_smp_update_keys+0x100>)
    b382:	f005 fd2b 	bl	10ddc <printk>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    b386:	4628      	mov	r0, r5
}
    b388:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    b38c:	2108      	movs	r1, #8
    b38e:	f008 bbe6 	b.w	13b5e <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
    b392:	210d      	movs	r1, #13
    b394:	4630      	mov	r0, r6
    b396:	f008 fb2a 	bl	139ee <atomic_test_bit>
    b39a:	b128      	cbz	r0, b3a8 <bt_smp_update_keys+0x6c>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
    b39c:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
    b3a0:	7b53      	ldrb	r3, [r2, #13]
    b3a2:	f043 0302 	orr.w	r3, r3, #2
    b3a6:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
    b3a8:	f895 10b8 	ldrb.w	r1, [r5, #184]	; 0xb8
    b3ac:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
    b3b0:	2903      	cmp	r1, #3
    b3b2:	7b53      	ldrb	r3, [r2, #13]
    b3b4:	d838      	bhi.n	b428 <bt_smp_update_keys+0xec>
    b3b6:	b3c9      	cbz	r1, b42c <bt_smp_update_keys+0xf0>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
    b3b8:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
    b3bc:	7353      	strb	r3, [r2, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
    b3be:	f895 30c4 	ldrb.w	r3, [r5, #196]	; 0xc4
    b3c2:	f895 10bd 	ldrb.w	r1, [r5, #189]	; 0xbd
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    b3c6:	4630      	mov	r0, r6
	return MIN(req->max_key_size, rsp->max_key_size);
    b3c8:	428b      	cmp	r3, r1
    b3ca:	bf28      	it	cs
    b3cc:	460b      	movcs	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    b3ce:	2105      	movs	r1, #5
	conn->le.keys->enc_size = get_encryption_key_size(smp);
    b3d0:	7313      	strb	r3, [r2, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    b3d2:	f008 fb0c 	bl	139ee <atomic_test_bit>
    b3d6:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
		conn->le.keys->flags |= BT_KEYS_SC;
    b3da:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    b3dc:	b348      	cbz	r0, b432 <bt_smp_update_keys+0xf6>
		conn->le.keys->flags |= BT_KEYS_SC;
    b3de:	f042 0210 	orr.w	r2, r2, #16
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    b3e2:	210c      	movs	r1, #12
    b3e4:	4630      	mov	r0, r6
		conn->le.keys->flags |= BT_KEYS_SC;
    b3e6:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    b3e8:	f008 fb01 	bl	139ee <atomic_test_bit>
    b3ec:	b320      	cbz	r0, b438 <bt_smp_update_keys+0xfc>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
    b3ee:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
    b3f2:	2120      	movs	r1, #32
    b3f4:	f008 fde8 	bl	13fc8 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
    b3f8:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
    b3fc:	f105 01f7 	add.w	r1, r5, #247	; 0xf7
    b400:	2210      	movs	r2, #16
    b402:	301a      	adds	r0, #26
    b404:	f006 feab 	bl	1215e <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
    b408:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
    b40c:	2208      	movs	r2, #8
    b40e:	2100      	movs	r1, #0
    b410:	3010      	adds	r0, #16
    b412:	f006 fecf 	bl	121b4 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
    b416:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
    b41a:	2202      	movs	r2, #2
}
    b41c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
    b420:	2100      	movs	r1, #0
    b422:	3018      	adds	r0, #24
    b424:	f006 bec6 	b.w	121b4 <memset>
	switch (smp->method) {
    b428:	2905      	cmp	r1, #5
    b42a:	d0c5      	beq.n	b3b8 <bt_smp_update_keys+0x7c>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
    b42c:	f023 0301 	bic.w	r3, r3, #1
    b430:	e7c4      	b.n	b3bc <bt_smp_update_keys+0x80>
		conn->le.keys->flags &= ~BT_KEYS_SC;
    b432:	f022 0210 	bic.w	r2, r2, #16
    b436:	735a      	strb	r2, [r3, #13]
}
    b438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b43a:	bf00      	nop
    b43c:	00018d90 	.word	0x00018d90

0000b440 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
    b440:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    b442:	4b07      	ldr	r3, [pc, #28]	; (b460 <bt_smp_init+0x20>)
			"exposes a security vulnerability!");
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	bt_pub_key_gen(&pub_key_cb);
    b444:	4807      	ldr	r0, [pc, #28]	; (b464 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    b446:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
    b44a:	f003 0306 	and.w	r3, r3, #6
    b44e:	1f9a      	subs	r2, r3, #6
    b450:	4253      	negs	r3, r2
    b452:	4153      	adcs	r3, r2
    b454:	4a04      	ldr	r2, [pc, #16]	; (b468 <bt_smp_init+0x28>)
    b456:	7013      	strb	r3, [r2, #0]
	bt_pub_key_gen(&pub_key_cb);
    b458:	f7fa fba0 	bl	5b9c <bt_pub_key_gen>

	return smp_self_test();
}
    b45c:	2000      	movs	r0, #0
    b45e:	bd08      	pop	{r3, pc}
    b460:	20000000 	.word	0x20000000
    b464:	20000290 	.word	0x20000290
    b468:	20002011 	.word	0x20002011

0000b46c <bt_keys_get_addr>:
static u32_t aging_counter_val;
static struct bt_keys *last_keys_updated;
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(u8_t id, const bt_addr_le_t *addr)
{
    b46c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    b46e:	4c11      	ldr	r4, [pc, #68]	; (b4b4 <bt_keys_get_addr+0x48>)
{
    b470:	4605      	mov	r5, r0
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    b472:	7823      	ldrb	r3, [r4, #0]
{
    b474:	460e      	mov	r6, r1
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    b476:	4283      	cmp	r3, r0
    b478:	4627      	mov	r7, r4
    b47a:	d00b      	beq.n	b494 <bt_keys_get_addr+0x28>
			return keys;
		}

		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    b47c:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
    b47e:	2207      	movs	r2, #7
    b480:	4669      	mov	r1, sp
    b482:	480d      	ldr	r0, [pc, #52]	; (b4b8 <bt_keys_get_addr+0x4c>)
    b484:	9400      	str	r4, [sp, #0]
    b486:	f8cd 4003 	str.w	r4, [sp, #3]
    b48a:	f006 fe58 	bl	1213e <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
    b48e:	b140      	cbz	r0, b4a2 <bt_keys_get_addr+0x36>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
    b490:	4620      	mov	r0, r4
    b492:	e00d      	b.n	b4b0 <bt_keys_get_addr+0x44>
    b494:	2207      	movs	r2, #7
    b496:	1c60      	adds	r0, r4, #1
    b498:	f006 fe51 	bl	1213e <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    b49c:	2800      	cmp	r0, #0
    b49e:	d1ed      	bne.n	b47c <bt_keys_get_addr+0x10>
    b4a0:	e7f6      	b.n	b490 <bt_keys_get_addr+0x24>
	memcpy(dst, src, sizeof(*dst));
    b4a2:	2207      	movs	r2, #7
    b4a4:	4631      	mov	r1, r6
    b4a6:	4804      	ldr	r0, [pc, #16]	; (b4b8 <bt_keys_get_addr+0x4c>)
		keys->id = id;
    b4a8:	703d      	strb	r5, [r7, #0]
    b4aa:	f006 fe58 	bl	1215e <memcpy>
		return keys;
    b4ae:	4801      	ldr	r0, [pc, #4]	; (b4b4 <bt_keys_get_addr+0x48>)
}
    b4b0:	b003      	add	sp, #12
    b4b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b4b4:	200011cc 	.word	0x200011cc
    b4b8:	200011cd 	.word	0x200011cd

0000b4bc <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
    b4bc:	460b      	mov	r3, r1
    b4be:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
    b4c0:	4a04      	ldr	r2, [pc, #16]	; (b4d4 <bt_keys_foreach+0x18>)
{
    b4c2:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
    b4c4:	89d4      	ldrh	r4, [r2, #14]
    b4c6:	4204      	tst	r4, r0
    b4c8:	d002      	beq.n	b4d0 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
    b4ca:	4610      	mov	r0, r2
		}
	}
}
    b4cc:	bc10      	pop	{r4}
			func(&key_pool[i], data);
    b4ce:	4718      	bx	r3
}
    b4d0:	bc10      	pop	{r4}
    b4d2:	4770      	bx	lr
    b4d4:	200011cc 	.word	0x200011cc

0000b4d8 <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
    b4d8:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
    b4da:	2200      	movs	r2, #0
    b4dc:	2002      	movs	r0, #2
    b4de:	4902      	ldr	r1, [pc, #8]	; (b4e8 <keys_commit+0x10>)
    b4e0:	f7ff ffec 	bl	b4bc <bt_keys_foreach>
	}

	return 0;
}
    b4e4:	2000      	movs	r0, #0
    b4e6:	bd08      	pop	{r3, pc}
    b4e8:	00013fa5 	.word	0x00013fa5

0000b4ec <bt_keys_find>:
{
    b4ec:	b510      	push	{r4, lr}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    b4ee:	4c09      	ldr	r4, [pc, #36]	; (b514 <bt_keys_find+0x28>)
{
    b4f0:	460b      	mov	r3, r1
    b4f2:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    b4f4:	89e2      	ldrh	r2, [r4, #14]
    b4f6:	4202      	tst	r2, r0
    b4f8:	d007      	beq.n	b50a <bt_keys_find+0x1e>
    b4fa:	7822      	ldrb	r2, [r4, #0]
    b4fc:	429a      	cmp	r2, r3
    b4fe:	d104      	bne.n	b50a <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
    b500:	2207      	movs	r2, #7
    b502:	1c60      	adds	r0, r4, #1
    b504:	f006 fe1b 	bl	1213e <memcmp>
    b508:	b108      	cbz	r0, b50e <bt_keys_find+0x22>
	return NULL;
    b50a:	2000      	movs	r0, #0
}
    b50c:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    b50e:	4620      	mov	r0, r4
    b510:	e7fc      	b.n	b50c <bt_keys_find+0x20>
    b512:	bf00      	nop
    b514:	200011cc 	.word	0x200011cc

0000b518 <bt_keys_find_irk>:
{
    b518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
    b51a:	780b      	ldrb	r3, [r1, #0]
    b51c:	4607      	mov	r7, r0
    b51e:	2b01      	cmp	r3, #1
    b520:	460c      	mov	r4, r1
    b522:	d001      	beq.n	b528 <bt_keys_find_irk+0x10>
		return NULL;
    b524:	2000      	movs	r0, #0
}
    b526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
    b528:	798b      	ldrb	r3, [r1, #6]
    b52a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    b52e:	2b40      	cmp	r3, #64	; 0x40
    b530:	d1f8      	bne.n	b524 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    b532:	4d13      	ldr	r5, [pc, #76]	; (b580 <bt_keys_find_irk+0x68>)
    b534:	89eb      	ldrh	r3, [r5, #14]
    b536:	462e      	mov	r6, r5
    b538:	f013 0f02 	tst.w	r3, #2
    b53c:	d0f2      	beq.n	b524 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
    b53e:	7833      	ldrb	r3, [r6, #0]
    b540:	42bb      	cmp	r3, r7
    b542:	d10b      	bne.n	b55c <bt_keys_find_irk+0x44>
	return memcmp(a, b, sizeof(*a));
    b544:	2206      	movs	r2, #6
    b546:	f106 013a 	add.w	r1, r6, #58	; 0x3a
    b54a:	1c60      	adds	r0, r4, #1
    b54c:	f006 fdf7 	bl	1213e <memcmp>
    b550:	b908      	cbnz	r0, b556 <bt_keys_find_irk+0x3e>
			return &key_pool[i];
    b552:	4628      	mov	r0, r5
    b554:	e7e7      	b.n	b526 <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    b556:	89f3      	ldrh	r3, [r6, #14]
    b558:	079b      	lsls	r3, r3, #30
    b55a:	d5e3      	bpl.n	b524 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
    b55c:	7833      	ldrb	r3, [r6, #0]
    b55e:	42bb      	cmp	r3, r7
    b560:	d1e0      	bne.n	b524 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    b562:	3401      	adds	r4, #1
    b564:	4621      	mov	r1, r4
    b566:	4807      	ldr	r0, [pc, #28]	; (b584 <bt_keys_find_irk+0x6c>)
    b568:	f006 fe4a 	bl	12200 <bt_rpa_irk_matches>
    b56c:	2800      	cmp	r0, #0
    b56e:	d0d9      	beq.n	b524 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
    b570:	2206      	movs	r2, #6
    b572:	4621      	mov	r1, r4
    b574:	4804      	ldr	r0, [pc, #16]	; (b588 <bt_keys_find_irk+0x70>)
    b576:	f006 fdf2 	bl	1215e <memcpy>
			return &key_pool[i];
    b57a:	4801      	ldr	r0, [pc, #4]	; (b580 <bt_keys_find_irk+0x68>)
}
    b57c:	e7d3      	b.n	b526 <bt_keys_find_irk+0xe>
    b57e:	bf00      	nop
    b580:	200011cc 	.word	0x200011cc
    b584:	200011f6 	.word	0x200011f6
    b588:	20001206 	.word	0x20001206

0000b58c <bt_keys_find_addr>:
{
    b58c:	b510      	push	{r4, lr}
		if (key_pool[i].id == id &&
    b58e:	4c06      	ldr	r4, [pc, #24]	; (b5a8 <bt_keys_find_addr+0x1c>)
    b590:	7823      	ldrb	r3, [r4, #0]
    b592:	4283      	cmp	r3, r0
    b594:	d104      	bne.n	b5a0 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
    b596:	2207      	movs	r2, #7
    b598:	1c60      	adds	r0, r4, #1
    b59a:	f006 fdd0 	bl	1213e <memcmp>
    b59e:	b108      	cbz	r0, b5a4 <bt_keys_find_addr+0x18>
	return NULL;
    b5a0:	2000      	movs	r0, #0
}
    b5a2:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    b5a4:	4620      	mov	r0, r4
    b5a6:	e7fc      	b.n	b5a2 <bt_keys_find_addr+0x16>
    b5a8:	200011cc 	.word	0x200011cc

0000b5ac <bt_keys_clear>:
{
    b5ac:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
    b5ae:	7a03      	ldrb	r3, [r0, #8]
{
    b5b0:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
    b5b2:	075b      	lsls	r3, r3, #29
{
    b5b4:	b08c      	sub	sp, #48	; 0x30
	if (keys->state & BT_KEYS_ID_ADDED) {
    b5b6:	d501      	bpl.n	b5bc <bt_keys_clear+0x10>
		bt_id_del(keys);
    b5b8:	f7f9 fa74 	bl	4aa4 <bt_id_del>
		if (keys->id) {
    b5bc:	4625      	mov	r5, r4
    b5be:	f815 2b01 	ldrb.w	r2, [r5], #1
    b5c2:	b1aa      	cbz	r2, b5f0 <bt_keys_clear+0x44>
			u8_to_dec(id, sizeof(id), keys->id);
    b5c4:	ae02      	add	r6, sp, #8
    b5c6:	2104      	movs	r1, #4
    b5c8:	4630      	mov	r0, r6
    b5ca:	f005 fb71 	bl	10cb0 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
    b5ce:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
    b5d0:	462b      	mov	r3, r5
    b5d2:	2124      	movs	r1, #36	; 0x24
    b5d4:	4a07      	ldr	r2, [pc, #28]	; (b5f4 <bt_keys_clear+0x48>)
    b5d6:	a803      	add	r0, sp, #12
    b5d8:	f7f8 fa6a 	bl	3ab0 <bt_settings_encode_key>
		settings_delete(key);
    b5dc:	a803      	add	r0, sp, #12
    b5de:	f005 ffcc 	bl	1157a <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
    b5e2:	225c      	movs	r2, #92	; 0x5c
    b5e4:	2100      	movs	r1, #0
    b5e6:	4620      	mov	r0, r4
    b5e8:	f006 fde4 	bl	121b4 <memset>
}
    b5ec:	b00c      	add	sp, #48	; 0x30
    b5ee:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "keys",
    b5f0:	9200      	str	r2, [sp, #0]
    b5f2:	e7ed      	b.n	b5d0 <bt_keys_clear+0x24>
    b5f4:	0001912a 	.word	0x0001912a

0000b5f8 <keys_set>:
{
    b5f8:	b570      	push	{r4, r5, r6, lr}
    b5fa:	4605      	mov	r5, r0
    b5fc:	4614      	mov	r4, r2
    b5fe:	4618      	mov	r0, r3
    b600:	b098      	sub	sp, #96	; 0x60
	if (!name) {
    b602:	b945      	cbnz	r5, b616 <keys_set+0x1e>
		BT_ERR("Insufficient number of arguments");
    b604:	2145      	movs	r1, #69	; 0x45
    b606:	4830      	ldr	r0, [pc, #192]	; (b6c8 <keys_set+0xd0>)
    b608:	f005 fbe8 	bl	10ddc <printk>
		return -EINVAL;
    b60c:	f06f 0415 	mvn.w	r4, #21
}
    b610:	4620      	mov	r0, r4
    b612:	b018      	add	sp, #96	; 0x60
    b614:	bd70      	pop	{r4, r5, r6, pc}
	len = read_cb(cb_arg, val, sizeof(val));
    b616:	2250      	movs	r2, #80	; 0x50
    b618:	a904      	add	r1, sp, #16
    b61a:	47a0      	blx	r4
	if (len < 0) {
    b61c:	1e04      	subs	r4, r0, #0
    b61e:	da05      	bge.n	b62c <keys_set+0x34>
		BT_ERR("Failed to read value (err %zd)", len);
    b620:	4622      	mov	r2, r4
    b622:	2145      	movs	r1, #69	; 0x45
    b624:	4829      	ldr	r0, [pc, #164]	; (b6cc <keys_set+0xd4>)
    b626:	f005 fbd9 	bl	10ddc <printk>
    b62a:	e7ef      	b.n	b60c <keys_set+0x14>
	err = bt_settings_decode_key(name, &addr);
    b62c:	4628      	mov	r0, r5
    b62e:	a902      	add	r1, sp, #8
    b630:	f006 fe0c 	bl	1224c <bt_settings_decode_key>
	if (err) {
    b634:	4606      	mov	r6, r0
    b636:	b118      	cbz	r0, b640 <keys_set+0x48>
		BT_ERR("Unable to decode address %s", name);
    b638:	462a      	mov	r2, r5
    b63a:	2145      	movs	r1, #69	; 0x45
    b63c:	4824      	ldr	r0, [pc, #144]	; (b6d0 <keys_set+0xd8>)
    b63e:	e7f2      	b.n	b626 <keys_set+0x2e>
	settings_name_next(name, &next);
    b640:	4628      	mov	r0, r5
    b642:	a901      	add	r1, sp, #4
    b644:	f005 ffc0 	bl	115c8 <settings_name_next>
	if (!next) {
    b648:	9801      	ldr	r0, [sp, #4]
    b64a:	b120      	cbz	r0, b656 <keys_set+0x5e>
		id = strtol(next, NULL, 10);
    b64c:	220a      	movs	r2, #10
    b64e:	4631      	mov	r1, r6
    b650:	f006 fcc0 	bl	11fd4 <strtol>
    b654:	b2c0      	uxtb	r0, r0
	if (!len) {
    b656:	b99c      	cbnz	r4, b680 <keys_set+0x88>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
    b658:	4601      	mov	r1, r0
    b65a:	aa02      	add	r2, sp, #8
    b65c:	203f      	movs	r0, #63	; 0x3f
    b65e:	f7ff ff45 	bl	b4ec <bt_keys_find>
		if (keys) {
    b662:	b120      	cbz	r0, b66e <keys_set+0x76>
			(void)memset(keys, 0, sizeof(*keys));
    b664:	225c      	movs	r2, #92	; 0x5c
    b666:	4621      	mov	r1, r4
    b668:	f006 fda4 	bl	121b4 <memset>
			BT_DBG("Cleared keys for %s", bt_addr_le_str(&addr));
    b66c:	e7d0      	b.n	b610 <keys_set+0x18>
			BT_WARN("Unable to find deleted keys for %s",
    b66e:	a802      	add	r0, sp, #8
    b670:	f7f8 f97e 	bl	3970 <bt_addr_le_str_real>
    b674:	2157      	movs	r1, #87	; 0x57
    b676:	4602      	mov	r2, r0
    b678:	4816      	ldr	r0, [pc, #88]	; (b6d4 <keys_set+0xdc>)
    b67a:	f005 fbaf 	bl	10ddc <printk>
    b67e:	e7c7      	b.n	b610 <keys_set+0x18>
	keys = bt_keys_get_addr(id, &addr);
    b680:	a902      	add	r1, sp, #8
    b682:	f7ff fef3 	bl	b46c <bt_keys_get_addr>
	if (!keys) {
    b686:	4605      	mov	r5, r0
    b688:	b950      	cbnz	r0, b6a0 <keys_set+0xa8>
		BT_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
    b68a:	a802      	add	r0, sp, #8
    b68c:	f7f8 f970 	bl	3970 <bt_addr_le_str_real>
    b690:	2145      	movs	r1, #69	; 0x45
    b692:	4602      	mov	r2, r0
    b694:	4810      	ldr	r0, [pc, #64]	; (b6d8 <keys_set+0xe0>)
    b696:	f005 fba1 	bl	10ddc <printk>
		return -ENOMEM;
    b69a:	f06f 040b 	mvn.w	r4, #11
    b69e:	e7b7      	b.n	b610 <keys_set+0x18>
	if (len != BT_KEYS_STORAGE_LEN) {
    b6a0:	2c50      	cmp	r4, #80	; 0x50
    b6a2:	d009      	beq.n	b6b8 <keys_set+0xc0>
			BT_ERR("Invalid key length %zd != %zu", len,
    b6a4:	2350      	movs	r3, #80	; 0x50
    b6a6:	4622      	mov	r2, r4
    b6a8:	2145      	movs	r1, #69	; 0x45
    b6aa:	480c      	ldr	r0, [pc, #48]	; (b6dc <keys_set+0xe4>)
    b6ac:	f005 fb96 	bl	10ddc <printk>
			bt_keys_clear(keys);
    b6b0:	4628      	mov	r0, r5
    b6b2:	f7ff ff7b 	bl	b5ac <bt_keys_clear>
			return -EINVAL;
    b6b6:	e7a9      	b.n	b60c <keys_set+0x14>
		memcpy(keys->storage_start, val, len);
    b6b8:	4622      	mov	r2, r4
    b6ba:	a904      	add	r1, sp, #16
    b6bc:	300c      	adds	r0, #12
    b6be:	f006 fd4e 	bl	1215e <memcpy>
	return 0;
    b6c2:	2400      	movs	r4, #0
    b6c4:	e7a4      	b.n	b610 <keys_set+0x18>
    b6c6:	bf00      	nop
    b6c8:	0001733a 	.word	0x0001733a
    b6cc:	00019072 	.word	0x00019072
    b6d0:	00018aea 	.word	0x00018aea
    b6d4:	00019096 	.word	0x00019096
    b6d8:	000190be 	.word	0x000190be
    b6dc:	000190e2 	.word	0x000190e2

0000b6e0 <bt_keys_store>:
{
    b6e0:	b570      	push	{r4, r5, r6, lr}
	if (keys->id) {
    b6e2:	4605      	mov	r5, r0
    b6e4:	f815 2b01 	ldrb.w	r2, [r5], #1
{
    b6e8:	4604      	mov	r4, r0
    b6ea:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
    b6ec:	b1da      	cbz	r2, b726 <bt_keys_store+0x46>
		u8_to_dec(id, sizeof(id), keys->id);
    b6ee:	ae02      	add	r6, sp, #8
    b6f0:	2104      	movs	r1, #4
    b6f2:	4630      	mov	r0, r6
    b6f4:	f005 fadc 	bl	10cb0 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
    b6f8:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
    b6fa:	462b      	mov	r3, r5
    b6fc:	2124      	movs	r1, #36	; 0x24
    b6fe:	4a0b      	ldr	r2, [pc, #44]	; (b72c <bt_keys_store+0x4c>)
    b700:	a803      	add	r0, sp, #12
    b702:	f7f8 f9d5 	bl	3ab0 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
    b706:	f104 010c 	add.w	r1, r4, #12
    b70a:	2250      	movs	r2, #80	; 0x50
    b70c:	a803      	add	r0, sp, #12
    b70e:	f7f6 f9fb 	bl	1b08 <settings_save_one>
	if (err) {
    b712:	4604      	mov	r4, r0
    b714:	b120      	cbz	r0, b720 <bt_keys_store+0x40>
		BT_ERR("Failed to save keys (err %d)", err);
    b716:	4602      	mov	r2, r0
    b718:	2145      	movs	r1, #69	; 0x45
    b71a:	4805      	ldr	r0, [pc, #20]	; (b730 <bt_keys_store+0x50>)
    b71c:	f005 fb5e 	bl	10ddc <printk>
}
    b720:	4620      	mov	r0, r4
    b722:	b00c      	add	sp, #48	; 0x30
    b724:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
    b726:	9200      	str	r2, [sp, #0]
    b728:	e7e7      	b.n	b6fa <bt_keys_store+0x1a>
    b72a:	bf00      	nop
    b72c:	0001912a 	.word	0x0001912a
    b730:	00019105 	.word	0x00019105

0000b734 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
    b734:	222c      	movs	r2, #44	; 0x2c
    b736:	4b02      	ldr	r3, [pc, #8]	; (b740 <net_buf_pool_get+0xc>)
    b738:	fb02 3000 	mla	r0, r2, r0, r3
    b73c:	4770      	bx	lr
    b73e:	bf00      	nop
    b740:	200005f0 	.word	0x200005f0

0000b744 <net_buf_id>:

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	return buf - pool->__bufs;
    b744:	212c      	movs	r1, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    b746:	7983      	ldrb	r3, [r0, #6]
	return buf - pool->__bufs;
    b748:	4a04      	ldr	r2, [pc, #16]	; (b75c <net_buf_id+0x18>)
    b74a:	fb01 2303 	mla	r3, r1, r3, r2
    b74e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b750:	1ac0      	subs	r0, r0, r3
}
    b752:	4b03      	ldr	r3, [pc, #12]	; (b760 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
    b754:	10c0      	asrs	r0, r0, #3
}
    b756:	4358      	muls	r0, r3
    b758:	4770      	bx	lr
    b75a:	bf00      	nop
    b75c:	200005f0 	.word	0x200005f0
    b760:	aaaaaaab 	.word	0xaaaaaaab

0000b764 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static u8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
    b764:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    b766:	242c      	movs	r4, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    b768:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    b76a:	4a09      	ldr	r2, [pc, #36]	; (b790 <fixed_data_alloc+0x2c>)
    b76c:	fb04 2303 	mla	r3, r4, r3, r2
    b770:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	*size = MIN(fixed->data_size, *size);
    b772:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    b774:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
    b776:	6823      	ldr	r3, [r4, #0]
    b778:	429a      	cmp	r2, r3
    b77a:	bf94      	ite	ls
    b77c:	600a      	strls	r2, [r1, #0]
    b77e:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
    b780:	f7ff ffe0 	bl	b744 <net_buf_id>
    b784:	e9d4 2300 	ldrd	r2, r3, [r4]
}
    b788:	fb02 3000 	mla	r0, r2, r0, r3
    b78c:	bd10      	pop	{r4, pc}
    b78e:	bf00      	nop
    b790:	200005f0 	.word	0x200005f0

0000b794 <net_buf_reset>:
{
    b794:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
    b796:	7943      	ldrb	r3, [r0, #5]
{
    b798:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
    b79a:	b14b      	cbz	r3, b7b0 <net_buf_reset+0x1c>
    b79c:	490d      	ldr	r1, [pc, #52]	; (b7d4 <net_buf_reset+0x40>)
    b79e:	480e      	ldr	r0, [pc, #56]	; (b7d8 <net_buf_reset+0x44>)
    b7a0:	234f      	movs	r3, #79	; 0x4f
    b7a2:	4a0e      	ldr	r2, [pc, #56]	; (b7dc <net_buf_reset+0x48>)
    b7a4:	f005 fb1a 	bl	10ddc <printk>
    b7a8:	214f      	movs	r1, #79	; 0x4f
    b7aa:	480c      	ldr	r0, [pc, #48]	; (b7dc <net_buf_reset+0x48>)
    b7ac:	f005 fdac 	bl	11308 <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
    b7b0:	6823      	ldr	r3, [r4, #0]
    b7b2:	b14b      	cbz	r3, b7c8 <net_buf_reset+0x34>
    b7b4:	490a      	ldr	r1, [pc, #40]	; (b7e0 <net_buf_reset+0x4c>)
    b7b6:	4808      	ldr	r0, [pc, #32]	; (b7d8 <net_buf_reset+0x44>)
    b7b8:	2350      	movs	r3, #80	; 0x50
    b7ba:	4a08      	ldr	r2, [pc, #32]	; (b7dc <net_buf_reset+0x48>)
    b7bc:	f005 fb0e 	bl	10ddc <printk>
    b7c0:	2150      	movs	r1, #80	; 0x50
    b7c2:	4806      	ldr	r0, [pc, #24]	; (b7dc <net_buf_reset+0x48>)
    b7c4:	f005 fda0 	bl	11308 <assert_post_action>
	buf->len  = 0U;
    b7c8:	2300      	movs	r3, #0
    b7ca:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
    b7cc:	6923      	ldr	r3, [r4, #16]
    b7ce:	60a3      	str	r3, [r4, #8]
}
    b7d0:	bd10      	pop	{r4, pc}
    b7d2:	bf00      	nop
    b7d4:	0001915b 	.word	0x0001915b
    b7d8:	00016493 	.word	0x00016493
    b7dc:	00019137 	.word	0x00019137
    b7e0:	0001916c 	.word	0x0001916c

0000b7e4 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
    b7e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    b7e8:	4605      	mov	r5, r0
    b7ea:	9101      	str	r1, [sp, #4]
	u64_t end = z_timeout_end_calc(timeout);
    b7ec:	4610      	mov	r0, r2
    b7ee:	4619      	mov	r1, r3
{
    b7f0:	4616      	mov	r6, r2
    b7f2:	461f      	mov	r7, r3
	u64_t end = z_timeout_end_calc(timeout);
    b7f4:	f009 fcbd 	bl	15172 <z_timeout_end_calc>
    b7f8:	4680      	mov	r8, r0
    b7fa:	4689      	mov	r9, r1
	struct net_buf *buf;
	unsigned int key;

	__ASSERT_NO_MSG(pool);
    b7fc:	b94d      	cbnz	r5, b812 <net_buf_alloc_len+0x2e>
    b7fe:	494d      	ldr	r1, [pc, #308]	; (b934 <net_buf_alloc_len+0x150>)
    b800:	484d      	ldr	r0, [pc, #308]	; (b938 <net_buf_alloc_len+0x154>)
    b802:	23f1      	movs	r3, #241	; 0xf1
    b804:	4a4d      	ldr	r2, [pc, #308]	; (b93c <net_buf_alloc_len+0x158>)
    b806:	f005 fae9 	bl	10ddc <printk>
    b80a:	21f1      	movs	r1, #241	; 0xf1
    b80c:	484b      	ldr	r0, [pc, #300]	; (b93c <net_buf_alloc_len+0x158>)
    b80e:	f005 fd7b 	bl	11308 <assert_post_action>
	__asm__ volatile(
    b812:	f04f 0320 	mov.w	r3, #32
    b816:	f3ef 8a11 	mrs	sl, BASEPRI
    b81a:	f383 8811 	msr	BASEPRI, r3
    b81e:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
    b822:	8beb      	ldrh	r3, [r5, #30]
    b824:	2b00      	cmp	r3, #0
    b826:	d055      	beq.n	b8d4 <net_buf_alloc_len+0xf0>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
    b828:	8baa      	ldrh	r2, [r5, #28]
    b82a:	429a      	cmp	r2, r3
    b82c:	d93e      	bls.n	b8ac <net_buf_alloc_len+0xc8>
	return z_impl_k_queue_get(queue, timeout);
    b82e:	2200      	movs	r2, #0
    b830:	2300      	movs	r3, #0
    b832:	4628      	mov	r0, r5
    b834:	f002 fe84 	bl	e540 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
    b838:	4604      	mov	r4, r0
    b83a:	2800      	cmp	r0, #0
    b83c:	d036      	beq.n	b8ac <net_buf_alloc_len+0xc8>
	__asm__ volatile(
    b83e:	f38a 8811 	msr	BASEPRI, sl
    b842:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
    b846:	f8dd a004 	ldr.w	sl, [sp, #4]
    b84a:	f1ba 0f00 	cmp.w	sl, #0
    b84e:	d06d      	beq.n	b92c <net_buf_alloc_len+0x148>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    b850:	ea56 0307 	orrs.w	r3, r6, r7
    b854:	d010      	beq.n	b878 <net_buf_alloc_len+0x94>
    b856:	1c7b      	adds	r3, r7, #1
    b858:	bf08      	it	eq
    b85a:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    b85e:	d00b      	beq.n	b878 <net_buf_alloc_len+0x94>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			s64_t remaining = end - z_tick_get();
    b860:	f004 fe1e 	bl	104a0 <z_tick_get>
    b864:	ebb8 0600 	subs.w	r6, r8, r0
    b868:	eb69 0701 	sbc.w	r7, r9, r1
    b86c:	2e00      	cmp	r6, #0
    b86e:	f177 0300 	sbcs.w	r3, r7, #0
    b872:	bfbc      	itt	lt
    b874:	2600      	movlt	r6, #0
    b876:	2700      	movlt	r7, #0
	return pool->alloc->cb->alloc(buf, size, timeout);
    b878:	f04f 092c 	mov.w	r9, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    b87c:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
    b87e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; b940 <net_buf_alloc_len+0x15c>
    b882:	4632      	mov	r2, r6
    b884:	fb09 8303 	mla	r3, r9, r3, r8
    b888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b88a:	4620      	mov	r0, r4
    b88c:	681b      	ldr	r3, [r3, #0]
    b88e:	a901      	add	r1, sp, #4
    b890:	681d      	ldr	r5, [r3, #0]
    b892:	463b      	mov	r3, r7
    b894:	47a8      	blx	r5
    b896:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
    b898:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
    b89a:	bb58      	cbnz	r0, b8f4 <net_buf_alloc_len+0x110>
	k_lifo_put(&pool->free, buf);
    b89c:	79a0      	ldrb	r0, [r4, #6]
    b89e:	4621      	mov	r1, r4
    b8a0:	fb00 8009 	mla	r0, r0, r9, r8
    b8a4:	f009 fba4 	bl	14ff0 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
    b8a8:	462c      	mov	r4, r5
}
    b8aa:	e01f      	b.n	b8ec <net_buf_alloc_len+0x108>
		uninit_count = pool->uninit_count--;
    b8ac:	8be8      	ldrh	r0, [r5, #30]
    b8ae:	1e43      	subs	r3, r0, #1
    b8b0:	83eb      	strh	r3, [r5, #30]
    b8b2:	f38a 8811 	msr	BASEPRI, sl
    b8b6:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
    b8ba:	2318      	movs	r3, #24
    b8bc:	8bac      	ldrh	r4, [r5, #28]
    b8be:	1a24      	subs	r4, r4, r0
    b8c0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    b8c2:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
    b8c6:	481e      	ldr	r0, [pc, #120]	; (b940 <net_buf_alloc_len+0x15c>)
    b8c8:	4b1e      	ldr	r3, [pc, #120]	; (b944 <net_buf_alloc_len+0x160>)
    b8ca:	1a2d      	subs	r5, r5, r0
    b8cc:	10ad      	asrs	r5, r5, #2
    b8ce:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
    b8d0:	71a5      	strb	r5, [r4, #6]
		goto success;
    b8d2:	e7b8      	b.n	b846 <net_buf_alloc_len+0x62>
    b8d4:	f38a 8811 	msr	BASEPRI, sl
    b8d8:	f3bf 8f6f 	isb	sy
    b8dc:	4632      	mov	r2, r6
    b8de:	463b      	mov	r3, r7
    b8e0:	4628      	mov	r0, r5
    b8e2:	f002 fe2d 	bl	e540 <z_impl_k_queue_get>
	if (!buf) {
    b8e6:	4604      	mov	r4, r0
    b8e8:	2800      	cmp	r0, #0
    b8ea:	d1ac      	bne.n	b846 <net_buf_alloc_len+0x62>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	pool->avail_count--;
	__ASSERT_NO_MSG(pool->avail_count >= 0);
#endif
	return buf;
}
    b8ec:	4620      	mov	r0, r4
    b8ee:	b002      	add	sp, #8
    b8f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		NET_BUF_ASSERT(req_size <= size);
    b8f4:	9b01      	ldr	r3, [sp, #4]
    b8f6:	459a      	cmp	sl, r3
    b8f8:	d90e      	bls.n	b918 <net_buf_alloc_len+0x134>
    b8fa:	4913      	ldr	r1, [pc, #76]	; (b948 <net_buf_alloc_len+0x164>)
    b8fc:	f240 1351 	movw	r3, #337	; 0x151
    b900:	4a0e      	ldr	r2, [pc, #56]	; (b93c <net_buf_alloc_len+0x158>)
    b902:	480d      	ldr	r0, [pc, #52]	; (b938 <net_buf_alloc_len+0x154>)
    b904:	f005 fa6a 	bl	10ddc <printk>
    b908:	4810      	ldr	r0, [pc, #64]	; (b94c <net_buf_alloc_len+0x168>)
    b90a:	f005 fa67 	bl	10ddc <printk>
    b90e:	f240 1151 	movw	r1, #337	; 0x151
    b912:	480a      	ldr	r0, [pc, #40]	; (b93c <net_buf_alloc_len+0x158>)
    b914:	f005 fcf8 	bl	11308 <assert_post_action>
	buf->frags = NULL;
    b918:	2300      	movs	r3, #0
    b91a:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
    b91c:	2301      	movs	r3, #1
    b91e:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
    b920:	9b01      	ldr	r3, [sp, #4]
	net_buf_reset(buf);
    b922:	4620      	mov	r0, r4
	buf->size  = size;
    b924:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
    b926:	f7ff ff35 	bl	b794 <net_buf_reset>
	return buf;
    b92a:	e7df      	b.n	b8ec <net_buf_alloc_len+0x108>
		buf->__buf = NULL;
    b92c:	f8c4 a010 	str.w	sl, [r4, #16]
    b930:	e7f2      	b.n	b918 <net_buf_alloc_len+0x134>
    b932:	bf00      	nop
    b934:	00019186 	.word	0x00019186
    b938:	00016493 	.word	0x00016493
    b93c:	00019137 	.word	0x00019137
    b940:	200005f0 	.word	0x200005f0
    b944:	ba2e8ba3 	.word	0xba2e8ba3
    b948:	0001918b 	.word	0x0001918b
    b94c:	0001919c 	.word	0x0001919c

0000b950 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
    b950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b954:	4606      	mov	r6, r0
    b956:	f002 fdf3 	bl	e540 <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
    b95a:	4605      	mov	r5, r0
    b95c:	b150      	cbz	r0, b974 <net_buf_get+0x24>
    b95e:	4604      	mov	r4, r0
	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);
    b960:	4f12      	ldr	r7, [pc, #72]	; (b9ac <net_buf_get+0x5c>)
    b962:	f8df 804c 	ldr.w	r8, [pc, #76]	; b9b0 <net_buf_get+0x60>
    b966:	f8df 904c 	ldr.w	r9, [pc, #76]	; b9b4 <net_buf_get+0x64>
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
    b96a:	7963      	ldrb	r3, [r4, #5]
    b96c:	f013 0301 	ands.w	r3, r3, #1
    b970:	d103      	bne.n	b97a <net_buf_get+0x2a>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
    b972:	6023      	str	r3, [r4, #0]

	return buf;
}
    b974:	4628      	mov	r0, r5
    b976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b97a:	2200      	movs	r2, #0
    b97c:	2300      	movs	r3, #0
    b97e:	4630      	mov	r0, r6
    b980:	f002 fdde 	bl	e540 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
    b984:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
    b986:	b958      	cbnz	r0, b9a0 <net_buf_get+0x50>
    b988:	4641      	mov	r1, r8
    b98a:	4648      	mov	r0, r9
    b98c:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    b990:	463a      	mov	r2, r7
    b992:	f005 fa23 	bl	10ddc <printk>
    b996:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    b99a:	4638      	mov	r0, r7
    b99c:	f005 fcb4 	bl	11308 <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
    b9a0:	7963      	ldrb	r3, [r4, #5]
    b9a2:	f023 0301 	bic.w	r3, r3, #1
    b9a6:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
    b9a8:	6824      	ldr	r4, [r4, #0]
    b9aa:	e7de      	b.n	b96a <net_buf_get+0x1a>
    b9ac:	00019137 	.word	0x00019137
    b9b0:	0001919f 	.word	0x0001919f
    b9b4:	00016493 	.word	0x00016493

0000b9b8 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
    b9b8:	b538      	push	{r3, r4, r5, lr}
    b9ba:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
    b9bc:	4604      	mov	r4, r0
    b9be:	b958      	cbnz	r0, b9d8 <net_buf_simple_reserve+0x20>
    b9c0:	490e      	ldr	r1, [pc, #56]	; (b9fc <net_buf_simple_reserve+0x44>)
    b9c2:	480f      	ldr	r0, [pc, #60]	; (ba00 <net_buf_simple_reserve+0x48>)
    b9c4:	f240 13bf 	movw	r3, #447	; 0x1bf
    b9c8:	4a0e      	ldr	r2, [pc, #56]	; (ba04 <net_buf_simple_reserve+0x4c>)
    b9ca:	f005 fa07 	bl	10ddc <printk>
    b9ce:	f240 11bf 	movw	r1, #447	; 0x1bf
    b9d2:	480c      	ldr	r0, [pc, #48]	; (ba04 <net_buf_simple_reserve+0x4c>)
    b9d4:	f005 fc98 	bl	11308 <assert_post_action>
	__ASSERT_NO_MSG(buf->len == 0U);
    b9d8:	88a3      	ldrh	r3, [r4, #4]
    b9da:	b15b      	cbz	r3, b9f4 <net_buf_simple_reserve+0x3c>
    b9dc:	490a      	ldr	r1, [pc, #40]	; (ba08 <net_buf_simple_reserve+0x50>)
    b9de:	4808      	ldr	r0, [pc, #32]	; (ba00 <net_buf_simple_reserve+0x48>)
    b9e0:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
    b9e4:	4a07      	ldr	r2, [pc, #28]	; (ba04 <net_buf_simple_reserve+0x4c>)
    b9e6:	f005 f9f9 	bl	10ddc <printk>
    b9ea:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
    b9ee:	4805      	ldr	r0, [pc, #20]	; (ba04 <net_buf_simple_reserve+0x4c>)
    b9f0:	f005 fc8a 	bl	11308 <assert_post_action>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
    b9f4:	68a3      	ldr	r3, [r4, #8]
    b9f6:	442b      	add	r3, r5
    b9f8:	6023      	str	r3, [r4, #0]
}
    b9fa:	bd38      	pop	{r3, r4, r5, pc}
    b9fc:	00019246 	.word	0x00019246
    ba00:	00016493 	.word	0x00016493
    ba04:	00019137 	.word	0x00019137
    ba08:	000191ab 	.word	0x000191ab

0000ba0c <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
    ba0c:	b538      	push	{r3, r4, r5, lr}
    ba0e:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
    ba10:	4605      	mov	r5, r0
    ba12:	b958      	cbnz	r0, ba2c <net_buf_put+0x20>
    ba14:	4913      	ldr	r1, [pc, #76]	; (ba64 <net_buf_put+0x58>)
    ba16:	4814      	ldr	r0, [pc, #80]	; (ba68 <net_buf_put+0x5c>)
    ba18:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
    ba1c:	4a13      	ldr	r2, [pc, #76]	; (ba6c <net_buf_put+0x60>)
    ba1e:	f005 f9dd 	bl	10ddc <printk>
    ba22:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
    ba26:	4811      	ldr	r0, [pc, #68]	; (ba6c <net_buf_put+0x60>)
    ba28:	f005 fc6e 	bl	11308 <assert_post_action>
	__ASSERT_NO_MSG(buf);
    ba2c:	b95c      	cbnz	r4, ba46 <net_buf_put+0x3a>
    ba2e:	4910      	ldr	r1, [pc, #64]	; (ba70 <net_buf_put+0x64>)
    ba30:	480d      	ldr	r0, [pc, #52]	; (ba68 <net_buf_put+0x5c>)
    ba32:	f240 13fd 	movw	r3, #509	; 0x1fd
    ba36:	4a0d      	ldr	r2, [pc, #52]	; (ba6c <net_buf_put+0x60>)
    ba38:	f005 f9d0 	bl	10ddc <printk>
    ba3c:	f240 11fd 	movw	r1, #509	; 0x1fd
    ba40:	480a      	ldr	r0, [pc, #40]	; (ba6c <net_buf_put+0x60>)
    ba42:	f005 fc61 	bl	11308 <assert_post_action>
{
    ba46:	4622      	mov	r2, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
    ba48:	6811      	ldr	r1, [r2, #0]
    ba4a:	b929      	cbnz	r1, ba58 <net_buf_put+0x4c>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
    ba4c:	4621      	mov	r1, r4
    ba4e:	4628      	mov	r0, r5
}
    ba50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_fifo_put_list(fifo, buf, tail);
    ba54:	f002 bd16 	b.w	e484 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
    ba58:	7953      	ldrb	r3, [r2, #5]
    ba5a:	f043 0301 	orr.w	r3, r3, #1
    ba5e:	7153      	strb	r3, [r2, #5]
    ba60:	460a      	mov	r2, r1
    ba62:	e7f1      	b.n	ba48 <net_buf_put+0x3c>
    ba64:	000191ba 	.word	0x000191ba
    ba68:	00016493 	.word	0x00016493
    ba6c:	00019137 	.word	0x00019137
    ba70:	00019246 	.word	0x00019246

0000ba74 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    ba74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
    ba78:	4605      	mov	r5, r0
    ba7a:	b328      	cbz	r0, bac8 <net_buf_unref+0x54>
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
    ba7c:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
    ba7e:	f04f 082c 	mov.w	r8, #44	; 0x2c
    ba82:	4e1b      	ldr	r6, [pc, #108]	; (baf0 <net_buf_unref+0x7c>)
		struct net_buf *frags = buf->frags;
    ba84:	462c      	mov	r4, r5
		if (--buf->ref > 0) {
    ba86:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
    ba88:	682d      	ldr	r5, [r5, #0]
		if (--buf->ref > 0) {
    ba8a:	3b01      	subs	r3, #1
    ba8c:	b2db      	uxtb	r3, r3
    ba8e:	7123      	strb	r3, [r4, #4]
    ba90:	b9c3      	cbnz	r3, bac4 <net_buf_unref+0x50>
		if (buf->__buf) {
    ba92:	6921      	ldr	r1, [r4, #16]
    ba94:	b159      	cbz	r1, baae <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
    ba96:	7963      	ldrb	r3, [r4, #5]
    ba98:	079b      	lsls	r3, r3, #30
    ba9a:	d407      	bmi.n	baac <net_buf_unref+0x38>
	pool->alloc->cb->unref(buf, data);
    ba9c:	79a3      	ldrb	r3, [r4, #6]
    ba9e:	4620      	mov	r0, r4
    baa0:	fb08 6303 	mla	r3, r8, r3, r6
    baa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    baa6:	681b      	ldr	r3, [r3, #0]
    baa8:	689b      	ldr	r3, [r3, #8]
    baaa:	4798      	blx	r3
			buf->__buf = NULL;
    baac:	6127      	str	r7, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
    baae:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
    bab0:	60a7      	str	r7, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		__ASSERT_NO_MSG(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
    bab2:	fb08 6300 	mla	r3, r8, r0, r6
    bab6:	6a1b      	ldr	r3, [r3, #32]
		buf->frags = NULL;
    bab8:	6027      	str	r7, [r4, #0]
		if (pool->destroy) {
    baba:	b19b      	cbz	r3, bae4 <net_buf_unref+0x70>
			pool->destroy(buf);
    babc:	4620      	mov	r0, r4
    babe:	4798      	blx	r3
	while (buf) {
    bac0:	2d00      	cmp	r5, #0
    bac2:	d1df      	bne.n	ba84 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
    bac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
    bac8:	490a      	ldr	r1, [pc, #40]	; (baf4 <net_buf_unref+0x80>)
    baca:	480b      	ldr	r0, [pc, #44]	; (baf8 <net_buf_unref+0x84>)
    bacc:	f44f 7303 	mov.w	r3, #524	; 0x20c
    bad0:	4a0a      	ldr	r2, [pc, #40]	; (bafc <net_buf_unref+0x88>)
    bad2:	f005 f983 	bl	10ddc <printk>
}
    bad6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
    bada:	f44f 7103 	mov.w	r1, #524	; 0x20c
    bade:	4807      	ldr	r0, [pc, #28]	; (bafc <net_buf_unref+0x88>)
    bae0:	f005 bc12 	b.w	11308 <assert_post_action>
	k_lifo_put(&pool->free, buf);
    bae4:	4621      	mov	r1, r4
    bae6:	fb00 6008 	mla	r0, r0, r8, r6
    baea:	f009 fa81 	bl	14ff0 <k_queue_prepend>
}
    baee:	e7e7      	b.n	bac0 <net_buf_unref+0x4c>
    baf0:	200005f0 	.word	0x200005f0
    baf4:	00019246 	.word	0x00019246
    baf8:	00016493 	.word	0x00016493
    bafc:	00019137 	.word	0x00019137

0000bb00 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
    bb00:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
    bb02:	4604      	mov	r4, r0
    bb04:	b958      	cbnz	r0, bb1e <net_buf_ref+0x1e>
    bb06:	4908      	ldr	r1, [pc, #32]	; (bb28 <net_buf_ref+0x28>)
    bb08:	4808      	ldr	r0, [pc, #32]	; (bb2c <net_buf_ref+0x2c>)
    bb0a:	f240 233b 	movw	r3, #571	; 0x23b
    bb0e:	4a08      	ldr	r2, [pc, #32]	; (bb30 <net_buf_ref+0x30>)
    bb10:	f005 f964 	bl	10ddc <printk>
    bb14:	f240 213b 	movw	r1, #571	; 0x23b
    bb18:	4805      	ldr	r0, [pc, #20]	; (bb30 <net_buf_ref+0x30>)
    bb1a:	f005 fbf5 	bl	11308 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
    bb1e:	7923      	ldrb	r3, [r4, #4]
	return buf;
}
    bb20:	4620      	mov	r0, r4
	buf->ref++;
    bb22:	3301      	adds	r3, #1
    bb24:	7123      	strb	r3, [r4, #4]
}
    bb26:	bd10      	pop	{r4, pc}
    bb28:	00019246 	.word	0x00019246
    bb2c:	00016493 	.word	0x00016493
    bb30:	00019137 	.word	0x00019137

0000bb34 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
    bb34:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
    bb36:	4604      	mov	r4, r0
    bb38:	b958      	cbnz	r0, bb52 <net_buf_frag_last+0x1e>
    bb3a:	4908      	ldr	r1, [pc, #32]	; (bb5c <net_buf_frag_last+0x28>)
    bb3c:	4808      	ldr	r0, [pc, #32]	; (bb60 <net_buf_frag_last+0x2c>)
    bb3e:	f44f 731e 	mov.w	r3, #632	; 0x278
    bb42:	4a08      	ldr	r2, [pc, #32]	; (bb64 <net_buf_frag_last+0x30>)
    bb44:	f005 f94a 	bl	10ddc <printk>
    bb48:	f44f 711e 	mov.w	r1, #632	; 0x278
    bb4c:	4805      	ldr	r0, [pc, #20]	; (bb64 <net_buf_frag_last+0x30>)
    bb4e:	f005 fbdb 	bl	11308 <assert_post_action>

	while (buf->frags) {
    bb52:	4620      	mov	r0, r4
    bb54:	6824      	ldr	r4, [r4, #0]
    bb56:	2c00      	cmp	r4, #0
    bb58:	d1fb      	bne.n	bb52 <net_buf_frag_last+0x1e>
		buf = buf->frags;
	}

	return buf;
}
    bb5a:	bd10      	pop	{r4, pc}
    bb5c:	00019246 	.word	0x00019246
    bb60:	00016493 	.word	0x00016493
    bb64:	00019137 	.word	0x00019137

0000bb68 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
    bb68:	b538      	push	{r3, r4, r5, lr}
    bb6a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
    bb6c:	4604      	mov	r4, r0
    bb6e:	b958      	cbnz	r0, bb88 <net_buf_frag_insert+0x20>
    bb70:	4910      	ldr	r1, [pc, #64]	; (bbb4 <net_buf_frag_insert+0x4c>)
    bb72:	4811      	ldr	r0, [pc, #68]	; (bbb8 <net_buf_frag_insert+0x50>)
    bb74:	f240 2383 	movw	r3, #643	; 0x283
    bb78:	4a10      	ldr	r2, [pc, #64]	; (bbbc <net_buf_frag_insert+0x54>)
    bb7a:	f005 f92f 	bl	10ddc <printk>
    bb7e:	f240 2183 	movw	r1, #643	; 0x283
    bb82:	480e      	ldr	r0, [pc, #56]	; (bbbc <net_buf_frag_insert+0x54>)
    bb84:	f005 fbc0 	bl	11308 <assert_post_action>
	__ASSERT_NO_MSG(frag);
    bb88:	b95d      	cbnz	r5, bba2 <net_buf_frag_insert+0x3a>
    bb8a:	490d      	ldr	r1, [pc, #52]	; (bbc0 <net_buf_frag_insert+0x58>)
    bb8c:	480a      	ldr	r0, [pc, #40]	; (bbb8 <net_buf_frag_insert+0x50>)
    bb8e:	f44f 7321 	mov.w	r3, #644	; 0x284
    bb92:	4a0a      	ldr	r2, [pc, #40]	; (bbbc <net_buf_frag_insert+0x54>)
    bb94:	f005 f922 	bl	10ddc <printk>
    bb98:	f44f 7121 	mov.w	r1, #644	; 0x284
    bb9c:	4807      	ldr	r0, [pc, #28]	; (bbbc <net_buf_frag_insert+0x54>)
    bb9e:	f005 fbb3 	bl	11308 <assert_post_action>

	if (parent->frags) {
    bba2:	6823      	ldr	r3, [r4, #0]
    bba4:	b123      	cbz	r3, bbb0 <net_buf_frag_insert+0x48>
		net_buf_frag_last(frag)->frags = parent->frags;
    bba6:	4628      	mov	r0, r5
    bba8:	f7ff ffc4 	bl	bb34 <net_buf_frag_last>
    bbac:	6823      	ldr	r3, [r4, #0]
    bbae:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
    bbb0:	6025      	str	r5, [r4, #0]
}
    bbb2:	bd38      	pop	{r3, r4, r5, pc}
    bbb4:	000191bf 	.word	0x000191bf
    bbb8:	00016493 	.word	0x00016493
    bbbc:	00019137 	.word	0x00019137
    bbc0:	000191e5 	.word	0x000191e5

0000bbc4 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
    bbc4:	b538      	push	{r3, r4, r5, lr}
    bbc6:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frag);
    bbc8:	460d      	mov	r5, r1
    bbca:	b959      	cbnz	r1, bbe4 <net_buf_frag_add+0x20>
    bbcc:	490c      	ldr	r1, [pc, #48]	; (bc00 <net_buf_frag_add+0x3c>)
    bbce:	480d      	ldr	r0, [pc, #52]	; (bc04 <net_buf_frag_add+0x40>)
    bbd0:	f240 238f 	movw	r3, #655	; 0x28f
    bbd4:	4a0c      	ldr	r2, [pc, #48]	; (bc08 <net_buf_frag_add+0x44>)
    bbd6:	f005 f901 	bl	10ddc <printk>
    bbda:	f240 218f 	movw	r1, #655	; 0x28f
    bbde:	480a      	ldr	r0, [pc, #40]	; (bc08 <net_buf_frag_add+0x44>)
    bbe0:	f005 fb92 	bl	11308 <assert_post_action>

	if (!head) {
    bbe4:	b924      	cbnz	r4, bbf0 <net_buf_frag_add+0x2c>
		return net_buf_ref(frag);
    bbe6:	4628      	mov	r0, r5
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
    bbe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
    bbec:	f7ff bf88 	b.w	bb00 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
    bbf0:	4620      	mov	r0, r4
    bbf2:	f7ff ff9f 	bl	bb34 <net_buf_frag_last>
    bbf6:	4629      	mov	r1, r5
    bbf8:	f7ff ffb6 	bl	bb68 <net_buf_frag_insert>
}
    bbfc:	4620      	mov	r0, r4
    bbfe:	bd38      	pop	{r3, r4, r5, pc}
    bc00:	000191e5 	.word	0x000191e5
    bc04:	00016493 	.word	0x00016493
    bc08:	00019137 	.word	0x00019137

0000bc0c <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
    bc0c:	b538      	push	{r3, r4, r5, lr}
    bc0e:	4605      	mov	r5, r0
	struct net_buf *next_frag;

	__ASSERT_NO_MSG(frag);
    bc10:	460c      	mov	r4, r1
    bc12:	b959      	cbnz	r1, bc2c <net_buf_frag_del+0x20>
    bc14:	4919      	ldr	r1, [pc, #100]	; (bc7c <net_buf_frag_del+0x70>)
    bc16:	481a      	ldr	r0, [pc, #104]	; (bc80 <net_buf_frag_del+0x74>)
    bc18:	f44f 7329 	mov.w	r3, #676	; 0x2a4
    bc1c:	4a19      	ldr	r2, [pc, #100]	; (bc84 <net_buf_frag_del+0x78>)
    bc1e:	f005 f8dd 	bl	10ddc <printk>
    bc22:	f44f 7129 	mov.w	r1, #676	; 0x2a4
    bc26:	4817      	ldr	r0, [pc, #92]	; (bc84 <net_buf_frag_del+0x78>)
    bc28:	f005 fb6e 	bl	11308 <assert_post_action>

	if (parent) {
    bc2c:	b1f5      	cbz	r5, bc6c <net_buf_frag_del+0x60>
		__ASSERT_NO_MSG(parent->frags);
    bc2e:	682b      	ldr	r3, [r5, #0]
    bc30:	b95b      	cbnz	r3, bc4a <net_buf_frag_del+0x3e>
    bc32:	4915      	ldr	r1, [pc, #84]	; (bc88 <net_buf_frag_del+0x7c>)
    bc34:	4812      	ldr	r0, [pc, #72]	; (bc80 <net_buf_frag_del+0x74>)
    bc36:	f240 23a7 	movw	r3, #679	; 0x2a7
    bc3a:	4a12      	ldr	r2, [pc, #72]	; (bc84 <net_buf_frag_del+0x78>)
    bc3c:	f005 f8ce 	bl	10ddc <printk>
    bc40:	f240 21a7 	movw	r1, #679	; 0x2a7
    bc44:	480f      	ldr	r0, [pc, #60]	; (bc84 <net_buf_frag_del+0x78>)
    bc46:	f005 fb5f 	bl	11308 <assert_post_action>
		__ASSERT_NO_MSG(parent->frags == frag);
    bc4a:	682b      	ldr	r3, [r5, #0]
    bc4c:	42a3      	cmp	r3, r4
    bc4e:	d00b      	beq.n	bc68 <net_buf_frag_del+0x5c>
    bc50:	490e      	ldr	r1, [pc, #56]	; (bc8c <net_buf_frag_del+0x80>)
    bc52:	480b      	ldr	r0, [pc, #44]	; (bc80 <net_buf_frag_del+0x74>)
    bc54:	f44f 732a 	mov.w	r3, #680	; 0x2a8
    bc58:	4a0a      	ldr	r2, [pc, #40]	; (bc84 <net_buf_frag_del+0x78>)
    bc5a:	f005 f8bf 	bl	10ddc <printk>
    bc5e:	f44f 712a 	mov.w	r1, #680	; 0x2a8
    bc62:	4808      	ldr	r0, [pc, #32]	; (bc84 <net_buf_frag_del+0x78>)
    bc64:	f005 fb50 	bl	11308 <assert_post_action>
		parent->frags = frag->frags;
    bc68:	6823      	ldr	r3, [r4, #0]
    bc6a:	602b      	str	r3, [r5, #0]
	}

	next_frag = frag->frags;

	frag->frags = NULL;
    bc6c:	2300      	movs	r3, #0
	next_frag = frag->frags;
    bc6e:	6825      	ldr	r5, [r4, #0]

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
    bc70:	4620      	mov	r0, r4
	frag->frags = NULL;
    bc72:	6023      	str	r3, [r4, #0]
	net_buf_unref(frag);
    bc74:	f7ff fefe 	bl	ba74 <net_buf_unref>
#endif

	return next_frag;
}
    bc78:	4628      	mov	r0, r5
    bc7a:	bd38      	pop	{r3, r4, r5, pc}
    bc7c:	000191e5 	.word	0x000191e5
    bc80:	00016493 	.word	0x00016493
    bc84:	00019137 	.word	0x00019137
    bc88:	000191c6 	.word	0x000191c6
    bc8c:	000191d4 	.word	0x000191d4

0000bc90 <net_buf_simple_push>:

	sys_put_be64(val, net_buf_simple_add(buf, sizeof(val)));
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
    bc90:	b538      	push	{r3, r4, r5, lr}
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
    bc92:	6882      	ldr	r2, [r0, #8]
    bc94:	6803      	ldr	r3, [r0, #0]
{
    bc96:	4604      	mov	r4, r0
	return buf->data - buf->__buf;
    bc98:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
    bc9a:	4299      	cmp	r1, r3
{
    bc9c:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
    bc9e:	d90b      	bls.n	bcb8 <net_buf_simple_push+0x28>
    bca0:	4909      	ldr	r1, [pc, #36]	; (bcc8 <net_buf_simple_push+0x38>)
    bca2:	480a      	ldr	r0, [pc, #40]	; (bccc <net_buf_simple_push+0x3c>)
    bca4:	f240 337d 	movw	r3, #893	; 0x37d
    bca8:	4a09      	ldr	r2, [pc, #36]	; (bcd0 <net_buf_simple_push+0x40>)
    bcaa:	f005 f897 	bl	10ddc <printk>
    bcae:	f240 317d 	movw	r1, #893	; 0x37d
    bcb2:	4807      	ldr	r0, [pc, #28]	; (bcd0 <net_buf_simple_push+0x40>)
    bcb4:	f005 fb28 	bl	11308 <assert_post_action>
	buf->data -= len;
    bcb8:	6820      	ldr	r0, [r4, #0]
	buf->len += len;
    bcba:	88a1      	ldrh	r1, [r4, #4]
	buf->data -= len;
    bcbc:	1b40      	subs	r0, r0, r5
	buf->len += len;
    bcbe:	440d      	add	r5, r1
	buf->data -= len;
    bcc0:	6020      	str	r0, [r4, #0]
	buf->len += len;
    bcc2:	80a5      	strh	r5, [r4, #4]
}
    bcc4:	bd38      	pop	{r3, r4, r5, pc}
    bcc6:	bf00      	nop
    bcc8:	000191ea 	.word	0x000191ea
    bccc:	00016493 	.word	0x00016493
    bcd0:	00019137 	.word	0x00019137

0000bcd4 <net_buf_simple_pull>:
{
    bcd4:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf->len >= len);
    bcd6:	8883      	ldrh	r3, [r0, #4]
{
    bcd8:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->len >= len);
    bcda:	428b      	cmp	r3, r1
{
    bcdc:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
    bcde:	d20b      	bcs.n	bcf8 <net_buf_simple_pull+0x24>
    bce0:	4909      	ldr	r1, [pc, #36]	; (bd08 <net_buf_simple_pull+0x34>)
    bce2:	480a      	ldr	r0, [pc, #40]	; (bd0c <net_buf_simple_pull+0x38>)
    bce4:	f240 33d5 	movw	r3, #981	; 0x3d5
    bce8:	4a09      	ldr	r2, [pc, #36]	; (bd10 <net_buf_simple_pull+0x3c>)
    bcea:	f005 f877 	bl	10ddc <printk>
    bcee:	f240 31d5 	movw	r1, #981	; 0x3d5
    bcf2:	4807      	ldr	r0, [pc, #28]	; (bd10 <net_buf_simple_pull+0x3c>)
    bcf4:	f005 fb08 	bl	11308 <assert_post_action>
	buf->len -= len;
    bcf8:	88a3      	ldrh	r3, [r4, #4]
	return buf->data += len;
    bcfa:	6820      	ldr	r0, [r4, #0]
	buf->len -= len;
    bcfc:	1b5b      	subs	r3, r3, r5
	return buf->data += len;
    bcfe:	4428      	add	r0, r5
	buf->len -= len;
    bd00:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
    bd02:	6020      	str	r0, [r4, #0]
}
    bd04:	bd38      	pop	{r3, r4, r5, pc}
    bd06:	bf00      	nop
    bd08:	0001920e 	.word	0x0001920e
    bd0c:	00016493 	.word	0x00016493
    bd10:	00019137 	.word	0x00019137

0000bd14 <net_buf_simple_pull_mem>:
	__ASSERT_NO_MSG(buf->len >= len);
    bd14:	8883      	ldrh	r3, [r0, #4]
{
    bd16:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(buf->len >= len);
    bd18:	428b      	cmp	r3, r1
{
    bd1a:	4604      	mov	r4, r0
    bd1c:	460d      	mov	r5, r1
	void *data = buf->data;
    bd1e:	6806      	ldr	r6, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
    bd20:	d20b      	bcs.n	bd3a <net_buf_simple_pull_mem+0x26>
    bd22:	490a      	ldr	r1, [pc, #40]	; (bd4c <net_buf_simple_pull_mem+0x38>)
    bd24:	480a      	ldr	r0, [pc, #40]	; (bd50 <net_buf_simple_pull_mem+0x3c>)
    bd26:	f240 33e1 	movw	r3, #993	; 0x3e1
    bd2a:	4a0a      	ldr	r2, [pc, #40]	; (bd54 <net_buf_simple_pull_mem+0x40>)
    bd2c:	f005 f856 	bl	10ddc <printk>
    bd30:	f240 31e1 	movw	r1, #993	; 0x3e1
    bd34:	4807      	ldr	r0, [pc, #28]	; (bd54 <net_buf_simple_pull_mem+0x40>)
    bd36:	f005 fae7 	bl	11308 <assert_post_action>
	buf->len -= len;
    bd3a:	88a3      	ldrh	r3, [r4, #4]
	buf->data += len;
    bd3c:	6821      	ldr	r1, [r4, #0]
	buf->len -= len;
    bd3e:	1b5b      	subs	r3, r3, r5
	buf->data += len;
    bd40:	4429      	add	r1, r5
}
    bd42:	4630      	mov	r0, r6
	buf->len -= len;
    bd44:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
    bd46:	6021      	str	r1, [r4, #0]
}
    bd48:	bd70      	pop	{r4, r5, r6, pc}
    bd4a:	bf00      	nop
    bd4c:	0001920e 	.word	0x0001920e
    bd50:	00016493 	.word	0x00016493
    bd54:	00019137 	.word	0x00019137

0000bd58 <net_buf_simple_add>:
{
    bd58:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
    bd5a:	6803      	ldr	r3, [r0, #0]
    bd5c:	8886      	ldrh	r6, [r0, #4]
    bd5e:	4604      	mov	r4, r0
    bd60:	460d      	mov	r5, r1
    bd62:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
    bd64:	f008 f956 	bl	14014 <net_buf_simple_tailroom>
    bd68:	4288      	cmp	r0, r1
    bd6a:	d20b      	bcs.n	bd84 <net_buf_simple_add+0x2c>
    bd6c:	4908      	ldr	r1, [pc, #32]	; (bd90 <net_buf_simple_add+0x38>)
    bd6e:	4809      	ldr	r0, [pc, #36]	; (bd94 <net_buf_simple_add+0x3c>)
    bd70:	f240 3319 	movw	r3, #793	; 0x319
    bd74:	4a08      	ldr	r2, [pc, #32]	; (bd98 <net_buf_simple_add+0x40>)
    bd76:	f005 f831 	bl	10ddc <printk>
    bd7a:	f240 3119 	movw	r1, #793	; 0x319
    bd7e:	4806      	ldr	r0, [pc, #24]	; (bd98 <net_buf_simple_add+0x40>)
    bd80:	f005 fac2 	bl	11308 <assert_post_action>
	buf->len += len;
    bd84:	88a1      	ldrh	r1, [r4, #4]
}
    bd86:	4630      	mov	r0, r6
	buf->len += len;
    bd88:	440d      	add	r5, r1
    bd8a:	80a5      	strh	r5, [r4, #4]
}
    bd8c:	bd70      	pop	{r4, r5, r6, pc}
    bd8e:	bf00      	nop
    bd90:	0001921e 	.word	0x0001921e
    bd94:	00016493 	.word	0x00016493
    bd98:	00019137 	.word	0x00019137

0000bd9c <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    bd9c:	6802      	ldr	r2, [r0, #0]
{
    bd9e:	b510      	push	{r4, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
    bda0:	0953      	lsrs	r3, r2, #5
{
    bda2:	4604      	mov	r4, r0
    switch (port)
    bda4:	d01e      	beq.n	bde4 <nrf_gpio_pin_port_decode+0x48>
    bda6:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    bda8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    bdac:	bf18      	it	ne
    bdae:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
    bdb0:	f002 021f 	and.w	r2, r2, #31

    return (mask & (1UL << pin_number)) ? true : false;
    bdb4:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    bdb6:	07db      	lsls	r3, r3, #31
    bdb8:	d40b      	bmi.n	bdd2 <nrf_gpio_pin_port_decode+0x36>
    bdba:	490c      	ldr	r1, [pc, #48]	; (bdec <nrf_gpio_pin_port_decode+0x50>)
    bdbc:	480c      	ldr	r0, [pc, #48]	; (bdf0 <nrf_gpio_pin_port_decode+0x54>)
    bdbe:	f240 230d 	movw	r3, #525	; 0x20d
    bdc2:	4a0c      	ldr	r2, [pc, #48]	; (bdf4 <nrf_gpio_pin_port_decode+0x58>)
    bdc4:	f005 f80a 	bl	10ddc <printk>
    bdc8:	f240 210d 	movw	r1, #525	; 0x20d
    bdcc:	4809      	ldr	r0, [pc, #36]	; (bdf4 <nrf_gpio_pin_port_decode+0x58>)
    bdce:	f005 fa9b 	bl	11308 <assert_post_action>
    if (*p_pin < P0_PIN_NUM)
    bdd2:	6823      	ldr	r3, [r4, #0]
    bdd4:	2b1f      	cmp	r3, #31
        *p_pin = *p_pin & 0x1F;
    bdd6:	bf85      	ittet	hi
    bdd8:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
    bddc:	4806      	ldrhi	r0, [pc, #24]	; (bdf8 <nrf_gpio_pin_port_decode+0x5c>)
        return NRF_P0;
    bdde:	4807      	ldrls	r0, [pc, #28]	; (bdfc <nrf_gpio_pin_port_decode+0x60>)
        *p_pin = *p_pin & 0x1F;
    bde0:	6023      	strhi	r3, [r4, #0]
}
    bde2:	bd10      	pop	{r4, pc}
    switch (port)
    bde4:	f04f 33ff 	mov.w	r3, #4294967295
    bde8:	e7e2      	b.n	bdb0 <nrf_gpio_pin_port_decode+0x14>
    bdea:	bf00      	nop
    bdec:	0001927d 	.word	0x0001927d
    bdf0:	00016493 	.word	0x00016493
    bdf4:	0001924a 	.word	0x0001924a
    bdf8:	50842800 	.word	0x50842800
    bdfc:	50842500 	.word	0x50842500

0000be00 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    be00:	b570      	push	{r4, r5, r6, lr}
    be02:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    be04:	460c      	mov	r4, r1
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    be06:	68c5      	ldr	r5, [r0, #12]
    be08:	b961      	cbnz	r1, be24 <gpio_nrfx_manage_callback+0x24>
    be0a:	4922      	ldr	r1, [pc, #136]	; (be94 <gpio_nrfx_manage_callback+0x94>)
    be0c:	2324      	movs	r3, #36	; 0x24
    be0e:	4a22      	ldr	r2, [pc, #136]	; (be98 <gpio_nrfx_manage_callback+0x98>)
    be10:	4822      	ldr	r0, [pc, #136]	; (be9c <gpio_nrfx_manage_callback+0x9c>)
    be12:	f004 ffe3 	bl	10ddc <printk>
    be16:	4822      	ldr	r0, [pc, #136]	; (bea0 <gpio_nrfx_manage_callback+0xa0>)
    be18:	f004 ffe0 	bl	10ddc <printk>
    be1c:	2124      	movs	r1, #36	; 0x24
    be1e:	481e      	ldr	r0, [pc, #120]	; (be98 <gpio_nrfx_manage_callback+0x98>)
    be20:	f005 fa72 	bl	11308 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    be24:	6863      	ldr	r3, [r4, #4]
    be26:	b963      	cbnz	r3, be42 <gpio_nrfx_manage_callback+0x42>
    be28:	491e      	ldr	r1, [pc, #120]	; (bea4 <gpio_nrfx_manage_callback+0xa4>)
    be2a:	2325      	movs	r3, #37	; 0x25
    be2c:	4a1a      	ldr	r2, [pc, #104]	; (be98 <gpio_nrfx_manage_callback+0x98>)
    be2e:	481b      	ldr	r0, [pc, #108]	; (be9c <gpio_nrfx_manage_callback+0x9c>)
    be30:	f004 ffd4 	bl	10ddc <printk>
    be34:	481c      	ldr	r0, [pc, #112]	; (bea8 <gpio_nrfx_manage_callback+0xa8>)
    be36:	f004 ffd1 	bl	10ddc <printk>
    be3a:	2125      	movs	r1, #37	; 0x25
    be3c:	4816      	ldr	r0, [pc, #88]	; (be98 <gpio_nrfx_manage_callback+0x98>)
    be3e:	f005 fa63 	bl	11308 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
    be42:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    be44:	b15b      	cbz	r3, be5e <gpio_nrfx_manage_callback+0x5e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    be46:	2200      	movs	r2, #0
    be48:	429c      	cmp	r4, r3
    be4a:	d113      	bne.n	be74 <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
    be4c:	6823      	ldr	r3, [r4, #0]
    be4e:	b95a      	cbnz	r2, be68 <gpio_nrfx_manage_callback+0x68>
    be50:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
    be52:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    be54:	4294      	cmp	r4, r2
    be56:	d100      	bne.n	be5a <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
    be58:	60ab      	str	r3, [r5, #8]
	parent->next = child;
    be5a:	2300      	movs	r3, #0
    be5c:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    be5e:	b976      	cbnz	r6, be7e <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    be60:	2000      	movs	r0, #0
				     callback, set);
}
    be62:	bd70      	pop	{r4, r5, r6, pc}
    be64:	460b      	mov	r3, r1
    be66:	e7ef      	b.n	be48 <gpio_nrfx_manage_callback+0x48>
    be68:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    be6a:	68ab      	ldr	r3, [r5, #8]
    be6c:	429c      	cmp	r4, r3
	list->tail = node;
    be6e:	bf08      	it	eq
    be70:	60aa      	streq	r2, [r5, #8]
}
    be72:	e7f2      	b.n	be5a <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    be74:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    be76:	461a      	mov	r2, r3
    be78:	2900      	cmp	r1, #0
    be7a:	d1f3      	bne.n	be64 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
    be7c:	b13e      	cbz	r6, be8e <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
    be7e:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    be80:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    be82:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
    be84:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    be86:	2800      	cmp	r0, #0
    be88:	d1ea      	bne.n	be60 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    be8a:	60ac      	str	r4, [r5, #8]
}
    be8c:	e7e9      	b.n	be62 <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
    be8e:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    be92:	e7e6      	b.n	be62 <gpio_nrfx_manage_callback+0x62>
    be94:	000192cd 	.word	0x000192cd
    be98:	000192a0 	.word	0x000192a0
    be9c:	00016493 	.word	0x00016493
    bea0:	000192d6 	.word	0x000192d6
    bea4:	000192e5 	.word	0x000192e5
    bea8:	000192f7 	.word	0x000192f7

0000beac <fire_callbacks>:

	return out;
}

static inline void fire_callbacks(struct device *port, u32_t pins)
{
    beac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct gpio_nrfx_data *data = get_port_data(port);
    beb0:	f8d0 800c 	ldr.w	r8, [r0, #12]
{
    beb4:	4606      	mov	r6, r0
	/* Instead of calling the common gpio_fire_callbacks() function,
	 * iterate the list of callbacks locally, to be able to perform
	 * additional masking of the pins and to call handlers only for
	 * the currently enabled callbacks.
	 */
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    beb6:	f8d8 4004 	ldr.w	r4, [r8, #4]
{
    beba:	460f      	mov	r7, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    bebc:	b33c      	cbz	r4, bf0e <fire_callbacks+0x62>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    bebe:	6825      	ldr	r5, [r4, #0]
		/* Check currently enabled callbacks (data->int_en) in each
		 * iteration, as some callbacks may get disabled also in any
		 * of the handlers called here.
		 */
		if ((cb->pin_mask & pins) & data->int_en) {
			__ASSERT(cb->handler, "No callback handler!");
    bec0:	f8df 9054 	ldr.w	r9, [pc, #84]	; bf18 <fire_callbacks+0x6c>
    bec4:	f8df a054 	ldr.w	sl, [pc, #84]	; bf1c <fire_callbacks+0x70>
    bec8:	f8df b054 	ldr.w	fp, [pc, #84]	; bf20 <fire_callbacks+0x74>
		if ((cb->pin_mask & pins) & data->int_en) {
    becc:	f8d8 3010 	ldr.w	r3, [r8, #16]
    bed0:	68a2      	ldr	r2, [r4, #8]
    bed2:	403b      	ands	r3, r7
    bed4:	4213      	tst	r3, r2
    bed6:	d016      	beq.n	bf06 <fire_callbacks+0x5a>
			__ASSERT(cb->handler, "No callback handler!");
    bed8:	6863      	ldr	r3, [r4, #4]
    beda:	b973      	cbnz	r3, befa <fire_callbacks+0x4e>
    bedc:	4651      	mov	r1, sl
    bede:	f240 13a7 	movw	r3, #423	; 0x1a7
    bee2:	464a      	mov	r2, r9
    bee4:	4658      	mov	r0, fp
    bee6:	f004 ff79 	bl	10ddc <printk>
    beea:	480a      	ldr	r0, [pc, #40]	; (bf14 <fire_callbacks+0x68>)
    beec:	f004 ff76 	bl	10ddc <printk>
    bef0:	f240 11a7 	movw	r1, #423	; 0x1a7
    bef4:	4648      	mov	r0, r9
    bef6:	f005 fa07 	bl	11308 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    befa:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    befe:	4621      	mov	r1, r4
    bf00:	4630      	mov	r0, r6
    bf02:	403a      	ands	r2, r7
    bf04:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    bf06:	b115      	cbz	r5, bf0e <fire_callbacks+0x62>
    bf08:	462c      	mov	r4, r5
    bf0a:	682d      	ldr	r5, [r5, #0]
    bf0c:	e7de      	b.n	becc <fire_callbacks+0x20>
		}
	}
}
    bf0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bf12:	bf00      	nop
    bf14:	000192f7 	.word	0x000192f7
    bf18:	0001930e 	.word	0x0001930e
    bf1c:	0001933a 	.word	0x0001933a
    bf20:	00016493 	.word	0x00016493

0000bf24 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(struct device *port)
{
    bf24:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    bf26:	4b09      	ldr	r3, [pc, #36]	; (bf4c <gpio_nrfx_init+0x28>)
    bf28:	781a      	ldrb	r2, [r3, #0]
    bf2a:	b96a      	cbnz	r2, bf48 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    bf2c:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    bf2e:	200d      	movs	r0, #13
		gpio_initialized = true;
    bf30:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    bf32:	2105      	movs	r1, #5
    bf34:	f7f6 ff4e 	bl	2dd4 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    bf38:	200d      	movs	r0, #13
    bf3a:	f7f6 ff3b 	bl	2db4 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    bf3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    bf42:	4b03      	ldr	r3, [pc, #12]	; (bf50 <gpio_nrfx_init+0x2c>)
    bf44:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    bf48:	2000      	movs	r0, #0
    bf4a:	bd08      	pop	{r3, pc}
    bf4c:	20002012 	.word	0x20002012
    bf50:	5000d000 	.word	0x5000d000

0000bf54 <gpiote_pin_int_cfg>:
{
    bf54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    bf56:	6843      	ldr	r3, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
    bf58:	68c7      	ldr	r7, [r0, #12]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    bf5a:	7a18      	ldrb	r0, [r3, #8]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    bf5c:	2300      	movs	r3, #0
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    bf5e:	f001 051f 	and.w	r5, r1, #31
{
    bf62:	460e      	mov	r6, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    bf64:	4946      	ldr	r1, [pc, #280]	; (c080 <gpiote_pin_int_cfg+0x12c>)
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    bf66:	ea45 1540 	orr.w	r5, r5, r0, lsl #5
    bf6a:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
    bf6e:	b2d2      	uxtb	r2, r2
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    bf70:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    bf74:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    bf78:	f3c0 2005 	ubfx	r0, r0, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    bf7c:	4285      	cmp	r5, r0
    bf7e:	d169      	bne.n	c054 <gpiote_pin_int_cfg+0x100>
		    && (intenset & BIT(i))) {
    bf80:	fa22 f003 	lsr.w	r0, r2, r3
    bf84:	07c0      	lsls	r0, r0, #31
    bf86:	d565      	bpl.n	c054 <gpiote_pin_int_cfg+0x100>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    bf88:	009a      	lsls	r2, r3, #2
    bf8a:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    bf8e:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    bf92:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    bf96:	f020 0001 	bic.w	r0, r0, #1
    bf9a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    bf9e:	2201      	movs	r2, #1
    bfa0:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENCLR = mask;
    bfa4:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    bfa8:	4628      	mov	r0, r5
    bfaa:	2100      	movs	r1, #0
    bfac:	f008 f8a3 	bl	140f6 <nrf_gpio_cfg_sense_set>
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
    bfb0:	68fb      	ldr	r3, [r7, #12]
    bfb2:	40f3      	lsrs	r3, r6
    bfb4:	f013 0001 	ands.w	r0, r3, #1
    bfb8:	d04b      	beq.n	c052 <gpiote_pin_int_cfg+0xfe>
    bfba:	693b      	ldr	r3, [r7, #16]
    bfbc:	40f3      	lsrs	r3, r6
    bfbe:	f013 0001 	ands.w	r0, r3, #1
    bfc2:	d046      	beq.n	c052 <gpiote_pin_int_cfg+0xfe>
		if (data->trig_edge & BIT(pin)) {
    bfc4:	69bb      	ldr	r3, [r7, #24]
    bfc6:	40f3      	lsrs	r3, r6
    bfc8:	f013 0401 	ands.w	r4, r3, #1
    bfcc:	d04c      	beq.n	c068 <gpiote_pin_int_cfg+0x114>
			if (data->double_edge & BIT(pin)) {
    bfce:	69fb      	ldr	r3, [r7, #28]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    bfd0:	2400      	movs	r4, #0
			if (data->double_edge & BIT(pin)) {
    bfd2:	40f3      	lsrs	r3, r6
    bfd4:	07db      	lsls	r3, r3, #31
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    bfd6:	bf4c      	ite	mi
    bfd8:	2603      	movmi	r6, #3
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    bfda:	6979      	ldrpl	r1, [r7, #20]
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
    bfdc:	4f28      	ldr	r7, [pc, #160]	; (c080 <gpiote_pin_int_cfg+0x12c>)
    bfde:	bf5f      	itttt	pl
    bfe0:	fa21 f606 	lsrpl.w	r6, r1, r6
    bfe4:	f006 0601 	andpl.w	r6, r6, #1
    bfe8:	f1c6 0602 	rsbpl	r6, r6, #2
    bfec:	b2f6      	uxtbpl	r6, r6
    bfee:	f504 73a2 	add.w	r3, r4, #324	; 0x144
    bff2:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
    bff6:	f010 0003 	ands.w	r0, r0, #3
    bffa:	d12f      	bne.n	c05c <gpiote_pin_int_cfg+0x108>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    bffc:	00a2      	lsls	r2, r4, #2
    bffe:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    c002:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    c006:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    c00a:	022d      	lsls	r5, r5, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    c00c:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    c010:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    c014:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    c018:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    c01c:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
    c020:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    c024:	430e      	orrs	r6, r1
			nrf_gpiote_event_t evt =
    c026:	f104 0140 	add.w	r1, r4, #64	; 0x40
    c02a:	0089      	lsls	r1, r1, #2
    return ((uint32_t)p_reg + event);
    c02c:	b289      	uxth	r1, r1
    c02e:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    c032:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    c036:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    c03a:	6008      	str	r0, [r1, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    c03c:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    c040:	f041 0101 	orr.w	r1, r1, #1
    c044:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    c048:	2201      	movs	r2, #1
    c04a:	fa02 f404 	lsl.w	r4, r2, r4
    p_reg->INTENSET = mask;
    c04e:	f8c7 4304 	str.w	r4, [r7, #772]	; 0x304
}
    c052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    c054:	3301      	adds	r3, #1
    c056:	2b08      	cmp	r3, #8
    c058:	d18a      	bne.n	bf70 <gpiote_pin_int_cfg+0x1c>
    c05a:	e7a5      	b.n	bfa8 <gpiote_pin_int_cfg+0x54>
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    c05c:	3401      	adds	r4, #1
    c05e:	2c08      	cmp	r4, #8
    c060:	d1c5      	bne.n	bfee <gpiote_pin_int_cfg+0x9a>
	return -ENODEV;
    c062:	f06f 0012 	mvn.w	r0, #18
    c066:	e7f4      	b.n	c052 <gpiote_pin_int_cfg+0xfe>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    c068:	6979      	ldr	r1, [r7, #20]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    c06a:	4628      	mov	r0, r5
	if ((BIT(pin) & data->int_active_level) != 0U) {
    c06c:	40f1      	lsrs	r1, r6
    c06e:	f001 0101 	and.w	r1, r1, #1
    c072:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    c076:	b2c9      	uxtb	r1, r1
    c078:	f008 f83d 	bl	140f6 <nrf_gpio_cfg_sense_set>
	int res = 0;
    c07c:	4620      	mov	r0, r4
    c07e:	e7e8      	b.n	c052 <gpiote_pin_int_cfg+0xfe>
    c080:	5000d000 	.word	0x5000d000

0000c084 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    c084:	4b2e      	ldr	r3, [pc, #184]	; (c140 <gpio_nrfx_config+0xbc>)
{
    c086:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    c088:	4c2e      	ldr	r4, [pc, #184]	; (c144 <gpio_nrfx_config+0xc0>)
    c08a:	4013      	ands	r3, r2
    c08c:	42a3      	cmp	r3, r4
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    c08e:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    c090:	d044      	beq.n	c11c <gpio_nrfx_config+0x98>
    c092:	d80e      	bhi.n	c0b2 <gpio_nrfx_config+0x2e>
    c094:	2b06      	cmp	r3, #6
    c096:	d043      	beq.n	c120 <gpio_nrfx_config+0x9c>
    c098:	d806      	bhi.n	c0a8 <gpio_nrfx_config+0x24>
    c09a:	2b00      	cmp	r3, #0
    c09c:	d040      	beq.n	c120 <gpio_nrfx_config+0x9c>
    c09e:	2b02      	cmp	r3, #2
    c0a0:	d040      	beq.n	c124 <gpio_nrfx_config+0xa0>
    c0a2:	f06f 0015 	mvn.w	r0, #21
    c0a6:	e037      	b.n	c118 <gpio_nrfx_config+0x94>
    c0a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    c0ac:	d1f9      	bne.n	c0a2 <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0S1;
    c0ae:	2401      	movs	r4, #1
    c0b0:	e009      	b.n	c0c6 <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    c0b2:	4c25      	ldr	r4, [pc, #148]	; (c148 <gpio_nrfx_config+0xc4>)
    c0b4:	42a3      	cmp	r3, r4
    c0b6:	d037      	beq.n	c128 <gpio_nrfx_config+0xa4>
    c0b8:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    c0bc:	d036      	beq.n	c12c <gpio_nrfx_config+0xa8>
    c0be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    c0c2:	d1ee      	bne.n	c0a2 <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_S0H1;
    c0c4:	2402      	movs	r4, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    c0c6:	06d5      	lsls	r5, r2, #27
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    c0c8:	f482 7380 	eor.w	r3, r2, #256	; 0x100
		pull = NRF_GPIO_PIN_PULLUP;
    c0cc:	bf4c      	ite	mi
    c0ce:	2603      	movmi	r6, #3
		pull = NRF_GPIO_PIN_NOPULL;
    c0d0:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    c0d4:	f3c3 2700 	ubfx	r7, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    c0d8:	0593      	lsls	r3, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
    c0da:	f3c2 2540 	ubfx	r5, r2, #9, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    c0de:	d507      	bpl.n	c0f0 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    c0e0:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    c0e2:	f8d0 c004 	ldr.w	ip, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    c0e6:	d523      	bpl.n	c130 <gpio_nrfx_config+0xac>
			nrf_gpio_port_out_set(reg, BIT(pin));
    c0e8:	2301      	movs	r3, #1
    c0ea:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    c0ec:	f8cc 3008 	str.w	r3, [ip, #8]
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
    c0f0:	7a03      	ldrb	r3, [r0, #8]
    c0f2:	f001 011f 	and.w	r1, r1, #31
    c0f6:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    c0fa:	a801      	add	r0, sp, #4
    c0fc:	9101      	str	r1, [sp, #4]
    c0fe:	f7ff fe4d 	bl	bd9c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    c102:	9a01      	ldr	r2, [sp, #4]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    c104:	ea45 0347 	orr.w	r3, r5, r7, lsl #1
    c108:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    c10c:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    c110:	3280      	adds	r2, #128	; 0x80
    c112:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	return 0;
    c116:	2000      	movs	r0, #0
}
    c118:	b003      	add	sp, #12
    c11a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
    c11c:	2407      	movs	r4, #7
    c11e:	e7d2      	b.n	c0c6 <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    c120:	461c      	mov	r4, r3
    c122:	e7d0      	b.n	c0c6 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
    c124:	2404      	movs	r4, #4
    c126:	e7ce      	b.n	c0c6 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
    c128:	2405      	movs	r4, #5
    c12a:	e7cc      	b.n	c0c6 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_H0H1;
    c12c:	2403      	movs	r4, #3
    c12e:	e7ca      	b.n	c0c6 <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    c130:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    c132:	bf42      	ittt	mi
    c134:	2301      	movmi	r3, #1
    c136:	408b      	lslmi	r3, r1
    p_reg->OUTCLR = clr_mask;
    c138:	f8cc 300c 	strmi.w	r3, [ip, #12]
}
    c13c:	e7d8      	b.n	c0f0 <gpio_nrfx_config+0x6c>
    c13e:	bf00      	nop
    c140:	00f00006 	.word	0x00f00006
    c144:	00100006 	.word	0x00100006
    c148:	00400002 	.word	0x00400002

0000c14c <gpiote_event_handler>:
{
    c14c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	u32_t fired_triggers[GPIO_COUNT] = {0};
    c14e:	2500      	movs	r5, #0
    c150:	e9cd 5500 	strd	r5, r5, [sp]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c154:	4e24      	ldr	r6, [pc, #144]	; (c1e8 <gpiote_event_handler+0x9c>)
    c156:	6834      	ldr	r4, [r6, #0]
	if (port_event) {
    c158:	b144      	cbz	r4, c16c <gpiote_event_handler+0x20>
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p0));
    c15a:	4824      	ldr	r0, [pc, #144]	; (c1ec <gpiote_event_handler+0xa0>)
    c15c:	f007 ffde 	bl	1411c <check_level_trigger_pins>
		fired_triggers[0] =
    c160:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p1));
    c162:	4823      	ldr	r0, [pc, #140]	; (c1f0 <gpiote_event_handler+0xa4>)
    c164:	f007 ffda 	bl	1411c <check_level_trigger_pins>
		fired_triggers[1] =
    c168:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    c16a:	6035      	str	r5, [r6, #0]
{
    c16c:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    c16e:	2601      	movs	r6, #1
    c170:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
    c172:	4d20      	ldr	r5, [pc, #128]	; (c1f4 <gpiote_event_handler+0xa8>)
    c174:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
    c178:	fa06 f102 	lsl.w	r1, r6, r2
    c17c:	4219      	tst	r1, r3
    c17e:	d01a      	beq.n	c1b6 <gpiote_event_handler+0x6a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c180:	0091      	lsls	r1, r2, #2
    c182:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    c186:	f501 4151 	add.w	r1, r1, #53504	; 0xd100
    c18a:	680b      	ldr	r3, [r1, #0]
    c18c:	b19b      	cbz	r3, c1b6 <gpiote_event_handler+0x6a>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    c18e:	f502 73a2 	add.w	r3, r2, #324	; 0x144
    c192:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    c196:	af02      	add	r7, sp, #8
    c198:	f3c3 3040 	ubfx	r0, r3, #13, #1
    c19c:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    c1a0:	f850 7c08 	ldr.w	r7, [r0, #-8]
    c1a4:	f3c3 2304 	ubfx	r3, r3, #8, #5
    c1a8:	fa06 f303 	lsl.w	r3, r6, r3
    c1ac:	433b      	orrs	r3, r7
    c1ae:	f840 3c08 	str.w	r3, [r0, #-8]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    c1b2:	f8c1 c000 	str.w	ip, [r1]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    c1b6:	3201      	adds	r2, #1
    c1b8:	2a08      	cmp	r2, #8
    c1ba:	d1db      	bne.n	c174 <gpiote_event_handler+0x28>
	if (fired_triggers[0]) {
    c1bc:	9900      	ldr	r1, [sp, #0]
    c1be:	b111      	cbz	r1, c1c6 <gpiote_event_handler+0x7a>
		fire_callbacks(DEVICE_GET(gpio_nrfx_p0), fired_triggers[0]);
    c1c0:	480a      	ldr	r0, [pc, #40]	; (c1ec <gpiote_event_handler+0xa0>)
    c1c2:	f7ff fe73 	bl	beac <fire_callbacks>
	if (fired_triggers[1]) {
    c1c6:	9901      	ldr	r1, [sp, #4]
    c1c8:	b111      	cbz	r1, c1d0 <gpiote_event_handler+0x84>
		fire_callbacks(DEVICE_GET(gpio_nrfx_p1), fired_triggers[1]);
    c1ca:	4809      	ldr	r0, [pc, #36]	; (c1f0 <gpiote_event_handler+0xa4>)
    c1cc:	f7ff fe6e 	bl	beac <fire_callbacks>
	if (port_event) {
    c1d0:	b144      	cbz	r4, c1e4 <gpiote_event_handler+0x98>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p0));
    c1d2:	4806      	ldr	r0, [pc, #24]	; (c1ec <gpiote_event_handler+0xa0>)
    c1d4:	f008 f82a 	bl	1422c <cfg_level_pins>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
    c1d8:	4805      	ldr	r0, [pc, #20]	; (c1f0 <gpiote_event_handler+0xa4>)
}
    c1da:	b003      	add	sp, #12
    c1dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
    c1e0:	f008 b824 	b.w	1422c <cfg_level_pins>
}
    c1e4:	b003      	add	sp, #12
    c1e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c1e8:	5000d17c 	.word	0x5000d17c
    c1ec:	2000041c 	.word	0x2000041c
    c1f0:	2000042c 	.word	0x2000042c
    c1f4:	5000d000 	.word	0x5000d000

0000c1f8 <vipm_nrf_1_register_callback>:
		    &vipm_nrf_##_idx##_driver_api)

#define VIPM_DEVICE(_idx, _)						\
	IF_ENABLED(CONFIG_IPM_MSG_CH_##_idx##_ENABLE, (VIPM_DEVICE_1(_idx);))

UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
    c1f8:	4b01      	ldr	r3, [pc, #4]	; (c200 <vipm_nrf_1_register_callback+0x8>)
    c1fa:	6059      	str	r1, [r3, #4]
    c1fc:	645a      	str	r2, [r3, #68]	; 0x44
    c1fe:	4770      	bx	lr
    c200:	20001270 	.word	0x20001270

0000c204 <vipm_nrf_0_set_enabled>:
    c204:	b508      	push	{r3, lr}
    c206:	2145      	movs	r1, #69	; 0x45
    c208:	4802      	ldr	r0, [pc, #8]	; (c214 <vipm_nrf_0_set_enabled+0x10>)
    c20a:	f004 fde7 	bl	10ddc <printk>
    c20e:	f06f 0015 	mvn.w	r0, #21
    c212:	bd08      	pop	{r3, pc}
    c214:	00019354 	.word	0x00019354

0000c218 <vipm_nrf_0_register_callback>:
    c218:	2157      	movs	r1, #87	; 0x57
    c21a:	4801      	ldr	r0, [pc, #4]	; (c220 <vipm_nrf_0_register_callback+0x8>)
    c21c:	f004 bdde 	b.w	10ddc <printk>
    c220:	00019375 	.word	0x00019375

0000c224 <vipm_nrf_1_send>:
    c224:	b508      	push	{r3, lr}
    c226:	2145      	movs	r1, #69	; 0x45
    c228:	4802      	ldr	r0, [pc, #8]	; (c234 <vipm_nrf_1_send+0x10>)
    c22a:	f004 fdd7 	bl	10ddc <printk>
    c22e:	f06f 0015 	mvn.w	r0, #21
    c232:	bd08      	pop	{r3, pc}
    c234:	000193ac 	.word	0x000193ac

0000c238 <vipm_nrf_init>:
{
    c238:	b538      	push	{r3, r4, r5, lr}
	if (!nrfx_vipm_data.ipm_init) {
    c23a:	4d0b      	ldr	r5, [pc, #44]	; (c268 <vipm_nrf_init+0x30>)
    c23c:	f895 4080 	ldrb.w	r4, [r5, #128]	; 0x80
    c240:	b97c      	cbnz	r4, c262 <vipm_nrf_init+0x2a>
{
	/* Init IPC */
#if IS_ENABLED(CONFIG_IPM_NRF_SINGLE_INSTANCE)
	nrfx_ipc_init(0, nrfx_ipc_handler, (void *)&nrfx_ipm_data);
#else
	nrfx_ipc_init(0, vipm_dispatcher, (void *)&nrfx_ipm_data);
    c242:	4a0a      	ldr	r2, [pc, #40]	; (c26c <vipm_nrf_init+0x34>)
    c244:	490a      	ldr	r1, [pc, #40]	; (c270 <vipm_nrf_init+0x38>)
    c246:	4620      	mov	r0, r4
    c248:	f000 fe40 	bl	cecc <nrfx_ipc_init>
#endif
	IRQ_CONNECT(DT_INST_IRQN(0),
    c24c:	4622      	mov	r2, r4
    c24e:	2101      	movs	r1, #1
    c250:	202a      	movs	r0, #42	; 0x2a
    c252:	f7f6 fdbf 	bl	2dd4 <z_arm_irq_priority_set>
		    DT_INST_IRQ(0, priority),
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	/* Set up signals and channels */
	nrfx_ipc_config_load(&ipc_cfg);
    c256:	4807      	ldr	r0, [pc, #28]	; (c274 <vipm_nrf_init+0x3c>)
    c258:	f000 fe60 	bl	cf1c <nrfx_ipc_config_load>
		nrfx_vipm_data.ipm_init = true;
    c25c:	2301      	movs	r3, #1
    c25e:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
}
    c262:	2000      	movs	r0, #0
    c264:	bd38      	pop	{r3, r4, r5, pc}
    c266:	bf00      	nop
    c268:	20001270 	.word	0x20001270
    c26c:	20001268 	.word	0x20001268
    c270:	0000c279 	.word	0x0000c279
    c274:	00015df0 	.word	0x00015df0

0000c278 <vipm_dispatcher>:
{
    c278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c27c:	4605      	mov	r5, r0
		__ASSERT(event_idx < NRFX_IPC_ID_MAX_VALUE,
    c27e:	4e17      	ldr	r6, [pc, #92]	; (c2dc <vipm_dispatcher+0x64>)
    c280:	4f17      	ldr	r7, [pc, #92]	; (c2e0 <vipm_dispatcher+0x68>)
    c282:	f8df 8068 	ldr.w	r8, [pc, #104]	; c2ec <vipm_dispatcher+0x74>
	while (event_mask) {
    c286:	b90d      	cbnz	r5, c28c <vipm_dispatcher+0x14>
}
    c288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    c28c:	fa95 f4a5 	rbit	r4, r5
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
    c290:	b314      	cbz	r4, c2d8 <vipm_dispatcher+0x60>
  {
    return 32U;
  }
  return __builtin_clz(value);
    c292:	fab4 f384 	clz	r3, r4
		__ASSERT(event_idx < NRFX_IPC_ID_MAX_VALUE,
    c296:	2b0f      	cmp	r3, #15
    c298:	461c      	mov	r4, r3
    c29a:	dd0d      	ble.n	c2b8 <vipm_dispatcher+0x40>
    c29c:	2383      	movs	r3, #131	; 0x83
    c29e:	4632      	mov	r2, r6
    c2a0:	4639      	mov	r1, r7
    c2a2:	4640      	mov	r0, r8
    c2a4:	f004 fd9a 	bl	10ddc <printk>
    c2a8:	4621      	mov	r1, r4
    c2aa:	480e      	ldr	r0, [pc, #56]	; (c2e4 <vipm_dispatcher+0x6c>)
    c2ac:	f004 fd96 	bl	10ddc <printk>
    c2b0:	2183      	movs	r1, #131	; 0x83
    c2b2:	4630      	mov	r0, r6
    c2b4:	f005 f828 	bl	11308 <assert_post_action>
		event_mask &= ~BIT(event_idx);
    c2b8:	2301      	movs	r3, #1
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
    c2ba:	480b      	ldr	r0, [pc, #44]	; (c2e8 <vipm_dispatcher+0x70>)
		event_mask &= ~BIT(event_idx);
    c2bc:	40a3      	lsls	r3, r4
    c2be:	ea25 0503 	bic.w	r5, r5, r3
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
    c2c2:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
    c2c6:	2b00      	cmp	r3, #0
    c2c8:	d0dd      	beq.n	c286 <vipm_dispatcher+0xe>
			nrfx_vipm_data.callback[event_idx]
    c2ca:	2200      	movs	r2, #0
    c2cc:	3410      	adds	r4, #16
    c2ce:	4611      	mov	r1, r2
    c2d0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    c2d4:	4798      	blx	r3
    c2d6:	e7d6      	b.n	c286 <vipm_dispatcher+0xe>
    return 32U;
    c2d8:	2420      	movs	r4, #32
    c2da:	e7df      	b.n	c29c <vipm_dispatcher+0x24>
    c2dc:	000193cd 	.word	0x000193cd
    c2e0:	000193fb 	.word	0x000193fb
    c2e4:	0001940a 	.word	0x0001940a
    c2e8:	20001270 	.word	0x20001270
    c2ec:	00016493 	.word	0x00016493

0000c2f0 <vipm_nrf_0_send>:
UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
    c2f0:	2a10      	cmp	r2, #16
    c2f2:	b508      	push	{r3, lr}
    c2f4:	d810      	bhi.n	c318 <vipm_nrf_0_send+0x28>
    c2f6:	b11a      	cbz	r2, c300 <vipm_nrf_0_send+0x10>
    c2f8:	2157      	movs	r1, #87	; 0x57
    c2fa:	4809      	ldr	r0, [pc, #36]	; (c320 <vipm_nrf_0_send+0x30>)
    c2fc:	f004 fd6e 	bl	10ddc <printk>
    c300:	9b02      	ldr	r3, [sp, #8]
    c302:	2b00      	cmp	r3, #0
    c304:	dd03      	ble.n	c30e <vipm_nrf_0_send+0x1e>
    c306:	2157      	movs	r1, #87	; 0x57
    c308:	4806      	ldr	r0, [pc, #24]	; (c324 <vipm_nrf_0_send+0x34>)
    c30a:	f004 fd67 	bl	10ddc <printk>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ipc_task_trigger(NRF_IPC_Type * p_reg, nrf_ipc_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c30e:	2201      	movs	r2, #1
    c310:	2000      	movs	r0, #0
    c312:	4b05      	ldr	r3, [pc, #20]	; (c328 <vipm_nrf_0_send+0x38>)
    c314:	601a      	str	r2, [r3, #0]
    c316:	bd08      	pop	{r3, pc}
    c318:	f06f 0015 	mvn.w	r0, #21
    c31c:	e7fb      	b.n	c316 <vipm_nrf_0_send+0x26>
    c31e:	bf00      	nop
    c320:	00019422 	.word	0x00019422
    c324:	0001945b 	.word	0x0001945b
    c328:	5002a000 	.word	0x5002a000

0000c32c <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    c32c:	4b02      	ldr	r3, [pc, #8]	; (c338 <flash_nrf_pages_layout+0xc>)
    c32e:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    c330:	2301      	movs	r3, #1
    c332:	6013      	str	r3, [r2, #0]
}
    c334:	4770      	bx	lr
    c336:	bf00      	nop
    c338:	200012f8 	.word	0x200012f8

0000c33c <flash_nrf_erase>:
{
    c33c:	b570      	push	{r4, r5, r6, lr}
    c33e:	460d      	mov	r5, r1
    c340:	4614      	mov	r4, r2
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
    c342:	f008 f9e9 	bl	14718 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
    c346:	4621      	mov	r1, r4
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
    c348:	4606      	mov	r6, r0
	if (is_regular_addr_valid(addr, size)) {
    c34a:	4628      	mov	r0, r5
    c34c:	f007 ffb6 	bl	142bc <is_regular_addr_valid>
    c350:	b300      	cbz	r0, c394 <flash_nrf_erase+0x58>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    c352:	fbb5 f3f6 	udiv	r3, r5, r6
    c356:	fb06 5313 	mls	r3, r6, r3, r5
    c35a:	b9db      	cbnz	r3, c394 <flash_nrf_erase+0x58>
    c35c:	fbb4 f3f6 	udiv	r3, r4, r6
    c360:	fb06 4013 	mls	r0, r6, r3, r4
    c364:	b9b0      	cbnz	r0, c394 <flash_nrf_erase+0x58>
		if (!n_pages) {
    c366:	42a6      	cmp	r6, r4
    c368:	d813      	bhi.n	c392 <flash_nrf_erase+0x56>
	return z_impl_k_sem_take(sem, timeout);
    c36a:	f04f 32ff 	mov.w	r2, #4294967295
    c36e:	f04f 33ff 	mov.w	r3, #4294967295
    c372:	480a      	ldr	r0, [pc, #40]	; (c39c <flash_nrf_erase+0x60>)
    c374:	f003 faec 	bl	f950 <z_impl_k_sem_take>

#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

static int erase_op(void *context)
{
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
    c378:	f008 f9ce 	bl	14718 <nrfx_nvmc_flash_page_size_get>
    c37c:	4606      	mov	r6, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    c37e:	4628      	mov	r0, r5
    c380:	f000 fe8e 	bl	d0a0 <nrfx_nvmc_page_erase>
				break;
			}
		}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

	} while (e_ctx->len > 0);
    c384:	1ba4      	subs	r4, r4, r6
    c386:	4435      	add	r5, r6
    c388:	d1f9      	bne.n	c37e <flash_nrf_erase+0x42>
	z_impl_k_sem_give(sem);
    c38a:	4804      	ldr	r0, [pc, #16]	; (c39c <flash_nrf_erase+0x60>)
    c38c:	f003 fa9c 	bl	f8c8 <z_impl_k_sem_give>
	return ret;
    c390:	4620      	mov	r0, r4
}
    c392:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    c394:	f06f 0015 	mvn.w	r0, #21
    c398:	e7fb      	b.n	c392 <flash_nrf_erase+0x56>
    c39a:	bf00      	nop
    c39c:	20001300 	.word	0x20001300

0000c3a0 <nrf_flash_init>:
{
    c3a0:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    c3a2:	2201      	movs	r2, #1
    c3a4:	4806      	ldr	r0, [pc, #24]	; (c3c0 <nrf_flash_init+0x20>)
    c3a6:	4611      	mov	r1, r2
    c3a8:	f008 fe5c 	bl	15064 <z_impl_k_sem_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    c3ac:	f008 f9b7 	bl	1471e <nrfx_nvmc_flash_page_count_get>
    c3b0:	4c04      	ldr	r4, [pc, #16]	; (c3c4 <nrf_flash_init+0x24>)
    c3b2:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    c3b4:	f008 f9b0 	bl	14718 <nrfx_nvmc_flash_page_size_get>
    c3b8:	6060      	str	r0, [r4, #4]
}
    c3ba:	2000      	movs	r0, #0
    c3bc:	bd10      	pop	{r4, pc}
    c3be:	bf00      	nop
    c3c0:	20001300 	.word	0x20001300
    c3c4:	200012f8 	.word	0x200012f8

0000c3c8 <flash_nrf_write>:
{
    c3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c3ca:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
    c3cc:	4619      	mov	r1, r3
    c3ce:	4630      	mov	r0, r6
{
    c3d0:	4617      	mov	r7, r2
    c3d2:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    c3d4:	f007 ff72 	bl	142bc <is_regular_addr_valid>
    c3d8:	b308      	cbz	r0, c41e <flash_nrf_write+0x56>
	return (data & 0x3) ? false : true;
    c3da:	ea46 0504 	orr.w	r5, r6, r4
	if (!is_aligned_32(addr) || (len % sizeof(u32_t))) {
    c3de:	f015 0503 	ands.w	r5, r5, #3
    c3e2:	d11c      	bne.n	c41e <flash_nrf_write+0x56>
	if (!len) {
    c3e4:	b1f4      	cbz	r4, c424 <flash_nrf_write+0x5c>
	return z_impl_k_sem_take(sem, timeout);
    c3e6:	f04f 32ff 	mov.w	r2, #4294967295
    c3ea:	f04f 33ff 	mov.w	r3, #4294967295
    c3ee:	480e      	ldr	r0, [pc, #56]	; (c428 <flash_nrf_write+0x60>)
    c3f0:	f003 faae 	bl	f950 <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
    c3f4:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(u32_t)) {
    c3f8:	42a5      	cmp	r5, r4
    c3fa:	eb06 0005 	add.w	r0, r6, r5
    c3fe:	d109      	bne.n	c414 <flash_nrf_write+0x4c>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    c400:	4a0a      	ldr	r2, [pc, #40]	; (c42c <flash_nrf_write+0x64>)
    c402:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    c406:	07db      	lsls	r3, r3, #31
    c408:	d5fb      	bpl.n	c402 <flash_nrf_write+0x3a>
	z_impl_k_sem_give(sem);
    c40a:	4807      	ldr	r0, [pc, #28]	; (c428 <flash_nrf_write+0x60>)
    c40c:	f003 fa5c 	bl	f8c8 <z_impl_k_sem_give>
    c410:	2000      	movs	r0, #0
}
    c412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nrfx_nvmc_word_write(w_ctx->flash_addr,
    c414:	5979      	ldr	r1, [r7, r5]
    c416:	f000 fe7b 	bl	d110 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
    c41a:	3504      	adds	r5, #4
}
    c41c:	e7ec      	b.n	c3f8 <flash_nrf_write+0x30>
		return -EINVAL;
    c41e:	f06f 0015 	mvn.w	r0, #21
    c422:	e7f6      	b.n	c412 <flash_nrf_write+0x4a>
		return 0;
    c424:	4620      	mov	r0, r4
    c426:	e7f4      	b.n	c412 <flash_nrf_write+0x4a>
    c428:	20001300 	.word	0x20001300
    c42c:	50039000 	.word	0x50039000

0000c430 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
    c430:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    c432:	794b      	ldrb	r3, [r1, #5]
    c434:	2b01      	cmp	r3, #1
    c436:	d02b      	beq.n	c490 <uarte_nrfx_configure+0x60>
    c438:	2b03      	cmp	r3, #3
    c43a:	d126      	bne.n	c48a <uarte_nrfx_configure+0x5a>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    c43c:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    c43e:	798b      	ldrb	r3, [r1, #6]
    c440:	2b03      	cmp	r3, #3
    c442:	d122      	bne.n	c48a <uarte_nrfx_configure+0x5a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    c444:	79cd      	ldrb	r5, [r1, #7]
    c446:	b125      	cbz	r5, c452 <uarte_nrfx_configure+0x22>
    c448:	2d01      	cmp	r5, #1
    c44a:	d11e      	bne.n	c48a <uarte_nrfx_configure+0x5a>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    c44c:	6843      	ldr	r3, [r0, #4]
    c44e:	791b      	ldrb	r3, [r3, #4]
    c450:	b1db      	cbz	r3, c48a <uarte_nrfx_configure+0x5a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    c452:	790a      	ldrb	r2, [r1, #4]
    c454:	2a01      	cmp	r2, #1
    c456:	d01d      	beq.n	c494 <uarte_nrfx_configure+0x64>
    c458:	2a02      	cmp	r2, #2
    c45a:	d01f      	beq.n	c49c <uarte_nrfx_configure+0x6c>
    c45c:	b9aa      	cbnz	r2, c48a <uarte_nrfx_configure+0x5a>
    c45e:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    c460:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    c462:	6846      	ldr	r6, [r0, #4]
	switch (baudrate) {
    c464:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    c468:	6836      	ldr	r6, [r6, #0]
	switch (baudrate) {
    c46a:	d06d      	beq.n	c548 <uarte_nrfx_configure+0x118>
    c46c:	d833      	bhi.n	c4d6 <uarte_nrfx_configure+0xa6>
    c46e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    c472:	d06c      	beq.n	c54e <uarte_nrfx_configure+0x11e>
    c474:	d81c      	bhi.n	c4b0 <uarte_nrfx_configure+0x80>
    c476:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    c47a:	d06a      	beq.n	c552 <uarte_nrfx_configure+0x122>
    c47c:	d810      	bhi.n	c4a0 <uarte_nrfx_configure+0x70>
    c47e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    c482:	d069      	beq.n	c558 <uarte_nrfx_configure+0x128>
    c484:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    c488:	d069      	beq.n	c55e <uarte_nrfx_configure+0x12e>
    c48a:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c48e:	e05a      	b.n	c546 <uarte_nrfx_configure+0x116>
	switch (cfg->stop_bits) {
    c490:	2700      	movs	r7, #0
    c492:	e7d4      	b.n	c43e <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    c494:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    c498:	220e      	movs	r2, #14
    c49a:	e7e1      	b.n	c460 <uarte_nrfx_configure+0x30>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    c49c:	2400      	movs	r4, #0
    c49e:	e7fb      	b.n	c498 <uarte_nrfx_configure+0x68>
	switch (baudrate) {
    c4a0:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    c4a4:	d05e      	beq.n	c564 <uarte_nrfx_configure+0x134>
    c4a6:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    c4aa:	d1ee      	bne.n	c48a <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    c4ac:	4b38      	ldr	r3, [pc, #224]	; (c590 <uarte_nrfx_configure+0x160>)
    c4ae:	e03e      	b.n	c52e <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    c4b0:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    c4b4:	d059      	beq.n	c56a <uarte_nrfx_configure+0x13a>
    c4b6:	d807      	bhi.n	c4c8 <uarte_nrfx_configure+0x98>
    c4b8:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    c4bc:	d057      	beq.n	c56e <uarte_nrfx_configure+0x13e>
    c4be:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    c4c2:	d1e2      	bne.n	c48a <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    c4c4:	4b33      	ldr	r3, [pc, #204]	; (c594 <uarte_nrfx_configure+0x164>)
    c4c6:	e032      	b.n	c52e <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    c4c8:	f647 2c12 	movw	ip, #31250	; 0x7a12
    c4cc:	4563      	cmp	r3, ip
    c4ce:	d1dc      	bne.n	c48a <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    c4d0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    c4d4:	e02b      	b.n	c52e <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    c4d6:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    c4da:	d04a      	beq.n	c572 <uarte_nrfx_configure+0x142>
    c4dc:	d813      	bhi.n	c506 <uarte_nrfx_configure+0xd6>
    c4de:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    c4e2:	d049      	beq.n	c578 <uarte_nrfx_configure+0x148>
    c4e4:	d809      	bhi.n	c4fa <uarte_nrfx_configure+0xca>
    c4e6:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
    c4ea:	4563      	cmp	r3, ip
    c4ec:	d046      	beq.n	c57c <uarte_nrfx_configure+0x14c>
    c4ee:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    c4f2:	d1ca      	bne.n	c48a <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    c4f4:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    c4f8:	e019      	b.n	c52e <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    c4fa:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    c4fe:	d1c4      	bne.n	c48a <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    c500:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    c504:	e013      	b.n	c52e <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    c506:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    c50a:	d03a      	beq.n	c582 <uarte_nrfx_configure+0x152>
    c50c:	d809      	bhi.n	c522 <uarte_nrfx_configure+0xf2>
    c50e:	f8df c098 	ldr.w	ip, [pc, #152]	; c5a8 <uarte_nrfx_configure+0x178>
    c512:	4563      	cmp	r3, ip
    c514:	d038      	beq.n	c588 <uarte_nrfx_configure+0x158>
    c516:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    c51a:	d1b6      	bne.n	c48a <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    c51c:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    c520:	e005      	b.n	c52e <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    c522:	f8df c088 	ldr.w	ip, [pc, #136]	; c5ac <uarte_nrfx_configure+0x17c>
    c526:	4563      	cmp	r3, ip
    c528:	d1af      	bne.n	c48a <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    c52a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    c52e:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
    c532:	432c      	orrs	r4, r5
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    c534:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->stop
    c536:	433a      	orrs	r2, r7
                    | (uint32_t)p_cfg->hwfc;
    c538:	4322      	orrs	r2, r4
    c53a:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    c53c:	f8c6 256c 	str.w	r2, [r6, #1388]	; 0x56c
    c540:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    c544:	2000      	movs	r0, #0
}
    c546:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    c548:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    c54c:	e7ef      	b.n	c52e <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    c54e:	4b12      	ldr	r3, [pc, #72]	; (c598 <uarte_nrfx_configure+0x168>)
    c550:	e7ed      	b.n	c52e <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    c552:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    c556:	e7ea      	b.n	c52e <uarte_nrfx_configure+0xfe>
		nrf_baudrate = 0x00014000;
    c558:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    c55c:	e7e7      	b.n	c52e <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    c55e:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    c562:	e7e4      	b.n	c52e <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    c564:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    c568:	e7e1      	b.n	c52e <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    c56a:	4b0c      	ldr	r3, [pc, #48]	; (c59c <uarte_nrfx_configure+0x16c>)
    c56c:	e7df      	b.n	c52e <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    c56e:	4b0c      	ldr	r3, [pc, #48]	; (c5a0 <uarte_nrfx_configure+0x170>)
    c570:	e7dd      	b.n	c52e <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    c572:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    c576:	e7da      	b.n	c52e <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    c578:	4b0a      	ldr	r3, [pc, #40]	; (c5a4 <uarte_nrfx_configure+0x174>)
    c57a:	e7d8      	b.n	c52e <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    c57c:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    c580:	e7d5      	b.n	c52e <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    c582:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    c586:	e7d2      	b.n	c52e <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    c588:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    c58c:	e7cf      	b.n	c52e <uarte_nrfx_configure+0xfe>
    c58e:	bf00      	nop
    c590:	0013b000 	.word	0x0013b000
    c594:	004ea000 	.word	0x004ea000
    c598:	00275000 	.word	0x00275000
    c59c:	0075c000 	.word	0x0075c000
    c5a0:	003af000 	.word	0x003af000
    c5a4:	013a9000 	.word	0x013a9000
    c5a8:	0003d090 	.word	0x0003d090
    c5ac:	000f4240 	.word	0x000f4240

0000c5b0 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    c5b0:	6802      	ldr	r2, [r0, #0]
{
    c5b2:	b510      	push	{r4, lr}
    switch (port)
    c5b4:	0953      	lsrs	r3, r2, #5
{
    c5b6:	4604      	mov	r4, r0
    switch (port)
    c5b8:	d01e      	beq.n	c5f8 <nrf_gpio_pin_port_decode+0x48>
    c5ba:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    c5bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c5c0:	bf18      	it	ne
    c5c2:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    c5c4:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    c5c8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    c5ca:	07db      	lsls	r3, r3, #31
    c5cc:	d40b      	bmi.n	c5e6 <nrf_gpio_pin_port_decode+0x36>
    c5ce:	490c      	ldr	r1, [pc, #48]	; (c600 <nrf_gpio_pin_port_decode+0x50>)
    c5d0:	480c      	ldr	r0, [pc, #48]	; (c604 <nrf_gpio_pin_port_decode+0x54>)
    c5d2:	f240 230d 	movw	r3, #525	; 0x20d
    c5d6:	4a0c      	ldr	r2, [pc, #48]	; (c608 <nrf_gpio_pin_port_decode+0x58>)
    c5d8:	f004 fc00 	bl	10ddc <printk>
    c5dc:	f240 210d 	movw	r1, #525	; 0x20d
    c5e0:	4809      	ldr	r0, [pc, #36]	; (c608 <nrf_gpio_pin_port_decode+0x58>)
    c5e2:	f004 fe91 	bl	11308 <assert_post_action>
    if (*p_pin < P0_PIN_NUM)
    c5e6:	6823      	ldr	r3, [r4, #0]
    c5e8:	2b1f      	cmp	r3, #31
        *p_pin = *p_pin & 0x1F;
    c5ea:	bf85      	ittet	hi
    c5ec:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
    c5f0:	4806      	ldrhi	r0, [pc, #24]	; (c60c <nrf_gpio_pin_port_decode+0x5c>)
        return NRF_P0;
    c5f2:	4807      	ldrls	r0, [pc, #28]	; (c610 <nrf_gpio_pin_port_decode+0x60>)
        *p_pin = *p_pin & 0x1F;
    c5f4:	6023      	strhi	r3, [r4, #0]
}
    c5f6:	bd10      	pop	{r4, pc}
    switch (port)
    c5f8:	f04f 33ff 	mov.w	r3, #4294967295
    c5fc:	e7e2      	b.n	c5c4 <nrf_gpio_pin_port_decode+0x14>
    c5fe:	bf00      	nop
    c600:	0001927d 	.word	0x0001927d
    c604:	00016493 	.word	0x00016493
    c608:	0001924a 	.word	0x0001924a
    c60c:	50842800 	.word	0x50842800
    c610:	50842500 	.word	0x50842500

0000c614 <z_impl_gpio_pin_interrupt_configure>:
	enum gpio_int_trig trig;
	enum gpio_int_mode mode;

	__ASSERT_NO_MSG((flags & GPIO_INT_DEBOUNCE) == 0);

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
    c614:	f402 43c0 	and.w	r3, r2, #24576	; 0x6000
    c618:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
{
    c61c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct gpio_driver_config *const cfg =
    c620:	e9d0 a801 	ldrd	sl, r8, [r0, #4]
{
    c624:	4605      	mov	r5, r0
    c626:	460e      	mov	r6, r1
    c628:	4614      	mov	r4, r2
	const struct gpio_driver_data *const data =
    c62a:	f8d0 900c 	ldr.w	r9, [r0, #12]
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
    c62e:	d15f      	bne.n	c6f0 <z_impl_gpio_pin_interrupt_configure+0xdc>
    c630:	4937      	ldr	r1, [pc, #220]	; (c710 <z_impl_gpio_pin_interrupt_configure+0xfc>)
    c632:	f240 2395 	movw	r3, #661	; 0x295
    c636:	4a37      	ldr	r2, [pc, #220]	; (c714 <z_impl_gpio_pin_interrupt_configure+0x100>)
    c638:	4837      	ldr	r0, [pc, #220]	; (c718 <z_impl_gpio_pin_interrupt_configure+0x104>)
    c63a:	f004 fbcf 	bl	10ddc <printk>
    c63e:	4837      	ldr	r0, [pc, #220]	; (c71c <z_impl_gpio_pin_interrupt_configure+0x108>)
    c640:	f004 fbcc 	bl	10ddc <printk>
    c644:	f240 2195 	movw	r1, #661	; 0x295
		 != (GPIO_INT_DISABLE | GPIO_INT_ENABLE),
		 "Cannot both enable and disable interrupts");

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
    c648:	4832      	ldr	r0, [pc, #200]	; (c714 <z_impl_gpio_pin_interrupt_configure+0x100>)
    c64a:	f004 fe5d 	bl	11308 <assert_post_action>
		 "Must either enable or disable interrupts");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
    c64e:	f404 23e8 	and.w	r3, r4, #475136	; 0x74000
    c652:	f5b3 2fc8 	cmp.w	r3, #409600	; 0x64000
    c656:	d10e      	bne.n	c676 <z_impl_gpio_pin_interrupt_configure+0x62>
    c658:	4931      	ldr	r1, [pc, #196]	; (c720 <z_impl_gpio_pin_interrupt_configure+0x10c>)
    c65a:	f44f 7327 	mov.w	r3, #668	; 0x29c
    c65e:	4a2d      	ldr	r2, [pc, #180]	; (c714 <z_impl_gpio_pin_interrupt_configure+0x100>)
    c660:	482d      	ldr	r0, [pc, #180]	; (c718 <z_impl_gpio_pin_interrupt_configure+0x104>)
    c662:	f004 fbbb 	bl	10ddc <printk>
    c666:	482f      	ldr	r0, [pc, #188]	; (c724 <z_impl_gpio_pin_interrupt_configure+0x110>)
    c668:	f004 fbb8 	bl	10ddc <printk>
    c66c:	f44f 7127 	mov.w	r1, #668	; 0x29c
    c670:	4828      	ldr	r0, [pc, #160]	; (c714 <z_impl_gpio_pin_interrupt_configure+0x100>)
    c672:	f004 fe49 	bl	11308 <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) !=
		  (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)),
		 "Only one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 can be "
		 "enabled for a level interrupt.");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
    c676:	f404 23c8 	and.w	r3, r4, #409600	; 0x64000
    c67a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    c67e:	d10e      	bne.n	c69e <z_impl_gpio_pin_interrupt_configure+0x8a>
    c680:	4929      	ldr	r1, [pc, #164]	; (c728 <z_impl_gpio_pin_interrupt_configure+0x114>)
    c682:	f240 23a3 	movw	r3, #675	; 0x2a3
    c686:	4a23      	ldr	r2, [pc, #140]	; (c714 <z_impl_gpio_pin_interrupt_configure+0x100>)
    c688:	4823      	ldr	r0, [pc, #140]	; (c718 <z_impl_gpio_pin_interrupt_configure+0x104>)
    c68a:	f004 fba7 	bl	10ddc <printk>
    c68e:	4827      	ldr	r0, [pc, #156]	; (c72c <z_impl_gpio_pin_interrupt_configure+0x118>)
    c690:	f004 fba4 	bl	10ddc <printk>
    c694:	f240 21a3 	movw	r1, #675	; 0x2a3
    c698:	481e      	ldr	r0, [pc, #120]	; (c714 <z_impl_gpio_pin_interrupt_configure+0x100>)
    c69a:	f004 fe35 	bl	11308 <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) != 0),
		 "At least one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 has to be "
		 "enabled.");

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    c69e:	2701      	movs	r7, #1
    c6a0:	f8da 3000 	ldr.w	r3, [sl]
    c6a4:	40b7      	lsls	r7, r6
    c6a6:	421f      	tst	r7, r3
    c6a8:	d10e      	bne.n	c6c8 <z_impl_gpio_pin_interrupt_configure+0xb4>
    c6aa:	4921      	ldr	r1, [pc, #132]	; (c730 <z_impl_gpio_pin_interrupt_configure+0x11c>)
    c6ac:	f240 23a9 	movw	r3, #681	; 0x2a9
    c6b0:	4a18      	ldr	r2, [pc, #96]	; (c714 <z_impl_gpio_pin_interrupt_configure+0x100>)
    c6b2:	4819      	ldr	r0, [pc, #100]	; (c718 <z_impl_gpio_pin_interrupt_configure+0x104>)
    c6b4:	f004 fb92 	bl	10ddc <printk>
    c6b8:	481e      	ldr	r0, [pc, #120]	; (c734 <z_impl_gpio_pin_interrupt_configure+0x120>)
    c6ba:	f004 fb8f 	bl	10ddc <printk>
    c6be:	f240 21a9 	movw	r1, #681	; 0x2a9
    c6c2:	4814      	ldr	r0, [pc, #80]	; (c714 <z_impl_gpio_pin_interrupt_configure+0x100>)
    c6c4:	f004 fe20 	bl	11308 <assert_post_action>
		 "Unsupported pin");

	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    c6c8:	0423      	lsls	r3, r4, #16
    c6ca:	d505      	bpl.n	c6d8 <z_impl_gpio_pin_interrupt_configure+0xc4>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    c6cc:	f8d9 3000 	ldr.w	r3, [r9]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    c6d0:	421f      	tst	r7, r3
		/* Invert signal bits */
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
    c6d2:	bf18      	it	ne
    c6d4:	f484 24c0 	eorne.w	r4, r4, #393216	; 0x60000
	}

	trig = (enum gpio_int_trig)(flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1));
	mode = (enum gpio_int_mode)(flags & (GPIO_INT_EDGE | GPIO_INT_DISABLE | GPIO_INT_ENABLE));

	return api->pin_interrupt_configure(port, pin, mode, trig);
    c6d8:	f8d8 7018 	ldr.w	r7, [r8, #24]
    c6dc:	4631      	mov	r1, r6
    c6de:	4628      	mov	r0, r5
    c6e0:	46bc      	mov	ip, r7
    c6e2:	f404 23c0 	and.w	r3, r4, #393216	; 0x60000
    c6e6:	f404 32b0 	and.w	r2, r4, #90112	; 0x16000
}
    c6ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
    c6ee:	4760      	bx	ip
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
    c6f0:	2b00      	cmp	r3, #0
    c6f2:	d1ac      	bne.n	c64e <z_impl_gpio_pin_interrupt_configure+0x3a>
    c6f4:	4910      	ldr	r1, [pc, #64]	; (c738 <z_impl_gpio_pin_interrupt_configure+0x124>)
    c6f6:	f240 2399 	movw	r3, #665	; 0x299
    c6fa:	4a06      	ldr	r2, [pc, #24]	; (c714 <z_impl_gpio_pin_interrupt_configure+0x100>)
    c6fc:	4806      	ldr	r0, [pc, #24]	; (c718 <z_impl_gpio_pin_interrupt_configure+0x104>)
    c6fe:	f004 fb6d 	bl	10ddc <printk>
    c702:	480e      	ldr	r0, [pc, #56]	; (c73c <z_impl_gpio_pin_interrupt_configure+0x128>)
    c704:	f004 fb6a 	bl	10ddc <printk>
    c708:	f240 2199 	movw	r1, #665	; 0x299
    c70c:	e79c      	b.n	c648 <z_impl_gpio_pin_interrupt_configure+0x34>
    c70e:	bf00      	nop
    c710:	000194d8 	.word	0x000194d8
    c714:	000194ae 	.word	0x000194ae
    c718:	00016493 	.word	0x00016493
    c71c:	00019519 	.word	0x00019519
    c720:	0001959a 	.word	0x0001959a
    c724:	0001961b 	.word	0x0001961b
    c728:	0001966f 	.word	0x0001966f
    c72c:	000196b9 	.word	0x000196b9
    c730:	000196fe 	.word	0x000196fe
    c734:	0001973c 	.word	0x0001973c
    c738:	00019545 	.word	0x00019545
    c73c:	0001956f 	.word	0x0001956f

0000c740 <gpio_pin_configure>:
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_configure(struct device *port, gpio_pin_t pin,
				     gpio_flags_t flags)
{
    c740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH
			| GPIO_OUTPUT_INIT_LOGICAL;
	}

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    c744:	2501      	movs	r5, #1
    c746:	6843      	ldr	r3, [r0, #4]
    c748:	408d      	lsls	r5, r1
    c74a:	681b      	ldr	r3, [r3, #0]
{
    c74c:	4604      	mov	r4, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    c74e:	421d      	tst	r5, r3
{
    c750:	460e      	mov	r6, r1
    c752:	4690      	mov	r8, r2
	struct gpio_driver_data *data =
    c754:	68c7      	ldr	r7, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    c756:	d10e      	bne.n	c776 <gpio_pin_configure+0x36>
    c758:	490d      	ldr	r1, [pc, #52]	; (c790 <gpio_pin_configure+0x50>)
    c75a:	f240 23ee 	movw	r3, #750	; 0x2ee
    c75e:	4a0d      	ldr	r2, [pc, #52]	; (c794 <gpio_pin_configure+0x54>)
    c760:	480d      	ldr	r0, [pc, #52]	; (c798 <gpio_pin_configure+0x58>)
    c762:	f004 fb3b 	bl	10ddc <printk>
    c766:	480d      	ldr	r0, [pc, #52]	; (c79c <gpio_pin_configure+0x5c>)
    c768:	f004 fb38 	bl	10ddc <printk>
    c76c:	f240 21ee 	movw	r1, #750	; 0x2ee
    c770:	4808      	ldr	r0, [pc, #32]	; (c794 <gpio_pin_configure+0x54>)
    c772:	f004 fdc9 	bl	11308 <assert_post_action>
	return api->pin_configure(port, pin, flags);
    c776:	68a3      	ldr	r3, [r4, #8]
    c778:	4642      	mov	r2, r8
    c77a:	4631      	mov	r1, r6
    c77c:	4620      	mov	r0, r4
    c77e:	681b      	ldr	r3, [r3, #0]
    c780:	4798      	blx	r3
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
    c782:	b918      	cbnz	r0, c78c <gpio_pin_configure+0x4c>
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    c784:	683b      	ldr	r3, [r7, #0]
    c786:	ea23 0505 	bic.w	r5, r3, r5
    c78a:	603d      	str	r5, [r7, #0]
		flags &= ~GPIO_INT_DEBOUNCE;
		ret = z_impl_gpio_pin_interrupt_configure(port, pin, flags);
	}

	return ret;
}
    c78c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c790:	000196fe 	.word	0x000196fe
    c794:	000194ae 	.word	0x000194ae
    c798:	00016493 	.word	0x00016493
    c79c:	0001973c 	.word	0x0001973c

0000c7a0 <gpio_pin_set_raw>:
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set_raw(struct device *port, gpio_pin_t pin,
				   int value)
{
    c7a0:	b570      	push	{r4, r5, r6, lr}
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config_info;
	int ret;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    c7a2:	2501      	movs	r5, #1
    c7a4:	6843      	ldr	r3, [r0, #4]
    c7a6:	408d      	lsls	r5, r1
    c7a8:	681b      	ldr	r3, [r3, #0]
{
    c7aa:	4604      	mov	r4, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    c7ac:	421d      	tst	r5, r3
{
    c7ae:	4616      	mov	r6, r2
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    c7b0:	d10e      	bne.n	c7d0 <gpio_pin_set_raw+0x30>
    c7b2:	490d      	ldr	r1, [pc, #52]	; (c7e8 <gpio_pin_set_raw+0x48>)
    c7b4:	f240 4361 	movw	r3, #1121	; 0x461
    c7b8:	4a0c      	ldr	r2, [pc, #48]	; (c7ec <gpio_pin_set_raw+0x4c>)
    c7ba:	480d      	ldr	r0, [pc, #52]	; (c7f0 <gpio_pin_set_raw+0x50>)
    c7bc:	f004 fb0e 	bl	10ddc <printk>
    c7c0:	480c      	ldr	r0, [pc, #48]	; (c7f4 <gpio_pin_set_raw+0x54>)
    c7c2:	f004 fb0b 	bl	10ddc <printk>
    c7c6:	f240 4161 	movw	r1, #1121	; 0x461
    c7ca:	4808      	ldr	r0, [pc, #32]	; (c7ec <gpio_pin_set_raw+0x4c>)
    c7cc:	f004 fd9c 	bl	11308 <assert_post_action>
		 "Unsupported pin");

	if (value != 0)	{
    c7d0:	b136      	cbz	r6, c7e0 <gpio_pin_set_raw+0x40>
	return api->port_set_bits_raw(port, pins);
    c7d2:	68a3      	ldr	r3, [r4, #8]
    c7d4:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    c7d6:	4629      	mov	r1, r5
    c7d8:	4620      	mov	r0, r4
	} else {
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
	}

	return ret;
}
    c7da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->port_clear_bits_raw(port, pins);
    c7de:	4718      	bx	r3
    c7e0:	68a3      	ldr	r3, [r4, #8]
    c7e2:	691b      	ldr	r3, [r3, #16]
    c7e4:	e7f7      	b.n	c7d6 <gpio_pin_set_raw+0x36>
    c7e6:	bf00      	nop
    c7e8:	000196fe 	.word	0x000196fe
    c7ec:	000194ae 	.word	0x000194ae
    c7f0:	00016493 	.word	0x00016493
    c7f4:	0001973c 	.word	0x0001973c

0000c7f8 <dk_set_leds_state.part.0>:
int dk_set_leds(u32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(u32_t leds_on_mask, u32_t leds_off_mask)
    c7f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c7fc:	4606      	mov	r6, r0
    c7fe:	460f      	mov	r7, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
    c800:	2400      	movs	r4, #0

			if (IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS)) {
				val = 1 - val;
			}

			int err = gpio_pin_set_raw(led_devs[i],
    c802:	f8df 8048 	ldr.w	r8, [pc, #72]	; c84c <dk_set_leds_state.part.0+0x54>
    c806:	f8df 9048 	ldr.w	r9, [pc, #72]	; c850 <dk_set_leds_state.part.0+0x58>
		if ((BIT(i) & leds_on_mask) || (BIT(i) & leds_off_mask)) {
    c80a:	fa26 f204 	lsr.w	r2, r6, r4
    c80e:	fa27 f304 	lsr.w	r3, r7, r4
    c812:	4313      	orrs	r3, r2
    c814:	07db      	lsls	r3, r3, #31
    c816:	d512      	bpl.n	c83e <dk_set_leds_state.part.0+0x46>
			int err = gpio_pin_set_raw(led_devs[i],
    c818:	43d2      	mvns	r2, r2
    c81a:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
    c81e:	7919      	ldrb	r1, [r3, #4]
    c820:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
    c824:	f002 0201 	and.w	r2, r2, #1
    c828:	f7ff ffba 	bl	c7a0 <gpio_pin_set_raw>
						   led_pins[i].number, val);
			if (err) {
    c82c:	4605      	mov	r5, r0
    c82e:	b130      	cbz	r0, c83e <dk_set_leds_state.part.0+0x46>
				LOG_ERR("Cannot write LED gpio");
    c830:	2145      	movs	r1, #69	; 0x45
    c832:	4805      	ldr	r0, [pc, #20]	; (c848 <dk_set_leds_state.part.0+0x50>)
    c834:	f004 fad2 	bl	10ddc <printk>
			}
		}
	}

	return 0;
}
    c838:	4628      	mov	r0, r5
    c83a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
    c83e:	3401      	adds	r4, #1
    c840:	2c04      	cmp	r4, #4
    c842:	d1e2      	bne.n	c80a <dk_set_leds_state.part.0+0x12>
	return 0;
    c844:	2500      	movs	r5, #0
    c846:	e7f7      	b.n	c838 <dk_set_leds_state.part.0+0x40>
    c848:	0001974e 	.word	0x0001974e
    c84c:	00015f28 	.word	0x00015f28
    c850:	2000137c 	.word	0x2000137c

0000c854 <button_pressed>:
{
    c854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    c856:	f04f 0320 	mov.w	r3, #32
    c85a:	f3ef 8611 	mrs	r6, BASEPRI
    c85e:	f383 8811 	msr	BASEPRI, r3
    c862:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c866:	482d      	ldr	r0, [pc, #180]	; (c91c <button_pressed+0xc8>)
    c868:	f003 fa48 	bl	fcfc <z_spin_lock_valid>
    c86c:	b968      	cbnz	r0, c88a <button_pressed+0x36>
    c86e:	235c      	movs	r3, #92	; 0x5c
    c870:	4a2b      	ldr	r2, [pc, #172]	; (c920 <button_pressed+0xcc>)
    c872:	492c      	ldr	r1, [pc, #176]	; (c924 <button_pressed+0xd0>)
    c874:	482c      	ldr	r0, [pc, #176]	; (c928 <button_pressed+0xd4>)
    c876:	f004 fab1 	bl	10ddc <printk>
    c87a:	4928      	ldr	r1, [pc, #160]	; (c91c <button_pressed+0xc8>)
    c87c:	482b      	ldr	r0, [pc, #172]	; (c92c <button_pressed+0xd8>)
    c87e:	f004 faad 	bl	10ddc <printk>
    c882:	215c      	movs	r1, #92	; 0x5c
    c884:	4826      	ldr	r0, [pc, #152]	; (c920 <button_pressed+0xcc>)
    c886:	f004 fd3f 	bl	11308 <assert_post_action>
	z_spin_lock_set_owner(l);
    c88a:	4824      	ldr	r0, [pc, #144]	; (c91c <button_pressed+0xc8>)
    c88c:	f003 fa52 	bl	fd34 <z_spin_lock_set_owner>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
    c890:	2400      	movs	r4, #0
    c892:	4d27      	ldr	r5, [pc, #156]	; (c930 <button_pressed+0xdc>)
			err = gpio_pin_interrupt_configure(button_devs[i],
    c894:	4f27      	ldr	r7, [pc, #156]	; (c934 <button_pressed+0xe0>)
    c896:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
    c89a:	f855 0b04 	ldr.w	r0, [r5], #4
    c89e:	7919      	ldrb	r1, [r3, #4]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
    c8a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
    c8a4:	3401      	adds	r4, #1
    c8a6:	f7ff feb5 	bl	c614 <z_impl_gpio_pin_interrupt_configure>
    c8aa:	2c04      	cmp	r4, #4
    c8ac:	d006      	beq.n	c8bc <button_pressed+0x68>
    c8ae:	2800      	cmp	r0, #0
    c8b0:	d0f1      	beq.n	c896 <button_pressed+0x42>
		LOG_ERR("Cannot disable callbacks");
    c8b2:	2145      	movs	r1, #69	; 0x45
    c8b4:	4820      	ldr	r0, [pc, #128]	; (c938 <button_pressed+0xe4>)
    c8b6:	f004 fa91 	bl	10ddc <printk>
    c8ba:	e001      	b.n	c8c0 <button_pressed+0x6c>
	if (err) {
    c8bc:	2800      	cmp	r0, #0
    c8be:	d1f8      	bne.n	c8b2 <button_pressed+0x5e>
	switch (state) {
    c8c0:	4b1e      	ldr	r3, [pc, #120]	; (c93c <button_pressed+0xe8>)
    c8c2:	781a      	ldrb	r2, [r3, #0]
    c8c4:	b9f2      	cbnz	r2, c904 <button_pressed+0xb0>
		state = STATE_SCANNING;
    c8c6:	2201      	movs	r2, #1
    c8c8:	491d      	ldr	r1, [pc, #116]	; (c940 <button_pressed+0xec>)
    c8ca:	701a      	strb	r2, [r3, #0]
    c8cc:	481d      	ldr	r0, [pc, #116]	; (c944 <button_pressed+0xf0>)
    c8ce:	2221      	movs	r2, #33	; 0x21
    c8d0:	2300      	movs	r3, #0
    c8d2:	f003 fa5d 	bl	fd90 <k_delayed_work_submit_to_queue>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c8d6:	4811      	ldr	r0, [pc, #68]	; (c91c <button_pressed+0xc8>)
    c8d8:	f003 fa1e 	bl	fd18 <z_spin_unlock_valid>
    c8dc:	b968      	cbnz	r0, c8fa <button_pressed+0xa6>
    c8de:	2384      	movs	r3, #132	; 0x84
    c8e0:	4a0f      	ldr	r2, [pc, #60]	; (c920 <button_pressed+0xcc>)
    c8e2:	4919      	ldr	r1, [pc, #100]	; (c948 <button_pressed+0xf4>)
    c8e4:	4810      	ldr	r0, [pc, #64]	; (c928 <button_pressed+0xd4>)
    c8e6:	f004 fa79 	bl	10ddc <printk>
    c8ea:	490c      	ldr	r1, [pc, #48]	; (c91c <button_pressed+0xc8>)
    c8ec:	4817      	ldr	r0, [pc, #92]	; (c94c <button_pressed+0xf8>)
    c8ee:	f004 fa75 	bl	10ddc <printk>
    c8f2:	2184      	movs	r1, #132	; 0x84
    c8f4:	480a      	ldr	r0, [pc, #40]	; (c920 <button_pressed+0xcc>)
    c8f6:	f004 fd07 	bl	11308 <assert_post_action>
	__asm__ volatile(
    c8fa:	f386 8811 	msr	BASEPRI, r6
    c8fe:	f3bf 8f6f 	isb	sy
}
    c902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT_NO_MSG(false);
    c904:	23eb      	movs	r3, #235	; 0xeb
    c906:	4a12      	ldr	r2, [pc, #72]	; (c950 <button_pressed+0xfc>)
    c908:	4912      	ldr	r1, [pc, #72]	; (c954 <button_pressed+0x100>)
    c90a:	4807      	ldr	r0, [pc, #28]	; (c928 <button_pressed+0xd4>)
    c90c:	f004 fa66 	bl	10ddc <printk>
    c910:	21eb      	movs	r1, #235	; 0xeb
    c912:	480f      	ldr	r0, [pc, #60]	; (c950 <button_pressed+0xfc>)
    c914:	f004 fcf8 	bl	11308 <assert_post_action>
		break;
    c918:	e7dd      	b.n	c8d6 <button_pressed+0x82>
    c91a:	bf00      	nop
    c91c:	2000138c 	.word	0x2000138c
    c920:	0001691e 	.word	0x0001691e
    c924:	00016944 	.word	0x00016944
    c928:	00016493 	.word	0x00016493
    c92c:	00016959 	.word	0x00016959
    c930:	20001318 	.word	0x20001318
    c934:	00015f08 	.word	0x00015f08
    c938:	00019769 	.word	0x00019769
    c93c:	20002033 	.word	0x20002033
    c940:	20001348 	.word	0x20001348
    c944:	20001e54 	.word	0x20001e54
    c948:	00016971 	.word	0x00016971
    c94c:	00016988 	.word	0x00016988
    c950:	00019787 	.word	0x00019787
    c954:	00019ede 	.word	0x00019ede

0000c958 <buttons_scan_fn>:
{
    c958:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t ret = 0;
    c95c:	2400      	movs	r4, #0
    c95e:	4f71      	ldr	r7, [pc, #452]	; (cb24 <buttons_scan_fn+0x1cc>)
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
    c960:	4625      	mov	r5, r4
{
    c962:	46b9      	mov	r9, r7
		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
    c964:	f8df a1e0 	ldr.w	sl, [pc, #480]	; cb48 <buttons_scan_fn+0x1f0>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    c968:	f8df b218 	ldr.w	fp, [pc, #536]	; cb84 <buttons_scan_fn+0x22c>
    c96c:	2601      	movs	r6, #1
    c96e:	eb0a 03c5 	add.w	r3, sl, r5, lsl #3
    c972:	791b      	ldrb	r3, [r3, #4]
    c974:	f859 8b04 	ldr.w	r8, [r9], #4
    c978:	409e      	lsls	r6, r3
    c97a:	f8d8 3004 	ldr.w	r3, [r8, #4]
    c97e:	681b      	ldr	r3, [r3, #0]
    c980:	421e      	tst	r6, r3
    c982:	d10e      	bne.n	c9a2 <buttons_scan_fn+0x4a>
    c984:	4968      	ldr	r1, [pc, #416]	; (cb28 <buttons_scan_fn+0x1d0>)
    c986:	f240 4319 	movw	r3, #1049	; 0x419
    c98a:	465a      	mov	r2, fp
    c98c:	4867      	ldr	r0, [pc, #412]	; (cb2c <buttons_scan_fn+0x1d4>)
    c98e:	f004 fa25 	bl	10ddc <printk>
    c992:	4867      	ldr	r0, [pc, #412]	; (cb30 <buttons_scan_fn+0x1d8>)
    c994:	f004 fa22 	bl	10ddc <printk>
    c998:	f240 4119 	movw	r1, #1049	; 0x419
    c99c:	4658      	mov	r0, fp
    c99e:	f004 fcb3 	bl	11308 <assert_post_action>
	return api->port_get_raw(port, value);
    c9a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
    c9a6:	4640      	mov	r0, r8
    c9a8:	685b      	ldr	r3, [r3, #4]
    c9aa:	a901      	add	r1, sp, #4
    c9ac:	4798      	blx	r3
	if (ret == 0) {
    c9ae:	2800      	cmp	r0, #0
    c9b0:	d177      	bne.n	caa2 <buttons_scan_fn+0x14a>
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
    c9b2:	9b01      	ldr	r3, [sp, #4]
    c9b4:	421e      	tst	r6, r3
    c9b6:	d003      	beq.n	c9c0 <buttons_scan_fn+0x68>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
    c9b8:	3501      	adds	r5, #1
    c9ba:	2d04      	cmp	r5, #4
    c9bc:	d1d6      	bne.n	c96c <buttons_scan_fn+0x14>
    c9be:	e076      	b.n	caae <buttons_scan_fn+0x156>
			ret |= 1U << i;
    c9c0:	2301      	movs	r3, #1
    c9c2:	40ab      	lsls	r3, r5
    c9c4:	431c      	orrs	r4, r3
    c9c6:	e7f7      	b.n	c9b8 <buttons_scan_fn+0x60>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
    c9c8:	3d04      	subs	r5, #4
    c9ca:	2d00      	cmp	r5, #0
    c9cc:	f000 8093 	beq.w	caf6 <buttons_scan_fn+0x19e>
			handler->cb(button_state, has_changed);
    c9d0:	46a9      	mov	r9, r5
    c9d2:	f859 3b04 	ldr.w	r3, [r9], #4
    c9d6:	4631      	mov	r1, r6
    c9d8:	4620      	mov	r0, r4
    c9da:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    c9dc:	f1b9 0f00 	cmp.w	r9, #0
    c9e0:	f000 8089 	beq.w	caf6 <buttons_scan_fn+0x19e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    c9e4:	686d      	ldr	r5, [r5, #4]
	return node->next;
    c9e6:	e083      	b.n	caf0 <buttons_scan_fn+0x198>
		initial_run = false;
    c9e8:	2200      	movs	r2, #0
    c9ea:	701a      	strb	r2, [r3, #0]
    c9ec:	e086      	b.n	cafc <buttons_scan_fn+0x1a4>
	__asm__ volatile(
    c9ee:	f04f 0320 	mov.w	r3, #32
    c9f2:	f3ef 8611 	mrs	r6, BASEPRI
    c9f6:	f383 8811 	msr	BASEPRI, r3
    c9fa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c9fe:	484d      	ldr	r0, [pc, #308]	; (cb34 <buttons_scan_fn+0x1dc>)
    ca00:	f003 f97c 	bl	fcfc <z_spin_lock_valid>
    ca04:	b968      	cbnz	r0, ca22 <buttons_scan_fn+0xca>
    ca06:	235c      	movs	r3, #92	; 0x5c
    ca08:	4a4b      	ldr	r2, [pc, #300]	; (cb38 <buttons_scan_fn+0x1e0>)
    ca0a:	494c      	ldr	r1, [pc, #304]	; (cb3c <buttons_scan_fn+0x1e4>)
    ca0c:	4847      	ldr	r0, [pc, #284]	; (cb2c <buttons_scan_fn+0x1d4>)
    ca0e:	f004 f9e5 	bl	10ddc <printk>
    ca12:	4948      	ldr	r1, [pc, #288]	; (cb34 <buttons_scan_fn+0x1dc>)
    ca14:	484a      	ldr	r0, [pc, #296]	; (cb40 <buttons_scan_fn+0x1e8>)
    ca16:	f004 f9e1 	bl	10ddc <printk>
    ca1a:	215c      	movs	r1, #92	; 0x5c
    ca1c:	4846      	ldr	r0, [pc, #280]	; (cb38 <buttons_scan_fn+0x1e0>)
    ca1e:	f004 fc73 	bl	11308 <assert_post_action>
	z_spin_lock_set_owner(l);
    ca22:	4844      	ldr	r0, [pc, #272]	; (cb34 <buttons_scan_fn+0x1dc>)
    ca24:	f003 f986 	bl	fd34 <z_spin_lock_set_owner>
		switch (state) {
    ca28:	4b46      	ldr	r3, [pc, #280]	; (cb44 <buttons_scan_fn+0x1ec>)
    ca2a:	781a      	ldrb	r2, [r3, #0]
    ca2c:	2a01      	cmp	r2, #1
    ca2e:	d12c      	bne.n	ca8a <buttons_scan_fn+0x132>
			state = STATE_WAITING;
    ca30:	2200      	movs	r2, #0
    ca32:	701a      	strb	r2, [r3, #0]
			err = gpio_pin_interrupt_configure(button_devs[i],
    ca34:	4b44      	ldr	r3, [pc, #272]	; (cb48 <buttons_scan_fn+0x1f0>)
    ca36:	f857 0b04 	ldr.w	r0, [r7], #4
    ca3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    ca3e:	7919      	ldrb	r1, [r3, #4]
    ca40:	f44f 3210 	mov.w	r2, #147456	; 0x24000
    ca44:	f7ff fde6 	bl	c614 <z_impl_gpio_pin_interrupt_configure>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
    ca48:	3401      	adds	r4, #1
    ca4a:	2c04      	cmp	r4, #4
    ca4c:	4605      	mov	r5, r0
    ca4e:	d001      	beq.n	ca54 <buttons_scan_fn+0xfc>
    ca50:	2800      	cmp	r0, #0
    ca52:	d0ef      	beq.n	ca34 <buttons_scan_fn+0xdc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ca54:	4837      	ldr	r0, [pc, #220]	; (cb34 <buttons_scan_fn+0x1dc>)
    ca56:	f003 f95f 	bl	fd18 <z_spin_unlock_valid>
    ca5a:	b968      	cbnz	r0, ca78 <buttons_scan_fn+0x120>
    ca5c:	2384      	movs	r3, #132	; 0x84
    ca5e:	4a36      	ldr	r2, [pc, #216]	; (cb38 <buttons_scan_fn+0x1e0>)
    ca60:	493a      	ldr	r1, [pc, #232]	; (cb4c <buttons_scan_fn+0x1f4>)
    ca62:	4832      	ldr	r0, [pc, #200]	; (cb2c <buttons_scan_fn+0x1d4>)
    ca64:	f004 f9ba 	bl	10ddc <printk>
    ca68:	4932      	ldr	r1, [pc, #200]	; (cb34 <buttons_scan_fn+0x1dc>)
    ca6a:	4839      	ldr	r0, [pc, #228]	; (cb50 <buttons_scan_fn+0x1f8>)
    ca6c:	f004 f9b6 	bl	10ddc <printk>
    ca70:	2184      	movs	r1, #132	; 0x84
    ca72:	4831      	ldr	r0, [pc, #196]	; (cb38 <buttons_scan_fn+0x1e0>)
    ca74:	f004 fc48 	bl	11308 <assert_post_action>
	__asm__ volatile(
    ca78:	f386 8811 	msr	BASEPRI, r6
    ca7c:	f3bf 8f6f 	isb	sy
		if (err) {
    ca80:	2d00      	cmp	r5, #0
    ca82:	d04c      	beq.n	cb1e <buttons_scan_fn+0x1c6>
			LOG_ERR("Cannot enable callbacks");
    ca84:	2145      	movs	r1, #69	; 0x45
    ca86:	4833      	ldr	r0, [pc, #204]	; (cb54 <buttons_scan_fn+0x1fc>)
    ca88:	e047      	b.n	cb1a <buttons_scan_fn+0x1c2>
			__ASSERT_NO_MSG(false);
    ca8a:	23b4      	movs	r3, #180	; 0xb4
    ca8c:	4a32      	ldr	r2, [pc, #200]	; (cb58 <buttons_scan_fn+0x200>)
    ca8e:	4933      	ldr	r1, [pc, #204]	; (cb5c <buttons_scan_fn+0x204>)
    ca90:	4826      	ldr	r0, [pc, #152]	; (cb2c <buttons_scan_fn+0x1d4>)
    ca92:	f004 f9a3 	bl	10ddc <printk>
    ca96:	21b4      	movs	r1, #180	; 0xb4
    ca98:	482f      	ldr	r0, [pc, #188]	; (cb58 <buttons_scan_fn+0x200>)
    ca9a:	f004 fc35 	bl	11308 <assert_post_action>
		int err = 0;
    ca9e:	2500      	movs	r5, #0
			break;
    caa0:	e7d8      	b.n	ca54 <buttons_scan_fn+0xfc>
		if (val < 0) {
    caa2:	da89      	bge.n	c9b8 <buttons_scan_fn+0x60>
			LOG_ERR("Cannot read gpio pin");
    caa4:	2145      	movs	r1, #69	; 0x45
    caa6:	482e      	ldr	r0, [pc, #184]	; (cb60 <buttons_scan_fn+0x208>)
    caa8:	f004 f998 	bl	10ddc <printk>
			return 0;
    caac:	2400      	movs	r4, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    caae:	4b2d      	ldr	r3, [pc, #180]	; (cb64 <buttons_scan_fn+0x20c>)
    cab0:	e8d3 2fef 	ldaex	r2, [r3]
    cab4:	e8c3 4fe1 	stlex	r1, r4, [r3]
    cab8:	2900      	cmp	r1, #0
    caba:	d1f9      	bne.n	cab0 <buttons_scan_fn+0x158>
	if (!initial_run) {
    cabc:	4b2a      	ldr	r3, [pc, #168]	; (cb68 <buttons_scan_fn+0x210>)
    cabe:	f8df 80c8 	ldr.w	r8, [pc, #200]	; cb88 <buttons_scan_fn+0x230>
    cac2:	781a      	ldrb	r2, [r3, #0]
    cac4:	2a00      	cmp	r2, #0
    cac6:	d18f      	bne.n	c9e8 <buttons_scan_fn+0x90>
		if (button_scan != last_button_scan) {
    cac8:	f8d8 6000 	ldr.w	r6, [r8]
    cacc:	42a6      	cmp	r6, r4
    cace:	d015      	beq.n	cafc <buttons_scan_fn+0x1a4>
	if (button_handler_cb != NULL) {
    cad0:	4b26      	ldr	r3, [pc, #152]	; (cb6c <buttons_scan_fn+0x214>)
			u32_t has_changed = (button_scan ^ last_button_scan);
    cad2:	4066      	eors	r6, r4
	if (button_handler_cb != NULL) {
    cad4:	681b      	ldr	r3, [r3, #0]
    cad6:	b113      	cbz	r3, cade <buttons_scan_fn+0x186>
		button_handler_cb(button_state, has_changed);
    cad8:	4631      	mov	r1, r6
    cada:	4620      	mov	r0, r4
    cadc:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
    cade:	f04f 33ff 	mov.w	r3, #4294967295
    cae2:	f04f 32ff 	mov.w	r2, #4294967295
    cae6:	4822      	ldr	r0, [pc, #136]	; (cb70 <buttons_scan_fn+0x218>)
    cae8:	f001 fa9a 	bl	e020 <z_impl_k_mutex_lock>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
    caec:	4b21      	ldr	r3, [pc, #132]	; (cb74 <buttons_scan_fn+0x21c>)
    caee:	681d      	ldr	r5, [r3, #0]
    caf0:	2d00      	cmp	r5, #0
    caf2:	f47f af69 	bne.w	c9c8 <buttons_scan_fn+0x70>
	return z_impl_k_mutex_unlock(mutex);
    caf6:	481e      	ldr	r0, [pc, #120]	; (cb70 <buttons_scan_fn+0x218>)
    caf8:	f001 fb76 	bl	e1e8 <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
    cafc:	f8c8 4000 	str.w	r4, [r8]
	if (button_scan != 0) {
    cb00:	2c00      	cmp	r4, #0
    cb02:	f43f af74 	beq.w	c9ee <buttons_scan_fn+0x96>
    cb06:	f44f 72a4 	mov.w	r2, #328	; 0x148
    cb0a:	2300      	movs	r3, #0
    cb0c:	491a      	ldr	r1, [pc, #104]	; (cb78 <buttons_scan_fn+0x220>)
    cb0e:	481b      	ldr	r0, [pc, #108]	; (cb7c <buttons_scan_fn+0x224>)
    cb10:	f003 f93e 	bl	fd90 <k_delayed_work_submit_to_queue>
		if (err) {
    cb14:	b118      	cbz	r0, cb1e <buttons_scan_fn+0x1c6>
			LOG_ERR("Cannot add work to workqueue");
    cb16:	2145      	movs	r1, #69	; 0x45
    cb18:	4819      	ldr	r0, [pc, #100]	; (cb80 <buttons_scan_fn+0x228>)
			LOG_ERR("Cannot enable callbacks");
    cb1a:	f004 f95f 	bl	10ddc <printk>
}
    cb1e:	b003      	add	sp, #12
    cb20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cb24:	20001318 	.word	0x20001318
    cb28:	000196fe 	.word	0x000196fe
    cb2c:	00016493 	.word	0x00016493
    cb30:	0001973c 	.word	0x0001973c
    cb34:	2000138c 	.word	0x2000138c
    cb38:	0001691e 	.word	0x0001691e
    cb3c:	00016944 	.word	0x00016944
    cb40:	00016959 	.word	0x00016959
    cb44:	20002033 	.word	0x20002033
    cb48:	00015f08 	.word	0x00015f08
    cb4c:	00016971 	.word	0x00016971
    cb50:	00016988 	.word	0x00016988
    cb54:	00019801 	.word	0x00019801
    cb58:	00019787 	.word	0x00019787
    cb5c:	00019ede 	.word	0x00019ede
    cb60:	000197c5 	.word	0x000197c5
    cb64:	20001390 	.word	0x20001390
    cb68:	200003cb 	.word	0x200003cb
    cb6c:	20001328 	.word	0x20001328
    cb70:	2000132c 	.word	0x2000132c
    cb74:	20001340 	.word	0x20001340
    cb78:	20001348 	.word	0x20001348
    cb7c:	20001e54 	.word	0x20001e54
    cb80:	000197df 	.word	0x000197df
    cb84:	000194ae 	.word	0x000194ae
    cb88:	20001374 	.word	0x20001374

0000cb8c <dk_leds_init>:
{
    cb8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
    cb8e:	2600      	movs	r6, #0
    cb90:	4d12      	ldr	r5, [pc, #72]	; (cbdc <dk_leds_init+0x50>)
    cb92:	4f13      	ldr	r7, [pc, #76]	; (cbe0 <dk_leds_init+0x54>)
		led_devs[i] = device_get_binding(led_pins[i].port);
    cb94:	6828      	ldr	r0, [r5, #0]
    cb96:	f000 fe7b 	bl	d890 <z_impl_device_get_binding>
    cb9a:	f847 0b04 	str.w	r0, [r7], #4
		if (!led_devs[i]) {
    cb9e:	b938      	cbnz	r0, cbb0 <dk_leds_init+0x24>
			LOG_ERR("Cannot bind gpio device");
    cba0:	2145      	movs	r1, #69	; 0x45
    cba2:	4810      	ldr	r0, [pc, #64]	; (cbe4 <dk_leds_init+0x58>)
    cba4:	f004 f91a 	bl	10ddc <printk>
			return -ENODEV;
    cba8:	f06f 0412 	mvn.w	r4, #18
}
    cbac:	4620      	mov	r0, r4
    cbae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = gpio_pin_configure(led_devs[i], led_pins[i].number,
    cbb0:	f44f 7200 	mov.w	r2, #512	; 0x200
    cbb4:	7929      	ldrb	r1, [r5, #4]
    cbb6:	f7ff fdc3 	bl	c740 <gpio_pin_configure>
		if (err) {
    cbba:	4604      	mov	r4, r0
    cbbc:	b120      	cbz	r0, cbc8 <dk_leds_init+0x3c>
			LOG_ERR("Cannot configure LED gpio");
    cbbe:	2145      	movs	r1, #69	; 0x45
    cbc0:	4809      	ldr	r0, [pc, #36]	; (cbe8 <dk_leds_init+0x5c>)
    cbc2:	f004 f90b 	bl	10ddc <printk>
			return err;
    cbc6:	e7f1      	b.n	cbac <dk_leds_init+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
    cbc8:	3601      	adds	r6, #1
    cbca:	2e04      	cmp	r6, #4
    cbcc:	f105 0508 	add.w	r5, r5, #8
    cbd0:	d1e0      	bne.n	cb94 <dk_leds_init+0x8>
}
    cbd2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    cbd6:	210f      	movs	r1, #15
    cbd8:	f7ff be0e 	b.w	c7f8 <dk_set_leds_state.part.0>
    cbdc:	00015f28 	.word	0x00015f28
    cbe0:	2000137c 	.word	0x2000137c
    cbe4:	0001981e 	.word	0x0001981e
    cbe8:	0001983b 	.word	0x0001983b

0000cbec <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cbec:	4b05      	ldr	r3, [pc, #20]	; (cc04 <dk_read_buttons+0x18>)
    cbee:	e8d3 3faf 	lda	r3, [r3]
	if (button_state != NULL) {
    cbf2:	b100      	cbz	r0, cbf6 <dk_read_buttons+0xa>
		*button_state = current_state;
    cbf4:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
    cbf6:	4804      	ldr	r0, [pc, #16]	; (cc08 <dk_read_buttons+0x1c>)
    cbf8:	b111      	cbz	r1, cc00 <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
    cbfa:	6802      	ldr	r2, [r0, #0]
    cbfc:	405a      	eors	r2, r3
    cbfe:	600a      	str	r2, [r1, #0]
	last_state = current_state;
    cc00:	6003      	str	r3, [r0, #0]
}
    cc02:	4770      	bx	lr
    cc04:	20001390 	.word	0x20001390
    cc08:	20001378 	.word	0x20001378

0000cc0c <dk_buttons_init>:
{
    cc0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	button_handler_cb = button_handler;
    cc10:	4b39      	ldr	r3, [pc, #228]	; (ccf8 <dk_buttons_init+0xec>)
    cc12:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
    cc14:	4d39      	ldr	r5, [pc, #228]	; (ccfc <dk_buttons_init+0xf0>)
    cc16:	4f3a      	ldr	r7, [pc, #232]	; (cd00 <dk_buttons_init+0xf4>)
    cc18:	483a      	ldr	r0, [pc, #232]	; (cd04 <dk_buttons_init+0xf8>)
    cc1a:	f008 f9c4 	bl	14fa6 <z_impl_k_mutex_init>
    cc1e:	46b9      	mov	r9, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
    cc20:	2600      	movs	r6, #0
    cc22:	46a8      	mov	r8, r5
		button_devs[i] = device_get_binding(button_pins[i].port);
    cc24:	6828      	ldr	r0, [r5, #0]
    cc26:	f000 fe33 	bl	d890 <z_impl_device_get_binding>
    cc2a:	f849 0b04 	str.w	r0, [r9], #4
		if (!button_devs[i]) {
    cc2e:	b940      	cbnz	r0, cc42 <dk_buttons_init+0x36>
			LOG_ERR("Cannot bind gpio device");
    cc30:	2145      	movs	r1, #69	; 0x45
    cc32:	4835      	ldr	r0, [pc, #212]	; (cd08 <dk_buttons_init+0xfc>)
    cc34:	f004 f8d2 	bl	10ddc <printk>
			return -ENODEV;
    cc38:	f06f 0412 	mvn.w	r4, #18
}
    cc3c:	4620      	mov	r0, r4
    cc3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
    cc42:	f44f 7288 	mov.w	r2, #272	; 0x110
    cc46:	7929      	ldrb	r1, [r5, #4]
    cc48:	f7ff fd7a 	bl	c740 <gpio_pin_configure>
		if (err) {
    cc4c:	4604      	mov	r4, r0
    cc4e:	b120      	cbz	r0, cc5a <dk_buttons_init+0x4e>
			LOG_ERR("Cannot configure button gpio");
    cc50:	2145      	movs	r1, #69	; 0x45
    cc52:	482e      	ldr	r0, [pc, #184]	; (cd0c <dk_buttons_init+0x100>)
		LOG_ERR("Cannot add work to workqueue");
    cc54:	f004 f8c2 	bl	10ddc <printk>
		return err;
    cc58:	e7f0      	b.n	cc3c <dk_buttons_init+0x30>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
    cc5a:	3601      	adds	r6, #1
    cc5c:	2e04      	cmp	r6, #4
    cc5e:	f105 0508 	add.w	r5, r5, #8
    cc62:	d1df      	bne.n	cc24 <dk_buttons_init+0x18>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
    cc64:	4605      	mov	r5, r0
	u32_t pin_mask = 0;
    cc66:	4681      	mov	r9, r0
		pin_mask |= BIT(button_pins[i].number);
    cc68:	f04f 0b01 	mov.w	fp, #1
    cc6c:	f8df a090 	ldr.w	sl, [pc, #144]	; cd00 <dk_buttons_init+0xf4>
		err = gpio_pin_interrupt_configure(button_devs[i],
    cc70:	eb08 03c5 	add.w	r3, r8, r5, lsl #3
    cc74:	f85a 0b04 	ldr.w	r0, [sl], #4
    cc78:	791e      	ldrb	r6, [r3, #4]
    cc7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    cc7e:	4631      	mov	r1, r6
    cc80:	f7ff fcc8 	bl	c614 <z_impl_gpio_pin_interrupt_configure>
		if (err) {
    cc84:	4604      	mov	r4, r0
    cc86:	b110      	cbz	r0, cc8e <dk_buttons_init+0x82>
			LOG_ERR("Cannot disable callbacks()");
    cc88:	2145      	movs	r1, #69	; 0x45
    cc8a:	4821      	ldr	r0, [pc, #132]	; (cd10 <dk_buttons_init+0x104>)
    cc8c:	e7e2      	b.n	cc54 <dk_buttons_init+0x48>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
    cc8e:	3501      	adds	r5, #1
		pin_mask |= BIT(button_pins[i].number);
    cc90:	fa0b f606 	lsl.w	r6, fp, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
    cc94:	2d04      	cmp	r5, #4
		pin_mask |= BIT(button_pins[i].number);
    cc96:	ea49 0906 	orr.w	r9, r9, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
    cc9a:	d1e9      	bne.n	cc70 <dk_buttons_init+0x64>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
    cc9c:	4606      	mov	r6, r0
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    cc9e:	4d1d      	ldr	r5, [pc, #116]	; (cd14 <dk_buttons_init+0x108>)
    cca0:	4b1d      	ldr	r3, [pc, #116]	; (cd18 <dk_buttons_init+0x10c>)
	callback->pin_mask = pin_mask;
    cca2:	e9c5 3901 	strd	r3, r9, [r5, #4]
		err = gpio_add_callback(button_devs[i], &gpio_cb);
    cca6:	f857 0b04 	ldr.w	r0, [r7], #4
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	if (api->manage_callback == NULL) {
    ccaa:	6883      	ldr	r3, [r0, #8]
    ccac:	69db      	ldr	r3, [r3, #28]
    ccae:	b13b      	cbz	r3, ccc0 <dk_buttons_init+0xb4>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    ccb0:	2201      	movs	r2, #1
    ccb2:	4629      	mov	r1, r5
    ccb4:	4798      	blx	r3
		if (err) {
    ccb6:	4604      	mov	r4, r0
    ccb8:	b128      	cbz	r0, ccc6 <dk_buttons_init+0xba>
			LOG_ERR("Cannot add callback");
    ccba:	2145      	movs	r1, #69	; 0x45
    ccbc:	4817      	ldr	r0, [pc, #92]	; (cd1c <dk_buttons_init+0x110>)
    ccbe:	e7c9      	b.n	cc54 <dk_buttons_init+0x48>
		return -ENOTSUP;
    ccc0:	f06f 0422 	mvn.w	r4, #34	; 0x22
    ccc4:	e7f9      	b.n	ccba <dk_buttons_init+0xae>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
    ccc6:	3601      	adds	r6, #1
    ccc8:	2e04      	cmp	r6, #4
    ccca:	d1ec      	bne.n	cca6 <dk_buttons_init+0x9a>
	k_delayed_work_init(&buttons_scan, buttons_scan_fn);
    cccc:	4914      	ldr	r1, [pc, #80]	; (cd20 <dk_buttons_init+0x114>)
    ccce:	4815      	ldr	r0, [pc, #84]	; (cd24 <dk_buttons_init+0x118>)
    ccd0:	f008 fa41 	bl	15156 <k_delayed_work_init>
	state = STATE_SCANNING;
    ccd4:	2201      	movs	r2, #1
    ccd6:	4b14      	ldr	r3, [pc, #80]	; (cd28 <dk_buttons_init+0x11c>)
    ccd8:	4912      	ldr	r1, [pc, #72]	; (cd24 <dk_buttons_init+0x118>)
    ccda:	701a      	strb	r2, [r3, #0]
    ccdc:	4813      	ldr	r0, [pc, #76]	; (cd2c <dk_buttons_init+0x120>)
    ccde:	2200      	movs	r2, #0
    cce0:	2300      	movs	r3, #0
    cce2:	f003 f855 	bl	fd90 <k_delayed_work_submit_to_queue>
	if (err) {
    cce6:	4604      	mov	r4, r0
    cce8:	b110      	cbz	r0, ccf0 <dk_buttons_init+0xe4>
		LOG_ERR("Cannot add work to workqueue");
    ccea:	2145      	movs	r1, #69	; 0x45
    ccec:	4810      	ldr	r0, [pc, #64]	; (cd30 <dk_buttons_init+0x124>)
    ccee:	e7b1      	b.n	cc54 <dk_buttons_init+0x48>
	dk_read_buttons(NULL, NULL);
    ccf0:	4601      	mov	r1, r0
    ccf2:	f7ff ff7b 	bl	cbec <dk_read_buttons>
	return 0;
    ccf6:	e7a1      	b.n	cc3c <dk_buttons_init+0x30>
    ccf8:	20001328 	.word	0x20001328
    ccfc:	00015f08 	.word	0x00015f08
    cd00:	20001318 	.word	0x20001318
    cd04:	2000132c 	.word	0x2000132c
    cd08:	0001981e 	.word	0x0001981e
    cd0c:	0001985a 	.word	0x0001985a
    cd10:	0001987c 	.word	0x0001987c
    cd14:	20001368 	.word	0x20001368
    cd18:	0000c855 	.word	0x0000c855
    cd1c:	0001989c 	.word	0x0001989c
    cd20:	0000c959 	.word	0x0000c959
    cd24:	20001348 	.word	0x20001348
    cd28:	20002033 	.word	0x20002033
    cd2c:	20001e54 	.word	0x20001e54
    cd30:	000197df 	.word	0x000197df

0000cd34 <dk_set_led>:

int dk_set_led(u8_t led_idx, u32_t val)
{
	int err;

	if (led_idx > ARRAY_SIZE(led_pins)) {
    cd34:	2804      	cmp	r0, #4
{
    cd36:	b510      	push	{r4, lr}
	if (led_idx > ARRAY_SIZE(led_pins)) {
    cd38:	d907      	bls.n	cd4a <dk_set_led+0x16>
		LOG_ERR("LED index out of the range");
    cd3a:	2145      	movs	r1, #69	; 0x45
    cd3c:	480d      	ldr	r0, [pc, #52]	; (cd74 <dk_set_led+0x40>)
    cd3e:	f004 f84d 	bl	10ddc <printk>
    cd42:	f06f 0415 	mvn.w	r4, #21
		IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS) ? !val : val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
    cd46:	4620      	mov	r0, r4
    cd48:	bd10      	pop	{r4, pc}
	err = gpio_pin_set_raw(led_devs[led_idx], led_pins[led_idx].number,
    cd4a:	fab1 f281 	clz	r2, r1
    cd4e:	4b0a      	ldr	r3, [pc, #40]	; (cd78 <dk_set_led+0x44>)
    cd50:	0952      	lsrs	r2, r2, #5
    cd52:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    cd56:	7919      	ldrb	r1, [r3, #4]
    cd58:	4b08      	ldr	r3, [pc, #32]	; (cd7c <dk_set_led+0x48>)
    cd5a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    cd5e:	f7ff fd1f 	bl	c7a0 <gpio_pin_set_raw>
	if (err) {
    cd62:	4604      	mov	r4, r0
    cd64:	2800      	cmp	r0, #0
    cd66:	d0ee      	beq.n	cd46 <dk_set_led+0x12>
		LOG_ERR("Cannot write LED gpio");
    cd68:	2145      	movs	r1, #69	; 0x45
    cd6a:	4805      	ldr	r0, [pc, #20]	; (cd80 <dk_set_led+0x4c>)
    cd6c:	f004 f836 	bl	10ddc <printk>
    cd70:	e7e9      	b.n	cd46 <dk_set_led+0x12>
    cd72:	bf00      	nop
    cd74:	000198b5 	.word	0x000198b5
    cd78:	00015f28 	.word	0x00015f28
    cd7c:	2000137c 	.word	0x2000137c
    cd80:	0001974e 	.word	0x0001974e

0000cd84 <k_sys_fatal_error_handler>:
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
    cd84:	4803      	ldr	r0, [pc, #12]	; (cd94 <k_sys_fatal_error_handler+0x10>)
    cd86:	2145      	movs	r1, #69	; 0x45
{
    cd88:	b508      	push	{r3, lr}
	LOG_ERR("Resetting system");
    cd8a:	f004 f827 	bl	10ddc <printk>
	sys_arch_reboot(0);
    cd8e:	2000      	movs	r0, #0
    cd90:	f7f6 fb34 	bl	33fc <sys_arch_reboot>

	CODE_UNREACHABLE;
    cd94:	000198e9 	.word	0x000198e9

0000cd98 <nrf53_errata_42>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA_APPLICATION) || defined (DEVELOP_IN_NRF5340_APPLICATION)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    cd98:	4b05      	ldr	r3, [pc, #20]	; (cdb0 <nrf53_errata_42+0x18>)
    cd9a:	6818      	ldr	r0, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    cd9c:	3b04      	subs	r3, #4
        #endif
        #if defined (NRF5340_XXAA_APPLICATION) || defined (DEVELOP_IN_NRF5340_APPLICATION)
            if (var1 == 0x07)
    cd9e:	681b      	ldr	r3, [r3, #0]
    cda0:	2b07      	cmp	r3, #7
    cda2:	d103      	bne.n	cdac <nrf53_errata_42+0x14>
            {
                switch(var2)
    cda4:	1e83      	subs	r3, r0, #2
    cda6:	4258      	negs	r0, r3
    cda8:	4158      	adcs	r0, r3
    cdaa:	4770      	bx	lr
                    case 0x03ul:
                        return false;
                }
            }
        #endif
        return false;
    cdac:	2000      	movs	r0, #0
    #endif
}
    cdae:	4770      	bx	lr
    cdb0:	00ff0134 	.word	0x00ff0134

0000cdb4 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
    cdb4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    cdb8:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
    cdbc:	4b03      	ldr	r3, [pc, #12]	; (cdcc <SystemCoreClockUpdate+0x18>)
    cdbe:	f002 0201 	and.w	r2, r2, #1
    cdc2:	40d3      	lsrs	r3, r2
    cdc4:	4a02      	ldr	r2, [pc, #8]	; (cdd0 <SystemCoreClockUpdate+0x1c>)
    cdc6:	6013      	str	r3, [r2, #0]
#endif
}
    cdc8:	4770      	bx	lr
    cdca:	bf00      	nop
    cdcc:	07a12000 	.word	0x07a12000
    cdd0:	200002bc 	.word	0x200002bc

0000cdd4 <SystemInit>:

void SystemInit(void)
{
    cdd4:	b508      	push	{r3, lr}
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    cdd6:	f7ff ffdf 	bl	cd98 <nrf53_errata_42>
    cdda:	b148      	cbz	r0, cdf0 <SystemInit+0x1c>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    cddc:	4b33      	ldr	r3, [pc, #204]	; (ceac <SystemInit+0xd8>)
    cdde:	681a      	ldr	r2, [r3, #0]
    cde0:	b932      	cbnz	r2, cdf0 <SystemInit+0x1c>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    cde2:	210d      	movs	r1, #13
    cde4:	6019      	str	r1, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    cde6:	2101      	movs	r1, #1
    cde8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    cdec:	6019      	str	r1, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    cdee:	601a      	str	r2, [r3, #0]
{
    cdf0:	2200      	movs	r2, #0
    cdf2:	00d3      	lsls	r3, r2, #3
    cdf4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    cdf8:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    cdfc:	3101      	adds	r1, #1
    cdfe:	d007      	beq.n	ce10 <SystemInit+0x3c>
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    ce00:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    ce04:	3201      	adds	r2, #1
            *NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    ce06:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    ce0a:	2a20      	cmp	r2, #32
            *NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    ce0c:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    ce0e:	d1f0      	bne.n	cdf2 <SystemInit+0x1e>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    ce10:	f7ff ffc2 	bl	cd98 <nrf53_errata_42>
    ce14:	2800      	cmp	r0, #0
    ce16:	d142      	bne.n	ce9e <SystemInit+0xca>
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    ce18:	f7ff ffbe 	bl	cd98 <nrf53_errata_42>
    ce1c:	b138      	cbz	r0, ce2e <SystemInit+0x5a>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    ce1e:	4b24      	ldr	r3, [pc, #144]	; (ceb0 <SystemInit+0xdc>)
    ce20:	4a24      	ldr	r2, [pc, #144]	; (ceb4 <SystemInit+0xe0>)
    ce22:	601a      	str	r2, [r3, #0]
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    ce24:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    ce28:	2201      	movs	r2, #1
    ce2a:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
    ce2e:	f7ff ffb3 	bl	cd98 <nrf53_errata_42>
    ce32:	b110      	cbz	r0, ce3a <SystemInit+0x66>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    ce34:	2200      	movs	r2, #0
    ce36:	4b20      	ldr	r3, [pc, #128]	; (ceb8 <SystemInit+0xe4>)
    ce38:	601a      	str	r2, [r3, #0]
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    ce3a:	f7ff ffad 	bl	cd98 <nrf53_errata_42>
    ce3e:	b150      	cbz	r0, ce56 <SystemInit+0x82>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    ce40:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    ce44:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    ce48:	07d1      	lsls	r1, r2, #31
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    ce4a:	bf42      	ittt	mi
    ce4c:	2200      	movmi	r2, #0
    ce4e:	f8c3 2114 	strmi.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    ce52:	f8c3 2118 	strmi.w	r2, [r3, #280]	; 0x118
        return false;
    #else
        #if defined (NRF5340_XXAA_APPLICATION) || defined (DEVELOP_IN_NRF5340_APPLICATION)\
         || defined (NRF5340_XXAA_NETWORK) || defined (DEVELOP_IN_NRF5340_NETWORK)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    ce56:	4b19      	ldr	r3, [pc, #100]	; (cebc <SystemInit+0xe8>)
                uint32_t var2 = *(uint32_t *)0x01FF0134ul;
            #endif
        #endif
        #if defined (NRF5340_XXAA_APPLICATION) || defined (DEVELOP_IN_NRF5340_APPLICATION)\
         || defined (NRF5340_XXAA_NETWORK) || defined (DEVELOP_IN_NRF5340_NETWORK)
            if (var1 == 0x07)
    ce58:	681b      	ldr	r3, [r3, #0]
    ce5a:	2b07      	cmp	r3, #7
    ce5c:	d10e      	bne.n	ce7c <SystemInit+0xa8>
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    ce5e:	4b18      	ldr	r3, [pc, #96]	; (cec0 <SystemInit+0xec>)
            {
                switch(var2)
    ce60:	681b      	ldr	r3, [r3, #0]
    ce62:	3b02      	subs	r3, #2
    ce64:	2b01      	cmp	r3, #1
    ce66:	d809      	bhi.n	ce7c <SystemInit+0xa8>

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    ce68:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    ce6c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    ce70:	07d2      	lsls	r2, r2, #31
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    ce72:	bf44      	itt	mi
    ce74:	f06f 0201 	mvnmi.w	r2, #1
    ce78:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    ce7c:	f7ff ff8c 	bl	cd98 <nrf53_errata_42>
    ce80:	b110      	cbz	r0, ce88 <SystemInit+0xb4>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    ce82:	2265      	movs	r2, #101	; 0x65
    ce84:	4b0f      	ldr	r3, [pc, #60]	; (cec4 <SystemInit+0xf0>)
    ce86:	601a      	str	r2, [r3, #0]

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    ce88:	4a0f      	ldr	r2, [pc, #60]	; (cec8 <SystemInit+0xf4>)
    ce8a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    ce8e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    ce92:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
}
    ce96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SystemCoreClockUpdate();
    ce9a:	f7ff bf8b 	b.w	cdb4 <SystemCoreClockUpdate>
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    ce9e:	2229      	movs	r2, #41	; 0x29
    cea0:	4b08      	ldr	r3, [pc, #32]	; (cec4 <SystemInit+0xf0>)
    cea2:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    cea4:	2203      	movs	r2, #3
    cea6:	631a      	str	r2, [r3, #48]	; 0x30
    cea8:	e7b6      	b.n	ce18 <SystemInit+0x44>
    ceaa:	bf00      	nop
    ceac:	50004a20 	.word	0x50004a20
    ceb0:	50039530 	.word	0x50039530
    ceb4:	beef0044 	.word	0xbeef0044
    ceb8:	5003254c 	.word	0x5003254c
    cebc:	00ff0130 	.word	0x00ff0130
    cec0:	00ff0134 	.word	0x00ff0134
    cec4:	5000470c 	.word	0x5000470c
    cec8:	e000ed00 	.word	0xe000ed00

0000cecc <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
    cecc:	b570      	push	{r4, r5, r6, lr}
    cece:	4616      	mov	r6, r2
    NRFX_ASSERT(handler);
    ced0:	460d      	mov	r5, r1
    ced2:	b949      	cbnz	r1, cee8 <nrfx_ipc_init+0x1c>
    ced4:	490b      	ldr	r1, [pc, #44]	; (cf04 <nrfx_ipc_init+0x38>)
    ced6:	480c      	ldr	r0, [pc, #48]	; (cf08 <nrfx_ipc_init+0x3c>)
    ced8:	2332      	movs	r3, #50	; 0x32
    ceda:	4a0c      	ldr	r2, [pc, #48]	; (cf0c <nrfx_ipc_init+0x40>)
    cedc:	f003 ff7e 	bl	10ddc <printk>
    cee0:	2132      	movs	r1, #50	; 0x32
    cee2:	480a      	ldr	r0, [pc, #40]	; (cf0c <nrfx_ipc_init+0x40>)
    cee4:	f004 fa10 	bl	11308 <assert_post_action>
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    cee8:	4c09      	ldr	r4, [pc, #36]	; (cf10 <nrfx_ipc_init+0x44>)
    ceea:	7923      	ldrb	r3, [r4, #4]
    ceec:	b943      	cbnz	r3, cf00 <nrfx_ipc_init+0x34>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
    ceee:	202a      	movs	r0, #42	; 0x2a
    cef0:	f7f5 ff60 	bl	2db4 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    cef4:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
    cef6:	4807      	ldr	r0, [pc, #28]	; (cf14 <nrfx_ipc_init+0x48>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    cef8:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
    cefa:	6025      	str	r5, [r4, #0]
    m_ipc_cb.p_context = p_context;
    cefc:	60a6      	str	r6, [r4, #8]
}
    cefe:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
    cf00:	4805      	ldr	r0, [pc, #20]	; (cf18 <nrfx_ipc_init+0x4c>)
    cf02:	e7fc      	b.n	cefe <nrfx_ipc_init+0x32>
    cf04:	0001933e 	.word	0x0001933e
    cf08:	00016493 	.word	0x00016493
    cf0c:	0001990b 	.word	0x0001990b
    cf10:	20001394 	.word	0x20001394
    cf14:	0bad0000 	.word	0x0bad0000
    cf18:	0bad000c 	.word	0x0bad000c

0000cf1c <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
    cf1c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
    cf1e:	4604      	mov	r4, r0
    cf20:	b948      	cbnz	r0, cf36 <nrfx_ipc_config_load+0x1a>
    cf22:	491a      	ldr	r1, [pc, #104]	; (cf8c <nrfx_ipc_config_load+0x70>)
    cf24:	481a      	ldr	r0, [pc, #104]	; (cf90 <nrfx_ipc_config_load+0x74>)
    cf26:	2344      	movs	r3, #68	; 0x44
    cf28:	4a1a      	ldr	r2, [pc, #104]	; (cf94 <nrfx_ipc_config_load+0x78>)
    cf2a:	f003 ff57 	bl	10ddc <printk>
    cf2e:	2144      	movs	r1, #68	; 0x44
    cf30:	4818      	ldr	r0, [pc, #96]	; (cf94 <nrfx_ipc_config_load+0x78>)
    cf32:	f004 f9e9 	bl	11308 <assert_post_action>
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    cf36:	4b18      	ldr	r3, [pc, #96]	; (cf98 <nrfx_ipc_config_load+0x7c>)
    cf38:	791b      	ldrb	r3, [r3, #4]
    cf3a:	2b01      	cmp	r3, #1
    cf3c:	d009      	beq.n	cf52 <nrfx_ipc_config_load+0x36>
    cf3e:	4917      	ldr	r1, [pc, #92]	; (cf9c <nrfx_ipc_config_load+0x80>)
    cf40:	4813      	ldr	r0, [pc, #76]	; (cf90 <nrfx_ipc_config_load+0x74>)
    cf42:	2345      	movs	r3, #69	; 0x45
    cf44:	4a13      	ldr	r2, [pc, #76]	; (cf94 <nrfx_ipc_config_load+0x78>)
    cf46:	f003 ff49 	bl	10ddc <printk>
    cf4a:	2145      	movs	r1, #69	; 0x45
    cf4c:	4811      	ldr	r0, [pc, #68]	; (cf94 <nrfx_ipc_config_load+0x78>)
    cf4e:	f004 f9db 	bl	11308 <assert_post_action>
{
    cf52:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
    cf54:	4a12      	ldr	r2, [pc, #72]	; (cfa0 <nrfx_ipc_config_load+0x84>)

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
    cf56:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
    cf5a:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
    cf5e:	3301      	adds	r3, #1
    cf60:	2b10      	cmp	r3, #16
    cf62:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
    cf66:	d1f6      	bne.n	cf56 <nrfx_ipc_config_load+0x3a>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
    cf68:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
    cf6a:	4a0d      	ldr	r2, [pc, #52]	; (cfa0 <nrfx_ipc_config_load+0x84>)
    cf6c:	f104 0140 	add.w	r1, r4, #64	; 0x40
    cf70:	f503 70b2 	add.w	r0, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
    cf74:	f851 5b04 	ldr.w	r5, [r1], #4
    for (i = 0; i < IPC_CONF_NUM; ++i)
    cf78:	3301      	adds	r3, #1
    cf7a:	2b10      	cmp	r3, #16
    cf7c:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    cf80:	d1f6      	bne.n	cf70 <nrfx_ipc_config_load+0x54>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
    cf82:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    p_reg->INTENSET = mask;
    cf86:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    cf8a:	bd38      	pop	{r3, r4, r5, pc}
    cf8c:	00019946 	.word	0x00019946
    cf90:	00016493 	.word	0x00016493
    cf94:	0001990b 	.word	0x0001990b
    cf98:	20001394 	.word	0x20001394
    cf9c:	0001994f 	.word	0x0001994f
    cfa0:	5002a000 	.word	0x5002a000

0000cfa4 <nrfx_ipc_receive_event_enable>:
    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    cfa4:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    cfa6:	4b0b      	ldr	r3, [pc, #44]	; (cfd4 <nrfx_ipc_receive_event_enable+0x30>)
{
    cfa8:	4604      	mov	r4, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    cfaa:	791b      	ldrb	r3, [r3, #4]
    cfac:	2b01      	cmp	r3, #1
    cfae:	d009      	beq.n	cfc4 <nrfx_ipc_receive_event_enable+0x20>
    cfb0:	4909      	ldr	r1, [pc, #36]	; (cfd8 <nrfx_ipc_receive_event_enable+0x34>)
    cfb2:	480a      	ldr	r0, [pc, #40]	; (cfdc <nrfx_ipc_receive_event_enable+0x38>)
    cfb4:	236a      	movs	r3, #106	; 0x6a
    cfb6:	4a0a      	ldr	r2, [pc, #40]	; (cfe0 <nrfx_ipc_receive_event_enable+0x3c>)
    cfb8:	f003 ff10 	bl	10ddc <printk>
    cfbc:	216a      	movs	r1, #106	; 0x6a
    cfbe:	4808      	ldr	r0, [pc, #32]	; (cfe0 <nrfx_ipc_receive_event_enable+0x3c>)
    cfc0:	f004 f9a2 	bl	11308 <assert_post_action>
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
    cfc4:	2301      	movs	r3, #1
    cfc6:	fa03 f404 	lsl.w	r4, r3, r4
    cfca:	4b06      	ldr	r3, [pc, #24]	; (cfe4 <nrfx_ipc_receive_event_enable+0x40>)
    cfcc:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
}
    cfd0:	bd10      	pop	{r4, pc}
    cfd2:	bf00      	nop
    cfd4:	20001394 	.word	0x20001394
    cfd8:	0001994f 	.word	0x0001994f
    cfdc:	00016493 	.word	0x00016493
    cfe0:	0001990b 	.word	0x0001990b
    cfe4:	5002a000 	.word	0x5002a000

0000cfe8 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    cfe8:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    cfea:	4b0b      	ldr	r3, [pc, #44]	; (d018 <nrfx_ipc_receive_event_disable+0x30>)
{
    cfec:	4604      	mov	r4, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    cfee:	791b      	ldrb	r3, [r3, #4]
    cff0:	2b01      	cmp	r3, #1
    cff2:	d009      	beq.n	d008 <nrfx_ipc_receive_event_disable+0x20>
    cff4:	4909      	ldr	r1, [pc, #36]	; (d01c <nrfx_ipc_receive_event_disable+0x34>)
    cff6:	480a      	ldr	r0, [pc, #40]	; (d020 <nrfx_ipc_receive_event_disable+0x38>)
    cff8:	2370      	movs	r3, #112	; 0x70
    cffa:	4a0a      	ldr	r2, [pc, #40]	; (d024 <nrfx_ipc_receive_event_disable+0x3c>)
    cffc:	f003 feee 	bl	10ddc <printk>
    d000:	2170      	movs	r1, #112	; 0x70
    d002:	4808      	ldr	r0, [pc, #32]	; (d024 <nrfx_ipc_receive_event_disable+0x3c>)
    d004:	f004 f980 	bl	11308 <assert_post_action>
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
    d008:	2301      	movs	r3, #1
    d00a:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->INTENCLR = mask;
    d00e:	4b06      	ldr	r3, [pc, #24]	; (d028 <nrfx_ipc_receive_event_disable+0x40>)
    d010:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
}
    d014:	bd10      	pop	{r4, pc}
    d016:	bf00      	nop
    d018:	20001394 	.word	0x20001394
    d01c:	0001994f 	.word	0x0001994f
    d020:	00016493 	.word	0x00016493
    d024:	0001990b 	.word	0x0001990b
    d028:	5002a000 	.word	0x5002a000

0000d02c <nrfx_ipc_irq_handler>:
    return p_reg->INTPEND;
    d02c:	4b16      	ldr	r3, [pc, #88]	; (d088 <nrfx_ipc_irq_handler+0x5c>)
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
    d02e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d032:	f8d3 630c 	ldr.w	r6, [r3, #780]	; 0x30c
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    d036:	f8df 9060 	ldr.w	r9, [pc, #96]	; d098 <nrfx_ipc_irq_handler+0x6c>
    // Get the information about events that fire this interrupt
    uint32_t events_map = nrf_ipc_int_pending_get(NRF_IPC);

    // Clear these events
    uint32_t bitmask = events_map;
    d03a:	4635      	mov	r5, r6
    d03c:	4f13      	ldr	r7, [pc, #76]	; (d08c <nrfx_ipc_irq_handler+0x60>)
    d03e:	f8df 805c 	ldr.w	r8, [pc, #92]	; d09c <nrfx_ipc_irq_handler+0x70>
    while (bitmask)
    d042:	b935      	cbnz	r5, d052 <nrfx_ipc_irq_handler+0x26>
        bitmask &= ~(1UL << event_idx);
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
    d044:	4b12      	ldr	r3, [pc, #72]	; (d090 <nrfx_ipc_irq_handler+0x64>)
    d046:	4630      	mov	r0, r6
}
    d048:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
    d04c:	681a      	ldr	r2, [r3, #0]
    d04e:	6899      	ldr	r1, [r3, #8]
    d050:	4710      	bx	r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    d052:	fa95 f4a5 	rbit	r4, r5
        bitmask &= ~(1UL << event_idx);
    d056:	2301      	movs	r3, #1
  return __builtin_clz(value);
    d058:	fab4 f484 	clz	r4, r4
    d05c:	40a3      	lsls	r3, r4
    d05e:	2c0f      	cmp	r4, #15
    d060:	ea25 0503 	bic.w	r5, r5, r3
    d064:	d90b      	bls.n	d07e <nrfx_ipc_irq_handler+0x52>
    d066:	4639      	mov	r1, r7
    d068:	4640      	mov	r0, r8
    d06a:	f240 13e5 	movw	r3, #485	; 0x1e5
    d06e:	464a      	mov	r2, r9
    d070:	f003 feb4 	bl	10ddc <printk>
    d074:	f240 11e5 	movw	r1, #485	; 0x1e5
    d078:	4648      	mov	r0, r9
    d07a:	f004 f945 	bl	11308 <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d07e:	2200      	movs	r2, #0
    d080:	4b04      	ldr	r3, [pc, #16]	; (d094 <nrfx_ipc_irq_handler+0x68>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    d082:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d084:	511a      	str	r2, [r3, r4]
}
    d086:	e7dc      	b.n	d042 <nrfx_ipc_irq_handler+0x16>
    d088:	5002a000 	.word	0x5002a000
    d08c:	000199ae 	.word	0x000199ae
    d090:	20001394 	.word	0x20001394
    d094:	5002a100 	.word	0x5002a100
    d098:	0001997c 	.word	0x0001997c
    d09c:	00016493 	.word	0x00016493

0000d0a0 <nrfx_nvmc_page_erase>:
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
    d0a0:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
{
    d0a4:	b510      	push	{r4, lr}
    d0a6:	4604      	mov	r4, r0
    NRFX_ASSERT(((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
    d0a8:	d310      	bcc.n	d0cc <nrfx_nvmc_page_erase+0x2c>
    d0aa:	f100 437f 	add.w	r3, r0, #4278190080	; 0xff000000
    d0ae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    d0b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    d0b6:	d309      	bcc.n	d0cc <nrfx_nvmc_page_erase+0x2c>
    d0b8:	490f      	ldr	r1, [pc, #60]	; (d0f8 <nrfx_nvmc_page_erase+0x58>)
    d0ba:	4810      	ldr	r0, [pc, #64]	; (d0fc <nrfx_nvmc_page_erase+0x5c>)
    d0bc:	23e1      	movs	r3, #225	; 0xe1
    d0be:	4a10      	ldr	r2, [pc, #64]	; (d100 <nrfx_nvmc_page_erase+0x60>)
    d0c0:	f003 fe8c 	bl	10ddc <printk>
    d0c4:	21e1      	movs	r1, #225	; 0xe1
    d0c6:	480e      	ldr	r0, [pc, #56]	; (d100 <nrfx_nvmc_page_erase+0x60>)
    d0c8:	f004 f91e 	bl	11308 <assert_post_action>
    return !(addr % flash_page_size_get());
    d0cc:	f3c4 030b 	ubfx	r3, r4, #0, #12
#if !defined(NRF_TRUSTZONE_NONSECURE)
     || ((addr - (uint32_t)NRF_UICR) < sizeof(NRF_UICR_Type))
#endif
    );

    if (!is_page_aligned_check(addr))
    d0d0:	b97b      	cbnz	r3, d0f2 <nrfx_nvmc_page_erase+0x52>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
    d0d2:	2202      	movs	r2, #2
    d0d4:	4b0b      	ldr	r3, [pc, #44]	; (d104 <nrfx_nvmc_page_erase+0x64>)
    d0d6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
    d0da:	f04f 32ff 	mov.w	r2, #4294967295
    d0de:	6022      	str	r2, [r4, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    d0e0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    d0e4:	07d2      	lsls	r2, r2, #31
    d0e6:	d5fb      	bpl.n	d0e0 <nrfx_nvmc_page_erase+0x40>
    p_reg->CONFIG = (uint32_t)mode;
    d0e8:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
    d0ea:	4807      	ldr	r0, [pc, #28]	; (d108 <nrfx_nvmc_page_erase+0x68>)
    d0ec:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    d0f0:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_ADDR;
    d0f2:	4806      	ldr	r0, [pc, #24]	; (d10c <nrfx_nvmc_page_erase+0x6c>)
    d0f4:	e7fc      	b.n	d0f0 <nrfx_nvmc_page_erase+0x50>
    d0f6:	bf00      	nop
    d0f8:	00019a15 	.word	0x00019a15
    d0fc:	00016493 	.word	0x00016493
    d100:	000199b9 	.word	0x000199b9
    d104:	50039000 	.word	0x50039000
    d108:	0bad0000 	.word	0x0bad0000
    d10c:	0bad000a 	.word	0x0bad000a

0000d110 <nrfx_nvmc_word_write>:
    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    NRFX_ASSERT(((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
    d110:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
{
    d114:	b538      	push	{r3, r4, r5, lr}
    d116:	4604      	mov	r4, r0
    d118:	460d      	mov	r5, r1
    NRFX_ASSERT(((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
    d11a:	d312      	bcc.n	d142 <nrfx_nvmc_word_write+0x32>
    d11c:	f100 437f 	add.w	r3, r0, #4278190080	; 0xff000000
    d120:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    d124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    d128:	d30b      	bcc.n	d142 <nrfx_nvmc_word_write+0x32>
    d12a:	4914      	ldr	r1, [pc, #80]	; (d17c <nrfx_nvmc_word_write+0x6c>)
    d12c:	4814      	ldr	r0, [pc, #80]	; (d180 <nrfx_nvmc_word_write+0x70>)
    d12e:	f240 138b 	movw	r3, #395	; 0x18b
    d132:	4a14      	ldr	r2, [pc, #80]	; (d184 <nrfx_nvmc_word_write+0x74>)
    d134:	f003 fe52 	bl	10ddc <printk>
    d138:	f240 118b 	movw	r1, #395	; 0x18b
    d13c:	4811      	ldr	r0, [pc, #68]	; (d184 <nrfx_nvmc_word_write+0x74>)
    d13e:	f004 f8e3 	bl	11308 <assert_post_action>
#if !defined(NRF_TRUSTZONE_NONSECURE)
     || ((addr - (uint32_t)NRF_UICR) < sizeof(NRF_UICR_Type))
#endif
    );
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
    d142:	07a1      	lsls	r1, r4, #30
    d144:	d00b      	beq.n	d15e <nrfx_nvmc_word_write+0x4e>
    d146:	4910      	ldr	r1, [pc, #64]	; (d188 <nrfx_nvmc_word_write+0x78>)
    d148:	480d      	ldr	r0, [pc, #52]	; (d180 <nrfx_nvmc_word_write+0x70>)
    d14a:	f44f 73c8 	mov.w	r3, #400	; 0x190
    d14e:	4a0d      	ldr	r2, [pc, #52]	; (d184 <nrfx_nvmc_word_write+0x74>)
    d150:	f003 fe44 	bl	10ddc <printk>
    d154:	f44f 71c8 	mov.w	r1, #400	; 0x190
    d158:	480a      	ldr	r0, [pc, #40]	; (d184 <nrfx_nvmc_word_write+0x74>)
    d15a:	f004 f8d5 	bl	11308 <assert_post_action>
    d15e:	2201      	movs	r2, #1
    d160:	4b0a      	ldr	r3, [pc, #40]	; (d18c <nrfx_nvmc_word_write+0x7c>)
    d162:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    d166:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    d16a:	07d2      	lsls	r2, r2, #31
    d16c:	d5fb      	bpl.n	d166 <nrfx_nvmc_word_write+0x56>
    *(volatile uint32_t *)addr = value;
    d16e:	6025      	str	r5, [r4, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    d170:	f3bf 8f5f 	dmb	sy
    p_reg->CONFIG = (uint32_t)mode;
    d174:	2200      	movs	r2, #0
    d176:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nvmc_write_mode_set();

    nvmc_word_write(addr, value);

    nvmc_readonly_mode_set();
}
    d17a:	bd38      	pop	{r3, r4, r5, pc}
    d17c:	00019a15 	.word	0x00019a15
    d180:	00016493 	.word	0x00016493
    d184:	000199b9 	.word	0x000199b9
    d188:	00019a8b 	.word	0x00019a8b
    d18c:	50039000 	.word	0x50039000

0000d190 <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
    d190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d194:	460e      	mov	r6, r1
    d196:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
    d198:	4d0c      	ldr	r5, [pc, #48]	; (d1cc <metal_generic_dev_open+0x3c>)
    d19a:	f855 4f18 	ldr.w	r4, [r5, #24]!
    d19e:	42ac      	cmp	r4, r5
    d1a0:	d103      	bne.n	d1aa <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
    d1a2:	f06f 0012 	mvn.w	r0, #18
    d1a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
    d1aa:	4631      	mov	r1, r6
    d1ac:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
    d1b0:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
    d1b4:	f004 ffa8 	bl	12108 <strcmp>
    d1b8:	b930      	cbnz	r0, d1c8 <metal_generic_dev_open+0x38>
			return metal_generic_dev_sys_open(dev);
    d1ba:	4640      	mov	r0, r8
			*device = dev;
    d1bc:	f8c7 8000 	str.w	r8, [r7]
}
    d1c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
    d1c4:	f007 bb85 	b.w	148d2 <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
    d1c8:	6824      	ldr	r4, [r4, #0]
    d1ca:	e7e8      	b.n	d19e <metal_generic_dev_open+0xe>
    d1cc:	200013a0 	.word	0x200013a0

0000d1d0 <metal_bus_find>:
{
    d1d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d1d4:	4607      	mov	r7, r0
    d1d6:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
    d1d8:	4e0b      	ldr	r6, [pc, #44]	; (d208 <metal_bus_find+0x38>)
    d1da:	f856 4f08 	ldr.w	r4, [r6, #8]!
    d1de:	42b4      	cmp	r4, r6
    d1e0:	d102      	bne.n	d1e8 <metal_bus_find+0x18>
	return -ENOENT;
    d1e2:	f06f 0001 	mvn.w	r0, #1
    d1e6:	e00a      	b.n	d1fe <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
    d1e8:	4639      	mov	r1, r7
    d1ea:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
    d1ee:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
    d1f2:	f004 ff89 	bl	12108 <strcmp>
    d1f6:	b920      	cbnz	r0, d202 <metal_bus_find+0x32>
    d1f8:	b11d      	cbz	r5, d202 <metal_bus_find+0x32>
			*result = bus;
    d1fa:	f8c5 8000 	str.w	r8, [r5]
}
    d1fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
    d202:	6824      	ldr	r4, [r4, #0]
    d204:	e7eb      	b.n	d1de <metal_bus_find+0xe>
    d206:	bf00      	nop
    d208:	200013a0 	.word	0x200013a0

0000d20c <metal_bus_register>:
{
    d20c:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
    d20e:	4604      	mov	r4, r0
    d210:	b910      	cbnz	r0, d218 <metal_bus_register+0xc>
		return -EINVAL;
    d212:	f06f 0015 	mvn.w	r0, #21
}
    d216:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
    d218:	6800      	ldr	r0, [r0, #0]
    d21a:	2800      	cmp	r0, #0
    d21c:	d0f9      	beq.n	d212 <metal_bus_register+0x6>
    d21e:	f004 ff6c 	bl	120fa <strlen>
    d222:	2800      	cmp	r0, #0
    d224:	d0f5      	beq.n	d212 <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
    d226:	2100      	movs	r1, #0
    d228:	6820      	ldr	r0, [r4, #0]
    d22a:	f7ff ffd1 	bl	d1d0 <metal_bus_find>
    d22e:	b1c0      	cbz	r0, d262 <metal_bus_register+0x56>
	metal_list_init(&bus->devices);
    d230:	f104 031c 	add.w	r3, r4, #28
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
	list->prev = list;
	list->next = list;
    d234:	e9c4 3307 	strd	r3, r3, [r4, #28]
}

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
	new_node->prev = node->prev;
    d238:	4b0c      	ldr	r3, [pc, #48]	; (d26c <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
    d23a:	f104 0224 	add.w	r2, r4, #36	; 0x24
    d23e:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
    d240:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
    d244:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
    d246:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
    d248:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
    d24a:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
    d24c:	781a      	ldrb	r2, [r3, #0]
    d24e:	2a06      	cmp	r2, #6
    d250:	d905      	bls.n	d25e <metal_bus_register+0x52>
    d252:	685b      	ldr	r3, [r3, #4]
    d254:	b143      	cbz	r3, d268 <metal_bus_register+0x5c>
    d256:	2007      	movs	r0, #7
    d258:	6822      	ldr	r2, [r4, #0]
    d25a:	4905      	ldr	r1, [pc, #20]	; (d270 <metal_bus_register+0x64>)
    d25c:	4798      	blx	r3
	return 0;
    d25e:	2000      	movs	r0, #0
    d260:	e7d9      	b.n	d216 <metal_bus_register+0xa>
		return -EEXIST;
    d262:	f06f 0010 	mvn.w	r0, #16
    d266:	e7d6      	b.n	d216 <metal_bus_register+0xa>
	return 0;
    d268:	4618      	mov	r0, r3
    d26a:	e7d4      	b.n	d216 <metal_bus_register+0xa>
    d26c:	200013a0 	.word	0x200013a0
    d270:	00019ab4 	.word	0x00019ab4

0000d274 <metal_register_generic_device>:
{
    d274:	b510      	push	{r4, lr}
    d276:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
    d278:	6800      	ldr	r0, [r0, #0]
    d27a:	b910      	cbnz	r0, d282 <metal_register_generic_device+0xe>
		return -EINVAL;
    d27c:	f06f 0015 	mvn.w	r0, #21
}
    d280:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
    d282:	f004 ff3a 	bl	120fa <strlen>
    d286:	2800      	cmp	r0, #0
    d288:	d0f8      	beq.n	d27c <metal_register_generic_device+0x8>
    d28a:	68a3      	ldr	r3, [r4, #8]
    d28c:	2b01      	cmp	r3, #1
    d28e:	d8f5      	bhi.n	d27c <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
    d290:	4b06      	ldr	r3, [pc, #24]	; (d2ac <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
    d292:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
    d296:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
    d298:	4b05      	ldr	r3, [pc, #20]	; (d2b0 <metal_register_generic_device+0x3c>)
    d29a:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
    d29c:	f103 0018 	add.w	r0, r3, #24
    d2a0:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
    d2a2:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
    d2a4:	61d9      	str	r1, [r3, #28]
	return 0;
    d2a6:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
    d2a8:	6011      	str	r1, [r2, #0]
}
    d2aa:	e7e9      	b.n	d280 <metal_register_generic_device+0xc>
    d2ac:	200002c0 	.word	0x200002c0
    d2b0:	200013a0 	.word	0x200013a0

0000d2b4 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
    d2b4:	b538      	push	{r3, r4, r5, lr}
    d2b6:	4605      	mov	r5, r0
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
    d2b8:	4c0d      	ldr	r4, [pc, #52]	; (d2f0 <metal_init+0x3c>)
    d2ba:	2220      	movs	r2, #32
    d2bc:	4620      	mov	r0, r4
    d2be:	2100      	movs	r1, #0
    d2c0:	f004 ff78 	bl	121b4 <memset>

	_metal.common.log_handler   = params->log_handler;
    d2c4:	682b      	ldr	r3, [r5, #0]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
    d2c6:	4628      	mov	r0, r5
	_metal.common.log_handler   = params->log_handler;
    d2c8:	6063      	str	r3, [r4, #4]
	_metal.common.log_level     = params->log_level;
    d2ca:	4623      	mov	r3, r4
    d2cc:	792a      	ldrb	r2, [r5, #4]
    d2ce:	f803 2b08 	strb.w	r2, [r3], #8
	list->next = list;
    d2d2:	e9c4 3302 	strd	r3, r3, [r4, #8]
	list->prev = list;
    d2d6:	f104 0310 	add.w	r3, r4, #16
	list->next = list;
    d2da:	e9c4 3304 	strd	r3, r3, [r4, #16]
	list->prev = list;
    d2de:	f104 0318 	add.w	r3, r4, #24
	list->next = list;
    d2e2:	e9c4 3306 	strd	r3, r3, [r4, #24]
	if (error)
		return error;

	return error;
}
    d2e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	error = metal_sys_init(params);
    d2ea:	f000 b803 	b.w	d2f4 <metal_sys_init>
    d2ee:	bf00      	nop
    d2f0:	200013a0 	.word	0x200013a0

0000d2f4 <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
    d2f4:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
    d2f6:	4802      	ldr	r0, [pc, #8]	; (d300 <metal_sys_init+0xc>)
    d2f8:	f7ff ff88 	bl	d20c <metal_bus_register>
	return 0;
}
    d2fc:	2000      	movs	r0, #0
    d2fe:	bd08      	pop	{r3, pc}
    d300:	200002c0 	.word	0x200002c0

0000d304 <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
    d304:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
    d306:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
    d308:	2b06      	cmp	r3, #6
{
    d30a:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
    d30c:	bf88      	it	hi
    d30e:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
    d310:	4b09      	ldr	r3, [pc, #36]	; (d338 <metal_zephyr_log_handler+0x34>)
{
    d312:	ac05      	add	r4, sp, #20
    d314:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
    d318:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
    d31c:	4807      	ldr	r0, [pc, #28]	; (d33c <metal_zephyr_log_handler+0x38>)
    d31e:	f003 fd5d 	bl	10ddc <printk>

	va_start(args, format);
	vprintk(format, args);
    d322:	4621      	mov	r1, r4
    d324:	4628      	mov	r0, r5
	va_start(args, format);
    d326:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
    d328:	f7f3 ffdc 	bl	12e4 <vprintk>
	va_end(args);
}
    d32c:	b002      	add	sp, #8
    d32e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    d332:	b003      	add	sp, #12
    d334:	4770      	bx	lr
    d336:	bf00      	nop
    d338:	00015f48 	.word	0x00015f48
    d33c:	000173d4 	.word	0x000173d4

0000d340 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
    d340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d344:	b087      	sub	sp, #28
    d346:	9305      	str	r3, [sp, #20]
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
    d348:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
    d34a:	4606      	mov	r6, r0
	if (nvqs > num_vrings)
    d34c:	4293      	cmp	r3, r2
{
    d34e:	4617      	mov	r7, r2
	if (nvqs > num_vrings)
    d350:	d342      	bcc.n	d3d8 <virtio_create_virtqueues+0x98>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
    d352:	2500      	movs	r5, #0
		vring_info = &vdev->vrings_info[i];
    d354:	f04f 0b18 	mov.w	fp, #24
	for (i = 0; i < nvqs; i++) {
    d358:	42bd      	cmp	r5, r7
    d35a:	d103      	bne.n	d364 <virtio_create_virtqueues+0x24>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
    d35c:	2000      	movs	r0, #0
}
    d35e:	b007      	add	sp, #28
    d360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
    d364:	fb0b f805 	mul.w	r8, fp, r5
    d368:	f8d6 902c 	ldr.w	r9, [r6, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_MASTER) {
    d36c:	69b2      	ldr	r2, [r6, #24]
		vring_info = &vdev->vrings_info[i];
    d36e:	eb09 0408 	add.w	r4, r9, r8
		vring_alloc = &vring_info->info;
    d372:	f104 0a04 	add.w	sl, r4, #4
		if (vdev->role == VIRTIO_DEV_MASTER) {
    d376:	b9ca      	cbnz	r2, d3ac <virtio_create_virtqueues+0x6c>
			struct metal_io_region *io = vring_info->io;
    d378:	6960      	ldr	r0, [r4, #20]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
    d37a:	6863      	ldr	r3, [r4, #4]
    d37c:	6801      	ldr	r1, [r0, #0]
			metal_io_block_set(io, offset, 0,
    d37e:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
    d382:	1a59      	subs	r1, r3, r1
						      vring_alloc->align));
    d384:	68a3      	ldr	r3, [r4, #8]
static inline int vring_size(unsigned int num, unsigned long align)
{
	int size;

	size = num * sizeof(struct vring_desc);
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
    d386:	f10c 0e03 	add.w	lr, ip, #3
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
    d38a:	1e5c      	subs	r4, r3, #1
    d38c:	eb04 140c 	add.w	r4, r4, ip, lsl #4
    d390:	eb04 044e 	add.w	r4, r4, lr, lsl #1
    d394:	425b      	negs	r3, r3
    d396:	4023      	ands	r3, r4
			metal_io_block_set(io, offset, 0,
    d398:	6884      	ldr	r4, [r0, #8]
	size += sizeof(struct vring_used) +
    d39a:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
    d39e:	42a1      	cmp	r1, r4
    d3a0:	bf28      	it	cs
    d3a2:	f04f 31ff 	movcs.w	r1, #4294967295
    d3a6:	3306      	adds	r3, #6
    d3a8:	f007 fa5a 	bl	14860 <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
    d3ac:	f859 3008 	ldr.w	r3, [r9, r8]
    d3b0:	9a05      	ldr	r2, [sp, #20]
    d3b2:	9302      	str	r3, [sp, #8]
    d3b4:	6a33      	ldr	r3, [r6, #32]
    d3b6:	4630      	mov	r0, r6
    d3b8:	6a1b      	ldr	r3, [r3, #32]
    d3ba:	b2a9      	uxth	r1, r5
    d3bc:	9301      	str	r3, [sp, #4]
    d3be:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d3c0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    d3c4:	9300      	str	r3, [sp, #0]
    d3c6:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
    d3ca:	4653      	mov	r3, sl
    d3cc:	f007 fa9e 	bl	1490c <virtqueue_create>
		if (ret)
    d3d0:	2800      	cmp	r0, #0
    d3d2:	d1c4      	bne.n	d35e <virtio_create_virtqueues+0x1e>
	for (i = 0; i < nvqs; i++) {
    d3d4:	3501      	adds	r5, #1
    d3d6:	e7bf      	b.n	d358 <virtio_create_virtqueues+0x18>
		return ERROR_VQUEUE_INVLD_PARAM;
    d3d8:	4800      	ldr	r0, [pc, #0]	; (d3dc <virtio_create_virtqueues+0x9c>)
    d3da:	e7c0      	b.n	d35e <virtio_create_virtqueues+0x1e>
    d3dc:	fffff440 	.word	0xfffff440

0000d3e0 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
    d3e0:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
    d3e2:	8944      	ldrh	r4, [r0, #10]
    d3e4:	428c      	cmp	r4, r1
    d3e6:	d312      	bcc.n	d40e <virtqueue_add_consumed_buffer+0x2e>
		return ERROR_VRING_NO_BUFF;
	}

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
    d3e8:	6a03      	ldr	r3, [r0, #32]
    d3ea:	3c01      	subs	r4, #1
    d3ec:	885d      	ldrh	r5, [r3, #2]
    d3ee:	402c      	ands	r4, r5
    d3f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
	used_desc->len = len;
    d3f4:	609a      	str	r2, [r3, #8]
	used_desc->id = head_idx;
    d3f6:	6059      	str	r1, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
    d3f8:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
    d3fc:	6a02      	ldr	r2, [r0, #32]
    d3fe:	8853      	ldrh	r3, [r2, #2]
    d400:	3301      	adds	r3, #1
    d402:	8053      	strh	r3, [r2, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
    d404:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
    d406:	3301      	adds	r3, #1
    d408:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
    d40a:	2000      	movs	r0, #0
}
    d40c:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
    d40e:	4801      	ldr	r0, [pc, #4]	; (d414 <virtqueue_add_consumed_buffer+0x34>)
    d410:	e7fc      	b.n	d40c <virtqueue_add_consumed_buffer+0x2c>
    d412:	bf00      	nop
    d414:	fffff441 	.word	0xfffff441

0000d418 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
    d418:	b430      	push	{r4, r5}
    d41a:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
    d41c:	b148      	cbz	r0, d432 <rpmsg_send_offchannel_raw+0x1a>
    d41e:	6a00      	ldr	r0, [r0, #32]
    d420:	b138      	cbz	r0, d432 <rpmsg_send_offchannel_raw+0x1a>
    d422:	b133      	cbz	r3, d432 <rpmsg_send_offchannel_raw+0x1a>
    d424:	3401      	adds	r4, #1
    d426:	d004      	beq.n	d432 <rpmsg_send_offchannel_raw+0x1a>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
    d428:	6f44      	ldr	r4, [r0, #116]	; 0x74
    d42a:	b114      	cbz	r4, d432 <rpmsg_send_offchannel_raw+0x1a>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
    d42c:	46a4      	mov	ip, r4
						      size, wait);

	return RPMSG_ERR_PARAM;
}
    d42e:	bc30      	pop	{r4, r5}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
    d430:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
    d432:	4801      	ldr	r0, [pc, #4]	; (d438 <rpmsg_send_offchannel_raw+0x20>)
}
    d434:	bc30      	pop	{r4, r5}
    d436:	4770      	bx	lr
    d438:	fffff82d 	.word	0xfffff82d

0000d43c <rpmsg_create_ept>:
}

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
    d43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d440:	460e      	mov	r6, r1
    d442:	4690      	mov	r8, r2
    d444:	461d      	mov	r5, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept)
    d446:	4604      	mov	r4, r0
    d448:	2800      	cmp	r0, #0
    d44a:	d066      	beq.n	d51a <rpmsg_create_ept+0xde>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
    d44c:	f101 0758 	add.w	r7, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
    d450:	4638      	mov	r0, r7
    d452:	f007 fc12 	bl	14c7a <__metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
    d456:	1c69      	adds	r1, r5, #1
    d458:	f106 0248 	add.w	r2, r6, #72	; 0x48
    d45c:	d059      	beq.n	d512 <rpmsg_create_ept+0xd6>
	if (addr < size)
    d45e:	2d7f      	cmp	r5, #127	; 0x7f
    d460:	dc59      	bgt.n	d516 <rpmsg_create_ept+0xda>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
}

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
    d462:	0969      	lsrs	r1, r5, #5
    d464:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
    d468:	f005 0c1f 	and.w	ip, r5, #31
    d46c:	fa20 f30c 	lsr.w	r3, r0, ip
		status = rpmsg_is_address_set(rdev->bitmap,
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
    d470:	07db      	lsls	r3, r3, #31
    d472:	d506      	bpl.n	d482 <rpmsg_create_ept+0x46>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
					  src);
		} else if (status > 0) {
			status = RPMSG_SUCCESS;
    d474:	2500      	movs	r5, #0
	z_impl_k_sem_give(sem);
    d476:	4638      	mov	r0, r7
    d478:	f002 fa26 	bl	f8c8 <z_impl_k_sem_give>
	}

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
    d47c:	4628      	mov	r0, r5
    d47e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
    d482:	2301      	movs	r3, #1
    d484:	fa03 f30c 	lsl.w	r3, r3, ip
	bitmap[bit / METAL_BITS_PER_ULONG] |=
    d488:	4303      	orrs	r3, r0
    d48a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
    d48e:	4924      	ldr	r1, [pc, #144]	; (d520 <rpmsg_create_ept+0xe4>)
    d490:	2220      	movs	r2, #32
    d492:	f1b8 0f00 	cmp.w	r8, #0
    d496:	bf18      	it	ne
    d498:	4641      	movne	r1, r8
    d49a:	4620      	mov	r0, r4
    d49c:	f004 fe1a 	bl	120d4 <strncpy>
	ept->addr = src;
	ept->dest_addr = dest;
    d4a0:	9b06      	ldr	r3, [sp, #24]
	rpmsg_register_endpoint(rdev, ept);
    d4a2:	4621      	mov	r1, r4
    d4a4:	62a3      	str	r3, [r4, #40]	; 0x28
	ept->cb = cb;
    d4a6:	9b07      	ldr	r3, [sp, #28]
    d4a8:	4630      	mov	r0, r6
    d4aa:	62e3      	str	r3, [r4, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
    d4ac:	9b08      	ldr	r3, [sp, #32]
	ept->addr = src;
    d4ae:	6265      	str	r5, [r4, #36]	; 0x24
	ept->ns_unbind_cb = ns_unbind_cb;
    d4b0:	6323      	str	r3, [r4, #48]	; 0x30
    d4b2:	f007 fc31 	bl	14d18 <rpmsg_register_endpoint>
	if (rdev->support_ns && ept->dest_addr == RPMSG_ADDR_ANY) {
    d4b6:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
    d4ba:	2b00      	cmp	r3, #0
    d4bc:	d0da      	beq.n	d474 <rpmsg_create_ept+0x38>
    d4be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d4c0:	3301      	adds	r3, #1
    d4c2:	d1d7      	bne.n	d474 <rpmsg_create_ept+0x38>
    d4c4:	4638      	mov	r0, r7
    d4c6:	f002 f9ff 	bl	f8c8 <z_impl_k_sem_give>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
    d4ca:	2100      	movs	r1, #0
    d4cc:	4620      	mov	r0, r4
    d4ce:	f007 fbda 	bl	14c86 <rpmsg_send_ns_message>
    d4d2:	4605      	mov	r5, r0
    d4d4:	4638      	mov	r0, r7
    d4d6:	f007 fbd0 	bl	14c7a <__metal_mutex_acquire>
		if (status)
    d4da:	2d00      	cmp	r5, #0
    d4dc:	d0cb      	beq.n	d476 <rpmsg_create_ept+0x3a>
			rpmsg_unregister_endpoint(ept);
    d4de:	4620      	mov	r0, r4
    d4e0:	f007 fbad 	bl	14c3e <rpmsg_unregister_endpoint>
    d4e4:	e7c7      	b.n	d476 <rpmsg_create_ept+0x3a>
{
	unsigned int bit;

	for (bit = start;
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit++)
    d4e6:	3301      	adds	r3, #1
	for (bit = start;
    d4e8:	2b80      	cmp	r3, #128	; 0x80
    d4ea:	d0d0      	beq.n	d48e <rpmsg_create_ept+0x52>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
    d4ec:	0959      	lsrs	r1, r3, #5
    d4ee:	eb02 0e81 	add.w	lr, r2, r1, lsl #2
    d4f2:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
    d4f6:	f003 0c1f 	and.w	ip, r3, #31
    d4fa:	fa21 f00c 	lsr.w	r0, r1, ip
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
    d4fe:	07c0      	lsls	r0, r0, #31
    d500:	d4f1      	bmi.n	d4e6 <rpmsg_create_ept+0xaa>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
    d502:	2001      	movs	r0, #1
    d504:	fa00 f00c 	lsl.w	r0, r0, ip
	bitmap[bit / METAL_BITS_PER_ULONG] |=
    d508:	4308      	orrs	r0, r1
}
    d50a:	461d      	mov	r5, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
    d50c:	f8ce 0000 	str.w	r0, [lr]
}
    d510:	e7bd      	b.n	d48e <rpmsg_create_ept+0x52>
	for (bit = start;
    d512:	2300      	movs	r3, #0
    d514:	e7ea      	b.n	d4ec <rpmsg_create_ept+0xb0>
		return RPMSG_ERR_PARAM;
    d516:	4d03      	ldr	r5, [pc, #12]	; (d524 <rpmsg_create_ept+0xe8>)
    d518:	e7ad      	b.n	d476 <rpmsg_create_ept+0x3a>
		return RPMSG_ERR_PARAM;
    d51a:	4d02      	ldr	r5, [pc, #8]	; (d524 <rpmsg_create_ept+0xe8>)
    d51c:	e7ae      	b.n	d47c <rpmsg_create_ept+0x40>
    d51e:	bf00      	nop
    d520:	0001919e 	.word	0x0001919e
    d524:	fffff82d 	.word	0xfffff82d

0000d528 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
    d528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d52c:	4604      	mov	r4, r0
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	status = rpmsg_virtio_get_status(rvdev);
    d52e:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
{
    d530:	469b      	mov	fp, r3
	rvdev->vdev->func->set_status(rvdev->vdev, status);
}

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_status(rvdev->vdev);
    d532:	6a03      	ldr	r3, [r0, #32]
    d534:	b08d      	sub	sp, #52	; 0x34
    d536:	681b      	ldr	r3, [r3, #0]
    d538:	4692      	mov	sl, r2
    d53a:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
    d53e:	9103      	str	r1, [sp, #12]
    d540:	4798      	blx	r3
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
    d542:	0743      	lsls	r3, r0, #29
    d544:	f140 8089 	bpl.w	d65a <rpmsg_virtio_send_offchannel_raw+0x132>
		return RPMSG_ERR_DEV_STATE;
	}

	if (wait)
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
    d548:	f643 2398 	movw	r3, #15000	; 0x3a98
    d54c:	2f00      	cmp	r7, #0
    d54e:	bf18      	it	ne
    d550:	461f      	movne	r7, r3

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
    d552:	f104 0858 	add.w	r8, r4, #88	; 0x58
    d556:	4640      	mov	r0, r8
    d558:	f007 fc1d 	bl	14d96 <__metal_mutex_acquire>
	return rvdev->vdev->role;
    d55c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    d55e:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
    d560:	b373      	cbz	r3, d5c0 <rpmsg_virtio_send_offchannel_raw+0x98>
	if (role == RPMSG_REMOTE) {
    d562:	2b01      	cmp	r3, #1
    d564:	d108      	bne.n	d578 <rpmsg_virtio_send_offchannel_raw+0x50>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
    d566:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d56a:	f007 fb50 	bl	14c0e <virtqueue_get_desc_size>
    d56e:	3810      	subs	r0, #16
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
		if (avail_size && size > avail_size) {
    d570:	2800      	cmp	r0, #0
    d572:	ea20 79e0 	bic.w	r9, r0, r0, asr #31
    d576:	dc25      	bgt.n	d5c4 <rpmsg_virtio_send_offchannel_raw+0x9c>
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
    d578:	f04f 0900 	mov.w	r9, #0
    d57c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    d57e:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
    d580:	bb3b      	cbnz	r3, d5d2 <rpmsg_virtio_send_offchannel_raw+0xaa>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
    d582:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d586:	f10d 0212 	add.w	r2, sp, #18
    d58a:	a905      	add	r1, sp, #20
    d58c:	f007 fa4e 	bl	14a2c <virtqueue_get_buffer>
		if (!data) {
    d590:	4605      	mov	r5, r0
    d592:	b948      	cbnz	r0, d5a8 <rpmsg_virtio_send_offchannel_raw+0x80>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
    d594:	f44f 7100 	mov.w	r1, #512	; 0x200
    d598:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    d59c:	f007 fcaa 	bl	14ef4 <rpmsg_virtio_shm_pool_get_buffer>
			*len = RPMSG_BUFFER_SIZE;
    d5a0:	f44f 7300 	mov.w	r3, #512	; 0x200
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
    d5a4:	4605      	mov	r5, r0
			*len = RPMSG_BUFFER_SIZE;
    d5a6:	9305      	str	r3, [sp, #20]
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
    d5a8:	4640      	mov	r0, r8
    d5aa:	f007 fbdc 	bl	14d66 <k_sem_give>
			return RPMSG_ERR_BUFF_SIZE;
		}

		buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len, &idx);
		metal_mutex_release(&rdev->lock);
		if (buffer || !tick_count)
    d5ae:	2d00      	cmp	r5, #0
    d5b0:	d157      	bne.n	d662 <rpmsg_virtio_send_offchannel_raw+0x13a>
    d5b2:	2f00      	cmp	r7, #0
    d5b4:	d053      	beq.n	d65e <rpmsg_virtio_send_offchannel_raw+0x136>
			break;
		if (avail_size != 0)
    d5b6:	f1b9 0f00 	cmp.w	r9, #0
    d5ba:	d108      	bne.n	d5ce <rpmsg_virtio_send_offchannel_raw+0xa6>
			return RPMSG_ERR_BUFF_SIZE;
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
		tick_count--;
    d5bc:	3f01      	subs	r7, #1
	while (1) {
    d5be:	e7ca      	b.n	d556 <rpmsg_virtio_send_offchannel_raw+0x2e>
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
    d5c0:	f44f 79f8 	mov.w	r9, #496	; 0x1f0
		if (avail_size && size > avail_size) {
    d5c4:	454e      	cmp	r6, r9
    d5c6:	ddd9      	ble.n	d57c <rpmsg_virtio_send_offchannel_raw+0x54>
    d5c8:	4640      	mov	r0, r8
    d5ca:	f007 fbcc 	bl	14d66 <k_sem_give>
			return RPMSG_ERR_BUFF_SIZE;
    d5ce:	4e31      	ldr	r6, [pc, #196]	; (d694 <rpmsg_virtio_send_offchannel_raw+0x16c>)
    d5d0:	e03f      	b.n	d652 <rpmsg_virtio_send_offchannel_raw+0x12a>
	if (role == RPMSG_REMOTE) {
    d5d2:	2b01      	cmp	r3, #1
    d5d4:	d108      	bne.n	d5e8 <rpmsg_virtio_send_offchannel_raw+0xc0>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
    d5d6:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d5da:	aa05      	add	r2, sp, #20
    d5dc:	f10d 0112 	add.w	r1, sp, #18
    d5e0:	f007 fa5e 	bl	14aa0 <virtqueue_get_available_buffer>
    d5e4:	4605      	mov	r5, r0
    d5e6:	e7df      	b.n	d5a8 <rpmsg_virtio_send_offchannel_raw+0x80>
	void *data = NULL;
    d5e8:	2500      	movs	r5, #0
    d5ea:	e7dd      	b.n	d5a8 <rpmsg_virtio_send_offchannel_raw+0x80>
    d5ec:	683b      	ldr	r3, [r7, #0]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
    d5ee:	68b8      	ldr	r0, [r7, #8]
	io = rvdev->shbuf_io;
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");

	status = metal_io_block_write(io,
    d5f0:	f105 0110 	add.w	r1, r5, #16
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
    d5f4:	1ac9      	subs	r1, r1, r3
    d5f6:	4281      	cmp	r1, r0
    d5f8:	bf28      	it	cs
    d5fa:	f04f 31ff 	movcs.w	r1, #4294967295
    d5fe:	4633      	mov	r3, r6
    d600:	465a      	mov	r2, fp
    d602:	4638      	mov	r0, r7
    d604:	f007 f8f1 	bl	147ea <metal_io_block_write>
				      metal_io_virt_to_offset(io,
						RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\r\n");
    d608:	4286      	cmp	r6, r0
    d60a:	d000      	beq.n	d60e <rpmsg_virtio_send_offchannel_raw+0xe6>
    d60c:	e7fe      	b.n	d60c <rpmsg_virtio_send_offchannel_raw+0xe4>
    d60e:	4640      	mov	r0, r8
    d610:	f007 fbc1 	bl	14d96 <__metal_mutex_acquire>
    d614:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
	metal_mutex_acquire(&rdev->lock);

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
    d616:	9a05      	ldr	r2, [sp, #20]
    d618:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
    d61a:	b953      	cbnz	r3, d632 <rpmsg_virtio_send_offchannel_raw+0x10a>
		vqbuf.len = len;
    d61c:	e9cd 5206 	strd	r5, r2, [sp, #24]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
    d620:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d624:	2201      	movs	r2, #1
    d626:	9500      	str	r5, [sp, #0]
    d628:	a906      	add	r1, sp, #24
    d62a:	f007 f99f 	bl	1496c <virtqueue_add_buffer>
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
    d62e:	b148      	cbz	r0, d644 <rpmsg_virtio_send_offchannel_raw+0x11c>
    d630:	e7fe      	b.n	d630 <rpmsg_virtio_send_offchannel_raw+0x108>
	if (role == RPMSG_REMOTE) {
    d632:	2b01      	cmp	r3, #1
    d634:	d106      	bne.n	d644 <rpmsg_virtio_send_offchannel_raw+0x11c>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
    d636:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    d63a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d63e:	f7ff fecf 	bl	d3e0 <virtqueue_add_consumed_buffer>
    d642:	e7f4      	b.n	d62e <rpmsg_virtio_send_offchannel_raw+0x106>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
    d644:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d648:	f007 faa9 	bl	14b9e <virtqueue_kick>
    d64c:	4640      	mov	r0, r8
    d64e:	f007 fb8a 	bl	14d66 <k_sem_give>

	metal_mutex_release(&rdev->lock);

	return size;
}
    d652:	4630      	mov	r0, r6
    d654:	b00d      	add	sp, #52	; 0x34
    d656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return RPMSG_ERR_DEV_STATE;
    d65a:	4e0f      	ldr	r6, [pc, #60]	; (d698 <rpmsg_virtio_send_offchannel_raw+0x170>)
    d65c:	e7f9      	b.n	d652 <rpmsg_virtio_send_offchannel_raw+0x12a>
		return RPMSG_ERR_NO_BUFF;
    d65e:	4e0f      	ldr	r6, [pc, #60]	; (d69c <rpmsg_virtio_send_offchannel_raw+0x174>)
    d660:	e7f7      	b.n	d652 <rpmsg_virtio_send_offchannel_raw+0x12a>
	rp_hdr.src = src;
    d662:	9b03      	ldr	r3, [sp, #12]
	io = rvdev->shbuf_io;
    d664:	f8d4 7088 	ldr.w	r7, [r4, #136]	; 0x88
	rp_hdr.src = src;
    d668:	9308      	str	r3, [sp, #32]
	rp_hdr.reserved = 0;
    d66a:	2300      	movs	r3, #0
    d66c:	6839      	ldr	r1, [r7, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
    d66e:	68b8      	ldr	r0, [r7, #8]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
    d670:	1a69      	subs	r1, r5, r1
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
    d672:	4281      	cmp	r1, r0
    d674:	bf28      	it	cs
    d676:	f04f 31ff 	movcs.w	r1, #4294967295
	rp_hdr.reserved = 0;
    d67a:	930a      	str	r3, [sp, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
    d67c:	4638      	mov	r0, r7
    d67e:	2310      	movs	r3, #16
    d680:	aa08      	add	r2, sp, #32
	rp_hdr.dst = dst;
    d682:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
	rp_hdr.len = size;
    d686:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
    d68a:	f007 f8ae 	bl	147ea <metal_io_block_write>
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
    d68e:	2810      	cmp	r0, #16
    d690:	d0ac      	beq.n	d5ec <rpmsg_virtio_send_offchannel_raw+0xc4>
    d692:	e7fe      	b.n	d692 <rpmsg_virtio_send_offchannel_raw+0x16a>
    d694:	fffff82b 	.word	0xfffff82b
    d698:	fffff82c 	.word	0xfffff82c
    d69c:	fffff82e 	.word	0xfffff82e

0000d6a0 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
    d6a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d6a4:	460d      	mov	r5, r1
    d6a6:	b088      	sub	sp, #32
    d6a8:	4617      	mov	r7, r2
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
	memset(rdev, 0, sizeof(*rdev));
    d6aa:	2100      	movs	r1, #0
    d6ac:	227c      	movs	r2, #124	; 0x7c
{
    d6ae:	4604      	mov	r4, r0
    d6b0:	461e      	mov	r6, r3
    d6b2:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
	memset(rdev, 0, sizeof(*rdev));
    d6b6:	f004 fd7d 	bl	121b4 <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
    d6ba:	2201      	movs	r2, #1
    d6bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
    d6c0:	4611      	mov	r1, r2
    d6c2:	f007 fccf 	bl	15064 <z_impl_k_sem_init>
	metal_mutex_init(&rdev->lock);
	rvdev->vdev = vdev;
	rdev->ns_bind_cb = ns_bind_cb;
	vdev->priv = rvdev;
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
    d6c6:	4b5e      	ldr	r3, [pc, #376]	; (d840 <rpmsg_init_vdev+0x1a0>)
	rvdev->vdev = vdev;
    d6c8:	67e5      	str	r5, [r4, #124]	; 0x7c
	rdev->ns_bind_cb = ns_bind_cb;
    d6ca:	6727      	str	r7, [r4, #112]	; 0x70
	vdev->priv = rvdev;
    d6cc:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
    d6ce:	6763      	str	r3, [r4, #116]	; 0x74
    d6d0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    d6d2:	f8d3 8018 	ldr.w	r8, [r3, #24]
	role = rpmsg_virtio_get_role(rvdev);

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
    d6d6:	f1b8 0f01 	cmp.w	r8, #1
    d6da:	d020      	beq.n	d71e <rpmsg_init_vdev+0x7e>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
    d6dc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
    d6de:	6a03      	ldr	r3, [r0, #32]
    d6e0:	689b      	ldr	r3, [r3, #8]
    d6e2:	4798      	blx	r3
    d6e4:	2300      	movs	r3, #0
    d6e6:	6128      	str	r0, [r5, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
    d6e8:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
    d6ec:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
    d6ee:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
    d6f2:	f1b8 0f00 	cmp.w	r8, #0
    d6f6:	d01e      	beq.n	d736 <rpmsg_init_vdev+0x96>
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
    d6f8:	f1b8 0f01 	cmp.w	r8, #1
    d6fc:	d133      	bne.n	d766 <rpmsg_init_vdev+0xc6>
		vq_names[0] = "tx_vq";
    d6fe:	4b51      	ldr	r3, [pc, #324]	; (d844 <rpmsg_init_vdev+0x1a4>)
    d700:	9302      	str	r3, [sp, #8]
		vq_names[1] = "rx_vq";
    d702:	4b51      	ldr	r3, [pc, #324]	; (d848 <rpmsg_init_vdev+0x1a8>)
    d704:	9303      	str	r3, [sp, #12]
		callback[0] = rpmsg_virtio_tx_callback;
    d706:	4b51      	ldr	r3, [pc, #324]	; (d84c <rpmsg_init_vdev+0x1ac>)
    d708:	9304      	str	r3, [sp, #16]
		callback[1] = rpmsg_virtio_rx_callback;
    d70a:	4b51      	ldr	r3, [pc, #324]	; (d850 <rpmsg_init_vdev+0x1b0>)
    d70c:	9305      	str	r3, [sp, #20]
		rvdev->rvq  = vdev->vrings_info[1].vq;
    d70e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    d710:	699a      	ldr	r2, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
    d712:	681b      	ldr	r3, [r3, #0]
		rvdev->rvq  = vdev->vrings_info[1].vq;
    d714:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		rvdev->svq  = vdev->vrings_info[0].vq;
    d718:	e023      	b.n	d762 <rpmsg_init_vdev+0xc2>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
    d71a:	0743      	lsls	r3, r0, #29
    d71c:	d4de      	bmi.n	d6dc <rpmsg_init_vdev+0x3c>
		status = rpmsg_virtio_get_status(rvdev);
    d71e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	return rvdev->vdev->func->get_status(rvdev->vdev);
    d720:	6a03      	ldr	r3, [r0, #32]
    d722:	681b      	ldr	r3, [r3, #0]
    d724:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
    d726:	0642      	lsls	r2, r0, #25
    d728:	d5f7      	bpl.n	d71a <rpmsg_init_vdev+0x7a>
			rpmsg_virtio_set_status(rvdev, 0);
    d72a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	rvdev->vdev->func->set_status(rvdev->vdev, status);
    d72c:	2100      	movs	r1, #0
    d72e:	6a03      	ldr	r3, [r0, #32]
    d730:	685b      	ldr	r3, [r3, #4]
    d732:	4798      	blx	r3
}
    d734:	e7f3      	b.n	d71e <rpmsg_init_vdev+0x7e>
		if (!shpool)
    d736:	f1b9 0f00 	cmp.w	r9, #0
    d73a:	d07d      	beq.n	d838 <rpmsg_init_vdev+0x198>
		if (!shpool->size)
    d73c:	f8d9 3008 	ldr.w	r3, [r9, #8]
    d740:	2b00      	cmp	r3, #0
    d742:	d07b      	beq.n	d83c <rpmsg_init_vdev+0x19c>
		vq_names[0] = "rx_vq";
    d744:	4b40      	ldr	r3, [pc, #256]	; (d848 <rpmsg_init_vdev+0x1a8>)
		rvdev->shpool = shpool;
    d746:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
		vq_names[0] = "rx_vq";
    d74a:	9302      	str	r3, [sp, #8]
		vq_names[1] = "tx_vq";
    d74c:	4b3d      	ldr	r3, [pc, #244]	; (d844 <rpmsg_init_vdev+0x1a4>)
    d74e:	9303      	str	r3, [sp, #12]
		callback[0] = rpmsg_virtio_rx_callback;
    d750:	4b3f      	ldr	r3, [pc, #252]	; (d850 <rpmsg_init_vdev+0x1b0>)
    d752:	9304      	str	r3, [sp, #16]
		callback[1] = rpmsg_virtio_tx_callback;
    d754:	4b3d      	ldr	r3, [pc, #244]	; (d84c <rpmsg_init_vdev+0x1ac>)
    d756:	9305      	str	r3, [sp, #20]
		rvdev->rvq  = vdev->vrings_info[0].vq;
    d758:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    d75a:	681a      	ldr	r2, [r3, #0]
		rvdev->svq  = vdev->vrings_info[1].vq;
    d75c:	699b      	ldr	r3, [r3, #24]
		rvdev->rvq  = vdev->vrings_info[0].vq;
    d75e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		rvdev->svq  = vdev->vrings_info[0].vq;
    d762:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
    d766:	ab04      	add	r3, sp, #16
    d768:	9300      	str	r3, [sp, #0]
    d76a:	2202      	movs	r2, #2
    d76c:	2100      	movs	r1, #0
    d76e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
    d770:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    d774:	ab02      	add	r3, sp, #8
    d776:	f7ff fde3 	bl	d340 <virtio_create_virtqueues>

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
    d77a:	4607      	mov	r7, r0
    d77c:	2800      	cmp	r0, #0
    d77e:	d157      	bne.n	d830 <rpmsg_init_vdev+0x190>

	/*
	 * Suppress "tx-complete" interrupts
	 * since send method use busy loop when buffer pool exhaust
	 */
	virtqueue_disable_cb(rvdev->svq);
    d780:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d784:	f007 f9e1 	bl	14b4a <virtqueue_disable_cb>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
    d788:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		vq->shm_io = shm_io;
    d78a:	681a      	ldr	r2, [r3, #0]
    d78c:	699b      	ldr	r3, [r3, #24]
    d78e:	6296      	str	r6, [r2, #40]	; 0x28
    d790:	629e      	str	r6, [r3, #40]	; 0x28
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
    d792:	f1b8 0f00 	cmp.w	r8, #0
    d796:	d108      	bne.n	d7aa <rpmsg_init_vdev+0x10a>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
    d798:	f44f 7300 	mov.w	r3, #512	; 0x200
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
    d79c:	46c2      	mov	sl, r8
		vqbuf.len = RPMSG_BUFFER_SIZE;
    d79e:	9307      	str	r3, [sp, #28]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
    d7a0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    d7a4:	895b      	ldrh	r3, [r3, #10]
    d7a6:	4553      	cmp	r3, sl
    d7a8:	d81f      	bhi.n	d7ea <rpmsg_init_vdev+0x14a>

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if (rdev->support_ns) {
    d7aa:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    d7ae:	e9c4 4400 	strd	r4, r4, [r4]
    d7b2:	b18b      	cbz	r3, d7d8 <rpmsg_init_vdev+0x138>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
    d7b4:	f104 0508 	add.w	r5, r4, #8
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
    d7b8:	4926      	ldr	r1, [pc, #152]	; (d854 <rpmsg_init_vdev+0x1b4>)
    d7ba:	2220      	movs	r2, #32
    d7bc:	4628      	mov	r0, r5
    d7be:	f004 fc89 	bl	120d4 <strncpy>
	ept->addr = src;
    d7c2:	2335      	movs	r3, #53	; 0x35
	ept->dest_addr = dest;
    d7c4:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
	ept->cb = cb;
    d7c8:	4b23      	ldr	r3, [pc, #140]	; (d858 <rpmsg_init_vdev+0x1b8>)
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		rpmsg_register_endpoint(rdev, &rdev->ns_ept);
    d7ca:	4629      	mov	r1, r5
    d7cc:	6363      	str	r3, [r4, #52]	; 0x34
	ept->ns_unbind_cb = ns_unbind_cb;
    d7ce:	2300      	movs	r3, #0
    d7d0:	4620      	mov	r0, r4
    d7d2:	63a3      	str	r3, [r4, #56]	; 0x38
    d7d4:	f007 faa0 	bl	14d18 <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
    d7d8:	f1b8 0f00 	cmp.w	r8, #0
    d7dc:	d128      	bne.n	d830 <rpmsg_init_vdev+0x190>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
    d7de:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	rvdev->vdev->func->set_status(rvdev->vdev, status);
    d7e0:	2104      	movs	r1, #4
    d7e2:	6a03      	ldr	r3, [r0, #32]
    d7e4:	685b      	ldr	r3, [r3, #4]
    d7e6:	4798      	blx	r3
}
    d7e8:	e022      	b.n	d830 <rpmsg_init_vdev+0x190>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
    d7ea:	f44f 7100 	mov.w	r1, #512	; 0x200
    d7ee:	4648      	mov	r0, r9
    d7f0:	f007 fb80 	bl	14ef4 <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
    d7f4:	4605      	mov	r5, r0
    d7f6:	b1c8      	cbz	r0, d82c <rpmsg_init_vdev+0x18c>
    d7f8:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
    d7fa:	9006      	str	r0, [sp, #24]
    d7fc:	1a41      	subs	r1, r0, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
    d7fe:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
    d800:	f44f 7300 	mov.w	r3, #512	; 0x200
    d804:	4281      	cmp	r1, r0
    d806:	bf28      	it	cs
    d808:	f04f 31ff 	movcs.w	r1, #4294967295
    d80c:	2200      	movs	r2, #0
    d80e:	4630      	mov	r0, r6
    d810:	f007 f826 	bl	14860 <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
    d814:	2301      	movs	r3, #1
    d816:	2200      	movs	r2, #0
    d818:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    d81c:	9500      	str	r5, [sp, #0]
    d81e:	a906      	add	r1, sp, #24
    d820:	f007 f8a4 	bl	1496c <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
    d824:	b918      	cbnz	r0, d82e <rpmsg_init_vdev+0x18e>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
    d826:	f10a 0a01 	add.w	sl, sl, #1
    d82a:	e7b9      	b.n	d7a0 <rpmsg_init_vdev+0x100>
				return RPMSG_ERR_NO_BUFF;
    d82c:	480b      	ldr	r0, [pc, #44]	; (d85c <rpmsg_init_vdev+0x1bc>)
    d82e:	4607      	mov	r7, r0
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
}
    d830:	4638      	mov	r0, r7
    d832:	b008      	add	sp, #32
    d834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return RPMSG_ERR_PARAM;
    d838:	4f09      	ldr	r7, [pc, #36]	; (d860 <rpmsg_init_vdev+0x1c0>)
    d83a:	e7f9      	b.n	d830 <rpmsg_init_vdev+0x190>
			return RPMSG_ERR_NO_BUFF;
    d83c:	4f07      	ldr	r7, [pc, #28]	; (d85c <rpmsg_init_vdev+0x1bc>)
    d83e:	e7f7      	b.n	d830 <rpmsg_init_vdev+0x190>
    d840:	0000d529 	.word	0x0000d529
    d844:	00019b65 	.word	0x00019b65
    d848:	00019b5f 	.word	0x00019b5f
    d84c:	00014d65 	.word	0x00014d65
    d850:	00014e35 	.word	0x00014e35
    d854:	00019b6b 	.word	0x00019b6b
    d858:	00014da3 	.word	0x00014da3
    d85c:	fffff82e 	.word	0xfffff82e
    d860:	fffff82d 	.word	0xfffff82d

0000d864 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(s32_t level)
{
    d864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			if (dev) {
				/* Initialization failed. Clear the API struct
				 * so that device_get_binding() will not succeed
				 * for it.
				 */
				dev->driver_api = NULL;
    d866:	2700      	movs	r7, #0
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    d868:	4b08      	ldr	r3, [pc, #32]	; (d88c <z_sys_init_run_level+0x28>)
    d86a:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    d86e:	3001      	adds	r0, #1
    d870:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    d874:	42a6      	cmp	r6, r4
    d876:	d800      	bhi.n	d87a <z_sys_init_run_level+0x16>
			}
		}
	}
}
    d878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		retval = entry->init(dev);
    d87a:	e9d4 3500 	ldrd	r3, r5, [r4]
    d87e:	4628      	mov	r0, r5
    d880:	4798      	blx	r3
		if (retval != 0) {
    d882:	b108      	cbz	r0, d888 <z_sys_init_run_level+0x24>
			if (dev) {
    d884:	b105      	cbz	r5, d888 <z_sys_init_run_level+0x24>
				dev->driver_api = NULL;
    d886:	60af      	str	r7, [r5, #8]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    d888:	3408      	adds	r4, #8
    d88a:	e7f3      	b.n	d874 <z_sys_init_run_level+0x10>
    d88c:	00015f68 	.word	0x00015f68

0000d890 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
    d890:	4b0f      	ldr	r3, [pc, #60]	; (d8d0 <z_impl_device_get_binding+0x40>)
{
    d892:	b570      	push	{r4, r5, r6, lr}
    d894:	4605      	mov	r5, r0
    d896:	461e      	mov	r6, r3
	for (dev = __device_start; dev != __device_end; dev++) {
    d898:	4c0e      	ldr	r4, [pc, #56]	; (d8d4 <z_impl_device_get_binding+0x44>)
    d89a:	429c      	cmp	r4, r3
    d89c:	d104      	bne.n	d8a8 <z_impl_device_get_binding+0x18>
		    (dev->name == name)) {
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
    d89e:	4c0d      	ldr	r4, [pc, #52]	; (d8d4 <z_impl_device_get_binding+0x44>)
    d8a0:	42b4      	cmp	r4, r6
    d8a2:	d108      	bne.n	d8b6 <z_impl_device_get_binding+0x26>
		    (strcmp(name, dev->name) == 0)) {
			return dev;
		}
	}

	return NULL;
    d8a4:	2400      	movs	r4, #0
    d8a6:	e010      	b.n	d8ca <z_impl_device_get_binding+0x3a>
		if ((dev->driver_api != NULL) &&
    d8a8:	68a2      	ldr	r2, [r4, #8]
    d8aa:	b112      	cbz	r2, d8b2 <z_impl_device_get_binding+0x22>
    d8ac:	6822      	ldr	r2, [r4, #0]
    d8ae:	42aa      	cmp	r2, r5
    d8b0:	d00b      	beq.n	d8ca <z_impl_device_get_binding+0x3a>
	for (dev = __device_start; dev != __device_end; dev++) {
    d8b2:	3410      	adds	r4, #16
    d8b4:	e7f1      	b.n	d89a <z_impl_device_get_binding+0xa>
		if ((dev->driver_api != NULL) &&
    d8b6:	68a3      	ldr	r3, [r4, #8]
    d8b8:	b90b      	cbnz	r3, d8be <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    d8ba:	3410      	adds	r4, #16
    d8bc:	e7f0      	b.n	d8a0 <z_impl_device_get_binding+0x10>
		    (strcmp(name, dev->name) == 0)) {
    d8be:	4628      	mov	r0, r5
    d8c0:	6821      	ldr	r1, [r4, #0]
    d8c2:	f004 fc21 	bl	12108 <strcmp>
		if ((dev->driver_api != NULL) &&
    d8c6:	2800      	cmp	r0, #0
    d8c8:	d1f7      	bne.n	d8ba <z_impl_device_get_binding+0x2a>
}
    d8ca:	4620      	mov	r0, r4
    d8cc:	bd70      	pop	{r4, r5, r6, pc}
    d8ce:	bf00      	nop
    d8d0:	2000044c 	.word	0x2000044c
    d8d4:	200003cc 	.word	0x200003cc

0000d8d8 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    d8d8:	4b01      	ldr	r3, [pc, #4]	; (d8e0 <z_impl_z_errno+0x8>)
    d8da:	6898      	ldr	r0, [r3, #8]
}
    d8dc:	305c      	adds	r0, #92	; 0x5c
    d8de:	4770      	bx	lr
    d8e0:	20001e10 	.word	0x20001e10

0000d8e4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    d8e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d8e6:	4604      	mov	r4, r0
    d8e8:	460e      	mov	r6, r1
	__asm__ volatile(
    d8ea:	f04f 0320 	mov.w	r3, #32
    d8ee:	f3ef 8711 	mrs	r7, BASEPRI
    d8f2:	f383 8811 	msr	BASEPRI, r3
    d8f6:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    d8fa:	f001 ffdf 	bl	f8bc <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    d8fe:	2200      	movs	r2, #0
    d900:	2c04      	cmp	r4, #4
    d902:	bf98      	it	ls
    d904:	4b21      	ldrls	r3, [pc, #132]	; (d98c <z_fatal_error+0xa8>)
    d906:	4605      	mov	r5, r0
	switch (reason) {
    d908:	bf94      	ite	ls
    d90a:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
    d90e:	4b20      	ldrhi	r3, [pc, #128]	; (d990 <z_fatal_error+0xac>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    d910:	9200      	str	r2, [sp, #0]
    d912:	2145      	movs	r1, #69	; 0x45
    d914:	4622      	mov	r2, r4
    d916:	481f      	ldr	r0, [pc, #124]	; (d994 <z_fatal_error+0xb0>)
    d918:	f003 fa60 	bl	10ddc <printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    d91c:	b13e      	cbz	r6, d92e <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    d91e:	69f3      	ldr	r3, [r6, #28]
    d920:	f3c3 0308 	ubfx	r3, r3, #0, #9
    d924:	b11b      	cbz	r3, d92e <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
    d926:	2145      	movs	r1, #69	; 0x45
    d928:	481b      	ldr	r0, [pc, #108]	; (d998 <z_fatal_error+0xb4>)
    d92a:	f003 fa57 	bl	10ddc <printk>
	const char *thread_name = k_thread_name_get(thread);
    d92e:	4628      	mov	r0, r5
    d930:	f007 fbb3 	bl	1509a <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
    d934:	4603      	mov	r3, r0
    d936:	b330      	cbz	r0, d986 <z_fatal_error+0xa2>
    d938:	7801      	ldrb	r1, [r0, #0]
		thread_name = "unknown";
    d93a:	4a18      	ldr	r2, [pc, #96]	; (d99c <z_fatal_error+0xb8>)
    d93c:	2900      	cmp	r1, #0
    d93e:	bf08      	it	eq
    d940:	4613      	moveq	r3, r2
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    d942:	462a      	mov	r2, r5
    d944:	2145      	movs	r1, #69	; 0x45
    d946:	4816      	ldr	r0, [pc, #88]	; (d9a0 <z_fatal_error+0xbc>)
    d948:	f003 fa48 	bl	10ddc <printk>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
    d94c:	4631      	mov	r1, r6
    d94e:	4620      	mov	r0, r4
    d950:	f7ff fa18 	bl	cd84 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    d954:	2c04      	cmp	r4, #4
    d956:	d10c      	bne.n	d972 <z_fatal_error+0x8e>
    d958:	4912      	ldr	r1, [pc, #72]	; (d9a4 <z_fatal_error+0xc0>)
    d95a:	238b      	movs	r3, #139	; 0x8b
    d95c:	4a12      	ldr	r2, [pc, #72]	; (d9a8 <z_fatal_error+0xc4>)
    d95e:	4813      	ldr	r0, [pc, #76]	; (d9ac <z_fatal_error+0xc8>)
    d960:	f003 fa3c 	bl	10ddc <printk>
    d964:	4812      	ldr	r0, [pc, #72]	; (d9b0 <z_fatal_error+0xcc>)
    d966:	f003 fa39 	bl	10ddc <printk>
    d96a:	218b      	movs	r1, #139	; 0x8b
    d96c:	480e      	ldr	r0, [pc, #56]	; (d9a8 <z_fatal_error+0xc4>)
    d96e:	f003 fccb 	bl	11308 <assert_post_action>
	__asm__ volatile(
    d972:	f387 8811 	msr	BASEPRI, r7
    d976:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    d97a:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    d97c:	b003      	add	sp, #12
    d97e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    d982:	f7f5 bd59 	b.w	3438 <z_impl_k_thread_abort>
		thread_name = "unknown";
    d986:	4b05      	ldr	r3, [pc, #20]	; (d99c <z_fatal_error+0xb8>)
    d988:	e7db      	b.n	d942 <z_fatal_error+0x5e>
    d98a:	bf00      	nop
    d98c:	00015f80 	.word	0x00015f80
    d990:	00019b6e 	.word	0x00019b6e
    d994:	00019b84 	.word	0x00019b84
    d998:	00019bb1 	.word	0x00019bb1
    d99c:	00019b7c 	.word	0x00019b7c
    d9a0:	00019bd7 	.word	0x00019bd7
    d9a4:	00019c16 	.word	0x00019c16
    d9a8:	00019bf4 	.word	0x00019bf4
    d9ac:	00016493 	.word	0x00016493
    d9b0:	00019c33 	.word	0x00019c33

0000d9b4 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    d9b4:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    d9b6:	4d0b      	ldr	r5, [pc, #44]	; (d9e4 <idle+0x30>)
	__asm__ volatile(
    d9b8:	f04f 0220 	mov.w	r2, #32
    d9bc:	f3ef 8311 	mrs	r3, BASEPRI
    d9c0:	f382 8811 	msr	BASEPRI, r2
    d9c4:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
    d9c8:	f002 fc22 	bl	10210 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    d9cc:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
    d9ce:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    d9d0:	2802      	cmp	r0, #2
    d9d2:	bfd8      	it	le
    d9d4:	4608      	movle	r0, r1
    d9d6:	f002 fc63 	bl	102a0 <z_set_timeout_expiry>
	_kernel.idle = ticks;
    d9da:	622c      	str	r4, [r5, #32]
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    d9dc:	f7f5 fa6a 	bl	2eb4 <arch_cpu_idle>
}
    d9e0:	e7ea      	b.n	d9b8 <idle+0x4>
    d9e2:	bf00      	nop
    d9e4:	20001e10 	.word	0x20001e10

0000d9e8 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    d9e8:	4802      	ldr	r0, [pc, #8]	; (d9f4 <z_bss_zero+0xc>)
    d9ea:	4a03      	ldr	r2, [pc, #12]	; (d9f8 <z_bss_zero+0x10>)
    d9ec:	2100      	movs	r1, #0
    d9ee:	1a12      	subs	r2, r2, r0
    d9f0:	f004 bbe0 	b.w	121b4 <memset>
    d9f4:	20000780 	.word	0x20000780
    d9f8:	20002038 	.word	0x20002038

0000d9fc <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    d9fc:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    d9fe:	4806      	ldr	r0, [pc, #24]	; (da18 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    da00:	4a06      	ldr	r2, [pc, #24]	; (da1c <z_data_copy+0x20>)
    da02:	4907      	ldr	r1, [pc, #28]	; (da20 <z_data_copy+0x24>)
    da04:	1a12      	subs	r2, r2, r0
    da06:	f004 fbaa 	bl	1215e <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    da0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    da0e:	4a05      	ldr	r2, [pc, #20]	; (da24 <z_data_copy+0x28>)
    da10:	4905      	ldr	r1, [pc, #20]	; (da28 <z_data_copy+0x2c>)
    da12:	4806      	ldr	r0, [pc, #24]	; (da2c <z_data_copy+0x30>)
    da14:	f004 bba3 	b.w	1215e <memcpy>
    da18:	20000000 	.word	0x20000000
    da1c:	2000077c 	.word	0x2000077c
    da20:	0001a31c 	.word	0x0001a31c
    da24:	00000000 	.word	0x00000000
    da28:	0001a31c 	.word	0x0001a31c
    da2c:	20000000 	.word	0x20000000

0000da30 <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
    da30:	2201      	movs	r2, #1
{
    da32:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    da34:	4b0b      	ldr	r3, [pc, #44]	; (da64 <bg_thread_main+0x34>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    da36:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    da38:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    da3a:	f7ff ff13 	bl	d864 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    da3e:	4a0a      	ldr	r2, [pc, #40]	; (da68 <bg_thread_main+0x38>)
    da40:	490a      	ldr	r1, [pc, #40]	; (da6c <bg_thread_main+0x3c>)
    da42:	480b      	ldr	r0, [pc, #44]	; (da70 <bg_thread_main+0x40>)
    da44:	f003 f9ca 	bl	10ddc <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    da48:	2003      	movs	r0, #3
    da4a:	f7ff ff0b 	bl	d864 <z_sys_init_run_level>

	z_init_static_threads();
    da4e:	f002 f8c7 	bl	fbe0 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    da52:	f007 fa64 	bl	14f1e <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    da56:	4a07      	ldr	r2, [pc, #28]	; (da74 <bg_thread_main+0x44>)
    da58:	7b13      	ldrb	r3, [r2, #12]
    da5a:	f023 0301 	bic.w	r3, r3, #1
    da5e:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    da60:	bd08      	pop	{r3, pc}
    da62:	bf00      	nop
    da64:	20002034 	.word	0x20002034
    da68:	0001919e 	.word	0x0001919e
    da6c:	00019cb2 	.word	0x00019cb2
    da70:	00019cc2 	.word	0x00019cc2
    da74:	20001434 	.word	0x20001434

0000da78 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    da78:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(z_interrupt_stacks[0])) +
    da7c:	4b36      	ldr	r3, [pc, #216]	; (db58 <z_cstart+0xe0>)
    da7e:	b0a5      	sub	sp, #148	; 0x94
    da80:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    da84:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    da88:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    da8c:	2400      	movs	r4, #0
    da8e:	23e0      	movs	r3, #224	; 0xe0
    da90:	4d32      	ldr	r5, [pc, #200]	; (db5c <z_cstart+0xe4>)
	z_setup_new_thread(&z_main_thread, z_main_stack,
    da92:	f04f 0b01 	mov.w	fp, #1
    da96:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    da9a:	77ec      	strb	r4, [r5, #31]
    da9c:	762c      	strb	r4, [r5, #24]
    da9e:	766c      	strb	r4, [r5, #25]
    daa0:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    daa2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
    daa4:	4e2e      	ldr	r6, [pc, #184]	; (db60 <z_cstart+0xe8>)
    daa6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    daaa:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    daac:	f7f5 fc8c 	bl	33c8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    dab0:	f7f5 f9fa 	bl	2ea8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    dab4:	f04f 33ff 	mov.w	r3, #4294967295
    dab8:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    daba:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    dabc:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = 0;
#endif

	_current_cpu->current = dummy_thread;
    dac0:	4d28      	ldr	r5, [pc, #160]	; (db64 <z_cstart+0xec>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    dac2:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	_current_cpu->current = dummy_thread;
    dac6:	ab07      	add	r3, sp, #28
    dac8:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    daca:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
    dacc:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
    dad0:	f7ff fec8 	bl	d864 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    dad4:	2001      	movs	r0, #1
    dad6:	f7ff fec5 	bl	d864 <z_sys_init_run_level>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    dada:	f8df a09c 	ldr.w	sl, [pc, #156]	; db78 <z_cstart+0x100>
	z_sched_init();
    dade:	f001 fd65 	bl	f5ac <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    dae2:	f8df 8098 	ldr.w	r8, [pc, #152]	; db7c <z_cstart+0x104>
    dae6:	4b20      	ldr	r3, [pc, #128]	; (db68 <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
    dae8:	626e      	str	r6, [r5, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
    daea:	f44f 6280 	mov.w	r2, #1024	; 0x400
    daee:	4641      	mov	r1, r8
    daf0:	4630      	mov	r0, r6
    daf2:	9305      	str	r3, [sp, #20]
    daf4:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    daf8:	4653      	mov	r3, sl
    dafa:	e9cd 4401 	strd	r4, r4, [sp, #4]
    dafe:	9400      	str	r4, [sp, #0]
    db00:	f001 ffc8 	bl	fa94 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    db04:	7b73      	ldrb	r3, [r6, #13]
	z_ready_thread(&z_main_thread);
    db06:	4630      	mov	r0, r6
    db08:	f023 0304 	bic.w	r3, r3, #4
    db0c:	7373      	strb	r3, [r6, #13]
    db0e:	f001 f835 	bl	eb7c <z_ready_thread>
	z_setup_new_thread(thread, stack,
    db12:	230f      	movs	r3, #15
    db14:	4f15      	ldr	r7, [pc, #84]	; (db6c <z_cstart+0xf4>)
    db16:	f44f 72a0 	mov.w	r2, #320	; 0x140
    db1a:	4638      	mov	r0, r7
    db1c:	e9cd 4302 	strd	r4, r3, [sp, #8]
    db20:	4913      	ldr	r1, [pc, #76]	; (db70 <z_cstart+0xf8>)
    db22:	4b14      	ldr	r3, [pc, #80]	; (db74 <z_cstart+0xfc>)
    db24:	e9cd b404 	strd	fp, r4, [sp, #16]
    db28:	e9cd 4400 	strd	r4, r4, [sp]
    db2c:	f001 ffb2 	bl	fa94 <z_setup_new_thread>
    db30:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
    db32:	f44f 6280 	mov.w	r2, #1024	; 0x400
    db36:	f023 0304 	bic.w	r3, r3, #4
    db3a:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    db3c:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
    db40:	e9c5 3306 	strd	r3, r3, [r5, #24]
    db44:	4641      	mov	r1, r8
    db46:	4653      	mov	r3, sl
    db48:	4630      	mov	r0, r6
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    db4a:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
    db4c:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
    db4e:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
    db52:	f7f5 f98b 	bl	2e6c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    db56:	bf00      	nop
    db58:	20004068 	.word	0x20004068
    db5c:	e000ed00 	.word	0xe000ed00
    db60:	20001434 	.word	0x20001434
    db64:	20001e10 	.word	0x20001e10
    db68:	00019ce9 	.word	0x00019ce9
    db6c:	200013c0 	.word	0x200013c0
    db70:	20003f28 	.word	0x20003f28
    db74:	0000d9b5 	.word	0x0000d9b5
    db78:	0000da31 	.word	0x0000da31
    db7c:	20003b28 	.word	0x20003b28

0000db80 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(struct device *unused)
{
    db80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    db82:	4d0f      	ldr	r5, [pc, #60]	; (dbc0 <statics_init+0x40>)
    db84:	4c0f      	ldr	r4, [pc, #60]	; (dbc4 <statics_init+0x44>)
    db86:	462f      	mov	r7, r5
    db88:	4e0f      	ldr	r6, [pc, #60]	; (dbc8 <statics_init+0x48>)
    db8a:	42ac      	cmp	r4, r5
    db8c:	d90c      	bls.n	dba8 <statics_init+0x28>
    db8e:	490f      	ldr	r1, [pc, #60]	; (dbcc <statics_init+0x4c>)
    db90:	2315      	movs	r3, #21
    db92:	4632      	mov	r2, r6
    db94:	480e      	ldr	r0, [pc, #56]	; (dbd0 <statics_init+0x50>)
    db96:	f003 f921 	bl	10ddc <printk>
    db9a:	480e      	ldr	r0, [pc, #56]	; (dbd4 <statics_init+0x54>)
    db9c:	f003 f91e 	bl	10ddc <printk>
    dba0:	2115      	movs	r1, #21
    dba2:	4630      	mov	r0, r6
    dba4:	f003 fbb0 	bl	11308 <assert_post_action>
    dba8:	42bc      	cmp	r4, r7
    dbaa:	d301      	bcc.n	dbb0 <statics_init+0x30>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
    dbac:	2000      	movs	r0, #0
    dbae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    dbb0:	4620      	mov	r0, r4
    dbb2:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    dbb6:	f007 f9b4 	bl	14f22 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    dbba:	3418      	adds	r4, #24
    dbbc:	e7e5      	b.n	db8a <statics_init+0xa>
    dbbe:	bf00      	nop
    dbc0:	200004fc 	.word	0x200004fc
    dbc4:	200004e4 	.word	0x200004e4
    dbc8:	00019cf1 	.word	0x00019cf1
    dbcc:	00019d13 	.word	0x00019d13
    dbd0:	00016493 	.word	0x00016493
    dbd4:	000164b0 	.word	0x000164b0

0000dbd8 <k_heap_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
    dbd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dbdc:	4606      	mov	r6, r0
    dbde:	b087      	sub	sp, #28
    dbe0:	468a      	mov	sl, r1
	s64_t now, end = z_timeout_end_calc(timeout);
    dbe2:	4610      	mov	r0, r2
    dbe4:	4619      	mov	r1, r3
{
    dbe6:	4690      	mov	r8, r2
    dbe8:	4699      	mov	r9, r3
	s64_t now, end = z_timeout_end_calc(timeout);
    dbea:	f007 fac2 	bl	15172 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    dbee:	f106 0414 	add.w	r4, r6, #20
	s64_t now, end = z_timeout_end_calc(timeout);
    dbf2:	e9cd 0104 	strd	r0, r1, [sp, #16]
    dbf6:	f04f 0320 	mov.w	r3, #32
    dbfa:	f3ef 8511 	mrs	r5, BASEPRI
    dbfe:	f383 8811 	msr	BASEPRI, r3
    dc02:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    dc06:	4620      	mov	r0, r4
    dc08:	f002 f878 	bl	fcfc <z_spin_lock_valid>
    dc0c:	b968      	cbnz	r0, dc2a <k_heap_alloc+0x52>
    dc0e:	235c      	movs	r3, #92	; 0x5c
    dc10:	4a3f      	ldr	r2, [pc, #252]	; (dd10 <k_heap_alloc+0x138>)
    dc12:	4940      	ldr	r1, [pc, #256]	; (dd14 <k_heap_alloc+0x13c>)
    dc14:	4840      	ldr	r0, [pc, #256]	; (dd18 <k_heap_alloc+0x140>)
    dc16:	f003 f8e1 	bl	10ddc <printk>
    dc1a:	4621      	mov	r1, r4
    dc1c:	483f      	ldr	r0, [pc, #252]	; (dd1c <k_heap_alloc+0x144>)
    dc1e:	f003 f8dd 	bl	10ddc <printk>
    dc22:	215c      	movs	r1, #92	; 0x5c
    dc24:	483a      	ldr	r0, [pc, #232]	; (dd10 <k_heap_alloc+0x138>)
    dc26:	f003 fb6f 	bl	11308 <assert_post_action>
	z_spin_lock_set_owner(l);
    dc2a:	4620      	mov	r0, r4
    dc2c:	f002 f882 	bl	fd34 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    dc30:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
    dc34:	b17b      	cbz	r3, dc56 <k_heap_alloc+0x7e>
    dc36:	ea58 0309 	orrs.w	r3, r8, r9
    dc3a:	d00c      	beq.n	dc56 <k_heap_alloc+0x7e>
    dc3c:	4938      	ldr	r1, [pc, #224]	; (dd20 <k_heap_alloc+0x148>)
    dc3e:	2323      	movs	r3, #35	; 0x23
    dc40:	4a38      	ldr	r2, [pc, #224]	; (dd24 <k_heap_alloc+0x14c>)
    dc42:	4835      	ldr	r0, [pc, #212]	; (dd18 <k_heap_alloc+0x140>)
    dc44:	f003 f8ca 	bl	10ddc <printk>
    dc48:	4837      	ldr	r0, [pc, #220]	; (dd28 <k_heap_alloc+0x150>)
    dc4a:	f003 f8c7 	bl	10ddc <printk>
    dc4e:	2123      	movs	r1, #35	; 0x23
    dc50:	4834      	ldr	r0, [pc, #208]	; (dd24 <k_heap_alloc+0x14c>)
    dc52:	f003 fb59 	bl	11308 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    dc56:	f8df 80b8 	ldr.w	r8, [pc, #184]	; dd10 <k_heap_alloc+0x138>
    dc5a:	f8df 90b8 	ldr.w	r9, [pc, #184]	; dd14 <k_heap_alloc+0x13c>
    dc5e:	f8df b0b8 	ldr.w	fp, [pc, #184]	; dd18 <k_heap_alloc+0x140>

	while (ret == NULL) {
		ret = sys_heap_alloc(&h->heap, bytes);
    dc62:	4651      	mov	r1, sl
    dc64:	4630      	mov	r0, r6
    dc66:	f003 fab3 	bl	111d0 <sys_heap_alloc>
    dc6a:	4607      	mov	r7, r0

		now = z_tick_get();
    dc6c:	f002 fc18 	bl	104a0 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
    dc70:	b1cf      	cbz	r7, dca6 <k_heap_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    dc72:	4620      	mov	r0, r4
    dc74:	f002 f850 	bl	fd18 <z_spin_unlock_valid>
    dc78:	b968      	cbnz	r0, dc96 <k_heap_alloc+0xbe>
    dc7a:	2384      	movs	r3, #132	; 0x84
    dc7c:	4a24      	ldr	r2, [pc, #144]	; (dd10 <k_heap_alloc+0x138>)
    dc7e:	492b      	ldr	r1, [pc, #172]	; (dd2c <k_heap_alloc+0x154>)
    dc80:	4825      	ldr	r0, [pc, #148]	; (dd18 <k_heap_alloc+0x140>)
    dc82:	f003 f8ab 	bl	10ddc <printk>
    dc86:	4621      	mov	r1, r4
    dc88:	4829      	ldr	r0, [pc, #164]	; (dd30 <k_heap_alloc+0x158>)
    dc8a:	f003 f8a7 	bl	10ddc <printk>
    dc8e:	2184      	movs	r1, #132	; 0x84
    dc90:	481f      	ldr	r0, [pc, #124]	; (dd10 <k_heap_alloc+0x138>)
    dc92:	f003 fb39 	bl	11308 <assert_post_action>
	__asm__ volatile(
    dc96:	f385 8811 	msr	BASEPRI, r5
    dc9a:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
    dc9e:	4638      	mov	r0, r7
    dca0:	b007      	add	sp, #28
    dca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
    dca6:	9b04      	ldr	r3, [sp, #16]
    dca8:	1a1b      	subs	r3, r3, r0
    dcaa:	9302      	str	r3, [sp, #8]
    dcac:	9b05      	ldr	r3, [sp, #20]
    dcae:	eb63 0301 	sbc.w	r3, r3, r1
    dcb2:	9303      	str	r3, [sp, #12]
    dcb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    dcb8:	2a01      	cmp	r2, #1
    dcba:	f173 0300 	sbcs.w	r3, r3, #0
    dcbe:	dbd8      	blt.n	dc72 <k_heap_alloc+0x9a>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    dcc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    dcc4:	4629      	mov	r1, r5
    dcc6:	e9cd 2300 	strd	r2, r3, [sp]
    dcca:	4620      	mov	r0, r4
    dccc:	f106 020c 	add.w	r2, r6, #12
    dcd0:	f001 fb1c 	bl	f30c <z_pend_curr>
	__asm__ volatile(
    dcd4:	f04f 0320 	mov.w	r3, #32
    dcd8:	f3ef 8511 	mrs	r5, BASEPRI
    dcdc:	f383 8811 	msr	BASEPRI, r3
    dce0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    dce4:	4620      	mov	r0, r4
    dce6:	f002 f809 	bl	fcfc <z_spin_lock_valid>
    dcea:	b968      	cbnz	r0, dd08 <k_heap_alloc+0x130>
    dcec:	235c      	movs	r3, #92	; 0x5c
    dcee:	4642      	mov	r2, r8
    dcf0:	4649      	mov	r1, r9
    dcf2:	4658      	mov	r0, fp
    dcf4:	f003 f872 	bl	10ddc <printk>
    dcf8:	4621      	mov	r1, r4
    dcfa:	4808      	ldr	r0, [pc, #32]	; (dd1c <k_heap_alloc+0x144>)
    dcfc:	f003 f86e 	bl	10ddc <printk>
    dd00:	215c      	movs	r1, #92	; 0x5c
    dd02:	4640      	mov	r0, r8
    dd04:	f003 fb00 	bl	11308 <assert_post_action>
	z_spin_lock_set_owner(l);
    dd08:	4620      	mov	r0, r4
    dd0a:	f002 f813 	bl	fd34 <z_spin_lock_set_owner>
	return k;
    dd0e:	e7a8      	b.n	dc62 <k_heap_alloc+0x8a>
    dd10:	0001691e 	.word	0x0001691e
    dd14:	00016944 	.word	0x00016944
    dd18:	00016493 	.word	0x00016493
    dd1c:	00016959 	.word	0x00016959
    dd20:	00019d29 	.word	0x00019d29
    dd24:	00019cf1 	.word	0x00019cf1
    dd28:	0001919c 	.word	0x0001919c
    dd2c:	00016971 	.word	0x00016971
    dd30:	00016988 	.word	0x00016988

0000dd34 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
    dd34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dd36:	4605      	mov	r5, r0
    dd38:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    dd3a:	f100 0414 	add.w	r4, r0, #20
    dd3e:	f04f 0320 	mov.w	r3, #32
    dd42:	f3ef 8711 	mrs	r7, BASEPRI
    dd46:	f383 8811 	msr	BASEPRI, r3
    dd4a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    dd4e:	4620      	mov	r0, r4
    dd50:	f001 ffd4 	bl	fcfc <z_spin_lock_valid>
    dd54:	b968      	cbnz	r0, dd72 <k_heap_free+0x3e>
    dd56:	235c      	movs	r3, #92	; 0x5c
    dd58:	4a1a      	ldr	r2, [pc, #104]	; (ddc4 <k_heap_free+0x90>)
    dd5a:	491b      	ldr	r1, [pc, #108]	; (ddc8 <k_heap_free+0x94>)
    dd5c:	481b      	ldr	r0, [pc, #108]	; (ddcc <k_heap_free+0x98>)
    dd5e:	f003 f83d 	bl	10ddc <printk>
    dd62:	4621      	mov	r1, r4
    dd64:	481a      	ldr	r0, [pc, #104]	; (ddd0 <k_heap_free+0x9c>)
    dd66:	f003 f839 	bl	10ddc <printk>
    dd6a:	215c      	movs	r1, #92	; 0x5c
    dd6c:	4815      	ldr	r0, [pc, #84]	; (ddc4 <k_heap_free+0x90>)
    dd6e:	f003 facb 	bl	11308 <assert_post_action>
	z_spin_lock_set_owner(l);
    dd72:	4620      	mov	r0, r4
    dd74:	f001 ffde 	bl	fd34 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
    dd78:	4628      	mov	r0, r5
    dd7a:	4631      	mov	r1, r6
    dd7c:	f003 f975 	bl	1106a <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
    dd80:	f105 000c 	add.w	r0, r5, #12
    dd84:	f007 f95e 	bl	15044 <z_unpend_all>
    dd88:	b128      	cbz	r0, dd96 <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
    dd8a:	4639      	mov	r1, r7
    dd8c:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    dd8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
    dd92:	f000 bcd1 	b.w	e738 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    dd96:	4620      	mov	r0, r4
    dd98:	f001 ffbe 	bl	fd18 <z_spin_unlock_valid>
    dd9c:	b968      	cbnz	r0, ddba <k_heap_free+0x86>
    dd9e:	2384      	movs	r3, #132	; 0x84
    dda0:	4a08      	ldr	r2, [pc, #32]	; (ddc4 <k_heap_free+0x90>)
    dda2:	490c      	ldr	r1, [pc, #48]	; (ddd4 <k_heap_free+0xa0>)
    dda4:	4809      	ldr	r0, [pc, #36]	; (ddcc <k_heap_free+0x98>)
    dda6:	f003 f819 	bl	10ddc <printk>
    ddaa:	4621      	mov	r1, r4
    ddac:	480a      	ldr	r0, [pc, #40]	; (ddd8 <k_heap_free+0xa4>)
    ddae:	f003 f815 	bl	10ddc <printk>
    ddb2:	2184      	movs	r1, #132	; 0x84
    ddb4:	4803      	ldr	r0, [pc, #12]	; (ddc4 <k_heap_free+0x90>)
    ddb6:	f003 faa7 	bl	11308 <assert_post_action>
	__asm__ volatile(
    ddba:	f387 8811 	msr	BASEPRI, r7
    ddbe:	f3bf 8f6f 	isb	sy
}
    ddc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ddc4:	0001691e 	.word	0x0001691e
    ddc8:	00016944 	.word	0x00016944
    ddcc:	00016493 	.word	0x00016493
    ddd0:	00016959 	.word	0x00016959
    ddd4:	00016971 	.word	0x00016971
    ddd8:	00016988 	.word	0x00016988

0000dddc <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
    dddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    dde0:	4d16      	ldr	r5, [pc, #88]	; (de3c <init_mem_slab_module+0x60>)
    dde2:	4c17      	ldr	r4, [pc, #92]	; (de40 <init_mem_slab_module+0x64>)
    dde4:	46a8      	mov	r8, r5
    dde6:	4e17      	ldr	r6, [pc, #92]	; (de44 <init_mem_slab_module+0x68>)
    dde8:	42ac      	cmp	r4, r5
    ddea:	d90c      	bls.n	de06 <init_mem_slab_module+0x2a>
    ddec:	4916      	ldr	r1, [pc, #88]	; (de48 <init_mem_slab_module+0x6c>)
    ddee:	2342      	movs	r3, #66	; 0x42
    ddf0:	4632      	mov	r2, r6
    ddf2:	4816      	ldr	r0, [pc, #88]	; (de4c <init_mem_slab_module+0x70>)
    ddf4:	f002 fff2 	bl	10ddc <printk>
    ddf8:	4815      	ldr	r0, [pc, #84]	; (de50 <init_mem_slab_module+0x74>)
    ddfa:	f002 ffef 	bl	10ddc <printk>
    ddfe:	2142      	movs	r1, #66	; 0x42
    de00:	4630      	mov	r0, r6
    de02:	f003 fa81 	bl	11308 <assert_post_action>
    de06:	4544      	cmp	r4, r8
    de08:	d302      	bcc.n	de10 <init_mem_slab_module+0x34>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
    de0a:	2000      	movs	r0, #0
	return rc;
}
    de0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    de10:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    de14:	ea41 0302 	orr.w	r3, r1, r2
    de18:	f013 0303 	ands.w	r3, r3, #3
    de1c:	d10b      	bne.n	de36 <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
    de1e:	68a0      	ldr	r0, [r4, #8]
	slab->free_list = NULL;
    de20:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    de22:	4283      	cmp	r3, r0
    de24:	d101      	bne.n	de2a <init_mem_slab_module+0x4e>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    de26:	341c      	adds	r4, #28
    de28:	e7de      	b.n	dde8 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
    de2a:	6967      	ldr	r7, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    de2c:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
    de2e:	600f      	str	r7, [r1, #0]
		slab->free_list = p;
    de30:	6161      	str	r1, [r4, #20]
		p += slab->block_size;
    de32:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    de34:	e7f5      	b.n	de22 <init_mem_slab_module+0x46>
		return -EINVAL;
    de36:	f06f 0015 	mvn.w	r0, #21
	return rc;
    de3a:	e7e7      	b.n	de0c <init_mem_slab_module+0x30>
    de3c:	200004e4 	.word	0x200004e4
    de40:	200004ac 	.word	0x200004ac
    de44:	00019d6e 	.word	0x00019d6e
    de48:	00019d93 	.word	0x00019d93
    de4c:	00016493 	.word	0x00016493
    de50:	000164b0 	.word	0x000164b0

0000de54 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    de54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    de58:	4604      	mov	r4, r0
    de5a:	460d      	mov	r5, r1
    de5c:	4616      	mov	r6, r2
    de5e:	461f      	mov	r7, r3
	__asm__ volatile(
    de60:	f04f 0320 	mov.w	r3, #32
    de64:	f3ef 8811 	mrs	r8, BASEPRI
    de68:	f383 8811 	msr	BASEPRI, r3
    de6c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    de70:	4826      	ldr	r0, [pc, #152]	; (df0c <k_mem_slab_alloc+0xb8>)
    de72:	f001 ff43 	bl	fcfc <z_spin_lock_valid>
    de76:	b968      	cbnz	r0, de94 <k_mem_slab_alloc+0x40>
    de78:	235c      	movs	r3, #92	; 0x5c
    de7a:	4a25      	ldr	r2, [pc, #148]	; (df10 <k_mem_slab_alloc+0xbc>)
    de7c:	4925      	ldr	r1, [pc, #148]	; (df14 <k_mem_slab_alloc+0xc0>)
    de7e:	4826      	ldr	r0, [pc, #152]	; (df18 <k_mem_slab_alloc+0xc4>)
    de80:	f002 ffac 	bl	10ddc <printk>
    de84:	4921      	ldr	r1, [pc, #132]	; (df0c <k_mem_slab_alloc+0xb8>)
    de86:	4825      	ldr	r0, [pc, #148]	; (df1c <k_mem_slab_alloc+0xc8>)
    de88:	f002 ffa8 	bl	10ddc <printk>
    de8c:	215c      	movs	r1, #92	; 0x5c
    de8e:	4820      	ldr	r0, [pc, #128]	; (df10 <k_mem_slab_alloc+0xbc>)
    de90:	f003 fa3a 	bl	11308 <assert_post_action>
	z_spin_lock_set_owner(l);
    de94:	481d      	ldr	r0, [pc, #116]	; (df0c <k_mem_slab_alloc+0xb8>)
    de96:	f001 ff4d 	bl	fd34 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
    de9a:	6963      	ldr	r3, [r4, #20]
    de9c:	b1eb      	cbz	r3, deda <k_mem_slab_alloc+0x86>
		/* take a free block */
		*mem = slab->free_list;
    de9e:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
    dea0:	681b      	ldr	r3, [r3, #0]
    dea2:	6163      	str	r3, [r4, #20]
		slab->num_used++;
    dea4:	69a3      	ldr	r3, [r4, #24]
    dea6:	3301      	adds	r3, #1
    dea8:	61a3      	str	r3, [r4, #24]
		result = 0;
    deaa:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    deac:	4817      	ldr	r0, [pc, #92]	; (df0c <k_mem_slab_alloc+0xb8>)
    deae:	f001 ff33 	bl	fd18 <z_spin_unlock_valid>
    deb2:	b968      	cbnz	r0, ded0 <k_mem_slab_alloc+0x7c>
    deb4:	2384      	movs	r3, #132	; 0x84
    deb6:	4a16      	ldr	r2, [pc, #88]	; (df10 <k_mem_slab_alloc+0xbc>)
    deb8:	4919      	ldr	r1, [pc, #100]	; (df20 <k_mem_slab_alloc+0xcc>)
    deba:	4817      	ldr	r0, [pc, #92]	; (df18 <k_mem_slab_alloc+0xc4>)
    debc:	f002 ff8e 	bl	10ddc <printk>
    dec0:	4912      	ldr	r1, [pc, #72]	; (df0c <k_mem_slab_alloc+0xb8>)
    dec2:	4818      	ldr	r0, [pc, #96]	; (df24 <k_mem_slab_alloc+0xd0>)
    dec4:	f002 ff8a 	bl	10ddc <printk>
    dec8:	2184      	movs	r1, #132	; 0x84
    deca:	4811      	ldr	r0, [pc, #68]	; (df10 <k_mem_slab_alloc+0xbc>)
    decc:	f003 fa1c 	bl	11308 <assert_post_action>
	__asm__ volatile(
    ded0:	f388 8811 	msr	BASEPRI, r8
    ded4:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
    ded8:	e013      	b.n	df02 <k_mem_slab_alloc+0xae>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    deda:	ea56 0207 	orrs.w	r2, r6, r7
    dede:	d103      	bne.n	dee8 <k_mem_slab_alloc+0x94>
		result = -ENOMEM;
    dee0:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
    dee4:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
    dee6:	e7e1      	b.n	deac <k_mem_slab_alloc+0x58>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
    dee8:	4622      	mov	r2, r4
    deea:	4641      	mov	r1, r8
    deec:	e9cd 6700 	strd	r6, r7, [sp]
    def0:	4806      	ldr	r0, [pc, #24]	; (df0c <k_mem_slab_alloc+0xb8>)
    def2:	f001 fa0b 	bl	f30c <z_pend_curr>
		if (result == 0) {
    def6:	4604      	mov	r4, r0
    def8:	b918      	cbnz	r0, df02 <k_mem_slab_alloc+0xae>
			*mem = _current->base.swap_data;
    defa:	4b0b      	ldr	r3, [pc, #44]	; (df28 <k_mem_slab_alloc+0xd4>)
    defc:	689b      	ldr	r3, [r3, #8]
    defe:	695b      	ldr	r3, [r3, #20]
    df00:	602b      	str	r3, [r5, #0]
}
    df02:	4620      	mov	r0, r4
    df04:	b002      	add	sp, #8
    df06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    df0a:	bf00      	nop
    df0c:	200014a8 	.word	0x200014a8
    df10:	0001691e 	.word	0x0001691e
    df14:	00016944 	.word	0x00016944
    df18:	00016493 	.word	0x00016493
    df1c:	00016959 	.word	0x00016959
    df20:	00016971 	.word	0x00016971
    df24:	00016988 	.word	0x00016988
    df28:	20001e10 	.word	0x20001e10

0000df2c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    df2c:	b570      	push	{r4, r5, r6, lr}
    df2e:	4604      	mov	r4, r0
    df30:	460d      	mov	r5, r1
	__asm__ volatile(
    df32:	f04f 0320 	mov.w	r3, #32
    df36:	f3ef 8611 	mrs	r6, BASEPRI
    df3a:	f383 8811 	msr	BASEPRI, r3
    df3e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    df42:	4822      	ldr	r0, [pc, #136]	; (dfcc <k_mem_slab_free+0xa0>)
    df44:	f001 feda 	bl	fcfc <z_spin_lock_valid>
    df48:	b968      	cbnz	r0, df66 <k_mem_slab_free+0x3a>
    df4a:	235c      	movs	r3, #92	; 0x5c
    df4c:	4a20      	ldr	r2, [pc, #128]	; (dfd0 <k_mem_slab_free+0xa4>)
    df4e:	4921      	ldr	r1, [pc, #132]	; (dfd4 <k_mem_slab_free+0xa8>)
    df50:	4821      	ldr	r0, [pc, #132]	; (dfd8 <k_mem_slab_free+0xac>)
    df52:	f002 ff43 	bl	10ddc <printk>
    df56:	491d      	ldr	r1, [pc, #116]	; (dfcc <k_mem_slab_free+0xa0>)
    df58:	4820      	ldr	r0, [pc, #128]	; (dfdc <k_mem_slab_free+0xb0>)
    df5a:	f002 ff3f 	bl	10ddc <printk>
    df5e:	215c      	movs	r1, #92	; 0x5c
    df60:	481b      	ldr	r0, [pc, #108]	; (dfd0 <k_mem_slab_free+0xa4>)
    df62:	f003 f9d1 	bl	11308 <assert_post_action>
	z_spin_lock_set_owner(l);
    df66:	4819      	ldr	r0, [pc, #100]	; (dfcc <k_mem_slab_free+0xa0>)
    df68:	f001 fee4 	bl	fd34 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    df6c:	4620      	mov	r0, r4
    df6e:	f001 fa8d 	bl	f48c <z_unpend_first_thread>

	if (pending_thread != NULL) {
    df72:	b158      	cbz	r0, df8c <k_mem_slab_free+0x60>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    df74:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    df76:	682a      	ldr	r2, [r5, #0]
    df78:	6701      	str	r1, [r0, #112]	; 0x70
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    df7a:	6142      	str	r2, [r0, #20]
		z_ready_thread(pending_thread);
    df7c:	f000 fdfe 	bl	eb7c <z_ready_thread>
		z_reschedule(&lock, key);
    df80:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
    df82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
    df86:	4811      	ldr	r0, [pc, #68]	; (dfcc <k_mem_slab_free+0xa0>)
    df88:	f000 bbd6 	b.w	e738 <z_reschedule>
		**(char ***)mem = slab->free_list;
    df8c:	682b      	ldr	r3, [r5, #0]
    df8e:	6962      	ldr	r2, [r4, #20]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    df90:	480e      	ldr	r0, [pc, #56]	; (dfcc <k_mem_slab_free+0xa0>)
    df92:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
    df94:	682b      	ldr	r3, [r5, #0]
    df96:	6163      	str	r3, [r4, #20]
		slab->num_used--;
    df98:	69a3      	ldr	r3, [r4, #24]
    df9a:	3b01      	subs	r3, #1
    df9c:	61a3      	str	r3, [r4, #24]
    df9e:	f001 febb 	bl	fd18 <z_spin_unlock_valid>
    dfa2:	b968      	cbnz	r0, dfc0 <k_mem_slab_free+0x94>
    dfa4:	2384      	movs	r3, #132	; 0x84
    dfa6:	4a0a      	ldr	r2, [pc, #40]	; (dfd0 <k_mem_slab_free+0xa4>)
    dfa8:	490d      	ldr	r1, [pc, #52]	; (dfe0 <k_mem_slab_free+0xb4>)
    dfaa:	480b      	ldr	r0, [pc, #44]	; (dfd8 <k_mem_slab_free+0xac>)
    dfac:	f002 ff16 	bl	10ddc <printk>
    dfb0:	4906      	ldr	r1, [pc, #24]	; (dfcc <k_mem_slab_free+0xa0>)
    dfb2:	480c      	ldr	r0, [pc, #48]	; (dfe4 <k_mem_slab_free+0xb8>)
    dfb4:	f002 ff12 	bl	10ddc <printk>
    dfb8:	2184      	movs	r1, #132	; 0x84
    dfba:	4805      	ldr	r0, [pc, #20]	; (dfd0 <k_mem_slab_free+0xa4>)
    dfbc:	f003 f9a4 	bl	11308 <assert_post_action>
	__asm__ volatile(
    dfc0:	f386 8811 	msr	BASEPRI, r6
    dfc4:	f3bf 8f6f 	isb	sy
}
    dfc8:	bd70      	pop	{r4, r5, r6, pc}
    dfca:	bf00      	nop
    dfcc:	200014a8 	.word	0x200014a8
    dfd0:	0001691e 	.word	0x0001691e
    dfd4:	00016944 	.word	0x00016944
    dfd8:	00016493 	.word	0x00016493
    dfdc:	00016959 	.word	0x00016959
    dfe0:	00016971 	.word	0x00016971
    dfe4:	00016988 	.word	0x00016988

0000dfe8 <k_malloc>:
K_MEM_POOL_DEFINE(_heap_mem_pool, CONFIG_HEAP_MEM_POOL_MIN_SIZE,
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
    dfe8:	4601      	mov	r1, r0
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
    dfea:	4801      	ldr	r0, [pc, #4]	; (dff0 <k_malloc+0x8>)
    dfec:	f006 bfbe 	b.w	14f6c <k_mem_pool_malloc>
    dff0:	200002ec 	.word	0x200002ec

0000dff4 <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
    dff4:	b510      	push	{r4, lr}
    dff6:	4604      	mov	r4, r0
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
    dff8:	f007 f844 	bl	15084 <k_is_in_isr>
    dffc:	b948      	cbnz	r0, e012 <z_thread_malloc+0x1e>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
    dffe:	4b06      	ldr	r3, [pc, #24]	; (e018 <z_thread_malloc+0x24>)
    e000:	689b      	ldr	r3, [r3, #8]
    e002:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	}

	if (pool) {
    e004:	b13b      	cbz	r3, e016 <z_thread_malloc+0x22>
		ret = k_mem_pool_malloc(pool, size);
    e006:	4621      	mov	r1, r4
	} else {
		ret = NULL;
	}

	return ret;
}
    e008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = k_mem_pool_malloc(pool, size);
    e00c:	4618      	mov	r0, r3
    e00e:	f006 bfad 	b.w	14f6c <k_mem_pool_malloc>
		pool = _HEAP_MEM_POOL;
    e012:	4b02      	ldr	r3, [pc, #8]	; (e01c <z_thread_malloc+0x28>)
    e014:	e7f7      	b.n	e006 <z_thread_malloc+0x12>
}
    e016:	bd10      	pop	{r4, pc}
    e018:	20001e10 	.word	0x20001e10
    e01c:	200002ec 	.word	0x200002ec

0000e020 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    e020:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    e024:	4604      	mov	r4, r0
    e026:	4616      	mov	r6, r2
    e028:	461f      	mov	r7, r3
	__asm__ volatile(
    e02a:	f04f 0320 	mov.w	r3, #32
    e02e:	f3ef 8811 	mrs	r8, BASEPRI
    e032:	f383 8811 	msr	BASEPRI, r3
    e036:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e03a:	4863      	ldr	r0, [pc, #396]	; (e1c8 <z_impl_k_mutex_lock+0x1a8>)
    e03c:	f001 fe5e 	bl	fcfc <z_spin_lock_valid>
    e040:	b968      	cbnz	r0, e05e <z_impl_k_mutex_lock+0x3e>
    e042:	235c      	movs	r3, #92	; 0x5c
    e044:	4a61      	ldr	r2, [pc, #388]	; (e1cc <z_impl_k_mutex_lock+0x1ac>)
    e046:	4962      	ldr	r1, [pc, #392]	; (e1d0 <z_impl_k_mutex_lock+0x1b0>)
    e048:	4862      	ldr	r0, [pc, #392]	; (e1d4 <z_impl_k_mutex_lock+0x1b4>)
    e04a:	f002 fec7 	bl	10ddc <printk>
    e04e:	495e      	ldr	r1, [pc, #376]	; (e1c8 <z_impl_k_mutex_lock+0x1a8>)
    e050:	4861      	ldr	r0, [pc, #388]	; (e1d8 <z_impl_k_mutex_lock+0x1b8>)
    e052:	f002 fec3 	bl	10ddc <printk>
    e056:	215c      	movs	r1, #92	; 0x5c
    e058:	485c      	ldr	r0, [pc, #368]	; (e1cc <z_impl_k_mutex_lock+0x1ac>)
    e05a:	f003 f955 	bl	11308 <assert_post_action>
	z_spin_lock_set_owner(l);
    e05e:	485a      	ldr	r0, [pc, #360]	; (e1c8 <z_impl_k_mutex_lock+0x1a8>)
    e060:	f001 fe68 	bl	fd34 <z_spin_lock_set_owner>
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    e064:	68e3      	ldr	r3, [r4, #12]
    e066:	4a5d      	ldr	r2, [pc, #372]	; (e1dc <z_impl_k_mutex_lock+0x1bc>)
    e068:	b1fb      	cbz	r3, e0aa <z_impl_k_mutex_lock+0x8a>
    e06a:	68a0      	ldr	r0, [r4, #8]
    e06c:	6891      	ldr	r1, [r2, #8]
    e06e:	4288      	cmp	r0, r1
    e070:	d03d      	beq.n	e0ee <z_impl_k_mutex_lock+0xce>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    e072:	ea56 0307 	orrs.w	r3, r6, r7
    e076:	d13c      	bne.n	e0f2 <z_impl_k_mutex_lock+0xd2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e078:	4853      	ldr	r0, [pc, #332]	; (e1c8 <z_impl_k_mutex_lock+0x1a8>)
    e07a:	f001 fe4d 	bl	fd18 <z_spin_unlock_valid>
    e07e:	b968      	cbnz	r0, e09c <z_impl_k_mutex_lock+0x7c>
    e080:	2384      	movs	r3, #132	; 0x84
    e082:	4a52      	ldr	r2, [pc, #328]	; (e1cc <z_impl_k_mutex_lock+0x1ac>)
    e084:	4956      	ldr	r1, [pc, #344]	; (e1e0 <z_impl_k_mutex_lock+0x1c0>)
    e086:	4853      	ldr	r0, [pc, #332]	; (e1d4 <z_impl_k_mutex_lock+0x1b4>)
    e088:	f002 fea8 	bl	10ddc <printk>
    e08c:	494e      	ldr	r1, [pc, #312]	; (e1c8 <z_impl_k_mutex_lock+0x1a8>)
    e08e:	4855      	ldr	r0, [pc, #340]	; (e1e4 <z_impl_k_mutex_lock+0x1c4>)
    e090:	f002 fea4 	bl	10ddc <printk>
    e094:	2184      	movs	r1, #132	; 0x84
    e096:	484d      	ldr	r0, [pc, #308]	; (e1cc <z_impl_k_mutex_lock+0x1ac>)
    e098:	f003 f936 	bl	11308 <assert_post_action>
	__asm__ volatile(
    e09c:	f388 8811 	msr	BASEPRI, r8
    e0a0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
    e0a4:	f06f 000f 	mvn.w	r0, #15
    e0a8:	e01e      	b.n	e0e8 <z_impl_k_mutex_lock+0xc8>
					_current->base.prio :
    e0aa:	6891      	ldr	r1, [r2, #8]
    e0ac:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    e0b0:	3301      	adds	r3, #1
    e0b2:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    e0b4:	6893      	ldr	r3, [r2, #8]
    e0b6:	4844      	ldr	r0, [pc, #272]	; (e1c8 <z_impl_k_mutex_lock+0x1a8>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    e0b8:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    e0ba:	60a3      	str	r3, [r4, #8]
    e0bc:	f001 fe2c 	bl	fd18 <z_spin_unlock_valid>
    e0c0:	b968      	cbnz	r0, e0de <z_impl_k_mutex_lock+0xbe>
    e0c2:	2384      	movs	r3, #132	; 0x84
    e0c4:	4a41      	ldr	r2, [pc, #260]	; (e1cc <z_impl_k_mutex_lock+0x1ac>)
    e0c6:	4946      	ldr	r1, [pc, #280]	; (e1e0 <z_impl_k_mutex_lock+0x1c0>)
    e0c8:	4842      	ldr	r0, [pc, #264]	; (e1d4 <z_impl_k_mutex_lock+0x1b4>)
    e0ca:	f002 fe87 	bl	10ddc <printk>
    e0ce:	493e      	ldr	r1, [pc, #248]	; (e1c8 <z_impl_k_mutex_lock+0x1a8>)
    e0d0:	4844      	ldr	r0, [pc, #272]	; (e1e4 <z_impl_k_mutex_lock+0x1c4>)
    e0d2:	f002 fe83 	bl	10ddc <printk>
    e0d6:	2184      	movs	r1, #132	; 0x84
    e0d8:	483c      	ldr	r0, [pc, #240]	; (e1cc <z_impl_k_mutex_lock+0x1ac>)
    e0da:	f003 f915 	bl	11308 <assert_post_action>
    e0de:	f388 8811 	msr	BASEPRI, r8
    e0e2:	f3bf 8f6f 	isb	sy
		return 0;
    e0e6:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    e0e8:	b002      	add	sp, #8
    e0ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    e0ee:	6921      	ldr	r1, [r4, #16]
    e0f0:	e7de      	b.n	e0b0 <z_impl_k_mutex_lock+0x90>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    e0f2:	f990 300e 	ldrsb.w	r3, [r0, #14]
    e0f6:	f991 100e 	ldrsb.w	r1, [r1, #14]
    e0fa:	4299      	cmp	r1, r3
    e0fc:	bfa8      	it	ge
    e0fe:	4619      	movge	r1, r3
    e100:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    e104:	428b      	cmp	r3, r1
    e106:	dd41      	ble.n	e18c <z_impl_k_mutex_lock+0x16c>
		return z_set_prio(mutex->owner, new_prio);
    e108:	f001 f930 	bl	f36c <z_set_prio>
    e10c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    e10e:	4622      	mov	r2, r4
    e110:	4641      	mov	r1, r8
    e112:	e9cd 6700 	strd	r6, r7, [sp]
    e116:	482c      	ldr	r0, [pc, #176]	; (e1c8 <z_impl_k_mutex_lock+0x1a8>)
    e118:	f001 f8f8 	bl	f30c <z_pend_curr>
	if (got_mutex == 0) {
    e11c:	2800      	cmp	r0, #0
    e11e:	d0e3      	beq.n	e0e8 <z_impl_k_mutex_lock+0xc8>
	__asm__ volatile(
    e120:	f04f 0320 	mov.w	r3, #32
    e124:	f3ef 8611 	mrs	r6, BASEPRI
    e128:	f383 8811 	msr	BASEPRI, r3
    e12c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e130:	4825      	ldr	r0, [pc, #148]	; (e1c8 <z_impl_k_mutex_lock+0x1a8>)
    e132:	f001 fde3 	bl	fcfc <z_spin_lock_valid>
    e136:	b968      	cbnz	r0, e154 <z_impl_k_mutex_lock+0x134>
    e138:	235c      	movs	r3, #92	; 0x5c
    e13a:	4a24      	ldr	r2, [pc, #144]	; (e1cc <z_impl_k_mutex_lock+0x1ac>)
    e13c:	4924      	ldr	r1, [pc, #144]	; (e1d0 <z_impl_k_mutex_lock+0x1b0>)
    e13e:	4825      	ldr	r0, [pc, #148]	; (e1d4 <z_impl_k_mutex_lock+0x1b4>)
    e140:	f002 fe4c 	bl	10ddc <printk>
    e144:	4920      	ldr	r1, [pc, #128]	; (e1c8 <z_impl_k_mutex_lock+0x1a8>)
    e146:	4824      	ldr	r0, [pc, #144]	; (e1d8 <z_impl_k_mutex_lock+0x1b8>)
    e148:	f002 fe48 	bl	10ddc <printk>
    e14c:	215c      	movs	r1, #92	; 0x5c
    e14e:	481f      	ldr	r0, [pc, #124]	; (e1cc <z_impl_k_mutex_lock+0x1ac>)
    e150:	f003 f8da 	bl	11308 <assert_post_action>
	z_spin_lock_set_owner(l);
    e154:	481c      	ldr	r0, [pc, #112]	; (e1c8 <z_impl_k_mutex_lock+0x1a8>)
    e156:	f001 fded 	bl	fd34 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    e15a:	6823      	ldr	r3, [r4, #0]
    e15c:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e15e:	429c      	cmp	r4, r3
    e160:	d007      	beq.n	e172 <z_impl_k_mutex_lock+0x152>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    e162:	b133      	cbz	r3, e172 <z_impl_k_mutex_lock+0x152>
    e164:	f993 300e 	ldrsb.w	r3, [r3, #14]
    e168:	4299      	cmp	r1, r3
    e16a:	bfa8      	it	ge
    e16c:	4619      	movge	r1, r3
    e16e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    e172:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    e174:	f990 300e 	ldrsb.w	r3, [r0, #14]
    e178:	4299      	cmp	r1, r3
    e17a:	d109      	bne.n	e190 <z_impl_k_mutex_lock+0x170>
	if (resched) {
    e17c:	b16d      	cbz	r5, e19a <z_impl_k_mutex_lock+0x17a>
		z_reschedule(&lock, key);
    e17e:	4631      	mov	r1, r6
    e180:	4811      	ldr	r0, [pc, #68]	; (e1c8 <z_impl_k_mutex_lock+0x1a8>)
    e182:	f000 fad9 	bl	e738 <z_reschedule>
	return -EAGAIN;
    e186:	f06f 000a 	mvn.w	r0, #10
    e18a:	e7ad      	b.n	e0e8 <z_impl_k_mutex_lock+0xc8>
	bool resched = false;
    e18c:	2500      	movs	r5, #0
    e18e:	e7be      	b.n	e10e <z_impl_k_mutex_lock+0xee>
		return z_set_prio(mutex->owner, new_prio);
    e190:	f001 f8ec 	bl	f36c <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    e194:	2800      	cmp	r0, #0
    e196:	d1f2      	bne.n	e17e <z_impl_k_mutex_lock+0x15e>
    e198:	e7f0      	b.n	e17c <z_impl_k_mutex_lock+0x15c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e19a:	480b      	ldr	r0, [pc, #44]	; (e1c8 <z_impl_k_mutex_lock+0x1a8>)
    e19c:	f001 fdbc 	bl	fd18 <z_spin_unlock_valid>
    e1a0:	b968      	cbnz	r0, e1be <z_impl_k_mutex_lock+0x19e>
    e1a2:	2384      	movs	r3, #132	; 0x84
    e1a4:	4a09      	ldr	r2, [pc, #36]	; (e1cc <z_impl_k_mutex_lock+0x1ac>)
    e1a6:	490e      	ldr	r1, [pc, #56]	; (e1e0 <z_impl_k_mutex_lock+0x1c0>)
    e1a8:	480a      	ldr	r0, [pc, #40]	; (e1d4 <z_impl_k_mutex_lock+0x1b4>)
    e1aa:	f002 fe17 	bl	10ddc <printk>
    e1ae:	4906      	ldr	r1, [pc, #24]	; (e1c8 <z_impl_k_mutex_lock+0x1a8>)
    e1b0:	480c      	ldr	r0, [pc, #48]	; (e1e4 <z_impl_k_mutex_lock+0x1c4>)
    e1b2:	f002 fe13 	bl	10ddc <printk>
    e1b6:	2184      	movs	r1, #132	; 0x84
    e1b8:	4804      	ldr	r0, [pc, #16]	; (e1cc <z_impl_k_mutex_lock+0x1ac>)
    e1ba:	f003 f8a5 	bl	11308 <assert_post_action>
	__asm__ volatile(
    e1be:	f386 8811 	msr	BASEPRI, r6
    e1c2:	f3bf 8f6f 	isb	sy
    e1c6:	e7de      	b.n	e186 <z_impl_k_mutex_lock+0x166>
    e1c8:	20001e0c 	.word	0x20001e0c
    e1cc:	0001691e 	.word	0x0001691e
    e1d0:	00016944 	.word	0x00016944
    e1d4:	00016493 	.word	0x00016493
    e1d8:	00016959 	.word	0x00016959
    e1dc:	20001e10 	.word	0x20001e10
    e1e0:	00016971 	.word	0x00016971
    e1e4:	00016988 	.word	0x00016988

0000e1e8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    e1e8:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	CHECKIF(mutex->owner == NULL) {
    e1ea:	6883      	ldr	r3, [r0, #8]
{
    e1ec:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    e1ee:	2b00      	cmp	r3, #0
    e1f0:	f000 8091 	beq.w	e316 <z_impl_k_mutex_unlock+0x12e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    e1f4:	4d4b      	ldr	r5, [pc, #300]	; (e324 <z_impl_k_mutex_unlock+0x13c>)
    e1f6:	68aa      	ldr	r2, [r5, #8]
    e1f8:	4293      	cmp	r3, r2
    e1fa:	f040 808f 	bne.w	e31c <z_impl_k_mutex_unlock+0x134>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    e1fe:	68c3      	ldr	r3, [r0, #12]
    e200:	b94b      	cbnz	r3, e216 <z_impl_k_mutex_unlock+0x2e>
    e202:	4949      	ldr	r1, [pc, #292]	; (e328 <z_impl_k_mutex_unlock+0x140>)
    e204:	4849      	ldr	r0, [pc, #292]	; (e32c <z_impl_k_mutex_unlock+0x144>)
    e206:	23e6      	movs	r3, #230	; 0xe6
    e208:	4a49      	ldr	r2, [pc, #292]	; (e330 <z_impl_k_mutex_unlock+0x148>)
    e20a:	f002 fde7 	bl	10ddc <printk>
    e20e:	21e6      	movs	r1, #230	; 0xe6
    e210:	4847      	ldr	r0, [pc, #284]	; (e330 <z_impl_k_mutex_unlock+0x148>)
    e212:	f003 f879 	bl	11308 <assert_post_action>
    e216:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
    e21a:	b173      	cbz	r3, e23a <z_impl_k_mutex_unlock+0x52>
    e21c:	4945      	ldr	r1, [pc, #276]	; (e334 <z_impl_k_mutex_unlock+0x14c>)
    e21e:	f240 130b 	movw	r3, #267	; 0x10b
    e222:	4a45      	ldr	r2, [pc, #276]	; (e338 <z_impl_k_mutex_unlock+0x150>)
    e224:	4841      	ldr	r0, [pc, #260]	; (e32c <z_impl_k_mutex_unlock+0x144>)
    e226:	f002 fdd9 	bl	10ddc <printk>
    e22a:	4844      	ldr	r0, [pc, #272]	; (e33c <z_impl_k_mutex_unlock+0x154>)
    e22c:	f002 fdd6 	bl	10ddc <printk>
    e230:	f240 110b 	movw	r1, #267	; 0x10b
    e234:	4840      	ldr	r0, [pc, #256]	; (e338 <z_impl_k_mutex_unlock+0x150>)
    e236:	f003 f867 	bl	11308 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
    e23a:	68ab      	ldr	r3, [r5, #8]
    e23c:	7bdb      	ldrb	r3, [r3, #15]
    e23e:	2b01      	cmp	r3, #1
    e240:	d10e      	bne.n	e260 <z_impl_k_mutex_unlock+0x78>
    e242:	493f      	ldr	r1, [pc, #252]	; (e340 <z_impl_k_mutex_unlock+0x158>)
    e244:	f44f 7386 	mov.w	r3, #268	; 0x10c
    e248:	4a3b      	ldr	r2, [pc, #236]	; (e338 <z_impl_k_mutex_unlock+0x150>)
    e24a:	4838      	ldr	r0, [pc, #224]	; (e32c <z_impl_k_mutex_unlock+0x144>)
    e24c:	f002 fdc6 	bl	10ddc <printk>
    e250:	483a      	ldr	r0, [pc, #232]	; (e33c <z_impl_k_mutex_unlock+0x154>)
    e252:	f002 fdc3 	bl	10ddc <printk>
    e256:	f44f 7186 	mov.w	r1, #268	; 0x10c
    e25a:	4837      	ldr	r0, [pc, #220]	; (e338 <z_impl_k_mutex_unlock+0x150>)
    e25c:	f003 f854 	bl	11308 <assert_post_action>

	--_current->base.sched_locked;
    e260:	68aa      	ldr	r2, [r5, #8]
    e262:	7bd3      	ldrb	r3, [r2, #15]
    e264:	3b01      	subs	r3, #1
    e266:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
    e268:	68e3      	ldr	r3, [r4, #12]
    e26a:	2b01      	cmp	r3, #1
    e26c:	d005      	beq.n	e27a <z_impl_k_mutex_unlock+0x92>
		mutex->lock_count--;
    e26e:	3b01      	subs	r3, #1
    e270:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
    e272:	f000 fbbd 	bl	e9f0 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
    e276:	2000      	movs	r0, #0
}
    e278:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    e27a:	f04f 0320 	mov.w	r3, #32
    e27e:	f3ef 8511 	mrs	r5, BASEPRI
    e282:	f383 8811 	msr	BASEPRI, r3
    e286:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e28a:	482e      	ldr	r0, [pc, #184]	; (e344 <z_impl_k_mutex_unlock+0x15c>)
    e28c:	f001 fd36 	bl	fcfc <z_spin_lock_valid>
    e290:	b968      	cbnz	r0, e2ae <z_impl_k_mutex_unlock+0xc6>
    e292:	235c      	movs	r3, #92	; 0x5c
    e294:	4a2c      	ldr	r2, [pc, #176]	; (e348 <z_impl_k_mutex_unlock+0x160>)
    e296:	492d      	ldr	r1, [pc, #180]	; (e34c <z_impl_k_mutex_unlock+0x164>)
    e298:	4824      	ldr	r0, [pc, #144]	; (e32c <z_impl_k_mutex_unlock+0x144>)
    e29a:	f002 fd9f 	bl	10ddc <printk>
    e29e:	4929      	ldr	r1, [pc, #164]	; (e344 <z_impl_k_mutex_unlock+0x15c>)
    e2a0:	482b      	ldr	r0, [pc, #172]	; (e350 <z_impl_k_mutex_unlock+0x168>)
    e2a2:	f002 fd9b 	bl	10ddc <printk>
    e2a6:	215c      	movs	r1, #92	; 0x5c
    e2a8:	4827      	ldr	r0, [pc, #156]	; (e348 <z_impl_k_mutex_unlock+0x160>)
    e2aa:	f003 f82d 	bl	11308 <assert_post_action>
	z_spin_lock_set_owner(l);
    e2ae:	4825      	ldr	r0, [pc, #148]	; (e344 <z_impl_k_mutex_unlock+0x15c>)
    e2b0:	f001 fd40 	bl	fd34 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    e2b4:	68a0      	ldr	r0, [r4, #8]
    e2b6:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
    e2b8:	f990 300e 	ldrsb.w	r3, [r0, #14]
    e2bc:	4299      	cmp	r1, r3
    e2be:	d001      	beq.n	e2c4 <z_impl_k_mutex_unlock+0xdc>
		return z_set_prio(mutex->owner, new_prio);
    e2c0:	f001 f854 	bl	f36c <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    e2c4:	4620      	mov	r0, r4
    e2c6:	f001 f8e1 	bl	f48c <z_unpend_first_thread>
	mutex->owner = new_owner;
    e2ca:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    e2cc:	b158      	cbz	r0, e2e6 <z_impl_k_mutex_unlock+0xfe>
		mutex->owner_orig_prio = new_owner->base.prio;
    e2ce:	f990 200e 	ldrsb.w	r2, [r0, #14]
    e2d2:	6122      	str	r2, [r4, #16]
    e2d4:	2200      	movs	r2, #0
    e2d6:	6702      	str	r2, [r0, #112]	; 0x70
		z_ready_thread(new_owner);
    e2d8:	f000 fc50 	bl	eb7c <z_ready_thread>
		z_reschedule(&lock, key);
    e2dc:	4629      	mov	r1, r5
    e2de:	4819      	ldr	r0, [pc, #100]	; (e344 <z_impl_k_mutex_unlock+0x15c>)
    e2e0:	f000 fa2a 	bl	e738 <z_reschedule>
    e2e4:	e7c5      	b.n	e272 <z_impl_k_mutex_unlock+0x8a>
		mutex->lock_count = 0U;
    e2e6:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e2e8:	4816      	ldr	r0, [pc, #88]	; (e344 <z_impl_k_mutex_unlock+0x15c>)
    e2ea:	f001 fd15 	bl	fd18 <z_spin_unlock_valid>
    e2ee:	b968      	cbnz	r0, e30c <z_impl_k_mutex_unlock+0x124>
    e2f0:	2384      	movs	r3, #132	; 0x84
    e2f2:	4a15      	ldr	r2, [pc, #84]	; (e348 <z_impl_k_mutex_unlock+0x160>)
    e2f4:	4917      	ldr	r1, [pc, #92]	; (e354 <z_impl_k_mutex_unlock+0x16c>)
    e2f6:	480d      	ldr	r0, [pc, #52]	; (e32c <z_impl_k_mutex_unlock+0x144>)
    e2f8:	f002 fd70 	bl	10ddc <printk>
    e2fc:	4911      	ldr	r1, [pc, #68]	; (e344 <z_impl_k_mutex_unlock+0x15c>)
    e2fe:	4816      	ldr	r0, [pc, #88]	; (e358 <z_impl_k_mutex_unlock+0x170>)
    e300:	f002 fd6c 	bl	10ddc <printk>
    e304:	2184      	movs	r1, #132	; 0x84
    e306:	4810      	ldr	r0, [pc, #64]	; (e348 <z_impl_k_mutex_unlock+0x160>)
    e308:	f002 fffe 	bl	11308 <assert_post_action>
	__asm__ volatile(
    e30c:	f385 8811 	msr	BASEPRI, r5
    e310:	f3bf 8f6f 	isb	sy
    e314:	e7ad      	b.n	e272 <z_impl_k_mutex_unlock+0x8a>
		return -EINVAL;
    e316:	f06f 0015 	mvn.w	r0, #21
    e31a:	e7ad      	b.n	e278 <z_impl_k_mutex_unlock+0x90>
		return -EPERM;
    e31c:	f04f 30ff 	mov.w	r0, #4294967295
    e320:	e7aa      	b.n	e278 <z_impl_k_mutex_unlock+0x90>
    e322:	bf00      	nop
    e324:	20001e10 	.word	0x20001e10
    e328:	00019dd2 	.word	0x00019dd2
    e32c:	00016493 	.word	0x00016493
    e330:	00019db0 	.word	0x00019db0
    e334:	00019e14 	.word	0x00019e14
    e338:	00019de9 	.word	0x00019de9
    e33c:	0001919c 	.word	0x0001919c
    e340:	00019e26 	.word	0x00019e26
    e344:	20001e0c 	.word	0x20001e0c
    e348:	0001691e 	.word	0x0001691e
    e34c:	00016944 	.word	0x00016944
    e350:	00016959 	.word	0x00016959
    e354:	00016971 	.word	0x00016971
    e358:	00016988 	.word	0x00016988

0000e35c <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
    e35c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e360:	4604      	mov	r4, r0
    e362:	460e      	mov	r6, r1
    e364:	4690      	mov	r8, r2
    e366:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    e368:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    e36c:	f04f 0320 	mov.w	r3, #32
    e370:	f3ef 8711 	mrs	r7, BASEPRI
    e374:	f383 8811 	msr	BASEPRI, r3
    e378:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e37c:	4628      	mov	r0, r5
    e37e:	f001 fcbd 	bl	fcfc <z_spin_lock_valid>
    e382:	b968      	cbnz	r0, e3a0 <queue_insert+0x44>
    e384:	235c      	movs	r3, #92	; 0x5c
    e386:	4a39      	ldr	r2, [pc, #228]	; (e46c <queue_insert+0x110>)
    e388:	4939      	ldr	r1, [pc, #228]	; (e470 <queue_insert+0x114>)
    e38a:	483a      	ldr	r0, [pc, #232]	; (e474 <queue_insert+0x118>)
    e38c:	f002 fd26 	bl	10ddc <printk>
    e390:	4629      	mov	r1, r5
    e392:	4839      	ldr	r0, [pc, #228]	; (e478 <queue_insert+0x11c>)
    e394:	f002 fd22 	bl	10ddc <printk>
    e398:	215c      	movs	r1, #92	; 0x5c
    e39a:	4834      	ldr	r0, [pc, #208]	; (e46c <queue_insert+0x110>)
    e39c:	f002 ffb4 	bl	11308 <assert_post_action>
	z_spin_lock_set_owner(l);
    e3a0:	4628      	mov	r0, r5
    e3a2:	f001 fcc7 	bl	fd34 <z_spin_lock_set_owner>
	struct k_thread *first_pending_thread;

	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
    e3a6:	f104 000c 	add.w	r0, r4, #12
    e3aa:	f001 f86f 	bl	f48c <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
    e3ae:	b158      	cbz	r0, e3c8 <queue_insert+0x6c>
    e3b0:	2400      	movs	r4, #0
    e3b2:	f8c0 8014 	str.w	r8, [r0, #20]
    e3b6:	6704      	str	r4, [r0, #112]	; 0x70
	z_ready_thread(thread);
    e3b8:	f000 fbe0 	bl	eb7c <z_ready_thread>
		sys_sfnode_init(data, 0x0);
	}

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
    e3bc:	4628      	mov	r0, r5
    e3be:	4639      	mov	r1, r7
    e3c0:	f000 f9ba 	bl	e738 <z_reschedule>
	return 0;
    e3c4:	2000      	movs	r0, #0
    e3c6:	e01e      	b.n	e406 <queue_insert+0xaa>
	if (alloc) {
    e3c8:	f1b9 0f00 	cmp.w	r9, #0
    e3cc:	d02d      	beq.n	e42a <queue_insert+0xce>
		anode = z_thread_malloc(sizeof(*anode));
    e3ce:	2008      	movs	r0, #8
    e3d0:	f7ff fe10 	bl	dff4 <z_thread_malloc>
		if (anode == NULL) {
    e3d4:	b9c8      	cbnz	r0, e40a <queue_insert+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e3d6:	4628      	mov	r0, r5
    e3d8:	f001 fc9e 	bl	fd18 <z_spin_unlock_valid>
    e3dc:	b968      	cbnz	r0, e3fa <queue_insert+0x9e>
    e3de:	2384      	movs	r3, #132	; 0x84
    e3e0:	4a22      	ldr	r2, [pc, #136]	; (e46c <queue_insert+0x110>)
    e3e2:	4926      	ldr	r1, [pc, #152]	; (e47c <queue_insert+0x120>)
    e3e4:	4823      	ldr	r0, [pc, #140]	; (e474 <queue_insert+0x118>)
    e3e6:	f002 fcf9 	bl	10ddc <printk>
    e3ea:	4629      	mov	r1, r5
    e3ec:	4824      	ldr	r0, [pc, #144]	; (e480 <queue_insert+0x124>)
    e3ee:	f002 fcf5 	bl	10ddc <printk>
    e3f2:	2184      	movs	r1, #132	; 0x84
    e3f4:	481d      	ldr	r0, [pc, #116]	; (e46c <queue_insert+0x110>)
    e3f6:	f002 ff87 	bl	11308 <assert_post_action>
	__asm__ volatile(
    e3fa:	f387 8811 	msr	BASEPRI, r7
    e3fe:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
    e402:	f06f 000b 	mvn.w	r0, #11
}
    e406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
    e40a:	2301      	movs	r3, #1
		anode->data = data;
    e40c:	f8c0 8004 	str.w	r8, [r0, #4]
    e410:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
    e412:	6803      	ldr	r3, [r0, #0]
    e414:	f003 0303 	and.w	r3, r3, #3
    e418:	b95e      	cbnz	r6, e432 <queue_insert+0xd6>
	parent->next_and_flags = cur_flags | (unative_t)child;
    e41a:	6822      	ldr	r2, [r4, #0]
    e41c:	4313      	orrs	r3, r2
    e41e:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    e420:	6863      	ldr	r3, [r4, #4]
	list->head = node;
    e422:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    e424:	b973      	cbnz	r3, e444 <queue_insert+0xe8>
	list->tail = node;
    e426:	6060      	str	r0, [r4, #4]
}
    e428:	e00c      	b.n	e444 <queue_insert+0xe8>
}
    e42a:	4640      	mov	r0, r8
	node->next_and_flags = flags;
    e42c:	f8c8 9000 	str.w	r9, [r8]
}
    e430:	e7ef      	b.n	e412 <queue_insert+0xb6>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    e432:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    e434:	f032 0203 	bics.w	r2, r2, #3
    e438:	d110      	bne.n	e45c <queue_insert+0x100>
Z_GENLIST_APPEND(sflist, sfnode)
    e43a:	6862      	ldr	r2, [r4, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
    e43c:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
    e43e:	b93a      	cbnz	r2, e450 <queue_insert+0xf4>
	list->head = node;
    e440:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
    e444:	2104      	movs	r1, #4
    e446:	f104 0014 	add.w	r0, r4, #20
    e44a:	f006 ff04 	bl	15256 <z_handle_obj_poll_events>
    e44e:	e7b5      	b.n	e3bc <queue_insert+0x60>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    e450:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    e452:	f003 0303 	and.w	r3, r3, #3
    e456:	4303      	orrs	r3, r0
    e458:	6013      	str	r3, [r2, #0]
    e45a:	e7e4      	b.n	e426 <queue_insert+0xca>
    e45c:	4313      	orrs	r3, r2
    e45e:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    e460:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    e462:	f003 0303 	and.w	r3, r3, #3
    e466:	4303      	orrs	r3, r0
    e468:	6033      	str	r3, [r6, #0]
}
    e46a:	e7eb      	b.n	e444 <queue_insert+0xe8>
    e46c:	0001691e 	.word	0x0001691e
    e470:	00016944 	.word	0x00016944
    e474:	00016493 	.word	0x00016493
    e478:	00016959 	.word	0x00016959
    e47c:	00016971 	.word	0x00016971
    e480:	00016988 	.word	0x00016988

0000e484 <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
    e484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e488:	4605      	mov	r5, r0
    e48a:	4617      	mov	r7, r2
	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
    e48c:	460c      	mov	r4, r1
    e48e:	2900      	cmp	r1, #0
    e490:	d04a      	beq.n	e528 <k_queue_append_list+0xa4>
    e492:	2a00      	cmp	r2, #0
    e494:	d048      	beq.n	e528 <k_queue_append_list+0xa4>
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    e496:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    e49a:	f04f 0320 	mov.w	r3, #32
    e49e:	f3ef 8911 	mrs	r9, BASEPRI
    e4a2:	f383 8811 	msr	BASEPRI, r3
    e4a6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e4aa:	4630      	mov	r0, r6
    e4ac:	f001 fc26 	bl	fcfc <z_spin_lock_valid>
    e4b0:	b968      	cbnz	r0, e4ce <k_queue_append_list+0x4a>
    e4b2:	235c      	movs	r3, #92	; 0x5c
    e4b4:	4a1e      	ldr	r2, [pc, #120]	; (e530 <k_queue_append_list+0xac>)
    e4b6:	491f      	ldr	r1, [pc, #124]	; (e534 <k_queue_append_list+0xb0>)
    e4b8:	481f      	ldr	r0, [pc, #124]	; (e538 <k_queue_append_list+0xb4>)
    e4ba:	f002 fc8f 	bl	10ddc <printk>
    e4be:	4631      	mov	r1, r6
    e4c0:	481e      	ldr	r0, [pc, #120]	; (e53c <k_queue_append_list+0xb8>)
    e4c2:	f002 fc8b 	bl	10ddc <printk>
    e4c6:	215c      	movs	r1, #92	; 0x5c
    e4c8:	4819      	ldr	r0, [pc, #100]	; (e530 <k_queue_append_list+0xac>)
    e4ca:	f002 ff1d 	bl	11308 <assert_post_action>
	z_spin_lock_set_owner(l);
    e4ce:	4630      	mov	r0, r6
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
    e4d0:	f105 080c 	add.w	r8, r5, #12
    e4d4:	f001 fc2e 	bl	fd34 <z_spin_lock_set_owner>
    e4d8:	4640      	mov	r0, r8
    e4da:	f000 ffd7 	bl	f48c <z_unpend_first_thread>
    e4de:	f04f 0a00 	mov.w	sl, #0
	}

	while ((head != NULL) && (thread != NULL)) {
    e4e2:	b920      	cbnz	r0, e4ee <k_queue_append_list+0x6a>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
    e4e4:	686b      	ldr	r3, [r5, #4]
    e4e6:	b9cb      	cbnz	r3, e51c <k_queue_append_list+0x98>
	list->head = node;
    e4e8:	602c      	str	r4, [r5, #0]
	list->tail = node;
    e4ea:	606f      	str	r7, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
    e4ec:	e00a      	b.n	e504 <k_queue_append_list+0x80>
    e4ee:	6144      	str	r4, [r0, #20]
    e4f0:	f8c0 a070 	str.w	sl, [r0, #112]	; 0x70
	z_ready_thread(thread);
    e4f4:	f000 fb42 	bl	eb7c <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
    e4f8:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
    e4fa:	4640      	mov	r0, r8
    e4fc:	f000 ffc6 	bl	f48c <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
    e500:	2c00      	cmp	r4, #0
    e502:	d1ee      	bne.n	e4e2 <k_queue_append_list+0x5e>
	z_handle_obj_poll_events(&queue->poll_events, state);
    e504:	2104      	movs	r1, #4
    e506:	f105 0014 	add.w	r0, r5, #20
    e50a:	f006 fea4 	bl	15256 <z_handle_obj_poll_events>
	if (head != NULL) {
		sys_sflist_append_list(&queue->data_q, head, tail);
	}

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
    e50e:	4630      	mov	r0, r6
    e510:	4649      	mov	r1, r9
    e512:	f000 f911 	bl	e738 <z_reschedule>
	return 0;
    e516:	2000      	movs	r0, #0
}
    e518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    e51c:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    e51e:	f001 0103 	and.w	r1, r1, #3
    e522:	430c      	orrs	r4, r1
    e524:	601c      	str	r4, [r3, #0]
}
    e526:	e7e0      	b.n	e4ea <k_queue_append_list+0x66>
		return -EINVAL;
    e528:	f06f 0015 	mvn.w	r0, #21
    e52c:	e7f4      	b.n	e518 <k_queue_append_list+0x94>
    e52e:	bf00      	nop
    e530:	0001691e 	.word	0x0001691e
    e534:	00016944 	.word	0x00016944
    e538:	00016493 	.word	0x00016493
    e53c:	00016959 	.word	0x00016959

0000e540 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    e540:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    e544:	4606      	mov	r6, r0
    e546:	4690      	mov	r8, r2
    e548:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    e54a:	f100 0508 	add.w	r5, r0, #8
    e54e:	f04f 0320 	mov.w	r3, #32
    e552:	f3ef 8711 	mrs	r7, BASEPRI
    e556:	f383 8811 	msr	BASEPRI, r3
    e55a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e55e:	4628      	mov	r0, r5
    e560:	f001 fbcc 	bl	fcfc <z_spin_lock_valid>
    e564:	b968      	cbnz	r0, e582 <z_impl_k_queue_get+0x42>
    e566:	235c      	movs	r3, #92	; 0x5c
    e568:	4a25      	ldr	r2, [pc, #148]	; (e600 <z_impl_k_queue_get+0xc0>)
    e56a:	4926      	ldr	r1, [pc, #152]	; (e604 <z_impl_k_queue_get+0xc4>)
    e56c:	4826      	ldr	r0, [pc, #152]	; (e608 <z_impl_k_queue_get+0xc8>)
    e56e:	f002 fc35 	bl	10ddc <printk>
    e572:	4629      	mov	r1, r5
    e574:	4825      	ldr	r0, [pc, #148]	; (e60c <z_impl_k_queue_get+0xcc>)
    e576:	f002 fc31 	bl	10ddc <printk>
    e57a:	215c      	movs	r1, #92	; 0x5c
    e57c:	4820      	ldr	r0, [pc, #128]	; (e600 <z_impl_k_queue_get+0xc0>)
    e57e:	f002 fec3 	bl	11308 <assert_post_action>
	z_spin_lock_set_owner(l);
    e582:	4628      	mov	r0, r5
    e584:	f001 fbd6 	bl	fd34 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
    e588:	6834      	ldr	r4, [r6, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    e58a:	b33c      	cbz	r4, e5dc <z_impl_k_queue_get+0x9c>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    e58c:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    e58e:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    e590:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    e594:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    e596:	4620      	mov	r0, r4
    e598:	f04f 0101 	mov.w	r1, #1
	list->head = node;
    e59c:	6033      	str	r3, [r6, #0]
	list->tail = node;
    e59e:	bf08      	it	eq
    e5a0:	6073      	streq	r3, [r6, #4]
    e5a2:	f006 fd07 	bl	14fb4 <z_queue_node_peek>
    e5a6:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e5a8:	4628      	mov	r0, r5
    e5aa:	f001 fbb5 	bl	fd18 <z_spin_unlock_valid>
    e5ae:	b968      	cbnz	r0, e5cc <z_impl_k_queue_get+0x8c>
    e5b0:	2384      	movs	r3, #132	; 0x84
    e5b2:	4a13      	ldr	r2, [pc, #76]	; (e600 <z_impl_k_queue_get+0xc0>)
    e5b4:	4916      	ldr	r1, [pc, #88]	; (e610 <z_impl_k_queue_get+0xd0>)
    e5b6:	4814      	ldr	r0, [pc, #80]	; (e608 <z_impl_k_queue_get+0xc8>)
    e5b8:	f002 fc10 	bl	10ddc <printk>
    e5bc:	4629      	mov	r1, r5
    e5be:	4815      	ldr	r0, [pc, #84]	; (e614 <z_impl_k_queue_get+0xd4>)
    e5c0:	f002 fc0c 	bl	10ddc <printk>
    e5c4:	2184      	movs	r1, #132	; 0x84
    e5c6:	480e      	ldr	r0, [pc, #56]	; (e600 <z_impl_k_queue_get+0xc0>)
    e5c8:	f002 fe9e 	bl	11308 <assert_post_action>
	__asm__ volatile(
    e5cc:	f387 8811 	msr	BASEPRI, r7
    e5d0:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    e5d4:	4620      	mov	r0, r4
    e5d6:	b003      	add	sp, #12
    e5d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    e5dc:	ea58 0309 	orrs.w	r3, r8, r9
    e5e0:	d0e2      	beq.n	e5a8 <z_impl_k_queue_get+0x68>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    e5e2:	4639      	mov	r1, r7
    e5e4:	4628      	mov	r0, r5
    e5e6:	e9cd 8900 	strd	r8, r9, [sp]
    e5ea:	f106 020c 	add.w	r2, r6, #12
    e5ee:	f000 fe8d 	bl	f30c <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    e5f2:	2800      	cmp	r0, #0
    e5f4:	d1ee      	bne.n	e5d4 <z_impl_k_queue_get+0x94>
    e5f6:	4b08      	ldr	r3, [pc, #32]	; (e618 <z_impl_k_queue_get+0xd8>)
    e5f8:	689b      	ldr	r3, [r3, #8]
    e5fa:	695c      	ldr	r4, [r3, #20]
    e5fc:	e7ea      	b.n	e5d4 <z_impl_k_queue_get+0x94>
    e5fe:	bf00      	nop
    e600:	0001691e 	.word	0x0001691e
    e604:	00016944 	.word	0x00016944
    e608:	00016493 	.word	0x00016493
    e60c:	00016959 	.word	0x00016959
    e610:	00016971 	.word	0x00016971
    e614:	00016988 	.word	0x00016988
    e618:	20001e10 	.word	0x20001e10

0000e61c <pended_on.isra.0>:
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
    e61c:	6803      	ldr	r3, [r0, #0]
static _wait_q_t *pended_on(struct k_thread *thread)
    e61e:	b510      	push	{r4, lr}
    e620:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    e622:	b95b      	cbnz	r3, e63c <pended_on.isra.0+0x20>
    e624:	4906      	ldr	r1, [pc, #24]	; (e640 <pended_on.isra.0+0x24>)
    e626:	4807      	ldr	r0, [pc, #28]	; (e644 <pended_on.isra.0+0x28>)
    e628:	f240 13d9 	movw	r3, #473	; 0x1d9
    e62c:	4a06      	ldr	r2, [pc, #24]	; (e648 <pended_on.isra.0+0x2c>)
    e62e:	f002 fbd5 	bl	10ddc <printk>
    e632:	f240 11d9 	movw	r1, #473	; 0x1d9
    e636:	4804      	ldr	r0, [pc, #16]	; (e648 <pended_on.isra.0+0x2c>)
    e638:	f002 fe66 	bl	11308 <assert_post_action>

	return thread->base.pended_on;
}
    e63c:	6820      	ldr	r0, [r4, #0]
    e63e:	bd10      	pop	{r4, pc}
    e640:	00019e78 	.word	0x00019e78
    e644:	00016493 	.word	0x00016493
    e648:	00019e56 	.word	0x00019e56

0000e64c <z_reset_time_slice>:
{
    e64c:	b510      	push	{r4, lr}
	if (slice_time != 0) {
    e64e:	4c08      	ldr	r4, [pc, #32]	; (e670 <z_reset_time_slice+0x24>)
    e650:	6823      	ldr	r3, [r4, #0]
    e652:	b15b      	cbz	r3, e66c <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    e654:	f7f4 f8f4 	bl	2840 <z_clock_elapsed>
    e658:	4603      	mov	r3, r0
    e65a:	6820      	ldr	r0, [r4, #0]
    e65c:	4a05      	ldr	r2, [pc, #20]	; (e674 <z_reset_time_slice+0x28>)
    e65e:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
    e660:	2100      	movs	r1, #0
}
    e662:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    e666:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    e668:	f001 be1a 	b.w	102a0 <z_set_timeout_expiry>
}
    e66c:	bd10      	pop	{r4, pc}
    e66e:	bf00      	nop
    e670:	20001e4c 	.word	0x20001e4c
    e674:	20001e10 	.word	0x20001e10

0000e678 <k_sched_time_slice_set>:
{
    e678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e67a:	4605      	mov	r5, r0
    e67c:	460c      	mov	r4, r1
	__asm__ volatile(
    e67e:	f04f 0320 	mov.w	r3, #32
    e682:	f3ef 8611 	mrs	r6, BASEPRI
    e686:	f383 8811 	msr	BASEPRI, r3
    e68a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e68e:	4820      	ldr	r0, [pc, #128]	; (e710 <k_sched_time_slice_set+0x98>)
    e690:	f001 fb34 	bl	fcfc <z_spin_lock_valid>
    e694:	b968      	cbnz	r0, e6b2 <k_sched_time_slice_set+0x3a>
    e696:	235c      	movs	r3, #92	; 0x5c
    e698:	4a1e      	ldr	r2, [pc, #120]	; (e714 <k_sched_time_slice_set+0x9c>)
    e69a:	491f      	ldr	r1, [pc, #124]	; (e718 <k_sched_time_slice_set+0xa0>)
    e69c:	481f      	ldr	r0, [pc, #124]	; (e71c <k_sched_time_slice_set+0xa4>)
    e69e:	f002 fb9d 	bl	10ddc <printk>
    e6a2:	491b      	ldr	r1, [pc, #108]	; (e710 <k_sched_time_slice_set+0x98>)
    e6a4:	481e      	ldr	r0, [pc, #120]	; (e720 <k_sched_time_slice_set+0xa8>)
    e6a6:	f002 fb99 	bl	10ddc <printk>
    e6aa:	215c      	movs	r1, #92	; 0x5c
    e6ac:	4819      	ldr	r0, [pc, #100]	; (e714 <k_sched_time_slice_set+0x9c>)
    e6ae:	f002 fe2b 	bl	11308 <assert_post_action>
	z_spin_lock_set_owner(l);
    e6b2:	4817      	ldr	r0, [pc, #92]	; (e710 <k_sched_time_slice_set+0x98>)
    e6b4:	f001 fb3e 	bl	fd34 <z_spin_lock_set_owner>
			return (u32_t)((t * to_hz + off) / from_hz);
    e6b8:	f44f 4700 	mov.w	r7, #32768	; 0x8000
		_current_cpu->slice_ticks = 0;
    e6bc:	2200      	movs	r2, #0
    e6be:	f240 30e7 	movw	r0, #999	; 0x3e7
    e6c2:	2100      	movs	r1, #0
    e6c4:	4b17      	ldr	r3, [pc, #92]	; (e724 <k_sched_time_slice_set+0xac>)
    e6c6:	fbe7 0105 	umlal	r0, r1, r7, r5
    e6ca:	611a      	str	r2, [r3, #16]
    e6cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e6d0:	2300      	movs	r3, #0
    e6d2:	f7f1 fd41 	bl	158 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    e6d6:	4b14      	ldr	r3, [pc, #80]	; (e728 <k_sched_time_slice_set+0xb0>)
    e6d8:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    e6da:	4b14      	ldr	r3, [pc, #80]	; (e72c <k_sched_time_slice_set+0xb4>)
    e6dc:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
    e6de:	f7ff ffb5 	bl	e64c <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e6e2:	480b      	ldr	r0, [pc, #44]	; (e710 <k_sched_time_slice_set+0x98>)
    e6e4:	f001 fb18 	bl	fd18 <z_spin_unlock_valid>
    e6e8:	b968      	cbnz	r0, e706 <k_sched_time_slice_set+0x8e>
    e6ea:	2384      	movs	r3, #132	; 0x84
    e6ec:	4a09      	ldr	r2, [pc, #36]	; (e714 <k_sched_time_slice_set+0x9c>)
    e6ee:	4910      	ldr	r1, [pc, #64]	; (e730 <k_sched_time_slice_set+0xb8>)
    e6f0:	480a      	ldr	r0, [pc, #40]	; (e71c <k_sched_time_slice_set+0xa4>)
    e6f2:	f002 fb73 	bl	10ddc <printk>
    e6f6:	4906      	ldr	r1, [pc, #24]	; (e710 <k_sched_time_slice_set+0x98>)
    e6f8:	480e      	ldr	r0, [pc, #56]	; (e734 <k_sched_time_slice_set+0xbc>)
    e6fa:	f002 fb6f 	bl	10ddc <printk>
    e6fe:	2184      	movs	r1, #132	; 0x84
    e700:	4804      	ldr	r0, [pc, #16]	; (e714 <k_sched_time_slice_set+0x9c>)
    e702:	f002 fe01 	bl	11308 <assert_post_action>
	__asm__ volatile(
    e706:	f386 8811 	msr	BASEPRI, r6
    e70a:	f3bf 8f6f 	isb	sy
}
    e70e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e710:	20001e44 	.word	0x20001e44
    e714:	0001691e 	.word	0x0001691e
    e718:	00016944 	.word	0x00016944
    e71c:	00016493 	.word	0x00016493
    e720:	00016959 	.word	0x00016959
    e724:	20001e10 	.word	0x20001e10
    e728:	20001e4c 	.word	0x20001e4c
    e72c:	20001e48 	.word	0x20001e48
    e730:	00016971 	.word	0x00016971
    e734:	00016988 	.word	0x00016988

0000e738 <z_reschedule>:

	return arch_irq_unlocked(key) && !arch_is_in_isr();
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    e738:	b538      	push	{r3, r4, r5, lr}
    e73a:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    e73c:	460d      	mov	r5, r1
    e73e:	b9c1      	cbnz	r1, e772 <z_reschedule+0x3a>
    e740:	f3ef 8305 	mrs	r3, IPSR
    e744:	b9ab      	cbnz	r3, e772 <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e746:	f001 fae7 	bl	fd18 <z_spin_unlock_valid>
    e74a:	b968      	cbnz	r0, e768 <z_reschedule+0x30>
    e74c:	239b      	movs	r3, #155	; 0x9b
    e74e:	4a14      	ldr	r2, [pc, #80]	; (e7a0 <z_reschedule+0x68>)
    e750:	4914      	ldr	r1, [pc, #80]	; (e7a4 <z_reschedule+0x6c>)
    e752:	4815      	ldr	r0, [pc, #84]	; (e7a8 <z_reschedule+0x70>)
    e754:	f002 fb42 	bl	10ddc <printk>
    e758:	4621      	mov	r1, r4
    e75a:	4814      	ldr	r0, [pc, #80]	; (e7ac <z_reschedule+0x74>)
    e75c:	f002 fb3e 	bl	10ddc <printk>
    e760:	219b      	movs	r1, #155	; 0x9b
    e762:	480f      	ldr	r0, [pc, #60]	; (e7a0 <z_reschedule+0x68>)
    e764:	f002 fdd0 	bl	11308 <assert_post_action>
	if (resched(key.key)) {
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    e768:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
    e76c:	2000      	movs	r0, #0
    e76e:	f7f4 bacb 	b.w	2d08 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e772:	4620      	mov	r0, r4
    e774:	f001 fad0 	bl	fd18 <z_spin_unlock_valid>
    e778:	b968      	cbnz	r0, e796 <z_reschedule+0x5e>
    e77a:	2384      	movs	r3, #132	; 0x84
    e77c:	4a08      	ldr	r2, [pc, #32]	; (e7a0 <z_reschedule+0x68>)
    e77e:	4909      	ldr	r1, [pc, #36]	; (e7a4 <z_reschedule+0x6c>)
    e780:	4809      	ldr	r0, [pc, #36]	; (e7a8 <z_reschedule+0x70>)
    e782:	f002 fb2b 	bl	10ddc <printk>
    e786:	4621      	mov	r1, r4
    e788:	4808      	ldr	r0, [pc, #32]	; (e7ac <z_reschedule+0x74>)
    e78a:	f002 fb27 	bl	10ddc <printk>
    e78e:	2184      	movs	r1, #132	; 0x84
    e790:	4803      	ldr	r0, [pc, #12]	; (e7a0 <z_reschedule+0x68>)
    e792:	f002 fdb9 	bl	11308 <assert_post_action>
    e796:	f385 8811 	msr	BASEPRI, r5
    e79a:	f3bf 8f6f 	isb	sy
    e79e:	bd38      	pop	{r3, r4, r5, pc}
    e7a0:	0001691e 	.word	0x0001691e
    e7a4:	00016971 	.word	0x00016971
    e7a8:	00016493 	.word	0x00016493
    e7ac:	00016988 	.word	0x00016988

0000e7b0 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    e7b0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    e7b2:	f04f 0320 	mov.w	r3, #32
    e7b6:	f3ef 8511 	mrs	r5, BASEPRI
    e7ba:	f383 8811 	msr	BASEPRI, r3
    e7be:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e7c2:	482b      	ldr	r0, [pc, #172]	; (e870 <k_sched_lock+0xc0>)
    e7c4:	f001 fa9a 	bl	fcfc <z_spin_lock_valid>
    e7c8:	b968      	cbnz	r0, e7e6 <k_sched_lock+0x36>
    e7ca:	235c      	movs	r3, #92	; 0x5c
    e7cc:	4a29      	ldr	r2, [pc, #164]	; (e874 <k_sched_lock+0xc4>)
    e7ce:	492a      	ldr	r1, [pc, #168]	; (e878 <k_sched_lock+0xc8>)
    e7d0:	482a      	ldr	r0, [pc, #168]	; (e87c <k_sched_lock+0xcc>)
    e7d2:	f002 fb03 	bl	10ddc <printk>
    e7d6:	4926      	ldr	r1, [pc, #152]	; (e870 <k_sched_lock+0xc0>)
    e7d8:	4829      	ldr	r0, [pc, #164]	; (e880 <k_sched_lock+0xd0>)
    e7da:	f002 faff 	bl	10ddc <printk>
    e7de:	215c      	movs	r1, #92	; 0x5c
    e7e0:	4824      	ldr	r0, [pc, #144]	; (e874 <k_sched_lock+0xc4>)
    e7e2:	f002 fd91 	bl	11308 <assert_post_action>
	z_spin_lock_set_owner(l);
    e7e6:	4822      	ldr	r0, [pc, #136]	; (e870 <k_sched_lock+0xc0>)
    e7e8:	f001 faa4 	bl	fd34 <z_spin_lock_set_owner>
    e7ec:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    e7f0:	b173      	cbz	r3, e810 <k_sched_lock+0x60>
    e7f2:	4924      	ldr	r1, [pc, #144]	; (e884 <k_sched_lock+0xd4>)
    e7f4:	f240 130b 	movw	r3, #267	; 0x10b
    e7f8:	4a23      	ldr	r2, [pc, #140]	; (e888 <k_sched_lock+0xd8>)
    e7fa:	4820      	ldr	r0, [pc, #128]	; (e87c <k_sched_lock+0xcc>)
    e7fc:	f002 faee 	bl	10ddc <printk>
    e800:	4822      	ldr	r0, [pc, #136]	; (e88c <k_sched_lock+0xdc>)
    e802:	f002 faeb 	bl	10ddc <printk>
    e806:	f240 110b 	movw	r1, #267	; 0x10b
    e80a:	481f      	ldr	r0, [pc, #124]	; (e888 <k_sched_lock+0xd8>)
    e80c:	f002 fd7c 	bl	11308 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
    e810:	4c1f      	ldr	r4, [pc, #124]	; (e890 <k_sched_lock+0xe0>)
    e812:	68a2      	ldr	r2, [r4, #8]
    e814:	7bd2      	ldrb	r2, [r2, #15]
    e816:	2a01      	cmp	r2, #1
    e818:	d10e      	bne.n	e838 <k_sched_lock+0x88>
    e81a:	491e      	ldr	r1, [pc, #120]	; (e894 <k_sched_lock+0xe4>)
    e81c:	f44f 7386 	mov.w	r3, #268	; 0x10c
    e820:	4a19      	ldr	r2, [pc, #100]	; (e888 <k_sched_lock+0xd8>)
    e822:	4816      	ldr	r0, [pc, #88]	; (e87c <k_sched_lock+0xcc>)
    e824:	f002 fada 	bl	10ddc <printk>
    e828:	4818      	ldr	r0, [pc, #96]	; (e88c <k_sched_lock+0xdc>)
    e82a:	f002 fad7 	bl	10ddc <printk>
    e82e:	f44f 7186 	mov.w	r1, #268	; 0x10c
    e832:	4815      	ldr	r0, [pc, #84]	; (e888 <k_sched_lock+0xd8>)
    e834:	f002 fd68 	bl	11308 <assert_post_action>
	--_current->base.sched_locked;
    e838:	68a2      	ldr	r2, [r4, #8]
    e83a:	7bd3      	ldrb	r3, [r2, #15]
    e83c:	3b01      	subs	r3, #1
    e83e:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e840:	480b      	ldr	r0, [pc, #44]	; (e870 <k_sched_lock+0xc0>)
    e842:	f001 fa69 	bl	fd18 <z_spin_unlock_valid>
    e846:	b968      	cbnz	r0, e864 <k_sched_lock+0xb4>
    e848:	2384      	movs	r3, #132	; 0x84
    e84a:	4a0a      	ldr	r2, [pc, #40]	; (e874 <k_sched_lock+0xc4>)
    e84c:	4912      	ldr	r1, [pc, #72]	; (e898 <k_sched_lock+0xe8>)
    e84e:	480b      	ldr	r0, [pc, #44]	; (e87c <k_sched_lock+0xcc>)
    e850:	f002 fac4 	bl	10ddc <printk>
    e854:	4906      	ldr	r1, [pc, #24]	; (e870 <k_sched_lock+0xc0>)
    e856:	4811      	ldr	r0, [pc, #68]	; (e89c <k_sched_lock+0xec>)
    e858:	f002 fac0 	bl	10ddc <printk>
    e85c:	2184      	movs	r1, #132	; 0x84
    e85e:	4805      	ldr	r0, [pc, #20]	; (e874 <k_sched_lock+0xc4>)
    e860:	f002 fd52 	bl	11308 <assert_post_action>
	__asm__ volatile(
    e864:	f385 8811 	msr	BASEPRI, r5
    e868:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    e86c:	bd38      	pop	{r3, r4, r5, pc}
    e86e:	bf00      	nop
    e870:	20001e44 	.word	0x20001e44
    e874:	0001691e 	.word	0x0001691e
    e878:	00016944 	.word	0x00016944
    e87c:	00016493 	.word	0x00016493
    e880:	00016959 	.word	0x00016959
    e884:	00019e14 	.word	0x00019e14
    e888:	00019de9 	.word	0x00019de9
    e88c:	0001919c 	.word	0x0001919c
    e890:	20001e10 	.word	0x20001e10
    e894:	00019e26 	.word	0x00019e26
    e898:	00016971 	.word	0x00016971
    e89c:	00016988 	.word	0x00016988

0000e8a0 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    e8a0:	4b11      	ldr	r3, [pc, #68]	; (e8e8 <z_priq_dumb_remove+0x48>)
{
    e8a2:	b510      	push	{r4, lr}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    e8a4:	f103 0228 	add.w	r2, r3, #40	; 0x28
    e8a8:	4282      	cmp	r2, r0
{
    e8aa:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    e8ac:	d105      	bne.n	e8ba <z_priq_dumb_remove+0x1a>
    e8ae:	689b      	ldr	r3, [r3, #8]
    e8b0:	428b      	cmp	r3, r1
    e8b2:	d102      	bne.n	e8ba <z_priq_dumb_remove+0x1a>
    e8b4:	7b4b      	ldrb	r3, [r1, #13]
    e8b6:	06db      	lsls	r3, r3, #27
    e8b8:	d115      	bne.n	e8e6 <z_priq_dumb_remove+0x46>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    e8ba:	4b0c      	ldr	r3, [pc, #48]	; (e8ec <z_priq_dumb_remove+0x4c>)
    e8bc:	429c      	cmp	r4, r3
    e8be:	d10b      	bne.n	e8d8 <z_priq_dumb_remove+0x38>
    e8c0:	490b      	ldr	r1, [pc, #44]	; (e8f0 <z_priq_dumb_remove+0x50>)
    e8c2:	480c      	ldr	r0, [pc, #48]	; (e8f4 <z_priq_dumb_remove+0x54>)
    e8c4:	f240 336b 	movw	r3, #875	; 0x36b
    e8c8:	4a0b      	ldr	r2, [pc, #44]	; (e8f8 <z_priq_dumb_remove+0x58>)
    e8ca:	f002 fa87 	bl	10ddc <printk>
    e8ce:	f240 316b 	movw	r1, #875	; 0x36b
    e8d2:	4809      	ldr	r0, [pc, #36]	; (e8f8 <z_priq_dumb_remove+0x58>)
    e8d4:	f002 fd18 	bl	11308 <assert_post_action>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    e8d8:	e9d4 3200 	ldrd	r3, r2, [r4]
    e8dc:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    e8de:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    e8e0:	2300      	movs	r3, #0
	node->prev = NULL;
    e8e2:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    e8e6:	bd10      	pop	{r4, pc}
    e8e8:	20001e10 	.word	0x20001e10
    e8ec:	200013c0 	.word	0x200013c0
    e8f0:	00019e8f 	.word	0x00019e8f
    e8f4:	00016493 	.word	0x00016493
    e8f8:	00019e56 	.word	0x00019e56

0000e8fc <z_unpend_thread>:
{
    e8fc:	b538      	push	{r3, r4, r5, lr}
    e8fe:	4604      	mov	r4, r0
	__asm__ volatile(
    e900:	f04f 0320 	mov.w	r3, #32
    e904:	f3ef 8511 	mrs	r5, BASEPRI
    e908:	f383 8811 	msr	BASEPRI, r3
    e90c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e910:	481e      	ldr	r0, [pc, #120]	; (e98c <z_unpend_thread+0x90>)
    e912:	f001 f9f3 	bl	fcfc <z_spin_lock_valid>
    e916:	b968      	cbnz	r0, e934 <z_unpend_thread+0x38>
    e918:	235c      	movs	r3, #92	; 0x5c
    e91a:	4a1d      	ldr	r2, [pc, #116]	; (e990 <z_unpend_thread+0x94>)
    e91c:	491d      	ldr	r1, [pc, #116]	; (e994 <z_unpend_thread+0x98>)
    e91e:	481e      	ldr	r0, [pc, #120]	; (e998 <z_unpend_thread+0x9c>)
    e920:	f002 fa5c 	bl	10ddc <printk>
    e924:	4919      	ldr	r1, [pc, #100]	; (e98c <z_unpend_thread+0x90>)
    e926:	481d      	ldr	r0, [pc, #116]	; (e99c <z_unpend_thread+0xa0>)
    e928:	f002 fa58 	bl	10ddc <printk>
    e92c:	215c      	movs	r1, #92	; 0x5c
    e92e:	4818      	ldr	r0, [pc, #96]	; (e990 <z_unpend_thread+0x94>)
    e930:	f002 fcea 	bl	11308 <assert_post_action>
	z_spin_lock_set_owner(l);
    e934:	4815      	ldr	r0, [pc, #84]	; (e98c <z_unpend_thread+0x90>)
    e936:	f001 f9fd 	bl	fd34 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    e93a:	f104 0008 	add.w	r0, r4, #8
    e93e:	f7ff fe6d 	bl	e61c <pended_on.isra.0>
    e942:	4621      	mov	r1, r4
    e944:	f7ff ffac 	bl	e8a0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    e948:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e94a:	4810      	ldr	r0, [pc, #64]	; (e98c <z_unpend_thread+0x90>)
    e94c:	f023 0302 	bic.w	r3, r3, #2
    e950:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
    e952:	2300      	movs	r3, #0
    e954:	60a3      	str	r3, [r4, #8]
    e956:	f001 f9df 	bl	fd18 <z_spin_unlock_valid>
    e95a:	b968      	cbnz	r0, e978 <z_unpend_thread+0x7c>
    e95c:	2384      	movs	r3, #132	; 0x84
    e95e:	4a0c      	ldr	r2, [pc, #48]	; (e990 <z_unpend_thread+0x94>)
    e960:	490f      	ldr	r1, [pc, #60]	; (e9a0 <z_unpend_thread+0xa4>)
    e962:	480d      	ldr	r0, [pc, #52]	; (e998 <z_unpend_thread+0x9c>)
    e964:	f002 fa3a 	bl	10ddc <printk>
    e968:	4908      	ldr	r1, [pc, #32]	; (e98c <z_unpend_thread+0x90>)
    e96a:	480e      	ldr	r0, [pc, #56]	; (e9a4 <z_unpend_thread+0xa8>)
    e96c:	f002 fa36 	bl	10ddc <printk>
    e970:	2184      	movs	r1, #132	; 0x84
    e972:	4807      	ldr	r0, [pc, #28]	; (e990 <z_unpend_thread+0x94>)
    e974:	f002 fcc8 	bl	11308 <assert_post_action>
	__asm__ volatile(
    e978:	f385 8811 	msr	BASEPRI, r5
    e97c:	f3bf 8f6f 	isb	sy
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    e980:	f104 0018 	add.w	r0, r4, #24
}
    e984:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    e988:	f001 bbf4 	b.w	10174 <z_abort_timeout>
    e98c:	20001e44 	.word	0x20001e44
    e990:	0001691e 	.word	0x0001691e
    e994:	00016944 	.word	0x00016944
    e998:	00016493 	.word	0x00016493
    e99c:	00016959 	.word	0x00016959
    e9a0:	00016971 	.word	0x00016971
    e9a4:	00016988 	.word	0x00016988

0000e9a8 <update_cache>:
{
    e9a8:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    e9aa:	4c10      	ldr	r4, [pc, #64]	; (e9ec <update_cache+0x44>)
{
    e9ac:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    e9ae:	f104 0028 	add.w	r0, r4, #40	; 0x28
    e9b2:	f006 fb41 	bl	15038 <z_priq_dumb_best>
    e9b6:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
    e9b8:	68a3      	ldr	r3, [r4, #8]
    e9ba:	7b59      	ldrb	r1, [r3, #13]
    e9bc:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
    e9be:	bf44      	itt	mi
    e9c0:	f041 0108 	orrmi.w	r1, r1, #8
    e9c4:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
    e9c6:	b905      	cbnz	r5, e9ca <update_cache+0x22>
    e9c8:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
    e9ca:	b94e      	cbnz	r6, e9e0 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
    e9cc:	7b5a      	ldrb	r2, [r3, #13]
    e9ce:	06d2      	lsls	r2, r2, #27
    e9d0:	d106      	bne.n	e9e0 <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    e9d2:	69aa      	ldr	r2, [r5, #24]
    e9d4:	b922      	cbnz	r2, e9e0 <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
    e9d6:	89da      	ldrh	r2, [r3, #14]
    e9d8:	2a7f      	cmp	r2, #127	; 0x7f
    e9da:	d901      	bls.n	e9e0 <update_cache+0x38>
		_kernel.ready_q.cache = _current;
    e9dc:	6263      	str	r3, [r4, #36]	; 0x24
}
    e9de:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
    e9e0:	42ab      	cmp	r3, r5
    e9e2:	d001      	beq.n	e9e8 <update_cache+0x40>
			z_reset_time_slice();
    e9e4:	f7ff fe32 	bl	e64c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    e9e8:	6265      	str	r5, [r4, #36]	; 0x24
}
    e9ea:	e7f8      	b.n	e9de <update_cache+0x36>
    e9ec:	20001e10 	.word	0x20001e10

0000e9f0 <k_sched_unlock>:
{
    e9f0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    e9f2:	f04f 0320 	mov.w	r3, #32
    e9f6:	f3ef 8511 	mrs	r5, BASEPRI
    e9fa:	f383 8811 	msr	BASEPRI, r3
    e9fe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ea02:	482d      	ldr	r0, [pc, #180]	; (eab8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x58>)
    ea04:	f001 f97a 	bl	fcfc <z_spin_lock_valid>
    ea08:	b968      	cbnz	r0, ea26 <k_sched_unlock+0x36>
    ea0a:	235c      	movs	r3, #92	; 0x5c
    ea0c:	4a2b      	ldr	r2, [pc, #172]	; (eabc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5c>)
    ea0e:	492c      	ldr	r1, [pc, #176]	; (eac0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x60>)
    ea10:	482c      	ldr	r0, [pc, #176]	; (eac4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x64>)
    ea12:	f002 f9e3 	bl	10ddc <printk>
    ea16:	4928      	ldr	r1, [pc, #160]	; (eab8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x58>)
    ea18:	482b      	ldr	r0, [pc, #172]	; (eac8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x68>)
    ea1a:	f002 f9df 	bl	10ddc <printk>
    ea1e:	215c      	movs	r1, #92	; 0x5c
    ea20:	4826      	ldr	r0, [pc, #152]	; (eabc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5c>)
    ea22:	f002 fc71 	bl	11308 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0, "");
    ea26:	4c29      	ldr	r4, [pc, #164]	; (eacc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6c>)
	z_spin_lock_set_owner(l);
    ea28:	4823      	ldr	r0, [pc, #140]	; (eab8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x58>)
    ea2a:	f001 f983 	bl	fd34 <z_spin_lock_set_owner>
    ea2e:	68a2      	ldr	r2, [r4, #8]
    ea30:	7bd2      	ldrb	r2, [r2, #15]
    ea32:	b972      	cbnz	r2, ea52 <k_sched_unlock+0x62>
    ea34:	4926      	ldr	r1, [pc, #152]	; (ead0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x70>)
    ea36:	f240 330a 	movw	r3, #778	; 0x30a
    ea3a:	4a26      	ldr	r2, [pc, #152]	; (ead4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x74>)
    ea3c:	4821      	ldr	r0, [pc, #132]	; (eac4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x64>)
    ea3e:	f002 f9cd 	bl	10ddc <printk>
    ea42:	4825      	ldr	r0, [pc, #148]	; (ead8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x78>)
    ea44:	f002 f9ca 	bl	10ddc <printk>
    ea48:	f240 310a 	movw	r1, #778	; 0x30a
    ea4c:	4821      	ldr	r0, [pc, #132]	; (ead4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x74>)
    ea4e:	f002 fc5b 	bl	11308 <assert_post_action>
    ea52:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    ea56:	b173      	cbz	r3, ea76 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x16>
    ea58:	4920      	ldr	r1, [pc, #128]	; (eadc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7c>)
    ea5a:	f240 330b 	movw	r3, #779	; 0x30b
    ea5e:	4a1d      	ldr	r2, [pc, #116]	; (ead4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x74>)
    ea60:	4818      	ldr	r0, [pc, #96]	; (eac4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x64>)
    ea62:	f002 f9bb 	bl	10ddc <printk>
    ea66:	481c      	ldr	r0, [pc, #112]	; (ead8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x78>)
    ea68:	f002 f9b8 	bl	10ddc <printk>
    ea6c:	f240 310b 	movw	r1, #779	; 0x30b
    ea70:	4818      	ldr	r0, [pc, #96]	; (ead4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x74>)
    ea72:	f002 fc49 	bl	11308 <assert_post_action>
		++_current->base.sched_locked;
    ea76:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
    ea78:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    ea7a:	7bd3      	ldrb	r3, [r2, #15]
    ea7c:	3301      	adds	r3, #1
    ea7e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    ea80:	f7ff ff92 	bl	e9a8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ea84:	480c      	ldr	r0, [pc, #48]	; (eab8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x58>)
    ea86:	f001 f947 	bl	fd18 <z_spin_unlock_valid>
    ea8a:	b968      	cbnz	r0, eaa8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x48>
    ea8c:	2384      	movs	r3, #132	; 0x84
    ea8e:	4a0b      	ldr	r2, [pc, #44]	; (eabc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5c>)
    ea90:	4913      	ldr	r1, [pc, #76]	; (eae0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x80>)
    ea92:	480c      	ldr	r0, [pc, #48]	; (eac4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x64>)
    ea94:	f002 f9a2 	bl	10ddc <printk>
    ea98:	4907      	ldr	r1, [pc, #28]	; (eab8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x58>)
    ea9a:	4812      	ldr	r0, [pc, #72]	; (eae4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x84>)
    ea9c:	f002 f99e 	bl	10ddc <printk>
    eaa0:	2184      	movs	r1, #132	; 0x84
    eaa2:	4806      	ldr	r0, [pc, #24]	; (eabc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5c>)
    eaa4:	f002 fc30 	bl	11308 <assert_post_action>
	__asm__ volatile(
    eaa8:	f385 8811 	msr	BASEPRI, r5
    eaac:	f3bf 8f6f 	isb	sy
}
    eab0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    eab4:	f006 bab6 	b.w	15024 <z_reschedule_unlocked>
    eab8:	20001e44 	.word	0x20001e44
    eabc:	0001691e 	.word	0x0001691e
    eac0:	00016944 	.word	0x00016944
    eac4:	00016493 	.word	0x00016493
    eac8:	00016959 	.word	0x00016959
    eacc:	20001e10 	.word	0x20001e10
    ead0:	00019eb0 	.word	0x00019eb0
    ead4:	00019e56 	.word	0x00019e56
    ead8:	0001919c 	.word	0x0001919c
    eadc:	00019e14 	.word	0x00019e14
    eae0:	00016971 	.word	0x00016971
    eae4:	00016988 	.word	0x00016988

0000eae8 <ready_thread>:
{
    eae8:	b570      	push	{r4, r5, r6, lr}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    eaea:	7b43      	ldrb	r3, [r0, #13]
    eaec:	4604      	mov	r4, r0
    eaee:	06db      	lsls	r3, r3, #27
    eaf0:	d138      	bne.n	eb64 <ready_thread+0x7c>
	if (z_is_thread_ready(thread)) {
    eaf2:	6983      	ldr	r3, [r0, #24]
    eaf4:	2b00      	cmp	r3, #0
    eaf6:	d135      	bne.n	eb64 <ready_thread+0x7c>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    eaf8:	4b1b      	ldr	r3, [pc, #108]	; (eb68 <ready_thread+0x80>)
    eafa:	4298      	cmp	r0, r3
    eafc:	d10b      	bne.n	eb16 <ready_thread+0x2e>
    eafe:	491b      	ldr	r1, [pc, #108]	; (eb6c <ready_thread+0x84>)
    eb00:	481b      	ldr	r0, [pc, #108]	; (eb70 <ready_thread+0x88>)
    eb02:	f240 3355 	movw	r3, #853	; 0x355
    eb06:	4a1b      	ldr	r2, [pc, #108]	; (eb74 <ready_thread+0x8c>)
    eb08:	f002 f968 	bl	10ddc <printk>
    eb0c:	f240 3155 	movw	r1, #853	; 0x355
    eb10:	4818      	ldr	r0, [pc, #96]	; (eb74 <ready_thread+0x8c>)
    eb12:	f002 fbf9 	bl	11308 <assert_post_action>
	return list->head == list;
    eb16:	4a18      	ldr	r2, [pc, #96]	; (eb78 <ready_thread+0x90>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    eb18:	f102 0128 	add.w	r1, r2, #40	; 0x28
    eb1c:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
    eb20:	428b      	cmp	r3, r1
    eb22:	d019      	beq.n	eb58 <ready_thread+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    eb24:	b1c3      	cbz	r3, eb58 <ready_thread+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
    eb26:	f994 500e 	ldrsb.w	r5, [r4, #14]
    eb2a:	f993 600e 	ldrsb.w	r6, [r3, #14]
    eb2e:	42ae      	cmp	r6, r5
    eb30:	dd0d      	ble.n	eb4e <ready_thread+0x66>
	node->prev = successor->prev;
    eb32:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    eb34:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    eb38:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    eb3a:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
    eb3c:	7b63      	ldrb	r3, [r4, #13]
		update_cache(0);
    eb3e:	2000      	movs	r0, #0
    eb40:	f063 037f 	orn	r3, r3, #127	; 0x7f
    eb44:	7363      	strb	r3, [r4, #13]
}
    eb46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    eb4a:	f7ff bf2d 	b.w	e9a8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    eb4e:	4298      	cmp	r0, r3
    eb50:	d002      	beq.n	eb58 <ready_thread+0x70>
    eb52:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    eb54:	2b00      	cmp	r3, #0
    eb56:	d1e8      	bne.n	eb2a <ready_thread+0x42>
	node->prev = list->tail;
    eb58:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
    eb5c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    eb5e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    eb60:	62d4      	str	r4, [r2, #44]	; 0x2c
}
    eb62:	e7eb      	b.n	eb3c <ready_thread+0x54>
}
    eb64:	bd70      	pop	{r4, r5, r6, pc}
    eb66:	bf00      	nop
    eb68:	200013c0 	.word	0x200013c0
    eb6c:	00019e8f 	.word	0x00019e8f
    eb70:	00016493 	.word	0x00016493
    eb74:	00019e56 	.word	0x00019e56
    eb78:	20001e10 	.word	0x20001e10

0000eb7c <z_ready_thread>:
{
    eb7c:	b538      	push	{r3, r4, r5, lr}
    eb7e:	4604      	mov	r4, r0
	__asm__ volatile(
    eb80:	f04f 0320 	mov.w	r3, #32
    eb84:	f3ef 8511 	mrs	r5, BASEPRI
    eb88:	f383 8811 	msr	BASEPRI, r3
    eb8c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    eb90:	4817      	ldr	r0, [pc, #92]	; (ebf0 <z_ready_thread+0x74>)
    eb92:	f001 f8b3 	bl	fcfc <z_spin_lock_valid>
    eb96:	b968      	cbnz	r0, ebb4 <z_ready_thread+0x38>
    eb98:	235c      	movs	r3, #92	; 0x5c
    eb9a:	4a16      	ldr	r2, [pc, #88]	; (ebf4 <z_ready_thread+0x78>)
    eb9c:	4916      	ldr	r1, [pc, #88]	; (ebf8 <z_ready_thread+0x7c>)
    eb9e:	4817      	ldr	r0, [pc, #92]	; (ebfc <z_ready_thread+0x80>)
    eba0:	f002 f91c 	bl	10ddc <printk>
    eba4:	4912      	ldr	r1, [pc, #72]	; (ebf0 <z_ready_thread+0x74>)
    eba6:	4816      	ldr	r0, [pc, #88]	; (ec00 <z_ready_thread+0x84>)
    eba8:	f002 f918 	bl	10ddc <printk>
    ebac:	215c      	movs	r1, #92	; 0x5c
    ebae:	4811      	ldr	r0, [pc, #68]	; (ebf4 <z_ready_thread+0x78>)
    ebb0:	f002 fbaa 	bl	11308 <assert_post_action>
	z_spin_lock_set_owner(l);
    ebb4:	480e      	ldr	r0, [pc, #56]	; (ebf0 <z_ready_thread+0x74>)
    ebb6:	f001 f8bd 	bl	fd34 <z_spin_lock_set_owner>
		ready_thread(thread);
    ebba:	4620      	mov	r0, r4
    ebbc:	f7ff ff94 	bl	eae8 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ebc0:	480b      	ldr	r0, [pc, #44]	; (ebf0 <z_ready_thread+0x74>)
    ebc2:	f001 f8a9 	bl	fd18 <z_spin_unlock_valid>
    ebc6:	b968      	cbnz	r0, ebe4 <z_ready_thread+0x68>
    ebc8:	2384      	movs	r3, #132	; 0x84
    ebca:	4a0a      	ldr	r2, [pc, #40]	; (ebf4 <z_ready_thread+0x78>)
    ebcc:	490d      	ldr	r1, [pc, #52]	; (ec04 <z_ready_thread+0x88>)
    ebce:	480b      	ldr	r0, [pc, #44]	; (ebfc <z_ready_thread+0x80>)
    ebd0:	f002 f904 	bl	10ddc <printk>
    ebd4:	4906      	ldr	r1, [pc, #24]	; (ebf0 <z_ready_thread+0x74>)
    ebd6:	480c      	ldr	r0, [pc, #48]	; (ec08 <z_ready_thread+0x8c>)
    ebd8:	f002 f900 	bl	10ddc <printk>
    ebdc:	2184      	movs	r1, #132	; 0x84
    ebde:	4805      	ldr	r0, [pc, #20]	; (ebf4 <z_ready_thread+0x78>)
    ebe0:	f002 fb92 	bl	11308 <assert_post_action>
	__asm__ volatile(
    ebe4:	f385 8811 	msr	BASEPRI, r5
    ebe8:	f3bf 8f6f 	isb	sy
}
    ebec:	bd38      	pop	{r3, r4, r5, pc}
    ebee:	bf00      	nop
    ebf0:	20001e44 	.word	0x20001e44
    ebf4:	0001691e 	.word	0x0001691e
    ebf8:	00016944 	.word	0x00016944
    ebfc:	00016493 	.word	0x00016493
    ec00:	00016959 	.word	0x00016959
    ec04:	00016971 	.word	0x00016971
    ec08:	00016988 	.word	0x00016988

0000ec0c <z_thread_timeout>:
	if (thread->base.pended_on != NULL) {
    ec0c:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
    ec10:	b570      	push	{r4, r5, r6, lr}
    ec12:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    ec14:	f1a0 0518 	sub.w	r5, r0, #24
	if (thread->base.pended_on != NULL) {
    ec18:	2b00      	cmp	r3, #0
    ec1a:	d042      	beq.n	eca2 <z_thread_timeout+0x96>
	__asm__ volatile(
    ec1c:	f04f 0320 	mov.w	r3, #32
    ec20:	f3ef 8611 	mrs	r6, BASEPRI
    ec24:	f383 8811 	msr	BASEPRI, r3
    ec28:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ec2c:	4822      	ldr	r0, [pc, #136]	; (ecb8 <z_thread_timeout+0xac>)
    ec2e:	f001 f865 	bl	fcfc <z_spin_lock_valid>
    ec32:	b968      	cbnz	r0, ec50 <z_thread_timeout+0x44>
    ec34:	235c      	movs	r3, #92	; 0x5c
    ec36:	4a21      	ldr	r2, [pc, #132]	; (ecbc <z_thread_timeout+0xb0>)
    ec38:	4921      	ldr	r1, [pc, #132]	; (ecc0 <z_thread_timeout+0xb4>)
    ec3a:	4822      	ldr	r0, [pc, #136]	; (ecc4 <z_thread_timeout+0xb8>)
    ec3c:	f002 f8ce 	bl	10ddc <printk>
    ec40:	491d      	ldr	r1, [pc, #116]	; (ecb8 <z_thread_timeout+0xac>)
    ec42:	4821      	ldr	r0, [pc, #132]	; (ecc8 <z_thread_timeout+0xbc>)
    ec44:	f002 f8ca 	bl	10ddc <printk>
    ec48:	215c      	movs	r1, #92	; 0x5c
    ec4a:	481c      	ldr	r0, [pc, #112]	; (ecbc <z_thread_timeout+0xb0>)
    ec4c:	f002 fb5c 	bl	11308 <assert_post_action>
	z_spin_lock_set_owner(l);
    ec50:	4819      	ldr	r0, [pc, #100]	; (ecb8 <z_thread_timeout+0xac>)
    ec52:	f001 f86f 	bl	fd34 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    ec56:	f1a4 0010 	sub.w	r0, r4, #16
    ec5a:	f7ff fcdf 	bl	e61c <pended_on.isra.0>
    ec5e:	4629      	mov	r1, r5
    ec60:	f7ff fe1e 	bl	e8a0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    ec64:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ec68:	4813      	ldr	r0, [pc, #76]	; (ecb8 <z_thread_timeout+0xac>)
    ec6a:	f023 0302 	bic.w	r3, r3, #2
    ec6e:	f804 3c0b 	strb.w	r3, [r4, #-11]
		thread->base.pended_on = NULL;
    ec72:	2300      	movs	r3, #0
    ec74:	f844 3c10 	str.w	r3, [r4, #-16]
    ec78:	f001 f84e 	bl	fd18 <z_spin_unlock_valid>
    ec7c:	b968      	cbnz	r0, ec9a <z_thread_timeout+0x8e>
    ec7e:	2384      	movs	r3, #132	; 0x84
    ec80:	4a0e      	ldr	r2, [pc, #56]	; (ecbc <z_thread_timeout+0xb0>)
    ec82:	4912      	ldr	r1, [pc, #72]	; (eccc <z_thread_timeout+0xc0>)
    ec84:	480f      	ldr	r0, [pc, #60]	; (ecc4 <z_thread_timeout+0xb8>)
    ec86:	f002 f8a9 	bl	10ddc <printk>
    ec8a:	490b      	ldr	r1, [pc, #44]	; (ecb8 <z_thread_timeout+0xac>)
    ec8c:	4810      	ldr	r0, [pc, #64]	; (ecd0 <z_thread_timeout+0xc4>)
    ec8e:	f002 f8a5 	bl	10ddc <printk>
    ec92:	2184      	movs	r1, #132	; 0x84
    ec94:	4809      	ldr	r0, [pc, #36]	; (ecbc <z_thread_timeout+0xb0>)
    ec96:	f002 fb37 	bl	11308 <assert_post_action>
	__asm__ volatile(
    ec9a:	f386 8811 	msr	BASEPRI, r6
    ec9e:	f3bf 8f6f 	isb	sy
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    eca2:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	z_ready_thread(thread);
    eca6:	4628      	mov	r0, r5
    eca8:	f023 0314 	bic.w	r3, r3, #20
    ecac:	f804 3c0b 	strb.w	r3, [r4, #-11]
}
    ecb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    ecb4:	f7ff bf62 	b.w	eb7c <z_ready_thread>
    ecb8:	20001e44 	.word	0x20001e44
    ecbc:	0001691e 	.word	0x0001691e
    ecc0:	00016944 	.word	0x00016944
    ecc4:	00016493 	.word	0x00016493
    ecc8:	00016959 	.word	0x00016959
    eccc:	00016971 	.word	0x00016971
    ecd0:	00016988 	.word	0x00016988

0000ecd4 <z_sched_start>:
{
    ecd4:	b538      	push	{r3, r4, r5, lr}
    ecd6:	4604      	mov	r4, r0
	__asm__ volatile(
    ecd8:	f04f 0320 	mov.w	r3, #32
    ecdc:	f3ef 8511 	mrs	r5, BASEPRI
    ece0:	f383 8811 	msr	BASEPRI, r3
    ece4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ece8:	481d      	ldr	r0, [pc, #116]	; (ed60 <z_sched_start+0x8c>)
    ecea:	f001 f807 	bl	fcfc <z_spin_lock_valid>
    ecee:	b968      	cbnz	r0, ed0c <z_sched_start+0x38>
    ecf0:	235c      	movs	r3, #92	; 0x5c
    ecf2:	4a1c      	ldr	r2, [pc, #112]	; (ed64 <z_sched_start+0x90>)
    ecf4:	491c      	ldr	r1, [pc, #112]	; (ed68 <z_sched_start+0x94>)
    ecf6:	481d      	ldr	r0, [pc, #116]	; (ed6c <z_sched_start+0x98>)
    ecf8:	f002 f870 	bl	10ddc <printk>
    ecfc:	4918      	ldr	r1, [pc, #96]	; (ed60 <z_sched_start+0x8c>)
    ecfe:	481c      	ldr	r0, [pc, #112]	; (ed70 <z_sched_start+0x9c>)
    ed00:	f002 f86c 	bl	10ddc <printk>
    ed04:	215c      	movs	r1, #92	; 0x5c
    ed06:	4817      	ldr	r0, [pc, #92]	; (ed64 <z_sched_start+0x90>)
    ed08:	f002 fafe 	bl	11308 <assert_post_action>
	z_spin_lock_set_owner(l);
    ed0c:	4814      	ldr	r0, [pc, #80]	; (ed60 <z_sched_start+0x8c>)
    ed0e:	f001 f811 	bl	fd34 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
    ed12:	7b63      	ldrb	r3, [r4, #13]
    ed14:	075a      	lsls	r2, r3, #29
    ed16:	d416      	bmi.n	ed46 <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ed18:	4811      	ldr	r0, [pc, #68]	; (ed60 <z_sched_start+0x8c>)
    ed1a:	f000 fffd 	bl	fd18 <z_spin_unlock_valid>
    ed1e:	b968      	cbnz	r0, ed3c <z_sched_start+0x68>
    ed20:	2384      	movs	r3, #132	; 0x84
    ed22:	4a10      	ldr	r2, [pc, #64]	; (ed64 <z_sched_start+0x90>)
    ed24:	4913      	ldr	r1, [pc, #76]	; (ed74 <z_sched_start+0xa0>)
    ed26:	4811      	ldr	r0, [pc, #68]	; (ed6c <z_sched_start+0x98>)
    ed28:	f002 f858 	bl	10ddc <printk>
    ed2c:	490c      	ldr	r1, [pc, #48]	; (ed60 <z_sched_start+0x8c>)
    ed2e:	4812      	ldr	r0, [pc, #72]	; (ed78 <z_sched_start+0xa4>)
    ed30:	f002 f854 	bl	10ddc <printk>
    ed34:	2184      	movs	r1, #132	; 0x84
    ed36:	480b      	ldr	r0, [pc, #44]	; (ed64 <z_sched_start+0x90>)
    ed38:	f002 fae6 	bl	11308 <assert_post_action>
	__asm__ volatile(
    ed3c:	f385 8811 	msr	BASEPRI, r5
    ed40:	f3bf 8f6f 	isb	sy
}
    ed44:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    ed46:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    ed4a:	4620      	mov	r0, r4
    ed4c:	7363      	strb	r3, [r4, #13]
    ed4e:	f7ff fecb 	bl	eae8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    ed52:	4629      	mov	r1, r5
}
    ed54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    ed58:	4801      	ldr	r0, [pc, #4]	; (ed60 <z_sched_start+0x8c>)
    ed5a:	f7ff bced 	b.w	e738 <z_reschedule>
    ed5e:	bf00      	nop
    ed60:	20001e44 	.word	0x20001e44
    ed64:	0001691e 	.word	0x0001691e
    ed68:	00016944 	.word	0x00016944
    ed6c:	00016493 	.word	0x00016493
    ed70:	00016959 	.word	0x00016959
    ed74:	00016971 	.word	0x00016971
    ed78:	00016988 	.word	0x00016988

0000ed7c <z_move_thread_to_end_of_prio_q>:
{
    ed7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ed7e:	4604      	mov	r4, r0
	__asm__ volatile(
    ed80:	f04f 0320 	mov.w	r3, #32
    ed84:	f3ef 8511 	mrs	r5, BASEPRI
    ed88:	f383 8811 	msr	BASEPRI, r3
    ed8c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ed90:	4835      	ldr	r0, [pc, #212]	; (ee68 <z_move_thread_to_end_of_prio_q+0xec>)
    ed92:	f000 ffb3 	bl	fcfc <z_spin_lock_valid>
    ed96:	b968      	cbnz	r0, edb4 <z_move_thread_to_end_of_prio_q+0x38>
    ed98:	235c      	movs	r3, #92	; 0x5c
    ed9a:	4a34      	ldr	r2, [pc, #208]	; (ee6c <z_move_thread_to_end_of_prio_q+0xf0>)
    ed9c:	4934      	ldr	r1, [pc, #208]	; (ee70 <z_move_thread_to_end_of_prio_q+0xf4>)
    ed9e:	4835      	ldr	r0, [pc, #212]	; (ee74 <z_move_thread_to_end_of_prio_q+0xf8>)
    eda0:	f002 f81c 	bl	10ddc <printk>
    eda4:	4930      	ldr	r1, [pc, #192]	; (ee68 <z_move_thread_to_end_of_prio_q+0xec>)
    eda6:	4834      	ldr	r0, [pc, #208]	; (ee78 <z_move_thread_to_end_of_prio_q+0xfc>)
    eda8:	f002 f818 	bl	10ddc <printk>
    edac:	215c      	movs	r1, #92	; 0x5c
    edae:	482f      	ldr	r0, [pc, #188]	; (ee6c <z_move_thread_to_end_of_prio_q+0xf0>)
    edb0:	f002 faaa 	bl	11308 <assert_post_action>
	z_spin_lock_set_owner(l);
    edb4:	482c      	ldr	r0, [pc, #176]	; (ee68 <z_move_thread_to_end_of_prio_q+0xec>)
    edb6:	f000 ffbd 	bl	fd34 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    edba:	f994 300d 	ldrsb.w	r3, [r4, #13]
    edbe:	2b00      	cmp	r3, #0
    edc0:	da03      	bge.n	edca <z_move_thread_to_end_of_prio_q+0x4e>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    edc2:	4621      	mov	r1, r4
    edc4:	482d      	ldr	r0, [pc, #180]	; (ee7c <z_move_thread_to_end_of_prio_q+0x100>)
    edc6:	f7ff fd6b 	bl	e8a0 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    edca:	4b2d      	ldr	r3, [pc, #180]	; (ee80 <z_move_thread_to_end_of_prio_q+0x104>)
    edcc:	429c      	cmp	r4, r3
    edce:	d10b      	bne.n	ede8 <z_move_thread_to_end_of_prio_q+0x6c>
    edd0:	492c      	ldr	r1, [pc, #176]	; (ee84 <z_move_thread_to_end_of_prio_q+0x108>)
    edd2:	4828      	ldr	r0, [pc, #160]	; (ee74 <z_move_thread_to_end_of_prio_q+0xf8>)
    edd4:	f240 3355 	movw	r3, #853	; 0x355
    edd8:	4a2b      	ldr	r2, [pc, #172]	; (ee88 <z_move_thread_to_end_of_prio_q+0x10c>)
    edda:	f001 ffff 	bl	10ddc <printk>
    edde:	f240 3155 	movw	r1, #853	; 0x355
    ede2:	4829      	ldr	r0, [pc, #164]	; (ee88 <z_move_thread_to_end_of_prio_q+0x10c>)
    ede4:	f002 fa90 	bl	11308 <assert_post_action>
	return list->head == list;
    ede8:	4a28      	ldr	r2, [pc, #160]	; (ee8c <z_move_thread_to_end_of_prio_q+0x110>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    edea:	f102 0128 	add.w	r1, r2, #40	; 0x28
    edee:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
    edf2:	428b      	cmp	r3, r1
    edf4:	d032      	beq.n	ee5c <z_move_thread_to_end_of_prio_q+0xe0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    edf6:	2b00      	cmp	r3, #0
    edf8:	d030      	beq.n	ee5c <z_move_thread_to_end_of_prio_q+0xe0>
	if (thread_1->base.prio < thread_2->base.prio) {
    edfa:	f994 600e 	ldrsb.w	r6, [r4, #14]
    edfe:	f993 700e 	ldrsb.w	r7, [r3, #14]
    ee02:	42b7      	cmp	r7, r6
    ee04:	dd25      	ble.n	ee52 <z_move_thread_to_end_of_prio_q+0xd6>
	node->prev = successor->prev;
    ee06:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    ee08:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
    ee0c:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    ee0e:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
    ee10:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
    ee12:	6890      	ldr	r0, [r2, #8]
    ee14:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ee18:	7363      	strb	r3, [r4, #13]
    ee1a:	1b03      	subs	r3, r0, r4
    ee1c:	4258      	negs	r0, r3
    ee1e:	4158      	adcs	r0, r3
    ee20:	f7ff fdc2 	bl	e9a8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ee24:	4810      	ldr	r0, [pc, #64]	; (ee68 <z_move_thread_to_end_of_prio_q+0xec>)
    ee26:	f000 ff77 	bl	fd18 <z_spin_unlock_valid>
    ee2a:	b968      	cbnz	r0, ee48 <z_move_thread_to_end_of_prio_q+0xcc>
    ee2c:	2384      	movs	r3, #132	; 0x84
    ee2e:	4a0f      	ldr	r2, [pc, #60]	; (ee6c <z_move_thread_to_end_of_prio_q+0xf0>)
    ee30:	4917      	ldr	r1, [pc, #92]	; (ee90 <z_move_thread_to_end_of_prio_q+0x114>)
    ee32:	4810      	ldr	r0, [pc, #64]	; (ee74 <z_move_thread_to_end_of_prio_q+0xf8>)
    ee34:	f001 ffd2 	bl	10ddc <printk>
    ee38:	490b      	ldr	r1, [pc, #44]	; (ee68 <z_move_thread_to_end_of_prio_q+0xec>)
    ee3a:	4816      	ldr	r0, [pc, #88]	; (ee94 <z_move_thread_to_end_of_prio_q+0x118>)
    ee3c:	f001 ffce 	bl	10ddc <printk>
    ee40:	2184      	movs	r1, #132	; 0x84
    ee42:	480a      	ldr	r0, [pc, #40]	; (ee6c <z_move_thread_to_end_of_prio_q+0xf0>)
    ee44:	f002 fa60 	bl	11308 <assert_post_action>
	__asm__ volatile(
    ee48:	f385 8811 	msr	BASEPRI, r5
    ee4c:	f3bf 8f6f 	isb	sy
}
    ee50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    ee52:	4298      	cmp	r0, r3
    ee54:	d002      	beq.n	ee5c <z_move_thread_to_end_of_prio_q+0xe0>
    ee56:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ee58:	2b00      	cmp	r3, #0
    ee5a:	d1d0      	bne.n	edfe <z_move_thread_to_end_of_prio_q+0x82>
	node->prev = list->tail;
    ee5c:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
    ee60:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    ee62:	601c      	str	r4, [r3, #0]
	list->tail = node;
    ee64:	62d4      	str	r4, [r2, #44]	; 0x2c
}
    ee66:	e7d3      	b.n	ee10 <z_move_thread_to_end_of_prio_q+0x94>
    ee68:	20001e44 	.word	0x20001e44
    ee6c:	0001691e 	.word	0x0001691e
    ee70:	00016944 	.word	0x00016944
    ee74:	00016493 	.word	0x00016493
    ee78:	00016959 	.word	0x00016959
    ee7c:	20001e38 	.word	0x20001e38
    ee80:	200013c0 	.word	0x200013c0
    ee84:	00019e8f 	.word	0x00019e8f
    ee88:	00019e56 	.word	0x00019e56
    ee8c:	20001e10 	.word	0x20001e10
    ee90:	00016971 	.word	0x00016971
    ee94:	00016988 	.word	0x00016988

0000ee98 <z_time_slice>:
{
    ee98:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
    ee9a:	4a15      	ldr	r2, [pc, #84]	; (eef0 <z_time_slice+0x58>)
    ee9c:	4b15      	ldr	r3, [pc, #84]	; (eef4 <z_time_slice+0x5c>)
    ee9e:	6814      	ldr	r4, [r2, #0]
{
    eea0:	4601      	mov	r1, r0
	if (pending_current == _current) {
    eea2:	6898      	ldr	r0, [r3, #8]
    eea4:	42a0      	cmp	r0, r4
    eea6:	461c      	mov	r4, r3
    eea8:	d103      	bne.n	eeb2 <z_time_slice+0x1a>
}
    eeaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
    eeae:	f7ff bbcd 	b.w	e64c <z_reset_time_slice>
	pending_current = NULL;
    eeb2:	2500      	movs	r5, #0
    eeb4:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
    eeb6:	4a10      	ldr	r2, [pc, #64]	; (eef8 <z_time_slice+0x60>)
    eeb8:	6812      	ldr	r2, [r2, #0]
    eeba:	b1b2      	cbz	r2, eeea <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
    eebc:	89c2      	ldrh	r2, [r0, #14]
    eebe:	2a7f      	cmp	r2, #127	; 0x7f
    eec0:	d813      	bhi.n	eeea <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    eec2:	4a0e      	ldr	r2, [pc, #56]	; (eefc <z_time_slice+0x64>)
    eec4:	f990 500e 	ldrsb.w	r5, [r0, #14]
    eec8:	6812      	ldr	r2, [r2, #0]
    eeca:	4295      	cmp	r5, r2
    eecc:	db0d      	blt.n	eeea <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
    eece:	4a0c      	ldr	r2, [pc, #48]	; (ef00 <z_time_slice+0x68>)
    eed0:	4290      	cmp	r0, r2
    eed2:	d00a      	beq.n	eeea <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
    eed4:	6982      	ldr	r2, [r0, #24]
    eed6:	b942      	cbnz	r2, eeea <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
    eed8:	691a      	ldr	r2, [r3, #16]
    eeda:	428a      	cmp	r2, r1
    eedc:	dc02      	bgt.n	eee4 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
    eede:	f7ff ff4d 	bl	ed7c <z_move_thread_to_end_of_prio_q>
    eee2:	e7e2      	b.n	eeaa <z_time_slice+0x12>
			_current_cpu->slice_ticks -= ticks;
    eee4:	1a52      	subs	r2, r2, r1
    eee6:	611a      	str	r2, [r3, #16]
}
    eee8:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
    eeea:	2300      	movs	r3, #0
    eeec:	6123      	str	r3, [r4, #16]
    eeee:	e7fb      	b.n	eee8 <z_time_slice+0x50>
    eef0:	20001e40 	.word	0x20001e40
    eef4:	20001e10 	.word	0x20001e10
    eef8:	20001e4c 	.word	0x20001e4c
    eefc:	20001e48 	.word	0x20001e48
    ef00:	200013c0 	.word	0x200013c0

0000ef04 <z_impl_k_thread_suspend>:
{
    ef04:	b570      	push	{r4, r5, r6, lr}
    ef06:	4604      	mov	r4, r0
    ef08:	3018      	adds	r0, #24
    ef0a:	f001 f933 	bl	10174 <z_abort_timeout>
	__asm__ volatile(
    ef0e:	f04f 0320 	mov.w	r3, #32
    ef12:	f3ef 8611 	mrs	r6, BASEPRI
    ef16:	f383 8811 	msr	BASEPRI, r3
    ef1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ef1e:	4825      	ldr	r0, [pc, #148]	; (efb4 <z_impl_k_thread_suspend+0xb0>)
    ef20:	f000 feec 	bl	fcfc <z_spin_lock_valid>
    ef24:	b968      	cbnz	r0, ef42 <z_impl_k_thread_suspend+0x3e>
    ef26:	235c      	movs	r3, #92	; 0x5c
    ef28:	4a23      	ldr	r2, [pc, #140]	; (efb8 <z_impl_k_thread_suspend+0xb4>)
    ef2a:	4924      	ldr	r1, [pc, #144]	; (efbc <z_impl_k_thread_suspend+0xb8>)
    ef2c:	4824      	ldr	r0, [pc, #144]	; (efc0 <z_impl_k_thread_suspend+0xbc>)
    ef2e:	f001 ff55 	bl	10ddc <printk>
    ef32:	4920      	ldr	r1, [pc, #128]	; (efb4 <z_impl_k_thread_suspend+0xb0>)
    ef34:	4823      	ldr	r0, [pc, #140]	; (efc4 <z_impl_k_thread_suspend+0xc0>)
    ef36:	f001 ff51 	bl	10ddc <printk>
    ef3a:	215c      	movs	r1, #92	; 0x5c
    ef3c:	481e      	ldr	r0, [pc, #120]	; (efb8 <z_impl_k_thread_suspend+0xb4>)
    ef3e:	f002 f9e3 	bl	11308 <assert_post_action>
	z_spin_lock_set_owner(l);
    ef42:	481c      	ldr	r0, [pc, #112]	; (efb4 <z_impl_k_thread_suspend+0xb0>)
    ef44:	f000 fef6 	bl	fd34 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    ef48:	f994 300d 	ldrsb.w	r3, [r4, #13]
    ef4c:	2b00      	cmp	r3, #0
    ef4e:	da07      	bge.n	ef60 <z_impl_k_thread_suspend+0x5c>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    ef50:	4621      	mov	r1, r4
    ef52:	481d      	ldr	r0, [pc, #116]	; (efc8 <z_impl_k_thread_suspend+0xc4>)
    ef54:	f7ff fca4 	bl	e8a0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    ef58:	7b63      	ldrb	r3, [r4, #13]
    ef5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ef5e:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    ef60:	4d1a      	ldr	r5, [pc, #104]	; (efcc <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    ef62:	7b63      	ldrb	r3, [r4, #13]
    ef64:	68a8      	ldr	r0, [r5, #8]
    ef66:	f043 0310 	orr.w	r3, r3, #16
    ef6a:	7363      	strb	r3, [r4, #13]
    ef6c:	1b03      	subs	r3, r0, r4
    ef6e:	4258      	negs	r0, r3
    ef70:	4158      	adcs	r0, r3
    ef72:	f7ff fd19 	bl	e9a8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ef76:	480f      	ldr	r0, [pc, #60]	; (efb4 <z_impl_k_thread_suspend+0xb0>)
    ef78:	f000 fece 	bl	fd18 <z_spin_unlock_valid>
    ef7c:	b968      	cbnz	r0, ef9a <z_impl_k_thread_suspend+0x96>
    ef7e:	2384      	movs	r3, #132	; 0x84
    ef80:	4a0d      	ldr	r2, [pc, #52]	; (efb8 <z_impl_k_thread_suspend+0xb4>)
    ef82:	4913      	ldr	r1, [pc, #76]	; (efd0 <z_impl_k_thread_suspend+0xcc>)
    ef84:	480e      	ldr	r0, [pc, #56]	; (efc0 <z_impl_k_thread_suspend+0xbc>)
    ef86:	f001 ff29 	bl	10ddc <printk>
    ef8a:	490a      	ldr	r1, [pc, #40]	; (efb4 <z_impl_k_thread_suspend+0xb0>)
    ef8c:	4811      	ldr	r0, [pc, #68]	; (efd4 <z_impl_k_thread_suspend+0xd0>)
    ef8e:	f001 ff25 	bl	10ddc <printk>
    ef92:	2184      	movs	r1, #132	; 0x84
    ef94:	4808      	ldr	r0, [pc, #32]	; (efb8 <z_impl_k_thread_suspend+0xb4>)
    ef96:	f002 f9b7 	bl	11308 <assert_post_action>
	__asm__ volatile(
    ef9a:	f386 8811 	msr	BASEPRI, r6
    ef9e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    efa2:	68ab      	ldr	r3, [r5, #8]
    efa4:	42a3      	cmp	r3, r4
    efa6:	d103      	bne.n	efb0 <z_impl_k_thread_suspend+0xac>
}
    efa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    efac:	f006 b83a 	b.w	15024 <z_reschedule_unlocked>
}
    efb0:	bd70      	pop	{r4, r5, r6, pc}
    efb2:	bf00      	nop
    efb4:	20001e44 	.word	0x20001e44
    efb8:	0001691e 	.word	0x0001691e
    efbc:	00016944 	.word	0x00016944
    efc0:	00016493 	.word	0x00016493
    efc4:	00016959 	.word	0x00016959
    efc8:	20001e38 	.word	0x20001e38
    efcc:	20001e10 	.word	0x20001e10
    efd0:	00016971 	.word	0x00016971
    efd4:	00016988 	.word	0x00016988

0000efd8 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
    efd8:	6d83      	ldr	r3, [r0, #88]	; 0x58
{
    efda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    efde:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    efe0:	b103      	cbz	r3, efe4 <z_thread_single_abort+0xc>
		thread->fn_abort();
    efe2:	4798      	blx	r3
    efe4:	f104 0018 	add.w	r0, r4, #24
    efe8:	f001 f8c4 	bl	10174 <z_abort_timeout>
	__asm__ volatile(
    efec:	f04f 0320 	mov.w	r3, #32
    eff0:	f3ef 8611 	mrs	r6, BASEPRI
    eff4:	f383 8811 	msr	BASEPRI, r3
    eff8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    effc:	4839      	ldr	r0, [pc, #228]	; (f0e4 <z_thread_single_abort+0x10c>)
    effe:	f000 fe7d 	bl	fcfc <z_spin_lock_valid>
    f002:	b968      	cbnz	r0, f020 <z_thread_single_abort+0x48>
    f004:	235c      	movs	r3, #92	; 0x5c
    f006:	4a38      	ldr	r2, [pc, #224]	; (f0e8 <z_thread_single_abort+0x110>)
    f008:	4938      	ldr	r1, [pc, #224]	; (f0ec <z_thread_single_abort+0x114>)
    f00a:	4839      	ldr	r0, [pc, #228]	; (f0f0 <z_thread_single_abort+0x118>)
    f00c:	f001 fee6 	bl	10ddc <printk>
    f010:	4934      	ldr	r1, [pc, #208]	; (f0e4 <z_thread_single_abort+0x10c>)
    f012:	4838      	ldr	r0, [pc, #224]	; (f0f4 <z_thread_single_abort+0x11c>)
    f014:	f001 fee2 	bl	10ddc <printk>
    f018:	215c      	movs	r1, #92	; 0x5c
    f01a:	4833      	ldr	r0, [pc, #204]	; (f0e8 <z_thread_single_abort+0x110>)
    f01c:	f002 f974 	bl	11308 <assert_post_action>
	z_spin_lock_set_owner(l);
    f020:	4830      	ldr	r0, [pc, #192]	; (f0e4 <z_thread_single_abort+0x10c>)
    f022:	f000 fe87 	bl	fd34 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    f026:	7b63      	ldrb	r3, [r4, #13]
    f028:	06d8      	lsls	r0, r3, #27
    f02a:	d136      	bne.n	f09a <z_thread_single_abort+0xc2>
		if (z_is_thread_ready(thread)) {
    f02c:	69a2      	ldr	r2, [r4, #24]
    f02e:	2a00      	cmp	r2, #0
    f030:	d133      	bne.n	f09a <z_thread_single_abort+0xc2>
			if (z_is_thread_queued(thread)) {
    f032:	0619      	lsls	r1, r3, #24
    f034:	d507      	bpl.n	f046 <z_thread_single_abort+0x6e>
				_priq_run_remove(&_kernel.ready_q.runq,
    f036:	4621      	mov	r1, r4
    f038:	482f      	ldr	r0, [pc, #188]	; (f0f8 <z_thread_single_abort+0x120>)
    f03a:	f7ff fc31 	bl	e8a0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    f03e:	7b63      	ldrb	r3, [r4, #13]
    f040:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f044:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
    f046:	4b2d      	ldr	r3, [pc, #180]	; (f0fc <z_thread_single_abort+0x124>)
    f048:	6898      	ldr	r0, [r3, #8]
    f04a:	1b02      	subs	r2, r0, r4
    f04c:	4250      	negs	r0, r2
    f04e:	4150      	adcs	r0, r2
    f050:	f7ff fcaa 	bl	e9a8 <update_cache>
			waiter->base.pended_on = NULL;
    f054:	2700      	movs	r7, #0
		thread->base.thread_state |= mask;
    f056:	7b63      	ldrb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    f058:	f104 0828 	add.w	r8, r4, #40	; 0x28
    f05c:	f043 0308 	orr.w	r3, r3, #8
    f060:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    f062:	6aa5      	ldr	r5, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f064:	4545      	cmp	r5, r8
    f066:	d000      	beq.n	f06a <z_thread_single_abort+0x92>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
    f068:	bb3d      	cbnz	r5, f0ba <z_thread_single_abort+0xe2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f06a:	481e      	ldr	r0, [pc, #120]	; (f0e4 <z_thread_single_abort+0x10c>)
    f06c:	f000 fe54 	bl	fd18 <z_spin_unlock_valid>
    f070:	b968      	cbnz	r0, f08e <z_thread_single_abort+0xb6>
    f072:	2384      	movs	r3, #132	; 0x84
    f074:	4a1c      	ldr	r2, [pc, #112]	; (f0e8 <z_thread_single_abort+0x110>)
    f076:	4922      	ldr	r1, [pc, #136]	; (f100 <z_thread_single_abort+0x128>)
    f078:	481d      	ldr	r0, [pc, #116]	; (f0f0 <z_thread_single_abort+0x118>)
    f07a:	f001 feaf 	bl	10ddc <printk>
    f07e:	4919      	ldr	r1, [pc, #100]	; (f0e4 <z_thread_single_abort+0x10c>)
    f080:	4820      	ldr	r0, [pc, #128]	; (f104 <z_thread_single_abort+0x12c>)
    f082:	f001 feab 	bl	10ddc <printk>
    f086:	2184      	movs	r1, #132	; 0x84
    f088:	4817      	ldr	r0, [pc, #92]	; (f0e8 <z_thread_single_abort+0x110>)
    f08a:	f002 f93d 	bl	11308 <assert_post_action>
	__asm__ volatile(
    f08e:	f386 8811 	msr	BASEPRI, r6
    f092:	f3bf 8f6f 	isb	sy
}
    f096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
    f09a:	079b      	lsls	r3, r3, #30
    f09c:	d5da      	bpl.n	f054 <z_thread_single_abort+0x7c>
				_priq_wait_remove(&pended_on(thread)->waitq,
    f09e:	f104 0008 	add.w	r0, r4, #8
    f0a2:	f7ff fabb 	bl	e61c <pended_on.isra.0>
    f0a6:	4621      	mov	r1, r4
    f0a8:	f7ff fbfa 	bl	e8a0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    f0ac:	7b63      	ldrb	r3, [r4, #13]
    f0ae:	f023 0302 	bic.w	r3, r3, #2
    f0b2:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
    f0b4:	2300      	movs	r3, #0
    f0b6:	60a3      	str	r3, [r4, #8]
    f0b8:	e7cc      	b.n	f054 <z_thread_single_abort+0x7c>
    f0ba:	f105 0018 	add.w	r0, r5, #24
    f0be:	f001 f859 	bl	10174 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
    f0c2:	f105 0008 	add.w	r0, r5, #8
    f0c6:	f7ff faa9 	bl	e61c <pended_on.isra.0>
    f0ca:	4629      	mov	r1, r5
    f0cc:	f7ff fbe8 	bl	e8a0 <z_priq_dumb_remove>
    f0d0:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
    f0d2:	4628      	mov	r0, r5
    f0d4:	f023 0302 	bic.w	r3, r3, #2
    f0d8:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
    f0da:	60af      	str	r7, [r5, #8]
    f0dc:	672f      	str	r7, [r5, #112]	; 0x70
			ready_thread(waiter);
    f0de:	f7ff fd03 	bl	eae8 <ready_thread>
    f0e2:	e7be      	b.n	f062 <z_thread_single_abort+0x8a>
    f0e4:	20001e44 	.word	0x20001e44
    f0e8:	0001691e 	.word	0x0001691e
    f0ec:	00016944 	.word	0x00016944
    f0f0:	00016493 	.word	0x00016493
    f0f4:	00016959 	.word	0x00016959
    f0f8:	20001e38 	.word	0x20001e38
    f0fc:	20001e10 	.word	0x20001e10
    f100:	00016971 	.word	0x00016971
    f104:	00016988 	.word	0x00016988

0000f108 <unready_thread>:
{
    f108:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    f10a:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
    f10e:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    f110:	2b00      	cmp	r3, #0
    f112:	da07      	bge.n	f124 <unready_thread+0x1c>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    f114:	4601      	mov	r1, r0
    f116:	4808      	ldr	r0, [pc, #32]	; (f138 <unready_thread+0x30>)
    f118:	f7ff fbc2 	bl	e8a0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    f11c:	7b63      	ldrb	r3, [r4, #13]
    f11e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f122:	7363      	strb	r3, [r4, #13]
	update_cache(thread == _current);
    f124:	4b05      	ldr	r3, [pc, #20]	; (f13c <unready_thread+0x34>)
    f126:	6898      	ldr	r0, [r3, #8]
    f128:	1b03      	subs	r3, r0, r4
    f12a:	4258      	negs	r0, r3
    f12c:	4158      	adcs	r0, r3
}
    f12e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    f132:	f7ff bc39 	b.w	e9a8 <update_cache>
    f136:	bf00      	nop
    f138:	20001e38 	.word	0x20001e38
    f13c:	20001e10 	.word	0x20001e10

0000f140 <z_remove_thread_from_ready_q>:
{
    f140:	b538      	push	{r3, r4, r5, lr}
    f142:	4604      	mov	r4, r0
	__asm__ volatile(
    f144:	f04f 0320 	mov.w	r3, #32
    f148:	f3ef 8511 	mrs	r5, BASEPRI
    f14c:	f383 8811 	msr	BASEPRI, r3
    f150:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f154:	4817      	ldr	r0, [pc, #92]	; (f1b4 <z_remove_thread_from_ready_q+0x74>)
    f156:	f000 fdd1 	bl	fcfc <z_spin_lock_valid>
    f15a:	b968      	cbnz	r0, f178 <z_remove_thread_from_ready_q+0x38>
    f15c:	235c      	movs	r3, #92	; 0x5c
    f15e:	4a16      	ldr	r2, [pc, #88]	; (f1b8 <z_remove_thread_from_ready_q+0x78>)
    f160:	4916      	ldr	r1, [pc, #88]	; (f1bc <z_remove_thread_from_ready_q+0x7c>)
    f162:	4817      	ldr	r0, [pc, #92]	; (f1c0 <z_remove_thread_from_ready_q+0x80>)
    f164:	f001 fe3a 	bl	10ddc <printk>
    f168:	4912      	ldr	r1, [pc, #72]	; (f1b4 <z_remove_thread_from_ready_q+0x74>)
    f16a:	4816      	ldr	r0, [pc, #88]	; (f1c4 <z_remove_thread_from_ready_q+0x84>)
    f16c:	f001 fe36 	bl	10ddc <printk>
    f170:	215c      	movs	r1, #92	; 0x5c
    f172:	4811      	ldr	r0, [pc, #68]	; (f1b8 <z_remove_thread_from_ready_q+0x78>)
    f174:	f002 f8c8 	bl	11308 <assert_post_action>
	z_spin_lock_set_owner(l);
    f178:	480e      	ldr	r0, [pc, #56]	; (f1b4 <z_remove_thread_from_ready_q+0x74>)
    f17a:	f000 fddb 	bl	fd34 <z_spin_lock_set_owner>
		unready_thread(thread);
    f17e:	4620      	mov	r0, r4
    f180:	f7ff ffc2 	bl	f108 <unready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f184:	480b      	ldr	r0, [pc, #44]	; (f1b4 <z_remove_thread_from_ready_q+0x74>)
    f186:	f000 fdc7 	bl	fd18 <z_spin_unlock_valid>
    f18a:	b968      	cbnz	r0, f1a8 <z_remove_thread_from_ready_q+0x68>
    f18c:	2384      	movs	r3, #132	; 0x84
    f18e:	4a0a      	ldr	r2, [pc, #40]	; (f1b8 <z_remove_thread_from_ready_q+0x78>)
    f190:	490d      	ldr	r1, [pc, #52]	; (f1c8 <z_remove_thread_from_ready_q+0x88>)
    f192:	480b      	ldr	r0, [pc, #44]	; (f1c0 <z_remove_thread_from_ready_q+0x80>)
    f194:	f001 fe22 	bl	10ddc <printk>
    f198:	4906      	ldr	r1, [pc, #24]	; (f1b4 <z_remove_thread_from_ready_q+0x74>)
    f19a:	480c      	ldr	r0, [pc, #48]	; (f1cc <z_remove_thread_from_ready_q+0x8c>)
    f19c:	f001 fe1e 	bl	10ddc <printk>
    f1a0:	2184      	movs	r1, #132	; 0x84
    f1a2:	4805      	ldr	r0, [pc, #20]	; (f1b8 <z_remove_thread_from_ready_q+0x78>)
    f1a4:	f002 f8b0 	bl	11308 <assert_post_action>
	__asm__ volatile(
    f1a8:	f385 8811 	msr	BASEPRI, r5
    f1ac:	f3bf 8f6f 	isb	sy
}
    f1b0:	bd38      	pop	{r3, r4, r5, pc}
    f1b2:	bf00      	nop
    f1b4:	20001e44 	.word	0x20001e44
    f1b8:	0001691e 	.word	0x0001691e
    f1bc:	00016944 	.word	0x00016944
    f1c0:	00016493 	.word	0x00016493
    f1c4:	00016959 	.word	0x00016959
    f1c8:	00016971 	.word	0x00016971
    f1cc:	00016988 	.word	0x00016988

0000f1d0 <add_to_waitq_locked>:
{
    f1d0:	b538      	push	{r3, r4, r5, lr}
    f1d2:	4604      	mov	r4, r0
    f1d4:	460d      	mov	r5, r1
	unready_thread(thread);
    f1d6:	f7ff ff97 	bl	f108 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    f1da:	7b63      	ldrb	r3, [r4, #13]
    f1dc:	f043 0302 	orr.w	r3, r3, #2
    f1e0:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    f1e2:	b1f5      	cbz	r5, f222 <add_to_waitq_locked+0x52>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    f1e4:	4b16      	ldr	r3, [pc, #88]	; (f240 <add_to_waitq_locked+0x70>)
		thread->base.pended_on = wait_q;
    f1e6:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    f1e8:	429c      	cmp	r4, r3
    f1ea:	d10b      	bne.n	f204 <add_to_waitq_locked+0x34>
    f1ec:	4915      	ldr	r1, [pc, #84]	; (f244 <add_to_waitq_locked+0x74>)
    f1ee:	4816      	ldr	r0, [pc, #88]	; (f248 <add_to_waitq_locked+0x78>)
    f1f0:	f240 3355 	movw	r3, #853	; 0x355
    f1f4:	4a15      	ldr	r2, [pc, #84]	; (f24c <add_to_waitq_locked+0x7c>)
    f1f6:	f001 fdf1 	bl	10ddc <printk>
    f1fa:	f240 3155 	movw	r1, #853	; 0x355
    f1fe:	4813      	ldr	r0, [pc, #76]	; (f24c <add_to_waitq_locked+0x7c>)
    f200:	f002 f882 	bl	11308 <assert_post_action>
	return list->head == list;
    f204:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f206:	429d      	cmp	r5, r3
    f208:	d012      	beq.n	f230 <add_to_waitq_locked+0x60>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f20a:	b18b      	cbz	r3, f230 <add_to_waitq_locked+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
    f20c:	f994 200e 	ldrsb.w	r2, [r4, #14]
    f210:	f993 100e 	ldrsb.w	r1, [r3, #14]
    f214:	4291      	cmp	r1, r2
    f216:	dd05      	ble.n	f224 <add_to_waitq_locked+0x54>
	node->prev = successor->prev;
    f218:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    f21a:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    f21e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    f220:	605c      	str	r4, [r3, #4]
}
    f222:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    f224:	6869      	ldr	r1, [r5, #4]
    f226:	428b      	cmp	r3, r1
    f228:	d002      	beq.n	f230 <add_to_waitq_locked+0x60>
    f22a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f22c:	2b00      	cmp	r3, #0
    f22e:	d1ef      	bne.n	f210 <add_to_waitq_locked+0x40>
	node->prev = list->tail;
    f230:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    f232:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
    f234:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    f236:	686b      	ldr	r3, [r5, #4]
    f238:	601c      	str	r4, [r3, #0]
	list->tail = node;
    f23a:	606c      	str	r4, [r5, #4]
}
    f23c:	e7f1      	b.n	f222 <add_to_waitq_locked+0x52>
    f23e:	bf00      	nop
    f240:	200013c0 	.word	0x200013c0
    f244:	00019e8f 	.word	0x00019e8f
    f248:	00016493 	.word	0x00016493
    f24c:	00019e56 	.word	0x00019e56

0000f250 <pend>:
{
    f250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f254:	4604      	mov	r4, r0
    f256:	460d      	mov	r5, r1
    f258:	4616      	mov	r6, r2
    f25a:	461f      	mov	r7, r3
	__asm__ volatile(
    f25c:	f04f 0320 	mov.w	r3, #32
    f260:	f3ef 8811 	mrs	r8, BASEPRI
    f264:	f383 8811 	msr	BASEPRI, r3
    f268:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f26c:	481f      	ldr	r0, [pc, #124]	; (f2ec <pend+0x9c>)
    f26e:	f000 fd45 	bl	fcfc <z_spin_lock_valid>
    f272:	b968      	cbnz	r0, f290 <pend+0x40>
    f274:	235c      	movs	r3, #92	; 0x5c
    f276:	4a1e      	ldr	r2, [pc, #120]	; (f2f0 <pend+0xa0>)
    f278:	491e      	ldr	r1, [pc, #120]	; (f2f4 <pend+0xa4>)
    f27a:	481f      	ldr	r0, [pc, #124]	; (f2f8 <pend+0xa8>)
    f27c:	f001 fdae 	bl	10ddc <printk>
    f280:	491a      	ldr	r1, [pc, #104]	; (f2ec <pend+0x9c>)
    f282:	481e      	ldr	r0, [pc, #120]	; (f2fc <pend+0xac>)
    f284:	f001 fdaa 	bl	10ddc <printk>
    f288:	215c      	movs	r1, #92	; 0x5c
    f28a:	4819      	ldr	r0, [pc, #100]	; (f2f0 <pend+0xa0>)
    f28c:	f002 f83c 	bl	11308 <assert_post_action>
	z_spin_lock_set_owner(l);
    f290:	4816      	ldr	r0, [pc, #88]	; (f2ec <pend+0x9c>)
    f292:	f000 fd4f 	bl	fd34 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    f296:	4620      	mov	r0, r4
    f298:	4629      	mov	r1, r5
    f29a:	f7ff ff99 	bl	f1d0 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f29e:	4813      	ldr	r0, [pc, #76]	; (f2ec <pend+0x9c>)
    f2a0:	f000 fd3a 	bl	fd18 <z_spin_unlock_valid>
    f2a4:	b968      	cbnz	r0, f2c2 <pend+0x72>
    f2a6:	2384      	movs	r3, #132	; 0x84
    f2a8:	4a11      	ldr	r2, [pc, #68]	; (f2f0 <pend+0xa0>)
    f2aa:	4915      	ldr	r1, [pc, #84]	; (f300 <pend+0xb0>)
    f2ac:	4812      	ldr	r0, [pc, #72]	; (f2f8 <pend+0xa8>)
    f2ae:	f001 fd95 	bl	10ddc <printk>
    f2b2:	490e      	ldr	r1, [pc, #56]	; (f2ec <pend+0x9c>)
    f2b4:	4813      	ldr	r0, [pc, #76]	; (f304 <pend+0xb4>)
    f2b6:	f001 fd91 	bl	10ddc <printk>
    f2ba:	2184      	movs	r1, #132	; 0x84
    f2bc:	480c      	ldr	r0, [pc, #48]	; (f2f0 <pend+0xa0>)
    f2be:	f002 f823 	bl	11308 <assert_post_action>
	__asm__ volatile(
    f2c2:	f388 8811 	msr	BASEPRI, r8
    f2c6:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    f2ca:	1c7b      	adds	r3, r7, #1
    f2cc:	bf08      	it	eq
    f2ce:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    f2d2:	d008      	beq.n	f2e6 <pend+0x96>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    f2d4:	4632      	mov	r2, r6
    f2d6:	463b      	mov	r3, r7
    f2d8:	f104 0018 	add.w	r0, r4, #24
    f2dc:	490a      	ldr	r1, [pc, #40]	; (f308 <pend+0xb8>)
}
    f2de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f2e2:	f000 be69 	b.w	ffb8 <z_add_timeout>
    f2e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f2ea:	bf00      	nop
    f2ec:	20001e44 	.word	0x20001e44
    f2f0:	0001691e 	.word	0x0001691e
    f2f4:	00016944 	.word	0x00016944
    f2f8:	00016493 	.word	0x00016493
    f2fc:	00016959 	.word	0x00016959
    f300:	00016971 	.word	0x00016971
    f304:	00016988 	.word	0x00016988
    f308:	0000ec0d 	.word	0x0000ec0d

0000f30c <z_pend_curr>:
{
    f30c:	b538      	push	{r3, r4, r5, lr}
    f30e:	4604      	mov	r4, r0
	pending_current = _current;
    f310:	4b10      	ldr	r3, [pc, #64]	; (f354 <z_pend_curr+0x48>)
{
    f312:	460d      	mov	r5, r1
	pending_current = _current;
    f314:	6898      	ldr	r0, [r3, #8]
    f316:	4b10      	ldr	r3, [pc, #64]	; (f358 <z_pend_curr+0x4c>)
{
    f318:	4611      	mov	r1, r2
	pending_current = _current;
    f31a:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    f31c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    f320:	f7ff ff96 	bl	f250 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f324:	4620      	mov	r0, r4
    f326:	f000 fcf7 	bl	fd18 <z_spin_unlock_valid>
    f32a:	b968      	cbnz	r0, f348 <z_pend_curr+0x3c>
    f32c:	239b      	movs	r3, #155	; 0x9b
    f32e:	4a0b      	ldr	r2, [pc, #44]	; (f35c <z_pend_curr+0x50>)
    f330:	490b      	ldr	r1, [pc, #44]	; (f360 <z_pend_curr+0x54>)
    f332:	480c      	ldr	r0, [pc, #48]	; (f364 <z_pend_curr+0x58>)
    f334:	f001 fd52 	bl	10ddc <printk>
    f338:	4621      	mov	r1, r4
    f33a:	480b      	ldr	r0, [pc, #44]	; (f368 <z_pend_curr+0x5c>)
    f33c:	f001 fd4e 	bl	10ddc <printk>
    f340:	219b      	movs	r1, #155	; 0x9b
    f342:	4806      	ldr	r0, [pc, #24]	; (f35c <z_pend_curr+0x50>)
    f344:	f001 ffe0 	bl	11308 <assert_post_action>
    f348:	4628      	mov	r0, r5
}
    f34a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f34e:	f7f3 bcdb 	b.w	2d08 <arch_swap>
    f352:	bf00      	nop
    f354:	20001e10 	.word	0x20001e10
    f358:	20001e40 	.word	0x20001e40
    f35c:	0001691e 	.word	0x0001691e
    f360:	00016971 	.word	0x00016971
    f364:	00016493 	.word	0x00016493
    f368:	00016988 	.word	0x00016988

0000f36c <z_set_prio>:
{
    f36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f36e:	4604      	mov	r4, r0
    f370:	460d      	mov	r5, r1
	__asm__ volatile(
    f372:	f04f 0320 	mov.w	r3, #32
    f376:	f3ef 8611 	mrs	r6, BASEPRI
    f37a:	f383 8811 	msr	BASEPRI, r3
    f37e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f382:	4836      	ldr	r0, [pc, #216]	; (f45c <z_set_prio+0xf0>)
    f384:	f000 fcba 	bl	fcfc <z_spin_lock_valid>
    f388:	b968      	cbnz	r0, f3a6 <z_set_prio+0x3a>
    f38a:	235c      	movs	r3, #92	; 0x5c
    f38c:	4a34      	ldr	r2, [pc, #208]	; (f460 <z_set_prio+0xf4>)
    f38e:	4935      	ldr	r1, [pc, #212]	; (f464 <z_set_prio+0xf8>)
    f390:	4835      	ldr	r0, [pc, #212]	; (f468 <z_set_prio+0xfc>)
    f392:	f001 fd23 	bl	10ddc <printk>
    f396:	4931      	ldr	r1, [pc, #196]	; (f45c <z_set_prio+0xf0>)
    f398:	4834      	ldr	r0, [pc, #208]	; (f46c <z_set_prio+0x100>)
    f39a:	f001 fd1f 	bl	10ddc <printk>
    f39e:	215c      	movs	r1, #92	; 0x5c
    f3a0:	482f      	ldr	r0, [pc, #188]	; (f460 <z_set_prio+0xf4>)
    f3a2:	f001 ffb1 	bl	11308 <assert_post_action>
	z_spin_lock_set_owner(l);
    f3a6:	482d      	ldr	r0, [pc, #180]	; (f45c <z_set_prio+0xf0>)
    f3a8:	f000 fcc4 	bl	fd34 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    f3ac:	7b63      	ldrb	r3, [r4, #13]
    f3ae:	b26d      	sxtb	r5, r5
    f3b0:	06db      	lsls	r3, r3, #27
    f3b2:	d150      	bne.n	f456 <z_set_prio+0xea>
		if (need_sched) {
    f3b4:	69a3      	ldr	r3, [r4, #24]
    f3b6:	2b00      	cmp	r3, #0
    f3b8:	d14d      	bne.n	f456 <z_set_prio+0xea>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
    f3ba:	4621      	mov	r1, r4
    f3bc:	482c      	ldr	r0, [pc, #176]	; (f470 <z_set_prio+0x104>)
    f3be:	f7ff fa6f 	bl	e8a0 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    f3c2:	4b2c      	ldr	r3, [pc, #176]	; (f474 <z_set_prio+0x108>)
				thread->base.prio = prio;
    f3c4:	73a5      	strb	r5, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    f3c6:	429c      	cmp	r4, r3
    f3c8:	d10b      	bne.n	f3e2 <z_set_prio+0x76>
    f3ca:	492b      	ldr	r1, [pc, #172]	; (f478 <z_set_prio+0x10c>)
    f3cc:	4826      	ldr	r0, [pc, #152]	; (f468 <z_set_prio+0xfc>)
    f3ce:	f240 3355 	movw	r3, #853	; 0x355
    f3d2:	4a2a      	ldr	r2, [pc, #168]	; (f47c <z_set_prio+0x110>)
    f3d4:	f001 fd02 	bl	10ddc <printk>
    f3d8:	f240 3155 	movw	r1, #853	; 0x355
    f3dc:	4827      	ldr	r0, [pc, #156]	; (f47c <z_set_prio+0x110>)
    f3de:	f001 ff93 	bl	11308 <assert_post_action>
	return list->head == list;
    f3e2:	4a27      	ldr	r2, [pc, #156]	; (f480 <z_set_prio+0x114>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f3e4:	f102 0128 	add.w	r1, r2, #40	; 0x28
    f3e8:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
    f3ec:	428b      	cmp	r3, r1
    f3ee:	d02c      	beq.n	f44a <z_set_prio+0xde>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f3f0:	b35b      	cbz	r3, f44a <z_set_prio+0xde>
	if (thread_1->base.prio < thread_2->base.prio) {
    f3f2:	f994 500e 	ldrsb.w	r5, [r4, #14]
    f3f6:	f993 700e 	ldrsb.w	r7, [r3, #14]
    f3fa:	42af      	cmp	r7, r5
    f3fc:	dd20      	ble.n	f440 <z_set_prio+0xd4>
	node->prev = successor->prev;
    f3fe:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    f400:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    f404:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    f406:	605c      	str	r4, [r3, #4]
			update_cache(1);
    f408:	2001      	movs	r0, #1
    f40a:	f7ff facd 	bl	e9a8 <update_cache>
    f40e:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f410:	4812      	ldr	r0, [pc, #72]	; (f45c <z_set_prio+0xf0>)
    f412:	f000 fc81 	bl	fd18 <z_spin_unlock_valid>
    f416:	b968      	cbnz	r0, f434 <z_set_prio+0xc8>
    f418:	2384      	movs	r3, #132	; 0x84
    f41a:	4a11      	ldr	r2, [pc, #68]	; (f460 <z_set_prio+0xf4>)
    f41c:	4919      	ldr	r1, [pc, #100]	; (f484 <z_set_prio+0x118>)
    f41e:	4812      	ldr	r0, [pc, #72]	; (f468 <z_set_prio+0xfc>)
    f420:	f001 fcdc 	bl	10ddc <printk>
    f424:	490d      	ldr	r1, [pc, #52]	; (f45c <z_set_prio+0xf0>)
    f426:	4818      	ldr	r0, [pc, #96]	; (f488 <z_set_prio+0x11c>)
    f428:	f001 fcd8 	bl	10ddc <printk>
    f42c:	2184      	movs	r1, #132	; 0x84
    f42e:	480c      	ldr	r0, [pc, #48]	; (f460 <z_set_prio+0xf4>)
    f430:	f001 ff6a 	bl	11308 <assert_post_action>
	__asm__ volatile(
    f434:	f386 8811 	msr	BASEPRI, r6
    f438:	f3bf 8f6f 	isb	sy
}
    f43c:	4620      	mov	r0, r4
    f43e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    f440:	4298      	cmp	r0, r3
    f442:	d002      	beq.n	f44a <z_set_prio+0xde>
    f444:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f446:	2b00      	cmp	r3, #0
    f448:	d1d5      	bne.n	f3f6 <z_set_prio+0x8a>
	node->prev = list->tail;
    f44a:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
    f44e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    f450:	601c      	str	r4, [r3, #0]
	list->tail = node;
    f452:	62d4      	str	r4, [r2, #44]	; 0x2c
}
    f454:	e7d8      	b.n	f408 <z_set_prio+0x9c>
			thread->base.prio = prio;
    f456:	73a5      	strb	r5, [r4, #14]
    f458:	2400      	movs	r4, #0
    f45a:	e7d9      	b.n	f410 <z_set_prio+0xa4>
    f45c:	20001e44 	.word	0x20001e44
    f460:	0001691e 	.word	0x0001691e
    f464:	00016944 	.word	0x00016944
    f468:	00016493 	.word	0x00016493
    f46c:	00016959 	.word	0x00016959
    f470:	20001e38 	.word	0x20001e38
    f474:	200013c0 	.word	0x200013c0
    f478:	00019e8f 	.word	0x00019e8f
    f47c:	00019e56 	.word	0x00019e56
    f480:	20001e10 	.word	0x20001e10
    f484:	00016971 	.word	0x00016971
    f488:	00016988 	.word	0x00016988

0000f48c <z_unpend_first_thread>:
{
    f48c:	b538      	push	{r3, r4, r5, lr}
    f48e:	4604      	mov	r4, r0
	__asm__ volatile(
    f490:	f04f 0320 	mov.w	r3, #32
    f494:	f3ef 8511 	mrs	r5, BASEPRI
    f498:	f383 8811 	msr	BASEPRI, r3
    f49c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f4a0:	483b      	ldr	r0, [pc, #236]	; (f590 <z_unpend_first_thread+0x104>)
    f4a2:	f000 fc2b 	bl	fcfc <z_spin_lock_valid>
    f4a6:	b968      	cbnz	r0, f4c4 <z_unpend_first_thread+0x38>
    f4a8:	235c      	movs	r3, #92	; 0x5c
    f4aa:	4a3a      	ldr	r2, [pc, #232]	; (f594 <z_unpend_first_thread+0x108>)
    f4ac:	493a      	ldr	r1, [pc, #232]	; (f598 <z_unpend_first_thread+0x10c>)
    f4ae:	483b      	ldr	r0, [pc, #236]	; (f59c <z_unpend_first_thread+0x110>)
    f4b0:	f001 fc94 	bl	10ddc <printk>
    f4b4:	4936      	ldr	r1, [pc, #216]	; (f590 <z_unpend_first_thread+0x104>)
    f4b6:	483a      	ldr	r0, [pc, #232]	; (f5a0 <z_unpend_first_thread+0x114>)
    f4b8:	f001 fc90 	bl	10ddc <printk>
    f4bc:	215c      	movs	r1, #92	; 0x5c
    f4be:	4835      	ldr	r0, [pc, #212]	; (f594 <z_unpend_first_thread+0x108>)
    f4c0:	f001 ff22 	bl	11308 <assert_post_action>
	z_spin_lock_set_owner(l);
    f4c4:	4832      	ldr	r0, [pc, #200]	; (f590 <z_unpend_first_thread+0x104>)
    f4c6:	f000 fc35 	bl	fd34 <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
    f4ca:	4620      	mov	r0, r4
    f4cc:	f005 fdb4 	bl	15038 <z_priq_dumb_best>
    f4d0:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f4d2:	482f      	ldr	r0, [pc, #188]	; (f590 <z_unpend_first_thread+0x104>)
    f4d4:	f000 fc20 	bl	fd18 <z_spin_unlock_valid>
    f4d8:	b968      	cbnz	r0, f4f6 <z_unpend_first_thread+0x6a>
    f4da:	2384      	movs	r3, #132	; 0x84
    f4dc:	4a2d      	ldr	r2, [pc, #180]	; (f594 <z_unpend_first_thread+0x108>)
    f4de:	4931      	ldr	r1, [pc, #196]	; (f5a4 <z_unpend_first_thread+0x118>)
    f4e0:	482e      	ldr	r0, [pc, #184]	; (f59c <z_unpend_first_thread+0x110>)
    f4e2:	f001 fc7b 	bl	10ddc <printk>
    f4e6:	492a      	ldr	r1, [pc, #168]	; (f590 <z_unpend_first_thread+0x104>)
    f4e8:	482f      	ldr	r0, [pc, #188]	; (f5a8 <z_unpend_first_thread+0x11c>)
    f4ea:	f001 fc77 	bl	10ddc <printk>
    f4ee:	2184      	movs	r1, #132	; 0x84
    f4f0:	4828      	ldr	r0, [pc, #160]	; (f594 <z_unpend_first_thread+0x108>)
    f4f2:	f001 ff09 	bl	11308 <assert_post_action>
	__asm__ volatile(
    f4f6:	f385 8811 	msr	BASEPRI, r5
    f4fa:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    f4fe:	2c00      	cmp	r4, #0
    f500:	d043      	beq.n	f58a <z_unpend_first_thread+0xfe>
	__asm__ volatile(
    f502:	f04f 0320 	mov.w	r3, #32
    f506:	f3ef 8511 	mrs	r5, BASEPRI
    f50a:	f383 8811 	msr	BASEPRI, r3
    f50e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f512:	481f      	ldr	r0, [pc, #124]	; (f590 <z_unpend_first_thread+0x104>)
    f514:	f000 fbf2 	bl	fcfc <z_spin_lock_valid>
    f518:	b968      	cbnz	r0, f536 <z_unpend_first_thread+0xaa>
    f51a:	235c      	movs	r3, #92	; 0x5c
    f51c:	4a1d      	ldr	r2, [pc, #116]	; (f594 <z_unpend_first_thread+0x108>)
    f51e:	491e      	ldr	r1, [pc, #120]	; (f598 <z_unpend_first_thread+0x10c>)
    f520:	481e      	ldr	r0, [pc, #120]	; (f59c <z_unpend_first_thread+0x110>)
    f522:	f001 fc5b 	bl	10ddc <printk>
    f526:	491a      	ldr	r1, [pc, #104]	; (f590 <z_unpend_first_thread+0x104>)
    f528:	481d      	ldr	r0, [pc, #116]	; (f5a0 <z_unpend_first_thread+0x114>)
    f52a:	f001 fc57 	bl	10ddc <printk>
    f52e:	215c      	movs	r1, #92	; 0x5c
    f530:	4818      	ldr	r0, [pc, #96]	; (f594 <z_unpend_first_thread+0x108>)
    f532:	f001 fee9 	bl	11308 <assert_post_action>
	z_spin_lock_set_owner(l);
    f536:	4816      	ldr	r0, [pc, #88]	; (f590 <z_unpend_first_thread+0x104>)
    f538:	f000 fbfc 	bl	fd34 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    f53c:	f104 0008 	add.w	r0, r4, #8
    f540:	f7ff f86c 	bl	e61c <pended_on.isra.0>
    f544:	4621      	mov	r1, r4
    f546:	f7ff f9ab 	bl	e8a0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    f54a:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f54c:	4810      	ldr	r0, [pc, #64]	; (f590 <z_unpend_first_thread+0x104>)
    f54e:	f023 0302 	bic.w	r3, r3, #2
    f552:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
    f554:	2300      	movs	r3, #0
    f556:	60a3      	str	r3, [r4, #8]
    f558:	f000 fbde 	bl	fd18 <z_spin_unlock_valid>
    f55c:	b968      	cbnz	r0, f57a <z_unpend_first_thread+0xee>
    f55e:	2384      	movs	r3, #132	; 0x84
    f560:	4a0c      	ldr	r2, [pc, #48]	; (f594 <z_unpend_first_thread+0x108>)
    f562:	4910      	ldr	r1, [pc, #64]	; (f5a4 <z_unpend_first_thread+0x118>)
    f564:	480d      	ldr	r0, [pc, #52]	; (f59c <z_unpend_first_thread+0x110>)
    f566:	f001 fc39 	bl	10ddc <printk>
    f56a:	4909      	ldr	r1, [pc, #36]	; (f590 <z_unpend_first_thread+0x104>)
    f56c:	480e      	ldr	r0, [pc, #56]	; (f5a8 <z_unpend_first_thread+0x11c>)
    f56e:	f001 fc35 	bl	10ddc <printk>
    f572:	2184      	movs	r1, #132	; 0x84
    f574:	4807      	ldr	r0, [pc, #28]	; (f594 <z_unpend_first_thread+0x108>)
    f576:	f001 fec7 	bl	11308 <assert_post_action>
	__asm__ volatile(
    f57a:	f385 8811 	msr	BASEPRI, r5
    f57e:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
    f582:	f104 0018 	add.w	r0, r4, #24
    f586:	f000 fdf5 	bl	10174 <z_abort_timeout>
}
    f58a:	4620      	mov	r0, r4
    f58c:	bd38      	pop	{r3, r4, r5, pc}
    f58e:	bf00      	nop
    f590:	20001e44 	.word	0x20001e44
    f594:	0001691e 	.word	0x0001691e
    f598:	00016944 	.word	0x00016944
    f59c:	00016493 	.word	0x00016493
    f5a0:	00016959 	.word	0x00016959
    f5a4:	00016971 	.word	0x00016971
    f5a8:	00016988 	.word	0x00016988

0000f5ac <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    f5ac:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    f5ae:	4b04      	ldr	r3, [pc, #16]	; (f5c0 <z_sched_init+0x14>)
    f5b0:	4608      	mov	r0, r1
    f5b2:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    f5b6:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    f5ba:	f7ff b85d 	b.w	e678 <k_sched_time_slice_set>
    f5be:	bf00      	nop
    f5c0:	20001e10 	.word	0x20001e10

0000f5c4 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    f5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f5c6:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    f5ca:	b173      	cbz	r3, f5ea <z_impl_k_yield+0x26>
    f5cc:	4945      	ldr	r1, [pc, #276]	; (f6e4 <z_impl_k_yield+0x120>)
    f5ce:	f44f 638c 	mov.w	r3, #1120	; 0x460
    f5d2:	4a45      	ldr	r2, [pc, #276]	; (f6e8 <z_impl_k_yield+0x124>)
    f5d4:	4845      	ldr	r0, [pc, #276]	; (f6ec <z_impl_k_yield+0x128>)
    f5d6:	f001 fc01 	bl	10ddc <printk>
    f5da:	4845      	ldr	r0, [pc, #276]	; (f6f0 <z_impl_k_yield+0x12c>)
    f5dc:	f001 fbfe 	bl	10ddc <printk>
    f5e0:	f44f 618c 	mov.w	r1, #1120	; 0x460
    f5e4:	4840      	ldr	r0, [pc, #256]	; (f6e8 <z_impl_k_yield+0x124>)
    f5e6:	f001 fe8f 	bl	11308 <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
    f5ea:	4c42      	ldr	r4, [pc, #264]	; (f6f4 <z_impl_k_yield+0x130>)
    f5ec:	4e42      	ldr	r6, [pc, #264]	; (f6f8 <z_impl_k_yield+0x134>)
    f5ee:	68a2      	ldr	r2, [r4, #8]
    f5f0:	42b2      	cmp	r2, r6
    f5f2:	d05f      	beq.n	f6b4 <z_impl_k_yield+0xf0>
	__asm__ volatile(
    f5f4:	f04f 0320 	mov.w	r3, #32
    f5f8:	f3ef 8711 	mrs	r7, BASEPRI
    f5fc:	f383 8811 	msr	BASEPRI, r3
    f600:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f604:	483d      	ldr	r0, [pc, #244]	; (f6fc <z_impl_k_yield+0x138>)
    f606:	f000 fb79 	bl	fcfc <z_spin_lock_valid>
    f60a:	b968      	cbnz	r0, f628 <z_impl_k_yield+0x64>
    f60c:	235c      	movs	r3, #92	; 0x5c
    f60e:	4a3c      	ldr	r2, [pc, #240]	; (f700 <z_impl_k_yield+0x13c>)
    f610:	493c      	ldr	r1, [pc, #240]	; (f704 <z_impl_k_yield+0x140>)
    f612:	4836      	ldr	r0, [pc, #216]	; (f6ec <z_impl_k_yield+0x128>)
    f614:	f001 fbe2 	bl	10ddc <printk>
    f618:	4938      	ldr	r1, [pc, #224]	; (f6fc <z_impl_k_yield+0x138>)
    f61a:	483b      	ldr	r0, [pc, #236]	; (f708 <z_impl_k_yield+0x144>)
    f61c:	f001 fbde 	bl	10ddc <printk>
    f620:	215c      	movs	r1, #92	; 0x5c
    f622:	4837      	ldr	r0, [pc, #220]	; (f700 <z_impl_k_yield+0x13c>)
    f624:	f001 fe70 	bl	11308 <assert_post_action>
	z_spin_lock_set_owner(l);
    f628:	4834      	ldr	r0, [pc, #208]	; (f6fc <z_impl_k_yield+0x138>)
    f62a:	f000 fb83 	bl	fd34 <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
    f62e:	68a1      	ldr	r1, [r4, #8]
    f630:	4836      	ldr	r0, [pc, #216]	; (f70c <z_impl_k_yield+0x148>)
    f632:	f7ff f935 	bl	e8a0 <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
    f636:	68a5      	ldr	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    f638:	42b5      	cmp	r5, r6
    f63a:	d10b      	bne.n	f654 <z_impl_k_yield+0x90>
    f63c:	4934      	ldr	r1, [pc, #208]	; (f710 <z_impl_k_yield+0x14c>)
    f63e:	482b      	ldr	r0, [pc, #172]	; (f6ec <z_impl_k_yield+0x128>)
    f640:	f240 3355 	movw	r3, #853	; 0x355
    f644:	4a28      	ldr	r2, [pc, #160]	; (f6e8 <z_impl_k_yield+0x124>)
    f646:	f001 fbc9 	bl	10ddc <printk>
    f64a:	f240 3155 	movw	r1, #853	; 0x355
    f64e:	4826      	ldr	r0, [pc, #152]	; (f6e8 <z_impl_k_yield+0x124>)
    f650:	f001 fe5a 	bl	11308 <assert_post_action>
	return list->head == list;
    f654:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f658:	4a2c      	ldr	r2, [pc, #176]	; (f70c <z_impl_k_yield+0x148>)
    f65a:	4293      	cmp	r3, r2
    f65c:	d03b      	beq.n	f6d6 <z_impl_k_yield+0x112>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f65e:	2b00      	cmp	r3, #0
    f660:	d039      	beq.n	f6d6 <z_impl_k_yield+0x112>
	if (thread_1->base.prio < thread_2->base.prio) {
    f662:	f995 000e 	ldrsb.w	r0, [r5, #14]
    f666:	f993 600e 	ldrsb.w	r6, [r3, #14]
    f66a:	4286      	cmp	r6, r0
    f66c:	dd2e      	ble.n	f6cc <z_impl_k_yield+0x108>
	node->prev = successor->prev;
    f66e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    f670:	e9c5 3200 	strd	r3, r2, [r5]
	successor->prev->next = node;
    f674:	6015      	str	r5, [r2, #0]
	successor->prev = node;
    f676:	605d      	str	r5, [r3, #4]
			z_mark_thread_as_queued(_current);
    f678:	68a2      	ldr	r2, [r4, #8]
			update_cache(1);
    f67a:	2001      	movs	r0, #1
	thread->base.thread_state |= states;
    f67c:	7b53      	ldrb	r3, [r2, #13]
    f67e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    f682:	7353      	strb	r3, [r2, #13]
    f684:	f7ff f990 	bl	e9a8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f688:	481c      	ldr	r0, [pc, #112]	; (f6fc <z_impl_k_yield+0x138>)
    f68a:	f000 fb45 	bl	fd18 <z_spin_unlock_valid>
    f68e:	b968      	cbnz	r0, f6ac <z_impl_k_yield+0xe8>
    f690:	2384      	movs	r3, #132	; 0x84
    f692:	4a1b      	ldr	r2, [pc, #108]	; (f700 <z_impl_k_yield+0x13c>)
    f694:	491f      	ldr	r1, [pc, #124]	; (f714 <z_impl_k_yield+0x150>)
    f696:	4815      	ldr	r0, [pc, #84]	; (f6ec <z_impl_k_yield+0x128>)
    f698:	f001 fba0 	bl	10ddc <printk>
    f69c:	4917      	ldr	r1, [pc, #92]	; (f6fc <z_impl_k_yield+0x138>)
    f69e:	481e      	ldr	r0, [pc, #120]	; (f718 <z_impl_k_yield+0x154>)
    f6a0:	f001 fb9c 	bl	10ddc <printk>
    f6a4:	2184      	movs	r1, #132	; 0x84
    f6a6:	4816      	ldr	r0, [pc, #88]	; (f700 <z_impl_k_yield+0x13c>)
    f6a8:	f001 fe2e 	bl	11308 <assert_post_action>
	__asm__ volatile(
    f6ac:	f387 8811 	msr	BASEPRI, r7
    f6b0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    f6b4:	f04f 0320 	mov.w	r3, #32
    f6b8:	f3ef 8011 	mrs	r0, BASEPRI
    f6bc:	f383 8811 	msr	BASEPRI, r3
    f6c0:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
    f6c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    f6c8:	f7f3 bb1e 	b.w	2d08 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    f6cc:	4299      	cmp	r1, r3
    f6ce:	d002      	beq.n	f6d6 <z_impl_k_yield+0x112>
    f6d0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f6d2:	2b00      	cmp	r3, #0
    f6d4:	d1c7      	bne.n	f666 <z_impl_k_yield+0xa2>
	node->prev = list->tail;
    f6d6:	e9c5 2100 	strd	r2, r1, [r5]
	list->tail->next = node;
    f6da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    f6dc:	601d      	str	r5, [r3, #0]
	list->tail = node;
    f6de:	62e5      	str	r5, [r4, #44]	; 0x2c
}
    f6e0:	e7ca      	b.n	f678 <z_impl_k_yield+0xb4>
    f6e2:	bf00      	nop
    f6e4:	00019e14 	.word	0x00019e14
    f6e8:	00019e56 	.word	0x00019e56
    f6ec:	00016493 	.word	0x00016493
    f6f0:	0001919c 	.word	0x0001919c
    f6f4:	20001e10 	.word	0x20001e10
    f6f8:	200013c0 	.word	0x200013c0
    f6fc:	20001e44 	.word	0x20001e44
    f700:	0001691e 	.word	0x0001691e
    f704:	00016944 	.word	0x00016944
    f708:	00016959 	.word	0x00016959
    f70c:	20001e38 	.word	0x20001e38
    f710:	00019e8f 	.word	0x00019e8f
    f714:	00016971 	.word	0x00016971
    f718:	00016988 	.word	0x00016988

0000f71c <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
{
    f71c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    f720:	4604      	mov	r4, r0
    f722:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	u32_t expected_wakeup_time;

	__ASSERT(!arch_is_in_isr(), "");
    f726:	b173      	cbz	r3, f746 <z_tick_sleep+0x2a>
    f728:	493c      	ldr	r1, [pc, #240]	; (f81c <z_tick_sleep+0x100>)
    f72a:	f240 437e 	movw	r3, #1150	; 0x47e
    f72e:	4a3c      	ldr	r2, [pc, #240]	; (f820 <z_tick_sleep+0x104>)
    f730:	483c      	ldr	r0, [pc, #240]	; (f824 <z_tick_sleep+0x108>)
    f732:	f001 fb53 	bl	10ddc <printk>
    f736:	483c      	ldr	r0, [pc, #240]	; (f828 <z_tick_sleep+0x10c>)
    f738:	f001 fb50 	bl	10ddc <printk>
    f73c:	f240 417e 	movw	r1, #1150	; 0x47e
    f740:	4837      	ldr	r0, [pc, #220]	; (f820 <z_tick_sleep+0x104>)
    f742:	f001 fde1 	bl	11308 <assert_post_action>

	K_DEBUG("thread %p for %d ticks\n", _current, ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    f746:	b92c      	cbnz	r4, f754 <z_tick_sleep+0x38>
	z_impl_k_yield();
    f748:	f7ff ff3c 	bl	f5c4 <z_impl_k_yield>
		return ticks;
	}
#endif

	return 0;
}
    f74c:	4620      	mov	r0, r4
    f74e:	b002      	add	sp, #8
    f750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_time = ticks + z_tick_get_32();
    f754:	f005 fd07 	bl	15166 <z_tick_get_32>
	struct k_spinlock local_lock = {};
    f758:	2300      	movs	r3, #0
	timeout = Z_TIMEOUT_TICKS(ticks);
    f75a:	4626      	mov	r6, r4
    f75c:	17e7      	asrs	r7, r4, #31
	struct k_spinlock local_lock = {};
    f75e:	9301      	str	r3, [sp, #4]
	expected_wakeup_time = ticks + z_tick_get_32();
    f760:	4404      	add	r4, r0
    f762:	f04f 0320 	mov.w	r3, #32
    f766:	f3ef 8811 	mrs	r8, BASEPRI
    f76a:	f383 8811 	msr	BASEPRI, r3
    f76e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f772:	a801      	add	r0, sp, #4
    f774:	f000 fac2 	bl	fcfc <z_spin_lock_valid>
    f778:	b968      	cbnz	r0, f796 <z_tick_sleep+0x7a>
    f77a:	235c      	movs	r3, #92	; 0x5c
    f77c:	4a2b      	ldr	r2, [pc, #172]	; (f82c <z_tick_sleep+0x110>)
    f77e:	492c      	ldr	r1, [pc, #176]	; (f830 <z_tick_sleep+0x114>)
    f780:	4828      	ldr	r0, [pc, #160]	; (f824 <z_tick_sleep+0x108>)
    f782:	f001 fb2b 	bl	10ddc <printk>
    f786:	482b      	ldr	r0, [pc, #172]	; (f834 <z_tick_sleep+0x118>)
    f788:	a901      	add	r1, sp, #4
    f78a:	f001 fb27 	bl	10ddc <printk>
    f78e:	215c      	movs	r1, #92	; 0x5c
    f790:	4826      	ldr	r0, [pc, #152]	; (f82c <z_tick_sleep+0x110>)
    f792:	f001 fdb9 	bl	11308 <assert_post_action>
	pending_current = _current;
    f796:	4d28      	ldr	r5, [pc, #160]	; (f838 <z_tick_sleep+0x11c>)
	z_spin_lock_set_owner(l);
    f798:	a801      	add	r0, sp, #4
    f79a:	f000 facb 	bl	fd34 <z_spin_lock_set_owner>
    f79e:	68a8      	ldr	r0, [r5, #8]
    f7a0:	4b26      	ldr	r3, [pc, #152]	; (f83c <z_tick_sleep+0x120>)
    f7a2:	6018      	str	r0, [r3, #0]
	z_remove_thread_from_ready_q(_current);
    f7a4:	f7ff fccc 	bl	f140 <z_remove_thread_from_ready_q>
	z_add_thread_timeout(_current, timeout);
    f7a8:	68a8      	ldr	r0, [r5, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    f7aa:	4632      	mov	r2, r6
    f7ac:	463b      	mov	r3, r7
    f7ae:	3018      	adds	r0, #24
    f7b0:	4923      	ldr	r1, [pc, #140]	; (f840 <z_tick_sleep+0x124>)
    f7b2:	f000 fc01 	bl	ffb8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    f7b6:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f7b8:	a801      	add	r0, sp, #4
	thread->base.thread_state |= _THREAD_SUSPENDED;
    f7ba:	7b53      	ldrb	r3, [r2, #13]
    f7bc:	f043 0310 	orr.w	r3, r3, #16
    f7c0:	7353      	strb	r3, [r2, #13]
    f7c2:	f000 faa9 	bl	fd18 <z_spin_unlock_valid>
    f7c6:	b968      	cbnz	r0, f7e4 <z_tick_sleep+0xc8>
    f7c8:	239b      	movs	r3, #155	; 0x9b
    f7ca:	4a18      	ldr	r2, [pc, #96]	; (f82c <z_tick_sleep+0x110>)
    f7cc:	491d      	ldr	r1, [pc, #116]	; (f844 <z_tick_sleep+0x128>)
    f7ce:	4815      	ldr	r0, [pc, #84]	; (f824 <z_tick_sleep+0x108>)
    f7d0:	f001 fb04 	bl	10ddc <printk>
    f7d4:	481c      	ldr	r0, [pc, #112]	; (f848 <z_tick_sleep+0x12c>)
    f7d6:	a901      	add	r1, sp, #4
    f7d8:	f001 fb00 	bl	10ddc <printk>
    f7dc:	219b      	movs	r1, #155	; 0x9b
    f7de:	4813      	ldr	r0, [pc, #76]	; (f82c <z_tick_sleep+0x110>)
    f7e0:	f001 fd92 	bl	11308 <assert_post_action>
    f7e4:	4640      	mov	r0, r8
    f7e6:	f7f3 fa8f 	bl	2d08 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    f7ea:	68ab      	ldr	r3, [r5, #8]
    f7ec:	7b5b      	ldrb	r3, [r3, #13]
    f7ee:	06db      	lsls	r3, r3, #27
    f7f0:	d50e      	bpl.n	f810 <z_tick_sleep+0xf4>
    f7f2:	4916      	ldr	r1, [pc, #88]	; (f84c <z_tick_sleep+0x130>)
    f7f4:	f240 43a3 	movw	r3, #1187	; 0x4a3
    f7f8:	4a09      	ldr	r2, [pc, #36]	; (f820 <z_tick_sleep+0x104>)
    f7fa:	480a      	ldr	r0, [pc, #40]	; (f824 <z_tick_sleep+0x108>)
    f7fc:	f001 faee 	bl	10ddc <printk>
    f800:	4809      	ldr	r0, [pc, #36]	; (f828 <z_tick_sleep+0x10c>)
    f802:	f001 faeb 	bl	10ddc <printk>
    f806:	f240 41a3 	movw	r1, #1187	; 0x4a3
    f80a:	4805      	ldr	r0, [pc, #20]	; (f820 <z_tick_sleep+0x104>)
    f80c:	f001 fd7c 	bl	11308 <assert_post_action>
	ticks = expected_wakeup_time - z_tick_get_32();
    f810:	f005 fca9 	bl	15166 <z_tick_get_32>
    f814:	1a24      	subs	r4, r4, r0
    f816:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    f81a:	e797      	b.n	f74c <z_tick_sleep+0x30>
    f81c:	00019e14 	.word	0x00019e14
    f820:	00019e56 	.word	0x00019e56
    f824:	00016493 	.word	0x00016493
    f828:	0001919c 	.word	0x0001919c
    f82c:	0001691e 	.word	0x0001691e
    f830:	00016944 	.word	0x00016944
    f834:	00016959 	.word	0x00016959
    f838:	20001e10 	.word	0x20001e10
    f83c:	20001e40 	.word	0x20001e40
    f840:	0000ec0d 	.word	0x0000ec0d
    f844:	00016971 	.word	0x00016971
    f848:	00016988 	.word	0x00016988
    f84c:	00019ee0 	.word	0x00019ee0

0000f850 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(k_timeout_t timeout)
{
    f850:	b538      	push	{r3, r4, r5, lr}
    f852:	4604      	mov	r4, r0
    f854:	460d      	mov	r5, r1
    f856:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    f85a:	b173      	cbz	r3, f87a <z_impl_k_sleep+0x2a>
    f85c:	4912      	ldr	r1, [pc, #72]	; (f8a8 <z_impl_k_sleep+0x58>)
    f85e:	f240 43b2 	movw	r3, #1202	; 0x4b2
    f862:	4a12      	ldr	r2, [pc, #72]	; (f8ac <z_impl_k_sleep+0x5c>)
    f864:	4812      	ldr	r0, [pc, #72]	; (f8b0 <z_impl_k_sleep+0x60>)
    f866:	f001 fab9 	bl	10ddc <printk>
    f86a:	4812      	ldr	r0, [pc, #72]	; (f8b4 <z_impl_k_sleep+0x64>)
    f86c:	f001 fab6 	bl	10ddc <printk>
    f870:	f240 41b2 	movw	r1, #1202	; 0x4b2
    f874:	480d      	ldr	r0, [pc, #52]	; (f8ac <z_impl_k_sleep+0x5c>)
    f876:	f001 fd47 	bl	11308 <assert_post_action>

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    f87a:	3501      	adds	r5, #1
    f87c:	bf08      	it	eq
    f87e:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    f882:	d106      	bne.n	f892 <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
    f884:	4b0c      	ldr	r3, [pc, #48]	; (f8b8 <z_impl_k_sleep+0x68>)
    f886:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    f888:	f7ff fb3c 	bl	ef04 <z_impl_k_thread_suspend>
		return (s32_t) K_TICKS_FOREVER;
    f88c:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
    f890:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
    f892:	4620      	mov	r0, r4
    f894:	f7ff ff42 	bl	f71c <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
    f898:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    f89c:	fb80 3403 	smull	r3, r4, r0, r3
    f8a0:	0bd8      	lsrs	r0, r3, #15
    f8a2:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
    f8a6:	e7f3      	b.n	f890 <z_impl_k_sleep+0x40>
    f8a8:	00019e14 	.word	0x00019e14
    f8ac:	00019e56 	.word	0x00019e56
    f8b0:	00016493 	.word	0x00016493
    f8b4:	0001919c 	.word	0x0001919c
    f8b8:	20001e10 	.word	0x20001e10

0000f8bc <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    f8bc:	4b01      	ldr	r3, [pc, #4]	; (f8c4 <z_impl_k_current_get+0x8>)
    f8be:	6898      	ldr	r0, [r3, #8]
    f8c0:	4770      	bx	lr
    f8c2:	bf00      	nop
    f8c4:	20001e10 	.word	0x20001e10

0000f8c8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    f8c8:	b538      	push	{r3, r4, r5, lr}
    f8ca:	4604      	mov	r4, r0
    f8cc:	f04f 0320 	mov.w	r3, #32
    f8d0:	f3ef 8511 	mrs	r5, BASEPRI
    f8d4:	f383 8811 	msr	BASEPRI, r3
    f8d8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f8dc:	4817      	ldr	r0, [pc, #92]	; (f93c <z_impl_k_sem_give+0x74>)
    f8de:	f000 fa0d 	bl	fcfc <z_spin_lock_valid>
    f8e2:	b968      	cbnz	r0, f900 <z_impl_k_sem_give+0x38>
    f8e4:	235c      	movs	r3, #92	; 0x5c
    f8e6:	4a16      	ldr	r2, [pc, #88]	; (f940 <z_impl_k_sem_give+0x78>)
    f8e8:	4916      	ldr	r1, [pc, #88]	; (f944 <z_impl_k_sem_give+0x7c>)
    f8ea:	4817      	ldr	r0, [pc, #92]	; (f948 <z_impl_k_sem_give+0x80>)
    f8ec:	f001 fa76 	bl	10ddc <printk>
    f8f0:	4912      	ldr	r1, [pc, #72]	; (f93c <z_impl_k_sem_give+0x74>)
    f8f2:	4816      	ldr	r0, [pc, #88]	; (f94c <z_impl_k_sem_give+0x84>)
    f8f4:	f001 fa72 	bl	10ddc <printk>
    f8f8:	215c      	movs	r1, #92	; 0x5c
    f8fa:	4811      	ldr	r0, [pc, #68]	; (f940 <z_impl_k_sem_give+0x78>)
    f8fc:	f001 fd04 	bl	11308 <assert_post_action>
	z_spin_lock_set_owner(l);
    f900:	480e      	ldr	r0, [pc, #56]	; (f93c <z_impl_k_sem_give+0x74>)
    f902:	f000 fa17 	bl	fd34 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
    f906:	4620      	mov	r0, r4
    f908:	f7ff fdc0 	bl	f48c <z_unpend_first_thread>

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);

	if (thread != NULL) {
    f90c:	b148      	cbz	r0, f922 <z_impl_k_sem_give+0x5a>
    f90e:	2200      	movs	r2, #0
    f910:	6702      	str	r2, [r0, #112]	; 0x70
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    f912:	f7ff f933 	bl	eb7c <z_ready_thread>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
    f916:	4629      	mov	r1, r5
}
    f918:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    f91c:	4807      	ldr	r0, [pc, #28]	; (f93c <z_impl_k_sem_give+0x74>)
    f91e:	f7fe bf0b 	b.w	e738 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    f922:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    f926:	429a      	cmp	r2, r3
    f928:	bf18      	it	ne
    f92a:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    f92c:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    f92e:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    f930:	f104 0010 	add.w	r0, r4, #16
    f934:	f005 fc8f 	bl	15256 <z_handle_obj_poll_events>
}
    f938:	e7ed      	b.n	f916 <z_impl_k_sem_give+0x4e>
    f93a:	bf00      	nop
    f93c:	20001e50 	.word	0x20001e50
    f940:	0001691e 	.word	0x0001691e
    f944:	00016944 	.word	0x00016944
    f948:	00016493 	.word	0x00016493
    f94c:	00016959 	.word	0x00016959

0000f950 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    f950:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f952:	4604      	mov	r4, r0
    f954:	4616      	mov	r6, r2
    f956:	461f      	mov	r7, r3
    f958:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    f95c:	b17b      	cbz	r3, f97e <z_impl_k_sem_take+0x2e>
    f95e:	ea56 0307 	orrs.w	r3, r6, r7
    f962:	d00c      	beq.n	f97e <z_impl_k_sem_take+0x2e>
    f964:	4935      	ldr	r1, [pc, #212]	; (fa3c <z_impl_k_sem_take+0xec>)
    f966:	238c      	movs	r3, #140	; 0x8c
    f968:	4a35      	ldr	r2, [pc, #212]	; (fa40 <z_impl_k_sem_take+0xf0>)
    f96a:	4836      	ldr	r0, [pc, #216]	; (fa44 <z_impl_k_sem_take+0xf4>)
    f96c:	f001 fa36 	bl	10ddc <printk>
    f970:	4835      	ldr	r0, [pc, #212]	; (fa48 <z_impl_k_sem_take+0xf8>)
    f972:	f001 fa33 	bl	10ddc <printk>
    f976:	218c      	movs	r1, #140	; 0x8c
    f978:	4831      	ldr	r0, [pc, #196]	; (fa40 <z_impl_k_sem_take+0xf0>)
    f97a:	f001 fcc5 	bl	11308 <assert_post_action>
    f97e:	f04f 0320 	mov.w	r3, #32
    f982:	f3ef 8511 	mrs	r5, BASEPRI
    f986:	f383 8811 	msr	BASEPRI, r3
    f98a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f98e:	482f      	ldr	r0, [pc, #188]	; (fa4c <z_impl_k_sem_take+0xfc>)
    f990:	f000 f9b4 	bl	fcfc <z_spin_lock_valid>
    f994:	b968      	cbnz	r0, f9b2 <z_impl_k_sem_take+0x62>
    f996:	235c      	movs	r3, #92	; 0x5c
    f998:	4a2d      	ldr	r2, [pc, #180]	; (fa50 <z_impl_k_sem_take+0x100>)
    f99a:	492e      	ldr	r1, [pc, #184]	; (fa54 <z_impl_k_sem_take+0x104>)
    f99c:	4829      	ldr	r0, [pc, #164]	; (fa44 <z_impl_k_sem_take+0xf4>)
    f99e:	f001 fa1d 	bl	10ddc <printk>
    f9a2:	492a      	ldr	r1, [pc, #168]	; (fa4c <z_impl_k_sem_take+0xfc>)
    f9a4:	482c      	ldr	r0, [pc, #176]	; (fa58 <z_impl_k_sem_take+0x108>)
    f9a6:	f001 fa19 	bl	10ddc <printk>
    f9aa:	215c      	movs	r1, #92	; 0x5c
    f9ac:	4828      	ldr	r0, [pc, #160]	; (fa50 <z_impl_k_sem_take+0x100>)
    f9ae:	f001 fcab 	bl	11308 <assert_post_action>
	z_spin_lock_set_owner(l);
    f9b2:	4826      	ldr	r0, [pc, #152]	; (fa4c <z_impl_k_sem_take+0xfc>)
    f9b4:	f000 f9be 	bl	fd34 <z_spin_lock_set_owner>
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
    f9b8:	68a3      	ldr	r3, [r4, #8]
    f9ba:	b1d3      	cbz	r3, f9f2 <z_impl_k_sem_take+0xa2>
		sem->count--;
    f9bc:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f9be:	4823      	ldr	r0, [pc, #140]	; (fa4c <z_impl_k_sem_take+0xfc>)
    f9c0:	60a3      	str	r3, [r4, #8]
    f9c2:	f000 f9a9 	bl	fd18 <z_spin_unlock_valid>
    f9c6:	b968      	cbnz	r0, f9e4 <z_impl_k_sem_take+0x94>
    f9c8:	2384      	movs	r3, #132	; 0x84
    f9ca:	4a21      	ldr	r2, [pc, #132]	; (fa50 <z_impl_k_sem_take+0x100>)
    f9cc:	4923      	ldr	r1, [pc, #140]	; (fa5c <z_impl_k_sem_take+0x10c>)
    f9ce:	481d      	ldr	r0, [pc, #116]	; (fa44 <z_impl_k_sem_take+0xf4>)
    f9d0:	f001 fa04 	bl	10ddc <printk>
    f9d4:	491d      	ldr	r1, [pc, #116]	; (fa4c <z_impl_k_sem_take+0xfc>)
    f9d6:	4822      	ldr	r0, [pc, #136]	; (fa60 <z_impl_k_sem_take+0x110>)
    f9d8:	f001 fa00 	bl	10ddc <printk>
    f9dc:	2184      	movs	r1, #132	; 0x84
    f9de:	481c      	ldr	r0, [pc, #112]	; (fa50 <z_impl_k_sem_take+0x100>)
    f9e0:	f001 fc92 	bl	11308 <assert_post_action>
	__asm__ volatile(
    f9e4:	f385 8811 	msr	BASEPRI, r5
    f9e8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    f9ec:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
    f9ee:	b003      	add	sp, #12
    f9f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    f9f2:	ea56 0307 	orrs.w	r3, r6, r7
    f9f6:	d118      	bne.n	fa2a <z_impl_k_sem_take+0xda>
    f9f8:	4814      	ldr	r0, [pc, #80]	; (fa4c <z_impl_k_sem_take+0xfc>)
    f9fa:	f000 f98d 	bl	fd18 <z_spin_unlock_valid>
    f9fe:	b968      	cbnz	r0, fa1c <z_impl_k_sem_take+0xcc>
    fa00:	2384      	movs	r3, #132	; 0x84
    fa02:	4a13      	ldr	r2, [pc, #76]	; (fa50 <z_impl_k_sem_take+0x100>)
    fa04:	4915      	ldr	r1, [pc, #84]	; (fa5c <z_impl_k_sem_take+0x10c>)
    fa06:	480f      	ldr	r0, [pc, #60]	; (fa44 <z_impl_k_sem_take+0xf4>)
    fa08:	f001 f9e8 	bl	10ddc <printk>
    fa0c:	490f      	ldr	r1, [pc, #60]	; (fa4c <z_impl_k_sem_take+0xfc>)
    fa0e:	4814      	ldr	r0, [pc, #80]	; (fa60 <z_impl_k_sem_take+0x110>)
    fa10:	f001 f9e4 	bl	10ddc <printk>
    fa14:	2184      	movs	r1, #132	; 0x84
    fa16:	480e      	ldr	r0, [pc, #56]	; (fa50 <z_impl_k_sem_take+0x100>)
    fa18:	f001 fc76 	bl	11308 <assert_post_action>
    fa1c:	f385 8811 	msr	BASEPRI, r5
    fa20:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    fa24:	f06f 000f 	mvn.w	r0, #15
    fa28:	e7e1      	b.n	f9ee <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    fa2a:	4622      	mov	r2, r4
    fa2c:	4629      	mov	r1, r5
    fa2e:	e9cd 6700 	strd	r6, r7, [sp]
    fa32:	4806      	ldr	r0, [pc, #24]	; (fa4c <z_impl_k_sem_take+0xfc>)
    fa34:	f7ff fc6a 	bl	f30c <z_pend_curr>
	return ret;
    fa38:	e7d9      	b.n	f9ee <z_impl_k_sem_take+0x9e>
    fa3a:	bf00      	nop
    fa3c:	00019f40 	.word	0x00019f40
    fa40:	00019f20 	.word	0x00019f20
    fa44:	00016493 	.word	0x00016493
    fa48:	0001919c 	.word	0x0001919c
    fa4c:	20001e50 	.word	0x20001e50
    fa50:	0001691e 	.word	0x0001691e
    fa54:	00016944 	.word	0x00016944
    fa58:	00016959 	.word	0x00016959
    fa5c:	00016971 	.word	0x00016971
    fa60:	00016988 	.word	0x00016988

0000fa64 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
    fa64:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
    fa66:	4c08      	ldr	r4, [pc, #32]	; (fa88 <k_sys_work_q_init+0x24>)
    fa68:	f04f 33ff 	mov.w	r3, #4294967295
    fa6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    fa70:	4620      	mov	r0, r4
    fa72:	4906      	ldr	r1, [pc, #24]	; (fa8c <k_sys_work_q_init+0x28>)
    fa74:	f000 f966 	bl	fd44 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
    fa78:	4905      	ldr	r1, [pc, #20]	; (fa90 <k_sys_work_q_init+0x2c>)
    fa7a:	f104 001c 	add.w	r0, r4, #28
    fa7e:	f005 fb09 	bl	15094 <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
    fa82:	2000      	movs	r0, #0
    fa84:	bd10      	pop	{r4, pc}
    fa86:	bf00      	nop
    fa88:	20001e54 	.word	0x20001e54
    fa8c:	20004868 	.word	0x20004868
    fa90:	00019f8d 	.word	0x00019f8d

0000fa94 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
    fa94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fa98:	b086      	sub	sp, #24
    fa9a:	e9dd 6a11 	ldrd	r6, sl, [sp, #68]	; 0x44
	Z_ASSERT_VALID_PRIO(prio, entry);
    fa9e:	2e0f      	cmp	r6, #15
{
    faa0:	4604      	mov	r4, r0
    faa2:	4688      	mov	r8, r1
    faa4:	4691      	mov	r9, r2
    faa6:	461f      	mov	r7, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    faa8:	d127      	bne.n	fafa <z_setup_new_thread+0x66>
    faaa:	4b20      	ldr	r3, [pc, #128]	; (fb2c <z_setup_new_thread+0x98>)
    faac:	429f      	cmp	r7, r3
    faae:	d128      	bne.n	fb02 <z_setup_new_thread+0x6e>
	sys_dlist_init(&w->waitq);
    fab0:	f104 0328 	add.w	r3, r4, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    fab4:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
	thread_base->thread_state = (u8_t)initial_state;
    fab8:	2304      	movs	r3, #4

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
    faba:	2500      	movs	r5, #0
	thread_base->thread_state = (u8_t)initial_state;
    fabc:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    fabe:	9b10      	ldr	r3, [sp, #64]	; 0x40
    fac0:	464a      	mov	r2, r9
    fac2:	9302      	str	r3, [sp, #8]
    fac4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    fac6:	4641      	mov	r1, r8
    fac8:	9301      	str	r3, [sp, #4]
    faca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    facc:	4620      	mov	r0, r4
    face:	9300      	str	r3, [sp, #0]
	node->prev = NULL;
    fad0:	e9c4 5506 	strd	r5, r5, [r4, #24]
    fad4:	463b      	mov	r3, r7
    fad6:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	thread_base->user_options = (u8_t)options;
    fada:	f884 a00c 	strb.w	sl, [r4, #12]
	thread_base->prio = priority;
    fade:	73a6      	strb	r6, [r4, #14]
	thread_base->sched_locked = 0U;
    fae0:	73e5      	strb	r5, [r4, #15]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    fae2:	f7f3 f9a9 	bl	2e38 <arch_new_thread>
	if (!_current) {
    fae6:	4b12      	ldr	r3, [pc, #72]	; (fb30 <z_setup_new_thread+0x9c>)
	new_thread->fn_abort = NULL;
    fae8:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
	if (!_current) {
    faec:	689b      	ldr	r3, [r3, #8]
    faee:	b103      	cbz	r3, faf2 <z_setup_new_thread+0x5e>
	new_thread->resource_pool = _current->resource_pool;
    faf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    faf2:	66a3      	str	r3, [r4, #104]	; 0x68
}
    faf4:	b006      	add	sp, #24
    faf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    fafa:	f106 0310 	add.w	r3, r6, #16
    fafe:	2b1e      	cmp	r3, #30
    fb00:	d9d6      	bls.n	fab0 <z_setup_new_thread+0x1c>
    fb02:	f44f 73e7 	mov.w	r3, #462	; 0x1ce
    fb06:	4a0b      	ldr	r2, [pc, #44]	; (fb34 <z_setup_new_thread+0xa0>)
    fb08:	490b      	ldr	r1, [pc, #44]	; (fb38 <z_setup_new_thread+0xa4>)
    fb0a:	480c      	ldr	r0, [pc, #48]	; (fb3c <z_setup_new_thread+0xa8>)
    fb0c:	f001 f966 	bl	10ddc <printk>
    fb10:	4631      	mov	r1, r6
    fb12:	f06f 030f 	mvn.w	r3, #15
    fb16:	220e      	movs	r2, #14
    fb18:	4809      	ldr	r0, [pc, #36]	; (fb40 <z_setup_new_thread+0xac>)
    fb1a:	f001 f95f 	bl	10ddc <printk>
    fb1e:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
    fb22:	4804      	ldr	r0, [pc, #16]	; (fb34 <z_setup_new_thread+0xa0>)
    fb24:	f001 fbf0 	bl	11308 <assert_post_action>
    fb28:	e7c2      	b.n	fab0 <z_setup_new_thread+0x1c>
    fb2a:	bf00      	nop
    fb2c:	0000d9b5 	.word	0x0000d9b5
    fb30:	20001e10 	.word	0x20001e10
    fb34:	00019f96 	.word	0x00019f96
    fb38:	00019fb9 	.word	0x00019fb9
    fb3c:	00016493 	.word	0x00016493
    fb40:	0001a039 	.word	0x0001a039

0000fb44 <z_impl_k_thread_create>:
{
    fb44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fb48:	b087      	sub	sp, #28
    fb4a:	4604      	mov	r4, r0
    fb4c:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
    fb50:	460d      	mov	r5, r1
    fb52:	4690      	mov	r8, r2
    fb54:	4699      	mov	r9, r3
    fb56:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    fb5a:	b173      	cbz	r3, fb7a <z_impl_k_thread_create+0x36>
    fb5c:	491b      	ldr	r1, [pc, #108]	; (fbcc <z_impl_k_thread_create+0x88>)
    fb5e:	f240 2343 	movw	r3, #579	; 0x243
    fb62:	4a1b      	ldr	r2, [pc, #108]	; (fbd0 <z_impl_k_thread_create+0x8c>)
    fb64:	481b      	ldr	r0, [pc, #108]	; (fbd4 <z_impl_k_thread_create+0x90>)
    fb66:	f001 f939 	bl	10ddc <printk>
    fb6a:	481b      	ldr	r0, [pc, #108]	; (fbd8 <z_impl_k_thread_create+0x94>)
    fb6c:	f001 f936 	bl	10ddc <printk>
    fb70:	f240 2143 	movw	r1, #579	; 0x243
    fb74:	4816      	ldr	r0, [pc, #88]	; (fbd0 <z_impl_k_thread_create+0x8c>)
    fb76:	f001 fbc7 	bl	11308 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    fb7a:	2300      	movs	r3, #0
    fb7c:	9305      	str	r3, [sp, #20]
    fb7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    fb80:	4642      	mov	r2, r8
    fb82:	9304      	str	r3, [sp, #16]
    fb84:	9b11      	ldr	r3, [sp, #68]	; 0x44
    fb86:	4629      	mov	r1, r5
    fb88:	9303      	str	r3, [sp, #12]
    fb8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    fb8c:	4620      	mov	r0, r4
    fb8e:	9302      	str	r3, [sp, #8]
    fb90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    fb92:	9301      	str	r3, [sp, #4]
    fb94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fb96:	9300      	str	r3, [sp, #0]
    fb98:	464b      	mov	r3, r9
    fb9a:	f7ff ff7b 	bl	fa94 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    fb9e:	1c7b      	adds	r3, r7, #1
    fba0:	bf08      	it	eq
    fba2:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    fba6:	d005      	beq.n	fbb4 <z_impl_k_thread_create+0x70>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    fba8:	ea56 0307 	orrs.w	r3, r6, r7
    fbac:	d106      	bne.n	fbbc <z_impl_k_thread_create+0x78>
	z_sched_start(thread);
    fbae:	4620      	mov	r0, r4
    fbb0:	f7ff f890 	bl	ecd4 <z_sched_start>
}
    fbb4:	4620      	mov	r0, r4
    fbb6:	b007      	add	sp, #28
    fbb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    fbbc:	4632      	mov	r2, r6
    fbbe:	463b      	mov	r3, r7
    fbc0:	4906      	ldr	r1, [pc, #24]	; (fbdc <z_impl_k_thread_create+0x98>)
    fbc2:	f104 0018 	add.w	r0, r4, #24
    fbc6:	f000 f9f7 	bl	ffb8 <z_add_timeout>
    fbca:	e7f3      	b.n	fbb4 <z_impl_k_thread_create+0x70>
    fbcc:	00019e14 	.word	0x00019e14
    fbd0:	00019f96 	.word	0x00019f96
    fbd4:	00016493 	.word	0x00016493
    fbd8:	0001a06a 	.word	0x0001a06a
    fbdc:	0000ec0d 	.word	0x0000ec0d

0000fbe0 <z_init_static_threads>:
{
    fbe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    fbe4:	f8df 9110 	ldr.w	r9, [pc, #272]	; fcf8 <z_init_static_threads+0x118>
    fbe8:	4d3d      	ldr	r5, [pc, #244]	; (fce0 <z_init_static_threads+0x100>)
    fbea:	46c8      	mov	r8, r9
    fbec:	f8df a100 	ldr.w	sl, [pc, #256]	; fcf0 <z_init_static_threads+0x110>
{
    fbf0:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    fbf2:	454d      	cmp	r5, r9
    fbf4:	d90e      	bls.n	fc14 <z_init_static_threads+0x34>
    fbf6:	493b      	ldr	r1, [pc, #236]	; (fce4 <z_init_static_threads+0x104>)
    fbf8:	f44f 732a 	mov.w	r3, #680	; 0x2a8
    fbfc:	4652      	mov	r2, sl
    fbfe:	483a      	ldr	r0, [pc, #232]	; (fce8 <z_init_static_threads+0x108>)
    fc00:	f001 f8ec 	bl	10ddc <printk>
    fc04:	4839      	ldr	r0, [pc, #228]	; (fcec <z_init_static_threads+0x10c>)
    fc06:	f001 f8e9 	bl	10ddc <printk>
    fc0a:	f44f 712a 	mov.w	r1, #680	; 0x2a8
    fc0e:	4650      	mov	r0, sl
    fc10:	f001 fb7a 	bl	11308 <assert_post_action>
    fc14:	4545      	cmp	r5, r8
    fc16:	f105 0430 	add.w	r4, r5, #48	; 0x30
    fc1a:	d31f      	bcc.n	fc5c <z_init_static_threads+0x7c>
	k_sched_lock();
    fc1c:	f7fe fdc8 	bl	e7b0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    fc20:	4c2f      	ldr	r4, [pc, #188]	; (fce0 <z_init_static_threads+0x100>)
    fc22:	4d33      	ldr	r5, [pc, #204]	; (fcf0 <z_init_static_threads+0x110>)
    fc24:	f8df a0bc 	ldr.w	sl, [pc, #188]	; fce4 <z_init_static_threads+0x104>
    fc28:	f8df b0bc 	ldr.w	fp, [pc, #188]	; fce8 <z_init_static_threads+0x108>
    fc2c:	4544      	cmp	r4, r8
    fc2e:	d90e      	bls.n	fc4e <z_init_static_threads+0x6e>
    fc30:	4651      	mov	r1, sl
    fc32:	f240 23c7 	movw	r3, #711	; 0x2c7
    fc36:	462a      	mov	r2, r5
    fc38:	4658      	mov	r0, fp
    fc3a:	f001 f8cf 	bl	10ddc <printk>
    fc3e:	482b      	ldr	r0, [pc, #172]	; (fcec <z_init_static_threads+0x10c>)
    fc40:	f001 f8cc 	bl	10ddc <printk>
    fc44:	f240 21c7 	movw	r1, #711	; 0x2c7
    fc48:	4628      	mov	r0, r5
    fc4a:	f001 fb5d 	bl	11308 <assert_post_action>
    fc4e:	4544      	cmp	r4, r8
    fc50:	d321      	bcc.n	fc96 <z_init_static_threads+0xb6>
}
    fc52:	b007      	add	sp, #28
    fc54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
    fc58:	f7fe beca 	b.w	e9f0 <k_sched_unlock>
		z_setup_new_thread(
    fc5c:	f854 3c04 	ldr.w	r3, [r4, #-4]
    fc60:	9305      	str	r3, [sp, #20]
    fc62:	f854 3c10 	ldr.w	r3, [r4, #-16]
    fc66:	9304      	str	r3, [sp, #16]
    fc68:	f854 3c14 	ldr.w	r3, [r4, #-20]
    fc6c:	9303      	str	r3, [sp, #12]
    fc6e:	f854 3c18 	ldr.w	r3, [r4, #-24]
    fc72:	9302      	str	r3, [sp, #8]
    fc74:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    fc78:	9301      	str	r3, [sp, #4]
    fc7a:	f854 3c20 	ldr.w	r3, [r4, #-32]
    fc7e:	9300      	str	r3, [sp, #0]
    fc80:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    fc84:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    fc88:	f7ff ff04 	bl	fa94 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    fc8c:	f854 3c30 	ldr.w	r3, [r4, #-48]
    fc90:	655d      	str	r5, [r3, #84]	; 0x54
    fc92:	4625      	mov	r5, r4
    fc94:	e7ad      	b.n	fbf2 <z_init_static_threads+0x12>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    fc96:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fc98:	1c5a      	adds	r2, r3, #1
    fc9a:	d017      	beq.n	fccc <z_init_static_threads+0xec>
			return (u32_t)((t * to_hz + off) / from_hz);
    fc9c:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
    fca0:	f240 30e7 	movw	r0, #999	; 0x3e7
    fca4:	2100      	movs	r1, #0
					    K_MSEC(thread_data->init_delay));
    fca6:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
    fcaa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fcae:	2300      	movs	r3, #0
    fcb0:	fbce 010c 	smlal	r0, r1, lr, ip
    fcb4:	f7f0 fa50 	bl	158 <__aeabi_uldivmod>
    fcb8:	2700      	movs	r7, #0
    fcba:	4606      	mov	r6, r0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    fcbc:	ea56 0307 	orrs.w	r3, r6, r7
			schedule_new_thread(thread_data->init_thread,
    fcc0:	f8d4 9000 	ldr.w	r9, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    fcc4:	d104      	bne.n	fcd0 <z_init_static_threads+0xf0>
	z_sched_start(thread);
    fcc6:	4648      	mov	r0, r9
    fcc8:	f7ff f804 	bl	ecd4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    fccc:	3430      	adds	r4, #48	; 0x30
    fcce:	e7ad      	b.n	fc2c <z_init_static_threads+0x4c>
    fcd0:	4602      	mov	r2, r0
    fcd2:	463b      	mov	r3, r7
    fcd4:	4907      	ldr	r1, [pc, #28]	; (fcf4 <z_init_static_threads+0x114>)
    fcd6:	f109 0018 	add.w	r0, r9, #24
    fcda:	f000 f96d 	bl	ffb8 <z_add_timeout>
    fcde:	e7f5      	b.n	fccc <z_init_static_threads+0xec>
    fce0:	2000044c 	.word	0x2000044c
    fce4:	0001a08f 	.word	0x0001a08f
    fce8:	00016493 	.word	0x00016493
    fcec:	000164b0 	.word	0x000164b0
    fcf0:	00019f96 	.word	0x00019f96
    fcf4:	0000ec0d 	.word	0x0000ec0d
    fcf8:	200004ac 	.word	0x200004ac

0000fcfc <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    fcfc:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
    fcfe:	b138      	cbz	r0, fd10 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3) == _current_cpu->id) {
    fd00:	4b04      	ldr	r3, [pc, #16]	; (fd14 <z_spin_lock_valid+0x18>)
    fd02:	f000 0003 	and.w	r0, r0, #3
    fd06:	7d1b      	ldrb	r3, [r3, #20]
    fd08:	1ac0      	subs	r0, r0, r3
    fd0a:	bf18      	it	ne
    fd0c:	2001      	movne	r0, #1
    fd0e:	4770      	bx	lr
			return false;
		}
	}
	return true;
    fd10:	2001      	movs	r0, #1
}
    fd12:	4770      	bx	lr
    fd14:	20001e10 	.word	0x20001e10

0000fd18 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    fd18:	4905      	ldr	r1, [pc, #20]	; (fd30 <z_spin_unlock_valid+0x18>)
{
    fd1a:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    fd1c:	688a      	ldr	r2, [r1, #8]
    fd1e:	7d08      	ldrb	r0, [r1, #20]
    fd20:	6819      	ldr	r1, [r3, #0]
    fd22:	4302      	orrs	r2, r0
    fd24:	2000      	movs	r0, #0
    fd26:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
    fd28:	bf04      	itt	eq
    fd2a:	6018      	streq	r0, [r3, #0]
	return true;
    fd2c:	2001      	moveq	r0, #1
}
    fd2e:	4770      	bx	lr
    fd30:	20001e10 	.word	0x20001e10

0000fd34 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    fd34:	4a02      	ldr	r2, [pc, #8]	; (fd40 <z_spin_lock_set_owner+0xc>)
    fd36:	7d11      	ldrb	r1, [r2, #20]
    fd38:	6893      	ldr	r3, [r2, #8]
    fd3a:	430b      	orrs	r3, r1
    fd3c:	6003      	str	r3, [r0, #0]
}
    fd3e:	4770      	bx	lr
    fd40:	20001e10 	.word	0x20001e10

0000fd44 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
    fd44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fd48:	4604      	mov	r4, r0
    fd4a:	b088      	sub	sp, #32
    fd4c:	460d      	mov	r5, r1
    fd4e:	4616      	mov	r6, r2
    fd50:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
    fd52:	f005 f93b 	bl	14fcc <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
    fd56:	f104 081c 	add.w	r8, r4, #28
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    fd5a:	2200      	movs	r2, #0
    fd5c:	2300      	movs	r3, #0
    fd5e:	e9cd 7203 	strd	r7, r2, [sp, #12]
    fd62:	e9cd 2306 	strd	r2, r3, [sp, #24]
    fd66:	e9cd 2201 	strd	r2, r2, [sp, #4]
    fd6a:	4629      	mov	r1, r5
    fd6c:	4632      	mov	r2, r6
    fd6e:	4640      	mov	r0, r8
    fd70:	4b05      	ldr	r3, [pc, #20]	; (fd88 <k_work_q_start+0x44>)
    fd72:	9400      	str	r4, [sp, #0]
    fd74:	f7ff fee6 	bl	fb44 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    fd78:	4640      	mov	r0, r8
    fd7a:	4904      	ldr	r1, [pc, #16]	; (fd8c <k_work_q_start+0x48>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
    fd7c:	b008      	add	sp, #32
    fd7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    fd82:	f005 b987 	b.w	15094 <z_impl_k_thread_name_set>
    fd86:	bf00      	nop
    fd88:	00010e25 	.word	0x00010e25
    fd8c:	0001a0bc 	.word	0x0001a0bc

0000fd90 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
    fd90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fd94:	4680      	mov	r8, r0
    fd96:	460d      	mov	r5, r1
    fd98:	4616      	mov	r6, r2
    fd9a:	461f      	mov	r7, r3
	__asm__ volatile(
    fd9c:	f04f 0320 	mov.w	r3, #32
    fda0:	f3ef 8911 	mrs	r9, BASEPRI
    fda4:	f383 8811 	msr	BASEPRI, r3
    fda8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    fdac:	4835      	ldr	r0, [pc, #212]	; (fe84 <k_delayed_work_submit_to_queue+0xf4>)
    fdae:	f7ff ffa5 	bl	fcfc <z_spin_lock_valid>
    fdb2:	b968      	cbnz	r0, fdd0 <k_delayed_work_submit_to_queue+0x40>
    fdb4:	235c      	movs	r3, #92	; 0x5c
    fdb6:	4a34      	ldr	r2, [pc, #208]	; (fe88 <k_delayed_work_submit_to_queue+0xf8>)
    fdb8:	4934      	ldr	r1, [pc, #208]	; (fe8c <k_delayed_work_submit_to_queue+0xfc>)
    fdba:	4835      	ldr	r0, [pc, #212]	; (fe90 <k_delayed_work_submit_to_queue+0x100>)
    fdbc:	f001 f80e 	bl	10ddc <printk>
    fdc0:	4930      	ldr	r1, [pc, #192]	; (fe84 <k_delayed_work_submit_to_queue+0xf4>)
    fdc2:	4834      	ldr	r0, [pc, #208]	; (fe94 <k_delayed_work_submit_to_queue+0x104>)
    fdc4:	f001 f80a 	bl	10ddc <printk>
    fdc8:	215c      	movs	r1, #92	; 0x5c
    fdca:	482f      	ldr	r0, [pc, #188]	; (fe88 <k_delayed_work_submit_to_queue+0xf8>)
    fdcc:	f001 fa9c 	bl	11308 <assert_post_action>
	z_spin_lock_set_owner(l);
    fdd0:	482c      	ldr	r0, [pc, #176]	; (fe84 <k_delayed_work_submit_to_queue+0xf4>)
    fdd2:	f7ff ffaf 	bl	fd34 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
    fdd6:	69eb      	ldr	r3, [r5, #28]
    fdd8:	b30b      	cbz	r3, fe1e <k_delayed_work_submit_to_queue+0x8e>
    fdda:	4543      	cmp	r3, r8
    fddc:	d14e      	bne.n	fe7c <k_delayed_work_submit_to_queue+0xec>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
    fdde:	4628      	mov	r0, r5
    fde0:	f005 f976 	bl	150d0 <work_cancel>
		/* -EALREADY indicates the work has already completed so this
		 * is likely a recurring work.
		 */
		if (err == -EALREADY) {
    fde4:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
    fde8:	4604      	mov	r4, r0
		if (err == -EALREADY) {
    fdea:	d01b      	beq.n	fe24 <k_delayed_work_submit_to_queue+0x94>
			err = 0;
		} else if (err < 0) {
    fdec:	2800      	cmp	r0, #0
    fdee:	da1a      	bge.n	fe26 <k_delayed_work_submit_to_queue+0x96>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fdf0:	4824      	ldr	r0, [pc, #144]	; (fe84 <k_delayed_work_submit_to_queue+0xf4>)
    fdf2:	f7ff ff91 	bl	fd18 <z_spin_unlock_valid>
    fdf6:	b968      	cbnz	r0, fe14 <k_delayed_work_submit_to_queue+0x84>
    fdf8:	2384      	movs	r3, #132	; 0x84
    fdfa:	4a23      	ldr	r2, [pc, #140]	; (fe88 <k_delayed_work_submit_to_queue+0xf8>)
    fdfc:	4926      	ldr	r1, [pc, #152]	; (fe98 <k_delayed_work_submit_to_queue+0x108>)
    fdfe:	4824      	ldr	r0, [pc, #144]	; (fe90 <k_delayed_work_submit_to_queue+0x100>)
    fe00:	f000 ffec 	bl	10ddc <printk>
    fe04:	491f      	ldr	r1, [pc, #124]	; (fe84 <k_delayed_work_submit_to_queue+0xf4>)
    fe06:	4825      	ldr	r0, [pc, #148]	; (fe9c <k_delayed_work_submit_to_queue+0x10c>)
    fe08:	f000 ffe8 	bl	10ddc <printk>
    fe0c:	2184      	movs	r1, #132	; 0x84
    fe0e:	481e      	ldr	r0, [pc, #120]	; (fe88 <k_delayed_work_submit_to_queue+0xf8>)
    fe10:	f001 fa7a 	bl	11308 <assert_post_action>
	__asm__ volatile(
    fe14:	f389 8811 	msr	BASEPRI, r9
    fe18:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
    fe1c:	e023      	b.n	fe66 <k_delayed_work_submit_to_queue+0xd6>
	if (work->work_q == work_q) {
    fe1e:	f1b8 0f00 	cmp.w	r8, #0
    fe22:	d0dc      	beq.n	fdde <k_delayed_work_submit_to_queue+0x4e>
	int err = 0;
    fe24:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    fe26:	ea56 0307 	orrs.w	r3, r6, r7
	work->work_q = work_q;
    fe2a:	f8c5 801c 	str.w	r8, [r5, #28]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    fe2e:	d11d      	bne.n	fe6c <k_delayed_work_submit_to_queue+0xdc>
    fe30:	4814      	ldr	r0, [pc, #80]	; (fe84 <k_delayed_work_submit_to_queue+0xf4>)
    fe32:	f7ff ff71 	bl	fd18 <z_spin_unlock_valid>
    fe36:	b968      	cbnz	r0, fe54 <k_delayed_work_submit_to_queue+0xc4>
    fe38:	2384      	movs	r3, #132	; 0x84
    fe3a:	4a13      	ldr	r2, [pc, #76]	; (fe88 <k_delayed_work_submit_to_queue+0xf8>)
    fe3c:	4916      	ldr	r1, [pc, #88]	; (fe98 <k_delayed_work_submit_to_queue+0x108>)
    fe3e:	4814      	ldr	r0, [pc, #80]	; (fe90 <k_delayed_work_submit_to_queue+0x100>)
    fe40:	f000 ffcc 	bl	10ddc <printk>
    fe44:	490f      	ldr	r1, [pc, #60]	; (fe84 <k_delayed_work_submit_to_queue+0xf4>)
    fe46:	4815      	ldr	r0, [pc, #84]	; (fe9c <k_delayed_work_submit_to_queue+0x10c>)
    fe48:	f000 ffc8 	bl	10ddc <printk>
    fe4c:	2184      	movs	r1, #132	; 0x84
    fe4e:	480e      	ldr	r0, [pc, #56]	; (fe88 <k_delayed_work_submit_to_queue+0xf8>)
    fe50:	f001 fa5a 	bl	11308 <assert_post_action>
    fe54:	f389 8811 	msr	BASEPRI, r9
    fe58:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
    fe5c:	4629      	mov	r1, r5
    fe5e:	4640      	mov	r0, r8
    fe60:	f005 f91d 	bl	1509e <k_work_submit_to_queue>
		return 0;
    fe64:	2400      	movs	r4, #0
}
    fe66:	4620      	mov	r0, r4
    fe68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
    fe6c:	4632      	mov	r2, r6
    fe6e:	463b      	mov	r3, r7
    fe70:	490b      	ldr	r1, [pc, #44]	; (fea0 <k_delayed_work_submit_to_queue+0x110>)
    fe72:	f105 000c 	add.w	r0, r5, #12
    fe76:	f000 f89f 	bl	ffb8 <z_add_timeout>
    fe7a:	e7b9      	b.n	fdf0 <k_delayed_work_submit_to_queue+0x60>
		err = -EADDRINUSE;
    fe7c:	f06f 042f 	mvn.w	r4, #47	; 0x2f
    fe80:	e7b6      	b.n	fdf0 <k_delayed_work_submit_to_queue+0x60>
    fe82:	bf00      	nop
    fe84:	20001ee4 	.word	0x20001ee4
    fe88:	0001691e 	.word	0x0001691e
    fe8c:	00016944 	.word	0x00016944
    fe90:	00016493 	.word	0x00016493
    fe94:	00016959 	.word	0x00016959
    fe98:	00016971 	.word	0x00016971
    fe9c:	00016988 	.word	0x00016988
    fea0:	000150c7 	.word	0x000150c7

0000fea4 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
    fea4:	b538      	push	{r3, r4, r5, lr}
	if (!work->work_q) {
    fea6:	69c3      	ldr	r3, [r0, #28]
{
    fea8:	4604      	mov	r4, r0
	if (!work->work_q) {
    feaa:	2b00      	cmp	r3, #0
    feac:	d038      	beq.n	ff20 <k_delayed_work_cancel+0x7c>
	__asm__ volatile(
    feae:	f04f 0320 	mov.w	r3, #32
    feb2:	f3ef 8511 	mrs	r5, BASEPRI
    feb6:	f383 8811 	msr	BASEPRI, r3
    feba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    febe:	481a      	ldr	r0, [pc, #104]	; (ff28 <k_delayed_work_cancel+0x84>)
    fec0:	f7ff ff1c 	bl	fcfc <z_spin_lock_valid>
    fec4:	b968      	cbnz	r0, fee2 <k_delayed_work_cancel+0x3e>
    fec6:	235c      	movs	r3, #92	; 0x5c
    fec8:	4a18      	ldr	r2, [pc, #96]	; (ff2c <k_delayed_work_cancel+0x88>)
    feca:	4919      	ldr	r1, [pc, #100]	; (ff30 <k_delayed_work_cancel+0x8c>)
    fecc:	4819      	ldr	r0, [pc, #100]	; (ff34 <k_delayed_work_cancel+0x90>)
    fece:	f000 ff85 	bl	10ddc <printk>
    fed2:	4915      	ldr	r1, [pc, #84]	; (ff28 <k_delayed_work_cancel+0x84>)
    fed4:	4818      	ldr	r0, [pc, #96]	; (ff38 <k_delayed_work_cancel+0x94>)
    fed6:	f000 ff81 	bl	10ddc <printk>
    feda:	215c      	movs	r1, #92	; 0x5c
    fedc:	4813      	ldr	r0, [pc, #76]	; (ff2c <k_delayed_work_cancel+0x88>)
    fede:	f001 fa13 	bl	11308 <assert_post_action>
	z_spin_lock_set_owner(l);
    fee2:	4811      	ldr	r0, [pc, #68]	; (ff28 <k_delayed_work_cancel+0x84>)
    fee4:	f7ff ff26 	bl	fd34 <z_spin_lock_set_owner>
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = work_cancel(work);
    fee8:	4620      	mov	r0, r4
    feea:	f005 f8f1 	bl	150d0 <work_cancel>
    feee:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fef0:	480d      	ldr	r0, [pc, #52]	; (ff28 <k_delayed_work_cancel+0x84>)
    fef2:	f7ff ff11 	bl	fd18 <z_spin_unlock_valid>
    fef6:	b968      	cbnz	r0, ff14 <k_delayed_work_cancel+0x70>
    fef8:	2384      	movs	r3, #132	; 0x84
    fefa:	4a0c      	ldr	r2, [pc, #48]	; (ff2c <k_delayed_work_cancel+0x88>)
    fefc:	490f      	ldr	r1, [pc, #60]	; (ff3c <k_delayed_work_cancel+0x98>)
    fefe:	480d      	ldr	r0, [pc, #52]	; (ff34 <k_delayed_work_cancel+0x90>)
    ff00:	f000 ff6c 	bl	10ddc <printk>
    ff04:	4908      	ldr	r1, [pc, #32]	; (ff28 <k_delayed_work_cancel+0x84>)
    ff06:	480e      	ldr	r0, [pc, #56]	; (ff40 <k_delayed_work_cancel+0x9c>)
    ff08:	f000 ff68 	bl	10ddc <printk>
    ff0c:	2184      	movs	r1, #132	; 0x84
    ff0e:	4807      	ldr	r0, [pc, #28]	; (ff2c <k_delayed_work_cancel+0x88>)
    ff10:	f001 f9fa 	bl	11308 <assert_post_action>
	__asm__ volatile(
    ff14:	f385 8811 	msr	BASEPRI, r5
    ff18:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    ff1c:	4620      	mov	r0, r4
    ff1e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    ff20:	f06f 0415 	mvn.w	r4, #21
    ff24:	e7fa      	b.n	ff1c <k_delayed_work_cancel+0x78>
    ff26:	bf00      	nop
    ff28:	20001ee4 	.word	0x20001ee4
    ff2c:	0001691e 	.word	0x0001691e
    ff30:	00016944 	.word	0x00016944
    ff34:	00016493 	.word	0x00016493
    ff38:	00016959 	.word	0x00016959
    ff3c:	00016971 	.word	0x00016971
    ff40:	00016988 	.word	0x00016988

0000ff44 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    ff44:	4b03      	ldr	r3, [pc, #12]	; (ff54 <elapsed+0x10>)
    ff46:	681b      	ldr	r3, [r3, #0]
    ff48:	b90b      	cbnz	r3, ff4e <elapsed+0xa>
    ff4a:	f7f2 bc79 	b.w	2840 <z_clock_elapsed>
}
    ff4e:	2000      	movs	r0, #0
    ff50:	4770      	bx	lr
    ff52:	bf00      	nop
    ff54:	20001ee8 	.word	0x20001ee8

0000ff58 <next_timeout>:
	return list->head == list;
    ff58:	4b0b      	ldr	r3, [pc, #44]	; (ff88 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
    ff5a:	b510      	push	{r4, lr}
    ff5c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ff5e:	429c      	cmp	r4, r3
    ff60:	bf08      	it	eq
    ff62:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
    ff64:	f7ff ffee 	bl	ff44 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    ff68:	b154      	cbz	r4, ff80 <next_timeout+0x28>
    ff6a:	68a3      	ldr	r3, [r4, #8]
    ff6c:	1a18      	subs	r0, r3, r0
    ff6e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    ff72:	4b06      	ldr	r3, [pc, #24]	; (ff8c <next_timeout+0x34>)
    ff74:	691b      	ldr	r3, [r3, #16]
    ff76:	b113      	cbz	r3, ff7e <next_timeout+0x26>
    ff78:	4298      	cmp	r0, r3
    ff7a:	bfa8      	it	ge
    ff7c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    ff7e:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    ff80:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    ff84:	e7f5      	b.n	ff72 <next_timeout+0x1a>
    ff86:	bf00      	nop
    ff88:	200002f0 	.word	0x200002f0
    ff8c:	20001e10 	.word	0x20001e10

0000ff90 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    ff90:	6803      	ldr	r3, [r0, #0]
    ff92:	b140      	cbz	r0, ffa6 <remove_timeout+0x16>
    ff94:	4a07      	ldr	r2, [pc, #28]	; (ffb4 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
    ff96:	6852      	ldr	r2, [r2, #4]
    ff98:	4290      	cmp	r0, r2
    ff9a:	d004      	beq.n	ffa6 <remove_timeout+0x16>
	if (next(t) != NULL) {
    ff9c:	b11b      	cbz	r3, ffa6 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
    ff9e:	689a      	ldr	r2, [r3, #8]
    ffa0:	6881      	ldr	r1, [r0, #8]
    ffa2:	440a      	add	r2, r1
    ffa4:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
    ffa6:	6842      	ldr	r2, [r0, #4]
    ffa8:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    ffaa:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    ffac:	2300      	movs	r3, #0
	node->prev = NULL;
    ffae:	e9c0 3300 	strd	r3, r3, [r0]
}
    ffb2:	4770      	bx	lr
    ffb4:	200002f0 	.word	0x200002f0

0000ffb8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    ffb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ffbc:	9101      	str	r1, [sp, #4]
    ffbe:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    ffc0:	1c4b      	adds	r3, r1, #1
    ffc2:	bf08      	it	eq
    ffc4:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    ffc8:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    ffca:	f000 80ad 	beq.w	10128 <z_add_timeout+0x170>
#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    ffce:	f06f 0301 	mvn.w	r3, #1
    ffd2:	f04f 3bff 	mov.w	fp, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
    ffd6:	1c54      	adds	r4, r2, #1
    ffd8:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    ffdc:	ebb3 0804 	subs.w	r8, r3, r4
    ffe0:	eb6b 0905 	sbc.w	r9, fp, r5
    ffe4:	f1b8 0f00 	cmp.w	r8, #0
    ffe8:	f179 0300 	sbcs.w	r3, r9, #0
    ffec:	db0f      	blt.n	1000e <z_add_timeout+0x56>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
    ffee:	f7ff ffa9 	bl	ff44 <elapsed>
    fff2:	f06f 0301 	mvn.w	r3, #1
    fff6:	4a52      	ldr	r2, [pc, #328]	; (10140 <z_add_timeout+0x188>)
    fff8:	e9d2 1c00 	ldrd	r1, ip, [r2]
    fffc:	1a5b      	subs	r3, r3, r1
    fffe:	eb6b 020c 	sbc.w	r2, fp, ip
   10002:	1b1e      	subs	r6, r3, r4
   10004:	eb62 0705 	sbc.w	r7, r2, r5
   10008:	1a34      	subs	r4, r6, r0
   1000a:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   1000e:	f8da 3000 	ldr.w	r3, [sl]
   10012:	b163      	cbz	r3, 1002e <z_add_timeout+0x76>
   10014:	494b      	ldr	r1, [pc, #300]	; (10144 <z_add_timeout+0x18c>)
   10016:	2367      	movs	r3, #103	; 0x67
   10018:	4a4b      	ldr	r2, [pc, #300]	; (10148 <z_add_timeout+0x190>)
   1001a:	484c      	ldr	r0, [pc, #304]	; (1014c <z_add_timeout+0x194>)
   1001c:	f000 fede 	bl	10ddc <printk>
   10020:	484b      	ldr	r0, [pc, #300]	; (10150 <z_add_timeout+0x198>)
   10022:	f000 fedb 	bl	10ddc <printk>
   10026:	2167      	movs	r1, #103	; 0x67
   10028:	4847      	ldr	r0, [pc, #284]	; (10148 <z_add_timeout+0x190>)
   1002a:	f001 f96d 	bl	11308 <assert_post_action>
	to->fn = fn;
   1002e:	9b01      	ldr	r3, [sp, #4]
	ticks = MAX(1, ticks);
   10030:	2c01      	cmp	r4, #1
	to->fn = fn;
   10032:	f8ca 300c 	str.w	r3, [sl, #12]
	ticks = MAX(1, ticks);
   10036:	f175 0300 	sbcs.w	r3, r5, #0
   1003a:	bfb8      	it	lt
   1003c:	2401      	movlt	r4, #1
	__asm__ volatile(
   1003e:	f04f 0320 	mov.w	r3, #32
   10042:	f3ef 8611 	mrs	r6, BASEPRI
   10046:	f383 8811 	msr	BASEPRI, r3
   1004a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1004e:	4841      	ldr	r0, [pc, #260]	; (10154 <z_add_timeout+0x19c>)
   10050:	f7ff fe54 	bl	fcfc <z_spin_lock_valid>
   10054:	b968      	cbnz	r0, 10072 <z_add_timeout+0xba>
   10056:	235c      	movs	r3, #92	; 0x5c
   10058:	4a3f      	ldr	r2, [pc, #252]	; (10158 <z_add_timeout+0x1a0>)
   1005a:	4940      	ldr	r1, [pc, #256]	; (1015c <z_add_timeout+0x1a4>)
   1005c:	483b      	ldr	r0, [pc, #236]	; (1014c <z_add_timeout+0x194>)
   1005e:	f000 febd 	bl	10ddc <printk>
   10062:	493c      	ldr	r1, [pc, #240]	; (10154 <z_add_timeout+0x19c>)
   10064:	483e      	ldr	r0, [pc, #248]	; (10160 <z_add_timeout+0x1a8>)
   10066:	f000 feb9 	bl	10ddc <printk>
   1006a:	215c      	movs	r1, #92	; 0x5c
   1006c:	483a      	ldr	r0, [pc, #232]	; (10158 <z_add_timeout+0x1a0>)
   1006e:	f001 f94b 	bl	11308 <assert_post_action>
	z_spin_lock_set_owner(l);
   10072:	4838      	ldr	r0, [pc, #224]	; (10154 <z_add_timeout+0x19c>)
   10074:	f7ff fe5e 	bl	fd34 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   10078:	f7ff ff64 	bl	ff44 <elapsed>
   1007c:	4420      	add	r0, r4
	return list->head == list;
   1007e:	4c39      	ldr	r4, [pc, #228]	; (10164 <z_add_timeout+0x1ac>)
   10080:	f8ca 0008 	str.w	r0, [sl, #8]
   10084:	6825      	ldr	r5, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10086:	42a5      	cmp	r5, r4
   10088:	d005      	beq.n	10096 <z_add_timeout+0xde>
		for (t = first(); t != NULL; t = next(t)) {
			__ASSERT(t->dticks >= 0, "");
   1008a:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 10148 <z_add_timeout+0x190>
   1008e:	4f36      	ldr	r7, [pc, #216]	; (10168 <z_add_timeout+0x1b0>)
   10090:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 1014c <z_add_timeout+0x194>
		for (t = first(); t != NULL; t = next(t)) {
   10094:	b955      	cbnz	r5, 100ac <z_add_timeout+0xf4>
	node->prev = list->tail;
   10096:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   10098:	f8ca 4000 	str.w	r4, [sl]
	node->prev = list->tail;
   1009c:	f8ca 3004 	str.w	r3, [sl, #4]
	list->tail->next = node;
   100a0:	6863      	ldr	r3, [r4, #4]
   100a2:	f8c3 a000 	str.w	sl, [r3]
	list->tail = node;
   100a6:	f8c4 a004 	str.w	sl, [r4, #4]
}
   100aa:	e01d      	b.n	100e8 <z_add_timeout+0x130>
			__ASSERT(t->dticks >= 0, "");
   100ac:	68ab      	ldr	r3, [r5, #8]
   100ae:	2b00      	cmp	r3, #0
   100b0:	da0c      	bge.n	100cc <z_add_timeout+0x114>
   100b2:	4639      	mov	r1, r7
   100b4:	2370      	movs	r3, #112	; 0x70
   100b6:	464a      	mov	r2, r9
   100b8:	4640      	mov	r0, r8
   100ba:	f000 fe8f 	bl	10ddc <printk>
   100be:	4824      	ldr	r0, [pc, #144]	; (10150 <z_add_timeout+0x198>)
   100c0:	f000 fe8c 	bl	10ddc <printk>
   100c4:	2170      	movs	r1, #112	; 0x70
   100c6:	4648      	mov	r0, r9
   100c8:	f001 f91e 	bl	11308 <assert_post_action>

			if (t->dticks > to->dticks) {
   100cc:	68aa      	ldr	r2, [r5, #8]
   100ce:	f8da 3008 	ldr.w	r3, [sl, #8]
   100d2:	429a      	cmp	r2, r3
   100d4:	dd2b      	ble.n	1012e <z_add_timeout+0x176>
				t->dticks -= to->dticks;
   100d6:	1ad3      	subs	r3, r2, r3
   100d8:	60ab      	str	r3, [r5, #8]
	node->prev = successor->prev;
   100da:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   100dc:	e9ca 5300 	strd	r5, r3, [sl]
	successor->prev->next = node;
   100e0:	f8c3 a000 	str.w	sl, [r3]
	successor->prev = node;
   100e4:	f8c5 a004 	str.w	sl, [r5, #4]
	return list->head == list;
   100e8:	6823      	ldr	r3, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   100ea:	42a3      	cmp	r3, r4
   100ec:	d006      	beq.n	100fc <z_add_timeout+0x144>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   100ee:	459a      	cmp	sl, r3
   100f0:	d104      	bne.n	100fc <z_add_timeout+0x144>
			z_clock_set_timeout(next_timeout(), false);
   100f2:	f7ff ff31 	bl	ff58 <next_timeout>
   100f6:	2100      	movs	r1, #0
   100f8:	f7f2 fb3e 	bl	2778 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   100fc:	4815      	ldr	r0, [pc, #84]	; (10154 <z_add_timeout+0x19c>)
   100fe:	f7ff fe0b 	bl	fd18 <z_spin_unlock_valid>
   10102:	b968      	cbnz	r0, 10120 <z_add_timeout+0x168>
   10104:	2384      	movs	r3, #132	; 0x84
   10106:	4a14      	ldr	r2, [pc, #80]	; (10158 <z_add_timeout+0x1a0>)
   10108:	4918      	ldr	r1, [pc, #96]	; (1016c <z_add_timeout+0x1b4>)
   1010a:	4810      	ldr	r0, [pc, #64]	; (1014c <z_add_timeout+0x194>)
   1010c:	f000 fe66 	bl	10ddc <printk>
   10110:	4910      	ldr	r1, [pc, #64]	; (10154 <z_add_timeout+0x19c>)
   10112:	4817      	ldr	r0, [pc, #92]	; (10170 <z_add_timeout+0x1b8>)
   10114:	f000 fe62 	bl	10ddc <printk>
   10118:	2184      	movs	r1, #132	; 0x84
   1011a:	480f      	ldr	r0, [pc, #60]	; (10158 <z_add_timeout+0x1a0>)
   1011c:	f001 f8f4 	bl	11308 <assert_post_action>
	__asm__ volatile(
   10120:	f386 8811 	msr	BASEPRI, r6
   10124:	f3bf 8f6f 	isb	sy
		}
	}
}
   10128:	b003      	add	sp, #12
   1012a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   1012e:	1a9b      	subs	r3, r3, r2
   10130:	f8ca 3008 	str.w	r3, [sl, #8]
	return (node == list->tail) ? NULL : node->next;
   10134:	6863      	ldr	r3, [r4, #4]
   10136:	429d      	cmp	r5, r3
   10138:	d0ad      	beq.n	10096 <z_add_timeout+0xde>
   1013a:	682d      	ldr	r5, [r5, #0]
   1013c:	e7aa      	b.n	10094 <z_add_timeout+0xdc>
   1013e:	bf00      	nop
   10140:	200008e8 	.word	0x200008e8
   10144:	0001a0ea 	.word	0x0001a0ea
   10148:	0001a0c6 	.word	0x0001a0c6
   1014c:	00016493 	.word	0x00016493
   10150:	0001919c 	.word	0x0001919c
   10154:	20001eec 	.word	0x20001eec
   10158:	0001691e 	.word	0x0001691e
   1015c:	00016944 	.word	0x00016944
   10160:	00016959 	.word	0x00016959
   10164:	200002f0 	.word	0x200002f0
   10168:	0001a10a 	.word	0x0001a10a
   1016c:	00016971 	.word	0x00016971
   10170:	00016988 	.word	0x00016988

00010174 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   10174:	b538      	push	{r3, r4, r5, lr}
   10176:	4604      	mov	r4, r0
	__asm__ volatile(
   10178:	f04f 0320 	mov.w	r3, #32
   1017c:	f3ef 8511 	mrs	r5, BASEPRI
   10180:	f383 8811 	msr	BASEPRI, r3
   10184:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10188:	481a      	ldr	r0, [pc, #104]	; (101f4 <z_abort_timeout+0x80>)
   1018a:	f7ff fdb7 	bl	fcfc <z_spin_lock_valid>
   1018e:	b968      	cbnz	r0, 101ac <z_abort_timeout+0x38>
   10190:	235c      	movs	r3, #92	; 0x5c
   10192:	4a19      	ldr	r2, [pc, #100]	; (101f8 <z_abort_timeout+0x84>)
   10194:	4919      	ldr	r1, [pc, #100]	; (101fc <z_abort_timeout+0x88>)
   10196:	481a      	ldr	r0, [pc, #104]	; (10200 <z_abort_timeout+0x8c>)
   10198:	f000 fe20 	bl	10ddc <printk>
   1019c:	4915      	ldr	r1, [pc, #84]	; (101f4 <z_abort_timeout+0x80>)
   1019e:	4819      	ldr	r0, [pc, #100]	; (10204 <z_abort_timeout+0x90>)
   101a0:	f000 fe1c 	bl	10ddc <printk>
   101a4:	215c      	movs	r1, #92	; 0x5c
   101a6:	4814      	ldr	r0, [pc, #80]	; (101f8 <z_abort_timeout+0x84>)
   101a8:	f001 f8ae 	bl	11308 <assert_post_action>
	z_spin_lock_set_owner(l);
   101ac:	4811      	ldr	r0, [pc, #68]	; (101f4 <z_abort_timeout+0x80>)
   101ae:	f7ff fdc1 	bl	fd34 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   101b2:	6823      	ldr	r3, [r4, #0]
   101b4:	b1db      	cbz	r3, 101ee <z_abort_timeout+0x7a>
			remove_timeout(to);
   101b6:	4620      	mov	r0, r4
   101b8:	f7ff feea 	bl	ff90 <remove_timeout>
			ret = 0;
   101bc:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   101be:	480d      	ldr	r0, [pc, #52]	; (101f4 <z_abort_timeout+0x80>)
   101c0:	f7ff fdaa 	bl	fd18 <z_spin_unlock_valid>
   101c4:	b968      	cbnz	r0, 101e2 <z_abort_timeout+0x6e>
   101c6:	2384      	movs	r3, #132	; 0x84
   101c8:	4a0b      	ldr	r2, [pc, #44]	; (101f8 <z_abort_timeout+0x84>)
   101ca:	490f      	ldr	r1, [pc, #60]	; (10208 <z_abort_timeout+0x94>)
   101cc:	480c      	ldr	r0, [pc, #48]	; (10200 <z_abort_timeout+0x8c>)
   101ce:	f000 fe05 	bl	10ddc <printk>
   101d2:	4908      	ldr	r1, [pc, #32]	; (101f4 <z_abort_timeout+0x80>)
   101d4:	480d      	ldr	r0, [pc, #52]	; (1020c <z_abort_timeout+0x98>)
   101d6:	f000 fe01 	bl	10ddc <printk>
   101da:	2184      	movs	r1, #132	; 0x84
   101dc:	4806      	ldr	r0, [pc, #24]	; (101f8 <z_abort_timeout+0x84>)
   101de:	f001 f893 	bl	11308 <assert_post_action>
	__asm__ volatile(
   101e2:	f385 8811 	msr	BASEPRI, r5
   101e6:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   101ea:	4620      	mov	r0, r4
   101ec:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   101ee:	f06f 0415 	mvn.w	r4, #21
   101f2:	e7e4      	b.n	101be <z_abort_timeout+0x4a>
   101f4:	20001eec 	.word	0x20001eec
   101f8:	0001691e 	.word	0x0001691e
   101fc:	00016944 	.word	0x00016944
   10200:	00016493 	.word	0x00016493
   10204:	00016959 	.word	0x00016959
   10208:	00016971 	.word	0x00016971
   1020c:	00016988 	.word	0x00016988

00010210 <z_get_next_timeout_expiry>:

	return ticks;
}

s32_t z_get_next_timeout_expiry(void)
{
   10210:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   10212:	f04f 0320 	mov.w	r3, #32
   10216:	f3ef 8511 	mrs	r5, BASEPRI
   1021a:	f383 8811 	msr	BASEPRI, r3
   1021e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10222:	4818      	ldr	r0, [pc, #96]	; (10284 <z_get_next_timeout_expiry+0x74>)
   10224:	f7ff fd6a 	bl	fcfc <z_spin_lock_valid>
   10228:	b968      	cbnz	r0, 10246 <z_get_next_timeout_expiry+0x36>
   1022a:	235c      	movs	r3, #92	; 0x5c
   1022c:	4a16      	ldr	r2, [pc, #88]	; (10288 <z_get_next_timeout_expiry+0x78>)
   1022e:	4917      	ldr	r1, [pc, #92]	; (1028c <z_get_next_timeout_expiry+0x7c>)
   10230:	4817      	ldr	r0, [pc, #92]	; (10290 <z_get_next_timeout_expiry+0x80>)
   10232:	f000 fdd3 	bl	10ddc <printk>
   10236:	4913      	ldr	r1, [pc, #76]	; (10284 <z_get_next_timeout_expiry+0x74>)
   10238:	4816      	ldr	r0, [pc, #88]	; (10294 <z_get_next_timeout_expiry+0x84>)
   1023a:	f000 fdcf 	bl	10ddc <printk>
   1023e:	215c      	movs	r1, #92	; 0x5c
   10240:	4811      	ldr	r0, [pc, #68]	; (10288 <z_get_next_timeout_expiry+0x78>)
   10242:	f001 f861 	bl	11308 <assert_post_action>
	z_spin_lock_set_owner(l);
   10246:	480f      	ldr	r0, [pc, #60]	; (10284 <z_get_next_timeout_expiry+0x74>)
   10248:	f7ff fd74 	bl	fd34 <z_spin_lock_set_owner>
	s32_t ret = (s32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   1024c:	f7ff fe84 	bl	ff58 <next_timeout>
   10250:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10252:	480c      	ldr	r0, [pc, #48]	; (10284 <z_get_next_timeout_expiry+0x74>)
   10254:	f7ff fd60 	bl	fd18 <z_spin_unlock_valid>
   10258:	b968      	cbnz	r0, 10276 <z_get_next_timeout_expiry+0x66>
   1025a:	2384      	movs	r3, #132	; 0x84
   1025c:	4a0a      	ldr	r2, [pc, #40]	; (10288 <z_get_next_timeout_expiry+0x78>)
   1025e:	490e      	ldr	r1, [pc, #56]	; (10298 <z_get_next_timeout_expiry+0x88>)
   10260:	480b      	ldr	r0, [pc, #44]	; (10290 <z_get_next_timeout_expiry+0x80>)
   10262:	f000 fdbb 	bl	10ddc <printk>
   10266:	4907      	ldr	r1, [pc, #28]	; (10284 <z_get_next_timeout_expiry+0x74>)
   10268:	480c      	ldr	r0, [pc, #48]	; (1029c <z_get_next_timeout_expiry+0x8c>)
   1026a:	f000 fdb7 	bl	10ddc <printk>
   1026e:	2184      	movs	r1, #132	; 0x84
   10270:	4805      	ldr	r0, [pc, #20]	; (10288 <z_get_next_timeout_expiry+0x78>)
   10272:	f001 f849 	bl	11308 <assert_post_action>
	__asm__ volatile(
   10276:	f385 8811 	msr	BASEPRI, r5
   1027a:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   1027e:	4620      	mov	r0, r4
   10280:	bd38      	pop	{r3, r4, r5, pc}
   10282:	bf00      	nop
   10284:	20001eec 	.word	0x20001eec
   10288:	0001691e 	.word	0x0001691e
   1028c:	00016944 	.word	0x00016944
   10290:	00016493 	.word	0x00016493
   10294:	00016959 	.word	0x00016959
   10298:	00016971 	.word	0x00016971
   1029c:	00016988 	.word	0x00016988

000102a0 <z_set_timeout_expiry>:

void z_set_timeout_expiry(s32_t ticks, bool idle)
{
   102a0:	b570      	push	{r4, r5, r6, lr}
   102a2:	4604      	mov	r4, r0
   102a4:	460d      	mov	r5, r1
	__asm__ volatile(
   102a6:	f04f 0320 	mov.w	r3, #32
   102aa:	f3ef 8611 	mrs	r6, BASEPRI
   102ae:	f383 8811 	msr	BASEPRI, r3
   102b2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   102b6:	481b      	ldr	r0, [pc, #108]	; (10324 <z_set_timeout_expiry+0x84>)
   102b8:	f7ff fd20 	bl	fcfc <z_spin_lock_valid>
   102bc:	b968      	cbnz	r0, 102da <z_set_timeout_expiry+0x3a>
   102be:	235c      	movs	r3, #92	; 0x5c
   102c0:	4a19      	ldr	r2, [pc, #100]	; (10328 <z_set_timeout_expiry+0x88>)
   102c2:	491a      	ldr	r1, [pc, #104]	; (1032c <z_set_timeout_expiry+0x8c>)
   102c4:	481a      	ldr	r0, [pc, #104]	; (10330 <z_set_timeout_expiry+0x90>)
   102c6:	f000 fd89 	bl	10ddc <printk>
   102ca:	4916      	ldr	r1, [pc, #88]	; (10324 <z_set_timeout_expiry+0x84>)
   102cc:	4819      	ldr	r0, [pc, #100]	; (10334 <z_set_timeout_expiry+0x94>)
   102ce:	f000 fd85 	bl	10ddc <printk>
   102d2:	215c      	movs	r1, #92	; 0x5c
   102d4:	4814      	ldr	r0, [pc, #80]	; (10328 <z_set_timeout_expiry+0x88>)
   102d6:	f001 f817 	bl	11308 <assert_post_action>
	z_spin_lock_set_owner(l);
   102da:	4812      	ldr	r0, [pc, #72]	; (10324 <z_set_timeout_expiry+0x84>)
   102dc:	f7ff fd2a 	bl	fd34 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next = next_timeout();
   102e0:	f7ff fe3a 	bl	ff58 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   102e4:	2801      	cmp	r0, #1
   102e6:	dd05      	ble.n	102f4 <z_set_timeout_expiry+0x54>
   102e8:	42a0      	cmp	r0, r4
   102ea:	dd03      	ble.n	102f4 <z_set_timeout_expiry+0x54>
			z_clock_set_timeout(ticks, idle);
   102ec:	4629      	mov	r1, r5
   102ee:	4620      	mov	r0, r4
   102f0:	f7f2 fa42 	bl	2778 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   102f4:	480b      	ldr	r0, [pc, #44]	; (10324 <z_set_timeout_expiry+0x84>)
   102f6:	f7ff fd0f 	bl	fd18 <z_spin_unlock_valid>
   102fa:	b968      	cbnz	r0, 10318 <z_set_timeout_expiry+0x78>
   102fc:	2384      	movs	r3, #132	; 0x84
   102fe:	4a0a      	ldr	r2, [pc, #40]	; (10328 <z_set_timeout_expiry+0x88>)
   10300:	490d      	ldr	r1, [pc, #52]	; (10338 <z_set_timeout_expiry+0x98>)
   10302:	480b      	ldr	r0, [pc, #44]	; (10330 <z_set_timeout_expiry+0x90>)
   10304:	f000 fd6a 	bl	10ddc <printk>
   10308:	4906      	ldr	r1, [pc, #24]	; (10324 <z_set_timeout_expiry+0x84>)
   1030a:	480c      	ldr	r0, [pc, #48]	; (1033c <z_set_timeout_expiry+0x9c>)
   1030c:	f000 fd66 	bl	10ddc <printk>
   10310:	2184      	movs	r1, #132	; 0x84
   10312:	4805      	ldr	r0, [pc, #20]	; (10328 <z_set_timeout_expiry+0x88>)
   10314:	f000 fff8 	bl	11308 <assert_post_action>
	__asm__ volatile(
   10318:	f386 8811 	msr	BASEPRI, r6
   1031c:	f3bf 8f6f 	isb	sy
		}
	}
}
   10320:	bd70      	pop	{r4, r5, r6, pc}
   10322:	bf00      	nop
   10324:	20001eec 	.word	0x20001eec
   10328:	0001691e 	.word	0x0001691e
   1032c:	00016944 	.word	0x00016944
   10330:	00016493 	.word	0x00016493
   10334:	00016959 	.word	0x00016959
   10338:	00016971 	.word	0x00016971
   1033c:	00016988 	.word	0x00016988

00010340 <z_clock_announce>:

void z_clock_announce(s32_t ticks)
{
   10340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10344:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   10346:	f7fe fda7 	bl	ee98 <z_time_slice>
	__asm__ volatile(
   1034a:	f04f 0320 	mov.w	r3, #32
   1034e:	f3ef 8511 	mrs	r5, BASEPRI
   10352:	f383 8811 	msr	BASEPRI, r3
   10356:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1035a:	4847      	ldr	r0, [pc, #284]	; (10478 <z_clock_announce+0x138>)
   1035c:	f7ff fcce 	bl	fcfc <z_spin_lock_valid>
   10360:	b968      	cbnz	r0, 1037e <z_clock_announce+0x3e>
   10362:	235c      	movs	r3, #92	; 0x5c
   10364:	4a45      	ldr	r2, [pc, #276]	; (1047c <z_clock_announce+0x13c>)
   10366:	4946      	ldr	r1, [pc, #280]	; (10480 <z_clock_announce+0x140>)
   10368:	4846      	ldr	r0, [pc, #280]	; (10484 <z_clock_announce+0x144>)
   1036a:	f000 fd37 	bl	10ddc <printk>
   1036e:	4942      	ldr	r1, [pc, #264]	; (10478 <z_clock_announce+0x138>)
   10370:	4845      	ldr	r0, [pc, #276]	; (10488 <z_clock_announce+0x148>)
   10372:	f000 fd33 	bl	10ddc <printk>
   10376:	215c      	movs	r1, #92	; 0x5c
   10378:	4840      	ldr	r0, [pc, #256]	; (1047c <z_clock_announce+0x13c>)
   1037a:	f000 ffc5 	bl	11308 <assert_post_action>
	z_spin_lock_set_owner(l);
   1037e:	4f43      	ldr	r7, [pc, #268]	; (1048c <z_clock_announce+0x14c>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   10380:	4e43      	ldr	r6, [pc, #268]	; (10490 <z_clock_announce+0x150>)
   10382:	46b9      	mov	r9, r7
   10384:	483c      	ldr	r0, [pc, #240]	; (10478 <z_clock_announce+0x138>)
	return list->head == list;
   10386:	f8df 8114 	ldr.w	r8, [pc, #276]	; 1049c <z_clock_announce+0x15c>
   1038a:	f7ff fcd3 	bl	fd34 <z_spin_lock_set_owner>
   1038e:	6034      	str	r4, [r6, #0]
   10390:	f8d8 4000 	ldr.w	r4, [r8]
   10394:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10396:	4544      	cmp	r4, r8
   10398:	e9d7 0100 	ldrd	r0, r1, [r7]
   1039c:	d005      	beq.n	103aa <z_clock_announce+0x6a>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1039e:	b124      	cbz	r4, 103aa <z_clock_announce+0x6a>
   103a0:	68a3      	ldr	r3, [r4, #8]
   103a2:	4293      	cmp	r3, r2
   103a4:	dd25      	ble.n	103f2 <z_clock_announce+0xb2>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   103a6:	1a9b      	subs	r3, r3, r2
   103a8:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   103aa:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   103ac:	1880      	adds	r0, r0, r2
   103ae:	eb41 71e2 	adc.w	r1, r1, r2, asr #31
   103b2:	e9c9 0100 	strd	r0, r1, [r9]
	announce_remaining = 0;
   103b6:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   103b8:	f7ff fdce 	bl	ff58 <next_timeout>
   103bc:	4621      	mov	r1, r4
   103be:	f7f2 f9db 	bl	2778 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   103c2:	482d      	ldr	r0, [pc, #180]	; (10478 <z_clock_announce+0x138>)
   103c4:	f7ff fca8 	bl	fd18 <z_spin_unlock_valid>
   103c8:	b968      	cbnz	r0, 103e6 <z_clock_announce+0xa6>
   103ca:	2384      	movs	r3, #132	; 0x84
   103cc:	4a2b      	ldr	r2, [pc, #172]	; (1047c <z_clock_announce+0x13c>)
   103ce:	4931      	ldr	r1, [pc, #196]	; (10494 <z_clock_announce+0x154>)
   103d0:	482c      	ldr	r0, [pc, #176]	; (10484 <z_clock_announce+0x144>)
   103d2:	f000 fd03 	bl	10ddc <printk>
   103d6:	4928      	ldr	r1, [pc, #160]	; (10478 <z_clock_announce+0x138>)
   103d8:	482f      	ldr	r0, [pc, #188]	; (10498 <z_clock_announce+0x158>)
   103da:	f000 fcff 	bl	10ddc <printk>
   103de:	2184      	movs	r1, #132	; 0x84
   103e0:	4826      	ldr	r0, [pc, #152]	; (1047c <z_clock_announce+0x13c>)
   103e2:	f000 ff91 	bl	11308 <assert_post_action>
	__asm__ volatile(
   103e6:	f385 8811 	msr	BASEPRI, r5
   103ea:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   103ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   103f2:	18c0      	adds	r0, r0, r3
   103f4:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
		announce_remaining -= dt;
   103f8:	1ad3      	subs	r3, r2, r3
   103fa:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   103fc:	2300      	movs	r3, #0
		curr_tick += dt;
   103fe:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   10402:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   10404:	4620      	mov	r0, r4
   10406:	f7ff fdc3 	bl	ff90 <remove_timeout>
   1040a:	481b      	ldr	r0, [pc, #108]	; (10478 <z_clock_announce+0x138>)
   1040c:	f7ff fc84 	bl	fd18 <z_spin_unlock_valid>
   10410:	b968      	cbnz	r0, 1042e <z_clock_announce+0xee>
   10412:	2384      	movs	r3, #132	; 0x84
   10414:	4a19      	ldr	r2, [pc, #100]	; (1047c <z_clock_announce+0x13c>)
   10416:	491f      	ldr	r1, [pc, #124]	; (10494 <z_clock_announce+0x154>)
   10418:	481a      	ldr	r0, [pc, #104]	; (10484 <z_clock_announce+0x144>)
   1041a:	f000 fcdf 	bl	10ddc <printk>
   1041e:	4916      	ldr	r1, [pc, #88]	; (10478 <z_clock_announce+0x138>)
   10420:	481d      	ldr	r0, [pc, #116]	; (10498 <z_clock_announce+0x158>)
   10422:	f000 fcdb 	bl	10ddc <printk>
   10426:	2184      	movs	r1, #132	; 0x84
   10428:	4814      	ldr	r0, [pc, #80]	; (1047c <z_clock_announce+0x13c>)
   1042a:	f000 ff6d 	bl	11308 <assert_post_action>
   1042e:	f385 8811 	msr	BASEPRI, r5
   10432:	f3bf 8f6f 	isb	sy
		t->fn(t);
   10436:	4620      	mov	r0, r4
   10438:	68e3      	ldr	r3, [r4, #12]
   1043a:	4798      	blx	r3
	__asm__ volatile(
   1043c:	f04f 0320 	mov.w	r3, #32
   10440:	f3ef 8511 	mrs	r5, BASEPRI
   10444:	f383 8811 	msr	BASEPRI, r3
   10448:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1044c:	480a      	ldr	r0, [pc, #40]	; (10478 <z_clock_announce+0x138>)
   1044e:	f7ff fc55 	bl	fcfc <z_spin_lock_valid>
   10452:	b968      	cbnz	r0, 10470 <z_clock_announce+0x130>
   10454:	235c      	movs	r3, #92	; 0x5c
   10456:	4a09      	ldr	r2, [pc, #36]	; (1047c <z_clock_announce+0x13c>)
   10458:	4909      	ldr	r1, [pc, #36]	; (10480 <z_clock_announce+0x140>)
   1045a:	480a      	ldr	r0, [pc, #40]	; (10484 <z_clock_announce+0x144>)
   1045c:	f000 fcbe 	bl	10ddc <printk>
   10460:	4905      	ldr	r1, [pc, #20]	; (10478 <z_clock_announce+0x138>)
   10462:	4809      	ldr	r0, [pc, #36]	; (10488 <z_clock_announce+0x148>)
   10464:	f000 fcba 	bl	10ddc <printk>
   10468:	215c      	movs	r1, #92	; 0x5c
   1046a:	4804      	ldr	r0, [pc, #16]	; (1047c <z_clock_announce+0x13c>)
   1046c:	f000 ff4c 	bl	11308 <assert_post_action>
	z_spin_lock_set_owner(l);
   10470:	4801      	ldr	r0, [pc, #4]	; (10478 <z_clock_announce+0x138>)
   10472:	f7ff fc5f 	bl	fd34 <z_spin_lock_set_owner>
	return k;
   10476:	e78b      	b.n	10390 <z_clock_announce+0x50>
   10478:	20001eec 	.word	0x20001eec
   1047c:	0001691e 	.word	0x0001691e
   10480:	00016944 	.word	0x00016944
   10484:	00016493 	.word	0x00016493
   10488:	00016959 	.word	0x00016959
   1048c:	200008e8 	.word	0x200008e8
   10490:	20001ee8 	.word	0x20001ee8
   10494:	00016971 	.word	0x00016971
   10498:	00016988 	.word	0x00016988
   1049c:	200002f0 	.word	0x200002f0

000104a0 <z_tick_get>:

s64_t z_tick_get(void)
{
   104a0:	b570      	push	{r4, r5, r6, lr}
   104a2:	f04f 0320 	mov.w	r3, #32
   104a6:	f3ef 8611 	mrs	r6, BASEPRI
   104aa:	f383 8811 	msr	BASEPRI, r3
   104ae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   104b2:	481b      	ldr	r0, [pc, #108]	; (10520 <z_tick_get+0x80>)
   104b4:	f7ff fc22 	bl	fcfc <z_spin_lock_valid>
   104b8:	b968      	cbnz	r0, 104d6 <z_tick_get+0x36>
   104ba:	235c      	movs	r3, #92	; 0x5c
   104bc:	4a19      	ldr	r2, [pc, #100]	; (10524 <z_tick_get+0x84>)
   104be:	491a      	ldr	r1, [pc, #104]	; (10528 <z_tick_get+0x88>)
   104c0:	481a      	ldr	r0, [pc, #104]	; (1052c <z_tick_get+0x8c>)
   104c2:	f000 fc8b 	bl	10ddc <printk>
   104c6:	4916      	ldr	r1, [pc, #88]	; (10520 <z_tick_get+0x80>)
   104c8:	4819      	ldr	r0, [pc, #100]	; (10530 <z_tick_get+0x90>)
   104ca:	f000 fc87 	bl	10ddc <printk>
   104ce:	215c      	movs	r1, #92	; 0x5c
   104d0:	4814      	ldr	r0, [pc, #80]	; (10524 <z_tick_get+0x84>)
   104d2:	f000 ff19 	bl	11308 <assert_post_action>
	z_spin_lock_set_owner(l);
   104d6:	4812      	ldr	r0, [pc, #72]	; (10520 <z_tick_get+0x80>)
   104d8:	f7ff fc2c 	bl	fd34 <z_spin_lock_set_owner>
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   104dc:	f7f2 f9b0 	bl	2840 <z_clock_elapsed>
   104e0:	4b14      	ldr	r3, [pc, #80]	; (10534 <z_tick_get+0x94>)
   104e2:	e9d3 4500 	ldrd	r4, r5, [r3]
   104e6:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   104e8:	480d      	ldr	r0, [pc, #52]	; (10520 <z_tick_get+0x80>)
   104ea:	f145 0500 	adc.w	r5, r5, #0
   104ee:	f7ff fc13 	bl	fd18 <z_spin_unlock_valid>
   104f2:	b968      	cbnz	r0, 10510 <z_tick_get+0x70>
   104f4:	2384      	movs	r3, #132	; 0x84
   104f6:	4a0b      	ldr	r2, [pc, #44]	; (10524 <z_tick_get+0x84>)
   104f8:	490f      	ldr	r1, [pc, #60]	; (10538 <z_tick_get+0x98>)
   104fa:	480c      	ldr	r0, [pc, #48]	; (1052c <z_tick_get+0x8c>)
   104fc:	f000 fc6e 	bl	10ddc <printk>
   10500:	4907      	ldr	r1, [pc, #28]	; (10520 <z_tick_get+0x80>)
   10502:	480e      	ldr	r0, [pc, #56]	; (1053c <z_tick_get+0x9c>)
   10504:	f000 fc6a 	bl	10ddc <printk>
   10508:	2184      	movs	r1, #132	; 0x84
   1050a:	4806      	ldr	r0, [pc, #24]	; (10524 <z_tick_get+0x84>)
   1050c:	f000 fefc 	bl	11308 <assert_post_action>
	__asm__ volatile(
   10510:	f386 8811 	msr	BASEPRI, r6
   10514:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   10518:	4620      	mov	r0, r4
   1051a:	4629      	mov	r1, r5
   1051c:	bd70      	pop	{r4, r5, r6, pc}
   1051e:	bf00      	nop
   10520:	20001eec 	.word	0x20001eec
   10524:	0001691e 	.word	0x0001691e
   10528:	00016944 	.word	0x00016944
   1052c:	00016493 	.word	0x00016493
   10530:	00016959 	.word	0x00016959
   10534:	200008e8 	.word	0x200008e8
   10538:	00016971 	.word	0x00016971
   1053c:	00016988 	.word	0x00016988

00010540 <k_poll_poller_cb>:

	return events_registered;
}

static int k_poll_poller_cb(struct k_poll_event *event, u32_t state)
{
   10540:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   10542:	6883      	ldr	r3, [r0, #8]
{
   10544:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   10546:	685c      	ldr	r4, [r3, #4]

	__ASSERT(thread != NULL, "poller should have a thread\n");
   10548:	b964      	cbnz	r4, 10564 <k_poll_poller_cb+0x24>
   1054a:	4915      	ldr	r1, [pc, #84]	; (105a0 <k_poll_poller_cb+0x60>)
   1054c:	23e0      	movs	r3, #224	; 0xe0
   1054e:	4a15      	ldr	r2, [pc, #84]	; (105a4 <k_poll_poller_cb+0x64>)
   10550:	4815      	ldr	r0, [pc, #84]	; (105a8 <k_poll_poller_cb+0x68>)
   10552:	f000 fc43 	bl	10ddc <printk>
   10556:	4815      	ldr	r0, [pc, #84]	; (105ac <k_poll_poller_cb+0x6c>)
   10558:	f000 fc40 	bl	10ddc <printk>
   1055c:	21e0      	movs	r1, #224	; 0xe0
   1055e:	4811      	ldr	r0, [pc, #68]	; (105a4 <k_poll_poller_cb+0x64>)
   10560:	f000 fed2 	bl	11308 <assert_post_action>

	if (!z_is_thread_pending(thread)) {
   10564:	7b63      	ldrb	r3, [r4, #13]
   10566:	079a      	lsls	r2, r3, #30
   10568:	d50e      	bpl.n	10588 <k_poll_poller_cb+0x48>
		return 0;
	}

	if (z_is_thread_timeout_expired(thread)) {
   1056a:	6a23      	ldr	r3, [r4, #32]
   1056c:	3302      	adds	r3, #2
   1056e:	d014      	beq.n	1059a <k_poll_poller_cb+0x5a>
		return -EAGAIN;
	}

	z_unpend_thread(thread);
   10570:	4620      	mov	r0, r4
   10572:	f7fe f9c3 	bl	e8fc <z_unpend_thread>
	arch_thread_return_value_set(thread,
   10576:	2d08      	cmp	r5, #8
   10578:	bf0c      	ite	eq
   1057a:	f06f 0303 	mvneq.w	r3, #3
   1057e:	2300      	movne	r3, #0
   10580:	6723      	str	r3, [r4, #112]	; 0x70
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   10582:	7b63      	ldrb	r3, [r4, #13]
   10584:	06db      	lsls	r3, r3, #27
   10586:	d001      	beq.n	1058c <k_poll_poller_cb+0x4c>
		state == K_POLL_STATE_CANCELLED ? -EINTR : 0);

	if (!z_is_thread_ready(thread)) {
		return 0;
   10588:	2000      	movs	r0, #0
	}

	z_ready_thread(thread);

	return 0;
}
   1058a:	bd38      	pop	{r3, r4, r5, pc}
	if (!z_is_thread_ready(thread)) {
   1058c:	69a5      	ldr	r5, [r4, #24]
   1058e:	2d00      	cmp	r5, #0
   10590:	d1fa      	bne.n	10588 <k_poll_poller_cb+0x48>
	z_ready_thread(thread);
   10592:	4620      	mov	r0, r4
   10594:	f7fe faf2 	bl	eb7c <z_ready_thread>
	return 0;
   10598:	e7f6      	b.n	10588 <k_poll_poller_cb+0x48>
		return -EAGAIN;
   1059a:	f06f 000a 	mvn.w	r0, #10
   1059e:	e7f4      	b.n	1058a <k_poll_poller_cb+0x4a>
   105a0:	0001a13a 	.word	0x0001a13a
   105a4:	0001a119 	.word	0x0001a119
   105a8:	00016493 	.word	0x00016493
   105ac:	0001a150 	.word	0x0001a150

000105b0 <clear_event_registrations>:
{
   105b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   105b4:	2414      	movs	r4, #20
   105b6:	4680      	mov	r8, r0
   105b8:	4616      	mov	r6, r2
	while (num_events--) {
   105ba:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   105be:	4d48      	ldr	r5, [pc, #288]	; (106e0 <clear_event_registrations+0x130>)
   105c0:	f8df 9158 	ldr.w	r9, [pc, #344]	; 1071c <clear_event_registrations+0x16c>
   105c4:	4f47      	ldr	r7, [pc, #284]	; (106e4 <clear_event_registrations+0x134>)
	while (num_events--) {
   105c6:	4544      	cmp	r4, r8
   105c8:	d101      	bne.n	105ce <clear_event_registrations+0x1e>
}
   105ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   105ce:	2300      	movs	r3, #0
   105d0:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   105d4:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   105d8:	f003 030f 	and.w	r3, r3, #15
   105dc:	2b04      	cmp	r3, #4
   105de:	d83d      	bhi.n	1065c <clear_event_registrations+0xac>
   105e0:	e8df f003 	tbb	[pc, r3]
   105e4:	3c032d49 	.word	0x3c032d49
   105e8:	1e          	.byte	0x1e
   105e9:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   105ea:	f854 3c04 	ldr.w	r3, [r4, #-4]
   105ee:	b963      	cbnz	r3, 1060a <clear_event_registrations+0x5a>
   105f0:	493d      	ldr	r1, [pc, #244]	; (106e8 <clear_event_registrations+0x138>)
   105f2:	2396      	movs	r3, #150	; 0x96
   105f4:	462a      	mov	r2, r5
   105f6:	4638      	mov	r0, r7
   105f8:	f000 fbf0 	bl	10ddc <printk>
   105fc:	483b      	ldr	r0, [pc, #236]	; (106ec <clear_event_registrations+0x13c>)
   105fe:	f000 fbed 	bl	10ddc <printk>
   10602:	2196      	movs	r1, #150	; 0x96
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   10604:	4628      	mov	r0, r5
   10606:	f000 fe7f 	bl	11308 <assert_post_action>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   1060a:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1060e:	b393      	cbz	r3, 10676 <clear_event_registrations+0xc6>
	node->prev->next = node->next;
   10610:	f854 2c10 	ldr.w	r2, [r4, #-16]
   10614:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   10616:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   10618:	2300      	movs	r3, #0
	node->prev = NULL;
   1061a:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   1061e:	e02a      	b.n	10676 <clear_event_registrations+0xc6>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   10620:	f854 3c04 	ldr.w	r3, [r4, #-4]
   10624:	2b00      	cmp	r3, #0
   10626:	d1f0      	bne.n	1060a <clear_event_registrations+0x5a>
   10628:	4931      	ldr	r1, [pc, #196]	; (106f0 <clear_event_registrations+0x140>)
   1062a:	239a      	movs	r3, #154	; 0x9a
   1062c:	462a      	mov	r2, r5
   1062e:	4638      	mov	r0, r7
   10630:	f000 fbd4 	bl	10ddc <printk>
   10634:	482f      	ldr	r0, [pc, #188]	; (106f4 <clear_event_registrations+0x144>)
   10636:	f000 fbd1 	bl	10ddc <printk>
   1063a:	219a      	movs	r1, #154	; 0x9a
   1063c:	e7e2      	b.n	10604 <clear_event_registrations+0x54>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1063e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   10642:	2b00      	cmp	r3, #0
   10644:	d1e1      	bne.n	1060a <clear_event_registrations+0x5a>
   10646:	492c      	ldr	r1, [pc, #176]	; (106f8 <clear_event_registrations+0x148>)
   10648:	239e      	movs	r3, #158	; 0x9e
   1064a:	462a      	mov	r2, r5
   1064c:	4638      	mov	r0, r7
   1064e:	f000 fbc5 	bl	10ddc <printk>
   10652:	482a      	ldr	r0, [pc, #168]	; (106fc <clear_event_registrations+0x14c>)
   10654:	f000 fbc2 	bl	10ddc <printk>
   10658:	219e      	movs	r1, #158	; 0x9e
   1065a:	e7d3      	b.n	10604 <clear_event_registrations+0x54>
		__ASSERT(false, "invalid event type\n");
   1065c:	4649      	mov	r1, r9
   1065e:	23a5      	movs	r3, #165	; 0xa5
   10660:	462a      	mov	r2, r5
   10662:	4638      	mov	r0, r7
   10664:	f000 fbba 	bl	10ddc <printk>
   10668:	4825      	ldr	r0, [pc, #148]	; (10700 <clear_event_registrations+0x150>)
   1066a:	f000 fbb7 	bl	10ddc <printk>
   1066e:	21a5      	movs	r1, #165	; 0xa5
   10670:	4628      	mov	r0, r5
   10672:	f000 fe49 	bl	11308 <assert_post_action>
   10676:	4823      	ldr	r0, [pc, #140]	; (10704 <clear_event_registrations+0x154>)
   10678:	f7ff fb4e 	bl	fd18 <z_spin_unlock_valid>
   1067c:	b968      	cbnz	r0, 1069a <clear_event_registrations+0xea>
   1067e:	2384      	movs	r3, #132	; 0x84
   10680:	4638      	mov	r0, r7
   10682:	4a21      	ldr	r2, [pc, #132]	; (10708 <clear_event_registrations+0x158>)
   10684:	4921      	ldr	r1, [pc, #132]	; (1070c <clear_event_registrations+0x15c>)
   10686:	f000 fba9 	bl	10ddc <printk>
   1068a:	491e      	ldr	r1, [pc, #120]	; (10704 <clear_event_registrations+0x154>)
   1068c:	4820      	ldr	r0, [pc, #128]	; (10710 <clear_event_registrations+0x160>)
   1068e:	f000 fba5 	bl	10ddc <printk>
   10692:	2184      	movs	r1, #132	; 0x84
   10694:	481c      	ldr	r0, [pc, #112]	; (10708 <clear_event_registrations+0x158>)
   10696:	f000 fe37 	bl	11308 <assert_post_action>
   1069a:	f386 8811 	msr	BASEPRI, r6
   1069e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   106a2:	f04f 0320 	mov.w	r3, #32
   106a6:	f3ef 8611 	mrs	r6, BASEPRI
   106aa:	f383 8811 	msr	BASEPRI, r3
   106ae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   106b2:	4814      	ldr	r0, [pc, #80]	; (10704 <clear_event_registrations+0x154>)
   106b4:	f7ff fb22 	bl	fcfc <z_spin_lock_valid>
   106b8:	b968      	cbnz	r0, 106d6 <clear_event_registrations+0x126>
   106ba:	235c      	movs	r3, #92	; 0x5c
   106bc:	4638      	mov	r0, r7
   106be:	4a12      	ldr	r2, [pc, #72]	; (10708 <clear_event_registrations+0x158>)
   106c0:	4914      	ldr	r1, [pc, #80]	; (10714 <clear_event_registrations+0x164>)
   106c2:	f000 fb8b 	bl	10ddc <printk>
   106c6:	490f      	ldr	r1, [pc, #60]	; (10704 <clear_event_registrations+0x154>)
   106c8:	4813      	ldr	r0, [pc, #76]	; (10718 <clear_event_registrations+0x168>)
   106ca:	f000 fb87 	bl	10ddc <printk>
   106ce:	215c      	movs	r1, #92	; 0x5c
   106d0:	480d      	ldr	r0, [pc, #52]	; (10708 <clear_event_registrations+0x158>)
   106d2:	f000 fe19 	bl	11308 <assert_post_action>
	z_spin_lock_set_owner(l);
   106d6:	480b      	ldr	r0, [pc, #44]	; (10704 <clear_event_registrations+0x154>)
   106d8:	f7ff fb2c 	bl	fd34 <z_spin_lock_set_owner>
	return k;
   106dc:	3c14      	subs	r4, #20
   106de:	e772      	b.n	105c6 <clear_event_registrations+0x16>
   106e0:	0001a119 	.word	0x0001a119
   106e4:	00016493 	.word	0x00016493
   106e8:	0001a16f 	.word	0x0001a16f
   106ec:	0001a189 	.word	0x0001a189
   106f0:	0001a19e 	.word	0x0001a19e
   106f4:	0001a1ba 	.word	0x0001a1ba
   106f8:	0001a1cb 	.word	0x0001a1cb
   106fc:	0001a1e8 	.word	0x0001a1e8
   10700:	0001a1ff 	.word	0x0001a1ff
   10704:	20001ef0 	.word	0x20001ef0
   10708:	0001691e 	.word	0x0001691e
   1070c:	00016971 	.word	0x00016971
   10710:	00016988 	.word	0x00016988
   10714:	00016944 	.word	0x00016944
   10718:	00016959 	.word	0x00016959
   1071c:	00019ede 	.word	0x00019ede

00010720 <register_events>:
{
   10720:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   10724:	2700      	movs	r7, #0
{
   10726:	4615      	mov	r5, r2
   10728:	4604      	mov	r4, r0
	int events_registered = 0;
   1072a:	46b9      	mov	r9, r7
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1072c:	4e6a      	ldr	r6, [pc, #424]	; (108d8 <register_events+0x1b8>)
   1072e:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 10914 <register_events+0x1f4>
   10732:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 10918 <register_events+0x1f8>
{
   10736:	9100      	str	r1, [sp, #0]
   10738:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   1073a:	9b00      	ldr	r3, [sp, #0]
   1073c:	429f      	cmp	r7, r3
   1073e:	db03      	blt.n	10748 <register_events+0x28>
}
   10740:	4648      	mov	r0, r9
   10742:	b003      	add	sp, #12
   10744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10748:	f04f 0320 	mov.w	r3, #32
   1074c:	f3ef 8b11 	mrs	fp, BASEPRI
   10750:	f383 8811 	msr	BASEPRI, r3
   10754:	f3bf 8f6f 	isb	sy
   10758:	4630      	mov	r0, r6
   1075a:	f7ff facf 	bl	fcfc <z_spin_lock_valid>
   1075e:	b968      	cbnz	r0, 1077c <register_events+0x5c>
   10760:	235c      	movs	r3, #92	; 0x5c
   10762:	4642      	mov	r2, r8
   10764:	4651      	mov	r1, sl
   10766:	485d      	ldr	r0, [pc, #372]	; (108dc <register_events+0x1bc>)
   10768:	f000 fb38 	bl	10ddc <printk>
   1076c:	4631      	mov	r1, r6
   1076e:	485c      	ldr	r0, [pc, #368]	; (108e0 <register_events+0x1c0>)
   10770:	f000 fb34 	bl	10ddc <printk>
   10774:	215c      	movs	r1, #92	; 0x5c
   10776:	4640      	mov	r0, r8
   10778:	f000 fdc6 	bl	11308 <assert_post_action>
	z_spin_lock_set_owner(l);
   1077c:	4630      	mov	r0, r6
   1077e:	f7ff fad9 	bl	fd34 <z_spin_lock_set_owner>
	switch (event->type) {
   10782:	7b63      	ldrb	r3, [r4, #13]
   10784:	f003 030f 	and.w	r3, r3, #15
   10788:	2b04      	cmp	r3, #4
   1078a:	d844      	bhi.n	10816 <register_events+0xf6>
   1078c:	e8df f003 	tbb	[pc, r3]
   10790:	43033d2d 	.word	0x43033d2d
   10794:	2a          	.byte	0x2a
   10795:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0) {
   10796:	6923      	ldr	r3, [r4, #16]
   10798:	689b      	ldr	r3, [r3, #8]
   1079a:	b333      	cbz	r3, 107ea <register_events+0xca>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1079c:	2202      	movs	r2, #2
	event->poller = NULL;
   1079e:	2100      	movs	r1, #0
	event->state |= state;
   107a0:	68e3      	ldr	r3, [r4, #12]
	event->poller = NULL;
   107a2:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   107a4:	f3c3 3004 	ubfx	r0, r3, #12, #5
   107a8:	4302      	orrs	r2, r0
   107aa:	f362 3310 	bfi	r3, r2, #12, #5
   107ae:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   107b0:	7029      	strb	r1, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   107b2:	4630      	mov	r0, r6
   107b4:	f7ff fab0 	bl	fd18 <z_spin_unlock_valid>
   107b8:	b968      	cbnz	r0, 107d6 <register_events+0xb6>
   107ba:	2384      	movs	r3, #132	; 0x84
   107bc:	4642      	mov	r2, r8
   107be:	4949      	ldr	r1, [pc, #292]	; (108e4 <register_events+0x1c4>)
   107c0:	4846      	ldr	r0, [pc, #280]	; (108dc <register_events+0x1bc>)
   107c2:	f000 fb0b 	bl	10ddc <printk>
   107c6:	4631      	mov	r1, r6
   107c8:	4847      	ldr	r0, [pc, #284]	; (108e8 <register_events+0x1c8>)
   107ca:	f000 fb07 	bl	10ddc <printk>
   107ce:	2184      	movs	r1, #132	; 0x84
   107d0:	4640      	mov	r0, r8
   107d2:	f000 fd99 	bl	11308 <assert_post_action>
	__asm__ volatile(
   107d6:	f38b 8811 	msr	BASEPRI, fp
   107da:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   107de:	3701      	adds	r7, #1
   107e0:	3414      	adds	r4, #20
   107e2:	e7aa      	b.n	1073a <register_events+0x1a>
		if (!k_queue_is_empty(event->queue)) {
   107e4:	6923      	ldr	r3, [r4, #16]
   107e6:	681b      	ldr	r3, [r3, #0]
   107e8:	bb33      	cbnz	r3, 10838 <register_events+0x118>
		} else if (!just_check && poller->is_polling) {
   107ea:	9b01      	ldr	r3, [sp, #4]
   107ec:	2b00      	cmp	r3, #0
   107ee:	d1e0      	bne.n	107b2 <register_events+0x92>
   107f0:	782b      	ldrb	r3, [r5, #0]
   107f2:	2b00      	cmp	r3, #0
   107f4:	d0dd      	beq.n	107b2 <register_events+0x92>
	switch (event->type) {
   107f6:	7b63      	ldrb	r3, [r4, #13]
   107f8:	f003 030f 	and.w	r3, r3, #15
   107fc:	2b04      	cmp	r3, #4
   107fe:	d85d      	bhi.n	108bc <register_events+0x19c>
   10800:	e8df f003 	tbb	[pc, r3]
   10804:	5c1c4931 	.word	0x5c1c4931
   10808:	35          	.byte	0x35
   10809:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   1080a:	6923      	ldr	r3, [r4, #16]
   1080c:	689b      	ldr	r3, [r3, #8]
   1080e:	2b00      	cmp	r3, #0
   10810:	d0eb      	beq.n	107ea <register_events+0xca>
			*state = K_POLL_STATE_SIGNALED;
   10812:	2201      	movs	r2, #1
   10814:	e7c3      	b.n	1079e <register_events+0x7e>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   10816:	2350      	movs	r3, #80	; 0x50
   10818:	4a34      	ldr	r2, [pc, #208]	; (108ec <register_events+0x1cc>)
   1081a:	4935      	ldr	r1, [pc, #212]	; (108f0 <register_events+0x1d0>)
   1081c:	482f      	ldr	r0, [pc, #188]	; (108dc <register_events+0x1bc>)
   1081e:	f000 fadd 	bl	10ddc <printk>
   10822:	7b61      	ldrb	r1, [r4, #13]
   10824:	4833      	ldr	r0, [pc, #204]	; (108f4 <register_events+0x1d4>)
   10826:	f001 010f 	and.w	r1, r1, #15
   1082a:	f000 fad7 	bl	10ddc <printk>
   1082e:	2150      	movs	r1, #80	; 0x50
   10830:	482e      	ldr	r0, [pc, #184]	; (108ec <register_events+0x1cc>)
   10832:	f000 fd69 	bl	11308 <assert_post_action>
		break;
   10836:	e7d8      	b.n	107ea <register_events+0xca>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   10838:	2204      	movs	r2, #4
   1083a:	e7b0      	b.n	1079e <register_events+0x7e>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   1083c:	6923      	ldr	r3, [r4, #16]
   1083e:	b963      	cbnz	r3, 1085a <register_events+0x13a>
   10840:	492d      	ldr	r1, [pc, #180]	; (108f8 <register_events+0x1d8>)
   10842:	2375      	movs	r3, #117	; 0x75
   10844:	4a29      	ldr	r2, [pc, #164]	; (108ec <register_events+0x1cc>)
   10846:	4825      	ldr	r0, [pc, #148]	; (108dc <register_events+0x1bc>)
   10848:	f000 fac8 	bl	10ddc <printk>
   1084c:	482b      	ldr	r0, [pc, #172]	; (108fc <register_events+0x1dc>)
   1084e:	f000 fac5 	bl	10ddc <printk>
   10852:	2175      	movs	r1, #117	; 0x75
   10854:	4825      	ldr	r0, [pc, #148]	; (108ec <register_events+0x1cc>)
   10856:	f000 fd57 	bl	11308 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   1085a:	462a      	mov	r2, r5
   1085c:	4621      	mov	r1, r4
   1085e:	6920      	ldr	r0, [r4, #16]
   10860:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   10862:	f004 fcca 	bl	151fa <add_event>
	event->poller = poller;
   10866:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
   10868:	f109 0901 	add.w	r9, r9, #1
   1086c:	e7a1      	b.n	107b2 <register_events+0x92>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   1086e:	6923      	ldr	r3, [r4, #16]
   10870:	b963      	cbnz	r3, 1088c <register_events+0x16c>
   10872:	4923      	ldr	r1, [pc, #140]	; (10900 <register_events+0x1e0>)
   10874:	2379      	movs	r3, #121	; 0x79
   10876:	4a1d      	ldr	r2, [pc, #116]	; (108ec <register_events+0x1cc>)
   10878:	4818      	ldr	r0, [pc, #96]	; (108dc <register_events+0x1bc>)
   1087a:	f000 faaf 	bl	10ddc <printk>
   1087e:	4821      	ldr	r0, [pc, #132]	; (10904 <register_events+0x1e4>)
   10880:	f000 faac 	bl	10ddc <printk>
   10884:	2179      	movs	r1, #121	; 0x79
   10886:	4819      	ldr	r0, [pc, #100]	; (108ec <register_events+0x1cc>)
   10888:	f000 fd3e 	bl	11308 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   1088c:	6920      	ldr	r0, [r4, #16]
   1088e:	462a      	mov	r2, r5
   10890:	4621      	mov	r1, r4
   10892:	3014      	adds	r0, #20
   10894:	e7e5      	b.n	10862 <register_events+0x142>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   10896:	6923      	ldr	r3, [r4, #16]
   10898:	b963      	cbnz	r3, 108b4 <register_events+0x194>
   1089a:	491b      	ldr	r1, [pc, #108]	; (10908 <register_events+0x1e8>)
   1089c:	237d      	movs	r3, #125	; 0x7d
   1089e:	4a13      	ldr	r2, [pc, #76]	; (108ec <register_events+0x1cc>)
   108a0:	480e      	ldr	r0, [pc, #56]	; (108dc <register_events+0x1bc>)
   108a2:	f000 fa9b 	bl	10ddc <printk>
   108a6:	4819      	ldr	r0, [pc, #100]	; (1090c <register_events+0x1ec>)
   108a8:	f000 fa98 	bl	10ddc <printk>
   108ac:	217d      	movs	r1, #125	; 0x7d
   108ae:	480f      	ldr	r0, [pc, #60]	; (108ec <register_events+0x1cc>)
   108b0:	f000 fd2a 	bl	11308 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   108b4:	462a      	mov	r2, r5
   108b6:	4621      	mov	r1, r4
   108b8:	6920      	ldr	r0, [r4, #16]
   108ba:	e7d2      	b.n	10862 <register_events+0x142>
		__ASSERT(false, "invalid event type\n");
   108bc:	2384      	movs	r3, #132	; 0x84
   108be:	4a0b      	ldr	r2, [pc, #44]	; (108ec <register_events+0x1cc>)
   108c0:	490b      	ldr	r1, [pc, #44]	; (108f0 <register_events+0x1d0>)
   108c2:	4806      	ldr	r0, [pc, #24]	; (108dc <register_events+0x1bc>)
   108c4:	f000 fa8a 	bl	10ddc <printk>
   108c8:	4811      	ldr	r0, [pc, #68]	; (10910 <register_events+0x1f0>)
   108ca:	f000 fa87 	bl	10ddc <printk>
   108ce:	2184      	movs	r1, #132	; 0x84
   108d0:	4806      	ldr	r0, [pc, #24]	; (108ec <register_events+0x1cc>)
   108d2:	f000 fd19 	bl	11308 <assert_post_action>
		break;
   108d6:	e7c6      	b.n	10866 <register_events+0x146>
   108d8:	20001ef0 	.word	0x20001ef0
   108dc:	00016493 	.word	0x00016493
   108e0:	00016959 	.word	0x00016959
   108e4:	00016971 	.word	0x00016971
   108e8:	00016988 	.word	0x00016988
   108ec:	0001a119 	.word	0x0001a119
   108f0:	00019ede 	.word	0x00019ede
   108f4:	0001a215 	.word	0x0001a215
   108f8:	0001a16f 	.word	0x0001a16f
   108fc:	0001a189 	.word	0x0001a189
   10900:	0001a19e 	.word	0x0001a19e
   10904:	0001a1ba 	.word	0x0001a1ba
   10908:	0001a1cb 	.word	0x0001a1cb
   1090c:	0001a1e8 	.word	0x0001a1e8
   10910:	0001a1ff 	.word	0x0001a1ff
   10914:	0001691e 	.word	0x0001691e
   10918:	00016944 	.word	0x00016944

0001091c <k_poll_event_init>:
{
   1091c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1091e:	4605      	mov	r5, r0
   10920:	460f      	mov	r7, r1
   10922:	461e      	mov	r6, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   10924:	4614      	mov	r4, r2
   10926:	b162      	cbz	r2, 10942 <k_poll_event_init+0x26>
   10928:	491b      	ldr	r1, [pc, #108]	; (10998 <k_poll_event_init+0x7c>)
   1092a:	2329      	movs	r3, #41	; 0x29
   1092c:	4a1b      	ldr	r2, [pc, #108]	; (1099c <k_poll_event_init+0x80>)
   1092e:	481c      	ldr	r0, [pc, #112]	; (109a0 <k_poll_event_init+0x84>)
   10930:	f000 fa54 	bl	10ddc <printk>
   10934:	481b      	ldr	r0, [pc, #108]	; (109a4 <k_poll_event_init+0x88>)
   10936:	f000 fa51 	bl	10ddc <printk>
   1093a:	2129      	movs	r1, #41	; 0x29
   1093c:	4817      	ldr	r0, [pc, #92]	; (1099c <k_poll_event_init+0x80>)
   1093e:	f000 fce3 	bl	11308 <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   10942:	2f0f      	cmp	r7, #15
   10944:	d90c      	bls.n	10960 <k_poll_event_init+0x44>
   10946:	4918      	ldr	r1, [pc, #96]	; (109a8 <k_poll_event_init+0x8c>)
   10948:	232b      	movs	r3, #43	; 0x2b
   1094a:	4a14      	ldr	r2, [pc, #80]	; (1099c <k_poll_event_init+0x80>)
   1094c:	4814      	ldr	r0, [pc, #80]	; (109a0 <k_poll_event_init+0x84>)
   1094e:	f000 fa45 	bl	10ddc <printk>
   10952:	4816      	ldr	r0, [pc, #88]	; (109ac <k_poll_event_init+0x90>)
   10954:	f000 fa42 	bl	10ddc <printk>
   10958:	212b      	movs	r1, #43	; 0x2b
   1095a:	4810      	ldr	r0, [pc, #64]	; (1099c <k_poll_event_init+0x80>)
   1095c:	f000 fcd4 	bl	11308 <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   10960:	b966      	cbnz	r6, 1097c <k_poll_event_init+0x60>
   10962:	4913      	ldr	r1, [pc, #76]	; (109b0 <k_poll_event_init+0x94>)
   10964:	232c      	movs	r3, #44	; 0x2c
   10966:	4a0d      	ldr	r2, [pc, #52]	; (1099c <k_poll_event_init+0x80>)
   10968:	480d      	ldr	r0, [pc, #52]	; (109a0 <k_poll_event_init+0x84>)
   1096a:	f000 fa37 	bl	10ddc <printk>
   1096e:	4811      	ldr	r0, [pc, #68]	; (109b4 <k_poll_event_init+0x98>)
   10970:	f000 fa34 	bl	10ddc <printk>
   10974:	212c      	movs	r1, #44	; 0x2c
   10976:	4809      	ldr	r0, [pc, #36]	; (1099c <k_poll_event_init+0x80>)
   10978:	f000 fcc6 	bl	11308 <assert_post_action>
	event->poller = NULL;
   1097c:	2300      	movs	r3, #0
	event->type = type;
   1097e:	0464      	lsls	r4, r4, #17
   10980:	023f      	lsls	r7, r7, #8
	event->poller = NULL;
   10982:	60ab      	str	r3, [r5, #8]
	event->type = type;
   10984:	f404 3400 	and.w	r4, r4, #131072	; 0x20000
   10988:	7b2b      	ldrb	r3, [r5, #12]
   1098a:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
   1098e:	433c      	orrs	r4, r7
   10990:	431c      	orrs	r4, r3
	event->obj = obj;
   10992:	e9c5 4603 	strd	r4, r6, [r5, #12]
}
   10996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10998:	0001a232 	.word	0x0001a232
   1099c:	0001a119 	.word	0x0001a119
   109a0:	00016493 	.word	0x00016493
   109a4:	0001a252 	.word	0x0001a252
   109a8:	0001a278 	.word	0x0001a278
   109ac:	0001a29c 	.word	0x0001a29c
   109b0:	0001a2ac 	.word	0x0001a2ac
   109b4:	0001a2bf 	.word	0x0001a2bf

000109b8 <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   109b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   109bc:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   109be:	2301      	movs	r3, #1
{
   109c0:	b088      	sub	sp, #32
	struct _poller poller = { .is_polling = true,
   109c2:	f88d 3014 	strb.w	r3, [sp, #20]
				  .thread     = _current,
   109c6:	4b74      	ldr	r3, [pc, #464]	; (10b98 <z_impl_k_poll+0x1e0>)
{
   109c8:	4604      	mov	r4, r0
	struct _poller poller = { .is_polling = true,
   109ca:	689b      	ldr	r3, [r3, #8]
{
   109cc:	460d      	mov	r5, r1
	struct _poller poller = { .is_polling = true,
   109ce:	9306      	str	r3, [sp, #24]
   109d0:	4b72      	ldr	r3, [pc, #456]	; (10b9c <z_impl_k_poll+0x1e4>)
{
   109d2:	4616      	mov	r6, r2
	struct _poller poller = { .is_polling = true,
   109d4:	9307      	str	r3, [sp, #28]
   109d6:	f3ef 8305 	mrs	r3, IPSR
				  .cb         = k_poll_poller_cb };

	__ASSERT(!arch_is_in_isr(), "");
   109da:	b173      	cbz	r3, 109fa <z_impl_k_poll+0x42>
   109dc:	4970      	ldr	r1, [pc, #448]	; (10ba0 <z_impl_k_poll+0x1e8>)
   109de:	f44f 7380 	mov.w	r3, #256	; 0x100
   109e2:	4a70      	ldr	r2, [pc, #448]	; (10ba4 <z_impl_k_poll+0x1ec>)
   109e4:	4870      	ldr	r0, [pc, #448]	; (10ba8 <z_impl_k_poll+0x1f0>)
   109e6:	f000 f9f9 	bl	10ddc <printk>
   109ea:	4870      	ldr	r0, [pc, #448]	; (10bac <z_impl_k_poll+0x1f4>)
   109ec:	f000 f9f6 	bl	10ddc <printk>
   109f0:	f44f 7180 	mov.w	r1, #256	; 0x100
   109f4:	486b      	ldr	r0, [pc, #428]	; (10ba4 <z_impl_k_poll+0x1ec>)
   109f6:	f000 fc87 	bl	11308 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   109fa:	b974      	cbnz	r4, 10a1a <z_impl_k_poll+0x62>
   109fc:	496c      	ldr	r1, [pc, #432]	; (10bb0 <z_impl_k_poll+0x1f8>)
   109fe:	f240 1301 	movw	r3, #257	; 0x101
   10a02:	4a68      	ldr	r2, [pc, #416]	; (10ba4 <z_impl_k_poll+0x1ec>)
   10a04:	4868      	ldr	r0, [pc, #416]	; (10ba8 <z_impl_k_poll+0x1f0>)
   10a06:	f000 f9e9 	bl	10ddc <printk>
   10a0a:	486a      	ldr	r0, [pc, #424]	; (10bb4 <z_impl_k_poll+0x1fc>)
   10a0c:	f000 f9e6 	bl	10ddc <printk>
   10a10:	f240 1101 	movw	r1, #257	; 0x101
   10a14:	4863      	ldr	r0, [pc, #396]	; (10ba4 <z_impl_k_poll+0x1ec>)
   10a16:	f000 fc77 	bl	11308 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   10a1a:	2d00      	cmp	r5, #0
   10a1c:	da0e      	bge.n	10a3c <z_impl_k_poll+0x84>
   10a1e:	4966      	ldr	r1, [pc, #408]	; (10bb8 <z_impl_k_poll+0x200>)
   10a20:	f44f 7381 	mov.w	r3, #258	; 0x102
   10a24:	4a5f      	ldr	r2, [pc, #380]	; (10ba4 <z_impl_k_poll+0x1ec>)
   10a26:	4860      	ldr	r0, [pc, #384]	; (10ba8 <z_impl_k_poll+0x1f0>)
   10a28:	f000 f9d8 	bl	10ddc <printk>
   10a2c:	4863      	ldr	r0, [pc, #396]	; (10bbc <z_impl_k_poll+0x204>)
   10a2e:	f000 f9d5 	bl	10ddc <printk>
   10a32:	f44f 7181 	mov.w	r1, #258	; 0x102
   10a36:	485b      	ldr	r0, [pc, #364]	; (10ba4 <z_impl_k_poll+0x1ec>)
   10a38:	f000 fc66 	bl	11308 <assert_post_action>

	events_registered = register_events(events, num_events, &poller,
   10a3c:	ea56 0307 	orrs.w	r3, r6, r7
   10a40:	bf0c      	ite	eq
   10a42:	2301      	moveq	r3, #1
   10a44:	2300      	movne	r3, #0
   10a46:	4629      	mov	r1, r5
   10a48:	4620      	mov	r0, r4
   10a4a:	aa05      	add	r2, sp, #20
   10a4c:	f7ff fe68 	bl	10720 <register_events>
   10a50:	4680      	mov	r8, r0
	__asm__ volatile(
   10a52:	f04f 0320 	mov.w	r3, #32
   10a56:	f3ef 8511 	mrs	r5, BASEPRI
   10a5a:	f383 8811 	msr	BASEPRI, r3
   10a5e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10a62:	4857      	ldr	r0, [pc, #348]	; (10bc0 <z_impl_k_poll+0x208>)
   10a64:	f7ff f94a 	bl	fcfc <z_spin_lock_valid>
   10a68:	b968      	cbnz	r0, 10a86 <z_impl_k_poll+0xce>
   10a6a:	235c      	movs	r3, #92	; 0x5c
   10a6c:	4a55      	ldr	r2, [pc, #340]	; (10bc4 <z_impl_k_poll+0x20c>)
   10a6e:	4956      	ldr	r1, [pc, #344]	; (10bc8 <z_impl_k_poll+0x210>)
   10a70:	484d      	ldr	r0, [pc, #308]	; (10ba8 <z_impl_k_poll+0x1f0>)
   10a72:	f000 f9b3 	bl	10ddc <printk>
   10a76:	4952      	ldr	r1, [pc, #328]	; (10bc0 <z_impl_k_poll+0x208>)
   10a78:	4854      	ldr	r0, [pc, #336]	; (10bcc <z_impl_k_poll+0x214>)
   10a7a:	f000 f9af 	bl	10ddc <printk>
   10a7e:	215c      	movs	r1, #92	; 0x5c
   10a80:	4850      	ldr	r0, [pc, #320]	; (10bc4 <z_impl_k_poll+0x20c>)
   10a82:	f000 fc41 	bl	11308 <assert_post_action>
	z_spin_lock_set_owner(l);
   10a86:	484e      	ldr	r0, [pc, #312]	; (10bc0 <z_impl_k_poll+0x208>)
   10a88:	f7ff f954 	bl	fd34 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   10a8c:	f89d 3014 	ldrb.w	r3, [sp, #20]
   10a90:	b9fb      	cbnz	r3, 10ad2 <z_impl_k_poll+0x11a>
		clear_event_registrations(events, events_registered, key);
   10a92:	4620      	mov	r0, r4
   10a94:	462a      	mov	r2, r5
   10a96:	4641      	mov	r1, r8
   10a98:	f7ff fd8a 	bl	105b0 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10a9c:	4848      	ldr	r0, [pc, #288]	; (10bc0 <z_impl_k_poll+0x208>)
   10a9e:	f7ff f93b 	bl	fd18 <z_spin_unlock_valid>
   10aa2:	b968      	cbnz	r0, 10ac0 <z_impl_k_poll+0x108>
   10aa4:	2384      	movs	r3, #132	; 0x84
   10aa6:	4a47      	ldr	r2, [pc, #284]	; (10bc4 <z_impl_k_poll+0x20c>)
   10aa8:	4949      	ldr	r1, [pc, #292]	; (10bd0 <z_impl_k_poll+0x218>)
   10aaa:	483f      	ldr	r0, [pc, #252]	; (10ba8 <z_impl_k_poll+0x1f0>)
   10aac:	f000 f996 	bl	10ddc <printk>
   10ab0:	4943      	ldr	r1, [pc, #268]	; (10bc0 <z_impl_k_poll+0x208>)
   10ab2:	4848      	ldr	r0, [pc, #288]	; (10bd4 <z_impl_k_poll+0x21c>)
   10ab4:	f000 f992 	bl	10ddc <printk>
   10ab8:	2184      	movs	r1, #132	; 0x84
   10aba:	4842      	ldr	r0, [pc, #264]	; (10bc4 <z_impl_k_poll+0x20c>)
   10abc:	f000 fc24 	bl	11308 <assert_post_action>
	__asm__ volatile(
   10ac0:	f385 8811 	msr	BASEPRI, r5
   10ac4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		return 0;
   10ac8:	2500      	movs	r5, #0
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   10aca:	4628      	mov	r0, r5
   10acc:	b008      	add	sp, #32
   10ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	poller.is_polling = false;
   10ad2:	2300      	movs	r3, #0
   10ad4:	f88d 3014 	strb.w	r3, [sp, #20]
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   10ad8:	ea56 0307 	orrs.w	r3, r6, r7
   10adc:	d118      	bne.n	10b10 <z_impl_k_poll+0x158>
   10ade:	4838      	ldr	r0, [pc, #224]	; (10bc0 <z_impl_k_poll+0x208>)
   10ae0:	f7ff f91a 	bl	fd18 <z_spin_unlock_valid>
   10ae4:	b968      	cbnz	r0, 10b02 <z_impl_k_poll+0x14a>
   10ae6:	2384      	movs	r3, #132	; 0x84
   10ae8:	4a36      	ldr	r2, [pc, #216]	; (10bc4 <z_impl_k_poll+0x20c>)
   10aea:	4939      	ldr	r1, [pc, #228]	; (10bd0 <z_impl_k_poll+0x218>)
   10aec:	482e      	ldr	r0, [pc, #184]	; (10ba8 <z_impl_k_poll+0x1f0>)
   10aee:	f000 f975 	bl	10ddc <printk>
   10af2:	4933      	ldr	r1, [pc, #204]	; (10bc0 <z_impl_k_poll+0x208>)
   10af4:	4837      	ldr	r0, [pc, #220]	; (10bd4 <z_impl_k_poll+0x21c>)
   10af6:	f000 f971 	bl	10ddc <printk>
   10afa:	2184      	movs	r1, #132	; 0x84
   10afc:	4831      	ldr	r0, [pc, #196]	; (10bc4 <z_impl_k_poll+0x20c>)
   10afe:	f000 fc03 	bl	11308 <assert_post_action>
   10b02:	f385 8811 	msr	BASEPRI, r5
   10b06:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   10b0a:	f06f 050a 	mvn.w	r5, #10
   10b0e:	e7dc      	b.n	10aca <z_impl_k_poll+0x112>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   10b10:	4629      	mov	r1, r5
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   10b12:	aa03      	add	r2, sp, #12
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   10b14:	e9cd 6700 	strd	r6, r7, [sp]
   10b18:	4829      	ldr	r0, [pc, #164]	; (10bc0 <z_impl_k_poll+0x208>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   10b1a:	e9cd 2203 	strd	r2, r2, [sp, #12]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   10b1e:	f7fe fbf5 	bl	f30c <z_pend_curr>
   10b22:	4605      	mov	r5, r0
	__asm__ volatile(
   10b24:	f04f 0320 	mov.w	r3, #32
   10b28:	f3ef 8611 	mrs	r6, BASEPRI
   10b2c:	f383 8811 	msr	BASEPRI, r3
   10b30:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10b34:	4822      	ldr	r0, [pc, #136]	; (10bc0 <z_impl_k_poll+0x208>)
   10b36:	f7ff f8e1 	bl	fcfc <z_spin_lock_valid>
   10b3a:	b968      	cbnz	r0, 10b58 <z_impl_k_poll+0x1a0>
   10b3c:	235c      	movs	r3, #92	; 0x5c
   10b3e:	4a21      	ldr	r2, [pc, #132]	; (10bc4 <z_impl_k_poll+0x20c>)
   10b40:	4921      	ldr	r1, [pc, #132]	; (10bc8 <z_impl_k_poll+0x210>)
   10b42:	4819      	ldr	r0, [pc, #100]	; (10ba8 <z_impl_k_poll+0x1f0>)
   10b44:	f000 f94a 	bl	10ddc <printk>
   10b48:	491d      	ldr	r1, [pc, #116]	; (10bc0 <z_impl_k_poll+0x208>)
   10b4a:	4820      	ldr	r0, [pc, #128]	; (10bcc <z_impl_k_poll+0x214>)
   10b4c:	f000 f946 	bl	10ddc <printk>
   10b50:	215c      	movs	r1, #92	; 0x5c
   10b52:	481c      	ldr	r0, [pc, #112]	; (10bc4 <z_impl_k_poll+0x20c>)
   10b54:	f000 fbd8 	bl	11308 <assert_post_action>
	z_spin_lock_set_owner(l);
   10b58:	4819      	ldr	r0, [pc, #100]	; (10bc0 <z_impl_k_poll+0x208>)
   10b5a:	f7ff f8eb 	bl	fd34 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   10b5e:	4620      	mov	r0, r4
   10b60:	4632      	mov	r2, r6
   10b62:	4641      	mov	r1, r8
   10b64:	f7ff fd24 	bl	105b0 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10b68:	4815      	ldr	r0, [pc, #84]	; (10bc0 <z_impl_k_poll+0x208>)
   10b6a:	f7ff f8d5 	bl	fd18 <z_spin_unlock_valid>
   10b6e:	b968      	cbnz	r0, 10b8c <z_impl_k_poll+0x1d4>
   10b70:	2384      	movs	r3, #132	; 0x84
   10b72:	4a14      	ldr	r2, [pc, #80]	; (10bc4 <z_impl_k_poll+0x20c>)
   10b74:	4916      	ldr	r1, [pc, #88]	; (10bd0 <z_impl_k_poll+0x218>)
   10b76:	480c      	ldr	r0, [pc, #48]	; (10ba8 <z_impl_k_poll+0x1f0>)
   10b78:	f000 f930 	bl	10ddc <printk>
   10b7c:	4910      	ldr	r1, [pc, #64]	; (10bc0 <z_impl_k_poll+0x208>)
   10b7e:	4815      	ldr	r0, [pc, #84]	; (10bd4 <z_impl_k_poll+0x21c>)
   10b80:	f000 f92c 	bl	10ddc <printk>
   10b84:	2184      	movs	r1, #132	; 0x84
   10b86:	480f      	ldr	r0, [pc, #60]	; (10bc4 <z_impl_k_poll+0x20c>)
   10b88:	f000 fbbe 	bl	11308 <assert_post_action>
	__asm__ volatile(
   10b8c:	f386 8811 	msr	BASEPRI, r6
   10b90:	f3bf 8f6f 	isb	sy
	return swap_rc;
   10b94:	e799      	b.n	10aca <z_impl_k_poll+0x112>
   10b96:	bf00      	nop
   10b98:	20001e10 	.word	0x20001e10
   10b9c:	00010541 	.word	0x00010541
   10ba0:	00019e14 	.word	0x00019e14
   10ba4:	0001a119 	.word	0x0001a119
   10ba8:	00016493 	.word	0x00016493
   10bac:	0001919c 	.word	0x0001919c
   10bb0:	0001a2d9 	.word	0x0001a2d9
   10bb4:	0001a2ef 	.word	0x0001a2ef
   10bb8:	0001a2fe 	.word	0x0001a2fe
   10bbc:	0001a30e 	.word	0x0001a30e
   10bc0:	20001ef0 	.word	0x20001ef0
   10bc4:	0001691e 	.word	0x0001691e
   10bc8:	00016944 	.word	0x00016944
   10bcc:	00016959 	.word	0x00016959
   10bd0:	00016971 	.word	0x00016971
   10bd4:	00016988 	.word	0x00016988

00010bd8 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   10bd8:	b570      	push	{r4, r5, r6, lr}
   10bda:	4604      	mov	r4, r0
   10bdc:	460d      	mov	r5, r1
	__asm__ volatile(
   10bde:	f04f 0320 	mov.w	r3, #32
   10be2:	f3ef 8611 	mrs	r6, BASEPRI
   10be6:	f383 8811 	msr	BASEPRI, r3
   10bea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10bee:	4821      	ldr	r0, [pc, #132]	; (10c74 <z_impl_k_poll_signal_raise+0x9c>)
   10bf0:	f7ff f884 	bl	fcfc <z_spin_lock_valid>
   10bf4:	b968      	cbnz	r0, 10c12 <z_impl_k_poll_signal_raise+0x3a>
   10bf6:	235c      	movs	r3, #92	; 0x5c
   10bf8:	4a1f      	ldr	r2, [pc, #124]	; (10c78 <z_impl_k_poll_signal_raise+0xa0>)
   10bfa:	4920      	ldr	r1, [pc, #128]	; (10c7c <z_impl_k_poll_signal_raise+0xa4>)
   10bfc:	4820      	ldr	r0, [pc, #128]	; (10c80 <z_impl_k_poll_signal_raise+0xa8>)
   10bfe:	f000 f8ed 	bl	10ddc <printk>
   10c02:	491c      	ldr	r1, [pc, #112]	; (10c74 <z_impl_k_poll_signal_raise+0x9c>)
   10c04:	481f      	ldr	r0, [pc, #124]	; (10c84 <z_impl_k_poll_signal_raise+0xac>)
   10c06:	f000 f8e9 	bl	10ddc <printk>
   10c0a:	215c      	movs	r1, #92	; 0x5c
   10c0c:	481a      	ldr	r0, [pc, #104]	; (10c78 <z_impl_k_poll_signal_raise+0xa0>)
   10c0e:	f000 fb7b 	bl	11308 <assert_post_action>
	z_spin_lock_set_owner(l);
   10c12:	4818      	ldr	r0, [pc, #96]	; (10c74 <z_impl_k_poll_signal_raise+0x9c>)
   10c14:	f7ff f88e 	bl	fd34 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
	signal->signaled = 1U;
   10c18:	2101      	movs	r1, #1
	return list->head == list;
   10c1a:	6820      	ldr	r0, [r4, #0]
	signal->result = result;
   10c1c:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   10c1e:	4284      	cmp	r4, r0
	signal->signaled = 1U;
   10c20:	60a1      	str	r1, [r4, #8]
   10c22:	d117      	bne.n	10c54 <z_impl_k_poll_signal_raise+0x7c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10c24:	4813      	ldr	r0, [pc, #76]	; (10c74 <z_impl_k_poll_signal_raise+0x9c>)
   10c26:	f7ff f877 	bl	fd18 <z_spin_unlock_valid>
   10c2a:	b968      	cbnz	r0, 10c48 <z_impl_k_poll_signal_raise+0x70>
   10c2c:	2384      	movs	r3, #132	; 0x84
   10c2e:	4a12      	ldr	r2, [pc, #72]	; (10c78 <z_impl_k_poll_signal_raise+0xa0>)
   10c30:	4915      	ldr	r1, [pc, #84]	; (10c88 <z_impl_k_poll_signal_raise+0xb0>)
   10c32:	4813      	ldr	r0, [pc, #76]	; (10c80 <z_impl_k_poll_signal_raise+0xa8>)
   10c34:	f000 f8d2 	bl	10ddc <printk>
   10c38:	490e      	ldr	r1, [pc, #56]	; (10c74 <z_impl_k_poll_signal_raise+0x9c>)
   10c3a:	4814      	ldr	r0, [pc, #80]	; (10c8c <z_impl_k_poll_signal_raise+0xb4>)
   10c3c:	f000 f8ce 	bl	10ddc <printk>
   10c40:	2184      	movs	r1, #132	; 0x84
   10c42:	480d      	ldr	r0, [pc, #52]	; (10c78 <z_impl_k_poll_signal_raise+0xa0>)
   10c44:	f000 fb60 	bl	11308 <assert_post_action>
	__asm__ volatile(
   10c48:	f386 8811 	msr	BASEPRI, r6
   10c4c:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   10c50:	2400      	movs	r4, #0
   10c52:	e00d      	b.n	10c70 <z_impl_k_poll_signal_raise+0x98>
	node->prev->next = node->next;
   10c54:	e9d0 3200 	ldrd	r3, r2, [r0]
   10c58:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   10c5a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   10c5c:	2300      	movs	r3, #0
	node->prev = NULL;
   10c5e:	e9c0 3300 	strd	r3, r3, [r0]
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   10c62:	f004 faaf 	bl	151c4 <signal_poll_event>

	z_reschedule(&lock, key);
   10c66:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   10c68:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   10c6a:	4802      	ldr	r0, [pc, #8]	; (10c74 <z_impl_k_poll_signal_raise+0x9c>)
   10c6c:	f7fd fd64 	bl	e738 <z_reschedule>
	return rc;
}
   10c70:	4620      	mov	r0, r4
   10c72:	bd70      	pop	{r4, r5, r6, pc}
   10c74:	20001ef0 	.word	0x20001ef0
   10c78:	0001691e 	.word	0x0001691e
   10c7c:	00016944 	.word	0x00016944
   10c80:	00016493 	.word	0x00016493
   10c84:	00016959 	.word	0x00016959
   10c88:	00016971 	.word	0x00016971
   10c8c:	00016988 	.word	0x00016988

00010c90 <uart_irq_tx_disable>:
	if (api->irq_tx_disable) {
   10c90:	6883      	ldr	r3, [r0, #8]
   10c92:	6a1b      	ldr	r3, [r3, #32]
   10c94:	b103      	cbz	r3, 10c98 <uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
   10c96:	4718      	bx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_disable(dev);
}
   10c98:	4770      	bx	lr

00010c9a <error>:
	dk_set_leds_state(DK_ALL_LEDS_MSK, DK_NO_LEDS_MSK);
   10c9a:	2100      	movs	r1, #0
   10c9c:	200f      	movs	r0, #15
{
   10c9e:	b508      	push	{r3, lr}
	dk_set_leds_state(DK_ALL_LEDS_MSK, DK_NO_LEDS_MSK);
   10ca0:	f003 fd24 	bl	146ec <dk_set_leds_state>
	return z_impl_k_sleep(timeout);
   10ca4:	2100      	movs	r1, #0
   10ca6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10caa:	f7fe fdd1 	bl	f850 <z_impl_k_sleep>
	while (true) {
   10cae:	e7f9      	b.n	10ca4 <error+0xa>

00010cb0 <u8_to_dec>:
 */

#include <sys/util.h>

u8_t u8_to_dec(char *buf, u8_t buflen, u8_t value)
{
   10cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   10cb2:	f04f 0c0a 	mov.w	ip, #10
{
   10cb6:	4605      	mov	r5, r0
	while (buflen > 0 && divisor > 0) {
   10cb8:	2604      	movs	r6, #4
	u8_t num_digits = 0;
   10cba:	2000      	movs	r0, #0
	u8_t divisor = 100;
   10cbc:	2464      	movs	r4, #100	; 0x64
	while (buflen > 0 && divisor > 0) {
   10cbe:	b111      	cbz	r1, 10cc6 <u8_to_dec+0x16>
   10cc0:	3e01      	subs	r6, #1
   10cc2:	d101      	bne.n	10cc8 <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   10cc4:	702e      	strb	r6, [r5, #0]
	}

	return num_digits;
}
   10cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		digit = value / divisor;
   10cc8:	fbb2 f7f4 	udiv	r7, r2, r4
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   10ccc:	42a2      	cmp	r2, r4
		digit = value / divisor;
   10cce:	b2fb      	uxtb	r3, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   10cd0:	d202      	bcs.n	10cd8 <u8_to_dec+0x28>
   10cd2:	2c01      	cmp	r4, #1
   10cd4:	d000      	beq.n	10cd8 <u8_to_dec+0x28>
   10cd6:	b130      	cbz	r0, 10ce6 <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   10cd8:	3330      	adds	r3, #48	; 0x30
   10cda:	f805 3b01 	strb.w	r3, [r5], #1
			buflen--;
   10cde:	3901      	subs	r1, #1
			num_digits++;
   10ce0:	1c43      	adds	r3, r0, #1
			buflen--;
   10ce2:	b2c9      	uxtb	r1, r1
			num_digits++;
   10ce4:	b2d8      	uxtb	r0, r3
		value -= digit * divisor;
   10ce6:	fb04 2217 	mls	r2, r4, r7, r2
		divisor /= 10;
   10cea:	fbb4 f4fc 	udiv	r4, r4, ip
   10cee:	b2d2      	uxtb	r2, r2
   10cf0:	e7e5      	b.n	10cbe <u8_to_dec+0xe>

00010cf2 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, u8_t *x)
{
	if (c >= '0' && c <= '9') {
   10cf2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   10cf6:	b2db      	uxtb	r3, r3
   10cf8:	2b09      	cmp	r3, #9
   10cfa:	d802      	bhi.n	10d02 <char2hex+0x10>
		*x = c - '0';
   10cfc:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   10cfe:	2000      	movs	r0, #0
   10d00:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   10d02:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   10d06:	2b05      	cmp	r3, #5
   10d08:	d802      	bhi.n	10d10 <char2hex+0x1e>
		*x = c - 'a' + 10;
   10d0a:	3857      	subs	r0, #87	; 0x57
   10d0c:	7008      	strb	r0, [r1, #0]
   10d0e:	e7f6      	b.n	10cfe <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   10d10:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   10d14:	2b05      	cmp	r3, #5
   10d16:	d801      	bhi.n	10d1c <char2hex+0x2a>
		*x = c - 'A' + 10;
   10d18:	3837      	subs	r0, #55	; 0x37
   10d1a:	e7f7      	b.n	10d0c <char2hex+0x1a>
		return -EINVAL;
   10d1c:	f06f 0015 	mvn.w	r0, #21
}
   10d20:	4770      	bx	lr

00010d22 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, u8_t *buf, size_t buflen)
{
   10d22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10d24:	4604      	mov	r4, r0
	u8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   10d26:	f001 0001 	and.w	r0, r1, #1
   10d2a:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   10d2e:	429d      	cmp	r5, r3
   10d30:	ea4f 0651 	mov.w	r6, r1, lsr #1
   10d34:	d903      	bls.n	10d3e <hex2bin+0x1c>
		return 0;
   10d36:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   10d38:	4628      	mov	r0, r5
   10d3a:	b003      	add	sp, #12
   10d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   10d3e:	b158      	cbz	r0, 10d58 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   10d40:	7820      	ldrb	r0, [r4, #0]
   10d42:	f10d 0107 	add.w	r1, sp, #7
   10d46:	f7ff ffd4 	bl	10cf2 <char2hex>
   10d4a:	2800      	cmp	r0, #0
   10d4c:	dbf3      	blt.n	10d36 <hex2bin+0x14>
		buf[0] = dec;
   10d4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		hex++;
   10d52:	3401      	adds	r4, #1
		buf[0] = dec;
   10d54:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   10d58:	3401      	adds	r4, #1
   10d5a:	4416      	add	r6, r2
   10d5c:	42b2      	cmp	r2, r6
   10d5e:	d0eb      	beq.n	10d38 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   10d60:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   10d64:	f10d 0107 	add.w	r1, sp, #7
   10d68:	f7ff ffc3 	bl	10cf2 <char2hex>
   10d6c:	2800      	cmp	r0, #0
   10d6e:	dbe2      	blt.n	10d36 <hex2bin+0x14>
		buf[i] = dec << 4;
   10d70:	f89d 3007 	ldrb.w	r3, [sp, #7]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   10d74:	f10d 0107 	add.w	r1, sp, #7
		buf[i] = dec << 4;
   10d78:	011b      	lsls	r3, r3, #4
   10d7a:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   10d7c:	f814 0b02 	ldrb.w	r0, [r4], #2
   10d80:	f7ff ffb7 	bl	10cf2 <char2hex>
   10d84:	2800      	cmp	r0, #0
   10d86:	dbd6      	blt.n	10d36 <hex2bin+0x14>
		buf[i] += dec;
   10d88:	7813      	ldrb	r3, [r2, #0]
   10d8a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   10d8e:	440b      	add	r3, r1
   10d90:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   10d94:	e7e2      	b.n	10d5c <hex2bin+0x3a>

00010d96 <arch_printk_char_out>:
}
   10d96:	2000      	movs	r0, #0
   10d98:	4770      	bx	lr

00010d9a <print_err>:
{
   10d9a:	b570      	push	{r4, r5, r6, lr}
   10d9c:	460d      	mov	r5, r1
   10d9e:	4604      	mov	r4, r0
	out('E', ctx);
   10da0:	2045      	movs	r0, #69	; 0x45
   10da2:	47a0      	blx	r4
	out('R', ctx);
   10da4:	4629      	mov	r1, r5
   10da6:	2052      	movs	r0, #82	; 0x52
   10da8:	47a0      	blx	r4
	out('R', ctx);
   10daa:	4629      	mov	r1, r5
   10dac:	4623      	mov	r3, r4
}
   10dae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   10db2:	2052      	movs	r0, #82	; 0x52
   10db4:	4718      	bx	r3

00010db6 <str_out>:
{
   10db6:	b530      	push	{r4, r5, lr}
   10db8:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   10dba:	680c      	ldr	r4, [r1, #0]
   10dbc:	1c55      	adds	r5, r2, #1
   10dbe:	b114      	cbz	r4, 10dc6 <str_out+0x10>
   10dc0:	684b      	ldr	r3, [r1, #4]
   10dc2:	4293      	cmp	r3, r2
   10dc4:	dc01      	bgt.n	10dca <str_out+0x14>
		ctx->count++;
   10dc6:	608d      	str	r5, [r1, #8]
}
   10dc8:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   10dca:	3b01      	subs	r3, #1
   10dcc:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   10dce:	bf08      	it	eq
   10dd0:	2200      	moveq	r2, #0
   10dd2:	608d      	str	r5, [r1, #8]
   10dd4:	bf0c      	ite	eq
   10dd6:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   10dd8:	54a0      	strbne	r0, [r4, r2]
   10dda:	e7f5      	b.n	10dc8 <str_out+0x12>

00010ddc <printk>:
{
   10ddc:	b40f      	push	{r0, r1, r2, r3}
   10dde:	b507      	push	{r0, r1, r2, lr}
   10de0:	a904      	add	r1, sp, #16
   10de2:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   10de6:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   10de8:	f7f0 fa7c 	bl	12e4 <vprintk>
}
   10dec:	b003      	add	sp, #12
   10dee:	f85d eb04 	ldr.w	lr, [sp], #4
   10df2:	b004      	add	sp, #16
   10df4:	4770      	bx	lr

00010df6 <snprintk>:
{
   10df6:	b40c      	push	{r2, r3}
   10df8:	b507      	push	{r0, r1, r2, lr}
   10dfa:	ab04      	add	r3, sp, #16
   10dfc:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   10e00:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   10e02:	f7f0 fa7d 	bl	1300 <vsnprintk>
}
   10e06:	b003      	add	sp, #12
   10e08:	f85d eb04 	ldr.w	lr, [sp], #4
   10e0c:	b002      	add	sp, #8
   10e0e:	4770      	bx	lr

00010e10 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   10e10:	4604      	mov	r4, r0
   10e12:	b508      	push	{r3, lr}
   10e14:	4608      	mov	r0, r1
   10e16:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   10e18:	461a      	mov	r2, r3
   10e1a:	47a0      	blx	r4
	return z_impl_k_current_get();
   10e1c:	f7fe fd4e 	bl	f8bc <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   10e20:	f7f2 fb0a 	bl	3438 <z_impl_k_thread_abort>

00010e24 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   10e24:	b510      	push	{r4, lr}
   10e26:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   10e28:	f04f 33ff 	mov.w	r3, #4294967295
   10e2c:	f04f 32ff 	mov.w	r2, #4294967295
   10e30:	4620      	mov	r0, r4
   10e32:	f7fd fb85 	bl	e540 <z_impl_k_queue_get>
   10e36:	4603      	mov	r3, r0
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   10e38:	2800      	cmp	r0, #0
   10e3a:	d0f5      	beq.n	10e28 <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   10e3c:	6842      	ldr	r2, [r0, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10e3e:	3308      	adds	r3, #8
   10e40:	e8d3 1fef 	ldaex	r1, [r3]
   10e44:	f021 0c01 	bic.w	ip, r1, #1
   10e48:	e8c3 cfee 	stlex	lr, ip, [r3]
   10e4c:	f1be 0f00 	cmp.w	lr, #0
   10e50:	d1f6      	bne.n	10e40 <z_work_q_main+0x1c>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   10e52:	07cb      	lsls	r3, r1, #31
   10e54:	d500      	bpl.n	10e58 <z_work_q_main+0x34>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   10e56:	4790      	blx	r2
	z_impl_k_yield();
   10e58:	f7fe fbb4 	bl	f5c4 <z_impl_k_yield>
   10e5c:	e7e4      	b.n	10e28 <z_work_q_main+0x4>

00010e5e <chunk_field>:
}

static inline size_t chunk_field(struct z_heap *h, chunkid_t c,
				 enum chunk_fields f)
{
	void *cmem = &h->buf[c];
   10e5e:	6803      	ldr	r3, [r0, #0]
   10e60:	eb03 01c1 	add.w	r1, r3, r1, lsl #3

	if (big_heap(h)) {
   10e64:	6883      	ldr	r3, [r0, #8]
   10e66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((u32_t *)cmem)[f];
   10e6a:	bf2c      	ite	cs
   10e6c:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((u16_t *)cmem)[f];
   10e70:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   10e74:	4770      	bx	lr

00010e76 <chunk_set>:

static inline void chunk_set(struct z_heap *h, chunkid_t c,
			     enum chunk_fields f, chunkid_t val)
{
   10e76:	b510      	push	{r4, lr}
	CHECK(c >= h->chunk0 && c < h->len);
	CHECK((val & ~((h->size_mask << 1) + 1)) == 0);
	CHECK((val & h->size_mask) < h->len);

	void *cmem = &h->buf[c];
   10e78:	6804      	ldr	r4, [r0, #0]

	if (big_heap(h)) {
   10e7a:	6880      	ldr	r0, [r0, #8]
	void *cmem = &h->buf[c];
   10e7c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if (big_heap(h)) {
   10e80:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((u32_t *)cmem)[f] = (u32_t) val;
   10e84:	bf2c      	ite	cs
   10e86:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		((u16_t *)cmem)[f] = (u16_t) val;
   10e8a:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   10e8e:	bd10      	pop	{r4, pc}

00010e90 <right_chunk>:
{
	return c - left_size(h, c);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
   10e90:	b538      	push	{r3, r4, r5, lr}
   10e92:	4605      	mov	r5, r0
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   10e94:	2200      	movs	r2, #0
{
   10e96:	460c      	mov	r4, r1
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   10e98:	f7ff ffe1 	bl	10e5e <chunk_field>
   10e9c:	68eb      	ldr	r3, [r5, #12]
   10e9e:	4018      	ands	r0, r3
	return c + size(h, c);
}
   10ea0:	4420      	add	r0, r4
   10ea2:	bd38      	pop	{r3, r4, r5, pc}

00010ea4 <free_list_remove>:
	return ret;
}

static void free_list_remove(struct z_heap *h, int bidx,
			     chunkid_t c)
{
   10ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct z_heap_bucket *b = &h->buckets[bidx];
   10ea8:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   10eac:	4616      	mov	r6, r2
	struct z_heap_bucket *b = &h->buckets[bidx];
   10eae:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
	CHECK(b->next != 0);
	CHECK(b->list_size > 0);
	CHECK((((h->avail_buckets & (1 << bidx)) == 0)
	       == (h->buckets[bidx].next == 0)));

	b->list_size--;
   10eb2:	6853      	ldr	r3, [r2, #4]
{
   10eb4:	4604      	mov	r4, r0
	b->list_size--;
   10eb6:	3b01      	subs	r3, #1
{
   10eb8:	460d      	mov	r5, r1
	b->list_size--;
   10eba:	6053      	str	r3, [r2, #4]

	if (b->list_size == 0) {
   10ebc:	b953      	cbnz	r3, 10ed4 <free_list_remove+0x30>
		h->avail_buckets &= ~(1 << bidx);
   10ebe:	2201      	movs	r2, #1
   10ec0:	fa02 f101 	lsl.w	r1, r2, r1
   10ec4:	6942      	ldr	r2, [r0, #20]
   10ec6:	ea22 0201 	bic.w	r2, r2, r1
   10eca:	6142      	str	r2, [r0, #20]
		b->next = 0;
   10ecc:	f848 3035 	str.w	r3, [r8, r5, lsl #3]

		b->next = second;
		chunk_set(h, first, FREE_NEXT, second);
		chunk_set(h, second, FREE_PREV, first);
	}
}
   10ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   10ed4:	4631      	mov	r1, r6
   10ed6:	2202      	movs	r2, #2
   10ed8:	f7ff ffc1 	bl	10e5e <chunk_field>
	return chunk_field(h, c, FREE_NEXT);
   10edc:	4631      	mov	r1, r6
	return chunk_field(h, c, FREE_PREV);
   10ede:	4607      	mov	r7, r0
	return chunk_field(h, c, FREE_NEXT);
   10ee0:	2203      	movs	r2, #3
   10ee2:	4620      	mov	r0, r4
   10ee4:	f7ff ffbb 	bl	10e5e <chunk_field>
   10ee8:	4606      	mov	r6, r0
		chunk_set(h, first, FREE_NEXT, second);
   10eea:	4603      	mov	r3, r0
   10eec:	4639      	mov	r1, r7
		b->next = second;
   10eee:	f848 0035 	str.w	r0, [r8, r5, lsl #3]
		chunk_set(h, first, FREE_NEXT, second);
   10ef2:	2203      	movs	r2, #3
   10ef4:	4620      	mov	r0, r4
   10ef6:	f7ff ffbe 	bl	10e76 <chunk_set>
		chunk_set(h, second, FREE_PREV, first);
   10efa:	463b      	mov	r3, r7
   10efc:	4631      	mov	r1, r6
   10efe:	4620      	mov	r0, r4
}
   10f00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		chunk_set(h, second, FREE_PREV, first);
   10f04:	2202      	movs	r2, #2
   10f06:	f7ff bfb6 	b.w	10e76 <chunk_set>

00010f0a <free_list_add>:

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   10f0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10f0e:	4604      	mov	r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   10f10:	2200      	movs	r2, #0
   10f12:	460d      	mov	r5, r1
   10f14:	f7ff ffa3 	bl	10e5e <chunk_field>
   10f18:	68e2      	ldr	r2, [r4, #12]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   10f1a:	68a3      	ldr	r3, [r4, #8]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   10f1c:	4010      	ands	r0, r2
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   10f1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
}

static int bucket_idx(struct z_heap *h, size_t sz)
{
	/* A chunk of size 2 is the minimum size on big heaps */
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   10f22:	fab0 f280 	clz	r2, r0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   10f26:	bf34      	ite	cc
   10f28:	2000      	movcc	r0, #0
   10f2a:	2001      	movcs	r0, #1
	int b = bucket_idx(h, size(h, c));

	if (h->buckets[b].list_size++ == 0) {
   10f2c:	6863      	ldr	r3, [r4, #4]
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   10f2e:	f1c0 001f 	rsb	r0, r0, #31
   10f32:	1a80      	subs	r0, r0, r2
   10f34:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   10f38:	684a      	ldr	r2, [r1, #4]
   10f3a:	1c56      	adds	r6, r2, #1
   10f3c:	604e      	str	r6, [r1, #4]
   10f3e:	b9a2      	cbnz	r2, 10f6a <free_list_add+0x60>
		CHECK(h->buckets[b].next == 0);
		CHECK((h->avail_buckets & (1 << b)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << b);
   10f40:	2201      	movs	r2, #1
   10f42:	fa02 f100 	lsl.w	r1, r2, r0
   10f46:	6962      	ldr	r2, [r4, #20]
   10f48:	430a      	orrs	r2, r1
   10f4a:	6162      	str	r2, [r4, #20]
		h->buckets[b].next = c;
		chunk_set(h, c, FREE_PREV, c);
   10f4c:	4629      	mov	r1, r5
		h->buckets[b].next = c;
   10f4e:	f843 5030 	str.w	r5, [r3, r0, lsl #3]
		chunk_set(h, c, FREE_PREV, c);
   10f52:	2202      	movs	r2, #2
   10f54:	462b      	mov	r3, r5
   10f56:	4620      	mov	r0, r4
   10f58:	f7ff ff8d 	bl	10e76 <chunk_set>
		chunk_set(h, c, FREE_NEXT, c);
   10f5c:	2203      	movs	r2, #3
   10f5e:	4629      	mov	r1, r5
		chunkid_t first = free_prev(h, second);

		chunk_set(h, c, FREE_PREV, first);
		chunk_set(h, c, FREE_NEXT, second);
		chunk_set(h, first, FREE_NEXT, c);
		chunk_set(h, second, FREE_PREV, c);
   10f60:	4620      	mov	r0, r4
	}

	CHECK(h->avail_buckets & (1 << bucket_idx(h, size(h, c))));
}
   10f62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		chunk_set(h, second, FREE_PREV, c);
   10f66:	f7ff bf86 	b.w	10e76 <chunk_set>
		chunkid_t second = h->buckets[b].next;
   10f6a:	f853 7030 	ldr.w	r7, [r3, r0, lsl #3]
	return chunk_field(h, c, FREE_PREV);
   10f6e:	2202      	movs	r2, #2
   10f70:	4639      	mov	r1, r7
   10f72:	4620      	mov	r0, r4
   10f74:	f7ff ff73 	bl	10e5e <chunk_field>
   10f78:	4606      	mov	r6, r0
		chunk_set(h, c, FREE_PREV, first);
   10f7a:	4603      	mov	r3, r0
   10f7c:	2202      	movs	r2, #2
   10f7e:	4629      	mov	r1, r5
   10f80:	4620      	mov	r0, r4
   10f82:	f7ff ff78 	bl	10e76 <chunk_set>
		chunk_set(h, c, FREE_NEXT, second);
   10f86:	463b      	mov	r3, r7
   10f88:	2203      	movs	r2, #3
   10f8a:	4629      	mov	r1, r5
   10f8c:	4620      	mov	r0, r4
   10f8e:	f7ff ff72 	bl	10e76 <chunk_set>
		chunk_set(h, first, FREE_NEXT, c);
   10f92:	2203      	movs	r2, #3
   10f94:	4631      	mov	r1, r6
   10f96:	462b      	mov	r3, r5
   10f98:	4620      	mov	r0, r4
   10f9a:	f7ff ff6c 	bl	10e76 <chunk_set>
		chunk_set(h, second, FREE_PREV, c);
   10f9e:	2202      	movs	r2, #2
   10fa0:	4639      	mov	r1, r7
   10fa2:	e7dd      	b.n	10f60 <free_list_add+0x56>

00010fa4 <split_alloc>:

/* Allocates (fit check has already been perfomred) from the next
 * chunk at the specified bucket level
 */
static void *split_alloc(struct z_heap *h, int bidx, size_t sz)
{
   10fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10fa8:	4604      	mov	r4, r0
	CHECK(h->buckets[bidx].next != 0
	      && sz <= size(h, h->buckets[bidx].next));

	chunkid_t c = h->buckets[bidx].next;
   10faa:	6843      	ldr	r3, [r0, #4]
{
   10fac:	4617      	mov	r7, r2
	chunkid_t c = h->buckets[bidx].next;
   10fae:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]

	free_list_remove(h, bidx, c);
   10fb2:	462a      	mov	r2, r5
   10fb4:	f7ff ff76 	bl	10ea4 <free_list_remove>
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   10fb8:	2200      	movs	r2, #0
   10fba:	4629      	mov	r1, r5
   10fbc:	4620      	mov	r0, r4
   10fbe:	f7ff ff4e 	bl	10e5e <chunk_field>
	/* Split off remainder if it's usefully large */
	size_t rem = size(h, c) - sz;

	CHECK(rem < h->len);

	if (rem >= (big_heap(h) ? 2 : 1)) {
   10fc2:	68a3      	ldr	r3, [r4, #8]
   10fc4:	68e6      	ldr	r6, [r4, #12]
   10fc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   10fca:	bf2c      	ite	cs
   10fcc:	2302      	movcs	r3, #2
   10fce:	2301      	movcc	r3, #1
   10fd0:	4006      	ands	r6, r0
	size_t rem = size(h, c) - sz;
   10fd2:	1bf6      	subs	r6, r6, r7
	if (rem >= (big_heap(h) ? 2 : 1)) {
   10fd4:	42b3      	cmp	r3, r6
   10fd6:	d82d      	bhi.n	11034 <split_alloc+0x90>
		chunkid_t c2 = c + sz;
		chunkid_t c3 = right_chunk(h, c);
   10fd8:	4629      	mov	r1, r5
   10fda:	4620      	mov	r0, r4
   10fdc:	f7ff ff58 	bl	10e90 <right_chunk>
		chunkid_t c2 = c + sz;
   10fe0:	eb05 0807 	add.w	r8, r5, r7

		chunk_set(h, c, SIZE_AND_USED, sz);
   10fe4:	463b      	mov	r3, r7
   10fe6:	2200      	movs	r2, #0
   10fe8:	4629      	mov	r1, r5
		chunkid_t c3 = right_chunk(h, c);
   10fea:	4681      	mov	r9, r0
		chunk_set(h, c, SIZE_AND_USED, sz);
   10fec:	4620      	mov	r0, r4
   10fee:	f7ff ff42 	bl	10e76 <chunk_set>
		chunk_set(h, c2, SIZE_AND_USED, rem);
   10ff2:	4633      	mov	r3, r6
   10ff4:	2200      	movs	r2, #0
   10ff6:	4641      	mov	r1, r8
   10ff8:	4620      	mov	r0, r4
   10ffa:	f7ff ff3c 	bl	10e76 <chunk_set>
		chunk_set(h, c2, LEFT_SIZE, sz);
   10ffe:	463b      	mov	r3, r7
   11000:	2201      	movs	r2, #1
   11002:	4641      	mov	r1, r8
   11004:	4620      	mov	r0, r4
   11006:	f7ff ff36 	bl	10e76 <chunk_set>
   1100a:	2200      	movs	r2, #0
   1100c:	4641      	mov	r1, r8
   1100e:	4620      	mov	r0, r4
   11010:	f7ff ff25 	bl	10e5e <chunk_field>
   11014:	68e3      	ldr	r3, [r4, #12]
		if (!last_chunk(h, c2)) {
   11016:	68a2      	ldr	r2, [r4, #8]
   11018:	4003      	ands	r3, r0
	return (c + size(h, c)) == h->len;
   1101a:	4443      	add	r3, r8
		if (!last_chunk(h, c2)) {
   1101c:	4293      	cmp	r3, r2
   1101e:	d005      	beq.n	1102c <split_alloc+0x88>
			chunk_set(h, c3, LEFT_SIZE, rem);
   11020:	4633      	mov	r3, r6
   11022:	2201      	movs	r2, #1
   11024:	4649      	mov	r1, r9
   11026:	4620      	mov	r0, r4
   11028:	f7ff ff25 	bl	10e76 <chunk_set>
		}
		free_list_add(h, c2);
   1102c:	4641      	mov	r1, r8
   1102e:	4620      	mov	r0, r4
   11030:	f7ff ff6b 	bl	10f0a <free_list_add>
   11034:	4629      	mov	r1, r5
   11036:	2200      	movs	r2, #0
   11038:	4620      	mov	r0, r4
   1103a:	f7ff ff10 	bl	10e5e <chunk_field>
   1103e:	68e2      	ldr	r2, [r4, #12]
	chunk_set(h, c, SIZE_AND_USED,
   11040:	4629      	mov	r1, r5
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   11042:	ea00 0302 	and.w	r3, r0, r2
		  size(h, c) | (used ? (h->size_mask + 1) : 0));
   11046:	3201      	adds	r2, #1
	chunk_set(h, c, SIZE_AND_USED,
   11048:	4620      	mov	r0, r4
   1104a:	4313      	orrs	r3, r2
   1104c:	2200      	movs	r2, #0
   1104e:	f7ff ff12 	bl	10e76 <chunk_set>
	return big_heap(h) ? 8 : 4;
   11052:	68a3      	ldr	r3, [r4, #8]
	u8_t *ret = ((u8_t *)&h->buf[c]) + chunk_header_bytes(h);
   11054:	6820      	ldr	r0, [r4, #0]
   11056:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1105a:	bf2c      	ite	cs
   1105c:	2308      	movcs	r3, #8
   1105e:	2304      	movcc	r3, #4
   11060:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
	}

	chunk_set_used(h, c, true);

	return chunk_mem(h, c);
}
   11064:	4428      	add	r0, r5
   11066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001106a <sys_heap_free>:

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   1106a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (mem == NULL) {
   1106e:	2900      	cmp	r1, #0
   11070:	f000 80ac 	beq.w	111cc <sys_heap_free+0x162>
		return; /* ISO C free() semantics */
	}

	struct z_heap *h = heap->heap;
   11074:	6804      	ldr	r4, [r0, #0]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   11076:	2200      	movs	r2, #0
	return big_heap(h) ? 8 : 4;
   11078:	68a7      	ldr	r7, [r4, #8]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   1107a:	4620      	mov	r0, r4
	return big_heap(h) ? 8 : 4;
   1107c:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   11080:	bf2c      	ite	cs
   11082:	2508      	movcs	r5, #8
   11084:	2504      	movcc	r5, #4
	chunkid_t c = ((u8_t *)mem - chunk_header_bytes(h)
   11086:	1b4d      	subs	r5, r1, r5
		       - (u8_t *)h->buf) / CHUNK_UNIT;
   11088:	6821      	ldr	r1, [r4, #0]
   1108a:	1a6d      	subs	r5, r5, r1
   1108c:	bf48      	it	mi
   1108e:	3507      	addmi	r5, #7
   11090:	10ed      	asrs	r5, r5, #3
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   11092:	4629      	mov	r1, r5
   11094:	f7ff fee3 	bl	10e5e <chunk_field>
   11098:	68e6      	ldr	r6, [r4, #12]
   1109a:	ea06 0800 	and.w	r8, r6, r0
	return (c + size(h, c)) == h->len;
   1109e:	eb05 0308 	add.w	r3, r5, r8

	/* Merge with right chunk?  We can just absorb it. */
	if (!last_chunk(h, c) && !used(h, right_chunk(h, c))) {
   110a2:	42bb      	cmp	r3, r7
   110a4:	d036      	beq.n	11114 <sys_heap_free+0xaa>
   110a6:	4629      	mov	r1, r5
   110a8:	4620      	mov	r0, r4
   110aa:	f7ff fef1 	bl	10e90 <right_chunk>
	return (chunk_field(h, c, SIZE_AND_USED) & ~h->size_mask) != 0;
   110ae:	2200      	movs	r2, #0
   110b0:	4601      	mov	r1, r0
   110b2:	4682      	mov	sl, r0
   110b4:	4620      	mov	r0, r4
   110b6:	f7ff fed2 	bl	10e5e <chunk_field>
   110ba:	ea30 0906 	bics.w	r9, r0, r6
   110be:	d129      	bne.n	11114 <sys_heap_free+0xaa>
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   110c0:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   110c4:	bf34      	ite	cc
   110c6:	2700      	movcc	r7, #0
   110c8:	2701      	movcs	r7, #1
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   110ca:	4006      	ands	r6, r0
		chunkid_t rc = right_chunk(h, c);
		size_t newsz = size(h, c) + size(h, rc);
   110cc:	44b0      	add	r8, r6
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   110ce:	fab6 f686 	clz	r6, r6
   110d2:	f1c7 071f 	rsb	r7, r7, #31

		free_list_remove(h, bucket_idx(h, size(h, rc)), rc);
   110d6:	4652      	mov	r2, sl
   110d8:	4620      	mov	r0, r4
   110da:	1bb9      	subs	r1, r7, r6
   110dc:	f7ff fee2 	bl	10ea4 <free_list_remove>
		chunk_set(h, c, SIZE_AND_USED, newsz);
   110e0:	4643      	mov	r3, r8
   110e2:	464a      	mov	r2, r9
   110e4:	4629      	mov	r1, r5
   110e6:	4620      	mov	r0, r4
   110e8:	f7ff fec5 	bl	10e76 <chunk_set>
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   110ec:	4629      	mov	r1, r5
   110ee:	4620      	mov	r0, r4
   110f0:	f7ff feb5 	bl	10e5e <chunk_field>
   110f4:	68e3      	ldr	r3, [r4, #12]
   110f6:	4018      	ands	r0, r3
		if (!last_chunk(h, c)) {
   110f8:	68a3      	ldr	r3, [r4, #8]
	return (c + size(h, c)) == h->len;
   110fa:	4428      	add	r0, r5
		if (!last_chunk(h, c)) {
   110fc:	4283      	cmp	r3, r0
   110fe:	d009      	beq.n	11114 <sys_heap_free+0xaa>
			chunk_set(h, right_chunk(h, c), LEFT_SIZE, newsz);
   11100:	4629      	mov	r1, r5
   11102:	4620      	mov	r0, r4
   11104:	f7ff fec4 	bl	10e90 <right_chunk>
   11108:	4643      	mov	r3, r8
   1110a:	4601      	mov	r1, r0
   1110c:	2201      	movs	r2, #1
   1110e:	4620      	mov	r0, r4
   11110:	f7ff feb1 	bl	10e76 <chunk_set>
		}
	}

	/* Merge with left chunk?  It absorbs us. */
	if (c != h->chunk0 && !used(h, left_chunk(h, c))) {
   11114:	6923      	ldr	r3, [r4, #16]
   11116:	42ab      	cmp	r3, r5
   11118:	d046      	beq.n	111a8 <sys_heap_free+0x13e>
	return chunk_field(h, c, LEFT_SIZE);
   1111a:	2201      	movs	r2, #1
   1111c:	4629      	mov	r1, r5
   1111e:	4620      	mov	r0, r4
   11120:	f7ff fe9d 	bl	10e5e <chunk_field>
	return c - left_size(h, c);
   11124:	1a2f      	subs	r7, r5, r0
	return (chunk_field(h, c, SIZE_AND_USED) & ~h->size_mask) != 0;
   11126:	2200      	movs	r2, #0
   11128:	4639      	mov	r1, r7
   1112a:	4620      	mov	r0, r4
   1112c:	f7ff fe97 	bl	10e5e <chunk_field>
   11130:	f8d4 800c 	ldr.w	r8, [r4, #12]
   11134:	4606      	mov	r6, r0
   11136:	ea30 0908 	bics.w	r9, r0, r8
   1113a:	d135      	bne.n	111a8 <sys_heap_free+0x13e>
   1113c:	464a      	mov	r2, r9
   1113e:	4629      	mov	r1, r5
   11140:	4620      	mov	r0, r4
   11142:	f7ff fe8c 	bl	10e5e <chunk_field>
   11146:	4682      	mov	sl, r0
		chunkid_t lc = left_chunk(h, c);
		chunkid_t rc = right_chunk(h, c);
   11148:	4629      	mov	r1, r5
   1114a:	4620      	mov	r0, r4
   1114c:	f7ff fea0 	bl	10e90 <right_chunk>
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   11150:	68a1      	ldr	r1, [r4, #8]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   11152:	ea06 0608 	and.w	r6, r6, r8
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   11156:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   1115a:	bf34      	ite	cc
   1115c:	2100      	movcc	r1, #0
   1115e:	2101      	movcs	r1, #1
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   11160:	ea08 080a 	and.w	r8, r8, sl
		size_t csz = size(h, c);
		size_t merged_sz = csz + size(h, lc);
   11164:	44b0      	add	r8, r6
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   11166:	fab6 f686 	clz	r6, r6
   1116a:	f1c1 011f 	rsb	r1, r1, #31

		free_list_remove(h, bucket_idx(h, size(h, lc)), lc);
   1116e:	463a      	mov	r2, r7
   11170:	1b89      	subs	r1, r1, r6
		chunkid_t rc = right_chunk(h, c);
   11172:	4605      	mov	r5, r0
		free_list_remove(h, bucket_idx(h, size(h, lc)), lc);
   11174:	4620      	mov	r0, r4
   11176:	f7ff fe95 	bl	10ea4 <free_list_remove>
		chunk_set(h, lc, SIZE_AND_USED, merged_sz);
   1117a:	4643      	mov	r3, r8
   1117c:	464a      	mov	r2, r9
   1117e:	4639      	mov	r1, r7
   11180:	4620      	mov	r0, r4
   11182:	f7ff fe78 	bl	10e76 <chunk_set>
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   11186:	4639      	mov	r1, r7
   11188:	4620      	mov	r0, r4
   1118a:	f7ff fe68 	bl	10e5e <chunk_field>
   1118e:	68e3      	ldr	r3, [r4, #12]
   11190:	4018      	ands	r0, r3
		if (!last_chunk(h, lc)) {
   11192:	68a3      	ldr	r3, [r4, #8]
	return (c + size(h, c)) == h->len;
   11194:	4438      	add	r0, r7
		if (!last_chunk(h, lc)) {
   11196:	4298      	cmp	r0, r3
   11198:	d005      	beq.n	111a6 <sys_heap_free+0x13c>
			chunk_set(h, rc, LEFT_SIZE, merged_sz);
   1119a:	4643      	mov	r3, r8
   1119c:	2201      	movs	r2, #1
   1119e:	4629      	mov	r1, r5
   111a0:	4620      	mov	r0, r4
   111a2:	f7ff fe68 	bl	10e76 <chunk_set>
		}

		c = lc;
   111a6:	463d      	mov	r5, r7
   111a8:	4629      	mov	r1, r5
   111aa:	2200      	movs	r2, #0
   111ac:	4620      	mov	r0, r4
   111ae:	f7ff fe56 	bl	10e5e <chunk_field>
   111b2:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, SIZE_AND_USED,
   111b4:	4629      	mov	r1, r5
   111b6:	4003      	ands	r3, r0
   111b8:	2200      	movs	r2, #0
   111ba:	4620      	mov	r0, r4
   111bc:	f7ff fe5b 	bl	10e76 <chunk_set>
	}

	chunk_set_used(h, c, false);
	free_list_add(h, c);
   111c0:	4629      	mov	r1, r5
   111c2:	4620      	mov	r0, r4
}
   111c4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	free_list_add(h, c);
   111c8:	f7ff be9f 	b.w	10f0a <free_list_add>
}
   111cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000111d0 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   111d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct z_heap *h = heap->heap;
   111d4:	6804      	ldr	r4, [r0, #0]
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   111d6:	1dcd      	adds	r5, r1, #7
	return big_heap(h) ? 8 : 4;
   111d8:	68a2      	ldr	r2, [r4, #8]
   111da:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   111de:	bf2c      	ite	cs
   111e0:	2308      	movcs	r3, #8
   111e2:	2304      	movcc	r3, #4
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   111e4:	441d      	add	r5, r3
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   111e6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   111ea:	ea4f 05d5 	mov.w	r5, r5, lsr #3
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   111ee:	fab5 f685 	clz	r6, r5
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   111f2:	bf34      	ite	cc
   111f4:	2300      	movcc	r3, #0
   111f6:	2301      	movcs	r3, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   111f8:	441e      	add	r6, r3
   111fa:	f1c6 081f 	rsb	r8, r6, #31
	size_t sz = bytes_to_chunksz(h, bytes);
	int bi = bucket_idx(h, sz);
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bytes == 0 || bi > bucket_idx(h, h->len)) {
   111fe:	2900      	cmp	r1, #0
   11200:	d03b      	beq.n	1127a <sys_heap_alloc+0xaa>
   11202:	fab2 f282 	clz	r2, r2
   11206:	f1c3 031f 	rsb	r3, r3, #31
   1120a:	1a9b      	subs	r3, r3, r2
   1120c:	4598      	cmp	r8, r3
   1120e:	dc34      	bgt.n	1127a <sys_heap_alloc+0xaa>
	struct z_heap_bucket *b = &h->buckets[bi];
   11210:	6867      	ldr	r7, [r4, #4]
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	int loops = MIN(b->list_size, CONFIG_SYS_HEAP_ALLOC_LOOPS);

	for (int i = 0; i < loops; i++) {
   11212:	f04f 0a00 	mov.w	sl, #0
	struct z_heap_bucket *b = &h->buckets[bi];
   11216:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
	int loops = MIN(b->list_size, CONFIG_SYS_HEAP_ALLOC_LOOPS);
   1121a:	687b      	ldr	r3, [r7, #4]
   1121c:	2b03      	cmp	r3, #3
   1121e:	bf28      	it	cs
   11220:	2303      	movcs	r3, #3
   11222:	4699      	mov	r9, r3
	for (int i = 0; i < loops; i++) {
   11224:	45ca      	cmp	sl, r9
   11226:	db0d      	blt.n	11244 <sys_heap_alloc+0x74>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   11228:	f04f 31ff 	mov.w	r1, #4294967295
   1122c:	6963      	ldr	r3, [r4, #20]
   1122e:	f1c6 0620 	rsb	r6, r6, #32
   11232:	40b1      	lsls	r1, r6

	if ((bmask & h->avail_buckets) != 0) {
   11234:	4019      	ands	r1, r3
   11236:	d020      	beq.n	1127a <sys_heap_alloc+0xaa>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);

		return split_alloc(h, minbucket, sz);
   11238:	fa91 f1a1 	rbit	r1, r1
   1123c:	462a      	mov	r2, r5
   1123e:	fab1 f181 	clz	r1, r1
   11242:	e00c      	b.n	1125e <sys_heap_alloc+0x8e>
		if (size(h, b->next) >= sz) {
   11244:	f8d7 b000 	ldr.w	fp, [r7]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   11248:	2200      	movs	r2, #0
   1124a:	4659      	mov	r1, fp
   1124c:	4620      	mov	r0, r4
   1124e:	f7ff fe06 	bl	10e5e <chunk_field>
   11252:	68e3      	ldr	r3, [r4, #12]
   11254:	4018      	ands	r0, r3
   11256:	42a8      	cmp	r0, r5
   11258:	d306      	bcc.n	11268 <sys_heap_alloc+0x98>
			return split_alloc(h, bi, sz);
   1125a:	462a      	mov	r2, r5
   1125c:	4641      	mov	r1, r8
		return split_alloc(h, minbucket, sz);
   1125e:	4620      	mov	r0, r4
	}

	return NULL;
}
   11260:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return split_alloc(h, minbucket, sz);
   11264:	f7ff be9e 	b.w	10fa4 <split_alloc>
	return chunk_field(h, c, FREE_NEXT);
   11268:	2203      	movs	r2, #3
   1126a:	4659      	mov	r1, fp
   1126c:	4620      	mov	r0, r4
   1126e:	f7ff fdf6 	bl	10e5e <chunk_field>
	for (int i = 0; i < loops; i++) {
   11272:	f10a 0a01 	add.w	sl, sl, #1
		b->next = free_next(h, b->next);
   11276:	6038      	str	r0, [r7, #0]
	for (int i = 0; i < loops; i++) {
   11278:	e7d4      	b.n	11224 <sys_heap_alloc+0x54>
}
   1127a:	2000      	movs	r0, #0
   1127c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00011280 <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   11280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	CHECK(bytes < 0x800000000ULL);
#endif

	/* Round the start up, the end down */
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
   11282:	188b      	adds	r3, r1, r2

	heap->heap = (struct z_heap *)addr;
	h->buf = (u64_t *)addr;
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
	h->len = buf_sz;
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   11284:	f647 72ff 	movw	r2, #32767	; 0x7fff
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
   11288:	1dcc      	adds	r4, r1, #7
   1128a:	f024 0407 	bic.w	r4, r4, #7
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
   1128e:	f023 0307 	bic.w	r3, r3, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   11292:	1b1b      	subs	r3, r3, r4
   11294:	08db      	lsrs	r3, r3, #3
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   11296:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1129a:	bf2c      	ite	cs
   1129c:	f06f 4100 	mvncs.w	r1, #2147483648	; 0x80000000
   112a0:	4611      	movcc	r1, r2
	heap->heap = (struct z_heap *)addr;
   112a2:	6004      	str	r4, [r0, #0]
	h->avail_buckets = 0;
   112a4:	2000      	movs	r0, #0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   112a6:	4293      	cmp	r3, r2
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   112a8:	60e1      	str	r1, [r4, #12]
   112aa:	bf94      	ite	ls
   112ac:	2100      	movls	r1, #0
   112ae:	2101      	movhi	r1, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   112b0:	fab3 f683 	clz	r6, r3
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   112b4:	4617      	mov	r7, r2
				* sizeof(struct z_heap_bucket));

	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);

	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
		heap->heap->buckets[i].list_size = 0;
   112b6:	4684      	mov	ip, r0
	size_t buckets_bytes = ((bucket_idx(h, buf_sz) + 1)
   112b8:	f1c1 0120 	rsb	r1, r1, #32
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
   112bc:	f104 0518 	add.w	r5, r4, #24
	size_t buckets_bytes = ((bucket_idx(h, buf_sz) + 1)
   112c0:	1b89      	subs	r1, r1, r6
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   112c2:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
	h->len = buf_sz;
   112c6:	e9c4 5301 	strd	r5, r3, [r4, #4]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
   112ca:	3103      	adds	r1, #3
	h->buf = (u64_t *)addr;
   112cc:	6024      	str	r4, [r4, #0]
	h->avail_buckets = 0;
   112ce:	6160      	str	r0, [r4, #20]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
   112d0:	6121      	str	r1, [r4, #16]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   112d2:	68a2      	ldr	r2, [r4, #8]
   112d4:	42ba      	cmp	r2, r7
   112d6:	bf94      	ite	ls
   112d8:	2200      	movls	r2, #0
   112da:	2201      	movhi	r2, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   112dc:	f1c2 021f 	rsb	r2, r2, #31
   112e0:	1b92      	subs	r2, r2, r6
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
   112e2:	4290      	cmp	r0, r2
   112e4:	dd0a      	ble.n	112fc <sys_heap_init+0x7c>
		heap->heap->buckets[i].next = 0;
	}

	chunk_set(h, h->chunk0, SIZE_AND_USED, buf_sz - h->chunk0);
   112e6:	4620      	mov	r0, r4
   112e8:	1a5b      	subs	r3, r3, r1
   112ea:	2200      	movs	r2, #0
   112ec:	f7ff fdc3 	bl	10e76 <chunk_set>
	free_list_add(h, h->chunk0);
   112f0:	4620      	mov	r0, r4
   112f2:	6921      	ldr	r1, [r4, #16]
}
   112f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, h->chunk0);
   112f8:	f7ff be07 	b.w	10f0a <free_list_add>
		heap->heap->buckets[i].list_size = 0;
   112fc:	f8c5 c004 	str.w	ip, [r5, #4]
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
   11300:	3001      	adds	r0, #1
		heap->heap->buckets[i].next = 0;
   11302:	f845 cb08 	str.w	ip, [r5], #8
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
   11306:	e7e4      	b.n	112d2 <sys_heap_init+0x52>

00011308 <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   11308:	4040      	eors	r0, r0
   1130a:	f380 8811 	msr	BASEPRI, r0
   1130e:	f04f 0004 	mov.w	r0, #4
   11312:	df02      	svc	2
}
   11314:	4770      	bx	lr

00011316 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM(CONFIG_BT_GATT_NUS_THREAD_STACK_SIZE, 1024);
GEN_ABSOLUTE_SYM(CONFIG_BT_GATT_NUS_UART_BUFFER_SIZE, 20);
GEN_ABSOLUTE_SYM(CONFIG_BT_GATT_NUS_SECURITY_ENABLED, 1);

GEN_ABS_SYM_END
   11316:	4770      	bx	lr

00011318 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   11318:	f7fb bd5c 	b.w	cdd4 <SystemInit>

0001131c <flash_write_protection_set>:
	return api->write_protection(dev, enable);
   1131c:	6883      	ldr	r3, [r0, #8]
   1131e:	68db      	ldr	r3, [r3, #12]
   11320:	4718      	bx	r3

00011322 <nvs_flash_rd>:
{
   11322:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   11324:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   11326:	8984      	ldrh	r4, [r0, #12]
   11328:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   1132a:	fa16 f181 	uxtah	r1, r6, r1
   1132e:	fb05 1104 	mla	r1, r5, r4, r1
	rc = flash_read(fs->flash_device, offset, data, len);
   11332:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return api->read(dev, offset, data, len);
   11334:	6884      	ldr	r4, [r0, #8]
   11336:	6824      	ldr	r4, [r4, #0]
   11338:	46a4      	mov	ip, r4
}
   1133a:	bc70      	pop	{r4, r5, r6}
   1133c:	4760      	bx	ip

0001133e <nvs_flash_block_cmp>:
{
   1133e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11342:	4681      	mov	r9, r0
   11344:	460e      	mov	r6, r1
   11346:	4617      	mov	r7, r2
   11348:	461c      	mov	r4, r3
	block_size = NVS_BLOCK_SIZE & ~(fs->write_block_size - 1U);
   1134a:	7c05      	ldrb	r5, [r0, #16]
{
   1134c:	b089      	sub	sp, #36	; 0x24
	block_size = NVS_BLOCK_SIZE & ~(fs->write_block_size - 1U);
   1134e:	426d      	negs	r5, r5
   11350:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   11354:	b91c      	cbnz	r4, 1135e <nvs_flash_block_cmp+0x20>
	return 0;
   11356:	4620      	mov	r0, r4
}
   11358:	b009      	add	sp, #36	; 0x24
   1135a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   1135e:	42ac      	cmp	r4, r5
   11360:	46a0      	mov	r8, r4
   11362:	bf28      	it	cs
   11364:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   11366:	466a      	mov	r2, sp
   11368:	4643      	mov	r3, r8
   1136a:	4631      	mov	r1, r6
   1136c:	4648      	mov	r0, r9
   1136e:	f7ff ffd8 	bl	11322 <nvs_flash_rd>
		if (rc) {
   11372:	2800      	cmp	r0, #0
   11374:	d1f0      	bne.n	11358 <nvs_flash_block_cmp+0x1a>
		rc = memcmp(data8, buf, bytes_to_cmp);
   11376:	4642      	mov	r2, r8
   11378:	4669      	mov	r1, sp
   1137a:	4638      	mov	r0, r7
   1137c:	f000 fedf 	bl	1213e <memcmp>
		if (rc) {
   11380:	b920      	cbnz	r0, 1138c <nvs_flash_block_cmp+0x4e>
		len -= bytes_to_cmp;
   11382:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   11386:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   11388:	4447      	add	r7, r8
   1138a:	e7e3      	b.n	11354 <nvs_flash_block_cmp+0x16>
			return 1;
   1138c:	2001      	movs	r0, #1
   1138e:	e7e3      	b.n	11358 <nvs_flash_block_cmp+0x1a>

00011390 <nvs_ate_crc8_check>:
{
   11390:	b510      	push	{r4, lr}
   11392:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   11394:	4601      	mov	r1, r0
   11396:	2207      	movs	r2, #7
   11398:	20ff      	movs	r0, #255	; 0xff
   1139a:	f7ef fd9b 	bl	ed4 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   1139e:	79e3      	ldrb	r3, [r4, #7]
}
   113a0:	1a18      	subs	r0, r3, r0
   113a2:	bf18      	it	ne
   113a4:	2001      	movne	r0, #1
   113a6:	bd10      	pop	{r4, pc}

000113a8 <nvs_ate_crc8_update>:
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   113a8:	4601      	mov	r1, r0
{
   113aa:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   113ac:	2207      	movs	r2, #7
{
   113ae:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   113b0:	20ff      	movs	r0, #255	; 0xff
   113b2:	f7ef fd8f 	bl	ed4 <crc8_ccitt>
	entry->crc8 = crc8;
   113b6:	71e0      	strb	r0, [r4, #7]
}
   113b8:	bd10      	pop	{r4, pc}

000113ba <nvs_al_size.isra.0>:
static inline size_t nvs_al_size(struct nvs_fs *fs, size_t len)
   113ba:	4603      	mov	r3, r0
   113bc:	4608      	mov	r0, r1
	if (fs->write_block_size <= 1U) {
   113be:	2b01      	cmp	r3, #1
	return (len + (fs->write_block_size - 1U)) & ~(fs->write_block_size - 1U);
   113c0:	bf81      	itttt	hi
   113c2:	f103 31ff 	addhi.w	r1, r3, #4294967295
   113c6:	1809      	addhi	r1, r1, r0
   113c8:	4258      	neghi	r0, r3
   113ca:	4008      	andhi	r0, r1
}
   113cc:	4770      	bx	lr

000113ce <nvs_sector_advance.isra.0>:
	*addr += (1 << ADDR_SECT_SHIFT);
   113ce:	680b      	ldr	r3, [r1, #0]
   113d0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   113d4:	0c1a      	lsrs	r2, r3, #16
   113d6:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   113da:	bf08      	it	eq
   113dc:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   113e0:	600b      	str	r3, [r1, #0]
}
   113e2:	4770      	bx	lr

000113e4 <nvs_flash_cmp_const.constprop.0>:
static int nvs_flash_cmp_const(struct nvs_fs *fs, u32_t addr, u8_t value,
   113e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	block_size = NVS_BLOCK_SIZE & ~(fs->write_block_size - 1U);
   113e8:	7c05      	ldrb	r5, [r0, #16]
static int nvs_flash_cmp_const(struct nvs_fs *fs, u32_t addr, u8_t value,
   113ea:	b088      	sub	sp, #32
	block_size = NVS_BLOCK_SIZE & ~(fs->write_block_size - 1U);
   113ec:	426d      	negs	r5, r5
   113ee:	f005 0520 	and.w	r5, r5, #32
static int nvs_flash_cmp_const(struct nvs_fs *fs, u32_t addr, u8_t value,
   113f2:	4607      	mov	r7, r0
   113f4:	460e      	mov	r6, r1
   113f6:	4614      	mov	r4, r2
	(void)memset(cmp, value, block_size);
   113f8:	21ff      	movs	r1, #255	; 0xff
   113fa:	462a      	mov	r2, r5
   113fc:	4668      	mov	r0, sp
   113fe:	f000 fed9 	bl	121b4 <memset>
	while (len) {
   11402:	b91c      	cbnz	r4, 1140c <nvs_flash_cmp_const.constprop.0+0x28>
	return 0;
   11404:	4620      	mov	r0, r4
}
   11406:	b008      	add	sp, #32
   11408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   1140c:	42a5      	cmp	r5, r4
   1140e:	46a8      	mov	r8, r5
   11410:	bf28      	it	cs
   11412:	46a0      	movcs	r8, r4
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   11414:	466a      	mov	r2, sp
   11416:	4643      	mov	r3, r8
   11418:	4631      	mov	r1, r6
   1141a:	4638      	mov	r0, r7
   1141c:	f7ff ff8f 	bl	1133e <nvs_flash_block_cmp>
		if (rc) {
   11420:	2800      	cmp	r0, #0
   11422:	d1f0      	bne.n	11406 <nvs_flash_cmp_const.constprop.0+0x22>
		len -= bytes_to_cmp;
   11424:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   11428:	4446      	add	r6, r8
   1142a:	e7ea      	b.n	11402 <nvs_flash_cmp_const.constprop.0+0x1e>

0001142c <nvs_flash_erase_sector>:
{
   1142c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	addr &= ADDR_SECT_MASK;
   11430:	0c0e      	lsrs	r6, r1, #16
   11432:	0436      	lsls	r6, r6, #16
	rc = nvs_flash_cmp_const(fs, addr, 0xff, fs->sector_size);
   11434:	4631      	mov	r1, r6
   11436:	8982      	ldrh	r2, [r0, #12]
{
   11438:	4605      	mov	r5, r0
	rc = nvs_flash_cmp_const(fs, addr, 0xff, fs->sector_size);
   1143a:	f7ff ffd3 	bl	113e4 <nvs_flash_cmp_const.constprop.0>
	if (rc <= 0) {
   1143e:	1e04      	subs	r4, r0, #0
   11440:	dd17      	ble.n	11472 <nvs_flash_erase_sector+0x46>
	rc = flash_write_protection_set(fs->flash_device, 0);
   11442:	2100      	movs	r1, #0
   11444:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	offset = fs->offset;
   11446:	682f      	ldr	r7, [r5, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   11448:	f8b5 800c 	ldrh.w	r8, [r5, #12]
	rc = flash_write_protection_set(fs->flash_device, 0);
   1144c:	f7ff ff66 	bl	1131c <flash_write_protection_set>
	if (rc) {
   11450:	4604      	mov	r4, r0
   11452:	b970      	cbnz	r0, 11472 <nvs_flash_erase_sector+0x46>
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   11454:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   11456:	89aa      	ldrh	r2, [r5, #12]
	return api->erase(dev, offset, size);
   11458:	6883      	ldr	r3, [r0, #8]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1145a:	0c31      	lsrs	r1, r6, #16
   1145c:	fb08 7101 	mla	r1, r8, r1, r7
   11460:	689b      	ldr	r3, [r3, #8]
   11462:	4798      	blx	r3
	if (rc) {
   11464:	4604      	mov	r4, r0
   11466:	b920      	cbnz	r0, 11472 <nvs_flash_erase_sector+0x46>
	(void) flash_write_protection_set(fs->flash_device, 1);
   11468:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	return api->write_protection(dev, enable);
   1146a:	6883      	ldr	r3, [r0, #8]
   1146c:	2101      	movs	r1, #1
   1146e:	68db      	ldr	r3, [r3, #12]
   11470:	4798      	blx	r3
}
   11472:	4620      	mov	r0, r4
   11474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011478 <nvs_flash_al_wrt.part.0>:
static int nvs_flash_al_wrt(struct nvs_fs *fs, u32_t addr, const void *data,
   11478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1147c:	4605      	mov	r5, r0
   1147e:	460c      	mov	r4, r1
	offset = fs->offset;
   11480:	f8d0 a000 	ldr.w	sl, [r0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   11484:	8987      	ldrh	r7, [r0, #12]
static int nvs_flash_al_wrt(struct nvs_fs *fs, u32_t addr, const void *data,
   11486:	b088      	sub	sp, #32
	rc = flash_write_protection_set(fs->flash_device, 0);
   11488:	2100      	movs	r1, #0
   1148a:	6a80      	ldr	r0, [r0, #40]	; 0x28
static int nvs_flash_al_wrt(struct nvs_fs *fs, u32_t addr, const void *data,
   1148c:	4690      	mov	r8, r2
   1148e:	461e      	mov	r6, r3
	rc = flash_write_protection_set(fs->flash_device, 0);
   11490:	f7ff ff44 	bl	1131c <flash_write_protection_set>
	if (rc) {
   11494:	bb78      	cbnz	r0, 114f6 <nvs_flash_al_wrt.part.0+0x7e>
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   11496:	ea4f 4914 	mov.w	r9, r4, lsr #16
	offset += addr & ADDR_OFFS_MASK;
   1149a:	fa1a f484 	uxtah	r4, sl, r4
   1149e:	fb07 4909 	mla	r9, r7, r9, r4
	blen = len & ~(fs->write_block_size - 1U);
   114a2:	7c2f      	ldrb	r7, [r5, #16]
   114a4:	427f      	negs	r7, r7
	if (blen > 0) {
   114a6:	4037      	ands	r7, r6
   114a8:	d00b      	beq.n	114c2 <nvs_flash_al_wrt.part.0+0x4a>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   114aa:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	return api->write(dev, offset, data, len);
   114ac:	6883      	ldr	r3, [r0, #8]
   114ae:	4642      	mov	r2, r8
   114b0:	685c      	ldr	r4, [r3, #4]
   114b2:	4649      	mov	r1, r9
   114b4:	463b      	mov	r3, r7
   114b6:	47a0      	blx	r4
		if (rc) {
   114b8:	4604      	mov	r4, r0
   114ba:	b9b8      	cbnz	r0, 114ec <nvs_flash_al_wrt.part.0+0x74>
		len -= blen;
   114bc:	1bf6      	subs	r6, r6, r7
		offset += blen;
   114be:	44b9      	add	r9, r7
		data8 += blen;
   114c0:	44b8      	add	r8, r7
	if (len) {
   114c2:	b1de      	cbz	r6, 114fc <nvs_flash_al_wrt.part.0+0x84>
		memcpy(buf, data8, len);
   114c4:	4632      	mov	r2, r6
   114c6:	4641      	mov	r1, r8
   114c8:	4668      	mov	r0, sp
   114ca:	f000 fe48 	bl	1215e <memcpy>
		(void)memset(buf + len, 0xff, fs->write_block_size - len);
   114ce:	7c2a      	ldrb	r2, [r5, #16]
   114d0:	21ff      	movs	r1, #255	; 0xff
   114d2:	1b92      	subs	r2, r2, r6
   114d4:	eb0d 0006 	add.w	r0, sp, r6
   114d8:	f000 fe6c 	bl	121b4 <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   114dc:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   114de:	7c2b      	ldrb	r3, [r5, #16]
   114e0:	6882      	ldr	r2, [r0, #8]
   114e2:	4649      	mov	r1, r9
   114e4:	6854      	ldr	r4, [r2, #4]
   114e6:	466a      	mov	r2, sp
   114e8:	47a0      	blx	r4
   114ea:	4604      	mov	r4, r0
	(void) flash_write_protection_set(fs->flash_device, 1);
   114ec:	2101      	movs	r1, #1
   114ee:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   114f0:	f7ff ff14 	bl	1131c <flash_write_protection_set>
	return rc;
   114f4:	4620      	mov	r0, r4
}
   114f6:	b008      	add	sp, #32
   114f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
end:
   114fc:	4634      	mov	r4, r6
   114fe:	e7f5      	b.n	114ec <nvs_flash_al_wrt.part.0+0x74>

00011500 <nvs_flash_ate_wrt>:
{
   11500:	b510      	push	{r4, lr}
   11502:	460a      	mov	r2, r1
	if (!len) {
   11504:	2308      	movs	r3, #8
   11506:	6841      	ldr	r1, [r0, #4]
{
   11508:	4604      	mov	r4, r0
   1150a:	f7ff ffb5 	bl	11478 <nvs_flash_al_wrt.part.0>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   1150e:	2108      	movs	r1, #8
   11510:	4602      	mov	r2, r0
   11512:	7c20      	ldrb	r0, [r4, #16]
   11514:	f7ff ff51 	bl	113ba <nvs_al_size.isra.0>
   11518:	6863      	ldr	r3, [r4, #4]
   1151a:	1a1b      	subs	r3, r3, r0
   1151c:	6063      	str	r3, [r4, #4]
}
   1151e:	4610      	mov	r0, r2
   11520:	bd10      	pop	{r4, pc}

00011522 <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   11522:	2300      	movs	r3, #0
   11524:	461a      	mov	r2, r3
   11526:	f7f0 b965 	b.w	17f4 <nvs_write>

0001152a <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, u16_t id, void *data, size_t len)
{
   1152a:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   1152c:	2400      	movs	r4, #0
   1152e:	9400      	str	r4, [sp, #0]
   11530:	f7f0 fa38 	bl	19a4 <nvs_read_hist>
	return rc;
}
   11534:	b002      	add	sp, #8
   11536:	bd10      	pop	{r4, pc}

00011538 <get_sectors_cb>:
{
   11538:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   1153a:	6802      	ldr	r2, [r0, #0]
   1153c:	684c      	ldr	r4, [r1, #4]
   1153e:	42a2      	cmp	r2, r4
   11540:	d316      	bcc.n	11570 <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   11542:	688b      	ldr	r3, [r1, #8]
   11544:	4423      	add	r3, r4
   11546:	429a      	cmp	r2, r3
   11548:	d206      	bcs.n	11558 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   1154a:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   1154e:	42ab      	cmp	r3, r5
   11550:	d304      	bcc.n	1155c <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   11552:	f06f 030b 	mvn.w	r3, #11
   11556:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   11558:	2000      	movs	r0, #0
   1155a:	e00a      	b.n	11572 <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   1155c:	68cd      	ldr	r5, [r1, #12]
   1155e:	1b12      	subs	r2, r2, r4
   11560:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   11564:	6842      	ldr	r2, [r0, #4]
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   11566:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
	data->ret_idx++;
   1156a:	3301      	adds	r3, #1
	ret[data->ret_idx].fs_size = info->size;
   1156c:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   1156e:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   11570:	2001      	movs	r0, #1
}
   11572:	bd70      	pop	{r4, r5, r6, pc}

00011574 <settings_load>:
	return settings_load_subtree(NULL);
   11574:	2000      	movs	r0, #0
   11576:	f7f0 bb01 	b.w	1b7c <settings_load_subtree>

0001157a <settings_delete>:
	return settings_save_one(name, NULL, 0);
   1157a:	2200      	movs	r2, #0
   1157c:	4611      	mov	r1, r2
   1157e:	f7f0 bac3 	b.w	1b08 <settings_save_one>

00011582 <settings_name_steq>:
{
   11582:	4603      	mov	r3, r0
   11584:	b530      	push	{r4, r5, lr}
   11586:	4608      	mov	r0, r1
	if (next) {
   11588:	b10a      	cbz	r2, 1158e <settings_name_steq+0xc>
		*next = NULL;
   1158a:	2100      	movs	r1, #0
   1158c:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   1158e:	b163      	cbz	r3, 115aa <settings_name_steq+0x28>
   11590:	b190      	cbz	r0, 115b8 <settings_name_steq+0x36>
   11592:	1e41      	subs	r1, r0, #1
   11594:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   11596:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   1159a:	4604      	mov	r4, r0
   1159c:	f810 3b01 	ldrb.w	r3, [r0], #1
   115a0:	b15d      	cbz	r5, 115ba <settings_name_steq+0x38>
   115a2:	429d      	cmp	r5, r3
   115a4:	d101      	bne.n	115aa <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   115a6:	2d3d      	cmp	r5, #61	; 0x3d
   115a8:	d1f5      	bne.n	11596 <settings_name_steq+0x14>
	return 0;
   115aa:	2000      	movs	r0, #0
   115ac:	e004      	b.n	115b8 <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   115ae:	2b3d      	cmp	r3, #61	; 0x3d
   115b0:	d008      	beq.n	115c4 <settings_name_steq+0x42>
   115b2:	fab3 f083 	clz	r0, r3
   115b6:	0940      	lsrs	r0, r0, #5
}
   115b8:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   115ba:	2b2f      	cmp	r3, #47	; 0x2f
   115bc:	d1f7      	bne.n	115ae <settings_name_steq+0x2c>
		if (next) {
   115be:	b10a      	cbz	r2, 115c4 <settings_name_steq+0x42>
			*next = name + 1;
   115c0:	3401      	adds	r4, #1
   115c2:	6014      	str	r4, [r2, #0]
		return 1;
   115c4:	2001      	movs	r0, #1
   115c6:	e7f7      	b.n	115b8 <settings_name_steq+0x36>

000115c8 <settings_name_next>:
{
   115c8:	4603      	mov	r3, r0
   115ca:	b530      	push	{r4, r5, lr}
	if (next) {
   115cc:	b109      	cbz	r1, 115d2 <settings_name_next+0xa>
		*next = NULL;
   115ce:	2200      	movs	r2, #0
   115d0:	600a      	str	r2, [r1, #0]
	if (!name) {
   115d2:	b16b      	cbz	r3, 115f0 <settings_name_next+0x28>
   115d4:	461a      	mov	r2, r3
   115d6:	4614      	mov	r4, r2
   115d8:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   115da:	f812 5b01 	ldrb.w	r5, [r2], #1
   115de:	b135      	cbz	r5, 115ee <settings_name_next+0x26>
   115e0:	2d3d      	cmp	r5, #61	; 0x3d
   115e2:	d004      	beq.n	115ee <settings_name_next+0x26>
   115e4:	2d2f      	cmp	r5, #47	; 0x2f
   115e6:	d1f6      	bne.n	115d6 <settings_name_next+0xe>
		if (next) {
   115e8:	b109      	cbz	r1, 115ee <settings_name_next+0x26>
			*next = name + 1;
   115ea:	3401      	adds	r4, #1
   115ec:	600c      	str	r4, [r1, #0]
}
   115ee:	bd30      	pop	{r4, r5, pc}
		return 0;
   115f0:	4618      	mov	r0, r3
   115f2:	e7fc      	b.n	115ee <settings_name_next+0x26>

000115f4 <settings_nvs_read_fn>:
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   115f4:	4613      	mov	r3, r2
{
   115f6:	b510      	push	{r4, lr}
   115f8:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   115fa:	460a      	mov	r2, r1
   115fc:	8881      	ldrh	r1, [r0, #4]
   115fe:	6800      	ldr	r0, [r0, #0]
   11600:	f7ff ff93 	bl	1152a <nvs_read>
}
   11604:	42a0      	cmp	r0, r4
   11606:	bfa8      	it	ge
   11608:	4620      	movge	r0, r4
   1160a:	bd10      	pop	{r4, pc}

0001160c <settings_nvs_save>:
{
   1160c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11610:	b097      	sub	sp, #92	; 0x5c
   11612:	4604      	mov	r4, r0
   11614:	469b      	mov	fp, r3
	if (!name) {
   11616:	4689      	mov	r9, r1
{
   11618:	9201      	str	r2, [sp, #4]
	if (!name) {
   1161a:	2900      	cmp	r1, #0
   1161c:	d066      	beq.n	116ec <settings_nvs_save+0xe0>
	delete = ((value == NULL) || (val_len == 0));
   1161e:	b1da      	cbz	r2, 11658 <settings_nvs_save+0x4c>
   11620:	fabb f78b 	clz	r7, fp
   11624:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   11626:	8ea5      	ldrh	r5, [r4, #52]	; 0x34
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   11628:	f104 0a08 	add.w	sl, r4, #8
	name_id = cf->last_name_id + 1;
   1162c:	3501      	adds	r5, #1
   1162e:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   11630:	46a8      	mov	r8, r5
		name_id--;
   11632:	1e6e      	subs	r6, r5, #1
   11634:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   11636:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1163a:	d02d      	beq.n	11698 <settings_nvs_save+0x8c>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   1163c:	234a      	movs	r3, #74	; 0x4a
   1163e:	4631      	mov	r1, r6
   11640:	4650      	mov	r0, sl
   11642:	aa03      	add	r2, sp, #12
   11644:	f7ff ff71 	bl	1152a <nvs_read>
		if (rc < 0) {
   11648:	2800      	cmp	r0, #0
   1164a:	da07      	bge.n	1165c <settings_nvs_save+0x50>
			if (rc == -ENOENT) {
   1164c:	f110 0f02 	cmn.w	r0, #2
   11650:	bf08      	it	eq
   11652:	46b0      	moveq	r8, r6
   11654:	4635      	mov	r5, r6
   11656:	e7ec      	b.n	11632 <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   11658:	2701      	movs	r7, #1
   1165a:	e7e4      	b.n	11626 <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   1165c:	ab16      	add	r3, sp, #88	; 0x58
   1165e:	4418      	add	r0, r3
   11660:	2300      	movs	r3, #0
		if (strcmp(name, rdname)) {
   11662:	a903      	add	r1, sp, #12
		rdname[rc] = '\0';
   11664:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   11668:	4648      	mov	r0, r9
   1166a:	f000 fd4d 	bl	12108 <strcmp>
   1166e:	2800      	cmp	r0, #0
   11670:	d1f0      	bne.n	11654 <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   11672:	b3cf      	cbz	r7, 116e8 <settings_nvs_save+0xdc>
   11674:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   11676:	42b3      	cmp	r3, r6
   11678:	d140      	bne.n	116fc <settings_nvs_save+0xf0>
			cf->last_name_id--;
   1167a:	4622      	mov	r2, r4
   1167c:	1e73      	subs	r3, r6, #1
   1167e:	f822 3f34 	strh.w	r3, [r2, #52]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   11682:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   11686:	2302      	movs	r3, #2
   11688:	4650      	mov	r0, sl
   1168a:	f7f0 f8b3 	bl	17f4 <nvs_write>
			if (rc < 0) {
   1168e:	2800      	cmp	r0, #0
   11690:	da34      	bge.n	116fc <settings_nvs_save+0xf0>
}
   11692:	b017      	add	sp, #92	; 0x5c
   11694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   11698:	bb5f      	cbnz	r7, 116f2 <settings_nvs_save+0xe6>
	write_name = true;
   1169a:	2701      	movs	r7, #1
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   1169c:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   116a0:	d029      	beq.n	116f6 <settings_nvs_save+0xea>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   116a2:	f104 0508 	add.w	r5, r4, #8
   116a6:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   116aa:	465b      	mov	r3, fp
   116ac:	4628      	mov	r0, r5
   116ae:	9a01      	ldr	r2, [sp, #4]
   116b0:	b289      	uxth	r1, r1
   116b2:	f7f0 f89f 	bl	17f4 <nvs_write>
	if (write_name) {
   116b6:	b157      	cbz	r7, 116ce <settings_nvs_save+0xc2>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   116b8:	4648      	mov	r0, r9
   116ba:	f000 fd1e 	bl	120fa <strlen>
   116be:	464a      	mov	r2, r9
   116c0:	4603      	mov	r3, r0
   116c2:	4641      	mov	r1, r8
   116c4:	4628      	mov	r0, r5
   116c6:	f7f0 f895 	bl	17f4 <nvs_write>
		if (rc < 0) {
   116ca:	2800      	cmp	r0, #0
   116cc:	dbe1      	blt.n	11692 <settings_nvs_save+0x86>
	if (write_name_id > cf->last_name_id) {
   116ce:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   116d0:	4543      	cmp	r3, r8
   116d2:	d220      	bcs.n	11716 <settings_nvs_save+0x10a>
		cf->last_name_id = write_name_id;
   116d4:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   116d6:	2302      	movs	r3, #2
   116d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   116dc:	4628      	mov	r0, r5
		cf->last_name_id = write_name_id;
   116de:	f822 8f34 	strh.w	r8, [r2, #52]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   116e2:	f7f0 f887 	bl	17f4 <nvs_write>
   116e6:	e016      	b.n	11716 <settings_nvs_save+0x10a>
   116e8:	46b0      	mov	r8, r6
   116ea:	e7d7      	b.n	1169c <settings_nvs_save+0x90>
		return -EINVAL;
   116ec:	f06f 0015 	mvn.w	r0, #21
   116f0:	e7cf      	b.n	11692 <settings_nvs_save+0x86>
		return 0;
   116f2:	2000      	movs	r0, #0
   116f4:	e7cd      	b.n	11692 <settings_nvs_save+0x86>
		return -ENOMEM;
   116f6:	f06f 000b 	mvn.w	r0, #11
   116fa:	e7ca      	b.n	11692 <settings_nvs_save+0x86>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   116fc:	4631      	mov	r1, r6
   116fe:	4650      	mov	r0, sl
   11700:	f7ff ff0f 	bl	11522 <nvs_delete>
			if (rc >= 0) {
   11704:	2800      	cmp	r0, #0
   11706:	dbc4      	blt.n	11692 <settings_nvs_save+0x86>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   11708:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   1170c:	313f      	adds	r1, #63	; 0x3f
   1170e:	4650      	mov	r0, sl
   11710:	b289      	uxth	r1, r1
   11712:	f7ff ff06 	bl	11522 <nvs_delete>
	if (rc < 0) {
   11716:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   1171a:	e7ba      	b.n	11692 <settings_nvs_save+0x86>

0001171c <settings_nvs_backend_init>:
{
   1171c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   1171e:	f100 0608 	add.w	r6, r0, #8
   11722:	6b81      	ldr	r1, [r0, #56]	; 0x38
{
   11724:	4604      	mov	r4, r0
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   11726:	4630      	mov	r0, r6
   11728:	f7ef ff42 	bl	15b0 <nvs_init>
	if (rc) {
   1172c:	4605      	mov	r5, r0
   1172e:	b970      	cbnz	r0, 1174e <settings_nvs_backend_init+0x32>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   11730:	2302      	movs	r3, #2
   11732:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   11736:	4630      	mov	r0, r6
   11738:	f10d 0206 	add.w	r2, sp, #6
   1173c:	f7ff fef5 	bl	1152a <nvs_read>
	if (rc < 0) {
   11740:	2800      	cmp	r0, #0
		cf->last_name_id = NVS_NAMECNT_ID;
   11742:	bfb4      	ite	lt
   11744:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
		cf->last_name_id = last_name_id;
   11748:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
   1174c:	86a3      	strh	r3, [r4, #52]	; 0x34
}
   1174e:	4628      	mov	r0, r5
   11750:	b002      	add	sp, #8
   11752:	bd70      	pop	{r4, r5, r6, pc}

00011754 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   11754:	2200      	movs	r2, #0
   11756:	f7f0 bc65 	b.w	2024 <clock_async_start>

0001175a <clk_init>:
{
   1175a:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1175c:	2200      	movs	r2, #0
{
   1175e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   11760:	2101      	movs	r1, #1
   11762:	2005      	movs	r0, #5
   11764:	f7f1 fb36 	bl	2dd4 <z_arm_irq_priority_set>
	irq_enable(DT_INST_IRQN(0));
   11768:	2005      	movs	r0, #5
   1176a:	f7f1 fb23 	bl	2db4 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
   1176e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   11772:	2202      	movs	r2, #2
   11774:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
   11778:	2203      	movs	r2, #3
	list->head = NULL;
   1177a:	2000      	movs	r0, #0
   1177c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		sys_slist_init(&(get_sub_data(dev, i)->list));
   11780:	68e3      	ldr	r3, [r4, #12]
	list->tail = NULL;
   11782:	e9c3 0000 	strd	r0, r0, [r3]
   11786:	68e3      	ldr	r3, [r4, #12]
   11788:	e9c3 0003 	strd	r0, r0, [r3, #12]
}
   1178c:	bd10      	pop	{r4, pc}

0001178e <bt_rpmsg_open>:
	return bt_rpmsg_platform_init();
   1178e:	f7f0 be75 	b.w	247c <bt_rpmsg_platform_init>

00011792 <virtio_get_status>:
}
   11792:	2004      	movs	r0, #4
   11794:	4770      	bx	lr

00011796 <virtio_get_features>:
}
   11796:	2001      	movs	r0, #1
   11798:	4770      	bx	lr

0001179a <virtio_set_features>:
}
   1179a:	4770      	bx	lr

0001179c <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   1179c:	f003 bac6 	b.w	14d2c <rpmsg_destroy_ept>

000117a0 <endpoint_cb>:
{
   117a0:	b508      	push	{r3, lr}
   117a2:	4608      	mov	r0, r1
	bt_rpmsg_rx(data, len);
   117a4:	4611      	mov	r1, r2
   117a6:	f7f0 fd89 	bl	22bc <bt_rpmsg_rx>
}
   117aa:	2000      	movs	r0, #0
   117ac:	bd08      	pop	{r3, pc}

000117ae <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   117ae:	4770      	bx	lr

000117b0 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   117b0:	b538      	push	{r3, r4, r5, lr}
   117b2:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   117b4:	42ab      	cmp	r3, r5
{
   117b6:	4611      	mov	r1, r2
   117b8:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   117ba:	d804      	bhi.n	117c6 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   117bc:	461a      	mov	r2, r3
   117be:	f000 fcce 	bl	1215e <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   117c2:	4620      	mov	r0, r4
   117c4:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   117c6:	2400      	movs	r4, #0
   117c8:	e7fb      	b.n	117c2 <_copy+0x12>

000117ca <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   117ca:	f000 bcf3 	b.w	121b4 <memset>

000117ce <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   117ce:	09c3      	lsrs	r3, r0, #7
   117d0:	005a      	lsls	r2, r3, #1
   117d2:	4413      	add	r3, r2
   117d4:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   117d8:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   117dc:	b2c0      	uxtb	r0, r0
   117de:	4770      	bx	lr

000117e0 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   117e0:	78cb      	ldrb	r3, [r1, #3]
   117e2:	7802      	ldrb	r2, [r0, #0]
   117e4:	4053      	eors	r3, r2
   117e6:	7003      	strb	r3, [r0, #0]
   117e8:	884b      	ldrh	r3, [r1, #2]
   117ea:	7842      	ldrb	r2, [r0, #1]
   117ec:	4053      	eors	r3, r2
   117ee:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   117f0:	680a      	ldr	r2, [r1, #0]
   117f2:	7883      	ldrb	r3, [r0, #2]
   117f4:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   117f8:	7083      	strb	r3, [r0, #2]
   117fa:	680a      	ldr	r2, [r1, #0]
   117fc:	78c3      	ldrb	r3, [r0, #3]
   117fe:	4053      	eors	r3, r2
   11800:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   11802:	79cb      	ldrb	r3, [r1, #7]
   11804:	7902      	ldrb	r2, [r0, #4]
   11806:	4053      	eors	r3, r2
   11808:	7103      	strb	r3, [r0, #4]
   1180a:	88cb      	ldrh	r3, [r1, #6]
   1180c:	7942      	ldrb	r2, [r0, #5]
   1180e:	4053      	eors	r3, r2
   11810:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   11812:	684a      	ldr	r2, [r1, #4]
   11814:	7983      	ldrb	r3, [r0, #6]
   11816:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1181a:	7183      	strb	r3, [r0, #6]
   1181c:	684a      	ldr	r2, [r1, #4]
   1181e:	79c3      	ldrb	r3, [r0, #7]
   11820:	4053      	eors	r3, r2
   11822:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   11824:	7acb      	ldrb	r3, [r1, #11]
   11826:	7a02      	ldrb	r2, [r0, #8]
   11828:	4053      	eors	r3, r2
   1182a:	7203      	strb	r3, [r0, #8]
   1182c:	7a42      	ldrb	r2, [r0, #9]
   1182e:	894b      	ldrh	r3, [r1, #10]
   11830:	4053      	eors	r3, r2
   11832:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   11834:	688a      	ldr	r2, [r1, #8]
   11836:	7a83      	ldrb	r3, [r0, #10]
   11838:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1183c:	7283      	strb	r3, [r0, #10]
   1183e:	688a      	ldr	r2, [r1, #8]
   11840:	7ac3      	ldrb	r3, [r0, #11]
   11842:	4053      	eors	r3, r2
   11844:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   11846:	7bcb      	ldrb	r3, [r1, #15]
   11848:	7b02      	ldrb	r2, [r0, #12]
   1184a:	4053      	eors	r3, r2
   1184c:	7303      	strb	r3, [r0, #12]
   1184e:	89cb      	ldrh	r3, [r1, #14]
   11850:	7b42      	ldrb	r2, [r0, #13]
   11852:	4053      	eors	r3, r2
   11854:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   11856:	68ca      	ldr	r2, [r1, #12]
   11858:	7b83      	ldrb	r3, [r0, #14]
   1185a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1185e:	7383      	strb	r3, [r0, #14]
   11860:	68ca      	ldr	r2, [r1, #12]
   11862:	7bc3      	ldrb	r3, [r0, #15]
   11864:	4053      	eors	r3, r2
   11866:	73c3      	strb	r3, [r0, #15]
}
   11868:	4770      	bx	lr

0001186a <shift_rows>:
{
   1186a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1186c:	7802      	ldrb	r2, [r0, #0]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1186e:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   11870:	f88d 2000 	strb.w	r2, [sp]
   11874:	7942      	ldrb	r2, [r0, #5]
   11876:	f88d 2001 	strb.w	r2, [sp, #1]
   1187a:	7a82      	ldrb	r2, [r0, #10]
   1187c:	f88d 2002 	strb.w	r2, [sp, #2]
   11880:	7bc2      	ldrb	r2, [r0, #15]
   11882:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   11886:	7902      	ldrb	r2, [r0, #4]
   11888:	f88d 2004 	strb.w	r2, [sp, #4]
   1188c:	7a42      	ldrb	r2, [r0, #9]
   1188e:	f88d 2005 	strb.w	r2, [sp, #5]
   11892:	7b82      	ldrb	r2, [r0, #14]
   11894:	f88d 2006 	strb.w	r2, [sp, #6]
   11898:	78c2      	ldrb	r2, [r0, #3]
   1189a:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1189e:	7a02      	ldrb	r2, [r0, #8]
   118a0:	f88d 2008 	strb.w	r2, [sp, #8]
   118a4:	7b42      	ldrb	r2, [r0, #13]
   118a6:	f88d 2009 	strb.w	r2, [sp, #9]
   118aa:	7882      	ldrb	r2, [r0, #2]
   118ac:	f88d 200a 	strb.w	r2, [sp, #10]
   118b0:	79c2      	ldrb	r2, [r0, #7]
   118b2:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   118b6:	7b02      	ldrb	r2, [r0, #12]
   118b8:	f88d 200c 	strb.w	r2, [sp, #12]
   118bc:	7842      	ldrb	r2, [r0, #1]
   118be:	f88d 200d 	strb.w	r2, [sp, #13]
   118c2:	7982      	ldrb	r2, [r0, #6]
   118c4:	f88d 200e 	strb.w	r2, [sp, #14]
   118c8:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   118cc:	2310      	movs	r3, #16
   118ce:	466a      	mov	r2, sp
   118d0:	4619      	mov	r1, r3
   118d2:	f7ff ff6d 	bl	117b0 <_copy>
}
   118d6:	b005      	add	sp, #20
   118d8:	f85d fb04 	ldr.w	pc, [sp], #4

000118dc <mult_row_column>:
{
   118dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   118de:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   118e0:	7808      	ldrb	r0, [r1, #0]
{
   118e2:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   118e4:	f7ff ff73 	bl	117ce <_double_byte>
   118e8:	4605      	mov	r5, r0
   118ea:	7860      	ldrb	r0, [r4, #1]
   118ec:	f7ff ff6f 	bl	117ce <_double_byte>
   118f0:	78a2      	ldrb	r2, [r4, #2]
   118f2:	7863      	ldrb	r3, [r4, #1]
   118f4:	4053      	eors	r3, r2
   118f6:	78e2      	ldrb	r2, [r4, #3]
   118f8:	4053      	eors	r3, r2
   118fa:	405d      	eors	r5, r3
   118fc:	4045      	eors	r5, r0
   118fe:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   11900:	7860      	ldrb	r0, [r4, #1]
   11902:	7827      	ldrb	r7, [r4, #0]
   11904:	f7ff ff63 	bl	117ce <_double_byte>
   11908:	4605      	mov	r5, r0
   1190a:	78a0      	ldrb	r0, [r4, #2]
   1190c:	f7ff ff5f 	bl	117ce <_double_byte>
   11910:	78a3      	ldrb	r3, [r4, #2]
   11912:	405f      	eors	r7, r3
   11914:	78e3      	ldrb	r3, [r4, #3]
   11916:	405f      	eors	r7, r3
   11918:	407d      	eors	r5, r7
   1191a:	4045      	eors	r5, r0
   1191c:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1191e:	78a0      	ldrb	r0, [r4, #2]
   11920:	7865      	ldrb	r5, [r4, #1]
   11922:	7827      	ldrb	r7, [r4, #0]
   11924:	f7ff ff53 	bl	117ce <_double_byte>
   11928:	406f      	eors	r7, r5
   1192a:	4605      	mov	r5, r0
   1192c:	78e0      	ldrb	r0, [r4, #3]
   1192e:	f7ff ff4e 	bl	117ce <_double_byte>
   11932:	78e3      	ldrb	r3, [r4, #3]
   11934:	405f      	eors	r7, r3
   11936:	407d      	eors	r5, r7
   11938:	4045      	eors	r5, r0
   1193a:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1193c:	7820      	ldrb	r0, [r4, #0]
   1193e:	f7ff ff46 	bl	117ce <_double_byte>
   11942:	7863      	ldrb	r3, [r4, #1]
   11944:	7825      	ldrb	r5, [r4, #0]
   11946:	405d      	eors	r5, r3
   11948:	78a3      	ldrb	r3, [r4, #2]
   1194a:	405d      	eors	r5, r3
   1194c:	4045      	eors	r5, r0
   1194e:	78e0      	ldrb	r0, [r4, #3]
   11950:	f7ff ff3d 	bl	117ce <_double_byte>
   11954:	b2ed      	uxtb	r5, r5
   11956:	4045      	eors	r5, r0
   11958:	70f5      	strb	r5, [r6, #3]
}
   1195a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001195c <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1195c:	460a      	mov	r2, r1
{
   1195e:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   11960:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   11964:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   11966:	2b00      	cmp	r3, #0
   11968:	bfb4      	ite	lt
   1196a:	2387      	movlt	r3, #135	; 0x87
   1196c:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1196e:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   11972:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   11976:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   11978:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1197c:	d002      	beq.n	11984 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1197e:	7813      	ldrb	r3, [r2, #0]
   11980:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   11982:	e7f4      	b.n	1196e <gf_double+0x12>
	}
}
   11984:	bd10      	pop	{r4, pc}

00011986 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   11986:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   11988:	b120      	cbz	r0, 11994 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1198a:	2258      	movs	r2, #88	; 0x58
   1198c:	2100      	movs	r1, #0
   1198e:	f7ff ff1c 	bl	117ca <_set>
   11992:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   11994:	bd08      	pop	{r3, pc}

00011996 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   11996:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   11998:	4604      	mov	r4, r0
   1199a:	b188      	cbz	r0, 119c0 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1199c:	2210      	movs	r2, #16
   1199e:	2100      	movs	r1, #0
   119a0:	f7ff ff13 	bl	117ca <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   119a4:	2210      	movs	r2, #16
   119a6:	f104 0030 	add.w	r0, r4, #48	; 0x30
   119aa:	2100      	movs	r1, #0
   119ac:	f7ff ff0d 	bl	117ca <_set>
	s->leftover_offset = 0;
   119b0:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   119b2:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   119b4:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   119b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   119ba:	2001      	movs	r0, #1
   119bc:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   119c0:	bd10      	pop	{r4, pc}

000119c2 <tc_cmac_setup>:
{
   119c2:	b570      	push	{r4, r5, r6, lr}
   119c4:	460d      	mov	r5, r1
   119c6:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   119c8:	4604      	mov	r4, r0
   119ca:	b310      	cbz	r0, 11a12 <tc_cmac_setup+0x50>
   119cc:	b311      	cbz	r1, 11a14 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   119ce:	2258      	movs	r2, #88	; 0x58
   119d0:	2100      	movs	r1, #0
   119d2:	f7ff fefa 	bl	117ca <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   119d6:	4629      	mov	r1, r5
   119d8:	4630      	mov	r0, r6
	s->sched = sched;
   119da:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   119dc:	f7f0 ffc4 	bl	2968 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   119e0:	2210      	movs	r2, #16
   119e2:	2100      	movs	r1, #0
   119e4:	4620      	mov	r0, r4
   119e6:	f7ff fef0 	bl	117ca <_set>
	gf_double (s->K1, s->iv);
   119ea:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   119ee:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   119f0:	4621      	mov	r1, r4
   119f2:	4620      	mov	r0, r4
   119f4:	f7f1 f80c 	bl	2a10 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   119f8:	4621      	mov	r1, r4
   119fa:	4628      	mov	r0, r5
   119fc:	f7ff ffae 	bl	1195c <gf_double>
	gf_double (s->K2, s->K1);
   11a00:	4629      	mov	r1, r5
   11a02:	f104 0020 	add.w	r0, r4, #32
   11a06:	f7ff ffa9 	bl	1195c <gf_double>
	tc_cmac_init(s);
   11a0a:	4620      	mov	r0, r4
   11a0c:	f7ff ffc3 	bl	11996 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   11a10:	2001      	movs	r0, #1
}
   11a12:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   11a14:	4608      	mov	r0, r1
   11a16:	e7fc      	b.n	11a12 <tc_cmac_setup+0x50>

00011a18 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   11a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11a1c:	460d      	mov	r5, r1
   11a1e:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   11a20:	4604      	mov	r4, r0
   11a22:	2800      	cmp	r0, #0
   11a24:	d062      	beq.n	11aec <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   11a26:	b912      	cbnz	r2, 11a2e <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   11a28:	2001      	movs	r0, #1
}
   11a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   11a2e:	2900      	cmp	r1, #0
   11a30:	d05c      	beq.n	11aec <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   11a32:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   11a36:	ea50 0301 	orrs.w	r3, r0, r1
   11a3a:	d057      	beq.n	11aec <tc_cmac_update+0xd4>
	s->countdown--;
   11a3c:	f110 32ff 	adds.w	r2, r0, #4294967295
	if (s->leftover_offset > 0) {
   11a40:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   11a44:	f141 33ff 	adc.w	r3, r1, #4294967295
   11a48:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   11a4c:	f1b8 0f00 	cmp.w	r8, #0
   11a50:	d02a      	beq.n	11aa8 <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   11a52:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   11a56:	f108 0030 	add.w	r0, r8, #48	; 0x30
   11a5a:	42be      	cmp	r6, r7
   11a5c:	4420      	add	r0, r4
   11a5e:	d208      	bcs.n	11a72 <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   11a60:	462a      	mov	r2, r5
   11a62:	4633      	mov	r3, r6
   11a64:	4631      	mov	r1, r6
   11a66:	f7ff fea3 	bl	117b0 <_copy>
			s->leftover_offset += data_length;
   11a6a:	6c62      	ldr	r2, [r4, #68]	; 0x44
   11a6c:	4432      	add	r2, r6
   11a6e:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   11a70:	e7da      	b.n	11a28 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   11a72:	463b      	mov	r3, r7
   11a74:	462a      	mov	r2, r5
   11a76:	4639      	mov	r1, r7
   11a78:	f7ff fe9a 	bl	117b0 <_copy>
		s->leftover_offset = 0;
   11a7c:	2300      	movs	r3, #0
   11a7e:	3e10      	subs	r6, #16
   11a80:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   11a82:	4446      	add	r6, r8
		data += remaining_space;
   11a84:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   11a86:	1e63      	subs	r3, r4, #1
   11a88:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   11a8c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   11a90:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   11a94:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   11a96:	ea82 0200 	eor.w	r2, r2, r0
   11a9a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   11a9c:	d1f6      	bne.n	11a8c <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   11a9e:	4621      	mov	r1, r4
   11aa0:	4620      	mov	r0, r4
   11aa2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   11aa4:	f7f0 ffb4 	bl	2a10 <tc_aes_encrypt>
   11aa8:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   11aac:	2e10      	cmp	r6, #16
   11aae:	d80a      	bhi.n	11ac6 <tc_cmac_update+0xae>
	if (data_length > 0) {
   11ab0:	2e00      	cmp	r6, #0
   11ab2:	d0b9      	beq.n	11a28 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   11ab4:	4633      	mov	r3, r6
   11ab6:	462a      	mov	r2, r5
   11ab8:	4631      	mov	r1, r6
   11aba:	f104 0030 	add.w	r0, r4, #48	; 0x30
   11abe:	f7ff fe77 	bl	117b0 <_copy>
		s->leftover_offset = data_length;
   11ac2:	6466      	str	r6, [r4, #68]	; 0x44
   11ac4:	e7b0      	b.n	11a28 <tc_cmac_update+0x10>
   11ac6:	1e63      	subs	r3, r4, #1
   11ac8:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   11aca:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   11ace:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   11ad2:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   11ad4:	ea82 0200 	eor.w	r2, r2, r0
   11ad8:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   11ada:	d1f6      	bne.n	11aca <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   11adc:	4621      	mov	r1, r4
   11ade:	4620      	mov	r0, r4
   11ae0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   11ae2:	f7f0 ff95 	bl	2a10 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   11ae6:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   11ae8:	3e10      	subs	r6, #16
   11aea:	e7df      	b.n	11aac <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   11aec:	2000      	movs	r0, #0
   11aee:	e79c      	b.n	11a2a <tc_cmac_update+0x12>

00011af0 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   11af0:	b570      	push	{r4, r5, r6, lr}
   11af2:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   11af4:	4605      	mov	r5, r0
   11af6:	b1f0      	cbz	r0, 11b36 <tc_cmac_final+0x46>
   11af8:	b371      	cbz	r1, 11b58 <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   11afa:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   11afc:	2a10      	cmp	r2, #16
   11afe:	d11b      	bne.n	11b38 <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   11b00:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   11b02:	1e63      	subs	r3, r4, #1
   11b04:	3901      	subs	r1, #1
   11b06:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   11b0a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   11b0e:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   11b12:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   11b14:	ea82 0206 	eor.w	r2, r2, r6
   11b18:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   11b1c:	ea82 0206 	eor.w	r2, r2, r6
   11b20:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   11b22:	d1f2      	bne.n	11b0a <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   11b24:	4621      	mov	r1, r4
   11b26:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   11b28:	4628      	mov	r0, r5
   11b2a:	f7f0 ff71 	bl	2a10 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   11b2e:	4620      	mov	r0, r4
   11b30:	f7ff ff29 	bl	11986 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   11b34:	2001      	movs	r0, #1
}
   11b36:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   11b38:	f102 0030 	add.w	r0, r2, #48	; 0x30
   11b3c:	2100      	movs	r1, #0
   11b3e:	f1c2 0210 	rsb	r2, r2, #16
   11b42:	4420      	add	r0, r4
   11b44:	f7ff fe41 	bl	117ca <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   11b48:	2280      	movs	r2, #128	; 0x80
   11b4a:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   11b4c:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   11b50:	4423      	add	r3, r4
   11b52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   11b56:	e7d4      	b.n	11b02 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   11b58:	4608      	mov	r0, r1
   11b5a:	e7ec      	b.n	11b36 <tc_cmac_final+0x46>

00011b5c <tc_sha256_update>:
{
   11b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11b5e:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   11b60:	b110      	cbz	r0, 11b68 <tc_sha256_update+0xc>
   11b62:	b1f9      	cbz	r1, 11ba4 <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   11b64:	b90a      	cbnz	r2, 11b6a <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   11b66:	2001      	movs	r0, #1
}
   11b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   11b6a:	2600      	movs	r6, #0
   11b6c:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   11b6e:	f100 0728 	add.w	r7, r0, #40	; 0x28
	while (datalen-- > 0) {
   11b72:	42a5      	cmp	r5, r4
   11b74:	d0f7      	beq.n	11b66 <tc_sha256_update+0xa>
		s->leftover[s->leftover_offset++] = *(data++);
   11b76:	6e83      	ldr	r3, [r0, #104]	; 0x68
   11b78:	1c5a      	adds	r2, r3, #1
   11b7a:	6682      	str	r2, [r0, #104]	; 0x68
   11b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
   11b80:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   11b82:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   11b84:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   11b88:	d9f3      	bls.n	11b72 <tc_sha256_update+0x16>
			compress(s->iv, s->leftover);
   11b8a:	4639      	mov	r1, r7
   11b8c:	f7f0 ffaa 	bl	2ae4 <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   11b90:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   11b94:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   11b98:	f142 0200 	adc.w	r2, r2, #0
   11b9c:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   11ba0:	6686      	str	r6, [r0, #104]	; 0x68
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   11ba2:	e7e6      	b.n	11b72 <tc_sha256_update+0x16>
		return TC_CRYPTO_FAIL;
   11ba4:	4608      	mov	r0, r1
   11ba6:	e7df      	b.n	11b68 <tc_sha256_update+0xc>

00011ba8 <tc_sha256_final>:
{
   11ba8:	b570      	push	{r4, r5, r6, lr}
   11baa:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   11bac:	4605      	mov	r5, r0
   11bae:	2800      	cmp	r0, #0
   11bb0:	d054      	beq.n	11c5c <tc_sha256_final+0xb4>
   11bb2:	2900      	cmp	r1, #0
   11bb4:	d053      	beq.n	11c5e <tc_sha256_final+0xb6>
	s->bits_hashed += (s->leftover_offset << 3);
   11bb6:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
   11bba:	6e89      	ldr	r1, [r1, #104]	; 0x68
   11bbc:	f104 0628 	add.w	r6, r4, #40	; 0x28
   11bc0:	00c8      	lsls	r0, r1, #3
   11bc2:	1812      	adds	r2, r2, r0
   11bc4:	f143 0300 	adc.w	r3, r3, #0
   11bc8:	e9c4 2308 	strd	r2, r3, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   11bcc:	2380      	movs	r3, #128	; 0x80
   11bce:	1c48      	adds	r0, r1, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   11bd0:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   11bd2:	4421      	add	r1, r4
   11bd4:	66a0      	str	r0, [r4, #104]	; 0x68
   11bd6:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   11bda:	d90b      	bls.n	11bf4 <tc_sha256_final+0x4c>
		_set(s->leftover + s->leftover_offset, 0x00,
   11bdc:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   11be0:	2100      	movs	r1, #0
   11be2:	4430      	add	r0, r6
   11be4:	f7ff fdf1 	bl	117ca <_set>
		compress(s->iv, s->leftover);
   11be8:	4631      	mov	r1, r6
   11bea:	4620      	mov	r0, r4
   11bec:	f7f0 ff7a 	bl	2ae4 <compress>
		s->leftover_offset = 0;
   11bf0:	2300      	movs	r3, #0
   11bf2:	66a3      	str	r3, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   11bf4:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   11bf6:	2100      	movs	r1, #0
   11bf8:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   11bfc:	4430      	add	r0, r6
   11bfe:	f7ff fde4 	bl	117ca <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   11c02:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   11c04:	4631      	mov	r1, r6
   11c06:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   11c08:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   11c0a:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   11c0c:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   11c0e:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   11c12:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   11c16:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   11c18:	0e1b      	lsrs	r3, r3, #24
	compress(s->iv, s->leftover);
   11c1a:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   11c1c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   11c20:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   11c24:	f7f0 ff5e 	bl	2ae4 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   11c28:	1f26      	subs	r6, r4, #4
   11c2a:	1d2b      	adds	r3, r5, #4
   11c2c:	f105 0024 	add.w	r0, r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   11c30:	f856 2f04 	ldr.w	r2, [r6, #4]!
		*digest++ = (uint8_t)(t >> 24);
   11c34:	3304      	adds	r3, #4
   11c36:	0e11      	lsrs	r1, r2, #24
   11c38:	f803 1c08 	strb.w	r1, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   11c3c:	0c11      	lsrs	r1, r2, #16
   11c3e:	f803 1c07 	strb.w	r1, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   11c42:	0a11      	lsrs	r1, r2, #8
   11c44:	f803 1c06 	strb.w	r1, [r3, #-6]
		*digest++ = (uint8_t)(t);
   11c48:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   11c4c:	4283      	cmp	r3, r0
   11c4e:	d1ef      	bne.n	11c30 <tc_sha256_final+0x88>
	_set(s, 0, sizeof(*s));
   11c50:	4620      	mov	r0, r4
   11c52:	2270      	movs	r2, #112	; 0x70
   11c54:	2100      	movs	r1, #0
   11c56:	f7ff fdb8 	bl	117ca <_set>
	return TC_CRYPTO_SUCCESS;
   11c5a:	2001      	movs	r0, #1
}
   11c5c:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   11c5e:	4608      	mov	r0, r1
   11c60:	e7fc      	b.n	11c5c <tc_sha256_final+0xb4>

00011c62 <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   11c62:	b530      	push	{r4, r5, lr}
   11c64:	1e43      	subs	r3, r0, #1
   11c66:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   11c68:	42a9      	cmp	r1, r5
   11c6a:	d106      	bne.n	11c7a <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   11c6c:	2136      	movs	r1, #54	; 0x36
   11c6e:	245c      	movs	r4, #92	; 0x5c
   11c70:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   11c72:	1a13      	subs	r3, r2, r0
   11c74:	2b3f      	cmp	r3, #63	; 0x3f
   11c76:	d90c      	bls.n	11c92 <rekey+0x30>
	}
}
   11c78:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   11c7a:	780c      	ldrb	r4, [r1, #0]
   11c7c:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   11c80:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   11c84:	f811 4b01 	ldrb.w	r4, [r1], #1
   11c88:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   11c8c:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   11c90:	e7ea      	b.n	11c68 <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   11c92:	f802 1b01 	strb.w	r1, [r2], #1
   11c96:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   11c9a:	e7ea      	b.n	11c72 <rekey+0x10>

00011c9c <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   11c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   11c9e:	460e      	mov	r6, r1
   11ca0:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   11ca2:	4605      	mov	r5, r0
{
   11ca4:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   11ca6:	b1b8      	cbz	r0, 11cd8 <tc_hmac_set_key+0x3c>
   11ca8:	b341      	cbz	r1, 11cfc <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   11caa:	b34a      	cbz	r2, 11d00 <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   11cac:	2a40      	cmp	r2, #64	; 0x40
   11cae:	f100 0770 	add.w	r7, r0, #112	; 0x70
   11cb2:	d813      	bhi.n	11cdc <tc_hmac_set_key+0x40>
		 * certain timing attacks. Without these dummy calls,
		 * adversaries would be able to learn whether the key_size is
		 * greater than TC_SHA256_BLOCK_SIZE by measuring the time
		 * consumed in this process.
		 */
		(void)tc_sha256_init(&dummy_state.hash_state);
   11cb4:	a810      	add	r0, sp, #64	; 0x40
   11cb6:	f7f0 fffb 	bl	2cb0 <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   11cba:	4622      	mov	r2, r4
   11cbc:	4669      	mov	r1, sp
   11cbe:	a810      	add	r0, sp, #64	; 0x40
   11cc0:	f7ff ff4c 	bl	11b5c <tc_sha256_update>
				       dummy_key,
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   11cc4:	a910      	add	r1, sp, #64	; 0x40
   11cc6:	a834      	add	r0, sp, #208	; 0xd0
   11cc8:	f7ff ff6e 	bl	11ba8 <tc_sha256_final>
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   11ccc:	4622      	mov	r2, r4
   11cce:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   11cd0:	4638      	mov	r0, r7
   11cd2:	f7ff ffc6 	bl	11c62 <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   11cd6:	2001      	movs	r0, #1
}
   11cd8:	b04d      	add	sp, #308	; 0x134
   11cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   11cdc:	f7f0 ffe8 	bl	2cb0 <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   11ce0:	4622      	mov	r2, r4
   11ce2:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   11ce4:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   11ce8:	4628      	mov	r0, r5
   11cea:	f7ff ff37 	bl	11b5c <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   11cee:	4629      	mov	r1, r5
   11cf0:	4620      	mov	r0, r4
   11cf2:	f7ff ff59 	bl	11ba8 <tc_sha256_final>
		rekey(ctx->key,
   11cf6:	2220      	movs	r2, #32
   11cf8:	4621      	mov	r1, r4
   11cfa:	e7e9      	b.n	11cd0 <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   11cfc:	4608      	mov	r0, r1
   11cfe:	e7eb      	b.n	11cd8 <tc_hmac_set_key+0x3c>
   11d00:	4610      	mov	r0, r2
   11d02:	e7e9      	b.n	11cd8 <tc_hmac_set_key+0x3c>

00011d04 <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   11d04:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   11d06:	4604      	mov	r4, r0
   11d08:	b140      	cbz	r0, 11d1c <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   11d0a:	f7f0 ffd1 	bl	2cb0 <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   11d0e:	2240      	movs	r2, #64	; 0x40
   11d10:	4620      	mov	r0, r4
   11d12:	f104 0170 	add.w	r1, r4, #112	; 0x70
   11d16:	f7ff ff21 	bl	11b5c <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   11d1a:	2001      	movs	r0, #1
}
   11d1c:	bd10      	pop	{r4, pc}

00011d1e <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   11d1e:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   11d20:	b110      	cbz	r0, 11d28 <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   11d22:	f7ff ff1b 	bl	11b5c <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   11d26:	2001      	movs	r0, #1
}
   11d28:	bd08      	pop	{r3, pc}

00011d2a <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   11d2a:	b570      	push	{r4, r5, r6, lr}
   11d2c:	460e      	mov	r6, r1
   11d2e:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   11d30:	4605      	mov	r5, r0
   11d32:	b1f0      	cbz	r0, 11d72 <tc_hmac_final+0x48>
   11d34:	2920      	cmp	r1, #32
   11d36:	d11c      	bne.n	11d72 <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   11d38:	b1ea      	cbz	r2, 11d76 <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   11d3a:	4611      	mov	r1, r2
   11d3c:	f7ff ff34 	bl	11ba8 <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   11d40:	4620      	mov	r0, r4
   11d42:	f7f0 ffb5 	bl	2cb0 <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   11d46:	2240      	movs	r2, #64	; 0x40
   11d48:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   11d4c:	4620      	mov	r0, r4
   11d4e:	f7ff ff05 	bl	11b5c <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   11d52:	4632      	mov	r2, r6
   11d54:	4629      	mov	r1, r5
   11d56:	4620      	mov	r0, r4
   11d58:	f7ff ff00 	bl	11b5c <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   11d5c:	4621      	mov	r1, r4
   11d5e:	4628      	mov	r0, r5
   11d60:	f7ff ff22 	bl	11ba8 <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   11d64:	4620      	mov	r0, r4
   11d66:	22f0      	movs	r2, #240	; 0xf0
   11d68:	2100      	movs	r1, #0
   11d6a:	f7ff fd2e 	bl	117ca <_set>

	return TC_CRYPTO_SUCCESS;
   11d6e:	2001      	movs	r0, #1
}
   11d70:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   11d72:	2000      	movs	r0, #0
   11d74:	e7fc      	b.n	11d70 <tc_hmac_final+0x46>
   11d76:	4610      	mov	r0, r2
   11d78:	e7fa      	b.n	11d70 <tc_hmac_final+0x46>

00011d7a <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   11d7a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d7e:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   11d80:	f04f 0b01 	mov.w	fp, #1
{
   11d84:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   11d86:	2300      	movs	r3, #0
{
   11d88:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   11d8a:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   11d8e:	4631      	mov	r1, r6
{
   11d90:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   11d92:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   11d94:	f88d 3006 	strb.w	r3, [sp, #6]
{
   11d98:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   11d9c:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   11da0:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   11da4:	f7ff ff7a 	bl	11c9c <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   11da8:	4620      	mov	r0, r4
   11daa:	f7ff ffab 	bl	11d04 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   11dae:	2220      	movs	r2, #32
   11db0:	4629      	mov	r1, r5
   11db2:	4620      	mov	r0, r4
   11db4:	f7ff ffb3 	bl	11d1e <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   11db8:	465a      	mov	r2, fp
   11dba:	4620      	mov	r0, r4
   11dbc:	f10d 0106 	add.w	r1, sp, #6
   11dc0:	f7ff ffad 	bl	11d1e <tc_hmac_update>

	if (data && datalen)
   11dc4:	f1b8 0f00 	cmp.w	r8, #0
   11dc8:	d007      	beq.n	11dda <update+0x60>
   11dca:	f1b9 0f00 	cmp.w	r9, #0
   11dce:	d004      	beq.n	11dda <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   11dd0:	464a      	mov	r2, r9
   11dd2:	4641      	mov	r1, r8
   11dd4:	4620      	mov	r0, r4
   11dd6:	f7ff ffa2 	bl	11d1e <tc_hmac_update>
	if (additional_data && additional_datalen)
   11dda:	b13f      	cbz	r7, 11dec <update+0x72>
   11ddc:	f1ba 0f00 	cmp.w	sl, #0
   11de0:	d004      	beq.n	11dec <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   11de2:	4652      	mov	r2, sl
   11de4:	4639      	mov	r1, r7
   11de6:	4620      	mov	r0, r4
   11de8:	f7ff ff99 	bl	11d1e <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   11dec:	4622      	mov	r2, r4
   11dee:	2120      	movs	r1, #32
   11df0:	4630      	mov	r0, r6
   11df2:	f7ff ff9a 	bl	11d2a <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   11df6:	2220      	movs	r2, #32
   11df8:	4631      	mov	r1, r6
   11dfa:	4620      	mov	r0, r4
   11dfc:	f7ff ff4e 	bl	11c9c <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   11e00:	4620      	mov	r0, r4
   11e02:	f7ff ff7f 	bl	11d04 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   11e06:	2220      	movs	r2, #32
   11e08:	4629      	mov	r1, r5
   11e0a:	4620      	mov	r0, r4
   11e0c:	f7ff ff87 	bl	11d1e <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   11e10:	4622      	mov	r2, r4
   11e12:	2120      	movs	r1, #32
   11e14:	4628      	mov	r0, r5
   11e16:	f7ff ff88 	bl	11d2a <tc_hmac_final>

	if (data == 0 || datalen == 0)
   11e1a:	f1b8 0f00 	cmp.w	r8, #0
   11e1e:	d03a      	beq.n	11e96 <update+0x11c>
   11e20:	f1b9 0f00 	cmp.w	r9, #0
   11e24:	d037      	beq.n	11e96 <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   11e26:	2220      	movs	r2, #32
   11e28:	4631      	mov	r1, r6
   11e2a:	4620      	mov	r0, r4
   11e2c:	f7ff ff36 	bl	11c9c <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   11e30:	4620      	mov	r0, r4
   11e32:	f7ff ff67 	bl	11d04 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   11e36:	2220      	movs	r2, #32
   11e38:	4629      	mov	r1, r5
   11e3a:	4620      	mov	r0, r4
   11e3c:	f7ff ff6f 	bl	11d1e <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   11e40:	2201      	movs	r2, #1
   11e42:	f10d 0107 	add.w	r1, sp, #7
   11e46:	4620      	mov	r0, r4
   11e48:	f7ff ff69 	bl	11d1e <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   11e4c:	464a      	mov	r2, r9
   11e4e:	4641      	mov	r1, r8
   11e50:	4620      	mov	r0, r4
   11e52:	f7ff ff64 	bl	11d1e <tc_hmac_update>
	if (additional_data && additional_datalen)
   11e56:	b13f      	cbz	r7, 11e68 <update+0xee>
   11e58:	f1ba 0f00 	cmp.w	sl, #0
   11e5c:	d004      	beq.n	11e68 <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   11e5e:	4652      	mov	r2, sl
   11e60:	4639      	mov	r1, r7
   11e62:	4620      	mov	r0, r4
   11e64:	f7ff ff5b 	bl	11d1e <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   11e68:	4622      	mov	r2, r4
   11e6a:	2120      	movs	r1, #32
   11e6c:	4630      	mov	r0, r6
   11e6e:	f7ff ff5c 	bl	11d2a <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   11e72:	2220      	movs	r2, #32
   11e74:	4631      	mov	r1, r6
   11e76:	4620      	mov	r0, r4
   11e78:	f7ff ff10 	bl	11c9c <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   11e7c:	4620      	mov	r0, r4
   11e7e:	f7ff ff41 	bl	11d04 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   11e82:	2220      	movs	r2, #32
   11e84:	4629      	mov	r1, r5
   11e86:	4620      	mov	r0, r4
   11e88:	f7ff ff49 	bl	11d1e <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   11e8c:	4622      	mov	r2, r4
   11e8e:	2120      	movs	r1, #32
   11e90:	4628      	mov	r0, r5
   11e92:	f7ff ff4a 	bl	11d2a <tc_hmac_final>
}
   11e96:	b003      	add	sp, #12
   11e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00011e9c <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   11e9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11e9e:	460c      	mov	r4, r1
   11ea0:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   11ea2:	4605      	mov	r5, r0
   11ea4:	b1b0      	cbz	r0, 11ed4 <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   11ea6:	b1b9      	cbz	r1, 11ed8 <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   11ea8:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   11eaa:	2220      	movs	r2, #32
   11eac:	2100      	movs	r1, #0
   11eae:	30f0      	adds	r0, #240	; 0xf0
   11eb0:	f7ff fc8b 	bl	117ca <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   11eb4:	2220      	movs	r2, #32
   11eb6:	2101      	movs	r1, #1
   11eb8:	f505 7088 	add.w	r0, r5, #272	; 0x110
   11ebc:	f7ff fc85 	bl	117ca <_set>
	update(prng, personalization, plen, 0, 0);
   11ec0:	4628      	mov	r0, r5
   11ec2:	4633      	mov	r3, r6
   11ec4:	463a      	mov	r2, r7
   11ec6:	4621      	mov	r1, r4
   11ec8:	9600      	str	r6, [sp, #0]
   11eca:	f7ff ff56 	bl	11d7a <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   11ece:	2001      	movs	r0, #1
	prng->countdown = 0;
   11ed0:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   11ed4:	b003      	add	sp, #12
   11ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   11ed8:	4608      	mov	r0, r1
   11eda:	e7fb      	b.n	11ed4 <tc_hmac_prng_init+0x38>

00011edc <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   11edc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11ede:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   11ee0:	4605      	mov	r5, r0
   11ee2:	b180      	cbz	r0, 11f06 <tc_hmac_prng_reseed+0x2a>
   11ee4:	b179      	cbz	r1, 11f06 <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   11ee6:	2a1f      	cmp	r2, #31
   11ee8:	d90d      	bls.n	11f06 <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   11eea:	b153      	cbz	r3, 11f02 <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   11eec:	b16c      	cbz	r4, 11f0a <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   11eee:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   11ef0:	f7ff ff43 	bl	11d7a <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   11ef4:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   11ef8:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   11efa:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   11efe:	b003      	add	sp, #12
   11f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   11f02:	9300      	str	r3, [sp, #0]
   11f04:	e7f4      	b.n	11ef0 <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   11f06:	2000      	movs	r0, #0
   11f08:	e7f9      	b.n	11efe <tc_hmac_prng_reseed+0x22>
   11f0a:	4620      	mov	r0, r4
   11f0c:	e7f7      	b.n	11efe <tc_hmac_prng_reseed+0x22>

00011f0e <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   11f0e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   11f12:	460d      	mov	r5, r1
   11f14:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   11f16:	4680      	mov	r8, r0
   11f18:	b3d8      	cbz	r0, 11f92 <tc_hmac_prng_generate+0x84>
   11f1a:	b3d2      	cbz	r2, 11f92 <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   11f1c:	1e4b      	subs	r3, r1, #1
   11f1e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   11f22:	d236      	bcs.n	11f92 <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   11f24:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   11f28:	b3ab      	cbz	r3, 11f96 <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   11f2a:	3b01      	subs	r3, #1
   11f2c:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   11f30:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   11f34:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   11f38:	2220      	movs	r2, #32
   11f3a:	4649      	mov	r1, r9
   11f3c:	4620      	mov	r0, r4
   11f3e:	f7ff fead 	bl	11c9c <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   11f42:	4620      	mov	r0, r4
   11f44:	f7ff fede 	bl	11d04 <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   11f48:	2220      	movs	r2, #32
   11f4a:	4639      	mov	r1, r7
   11f4c:	4620      	mov	r0, r4
   11f4e:	f7ff fee6 	bl	11d1e <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   11f52:	4622      	mov	r2, r4
   11f54:	2120      	movs	r1, #32
   11f56:	4638      	mov	r0, r7
   11f58:	f7ff fee7 	bl	11d2a <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   11f5c:	2d20      	cmp	r5, #32
   11f5e:	462e      	mov	r6, r5
   11f60:	bf28      	it	cs
   11f62:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   11f64:	4640      	mov	r0, r8
   11f66:	4633      	mov	r3, r6
   11f68:	463a      	mov	r2, r7
   11f6a:	4631      	mov	r1, r6
   11f6c:	f7ff fc20 	bl	117b0 <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   11f70:	2d20      	cmp	r5, #32
   11f72:	bf38      	it	cc
   11f74:	2520      	movcc	r5, #32
	while (outlen != 0) {
   11f76:	3d20      	subs	r5, #32
		out += bufferlen;
   11f78:	44b0      	add	r8, r6
	while (outlen != 0) {
   11f7a:	d1dd      	bne.n	11f38 <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   11f7c:	4620      	mov	r0, r4
   11f7e:	462b      	mov	r3, r5
   11f80:	462a      	mov	r2, r5
   11f82:	4629      	mov	r1, r5
   11f84:	9500      	str	r5, [sp, #0]
   11f86:	f7ff fef8 	bl	11d7a <update>

	return TC_CRYPTO_SUCCESS;
   11f8a:	2001      	movs	r0, #1
}
   11f8c:	b003      	add	sp, #12
   11f8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   11f92:	2000      	movs	r0, #0
   11f94:	e7fa      	b.n	11f8c <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   11f96:	f04f 30ff 	mov.w	r0, #4294967295
   11f9a:	e7f7      	b.n	11f8c <tc_hmac_prng_generate+0x7e>

00011f9c <z_irq_spurious>:
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   11f9c:	2100      	movs	r1, #0
   11f9e:	2001      	movs	r0, #1
   11fa0:	f7f0 bf96 	b.w	2ed0 <z_arm_fatal_error>

00011fa4 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   11fa4:	6e03      	ldr	r3, [r0, #96]	; 0x60
   11fa6:	f383 880b 	msr	PSPLIM, r3
}
   11faa:	4770      	bx	lr

00011fac <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   11fac:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   11fae:	6800      	ldr	r0, [r0, #0]
   11fb0:	f7f0 bf8e 	b.w	2ed0 <z_arm_fatal_error>

00011fb4 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   11fb4:	b508      	push	{r3, lr}
	handler();
   11fb6:	f7f0 ffb9 	bl	2f2c <z_SysNmiOnReset>
	z_arm_int_exit();
}
   11fba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   11fbe:	f7f1 ba0f 	b.w	33e0 <z_arm_exc_exit>

00011fc2 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   11fc2:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   11fc6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   11fca:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   11fcc:	bf08      	it	eq
   11fce:	f06f 0015 	mvneq.w	r0, #21
   11fd2:	4770      	bx	lr

00011fd4 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   11fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11fd8:	4684      	mov	ip, r0
   11fda:	4688      	mov	r8, r1
	register const char *s = nptr;
   11fdc:	4601      	mov	r1, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   11fde:	460c      	mov	r4, r1
   11fe0:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
}

static inline int isspace(int c)
{
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   11fe4:	2b20      	cmp	r3, #32
   11fe6:	d033      	beq.n	12050 <strtol+0x7c>
   11fe8:	f1a3 0009 	sub.w	r0, r3, #9
   11fec:	2804      	cmp	r0, #4
   11fee:	d92f      	bls.n	12050 <strtol+0x7c>
	} while (isspace(c));
	if (c == '-') {
   11ff0:	2b2d      	cmp	r3, #45	; 0x2d
   11ff2:	d12f      	bne.n	12054 <strtol+0x80>
		neg = 1;
		c = *s++;
   11ff4:	784b      	ldrb	r3, [r1, #1]
   11ff6:	1c8c      	adds	r4, r1, #2
		neg = 1;
   11ff8:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   11ffa:	2a00      	cmp	r2, #0
   11ffc:	d05c      	beq.n	120b8 <strtol+0xe4>
   11ffe:	2a10      	cmp	r2, #16
   12000:	d109      	bne.n	12016 <strtol+0x42>
   12002:	2b30      	cmp	r3, #48	; 0x30
   12004:	d107      	bne.n	12016 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   12006:	7823      	ldrb	r3, [r4, #0]
   12008:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1200c:	2b58      	cmp	r3, #88	; 0x58
   1200e:	d14e      	bne.n	120ae <strtol+0xda>
		c = s[1];
		s += 2;
		base = 16;
   12010:	2210      	movs	r2, #16
		c = s[1];
   12012:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   12014:	3402      	adds	r4, #2
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   12016:	2600      	movs	r6, #0
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   12018:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   1201c:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
   1201e:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   12022:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   12024:	fb02 791e 	mls	r9, r2, lr, r7
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   12028:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1202c:	2d09      	cmp	r5, #9
   1202e:	d817      	bhi.n	12060 <strtol+0x8c>
			c -= '0';
   12030:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   12032:	429a      	cmp	r2, r3
   12034:	dd24      	ble.n	12080 <strtol+0xac>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   12036:	1c75      	adds	r5, r6, #1
   12038:	d007      	beq.n	1204a <strtol+0x76>
   1203a:	4570      	cmp	r0, lr
   1203c:	d81d      	bhi.n	1207a <strtol+0xa6>
   1203e:	d101      	bne.n	12044 <strtol+0x70>
   12040:	454b      	cmp	r3, r9
   12042:	dc1a      	bgt.n	1207a <strtol+0xa6>
			any = -1;
		} else {
			any = 1;
   12044:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   12046:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   1204a:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1204e:	e7eb      	b.n	12028 <strtol+0x54>
{
   12050:	4621      	mov	r1, r4
   12052:	e7c4      	b.n	11fde <strtol+0xa>
	} else if (c == '+') {
   12054:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   12056:	bf04      	itt	eq
   12058:	784b      	ldrbeq	r3, [r1, #1]
   1205a:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   1205c:	2100      	movs	r1, #0
   1205e:	e7cc      	b.n	11ffa <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   12060:	f043 0520 	orr.w	r5, r3, #32
   12064:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   12066:	2d19      	cmp	r5, #25
   12068:	d80a      	bhi.n	12080 <strtol+0xac>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1206a:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1206e:	2d1a      	cmp	r5, #26
   12070:	bf34      	ite	cc
   12072:	2537      	movcc	r5, #55	; 0x37
   12074:	2557      	movcs	r5, #87	; 0x57
   12076:	1b5b      	subs	r3, r3, r5
   12078:	e7db      	b.n	12032 <strtol+0x5e>
			any = -1;
   1207a:	f04f 36ff 	mov.w	r6, #4294967295
   1207e:	e7e4      	b.n	1204a <strtol+0x76>
		}
	}

	if (any < 0) {
   12080:	1c73      	adds	r3, r6, #1
   12082:	d109      	bne.n	12098 <strtol+0xc4>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   12084:	f7fb fc28 	bl	d8d8 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   12088:	2326      	movs	r3, #38	; 0x26
   1208a:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   1208c:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   1208e:	f1b8 0f00 	cmp.w	r8, #0
   12092:	d107      	bne.n	120a4 <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   12094:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   12098:	b101      	cbz	r1, 1209c <strtol+0xc8>
		acc = -acc;
   1209a:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1209c:	f1b8 0f00 	cmp.w	r8, #0
   120a0:	d0f8      	beq.n	12094 <strtol+0xc0>
		*endptr = (char *)(any ? s - 1 : nptr);
   120a2:	b10e      	cbz	r6, 120a8 <strtol+0xd4>
   120a4:	f104 3cff 	add.w	ip, r4, #4294967295
   120a8:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   120ac:	e7f2      	b.n	12094 <strtol+0xc0>
	if (base == 0) {
   120ae:	2330      	movs	r3, #48	; 0x30
   120b0:	2a00      	cmp	r2, #0
   120b2:	d1b0      	bne.n	12016 <strtol+0x42>
		base = c == '0' ? 8 : 10;
   120b4:	2208      	movs	r2, #8
   120b6:	e7ae      	b.n	12016 <strtol+0x42>
	if ((base == 0 || base == 16) &&
   120b8:	2b30      	cmp	r3, #48	; 0x30
   120ba:	d0a4      	beq.n	12006 <strtol+0x32>
		base = c == '0' ? 8 : 10;
   120bc:	220a      	movs	r2, #10
   120be:	e7aa      	b.n	12016 <strtol+0x42>

000120c0 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   120c0:	4603      	mov	r3, r0
   120c2:	3901      	subs	r1, #1
   120c4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   120c8:	b90a      	cbnz	r2, 120ce <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   120ca:	701a      	strb	r2, [r3, #0]

	return dest;
}
   120cc:	4770      	bx	lr
		*d = *s;
   120ce:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   120d2:	e7f7      	b.n	120c4 <strcpy+0x4>

000120d4 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   120d4:	b570      	push	{r4, r5, r6, lr}
   120d6:	4605      	mov	r5, r0
   120d8:	3901      	subs	r1, #1
   120da:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   120dc:	b142      	cbz	r2, 120f0 <strncpy+0x1c>
   120de:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   120e2:	1e56      	subs	r6, r2, #1
   120e4:	b92b      	cbnz	r3, 120f2 <strncpy+0x1e>
   120e6:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   120e8:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   120ec:	42a2      	cmp	r2, r4
   120ee:	d1fb      	bne.n	120e8 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   120f0:	bd70      	pop	{r4, r5, r6, pc}
		n--;
   120f2:	4632      	mov	r2, r6
		*d = *s;
   120f4:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   120f8:	e7ef      	b.n	120da <strncpy+0x6>

000120fa <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   120fa:	4603      	mov	r3, r0
	size_t n = 0;
   120fc:	2000      	movs	r0, #0

	while (*s != '\0') {
   120fe:	5c1a      	ldrb	r2, [r3, r0]
   12100:	b902      	cbnz	r2, 12104 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   12102:	4770      	bx	lr
		n++;
   12104:	3001      	adds	r0, #1
   12106:	e7fa      	b.n	120fe <strlen+0x4>

00012108 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   12108:	1e43      	subs	r3, r0, #1
   1210a:	3901      	subs	r1, #1
   1210c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   12110:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   12114:	4282      	cmp	r2, r0
   12116:	d101      	bne.n	1211c <strcmp+0x14>
   12118:	2a00      	cmp	r2, #0
   1211a:	d1f7      	bne.n	1210c <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1211c:	1a10      	subs	r0, r2, r0
   1211e:	4770      	bx	lr

00012120 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   12120:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   12122:	2400      	movs	r4, #0
   12124:	42a2      	cmp	r2, r4
   12126:	d008      	beq.n	1213a <strncmp+0x1a>
   12128:	5d03      	ldrb	r3, [r0, r4]
   1212a:	5d0d      	ldrb	r5, [r1, r4]
   1212c:	42ab      	cmp	r3, r5
   1212e:	d102      	bne.n	12136 <strncmp+0x16>
   12130:	3401      	adds	r4, #1
   12132:	2b00      	cmp	r3, #0
   12134:	d1f6      	bne.n	12124 <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   12136:	1b58      	subs	r0, r3, r5
   12138:	e000      	b.n	1213c <strncmp+0x1c>
   1213a:	2000      	movs	r0, #0
}
   1213c:	bd30      	pop	{r4, r5, pc}

0001213e <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1213e:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   12140:	b15a      	cbz	r2, 1215a <memcmp+0x1c>
   12142:	3901      	subs	r1, #1
   12144:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   12146:	f810 2b01 	ldrb.w	r2, [r0], #1
   1214a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1214e:	42a0      	cmp	r0, r4
   12150:	d001      	beq.n	12156 <memcmp+0x18>
   12152:	429a      	cmp	r2, r3
   12154:	d0f7      	beq.n	12146 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   12156:	1ad0      	subs	r0, r2, r3
}
   12158:	bd10      	pop	{r4, pc}
		return 0;
   1215a:	4610      	mov	r0, r2
   1215c:	e7fc      	b.n	12158 <memcmp+0x1a>

0001215e <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1215e:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   12160:	ea81 0400 	eor.w	r4, r1, r0
   12164:	07a5      	lsls	r5, r4, #30
   12166:	4603      	mov	r3, r0
   12168:	d00b      	beq.n	12182 <memcpy+0x24>
   1216a:	3b01      	subs	r3, #1
   1216c:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1216e:	4291      	cmp	r1, r2
   12170:	d11b      	bne.n	121aa <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   12172:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   12174:	2a00      	cmp	r2, #0
   12176:	d0fc      	beq.n	12172 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   12178:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   1217c:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   1217e:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   12182:	079c      	lsls	r4, r3, #30
   12184:	d1f6      	bne.n	12174 <memcpy+0x16>
   12186:	f022 0403 	bic.w	r4, r2, #3
   1218a:	1f1d      	subs	r5, r3, #4
   1218c:	0896      	lsrs	r6, r2, #2
   1218e:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   12190:	42b9      	cmp	r1, r7
   12192:	d105      	bne.n	121a0 <memcpy+0x42>
   12194:	f06f 0503 	mvn.w	r5, #3
   12198:	4423      	add	r3, r4
   1219a:	fb05 2206 	mla	r2, r5, r6, r2
   1219e:	e7e4      	b.n	1216a <memcpy+0xc>
			*(d_word++) = *(s_word++);
   121a0:	f851 cb04 	ldr.w	ip, [r1], #4
   121a4:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   121a8:	e7f2      	b.n	12190 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   121aa:	f811 4b01 	ldrb.w	r4, [r1], #1
   121ae:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   121b2:	e7dc      	b.n	1216e <memcpy+0x10>

000121b4 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   121b4:	4603      	mov	r3, r0
{
   121b6:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
   121b8:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   121ba:	079c      	lsls	r4, r3, #30
   121bc:	d111      	bne.n	121e2 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   121be:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   121c2:	f022 0603 	bic.w	r6, r2, #3
   121c6:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   121ca:	441e      	add	r6, r3
   121cc:	0894      	lsrs	r4, r2, #2
   121ce:	42b3      	cmp	r3, r6
   121d0:	d10d      	bne.n	121ee <memset+0x3a>
   121d2:	f06f 0503 	mvn.w	r5, #3
   121d6:	fb05 2204 	mla	r2, r5, r4, r2
   121da:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   121dc:	4293      	cmp	r3, r2
   121de:	d109      	bne.n	121f4 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   121e0:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   121e2:	2a00      	cmp	r2, #0
   121e4:	d0fc      	beq.n	121e0 <memset+0x2c>
		*(d_byte++) = c_byte;
   121e6:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   121ea:	3a01      	subs	r2, #1
   121ec:	e7e5      	b.n	121ba <memset+0x6>
		*(d_word++) = c_word;
   121ee:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   121f2:	e7ec      	b.n	121ce <memset+0x1a>
		*(d_byte++) = c_byte;
   121f4:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   121f8:	e7f0      	b.n	121dc <memset+0x28>

000121fa <_stdout_hook_default>:
}
   121fa:	f04f 30ff 	mov.w	r0, #4294967295
   121fe:	4770      	bx	lr

00012200 <bt_rpa_irk_matches>:

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   12200:	2203      	movs	r2, #3
	return 0;
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
   12202:	b530      	push	{r4, r5, lr}
   12204:	4605      	mov	r5, r0
   12206:	b087      	sub	sp, #28
   12208:	460c      	mov	r4, r1
	memcpy(res, r, 3);
   1220a:	a802      	add	r0, sp, #8
   1220c:	4411      	add	r1, r2
   1220e:	f7ff ffa6 	bl	1215e <memcpy>
	(void)memset(res + 3, 0, 13);
   12212:	220d      	movs	r2, #13
   12214:	2100      	movs	r1, #0
   12216:	f10d 000b 	add.w	r0, sp, #11
   1221a:	f7ff ffcb 	bl	121b4 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   1221e:	aa02      	add	r2, sp, #8
   12220:	4611      	mov	r1, r2
   12222:	4628      	mov	r0, r5
   12224:	f000 fa2e 	bl	12684 <bt_encrypt_le>
	if (err) {
   12228:	b970      	cbnz	r0, 12248 <bt_rpa_irk_matches+0x48>
	memcpy(out, res, 3);
   1222a:	2203      	movs	r2, #3
   1222c:	a902      	add	r1, sp, #8
   1222e:	a801      	add	r0, sp, #4
   12230:	f7ff ff95 	bl	1215e <memcpy>
	err = ah(irk, addr->val + 3, hash);
	if (err) {
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   12234:	2203      	movs	r2, #3
   12236:	4620      	mov	r0, r4
   12238:	a901      	add	r1, sp, #4
   1223a:	f7ff ff80 	bl	1213e <memcmp>
   1223e:	fab0 f080 	clz	r0, r0
   12242:	0940      	lsrs	r0, r0, #5
}
   12244:	b007      	add	sp, #28
   12246:	bd30      	pop	{r4, r5, pc}
		return false;
   12248:	2000      	movs	r0, #0
   1224a:	e7fb      	b.n	12244 <bt_rpa_irk_matches+0x44>

0001224c <bt_settings_decode_key>:
{
   1224c:	b570      	push	{r4, r5, r6, lr}
   1224e:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   12250:	2100      	movs	r1, #0
{
   12252:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   12254:	f7ff f9b8 	bl	115c8 <settings_name_next>
   12258:	280d      	cmp	r0, #13
   1225a:	d118      	bne.n	1228e <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   1225c:	7b23      	ldrb	r3, [r4, #12]
   1225e:	2b30      	cmp	r3, #48	; 0x30
   12260:	d111      	bne.n	12286 <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   12262:	2300      	movs	r3, #0
   12264:	702b      	strb	r3, [r5, #0]
   12266:	f104 060c 	add.w	r6, r4, #12
   1226a:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   1226c:	462a      	mov	r2, r5
   1226e:	4620      	mov	r0, r4
   12270:	2301      	movs	r3, #1
   12272:	2102      	movs	r1, #2
   12274:	3402      	adds	r4, #2
   12276:	f7fe fd54 	bl	10d22 <hex2bin>
	for (u8_t i = 0; i < 6; i++) {
   1227a:	42b4      	cmp	r4, r6
   1227c:	f105 35ff 	add.w	r5, r5, #4294967295
   12280:	d1f4      	bne.n	1226c <bt_settings_decode_key+0x20>
	return 0;
   12282:	2000      	movs	r0, #0
}
   12284:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   12286:	2b31      	cmp	r3, #49	; 0x31
   12288:	d101      	bne.n	1228e <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   1228a:	2301      	movs	r3, #1
   1228c:	e7ea      	b.n	12264 <bt_settings_decode_key+0x18>
		return -EINVAL;
   1228e:	f06f 0015 	mvn.w	r0, #21
   12292:	e7f7      	b.n	12284 <bt_settings_decode_key+0x38>

00012294 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   12294:	b510      	push	{r4, lr}
   12296:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   12298:	7801      	ldrb	r1, [r0, #0]
   1229a:	7822      	ldrb	r2, [r4, #0]
{
   1229c:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1229e:	428a      	cmp	r2, r1
   122a0:	d00e      	beq.n	122c0 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   122a2:	4669      	mov	r1, sp
   122a4:	f7f1 fc84 	bl	3bb0 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   122a8:	4620      	mov	r0, r4
   122aa:	a905      	add	r1, sp, #20
   122ac:	f7f1 fc80 	bl	3bb0 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   122b0:	2210      	movs	r2, #16
   122b2:	f10d 0115 	add.w	r1, sp, #21
   122b6:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   122ba:	f7ff ff40 	bl	1213e <memcmp>
   122be:	e007      	b.n	122d0 <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   122c0:	2a01      	cmp	r2, #1
   122c2:	d007      	beq.n	122d4 <bt_uuid_cmp+0x40>
   122c4:	2a02      	cmp	r2, #2
   122c6:	d008      	beq.n	122da <bt_uuid_cmp+0x46>
   122c8:	b95a      	cbnz	r2, 122e2 <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   122ca:	8840      	ldrh	r0, [r0, #2]
   122cc:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   122ce:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   122d0:	b00a      	add	sp, #40	; 0x28
   122d2:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   122d4:	6840      	ldr	r0, [r0, #4]
   122d6:	6863      	ldr	r3, [r4, #4]
   122d8:	e7f9      	b.n	122ce <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   122da:	2210      	movs	r2, #16
   122dc:	1c61      	adds	r1, r4, #1
   122de:	3001      	adds	r0, #1
   122e0:	e7eb      	b.n	122ba <bt_uuid_cmp+0x26>
	switch (u1->type) {
   122e2:	f06f 0015 	mvn.w	r0, #21
   122e6:	e7f3      	b.n	122d0 <bt_uuid_cmp+0x3c>

000122e8 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const u8_t *data, u8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   122e8:	2a04      	cmp	r2, #4
{
   122ea:	b538      	push	{r3, r4, r5, lr}
   122ec:	460c      	mov	r4, r1
	switch (data_len) {
   122ee:	d00d      	beq.n	1230c <bt_uuid_create+0x24>
   122f0:	2a10      	cmp	r2, #16
   122f2:	d019      	beq.n	12328 <bt_uuid_create+0x40>
   122f4:	2a02      	cmp	r2, #2
   122f6:	f04f 0300 	mov.w	r3, #0
   122fa:	d11b      	bne.n	12334 <bt_uuid_create+0x4c>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   122fc:	7003      	strb	r3, [r0, #0]
	return ((u16_t)src[1] << 8) | src[0];
   122fe:	784a      	ldrb	r2, [r1, #1]
   12300:	780b      	ldrb	r3, [r1, #0]
   12302:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   12306:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   12308:	2001      	movs	r0, #1
}
   1230a:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   1230c:	2301      	movs	r3, #1
   1230e:	7003      	strb	r3, [r0, #0]
   12310:	78a2      	ldrb	r2, [r4, #2]
   12312:	78c9      	ldrb	r1, [r1, #3]
   12314:	7865      	ldrb	r5, [r4, #1]
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   12316:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((u16_t)src[1] << 8) | src[0];
   1231a:	7822      	ldrb	r2, [r4, #0]
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1231c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   12320:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   12324:	6042      	str	r2, [r0, #4]
		break;
   12326:	e7ef      	b.n	12308 <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
   12328:	2302      	movs	r3, #2
   1232a:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1232e:	f7ff ff16 	bl	1215e <memcpy>
		break;
   12332:	e7e9      	b.n	12308 <bt_uuid_create+0x20>
	switch (data_len) {
   12334:	4618      	mov	r0, r3
   12336:	e7e8      	b.n	1230a <bt_uuid_create+0x22>

00012338 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline u8_t bt_hci_evt_get_flags(u8_t evt)
{
	switch (evt) {
   12338:	280f      	cmp	r0, #15
   1233a:	d806      	bhi.n	1234a <bt_hci_evt_get_flags+0x12>
   1233c:	280d      	cmp	r0, #13
   1233e:	d80b      	bhi.n	12358 <bt_hci_evt_get_flags+0x20>
   12340:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   12342:	bf14      	ite	ne
   12344:	2002      	movne	r0, #2
   12346:	2003      	moveq	r0, #3
   12348:	4770      	bx	lr
	switch (evt) {
   1234a:	2813      	cmp	r0, #19
   1234c:	d004      	beq.n	12358 <bt_hci_evt_get_flags+0x20>
   1234e:	281a      	cmp	r0, #26
   12350:	bf14      	ite	ne
   12352:	2002      	movne	r0, #2
   12354:	2001      	moveq	r0, #1
   12356:	4770      	bx	lr
   12358:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   1235a:	4770      	bx	lr

0001235c <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1235c:	e8d0 0faf 	lda	r0, [r0]
}
   12360:	4770      	bx	lr

00012362 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   12362:	2207      	movs	r2, #7
   12364:	f7ff befb 	b.w	1215e <memcpy>

00012368 <atomic_or>:
{
   12368:	4603      	mov	r3, r0
}
   1236a:	e8d3 0fef 	ldaex	r0, [r3]
   1236e:	ea40 0201 	orr.w	r2, r0, r1
   12372:	e8c3 2fec 	stlex	ip, r2, [r3]
   12376:	f1bc 0f00 	cmp.w	ip, #0
   1237a:	d1f6      	bne.n	1236a <atomic_or+0x2>
   1237c:	4770      	bx	lr

0001237e <bt_addr_le_cmp>:
	return memcmp(a, b, sizeof(*a));
   1237e:	2207      	movs	r2, #7
   12380:	f7ff bedd 	b.w	1213e <memcmp>

00012384 <atomic_and>:
{
   12384:	4603      	mov	r3, r0
}
   12386:	e8d3 0fef 	ldaex	r0, [r3]
   1238a:	ea00 0201 	and.w	r2, r0, r1
   1238e:	e8c3 2fec 	stlex	ip, r2, [r3]
   12392:	f1bc 0f00 	cmp.w	ip, #0
   12396:	d1f6      	bne.n	12386 <atomic_and+0x2>
   12398:	4770      	bx	lr

0001239a <atomic_set_bit_to>:
 * @param val true for 1, false for 0.
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
   1239a:	460b      	mov	r3, r1
   1239c:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1239e:	f001 041f 	and.w	r4, r1, #31
   123a2:	2101      	movs	r1, #1
   123a4:	095b      	lsrs	r3, r3, #5
   123a6:	40a1      	lsls	r1, r4

	if (val) {
   123a8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   123ac:	b112      	cbz	r2, 123b4 <atomic_set_bit_to+0x1a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
   123ae:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   123b0:	f7ff bfda 	b.w	12368 <atomic_or>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   123b4:	43c9      	mvns	r1, r1
}
   123b6:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   123b8:	f7ff bfe4 	b.w	12384 <atomic_and>

000123bc <sys_put_le64>:
	dst[1] = val >> 8;
   123bc:	f3c0 2307 	ubfx	r3, r0, #8, #8
   123c0:	7053      	strb	r3, [r2, #1]
	dst[0] = val;
   123c2:	2300      	movs	r3, #0
   123c4:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   123c6:	0e00      	lsrs	r0, r0, #24
   123c8:	70d0      	strb	r0, [r2, #3]
   123ca:	f3c1 2007 	ubfx	r0, r1, #8, #8
   123ce:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   123d0:	7093      	strb	r3, [r2, #2]
   123d2:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   123d4:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   123d6:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   123d8:	71d1      	strb	r1, [r2, #7]
}
   123da:	4770      	bx	lr

000123dc <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   123dc:	f100 0314 	add.w	r3, r0, #20
{
   123e0:	b510      	push	{r4, lr}
   123e2:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   123e4:	4618      	mov	r0, r3
   123e6:	f7ff ffb9 	bl	1235c <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   123ea:	0642      	lsls	r2, r0, #25
   123ec:	d50a      	bpl.n	12404 <adv_pause_enabled+0x28>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   123ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   123f2:	4618      	mov	r0, r3
   123f4:	f7ff ffb8 	bl	12368 <atomic_or>
	return set_le_adv_enable_legacy(adv, enable);
   123f8:	4620      	mov	r0, r4
}
   123fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   123fe:	2100      	movs	r1, #0
   12400:	f7f2 b91a 	b.w	4638 <set_le_adv_enable_legacy>
}
   12404:	bd10      	pop	{r4, pc}

00012406 <adv_unpause_enabled>:
{
   12406:	b510      	push	{r4, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12408:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   1240c:	4604      	mov	r4, r0
   1240e:	3014      	adds	r0, #20
   12410:	f7ff ffb8 	bl	12384 <atomic_and>
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   12414:	04c3      	lsls	r3, r0, #19
   12416:	d505      	bpl.n	12424 <adv_unpause_enabled+0x1e>
	return set_le_adv_enable_legacy(adv, enable);
   12418:	4620      	mov	r0, r4
}
   1241a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   1241e:	2101      	movs	r1, #1
   12420:	f7f2 b90a 	b.w	4638 <set_le_adv_enable_legacy>
}
   12424:	bd10      	pop	{r4, pc}

00012426 <hci_id_add.isra.0>:
static int hci_id_add(u8_t id, const bt_addr_le_t *addr, u8_t peer_irk[16])
   12426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12428:	4607      	mov	r7, r0
   1242a:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   1242c:	f242 0027 	movw	r0, #8231	; 0x2027
   12430:	2127      	movs	r1, #39	; 0x27
   12432:	f7f2 f829 	bl	4488 <bt_hci_cmd_create>
	if (!buf) {
   12436:	4604      	mov	r4, r0
   12438:	b1d0      	cbz	r0, 12470 <hci_id_add.isra.0+0x4a>
	cp = net_buf_add(buf, sizeof(*cp));
   1243a:	2127      	movs	r1, #39	; 0x27
   1243c:	3008      	adds	r0, #8
   1243e:	f7f9 fc8b 	bl	bd58 <net_buf_simple_add>
   12442:	4605      	mov	r5, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   12444:	4639      	mov	r1, r7
   12446:	f7ff ff8c 	bl	12362 <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   1244a:	4631      	mov	r1, r6
   1244c:	2210      	movs	r2, #16
   1244e:	1de8      	adds	r0, r5, #7
   12450:	f7ff fe85 	bl	1215e <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   12454:	2210      	movs	r2, #16
   12456:	2100      	movs	r1, #0
   12458:	f105 0017 	add.w	r0, r5, #23
   1245c:	f7ff feaa 	bl	121b4 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   12460:	4621      	mov	r1, r4
}
   12462:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   12466:	2200      	movs	r2, #0
   12468:	f242 0027 	movw	r0, #8231	; 0x2027
   1246c:	f7f2 b856 	b.w	451c <bt_hci_cmd_send_sync>
}
   12470:	f06f 0036 	mvn.w	r0, #54	; 0x36
   12474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00012476 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   12476:	7a03      	ldrb	r3, [r0, #8]
   12478:	075b      	lsls	r3, r3, #29
   1247a:	d504      	bpl.n	12486 <keys_add_id+0x10>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   1247c:	f100 012a 	add.w	r1, r0, #42	; 0x2a
   12480:	3001      	adds	r0, #1
   12482:	f7ff bfd0 	b.w	12426 <hci_id_add.isra.0>
}
   12486:	4770      	bx	lr

00012488 <addr_res_enable>:
{
   12488:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   1248a:	2101      	movs	r1, #1
{
   1248c:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   1248e:	f242 002d 	movw	r0, #8237	; 0x202d
   12492:	f7f1 fff9 	bl	4488 <bt_hci_cmd_create>
	if (!buf) {
   12496:	4604      	mov	r4, r0
   12498:	b158      	cbz	r0, 124b2 <addr_res_enable+0x2a>
	net_buf_add_u8(buf, enable);
   1249a:	4629      	mov	r1, r5
   1249c:	3008      	adds	r0, #8
   1249e:	f001 fdcd 	bl	1403c <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   124a2:	4621      	mov	r1, r4
}
   124a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   124a8:	2200      	movs	r2, #0
   124aa:	f242 002d 	movw	r0, #8237	; 0x202d
   124ae:	f7f2 b835 	b.w	451c <bt_hci_cmd_send_sync>
}
   124b2:	f06f 0036 	mvn.w	r0, #54	; 0x36
   124b6:	bd38      	pop	{r3, r4, r5, pc}

000124b8 <bt_lookup_id_addr>:
{
   124b8:	b510      	push	{r4, lr}
   124ba:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   124bc:	f7f9 f82c 	bl	b518 <bt_keys_find_irk>
		if (keys) {
   124c0:	b100      	cbz	r0, 124c4 <bt_lookup_id_addr+0xc>
			return &keys->addr;
   124c2:	1c44      	adds	r4, r0, #1
}
   124c4:	4620      	mov	r0, r4
   124c6:	bd10      	pop	{r4, pc}

000124c8 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   124c8:	8802      	ldrh	r2, [r0, #0]
   124ca:	8843      	ldrh	r3, [r0, #2]
{
   124cc:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   124ce:	429a      	cmp	r2, r3
   124d0:	d818      	bhi.n	12504 <bt_le_conn_params_valid+0x3c>
   124d2:	2a05      	cmp	r2, #5
   124d4:	d916      	bls.n	12504 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   124d6:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   124da:	d813      	bhi.n	12504 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   124dc:	8884      	ldrh	r4, [r0, #4]
   124de:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   124e2:	d20f      	bcs.n	12504 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   124e4:	88c1      	ldrh	r1, [r0, #6]
   124e6:	f640 4076 	movw	r0, #3190	; 0xc76
   124ea:	f1a1 020a 	sub.w	r2, r1, #10
   124ee:	b292      	uxth	r2, r2
   124f0:	4282      	cmp	r2, r0
   124f2:	d807      	bhi.n	12504 <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   124f4:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   124f8:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   124fc:	bf34      	ite	cc
   124fe:	2001      	movcc	r0, #1
   12500:	2000      	movcs	r0, #0
}
   12502:	bd10      	pop	{r4, pc}
		return false;
   12504:	2000      	movs	r0, #0
   12506:	e7fc      	b.n	12502 <bt_le_conn_params_valid+0x3a>

00012508 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   12508:	7a03      	ldrb	r3, [r0, #8]
   1250a:	07d9      	lsls	r1, r3, #31
   1250c:	d504      	bpl.n	12518 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   1250e:	f023 0301 	bic.w	r3, r3, #1
   12512:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   12514:	f7f2 ba1c 	b.w	4950 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   12518:	0799      	lsls	r1, r3, #30
   1251a:	d504      	bpl.n	12526 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   1251c:	f023 0302 	bic.w	r3, r3, #2
   12520:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   12522:	f7f2 babf 	b.w	4aa4 <bt_id_del>
}
   12526:	4770      	bx	lr

00012528 <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
   12528:	2301      	movs	r3, #1
{
   1252a:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1252c:	2106      	movs	r1, #6
{
   1252e:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   12530:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   12534:	f7f3 fc5a 	bl	5dec <bt_rand>
	if (err) {
   12538:	b918      	cbnz	r0, 12542 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
   1253a:	79a3      	ldrb	r3, [r4, #6]
   1253c:	f063 033f 	orn	r3, r3, #63	; 0x3f
   12540:	71a3      	strb	r3, [r4, #6]
}
   12542:	bd10      	pop	{r4, pc}

00012544 <bt_hci_disconnect>:
{
   12544:	b570      	push	{r4, r5, r6, lr}
   12546:	4606      	mov	r6, r0
   12548:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1254a:	f240 4006 	movw	r0, #1030	; 0x406
   1254e:	2103      	movs	r1, #3
   12550:	f7f1 ff9a 	bl	4488 <bt_hci_cmd_create>
	if (!buf) {
   12554:	4604      	mov	r4, r0
   12556:	b160      	cbz	r0, 12572 <bt_hci_disconnect+0x2e>
	disconn = net_buf_add(buf, sizeof(*disconn));
   12558:	2103      	movs	r1, #3
   1255a:	3008      	adds	r0, #8
   1255c:	f7f9 fbfc 	bl	bd58 <net_buf_simple_add>
	disconn->reason = reason;
   12560:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   12562:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
   12564:	4621      	mov	r1, r4
}
   12566:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
   1256a:	f240 4006 	movw	r0, #1030	; 0x406
   1256e:	f7f2 bb61 	b.w	4c34 <bt_hci_cmd_send>
}
   12572:	f06f 0036 	mvn.w	r0, #54	; 0x36
   12576:	bd70      	pop	{r4, r5, r6, pc}

00012578 <bt_le_set_data_len>:
{
   12578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1257a:	4607      	mov	r7, r0
   1257c:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1257e:	f242 0022 	movw	r0, #8226	; 0x2022
   12582:	2106      	movs	r1, #6
{
   12584:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   12586:	f7f1 ff7f 	bl	4488 <bt_hci_cmd_create>
	if (!buf) {
   1258a:	4604      	mov	r4, r0
   1258c:	b170      	cbz	r0, 125ac <bt_le_set_data_len+0x34>
	cp = net_buf_add(buf, sizeof(*cp));
   1258e:	2106      	movs	r1, #6
   12590:	3008      	adds	r0, #8
   12592:	f7f9 fbe1 	bl	bd58 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   12596:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   12598:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(conn->handle);
   1259a:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1259c:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1259e:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   125a0:	f242 0022 	movw	r0, #8226	; 0x2022
}
   125a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   125a8:	f7f2 bb44 	b.w	4c34 <bt_hci_cmd_send>
}
   125ac:	f06f 0036 	mvn.w	r0, #54	; 0x36
   125b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000125b2 <bt_le_set_phy>:
{
   125b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   125b4:	4607      	mov	r7, r0
   125b6:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   125b8:	f242 0032 	movw	r0, #8242	; 0x2032
   125bc:	2107      	movs	r1, #7
{
   125be:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   125c0:	f7f1 ff62 	bl	4488 <bt_hci_cmd_create>
	if (!buf) {
   125c4:	4604      	mov	r4, r0
   125c6:	b198      	cbz	r0, 125f0 <bt_le_set_phy+0x3e>
	cp = net_buf_add(buf, sizeof(*cp));
   125c8:	2107      	movs	r1, #7
   125ca:	3008      	adds	r0, #8
   125cc:	f7f9 fbc4 	bl	bd58 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   125d0:	883a      	ldrh	r2, [r7, #0]
	cp = net_buf_add(buf, sizeof(*cp));
   125d2:	4603      	mov	r3, r0
	cp->handle = sys_cpu_to_le16(conn->handle);
   125d4:	8002      	strh	r2, [r0, #0]
	cp->all_phys = 0U;
   125d6:	2000      	movs	r0, #0
	cp->tx_phys = pref_tx_phy;
   125d8:	70de      	strb	r6, [r3, #3]
	cp->all_phys = 0U;
   125da:	7098      	strb	r0, [r3, #2]
	cp->rx_phys = pref_rx_phy;
   125dc:	711d      	strb	r5, [r3, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
   125de:	7158      	strb	r0, [r3, #5]
   125e0:	7198      	strb	r0, [r3, #6]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   125e2:	4621      	mov	r1, r4
}
   125e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   125e8:	f242 0032 	movw	r0, #8242	; 0x2032
   125ec:	f7f2 bb22 	b.w	4c34 <bt_hci_cmd_send>
}
   125f0:	f06f 0036 	mvn.w	r0, #54	; 0x36
   125f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000125f6 <bt_addr_le_is_bonded>:
{
   125f6:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   125f8:	f7f8 ffc8 	bl	b58c <bt_keys_find_addr>
		return keys && keys->keys;
   125fc:	b118      	cbz	r0, 12606 <bt_addr_le_is_bonded+0x10>
   125fe:	89c0      	ldrh	r0, [r0, #14]
   12600:	3800      	subs	r0, #0
   12602:	bf18      	it	ne
   12604:	2001      	movne	r0, #1
}
   12606:	bd08      	pop	{r3, pc}

00012608 <bt_le_adv_start>:
	return bt_le_adv_start_legacy(param, ad, ad_len, sd, sd_len);
   12608:	f7f2 bff6 	b.w	55f8 <bt_le_adv_start_legacy>

0001260c <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   1260c:	6880      	ldr	r0, [r0, #8]
   1260e:	f7f3 b979 	b.w	5904 <enh_conn_complete>

00012612 <le_legacy_conn_complete>:
{
   12612:	b510      	push	{r4, lr}
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   12614:	2400      	movs	r4, #0
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   12616:	6881      	ldr	r1, [r0, #8]
{
   12618:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   1261a:	780b      	ldrb	r3, [r1, #0]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1261c:	a803      	add	r0, sp, #12
	enh.status         = evt->status;
   1261e:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   12622:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   12626:	3104      	adds	r1, #4
	enh.handle         = evt->handle;
   12628:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   1262c:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   12630:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   12634:	f8b1 3007 	ldrh.w	r3, [r1, #7]
   12638:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   1263c:	f8b1 3009 	ldrh.w	r3, [r1, #9]
   12640:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   12644:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   12648:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   1264c:	7b4b      	ldrb	r3, [r1, #13]
   1264e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   12652:	f7ff fe86 	bl	12362 <bt_addr_le_copy>
	memcpy(dst, src, sizeof(*dst));
   12656:	4669      	mov	r1, sp
   12658:	2206      	movs	r2, #6
   1265a:	f10d 0013 	add.w	r0, sp, #19
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1265e:	9400      	str	r4, [sp, #0]
   12660:	f8ad 4004 	strh.w	r4, [sp, #4]
   12664:	f7ff fd7b 	bl	1215e <memcpy>
   12668:	2206      	movs	r2, #6
   1266a:	4669      	mov	r1, sp
   1266c:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   12670:	9400      	str	r4, [sp, #0]
   12672:	f8ad 4004 	strh.w	r4, [sp, #4]
   12676:	f7ff fd72 	bl	1215e <memcpy>
	enh_conn_complete(&enh);
   1267a:	a802      	add	r0, sp, #8
   1267c:	f7f3 f942 	bl	5904 <enh_conn_complete>
}
   12680:	b00a      	add	sp, #40	; 0x28
   12682:	bd10      	pop	{r4, pc}

00012684 <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
   12684:	b530      	push	{r4, r5, lr}
   12686:	b0b1      	sub	sp, #196	; 0xc4
   12688:	460d      	mov	r5, r1
	u8_t tmp[16];

	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	sys_memcpy_swap(tmp, key, 16);
   1268a:	4601      	mov	r1, r0
   1268c:	4668      	mov	r0, sp
{
   1268e:	4614      	mov	r4, r2
	sys_memcpy_swap(tmp, key, 16);
   12690:	f7f3 fb50 	bl	5d34 <sys_memcpy_swap.constprop.0>

	if (tc_aes128_set_encrypt_key(&s, tmp) == TC_CRYPTO_FAIL) {
   12694:	4669      	mov	r1, sp
   12696:	a804      	add	r0, sp, #16
   12698:	f7f0 f966 	bl	2968 <tc_aes128_set_encrypt_key>
   1269c:	b1c0      	cbz	r0, 126d0 <bt_encrypt_le+0x4c>
		return -EINVAL;
	}

	sys_memcpy_swap(tmp, plaintext, 16);
   1269e:	4629      	mov	r1, r5
   126a0:	4668      	mov	r0, sp
   126a2:	f7f3 fb47 	bl	5d34 <sys_memcpy_swap.constprop.0>

	if (tc_aes_encrypt(enc_data, tmp, &s) == TC_CRYPTO_FAIL) {
   126a6:	4669      	mov	r1, sp
   126a8:	4620      	mov	r0, r4
   126aa:	aa04      	add	r2, sp, #16
   126ac:	f7f0 f9b0 	bl	2a10 <tc_aes_encrypt>
   126b0:	b170      	cbz	r0, 126d0 <bt_encrypt_le+0x4c>
   126b2:	1e63      	subs	r3, r4, #1
   126b4:	f104 0210 	add.w	r2, r4, #16
   126b8:	3407      	adds	r4, #7
		u8_t tmp = ((u8_t *)buf)[i];
   126ba:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
   126be:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   126c2:	42a3      	cmp	r3, r4
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
   126c4:	7018      	strb	r0, [r3, #0]
		((u8_t *)buf)[length - 1 - i] = tmp;
   126c6:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   126c8:	d1f7      	bne.n	126ba <bt_encrypt_le+0x36>

	sys_mem_swap(enc_data, 16);

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
   126ca:	2000      	movs	r0, #0
}
   126cc:	b031      	add	sp, #196	; 0xc4
   126ce:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   126d0:	f06f 0015 	mvn.w	r0, #21
   126d4:	e7fa      	b.n	126cc <bt_encrypt_le+0x48>

000126d6 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   126d6:	e8d0 0faf 	lda	r0, [r0]
}
   126da:	4770      	bx	lr

000126dc <bt_conn_reset_rx_state>:
	if (!conn->rx_len) {
   126dc:	89c3      	ldrh	r3, [r0, #14]
{
   126de:	b510      	push	{r4, lr}
   126e0:	4604      	mov	r4, r0
	if (!conn->rx_len) {
   126e2:	b12b      	cbz	r3, 126f0 <bt_conn_reset_rx_state+0x14>
	net_buf_unref(conn->rx);
   126e4:	6900      	ldr	r0, [r0, #16]
   126e6:	f7f9 f9c5 	bl	ba74 <net_buf_unref>
	conn->rx = NULL;
   126ea:	2300      	movs	r3, #0
   126ec:	6123      	str	r3, [r4, #16]
	conn->rx_len = 0U;
   126ee:	81e3      	strh	r3, [r4, #14]
}
   126f0:	bd10      	pop	{r4, pc}

000126f2 <atomic_inc>:
{
   126f2:	4603      	mov	r3, r0
}
   126f4:	e8d3 0fef 	ldaex	r0, [r3]
   126f8:	1c42      	adds	r2, r0, #1
   126fa:	e8c3 2fe1 	stlex	r1, r2, [r3]
   126fe:	2900      	cmp	r1, #0
   12700:	d1f8      	bne.n	126f4 <atomic_inc+0x2>
   12702:	4770      	bx	lr

00012704 <tx_notify>:
{
   12704:	b570      	push	{r4, r5, r6, lr}
   12706:	4604      	mov	r4, r0
	__asm__ volatile(
   12708:	f04f 0220 	mov.w	r2, #32
   1270c:	f3ef 8311 	mrs	r3, BASEPRI
   12710:	f382 8811 	msr	BASEPRI, r2
   12714:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   12718:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   1271a:	b920      	cbnz	r0, 12726 <tx_notify+0x22>
	__asm__ volatile(
   1271c:	f383 8811 	msr	BASEPRI, r3
   12720:	f3bf 8f6f 	isb	sy
}
   12724:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   12726:	6a61      	ldr	r1, [r4, #36]	; 0x24
   12728:	6802      	ldr	r2, [r0, #0]
   1272a:	4288      	cmp	r0, r1
	list->tail = node;
   1272c:	bf08      	it	eq
   1272e:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
   12730:	6222      	str	r2, [r4, #32]
   12732:	f383 8811 	msr	BASEPRI, r3
   12736:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1273a:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   1273e:	f7f3 fb6d 	bl	5e1c <tx_free>
		cb(conn, user_data);
   12742:	4631      	mov	r1, r6
   12744:	4620      	mov	r0, r4
   12746:	47a8      	blx	r5
	while (1) {
   12748:	e7de      	b.n	12708 <tx_notify+0x4>

0001274a <tx_complete_work>:
	tx_notify(conn);
   1274a:	3828      	subs	r0, #40	; 0x28
   1274c:	f7ff bfda 	b.w	12704 <tx_notify>

00012750 <bt_conn_set_security>:
{
   12750:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   12752:	7b43      	ldrb	r3, [r0, #13]
{
   12754:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   12756:	2b07      	cmp	r3, #7
   12758:	d124      	bne.n	127a4 <bt_conn_set_security+0x54>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   1275a:	7a43      	ldrb	r3, [r0, #9]
   1275c:	428b      	cmp	r3, r1
   1275e:	d224      	bcs.n	127aa <bt_conn_set_security+0x5a>
   12760:	7a83      	ldrb	r3, [r0, #10]
   12762:	428b      	cmp	r3, r1
   12764:	d221      	bcs.n	127aa <bt_conn_set_security+0x5a>
	if (val) {
   12766:	060a      	lsls	r2, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   12768:	f100 0304 	add.w	r3, r0, #4
   1276c:	d511      	bpl.n	12792 <bt_conn_set_security+0x42>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1276e:	e8d3 2fef 	ldaex	r2, [r3]
   12772:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   12776:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1277a:	2800      	cmp	r0, #0
   1277c:	d1f7      	bne.n	1276e <bt_conn_set_security+0x1e>
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   1277e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		return bt_smp_start_security(conn);
   12782:	4620      	mov	r0, r4
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   12784:	72a1      	strb	r1, [r4, #10]
		return bt_smp_start_security(conn);
   12786:	f7f8 fd1d 	bl	b1c4 <bt_smp_start_security>
	if (err) {
   1278a:	b108      	cbz	r0, 12790 <bt_conn_set_security+0x40>
		conn->required_sec_level = conn->sec_level;
   1278c:	7a63      	ldrb	r3, [r4, #9]
   1278e:	72a3      	strb	r3, [r4, #10]
}
   12790:	bd10      	pop	{r4, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12792:	e8d3 2fef 	ldaex	r2, [r3]
   12796:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   1279a:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1279e:	2800      	cmp	r0, #0
   127a0:	d0ed      	beq.n	1277e <bt_conn_set_security+0x2e>
   127a2:	e7f6      	b.n	12792 <bt_conn_set_security+0x42>
		return -ENOTCONN;
   127a4:	f06f 0038 	mvn.w	r0, #56	; 0x38
   127a8:	e7f2      	b.n	12790 <bt_conn_set_security+0x40>
		return 0;
   127aa:	2000      	movs	r0, #0
   127ac:	e7f0      	b.n	12790 <bt_conn_set_security+0x40>

000127ae <bt_conn_get_security>:
}
   127ae:	7a40      	ldrb	r0, [r0, #9]
   127b0:	4770      	bx	lr

000127b2 <bt_conn_is_peer_addr_le>:
{
   127b2:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   127b4:	7a03      	ldrb	r3, [r0, #8]
{
   127b6:	4604      	mov	r4, r0
	if (id != conn->id) {
   127b8:	428b      	cmp	r3, r1
{
   127ba:	4615      	mov	r5, r2
	if (id != conn->id) {
   127bc:	d115      	bne.n	127ea <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   127be:	f100 017c 	add.w	r1, r0, #124	; 0x7c
   127c2:	2207      	movs	r2, #7
   127c4:	4628      	mov	r0, r5
   127c6:	f7ff fcba 	bl	1213e <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   127ca:	b180      	cbz	r0, 127ee <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   127cc:	78e3      	ldrb	r3, [r4, #3]
   127ce:	2207      	movs	r2, #7
   127d0:	b943      	cbnz	r3, 127e4 <bt_conn_is_peer_addr_le+0x32>
   127d2:	f104 018a 	add.w	r1, r4, #138	; 0x8a
   127d6:	4628      	mov	r0, r5
   127d8:	f7ff fcb1 	bl	1213e <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   127dc:	fab0 f080 	clz	r0, r0
   127e0:	0940      	lsrs	r0, r0, #5
}
   127e2:	bd38      	pop	{r3, r4, r5, pc}
   127e4:	f104 0183 	add.w	r1, r4, #131	; 0x83
   127e8:	e7f5      	b.n	127d6 <bt_conn_is_peer_addr_le+0x24>
		return false;
   127ea:	2000      	movs	r0, #0
   127ec:	e7f9      	b.n	127e2 <bt_conn_is_peer_addr_le+0x30>
		return true;
   127ee:	2001      	movs	r0, #1
   127f0:	e7f7      	b.n	127e2 <bt_conn_is_peer_addr_le+0x30>

000127f2 <bt_conn_ref>:
{
   127f2:	b510      	push	{r4, lr}
   127f4:	4604      	mov	r4, r0
	atomic_val_t old = atomic_inc(&conn->ref);
   127f6:	3058      	adds	r0, #88	; 0x58
   127f8:	f7ff ff7b 	bl	126f2 <atomic_inc>
}
   127fc:	4620      	mov	r0, r4
   127fe:	bd10      	pop	{r4, pc}

00012800 <bt_conn_unref>:
{
   12800:	b508      	push	{r3, lr}
	atomic_val_t old = atomic_dec(&conn->ref);
   12802:	3058      	adds	r0, #88	; 0x58
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   12804:	e8d0 3fef 	ldaex	r3, [r0]
   12808:	3b01      	subs	r3, #1
   1280a:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1280e:	2a00      	cmp	r2, #0
   12810:	d1f8      	bne.n	12804 <bt_conn_unref+0x4>
	    atomic_get(&conn->ref) == 0) {
   12812:	f7ff ff60 	bl	126d6 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12816:	b918      	cbnz	r0, 12820 <bt_conn_unref+0x20>
}
   12818:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_resume();
   1281c:	f7f3 b83c 	b.w	5898 <bt_le_adv_resume>
}
   12820:	bd08      	pop	{r3, pc}

00012822 <bt_conn_get_dst>:
}
   12822:	307c      	adds	r0, #124	; 0x7c
   12824:	4770      	bx	lr

00012826 <bt_conn_le_conn_update>:
{
   12826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12828:	4607      	mov	r7, r0
   1282a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1282c:	f242 0013 	movw	r0, #8211	; 0x2013
   12830:	210e      	movs	r1, #14
   12832:	f7f1 fe29 	bl	4488 <bt_hci_cmd_create>
	if (!buf) {
   12836:	4606      	mov	r6, r0
   12838:	b1d0      	cbz	r0, 12870 <bt_conn_le_conn_update+0x4a>
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   1283a:	210e      	movs	r1, #14
   1283c:	3008      	adds	r0, #8
   1283e:	f7f9 fa8b 	bl	bd58 <net_buf_simple_add>
   12842:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   12844:	220e      	movs	r2, #14
   12846:	2100      	movs	r1, #0
   12848:	f7ff fcb4 	bl	121b4 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1284c:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1284e:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   12850:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   12852:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   12854:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   12856:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   12858:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1285a:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1285e:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   12860:	88ab      	ldrh	r3, [r5, #4]
   12862:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   12864:	88eb      	ldrh	r3, [r5, #6]
   12866:	8123      	strh	r3, [r4, #8]
}
   12868:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1286c:	f7f1 be56 	b.w	451c <bt_hci_cmd_send_sync>
}
   12870:	f06f 0036 	mvn.w	r0, #54	; 0x36
   12874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00012876 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   12876:	6813      	ldr	r3, [r2, #0]
   12878:	b939      	cbnz	r1, 1288a <sys_slist_remove+0x14>
   1287a:	6841      	ldr	r1, [r0, #4]
	list->head = node;
   1287c:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1287e:	428a      	cmp	r2, r1
   12880:	d100      	bne.n	12884 <sys_slist_remove+0xe>
	list->tail = node;
   12882:	6043      	str	r3, [r0, #4]
	parent->next = child;
   12884:	2300      	movs	r3, #0
   12886:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   12888:	4770      	bx	lr
	parent->next = child;
   1288a:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1288c:	6843      	ldr	r3, [r0, #4]
   1288e:	429a      	cmp	r2, r3
	list->tail = node;
   12890:	bf08      	it	eq
   12892:	6041      	streq	r1, [r0, #4]
}
   12894:	e7f6      	b.n	12884 <sys_slist_remove+0xe>

00012896 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   12896:	4603      	mov	r3, r0
	size_t bytes = 0;
   12898:	2000      	movs	r0, #0

	while (buf) {
   1289a:	b903      	cbnz	r3, 1289e <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1289c:	4770      	bx	lr
		bytes += buf->len;
   1289e:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   128a0:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   128a2:	4410      	add	r0, r2
		buf = buf->frags;
   128a4:	e7f9      	b.n	1289a <net_buf_frags_len+0x4>

000128a6 <__l2cap_lookup_ident>:
{
   128a6:	b538      	push	{r3, r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   128a8:	6d04      	ldr	r4, [r0, #80]	; 0x50
{
   128aa:	460b      	mov	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   128ac:	b164      	cbz	r4, 128c8 <__l2cap_lookup_ident+0x22>
   128ae:	2100      	movs	r1, #0
   128b0:	3c08      	subs	r4, #8
   128b2:	b14c      	cbz	r4, 128c8 <__l2cap_lookup_ident+0x22>
		if (chan->ident == ident) {
   128b4:	f894 5038 	ldrb.w	r5, [r4, #56]	; 0x38
   128b8:	429d      	cmp	r5, r3
   128ba:	d107      	bne.n	128cc <__l2cap_lookup_ident+0x26>
			if (remove) {
   128bc:	b122      	cbz	r2, 128c8 <__l2cap_lookup_ident+0x22>
				sys_slist_remove(&conn->channels, prev,
   128be:	f104 0208 	add.w	r2, r4, #8
   128c2:	3050      	adds	r0, #80	; 0x50
   128c4:	f7ff ffd7 	bl	12876 <sys_slist_remove>
}
   128c8:	4620      	mov	r0, r4
   128ca:	bd38      	pop	{r3, r4, r5, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   128cc:	f114 0108 	adds.w	r1, r4, #8
   128d0:	d004      	beq.n	128dc <__l2cap_lookup_ident+0x36>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   128d2:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   128d4:	2c00      	cmp	r4, #0
   128d6:	d0f7      	beq.n	128c8 <__l2cap_lookup_ident+0x22>
   128d8:	3c08      	subs	r4, #8
   128da:	e7ea      	b.n	128b2 <__l2cap_lookup_ident+0xc>
	return NULL;
   128dc:	460c      	mov	r4, r1
   128de:	e7f3      	b.n	128c8 <__l2cap_lookup_ident+0x22>

000128e0 <l2cap_remove_rx_cid>:
	if (!L2CAP_LE_CID_IS_DYN(cid)) {
   128e0:	f1a1 0240 	sub.w	r2, r1, #64	; 0x40
   128e4:	2a3f      	cmp	r2, #63	; 0x3f
{
   128e6:	b538      	push	{r3, r4, r5, lr}
   128e8:	460b      	mov	r3, r1
	if (!L2CAP_LE_CID_IS_DYN(cid)) {
   128ea:	d815      	bhi.n	12918 <l2cap_remove_rx_cid+0x38>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   128ec:	6d04      	ldr	r4, [r0, #80]	; 0x50
   128ee:	b154      	cbz	r4, 12906 <l2cap_remove_rx_cid+0x26>
   128f0:	2100      	movs	r1, #0
   128f2:	3c08      	subs	r4, #8
   128f4:	b13c      	cbz	r4, 12906 <l2cap_remove_rx_cid+0x26>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   128f6:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
   128f8:	f104 0208 	add.w	r2, r4, #8
   128fc:	429d      	cmp	r5, r3
   128fe:	d104      	bne.n	1290a <l2cap_remove_rx_cid+0x2a>
			sys_slist_remove(&conn->channels, prev, &chan->node);
   12900:	3050      	adds	r0, #80	; 0x50
   12902:	f7ff ffb8 	bl	12876 <sys_slist_remove>
}
   12906:	4620      	mov	r0, r4
   12908:	bd38      	pop	{r3, r4, r5, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   1290a:	b13a      	cbz	r2, 1291c <l2cap_remove_rx_cid+0x3c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1290c:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1290e:	2c00      	cmp	r4, #0
   12910:	d0f9      	beq.n	12906 <l2cap_remove_rx_cid+0x26>
   12912:	4611      	mov	r1, r2
   12914:	3c08      	subs	r4, #8
   12916:	e7ed      	b.n	128f4 <l2cap_remove_rx_cid+0x14>
		return NULL;
   12918:	2400      	movs	r4, #0
   1291a:	e7f4      	b.n	12906 <l2cap_remove_rx_cid+0x26>
   1291c:	4614      	mov	r4, r2
   1291e:	e7f2      	b.n	12906 <l2cap_remove_rx_cid+0x26>

00012920 <l2cap_alloc_frag>:
	frag = chan->chan.ops->alloc_buf(&chan->chan);
   12920:	6853      	ldr	r3, [r2, #4]
{
   12922:	4610      	mov	r0, r2
	frag = chan->chan.ops->alloc_buf(&chan->chan);
   12924:	68db      	ldr	r3, [r3, #12]
   12926:	4718      	bx	r3

00012928 <l2cap_connected>:
}
   12928:	4770      	bx	lr

0001292a <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1292a:	e8d0 0faf 	lda	r0, [r0]
}
   1292e:	4770      	bx	lr

00012930 <atomic_add>:
{
   12930:	4603      	mov	r3, r0
}
   12932:	e8d3 0fef 	ldaex	r0, [r3]
   12936:	1842      	adds	r2, r0, r1
   12938:	e8c3 2fec 	stlex	ip, r2, [r3]
   1293c:	f1bc 0f00 	cmp.w	ip, #0
   12940:	d1f7      	bne.n	12932 <atomic_add+0x2>
   12942:	4770      	bx	lr

00012944 <l2cap_chan_destroy>:
{
   12944:	b570      	push	{r4, r5, r6, lr}
   12946:	4604      	mov	r4, r0
	k_delayed_work_cancel(&chan->rtx_work);
   12948:	3010      	adds	r0, #16
   1294a:	f7fd faab 	bl	fea4 <k_delayed_work_cancel>
	if (ch->tx_buf) {
   1294e:	6f20      	ldr	r0, [r4, #112]	; 0x70
   12950:	b118      	cbz	r0, 1295a <l2cap_chan_destroy+0x16>
		net_buf_unref(ch->tx_buf);
   12952:	f7f9 f88f 	bl	ba74 <net_buf_unref>
		ch->tx_buf = NULL;
   12956:	2300      	movs	r3, #0
   12958:	6723      	str	r3, [r4, #112]	; 0x70
	while ((buf = net_buf_get(&ch->tx_queue, K_NO_WAIT))) {
   1295a:	f104 0554 	add.w	r5, r4, #84	; 0x54
   1295e:	2200      	movs	r2, #0
   12960:	2300      	movs	r3, #0
   12962:	4628      	mov	r0, r5
   12964:	f7f8 fff4 	bl	b950 <net_buf_get>
   12968:	b990      	cbnz	r0, 12990 <l2cap_chan_destroy+0x4c>
	while ((buf = net_buf_get(&ch->rx_queue, K_NO_WAIT))) {
   1296a:	f104 0694 	add.w	r6, r4, #148	; 0x94
   1296e:	2200      	movs	r2, #0
   12970:	2300      	movs	r3, #0
   12972:	4630      	mov	r0, r6
   12974:	f7f8 ffec 	bl	b950 <net_buf_get>
   12978:	4605      	mov	r5, r0
   1297a:	b960      	cbnz	r0, 12996 <l2cap_chan_destroy+0x52>
	if (ch->_sdu) {
   1297c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
   12980:	b128      	cbz	r0, 1298e <l2cap_chan_destroy+0x4a>
		net_buf_unref(ch->_sdu);
   12982:	f7f9 f877 	bl	ba74 <net_buf_unref>
		ch->_sdu = NULL;
   12986:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
		ch->_sdu_len = 0U;
   1298a:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
}
   1298e:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   12990:	f7f9 f870 	bl	ba74 <net_buf_unref>
   12994:	e7e3      	b.n	1295e <l2cap_chan_destroy+0x1a>
		net_buf_unref(buf);
   12996:	f7f9 f86d 	bl	ba74 <net_buf_unref>
   1299a:	e7e8      	b.n	1296e <l2cap_chan_destroy+0x2a>

0001299c <l2cap_chan_rx_init>:
	if (!chan->rx.mtu) {
   1299c:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
   1299e:	b90b      	cbnz	r3, 129a4 <l2cap_chan_rx_init+0x8>
		chan->rx.mtu = L2CAP_MAX_LE_MTU;
   129a0:	23f5      	movs	r3, #245	; 0xf5
   129a2:	87c3      	strh	r3, [r0, #62]	; 0x3e
	if (!chan->rx.init_credits) {
   129a4:	f8b0 2042 	ldrh.w	r2, [r0, #66]	; 0x42
   129a8:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
   129aa:	b94a      	cbnz	r2, 129c0 <l2cap_chan_rx_init+0x24>
		if (chan->chan.ops->alloc_buf) {
   129ac:	6842      	ldr	r2, [r0, #4]
   129ae:	68d2      	ldr	r2, [r2, #12]
   129b0:	b1aa      	cbz	r2, 129de <l2cap_chan_rx_init+0x42>
						 (L2CAP_MAX_LE_MPS - 1)) /
   129b2:	21f7      	movs	r1, #247	; 0xf7
			chan->rx.init_credits = (chan->rx.mtu +
   129b4:	f103 02f6 	add.w	r2, r3, #246	; 0xf6
						 (L2CAP_MAX_LE_MPS - 1)) /
   129b8:	fbb2 f2f1 	udiv	r2, r2, r1
			chan->rx.init_credits = L2CAP_LE_MAX_CREDITS;
   129bc:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
	chan->rx.mps = MIN(chan->rx.mtu + 2, L2CAP_MAX_LE_MPS);
   129c0:	3302      	adds	r3, #2
   129c2:	2bf7      	cmp	r3, #247	; 0xf7
   129c4:	bfa8      	it	ge
   129c6:	23f7      	movge	r3, #247	; 0xf7
   129c8:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   129cc:	2300      	movs	r3, #0
   129ce:	3044      	adds	r0, #68	; 0x44
   129d0:	e8d0 2fef 	ldaex	r2, [r0]
   129d4:	e8c0 3fe1 	stlex	r1, r3, [r0]
   129d8:	2900      	cmp	r1, #0
   129da:	d1f9      	bne.n	129d0 <l2cap_chan_rx_init+0x34>
}
   129dc:	4770      	bx	lr
			chan->rx.init_credits = L2CAP_LE_MAX_CREDITS;
   129de:	2205      	movs	r2, #5
   129e0:	e7ec      	b.n	129bc <l2cap_chan_rx_init+0x20>

000129e2 <l2cap_disconnected>:
   129e2:	4770      	bx	lr

000129e4 <l2cap_chan_tx_give_credits>:
{
   129e4:	b510      	push	{r4, lr}
   129e6:	4604      	mov	r4, r0
	atomic_add(&chan->tx.credits, credits);
   129e8:	3050      	adds	r0, #80	; 0x50
   129ea:	f7ff ffa1 	bl	12930 <atomic_add>
	if (!atomic_test_and_set_bit(chan->chan.status, BT_L2CAP_STATUS_OUT) &&
   129ee:	f104 0130 	add.w	r1, r4, #48	; 0x30
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   129f2:	e8d1 3fef 	ldaex	r3, [r1]
   129f6:	f043 0201 	orr.w	r2, r3, #1
   129fa:	e8c1 2fe0 	stlex	r0, r2, [r1]
   129fe:	2800      	cmp	r0, #0
   12a00:	d1f7      	bne.n	129f2 <l2cap_chan_tx_give_credits+0xe>
   12a02:	07db      	lsls	r3, r3, #31
   12a04:	d406      	bmi.n	12a14 <l2cap_chan_tx_give_credits+0x30>
	    chan->chan.ops->status) {
   12a06:	6863      	ldr	r3, [r4, #4]
   12a08:	699b      	ldr	r3, [r3, #24]
	if (!atomic_test_and_set_bit(chan->chan.status, BT_L2CAP_STATUS_OUT) &&
   12a0a:	b11b      	cbz	r3, 12a14 <l2cap_chan_tx_give_credits+0x30>
		chan->chan.ops->status(&chan->chan, chan->chan.status);
   12a0c:	4620      	mov	r0, r4
}
   12a0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->chan.ops->status(&chan->chan, chan->chan.status);
   12a12:	4718      	bx	r3
}
   12a14:	bd10      	pop	{r4, pc}

00012a16 <l2cap_chan_tx_resume>:
{
   12a16:	b508      	push	{r3, lr}
   12a18:	4603      	mov	r3, r0
	if (!atomic_get(&ch->tx.credits) ||
   12a1a:	3050      	adds	r0, #80	; 0x50
   12a1c:	f7ff ff85 	bl	1292a <atomic_get>
   12a20:	b148      	cbz	r0, 12a36 <l2cap_chan_tx_resume+0x20>
   12a22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   12a24:	b90a      	cbnz	r2, 12a2a <l2cap_chan_tx_resume+0x14>
	    (k_fifo_is_empty(&ch->tx_queue) && !ch->tx_buf)) {
   12a26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   12a28:	b12a      	cbz	r2, 12a36 <l2cap_chan_tx_resume+0x20>
	k_work_submit_to_queue(&k_sys_work_q, work);
   12a2a:	f103 0074 	add.w	r0, r3, #116	; 0x74
}
   12a2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   12a32:	f7f4 b893 	b.w	6b5c <k_work_submit_to_queue.constprop.0>
   12a36:	bd08      	pop	{r3, pc}

00012a38 <l2cap_chan_seg_sent>:
	l2cap_chan_tx_resume(BT_L2CAP_LE_CHAN(chan));
   12a38:	4608      	mov	r0, r1
   12a3a:	f7ff bfec 	b.w	12a16 <l2cap_chan_tx_resume>

00012a3e <l2cap_chan_sdu_sent>:
	if (chan->ops->sent) {
   12a3e:	684b      	ldr	r3, [r1, #4]
{
   12a40:	b510      	push	{r4, lr}
	if (chan->ops->sent) {
   12a42:	695b      	ldr	r3, [r3, #20]
{
   12a44:	460c      	mov	r4, r1
	if (chan->ops->sent) {
   12a46:	b10b      	cbz	r3, 12a4c <l2cap_chan_sdu_sent+0xe>
		chan->ops->sent(chan);
   12a48:	4608      	mov	r0, r1
   12a4a:	4798      	blx	r3
	l2cap_chan_tx_resume(BT_L2CAP_LE_CHAN(chan));
   12a4c:	4620      	mov	r0, r4
}
   12a4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	l2cap_chan_tx_resume(BT_L2CAP_LE_CHAN(chan));
   12a52:	f7ff bfe0 	b.w	12a16 <l2cap_chan_tx_resume>

00012a56 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   12a56:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   12a58:	b410      	push	{r4}
   12a5a:	460c      	mov	r4, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   12a5c:	b113      	cbz	r3, 12a64 <bt_l2cap_chan_remove+0xe>
   12a5e:	2100      	movs	r1, #0
   12a60:	3b08      	subs	r3, #8
   12a62:	b90b      	cbnz	r3, 12a68 <bt_l2cap_chan_remove+0x12>
}
   12a64:	bc10      	pop	{r4}
   12a66:	4770      	bx	lr
		if (chan == ch) {
   12a68:	42a3      	cmp	r3, r4
   12a6a:	f103 0208 	add.w	r2, r3, #8
   12a6e:	d103      	bne.n	12a78 <bt_l2cap_chan_remove+0x22>
}
   12a70:	bc10      	pop	{r4}
			sys_slist_remove(&conn->channels, prev, &chan->node);
   12a72:	3050      	adds	r0, #80	; 0x50
   12a74:	f7ff beff 	b.w	12876 <sys_slist_remove>
Z_GENLIST_PEEK_NEXT(slist, snode)
   12a78:	2a00      	cmp	r2, #0
   12a7a:	d0f3      	beq.n	12a64 <bt_l2cap_chan_remove+0xe>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12a7c:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   12a7e:	2b00      	cmp	r3, #0
   12a80:	d0f0      	beq.n	12a64 <bt_l2cap_chan_remove+0xe>
   12a82:	4611      	mov	r1, r2
   12a84:	3b08      	subs	r3, #8
   12a86:	e7ec      	b.n	12a62 <bt_l2cap_chan_remove+0xc>

00012a88 <bt_l2cap_chan_del>:
	if (!chan->conn) {
   12a88:	6803      	ldr	r3, [r0, #0]
{
   12a8a:	b510      	push	{r4, lr}
   12a8c:	4604      	mov	r4, r0
	if (!chan->conn) {
   12a8e:	b12b      	cbz	r3, 12a9c <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
   12a90:	6843      	ldr	r3, [r0, #4]
   12a92:	685b      	ldr	r3, [r3, #4]
   12a94:	b103      	cbz	r3, 12a98 <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
   12a96:	4798      	blx	r3
	chan->conn = NULL;
   12a98:	2300      	movs	r3, #0
   12a9a:	6023      	str	r3, [r4, #0]
	chan->state = state;
   12a9c:	2300      	movs	r3, #0
   12a9e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	chan->psm = 0U;
   12aa2:	86e3      	strh	r3, [r4, #54]	; 0x36
	if (chan->destroy) {
   12aa4:	68e3      	ldr	r3, [r4, #12]
   12aa6:	b11b      	cbz	r3, 12ab0 <bt_l2cap_chan_del+0x28>
		chan->destroy(chan);
   12aa8:	4620      	mov	r0, r4
}
   12aaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->destroy(chan);
   12aae:	4718      	bx	r3
}
   12ab0:	bd10      	pop	{r4, pc}

00012ab2 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   12ab2:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   12ab4:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   12ab6:	b18b      	cbz	r3, 12adc <bt_l2cap_disconnected+0x2a>
   12ab8:	f1b3 0008 	subs.w	r0, r3, #8
   12abc:	d00e      	beq.n	12adc <bt_l2cap_disconnected+0x2a>
   12abe:	681c      	ldr	r4, [r3, #0]
   12ac0:	b104      	cbz	r4, 12ac4 <bt_l2cap_disconnected+0x12>
   12ac2:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   12ac4:	f7ff ffe0 	bl	12a88 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   12ac8:	b144      	cbz	r4, 12adc <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   12aca:	f114 0308 	adds.w	r3, r4, #8
   12ace:	d002      	beq.n	12ad6 <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12ad0:	68a3      	ldr	r3, [r4, #8]
   12ad2:	b103      	cbz	r3, 12ad6 <bt_l2cap_disconnected+0x24>
   12ad4:	3b08      	subs	r3, #8
{
   12ad6:	4620      	mov	r0, r4
   12ad8:	461c      	mov	r4, r3
   12ada:	e7f3      	b.n	12ac4 <bt_l2cap_disconnected+0x12>
}
   12adc:	bd10      	pop	{r4, pc}

00012ade <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   12ade:	3104      	adds	r1, #4
   12ae0:	f7f3 be56 	b.w	6790 <bt_conn_create_pdu_timeout>

00012ae4 <bt_l2cap_send_cb>:
{
   12ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12ae8:	4614      	mov	r4, r2
   12aea:	4605      	mov	r5, r0
   12aec:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
   12aee:	f102 0008 	add.w	r0, r2, #8
   12af2:	2104      	movs	r1, #4
{
   12af4:	461e      	mov	r6, r3
   12af6:	f8dd 8018 	ldr.w	r8, [sp, #24]
	hdr = net_buf_push(buf, sizeof(*hdr));
   12afa:	f7f9 f8c9 	bl	bc90 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   12afe:	89a2      	ldrh	r2, [r4, #12]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   12b00:	4643      	mov	r3, r8
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   12b02:	3a04      	subs	r2, #4
   12b04:	8002      	strh	r2, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
   12b06:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   12b08:	4632      	mov	r2, r6
   12b0a:	4621      	mov	r1, r4
   12b0c:	4628      	mov	r0, r5
}
   12b0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   12b12:	f7f3 bb8d 	b.w	6230 <bt_conn_send_cb>

00012b16 <l2cap_chan_le_send_sdu>:
{
   12b16:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	total_len = net_buf_frags_len(*buf) + sent;
   12b1a:	680c      	ldr	r4, [r1, #0]
{
   12b1c:	4607      	mov	r7, r0
	total_len = net_buf_frags_len(*buf) + sent;
   12b1e:	4620      	mov	r0, r4
{
   12b20:	4616      	mov	r6, r2
   12b22:	4688      	mov	r8, r1
	total_len = net_buf_frags_len(*buf) + sent;
   12b24:	f7ff feb7 	bl	12896 <net_buf_frags_len>
	if (total_len > ch->tx.mtu) {
   12b28:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
	total_len = net_buf_frags_len(*buf) + sent;
   12b2c:	eb06 0900 	add.w	r9, r6, r0
	if (total_len > ch->tx.mtu) {
   12b30:	454b      	cmp	r3, r9
   12b32:	db2e      	blt.n	12b92 <l2cap_chan_le_send_sdu+0x7c>
	if (!frag->len && frag->frags) {
   12b34:	89a3      	ldrh	r3, [r4, #12]
   12b36:	b91b      	cbnz	r3, 12b40 <l2cap_chan_le_send_sdu+0x2a>
   12b38:	6823      	ldr	r3, [r4, #0]
   12b3a:	2b00      	cmp	r3, #0
   12b3c:	bf18      	it	ne
   12b3e:	461c      	movne	r4, r3
	if (!sent) {
   12b40:	b986      	cbnz	r6, 12b64 <l2cap_chan_le_send_sdu+0x4e>
		ret = l2cap_chan_le_send(ch, frag, BT_L2CAP_SDU_HDR_LEN);
   12b42:	2202      	movs	r2, #2
   12b44:	4621      	mov	r1, r4
   12b46:	4638      	mov	r0, r7
   12b48:	f7f4 f832 	bl	6bb0 <l2cap_chan_le_send>
		if (ret < 0) {
   12b4c:	1e05      	subs	r5, r0, #0
   12b4e:	da08      	bge.n	12b62 <l2cap_chan_le_send_sdu+0x4c>
			if (ret == -EAGAIN) {
   12b50:	f115 0f0b 	cmn.w	r5, #11
				data_sent(frag)->len = sent;
   12b54:	bf08      	it	eq
   12b56:	82a6      	strheq	r6, [r4, #20]
			*buf = frag;
   12b58:	f8c8 4000 	str.w	r4, [r8]
}
   12b5c:	4628      	mov	r0, r5
   12b5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		sent = ret;
   12b62:	b2ae      	uxth	r6, r5
	if (!frag->len && frag->frags) {
   12b64:	2500      	movs	r5, #0
	for (ret = 0; sent < total_len; sent += ret) {
   12b66:	454e      	cmp	r6, r9
   12b68:	db03      	blt.n	12b72 <l2cap_chan_le_send_sdu+0x5c>
	net_buf_unref(frag);
   12b6a:	4620      	mov	r0, r4
   12b6c:	f7f8 ff82 	bl	ba74 <net_buf_unref>
	return ret;
   12b70:	e7f4      	b.n	12b5c <l2cap_chan_le_send_sdu+0x46>
		if (!frag->len) {
   12b72:	89a0      	ldrh	r0, [r4, #12]
   12b74:	b918      	cbnz	r0, 12b7e <l2cap_chan_le_send_sdu+0x68>
			frag = net_buf_frag_del(NULL, frag);
   12b76:	4621      	mov	r1, r4
   12b78:	f7f9 f848 	bl	bc0c <net_buf_frag_del>
   12b7c:	4604      	mov	r4, r0
		ret = l2cap_chan_le_send(ch, frag, 0);
   12b7e:	2200      	movs	r2, #0
   12b80:	4621      	mov	r1, r4
   12b82:	4638      	mov	r0, r7
   12b84:	f7f4 f814 	bl	6bb0 <l2cap_chan_le_send>
		if (ret < 0) {
   12b88:	1e05      	subs	r5, r0, #0
   12b8a:	dbe1      	blt.n	12b50 <l2cap_chan_le_send_sdu+0x3a>
	for (ret = 0; sent < total_len; sent += ret) {
   12b8c:	442e      	add	r6, r5
   12b8e:	b2b6      	uxth	r6, r6
   12b90:	e7e9      	b.n	12b66 <l2cap_chan_le_send_sdu+0x50>
		return -EMSGSIZE;
   12b92:	f06f 0523 	mvn.w	r5, #35	; 0x23
   12b96:	e7e1      	b.n	12b5c <l2cap_chan_le_send_sdu+0x46>

00012b98 <l2cap_chan_tx_process>:
{
   12b98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12b9a:	4604      	mov	r4, r0
		ch->tx_buf = NULL;
   12b9c:	2700      	movs	r7, #0
	ch = CONTAINER_OF(work, struct bt_l2cap_le_chan, tx_work);
   12b9e:	f1a0 0574 	sub.w	r5, r0, #116	; 0x74
	return net_buf_get(&ch->tx_queue, K_NO_WAIT);
   12ba2:	f1a0 0620 	sub.w	r6, r0, #32
	if (ch->tx_buf) {
   12ba6:	f854 0c04 	ldr.w	r0, [r4, #-4]
   12baa:	b188      	cbz	r0, 12bd0 <l2cap_chan_tx_process+0x38>
		ch->tx_buf = NULL;
   12bac:	f844 7c04 	str.w	r7, [r4, #-4]
	while ((buf = l2cap_chan_le_get_tx_buf(ch))) {
   12bb0:	9001      	str	r0, [sp, #4]
   12bb2:	b158      	cbz	r0, 12bcc <l2cap_chan_tx_process+0x34>
		sent = l2cap_chan_le_send_sdu(ch, &buf, sent);
   12bb4:	8a82      	ldrh	r2, [r0, #20]
   12bb6:	a901      	add	r1, sp, #4
   12bb8:	4628      	mov	r0, r5
   12bba:	f7ff ffac 	bl	12b16 <l2cap_chan_le_send_sdu>
		if (sent < 0) {
   12bbe:	2800      	cmp	r0, #0
   12bc0:	daf1      	bge.n	12ba6 <l2cap_chan_tx_process+0xe>
			if (sent == -EAGAIN) {
   12bc2:	300b      	adds	r0, #11
   12bc4:	d102      	bne.n	12bcc <l2cap_chan_tx_process+0x34>
				ch->tx_buf = buf;
   12bc6:	9b01      	ldr	r3, [sp, #4]
   12bc8:	f844 3c04 	str.w	r3, [r4, #-4]
}
   12bcc:	b003      	add	sp, #12
   12bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_get(&ch->tx_queue, K_NO_WAIT);
   12bd0:	2200      	movs	r2, #0
   12bd2:	2300      	movs	r3, #0
   12bd4:	4630      	mov	r0, r6
   12bd6:	f7f8 febb 	bl	b950 <net_buf_get>
   12bda:	e7e9      	b.n	12bb0 <l2cap_chan_tx_process+0x18>

00012bdc <bt_l2cap_send.constprop.0>:
   12bdc:	2300      	movs	r3, #0
static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
   12bde:	b507      	push	{r0, r1, r2, lr}
   12be0:	460a      	mov	r2, r1
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   12be2:	9300      	str	r3, [sp, #0]
   12be4:	2105      	movs	r1, #5
   12be6:	f7ff ff7d 	bl	12ae4 <bt_l2cap_send_cb>
}
   12bea:	b003      	add	sp, #12
   12bec:	f85d fb04 	ldr.w	pc, [sp], #4

00012bf0 <bt_l2cap_security_changed>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   12bf0:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   12bf2:	b570      	push	{r4, r5, r6, lr}
   12bf4:	460e      	mov	r6, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   12bf6:	b353      	cbz	r3, 12c4e <bt_l2cap_security_changed+0x5e>
   12bf8:	f1b3 0508 	subs.w	r5, r3, #8
   12bfc:	d027      	beq.n	12c4e <bt_l2cap_security_changed+0x5e>
   12bfe:	681c      	ldr	r4, [r3, #0]
   12c00:	b104      	cbz	r4, 12c04 <bt_l2cap_security_changed+0x14>
   12c02:	3c08      	subs	r4, #8
	if (chan->state != BT_L2CAP_CONNECT || chan->ident) {
   12c04:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
   12c08:	2b01      	cmp	r3, #1
   12c0a:	d10a      	bne.n	12c22 <bt_l2cap_security_changed+0x32>
   12c0c:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   12c10:	b93b      	cbnz	r3, 12c22 <bt_l2cap_security_changed+0x32>
	if (status) {
   12c12:	b1b6      	cbz	r6, 12c42 <bt_l2cap_security_changed+0x52>
	bt_l2cap_chan_remove(chan->conn, chan);
   12c14:	6828      	ldr	r0, [r5, #0]
   12c16:	4629      	mov	r1, r5
   12c18:	f7ff ff1d 	bl	12a56 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(chan);
   12c1c:	4628      	mov	r0, r5
   12c1e:	f7ff ff33 	bl	12a88 <bt_l2cap_chan_del>
		if (chan->ops->encrypt_change) {
   12c22:	686b      	ldr	r3, [r5, #4]
   12c24:	689b      	ldr	r3, [r3, #8]
   12c26:	b113      	cbz	r3, 12c2e <bt_l2cap_security_changed+0x3e>
			chan->ops->encrypt_change(chan, hci_status);
   12c28:	4631      	mov	r1, r6
   12c2a:	4628      	mov	r0, r5
   12c2c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   12c2e:	b174      	cbz	r4, 12c4e <bt_l2cap_security_changed+0x5e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   12c30:	f114 0308 	adds.w	r3, r4, #8
   12c34:	d002      	beq.n	12c3c <bt_l2cap_security_changed+0x4c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12c36:	68a3      	ldr	r3, [r4, #8]
   12c38:	b103      	cbz	r3, 12c3c <bt_l2cap_security_changed+0x4c>
   12c3a:	3b08      	subs	r3, #8
{
   12c3c:	4625      	mov	r5, r4
   12c3e:	461c      	mov	r4, r3
   12c40:	e7e0      	b.n	12c04 <bt_l2cap_security_changed+0x14>
	err = l2cap_le_conn_req(BT_L2CAP_LE_CHAN(chan));
   12c42:	4628      	mov	r0, r5
   12c44:	f7f4 f888 	bl	6d58 <l2cap_le_conn_req>
	if (err) {
   12c48:	2800      	cmp	r0, #0
   12c4a:	d0ea      	beq.n	12c22 <bt_l2cap_security_changed+0x32>
   12c4c:	e7e2      	b.n	12c14 <bt_l2cap_security_changed+0x24>
}
   12c4e:	bd70      	pop	{r4, r5, r6, pc}

00012c50 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   12c50:	6d00      	ldr	r0, [r0, #80]	; 0x50
   12c52:	b160      	cbz	r0, 12c6e <bt_l2cap_le_lookup_tx_cid+0x1e>
   12c54:	3808      	subs	r0, #8
   12c56:	b900      	cbnz	r0, 12c5a <bt_l2cap_le_lookup_tx_cid+0xa>
   12c58:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   12c5a:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   12c5e:	428b      	cmp	r3, r1
   12c60:	d005      	beq.n	12c6e <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   12c62:	f110 0308 	adds.w	r3, r0, #8
   12c66:	d001      	beq.n	12c6c <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12c68:	6880      	ldr	r0, [r0, #8]
   12c6a:	e7f2      	b.n	12c52 <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   12c6c:	4618      	mov	r0, r3
}
   12c6e:	4770      	bx	lr

00012c70 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   12c70:	6d00      	ldr	r0, [r0, #80]	; 0x50
   12c72:	b158      	cbz	r0, 12c8c <bt_l2cap_le_lookup_rx_cid+0x1c>
   12c74:	3808      	subs	r0, #8
   12c76:	b900      	cbnz	r0, 12c7a <bt_l2cap_le_lookup_rx_cid+0xa>
   12c78:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   12c7a:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
   12c7c:	428b      	cmp	r3, r1
   12c7e:	d005      	beq.n	12c8c <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   12c80:	f110 0308 	adds.w	r3, r0, #8
   12c84:	d001      	beq.n	12c8a <bt_l2cap_le_lookup_rx_cid+0x1a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12c86:	6880      	ldr	r0, [r0, #8]
   12c88:	e7f3      	b.n	12c72 <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   12c8a:	4618      	mov	r0, r3
}
   12c8c:	4770      	bx	lr

00012c8e <bt_l2cap_update_conn_param>:
{
   12c8e:	b570      	push	{r4, r5, r6, lr}
   12c90:	460c      	mov	r4, r1
   12c92:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   12c94:	f7f3 feea 	bl	6a6c <get_ident>
   12c98:	2208      	movs	r2, #8
   12c9a:	4601      	mov	r1, r0
   12c9c:	2012      	movs	r0, #18
   12c9e:	f7f3 ff1b 	bl	6ad8 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   12ca2:	4605      	mov	r5, r0
   12ca4:	b188      	cbz	r0, 12cca <bt_l2cap_update_conn_param+0x3c>
	req = net_buf_add(buf, sizeof(*req));
   12ca6:	2108      	movs	r1, #8
   12ca8:	4408      	add	r0, r1
   12caa:	f7f9 f855 	bl	bd58 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   12cae:	8822      	ldrh	r2, [r4, #0]
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
   12cb0:	4629      	mov	r1, r5
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   12cb2:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   12cb4:	8862      	ldrh	r2, [r4, #2]
   12cb6:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   12cb8:	88a2      	ldrh	r2, [r4, #4]
   12cba:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   12cbc:	88e2      	ldrh	r2, [r4, #6]
   12cbe:	80c2      	strh	r2, [r0, #6]
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
   12cc0:	4630      	mov	r0, r6
   12cc2:	f7ff ff8b 	bl	12bdc <bt_l2cap_send.constprop.0>
	return 0;
   12cc6:	2000      	movs	r0, #0
}
   12cc8:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   12cca:	f06f 000b 	mvn.w	r0, #11
   12cce:	e7fb      	b.n	12cc8 <bt_l2cap_update_conn_param+0x3a>

00012cd0 <bt_l2cap_init>:
}
   12cd0:	4770      	bx	lr

00012cd2 <att_op_get_type>:
	switch (op) {
   12cd2:	281e      	cmp	r0, #30
   12cd4:	d816      	bhi.n	12d04 <att_op_get_type+0x32>
   12cd6:	b308      	cbz	r0, 12d1c <att_op_get_type+0x4a>
   12cd8:	1e43      	subs	r3, r0, #1
   12cda:	2b1d      	cmp	r3, #29
   12cdc:	d81e      	bhi.n	12d1c <att_op_get_type+0x4a>
   12cde:	e8df f003 	tbb	[pc, r3]
   12ce2:	2317      	.short	0x2317
   12ce4:	23172317 	.word	0x23172317
   12ce8:	23172317 	.word	0x23172317
   12cec:	23172317 	.word	0x23172317
   12cf0:	23172317 	.word	0x23172317
   12cf4:	231d1d17 	.word	0x231d1d17
   12cf8:	1d172317 	.word	0x1d172317
   12cfc:	0f1b1d19 	.word	0x0f1b1d19
   12d00:	2004      	movs	r0, #4
   12d02:	4770      	bx	lr
   12d04:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   12d08:	2b52      	cmp	r3, #82	; 0x52
   12d0a:	d107      	bne.n	12d1c <att_op_get_type+0x4a>
		return ATT_COMMAND;
   12d0c:	2000      	movs	r0, #0
}
   12d0e:	4770      	bx	lr
		return ATT_RESPONSE;
   12d10:	2002      	movs	r0, #2
   12d12:	4770      	bx	lr
		return ATT_NOTIFICATION;
   12d14:	2003      	movs	r0, #3
   12d16:	4770      	bx	lr
		return ATT_INDICATION;
   12d18:	2005      	movs	r0, #5
   12d1a:	4770      	bx	lr
		return ATT_COMMAND;
   12d1c:	f010 0f40 	tst.w	r0, #64	; 0x40
   12d20:	bf0c      	ite	eq
   12d22:	2006      	moveq	r0, #6
   12d24:	2000      	movne	r0, #0
   12d26:	4770      	bx	lr
		return ATT_REQUEST;
   12d28:	2001      	movs	r0, #1
   12d2a:	4770      	bx	lr

00012d2c <att_notify>:
{
   12d2c:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
   12d2e:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
   12d30:	f101 0008 	add.w	r0, r1, #8
{
   12d34:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
   12d36:	f001 f961 	bl	13ffc <net_buf_simple_pull_le16>
	bt_gatt_notification(conn, handle, buf->data, buf->len);
   12d3a:	89a3      	ldrh	r3, [r4, #12]
	handle = net_buf_pull_le16(buf);
   12d3c:	4601      	mov	r1, r0
	bt_gatt_notification(conn, handle, buf->data, buf->len);
   12d3e:	68a2      	ldr	r2, [r4, #8]
   12d40:	4628      	mov	r0, r5
   12d42:	f000 fd32 	bl	137aa <bt_gatt_notification>
}
   12d46:	2000      	movs	r0, #0
   12d48:	bd38      	pop	{r3, r4, r5, pc}

00012d4a <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(u16_t start_handle, u16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   12d4a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   12d4c:	e9cd 2301 	strd	r2, r3, [sp, #4]
   12d50:	2300      	movs	r3, #0
   12d52:	461a      	mov	r2, r3
   12d54:	9300      	str	r3, [sp, #0]
   12d56:	f7f6 fae7 	bl	9328 <bt_gatt_foreach_attr_type>
				  user_data);
}
   12d5a:	b005      	add	sp, #20
   12d5c:	f85d fb04 	ldr.w	pc, [sp], #4

00012d60 <find_info_cb>:
	if (!data->rsp) {
   12d60:	688b      	ldr	r3, [r1, #8]
{
   12d62:	b570      	push	{r4, r5, r6, lr}
   12d64:	4605      	mov	r5, r0
   12d66:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
   12d68:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
   12d6a:	b963      	cbnz	r3, 12d86 <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   12d6c:	6848      	ldr	r0, [r1, #4]
   12d6e:	2101      	movs	r1, #1
   12d70:	3008      	adds	r0, #8
   12d72:	f7f8 fff1 	bl	bd58 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   12d76:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   12d78:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   12d7a:	781b      	ldrb	r3, [r3, #0]
   12d7c:	2b00      	cmp	r3, #0
   12d7e:	bf0c      	ite	eq
   12d80:	2301      	moveq	r3, #1
   12d82:	2302      	movne	r3, #2
   12d84:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   12d86:	68a3      	ldr	r3, [r4, #8]
   12d88:	781b      	ldrb	r3, [r3, #0]
   12d8a:	2b01      	cmp	r3, #1
   12d8c:	d003      	beq.n	12d96 <find_info_cb+0x36>
   12d8e:	2b02      	cmp	r3, #2
   12d90:	d01a      	beq.n	12dc8 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   12d92:	2000      	movs	r0, #0
   12d94:	e017      	b.n	12dc6 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   12d96:	682b      	ldr	r3, [r5, #0]
   12d98:	781b      	ldrb	r3, [r3, #0]
   12d9a:	2b00      	cmp	r3, #0
   12d9c:	d1f9      	bne.n	12d92 <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   12d9e:	6860      	ldr	r0, [r4, #4]
   12da0:	2104      	movs	r1, #4
   12da2:	3008      	adds	r0, #8
   12da4:	f7f8 ffd8 	bl	bd58 <net_buf_simple_add>
		data->info16->handle = sys_cpu_to_le16(attr->handle);
   12da8:	8a2b      	ldrh	r3, [r5, #16]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   12daa:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
   12dac:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   12dae:	682b      	ldr	r3, [r5, #0]
   12db0:	885b      	ldrh	r3, [r3, #2]
   12db2:	8043      	strh	r3, [r0, #2]
		if (att->chan.tx.mtu - data->buf->len >
   12db4:	6863      	ldr	r3, [r4, #4]
   12db6:	f8b6 004a 	ldrh.w	r0, [r6, #74]	; 0x4a
   12dba:	899b      	ldrh	r3, [r3, #12]
   12dbc:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   12dbe:	2804      	cmp	r0, #4
   12dc0:	bf94      	ite	ls
   12dc2:	2000      	movls	r0, #0
   12dc4:	2001      	movhi	r0, #1
}
   12dc6:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   12dc8:	682b      	ldr	r3, [r5, #0]
   12dca:	781b      	ldrb	r3, [r3, #0]
   12dcc:	2b02      	cmp	r3, #2
   12dce:	d1e0      	bne.n	12d92 <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   12dd0:	6860      	ldr	r0, [r4, #4]
   12dd2:	2112      	movs	r1, #18
   12dd4:	3008      	adds	r0, #8
   12dd6:	f7f8 ffbf 	bl	bd58 <net_buf_simple_add>
		data->info128->handle = sys_cpu_to_le16(attr->handle);
   12dda:	8a2b      	ldrh	r3, [r5, #16]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   12ddc:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   12dde:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   12de0:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(attr->handle);
   12de2:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   12de6:	3101      	adds	r1, #1
   12de8:	f7ff f9b9 	bl	1215e <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
   12dec:	6863      	ldr	r3, [r4, #4]
   12dee:	f8b6 004a 	ldrh.w	r0, [r6, #74]	; 0x4a
   12df2:	899b      	ldrh	r3, [r3, #12]
   12df4:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   12df6:	2812      	cmp	r0, #18
   12df8:	e7e2      	b.n	12dc0 <find_info_cb+0x60>

00012dfa <read_group_cb>:
{
   12dfa:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   12dfe:	f04f 0800 	mov.w	r8, #0
   12e02:	f44f 5320 	mov.w	r3, #10240	; 0x2800
	struct bt_att *att = data->att;
   12e06:	680e      	ldr	r6, [r1, #0]
{
   12e08:	4605      	mov	r5, r0
   12e0a:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   12e0c:	6800      	ldr	r0, [r0, #0]
   12e0e:	a902      	add	r1, sp, #8
	struct bt_conn *conn = att->chan.chan.conn;
   12e10:	6837      	ldr	r7, [r6, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   12e12:	f88d 8008 	strb.w	r8, [sp, #8]
   12e16:	f8ad 300a 	strh.w	r3, [sp, #10]
   12e1a:	f7ff fa3b 	bl	12294 <bt_uuid_cmp>
   12e1e:	b198      	cbz	r0, 12e48 <read_group_cb+0x4e>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   12e20:	f642 0301 	movw	r3, #10241	; 0x2801
   12e24:	6828      	ldr	r0, [r5, #0]
   12e26:	a903      	add	r1, sp, #12
   12e28:	f88d 800c 	strb.w	r8, [sp, #12]
   12e2c:	f8ad 300e 	strh.w	r3, [sp, #14]
   12e30:	f7ff fa30 	bl	12294 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   12e34:	b140      	cbz	r0, 12e48 <read_group_cb+0x4e>
		if (data->group &&
   12e36:	6923      	ldr	r3, [r4, #16]
   12e38:	b123      	cbz	r3, 12e44 <read_group_cb+0x4a>
		    attr->handle > sys_le16_to_cpu(data->group->end_handle)) {
   12e3a:	8a2a      	ldrh	r2, [r5, #16]
		if (data->group &&
   12e3c:	8859      	ldrh	r1, [r3, #2]
   12e3e:	4291      	cmp	r1, r2
   12e40:	d200      	bcs.n	12e44 <read_group_cb+0x4a>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
   12e42:	805a      	strh	r2, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   12e44:	2001      	movs	r0, #1
   12e46:	e012      	b.n	12e6e <read_group_cb+0x74>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   12e48:	6861      	ldr	r1, [r4, #4]
   12e4a:	6828      	ldr	r0, [r5, #0]
   12e4c:	f7ff fa22 	bl	12294 <bt_uuid_cmp>
   12e50:	b110      	cbz	r0, 12e58 <read_group_cb+0x5e>
		data->group = NULL;
   12e52:	2300      	movs	r3, #0
   12e54:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   12e56:	e7f5      	b.n	12e44 <read_group_cb+0x4a>
	if (data->rsp->len &&
   12e58:	68e3      	ldr	r3, [r4, #12]
   12e5a:	68a0      	ldr	r0, [r4, #8]
   12e5c:	781a      	ldrb	r2, [r3, #0]
   12e5e:	b14a      	cbz	r2, 12e74 <read_group_cb+0x7a>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
   12e60:	f8b6 304a 	ldrh.w	r3, [r6, #74]	; 0x4a
   12e64:	8981      	ldrh	r1, [r0, #12]
   12e66:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   12e68:	4293      	cmp	r3, r2
   12e6a:	da03      	bge.n	12e74 <read_group_cb+0x7a>
		return BT_GATT_ITER_STOP;
   12e6c:	2000      	movs	r0, #0
}
   12e6e:	b004      	add	sp, #16
   12e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   12e74:	2104      	movs	r1, #4
   12e76:	3008      	adds	r0, #8
   12e78:	f7f8 ff6e 	bl	bd58 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
   12e7c:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   12e7e:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
   12e80:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
   12e82:	8043      	strh	r3, [r0, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   12e84:	f8b6 304a 	ldrh.w	r3, [r6, #74]	; 0x4a
   12e88:	2600      	movs	r6, #0
   12e8a:	68a1      	ldr	r1, [r4, #8]
   12e8c:	4638      	mov	r0, r7
   12e8e:	898a      	ldrh	r2, [r1, #12]
   12e90:	6889      	ldr	r1, [r1, #8]
   12e92:	1a9b      	subs	r3, r3, r2
   12e94:	9600      	str	r6, [sp, #0]
   12e96:	440a      	add	r2, r1
   12e98:	f8d5 8004 	ldr.w	r8, [r5, #4]
   12e9c:	4629      	mov	r1, r5
   12e9e:	b29b      	uxth	r3, r3
   12ea0:	47c0      	blx	r8
	if (read < 0) {
   12ea2:	1e01      	subs	r1, r0, #0
   12ea4:	dbe2      	blt.n	12e6c <read_group_cb+0x72>
	if (!data->rsp->len) {
   12ea6:	68e5      	ldr	r5, [r4, #12]
   12ea8:	68a0      	ldr	r0, [r4, #8]
   12eaa:	782a      	ldrb	r2, [r5, #0]
   12eac:	1d0b      	adds	r3, r1, #4
   12eae:	b922      	cbnz	r2, 12eba <read_group_cb+0xc0>
		data->rsp->len = read + sizeof(*data->group);
   12eb0:	702b      	strb	r3, [r5, #0]
	net_buf_add(data->buf, read);
   12eb2:	3008      	adds	r0, #8
   12eb4:	f7f8 ff50 	bl	bd58 <net_buf_simple_add>
   12eb8:	e7c4      	b.n	12e44 <read_group_cb+0x4a>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   12eba:	429a      	cmp	r2, r3
   12ebc:	d0f9      	beq.n	12eb2 <read_group_cb+0xb8>
		data->buf->len -= sizeof(*data->group);
   12ebe:	8983      	ldrh	r3, [r0, #12]
   12ec0:	3b04      	subs	r3, #4
   12ec2:	8183      	strh	r3, [r0, #12]
		return false;
   12ec4:	e7d2      	b.n	12e6c <read_group_cb+0x72>

00012ec6 <read_type_cb>:
{
   12ec6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att *att = data->att;
   12eca:	f8d1 8000 	ldr.w	r8, [r1]
{
   12ece:	4606      	mov	r6, r0
   12ed0:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   12ed2:	6800      	ldr	r0, [r0, #0]
   12ed4:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = att->chan.chan.conn;
   12ed6:	f8d8 9000 	ldr.w	r9, [r8]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   12eda:	f7ff f9db 	bl	12294 <bt_uuid_cmp>
   12ede:	4607      	mov	r7, r0
   12ee0:	2800      	cmp	r0, #0
   12ee2:	d14a      	bne.n	12f7a <read_type_cb+0xb4>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   12ee4:	2215      	movs	r2, #21
   12ee6:	4631      	mov	r1, r6
   12ee8:	4648      	mov	r0, r9
   12eea:	f000 fc33 	bl	13754 <bt_gatt_check_perm>
   12eee:	4604      	mov	r4, r0
   12ef0:	7528      	strb	r0, [r5, #20]
	if (data->err) {
   12ef2:	b140      	cbz	r0, 12f06 <read_type_cb+0x40>
		if (data->rsp->len) {
   12ef4:	68eb      	ldr	r3, [r5, #12]
   12ef6:	781c      	ldrb	r4, [r3, #0]
   12ef8:	b10c      	cbz	r4, 12efe <read_type_cb+0x38>
		return BT_GATT_ITER_STOP;
   12efa:	463c      	mov	r4, r7
			data->err = 0x00;
   12efc:	752f      	strb	r7, [r5, #20]
}
   12efe:	4620      	mov	r0, r4
   12f00:	b003      	add	sp, #12
   12f02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(data->buf, sizeof(*data->item));
   12f06:	68a8      	ldr	r0, [r5, #8]
   12f08:	2102      	movs	r1, #2
   12f0a:	3008      	adds	r0, #8
   12f0c:	f7f8 ff24 	bl	bd58 <net_buf_simple_add>
	data->item->handle = sys_cpu_to_le16(attr->handle);
   12f10:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   12f12:	68a9      	ldr	r1, [r5, #8]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
   12f14:	6128      	str	r0, [r5, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   12f16:	898a      	ldrh	r2, [r1, #12]
	data->item->handle = sys_cpu_to_le16(attr->handle);
   12f18:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   12f1a:	f8b8 304a 	ldrh.w	r3, [r8, #74]	; 0x4a
   12f1e:	6889      	ldr	r1, [r1, #8]
   12f20:	1a9b      	subs	r3, r3, r2
   12f22:	9400      	str	r4, [sp, #0]
   12f24:	440a      	add	r2, r1
   12f26:	4648      	mov	r0, r9
   12f28:	4631      	mov	r1, r6
   12f2a:	6877      	ldr	r7, [r6, #4]
   12f2c:	b29b      	uxth	r3, r3
   12f2e:	47b8      	blx	r7
	if (read < 0) {
   12f30:	1e01      	subs	r1, r0, #0
   12f32:	da07      	bge.n	12f44 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   12f34:	f111 0fff 	cmn.w	r1, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   12f38:	bf32      	itee	cc
   12f3a:	210e      	movcc	r1, #14
		return -err;
   12f3c:	4249      	negcs	r1, r1
   12f3e:	b2c9      	uxtbcs	r1, r1
		data->err = err_to_att(read);
   12f40:	7529      	strb	r1, [r5, #20]
		return BT_GATT_ITER_STOP;
   12f42:	e7dc      	b.n	12efe <read_type_cb+0x38>
	if (!data->rsp->len) {
   12f44:	68ee      	ldr	r6, [r5, #12]
   12f46:	68a8      	ldr	r0, [r5, #8]
   12f48:	7832      	ldrb	r2, [r6, #0]
   12f4a:	1c8b      	adds	r3, r1, #2
   12f4c:	b97a      	cbnz	r2, 12f6e <read_type_cb+0xa8>
		data->rsp->len = read + sizeof(*data->item);
   12f4e:	7033      	strb	r3, [r6, #0]
	net_buf_add(data->buf, read);
   12f50:	3008      	adds	r0, #8
   12f52:	f7f8 ff01 	bl	bd58 <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
   12f56:	68ab      	ldr	r3, [r5, #8]
   12f58:	f8b8 404a 	ldrh.w	r4, [r8, #74]	; 0x4a
   12f5c:	8998      	ldrh	r0, [r3, #12]
   12f5e:	68eb      	ldr	r3, [r5, #12]
   12f60:	1a24      	subs	r4, r4, r0
   12f62:	7818      	ldrb	r0, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   12f64:	4284      	cmp	r4, r0
   12f66:	bfd4      	ite	le
   12f68:	2400      	movle	r4, #0
   12f6a:	2401      	movgt	r4, #1
   12f6c:	e7c7      	b.n	12efe <read_type_cb+0x38>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   12f6e:	429a      	cmp	r2, r3
   12f70:	d0ee      	beq.n	12f50 <read_type_cb+0x8a>
		data->buf->len -= sizeof(*data->item);
   12f72:	8983      	ldrh	r3, [r0, #12]
   12f74:	3b02      	subs	r3, #2
   12f76:	8183      	strh	r3, [r0, #12]
		return BT_GATT_ITER_STOP;
   12f78:	e7c1      	b.n	12efe <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   12f7a:	2401      	movs	r4, #1
   12f7c:	e7bf      	b.n	12efe <read_type_cb+0x38>

00012f7e <att_pdu_sent>:
{
   12f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12f82:	4607      	mov	r7, r0
	struct bt_att *att = att_get(conn);
   12f84:	f7f4 fc76 	bl	7874 <att_get>
   12f88:	4605      	mov	r5, r0
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   12f8a:	f100 08f8 	add.w	r8, r0, #248	; 0xf8
   12f8e:	2200      	movs	r2, #0
   12f90:	2300      	movs	r3, #0
   12f92:	4640      	mov	r0, r8
   12f94:	f7f8 fcdc 	bl	b950 <net_buf_get>
   12f98:	4604      	mov	r4, r0
   12f9a:	b928      	cbnz	r0, 12fa8 <att_pdu_sent+0x2a>
	z_impl_k_sem_give(sem);
   12f9c:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
}
   12fa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   12fa4:	f7fc bc90 	b.w	f8c8 <z_impl_k_sem_give>
		if (att->req && att->req->buf == buf) {
   12fa8:	f8d5 60b4 	ldr.w	r6, [r5, #180]	; 0xb4
   12fac:	b14e      	cbz	r6, 12fc2 <att_pdu_sent+0x44>
   12fae:	6933      	ldr	r3, [r6, #16]
   12fb0:	42a3      	cmp	r3, r4
   12fb2:	d106      	bne.n	12fc2 <att_pdu_sent+0x44>
	state->offset = net_buf_simple_headroom(buf);
   12fb4:	f104 0008 	add.w	r0, r4, #8
   12fb8:	f001 f828 	bl	1400c <net_buf_simple_headroom>
	state->len = buf->len;
   12fbc:	89a3      	ldrh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   12fbe:	81b0      	strh	r0, [r6, #12]
	state->len = buf->len;
   12fc0:	81f3      	strh	r3, [r6, #14]
		if (!att_send(conn, buf, NULL, NULL)) {
   12fc2:	2300      	movs	r3, #0
   12fc4:	4621      	mov	r1, r4
   12fc6:	461a      	mov	r2, r3
   12fc8:	4638      	mov	r0, r7
   12fca:	f7f4 fc29 	bl	7820 <att_send>
   12fce:	2800      	cmp	r0, #0
   12fd0:	d1dd      	bne.n	12f8e <att_pdu_sent+0x10>
}
   12fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00012fd6 <att_cfm_sent>:
{
   12fd6:	b538      	push	{r3, r4, r5, lr}
   12fd8:	4604      	mov	r4, r0
   12fda:	460d      	mov	r5, r1
	struct bt_att *att = att_get(conn);
   12fdc:	f7f4 fc4a 	bl	7874 <att_get>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12fe0:	f100 03b0 	add.w	r3, r0, #176	; 0xb0
   12fe4:	e8d3 2fef 	ldaex	r2, [r3]
   12fe8:	f022 0202 	bic.w	r2, r2, #2
   12fec:	e8c3 2fe1 	stlex	r1, r2, [r3]
   12ff0:	2900      	cmp	r1, #0
   12ff2:	d1f7      	bne.n	12fe4 <att_cfm_sent+0xe>
	att_pdu_sent(conn, user_data);
   12ff4:	4629      	mov	r1, r5
   12ff6:	4620      	mov	r0, r4
}
   12ff8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	att_pdu_sent(conn, user_data);
   12ffc:	f7ff bfbf 	b.w	12f7e <att_pdu_sent>

00013000 <att_rsp_sent>:
{
   13000:	b538      	push	{r3, r4, r5, lr}
   13002:	4604      	mov	r4, r0
   13004:	460d      	mov	r5, r1
	struct bt_att *att = att_get(conn);
   13006:	f7f4 fc35 	bl	7874 <att_get>
   1300a:	f100 03b0 	add.w	r3, r0, #176	; 0xb0
   1300e:	e8d3 2fef 	ldaex	r2, [r3]
   13012:	f022 0201 	bic.w	r2, r2, #1
   13016:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1301a:	2900      	cmp	r1, #0
   1301c:	d1f7      	bne.n	1300e <att_rsp_sent+0xe>
	att_pdu_sent(conn, user_data);
   1301e:	4629      	mov	r1, r5
   13020:	4620      	mov	r0, r4
}
   13022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	att_pdu_sent(conn, user_data);
   13026:	f7ff bfaa 	b.w	12f7e <att_pdu_sent>

0001302a <write_cb>:
{
   1302a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1302c:	460c      	mov	r4, r1
   1302e:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   13030:	4601      	mov	r1, r0
   13032:	222a      	movs	r2, #42	; 0x2a
   13034:	6820      	ldr	r0, [r4, #0]
   13036:	f000 fb8d 	bl	13754 <bt_gatt_check_perm>
   1303a:	4605      	mov	r5, r0
   1303c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1303e:	bb00      	cbnz	r0, 13082 <write_cb+0x58>
	if (!data->req) {
   13040:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   13042:	4631      	mov	r1, r6
	if (!data->req) {
   13044:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   13046:	bf14      	ite	ne
   13048:	2300      	movne	r3, #0
   1304a:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1304c:	9301      	str	r3, [sp, #4]
   1304e:	8a63      	ldrh	r3, [r4, #18]
   13050:	68b7      	ldr	r7, [r6, #8]
   13052:	9300      	str	r3, [sp, #0]
   13054:	68e2      	ldr	r2, [r4, #12]
   13056:	8a23      	ldrh	r3, [r4, #16]
   13058:	6820      	ldr	r0, [r4, #0]
   1305a:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1305c:	1e03      	subs	r3, r0, #0
   1305e:	db05      	blt.n	1306c <write_cb+0x42>
   13060:	8a22      	ldrh	r2, [r4, #16]
   13062:	4293      	cmp	r3, r2
   13064:	d10b      	bne.n	1307e <write_cb+0x54>
	data->err = 0U;
   13066:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   13068:	2501      	movs	r5, #1
   1306a:	e005      	b.n	13078 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   1306c:	f113 0fff 	cmn.w	r3, #255	; 0xff
   13070:	d305      	bcc.n	1307e <write_cb+0x54>
		return -err;
   13072:	425b      	negs	r3, r3
   13074:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   13076:	7523      	strb	r3, [r4, #20]
}
   13078:	4628      	mov	r0, r5
   1307a:	b003      	add	sp, #12
   1307c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   1307e:	230e      	movs	r3, #14
   13080:	e7f9      	b.n	13076 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   13082:	2500      	movs	r5, #0
   13084:	e7f8      	b.n	13078 <write_cb+0x4e>

00013086 <read_cb>:
{
   13086:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1308a:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1308c:	6888      	ldr	r0, [r1, #8]
	struct bt_att *att = data->att;
   1308e:	f8d1 9000 	ldr.w	r9, [r1]
{
   13092:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   13094:	3008      	adds	r0, #8
   13096:	2100      	movs	r1, #0
	struct bt_conn *conn = att->chan.chan.conn;
   13098:	f8d9 8000 	ldr.w	r8, [r9]
	data->err = 0x00;
   1309c:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1309e:	f7f8 fe5b 	bl	bd58 <net_buf_simple_add>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   130a2:	2215      	movs	r2, #21
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   130a4:	60e0      	str	r0, [r4, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   130a6:	4631      	mov	r1, r6
   130a8:	4640      	mov	r0, r8
	data->err = 0x00;
   130aa:	7427      	strb	r7, [r4, #16]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   130ac:	f000 fb52 	bl	13754 <bt_gatt_check_perm>
   130b0:	4605      	mov	r5, r0
   130b2:	7420      	strb	r0, [r4, #16]
	if (data->err) {
   130b4:	bb00      	cbnz	r0, 130f8 <read_cb+0x72>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   130b6:	68a1      	ldr	r1, [r4, #8]
   130b8:	f8b9 304a 	ldrh.w	r3, [r9, #74]	; 0x4a
   130bc:	898a      	ldrh	r2, [r1, #12]
   130be:	88a0      	ldrh	r0, [r4, #4]
   130c0:	6889      	ldr	r1, [r1, #8]
   130c2:	1a9b      	subs	r3, r3, r2
   130c4:	9000      	str	r0, [sp, #0]
   130c6:	440a      	add	r2, r1
   130c8:	4640      	mov	r0, r8
   130ca:	4631      	mov	r1, r6
   130cc:	6877      	ldr	r7, [r6, #4]
   130ce:	b29b      	uxth	r3, r3
   130d0:	47b8      	blx	r7
	if (read < 0) {
   130d2:	1e01      	subs	r1, r0, #0
   130d4:	da0a      	bge.n	130ec <read_cb+0x66>
	if (err < 0 && err >= -0xff) {
   130d6:	f111 0fff 	cmn.w	r1, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   130da:	bf32      	itee	cc
   130dc:	210e      	movcc	r1, #14
		return -err;
   130de:	4249      	negcs	r1, r1
   130e0:	b2c9      	uxtbcs	r1, r1
		data->err = err_to_att(read);
   130e2:	7421      	strb	r1, [r4, #16]
}
   130e4:	4628      	mov	r0, r5
   130e6:	b003      	add	sp, #12
   130e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_add(data->buf, read);
   130ec:	68a0      	ldr	r0, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   130ee:	2501      	movs	r5, #1
	net_buf_add(data->buf, read);
   130f0:	3008      	adds	r0, #8
   130f2:	f7f8 fe31 	bl	bd58 <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
   130f6:	e7f5      	b.n	130e4 <read_cb+0x5e>
		return BT_GATT_ITER_STOP;
   130f8:	463d      	mov	r5, r7
   130fa:	e7f3      	b.n	130e4 <read_cb+0x5e>

000130fc <att_write_cmd>:
{
   130fc:	b530      	push	{r4, r5, lr}
   130fe:	460c      	mov	r4, r1
   13100:	b085      	sub	sp, #20
	struct bt_conn *conn = att->chan.chan.conn;
   13102:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
   13104:	f101 0008 	add.w	r0, r1, #8
   13108:	f000 ff78 	bl	13ffc <net_buf_simple_pull_le16>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
   1310c:	89a2      	ldrh	r2, [r4, #12]
	handle = net_buf_pull_le16(buf);
   1310e:	4603      	mov	r3, r0
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
   13110:	9202      	str	r2, [sp, #8]
   13112:	68a2      	ldr	r2, [r4, #8]
   13114:	4628      	mov	r0, r5
   13116:	9201      	str	r2, [sp, #4]
   13118:	2200      	movs	r2, #0
   1311a:	4611      	mov	r1, r2
   1311c:	9200      	str	r2, [sp, #0]
   1311e:	f7f4 fe1b 	bl	7d58 <att_write_rsp>
}
   13122:	b005      	add	sp, #20
   13124:	bd30      	pop	{r4, r5, pc}

00013126 <att_write_req>:
{
   13126:	b530      	push	{r4, r5, lr}
   13128:	460c      	mov	r4, r1
   1312a:	b085      	sub	sp, #20
	struct bt_conn *conn = att->chan.chan.conn;
   1312c:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
   1312e:	f101 0008 	add.w	r0, r1, #8
   13132:	f000 ff63 	bl	13ffc <net_buf_simple_pull_le16>
	return att_write_rsp(conn, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   13136:	89a2      	ldrh	r2, [r4, #12]
	handle = net_buf_pull_le16(buf);
   13138:	4603      	mov	r3, r0
	return att_write_rsp(conn, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1313a:	9202      	str	r2, [sp, #8]
   1313c:	68a2      	ldr	r2, [r4, #8]
   1313e:	2112      	movs	r1, #18
   13140:	9201      	str	r2, [sp, #4]
   13142:	2200      	movs	r2, #0
   13144:	4628      	mov	r0, r5
   13146:	9200      	str	r2, [sp, #0]
   13148:	2213      	movs	r2, #19
   1314a:	f7f4 fe05 	bl	7d58 <att_write_rsp>
}
   1314e:	b005      	add	sp, #20
   13150:	bd30      	pop	{r4, r5, pc}

00013152 <att_read_blob_req>:
{
   13152:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   13154:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
   13156:	210c      	movs	r1, #12
   13158:	8813      	ldrh	r3, [r2, #0]
   1315a:	8852      	ldrh	r2, [r2, #2]
   1315c:	9200      	str	r2, [sp, #0]
   1315e:	220d      	movs	r2, #13
   13160:	f7f4 ffe2 	bl	8128 <att_read_rsp>
}
   13164:	b003      	add	sp, #12
   13166:	f85d fb04 	ldr.w	pc, [sp], #4

0001316a <att_read_req>:
{
   1316a:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1316c:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   1316e:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   13170:	210a      	movs	r1, #10
   13172:	881b      	ldrh	r3, [r3, #0]
   13174:	9200      	str	r2, [sp, #0]
   13176:	220b      	movs	r2, #11
   13178:	f7f4 ffd6 	bl	8128 <att_read_rsp>
}
   1317c:	b003      	add	sp, #12
   1317e:	f85d fb04 	ldr.w	pc, [sp], #4

00013182 <bt_att_init>:
	bt_gatt_init();
   13182:	f7f6 b859 	b.w	9238 <bt_gatt_init>

00013186 <att_req_destroy>:
{
   13186:	b510      	push	{r4, lr}
   13188:	4604      	mov	r4, r0
	if (req->buf) {
   1318a:	6900      	ldr	r0, [r0, #16]
   1318c:	b108      	cbz	r0, 13192 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   1318e:	f7f8 fc71 	bl	ba74 <net_buf_unref>
	if (req->destroy) {
   13192:	68a3      	ldr	r3, [r4, #8]
   13194:	b10b      	cbz	r3, 1319a <att_req_destroy+0x14>
		req->destroy(req);
   13196:	4620      	mov	r0, r4
   13198:	4798      	blx	r3
	bt_att_req_free(req);
   1319a:	4620      	mov	r0, r4
}
   1319c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   131a0:	f7f5 b93c 	b.w	841c <bt_att_req_free>

000131a4 <att_handle_find_info_rsp>:
	return att_handle_rsp(att, buf->data, buf->len, 0);
   131a4:	898a      	ldrh	r2, [r1, #12]
   131a6:	2300      	movs	r3, #0
   131a8:	6889      	ldr	r1, [r1, #8]
   131aa:	f7f5 b943 	b.w	8434 <att_handle_rsp>

000131ae <att_handle_find_type_rsp>:
   131ae:	f7ff bff9 	b.w	131a4 <att_handle_find_info_rsp>

000131b2 <att_handle_read_type_rsp>:
   131b2:	f7ff bff7 	b.w	131a4 <att_handle_find_info_rsp>

000131b6 <att_handle_read_rsp>:
   131b6:	f7ff bff5 	b.w	131a4 <att_handle_find_info_rsp>

000131ba <att_handle_read_blob_rsp>:
   131ba:	f7ff bff3 	b.w	131a4 <att_handle_find_info_rsp>

000131be <att_handle_read_mult_rsp>:
   131be:	f7ff bff1 	b.w	131a4 <att_handle_find_info_rsp>

000131c2 <att_handle_read_group_rsp>:
   131c2:	f7ff bfef 	b.w	131a4 <att_handle_find_info_rsp>

000131c6 <att_handle_write_rsp>:
   131c6:	f7ff bfed 	b.w	131a4 <att_handle_find_info_rsp>

000131ca <att_handle_prepare_write_rsp>:
   131ca:	f7ff bfeb 	b.w	131a4 <att_handle_find_info_rsp>

000131ce <att_handle_exec_write_rsp>:
   131ce:	f7ff bfe9 	b.w	131a4 <att_handle_find_info_rsp>

000131d2 <att_confirm>:
   131d2:	f7ff bfe7 	b.w	131a4 <att_handle_find_info_rsp>

000131d6 <att_mtu_rsp>:
{
   131d6:	b410      	push	{r4}
   131d8:	460c      	mov	r4, r1
	if (!att) {
   131da:	b190      	cbz	r0, 13202 <att_mtu_rsp+0x2c>
	rsp = (void *)buf->data;
   131dc:	6889      	ldr	r1, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
   131de:	880a      	ldrh	r2, [r1, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   131e0:	2a16      	cmp	r2, #22
   131e2:	d805      	bhi.n	131f0 <att_mtu_rsp+0x1a>
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   131e4:	2200      	movs	r2, #0
   131e6:	2304      	movs	r3, #4
   131e8:	4611      	mov	r1, r2
}
   131ea:	bc10      	pop	{r4}
	return att_handle_rsp(att, rsp, buf->len, 0);
   131ec:	f7f5 b922 	b.w	8434 <att_handle_rsp>
	att->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   131f0:	2af7      	cmp	r2, #247	; 0xf7
   131f2:	bf28      	it	cs
   131f4:	22f7      	movcs	r2, #247	; 0xf7
	return att_handle_rsp(att, rsp, buf->len, 0);
   131f6:	2300      	movs	r3, #0
	att->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   131f8:	87c2      	strh	r2, [r0, #62]	; 0x3e
	att->chan.tx.mtu = att->chan.rx.mtu;
   131fa:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
	return att_handle_rsp(att, rsp, buf->len, 0);
   131fe:	89a2      	ldrh	r2, [r4, #12]
   13200:	e7f3      	b.n	131ea <att_mtu_rsp+0x14>
}
   13202:	bc10      	pop	{r4}
   13204:	4770      	bx	lr

00013206 <att_reset>:
{
   13206:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13208:	4604      	mov	r4, r0
	while ((buf = k_fifo_get(&att->prep_queue, K_NO_WAIT))) {
   1320a:	f500 758a 	add.w	r5, r0, #276	; 0x114
	return z_impl_k_queue_get(queue, timeout);
   1320e:	2200      	movs	r2, #0
   13210:	2300      	movs	r3, #0
   13212:	4628      	mov	r0, r5
   13214:	f7fb f994 	bl	e540 <z_impl_k_queue_get>
   13218:	bb20      	cbnz	r0, 13264 <att_reset+0x5e>
	while ((buf = k_fifo_get(&att->tx_queue, K_NO_WAIT))) {
   1321a:	f104 05f8 	add.w	r5, r4, #248	; 0xf8
   1321e:	2200      	movs	r2, #0
   13220:	2300      	movs	r3, #0
   13222:	4628      	mov	r0, r5
   13224:	f7fb f98c 	bl	e540 <z_impl_k_queue_get>
   13228:	b9f8      	cbnz	r0, 1326a <att_reset+0x64>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1322a:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
   1322e:	e8d3 2fef 	ldaex	r2, [r3]
   13232:	f042 0204 	orr.w	r2, r2, #4
   13236:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1323a:	2900      	cmp	r1, #0
   1323c:	d1f7      	bne.n	1322e <att_reset+0x28>
   1323e:	250a      	movs	r5, #10
		k_sem_give(&att->tx_sem);
   13240:	f104 06e0 	add.w	r6, r4, #224	; 0xe0
	z_impl_k_sem_give(sem);
   13244:	4630      	mov	r0, r6
   13246:	f7fc fb3f 	bl	f8c8 <z_impl_k_sem_give>
	for (i = 0; i < CONFIG_BT_ATT_TX_MAX; i++) {
   1324a:	3d01      	subs	r5, #1
   1324c:	d1fa      	bne.n	13244 <att_reset+0x3e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   1324e:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
   13252:	b96d      	cbnz	r5, 13270 <att_reset+0x6a>
	list->head = NULL;
   13254:	2200      	movs	r2, #0
	if (!att->req) {
   13256:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
	list->tail = NULL;
   1325a:	e9c4 222e 	strd	r2, r2, [r4, #184]	; 0xb8
   1325e:	b9cb      	cbnz	r3, 13294 <att_reset+0x8e>
}
   13260:	b003      	add	sp, #12
   13262:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   13264:	f7f8 fc06 	bl	ba74 <net_buf_unref>
   13268:	e7d1      	b.n	1320e <att_reset+0x8>
		net_buf_unref(buf);
   1326a:	f7f8 fc03 	bl	ba74 <net_buf_unref>
   1326e:	e7d6      	b.n	1321e <att_reset+0x18>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   13270:	682e      	ldr	r6, [r5, #0]
		if (req->func) {
   13272:	686f      	ldr	r7, [r5, #4]
   13274:	b137      	cbz	r7, 13284 <att_reset+0x7e>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   13276:	69ab      	ldr	r3, [r5, #24]
   13278:	210e      	movs	r1, #14
   1327a:	9300      	str	r3, [sp, #0]
   1327c:	2300      	movs	r3, #0
   1327e:	461a      	mov	r2, r3
   13280:	4618      	mov	r0, r3
   13282:	47b8      	blx	r7
		att_req_destroy(req);
   13284:	4628      	mov	r0, r5
   13286:	f7ff ff7e 	bl	13186 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   1328a:	2e00      	cmp	r6, #0
   1328c:	d0e2      	beq.n	13254 <att_reset+0x4e>
   1328e:	4635      	mov	r5, r6
   13290:	6836      	ldr	r6, [r6, #0]
   13292:	e7ee      	b.n	13272 <att_reset+0x6c>
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
   13294:	230e      	movs	r3, #14
   13296:	4611      	mov	r1, r2
   13298:	4620      	mov	r0, r4
}
   1329a:	b003      	add	sp, #12
   1329c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
   132a0:	f7f5 b8c8 	b.w	8434 <att_handle_rsp>

000132a4 <bt_att_disconnected>:
{
   132a4:	b510      	push	{r4, lr}
   132a6:	4604      	mov	r4, r0
	att_reset(att);
   132a8:	f7ff ffad 	bl	13206 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   132ac:	6820      	ldr	r0, [r4, #0]
}
   132ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_disconnected(ch->chan.conn);
   132b2:	f7f6 bdc3 	b.w	9e3c <bt_gatt_disconnected>

000132b6 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   132b6:	6008      	str	r0, [r1, #0]
}
   132b8:	2000      	movs	r0, #0
   132ba:	4770      	bx	lr

000132bc <gatt_ccc_changed>:
{
   132bc:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   132be:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   132c0:	895a      	ldrh	r2, [r3, #10]
   132c2:	428a      	cmp	r2, r1
   132c4:	d003      	beq.n	132ce <gatt_ccc_changed+0x12>
		ccc->value = value;
   132c6:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   132c8:	68db      	ldr	r3, [r3, #12]
   132ca:	b103      	cbz	r3, 132ce <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   132cc:	4718      	bx	r3
}
   132ce:	4770      	bx	lr

000132d0 <gatt_indicate_rsp>:
{
   132d0:	b410      	push	{r4}
   132d2:	9b01      	ldr	r3, [sp, #4]
   132d4:	460a      	mov	r2, r1
	params->func(conn, params->attr, err);
   132d6:	e9d3 1401 	ldrd	r1, r4, [r3, #4]
   132da:	4623      	mov	r3, r4
}
   132dc:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
   132de:	4718      	bx	r3

000132e0 <gen_hash_m>:
{
   132e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   132e2:	6807      	ldr	r7, [r0, #0]
{
   132e4:	4605      	mov	r5, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   132e6:	783e      	ldrb	r6, [r7, #0]
{
   132e8:	460c      	mov	r4, r1
   132ea:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   132ec:	b10e      	cbz	r6, 132f2 <gen_hash_m+0x12>
	switch (u16->val) {
   132ee:	2601      	movs	r6, #1
   132f0:	e015      	b.n	1331e <gen_hash_m+0x3e>
   132f2:	887b      	ldrh	r3, [r7, #2]
   132f4:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   132f8:	d004      	beq.n	13304 <gen_hash_m+0x24>
   132fa:	d813      	bhi.n	13324 <gen_hash_m+0x44>
   132fc:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   13300:	2b03      	cmp	r3, #3
   13302:	d8f4      	bhi.n	132ee <gen_hash_m+0xe>
		value = sys_cpu_to_le16(attr->handle);
   13304:	8a2b      	ldrh	r3, [r5, #16]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   13306:	2202      	movs	r2, #2
   13308:	4620      	mov	r0, r4
   1330a:	f10d 010e 	add.w	r1, sp, #14
		value = sys_cpu_to_le16(attr->handle);
   1330e:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   13312:	f7fe fb81 	bl	11a18 <tc_cmac_update>
   13316:	b9e8      	cbnz	r0, 13354 <gen_hash_m+0x74>
			state->err = -EINVAL;
   13318:	f06f 0315 	mvn.w	r3, #21
   1331c:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1331e:	4630      	mov	r0, r6
   13320:	b009      	add	sp, #36	; 0x24
   13322:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   13324:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   13328:	33ff      	adds	r3, #255	; 0xff
   1332a:	b29b      	uxth	r3, r3
   1332c:	2b04      	cmp	r3, #4
   1332e:	d8de      	bhi.n	132ee <gen_hash_m+0xe>
		value = sys_cpu_to_le16(attr->handle);
   13330:	8a03      	ldrh	r3, [r0, #16]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   13332:	2202      	movs	r2, #2
   13334:	4620      	mov	r0, r4
   13336:	f10d 010e 	add.w	r1, sp, #14
		value = sys_cpu_to_le16(attr->handle);
   1333a:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1333e:	f7fe fb6b 	bl	11a18 <tc_cmac_update>
   13342:	2800      	cmp	r0, #0
   13344:	d0e8      	beq.n	13318 <gen_hash_m+0x38>
		value = sys_cpu_to_le16(u16->val);
   13346:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   13348:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   1334a:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1334e:	f10d 010e 	add.w	r1, sp, #14
   13352:	e017      	b.n	13384 <gen_hash_m+0xa4>
		value = sys_cpu_to_le16(u16->val);
   13354:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   13356:	2202      	movs	r2, #2
   13358:	4620      	mov	r0, r4
   1335a:	f10d 010e 	add.w	r1, sp, #14
		value = sys_cpu_to_le16(u16->val);
   1335e:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   13362:	f7fe fb59 	bl	11a18 <tc_cmac_update>
   13366:	2800      	cmp	r0, #0
   13368:	d0d6      	beq.n	13318 <gen_hash_m+0x38>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1336a:	2000      	movs	r0, #0
   1336c:	2310      	movs	r3, #16
   1336e:	4629      	mov	r1, r5
   13370:	eb0d 0203 	add.w	r2, sp, r3
   13374:	686f      	ldr	r7, [r5, #4]
   13376:	9000      	str	r0, [sp, #0]
   13378:	47b8      	blx	r7
		if (len < 0) {
   1337a:	1e02      	subs	r2, r0, #0
   1337c:	da01      	bge.n	13382 <gen_hash_m+0xa2>
			state->err = len;
   1337e:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   13380:	e7cd      	b.n	1331e <gen_hash_m+0x3e>
		if (tc_cmac_update(&state->state, data, len) ==
   13382:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   13384:	4620      	mov	r0, r4
   13386:	f7fe fb47 	bl	11a18 <tc_cmac_update>
   1338a:	2800      	cmp	r0, #0
   1338c:	d1af      	bne.n	132ee <gen_hash_m+0xe>
   1338e:	e7c3      	b.n	13318 <gen_hash_m+0x38>

00013390 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   13390:	2207      	movs	r2, #7
   13392:	f7fe bee4 	b.w	1215e <memcpy>

00013396 <clear_ccc_cfg>:
{
   13396:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   13398:	2500      	movs	r5, #0
{
   1339a:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1339c:	4669      	mov	r1, sp
   1339e:	3001      	adds	r0, #1
   133a0:	9500      	str	r5, [sp, #0]
   133a2:	f8cd 5003 	str.w	r5, [sp, #3]
   133a6:	f7ff fff3 	bl	13390 <bt_addr_le_copy>
	cfg->id = 0U;
   133aa:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   133ac:	8125      	strh	r5, [r4, #8]
}
   133ae:	b003      	add	sp, #12
   133b0:	bd30      	pop	{r4, r5, pc}

000133b2 <atomic_and>:
{
   133b2:	4603      	mov	r3, r0
}
   133b4:	e8d3 0fef 	ldaex	r0, [r3]
   133b8:	ea00 0201 	and.w	r2, r0, r1
   133bc:	e8c3 2fec 	stlex	ip, r2, [r3]
   133c0:	f1bc 0f00 	cmp.w	ip, #0
   133c4:	d1f6      	bne.n	133b4 <atomic_and+0x2>
   133c6:	4770      	bx	lr

000133c8 <gatt_sub_remove.part.0>:
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   133c8:	2300      	movs	r3, #0
static void gatt_sub_remove(struct bt_conn *conn, struct gatt_sub *sub,
   133ca:	b507      	push	{r0, r1, r2, lr}
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   133cc:	3001      	adds	r0, #1
   133ce:	4669      	mov	r1, sp
   133d0:	9300      	str	r3, [sp, #0]
   133d2:	f8cd 3003 	str.w	r3, [sp, #3]
   133d6:	f7ff ffdb 	bl	13390 <bt_addr_le_copy>
}
   133da:	b003      	add	sp, #12
   133dc:	f85d fb04 	ldr.w	pc, [sp], #4

000133e0 <clear_cf_cfg>:
{
   133e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   133e2:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   133e4:	2500      	movs	r5, #0
   133e6:	4669      	mov	r1, sp
   133e8:	3001      	adds	r0, #1
   133ea:	9500      	str	r5, [sp, #0]
   133ec:	f8cd 5003 	str.w	r5, [sp, #3]
   133f0:	f7ff ffce 	bl	13390 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   133f4:	f104 0008 	add.w	r0, r4, #8
   133f8:	2201      	movs	r2, #1
   133fa:	4629      	mov	r1, r5
   133fc:	f7fe feda 	bl	121b4 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   13400:	340c      	adds	r4, #12
   13402:	e8d4 3fef 	ldaex	r3, [r4]
   13406:	e8c4 5fe2 	stlex	r2, r5, [r4]
   1340a:	2a00      	cmp	r2, #0
   1340c:	d1f9      	bne.n	13402 <clear_cf_cfg+0x22>
}
   1340e:	b003      	add	sp, #12
   13410:	bd30      	pop	{r4, r5, pc}

00013412 <match_uuid>:
   13412:	6008      	str	r0, [r1, #0]
   13414:	2000      	movs	r0, #0
   13416:	4770      	bx	lr

00013418 <ccc_find_cfg>:
{
   13418:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   1341a:	7803      	ldrb	r3, [r0, #0]
{
   1341c:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   1341e:	4293      	cmp	r3, r2
   13420:	d001      	beq.n	13426 <ccc_find_cfg+0xe>
	return NULL;
   13422:	2000      	movs	r0, #0
}
   13424:	bd10      	pop	{r4, pc}
	return memcmp(a, b, sizeof(*a));
   13426:	2207      	movs	r2, #7
   13428:	3001      	adds	r0, #1
   1342a:	f7fe fe88 	bl	1213e <memcmp>
		if (id == ccc->cfg[i].id &&
   1342e:	2800      	cmp	r0, #0
   13430:	d1f7      	bne.n	13422 <ccc_find_cfg+0xa>
			return &ccc->cfg[i];
   13432:	4620      	mov	r0, r4
   13434:	e7f6      	b.n	13424 <ccc_find_cfg+0xc>

00013436 <find_ccc_cfg>:
{
   13436:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13438:	460c      	mov	r4, r1
   1343a:	1c4d      	adds	r5, r1, #1
		if (conn) {
   1343c:	b148      	cbz	r0, 13452 <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1343e:	462a      	mov	r2, r5
   13440:	7809      	ldrb	r1, [r1, #0]
   13442:	f7ff f9b6 	bl	127b2 <bt_conn_is_peer_addr_le>
   13446:	2800      	cmp	r0, #0
	return NULL;
   13448:	bf08      	it	eq
   1344a:	2400      	moveq	r4, #0
}
   1344c:	4620      	mov	r0, r4
   1344e:	b003      	add	sp, #12
   13450:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   13452:	9000      	str	r0, [sp, #0]
   13454:	2207      	movs	r2, #7
   13456:	f8cd 0003 	str.w	r0, [sp, #3]
   1345a:	4669      	mov	r1, sp
   1345c:	4628      	mov	r0, r5
   1345e:	f7fe fe6e 	bl	1213e <memcmp>
   13462:	2800      	cmp	r0, #0
	return NULL;
   13464:	bf18      	it	ne
   13466:	2400      	movne	r4, #0
   13468:	e7f0      	b.n	1344c <find_ccc_cfg+0x16>

0001346a <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1346a:	2301      	movs	r3, #1
   1346c:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1346e:	e8d0 2fef 	ldaex	r2, [r0]
   13472:	431a      	orrs	r2, r3
   13474:	e8c0 2fe1 	stlex	r1, r2, [r0]
   13478:	2900      	cmp	r1, #0
   1347a:	d1f8      	bne.n	1346e <atomic_set_bit+0x4>
}
   1347c:	4770      	bx	lr

0001347e <sc_restore_rsp>:
{
   1347e:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   13480:	f7f5 fd1c 	bl	8ebc <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   13484:	b140      	cbz	r0, 13498 <sc_restore_rsp+0x1a>
   13486:	7a03      	ldrb	r3, [r0, #8]
   13488:	07db      	lsls	r3, r3, #31
   1348a:	d505      	bpl.n	13498 <sc_restore_rsp+0x1a>
}
   1348c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   13490:	2100      	movs	r1, #0
   13492:	300c      	adds	r0, #12
   13494:	f7ff bfe9 	b.w	1346a <atomic_set_bit>
}
   13498:	bd08      	pop	{r3, pc}

0001349a <read_appearance>:
{
   1349a:	b513      	push	{r0, r1, r4, lr}
   1349c:	4610      	mov	r0, r2
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
   1349e:	f240 3241 	movw	r2, #833	; 0x341
{
   134a2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
   134a6:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   134aa:	2902      	cmp	r1, #2
   134ac:	d80d      	bhi.n	134ca <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   134ae:	f1c1 0402 	rsb	r4, r1, #2
   134b2:	429c      	cmp	r4, r3
   134b4:	bfa8      	it	ge
   134b6:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
   134b8:	f10d 0306 	add.w	r3, sp, #6
   134bc:	4622      	mov	r2, r4
   134be:	4419      	add	r1, r3
   134c0:	f7fe fe4d 	bl	1215e <memcpy>
}
   134c4:	4620      	mov	r0, r4
   134c6:	b002      	add	sp, #8
   134c8:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   134ca:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   134ce:	e7f9      	b.n	134c4 <read_appearance+0x2a>

000134d0 <read_ppcp>:
{
   134d0:	b513      	push	{r0, r1, r4, lr}
   134d2:	4610      	mov	r0, r2
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   134d4:	f04f 1406 	mov.w	r4, #393222	; 0x60006
   134d8:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
{
   134dc:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   134e0:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   134e4:	2908      	cmp	r1, #8
   134e6:	d80b      	bhi.n	13500 <read_ppcp+0x30>
	len = MIN(buf_len, value_len - offset);
   134e8:	f1c1 0408 	rsb	r4, r1, #8
   134ec:	429c      	cmp	r4, r3
   134ee:	bfa8      	it	ge
   134f0:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
   134f2:	4469      	add	r1, sp
   134f4:	4622      	mov	r2, r4
   134f6:	f7fe fe32 	bl	1215e <memcpy>
}
   134fa:	4620      	mov	r0, r4
   134fc:	b002      	add	sp, #8
   134fe:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   13500:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   13504:	e7f9      	b.n	134fa <read_ppcp+0x2a>

00013506 <read_name>:
{
   13506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1350a:	4698      	mov	r8, r3
   1350c:	4615      	mov	r5, r2
   1350e:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	const char *name = bt_get_name();
   13512:	f7f1 ff7b 	bl	540c <bt_get_name>
   13516:	4607      	mov	r7, r0
				 strlen(name));
   13518:	f7fe fdef 	bl	120fa <strlen>
	if (offset > value_len) {
   1351c:	b283      	uxth	r3, r0
   1351e:	42b3      	cmp	r3, r6
   13520:	d30c      	bcc.n	1353c <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   13522:	1b9c      	subs	r4, r3, r6
   13524:	4544      	cmp	r4, r8
   13526:	bfa8      	it	ge
   13528:	4644      	movge	r4, r8
   1352a:	b2a4      	uxth	r4, r4
	memcpy(buf, (u8_t *)value + offset, len);
   1352c:	4622      	mov	r2, r4
   1352e:	4628      	mov	r0, r5
   13530:	19b9      	adds	r1, r7, r6
   13532:	f7fe fe14 	bl	1215e <memcpy>
}
   13536:	4620      	mov	r0, r4
   13538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1353c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   13540:	e7f9      	b.n	13536 <read_name+0x30>

00013542 <cf_read>:
{
   13542:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13544:	461f      	mov	r7, r3
	u8_t data[1] = {};
   13546:	2300      	movs	r3, #0
{
   13548:	4615      	mov	r5, r2
   1354a:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	u8_t data[1] = {};
   1354e:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg = find_cf_cfg(conn);
   13552:	f7f5 fcb3 	bl	8ebc <find_cf_cfg>
	if (cfg) {
   13556:	b128      	cbz	r0, 13564 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   13558:	f100 0108 	add.w	r1, r0, #8
   1355c:	2201      	movs	r2, #1
   1355e:	a801      	add	r0, sp, #4
   13560:	f7fe fdfd 	bl	1215e <memcpy>
	if (offset > value_len) {
   13564:	2e01      	cmp	r6, #1
   13566:	d80d      	bhi.n	13584 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   13568:	f1c6 0401 	rsb	r4, r6, #1
   1356c:	42bc      	cmp	r4, r7
   1356e:	bfa8      	it	ge
   13570:	463c      	movge	r4, r7
	memcpy(buf, (u8_t *)value + offset, len);
   13572:	ab01      	add	r3, sp, #4
   13574:	4622      	mov	r2, r4
   13576:	4628      	mov	r0, r5
   13578:	1999      	adds	r1, r3, r6
   1357a:	f7fe fdf0 	bl	1215e <memcpy>
}
   1357e:	4620      	mov	r0, r4
   13580:	b003      	add	sp, #12
   13582:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   13584:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   13588:	e7f9      	b.n	1357e <cf_read+0x3c>

0001358a <bt_gatt_attr_read_ccc>:
{
   1358a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1358c:	68c9      	ldr	r1, [r1, #12]
{
   1358e:	4615      	mov	r5, r2
   13590:	461f      	mov	r7, r3
   13592:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	cfg = find_ccc_cfg(conn, ccc);
   13596:	f7ff ff4e 	bl	13436 <find_ccc_cfg>
	if (cfg) {
   1359a:	b100      	cbz	r0, 1359e <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   1359c:	8900      	ldrh	r0, [r0, #8]
	if (offset > value_len) {
   1359e:	2e02      	cmp	r6, #2
   135a0:	f8ad 0006 	strh.w	r0, [sp, #6]
   135a4:	d80e      	bhi.n	135c4 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   135a6:	f1c6 0402 	rsb	r4, r6, #2
   135aa:	42bc      	cmp	r4, r7
   135ac:	bfa8      	it	ge
   135ae:	463c      	movge	r4, r7
	memcpy(buf, (u8_t *)value + offset, len);
   135b0:	f10d 0306 	add.w	r3, sp, #6
   135b4:	4622      	mov	r2, r4
   135b6:	4628      	mov	r0, r5
   135b8:	1999      	adds	r1, r3, r6
   135ba:	f7fe fdd0 	bl	1215e <memcpy>
}
   135be:	4620      	mov	r0, r4
   135c0:	b003      	add	sp, #12
   135c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   135c4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   135c8:	e7f9      	b.n	135be <bt_gatt_attr_read_ccc+0x34>

000135ca <bt_gatt_attr_read_service>:
{
   135ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   135cc:	68c9      	ldr	r1, [r1, #12]
{
   135ce:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   135d0:	780b      	ldrb	r3, [r1, #0]
{
   135d2:	4610      	mov	r0, r2
   135d4:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   135d8:	b993      	cbnz	r3, 13600 <bt_gatt_attr_read_service+0x36>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   135da:	884b      	ldrh	r3, [r1, #2]
	if (offset > value_len) {
   135dc:	2d02      	cmp	r5, #2
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   135de:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   135e2:	d819      	bhi.n	13618 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   135e4:	f1c5 0202 	rsb	r2, r5, #2
   135e8:	4294      	cmp	r4, r2
   135ea:	bfa8      	it	ge
   135ec:	4614      	movge	r4, r2
	memcpy(buf, (u8_t *)value + offset, len);
   135ee:	4622      	mov	r2, r4
   135f0:	f10d 0306 	add.w	r3, sp, #6
   135f4:	1959      	adds	r1, r3, r5
   135f6:	f7fe fdb2 	bl	1215e <memcpy>
}
   135fa:	4620      	mov	r0, r4
   135fc:	b003      	add	sp, #12
   135fe:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   13600:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   13602:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   13606:	d807      	bhi.n	13618 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   13608:	f1c5 0210 	rsb	r2, r5, #16
   1360c:	4294      	cmp	r4, r2
   1360e:	bfa8      	it	ge
   13610:	4614      	movge	r4, r2
	memcpy(buf, (u8_t *)value + offset, len);
   13612:	4429      	add	r1, r5
   13614:	4622      	mov	r2, r4
   13616:	e7ee      	b.n	135f6 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   13618:	f06f 0406 	mvn.w	r4, #6
   1361c:	e7ed      	b.n	135fa <bt_gatt_attr_read_service+0x30>

0001361e <gatt_sub_remove>:
{
   1361e:	b538      	push	{r3, r4, r5, lr}
   13620:	460c      	mov	r4, r1
	if (params) {
   13622:	4619      	mov	r1, r3
   13624:	b16b      	cbz	r3, 13642 <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   13626:	f103 0510 	add.w	r5, r3, #16
Z_GENLIST_REMOVE(slist, snode)
   1362a:	691b      	ldr	r3, [r3, #16]
   1362c:	b982      	cbnz	r2, 13650 <gatt_sub_remove+0x32>
   1362e:	68e2      	ldr	r2, [r4, #12]
	list->head = node;
   13630:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   13632:	4295      	cmp	r5, r2
   13634:	d100      	bne.n	13638 <gatt_sub_remove+0x1a>
	list->tail = node;
   13636:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   13638:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   1363a:	680d      	ldr	r5, [r1, #0]
   1363c:	461a      	mov	r2, r3
   1363e:	610b      	str	r3, [r1, #16]
   13640:	47a8      	blx	r5
	if (sys_slist_is_empty(&sub->list)) {
   13642:	68a3      	ldr	r3, [r4, #8]
   13644:	b953      	cbnz	r3, 1365c <gatt_sub_remove+0x3e>
   13646:	4620      	mov	r0, r4
}
   13648:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1364c:	f7ff bebc 	b.w	133c8 <gatt_sub_remove.part.0>
   13650:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   13652:	68e3      	ldr	r3, [r4, #12]
   13654:	429d      	cmp	r5, r3
	list->tail = node;
   13656:	bf08      	it	eq
   13658:	60e2      	streq	r2, [r4, #12]
}
   1365a:	e7ed      	b.n	13638 <gatt_sub_remove+0x1a>
   1365c:	bd38      	pop	{r3, r4, r5, pc}

0001365e <gatt_write_ccc_rsp>:
{
   1365e:	b570      	push	{r4, r5, r6, lr}
   13660:	460e      	mov	r6, r1
   13662:	9c04      	ldr	r4, [sp, #16]
   13664:	4605      	mov	r5, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13666:	f06f 0104 	mvn.w	r1, #4
   1366a:	f104 000c 	add.w	r0, r4, #12
   1366e:	f7ff fea0 	bl	133b2 <atomic_and>
	if (err) {
   13672:	b1b6      	cbz	r6, 136a2 <gatt_write_ccc_rsp+0x44>
		sub = gatt_sub_find(conn);
   13674:	2100      	movs	r1, #0
   13676:	4628      	mov	r0, r5
   13678:	f7f5 fa98 	bl	8bac <gatt_sub_find_free>
		if (!sub) {
   1367c:	4601      	mov	r1, r0
   1367e:	b1d0      	cbz	r0, 136b6 <gatt_write_ccc_rsp+0x58>
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
   13680:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   13682:	b1c3      	cbz	r3, 136b6 <gatt_write_ccc_rsp+0x58>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   13684:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   13686:	f104 0010 	add.w	r0, r4, #16
   1368a:	4283      	cmp	r3, r0
   1368c:	d105      	bne.n	1369a <gatt_write_ccc_rsp+0x3c>
				gatt_sub_remove(conn, sub, tmp, params);
   1368e:	4623      	mov	r3, r4
   13690:	4628      	mov	r0, r5
}
   13692:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				gatt_sub_remove(conn, sub, tmp, params);
   13696:	f7ff bfc2 	b.w	1361e <gatt_sub_remove>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1369a:	b162      	cbz	r2, 136b6 <gatt_write_ccc_rsp+0x58>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1369c:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   1369e:	6812      	ldr	r2, [r2, #0]
   136a0:	e7f3      	b.n	1368a <gatt_write_ccc_rsp+0x2c>
	} else if (!params->value) {
   136a2:	8923      	ldrh	r3, [r4, #8]
   136a4:	b93b      	cbnz	r3, 136b6 <gatt_write_ccc_rsp+0x58>
		params->notify(conn, params, NULL, 0);
   136a6:	6826      	ldr	r6, [r4, #0]
   136a8:	4621      	mov	r1, r4
   136aa:	4628      	mov	r0, r5
   136ac:	46b4      	mov	ip, r6
}
   136ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		params->notify(conn, params, NULL, 0);
   136b2:	461a      	mov	r2, r3
   136b4:	4760      	bx	ip
}
   136b6:	bd70      	pop	{r4, r5, r6, pc}

000136b8 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   136b8:	2a02      	cmp	r2, #2
{
   136ba:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   136bc:	d108      	bne.n	136d0 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   136be:	2300      	movs	r3, #0
   136c0:	f100 017c 	add.w	r1, r0, #124	; 0x7c
   136c4:	461a      	mov	r2, r3
   136c6:	7a00      	ldrb	r0, [r0, #8]
   136c8:	f7f5 faee 	bl	8ca8 <sc_save>
}
   136cc:	2002      	movs	r0, #2
   136ce:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   136d0:	f7f5 fd4a 	bl	9168 <sc_clear>
   136d4:	e7fa      	b.n	136cc <sc_ccc_cfg_write+0x14>

000136d6 <bt_gatt_attr_read_chrc>:
{
   136d6:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   136d8:	68cf      	ldr	r7, [r1, #12]
{
   136da:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   136dc:	79bb      	ldrb	r3, [r7, #6]
{
   136de:	b087      	sub	sp, #28
   136e0:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   136e2:	f88d 3004 	strb.w	r3, [sp, #4]
{
   136e6:	4615      	mov	r5, r2
   136e8:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   136ec:	f7f5 fe04 	bl	92f8 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   136f0:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   136f2:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   136f6:	780b      	ldrb	r3, [r1, #0]
   136f8:	b99b      	cbnz	r3, 13722 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   136fa:	884b      	ldrh	r3, [r1, #2]
		value_len += 2U;
   136fc:	2105      	movs	r1, #5
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   136fe:	f8ad 3007 	strh.w	r3, [sp, #7]
	if (offset > value_len) {
   13702:	42b1      	cmp	r1, r6
   13704:	d315      	bcc.n	13732 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   13706:	1b89      	subs	r1, r1, r6
   13708:	42a1      	cmp	r1, r4
   1370a:	bfa8      	it	ge
   1370c:	4621      	movge	r1, r4
	memcpy(buf, (u8_t *)value + offset, len);
   1370e:	ab01      	add	r3, sp, #4
   13710:	b28c      	uxth	r4, r1
   13712:	4622      	mov	r2, r4
   13714:	4628      	mov	r0, r5
   13716:	1999      	adds	r1, r3, r6
   13718:	f7fe fd21 	bl	1215e <memcpy>
}
   1371c:	4620      	mov	r0, r4
   1371e:	b007      	add	sp, #28
   13720:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   13722:	3101      	adds	r1, #1
   13724:	2210      	movs	r2, #16
   13726:	f10d 0007 	add.w	r0, sp, #7
   1372a:	f7fe fd18 	bl	1215e <memcpy>
		value_len += 16U;
   1372e:	2113      	movs	r1, #19
   13730:	e7e7      	b.n	13702 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   13732:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   13736:	e7f1      	b.n	1371c <bt_gatt_attr_read_chrc+0x46>

00013738 <bt_gatt_foreach_attr>:
{
   13738:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1373a:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1373e:	2300      	movs	r3, #0
   13740:	461a      	mov	r2, r3
   13742:	9300      	str	r3, [sp, #0]
   13744:	f7f5 fdf0 	bl	9328 <bt_gatt_foreach_attr_type>
}
   13748:	b005      	add	sp, #20
   1374a:	f85d fb04 	ldr.w	pc, [sp], #4

0001374e <db_hash_process>:
	db_hash_gen(true);
   1374e:	2001      	movs	r0, #1
   13750:	f7f5 be64 	b.w	941c <db_hash_gen>

00013754 <bt_gatt_check_perm>:
{
   13754:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   13756:	07d4      	lsls	r4, r2, #31
{
   13758:	4605      	mov	r5, r0
   1375a:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1375c:	d504      	bpl.n	13768 <bt_gatt_check_perm+0x14>
   1375e:	f010 0f15 	tst.w	r0, #21
   13762:	d01e      	beq.n	137a2 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   13764:	684b      	ldr	r3, [r1, #4]
   13766:	b1e3      	cbz	r3, 137a2 <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   13768:	0793      	lsls	r3, r2, #30
   1376a:	d504      	bpl.n	13776 <bt_gatt_check_perm+0x22>
   1376c:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   13770:	d019      	beq.n	137a6 <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   13772:	688b      	ldr	r3, [r1, #8]
   13774:	b1bb      	cbz	r3, 137a6 <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   13776:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1377a:	f014 0f30 	tst.w	r4, #48	; 0x30
   1377e:	d103      	bne.n	13788 <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   13780:	f014 000c 	ands.w	r0, r4, #12
   13784:	d107      	bne.n	13796 <bt_gatt_check_perm+0x42>
}
   13786:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   13788:	4628      	mov	r0, r5
   1378a:	f7ff f810 	bl	127ae <bt_conn_get_security>
   1378e:	2802      	cmp	r0, #2
   13790:	d8f6      	bhi.n	13780 <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   13792:	2005      	movs	r0, #5
   13794:	e7f7      	b.n	13786 <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   13796:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   13798:	2b00      	cmp	r3, #0
   1379a:	bf14      	ite	ne
   1379c:	2000      	movne	r0, #0
   1379e:	200f      	moveq	r0, #15
   137a0:	e7f1      	b.n	13786 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   137a2:	2002      	movs	r0, #2
   137a4:	e7ef      	b.n	13786 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   137a6:	2003      	movs	r0, #3
   137a8:	e7ed      	b.n	13786 <bt_gatt_check_perm+0x32>

000137aa <bt_gatt_notification>:
{
   137aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   137ae:	4688      	mov	r8, r1
	sub = gatt_sub_find(conn);
   137b0:	2100      	movs	r1, #0
{
   137b2:	4607      	mov	r7, r0
   137b4:	4691      	mov	r9, r2
   137b6:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   137b8:	f7f5 f9f8 	bl	8bac <gatt_sub_find_free>
	if (!sub) {
   137bc:	b1f8      	cbz	r0, 137fe <bt_gatt_notification+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   137be:	6883      	ldr	r3, [r0, #8]
   137c0:	b1eb      	cbz	r3, 137fe <bt_gatt_notification+0x54>
   137c2:	f1b3 0610 	subs.w	r6, r3, #16
   137c6:	d01a      	beq.n	137fe <bt_gatt_notification+0x54>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   137c8:	681c      	ldr	r4, [r3, #0]
   137ca:	b104      	cbz	r4, 137ce <bt_gatt_notification+0x24>
   137cc:	3c10      	subs	r4, #16
		if (handle != params->value_handle) {
   137ce:	88b3      	ldrh	r3, [r6, #4]
   137d0:	4543      	cmp	r3, r8
   137d2:	d10a      	bne.n	137ea <bt_gatt_notification+0x40>
		if (params->notify(conn, params, data, length) ==
   137d4:	4653      	mov	r3, sl
   137d6:	464a      	mov	r2, r9
   137d8:	4631      	mov	r1, r6
   137da:	4638      	mov	r0, r7
   137dc:	6835      	ldr	r5, [r6, #0]
   137de:	47a8      	blx	r5
   137e0:	b918      	cbnz	r0, 137ea <bt_gatt_notification+0x40>
			bt_gatt_unsubscribe(conn, params);
   137e2:	4631      	mov	r1, r6
   137e4:	4638      	mov	r0, r7
   137e6:	f7f6 f9b5 	bl	9b54 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   137ea:	b144      	cbz	r4, 137fe <bt_gatt_notification+0x54>
Z_GENLIST_PEEK_NEXT(slist, snode)
   137ec:	f114 0510 	adds.w	r5, r4, #16
   137f0:	d002      	beq.n	137f8 <bt_gatt_notification+0x4e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   137f2:	6925      	ldr	r5, [r4, #16]
   137f4:	b105      	cbz	r5, 137f8 <bt_gatt_notification+0x4e>
   137f6:	3d10      	subs	r5, #16
{
   137f8:	4626      	mov	r6, r4
   137fa:	462c      	mov	r4, r5
   137fc:	e7e7      	b.n	137ce <bt_gatt_notification+0x24>
}
   137fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00013802 <bt_gatt_change_aware>:
{
   13802:	b570      	push	{r4, r5, r6, lr}
   13804:	460d      	mov	r5, r1
	cfg = find_cf_cfg(conn);
   13806:	f7f5 fb59 	bl	8ebc <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1380a:	b910      	cbnz	r0, 13812 <bt_gatt_change_aware+0x10>
		return true;
   1380c:	2501      	movs	r5, #1
}
   1380e:	4628      	mov	r0, r5
   13810:	bd70      	pop	{r4, r5, r6, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   13812:	7a03      	ldrb	r3, [r0, #8]
   13814:	07da      	lsls	r2, r3, #31
   13816:	d5f9      	bpl.n	1380c <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   13818:	f100 040c 	add.w	r4, r0, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1381c:	e8d4 1faf 	lda	r1, [r4]
   13820:	f011 0601 	ands.w	r6, r1, #1
   13824:	d1f2      	bne.n	1380c <bt_gatt_change_aware+0xa>
	if (!req) {
   13826:	2d00      	cmp	r5, #0
   13828:	d0f1      	beq.n	1380e <bt_gatt_change_aware+0xc>
   1382a:	e8d4 3faf 	lda	r3, [r4]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1382e:	f3c3 0540 	ubfx	r5, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   13832:	079b      	lsls	r3, r3, #30
   13834:	d509      	bpl.n	1384a <bt_gatt_change_aware+0x48>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13836:	f06f 0102 	mvn.w	r1, #2
   1383a:	4620      	mov	r0, r4
   1383c:	f7ff fdb9 	bl	133b2 <atomic_and>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   13840:	4631      	mov	r1, r6
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   13842:	4620      	mov	r0, r4
   13844:	f7ff fe11 	bl	1346a <atomic_set_bit>
	return false;
   13848:	e7e1      	b.n	1380e <bt_gatt_change_aware+0xc>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   1384a:	2101      	movs	r1, #1
   1384c:	e7f9      	b.n	13842 <bt_gatt_change_aware+0x40>

0001384e <smp_pairing_rsp>:
}
   1384e:	2007      	movs	r0, #7
   13850:	4770      	bx	lr

00013852 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   13852:	2301      	movs	r3, #1
   13854:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13856:	e8d0 2fef 	ldaex	r2, [r0]
   1385a:	431a      	orrs	r2, r3
   1385c:	e8c0 2fe1 	stlex	r1, r2, [r0]
   13860:	2900      	cmp	r1, #0
   13862:	d1f8      	bne.n	13856 <atomic_set_bit+0x4>
}
   13864:	4770      	bx	lr

00013866 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   13866:	2301      	movs	r3, #1
   13868:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1386a:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1386c:	e8d0 2fef 	ldaex	r2, [r0]
   13870:	401a      	ands	r2, r3
   13872:	e8c0 2fe1 	stlex	r1, r2, [r0]
   13876:	2900      	cmp	r1, #0
   13878:	d1f8      	bne.n	1386c <atomic_clear_bit+0x6>
}
   1387a:	4770      	bx	lr

0001387c <bt_smp_aes_cmac>:
{
   1387c:	b570      	push	{r4, r5, r6, lr}
   1387e:	b0c2      	sub	sp, #264	; 0x108
   13880:	460d      	mov	r5, r1
   13882:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   13884:	4601      	mov	r1, r0
   13886:	aa16      	add	r2, sp, #88	; 0x58
   13888:	4668      	mov	r0, sp
{
   1388a:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   1388c:	f7fe f899 	bl	119c2 <tc_cmac_setup>
   13890:	b150      	cbz	r0, 138a8 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   13892:	4632      	mov	r2, r6
   13894:	4629      	mov	r1, r5
   13896:	4668      	mov	r0, sp
   13898:	f7fe f8be 	bl	11a18 <tc_cmac_update>
   1389c:	b120      	cbz	r0, 138a8 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   1389e:	4669      	mov	r1, sp
   138a0:	4620      	mov	r0, r4
   138a2:	f7fe f925 	bl	11af0 <tc_cmac_final>
   138a6:	b918      	cbnz	r0, 138b0 <bt_smp_aes_cmac+0x34>
		return -EIO;
   138a8:	f06f 0004 	mvn.w	r0, #4
}
   138ac:	b042      	add	sp, #264	; 0x108
   138ae:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   138b0:	2000      	movs	r0, #0
   138b2:	e7fb      	b.n	138ac <bt_smp_aes_cmac+0x30>

000138b4 <bt_smp_disconnected>:
{
   138b4:	b538      	push	{r3, r4, r5, lr}
	struct bt_keys *keys = chan->conn->le.keys;
   138b6:	6803      	ldr	r3, [r0, #0]
{
   138b8:	4604      	mov	r4, r0
	struct bt_keys *keys = chan->conn->le.keys;
   138ba:	f8d3 50a8 	ldr.w	r5, [r3, #168]	; 0xa8
	k_delayed_work_cancel(&smp->work);
   138be:	f500 70ce 	add.w	r0, r0, #412	; 0x19c
   138c2:	f7fc faef 	bl	fea4 <k_delayed_work_cancel>
	if (keys) {
   138c6:	b13d      	cbz	r5, 138d8 <bt_smp_disconnected+0x24>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   138c8:	89eb      	ldrh	r3, [r5, #14]
   138ca:	b113      	cbz	r3, 138d2 <bt_smp_disconnected+0x1e>
   138cc:	7b6b      	ldrb	r3, [r5, #13]
   138ce:	079b      	lsls	r3, r3, #30
   138d0:	d502      	bpl.n	138d8 <bt_smp_disconnected+0x24>
			bt_keys_clear(keys);
   138d2:	4628      	mov	r0, r5
   138d4:	f7f7 fe6a 	bl	b5ac <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   138d8:	4620      	mov	r0, r4
}
   138da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	(void)memset(smp, 0, sizeof(*smp));
   138de:	f44f 72de 	mov.w	r2, #444	; 0x1bc
   138e2:	2100      	movs	r1, #0
   138e4:	f7fe bc66 	b.w	121b4 <memset>

000138e8 <smp_security_request>:
   138e8:	2007      	movs	r0, #7
   138ea:	4770      	bx	lr

000138ec <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   138ec:	b510      	push	{r4, lr}
   138ee:	1e43      	subs	r3, r0, #1
   138f0:	f100 0210 	add.w	r2, r0, #16
   138f4:	3007      	adds	r0, #7
		u8_t tmp = ((u8_t *)buf)[i];
   138f6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
   138fa:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   138fe:	4283      	cmp	r3, r0
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
   13900:	701c      	strb	r4, [r3, #0]
		((u8_t *)buf)[length - 1 - i] = tmp;
   13902:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   13904:	d1f7      	bne.n	138f6 <sys_mem_swap.constprop.0+0xa>
	}
}
   13906:	bd10      	pop	{r4, pc}

00013908 <smp_f6>:
{
   13908:	b5f0      	push	{r4, r5, r6, r7, lr}
   1390a:	4616      	mov	r6, r2
   1390c:	461c      	mov	r4, r3
   1390e:	4605      	mov	r5, r0
   13910:	b097      	sub	sp, #92	; 0x5c
	sys_memcpy_swap(m, n1, 16);
   13912:	2210      	movs	r2, #16
   13914:	a805      	add	r0, sp, #20
{
   13916:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   13918:	f7f6 fb56 	bl	9fc8 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   1391c:	2210      	movs	r2, #16
   1391e:	4631      	mov	r1, r6
   13920:	a809      	add	r0, sp, #36	; 0x24
   13922:	f7f6 fb51 	bl	9fc8 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   13926:	4621      	mov	r1, r4
   13928:	2210      	movs	r2, #16
   1392a:	a80d      	add	r0, sp, #52	; 0x34
   1392c:	f7f6 fb4c 	bl	9fc8 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   13930:	2203      	movs	r2, #3
   13932:	991c      	ldr	r1, [sp, #112]	; 0x70
   13934:	a811      	add	r0, sp, #68	; 0x44
   13936:	f7f6 fb47 	bl	9fc8 <sys_memcpy_swap>
	m[51] = a1->type;
   1393a:	9c1d      	ldr	r4, [sp, #116]	; 0x74
	memcpy(m + 52, a1->a.val, 6);
   1393c:	2206      	movs	r2, #6
	m[51] = a1->type;
   1393e:	f814 3b01 	ldrb.w	r3, [r4], #1
	memcpy(m + 52, a1->a.val, 6);
   13942:	a812      	add	r0, sp, #72	; 0x48
   13944:	4621      	mov	r1, r4
	m[51] = a1->type;
   13946:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   1394a:	f7fe fc08 	bl	1215e <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   1394e:	4621      	mov	r1, r4
   13950:	2206      	movs	r2, #6
   13952:	a812      	add	r0, sp, #72	; 0x48
   13954:	f7f6 fb38 	bl	9fc8 <sys_memcpy_swap>
	m[58] = a2->type;
   13958:	9c1e      	ldr	r4, [sp, #120]	; 0x78
	memcpy(m + 59, a2->a.val, 6);
   1395a:	2206      	movs	r2, #6
	m[58] = a2->type;
   1395c:	f814 3b01 	ldrb.w	r3, [r4], #1
	memcpy(m + 59, a2->a.val, 6);
   13960:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   13964:	4621      	mov	r1, r4
	m[58] = a2->type;
   13966:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   1396a:	f7fe fbf8 	bl	1215e <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   1396e:	4621      	mov	r1, r4
   13970:	2206      	movs	r2, #6
   13972:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   13976:	f7f6 fb27 	bl	9fc8 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   1397a:	2210      	movs	r2, #16
   1397c:	4629      	mov	r1, r5
   1397e:	a801      	add	r0, sp, #4
   13980:	f7f6 fb22 	bl	9fc8 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   13984:	463b      	mov	r3, r7
   13986:	2241      	movs	r2, #65	; 0x41
   13988:	a905      	add	r1, sp, #20
   1398a:	a801      	add	r0, sp, #4
   1398c:	f7ff ff76 	bl	1387c <bt_smp_aes_cmac>
	if (err) {
   13990:	4604      	mov	r4, r0
   13992:	b910      	cbnz	r0, 1399a <smp_f6+0x92>
	sys_mem_swap(check, 16);
   13994:	4638      	mov	r0, r7
   13996:	f7ff ffa9 	bl	138ec <sys_mem_swap.constprop.0>
}
   1399a:	4620      	mov	r0, r4
   1399c:	b017      	add	sp, #92	; 0x5c
   1399e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000139a0 <smp_f4>:
{
   139a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   139a2:	460e      	mov	r6, r1
   139a4:	4614      	mov	r4, r2
   139a6:	461d      	mov	r5, r3
   139a8:	b097      	sub	sp, #92	; 0x5c
	sys_memcpy_swap(m, u, 32);
   139aa:	4601      	mov	r1, r0
   139ac:	2220      	movs	r2, #32
   139ae:	a805      	add	r0, sp, #20
{
   139b0:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   139b2:	f7f6 fb09 	bl	9fc8 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   139b6:	2220      	movs	r2, #32
   139b8:	4631      	mov	r1, r6
   139ba:	a80d      	add	r0, sp, #52	; 0x34
   139bc:	f7f6 fb04 	bl	9fc8 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   139c0:	4621      	mov	r1, r4
   139c2:	2210      	movs	r2, #16
   139c4:	a801      	add	r0, sp, #4
	m[64] = z;
   139c6:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   139ca:	f7f6 fafd 	bl	9fc8 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   139ce:	463b      	mov	r3, r7
   139d0:	2241      	movs	r2, #65	; 0x41
   139d2:	a905      	add	r1, sp, #20
   139d4:	a801      	add	r0, sp, #4
   139d6:	f7ff ff51 	bl	1387c <bt_smp_aes_cmac>
	if (err) {
   139da:	4604      	mov	r4, r0
   139dc:	b910      	cbnz	r0, 139e4 <smp_f4+0x44>
	sys_mem_swap(res, 16);
   139de:	4638      	mov	r0, r7
   139e0:	f7ff ff84 	bl	138ec <sys_mem_swap.constprop.0>
}
   139e4:	4620      	mov	r0, r4
   139e6:	b017      	add	sp, #92	; 0x5c
   139e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000139ea <smp_signing_info>:
   139ea:	2007      	movs	r0, #7
   139ec:	4770      	bx	lr

000139ee <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   139ee:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   139f2:	4108      	asrs	r0, r1
}
   139f4:	f000 0001 	and.w	r0, r0, #1
   139f8:	4770      	bx	lr

000139fa <smp_create_pdu.isra.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, u8_t op, size_t len)
   139fa:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   139fc:	f100 05b4 	add.w	r5, r0, #180	; 0xb4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, u8_t op, size_t len)
   13a00:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   13a02:	4628      	mov	r0, r5
   13a04:	2104      	movs	r1, #4
   13a06:	f7ff fff2 	bl	139ee <atomic_test_bit>
   13a0a:	b168      	cbz	r0, 13a28 <smp_create_pdu.isra.0+0x2e>
		timeout = K_NO_WAIT;
   13a0c:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   13a0e:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   13a10:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   13a12:	4608      	mov	r0, r1
   13a14:	f7ff f863 	bl	12ade <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   13a18:	4604      	mov	r4, r0
   13a1a:	b940      	cbnz	r0, 13a2e <smp_create_pdu.isra.0+0x34>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   13a1c:	2104      	movs	r1, #4
   13a1e:	4628      	mov	r0, r5
   13a20:	f7ff ff17 	bl	13852 <atomic_set_bit>
}
   13a24:	4620      	mov	r0, r4
   13a26:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   13a28:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   13a2c:	e7ef      	b.n	13a0e <smp_create_pdu.isra.0+0x14>
	hdr = net_buf_add(buf, sizeof(*hdr));
   13a2e:	2101      	movs	r1, #1
   13a30:	3008      	adds	r0, #8
   13a32:	f7f8 f991 	bl	bd58 <net_buf_simple_add>
	hdr->code = op;
   13a36:	7006      	strb	r6, [r0, #0]
	return buf;
   13a38:	e7f4      	b.n	13a24 <smp_create_pdu.isra.0+0x2a>

00013a3a <smp_send_pairing_random>:
{
   13a3a:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   13a3c:	2104      	movs	r1, #4
{
   13a3e:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   13a40:	f7ff ffdb 	bl	139fa <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   13a44:	4604      	mov	r4, r0
   13a46:	b178      	cbz	r0, 13a68 <smp_send_pairing_random+0x2e>
	req = net_buf_add(rsp_buf, sizeof(*req));
   13a48:	2110      	movs	r1, #16
   13a4a:	3008      	adds	r0, #8
   13a4c:	f7f8 f984 	bl	bd58 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   13a50:	2210      	movs	r2, #16
   13a52:	f105 01d7 	add.w	r1, r5, #215	; 0xd7
   13a56:	f7fe fb82 	bl	1215e <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   13a5a:	4628      	mov	r0, r5
   13a5c:	2200      	movs	r2, #0
   13a5e:	4621      	mov	r1, r4
   13a60:	f7f6 fb40 	bl	a0e4 <smp_send.isra.0>
	return 0;
   13a64:	2000      	movs	r0, #0
}
   13a66:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   13a68:	2008      	movs	r0, #8
   13a6a:	e7fc      	b.n	13a66 <smp_send_pairing_random+0x2c>

00013a6c <send_pairing_rsp>:
{
   13a6c:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   13a6e:	2102      	movs	r1, #2
{
   13a70:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   13a72:	f7ff ffc2 	bl	139fa <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   13a76:	4604      	mov	r4, r0
   13a78:	b178      	cbz	r0, 13a9a <send_pairing_rsp+0x2e>
	rsp = net_buf_add(rsp_buf, sizeof(*rsp));
   13a7a:	2106      	movs	r1, #6
   13a7c:	3008      	adds	r0, #8
   13a7e:	f7f8 f96b 	bl	bd58 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   13a82:	2206      	movs	r2, #6
   13a84:	f105 01c1 	add.w	r1, r5, #193	; 0xc1
   13a88:	f7fe fb69 	bl	1215e <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   13a8c:	4628      	mov	r0, r5
   13a8e:	2200      	movs	r2, #0
   13a90:	4621      	mov	r1, r4
   13a92:	f7f6 fb27 	bl	a0e4 <smp_send.isra.0>
	return 0;
   13a96:	2000      	movs	r0, #0
}
   13a98:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   13a9a:	2008      	movs	r0, #8
   13a9c:	e7fc      	b.n	13a98 <send_pairing_rsp+0x2c>

00013a9e <smp_dhkey_check>:
{
   13a9e:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   13aa0:	6803      	ldr	r3, [r0, #0]
{
   13aa2:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   13aa4:	78db      	ldrb	r3, [r3, #3]
   13aa6:	2b01      	cmp	r3, #1
   13aa8:	d115      	bne.n	13ad6 <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   13aaa:	688e      	ldr	r6, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   13aac:	f100 05b4 	add.w	r5, r0, #180	; 0xb4
   13ab0:	210f      	movs	r1, #15
   13ab2:	4628      	mov	r0, r5
   13ab4:	f7ff fed7 	bl	13866 <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   13ab8:	4631      	mov	r1, r6
   13aba:	2210      	movs	r2, #16
   13abc:	f204 1067 	addw	r0, r4, #359	; 0x167
   13ac0:	f7fe fb4d 	bl	1215e <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   13ac4:	2107      	movs	r1, #7
   13ac6:	4628      	mov	r0, r5
   13ac8:	f7ff ff91 	bl	139ee <atomic_test_bit>
   13acc:	b128      	cbz	r0, 13ada <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   13ace:	2108      	movs	r1, #8
   13ad0:	4628      	mov	r0, r5
   13ad2:	f7ff febe 	bl	13852 <atomic_set_bit>
}
   13ad6:	2000      	movs	r0, #0
   13ad8:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   13ada:	2109      	movs	r1, #9
   13adc:	4628      	mov	r0, r5
   13ade:	f7ff ff86 	bl	139ee <atomic_test_bit>
   13ae2:	2800      	cmp	r0, #0
   13ae4:	d1f3      	bne.n	13ace <smp_dhkey_check+0x30>
		return compute_and_check_and_send_slave_dhcheck(smp);
   13ae6:	4620      	mov	r0, r4
}
   13ae8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_slave_dhcheck(smp);
   13aec:	f7f6 bb12 	b.w	a114 <compute_and_check_and_send_slave_dhcheck>

00013af0 <atomic_test_and_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   13af0:	2301      	movs	r3, #1
   13af2:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13af6:	43ca      	mvns	r2, r1
{
   13af8:	b500      	push	{lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13afa:	e8d0 3fef 	ldaex	r3, [r0]
   13afe:	ea03 0c02 	and.w	ip, r3, r2
   13b02:	e8c0 cfee 	stlex	lr, ip, [r0]
   13b06:	f1be 0f00 	cmp.w	lr, #0
   13b0a:	d1f6      	bne.n	13afa <atomic_test_and_clear_bit+0xa>
	return (old & mask) != 0;
   13b0c:	420b      	tst	r3, r1
}
   13b0e:	bf14      	ite	ne
   13b10:	2001      	movne	r0, #1
   13b12:	2000      	moveq	r0, #0
   13b14:	f85d fb04 	ldr.w	pc, [sp], #4

00013b18 <smp_reset>:
{
   13b18:	b538      	push	{r3, r4, r5, lr}
   13b1a:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   13b1c:	6805      	ldr	r5, [r0, #0]
	k_delayed_work_cancel(&smp->work);
   13b1e:	f500 70ce 	add.w	r0, r0, #412	; 0x19c
   13b22:	f7fc f9bf 	bl	fea4 <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
   13b26:	2300      	movs	r3, #0
	atomic_set(&smp->allowed_cmds, 0);
   13b28:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
	smp->method = JUST_WORKS;
   13b2c:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   13b30:	e8d0 2fef 	ldaex	r2, [r0]
   13b34:	e8c0 3fe1 	stlex	r1, r3, [r0]
   13b38:	2900      	cmp	r1, #0
   13b3a:	d1f9      	bne.n	13b30 <smp_reset+0x18>
   13b3c:	34b4      	adds	r4, #180	; 0xb4
   13b3e:	e8d4 2fef 	ldaex	r2, [r4]
   13b42:	e8c4 3fe1 	stlex	r1, r3, [r4]
   13b46:	2900      	cmp	r1, #0
   13b48:	d1f9      	bne.n	13b3e <smp_reset+0x26>
	if (conn->required_sec_level != conn->sec_level) {
   13b4a:	7a6b      	ldrb	r3, [r5, #9]
   13b4c:	7aaa      	ldrb	r2, [r5, #10]
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   13b4e:	2101      	movs	r1, #1
	if (conn->required_sec_level != conn->sec_level) {
   13b50:	429a      	cmp	r2, r3
		conn->required_sec_level = conn->sec_level;
   13b52:	bf18      	it	ne
   13b54:	72ab      	strbne	r3, [r5, #10]
}
   13b56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   13b5a:	f7ff be7a 	b.w	13852 <atomic_set_bit>

00013b5e <smp_error>:
{
   13b5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13b60:	4606      	mov	r6, r0
   13b62:	460c      	mov	r4, r1
	smp_pairing_complete(smp, reason);
   13b64:	f7f6 fe8e 	bl	a884 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   13b68:	2105      	movs	r1, #5
   13b6a:	4630      	mov	r0, r6
   13b6c:	f7ff ff45 	bl	139fa <smp_create_pdu.isra.0>
	if (!buf) {
   13b70:	4605      	mov	r5, r0
   13b72:	b178      	cbz	r0, 13b94 <smp_error+0x36>
	rsp = net_buf_add(buf, sizeof(*rsp));
   13b74:	2101      	movs	r1, #1
   13b76:	3008      	adds	r0, #8
   13b78:	f7f8 f8ee 	bl	bd58 <net_buf_simple_add>
	rsp->reason = reason;
   13b7c:	7004      	strb	r4, [r0, #0]
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   13b7e:	2400      	movs	r4, #0
   13b80:	462a      	mov	r2, r5
   13b82:	4623      	mov	r3, r4
   13b84:	2106      	movs	r1, #6
   13b86:	6830      	ldr	r0, [r6, #0]
   13b88:	9400      	str	r4, [sp, #0]
   13b8a:	f7fe ffab 	bl	12ae4 <bt_l2cap_send_cb>
	return 0;
   13b8e:	4620      	mov	r0, r4
}
   13b90:	b002      	add	sp, #8
   13b92:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   13b94:	f06f 0036 	mvn.w	r0, #54	; 0x36
   13b98:	e7fa      	b.n	13b90 <smp_error+0x32>

00013b9a <smp_c1>:
{
   13b9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13b9e:	4699      	mov	r9, r3
   13ba0:	b089      	sub	sp, #36	; 0x24
   13ba2:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
	p1[0] = ia->type;
   13ba6:	783b      	ldrb	r3, [r7, #0]
{
   13ba8:	460c      	mov	r4, r1
	p1[0] = ia->type;
   13baa:	f88d 3000 	strb.w	r3, [sp]
	p1[1] = ra->type;
   13bae:	f898 3000 	ldrb.w	r3, [r8]
{
   13bb2:	4611      	mov	r1, r2
   13bb4:	9d12      	ldr	r5, [sp, #72]	; 0x48
	memcpy(p1 + 2, preq, 7);
   13bb6:	2207      	movs	r2, #7
{
   13bb8:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   13bba:	f10d 0002 	add.w	r0, sp, #2
	p1[1] = ra->type;
   13bbe:	f88d 3001 	strb.w	r3, [sp, #1]
	memcpy(p1 + 2, preq, 7);
   13bc2:	f7fe facc 	bl	1215e <memcpy>
	memcpy(p1 + 9, pres, 7);
   13bc6:	2207      	movs	r2, #7
   13bc8:	4649      	mov	r1, r9
   13bca:	f10d 0009 	add.w	r0, sp, #9
   13bce:	f7fe fac6 	bl	1215e <memcpy>
	while (len--) {
   13bd2:	4629      	mov	r1, r5
   13bd4:	466a      	mov	r2, sp
   13bd6:	f104 0010 	add.w	r0, r4, #16
   13bda:	4284      	cmp	r4, r0
   13bdc:	d127      	bne.n	13c2e <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   13bde:	462a      	mov	r2, r5
   13be0:	4629      	mov	r1, r5
   13be2:	4630      	mov	r0, r6
   13be4:	f7fe fd4e 	bl	12684 <bt_encrypt_le>
	if (err) {
   13be8:	4604      	mov	r4, r0
   13bea:	b9e0      	cbnz	r0, 13c26 <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   13bec:	2206      	movs	r2, #6
   13bee:	f108 0101 	add.w	r1, r8, #1
   13bf2:	a804      	add	r0, sp, #16
   13bf4:	f7fe fab3 	bl	1215e <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   13bf8:	2206      	movs	r2, #6
   13bfa:	1c79      	adds	r1, r7, #1
   13bfc:	f10d 0016 	add.w	r0, sp, #22
   13c00:	f7fe faad 	bl	1215e <memcpy>
	(void)memset(p2 + 12, 0, 4);
   13c04:	2204      	movs	r2, #4
   13c06:	4621      	mov	r1, r4
   13c08:	a807      	add	r0, sp, #28
   13c0a:	f7fe fad3 	bl	121b4 <memset>
	while (len--) {
   13c0e:	462a      	mov	r2, r5
   13c10:	f105 0010 	add.w	r0, r5, #16
   13c14:	ab04      	add	r3, sp, #16
   13c16:	4282      	cmp	r2, r0
   13c18:	d112      	bne.n	13c40 <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   13c1a:	462a      	mov	r2, r5
   13c1c:	4629      	mov	r1, r5
   13c1e:	4630      	mov	r0, r6
   13c20:	f7fe fd30 	bl	12684 <bt_encrypt_le>
   13c24:	4604      	mov	r4, r0
}
   13c26:	4620      	mov	r0, r4
   13c28:	b009      	add	sp, #36	; 0x24
   13c2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   13c2e:	f814 3b01 	ldrb.w	r3, [r4], #1
   13c32:	f812 cb01 	ldrb.w	ip, [r2], #1
   13c36:	ea83 030c 	eor.w	r3, r3, ip
   13c3a:	f801 3b01 	strb.w	r3, [r1], #1
   13c3e:	e7cc      	b.n	13bda <smp_c1+0x40>
   13c40:	f812 1b01 	ldrb.w	r1, [r2], #1
   13c44:	f813 4b01 	ldrb.w	r4, [r3], #1
   13c48:	4061      	eors	r1, r4
   13c4a:	f802 1c01 	strb.w	r1, [r2, #-1]
   13c4e:	e7e2      	b.n	13c16 <smp_c1+0x7c>

00013c50 <legacy_pairing_confirm>:
{
   13c50:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   13c52:	f100 07b4 	add.w	r7, r0, #180	; 0xb4
{
   13c56:	4605      	mov	r5, r0
   13c58:	b085      	sub	sp, #20
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   13c5a:	2109      	movs	r1, #9
   13c5c:	4638      	mov	r0, r7
   13c5e:	f7ff fec6 	bl	139ee <atomic_test_bit>
   13c62:	bb90      	cbnz	r0, 13cca <legacy_pairing_confirm+0x7a>
			atomic_set_bit(&smp->allowed_cmds,
   13c64:	2104      	movs	r1, #4
   13c66:	f105 00b0 	add.w	r0, r5, #176	; 0xb0
   13c6a:	f7ff fdf2 	bl	13852 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   13c6e:	2103      	movs	r1, #3
   13c70:	4628      	mov	r0, r5
	struct bt_conn *conn = smp->chan.chan.conn;
   13c72:	682c      	ldr	r4, [r5, #0]
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   13c74:	f7ff fec1 	bl	139fa <smp_create_pdu.isra.0>
	if (!buf) {
   13c78:	4606      	mov	r6, r0
   13c7a:	b1c0      	cbz	r0, 13cae <legacy_pairing_confirm+0x5e>
	req = net_buf_add(buf, sizeof(*req));
   13c7c:	2110      	movs	r1, #16
   13c7e:	3008      	adds	r0, #8
   13c80:	f7f8 f86a 	bl	bd58 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   13c84:	f104 038a 	add.w	r3, r4, #138	; 0x8a
   13c88:	3483      	adds	r4, #131	; 0x83
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   13c8a:	9002      	str	r0, [sp, #8]
   13c8c:	9301      	str	r3, [sp, #4]
   13c8e:	9400      	str	r4, [sp, #0]
   13c90:	f105 03c0 	add.w	r3, r5, #192	; 0xc0
   13c94:	f105 02b9 	add.w	r2, r5, #185	; 0xb9
   13c98:	f105 01d7 	add.w	r1, r5, #215	; 0xd7
   13c9c:	f105 00f7 	add.w	r0, r5, #247	; 0xf7
   13ca0:	f7ff ff7b 	bl	13b9a <smp_c1>
   13ca4:	4604      	mov	r4, r0
   13ca6:	b120      	cbz	r0, 13cb2 <legacy_pairing_confirm+0x62>
		net_buf_unref(buf);
   13ca8:	4630      	mov	r0, r6
   13caa:	f7f7 fee3 	bl	ba74 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   13cae:	2008      	movs	r0, #8
   13cb0:	e009      	b.n	13cc6 <legacy_pairing_confirm+0x76>
	smp_send(smp, buf, NULL, NULL);
   13cb2:	4602      	mov	r2, r0
   13cb4:	4631      	mov	r1, r6
   13cb6:	4628      	mov	r0, r5
   13cb8:	f7f6 fa14 	bl	a0e4 <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   13cbc:	4621      	mov	r1, r4
   13cbe:	4638      	mov	r0, r7
   13cc0:	f7ff fdd1 	bl	13866 <atomic_clear_bit>
	return 0;
   13cc4:	2000      	movs	r0, #0
}
   13cc6:	b005      	add	sp, #20
   13cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   13cca:	2100      	movs	r1, #0
   13ccc:	4638      	mov	r0, r7
   13cce:	f7ff fdc0 	bl	13852 <atomic_set_bit>
   13cd2:	e7f7      	b.n	13cc4 <legacy_pairing_confirm+0x74>

00013cd4 <smp_pairing_confirm>:
{
   13cd4:	b570      	push	{r4, r5, r6, lr}
   13cd6:	4604      	mov	r4, r0
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   13cd8:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   13cda:	f100 05b4 	add.w	r5, r0, #180	; 0xb4
   13cde:	210a      	movs	r1, #10
   13ce0:	4628      	mov	r0, r5
   13ce2:	f7ff fdc0 	bl	13866 <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   13ce6:	4631      	mov	r1, r6
   13ce8:	2210      	movs	r2, #16
   13cea:	f104 00c7 	add.w	r0, r4, #199	; 0xc7
   13cee:	f7fe fa36 	bl	1215e <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   13cf2:	2105      	movs	r1, #5
   13cf4:	4628      	mov	r0, r5
   13cf6:	f7ff fe7a 	bl	139ee <atomic_test_bit>
   13cfa:	b920      	cbnz	r0, 13d06 <smp_pairing_confirm+0x32>
		return legacy_pairing_confirm(smp);
   13cfc:	4620      	mov	r0, r4
}
   13cfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
   13d02:	f7ff bfa5 	b.w	13c50 <legacy_pairing_confirm>
	switch (smp->method) {
   13d06:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
   13d0a:	2b01      	cmp	r3, #1
   13d0c:	d00b      	beq.n	13d26 <smp_pairing_confirm+0x52>
   13d0e:	2b02      	cmp	r3, #2
   13d10:	d115      	bne.n	13d3e <smp_pairing_confirm+0x6a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   13d12:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   13d16:	2104      	movs	r1, #4
   13d18:	f7ff fd9b 	bl	13852 <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
   13d1c:	4620      	mov	r0, r4
}
   13d1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   13d22:	f7f6 bafd 	b.w	a320 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   13d26:	2109      	movs	r1, #9
   13d28:	4628      	mov	r0, r5
   13d2a:	f7ff fe60 	bl	139ee <atomic_test_bit>
   13d2e:	2800      	cmp	r0, #0
   13d30:	d0ef      	beq.n	13d12 <smp_pairing_confirm+0x3e>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   13d32:	4628      	mov	r0, r5
   13d34:	2100      	movs	r1, #0
   13d36:	f7ff fd8c 	bl	13852 <atomic_set_bit>
			return 0;
   13d3a:	2000      	movs	r0, #0
}
   13d3c:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   13d3e:	2008      	movs	r0, #8
   13d40:	e7fc      	b.n	13d3c <smp_pairing_confirm+0x68>

00013d42 <bt_smp_request_ltk>:
{
   13d42:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   13d46:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   13d48:	4604      	mov	r4, r0
   13d4a:	e9cd 2300 	strd	r2, r3, [sp]
	smp = smp_chan_get(conn);
   13d4e:	f7f6 f987 	bl	a060 <smp_chan_get>
	if (!smp) {
   13d52:	4605      	mov	r5, r0
   13d54:	2800      	cmp	r0, #0
   13d56:	f000 809d 	beq.w	13e94 <bt_smp_request_ltk+0x152>
	if (ediv == 0U && rand == 0U &&
   13d5a:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   13d5e:	f1b9 0f00 	cmp.w	r9, #0
   13d62:	d12d      	bne.n	13dc0 <bt_smp_request_ltk+0x7e>
   13d64:	e9dd 2300 	ldrd	r2, r3, [sp]
   13d68:	4313      	orrs	r3, r2
   13d6a:	d129      	bne.n	13dc0 <bt_smp_request_ltk+0x7e>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   13d6c:	f100 08b4 	add.w	r8, r0, #180	; 0xb4
   13d70:	2103      	movs	r1, #3
   13d72:	4640      	mov	r0, r8
   13d74:	f7ff fe3b 	bl	139ee <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   13d78:	b310      	cbz	r0, 13dc0 <bt_smp_request_ltk+0x7e>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   13d7a:	2101      	movs	r1, #1
   13d7c:	4640      	mov	r0, r8
   13d7e:	f7ff fe36 	bl	139ee <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   13d82:	4606      	mov	r6, r0
   13d84:	b1e0      	cbz	r0, 13dc0 <bt_smp_request_ltk+0x7e>
	return MIN(req->max_key_size, rsp->max_key_size);
   13d86:	f895 40c4 	ldrb.w	r4, [r5, #196]	; 0xc4
   13d8a:	f895 30bd 	ldrb.w	r3, [r5, #189]	; 0xbd
		memcpy(ltk, smp->tk, enc_size);
   13d8e:	4638      	mov	r0, r7
	return MIN(req->max_key_size, rsp->max_key_size);
   13d90:	429c      	cmp	r4, r3
   13d92:	bf28      	it	cs
   13d94:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   13d96:	f105 01f7 	add.w	r1, r5, #247	; 0xf7
   13d9a:	4622      	mov	r2, r4
   13d9c:	f7fe f9df 	bl	1215e <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   13da0:	2c0f      	cmp	r4, #15
   13da2:	d805      	bhi.n	13db0 <bt_smp_request_ltk+0x6e>
			(void)memset(ltk + enc_size, 0,
   13da4:	4649      	mov	r1, r9
   13da6:	f1c4 0210 	rsb	r2, r4, #16
   13daa:	1938      	adds	r0, r7, r4
   13dac:	f7fe fa02 	bl	121b4 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   13db0:	2101      	movs	r1, #1
   13db2:	4640      	mov	r0, r8
   13db4:	f7ff fd4d 	bl	13852 <atomic_set_bit>
}
   13db8:	4630      	mov	r0, r6
   13dba:	b003      	add	sp, #12
   13dbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   13dc0:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   13dc4:	b983      	cbnz	r3, 13de8 <bt_smp_request_ltk+0xa6>
					     &conn->le.dst);
   13dc6:	f104 067c 	add.w	r6, r4, #124	; 0x7c
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   13dca:	4632      	mov	r2, r6
   13dcc:	2020      	movs	r0, #32
   13dce:	7a21      	ldrb	r1, [r4, #8]
   13dd0:	f7f7 fb8c 	bl	b4ec <bt_keys_find>
   13dd4:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
		if (!conn->le.keys) {
   13dd8:	b930      	cbnz	r0, 13de8 <bt_smp_request_ltk+0xa6>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
   13dda:	4632      	mov	r2, r6
   13ddc:	2001      	movs	r0, #1
   13dde:	7a21      	ldrb	r1, [r4, #8]
   13de0:	f7f7 fb84 	bl	b4ec <bt_keys_find>
   13de4:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
	if (ediv == 0U && rand == 0U &&
   13de8:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
   13dec:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   13df0:	b9ce      	cbnz	r6, 13e26 <bt_smp_request_ltk+0xe4>
   13df2:	e9dd 2300 	ldrd	r2, r3, [sp]
   13df6:	4313      	orrs	r3, r2
   13df8:	d115      	bne.n	13e26 <bt_smp_request_ltk+0xe4>
   13dfa:	2800      	cmp	r0, #0
   13dfc:	d03c      	beq.n	13e78 <bt_smp_request_ltk+0x136>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   13dfe:	89c3      	ldrh	r3, [r0, #14]
   13e00:	069a      	lsls	r2, r3, #26
   13e02:	d511      	bpl.n	13e28 <bt_smp_request_ltk+0xe6>
		enc_size = conn->le.keys->enc_size;
   13e04:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   13e06:	f100 011a 	add.w	r1, r0, #26
   13e0a:	4622      	mov	r2, r4
   13e0c:	4638      	mov	r0, r7
   13e0e:	f7fe f9a6 	bl	1215e <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   13e12:	2c0f      	cmp	r4, #15
   13e14:	d805      	bhi.n	13e22 <bt_smp_request_ltk+0xe0>
			(void)memset(ltk + enc_size, 0,
   13e16:	4631      	mov	r1, r6
   13e18:	f1c4 0210 	rsb	r2, r4, #16
   13e1c:	1938      	adds	r0, r7, r4
   13e1e:	f7fe f9c9 	bl	121b4 <memset>
		return true;
   13e22:	2601      	movs	r6, #1
   13e24:	e7c8      	b.n	13db8 <bt_smp_request_ltk+0x76>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   13e26:	b338      	cbz	r0, 13e78 <bt_smp_request_ltk+0x136>
   13e28:	89c3      	ldrh	r3, [r0, #14]
   13e2a:	07db      	lsls	r3, r3, #31
   13e2c:	d524      	bpl.n	13e78 <bt_smp_request_ltk+0x136>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   13e2e:	2208      	movs	r2, #8
   13e30:	4669      	mov	r1, sp
   13e32:	3040      	adds	r0, #64	; 0x40
   13e34:	f7fe f983 	bl	1213e <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   13e38:	b9f0      	cbnz	r0, 13e78 <bt_smp_request_ltk+0x136>
	    !memcmp(conn->le.keys->slave_ltk.ediv, &ediv, 2)) {
   13e3a:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   13e3e:	2202      	movs	r2, #2
   13e40:	a90a      	add	r1, sp, #40	; 0x28
   13e42:	3048      	adds	r0, #72	; 0x48
   13e44:	f7fe f97b 	bl	1213e <memcmp>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   13e48:	4606      	mov	r6, r0
   13e4a:	b9a8      	cbnz	r0, 13e78 <bt_smp_request_ltk+0x136>
		enc_size = conn->le.keys->enc_size;
   13e4c:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   13e50:	4638      	mov	r0, r7
		enc_size = conn->le.keys->enc_size;
   13e52:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   13e54:	314a      	adds	r1, #74	; 0x4a
   13e56:	4622      	mov	r2, r4
   13e58:	f7fe f981 	bl	1215e <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   13e5c:	2c0f      	cmp	r4, #15
   13e5e:	d805      	bhi.n	13e6c <bt_smp_request_ltk+0x12a>
			(void)memset(ltk + enc_size, 0,
   13e60:	4631      	mov	r1, r6
   13e62:	f1c4 0210 	rsb	r2, r4, #16
   13e66:	1938      	adds	r0, r7, r4
   13e68:	f7fe f9a4 	bl	121b4 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   13e6c:	2101      	movs	r1, #1
   13e6e:	f105 00b4 	add.w	r0, r5, #180	; 0xb4
   13e72:	f7ff fcee 	bl	13852 <atomic_set_bit>
		return true;
   13e76:	e7d4      	b.n	13e22 <bt_smp_request_ltk+0xe0>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   13e78:	210e      	movs	r1, #14
   13e7a:	f105 00b4 	add.w	r0, r5, #180	; 0xb4
   13e7e:	f7ff fdb6 	bl	139ee <atomic_test_bit>
   13e82:	b120      	cbz	r0, 13e8e <bt_smp_request_ltk+0x14c>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   13e84:	2202      	movs	r2, #2
   13e86:	2106      	movs	r1, #6
   13e88:	4620      	mov	r0, r4
   13e8a:	f7f2 f943 	bl	6114 <bt_conn_security_changed>
	smp_reset(smp);
   13e8e:	4628      	mov	r0, r5
   13e90:	f7ff fe42 	bl	13b18 <smp_reset>
	return false;
   13e94:	2600      	movs	r6, #0
   13e96:	e78f      	b.n	13db8 <bt_smp_request_ltk+0x76>

00013e98 <bt_smp_sign>:
   13e98:	f06f 0022 	mvn.w	r0, #34	; 0x22
   13e9c:	4770      	bx	lr

00013e9e <bt_smp_auth_passkey_confirm>:
{
   13e9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	smp = smp_chan_get(conn);
   13ea0:	f7f6 f8de 	bl	a060 <smp_chan_get>
	if (!smp) {
   13ea4:	4605      	mov	r5, r0
   13ea6:	b910      	cbnz	r0, 13eae <bt_smp_auth_passkey_confirm+0x10>
		return -EINVAL;
   13ea8:	f06f 0015 	mvn.w	r0, #21
}
   13eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER)) {
   13eae:	f100 06b4 	add.w	r6, r0, #180	; 0xb4
   13eb2:	2109      	movs	r1, #9
   13eb4:	4630      	mov	r0, r6
   13eb6:	f7ff fe1b 	bl	13af0 <atomic_test_and_clear_bit>
   13eba:	2800      	cmp	r0, #0
   13ebc:	d0f4      	beq.n	13ea8 <bt_smp_auth_passkey_confirm+0xa>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   13ebe:	2107      	movs	r1, #7
   13ec0:	4630      	mov	r0, r6
   13ec2:	f7ff fd94 	bl	139ee <atomic_test_bit>
   13ec6:	b128      	cbz	r0, 13ed4 <bt_smp_auth_passkey_confirm+0x36>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   13ec8:	2108      	movs	r1, #8
   13eca:	4630      	mov	r0, r6
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   13ecc:	f7ff fcc1 	bl	13852 <atomic_set_bit>
	return 0;
   13ed0:	2000      	movs	r0, #0
   13ed2:	e7eb      	b.n	13eac <bt_smp_auth_passkey_confirm+0xe>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   13ed4:	210f      	movs	r1, #15
   13ed6:	4630      	mov	r0, r6
   13ed8:	f7ff fd89 	bl	139ee <atomic_test_bit>
   13edc:	4604      	mov	r4, r0
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   13ede:	2108      	movs	r1, #8
   13ee0:	4630      	mov	r0, r6
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   13ee2:	2c00      	cmp	r4, #0
   13ee4:	d1f2      	bne.n	13ecc <bt_smp_auth_passkey_confirm+0x2e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   13ee6:	f7ff fd82 	bl	139ee <atomic_test_bit>
   13eea:	2800      	cmp	r0, #0
   13eec:	d0f0      	beq.n	13ed0 <bt_smp_auth_passkey_confirm+0x32>
		err = compute_and_check_and_send_slave_dhcheck(smp);
   13eee:	4628      	mov	r0, r5
   13ef0:	f7f6 f910 	bl	a114 <compute_and_check_and_send_slave_dhcheck>
		if (err) {
   13ef4:	4601      	mov	r1, r0
   13ef6:	2800      	cmp	r0, #0
   13ef8:	d0ea      	beq.n	13ed0 <bt_smp_auth_passkey_confirm+0x32>
			smp_error(smp, err);
   13efa:	4628      	mov	r0, r5
   13efc:	f7ff fe2f 	bl	13b5e <smp_error>
	return 0;
   13f00:	4620      	mov	r0, r4
   13f02:	e7d3      	b.n	13eac <bt_smp_auth_passkey_confirm+0xe>

00013f04 <bt_smp_auth_cancel>:
{
   13f04:	b510      	push	{r4, lr}
	smp = smp_chan_get(conn);
   13f06:	f7f6 f8ab 	bl	a060 <smp_chan_get>
	if (!smp) {
   13f0a:	4604      	mov	r4, r0
   13f0c:	b910      	cbnz	r0, 13f14 <bt_smp_auth_cancel+0x10>
		return -EINVAL;
   13f0e:	f06f 0015 	mvn.w	r0, #21
}
   13f12:	bd10      	pop	{r4, pc}
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER)) {
   13f14:	2109      	movs	r1, #9
   13f16:	30b4      	adds	r0, #180	; 0xb4
   13f18:	f7ff fdea 	bl	13af0 <atomic_test_and_clear_bit>
   13f1c:	2800      	cmp	r0, #0
   13f1e:	d0f6      	beq.n	13f0e <bt_smp_auth_cancel+0xa>
	switch (smp->method) {
   13f20:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
   13f24:	2b05      	cmp	r3, #5
   13f26:	d810      	bhi.n	13f4a <bt_smp_auth_cancel+0x46>
   13f28:	e8df f003 	tbb	[pc, r3]
   13f2c:	0903030d 	.word	0x0903030d
   13f30:	0b0f      	.short	0x0b0f
		return smp_error(smp, BT_SMP_ERR_PASSKEY_ENTRY_FAILED);
   13f32:	2101      	movs	r1, #1
		return smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   13f34:	4620      	mov	r0, r4
}
   13f36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   13f3a:	f7ff be10 	b.w	13b5e <smp_error>
		return smp_error(smp, BT_SMP_ERR_CONFIRM_FAILED);
   13f3e:	2104      	movs	r1, #4
   13f40:	e7f8      	b.n	13f34 <bt_smp_auth_cancel+0x30>
		return smp_error(smp, BT_SMP_ERR_OOB_NOT_AVAIL);
   13f42:	2102      	movs	r1, #2
   13f44:	e7f6      	b.n	13f34 <bt_smp_auth_cancel+0x30>
		return smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   13f46:	2108      	movs	r1, #8
   13f48:	e7f4      	b.n	13f34 <bt_smp_auth_cancel+0x30>
	switch (smp->method) {
   13f4a:	2000      	movs	r0, #0
   13f4c:	e7e1      	b.n	13f12 <bt_smp_auth_cancel+0xe>

00013f4e <bt_smp_auth_pairing_confirm>:
{
   13f4e:	b538      	push	{r3, r4, r5, lr}
	smp = smp_chan_get(conn);
   13f50:	f7f6 f886 	bl	a060 <smp_chan_get>
	if (!smp) {
   13f54:	4604      	mov	r4, r0
   13f56:	b910      	cbnz	r0, 13f5e <bt_smp_auth_pairing_confirm+0x10>
		return -EINVAL;
   13f58:	f06f 0015 	mvn.w	r0, #21
}
   13f5c:	bd38      	pop	{r3, r4, r5, pc}
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER)) {
   13f5e:	f100 05b4 	add.w	r5, r0, #180	; 0xb4
   13f62:	2109      	movs	r1, #9
   13f64:	4628      	mov	r0, r5
   13f66:	f7ff fdc3 	bl	13af0 <atomic_test_and_clear_bit>
   13f6a:	2800      	cmp	r0, #0
   13f6c:	d0f4      	beq.n	13f58 <bt_smp_auth_pairing_confirm+0xa>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   13f6e:	2105      	movs	r1, #5
   13f70:	4628      	mov	r0, r5
   13f72:	f7ff fd3c 	bl	139ee <atomic_test_bit>
   13f76:	4603      	mov	r3, r0
   13f78:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   13f7c:	b933      	cbnz	r3, 13f8c <bt_smp_auth_pairing_confirm+0x3e>
		atomic_set_bit(&smp->allowed_cmds,
   13f7e:	2103      	movs	r1, #3
   13f80:	f7ff fc67 	bl	13852 <atomic_set_bit>
		return send_pairing_rsp(smp);
   13f84:	4620      	mov	r0, r4
   13f86:	f7ff fd71 	bl	13a6c <send_pairing_rsp>
   13f8a:	e7e7      	b.n	13f5c <bt_smp_auth_pairing_confirm+0xe>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   13f8c:	210c      	movs	r1, #12
   13f8e:	f7ff fc60 	bl	13852 <atomic_set_bit>
	if (send_pairing_rsp(smp)) {
   13f92:	4620      	mov	r0, r4
   13f94:	f7ff fd6a 	bl	13a6c <send_pairing_rsp>
		return -EIO;
   13f98:	2800      	cmp	r0, #0
   13f9a:	bf0c      	ite	eq
   13f9c:	2000      	moveq	r0, #0
   13f9e:	f06f 0004 	mvnne.w	r0, #4
   13fa2:	e7db      	b.n	13f5c <bt_smp_auth_pairing_confirm+0xe>

00013fa4 <id_add>:
	bt_id_add(keys);
   13fa4:	f7f0 bcd4 	b.w	4950 <bt_id_add>

00013fa8 <bt_keys_get_type>:
{
   13fa8:	b570      	push	{r4, r5, r6, lr}
   13faa:	4604      	mov	r4, r0
   13fac:	460d      	mov	r5, r1
   13fae:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   13fb0:	f7f7 fa9c 	bl	b4ec <bt_keys_find>
	if (keys) {
   13fb4:	b938      	cbnz	r0, 13fc6 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   13fb6:	4631      	mov	r1, r6
   13fb8:	4628      	mov	r0, r5
   13fba:	f7f7 fa57 	bl	b46c <bt_keys_get_addr>
	if (!keys) {
   13fbe:	b110      	cbz	r0, 13fc6 <bt_keys_get_type+0x1e>
	keys->keys |= type;
   13fc0:	89c3      	ldrh	r3, [r0, #14]
   13fc2:	431c      	orrs	r4, r3
   13fc4:	81c4      	strh	r4, [r0, #14]
}
   13fc6:	bd70      	pop	{r4, r5, r6, pc}

00013fc8 <bt_keys_add_type>:
	keys->keys |= type;
   13fc8:	89c3      	ldrh	r3, [r0, #14]
   13fca:	4319      	orrs	r1, r3
   13fcc:	81c1      	strh	r1, [r0, #14]
}
   13fce:	4770      	bx	lr

00013fd0 <fixed_data_unref>:
}
   13fd0:	4770      	bx	lr

00013fd2 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   13fd2:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   13fd4:	6849      	ldr	r1, [r1, #4]
   13fd6:	6809      	ldr	r1, [r1, #0]
   13fd8:	f7f7 bc04 	b.w	b7e4 <net_buf_alloc_len>

00013fdc <net_buf_simple_push_le16>:
{
   13fdc:	b510      	push	{r4, lr}
   13fde:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_push(buf, sizeof(val)));
   13fe0:	2102      	movs	r1, #2
   13fe2:	f7f7 fe55 	bl	bc90 <net_buf_simple_push>
	dst[0] = val;
   13fe6:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   13fe8:	0a24      	lsrs	r4, r4, #8
   13fea:	7044      	strb	r4, [r0, #1]
}
   13fec:	bd10      	pop	{r4, pc}

00013fee <net_buf_simple_push_u8>:
{
   13fee:	b510      	push	{r4, lr}
   13ff0:	460c      	mov	r4, r1
	u8_t *data = net_buf_simple_push(buf, 1);
   13ff2:	2101      	movs	r1, #1
   13ff4:	f7f7 fe4c 	bl	bc90 <net_buf_simple_push>
	*data = val;
   13ff8:	7004      	strb	r4, [r0, #0]
}
   13ffa:	bd10      	pop	{r4, pc}

00013ffc <net_buf_simple_pull_le16>:
{
   13ffc:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((u16_t *)buf->data);
   13ffe:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   14000:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
   14002:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   14004:	f7f7 fe66 	bl	bcd4 <net_buf_simple_pull>
}
   14008:	4620      	mov	r0, r4
   1400a:	bd10      	pop	{r4, pc}

0001400c <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   1400c:	6802      	ldr	r2, [r0, #0]
   1400e:	6880      	ldr	r0, [r0, #8]
}
   14010:	1a10      	subs	r0, r2, r0
   14012:	4770      	bx	lr

00014014 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   14014:	8883      	ldrh	r3, [r0, #4]
   14016:	88c2      	ldrh	r2, [r0, #6]
   14018:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1401a:	6803      	ldr	r3, [r0, #0]
   1401c:	6880      	ldr	r0, [r0, #8]
   1401e:	1a18      	subs	r0, r3, r0
}
   14020:	1a10      	subs	r0, r2, r0
   14022:	4770      	bx	lr

00014024 <net_buf_simple_add_mem>:
{
   14024:	b538      	push	{r3, r4, r5, lr}
   14026:	460d      	mov	r5, r1
   14028:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1402a:	4611      	mov	r1, r2
   1402c:	f7f7 fe94 	bl	bd58 <net_buf_simple_add>
   14030:	4622      	mov	r2, r4
   14032:	4629      	mov	r1, r5
}
   14034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   14038:	f7fe b891 	b.w	1215e <memcpy>

0001403c <net_buf_simple_add_u8>:
{
   1403c:	b510      	push	{r4, lr}
   1403e:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   14040:	2101      	movs	r1, #1
   14042:	f7f7 fe89 	bl	bd58 <net_buf_simple_add>
	*u8 = val;
   14046:	7004      	strb	r4, [r0, #0]
}
   14048:	bd10      	pop	{r4, pc}

0001404a <net_buf_simple_add_le16>:
{
   1404a:	b510      	push	{r4, lr}
   1404c:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   1404e:	2102      	movs	r1, #2
   14050:	f7f7 fe82 	bl	bd58 <net_buf_simple_add>
	dst[0] = val;
   14054:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   14056:	0a24      	lsrs	r4, r4, #8
   14058:	7044      	strb	r4, [r0, #1]
}
   1405a:	bd10      	pop	{r4, pc}

0001405c <net_buf_append_bytes>:
{
   1405c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14060:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   14062:	4680      	mov	r8, r0
   14064:	460e      	mov	r6, r1
   14066:	4617      	mov	r7, r2
	struct net_buf *frag = net_buf_frag_last(buf);
   14068:	f7f7 fd64 	bl	bb34 <net_buf_frag_last>
	size_t added_len = 0;
   1406c:	f04f 0900 	mov.w	r9, #0
	struct net_buf *frag = net_buf_frag_last(buf);
   14070:	4604      	mov	r4, r0
		u16_t count = MIN(len, net_buf_tailroom(frag));
   14072:	3408      	adds	r4, #8
   14074:	4620      	mov	r0, r4
   14076:	f7ff ffcd 	bl	14014 <net_buf_simple_tailroom>
   1407a:	42b0      	cmp	r0, r6
   1407c:	bf94      	ite	ls
   1407e:	fa1f fa80 	uxthls.w	sl, r0
   14082:	fa1f fa86 	uxthhi.w	sl, r6
		net_buf_add_mem(frag, value8, count);
   14086:	4639      	mov	r1, r7
   14088:	4652      	mov	r2, sl
   1408a:	4620      	mov	r0, r4
   1408c:	f7ff ffca 	bl	14024 <net_buf_simple_add_mem>
		if (len == 0) {
   14090:	ebb6 060a 	subs.w	r6, r6, sl
		added_len += count;
   14094:	44d1      	add	r9, sl
		value8 += count;
   14096:	4457      	add	r7, sl
		if (len == 0) {
   14098:	d00a      	beq.n	140b0 <net_buf_append_bytes+0x54>
		frag = allocate_cb(timeout, user_data);
   1409a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1409e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   140a0:	47a8      	blx	r5
		if (!frag) {
   140a2:	4604      	mov	r4, r0
   140a4:	b120      	cbz	r0, 140b0 <net_buf_append_bytes+0x54>
		net_buf_frag_add(buf, frag);
   140a6:	4601      	mov	r1, r0
   140a8:	4640      	mov	r0, r8
   140aa:	f7f7 fd8b 	bl	bbc4 <net_buf_frag_add>
	do {
   140ae:	e7e0      	b.n	14072 <net_buf_append_bytes+0x16>
}
   140b0:	4648      	mov	r0, r9
   140b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000140b6 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   140b6:	6843      	ldr	r3, [r0, #4]
}
   140b8:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   140ba:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   140bc:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   140be:	600b      	str	r3, [r1, #0]
}
   140c0:	4770      	bx	lr

000140c2 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   140c2:	6843      	ldr	r3, [r0, #4]
   140c4:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   140c6:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   140c8:	4042      	eors	r2, r0
   140ca:	400a      	ands	r2, r1
   140cc:	4042      	eors	r2, r0
    p_reg->OUT = value;
   140ce:	605a      	str	r2, [r3, #4]
}
   140d0:	2000      	movs	r0, #0
   140d2:	4770      	bx	lr

000140d4 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   140d4:	6843      	ldr	r3, [r0, #4]
}
   140d6:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   140d8:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   140da:	6099      	str	r1, [r3, #8]
}
   140dc:	4770      	bx	lr

000140de <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   140de:	6843      	ldr	r3, [r0, #4]
}
   140e0:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   140e2:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   140e4:	60d9      	str	r1, [r3, #12]
}
   140e6:	4770      	bx	lr

000140e8 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   140e8:	6843      	ldr	r3, [r0, #4]
}
   140ea:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   140ec:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   140ee:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   140f0:	404b      	eors	r3, r1
    p_reg->OUT = value;
   140f2:	6053      	str	r3, [r2, #4]
}
   140f4:	4770      	bx	lr

000140f6 <nrf_gpio_cfg_sense_set>:
{
   140f6:	b513      	push	{r0, r1, r4, lr}
   140f8:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   140fa:	a801      	add	r0, sp, #4
{
   140fc:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   140fe:	f7f7 fe4d 	bl	bd9c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   14102:	9b01      	ldr	r3, [sp, #4]
   14104:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   14108:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   1410c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   14110:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   14114:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   14118:	b002      	add	sp, #8
   1411a:	bd10      	pop	{r4, pc}

0001411c <check_level_trigger_pins>:
{
   1411c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u32_t bit = 1U << pin;
   14120:	2601      	movs	r6, #1
	u32_t pin = 0U;
   14122:	2700      	movs	r7, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   14124:	68c3      	ldr	r3, [r0, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   14126:	f8d0 8004 	ldr.w	r8, [r0, #4]
	u32_t out = data->int_en & data->pin_int_en;
   1412a:	e9d3 2403 	ldrd	r2, r4, [r3, #12]
   1412e:	4014      	ands	r4, r2
	out &= ~data->trig_edge & ~data->double_edge;
   14130:	e9d3 2106 	ldrd	r2, r1, [r3, #24]
   14134:	430a      	orrs	r2, r1
   14136:	ea24 0402 	bic.w	r4, r4, r2
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   1413a:	f8d8 2004 	ldr.w	r2, [r8, #4]
	u32_t pin_states = ~(port_in ^ data->int_active_level);
   1413e:	695b      	ldr	r3, [r3, #20]
    return p_reg->IN;
   14140:	6915      	ldr	r5, [r2, #16]
   14142:	405d      	eors	r5, r3
	u32_t out = pin_states & level_pins;
   14144:	ea24 0505 	bic.w	r5, r4, r5
	while (level_pins) {
   14148:	b914      	cbnz	r4, 14150 <check_level_trigger_pins+0x34>
}
   1414a:	4628      	mov	r0, r5
   1414c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   14150:	4234      	tst	r4, r6
   14152:	d00a      	beq.n	1416a <check_level_trigger_pins+0x4e>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   14154:	f898 3008 	ldrb.w	r3, [r8, #8]
   14158:	f007 001f 	and.w	r0, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1415c:	2100      	movs	r1, #0
   1415e:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   14162:	f7ff ffc8 	bl	140f6 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   14166:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   1416a:	3701      	adds	r7, #1
		bit <<= 1;
   1416c:	0076      	lsls	r6, r6, #1
   1416e:	e7eb      	b.n	14148 <check_level_trigger_pins+0x2c>

00014170 <gpio_nrfx_pin_disable_callback>:
	WRITE_BIT(data->int_en, pin, enable);
   14170:	2301      	movs	r3, #1
{
   14172:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
   14174:	68c4      	ldr	r4, [r0, #12]
	WRITE_BIT(data->int_en, pin, enable);
   14176:	fa03 f201 	lsl.w	r2, r3, r1
   1417a:	6923      	ldr	r3, [r4, #16]
   1417c:	ea23 0302 	bic.w	r3, r3, r2
   14180:	6123      	str	r3, [r4, #16]
}
   14182:	bc10      	pop	{r4}
	return gpiote_pin_int_cfg(port, pin);
   14184:	f7f7 bee6 	b.w	bf54 <gpiote_pin_int_cfg>

00014188 <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
   14188:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   1418c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   14190:	4606      	mov	r6, r0
   14192:	460f      	mov	r7, r1
   14194:	4690      	mov	r8, r2
   14196:	4699      	mov	r9, r3
	struct gpio_nrfx_data *data = get_port_data(port);
   14198:	68c4      	ldr	r4, [r0, #12]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1419a:	d13a      	bne.n	14212 <gpio_nrfx_pin_interrupt_configure+0x8a>
	u32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1419c:	6843      	ldr	r3, [r0, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1419e:	a801      	add	r0, sp, #4
   141a0:	7a1a      	ldrb	r2, [r3, #8]
   141a2:	f001 031f 	and.w	r3, r1, #31
   141a6:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   141aa:	9301      	str	r3, [sp, #4]
   141ac:	f7f7 fdf6 	bl	bd9c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   141b0:	9b01      	ldr	r3, [sp, #4]
   141b2:	3380      	adds	r3, #128	; 0x80
   141b4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   141b8:	07db      	lsls	r3, r3, #31
   141ba:	d434      	bmi.n	14226 <gpio_nrfx_pin_interrupt_configure+0x9e>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   141bc:	2501      	movs	r5, #1
   141be:	68e3      	ldr	r3, [r4, #12]
   141c0:	40bd      	lsls	r5, r7
   141c2:	431d      	orrs	r5, r3
   141c4:	60e5      	str	r5, [r4, #12]
	WRITE_BIT(data->int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   141c6:	2501      	movs	r5, #1
   141c8:	6923      	ldr	r3, [r4, #16]
   141ca:	40bd      	lsls	r5, r7
   141cc:	f5b8 5f00 	cmp.w	r8, #8192	; 0x2000
   141d0:	bf14      	ite	ne
   141d2:	432b      	orrne	r3, r5
   141d4:	43ab      	biceq	r3, r5
   141d6:	6123      	str	r3, [r4, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   141d8:	69a3      	ldr	r3, [r4, #24]
   141da:	f5b8 3fa0 	cmp.w	r8, #81920	; 0x14000
   141de:	bf0c      	ite	eq
   141e0:	432b      	orreq	r3, r5
   141e2:	43ab      	bicne	r3, r5
   141e4:	61a3      	str	r3, [r4, #24]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   141e6:	69e3      	ldr	r3, [r4, #28]
   141e8:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
   141ec:	bf0c      	ite	eq
   141ee:	432b      	orreq	r3, r5
   141f0:	43ab      	bicne	r3, r5
   141f2:	61e3      	str	r3, [r4, #28]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   141f4:	6963      	ldr	r3, [r4, #20]
   141f6:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
   141fa:	bf0c      	ite	eq
   141fc:	431d      	orreq	r5, r3
   141fe:	ea23 0505 	bicne.w	r5, r3, r5
	return gpiote_pin_int_cfg(port, pin);
   14202:	4639      	mov	r1, r7
   14204:	4630      	mov	r0, r6
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   14206:	6165      	str	r5, [r4, #20]
	return gpiote_pin_int_cfg(port, pin);
   14208:	f7f7 fea4 	bl	bf54 <gpiote_pin_int_cfg>
}
   1420c:	b003      	add	sp, #12
   1420e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   14212:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   14216:	d1d1      	bne.n	141bc <gpio_nrfx_pin_interrupt_configure+0x34>
   14218:	2501      	movs	r5, #1
   1421a:	fa05 f301 	lsl.w	r3, r5, r1
   1421e:	68e5      	ldr	r5, [r4, #12]
   14220:	ea25 0503 	bic.w	r5, r5, r3
   14224:	e7ce      	b.n	141c4 <gpio_nrfx_pin_interrupt_configure+0x3c>
		return -ENOTSUP;
   14226:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1422a:	e7ef      	b.n	1420c <gpio_nrfx_pin_interrupt_configure+0x84>

0001422c <cfg_level_pins>:
{
   1422c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u32_t bit = 1U << pin;
   14230:	2701      	movs	r7, #1
	u32_t pin = 0U;
   14232:	2600      	movs	r6, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
   14234:	68c5      	ldr	r5, [r0, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   14236:	f8d0 8004 	ldr.w	r8, [r0, #4]
	u32_t out = data->int_en & data->pin_int_en;
   1423a:	e9d5 3403 	ldrd	r3, r4, [r5, #12]
   1423e:	401c      	ands	r4, r3
	out &= ~data->trig_edge & ~data->double_edge;
   14240:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
   14244:	4313      	orrs	r3, r2
   14246:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
   1424a:	b90c      	cbnz	r4, 14250 <cfg_level_pins+0x24>
}
   1424c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   14250:	4227      	tst	r7, r4
   14252:	d010      	beq.n	14276 <cfg_level_pins+0x4a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   14254:	6969      	ldr	r1, [r5, #20]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   14256:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1425a:	40f1      	lsrs	r1, r6
   1425c:	f001 0101 	and.w	r1, r1, #1
   14260:	f1c1 0103 	rsb	r1, r1, #3
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   14264:	f006 001f 	and.w	r0, r6, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   14268:	b2c9      	uxtb	r1, r1
   1426a:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   1426e:	f7ff ff42 	bl	140f6 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   14272:	ea24 0407 	bic.w	r4, r4, r7
		++pin;
   14276:	3601      	adds	r6, #1
		bit <<= 1;
   14278:	007f      	lsls	r7, r7, #1
   1427a:	e7e6      	b.n	1424a <cfg_level_pins+0x1e>

0001427c <gpio_nrfx_pin_enable_callback>:
	WRITE_BIT(data->int_en, pin, enable);
   1427c:	2301      	movs	r3, #1
{
   1427e:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
   14280:	68c4      	ldr	r4, [r0, #12]
	WRITE_BIT(data->int_en, pin, enable);
   14282:	fa03 f201 	lsl.w	r2, r3, r1
   14286:	6923      	ldr	r3, [r4, #16]
   14288:	4313      	orrs	r3, r2
   1428a:	6123      	str	r3, [r4, #16]
}
   1428c:	bc10      	pop	{r4}
	return gpiote_pin_int_cfg(port, pin);
   1428e:	f7f7 be61 	b.w	bf54 <gpiote_pin_int_cfg>

00014292 <vipm_nrf_max_data_size_get>:
static inline int z_impl_ipm_max_data_size_get(struct device *ipmdev)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->driver_api;

	return api->max_data_size_get(ipmdev);
   14292:	6883      	ldr	r3, [r0, #8]
   14294:	689b      	ldr	r3, [r3, #8]
   14296:	4718      	bx	r3

00014298 <vipm_nrf_max_id_val_get>:
}
   14298:	2000      	movs	r0, #0
   1429a:	4770      	bx	lr

0001429c <vipm_nrf_1_set_enabled>:
UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   1429c:	b508      	push	{r3, lr}
   1429e:	b139      	cbz	r1, 142b0 <vipm_nrf_1_set_enabled+0x14>
   142a0:	202a      	movs	r0, #42	; 0x2a
   142a2:	f7ee fd87 	bl	2db4 <arch_irq_enable>
   142a6:	2001      	movs	r0, #1
   142a8:	f7f8 fe7c 	bl	cfa4 <nrfx_ipc_receive_event_enable>
   142ac:	2000      	movs	r0, #0
   142ae:	bd08      	pop	{r3, pc}
   142b0:	2001      	movs	r0, #1
   142b2:	f7f8 fe99 	bl	cfe8 <nrfx_ipc_receive_event_disable>
   142b6:	e7f9      	b.n	142ac <vipm_nrf_1_set_enabled+0x10>

000142b8 <flash_nrf_write_protection>:
}
   142b8:	2000      	movs	r0, #0
   142ba:	4770      	bx	lr

000142bc <is_regular_addr_valid>:
{
   142bc:	b538      	push	{r3, r4, r5, lr}
   142be:	4604      	mov	r4, r0
   142c0:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   142c2:	f000 fa26 	bl	14712 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   142c6:	4284      	cmp	r4, r0
   142c8:	d209      	bcs.n	142de <is_regular_addr_valid+0x22>
   142ca:	2c00      	cmp	r4, #0
   142cc:	db07      	blt.n	142de <is_regular_addr_valid+0x22>
	    addr < 0 ||
   142ce:	42a8      	cmp	r0, r5
   142d0:	d305      	bcc.n	142de <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   142d2:	442c      	add	r4, r5
	    len > flash_size ||
   142d4:	4284      	cmp	r4, r0
   142d6:	bf8c      	ite	hi
   142d8:	2000      	movhi	r0, #0
   142da:	2001      	movls	r0, #1
}
   142dc:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   142de:	2000      	movs	r0, #0
   142e0:	e7fc      	b.n	142dc <is_regular_addr_valid+0x20>

000142e2 <flash_nrf_read>:
{
   142e2:	b570      	push	{r4, r5, r6, lr}
   142e4:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   142e6:	4619      	mov	r1, r3
   142e8:	4628      	mov	r0, r5
{
   142ea:	4616      	mov	r6, r2
   142ec:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   142ee:	f7ff ffe5 	bl	142bc <is_regular_addr_valid>
   142f2:	b138      	cbz	r0, 14304 <flash_nrf_read+0x22>
	if (!len) {
   142f4:	b14c      	cbz	r4, 1430a <flash_nrf_read+0x28>
	memcpy(data, (void *)addr, len);
   142f6:	4622      	mov	r2, r4
   142f8:	4629      	mov	r1, r5
   142fa:	4630      	mov	r0, r6
   142fc:	f7fd ff2f 	bl	1215e <memcpy>
	return 0;
   14300:	2000      	movs	r0, #0
}
   14302:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   14304:	f06f 0015 	mvn.w	r0, #21
   14308:	e7fb      	b.n	14302 <flash_nrf_read+0x20>
		return 0;
   1430a:	4620      	mov	r0, r4
   1430c:	e7f9      	b.n	14302 <flash_nrf_read+0x20>

0001430e <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
   1430e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   14312:	461e      	mov	r6, r3
	off_t group_offs = 0;
	u32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
   14314:	6883      	ldr	r3, [r0, #8]
{
   14316:	460c      	mov	r4, r1
	api->page_layout(dev, &layout, &layout_size);
   14318:	691b      	ldr	r3, [r3, #16]
   1431a:	4669      	mov	r1, sp
{
   1431c:	4617      	mov	r7, r2
	api->page_layout(dev, &layout, &layout_size);
   1431e:	aa01      	add	r2, sp, #4
   14320:	4798      	blx	r3

	while (layout_size--) {
   14322:	e9dd 1000 	ldrd	r1, r0, [sp]
   14326:	2300      	movs	r3, #0
	off_t end = 0;
   14328:	461d      	mov	r5, r3
	off_t group_offs = 0;
   1432a:	469e      	mov	lr, r3
	size_t page_count = 0;
   1432c:	469c      	mov	ip, r3
   1432e:	f100 38ff 	add.w	r8, r0, #4294967295
	while (layout_size--) {
   14332:	f1b8 3fff 	cmp.w	r8, #4294967295
   14336:	d102      	bne.n	1433e <flash_get_page_info+0x30>
		page_count += layout->pages_count;

		layout++;
	}

	return -EINVAL; /* page of the index doesn't exist */
   14338:	f06f 0015 	mvn.w	r0, #21
   1433c:	e018      	b.n	14370 <flash_get_page_info+0x62>
		if (use_addr) {
   1433e:	680a      	ldr	r2, [r1, #0]
   14340:	b1cf      	cbz	r7, 14376 <flash_get_page_info+0x68>
			end += layout->pages_count * layout->pages_size;
   14342:	6848      	ldr	r0, [r1, #4]
   14344:	fb00 5502 	mla	r5, r0, r2, r5
		if (offs < end) {
   14348:	42a5      	cmp	r5, r4
   1434a:	f108 38ff 	add.w	r8, r8, #4294967295
   1434e:	dd17      	ble.n	14380 <flash_get_page_info+0x72>
   14350:	b103      	cbz	r3, 14354 <flash_get_page_info+0x46>
   14352:	9100      	str	r1, [sp, #0]
			info->size = layout->pages_size;
   14354:	9b00      	ldr	r3, [sp, #0]
   14356:	685b      	ldr	r3, [r3, #4]
   14358:	6073      	str	r3, [r6, #4]
			if (use_addr) {
   1435a:	b177      	cbz	r7, 1437a <flash_get_page_info+0x6c>
				num_in_group = (offs - group_offs) /
   1435c:	eba4 040e 	sub.w	r4, r4, lr
   14360:	fbb4 f4f3 	udiv	r4, r4, r3
			return 0;
   14364:	2000      	movs	r0, #0
			info->start_offset = group_offs +
   14366:	fb04 e303 	mla	r3, r4, r3, lr
			info->index = page_count + num_in_group;
   1436a:	4464      	add	r4, ip
			info->start_offset = group_offs +
   1436c:	6033      	str	r3, [r6, #0]
			info->index = page_count + num_in_group;
   1436e:	60b4      	str	r4, [r6, #8]
}
   14370:	b002      	add	sp, #8
   14372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			end += layout->pages_count;
   14376:	4415      	add	r5, r2
   14378:	e7e6      	b.n	14348 <flash_get_page_info+0x3a>
				num_in_group = offs - page_count;
   1437a:	eba4 040c 	sub.w	r4, r4, ip
   1437e:	e7f1      	b.n	14364 <flash_get_page_info+0x56>
		group_offs += layout->pages_count * layout->pages_size;
   14380:	684b      	ldr	r3, [r1, #4]
		page_count += layout->pages_count;
   14382:	4494      	add	ip, r2
		group_offs += layout->pages_count * layout->pages_size;
   14384:	fb03 ee02 	mla	lr, r3, r2, lr
		layout++;
   14388:	3108      	adds	r1, #8
   1438a:	2301      	movs	r3, #1
   1438c:	e7d1      	b.n	14332 <flash_get_page_info+0x24>

0001438e <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(struct device *dev, off_t offs,
				      struct flash_pages_info *info)
{
   1438e:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, true, info);
   14390:	2201      	movs	r2, #1
   14392:	f7ff bfbc 	b.w	1430e <flash_get_page_info>

00014396 <flash_page_foreach>:

	return count;
}

void flash_page_foreach(struct device *dev, flash_page_cb cb, void *data)
{
   14396:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->driver_api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
   1439a:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
   1439c:	6883      	ldr	r3, [r0, #8]
{
   1439e:	b086      	sub	sp, #24
   143a0:	4688      	mov	r8, r1
   143a2:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   143a4:	691b      	ldr	r3, [r3, #16]
   143a6:	aa02      	add	r2, sp, #8
   143a8:	a901      	add	r1, sp, #4
   143aa:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
   143ac:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   143ae:	4625      	mov	r5, r4
   143b0:	9b02      	ldr	r3, [sp, #8]
   143b2:	42ab      	cmp	r3, r5
   143b4:	d802      	bhi.n	143bc <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   143b6:	b006      	add	sp, #24
   143b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
   143bc:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
   143be:	9f01      	ldr	r7, [sp, #4]
   143c0:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
   143c4:	687b      	ldr	r3, [r7, #4]
   143c6:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   143c8:	683a      	ldr	r2, [r7, #0]
   143ca:	eb0a 0306 	add.w	r3, sl, r6
   143ce:	42b2      	cmp	r2, r6
   143d0:	d802      	bhi.n	143d8 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   143d2:	469a      	mov	sl, r3
   143d4:	3501      	adds	r5, #1
   143d6:	e7eb      	b.n	143b0 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   143d8:	4649      	mov	r1, r9
   143da:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   143dc:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   143de:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   143e0:	47c0      	blx	r8
   143e2:	2800      	cmp	r0, #0
   143e4:	d0e7      	beq.n	143b6 <flash_page_foreach+0x20>
			off += page_info.size;
   143e6:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   143e8:	3601      	adds	r6, #1
			off += page_info.size;
   143ea:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   143ec:	e7ec      	b.n	143c8 <flash_page_foreach+0x32>

000143ee <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   143ee:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   143f0:	6843      	ldr	r3, [r0, #4]
	if (data->int_driven->disable_tx_irq &&
   143f2:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   143f4:	681b      	ldr	r3, [r3, #0]
	if (data->int_driven->disable_tx_irq &&
   143f6:	7b91      	ldrb	r1, [r2, #14]
   143f8:	b159      	cbz	r1, 14412 <uarte_nrfx_isr_int+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   143fa:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   143fe:	b141      	cbz	r1, 14412 <uarte_nrfx_isr_int+0x24>
    p_reg->INTENCLR = mask;
   14400:	f44f 7180 	mov.w	r1, #256	; 0x100
   14404:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14408:	2101      	movs	r1, #1
   1440a:	60d9      	str	r1, [r3, #12]
		data->int_driven->disable_tx_irq = false;
   1440c:	2300      	movs	r3, #0
   1440e:	7393      	strb	r3, [r2, #14]
		return;
   14410:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14412:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   14416:	b111      	cbz	r1, 1441e <uarte_nrfx_isr_int+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14418:	2100      	movs	r1, #0
   1441a:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   1441e:	6813      	ldr	r3, [r2, #0]
   14420:	b10b      	cbz	r3, 14426 <uarte_nrfx_isr_int+0x38>
		data->int_driven->cb(data->int_driven->cb_data);
   14422:	6850      	ldr	r0, [r2, #4]
   14424:	4718      	bx	r3
}
   14426:	4770      	bx	lr

00014428 <uarte_nrfx_config_get>:

static int uarte_nrfx_config_get(struct device *dev, struct uart_config *cfg)
{
   14428:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1442a:	68c2      	ldr	r2, [r0, #12]
   1442c:	e892 0003 	ldmia.w	r2, {r0, r1}
   14430:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
}
   14434:	2000      	movs	r0, #0
   14436:	4770      	bx	lr

00014438 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   14438:	6843      	ldr	r3, [r0, #4]
   1443a:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1443c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   14440:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
static int uarte_nrfx_err_check(struct device *dev)
{
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	/* register bitfields maps to the defines in uart.h */
	return nrf_uarte_errorsrc_get_and_clear(uarte);
}
   14444:	4770      	bx	lr

00014446 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   14446:	6843      	ldr	r3, [r0, #4]
 * @return 0 if a character arrived, -1 if the input buffer is empty.
 */
static int uarte_nrfx_poll_in(struct device *dev, unsigned char *c)
{

	const struct uarte_nrfx_data *data = get_dev_data(dev);
   14448:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   1444a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1444c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (data->async) {
		return -ENOTSUP;
	}
#endif

	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   14450:	b138      	cbz	r0, 14462 <uarte_nrfx_poll_in+0x1c>
		return -1;
	}

	*c = data->rx_data;
   14452:	7c12      	ldrb	r2, [r2, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14454:	2000      	movs	r0, #0
   14456:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14458:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1445a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1445e:	601a      	str	r2, [r3, #0]

	/* clear the interrupt */
	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);

	return 0;
   14460:	4770      	bx	lr
		return -1;
   14462:	f04f 30ff 	mov.w	r0, #4294967295
}
   14466:	4770      	bx	lr

00014468 <uarte_nrfx_fifo_fill>:
#ifdef UARTE_INTERRUPT_DRIVEN
/** Interrupt driven FIFO fill function */
static int uarte_nrfx_fifo_fill(struct device *dev,
				const u8_t *tx_data,
				int len)
{
   14468:	4603      	mov	r3, r0
	return config->uarte_regs;
   1446a:	6840      	ldr	r0, [r0, #4]
{
   1446c:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   1446e:	6804      	ldr	r4, [r0, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14470:	f8d4 0120 	ldr.w	r0, [r4, #288]	; 0x120
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   14474:	b190      	cbz	r0, 1449c <uarte_nrfx_fifo_fill+0x34>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   14476:	68dd      	ldr	r5, [r3, #12]
		return 0;
	}

	if (len > data->int_driven->tx_buff_size) {
   14478:	68ab      	ldr	r3, [r5, #8]
   1447a:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1447c:	2300      	movs	r3, #0
   1447e:	4290      	cmp	r0, r2
   14480:	bfa8      	it	ge
   14482:	4610      	movge	r0, r2
   14484:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
	}

	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDTX);

	/* Copy data to RAM buffer for EasyDMA transfer */
	for (int i = 0; i < len; i++) {
   14488:	68aa      	ldr	r2, [r5, #8]
   1448a:	4283      	cmp	r3, r0
   1448c:	6892      	ldr	r2, [r2, #8]
   1448e:	db06      	blt.n	1449e <uarte_nrfx_fifo_fill+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14490:	2301      	movs	r3, #1

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   14492:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   14496:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1449a:	60a3      	str	r3, [r4, #8]
	nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, len);

	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTTX);

	return len;
}
   1449c:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   1449e:	5cce      	ldrb	r6, [r1, r3]
   144a0:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
   144a2:	3301      	adds	r3, #1
   144a4:	e7f0      	b.n	14488 <uarte_nrfx_fifo_fill+0x20>

000144a6 <uarte_nrfx_fifo_read>:
	return config->uarte_regs;
   144a6:	6842      	ldr	r2, [r0, #4]

/** Interrupt driven FIFO read function */
static int uarte_nrfx_fifo_read(struct device *dev,
				u8_t *rx_data,
				const int size)
{
   144a8:	4603      	mov	r3, r0
	return config->uarte_regs;
   144aa:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   144ac:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
	int num_rx = 0;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	const struct uarte_nrfx_data *data = get_dev_data(dev);

	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   144b0:	b138      	cbz	r0, 144c2 <uarte_nrfx_fifo_read+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   144b2:	2000      	movs	r0, #0
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   144b4:	68db      	ldr	r3, [r3, #12]
   144b6:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   144ba:	2001      	movs	r0, #1
		/* Clear the interrupt */
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

		/* Receive a character */
		rx_data[num_rx++] = (u8_t)data->rx_data;
   144bc:	7c1b      	ldrb	r3, [r3, #16]
   144be:	700b      	strb	r3, [r1, #0]
   144c0:	6010      	str	r0, [r2, #0]

		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
	}

	return num_rx;
}
   144c2:	4770      	bx	lr

000144c4 <uarte_nrfx_irq_tx_enable>:
static void uarte_nrfx_irq_tx_enable(struct device *dev)
{
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	data->int_driven->disable_tx_irq = false;
   144c4:	2100      	movs	r1, #0
   144c6:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   144c8:	6843      	ldr	r3, [r0, #4]
	data->int_driven->disable_tx_irq = false;
   144ca:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   144cc:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   144ce:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   144d0:	f44f 7280 	mov.w	r2, #256	; 0x100
   144d4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
}
   144d8:	4770      	bx	lr

000144da <uarte_nrfx_irq_tx_disable>:
/** Interrupt driven transfer disabling function */
static void uarte_nrfx_irq_tx_disable(struct device *dev)
{
	struct uarte_nrfx_data *data = get_dev_data(dev);
	/* TX IRQ will be disabled after current transmission is finished */
	data->int_driven->disable_tx_irq = true;
   144da:	2201      	movs	r2, #1
   144dc:	68c3      	ldr	r3, [r0, #12]
   144de:	689b      	ldr	r3, [r3, #8]
   144e0:	739a      	strb	r2, [r3, #14]
}
   144e2:	4770      	bx	lr

000144e4 <uarte_nrfx_irq_tx_ready_complete>:
	/* ENDTX flag is always on so that ISR is called when we enable TX IRQ.
	 * Because of that we have to explicitly check if ENDTX interrupt is
	 * enabled, otherwise this function would always return true no matter
	 * what would be the source of interrupt.
	 */
	return !data->int_driven->disable_tx_irq &&
   144e4:	68c3      	ldr	r3, [r0, #12]
   144e6:	689b      	ldr	r3, [r3, #8]
   144e8:	7b9b      	ldrb	r3, [r3, #14]
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   144ea:	b94b      	cbnz	r3, 14500 <uarte_nrfx_irq_tx_ready_complete+0x1c>
	return config->uarte_regs;
   144ec:	6843      	ldr	r3, [r0, #4]
   144ee:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   144f0:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return !data->int_driven->disable_tx_irq &&
   144f4:	b128      	cbz	r0, 14502 <uarte_nrfx_irq_tx_ready_complete+0x1e>
    return p_reg->INTENSET & mask;
   144f6:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   144fa:	f3c0 2000 	ubfx	r0, r0, #8, #1
   144fe:	4770      	bx	lr
   14500:	2000      	movs	r0, #0
	       nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK);
}
   14502:	4770      	bx	lr

00014504 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   14504:	6843      	ldr	r3, [r0, #4]
   14506:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14508:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
static int uarte_nrfx_irq_rx_ready(struct device *dev)
{
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX);
}
   1450c:	3800      	subs	r0, #0
   1450e:	bf18      	it	ne
   14510:	2001      	movne	r0, #1
   14512:	4770      	bx	lr

00014514 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   14514:	2210      	movs	r2, #16
	return config->uarte_regs;
   14516:	6843      	ldr	r3, [r0, #4]
   14518:	681b      	ldr	r3, [r3, #0]
   1451a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
static void uarte_nrfx_irq_rx_enable(struct device *dev)
{
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDRX_MASK);
}
   1451e:	4770      	bx	lr

00014520 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   14520:	2210      	movs	r2, #16
	return config->uarte_regs;
   14522:	6843      	ldr	r3, [r0, #4]
   14524:	681b      	ldr	r3, [r3, #0]
   14526:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
static void uarte_nrfx_irq_rx_disable(struct device *dev)
{
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	nrf_uarte_int_disable(uarte, NRF_UARTE_INT_ENDRX_MASK);
}
   1452a:	4770      	bx	lr

0001452c <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   1452c:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   14530:	6843      	ldr	r3, [r0, #4]
   14532:	681b      	ldr	r3, [r3, #0]
   14534:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
static void uarte_nrfx_irq_err_enable(struct device *dev)
{
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ERROR_MASK);
}
   14538:	4770      	bx	lr

0001453a <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   1453a:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   1453e:	6843      	ldr	r3, [r0, #4]
   14540:	681b      	ldr	r3, [r3, #0]
   14542:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
static void uarte_nrfx_irq_err_disable(struct device *dev)
{
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	nrf_uarte_int_disable(uarte, NRF_UARTE_INT_ERROR_MASK);
}
   14546:	4770      	bx	lr

00014548 <uarte_nrfx_irq_update>:

/** Interrupt driven interrupt update function */
static int uarte_nrfx_irq_update(struct device *dev)
{
	return 1;
}
   14548:	2001      	movs	r0, #1
   1454a:	4770      	bx	lr

0001454c <uarte_nrfx_irq_callback_set>:
					uart_irq_callback_user_data_t cb,
					void *cb_data)
{
	struct uarte_nrfx_data *data = get_dev_data(dev);

	data->int_driven->cb = cb;
   1454c:	68c3      	ldr	r3, [r0, #12]
   1454e:	689b      	ldr	r3, [r3, #8]
	data->int_driven->cb_data = cb_data;
   14550:	e9c3 1200 	strd	r1, r2, [r3]
}
   14554:	4770      	bx	lr

00014556 <uarte_nrfx_irq_is_pending>:
{
   14556:	b508      	push	{r3, lr}
	return config->uarte_regs;
   14558:	6843      	ldr	r3, [r0, #4]
{
   1455a:	4602      	mov	r2, r0
	return config->uarte_regs;
   1455c:	6819      	ldr	r1, [r3, #0]
    return p_reg->INTENSET & mask;
   1455e:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   14562:	05db      	lsls	r3, r3, #23
   14564:	d405      	bmi.n	14572 <uarte_nrfx_irq_is_pending+0x1c>
   14566:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   1456a:	f010 0010 	ands.w	r0, r0, #16
   1456e:	d106      	bne.n	1457e <uarte_nrfx_irq_is_pending+0x28>
}
   14570:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   14572:	f7ff ffb7 	bl	144e4 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   14576:	2800      	cmp	r0, #0
   14578:	d0f5      	beq.n	14566 <uarte_nrfx_irq_is_pending+0x10>
		||
   1457a:	2001      	movs	r0, #1
   1457c:	e7f8      	b.n	14570 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   1457e:	4610      	mov	r0, r2
   14580:	f7ff ffc0 	bl	14504 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   14584:	3800      	subs	r0, #0
   14586:	bf18      	it	ne
   14588:	2001      	movne	r0, #1
   1458a:	e7f1      	b.n	14570 <uarte_nrfx_irq_is_pending+0x1a>

0001458c <uarte_nrfx_poll_out>:
{
   1458c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   14590:	6843      	ldr	r3, [r0, #4]
{
   14592:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   14596:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   14598:	68c6      	ldr	r6, [r0, #12]
	if (!k_is_in_isr()) {
   1459a:	f000 fd73 	bl	15084 <k_is_in_isr>
   1459e:	b9c0      	cbnz	r0, 145d2 <uarte_nrfx_poll_out+0x46>
		lock = &data->poll_out_lock;
   145a0:	2564      	movs	r5, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   145a2:	f04f 0801 	mov.w	r8, #1
   145a6:	f106 070c 	add.w	r7, r6, #12
   145aa:	e8d7 3fef 	ldaex	r3, [r7]
   145ae:	2b00      	cmp	r3, #0
   145b0:	d103      	bne.n	145ba <uarte_nrfx_poll_out+0x2e>
   145b2:	e8c7 8fe2 	stlex	r2, r8, [r7]
   145b6:	2a00      	cmp	r2, #0
   145b8:	d1f7      	bne.n	145aa <uarte_nrfx_poll_out+0x1e>
		while (atomic_cas((atomic_t *) lock,
   145ba:	d00c      	beq.n	145d6 <uarte_nrfx_poll_out+0x4a>
	return z_impl_k_sleep(timeout);
   145bc:	2021      	movs	r0, #33	; 0x21
   145be:	2100      	movs	r1, #0
   145c0:	3d01      	subs	r5, #1
   145c2:	f7fb f945 	bl	f850 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   145c6:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   145ca:	d1ee      	bne.n	145aa <uarte_nrfx_poll_out+0x1e>
}
   145cc:	b002      	add	sp, #8
   145ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*lock = 1;
   145d2:	2301      	movs	r3, #1
   145d4:	60f3      	str	r3, [r6, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   145d6:	2300      	movs	r3, #0
   145d8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   145dc:	f10d 0307 	add.w	r3, sp, #7
   145e0:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   145e4:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   145e6:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    p_reg->TXD.MAXCNT = length;
   145ea:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   145ee:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   145f0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
   145f4:	b923      	cbnz	r3, 14600 <uarte_nrfx_poll_out+0x74>
   145f6:	2001      	movs	r0, #1
   145f8:	f000 f889 	bl	1470e <nrfx_busy_wait>
   145fc:	3d01      	subs	r5, #1
   145fe:	d1f7      	bne.n	145f0 <uarte_nrfx_poll_out+0x64>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14600:	2301      	movs	r3, #1
   14602:	60e3      	str	r3, [r4, #12]
	*lock = 0;
   14604:	2300      	movs	r3, #0
   14606:	60f3      	str	r3, [r6, #12]
   14608:	e7e0      	b.n	145cc <uarte_nrfx_poll_out+0x40>

0001460a <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1460a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1460e:	4606      	mov	r6, r0
   14610:	2714      	movs	r7, #20
   14612:	2101      	movs	r1, #1
   14614:	2200      	movs	r2, #0
   14616:	2008      	movs	r0, #8
   14618:	f7ee fbdc 	bl	2dd4 <z_arm_irq_priority_set>
   1461c:	2008      	movs	r0, #8
   1461e:	f7ee fbc9 	bl	2db4 <arch_irq_enable>
	return config->uarte_regs;
   14622:	6873      	ldr	r3, [r6, #4]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   14624:	2501      	movs	r5, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   14626:	a801      	add	r0, sp, #4
   14628:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1462a:	f8d6 800c 	ldr.w	r8, [r6, #12]
        nrf_gpio_pin_set(pin_number);
   1462e:	9701      	str	r7, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   14630:	f7f7 ffbe 	bl	c5b0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   14634:	9b01      	ldr	r3, [sp, #4]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   14636:	f04f 0a03 	mov.w	sl, #3
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1463a:	fa05 f303 	lsl.w	r3, r5, r3
    p_reg->OUTSET = set_mask;
   1463e:	6083      	str	r3, [r0, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   14640:	a801      	add	r0, sp, #4
   14642:	9701      	str	r7, [sp, #4]
   14644:	f7f7 ffb4 	bl	c5b0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   14648:	f04f 0b16 	mov.w	fp, #22
   1464c:	9b01      	ldr	r3, [sp, #4]
   1464e:	f04f 0900 	mov.w	r9, #0
   14652:	3380      	adds	r3, #128	; 0x80
   14654:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   14658:	a801      	add	r0, sp, #4
   1465a:	f8cd b004 	str.w	fp, [sp, #4]
   1465e:	f7f7 ffa7 	bl	c5b0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   14662:	9b01      	ldr	r3, [sp, #4]
   14664:	3380      	adds	r3, #128	; 0x80
   14666:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
   1466a:	f8c4 750c 	str.w	r7, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1466e:	2713      	movs	r7, #19
   14670:	f8c4 b514 	str.w	fp, [r4, #1300]	; 0x514
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   14674:	a801      	add	r0, sp, #4
   14676:	9701      	str	r7, [sp, #4]
   14678:	f7f7 ff9a 	bl	c5b0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1467c:	9b01      	ldr	r3, [sp, #4]
   1467e:	fa05 f303 	lsl.w	r3, r5, r3
    p_reg->OUTSET = set_mask;
   14682:	6083      	str	r3, [r0, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   14684:	a801      	add	r0, sp, #4
   14686:	9701      	str	r7, [sp, #4]
   14688:	f7f7 ff92 	bl	c5b0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1468c:	9b01      	ldr	r3, [sp, #4]
   1468e:	3380      	adds	r3, #128	; 0x80
   14690:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   14694:	f04f 0a15 	mov.w	sl, #21
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   14698:	a801      	add	r0, sp, #4
   1469a:	f8cd a004 	str.w	sl, [sp, #4]
   1469e:	f7f7 ff87 	bl	c5b0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   146a2:	9b01      	ldr	r3, [sp, #4]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   146a4:	68f1      	ldr	r1, [r6, #12]
   146a6:	3380      	adds	r3, #128	; 0x80
   146a8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   146ac:	f8c4 7508 	str.w	r7, [r4, #1288]	; 0x508
   146b0:	4630      	mov	r0, r6
    p_reg->PSEL.CTS = pselcts;
   146b2:	f8c4 a510 	str.w	sl, [r4, #1296]	; 0x510
   146b6:	f7f7 febb 	bl	c430 <uarte_nrfx_configure>
	if (err) {
   146ba:	b9a0      	cbnz	r0, 146e6 <uarte_0_init+0xdc>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   146bc:	2308      	movs	r3, #8
   146be:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   146c2:	f108 0310 	add.w	r3, r8, #16
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   146c6:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   146ca:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
   146ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
    p_reg->RXD.MAXCNT = length;
   146d2:	f8c4 5538 	str.w	r5, [r4, #1336]	; 0x538
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   146d6:	689b      	ldr	r3, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   146d8:	6025      	str	r5, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   146da:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   146de:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   146e2:	60a5      	str	r5, [r4, #8]
   146e4:	60e5      	str	r5, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   146e6:	b003      	add	sp, #12
   146e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000146ec <dk_set_leds_state>:
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   146ec:	ea40 0301 	orr.w	r3, r0, r1
   146f0:	f033 030f 	bics.w	r3, r3, #15
   146f4:	d101      	bne.n	146fa <dk_set_leds_state+0xe>
   146f6:	f7f8 b87f 	b.w	c7f8 <dk_set_leds_state.part.0>
}
   146fa:	f06f 0015 	mvn.w	r0, #21
   146fe:	4770      	bx	lr

00014700 <dk_set_led_on>:

int dk_set_led_on(u8_t led_idx)
{
	return dk_set_led(led_idx, 1);
   14700:	2101      	movs	r1, #1
   14702:	f7f8 bb17 	b.w	cd34 <dk_set_led>

00014706 <dk_set_led_off>:
}

int dk_set_led_off(u8_t led_idx)
{
	return dk_set_led(led_idx, 0);
   14706:	2100      	movs	r1, #0
   14708:	f7f8 bb14 	b.w	cd34 <dk_set_led>

0001470c <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1470c:	4700      	bx	r0

0001470e <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1470e:	f000 bcbf 	b.w	15090 <z_impl_k_busy_wait>

00014712 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   14712:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   14716:	4770      	bx	lr

00014718 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   14718:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   1471c:	4770      	bx	lr

0001471e <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   1471e:	f44f 7080 	mov.w	r0, #256	; 0x100
   14722:	4770      	bx	lr

00014724 <metal_device_open>:
{
   14724:	b573      	push	{r0, r1, r4, r5, r6, lr}
   14726:	460c      	mov	r4, r1
   14728:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
   1472a:	4606      	mov	r6, r0
   1472c:	b918      	cbnz	r0, 14736 <metal_device_open+0x12>
		return -EINVAL;
   1472e:	f06f 0015 	mvn.w	r0, #21
}
   14732:	b002      	add	sp, #8
   14734:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
   14736:	f7fd fce0 	bl	120fa <strlen>
   1473a:	2800      	cmp	r0, #0
   1473c:	d0f7      	beq.n	1472e <metal_device_open+0xa>
   1473e:	2c00      	cmp	r4, #0
   14740:	d0f5      	beq.n	1472e <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
   14742:	4620      	mov	r0, r4
   14744:	f7fd fcd9 	bl	120fa <strlen>
   14748:	2800      	cmp	r0, #0
   1474a:	d0f0      	beq.n	1472e <metal_device_open+0xa>
   1474c:	2d00      	cmp	r5, #0
   1474e:	d0ee      	beq.n	1472e <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
   14750:	4630      	mov	r0, r6
   14752:	a901      	add	r1, sp, #4
   14754:	f7f8 fd3c 	bl	d1d0 <metal_bus_find>
	if (error)
   14758:	2800      	cmp	r0, #0
   1475a:	d1ea      	bne.n	14732 <metal_device_open+0xe>
	if (!bus->ops.dev_open)
   1475c:	9801      	ldr	r0, [sp, #4]
   1475e:	6883      	ldr	r3, [r0, #8]
   14760:	b11b      	cbz	r3, 1476a <metal_device_open+0x46>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   14762:	462a      	mov	r2, r5
   14764:	4621      	mov	r1, r4
   14766:	4798      	blx	r3
	if (error)
   14768:	e7e3      	b.n	14732 <metal_device_open+0xe>
		return -ENODEV;
   1476a:	f06f 0012 	mvn.w	r0, #18
   1476e:	e7e0      	b.n	14732 <metal_device_open+0xe>

00014770 <metal_io_block_read>:
	metal_sys_io_mem_map(io);
}

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   14770:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   14772:	6804      	ldr	r4, [r0, #0]
   14774:	6885      	ldr	r5, [r0, #8]
		: NULL);
   14776:	1c66      	adds	r6, r4, #1
   14778:	d00f      	beq.n	1479a <metal_io_block_read+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1477a:	42a9      	cmp	r1, r5
   1477c:	d232      	bcs.n	147e4 <metal_io_block_read+0x74>
		: NULL);
   1477e:	440c      	add	r4, r1
	unsigned char *dest = dst;
	int retlen;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   14780:	185e      	adds	r6, r3, r1
   14782:	42ae      	cmp	r6, r5
		len = io->size - offset;
   14784:	bf88      	it	hi
   14786:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   14788:	6a05      	ldr	r5, [r0, #32]
   1478a:	b155      	cbz	r5, 147a2 <metal_io_block_read+0x32>
		retlen = (*io->ops.block_read)(
   1478c:	9300      	str	r3, [sp, #0]
   1478e:	2305      	movs	r3, #5
   14790:	47a8      	blx	r5
   14792:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   14794:	4618      	mov	r0, r3
   14796:	b002      	add	sp, #8
   14798:	bd70      	pop	{r4, r5, r6, pc}
	if (offset >= io->size)
   1479a:	42a9      	cmp	r1, r5
   1479c:	d222      	bcs.n	147e4 <metal_io_block_read+0x74>
   1479e:	2400      	movs	r4, #0
   147a0:	e7ee      	b.n	14780 <metal_io_block_read+0x10>
		atomic_thread_fence(memory_order_seq_cst);
   147a2:	f3bf 8f5b 	dmb	ish
		while ( len && (
   147a6:	4621      	mov	r1, r4
   147a8:	4618      	mov	r0, r3
   147aa:	2800      	cmp	r0, #0
   147ac:	d0f2      	beq.n	14794 <metal_io_block_read+0x24>
			((uintptr_t)dest % sizeof(int)) ||
   147ae:	ea42 0401 	orr.w	r4, r2, r1
   147b2:	07a4      	lsls	r4, r4, #30
   147b4:	d10a      	bne.n	147cc <metal_io_block_read+0x5c>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   147b6:	2803      	cmp	r0, #3
   147b8:	dc0e      	bgt.n	147d8 <metal_io_block_read+0x68>
   147ba:	3901      	subs	r1, #1
   147bc:	4410      	add	r0, r2
		for (; len != 0; dest++, ptr++, len--)
   147be:	4282      	cmp	r2, r0
   147c0:	d0e8      	beq.n	14794 <metal_io_block_read+0x24>
				*(const unsigned char *)ptr;
   147c2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
			*(unsigned char *)dest =
   147c6:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   147ca:	e7f8      	b.n	147be <metal_io_block_read+0x4e>
				*(const unsigned char *)ptr;
   147cc:	f811 4b01 	ldrb.w	r4, [r1], #1
			len--;
   147d0:	3801      	subs	r0, #1
			*(unsigned char *)dest =
   147d2:	f802 4b01 	strb.w	r4, [r2], #1
			len--;
   147d6:	e7e8      	b.n	147aa <metal_io_block_read+0x3a>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   147d8:	f851 4b04 	ldr.w	r4, [r1], #4
   147dc:	3804      	subs	r0, #4
   147de:	f842 4b04 	str.w	r4, [r2], #4
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   147e2:	e7e8      	b.n	147b6 <metal_io_block_read+0x46>
		return -ERANGE;
   147e4:	f06f 0325 	mvn.w	r3, #37	; 0x25
   147e8:	e7d4      	b.n	14794 <metal_io_block_read+0x24>

000147ea <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   147ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   147ec:	6804      	ldr	r4, [r0, #0]
   147ee:	6885      	ldr	r5, [r0, #8]
		: NULL);
   147f0:	1c66      	adds	r6, r4, #1
   147f2:	d00e      	beq.n	14812 <metal_io_block_write+0x28>
	return (io->virt != METAL_BAD_VA && offset < io->size
   147f4:	42a9      	cmp	r1, r5
   147f6:	d230      	bcs.n	1485a <metal_io_block_write+0x70>
		: NULL);
   147f8:	440c      	add	r4, r1
	const unsigned char *source = src;
	int retlen;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   147fa:	185e      	adds	r6, r3, r1
   147fc:	42ae      	cmp	r6, r5
		len = io->size - offset;
   147fe:	bf88      	it	hi
   14800:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   14802:	6a45      	ldr	r5, [r0, #36]	; 0x24
   14804:	b94d      	cbnz	r5, 1481a <metal_io_block_write+0x30>
   14806:	4619      	mov	r1, r3
		retlen = (*io->ops.block_write)(
			io, offset, src, memory_order_seq_cst, len);
	} else {
		while ( len && (
   14808:	b991      	cbnz	r1, 14830 <metal_io_block_write+0x46>
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
		for (; len != 0; ptr++, source++, len--)
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
   1480a:	f3bf 8f5b 	dmb	ish
	retlen = len;
   1480e:	4618      	mov	r0, r3
   14810:	e006      	b.n	14820 <metal_io_block_write+0x36>
	if (offset >= io->size)
   14812:	42a9      	cmp	r1, r5
   14814:	d221      	bcs.n	1485a <metal_io_block_write+0x70>
   14816:	2400      	movs	r4, #0
   14818:	e7ef      	b.n	147fa <metal_io_block_write+0x10>
		retlen = (*io->ops.block_write)(
   1481a:	9300      	str	r3, [sp, #0]
   1481c:	2305      	movs	r3, #5
   1481e:	47a8      	blx	r5
	}
	return retlen;
}
   14820:	b002      	add	sp, #8
   14822:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
   14824:	f812 0b01 	ldrb.w	r0, [r2], #1
			len--;
   14828:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
   1482a:	f804 0b01 	strb.w	r0, [r4], #1
			len--;
   1482e:	e7eb      	b.n	14808 <metal_io_block_write+0x1e>
			((uintptr_t)ptr % sizeof(int)) ||
   14830:	ea44 0002 	orr.w	r0, r4, r2
   14834:	0780      	lsls	r0, r0, #30
   14836:	d1f5      	bne.n	14824 <metal_io_block_write+0x3a>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   14838:	2903      	cmp	r1, #3
   1483a:	dc08      	bgt.n	1484e <metal_io_block_write+0x64>
   1483c:	3a01      	subs	r2, #1
   1483e:	4421      	add	r1, r4
		for (; len != 0; ptr++, source++, len--)
   14840:	428c      	cmp	r4, r1
   14842:	d0e2      	beq.n	1480a <metal_io_block_write+0x20>
				*(const unsigned char *)source;
   14844:	f812 0f01 	ldrb.w	r0, [r2, #1]!
			*(unsigned char *)ptr =
   14848:	f804 0b01 	strb.w	r0, [r4], #1
		for (; len != 0; ptr++, source++, len--)
   1484c:	e7f8      	b.n	14840 <metal_io_block_write+0x56>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   1484e:	f852 0b04 	ldr.w	r0, [r2], #4
   14852:	3904      	subs	r1, #4
   14854:	f844 0b04 	str.w	r0, [r4], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   14858:	e7ee      	b.n	14838 <metal_io_block_write+0x4e>
		return -ERANGE;
   1485a:	f06f 0025 	mvn.w	r0, #37	; 0x25
   1485e:	e7df      	b.n	14820 <metal_io_block_write+0x36>

00014860 <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   14860:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   14862:	6804      	ldr	r4, [r0, #0]
   14864:	461d      	mov	r5, r3
		: NULL);
   14866:	1c66      	adds	r6, r4, #1
   14868:	6883      	ldr	r3, [r0, #8]
   1486a:	d00e      	beq.n	1488a <metal_io_block_set+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1486c:	4299      	cmp	r1, r3
   1486e:	d22d      	bcs.n	148cc <metal_io_block_set+0x6c>
		: NULL);
   14870:	440c      	add	r4, r1
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   14872:	186e      	adds	r6, r5, r1
   14874:	429e      	cmp	r6, r3
		len = io->size - offset;
	retlen = len;
	if (io->ops.block_set) {
   14876:	6a86      	ldr	r6, [r0, #40]	; 0x28
		len = io->size - offset;
   14878:	bf88      	it	hi
   1487a:	1a5d      	subhi	r5, r3, r1
	if (io->ops.block_set) {
   1487c:	b186      	cbz	r6, 148a0 <metal_io_block_set+0x40>
		(*io->ops.block_set)(
   1487e:	2305      	movs	r3, #5
   14880:	9500      	str	r5, [sp, #0]
   14882:	47b0      	blx	r6
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   14884:	4628      	mov	r0, r5
   14886:	b002      	add	sp, #8
   14888:	bd70      	pop	{r4, r5, r6, pc}
	if (offset >= io->size)
   1488a:	4299      	cmp	r1, r3
   1488c:	d21e      	bcs.n	148cc <metal_io_block_set+0x6c>
   1488e:	2400      	movs	r4, #0
   14890:	e7ef      	b.n	14872 <metal_io_block_set+0x12>
			*(unsigned char *)ptr = (unsigned char) value;
   14892:	f804 2b01 	strb.w	r2, [r4], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   14896:	3b01      	subs	r3, #1
   14898:	b923      	cbnz	r3, 148a4 <metal_io_block_set+0x44>
		atomic_thread_fence(memory_order_seq_cst);
   1489a:	f3bf 8f5b 	dmb	ish
   1489e:	e7f1      	b.n	14884 <metal_io_block_set+0x24>
   148a0:	462b      	mov	r3, r5
   148a2:	e7f9      	b.n	14898 <metal_io_block_set+0x38>
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   148a4:	07a1      	lsls	r1, r4, #30
   148a6:	d1f4      	bne.n	14892 <metal_io_block_set+0x32>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   148a8:	0611      	lsls	r1, r2, #24
   148aa:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   148ae:	4311      	orrs	r1, r2
   148b0:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   148b4:	2b03      	cmp	r3, #3
   148b6:	dc05      	bgt.n	148c4 <metal_io_block_set+0x64>
   148b8:	4423      	add	r3, r4
		for (; len != 0; ptr++, len--)
   148ba:	429c      	cmp	r4, r3
   148bc:	d0ed      	beq.n	1489a <metal_io_block_set+0x3a>
			*(unsigned char *)ptr = (unsigned char) value;
   148be:	f804 2b01 	strb.w	r2, [r4], #1
		for (; len != 0; ptr++, len--)
   148c2:	e7fa      	b.n	148ba <metal_io_block_set+0x5a>
			*(unsigned int *)ptr = cint;
   148c4:	f844 1b04 	str.w	r1, [r4], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   148c8:	3b04      	subs	r3, #4
   148ca:	e7f3      	b.n	148b4 <metal_io_block_set+0x54>
		return -ERANGE;
   148cc:	f06f 0525 	mvn.w	r5, #37	; 0x25
   148d0:	e7d8      	b.n	14884 <metal_io_block_set+0x24>

000148d2 <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   148d2:	2000      	movs	r0, #0
   148d4:	4770      	bx	lr

000148d6 <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   148d6:	b430      	push	{r4, r5}
	if (!io->ops.offset_to_phys) {
   148d8:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   148da:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
   148dc:	b984      	cbnz	r4, 14900 <metal_io_phys+0x2a>
		unsigned long page = (io->page_shift >=
   148de:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
		return (io->physmap && offset < io->size
   148e0:	6845      	ldr	r5, [r0, #4]
				     0 : offset >> io->page_shift);
   148e2:	291f      	cmp	r1, #31
   148e4:	bf98      	it	ls
   148e6:	fa23 f401 	lsrls.w	r4, r3, r1
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
   148ea:	b165      	cbz	r5, 14906 <metal_io_phys+0x30>
		return (io->physmap && offset < io->size
   148ec:	6881      	ldr	r1, [r0, #8]
   148ee:	428b      	cmp	r3, r1
   148f0:	d209      	bcs.n	14906 <metal_io_phys+0x30>
			? io->physmap[page] + (offset & io->page_mask)
   148f2:	6900      	ldr	r0, [r0, #16]
   148f4:	4003      	ands	r3, r0
			: METAL_BAD_PHYS);
   148f6:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   148fa:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
   148fc:	bc30      	pop	{r4, r5}
   148fe:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
   14900:	4623      	mov	r3, r4
}
   14902:	bc30      	pop	{r4, r5}
	return io->ops.offset_to_phys(io, offset);
   14904:	4718      	bx	r3
			: METAL_BAD_PHYS);
   14906:	f04f 30ff 	mov.w	r0, #4294967295
   1490a:	e7f7      	b.n	148fc <metal_io_phys+0x26>

0001490c <virtqueue_create>:
{
   1490c:	b570      	push	{r4, r5, r6, lr}
   1490e:	9c06      	ldr	r4, [sp, #24]
		vq->vq_queue_index = id;
   14910:	8121      	strh	r1, [r4, #8]
		vq->callback = callback;
   14912:	9904      	ldr	r1, [sp, #16]
		vq->vq_name = name;
   14914:	e9c4 0200 	strd	r0, r2, [r4]
		vq->vq_nentries = ring->num_descs;
   14918:	891a      	ldrh	r2, [r3, #8]
		vq->callback = callback;
   1491a:	60e1      	str	r1, [r4, #12]
		vq->notify = notify;
   1491c:	9905      	ldr	r1, [sp, #20]
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   1491e:	1c96      	adds	r6, r2, #2
   14920:	6121      	str	r1, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   14922:	e9d3 1500 	ldrd	r1, r5, [r3]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   14926:	eb01 1302 	add.w	r3, r1, r2, lsl #4
   1492a:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   1492c:	eb03 0346 	add.w	r3, r3, r6, lsl #1
	      align - 1) & ~(align - 1));
   14930:	1c6e      	adds	r6, r5, #1
   14932:	4433      	add	r3, r6
   14934:	426d      	negs	r5, r5
   14936:	402b      	ands	r3, r5
	vr->used = (struct vring_used *)
   14938:	6223      	str	r3, [r4, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_SLAVE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1493a:	6983      	ldr	r3, [r0, #24]
	vr->desc = (struct vring_desc *)p;
   1493c:	e9c4 2105 	strd	r2, r1, [r4, #20]
		vq->vq_nentries = ring->num_descs;
   14940:	8162      	strh	r2, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   14942:	84a2      	strh	r2, [r4, #36]	; 0x24
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   14944:	b96b      	cbnz	r3, 14962 <virtqueue_create+0x56>
		int i;

		for (i = 0; i < size - 1; i++)
   14946:	3a01      	subs	r2, #1
   14948:	4293      	cmp	r3, r2
   1494a:	eb01 1003 	add.w	r0, r1, r3, lsl #4
   1494e:	db0a      	blt.n	14966 <virtqueue_create+0x5a>
			vr->desc[i].next = i + 1;
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   14950:	2300      	movs	r3, #0
   14952:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   14956:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   1495a:	7393      	strb	r3, [r2, #14]
   1495c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   14960:	73d3      	strb	r3, [r2, #15]
}
   14962:	2000      	movs	r0, #0
   14964:	bd70      	pop	{r4, r5, r6, pc}
			vr->desc[i].next = i + 1;
   14966:	3301      	adds	r3, #1
   14968:	81c3      	strh	r3, [r0, #14]
		for (i = 0; i < size - 1; i++)
   1496a:	e7ed      	b.n	14948 <virtqueue_create+0x3c>

0001496c <virtqueue_add_buffer>:
{
   1496c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   14970:	2700      	movs	r7, #0
		head_idx = vq->vq_desc_head_idx;
   14972:	f8b0 b02c 	ldrh.w	fp, [r0, #44]	; 0x2c
{
   14976:	4604      	mov	r4, r0
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   14978:	465d      	mov	r5, fp
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   1497a:	46ba      	mov	sl, r7
{
   1497c:	b085      	sub	sp, #20
	needed = readable + writable;
   1497e:	18d6      	adds	r6, r2, r3
{
   14980:	4691      	mov	r9, r2
		dxp->cookie = cookie;
   14982:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   14984:	eb00 03cb 	add.w	r3, r0, fp, lsl #3
   14988:	635a      	str	r2, [r3, #52]	; 0x34
		dxp->ndescs = needed;
   1498a:	871e      	strh	r6, [r3, #56]	; 0x38
		if (i < needed - 1)
   1498c:	1e72      	subs	r2, r6, #1
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   1498e:	6983      	ldr	r3, [r0, #24]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   14990:	f101 0804 	add.w	r8, r1, #4
		if (i < needed - 1)
   14994:	9201      	str	r2, [sp, #4]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   14996:	42be      	cmp	r6, r7
   14998:	dc19      	bgt.n	149ce <virtqueue_add_buffer+0x62>
		vq->vq_free_cnt -= needed;
   1499a:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   1499c:	8962      	ldrh	r2, [r4, #10]
		vq->vq_free_cnt -= needed;
   1499e:	1b9e      	subs	r6, r3, r6
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   149a0:	69e3      	ldr	r3, [r4, #28]
		vq->vq_desc_head_idx = idx;
   149a2:	85a5      	strh	r5, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   149a4:	84a6      	strh	r6, [r4, #36]	; 0x24
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   149a6:	1e51      	subs	r1, r2, #1
   149a8:	885a      	ldrh	r2, [r3, #2]
}
   149aa:	2000      	movs	r0, #0
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   149ac:	400a      	ands	r2, r1
   149ae:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   149b2:	f8a3 b004 	strh.w	fp, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
   149b6:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.avail->idx++;
   149ba:	69e2      	ldr	r2, [r4, #28]
   149bc:	8853      	ldrh	r3, [r2, #2]
   149be:	3301      	adds	r3, #1
   149c0:	8053      	strh	r3, [r2, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   149c2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   149c4:	3301      	adds	r3, #1
   149c6:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   149c8:	b005      	add	sp, #20
   149ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   149ce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		dp = &desc[idx];
   149d0:	012a      	lsls	r2, r5, #4
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   149d2:	f858 1c04 	ldr.w	r1, [r8, #-4]
   149d6:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   149da:	9302      	str	r3, [sp, #8]
   149dc:	6803      	ldr	r3, [r0, #0]
   149de:	9203      	str	r2, [sp, #12]
   149e0:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   149e2:	6883      	ldr	r3, [r0, #8]
   149e4:	f108 0808 	add.w	r8, r8, #8
   149e8:	4299      	cmp	r1, r3
   149ea:	bf28      	it	cs
   149ec:	f04f 31ff 	movcs.w	r1, #4294967295
   149f0:	f7ff ff71 	bl	148d6 <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   149f4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   149f8:	5098      	str	r0, [r3, r2]
		dp->len = buf_list[i].len;
   149fa:	f858 2c08 	ldr.w	r2, [r8, #-8]
			dp->flags |= VRING_DESC_F_NEXT;
   149fe:	f885 a00d 	strb.w	sl, [r5, #13]
		dp->len = buf_list[i].len;
   14a02:	60aa      	str	r2, [r5, #8]
		if (i < needed - 1)
   14a04:	9a01      	ldr	r2, [sp, #4]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   14a06:	f8c5 a004 	str.w	sl, [r5, #4]
		if (i < needed - 1)
   14a0a:	4297      	cmp	r7, r2
			dp->flags |= VRING_DESC_F_NEXT;
   14a0c:	bfb6      	itet	lt
   14a0e:	2201      	movlt	r2, #1
		dp->flags = 0;
   14a10:	f885 a00c 	strbge.w	sl, [r5, #12]
			dp->flags |= VRING_DESC_F_NEXT;
   14a14:	732a      	strblt	r2, [r5, #12]
		if (i >= readable)
   14a16:	45b9      	cmp	r9, r7
			dp->flags |= VRING_DESC_F_WRITE;
   14a18:	bfd8      	it	le
   14a1a:	89aa      	ldrhle	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   14a1c:	f107 0701 	add.w	r7, r7, #1
			dp->flags |= VRING_DESC_F_WRITE;
   14a20:	bfdc      	itt	le
   14a22:	f042 0202 	orrle.w	r2, r2, #2
   14a26:	81aa      	strhle	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   14a28:	89ed      	ldrh	r5, [r5, #14]
   14a2a:	e7b4      	b.n	14996 <virtqueue_add_buffer+0x2a>

00014a2c <virtqueue_get_buffer>:
{
   14a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   14a2e:	b350      	cbz	r0, 14a86 <virtqueue_get_buffer+0x5a>
   14a30:	6a05      	ldr	r5, [r0, #32]
   14a32:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   14a34:	886c      	ldrh	r4, [r5, #2]
   14a36:	429c      	cmp	r4, r3
   14a38:	d030      	beq.n	14a9c <virtqueue_get_buffer+0x70>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   14a3a:	1c5c      	adds	r4, r3, #1
   14a3c:	85c4      	strh	r4, [r0, #46]	; 0x2e
   14a3e:	8944      	ldrh	r4, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
   14a40:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   14a44:	3c01      	subs	r4, #1
   14a46:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
   14a48:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   14a4c:	686b      	ldr	r3, [r5, #4]
   14a4e:	b29e      	uxth	r6, r3
	if (len)
   14a50:	b109      	cbz	r1, 14a56 <virtqueue_get_buffer+0x2a>
		*len = uep->len;
   14a52:	68ad      	ldr	r5, [r5, #8]
   14a54:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
   14a56:	f8d0 c018 	ldr.w	ip, [r0, #24]
   14a5a:	b29b      	uxth	r3, r3
   14a5c:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
   14a60:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   14a64:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
   14a66:	8c87      	ldrh	r7, [r0, #36]	; 0x24
   14a68:	442f      	add	r7, r5
	dxp->ndescs--;
   14a6a:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
   14a6c:	8487      	strh	r7, [r0, #36]	; 0x24
	dxp->ndescs--;
   14a6e:	871d      	strh	r5, [r3, #56]	; 0x38
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   14a70:	898d      	ldrh	r5, [r1, #12]
   14a72:	076f      	lsls	r7, r5, #29
   14a74:	d50e      	bpl.n	14a94 <virtqueue_get_buffer+0x68>
	dp->next = vq->vq_desc_head_idx;
   14a76:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   14a78:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
   14a7a:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
   14a7c:	8586      	strh	r6, [r0, #44]	; 0x2c
	cookie = vq->vq_descx[desc_idx].cookie;
   14a7e:	6b58      	ldr	r0, [r3, #52]	; 0x34
	vq->vq_descx[desc_idx].cookie = NULL;
   14a80:	6359      	str	r1, [r3, #52]	; 0x34
	if (idx)
   14a82:	b102      	cbz	r2, 14a86 <virtqueue_get_buffer+0x5a>
		*idx = used_idx;
   14a84:	8014      	strh	r4, [r2, #0]
}
   14a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
   14a88:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
			dp = &vq->vq_ring.desc[dp->next];
   14a8a:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
   14a8c:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
   14a8e:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
   14a92:	871d      	strh	r5, [r3, #56]	; 0x38
		while (dp->flags & VRING_DESC_F_NEXT) {
   14a94:	898d      	ldrh	r5, [r1, #12]
   14a96:	07ed      	lsls	r5, r5, #31
   14a98:	d4f6      	bmi.n	14a88 <virtqueue_get_buffer+0x5c>
   14a9a:	e7ec      	b.n	14a76 <virtqueue_get_buffer+0x4a>
		return NULL;
   14a9c:	2000      	movs	r0, #0
   14a9e:	e7f2      	b.n	14a86 <virtqueue_get_buffer+0x5a>

00014aa0 <virtqueue_get_available_buffer>:
{
   14aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	atomic_thread_fence(memory_order_seq_cst);
   14aa4:	f3bf 8f5b 	dmb	ish
{
   14aa8:	4617      	mov	r7, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   14aaa:	69c2      	ldr	r2, [r0, #28]
{
   14aac:	460e      	mov	r6, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   14aae:	8853      	ldrh	r3, [r2, #2]
   14ab0:	8e01      	ldrh	r1, [r0, #48]	; 0x30
{
   14ab2:	4605      	mov	r5, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   14ab4:	428b      	cmp	r3, r1
   14ab6:	d046      	beq.n	14b46 <virtqueue_get_available_buffer+0xa6>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   14ab8:	1c4b      	adds	r3, r1, #1
   14aba:	8603      	strh	r3, [r0, #48]	; 0x30
   14abc:	8943      	ldrh	r3, [r0, #10]
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   14abe:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   14ac2:	3b01      	subs	r3, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   14ac4:	400b      	ands	r3, r1
   14ac6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   14aca:	889a      	ldrh	r2, [r3, #4]
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   14acc:	6983      	ldr	r3, [r0, #24]
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   14ace:	b291      	uxth	r1, r2
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   14ad0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   14ad4:	8032      	strh	r2, [r6, #0]
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   14ad6:	f8d3 9000 	ldr.w	r9, [r3]
	if (!io->ops.phys_to_offset) {
   14ada:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
   14ade:	bb5b      	cbnz	r3, 14b38 <virtqueue_get_available_buffer+0x98>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   14ae0:	f8d8 4010 	ldr.w	r4, [r8, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   14ae4:	1c62      	adds	r2, r4, #1
   14ae6:	bf09      	itett	eq
   14ae8:	f8d8 3004 	ldreq.w	r3, [r8, #4]
   14aec:	ea09 0404 	andne.w	r4, r9, r4
   14af0:	681c      	ldreq	r4, [r3, #0]
   14af2:	eba9 0404 	subeq.w	r4, r9, r4
			if (metal_io_phys(io, offset) == phys)
   14af6:	4621      	mov	r1, r4
   14af8:	4640      	mov	r0, r8
   14afa:	f7ff feec 	bl	148d6 <metal_io_phys>
   14afe:	4581      	cmp	r9, r0
   14b00:	d009      	beq.n	14b16 <virtqueue_get_available_buffer+0x76>
			offset += io->page_mask + 1;
   14b02:	f8d8 3010 	ldr.w	r3, [r8, #16]
   14b06:	3301      	adds	r3, #1
   14b08:	441c      	add	r4, r3
		} while (offset < io->size);
   14b0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   14b0e:	429c      	cmp	r4, r3
   14b10:	d3f1      	bcc.n	14af6 <virtqueue_get_available_buffer+0x56>
		return METAL_BAD_OFFSET;
   14b12:	f04f 34ff 	mov.w	r4, #4294967295
	return (io->virt != METAL_BAD_VA && offset < io->size
   14b16:	f8d8 0000 	ldr.w	r0, [r8]
		: NULL);
   14b1a:	1c43      	adds	r3, r0, #1
   14b1c:	d011      	beq.n	14b42 <virtqueue_get_available_buffer+0xa2>
	return (io->virt != METAL_BAD_VA && offset < io->size
   14b1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   14b22:	42a3      	cmp	r3, r4
   14b24:	d90d      	bls.n	14b42 <virtqueue_get_available_buffer+0xa2>
		: NULL);
   14b26:	4420      	add	r0, r4
	*len = vq->vq_ring.desc[*avail_idx].len;
   14b28:	8832      	ldrh	r2, [r6, #0]
   14b2a:	69ab      	ldr	r3, [r5, #24]
   14b2c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   14b30:	689b      	ldr	r3, [r3, #8]
   14b32:	603b      	str	r3, [r7, #0]
}
   14b34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (*io->ops.phys_to_offset)(io, phys);
   14b38:	4649      	mov	r1, r9
   14b3a:	4640      	mov	r0, r8
   14b3c:	4798      	blx	r3
   14b3e:	4604      	mov	r4, r0
   14b40:	e7e9      	b.n	14b16 <virtqueue_get_available_buffer+0x76>
		: NULL);
   14b42:	2000      	movs	r0, #0
   14b44:	e7f0      	b.n	14b28 <virtqueue_get_available_buffer+0x88>
		return NULL;
   14b46:	2000      	movs	r0, #0
   14b48:	e7f4      	b.n	14b34 <virtqueue_get_available_buffer+0x94>

00014b4a <virtqueue_disable_cb>:
{
   14b4a:	b530      	push	{r4, r5, lr}
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   14b4c:	2500      	movs	r5, #0
   14b4e:	6802      	ldr	r2, [r0, #0]
   14b50:	6993      	ldr	r3, [r2, #24]
   14b52:	6912      	ldr	r2, [r2, #16]
   14b54:	f002 5400 	and.w	r4, r2, #536870912	; 0x20000000
   14b58:	ea54 0205 	orrs.w	r2, r4, r5
   14b5c:	d014      	beq.n	14b88 <virtqueue_disable_cb+0x3e>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   14b5e:	b94b      	cbnz	r3, 14b74 <virtqueue_disable_cb+0x2a>
			vring_used_event(&vq->vq_ring) =
   14b60:	69c2      	ldr	r2, [r0, #28]
   14b62:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   14b64:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   14b66:	8940      	ldrh	r0, [r0, #10]
			vring_used_event(&vq->vq_ring) =
   14b68:	eb02 0241 	add.w	r2, r2, r1, lsl #1
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   14b6c:	1a1b      	subs	r3, r3, r0
			vring_avail_event(&vq->vq_ring) =
   14b6e:	3b01      	subs	r3, #1
   14b70:	8093      	strh	r3, [r2, #4]
}
   14b72:	bd30      	pop	{r4, r5, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
   14b74:	2b01      	cmp	r3, #1
   14b76:	d1fc      	bne.n	14b72 <virtqueue_disable_cb+0x28>
			vring_avail_event(&vq->vq_ring) =
   14b78:	6a02      	ldr	r2, [r0, #32]
   14b7a:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   14b7c:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   14b7e:	8940      	ldrh	r0, [r0, #10]
			vring_avail_event(&vq->vq_ring) =
   14b80:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
			    vq->vq_available_idx - vq->vq_nentries - 1;
   14b84:	1a1b      	subs	r3, r3, r0
   14b86:	e7f2      	b.n	14b6e <virtqueue_disable_cb+0x24>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
   14b88:	b92b      	cbnz	r3, 14b96 <virtqueue_disable_cb+0x4c>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   14b8a:	69c2      	ldr	r2, [r0, #28]
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   14b8c:	8813      	ldrh	r3, [r2, #0]
   14b8e:	f043 0301 	orr.w	r3, r3, #1
   14b92:	8013      	strh	r3, [r2, #0]
}
   14b94:	e7ed      	b.n	14b72 <virtqueue_disable_cb+0x28>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
   14b96:	2b01      	cmp	r3, #1
   14b98:	d1eb      	bne.n	14b72 <virtqueue_disable_cb+0x28>
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   14b9a:	6a02      	ldr	r2, [r0, #32]
   14b9c:	e7f6      	b.n	14b8c <virtqueue_disable_cb+0x42>

00014b9e <virtqueue_kick>:
{
   14b9e:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
   14ba0:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   14ba4:	2300      	movs	r3, #0
   14ba6:	6801      	ldr	r1, [r0, #0]
{
   14ba8:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   14baa:	6908      	ldr	r0, [r1, #16]
   14bac:	f000 5200 	and.w	r2, r0, #536870912	; 0x20000000
   14bb0:	4313      	orrs	r3, r2
   14bb2:	698b      	ldr	r3, [r1, #24]
   14bb4:	d020      	beq.n	14bf8 <virtqueue_kick+0x5a>
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   14bb6:	b9b3      	cbnz	r3, 14be6 <virtqueue_kick+0x48>
			new_idx = vq->vq_ring.avail->idx;
   14bb8:	69e3      	ldr	r3, [r4, #28]
			prev_idx = new_idx - vq->vq_queued_cnt;
			event_idx = vring_avail_event(&vq->vq_ring);
   14bba:	6961      	ldr	r1, [r4, #20]
			new_idx = vq->vq_ring.avail->idx;
   14bbc:	885a      	ldrh	r2, [r3, #2]
			event_idx = vring_avail_event(&vq->vq_ring);
   14bbe:	6a23      	ldr	r3, [r4, #32]
   14bc0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			event_idx = vring_used_event(&vq->vq_ring);
   14bc4:	889b      	ldrh	r3, [r3, #4]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   14bc6:	1ad2      	subs	r2, r2, r3
   14bc8:	3a01      	subs	r2, #1
   14bca:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   14bcc:	b292      	uxth	r2, r2
   14bce:	4293      	cmp	r3, r2
   14bd0:	bf94      	ite	ls
   14bd2:	2300      	movls	r3, #0
   14bd4:	2301      	movhi	r3, #1
	if (vq_ring_must_notify(vq))
   14bd6:	b11b      	cbz	r3, 14be0 <virtqueue_kick+0x42>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
   14bd8:	6923      	ldr	r3, [r4, #16]
   14bda:	b10b      	cbz	r3, 14be0 <virtqueue_kick+0x42>
		vq->notify(vq);
   14bdc:	4620      	mov	r0, r4
   14bde:	4798      	blx	r3
	vq->vq_queued_cnt = 0;
   14be0:	2300      	movs	r3, #0
   14be2:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   14be4:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
   14be6:	2b01      	cmp	r3, #1
   14be8:	d1fa      	bne.n	14be0 <virtqueue_kick+0x42>
			new_idx = vq->vq_ring.used->idx;
   14bea:	6a23      	ldr	r3, [r4, #32]
			event_idx = vring_used_event(&vq->vq_ring);
   14bec:	6961      	ldr	r1, [r4, #20]
			new_idx = vq->vq_ring.used->idx;
   14bee:	885a      	ldrh	r2, [r3, #2]
			event_idx = vring_used_event(&vq->vq_ring);
   14bf0:	69e3      	ldr	r3, [r4, #28]
   14bf2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   14bf6:	e7e5      	b.n	14bc4 <virtqueue_kick+0x26>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
   14bf8:	b92b      	cbnz	r3, 14c06 <virtqueue_kick+0x68>
			return (vq->vq_ring.used->flags &
   14bfa:	6a23      	ldr	r3, [r4, #32]
			return (vq->vq_ring.avail->flags &
   14bfc:	881b      	ldrh	r3, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   14bfe:	43db      	mvns	r3, r3
   14c00:	f003 0301 	and.w	r3, r3, #1
   14c04:	e7e7      	b.n	14bd6 <virtqueue_kick+0x38>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
   14c06:	2b01      	cmp	r3, #1
   14c08:	d1ea      	bne.n	14be0 <virtqueue_kick+0x42>
			return (vq->vq_ring.avail->flags &
   14c0a:	69e3      	ldr	r3, [r4, #28]
   14c0c:	e7f6      	b.n	14bfc <virtqueue_kick+0x5e>

00014c0e <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   14c0e:	69c2      	ldr	r2, [r0, #28]
   14c10:	8e01      	ldrh	r1, [r0, #48]	; 0x30
   14c12:	8853      	ldrh	r3, [r2, #2]
   14c14:	428b      	cmp	r3, r1
   14c16:	d00a      	beq.n	14c2e <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
   14c18:	8943      	ldrh	r3, [r0, #10]
   14c1a:	3b01      	subs	r3, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
   14c1c:	400b      	ands	r3, r1
   14c1e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
	len = vq->vq_ring.desc[avail_idx].len;
   14c22:	889a      	ldrh	r2, [r3, #4]
   14c24:	6983      	ldr	r3, [r0, #24]
   14c26:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   14c2a:	6898      	ldr	r0, [r3, #8]
	return len;
   14c2c:	4770      	bx	lr
		return 0;
   14c2e:	2000      	movs	r0, #0
}
   14c30:	4770      	bx	lr

00014c32 <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
   14c32:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   14c36:	68c3      	ldr	r3, [r0, #12]
   14c38:	b103      	cbz	r3, 14c3c <virtqueue_notification+0xa>
		vq->callback(vq);
   14c3a:	4718      	bx	r3
}
   14c3c:	4770      	bx	lr

00014c3e <rpmsg_unregister_endpoint>:
{
   14c3e:	b510      	push	{r4, lr}
	if (!ept)
   14c40:	b1d0      	cbz	r0, 14c78 <rpmsg_unregister_endpoint+0x3a>
	if (ept->addr != RPMSG_ADDR_ANY)
   14c42:	6a43      	ldr	r3, [r0, #36]	; 0x24
   14c44:	1c5a      	adds	r2, r3, #1
   14c46:	d00f      	beq.n	14c68 <rpmsg_unregister_endpoint+0x2a>
	if (addr < size)
   14c48:	2b7f      	cmp	r3, #127	; 0x7f
   14c4a:	dc0d      	bgt.n	14c68 <rpmsg_unregister_endpoint+0x2a>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   14c4c:	2101      	movs	r1, #1
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   14c4e:	6a02      	ldr	r2, [r0, #32]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   14c50:	095c      	lsrs	r4, r3, #5
   14c52:	3248      	adds	r2, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   14c54:	f003 031f 	and.w	r3, r3, #31
   14c58:	fa01 f303 	lsl.w	r3, r1, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   14c5c:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
   14c60:	ea21 0103 	bic.w	r1, r1, r3
   14c64:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
	metal_list_del(&ept->node);
   14c68:	f100 0334 	add.w	r3, r0, #52	; 0x34
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   14c6c:	e9d0 120d 	ldrd	r1, r2, [r0, #52]	; 0x34
   14c70:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   14c72:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
   14c74:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
}
   14c78:	bd10      	pop	{r4, pc}

00014c7a <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   14c7a:	f04f 32ff 	mov.w	r2, #4294967295
   14c7e:	f04f 33ff 	mov.w	r3, #4294967295
   14c82:	f7fa be65 	b.w	f950 <z_impl_k_sem_take>

00014c86 <rpmsg_send_ns_message>:
{
   14c86:	b510      	push	{r4, lr}
	ns_msg.addr = ept->addr;
   14c88:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
   14c8a:	b08c      	sub	sp, #48	; 0x30
   14c8c:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   14c8e:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   14c90:	2220      	movs	r2, #32
   14c92:	4601      	mov	r1, r0
   14c94:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
   14c96:	930a      	str	r3, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   14c98:	f7fd fa1c 	bl	120d4 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   14c9c:	2328      	movs	r3, #40	; 0x28
   14c9e:	2201      	movs	r2, #1
   14ca0:	4620      	mov	r0, r4
   14ca2:	e9cd 3200 	strd	r3, r2, [sp]
   14ca6:	6a61      	ldr	r1, [r4, #36]	; 0x24
   14ca8:	2235      	movs	r2, #53	; 0x35
   14caa:	ab02      	add	r3, sp, #8
   14cac:	f7f8 fbb4 	bl	d418 <rpmsg_send_offchannel_raw>
}
   14cb0:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   14cb4:	b00c      	add	sp, #48	; 0x30
   14cb6:	bd10      	pop	{r4, pc}

00014cb8 <rpmsg_get_endpoint>:
{
   14cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14cbc:	4680      	mov	r8, r0
   14cbe:	4689      	mov	r9, r1
   14cc0:	4615      	mov	r5, r2
   14cc2:	461e      	mov	r6, r3
	metal_list_for_each(&rdev->endpoints, node) {
   14cc4:	6807      	ldr	r7, [r0, #0]
   14cc6:	45b8      	cmp	r8, r7
   14cc8:	d101      	bne.n	14cce <rpmsg_get_endpoint+0x16>
	return NULL;
   14cca:	2400      	movs	r4, #0
   14ccc:	e021      	b.n	14d12 <rpmsg_get_endpoint+0x5a>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   14cce:	1c69      	adds	r1, r5, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   14cd0:	f1a7 0434 	sub.w	r4, r7, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   14cd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14cd6:	d006      	beq.n	14ce6 <rpmsg_get_endpoint+0x2e>
   14cd8:	429d      	cmp	r5, r3
		if (addr == ept->addr && dest_addr == ept->dest_addr)
   14cda:	d01a      	beq.n	14d12 <rpmsg_get_endpoint+0x5a>
		if (name)
   14cdc:	f1b9 0f00 	cmp.w	r9, #0
   14ce0:	d106      	bne.n	14cf0 <rpmsg_get_endpoint+0x38>
	metal_list_for_each(&rdev->endpoints, node) {
   14ce2:	683f      	ldr	r7, [r7, #0]
   14ce4:	e7ef      	b.n	14cc6 <rpmsg_get_endpoint+0xe>
		if (addr == ept->addr && dest_addr == ept->dest_addr)
   14ce6:	3301      	adds	r3, #1
   14ce8:	d1f8      	bne.n	14cdc <rpmsg_get_endpoint+0x24>
   14cea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14cec:	42b3      	cmp	r3, r6
   14cee:	e7f4      	b.n	14cda <rpmsg_get_endpoint+0x22>
			name_match = !strncmp(ept->name, name,
   14cf0:	2220      	movs	r2, #32
   14cf2:	4649      	mov	r1, r9
   14cf4:	4620      	mov	r0, r4
   14cf6:	f7fd fa13 	bl	12120 <strncmp>
		if (!name || !name_match)
   14cfa:	2800      	cmp	r0, #0
   14cfc:	d1f1      	bne.n	14ce2 <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   14cfe:	1c72      	adds	r2, r6, #1
   14d00:	d002      	beq.n	14d08 <rpmsg_get_endpoint+0x50>
   14d02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14d04:	42b3      	cmp	r3, r6
   14d06:	d004      	beq.n	14d12 <rpmsg_get_endpoint+0x5a>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   14d08:	1c6b      	adds	r3, r5, #1
   14d0a:	d1ea      	bne.n	14ce2 <rpmsg_get_endpoint+0x2a>
   14d0c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14d0e:	3301      	adds	r3, #1
   14d10:	d1e7      	bne.n	14ce2 <rpmsg_get_endpoint+0x2a>
}
   14d12:	4620      	mov	r0, r4
   14d14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00014d18 <rpmsg_register_endpoint>:
	new_node->prev = node->prev;
   14d18:	6842      	ldr	r2, [r0, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   14d1a:	f101 0334 	add.w	r3, r1, #52	; 0x34
	new_node->next = node;
   14d1e:	e9c1 020d 	strd	r0, r2, [r1, #52]	; 0x34
	ept->rdev = rdev;
   14d22:	6208      	str	r0, [r1, #32]
	new_node->next->prev = new_node;
   14d24:	6043      	str	r3, [r0, #4]
	new_node->prev->next = new_node;
   14d26:	6b8a      	ldr	r2, [r1, #56]	; 0x38
   14d28:	6013      	str	r3, [r2, #0]
}
   14d2a:	4770      	bx	lr

00014d2c <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
   14d2c:	b538      	push	{r3, r4, r5, lr}
	struct rpmsg_device *rdev;

	if (!ept)
   14d2e:	4604      	mov	r4, r0
   14d30:	b1b8      	cbz	r0, 14d62 <rpmsg_destroy_ept+0x36>
		return;

	rdev = ept->rdev;
	if (ept->name[0] && rdev->support_ns && ept->addr != RPMSG_NS_EPT_ADDR)
   14d32:	7803      	ldrb	r3, [r0, #0]
	rdev = ept->rdev;
   14d34:	6a05      	ldr	r5, [r0, #32]
	if (ept->name[0] && rdev->support_ns && ept->addr != RPMSG_NS_EPT_ADDR)
   14d36:	b143      	cbz	r3, 14d4a <rpmsg_destroy_ept+0x1e>
   14d38:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
   14d3c:	b12b      	cbz	r3, 14d4a <rpmsg_destroy_ept+0x1e>
   14d3e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   14d40:	2b35      	cmp	r3, #53	; 0x35
   14d42:	d002      	beq.n	14d4a <rpmsg_destroy_ept+0x1e>
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   14d44:	2101      	movs	r1, #1
   14d46:	f7ff ff9e 	bl	14c86 <rpmsg_send_ns_message>
	metal_mutex_acquire(&rdev->lock);
   14d4a:	3558      	adds	r5, #88	; 0x58
   14d4c:	4628      	mov	r0, r5
   14d4e:	f7ff ff94 	bl	14c7a <__metal_mutex_acquire>
	rpmsg_unregister_endpoint(ept);
   14d52:	4620      	mov	r0, r4
   14d54:	f7ff ff73 	bl	14c3e <rpmsg_unregister_endpoint>
	z_impl_k_sem_give(sem);
   14d58:	4628      	mov	r0, r5
	metal_mutex_release(&rdev->lock);
}
   14d5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   14d5e:	f7fa bdb3 	b.w	f8c8 <z_impl_k_sem_give>
   14d62:	bd38      	pop	{r3, r4, r5, pc}

00014d64 <rpmsg_virtio_tx_callback>:
}
   14d64:	4770      	bx	lr

00014d66 <k_sem_give>:
   14d66:	f7fa bdaf 	b.w	f8c8 <z_impl_k_sem_give>

00014d6a <rpmsg_virtio_get_rx_buffer>:
{
   14d6a:	b430      	push	{r4, r5}
	return rvdev->vdev->role;
   14d6c:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
   14d6e:	4613      	mov	r3, r2
   14d70:	69ad      	ldr	r5, [r5, #24]
	if (role == RPMSG_MASTER) {
   14d72:	b925      	cbnz	r5, 14d7e <rpmsg_virtio_get_rx_buffer+0x14>
}
   14d74:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   14d76:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   14d7a:	f7ff be57 	b.w	14a2c <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
   14d7e:	2d01      	cmp	r5, #1
   14d80:	d106      	bne.n	14d90 <rpmsg_virtio_get_rx_buffer+0x26>
}
   14d82:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   14d84:	460a      	mov	r2, r1
   14d86:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   14d8a:	4619      	mov	r1, r3
   14d8c:	f7ff be88 	b.w	14aa0 <virtqueue_get_available_buffer>
}
   14d90:	2000      	movs	r0, #0
   14d92:	bc30      	pop	{r4, r5}
   14d94:	4770      	bx	lr

00014d96 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   14d96:	f04f 32ff 	mov.w	r2, #4294967295
   14d9a:	f04f 33ff 	mov.w	r3, #4294967295
   14d9e:	f7fa bdd7 	b.w	f950 <z_impl_k_sem_take>

00014da2 <rpmsg_virtio_ns_callback>:
{
   14da2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (len != sizeof(*ns_msg))
   14da6:	2a28      	cmp	r2, #40	; 0x28
{
   14da8:	4680      	mov	r8, r0
   14daa:	460e      	mov	r6, r1
   14dac:	b089      	sub	sp, #36	; 0x24
	if (len != sizeof(*ns_msg))
   14dae:	d12b      	bne.n	14e08 <rpmsg_virtio_ns_callback+0x66>
	struct rpmsg_device *rdev = ept->rdev;
   14db0:	6a05      	ldr	r5, [r0, #32]
	metal_io_block_read(io,
   14db2:	2320      	movs	r3, #32
	struct metal_io_region *io = rvdev->shbuf_io;
   14db4:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
	metal_io_block_read(io,
   14db8:	466a      	mov	r2, sp
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   14dba:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   14dbc:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   14dbe:	1a71      	subs	r1, r6, r1
   14dc0:	42a1      	cmp	r1, r4
   14dc2:	bf28      	it	cs
   14dc4:	f04f 31ff 	movcs.w	r1, #4294967295
   14dc8:	f7ff fcd2 	bl	14770 <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
   14dcc:	f105 0758 	add.w	r7, r5, #88	; 0x58
	dest = ns_msg->addr;
   14dd0:	f8d6 9020 	ldr.w	r9, [r6, #32]
   14dd4:	4638      	mov	r0, r7
   14dd6:	f7ff ffde 	bl	14d96 <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   14dda:	464b      	mov	r3, r9
   14ddc:	f04f 32ff 	mov.w	r2, #4294967295
   14de0:	4669      	mov	r1, sp
   14de2:	4628      	mov	r0, r5
   14de4:	f7ff ff68 	bl	14cb8 <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   14de8:	6a73      	ldr	r3, [r6, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   14dea:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   14dec:	07db      	lsls	r3, r3, #31
   14dee:	d50f      	bpl.n	14e10 <rpmsg_virtio_ns_callback+0x6e>
		if (_ept)
   14df0:	b110      	cbz	r0, 14df8 <rpmsg_virtio_ns_callback+0x56>
			_ept->dest_addr = RPMSG_ADDR_ANY;
   14df2:	f04f 33ff 	mov.w	r3, #4294967295
   14df6:	6283      	str	r3, [r0, #40]	; 0x28
   14df8:	4638      	mov	r0, r7
   14dfa:	f7ff ffb4 	bl	14d66 <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   14dfe:	b11c      	cbz	r4, 14e08 <rpmsg_virtio_ns_callback+0x66>
   14e00:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14e02:	b10b      	cbz	r3, 14e08 <rpmsg_virtio_ns_callback+0x66>
			_ept->ns_unbind_cb(ept);
   14e04:	4640      	mov	r0, r8
   14e06:	4798      	blx	r3
}
   14e08:	2000      	movs	r0, #0
   14e0a:	b009      	add	sp, #36	; 0x24
   14e0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!_ept) {
   14e10:	b950      	cbnz	r0, 14e28 <rpmsg_virtio_ns_callback+0x86>
   14e12:	4638      	mov	r0, r7
   14e14:	f7ff ffa7 	bl	14d66 <k_sem_give>
			if (rdev->ns_bind_cb)
   14e18:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   14e1a:	2b00      	cmp	r3, #0
   14e1c:	d0f4      	beq.n	14e08 <rpmsg_virtio_ns_callback+0x66>
				rdev->ns_bind_cb(rdev, name, dest);
   14e1e:	464a      	mov	r2, r9
   14e20:	4669      	mov	r1, sp
   14e22:	4628      	mov	r0, r5
   14e24:	4798      	blx	r3
   14e26:	e7ef      	b.n	14e08 <rpmsg_virtio_ns_callback+0x66>
			_ept->dest_addr = dest;
   14e28:	f8c0 9028 	str.w	r9, [r0, #40]	; 0x28
   14e2c:	4638      	mov	r0, r7
   14e2e:	f7ff ff9a 	bl	14d66 <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   14e32:	e7e9      	b.n	14e08 <rpmsg_virtio_ns_callback+0x66>

00014e34 <rpmsg_virtio_rx_callback>:
{
   14e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   14e38:	6803      	ldr	r3, [r0, #0]
{
   14e3a:	b086      	sub	sp, #24
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   14e3c:	6a5e      	ldr	r6, [r3, #36]	; 0x24
	metal_mutex_acquire(&rdev->lock);
   14e3e:	f106 0758 	add.w	r7, r6, #88	; 0x58
	__metal_mutex_acquire(mutex);
   14e42:	4638      	mov	r0, r7
   14e44:	f7ff ffa7 	bl	14d96 <__metal_mutex_acquire>
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   14e48:	4630      	mov	r0, r6
   14e4a:	f10d 020a 	add.w	r2, sp, #10
   14e4e:	a903      	add	r1, sp, #12
   14e50:	f7ff ff8b 	bl	14d6a <rpmsg_virtio_get_rx_buffer>
   14e54:	4604      	mov	r4, r0
   14e56:	4638      	mov	r0, r7
   14e58:	f7ff ff85 	bl	14d66 <k_sem_give>
	while (rp_hdr) {
   14e5c:	b914      	cbnz	r4, 14e64 <rpmsg_virtio_rx_callback+0x30>
}
   14e5e:	b006      	add	sp, #24
   14e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14e64:	4638      	mov	r0, r7
   14e66:	f7ff ff96 	bl	14d96 <__metal_mutex_acquire>
			     struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   14e6a:	f04f 33ff 	mov.w	r3, #4294967295
   14e6e:	2100      	movs	r1, #0
   14e70:	4630      	mov	r0, r6
   14e72:	6862      	ldr	r2, [r4, #4]
   14e74:	f7ff ff20 	bl	14cb8 <rpmsg_get_endpoint>
   14e78:	4605      	mov	r5, r0
   14e7a:	4638      	mov	r0, r7
   14e7c:	f7ff ff73 	bl	14d66 <k_sem_give>
		if (ept) {
   14e80:	b185      	cbz	r5, 14ea4 <rpmsg_virtio_rx_callback+0x70>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   14e82:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14e84:	6823      	ldr	r3, [r4, #0]
   14e86:	3201      	adds	r2, #1
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   14e88:	6be9      	ldr	r1, [r5, #60]	; 0x3c
				ept->dest_addr = rp_hdr->src;
   14e8a:	bf08      	it	eq
   14e8c:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   14e8e:	89a2      	ldrh	r2, [r4, #12]
   14e90:	9100      	str	r1, [sp, #0]
   14e92:	4628      	mov	r0, r5
   14e94:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
   14e98:	f104 0110 	add.w	r1, r4, #16
   14e9c:	47c0      	blx	r8
			RPMSG_ASSERT(status >= 0,
   14e9e:	2800      	cmp	r0, #0
   14ea0:	da00      	bge.n	14ea4 <rpmsg_virtio_rx_callback+0x70>
   14ea2:	e7fe      	b.n	14ea2 <rpmsg_virtio_rx_callback+0x6e>
   14ea4:	4638      	mov	r0, r7
   14ea6:	f7ff ff76 	bl	14d96 <__metal_mutex_acquire>
   14eaa:	6ff2      	ldr	r2, [r6, #124]	; 0x7c
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   14eac:	9b03      	ldr	r3, [sp, #12]
   14eae:	6992      	ldr	r2, [r2, #24]
	if (role == RPMSG_MASTER) {
   14eb0:	b9b2      	cbnz	r2, 14ee0 <rpmsg_virtio_rx_callback+0xac>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   14eb2:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
   14eb4:	e9cd 4304 	strd	r4, r3, [sp, #16]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   14eb8:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   14ebc:	2301      	movs	r3, #1
   14ebe:	a904      	add	r1, sp, #16
   14ec0:	f7ff fd54 	bl	1496c <virtqueue_add_buffer>
		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   14ec4:	4630      	mov	r0, r6
   14ec6:	f10d 020a 	add.w	r2, sp, #10
   14eca:	a903      	add	r1, sp, #12
   14ecc:	f7ff ff4d 	bl	14d6a <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   14ed0:	4604      	mov	r4, r0
   14ed2:	2800      	cmp	r0, #0
   14ed4:	d1bf      	bne.n	14e56 <rpmsg_virtio_rx_callback+0x22>
			virtqueue_kick(rvdev->rvq);
   14ed6:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   14eda:	f7ff fe60 	bl	14b9e <virtqueue_kick>
   14ede:	e7ba      	b.n	14e56 <rpmsg_virtio_rx_callback+0x22>
	if (role == RPMSG_REMOTE) {
   14ee0:	2a01      	cmp	r2, #1
   14ee2:	d1ef      	bne.n	14ec4 <rpmsg_virtio_rx_callback+0x90>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   14ee4:	461a      	mov	r2, r3
   14ee6:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   14eea:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   14eee:	f7f8 fa77 	bl	d3e0 <virtqueue_add_consumed_buffer>
   14ef2:	e7e7      	b.n	14ec4 <rpmsg_virtio_rx_callback+0x90>

00014ef4 <rpmsg_virtio_shm_pool_get_buffer>:
{
   14ef4:	4603      	mov	r3, r0
	if (shpool->avail < size)
   14ef6:	6842      	ldr	r2, [r0, #4]
{
   14ef8:	b510      	push	{r4, lr}
	if (shpool->avail < size)
   14efa:	428a      	cmp	r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   14efc:	bf29      	itett	cs
   14efe:	6880      	ldrcs	r0, [r0, #8]
		return NULL;
   14f00:	2000      	movcc	r0, #0
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   14f02:	1a84      	subcs	r4, r0, r2
   14f04:	6818      	ldrcs	r0, [r3, #0]
	shpool->avail -= size;
   14f06:	bf22      	ittt	cs
   14f08:	1a52      	subcs	r2, r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   14f0a:	1900      	addcs	r0, r0, r4
	shpool->avail -= size;
   14f0c:	605a      	strcs	r2, [r3, #4]
}
   14f0e:	bd10      	pop	{r4, pc}

00014f10 <rpmsg_virtio_init_shm_pool>:
	if (!shpool)
   14f10:	b110      	cbz	r0, 14f18 <rpmsg_virtio_init_shm_pool+0x8>
	shpool->avail = size;
   14f12:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
   14f16:	6001      	str	r1, [r0, #0]
}
   14f18:	4770      	bx	lr

00014f1a <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   14f1a:	f7fc bc48 	b.w	117ae <z_clock_idle_exit>

00014f1e <main>:
	return z_timer_cycle_get_32();
}

static ALWAYS_INLINE void arch_nop(void)
{
	__asm__ volatile("nop");
   14f1e:	bf00      	nop
}
   14f20:	4770      	bx	lr

00014f22 <k_heap_init>:
{
   14f22:	b410      	push	{r4}
   14f24:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   14f28:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   14f2c:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   14f2e:	f7fc b9a7 	b.w	11280 <sys_heap_init>

00014f32 <k_mem_pool_alloc>:
 * backend.
 */

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, k_timeout_t timeout)
{
   14f32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14f34:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   14f38:	4614      	mov	r4, r2
	block->id.heap = p->heap;
   14f3a:	6800      	ldr	r0, [r0, #0]
{
   14f3c:	460d      	mov	r5, r1
	block->id.heap = p->heap;
   14f3e:	6048      	str	r0, [r1, #4]
	block->data = k_heap_alloc(p->heap, size, timeout);
   14f40:	4632      	mov	r2, r6
   14f42:	463b      	mov	r3, r7
   14f44:	4621      	mov	r1, r4
   14f46:	f7f8 fe47 	bl	dbd8 <k_heap_alloc>
   14f4a:	6028      	str	r0, [r5, #0]

	/* The legacy API returns -EAGAIN on timeout expiration, but
	 * -ENOMEM if the timeout was K_NO_WAIT. Don't ask.
	 */
	if (size != 0 && block->data == NULL) {
   14f4c:	b144      	cbz	r4, 14f60 <k_mem_pool_alloc+0x2e>
   14f4e:	b938      	cbnz	r0, 14f60 <k_mem_pool_alloc+0x2e>
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
   14f50:	ea56 0307 	orrs.w	r3, r6, r7
   14f54:	bf0c      	ite	eq
   14f56:	f06f 000b 	mvneq.w	r0, #11
   14f5a:	f06f 000a 	mvnne.w	r0, #10
	} else {
		return 0;
	}
}
   14f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   14f60:	2000      	movs	r0, #0
   14f62:	e7fc      	b.n	14f5e <k_mem_pool_alloc+0x2c>

00014f64 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
	k_heap_free(id->heap, id->data);
   14f64:	e9d0 1000 	ldrd	r1, r0, [r0]
   14f68:	f7f8 bee4 	b.w	dd34 <k_heap_free>

00014f6c <k_mem_pool_malloc>:
{
   14f6c:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   14f6e:	2408      	movs	r4, #8
   14f70:	190a      	adds	r2, r1, r4
   14f72:	d208      	bcs.n	14f86 <k_mem_pool_malloc+0x1a>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   14f74:	2600      	movs	r6, #0
   14f76:	2700      	movs	r7, #0
   14f78:	eb0d 0104 	add.w	r1, sp, r4
   14f7c:	e9cd 6700 	strd	r6, r7, [sp]
   14f80:	f7ff ffd7 	bl	14f32 <k_mem_pool_alloc>
   14f84:	b110      	cbz	r0, 14f8c <k_mem_pool_malloc+0x20>
		return NULL;
   14f86:	2000      	movs	r0, #0
}
   14f88:	b004      	add	sp, #16
   14f8a:	bdd0      	pop	{r4, r6, r7, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   14f8c:	4622      	mov	r2, r4
   14f8e:	9802      	ldr	r0, [sp, #8]
   14f90:	a902      	add	r1, sp, #8
   14f92:	f7fd f8e4 	bl	1215e <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   14f96:	9802      	ldr	r0, [sp, #8]
   14f98:	3008      	adds	r0, #8
   14f9a:	e7f5      	b.n	14f88 <k_mem_pool_malloc+0x1c>

00014f9c <k_free>:
	if (ptr != NULL) {
   14f9c:	b110      	cbz	r0, 14fa4 <k_free+0x8>
		k_mem_pool_free_id(ptr);
   14f9e:	3808      	subs	r0, #8
   14fa0:	f7ff bfe0 	b.w	14f64 <k_mem_pool_free_id>
}
   14fa4:	4770      	bx	lr

00014fa6 <z_impl_k_mutex_init>:
{
   14fa6:	4603      	mov	r3, r0
	mutex->owner = NULL;
   14fa8:	2000      	movs	r0, #0
   14faa:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   14fae:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   14fb2:	4770      	bx	lr

00014fb4 <z_queue_node_peek>:
{
   14fb4:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   14fb6:	4604      	mov	r4, r0
   14fb8:	b130      	cbz	r0, 14fc8 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14fba:	6802      	ldr	r2, [r0, #0]
   14fbc:	0793      	lsls	r3, r2, #30
   14fbe:	d003      	beq.n	14fc8 <z_queue_node_peek+0x14>
		ret = anode->data;
   14fc0:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   14fc2:	b109      	cbz	r1, 14fc8 <z_queue_node_peek+0x14>
			k_free(anode);
   14fc4:	f7ff ffea 	bl	14f9c <k_free>
}
   14fc8:	4620      	mov	r0, r4
   14fca:	bd10      	pop	{r4, pc}

00014fcc <z_impl_k_queue_init>:
	list->head = NULL;
   14fcc:	2300      	movs	r3, #0
	list->tail = NULL;
   14fce:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   14fd2:	6083      	str	r3, [r0, #8]
   14fd4:	f100 030c 	add.w	r3, r0, #12
   14fd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   14fdc:	f100 0314 	add.w	r3, r0, #20
   14fe0:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   14fe4:	4770      	bx	lr

00014fe6 <k_queue_append>:
{
   14fe6:	460a      	mov	r2, r1
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   14fe8:	2300      	movs	r3, #0
   14fea:	6841      	ldr	r1, [r0, #4]
   14fec:	f7f9 b9b6 	b.w	e35c <queue_insert>

00014ff0 <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false);
   14ff0:	2300      	movs	r3, #0
{
   14ff2:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false);
   14ff4:	4619      	mov	r1, r3
   14ff6:	f7f9 b9b1 	b.w	e35c <queue_insert>

00014ffa <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   14ffa:	f990 000e 	ldrsb.w	r0, [r0, #14]
   14ffe:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   15002:	4298      	cmp	r0, r3
   15004:	bfac      	ite	ge
   15006:	2000      	movge	r0, #0
   15008:	2001      	movlt	r0, #1
   1500a:	4770      	bx	lr

0001500c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1500c:	4603      	mov	r3, r0
   1500e:	b920      	cbnz	r0, 1501a <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   15010:	f3ef 8205 	mrs	r2, IPSR
   15014:	b90a      	cbnz	r2, 1501a <z_reschedule_irqlock+0xe>
   15016:	f7ed be77 	b.w	2d08 <arch_swap>
   1501a:	f383 8811 	msr	BASEPRI, r3
   1501e:	f3bf 8f6f 	isb	sy
}
   15022:	4770      	bx	lr

00015024 <z_reschedule_unlocked>:
	__asm__ volatile(
   15024:	f04f 0320 	mov.w	r3, #32
   15028:	f3ef 8011 	mrs	r0, BASEPRI
   1502c:	f383 8811 	msr	BASEPRI, r3
   15030:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   15034:	f7ff bfea 	b.w	1500c <z_reschedule_irqlock>

00015038 <z_priq_dumb_best>:
	return list->head == list;
   15038:	6803      	ldr	r3, [r0, #0]
}
   1503a:	4298      	cmp	r0, r3
   1503c:	bf14      	ite	ne
   1503e:	4618      	movne	r0, r3
   15040:	2000      	moveq	r0, #0
   15042:	4770      	bx	lr

00015044 <z_unpend_all>:
{
   15044:	b538      	push	{r3, r4, r5, lr}
   15046:	4605      	mov	r5, r0
	int need_sched = 0;
   15048:	2000      	movs	r0, #0
   1504a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1504c:	42a5      	cmp	r5, r4
   1504e:	d000      	beq.n	15052 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   15050:	b904      	cbnz	r4, 15054 <z_unpend_all+0x10>
}
   15052:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   15054:	4620      	mov	r0, r4
   15056:	f7f9 fc51 	bl	e8fc <z_unpend_thread>
		z_ready_thread(thread);
   1505a:	4620      	mov	r0, r4
   1505c:	f7f9 fd8e 	bl	eb7c <z_ready_thread>
		need_sched = 1;
   15060:	2001      	movs	r0, #1
   15062:	e7f2      	b.n	1504a <z_unpend_all+0x6>

00015064 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   15064:	b15a      	cbz	r2, 1507e <z_impl_k_sem_init+0x1a>
   15066:	428a      	cmp	r2, r1
   15068:	d309      	bcc.n	1507e <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1506a:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1506e:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   15072:	e9c0 0000 	strd	r0, r0, [r0]
   15076:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1507a:	2000      	movs	r0, #0
   1507c:	4770      	bx	lr
		return -EINVAL;
   1507e:	f06f 0015 	mvn.w	r0, #21
}
   15082:	4770      	bx	lr

00015084 <k_is_in_isr>:
   15084:	f3ef 8005 	mrs	r0, IPSR
}
   15088:	3800      	subs	r0, #0
   1508a:	bf18      	it	ne
   1508c:	2001      	movne	r0, #1
   1508e:	4770      	bx	lr

00015090 <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   15090:	f7ec b968 	b.w	1364 <arch_busy_wait>

00015094 <z_impl_k_thread_name_set>:
}
   15094:	f06f 0046 	mvn.w	r0, #70	; 0x46
   15098:	4770      	bx	lr

0001509a <k_thread_name_get>:
}
   1509a:	2000      	movs	r0, #0
   1509c:	4770      	bx	lr

0001509e <k_work_submit_to_queue>:
{
   1509e:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   150a0:	f101 0308 	add.w	r3, r1, #8
   150a4:	e8d3 2fef 	ldaex	r2, [r3]
   150a8:	f042 0c01 	orr.w	ip, r2, #1
   150ac:	e8c3 cfee 	stlex	lr, ip, [r3]
   150b0:	f1be 0f00 	cmp.w	lr, #0
   150b4:	d1f6      	bne.n	150a4 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   150b6:	07d3      	lsls	r3, r2, #31
   150b8:	d403      	bmi.n	150c2 <k_work_submit_to_queue+0x24>
}
   150ba:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   150be:	f7ff bf92 	b.w	14fe6 <k_queue_append>
}
   150c2:	f85d fb04 	ldr.w	pc, [sp], #4

000150c6 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   150c6:	f1a0 010c 	sub.w	r1, r0, #12
   150ca:	6900      	ldr	r0, [r0, #16]
   150cc:	f7ff bfe7 	b.w	1509e <k_work_submit_to_queue>

000150d0 <work_cancel>:
	CHECKIF(work->work_q == NULL) {
   150d0:	69c3      	ldr	r3, [r0, #28]
{
   150d2:	b570      	push	{r4, r5, r6, lr}
   150d4:	4604      	mov	r4, r0
	CHECKIF(work->work_q == NULL) {
   150d6:	b913      	cbnz	r3, 150de <work_cancel+0xe>
		return -EALREADY;
   150d8:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
   150dc:	bd70      	pop	{r4, r5, r6, pc}
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   150de:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   150e2:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   150e6:	07db      	lsls	r3, r3, #31
   150e8:	d52f      	bpl.n	1514a <work_cancel+0x7a>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   150ea:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   150ec:	69c2      	ldr	r2, [r0, #28]
   150ee:	6813      	ldr	r3, [r2, #0]
   150f0:	b913      	cbnz	r3, 150f8 <work_cancel+0x28>
			return -EINVAL;
   150f2:	f06f 0015 	mvn.w	r0, #21
   150f6:	e7f1      	b.n	150dc <work_cancel+0xc>
   150f8:	429c      	cmp	r4, r3
   150fa:	d121      	bne.n	15140 <work_cancel+0x70>
Z_GENLIST_REMOVE(sflist, sfnode)
   150fc:	6823      	ldr	r3, [r4, #0]
   150fe:	6856      	ldr	r6, [r2, #4]
   15100:	f023 0003 	bic.w	r0, r3, #3
   15104:	b991      	cbnz	r1, 1512c <work_cancel+0x5c>
   15106:	42b4      	cmp	r4, r6
	list->head = node;
   15108:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   1510a:	d100      	bne.n	1510e <work_cancel+0x3e>
	list->tail = node;
   1510c:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1510e:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   15110:	f003 0303 	and.w	r3, r3, #3
   15114:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   15116:	2000      	movs	r0, #0
   15118:	61e0      	str	r0, [r4, #28]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1511a:	e8d5 3fef 	ldaex	r3, [r5]
   1511e:	f023 0301 	bic.w	r3, r3, #1
   15122:	e8c5 3fe2 	stlex	r2, r3, [r5]
   15126:	2a00      	cmp	r2, #0
   15128:	d0d8      	beq.n	150dc <work_cancel+0xc>
   1512a:	e7f6      	b.n	1511a <work_cancel+0x4a>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1512c:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   1512e:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   15130:	f003 0303 	and.w	r3, r3, #3
   15134:	ea43 0300 	orr.w	r3, r3, r0
   15138:	600b      	str	r3, [r1, #0]
	list->tail = node;
   1513a:	bf08      	it	eq
   1513c:	6051      	streq	r1, [r2, #4]
}
   1513e:	e7e6      	b.n	1510e <work_cancel+0x3e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   15140:	6818      	ldr	r0, [r3, #0]
   15142:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   15144:	f020 0303 	bic.w	r3, r0, #3
   15148:	e7d2      	b.n	150f0 <work_cancel+0x20>
		int err = z_abort_timeout(&work->timeout);
   1514a:	300c      	adds	r0, #12
   1514c:	f7fb f812 	bl	10174 <z_abort_timeout>
		if (err) {
   15150:	2800      	cmp	r0, #0
   15152:	d0e0      	beq.n	15116 <work_cancel+0x46>
   15154:	e7c0      	b.n	150d8 <work_cancel+0x8>

00015156 <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   15156:	2300      	movs	r3, #0
   15158:	e9c0 3100 	strd	r3, r1, [r0]
	node->next = NULL;
   1515c:	e9c0 3302 	strd	r3, r3, [r0, #8]
	node->prev = NULL;
   15160:	6103      	str	r3, [r0, #16]
	work->work_q = NULL;
   15162:	61c3      	str	r3, [r0, #28]
}
   15164:	4770      	bx	lr

00015166 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   15166:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   15168:	f7fb f99a 	bl	104a0 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   1516c:	bd08      	pop	{r3, pc}

0001516e <z_impl_k_uptime_ticks>:

s64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   1516e:	f7fb b997 	b.w	104a0 <z_tick_get>

00015172 <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
u64_t z_timeout_end_calc(k_timeout_t timeout)
{
   15172:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   15174:	1c4b      	adds	r3, r1, #1
   15176:	bf08      	it	eq
   15178:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1517c:	4604      	mov	r4, r0
   1517e:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   15180:	d013      	beq.n	151aa <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   15182:	ea54 0105 	orrs.w	r1, r4, r5
   15186:	d103      	bne.n	15190 <z_timeout_end_calc+0x1e>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
#endif
	return z_tick_get() + MAX(1, dt);
}
   15188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   1518c:	f7fb b988 	b.w	104a0 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   15190:	f06f 0101 	mvn.w	r1, #1
   15194:	1a0a      	subs	r2, r1, r0
   15196:	f04f 31ff 	mov.w	r1, #4294967295
   1519a:	eb61 0305 	sbc.w	r3, r1, r5
   1519e:	2a00      	cmp	r2, #0
   151a0:	f173 0100 	sbcs.w	r1, r3, #0
   151a4:	db02      	blt.n	151ac <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   151a6:	4610      	mov	r0, r2
   151a8:	4619      	mov	r1, r3
}
   151aa:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   151ac:	f7fb f978 	bl	104a0 <z_tick_get>
   151b0:	2c01      	cmp	r4, #1
   151b2:	f175 0300 	sbcs.w	r3, r5, #0
   151b6:	bfbc      	itt	lt
   151b8:	2401      	movlt	r4, #1
   151ba:	2500      	movlt	r5, #0
   151bc:	1820      	adds	r0, r4, r0
   151be:	eb45 0101 	adc.w	r1, r5, r1
   151c2:	e7f2      	b.n	151aa <z_timeout_end_calc+0x38>

000151c4 <signal_poll_event>:
{
   151c4:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   151c6:	6884      	ldr	r4, [r0, #8]
{
   151c8:	4605      	mov	r5, r0
   151ca:	460e      	mov	r6, r1
	if (poller) {
   151cc:	b19c      	cbz	r4, 151f6 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   151ce:	68a3      	ldr	r3, [r4, #8]
   151d0:	b95b      	cbnz	r3, 151ea <signal_poll_event+0x26>
	int retcode = 0;
   151d2:	4618      	mov	r0, r3
		poller->is_polling = false;
   151d4:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   151d6:	2300      	movs	r3, #0
   151d8:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   151da:	68eb      	ldr	r3, [r5, #12]
   151dc:	f3c3 3104 	ubfx	r1, r3, #12, #5
   151e0:	430e      	orrs	r6, r1
   151e2:	f366 3310 	bfi	r3, r6, #12, #5
   151e6:	60eb      	str	r3, [r5, #12]
	return retcode;
   151e8:	e004      	b.n	151f4 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   151ea:	4798      	blx	r3
		poller->is_polling = false;
   151ec:	2300      	movs	r3, #0
		if (retcode < 0) {
   151ee:	2800      	cmp	r0, #0
		poller->is_polling = false;
   151f0:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   151f2:	daf0      	bge.n	151d6 <signal_poll_event+0x12>
}
   151f4:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   151f6:	4620      	mov	r0, r4
   151f8:	e7ed      	b.n	151d6 <signal_poll_event+0x12>

000151fa <add_event>:
{
   151fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   151fc:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   151fe:	e9d0 2300 	ldrd	r2, r3, [r0]
   15202:	4290      	cmp	r0, r2
   15204:	4604      	mov	r4, r0
   15206:	460d      	mov	r5, r1
   15208:	d106      	bne.n	15218 <add_event+0x1e>
	node->prev = list->tail;
   1520a:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   1520c:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   1520e:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   15210:	6863      	ldr	r3, [r4, #4]
   15212:	601d      	str	r5, [r3, #0]
	list->tail = node;
   15214:	6065      	str	r5, [r4, #4]
}
   15216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   15218:	2b00      	cmp	r3, #0
   1521a:	d0f6      	beq.n	1520a <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   1521c:	689b      	ldr	r3, [r3, #8]
   1521e:	6879      	ldr	r1, [r7, #4]
   15220:	6858      	ldr	r0, [r3, #4]
   15222:	f7ff feea 	bl	14ffa <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   15226:	2800      	cmp	r0, #0
   15228:	d1ef      	bne.n	1520a <add_event+0x10>
	return list->head == list;
   1522a:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1522c:	42b4      	cmp	r4, r6
   1522e:	d0ec      	beq.n	1520a <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   15230:	2e00      	cmp	r6, #0
   15232:	d0ea      	beq.n	1520a <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   15234:	68b3      	ldr	r3, [r6, #8]
   15236:	6878      	ldr	r0, [r7, #4]
   15238:	6859      	ldr	r1, [r3, #4]
   1523a:	f7ff fede 	bl	14ffa <z_is_t1_higher_prio_than_t2>
   1523e:	b128      	cbz	r0, 1524c <add_event+0x52>
	node->prev = successor->prev;
   15240:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   15242:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   15246:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   15248:	6075      	str	r5, [r6, #4]
			return;
   1524a:	e7e4      	b.n	15216 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   1524c:	6863      	ldr	r3, [r4, #4]
   1524e:	429e      	cmp	r6, r3
   15250:	d0db      	beq.n	1520a <add_event+0x10>
   15252:	6836      	ldr	r6, [r6, #0]
   15254:	e7ec      	b.n	15230 <add_event+0x36>

00015256 <z_handle_obj_poll_events>:
{
   15256:	4603      	mov	r3, r0
	return list->head == list;
   15258:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1525a:	4283      	cmp	r3, r0
   1525c:	d008      	beq.n	15270 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   1525e:	e9d0 3200 	ldrd	r3, r2, [r0]
   15262:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   15264:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   15266:	2300      	movs	r3, #0
	node->prev = NULL;
   15268:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   1526c:	f7ff bfaa 	b.w	151c4 <signal_poll_event>
}
   15270:	4770      	bx	lr

00015272 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   15272:	4770      	bx	lr
