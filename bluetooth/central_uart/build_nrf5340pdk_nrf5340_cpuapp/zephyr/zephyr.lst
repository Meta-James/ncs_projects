
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	20003698 	.word	0x20003698
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   4:	00003e8d 	.word	0x00003e8d
   8:	00013589 	.word	0x00013589
   c:	00003ebd 	.word	0x00003ebd
  10:	00003ebd 	.word	0x00003ebd
		if (fdtable[fd].obj == NULL) {
  14:	00003ebd 	.word	0x00003ebd
  18:	00003ebd 	.word	0x00003ebd
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
  1c:	00003ebd 	.word	0x00003ebd
	...
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
  2c:	00003dfd 	.word	0x00003dfd
  30:	00003ebd 	.word	0x00003ebd
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  34:	00000000 	.word	0x00000000
		fdtable[fd].obj = FD_OBJ_RESERVED;
  38:	00003da5 	.word	0x00003da5
  3c:	0000285d 	.word	0x0000285d

00000040 <_irq_vector_table>:
  40:	00003e4d 00003e4d 00003e4d 00003e4d     M>..M>..M>..M>..
		sys_pm_notify_power_state_exit(pm_state);
		_sys_pm_power_state_exit_post_ops(pm_state);
	}

	return pm_state;
}
  50:	00003e4d 00003e4d 00003e4d 00003e4d     M>..M>..M>..M>..
  60:	00003e4d 00003e4d 00003e4d 00003e4d     M>..M>..M>..M>..
  70:	00003e4d 00003e4d 00003e4d 00003e4d     M>..M>..M>..M>..
  80:	00003e4d 00003e4d 00003e4d 00003e4d     M>..M>..M>..M>..
  90:	00003e4d 00003e4d 00003e4d 00003e4d     M>..M>..M>..M>..
  a0:	00003e4d 00003e4d 00003e4d 00003e4d     M>..M>..M>..M>..
  b0:	00003e4d 00003e4d 00003e4d 00003e4d     M>..M>..M>..M>..
  c0:	00003e4d 00003e4d 00003e4d 00003e4d     M>..M>..M>..M>..
  d0:	00003e4d 00003e4d 00003e4d 00003e4d     M>..M>..M>..M>..
  e0:	00003e4d 00003e4d 00003e4d 00003e4d     M>..M>..M>..M>..
  f0:	00003e4d 00003e4d 00003e4d 00003e4d     M>..M>..M>..M>..
 100:	00003e4d 00003e4d 00003e4d 00003e4d     M>..M>..M>..M>..
 110:	00003e4d 00003e4d 00003e4d 00003e4d     M>..M>..M>..M>..
 120:	00003e4d 00003e4d 00003e4d 00003e4d     M>..M>..M>..M>..
 130:	00003e4d 00003e4d 00003e4d 00003e4d     M>..M>..M>..M>..
 140:	00003e4d 00003e4d 00003e4d 00003e4d     M>..M>..M>..M>..
 150:	00003e4d                                M>..

Disassembly of section text:

00000158 <__aeabi_uldivmod>:
     158:	b953      	cbnz	r3, 170 <__aeabi_uldivmod+0x18>
     15a:	b94a      	cbnz	r2, 170 <__aeabi_uldivmod+0x18>
     15c:	2900      	cmp	r1, #0
     15e:	bf08      	it	eq
     160:	2800      	cmpeq	r0, #0
     162:	bf1c      	itt	ne
     164:	f04f 31ff 	movne.w	r1, #4294967295
     168:	f04f 30ff 	movne.w	r0, #4294967295
     16c:	f000 b970 	b.w	450 <__aeabi_idiv0>
     170:	f1ad 0c08 	sub.w	ip, sp, #8
     174:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     178:	f000 f806 	bl	188 <__udivmoddi4>
     17c:	f8dd e004 	ldr.w	lr, [sp, #4]
     180:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     184:	b004      	add	sp, #16
     186:	4770      	bx	lr

00000188 <__udivmoddi4>:
     188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     18c:	9e08      	ldr	r6, [sp, #32]
     18e:	460d      	mov	r5, r1
     190:	4604      	mov	r4, r0
     192:	468a      	mov	sl, r1
     194:	2b00      	cmp	r3, #0
     196:	d17f      	bne.n	298 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x18>
     198:	428a      	cmp	r2, r1
     19a:	4617      	mov	r7, r2
     19c:	d941      	bls.n	222 <CONFIG_UART_MUX_RX_STACK_SIZE+0x22>
     19e:	fab2 f282 	clz	r2, r2
     1a2:	b14a      	cbz	r2, 1b8 <__udivmoddi4+0x30>
     1a4:	f1c2 0120 	rsb	r1, r2, #32
     1a8:	fa05 f302 	lsl.w	r3, r5, r2
     1ac:	4097      	lsls	r7, r2
     1ae:	4094      	lsls	r4, r2
     1b0:	fa20 f101 	lsr.w	r1, r0, r1
     1b4:	ea41 0a03 	orr.w	sl, r1, r3
     1b8:	ea4f 4817 	mov.w	r8, r7, lsr #16
     1bc:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     1c0:	fa1f f987 	uxth.w	r9, r7
     1c4:	fbba fef8 	udiv	lr, sl, r8
     1c8:	fb08 a31e 	mls	r3, r8, lr, sl
     1cc:	fb0e f109 	mul.w	r1, lr, r9
     1d0:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
     1d4:	4299      	cmp	r1, r3
     1d6:	d906      	bls.n	1e6 <CONFIG_SRAM_SIZE+0x26>
     1d8:	18fb      	adds	r3, r7, r3
     1da:	d202      	bcs.n	1e2 <CONFIG_SRAM_SIZE+0x22>
     1dc:	4299      	cmp	r1, r3
     1de:	f200 8124 	bhi.w	42a <CONFIG_BT_HCI_TX_STACK_SIZE+0x2a>
     1e2:	f10e 3eff 	add.w	lr, lr, #4294967295
     1e6:	1a59      	subs	r1, r3, r1
     1e8:	b2a3      	uxth	r3, r4
     1ea:	fbb1 f0f8 	udiv	r0, r1, r8
     1ee:	fb08 1110 	mls	r1, r8, r0, r1
     1f2:	fb00 f909 	mul.w	r9, r0, r9
     1f6:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     1fa:	45a1      	cmp	r9, r4
     1fc:	d905      	bls.n	20a <CONFIG_UART_MUX_RX_STACK_SIZE+0xa>
     1fe:	193c      	adds	r4, r7, r4
     200:	d202      	bcs.n	208 <CONFIG_UART_MUX_RX_STACK_SIZE+0x8>
     202:	45a1      	cmp	r9, r4
     204:	f200 810e 	bhi.w	424 <CONFIG_BT_HCI_TX_STACK_SIZE+0x24>
     208:	3801      	subs	r0, #1
     20a:	eba4 0409 	sub.w	r4, r4, r9
     20e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     212:	2100      	movs	r1, #0
     214:	b11e      	cbz	r6, 21e <CONFIG_UART_MUX_RX_STACK_SIZE+0x1e>
     216:	40d4      	lsrs	r4, r2
     218:	2300      	movs	r3, #0
     21a:	e9c6 4300 	strd	r4, r3, [r6]
     21e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     222:	b902      	cbnz	r2, 226 <CONFIG_UART_MUX_RX_STACK_SIZE+0x26>
     224:	deff      	udf	#255	; 0xff
     226:	fab2 f282 	clz	r2, r2
     22a:	2a00      	cmp	r2, #0
     22c:	d14f      	bne.n	2ce <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4e>
     22e:	1bcb      	subs	r3, r1, r7
     230:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     234:	fa1f f887 	uxth.w	r8, r7
     238:	2101      	movs	r1, #1
     23a:	0c25      	lsrs	r5, r4, #16
     23c:	fbb3 fcfe 	udiv	ip, r3, lr
     240:	fb0e 301c 	mls	r0, lr, ip, r3
     244:	462b      	mov	r3, r5
     246:	fb08 f90c 	mul.w	r9, r8, ip
     24a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     24e:	45a9      	cmp	r9, r5
     250:	d90a      	bls.n	268 <CONFIG_UART_MUX_RX_STACK_SIZE+0x68>
     252:	197d      	adds	r5, r7, r5
     254:	bf2c      	ite	cs
     256:	2301      	movcs	r3, #1
     258:	2300      	movcc	r3, #0
     25a:	45a9      	cmp	r9, r5
     25c:	d902      	bls.n	264 <CONFIG_UART_MUX_RX_STACK_SIZE+0x64>
     25e:	2b00      	cmp	r3, #0
     260:	f000 80d9 	beq.w	416 <CONFIG_BT_HCI_TX_STACK_SIZE+0x16>
     264:	f10c 3cff 	add.w	ip, ip, #4294967295
     268:	eba5 0509 	sub.w	r5, r5, r9
     26c:	b2a3      	uxth	r3, r4
     26e:	fbb5 f0fe 	udiv	r0, r5, lr
     272:	fb0e 5510 	mls	r5, lr, r0, r5
     276:	fb08 f800 	mul.w	r8, r8, r0
     27a:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     27e:	45a0      	cmp	r8, r4
     280:	d905      	bls.n	28e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xe>
     282:	193c      	adds	r4, r7, r4
     284:	d202      	bcs.n	28c <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc>
     286:	45a0      	cmp	r8, r4
     288:	f200 80c9 	bhi.w	41e <CONFIG_BT_HCI_TX_STACK_SIZE+0x1e>
     28c:	3801      	subs	r0, #1
     28e:	eba4 0408 	sub.w	r4, r4, r8
     292:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     296:	e7bd      	b.n	214 <CONFIG_UART_MUX_RX_STACK_SIZE+0x14>
     298:	428b      	cmp	r3, r1
     29a:	d908      	bls.n	2ae <CONFIG_PM_PARTITION_SIZE_PROVISION+0x2e>
     29c:	2e00      	cmp	r6, #0
     29e:	f000 80b1 	beq.w	404 <CONFIG_BT_HCI_TX_STACK_SIZE+0x4>
     2a2:	2100      	movs	r1, #0
     2a4:	e9c6 0500 	strd	r0, r5, [r6]
     2a8:	4608      	mov	r0, r1
     2aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     2ae:	fab3 f183 	clz	r1, r3
     2b2:	2900      	cmp	r1, #0
     2b4:	d146      	bne.n	344 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc4>
     2b6:	42ab      	cmp	r3, r5
     2b8:	f0c0 80a7 	bcc.w	40a <CONFIG_BT_HCI_TX_STACK_SIZE+0xa>
     2bc:	4282      	cmp	r2, r0
     2be:	f240 80a4 	bls.w	40a <CONFIG_BT_HCI_TX_STACK_SIZE+0xa>
     2c2:	4608      	mov	r0, r1
     2c4:	2e00      	cmp	r6, #0
     2c6:	d0aa      	beq.n	21e <CONFIG_UART_MUX_RX_STACK_SIZE+0x1e>
     2c8:	e9c6 4a00 	strd	r4, sl, [r6]
     2cc:	e7a7      	b.n	21e <CONFIG_UART_MUX_RX_STACK_SIZE+0x1e>
     2ce:	f1c2 0020 	rsb	r0, r2, #32
     2d2:	4097      	lsls	r7, r2
     2d4:	fa01 f302 	lsl.w	r3, r1, r2
     2d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     2dc:	40c1      	lsrs	r1, r0
     2de:	fa24 f500 	lsr.w	r5, r4, r0
     2e2:	fa1f f887 	uxth.w	r8, r7
     2e6:	4094      	lsls	r4, r2
     2e8:	431d      	orrs	r5, r3
     2ea:	fbb1 f0fe 	udiv	r0, r1, lr
     2ee:	0c2b      	lsrs	r3, r5, #16
     2f0:	fb0e 1110 	mls	r1, lr, r0, r1
     2f4:	fb00 fc08 	mul.w	ip, r0, r8
     2f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2fc:	459c      	cmp	ip, r3
     2fe:	d909      	bls.n	314 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x94>
     300:	18fb      	adds	r3, r7, r3
     302:	bf2c      	ite	cs
     304:	2101      	movcs	r1, #1
     306:	2100      	movcc	r1, #0
     308:	459c      	cmp	ip, r3
     30a:	d902      	bls.n	312 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x92>
     30c:	2900      	cmp	r1, #0
     30e:	f000 8095 	beq.w	43c <CONFIG_BT_HCI_TX_STACK_SIZE+0x3c>
     312:	3801      	subs	r0, #1
     314:	eba3 030c 	sub.w	r3, r3, ip
     318:	b2ad      	uxth	r5, r5
     31a:	fbb3 f1fe 	udiv	r1, r3, lr
     31e:	fb0e 3311 	mls	r3, lr, r1, r3
     322:	fb01 fc08 	mul.w	ip, r1, r8
     326:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     32a:	45ac      	cmp	ip, r5
     32c:	d905      	bls.n	33a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xba>
     32e:	197d      	adds	r5, r7, r5
     330:	d202      	bcs.n	338 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xb8>
     332:	45ac      	cmp	ip, r5
     334:	f200 8089 	bhi.w	44a <CONFIG_BT_HCI_TX_STACK_SIZE+0x4a>
     338:	3901      	subs	r1, #1
     33a:	eba5 030c 	sub.w	r3, r5, ip
     33e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     342:	e77a      	b.n	23a <CONFIG_UART_MUX_RX_STACK_SIZE+0x3a>
     344:	f1c1 0420 	rsb	r4, r1, #32
     348:	408b      	lsls	r3, r1
     34a:	fa02 f701 	lsl.w	r7, r2, r1
     34e:	fa05 fc01 	lsl.w	ip, r5, r1
     352:	40e2      	lsrs	r2, r4
     354:	fa20 f804 	lsr.w	r8, r0, r4
     358:	40e5      	lsrs	r5, r4
     35a:	fa00 fe01 	lsl.w	lr, r0, r1
     35e:	4313      	orrs	r3, r2
     360:	ea48 020c 	orr.w	r2, r8, ip
     364:	ea4f 4813 	mov.w	r8, r3, lsr #16
     368:	ea4f 4c12 	mov.w	ip, r2, lsr #16
     36c:	fa1f f983 	uxth.w	r9, r3
     370:	fbb5 faf8 	udiv	sl, r5, r8
     374:	fb08 551a 	mls	r5, r8, sl, r5
     378:	fb0a f009 	mul.w	r0, sl, r9
     37c:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
     380:	4560      	cmp	r0, ip
     382:	d90a      	bls.n	39a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x11a>
     384:	eb13 0c0c 	adds.w	ip, r3, ip
     388:	bf2c      	ite	cs
     38a:	2501      	movcs	r5, #1
     38c:	2500      	movcc	r5, #0
     38e:	4560      	cmp	r0, ip
     390:	d901      	bls.n	396 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x116>
     392:	2d00      	cmp	r5, #0
     394:	d055      	beq.n	442 <CONFIG_BT_HCI_TX_STACK_SIZE+0x42>
     396:	f10a 3aff 	add.w	sl, sl, #4294967295
     39a:	ebac 0c00 	sub.w	ip, ip, r0
     39e:	b292      	uxth	r2, r2
     3a0:	fbbc f0f8 	udiv	r0, ip, r8
     3a4:	fb08 cc10 	mls	ip, r8, r0, ip
     3a8:	fb00 f909 	mul.w	r9, r0, r9
     3ac:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
     3b0:	45e1      	cmp	r9, ip
     3b2:	d905      	bls.n	3c0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x140>
     3b4:	eb13 0c0c 	adds.w	ip, r3, ip
     3b8:	d201      	bcs.n	3be <CONFIG_PM_PARTITION_SIZE_PROVISION+0x13e>
     3ba:	45e1      	cmp	r9, ip
     3bc:	d83b      	bhi.n	436 <CONFIG_BT_HCI_TX_STACK_SIZE+0x36>
     3be:	3801      	subs	r0, #1
     3c0:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
     3c4:	ebac 0c09 	sub.w	ip, ip, r9
     3c8:	fba0 8907 	umull	r8, r9, r0, r7
     3cc:	45cc      	cmp	ip, r9
     3ce:	4645      	mov	r5, r8
     3d0:	464a      	mov	r2, r9
     3d2:	d302      	bcc.n	3da <CONFIG_PM_PARTITION_SIZE_PROVISION+0x15a>
     3d4:	d106      	bne.n	3e4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x164>
     3d6:	45c6      	cmp	lr, r8
     3d8:	d204      	bcs.n	3e4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x164>
     3da:	3801      	subs	r0, #1
     3dc:	ebb8 0507 	subs.w	r5, r8, r7
     3e0:	eb69 0203 	sbc.w	r2, r9, r3
     3e4:	b32e      	cbz	r6, 432 <CONFIG_BT_HCI_TX_STACK_SIZE+0x32>
     3e6:	ebbe 0305 	subs.w	r3, lr, r5
     3ea:	eb6c 0c02 	sbc.w	ip, ip, r2
     3ee:	fa23 f201 	lsr.w	r2, r3, r1
     3f2:	fa0c f404 	lsl.w	r4, ip, r4
     3f6:	fa2c f301 	lsr.w	r3, ip, r1
     3fa:	2100      	movs	r1, #0
     3fc:	4314      	orrs	r4, r2
     3fe:	e9c6 4300 	strd	r4, r3, [r6]
     402:	e70c      	b.n	21e <CONFIG_UART_MUX_RX_STACK_SIZE+0x1e>
     404:	4631      	mov	r1, r6
     406:	4630      	mov	r0, r6
     408:	e709      	b.n	21e <CONFIG_UART_MUX_RX_STACK_SIZE+0x1e>
     40a:	1a84      	subs	r4, r0, r2
     40c:	eb65 0303 	sbc.w	r3, r5, r3
     410:	2001      	movs	r0, #1
     412:	469a      	mov	sl, r3
     414:	e756      	b.n	2c4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x44>
     416:	f1ac 0c02 	sub.w	ip, ip, #2
     41a:	443d      	add	r5, r7
     41c:	e724      	b.n	268 <CONFIG_UART_MUX_RX_STACK_SIZE+0x68>
     41e:	3802      	subs	r0, #2
     420:	443c      	add	r4, r7
     422:	e734      	b.n	28e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xe>
     424:	3802      	subs	r0, #2
     426:	443c      	add	r4, r7
     428:	e6ef      	b.n	20a <CONFIG_UART_MUX_RX_STACK_SIZE+0xa>
     42a:	f1ae 0e02 	sub.w	lr, lr, #2
     42e:	443b      	add	r3, r7
     430:	e6d9      	b.n	1e6 <CONFIG_SRAM_SIZE+0x26>
     432:	4631      	mov	r1, r6
     434:	e6f3      	b.n	21e <CONFIG_UART_MUX_RX_STACK_SIZE+0x1e>
     436:	3802      	subs	r0, #2
     438:	449c      	add	ip, r3
     43a:	e7c1      	b.n	3c0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x140>
     43c:	3802      	subs	r0, #2
     43e:	443b      	add	r3, r7
     440:	e768      	b.n	314 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x94>
     442:	f1aa 0a02 	sub.w	sl, sl, #2
     446:	449c      	add	ip, r3
     448:	e7a7      	b.n	39a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x11a>
     44a:	3902      	subs	r1, #2
     44c:	443d      	add	r5, r7
     44e:	e774      	b.n	33a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xba>

00000450 <__aeabi_idiv0>:
     450:	4770      	bx	lr
     452:	bf00      	nop
     454:	0000      	movs	r0, r0
	...

00000458 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
     458:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
     45a:	4d60      	ldr	r5, [pc, #384]	; (5dc <bt_init+0x184>)
     45c:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
     460:	6899      	ldr	r1, [r3, #8]
     462:	f011 0101 	ands.w	r1, r1, #1
     466:	d11e      	bne.n	4a6 <bt_init+0x4e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
     468:	f640 4003 	movw	r0, #3075	; 0xc03
     46c:	aa01      	add	r2, sp, #4
     46e:	f004 fee7 	bl	5240 <bt_hci_cmd_send_sync>
		if (err) {
     472:	4604      	mov	r4, r0
     474:	2800      	cmp	r0, #0
     476:	f040 80ae 	bne.w	5d6 <bt_init+0x17e>
		hci_reset_complete(rsp);
     47a:	9b01      	ldr	r3, [sp, #4]
	u8_t status = buf->data[0];
     47c:	689b      	ldr	r3, [r3, #8]
	if (status) {
     47e:	781b      	ldrb	r3, [r3, #0]
     480:	b973      	cbnz	r3, 4a0 <bt_init+0x48>
	scan_dev_found_cb = NULL;
     482:	4a57      	ldr	r2, [pc, #348]	; (5e0 <bt_init+0x188>)
     484:	6013      	str	r3, [r2, #0]
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
     486:	f105 0398 	add.w	r3, r5, #152	; 0x98
     48a:	4618      	mov	r0, r3
     48c:	f013 fa3e 	bl	1390c <atomic_get>
     490:	f000 0005 	and.w	r0, r0, #5
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     494:	e8d3 2fef 	ldaex	r2, [r3]
     498:	e8c3 0fe1 	stlex	r1, r0, [r3]
     49c:	2900      	cmp	r1, #0
     49e:	d1f9      	bne.n	494 <bt_init+0x3c>
		net_buf_unref(rsp);
     4a0:	9801      	ldr	r0, [sp, #4]
     4a2:	f00d f823 	bl	d4ec <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
     4a6:	2100      	movs	r1, #0
     4a8:	f241 0003 	movw	r0, #4099	; 0x1003
     4ac:	aa01      	add	r2, sp, #4
     4ae:	f004 fec7 	bl	5240 <bt_hci_cmd_send_sync>
	if (err) {
     4b2:	4604      	mov	r4, r0
     4b4:	2800      	cmp	r0, #0
     4b6:	f040 808e 	bne.w	5d6 <bt_init+0x17e>
	read_local_features_complete(rsp);
     4ba:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
     4bc:	2208      	movs	r2, #8
     4be:	6899      	ldr	r1, [r3, #8]
     4c0:	4848      	ldr	r0, [pc, #288]	; (5e4 <bt_init+0x18c>)
     4c2:	3101      	adds	r1, #1
     4c4:	f013 f935 	bl	13732 <memcpy>
	net_buf_unref(rsp);
     4c8:	9801      	ldr	r0, [sp, #4]
     4ca:	f00d f80f 	bl	d4ec <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
     4ce:	4621      	mov	r1, r4
     4d0:	f241 0001 	movw	r0, #4097	; 0x1001
     4d4:	aa01      	add	r2, sp, #4
     4d6:	f004 feb3 	bl	5240 <bt_hci_cmd_send_sync>
	if (err) {
     4da:	4604      	mov	r4, r0
     4dc:	2800      	cmp	r0, #0
     4de:	d17a      	bne.n	5d6 <bt_init+0x17e>
	read_local_ver_complete(rsp);
     4e0:	9801      	ldr	r0, [sp, #4]
     4e2:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
     4e4:	785a      	ldrb	r2, [r3, #1]
     4e6:	f885 2038 	strb.w	r2, [r5, #56]	; 0x38
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
     4ea:	78d9      	ldrb	r1, [r3, #3]
     4ec:	789a      	ldrb	r2, [r3, #2]
     4ee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     4f2:	876a      	strh	r2, [r5, #58]	; 0x3a
	bt_dev.lmp_version = rp->lmp_version;
     4f4:	791a      	ldrb	r2, [r3, #4]
     4f6:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
     4fa:	7a19      	ldrb	r1, [r3, #8]
     4fc:	79da      	ldrb	r2, [r3, #7]
     4fe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     502:	87aa      	strh	r2, [r5, #60]	; 0x3c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
     504:	795a      	ldrb	r2, [r3, #5]
     506:	799b      	ldrb	r3, [r3, #6]
     508:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
     50c:	87eb      	strh	r3, [r5, #62]	; 0x3e
	net_buf_unref(rsp);
     50e:	f00c ffed 	bl	d4ec <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
     512:	4621      	mov	r1, r4
     514:	f241 0002 	movw	r0, #4098	; 0x1002
     518:	aa01      	add	r2, sp, #4
     51a:	f004 fe91 	bl	5240 <bt_hci_cmd_send_sync>
	if (err) {
     51e:	4604      	mov	r4, r0
     520:	2800      	cmp	r0, #0
     522:	d158      	bne.n	5d6 <bt_init+0x17e>
	read_supported_commands_complete(rsp);
     524:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
     526:	2240      	movs	r2, #64	; 0x40
     528:	6899      	ldr	r1, [r3, #8]
     52a:	482f      	ldr	r0, [pc, #188]	; (5e8 <bt_init+0x190>)
     52c:	3101      	adds	r1, #1
     52e:	f013 f900 	bl	13732 <memcpy>
	net_buf_unref(rsp);
     532:	9801      	ldr	r0, [sp, #4]
     534:	f00c ffda 	bl	d4ec <net_buf_unref>
		err = prng_init();
     538:	f006 fb3a 	bl	6bb0 <prng_init>
		if (err) {
     53c:	4604      	mov	r4, r0
     53e:	2800      	cmp	r0, #0
     540:	d149      	bne.n	5d6 <bt_init+0x17e>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
     542:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
     546:	069a      	lsls	r2, r3, #26
     548:	d40e      	bmi.n	568 <bt_init+0x110>
		BT_WARN("Controller to host flow control not supported");
     54a:	2157      	movs	r1, #87	; 0x57
     54c:	4827      	ldr	r0, [pc, #156]	; (5ec <bt_init+0x194>)
     54e:	f011 fddb 	bl	12108 <printk>
	if (!BT_FEAT_LE(bt_dev.features)) {
     552:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
     556:	065b      	lsls	r3, r3, #25
     558:	d44c      	bmi.n	5f4 <CONFIG_BT_COMPANY_ID+0x3>
		BT_ERR("Non-LE capable controller detected!");
     55a:	2145      	movs	r1, #69	; 0x45
     55c:	4824      	ldr	r0, [pc, #144]	; (5f0 <bt_init+0x198>)
     55e:	f011 fdd3 	bl	12108 <printk>
		return -ENODEV;
     562:	f06f 0412 	mvn.w	r4, #18
     566:	e036      	b.n	5d6 <bt_init+0x17e>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
     568:	2107      	movs	r1, #7
     56a:	f640 4033 	movw	r0, #3123	; 0xc33
     56e:	f004 fe1d 	bl	51ac <bt_hci_cmd_create>
	if (!buf) {
     572:	4607      	mov	r7, r0
     574:	b910      	cbnz	r0, 57c <bt_init+0x124>
		return -ENOBUFS;
     576:	f06f 0436 	mvn.w	r4, #54	; 0x36
     57a:	e02c      	b.n	5d6 <bt_init+0x17e>
	hbs = net_buf_add(buf, sizeof(*hbs));
     57c:	2107      	movs	r1, #7
     57e:	3008      	adds	r0, #8
     580:	f00d f926 	bl	d7d0 <net_buf_simple_add>
	(void)memset(hbs, 0, sizeof(*hbs));
     584:	4621      	mov	r1, r4
     586:	2207      	movs	r2, #7
	hbs = net_buf_add(buf, sizeof(*hbs));
     588:	4606      	mov	r6, r0
	(void)memset(hbs, 0, sizeof(*hbs));
     58a:	f013 f8fd 	bl	13788 <memset>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
     58e:	f06f 0304 	mvn.w	r3, #4
     592:	7033      	strb	r3, [r6, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
     594:	2306      	movs	r3, #6
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
     596:	4622      	mov	r2, r4
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
     598:	7074      	strb	r4, [r6, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
     59a:	7134      	strb	r4, [r6, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
     59c:	4639      	mov	r1, r7
     59e:	f640 4033 	movw	r0, #3123	; 0xc33
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
     5a2:	70f3      	strb	r3, [r6, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
     5a4:	f004 fe4c 	bl	5240 <bt_hci_cmd_send_sync>
	if (err) {
     5a8:	4604      	mov	r4, r0
     5aa:	b9a0      	cbnz	r0, 5d6 <bt_init+0x17e>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
     5ac:	2101      	movs	r1, #1
     5ae:	f640 4031 	movw	r0, #3121	; 0xc31
     5b2:	f004 fdfb 	bl	51ac <bt_hci_cmd_create>
	if (!buf) {
     5b6:	4606      	mov	r6, r0
     5b8:	2800      	cmp	r0, #0
     5ba:	d0dc      	beq.n	576 <bt_init+0x11e>
	net_buf_add_u8(buf, BT_HCI_CTL_TO_HOST_FLOW_ENABLE);
     5bc:	2101      	movs	r1, #1
     5be:	3008      	adds	r0, #8
     5c0:	f015 f920 	bl	15804 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
     5c4:	4622      	mov	r2, r4
     5c6:	4631      	mov	r1, r6
     5c8:	f640 4031 	movw	r0, #3121	; 0xc31
     5cc:	f004 fe38 	bl	5240 <bt_hci_cmd_send_sync>
	if (err) {
     5d0:	4604      	mov	r4, r0
     5d2:	2800      	cmp	r0, #0
     5d4:	d0bd      	beq.n	552 <bt_init+0xfa>
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
     5d6:	4620      	mov	r0, r4
     5d8:	b003      	add	sp, #12
     5da:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5dc:	20000000 	.word	0x20000000
     5e0:	20000cac 	.word	0x20000cac
     5e4:	20000040 	.word	0x20000040
     5e8:	20000048 	.word	0x20000048
     5ec:	00019910 	.word	0x00019910
     5f0:	00019943 	.word	0x00019943
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
     5f4:	2100      	movs	r1, #0
     5f6:	f242 0003 	movw	r0, #8195	; 0x2003
     5fa:	aa01      	add	r2, sp, #4
     5fc:	f004 fe20 	bl	5240 <bt_hci_cmd_send_sync>
	if (err) {
     600:	4604      	mov	r4, r0
     602:	2800      	cmp	r0, #0
     604:	d1e7      	bne.n	5d6 <bt_init+0x17e>
	read_le_features_complete(rsp);
     606:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
     608:	2208      	movs	r2, #8
     60a:	6899      	ldr	r1, [r3, #8]
     60c:	48b8      	ldr	r0, [pc, #736]	; (8f0 <CONFIG_BT_RX_STACK_SIZE+0x58>)
     60e:	3101      	adds	r1, #1
     610:	f013 f88f 	bl	13732 <memcpy>
	net_buf_unref(rsp);
     614:	9801      	ldr	r0, [sp, #4]
     616:	f00c ff69 	bl	d4ec <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
     61a:	4621      	mov	r1, r4
     61c:	f242 0002 	movw	r0, #8194	; 0x2002
     620:	aa01      	add	r2, sp, #4
     622:	f004 fe0d 	bl	5240 <bt_hci_cmd_send_sync>
	if (err) {
     626:	4604      	mov	r4, r0
     628:	2800      	cmp	r0, #0
     62a:	d1d4      	bne.n	5d6 <bt_init+0x17e>
	le_read_buffer_size_complete(rsp);
     62c:	9b01      	ldr	r3, [sp, #4]
     62e:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
     630:	f8b3 2001 	ldrh.w	r2, [r3, #1]
     634:	b291      	uxth	r1, r2
     636:	f8a5 20b0 	strh.w	r2, [r5, #176]	; 0xb0
	if (!bt_dev.le.mtu) {
     63a:	b121      	cbz	r1, 646 <CONFIG_BT_COMPANY_ID+0x55>
	k_sem_init(&bt_dev.le.pkts, rp->le_max_num, rp->le_max_num);
     63c:	78da      	ldrb	r2, [r3, #3]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
     63e:	48ad      	ldr	r0, [pc, #692]	; (8f4 <CONFIG_BT_RX_STACK_SIZE+0x5c>)
     640:	4611      	mov	r1, r2
     642:	f016 f8e5 	bl	16810 <z_impl_k_sem_init>
	net_buf_unref(rsp);
     646:	9801      	ldr	r0, [sp, #4]
     648:	f00c ff50 	bl	d4ec <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
     64c:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
     650:	f016 0620 	ands.w	r6, r6, #32
     654:	f000 80f1 	beq.w	83a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3a>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
     658:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
     65c:	071f      	lsls	r7, r3, #28
     65e:	d511      	bpl.n	684 <CONFIG_BT_COMPANY_ID+0x93>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
     660:	2100      	movs	r1, #0
     662:	f242 001c 	movw	r0, #8220	; 0x201c
     666:	aa01      	add	r2, sp, #4
     668:	f004 fdea 	bl	5240 <bt_hci_cmd_send_sync>
		if (err) {
     66c:	4604      	mov	r4, r0
     66e:	2800      	cmp	r0, #0
     670:	d1b1      	bne.n	5d6 <bt_init+0x17e>
		le_read_supp_states_complete(rsp);
     672:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
     674:	6883      	ldr	r3, [r0, #8]
     676:	f853 2f01 	ldr.w	r2, [r3, #1]!
     67a:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
     67c:	e9c5 232a 	strd	r2, r3, [r5, #168]	; 0xa8
		net_buf_unref(rsp);
     680:	f00c ff34 	bl	d4ec <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
     684:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
     688:	069e      	lsls	r6, r3, #26
     68a:	d523      	bpl.n	6d4 <CONFIG_BT_COMPANY_ID+0xe3>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
     68c:	4668      	mov	r0, sp
     68e:	f10d 0102 	add.w	r1, sp, #2
     692:	f004 fe43 	bl	531c <hci_le_read_max_data_len>
		if (err) {
     696:	4604      	mov	r4, r0
     698:	2800      	cmp	r0, #0
     69a:	d19c      	bne.n	5d6 <bt_init+0x17e>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     69c:	2104      	movs	r1, #4
     69e:	f242 0024 	movw	r0, #8228	; 0x2024
     6a2:	f004 fd83 	bl	51ac <bt_hci_cmd_create>
		if (!buf) {
     6a6:	4606      	mov	r6, r0
     6a8:	2800      	cmp	r0, #0
     6aa:	f43f af64 	beq.w	576 <bt_init+0x11e>
		cp = net_buf_add(buf, sizeof(*cp));
     6ae:	2104      	movs	r1, #4
     6b0:	3008      	adds	r0, #8
     6b2:	f00d f88d 	bl	d7d0 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
     6b6:	f8bd 3000 	ldrh.w	r3, [sp]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     6ba:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
     6bc:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
     6be:	f8bd 3002 	ldrh.w	r3, [sp, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     6c2:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
     6c4:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     6c6:	f242 0024 	movw	r0, #8228	; 0x2024
     6ca:	f004 fdb9 	bl	5240 <bt_hci_cmd_send_sync>
		if (err) {
     6ce:	4604      	mov	r4, r0
     6d0:	2800      	cmp	r0, #0
     6d2:	d180      	bne.n	5d6 <bt_init+0x17e>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
     6d4:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
     6d8:	065c      	lsls	r4, r3, #25
     6da:	d510      	bpl.n	6fe <CONFIG_BT_COMPANY_ID+0x10d>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
     6dc:	2100      	movs	r1, #0
     6de:	f242 002a 	movw	r0, #8234	; 0x202a
     6e2:	aa01      	add	r2, sp, #4
     6e4:	f004 fdac 	bl	5240 <bt_hci_cmd_send_sync>
		if (err) {
     6e8:	4604      	mov	r4, r0
     6ea:	2800      	cmp	r0, #0
     6ec:	f47f af73 	bne.w	5d6 <bt_init+0x17e>
		le_read_resolving_list_size_complete(rsp);
     6f0:	9801      	ldr	r0, [sp, #4]
	bt_dev.le.rl_size = rp->rl_size;
     6f2:	6883      	ldr	r3, [r0, #8]
     6f4:	785b      	ldrb	r3, [r3, #1]
     6f6:	f885 30cc 	strb.w	r3, [r5, #204]	; 0xcc
		net_buf_unref(rsp);
     6fa:	f00c fef7 	bl	d4ec <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
     6fe:	2108      	movs	r1, #8
     700:	f242 0001 	movw	r0, #8193	; 0x2001
     704:	f004 fd52 	bl	51ac <bt_hci_cmd_create>
	if (!buf) {
     708:	4604      	mov	r4, r0
     70a:	2800      	cmp	r0, #0
     70c:	f43f af33 	beq.w	576 <bt_init+0x11e>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
     710:	2108      	movs	r1, #8
     712:	4408      	add	r0, r1
     714:	f00d f85c 	bl	d7d0 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
     718:	f895 10a0 	ldrb.w	r1, [r5, #160]	; 0xa0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
     71c:	f240 2302 	movw	r3, #514	; 0x202
     720:	f011 0f40 	tst.w	r1, #64	; 0x40
     724:	bf08      	it	eq
     726:	2303      	moveq	r3, #3
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
     728:	4602      	mov	r2, r0
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
     72a:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
     72c:	bf4c      	ite	mi
     72e:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
     732:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
     736:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
     73a:	068f      	lsls	r7, r1, #26
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
     73c:	bf48      	it	mi
     73e:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
     742:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     746:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
     74a:	bf18      	it	ne
     74c:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     750:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     754:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
     756:	bf48      	it	mi
     758:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     75c:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
     75e:	bf08      	it	eq
     760:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
     764:	2100      	movs	r1, #0
     766:	f013 f909 	bl	1397c <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
     76a:	4621      	mov	r1, r4
     76c:	2200      	movs	r2, #0
     76e:	f242 0001 	movw	r0, #8193	; 0x2001
     772:	f004 fd65 	bl	5240 <bt_hci_cmd_send_sync>
	if (err) {
     776:	4604      	mov	r4, r0
     778:	2800      	cmp	r0, #0
     77a:	f47f af2c 	bne.w	5d6 <bt_init+0x17e>
	if (BT_FEAT_BREDR(bt_dev.features)) {
     77e:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
     782:	0698      	lsls	r0, r3, #26
     784:	d41e      	bmi.n	7c4 <CONFIG_BT_COMPANY_ID+0x1d3>
	if (bt_dev.le.mtu) {
     786:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
     78a:	b9d9      	cbnz	r1, 7c4 <CONFIG_BT_COMPANY_ID+0x1d3>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
     78c:	f241 0005 	movw	r0, #4101	; 0x1005
     790:	aa01      	add	r2, sp, #4
     792:	f004 fd55 	bl	5240 <bt_hci_cmd_send_sync>
	if (err) {
     796:	4604      	mov	r4, r0
     798:	2800      	cmp	r0, #0
     79a:	f47f af1c 	bne.w	5d6 <bt_init+0x17e>
	if (bt_dev.le.mtu) {
     79e:	f8b5 30b0 	ldrh.w	r3, [r5, #176]	; 0xb0
     7a2:	b963      	cbnz	r3, 7be <CONFIG_BT_COMPANY_ID+0x1cd>
	read_buffer_size_complete(rsp);
     7a4:	9b01      	ldr	r3, [sp, #4]
     7a6:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
     7a8:	785a      	ldrb	r2, [r3, #1]
     7aa:	7899      	ldrb	r1, [r3, #2]
     7ac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     7b0:	f8a5 20b0 	strh.w	r2, [r5, #176]	; 0xb0
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
     7b4:	889a      	ldrh	r2, [r3, #4]
     7b6:	484f      	ldr	r0, [pc, #316]	; (8f4 <CONFIG_BT_RX_STACK_SIZE+0x5c>)
     7b8:	4611      	mov	r1, r2
     7ba:	f016 f829 	bl	16810 <z_impl_k_sem_init>
	net_buf_unref(rsp);
     7be:	9801      	ldr	r0, [sp, #4]
     7c0:	f00c fe94 	bl	d4ec <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
     7c4:	2108      	movs	r1, #8
     7c6:	f640 4001 	movw	r0, #3073	; 0xc01
     7ca:	f004 fcef 	bl	51ac <bt_hci_cmd_create>
	if (!buf) {
     7ce:	4604      	mov	r4, r0
     7d0:	2800      	cmp	r0, #0
     7d2:	f43f aed0 	beq.w	576 <bt_init+0x11e>
	ev = net_buf_add(buf, sizeof(*ev));
     7d6:	2108      	movs	r1, #8
     7d8:	4408      	add	r0, r1
     7da:	f00c fff9 	bl	d7d0 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     7de:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
	ev = net_buf_add(buf, sizeof(*ev));
     7e2:	4602      	mov	r2, r0
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     7e4:	07d9      	lsls	r1, r3, #31
     7e6:	d543      	bpl.n	870 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x70>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
     7e8:	a13f      	add	r1, pc, #252	; (adr r1, 8e8 <CONFIG_BT_RX_STACK_SIZE+0x50>)
     7ea:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
     7ee:	f013 f8c5 	bl	1397c <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
     7f2:	4621      	mov	r1, r4
     7f4:	2200      	movs	r2, #0
     7f6:	f640 4001 	movw	r0, #3073	; 0xc01
     7fa:	f004 fd21 	bl	5240 <bt_hci_cmd_send_sync>
	if (err) {
     7fe:	4604      	mov	r4, r0
     800:	2800      	cmp	r0, #0
     802:	f47f aee8 	bne.w	5d6 <bt_init+0x17e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
     806:	4601      	mov	r1, r0
     808:	aa01      	add	r2, sp, #4
     80a:	f64f 4001 	movw	r0, #64513	; 0xfc01
     80e:	f004 fd17 	bl	5240 <bt_hci_cmd_send_sync>
	if (err) {
     812:	4604      	mov	r4, r0
     814:	b380      	cbz	r0, 878 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x78>
		BT_WARN("Vendor HCI extensions not available");
     816:	2157      	movs	r1, #87	; 0x57
     818:	4837      	ldr	r0, [pc, #220]	; (8f8 <CONFIG_BT_RX_STACK_SIZE+0x60>)
			BT_WARN("Failed to read supported vendor features");
     81a:	f011 fc75 	bl	12108 <printk>
		err = bt_conn_init();
     81e:	f007 f935 	bl	7a8c <bt_conn_init>
		if (err) {
     822:	4604      	mov	r4, r0
     824:	2800      	cmp	r0, #0
     826:	f47f aed6 	bne.w	5d6 <bt_init+0x17e>
		if (!bt_dev.id_count) {
     82a:	79eb      	ldrb	r3, [r5, #7]
     82c:	2b00      	cmp	r3, #0
     82e:	d154      	bne.n	8da <CONFIG_BT_RX_STACK_SIZE+0x42>
			BT_INFO("No ID address. App must call settings_load()");
     830:	2149      	movs	r1, #73	; 0x49
     832:	4832      	ldr	r0, [pc, #200]	; (8fc <CONFIG_BT_RX_STACK_SIZE+0x64>)
     834:	f011 fc68 	bl	12108 <printk>
			return 0;
     838:	e6cd      	b.n	5d6 <bt_init+0x17e>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
     83a:	2102      	movs	r1, #2
     83c:	f640 406d 	movw	r0, #3181	; 0xc6d
     840:	f004 fcb4 	bl	51ac <bt_hci_cmd_create>
		if (!buf) {
     844:	4604      	mov	r4, r0
     846:	2800      	cmp	r0, #0
     848:	f43f ae95 	beq.w	576 <bt_init+0x11e>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
     84c:	2102      	movs	r1, #2
     84e:	3008      	adds	r0, #8
     850:	f00c ffbe 	bl	d7d0 <net_buf_simple_add>
		cp_le->le = 0x01;
     854:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
     856:	4621      	mov	r1, r4
		cp_le->le = 0x01;
     858:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
     85a:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
     85c:	4632      	mov	r2, r6
     85e:	f640 406d 	movw	r0, #3181	; 0xc6d
     862:	f004 fced 	bl	5240 <bt_hci_cmd_send_sync>
		if (err) {
     866:	4604      	mov	r4, r0
     868:	2800      	cmp	r0, #0
     86a:	f43f aef5 	beq.w	658 <CONFIG_BT_COMPANY_ID+0x67>
     86e:	e6b2      	b.n	5d6 <bt_init+0x17e>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
     870:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
     874:	4822      	ldr	r0, [pc, #136]	; (900 <CONFIG_BT_RX_STACK_SIZE+0x68>)
     876:	e7ba      	b.n	7ee <CONFIG_BT_COMPANY_ID+0x1fd>
	net_buf_unref(rsp);
     878:	9801      	ldr	r0, [sp, #4]
     87a:	f00c fe37 	bl	d4ec <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
     87e:	4621      	mov	r1, r4
     880:	f64f 4002 	movw	r0, #64514	; 0xfc02
     884:	aa01      	add	r2, sp, #4
     886:	f004 fcdb 	bl	5240 <bt_hci_cmd_send_sync>
	if (err) {
     88a:	4604      	mov	r4, r0
     88c:	b110      	cbz	r0, 894 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x94>
		BT_WARN("Failed to read supported vendor commands");
     88e:	2157      	movs	r1, #87	; 0x57
     890:	481c      	ldr	r0, [pc, #112]	; (904 <CONFIG_BT_RX_STACK_SIZE+0x6c>)
     892:	e7c2      	b.n	81a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1a>
	rp.cmds = (void *)rsp->data;
     894:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
     896:	2202      	movs	r2, #2
     898:	6899      	ldr	r1, [r3, #8]
     89a:	481b      	ldr	r0, [pc, #108]	; (908 <CONFIG_BT_RX_STACK_SIZE+0x70>)
     89c:	3101      	adds	r1, #1
     89e:	f012 ff48 	bl	13732 <memcpy>
	net_buf_unref(rsp);
     8a2:	9801      	ldr	r0, [sp, #4]
     8a4:	f00c fe22 	bl	d4ec <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
     8a8:	f895 3089 	ldrb.w	r3, [r5, #137]	; 0x89
     8ac:	075b      	lsls	r3, r3, #29
     8ae:	d5b6      	bpl.n	81e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
     8b0:	4621      	mov	r1, r4
     8b2:	f64f 4003 	movw	r0, #64515	; 0xfc03
     8b6:	aa01      	add	r2, sp, #4
     8b8:	f004 fcc2 	bl	5240 <bt_hci_cmd_send_sync>
		if (err) {
     8bc:	b110      	cbz	r0, 8c4 <CONFIG_BT_RX_STACK_SIZE+0x2c>
			BT_WARN("Failed to read supported vendor features");
     8be:	2157      	movs	r1, #87	; 0x57
     8c0:	4812      	ldr	r0, [pc, #72]	; (90c <CONFIG_BT_RX_STACK_SIZE+0x74>)
     8c2:	e7aa      	b.n	81a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1a>
		memcpy(bt_dev.vs_features, rp.feat->features,
     8c4:	2201      	movs	r2, #1
		rp.feat = (void *)rsp->data;
     8c6:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
     8c8:	4811      	ldr	r0, [pc, #68]	; (910 <CONFIG_BT_RX_STACK_SIZE+0x78>)
     8ca:	6899      	ldr	r1, [r3, #8]
     8cc:	4411      	add	r1, r2
     8ce:	f012 ff30 	bl	13732 <memcpy>
		net_buf_unref(rsp);
     8d2:	9801      	ldr	r0, [sp, #4]
     8d4:	f00c fe0a 	bl	d4ec <net_buf_unref>
     8d8:	e7a1      	b.n	81e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1e>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
     8da:	2104      	movs	r1, #4
     8dc:	480d      	ldr	r0, [pc, #52]	; (914 <CONFIG_BT_RX_STACK_SIZE+0x7c>)
     8de:	f013 f81b 	bl	13918 <atomic_or>
	bt_finalize_init();
     8e2:	f005 fde3 	bl	64ac <bt_finalize_init>
	return 0;
     8e6:	e676      	b.n	5d6 <bt_init+0x17e>
     8e8:	02008890 	.word	0x02008890
     8ec:	20008000 	.word	0x20008000
     8f0:	200000a0 	.word	0x200000a0
     8f4:	200000b4 	.word	0x200000b4
     8f8:	0001996c 	.word	0x0001996c
     8fc:	000199f1 	.word	0x000199f1
     900:	02008810 	.word	0x02008810
     904:	00019995 	.word	0x00019995
     908:	20000089 	.word	0x20000089
     90c:	000199c3 	.word	0x000199c3
     910:	20000088 	.word	0x20000088
     914:	20000098 	.word	0x20000098

00000918 <discovery_error>:

static void discovery_error(struct bt_conn *conn,
			    int err,
			    void *context)
{
	printk("Error while discovering GATT database: (%d)\n", err);
     918:	4801      	ldr	r0, [pc, #4]	; (920 <discovery_error+0x8>)
     91a:	f011 bbf5 	b.w	12108 <printk>
     91e:	bf00      	nop
     920:	000176a8 	.word	0x000176a8

00000924 <discovery_service_not_found>:
	printk("Service not found\n");
     924:	4801      	ldr	r0, [pc, #4]	; (92c <discovery_service_not_found+0x8>)
     926:	f011 bbef 	b.w	12108 <printk>
     92a:	bf00      	nop
     92c:	000176d5 	.word	0x000176d5

00000930 <scan_connecting_error>:
		addr, connectable);
}

static void scan_connecting_error(struct bt_scan_device_info *device_info)
{
	printk("Connecting failed\n");
     930:	4801      	ldr	r0, [pc, #4]	; (938 <scan_connecting_error+0x8>)
     932:	f011 bbe9 	b.w	12108 <printk>
     936:	bf00      	nop
     938:	000176e8 	.word	0x000176e8

0000093c <discovery_complete>:
{
     93c:	b538      	push	{r3, r4, r5, lr}
     93e:	4604      	mov	r4, r0
     940:	460d      	mov	r5, r1
	printk("Service discovery completed\n");
     942:	4810      	ldr	r0, [pc, #64]	; (984 <discovery_complete+0x48>)
     944:	f011 fbe0 	bl	12108 <printk>
	bt_gatt_nus_c_handles_assign(dm, nus_c);
     948:	4629      	mov	r1, r5
     94a:	4620      	mov	r0, r4
     94c:	f002 fe7a 	bl	3644 <bt_gatt_nus_c_handles_assign>
	bt_gatt_nus_c_tx_notif_enable(nus_c);
     950:	4628      	mov	r0, r5
     952:	f002 ff37 	bl	37c4 <bt_gatt_nus_c_tx_notif_enable>
	bt_gatt_dm_data_release(dm);
     956:	4620      	mov	r0, r4
     958:	f012 f9aa 	bl	12cb0 <bt_gatt_dm_data_release>
	exchange_params.func = exchange_func;
     95c:	490a      	ldr	r1, [pc, #40]	; (988 <discovery_complete+0x4c>)
     95e:	4b0b      	ldr	r3, [pc, #44]	; (98c <discovery_complete+0x50>)
     960:	600b      	str	r3, [r1, #0]
	err = bt_gatt_exchange_mtu(default_conn, &exchange_params);
     962:	4b0b      	ldr	r3, [pc, #44]	; (990 <discovery_complete+0x54>)
     964:	6818      	ldr	r0, [r3, #0]
     966:	f00a f831 	bl	a9cc <bt_gatt_exchange_mtu>
    if (err) {
     96a:	4601      	mov	r1, r0
     96c:	b120      	cbz	r0, 978 <discovery_complete+0x3c>
}
     96e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        printk("MTU exchange failed (err %d)\n", err);
     972:	4808      	ldr	r0, [pc, #32]	; (994 <discovery_complete+0x58>)
     974:	f011 bbc8 	b.w	12108 <printk>
        printk("MTU exchange pending\n");
     978:	4807      	ldr	r0, [pc, #28]	; (998 <discovery_complete+0x5c>)
}
     97a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        printk("MTU exchange pending\n");
     97e:	f011 bbc3 	b.w	12108 <printk>
     982:	bf00      	nop
     984:	000176fb 	.word	0x000176fb
     988:	20000804 	.word	0x20000804
     98c:	0000099d 	.word	0x0000099d
     990:	20000800 	.word	0x20000800
     994:	00017718 	.word	0x00017718
     998:	00017736 	.word	0x00017736

0000099c <exchange_func>:
{
     99c:	b530      	push	{r4, r5, lr}
     99e:	460d      	mov	r5, r1
     9a0:	4604      	mov	r4, r0
     9a2:	b089      	sub	sp, #36	; 0x24
	struct bt_conn_info info = {0};
     9a4:	221c      	movs	r2, #28
     9a6:	2100      	movs	r1, #0
     9a8:	a801      	add	r0, sp, #4
     9aa:	f012 feed 	bl	13788 <memset>
	printk("MTU exchange %s\n", att_err == 0 ? "successful" : "failed");
     9ae:	4b0b      	ldr	r3, [pc, #44]	; (9dc <exchange_func+0x40>)
     9b0:	490b      	ldr	r1, [pc, #44]	; (9e0 <exchange_func+0x44>)
     9b2:	480c      	ldr	r0, [pc, #48]	; (9e4 <exchange_func+0x48>)
     9b4:	2d00      	cmp	r5, #0
     9b6:	bf18      	it	ne
     9b8:	4619      	movne	r1, r3
     9ba:	f011 fba5 	bl	12108 <printk>
	err = bt_conn_get_info(conn, &info);
     9be:	a901      	add	r1, sp, #4
     9c0:	4620      	mov	r0, r4
     9c2:	f006 fda3 	bl	750c <bt_conn_get_info>
	if (err) {
     9c6:	4601      	mov	r1, r0
     9c8:	b120      	cbz	r0, 9d4 <exchange_func+0x38>
		printk("Failed to get connection info %d\n", err);
     9ca:	4807      	ldr	r0, [pc, #28]	; (9e8 <exchange_func+0x4c>)
     9cc:	f011 fb9c 	bl	12108 <printk>
}
     9d0:	b009      	add	sp, #36	; 0x24
     9d2:	bd30      	pop	{r4, r5, pc}
	printk("Got connection info\n");
     9d4:	4805      	ldr	r0, [pc, #20]	; (9ec <exchange_func+0x50>)
     9d6:	f011 fb97 	bl	12108 <printk>
     9da:	e7f9      	b.n	9d0 <exchange_func+0x34>
     9dc:	00017757 	.word	0x00017757
     9e0:	0001774c 	.word	0x0001774c
     9e4:	0001775e 	.word	0x0001775e
     9e8:	0001776f 	.word	0x0001776f
     9ec:	00017791 	.word	0x00017791

000009f0 <nus_client_init>:
	printk("UART initialized\n");
	return 0;
}

static int nus_client_init(void)
{
     9f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int err;
	struct bt_gatt_nus_c_init_param nus_c_init_obj = {
     9f2:	2300      	movs	r3, #0
     9f4:	9303      	str	r3, [sp, #12]
     9f6:	4b0a      	ldr	r3, [pc, #40]	; (a20 <nus_client_init+0x30>)
			.data_received = ble_data_received,
			.data_sent = ble_data_sent,
		}
	};

	err = bt_gatt_nus_c_init(&gatt_nus_c, &nus_c_init_obj);
     9f8:	480a      	ldr	r0, [pc, #40]	; (a24 <nus_client_init+0x34>)
	struct bt_gatt_nus_c_init_param nus_c_init_obj = {
     9fa:	9301      	str	r3, [sp, #4]
     9fc:	4b0a      	ldr	r3, [pc, #40]	; (a28 <nus_client_init+0x38>)
	err = bt_gatt_nus_c_init(&gatt_nus_c, &nus_c_init_obj);
     9fe:	a901      	add	r1, sp, #4
	struct bt_gatt_nus_c_init_param nus_c_init_obj = {
     a00:	9302      	str	r3, [sp, #8]
	err = bt_gatt_nus_c_init(&gatt_nus_c, &nus_c_init_obj);
     a02:	f012 f9a3 	bl	12d4c <bt_gatt_nus_c_init>
	if (err) {
     a06:	4604      	mov	r4, r0
     a08:	b130      	cbz	r0, a18 <nus_client_init+0x28>
		printk("NUS Client initialization failed (err %d)\n", err);
     a0a:	4601      	mov	r1, r0
     a0c:	4807      	ldr	r0, [pc, #28]	; (a2c <nus_client_init+0x3c>)
     a0e:	f011 fb7b 	bl	12108 <printk>
		return err;
	}

	printk("NUS Client module initialized\n");
	return err;
}
     a12:	4620      	mov	r0, r4
     a14:	b004      	add	sp, #16
     a16:	bd10      	pop	{r4, pc}
	printk("NUS Client module initialized\n");
     a18:	4805      	ldr	r0, [pc, #20]	; (a30 <nus_client_init+0x40>)
     a1a:	f011 fb75 	bl	12108 <printk>
	return err;
     a1e:	e7f8      	b.n	a12 <nus_client_init+0x22>
     a20:	00000b51 	.word	0x00000b51
     a24:	20000808 	.word	0x20000808
     a28:	00000e89 	.word	0x00000e89
     a2c:	000177a6 	.word	0x000177a6
     a30:	000177d1 	.word	0x000177d1

00000a34 <scan_connecting>:
{
     a34:	b508      	push	{r3, lr}
	default_conn = bt_conn_ref(conn);
     a36:	4608      	mov	r0, r1
     a38:	f013 fa15 	bl	13e66 <bt_conn_ref>
     a3c:	4b01      	ldr	r3, [pc, #4]	; (a44 <scan_connecting+0x10>)
     a3e:	6018      	str	r0, [r3, #0]
}
     a40:	bd08      	pop	{r3, pc}
     a42:	bf00      	nop
     a44:	20000800 	.word	0x20000800

00000a48 <uart_cb>:
{
     a48:	b570      	push	{r4, r5, r6, lr}
     a4a:	4604      	mov	r4, r0
static inline int z_impl_uart_irq_update(struct device *dev)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	if (api->irq_update) {
     a4c:	6883      	ldr	r3, [r0, #8]
     a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
     a50:	b103      	cbz	r3, a54 <uart_cb+0xc>
		return api->irq_update(dev);
     a52:	4798      	blx	r3
	if (api->irq_rx_ready) {
     a54:	68a3      	ldr	r3, [r4, #8]
     a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     a58:	b35b      	cbz	r3, ab2 <uart_cb+0x6a>
		return api->irq_rx_ready(dev);
     a5a:	4620      	mov	r0, r4
     a5c:	4798      	blx	r3
	if (uart_irq_rx_ready(uart)) {
     a5e:	b340      	cbz	r0, ab2 <uart_cb+0x6a>
		if (!rx) {
     a60:	4d36      	ldr	r5, [pc, #216]	; (b3c <uart_cb+0xf4>)
     a62:	682e      	ldr	r6, [r5, #0]
     a64:	b936      	cbnz	r6, a74 <uart_cb+0x2c>
			rx = k_malloc(sizeof(*rx));
     a66:	201c      	movs	r0, #28
     a68:	f00e fc48 	bl	f2fc <k_malloc>
     a6c:	6028      	str	r0, [r5, #0]
			if (rx) {
     a6e:	2800      	cmp	r0, #0
     a70:	d033      	beq.n	ada <uart_cb+0x92>
				rx->len = 0;
     a72:	8306      	strh	r6, [r0, #24]
	if (api->fifo_read) {
     a74:	68a3      	ldr	r3, [r4, #8]
     a76:	699b      	ldr	r3, [r3, #24]
     a78:	b143      	cbz	r3, a8c <uart_cb+0x44>
		data_length = uart_fifo_read(uart, &rx->data[rx->len],
     a7a:	6829      	ldr	r1, [r5, #0]
     a7c:	8b0a      	ldrh	r2, [r1, #24]
     a7e:	1d10      	adds	r0, r2, #4
		return api->fifo_read(dev, rx_data, size);
     a80:	4401      	add	r1, r0
     a82:	f1c2 0214 	rsb	r2, r2, #20
     a86:	4620      	mov	r0, r4
     a88:	4798      	blx	r3
     a8a:	4603      	mov	r3, r0
		rx->len += data_length;
     a8c:	6829      	ldr	r1, [r5, #0]
     a8e:	8b08      	ldrh	r0, [r1, #24]
     a90:	4403      	add	r3, r0
     a92:	b298      	uxth	r0, r3
     a94:	8308      	strh	r0, [r1, #24]
		if (rx->len > 0) {
     a96:	b160      	cbz	r0, ab2 <uart_cb+0x6a>
			if ((rx->len == UART_BUF_SIZE) ||
     a98:	2814      	cmp	r0, #20
     a9a:	d005      	beq.n	aa8 <uart_cb+0x60>
			   (rx->data[rx->len - 1] == '\n') ||
     a9c:	4408      	add	r0, r1
     a9e:	78c3      	ldrb	r3, [r0, #3]
			if ((rx->len == UART_BUF_SIZE) ||
     aa0:	2b0a      	cmp	r3, #10
     aa2:	d001      	beq.n	aa8 <uart_cb+0x60>
			   (rx->data[rx->len - 1] == '\n') ||
     aa4:	2b0d      	cmp	r3, #13
     aa6:	d104      	bne.n	ab2 <uart_cb+0x6a>
				k_fifo_put(&fifo_uart_rx_data, rx);
     aa8:	4825      	ldr	r0, [pc, #148]	; (b40 <uart_cb+0xf8>)
     aaa:	f015 fe6e 	bl	1678a <k_queue_append>
				rx = NULL;
     aae:	2300      	movs	r3, #0
     ab0:	602b      	str	r3, [r5, #0]
	if (api->irq_tx_ready) {
     ab2:	68a3      	ldr	r3, [r4, #8]
     ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     ab6:	2b00      	cmp	r3, #0
     ab8:	d03f      	beq.n	b3a <uart_cb+0xf2>
		return api->irq_tx_ready(dev);
     aba:	4620      	mov	r0, r4
     abc:	4798      	blx	r3
	if (uart_irq_tx_ready(uart)) {
     abe:	2800      	cmp	r0, #0
     ac0:	d03b      	beq.n	b3a <uart_cb+0xf2>
	return z_impl_k_queue_get(queue, timeout);
     ac2:	2200      	movs	r2, #0
     ac4:	2300      	movs	r3, #0
     ac6:	481f      	ldr	r0, [pc, #124]	; (b44 <uart_cb+0xfc>)
     ac8:	f00e fec4 	bl	f854 <z_impl_k_queue_get>
		if (!buf) {
     acc:	4605      	mov	r5, r0
     ace:	bb68      	cbnz	r0, b2c <uart_cb+0xe4>
			uart_irq_tx_disable(uart);
     ad0:	4620      	mov	r0, r4
}
     ad2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			uart_irq_tx_disable(uart);
     ad6:	f011 ba7c 	b.w	11fd2 <uart_irq_tx_disable>
	if (api->irq_rx_disable) {
     ada:	68a3      	ldr	r3, [r4, #8]
     adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     ade:	b10b      	cbz	r3, ae4 <uart_cb+0x9c>
		api->irq_rx_disable(dev);
     ae0:	4620      	mov	r0, r4
     ae2:	4798      	blx	r3
}
     ae4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				rx_disabled = true;
     ae8:	2201      	movs	r2, #1
     aea:	4b17      	ldr	r3, [pc, #92]	; (b48 <uart_cb+0x100>)
				printk("Not able to allocate UART receive buffer\n");
     aec:	4817      	ldr	r0, [pc, #92]	; (b4c <uart_cb+0x104>)
				rx_disabled = true;
     aee:	701a      	strb	r2, [r3, #0]
				printk("Not able to allocate UART receive buffer\n");
     af0:	f011 bb0a 	b.w	12108 <printk>
	if (api->fifo_fill) {
     af4:	695b      	ldr	r3, [r3, #20]
     af6:	b12b      	cbz	r3, b04 <uart_cb+0xbc>
						  &buf->data[written],
     af8:	1d31      	adds	r1, r6, #4
		return api->fifo_fill(dev, tx_data, size);
     afa:	4620      	mov	r0, r4
     afc:	1b92      	subs	r2, r2, r6
     afe:	4429      	add	r1, r5
     b00:	4798      	blx	r3
     b02:	4603      	mov	r3, r0
			written += uart_fifo_fill(uart,
     b04:	4433      	add	r3, r6
     b06:	b29e      	uxth	r6, r3
		while (buf->len > written) {
     b08:	8b2a      	ldrh	r2, [r5, #24]
     b0a:	68a3      	ldr	r3, [r4, #8]
     b0c:	42b2      	cmp	r2, r6
     b0e:	d8f1      	bhi.n	af4 <uart_cb+0xac>
	if (api->irq_tx_complete) {
     b10:	68a3      	ldr	r3, [r4, #8]
     b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
     b14:	b963      	cbnz	r3, b30 <uart_cb+0xe8>
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
     b16:	4b0b      	ldr	r3, [pc, #44]	; (b44 <uart_cb+0xfc>)
		if (k_fifo_is_empty(&fifo_uart_tx_data)) {
     b18:	681b      	ldr	r3, [r3, #0]
     b1a:	b913      	cbnz	r3, b22 <uart_cb+0xda>
			uart_irq_tx_disable(uart);
     b1c:	4620      	mov	r0, r4
     b1e:	f011 fa58 	bl	11fd2 <uart_irq_tx_disable>
		k_free(buf);
     b22:	4628      	mov	r0, r5
}
     b24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_free(buf);
     b28:	f015 be0a 	b.w	16740 <k_free>
		u16_t written = 0;
     b2c:	2600      	movs	r6, #0
     b2e:	e7eb      	b.n	b08 <uart_cb+0xc0>
		return api->irq_tx_complete(dev);
     b30:	4620      	mov	r0, r4
     b32:	4798      	blx	r3
		while (!uart_irq_tx_complete(uart)) {
     b34:	2800      	cmp	r0, #0
     b36:	d0eb      	beq.n	b10 <uart_cb+0xc8>
     b38:	e7ed      	b.n	b16 <uart_cb+0xce>
}
     b3a:	bd70      	pop	{r4, r5, r6, pc}
     b3c:	20000848 	.word	0x20000848
     b40:	200004ac 	.word	0x200004ac
     b44:	200004c8 	.word	0x200004c8
     b48:	20001e86 	.word	0x20001e86
     b4c:	000177f0 	.word	0x000177f0

00000b50 <ble_data_received>:
{
     b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     b54:	4607      	mov	r7, r0
     b56:	460e      	mov	r6, r1
	for (u16_t pos = 0; pos != len;) {
     b58:	2500      	movs	r5, #0
		k_fifo_put(&fifo_uart_tx_data, tx);
     b5a:	f8df 8070 	ldr.w	r8, [pc, #112]	; bcc <ble_data_received+0x7c>
	for (u16_t pos = 0; pos != len;) {
     b5e:	42b5      	cmp	r5, r6
     b60:	d106      	bne.n	b70 <ble_data_received+0x20>
	uart_irq_tx_enable(uart);
     b62:	4b18      	ldr	r3, [pc, #96]	; (bc4 <ble_data_received+0x74>)
     b64:	6818      	ldr	r0, [r3, #0]
	if (api->irq_tx_enable) {
     b66:	6883      	ldr	r3, [r0, #8]
     b68:	69db      	ldr	r3, [r3, #28]
     b6a:	b14b      	cbz	r3, b80 <ble_data_received+0x30>
		api->irq_tx_enable(dev);
     b6c:	4798      	blx	r3
     b6e:	e007      	b.n	b80 <ble_data_received+0x30>
		struct uart_data_t *tx = k_malloc(sizeof(*tx));
     b70:	201c      	movs	r0, #28
     b72:	f00e fbc3 	bl	f2fc <k_malloc>
		if (!tx) {
     b76:	4604      	mov	r4, r0
     b78:	b928      	cbnz	r0, b86 <ble_data_received+0x36>
			printk("Not able to allocate UART send data buffer\n");
     b7a:	4813      	ldr	r0, [pc, #76]	; (bc8 <ble_data_received+0x78>)
     b7c:	f011 fac4 	bl	12108 <printk>
}
     b80:	2001      	movs	r0, #1
     b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((len - pos) > tx_data_size) {
     b86:	1b72      	subs	r2, r6, r5
     b88:	2a13      	cmp	r2, #19
			tx->len = tx_data_size;
     b8a:	bf8c      	ite	hi
     b8c:	2213      	movhi	r2, #19
			tx->len = (len - pos);
     b8e:	b292      	uxthls	r2, r2
     b90:	8302      	strh	r2, [r0, #24]
		memcpy(tx->data, &data[pos], tx->len);
     b92:	1979      	adds	r1, r7, r5
     b94:	3004      	adds	r0, #4
     b96:	f012 fdcc 	bl	13732 <memcpy>
		pos += tx->len;
     b9a:	8b23      	ldrh	r3, [r4, #24]
     b9c:	441d      	add	r5, r3
     b9e:	b2ad      	uxth	r5, r5
		if ((pos == len) && (data[len - 1] == '\r')) {
     ba0:	42ae      	cmp	r6, r5
     ba2:	d109      	bne.n	bb8 <ble_data_received+0x68>
     ba4:	19ba      	adds	r2, r7, r6
     ba6:	f812 2c01 	ldrb.w	r2, [r2, #-1]
     baa:	2a0d      	cmp	r2, #13
     bac:	d104      	bne.n	bb8 <ble_data_received+0x68>
			tx->data[tx->len] = '\n';
     bae:	210a      	movs	r1, #10
     bb0:	18e2      	adds	r2, r4, r3
			tx->len++;
     bb2:	3301      	adds	r3, #1
			tx->data[tx->len] = '\n';
     bb4:	7111      	strb	r1, [r2, #4]
			tx->len++;
     bb6:	8323      	strh	r3, [r4, #24]
		k_fifo_put(&fifo_uart_tx_data, tx);
     bb8:	4621      	mov	r1, r4
     bba:	4640      	mov	r0, r8
     bbc:	f015 fde5 	bl	1678a <k_queue_append>
     bc0:	e7cd      	b.n	b5e <ble_data_received+0xe>
     bc2:	bf00      	nop
     bc4:	2000084c 	.word	0x2000084c
     bc8:	0001781a 	.word	0x0001781a
     bcc:	200004c8 	.word	0x200004c8

00000bd0 <scan_init>:
		scan_connecting_error, scan_connecting);

static int scan_init(void)
{
	int err;
	struct bt_scan_init_param scan_init = {
     bd0:	2300      	movs	r3, #0
{
     bd2:	b570      	push	{r4, r5, r6, lr}
     bd4:	b088      	sub	sp, #32
	struct bt_scan_init_param scan_init = {
     bd6:	e9cd 3300 	strd	r3, r3, [sp]
     bda:	9302      	str	r3, [sp, #8]
     bdc:	2301      	movs	r3, #1
		.connect_if_match = 1,
	};

	bt_scan_init(&scan_init);
     bde:	4668      	mov	r0, sp
	struct bt_scan_init_param scan_init = {
     be0:	f88d 3004 	strb.w	r3, [sp, #4]
	bt_scan_init(&scan_init);
     be4:	f002 fcb6 	bl	3554 <bt_scan_init>
	bt_scan_cb_register(&scan_cb);
     be8:	4815      	ldr	r0, [pc, #84]	; (c40 <scan_init+0x70>)
     bea:	f002 fb19 	bl	3220 <bt_scan_cb_register>

	err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_NUS_SERVICE);
     bee:	aa03      	add	r2, sp, #12
     bf0:	4615      	mov	r5, r2
     bf2:	4b14      	ldr	r3, [pc, #80]	; (c44 <scan_init+0x74>)
     bf4:	f103 0610 	add.w	r6, r3, #16
     bf8:	4614      	mov	r4, r2
     bfa:	6818      	ldr	r0, [r3, #0]
     bfc:	6859      	ldr	r1, [r3, #4]
     bfe:	3308      	adds	r3, #8
     c00:	c403      	stmia	r4!, {r0, r1}
     c02:	42b3      	cmp	r3, r6
     c04:	4622      	mov	r2, r4
     c06:	d1f7      	bne.n	bf8 <scan_init+0x28>
     c08:	781b      	ldrb	r3, [r3, #0]
     c0a:	4629      	mov	r1, r5
     c0c:	7023      	strb	r3, [r4, #0]
     c0e:	2003      	movs	r0, #3
     c10:	f002 fb16 	bl	3240 <bt_scan_filter_add>
	if (err) {
     c14:	4604      	mov	r4, r0
		printk("Scanning filters cannot be set (err %d)\n", err);
     c16:	4601      	mov	r1, r0
	if (err) {
     c18:	b128      	cbz	r0, c26 <scan_init+0x56>
		printk("Scanning filters cannot be set (err %d)\n", err);
     c1a:	480b      	ldr	r0, [pc, #44]	; (c48 <scan_init+0x78>)
		return err;
	}

	err = bt_scan_filter_enable(BT_SCAN_UUID_FILTER, false);
	if (err) {
		printk("Filters cannot be turned on (err %d)\n", err);
     c1c:	f011 fa74 	bl	12108 <printk>
		return err;
	}

	printk("Scan module initialized\n");
	return err;
}
     c20:	4620      	mov	r0, r4
     c22:	b008      	add	sp, #32
     c24:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_scan_filter_enable(BT_SCAN_UUID_FILTER, false);
     c26:	2004      	movs	r0, #4
     c28:	f002 fb6e 	bl	3308 <bt_scan_filter_enable>
	if (err) {
     c2c:	4604      	mov	r4, r0
     c2e:	b110      	cbz	r0, c36 <scan_init+0x66>
		printk("Filters cannot be turned on (err %d)\n", err);
     c30:	4601      	mov	r1, r0
     c32:	4806      	ldr	r0, [pc, #24]	; (c4c <scan_init+0x7c>)
     c34:	e7f2      	b.n	c1c <scan_init+0x4c>
	printk("Scan module initialized\n");
     c36:	4806      	ldr	r0, [pc, #24]	; (c50 <scan_init+0x80>)
     c38:	f011 fa66 	bl	12108 <printk>
	return err;
     c3c:	e7f0      	b.n	c20 <scan_init+0x50>
     c3e:	bf00      	nop
     c40:	20000170 	.word	0x20000170
     c44:	00016e50 	.word	0x00016e50
     c48:	00017846 	.word	0x00017846
     c4c:	0001786f 	.word	0x0001786f
     c50:	00017895 	.word	0x00017895

00000c54 <gatt_discover.part.0>:
static void gatt_discover(struct bt_conn *conn)
     c54:	b5f0      	push	{r4, r5, r6, r7, lr}
     c56:	b087      	sub	sp, #28
			       BT_UUID_NUS_SERVICE,
     c58:	aa01      	add	r2, sp, #4
static void gatt_discover(struct bt_conn *conn)
     c5a:	4605      	mov	r5, r0
     c5c:	4616      	mov	r6, r2
			       BT_UUID_NUS_SERVICE,
     c5e:	4b0d      	ldr	r3, [pc, #52]	; (c94 <gatt_discover.part.0+0x40>)
     c60:	f103 0710 	add.w	r7, r3, #16
     c64:	4614      	mov	r4, r2
     c66:	6818      	ldr	r0, [r3, #0]
     c68:	6859      	ldr	r1, [r3, #4]
     c6a:	3308      	adds	r3, #8
     c6c:	c403      	stmia	r4!, {r0, r1}
     c6e:	42bb      	cmp	r3, r7
     c70:	4622      	mov	r2, r4
     c72:	d1f7      	bne.n	c64 <gatt_discover.part.0+0x10>
     c74:	781b      	ldrb	r3, [r3, #0]
	err = bt_gatt_dm_start(conn,
     c76:	4631      	mov	r1, r6
			       BT_UUID_NUS_SERVICE,
     c78:	7023      	strb	r3, [r4, #0]
	err = bt_gatt_dm_start(conn,
     c7a:	4628      	mov	r0, r5
     c7c:	4b06      	ldr	r3, [pc, #24]	; (c98 <gatt_discover.part.0+0x44>)
     c7e:	4a07      	ldr	r2, [pc, #28]	; (c9c <gatt_discover.part.0+0x48>)
     c80:	f002 f936 	bl	2ef0 <bt_gatt_dm_start>
	if (err) {
     c84:	4601      	mov	r1, r0
     c86:	b110      	cbz	r0, c8e <gatt_discover.part.0+0x3a>
		printk("could not start the discovery procedure, error "
     c88:	4805      	ldr	r0, [pc, #20]	; (ca0 <gatt_discover.part.0+0x4c>)
     c8a:	f011 fa3d 	bl	12108 <printk>
}
     c8e:	b007      	add	sp, #28
     c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c92:	bf00      	nop
     c94:	00016e50 	.word	0x00016e50
     c98:	20000808 	.word	0x20000808
     c9c:	20000164 	.word	0x20000164
     ca0:	000178ae 	.word	0x000178ae

00000ca4 <bt_addr_le_to_str.constprop.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     ca4:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
     ca6:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     ca8:	b08a      	sub	sp, #40	; 0x28
     caa:	4604      	mov	r4, r0
     cac:	460e      	mov	r6, r1
     cae:	ad07      	add	r5, sp, #28
     cb0:	2b03      	cmp	r3, #3
     cb2:	d820      	bhi.n	cf6 <bt_addr_le_to_str.constprop.0+0x52>
     cb4:	e8df f003 	tbb	[pc, r3]
     cb8:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
     cbc:	4911      	ldr	r1, [pc, #68]	; (d04 <bt_addr_le_to_str.constprop.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
     cbe:	4628      	mov	r0, r5
     cc0:	f012 fce8 	bl	13694 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
     cc4:	7863      	ldrb	r3, [r4, #1]
     cc6:	211e      	movs	r1, #30
     cc8:	9304      	str	r3, [sp, #16]
     cca:	78a3      	ldrb	r3, [r4, #2]
     ccc:	4630      	mov	r0, r6
     cce:	9303      	str	r3, [sp, #12]
     cd0:	78e3      	ldrb	r3, [r4, #3]
     cd2:	4a0d      	ldr	r2, [pc, #52]	; (d08 <bt_addr_le_to_str.constprop.0+0x64>)
     cd4:	9302      	str	r3, [sp, #8]
     cd6:	7923      	ldrb	r3, [r4, #4]
     cd8:	9505      	str	r5, [sp, #20]
     cda:	9301      	str	r3, [sp, #4]
     cdc:	7963      	ldrb	r3, [r4, #5]
     cde:	9300      	str	r3, [sp, #0]
     ce0:	79a3      	ldrb	r3, [r4, #6]
     ce2:	f011 fa1e 	bl	12122 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
     ce6:	b00a      	add	sp, #40	; 0x28
     ce8:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
     cea:	4908      	ldr	r1, [pc, #32]	; (d0c <bt_addr_le_to_str.constprop.0+0x68>)
     cec:	e7e7      	b.n	cbe <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "public-id");
     cee:	4908      	ldr	r1, [pc, #32]	; (d10 <bt_addr_le_to_str.constprop.0+0x6c>)
     cf0:	e7e5      	b.n	cbe <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "random-id");
     cf2:	4908      	ldr	r1, [pc, #32]	; (d14 <bt_addr_le_to_str.constprop.0+0x70>)
     cf4:	e7e3      	b.n	cbe <bt_addr_le_to_str.constprop.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
     cf6:	210a      	movs	r1, #10
     cf8:	4628      	mov	r0, r5
     cfa:	4a07      	ldr	r2, [pc, #28]	; (d18 <bt_addr_le_to_str.constprop.0+0x74>)
     cfc:	f011 fa11 	bl	12122 <snprintk>
		break;
     d00:	e7e0      	b.n	cc4 <bt_addr_le_to_str.constprop.0+0x20>
     d02:	bf00      	nop
     d04:	000178e7 	.word	0x000178e7
     d08:	00017910 	.word	0x00017910
     d0c:	000178ee 	.word	0x000178ee
     d10:	000178f5 	.word	0x000178f5
     d14:	000178ff 	.word	0x000178ff
     d18:	00017909 	.word	0x00017909

00000d1c <pairing_confirm>:
	printk("Pairing cancelled: %s\n", addr);
}


static void pairing_confirm(struct bt_conn *conn)
{
     d1c:	b510      	push	{r4, lr}
     d1e:	4604      	mov	r4, r0
     d20:	b088      	sub	sp, #32
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     d22:	f013 f8aa 	bl	13e7a <bt_conn_get_dst>
     d26:	4669      	mov	r1, sp
     d28:	f7ff ffbc 	bl	ca4 <bt_addr_le_to_str.constprop.0>

	bt_conn_auth_pairing_confirm(conn);
     d2c:	4620      	mov	r0, r4
     d2e:	f006 fe67 	bl	7a00 <bt_conn_auth_pairing_confirm>

	printk("Pairing confirmed: %s\n", addr);
     d32:	4669      	mov	r1, sp
     d34:	4802      	ldr	r0, [pc, #8]	; (d40 <pairing_confirm+0x24>)
     d36:	f011 f9e7 	bl	12108 <printk>
}
     d3a:	b008      	add	sp, #32
     d3c:	bd10      	pop	{r4, pc}
     d3e:	bf00      	nop
     d40:	00017933 	.word	0x00017933

00000d44 <connected>:
{
     d44:	b530      	push	{r4, r5, lr}
     d46:	460d      	mov	r5, r1
     d48:	b089      	sub	sp, #36	; 0x24
     d4a:	4604      	mov	r4, r0
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     d4c:	f013 f895 	bl	13e7a <bt_conn_get_dst>
     d50:	4669      	mov	r1, sp
     d52:	f7ff ffa7 	bl	ca4 <bt_addr_le_to_str.constprop.0>
	if (conn_err) {
     d56:	b135      	cbz	r5, d66 <connected+0x22>
		printk("Failed to connect to %s (%d)\n", addr, conn_err);
     d58:	462a      	mov	r2, r5
     d5a:	4669      	mov	r1, sp
     d5c:	4810      	ldr	r0, [pc, #64]	; (da0 <connected+0x5c>)
     d5e:	f011 f9d3 	bl	12108 <printk>
}
     d62:	b009      	add	sp, #36	; 0x24
     d64:	bd30      	pop	{r4, r5, pc}
	printk("Connected: %s\n", addr);
     d66:	4669      	mov	r1, sp
     d68:	480e      	ldr	r0, [pc, #56]	; (da4 <connected+0x60>)
     d6a:	f011 f9cd 	bl	12108 <printk>
	err = bt_conn_set_security(conn, BT_SECURITY_L2);
     d6e:	2102      	movs	r1, #2
     d70:	4620      	mov	r0, r4
     d72:	f013 f827 	bl	13dc4 <bt_conn_set_security>
	if (err) {
     d76:	4601      	mov	r1, r0
     d78:	b148      	cbz	r0, d8e <connected+0x4a>
		printk("Failed to set security: %d\n", err);
     d7a:	480b      	ldr	r0, [pc, #44]	; (da8 <connected+0x64>)
     d7c:	f011 f9c4 	bl	12108 <printk>
	if (conn != default_conn) {
     d80:	4b0a      	ldr	r3, [pc, #40]	; (dac <connected+0x68>)
     d82:	681b      	ldr	r3, [r3, #0]
     d84:	429c      	cmp	r4, r3
     d86:	d102      	bne.n	d8e <connected+0x4a>
     d88:	4620      	mov	r0, r4
     d8a:	f7ff ff63 	bl	c54 <gatt_discover.part.0>
	err = bt_scan_stop();
     d8e:	f011 ffa8 	bl	12ce2 <bt_scan_stop>
	if ((!err) && (err != -EALREADY)) {
     d92:	4601      	mov	r1, r0
     d94:	2800      	cmp	r0, #0
     d96:	d1e4      	bne.n	d62 <connected+0x1e>
		printk("Stop LE scan failed (err %d)\n", err);
     d98:	4805      	ldr	r0, [pc, #20]	; (db0 <connected+0x6c>)
     d9a:	f011 f9b5 	bl	12108 <printk>
     d9e:	e7e0      	b.n	d62 <connected+0x1e>
     da0:	0001794a 	.word	0x0001794a
     da4:	00017968 	.word	0x00017968
     da8:	00017977 	.word	0x00017977
     dac:	20000800 	.word	0x20000800
     db0:	00017993 	.word	0x00017993

00000db4 <disconnected>:
{
     db4:	b530      	push	{r4, r5, lr}
     db6:	460d      	mov	r5, r1
     db8:	4604      	mov	r4, r0
     dba:	b089      	sub	sp, #36	; 0x24
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     dbc:	f013 f85d 	bl	13e7a <bt_conn_get_dst>
     dc0:	4669      	mov	r1, sp
     dc2:	f7ff ff6f 	bl	ca4 <bt_addr_le_to_str.constprop.0>
	printk("Disconnected: %s (reason %u)\n", addr, reason);
     dc6:	462a      	mov	r2, r5
	if (default_conn != conn) {
     dc8:	4d0a      	ldr	r5, [pc, #40]	; (df4 <disconnected+0x40>)
	printk("Disconnected: %s (reason %u)\n", addr, reason);
     dca:	480b      	ldr	r0, [pc, #44]	; (df8 <disconnected+0x44>)
     dcc:	4669      	mov	r1, sp
     dce:	f011 f99b 	bl	12108 <printk>
	if (default_conn != conn) {
     dd2:	6828      	ldr	r0, [r5, #0]
     dd4:	42a0      	cmp	r0, r4
     dd6:	d10b      	bne.n	df0 <disconnected+0x3c>
	bt_conn_unref(default_conn);
     dd8:	f013 f84c 	bl	13e74 <bt_conn_unref>
	default_conn = NULL;
     ddc:	2300      	movs	r3, #0
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
     dde:	2001      	movs	r0, #1
	default_conn = NULL;
     de0:	602b      	str	r3, [r5, #0]
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
     de2:	f002 fbed 	bl	35c0 <bt_scan_start>
	if (err) {
     de6:	4601      	mov	r1, r0
     de8:	b110      	cbz	r0, df0 <disconnected+0x3c>
		printk("Scanning failed to start (err %d)\n", err);
     dea:	4804      	ldr	r0, [pc, #16]	; (dfc <disconnected+0x48>)
     dec:	f011 f98c 	bl	12108 <printk>
}
     df0:	b009      	add	sp, #36	; 0x24
     df2:	bd30      	pop	{r4, r5, pc}
     df4:	20000800 	.word	0x20000800
     df8:	000179b1 	.word	0x000179b1
     dfc:	000179cf 	.word	0x000179cf

00000e00 <auth_cancel>:
{
     e00:	b500      	push	{lr}
     e02:	b089      	sub	sp, #36	; 0x24
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     e04:	f013 f839 	bl	13e7a <bt_conn_get_dst>
     e08:	4669      	mov	r1, sp
     e0a:	f7ff ff4b 	bl	ca4 <bt_addr_le_to_str.constprop.0>
	printk("Pairing cancelled: %s\n", addr);
     e0e:	4669      	mov	r1, sp
     e10:	4802      	ldr	r0, [pc, #8]	; (e1c <auth_cancel+0x1c>)
     e12:	f011 f979 	bl	12108 <printk>
}
     e16:	b009      	add	sp, #36	; 0x24
     e18:	f85d fb04 	ldr.w	pc, [sp], #4
     e1c:	000179f2 	.word	0x000179f2

00000e20 <pairing_complete>:


static void pairing_complete(struct bt_conn *conn, bool bonded)
{
     e20:	b510      	push	{r4, lr}
     e22:	460c      	mov	r4, r1
     e24:	b088      	sub	sp, #32
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     e26:	f013 f828 	bl	13e7a <bt_conn_get_dst>
     e2a:	4669      	mov	r1, sp
     e2c:	f7ff ff3a 	bl	ca4 <bt_addr_le_to_str.constprop.0>

	printk("Pairing completed: %s, bonded: %d\n", addr, bonded);
     e30:	4622      	mov	r2, r4
     e32:	4669      	mov	r1, sp
     e34:	4802      	ldr	r0, [pc, #8]	; (e40 <pairing_complete+0x20>)
     e36:	f011 f967 	bl	12108 <printk>
}
     e3a:	b008      	add	sp, #32
     e3c:	bd10      	pop	{r4, pc}
     e3e:	bf00      	nop
     e40:	00017a09 	.word	0x00017a09

00000e44 <pairing_failed>:


static void pairing_failed(struct bt_conn *conn, enum bt_security_err reason)
{
     e44:	b510      	push	{r4, lr}
     e46:	460c      	mov	r4, r1
     e48:	b088      	sub	sp, #32
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     e4a:	f013 f816 	bl	13e7a <bt_conn_get_dst>
     e4e:	4669      	mov	r1, sp
     e50:	f7ff ff28 	bl	ca4 <bt_addr_le_to_str.constprop.0>

	printk("Pairing failed conn: %s, reason %d\n", addr, reason);
     e54:	4622      	mov	r2, r4
     e56:	4669      	mov	r1, sp
     e58:	4802      	ldr	r0, [pc, #8]	; (e64 <pairing_failed+0x20>)
     e5a:	f011 f955 	bl	12108 <printk>
}
     e5e:	b008      	add	sp, #32
     e60:	bd10      	pop	{r4, pc}
     e62:	bf00      	nop
     e64:	00017a2c 	.word	0x00017a2c

00000e68 <scan_filter_match>:
{
     e68:	b510      	push	{r4, lr}
     e6a:	4614      	mov	r4, r2
     e6c:	b088      	sub	sp, #32
	bt_addr_le_to_str(device_info->addr, addr, sizeof(addr));
     e6e:	4669      	mov	r1, sp
     e70:	6840      	ldr	r0, [r0, #4]
     e72:	f7ff ff17 	bl	ca4 <bt_addr_le_to_str.constprop.0>
	printk("Filters matched. Address: %s connectable: %d\n",
     e76:	4622      	mov	r2, r4
     e78:	4669      	mov	r1, sp
     e7a:	4802      	ldr	r0, [pc, #8]	; (e84 <scan_filter_match+0x1c>)
     e7c:	f011 f944 	bl	12108 <printk>
}
     e80:	b008      	add	sp, #32
     e82:	bd10      	pop	{r4, pc}
     e84:	00017a50 	.word	0x00017a50

00000e88 <ble_data_sent>:
{
     e88:	b510      	push	{r4, lr}
     e8a:	4604      	mov	r4, r0
	k_free(buf);
     e8c:	1f08      	subs	r0, r1, #4
     e8e:	f015 fc57 	bl	16740 <k_free>
	if (rx_disabled) {
     e92:	4b0a      	ldr	r3, [pc, #40]	; (ebc <ble_data_sent+0x34>)
     e94:	781a      	ldrb	r2, [r3, #0]
     e96:	b12a      	cbz	r2, ea4 <ble_data_sent+0x1c>
		rx_disabled = false;
     e98:	2200      	movs	r2, #0
     e9a:	701a      	strb	r2, [r3, #0]
		uart_irq_rx_enable(uart);
     e9c:	4b08      	ldr	r3, [pc, #32]	; (ec0 <ble_data_sent+0x38>)
     e9e:	6818      	ldr	r0, [r3, #0]
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
     ea0:	f011 f892 	bl	11fc8 <z_impl_uart_irq_rx_enable>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
     ea4:	4807      	ldr	r0, [pc, #28]	; (ec4 <ble_data_sent+0x3c>)
     ea6:	f00f feab 	bl	10c00 <z_impl_k_sem_give>
	if (err) {
     eaa:	b12c      	cbz	r4, eb8 <ble_data_sent+0x30>
		printk("ATT error code: 0x%02X\n", err);
     eac:	4621      	mov	r1, r4
}
     eae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("ATT error code: 0x%02X\n", err);
     eb2:	4805      	ldr	r0, [pc, #20]	; (ec8 <ble_data_sent+0x40>)
     eb4:	f011 b928 	b.w	12108 <printk>
}
     eb8:	bd10      	pop	{r4, pc}
     eba:	bf00      	nop
     ebc:	20001e86 	.word	0x20001e86
     ec0:	2000084c 	.word	0x2000084c
     ec4:	20000410 	.word	0x20000410
     ec8:	00017a7e 	.word	0x00017a7e

00000ecc <uart_init>:
{
     ecc:	b510      	push	{r4, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     ece:	480d      	ldr	r0, [pc, #52]	; (f04 <uart_init+0x38>)
     ed0:	f00d fe68 	bl	eba4 <z_impl_device_get_binding>
	uart = device_get_binding(DT_LABEL(DT_NODELABEL(uart0)));
     ed4:	4c0c      	ldr	r4, [pc, #48]	; (f08 <uart_init+0x3c>)
     ed6:	4602      	mov	r2, r0
     ed8:	6020      	str	r0, [r4, #0]
	if (!uart) {
     eda:	b928      	cbnz	r0, ee8 <uart_init+0x1c>
		printk("UART binding failed\n");
     edc:	480b      	ldr	r0, [pc, #44]	; (f0c <uart_init+0x40>)
     ede:	f011 f913 	bl	12108 <printk>
		return -ENXIO;
     ee2:	f06f 0005 	mvn.w	r0, #5
}
     ee6:	bd10      	pop	{r4, pc}
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
     ee8:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
     eea:	b11b      	cbz	r3, ef4 <uart_init+0x28>
     eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
     eee:	b10b      	cbz	r3, ef4 <uart_init+0x28>
		api->irq_callback_set(dev, cb, user_data);
     ef0:	4907      	ldr	r1, [pc, #28]	; (f10 <uart_init+0x44>)
     ef2:	4798      	blx	r3
	uart_irq_rx_enable(uart);
     ef4:	6820      	ldr	r0, [r4, #0]
     ef6:	f011 f867 	bl	11fc8 <z_impl_uart_irq_rx_enable>
	printk("UART initialized\n");
     efa:	4806      	ldr	r0, [pc, #24]	; (f14 <uart_init+0x48>)
     efc:	f011 f904 	bl	12108 <printk>
	return 0;
     f00:	2000      	movs	r0, #0
     f02:	e7f0      	b.n	ee6 <uart_init+0x1a>
     f04:	00017a96 	.word	0x00017a96
     f08:	2000084c 	.word	0x2000084c
     f0c:	00017a9d 	.word	0x00017a9d
     f10:	00000a49 	.word	0x00000a49
     f14:	00017ab2 	.word	0x00017ab2

00000f18 <security_changed>:
{
     f18:	b570      	push	{r4, r5, r6, lr}
     f1a:	4616      	mov	r6, r2
     f1c:	b088      	sub	sp, #32
     f1e:	460d      	mov	r5, r1
     f20:	4604      	mov	r4, r0
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     f22:	f012 ffaa 	bl	13e7a <bt_conn_get_dst>
     f26:	4669      	mov	r1, sp
     f28:	f7ff febc 	bl	ca4 <bt_addr_le_to_str.constprop.0>
	if (!err) {
     f2c:	b96e      	cbnz	r6, f4a <security_changed+0x32>
		printk("Security changed: %s level %u\n", addr, level);
     f2e:	462a      	mov	r2, r5
     f30:	4669      	mov	r1, sp
     f32:	4809      	ldr	r0, [pc, #36]	; (f58 <security_changed+0x40>)
     f34:	f011 f8e8 	bl	12108 <printk>
	if (conn != default_conn) {
     f38:	4b08      	ldr	r3, [pc, #32]	; (f5c <security_changed+0x44>)
     f3a:	681b      	ldr	r3, [r3, #0]
     f3c:	429c      	cmp	r4, r3
     f3e:	d102      	bne.n	f46 <security_changed+0x2e>
     f40:	4620      	mov	r0, r4
     f42:	f7ff fe87 	bl	c54 <gatt_discover.part.0>
}
     f46:	b008      	add	sp, #32
     f48:	bd70      	pop	{r4, r5, r6, pc}
		printk("Security failed: %s level %u err %d\n", addr, level,
     f4a:	4633      	mov	r3, r6
     f4c:	462a      	mov	r2, r5
     f4e:	4669      	mov	r1, sp
     f50:	4803      	ldr	r0, [pc, #12]	; (f60 <security_changed+0x48>)
     f52:	f011 f8d9 	bl	12108 <printk>
     f56:	e7ef      	b.n	f38 <security_changed+0x20>
     f58:	00017ac4 	.word	0x00017ac4
     f5c:	20000800 	.word	0x20000800
     f60:	00017ae3 	.word	0x00017ae3

00000f64 <main>:
	.pairing_complete = pairing_complete,
	.pairing_failed = pairing_failed
};

void main(void)
{
     f64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int err;

	printk("Starting Bluetooth Central UART example\n");
     f66:	482c      	ldr	r0, [pc, #176]	; (1018 <main+0xb4>)
     f68:	f011 f8ce 	bl	12108 <printk>

	err = bt_conn_auth_cb_register(&conn_auth_callbacks);
     f6c:	482b      	ldr	r0, [pc, #172]	; (101c <main+0xb8>)
     f6e:	f006 fd2b 	bl	79c8 <bt_conn_auth_cb_register>
	if (err) {
     f72:	b128      	cbz	r0, f80 <main+0x1c>
		printk("Failed to register authorization callbacks.\n");
     f74:	482a      	ldr	r0, [pc, #168]	; (1020 <main+0xbc>)
		err = k_sem_take(&nus_write_sem, NUS_WRITE_TIMEOUT);
		if (err) {
			printk("NUS send timeout\n");
		}
	}
}
     f76:	b004      	add	sp, #16
     f78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("Failed to register authorization callbacks.\n");
     f7c:	f011 b8c4 	b.w	12108 <printk>
	err = bt_enable(NULL);
     f80:	f005 faac 	bl	64dc <bt_enable>
	if (err) {
     f84:	4604      	mov	r4, r0
     f86:	b130      	cbz	r0, f96 <main+0x32>
		printk("Bluetooth init failed (err %d)\n", err);
     f88:	4601      	mov	r1, r0
     f8a:	4826      	ldr	r0, [pc, #152]	; (1024 <main+0xc0>)
}
     f8c:	b004      	add	sp, #16
     f8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("Scanning failed to start (err %d)\n", err);
     f92:	f011 b8b9 	b.w	12108 <printk>
	printk("Bluetooth initialized\n");
     f96:	4824      	ldr	r0, [pc, #144]	; (1028 <main+0xc4>)
     f98:	f011 f8b6 	bl	12108 <printk>
		settings_load();
     f9c:	f011 fc80 	bl	128a0 <settings_load>
	bt_conn_cb_register(&conn_callbacks);
     fa0:	4822      	ldr	r0, [pc, #136]	; (102c <main+0xc8>)
     fa2:	f006 f80b 	bl	6fbc <bt_conn_cb_register>
	int (*module_init[])(void) = {uart_init, scan_init, nus_client_init};
     fa6:	ab01      	add	r3, sp, #4
     fa8:	461d      	mov	r5, r3
     faa:	4a21      	ldr	r2, [pc, #132]	; (1030 <main+0xcc>)
     fac:	ca07      	ldmia	r2, {r0, r1, r2}
     fae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		err = (*module_init[i])();
     fb2:	f855 3b04 	ldr.w	r3, [r5], #4
     fb6:	4798      	blx	r3
		if (err) {
     fb8:	bb60      	cbnz	r0, 1014 <main+0xb0>
	for (size_t i = 0; i < ARRAY_SIZE(module_init); i++) {
     fba:	3401      	adds	r4, #1
     fbc:	2c03      	cmp	r4, #3
     fbe:	d1f8      	bne.n	fb2 <main+0x4e>
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
     fc0:	2001      	movs	r0, #1
     fc2:	f002 fafd 	bl	35c0 <bt_scan_start>
	if (err) {
     fc6:	4601      	mov	r1, r0
     fc8:	b108      	cbz	r0, fce <main+0x6a>
		printk("Scanning failed to start (err %d)\n", err);
     fca:	481a      	ldr	r0, [pc, #104]	; (1034 <main+0xd0>)
     fcc:	e7de      	b.n	f8c <main+0x28>
	printk("Scanning successfully started\n");
     fce:	481a      	ldr	r0, [pc, #104]	; (1038 <main+0xd4>)
     fd0:	f011 f89a 	bl	12108 <printk>
	return z_impl_k_queue_get(queue, timeout);
     fd4:	4c19      	ldr	r4, [pc, #100]	; (103c <main+0xd8>)
		err = bt_gatt_nus_c_send(&gatt_nus_c, buf->data, buf->len);
     fd6:	4d1a      	ldr	r5, [pc, #104]	; (1040 <main+0xdc>)
			printk("Failed to send data over BLE connection"
     fd8:	4e1a      	ldr	r6, [pc, #104]	; (1044 <main+0xe0>)
     fda:	f04f 32ff 	mov.w	r2, #4294967295
     fde:	f04f 33ff 	mov.w	r3, #4294967295
     fe2:	4620      	mov	r0, r4
     fe4:	f00e fc36 	bl	f854 <z_impl_k_queue_get>
		err = bt_gatt_nus_c_send(&gatt_nus_c, buf->data, buf->len);
     fe8:	1d01      	adds	r1, r0, #4
     fea:	8b02      	ldrh	r2, [r0, #24]
     fec:	4628      	mov	r0, r5
     fee:	f002 fafb 	bl	35e8 <bt_gatt_nus_c_send>
		if (err) {
     ff2:	4601      	mov	r1, r0
     ff4:	b110      	cbz	r0, ffc <main+0x98>
			printk("Failed to send data over BLE connection"
     ff6:	4630      	mov	r0, r6
     ff8:	f011 f886 	bl	12108 <printk>
	return z_impl_k_sem_take(sem, timeout);
     ffc:	f241 3234 	movw	r2, #4916	; 0x1334
    1000:	2300      	movs	r3, #0
    1002:	4811      	ldr	r0, [pc, #68]	; (1048 <main+0xe4>)
    1004:	f00f fe40 	bl	10c88 <z_impl_k_sem_take>
		if (err) {
    1008:	2800      	cmp	r0, #0
    100a:	d0e6      	beq.n	fda <main+0x76>
			printk("NUS send timeout\n");
    100c:	480f      	ldr	r0, [pc, #60]	; (104c <main+0xe8>)
    100e:	f011 f87b 	bl	12108 <printk>
	for (;;) {
    1012:	e7e2      	b.n	fda <main+0x76>
}
    1014:	b004      	add	sp, #16
    1016:	bd70      	pop	{r4, r5, r6, pc}
    1018:	00017b08 	.word	0x00017b08
    101c:	20000128 	.word	0x20000128
    1020:	00017b31 	.word	0x00017b31
    1024:	00017b5e 	.word	0x00017b5e
    1028:	00017b7e 	.word	0x00017b7e
    102c:	20000148 	.word	0x20000148
    1030:	00016e64 	.word	0x00016e64
    1034:	000179cf 	.word	0x000179cf
    1038:	00017b95 	.word	0x00017b95
    103c:	200004ac 	.word	0x200004ac
    1040:	20000808 	.word	0x20000808
    1044:	00017bb4 	.word	0x00017bb4
    1048:	20000410 	.word	0x20000410
    104c:	00017be5 	.word	0x00017be5

00001050 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

u8_t crc8_ccitt(u8_t val, const void *buf, size_t cnt)
{
    1050:	b530      	push	{r4, r5, lr}
	size_t i;
	const u8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    1052:	4c0a      	ldr	r4, [pc, #40]	; (107c <crc8_ccitt+0x2c>)
    1054:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
    1056:	4291      	cmp	r1, r2
    1058:	d100      	bne.n	105c <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
    105a:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
    105c:	f811 3b01 	ldrb.w	r3, [r1], #1
    1060:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    1062:	0903      	lsrs	r3, r0, #4
    1064:	5ce3      	ldrb	r3, [r4, r3]
    1066:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
    106a:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    106c:	f3c3 1303 	ubfx	r3, r3, #4, #4
    1070:	5ce0      	ldrb	r0, [r4, r3]
    1072:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
    1076:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
    1078:	e7ed      	b.n	1056 <crc8_ccitt+0x6>
    107a:	bf00      	nop
    107c:	00017bf7 	.word	0x00017bf7

00001080 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    1080:	680b      	ldr	r3, [r1, #0]
    1082:	3301      	adds	r3, #1
    1084:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    1086:	4b01      	ldr	r3, [pc, #4]	; (108c <char_out+0xc>)
    1088:	681b      	ldr	r3, [r3, #0]
    108a:	4718      	bx	r3
    108c:	20000178 	.word	0x20000178

00001090 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    1090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1094:	b085      	sub	sp, #20
    1096:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    1098:	469b      	mov	fp, r3
    109a:	2c01      	cmp	r4, #1
    109c:	bfb8      	it	lt
    109e:	2401      	movlt	r4, #1
    10a0:	2b01      	cmp	r3, #1
    10a2:	bf0c      	ite	eq
    10a4:	2330      	moveq	r3, #48	; 0x30
    10a6:	2320      	movne	r3, #32
    10a8:	4615      	mov	r5, r2
    10aa:	4606      	mov	r6, r0
    10ac:	468a      	mov	sl, r1
    10ae:	2701      	movs	r7, #1
    10b0:	f04f 080a 	mov.w	r8, #10
    10b4:	2200      	movs	r2, #0
    10b6:	f8df 9070 	ldr.w	r9, [pc, #112]	; 1128 <_printk_dec_ulong+0x98>
    10ba:	9302      	str	r3, [sp, #8]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
    10bc:	fbb5 f3f9 	udiv	r3, r5, r9
    10c0:	9301      	str	r3, [sp, #4]
    10c2:	b90a      	cbnz	r2, 10c8 <_printk_dec_ulong+0x38>
    10c4:	45a9      	cmp	r9, r5
    10c6:	d81e      	bhi.n	1106 <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
    10c8:	9b01      	ldr	r3, [sp, #4]
    10ca:	4651      	mov	r1, sl
    10cc:	f103 0030 	add.w	r0, r3, #48	; 0x30
    10d0:	47b0      	blx	r6
			found_largest_digit = 1;
    10d2:	2201      	movs	r2, #1
			digits++;
    10d4:	3701      	adds	r7, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
    10d6:	9b01      	ldr	r3, [sp, #4]
		remaining--;
    10d8:	f108 38ff 	add.w	r8, r8, #4294967295
		remainder %= pos;
    10dc:	fb09 5513 	mls	r5, r9, r3, r5
		pos /= 10;
    10e0:	230a      	movs	r3, #10
	while (pos >= 10) {
    10e2:	f1b8 0f01 	cmp.w	r8, #1
		pos /= 10;
    10e6:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
    10ea:	d1e7      	bne.n	10bc <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
    10ec:	4651      	mov	r1, sl
    10ee:	f105 0030 	add.w	r0, r5, #48	; 0x30
    10f2:	47b0      	blx	r6

	if (padding == PAD_SPACE_AFTER) {
    10f4:	f1bb 0f03 	cmp.w	fp, #3
    10f8:	d102      	bne.n	1100 <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
    10fa:	1be4      	subs	r4, r4, r7
		while (remaining-- > 0) {
    10fc:	2c00      	cmp	r4, #0
    10fe:	dc0e      	bgt.n	111e <_printk_dec_ulong+0x8e>
			out(' ', ctx);
		}
	}
}
    1100:	b005      	add	sp, #20
    1102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    1106:	4544      	cmp	r4, r8
    1108:	dbe5      	blt.n	10d6 <_printk_dec_ulong+0x46>
				&& padding < PAD_SPACE_AFTER) {
    110a:	f1bb 0f02 	cmp.w	fp, #2
    110e:	d8e2      	bhi.n	10d6 <_printk_dec_ulong+0x46>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    1110:	4651      	mov	r1, sl
    1112:	9802      	ldr	r0, [sp, #8]
    1114:	9203      	str	r2, [sp, #12]
			digits++;
    1116:	3701      	adds	r7, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    1118:	47b0      	blx	r6
			digits++;
    111a:	9a03      	ldr	r2, [sp, #12]
    111c:	e7db      	b.n	10d6 <_printk_dec_ulong+0x46>
			out(' ', ctx);
    111e:	4651      	mov	r1, sl
    1120:	2020      	movs	r0, #32
    1122:	47b0      	blx	r6
    1124:	3c01      	subs	r4, #1
    1126:	e7e9      	b.n	10fc <_printk_dec_ulong+0x6c>
    1128:	3b9aca00 	.word	0x3b9aca00

0000112c <__printk_hook_install>:
	_char_out = fn;
    112c:	4b01      	ldr	r3, [pc, #4]	; (1134 <__printk_hook_install+0x8>)
    112e:	6018      	str	r0, [r3, #0]
}
    1130:	4770      	bx	lr
    1132:	bf00      	nop
    1134:	20000178 	.word	0x20000178

00001138 <z_vprintk>:
{
    1138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
    113c:	2700      	movs	r7, #0
{
    113e:	4605      	mov	r5, r0
    1140:	468b      	mov	fp, r1
	int min_width = -1;
    1142:	f04f 39ff 	mov.w	r9, #4294967295
	enum pad_type padding = PAD_NONE;
    1146:	46b8      	mov	r8, r7
{
    1148:	461c      	mov	r4, r3
    114a:	b08d      	sub	sp, #52	; 0x34
    114c:	1e53      	subs	r3, r2, #1
    114e:	9303      	str	r3, [sp, #12]
			might_format = 0;
    1150:	2600      	movs	r6, #0
					break;
    1152:	e005      	b.n	1160 <z_vprintk+0x28>
		if (!might_format) {
    1154:	b96e      	cbnz	r6, 1172 <z_vprintk+0x3a>
			if (*fmt != '%') {
    1156:	2825      	cmp	r0, #37	; 0x25
    1158:	f000 8171 	beq.w	143e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb6>
				out((int)*fmt, ctx);
    115c:	4659      	mov	r1, fp
    115e:	47a8      	blx	r5
	while (*fmt) {
    1160:	9b03      	ldr	r3, [sp, #12]
    1162:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    1166:	9303      	str	r3, [sp, #12]
    1168:	2800      	cmp	r0, #0
    116a:	d1f3      	bne.n	1154 <z_vprintk+0x1c>
}
    116c:	b00d      	add	sp, #52	; 0x34
    116e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
    1172:	287a      	cmp	r0, #122	; 0x7a
    1174:	d80a      	bhi.n	118c <z_vprintk+0x54>
    1176:	2862      	cmp	r0, #98	; 0x62
    1178:	d810      	bhi.n	119c <z_vprintk+0x64>
    117a:	2830      	cmp	r0, #48	; 0x30
    117c:	d054      	beq.n	1228 <z_vprintk+0xf0>
    117e:	d845      	bhi.n	120c <z_vprintk+0xd4>
    1180:	2825      	cmp	r0, #37	; 0x25
    1182:	f000 815a 	beq.w	143a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb2>
    1186:	282d      	cmp	r0, #45	; 0x2d
    1188:	f000 815f 	beq.w	144a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc2>
					out((int)'%', ctx);
    118c:	4659      	mov	r1, fp
    118e:	2025      	movs	r0, #37	; 0x25
    1190:	47a8      	blx	r5
					out((int)*fmt, ctx);
    1192:	4659      	mov	r1, fp
    1194:	9b03      	ldr	r3, [sp, #12]
    1196:	7818      	ldrb	r0, [r3, #0]
    1198:	47a8      	blx	r5
    119a:	e7d9      	b.n	1150 <z_vprintk+0x18>
    119c:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
    11a0:	2b17      	cmp	r3, #23
    11a2:	d8f3      	bhi.n	118c <z_vprintk+0x54>
    11a4:	a201      	add	r2, pc, #4	; (adr r2, 11ac <z_vprintk+0x74>)
    11a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    11aa:	bf00      	nop
    11ac:	00001433 	.word	0x00001433
    11b0:	00001277 	.word	0x00001277
    11b4:	0000118d 	.word	0x0000118d
    11b8:	0000118d 	.word	0x0000118d
    11bc:	0000118d 	.word	0x0000118d
    11c0:	00001259 	.word	0x00001259
    11c4:	00001277 	.word	0x00001277
    11c8:	0000118d 	.word	0x0000118d
    11cc:	0000118d 	.word	0x0000118d
    11d0:	00001259 	.word	0x00001259
    11d4:	0000118d 	.word	0x0000118d
    11d8:	0000118d 	.word	0x0000118d
    11dc:	0000118d 	.word	0x0000118d
    11e0:	00001319 	.word	0x00001319
    11e4:	0000118d 	.word	0x0000118d
    11e8:	0000118d 	.word	0x0000118d
    11ec:	00001403 	.word	0x00001403
    11f0:	0000118d 	.word	0x0000118d
    11f4:	000012e7 	.word	0x000012e7
    11f8:	0000118d 	.word	0x0000118d
    11fc:	0000118d 	.word	0x0000118d
    1200:	00001215 	.word	0x00001215
    1204:	0000118d 	.word	0x0000118d
    1208:	00001259 	.word	0x00001259
			switch (*fmt) {
    120c:	2839      	cmp	r0, #57	; 0x39
    120e:	d91a      	bls.n	1246 <z_vprintk+0x10e>
    1210:	2858      	cmp	r0, #88	; 0x58
    1212:	d1bb      	bne.n	118c <z_vprintk+0x54>
				if (*fmt == 'p') {
    1214:	9b03      	ldr	r3, [sp, #12]
    1216:	781b      	ldrb	r3, [r3, #0]
    1218:	2b70      	cmp	r3, #112	; 0x70
    121a:	f040 8088 	bne.w	132e <z_vprintk+0x1f6>
					x = va_arg(ap, unsigned int);
    121e:	f854 3b04 	ldr.w	r3, [r4], #4
    1222:	2200      	movs	r2, #0
    1224:	9306      	str	r3, [sp, #24]
    1226:	e090      	b.n	134a <z_vprintk+0x212>
				if (min_width < 0 && padding == PAD_NONE) {
    1228:	f1b9 0f00 	cmp.w	r9, #0
    122c:	da0e      	bge.n	124c <z_vprintk+0x114>
    122e:	f1b8 0f00 	cmp.w	r8, #0
    1232:	f000 810d 	beq.w	1450 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc8>
					min_width = *fmt - '0';
    1236:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    123a:	f1b8 0f00 	cmp.w	r8, #0
    123e:	bf08      	it	eq
    1240:	f04f 0802 	moveq.w	r8, #2
    1244:	e78c      	b.n	1160 <z_vprintk+0x28>
				if (min_width < 0) {
    1246:	f1b9 0f00 	cmp.w	r9, #0
    124a:	dbf4      	blt.n	1236 <z_vprintk+0xfe>
					min_width = 10 * min_width + *fmt - '0';
    124c:	230a      	movs	r3, #10
    124e:	fb03 0909 	mla	r9, r3, r9, r0
    1252:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    1256:	e7f0      	b.n	123a <z_vprintk+0x102>
				if (*fmt == 'h' && length_mod == 'h') {
    1258:	2868      	cmp	r0, #104	; 0x68
    125a:	d103      	bne.n	1264 <z_vprintk+0x12c>
    125c:	2f68      	cmp	r7, #104	; 0x68
    125e:	d106      	bne.n	126e <z_vprintk+0x136>
					length_mod = 'H';
    1260:	2748      	movs	r7, #72	; 0x48
    1262:	e77d      	b.n	1160 <z_vprintk+0x28>
				} else if (*fmt == 'l' && length_mod == 'l') {
    1264:	286c      	cmp	r0, #108	; 0x6c
    1266:	d102      	bne.n	126e <z_vprintk+0x136>
    1268:	2f6c      	cmp	r7, #108	; 0x6c
    126a:	f000 80f4 	beq.w	1456 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xce>
				} else if (length_mod == 0) {
    126e:	2f00      	cmp	r7, #0
    1270:	d18c      	bne.n	118c <z_vprintk+0x54>
    1272:	4607      	mov	r7, r0
    1274:	e774      	b.n	1160 <z_vprintk+0x28>
				if (length_mod == 'z') {
    1276:	2f7a      	cmp	r7, #122	; 0x7a
    1278:	d102      	bne.n	1280 <z_vprintk+0x148>
					d = va_arg(ap, int);
    127a:	f854 6b04 	ldr.w	r6, [r4], #4
    127e:	e021      	b.n	12c4 <z_vprintk+0x18c>
				} else if (length_mod == 'l') {
    1280:	2f6c      	cmp	r7, #108	; 0x6c
    1282:	d0fa      	beq.n	127a <z_vprintk+0x142>
				} else if (length_mod == 'L') {
    1284:	2f4c      	cmp	r7, #76	; 0x4c
    1286:	d1f8      	bne.n	127a <z_vprintk+0x142>
					long long lld = va_arg(ap, long long);
    1288:	3407      	adds	r4, #7
    128a:	f024 0407 	bic.w	r4, r4, #7
    128e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    1292:	e9cd 2304 	strd	r2, r3, [sp, #16]
					if (lld > __LONG_MAX__ ||
    1296:	9b04      	ldr	r3, [sp, #16]
    1298:	f04f 30ff 	mov.w	r0, #4294967295
    129c:	f113 4100 	adds.w	r1, r3, #2147483648	; 0x80000000
    12a0:	9b05      	ldr	r3, [sp, #20]
    12a2:	9108      	str	r1, [sp, #32]
    12a4:	f143 0100 	adc.w	r1, r3, #0
    12a8:	9109      	str	r1, [sp, #36]	; 0x24
    12aa:	2100      	movs	r1, #0
    12ac:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    12b0:	4299      	cmp	r1, r3
    12b2:	bf08      	it	eq
    12b4:	4290      	cmpeq	r0, r2
    12b6:	d204      	bcs.n	12c2 <z_vprintk+0x18a>
						print_err(out, ctx);
    12b8:	4659      	mov	r1, fp
    12ba:	4628      	mov	r0, r5
    12bc:	f010 ff03 	bl	120c6 <print_err>
						break;
    12c0:	e746      	b.n	1150 <z_vprintk+0x18>
					d = lld;
    12c2:	9e04      	ldr	r6, [sp, #16]
				if (d < 0) {
    12c4:	2e00      	cmp	r6, #0
    12c6:	da05      	bge.n	12d4 <z_vprintk+0x19c>
					out((int)'-', ctx);
    12c8:	4659      	mov	r1, fp
    12ca:	202d      	movs	r0, #45	; 0x2d
    12cc:	47a8      	blx	r5
					d = -d;
    12ce:	4276      	negs	r6, r6
					min_width--;
    12d0:	f109 39ff 	add.w	r9, r9, #4294967295
				_printk_dec_ulong(out, ctx, d, padding,
    12d4:	4643      	mov	r3, r8
    12d6:	4632      	mov	r2, r6
    12d8:	f8cd 9000 	str.w	r9, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
    12dc:	4659      	mov	r1, fp
    12de:	4628      	mov	r0, r5
    12e0:	f7ff fed6 	bl	1090 <_printk_dec_ulong>
				break;
    12e4:	e734      	b.n	1150 <z_vprintk+0x18>
				if (length_mod == 'z') {
    12e6:	2f7a      	cmp	r7, #122	; 0x7a
    12e8:	d102      	bne.n	12f0 <z_vprintk+0x1b8>
					u = va_arg(ap, unsigned int);
    12ea:	f854 2b04 	ldr.w	r2, [r4], #4
    12ee:	e00f      	b.n	1310 <z_vprintk+0x1d8>
				} else if (length_mod == 'l') {
    12f0:	2f6c      	cmp	r7, #108	; 0x6c
    12f2:	d0fa      	beq.n	12ea <z_vprintk+0x1b2>
				} else if (length_mod == 'L') {
    12f4:	2f4c      	cmp	r7, #76	; 0x4c
    12f6:	d1f8      	bne.n	12ea <z_vprintk+0x1b2>
					if (llu > ~0UL) {
    12f8:	2100      	movs	r1, #0
    12fa:	f04f 30ff 	mov.w	r0, #4294967295
					unsigned long long llu =
    12fe:	3407      	adds	r4, #7
    1300:	f024 0407 	bic.w	r4, r4, #7
    1304:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
    1308:	4299      	cmp	r1, r3
    130a:	bf08      	it	eq
    130c:	4290      	cmpeq	r0, r2
    130e:	d3d3      	bcc.n	12b8 <z_vprintk+0x180>
				_printk_dec_ulong(out, ctx, u, padding,
    1310:	4643      	mov	r3, r8
    1312:	f8cd 9000 	str.w	r9, [sp]
    1316:	e7e1      	b.n	12dc <z_vprintk+0x1a4>
				out('0', ctx);
    1318:	4659      	mov	r1, fp
    131a:	2030      	movs	r0, #48	; 0x30
    131c:	47a8      	blx	r5
				out('x', ctx);
    131e:	4659      	mov	r1, fp
    1320:	2078      	movs	r0, #120	; 0x78
    1322:	47a8      	blx	r5
					min_width = 8;
    1324:	f04f 0908 	mov.w	r9, #8
				padding = PAD_ZERO_BEFORE;
    1328:	f04f 0801 	mov.w	r8, #1
    132c:	e772      	b.n	1214 <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
    132e:	2f6c      	cmp	r7, #108	; 0x6c
    1330:	f43f af75 	beq.w	121e <z_vprintk+0xe6>
				} else if (length_mod == 'L') {
    1334:	2f4c      	cmp	r7, #76	; 0x4c
    1336:	f47f af72 	bne.w	121e <z_vprintk+0xe6>
					x = va_arg(ap, unsigned long long);
    133a:	1de3      	adds	r3, r4, #7
    133c:	f023 0307 	bic.w	r3, r3, #7
    1340:	461c      	mov	r4, r3
    1342:	f854 2b08 	ldr.w	r2, [r4], #8
    1346:	9206      	str	r2, [sp, #24]
    1348:	685a      	ldr	r2, [r3, #4]
	int digits = 0;
    134a:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
    134c:	2310      	movs	r3, #16
	int shift = sizeof(num) * 8;
    134e:	f04f 0a40 	mov.w	sl, #64	; 0x40
	int digits = 0;
    1352:	9104      	str	r1, [sp, #16]
	int found_largest_digit = 0;
    1354:	9107      	str	r1, [sp, #28]
		shift -= 4;
    1356:	f1aa 0a04 	sub.w	sl, sl, #4
		nibble = (num >> shift) & 0xf;
    135a:	9906      	ldr	r1, [sp, #24]
    135c:	f1ca 0e20 	rsb	lr, sl, #32
    1360:	f1aa 0c20 	sub.w	ip, sl, #32
    1364:	fa21 f00a 	lsr.w	r0, r1, sl
    1368:	fa02 fe0e 	lsl.w	lr, r2, lr
    136c:	ea40 000e 	orr.w	r0, r0, lr
    1370:	fa22 fc0c 	lsr.w	ip, r2, ip
    1374:	ea40 000c 	orr.w	r0, r0, ip
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
    1378:	f010 000f 	ands.w	r0, r0, #15
    137c:	d107      	bne.n	138e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6>
    137e:	9907      	ldr	r1, [sp, #28]
    1380:	b911      	cbnz	r1, 1388 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT>
    1382:	f1ba 0f00 	cmp.w	sl, #0
    1386:	d125      	bne.n	13d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c>
			nibble += nibble > 9 ? 87 : 48;
    1388:	f04f 0c30 	mov.w	ip, #48	; 0x30
    138c:	e005      	b.n	139a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12>
    138e:	2809      	cmp	r0, #9
    1390:	bf8c      	ite	hi
    1392:	f04f 0c57 	movhi.w	ip, #87	; 0x57
    1396:	f04f 0c30 	movls.w	ip, #48	; 0x30
    139a:	4460      	add	r0, ip
			out((int)nibble, ctx);
    139c:	4659      	mov	r1, fp
    139e:	b240      	sxtb	r0, r0
    13a0:	920a      	str	r2, [sp, #40]	; 0x28
    13a2:	9307      	str	r3, [sp, #28]
    13a4:	47a8      	blx	r5
			digits++;
    13a6:	9b04      	ldr	r3, [sp, #16]
	while (shift >= 4) {
    13a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			digits++;
    13aa:	3301      	adds	r3, #1
    13ac:	9304      	str	r3, [sp, #16]
	while (shift >= 4) {
    13ae:	9b07      	ldr	r3, [sp, #28]
    13b0:	f1ba 0f00 	cmp.w	sl, #0
    13b4:	d123      	bne.n	13fe <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x76>
	if (padding == PAD_SPACE_AFTER) {
    13b6:	f1b8 0f03 	cmp.w	r8, #3
    13ba:	f47f aec9 	bne.w	1150 <z_vprintk+0x18>
		remaining = min_width * 2 - digits;
    13be:	9b04      	ldr	r3, [sp, #16]
    13c0:	ebc3 0649 	rsb	r6, r3, r9, lsl #1
		while (remaining-- > 0) {
    13c4:	2e00      	cmp	r6, #0
    13c6:	f77f aec3 	ble.w	1150 <z_vprintk+0x18>
			out(' ', ctx);
    13ca:	4659      	mov	r1, fp
    13cc:	2020      	movs	r0, #32
    13ce:	47a8      	blx	r5
    13d0:	3e01      	subs	r6, #1
    13d2:	e7f7      	b.n	13c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3c>
		if (remaining-- <= min_width) {
    13d4:	1e59      	subs	r1, r3, #1
    13d6:	4599      	cmp	r9, r3
    13d8:	910a      	str	r1, [sp, #40]	; 0x28
    13da:	db07      	blt.n	13ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x64>
			if (padding == PAD_ZERO_BEFORE) {
    13dc:	f1b8 0f01 	cmp.w	r8, #1
    13e0:	d106      	bne.n	13f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x68>
				out('0', ctx);
    13e2:	4659      	mov	r1, fp
    13e4:	2030      	movs	r0, #48	; 0x30
    13e6:	920b      	str	r2, [sp, #44]	; 0x2c
				out(' ', ctx);
    13e8:	47a8      	blx	r5
    13ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
			nibble += nibble > 9 ? 87 : 48;
    13ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    13ee:	e7b2      	b.n	1356 <z_vprintk+0x21e>
			} else if (padding == PAD_SPACE_BEFORE) {
    13f0:	f1b8 0f02 	cmp.w	r8, #2
    13f4:	d1fa      	bne.n	13ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x64>
				out(' ', ctx);
    13f6:	4659      	mov	r1, fp
    13f8:	2020      	movs	r0, #32
    13fa:	920b      	str	r2, [sp, #44]	; 0x2c
    13fc:	e7f4      	b.n	13e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x60>
			found_largest_digit = 1;
    13fe:	9607      	str	r6, [sp, #28]
    1400:	e7a9      	b.n	1356 <z_vprintk+0x21e>
				char *s = va_arg(ap, char *);
    1402:	f854 6b04 	ldr.w	r6, [r4], #4
				while (*s) {
    1406:	46b2      	mov	sl, r6
    1408:	4653      	mov	r3, sl
    140a:	f81a 0b01 	ldrb.w	r0, [sl], #1
    140e:	b968      	cbnz	r0, 142c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa4>
				if (padding == PAD_SPACE_AFTER) {
    1410:	f1b8 0f03 	cmp.w	r8, #3
    1414:	d121      	bne.n	145a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd2>
					int remaining = min_width - (s - start);
    1416:	1b9e      	subs	r6, r3, r6
    1418:	eba9 0606 	sub.w	r6, r9, r6
					while (remaining-- > 0) {
    141c:	2e00      	cmp	r6, #0
    141e:	f77f ae97 	ble.w	1150 <z_vprintk+0x18>
						out(' ', ctx);
    1422:	4659      	mov	r1, fp
    1424:	2020      	movs	r0, #32
    1426:	47a8      	blx	r5
    1428:	3e01      	subs	r6, #1
    142a:	e7f7      	b.n	141c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x94>
					out((int)(*s++), ctx);
    142c:	4659      	mov	r1, fp
    142e:	47a8      	blx	r5
    1430:	e7ea      	b.n	1408 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x80>
				out(c, ctx);
    1432:	4659      	mov	r1, fp
    1434:	f854 0b04 	ldr.w	r0, [r4], #4
    1438:	e6ae      	b.n	1198 <z_vprintk+0x60>
				out((int)'%', ctx);
    143a:	4659      	mov	r1, fp
    143c:	e6ac      	b.n	1198 <z_vprintk+0x60>
				length_mod = 0;
    143e:	4637      	mov	r7, r6
				padding = PAD_NONE;
    1440:	46b0      	mov	r8, r6
				min_width = -1;
    1442:	f04f 39ff 	mov.w	r9, #4294967295
				might_format = 1;
    1446:	2601      	movs	r6, #1
    1448:	e68a      	b.n	1160 <z_vprintk+0x28>
			switch (*fmt) {
    144a:	f04f 0803 	mov.w	r8, #3
    144e:	e687      	b.n	1160 <z_vprintk+0x28>
					padding = PAD_ZERO_BEFORE;
    1450:	f04f 0801 	mov.w	r8, #1
    1454:	e684      	b.n	1160 <z_vprintk+0x28>
					length_mod = 'L';
    1456:	274c      	movs	r7, #76	; 0x4c
    1458:	e682      	b.n	1160 <z_vprintk+0x28>
			might_format = 0;
    145a:	4606      	mov	r6, r0
		++fmt;
    145c:	e680      	b.n	1160 <z_vprintk+0x28>
    145e:	bf00      	nop

00001460 <vprintk>:
{
    1460:	b507      	push	{r0, r1, r2, lr}
    1462:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    1464:	2100      	movs	r1, #0
{
    1466:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    1468:	9101      	str	r1, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
    146a:	4803      	ldr	r0, [pc, #12]	; (1478 <vprintk+0x18>)
    146c:	a901      	add	r1, sp, #4
    146e:	f7ff fe63 	bl	1138 <z_vprintk>
}
    1472:	b003      	add	sp, #12
    1474:	f85d fb04 	ldr.w	pc, [sp], #4
    1478:	00001081 	.word	0x00001081

0000147c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    147c:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    147e:	2500      	movs	r5, #0
{
    1480:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    1482:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    1486:	4604      	mov	r4, r0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    1488:	a901      	add	r1, sp, #4
    148a:	4805      	ldr	r0, [pc, #20]	; (14a0 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    148c:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    148e:	f7ff fe53 	bl	1138 <z_vprintk>

	if (ctx.count < ctx.max) {
    1492:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    1496:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    1498:	bfb8      	it	lt
    149a:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    149c:	b005      	add	sp, #20
    149e:	bd30      	pop	{r4, r5, pc}
    14a0:	000120e3 	.word	0x000120e3

000014a4 <nordicsemi_nrf53_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    14a4:	f04f 0320 	mov.w	r3, #32
    14a8:	f3ef 8111 	mrs	r1, BASEPRI
    14ac:	f383 8811 	msr	BASEPRI, r3
    14b0:	f3bf 8f6f 	isb	sy
	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_CACHE
#ifdef CONFIG_SOC_NRF5340_CPUAPP
	/* Enable the instruction & data cache */
	NRF_CACHE->ENABLE = CACHE_ENABLE_ENABLE_Msk;
    14b4:	2301      	movs	r3, #1
    14b6:	4a09      	ldr	r2, [pc, #36]	; (14dc <nordicsemi_nrf53_init+0x38>)
    14b8:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
#endif /* CONFIG_SOC_NRF5340_CPUNET */
#endif

#if defined(CONFIG_SOC_NRF5340_CPUAPP) && \
	!defined(CONFIG_TRUSTED_EXECUTION_NONSECURE)
	*((u32_t *)0x500046D0) = 0x1;
    14bc:	f502 525b 	add.w	r2, r2, #14016	; 0x36c0
    14c0:	3210      	adds	r2, #16
#endif

#if defined(CONFIG_SOC_DCDC_NRF53X_APP)
	NRF_REGULATORS->VREGMAIN.DCDCEN = 1;
    14c2:	6353      	str	r3, [r2, #52]	; 0x34
	*((u32_t *)0x500046D0) = 0x1;
    14c4:	6013      	str	r3, [r2, #0]
#endif
#if defined(CONFIG_SOC_DCDC_NRF53X_NET)
	NRF_REGULATORS->VREGRADIO.DCDCEN = 1;
    14c6:	f8c2 3234 	str.w	r3, [r2, #564]	; 0x234
#endif
#if defined(CONFIG_SOC_DCDC_NRF53X_HV)
	NRF_REGULATORS->VREGH.DCDCEN = 1;
    14ca:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    14ce:	f381 8811 	msr	BASEPRI, r1
    14d2:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    14d6:	2000      	movs	r0, #0
    14d8:	4770      	bx	lr
    14da:	bf00      	nop
    14dc:	50001000 	.word	0x50001000

000014e0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    14e0:	b148      	cbz	r0, 14f6 <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    14e2:	4b05      	ldr	r3, [pc, #20]	; (14f8 <arch_busy_wait+0x18>)
    14e4:	681a      	ldr	r2, [r3, #0]
    14e6:	4b05      	ldr	r3, [pc, #20]	; (14fc <arch_busy_wait+0x1c>)
    14e8:	fbb2 f2f3 	udiv	r2, r2, r3
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    14ec:	4b04      	ldr	r3, [pc, #16]	; (1500 <arch_busy_wait+0x20>)
    delay_cycles(cycles);
    14ee:	4350      	muls	r0, r2
    14f0:	f043 0301 	orr.w	r3, r3, #1
    14f4:	4718      	bx	r3

void arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    14f6:	4770      	bx	lr
    14f8:	200002b0 	.word	0x200002b0
    14fc:	000f4240 	.word	0x000f4240
    1500:	00016f30 	.word	0x00016f30

00001504 <nvs_prev_ate>:

/* walking through allocation entry list, from newest to oldest entries
 * read ate from addr, modify addr to the previous ate
 */
static int nvs_prev_ate(struct nvs_fs *fs, u32_t *addr, struct nvs_ate *ate)
{
    1504:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    1508:	2308      	movs	r3, #8
{
    150a:	460d      	mov	r5, r1
    150c:	b085      	sub	sp, #20
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    150e:	6809      	ldr	r1, [r1, #0]
{
    1510:	4607      	mov	r7, r0
	int rc;
	struct nvs_ate close_ate, end_ate;
	u32_t data_end_addr, ate_end_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    1512:	7c04      	ldrb	r4, [r0, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    1514:	f011 f89b 	bl	1264e <nvs_flash_rd>

	rc = nvs_flash_ate_rd(fs, *addr, ate);
	if (rc) {
    1518:	b968      	cbnz	r0, 1536 <nvs_prev_ate+0x32>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    151a:	2108      	movs	r1, #8
    151c:	4620      	mov	r0, r4
    151e:	f011 f8e2 	bl	126e6 <nvs_al_size.isra.0>
		return rc;
	}

	*addr += ate_size;
    1522:	6829      	ldr	r1, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
    1524:	89bb      	ldrh	r3, [r7, #12]
	*addr += ate_size;
    1526:	4401      	add	r1, r0
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
    1528:	b28a      	uxth	r2, r1
    152a:	1a1b      	subs	r3, r3, r0
    152c:	429a      	cmp	r2, r3
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    152e:	4606      	mov	r6, r0
	*addr += ate_size;
    1530:	6029      	str	r1, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
    1532:	d003      	beq.n	153c <nvs_prev_ate+0x38>
		return 0;
    1534:	2000      	movs	r0, #0
	/* remark: if there was absolutely no valid data in the sector *addr
	 * is kept at sector_end - 2*ate_size, the next read will contain
	 * invalid data and continue with a sector jump
	 */
	return 0;
}
    1536:	b005      	add	sp, #20
    1538:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
    153c:	0c0b      	lsrs	r3, r1, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
    153e:	bf09      	itett	eq
    1540:	89fb      	ldrheq	r3, [r7, #14]
		*addr -= (1 << ADDR_SECT_SHIFT);
    1542:	f5a1 3180 	subne.w	r1, r1, #65536	; 0x10000
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
    1546:	f103 33ff 	addeq.w	r3, r3, #4294967295
    154a:	eb01 4103 	addeq.w	r1, r1, r3, lsl #16
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    154e:	466a      	mov	r2, sp
    1550:	2308      	movs	r3, #8
    1552:	4638      	mov	r0, r7
    1554:	6029      	str	r1, [r5, #0]
    1556:	f011 f87a 	bl	1264e <nvs_flash_rd>
	if (rc) {
    155a:	2800      	cmp	r0, #0
    155c:	d1eb      	bne.n	1536 <nvs_prev_ate+0x32>
    155e:	466a      	mov	r2, sp
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    1560:	4603      	mov	r3, r0
		if (data8[i] != value) {
    1562:	f812 1b01 	ldrb.w	r1, [r2], #1
    1566:	29ff      	cmp	r1, #255	; 0xff
    1568:	d115      	bne.n	1596 <nvs_prev_ate+0x92>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    156a:	3301      	adds	r3, #1
    156c:	2b08      	cmp	r3, #8
    156e:	d1f8      	bne.n	1562 <nvs_prev_ate+0x5e>
		*addr = fs->ate_wra;
    1570:	687b      	ldr	r3, [r7, #4]
    1572:	602b      	str	r3, [r5, #0]
		return 0;
    1574:	e7df      	b.n	1536 <nvs_prev_ate+0x32>
		if (close_ate.offset < (fs->sector_size - ate_size) &&
    1576:	89bb      	ldrh	r3, [r7, #12]
    1578:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    157c:	1b9b      	subs	r3, r3, r6
    157e:	4299      	cmp	r1, r3
    1580:	d20f      	bcs.n	15a2 <nvs_prev_ate+0x9e>
		    !(close_ate.offset % ate_size)) {
    1582:	fbb1 f3f6 	udiv	r3, r1, r6
    1586:	fb06 1313 	mls	r3, r6, r3, r1
		if (close_ate.offset < (fs->sector_size - ate_size) &&
    158a:	b953      	cbnz	r3, 15a2 <nvs_prev_ate+0x9e>
			(*addr) &= ADDR_SECT_MASK;
    158c:	0c24      	lsrs	r4, r4, #16
    158e:	0424      	lsls	r4, r4, #16
			(*addr) += close_ate.offset;
    1590:	440c      	add	r4, r1
    1592:	602c      	str	r4, [r5, #0]
			return 0;
    1594:	e7cf      	b.n	1536 <nvs_prev_ate+0x32>
	if (!nvs_ate_crc8_check(&close_ate)) {
    1596:	4668      	mov	r0, sp
    1598:	f011 f890 	bl	126bc <nvs_ate_crc8_check>
    159c:	682c      	ldr	r4, [r5, #0]
    159e:	2800      	cmp	r0, #0
    15a0:	d0e9      	beq.n	1576 <nvs_prev_ate+0x72>
	data_end_addr = *addr & ADDR_SECT_MASK;
    15a2:	4b10      	ldr	r3, [pc, #64]	; (15e4 <nvs_prev_ate+0xe0>)
	*addr -= ate_size;
    15a4:	1ba4      	subs	r4, r4, r6
			data_end_addr &= ADDR_SECT_MASK;
    15a6:	4699      	mov	r9, r3
	*addr -= ate_size;
    15a8:	602c      	str	r4, [r5, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
    15aa:	ea04 0803 	and.w	r8, r4, r3
	while (ate_end_addr > data_end_addr) {
    15ae:	45a0      	cmp	r8, r4
    15b0:	d2c0      	bcs.n	1534 <nvs_prev_ate+0x30>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    15b2:	2308      	movs	r3, #8
    15b4:	4621      	mov	r1, r4
    15b6:	4638      	mov	r0, r7
    15b8:	eb0d 0203 	add.w	r2, sp, r3
    15bc:	f011 f847 	bl	1264e <nvs_flash_rd>
		if (rc) {
    15c0:	2800      	cmp	r0, #0
    15c2:	d1b8      	bne.n	1536 <nvs_prev_ate+0x32>
		if (!nvs_ate_crc8_check(&end_ate)) {
    15c4:	a802      	add	r0, sp, #8
    15c6:	f011 f879 	bl	126bc <nvs_ate_crc8_check>
    15ca:	b940      	cbnz	r0, 15de <nvs_prev_ate+0xda>
			data_end_addr += end_ate.offset + end_ate.len;
    15cc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    15d0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
			data_end_addr &= ADDR_SECT_MASK;
    15d4:	ea08 0809 	and.w	r8, r8, r9
			data_end_addr += end_ate.offset + end_ate.len;
    15d8:	4413      	add	r3, r2
    15da:	4498      	add	r8, r3
			*addr = ate_end_addr;
    15dc:	602c      	str	r4, [r5, #0]
		ate_end_addr -= ate_size;
    15de:	1ba4      	subs	r4, r4, r6
    15e0:	e7e5      	b.n	15ae <nvs_prev_ate+0xaa>
    15e2:	bf00      	nop
    15e4:	ffff0000 	.word	0xffff0000

000015e8 <nvs_gc>:
/* garbage collection: the address ate_wra has been updated to the new sector
 * that has just been started. The data to gc is in the sector after this new
 * sector.
 */
static int nvs_gc(struct nvs_fs *fs)
{
    15e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct nvs_ate close_ate, gc_ate, wlk_ate;
	u32_t sec_addr, gc_addr, gc_prev_addr, wlk_addr, wlk_prev_addr,
	      data_addr, stop_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    15ec:	2108      	movs	r1, #8
{
    15ee:	b095      	sub	sp, #84	; 0x54
    15f0:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    15f2:	7c00      	ldrb	r0, [r0, #16]
    15f4:	f011 f877 	bl	126e6 <nvs_al_size.isra.0>
    15f8:	4606      	mov	r6, r0

	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    15fa:	686b      	ldr	r3, [r5, #4]
	nvs_sector_advance(fs, &sec_addr);
    15fc:	89e8      	ldrh	r0, [r5, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    15fe:	0c1b      	lsrs	r3, r3, #16
    1600:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &sec_addr);
    1602:	a903      	add	r1, sp, #12
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    1604:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
    1606:	f011 f878 	bl	126fa <nvs_sector_advance.isra.0>
	gc_addr = sec_addr + fs->sector_size - ate_size;
    160a:	9b03      	ldr	r3, [sp, #12]
    160c:	89a9      	ldrh	r1, [r5, #12]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    160e:	af06      	add	r7, sp, #24
	gc_addr = sec_addr + fs->sector_size - ate_size;
    1610:	4419      	add	r1, r3
    1612:	1b89      	subs	r1, r1, r6
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    1614:	2308      	movs	r3, #8
    1616:	463a      	mov	r2, r7
    1618:	4628      	mov	r0, r5
	gc_addr = sec_addr + fs->sector_size - ate_size;
    161a:	9104      	str	r1, [sp, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    161c:	f011 f817 	bl	1264e <nvs_flash_rd>

	/* if the sector is not closed don't do gc */
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
	if (rc < 0) {
    1620:	1e04      	subs	r4, r0, #0
    1622:	db71      	blt.n	1708 <nvs_gc+0x120>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    1624:	2300      	movs	r3, #0
		if (data8[i] != value) {
    1626:	5cfa      	ldrb	r2, [r7, r3]
    1628:	2aff      	cmp	r2, #255	; 0xff
    162a:	d171      	bne.n	1710 <nvs_gc+0x128>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    162c:	3301      	adds	r3, #1
    162e:	2b08      	cmp	r3, #8
    1630:	d1f9      	bne.n	1626 <nvs_gc+0x3e>
		return rc;
	}

	rc = nvs_ate_cmp_const(&close_ate, 0xff);
	if (!rc) {
		rc = nvs_flash_erase_sector(fs, sec_addr);
    1632:	4628      	mov	r0, r5
    1634:	9903      	ldr	r1, [sp, #12]
    1636:	f011 f88f 	bl	12758 <nvs_flash_erase_sector>
    163a:	4604      	mov	r4, r0
		if (rc) {
    163c:	e064      	b.n	1708 <nvs_gc+0x120>
		bytes_to_copy = MIN(block_size, len);
    163e:	4557      	cmp	r7, sl
    1640:	463e      	mov	r6, r7
    1642:	bf28      	it	cs
    1644:	4656      	movcs	r6, sl
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
    1646:	4641      	mov	r1, r8
    1648:	4633      	mov	r3, r6
    164a:	4628      	mov	r0, r5
    164c:	aa0c      	add	r2, sp, #48	; 0x30
    164e:	f010 fffe 	bl	1264e <nvs_flash_rd>
		if (rc) {
    1652:	4604      	mov	r4, r0
    1654:	2800      	cmp	r0, #0
    1656:	d157      	bne.n	1708 <nvs_gc+0x120>
	if (!len) {
    1658:	b136      	cbz	r6, 1668 <nvs_gc+0x80>
    165a:	4633      	mov	r3, r6
    165c:	4628      	mov	r0, r5
    165e:	68a9      	ldr	r1, [r5, #8]
    1660:	aa0c      	add	r2, sp, #48	; 0x30
    1662:	f011 f89f 	bl	127a4 <nvs_flash_al_wrt.part.0>
    1666:	4604      	mov	r4, r0
	fs->data_wra += nvs_al_size(fs, len);
    1668:	4631      	mov	r1, r6
    166a:	7c28      	ldrb	r0, [r5, #16]
    166c:	f011 f83b 	bl	126e6 <nvs_al_size.isra.0>
    1670:	68aa      	ldr	r2, [r5, #8]
    1672:	4402      	add	r2, r0
    1674:	60aa      	str	r2, [r5, #8]
		if (rc) {
    1676:	2c00      	cmp	r4, #0
    1678:	d146      	bne.n	1708 <nvs_gc+0x120>
		len -= bytes_to_copy;
    167a:	ebaa 0a06 	sub.w	sl, sl, r6
		addr += bytes_to_copy;
    167e:	44b0      	add	r8, r6
    1680:	e038      	b.n	16f4 <nvs_gc+0x10c>
				return rc;
			}
		}

		/* stop gc at end of the sector */
		if (gc_prev_addr == stop_addr) {
    1682:	9b01      	ldr	r3, [sp, #4]
    1684:	455b      	cmp	r3, fp
    1686:	d0d4      	beq.n	1632 <nvs_gc+0x4a>
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    1688:	4628      	mov	r0, r5
    168a:	aa08      	add	r2, sp, #32
    168c:	a904      	add	r1, sp, #16
		gc_prev_addr = gc_addr;
    168e:	f8dd b010 	ldr.w	fp, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    1692:	f7ff ff37 	bl	1504 <nvs_prev_ate>
		if (rc) {
    1696:	4604      	mov	r4, r0
    1698:	2800      	cmp	r0, #0
    169a:	d135      	bne.n	1708 <nvs_gc+0x120>
		wlk_addr = fs->ate_wra;
    169c:	686b      	ldr	r3, [r5, #4]
    169e:	9305      	str	r3, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    16a0:	4628      	mov	r0, r5
    16a2:	aa0a      	add	r2, sp, #40	; 0x28
    16a4:	a905      	add	r1, sp, #20
			wlk_prev_addr = wlk_addr;
    16a6:	9f05      	ldr	r7, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    16a8:	f7ff ff2c 	bl	1504 <nvs_prev_ate>
			if (rc) {
    16ac:	4604      	mov	r4, r0
    16ae:	bb58      	cbnz	r0, 1708 <nvs_gc+0x120>
			if ((wlk_ate.id == gc_ate.id) &&
    16b0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
    16b4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    16b8:	429a      	cmp	r2, r3
    16ba:	d1f1      	bne.n	16a0 <nvs_gc+0xb8>
			    (!nvs_ate_crc8_check(&wlk_ate))) {
    16bc:	a80a      	add	r0, sp, #40	; 0x28
    16be:	f010 fffd 	bl	126bc <nvs_ate_crc8_check>
			if ((wlk_ate.id == gc_ate.id) &&
    16c2:	2800      	cmp	r0, #0
    16c4:	d1ec      	bne.n	16a0 <nvs_gc+0xb8>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
    16c6:	455f      	cmp	r7, fp
    16c8:	d1db      	bne.n	1682 <nvs_gc+0x9a>
    16ca:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    16ce:	2b00      	cmp	r3, #0
    16d0:	d0d7      	beq.n	1682 <nvs_gc+0x9a>
			data_addr += gc_ate.offset;
    16d2:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    16d6:	ea0b 0809 	and.w	r8, fp, r9
			data_addr += gc_ate.offset;
    16da:	4498      	add	r8, r3
			gc_ate.offset = (u16_t)(fs->data_wra & ADDR_OFFS_MASK);
    16dc:	68ab      	ldr	r3, [r5, #8]
			nvs_ate_crc8_update(&gc_ate);
    16de:	a808      	add	r0, sp, #32
			gc_ate.offset = (u16_t)(fs->data_wra & ADDR_OFFS_MASK);
    16e0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			nvs_ate_crc8_update(&gc_ate);
    16e4:	f010 fff6 	bl	126d4 <nvs_ate_crc8_update>
	block_size = NVS_BLOCK_SIZE & ~(fs->write_block_size - 1U);
    16e8:	7c2f      	ldrb	r7, [r5, #16]
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
    16ea:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
	block_size = NVS_BLOCK_SIZE & ~(fs->write_block_size - 1U);
    16ee:	427f      	negs	r7, r7
    16f0:	f007 0720 	and.w	r7, r7, #32
	while (len) {
    16f4:	f1ba 0f00 	cmp.w	sl, #0
    16f8:	d1a1      	bne.n	163e <nvs_gc+0x56>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
    16fa:	4628      	mov	r0, r5
    16fc:	a908      	add	r1, sp, #32
    16fe:	f011 f895 	bl	1282c <nvs_flash_ate_wrt>
			if (rc) {
    1702:	4604      	mov	r4, r0
    1704:	2800      	cmp	r0, #0
    1706:	d0bc      	beq.n	1682 <nvs_gc+0x9a>
	rc = nvs_flash_erase_sector(fs, sec_addr);
	if (rc) {
		return rc;
	}
	return 0;
}
    1708:	4620      	mov	r0, r4
    170a:	b015      	add	sp, #84	; 0x54
    170c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	stop_addr = gc_addr - ate_size;
    1710:	9b04      	ldr	r3, [sp, #16]
	gc_addr += close_ate.offset;
    1712:	f8bd 101a 	ldrh.w	r1, [sp, #26]
	stop_addr = gc_addr - ate_size;
    1716:	1b9a      	subs	r2, r3, r6
    1718:	9201      	str	r2, [sp, #4]
	gc_addr &= ADDR_SECT_MASK;
    171a:	4a03      	ldr	r2, [pc, #12]	; (1728 <nvs_gc+0x140>)
    171c:	4013      	ands	r3, r2
	gc_addr += close_ate.offset;
    171e:	440b      	add	r3, r1
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    1720:	4691      	mov	r9, r2
	gc_addr += close_ate.offset;
    1722:	9304      	str	r3, [sp, #16]
    1724:	e7b0      	b.n	1688 <nvs_gc+0xa0>
    1726:	bf00      	nop
    1728:	ffff0000 	.word	0xffff0000

0000172c <nvs_init>:
	}
	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
    172c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1730:	4604      	mov	r4, r0
    1732:	460d      	mov	r5, r1
    1734:	b087      	sub	sp, #28

	int rc;
	struct flash_pages_info info;

	k_mutex_init(&fs->nvs_lock);
    1736:	f100 0614 	add.w	r6, r0, #20
	return z_impl_k_mutex_init(mutex);
    173a:	4630      	mov	r0, r6
    173c:	f015 f805 	bl	1674a <z_impl_k_mutex_init>
    1740:	4628      	mov	r0, r5
    1742:	f00d fa2f 	bl	eba4 <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
    1746:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
    1748:	b948      	cbnz	r0, 175e <nvs_init+0x32>
		LOG_ERR("No valid flash device found");
    174a:	2145      	movs	r1, #69	; 0x45
    174c:	487f      	ldr	r0, [pc, #508]	; (194c <nvs_init+0x220>)
    174e:	f010 fcdb 	bl	12108 <printk>
		return -ENXIO;
    1752:	f06f 0505 	mvn.w	r5, #5
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
    1756:	4628      	mov	r0, r5
    1758:	b007      	add	sp, #28
    175a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
static inline size_t z_impl_flash_get_write_block_size(struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->driver_api;

	return api->write_block_size;
    175e:	6883      	ldr	r3, [r0, #8]
	fs->write_block_size = flash_get_write_block_size(fs->flash_device);
    1760:	7d1b      	ldrb	r3, [r3, #20]
	if (fs->write_block_size > NVS_BLOCK_SIZE) {
    1762:	2b20      	cmp	r3, #32
	fs->write_block_size = flash_get_write_block_size(fs->flash_device);
    1764:	7423      	strb	r3, [r4, #16]
	if (fs->write_block_size > NVS_BLOCK_SIZE) {
    1766:	d906      	bls.n	1776 <nvs_init+0x4a>
		LOG_ERR("Unsupported write block size");
    1768:	2145      	movs	r1, #69	; 0x45
    176a:	4879      	ldr	r0, [pc, #484]	; (1950 <nvs_init+0x224>)
		LOG_ERR("Configuration error - sector count");
    176c:	f010 fccc 	bl	12108 <printk>
		return -EINVAL;
    1770:	f06f 0515 	mvn.w	r5, #21
    1774:	e7ef      	b.n	1756 <nvs_init+0x2a>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
    1776:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    1778:	6821      	ldr	r1, [r4, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
    177a:	aa03      	add	r2, sp, #12
    177c:	f014 f9eb 	bl	15b56 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
    1780:	b110      	cbz	r0, 1788 <nvs_init+0x5c>
		LOG_ERR("Unable to get page info");
    1782:	2145      	movs	r1, #69	; 0x45
    1784:	4873      	ldr	r0, [pc, #460]	; (1954 <nvs_init+0x228>)
    1786:	e7f1      	b.n	176c <nvs_init+0x40>
	if (!fs->sector_size || fs->sector_size % info.size) {
    1788:	89a3      	ldrh	r3, [r4, #12]
    178a:	b12b      	cbz	r3, 1798 <nvs_init+0x6c>
    178c:	9a04      	ldr	r2, [sp, #16]
    178e:	fbb3 f5f2 	udiv	r5, r3, r2
    1792:	fb02 3515 	mls	r5, r2, r5, r3
    1796:	b115      	cbz	r5, 179e <nvs_init+0x72>
		LOG_ERR("Invalid sector size");
    1798:	2145      	movs	r1, #69	; 0x45
    179a:	486f      	ldr	r0, [pc, #444]	; (1958 <nvs_init+0x22c>)
    179c:	e7e6      	b.n	176c <nvs_init+0x40>
	if (fs->sector_count < 2) {
    179e:	89e3      	ldrh	r3, [r4, #14]
    17a0:	2b01      	cmp	r3, #1
    17a2:	d802      	bhi.n	17aa <nvs_init+0x7e>
		LOG_ERR("Configuration error - sector count");
    17a4:	2145      	movs	r1, #69	; 0x45
    17a6:	486d      	ldr	r0, [pc, #436]	; (195c <nvs_init+0x230>)
    17a8:	e7e0      	b.n	176c <nvs_init+0x40>
	u32_t addr = 0U;
    17aa:	9500      	str	r5, [sp, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    17ac:	f04f 32ff 	mov.w	r2, #4294967295
    17b0:	f04f 33ff 	mov.w	r3, #4294967295
    17b4:	4630      	mov	r0, r6
    17b6:	f00d fdbd 	bl	f334 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    17ba:	2108      	movs	r1, #8
    17bc:	7c20      	ldrb	r0, [r4, #16]
    17be:	f010 ff92 	bl	126e6 <nvs_al_size.isra.0>
	u16_t i, closed_sectors = 0;
    17c2:	46a9      	mov	r9, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    17c4:	4607      	mov	r7, r0
	for (i = 0; i < fs->sector_count; i++) {
    17c6:	89e3      	ldrh	r3, [r4, #14]
    17c8:	fa1f f885 	uxth.w	r8, r5
    17cc:	4543      	cmp	r3, r8
    17ce:	d863      	bhi.n	1898 <nvs_init+0x16c>
	if (closed_sectors == fs->sector_count) {
    17d0:	89e3      	ldrh	r3, [r4, #14]
    17d2:	454b      	cmp	r3, r9
    17d4:	f000 809f 	beq.w	1916 <nvs_init+0x1ea>
	if (i == fs->sector_count) {
    17d8:	4598      	cmp	r8, r3
    17da:	d10a      	bne.n	17f2 <nvs_init+0xc6>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, 0xff,
    17dc:	9900      	ldr	r1, [sp, #0]
    17de:	2208      	movs	r2, #8
    17e0:	4620      	mov	r0, r4
    17e2:	1bc9      	subs	r1, r1, r7
    17e4:	f010 ff94 	bl	12710 <nvs_flash_cmp_const.constprop.0>
		if (!rc) {
    17e8:	b918      	cbnz	r0, 17f2 <nvs_init+0xc6>
			nvs_sector_advance(fs, &addr);
    17ea:	4669      	mov	r1, sp
    17ec:	89e0      	ldrh	r0, [r4, #14]
    17ee:	f010 ff84 	bl	126fa <nvs_sector_advance.isra.0>
	fs->ate_wra = addr - ate_size;
    17f2:	9b00      	ldr	r3, [sp, #0]
    17f4:	1bda      	subs	r2, r3, r7
    17f6:	6062      	str	r2, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
    17f8:	4a59      	ldr	r2, [pc, #356]	; (1960 <nvs_init+0x234>)
			fs->data_wra = addr & ADDR_SECT_MASK;
    17fa:	4690      	mov	r8, r2
	fs->data_wra = addr & ADDR_SECT_MASK;
    17fc:	4013      	ands	r3, r2
    17fe:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
    1800:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    1804:	4299      	cmp	r1, r3
    1806:	d30e      	bcc.n	1826 <nvs_init+0xfa>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    1808:	2308      	movs	r3, #8
    180a:	4620      	mov	r0, r4
    180c:	aa01      	add	r2, sp, #4
    180e:	f010 ff1e 	bl	1264e <nvs_flash_rd>
		if (rc) {
    1812:	4605      	mov	r5, r0
    1814:	bb18      	cbnz	r0, 185e <nvs_init+0x132>
    1816:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
    1818:	f813 2b01 	ldrb.w	r2, [r3], #1
    181c:	2aff      	cmp	r2, #255	; 0xff
    181e:	d17d      	bne.n	191c <nvs_init+0x1f0>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    1820:	3501      	adds	r5, #1
    1822:	2d08      	cmp	r5, #8
    1824:	d1f8      	bne.n	1818 <nvs_init+0xec>
	while (fs->ate_wra > fs->data_wra) {
    1826:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
    182a:	428a      	cmp	r2, r1
    182c:	d906      	bls.n	183c <nvs_init+0x110>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, 0xff, empty_len);
    182e:	4620      	mov	r0, r4
    1830:	1a52      	subs	r2, r2, r1
    1832:	f010 ff6d 	bl	12710 <nvs_flash_cmp_const.constprop.0>
		if (rc < 0) {
    1836:	1e05      	subs	r5, r0, #0
    1838:	db11      	blt.n	185e <nvs_init+0x132>
		if (!rc) {
    183a:	d14f      	bne.n	18dc <nvs_init+0x1b0>
	addr = fs->ate_wra & ADDR_SECT_MASK;
    183c:	6863      	ldr	r3, [r4, #4]
    183e:	f8df 8120 	ldr.w	r8, [pc, #288]	; 1960 <nvs_init+0x234>
	nvs_sector_advance(fs, &addr);
    1842:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
    1844:	ea03 0308 	and.w	r3, r3, r8
	nvs_sector_advance(fs, &addr);
    1848:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
    184a:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
    184c:	f010 ff55 	bl	126fa <nvs_sector_advance.isra.0>
	rc = nvs_flash_cmp_const(fs, addr, 0xff, fs->sector_size);
    1850:	4620      	mov	r0, r4
    1852:	89a2      	ldrh	r2, [r4, #12]
    1854:	9900      	ldr	r1, [sp, #0]
    1856:	f010 ff5b 	bl	12710 <nvs_flash_cmp_const.constprop.0>
	if (rc < 0) {
    185a:	1e05      	subs	r5, r0, #0
    185c:	da43      	bge.n	18e6 <nvs_init+0x1ba>
	return z_impl_k_mutex_unlock(mutex);
    185e:	4630      	mov	r0, r6
    1860:	f00d fe4c 	bl	f4fc <z_impl_k_mutex_unlock>
	if (rc) {
    1864:	2d00      	cmp	r5, #0
    1866:	f47f af76 	bne.w	1756 <nvs_init+0x2a>
	fs->ready = true;
    186a:	2301      	movs	r3, #1
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    186c:	89e2      	ldrh	r2, [r4, #14]
	fs->ready = true;
    186e:	7463      	strb	r3, [r4, #17]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    1870:	2149      	movs	r1, #73	; 0x49
    1872:	89a3      	ldrh	r3, [r4, #12]
    1874:	483b      	ldr	r0, [pc, #236]	; (1964 <nvs_init+0x238>)
    1876:	f010 fc47 	bl	12108 <printk>
	LOG_INF("alloc wra: %d, %x",
    187a:	6862      	ldr	r2, [r4, #4]
    187c:	2149      	movs	r1, #73	; 0x49
    187e:	b293      	uxth	r3, r2
    1880:	4839      	ldr	r0, [pc, #228]	; (1968 <nvs_init+0x23c>)
    1882:	0c12      	lsrs	r2, r2, #16
    1884:	f010 fc40 	bl	12108 <printk>
	LOG_INF("data wra: %d, %x",
    1888:	68a2      	ldr	r2, [r4, #8]
    188a:	2149      	movs	r1, #73	; 0x49
    188c:	b293      	uxth	r3, r2
    188e:	4837      	ldr	r0, [pc, #220]	; (196c <nvs_init+0x240>)
    1890:	0c12      	lsrs	r2, r2, #16
    1892:	f010 fc39 	bl	12108 <printk>
	return 0;
    1896:	e75e      	b.n	1756 <nvs_init+0x2a>
		       (u16_t)(fs->sector_size - ate_size);
    1898:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
    189a:	042b      	lsls	r3, r5, #16
		       (u16_t)(fs->sector_size - ate_size);
    189c:	1bc9      	subs	r1, r1, r7
		addr = (i << ADDR_SECT_SHIFT) +
    189e:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, 0xff,
    18a2:	2208      	movs	r2, #8
    18a4:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
    18a6:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, 0xff,
    18a8:	f010 ff32 	bl	12710 <nvs_flash_cmp_const.constprop.0>
		if (rc) {
    18ac:	b170      	cbz	r0, 18cc <nvs_init+0x1a0>
			nvs_sector_advance(fs, &addr);
    18ae:	4669      	mov	r1, sp
    18b0:	89e0      	ldrh	r0, [r4, #14]
    18b2:	f010 ff22 	bl	126fa <nvs_sector_advance.isra.0>
			closed_sectors++;
    18b6:	f109 0901 	add.w	r9, r9, #1
			rc = nvs_flash_cmp_const(fs, addr, 0xff,
    18ba:	2208      	movs	r2, #8
    18bc:	4620      	mov	r0, r4
    18be:	9900      	ldr	r1, [sp, #0]
			closed_sectors++;
    18c0:	fa1f f989 	uxth.w	r9, r9
			rc = nvs_flash_cmp_const(fs, addr, 0xff,
    18c4:	f010 ff24 	bl	12710 <nvs_flash_cmp_const.constprop.0>
			if (!rc) {
    18c8:	2800      	cmp	r0, #0
    18ca:	d081      	beq.n	17d0 <nvs_init+0xa4>
	for (i = 0; i < fs->sector_count; i++) {
    18cc:	3501      	adds	r5, #1
    18ce:	e77a      	b.n	17c6 <nvs_init+0x9a>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    18d0:	f1b9 0f00 	cmp.w	r9, #0
    18d4:	d037      	beq.n	1946 <nvs_init+0x21a>
				rc = -ESPIPE;
    18d6:	f06f 051c 	mvn.w	r5, #28
    18da:	e7c0      	b.n	185e <nvs_init+0x132>
		fs->data_wra += fs->write_block_size;
    18dc:	68a3      	ldr	r3, [r4, #8]
    18de:	7c22      	ldrb	r2, [r4, #16]
    18e0:	4413      	add	r3, r2
    18e2:	60a3      	str	r3, [r4, #8]
    18e4:	e79f      	b.n	1826 <nvs_init+0xfa>
	if (rc) {
    18e6:	d0ba      	beq.n	185e <nvs_init+0x132>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    18e8:	4620      	mov	r0, r4
    18ea:	6861      	ldr	r1, [r4, #4]
    18ec:	f010 ff34 	bl	12758 <nvs_flash_erase_sector>
		if (rc) {
    18f0:	4605      	mov	r5, r0
    18f2:	2800      	cmp	r0, #0
    18f4:	d1b3      	bne.n	185e <nvs_init+0x132>
		fs->ate_wra &= ADDR_SECT_MASK;
    18f6:	6863      	ldr	r3, [r4, #4]
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    18f8:	89a0      	ldrh	r0, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
    18fa:	ea03 0308 	and.w	r3, r3, r8
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    18fe:	4403      	add	r3, r0
    1900:	eba3 0047 	sub.w	r0, r3, r7, lsl #1
    1904:	6060      	str	r0, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    1906:	ea00 0008 	and.w	r0, r0, r8
    190a:	60a0      	str	r0, [r4, #8]
		rc = nvs_gc(fs);
    190c:	4620      	mov	r0, r4
    190e:	f7ff fe6b 	bl	15e8 <nvs_gc>
    1912:	4605      	mov	r5, r0
end:
    1914:	e7a3      	b.n	185e <nvs_init+0x132>
		rc = -EDEADLK;
    1916:	f06f 0520 	mvn.w	r5, #32
    191a:	e7a0      	b.n	185e <nvs_init+0x132>
		if (!nvs_ate_crc8_check(&last_ate)) {
    191c:	a801      	add	r0, sp, #4
    191e:	f010 fecd 	bl	126bc <nvs_ate_crc8_check>
    1922:	6865      	ldr	r5, [r4, #4]
    1924:	b978      	cbnz	r0, 1946 <nvs_init+0x21a>
			fs->data_wra = addr & ADDR_SECT_MASK;
    1926:	9800      	ldr	r0, [sp, #0]
			fs->data_wra += last_ate.offset;
    1928:	f8bd 2006 	ldrh.w	r2, [sp, #6]
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    192c:	f8bd 9008 	ldrh.w	r9, [sp, #8]
			fs->data_wra = addr & ADDR_SECT_MASK;
    1930:	ea00 0008 	and.w	r0, r0, r8
			fs->data_wra += last_ate.offset;
    1934:	4402      	add	r2, r0
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    1936:	4649      	mov	r1, r9
    1938:	7c20      	ldrb	r0, [r4, #16]
    193a:	f010 fed4 	bl	126e6 <nvs_al_size.isra.0>
    193e:	4410      	add	r0, r2
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    1940:	42a8      	cmp	r0, r5
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    1942:	60a0      	str	r0, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    1944:	d0c4      	beq.n	18d0 <nvs_init+0x1a4>
		fs->ate_wra -= ate_size;
    1946:	1bed      	subs	r5, r5, r7
    1948:	6065      	str	r5, [r4, #4]
    194a:	e759      	b.n	1800 <nvs_init+0xd4>
    194c:	00017c24 	.word	0x00017c24
    1950:	00017c45 	.word	0x00017c45
    1954:	00017c67 	.word	0x00017c67
    1958:	00017c84 	.word	0x00017c84
    195c:	00017c9d 	.word	0x00017c9d
    1960:	ffff0000 	.word	0xffff0000
    1964:	00017cc5 	.word	0x00017cc5
    1968:	00017ce1 	.word	0x00017ce1
    196c:	00017cf8 	.word	0x00017cf8

00001970 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, u16_t id, const void *data, size_t len)
{
    1970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1974:	461e      	mov	r6, r3
	struct nvs_ate wlk_ate;
	u32_t wlk_addr, rd_addr;
	u16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
    1976:	7c43      	ldrb	r3, [r0, #17]
{
    1978:	4604      	mov	r4, r0
    197a:	4689      	mov	r9, r1
    197c:	4690      	mov	r8, r2
    197e:	b089      	sub	sp, #36	; 0x24
	if (!fs->ready) {
    1980:	b94b      	cbnz	r3, 1996 <nvs_write+0x26>
		LOG_ERR("NVS not initialized");
    1982:	2145      	movs	r1, #69	; 0x45
    1984:	4864      	ldr	r0, [pc, #400]	; (1b18 <nvs_write+0x1a8>)
    1986:	f010 fbbf 	bl	12108 <printk>
		return -EACCES;
    198a:	f06f 050c 	mvn.w	r5, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
    198e:	4628      	mov	r0, r5
    1990:	b009      	add	sp, #36	; 0x24
    1992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    1996:	f890 b010 	ldrb.w	fp, [r0, #16]
    199a:	2108      	movs	r1, #8
    199c:	4658      	mov	r0, fp
    199e:	f010 fea2 	bl	126e6 <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 3 * ate_size)) ||
    19a2:	89a3      	ldrh	r3, [r4, #12]
    19a4:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    19a8:	1a9b      	subs	r3, r3, r2
    19aa:	42b3      	cmp	r3, r6
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    19ac:	4682      	mov	sl, r0
	if ((len > (fs->sector_size - 3 * ate_size)) ||
    19ae:	f0c0 80ae 	bcc.w	1b0e <nvs_write+0x19e>
    19b2:	b11e      	cbz	r6, 19bc <nvs_write+0x4c>
	    ((len > 0) && (data == NULL))) {
    19b4:	f1b8 0f00 	cmp.w	r8, #0
    19b8:	f000 80a9 	beq.w	1b0e <nvs_write+0x19e>
	wlk_addr = fs->ate_wra;
    19bc:	6863      	ldr	r3, [r4, #4]
    19be:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    19c0:	4620      	mov	r0, r4
    19c2:	aa04      	add	r2, sp, #16
    19c4:	a903      	add	r1, sp, #12
		rd_addr = wlk_addr;
    19c6:	9f03      	ldr	r7, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    19c8:	f7ff fd9c 	bl	1504 <nvs_prev_ate>
		if (rc) {
    19cc:	4605      	mov	r5, r0
    19ce:	2800      	cmp	r0, #0
    19d0:	d1dd      	bne.n	198e <nvs_write+0x1e>
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
    19d2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    19d6:	454b      	cmp	r3, r9
    19d8:	d005      	beq.n	19e6 <nvs_write+0x76>
		if (wlk_addr == fs->ate_wra) {
    19da:	6862      	ldr	r2, [r4, #4]
    19dc:	9b03      	ldr	r3, [sp, #12]
    19de:	429a      	cmp	r2, r3
    19e0:	d1ee      	bne.n	19c0 <nvs_write+0x50>
		if (len == 0) {
    19e2:	b9d6      	cbnz	r6, 1a1a <nvs_write+0xaa>
    19e4:	e7d3      	b.n	198e <nvs_write+0x1e>
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
    19e6:	a804      	add	r0, sp, #16
    19e8:	f010 fe68 	bl	126bc <nvs_ate_crc8_check>
    19ec:	2800      	cmp	r0, #0
    19ee:	d1f4      	bne.n	19da <nvs_write+0x6a>
		if (len == 0) {
    19f0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    19f4:	b17e      	cbz	r6, 1a16 <nvs_write+0xa6>
		} else if (len == wlk_ate.len) {
    19f6:	42b3      	cmp	r3, r6
    19f8:	d10f      	bne.n	1a1a <nvs_write+0xaa>
		rd_addr += wlk_ate.offset;
    19fa:	f8bd 0012 	ldrh.w	r0, [sp, #18]
		rd_addr &= ADDR_SECT_MASK;
    19fe:	0c39      	lsrs	r1, r7, #16
    1a00:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
    1a02:	4401      	add	r1, r0
    1a04:	4633      	mov	r3, r6
    1a06:	4642      	mov	r2, r8
    1a08:	4620      	mov	r0, r4
    1a0a:	f010 fe2e 	bl	1266a <nvs_flash_block_cmp>
			if (rc <= 0) {
    1a0e:	2800      	cmp	r0, #0
    1a10:	dc03      	bgt.n	1a1a <nvs_write+0xaa>
    1a12:	4605      	mov	r5, r0
    1a14:	e7bb      	b.n	198e <nvs_write+0x1e>
			if (wlk_ate.len == 0U) {
    1a16:	2b00      	cmp	r3, #0
    1a18:	d0b9      	beq.n	198e <nvs_write+0x1e>
	data_size = nvs_al_size(fs, len);
    1a1a:	4631      	mov	r1, r6
    1a1c:	4658      	mov	r0, fp
    1a1e:	f010 fe62 	bl	126e6 <nvs_al_size.isra.0>
	if (data_size) {
    1a22:	4607      	mov	r7, r0
    1a24:	2800      	cmp	r0, #0
    1a26:	d13f      	bne.n	1aa8 <nvs_write+0x138>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
    1a28:	f104 0a14 	add.w	sl, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
    1a2c:	f04f 33ff 	mov.w	r3, #4294967295
    1a30:	f04f 32ff 	mov.w	r2, #4294967295
    1a34:	4650      	mov	r0, sl
    1a36:	f00d fc7d 	bl	f334 <z_impl_k_mutex_lock>
	gc_count = 0;
    1a3a:	2300      	movs	r3, #0
	fs->ate_wra &= ADDR_SECT_MASK;
    1a3c:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 1b1c <nvs_write+0x1ac>
		if (gc_count == fs->sector_count) {
    1a40:	89e2      	ldrh	r2, [r4, #14]
    1a42:	4293      	cmp	r3, r2
    1a44:	d060      	beq.n	1b08 <nvs_write+0x198>
		if (fs->ate_wra >= fs->data_wra + required_space) {
    1a46:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
    1a4a:	1878      	adds	r0, r7, r1
    1a4c:	4282      	cmp	r2, r0
    1a4e:	d32e      	bcc.n	1aae <nvs_write+0x13e>
	entry.part = 0xff;
    1a50:	23ff      	movs	r3, #255	; 0xff
	nvs_ate_crc8_update(&entry);
    1a52:	a806      	add	r0, sp, #24
	entry.id = id;
    1a54:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.offset = (u16_t)(fs->data_wra & ADDR_OFFS_MASK);
    1a58:	f8ad 101a 	strh.w	r1, [sp, #26]
	entry.len = (u16_t)len;
    1a5c:	f8ad 601c 	strh.w	r6, [sp, #28]
	entry.part = 0xff;
    1a60:	f88d 301e 	strb.w	r3, [sp, #30]
	nvs_ate_crc8_update(&entry);
    1a64:	f010 fe36 	bl	126d4 <nvs_ate_crc8_update>
	if (!len) {
    1a68:	b136      	cbz	r6, 1a78 <nvs_write+0x108>
    1a6a:	4633      	mov	r3, r6
    1a6c:	4642      	mov	r2, r8
    1a6e:	4620      	mov	r0, r4
    1a70:	68a1      	ldr	r1, [r4, #8]
    1a72:	f010 fe97 	bl	127a4 <nvs_flash_al_wrt.part.0>
    1a76:	4605      	mov	r5, r0
	fs->data_wra += nvs_al_size(fs, len);
    1a78:	4631      	mov	r1, r6
    1a7a:	7c20      	ldrb	r0, [r4, #16]
    1a7c:	f010 fe33 	bl	126e6 <nvs_al_size.isra.0>
    1a80:	68a3      	ldr	r3, [r4, #8]
    1a82:	4403      	add	r3, r0
    1a84:	60a3      	str	r3, [r4, #8]
	if (rc) {
    1a86:	2d00      	cmp	r5, #0
    1a88:	d144      	bne.n	1b14 <nvs_write+0x1a4>
	rc = nvs_flash_ate_wrt(fs, &entry);
    1a8a:	4620      	mov	r0, r4
    1a8c:	a906      	add	r1, sp, #24
    1a8e:	f010 fecd 	bl	1282c <nvs_flash_ate_wrt>
	if (rc) {
    1a92:	4605      	mov	r5, r0
    1a94:	2800      	cmp	r0, #0
    1a96:	d13d      	bne.n	1b14 <nvs_write+0x1a4>
	rc = len;
    1a98:	4632      	mov	r2, r6
    1a9a:	9201      	str	r2, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
    1a9c:	4650      	mov	r0, sl
    1a9e:	f00d fd2d 	bl	f4fc <z_impl_k_mutex_unlock>
	return rc;
    1aa2:	9a01      	ldr	r2, [sp, #4]
    1aa4:	4615      	mov	r5, r2
    1aa6:	e772      	b.n	198e <nvs_write+0x1e>
		required_space = data_size + ate_size;
    1aa8:	4457      	add	r7, sl
    1aaa:	b2bf      	uxth	r7, r7
    1aac:	e7bc      	b.n	1a28 <nvs_write+0xb8>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    1aae:	2108      	movs	r1, #8
    1ab0:	7c20      	ldrb	r0, [r4, #16]
    1ab2:	9301      	str	r3, [sp, #4]
    1ab4:	f010 fe17 	bl	126e6 <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
    1ab8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1abc:	f8ad 1018 	strh.w	r1, [sp, #24]
	close_ate.len = 0U;
    1ac0:	2100      	movs	r1, #0
    1ac2:	f8ad 101c 	strh.w	r1, [sp, #28]
	close_ate.offset = (u16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
    1ac6:	1811      	adds	r1, r2, r0
    1ac8:	f8ad 101a 	strh.w	r1, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
    1acc:	89a1      	ldrh	r1, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
    1ace:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
    1ad2:	440a      	add	r2, r1
    1ad4:	1a10      	subs	r0, r2, r0
    1ad6:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
    1ad8:	a806      	add	r0, sp, #24
    1ada:	f010 fdfb 	bl	126d4 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
    1ade:	a906      	add	r1, sp, #24
    1ae0:	4620      	mov	r0, r4
    1ae2:	f010 fea3 	bl	1282c <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
    1ae6:	89e0      	ldrh	r0, [r4, #14]
    1ae8:	1d21      	adds	r1, r4, #4
    1aea:	f010 fe06 	bl	126fa <nvs_sector_advance.isra.0>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    1aee:	6862      	ldr	r2, [r4, #4]
		rc = nvs_gc(fs);
    1af0:	4620      	mov	r0, r4
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    1af2:	ea02 020b 	and.w	r2, r2, fp
    1af6:	60a2      	str	r2, [r4, #8]
		rc = nvs_gc(fs);
    1af8:	f7ff fd76 	bl	15e8 <nvs_gc>
		if (rc) {
    1afc:	4602      	mov	r2, r0
    1afe:	2800      	cmp	r0, #0
    1b00:	d1cb      	bne.n	1a9a <nvs_write+0x12a>
		gc_count++;
    1b02:	9b01      	ldr	r3, [sp, #4]
    1b04:	3301      	adds	r3, #1
		if (gc_count == fs->sector_count) {
    1b06:	e79b      	b.n	1a40 <nvs_write+0xd0>
			rc = -ENOSPC;
    1b08:	f06f 021b 	mvn.w	r2, #27
    1b0c:	e7c5      	b.n	1a9a <nvs_write+0x12a>
		return -EINVAL;
    1b0e:	f06f 0515 	mvn.w	r5, #21
    1b12:	e73c      	b.n	198e <nvs_write+0x1e>
			if (rc) {
    1b14:	462a      	mov	r2, r5
    1b16:	e7c0      	b.n	1a9a <nvs_write+0x12a>
    1b18:	00017c0b 	.word	0x00017c0b
    1b1c:	ffff0000 	.word	0xffff0000

00001b20 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, u16_t id, void *data, size_t len,
		      u16_t cnt)
{
    1b20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    1b24:	461e      	mov	r6, r3
	u32_t wlk_addr, rd_addr;
	u16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
    1b26:	7c43      	ldrb	r3, [r0, #17]
{
    1b28:	4604      	mov	r4, r0
    1b2a:	460f      	mov	r7, r1
    1b2c:	4690      	mov	r8, r2
    1b2e:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
	if (!fs->ready) {
    1b32:	b943      	cbnz	r3, 1b46 <nvs_read_hist+0x26>
		LOG_ERR("NVS not initialized");
    1b34:	4828      	ldr	r0, [pc, #160]	; (1bd8 <nvs_read_hist+0xb8>)
    1b36:	2145      	movs	r1, #69	; 0x45
    1b38:	f010 fae6 	bl	12108 <printk>
		return -EACCES;
    1b3c:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
    1b40:	b004      	add	sp, #16
    1b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    1b46:	2108      	movs	r1, #8
    1b48:	7c00      	ldrb	r0, [r0, #16]
    1b4a:	f010 fdcc 	bl	126e6 <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
    1b4e:	89a3      	ldrh	r3, [r4, #12]
    1b50:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    1b54:	42b3      	cmp	r3, r6
    1b56:	d33b      	bcc.n	1bd0 <nvs_read_hist+0xb0>
	cnt_his = 0U;
    1b58:	f04f 0a00 	mov.w	sl, #0
	wlk_addr = fs->ate_wra;
    1b5c:	6863      	ldr	r3, [r4, #4]
    1b5e:	9301      	str	r3, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    1b60:	4620      	mov	r0, r4
    1b62:	aa02      	add	r2, sp, #8
    1b64:	a901      	add	r1, sp, #4
		rd_addr = wlk_addr;
    1b66:	9d01      	ldr	r5, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    1b68:	f7ff fccc 	bl	1504 <nvs_prev_ate>
		if (rc) {
    1b6c:	2800      	cmp	r0, #0
    1b6e:	d1e7      	bne.n	1b40 <nvs_read_hist+0x20>
		if ((wlk_ate.id == id) &&  (!nvs_ate_crc8_check(&wlk_ate))) {
    1b70:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    1b74:	42bb      	cmp	r3, r7
    1b76:	d107      	bne.n	1b88 <nvs_read_hist+0x68>
    1b78:	a802      	add	r0, sp, #8
    1b7a:	f010 fd9f 	bl	126bc <nvs_ate_crc8_check>
    1b7e:	b918      	cbnz	r0, 1b88 <nvs_read_hist+0x68>
			cnt_his++;
    1b80:	f10a 0a01 	add.w	sl, sl, #1
    1b84:	fa1f fa8a 	uxth.w	sl, sl
		if (wlk_addr == fs->ate_wra) {
    1b88:	6862      	ldr	r2, [r4, #4]
    1b8a:	9b01      	ldr	r3, [sp, #4]
    1b8c:	429a      	cmp	r2, r3
    1b8e:	d018      	beq.n	1bc2 <nvs_read_hist+0xa2>
	while (cnt_his <= cnt) {
    1b90:	45ca      	cmp	sl, r9
    1b92:	d9e5      	bls.n	1b60 <nvs_read_hist+0x40>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    1b94:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    1b98:	b1bb      	cbz	r3, 1bca <nvs_read_hist+0xaa>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    1b9a:	45ca      	cmp	sl, r9
    1b9c:	d315      	bcc.n	1bca <nvs_read_hist+0xaa>
	rd_addr += wlk_ate.offset;
    1b9e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
    1ba2:	0c2d      	lsrs	r5, r5, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    1ba4:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
    1ba6:	ea4f 4505 	mov.w	r5, r5, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    1baa:	bf28      	it	cs
    1bac:	4633      	movcs	r3, r6
    1bae:	4642      	mov	r2, r8
    1bb0:	4620      	mov	r0, r4
    1bb2:	4429      	add	r1, r5
    1bb4:	f010 fd4b 	bl	1264e <nvs_flash_rd>
	if (rc) {
    1bb8:	2800      	cmp	r0, #0
    1bba:	d1c1      	bne.n	1b40 <nvs_read_hist+0x20>
	return wlk_ate.len;
    1bbc:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    1bc0:	e7be      	b.n	1b40 <nvs_read_hist+0x20>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    1bc2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    1bc6:	42bb      	cmp	r3, r7
    1bc8:	d0e4      	beq.n	1b94 <nvs_read_hist+0x74>
		return -ENOENT;
    1bca:	f06f 0001 	mvn.w	r0, #1
    1bce:	e7b7      	b.n	1b40 <nvs_read_hist+0x20>
		return -EINVAL;
    1bd0:	f06f 0015 	mvn.w	r0, #21
    1bd4:	e7b4      	b.n	1b40 <nvs_read_hist+0x20>
    1bd6:	bf00      	nop
    1bd8:	00017c0b 	.word	0x00017c0b

00001bdc <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    1bdc:	4b09      	ldr	r3, [pc, #36]	; (1c04 <get_flash_area_from_id+0x28>)
{
    1bde:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
    1be0:	681d      	ldr	r5, [r3, #0]
		if (flash_map[i].fa_id == idx) {
    1be2:	4b09      	ldr	r3, [pc, #36]	; (1c08 <get_flash_area_from_id+0x2c>)
{
    1be4:	4602      	mov	r2, r0
		if (flash_map[i].fa_id == idx) {
    1be6:	681c      	ldr	r4, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
    1be8:	2300      	movs	r3, #0
    1bea:	429d      	cmp	r5, r3
    1bec:	dc01      	bgt.n	1bf2 <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
    1bee:	2000      	movs	r0, #0
}
    1bf0:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
    1bf2:	0119      	lsls	r1, r3, #4
    1bf4:	5c61      	ldrb	r1, [r4, r1]
    1bf6:	eb04 1003 	add.w	r0, r4, r3, lsl #4
    1bfa:	4291      	cmp	r1, r2
    1bfc:	d0f8      	beq.n	1bf0 <get_flash_area_from_id+0x14>
	for (int i = 0; i < flash_map_entries; i++) {
    1bfe:	3301      	adds	r3, #1
    1c00:	e7f3      	b.n	1bea <get_flash_area_from_id+0xe>
    1c02:	bf00      	nop
    1c04:	00016f68 	.word	0x00016f68
    1c08:	2000017c 	.word	0x2000017c

00001c0c <flash_area_open>:

int flash_area_open(u8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    1c0c:	4b08      	ldr	r3, [pc, #32]	; (1c30 <flash_area_open+0x24>)
{
    1c0e:	b510      	push	{r4, lr}
	if (flash_map == NULL) {
    1c10:	681b      	ldr	r3, [r3, #0]
{
    1c12:	460c      	mov	r4, r1
	if (flash_map == NULL) {
    1c14:	b12b      	cbz	r3, 1c22 <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
    1c16:	f7ff ffe1 	bl	1bdc <get_flash_area_from_id>
	if (area == NULL) {
    1c1a:	b128      	cbz	r0, 1c28 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
    1c1c:	6020      	str	r0, [r4, #0]
	return 0;
    1c1e:	2000      	movs	r0, #0
}
    1c20:	bd10      	pop	{r4, pc}
		return -EACCES;
    1c22:	f06f 000c 	mvn.w	r0, #12
    1c26:	e7fb      	b.n	1c20 <flash_area_open+0x14>
		return -ENOENT;
    1c28:	f06f 0001 	mvn.w	r0, #1
    1c2c:	e7f8      	b.n	1c20 <flash_area_open+0x14>
    1c2e:	bf00      	nop
    1c30:	2000017c 	.word	0x2000017c

00001c34 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, u32_t *cnt, struct flash_sector *ret)
{
    1c34:	b530      	push	{r4, r5, lr}
    1c36:	b089      	sub	sp, #36	; 0x24
    1c38:	460c      	mov	r4, r1
    1c3a:	4615      	mov	r5, r2
	cb_data->area_idx = idx;
    1c3c:	9001      	str	r0, [sp, #4]
	fa = get_flash_area_from_id(idx);
    1c3e:	f7ff ffcd 	bl	1bdc <get_flash_area_from_id>
	if (fa == NULL) {
    1c42:	b1b8      	cbz	r0, 1c74 <flash_area_get_sectors+0x40>
	cb_data->area_off = fa->fa_off;
    1c44:	6843      	ldr	r3, [r0, #4]
	cb_data->ret_len = *cnt;
    1c46:	6822      	ldr	r2, [r4, #0]
	cb_data->area_off = fa->fa_off;
    1c48:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    1c4a:	6883      	ldr	r3, [r0, #8]
	flash_dev = device_get_binding(fa->fa_dev_name);
    1c4c:	68c0      	ldr	r0, [r0, #12]
	cb_data->ret = ret;
    1c4e:	e9cd 3503 	strd	r3, r5, [sp, #12]
	cb_data->ret_idx = 0U;
    1c52:	2300      	movs	r3, #0
	cb_data->status = 0;
    1c54:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    1c58:	9305      	str	r3, [sp, #20]
    1c5a:	f00c ffa3 	bl	eba4 <z_impl_device_get_binding>
	if (flash_dev == NULL) {
    1c5e:	b160      	cbz	r0, 1c7a <flash_area_get_sectors+0x46>
	flash_page_foreach(flash_dev, cb, cb_data);
    1c60:	4907      	ldr	r1, [pc, #28]	; (1c80 <flash_area_get_sectors+0x4c>)
    1c62:	aa01      	add	r2, sp, #4
    1c64:	f013 ff7b 	bl	15b5e <flash_page_foreach>
	if (cb_data->status == 0) {
    1c68:	9807      	ldr	r0, [sp, #28]
    1c6a:	b908      	cbnz	r0, 1c70 <flash_area_get_sectors+0x3c>
		*cnt = cb_data->ret_idx;
    1c6c:	9b05      	ldr	r3, [sp, #20]
    1c6e:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    1c70:	b009      	add	sp, #36	; 0x24
    1c72:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    1c74:	f06f 0015 	mvn.w	r0, #21
    1c78:	e7fa      	b.n	1c70 <flash_area_get_sectors+0x3c>
		return -ENODEV;
    1c7a:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    1c7e:	e7f7      	b.n	1c70 <flash_area_get_sectors+0x3c>
    1c80:	00012865 	.word	0x00012865

00001c84 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    1c84:	4b10      	ldr	r3, [pc, #64]	; (1cc8 <settings_save_one+0x44>)
{
    1c86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
    1c8a:	681c      	ldr	r4, [r3, #0]
{
    1c8c:	4605      	mov	r5, r0
    1c8e:	460e      	mov	r6, r1
    1c90:	4617      	mov	r7, r2
	if (!cs) {
    1c92:	b1ac      	cbz	r4, 1cc0 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
    1c94:	f04f 32ff 	mov.w	r2, #4294967295
    1c98:	f04f 33ff 	mov.w	r3, #4294967295
    1c9c:	480b      	ldr	r0, [pc, #44]	; (1ccc <settings_save_one+0x48>)
    1c9e:	f00d fb49 	bl	f334 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    1ca2:	6863      	ldr	r3, [r4, #4]
    1ca4:	4632      	mov	r2, r6
    1ca6:	f8d3 8008 	ldr.w	r8, [r3, #8]
    1caa:	4629      	mov	r1, r5
    1cac:	463b      	mov	r3, r7
    1cae:	4620      	mov	r0, r4
    1cb0:	47c0      	blx	r8
    1cb2:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    1cb4:	4805      	ldr	r0, [pc, #20]	; (1ccc <settings_save_one+0x48>)
    1cb6:	f00d fc21 	bl	f4fc <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    1cba:	4620      	mov	r0, r4
    1cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    1cc0:	f06f 0401 	mvn.w	r4, #1
    1cc4:	e7f9      	b.n	1cba <settings_save_one+0x36>
    1cc6:	bf00      	nop
    1cc8:	20000858 	.word	0x20000858
    1ccc:	20000484 	.word	0x20000484

00001cd0 <settings_src_register>:
	return node->next;
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
    1cd0:	2300      	movs	r3, #0
    1cd2:	6003      	str	r3, [r0, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    1cd4:	4b04      	ldr	r3, [pc, #16]	; (1ce8 <settings_src_register+0x18>)
    1cd6:	685a      	ldr	r2, [r3, #4]
    1cd8:	b912      	cbnz	r2, 1ce0 <settings_src_register+0x10>
	list->head = node;
    1cda:	e9c3 0000 	strd	r0, r0, [r3]
}
    1cde:	4770      	bx	lr
	parent->next = child;
    1ce0:	6010      	str	r0, [r2, #0]
	list->tail = node;
    1ce2:	6058      	str	r0, [r3, #4]
}
    1ce4:	4770      	bx	lr
    1ce6:	bf00      	nop
    1ce8:	20000850 	.word	0x20000850

00001cec <settings_dst_register>:
	settings_save_dst = cs;
    1cec:	4b01      	ldr	r3, [pc, #4]	; (1cf4 <settings_dst_register+0x8>)
    1cee:	6018      	str	r0, [r3, #0]
}
    1cf0:	4770      	bx	lr
    1cf2:	bf00      	nop
    1cf4:	20000858 	.word	0x20000858

00001cf8 <settings_load_subtree>:
	const struct settings_load_arg arg = {
    1cf8:	2300      	movs	r3, #0
{
    1cfa:	b530      	push	{r4, r5, lr}
    1cfc:	b085      	sub	sp, #20
    1cfe:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
    1d00:	e9cd 3302 	strd	r3, r3, [sp, #8]
    1d04:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    1d06:	f04f 33ff 	mov.w	r3, #4294967295
    1d0a:	f04f 32ff 	mov.w	r2, #4294967295
    1d0e:	480d      	ldr	r0, [pc, #52]	; (1d44 <settings_load_subtree+0x4c>)
    1d10:	f00d fb10 	bl	f334 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    1d14:	4b0c      	ldr	r3, [pc, #48]	; (1d48 <settings_load_subtree+0x50>)
    1d16:	681c      	ldr	r4, [r3, #0]
    1d18:	2c00      	cmp	r4, #0
    1d1a:	bf38      	it	cc
    1d1c:	2400      	movcc	r4, #0
    1d1e:	b13c      	cbz	r4, 1d30 <settings_load_subtree+0x38>
		cs->cs_itf->csi_load(cs, &arg);
    1d20:	6863      	ldr	r3, [r4, #4]
    1d22:	4620      	mov	r0, r4
    1d24:	681b      	ldr	r3, [r3, #0]
    1d26:	a901      	add	r1, sp, #4
    1d28:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1d2a:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    1d2c:	2c00      	cmp	r4, #0
    1d2e:	d1f6      	bne.n	1d1e <settings_load_subtree+0x26>
	rc = settings_commit_subtree(subtree);
    1d30:	4628      	mov	r0, r5
    1d32:	f000 f8e1 	bl	1ef8 <settings_commit_subtree>
    1d36:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    1d38:	4802      	ldr	r0, [pc, #8]	; (1d44 <settings_load_subtree+0x4c>)
    1d3a:	f00d fbdf 	bl	f4fc <z_impl_k_mutex_unlock>
}
    1d3e:	4620      	mov	r0, r4
    1d40:	b005      	add	sp, #20
    1d42:	bd30      	pop	{r4, r5, pc}
    1d44:	20000484 	.word	0x20000484
    1d48:	20000850 	.word	0x20000850

00001d4c <settings_load_subtree_direct>:
{
    1d4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
    1d4e:	e9cd 0101 	strd	r0, r1, [sp, #4]
    1d52:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
    1d54:	f04f 33ff 	mov.w	r3, #4294967295
    1d58:	f04f 32ff 	mov.w	r2, #4294967295
    1d5c:	480b      	ldr	r0, [pc, #44]	; (1d8c <settings_load_subtree_direct+0x40>)
    1d5e:	f00d fae9 	bl	f334 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    1d62:	4b0b      	ldr	r3, [pc, #44]	; (1d90 <settings_load_subtree_direct+0x44>)
    1d64:	681c      	ldr	r4, [r3, #0]
    1d66:	2c00      	cmp	r4, #0
    1d68:	bf38      	it	cc
    1d6a:	2400      	movcc	r4, #0
    1d6c:	b13c      	cbz	r4, 1d7e <settings_load_subtree_direct+0x32>
		cs->cs_itf->csi_load(cs, &arg);
    1d6e:	6863      	ldr	r3, [r4, #4]
    1d70:	4620      	mov	r0, r4
    1d72:	681b      	ldr	r3, [r3, #0]
    1d74:	a901      	add	r1, sp, #4
    1d76:	4798      	blx	r3
    1d78:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    1d7a:	2c00      	cmp	r4, #0
    1d7c:	d1f6      	bne.n	1d6c <settings_load_subtree_direct+0x20>
	return z_impl_k_mutex_unlock(mutex);
    1d7e:	4803      	ldr	r0, [pc, #12]	; (1d8c <settings_load_subtree_direct+0x40>)
    1d80:	f00d fbbc 	bl	f4fc <z_impl_k_mutex_unlock>
}
    1d84:	2000      	movs	r0, #0
    1d86:	b004      	add	sp, #16
    1d88:	bd10      	pop	{r4, pc}
    1d8a:	bf00      	nop
    1d8c:	20000484 	.word	0x20000484
    1d90:	20000850 	.word	0x20000850

00001d94 <settings_store_init>:
	list->head = NULL;
    1d94:	2200      	movs	r2, #0
    1d96:	4b02      	ldr	r3, [pc, #8]	; (1da0 <settings_store_init+0xc>)
	list->tail = NULL;
    1d98:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    1d9c:	4770      	bx	lr
    1d9e:	bf00      	nop
    1da0:	20000850 	.word	0x20000850

00001da4 <settings_init>:
	list->head = NULL;
    1da4:	2200      	movs	r2, #0
    1da6:	4b02      	ldr	r3, [pc, #8]	; (1db0 <settings_init+0xc>)
	list->tail = NULL;
    1da8:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
    1dac:	f7ff bff2 	b.w	1d94 <settings_store_init>
    1db0:	2000085c 	.word	0x2000085c

00001db4 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
    1db4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    1db8:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
    1dba:	460e      	mov	r6, r1
    1dbc:	b109      	cbz	r1, 1dc2 <settings_parse_and_lookup+0xe>
		*next = NULL;
    1dbe:	2300      	movs	r3, #0
    1dc0:	600b      	str	r3, [r1, #0]
	}

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    1dc2:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 1e74 <settings_parse_and_lookup+0xc0>
    1dc6:	2500      	movs	r5, #0
    1dc8:	46c2      	mov	sl, r8
    1dca:	4c25      	ldr	r4, [pc, #148]	; (1e60 <settings_parse_and_lookup+0xac>)
    1dcc:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1e78 <settings_parse_and_lookup+0xc4>
    1dd0:	4544      	cmp	r4, r8
    1dd2:	d90c      	bls.n	1dee <settings_parse_and_lookup+0x3a>
    1dd4:	4923      	ldr	r1, [pc, #140]	; (1e64 <settings_parse_and_lookup+0xb0>)
    1dd6:	2394      	movs	r3, #148	; 0x94
    1dd8:	464a      	mov	r2, r9
    1dda:	4823      	ldr	r0, [pc, #140]	; (1e68 <settings_parse_and_lookup+0xb4>)
    1ddc:	f010 f994 	bl	12108 <printk>
    1de0:	4822      	ldr	r0, [pc, #136]	; (1e6c <settings_parse_and_lookup+0xb8>)
    1de2:	f010 f991 	bl	12108 <printk>
    1de6:	2194      	movs	r1, #148	; 0x94
    1de8:	4648      	mov	r0, r9
    1dea:	f010 fc23 	bl	12634 <assert_post_action>
    1dee:	4554      	cmp	r4, sl
    1df0:	d308      	bcc.n	1e04 <settings_parse_and_lookup+0x50>
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    1df2:	4b1f      	ldr	r3, [pc, #124]	; (1e70 <settings_parse_and_lookup+0xbc>)
    1df4:	681c      	ldr	r4, [r3, #0]
    1df6:	b10c      	cbz	r4, 1dfc <settings_parse_and_lookup+0x48>
    1df8:	3c14      	subs	r4, #20
    1dfa:	b9c4      	cbnz	r4, 1e2e <settings_parse_and_lookup+0x7a>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
    1dfc:	4628      	mov	r0, r5
    1dfe:	b002      	add	sp, #8
    1e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    1e04:	4638      	mov	r0, r7
    1e06:	6821      	ldr	r1, [r4, #0]
    1e08:	aa01      	add	r2, sp, #4
    1e0a:	f010 fd50 	bl	128ae <settings_name_steq>
    1e0e:	b160      	cbz	r0, 1e2a <settings_parse_and_lookup+0x76>
		if (!bestmatch) {
    1e10:	b925      	cbnz	r5, 1e1c <settings_parse_and_lookup+0x68>
			if (next) {
    1e12:	b10e      	cbz	r6, 1e18 <settings_parse_and_lookup+0x64>
				*next = tmpnext;
    1e14:	9b01      	ldr	r3, [sp, #4]
    1e16:	6033      	str	r3, [r6, #0]
    1e18:	4625      	mov	r5, r4
    1e1a:	e006      	b.n	1e2a <settings_parse_and_lookup+0x76>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    1e1c:	2200      	movs	r2, #0
    1e1e:	6829      	ldr	r1, [r5, #0]
    1e20:	6820      	ldr	r0, [r4, #0]
    1e22:	f010 fd44 	bl	128ae <settings_name_steq>
    1e26:	2800      	cmp	r0, #0
    1e28:	d1f3      	bne.n	1e12 <settings_parse_and_lookup+0x5e>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    1e2a:	3414      	adds	r4, #20
    1e2c:	e7d0      	b.n	1dd0 <settings_parse_and_lookup+0x1c>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    1e2e:	4638      	mov	r0, r7
    1e30:	6821      	ldr	r1, [r4, #0]
    1e32:	aa01      	add	r2, sp, #4
    1e34:	f010 fd3b 	bl	128ae <settings_name_steq>
    1e38:	b160      	cbz	r0, 1e54 <settings_parse_and_lookup+0xa0>
		if (!bestmatch) {
    1e3a:	b925      	cbnz	r5, 1e46 <settings_parse_and_lookup+0x92>
			if (next) {
    1e3c:	b10e      	cbz	r6, 1e42 <settings_parse_and_lookup+0x8e>
				*next = tmpnext;
    1e3e:	9b01      	ldr	r3, [sp, #4]
    1e40:	6033      	str	r3, [r6, #0]
    1e42:	4625      	mov	r5, r4
    1e44:	e006      	b.n	1e54 <settings_parse_and_lookup+0xa0>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    1e46:	2200      	movs	r2, #0
    1e48:	6829      	ldr	r1, [r5, #0]
    1e4a:	6820      	ldr	r0, [r4, #0]
    1e4c:	f010 fd2f 	bl	128ae <settings_name_steq>
    1e50:	2800      	cmp	r0, #0
    1e52:	d1f3      	bne.n	1e3c <settings_parse_and_lookup+0x88>
Z_GENLIST_PEEK_NEXT(slist, snode)
    1e54:	f114 0f14 	cmn.w	r4, #20
    1e58:	d0d0      	beq.n	1dfc <settings_parse_and_lookup+0x48>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1e5a:	6964      	ldr	r4, [r4, #20]
    1e5c:	e7cb      	b.n	1df6 <settings_parse_and_lookup+0x42>
    1e5e:	bf00      	nop
    1e60:	00016d0c 	.word	0x00016d0c
    1e64:	00017d5a 	.word	0x00017d5a
    1e68:	00017d82 	.word	0x00017d82
    1e6c:	00017d9f 	.word	0x00017d9f
    1e70:	2000085c 	.word	0x2000085c
    1e74:	00016d70 	.word	0x00016d70
    1e78:	00017d28 	.word	0x00017d28

00001e7c <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
    1e7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1e80:	b085      	sub	sp, #20
    1e82:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    1e86:	4604      	mov	r4, r0
    1e88:	460d      	mov	r5, r1
    1e8a:	4616      	mov	r6, r2
    1e8c:	461f      	mov	r7, r3
	int rc;
	const char *name_key = name;
    1e8e:	9003      	str	r0, [sp, #12]

	if (load_arg && load_arg->subtree &&
    1e90:	f1b8 0f00 	cmp.w	r8, #0
    1e94:	d018      	beq.n	1ec8 <settings_call_set_handler+0x4c>
    1e96:	f8d8 1000 	ldr.w	r1, [r8]
    1e9a:	b181      	cbz	r1, 1ebe <settings_call_set_handler+0x42>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
    1e9c:	aa03      	add	r2, sp, #12
    1e9e:	f010 fd06 	bl	128ae <settings_name_steq>
	if (load_arg && load_arg->subtree &&
    1ea2:	b960      	cbnz	r0, 1ebe <settings_call_set_handler+0x42>

		if (rc != 0) {
			LOG_ERR("set-value failure. key: %s error(%d)",
				log_strdup(name), rc);
			/* Ignoring the error */
			rc = 0;
    1ea4:	2000      	movs	r0, #0
    1ea6:	e007      	b.n	1eb8 <settings_call_set_handler+0x3c>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
    1ea8:	f8d8 3008 	ldr.w	r3, [r8, #8]
    1eac:	4632      	mov	r2, r6
    1eae:	9300      	str	r3, [sp, #0]
    1eb0:	4629      	mov	r1, r5
    1eb2:	463b      	mov	r3, r7
    1eb4:	9803      	ldr	r0, [sp, #12]
    1eb6:	47c8      	blx	r9
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
    1eb8:	b005      	add	sp, #20
    1eba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (load_arg && load_arg->cb) {
    1ebe:	f8d8 9004 	ldr.w	r9, [r8, #4]
    1ec2:	f1b9 0f00 	cmp.w	r9, #0
    1ec6:	d1ef      	bne.n	1ea8 <settings_call_set_handler+0x2c>
		ch = settings_parse_and_lookup(name, &name_key);
    1ec8:	4620      	mov	r0, r4
    1eca:	a903      	add	r1, sp, #12
    1ecc:	f7ff ff72 	bl	1db4 <settings_parse_and_lookup>
		if (!ch) {
    1ed0:	2800      	cmp	r0, #0
    1ed2:	d0e7      	beq.n	1ea4 <settings_call_set_handler+0x28>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
    1ed4:	463b      	mov	r3, r7
    1ed6:	f8d0 8008 	ldr.w	r8, [r0, #8]
    1eda:	4632      	mov	r2, r6
    1edc:	4629      	mov	r1, r5
    1ede:	9803      	ldr	r0, [sp, #12]
    1ee0:	47c0      	blx	r8
		if (rc != 0) {
    1ee2:	4603      	mov	r3, r0
    1ee4:	2800      	cmp	r0, #0
    1ee6:	d0dd      	beq.n	1ea4 <settings_call_set_handler+0x28>
			LOG_ERR("set-value failure. key: %s error(%d)",
    1ee8:	4622      	mov	r2, r4
    1eea:	2145      	movs	r1, #69	; 0x45
    1eec:	4801      	ldr	r0, [pc, #4]	; (1ef4 <settings_call_set_handler+0x78>)
    1eee:	f010 f90b 	bl	12108 <printk>
    1ef2:	e7d7      	b.n	1ea4 <settings_call_set_handler+0x28>
    1ef4:	00017dbe 	.word	0x00017dbe

00001ef8 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
    1ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int rc;
	int rc2;

	rc = 0;

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    1efc:	4f23      	ldr	r7, [pc, #140]	; (1f8c <settings_commit_subtree+0x94>)
{
    1efe:	4606      	mov	r6, r0
	rc = 0;
    1f00:	2500      	movs	r5, #0
    1f02:	46b9      	mov	r9, r7
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    1f04:	4c22      	ldr	r4, [pc, #136]	; (1f90 <settings_commit_subtree+0x98>)
    1f06:	f8df 809c 	ldr.w	r8, [pc, #156]	; 1fa4 <settings_commit_subtree+0xac>
    1f0a:	42bc      	cmp	r4, r7
    1f0c:	d90c      	bls.n	1f28 <settings_commit_subtree+0x30>
    1f0e:	4921      	ldr	r1, [pc, #132]	; (1f94 <settings_commit_subtree+0x9c>)
    1f10:	23f4      	movs	r3, #244	; 0xf4
    1f12:	4642      	mov	r2, r8
    1f14:	4820      	ldr	r0, [pc, #128]	; (1f98 <settings_commit_subtree+0xa0>)
    1f16:	f010 f8f7 	bl	12108 <printk>
    1f1a:	4820      	ldr	r0, [pc, #128]	; (1f9c <settings_commit_subtree+0xa4>)
    1f1c:	f010 f8f4 	bl	12108 <printk>
    1f20:	21f4      	movs	r1, #244	; 0xf4
    1f22:	4640      	mov	r0, r8
    1f24:	f010 fb86 	bl	12634 <assert_post_action>
    1f28:	454c      	cmp	r4, r9
    1f2a:	d307      	bcc.n	1f3c <settings_commit_subtree+0x44>
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    1f2c:	4b1c      	ldr	r3, [pc, #112]	; (1fa0 <settings_commit_subtree+0xa8>)
    1f2e:	681c      	ldr	r4, [r3, #0]
    1f30:	b10c      	cbz	r4, 1f36 <settings_commit_subtree+0x3e>
    1f32:	3c14      	subs	r4, #20
    1f34:	b9a4      	cbnz	r4, 1f60 <settings_commit_subtree+0x68>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
    1f36:	4628      	mov	r0, r5
    1f38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    1f3c:	b91e      	cbnz	r6, 1f46 <settings_commit_subtree+0x4e>
		if (ch->h_commit) {
    1f3e:	68e3      	ldr	r3, [r4, #12]
    1f40:	b94b      	cbnz	r3, 1f56 <settings_commit_subtree+0x5e>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    1f42:	3414      	adds	r4, #20
    1f44:	e7e1      	b.n	1f0a <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    1f46:	2200      	movs	r2, #0
    1f48:	4631      	mov	r1, r6
    1f4a:	6820      	ldr	r0, [r4, #0]
    1f4c:	f010 fcaf 	bl	128ae <settings_name_steq>
    1f50:	2800      	cmp	r0, #0
    1f52:	d1f4      	bne.n	1f3e <settings_commit_subtree+0x46>
    1f54:	e7f5      	b.n	1f42 <settings_commit_subtree+0x4a>
			rc2 = ch->h_commit();
    1f56:	4798      	blx	r3
				rc = rc2;
    1f58:	2d00      	cmp	r5, #0
    1f5a:	bf08      	it	eq
    1f5c:	4605      	moveq	r5, r0
    1f5e:	e7f0      	b.n	1f42 <settings_commit_subtree+0x4a>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    1f60:	b936      	cbnz	r6, 1f70 <settings_commit_subtree+0x78>
		if (ch->h_commit) {
    1f62:	68e3      	ldr	r3, [r4, #12]
    1f64:	b963      	cbnz	r3, 1f80 <settings_commit_subtree+0x88>
Z_GENLIST_PEEK_NEXT(slist, snode)
    1f66:	f114 0f14 	cmn.w	r4, #20
    1f6a:	d0e4      	beq.n	1f36 <settings_commit_subtree+0x3e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1f6c:	6964      	ldr	r4, [r4, #20]
    1f6e:	e7df      	b.n	1f30 <settings_commit_subtree+0x38>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    1f70:	2200      	movs	r2, #0
    1f72:	4631      	mov	r1, r6
    1f74:	6820      	ldr	r0, [r4, #0]
    1f76:	f010 fc9a 	bl	128ae <settings_name_steq>
    1f7a:	2800      	cmp	r0, #0
    1f7c:	d1f1      	bne.n	1f62 <settings_commit_subtree+0x6a>
    1f7e:	e7f2      	b.n	1f66 <settings_commit_subtree+0x6e>
			rc2 = ch->h_commit();
    1f80:	4798      	blx	r3
				rc = rc2;
    1f82:	2d00      	cmp	r5, #0
    1f84:	bf08      	it	eq
    1f86:	4605      	moveq	r5, r0
    1f88:	e7ed      	b.n	1f66 <settings_commit_subtree+0x6e>
    1f8a:	bf00      	nop
    1f8c:	00016d70 	.word	0x00016d70
    1f90:	00016d0c 	.word	0x00016d0c
    1f94:	00017d5a 	.word	0x00017d5a
    1f98:	00017d82 	.word	0x00017d82
    1f9c:	00017d9f 	.word	0x00017d9f
    1fa0:	2000085c 	.word	0x2000085c
    1fa4:	00017d28 	.word	0x00017d28

00001fa8 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
    1fa8:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
    1faa:	4c06      	ldr	r4, [pc, #24]	; (1fc4 <settings_subsys_init+0x1c>)
    1fac:	7823      	ldrb	r3, [r4, #0]
    1fae:	b93b      	cbnz	r3, 1fc0 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
    1fb0:	f7ff fef8 	bl	1da4 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
    1fb4:	f000 f864 	bl	2080 <settings_backend_init>

	if (!err) {
    1fb8:	b908      	cbnz	r0, 1fbe <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
    1fba:	2301      	movs	r3, #1
    1fbc:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
    1fbe:	bd10      	pop	{r4, pc}
		return 0;
    1fc0:	2000      	movs	r0, #0
    1fc2:	e7fc      	b.n	1fbe <settings_subsys_init+0x16>
    1fc4:	20001e87 	.word	0x20001e87

00001fc8 <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
    1fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1fcc:	4680      	mov	r8, r0
    1fce:	4689      	mov	r9, r1
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	u16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
    1fd0:	8e84      	ldrh	r4, [r0, #52]	; 0x34
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
    1fd2:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 207c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x7c>
	name_id = cf->last_name_id + 1;
    1fd6:	3401      	adds	r4, #1
{
    1fd8:	b098      	sub	sp, #96	; 0x60
	name_id = cf->last_name_id + 1;
    1fda:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    1fdc:	f100 0608 	add.w	r6, r0, #8
		name_id--;
    1fe0:	1e65      	subs	r5, r4, #1
    1fe2:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
    1fe4:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    1fe8:	d045      	beq.n	2076 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x76>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    1fea:	234a      	movs	r3, #74	; 0x4a
    1fec:	4629      	mov	r1, r5
    1fee:	aa05      	add	r2, sp, #20
    1ff0:	4630      	mov	r0, r6
    1ff2:	f010 fc30 	bl	12856 <nvs_read>
    1ff6:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
    1ffa:	343f      	adds	r4, #63	; 0x3f
    1ffc:	b2a4      	uxth	r4, r4
    1ffe:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    2000:	4621      	mov	r1, r4
    2002:	2301      	movs	r3, #1
    2004:	4630      	mov	r0, r6
    2006:	f10d 020b 	add.w	r2, sp, #11
    200a:	f010 fc24 	bl	12856 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
    200e:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    2010:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
    2012:	dc03      	bgt.n	201c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1c>
    2014:	2800      	cmp	r0, #0
    2016:	dc03      	bgt.n	2020 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x20>
{
    2018:	462c      	mov	r4, r5
    201a:	e7e1      	b.n	1fe0 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
    201c:	2800      	cmp	r0, #0
    201e:	dc16      	bgt.n	204e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4e>
			if (name_id == cf->last_name_id) {
    2020:	f8b8 3034 	ldrh.w	r3, [r8, #52]	; 0x34
    2024:	42ab      	cmp	r3, r5
    2026:	d109      	bne.n	203c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3c>
				cf->last_name_id--;
    2028:	4642      	mov	r2, r8
    202a:	1e6b      	subs	r3, r5, #1
    202c:	f822 3f34 	strh.w	r3, [r2, #52]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
    2030:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    2034:	2302      	movs	r3, #2
    2036:	4630      	mov	r0, r6
    2038:	f7ff fc9a 	bl	1970 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
    203c:	4629      	mov	r1, r5
    203e:	4630      	mov	r0, r6
    2040:	f010 fc05 	bl	1284e <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
    2044:	4621      	mov	r1, r4
    2046:	4630      	mov	r0, r6
    2048:	f010 fc01 	bl	1284e <nvs_delete>
			continue;
    204c:	e7e4      	b.n	2018 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x18>
		name[rc1] = '\0';
    204e:	ab18      	add	r3, sp, #96	; 0x60
    2050:	441f      	add	r7, r3
    2052:	2300      	movs	r3, #0
		ret = settings_call_set_handler(
    2054:	4652      	mov	r2, sl
		name[rc1] = '\0';
    2056:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
    205a:	a805      	add	r0, sp, #20
    205c:	f8cd 9000 	str.w	r9, [sp]
    2060:	ab03      	add	r3, sp, #12
		read_fn_arg.fs = &cf->cf_nvs;
    2062:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
    2064:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
    2068:	f7ff ff08 	bl	1e7c <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
    206c:	2800      	cmp	r0, #0
    206e:	d0d3      	beq.n	2018 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x18>
			break;
		}
	}
	return ret;
}
    2070:	b018      	add	sp, #96	; 0x60
    2072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2076:	2000      	movs	r0, #0
	return ret;
    2078:	e7fa      	b.n	2070 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x70>
    207a:	bf00      	nop
    207c:	00012921 	.word	0x00012921

00002080 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
    2080:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	u16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	u32_t sector_cnt = 1;
    2082:	2501      	movs	r5, #1

	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
    2084:	4669      	mov	r1, sp
    2086:	4628      	mov	r0, r5
	u32_t sector_cnt = 1;
    2088:	9501      	str	r5, [sp, #4]
	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
    208a:	f7ff fdbf 	bl	1c0c <flash_area_open>
	if (rc) {
    208e:	4604      	mov	r4, r0
    2090:	2800      	cmp	r0, #0
    2092:	d136      	bne.n	2102 <settings_backend_init+0x82>
		return rc;
	}

	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
    2094:	4628      	mov	r0, r5
    2096:	aa02      	add	r2, sp, #8
    2098:	a901      	add	r1, sp, #4
    209a:	f7ff fdcb 	bl	1c34 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
    209e:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
    20a2:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
    20a4:	d02d      	beq.n	2102 <settings_backend_init+0x82>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
    20a6:	b138      	cbz	r0, 20b8 <settings_backend_init+0x38>
    20a8:	340c      	adds	r4, #12
    20aa:	d005      	beq.n	20b8 <settings_backend_init+0x38>
		k_panic();
    20ac:	4040      	eors	r0, r0
    20ae:	f380 8811 	msr	BASEPRI, r0
    20b2:	f04f 0004 	mov.w	r0, #4
    20b6:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
    20b8:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
    20ba:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
    20be:	d223      	bcs.n	2108 <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
    20c0:	2300      	movs	r3, #0
	size_t nvs_sector_size, nvs_size = 0;
    20c2:	4618      	mov	r0, r3
		if (nvs_size > fa->fa_size) {
    20c4:	9a00      	ldr	r2, [sp, #0]
    20c6:	6895      	ldr	r5, [r2, #8]
		nvs_size += nvs_sector_size;
    20c8:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
    20ca:	4285      	cmp	r5, r0
    20cc:	b29c      	uxth	r4, r3
    20ce:	d303      	bcc.n	20d8 <settings_backend_init+0x58>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
    20d0:	3301      	adds	r3, #1
    20d2:	2b08      	cmp	r3, #8
    20d4:	d1f8      	bne.n	20c8 <settings_backend_init+0x48>
    20d6:	461c      	mov	r4, r3
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
    20d8:	4d0d      	ldr	r5, [pc, #52]	; (2110 <settings_backend_init+0x90>)
	default_settings_nvs.cf_nvs.sector_count = cnt;
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
    20da:	6853      	ldr	r3, [r2, #4]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;

	rc = settings_nvs_backend_init(&default_settings_nvs);
    20dc:	4628      	mov	r0, r5
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
    20de:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
    20e0:	68d3      	ldr	r3, [r2, #12]
	default_settings_nvs.cf_nvs.sector_count = cnt;
    20e2:	82ec      	strh	r4, [r5, #22]
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
    20e4:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
    20e6:	63ab      	str	r3, [r5, #56]	; 0x38
	rc = settings_nvs_backend_init(&default_settings_nvs);
    20e8:	f010 fcaf 	bl	12a4a <settings_nvs_backend_init>
	if (rc) {
    20ec:	4604      	mov	r4, r0
    20ee:	b940      	cbnz	r0, 2102 <settings_backend_init+0x82>
	cf->cf_store.cs_itf = &settings_nvs_itf;
    20f0:	4e08      	ldr	r6, [pc, #32]	; (2114 <settings_backend_init+0x94>)
	settings_src_register(&cf->cf_store);
    20f2:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
    20f4:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
    20f6:	f7ff fdeb 	bl	1cd0 <settings_src_register>
	settings_dst_register(&cf->cf_store);
    20fa:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
    20fc:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
    20fe:	f7ff fdf5 	bl	1cec <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
    2102:	4620      	mov	r0, r4
    2104:	b004      	add	sp, #16
    2106:	bd70      	pop	{r4, r5, r6, pc}
		return -EDOM;
    2108:	f06f 0424 	mvn.w	r4, #36	; 0x24
    210c:	e7f9      	b.n	2102 <settings_backend_init+0x82>
    210e:	bf00      	nop
    2110:	20000864 	.word	0x20000864
    2114:	20000180 	.word	0x20000180

00002118 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    2118:	b510      	push	{r4, lr}
    211a:	4807      	ldr	r0, [pc, #28]	; (2138 <uart_console_init+0x20>)
    211c:	f00c fd42 	bl	eba4 <z_impl_device_get_binding>
	__stdout_hook_install(console_out);
    2120:	4c06      	ldr	r4, [pc, #24]	; (213c <uart_console_init+0x24>)

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    2122:	4b07      	ldr	r3, [pc, #28]	; (2140 <uart_console_init+0x28>)
    2124:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    2126:	4620      	mov	r0, r4
    2128:	f002 fb42 	bl	47b0 <__stdout_hook_install>
	__printk_hook_install(console_out);
    212c:	4620      	mov	r0, r4
    212e:	f7fe fffd 	bl	112c <__printk_hook_install>
#endif

	uart_console_hook_install();

	return 0;
}
    2132:	2000      	movs	r0, #0
    2134:	bd10      	pop	{r4, pc}
    2136:	bf00      	nop
    2138:	00017a96 	.word	0x00017a96
    213c:	00002145 	.word	0x00002145
    2140:	200008a0 	.word	0x200008a0

00002144 <console_out>:
	if ('\n' == c) {
    2144:	280a      	cmp	r0, #10
{
    2146:	b538      	push	{r3, r4, r5, lr}
    2148:	4604      	mov	r4, r0
    214a:	4d07      	ldr	r5, [pc, #28]	; (2168 <console_out+0x24>)
	if ('\n' == c) {
    214c:	d104      	bne.n	2158 <console_out+0x14>
    214e:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
    2150:	6883      	ldr	r3, [r0, #8]
    2152:	210d      	movs	r1, #13
    2154:	685b      	ldr	r3, [r3, #4]
    2156:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    2158:	6828      	ldr	r0, [r5, #0]
    215a:	6883      	ldr	r3, [r0, #8]
    215c:	b2e1      	uxtb	r1, r4
    215e:	685b      	ldr	r3, [r3, #4]
    2160:	4798      	blx	r3
}
    2162:	4620      	mov	r0, r4
    2164:	bd38      	pop	{r3, r4, r5, pc}
    2166:	bf00      	nop
    2168:	200008a0 	.word	0x200008a0

0000216c <get_status>:
	return &config->subsys[type];
}

static enum clock_control_status get_status(struct device *dev,
					    clock_control_subsys_t subsys)
{
    216c:	b538      	push	{r3, r4, r5, lr}
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
	struct nrf_clock_control_sub_data *data;

	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    216e:	b2cc      	uxtb	r4, r1
    2170:	2c01      	cmp	r4, #1
{
    2172:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2174:	d909      	bls.n	218a <get_status+0x1e>
    2176:	490b      	ldr	r1, [pc, #44]	; (21a4 <get_status+0x38>)
    2178:	480b      	ldr	r0, [pc, #44]	; (21a8 <get_status+0x3c>)
    217a:	237f      	movs	r3, #127	; 0x7f
    217c:	4a0b      	ldr	r2, [pc, #44]	; (21ac <get_status+0x40>)
    217e:	f00f ffc3 	bl	12108 <printk>
    2182:	217f      	movs	r1, #127	; 0x7f
    2184:	4809      	ldr	r0, [pc, #36]	; (21ac <get_status+0x40>)
    2186:	f010 fa55 	bl	12634 <assert_post_action>
	data = get_sub_data(dev, type);
	if (data->started) {
    218a:	210c      	movs	r1, #12
	data = get_sub_data(dev, type);
    218c:	68eb      	ldr	r3, [r5, #12]
	if (data->started) {
    218e:	fb04 3101 	mla	r1, r4, r1, r3
    2192:	7a4b      	ldrb	r3, [r1, #9]
    2194:	b923      	cbnz	r3, 21a0 <get_status+0x34>
		return CLOCK_CONTROL_STATUS_ON;
	}

	if (data->ref > 0) {
    2196:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
    2198:	fab0 f080 	clz	r0, r0
    219c:	0940      	lsrs	r0, r0, #5
		return CLOCK_CONTROL_STATUS_STARTING;
	}

	return CLOCK_CONTROL_STATUS_OFF;
}
    219e:	bd38      	pop	{r3, r4, r5, pc}
		return CLOCK_CONTROL_STATUS_ON;
    21a0:	2002      	movs	r0, #2
    21a2:	e7fc      	b.n	219e <get_status+0x32>
    21a4:	00017e29 	.word	0x00017e29
    21a8:	00017d82 	.word	0x00017d82
    21ac:	00017dee 	.word	0x00017dee

000021b0 <clock_async_start>:
}

static int clock_async_start(struct device *dev,
			     clock_control_subsys_t subsys,
			     struct clock_control_async_data *data)
{
    21b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct nrf_clock_control_sub_config *config;
	struct nrf_clock_control_sub_data *clk_data;
	int key;
	u8_t ref;

	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    21b4:	b2ce      	uxtb	r6, r1
    21b6:	2e01      	cmp	r6, #1
{
    21b8:	4607      	mov	r7, r0
    21ba:	4689      	mov	r9, r1
    21bc:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    21be:	d909      	bls.n	21d4 <clock_async_start+0x24>
    21c0:	4941      	ldr	r1, [pc, #260]	; (22c8 <clock_async_start+0x118>)
    21c2:	4842      	ldr	r0, [pc, #264]	; (22cc <clock_async_start+0x11c>)
    21c4:	23ef      	movs	r3, #239	; 0xef
    21c6:	4a42      	ldr	r2, [pc, #264]	; (22d0 <clock_async_start+0x120>)
    21c8:	f00f ff9e 	bl	12108 <printk>
    21cc:	21ef      	movs	r1, #239	; 0xef
    21ce:	4840      	ldr	r0, [pc, #256]	; (22d0 <clock_async_start+0x120>)
    21d0:	f010 fa30 	bl	12634 <assert_post_action>
	config = get_sub_config(dev, type);
    21d4:	f8d7 a004 	ldr.w	sl, [r7, #4]
	clk_data = get_sub_data(dev, type);
    21d8:	f8d7 800c 	ldr.w	r8, [r7, #12]

	__ASSERT_NO_MSG((data == NULL) ||
    21dc:	2c00      	cmp	r4, #0
    21de:	d153      	bne.n	2288 <clock_async_start+0xd8>
	__asm__ volatile(
    21e0:	f04f 0320 	mov.w	r3, #32
    21e4:	f3ef 8b11 	mrs	fp, BASEPRI
    21e8:	f383 8811 	msr	BASEPRI, r3
    21ec:	f3bf 8f6f 	isb	sy
	    && is_in_list(&clk_data->list, &data->node)) {
		return -EBUSY;
	}

	key = irq_lock();
	ref = ++clk_data->ref;
    21f0:	230c      	movs	r3, #12
    21f2:	fb06 8303 	mla	r3, r6, r3, r8
    21f6:	7a1d      	ldrb	r5, [r3, #8]
    21f8:	3501      	adds	r5, #1
    21fa:	b2ed      	uxtb	r5, r5
    21fc:	721d      	strb	r5, [r3, #8]
	__ASSERT_NO_MSG(clk_data->ref > 0);
    21fe:	b95d      	cbnz	r5, 2218 <clock_async_start+0x68>
    2200:	4934      	ldr	r1, [pc, #208]	; (22d4 <clock_async_start+0x124>)
    2202:	4832      	ldr	r0, [pc, #200]	; (22cc <clock_async_start+0x11c>)
    2204:	f44f 7380 	mov.w	r3, #256	; 0x100
    2208:	4a31      	ldr	r2, [pc, #196]	; (22d0 <clock_async_start+0x120>)
    220a:	f00f ff7d 	bl	12108 <printk>
    220e:	f44f 7180 	mov.w	r1, #256	; 0x100
    2212:	482f      	ldr	r0, [pc, #188]	; (22d0 <clock_async_start+0x120>)
    2214:	f010 fa0e 	bl	12634 <assert_post_action>
	__asm__ volatile(
    2218:	f38b 8811 	msr	BASEPRI, fp
    221c:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	if (data) {
    2220:	b344      	cbz	r4, 2274 <clock_async_start+0xc4>
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    2222:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2226:	2203      	movs	r2, #3
    2228:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		bool already_started;

		clock_irqs_disable();
		already_started = clk_data->started;
    222c:	220c      	movs	r2, #12
    222e:	4372      	muls	r2, r6
    2230:	eb08 0302 	add.w	r3, r8, r2
    2234:	7a59      	ldrb	r1, [r3, #9]
		if (!already_started) {
    2236:	b991      	cbnz	r1, 225e <clock_async_start+0xae>
	__asm__ volatile(
    2238:	f04f 0020 	mov.w	r0, #32
    223c:	f3ef 8c11 	mrs	ip, BASEPRI
    2240:	f380 8811 	msr	BASEPRI, r0
    2244:	f3bf 8f6f 	isb	sy
	parent->next = child;
    2248:	6021      	str	r1, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
    224a:	6858      	ldr	r0, [r3, #4]
    224c:	2800      	cmp	r0, #0
    224e:	d133      	bne.n	22b8 <clock_async_start+0x108>
	list->tail = node;
    2250:	605c      	str	r4, [r3, #4]
	list->head = node;
    2252:	f848 4002 	str.w	r4, [r8, r2]
	__asm__ volatile(
    2256:	f38c 8811 	msr	BASEPRI, ip
    225a:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
    225e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2262:	2203      	movs	r2, #3
    2264:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
			list_append(&clk_data->list, &data->node);
		}
		clock_irqs_enable();

		if (already_started) {
    2268:	b121      	cbz	r1, 2274 <clock_async_start+0xc4>
			data->cb(dev, subsys, data->user_data);
    226a:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    226e:	4649      	mov	r1, r9
    2270:	4638      	mov	r0, r7
    2272:	4798      	blx	r3
		}
	}

	if (ref == 1) {
    2274:	2d01      	cmp	r5, #1
    2276:	d105      	bne.n	2284 <clock_async_start+0xd4>
		if (IS_ENABLED(CONFIG_NRF52_ANOMALY_132_WORKAROUND) &&
			(subsys == CLOCK_CONTROL_NRF_SUBSYS_LF)) {
			anomaly_132_workaround();
		}

		nrf_clock_task_trigger(NRF_CLOCK, config->start_tsk);
    2278:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_clock_task_trigger(NRF_CLOCK_Type * p_reg, nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    227c:	78b3      	ldrb	r3, [r6, #2]
    227e:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    2282:	601d      	str	r5, [r3, #0]
	}

	return 0;
    2284:	2000      	movs	r0, #0
    2286:	e01c      	b.n	22c2 <clock_async_start+0x112>
	__ASSERT_NO_MSG((data == NULL) ||
    2288:	6863      	ldr	r3, [r4, #4]
    228a:	b94b      	cbnz	r3, 22a0 <clock_async_start+0xf0>
    228c:	4912      	ldr	r1, [pc, #72]	; (22d8 <clock_async_start+0x128>)
    228e:	480f      	ldr	r0, [pc, #60]	; (22cc <clock_async_start+0x11c>)
    2290:	23f3      	movs	r3, #243	; 0xf3
    2292:	4a0f      	ldr	r2, [pc, #60]	; (22d0 <clock_async_start+0x120>)
    2294:	f00f ff38 	bl	12108 <printk>
    2298:	21f3      	movs	r1, #243	; 0xf3
    229a:	480d      	ldr	r0, [pc, #52]	; (22d0 <clock_async_start+0x120>)
    229c:	f010 f9ca 	bl	12634 <assert_post_action>
	sys_snode_t *item = sys_slist_peek_head(list);
    22a0:	230c      	movs	r3, #12
    22a2:	4373      	muls	r3, r6
    22a4:	f858 3003 	ldr.w	r3, [r8, r3]
		if (item == node) {
    22a8:	429c      	cmp	r4, r3
    22aa:	d008      	beq.n	22be <clock_async_start+0x10e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    22ac:	2b00      	cmp	r3, #0
    22ae:	d097      	beq.n	21e0 <clock_async_start+0x30>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    22b0:	681b      	ldr	r3, [r3, #0]
	} while (item);
    22b2:	2b00      	cmp	r3, #0
    22b4:	d1f8      	bne.n	22a8 <clock_async_start+0xf8>
    22b6:	e793      	b.n	21e0 <clock_async_start+0x30>
	parent->next = child;
    22b8:	6004      	str	r4, [r0, #0]
	list->tail = node;
    22ba:	605c      	str	r4, [r3, #4]
}
    22bc:	e7cb      	b.n	2256 <clock_async_start+0xa6>
		return -EBUSY;
    22be:	f06f 000f 	mvn.w	r0, #15
}
    22c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    22c6:	bf00      	nop
    22c8:	00017e29 	.word	0x00017e29
    22cc:	00017d82 	.word	0x00017d82
    22d0:	00017dee 	.word	0x00017dee
    22d4:	00017e9b 	.word	0x00017e9b
    22d8:	00017e4d 	.word	0x00017e4d

000022dc <clock_stop>:
{
    22dc:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    22de:	b2cc      	uxtb	r4, r1
    22e0:	2c01      	cmp	r4, #1
{
    22e2:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    22e4:	d909      	bls.n	22fa <clock_stop+0x1e>
    22e6:	4918      	ldr	r1, [pc, #96]	; (2348 <clock_stop+0x6c>)
    22e8:	4818      	ldr	r0, [pc, #96]	; (234c <clock_stop+0x70>)
    22ea:	2394      	movs	r3, #148	; 0x94
    22ec:	4a18      	ldr	r2, [pc, #96]	; (2350 <clock_stop+0x74>)
    22ee:	f00f ff0b 	bl	12108 <printk>
    22f2:	2194      	movs	r1, #148	; 0x94
    22f4:	4816      	ldr	r0, [pc, #88]	; (2350 <clock_stop+0x74>)
    22f6:	f010 f99d 	bl	12634 <assert_post_action>
	config = get_sub_config(dev, type);
    22fa:	6869      	ldr	r1, [r5, #4]
	data = get_sub_data(dev, type);
    22fc:	68ed      	ldr	r5, [r5, #12]
	__asm__ volatile(
    22fe:	f04f 0320 	mov.w	r3, #32
    2302:	f3ef 8611 	mrs	r6, BASEPRI
    2306:	f383 8811 	msr	BASEPRI, r3
    230a:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
    230e:	220c      	movs	r2, #12
    2310:	4362      	muls	r2, r4
    2312:	18ab      	adds	r3, r5, r2
    2314:	7a18      	ldrb	r0, [r3, #8]
    2316:	b190      	cbz	r0, 233e <clock_stop+0x62>
	data->ref--;
    2318:	3801      	subs	r0, #1
    231a:	b2c0      	uxtb	r0, r0
    231c:	7218      	strb	r0, [r3, #8]
	if (data->ref == 0) {
    231e:	b988      	cbnz	r0, 2344 <clock_stop+0x68>
		nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
    2320:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    2324:	2101      	movs	r1, #1
	list->head = NULL;
    2326:	50a8      	str	r0, [r5, r2]
    2328:	78e2      	ldrb	r2, [r4, #3]
	list->tail = NULL;
    232a:	6058      	str	r0, [r3, #4]
    232c:	f102 2250 	add.w	r2, r2, #1342197760	; 0x50005000
    2330:	6011      	str	r1, [r2, #0]
		data->started = false;
    2332:	7258      	strb	r0, [r3, #9]
	__asm__ volatile(
    2334:	f386 8811 	msr	BASEPRI, r6
    2338:	f3bf 8f6f 	isb	sy
}
    233c:	bd70      	pop	{r4, r5, r6, pc}
		err = -EALREADY;
    233e:	f06f 0044 	mvn.w	r0, #68	; 0x44
    2342:	e7f7      	b.n	2334 <clock_stop+0x58>
	int err = 0;
    2344:	2000      	movs	r0, #0
    2346:	e7f5      	b.n	2334 <clock_stop+0x58>
    2348:	00017e29 	.word	0x00017e29
    234c:	00017d82 	.word	0x00017d82
    2350:	00017dee 	.word	0x00017dee

00002354 <clkstarted_handle.constprop.0>:
DEVICE_AND_API_INIT(clock_nrf, DT_INST_LABEL(0),
		    clk_init, &data, &config, PRE_KERNEL_1,
		    CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &clock_control_api);

static void clkstarted_handle(struct device *dev,
    2354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
	struct clock_control_async_data *async_data;

	DBG(dev, type, "Clock started");
	sub_data->started = true;
    2356:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    2358:	4e11      	ldr	r6, [pc, #68]	; (23a0 <clkstarted_handle.constprop.0+0x4c>)
static void clkstarted_handle(struct device *dev,
    235a:	4605      	mov	r5, r0
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    235c:	68f3      	ldr	r3, [r6, #12]
	sub_data->started = true;
    235e:	fb04 3400 	mla	r4, r4, r0, r3
    2362:	2301      	movs	r3, #1
    2364:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
    2366:	f04f 0320 	mov.w	r3, #32
    236a:	f3ef 8111 	mrs	r1, BASEPRI
    236e:	f383 8811 	msr	BASEPRI, r3
    2372:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
    2376:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    2378:	b12b      	cbz	r3, 2386 <clkstarted_handle.constprop.0+0x32>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    237a:	6860      	ldr	r0, [r4, #4]
    237c:	681a      	ldr	r2, [r3, #0]
    237e:	4283      	cmp	r3, r0
	list->head = node;
    2380:	6022      	str	r2, [r4, #0]
	list->tail = node;
    2382:	bf08      	it	eq
    2384:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
    2386:	f381 8811 	msr	BASEPRI, r1
    238a:	f3bf 8f6f 	isb	sy

	while ((async_data = list_get(&sub_data->list)) != NULL) {
    238e:	b903      	cbnz	r3, 2392 <clkstarted_handle.constprop.0+0x3e>
		async_data->cb(dev, (clock_control_subsys_t)type,
				async_data->user_data);
	}
}
    2390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		async_data->cb(dev, (clock_control_subsys_t)type,
    2392:	4629      	mov	r1, r5
    2394:	e9d3 7201 	ldrd	r7, r2, [r3, #4]
    2398:	4630      	mov	r0, r6
    239a:	47b8      	blx	r7
    239c:	e7e3      	b.n	2366 <clkstarted_handle.constprop.0+0x12>
    239e:	bf00      	nop
    23a0:	20000340 	.word	0x20000340

000023a4 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    23a4:	b508      	push	{r3, lr}
#endif
}

NRF_STATIC_INLINE bool nrf_clock_event_check(NRF_CLOCK_Type const * p_reg, nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    23a6:	4b11      	ldr	r3, [pc, #68]	; (23ec <nrf_power_clock_isr+0x48>)
    23a8:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    23aa:	b16a      	cbz	r2, 23c8 <nrf_power_clock_isr+0x24>
    return p_reg->INTENSET & mask;
    23ac:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    23b0:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    23b4:	07d1      	lsls	r1, r2, #31
    23b6:	d507      	bpl.n	23c8 <nrf_power_clock_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    23b8:	2200      	movs	r2, #0
    23ba:	601a      	str	r2, [r3, #0]
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    23bc:	4b0c      	ldr	r3, [pc, #48]	; (23f0 <nrf_power_clock_isr+0x4c>)

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    23be:	68db      	ldr	r3, [r3, #12]
    23c0:	7a58      	ldrb	r0, [r3, #9]
    23c2:	b908      	cbnz	r0, 23c8 <nrf_power_clock_isr+0x24>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    23c4:	f7ff ffc6 	bl	2354 <clkstarted_handle.constprop.0>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    23c8:	4b0a      	ldr	r3, [pc, #40]	; (23f4 <nrf_power_clock_isr+0x50>)
    23ca:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    23cc:	b162      	cbz	r2, 23e8 <nrf_power_clock_isr+0x44>
    return p_reg->INTENSET & mask;
    23ce:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    23d2:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    23d6:	0792      	lsls	r2, r2, #30
    23d8:	d506      	bpl.n	23e8 <nrf_power_clock_isr+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    23da:	2200      	movs	r2, #0
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started();
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    23dc:	2001      	movs	r0, #1
    23de:	601a      	str	r2, [r3, #0]
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    23e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    23e4:	f7ff bfb6 	b.w	2354 <clkstarted_handle.constprop.0>
}
    23e8:	bd08      	pop	{r3, pc}
    23ea:	bf00      	nop
    23ec:	50005100 	.word	0x50005100
    23f0:	20000340 	.word	0x20000340
    23f4:	50005104 	.word	0x50005104

000023f8 <bt_rpmsg_init>:

static int bt_rpmsg_init(struct device *unused)
{
	ARG_UNUSED(unused);

	return bt_hci_driver_register(&drv);
    23f8:	4801      	ldr	r0, [pc, #4]	; (2400 <bt_rpmsg_init+0x8>)
    23fa:	f004 b843 	b.w	6484 <bt_hci_driver_register>
    23fe:	bf00      	nop
    2400:	00016f90 	.word	0x00016f90

00002404 <bt_rpmsg_send>:
{
    2404:	b510      	push	{r4, lr}
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    2406:	7d02      	ldrb	r2, [r0, #20]
    2408:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    240a:	b152      	cbz	r2, 2422 <bt_rpmsg_send+0x1e>
    240c:	2a02      	cmp	r2, #2
    240e:	d009      	beq.n	2424 <bt_rpmsg_send+0x20>
		BT_ERR("Unknown type %u", bt_buf_get_type(buf));
    2410:	2145      	movs	r1, #69	; 0x45
    2412:	480b      	ldr	r0, [pc, #44]	; (2440 <bt_rpmsg_send+0x3c>)
		BT_ERR("Failed to send (err %d)", err);
    2414:	f00f fe78 	bl	12108 <printk>
	net_buf_unref(buf);
    2418:	4620      	mov	r0, r4
    241a:	f00b f867 	bl	d4ec <net_buf_unref>
}
    241e:	2000      	movs	r0, #0
    2420:	bd10      	pop	{r4, pc}
	switch (bt_buf_get_type(buf)) {
    2422:	2201      	movs	r2, #1
	net_buf_push_u8(buf, pkt_indicator);
    2424:	4611      	mov	r1, r2
    2426:	f104 0008 	add.w	r0, r4, #8
    242a:	f013 f9bc 	bl	157a6 <net_buf_simple_push_u8>
	err = bt_rpmsg_platform_send(buf);
    242e:	4620      	mov	r0, r4
    2430:	f000 f9fe 	bl	2830 <bt_rpmsg_platform_send>
	if (err < 0) {
    2434:	1e02      	subs	r2, r0, #0
    2436:	daef      	bge.n	2418 <bt_rpmsg_send+0x14>
		BT_ERR("Failed to send (err %d)", err);
    2438:	2145      	movs	r1, #69	; 0x45
    243a:	4802      	ldr	r0, [pc, #8]	; (2444 <bt_rpmsg_send+0x40>)
    243c:	e7ea      	b.n	2414 <bt_rpmsg_send+0x10>
    243e:	bf00      	nop
    2440:	00017ecd 	.word	0x00017ecd
    2444:	00017ee2 	.word	0x00017ee2

00002448 <bt_rpmsg_rx>:
{
    2448:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	pkt_indicator = *data++;
    244c:	4680      	mov	r8, r0
    244e:	f818 2b01 	ldrb.w	r2, [r8], #1
{
    2452:	4606      	mov	r6, r0
	switch (pkt_indicator) {
    2454:	2a02      	cmp	r2, #2
{
    2456:	460d      	mov	r5, r1
	remaining -= sizeof(pkt_indicator);
    2458:	f101 33ff 	add.w	r3, r1, #4294967295
	switch (pkt_indicator) {
    245c:	d04e      	beq.n	24fc <bt_rpmsg_rx+0xb4>
    245e:	2a04      	cmp	r2, #4
    2460:	d17c      	bne.n	255c <bt_rpmsg_rx+0x114>
	if (remaining < sizeof(hdr)) {
    2462:	2b01      	cmp	r3, #1
    2464:	d806      	bhi.n	2474 <bt_rpmsg_rx+0x2c>
		BT_ERR("Not enough data for event header");
    2466:	2145      	movs	r1, #69	; 0x45
    2468:	4841      	ldr	r0, [pc, #260]	; (2570 <bt_rpmsg_rx+0x128>)
		BT_ERR("Event payload length is not correct");
    246a:	f00f fe4d 	bl	12108 <printk>
}
    246e:	b002      	add	sp, #8
    2470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (evt_type) {
    2474:	7843      	ldrb	r3, [r0, #1]
    2476:	2b3e      	cmp	r3, #62	; 0x3e
    2478:	d112      	bne.n	24a0 <bt_rpmsg_rx+0x58>
		switch (subevt_type) {
    247a:	78c7      	ldrb	r7, [r0, #3]
    247c:	1ebb      	subs	r3, r7, #2
    247e:	425f      	negs	r7, r3
    2480:	415f      	adcs	r7, r3
	memcpy((void *)&hdr, data, sizeof(hdr));
    2482:	2202      	movs	r2, #2
    2484:	4641      	mov	r1, r8
    2486:	a801      	add	r0, sp, #4
    2488:	f011 f953 	bl	13732 <memcpy>
	if (remaining != hdr.len) {
    248c:	f89d 3005 	ldrb.w	r3, [sp, #5]
	remaining -= sizeof(hdr);
    2490:	3d03      	subs	r5, #3
	if (remaining != hdr.len) {
    2492:	429d      	cmp	r5, r3
	data += sizeof(hdr);
    2494:	f106 0603 	add.w	r6, r6, #3
	if (remaining != hdr.len) {
    2498:	d004      	beq.n	24a4 <bt_rpmsg_rx+0x5c>
		BT_ERR("Event payload length is not correct");
    249a:	2145      	movs	r1, #69	; 0x45
    249c:	4835      	ldr	r0, [pc, #212]	; (2574 <bt_rpmsg_rx+0x12c>)
    249e:	e7e4      	b.n	246a <bt_rpmsg_rx+0x22>
		return false;
    24a0:	2700      	movs	r7, #0
    24a2:	e7ee      	b.n	2482 <bt_rpmsg_rx+0x3a>
	buf = bt_buf_get_evt(hdr.evt, discardable, K_NO_WAIT);
    24a4:	2200      	movs	r2, #0
    24a6:	2300      	movs	r3, #0
    24a8:	4639      	mov	r1, r7
    24aa:	f89d 0004 	ldrb.w	r0, [sp, #4]
    24ae:	f004 fa5d 	bl	696c <bt_buf_get_evt>
	if (!buf) {
    24b2:	4604      	mov	r4, r0
    24b4:	b920      	cbnz	r0, 24c0 <bt_rpmsg_rx+0x78>
		if (discardable) {
    24b6:	2f00      	cmp	r7, #0
    24b8:	d1d9      	bne.n	246e <bt_rpmsg_rx+0x26>
			BT_ERR("No available event buffers!");
    24ba:	2145      	movs	r1, #69	; 0x45
    24bc:	482e      	ldr	r0, [pc, #184]	; (2578 <bt_rpmsg_rx+0x130>)
    24be:	e7d4      	b.n	246a <bt_rpmsg_rx+0x22>
	net_buf_add_mem(buf, &hdr, sizeof(hdr));
    24c0:	f100 0808 	add.w	r8, r0, #8
    24c4:	2202      	movs	r2, #2
    24c6:	4640      	mov	r0, r8
    24c8:	a901      	add	r1, sp, #4
    24ca:	f013 f98f 	bl	157ec <net_buf_simple_add_mem>
	*prio = bt_hci_evt_is_prio(hdr.evt);
    24ce:	f89d 2004 	ldrb.w	r2, [sp, #4]
 * @return true if the event can be processed in the RX thread, false
 *         if it cannot.
 */
static inline bool bt_hci_evt_is_prio(u8_t evt)
{
	switch (evt) {
    24d2:	2a1a      	cmp	r2, #26
    24d4:	d810      	bhi.n	24f8 <bt_rpmsg_rx+0xb0>
    24d6:	2301      	movs	r3, #1
    24d8:	4093      	lsls	r3, r2
    24da:	4a28      	ldr	r2, [pc, #160]	; (257c <bt_rpmsg_rx+0x134>)
    24dc:	4213      	tst	r3, r2
    24de:	bf14      	ite	ne
    24e0:	2701      	movne	r7, #1
    24e2:	2700      	moveq	r7, #0
	net_buf_add_mem(buf, data, remaining);
    24e4:	462a      	mov	r2, r5
    24e6:	4631      	mov	r1, r6
    24e8:	4640      	mov	r0, r8
    24ea:	f013 f97f 	bl	157ec <net_buf_simple_add_mem>
		if (prio) {
    24ee:	bbd7      	cbnz	r7, 2566 <bt_rpmsg_rx+0x11e>
			bt_recv(buf);
    24f0:	4620      	mov	r0, r4
    24f2:	f003 ff55 	bl	63a0 <bt_recv>
    24f6:	e7ba      	b.n	246e <bt_rpmsg_rx+0x26>
	*prio = bt_hci_evt_is_prio(hdr.evt);
    24f8:	2700      	movs	r7, #0
    24fa:	e7f3      	b.n	24e4 <bt_rpmsg_rx+0x9c>
	if (remaining < sizeof(hdr)) {
    24fc:	2b03      	cmp	r3, #3
    24fe:	d802      	bhi.n	2506 <bt_rpmsg_rx+0xbe>
		BT_ERR("Not enough data for ACL header");
    2500:	2145      	movs	r1, #69	; 0x45
    2502:	481f      	ldr	r0, [pc, #124]	; (2580 <bt_rpmsg_rx+0x138>)
    2504:	e7b1      	b.n	246a <bt_rpmsg_rx+0x22>
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
    2506:	2200      	movs	r2, #0
    2508:	2300      	movs	r3, #0
    250a:	2003      	movs	r0, #3
    250c:	f004 f9d4 	bl	68b8 <bt_buf_get_rx>
	if (buf) {
    2510:	4604      	mov	r4, r0
    2512:	b1d0      	cbz	r0, 254a <bt_rpmsg_rx+0x102>
		memcpy((void *)&hdr, data, sizeof(hdr));
    2514:	2204      	movs	r2, #4
    2516:	4641      	mov	r1, r8
    2518:	eb0d 0002 	add.w	r0, sp, r2
    251c:	f011 f909 	bl	13732 <memcpy>
		net_buf_add_mem(buf, &hdr, sizeof(hdr));
    2520:	2204      	movs	r2, #4
    2522:	f104 0708 	add.w	r7, r4, #8
    2526:	4638      	mov	r0, r7
    2528:	eb0d 0102 	add.w	r1, sp, r2
    252c:	f013 f95e 	bl	157ec <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    2530:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		remaining -= sizeof(hdr);
    2534:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    2536:	429d      	cmp	r5, r3
    2538:	d00a      	beq.n	2550 <bt_rpmsg_rx+0x108>
		BT_ERR("ACL payload length is not correct");
    253a:	2145      	movs	r1, #69	; 0x45
    253c:	4811      	ldr	r0, [pc, #68]	; (2584 <bt_rpmsg_rx+0x13c>)
    253e:	f00f fde3 	bl	12108 <printk>
		net_buf_unref(buf);
    2542:	4620      	mov	r0, r4
    2544:	f00a ffd2 	bl	d4ec <net_buf_unref>
	if (buf) {
    2548:	e791      	b.n	246e <bt_rpmsg_rx+0x26>
		BT_ERR("No available ACL buffers!");
    254a:	2145      	movs	r1, #69	; 0x45
    254c:	480e      	ldr	r0, [pc, #56]	; (2588 <bt_rpmsg_rx+0x140>)
    254e:	e78c      	b.n	246a <bt_rpmsg_rx+0x22>
	net_buf_add_mem(buf, data, remaining);
    2550:	462a      	mov	r2, r5
    2552:	4638      	mov	r0, r7
    2554:	1d71      	adds	r1, r6, #5
    2556:	f013 f949 	bl	157ec <net_buf_simple_add_mem>
	if (buf) {
    255a:	e7c9      	b.n	24f0 <bt_rpmsg_rx+0xa8>
		BT_ERR("Unknown HCI type %u", pkt_indicator);
    255c:	2145      	movs	r1, #69	; 0x45
    255e:	480b      	ldr	r0, [pc, #44]	; (258c <bt_rpmsg_rx+0x144>)
    2560:	f00f fdd2 	bl	12108 <printk>
		return;
    2564:	e783      	b.n	246e <bt_rpmsg_rx+0x26>
			bt_recv_prio(buf);
    2566:	4620      	mov	r0, r4
    2568:	f003 ff36 	bl	63d8 <bt_recv_prio>
    256c:	e77f      	b.n	246e <bt_rpmsg_rx+0x26>
    256e:	bf00      	nop
    2570:	00017eff 	.word	0x00017eff
    2574:	00017f25 	.word	0x00017f25
    2578:	00017f4e 	.word	0x00017f4e
    257c:	0408c000 	.word	0x0408c000
    2580:	00017f6f 	.word	0x00017f6f
    2584:	00017fb2 	.word	0x00017fb2
    2588:	00017f93 	.word	0x00017f93
    258c:	00017fd9 	.word	0x00017fd9

00002590 <virtio_set_status>:
	return *(volatile u8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(u8_t data, mem_addr_t addr)
{
	*(volatile u8_t *)addr = data;
    2590:	4b01      	ldr	r3, [pc, #4]	; (2598 <virtio_set_status+0x8>)
    2592:	7019      	strb	r1, [r3, #0]
}

static void virtio_set_status(struct virtio_device *vdev, unsigned char status)
{
	sys_write8(status, VDEV_STATUS_ADDR);
}
    2594:	4770      	bx	lr
    2596:	bf00      	nop
    2598:	20070000 	.word	0x20070000

0000259c <ns_bind_cb>:
{
	rpmsg_destroy_ept(ep);
}

static void ns_bind_cb(struct rpmsg_device *rdev, const char *name, u32_t dest)
{
    259c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	(void)rpmsg_create_ept(&ep,
    259e:	4b09      	ldr	r3, [pc, #36]	; (25c4 <ns_bind_cb+0x28>)
    25a0:	9302      	str	r3, [sp, #8]
    25a2:	4b09      	ldr	r3, [pc, #36]	; (25c8 <ns_bind_cb+0x2c>)
    25a4:	e9cd 2300 	strd	r2, r3, [sp]
    25a8:	460a      	mov	r2, r1
    25aa:	f04f 33ff 	mov.w	r3, #4294967295
    25ae:	4601      	mov	r1, r0
    25b0:	4806      	ldr	r0, [pc, #24]	; (25cc <ns_bind_cb+0x30>)
    25b2:	f00c f8cd 	bl	e750 <rpmsg_create_ept>
	z_impl_k_sem_give(sem);
    25b6:	4806      	ldr	r0, [pc, #24]	; (25d0 <ns_bind_cb+0x34>)
				dest,
				endpoint_cb,
				rpmsg_service_unbind);

	k_sem_give(&ready_sem);
}
    25b8:	b005      	add	sp, #20
    25ba:	f85d eb04 	ldr.w	lr, [sp], #4
    25be:	f00e bb1f 	b.w	10c00 <z_impl_k_sem_give>
    25c2:	bf00      	nop
    25c4:	00012acb 	.word	0x00012acb
    25c8:	00012acf 	.word	0x00012acf
    25cc:	20000934 	.word	0x20000934
    25d0:	20000428 	.word	0x20000428

000025d4 <virtio_notify>:
	status = ipm_send(ipm_tx_handle, 0, 0, NULL, 0);
    25d4:	4b0a      	ldr	r3, [pc, #40]	; (2600 <virtio_notify+0x2c>)
{
    25d6:	b513      	push	{r0, r1, r4, lr}
	status = ipm_send(ipm_tx_handle, 0, 0, NULL, 0);
    25d8:	6818      	ldr	r0, [r3, #0]
			   const void *data, int size)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->driver_api;

	return api->send(ipmdev, wait, id, data, size);
    25da:	2300      	movs	r3, #0
    25dc:	6882      	ldr	r2, [r0, #8]
    25de:	9300      	str	r3, [sp, #0]
    25e0:	6814      	ldr	r4, [r2, #0]
    25e2:	4619      	mov	r1, r3
    25e4:	461a      	mov	r2, r3
    25e6:	47a0      	blx	r4
	if (status != 0) {
    25e8:	4602      	mov	r2, r0
    25ea:	b130      	cbz	r0, 25fa <virtio_notify+0x26>
		BT_ERR("ipm_send failed to notify: %d", status);
    25ec:	2145      	movs	r1, #69	; 0x45
    25ee:	4805      	ldr	r0, [pc, #20]	; (2604 <virtio_notify+0x30>)
}
    25f0:	b002      	add	sp, #8
    25f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("ipm_send failed to notify: %d", status);
    25f6:	f00f bd87 	b.w	12108 <printk>
}
    25fa:	b002      	add	sp, #8
    25fc:	bd10      	pop	{r4, pc}
    25fe:	bf00      	nop
    2600:	20000978 	.word	0x20000978
    2604:	00018006 	.word	0x00018006

00002608 <bt_rpmsg_rx_thread>:

static void bt_rpmsg_rx_thread(void *p1, void *p2, void *p3)
{
    2608:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_take(sem, timeout);
    260a:	4d07      	ldr	r5, [pc, #28]	; (2628 <bt_rpmsg_rx_thread+0x20>)

	while (1) {
		int status = k_sem_take(&rx_sem, K_FOREVER);

		if (status == 0) {
			virtqueue_notification(vq[0]);
    260c:	4c07      	ldr	r4, [pc, #28]	; (262c <bt_rpmsg_rx_thread+0x24>)
    260e:	f04f 32ff 	mov.w	r2, #4294967295
    2612:	f04f 33ff 	mov.w	r3, #4294967295
    2616:	4628      	mov	r0, r5
    2618:	f00e fb36 	bl	10c88 <z_impl_k_sem_take>
		if (status == 0) {
    261c:	2800      	cmp	r0, #0
    261e:	d1f6      	bne.n	260e <bt_rpmsg_rx_thread+0x6>
			virtqueue_notification(vq[0]);
    2620:	6820      	ldr	r0, [r4, #0]
    2622:	f013 feda 	bl	163da <virtqueue_notification>
	while (1) {
    2626:	e7f2      	b.n	260e <bt_rpmsg_rx_thread+0x6>
    2628:	20000440 	.word	0x20000440
    262c:	20000a48 	.word	0x20000a48

00002630 <ipm_callback>:
	z_impl_k_sem_give(sem);
    2630:	4801      	ldr	r0, [pc, #4]	; (2638 <ipm_callback+0x8>)
    2632:	f00e bae5 	b.w	10c00 <z_impl_k_sem_give>
    2636:	bf00      	nop
    2638:	20000440 	.word	0x20000440

0000263c <bt_rpmsg_platform_init>:
		}
	}
}

int bt_rpmsg_platform_init(void)
{
    263c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    263e:	4b5b      	ldr	r3, [pc, #364]	; (27ac <bt_rpmsg_platform_init+0x170>)
{
    2640:	b08b      	sub	sp, #44	; 0x2c
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    2642:	9308      	str	r3, [sp, #32]
    2644:	2306      	movs	r3, #6
    2646:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    264a:	2200      	movs	r2, #0
    264c:	2300      	movs	r3, #0
    264e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    2652:	2300      	movs	r3, #0
    2654:	f06f 0207 	mvn.w	r2, #7
    2658:	e9cd 3301 	strd	r3, r3, [sp, #4]
    265c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    2660:	4953      	ldr	r1, [pc, #332]	; (27b0 <bt_rpmsg_platform_init+0x174>)
    2662:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2666:	9300      	str	r3, [sp, #0]
    2668:	4852      	ldr	r0, [pc, #328]	; (27b4 <bt_rpmsg_platform_init+0x178>)
    266a:	4b53      	ldr	r3, [pc, #332]	; (27b8 <bt_rpmsg_platform_init+0x17c>)
    266c:	f00e fc06 	bl	10e7c <z_impl_k_thread_create>
			bt_rpmsg_rx_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_BT_RPMSG_NRF53_RX_PRIO),
			0, K_NO_WAIT);

	/* Libmetal setup */
	err = metal_init(&metal_params);
    2670:	a808      	add	r0, sp, #32
    2672:	f00b ffa9 	bl	e5c8 <metal_init>
	if (err) {
    2676:	4604      	mov	r4, r0
    2678:	b138      	cbz	r0, 268a <bt_rpmsg_platform_init+0x4e>
		BT_ERR("metal_init: failed - error code %d", err);
    267a:	2145      	movs	r1, #69	; 0x45
    267c:	4602      	mov	r2, r0
    267e:	484f      	ldr	r0, [pc, #316]	; (27bc <bt_rpmsg_platform_init+0x180>)
		return err;
	}

	err = metal_register_generic_device(&shm_device);
	if (err) {
		BT_ERR("Couldn't register shared memory device: %d", err);
    2680:	f00f fd42 	bl	12108 <printk>

	/* Wait til nameservice ep is setup */
	k_sem_take(&ready_sem, K_FOREVER);

	return 0;
}
    2684:	4620      	mov	r0, r4
    2686:	b00b      	add	sp, #44	; 0x2c
    2688:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = metal_register_generic_device(&shm_device);
    268a:	484d      	ldr	r0, [pc, #308]	; (27c0 <bt_rpmsg_platform_init+0x184>)
    268c:	f00b ff7c 	bl	e588 <metal_register_generic_device>
	if (err) {
    2690:	4604      	mov	r4, r0
    2692:	b118      	cbz	r0, 269c <bt_rpmsg_platform_init+0x60>
		BT_ERR("Couldn't register shared memory device: %d", err);
    2694:	4602      	mov	r2, r0
    2696:	2145      	movs	r1, #69	; 0x45
    2698:	484a      	ldr	r0, [pc, #296]	; (27c4 <bt_rpmsg_platform_init+0x188>)
    269a:	e7f1      	b.n	2680 <bt_rpmsg_platform_init+0x44>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
    269c:	4d4a      	ldr	r5, [pc, #296]	; (27c8 <bt_rpmsg_platform_init+0x18c>)
    269e:	494b      	ldr	r1, [pc, #300]	; (27cc <bt_rpmsg_platform_init+0x190>)
    26a0:	462a      	mov	r2, r5
    26a2:	484b      	ldr	r0, [pc, #300]	; (27d0 <bt_rpmsg_platform_init+0x194>)
    26a4:	f013 fc12 	bl	15ecc <metal_device_open>
	if (err) {
    26a8:	4604      	mov	r4, r0
    26aa:	b118      	cbz	r0, 26b4 <bt_rpmsg_platform_init+0x78>
		BT_ERR("metal_device_open failed: %d", err);
    26ac:	4602      	mov	r2, r0
    26ae:	2145      	movs	r1, #69	; 0x45
    26b0:	4848      	ldr	r0, [pc, #288]	; (27d4 <bt_rpmsg_platform_init+0x198>)
    26b2:	e7e5      	b.n	2680 <bt_rpmsg_platform_init+0x44>
	io = metal_device_io_region(device, 0);
    26b4:	682b      	ldr	r3, [r5, #0]
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
    26b6:	4f48      	ldr	r7, [pc, #288]	; (27d8 <bt_rpmsg_platform_init+0x19c>)
		? &device->regions[index]
		: NULL);
    26b8:	689a      	ldr	r2, [r3, #8]
    26ba:	b93a      	cbnz	r2, 26cc <bt_rpmsg_platform_init+0x90>
    26bc:	603a      	str	r2, [r7, #0]
		BT_ERR("metal_device_io_region failed to get region");
    26be:	2145      	movs	r1, #69	; 0x45
    26c0:	4846      	ldr	r0, [pc, #280]	; (27dc <bt_rpmsg_platform_init+0x1a0>)
		BT_ERR("Could not get RX IPM device handle");
    26c2:	f00f fd21 	bl	12108 <printk>
		return -ENODEV;
    26c6:	f06f 0412 	mvn.w	r4, #18
    26ca:	e7db      	b.n	2684 <bt_rpmsg_platform_init+0x48>
    26cc:	330c      	adds	r3, #12
	io = metal_device_io_region(device, 0);
    26ce:	603b      	str	r3, [r7, #0]
	if (!io) {
    26d0:	2b00      	cmp	r3, #0
    26d2:	d0f4      	beq.n	26be <bt_rpmsg_platform_init+0x82>
    26d4:	4842      	ldr	r0, [pc, #264]	; (27e0 <bt_rpmsg_platform_init+0x1a4>)
    26d6:	f00c fa65 	bl	eba4 <z_impl_device_get_binding>
	ipm_tx_handle = device_get_binding("IPM_0");
    26da:	4b42      	ldr	r3, [pc, #264]	; (27e4 <bt_rpmsg_platform_init+0x1a8>)
    26dc:	6018      	str	r0, [r3, #0]
	if (!ipm_tx_handle) {
    26de:	b910      	cbnz	r0, 26e6 <bt_rpmsg_platform_init+0xaa>
		BT_ERR("Could not get TX IPM device handle");
    26e0:	2145      	movs	r1, #69	; 0x45
    26e2:	4841      	ldr	r0, [pc, #260]	; (27e8 <bt_rpmsg_platform_init+0x1ac>)
    26e4:	e7ed      	b.n	26c2 <bt_rpmsg_platform_init+0x86>
    26e6:	4841      	ldr	r0, [pc, #260]	; (27ec <bt_rpmsg_platform_init+0x1b0>)
    26e8:	f00c fa5c 	bl	eba4 <z_impl_device_get_binding>
	if (!ipm_rx_handle) {
    26ec:	b910      	cbnz	r0, 26f4 <bt_rpmsg_platform_init+0xb8>
		BT_ERR("Could not get RX IPM device handle");
    26ee:	2145      	movs	r1, #69	; 0x45
    26f0:	483f      	ldr	r0, [pc, #252]	; (27f0 <bt_rpmsg_platform_init+0x1b4>)
    26f2:	e7e6      	b.n	26c2 <bt_rpmsg_platform_init+0x86>
					 ipm_callback_t cb, void *context)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->driver_api;

	api->register_callback(ipmdev, cb, context);
    26f4:	6883      	ldr	r3, [r0, #8]
    26f6:	4622      	mov	r2, r4
    26f8:	685b      	ldr	r3, [r3, #4]
    26fa:	493e      	ldr	r1, [pc, #248]	; (27f4 <bt_rpmsg_platform_init+0x1b8>)
    26fc:	4798      	blx	r3
#endif

#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
static inline void *metal_allocate_memory(unsigned int size)
{
	return k_malloc(size);
    26fe:	20b4      	movs	r0, #180	; 0xb4
    2700:	f00c fdfc 	bl	f2fc <k_malloc>
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = metal_allocate_memory(vq_size);
	if (vqs) {
    2704:	4606      	mov	r6, r0
    2706:	b118      	cbz	r0, 2710 <bt_rpmsg_platform_init+0xd4>
		memset(vqs, 0x00, vq_size);
    2708:	22b4      	movs	r2, #180	; 0xb4
    270a:	4621      	mov	r1, r4
    270c:	f011 f83c 	bl	13788 <memset>
	vq[0] = virtqueue_allocate(VRING_SIZE);
    2710:	4d39      	ldr	r5, [pc, #228]	; (27f8 <bt_rpmsg_platform_init+0x1bc>)
    2712:	602e      	str	r6, [r5, #0]
	if (!vq[0]) {
    2714:	b936      	cbnz	r6, 2724 <bt_rpmsg_platform_init+0xe8>
		BT_ERR("virtqueue_allocate failed to alloc vq[0]");
    2716:	2145      	movs	r1, #69	; 0x45
    2718:	4838      	ldr	r0, [pc, #224]	; (27fc <bt_rpmsg_platform_init+0x1c0>)
		BT_ERR("virtqueue_allocate failed to alloc vq[1]");
    271a:	f00f fcf5 	bl	12108 <printk>
		return -ENOMEM;
    271e:	f06f 040b 	mvn.w	r4, #11
    2722:	e7af      	b.n	2684 <bt_rpmsg_platform_init+0x48>
    2724:	20b4      	movs	r0, #180	; 0xb4
    2726:	f00c fde9 	bl	f2fc <k_malloc>
	if (vqs) {
    272a:	4604      	mov	r4, r0
    272c:	b118      	cbz	r0, 2736 <bt_rpmsg_platform_init+0xfa>
		memset(vqs, 0x00, vq_size);
    272e:	22b4      	movs	r2, #180	; 0xb4
    2730:	2100      	movs	r1, #0
    2732:	f011 f829 	bl	13788 <memset>
	vq[1] = virtqueue_allocate(VRING_SIZE);
    2736:	606c      	str	r4, [r5, #4]
	if (!vq[1]) {
    2738:	b914      	cbnz	r4, 2740 <bt_rpmsg_platform_init+0x104>
		BT_ERR("virtqueue_allocate failed to alloc vq[1]");
    273a:	2145      	movs	r1, #69	; 0x45
    273c:	4830      	ldr	r0, [pc, #192]	; (2800 <bt_rpmsg_platform_init+0x1c4>)
    273e:	e7ec      	b.n	271a <bt_rpmsg_platform_init+0xde>
	rvrings[0].io = io;
    2740:	4b30      	ldr	r3, [pc, #192]	; (2804 <bt_rpmsg_platform_init+0x1c8>)
	rvrings[0].info.vaddr = (void *)VRING_TX_ADDRESS;
    2742:	4a31      	ldr	r2, [pc, #196]	; (2808 <bt_rpmsg_platform_init+0x1cc>)
	rvrings[1].vq = vq[1];
    2744:	619c      	str	r4, [r3, #24]
	rvrings[0].info.vaddr = (void *)VRING_TX_ADDRESS;
    2746:	605a      	str	r2, [r3, #4]
	rvrings[0].info.align = VRING_ALIGNMENT;
    2748:	2204      	movs	r2, #4
    274a:	609a      	str	r2, [r3, #8]
	rvrings[1].info.align = VRING_ALIGNMENT;
    274c:	621a      	str	r2, [r3, #32]
	vdev.role = RPMSG_MASTER;
    274e:	2200      	movs	r2, #0
    2750:	4c2e      	ldr	r4, [pc, #184]	; (280c <bt_rpmsg_platform_init+0x1d0>)
	rvrings[0].info.num_descs = VRING_SIZE;
    2752:	2110      	movs	r1, #16
	vdev.role = RPMSG_MASTER;
    2754:	61a2      	str	r2, [r4, #24]
	vdev.vrings_num = VRING_COUNT;
    2756:	2202      	movs	r2, #2
	rvrings[0].io = io;
    2758:	6838      	ldr	r0, [r7, #0]
	rvrings[0].vq = vq[0];
    275a:	682d      	ldr	r5, [r5, #0]
	rvrings[0].io = io;
    275c:	6158      	str	r0, [r3, #20]
	rvrings[0].vq = vq[0];
    275e:	601d      	str	r5, [r3, #0]
	rvrings[1].io = io;
    2760:	62d8      	str	r0, [r3, #44]	; 0x2c
	vdev.vrings_num = VRING_COUNT;
    2762:	62a2      	str	r2, [r4, #40]	; 0x28
	rvrings[1].info.vaddr = (void *)VRING_RX_ADDRESS;
    2764:	482a      	ldr	r0, [pc, #168]	; (2810 <bt_rpmsg_platform_init+0x1d4>)
	vdev.func = &dispatch;
    2766:	4a2b      	ldr	r2, [pc, #172]	; (2814 <bt_rpmsg_platform_init+0x1d8>)
	rpmsg_virtio_init_shm_pool(&shpool, (void *)SHM_START_ADDR, SHM_SIZE);
    2768:	4d2b      	ldr	r5, [pc, #172]	; (2818 <bt_rpmsg_platform_init+0x1dc>)
	rvrings[0].info.num_descs = VRING_SIZE;
    276a:	8199      	strh	r1, [r3, #12]
	rvrings[1].info.vaddr = (void *)VRING_RX_ADDRESS;
    276c:	61d8      	str	r0, [r3, #28]
	rvrings[1].info.num_descs = VRING_SIZE;
    276e:	8499      	strh	r1, [r3, #36]	; 0x24
	vdev.func = &dispatch;
    2770:	6222      	str	r2, [r4, #32]
	rpmsg_virtio_init_shm_pool(&shpool, (void *)SHM_START_ADDR, SHM_SIZE);
    2772:	4628      	mov	r0, r5
    2774:	f44f 42f8 	mov.w	r2, #31744	; 0x7c00
    2778:	4928      	ldr	r1, [pc, #160]	; (281c <bt_rpmsg_platform_init+0x1e0>)
	vdev.vrings_info = &rvrings[0];
    277a:	62e3      	str	r3, [r4, #44]	; 0x2c
	rpmsg_virtio_init_shm_pool(&shpool, (void *)SHM_START_ADDR, SHM_SIZE);
    277c:	f013 ff9c 	bl	166b8 <rpmsg_virtio_init_shm_pool>
	err = rpmsg_init_vdev(&rvdev, &vdev, ns_bind_cb, io, &shpool);
    2780:	4621      	mov	r1, r4
    2782:	683b      	ldr	r3, [r7, #0]
    2784:	4a26      	ldr	r2, [pc, #152]	; (2820 <bt_rpmsg_platform_init+0x1e4>)
    2786:	4827      	ldr	r0, [pc, #156]	; (2824 <bt_rpmsg_platform_init+0x1e8>)
    2788:	9500      	str	r5, [sp, #0]
    278a:	f00c f913 	bl	e9b4 <rpmsg_init_vdev>
	if (err) {
    278e:	4604      	mov	r4, r0
    2790:	b118      	cbz	r0, 279a <bt_rpmsg_platform_init+0x15e>
		BT_ERR("rpmsg_init_vdev failed %d", err);
    2792:	4602      	mov	r2, r0
    2794:	2145      	movs	r1, #69	; 0x45
    2796:	4824      	ldr	r0, [pc, #144]	; (2828 <bt_rpmsg_platform_init+0x1ec>)
    2798:	e772      	b.n	2680 <bt_rpmsg_platform_init+0x44>
	return z_impl_k_sem_take(sem, timeout);
    279a:	f04f 32ff 	mov.w	r2, #4294967295
    279e:	f04f 33ff 	mov.w	r3, #4294967295
    27a2:	4822      	ldr	r0, [pc, #136]	; (282c <bt_rpmsg_platform_init+0x1f0>)
    27a4:	f00e fa70 	bl	10c88 <z_impl_k_sem_take>
	return 0;
    27a8:	e76c      	b.n	2684 <bt_rpmsg_platform_init+0x48>
    27aa:	bf00      	nop
    27ac:	0000e619 	.word	0x0000e619
    27b0:	20002200 	.word	0x20002200
    27b4:	200008bc 	.word	0x200008bc
    27b8:	00002609 	.word	0x00002609
    27bc:	00018029 	.word	0x00018029
    27c0:	20000190 	.word	0x20000190
    27c4:	00018051 	.word	0x00018051
    27c8:	20000930 	.word	0x20000930
    27cc:	00018081 	.word	0x00018081
    27d0:	0001808b 	.word	0x0001808b
    27d4:	00018093 	.word	0x00018093
    27d8:	20000974 	.word	0x20000974
    27dc:	000180b5 	.word	0x000180b5
    27e0:	000180e6 	.word	0x000180e6
    27e4:	20000978 	.word	0x20000978
    27e8:	000180ec 	.word	0x000180ec
    27ec:	00018114 	.word	0x00018114
    27f0:	0001811a 	.word	0x0001811a
    27f4:	00002631 	.word	0x00002631
    27f8:	20000a48 	.word	0x20000a48
    27fc:	00018142 	.word	0x00018142
    2800:	00018170 	.word	0x00018170
    2804:	20000a0c 	.word	0x20000a0c
    2808:	20077c00 	.word	0x20077c00
    280c:	20000690 	.word	0x20000690
    2810:	20077800 	.word	0x20077800
    2814:	00016fa4 	.word	0x00016fa4
    2818:	20000a3c 	.word	0x20000a3c
    281c:	20070400 	.word	0x20070400
    2820:	0000259d 	.word	0x0000259d
    2824:	2000097c 	.word	0x2000097c
    2828:	0001819e 	.word	0x0001819e
    282c:	20000428 	.word	0x20000428

00002830 <bt_rpmsg_platform_send>:

int bt_rpmsg_platform_send(struct net_buf *buf)
{
    2830:	b513      	push	{r0, r1, r4, lr}
	return rpmsg_send(&ep, buf->data, buf->len);
    2832:	6883      	ldr	r3, [r0, #8]
    2834:	8981      	ldrh	r1, [r0, #12]
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	if (ept->dest_addr == RPMSG_ADDR_ANY)
    2836:	4807      	ldr	r0, [pc, #28]	; (2854 <bt_rpmsg_platform_send+0x24>)
    2838:	6a82      	ldr	r2, [r0, #40]	; 0x28
    283a:	1c54      	adds	r4, r2, #1
    283c:	d007      	beq.n	284e <bt_rpmsg_platform_send+0x1e>
		return RPMSG_ERR_ADDR;
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
    283e:	2401      	movs	r4, #1
    2840:	e9cd 1400 	strd	r1, r4, [sp]
    2844:	6a41      	ldr	r1, [r0, #36]	; 0x24
    2846:	f00b ff71 	bl	e72c <rpmsg_send_offchannel_raw>
}
    284a:	b002      	add	sp, #8
    284c:	bd10      	pop	{r4, pc}
		return RPMSG_ERR_ADDR;
    284e:	4802      	ldr	r0, [pc, #8]	; (2858 <bt_rpmsg_platform_send+0x28>)
	return rpmsg_send(&ep, buf->data, buf->len);
    2850:	e7fb      	b.n	284a <bt_rpmsg_platform_send+0x1a>
    2852:	bf00      	nop
    2854:	20000934 	.word	0x20000934
    2858:	fffff829 	.word	0xfffff829

0000285c <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
    285c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
    285e:	4c06      	ldr	r4, [pc, #24]	; (2878 <z_clock_isr+0x1c>)
    2860:	4906      	ldr	r1, [pc, #24]	; (287c <z_clock_isr+0x20>)
    2862:	4622      	mov	r2, r4
    2864:	4806      	ldr	r0, [pc, #24]	; (2880 <z_clock_isr+0x24>)
    2866:	2317      	movs	r3, #23
    2868:	f00f fc4e 	bl	12108 <printk>
    286c:	4620      	mov	r0, r4
}
    286e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
    2872:	2117      	movs	r1, #23
    2874:	f00f bede 	b.w	12634 <assert_post_action>
    2878:	000181d1 	.word	0x000181d1
    287c:	0001ba27 	.word	0x0001ba27
    2880:	00017d82 	.word	0x00017d82

00002884 <handle_next_tick_case>:
 * counter progresses during that time it means that 1 tick elapsed and
 * interrupt is set pending.
 */
static void handle_next_tick_case(u32_t t)
{
	set_comparator(t + 2);
    2884:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    2886:	4b08      	ldr	r3, [pc, #32]	; (28a8 <handle_next_tick_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    2888:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    288c:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    2890:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
    2894:	4290      	cmp	r0, r2
    2896:	d100      	bne.n	289a <handle_next_tick_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
    2898:	4770      	bx	lr
    289a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
    289e:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    28a0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    28a4:	e7f2      	b.n	288c <handle_next_tick_case+0x8>
    28a6:	bf00      	nop
    28a8:	50015000 	.word	0x50015000

000028ac <rtc1_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    28ac:	2200      	movs	r2, #0
    28ae:	4b06      	ldr	r3, [pc, #24]	; (28c8 <rtc1_nrf_isr+0x1c>)
    28b0:	601a      	str	r2, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	u32_t t = get_comparator();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    28b2:	4a06      	ldr	r2, [pc, #24]	; (28cc <rtc1_nrf_isr+0x20>)
    return p_reg->CC[ch];
    28b4:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
    28b8:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    28ba:	1ac0      	subs	r0, r0, r3
    28bc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    28c0:	4403      	add	r3, r0
    28c2:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_ticks(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    28c4:	f00e bed8 	b.w	11678 <z_clock_announce>
    28c8:	50015140 	.word	0x50015140
    28cc:	20000a50 	.word	0x20000a50

000028d0 <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
    28d0:	b538      	push	{r3, r4, r5, lr}
    28d2:	4814      	ldr	r0, [pc, #80]	; (2924 <z_clock_driver_init+0x54>)
    28d4:	f00c f966 	bl	eba4 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_LABEL(DT_INST(0, nordic_nrf_clock)));
	if (!clock) {
    28d8:	b300      	cbz	r0, 291c <z_clock_driver_init+0x4c>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    28da:	6883      	ldr	r3, [r0, #8]
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    28dc:	2400      	movs	r4, #0
    28de:	2101      	movs	r1, #1
    28e0:	681b      	ldr	r3, [r3, #0]
    28e2:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    28e4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    28e8:	4d0f      	ldr	r5, [pc, #60]	; (2928 <z_clock_driver_init+0x58>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    28ea:	4b10      	ldr	r3, [pc, #64]	; (292c <z_clock_driver_init+0x5c>)
    p_reg->PRESCALER = val;
    28ec:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    28f0:	601c      	str	r4, [r3, #0]
    28f2:	4b0f      	ldr	r3, [pc, #60]	; (2930 <z_clock_driver_init+0x60>)
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC1_IRQn);
	int_enable();

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    28f4:	2101      	movs	r1, #1
    28f6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
    28fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    28fe:	4622      	mov	r2, r4
    2900:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    2904:	2015      	movs	r0, #21
    2906:	f001 f993 	bl	3c30 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
    290a:	2015      	movs	r0, #21
    290c:	f001 f980 	bl	3c10 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    2910:	2301      	movs	r3, #1

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
    2912:	4620      	mov	r0, r4
    2914:	4a07      	ldr	r2, [pc, #28]	; (2934 <z_clock_driver_init+0x64>)
    2916:	6013      	str	r3, [r2, #0]
    2918:	602b      	str	r3, [r5, #0]
}
    291a:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    291c:	f04f 30ff 	mov.w	r0, #4294967295
    2920:	e7fb      	b.n	291a <z_clock_driver_init+0x4a>
    2922:	bf00      	nop
    2924:	00017ead 	.word	0x00017ead
    2928:	50015000 	.word	0x50015000
    292c:	50015140 	.word	0x50015140
    2930:	e000e100 	.word	0xe000e100
    2934:	50015008 	.word	0x50015008

00002938 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    2938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     return p_reg->COUNTER;
    293a:	4b2c      	ldr	r3, [pc, #176]	; (29ec <z_clock_set_timeout+0xb4>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    293c:	4c2c      	ldr	r4, [pc, #176]	; (29f0 <z_clock_set_timeout+0xb8>)
    293e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	u32_t unannounced = counter_sub(counter(), last_count);
    2942:	4b2c      	ldr	r3, [pc, #176]	; (29f4 <z_clock_set_timeout+0xbc>)
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2944:	f1b0 3fff 	cmp.w	r0, #4294967295
    2948:	bf08      	it	eq
    294a:	4620      	moveq	r0, r4
	u32_t unannounced = counter_sub(counter(), last_count);
    294c:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    294e:	1a52      	subs	r2, r2, r1
    2950:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    2954:	0212      	lsls	r2, r2, #8
    2956:	d436      	bmi.n	29c6 <z_clock_set_timeout+0x8e>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    2958:	3801      	subs	r0, #1
    295a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    295e:	42a0      	cmp	r0, r4
    2960:	bfa8      	it	ge
    2962:	4620      	movge	r0, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    2964:	3301      	adds	r3, #1
    2966:	4418      	add	r0, r3
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    2968:	42a0      	cmp	r0, r4
    296a:	bf94      	ite	ls
    296c:	180c      	addls	r4, r1, r0
    296e:	190c      	addhi	r4, r1, r4
    p_reg->INTENCLR = mask;
    2970:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2974:	2700      	movs	r7, #0
    p_reg->INTENCLR = mask;
    2976:	4b1d      	ldr	r3, [pc, #116]	; (29ec <z_clock_set_timeout+0xb4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2978:	4e1f      	ldr	r6, [pc, #124]	; (29f8 <z_clock_set_timeout+0xc0>)
    p_reg->INTENCLR = mask;
    297a:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
     return p_reg->COUNTER;
    297e:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    return p_reg->CC[ch];
    2982:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    2986:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	return (a - b) & COUNTER_MAX;
    298a:	1a52      	subs	r2, r2, r1
    298c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (counter_sub(prev_val, now) == 1) {
    2990:	2a01      	cmp	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2992:	6037      	str	r7, [r6, #0]
    p_reg->CC[ch] = cc_val;
    2994:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    2998:	461d      	mov	r5, r3
    299a:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
    299e:	d103      	bne.n	29a8 <z_clock_set_timeout+0x70>
	z_impl_k_busy_wait(usec_to_wait);
    29a0:	200f      	movs	r0, #15
    29a2:	f013 ff4b 	bl	1683c <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    29a6:	6037      	str	r7, [r6, #0]
    29a8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    29ac:	4b13      	ldr	r3, [pc, #76]	; (29fc <z_clock_set_timeout+0xc4>)
    29ae:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
    29b2:	f8d5 0504 	ldr.w	r0, [r5, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    29b6:	1a23      	subs	r3, r4, r0
    29b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (diff == 1) {
    29bc:	2b01      	cmp	r3, #1
    29be:	d104      	bne.n	29ca <z_clock_set_timeout+0x92>
		handle_next_tick_case(t);
    29c0:	f7ff ff60 	bl	2884 <handle_next_tick_case>
    29c4:	e00b      	b.n	29de <z_clock_set_timeout+0xa6>
		ticks = 0;
    29c6:	2000      	movs	r0, #0
    29c8:	e7cc      	b.n	2964 <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    29ca:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    29ce:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
     return p_reg->COUNTER;
    29d2:	f8d5 0504 	ldr.w	r0, [r5, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    29d6:	1a24      	subs	r4, r4, r0
    29d8:	3c02      	subs	r4, #2
	if (diff > MAX_TICKS) {
    29da:	0223      	lsls	r3, r4, #8
    29dc:	d4f0      	bmi.n	29c0 <z_clock_set_timeout+0x88>
    p_reg->INTENSET = mask;
    29de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    29e2:	4b02      	ldr	r3, [pc, #8]	; (29ec <z_clock_set_timeout+0xb4>)
    29e4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	set_protected_absolute_ticks(cyc);
}
    29e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    29ea:	bf00      	nop
    29ec:	50015000 	.word	0x50015000
    29f0:	007fffff 	.word	0x007fffff
    29f4:	20000a50 	.word	0x20000a50
    29f8:	50015140 	.word	0x50015140
    29fc:	e000e100 	.word	0xe000e100

00002a00 <z_clock_elapsed>:

u32_t z_clock_elapsed(void)
{
    2a00:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    2a02:	f04f 0320 	mov.w	r3, #32
    2a06:	f3ef 8511 	mrs	r5, BASEPRI
    2a0a:	f383 8811 	msr	BASEPRI, r3
    2a0e:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2a12:	481a      	ldr	r0, [pc, #104]	; (2a7c <z_clock_elapsed+0x7c>)
    2a14:	f00e fb0e 	bl	11034 <z_spin_lock_valid>
    2a18:	b968      	cbnz	r0, 2a36 <z_clock_elapsed+0x36>
    2a1a:	235c      	movs	r3, #92	; 0x5c
    2a1c:	4a18      	ldr	r2, [pc, #96]	; (2a80 <z_clock_elapsed+0x80>)
    2a1e:	4919      	ldr	r1, [pc, #100]	; (2a84 <z_clock_elapsed+0x84>)
    2a20:	4819      	ldr	r0, [pc, #100]	; (2a88 <z_clock_elapsed+0x88>)
    2a22:	f00f fb71 	bl	12108 <printk>
    2a26:	4915      	ldr	r1, [pc, #84]	; (2a7c <z_clock_elapsed+0x7c>)
    2a28:	4818      	ldr	r0, [pc, #96]	; (2a8c <z_clock_elapsed+0x8c>)
    2a2a:	f00f fb6d 	bl	12108 <printk>
    2a2e:	215c      	movs	r1, #92	; 0x5c
    2a30:	4813      	ldr	r0, [pc, #76]	; (2a80 <z_clock_elapsed+0x80>)
    2a32:	f00f fdff 	bl	12634 <assert_post_action>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
    2a36:	4811      	ldr	r0, [pc, #68]	; (2a7c <z_clock_elapsed+0x7c>)
    2a38:	f00e fb18 	bl	1106c <z_spin_lock_set_owner>
     return p_reg->COUNTER;
    2a3c:	4b14      	ldr	r3, [pc, #80]	; (2a90 <z_clock_elapsed+0x90>)
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2a3e:	480f      	ldr	r0, [pc, #60]	; (2a7c <z_clock_elapsed+0x7c>)
    2a40:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    2a44:	4b13      	ldr	r3, [pc, #76]	; (2a94 <z_clock_elapsed+0x94>)
	return (a - b) & COUNTER_MAX;
    2a46:	681b      	ldr	r3, [r3, #0]
    2a48:	1ae4      	subs	r4, r4, r3
    2a4a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    2a4e:	f00e faff 	bl	11050 <z_spin_unlock_valid>
    2a52:	b968      	cbnz	r0, 2a70 <z_clock_elapsed+0x70>
    2a54:	2384      	movs	r3, #132	; 0x84
    2a56:	4a0a      	ldr	r2, [pc, #40]	; (2a80 <z_clock_elapsed+0x80>)
    2a58:	490f      	ldr	r1, [pc, #60]	; (2a98 <z_clock_elapsed+0x98>)
    2a5a:	480b      	ldr	r0, [pc, #44]	; (2a88 <z_clock_elapsed+0x88>)
    2a5c:	f00f fb54 	bl	12108 <printk>
    2a60:	4906      	ldr	r1, [pc, #24]	; (2a7c <z_clock_elapsed+0x7c>)
    2a62:	480e      	ldr	r0, [pc, #56]	; (2a9c <z_clock_elapsed+0x9c>)
    2a64:	f00f fb50 	bl	12108 <printk>
    2a68:	2184      	movs	r1, #132	; 0x84
    2a6a:	4805      	ldr	r0, [pc, #20]	; (2a80 <z_clock_elapsed+0x80>)
    2a6c:	f00f fde2 	bl	12634 <assert_post_action>
	__asm__ volatile(
    2a70:	f385 8811 	msr	BASEPRI, r5
    2a74:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    2a78:	4620      	mov	r0, r4
    2a7a:	bd38      	pop	{r3, r4, r5, pc}
    2a7c:	20000a54 	.word	0x20000a54
    2a80:	0001820d 	.word	0x0001820d
    2a84:	00018233 	.word	0x00018233
    2a88:	00017d82 	.word	0x00017d82
    2a8c:	00018248 	.word	0x00018248
    2a90:	50015000 	.word	0x50015000
    2a94:	20000a50 	.word	0x20000a50
    2a98:	00018260 	.word	0x00018260
    2a9c:	00018277 	.word	0x00018277

00002aa0 <user_data_alloc.constprop.0>:

/* Currently only one instance is supported */
static struct bt_gatt_dm bt_gatt_dm_inst;

/* Returns pointer to newly allocated space in a dm->data_chunk */
static void *user_data_alloc(struct bt_gatt_dm *dm,
    2aa0:	b538      	push	{r3, r4, r5, lr}
	struct data_chunk_item *item;

	/* Round up len to 32 bits to make sure that return pointers are always
	 * correctly aligned.
	 */
	len = (len + DATA_ALIGN - 1) & ~(DATA_ALIGN - 1);
    2aa2:	1cc5      	adds	r5, r0, #3
    2aa4:	f025 0503 	bic.w	r5, r5, #3

	__ASSERT_NO_MSG(len <= CHUNK_DATA_SIZE);
    2aa8:	2d74      	cmp	r5, #116	; 0x74
    2aaa:	d909      	bls.n	2ac0 <user_data_alloc.constprop.0+0x20>
    2aac:	4918      	ldr	r1, [pc, #96]	; (2b10 <user_data_alloc.constprop.0+0x70>)
    2aae:	4819      	ldr	r0, [pc, #100]	; (2b14 <user_data_alloc.constprop.0+0x74>)
    2ab0:	2350      	movs	r3, #80	; 0x50
    2ab2:	4a19      	ldr	r2, [pc, #100]	; (2b18 <user_data_alloc.constprop.0+0x78>)
    2ab4:	f00f fb28 	bl	12108 <printk>
    2ab8:	2150      	movs	r1, #80	; 0x50
    2aba:	4817      	ldr	r0, [pc, #92]	; (2b18 <user_data_alloc.constprop.0+0x78>)
    2abc:	f00f fdba 	bl	12634 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
    2ac0:	4c16      	ldr	r4, [pc, #88]	; (2b1c <user_data_alloc.constprop.0+0x7c>)

	if (sys_slist_is_empty(&dm->chunk_list) ||
    2ac2:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    2ac6:	b123      	cbz	r3, 2ad2 <user_data_alloc.constprop.0+0x32>
	    dm->cur_chunk_len + len > CHUNK_DATA_SIZE) {
    2ac8:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    2acc:	442b      	add	r3, r5
	if (sys_slist_is_empty(&dm->chunk_list) ||
    2ace:	2b74      	cmp	r3, #116	; 0x74
    2ad0:	d918      	bls.n	2b04 <user_data_alloc.constprop.0+0x64>

		item = k_malloc(sizeof(struct data_chunk_item));
    2ad2:	2078      	movs	r0, #120	; 0x78
    2ad4:	f00c fc12 	bl	f2fc <k_malloc>

		if (!item) {
    2ad8:	b178      	cbz	r0, 2afa <user_data_alloc.constprop.0+0x5a>
	parent->next = child;
    2ada:	2300      	movs	r3, #0
    2adc:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
    2ade:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    2ae2:	b95a      	cbnz	r2, 2afc <user_data_alloc.constprop.0+0x5c>
	list->head = node;
    2ae4:	e9c4 004f 	strd	r0, r0, [r4, #316]	; 0x13c
			return NULL;
		}

		sys_slist_append(&dm->chunk_list, &item->node);
		dm->cur_chunk_len = 0;
    2ae8:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
		item = SYS_SLIST_PEEK_TAIL_CONTAINER(&dm->chunk_list, item,
						     node);

	}

	user_data_loc = &item->data[dm->cur_chunk_len];
    2aec:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    2af0:	1d1a      	adds	r2, r3, #4
	dm->cur_chunk_len += len;
    2af2:	441d      	add	r5, r3
	user_data_loc = &item->data[dm->cur_chunk_len];
    2af4:	4410      	add	r0, r2
	dm->cur_chunk_len += len;
    2af6:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144

	return user_data_loc;
}
    2afa:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
    2afc:	6010      	str	r0, [r2, #0]
	list->tail = node;
    2afe:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
}
    2b02:	e7f1      	b.n	2ae8 <user_data_alloc.constprop.0+0x48>
	return list->tail;
    2b04:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
    2b08:	2800      	cmp	r0, #0
    2b0a:	bf38      	it	cc
    2b0c:	2000      	movcc	r0, #0
    2b0e:	e7ed      	b.n	2aec <user_data_alloc.constprop.0+0x4c>
    2b10:	000182b7 	.word	0x000182b7
    2b14:	00017d82 	.word	0x00017d82
    2b18:	0001828c 	.word	0x0001828c
    2b1c:	20000a58 	.word	0x20000a58

00002b20 <attr_store.constprop.0>:
 * @param[in] attr           Service attribute
 * @param[in] additional_len Additional buffer length
 *
 * @return Pointer to newly stored attribute.
 */
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    2b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_gatt_dm_attr *cur_attr;

	LOG_DBG("Attr store, pos: %zu, handle: %"PRIu16,
		dm->cur_attr_id,
		attr->handle);
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    2b24:	4c1f      	ldr	r4, [pc, #124]	; (2ba4 <attr_store.constprop.0+0x84>)
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    2b26:	4606      	mov	r6, r0
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    2b28:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    2b2c:	460d      	mov	r5, r1
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    2b2e:	2b22      	cmp	r3, #34	; 0x22
    2b30:	d907      	bls.n	2b42 <attr_store.constprop.0+0x22>
		LOG_ERR("No space for new attribute.");
    2b32:	2145      	movs	r1, #69	; 0x45
    2b34:	481c      	ldr	r0, [pc, #112]	; (2ba8 <attr_store.constprop.0+0x88>)
    2b36:	f00f fae7 	bl	12108 <printk>
		return NULL;
    2b3a:	2700      	movs	r7, #0
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];

	memcpy(cur_attr->uuid, attr->uuid, uuid_size);

	return cur_attr;
}
    2b3c:	4638      	mov	r0, r7
    2b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	size_t uuid_size = get_uuid_size(attr->uuid);
    2b42:	6803      	ldr	r3, [r0, #0]
    2b44:	781b      	ldrb	r3, [r3, #0]
	switch (uuid->type) {
    2b46:	2b02      	cmp	r3, #2
    2b48:	d80d      	bhi.n	2b66 <attr_store.constprop.0+0x46>
    2b4a:	4a18      	ldr	r2, [pc, #96]	; (2bac <attr_store.constprop.0+0x8c>)
    2b4c:	f812 9003 	ldrb.w	r9, [r2, r3]
	u8_t *attr_data = user_data_alloc(dm, additional_len + uuid_size);
    2b50:	eb05 0009 	add.w	r0, r5, r9
    2b54:	f7ff ffa4 	bl	2aa0 <user_data_alloc.constprop.0>
	if (!attr_data) {
    2b58:	4607      	mov	r7, r0
    2b5a:	b958      	cbnz	r0, 2b74 <attr_store.constprop.0+0x54>
		LOG_ERR("No space for attribute data.");
    2b5c:	2145      	movs	r1, #69	; 0x45
    2b5e:	4814      	ldr	r0, [pc, #80]	; (2bb0 <attr_store.constprop.0+0x90>)
    2b60:	f00f fad2 	bl	12108 <printk>
		return NULL;
    2b64:	e7ea      	b.n	2b3c <attr_store.constprop.0+0x1c>
		LOG_ERR("Unsupported UUID type.");
    2b66:	2145      	movs	r1, #69	; 0x45
    2b68:	4812      	ldr	r0, [pc, #72]	; (2bb4 <attr_store.constprop.0+0x94>)
    2b6a:	f00f facd 	bl	12108 <printk>
    2b6e:	f04f 0900 	mov.w	r9, #0
    2b72:	e7ed      	b.n	2b50 <attr_store.constprop.0+0x30>
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
    2b74:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];
    2b78:	4428      	add	r0, r5
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
    2b7a:	1c5a      	adds	r2, r3, #1
    2b7c:	3303      	adds	r3, #3
    2b7e:	00db      	lsls	r3, r3, #3
    2b80:	f103 0804 	add.w	r8, r3, #4
    2b84:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
    2b88:	44a0      	add	r8, r4
	cur_attr->handle = attr->handle;
    2b8a:	441c      	add	r4, r3
    2b8c:	8a33      	ldrh	r3, [r6, #16]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    2b8e:	464a      	mov	r2, r9
	cur_attr->handle = attr->handle;
    2b90:	8123      	strh	r3, [r4, #8]
	cur_attr->perm = attr->perm;
    2b92:	7cb3      	ldrb	r3, [r6, #18]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    2b94:	6831      	ldr	r1, [r6, #0]
	cur_attr->perm = attr->perm;
    2b96:	72a3      	strb	r3, [r4, #10]
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];
    2b98:	6060      	str	r0, [r4, #4]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    2b9a:	f010 fdca 	bl	13732 <memcpy>
	return cur_attr;
    2b9e:	4647      	mov	r7, r8
    2ba0:	e7cc      	b.n	2b3c <attr_store.constprop.0+0x1c>
    2ba2:	bf00      	nop
    2ba4:	20000a58 	.word	0x20000a58
    2ba8:	00018307 	.word	0x00018307
    2bac:	0001867c 	.word	0x0001867c
    2bb0:	00018344 	.word	0x00018344
    2bb4:	00018328 	.word	0x00018328

00002bb8 <discovery_complete.constprop.0>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2bb8:	4808      	ldr	r0, [pc, #32]	; (2bdc <discovery_complete.constprop.0+0x24>)
    2bba:	f500 739c 	add.w	r3, r0, #312	; 0x138
    2bbe:	e8d3 2fef 	ldaex	r2, [r3]
    2bc2:	f042 0202 	orr.w	r2, r2, #2
    2bc6:	e8c3 2fe1 	stlex	r1, r2, [r3]
    2bca:	2900      	cmp	r1, #0
    2bcc:	d1f7      	bne.n	2bbe <discovery_complete.constprop.0+0x6>

static void discovery_complete(struct bt_gatt_dm *dm)
{
	LOG_DBG("Discovery complete.");
	atomic_set_bit(dm->state_flags, STATE_ATTRS_RELEASE_PENDING);
	if (dm->callback->completed) {
    2bce:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
    2bd2:	681b      	ldr	r3, [r3, #0]
    2bd4:	b10b      	cbz	r3, 2bda <discovery_complete.constprop.0+0x22>
		dm->callback->completed(dm, dm->context);
    2bd6:	6841      	ldr	r1, [r0, #4]
    2bd8:	4718      	bx	r3
	}
}
    2bda:	4770      	bx	lr
    2bdc:	20000a58 	.word	0x20000a58

00002be0 <discovery_complete_error.constprop.0>:
	if (dm->callback->service_not_found) {
		dm->callback->service_not_found(dm->conn, dm->context);
	}
}

static void discovery_complete_error(struct bt_gatt_dm *dm, int err)
    2be0:	b570      	push	{r4, r5, r6, lr}
{
	svc_attr_memory_release(dm);
    2be2:	4c0b      	ldr	r4, [pc, #44]	; (2c10 <discovery_complete_error.constprop.0+0x30>)
static void discovery_complete_error(struct bt_gatt_dm *dm, int err)
    2be4:	4605      	mov	r5, r0
	svc_attr_memory_release(dm);
    2be6:	4620      	mov	r0, r4
    2be8:	f00f ff97 	bl	12b1a <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2bec:	f06f 0101 	mvn.w	r1, #1
    2bf0:	f504 709c 	add.w	r0, r4, #312	; 0x138
    2bf4:	f00f ffa8 	bl	12b48 <atomic_and>
	atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);
	if (dm->callback->error_found) {
    2bf8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    2bfc:	689b      	ldr	r3, [r3, #8]
    2bfe:	b12b      	cbz	r3, 2c0c <discovery_complete_error.constprop.0+0x2c>
		dm->callback->error_found(dm->conn, err, dm->context);
    2c00:	4629      	mov	r1, r5
    2c02:	6862      	ldr	r2, [r4, #4]
    2c04:	6820      	ldr	r0, [r4, #0]
	}
}
    2c06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		dm->callback->error_found(dm->conn, err, dm->context);
    2c0a:	4718      	bx	r3
}
    2c0c:	bd70      	pop	{r4, r5, r6, pc}
    2c0e:	bf00      	nop
    2c10:	20000a58 	.word	0x20000a58

00002c14 <uuid_store.constprop.0>:
static struct bt_uuid *uuid_store(struct bt_gatt_dm *dm,
    2c14:	b570      	push	{r4, r5, r6, lr}
	if (!uuid) {
    2c16:	4604      	mov	r4, r0
    2c18:	b930      	cbnz	r0, 2c28 <uuid_store.constprop.0+0x14>
		LOG_ERR("Uninitialized UUID.");
    2c1a:	2145      	movs	r1, #69	; 0x45
    2c1c:	480c      	ldr	r0, [pc, #48]	; (2c50 <uuid_store.constprop.0+0x3c>)
    2c1e:	f00f fa73 	bl	12108 <printk>
    2c22:	4625      	mov	r5, r4
}
    2c24:	4628      	mov	r0, r5
    2c26:	bd70      	pop	{r4, r5, r6, pc}
	size_t size = get_uuid_size(uuid);
    2c28:	7803      	ldrb	r3, [r0, #0]
	switch (uuid->type) {
    2c2a:	2b02      	cmp	r3, #2
    2c2c:	d80a      	bhi.n	2c44 <uuid_store.constprop.0+0x30>
    2c2e:	4a09      	ldr	r2, [pc, #36]	; (2c54 <uuid_store.constprop.0+0x40>)
    2c30:	5cd6      	ldrb	r6, [r2, r3]
	void *buffer = user_data_alloc(dm, size);
    2c32:	4630      	mov	r0, r6
    2c34:	f7ff ff34 	bl	2aa0 <user_data_alloc.constprop.0>
	memcpy(buffer, uuid, size);
    2c38:	4632      	mov	r2, r6
    2c3a:	4621      	mov	r1, r4
	void *buffer = user_data_alloc(dm, size);
    2c3c:	4605      	mov	r5, r0
	memcpy(buffer, uuid, size);
    2c3e:	f010 fd78 	bl	13732 <memcpy>
	return (struct bt_uuid *)buffer;
    2c42:	e7ef      	b.n	2c24 <uuid_store.constprop.0+0x10>
		LOG_ERR("Unsupported UUID type.");
    2c44:	2145      	movs	r1, #69	; 0x45
    2c46:	4804      	ldr	r0, [pc, #16]	; (2c58 <uuid_store.constprop.0+0x44>)
    2c48:	f00f fa5e 	bl	12108 <printk>
    2c4c:	2600      	movs	r6, #0
    2c4e:	e7f0      	b.n	2c32 <uuid_store.constprop.0+0x1e>
    2c50:	00018366 	.word	0x00018366
    2c54:	0001867c 	.word	0x0001867c
    2c58:	00018328 	.word	0x00018328

00002c5c <discovery_callback>:
}

static u8_t discovery_callback(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr,
			       struct bt_gatt_discover_params *params)
{
    2c5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    2c60:	460d      	mov	r5, r1
		LOG_DBG("NULL attribute");
	} else {
		LOG_DBG("Attr: handle %u", attr->handle);
	}

	if (conn != bt_gatt_dm_inst.conn) {
    2c62:	497d      	ldr	r1, [pc, #500]	; (2e58 <discovery_callback+0x1fc>)
    2c64:	680b      	ldr	r3, [r1, #0]
    2c66:	460f      	mov	r7, r1
    2c68:	4283      	cmp	r3, r0
    2c6a:	d008      	beq.n	2c7e <discovery_callback+0x22>
		LOG_ERR("Unexpected conn object. Aborting.");
    2c6c:	487b      	ldr	r0, [pc, #492]	; (2e5c <discovery_callback+0x200>)
    2c6e:	2145      	movs	r1, #69	; 0x45
    2c70:	f00f fa4a 	bl	12108 <printk>
		discovery_complete_error(&bt_gatt_dm_inst, -EFAULT);
    2c74:	f06f 000d 	mvn.w	r0, #13
				discovery_complete_error(dm, err);
    2c78:	f7ff ffb2 	bl	2be0 <discovery_complete_error.constprop.0>
    2c7c:	e034      	b.n	2ce8 <discovery_callback+0x8c>
		return BT_GATT_ITER_STOP;
	}

	switch (params->type) {
    2c7e:	7c13      	ldrb	r3, [r2, #16]
    2c80:	2b03      	cmp	r3, #3
    2c82:	f000 80b3 	beq.w	2dec <discovery_callback+0x190>
    2c86:	d811      	bhi.n	2cac <discovery_callback+0x50>
    2c88:	2b02      	cmp	r3, #2
    2c8a:	d129      	bne.n	2ce0 <discovery_callback+0x84>
		return discovery_process_characteristic(&bt_gatt_dm_inst,
							attr,
							params);
	default:
		/* This should not be possible */
		__ASSERT(false, "Unknown param type.");
    2c8c:	f240 13b3 	movw	r3, #435	; 0x1b3
    2c90:	4a73      	ldr	r2, [pc, #460]	; (2e60 <discovery_callback+0x204>)
    2c92:	4974      	ldr	r1, [pc, #464]	; (2e64 <discovery_callback+0x208>)
    2c94:	4874      	ldr	r0, [pc, #464]	; (2e68 <discovery_callback+0x20c>)
    2c96:	f00f fa37 	bl	12108 <printk>
    2c9a:	4874      	ldr	r0, [pc, #464]	; (2e6c <discovery_callback+0x210>)
    2c9c:	f00f fa34 	bl	12108 <printk>
    2ca0:	f240 11b3 	movw	r1, #435	; 0x1b3
    2ca4:	486e      	ldr	r0, [pc, #440]	; (2e60 <discovery_callback+0x204>)
    2ca6:	f00f fcc5 	bl	12634 <assert_post_action>
    2caa:	e01d      	b.n	2ce8 <discovery_callback+0x8c>
	switch (params->type) {
    2cac:	2b05      	cmp	r3, #5
    2cae:	d1ed      	bne.n	2c8c <discovery_callback+0x30>
	if (!attr) {
    2cb0:	2d00      	cmp	r5, #0
    2cb2:	f040 8082 	bne.w	2dba <discovery_callback+0x15e>
		if (dm->cur_attr_id > 1) {
    2cb6:	f8d1 3134 	ldr.w	r3, [r1, #308]	; 0x134
    2cba:	2b01      	cmp	r3, #1
    2cbc:	d97a      	bls.n	2db4 <discovery_callback+0x158>
				dm->attrs[0].handle + 1;
    2cbe:	8c0b      	ldrh	r3, [r1, #32]
			int err = bt_gatt_discover(dm->conn,
    2cc0:	3108      	adds	r1, #8
				dm->attrs[0].handle + 1;
    2cc2:	3301      	adds	r3, #1
			dm->discover_params.start_handle =
    2cc4:	810b      	strh	r3, [r1, #8]
			dm->discover_params.type =
    2cc6:	2303      	movs	r3, #3
    2cc8:	740b      	strb	r3, [r1, #16]
			int err = bt_gatt_discover(dm->conn,
    2cca:	f007 fed3 	bl	aa74 <bt_gatt_discover>
			if (err) {
    2cce:	4604      	mov	r4, r0
    2cd0:	b150      	cbz	r0, 2ce8 <discovery_callback+0x8c>
				LOG_ERR("Characteristic discover failed,"
    2cd2:	4602      	mov	r2, r0
    2cd4:	2145      	movs	r1, #69	; 0x45
    2cd6:	4866      	ldr	r0, [pc, #408]	; (2e70 <discovery_callback+0x214>)
    2cd8:	f00f fa16 	bl	12108 <printk>
				discovery_complete_error(dm, err);
    2cdc:	4620      	mov	r0, r4
    2cde:	e7cb      	b.n	2c78 <discovery_callback+0x1c>
	if (!attr) {
    2ce0:	b925      	cbnz	r5, 2cec <discovery_callback+0x90>
		discovery_complete_not_found(dm);
    2ce2:	4608      	mov	r0, r1
    2ce4:	f00f ff3b 	bl	12b5e <discovery_complete_not_found>
		__ASSERT(false, "Unknown param type.");
    2ce8:	2400      	movs	r4, #0
    2cea:	e04b      	b.n	2d84 <discovery_callback+0x128>
		attr_store(dm, attr, sizeof(*service_val));
    2cec:	2108      	movs	r1, #8
    2cee:	4628      	mov	r0, r5
	struct bt_gatt_service_val *service_val = attr->user_data;
    2cf0:	f8d5 800c 	ldr.w	r8, [r5, #12]
		attr_store(dm, attr, sizeof(*service_val));
    2cf4:	f7ff ff14 	bl	2b20 <attr_store.constprop.0>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
    2cf8:	2400      	movs	r4, #0
    2cfa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
		attr_store(dm, attr, sizeof(*service_val));
    2cfe:	4606      	mov	r6, r0
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
    2d00:	a901      	add	r1, sp, #4
    2d02:	6828      	ldr	r0, [r5, #0]
    2d04:	f88d 4004 	strb.w	r4, [sp, #4]
    2d08:	f8ad 3006 	strh.w	r3, [sp, #6]
    2d0c:	f010 fdac 	bl	13868 <bt_uuid_cmp>
    2d10:	b1b0      	cbz	r0, 2d40 <discovery_callback+0xe4>
    2d12:	f642 0301 	movw	r3, #10241	; 0x2801
    2d16:	4669      	mov	r1, sp
    2d18:	6828      	ldr	r0, [r5, #0]
    2d1a:	f88d 4000 	strb.w	r4, [sp]
    2d1e:	f8ad 3002 	strh.w	r3, [sp, #2]
    2d22:	f010 fda1 	bl	13868 <bt_uuid_cmp>
    2d26:	b158      	cbz	r0, 2d40 <discovery_callback+0xe4>
    2d28:	4952      	ldr	r1, [pc, #328]	; (2e74 <discovery_callback+0x218>)
    2d2a:	484f      	ldr	r0, [pc, #316]	; (2e68 <discovery_callback+0x20c>)
    2d2c:	f240 1317 	movw	r3, #279	; 0x117
    2d30:	4a4b      	ldr	r2, [pc, #300]	; (2e60 <discovery_callback+0x204>)
    2d32:	f00f f9e9 	bl	12108 <printk>
    2d36:	f240 1117 	movw	r1, #279	; 0x117
    2d3a:	4849      	ldr	r0, [pc, #292]	; (2e60 <discovery_callback+0x204>)
    2d3c:	f00f fc7a 	bl	12634 <assert_post_action>
	if (!cur_attr) {
    2d40:	b936      	cbnz	r6, 2d50 <discovery_callback+0xf4>
		LOG_ERR("Not enough memory for service attribute.");
    2d42:	484d      	ldr	r0, [pc, #308]	; (2e78 <discovery_callback+0x21c>)
    2d44:	2145      	movs	r1, #69	; 0x45
    2d46:	f00f f9df 	bl	12108 <printk>
		discovery_complete_error(dm, -ENOMEM);
    2d4a:	f06f 000b 	mvn.w	r0, #11
    2d4e:	e793      	b.n	2c78 <discovery_callback+0x1c>
		bt_gatt_dm_attr_service_val(cur_attr);
    2d50:	4630      	mov	r0, r6
    2d52:	f00f ff18 	bl	12b86 <bt_gatt_dm_attr_service_val>
    2d56:	4605      	mov	r5, r0
	memcpy(cur_service_val, service_val, sizeof(*cur_service_val));
    2d58:	2208      	movs	r2, #8
    2d5a:	4641      	mov	r1, r8
    2d5c:	f010 fce9 	bl	13732 <memcpy>
	cur_service_val->uuid = uuid_store(dm, cur_service_val->uuid);
    2d60:	6828      	ldr	r0, [r5, #0]
    2d62:	f7ff ff57 	bl	2c14 <uuid_store.constprop.0>
    2d66:	4604      	mov	r4, r0
    2d68:	6028      	str	r0, [r5, #0]
	if (!cur_service_val->uuid) {
    2d6a:	b930      	cbnz	r0, 2d7a <discovery_callback+0x11e>
		LOG_ERR("Not enough memory for service attribute data.");
    2d6c:	2145      	movs	r1, #69	; 0x45
    2d6e:	4843      	ldr	r0, [pc, #268]	; (2e7c <discovery_callback+0x220>)
    2d70:	f00f f9ca 	bl	12108 <printk>
		discovery_complete_error(dm, -ENOMEM);
    2d74:	f06f 000b 	mvn.w	r0, #11
    2d78:	e05a      	b.n	2e30 <discovery_callback+0x1d4>
	if (cur_attr->handle == cur_service_val->end_handle) {
    2d7a:	88aa      	ldrh	r2, [r5, #4]
    2d7c:	88b3      	ldrh	r3, [r6, #4]
    2d7e:	4293      	cmp	r3, r2
    2d80:	d104      	bne.n	2d8c <discovery_callback+0x130>
		return BT_GATT_ITER_CONTINUE;
    2d82:	2401      	movs	r4, #1
		break;
	}

	return BT_GATT_ITER_STOP;
}
    2d84:	4620      	mov	r0, r4
    2d86:	b002      	add	sp, #8
    2d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
    2d8c:	2305      	movs	r3, #5
	dm->discover_params.uuid         = NULL;
    2d8e:	2400      	movs	r4, #0
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
    2d90:	763b      	strb	r3, [r7, #24]
	dm->discover_params.start_handle = cur_attr->handle + 1;
    2d92:	88b3      	ldrh	r3, [r6, #4]
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
    2d94:	493a      	ldr	r1, [pc, #232]	; (2e80 <discovery_callback+0x224>)
	dm->discover_params.start_handle = cur_attr->handle + 1;
    2d96:	3301      	adds	r3, #1
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
    2d98:	6838      	ldr	r0, [r7, #0]
	dm->discover_params.end_handle   = cur_service_val->end_handle;
    2d9a:	82fa      	strh	r2, [r7, #22]
	dm->discover_params.uuid         = NULL;
    2d9c:	60bc      	str	r4, [r7, #8]
	dm->discover_params.start_handle = cur_attr->handle + 1;
    2d9e:	823b      	strh	r3, [r7, #16]
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
    2da0:	f007 fe68 	bl	aa74 <bt_gatt_discover>
	if (err) {
    2da4:	4602      	mov	r2, r0
    2da6:	2800      	cmp	r0, #0
    2da8:	d09e      	beq.n	2ce8 <discovery_callback+0x8c>
		LOG_ERR("Descriptor discover failed, error: %d.", err);
    2daa:	2145      	movs	r1, #69	; 0x45
    2dac:	4835      	ldr	r0, [pc, #212]	; (2e84 <discovery_callback+0x228>)
		LOG_ERR("Not enough memory for next attribute descriptor"
    2dae:	f00f f9ab 	bl	12108 <printk>
		discovery_complete_error(dm, -ENOMEM);
    2db2:	e7df      	b.n	2d74 <discovery_callback+0x118>
			discovery_complete(dm);
    2db4:	f7ff ff00 	bl	2bb8 <discovery_complete.constprop.0>
    2db8:	e796      	b.n	2ce8 <discovery_callback+0x8c>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
    2dba:	2400      	movs	r4, #0
    2dbc:	f642 0303 	movw	r3, #10243	; 0x2803
    2dc0:	6828      	ldr	r0, [r5, #0]
    2dc2:	a901      	add	r1, sp, #4
    2dc4:	f88d 4004 	strb.w	r4, [sp, #4]
    2dc8:	f8ad 3006 	strh.w	r3, [sp, #6]
    2dcc:	f010 fd4c 	bl	13868 <bt_uuid_cmp>
    2dd0:	b950      	cbnz	r0, 2de8 <discovery_callback+0x18c>
		cur_attr = attr_store(dm, attr, sizeof(struct bt_gatt_chrc));
    2dd2:	2108      	movs	r1, #8
		cur_attr = attr_store(dm, attr, 0);
    2dd4:	4628      	mov	r0, r5
    2dd6:	f7ff fea3 	bl	2b20 <attr_store.constprop.0>
    2dda:	4604      	mov	r4, r0
	if (!cur_attr) {
    2ddc:	2800      	cmp	r0, #0
    2dde:	d1d0      	bne.n	2d82 <discovery_callback+0x126>
		LOG_ERR("Not enough memory for next attribute descriptor"
    2de0:	2145      	movs	r1, #69	; 0x45
    2de2:	8a2a      	ldrh	r2, [r5, #16]
    2de4:	4828      	ldr	r0, [pc, #160]	; (2e88 <discovery_callback+0x22c>)
    2de6:	e7e2      	b.n	2dae <discovery_callback+0x152>
		cur_attr = attr_store(dm, attr, 0);
    2de8:	4621      	mov	r1, r4
    2dea:	e7f3      	b.n	2dd4 <discovery_callback+0x178>
	if (!attr) {
    2dec:	2d00      	cmp	r5, #0
    2dee:	d0e1      	beq.n	2db4 <discovery_callback+0x158>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0);
    2df0:	2300      	movs	r3, #0
    2df2:	f88d 3004 	strb.w	r3, [sp, #4]
    2df6:	f642 0303 	movw	r3, #10243	; 0x2803
    2dfa:	6828      	ldr	r0, [r5, #0]
    2dfc:	a901      	add	r1, sp, #4
    2dfe:	f8ad 3006 	strh.w	r3, [sp, #6]
    2e02:	f010 fd31 	bl	13868 <bt_uuid_cmp>
    2e06:	b158      	cbz	r0, 2e20 <discovery_callback+0x1c4>
    2e08:	4920      	ldr	r1, [pc, #128]	; (2e8c <discovery_callback+0x230>)
    2e0a:	4817      	ldr	r0, [pc, #92]	; (2e68 <discovery_callback+0x20c>)
    2e0c:	f44f 73c0 	mov.w	r3, #384	; 0x180
    2e10:	4a13      	ldr	r2, [pc, #76]	; (2e60 <discovery_callback+0x204>)
    2e12:	f00f f979 	bl	12108 <printk>
    2e16:	f44f 71c0 	mov.w	r1, #384	; 0x180
    2e1a:	4811      	ldr	r0, [pc, #68]	; (2e60 <discovery_callback+0x204>)
    2e1c:	f00f fc0a 	bl	12634 <assert_post_action>
	cur_attr = attr_find_by_handle(dm, attr->handle);
    2e20:	8a29      	ldrh	r1, [r5, #16]
    2e22:	480d      	ldr	r0, [pc, #52]	; (2e58 <discovery_callback+0x1fc>)
    2e24:	f00f fe5b 	bl	12ade <attr_find_by_handle>
	if (!cur_attr) {
    2e28:	4604      	mov	r4, r0
    2e2a:	b920      	cbnz	r0, 2e36 <discovery_callback+0x1da>
		discovery_complete_error(dm, -ESRCH);
    2e2c:	f06f 0002 	mvn.w	r0, #2
		discovery_complete_error(dm, -ENOMEM);
    2e30:	f7ff fed6 	bl	2be0 <discovery_complete_error.constprop.0>
		return BT_GATT_ITER_STOP;
    2e34:	e7a6      	b.n	2d84 <discovery_callback+0x128>
	gatt_chrc = attr->user_data;
    2e36:	68ec      	ldr	r4, [r5, #12]
	cur_gatt_chrc = bt_gatt_dm_attr_chrc_val(cur_attr);
    2e38:	f00f fec5 	bl	12bc6 <bt_gatt_dm_attr_chrc_val>
    2e3c:	4605      	mov	r5, r0
	memcpy(cur_gatt_chrc, gatt_chrc, sizeof(*cur_gatt_chrc));
    2e3e:	4621      	mov	r1, r4
    2e40:	2208      	movs	r2, #8
    2e42:	f010 fc76 	bl	13732 <memcpy>
	cur_gatt_chrc->uuid = uuid_store(dm, cur_gatt_chrc->uuid);
    2e46:	6828      	ldr	r0, [r5, #0]
    2e48:	f7ff fee4 	bl	2c14 <uuid_store.constprop.0>
    2e4c:	4604      	mov	r4, r0
    2e4e:	6028      	str	r0, [r5, #0]
	if (!cur_gatt_chrc->uuid) {
    2e50:	2800      	cmp	r0, #0
    2e52:	d196      	bne.n	2d82 <discovery_callback+0x126>
    2e54:	e78e      	b.n	2d74 <discovery_callback+0x118>
    2e56:	bf00      	nop
    2e58:	20000a58 	.word	0x20000a58
    2e5c:	0001837f 	.word	0x0001837f
    2e60:	0001828c 	.word	0x0001828c
    2e64:	0001ba27 	.word	0x0001ba27
    2e68:	00017d82 	.word	0x00017d82
    2e6c:	00018626 	.word	0x00018626
    2e70:	00018534 	.word	0x00018534
    2e74:	000183a6 	.word	0x000183a6
    2e78:	000184a7 	.word	0x000184a7
    2e7c:	000184d5 	.word	0x000184d5
    2e80:	20000a60 	.word	0x20000a60
    2e84:	00018508 	.word	0x00018508
    2e88:	00018564 	.word	0x00018564
    2e8c:	000185a7 	.word	0x000185a7

00002e90 <bt_gatt_dm_char_by_uuid>:
}

const struct bt_gatt_dm_attr *bt_gatt_dm_char_by_uuid(
	const struct bt_gatt_dm *dm,
	const struct bt_uuid *uuid)
{
    2e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2e94:	4606      	mov	r6, r0
    2e96:	460f      	mov	r7, r1
	const struct bt_gatt_dm_attr *curr = NULL;
    2e98:	2400      	movs	r4, #0

	while ((curr = bt_gatt_dm_char_next(dm, curr)) != NULL) {
		struct bt_gatt_chrc *chrc = bt_gatt_dm_attr_chrc_val(curr);

		__ASSERT_NO_MSG(chrc != NULL);
    2e9a:	f8df 8048 	ldr.w	r8, [pc, #72]	; 2ee4 <bt_gatt_dm_char_by_uuid+0x54>
    2e9e:	f8df 9048 	ldr.w	r9, [pc, #72]	; 2ee8 <bt_gatt_dm_char_by_uuid+0x58>
    2ea2:	f8df a048 	ldr.w	sl, [pc, #72]	; 2eec <bt_gatt_dm_char_by_uuid+0x5c>
	while ((curr = bt_gatt_dm_char_next(dm, curr)) != NULL) {
    2ea6:	4621      	mov	r1, r4
    2ea8:	4630      	mov	r0, r6
    2eaa:	f00f fea4 	bl	12bf6 <bt_gatt_dm_char_next>
    2eae:	4604      	mov	r4, r0
    2eb0:	b1a8      	cbz	r0, 2ede <bt_gatt_dm_char_by_uuid+0x4e>
		struct bt_gatt_chrc *chrc = bt_gatt_dm_attr_chrc_val(curr);
    2eb2:	f00f fe88 	bl	12bc6 <bt_gatt_dm_attr_chrc_val>
		__ASSERT_NO_MSG(chrc != NULL);
    2eb6:	4605      	mov	r5, r0
    2eb8:	b958      	cbnz	r0, 2ed2 <bt_gatt_dm_char_by_uuid+0x42>
    2eba:	4649      	mov	r1, r9
    2ebc:	4650      	mov	r0, sl
    2ebe:	f240 13fb 	movw	r3, #507	; 0x1fb
    2ec2:	4642      	mov	r2, r8
    2ec4:	f00f f920 	bl	12108 <printk>
    2ec8:	f240 11fb 	movw	r1, #507	; 0x1fb
    2ecc:	4640      	mov	r0, r8
    2ece:	f00f fbb1 	bl	12634 <assert_post_action>
		if (!bt_uuid_cmp(uuid, chrc->uuid)) {
    2ed2:	4638      	mov	r0, r7
    2ed4:	6829      	ldr	r1, [r5, #0]
    2ed6:	f010 fcc7 	bl	13868 <bt_uuid_cmp>
    2eda:	2800      	cmp	r0, #0
    2edc:	d1e3      	bne.n	2ea6 <bt_gatt_dm_char_by_uuid+0x16>
			return curr;
		}
	}

	return NULL;
}
    2ede:	4620      	mov	r0, r4
    2ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2ee4:	0001828c 	.word	0x0001828c
    2ee8:	0001863c 	.word	0x0001863c
    2eec:	00017d82 	.word	0x00017d82

00002ef0 <bt_gatt_dm_start>:

int bt_gatt_dm_start(struct bt_conn *conn,
		     const struct bt_uuid *svc_uuid,
		     const struct bt_gatt_dm_cb *cb,
		     void *context)
{
    2ef0:	b570      	push	{r4, r5, r6, lr}
    2ef2:	4605      	mov	r5, r0
	int err;
	struct bt_gatt_dm *dm;

	if (svc_uuid &&
    2ef4:	4608      	mov	r0, r1
    2ef6:	b119      	cbz	r1, 2f00 <bt_gatt_dm_start+0x10>
    2ef8:	7809      	ldrb	r1, [r1, #0]
    2efa:	f011 0ffd 	tst.w	r1, #253	; 0xfd
    2efe:	d139      	bne.n	2f74 <bt_gatt_dm_start+0x84>
	    (svc_uuid->type != BT_UUID_TYPE_16) &&
	    (svc_uuid->type != BT_UUID_TYPE_128)) {
		return -EINVAL;
	}

	if (!cb) {
    2f00:	2a00      	cmp	r2, #0
    2f02:	d037      	beq.n	2f74 <bt_gatt_dm_start+0x84>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2f04:	4c1e      	ldr	r4, [pc, #120]	; (2f80 <bt_gatt_dm_start+0x90>)
    2f06:	f504 769c 	add.w	r6, r4, #312	; 0x138
    2f0a:	e8d6 1fef 	ldaex	r1, [r6]
    2f0e:	f041 0c01 	orr.w	ip, r1, #1
    2f12:	e8c6 cfee 	stlex	lr, ip, [r6]
    2f16:	f1be 0f00 	cmp.w	lr, #0
    2f1a:	d1f6      	bne.n	2f0a <bt_gatt_dm_start+0x1a>
		return -EINVAL;
	}

	dm = &bt_gatt_dm_inst;

	if (atomic_test_and_set_bit(dm->state_flags, STATE_ATTRS_LOCKED)) {
    2f1c:	f011 0101 	ands.w	r1, r1, #1
    2f20:	d12b      	bne.n	2f7a <bt_gatt_dm_start+0x8a>
		return -EALREADY;
	}

	dm->conn = conn;
	dm->context = context;
    2f22:	e9c4 5300 	strd	r5, r3, [r4]
	list->tail = NULL;
    2f26:	e9c4 114f 	strd	r1, r1, [r4, #316]	; 0x13c
	dm->callback = cb;
    2f2a:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
	dm->cur_attr_id = 0;
    2f2e:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
	sys_slist_init(&dm->chunk_list);
	dm->cur_chunk_len = 0;
    2f32:	f8c4 1144 	str.w	r1, [r4, #324]	; 0x144

	dm->discover_params.uuid = svc_uuid ? uuid_store(dm, svc_uuid) : NULL;
    2f36:	b108      	cbz	r0, 2f3c <bt_gatt_dm_start+0x4c>
    2f38:	f7ff fe6c 	bl	2c14 <uuid_store.constprop.0>
	dm->discover_params.func = discovery_callback;
    2f3c:	4b11      	ldr	r3, [pc, #68]	; (2f84 <bt_gatt_dm_start+0x94>)
	dm->discover_params.uuid = svc_uuid ? uuid_store(dm, svc_uuid) : NULL;
    2f3e:	60a0      	str	r0, [r4, #8]
	dm->discover_params.func = discovery_callback;
    2f40:	60e3      	str	r3, [r4, #12]
	dm->discover_params.start_handle = 0x0001;
    2f42:	2301      	movs	r3, #1
    2f44:	8223      	strh	r3, [r4, #16]
	dm->discover_params.end_handle = 0xffff;
    2f46:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2f4a:	82e3      	strh	r3, [r4, #22]
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
    2f4c:	2300      	movs	r3, #0

	err = bt_gatt_discover(conn, &dm->discover_params);
    2f4e:	4628      	mov	r0, r5
    2f50:	490d      	ldr	r1, [pc, #52]	; (2f88 <bt_gatt_dm_start+0x98>)
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
    2f52:	7623      	strb	r3, [r4, #24]
	err = bt_gatt_discover(conn, &dm->discover_params);
    2f54:	f007 fd8e 	bl	aa74 <bt_gatt_discover>
	if (err) {
    2f58:	4604      	mov	r4, r0
    2f5a:	b148      	cbz	r0, 2f70 <bt_gatt_dm_start+0x80>
		LOG_ERR("Discover failed, error: %d.", err);
    2f5c:	4602      	mov	r2, r0
    2f5e:	2145      	movs	r1, #69	; 0x45
    2f60:	480a      	ldr	r0, [pc, #40]	; (2f8c <bt_gatt_dm_start+0x9c>)
    2f62:	f00f f8d1 	bl	12108 <printk>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2f66:	f06f 0101 	mvn.w	r1, #1
    2f6a:	4809      	ldr	r0, [pc, #36]	; (2f90 <bt_gatt_dm_start+0xa0>)
    2f6c:	f00f fdec 	bl	12b48 <atomic_and>
		atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);
	}

	return err;
}
    2f70:	4620      	mov	r0, r4
    2f72:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    2f74:	f06f 0415 	mvn.w	r4, #21
    2f78:	e7fa      	b.n	2f70 <bt_gatt_dm_start+0x80>
		return -EALREADY;
    2f7a:	f06f 0444 	mvn.w	r4, #68	; 0x44
    2f7e:	e7f7      	b.n	2f70 <bt_gatt_dm_start+0x80>
    2f80:	20000a58 	.word	0x20000a58
    2f84:	00002c5d 	.word	0x00002c5d
    2f88:	20000a60 	.word	0x20000a60
    2f8c:	00018650 	.word	0x00018650
    2f90:	20000b90 	.word	0x20000b90

00002f94 <scan_default_param_set>:
{
	return (mode & MODE_CHECK) != 0;
}

static void scan_default_param_set(void)
{
    2f94:	b570      	push	{r4, r5, r6, lr}
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
    2f96:	4d06      	ldr	r5, [pc, #24]	; (2fb0 <scan_default_param_set+0x1c>)
{
    2f98:	b086      	sub	sp, #24
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
    2f9a:	ac01      	add	r4, sp, #4
    2f9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2f9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}

	/* Set the default parameters. */
	bt_scan.scan_param = *scan_param;
    2fa0:	4c04      	ldr	r4, [pc, #16]	; (2fb4 <scan_default_param_set+0x20>)
    2fa2:	ae01      	add	r6, sp, #4
    2fa4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    2fa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2fa8:	682b      	ldr	r3, [r5, #0]
    2faa:	6023      	str	r3, [r4, #0]
}
    2fac:	b006      	add	sp, #24
    2fae:	bd70      	pop	{r4, r5, r6, pc}
    2fb0:	00016e70 	.word	0x00016e70
    2fb4:	20000bd4 	.word	0x20000bd4

00002fb8 <uuid_check>:
{
    2fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_scan.scan_filters.uuid.enabled;
    2fbc:	4c29      	ldr	r4, [pc, #164]	; (3064 <uuid_check+0xac>)
{
    2fbe:	b08b      	sub	sp, #44	; 0x2c
	if (is_uuid_filter_enabled()) {
    2fc0:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
{
    2fc4:	4606      	mov	r6, r0
    2fc6:	9100      	str	r1, [sp, #0]
    2fc8:	9203      	str	r2, [sp, #12]
	if (is_uuid_filter_enabled()) {
    2fca:	2b00      	cmp	r3, #0
    2fcc:	d03c      	beq.n	3048 <uuid_check+0x90>
	for (size_t i = 0; i < counter; i++) {
    2fce:	2700      	movs	r7, #0
	u8_t uuid_match_cnt = 0;
    2fd0:	463d      	mov	r5, r7
	u8_t data_len = data->data_len;
    2fd2:	784b      	ldrb	r3, [r1, #1]
	const bool all_filters_mode = bt_scan.scan_filters.all_mode;
    2fd4:	f894 b028 	ldrb.w	fp, [r4, #40]	; 0x28
	const u8_t counter = bt_scan.scan_filters.uuid.cnt;
    2fd8:	f894 a020 	ldrb.w	sl, [r4, #32]
	u8_t data_len = data->data_len;
    2fdc:	9301      	str	r3, [sp, #4]
	for (size_t i = 0; i < counter; i++) {
    2fde:	4557      	cmp	r7, sl
    2fe0:	d30e      	bcc.n	3000 <uuid_check+0x48>
	control->filter_status.uuid.count = uuid_match_cnt;
    2fe2:	f886 5040 	strb.w	r5, [r6, #64]	; 0x40
	if ((all_filters_mode && (uuid_match_cnt == counter)) ||
    2fe6:	f1bb 0f00 	cmp.w	fp, #0
    2fea:	d02b      	beq.n	3044 <uuid_check+0x8c>
    2fec:	45aa      	cmp	sl, r5
    2fee:	d12b      	bne.n	3048 <uuid_check+0x90>
			control->filter_match_cnt++;
    2ff0:	7873      	ldrb	r3, [r6, #1]
    2ff2:	3301      	adds	r3, #1
    2ff4:	7073      	strb	r3, [r6, #1]
			control->filter_status.uuid.match = true;
    2ff6:	2301      	movs	r3, #1
    2ff8:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
			control->filter_match = true;
    2ffc:	70b3      	strb	r3, [r6, #2]
}
    2ffe:	e023      	b.n	3048 <uuid_check+0x90>
	for (size_t i = 0; i < data_len; i += uuid_len) {
    3000:	f04f 0900 	mov.w	r9, #0
		if (find_uuid(data->data, data_len, uuid_type,
    3004:	9b00      	ldr	r3, [sp, #0]
    3006:	9a03      	ldr	r2, [sp, #12]
    3008:	685b      	ldr	r3, [r3, #4]
    300a:	9302      	str	r3, [sp, #8]
	switch (uuid_type) {
    300c:	4b16      	ldr	r3, [pc, #88]	; (3068 <uuid_check+0xb0>)
    300e:	f813 8002 	ldrb.w	r8, [r3, r2]
	for (size_t i = 0; i < data_len; i += uuid_len) {
    3012:	9b01      	ldr	r3, [sp, #4]
    3014:	4599      	cmp	r9, r3
    3016:	d305      	bcc.n	3024 <uuid_check+0x6c>
		} else if (all_filters_mode) {
    3018:	f1bb 0f00 	cmp.w	fp, #0
    301c:	d1e1      	bne.n	2fe2 <uuid_check+0x2a>
	for (size_t i = 0; i < counter; i++) {
    301e:	3701      	adds	r7, #1
    3020:	3418      	adds	r4, #24
    3022:	e7dc      	b.n	2fde <uuid_check+0x26>
		if (!bt_uuid_create(&uuid.uuid, &data[i], uuid_len)) {
    3024:	9b02      	ldr	r3, [sp, #8]
    3026:	4642      	mov	r2, r8
    3028:	eb03 0109 	add.w	r1, r3, r9
    302c:	a805      	add	r0, sp, #20
    302e:	f010 fc45 	bl	138bc <bt_uuid_create>
    3032:	2800      	cmp	r0, #0
    3034:	d0f0      	beq.n	3018 <uuid_check+0x60>
		if (bt_uuid_cmp(&uuid.uuid, target_uuid->uuid) == 0) {
    3036:	68a1      	ldr	r1, [r4, #8]
    3038:	a805      	add	r0, sp, #20
    303a:	f010 fc15 	bl	13868 <bt_uuid_cmp>
    303e:	b130      	cbz	r0, 304e <uuid_check+0x96>
	for (size_t i = 0; i < data_len; i += uuid_len) {
    3040:	44c1      	add	r9, r8
    3042:	e7e6      	b.n	3012 <uuid_check+0x5a>
	    ((!all_filters_mode) && (uuid_match_cnt > 0))) {
    3044:	2d00      	cmp	r5, #0
    3046:	d1d3      	bne.n	2ff0 <uuid_check+0x38>
}
    3048:	b00b      	add	sp, #44	; 0x2c
    304a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				uuid_filter->uuid[i].uuid;
    304e:	68a1      	ldr	r1, [r4, #8]
			control->filter_status.uuid.uuid[uuid_match_cnt] =
    3050:	eb06 0285 	add.w	r2, r6, r5, lsl #2
			uuid_match_cnt++;
    3054:	3501      	adds	r5, #1
			control->filter_status.uuid.uuid[uuid_match_cnt] =
    3056:	63d1      	str	r1, [r2, #60]	; 0x3c
			uuid_match_cnt++;
    3058:	b2ed      	uxtb	r5, r5
			if (!all_filters_mode) {
    305a:	f1bb 0f00 	cmp.w	fp, #0
    305e:	d1de      	bne.n	301e <uuid_check+0x66>
    3060:	e7bf      	b.n	2fe2 <uuid_check+0x2a>
    3062:	bf00      	nop
    3064:	20000ba4 	.word	0x20000ba4
    3068:	0001868b 	.word	0x0001868b

0000306c <adv_data_found>:
		control->filter_cnt++;
	}
}

static bool adv_data_found(struct bt_data *data, void *user_data)
{
    306c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_scan_control *scan_control =
			(struct bt_scan_control *)user_data;

	switch (data->type) {
    3070:	7803      	ldrb	r3, [r0, #0]
{
    3072:	4605      	mov	r5, r0
	switch (data->type) {
    3074:	2b19      	cmp	r3, #25
{
    3076:	460c      	mov	r4, r1
	switch (data->type) {
    3078:	d812      	bhi.n	30a0 <adv_data_found+0x34>
    307a:	2b01      	cmp	r3, #1
    307c:	d912      	bls.n	30a4 <adv_data_found+0x38>
    307e:	3b02      	subs	r3, #2
    3080:	2b17      	cmp	r3, #23
    3082:	d80f      	bhi.n	30a4 <adv_data_found+0x38>
    3084:	e8df f003 	tbb	[pc, r3]
    3088:	81817b7b 	.word	0x81817b7b
    308c:	11318383 	.word	0x11318383
    3090:	0e0e0e0e 	.word	0x0e0e0e0e
    3094:	0e0e0e0e 	.word	0x0e0e0e0e
    3098:	0e0e0e0e 	.word	0x0e0e0e0e
    309c:	560e0e0e 	.word	0x560e0e0e
    30a0:	2bff      	cmp	r3, #255	; 0xff
    30a2:	d076      	beq.n	3192 <adv_data_found+0x126>
	default:
		break;
	}

	return true;
}
    30a4:	2001      	movs	r0, #1
    30a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return bt_scan.scan_filters.name.enabled;
    30aa:	4e50      	ldr	r6, [pc, #320]	; (31ec <adv_data_found+0x180>)
	if (is_name_filter_enabled()) {
    30ac:	7873      	ldrb	r3, [r6, #1]
    30ae:	2b00      	cmp	r3, #0
    30b0:	d0f8      	beq.n	30a4 <adv_data_found+0x38>
	for (size_t i = 0; i < counter; i++) {
    30b2:	2700      	movs	r7, #0
	u8_t counter = bt_scan.scan_filters.name.cnt;
    30b4:	f896 a000 	ldrb.w	sl, [r6]
	u8_t data_len = data->data_len;
    30b8:	f890 8001 	ldrb.w	r8, [r0, #1]
	for (size_t i = 0; i < counter; i++) {
    30bc:	4557      	cmp	r7, sl
    30be:	d2f1      	bcs.n	30a4 <adv_data_found+0x38>
		if (adv_name_cmp(data->data,
    30c0:	eb06 1947 	add.w	r9, r6, r7, lsl #5
	return strncmp(target_name, data, data_len) == 0;
    30c4:	4642      	mov	r2, r8
    30c6:	4648      	mov	r0, r9
    30c8:	6869      	ldr	r1, [r5, #4]
    30ca:	f010 fb13 	bl	136f4 <strncmp>
		if (adv_name_cmp(data->data,
    30ce:	b950      	cbnz	r0, 30e6 <adv_data_found+0x7a>
			control->filter_match_cnt++;
    30d0:	7863      	ldrb	r3, [r4, #1]
			control->filter_status.name.name =
    30d2:	f8c4 901c 	str.w	r9, [r4, #28]
			control->filter_match_cnt++;
    30d6:	3301      	adds	r3, #1
    30d8:	7063      	strb	r3, [r4, #1]
			control->filter_status.name.match = true;
    30da:	2301      	movs	r3, #1
			control->filter_status.name.len = data_len;
    30dc:	f884 8020 	strb.w	r8, [r4, #32]
			control->filter_status.name.match = true;
    30e0:	7623      	strb	r3, [r4, #24]
			control->filter_match = true;
    30e2:	70a3      	strb	r3, [r4, #2]
    30e4:	e7de      	b.n	30a4 <adv_data_found+0x38>
	for (size_t i = 0; i < counter; i++) {
    30e6:	3701      	adds	r7, #1
    30e8:	e7e8      	b.n	30bc <adv_data_found+0x50>
	return bt_scan.scan_filters.short_name.enabled;
    30ea:	4e40      	ldr	r6, [pc, #256]	; (31ec <adv_data_found+0x180>)
	if (is_short_name_filter_enabled()) {
    30ec:	78f3      	ldrb	r3, [r6, #3]
    30ee:	2b00      	cmp	r3, #0
    30f0:	d0d8      	beq.n	30a4 <adv_data_found+0x38>
	u8_t data_len = data->data_len;
    30f2:	78b3      	ldrb	r3, [r6, #2]
    30f4:	f890 8001 	ldrb.w	r8, [r0, #1]
	for (size_t i = 0; i < counter; i++) {
    30f8:	eb03 1343 	add.w	r3, r3, r3, lsl #5
    30fc:	18f7      	adds	r7, r6, r3
    30fe:	42be      	cmp	r6, r7
    3100:	d0d0      	beq.n	30a4 <adv_data_found+0x38>
	if ((data_len >= short_name_min_len) &&
    3102:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
    3106:	4543      	cmp	r3, r8
    3108:	d812      	bhi.n	3130 <adv_data_found+0xc4>
    310a:	f106 0902 	add.w	r9, r6, #2
	    (strncmp(target_name, data, data_len) == 0)) {
    310e:	4642      	mov	r2, r8
    3110:	4648      	mov	r0, r9
    3112:	6869      	ldr	r1, [r5, #4]
    3114:	f010 faee 	bl	136f4 <strncmp>
	if ((data_len >= short_name_min_len) &&
    3118:	b950      	cbnz	r0, 3130 <adv_data_found+0xc4>
			control->filter_match_cnt++;
    311a:	7863      	ldrb	r3, [r4, #1]
			control->filter_status.short_name.name =
    311c:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
			control->filter_match_cnt++;
    3120:	3301      	adds	r3, #1
    3122:	7063      	strb	r3, [r4, #1]
			control->filter_status.short_name.match = true;
    3124:	2301      	movs	r3, #1
			control->filter_status.short_name.len = data_len;
    3126:	f884 802c 	strb.w	r8, [r4, #44]	; 0x2c
			control->filter_status.short_name.match = true;
    312a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
			control->filter_match = true;
    312e:	e7d8      	b.n	30e2 <adv_data_found+0x76>
	for (size_t i = 0; i < counter; i++) {
    3130:	3621      	adds	r6, #33	; 0x21
    3132:	e7e4      	b.n	30fe <adv_data_found+0x92>
	return bt_scan.scan_filters.appearance.enabled;
    3134:	4b2d      	ldr	r3, [pc, #180]	; (31ec <adv_data_found+0x180>)
	if (is_appearance_filter_enabled()) {
    3136:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
    313a:	2a00      	cmp	r2, #0
    313c:	d0b2      	beq.n	30a4 <adv_data_found+0x38>
	for (size_t i = 0; i < counter; i++) {
    313e:	2200      	movs	r2, #0
	const u8_t counter =
    3140:	f893 6024 	ldrb.w	r6, [r3, #36]	; 0x24
	u8_t data_len = data->data_len;
    3144:	7847      	ldrb	r7, [r0, #1]
	for (size_t i = 0; i < counter; i++) {
    3146:	42b2      	cmp	r2, r6
    3148:	d2ac      	bcs.n	30a4 <adv_data_found+0x38>
	if (data_len != sizeof(u16_t)) {
    314a:	2f02      	cmp	r7, #2
    314c:	d115      	bne.n	317a <adv_data_found+0x10e>
		if (find_appearance(data->data,
    314e:	6868      	ldr	r0, [r5, #4]
	return ((u16_t)src[0] << 8) | src[1];
    3150:	f890 c000 	ldrb.w	ip, [r0]
    3154:	7841      	ldrb	r1, [r0, #1]
	if (decoded_appearance == *appearance) {
    3156:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    315a:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    315c:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
    3160:	4288      	cmp	r0, r1
    3162:	d10a      	bne.n	317a <adv_data_found+0x10e>
		if (find_appearance(data->data,
    3164:	3212      	adds	r2, #18
    3166:	eb03 0342 	add.w	r3, r3, r2, lsl #1
			control->filter_status.appearance.appearance =
    316a:	64a3      	str	r3, [r4, #72]	; 0x48
			control->filter_match_cnt++;
    316c:	7863      	ldrb	r3, [r4, #1]
    316e:	3301      	adds	r3, #1
    3170:	7063      	strb	r3, [r4, #1]
			control->filter_status.appearance.match = true;
    3172:	2301      	movs	r3, #1
    3174:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			control->filter_match = true;
    3178:	e7b3      	b.n	30e2 <adv_data_found+0x76>
	for (size_t i = 0; i < counter; i++) {
    317a:	3201      	adds	r2, #1
    317c:	e7e3      	b.n	3146 <adv_data_found+0xda>
		uuid_check(scan_control, data, BT_UUID_TYPE_16);
    317e:	2200      	movs	r2, #0
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
    3180:	4629      	mov	r1, r5
    3182:	4620      	mov	r0, r4
    3184:	f7ff ff18 	bl	2fb8 <uuid_check>
		break;
    3188:	e78c      	b.n	30a4 <adv_data_found+0x38>
		uuid_check(scan_control, data, BT_UUID_TYPE_32);
    318a:	2201      	movs	r2, #1
    318c:	e7f8      	b.n	3180 <adv_data_found+0x114>
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
    318e:	2202      	movs	r2, #2
    3190:	e7f6      	b.n	3180 <adv_data_found+0x114>
	return bt_scan.scan_filters.manufacturer_data.enabled;
    3192:	4b16      	ldr	r3, [pc, #88]	; (31ec <adv_data_found+0x180>)
	if (is_manufacturer_data_filter_enabled()) {
    3194:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
    3198:	4698      	mov	r8, r3
    319a:	2a00      	cmp	r2, #0
    319c:	d082      	beq.n	30a4 <adv_data_found+0x38>
	u8_t counter = bt_scan.scan_filters.manufacturer_data.cnt;
    319e:	4699      	mov	r9, r3
	for (size_t i = 0; i < counter; i++) {
    31a0:	2700      	movs	r7, #0
	u8_t counter = bt_scan.scan_filters.manufacturer_data.cnt;
    31a2:	f893 a026 	ldrb.w	sl, [r3, #38]	; 0x26
	for (size_t i = 0; i < counter; i++) {
    31a6:	4557      	cmp	r7, sl
    31a8:	f4bf af7c 	bcs.w	30a4 <adv_data_found+0x38>
		if (adv_manufacturer_data_cmp(data->data,
    31ac:	f899 2046 	ldrb.w	r2, [r9, #70]	; 0x46
	if (target_data_len > data_len) {
    31b0:	786b      	ldrb	r3, [r5, #1]
    31b2:	4293      	cmp	r3, r2
    31b4:	d315      	bcc.n	31e2 <adv_data_found+0x176>
    31b6:	f109 0626 	add.w	r6, r9, #38	; 0x26
	if (memcmp(target_data, data, target_data_len) != 0) {
    31ba:	4630      	mov	r0, r6
    31bc:	6869      	ldr	r1, [r5, #4]
    31be:	f010 faa8 	bl	13712 <memcmp>
    31c2:	b970      	cbnz	r0, 31e2 <adv_data_found+0x176>
				md_filter->manufacturer_data[i].data_len;
    31c4:	eb07 1347 	add.w	r3, r7, r7, lsl #5
			control->filter_status.manufacturer_data.data =
    31c8:	6526      	str	r6, [r4, #80]	; 0x50
				md_filter->manufacturer_data[i].data_len;
    31ca:	4443      	add	r3, r8
			control->filter_status.manufacturer_data.len =
    31cc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
    31d0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
			control->filter_match_cnt++;
    31d4:	7863      	ldrb	r3, [r4, #1]
    31d6:	3301      	adds	r3, #1
    31d8:	7063      	strb	r3, [r4, #1]
			control->filter_status.manufacturer_data.match = true;
    31da:	2301      	movs	r3, #1
    31dc:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
    31e0:	e77f      	b.n	30e2 <adv_data_found+0x76>
	for (size_t i = 0; i < counter; i++) {
    31e2:	3701      	adds	r7, #1
    31e4:	f109 0921 	add.w	r9, r9, #33	; 0x21
    31e8:	e7dd      	b.n	31a6 <adv_data_found+0x13a>
    31ea:	bf00      	nop
    31ec:	20000ba4 	.word	0x20000ba4

000031f0 <notify_filter_matched.constprop.0>:
static void notify_filter_matched(struct bt_scan_device_info *device_info,
    31f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    31f2:	4605      	mov	r5, r0
    31f4:	460e      	mov	r6, r1
    31f6:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    31f8:	4b08      	ldr	r3, [pc, #32]	; (321c <notify_filter_matched.constprop.0+0x2c>)
    31fa:	681c      	ldr	r4, [r3, #0]
    31fc:	b10c      	cbz	r4, 3202 <notify_filter_matched.constprop.0+0x12>
    31fe:	3c04      	subs	r4, #4
    3200:	b904      	cbnz	r4, 3204 <notify_filter_matched.constprop.0+0x14>
}
    3202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->cb_addr->filter_match) {
    3204:	6823      	ldr	r3, [r4, #0]
    3206:	681b      	ldr	r3, [r3, #0]
    3208:	b11b      	cbz	r3, 3212 <notify_filter_matched.constprop.0+0x22>
			cb->cb_addr->filter_match(device_info, filter_match,
    320a:	463a      	mov	r2, r7
    320c:	4631      	mov	r1, r6
    320e:	4628      	mov	r0, r5
    3210:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    3212:	1d23      	adds	r3, r4, #4
    3214:	d0f5      	beq.n	3202 <notify_filter_matched.constprop.0+0x12>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3216:	6864      	ldr	r4, [r4, #4]
    3218:	e7f0      	b.n	31fc <notify_filter_matched.constprop.0+0xc>
    321a:	bf00      	nop
    321c:	20000bf0 	.word	0x20000bf0

00003220 <bt_scan_cb_register>:
	if (!cb) {
    3220:	b150      	cbz	r0, 3238 <bt_scan_cb_register+0x18>
	parent->next = child;
    3222:	2300      	movs	r3, #0
    3224:	6043      	str	r3, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
    3226:	4b05      	ldr	r3, [pc, #20]	; (323c <bt_scan_cb_register+0x1c>)
	sys_slist_append(&callback_list, &cb->node);
    3228:	1d02      	adds	r2, r0, #4
    322a:	6859      	ldr	r1, [r3, #4]
    322c:	b911      	cbnz	r1, 3234 <bt_scan_cb_register+0x14>
	list->head = node;
    322e:	e9c3 2200 	strd	r2, r2, [r3]
}
    3232:	4770      	bx	lr
	parent->next = child;
    3234:	600a      	str	r2, [r1, #0]
	list->tail = node;
    3236:	605a      	str	r2, [r3, #4]
}
    3238:	4770      	bx	lr
    323a:	bf00      	nop
    323c:	20000bf0 	.word	0x20000bf0

00003240 <bt_scan_filter_add>:
{
    3240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3242:	4605      	mov	r5, r0
	if (!data) {
    3244:	460c      	mov	r4, r1
    3246:	2900      	cmp	r1, #0
    3248:	d048      	beq.n	32dc <bt_scan_filter_add+0x9c>
	return z_impl_k_mutex_lock(mutex, timeout);
    324a:	f04f 32ff 	mov.w	r2, #4294967295
    324e:	f04f 33ff 	mov.w	r3, #4294967295
    3252:	4824      	ldr	r0, [pc, #144]	; (32e4 <bt_scan_filter_add+0xa4>)
    3254:	f00c f86e 	bl	f334 <z_impl_k_mutex_lock>
	switch (type) {
    3258:	2d03      	cmp	r5, #3
    325a:	d00c      	beq.n	3276 <bt_scan_filter_add+0x36>
    325c:	d938      	bls.n	32d0 <bt_scan_filter_add+0x90>
    325e:	3d04      	subs	r5, #4
		err = -EINVAL;
    3260:	2d01      	cmp	r5, #1
    3262:	bf94      	ite	ls
    3264:	f06f 040b 	mvnls.w	r4, #11
    3268:	f06f 0415 	mvnhi.w	r4, #21
	return z_impl_k_mutex_unlock(mutex);
    326c:	481d      	ldr	r0, [pc, #116]	; (32e4 <bt_scan_filter_add+0xa4>)
    326e:	f00c f945 	bl	f4fc <z_impl_k_mutex_unlock>
}
    3272:	4620      	mov	r0, r4
    3274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	u8_t counter = bt_scan.scan_filters.uuid.cnt;
    3276:	4a1c      	ldr	r2, [pc, #112]	; (32e8 <bt_scan_filter_add+0xa8>)
	if (counter >= CONFIG_BT_SCAN_UUID_CNT) {
    3278:	f892 3020 	ldrb.w	r3, [r2, #32]
    327c:	bb43      	cbnz	r3, 32d0 <bt_scan_filter_add+0x90>
	switch (uuid->type) {
    327e:	7823      	ldrb	r3, [r4, #0]
    3280:	2b01      	cmp	r3, #1
    3282:	d00c      	beq.n	329e <bt_scan_filter_add+0x5e>
    3284:	2b02      	cmp	r3, #2
    3286:	d011      	beq.n	32ac <bt_scan_filter_add+0x6c>
    3288:	bb2b      	cbnz	r3, 32d6 <bt_scan_filter_add+0x96>
		uuid_filter[counter].uuid_data.uuid_16 = *uuid_16;
    328a:	6820      	ldr	r0, [r4, #0]
    328c:	f102 030c 	add.w	r3, r2, #12
    3290:	60d0      	str	r0, [r2, #12]
		uuid_filter[counter].uuid =
    3292:	6093      	str	r3, [r2, #8]
	bt_scan.scan_filters.uuid.cnt++;
    3294:	2301      	movs	r3, #1
	return 0;
    3296:	2400      	movs	r4, #0
	bt_scan.scan_filters.uuid.cnt++;
    3298:	f882 3020 	strb.w	r3, [r2, #32]
	return 0;
    329c:	e7e6      	b.n	326c <bt_scan_filter_add+0x2c>
		uuid_filter[counter].uuid_data.uuid_32 = *uuid_32;
    329e:	f102 030c 	add.w	r3, r2, #12
    32a2:	e894 0003 	ldmia.w	r4, {r0, r1}
    32a6:	e883 0003 	stmia.w	r3, {r0, r1}
    32aa:	e7f2      	b.n	3292 <bt_scan_filter_add+0x52>
		uuid_filter[counter].uuid_data.uuid_128 = *uuid_128;
    32ac:	4623      	mov	r3, r4
    32ae:	f102 040c 	add.w	r4, r2, #12
    32b2:	4626      	mov	r6, r4
    32b4:	f103 0710 	add.w	r7, r3, #16
    32b8:	4625      	mov	r5, r4
    32ba:	6818      	ldr	r0, [r3, #0]
    32bc:	6859      	ldr	r1, [r3, #4]
    32be:	3308      	adds	r3, #8
    32c0:	c503      	stmia	r5!, {r0, r1}
    32c2:	42bb      	cmp	r3, r7
    32c4:	462c      	mov	r4, r5
    32c6:	d1f7      	bne.n	32b8 <bt_scan_filter_add+0x78>
    32c8:	781b      	ldrb	r3, [r3, #0]
    32ca:	702b      	strb	r3, [r5, #0]
		uuid_filter[counter].uuid =
    32cc:	6096      	str	r6, [r2, #8]
		break;
    32ce:	e7e1      	b.n	3294 <bt_scan_filter_add+0x54>
		return -ENOMEM;
    32d0:	f06f 040b 	mvn.w	r4, #11
    32d4:	e7ca      	b.n	326c <bt_scan_filter_add+0x2c>
	switch (uuid->type) {
    32d6:	f06f 0415 	mvn.w	r4, #21
    32da:	e7c7      	b.n	326c <bt_scan_filter_add+0x2c>
		return -EINVAL;
    32dc:	f06f 0415 	mvn.w	r4, #21
    32e0:	e7c7      	b.n	3272 <bt_scan_filter_add+0x32>
    32e2:	bf00      	nop
    32e4:	20000498 	.word	0x20000498
    32e8:	20000ba4 	.word	0x20000ba4

000032ec <bt_scan_filter_disable>:
	bt_scan.scan_filters.name.enabled = false;
    32ec:	2200      	movs	r2, #0
    32ee:	4b05      	ldr	r3, [pc, #20]	; (3304 <bt_scan_filter_disable+0x18>)
    32f0:	705a      	strb	r2, [r3, #1]
	bt_scan.scan_filters.short_name.enabled = false;
    32f2:	70da      	strb	r2, [r3, #3]
	bt_scan.scan_filters.addr.enabled = false;
    32f4:	715a      	strb	r2, [r3, #5]
	bt_scan.scan_filters.uuid.enabled = false;
    32f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	bt_scan.scan_filters.appearance.enabled = false;
    32fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	bt_scan.scan_filters.manufacturer_data.enabled = false;
    32fe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
    3302:	4770      	bx	lr
    3304:	20000ba4 	.word	0x20000ba4

00003308 <bt_scan_filter_enable>:
{
    3308:	b508      	push	{r3, lr}
	if (!check_filter_mode(mode)) {
    330a:	0683      	lsls	r3, r0, #26
    330c:	d025      	beq.n	335a <bt_scan_filter_enable+0x52>
	bt_scan_filter_disable();
    330e:	f7ff ffed 	bl	32ec <bt_scan_filter_disable>
	if (mode & BT_SCAN_ADDR_FILTER) {
    3312:	f010 0f02 	tst.w	r0, #2
		filters->addr.enabled = true;
    3316:	bf18      	it	ne
    3318:	2201      	movne	r2, #1
    331a:	4b11      	ldr	r3, [pc, #68]	; (3360 <bt_scan_filter_enable+0x58>)
    331c:	bf18      	it	ne
    331e:	715a      	strbne	r2, [r3, #5]
	if (mode & BT_SCAN_NAME_FILTER) {
    3320:	07c2      	lsls	r2, r0, #31
		filters->name.enabled = true;
    3322:	bf44      	itt	mi
    3324:	2201      	movmi	r2, #1
    3326:	705a      	strbmi	r2, [r3, #1]
	if (mode & BT_SCAN_SHORT_NAME_FILTER) {
    3328:	06c2      	lsls	r2, r0, #27
		filters->short_name.enabled = true;
    332a:	bf44      	itt	mi
    332c:	2201      	movmi	r2, #1
    332e:	70da      	strbmi	r2, [r3, #3]
	if (mode & BT_SCAN_UUID_FILTER) {
    3330:	0742      	lsls	r2, r0, #29
		filters->uuid.enabled = true;
    3332:	bf44      	itt	mi
    3334:	2201      	movmi	r2, #1
    3336:	f883 2021 	strbmi.w	r2, [r3, #33]	; 0x21
	if (mode & BT_SCAN_APPEARANCE_FILTER) {
    333a:	0702      	lsls	r2, r0, #28
		filters->appearance.enabled = true;
    333c:	bf44      	itt	mi
    333e:	2201      	movmi	r2, #1
    3340:	f883 2025 	strbmi.w	r2, [r3, #37]	; 0x25
	if (mode & BT_SCAN_MANUFACTURER_DATA_FILTER) {
    3344:	0682      	lsls	r2, r0, #26
		filters->manufacturer_data.enabled = true;
    3346:	bf48      	it	mi
    3348:	2201      	movmi	r2, #1
	return 0;
    334a:	f04f 0000 	mov.w	r0, #0
		filters->manufacturer_data.enabled = true;
    334e:	bf48      	it	mi
    3350:	f883 2027 	strbmi.w	r2, [r3, #39]	; 0x27
	filters->all_mode = match_all;
    3354:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
}
    3358:	bd08      	pop	{r3, pc}
		return -EINVAL;
    335a:	f06f 0015 	mvn.w	r0, #21
    335e:	e7fb      	b.n	3358 <bt_scan_filter_enable+0x50>
    3360:	20000ba4 	.word	0x20000ba4

00003364 <scan_connect_with_target.part.0>:
static void scan_connect_with_target(struct bt_scan_control *control,
    3364:	b570      	push	{r4, r5, r6, lr}
    3366:	460e      	mov	r6, r1
    3368:	b086      	sub	sp, #24
    336a:	4605      	mov	r5, r0
	bt_scan_stop();
    336c:	f00f fcb9 	bl	12ce2 <bt_scan_stop>
			       BT_CONN_LE_CREATE_CONN,
    3370:	4b18      	ldr	r3, [pc, #96]	; (33d4 <scan_connect_with_target.part.0+0x70>)
    3372:	ac02      	add	r4, sp, #8
    3374:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3376:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	err = bt_conn_le_create(addr,
    337a:	4621      	mov	r1, r4
    337c:	ab01      	add	r3, sp, #4
    337e:	4630      	mov	r0, r6
    3380:	4a15      	ldr	r2, [pc, #84]	; (33d8 <scan_connect_with_target.part.0+0x74>)
    3382:	f004 f8ef 	bl	7564 <bt_conn_le_create>
	if (err) {
    3386:	4b15      	ldr	r3, [pc, #84]	; (33dc <scan_connect_with_target.part.0+0x78>)
    3388:	3508      	adds	r5, #8
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    338a:	681c      	ldr	r4, [r3, #0]
	if (err) {
    338c:	b168      	cbz	r0, 33aa <scan_connect_with_target.part.0+0x46>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    338e:	b10c      	cbz	r4, 3394 <scan_connect_with_target.part.0+0x30>
    3390:	3c04      	subs	r4, #4
    3392:	b90c      	cbnz	r4, 3398 <scan_connect_with_target.part.0+0x34>
}
    3394:	b006      	add	sp, #24
    3396:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->cb_addr->connecting_error) {
    3398:	6823      	ldr	r3, [r4, #0]
    339a:	689b      	ldr	r3, [r3, #8]
    339c:	b10b      	cbz	r3, 33a2 <scan_connect_with_target.part.0+0x3e>
			cb->cb_addr->connecting_error(device_info);
    339e:	4628      	mov	r0, r5
    33a0:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    33a2:	1d22      	adds	r2, r4, #4
    33a4:	d0f6      	beq.n	3394 <scan_connect_with_target.part.0+0x30>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    33a6:	6864      	ldr	r4, [r4, #4]
    33a8:	e7f1      	b.n	338e <scan_connect_with_target.part.0+0x2a>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    33aa:	b91c      	cbnz	r4, 33b4 <scan_connect_with_target.part.0+0x50>
		bt_conn_unref(conn);
    33ac:	9801      	ldr	r0, [sp, #4]
    33ae:	f010 fd61 	bl	13e74 <bt_conn_unref>
    33b2:	e7ef      	b.n	3394 <scan_connect_with_target.part.0+0x30>
		notify_connecting(&control->device_info, conn);
    33b4:	9e01      	ldr	r6, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    33b6:	3c04      	subs	r4, #4
    33b8:	2c00      	cmp	r4, #0
    33ba:	d0f7      	beq.n	33ac <scan_connect_with_target.part.0+0x48>
		if (cb->cb_addr->connecting) {
    33bc:	6823      	ldr	r3, [r4, #0]
    33be:	68db      	ldr	r3, [r3, #12]
    33c0:	b113      	cbz	r3, 33c8 <scan_connect_with_target.part.0+0x64>
			cb->cb_addr->connecting(device_info, conn);
    33c2:	4631      	mov	r1, r6
    33c4:	4628      	mov	r0, r5
    33c6:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    33c8:	1d23      	adds	r3, r4, #4
    33ca:	d0ef      	beq.n	33ac <scan_connect_with_target.part.0+0x48>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    33cc:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    33ce:	2c00      	cmp	r4, #0
    33d0:	d1f1      	bne.n	33b6 <scan_connect_with_target.part.0+0x52>
    33d2:	e7eb      	b.n	33ac <scan_connect_with_target.part.0+0x48>
    33d4:	00016e84 	.word	0x00016e84
    33d8:	20000be8 	.word	0x20000be8
    33dc:	20000bf0 	.word	0x20000bf0

000033e0 <scan_device_found>:
	}
}

static void scan_device_found(const bt_addr_le_t *addr, s8_t rssi, u8_t type,
			      struct net_buf_simple *ad)
{
    33e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_scan_control scan_control;
	struct net_buf_simple_state state;

	memset(&scan_control, 0, sizeof(scan_control));

	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    33e4:	4c56      	ldr	r4, [pc, #344]	; (3540 <scan_device_found+0x160>)
{
    33e6:	b099      	sub	sp, #100	; 0x64
    33e8:	4606      	mov	r6, r0
    33ea:	4689      	mov	r9, r1
    33ec:	4690      	mov	r8, r2
	memset(&scan_control, 0, sizeof(scan_control));
    33ee:	2100      	movs	r1, #0
    33f0:	2258      	movs	r2, #88	; 0x58
    33f2:	a802      	add	r0, sp, #8
{
    33f4:	461d      	mov	r5, r3
	memset(&scan_control, 0, sizeof(scan_control));
    33f6:	f010 f9c7 	bl	13788 <memset>
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    33fa:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	return bt_scan.scan_filters.addr.enabled;
    33fe:	7962      	ldrb	r2, [r4, #5]
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    3400:	f88d 300b 	strb.w	r3, [sp, #11]
	control->filter_cnt = 0;
    3404:	2300      	movs	r3, #0
    3406:	f88d 3008 	strb.w	r3, [sp, #8]
	if (is_addr_filter_enabled()) {
    340a:	b112      	cbz	r2, 3412 <scan_device_found+0x32>
		control->filter_cnt++;
    340c:	2301      	movs	r3, #1
    340e:	f88d 3008 	strb.w	r3, [sp, #8]
	if (is_name_filter_enabled()) {
    3412:	7863      	ldrb	r3, [r4, #1]
    3414:	b123      	cbz	r3, 3420 <scan_device_found+0x40>
		control->filter_cnt++;
    3416:	f89d 3008 	ldrb.w	r3, [sp, #8]
    341a:	3301      	adds	r3, #1
    341c:	f88d 3008 	strb.w	r3, [sp, #8]
	if (is_short_name_filter_enabled()) {
    3420:	78e3      	ldrb	r3, [r4, #3]
    3422:	b123      	cbz	r3, 342e <scan_device_found+0x4e>
		control->filter_cnt++;
    3424:	f89d 3008 	ldrb.w	r3, [sp, #8]
    3428:	3301      	adds	r3, #1
    342a:	f88d 3008 	strb.w	r3, [sp, #8]
	if (is_uuid_filter_enabled()) {
    342e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    3432:	b123      	cbz	r3, 343e <scan_device_found+0x5e>
		control->filter_cnt++;
    3434:	f89d 3008 	ldrb.w	r3, [sp, #8]
    3438:	3301      	adds	r3, #1
    343a:	f88d 3008 	strb.w	r3, [sp, #8]
	if (is_appearance_filter_enabled()) {
    343e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    3442:	b123      	cbz	r3, 344e <scan_device_found+0x6e>
		control->filter_cnt++;
    3444:	f89d 3008 	ldrb.w	r3, [sp, #8]
    3448:	3301      	adds	r3, #1
    344a:	f88d 3008 	strb.w	r3, [sp, #8]
	if (is_manufacturer_data_filter_enabled()) {
    344e:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    3452:	b123      	cbz	r3, 345e <scan_device_found+0x7e>
		control->filter_cnt++;
    3454:	f89d 3008 	ldrb.w	r3, [sp, #8]
    3458:	3301      	adds	r3, #1
    345a:	f88d 3008 	strb.w	r3, [sp, #8]

	check_enabled_filters(&scan_control);

	/* Check id device is connectable. */
	if (type == BT_GAP_ADV_TYPE_ADV_IND ||
    345e:	f1b8 0f01 	cmp.w	r8, #1
	    type ==  BT_GAP_ADV_TYPE_ADV_DIRECT_IND) {
		scan_control.connectable = true;
    3462:	bf9c      	itt	ls
    3464:	2301      	movls	r3, #1
    3466:	f88d 300c 	strbls.w	r3, [sp, #12]
	if (is_addr_filter_enabled()) {
    346a:	b1da      	cbz	r2, 34a4 <scan_device_found+0xc4>
	for (size_t i = 0; i < counter; i++) {
    346c:	f04f 0a00 	mov.w	sl, #0
	u8_t counter = bt_scan.scan_filters.addr.cnt;
    3470:	f894 b004 	ldrb.w	fp, [r4, #4]
	for (size_t i = 0; i < counter; i++) {
    3474:	4f33      	ldr	r7, [pc, #204]	; (3544 <scan_device_found+0x164>)
    3476:	45da      	cmp	sl, fp
    3478:	d214      	bcs.n	34a4 <scan_device_found+0xc4>
	return memcmp(a, b, sizeof(*a));
}

static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
    347a:	4639      	mov	r1, r7
    347c:	2207      	movs	r2, #7
    347e:	4630      	mov	r0, r6
		if (bt_addr_le_cmp(target_addr, &addr[i]) == 0) {
    3480:	9701      	str	r7, [sp, #4]
    3482:	f010 f946 	bl	13712 <memcmp>
    3486:	3707      	adds	r7, #7
    3488:	9b01      	ldr	r3, [sp, #4]
    348a:	2800      	cmp	r0, #0
    348c:	d13c      	bne.n	3508 <scan_device_found+0x128>
			control->filter_status.addr.addr = &addr[i];
    348e:	930f      	str	r3, [sp, #60]	; 0x3c
			control->filter_match_cnt++;
    3490:	f89d 3009 	ldrb.w	r3, [sp, #9]
    3494:	3301      	adds	r3, #1
    3496:	f88d 3009 	strb.w	r3, [sp, #9]
			control->filter_status.addr.match = true;
    349a:	2301      	movs	r3, #1
    349c:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			control->filter_match = true;
    34a0:	f88d 300a 	strb.w	r3, [sp, #10]
 * @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    34a4:	4628      	mov	r0, r5
    34a6:	f012 f995 	bl	157d4 <net_buf_simple_headroom>
    34aa:	4607      	mov	r7, r0

	/* Save advertising buffer state to transfer it
	 * data to application if futher processing is needed.
	 */
	net_buf_simple_save(ad, &state);
	bt_data_parse(ad, adv_data_found, (void *)&scan_control);
    34ac:	4926      	ldr	r1, [pc, #152]	; (3548 <scan_device_found+0x168>)
    34ae:	4628      	mov	r0, r5
    34b0:	aa02      	add	r2, sp, #8
	state->len = buf->len;
    34b2:	f8b5 a004 	ldrh.w	sl, [r5, #4]
    34b6:	f002 fb93 	bl	5be0 <bt_data_parse>
	net_buf_simple_restore(ad, &state);

	scan_control.device_info.addr = addr;
	scan_control.device_info.conn_param = &bt_scan.conn_param;
    34ba:	4b24      	ldr	r3, [pc, #144]	; (354c <scan_device_found+0x16c>)
 * @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    34bc:	68a8      	ldr	r0, [r5, #8]
    34be:	9306      	str	r3, [sp, #24]
	if (control->all_mode &&
    34c0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    34c4:	fa10 f787 	uxtah	r7, r0, r7
    34c8:	602f      	str	r7, [r5, #0]
	buf->len = state->len;
    34ca:	f8a5 a004 	strh.w	sl, [r5, #4]
	scan_control.device_info.addr = addr;
    34ce:	9605      	str	r6, [sp, #20]
	scan_control.device_info.adv_info.adv_type = type;
    34d0:	f88d 8010 	strb.w	r8, [sp, #16]
	scan_control.device_info.adv_info.rssi = rssi;
    34d4:	f88d 9011 	strb.w	r9, [sp, #17]
	scan_control.device_info.adv_data = ad;
    34d8:	9507      	str	r5, [sp, #28]
	if (control->all_mode &&
    34da:	b1c3      	cbz	r3, 350e <scan_device_found+0x12e>
    34dc:	f89d 2009 	ldrb.w	r2, [sp, #9]
    34e0:	f89d 3008 	ldrb.w	r3, [sp, #8]
    34e4:	429a      	cmp	r2, r3
    34e6:	d116      	bne.n	3516 <scan_device_found+0x136>
		notify_filter_matched(&control->device_info,
    34e8:	f89d 200c 	ldrb.w	r2, [sp, #12]
    34ec:	a908      	add	r1, sp, #32
    34ee:	a804      	add	r0, sp, #16
    34f0:	f7ff fe7e 	bl	31f0 <notify_filter_matched.constprop.0>
	if (!bt_scan.connect_if_match) {
    34f4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    34f8:	b11b      	cbz	r3, 3502 <scan_device_found+0x122>
    34fa:	4631      	mov	r1, r6
    34fc:	a802      	add	r0, sp, #8
    34fe:	f7ff ff31 	bl	3364 <scan_connect_with_target.part.0>
	/* In the multifilter mode, the number of the active filters must equal
	 * the number of the filters matched to generate the notification.
	 * If the event handler is not NULL, notify the main application.
	 */
	filter_state_check(&scan_control, addr);
}
    3502:	b019      	add	sp, #100	; 0x64
    3504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < counter; i++) {
    3508:	f10a 0a01 	add.w	sl, sl, #1
    350c:	e7b3      	b.n	3476 <scan_device_found+0x96>
	else if ((!control->all_mode) && control->filter_match) {
    350e:	f89d 300a 	ldrb.w	r3, [sp, #10]
    3512:	2b00      	cmp	r3, #0
    3514:	d1e8      	bne.n	34e8 <scan_device_found+0x108>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    3516:	4b0e      	ldr	r3, [pc, #56]	; (3550 <scan_device_found+0x170>)
    3518:	681c      	ldr	r4, [r3, #0]
    351a:	2c00      	cmp	r4, #0
    351c:	d0f1      	beq.n	3502 <scan_device_found+0x122>
		notify_filter_no_match(&control->device_info,
    351e:	f89d 500c 	ldrb.w	r5, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    3522:	3c04      	subs	r4, #4
    3524:	2c00      	cmp	r4, #0
    3526:	d0ec      	beq.n	3502 <scan_device_found+0x122>
		if (cb->cb_addr->filter_no_match) {
    3528:	6823      	ldr	r3, [r4, #0]
    352a:	685b      	ldr	r3, [r3, #4]
    352c:	b113      	cbz	r3, 3534 <scan_device_found+0x154>
			cb->cb_addr->filter_no_match(device_info, connectable);
    352e:	4629      	mov	r1, r5
    3530:	a804      	add	r0, sp, #16
    3532:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    3534:	1d23      	adds	r3, r4, #4
    3536:	d0e4      	beq.n	3502 <scan_device_found+0x122>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3538:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    353a:	2c00      	cmp	r4, #0
    353c:	d1f1      	bne.n	3522 <scan_device_found+0x142>
    353e:	e7e0      	b.n	3502 <scan_device_found+0x122>
    3540:	20000ba4 	.word	0x20000ba4
    3544:	20000ba8 	.word	0x20000ba8
    3548:	0000306d 	.word	0x0000306d
    354c:	20000be8 	.word	0x20000be8
    3550:	20000bf0 	.word	0x20000bf0

00003554 <bt_scan_init>:
{
    3554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3556:	4605      	mov	r5, r0
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
    3558:	4c16      	ldr	r4, [pc, #88]	; (35b4 <bt_scan_init+0x60>)
    355a:	222c      	movs	r2, #44	; 0x2c
    355c:	2100      	movs	r1, #0
    355e:	4620      	mov	r0, r4
    3560:	f010 f912 	bl	13788 <memset>
	if (init) {
    3564:	4627      	mov	r7, r4
    3566:	b1d5      	cbz	r5, 359e <bt_scan_init+0x4a>
		bt_scan.connect_if_match = init->connect_if_match;
    3568:	792b      	ldrb	r3, [r5, #4]
    356a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		if (init->scan_param) {
    356e:	682c      	ldr	r4, [r5, #0]
    3570:	b164      	cbz	r4, 358c <bt_scan_init+0x38>
			bt_scan.scan_param = *init->scan_param;
    3572:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    3574:	f107 0630 	add.w	r6, r7, #48	; 0x30
    3578:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    357a:	6823      	ldr	r3, [r4, #0]
    357c:	6033      	str	r3, [r6, #0]
		if (init->conn_param) {
    357e:	68aa      	ldr	r2, [r5, #8]
    3580:	b13a      	cbz	r2, 3592 <bt_scan_init+0x3e>
			bt_scan.conn_param = *init->conn_param;
    3582:	4b0d      	ldr	r3, [pc, #52]	; (35b8 <bt_scan_init+0x64>)
    3584:	6810      	ldr	r0, [r2, #0]
    3586:	6851      	ldr	r1, [r2, #4]
    3588:	c303      	stmia	r3!, {r0, r1}
}
    358a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			scan_default_param_set();
    358c:	f7ff fd02 	bl	2f94 <scan_default_param_set>
    3590:	e7f5      	b.n	357e <bt_scan_init+0x2a>
	bt_scan.conn_param = *conn_param;
    3592:	f04f 73c8 	mov.w	r3, #26214400	; 0x1900000
    3596:	4909      	ldr	r1, [pc, #36]	; (35bc <bt_scan_init+0x68>)
    3598:	e9c7 1311 	strd	r1, r3, [r7, #68]	; 0x44
}
    359c:	e7f5      	b.n	358a <bt_scan_init+0x36>
		scan_default_param_set();
    359e:	f7ff fcf9 	bl	2f94 <scan_default_param_set>
	bt_scan.conn_param = *conn_param;
    35a2:	f04f 73c8 	mov.w	r3, #26214400	; 0x1900000
    35a6:	4a05      	ldr	r2, [pc, #20]	; (35bc <bt_scan_init+0x68>)
		bt_scan.connect_if_match = false;
    35a8:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
	bt_scan.conn_param = *conn_param;
    35ac:	e9c4 2311 	strd	r2, r3, [r4, #68]	; 0x44
}
    35b0:	e7eb      	b.n	358a <bt_scan_init+0x36>
    35b2:	bf00      	nop
    35b4:	20000ba4 	.word	0x20000ba4
    35b8:	20000be8 	.word	0x20000be8
    35bc:	00280018 	.word	0x00280018

000035c0 <bt_scan_start>:

int bt_scan_start(enum bt_scan_type scan_type)
{
	switch (scan_type) {
    35c0:	b108      	cbz	r0, 35c6 <bt_scan_start+0x6>
    35c2:	2801      	cmp	r0, #1
    35c4:	d106      	bne.n	35d4 <bt_scan_start+0x14>
	case BT_SCAN_TYPE_SCAN_ACTIVE:
		bt_scan.scan_param.type = BT_HCI_LE_SCAN_ACTIVE;
		break;

	case BT_SCAN_TYPE_SCAN_PASSIVE:
		bt_scan.scan_param.type = BT_HCI_LE_SCAN_PASSIVE;
    35c6:	4b05      	ldr	r3, [pc, #20]	; (35dc <bt_scan_start+0x1c>)
	default:
		return -EINVAL;
	}

	/* Start the scanning. */
	int err = bt_le_scan_start(&bt_scan.scan_param, scan_device_found);
    35c8:	4905      	ldr	r1, [pc, #20]	; (35e0 <bt_scan_start+0x20>)
		bt_scan.scan_param.type = BT_HCI_LE_SCAN_PASSIVE;
    35ca:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
	int err = bt_le_scan_start(&bt_scan.scan_param, scan_device_found);
    35ce:	4805      	ldr	r0, [pc, #20]	; (35e4 <bt_scan_start+0x24>)
    35d0:	f003 b904 	b.w	67dc <bt_le_scan_start>
	if (!err) {
		LOG_DBG("Scanning");
	}

	return err;
}
    35d4:	f06f 0015 	mvn.w	r0, #21
    35d8:	4770      	bx	lr
    35da:	bf00      	nop
    35dc:	20000ba4 	.word	0x20000ba4
    35e0:	000033e1 	.word	0x000033e1
    35e4:	20000bd4 	.word	0x20000bd4

000035e8 <bt_gatt_nus_c_send>:
	return 0;
}

int bt_gatt_nus_c_send(struct bt_gatt_nus_c *nus_c, const u8_t *data,
		       u16_t len)
{
    35e8:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (!nus_c->conn) {
    35ea:	6803      	ldr	r3, [r0, #0]
    35ec:	b313      	cbz	r3, 3634 <bt_gatt_nus_c_send+0x4c>
		return -ENOTCONN;
	}

	if (atomic_test_and_set_bit(&nus_c->state, NUS_C_RX_WRITE_PENDING)) {
    35ee:	1d04      	adds	r4, r0, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    35f0:	e8d4 3fef 	ldaex	r3, [r4]
    35f4:	f043 0504 	orr.w	r5, r3, #4
    35f8:	e8c4 5fec 	stlex	ip, r5, [r4]
    35fc:	f1bc 0f00 	cmp.w	ip, #0
    3600:	d1f6      	bne.n	35f0 <bt_gatt_nus_c_send+0x8>
    3602:	f013 0304 	ands.w	r3, r3, #4
    3606:	d118      	bne.n	363a <bt_gatt_nus_c_send+0x52>
		return -EALREADY;
	}

	nus_c->rx_write_params.func = on_sent;
    3608:	4d0d      	ldr	r5, [pc, #52]	; (3640 <bt_gatt_nus_c_send+0x58>)
	nus_c->rx_write_params.handle = nus_c->handles.rx;
	nus_c->rx_write_params.offset = 0;
	nus_c->rx_write_params.data = data;
    360a:	62c1      	str	r1, [r0, #44]	; 0x2c
	nus_c->rx_write_params.func = on_sent;
    360c:	6245      	str	r5, [r0, #36]	; 0x24
	nus_c->rx_write_params.handle = nus_c->handles.rx;
    360e:	8905      	ldrh	r5, [r0, #8]
	nus_c->rx_write_params.offset = 0;
    3610:	8543      	strh	r3, [r0, #42]	; 0x2a
	nus_c->rx_write_params.handle = nus_c->handles.rx;
    3612:	8505      	strh	r5, [r0, #40]	; 0x28
	nus_c->rx_write_params.length = len;
    3614:	8602      	strh	r2, [r0, #48]	; 0x30

	err = bt_gatt_write(nus_c->conn, &nus_c->rx_write_params);
    3616:	f100 0124 	add.w	r1, r0, #36	; 0x24
    361a:	6800      	ldr	r0, [r0, #0]
    361c:	f007 fdf2 	bl	b204 <bt_gatt_write>
	if (err) {
    3620:	b138      	cbz	r0, 3632 <bt_gatt_nus_c_send+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3622:	e8d4 3fef 	ldaex	r3, [r4]
    3626:	f023 0304 	bic.w	r3, r3, #4
    362a:	e8c4 3fe2 	stlex	r2, r3, [r4]
    362e:	2a00      	cmp	r2, #0
    3630:	d1f7      	bne.n	3622 <bt_gatt_nus_c_send+0x3a>
		atomic_clear_bit(&nus_c->state, NUS_C_RX_WRITE_PENDING);
	}

	return err;
}
    3632:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTCONN;
    3634:	f06f 0038 	mvn.w	r0, #56	; 0x38
    3638:	e7fb      	b.n	3632 <bt_gatt_nus_c_send+0x4a>
		return -EALREADY;
    363a:	f06f 0044 	mvn.w	r0, #68	; 0x44
    363e:	e7f8      	b.n	3632 <bt_gatt_nus_c_send+0x4a>
    3640:	00012ce7 	.word	0x00012ce7

00003644 <bt_gatt_nus_c_handles_assign>:

int bt_gatt_nus_c_handles_assign(struct bt_gatt_dm *dm,
				 struct bt_gatt_nus_c *nus_c)
{
    3644:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3648:	b097      	sub	sp, #92	; 0x5c
    364a:	460e      	mov	r6, r1
    364c:	4605      	mov	r5, r0
	const struct bt_gatt_dm_attr *gatt_service_attr =
			bt_gatt_dm_service_get(dm);
    364e:	f00f fad0 	bl	12bf2 <bt_gatt_dm_service_get>
	const struct bt_gatt_service_val *gatt_service =
			bt_gatt_dm_attr_service_val(gatt_service_attr);
    3652:	f00f fa98 	bl	12b86 <bt_gatt_dm_attr_service_val>
	const struct bt_gatt_dm_attr *gatt_chrc;
	const struct bt_gatt_dm_attr *gatt_desc;

	if (bt_uuid_cmp(gatt_service->uuid, BT_UUID_NUS_SERVICE)) {
    3656:	aa11      	add	r2, sp, #68	; 0x44
    3658:	4617      	mov	r7, r2
    365a:	4b52      	ldr	r3, [pc, #328]	; (37a4 <bt_gatt_nus_c_handles_assign+0x160>)
    365c:	f8d0 c000 	ldr.w	ip, [r0]
    3660:	f103 0e10 	add.w	lr, r3, #16
    3664:	4614      	mov	r4, r2
    3666:	6818      	ldr	r0, [r3, #0]
    3668:	6859      	ldr	r1, [r3, #4]
    366a:	3308      	adds	r3, #8
    366c:	c403      	stmia	r4!, {r0, r1}
    366e:	4573      	cmp	r3, lr
    3670:	4622      	mov	r2, r4
    3672:	d1f7      	bne.n	3664 <bt_gatt_nus_c_handles_assign+0x20>
    3674:	781b      	ldrb	r3, [r3, #0]
    3676:	4639      	mov	r1, r7
    3678:	7023      	strb	r3, [r4, #0]
    367a:	4660      	mov	r0, ip
    367c:	f010 f8f4 	bl	13868 <bt_uuid_cmp>
    3680:	4604      	mov	r4, r0
    3682:	b128      	cbz	r0, 3690 <bt_gatt_nus_c_handles_assign+0x4c>
		return -ENOTSUP;
    3684:	f06f 0422 	mvn.w	r4, #34	; 0x22
	nus_c->handles.rx = gatt_desc->handle;

	/* Assign connection instance. */
	nus_c->conn = bt_gatt_dm_conn_get(dm);
	return 0;
}
    3688:	4620      	mov	r0, r4
    368a:	b017      	add	sp, #92	; 0x5c
    368c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	memset(&nus_c->handles, 0xFF, sizeof(nus_c->handles));
    3690:	2206      	movs	r2, #6
    3692:	21ff      	movs	r1, #255	; 0xff
    3694:	f106 0008 	add.w	r0, r6, #8
    3698:	f010 f876 	bl	13788 <memset>
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_NUS_TX);
    369c:	4b42      	ldr	r3, [pc, #264]	; (37a8 <bt_gatt_nus_c_handles_assign+0x164>)
    369e:	aa02      	add	r2, sp, #8
    36a0:	f103 0e10 	add.w	lr, r3, #16
    36a4:	4690      	mov	r8, r2
    36a6:	46f1      	mov	r9, lr
    36a8:	4694      	mov	ip, r2
    36aa:	6818      	ldr	r0, [r3, #0]
    36ac:	6859      	ldr	r1, [r3, #4]
    36ae:	3308      	adds	r3, #8
    36b0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
    36b4:	4573      	cmp	r3, lr
    36b6:	4662      	mov	r2, ip
    36b8:	d1f6      	bne.n	36a8 <bt_gatt_nus_c_handles_assign+0x64>
    36ba:	781b      	ldrb	r3, [r3, #0]
    36bc:	4641      	mov	r1, r8
    36be:	4628      	mov	r0, r5
    36c0:	f88c 3000 	strb.w	r3, [ip]
    36c4:	f7ff fbe4 	bl	2e90 <bt_gatt_dm_char_by_uuid>
	if (!gatt_chrc) {
    36c8:	4680      	mov	r8, r0
    36ca:	b930      	cbnz	r0, 36da <bt_gatt_nus_c_handles_assign+0x96>
		LOG_ERR("Missing NUS TX characteristic.");
    36cc:	2145      	movs	r1, #69	; 0x45
    36ce:	4837      	ldr	r0, [pc, #220]	; (37ac <bt_gatt_nus_c_handles_assign+0x168>)
		LOG_ERR("Missing NUS RX value descriptor in characteristic.");
    36d0:	f00e fd1a 	bl	12108 <printk>
		return -EINVAL;
    36d4:	f06f 0415 	mvn.w	r4, #21
    36d8:	e7d6      	b.n	3688 <bt_gatt_nus_c_handles_assign+0x44>
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_NUS_TX);
    36da:	f10d 0c1c 	add.w	ip, sp, #28
    36de:	4662      	mov	r2, ip
    36e0:	4b31      	ldr	r3, [pc, #196]	; (37a8 <bt_gatt_nus_c_handles_assign+0x164>)
    36e2:	46e6      	mov	lr, ip
    36e4:	6818      	ldr	r0, [r3, #0]
    36e6:	6859      	ldr	r1, [r3, #4]
    36e8:	3308      	adds	r3, #8
    36ea:	e8ae 0003 	stmia.w	lr!, {r0, r1}
    36ee:	454b      	cmp	r3, r9
    36f0:	46f4      	mov	ip, lr
    36f2:	d1f6      	bne.n	36e2 <bt_gatt_nus_c_handles_assign+0x9e>
    36f4:	781b      	ldrb	r3, [r3, #0]
    36f6:	4641      	mov	r1, r8
    36f8:	4628      	mov	r0, r5
    36fa:	f88e 3000 	strb.w	r3, [lr]
    36fe:	f00f fac5 	bl	12c8c <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
    3702:	b910      	cbnz	r0, 370a <bt_gatt_nus_c_handles_assign+0xc6>
		LOG_ERR("Missing NUS TX value descriptor in characteristic.");
    3704:	2145      	movs	r1, #69	; 0x45
    3706:	482a      	ldr	r0, [pc, #168]	; (37b0 <bt_gatt_nus_c_handles_assign+0x16c>)
    3708:	e7e2      	b.n	36d0 <bt_gatt_nus_c_handles_assign+0x8c>
	nus_c->handles.tx = gatt_desc->handle;
    370a:	8883      	ldrh	r3, [r0, #4]
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_GATT_CCC);
    370c:	4641      	mov	r1, r8
	nus_c->handles.tx = gatt_desc->handle;
    370e:	8173      	strh	r3, [r6, #10]
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_GATT_CCC);
    3710:	2300      	movs	r3, #0
    3712:	f88d 3004 	strb.w	r3, [sp, #4]
    3716:	f642 1302 	movw	r3, #10498	; 0x2902
    371a:	4628      	mov	r0, r5
    371c:	aa01      	add	r2, sp, #4
    371e:	f8ad 3006 	strh.w	r3, [sp, #6]
    3722:	f00f fab3 	bl	12c8c <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
    3726:	b910      	cbnz	r0, 372e <bt_gatt_nus_c_handles_assign+0xea>
		LOG_ERR("Missing NUS TX CCC in characteristic.");
    3728:	2145      	movs	r1, #69	; 0x45
    372a:	4822      	ldr	r0, [pc, #136]	; (37b4 <bt_gatt_nus_c_handles_assign+0x170>)
    372c:	e7d0      	b.n	36d0 <bt_gatt_nus_c_handles_assign+0x8c>
	nus_c->handles.tx_ccc = gatt_desc->handle;
    372e:	8883      	ldrh	r3, [r0, #4]
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_NUS_RX);
    3730:	aa0c      	add	r2, sp, #48	; 0x30
	nus_c->handles.tx_ccc = gatt_desc->handle;
    3732:	81b3      	strh	r3, [r6, #12]
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_NUS_RX);
    3734:	4b20      	ldr	r3, [pc, #128]	; (37b8 <bt_gatt_nus_c_handles_assign+0x174>)
    3736:	4691      	mov	r9, r2
    3738:	f103 0e10 	add.w	lr, r3, #16
    373c:	46f0      	mov	r8, lr
    373e:	4694      	mov	ip, r2
    3740:	6818      	ldr	r0, [r3, #0]
    3742:	6859      	ldr	r1, [r3, #4]
    3744:	3308      	adds	r3, #8
    3746:	e8ac 0003 	stmia.w	ip!, {r0, r1}
    374a:	4573      	cmp	r3, lr
    374c:	4662      	mov	r2, ip
    374e:	d1f6      	bne.n	373e <bt_gatt_nus_c_handles_assign+0xfa>
    3750:	781b      	ldrb	r3, [r3, #0]
    3752:	4649      	mov	r1, r9
    3754:	f88c 3000 	strb.w	r3, [ip]
    3758:	4628      	mov	r0, r5
    375a:	f7ff fb99 	bl	2e90 <bt_gatt_dm_char_by_uuid>
	if (!gatt_chrc) {
    375e:	4684      	mov	ip, r0
    3760:	b910      	cbnz	r0, 3768 <bt_gatt_nus_c_handles_assign+0x124>
		LOG_ERR("Missing NUS RX characteristic.");
    3762:	2145      	movs	r1, #69	; 0x45
    3764:	4815      	ldr	r0, [pc, #84]	; (37bc <bt_gatt_nus_c_handles_assign+0x178>)
    3766:	e7b3      	b.n	36d0 <bt_gatt_nus_c_handles_assign+0x8c>
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_NUS_RX);
    3768:	463a      	mov	r2, r7
    376a:	4b13      	ldr	r3, [pc, #76]	; (37b8 <bt_gatt_nus_c_handles_assign+0x174>)
    376c:	4696      	mov	lr, r2
    376e:	6818      	ldr	r0, [r3, #0]
    3770:	6859      	ldr	r1, [r3, #4]
    3772:	3308      	adds	r3, #8
    3774:	e8ae 0003 	stmia.w	lr!, {r0, r1}
    3778:	4543      	cmp	r3, r8
    377a:	4672      	mov	r2, lr
    377c:	d1f6      	bne.n	376c <bt_gatt_nus_c_handles_assign+0x128>
    377e:	781b      	ldrb	r3, [r3, #0]
    3780:	463a      	mov	r2, r7
    3782:	4661      	mov	r1, ip
    3784:	4628      	mov	r0, r5
    3786:	f88e 3000 	strb.w	r3, [lr]
    378a:	f00f fa7f 	bl	12c8c <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
    378e:	b910      	cbnz	r0, 3796 <bt_gatt_nus_c_handles_assign+0x152>
		LOG_ERR("Missing NUS RX value descriptor in characteristic.");
    3790:	2145      	movs	r1, #69	; 0x45
    3792:	480b      	ldr	r0, [pc, #44]	; (37c0 <bt_gatt_nus_c_handles_assign+0x17c>)
    3794:	e79c      	b.n	36d0 <bt_gatt_nus_c_handles_assign+0x8c>
	nus_c->handles.rx = gatt_desc->handle;
    3796:	8883      	ldrh	r3, [r0, #4]
	nus_c->conn = bt_gatt_dm_conn_get(dm);
    3798:	4628      	mov	r0, r5
	nus_c->handles.rx = gatt_desc->handle;
    379a:	8133      	strh	r3, [r6, #8]
	nus_c->conn = bt_gatt_dm_conn_get(dm);
    379c:	f00f fa27 	bl	12bee <bt_gatt_dm_conn_get>
    37a0:	6030      	str	r0, [r6, #0]
	return 0;
    37a2:	e771      	b.n	3688 <bt_gatt_nus_c_handles_assign+0x44>
    37a4:	00016ec0 	.word	0x00016ec0
    37a8:	00016ed1 	.word	0x00016ed1
    37ac:	0001868e 	.word	0x0001868e
    37b0:	000186b2 	.word	0x000186b2
    37b4:	000186ea 	.word	0x000186ea
    37b8:	00016ee2 	.word	0x00016ee2
    37bc:	00018715 	.word	0x00018715
    37c0:	00018739 	.word	0x00018739

000037c4 <bt_gatt_nus_c_tx_notif_enable>:

int bt_gatt_nus_c_tx_notif_enable(struct bt_gatt_nus_c *nus_c)
{
    37c4:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (atomic_test_and_set_bit(&nus_c->state, NUS_C_TX_NOTIF_ENABLED)) {
    37c6:	1d05      	adds	r5, r0, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    37c8:	e8d5 3fef 	ldaex	r3, [r5]
    37cc:	f043 0202 	orr.w	r2, r3, #2
    37d0:	e8c5 2fe1 	stlex	r1, r2, [r5]
    37d4:	2900      	cmp	r1, #0
    37d6:	d1f7      	bne.n	37c8 <bt_gatt_nus_c_tx_notif_enable+0x4>
    37d8:	079b      	lsls	r3, r3, #30
    37da:	d427      	bmi.n	382c <bt_gatt_nus_c_tx_notif_enable+0x68>
		return -EALREADY;
	}

	nus_c->tx_notif_params.notify = on_received;
    37dc:	4b15      	ldr	r3, [pc, #84]	; (3834 <bt_gatt_nus_c_tx_notif_enable+0x70>)
    37de:	6103      	str	r3, [r0, #16]
	nus_c->tx_notif_params.value = BT_GATT_CCC_NOTIFY;
    37e0:	2301      	movs	r3, #1
    37e2:	8303      	strh	r3, [r0, #24]
	nus_c->tx_notif_params.value_handle = nus_c->handles.tx;
    37e4:	8943      	ldrh	r3, [r0, #10]
    37e6:	8283      	strh	r3, [r0, #20]
	nus_c->tx_notif_params.ccc_handle = nus_c->handles.tx_ccc;
    37e8:	8983      	ldrh	r3, [r0, #12]
    37ea:	82c3      	strh	r3, [r0, #22]
    37ec:	f100 031c 	add.w	r3, r0, #28
    37f0:	e8d3 2fef 	ldaex	r2, [r3]
    37f4:	f042 0201 	orr.w	r2, r2, #1
    37f8:	e8c3 2fe1 	stlex	r1, r2, [r3]
    37fc:	2900      	cmp	r1, #0
    37fe:	d1f7      	bne.n	37f0 <bt_gatt_nus_c_tx_notif_enable+0x2c>
	atomic_set_bit(nus_c->tx_notif_params.flags,
		       BT_GATT_SUBSCRIBE_FLAG_VOLATILE);

	err = bt_gatt_subscribe(nus_c->conn, &nus_c->tx_notif_params);
    3800:	f100 0110 	add.w	r1, r0, #16
    3804:	6800      	ldr	r0, [r0, #0]
    3806:	f007 fdd5 	bl	b3b4 <bt_gatt_subscribe>
	if (err) {
    380a:	4604      	mov	r4, r0
    380c:	b160      	cbz	r0, 3828 <bt_gatt_nus_c_tx_notif_enable+0x64>
		LOG_ERR("Subscribe failed (err %d)", err);
    380e:	4602      	mov	r2, r0
    3810:	2145      	movs	r1, #69	; 0x45
    3812:	4809      	ldr	r0, [pc, #36]	; (3838 <bt_gatt_nus_c_tx_notif_enable+0x74>)
    3814:	f00e fc78 	bl	12108 <printk>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3818:	e8d5 3fef 	ldaex	r3, [r5]
    381c:	f023 0302 	bic.w	r3, r3, #2
    3820:	e8c5 3fe2 	stlex	r2, r3, [r5]
    3824:	2a00      	cmp	r2, #0
    3826:	d1f7      	bne.n	3818 <bt_gatt_nus_c_tx_notif_enable+0x54>
	} else {
		LOG_DBG("[SUBSCRIBED]");
	}

	return err;
}
    3828:	4620      	mov	r0, r4
    382a:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
    382c:	f06f 0444 	mvn.w	r4, #68	; 0x44
    3830:	e7fa      	b.n	3828 <bt_gatt_nus_c_tx_notif_enable+0x64>
    3832:	bf00      	nop
    3834:	00012d13 	.word	0x00012d13
    3838:	00018771 	.word	0x00018771

0000383c <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    383c:	b5f0      	push	{r4, r5, r6, r7, lr}
    383e:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
    3840:	4e26      	ldr	r6, [pc, #152]	; (38dc <tc_aes128_set_encrypt_key+0xa0>)
{
    3842:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    3844:	ad01      	add	r5, sp, #4
{
    3846:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    3848:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    384a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    384c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    384e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    3850:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    3854:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
    3858:	4638      	mov	r0, r7
    385a:	2f00      	cmp	r7, #0
    385c:	d039      	beq.n	38d2 <tc_aes128_set_encrypt_key+0x96>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    385e:	2c00      	cmp	r4, #0
    3860:	d039      	beq.n	38d6 <tc_aes128_set_encrypt_key+0x9a>
    3862:	1f38      	subs	r0, r7, #4
    3864:	4602      	mov	r2, r0
    3866:	4621      	mov	r1, r4
    3868:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    386a:	784b      	ldrb	r3, [r1, #1]
    386c:	780d      	ldrb	r5, [r1, #0]
    386e:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    3870:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    3874:	78cd      	ldrb	r5, [r1, #3]
    3876:	3104      	adds	r1, #4
    3878:	432b      	orrs	r3, r5
    387a:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
    387e:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    3880:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    3884:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    3888:	d1ef      	bne.n	386a <tc_aes128_set_encrypt_key+0x2e>
    388a:	2104      	movs	r1, #4
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
    388c:	4c14      	ldr	r4, [pc, #80]	; (38e0 <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
    388e:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    3890:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    3892:	d116      	bne.n	38c2 <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    3894:	f3c3 4207 	ubfx	r2, r3, #16, #8
    3898:	5ca5      	ldrb	r5, [r4, r2]
    389a:	0e1a      	lsrs	r2, r3, #24
    389c:	5ca2      	ldrb	r2, [r4, r2]
    389e:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    38a2:	f3c3 2507 	ubfx	r5, r3, #8, #8
    38a6:	5d65      	ldrb	r5, [r4, r5]
    38a8:	b2db      	uxtb	r3, r3
    38aa:	5ce3      	ldrb	r3, [r4, r3]
    38ac:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    38b0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    38b4:	ad0c      	add	r5, sp, #48	; 0x30
    38b6:	f021 0303 	bic.w	r3, r1, #3
    38ba:	442b      	add	r3, r5
    38bc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    38c0:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
    38c2:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    38c6:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    38c8:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    38ca:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    38cc:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    38ce:	d1de      	bne.n	388e <tc_aes128_set_encrypt_key+0x52>
	}

	return TC_CRYPTO_SUCCESS;
    38d0:	2001      	movs	r0, #1
}
    38d2:	b00d      	add	sp, #52	; 0x34
    38d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    38d6:	4620      	mov	r0, r4
    38d8:	e7fb      	b.n	38d2 <tc_aes128_set_encrypt_key+0x96>
    38da:	bf00      	nop
    38dc:	00016e94 	.word	0x00016e94
    38e0:	00018796 	.word	0x00018796

000038e4 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    38e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    38e8:	4615      	mov	r5, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    38ea:	4606      	mov	r6, r0
{
    38ec:	b089      	sub	sp, #36	; 0x24
	if (out == (uint8_t *) 0) {
    38ee:	2800      	cmp	r0, #0
    38f0:	d058      	beq.n	39a4 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    38f2:	2900      	cmp	r1, #0
    38f4:	d059      	beq.n	39aa <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    38f6:	2a00      	cmp	r2, #0
    38f8:	d059      	beq.n	39ae <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    38fa:	2310      	movs	r3, #16
    38fc:	460a      	mov	r2, r1
    38fe:	4668      	mov	r0, sp
    3900:	4619      	mov	r1, r3
		s[i] = sbox[s[i]];
    3902:	4c2c      	ldr	r4, [pc, #176]	; (39b4 <tc_aes_encrypt+0xd0>)
	(void)_copy(state, sizeof(state), in, sizeof(state));
    3904:	f00f fa3e 	bl	12d84 <_copy>
	add_round_key(state, s->words);
    3908:	4629      	mov	r1, r5
    390a:	4668      	mov	r0, sp
    390c:	f00f fa52 	bl	12db4 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
    3910:	46a1      	mov	r9, r4
    3912:	f105 0710 	add.w	r7, r5, #16
    3916:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
    3918:	46e8      	mov	r8, sp
{
    391a:	466a      	mov	r2, sp
    391c:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
    391e:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    3920:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
    3922:	5c61      	ldrb	r1, [r4, r1]
    3924:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    3928:	d1f9      	bne.n	391e <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
    392a:	4668      	mov	r0, sp
    392c:	f00f fa87 	bl	12e3e <shift_rows>
	mult_row_column(t, s);
    3930:	4669      	mov	r1, sp
    3932:	a804      	add	r0, sp, #16
    3934:	f00f fabc 	bl	12eb0 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    3938:	a901      	add	r1, sp, #4
    393a:	a805      	add	r0, sp, #20
    393c:	f00f fab8 	bl	12eb0 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
    3940:	a902      	add	r1, sp, #8
    3942:	a806      	add	r0, sp, #24
    3944:	f00f fab4 	bl	12eb0 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
    3948:	a903      	add	r1, sp, #12
    394a:	a807      	add	r0, sp, #28
    394c:	f00f fab0 	bl	12eb0 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    3950:	2310      	movs	r3, #16
    3952:	4668      	mov	r0, sp
    3954:	4619      	mov	r1, r3
    3956:	eb0d 0203 	add.w	r2, sp, r3
    395a:	f00f fa13 	bl	12d84 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    395e:	4639      	mov	r1, r7
    3960:	4668      	mov	r0, sp
    3962:	3710      	adds	r7, #16
    3964:	f00f fa26 	bl	12db4 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
    3968:	42af      	cmp	r7, r5
    396a:	d1d5      	bne.n	3918 <tc_aes_encrypt+0x34>
    396c:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
    396e:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
    3972:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
    3974:	f819 3003 	ldrb.w	r3, [r9, r3]
    3978:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    397c:	d1f7      	bne.n	396e <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
    397e:	4668      	mov	r0, sp
    3980:	f00f fa5d 	bl	12e3e <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    3984:	4629      	mov	r1, r5
    3986:	4668      	mov	r0, sp
    3988:	f00f fa14 	bl	12db4 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    398c:	2310      	movs	r3, #16
    398e:	466a      	mov	r2, sp
    3990:	4619      	mov	r1, r3
    3992:	4630      	mov	r0, r6
    3994:	f00f f9f6 	bl	12d84 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    3998:	4668      	mov	r0, sp
    399a:	2210      	movs	r2, #16
    399c:	4621      	mov	r1, r4
    399e:	f00f f9fe 	bl	12d9e <_set>

	return TC_CRYPTO_SUCCESS;
    39a2:	2001      	movs	r0, #1
}
    39a4:	b009      	add	sp, #36	; 0x24
    39a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
    39aa:	4608      	mov	r0, r1
    39ac:	e7fa      	b.n	39a4 <tc_aes_encrypt+0xc0>
    39ae:	4610      	mov	r0, r2
    39b0:	e7f8      	b.n	39a4 <tc_aes_encrypt+0xc0>
    39b2:	bf00      	nop
    39b4:	00018796 	.word	0x00018796

000039b8 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
    39b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    39bc:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    39be:	6803      	ldr	r3, [r0, #0]
{
    39c0:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    39c2:	9303      	str	r3, [sp, #12]
    39c4:	6843      	ldr	r3, [r0, #4]
    39c6:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 3b80 <compress+0x1c8>
    39ca:	9304      	str	r3, [sp, #16]
    39cc:	6883      	ldr	r3, [r0, #8]
    39ce:	9c03      	ldr	r4, [sp, #12]
    39d0:	9305      	str	r3, [sp, #20]
    39d2:	68c3      	ldr	r3, [r0, #12]
{
    39d4:	9102      	str	r1, [sp, #8]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    39d6:	9306      	str	r3, [sp, #24]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    39d8:	6903      	ldr	r3, [r0, #16]
    39da:	9307      	str	r3, [sp, #28]
    39dc:	6943      	ldr	r3, [r0, #20]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    39de:	e9dd e206 	ldrd	lr, r2, [sp, #24]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    39e2:	9308      	str	r3, [sp, #32]
    39e4:	6983      	ldr	r3, [r0, #24]
    39e6:	9309      	str	r3, [sp, #36]	; 0x24
    39e8:	69c3      	ldr	r3, [r0, #28]
    39ea:	e9dd cb08 	ldrd	ip, fp, [sp, #32]
    39ee:	4698      	mov	r8, r3
    39f0:	930a      	str	r3, [sp, #40]	; 0x28
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    39f2:	9b05      	ldr	r3, [sp, #20]
    39f4:	9301      	str	r3, [sp, #4]
    39f6:	9b04      	ldr	r3, [sp, #16]
    39f8:	9300      	str	r3, [sp, #0]
	n = (((unsigned int)(*((*c)++))) << 24);
    39fa:	9b02      	ldr	r3, [sp, #8]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
		t1 = work_space[i] = n;
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
		t2 = Sigma0(a) + Maj(a, b, c);
    39fc:	9e01      	ldr	r6, [sp, #4]
    39fe:	59dd      	ldr	r5, [r3, r7]
		t1 = work_space[i] = n;
    3a00:	ab0c      	add	r3, sp, #48	; 0x30
    3a02:	ba2d      	rev	r5, r5
    3a04:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
    3a06:	f85a 3b04 	ldr.w	r3, [sl], #4
    3a0a:	3704      	adds	r7, #4
    3a0c:	eb05 0903 	add.w	r9, r5, r3
    3a10:	ea4f 25f2 	mov.w	r5, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    3a14:	ea85 15b2 	eor.w	r5, r5, r2, ror #6
    3a18:	ea85 6572 	eor.w	r5, r5, r2, ror #25
    3a1c:	444d      	add	r5, r9
    3a1e:	ea2b 0302 	bic.w	r3, fp, r2
    3a22:	ea02 090c 	and.w	r9, r2, ip
    3a26:	ea83 0309 	eor.w	r3, r3, r9
    3a2a:	442b      	add	r3, r5
    3a2c:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
    3a2e:	e9dd 1500 	ldrd	r1, r5, [sp]
	return (((a) >> n) | ((a) << (32 - n)));
    3a32:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    3a36:	404d      	eors	r5, r1
    3a38:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
    3a3c:	4025      	ands	r5, r4
    3a3e:	ea01 0906 	and.w	r9, r1, r6
    3a42:	ea85 0509 	eor.w	r5, r5, r9
    3a46:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
    3a4a:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
    3a4c:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
    3a4e:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
    3a52:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
    3a54:	46b6      	mov	lr, r6
    3a56:	46d8      	mov	r8, fp
    3a58:	f040 8081 	bne.w	3b5e <compress+0x1a6>
    3a5c:	f04f 0a10 	mov.w	sl, #16
    3a60:	4946      	ldr	r1, [pc, #280]	; (3b7c <compress+0x1c4>)
    3a62:	910b      	str	r1, [sp, #44]	; 0x2c
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
    3a64:	4651      	mov	r1, sl
    3a66:	f10a 0a01 	add.w	sl, sl, #1
    3a6a:	ae1c      	add	r6, sp, #112	; 0x70
    3a6c:	f00a 070f 	and.w	r7, sl, #15
    3a70:	eb06 0787 	add.w	r7, r6, r7, lsl #2
    3a74:	f857 6c40 	ldr.w	r6, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    3a78:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
    3a7c:	ea4f 48b6 	mov.w	r8, r6, ror #18
		s1 = work_space[(i+14)&0x0f];
    3a80:	f101 070e 	add.w	r7, r1, #14
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    3a84:	3109      	adds	r1, #9
		s0 = work_space[(i+1)&0x0f];
    3a86:	9602      	str	r6, [sp, #8]
		s0 = sigma0(s0);
    3a88:	ea88 18f6 	eor.w	r8, r8, r6, ror #7
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    3a8c:	f001 010f 	and.w	r1, r1, #15
		s1 = work_space[(i+14)&0x0f];
    3a90:	ae1c      	add	r6, sp, #112	; 0x70
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    3a92:	eb06 0989 	add.w	r9, r6, r9, lsl #2
    3a96:	eb06 0181 	add.w	r1, r6, r1, lsl #2
		s1 = work_space[(i+14)&0x0f];
    3a9a:	f007 070f 	and.w	r7, r7, #15
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    3a9e:	f851 1c40 	ldr.w	r1, [r1, #-64]
		s1 = work_space[(i+14)&0x0f];
    3aa2:	eb06 0787 	add.w	r7, r6, r7, lsl #2
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    3aa6:	f859 6c40 	ldr.w	r6, [r9, #-64]
		s1 = work_space[(i+14)&0x0f];
    3aaa:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    3aae:	4431      	add	r1, r6
		s0 = sigma0(s0);
    3ab0:	9e02      	ldr	r6, [sp, #8]
	return (((a) >> n) | ((a) << (32 - n)));
    3ab2:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s0 = sigma0(s0);
    3ab6:	ea88 08d6 	eor.w	r8, r8, r6, lsr #3
		s1 = sigma1(s1);
    3aba:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
    3abe:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    3ac2:	4441      	add	r1, r8
    3ac4:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    3ac6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    3ac8:	f849 1c40 	str.w	r1, [r9, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
    3acc:	ea4f 29f5 	mov.w	r9, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    3ad0:	ea05 0802 	and.w	r8, r5, r2
    3ad4:	ea89 19b5 	eor.w	r9, r9, r5, ror #6
    3ad8:	ea2c 0705 	bic.w	r7, ip, r5
    3adc:	f856 eb04 	ldr.w	lr, [r6], #4
    3ae0:	ea87 0708 	eor.w	r7, r7, r8
    3ae4:	ea89 6975 	eor.w	r9, r9, r5, ror #25
    3ae8:	444f      	add	r7, r9
    3aea:	4477      	add	r7, lr
    3aec:	960b      	str	r6, [sp, #44]	; 0x2c
		t2 = Sigma0(a) + Maj(a, b, c);
    3aee:	9e00      	ldr	r6, [sp, #0]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    3af0:	4439      	add	r1, r7
    3af2:	4459      	add	r1, fp
		t2 = Sigma0(a) + Maj(a, b, c);
    3af4:	ea04 0e06 	and.w	lr, r4, r6
    3af8:	ea84 0b06 	eor.w	fp, r4, r6
		h = g; g = f; f = e; e = d + t1;
    3afc:	9e01      	ldr	r6, [sp, #4]
	return (((a) >> n) | ((a) << (32 - n)));
    3afe:	ea4f 3773 	mov.w	r7, r3, ror #13
		h = g; g = f; f = e; e = d + t1;
    3b02:	440e      	add	r6, r1
		t2 = Sigma0(a) + Maj(a, b, c);
    3b04:	ea87 07b3 	eor.w	r7, r7, r3, ror #2
    3b08:	ea0b 0b03 	and.w	fp, fp, r3
    3b0c:	ea8b 0b0e 	eor.w	fp, fp, lr
		h = g; g = f; f = e; e = d + t1;
    3b10:	46b0      	mov	r8, r6
		t2 = Sigma0(a) + Maj(a, b, c);
    3b12:	ea87 57b3 	eor.w	r7, r7, r3, ror #22
    3b16:	9e00      	ldr	r6, [sp, #0]
    3b18:	445f      	add	r7, fp
	for ( ; i < 64; ++i) {
    3b1a:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
    3b1e:	46e3      	mov	fp, ip
		d = c; c = b; b = a; a = t1 + t2;
    3b20:	4439      	add	r1, r7
	for ( ; i < 64; ++i) {
    3b22:	9601      	str	r6, [sp, #4]
    3b24:	d123      	bne.n	3b6e <compress+0x1b6>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
    3b26:	9e03      	ldr	r6, [sp, #12]
    3b28:	440e      	add	r6, r1
    3b2a:	9904      	ldr	r1, [sp, #16]
    3b2c:	6006      	str	r6, [r0, #0]
    3b2e:	4419      	add	r1, r3
    3b30:	9b05      	ldr	r3, [sp, #20]
    3b32:	6041      	str	r1, [r0, #4]
    3b34:	4423      	add	r3, r4
    3b36:	9900      	ldr	r1, [sp, #0]
    3b38:	6083      	str	r3, [r0, #8]
    3b3a:	9b06      	ldr	r3, [sp, #24]
    3b3c:	440b      	add	r3, r1
    3b3e:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
    3b40:	9b07      	ldr	r3, [sp, #28]
    3b42:	4443      	add	r3, r8
    3b44:	6103      	str	r3, [r0, #16]
    3b46:	9b08      	ldr	r3, [sp, #32]
    3b48:	442b      	add	r3, r5
    3b4a:	6143      	str	r3, [r0, #20]
    3b4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3b4e:	4413      	add	r3, r2
    3b50:	6183      	str	r3, [r0, #24]
    3b52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3b54:	4463      	add	r3, ip
    3b56:	61c3      	str	r3, [r0, #28]
}
    3b58:	b01d      	add	sp, #116	; 0x74
    3b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3b5e:	9900      	ldr	r1, [sp, #0]
    3b60:	46e3      	mov	fp, ip
    3b62:	e9cd 4100 	strd	r4, r1, [sp]
    3b66:	4694      	mov	ip, r2
		d = c; c = b; b = a; a = t1 + t2;
    3b68:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    3b6a:	462a      	mov	r2, r5
    3b6c:	e745      	b.n	39fa <compress+0x42>
    3b6e:	4694      	mov	ip, r2
    3b70:	9400      	str	r4, [sp, #0]
    3b72:	462a      	mov	r2, r5
    3b74:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    3b76:	4645      	mov	r5, r8
		d = c; c = b; b = a; a = t1 + t2;
    3b78:	460b      	mov	r3, r1
    3b7a:	e773      	b.n	3a64 <compress+0xac>
    3b7c:	00017008 	.word	0x00017008
    3b80:	00016fc8 	.word	0x00016fc8

00003b84 <tc_sha256_init>:
{
    3b84:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
    3b86:	4604      	mov	r4, r0
    3b88:	b1c8      	cbz	r0, 3bbe <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
    3b8a:	2270      	movs	r2, #112	; 0x70
    3b8c:	2100      	movs	r1, #0
    3b8e:	f00f f906 	bl	12d9e <_set>
	s->iv[1] = 0xbb67ae85;
    3b92:	4b0b      	ldr	r3, [pc, #44]	; (3bc0 <tc_sha256_init+0x3c>)
    3b94:	4a0b      	ldr	r2, [pc, #44]	; (3bc4 <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
    3b96:	490c      	ldr	r1, [pc, #48]	; (3bc8 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
    3b98:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
    3b9c:	4b0b      	ldr	r3, [pc, #44]	; (3bcc <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
    3b9e:	480c      	ldr	r0, [pc, #48]	; (3bd0 <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
    3ba0:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
    3ba4:	4b0b      	ldr	r3, [pc, #44]	; (3bd4 <tc_sha256_init+0x50>)
    3ba6:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
    3baa:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
    3bac:	4b0a      	ldr	r3, [pc, #40]	; (3bd8 <tc_sha256_init+0x54>)
    3bae:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
    3bb0:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    3bb4:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    3bb8:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
    3bbc:	61e3      	str	r3, [r4, #28]
}
    3bbe:	bd10      	pop	{r4, pc}
    3bc0:	bb67ae85 	.word	0xbb67ae85
    3bc4:	6a09e667 	.word	0x6a09e667
    3bc8:	3c6ef372 	.word	0x3c6ef372
    3bcc:	a54ff53a 	.word	0xa54ff53a
    3bd0:	510e527f 	.word	0x510e527f
    3bd4:	9b05688c 	.word	0x9b05688c
    3bd8:	1f83d9ab 	.word	0x1f83d9ab

00003bdc <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    3bdc:	4a09      	ldr	r2, [pc, #36]	; (3c04 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    3bde:	490a      	ldr	r1, [pc, #40]	; (3c08 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    3be0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    3be2:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    3be4:	66d8      	str	r0, [r3, #108]	; 0x6c
	_current->arch.swap_return_value = _k_neg_eagain;
    3be6:	6719      	str	r1, [r3, #112]	; 0x70

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3be8:	4908      	ldr	r1, [pc, #32]	; (3c0c <arch_swap+0x30>)
    3bea:	684b      	ldr	r3, [r1, #4]
    3bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3bf0:	604b      	str	r3, [r1, #4]
    3bf2:	2300      	movs	r3, #0
    3bf4:	f383 8811 	msr	BASEPRI, r3
    3bf8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    3bfc:	6893      	ldr	r3, [r2, #8]
}
    3bfe:	6f18      	ldr	r0, [r3, #112]	; 0x70
    3c00:	4770      	bx	lr
    3c02:	bf00      	nop
    3c04:	20001d88 	.word	0x20001d88
    3c08:	00017690 	.word	0x00017690
    3c0c:	e000ed00 	.word	0xe000ed00

00003c10 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    3c10:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    3c12:	2b00      	cmp	r3, #0
    3c14:	db08      	blt.n	3c28 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3c16:	2201      	movs	r2, #1
    3c18:	f000 001f 	and.w	r0, r0, #31
    3c1c:	fa02 f000 	lsl.w	r0, r2, r0
    3c20:	4a02      	ldr	r2, [pc, #8]	; (3c2c <arch_irq_enable+0x1c>)
    3c22:	095b      	lsrs	r3, r3, #5
    3c24:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    3c28:	4770      	bx	lr
    3c2a:	bf00      	nop
    3c2c:	e000e100 	.word	0xe000e100

00003c30 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, u32_t flags)
{
    3c30:	b570      	push	{r4, r5, r6, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
    3c32:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    3c34:	2c07      	cmp	r4, #7
{
    3c36:	4605      	mov	r5, r0
    3c38:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    3c3a:	d90e      	bls.n	3c5a <z_arm_irq_priority_set+0x2a>
    3c3c:	235b      	movs	r3, #91	; 0x5b
    3c3e:	4a10      	ldr	r2, [pc, #64]	; (3c80 <z_arm_irq_priority_set+0x50>)
    3c40:	4910      	ldr	r1, [pc, #64]	; (3c84 <z_arm_irq_priority_set+0x54>)
    3c42:	4811      	ldr	r0, [pc, #68]	; (3c88 <z_arm_irq_priority_set+0x58>)
    3c44:	f00e fa60 	bl	12108 <printk>
    3c48:	4631      	mov	r1, r6
    3c4a:	4810      	ldr	r0, [pc, #64]	; (3c8c <z_arm_irq_priority_set+0x5c>)
    3c4c:	2207      	movs	r2, #7
    3c4e:	f00e fa5b 	bl	12108 <printk>
    3c52:	215b      	movs	r1, #91	; 0x5b
    3c54:	480a      	ldr	r0, [pc, #40]	; (3c80 <z_arm_irq_priority_set+0x50>)
    3c56:	f00e fced 	bl	12634 <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    3c5a:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    3c5c:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3c5e:	bfac      	ite	ge
    3c60:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3c64:	4b0a      	ldrlt	r3, [pc, #40]	; (3c90 <z_arm_irq_priority_set+0x60>)
    3c66:	ea4f 1444 	mov.w	r4, r4, lsl #5
    3c6a:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3c6c:	bfab      	itete	ge
    3c6e:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3c72:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3c76:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3c7a:	555c      	strblt	r4, [r3, r5]
}
    3c7c:	bd70      	pop	{r4, r5, r6, pc}
    3c7e:	bf00      	nop
    3c80:	00018896 	.word	0x00018896
    3c84:	000188cc 	.word	0x000188cc
    3c88:	00017d82 	.word	0x00017d82
    3c8c:	000188e7 	.word	0x000188e7
    3c90:	e000ed14 	.word	0xe000ed14

00003c94 <arch_new_thread>:
#ifdef CONFIG_INIT_STACKS
	memset(stack, 0xaa, stack_size);
#endif
#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)stack;
	thread->stack_info.size = stack_size;
    3c94:	e9c0 1218 	strd	r1, r2, [r0, #96]	; 0x60
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
    3c98:	440a      	add	r2, r1
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(Z_STACK_PTR_ALIGN(stackEnd -
    3c9a:	3a20      	subs	r2, #32
    3c9c:	f022 0207 	bic.w	r2, r2, #7
#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
    3ca0:	6013      	str	r3, [r2, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
    3ca2:	9b00      	ldr	r3, [sp, #0]
	pInitCtx->basic.pc &= 0xfffffffe;
    3ca4:	4907      	ldr	r1, [pc, #28]	; (3cc4 <arch_new_thread+0x30>)
	pInitCtx->basic.a2 = (u32_t)parameter1;
    3ca6:	6053      	str	r3, [r2, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    3ca8:	9b01      	ldr	r3, [sp, #4]
	pInitCtx->basic.pc &= 0xfffffffe;
    3caa:	f021 0101 	bic.w	r1, r1, #1
	pInitCtx->basic.a3 = (u32_t)parameter2;
    3cae:	6093      	str	r3, [r2, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    3cb0:	9b02      	ldr	r3, [sp, #8]
	pInitCtx->basic.pc &= 0xfffffffe;
    3cb2:	6191      	str	r1, [r2, #24]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    3cb4:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	pInitCtx->basic.xpsr =
    3cb6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3cba:	61d3      	str	r3, [r2, #28]
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (u32_t)pInitCtx;

	thread->arch.basepri = 0;
    3cbc:	2300      	movs	r3, #0
	thread->callee_saved.psp = (u32_t)pInitCtx;
    3cbe:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    3cc0:	66c3      	str	r3, [r0, #108]	; 0x6c

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    3cc2:	4770      	bx	lr
    3cc4:	0001213d 	.word	0x0001213d

00003cc8 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
    3cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3cca:	460d      	mov	r5, r1
    3ccc:	4614      	mov	r4, r2
    3cce:	4607      	mov	r7, r0
    3cd0:	461e      	mov	r6, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    3cd2:	f000 fb59 	bl	4388 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);

	_current = main_thread;
    3cd6:	4b0a      	ldr	r3, [pc, #40]	; (3d00 <arch_switch_to_main_thread+0x38>)
	start_of_main_stack =
    3cd8:	442c      	add	r4, r5
	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);
    3cda:	f024 0407 	bic.w	r4, r4, #7
	_current = main_thread;
    3cde:	609f      	str	r7, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    3ce0:	f385 880b 	msr	PSPLIM, r5

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    3ce4:	4630      	mov	r0, r6
    3ce6:	f384 8809 	msr	PSP, r4
    3cea:	2100      	movs	r1, #0
    3cec:	b663      	cpsie	if
    3cee:	f381 8811 	msr	BASEPRI, r1
    3cf2:	f3bf 8f6f 	isb	sy
    3cf6:	2200      	movs	r2, #0
    3cf8:	2300      	movs	r3, #0
    3cfa:	f00e fa1f 	bl	1213c <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    3cfe:	bf00      	nop
    3d00:	20001d88 	.word	0x20001d88

00003d04 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3d04:	b537      	push	{r0, r1, r2, r4, r5, lr}
    3d06:	4605      	mov	r5, r0

	if (esf != NULL) {
    3d08:	460c      	mov	r4, r1
    3d0a:	b1c9      	cbz	r1, 3d40 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    3d0c:	688b      	ldr	r3, [r1, #8]
    3d0e:	4810      	ldr	r0, [pc, #64]	; (3d50 <z_arm_fatal_error+0x4c>)
    3d10:	9300      	str	r3, [sp, #0]
    3d12:	e9d1 2300 	ldrd	r2, r3, [r1]
    3d16:	2145      	movs	r1, #69	; 0x45
    3d18:	f00e f9f6 	bl	12108 <printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    3d1c:	6963      	ldr	r3, [r4, #20]
    3d1e:	2145      	movs	r1, #69	; 0x45
    3d20:	9300      	str	r3, [sp, #0]
    3d22:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    3d26:	480b      	ldr	r0, [pc, #44]	; (3d54 <z_arm_fatal_error+0x50>)
    3d28:	f00e f9ee 	bl	12108 <printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    3d2c:	2145      	movs	r1, #69	; 0x45
    3d2e:	69e2      	ldr	r2, [r4, #28]
    3d30:	4809      	ldr	r0, [pc, #36]	; (3d58 <z_arm_fatal_error+0x54>)
    3d32:	f00e f9e9 	bl	12108 <printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    3d36:	2145      	movs	r1, #69	; 0x45
    3d38:	69a2      	ldr	r2, [r4, #24]
    3d3a:	4808      	ldr	r0, [pc, #32]	; (3d5c <z_arm_fatal_error+0x58>)
    3d3c:	f00e f9e4 	bl	12108 <printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    3d40:	4621      	mov	r1, r4
    3d42:	4628      	mov	r0, r5
}
    3d44:	b003      	add	sp, #12
    3d46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    3d4a:	f00a bf55 	b.w	ebf8 <z_fatal_error>
    3d4e:	bf00      	nop
    3d50:	0001891c 	.word	0x0001891c
    3d54:	00018950 	.word	0x00018950
    3d58:	00018984 	.word	0x00018984
    3d5c:	00018998 	.word	0x00018998

00003d60 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3d60:	4a0e      	ldr	r2, [pc, #56]	; (3d9c <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    3d62:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3d64:	4b0e      	ldr	r3, [pc, #56]	; (3da0 <z_arm_prep_c+0x40>)
    3d66:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    3d6a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3d6c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3d70:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    3d74:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3d78:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    3d7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    3d80:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    3d84:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    3d88:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    3d8c:	f00a ffb6 	bl	ecfc <z_bss_zero>
	z_data_copy();
    3d90:	f00a ffbe 	bl	ed10 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    3d94:	f000 faae 	bl	42f4 <z_arm_interrupt_init>
	z_cstart();
    3d98:	f00a fff8 	bl	ed8c <z_cstart>
    3d9c:	00000000 	.word	0x00000000
    3da0:	e000ed00 	.word	0xe000ed00

00003da4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    3da4:	4913      	ldr	r1, [pc, #76]	; (3df4 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    3da6:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    3da8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    3dac:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    3dae:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    3db2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3db6:	2020      	movs	r0, #32
    msr BASEPRI, r0
    3db8:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    3dbc:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    3dc0:	4f0d      	ldr	r7, [pc, #52]	; (3df8 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    3dc2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    3dc6:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    3dc8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    3dca:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    3dcc:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
    movs r3, #0
    3dce:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    3dd0:	66d3      	str	r3, [r2, #108]	; 0x6c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    3dd2:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    3dd6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    3dda:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    3dde:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    3de2:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    3de6:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    3de8:	f00f fbc6 	bl	13578 <configure_builtin_stack_guard>
    pop {r2, lr}
    3dec:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    3df0:	4770      	bx	lr
    3df2:	0000      	.short	0x0000
    ldr r1, =_kernel
    3df4:	20001d88 	.word	0x20001d88
    ldr v4, =_SCS_ICSR
    3df8:	e000ed04 	.word	0xe000ed04

00003dfc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    3dfc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    3e00:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    3e02:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    3e06:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    3e0a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    3e0c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    3e10:	2902      	cmp	r1, #2
    beq _oops
    3e12:	d0ff      	beq.n	3e14 <_oops>

00003e14 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    3e14:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    3e16:	f00f fbb3 	bl	13580 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    3e1a:	bd01      	pop	{r0, pc}

00003e1c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    3e1c:	4901      	ldr	r1, [pc, #4]	; (3e24 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    3e1e:	2210      	movs	r2, #16
	str	r2, [r1]
    3e20:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    3e22:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    3e24:	e000ed10 	.word	0xe000ed10

00003e28 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    3e28:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    3e2a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    3e2c:	f380 8811 	msr	BASEPRI, r0
	isb
    3e30:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    3e34:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    3e38:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    3e3a:	b662      	cpsie	i
	isb
    3e3c:	f3bf 8f6f 	isb	sy

	bx	lr
    3e40:	4770      	bx	lr
    3e42:	bf00      	nop

00003e44 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    3e44:	bf30      	wfi
    b z_SysNmiOnReset
    3e46:	f7ff bffd 	b.w	3e44 <z_SysNmiOnReset>
    3e4a:	bf00      	nop

00003e4c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    3e4c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    3e4e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    3e50:	4a0b      	ldr	r2, [pc, #44]	; (3e80 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    3e52:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    3e54:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    3e56:	bf1e      	ittt	ne
	movne	r1, #0
    3e58:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    3e5a:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    3e5c:	f012 fc31 	blne	166c2 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    3e60:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    3e62:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    3e66:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    3e6a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    3e6e:	4905      	ldr	r1, [pc, #20]	; (3e84 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    3e70:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    3e72:	c909      	ldmia	r1!, {r0, r3}
#ifdef CONFIG_EXECUTION_BENCHMARKING
	push {r0, r3}	/* Save r0 and r3 into stack */
	bl read_timer_end_of_isr
	pop {r0, r3}	/* Restore r0 and r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    3e74:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    3e76:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    3e7a:	4903      	ldr	r1, [pc, #12]	; (3e88 <_isr_wrapper+0x3c>)
	bx r1
    3e7c:	4708      	bx	r1
    3e7e:	0000      	.short	0x0000
	ldr r2, =_kernel
    3e80:	20001d88 	.word	0x20001d88
	ldr r1, =_sw_isr_table
    3e84:	00016ab0 	.word	0x00016ab0
	ldr r1, =z_arm_int_exit
    3e88:	00003ed1 	.word	0x00003ed1

00003e8c <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    3e8c:	f00e fbda 	bl	12644 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3e90:	2020      	movs	r0, #32
    msr BASEPRI, r0
    3e92:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    3e96:	4808      	ldr	r0, [pc, #32]	; (3eb8 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    3e98:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    3e9c:	1840      	adds	r0, r0, r1
    msr PSP, r0
    3e9e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    3ea2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    3ea6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    3ea8:	4308      	orrs	r0, r1
    msr CONTROL, r0
    3eaa:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    3eae:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    3eb2:	f7ff ff55 	bl	3d60 <z_arm_prep_c>
    3eb6:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    3eb8:	200037d8 	.word	0x200037d8

00003ebc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    3ebc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    3ec0:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
    3ec4:	4672      	mov	r2, lr

	push {r0, lr}
    3ec6:	b501      	push	{r0, lr}

	bl z_arm_fault
    3ec8:	f000 f92e 	bl	4128 <z_arm_fault>

	pop {r0, pc}
    3ecc:	bd01      	pop	{r0, pc}
    3ece:	bf00      	nop

00003ed0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    3ed0:	4b04      	ldr	r3, [pc, #16]	; (3ee4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    3ed2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    3ed4:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    3ed6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    3ed8:	d003      	beq.n	3ee2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    3eda:	4903      	ldr	r1, [pc, #12]	; (3ee8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    3edc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    3ee0:	600a      	str	r2, [r1, #0]

00003ee2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    3ee2:	4770      	bx	lr
	ldr r3, =_kernel
    3ee4:	20001d88 	.word	0x20001d88
	ldr r1, =_SCS_ICSR
    3ee8:	e000ed04 	.word	0xe000ed04

00003eec <bus_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    3eec:	b570      	push	{r4, r5, r6, lr}
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3eee:	4c23      	ldr	r4, [pc, #140]	; (3f7c <bus_fault.isra.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    3ef0:	4606      	mov	r6, r0
    3ef2:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    3ef4:	4822      	ldr	r0, [pc, #136]	; (3f80 <bus_fault.isra.0+0x94>)
    3ef6:	2145      	movs	r1, #69	; 0x45
    3ef8:	f00e f906 	bl	12108 <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3efc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    3efe:	04d1      	lsls	r1, r2, #19
    3f00:	d503      	bpl.n	3f0a <bus_fault.isra.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    3f02:	2145      	movs	r1, #69	; 0x45
    3f04:	481f      	ldr	r0, [pc, #124]	; (3f84 <bus_fault.isra.0+0x98>)
    3f06:	f00e f8ff 	bl	12108 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    3f0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3f0c:	051a      	lsls	r2, r3, #20
    3f0e:	d503      	bpl.n	3f18 <bus_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    3f10:	2145      	movs	r1, #69	; 0x45
    3f12:	481d      	ldr	r0, [pc, #116]	; (3f88 <bus_fault.isra.0+0x9c>)
    3f14:	f00e f8f8 	bl	12108 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    3f18:	4c18      	ldr	r4, [pc, #96]	; (3f7c <bus_fault.isra.0+0x90>)
    3f1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3f1c:	059b      	lsls	r3, r3, #22
    3f1e:	d510      	bpl.n	3f42 <bus_fault.isra.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    3f20:	481a      	ldr	r0, [pc, #104]	; (3f8c <bus_fault.isra.0+0xa0>)
    3f22:	2145      	movs	r1, #69	; 0x45
    3f24:	f00e f8f0 	bl	12108 <printk>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    3f28:	6ba2      	ldr	r2, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    3f2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3f2c:	0418      	lsls	r0, r3, #16
    3f2e:	d508      	bpl.n	3f42 <bus_fault.isra.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    3f30:	2145      	movs	r1, #69	; 0x45
    3f32:	4817      	ldr	r0, [pc, #92]	; (3f90 <bus_fault.isra.0+0xa4>)
    3f34:	f00e f8e8 	bl	12108 <printk>
			if (from_hard_fault) {
    3f38:	b11e      	cbz	r6, 3f42 <bus_fault.isra.0+0x56>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    3f3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3f3c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    3f40:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3f42:	4c0e      	ldr	r4, [pc, #56]	; (3f7c <bus_fault.isra.0+0x90>)
    3f44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3f46:	0559      	lsls	r1, r3, #21
    3f48:	d503      	bpl.n	3f52 <bus_fault.isra.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    3f4a:	2145      	movs	r1, #69	; 0x45
    3f4c:	4811      	ldr	r0, [pc, #68]	; (3f94 <bus_fault.isra.0+0xa8>)
    3f4e:	f00e f8db 	bl	12108 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    3f52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3f54:	05da      	lsls	r2, r3, #23
    3f56:	d50b      	bpl.n	3f70 <bus_fault.isra.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    3f58:	2145      	movs	r1, #69	; 0x45
    3f5a:	480f      	ldr	r0, [pc, #60]	; (3f98 <bus_fault.isra.0+0xac>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    3f5c:	f00e f8d4 	bl	12108 <printk>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
    3f60:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3f62:	4a06      	ldr	r2, [pc, #24]	; (3f7c <bus_fault.isra.0+0x90>)
    3f64:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3f66:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    3f6a:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    3f6c:	7028      	strb	r0, [r5, #0]

	return reason;
}
    3f6e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    3f70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3f72:	049b      	lsls	r3, r3, #18
    3f74:	d5f4      	bpl.n	3f60 <bus_fault.isra.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    3f76:	2145      	movs	r1, #69	; 0x45
    3f78:	4808      	ldr	r0, [pc, #32]	; (3f9c <bus_fault.isra.0+0xb0>)
    3f7a:	e7ef      	b.n	3f5c <bus_fault.isra.0+0x70>
    3f7c:	e000ed00 	.word	0xe000ed00
    3f80:	000189cb 	.word	0x000189cb
    3f84:	000189e6 	.word	0x000189e6
    3f88:	000189fc 	.word	0x000189fc
    3f8c:	00018a14 	.word	0x00018a14
    3f90:	00018a32 	.word	0x00018a32
    3f94:	00018a4c 	.word	0x00018a4c
    3f98:	00018a6c 	.word	0x00018a6c
    3f9c:	00018a89 	.word	0x00018a89

00003fa0 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
    3fa0:	b538      	push	{r3, r4, r5, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3fa2:	4c21      	ldr	r4, [pc, #132]	; (4028 <usage_fault.isra.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    3fa4:	2145      	movs	r1, #69	; 0x45
    3fa6:	4821      	ldr	r0, [pc, #132]	; (402c <usage_fault.isra.0+0x8c>)
    3fa8:	f00e f8ae 	bl	12108 <printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3fac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    3fae:	0195      	lsls	r5, r2, #6
    3fb0:	d503      	bpl.n	3fba <usage_fault.isra.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    3fb2:	2145      	movs	r1, #69	; 0x45
    3fb4:	481e      	ldr	r0, [pc, #120]	; (4030 <usage_fault.isra.0+0x90>)
    3fb6:	f00e f8a7 	bl	12108 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    3fba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3fbc:	01dc      	lsls	r4, r3, #7
    3fbe:	d503      	bpl.n	3fc8 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    3fc0:	2145      	movs	r1, #69	; 0x45
    3fc2:	481c      	ldr	r0, [pc, #112]	; (4034 <usage_fault.isra.0+0x94>)
    3fc4:	f00e f8a0 	bl	12108 <printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    3fc8:	4d17      	ldr	r5, [pc, #92]	; (4028 <usage_fault.isra.0+0x88>)
    3fca:	6aac      	ldr	r4, [r5, #40]	; 0x28
    3fcc:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    3fd0:	d004      	beq.n	3fdc <usage_fault.isra.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    3fd2:	2145      	movs	r1, #69	; 0x45
    3fd4:	4818      	ldr	r0, [pc, #96]	; (4038 <usage_fault.isra.0+0x98>)
    3fd6:	f00e f897 	bl	12108 <printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    3fda:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    3fdc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3fde:	0318      	lsls	r0, r3, #12
    3fe0:	d503      	bpl.n	3fea <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    3fe2:	2145      	movs	r1, #69	; 0x45
    3fe4:	4815      	ldr	r0, [pc, #84]	; (403c <usage_fault.isra.0+0x9c>)
    3fe6:	f00e f88f 	bl	12108 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    3fea:	4d0f      	ldr	r5, [pc, #60]	; (4028 <usage_fault.isra.0+0x88>)
    3fec:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    3fee:	0351      	lsls	r1, r2, #13
    3ff0:	d503      	bpl.n	3ffa <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    3ff2:	2145      	movs	r1, #69	; 0x45
    3ff4:	4812      	ldr	r0, [pc, #72]	; (4040 <usage_fault.isra.0+0xa0>)
    3ff6:	f00e f887 	bl	12108 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    3ffa:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3ffc:	039a      	lsls	r2, r3, #14
    3ffe:	d503      	bpl.n	4008 <usage_fault.isra.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    4000:	2145      	movs	r1, #69	; 0x45
    4002:	4810      	ldr	r0, [pc, #64]	; (4044 <usage_fault.isra.0+0xa4>)
    4004:	f00e f880 	bl	12108 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    4008:	4d07      	ldr	r5, [pc, #28]	; (4028 <usage_fault.isra.0+0x88>)
    400a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    400c:	03db      	lsls	r3, r3, #15
    400e:	d503      	bpl.n	4018 <usage_fault.isra.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    4010:	2145      	movs	r1, #69	; 0x45
    4012:	480d      	ldr	r0, [pc, #52]	; (4048 <usage_fault.isra.0+0xa8>)
    4014:	f00e f878 	bl	12108 <printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    4018:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    401a:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    401c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    4020:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    4024:	62ab      	str	r3, [r5, #40]	; 0x28
}
    4026:	bd38      	pop	{r3, r4, r5, pc}
    4028:	e000ed00 	.word	0xe000ed00
    402c:	00018abd 	.word	0x00018abd
    4030:	00018ada 	.word	0x00018ada
    4034:	00018af2 	.word	0x00018af2
    4038:	00018b11 	.word	0x00018b11
    403c:	00018b40 	.word	0x00018b40
    4040:	00018b63 	.word	0x00018b63
    4044:	00018b8d 	.word	0x00018b8d
    4048:	00018bac 	.word	0x00018bac

0000404c <mem_manage_fault.isra.0>:
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    404c:	b570      	push	{r4, r5, r6, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    404e:	4c2a      	ldr	r4, [pc, #168]	; (40f8 <mem_manage_fault.isra.0+0xac>)
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    4050:	4606      	mov	r6, r0
    4052:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    4054:	4829      	ldr	r0, [pc, #164]	; (40fc <mem_manage_fault.isra.0+0xb0>)
    4056:	2145      	movs	r1, #69	; 0x45
    4058:	f00e f856 	bl	12108 <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    405c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    405e:	06d1      	lsls	r1, r2, #27
    4060:	d503      	bpl.n	406a <mem_manage_fault.isra.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    4062:	2145      	movs	r1, #69	; 0x45
    4064:	4826      	ldr	r0, [pc, #152]	; (4100 <mem_manage_fault.isra.0+0xb4>)
    4066:	f00e f84f 	bl	12108 <printk>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    406a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    406c:	071a      	lsls	r2, r3, #28
    406e:	d503      	bpl.n	4078 <mem_manage_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    4070:	2145      	movs	r1, #69	; 0x45
    4072:	4824      	ldr	r0, [pc, #144]	; (4104 <mem_manage_fault.isra.0+0xb8>)
    4074:	f00e f848 	bl	12108 <printk>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    4078:	4c1f      	ldr	r4, [pc, #124]	; (40f8 <mem_manage_fault.isra.0+0xac>)
    407a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    407c:	079b      	lsls	r3, r3, #30
    407e:	d510      	bpl.n	40a2 <mem_manage_fault.isra.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
    4080:	4821      	ldr	r0, [pc, #132]	; (4108 <mem_manage_fault.isra.0+0xbc>)
    4082:	2145      	movs	r1, #69	; 0x45
    4084:	f00e f840 	bl	12108 <printk>
		mmfar = SCB->MMFAR;
    4088:	6b62      	ldr	r2, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    408a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    408c:	0618      	lsls	r0, r3, #24
    408e:	d508      	bpl.n	40a2 <mem_manage_fault.isra.0+0x56>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    4090:	2145      	movs	r1, #69	; 0x45
    4092:	481e      	ldr	r0, [pc, #120]	; (410c <mem_manage_fault.isra.0+0xc0>)
    4094:	f00e f838 	bl	12108 <printk>
			if (from_hard_fault) {
    4098:	b11e      	cbz	r6, 40a2 <mem_manage_fault.isra.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    409a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    409c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    40a0:	62a3      	str	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    40a2:	4c15      	ldr	r4, [pc, #84]	; (40f8 <mem_manage_fault.isra.0+0xac>)
    40a4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    40a6:	07d1      	lsls	r1, r2, #31
    40a8:	d503      	bpl.n	40b2 <mem_manage_fault.isra.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
    40aa:	2145      	movs	r1, #69	; 0x45
    40ac:	4818      	ldr	r0, [pc, #96]	; (4110 <mem_manage_fault.isra.0+0xc4>)
    40ae:	f00e f82b 	bl	12108 <printk>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    40b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    40b4:	069a      	lsls	r2, r3, #26
    40b6:	d503      	bpl.n	40c0 <mem_manage_fault.isra.0+0x74>
		PR_FAULT_INFO(
    40b8:	2145      	movs	r1, #69	; 0x45
    40ba:	4816      	ldr	r0, [pc, #88]	; (4114 <mem_manage_fault.isra.0+0xc8>)
    40bc:	f00e f824 	bl	12108 <printk>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    40c0:	4b0d      	ldr	r3, [pc, #52]	; (40f8 <mem_manage_fault.isra.0+0xac>)
    40c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    40c4:	06db      	lsls	r3, r3, #27
    40c6:	d50e      	bpl.n	40e6 <mem_manage_fault.isra.0+0x9a>
	__ASSERT(0,
    40c8:	4913      	ldr	r1, [pc, #76]	; (4118 <mem_manage_fault.isra.0+0xcc>)
    40ca:	f44f 739b 	mov.w	r3, #310	; 0x136
    40ce:	4a13      	ldr	r2, [pc, #76]	; (411c <mem_manage_fault.isra.0+0xd0>)
    40d0:	4813      	ldr	r0, [pc, #76]	; (4120 <mem_manage_fault.isra.0+0xd4>)
    40d2:	f00e f819 	bl	12108 <printk>
    40d6:	4813      	ldr	r0, [pc, #76]	; (4124 <mem_manage_fault.isra.0+0xd8>)
    40d8:	f00e f816 	bl	12108 <printk>
    40dc:	f44f 719b 	mov.w	r1, #310	; 0x136
    40e0:	480e      	ldr	r0, [pc, #56]	; (411c <mem_manage_fault.isra.0+0xd0>)
    40e2:	f00e faa7 	bl	12634 <assert_post_action>
	*recoverable = memory_fault_recoverable(esf);
    40e6:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    40e8:	4a03      	ldr	r2, [pc, #12]	; (40f8 <mem_manage_fault.isra.0+0xac>)
    40ea:	6a93      	ldr	r3, [r2, #40]	; 0x28
    40ec:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    40f0:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    40f2:	7028      	strb	r0, [r5, #0]
}
    40f4:	bd70      	pop	{r4, r5, r6, pc}
    40f6:	bf00      	nop
    40f8:	e000ed00 	.word	0xe000ed00
    40fc:	00018bdc 	.word	0x00018bdc
    4100:	00018bf7 	.word	0x00018bf7
    4104:	000189fc 	.word	0x000189fc
    4108:	00018c2f 	.word	0x00018c2f
    410c:	00018c4c 	.word	0x00018c4c
    4110:	00018c67 	.word	0x00018c67
    4114:	00018a89 	.word	0x00018a89
    4118:	0001ba27 	.word	0x0001ba27
    411c:	00018c8b 	.word	0x00018c8b
    4120:	00017d82 	.word	0x00017d82
    4124:	00018cc5 	.word	0x00018cc5

00004128 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
    4128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    412c:	4b52      	ldr	r3, [pc, #328]	; (4278 <z_arm_fault+0x150>)
{
    412e:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4130:	f8d3 8004 	ldr.w	r8, [r3, #4]
    4134:	2500      	movs	r5, #0
{
    4136:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4138:	f3c8 0708 	ubfx	r7, r8, #0, #9
    413c:	f385 8811 	msr	BASEPRI, r5
    4140:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    4144:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    4148:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    414c:	d107      	bne.n	415e <z_arm_fault+0x36>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    414e:	f002 030c 	and.w	r3, r2, #12
    4152:	2b08      	cmp	r3, #8
    4154:	d114      	bne.n	4180 <z_arm_fault+0x58>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    4156:	2145      	movs	r1, #69	; 0x45
    4158:	4848      	ldr	r0, [pc, #288]	; (427c <z_arm_fault+0x154>)
    415a:	f00d ffd5 	bl	12108 <printk>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    415e:	f240 33b1 	movw	r3, #945	; 0x3b1
    4162:	4a47      	ldr	r2, [pc, #284]	; (4280 <z_arm_fault+0x158>)
    4164:	4947      	ldr	r1, [pc, #284]	; (4284 <z_arm_fault+0x15c>)
    4166:	4848      	ldr	r0, [pc, #288]	; (4288 <z_arm_fault+0x160>)
    4168:	f00d ffce 	bl	12108 <printk>
    416c:	4847      	ldr	r0, [pc, #284]	; (428c <z_arm_fault+0x164>)
    416e:	f00d ffcb 	bl	12108 <printk>
    4172:	f240 31b1 	movw	r1, #945	; 0x3b1
    4176:	4842      	ldr	r0, [pc, #264]	; (4280 <z_arm_fault+0x158>)
    4178:	f00e fa5c 	bl	12634 <assert_post_action>
    417c:	2600      	movs	r6, #0
    417e:	e005      	b.n	418c <z_arm_fault+0x64>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    4180:	0712      	lsls	r2, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
    4182:	bf5c      	itt	pl
    4184:	4606      	movpl	r6, r0
			*nested_exc = true;
    4186:	2501      	movpl	r5, #1
	__ASSERT(esf != NULL,
    4188:	2e00      	cmp	r6, #0
    418a:	d0e8      	beq.n	415e <z_arm_fault+0x36>
	*recoverable = false;
    418c:	2300      	movs	r3, #0
    418e:	1efa      	subs	r2, r7, #3
    4190:	461c      	mov	r4, r3
    4192:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    4196:	4613      	mov	r3, r2
    4198:	2b09      	cmp	r3, #9
    419a:	d85b      	bhi.n	4254 <z_arm_fault+0x12c>
    419c:	e8df f003 	tbb	[pc, r3]
    41a0:	33534f05 	.word	0x33534f05
    41a4:	5a5a5a5a 	.word	0x5a5a5a5a
    41a8:	575a      	.short	0x575a
	PR_FAULT_INFO("***** HARD FAULT *****");
    41aa:	2145      	movs	r1, #69	; 0x45
    41ac:	4838      	ldr	r0, [pc, #224]	; (4290 <z_arm_fault+0x168>)
    41ae:	f00d ffab 	bl	12108 <printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    41b2:	4b31      	ldr	r3, [pc, #196]	; (4278 <z_arm_fault+0x150>)
	*recoverable = false;
    41b4:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    41b8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    41ba:	f014 0402 	ands.w	r4, r4, #2
    41be:	d005      	beq.n	41cc <z_arm_fault+0xa4>
		PR_EXC("  Bus fault on vector table read");
    41c0:	2145      	movs	r1, #69	; 0x45
    41c2:	4834      	ldr	r0, [pc, #208]	; (4294 <z_arm_fault+0x16c>)
	PR_FAULT_INFO(
    41c4:	f00d ffa0 	bl	12108 <printk>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    41c8:	2400      	movs	r4, #0
}
    41ca:	e01f      	b.n	420c <z_arm_fault+0xe4>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    41cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    41ce:	005b      	lsls	r3, r3, #1
    41d0:	d51c      	bpl.n	420c <z_arm_fault+0xe4>
		PR_EXC("  Fault escalation (see below)");
    41d2:	2145      	movs	r1, #69	; 0x45
    41d4:	4830      	ldr	r0, [pc, #192]	; (4298 <z_arm_fault+0x170>)
    41d6:	f00d ff97 	bl	12108 <printk>
		if (SCB_MMFSR != 0) {
    41da:	4b30      	ldr	r3, [pc, #192]	; (429c <z_arm_fault+0x174>)
    41dc:	781b      	ldrb	r3, [r3, #0]
    41de:	b12b      	cbz	r3, 41ec <z_arm_fault+0xc4>
			reason = mem_manage_fault(esf, 1, recoverable);
    41e0:	2001      	movs	r0, #1
    41e2:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    41e6:	f7ff ff31 	bl	404c <mem_manage_fault.isra.0>
    41ea:	e00e      	b.n	420a <z_arm_fault+0xe2>
		} else if (SCB_BFSR != 0) {
    41ec:	4b2c      	ldr	r3, [pc, #176]	; (42a0 <z_arm_fault+0x178>)
    41ee:	781b      	ldrb	r3, [r3, #0]
    41f0:	b12b      	cbz	r3, 41fe <z_arm_fault+0xd6>
			reason = bus_fault(esf, 1, recoverable);
    41f2:	2001      	movs	r0, #1
    41f4:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    41f8:	f7ff fe78 	bl	3eec <bus_fault.isra.0>
    41fc:	e005      	b.n	420a <z_arm_fault+0xe2>
		} else if (SCB_UFSR != 0) {
    41fe:	4b29      	ldr	r3, [pc, #164]	; (42a4 <z_arm_fault+0x17c>)
    4200:	881b      	ldrh	r3, [r3, #0]
    4202:	b29b      	uxth	r3, r3
    4204:	b113      	cbz	r3, 420c <z_arm_fault+0xe4>
			reason = usage_fault(esf);
    4206:	f7ff fecb 	bl	3fa0 <usage_fault.isra.0>
    420a:	4604      	mov	r4, r0
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    420c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4210:	b993      	cbnz	r3, 4238 <z_arm_fault+0x110>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    4212:	2220      	movs	r2, #32
    4214:	4631      	mov	r1, r6
    4216:	a802      	add	r0, sp, #8
    4218:	f00f fa8b 	bl	13732 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    421c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    421e:	b335      	cbz	r5, 426e <z_arm_fault+0x146>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    4220:	f3c3 0208 	ubfx	r2, r3, #0, #9
    4224:	b922      	cbnz	r2, 4230 <z_arm_fault+0x108>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    4226:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    422a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    422e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    4230:	4620      	mov	r0, r4
    4232:	a902      	add	r1, sp, #8
    4234:	f7ff fd66 	bl	3d04 <z_arm_fatal_error>
}
    4238:	b00a      	add	sp, #40	; 0x28
    423a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    423e:	2000      	movs	r0, #0
    4240:	f10d 0107 	add.w	r1, sp, #7
    4244:	e7cf      	b.n	41e6 <z_arm_fault+0xbe>
		reason = bus_fault(esf, 0, recoverable);
    4246:	2000      	movs	r0, #0
    4248:	f10d 0107 	add.w	r1, sp, #7
    424c:	e7d4      	b.n	41f8 <z_arm_fault+0xd0>
	PR_FAULT_INFO(
    424e:	2145      	movs	r1, #69	; 0x45
    4250:	4815      	ldr	r0, [pc, #84]	; (42a8 <z_arm_fault+0x180>)
    4252:	e7b7      	b.n	41c4 <z_arm_fault+0x9c>
	PR_FAULT_INFO("***** %s %d) *****",
    4254:	4915      	ldr	r1, [pc, #84]	; (42ac <z_arm_fault+0x184>)
    4256:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    425a:	4a15      	ldr	r2, [pc, #84]	; (42b0 <z_arm_fault+0x188>)
    425c:	4815      	ldr	r0, [pc, #84]	; (42b4 <z_arm_fault+0x18c>)
    425e:	bf08      	it	eq
    4260:	460a      	moveq	r2, r1
    4262:	f1a7 0310 	sub.w	r3, r7, #16
    4266:	2145      	movs	r1, #69	; 0x45
    4268:	f00d ff4e 	bl	12108 <printk>
    426c:	e7ac      	b.n	41c8 <z_arm_fault+0xa0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    426e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    4272:	f023 0301 	bic.w	r3, r3, #1
    4276:	e7da      	b.n	422e <z_arm_fault+0x106>
    4278:	e000ed00 	.word	0xe000ed00
    427c:	00018d2d 	.word	0x00018d2d
    4280:	00018c8b 	.word	0x00018c8b
    4284:	00018d5d 	.word	0x00018d5d
    4288:	00017d82 	.word	0x00017d82
    428c:	00018d70 	.word	0x00018d70
    4290:	00018dae 	.word	0x00018dae
    4294:	00018dca 	.word	0x00018dca
    4298:	00018df0 	.word	0x00018df0
    429c:	e000ed28 	.word	0xe000ed28
    42a0:	e000ed29 	.word	0xe000ed29
    42a4:	e000ed2a 	.word	0xe000ed2a
    42a8:	00018e14 	.word	0x00018e14
    42ac:	00018cff 	.word	0x00018cff
    42b0:	00018d14 	.word	0x00018d14
    42b4:	00018e4f 	.word	0x00018e4f

000042b8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    42b8:	4b04      	ldr	r3, [pc, #16]	; (42cc <z_arm_fault_init+0x14>)
    42ba:	695a      	ldr	r2, [r3, #20]
    42bc:	f042 0210 	orr.w	r2, r2, #16
    42c0:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    42c2:	695a      	ldr	r2, [r3, #20]
    42c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    42c8:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    42ca:	4770      	bx	lr
    42cc:	e000ed00 	.word	0xe000ed00

000042d0 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    42d0:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    42d4:	4905      	ldr	r1, [pc, #20]	; (42ec <sys_arch_reboot+0x1c>)
    42d6:	4b06      	ldr	r3, [pc, #24]	; (42f0 <sys_arch_reboot+0x20>)
    42d8:	68ca      	ldr	r2, [r1, #12]
    42da:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    42de:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    42e0:	60cb      	str	r3, [r1, #12]
    42e2:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    42e6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    42e8:	e7fd      	b.n	42e6 <sys_arch_reboot+0x16>
    42ea:	bf00      	nop
    42ec:	e000ed00 	.word	0xe000ed00
    42f0:	05fa0004 	.word	0x05fa0004

000042f4 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    42f4:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    42f6:	2120      	movs	r1, #32
    42f8:	4803      	ldr	r0, [pc, #12]	; (4308 <z_arm_interrupt_init+0x14>)
    42fa:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    42fc:	3301      	adds	r3, #1
    42fe:	2b45      	cmp	r3, #69	; 0x45
    4300:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    4304:	d1f9      	bne.n	42fa <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    4306:	4770      	bx	lr
    4308:	e000e100 	.word	0xe000e100

0000430c <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    430c:	b538      	push	{r3, r4, r5, lr}
    430e:	4604      	mov	r4, r0
	__asm__ volatile(
    4310:	f04f 0320 	mov.w	r3, #32
    4314:	f3ef 8511 	mrs	r5, BASEPRI
    4318:	f383 8811 	msr	BASEPRI, r3
    431c:	f3bf 8f6f 	isb	sy
	unsigned int key;

	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
    4320:	7b03      	ldrb	r3, [r0, #12]
    4322:	07db      	lsls	r3, r3, #31
    4324:	d50c      	bpl.n	4340 <z_impl_k_thread_abort+0x34>
    4326:	4912      	ldr	r1, [pc, #72]	; (4370 <z_impl_k_thread_abort+0x64>)
    4328:	2323      	movs	r3, #35	; 0x23
    432a:	4a12      	ldr	r2, [pc, #72]	; (4374 <z_impl_k_thread_abort+0x68>)
    432c:	4812      	ldr	r0, [pc, #72]	; (4378 <z_impl_k_thread_abort+0x6c>)
    432e:	f00d feeb 	bl	12108 <printk>
    4332:	4812      	ldr	r0, [pc, #72]	; (437c <z_impl_k_thread_abort+0x70>)
    4334:	f00d fee8 	bl	12108 <printk>
    4338:	2123      	movs	r1, #35	; 0x23
    433a:	480e      	ldr	r0, [pc, #56]	; (4374 <z_impl_k_thread_abort+0x68>)
    433c:	f00e f97a 	bl	12634 <assert_post_action>
		 "essential thread aborted");

	z_thread_single_abort(thread);
    4340:	4620      	mov	r0, r4
    4342:	f00b ffdb 	bl	102fc <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    4346:	4b0e      	ldr	r3, [pc, #56]	; (4380 <z_impl_k_thread_abort+0x74>)
    4348:	689b      	ldr	r3, [r3, #8]
    434a:	42a3      	cmp	r3, r4
    434c:	d10b      	bne.n	4366 <z_impl_k_thread_abort+0x5a>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    434e:	4b0d      	ldr	r3, [pc, #52]	; (4384 <z_impl_k_thread_abort+0x78>)
    4350:	685a      	ldr	r2, [r3, #4]
    4352:	f3c2 0208 	ubfx	r2, r2, #0, #9
    4356:	b912      	cbnz	r2, 435e <z_impl_k_thread_abort+0x52>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
    4358:	4628      	mov	r0, r5
    435a:	f7ff fc3f 	bl	3bdc <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    435e:	685a      	ldr	r2, [r3, #4]
    4360:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    4364:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    4366:	4628      	mov	r0, r5
}
    4368:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    436c:	f012 ba20 	b.w	167b0 <z_reschedule_irqlock>
    4370:	00018ea8 	.word	0x00018ea8
    4374:	00018e67 	.word	0x00018e67
    4378:	00017d82 	.word	0x00017d82
    437c:	00018ed6 	.word	0x00018ed6
    4380:	20001d88 	.word	0x20001d88
    4384:	e000ed00 	.word	0xe000ed00

00004388 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    4388:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    438a:	4b0e      	ldr	r3, [pc, #56]	; (43c4 <z_arm_configure_static_mpu_regions+0x3c>)
{
    438c:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
    438e:	9302      	str	r3, [sp, #8]
    4390:	4b0d      	ldr	r3, [pc, #52]	; (43c8 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    4392:	4c0e      	ldr	r4, [pc, #56]	; (43cc <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
    4394:	9303      	str	r3, [sp, #12]
    4396:	4b0e      	ldr	r3, [pc, #56]	; (43d0 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    4398:	4a0e      	ldr	r2, [pc, #56]	; (43d4 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
    439a:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
    439c:	ab02      	add	r3, sp, #8
    439e:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    43a0:	a801      	add	r0, sp, #4
    43a2:	4623      	mov	r3, r4
    43a4:	2101      	movs	r1, #1
    43a6:	f000 f96d 	bl	4684 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
    43aa:	2300      	movs	r3, #0
    43ac:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    43ae:	4b0a      	ldr	r3, [pc, #40]	; (43d8 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    43b0:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    43b2:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    43b4:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
    43b6:	9305      	str	r3, [sp, #20]
    43b8:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    43ba:	f000 f989 	bl	46d0 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    43be:	b008      	add	sp, #32
    43c0:	bd10      	pop	{r4, pc}
    43c2:	bf00      	nop
    43c4:	20000000 	.word	0x20000000
    43c8:	00000000 	.word	0x00000000
    43cc:	20070000 	.word	0x20070000
    43d0:	00010006 	.word	0x00010006
    43d4:	20000000 	.word	0x20000000
    43d8:	20000690 	.word	0x20000690

000043dc <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
    43dc:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    43de:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    43e0:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    43e2:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    43e6:	f004 031f 	and.w	r3, r4, #31
    43ea:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    43ec:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    43ee:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    43f0:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    43f4:	4904      	ldr	r1, [pc, #16]	; (4408 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    43f6:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    43fa:	f043 0301 	orr.w	r3, r3, #1
    43fe:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    4400:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    4402:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    4404:	bd10      	pop	{r4, pc}
    4406:	bf00      	nop
    4408:	e000ed90 	.word	0xe000ed90

0000440c <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const u8_t index,
	const struct k_mem_partition *new_region)
{
    440c:	b530      	push	{r4, r5, lr}

	LOG_DBG("Configure MPU region at index 0x%x", index);

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    440e:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
    4410:	680c      	ldr	r4, [r1, #0]
{
    4412:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_k_mem_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, u32_t base, u32_t size)
{
	p_attr->rbar = attr->rbar &
    4414:	890a      	ldrh	r2, [r1, #8]
    4416:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
    4418:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    441a:	3b01      	subs	r3, #1
    441c:	f024 041f 	bic.w	r4, r4, #31
    4420:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    4422:	f002 021f 	and.w	r2, r2, #31
    4426:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    442a:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
    442e:	280f      	cmp	r0, #15
    4430:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
    4432:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    4436:	9303      	str	r3, [sp, #12]
    4438:	d909      	bls.n	444e <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    443a:	4602      	mov	r2, r0
    443c:	2145      	movs	r1, #69	; 0x45
    443e:	4806      	ldr	r0, [pc, #24]	; (4458 <mpu_configure_region+0x4c>)
    4440:	f00d fe62 	bl	12108 <printk>
		return -EINVAL;
    4444:	f06f 0415 	mvn.w	r4, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
    4448:	4620      	mov	r0, r4
    444a:	b005      	add	sp, #20
    444c:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
    444e:	4669      	mov	r1, sp
    4450:	f7ff ffc4 	bl	43dc <region_init>
	return region_allocate_and_init(index,
    4454:	e7f8      	b.n	4448 <mpu_configure_region+0x3c>
    4456:	bf00      	nop
    4458:	00018ef5 	.word	0x00018ef5

0000445c <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    445c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4460:	4680      	mov	r8, r0
    4462:	4689      	mov	r9, r1
    4464:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    4466:	2700      	movs	r7, #0
	MPU->RNR = index;
    4468:	4d4e      	ldr	r5, [pc, #312]	; (45a4 <mpu_configure_regions_and_partition.constprop.0+0x148>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    446a:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    446c:	454f      	cmp	r7, r9
    446e:	da29      	bge.n	44c4 <mpu_configure_regions_and_partition.constprop.0+0x68>
		if (regions[i]->size == 0U) {
    4470:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
    4474:	f8d3 a004 	ldr.w	sl, [r3, #4]
    4478:	f1ba 0f00 	cmp.w	sl, #0
    447c:	d042      	beq.n	4504 <mpu_configure_regions_and_partition.constprop.0+0xa8>
		&&
    447e:	f1ba 0f1f 	cmp.w	sl, #31
    4482:	d918      	bls.n	44b6 <mpu_configure_regions_and_partition.constprop.0+0x5a>
		&&
    4484:	f01a 0f1f 	tst.w	sl, #31
    4488:	d115      	bne.n	44b6 <mpu_configure_regions_and_partition.constprop.0+0x5a>
		((part->start &
    448a:	f8d3 b000 	ldr.w	fp, [r3]
		&&
    448e:	f01b 0f1f 	tst.w	fp, #31
    4492:	d110      	bne.n	44b6 <mpu_configure_regions_and_partition.constprop.0+0x5a>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    4494:	4658      	mov	r0, fp
    4496:	f00f f87e 	bl	13596 <arm_cmse_mpu_region_get>
    449a:	4606      	mov	r6, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    449c:	eb0a 000b 	add.w	r0, sl, fp
    44a0:	3801      	subs	r0, #1
    44a2:	f00f f878 	bl	13596 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    44a6:	4286      	cmp	r6, r0
    44a8:	d010      	beq.n	44cc <mpu_configure_regions_and_partition.constprop.0+0x70>
	return -EINVAL;
    44aa:	f06f 0615 	mvn.w	r6, #21
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    44ae:	4632      	mov	r2, r6
    44b0:	2145      	movs	r1, #69	; 0x45
    44b2:	483d      	ldr	r0, [pc, #244]	; (45a8 <mpu_configure_regions_and_partition.constprop.0+0x14c>)
    44b4:	e002      	b.n	44bc <mpu_configure_regions_and_partition.constprop.0+0x60>
			LOG_ERR("Partition %u: sanity check failed.", i);
    44b6:	463a      	mov	r2, r7
    44b8:	2145      	movs	r1, #69	; 0x45
    44ba:	483c      	ldr	r0, [pc, #240]	; (45ac <mpu_configure_regions_and_partition.constprop.0+0x150>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    44bc:	f00d fe24 	bl	12108 <printk>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    44c0:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    44c4:	4620      	mov	r0, r4
    44c6:	b005      	add	sp, #20
    44c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    44cc:	f116 0f16 	cmn.w	r6, #22
    44d0:	d0ed      	beq.n	44ae <mpu_configure_regions_and_partition.constprop.0+0x52>
			(u_reg_index > (reg_index - 1))) {
    44d2:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    44d4:	42b3      	cmp	r3, r6
    44d6:	dbea      	blt.n	44ae <mpu_configure_regions_and_partition.constprop.0+0x52>
	MPU->RNR = index;
    44d8:	60ae      	str	r6, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    44da:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
    44dc:	60ae      	str	r6, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    44de:	692b      	ldr	r3, [r5, #16]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    44e0:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    44e4:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    44e8:	f043 0b1f 	orr.w	fp, r3, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    44ec:	e9d1 3200 	ldrd	r3, r2, [r1]
    44f0:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
    44f2:	4298      	cmp	r0, r3
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    44f4:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i]->start == u_reg_base) &&
    44f8:	d116      	bne.n	4528 <mpu_configure_regions_and_partition.constprop.0+0xcc>
    44fa:	45d3      	cmp	fp, sl
    44fc:	d104      	bne.n	4508 <mpu_configure_regions_and_partition.constprop.0+0xac>
			mpu_configure_region(u_reg_index, regions[i]);
    44fe:	b2f0      	uxtb	r0, r6
    4500:	f7ff ff84 	bl	440c <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    4504:	3701      	adds	r7, #1
    4506:	e7b1      	b.n	446c <mpu_configure_regions_and_partition.constprop.0+0x10>
	MPU->RNR = index;
    4508:	60ae      	str	r6, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    450a:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    450c:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    4510:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    4514:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    4516:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
    4518:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
    451a:	f7ff ff77 	bl	440c <mpu_configure_region>
			if (reg_index == -EINVAL) {
    451e:	f110 0f16 	cmn.w	r0, #22
    4522:	d0cd      	beq.n	44c0 <mpu_configure_regions_and_partition.constprop.0+0x64>
			reg_index++;
    4524:	1c44      	adds	r4, r0, #1
    4526:	e7ed      	b.n	4504 <mpu_configure_regions_and_partition.constprop.0+0xa8>
	MPU->RNR = index;
    4528:	60ae      	str	r6, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    452a:	692a      	ldr	r2, [r5, #16]
    452c:	3b01      	subs	r3, #1
    452e:	f023 031f 	bic.w	r3, r3, #31
    4532:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    4536:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    4538:	45d3      	cmp	fp, sl
    453a:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    453c:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
    453e:	d0ec      	beq.n	451a <mpu_configure_regions_and_partition.constprop.0+0xbe>
				mpu_configure_region(reg_index, regions[i]);
    4540:	f7ff ff64 	bl	440c <mpu_configure_region>
			if (reg_index == -EINVAL) {
    4544:	f110 0f16 	cmn.w	r0, #22
    4548:	d0ba      	beq.n	44c0 <mpu_configure_regions_and_partition.constprop.0+0x64>
	MPU->RNR = index;
    454a:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
    454c:	68ea      	ldr	r2, [r5, #12]
    454e:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
    4552:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = MPU->RBAR &
    4556:	f362 0304 	bfi	r3, r2, #0, #5
    455a:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    455e:	692b      	ldr	r3, [r5, #16]
    4560:	f89d 2008 	ldrb.w	r2, [sp, #8]
    4564:	085b      	lsrs	r3, r3, #1
    4566:	f363 1247 	bfi	r2, r3, #5, #3
    456a:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
    456e:	f858 2027 	ldr.w	r2, [r8, r7, lsl #2]
			reg_index++;
    4572:	3001      	adds	r0, #1
			fill_region.base = regions[i]->start +
    4574:	e9d2 3200 	ldrd	r3, r2, [r2]
    4578:	4413      	add	r3, r2
    457a:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
    457c:	f023 031f 	bic.w	r3, r3, #31
    4580:	445b      	add	r3, fp
    4582:	eba3 030a 	sub.w	r3, r3, sl
    4586:	b2c0      	uxtb	r0, r0
    4588:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
    458c:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
    458e:	9303      	str	r3, [sp, #12]
    4590:	d903      	bls.n	459a <mpu_configure_regions_and_partition.constprop.0+0x13e>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    4592:	4602      	mov	r2, r0
    4594:	2145      	movs	r1, #69	; 0x45
    4596:	4806      	ldr	r0, [pc, #24]	; (45b0 <mpu_configure_regions_and_partition.constprop.0+0x154>)
    4598:	e790      	b.n	44bc <mpu_configure_regions_and_partition.constprop.0+0x60>
	region_init(index, region_conf);
    459a:	4669      	mov	r1, sp
    459c:	f7ff ff1e 	bl	43dc <region_init>
    45a0:	e7c0      	b.n	4524 <mpu_configure_regions_and_partition.constprop.0+0xc8>
    45a2:	bf00      	nop
    45a4:	e000ed90 	.word	0xe000ed90
    45a8:	00018f48 	.word	0x00018f48
    45ac:	00018f20 	.word	0x00018f20
    45b0:	00018ef5 	.word	0x00018ef5

000045b4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    45b4:	2205      	movs	r2, #5
    45b6:	4b03      	ldr	r3, [pc, #12]	; (45c4 <arm_core_mpu_enable+0x10>)
    45b8:	605a      	str	r2, [r3, #4]
    45ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    45be:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    45c2:	4770      	bx	lr
    45c4:	e000ed90 	.word	0xe000ed90

000045c8 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    45c8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    45cc:	2200      	movs	r2, #0
    45ce:	4b01      	ldr	r3, [pc, #4]	; (45d4 <arm_core_mpu_disable+0xc>)
    45d0:	605a      	str	r2, [r3, #4]
}
    45d2:	4770      	bx	lr
    45d4:	e000ed90 	.word	0xe000ed90

000045d8 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
    45d8:	b570      	push	{r4, r5, r6, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    45da:	4e20      	ldr	r6, [pc, #128]	; (465c <arm_mpu_init+0x84>)
    45dc:	6835      	ldr	r5, [r6, #0]
    45de:	2d10      	cmp	r5, #16
    45e0:	d913      	bls.n	460a <arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    45e2:	f240 1339 	movw	r3, #313	; 0x139
    45e6:	4a1e      	ldr	r2, [pc, #120]	; (4660 <arm_mpu_init+0x88>)
    45e8:	491e      	ldr	r1, [pc, #120]	; (4664 <arm_mpu_init+0x8c>)
    45ea:	481f      	ldr	r0, [pc, #124]	; (4668 <arm_mpu_init+0x90>)
    45ec:	f00d fd8c 	bl	12108 <printk>
    45f0:	2210      	movs	r2, #16
    45f2:	4629      	mov	r1, r5
    45f4:	481d      	ldr	r0, [pc, #116]	; (466c <arm_mpu_init+0x94>)
    45f6:	f00d fd87 	bl	12108 <printk>
    45fa:	4819      	ldr	r0, [pc, #100]	; (4660 <arm_mpu_init+0x88>)
    45fc:	f240 1139 	movw	r1, #313	; 0x139
    4600:	f00e f818 	bl	12634 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    4604:	f04f 30ff 	mov.w	r0, #4294967295
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
    4608:	bd70      	pop	{r4, r5, r6, pc}
	arm_core_mpu_disable();
    460a:	f7ff ffdd 	bl	45c8 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    460e:	2000      	movs	r0, #0
	MPU->MAIR0 =
    4610:	4c17      	ldr	r4, [pc, #92]	; (4670 <arm_mpu_init+0x98>)
    4612:	4a18      	ldr	r2, [pc, #96]	; (4674 <arm_mpu_init+0x9c>)
    4614:	6322      	str	r2, [r4, #48]	; 0x30
    4616:	4285      	cmp	r5, r0
    4618:	d119      	bne.n	464e <arm_mpu_init+0x76>
	static_regions_num = mpu_config.num_regions;
    461a:	4b17      	ldr	r3, [pc, #92]	; (4678 <arm_mpu_init+0xa0>)
    461c:	701d      	strb	r5, [r3, #0]
	arm_core_mpu_enable();
    461e:	f7ff ffc9 	bl	45b4 <arm_core_mpu_enable>
	__ASSERT(
    4622:	6823      	ldr	r3, [r4, #0]
    4624:	f3c3 2307 	ubfx	r3, r3, #8, #8
    4628:	2b10      	cmp	r3, #16
    462a:	d00e      	beq.n	464a <arm_mpu_init+0x72>
    462c:	4913      	ldr	r1, [pc, #76]	; (467c <arm_mpu_init+0xa4>)
    462e:	f240 135b 	movw	r3, #347	; 0x15b
    4632:	4a0b      	ldr	r2, [pc, #44]	; (4660 <arm_mpu_init+0x88>)
    4634:	480c      	ldr	r0, [pc, #48]	; (4668 <arm_mpu_init+0x90>)
    4636:	f00d fd67 	bl	12108 <printk>
    463a:	4811      	ldr	r0, [pc, #68]	; (4680 <arm_mpu_init+0xa8>)
    463c:	f00d fd64 	bl	12108 <printk>
    4640:	f240 115b 	movw	r1, #347	; 0x15b
    4644:	4806      	ldr	r0, [pc, #24]	; (4660 <arm_mpu_init+0x88>)
    4646:	f00d fff5 	bl	12634 <assert_post_action>
	return 0;
    464a:	2000      	movs	r0, #0
    464c:	e7dc      	b.n	4608 <arm_mpu_init+0x30>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    464e:	6871      	ldr	r1, [r6, #4]
    4650:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    4654:	f7ff fec2 	bl	43dc <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4658:	3001      	adds	r0, #1
    465a:	e7dc      	b.n	4616 <arm_mpu_init+0x3e>
    465c:	000170c8 	.word	0x000170c8
    4660:	00018f70 	.word	0x00018f70
    4664:	0001ba27 	.word	0x0001ba27
    4668:	00017d82 	.word	0x00017d82
    466c:	00018fb0 	.word	0x00018fb0
    4670:	e000ed90 	.word	0xe000ed90
    4674:	0044ffaa 	.word	0x0044ffaa
    4678:	20001e88 	.word	0x20001e88
    467c:	00018fe4 	.word	0x00018fe4
    4680:	00019035 	.word	0x00019035

00004684 <arm_core_mpu_configure_static_mpu_regions>:
{
    4684:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    4686:	4d0d      	ldr	r5, [pc, #52]	; (46bc <arm_core_mpu_configure_static_mpu_regions+0x38>)
    4688:	460c      	mov	r4, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    468a:	782a      	ldrb	r2, [r5, #0]
    468c:	f7ff fee6 	bl	445c <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    4690:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    4692:	3016      	adds	r0, #22
    4694:	d111      	bne.n	46ba <arm_core_mpu_configure_static_mpu_regions+0x36>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    4696:	f44f 7381 	mov.w	r3, #258	; 0x102
    469a:	4a09      	ldr	r2, [pc, #36]	; (46c0 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    469c:	4909      	ldr	r1, [pc, #36]	; (46c4 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    469e:	480a      	ldr	r0, [pc, #40]	; (46c8 <arm_core_mpu_configure_static_mpu_regions+0x44>)
    46a0:	f00d fd32 	bl	12108 <printk>
    46a4:	4621      	mov	r1, r4
    46a6:	4809      	ldr	r0, [pc, #36]	; (46cc <arm_core_mpu_configure_static_mpu_regions+0x48>)
    46a8:	f00d fd2e 	bl	12108 <printk>
}
    46ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    46b0:	f44f 7181 	mov.w	r1, #258	; 0x102
    46b4:	4802      	ldr	r0, [pc, #8]	; (46c0 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    46b6:	f00d bfbd 	b.w	12634 <assert_post_action>
}
    46ba:	bd38      	pop	{r3, r4, r5, pc}
    46bc:	20001e88 	.word	0x20001e88
    46c0:	00018f70 	.word	0x00018f70
    46c4:	0001ba27 	.word	0x0001ba27
    46c8:	00017d82 	.word	0x00017d82
    46cc:	00019056 	.word	0x00019056

000046d0 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    46d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    46d4:	4e2f      	ldr	r6, [pc, #188]	; (4794 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
    46d6:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    46d8:	4605      	mov	r5, r0
    46da:	f04f 0800 	mov.w	r8, #0
    46de:	46b3      	mov	fp, r6
	MPU->RNR = index;
    46e0:	4f2d      	ldr	r7, [pc, #180]	; (4798 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    46e2:	45c8      	cmp	r8, r9
    46e4:	db02      	blt.n	46ec <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
}
    46e6:	b003      	add	sp, #12
    46e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
    46ec:	f8d5 a004 	ldr.w	sl, [r5, #4]
    46f0:	f1ba 0f00 	cmp.w	sl, #0
    46f4:	d049      	beq.n	478a <arm_core_mpu_mark_areas_for_dynamic_regions+0xba>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    46f6:	6829      	ldr	r1, [r5, #0]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    46f8:	4608      	mov	r0, r1
    46fa:	9101      	str	r1, [sp, #4]
    46fc:	f00e ff4b 	bl	13596 <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    4700:	9901      	ldr	r1, [sp, #4]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    4702:	4604      	mov	r4, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    4704:	eb0a 0001 	add.w	r0, sl, r1
    4708:	3801      	subs	r0, #1
    470a:	f00e ff44 	bl	13596 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    470e:	4284      	cmp	r4, r0
    4710:	f04f 0214 	mov.w	r2, #20
    4714:	4b21      	ldr	r3, [pc, #132]	; (479c <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
    4716:	d018      	beq.n	474a <arm_core_mpu_mark_areas_for_dynamic_regions+0x7a>
		dyn_reg_info[i].index =
    4718:	f06f 0315 	mvn.w	r3, #21
    471c:	fb02 f808 	mul.w	r8, r2, r8
    4720:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    4724:	f44f 7389 	mov.w	r3, #274	; 0x112
    4728:	4a1d      	ldr	r2, [pc, #116]	; (47a0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
    472a:	491e      	ldr	r1, [pc, #120]	; (47a4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
    472c:	481e      	ldr	r0, [pc, #120]	; (47a8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
    472e:	f00d fceb 	bl	12108 <printk>
    4732:	4649      	mov	r1, r9
    4734:	481d      	ldr	r0, [pc, #116]	; (47ac <arm_core_mpu_mark_areas_for_dynamic_regions+0xdc>)
    4736:	f00d fce7 	bl	12108 <printk>
    473a:	f44f 7189 	mov.w	r1, #274	; 0x112
    473e:	4818      	ldr	r0, [pc, #96]	; (47a0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
}
    4740:	b003      	add	sp, #12
    4742:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    4746:	f00d bf75 	b.w	12634 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    474a:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    474e:	6034      	str	r4, [r6, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    4750:	d0e8      	beq.n	4724 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    4752:	7819      	ldrb	r1, [r3, #0]
    4754:	42a1      	cmp	r1, r4
    4756:	dde5      	ble.n	4724 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
    4758:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    475c:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
    475e:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
    4760:	68fc      	ldr	r4, [r7, #12]
    4762:	f100 0108 	add.w	r1, r0, #8
    4766:	7b00      	ldrb	r0, [r0, #12]
    4768:	f364 0004 	bfi	r0, r4, #0, #5
    476c:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    476e:	6938      	ldr	r0, [r7, #16]
    4770:	790c      	ldrb	r4, [r1, #4]
    4772:	0840      	lsrs	r0, r0, #1
    4774:	f360 1447 	bfi	r4, r0, #5, #3
    4778:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    477a:	68f9      	ldr	r1, [r7, #12]
    477c:	f021 011f 	bic.w	r1, r1, #31
    4780:	6071      	str	r1, [r6, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    4782:	6939      	ldr	r1, [r7, #16]
    4784:	f021 011f 	bic.w	r1, r1, #31
    4788:	6131      	str	r1, [r6, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    478a:	f108 0801 	add.w	r8, r8, #1
    478e:	3614      	adds	r6, #20
    4790:	350c      	adds	r5, #12
    4792:	e7a6      	b.n	46e2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    4794:	20000bf8 	.word	0x20000bf8
    4798:	e000ed90 	.word	0xe000ed90
    479c:	20001e88 	.word	0x20001e88
    47a0:	00018f70 	.word	0x00018f70
    47a4:	0001ba27 	.word	0x0001ba27
    47a8:	00017d82 	.word	0x00017d82
    47ac:	00019082 	.word	0x00019082

000047b0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    47b0:	4b01      	ldr	r3, [pc, #4]	; (47b8 <__stdout_hook_install+0x8>)
    47b2:	6018      	str	r0, [r3, #0]
}
    47b4:	4770      	bx	lr
    47b6:	bf00      	nop
    47b8:	200001e8 	.word	0x200001e8

000047bc <remoteproc_mgr_boot>:
{
	/* UARTE */
	/* Assign specific GPIOs that will be used to get UARTE from
	 * nRF5340 Network MCU.
	 */
	NRF_P0->PIN_CNF[CPUNET_UARTE_PIN_TX] =
    47bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	NRF_SPU->EXTDOMAIN[0].PERM = 1 << 4;
}
#endif /* !CONFIG_TRUSTED_EXECUTION_NONSECURE */

static int remoteproc_mgr_boot(struct device *dev)
{
    47c0:	b508      	push	{r3, lr}
	NRF_P0->PIN_CNF[CPUNET_UARTE_PIN_TX] =
    47c2:	4b0c      	ldr	r3, [pc, #48]	; (47f4 <remoteproc_mgr_boot+0x38>)

	/* Initialize inter-processor shared memory block to zero. It is
	 * assumed that the application image has access to the shared
	 * memory at this point (see #24147).
	 */
	memset((void *) SHM_BASE_ADDRESS, 0, SHM_SIZE);
    47c4:	2100      	movs	r1, #0
	NRF_P0->PIN_CNF[CPUNET_UARTE_PIN_TX] =
    47c6:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
	NRF_P0->PIN_CNF[CPUNET_UARTE_PIN_RX] =
    47ca:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
	NRF_P0->PIN_CNF[CPUNET_UARTE_PIN_RTS] =
    47ce:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	NRF_P0->PIN_CNF[CPUNET_UARTE_PIN_CTS] =
    47d2:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	NRF_SPU->EXTDOMAIN[0].PERM = 1 << 4;
    47d6:	2210      	movs	r2, #16
    47d8:	4b07      	ldr	r3, [pc, #28]	; (47f8 <remoteproc_mgr_boot+0x3c>)
	memset((void *) SHM_BASE_ADDRESS, 0, SHM_SIZE);
    47da:	4808      	ldr	r0, [pc, #32]	; (47fc <remoteproc_mgr_boot+0x40>)
	NRF_SPU->EXTDOMAIN[0].PERM = 1 << 4;
    47dc:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
	memset((void *) SHM_BASE_ADDRESS, 0, SHM_SIZE);
    47e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    47e4:	f00e ffd0 	bl	13788 <memset>
#endif

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
    47e8:	2000      	movs	r0, #0
    47ea:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    47ee:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");

	return 0;
}
    47f2:	bd08      	pop	{r3, pc}
    47f4:	50842500 	.word	0x50842500
    47f8:	50003000 	.word	0x50003000
    47fc:	20070000 	.word	0x20070000

00004800 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const u8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    4800:	4b0e      	ldr	r3, [pc, #56]	; (483c <bt_hex_real+0x3c>)
    4802:	2940      	cmp	r1, #64	; 0x40
    4804:	bf28      	it	cs
    4806:	2140      	movcs	r1, #64	; 0x40
{
    4808:	b570      	push	{r4, r5, r6, lr}
    480a:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    480c:	4c0c      	ldr	r4, [pc, #48]	; (4840 <bt_hex_real+0x40>)
    480e:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
    4810:	42b0      	cmp	r0, r6
    4812:	f103 0302 	add.w	r3, r3, #2
    4816:	d104      	bne.n	4822 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    4818:	2300      	movs	r3, #0
    481a:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    481e:	4807      	ldr	r0, [pc, #28]	; (483c <bt_hex_real+0x3c>)
    4820:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    4822:	7802      	ldrb	r2, [r0, #0]
    4824:	0912      	lsrs	r2, r2, #4
    4826:	5ca2      	ldrb	r2, [r4, r2]
    4828:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    482c:	f810 2b01 	ldrb.w	r2, [r0], #1
    4830:	f002 020f 	and.w	r2, r2, #15
    4834:	5ca2      	ldrb	r2, [r4, r2]
    4836:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    483a:	e7e9      	b.n	4810 <bt_hex_real+0x10>
    483c:	20001e89 	.word	0x20001e89
    4840:	000190da 	.word	0x000190da

00004844 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    4844:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
    4846:	7803      	ldrb	r3, [r0, #0]
    4848:	b08b      	sub	sp, #44	; 0x2c
    484a:	4604      	mov	r4, r0
    484c:	ad07      	add	r5, sp, #28
    484e:	2b03      	cmp	r3, #3
    4850:	d821      	bhi.n	4896 <bt_addr_le_str_real+0x52>
    4852:	e8df f003 	tbb	[pc, r3]
    4856:	1a02      	.short	0x1a02
    4858:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    485a:	4912      	ldr	r1, [pc, #72]	; (48a4 <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
    485c:	4628      	mov	r0, r5
    485e:	f00e ff19 	bl	13694 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    4862:	7863      	ldrb	r3, [r4, #1]
    4864:	211e      	movs	r1, #30
    4866:	9304      	str	r3, [sp, #16]
    4868:	78a3      	ldrb	r3, [r4, #2]
    486a:	4a0f      	ldr	r2, [pc, #60]	; (48a8 <bt_addr_le_str_real+0x64>)
    486c:	9303      	str	r3, [sp, #12]
    486e:	78e3      	ldrb	r3, [r4, #3]
    4870:	9505      	str	r5, [sp, #20]
    4872:	9302      	str	r3, [sp, #8]
    4874:	7923      	ldrb	r3, [r4, #4]
    4876:	480d      	ldr	r0, [pc, #52]	; (48ac <bt_addr_le_str_real+0x68>)
    4878:	9301      	str	r3, [sp, #4]
    487a:	7963      	ldrb	r3, [r4, #5]
    487c:	9300      	str	r3, [sp, #0]
    487e:	79a3      	ldrb	r3, [r4, #6]
    4880:	f00d fc4f 	bl	12122 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    4884:	4809      	ldr	r0, [pc, #36]	; (48ac <bt_addr_le_str_real+0x68>)
    4886:	b00b      	add	sp, #44	; 0x2c
    4888:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    488a:	4909      	ldr	r1, [pc, #36]	; (48b0 <bt_addr_le_str_real+0x6c>)
    488c:	e7e6      	b.n	485c <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    488e:	4909      	ldr	r1, [pc, #36]	; (48b4 <bt_addr_le_str_real+0x70>)
    4890:	e7e4      	b.n	485c <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    4892:	4909      	ldr	r1, [pc, #36]	; (48b8 <bt_addr_le_str_real+0x74>)
    4894:	e7e2      	b.n	485c <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    4896:	210a      	movs	r1, #10
    4898:	4628      	mov	r0, r5
    489a:	4a08      	ldr	r2, [pc, #32]	; (48bc <bt_addr_le_str_real+0x78>)
    489c:	f00d fc41 	bl	12122 <snprintk>
		break;
    48a0:	e7df      	b.n	4862 <bt_addr_le_str_real+0x1e>
    48a2:	bf00      	nop
    48a4:	000178e7 	.word	0x000178e7
    48a8:	00017910 	.word	0x00017910
    48ac:	20001f0a 	.word	0x20001f0a
    48b0:	000178ee 	.word	0x000178ee
    48b4:	000178f5 	.word	0x000178f5
    48b8:	000178ff 	.word	0x000178ff
    48bc:	00017909 	.word	0x00017909

000048c0 <save_id>:
#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
	int err;
	BT_INFO("Saving ID");
    48c0:	2149      	movs	r1, #73	; 0x49
{
    48c2:	b508      	push	{r3, lr}
	BT_INFO("Saving ID");
    48c4:	4809      	ldr	r0, [pc, #36]	; (48ec <save_id+0x2c>)
    48c6:	f00d fc1f 	bl	12108 <printk>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
    48ca:	4909      	ldr	r1, [pc, #36]	; (48f0 <save_id+0x30>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
    48cc:	4809      	ldr	r0, [pc, #36]	; (48f4 <save_id+0x34>)
    48ce:	79ca      	ldrb	r2, [r1, #7]
    48d0:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    48d4:	f7fd f9d6 	bl	1c84 <settings_save_one>
	if (err) {
    48d8:	4602      	mov	r2, r0
    48da:	b128      	cbz	r0, 48e8 <save_id+0x28>
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
    48dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save ID (err %d)", err);
    48e0:	2145      	movs	r1, #69	; 0x45
    48e2:	4805      	ldr	r0, [pc, #20]	; (48f8 <save_id+0x38>)
    48e4:	f00d bc10 	b.w	12108 <printk>
}
    48e8:	bd08      	pop	{r3, pc}
    48ea:	bf00      	nop
    48ec:	000190f2 	.word	0x000190f2
    48f0:	20000000 	.word	0x20000000
    48f4:	00019101 	.word	0x00019101
    48f8:	00019107 	.word	0x00019107

000048fc <set>:
{
    48fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    48fe:	4616      	mov	r6, r2
    4900:	461f      	mov	r7, r3
	if (!name) {
    4902:	4604      	mov	r4, r0
    4904:	b930      	cbnz	r0, 4914 <set+0x18>
		BT_ERR("Insufficient number of arguments");
    4906:	2145      	movs	r1, #69	; 0x45
    4908:	4819      	ldr	r0, [pc, #100]	; (4970 <set+0x74>)
    490a:	f00d fbfd 	bl	12108 <printk>
	return -ENOENT;
    490e:	f06f 0401 	mvn.w	r4, #1
    4912:	e013      	b.n	493c <set+0x40>
	len = settings_name_next(name, &next);
    4914:	a901      	add	r1, sp, #4
    4916:	f00d ffed 	bl	128f4 <settings_name_next>
	if (!strncmp(name, "id", len)) {
    491a:	4916      	ldr	r1, [pc, #88]	; (4974 <set+0x78>)
	len = settings_name_next(name, &next);
    491c:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
    491e:	4620      	mov	r0, r4
    4920:	f00e fee8 	bl	136f4 <strncmp>
    4924:	4604      	mov	r4, r0
    4926:	2800      	cmp	r0, #0
    4928:	d1f1      	bne.n	490e <set+0x12>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    492a:	4d13      	ldr	r5, [pc, #76]	; (4978 <set+0x7c>)
    492c:	e8d5 3faf 	lda	r3, [r5]
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
    4930:	075b      	lsls	r3, r3, #29
    4932:	d506      	bpl.n	4942 <set+0x46>
			BT_WARN("Ignoring identities stored in flash");
    4934:	2157      	movs	r1, #87	; 0x57
    4936:	4811      	ldr	r0, [pc, #68]	; (497c <set+0x80>)
    4938:	f00d fbe6 	bl	12108 <printk>
}
    493c:	4620      	mov	r0, r4
    493e:	b003      	add	sp, #12
    4940:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
    4942:	3d98      	subs	r5, #152	; 0x98
    4944:	2207      	movs	r2, #7
    4946:	4629      	mov	r1, r5
    4948:	4638      	mov	r0, r7
    494a:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
    494c:	2806      	cmp	r0, #6
    494e:	d80a      	bhi.n	4966 <set+0x6a>
				BT_ERR("Invalid length ID address in storage");
    4950:	2145      	movs	r1, #69	; 0x45
    4952:	480b      	ldr	r0, [pc, #44]	; (4980 <set+0x84>)
    4954:	f00d fbd8 	bl	12108 <printk>
			(void)memset(bt_dev.id_addr, 0,
    4958:	2207      	movs	r2, #7
    495a:	4621      	mov	r1, r4
    495c:	4628      	mov	r0, r5
    495e:	f00e ff13 	bl	13788 <memset>
			bt_dev.id_count = 0U;
    4962:	71ec      	strb	r4, [r5, #7]
    4964:	e7ea      	b.n	493c <set+0x40>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
    4966:	2307      	movs	r3, #7
    4968:	fbb0 f0f3 	udiv	r0, r0, r3
    496c:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
    496e:	e7e5      	b.n	493c <set+0x40>
    4970:	00019127 	.word	0x00019127
    4974:	000178fc 	.word	0x000178fc
    4978:	20000098 	.word	0x20000098
    497c:	0001914d 	.word	0x0001914d
    4980:	00019176 	.word	0x00019176

00004984 <bt_settings_encode_key>:
{
    4984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4988:	b088      	sub	sp, #32
    498a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    498e:	799c      	ldrb	r4, [r3, #6]
    4990:	795d      	ldrb	r5, [r3, #5]
    4992:	791e      	ldrb	r6, [r3, #4]
    4994:	78df      	ldrb	r7, [r3, #3]
    4996:	f893 c002 	ldrb.w	ip, [r3, #2]
    499a:	f893 e001 	ldrb.w	lr, [r3, #1]
    499e:	781b      	ldrb	r3, [r3, #0]
	if (key) {
    49a0:	f1b8 0f00 	cmp.w	r8, #0
    49a4:	d00e      	beq.n	49c4 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
    49a6:	e9cd 3806 	strd	r3, r8, [sp, #24]
    49aa:	e9cd ce04 	strd	ip, lr, [sp, #16]
    49ae:	4613      	mov	r3, r2
    49b0:	e9cd 6702 	strd	r6, r7, [sp, #8]
    49b4:	e9cd 4500 	strd	r4, r5, [sp]
    49b8:	4a08      	ldr	r2, [pc, #32]	; (49dc <bt_settings_encode_key+0x58>)
    49ba:	f00d fbb2 	bl	12122 <snprintk>
}
    49be:	b008      	add	sp, #32
    49c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
    49c4:	e9cd e305 	strd	lr, r3, [sp, #20]
    49c8:	e9cd 7c03 	strd	r7, ip, [sp, #12]
    49cc:	4613      	mov	r3, r2
    49ce:	e9cd 5601 	strd	r5, r6, [sp, #4]
    49d2:	4a03      	ldr	r2, [pc, #12]	; (49e0 <bt_settings_encode_key+0x5c>)
    49d4:	9400      	str	r4, [sp, #0]
    49d6:	f00d fba4 	bl	12122 <snprintk>
}
    49da:	e7f0      	b.n	49be <bt_settings_encode_key+0x3a>
    49dc:	000191a0 	.word	0x000191a0
    49e0:	000191c4 	.word	0x000191c4

000049e4 <bt_settings_save_id>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    49e4:	4907      	ldr	r1, [pc, #28]	; (4a04 <bt_settings_save_id+0x20>)
    49e6:	e8d1 3fef 	ldaex	r3, [r1]
    49ea:	f043 0201 	orr.w	r2, r3, #1
    49ee:	e8c1 2fe0 	stlex	r0, r2, [r1]
    49f2:	2800      	cmp	r0, #0
    49f4:	d1f7      	bne.n	49e6 <bt_settings_save_id+0x2>
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    49f6:	07db      	lsls	r3, r3, #31
    49f8:	d403      	bmi.n	4a02 <bt_settings_save_id+0x1e>
		k_queue_append(&work_q->queue, work);
    49fa:	4803      	ldr	r0, [pc, #12]	; (4a08 <bt_settings_save_id+0x24>)
    49fc:	3908      	subs	r1, #8
    49fe:	f011 bec4 	b.w	1678a <k_queue_append>
K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
}
    4a02:	4770      	bx	lr
    4a04:	200001f4 	.word	0x200001f4
    4a08:	20001dcc 	.word	0x20001dcc

00004a0c <commit>:

static int commit(void)
{
    4a0c:	b538      	push	{r3, r4, r5, lr}
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
    4a0e:	4c13      	ldr	r4, [pc, #76]	; (4a5c <commit+0x50>)
    4a10:	79e3      	ldrb	r3, [r4, #7]
    4a12:	b96b      	cbnz	r3, 4a30 <commit+0x24>
		bt_setup_public_id_addr();
    4a14:	f001 fe2a 	bl	666c <bt_setup_public_id_addr>
	}

	if (!bt_dev.id_count) {
    4a18:	79e3      	ldrb	r3, [r4, #7]
    4a1a:	b94b      	cbnz	r3, 4a30 <commit+0x24>
		int err;

		err = bt_setup_random_id_addr();
    4a1c:	f001 feb2 	bl	6784 <bt_setup_random_id_addr>
		if (err) {
    4a20:	4604      	mov	r4, r0
    4a22:	b128      	cbz	r0, 4a30 <commit+0x24>
			BT_ERR("Unable to setup an identity address");
    4a24:	2145      	movs	r1, #69	; 0x45
    4a26:	480e      	ldr	r0, [pc, #56]	; (4a60 <commit+0x54>)
    4a28:	f00d fb6e 	bl	12108 <printk>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
    4a2c:	4620      	mov	r0, r4
    4a2e:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4a30:	4d0c      	ldr	r5, [pc, #48]	; (4a64 <commit+0x58>)
    4a32:	e8d5 3faf 	lda	r3, [r5]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    4a36:	079b      	lsls	r3, r3, #30
    4a38:	d401      	bmi.n	4a3e <commit+0x32>
		bt_finalize_init();
    4a3a:	f001 fd37 	bl	64ac <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4a3e:	e8d5 4fef 	ldaex	r4, [r5]
    4a42:	f424 4300 	bic.w	r3, r4, #32768	; 0x8000
    4a46:	e8c5 3fe2 	stlex	r2, r3, [r5]
    4a4a:	2a00      	cmp	r2, #0
    4a4c:	d1f7      	bne.n	4a3e <commit+0x32>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
    4a4e:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
    4a52:	d0eb      	beq.n	4a2c <commit+0x20>
		bt_settings_save_id();
    4a54:	f7ff ffc6 	bl	49e4 <bt_settings_save_id>
	return 0;
    4a58:	2400      	movs	r4, #0
    4a5a:	e7e7      	b.n	4a2c <commit+0x20>
    4a5c:	20000000 	.word	0x20000000
    4a60:	000191e5 	.word	0x000191e5
    4a64:	20000098 	.word	0x20000098

00004a68 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
    4a68:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
    4a6a:	f7fd fa9d 	bl	1fa8 <settings_subsys_init>
	if (err) {
    4a6e:	4604      	mov	r4, r0
    4a70:	b120      	cbz	r0, 4a7c <bt_settings_init+0x14>
		BT_ERR("settings_subsys_init failed (err %d)", err);
    4a72:	4602      	mov	r2, r0
    4a74:	2145      	movs	r1, #69	; 0x45
    4a76:	4802      	ldr	r0, [pc, #8]	; (4a80 <bt_settings_init+0x18>)
    4a78:	f00d fb46 	bl	12108 <printk>
		return err;
	}

	return 0;
}
    4a7c:	4620      	mov	r0, r4
    4a7e:	bd10      	pop	{r4, pc}
    4a80:	0001920e 	.word	0x0001920e

00004a84 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    4a84:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    4a86:	7802      	ldrb	r2, [r0, #0]
{
    4a88:	4604      	mov	r4, r0
	switch (src->type) {
    4a8a:	2a01      	cmp	r2, #1
{
    4a8c:	460b      	mov	r3, r1
	switch (src->type) {
    4a8e:	d016      	beq.n	4abe <uuid_to_uuid128+0x3a>
    4a90:	2a02      	cmp	r2, #2
    4a92:	d02c      	beq.n	4aee <uuid_to_uuid128+0x6a>
    4a94:	b98a      	cbnz	r2, 4aba <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    4a96:	460d      	mov	r5, r1
    4a98:	4a18      	ldr	r2, [pc, #96]	; (4afc <uuid_to_uuid128+0x78>)
    4a9a:	f102 0710 	add.w	r7, r2, #16
    4a9e:	462e      	mov	r6, r5
    4aa0:	6810      	ldr	r0, [r2, #0]
    4aa2:	6851      	ldr	r1, [r2, #4]
    4aa4:	3208      	adds	r2, #8
    4aa6:	c603      	stmia	r6!, {r0, r1}
    4aa8:	42ba      	cmp	r2, r7
    4aaa:	4635      	mov	r5, r6
    4aac:	d1f7      	bne.n	4a9e <uuid_to_uuid128+0x1a>
    4aae:	7812      	ldrb	r2, [r2, #0]
    4ab0:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    4ab2:	8862      	ldrh	r2, [r4, #2]
	dst[0] = val;
    4ab4:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    4ab6:	0a12      	lsrs	r2, r2, #8
    4ab8:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    4aba:	bcf0      	pop	{r4, r5, r6, r7}
    4abc:	4770      	bx	lr
		*dst = uuid128_base;
    4abe:	460d      	mov	r5, r1
    4ac0:	4a0e      	ldr	r2, [pc, #56]	; (4afc <uuid_to_uuid128+0x78>)
    4ac2:	f102 0710 	add.w	r7, r2, #16
    4ac6:	462e      	mov	r6, r5
    4ac8:	6810      	ldr	r0, [r2, #0]
    4aca:	6851      	ldr	r1, [r2, #4]
    4acc:	3208      	adds	r2, #8
    4ace:	c603      	stmia	r6!, {r0, r1}
    4ad0:	42ba      	cmp	r2, r7
    4ad2:	4635      	mov	r5, r6
    4ad4:	d1f7      	bne.n	4ac6 <uuid_to_uuid128+0x42>
    4ad6:	7812      	ldrb	r2, [r2, #0]
    4ad8:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    4ada:	6862      	ldr	r2, [r4, #4]
    4adc:	f3c2 2107 	ubfx	r1, r2, #8, #8
	dst[0] = val;
    4ae0:	735a      	strb	r2, [r3, #13]
	sys_put_le16(val >> 16, &dst[2]);
    4ae2:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    4ae4:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    4ae6:	0a12      	lsrs	r2, r2, #8
    4ae8:	7399      	strb	r1, [r3, #14]
    4aea:	741a      	strb	r2, [r3, #16]
}
    4aec:	e7e5      	b.n	4aba <uuid_to_uuid128+0x36>
		memcpy(dst, src, sizeof(*dst));
    4aee:	4601      	mov	r1, r0
}
    4af0:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    4af2:	2211      	movs	r2, #17
    4af4:	4618      	mov	r0, r3
    4af6:	f00e be1c 	b.w	13732 <memcpy>
    4afa:	bf00      	nop
    4afc:	00019247 	.word	0x00019247

00004b00 <le_dhkey_complete>:
{
    4b00:	b510      	push	{r4, lr}
	if (dh_key_cb) {
    4b02:	4c06      	ldr	r4, [pc, #24]	; (4b1c <le_dhkey_complete+0x1c>)
    4b04:	6822      	ldr	r2, [r4, #0]
    4b06:	b132      	cbz	r2, 4b16 <le_dhkey_complete+0x16>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    4b08:	6880      	ldr	r0, [r0, #8]
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    4b0a:	7803      	ldrb	r3, [r0, #0]
    4b0c:	b923      	cbnz	r3, 4b18 <le_dhkey_complete+0x18>
    4b0e:	3001      	adds	r0, #1
    4b10:	4790      	blx	r2
		dh_key_cb = NULL;
    4b12:	2300      	movs	r3, #0
    4b14:	6023      	str	r3, [r4, #0]
}
    4b16:	bd10      	pop	{r4, pc}
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    4b18:	2000      	movs	r0, #0
    4b1a:	e7f9      	b.n	4b10 <le_dhkey_complete+0x10>
    4b1c:	20000c24 	.word	0x20000c24

00004b20 <hci_data_buf_overflow>:
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    4b20:	6883      	ldr	r3, [r0, #8]
    4b22:	2157      	movs	r1, #87	; 0x57
    4b24:	781a      	ldrb	r2, [r3, #0]
    4b26:	4801      	ldr	r0, [pc, #4]	; (4b2c <hci_data_buf_overflow+0xc>)
    4b28:	f00d baee 	b.w	12108 <printk>
    4b2c:	00019258 	.word	0x00019258

00004b30 <le_pkey_complete>:
{
    4b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    4b32:	6886      	ldr	r6, [r0, #8]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4b34:	f06f 0110 	mvn.w	r1, #16
    4b38:	480e      	ldr	r0, [pc, #56]	; (4b74 <le_pkey_complete+0x44>)
    4b3a:	f00e ff03 	bl	13944 <atomic_and>
	if (!evt->status) {
    4b3e:	7833      	ldrb	r3, [r6, #0]
    4b40:	b943      	cbnz	r3, 4b54 <le_pkey_complete+0x24>
		memcpy(pub_key, evt->key, 64);
    4b42:	1c71      	adds	r1, r6, #1
    4b44:	2240      	movs	r2, #64	; 0x40
    4b46:	480c      	ldr	r0, [pc, #48]	; (4b78 <le_pkey_complete+0x48>)
    4b48:	f00e fdf3 	bl	13732 <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    4b4c:	2108      	movs	r1, #8
    4b4e:	4809      	ldr	r0, [pc, #36]	; (4b74 <le_pkey_complete+0x44>)
    4b50:	f00e fee2 	bl	13918 <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    4b54:	4d09      	ldr	r5, [pc, #36]	; (4b7c <le_pkey_complete+0x4c>)
		cb->func(evt->status ? NULL : pub_key);
    4b56:	4f08      	ldr	r7, [pc, #32]	; (4b78 <le_pkey_complete+0x48>)
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    4b58:	682c      	ldr	r4, [r5, #0]
    4b5a:	b90c      	cbnz	r4, 4b60 <le_pkey_complete+0x30>
	pub_key_cb = NULL;
    4b5c:	602c      	str	r4, [r5, #0]
}
    4b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->func(evt->status ? NULL : pub_key);
    4b60:	7832      	ldrb	r2, [r6, #0]
    4b62:	6823      	ldr	r3, [r4, #0]
    4b64:	2a00      	cmp	r2, #0
    4b66:	bf0c      	ite	eq
    4b68:	4638      	moveq	r0, r7
    4b6a:	2000      	movne	r0, #0
    4b6c:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    4b6e:	6864      	ldr	r4, [r4, #4]
    4b70:	e7f3      	b.n	4b5a <le_pkey_complete+0x2a>
    4b72:	bf00      	nop
    4b74:	20000098 	.word	0x20000098
    4b78:	20001f28 	.word	0x20001f28
    4b7c:	20000c28 	.word	0x20000c28

00004b80 <le_data_len_change>:
	u16_t handle = sys_le16_to_cpu(evt->handle);
    4b80:	6883      	ldr	r3, [r0, #8]
{
    4b82:	b510      	push	{r4, lr}
	u16_t handle = sys_le16_to_cpu(evt->handle);
    4b84:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    4b86:	4620      	mov	r0, r4
    4b88:	f002 fc48 	bl	741c <bt_conn_lookup_handle>
	if (!conn) {
    4b8c:	b930      	cbnz	r0, 4b9c <le_data_len_change+0x1c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    4b8e:	4622      	mov	r2, r4
}
    4b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    4b94:	2145      	movs	r1, #69	; 0x45
    4b96:	4803      	ldr	r0, [pc, #12]	; (4ba4 <le_data_len_change+0x24>)
    4b98:	f00d bab6 	b.w	12108 <printk>
}
    4b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    4ba0:	f00f b968 	b.w	13e74 <bt_conn_unref>
    4ba4:	00019285 	.word	0x00019285

00004ba8 <hci_vendor_event>:
		BT_WARN("Unhandled vendor-specific event: %s",
    4ba8:	8981      	ldrh	r1, [r0, #12]
{
    4baa:	b508      	push	{r3, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    4bac:	6880      	ldr	r0, [r0, #8]
    4bae:	f7ff fe27 	bl	4800 <bt_hex_real>
}
    4bb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    4bb6:	4602      	mov	r2, r0
    4bb8:	2157      	movs	r1, #87	; 0x57
    4bba:	4801      	ldr	r0, [pc, #4]	; (4bc0 <hci_vendor_event+0x18>)
    4bbc:	f00d baa4 	b.w	12108 <printk>
    4bc0:	000192ae 	.word	0x000192ae

00004bc4 <le_conn_update_complete>:
{
    4bc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    4bc6:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    4bc8:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    4bcc:	4630      	mov	r0, r6
    4bce:	f002 fc25 	bl	741c <bt_conn_lookup_handle>
	if (!conn) {
    4bd2:	4604      	mov	r4, r0
    4bd4:	b930      	cbnz	r0, 4be4 <le_conn_update_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    4bd6:	4632      	mov	r2, r6
    4bd8:	2145      	movs	r1, #69	; 0x45
    4bda:	481a      	ldr	r0, [pc, #104]	; (4c44 <le_conn_update_complete+0x80>)
    4bdc:	f00d fa94 	bl	12108 <printk>
}
    4be0:	b002      	add	sp, #8
    4be2:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
    4be4:	782b      	ldrb	r3, [r5, #0]
    4be6:	b9bb      	cbnz	r3, 4c18 <le_conn_update_complete+0x54>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    4be8:	792a      	ldrb	r2, [r5, #4]
    4bea:	78eb      	ldrb	r3, [r5, #3]
    4bec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4bf0:	f8a0 3092 	strh.w	r3, [r0, #146]	; 0x92
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    4bf4:	79aa      	ldrb	r2, [r5, #6]
    4bf6:	796b      	ldrb	r3, [r5, #5]
    4bf8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4bfc:	f8a0 3098 	strh.w	r3, [r0, #152]	; 0x98
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    4c00:	79eb      	ldrb	r3, [r5, #7]
    4c02:	7a2a      	ldrb	r2, [r5, #8]
    4c04:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4c08:	f8a0 309a 	strh.w	r3, [r0, #154]	; 0x9a
		notify_le_param_updated(conn);
    4c0c:	f002 f95a 	bl	6ec4 <notify_le_param_updated>
	bt_conn_unref(conn);
    4c10:	4620      	mov	r0, r4
    4c12:	f00f f92f 	bl	13e74 <bt_conn_unref>
    4c16:	e7e3      	b.n	4be0 <le_conn_update_complete+0x1c>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    4c18:	2b1a      	cmp	r3, #26
    4c1a:	d1f9      	bne.n	4c10 <le_conn_update_complete+0x4c>
    4c1c:	78c3      	ldrb	r3, [r0, #3]
    4c1e:	2b01      	cmp	r3, #1
    4c20:	d1f6      	bne.n	4c10 <le_conn_update_complete+0x4c>
		   !atomic_test_and_set_bit(conn->flags,
    4c22:	210a      	movs	r1, #10
    4c24:	3004      	adds	r0, #4
    4c26:	f00e fe82 	bl	1392e <atomic_test_and_set_bit>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    4c2a:	2800      	cmp	r0, #0
    4c2c:	d1f0      	bne.n	4c10 <le_conn_update_complete+0x4c>
		param.interval_min = conn->le.interval_min;
    4c2e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
		bt_l2cap_update_conn_param(conn, &param);
    4c32:	4669      	mov	r1, sp
		param.interval_min = conn->le.interval_min;
    4c34:	9300      	str	r3, [sp, #0]
		param.latency = conn->le.pending_latency;
    4c36:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
		bt_l2cap_update_conn_param(conn, &param);
    4c3a:	4620      	mov	r0, r4
		param.latency = conn->le.pending_latency;
    4c3c:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
    4c3e:	f00f fb6f 	bl	14320 <bt_l2cap_update_conn_param>
    4c42:	e7e5      	b.n	4c10 <le_conn_update_complete+0x4c>
    4c44:	00019285 	.word	0x00019285

00004c48 <update_sec_level>:
{
    4c48:	b510      	push	{r4, lr}
	if (!conn->encrypt) {
    4c4a:	7ac3      	ldrb	r3, [r0, #11]
{
    4c4c:	4604      	mov	r4, r0
	if (!conn->encrypt) {
    4c4e:	b913      	cbnz	r3, 4c56 <update_sec_level+0xe>
		conn->sec_level = BT_SECURITY_L1;
    4c50:	2301      	movs	r3, #1
    4c52:	7243      	strb	r3, [r0, #9]
}
    4c54:	bd10      	pop	{r4, pc}
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
    4c56:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
    4c5a:	b1cb      	cbz	r3, 4c90 <update_sec_level+0x48>
    4c5c:	7b5a      	ldrb	r2, [r3, #13]
    4c5e:	07d1      	lsls	r1, r2, #31
    4c60:	d516      	bpl.n	4c90 <update_sec_level+0x48>
		if (conn->le.keys->flags & BT_KEYS_SC &&
    4c62:	06d2      	lsls	r2, r2, #27
    4c64:	d512      	bpl.n	4c8c <update_sec_level+0x44>
    4c66:	7b1b      	ldrb	r3, [r3, #12]
    4c68:	2b10      	cmp	r3, #16
    4c6a:	d10f      	bne.n	4c8c <update_sec_level+0x44>
			conn->sec_level = BT_SECURITY_L4;
    4c6c:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
    4c6e:	7263      	strb	r3, [r4, #9]
	if (conn->required_sec_level > conn->sec_level) {
    4c70:	7aa2      	ldrb	r2, [r4, #10]
    4c72:	7a63      	ldrb	r3, [r4, #9]
    4c74:	429a      	cmp	r2, r3
    4c76:	d9ed      	bls.n	4c54 <update_sec_level+0xc>
		BT_ERR("Failed to set required security level");
    4c78:	2145      	movs	r1, #69	; 0x45
    4c7a:	4806      	ldr	r0, [pc, #24]	; (4c94 <update_sec_level+0x4c>)
    4c7c:	f00d fa44 	bl	12108 <printk>
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTH_FAIL);
    4c80:	4620      	mov	r0, r4
}
    4c82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTH_FAIL);
    4c86:	2105      	movs	r1, #5
    4c88:	f002 bd88 	b.w	779c <bt_conn_disconnect>
			conn->sec_level = BT_SECURITY_L3;
    4c8c:	2303      	movs	r3, #3
    4c8e:	e7ee      	b.n	4c6e <update_sec_level+0x26>
		conn->sec_level = BT_SECURITY_L2;
    4c90:	2302      	movs	r3, #2
    4c92:	e7ec      	b.n	4c6e <update_sec_level+0x26>
    4c94:	000192d7 	.word	0x000192d7

00004c98 <hci_encrypt_key_refresh_complete>:
{
    4c98:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    4c9a:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    4c9c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    4ca0:	4630      	mov	r0, r6
    4ca2:	f002 fbbb 	bl	741c <bt_conn_lookup_handle>
	if (!conn) {
    4ca6:	4604      	mov	r4, r0
    4ca8:	b930      	cbnz	r0, 4cb8 <hci_encrypt_key_refresh_complete+0x20>
		BT_ERR("Unable to look up conn with handle %u", handle);
    4caa:	4632      	mov	r2, r6
}
    4cac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    4cb0:	2145      	movs	r1, #69	; 0x45
    4cb2:	4813      	ldr	r0, [pc, #76]	; (4d00 <hci_encrypt_key_refresh_complete+0x68>)
    4cb4:	f00d ba28 	b.w	12108 <printk>
	if (evt->status) {
    4cb8:	7829      	ldrb	r1, [r5, #0]
    4cba:	b189      	cbz	r1, 4ce0 <hci_encrypt_key_refresh_complete+0x48>
	conn->required_sec_level = conn->sec_level;
    4cbc:	7a43      	ldrb	r3, [r0, #9]
    4cbe:	7283      	strb	r3, [r0, #10]
		bt_l2cap_encrypt_change(conn, evt->status);
    4cc0:	f00f faea 	bl	14298 <bt_l2cap_encrypt_change>
		bt_conn_security_changed(conn, security_err_get(evt->status));
    4cc4:	782b      	ldrb	r3, [r5, #0]
	switch (hci_err) {
    4cc6:	2b29      	cmp	r3, #41	; 0x29
		bt_conn_security_changed(conn, security_err_get(evt->status));
    4cc8:	bf8e      	itee	hi
    4cca:	2108      	movhi	r1, #8
    4ccc:	4a0d      	ldrls	r2, [pc, #52]	; (4d04 <hci_encrypt_key_refresh_complete+0x6c>)
    4cce:	5cd1      	ldrbls	r1, [r2, r3]
	bt_conn_security_changed(conn, BT_SECURITY_ERR_SUCCESS);
    4cd0:	4620      	mov	r0, r4
    4cd2:	f002 f961 	bl	6f98 <bt_conn_security_changed>
	bt_conn_unref(conn);
    4cd6:	4620      	mov	r0, r4
}
    4cd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    4cdc:	f00f b8ca 	b.w	13e74 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    4ce0:	7883      	ldrb	r3, [r0, #2]
    4ce2:	2b01      	cmp	r3, #1
    4ce4:	d104      	bne.n	4cf0 <hci_encrypt_key_refresh_complete+0x58>
		bt_smp_update_keys(conn);
    4ce6:	f008 f865 	bl	cdb4 <bt_smp_update_keys>
		update_sec_level(conn);
    4cea:	4620      	mov	r0, r4
    4cec:	f7ff ffac 	bl	4c48 <update_sec_level>
	conn->required_sec_level = conn->sec_level;
    4cf0:	7a63      	ldrb	r3, [r4, #9]
	bt_l2cap_encrypt_change(conn, evt->status);
    4cf2:	4620      	mov	r0, r4
	conn->required_sec_level = conn->sec_level;
    4cf4:	72a3      	strb	r3, [r4, #10]
	bt_l2cap_encrypt_change(conn, evt->status);
    4cf6:	7829      	ldrb	r1, [r5, #0]
    4cf8:	f00f face 	bl	14298 <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn, BT_SECURITY_ERR_SUCCESS);
    4cfc:	2100      	movs	r1, #0
    4cfe:	e7e7      	b.n	4cd0 <hci_encrypt_key_refresh_complete+0x38>
    4d00:	00019302 	.word	0x00019302
    4d04:	00019bf3 	.word	0x00019bf3

00004d08 <hci_encrypt_change>:
{
    4d08:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    4d0a:	6885      	ldr	r5, [r0, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    4d0c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    4d10:	4630      	mov	r0, r6
    4d12:	f002 fb83 	bl	741c <bt_conn_lookup_handle>
	if (!conn) {
    4d16:	4604      	mov	r4, r0
    4d18:	b930      	cbnz	r0, 4d28 <hci_encrypt_change+0x20>
		BT_ERR("Unable to look up conn with handle %u", handle);
    4d1a:	4632      	mov	r2, r6
}
    4d1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    4d20:	2145      	movs	r1, #69	; 0x45
    4d22:	4815      	ldr	r0, [pc, #84]	; (4d78 <hci_encrypt_change+0x70>)
    4d24:	f00d b9f0 	b.w	12108 <printk>
	if (evt->status) {
    4d28:	7829      	ldrb	r1, [r5, #0]
    4d2a:	b189      	cbz	r1, 4d50 <hci_encrypt_change+0x48>
	conn->required_sec_level = conn->sec_level;
    4d2c:	7a43      	ldrb	r3, [r0, #9]
    4d2e:	7283      	strb	r3, [r0, #10]
		bt_l2cap_encrypt_change(conn, evt->status);
    4d30:	f00f fab2 	bl	14298 <bt_l2cap_encrypt_change>
		bt_conn_security_changed(conn, security_err_get(evt->status));
    4d34:	782b      	ldrb	r3, [r5, #0]
	switch (hci_err) {
    4d36:	2b29      	cmp	r3, #41	; 0x29
		bt_conn_security_changed(conn, security_err_get(evt->status));
    4d38:	bf8e      	itee	hi
    4d3a:	2108      	movhi	r1, #8
    4d3c:	4a0f      	ldrls	r2, [pc, #60]	; (4d7c <hci_encrypt_change+0x74>)
    4d3e:	5cd1      	ldrbls	r1, [r2, r3]
	bt_conn_security_changed(conn, BT_SECURITY_ERR_SUCCESS);
    4d40:	4620      	mov	r0, r4
    4d42:	f002 f929 	bl	6f98 <bt_conn_security_changed>
	bt_conn_unref(conn);
    4d46:	4620      	mov	r0, r4
}
    4d48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    4d4c:	f00f b892 	b.w	13e74 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    4d50:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
    4d52:	78eb      	ldrb	r3, [r5, #3]
	if (conn->type == BT_CONN_TYPE_LE) {
    4d54:	2a01      	cmp	r2, #1
	conn->encrypt = evt->encrypt;
    4d56:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
    4d58:	d105      	bne.n	4d66 <hci_encrypt_change+0x5e>
		if (conn->encrypt) {
    4d5a:	b10b      	cbz	r3, 4d60 <hci_encrypt_change+0x58>
			bt_smp_update_keys(conn);
    4d5c:	f008 f82a 	bl	cdb4 <bt_smp_update_keys>
		update_sec_level(conn);
    4d60:	4620      	mov	r0, r4
    4d62:	f7ff ff71 	bl	4c48 <update_sec_level>
	conn->required_sec_level = conn->sec_level;
    4d66:	7a63      	ldrb	r3, [r4, #9]
	bt_l2cap_encrypt_change(conn, evt->status);
    4d68:	4620      	mov	r0, r4
	conn->required_sec_level = conn->sec_level;
    4d6a:	72a3      	strb	r3, [r4, #10]
	bt_l2cap_encrypt_change(conn, evt->status);
    4d6c:	7829      	ldrb	r1, [r5, #0]
    4d6e:	f00f fa93 	bl	14298 <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn, BT_SECURITY_ERR_SUCCESS);
    4d72:	2100      	movs	r1, #0
    4d74:	e7e4      	b.n	4d40 <hci_encrypt_change+0x38>
    4d76:	bf00      	nop
    4d78:	00019302 	.word	0x00019302
    4d7c:	00019bf3 	.word	0x00019bf3

00004d80 <hci_cmd_done>:
{
    4d80:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4d84:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    4d86:	7990      	ldrb	r0, [r2, #6]
{
    4d88:	460f      	mov	r7, r1
    4d8a:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    4d8c:	f008 fa0e 	bl	d1ac <net_buf_pool_get>
    4d90:	4d2a      	ldr	r5, [pc, #168]	; (4e3c <hci_cmd_done+0xbc>)
    4d92:	4285      	cmp	r5, r0
    4d94:	d00e      	beq.n	4db4 <hci_cmd_done+0x34>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    4d96:	79a4      	ldrb	r4, [r4, #6]
    4d98:	4620      	mov	r0, r4
    4d9a:	f008 fa07 	bl	d1ac <net_buf_pool_get>
    4d9e:	4623      	mov	r3, r4
    4da0:	e9cd 0500 	strd	r0, r5, [sp]
    4da4:	4632      	mov	r2, r6
    4da6:	2157      	movs	r1, #87	; 0x57
    4da8:	4825      	ldr	r0, [pc, #148]	; (4e40 <hci_cmd_done+0xc0>)
    4daa:	f00d f9ad 	bl	12108 <printk>
}
    4dae:	b002      	add	sp, #8
    4db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
    4db4:	4620      	mov	r0, r4
    4db6:	f008 fa01 	bl	d1bc <net_buf_id>
    4dba:	f04f 080c 	mov.w	r8, #12
    4dbe:	4d21      	ldr	r5, [pc, #132]	; (4e44 <hci_cmd_done+0xc4>)
    4dc0:	fb08 5300 	mla	r3, r8, r0, r5
    4dc4:	885b      	ldrh	r3, [r3, #2]
    4dc6:	42b3      	cmp	r3, r6
    4dc8:	d00a      	beq.n	4de0 <hci_cmd_done+0x60>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    4dca:	4620      	mov	r0, r4
    4dcc:	f008 f9f6 	bl	d1bc <net_buf_id>
    4dd0:	fb08 5000 	mla	r0, r8, r0, r5
    4dd4:	4632      	mov	r2, r6
    4dd6:	8843      	ldrh	r3, [r0, #2]
    4dd8:	2157      	movs	r1, #87	; 0x57
    4dda:	481b      	ldr	r0, [pc, #108]	; (4e48 <hci_cmd_done+0xc8>)
    4ddc:	f00d f994 	bl	12108 <printk>
	if (cmd(buf)->state && !status) {
    4de0:	4620      	mov	r0, r4
    4de2:	f008 f9eb 	bl	d1bc <net_buf_id>
    4de6:	260c      	movs	r6, #12
    4de8:	fb06 5000 	mla	r0, r6, r0, r5
    4dec:	6843      	ldr	r3, [r0, #4]
    4dee:	b15b      	cbz	r3, 4e08 <hci_cmd_done+0x88>
    4df0:	b957      	cbnz	r7, 4e08 <hci_cmd_done+0x88>
		struct cmd_state_set *update = cmd(buf)->state;
    4df2:	4620      	mov	r0, r4
    4df4:	f008 f9e2 	bl	d1bc <net_buf_id>
    4df8:	fb06 5000 	mla	r0, r6, r0, r5
    4dfc:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    4dfe:	7a1a      	ldrb	r2, [r3, #8]
    4e00:	e9d3 0100 	ldrd	r0, r1, [r3]
    4e04:	f00e fda9 	bl	1395a <atomic_set_bit_to>
	if (cmd(buf)->sync) {
    4e08:	4620      	mov	r0, r4
    4e0a:	f008 f9d7 	bl	d1bc <net_buf_id>
    4e0e:	260c      	movs	r6, #12
    4e10:	fb06 5000 	mla	r0, r6, r0, r5
    4e14:	6883      	ldr	r3, [r0, #8]
    4e16:	2b00      	cmp	r3, #0
    4e18:	d0c9      	beq.n	4dae <hci_cmd_done+0x2e>
		cmd(buf)->status = status;
    4e1a:	4620      	mov	r0, r4
    4e1c:	f008 f9ce 	bl	d1bc <net_buf_id>
    4e20:	4370      	muls	r0, r6
    4e22:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    4e24:	4620      	mov	r0, r4
    4e26:	f008 f9c9 	bl	d1bc <net_buf_id>
    4e2a:	fb06 5500 	mla	r5, r6, r0, r5
    4e2e:	68a8      	ldr	r0, [r5, #8]
}
    4e30:	b002      	add	sp, #8
    4e32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_impl_k_sem_give(sem);
    4e36:	f00b bee3 	b.w	10c00 <z_impl_k_sem_give>
    4e3a:	bf00      	nop
    4e3c:	200005dc 	.word	0x200005dc
    4e40:	0001932d 	.word	0x0001932d
    4e44:	20000c0c 	.word	0x20000c0c
    4e48:	00019367 	.word	0x00019367

00004e4c <handle_event>:
{
    4e4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4e4e:	4605      	mov	r5, r0
    4e50:	4614      	mov	r4, r2
    4e52:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
    4e54:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		if (handler->event != event) {
    4e58:	7822      	ldrb	r2, [r4, #0]
    4e5a:	42aa      	cmp	r2, r5
    4e5c:	d010      	beq.n	4e80 <handle_event+0x34>
	for (i = 0; i < num_handlers; i++) {
    4e5e:	3408      	adds	r4, #8
    4e60:	429c      	cmp	r4, r3
    4e62:	d1f9      	bne.n	4e58 <handle_event+0xc>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    4e64:	8984      	ldrh	r4, [r0, #12]
    4e66:	6880      	ldr	r0, [r0, #8]
    4e68:	4621      	mov	r1, r4
    4e6a:	f7ff fcc9 	bl	4800 <bt_hex_real>
    4e6e:	4623      	mov	r3, r4
    4e70:	9000      	str	r0, [sp, #0]
    4e72:	462a      	mov	r2, r5
    4e74:	2157      	movs	r1, #87	; 0x57
    4e76:	480b      	ldr	r0, [pc, #44]	; (4ea4 <handle_event+0x58>)
    4e78:	f00d f946 	bl	12108 <printk>
}
    4e7c:	b003      	add	sp, #12
    4e7e:	bd30      	pop	{r4, r5, pc}
		if (buf->len < handler->min_len) {
    4e80:	8982      	ldrh	r2, [r0, #12]
    4e82:	7863      	ldrb	r3, [r4, #1]
    4e84:	4293      	cmp	r3, r2
    4e86:	d907      	bls.n	4e98 <handle_event+0x4c>
			BT_ERR("Too small (%u bytes) event 0x%02x",
    4e88:	462b      	mov	r3, r5
    4e8a:	2145      	movs	r1, #69	; 0x45
    4e8c:	4806      	ldr	r0, [pc, #24]	; (4ea8 <handle_event+0x5c>)
}
    4e8e:	b003      	add	sp, #12
    4e90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    4e94:	f00d b938 	b.w	12108 <printk>
		handler->handler(buf);
    4e98:	6863      	ldr	r3, [r4, #4]
}
    4e9a:	b003      	add	sp, #12
    4e9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		handler->handler(buf);
    4ea0:	4718      	bx	r3
    4ea2:	bf00      	nop
    4ea4:	000193c6 	.word	0x000193c6
    4ea8:	0001939f 	.word	0x0001939f

00004eac <hci_le_meta_event>:
{
    4eac:	b510      	push	{r4, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    4eae:	2101      	movs	r1, #1
{
    4eb0:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    4eb2:	3008      	adds	r0, #8
    4eb4:	f008 fc6a 	bl	d78c <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    4eb8:	4621      	mov	r1, r4
}
    4eba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    4ebe:	230b      	movs	r3, #11
    4ec0:	4a01      	ldr	r2, [pc, #4]	; (4ec8 <hci_le_meta_event+0x1c>)
    4ec2:	7800      	ldrb	r0, [r0, #0]
    4ec4:	f7ff bfc2 	b.w	4e4c <handle_event>
    4ec8:	000170f0 	.word	0x000170f0

00004ecc <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    4ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4ece:	4606      	mov	r6, r0
	u8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    4ed0:	2500      	movs	r5, #0
    4ed2:	4f0a      	ldr	r7, [pc, #40]	; (4efc <id_find+0x30>)
    4ed4:	79fb      	ldrb	r3, [r7, #7]
    4ed6:	b2ec      	uxtb	r4, r5
    4ed8:	42a3      	cmp	r3, r4
    4eda:	d802      	bhi.n	4ee2 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    4edc:	f06f 0401 	mvn.w	r4, #1
    4ee0:	e009      	b.n	4ef6 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    4ee2:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    4ee6:	2207      	movs	r2, #7
    4ee8:	4630      	mov	r0, r6
    4eea:	4439      	add	r1, r7
    4eec:	f00e fc11 	bl	13712 <memcmp>
    4ef0:	3501      	adds	r5, #1
    4ef2:	2800      	cmp	r0, #0
    4ef4:	d1ee      	bne.n	4ed4 <id_find+0x8>
}
    4ef6:	4620      	mov	r0, r4
    4ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4efa:	bf00      	nop
    4efc:	20000000 	.word	0x20000000

00004f00 <hci_rx_thread>:
{
    4f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
    4f04:	4e43      	ldr	r6, [pc, #268]	; (5014 <hci_rx_thread+0x114>)
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    4f06:	4f44      	ldr	r7, [pc, #272]	; (5018 <hci_rx_thread+0x118>)
    4f08:	f8df 812c 	ldr.w	r8, [pc, #300]	; 5038 <hci_rx_thread+0x138>
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
    4f0c:	f04f 32ff 	mov.w	r2, #4294967295
    4f10:	f04f 33ff 	mov.w	r3, #4294967295
    4f14:	4630      	mov	r0, r6
    4f16:	f008 fa57 	bl	d3c8 <net_buf_get>
    4f1a:	7d02      	ldrb	r2, [r0, #20]
    4f1c:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
    4f1e:	2a01      	cmp	r2, #1
    4f20:	d042      	beq.n	4fa8 <hci_rx_thread+0xa8>
    4f22:	2a03      	cmp	r2, #3
    4f24:	d172      	bne.n	500c <hci_rx_thread+0x10c>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    4f26:	8983      	ldrh	r3, [r0, #12]
    4f28:	2b03      	cmp	r3, #3
    4f2a:	d80c      	bhi.n	4f46 <hci_rx_thread+0x46>
    4f2c:	f240 5306 	movw	r3, #1286	; 0x506
    4f30:	4a3a      	ldr	r2, [pc, #232]	; (501c <hci_rx_thread+0x11c>)
    4f32:	493b      	ldr	r1, [pc, #236]	; (5020 <hci_rx_thread+0x120>)
    4f34:	483b      	ldr	r0, [pc, #236]	; (5024 <hci_rx_thread+0x124>)
    4f36:	f00d f8e7 	bl	12108 <printk>
    4f3a:	4040      	eors	r0, r0
    4f3c:	f380 8811 	msr	BASEPRI, r0
    4f40:	f04f 0003 	mov.w	r0, #3
    4f44:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    4f46:	2104      	movs	r1, #4
    4f48:	f104 0008 	add.w	r0, r4, #8
    4f4c:	f008 fc1e 	bl	d78c <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    4f50:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    4f52:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    4f54:	f8b0 9000 	ldrh.w	r9, [r0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    4f58:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
    4f5a:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
    4f5c:	f3c9 000b 	ubfx	r0, r9, #0, #12
	if (buf->len != len) {
    4f60:	4293      	cmp	r3, r2
	acl(buf)->handle = bt_acl_handle(handle);
    4f62:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
    4f64:	d007      	beq.n	4f76 <hci_rx_thread+0x76>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    4f66:	2145      	movs	r1, #69	; 0x45
    4f68:	482f      	ldr	r0, [pc, #188]	; (5028 <hci_rx_thread+0x128>)
    4f6a:	f00d f8cd 	bl	12108 <printk>
			net_buf_unref(buf);
    4f6e:	4620      	mov	r0, r4
    4f70:	f008 fabc 	bl	d4ec <net_buf_unref>
			break;
    4f74:	e015      	b.n	4fa2 <hci_rx_thread+0xa2>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    4f76:	f002 fa51 	bl	741c <bt_conn_lookup_handle>
	if (!conn) {
    4f7a:	4605      	mov	r5, r0
    4f7c:	b928      	cbnz	r0, 4f8a <hci_rx_thread+0x8a>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    4f7e:	2145      	movs	r1, #69	; 0x45
    4f80:	8ae2      	ldrh	r2, [r4, #22]
    4f82:	482a      	ldr	r0, [pc, #168]	; (502c <hci_rx_thread+0x12c>)
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    4f84:	f00d f8c0 	bl	12108 <printk>
    4f88:	e7f1      	b.n	4f6e <hci_rx_thread+0x6e>
	acl(buf)->index = bt_conn_index(conn);
    4f8a:	f002 fd47 	bl	7a1c <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    4f8e:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
    4f90:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    4f92:	ea4f 3219 	mov.w	r2, r9, lsr #12
    4f96:	4628      	mov	r0, r5
    4f98:	f002 f818 	bl	6fcc <bt_conn_recv>
	bt_conn_unref(conn);
    4f9c:	4628      	mov	r0, r5
    4f9e:	f00e ff69 	bl	13e74 <bt_conn_unref>
	z_impl_k_yield();
    4fa2:	f00b fca9 	bl	108f8 <z_impl_k_yield>
	while (1) {
    4fa6:	e7b1      	b.n	4f0c <hci_rx_thread+0xc>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    4fa8:	8983      	ldrh	r3, [r0, #12]
    4faa:	2b01      	cmp	r3, #1
    4fac:	d80c      	bhi.n	4fc8 <hci_rx_thread+0xc8>
    4fae:	f241 4372 	movw	r3, #5234	; 0x1472
    4fb2:	4a1a      	ldr	r2, [pc, #104]	; (501c <hci_rx_thread+0x11c>)
    4fb4:	491a      	ldr	r1, [pc, #104]	; (5020 <hci_rx_thread+0x120>)
    4fb6:	481b      	ldr	r0, [pc, #108]	; (5024 <hci_rx_thread+0x124>)
    4fb8:	f00d f8a6 	bl	12108 <printk>
    4fbc:	4040      	eors	r0, r0
    4fbe:	f380 8811 	msr	BASEPRI, r0
    4fc2:	f04f 0003 	mov.w	r0, #3
    4fc6:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    4fc8:	2102      	movs	r1, #2
    4fca:	f104 0008 	add.w	r0, r4, #8
    4fce:	f008 fbdd 	bl	d78c <net_buf_simple_pull_mem>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    4fd2:	7802      	ldrb	r2, [r0, #0]
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    4fd4:	4605      	mov	r5, r0
    4fd6:	2a1a      	cmp	r2, #26
    4fd8:	d811      	bhi.n	4ffe <hci_rx_thread+0xfe>
    4fda:	2301      	movs	r3, #1
    4fdc:	4093      	lsls	r3, r2
    4fde:	ea13 0f08 	tst.w	r3, r8
    4fe2:	d00c      	beq.n	4ffe <hci_rx_thread+0xfe>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    4fe4:	f241 4376 	movw	r3, #5238	; 0x1476
    4fe8:	4a0c      	ldr	r2, [pc, #48]	; (501c <hci_rx_thread+0x11c>)
    4fea:	4911      	ldr	r1, [pc, #68]	; (5030 <hci_rx_thread+0x130>)
    4fec:	480d      	ldr	r0, [pc, #52]	; (5024 <hci_rx_thread+0x124>)
    4fee:	f00d f88b 	bl	12108 <printk>
    4ff2:	4040      	eors	r0, r0
    4ff4:	f380 8811 	msr	BASEPRI, r0
    4ff8:	f04f 0003 	mov.w	r0, #3
    4ffc:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    4ffe:	2305      	movs	r3, #5
    5000:	463a      	mov	r2, r7
    5002:	4621      	mov	r1, r4
    5004:	7828      	ldrb	r0, [r5, #0]
    5006:	f7ff ff21 	bl	4e4c <handle_event>
	net_buf_unref(buf);
    500a:	e7b0      	b.n	4f6e <hci_rx_thread+0x6e>
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    500c:	2145      	movs	r1, #69	; 0x45
    500e:	4809      	ldr	r0, [pc, #36]	; (5034 <hci_rx_thread+0x134>)
    5010:	e7b8      	b.n	4f84 <hci_rx_thread+0x84>
    5012:	bf00      	nop
    5014:	200000ec 	.word	0x200000ec
    5018:	00017198 	.word	0x00017198
    501c:	000193ed 	.word	0x000193ed
    5020:	00019421 	.word	0x00019421
    5024:	00017d82 	.word	0x00017d82
    5028:	0001943a 	.word	0x0001943a
    502c:	00019463 	.word	0x00019463
    5030:	0001948a 	.word	0x0001948a
    5034:	000194a8 	.word	0x000194a8
    5038:	0408c000 	.word	0x0408c000

0000503c <hci_num_completed_packets>:
{
    503c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i = 0; i < evt->num_handles; i++) {
    5040:	2500      	movs	r5, #0
			tx->pending_no_cb = 0U;
    5042:	46a8      	mov	r8, r5
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    5044:	6887      	ldr	r7, [r0, #8]
    5046:	f8df 9104 	ldr.w	r9, [pc, #260]	; 514c <hci_num_completed_packets+0x110>
	for (i = 0; i < evt->num_handles; i++) {
    504a:	783b      	ldrb	r3, [r7, #0]
    504c:	429d      	cmp	r5, r3
    504e:	db01      	blt.n	5054 <hci_num_completed_packets+0x18>
}
    5050:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    5054:	eb07 0385 	add.w	r3, r7, r5, lsl #2
    5058:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    505c:	f8b3 6003 	ldrh.w	r6, [r3, #3]
    5060:	f04f 0320 	mov.w	r3, #32
    5064:	f3ef 8a11 	mrs	sl, BASEPRI
    5068:	f383 8811 	msr	BASEPRI, r3
    506c:	f3bf 8f6f 	isb	sy
		conn = bt_conn_lookup_handle(handle);
    5070:	4658      	mov	r0, fp
    5072:	f002 f9d3 	bl	741c <bt_conn_lookup_handle>
		if (!conn) {
    5076:	4604      	mov	r4, r0
    5078:	b950      	cbnz	r0, 5090 <hci_num_completed_packets+0x54>
	__asm__ volatile(
    507a:	f38a 8811 	msr	BASEPRI, sl
    507e:	f3bf 8f6f 	isb	sy
			BT_ERR("No connection for handle %u", handle);
    5082:	2145      	movs	r1, #69	; 0x45
    5084:	465a      	mov	r2, fp
    5086:	482f      	ldr	r0, [pc, #188]	; (5144 <hci_num_completed_packets+0x108>)
    5088:	f00d f83e 	bl	12108 <printk>
	for (i = 0; i < evt->num_handles; i++) {
    508c:	3501      	adds	r5, #1
    508e:	e7dc      	b.n	504a <hci_num_completed_packets+0xe>
    5090:	f38a 8811 	msr	BASEPRI, sl
    5094:	f3bf 8f6f 	isb	sy
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    5098:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
    509c:	b346      	cbz	r6, 50f0 <hci_num_completed_packets+0xb4>
	__asm__ volatile(
    509e:	f04f 0320 	mov.w	r3, #32
    50a2:	f3ef 8211 	mrs	r2, BASEPRI
    50a6:	f383 8811 	msr	BASEPRI, r3
    50aa:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    50ae:	69e3      	ldr	r3, [r4, #28]
    50b0:	b16b      	cbz	r3, 50ce <hci_num_completed_packets+0x92>
				conn->pending_no_cb--;
    50b2:	3b01      	subs	r3, #1
    50b4:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    50b6:	f382 8811 	msr	BASEPRI, r2
    50ba:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    50be:	4620      	mov	r0, r4
    50c0:	f001 fefc 	bl	6ebc <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
    50c4:	3e01      	subs	r6, #1
    50c6:	f00b fd9b 	bl	10c00 <z_impl_k_sem_give>
    50ca:	b2b6      	uxth	r6, r6
    50cc:	e7e6      	b.n	509c <hci_num_completed_packets+0x60>
Z_GENLIST_IS_EMPTY(slist)
    50ce:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
    50d0:	b12b      	cbz	r3, 50de <hci_num_completed_packets+0xa2>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    50d2:	69a1      	ldr	r1, [r4, #24]
    50d4:	6818      	ldr	r0, [r3, #0]
    50d6:	428b      	cmp	r3, r1
	list->head = node;
    50d8:	6160      	str	r0, [r4, #20]
	list->tail = node;
    50da:	bf08      	it	eq
    50dc:	61a0      	streq	r0, [r4, #24]
    50de:	f382 8811 	msr	BASEPRI, r2
    50e2:	f3bf 8f6f 	isb	sy
			if (!node) {
    50e6:	b93b      	cbnz	r3, 50f8 <hci_num_completed_packets+0xbc>
				BT_ERR("packets count mismatch");
    50e8:	2145      	movs	r1, #69	; 0x45
    50ea:	4817      	ldr	r0, [pc, #92]	; (5148 <hci_num_completed_packets+0x10c>)
    50ec:	f00d f80c 	bl	12108 <printk>
		bt_conn_unref(conn);
    50f0:	4620      	mov	r0, r4
    50f2:	f00e febf 	bl	13e74 <bt_conn_unref>
    50f6:	e7c9      	b.n	508c <hci_num_completed_packets+0x50>
	__asm__ volatile(
    50f8:	f04f 0220 	mov.w	r2, #32
    50fc:	f3ef 8111 	mrs	r1, BASEPRI
    5100:	f382 8811 	msr	BASEPRI, r2
    5104:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    5108:	68da      	ldr	r2, [r3, #12]
    510a:	61e2      	str	r2, [r4, #28]
	parent->next = child;
    510c:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
    5110:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    5112:	f8c3 800c 	str.w	r8, [r3, #12]
    5116:	b98a      	cbnz	r2, 513c <hci_num_completed_packets+0x100>
	list->head = node;
    5118:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    511c:	f381 8811 	msr	BASEPRI, r1
    5120:	f3bf 8f6f 	isb	sy
    5124:	2100      	movs	r1, #0
    5126:	f104 0030 	add.w	r0, r4, #48	; 0x30
    512a:	f00e fc00 	bl	1392e <atomic_test_and_set_bit>
    512e:	2800      	cmp	r0, #0
    5130:	d1c5      	bne.n	50be <hci_num_completed_packets+0x82>
		k_queue_append(&work_q->queue, work);
    5132:	4651      	mov	r1, sl
    5134:	4648      	mov	r0, r9
    5136:	f011 fb28 	bl	1678a <k_queue_append>
    513a:	e7c0      	b.n	50be <hci_num_completed_packets+0x82>
	parent->next = child;
    513c:	6013      	str	r3, [r2, #0]
	list->tail = node;
    513e:	6263      	str	r3, [r4, #36]	; 0x24
}
    5140:	e7ec      	b.n	511c <hci_num_completed_packets+0xe0>
    5142:	bf00      	nop
    5144:	000194c1 	.word	0x000194c1
    5148:	000194e2 	.word	0x000194e2
    514c:	20001dcc 	.word	0x20001dcc

00005150 <hci_cmd_status>:
{
    5150:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    5152:	2104      	movs	r1, #4
{
    5154:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    5156:	3008      	adds	r0, #8
    5158:	f008 fb18 	bl	d78c <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    515c:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    515e:	7801      	ldrb	r1, [r0, #0]
    5160:	4622      	mov	r2, r4
    5162:	8840      	ldrh	r0, [r0, #2]
    5164:	f7ff fe0c 	bl	4d80 <hci_cmd_done>
	if (ncmd) {
    5168:	b125      	cbz	r5, 5174 <hci_cmd_status+0x24>
}
    516a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    516e:	4802      	ldr	r0, [pc, #8]	; (5178 <hci_cmd_status+0x28>)
    5170:	f00b bd46 	b.w	10c00 <z_impl_k_sem_give>
    5174:	bd38      	pop	{r3, r4, r5, pc}
    5176:	bf00      	nop
    5178:	200000d0 	.word	0x200000d0

0000517c <hci_cmd_complete>:
{
    517c:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    517e:	2103      	movs	r1, #3
{
    5180:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    5182:	3008      	adds	r0, #8
    5184:	f008 fb02 	bl	d78c <net_buf_simple_pull_mem>
	status = buf->data[0];
    5188:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    518a:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    518c:	4622      	mov	r2, r4
    518e:	7819      	ldrb	r1, [r3, #0]
    5190:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    5194:	f7ff fdf4 	bl	4d80 <hci_cmd_done>
	if (ncmd) {
    5198:	b125      	cbz	r5, 51a4 <hci_cmd_complete+0x28>
}
    519a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    519e:	4802      	ldr	r0, [pc, #8]	; (51a8 <hci_cmd_complete+0x2c>)
    51a0:	f00b bd2e 	b.w	10c00 <z_impl_k_sem_give>
    51a4:	bd38      	pop	{r3, r4, r5, pc}
    51a6:	bf00      	nop
    51a8:	200000d0 	.word	0x200000d0

000051ac <bt_hci_cmd_create>:
{
    51ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    51b0:	f04f 32ff 	mov.w	r2, #4294967295
{
    51b4:	4605      	mov	r5, r0
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    51b6:	f04f 33ff 	mov.w	r3, #4294967295
    51ba:	481c      	ldr	r0, [pc, #112]	; (522c <bt_hci_cmd_create+0x80>)
{
    51bc:	460e      	mov	r6, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    51be:	f010 fae4 	bl	1578a <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
    51c2:	4604      	mov	r4, r0
    51c4:	b958      	cbnz	r0, 51de <bt_hci_cmd_create+0x32>
    51c6:	491a      	ldr	r1, [pc, #104]	; (5230 <bt_hci_cmd_create+0x84>)
    51c8:	481a      	ldr	r0, [pc, #104]	; (5234 <bt_hci_cmd_create+0x88>)
    51ca:	f240 1327 	movw	r3, #295	; 0x127
    51ce:	4a1a      	ldr	r2, [pc, #104]	; (5238 <bt_hci_cmd_create+0x8c>)
    51d0:	f00c ff9a 	bl	12108 <printk>
    51d4:	f240 1127 	movw	r1, #295	; 0x127
    51d8:	4817      	ldr	r0, [pc, #92]	; (5238 <bt_hci_cmd_create+0x8c>)
    51da:	f00d fa2b 	bl	12634 <assert_post_action>
	*(u8_t *)net_buf_user_data(buf) = type;
    51de:	2700      	movs	r7, #0
	net_buf_reserve(buf, BT_BUF_RESERVE);
    51e0:	f104 0b08 	add.w	fp, r4, #8
    51e4:	2101      	movs	r1, #1
    51e6:	4658      	mov	r0, fp
    51e8:	f008 f922 	bl	d430 <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
    51ec:	4620      	mov	r0, r4
    51ee:	7527      	strb	r7, [r4, #20]
    51f0:	f007 ffe4 	bl	d1bc <net_buf_id>
    51f4:	f04f 0a0c 	mov.w	sl, #12
    51f8:	f8df 8040 	ldr.w	r8, [pc, #64]	; 523c <bt_hci_cmd_create+0x90>
    51fc:	fb0a 8000 	mla	r0, sl, r0, r8
    5200:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
    5202:	4620      	mov	r0, r4
    5204:	f007 ffda 	bl	d1bc <net_buf_id>
    5208:	fb0a 8000 	mla	r0, sl, r0, r8
    520c:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
    520e:	4620      	mov	r0, r4
    5210:	f007 ffd4 	bl	d1bc <net_buf_id>
    5214:	fb0a 8000 	mla	r0, sl, r0, r8
	hdr = net_buf_add(buf, sizeof(*hdr));
    5218:	2103      	movs	r1, #3
	cmd(buf)->state = NULL;
    521a:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    521c:	4658      	mov	r0, fp
    521e:	f008 fad7 	bl	d7d0 <net_buf_simple_add>
	hdr->param_len = param_len;
    5222:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    5224:	8005      	strh	r5, [r0, #0]
}
    5226:	4620      	mov	r0, r4
    5228:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    522c:	200005dc 	.word	0x200005dc
    5230:	0001b1ca 	.word	0x0001b1ca
    5234:	00017d82 	.word	0x00017d82
    5238:	000193ed 	.word	0x000193ed
    523c:	20000c0c 	.word	0x20000c0c

00005240 <bt_hci_cmd_send_sync>:
{
    5240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5244:	4680      	mov	r8, r0
    5246:	4615      	mov	r5, r2
	if (!buf) {
    5248:	460c      	mov	r4, r1
{
    524a:	b086      	sub	sp, #24
	if (!buf) {
    524c:	b921      	cbnz	r1, 5258 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
    524e:	f7ff ffad 	bl	51ac <bt_hci_cmd_create>
		if (!buf) {
    5252:	4604      	mov	r4, r0
    5254:	2800      	cmp	r0, #0
    5256:	d04f      	beq.n	52f8 <bt_hci_cmd_send_sync+0xb8>
	return z_impl_k_sem_init(sem, initial_count, limit);
    5258:	2201      	movs	r2, #1
    525a:	2100      	movs	r1, #0
    525c:	4668      	mov	r0, sp
    525e:	f011 fad7 	bl	16810 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    5262:	4620      	mov	r0, r4
    5264:	f007 ffaa 	bl	d1bc <net_buf_id>
    5268:	230c      	movs	r3, #12
    526a:	4e25      	ldr	r6, [pc, #148]	; (5300 <bt_hci_cmd_send_sync+0xc0>)
    526c:	fb03 6000 	mla	r0, r3, r0, r6
    5270:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    5274:	4620      	mov	r0, r4
    5276:	f008 f97f 	bl	d578 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    527a:	4621      	mov	r1, r4
    527c:	4821      	ldr	r0, [pc, #132]	; (5304 <bt_hci_cmd_send_sync+0xc4>)
    527e:	f008 f901 	bl	d484 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    5282:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    5286:	2300      	movs	r3, #0
    5288:	4668      	mov	r0, sp
    528a:	f00b fcfd 	bl	10c88 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    528e:	4607      	mov	r7, r0
    5290:	b180      	cbz	r0, 52b4 <bt_hci_cmd_send_sync+0x74>
    5292:	f44f 73b9 	mov.w	r3, #370	; 0x172
    5296:	4a1c      	ldr	r2, [pc, #112]	; (5308 <bt_hci_cmd_send_sync+0xc8>)
    5298:	491c      	ldr	r1, [pc, #112]	; (530c <bt_hci_cmd_send_sync+0xcc>)
    529a:	481d      	ldr	r0, [pc, #116]	; (5310 <bt_hci_cmd_send_sync+0xd0>)
    529c:	f00c ff34 	bl	12108 <printk>
    52a0:	4639      	mov	r1, r7
    52a2:	481c      	ldr	r0, [pc, #112]	; (5314 <bt_hci_cmd_send_sync+0xd4>)
    52a4:	f00c ff30 	bl	12108 <printk>
    52a8:	4040      	eors	r0, r0
    52aa:	f380 8811 	msr	BASEPRI, r0
    52ae:	f04f 0003 	mov.w	r0, #3
    52b2:	df02      	svc	2
	status = cmd(buf)->status;
    52b4:	4620      	mov	r0, r4
    52b6:	f007 ff81 	bl	d1bc <net_buf_id>
    52ba:	230c      	movs	r3, #12
    52bc:	4343      	muls	r3, r0
    52be:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
    52c0:	b18e      	cbz	r6, 52e6 <bt_hci_cmd_send_sync+0xa6>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    52c2:	4633      	mov	r3, r6
    52c4:	4642      	mov	r2, r8
    52c6:	2157      	movs	r1, #87	; 0x57
    52c8:	4813      	ldr	r0, [pc, #76]	; (5318 <bt_hci_cmd_send_sync+0xd8>)
    52ca:	f00c ff1d 	bl	12108 <printk>
		net_buf_unref(buf);
    52ce:	4620      	mov	r0, r4
    52d0:	f008 f90c 	bl	d4ec <net_buf_unref>
			return -EIO;
    52d4:	2e09      	cmp	r6, #9
    52d6:	bf0c      	ite	eq
    52d8:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
    52dc:	f06f 0004 	mvnne.w	r0, #4
}
    52e0:	b006      	add	sp, #24
    52e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
    52e6:	b115      	cbz	r5, 52ee <bt_hci_cmd_send_sync+0xae>
	return 0;
    52e8:	4630      	mov	r0, r6
		*rsp = buf;
    52ea:	602c      	str	r4, [r5, #0]
    52ec:	e7f8      	b.n	52e0 <bt_hci_cmd_send_sync+0xa0>
		net_buf_unref(buf);
    52ee:	4620      	mov	r0, r4
    52f0:	f008 f8fc 	bl	d4ec <net_buf_unref>
	return 0;
    52f4:	4628      	mov	r0, r5
    52f6:	e7f3      	b.n	52e0 <bt_hci_cmd_send_sync+0xa0>
			return -ENOBUFS;
    52f8:	f06f 0036 	mvn.w	r0, #54	; 0x36
    52fc:	e7f0      	b.n	52e0 <bt_hci_cmd_send_sync+0xa0>
    52fe:	bf00      	nop
    5300:	20000c0c 	.word	0x20000c0c
    5304:	20000108 	.word	0x20000108
    5308:	000193ed 	.word	0x000193ed
    530c:	000194fe 	.word	0x000194fe
    5310:	00017d82 	.word	0x00017d82
    5314:	00019507 	.word	0x00019507
    5318:	00019527 	.word	0x00019527

0000531c <hci_le_read_max_data_len>:
{
    531c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    531e:	4606      	mov	r6, r0
    5320:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    5322:	f242 002f 	movw	r0, #8239	; 0x202f
    5326:	2100      	movs	r1, #0
    5328:	aa01      	add	r2, sp, #4
    532a:	f7ff ff89 	bl	5240 <bt_hci_cmd_send_sync>
	if (err) {
    532e:	4604      	mov	r4, r0
    5330:	b130      	cbz	r0, 5340 <hci_le_read_max_data_len+0x24>
		BT_ERR("Failed to read DLE max data len");
    5332:	2145      	movs	r1, #69	; 0x45
    5334:	4808      	ldr	r0, [pc, #32]	; (5358 <hci_le_read_max_data_len+0x3c>)
    5336:	f00c fee7 	bl	12108 <printk>
}
    533a:	4620      	mov	r0, r4
    533c:	b002      	add	sp, #8
    533e:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    5340:	9801      	ldr	r0, [sp, #4]
    5342:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    5344:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    5348:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    534a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    534e:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    5350:	f008 f8cc 	bl	d4ec <net_buf_unref>
	return 0;
    5354:	e7f1      	b.n	533a <hci_le_read_max_data_len+0x1e>
    5356:	bf00      	nop
    5358:	00019548 	.word	0x00019548

0000535c <set_random_address>:
{
    535c:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    535e:	4e15      	ldr	r6, [pc, #84]	; (53b4 <set_random_address+0x58>)
    5360:	2206      	movs	r2, #6
    5362:	f106 0131 	add.w	r1, r6, #49	; 0x31
    5366:	4605      	mov	r5, r0
    5368:	f00e f9d3 	bl	13712 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    536c:	4604      	mov	r4, r0
    536e:	b1e0      	cbz	r0, 53aa <set_random_address+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    5370:	2106      	movs	r1, #6
    5372:	f242 0005 	movw	r0, #8197	; 0x2005
    5376:	f7ff ff19 	bl	51ac <bt_hci_cmd_create>
	if (!buf) {
    537a:	4604      	mov	r4, r0
    537c:	b1b8      	cbz	r0, 53ae <set_random_address+0x52>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    537e:	2206      	movs	r2, #6
    5380:	4629      	mov	r1, r5
    5382:	3008      	adds	r0, #8
    5384:	f010 fa32 	bl	157ec <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    5388:	4621      	mov	r1, r4
    538a:	2200      	movs	r2, #0
    538c:	f242 0005 	movw	r0, #8197	; 0x2005
    5390:	f7ff ff56 	bl	5240 <bt_hci_cmd_send_sync>
	if (err) {
    5394:	4604      	mov	r4, r0
    5396:	b940      	cbnz	r0, 53aa <set_random_address+0x4e>
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    5398:	2206      	movs	r2, #6
    539a:	4629      	mov	r1, r5
    539c:	f106 0031 	add.w	r0, r6, #49	; 0x31
    53a0:	f00e f9c7 	bl	13732 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    53a4:	2301      	movs	r3, #1
    53a6:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}
    53aa:	4620      	mov	r0, r4
    53ac:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    53ae:	f06f 0436 	mvn.w	r4, #54	; 0x36
    53b2:	e7fa      	b.n	53aa <set_random_address+0x4e>
    53b4:	20000000 	.word	0x20000000

000053b8 <le_create_conn_set_random_addr.isra.0>:
static int le_create_conn_set_random_addr(bool use_filter, u8_t *own_addr_type)
    53b8:	b538      	push	{r3, r4, r5, lr}
		if (addr->type == BT_ADDR_LE_RANDOM) {
    53ba:	4c07      	ldr	r4, [pc, #28]	; (53d8 <le_create_conn_set_random_addr.isra.0+0x20>)
static int le_create_conn_set_random_addr(bool use_filter, u8_t *own_addr_type)
    53bc:	4605      	mov	r5, r0
		if (addr->type == BT_ADDR_LE_RANDOM) {
    53be:	7823      	ldrb	r3, [r4, #0]
    53c0:	2b01      	cmp	r3, #1
    53c2:	d003      	beq.n	53cc <le_create_conn_set_random_addr.isra.0+0x14>
	return 0;
    53c4:	2000      	movs	r0, #0
		*own_addr_type = addr->type;
    53c6:	7823      	ldrb	r3, [r4, #0]
    53c8:	702b      	strb	r3, [r5, #0]
}
    53ca:	bd38      	pop	{r3, r4, r5, pc}
			err = set_random_address(&addr->a);
    53cc:	1c60      	adds	r0, r4, #1
    53ce:	f7ff ffc5 	bl	535c <set_random_address>
			if (err) {
    53d2:	2800      	cmp	r0, #0
    53d4:	d0f6      	beq.n	53c4 <le_create_conn_set_random_addr.isra.0+0xc>
    53d6:	e7f8      	b.n	53ca <le_create_conn_set_random_addr.isra.0+0x12>
    53d8:	20000000 	.word	0x20000000

000053dc <set_le_adv_enable_legacy>:
{
    53dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    53de:	4606      	mov	r6, r0
    53e0:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    53e2:	f242 000a 	movw	r0, #8202	; 0x200a
    53e6:	2101      	movs	r1, #1
    53e8:	f7ff fee0 	bl	51ac <bt_hci_cmd_create>
	if (!buf) {
    53ec:	4604      	mov	r4, r0
    53ee:	b1e8      	cbz	r0, 542c <set_le_adv_enable_legacy+0x50>
	if (enable) {
    53f0:	3008      	adds	r0, #8
    53f2:	b1cd      	cbz	r5, 5428 <set_le_adv_enable_legacy+0x4c>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    53f4:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    53f6:	f010 fa05 	bl	15804 <net_buf_simple_add_u8>
	state->bit = bit;
    53fa:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
    53fc:	4620      	mov	r0, r4
	cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
    53fe:	3614      	adds	r6, #20
	state->bit = bit;
    5400:	9302      	str	r3, [sp, #8]
	state->target = target;
    5402:	9601      	str	r6, [sp, #4]
	state->val = val;
    5404:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    5408:	f007 fed8 	bl	d1bc <net_buf_id>
    540c:	220c      	movs	r2, #12
    540e:	4b09      	ldr	r3, [pc, #36]	; (5434 <set_le_adv_enable_legacy+0x58>)
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    5410:	4621      	mov	r1, r4
	cmd(buf)->state = &state;
    5412:	fb02 3000 	mla	r0, r2, r0, r3
    5416:	ab01      	add	r3, sp, #4
    5418:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    541a:	2200      	movs	r2, #0
    541c:	f242 000a 	movw	r0, #8202	; 0x200a
    5420:	f7ff ff0e 	bl	5240 <bt_hci_cmd_send_sync>
}
    5424:	b004      	add	sp, #16
    5426:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    5428:	4629      	mov	r1, r5
    542a:	e7e4      	b.n	53f6 <set_le_adv_enable_legacy+0x1a>
		return -ENOBUFS;
    542c:	f06f 0036 	mvn.w	r0, #54	; 0x36
    5430:	e7f8      	b.n	5424 <set_le_adv_enable_legacy+0x48>
    5432:	bf00      	nop
    5434:	20000c0c 	.word	0x20000c0c

00005438 <set_le_scan_enable_legacy>:
{
    5438:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    543a:	2102      	movs	r1, #2
{
    543c:	4604      	mov	r4, r0
    543e:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    5440:	f242 000c 	movw	r0, #8204	; 0x200c
    5444:	f7ff feb2 	bl	51ac <bt_hci_cmd_create>
	if (!buf) {
    5448:	4605      	mov	r5, r0
    544a:	b348      	cbz	r0, 54a0 <set_le_scan_enable_legacy+0x68>
	cp = net_buf_add(buf, sizeof(*cp));
    544c:	2102      	movs	r1, #2
    544e:	3008      	adds	r0, #8
    5450:	f008 f9be 	bl	d7d0 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    5454:	2c01      	cmp	r4, #1
	cp = net_buf_add(buf, sizeof(*cp));
    5456:	4603      	mov	r3, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    5458:	d11f      	bne.n	549a <set_le_scan_enable_legacy+0x62>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    545a:	4813      	ldr	r0, [pc, #76]	; (54a8 <set_le_scan_enable_legacy+0x70>)
    545c:	f00e fa56 	bl	1390c <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    5460:	f3c0 2000 	ubfx	r0, r0, #8, #1
    5464:	7058      	strb	r0, [r3, #1]
	cp->enable = enable;
    5466:	701c      	strb	r4, [r3, #0]
	state->target = target;
    5468:	4b0f      	ldr	r3, [pc, #60]	; (54a8 <set_le_scan_enable_legacy+0x70>)
	cmd(buf)->state = &state;
    546a:	4628      	mov	r0, r5
	state->target = target;
    546c:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    546e:	2305      	movs	r3, #5
	cmd_state_set_init(&state, bt_dev.flags, BT_DEV_SCANNING,
    5470:	f004 0401 	and.w	r4, r4, #1
	state->bit = bit;
    5474:	9302      	str	r3, [sp, #8]
	cmd_state_set_init(&state, bt_dev.flags, BT_DEV_SCANNING,
    5476:	f88d 400c 	strb.w	r4, [sp, #12]
	cmd(buf)->state = &state;
    547a:	f007 fe9f 	bl	d1bc <net_buf_id>
    547e:	220c      	movs	r2, #12
    5480:	4b0a      	ldr	r3, [pc, #40]	; (54ac <set_le_scan_enable_legacy+0x74>)
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    5482:	4629      	mov	r1, r5
	cmd(buf)->state = &state;
    5484:	fb02 3000 	mla	r0, r2, r0, r3
    5488:	ab01      	add	r3, sp, #4
    548a:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    548c:	2200      	movs	r2, #0
    548e:	f242 000c 	movw	r0, #8204	; 0x200c
    5492:	f7ff fed5 	bl	5240 <bt_hci_cmd_send_sync>
}
    5496:	b005      	add	sp, #20
    5498:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    549a:	2200      	movs	r2, #0
    549c:	7042      	strb	r2, [r0, #1]
    549e:	e7e2      	b.n	5466 <set_le_scan_enable_legacy+0x2e>
		return -ENOBUFS;
    54a0:	f06f 0036 	mvn.w	r0, #54	; 0x36
    54a4:	e7f7      	b.n	5496 <set_le_scan_enable_legacy+0x5e>
    54a6:	bf00      	nop
    54a8:	20000098 	.word	0x20000098
    54ac:	20000c0c 	.word	0x20000c0c

000054b0 <start_le_scan_legacy>:
{
    54b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    54b2:	4605      	mov	r5, r0
    54b4:	460e      	mov	r6, r1
    54b6:	4614      	mov	r4, r2
	(void)memset(&set_param, 0, sizeof(set_param));
    54b8:	2100      	movs	r1, #0
    54ba:	2207      	movs	r2, #7
    54bc:	4668      	mov	r0, sp
    54be:	f00e f963 	bl	13788 <memset>
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
    54c2:	2300      	movs	r3, #0
		*own_addr_type = bt_dev.id_addr[0].type;
    54c4:	481f      	ldr	r0, [pc, #124]	; (5544 <start_le_scan_legacy+0x94>)
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
    54c6:	f88d 3006 	strb.w	r3, [sp, #6]
		*own_addr_type = bt_dev.id_addr[0].type;
    54ca:	f810 3b2c 	ldrb.w	r3, [r0], #44
	set_param.scan_type = scan_type;
    54ce:	f88d 5000 	strb.w	r5, [sp]
	set_param.interval = sys_cpu_to_le16(interval);
    54d2:	f8ad 6001 	strh.w	r6, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
    54d6:	f8ad 4003 	strh.w	r4, [sp, #3]
		*own_addr_type = bt_dev.id_addr[0].type;
    54da:	f88d 3005 	strb.w	r3, [sp, #5]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    54de:	f00e fa15 	bl	1390c <atomic_get>
		    adv && !atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    54e2:	0642      	lsls	r2, r0, #25
    54e4:	d406      	bmi.n	54f4 <start_le_scan_legacy+0x44>
			err = le_set_private_addr(BT_ID_DEFAULT);
    54e6:	f00e fa59 	bl	1399c <le_adv_set_private_addr.isra.0>
			if (err) {
    54ea:	4604      	mov	r4, r0
    54ec:	bb18      	cbnz	r0, 5536 <start_le_scan_legacy+0x86>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    54ee:	2301      	movs	r3, #1
    54f0:	f88d 3005 	strb.w	r3, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    54f4:	2107      	movs	r1, #7
    54f6:	f242 000b 	movw	r0, #8203	; 0x200b
    54fa:	f7ff fe57 	bl	51ac <bt_hci_cmd_create>
	if (!buf) {
    54fe:	4604      	mov	r4, r0
    5500:	b1e0      	cbz	r0, 553c <start_le_scan_legacy+0x8c>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    5502:	2207      	movs	r2, #7
    5504:	4669      	mov	r1, sp
    5506:	3008      	adds	r0, #8
    5508:	f010 f970 	bl	157ec <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    550c:	4621      	mov	r1, r4
    550e:	2200      	movs	r2, #0
    5510:	f242 000b 	movw	r0, #8203	; 0x200b
    5514:	f7ff fe94 	bl	5240 <bt_hci_cmd_send_sync>
	if (err) {
    5518:	4604      	mov	r4, r0
    551a:	b960      	cbnz	r0, 5536 <start_le_scan_legacy+0x86>
	return set_le_scan_enable_legacy(enable);
    551c:	2001      	movs	r0, #1
    551e:	f7ff ff8b 	bl	5438 <set_le_scan_enable_legacy>
	if (err) {
    5522:	4604      	mov	r4, r0
    5524:	b938      	cbnz	r0, 5536 <start_le_scan_legacy+0x86>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);
    5526:	1e6b      	subs	r3, r5, #1
    5528:	425a      	negs	r2, r3
    552a:	f04f 0107 	mov.w	r1, #7
    552e:	4806      	ldr	r0, [pc, #24]	; (5548 <start_le_scan_legacy+0x98>)
    5530:	415a      	adcs	r2, r3
    5532:	f00e fa12 	bl	1395a <atomic_set_bit_to>
}
    5536:	4620      	mov	r0, r4
    5538:	b002      	add	sp, #8
    553a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    553c:	f06f 0436 	mvn.w	r4, #54	; 0x36
    5540:	e7f9      	b.n	5536 <start_le_scan_legacy+0x86>
    5542:	bf00      	nop
    5544:	20000000 	.word	0x20000000
    5548:	20000098 	.word	0x20000098

0000554c <bt_le_create_conn_legacy>:
{
    554c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    5550:	4606      	mov	r6, r0
	err = le_create_conn_set_random_addr(use_filter, &own_addr_type);
    5552:	f10d 0003 	add.w	r0, sp, #3
    5556:	f7ff ff2f 	bl	53b8 <le_create_conn_set_random_addr.isra.0>
	if (err) {
    555a:	4605      	mov	r5, r0
    555c:	2800      	cmp	r0, #0
    555e:	d150      	bne.n	5602 <bt_le_create_conn_legacy+0xb6>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    5560:	2119      	movs	r1, #25
    5562:	f242 000d 	movw	r0, #8205	; 0x200d
    5566:	f7ff fe21 	bl	51ac <bt_hci_cmd_create>
	if (!buf) {
    556a:	4607      	mov	r7, r0
    556c:	2800      	cmp	r0, #0
    556e:	d04f      	beq.n	5610 <bt_le_create_conn_legacy+0xc4>
	cp = net_buf_add(buf, sizeof(*cp));
    5570:	2119      	movs	r1, #25
    5572:	3008      	adds	r0, #8
    5574:	f008 f92c 	bl	d7d0 <net_buf_simple_add>
    5578:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
    557a:	4629      	mov	r1, r5
    557c:	2219      	movs	r2, #25
    557e:	f00e f903 	bl	13788 <memset>
	cp->own_addr_type = own_addr_type;
    5582:	f89d 3003 	ldrb.w	r3, [sp, #3]
		if (!bt_dev.le.rl_size ||
    5586:	4d24      	ldr	r5, [pc, #144]	; (5618 <bt_le_create_conn_legacy+0xcc>)
	cp->own_addr_type = own_addr_type;
    5588:	7323      	strb	r3, [r4, #12]
		if (!bt_dev.le.rl_size ||
    558a:	f895 30cc 	ldrb.w	r3, [r5, #204]	; 0xcc
    558e:	2b00      	cmp	r3, #0
    5590:	d03b      	beq.n	560a <bt_le_create_conn_legacy+0xbe>
    5592:	f895 20cd 	ldrb.w	r2, [r5, #205]	; 0xcd
    5596:	429a      	cmp	r2, r3
    5598:	d837      	bhi.n	560a <bt_le_create_conn_legacy+0xbe>
		const bt_addr_le_t *peer_addr = &conn->le.dst;
    559a:	f106 017c 	add.w	r1, r6, #124	; 0x7c
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
    559e:	f04f 0800 	mov.w	r8, #0
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
    55a2:	1d60      	adds	r0, r4, #5
    55a4:	f00e f9b5 	bl	13912 <bt_addr_le_copy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
    55a8:	f884 8004 	strb.w	r8, [r4, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    55ac:	89ab      	ldrh	r3, [r5, #12]
	cmd(buf)->state = &state;
    55ae:	4638      	mov	r0, r7
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    55b0:	8023      	strh	r3, [r4, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
    55b2:	89eb      	ldrh	r3, [r5, #14]
    55b4:	8063      	strh	r3, [r4, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    55b6:	f8b6 3094 	ldrh.w	r3, [r6, #148]	; 0x94
    55ba:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    55be:	f8b6 3096 	ldrh.w	r3, [r6, #150]	; 0x96
    55c2:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    55c6:	f8b6 3098 	ldrh.w	r3, [r6, #152]	; 0x98
    55ca:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    55ce:	f8b6 309a 	ldrh.w	r3, [r6, #154]	; 0x9a
    55d2:	f8a4 3013 	strh.w	r3, [r4, #19]
	state->target = target;
    55d6:	4b11      	ldr	r3, [pc, #68]	; (561c <bt_le_create_conn_legacy+0xd0>)
    55d8:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    55da:	230b      	movs	r3, #11
    55dc:	9302      	str	r3, [sp, #8]
	state->val = val;
    55de:	2301      	movs	r3, #1
    55e0:	f88d 300c 	strb.w	r3, [sp, #12]
	cmd(buf)->state = &state;
    55e4:	f007 fdea 	bl	d1bc <net_buf_id>
    55e8:	220c      	movs	r2, #12
    55ea:	4b0d      	ldr	r3, [pc, #52]	; (5620 <bt_le_create_conn_legacy+0xd4>)
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    55ec:	4639      	mov	r1, r7
	cmd(buf)->state = &state;
    55ee:	fb02 3000 	mla	r0, r2, r0, r3
    55f2:	ab01      	add	r3, sp, #4
    55f4:	6043      	str	r3, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    55f6:	4642      	mov	r2, r8
    55f8:	f242 000d 	movw	r0, #8205	; 0x200d
    55fc:	f7ff fe20 	bl	5240 <bt_hci_cmd_send_sync>
    5600:	4605      	mov	r5, r0
}
    5602:	4628      	mov	r0, r5
    5604:	b004      	add	sp, #16
    5606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			peer_addr = &conn->le.resp_addr;
    560a:	f106 018a 	add.w	r1, r6, #138	; 0x8a
    560e:	e7c6      	b.n	559e <bt_le_create_conn_legacy+0x52>
		return -ENOBUFS;
    5610:	f06f 0536 	mvn.w	r5, #54	; 0x36
    5614:	e7f5      	b.n	5602 <bt_le_create_conn_legacy+0xb6>
    5616:	bf00      	nop
    5618:	20000000 	.word	0x20000000
    561c:	20000098 	.word	0x20000098
    5620:	20000c0c 	.word	0x20000c0c

00005624 <bt_le_create_conn_cancel>:
{
    5624:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    5626:	2100      	movs	r1, #0
{
    5628:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    562a:	f242 000e 	movw	r0, #8206	; 0x200e
    562e:	f7ff fdbd 	bl	51ac <bt_hci_cmd_create>
	state->target = target;
    5632:	4b0c      	ldr	r3, [pc, #48]	; (5664 <bt_le_create_conn_cancel+0x40>)
	state->val = val;
    5634:	2500      	movs	r5, #0
	state->target = target;
    5636:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    5638:	230b      	movs	r3, #11
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    563a:	4604      	mov	r4, r0
	state->bit = bit;
    563c:	9302      	str	r3, [sp, #8]
	state->val = val;
    563e:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    5642:	f007 fdbb 	bl	d1bc <net_buf_id>
    5646:	220c      	movs	r2, #12
    5648:	4b07      	ldr	r3, [pc, #28]	; (5668 <bt_le_create_conn_cancel+0x44>)
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    564a:	4621      	mov	r1, r4
	cmd(buf)->state = &state;
    564c:	fb02 3000 	mla	r0, r2, r0, r3
    5650:	ab01      	add	r3, sp, #4
    5652:	6043      	str	r3, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    5654:	462a      	mov	r2, r5
    5656:	f242 000e 	movw	r0, #8206	; 0x200e
    565a:	f7ff fdf1 	bl	5240 <bt_hci_cmd_send_sync>
}
    565e:	b005      	add	sp, #20
    5660:	bd30      	pop	{r4, r5, pc}
    5662:	bf00      	nop
    5664:	20000098 	.word	0x20000098
    5668:	20000c0c 	.word	0x20000c0c

0000566c <bt_id_add>:
{
    566c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    5670:	4f53      	ldr	r7, [pc, #332]	; (57c0 <bt_id_add+0x154>)
{
    5672:	4604      	mov	r4, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    5674:	f897 20cc 	ldrb.w	r2, [r7, #204]	; 0xcc
    5678:	463d      	mov	r5, r7
    567a:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
    567e:	b10a      	cbz	r2, 5684 <bt_id_add+0x18>
    5680:	429a      	cmp	r2, r3
    5682:	d209      	bcs.n	5698 <bt_id_add+0x2c>
		bt_dev.le.rl_entries++;
    5684:	3301      	adds	r3, #1
    5686:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
		keys->state |= BT_KEYS_ID_ADDED;
    568a:	7a23      	ldrb	r3, [r4, #8]
    568c:	f043 0304 	orr.w	r3, r3, #4
    5690:	7223      	strb	r3, [r4, #8]
}
    5692:	b002      	add	sp, #8
    5694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    5698:	2100      	movs	r1, #0
    569a:	2205      	movs	r2, #5
    569c:	4608      	mov	r0, r1
    569e:	f001 ff0f 	bl	74c0 <bt_conn_lookup_state_le>
	if (conn) {
    56a2:	4606      	mov	r6, r0
    56a4:	b168      	cbz	r0, 56c2 <bt_id_add+0x56>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    56a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    56aa:	f107 0098 	add.w	r0, r7, #152	; 0x98
    56ae:	f00e f933 	bl	13918 <atomic_or>
	keys->state |= flag;
    56b2:	7a23      	ldrb	r3, [r4, #8]
		bt_conn_unref(conn);
    56b4:	4630      	mov	r0, r6
	keys->state |= flag;
    56b6:	f043 0301 	orr.w	r3, r3, #1
    56ba:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
    56bc:	f00e fbda 	bl	13e74 <bt_conn_unref>
		return;
    56c0:	e7e7      	b.n	5692 <bt_id_add+0x26>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    56c2:	f107 0098 	add.w	r0, r7, #152	; 0x98
    56c6:	f00e f921 	bl	1390c <atomic_get>
	func(&bt_dev.adv, data);
    56ca:	4631      	mov	r1, r6
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    56cc:	f3c0 1740 	ubfx	r7, r0, #5, #1
    56d0:	f105 0018 	add.w	r0, r5, #24
    56d4:	f00e f974 	bl	139c0 <adv_pause_enabled>
	if (scan_enabled) {
    56d8:	b117      	cbz	r7, 56e0 <bt_id_add+0x74>
		set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    56da:	4630      	mov	r0, r6
    56dc:	f00e f9de 	bl	13a9c <set_le_scan_enable>
	if (bt_dev.le.rl_entries) {
    56e0:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    56e4:	b143      	cbz	r3, 56f8 <bt_id_add+0x8c>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    56e6:	2000      	movs	r0, #0
    56e8:	f00e f9c0 	bl	13a6c <addr_res_enable>
		if (err) {
    56ec:	b120      	cbz	r0, 56f8 <bt_id_add+0x8c>
			BT_WARN("Failed to disable address resolution");
    56ee:	2157      	movs	r1, #87	; 0x57
    56f0:	4834      	ldr	r0, [pc, #208]	; (57c4 <bt_id_add+0x158>)
		BT_WARN("Set privacy mode command is not supported");
    56f2:	f00c fd09 	bl	12108 <printk>
	if (err) {
    56f6:	e01c      	b.n	5732 <bt_id_add+0xc6>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
    56f8:	f895 20cd 	ldrb.w	r2, [r5, #205]	; 0xcd
    56fc:	f895 30cc 	ldrb.w	r3, [r5, #204]	; 0xcc
    5700:	429a      	cmp	r2, r3
    5702:	d122      	bne.n	574a <bt_id_add+0xde>
		BT_WARN("Resolving list size exceeded. Switching to host.");
    5704:	2157      	movs	r1, #87	; 0x57
    5706:	4830      	ldr	r0, [pc, #192]	; (57c8 <bt_id_add+0x15c>)
    5708:	f00c fcfe 	bl	12108 <printk>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
    570c:	2200      	movs	r2, #0
    570e:	f242 0029 	movw	r0, #8233	; 0x2029
    5712:	4611      	mov	r1, r2
    5714:	f7ff fd94 	bl	5240 <bt_hci_cmd_send_sync>
		if (err) {
    5718:	b110      	cbz	r0, 5720 <bt_id_add+0xb4>
			BT_ERR("Failed to clear resolution list");
    571a:	2145      	movs	r1, #69	; 0x45
    571c:	482b      	ldr	r0, [pc, #172]	; (57cc <bt_id_add+0x160>)
    571e:	e7e8      	b.n	56f2 <bt_id_add+0x86>
		bt_dev.le.rl_entries++;
    5720:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    5724:	3301      	adds	r3, #1
    5726:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
		keys->state |= BT_KEYS_ID_ADDED;
    572a:	7a23      	ldrb	r3, [r4, #8]
    572c:	f043 0304 	orr.w	r3, r3, #4
    5730:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    5732:	2001      	movs	r0, #1
    5734:	f00e f99a 	bl	13a6c <addr_res_enable>
	if (scan_enabled) {
    5738:	b117      	cbz	r7, 5740 <bt_id_add+0xd4>
		set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    573a:	2001      	movs	r0, #1
    573c:	f00e f9ae 	bl	13a9c <set_le_scan_enable>
	func(&bt_dev.adv, data);
    5740:	2100      	movs	r1, #0
    5742:	4823      	ldr	r0, [pc, #140]	; (57d0 <bt_id_add+0x164>)
    5744:	f00e f951 	bl	139ea <adv_unpause_enabled>
}
    5748:	e7a3      	b.n	5692 <bt_id_add+0x26>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
    574a:	f104 0801 	add.w	r8, r4, #1
    574e:	4640      	mov	r0, r8
    5750:	f104 012a 	add.w	r1, r4, #42	; 0x2a
    5754:	f00e f959 	bl	13a0a <hci_id_add.isra.0>
	if (err) {
    5758:	4606      	mov	r6, r0
    575a:	b110      	cbz	r0, 5762 <bt_id_add+0xf6>
		BT_ERR("Failed to add IRK to controller");
    575c:	2145      	movs	r1, #69	; 0x45
    575e:	481d      	ldr	r0, [pc, #116]	; (57d4 <bt_id_add+0x168>)
    5760:	e7c7      	b.n	56f2 <bt_id_add+0x86>
	bt_dev.le.rl_entries++;
    5762:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    5766:	3301      	adds	r3, #1
    5768:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
	keys->state |= BT_KEYS_ID_ADDED;
    576c:	7a23      	ldrb	r3, [r4, #8]
    576e:	f043 0304 	orr.w	r3, r3, #4
    5772:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
    5774:	f895 306f 	ldrb.w	r3, [r5, #111]	; 0x6f
    5778:	075b      	lsls	r3, r3, #29
    577a:	d402      	bmi.n	5782 <bt_id_add+0x116>
		BT_WARN("Set privacy mode command is not supported");
    577c:	2157      	movs	r1, #87	; 0x57
    577e:	4816      	ldr	r0, [pc, #88]	; (57d8 <bt_id_add+0x16c>)
    5780:	e7b7      	b.n	56f2 <bt_id_add+0x86>
	bt_addr_le_copy(&cp.id_addr, addr);
    5782:	4641      	mov	r1, r8
    5784:	4668      	mov	r0, sp
    5786:	f00e f8c4 	bl	13912 <bt_addr_le_copy>
	cp.mode = mode;
    578a:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    578c:	2108      	movs	r1, #8
    578e:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
    5792:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    5796:	f7ff fd09 	bl	51ac <bt_hci_cmd_create>
	if (!buf) {
    579a:	4604      	mov	r4, r0
    579c:	b910      	cbnz	r0, 57a4 <bt_id_add+0x138>
		BT_ERR("Failed to set privacy mode");
    579e:	2145      	movs	r1, #69	; 0x45
    57a0:	480e      	ldr	r0, [pc, #56]	; (57dc <bt_id_add+0x170>)
    57a2:	e7a6      	b.n	56f2 <bt_id_add+0x86>
	net_buf_add_mem(buf, &cp, sizeof(cp));
    57a4:	2208      	movs	r2, #8
    57a6:	4669      	mov	r1, sp
    57a8:	4410      	add	r0, r2
    57aa:	f010 f81f 	bl	157ec <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
    57ae:	4632      	mov	r2, r6
    57b0:	4621      	mov	r1, r4
    57b2:	f242 004e 	movw	r0, #8270	; 0x204e
    57b6:	f7ff fd43 	bl	5240 <bt_hci_cmd_send_sync>
	if (err) {
    57ba:	2800      	cmp	r0, #0
    57bc:	d0b9      	beq.n	5732 <bt_id_add+0xc6>
    57be:	e7ee      	b.n	579e <bt_id_add+0x132>
    57c0:	20000000 	.word	0x20000000
    57c4:	00019574 	.word	0x00019574
    57c8:	0001959e 	.word	0x0001959e
    57cc:	000195d4 	.word	0x000195d4
    57d0:	20000018 	.word	0x20000018
    57d4:	000195f9 	.word	0x000195f9
    57d8:	0001961e 	.word	0x0001961e
    57dc:	0001964d 	.word	0x0001964d

000057e0 <bt_id_del>:
{
    57e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!bt_dev.le.rl_size ||
    57e4:	4f48      	ldr	r7, [pc, #288]	; (5908 <bt_id_del+0x128>)
{
    57e6:	4604      	mov	r4, r0
	if (!bt_dev.le.rl_size ||
    57e8:	f897 20cc 	ldrb.w	r2, [r7, #204]	; 0xcc
    57ec:	463d      	mov	r5, r7
    57ee:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
    57f2:	b112      	cbz	r2, 57fa <bt_id_del+0x1a>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    57f4:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
    57f6:	4293      	cmp	r3, r2
    57f8:	dd08      	ble.n	580c <bt_id_del+0x2c>
		bt_dev.le.rl_entries--;
    57fa:	3b01      	subs	r3, #1
    57fc:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
		keys->state &= ~BT_KEYS_ID_ADDED;
    5800:	7a23      	ldrb	r3, [r4, #8]
    5802:	f023 0304 	bic.w	r3, r3, #4
    5806:	7223      	strb	r3, [r4, #8]
}
    5808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    580c:	2100      	movs	r1, #0
    580e:	2205      	movs	r2, #5
    5810:	4608      	mov	r0, r1
    5812:	f001 fe55 	bl	74c0 <bt_conn_lookup_state_le>
	if (conn) {
    5816:	4606      	mov	r6, r0
    5818:	b170      	cbz	r0, 5838 <bt_id_del+0x58>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    581a:	f107 0098 	add.w	r0, r7, #152	; 0x98
    581e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    5822:	f00e f879 	bl	13918 <atomic_or>
	keys->state |= flag;
    5826:	7a23      	ldrb	r3, [r4, #8]
		bt_conn_unref(conn);
    5828:	4630      	mov	r0, r6
	keys->state |= flag;
    582a:	f043 0302 	orr.w	r3, r3, #2
    582e:	7223      	strb	r3, [r4, #8]
}
    5830:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
    5834:	f00e bb1e 	b.w	13e74 <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5838:	f107 0098 	add.w	r0, r7, #152	; 0x98
    583c:	f00e f866 	bl	1390c <atomic_get>
	func(&bt_dev.adv, data);
    5840:	4631      	mov	r1, r6
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    5842:	f3c0 1840 	ubfx	r8, r0, #5, #1
    5846:	f107 0018 	add.w	r0, r7, #24
    584a:	f00e f8b9 	bl	139c0 <adv_pause_enabled>
	if (scan_enabled) {
    584e:	f1b8 0f00 	cmp.w	r8, #0
    5852:	d002      	beq.n	585a <bt_id_del+0x7a>
		set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    5854:	4630      	mov	r0, r6
    5856:	f00e f921 	bl	13a9c <set_le_scan_enable>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    585a:	2000      	movs	r0, #0
    585c:	f00e f906 	bl	13a6c <addr_res_enable>
	if (err) {
    5860:	4606      	mov	r6, r0
    5862:	b1b0      	cbz	r0, 5892 <bt_id_del+0xb2>
		BT_ERR("Disabling address resolution failed (err %d)", err);
    5864:	4602      	mov	r2, r0
    5866:	2145      	movs	r1, #69	; 0x45
    5868:	4828      	ldr	r0, [pc, #160]	; (590c <bt_id_del+0x12c>)
    586a:	f00c fc4d 	bl	12108 <printk>
	if (bt_dev.le.rl_entries) {
    586e:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    5872:	b113      	cbz	r3, 587a <bt_id_del+0x9a>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    5874:	2001      	movs	r0, #1
    5876:	f00e f8f9 	bl	13a6c <addr_res_enable>
	if (scan_enabled) {
    587a:	f1b8 0f00 	cmp.w	r8, #0
    587e:	d002      	beq.n	5886 <bt_id_del+0xa6>
		set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    5880:	2001      	movs	r0, #1
    5882:	f00e f90b 	bl	13a9c <set_le_scan_enable>
}
    5886:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	func(&bt_dev.adv, data);
    588a:	2100      	movs	r1, #0
    588c:	4820      	ldr	r0, [pc, #128]	; (5910 <bt_id_del+0x130>)
    588e:	f00e b8ac 	b.w	139ea <adv_unpause_enabled>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    5892:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    5896:	f895 20cc 	ldrb.w	r2, [r5, #204]	; 0xcc
    589a:	429a      	cmp	r2, r3
    589c:	d20c      	bcs.n	58b8 <bt_id_del+0xd8>
		bt_dev.le.rl_entries--;
    589e:	3b01      	subs	r3, #1
    58a0:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
		keys->state &= ~BT_KEYS_ID_ADDED;
    58a4:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    58a6:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
    58a8:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    58ac:	2002      	movs	r0, #2
    58ae:	4919      	ldr	r1, [pc, #100]	; (5914 <bt_id_del+0x134>)
		keys->state &= ~BT_KEYS_ID_ADDED;
    58b0:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    58b2:	f007 fb3f 	bl	cf34 <bt_keys_foreach>
		goto done;
    58b6:	e7da      	b.n	586e <bt_id_del+0x8e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
    58b8:	2107      	movs	r1, #7
    58ba:	f242 0028 	movw	r0, #8232	; 0x2028
    58be:	f7ff fc75 	bl	51ac <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
    58c2:	f104 0901 	add.w	r9, r4, #1
	if (!buf) {
    58c6:	4607      	mov	r7, r0
    58c8:	b920      	cbnz	r0, 58d4 <bt_id_del+0xf4>
		BT_ERR("Failed to remove IRK from controller");
    58ca:	2145      	movs	r1, #69	; 0x45
    58cc:	4812      	ldr	r0, [pc, #72]	; (5918 <bt_id_del+0x138>)
    58ce:	f00c fc1b 	bl	12108 <printk>
		goto done;
    58d2:	e7cc      	b.n	586e <bt_id_del+0x8e>
	cp = net_buf_add(buf, sizeof(*cp));
    58d4:	2107      	movs	r1, #7
    58d6:	3008      	adds	r0, #8
    58d8:	f007 ff7a 	bl	d7d0 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    58dc:	4649      	mov	r1, r9
    58de:	f00e f818 	bl	13912 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
    58e2:	4632      	mov	r2, r6
    58e4:	4639      	mov	r1, r7
    58e6:	f242 0028 	movw	r0, #8232	; 0x2028
    58ea:	f7ff fca9 	bl	5240 <bt_hci_cmd_send_sync>
	if (err) {
    58ee:	2800      	cmp	r0, #0
    58f0:	d1eb      	bne.n	58ca <bt_id_del+0xea>
	bt_dev.le.rl_entries--;
    58f2:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    58f6:	3b01      	subs	r3, #1
    58f8:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
	keys->state &= ~BT_KEYS_ID_ADDED;
    58fc:	7a23      	ldrb	r3, [r4, #8]
    58fe:	f023 0304 	bic.w	r3, r3, #4
    5902:	7223      	strb	r3, [r4, #8]
    5904:	e7b3      	b.n	586e <bt_id_del+0x8e>
    5906:	bf00      	nop
    5908:	20000000 	.word	0x20000000
    590c:	0001966d 	.word	0x0001966d
    5910:	20000018 	.word	0x20000018
    5914:	00013a5b 	.word	0x00013a5b
    5918:	0001969f 	.word	0x0001969f

0000591c <bt_le_scan_update>:
{
    591c:	b570      	push	{r4, r5, r6, lr}
    591e:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5920:	481c      	ldr	r0, [pc, #112]	; (5994 <bt_le_scan_update+0x78>)
    5922:	f00d fff3 	bl	1390c <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    5926:	0641      	lsls	r1, r0, #25
    5928:	f3c0 1380 	ubfx	r3, r0, #6, #1
    592c:	d501      	bpl.n	5932 <bt_le_scan_update+0x16>
			return 0;
    592e:	2000      	movs	r0, #0
    5930:	e02b      	b.n	598a <bt_le_scan_update+0x6e>
    5932:	4818      	ldr	r0, [pc, #96]	; (5994 <bt_le_scan_update+0x78>)
    5934:	f00d ffea 	bl	1390c <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    5938:	0682      	lsls	r2, r0, #26
    593a:	d421      	bmi.n	5980 <bt_le_scan_update+0x64>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    593c:	2100      	movs	r1, #0
    593e:	2205      	movs	r2, #5
    5940:	4608      	mov	r0, r1
    5942:	f001 fdbd 	bl	74c0 <bt_conn_lookup_state_le>
		if (conn) {
    5946:	4604      	mov	r4, r0
    5948:	bb00      	cbnz	r0, 598c <bt_le_scan_update+0x70>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    594a:	2201      	movs	r2, #1
    594c:	4601      	mov	r1, r0
    594e:	f001 fdb7 	bl	74c0 <bt_conn_lookup_state_le>
		if (!conn) {
    5952:	4605      	mov	r5, r0
    5954:	2800      	cmp	r0, #0
    5956:	d0ea      	beq.n	592e <bt_le_scan_update+0x12>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    5958:	f44f 7180 	mov.w	r1, #256	; 0x100
    595c:	480d      	ldr	r0, [pc, #52]	; (5994 <bt_le_scan_update+0x78>)
    595e:	f00d ffdb 	bl	13918 <atomic_or>
		bt_conn_unref(conn);
    5962:	4628      	mov	r0, r5
    5964:	f00e fa86 	bl	13e74 <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
    5968:	2e00      	cmp	r6, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    596a:	4620      	mov	r0, r4
}
    596c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    5970:	bf15      	itete	ne
    5972:	2230      	movne	r2, #48	; 0x30
    5974:	2212      	moveq	r2, #18
    5976:	2160      	movne	r1, #96	; 0x60
    5978:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    597c:	f7ff bd98 	b.w	54b0 <start_le_scan_legacy>
	return set_le_scan_enable_legacy(enable);
    5980:	4618      	mov	r0, r3
    5982:	f7ff fd59 	bl	5438 <set_le_scan_enable_legacy>
		if (err) {
    5986:	2800      	cmp	r0, #0
    5988:	d0d8      	beq.n	593c <bt_le_scan_update+0x20>
}
    598a:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_unref(conn);
    598c:	f00e fa72 	bl	13e74 <bt_conn_unref>
    5990:	e7cd      	b.n	592e <bt_le_scan_update+0x12>
    5992:	bf00      	nop
    5994:	20000098 	.word	0x20000098

00005998 <hci_disconn_complete>:
{
    5998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    599a:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    599c:	7835      	ldrb	r5, [r6, #0]
    599e:	bb3d      	cbnz	r5, 59f0 <hci_disconn_complete+0x58>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    59a0:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    59a4:	4638      	mov	r0, r7
    59a6:	f001 fd39 	bl	741c <bt_conn_lookup_handle>
	if (!conn) {
    59aa:	4604      	mov	r4, r0
    59ac:	b930      	cbnz	r0, 59bc <hci_disconn_complete+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
    59ae:	463a      	mov	r2, r7
}
    59b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    59b4:	2145      	movs	r1, #69	; 0x45
    59b6:	480f      	ldr	r0, [pc, #60]	; (59f4 <hci_disconn_complete+0x5c>)
    59b8:	f00c bba6 	b.w	12108 <printk>
	conn->err = evt->reason;
    59bc:	78f3      	ldrb	r3, [r6, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    59be:	4629      	mov	r1, r5
	conn->err = evt->reason;
    59c0:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    59c2:	f001 fc3f 	bl	7244 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    59c6:	78a1      	ldrb	r1, [r4, #2]
	conn->handle = 0U;
    59c8:	8025      	strh	r5, [r4, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    59ca:	2901      	cmp	r1, #1
    59cc:	d004      	beq.n	59d8 <hci_disconn_complete+0x40>
	bt_conn_unref(conn);
    59ce:	4620      	mov	r0, r4
}
    59d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    59d4:	f00e ba4e 	b.w	13e74 <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    59d8:	1d20      	adds	r0, r4, #4
    59da:	f00d ff97 	bl	1390c <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    59de:	07c3      	lsls	r3, r0, #31
    59e0:	d5f5      	bpl.n	59ce <hci_disconn_complete+0x36>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    59e2:	4620      	mov	r0, r4
    59e4:	f001 fc2e 	bl	7244 <bt_conn_set_state>
		bt_le_scan_update(false);
    59e8:	4628      	mov	r0, r5
    59ea:	f7ff ff97 	bl	591c <bt_le_scan_update>
    59ee:	e7ee      	b.n	59ce <hci_disconn_complete+0x36>
}
    59f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    59f2:	bf00      	nop
    59f4:	00019302 	.word	0x00019302

000059f8 <le_adv_report>:
{
    59f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t num_reports = net_buf_pull_u8(buf);
    59fc:	f100 0708 	add.w	r7, r0, #8
{
    5a00:	b08f      	sub	sp, #60	; 0x3c
    5a02:	4604      	mov	r4, r0
	u8_t num_reports = net_buf_pull_u8(buf);
    5a04:	4638      	mov	r0, r7
    5a06:	f00f fed5 	bl	157b4 <net_buf_simple_pull_u8>
    5a0a:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 5bd8 <le_adv_report+0x1e0>
	if (scan_dev_found_cb) {
    5a0e:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 5bdc <le_adv_report+0x1e4>
	u8_t num_reports = net_buf_pull_u8(buf);
    5a12:	9002      	str	r0, [sp, #8]
	while (num_reports--) {
    5a14:	9b02      	ldr	r3, [sp, #8]
    5a16:	b133      	cbz	r3, 5a26 <le_adv_report+0x2e>
		if (buf->len < sizeof(*evt)) {
    5a18:	89a3      	ldrh	r3, [r4, #12]
    5a1a:	2b08      	cmp	r3, #8
    5a1c:	d806      	bhi.n	5a2c <le_adv_report+0x34>
			BT_ERR("Unexpected end of buffer");
    5a1e:	2145      	movs	r1, #69	; 0x45
    5a20:	486a      	ldr	r0, [pc, #424]	; (5bcc <le_adv_report+0x1d4>)
    5a22:	f00c fb71 	bl	12108 <printk>
}
    5a26:	b00f      	add	sp, #60	; 0x3c
    5a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		evt = net_buf_pull_mem(buf, sizeof(*evt));
    5a2c:	2109      	movs	r1, #9
    5a2e:	4638      	mov	r0, r7
    5a30:	f007 feac 	bl	d78c <net_buf_simple_pull_mem>
		adv_info.rssi = evt->data[evt->length];
    5a34:	7a03      	ldrb	r3, [r0, #8]
		evt = net_buf_pull_mem(buf, sizeof(*evt));
    5a36:	4606      	mov	r6, r0
		adv_info.rssi = evt->data[evt->length];
    5a38:	9301      	str	r3, [sp, #4]
    5a3a:	18c3      	adds	r3, r0, r3
    5a3c:	7a5b      	ldrb	r3, [r3, #9]
		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);
    5a3e:	f100 0a01 	add.w	sl, r0, #1
		adv_info.rssi = evt->data[evt->length];
    5a42:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    5a46:	2301      	movs	r3, #1
    5a48:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    5a4c:	237f      	movs	r3, #127	; 0x7f
    5a4e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
		adv_info.sid = BT_GAP_SID_INVALID;
    5a52:	23ff      	movs	r3, #255	; 0xff
    5a54:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		adv_info.adv_type = evt->evt_type;
    5a58:	7803      	ldrb	r3, [r0, #0]
    5a5a:	4648      	mov	r0, r9
    5a5c:	2b04      	cmp	r3, #4
    5a5e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    5a62:	bf8e      	itee	hi
    5a64:	2300      	movhi	r3, #0
    5a66:	4a5a      	ldrls	r2, [pc, #360]	; (5bd0 <le_adv_report+0x1d8>)
    5a68:	5cd3      	ldrbls	r3, [r2, r3]
		adv_info.adv_props = get_adv_props(evt->evt_type);
    5a6a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    5a6e:	f00d ff4d 	bl	1390c <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    5a72:	0645      	lsls	r5, r0, #25
    5a74:	d50d      	bpl.n	5a92 <le_adv_report+0x9a>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    5a76:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    5a7a:	0758      	lsls	r0, r3, #29
    5a7c:	d509      	bpl.n	5a92 <le_adv_report+0x9a>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    5a7e:	7a31      	ldrb	r1, [r6, #8]
    5a80:	4638      	mov	r0, r7
    5a82:	3101      	adds	r1, #1
    5a84:	f007 fe62 	bl	d74c <net_buf_simple_pull>
    5a88:	9b02      	ldr	r3, [sp, #8]
    5a8a:	1e58      	subs	r0, r3, #1
    5a8c:	b2c3      	uxtb	r3, r0
    5a8e:	9302      	str	r3, [sp, #8]
    5a90:	e7c0      	b.n	5a14 <le_adv_report+0x1c>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    5a92:	7873      	ldrb	r3, [r6, #1]
    5a94:	f10d 081c 	add.w	r8, sp, #28
    5a98:	1e9a      	subs	r2, r3, #2
    5a9a:	2a01      	cmp	r2, #1
    5a9c:	d853      	bhi.n	5b46 <le_adv_report+0x14e>
		bt_addr_le_copy(&id_addr, addr);
    5a9e:	4651      	mov	r1, sl
    5aa0:	4640      	mov	r0, r8
    5aa2:	f00d ff36 	bl	13912 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    5aa6:	f89d 301c 	ldrb.w	r3, [sp, #28]
    5aaa:	3b02      	subs	r3, #2
    5aac:	f88d 301c 	strb.w	r3, [sp, #28]
	if (scan_dev_found_cb) {
    5ab0:	f8db 3000 	ldr.w	r3, [fp]
	info->addr = &id_addr;
    5ab4:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	if (scan_dev_found_cb) {
    5ab8:	b1bb      	cbz	r3, 5aea <le_adv_report+0xf2>
	state->offset = net_buf_simple_headroom(buf);
    5aba:	4638      	mov	r0, r7
    5abc:	f00f fe8a 	bl	157d4 <net_buf_simple_headroom>
	state->len = buf->len;
    5ac0:	89a3      	ldrh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    5ac2:	9003      	str	r0, [sp, #12]
	state->len = buf->len;
    5ac4:	9304      	str	r3, [sp, #16]
		buf->len = len;
    5ac6:	9b01      	ldr	r3, [sp, #4]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    5ac8:	4640      	mov	r0, r8
		buf->len = len;
    5aca:	81a3      	strh	r3, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    5acc:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
    5ad0:	463b      	mov	r3, r7
    5ad2:	f99d 1031 	ldrsb.w	r1, [sp, #49]	; 0x31
    5ad6:	f8db 5000 	ldr.w	r5, [fp]
    5ada:	47a8      	blx	r5
	buf->data = buf->__buf + state->offset;
    5adc:	9b03      	ldr	r3, [sp, #12]
    5ade:	6920      	ldr	r0, [r4, #16]
    5ae0:	fa10 f083 	uxtah	r0, r0, r3
	buf->len = state->len;
    5ae4:	9b04      	ldr	r3, [sp, #16]
	buf->data = buf->__buf + state->offset;
    5ae6:	60a0      	str	r0, [r4, #8]
	buf->len = state->len;
    5ae8:	81a3      	strh	r3, [r4, #12]
	SYS_SLIST_FOR_EACH_CONTAINER(&scan_cbs, listener, node) {
    5aea:	4b3a      	ldr	r3, [pc, #232]	; (5bd4 <le_adv_report+0x1dc>)
    5aec:	681d      	ldr	r5, [r3, #0]
    5aee:	2d00      	cmp	r5, #0
    5af0:	d13a      	bne.n	5b68 <le_adv_report+0x170>
    5af2:	4648      	mov	r0, r9
	check_pending_conn(&id_addr, addr, info->adv_props);
    5af4:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    5af8:	f00d ff08 	bl	1390c <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    5afc:	0641      	lsls	r1, r0, #25
    5afe:	f3c0 1580 	ubfx	r5, r0, #6, #1
    5b02:	d4bc      	bmi.n	5a7e <le_adv_report+0x86>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
    5b04:	07da      	lsls	r2, r3, #31
    5b06:	d5ba      	bpl.n	5a7e <le_adv_report+0x86>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
    5b08:	4641      	mov	r1, r8
    5b0a:	2201      	movs	r2, #1
    5b0c:	4628      	mov	r0, r5
    5b0e:	f001 fcd7 	bl	74c0 <bt_conn_lookup_state_le>
	if (!conn) {
    5b12:	4680      	mov	r8, r0
    5b14:	2800      	cmp	r0, #0
    5b16:	d0b2      	beq.n	5a7e <le_adv_report+0x86>
    5b18:	4648      	mov	r0, r9
    5b1a:	f00d fef7 	bl	1390c <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    5b1e:	0683      	lsls	r3, r0, #26
    5b20:	d440      	bmi.n	5ba4 <le_adv_report+0x1ac>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    5b22:	f108 008a 	add.w	r0, r8, #138	; 0x8a
    5b26:	4651      	mov	r1, sl
    5b28:	f00d fef3 	bl	13912 <bt_addr_le_copy>
	return bt_le_create_conn_legacy(conn);
    5b2c:	4640      	mov	r0, r8
    5b2e:	f7ff fd0d 	bl	554c <bt_le_create_conn_legacy>
	if (bt_le_create_conn(conn)) {
    5b32:	2800      	cmp	r0, #0
    5b34:	d13b      	bne.n	5bae <le_adv_report+0x1b6>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    5b36:	4640      	mov	r0, r8
    5b38:	2105      	movs	r1, #5
    5b3a:	f001 fb83 	bl	7244 <bt_conn_set_state>
	bt_conn_unref(conn);
    5b3e:	4640      	mov	r0, r8
    5b40:	f00e f998 	bl	13e74 <bt_conn_unref>
	return;
    5b44:	e79b      	b.n	5a7e <le_adv_report+0x86>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    5b46:	2bff      	cmp	r3, #255	; 0xff
    5b48:	d108      	bne.n	5b5c <le_adv_report+0x164>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    5b4a:	2300      	movs	r3, #0
    5b4c:	a909      	add	r1, sp, #36	; 0x24
    5b4e:	9309      	str	r3, [sp, #36]	; 0x24
    5b50:	f8cd 3027 	str.w	r3, [sp, #39]	; 0x27
		bt_addr_le_copy(&id_addr,
    5b54:	4640      	mov	r0, r8
    5b56:	f00d fedc 	bl	13912 <bt_addr_le_copy>
    5b5a:	e7a9      	b.n	5ab0 <le_adv_report+0xb8>
    5b5c:	4651      	mov	r1, sl
    5b5e:	2000      	movs	r0, #0
    5b60:	f00d ff9e 	bl	13aa0 <bt_lookup_id_addr>
    5b64:	4601      	mov	r1, r0
    5b66:	e7f5      	b.n	5b54 <le_adv_report+0x15c>
	SYS_SLIST_FOR_EACH_CONTAINER(&scan_cbs, listener, node) {
    5b68:	3d08      	subs	r5, #8
    5b6a:	2d00      	cmp	r5, #0
    5b6c:	d0c1      	beq.n	5af2 <le_adv_report+0xfa>
	state->offset = net_buf_simple_headroom(buf);
    5b6e:	4638      	mov	r0, r7
    5b70:	f00f fe30 	bl	157d4 <net_buf_simple_headroom>
	state->len = buf->len;
    5b74:	89a3      	ldrh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    5b76:	9003      	str	r0, [sp, #12]
	state->len = buf->len;
    5b78:	9304      	str	r3, [sp, #16]
		buf->len = len;
    5b7a:	9b01      	ldr	r3, [sp, #4]
		listener->recv(info, &buf->b);
    5b7c:	a80b      	add	r0, sp, #44	; 0x2c
		buf->len = len;
    5b7e:	81a3      	strh	r3, [r4, #12]
		listener->recv(info, &buf->b);
    5b80:	462b      	mov	r3, r5
    5b82:	f853 2b08 	ldr.w	r2, [r3], #8
    5b86:	4639      	mov	r1, r7
    5b88:	9305      	str	r3, [sp, #20]
    5b8a:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
    5b8c:	9b03      	ldr	r3, [sp, #12]
    5b8e:	6920      	ldr	r0, [r4, #16]
    5b90:	fa10 f083 	uxtah	r0, r0, r3
	buf->len = state->len;
    5b94:	9b04      	ldr	r3, [sp, #16]
	buf->data = buf->__buf + state->offset;
    5b96:	60a0      	str	r0, [r4, #8]
	buf->len = state->len;
    5b98:	81a3      	strh	r3, [r4, #12]
Z_GENLIST_PEEK_NEXT(slist, snode)
    5b9a:	9b05      	ldr	r3, [sp, #20]
    5b9c:	2b00      	cmp	r3, #0
    5b9e:	d0a8      	beq.n	5af2 <le_adv_report+0xfa>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    5ba0:	68ad      	ldr	r5, [r5, #8]
	return node->next;
    5ba2:	e7a4      	b.n	5aee <le_adv_report+0xf6>
	return set_le_scan_enable_legacy(enable);
    5ba4:	4628      	mov	r0, r5
    5ba6:	f7ff fc47 	bl	5438 <set_le_scan_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    5baa:	2800      	cmp	r0, #0
    5bac:	d0b9      	beq.n	5b22 <le_adv_report+0x12a>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    5bae:	231f      	movs	r3, #31
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5bb0:	2100      	movs	r1, #0
    5bb2:	4640      	mov	r0, r8
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    5bb4:	f888 300c 	strb.w	r3, [r8, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5bb8:	f001 fb44 	bl	7244 <bt_conn_set_state>
	bt_conn_unref(conn);
    5bbc:	4640      	mov	r0, r8
    5bbe:	f00e f959 	bl	13e74 <bt_conn_unref>
	bt_le_scan_update(false);
    5bc2:	2000      	movs	r0, #0
    5bc4:	f7ff feaa 	bl	591c <bt_le_scan_update>
    5bc8:	e759      	b.n	5a7e <le_adv_report+0x86>
    5bca:	bf00      	nop
    5bcc:	000196c9 	.word	0x000196c9
    5bd0:	00019c1d 	.word	0x00019c1d
    5bd4:	20000ca4 	.word	0x20000ca4
    5bd8:	20000098 	.word	0x20000098
    5bdc:	20000cac 	.word	0x20000cac

00005be0 <bt_data_parse>:
{
    5be0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5be2:	4604      	mov	r4, r0
    5be4:	460e      	mov	r6, r1
    5be6:	4617      	mov	r7, r2
	while (ad->len > 1) {
    5be8:	88a3      	ldrh	r3, [r4, #4]
    5bea:	2b01      	cmp	r3, #1
    5bec:	d90c      	bls.n	5c08 <bt_data_parse+0x28>
		len = net_buf_simple_pull_u8(ad);
    5bee:	4620      	mov	r0, r4
    5bf0:	f00f fde0 	bl	157b4 <net_buf_simple_pull_u8>
		if (len == 0U) {
    5bf4:	4605      	mov	r5, r0
    5bf6:	b138      	cbz	r0, 5c08 <bt_data_parse+0x28>
		if (len > ad->len) {
    5bf8:	88a2      	ldrh	r2, [r4, #4]
    5bfa:	b283      	uxth	r3, r0
    5bfc:	429a      	cmp	r2, r3
    5bfe:	d205      	bcs.n	5c0c <bt_data_parse+0x2c>
			BT_WARN("Malformed data");
    5c00:	2157      	movs	r1, #87	; 0x57
    5c02:	480c      	ldr	r0, [pc, #48]	; (5c34 <bt_data_parse+0x54>)
    5c04:	f00c fa80 	bl	12108 <printk>
}
    5c08:	b003      	add	sp, #12
    5c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data.type = net_buf_simple_pull_u8(ad);
    5c0c:	4620      	mov	r0, r4
    5c0e:	f00f fdd1 	bl	157b4 <net_buf_simple_pull_u8>
		data.data = ad->data;
    5c12:	6823      	ldr	r3, [r4, #0]
		data.type = net_buf_simple_pull_u8(ad);
    5c14:	f88d 0000 	strb.w	r0, [sp]
		data.data_len = len - 1;
    5c18:	3d01      	subs	r5, #1
		if (!func(&data, user_data)) {
    5c1a:	4639      	mov	r1, r7
    5c1c:	4668      	mov	r0, sp
		data.data_len = len - 1;
    5c1e:	f88d 5001 	strb.w	r5, [sp, #1]
		data.data = ad->data;
    5c22:	9301      	str	r3, [sp, #4]
		if (!func(&data, user_data)) {
    5c24:	47b0      	blx	r6
    5c26:	2800      	cmp	r0, #0
    5c28:	d0ee      	beq.n	5c08 <bt_data_parse+0x28>
		net_buf_simple_pull(ad, len - 1);
    5c2a:	4629      	mov	r1, r5
    5c2c:	4620      	mov	r0, r4
    5c2e:	f007 fd8d 	bl	d74c <net_buf_simple_pull>
    5c32:	e7d9      	b.n	5be8 <bt_data_parse+0x8>
    5c34:	000196e7 	.word	0x000196e7

00005c38 <id_create.isra.0>:

static void id_create(u8_t id, bt_addr_le_t *addr, u8_t *irk)
    5c38:	b530      	push	{r4, r5, lr}
    5c3a:	4d17      	ldr	r5, [pc, #92]	; (5c98 <id_create.isra.0+0x60>)
    5c3c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    5c40:	460c      	mov	r4, r1
static void id_create(u8_t id, bt_addr_le_t *addr, u8_t *irk)
    5c42:	b085      	sub	sp, #20
    5c44:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    5c46:	b1b1      	cbz	r1, 5c76 <id_create.isra.0+0x3e>
    5c48:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    5c4a:	2207      	movs	r2, #7
    5c4c:	4620      	mov	r0, r4
    5c4e:	a902      	add	r1, sp, #8
    5c50:	9302      	str	r3, [sp, #8]
    5c52:	f8cd 300b 	str.w	r3, [sp, #11]
    5c56:	f00d fd5c 	bl	13712 <memcmp>
    5c5a:	b160      	cbz	r0, 5c76 <id_create.isra.0+0x3e>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    5c5c:	4621      	mov	r1, r4
    5c5e:	4628      	mov	r0, r5
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    5c60:	f00d fe57 	bl	13912 <bt_addr_le_copy>
    5c64:	480d      	ldr	r0, [pc, #52]	; (5c9c <id_create.isra.0+0x64>)
    5c66:	f00d fe51 	bl	1390c <atomic_get>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    5c6a:	0783      	lsls	r3, r0, #30
    5c6c:	d501      	bpl.n	5c72 <id_create.isra.0+0x3a>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
    5c6e:	f7fe feb9 	bl	49e4 <bt_settings_save_id>
	}
}
    5c72:	b005      	add	sp, #20
    5c74:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
    5c76:	4668      	mov	r0, sp
    5c78:	f00d ff4e 	bl	13b18 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    5c7c:	4668      	mov	r0, sp
    5c7e:	f7ff f925 	bl	4ecc <id_find>
    5c82:	2800      	cmp	r0, #0
    5c84:	daf7      	bge.n	5c76 <id_create.isra.0+0x3e>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    5c86:	4669      	mov	r1, sp
    5c88:	4628      	mov	r0, r5
    5c8a:	f00d fe42 	bl	13912 <bt_addr_le_copy>
		if (addr) {
    5c8e:	2c00      	cmp	r4, #0
    5c90:	d0e8      	beq.n	5c64 <id_create.isra.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    5c92:	4629      	mov	r1, r5
    5c94:	4620      	mov	r0, r4
    5c96:	e7e3      	b.n	5c60 <id_create.isra.0+0x28>
    5c98:	20000000 	.word	0x20000000
    5c9c:	20000098 	.word	0x20000098

00005ca0 <bt_send>:
	return bt_dev.drv->send(buf);
    5ca0:	4b02      	ldr	r3, [pc, #8]	; (5cac <bt_send+0xc>)
    5ca2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    5ca6:	691b      	ldr	r3, [r3, #16]
    5ca8:	4718      	bx	r3
    5caa:	bf00      	nop
    5cac:	20000000 	.word	0x20000000

00005cb0 <bt_hci_cmd_send>:
{
    5cb0:	b538      	push	{r3, r4, r5, lr}
    5cb2:	4605      	mov	r5, r0
	if (!buf) {
    5cb4:	460c      	mov	r4, r1
    5cb6:	b919      	cbnz	r1, 5cc0 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    5cb8:	f7ff fa78 	bl	51ac <bt_hci_cmd_create>
		if (!buf) {
    5cbc:	4604      	mov	r4, r0
    5cbe:	b1c0      	cbz	r0, 5cf2 <bt_hci_cmd_send+0x42>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    5cc0:	f640 4335 	movw	r3, #3125	; 0xc35
    5cc4:	429d      	cmp	r5, r3
    5cc6:	d10e      	bne.n	5ce6 <bt_hci_cmd_send+0x36>
		err = bt_send(buf);
    5cc8:	4620      	mov	r0, r4
    5cca:	f7ff ffe9 	bl	5ca0 <bt_send>
		if (err) {
    5cce:	4605      	mov	r5, r0
    5cd0:	b138      	cbz	r0, 5ce2 <bt_hci_cmd_send+0x32>
			BT_ERR("Unable to send to driver (err %d)", err);
    5cd2:	4602      	mov	r2, r0
    5cd4:	2145      	movs	r1, #69	; 0x45
    5cd6:	4808      	ldr	r0, [pc, #32]	; (5cf8 <bt_hci_cmd_send+0x48>)
    5cd8:	f00c fa16 	bl	12108 <printk>
			net_buf_unref(buf);
    5cdc:	4620      	mov	r0, r4
    5cde:	f007 fc05 	bl	d4ec <net_buf_unref>
}
    5ce2:	4628      	mov	r0, r5
    5ce4:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    5ce6:	4621      	mov	r1, r4
    5ce8:	4804      	ldr	r0, [pc, #16]	; (5cfc <bt_hci_cmd_send+0x4c>)
    5cea:	f007 fbcb 	bl	d484 <net_buf_put>
	return 0;
    5cee:	2500      	movs	r5, #0
    5cf0:	e7f7      	b.n	5ce2 <bt_hci_cmd_send+0x32>
			return -ENOBUFS;
    5cf2:	f06f 0536 	mvn.w	r5, #54	; 0x36
    5cf6:	e7f4      	b.n	5ce2 <bt_hci_cmd_send+0x32>
    5cf8:	000196fb 	.word	0x000196fb
    5cfc:	20000108 	.word	0x20000108

00005d00 <report_completed_packet>:
{
    5d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5d02:	4604      	mov	r4, r0
	u16_t handle = acl(buf)->handle;
    5d04:	8ac6      	ldrh	r6, [r0, #22]
 *
 * @param buf Buffer to destroy.
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    5d06:	7980      	ldrb	r0, [r0, #6]
    5d08:	f007 fa50 	bl	d1ac <net_buf_pool_get>

	k_lifo_put(&pool->free, buf);
    5d0c:	4621      	mov	r1, r4
    5d0e:	f010 fd41 	bl	16794 <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    5d12:	4b22      	ldr	r3, [pc, #136]	; (5d9c <report_completed_packet+0x9c>)
    5d14:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
    5d18:	069b      	lsls	r3, r3, #26
    5d1a:	d53e      	bpl.n	5d9a <report_completed_packet+0x9a>
	conn = bt_conn_lookup_index(acl(buf)->index);
    5d1c:	7d60      	ldrb	r0, [r4, #21]
    5d1e:	f001 fea3 	bl	7a68 <bt_conn_lookup_index>
	if (!conn) {
    5d22:	4605      	mov	r5, r0
    5d24:	b930      	cbnz	r0, 5d34 <report_completed_packet+0x34>
		BT_WARN("Unable to look up conn with index 0x%02x",
    5d26:	7d62      	ldrb	r2, [r4, #21]
    5d28:	2157      	movs	r1, #87	; 0x57
}
    5d2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_WARN("Unable to look up conn with index 0x%02x",
    5d2e:	481c      	ldr	r0, [pc, #112]	; (5da0 <report_completed_packet+0xa0>)
    5d30:	f00c b9ea 	b.w	12108 <printk>
	if (conn->state != BT_CONN_CONNECTED &&
    5d34:	7b43      	ldrb	r3, [r0, #13]
    5d36:	3b06      	subs	r3, #6
    5d38:	2b01      	cmp	r3, #1
    5d3a:	d908      	bls.n	5d4e <report_completed_packet+0x4e>
		BT_WARN("Not reporting packet for non-connected conn");
    5d3c:	4819      	ldr	r0, [pc, #100]	; (5da4 <report_completed_packet+0xa4>)
    5d3e:	2157      	movs	r1, #87	; 0x57
    5d40:	f00c f9e2 	bl	12108 <printk>
		bt_conn_unref(conn);
    5d44:	4628      	mov	r0, r5
}
    5d46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    5d4a:	f00e b893 	b.w	13e74 <bt_conn_unref>
	bt_conn_unref(conn);
    5d4e:	f00e f891 	bl	13e74 <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
    5d52:	2105      	movs	r1, #5
    5d54:	f640 4035 	movw	r0, #3125	; 0xc35
    5d58:	f7ff fa28 	bl	51ac <bt_hci_cmd_create>
	if (!buf) {
    5d5c:	4604      	mov	r4, r0
    5d5e:	b928      	cbnz	r0, 5d6c <report_completed_packet+0x6c>
}
    5d60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to allocate new HCI command");
    5d64:	2145      	movs	r1, #69	; 0x45
    5d66:	4810      	ldr	r0, [pc, #64]	; (5da8 <report_completed_packet+0xa8>)
    5d68:	f00c b9ce 	b.w	12108 <printk>
	cp = net_buf_add(buf, sizeof(*cp));
    5d6c:	f100 0708 	add.w	r7, r0, #8
    5d70:	2101      	movs	r1, #1
    5d72:	4638      	mov	r0, r7
    5d74:	f007 fd2c 	bl	d7d0 <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
    5d78:	2501      	movs	r5, #1
	hc = net_buf_add(buf, sizeof(*hc));
    5d7a:	2104      	movs	r1, #4
	cp->num_handles = sys_cpu_to_le16(1);
    5d7c:	7005      	strb	r5, [r0, #0]
	hc = net_buf_add(buf, sizeof(*hc));
    5d7e:	4638      	mov	r0, r7
    5d80:	f007 fd26 	bl	d7d0 <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
    5d84:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
    5d86:	8006      	strh	r6, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
    5d88:	7085      	strb	r5, [r0, #2]
    5d8a:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    5d8c:	4621      	mov	r1, r4
}
    5d8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    5d92:	f640 4035 	movw	r0, #3125	; 0xc35
    5d96:	f7ff bf8b 	b.w	5cb0 <bt_hci_cmd_send>
}
    5d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5d9c:	20000000 	.word	0x20000000
    5da0:	00019722 	.word	0x00019722
    5da4:	00019750 	.word	0x00019750
    5da8:	00019781 	.word	0x00019781

00005dac <le_ltk_request>:
{
    5dac:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
    5dae:	6884      	ldr	r4, [r0, #8]
{
    5db0:	b087      	sub	sp, #28
	handle = sys_le16_to_cpu(evt->handle);
    5db2:	8826      	ldrh	r6, [r4, #0]
    5db4:	b2b7      	uxth	r7, r6
	conn = bt_conn_lookup_handle(handle);
    5db6:	4638      	mov	r0, r7
    5db8:	f001 fb30 	bl	741c <bt_conn_lookup_handle>
	if (!conn) {
    5dbc:	4605      	mov	r5, r0
    5dbe:	b930      	cbnz	r0, 5dce <le_ltk_request+0x22>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    5dc0:	463a      	mov	r2, r7
    5dc2:	2145      	movs	r1, #69	; 0x45
    5dc4:	481f      	ldr	r0, [pc, #124]	; (5e44 <le_ltk_request+0x98>)
    5dc6:	f00c f99f 	bl	12108 <printk>
}
    5dca:	b007      	add	sp, #28
    5dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
    5dce:	af02      	add	r7, sp, #8
    5dd0:	f8d4 2002 	ldr.w	r2, [r4, #2]
    5dd4:	f8d4 3006 	ldr.w	r3, [r4, #6]
    5dd8:	9701      	str	r7, [sp, #4]
    5dda:	8961      	ldrh	r1, [r4, #10]
    5ddc:	9100      	str	r1, [sp, #0]
    5dde:	f00f fba9 	bl	15534 <bt_smp_request_ltk>
    5de2:	b1f0      	cbz	r0, 5e22 <le_ltk_request+0x76>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    5de4:	2112      	movs	r1, #18
    5de6:	f242 001a 	movw	r0, #8218	; 0x201a
    5dea:	f7ff f9df 	bl	51ac <bt_hci_cmd_create>
	if (!buf) {
    5dee:	4604      	mov	r4, r0
    5df0:	b938      	cbnz	r0, 5e02 <le_ltk_request+0x56>
		BT_ERR("Out of command buffers");
    5df2:	2145      	movs	r1, #69	; 0x45
    5df4:	4814      	ldr	r0, [pc, #80]	; (5e48 <le_ltk_request+0x9c>)
    5df6:	f00c f987 	bl	12108 <printk>
	bt_conn_unref(conn);
    5dfa:	4628      	mov	r0, r5
    5dfc:	f00e f83a 	bl	13e74 <bt_conn_unref>
    5e00:	e7e3      	b.n	5dca <le_ltk_request+0x1e>
	cp = net_buf_add(buf, sizeof(*cp));
    5e02:	2112      	movs	r1, #18
    5e04:	3008      	adds	r0, #8
    5e06:	f007 fce3 	bl	d7d0 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    5e0a:	4639      	mov	r1, r7
    5e0c:	2210      	movs	r2, #16
	cp->handle = sys_cpu_to_le16(handle);
    5e0e:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    5e12:	f00d fc8e 	bl	13732 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    5e16:	4621      	mov	r1, r4
    5e18:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    5e1c:	f7ff ff48 	bl	5cb0 <bt_hci_cmd_send>
    5e20:	e7eb      	b.n	5dfa <le_ltk_request+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    5e22:	2102      	movs	r1, #2
    5e24:	f242 001b 	movw	r0, #8219	; 0x201b
    5e28:	f7ff f9c0 	bl	51ac <bt_hci_cmd_create>
	if (!buf) {
    5e2c:	4604      	mov	r4, r0
    5e2e:	2800      	cmp	r0, #0
    5e30:	d0df      	beq.n	5df2 <le_ltk_request+0x46>
	cp = net_buf_add(buf, sizeof(*cp));
    5e32:	2102      	movs	r1, #2
    5e34:	3008      	adds	r0, #8
    5e36:	f007 fccb 	bl	d7d0 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    5e3a:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
    5e3c:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    5e3e:	f242 001b 	movw	r0, #8219	; 0x201b
    5e42:	e7eb      	b.n	5e1c <le_ltk_request+0x70>
    5e44:	00019285 	.word	0x00019285
    5e48:	000197a9 	.word	0x000197a9

00005e4c <conn_auto_initiate>:
{
    5e4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    5e4e:	7b43      	ldrb	r3, [r0, #13]
{
    5e50:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    5e52:	2b06      	cmp	r3, #6
    5e54:	d11e      	bne.n	5e94 <conn_auto_initiate+0x48>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    5e56:	1d06      	adds	r6, r0, #4
    5e58:	4630      	mov	r0, r6
    5e5a:	f00d fd57 	bl	1390c <atomic_get>
    5e5e:	0480      	lsls	r0, r0, #18
    5e60:	d41a      	bmi.n	5e98 <conn_auto_initiate+0x4c>
    5e62:	78e3      	ldrb	r3, [r4, #3]
    5e64:	b123      	cbz	r3, 5e70 <conn_auto_initiate+0x24>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    5e66:	4b27      	ldr	r3, [pc, #156]	; (5f04 <conn_auto_initiate+0xb8>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    5e68:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
    5e6c:	0719      	lsls	r1, r3, #28
    5e6e:	d513      	bpl.n	5e98 <conn_auto_initiate+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    5e70:	2102      	movs	r1, #2
    5e72:	f242 0016 	movw	r0, #8214	; 0x2016
    5e76:	f7ff f999 	bl	51ac <bt_hci_cmd_create>
	if (!buf) {
    5e7a:	4605      	mov	r5, r0
    5e7c:	b160      	cbz	r0, 5e98 <conn_auto_initiate+0x4c>
	cp = net_buf_add(buf, sizeof(*cp));
    5e7e:	2102      	movs	r1, #2
    5e80:	3008      	adds	r0, #8
    5e82:	f007 fca5 	bl	d7d0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    5e86:	8823      	ldrh	r3, [r4, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    5e88:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(conn->handle);
    5e8a:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    5e8c:	f242 0016 	movw	r0, #8214	; 0x2016
    5e90:	f7ff ff0e 	bl	5cb0 <bt_hci_cmd_send>
}
    5e94:	b002      	add	sp, #8
    5e96:	bd70      	pop	{r4, r5, r6, pc}
    5e98:	4630      	mov	r0, r6
    5e9a:	f00d fd37 	bl	1390c <atomic_get>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    5e9e:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    5ea2:	4d18      	ldr	r5, [pc, #96]	; (5f04 <conn_auto_initiate+0xb8>)
    5ea4:	d113      	bne.n	5ece <conn_auto_initiate+0x82>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    5ea6:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
    5eaa:	07da      	lsls	r2, r3, #31
    5eac:	d50f      	bpl.n	5ece <conn_auto_initiate+0x82>
		err = bt_le_set_phy(conn,
    5eae:	2202      	movs	r2, #2
    5eb0:	4620      	mov	r0, r4
    5eb2:	4611      	mov	r1, r2
    5eb4:	f00d fe75 	bl	13ba2 <bt_le_set_phy>
		if (!err) {
    5eb8:	4602      	mov	r2, r0
    5eba:	b920      	cbnz	r0, 5ec6 <conn_auto_initiate+0x7a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    5ebc:	2180      	movs	r1, #128	; 0x80
    5ebe:	4630      	mov	r0, r6
    5ec0:	f00d fd2a 	bl	13918 <atomic_or>
			return;
    5ec4:	e7e6      	b.n	5e94 <conn_auto_initiate+0x48>
		BT_ERR("Failed to set LE PHY (%d)", err);
    5ec6:	2145      	movs	r1, #69	; 0x45
    5ec8:	480f      	ldr	r0, [pc, #60]	; (5f08 <conn_auto_initiate+0xbc>)
    5eca:	f00c f91d 	bl	12108 <printk>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    5ece:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
    5ed2:	069b      	lsls	r3, r3, #26
    5ed4:	d5de      	bpl.n	5e94 <conn_auto_initiate+0x48>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    5ed6:	f10d 0106 	add.w	r1, sp, #6
    5eda:	a801      	add	r0, sp, #4
    5edc:	f7ff fa1e 	bl	531c <hci_le_read_max_data_len>
		if (!err) {
    5ee0:	2800      	cmp	r0, #0
    5ee2:	d1d7      	bne.n	5e94 <conn_auto_initiate+0x48>
			err = bt_le_set_data_len(conn, tx_octets, tx_time);
    5ee4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    5ee8:	4620      	mov	r0, r4
    5eea:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5eee:	f00d fe3b 	bl	13b68 <bt_le_set_data_len>
			if (err) {
    5ef2:	4602      	mov	r2, r0
    5ef4:	2800      	cmp	r0, #0
    5ef6:	d0cd      	beq.n	5e94 <conn_auto_initiate+0x48>
				BT_ERR("Failed to set data len (%d)", err);
    5ef8:	2145      	movs	r1, #69	; 0x45
    5efa:	4804      	ldr	r0, [pc, #16]	; (5f0c <conn_auto_initiate+0xc0>)
    5efc:	f00c f904 	bl	12108 <printk>
    5f00:	e7c8      	b.n	5e94 <conn_auto_initiate+0x48>
    5f02:	bf00      	nop
    5f04:	20000000 	.word	0x20000000
    5f08:	000197c5 	.word	0x000197c5
    5f0c:	000197e4 	.word	0x000197e4

00005f10 <le_phy_update_complete>:
{
    5f10:	b538      	push	{r3, r4, r5, lr}
	u16_t handle = sys_le16_to_cpu(evt->handle);
    5f12:	6883      	ldr	r3, [r0, #8]
    5f14:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    5f18:	4628      	mov	r0, r5
    5f1a:	f001 fa7f 	bl	741c <bt_conn_lookup_handle>
	if (!conn) {
    5f1e:	4604      	mov	r4, r0
    5f20:	b930      	cbnz	r0, 5f30 <le_phy_update_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    5f22:	462a      	mov	r2, r5
}
    5f24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    5f28:	2145      	movs	r1, #69	; 0x45
    5f2a:	480c      	ldr	r0, [pc, #48]	; (5f5c <le_phy_update_complete+0x4c>)
    5f2c:	f00c b8ec 	b.w	12108 <printk>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    5f30:	1d05      	adds	r5, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5f32:	f06f 0180 	mvn.w	r1, #128	; 0x80
    5f36:	4628      	mov	r0, r5
    5f38:	f00d fd04 	bl	13944 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    5f3c:	0603      	lsls	r3, r0, #24
    5f3e:	d507      	bpl.n	5f50 <le_phy_update_complete+0x40>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    5f40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    5f44:	4628      	mov	r0, r5
    5f46:	f00d fce7 	bl	13918 <atomic_or>
		conn_auto_initiate(conn);
    5f4a:	4620      	mov	r0, r4
    5f4c:	f7ff ff7e 	bl	5e4c <conn_auto_initiate>
	bt_conn_unref(conn);
    5f50:	4620      	mov	r0, r4
}
    5f52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    5f56:	f00d bf8d 	b.w	13e74 <bt_conn_unref>
    5f5a:	bf00      	nop
    5f5c:	00019285 	.word	0x00019285

00005f60 <le_remote_feat_complete>:
{
    5f60:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    5f62:	6885      	ldr	r5, [r0, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    5f64:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    5f68:	4630      	mov	r0, r6
    5f6a:	f001 fa57 	bl	741c <bt_conn_lookup_handle>
	if (!conn) {
    5f6e:	4604      	mov	r4, r0
    5f70:	b930      	cbnz	r0, 5f80 <le_remote_feat_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    5f72:	4632      	mov	r2, r6
}
    5f74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    5f78:	2145      	movs	r1, #69	; 0x45
    5f7a:	480b      	ldr	r0, [pc, #44]	; (5fa8 <le_remote_feat_complete+0x48>)
    5f7c:	f00c b8c4 	b.w	12108 <printk>
	if (!evt->status) {
    5f80:	782b      	ldrb	r3, [r5, #0]
    5f82:	b923      	cbnz	r3, 5f8e <le_remote_feat_complete+0x2e>
		memcpy(conn->le.features, evt->features,
    5f84:	2208      	movs	r2, #8
    5f86:	1ce9      	adds	r1, r5, #3
    5f88:	30a0      	adds	r0, #160	; 0xa0
    5f8a:	f00d fbd2 	bl	13732 <memcpy>
    5f8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    5f92:	1d20      	adds	r0, r4, #4
    5f94:	f00d fcc0 	bl	13918 <atomic_or>
	conn_auto_initiate(conn);
    5f98:	4620      	mov	r0, r4
    5f9a:	f7ff ff57 	bl	5e4c <conn_auto_initiate>
	bt_conn_unref(conn);
    5f9e:	4620      	mov	r0, r4
}
    5fa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    5fa4:	f00d bf66 	b.w	13e74 <bt_conn_unref>
    5fa8:	00019285 	.word	0x00019285

00005fac <enh_conn_complete>:
{
    5fac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	u16_t handle = sys_le16_to_cpu(evt->handle);
    5fb0:	f8b0 7001 	ldrh.w	r7, [r0, #1]
{
    5fb4:	4604      	mov	r4, r0
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5fb6:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
    5fba:	485b      	ldr	r0, [pc, #364]	; (6128 <enh_conn_complete+0x17c>)
    5fbc:	f00d fcc2 	bl	13944 <atomic_and>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    5fc0:	0442      	lsls	r2, r0, #17
	u16_t handle = sys_le16_to_cpu(evt->handle);
    5fc2:	fa1f f887 	uxth.w	r8, r7
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    5fc6:	d504      	bpl.n	5fd2 <enh_conn_complete+0x26>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
    5fc8:	2200      	movs	r2, #0
    5fca:	2002      	movs	r0, #2
    5fcc:	4957      	ldr	r1, [pc, #348]	; (612c <enh_conn_complete+0x180>)
    5fce:	f006 ffb1 	bl	cf34 <bt_keys_foreach>
	if (evt->status) {
    5fd2:	7825      	ldrb	r5, [r4, #0]
    5fd4:	b34d      	cbz	r5, 602a <enh_conn_complete+0x7e>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    5fd6:	2d02      	cmp	r5, #2
    5fd8:	d121      	bne.n	601e <enh_conn_complete+0x72>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    5fda:	2100      	movs	r1, #0
    5fdc:	2205      	movs	r2, #5
    5fde:	4608      	mov	r0, r1
    5fe0:	f001 fa6e 	bl	74c0 <bt_conn_lookup_state_le>
	if (!conn) {
    5fe4:	4604      	mov	r4, r0
    5fe6:	b948      	cbnz	r0, 5ffc <enh_conn_complete+0x50>
		BT_ERR("No pending master connection");
    5fe8:	2145      	movs	r1, #69	; 0x45
    5fea:	4851      	ldr	r0, [pc, #324]	; (6130 <enh_conn_complete+0x184>)
    5fec:	f00c f88c 	bl	12108 <printk>
			bt_le_scan_update(false);
    5ff0:	2000      	movs	r0, #0
    5ff2:	f7ff fc93 	bl	591c <bt_le_scan_update>
}
    5ff6:	b004      	add	sp, #16
    5ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5ffc:	2100      	movs	r1, #0
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
    5ffe:	7305      	strb	r5, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    6000:	f001 f920 	bl	7244 <bt_conn_set_state>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    6004:	1d20      	adds	r0, r4, #4
    6006:	f00d fc81 	bl	1390c <atomic_get>
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    600a:	07c3      	lsls	r3, r0, #31
    600c:	d503      	bpl.n	6016 <enh_conn_complete+0x6a>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    600e:	2101      	movs	r1, #1
    6010:	4620      	mov	r0, r4
    6012:	f001 f917 	bl	7244 <bt_conn_set_state>
	bt_conn_unref(conn);
    6016:	4620      	mov	r0, r4
    6018:	f00d ff2c 	bl	13e74 <bt_conn_unref>
    601c:	e7e8      	b.n	5ff0 <enh_conn_complete+0x44>
		BT_WARN("Unexpected status 0x%02x", evt->status);
    601e:	462a      	mov	r2, r5
    6020:	2157      	movs	r1, #87	; 0x57
    6022:	4844      	ldr	r0, [pc, #272]	; (6134 <enh_conn_complete+0x188>)
    6024:	f00c f870 	bl	12108 <printk>
		return;
    6028:	e7e5      	b.n	5ff6 <enh_conn_complete+0x4a>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    602a:	7923      	ldrb	r3, [r4, #4]
    602c:	1d26      	adds	r6, r4, #4
    602e:	3b02      	subs	r3, #2
    6030:	2b01      	cmp	r3, #1
    6032:	d82b      	bhi.n	608c <enh_conn_complete+0xe0>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    6034:	4631      	mov	r1, r6
    6036:	a802      	add	r0, sp, #8
    6038:	f00d fc6b 	bl	13912 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    603c:	f89d 3008 	ldrb.w	r3, [sp, #8]
	memcpy(dst, src, sizeof(*dst));
    6040:	2206      	movs	r2, #6
    6042:	3b02      	subs	r3, #2
    6044:	f104 0111 	add.w	r1, r4, #17
    6048:	f10d 0001 	add.w	r0, sp, #1
    604c:	f88d 3008 	strb.w	r3, [sp, #8]
    6050:	f00d fb6f 	bl	13732 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    6054:	2301      	movs	r3, #1
    6056:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_MASTER) {
    605a:	78e0      	ldrb	r0, [r4, #3]
    605c:	b960      	cbnz	r0, 6078 <enh_conn_complete+0xcc>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    605e:	2205      	movs	r2, #5
    6060:	a902      	add	r1, sp, #8
    6062:	f001 fa2d 	bl	74c0 <bt_conn_lookup_state_le>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    6066:	78e3      	ldrb	r3, [r4, #3]
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    6068:	4605      	mov	r5, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    606a:	b923      	cbnz	r3, 6076 <enh_conn_complete+0xca>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    606c:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    6070:	482d      	ldr	r0, [pc, #180]	; (6128 <enh_conn_complete+0x17c>)
    6072:	f00d fc67 	bl	13944 <atomic_and>
	if (!conn) {
    6076:	b9e5      	cbnz	r5, 60b2 <enh_conn_complete+0x106>
		BT_ERR("Unable to add new conn for handle %u", handle);
    6078:	4642      	mov	r2, r8
    607a:	2145      	movs	r1, #69	; 0x45
    607c:	482e      	ldr	r0, [pc, #184]	; (6138 <enh_conn_complete+0x18c>)
    607e:	f00c f843 	bl	12108 <printk>
		bt_hci_disconnect(handle, BT_HCI_ERR_MEM_CAPACITY_EXCEEDED);
    6082:	2107      	movs	r1, #7
    6084:	4640      	mov	r0, r8
    6086:	f00d fd55 	bl	13b34 <bt_hci_disconnect>
		return;
    608a:	e7b4      	b.n	5ff6 <enh_conn_complete+0x4a>
		u8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
    608c:	78e3      	ldrb	r3, [r4, #3]
		bt_addr_le_copy(&id_addr,
    608e:	4631      	mov	r1, r6
		u8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
    6090:	2b01      	cmp	r3, #1
    6092:	bf04      	itt	eq
    6094:	4b29      	ldreq	r3, [pc, #164]	; (613c <enh_conn_complete+0x190>)
    6096:	f893 5037 	ldrbeq.w	r5, [r3, #55]	; 0x37
		bt_addr_le_copy(&id_addr,
    609a:	4628      	mov	r0, r5
    609c:	f00d fd00 	bl	13aa0 <bt_lookup_id_addr>
    60a0:	4601      	mov	r1, r0
    60a2:	a802      	add	r0, sp, #8
    60a4:	f00d fc35 	bl	13912 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    60a8:	4631      	mov	r1, r6
    60aa:	4668      	mov	r0, sp
    60ac:	f00d fc31 	bl	13912 <bt_addr_le_copy>
    60b0:	e7d3      	b.n	605a <enh_conn_complete+0xae>
	conn->handle = handle;
    60b2:	4628      	mov	r0, r5
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    60b4:	a902      	add	r1, sp, #8
	conn->handle = handle;
    60b6:	f820 7b7c 	strh.w	r7, [r0], #124
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    60ba:	f00d fc2a 	bl	13912 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    60be:	7e22      	ldrb	r2, [r4, #24]
    60c0:	7de3      	ldrb	r3, [r4, #23]
    60c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    60c6:	f8a5 3092 	strh.w	r3, [r5, #146]	; 0x92
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    60ca:	7ea2      	ldrb	r2, [r4, #26]
    60cc:	7e63      	ldrb	r3, [r4, #25]
    60ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    60d2:	f8a5 3098 	strh.w	r3, [r5, #152]	; 0x98
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    60d6:	7f22      	ldrb	r2, [r4, #28]
    60d8:	7ee3      	ldrb	r3, [r4, #27]
    60da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->err = 0U;
    60de:	2200      	movs	r2, #0
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    60e0:	f8a5 309a 	strh.w	r3, [r5, #154]	; 0x9a
	conn->role = evt->role;
    60e4:	78e3      	ldrb	r3, [r4, #3]
	conn->err = 0U;
    60e6:	732a      	strb	r2, [r5, #12]
	conn->role = evt->role;
    60e8:	70eb      	strb	r3, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    60ea:	b96b      	cbnz	r3, 6108 <enh_conn_complete+0x15c>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
    60ec:	4669      	mov	r1, sp
    60ee:	f105 008a 	add.w	r0, r5, #138	; 0x8a
    60f2:	f00d fc0e 	bl	13912 <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
    60f6:	7a29      	ldrb	r1, [r5, #8]
			bt_addr_le_copy(&conn->le.init_addr,
    60f8:	4b10      	ldr	r3, [pc, #64]	; (613c <enh_conn_complete+0x190>)
					&bt_dev.id_addr[conn->id]);
    60fa:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
    60fe:	4419      	add	r1, r3
    6100:	f105 0083 	add.w	r0, r5, #131	; 0x83
    6104:	f00d fc05 	bl	13912 <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    6108:	2106      	movs	r1, #6
    610a:	4628      	mov	r0, r5
    610c:	f001 f89a 	bl	7244 <bt_conn_set_state>
	conn_auto_initiate(conn);
    6110:	4628      	mov	r0, r5
    6112:	f7ff fe9b 	bl	5e4c <conn_auto_initiate>
	bt_conn_unref(conn);
    6116:	4628      	mov	r0, r5
    6118:	f00d feac 	bl	13e74 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    611c:	78eb      	ldrb	r3, [r5, #3]
    611e:	2b00      	cmp	r3, #0
    6120:	f47f af69 	bne.w	5ff6 <enh_conn_complete+0x4a>
    6124:	e764      	b.n	5ff0 <enh_conn_complete+0x44>
    6126:	bf00      	nop
    6128:	20000098 	.word	0x20000098
    612c:	00013af9 	.word	0x00013af9
    6130:	00019805 	.word	0x00019805
    6134:	00019827 	.word	0x00019827
    6138:	00019845 	.word	0x00019845
    613c:	20000000 	.word	0x20000000

00006140 <le_conn_param_neg_reply>:
{
    6140:	b570      	push	{r4, r5, r6, lr}
    6142:	4606      	mov	r6, r0
    6144:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    6146:	f242 0021 	movw	r0, #8225	; 0x2021
    614a:	2103      	movs	r1, #3
    614c:	f7ff f82e 	bl	51ac <bt_hci_cmd_create>
	if (!buf) {
    6150:	4604      	mov	r4, r0
    6152:	b928      	cbnz	r0, 6160 <le_conn_param_neg_reply+0x20>
}
    6154:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    6158:	2145      	movs	r1, #69	; 0x45
    615a:	4808      	ldr	r0, [pc, #32]	; (617c <le_conn_param_neg_reply+0x3c>)
    615c:	f00b bfd4 	b.w	12108 <printk>
	cp = net_buf_add(buf, sizeof(*cp));
    6160:	2103      	movs	r1, #3
    6162:	3008      	adds	r0, #8
    6164:	f007 fb34 	bl	d7d0 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    6168:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    616a:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    616c:	4621      	mov	r1, r4
}
    616e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    6172:	f242 0021 	movw	r0, #8225	; 0x2021
    6176:	f7ff bd9b 	b.w	5cb0 <bt_hci_cmd_send>
    617a:	bf00      	nop
    617c:	0001986f 	.word	0x0001986f

00006180 <le_conn_param_req>:
{
    6180:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    6182:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    6184:	78d9      	ldrb	r1, [r3, #3]
    6186:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    6188:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    618a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    618e:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    6192:	7959      	ldrb	r1, [r3, #5]
    6194:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
    6196:	b2bc      	uxth	r4, r7
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    6198:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    619c:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    61a0:	799a      	ldrb	r2, [r3, #6]
    61a2:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
    61a4:	4620      	mov	r0, r4
	param.latency = sys_le16_to_cpu(evt->latency);
    61a6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    61aa:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    61ae:	7a1a      	ldrb	r2, [r3, #8]
    61b0:	7a5b      	ldrb	r3, [r3, #9]
    61b2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    61b6:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    61ba:	f001 f92f 	bl	741c <bt_conn_lookup_handle>
	if (!conn) {
    61be:	4606      	mov	r6, r0
    61c0:	b950      	cbnz	r0, 61d8 <le_conn_param_req+0x58>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    61c2:	2145      	movs	r1, #69	; 0x45
    61c4:	481c      	ldr	r0, [pc, #112]	; (6238 <le_conn_param_req+0xb8>)
    61c6:	4622      	mov	r2, r4
    61c8:	f00b ff9e 	bl	12108 <printk>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    61cc:	2102      	movs	r1, #2
    61ce:	4620      	mov	r0, r4
    61d0:	f7ff ffb6 	bl	6140 <le_conn_param_neg_reply>
}
    61d4:	b003      	add	sp, #12
    61d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    61d8:	4669      	mov	r1, sp
    61da:	f000 fea3 	bl	6f24 <le_param_req>
    61de:	b938      	cbnz	r0, 61f0 <le_conn_param_req+0x70>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    61e0:	211e      	movs	r1, #30
    61e2:	4620      	mov	r0, r4
    61e4:	f7ff ffac 	bl	6140 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    61e8:	4630      	mov	r0, r6
    61ea:	f00d fe43 	bl	13e74 <bt_conn_unref>
    61ee:	e7f1      	b.n	61d4 <le_conn_param_req+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    61f0:	210e      	movs	r1, #14
    61f2:	f242 0020 	movw	r0, #8224	; 0x2020
    61f6:	f7fe ffd9 	bl	51ac <bt_hci_cmd_create>
	if (!buf) {
    61fa:	4605      	mov	r5, r0
    61fc:	2800      	cmp	r0, #0
    61fe:	d0f3      	beq.n	61e8 <le_conn_param_req+0x68>
	cp = net_buf_add(buf, sizeof(*cp));
    6200:	210e      	movs	r1, #14
    6202:	3008      	adds	r0, #8
    6204:	f007 fae4 	bl	d7d0 <net_buf_simple_add>
    6208:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
    620a:	220e      	movs	r2, #14
    620c:	2100      	movs	r1, #0
    620e:	f00d fabb 	bl	13788 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    6212:	f8bd 3000 	ldrh.w	r3, [sp]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    6216:	4629      	mov	r1, r5
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    6218:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    621a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
	cp->handle = sys_cpu_to_le16(handle);
    621e:	8027      	strh	r7, [r4, #0]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    6220:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    6222:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    6226:	f242 0020 	movw	r0, #8224	; 0x2020
	cp->latency = sys_cpu_to_le16(param->latency);
    622a:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    622c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6230:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    6232:	f7ff fd3d 	bl	5cb0 <bt_hci_cmd_send>
    6236:	e7d7      	b.n	61e8 <le_conn_param_req+0x68>
    6238:	00019285 	.word	0x00019285

0000623c <hci_tx_thread>:
{
    623c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    6240:	f8df 812c 	ldr.w	r8, [pc, #300]	; 6370 <hci_tx_thread+0x134>
		BT_ASSERT(err == 0);
    6244:	f8df 9154 	ldr.w	r9, [pc, #340]	; 639c <hci_tx_thread+0x160>
			ev_count += bt_conn_prepare_events(&events[1]);
    6248:	f108 0a14 	add.w	sl, r8, #20
		events[0].state = K_POLL_STATE_NOT_READY;
    624c:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    6250:	4650      	mov	r0, sl
		events[0].state = K_POLL_STATE_NOT_READY;
    6252:	f36f 3310 	bfc	r3, #12, #5
    6256:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    625a:	f000 ff7f 	bl	715c <bt_conn_prepare_events>
    625e:	1c46      	adds	r6, r0, #1
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    6260:	f04f 32ff 	mov.w	r2, #4294967295
    6264:	f04f 33ff 	mov.w	r3, #4294967295
    6268:	4631      	mov	r1, r6
    626a:	4841      	ldr	r0, [pc, #260]	; (6370 <hci_tx_thread+0x134>)
    626c:	f00b fd40 	bl	11cf0 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    6270:	b160      	cbz	r0, 628c <hci_tx_thread+0x50>
    6272:	f241 43e3 	movw	r3, #5347	; 0x14e3
    6276:	464a      	mov	r2, r9
    6278:	493e      	ldr	r1, [pc, #248]	; (6374 <hci_tx_thread+0x138>)
    627a:	483f      	ldr	r0, [pc, #252]	; (6378 <hci_tx_thread+0x13c>)
    627c:	f00b ff44 	bl	12108 <printk>
    6280:	4040      	eors	r0, r0
    6282:	f380 8811 	msr	BASEPRI, r0
    6286:	f04f 0003 	mov.w	r0, #3
    628a:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    628c:	4d3b      	ldr	r5, [pc, #236]	; (637c <hci_tx_thread+0x140>)
{
    628e:	4f38      	ldr	r7, [pc, #224]	; (6370 <hci_tx_thread+0x134>)
    6290:	f105 0bd0 	add.w	fp, r5, #208	; 0xd0
	for (; count; ev++, count--) {
    6294:	b916      	cbnz	r6, 629c <hci_tx_thread+0x60>
	z_impl_k_yield();
    6296:	f00a fb2f 	bl	108f8 <z_impl_k_yield>
	while (1) {
    629a:	e7d7      	b.n	624c <hci_tx_thread+0x10>
		switch (ev->state) {
    629c:	68fa      	ldr	r2, [r7, #12]
    629e:	f3c2 3204 	ubfx	r2, r2, #12, #5
    62a2:	2a01      	cmp	r2, #1
    62a4:	d954      	bls.n	6350 <hci_tx_thread+0x114>
    62a6:	2a04      	cmp	r2, #4
    62a8:	d15c      	bne.n	6364 <hci_tx_thread+0x128>
			if (ev->tag == BT_EVENT_CMD_TX) {
    62aa:	7b3b      	ldrb	r3, [r7, #12]
    62ac:	2b00      	cmp	r3, #0
    62ae:	d152      	bne.n	6356 <hci_tx_thread+0x11a>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    62b0:	2200      	movs	r2, #0
    62b2:	2300      	movs	r3, #0
    62b4:	4832      	ldr	r0, [pc, #200]	; (6380 <hci_tx_thread+0x144>)
    62b6:	f007 f887 	bl	d3c8 <net_buf_get>
	BT_ASSERT(buf);
    62ba:	4604      	mov	r4, r0
    62bc:	b960      	cbnz	r0, 62d8 <hci_tx_thread+0x9c>
    62be:	f241 4385 	movw	r3, #5253	; 0x1485
    62c2:	464a      	mov	r2, r9
    62c4:	492f      	ldr	r1, [pc, #188]	; (6384 <hci_tx_thread+0x148>)
    62c6:	482c      	ldr	r0, [pc, #176]	; (6378 <hci_tx_thread+0x13c>)
    62c8:	f00b ff1e 	bl	12108 <printk>
    62cc:	4040      	eors	r0, r0
    62ce:	f380 8811 	msr	BASEPRI, r0
    62d2:	f04f 0003 	mov.w	r0, #3
    62d6:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    62d8:	f04f 33ff 	mov.w	r3, #4294967295
    62dc:	f04f 32ff 	mov.w	r2, #4294967295
    62e0:	4658      	mov	r0, fp
    62e2:	f00a fcd1 	bl	10c88 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    62e6:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
    62ea:	b153      	cbz	r3, 6302 <hci_tx_thread+0xc6>
		BT_ERR("Uncleared pending sent_cmd");
    62ec:	2145      	movs	r1, #69	; 0x45
    62ee:	4826      	ldr	r0, [pc, #152]	; (6388 <hci_tx_thread+0x14c>)
    62f0:	f00b ff0a 	bl	12108 <printk>
		net_buf_unref(bt_dev.sent_cmd);
    62f4:	f8d5 00e8 	ldr.w	r0, [r5, #232]	; 0xe8
    62f8:	f007 f8f8 	bl	d4ec <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    62fc:	2300      	movs	r3, #0
    62fe:	f8c5 30e8 	str.w	r3, [r5, #232]	; 0xe8
	bt_dev.sent_cmd = net_buf_ref(buf);
    6302:	4620      	mov	r0, r4
    6304:	f007 f938 	bl	d578 <net_buf_ref>
    6308:	f8c5 00e8 	str.w	r0, [r5, #232]	; 0xe8
	err = bt_send(buf);
    630c:	4620      	mov	r0, r4
    630e:	f7ff fcc7 	bl	5ca0 <bt_send>
	if (err) {
    6312:	4602      	mov	r2, r0
    6314:	b1e0      	cbz	r0, 6350 <hci_tx_thread+0x114>
		BT_ERR("Unable to send to driver (err %d)", err);
    6316:	2145      	movs	r1, #69	; 0x45
    6318:	481c      	ldr	r0, [pc, #112]	; (638c <hci_tx_thread+0x150>)
    631a:	f00b fef5 	bl	12108 <printk>
	z_impl_k_sem_give(sem);
    631e:	481c      	ldr	r0, [pc, #112]	; (6390 <hci_tx_thread+0x154>)
    6320:	f00a fc6e 	bl	10c00 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    6324:	4620      	mov	r0, r4
    6326:	f006 ff49 	bl	d1bc <net_buf_id>
    632a:	220c      	movs	r2, #12
    632c:	4b19      	ldr	r3, [pc, #100]	; (6394 <hci_tx_thread+0x158>)
    632e:	211f      	movs	r1, #31
    6330:	fb02 3000 	mla	r0, r2, r0, r3
    6334:	4622      	mov	r2, r4
    6336:	8840      	ldrh	r0, [r0, #2]
    6338:	f7fe fd22 	bl	4d80 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    633c:	f8d5 00e8 	ldr.w	r0, [r5, #232]	; 0xe8
    6340:	f007 f8d4 	bl	d4ec <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    6344:	2300      	movs	r3, #0
		net_buf_unref(buf);
    6346:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    6348:	f8c5 30e8 	str.w	r3, [r5, #232]	; 0xe8
		net_buf_unref(buf);
    634c:	f007 f8ce 	bl	d4ec <net_buf_unref>
	for (; count; ev++, count--) {
    6350:	3714      	adds	r7, #20
    6352:	3e01      	subs	r6, #1
    6354:	e79e      	b.n	6294 <hci_tx_thread+0x58>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    6356:	2b01      	cmp	r3, #1
    6358:	d1fa      	bne.n	6350 <hci_tx_thread+0x114>
					conn = CONTAINER_OF(ev->fifo,
    635a:	6938      	ldr	r0, [r7, #16]
					bt_conn_process_tx(conn);
    635c:	3834      	subs	r0, #52	; 0x34
    635e:	f001 facf 	bl	7900 <bt_conn_process_tx>
    6362:	e7f5      	b.n	6350 <hci_tx_thread+0x114>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    6364:	2157      	movs	r1, #87	; 0x57
    6366:	480c      	ldr	r0, [pc, #48]	; (6398 <hci_tx_thread+0x15c>)
    6368:	f00b fece 	bl	12108 <printk>
    636c:	e7f0      	b.n	6350 <hci_tx_thread+0x114>
    636e:	bf00      	nop
    6370:	200001f8 	.word	0x200001f8
    6374:	000194fe 	.word	0x000194fe
    6378:	00017d82 	.word	0x00017d82
    637c:	20000000 	.word	0x20000000
    6380:	20000108 	.word	0x20000108
    6384:	0001b1ca 	.word	0x0001b1ca
    6388:	0001988e 	.word	0x0001988e
    638c:	000196fb 	.word	0x000196fb
    6390:	200000d0 	.word	0x200000d0
    6394:	20000c0c 	.word	0x20000c0c
    6398:	000198ae 	.word	0x000198ae
    639c:	000193ed 	.word	0x000193ed

000063a0 <bt_recv>:
{
    63a0:	b510      	push	{r4, lr}
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    63a2:	7d02      	ldrb	r2, [r0, #20]
    63a4:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    63a6:	f002 03fd 	and.w	r3, r2, #253	; 0xfd
    63aa:	2b01      	cmp	r3, #1
    63ac:	d105      	bne.n	63ba <bt_recv+0x1a>
		net_buf_put(&bt_dev.rx_queue, buf);
    63ae:	4601      	mov	r1, r0
    63b0:	4807      	ldr	r0, [pc, #28]	; (63d0 <bt_recv+0x30>)
    63b2:	f007 f867 	bl	d484 <net_buf_put>
		return 0;
    63b6:	2000      	movs	r0, #0
}
    63b8:	bd10      	pop	{r4, pc}
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    63ba:	2145      	movs	r1, #69	; 0x45
    63bc:	4805      	ldr	r0, [pc, #20]	; (63d4 <bt_recv+0x34>)
    63be:	f00b fea3 	bl	12108 <printk>
		net_buf_unref(buf);
    63c2:	4620      	mov	r0, r4
    63c4:	f007 f892 	bl	d4ec <net_buf_unref>
		return -EINVAL;
    63c8:	f06f 0015 	mvn.w	r0, #21
    63cc:	e7f4      	b.n	63b8 <bt_recv+0x18>
    63ce:	bf00      	nop
    63d0:	200000ec 	.word	0x200000ec
    63d4:	000198d4 	.word	0x000198d4

000063d8 <bt_recv_prio>:
{
    63d8:	b538      	push	{r3, r4, r5, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    63da:	7d03      	ldrb	r3, [r0, #20]
{
    63dc:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    63de:	2b01      	cmp	r3, #1
    63e0:	d00c      	beq.n	63fc <bt_recv_prio+0x24>
    63e2:	f641 03f7 	movw	r3, #6391	; 0x18f7
    63e6:	4a20      	ldr	r2, [pc, #128]	; (6468 <bt_recv_prio+0x90>)
    63e8:	4920      	ldr	r1, [pc, #128]	; (646c <bt_recv_prio+0x94>)
    63ea:	4821      	ldr	r0, [pc, #132]	; (6470 <bt_recv_prio+0x98>)
    63ec:	f00b fe8c 	bl	12108 <printk>
    63f0:	4040      	eors	r0, r0
    63f2:	f380 8811 	msr	BASEPRI, r0
    63f6:	f04f 0003 	mov.w	r0, #3
    63fa:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
    63fc:	89a3      	ldrh	r3, [r4, #12]
    63fe:	2b01      	cmp	r3, #1
    6400:	d80c      	bhi.n	641c <bt_recv_prio+0x44>
    6402:	f641 03f8 	movw	r3, #6392	; 0x18f8
    6406:	4a18      	ldr	r2, [pc, #96]	; (6468 <bt_recv_prio+0x90>)
    6408:	491a      	ldr	r1, [pc, #104]	; (6474 <bt_recv_prio+0x9c>)
    640a:	4819      	ldr	r0, [pc, #100]	; (6470 <bt_recv_prio+0x98>)
    640c:	f00b fe7c 	bl	12108 <printk>
    6410:	4040      	eors	r0, r0
    6412:	f380 8811 	msr	BASEPRI, r0
    6416:	f04f 0003 	mov.w	r0, #3
    641a:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    641c:	2102      	movs	r1, #2
    641e:	f104 0008 	add.w	r0, r4, #8
    6422:	f007 f9b3 	bl	d78c <net_buf_simple_pull_mem>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    6426:	7802      	ldrb	r2, [r0, #0]
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    6428:	4605      	mov	r5, r0
    642a:	2a1a      	cmp	r2, #26
    642c:	d804      	bhi.n	6438 <bt_recv_prio+0x60>
    642e:	2301      	movs	r3, #1
    6430:	4093      	lsls	r3, r2
    6432:	4a11      	ldr	r2, [pc, #68]	; (6478 <bt_recv_prio+0xa0>)
    6434:	4213      	tst	r3, r2
    6436:	d10c      	bne.n	6452 <bt_recv_prio+0x7a>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    6438:	f641 03fb 	movw	r3, #6395	; 0x18fb
    643c:	4a0a      	ldr	r2, [pc, #40]	; (6468 <bt_recv_prio+0x90>)
    643e:	490f      	ldr	r1, [pc, #60]	; (647c <bt_recv_prio+0xa4>)
    6440:	480b      	ldr	r0, [pc, #44]	; (6470 <bt_recv_prio+0x98>)
    6442:	f00b fe61 	bl	12108 <printk>
    6446:	4040      	eors	r0, r0
    6448:	f380 8811 	msr	BASEPRI, r0
    644c:	f04f 0003 	mov.w	r0, #3
    6450:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    6452:	2304      	movs	r3, #4
    6454:	4621      	mov	r1, r4
    6456:	4a0a      	ldr	r2, [pc, #40]	; (6480 <bt_recv_prio+0xa8>)
    6458:	7828      	ldrb	r0, [r5, #0]
    645a:	f7fe fcf7 	bl	4e4c <handle_event>
	net_buf_unref(buf);
    645e:	4620      	mov	r0, r4
    6460:	f007 f844 	bl	d4ec <net_buf_unref>
}
    6464:	2000      	movs	r0, #0
    6466:	bd38      	pop	{r3, r4, r5, pc}
    6468:	000193ed 	.word	0x000193ed
    646c:	000198ed 	.word	0x000198ed
    6470:	00017d82 	.word	0x00017d82
    6474:	00019421 	.word	0x00019421
    6478:	0408c000 	.word	0x0408c000
    647c:	0001948b 	.word	0x0001948b
    6480:	000171c0 	.word	0x000171c0

00006484 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    6484:	4a08      	ldr	r2, [pc, #32]	; (64a8 <bt_hci_driver_register+0x24>)
{
    6486:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    6488:	f8d2 0124 	ldr.w	r0, [r2, #292]	; 0x124
    648c:	b930      	cbnz	r0, 649c <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    648e:	68d9      	ldr	r1, [r3, #12]
    6490:	b139      	cbz	r1, 64a2 <bt_hci_driver_register+0x1e>
    6492:	6919      	ldr	r1, [r3, #16]
    6494:	b129      	cbz	r1, 64a2 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    6496:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
	return 0;
    649a:	4770      	bx	lr
		return -EALREADY;
    649c:	f06f 0044 	mvn.w	r0, #68	; 0x44
    64a0:	4770      	bx	lr
		return -EINVAL;
    64a2:	f06f 0015 	mvn.w	r0, #21
}
    64a6:	4770      	bx	lr
    64a8:	20000000 	.word	0x20000000

000064ac <bt_finalize_init>:
{
    64ac:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    64ae:	2102      	movs	r1, #2
    64b0:	4803      	ldr	r0, [pc, #12]	; (64c0 <bt_finalize_init+0x14>)
    64b2:	f00d fa31 	bl	13918 <atomic_or>
}
    64b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_scan_update(false);
    64ba:	2000      	movs	r0, #0
    64bc:	f7ff ba2e 	b.w	591c <bt_le_scan_update>
    64c0:	20000098 	.word	0x20000098

000064c4 <init_work>:
{
    64c4:	b510      	push	{r4, lr}
	err = bt_init();
    64c6:	f7f9 ffc7 	bl	458 <bt_init>
	if (ready_cb) {
    64ca:	4b03      	ldr	r3, [pc, #12]	; (64d8 <init_work+0x14>)
    64cc:	681b      	ldr	r3, [r3, #0]
    64ce:	b113      	cbz	r3, 64d6 <init_work+0x12>
}
    64d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    64d4:	4718      	bx	r3
}
    64d6:	bd10      	pop	{r4, pc}
    64d8:	20000c2c 	.word	0x20000c2c

000064dc <bt_enable>:
{
    64dc:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	if (!bt_dev.drv) {
    64e0:	4d35      	ldr	r5, [pc, #212]	; (65b8 <bt_enable+0xdc>)
{
    64e2:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    64e4:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
{
    64e8:	b088      	sub	sp, #32
	if (!bt_dev.drv) {
    64ea:	b94b      	cbnz	r3, 6500 <bt_enable+0x24>
		BT_ERR("No HCI driver registered");
    64ec:	2145      	movs	r1, #69	; 0x45
    64ee:	4833      	ldr	r0, [pc, #204]	; (65bc <bt_enable+0xe0>)
    64f0:	f00b fe0a 	bl	12108 <printk>
		return -ENODEV;
    64f4:	f06f 0412 	mvn.w	r4, #18
}
    64f8:	4620      	mov	r0, r4
    64fa:	b008      	add	sp, #32
    64fc:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    6500:	2100      	movs	r1, #0
    6502:	f105 0098 	add.w	r0, r5, #152	; 0x98
    6506:	f00d fa12 	bl	1392e <atomic_test_and_set_bit>
    650a:	2800      	cmp	r0, #0
    650c:	d151      	bne.n	65b2 <bt_enable+0xd6>
		err = bt_settings_init();
    650e:	f7fe faab 	bl	4a68 <bt_settings_init>
		if (err) {
    6512:	4604      	mov	r4, r0
    6514:	2800      	cmp	r0, #0
    6516:	d1ef      	bne.n	64f8 <bt_enable+0x1c>
	ready_cb = cb;
    6518:	4b29      	ldr	r3, [pc, #164]	; (65c0 <bt_enable+0xe4>)
    651a:	f04f 0800 	mov.w	r8, #0
    651e:	f04f 0900 	mov.w	r9, #0
    6522:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    6524:	f06f 0308 	mvn.w	r3, #8
    6528:	e9cd 0000 	strd	r0, r0, [sp]
    652c:	e9cd 0302 	strd	r0, r3, [sp, #8]
    6530:	9004      	str	r0, [sp, #16]
    6532:	f44f 6280 	mov.w	r2, #1024	; 0x400
    6536:	e9cd 8906 	strd	r8, r9, [sp, #24]
    653a:	4b22      	ldr	r3, [pc, #136]	; (65c4 <bt_enable+0xe8>)
    653c:	4922      	ldr	r1, [pc, #136]	; (65c8 <bt_enable+0xec>)
    653e:	4823      	ldr	r0, [pc, #140]	; (65cc <bt_enable+0xf0>)
    6540:	f00a fc9c 	bl	10e7c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    6544:	4922      	ldr	r1, [pc, #136]	; (65d0 <bt_enable+0xf4>)
    6546:	4821      	ldr	r0, [pc, #132]	; (65cc <bt_enable+0xf0>)
    6548:	f010 f97a 	bl	16840 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    654c:	f06f 0307 	mvn.w	r3, #7
    6550:	f640 0298 	movw	r2, #2200	; 0x898
    6554:	e9cd 4302 	strd	r4, r3, [sp, #8]
    6558:	e9cd 8906 	strd	r8, r9, [sp, #24]
    655c:	e9cd 4400 	strd	r4, r4, [sp]
    6560:	4b1c      	ldr	r3, [pc, #112]	; (65d4 <bt_enable+0xf8>)
    6562:	491d      	ldr	r1, [pc, #116]	; (65d8 <bt_enable+0xfc>)
    6564:	9404      	str	r4, [sp, #16]
    6566:	481d      	ldr	r0, [pc, #116]	; (65dc <bt_enable+0x100>)
    6568:	f00a fc88 	bl	10e7c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    656c:	491c      	ldr	r1, [pc, #112]	; (65e0 <bt_enable+0x104>)
    656e:	481b      	ldr	r0, [pc, #108]	; (65dc <bt_enable+0x100>)
    6570:	f010 f966 	bl	16840 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
    6574:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    6578:	68db      	ldr	r3, [r3, #12]
    657a:	4798      	blx	r3
	if (err) {
    657c:	4604      	mov	r4, r0
    657e:	b128      	cbz	r0, 658c <bt_enable+0xb0>
		BT_ERR("HCI driver open failed (%d)", err);
    6580:	4602      	mov	r2, r0
    6582:	2145      	movs	r1, #69	; 0x45
    6584:	4817      	ldr	r0, [pc, #92]	; (65e4 <bt_enable+0x108>)
    6586:	f00b fdbf 	bl	12108 <printk>
		return err;
    658a:	e7b5      	b.n	64f8 <bt_enable+0x1c>
	if (!cb) {
    658c:	b926      	cbnz	r6, 6598 <bt_enable+0xbc>
}
    658e:	b008      	add	sp, #32
    6590:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
		return bt_init();
    6594:	f7f9 bf60 	b.w	458 <bt_init>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    6598:	4601      	mov	r1, r0
    659a:	f105 0094 	add.w	r0, r5, #148	; 0x94
    659e:	f00d f9c6 	bl	1392e <atomic_test_and_set_bit>
    65a2:	2800      	cmp	r0, #0
    65a4:	d1a8      	bne.n	64f8 <bt_enable+0x1c>
		k_queue_append(&work_q->queue, work);
    65a6:	4810      	ldr	r0, [pc, #64]	; (65e8 <bt_enable+0x10c>)
    65a8:	f105 018c 	add.w	r1, r5, #140	; 0x8c
    65ac:	f010 f8ed 	bl	1678a <k_queue_append>
    65b0:	e7a2      	b.n	64f8 <bt_enable+0x1c>
		return -EALREADY;
    65b2:	f06f 0444 	mvn.w	r4, #68	; 0x44
    65b6:	e79f      	b.n	64f8 <bt_enable+0x1c>
    65b8:	20000000 	.word	0x20000000
    65bc:	00019a23 	.word	0x00019a23
    65c0:	20000c2c 	.word	0x20000c2c
    65c4:	0000623d 	.word	0x0000623d
    65c8:	20002e98 	.word	0x20002e98
    65cc:	20000cb0 	.word	0x20000cb0
    65d0:	00019a41 	.word	0x00019a41
    65d4:	00004f01 	.word	0x00004f01
    65d8:	20002600 	.word	0x20002600
    65dc:	20000c30 	.word	0x20000c30
    65e0:	00019a47 	.word	0x00019a47
    65e4:	00019a4d 	.word	0x00019a4d
    65e8:	20001dcc 	.word	0x20001dcc

000065ec <bt_get_name>:
}
    65ec:	4800      	ldr	r0, [pc, #0]	; (65f0 <bt_get_name+0x4>)
    65ee:	4770      	bx	lr
    65f0:	0001956d 	.word	0x0001956d

000065f4 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, u8_t *irk)
{
    65f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    65f6:	460c      	mov	r4, r1
	int new_id;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    65f8:	4605      	mov	r5, r0
    65fa:	b918      	cbnz	r0, 6604 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    65fc:	b31c      	cbz	r4, 6646 <bt_id_create+0x52>
		return -EINVAL;
    65fe:	f06f 0415 	mvn.w	r4, #21
    6602:	e01d      	b.n	6640 <bt_id_create+0x4c>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    6604:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    6606:	2207      	movs	r2, #7
    6608:	4669      	mov	r1, sp
    660a:	9300      	str	r3, [sp, #0]
    660c:	f8cd 3003 	str.w	r3, [sp, #3]
    6610:	f00d f87f 	bl	13712 <memcmp>
    6614:	2800      	cmp	r0, #0
    6616:	d0f1      	beq.n	65fc <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    6618:	782b      	ldrb	r3, [r5, #0]
    661a:	2b01      	cmp	r3, #1
    661c:	d104      	bne.n	6628 <bt_id_create+0x34>
    661e:	79ab      	ldrb	r3, [r5, #6]
    6620:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    6624:	2bc0      	cmp	r3, #192	; 0xc0
    6626:	d004      	beq.n	6632 <bt_id_create+0x3e>
			BT_ERR("Only static random identity address supported");
    6628:	2145      	movs	r1, #69	; 0x45
    662a:	480e      	ldr	r0, [pc, #56]	; (6664 <bt_id_create+0x70>)
    662c:	f00b fd6c 	bl	12108 <printk>
			return -EINVAL;
    6630:	e7e5      	b.n	65fe <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    6632:	4628      	mov	r0, r5
    6634:	f7fe fc4a 	bl	4ecc <id_find>
    6638:	2800      	cmp	r0, #0
    663a:	dbdf      	blt.n	65fc <bt_id_create+0x8>
			return -EALREADY;
    663c:	f06f 0444 	mvn.w	r4, #68	; 0x44

	new_id = bt_dev.id_count++;
	id_create(new_id, addr, irk);

	return new_id;
}
    6640:	4620      	mov	r0, r4
    6642:	b003      	add	sp, #12
    6644:	bd30      	pop	{r4, r5, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    6646:	4b08      	ldr	r3, [pc, #32]	; (6668 <bt_id_create+0x74>)
    6648:	79dc      	ldrb	r4, [r3, #7]
    664a:	2c01      	cmp	r4, #1
    664c:	d006      	beq.n	665c <bt_id_create+0x68>
	new_id = bt_dev.id_count++;
    664e:	1c62      	adds	r2, r4, #1
	id_create(new_id, addr, irk);
    6650:	4629      	mov	r1, r5
    6652:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    6654:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
    6656:	f7ff faef 	bl	5c38 <id_create.isra.0>
	return new_id;
    665a:	e7f1      	b.n	6640 <bt_id_create+0x4c>
		return -ENOMEM;
    665c:	f06f 040b 	mvn.w	r4, #11
    6660:	e7ee      	b.n	6640 <bt_id_create+0x4c>
    6662:	bf00      	nop
    6664:	00019a6e 	.word	0x00019a6e
    6668:	20000000 	.word	0x20000000

0000666c <bt_setup_public_id_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

void bt_setup_public_id_addr(void)
{
    666c:	b570      	push	{r4, r5, r6, lr}
    666e:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    6670:	2100      	movs	r1, #0
    6672:	f241 0009 	movw	r0, #4105	; 0x1009
    6676:	aa01      	add	r2, sp, #4
    6678:	f7fe fde2 	bl	5240 <bt_hci_cmd_send_sync>
	if (err) {
    667c:	4e1c      	ldr	r6, [pc, #112]	; (66f0 <bt_setup_public_id_addr+0x84>)
    667e:	4604      	mov	r4, r0
    6680:	b138      	cbz	r0, 6692 <bt_setup_public_id_addr+0x26>
		BT_WARN("Failed to read public address");
    6682:	2157      	movs	r1, #87	; 0x57
    6684:	481b      	ldr	r0, [pc, #108]	; (66f4 <bt_setup_public_id_addr+0x88>)
    6686:	f00b fd3f 	bl	12108 <printk>
	bt_addr_le_t addr;
	u8_t *irk = NULL;

	bt_dev.id_count = bt_read_public_addr(&addr);
    668a:	2300      	movs	r3, #0
    668c:	71f3      	strb	r3, [r6, #7]
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	id_create(BT_ID_DEFAULT, &addr, irk);
}
    668e:	b006      	add	sp, #24
    6690:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    6692:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
    6694:	2206      	movs	r2, #6
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    6696:	689d      	ldr	r5, [r3, #8]
    6698:	a904      	add	r1, sp, #16
    669a:	3501      	adds	r5, #1
    669c:	9004      	str	r0, [sp, #16]
    669e:	f8ad 0014 	strh.w	r0, [sp, #20]
    66a2:	4628      	mov	r0, r5
    66a4:	f00d f835 	bl	13712 <memcmp>
    66a8:	b918      	cbnz	r0, 66b2 <bt_setup_public_id_addr+0x46>
		net_buf_unref(rsp);
    66aa:	9801      	ldr	r0, [sp, #4]
    66ac:	f006 ff1e 	bl	d4ec <net_buf_unref>
    66b0:	e7eb      	b.n	668a <bt_setup_public_id_addr+0x1e>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    66b2:	4b11      	ldr	r3, [pc, #68]	; (66f8 <bt_setup_public_id_addr+0x8c>)
    66b4:	2206      	movs	r2, #6
    66b6:	6818      	ldr	r0, [r3, #0]
    66b8:	889b      	ldrh	r3, [r3, #4]
    66ba:	9002      	str	r0, [sp, #8]
    66bc:	a902      	add	r1, sp, #8
    66be:	4628      	mov	r0, r5
    66c0:	f8ad 300c 	strh.w	r3, [sp, #12]
    66c4:	f00d f825 	bl	13712 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    66c8:	2800      	cmp	r0, #0
    66ca:	d0ee      	beq.n	66aa <bt_setup_public_id_addr+0x3e>
	memcpy(dst, src, sizeof(*dst));
    66cc:	4629      	mov	r1, r5
    66ce:	2206      	movs	r2, #6
    66d0:	f10d 0011 	add.w	r0, sp, #17
    66d4:	f00d f82d 	bl	13732 <memcpy>
	net_buf_unref(rsp);
    66d8:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    66da:	f88d 4010 	strb.w	r4, [sp, #16]
	net_buf_unref(rsp);
    66de:	f006 ff05 	bl	d4ec <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
    66e2:	2301      	movs	r3, #1
	id_create(BT_ID_DEFAULT, &addr, irk);
    66e4:	4620      	mov	r0, r4
    66e6:	a904      	add	r1, sp, #16
	bt_dev.id_count = bt_read_public_addr(&addr);
    66e8:	71f3      	strb	r3, [r6, #7]
	id_create(BT_ID_DEFAULT, &addr, irk);
    66ea:	f7ff faa5 	bl	5c38 <id_create.isra.0>
    66ee:	e7ce      	b.n	668e <bt_setup_public_id_addr+0x22>
    66f0:	20000000 	.word	0x20000000
    66f4:	00019aa1 	.word	0x00019aa1
    66f8:	00016ef3 	.word	0x00016ef3

000066fc <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
u8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], u8_t size)
{
    66fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	u8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    6700:	4b1c      	ldr	r3, [pc, #112]	; (6774 <bt_read_static_addr+0x78>)
{
    6702:	4607      	mov	r7, r0
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    6704:	f893 408a 	ldrb.w	r4, [r3, #138]	; 0x8a
{
    6708:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    670a:	f014 0401 	ands.w	r4, r4, #1
    670e:	d104      	bne.n	671a <bt_read_static_addr+0x1e>
		BT_WARN("Read Static Addresses command not available");
    6710:	2157      	movs	r1, #87	; 0x57
    6712:	4819      	ldr	r0, [pc, #100]	; (6778 <bt_read_static_addr+0x7c>)
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
    6714:	f00b fcf8 	bl	12108 <printk>
    6718:	e00c      	b.n	6734 <bt_read_static_addr+0x38>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    671a:	2100      	movs	r1, #0
    671c:	f64f 4009 	movw	r0, #64521	; 0xfc09
    6720:	aa01      	add	r2, sp, #4
    6722:	f7fe fd8d 	bl	5240 <bt_hci_cmd_send_sync>
	if (err) {
    6726:	4605      	mov	r5, r0
    6728:	b140      	cbz	r0, 673c <bt_read_static_addr+0x40>
		BT_WARN("Failed to read static addresses");
    672a:	2157      	movs	r1, #87	; 0x57
    672c:	4813      	ldr	r0, [pc, #76]	; (677c <bt_read_static_addr+0x80>)
    672e:	f00b fceb 	bl	12108 <printk>
    6732:	2400      	movs	r4, #0
	}

	return cnt;
}
    6734:	4620      	mov	r0, r4
    6736:	b002      	add	sp, #8
    6738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    673c:	f04f 0816 	mov.w	r8, #22
	rp = (void *)rsp->data;
    6740:	9b01      	ldr	r3, [sp, #4]
    6742:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    6744:	785c      	ldrb	r4, [r3, #1]
    6746:	42b4      	cmp	r4, r6
    6748:	bf28      	it	cs
    674a:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    674c:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
    674e:	42ac      	cmp	r4, r5
    6750:	dc07      	bgt.n	6762 <bt_read_static_addr+0x66>
	net_buf_unref(rsp);
    6752:	9801      	ldr	r0, [sp, #4]
    6754:	f006 feca 	bl	d4ec <net_buf_unref>
	if (!cnt) {
    6758:	2c00      	cmp	r4, #0
    675a:	d1eb      	bne.n	6734 <bt_read_static_addr+0x38>
		BT_WARN("No static addresses stored in controller");
    675c:	2157      	movs	r1, #87	; 0x57
    675e:	4808      	ldr	r0, [pc, #32]	; (6780 <bt_read_static_addr+0x84>)
    6760:	e7d8      	b.n	6714 <bt_read_static_addr+0x18>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    6762:	fb08 7005 	mla	r0, r8, r5, r7
    6766:	2216      	movs	r2, #22
    6768:	4631      	mov	r1, r6
    676a:	f00c ffe2 	bl	13732 <memcpy>
	for (i = 0; i < cnt; i++) {
    676e:	3501      	adds	r5, #1
    6770:	e7ed      	b.n	674e <bt_read_static_addr+0x52>
    6772:	bf00      	nop
    6774:	20000000 	.word	0x20000000
    6778:	00019ac4 	.word	0x00019ac4
    677c:	00019af5 	.word	0x00019af5
    6780:	00019b1a 	.word	0x00019b1a

00006784 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    6784:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    6786:	4d14      	ldr	r5, [pc, #80]	; (67d8 <bt_setup_random_id_addr+0x54>)
{
    6788:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    678a:	79ec      	ldrb	r4, [r5, #7]
    678c:	b9f4      	cbnz	r4, 67cc <bt_setup_random_id_addr+0x48>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    678e:	2101      	movs	r1, #1
    6790:	a802      	add	r0, sp, #8
    6792:	f7ff ffb3 	bl	66fc <bt_read_static_addr>
    6796:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
    6798:	b1c0      	cbz	r0, 67cc <bt_setup_random_id_addr+0x48>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    679a:	2716      	movs	r7, #22
    679c:	e00f      	b.n	67be <bt_setup_random_id_addr+0x3a>
    679e:	ab02      	add	r3, sp, #8
    67a0:	fb07 3106 	mla	r1, r7, r6, r3
    67a4:	2206      	movs	r2, #6
    67a6:	f10d 0001 	add.w	r0, sp, #1
    67aa:	f00c ffc2 	bl	13732 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    67ae:	2301      	movs	r3, #1

				id_create(i, &addr, irk);
    67b0:	4669      	mov	r1, sp
    67b2:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
    67b4:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
    67b8:	f7ff fa3e 	bl	5c38 <id_create.isra.0>
			for (u8_t i = 0; i < bt_dev.id_count; i++) {
    67bc:	3401      	adds	r4, #1
    67be:	79eb      	ldrb	r3, [r5, #7]
    67c0:	b2e6      	uxtb	r6, r4
    67c2:	42b3      	cmp	r3, r6
    67c4:	d8eb      	bhi.n	679e <bt_setup_random_id_addr+0x1a>
			}

			return 0;
    67c6:	2000      	movs	r0, #0
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
    67c8:	b009      	add	sp, #36	; 0x24
    67ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
    67cc:	2100      	movs	r1, #0
    67ce:	4608      	mov	r0, r1
    67d0:	f7ff ff10 	bl	65f4 <bt_id_create>
    67d4:	e7f8      	b.n	67c8 <bt_setup_random_id_addr+0x44>
    67d6:	bf00      	nop
    67d8:	20000000 	.word	0x20000000

000067dc <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    67dc:	b570      	push	{r4, r5, r6, lr}
    67de:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    67e0:	4828      	ldr	r0, [pc, #160]	; (6884 <bt_le_scan_start+0xa8>)
    67e2:	460e      	mov	r6, r1
    67e4:	f00d f892 	bl	1390c <atomic_get>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    67e8:	0781      	lsls	r1, r0, #30
    67ea:	d53f      	bpl.n	686c <bt_le_scan_start+0x90>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    67ec:	782b      	ldrb	r3, [r5, #0]
    67ee:	2b01      	cmp	r3, #1
    67f0:	d83f      	bhi.n	6872 <bt_le_scan_start+0x96>
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
    67f2:	686b      	ldr	r3, [r5, #4]
    67f4:	f033 030f 	bics.w	r3, r3, #15
    67f8:	d13b      	bne.n	6872 <bt_le_scan_start+0x96>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    67fa:	f643 70fc 	movw	r0, #16380	; 0x3ffc
    67fe:	8929      	ldrh	r1, [r5, #8]
    6800:	1f0b      	subs	r3, r1, #4
    6802:	b29b      	uxth	r3, r3
    6804:	4283      	cmp	r3, r0
    6806:	d834      	bhi.n	6872 <bt_le_scan_start+0x96>
	if (param->window < 0x0004 || param->window > 0x4000) {
    6808:	896a      	ldrh	r2, [r5, #10]
    680a:	1f13      	subs	r3, r2, #4
    680c:	b29b      	uxth	r3, r3
    680e:	4283      	cmp	r3, r0
    6810:	d82f      	bhi.n	6872 <bt_le_scan_start+0x96>
	if (param->window > param->interval) {
    6812:	4291      	cmp	r1, r2
    6814:	d32d      	bcc.n	6872 <bt_le_scan_start+0x96>
	if (param->type && !bt_le_scan_random_addr_check()) {
		return -EINVAL;
	}

	/* Return if active scan is already enabled */
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    6816:	2106      	movs	r1, #6
    6818:	481a      	ldr	r0, [pc, #104]	; (6884 <bt_le_scan_start+0xa8>)
    681a:	f00d f888 	bl	1392e <atomic_test_and_set_bit>
    681e:	4603      	mov	r3, r0
    6820:	bb50      	cbnz	r0, 6878 <bt_le_scan_start+0x9c>
    6822:	4818      	ldr	r0, [pc, #96]	; (6884 <bt_le_scan_start+0xa8>)
    6824:	f00d f872 	bl	1390c <atomic_get>
		return -EALREADY;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    6828:	0682      	lsls	r2, r0, #26
    682a:	d50b      	bpl.n	6844 <bt_le_scan_start+0x68>
	return set_le_scan_enable_legacy(enable);
    682c:	4618      	mov	r0, r3
    682e:	f7fe fe03 	bl	5438 <set_le_scan_enable_legacy>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
		if (err) {
    6832:	4604      	mov	r4, r0
    6834:	b130      	cbz	r0, 6844 <bt_le_scan_start+0x68>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    6836:	f06f 0140 	mvn.w	r1, #64	; 0x40
    683a:	4812      	ldr	r0, [pc, #72]	; (6884 <bt_le_scan_start+0xa8>)
    683c:	f00d f882 	bl	13944 <atomic_and>
	}

	scan_dev_found_cb = cb;

	return 0;
}
    6840:	4620      	mov	r0, r4
    6842:	bd70      	pop	{r4, r5, r6, pc}
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
    6844:	686a      	ldr	r2, [r5, #4]
    6846:	2108      	movs	r1, #8
    6848:	480e      	ldr	r0, [pc, #56]	; (6884 <bt_le_scan_start+0xa8>)
    684a:	f002 0201 	and.w	r2, r2, #1
    684e:	f00d f884 	bl	1395a <atomic_set_bit_to>
		if (param->timeout) {
    6852:	89ab      	ldrh	r3, [r5, #12]
    6854:	b99b      	cbnz	r3, 687e <bt_le_scan_start+0xa2>
		err = start_le_scan_legacy(param->type, param->interval,
    6856:	896a      	ldrh	r2, [r5, #10]
    6858:	8929      	ldrh	r1, [r5, #8]
    685a:	7828      	ldrb	r0, [r5, #0]
    685c:	f7fe fe28 	bl	54b0 <start_le_scan_legacy>
	if (err) {
    6860:	4604      	mov	r4, r0
    6862:	2800      	cmp	r0, #0
    6864:	d1e7      	bne.n	6836 <bt_le_scan_start+0x5a>
	scan_dev_found_cb = cb;
    6866:	4b08      	ldr	r3, [pc, #32]	; (6888 <bt_le_scan_start+0xac>)
    6868:	601e      	str	r6, [r3, #0]
	return 0;
    686a:	e7e9      	b.n	6840 <bt_le_scan_start+0x64>
		return -EAGAIN;
    686c:	f06f 040a 	mvn.w	r4, #10
    6870:	e7e6      	b.n	6840 <bt_le_scan_start+0x64>
		return -EINVAL;
    6872:	f06f 0415 	mvn.w	r4, #21
    6876:	e7e3      	b.n	6840 <bt_le_scan_start+0x64>
		return -EALREADY;
    6878:	f06f 0444 	mvn.w	r4, #68	; 0x44
    687c:	e7e0      	b.n	6840 <bt_le_scan_start+0x64>
			return -ENOTSUP;
    687e:	f06f 0422 	mvn.w	r4, #34	; 0x22
    6882:	e7dd      	b.n	6840 <bt_le_scan_start+0x64>
    6884:	20000098 	.word	0x20000098
    6888:	20000cac 	.word	0x20000cac

0000688c <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    688c:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    688e:	f06f 0140 	mvn.w	r1, #64	; 0x40
    6892:	4807      	ldr	r0, [pc, #28]	; (68b0 <bt_le_scan_stop+0x24>)
    6894:	f00d f856 	bl	13944 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    6898:	0643      	lsls	r3, r0, #25
    689a:	d506      	bpl.n	68aa <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
    689c:	2000      	movs	r0, #0
    689e:	4b05      	ldr	r3, [pc, #20]	; (68b4 <bt_le_scan_stop+0x28>)
    68a0:	6018      	str	r0, [r3, #0]
		pending_id_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
    68a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    68a6:	f7ff b839 	b.w	591c <bt_le_scan_update>
}
    68aa:	f06f 0044 	mvn.w	r0, #68	; 0x44
    68ae:	bd08      	pop	{r3, pc}
    68b0:	20000098 	.word	0x20000098
    68b4:	20000cac 	.word	0x20000cac

000068b8 <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN,
    68b8:	2801      	cmp	r0, #1
{
    68ba:	b570      	push	{r4, r5, r6, lr}
    68bc:	4605      	mov	r5, r0
    68be:	4616      	mov	r6, r2
    68c0:	461c      	mov	r4, r3
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN,
    68c2:	d01f      	beq.n	6904 <bt_buf_get_rx+0x4c>
    68c4:	2803      	cmp	r0, #3
    68c6:	d00e      	beq.n	68e6 <bt_buf_get_rx+0x2e>
    68c8:	490f      	ldr	r1, [pc, #60]	; (6908 <bt_buf_get_rx+0x50>)
    68ca:	f242 039f 	movw	r3, #8351	; 0x209f
    68ce:	4a0f      	ldr	r2, [pc, #60]	; (690c <bt_buf_get_rx+0x54>)
    68d0:	480f      	ldr	r0, [pc, #60]	; (6910 <bt_buf_get_rx+0x58>)
    68d2:	f00b fc19 	bl	12108 <printk>
    68d6:	480f      	ldr	r0, [pc, #60]	; (6914 <bt_buf_get_rx+0x5c>)
    68d8:	f00b fc16 	bl	12108 <printk>
    68dc:	f242 019f 	movw	r1, #8351	; 0x209f
    68e0:	480a      	ldr	r0, [pc, #40]	; (690c <bt_buf_get_rx+0x54>)
    68e2:	f00b fea7 	bl	12634 <assert_post_action>

#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	if (type == BT_BUF_EVT) {
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
    68e6:	4632      	mov	r2, r6
    68e8:	4623      	mov	r3, r4
    68ea:	480b      	ldr	r0, [pc, #44]	; (6918 <bt_buf_get_rx+0x60>)
		buf = net_buf_alloc(&hci_rx_pool, timeout);
    68ec:	f00e ff4d 	bl	1578a <net_buf_alloc_fixed>
    68f0:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    68f2:	b12c      	cbz	r4, 6900 <bt_buf_get_rx+0x48>
		net_buf_reserve(buf, BT_BUF_RESERVE);
    68f4:	2101      	movs	r1, #1
    68f6:	f104 0008 	add.w	r0, r4, #8
    68fa:	f006 fd99 	bl	d430 <net_buf_simple_reserve>
	*(u8_t *)net_buf_user_data(buf) = type;
    68fe:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    6900:	4620      	mov	r0, r4
    6902:	bd70      	pop	{r4, r5, r6, pc}
		buf = net_buf_alloc(&hci_rx_pool, timeout);
    6904:	4805      	ldr	r0, [pc, #20]	; (691c <bt_buf_get_rx+0x64>)
    6906:	e7f1      	b.n	68ec <bt_buf_get_rx+0x34>
    6908:	00019b48 	.word	0x00019b48
    690c:	000193ed 	.word	0x000193ed
    6910:	00017d82 	.word	0x00017d82
    6914:	00019b74 	.word	0x00019b74
    6918:	20000500 	.word	0x20000500
    691c:	20000608 	.word	0x20000608

00006920 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    6920:	4602      	mov	r2, r0
    6922:	460b      	mov	r3, r1
    6924:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
    6926:	f04f 0120 	mov.w	r1, #32
    692a:	f3ef 8511 	mrs	r5, BASEPRI
    692e:	f381 8811 	msr	BASEPRI, r1
    6932:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
	bt_dev.sent_cmd = NULL;
    6936:	2000      	movs	r0, #0
	buf = bt_dev.sent_cmd;
    6938:	490b      	ldr	r1, [pc, #44]	; (6968 <bt_buf_get_cmd_complete+0x48>)
    693a:	f8d1 40e8 	ldr.w	r4, [r1, #232]	; 0xe8
	bt_dev.sent_cmd = NULL;
    693e:	f8c1 00e8 	str.w	r0, [r1, #232]	; 0xe8
	__asm__ volatile(
    6942:	f385 8811 	msr	BASEPRI, r5
    6946:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    694a:	b924      	cbnz	r4, 6956 <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    694c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    6950:	2001      	movs	r0, #1
    6952:	f7ff bfb1 	b.w	68b8 <bt_buf_get_rx>
    6956:	2101      	movs	r1, #1
		buf->len = 0U;
    6958:	81a0      	strh	r0, [r4, #12]
    695a:	7521      	strb	r1, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
    695c:	f104 0008 	add.w	r0, r4, #8
    6960:	f006 fd66 	bl	d430 <net_buf_simple_reserve>
}
    6964:	4620      	mov	r0, r4
    6966:	bd70      	pop	{r4, r5, r6, pc}
    6968:	20000000 	.word	0x20000000

0000696c <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(u8_t evt, bool discardable, k_timeout_t timeout)
{
    696c:	b570      	push	{r4, r5, r6, lr}
    696e:	4604      	mov	r4, r0
	switch (evt) {
    6970:	2c0f      	cmp	r4, #15
{
    6972:	460d      	mov	r5, r1
    6974:	4610      	mov	r0, r2
    6976:	4619      	mov	r1, r3
	switch (evt) {
    6978:	d805      	bhi.n	6986 <bt_buf_get_evt+0x1a>
    697a:	2c0d      	cmp	r4, #13
    697c:	d912      	bls.n	69a4 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    697e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    6982:	f7ff bfcd 	b.w	6920 <bt_buf_get_cmd_complete>
	switch (evt) {
    6986:	2c13      	cmp	r4, #19
    6988:	d10c      	bne.n	69a4 <bt_buf_get_evt+0x38>
			buf = net_buf_alloc(&num_complete_pool, timeout);
    698a:	480b      	ldr	r0, [pc, #44]	; (69b8 <bt_buf_get_evt+0x4c>)
			buf = net_buf_alloc(&discardable_pool, timeout);
    698c:	f00e fefd 	bl	1578a <net_buf_alloc_fixed>
			if (buf) {
    6990:	4604      	mov	r4, r0
    6992:	b128      	cbz	r0, 69a0 <bt_buf_get_evt+0x34>
				net_buf_reserve(buf, BT_BUF_RESERVE);
    6994:	2101      	movs	r1, #1
    6996:	3008      	adds	r0, #8
    6998:	f006 fd4a 	bl	d430 <net_buf_simple_reserve>
    699c:	2301      	movs	r3, #1
    699e:	7523      	strb	r3, [r4, #20]
}
    69a0:	4620      	mov	r0, r4
    69a2:	bd70      	pop	{r4, r5, r6, pc}
			buf = net_buf_alloc(&discardable_pool, timeout);
    69a4:	4602      	mov	r2, r0
    69a6:	460b      	mov	r3, r1
		if (discardable) {
    69a8:	b10d      	cbz	r5, 69ae <bt_buf_get_evt+0x42>
			buf = net_buf_alloc(&discardable_pool, timeout);
    69aa:	4804      	ldr	r0, [pc, #16]	; (69bc <bt_buf_get_evt+0x50>)
    69ac:	e7ee      	b.n	698c <bt_buf_get_evt+0x20>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    69ae:	2001      	movs	r0, #1
}
    69b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    69b4:	f7ff bf80 	b.w	68b8 <bt_buf_get_rx>
    69b8:	20000634 	.word	0x20000634
    69bc:	20000584 	.word	0x20000584

000069c0 <bt_pub_key_gen>:
}
#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_ECC)
int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    69c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    69c2:	4e1b      	ldr	r6, [pc, #108]	; (6a30 <bt_pub_key_gen+0x70>)
    69c4:	f896 306a 	ldrb.w	r3, [r6, #106]	; 0x6a
    69c8:	f003 0306 	and.w	r3, r3, #6
    69cc:	2b06      	cmp	r3, #6
    69ce:	d007      	beq.n	69e0 <bt_pub_key_gen+0x20>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
    69d0:	2157      	movs	r1, #87	; 0x57
    69d2:	4818      	ldr	r0, [pc, #96]	; (6a34 <bt_pub_key_gen+0x74>)
    69d4:	f00b fb98 	bl	12108 <printk>
		return -ENOTSUP;
    69d8:	f06f 0422 	mvn.w	r4, #34	; 0x22
		pub_key_cb = NULL;
		return err;
	}

	return 0;
}
    69dc:	4620      	mov	r0, r4
    69de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	new_cb->_next = pub_key_cb;
    69e0:	4f15      	ldr	r7, [pc, #84]	; (6a38 <bt_pub_key_gen+0x78>)
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    69e2:	2104      	movs	r1, #4
	new_cb->_next = pub_key_cb;
    69e4:	683b      	ldr	r3, [r7, #0]
	pub_key_cb = new_cb;
    69e6:	6038      	str	r0, [r7, #0]
	new_cb->_next = pub_key_cb;
    69e8:	6043      	str	r3, [r0, #4]
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    69ea:	f106 0098 	add.w	r0, r6, #152	; 0x98
    69ee:	f00c ff9e 	bl	1392e <atomic_test_and_set_bit>
    69f2:	4605      	mov	r5, r0
    69f4:	b9d0      	cbnz	r0, 6a2c <bt_pub_key_gen+0x6c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    69f6:	f06f 0108 	mvn.w	r1, #8
    69fa:	f106 0098 	add.w	r0, r6, #152	; 0x98
    69fe:	f00c ffa1 	bl	13944 <atomic_and>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    6a02:	462a      	mov	r2, r5
    6a04:	4629      	mov	r1, r5
    6a06:	f242 0025 	movw	r0, #8229	; 0x2025
    6a0a:	f7fe fc19 	bl	5240 <bt_hci_cmd_send_sync>
	if (err) {
    6a0e:	4604      	mov	r4, r0
    6a10:	2800      	cmp	r0, #0
    6a12:	d0e3      	beq.n	69dc <bt_pub_key_gen+0x1c>
		BT_ERR("Sending LE P256 Public Key command failed");
    6a14:	2145      	movs	r1, #69	; 0x45
    6a16:	4809      	ldr	r0, [pc, #36]	; (6a3c <bt_pub_key_gen+0x7c>)
    6a18:	f00b fb76 	bl	12108 <printk>
    6a1c:	f06f 0110 	mvn.w	r1, #16
    6a20:	f106 0098 	add.w	r0, r6, #152	; 0x98
    6a24:	f00c ff8e 	bl	13944 <atomic_and>
		pub_key_cb = NULL;
    6a28:	603d      	str	r5, [r7, #0]
		return err;
    6a2a:	e7d7      	b.n	69dc <bt_pub_key_gen+0x1c>
		return 0;
    6a2c:	2400      	movs	r4, #0
    6a2e:	e7d5      	b.n	69dc <bt_pub_key_gen+0x1c>
    6a30:	20000000 	.word	0x20000000
    6a34:	00019b94 	.word	0x00019b94
    6a38:	20000c28 	.word	0x20000c28
    6a3c:	00019bb8 	.word	0x00019bb8

00006a40 <bt_pub_key_get>:

const u8_t *bt_pub_key_get(void)
{
    6a40:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    6a42:	4804      	ldr	r0, [pc, #16]	; (6a54 <bt_pub_key_get+0x14>)
    6a44:	f00c ff62 	bl	1390c <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    6a48:	f010 0f08 	tst.w	r0, #8
		return pub_key;
	}

	return NULL;
}
    6a4c:	4802      	ldr	r0, [pc, #8]	; (6a58 <bt_pub_key_get+0x18>)
    6a4e:	bf08      	it	eq
    6a50:	2000      	moveq	r0, #0
    6a52:	bd08      	pop	{r3, pc}
    6a54:	20000098 	.word	0x20000098
    6a58:	20001f28 	.word	0x20001f28

00006a5c <bt_dh_key_gen>:

int bt_dh_key_gen(const u8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    6a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    6a5e:	4d1a      	ldr	r5, [pc, #104]	; (6ac8 <bt_dh_key_gen+0x6c>)
{
    6a60:	4606      	mov	r6, r0
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    6a62:	682b      	ldr	r3, [r5, #0]
    6a64:	b113      	cbz	r3, 6a6c <bt_dh_key_gen+0x10>
		return -EBUSY;
    6a66:	f06f 000f 	mvn.w	r0, #15
		dh_key_cb = NULL;
		return err;
	}

	return 0;
}
    6a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6a6c:	4817      	ldr	r0, [pc, #92]	; (6acc <bt_dh_key_gen+0x70>)
    6a6e:	f00c ff4d 	bl	1390c <atomic_get>
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    6a72:	06c2      	lsls	r2, r0, #27
    6a74:	f3c0 1700 	ubfx	r7, r0, #4, #1
    6a78:	d4f5      	bmi.n	6a66 <bt_dh_key_gen+0xa>
    6a7a:	4814      	ldr	r0, [pc, #80]	; (6acc <bt_dh_key_gen+0x70>)
    6a7c:	f00c ff46 	bl	1390c <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    6a80:	0703      	lsls	r3, r0, #28
    6a82:	d51d      	bpl.n	6ac0 <bt_dh_key_gen+0x64>
	dh_key_cb = cb;
    6a84:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    6a86:	f242 0026 	movw	r0, #8230	; 0x2026
    6a8a:	2140      	movs	r1, #64	; 0x40
    6a8c:	f7fe fb8e 	bl	51ac <bt_hci_cmd_create>
	if (!buf) {
    6a90:	4604      	mov	r4, r0
    6a92:	b918      	cbnz	r0, 6a9c <bt_dh_key_gen+0x40>
		dh_key_cb = NULL;
    6a94:	6028      	str	r0, [r5, #0]
		return -ENOBUFS;
    6a96:	f06f 0036 	mvn.w	r0, #54	; 0x36
    6a9a:	e7e6      	b.n	6a6a <bt_dh_key_gen+0xe>
	cp = net_buf_add(buf, sizeof(*cp));
    6a9c:	2140      	movs	r1, #64	; 0x40
    6a9e:	3008      	adds	r0, #8
    6aa0:	f006 fe96 	bl	d7d0 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    6aa4:	2240      	movs	r2, #64	; 0x40
    6aa6:	4631      	mov	r1, r6
    6aa8:	f00c fe43 	bl	13732 <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    6aac:	463a      	mov	r2, r7
    6aae:	4621      	mov	r1, r4
    6ab0:	f242 0026 	movw	r0, #8230	; 0x2026
    6ab4:	f7fe fbc4 	bl	5240 <bt_hci_cmd_send_sync>
	if (err) {
    6ab8:	2800      	cmp	r0, #0
    6aba:	d0d6      	beq.n	6a6a <bt_dh_key_gen+0xe>
		dh_key_cb = NULL;
    6abc:	602f      	str	r7, [r5, #0]
		return err;
    6abe:	e7d4      	b.n	6a6a <bt_dh_key_gen+0xe>
		return -EADDRNOTAVAIL;
    6ac0:	f06f 0030 	mvn.w	r0, #48	; 0x30
    6ac4:	e7d1      	b.n	6a6a <bt_dh_key_gen+0xe>
    6ac6:	bf00      	nop
    6ac8:	20000c24 	.word	0x20000c24
    6acc:	20000098 	.word	0x20000098

00006ad0 <prng_reseed.constprop.0>:

#include "hci_core.h"

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
    6ad0:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
	u8_t seed[32];
	s64_t extra;
	size_t i;
	int ret;

	for (i = 0; i < (sizeof(seed) / 8); i++) {
    6ad4:	2500      	movs	r5, #0
static int prng_reseed(struct tc_hmac_prng_struct *h)
    6ad6:	b08c      	sub	sp, #48	; 0x30
		struct bt_hci_rp_le_rand *rp;
		struct net_buf *rsp;

		ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    6ad8:	2100      	movs	r1, #0
    6ada:	f242 0018 	movw	r0, #8216	; 0x2018
    6ade:	aa02      	add	r2, sp, #8
    6ae0:	f7fe fbae 	bl	5240 <bt_hci_cmd_send_sync>
		if (ret) {
    6ae4:	4604      	mov	r4, r0
    6ae6:	bb68      	cbnz	r0, 6b44 <prng_reseed.constprop.0+0x74>
			return ret;
		}

		rp = (void *)rsp->data;
    6ae8:	9b02      	ldr	r3, [sp, #8]
		memcpy(&seed[i * 8], rp->rand, 8);
    6aea:	2208      	movs	r2, #8
    6aec:	6899      	ldr	r1, [r3, #8]
    6aee:	ab04      	add	r3, sp, #16
    6af0:	eb03 00c5 	add.w	r0, r3, r5, lsl #3
    6af4:	3101      	adds	r1, #1
    6af6:	f00c fe1c 	bl	13732 <memcpy>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
    6afa:	3501      	adds	r5, #1

		net_buf_unref(rsp);
    6afc:	9802      	ldr	r0, [sp, #8]
    6afe:	f006 fcf5 	bl	d4ec <net_buf_unref>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
    6b02:	2d04      	cmp	r5, #4
    6b04:	d1e8      	bne.n	6ad8 <prng_reseed.constprop.0+0x8>
	return z_impl_k_uptime_ticks();
    6b06:	f00f ff08 	bl	1691a <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    6b0a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    6b0e:	fba0 bc05 	umull	fp, ip, r0, r5
    6b12:	fb05 cc01 	mla	ip, r5, r1, ip
    6b16:	ea4f 32db 	mov.w	r2, fp, lsr #15
    6b1a:	ea42 424c 	orr.w	r2, r2, ip, lsl #17
    6b1e:	ea4f 33dc 	mov.w	r3, ip, lsr #15
	}

	extra = k_uptime_get();
    6b22:	e9cd 2302 	strd	r2, r3, [sp, #8]

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (u8_t *)&extra,
    6b26:	2308      	movs	r3, #8
    6b28:	2220      	movs	r2, #32
    6b2a:	9300      	str	r3, [sp, #0]
    6b2c:	4807      	ldr	r0, [pc, #28]	; (6b4c <prng_reseed.constprop.0+0x7c>)
    6b2e:	446b      	add	r3, sp
    6b30:	a904      	add	r1, sp, #16
    6b32:	f00c fcbd 	bl	134b0 <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
    6b36:	b928      	cbnz	r0, 6b44 <prng_reseed.constprop.0+0x74>
		BT_ERR("Failed to re-seed PRNG");
    6b38:	2145      	movs	r1, #69	; 0x45
    6b3a:	4805      	ldr	r0, [pc, #20]	; (6b50 <prng_reseed.constprop.0+0x80>)
    6b3c:	f00b fae4 	bl	12108 <printk>
    6b40:	f06f 0404 	mvn.w	r4, #4
		return -EIO;
	}

	return 0;
}
    6b44:	4620      	mov	r0, r4
    6b46:	b00c      	add	sp, #48	; 0x30
    6b48:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
    6b4c:	200006c0 	.word	0x200006c0
    6b50:	00019c22 	.word	0x00019c22

00006b54 <sys_memcpy_swap.constprop.0>:
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
{
	u8_t *pdst = (u8_t *)dst;
	const u8_t *psrc = (const u8_t *)src;

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
    6b54:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
    6b56:	b570      	push	{r4, r5, r6, lr}
    6b58:	4604      	mov	r4, r0
    6b5a:	460d      	mov	r5, r1
    6b5c:	f101 0610 	add.w	r6, r1, #16
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
    6b60:	d919      	bls.n	6b96 <sys_memcpy_swap.constprop.0+0x42>
    6b62:	42b0      	cmp	r0, r6
    6b64:	d20e      	bcs.n	6b84 <sys_memcpy_swap.constprop.0+0x30>
    6b66:	490e      	ldr	r1, [pc, #56]	; (6ba0 <sys_memcpy_swap.constprop.0+0x4c>)
    6b68:	f240 2317 	movw	r3, #535	; 0x217
    6b6c:	4a0d      	ldr	r2, [pc, #52]	; (6ba4 <sys_memcpy_swap.constprop.0+0x50>)
    6b6e:	480e      	ldr	r0, [pc, #56]	; (6ba8 <sys_memcpy_swap.constprop.0+0x54>)
    6b70:	f00b faca 	bl	12108 <printk>
    6b74:	480d      	ldr	r0, [pc, #52]	; (6bac <sys_memcpy_swap.constprop.0+0x58>)
    6b76:	f00b fac7 	bl	12108 <printk>
    6b7a:	f240 2117 	movw	r1, #535	; 0x217
    6b7e:	4809      	ldr	r0, [pc, #36]	; (6ba4 <sys_memcpy_swap.constprop.0+0x50>)
    6b80:	f00b fd58 	bl	12634 <assert_post_action>
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
    6b84:	4633      	mov	r3, r6
    6b86:	3c01      	subs	r4, #1
		*pdst++ = *psrc--;
    6b88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
	for (; length > 0; length--) {
    6b8c:	42ab      	cmp	r3, r5
		*pdst++ = *psrc--;
    6b8e:	f804 2f01 	strb.w	r2, [r4, #1]!
	for (; length > 0; length--) {
    6b92:	d1f9      	bne.n	6b88 <sys_memcpy_swap.constprop.0+0x34>
	}
}
    6b94:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
    6b96:	d0e6      	beq.n	6b66 <sys_memcpy_swap.constprop.0+0x12>
    6b98:	f100 0310 	add.w	r3, r0, #16
    6b9c:	4299      	cmp	r1, r3
    6b9e:	e7e1      	b.n	6b64 <sys_memcpy_swap.constprop.0+0x10>
    6ba0:	00019c69 	.word	0x00019c69
    6ba4:	00019c3e 	.word	0x00019c3e
    6ba8:	00017d82 	.word	0x00017d82
    6bac:	00019cc0 	.word	0x00019cc0

00006bb0 <prng_init>:

int prng_init(void)
{
    6bb0:	b513      	push	{r0, r1, r4, lr}
	struct bt_hci_rp_le_rand *rp;
	struct net_buf *rsp;
	int ret;

	/* Check first that HCI_LE_Rand is supported */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    6bb2:	4b13      	ldr	r3, [pc, #76]	; (6c00 <prng_init+0x50>)
    6bb4:	f993 3063 	ldrsb.w	r3, [r3, #99]	; 0x63
    6bb8:	2b00      	cmp	r3, #0
    6bba:	da1d      	bge.n	6bf8 <prng_init+0x48>
		return -ENOTSUP;
	}

	ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    6bbc:	2100      	movs	r1, #0
    6bbe:	f242 0018 	movw	r0, #8216	; 0x2018
    6bc2:	aa01      	add	r2, sp, #4
    6bc4:	f7fe fb3c 	bl	5240 <bt_hci_cmd_send_sync>
	if (ret) {
    6bc8:	b988      	cbnz	r0, 6bee <prng_init+0x3e>
		return ret;
	}

	rp = (void *)rsp->data;
    6bca:	9b01      	ldr	r3, [sp, #4]

	ret = tc_hmac_prng_init(&prng, rp->rand, sizeof(rp->rand));
    6bcc:	2208      	movs	r2, #8
    6bce:	6899      	ldr	r1, [r3, #8]
    6bd0:	480c      	ldr	r0, [pc, #48]	; (6c04 <prng_init+0x54>)
    6bd2:	3101      	adds	r1, #1
    6bd4:	f00c fc4c 	bl	13470 <tc_hmac_prng_init>
    6bd8:	4604      	mov	r4, r0

	net_buf_unref(rsp);
    6bda:	9801      	ldr	r0, [sp, #4]
    6bdc:	f006 fc86 	bl	d4ec <net_buf_unref>

	if (ret == TC_CRYPTO_FAIL) {
    6be0:	b93c      	cbnz	r4, 6bf2 <prng_init+0x42>
		BT_ERR("Failed to initialize PRNG");
    6be2:	4809      	ldr	r0, [pc, #36]	; (6c08 <prng_init+0x58>)
    6be4:	2145      	movs	r1, #69	; 0x45
    6be6:	f00b fa8f 	bl	12108 <printk>
		return -EIO;
    6bea:	f06f 0004 	mvn.w	r0, #4
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
    6bee:	b002      	add	sp, #8
    6bf0:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
    6bf2:	f7ff ff6d 	bl	6ad0 <prng_reseed.constprop.0>
    6bf6:	e7fa      	b.n	6bee <prng_init+0x3e>
		return -ENOTSUP;
    6bf8:	f06f 0022 	mvn.w	r0, #34	; 0x22
    6bfc:	e7f7      	b.n	6bee <prng_init+0x3e>
    6bfe:	bf00      	nop
    6c00:	20000000 	.word	0x20000000
    6c04:	200006c0 	.word	0x200006c0
    6c08:	00019cf2 	.word	0x00019cf2

00006c0c <bt_rand>:

int bt_rand(void *buf, size_t len)
{
    6c0c:	b538      	push	{r3, r4, r5, lr}
	int ret;

	ret = tc_hmac_prng_generate(buf, len, &prng);
    6c0e:	4a0a      	ldr	r2, [pc, #40]	; (6c38 <bt_rand+0x2c>)
{
    6c10:	4604      	mov	r4, r0
    6c12:	460d      	mov	r5, r1
	ret = tc_hmac_prng_generate(buf, len, &prng);
    6c14:	f00c fc65 	bl	134e2 <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
    6c18:	1c43      	adds	r3, r0, #1
    6c1a:	d107      	bne.n	6c2c <bt_rand+0x20>
		ret = prng_reseed(&prng);
    6c1c:	f7ff ff58 	bl	6ad0 <prng_reseed.constprop.0>
		if (ret) {
    6c20:	b948      	cbnz	r0, 6c36 <bt_rand+0x2a>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
    6c22:	4629      	mov	r1, r5
    6c24:	4620      	mov	r0, r4
    6c26:	4a04      	ldr	r2, [pc, #16]	; (6c38 <bt_rand+0x2c>)
    6c28:	f00c fc5b 	bl	134e2 <tc_hmac_prng_generate>
	}

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
    6c2c:	2801      	cmp	r0, #1
    6c2e:	bf14      	ite	ne
    6c30:	f06f 0004 	mvnne.w	r0, #4
    6c34:	2000      	moveq	r0, #0
	}

	return -EIO;
}
    6c36:	bd38      	pop	{r3, r4, r5, pc}
    6c38:	200006c0 	.word	0x200006c0

00006c3c <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    6c3c:	2300      	movs	r3, #0
{
    6c3e:	4601      	mov	r1, r0
	tx->user_data = NULL;
    6c40:	e9c0 3301 	strd	r3, r3, [r0, #4]
	tx->pending_no_cb = 0U;
    6c44:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    6c46:	4801      	ldr	r0, [pc, #4]	; (6c4c <tx_free+0x10>)
    6c48:	f00f bd9f 	b.w	1678a <k_queue_append>
    6c4c:	200004e4 	.word	0x200004e4

00006c50 <notify_connected>:
{
    6c50:	b538      	push	{r3, r4, r5, lr}
    6c52:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    6c54:	4b08      	ldr	r3, [pc, #32]	; (6c78 <notify_connected+0x28>)
    6c56:	681d      	ldr	r5, [r3, #0]
    6c58:	7b21      	ldrb	r1, [r4, #12]
    6c5a:	b92d      	cbnz	r5, 6c68 <notify_connected+0x18>
	if (!conn->err) {
    6c5c:	b951      	cbnz	r1, 6c74 <notify_connected+0x24>
		bt_gatt_connected(conn);
    6c5e:	4620      	mov	r0, r4
}
    6c60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
    6c64:	f004 bcfa 	b.w	b65c <bt_gatt_connected>
		if (cb->connected) {
    6c68:	682b      	ldr	r3, [r5, #0]
    6c6a:	b10b      	cbz	r3, 6c70 <notify_connected+0x20>
			cb->connected(conn, conn->err);
    6c6c:	4620      	mov	r0, r4
    6c6e:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    6c70:	69ad      	ldr	r5, [r5, #24]
    6c72:	e7f1      	b.n	6c58 <notify_connected+0x8>
}
    6c74:	bd38      	pop	{r3, r4, r5, pc}
    6c76:	bf00      	nop
    6c78:	20000d28 	.word	0x20000d28

00006c7c <send_frag>:
	return 0;
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    6c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6c80:	4604      	mov	r4, r0
    6c82:	460e      	mov	r6, r1
    6c84:	4691      	mov	r9, r2
    6c86:	461f      	mov	r7, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    6c88:	694d      	ldr	r5, [r1, #20]
	return z_impl_k_sem_take(sem, timeout);
    6c8a:	f04f 33ff 	mov.w	r3, #4294967295
    6c8e:	f04f 32ff 	mov.w	r2, #4294967295
    6c92:	4847      	ldr	r0, [pc, #284]	; (6db0 <send_frag+0x134>)
    6c94:	f009 fff8 	bl	10c88 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    6c98:	7b63      	ldrb	r3, [r4, #13]
    6c9a:	2b06      	cmp	r3, #6
    6c9c:	d148      	bne.n	6d30 <send_frag+0xb4>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    6c9e:	2104      	movs	r1, #4
    6ca0:	f106 0008 	add.w	r0, r6, #8
    6ca4:	f006 fd30 	bl	d708 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    6ca8:	8822      	ldrh	r2, [r4, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    6caa:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    6cac:	ea42 3209 	orr.w	r2, r2, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    6cb0:	3b04      	subs	r3, #4
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    6cb2:	8002      	strh	r2, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    6cb4:	8043      	strh	r3, [r0, #2]
	__asm__ volatile(
    6cb6:	f04f 0320 	mov.w	r3, #32
    6cba:	f3ef 8211 	mrs	r2, BASEPRI
    6cbe:	f383 8811 	msr	BASEPRI, r3
    6cc2:	f3bf 8f6f 	isb	sy

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
    6cc6:	2d00      	cmp	r5, #0
    6cc8:	d044      	beq.n	6d54 <send_frag+0xd8>
	parent->next = child;
    6cca:	2300      	movs	r3, #0
    6ccc:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    6cce:	69a3      	ldr	r3, [r4, #24]
    6cd0:	2b00      	cmp	r3, #0
    6cd2:	d13c      	bne.n	6d4e <send_frag+0xd2>
	list->head = node;
    6cd4:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    6cd8:	f382 8811 	msr	BASEPRI, r2
    6cdc:	f3bf 8f6f 	isb	sy
    6ce0:	2302      	movs	r3, #2
	}
	irq_unlock(key);

	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	err = bt_send(buf);
    6ce2:	4630      	mov	r0, r6
    6ce4:	7533      	strb	r3, [r6, #20]
    6ce6:	f7fe ffdb 	bl	5ca0 <bt_send>
	if (err) {
    6cea:	4602      	mov	r2, r0
    6cec:	2800      	cmp	r0, #0
    6cee:	d05c      	beq.n	6daa <send_frag+0x12e>
		BT_ERR("Unable to send to driver (err %d)", err);
    6cf0:	2145      	movs	r1, #69	; 0x45
    6cf2:	4830      	ldr	r0, [pc, #192]	; (6db4 <send_frag+0x138>)
    6cf4:	f00b fa08 	bl	12108 <printk>
	__asm__ volatile(
    6cf8:	f04f 0320 	mov.w	r3, #32
    6cfc:	f3ef 8911 	mrs	r9, BASEPRI
    6d00:	f383 8811 	msr	BASEPRI, r3
    6d04:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
    6d08:	2d00      	cmp	r5, #0
    6d0a:	d039      	beq.n	6d80 <send_frag+0x104>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6d0c:	2200      	movs	r2, #0
    6d0e:	6963      	ldr	r3, [r4, #20]
    6d10:	b153      	cbz	r3, 6d28 <send_frag+0xac>
    6d12:	429d      	cmp	r5, r3
    6d14:	d131      	bne.n	6d7a <send_frag+0xfe>
Z_GENLIST_REMOVE(slist, snode)
    6d16:	682b      	ldr	r3, [r5, #0]
    6d18:	bb4a      	cbnz	r2, 6d6e <send_frag+0xf2>
    6d1a:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
    6d1c:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    6d1e:	4295      	cmp	r5, r2
    6d20:	d100      	bne.n	6d24 <send_frag+0xa8>
	list->tail = node;
    6d22:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    6d24:	2300      	movs	r3, #0
    6d26:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    6d28:	f389 8811 	msr	BASEPRI, r9
    6d2c:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    6d30:	481f      	ldr	r0, [pc, #124]	; (6db0 <send_frag+0x134>)
    6d32:	f009 ff65 	bl	10c00 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
    6d36:	b115      	cbz	r5, 6d3e <send_frag+0xc2>
		tx_free(tx);
    6d38:	4628      	mov	r0, r5
    6d3a:	f7ff ff7f 	bl	6c3c <tx_free>
	}

	if (always_consume) {
    6d3e:	b11f      	cbz	r7, 6d48 <send_frag+0xcc>
		net_buf_unref(buf);
    6d40:	4630      	mov	r0, r6
    6d42:	f006 fbd3 	bl	d4ec <net_buf_unref>
	}
	return false;
    6d46:	2700      	movs	r7, #0
}
    6d48:	4638      	mov	r0, r7
    6d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6d4e:	601d      	str	r5, [r3, #0]
	list->tail = node;
    6d50:	61a5      	str	r5, [r4, #24]
}
    6d52:	e7c1      	b.n	6cd8 <send_frag+0x5c>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
    6d54:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
    6d56:	b133      	cbz	r3, 6d66 <send_frag+0xea>
			pending_no_cb = &tail_tx->pending_no_cb;
    6d58:	f103 080c 	add.w	r8, r3, #12
    6d5c:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    6d5e:	3301      	adds	r3, #1
    6d60:	f8c8 3000 	str.w	r3, [r8]
    6d64:	e7b8      	b.n	6cd8 <send_frag+0x5c>
			pending_no_cb = &conn->pending_no_cb;
    6d66:	69e3      	ldr	r3, [r4, #28]
    6d68:	f104 081c 	add.w	r8, r4, #28
    6d6c:	e7f7      	b.n	6d5e <send_frag+0xe2>
	parent->next = child;
    6d6e:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    6d70:	69a3      	ldr	r3, [r4, #24]
    6d72:	429d      	cmp	r5, r3
	list->tail = node;
    6d74:	bf08      	it	eq
    6d76:	61a2      	streq	r2, [r4, #24]
}
    6d78:	e7d4      	b.n	6d24 <send_frag+0xa8>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    6d7a:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6d7c:	681b      	ldr	r3, [r3, #0]
    6d7e:	e7c7      	b.n	6d10 <send_frag+0x94>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
    6d80:	f8d8 3000 	ldr.w	r3, [r8]
    6d84:	b95b      	cbnz	r3, 6d9e <send_frag+0x122>
    6d86:	490c      	ldr	r1, [pc, #48]	; (6db8 <send_frag+0x13c>)
    6d88:	480c      	ldr	r0, [pc, #48]	; (6dbc <send_frag+0x140>)
    6d8a:	f240 537a 	movw	r3, #1402	; 0x57a
    6d8e:	4a0c      	ldr	r2, [pc, #48]	; (6dc0 <send_frag+0x144>)
    6d90:	f00b f9ba 	bl	12108 <printk>
    6d94:	f240 517a 	movw	r1, #1402	; 0x57a
    6d98:	4809      	ldr	r0, [pc, #36]	; (6dc0 <send_frag+0x144>)
    6d9a:	f00b fc4b 	bl	12634 <assert_post_action>
			(*pending_no_cb)--;
    6d9e:	f8d8 3000 	ldr.w	r3, [r8]
    6da2:	3b01      	subs	r3, #1
    6da4:	f8c8 3000 	str.w	r3, [r8]
    6da8:	e7be      	b.n	6d28 <send_frag+0xac>
	return true;
    6daa:	2701      	movs	r7, #1
    6dac:	e7cc      	b.n	6d48 <send_frag+0xcc>
    6dae:	bf00      	nop
    6db0:	200000b4 	.word	0x200000b4
    6db4:	000196fb 	.word	0x000196fb
    6db8:	00019d4b 	.word	0x00019d4b
    6dbc:	00017d82 	.word	0x00017d82
    6dc0:	00019d1b 	.word	0x00019d1b

00006dc4 <conn_update_timeout>:
{
    6dc4:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    6dc6:	f810 3c4f 	ldrb.w	r3, [r0, #-79]
{
    6dca:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED) {
    6dcc:	b9a3      	cbnz	r3, 6df8 <conn_update_timeout+0x34>
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, update_work);
    6dce:	f1a0 065c 	sub.w	r6, r0, #92	; 0x5c
		bt_l2cap_disconnected(conn);
    6dd2:	4630      	mov	r0, r6
    6dd4:	f00d f99e 	bl	14114 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    6dd8:	4b12      	ldr	r3, [pc, #72]	; (6e24 <conn_update_timeout+0x60>)
    6dda:	681d      	ldr	r5, [r3, #0]
    6ddc:	b925      	cbnz	r5, 6de8 <conn_update_timeout+0x24>
	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_val_t old = atomic_dec(&conn->ref);
    6dde:	1f20      	subs	r0, r4, #4
}
    6de0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	atomic_val_t old = atomic_dec(&conn->ref);
    6de4:	f00c bf7b 	b.w	13cde <atomic_dec>
		if (cb->disconnected) {
    6de8:	686b      	ldr	r3, [r5, #4]
    6dea:	b11b      	cbz	r3, 6df4 <conn_update_timeout+0x30>
			cb->disconnected(conn, conn->err);
    6dec:	4630      	mov	r0, r6
    6dee:	f814 1c50 	ldrb.w	r1, [r4, #-80]
    6df2:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    6df4:	69ad      	ldr	r5, [r5, #24]
    6df6:	e7f1      	b.n	6ddc <conn_update_timeout+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
    6df8:	f810 3c5a 	ldrb.w	r3, [r0, #-90]
    6dfc:	2b01      	cmp	r3, #1
    6dfe:	d110      	bne.n	6e22 <conn_update_timeout+0x5e>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    6e00:	f810 3c59 	ldrb.w	r3, [r0, #-89]
    6e04:	b91b      	cbnz	r3, 6e0e <conn_update_timeout+0x4a>
}
    6e06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_le_create_conn_cancel();
    6e0a:	f7fe bc0b 	b.w	5624 <bt_le_create_conn_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6e0e:	f1a0 0458 	sub.w	r4, r0, #88	; 0x58
    6e12:	e8d4 3fef 	ldaex	r3, [r4]
    6e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6e1a:	e8c4 3fe2 	stlex	r2, r3, [r4]
    6e1e:	2a00      	cmp	r2, #0
    6e20:	d1f7      	bne.n	6e12 <conn_update_timeout+0x4e>
}
    6e22:	bd70      	pop	{r4, r5, r6, pc}
    6e24:	20000d28 	.word	0x20000d28

00006e28 <conn_cleanup>:
{
    6e28:	b570      	push	{r4, r5, r6, lr}
    6e2a:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    6e2c:	f100 0634 	add.w	r6, r0, #52	; 0x34
    6e30:	2200      	movs	r2, #0
    6e32:	2300      	movs	r3, #0
    6e34:	4630      	mov	r0, r6
    6e36:	f006 fac7 	bl	d3c8 <net_buf_get>
    6e3a:	4605      	mov	r5, r0
    6e3c:	bb50      	cbnz	r0, 6e94 <conn_cleanup+0x6c>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
    6e3e:	6963      	ldr	r3, [r4, #20]
    6e40:	b173      	cbz	r3, 6e60 <conn_cleanup+0x38>
    6e42:	4918      	ldr	r1, [pc, #96]	; (6ea4 <conn_cleanup+0x7c>)
    6e44:	f44f 63bd 	mov.w	r3, #1512	; 0x5e8
    6e48:	4a17      	ldr	r2, [pc, #92]	; (6ea8 <conn_cleanup+0x80>)
    6e4a:	4818      	ldr	r0, [pc, #96]	; (6eac <conn_cleanup+0x84>)
    6e4c:	f00b f95c 	bl	12108 <printk>
    6e50:	4817      	ldr	r0, [pc, #92]	; (6eb0 <conn_cleanup+0x88>)
    6e52:	f00b f959 	bl	12108 <printk>
    6e56:	f44f 61bd 	mov.w	r1, #1512	; 0x5e8
    6e5a:	4813      	ldr	r0, [pc, #76]	; (6ea8 <conn_cleanup+0x80>)
    6e5c:	f00b fbea 	bl	12634 <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
    6e60:	69e3      	ldr	r3, [r4, #28]
    6e62:	b15b      	cbz	r3, 6e7c <conn_cleanup+0x54>
    6e64:	4913      	ldr	r1, [pc, #76]	; (6eb4 <conn_cleanup+0x8c>)
    6e66:	4811      	ldr	r0, [pc, #68]	; (6eac <conn_cleanup+0x84>)
    6e68:	f240 53e9 	movw	r3, #1513	; 0x5e9
    6e6c:	4a0e      	ldr	r2, [pc, #56]	; (6ea8 <conn_cleanup+0x80>)
    6e6e:	f00b f94b 	bl	12108 <printk>
    6e72:	f240 51e9 	movw	r1, #1513	; 0x5e9
    6e76:	480c      	ldr	r0, [pc, #48]	; (6ea8 <conn_cleanup+0x80>)
    6e78:	f00b fbdc 	bl	12634 <assert_post_action>
	bt_conn_reset_rx_state(conn);
    6e7c:	4620      	mov	r0, r4
    6e7e:	f00c ff23 	bl	13cc8 <bt_conn_reset_rx_state>
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					k_timeout_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    6e82:	f104 015c 	add.w	r1, r4, #92	; 0x5c
    6e86:	2200      	movs	r2, #0
}
    6e88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6e8c:	2300      	movs	r3, #0
    6e8e:	480a      	ldr	r0, [pc, #40]	; (6eb8 <conn_cleanup+0x90>)
    6e90:	f00a b91a 	b.w	110c8 <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
    6e94:	6968      	ldr	r0, [r5, #20]
    6e96:	b108      	cbz	r0, 6e9c <conn_cleanup+0x74>
			tx_free(tx_data(buf)->tx);
    6e98:	f7ff fed0 	bl	6c3c <tx_free>
		net_buf_unref(buf);
    6e9c:	4628      	mov	r0, r5
    6e9e:	f006 fb25 	bl	d4ec <net_buf_unref>
    6ea2:	e7c5      	b.n	6e30 <conn_cleanup+0x8>
    6ea4:	00019d5e 	.word	0x00019d5e
    6ea8:	00019d1b 	.word	0x00019d1b
    6eac:	00017d82 	.word	0x00017d82
    6eb0:	00019d84 	.word	0x00019d84
    6eb4:	00019d99 	.word	0x00019d99
    6eb8:	20001dcc 	.word	0x20001dcc

00006ebc <bt_conn_get_pkts>:
}
    6ebc:	4800      	ldr	r0, [pc, #0]	; (6ec0 <bt_conn_get_pkts+0x4>)
    6ebe:	4770      	bx	lr
    6ec0:	200000b4 	.word	0x200000b4

00006ec4 <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    6ec4:	1d03      	adds	r3, r0, #4
{
    6ec6:	b570      	push	{r4, r5, r6, lr}
    6ec8:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    6eca:	4618      	mov	r0, r3
    6ecc:	f00c fef9 	bl	13cc2 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    6ed0:	0582      	lsls	r2, r0, #22
    6ed2:	d515      	bpl.n	6f00 <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
    6ed4:	f8b4 2092 	ldrh.w	r2, [r4, #146]	; 0x92
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    6ed8:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    6edc:	4291      	cmp	r1, r2
    6ede:	d80f      	bhi.n	6f00 <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
    6ee0:	f8b4 1096 	ldrh.w	r1, [r4, #150]	; 0x96
    6ee4:	4291      	cmp	r1, r2
    6ee6:	d30b      	bcc.n	6f00 <notify_le_param_updated+0x3c>
	    conn->le.latency == conn->le.pending_latency &&
    6ee8:	e9d4 1226 	ldrd	r1, r2, [r4, #152]	; 0x98
    6eec:	4291      	cmp	r1, r2
    6eee:	d107      	bne.n	6f00 <notify_le_param_updated+0x3c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6ef0:	e8d3 2fef 	ldaex	r2, [r3]
    6ef4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    6ef8:	e8c3 2fe1 	stlex	r1, r2, [r3]
    6efc:	2900      	cmp	r1, #0
    6efe:	d1f7      	bne.n	6ef0 <notify_le_param_updated+0x2c>
	for (cb = callback_list; cb; cb = cb->_next) {
    6f00:	4b07      	ldr	r3, [pc, #28]	; (6f20 <notify_le_param_updated+0x5c>)
    6f02:	681d      	ldr	r5, [r3, #0]
    6f04:	b905      	cbnz	r5, 6f08 <notify_le_param_updated+0x44>
}
    6f06:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    6f08:	68ee      	ldr	r6, [r5, #12]
    6f0a:	b13e      	cbz	r6, 6f1c <notify_le_param_updated+0x58>
			cb->le_param_updated(conn, conn->le.interval,
    6f0c:	4620      	mov	r0, r4
    6f0e:	f8b4 309a 	ldrh.w	r3, [r4, #154]	; 0x9a
    6f12:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
    6f16:	f8b4 1092 	ldrh.w	r1, [r4, #146]	; 0x92
    6f1a:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    6f1c:	69ad      	ldr	r5, [r5, #24]
    6f1e:	e7f1      	b.n	6f04 <notify_le_param_updated+0x40>
    6f20:	20000d28 	.word	0x20000d28

00006f24 <le_param_req>:
{
    6f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6f26:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    6f28:	4608      	mov	r0, r1
{
    6f2a:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    6f2c:	f00c fdc4 	bl	13ab8 <bt_le_conn_params_valid>
    6f30:	4604      	mov	r4, r0
    6f32:	b910      	cbnz	r0, 6f3a <le_param_req+0x16>
		return false;
    6f34:	2400      	movs	r4, #0
}
    6f36:	4620      	mov	r0, r4
    6f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    6f3a:	4b09      	ldr	r3, [pc, #36]	; (6f60 <le_param_req+0x3c>)
    6f3c:	681e      	ldr	r6, [r3, #0]
    6f3e:	2e00      	cmp	r6, #0
    6f40:	d0f9      	beq.n	6f36 <le_param_req+0x12>
		if (!cb->le_param_req) {
    6f42:	68b3      	ldr	r3, [r6, #8]
    6f44:	b90b      	cbnz	r3, 6f4a <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    6f46:	69b6      	ldr	r6, [r6, #24]
    6f48:	e7f9      	b.n	6f3e <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    6f4a:	4629      	mov	r1, r5
    6f4c:	4638      	mov	r0, r7
    6f4e:	4798      	blx	r3
    6f50:	2800      	cmp	r0, #0
    6f52:	d0ef      	beq.n	6f34 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    6f54:	4628      	mov	r0, r5
    6f56:	f00c fdaf 	bl	13ab8 <bt_le_conn_params_valid>
    6f5a:	2800      	cmp	r0, #0
    6f5c:	d1f3      	bne.n	6f46 <le_param_req+0x22>
    6f5e:	e7e9      	b.n	6f34 <le_param_req+0x10>
    6f60:	20000d28 	.word	0x20000d28

00006f64 <bt_conn_identity_resolved>:
{
    6f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->role == BT_HCI_ROLE_MASTER) {
    6f66:	78c3      	ldrb	r3, [r0, #3]
{
    6f68:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
    6f6a:	b93b      	cbnz	r3, 6f7c <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
    6f6c:	f100 068a 	add.w	r6, r0, #138	; 0x8a
	for (cb = callback_list; cb; cb = cb->_next) {
    6f70:	4b08      	ldr	r3, [pc, #32]	; (6f94 <bt_conn_identity_resolved+0x30>)
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    6f72:	f104 077c 	add.w	r7, r4, #124	; 0x7c
	for (cb = callback_list; cb; cb = cb->_next) {
    6f76:	681d      	ldr	r5, [r3, #0]
    6f78:	b91d      	cbnz	r5, 6f82 <bt_conn_identity_resolved+0x1e>
}
    6f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
    6f7c:	f100 0683 	add.w	r6, r0, #131	; 0x83
    6f80:	e7f6      	b.n	6f70 <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
    6f82:	692b      	ldr	r3, [r5, #16]
    6f84:	b11b      	cbz	r3, 6f8e <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    6f86:	463a      	mov	r2, r7
    6f88:	4631      	mov	r1, r6
    6f8a:	4620      	mov	r0, r4
    6f8c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    6f8e:	69ad      	ldr	r5, [r5, #24]
    6f90:	e7f2      	b.n	6f78 <bt_conn_identity_resolved+0x14>
    6f92:	bf00      	nop
    6f94:	20000d28 	.word	0x20000d28

00006f98 <bt_conn_security_changed>:
{
    6f98:	b570      	push	{r4, r5, r6, lr}
    6f9a:	4605      	mov	r5, r0
    6f9c:	460e      	mov	r6, r1
	for (cb = callback_list; cb; cb = cb->_next) {
    6f9e:	4b06      	ldr	r3, [pc, #24]	; (6fb8 <bt_conn_security_changed+0x20>)
    6fa0:	681c      	ldr	r4, [r3, #0]
    6fa2:	b904      	cbnz	r4, 6fa6 <bt_conn_security_changed+0xe>
}
    6fa4:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->security_changed) {
    6fa6:	6963      	ldr	r3, [r4, #20]
    6fa8:	b11b      	cbz	r3, 6fb2 <bt_conn_security_changed+0x1a>
			cb->security_changed(conn, conn->sec_level, err);
    6faa:	4632      	mov	r2, r6
    6fac:	4628      	mov	r0, r5
    6fae:	7a69      	ldrb	r1, [r5, #9]
    6fb0:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    6fb2:	69a4      	ldr	r4, [r4, #24]
    6fb4:	e7f5      	b.n	6fa2 <bt_conn_security_changed+0xa>
    6fb6:	bf00      	nop
    6fb8:	20000d28 	.word	0x20000d28

00006fbc <bt_conn_cb_register>:
	cb->_next = callback_list;
    6fbc:	4b02      	ldr	r3, [pc, #8]	; (6fc8 <bt_conn_cb_register+0xc>)
    6fbe:	681a      	ldr	r2, [r3, #0]
	callback_list = cb;
    6fc0:	6018      	str	r0, [r3, #0]
	cb->_next = callback_list;
    6fc2:	6182      	str	r2, [r0, #24]
}
    6fc4:	4770      	bx	lr
    6fc6:	bf00      	nop
    6fc8:	20000d28 	.word	0x20000d28

00006fcc <bt_conn_recv>:
{
    6fcc:	b570      	push	{r4, r5, r6, lr}
    6fce:	4616      	mov	r6, r2
    6fd0:	4604      	mov	r4, r0
    6fd2:	460d      	mov	r5, r1
	tx_notify(conn);
    6fd4:	f00c fe95 	bl	13d02 <tx_notify>
	switch (flags) {
    6fd8:	2e01      	cmp	r6, #1
    6fda:	d015      	beq.n	7008 <bt_conn_recv+0x3c>
    6fdc:	2e02      	cmp	r6, #2
    6fde:	d14e      	bne.n	707e <bt_conn_recv+0xb2>
		len = sys_le16_to_cpu(hdr->len);
    6fe0:	68ab      	ldr	r3, [r5, #8]
    6fe2:	881e      	ldrh	r6, [r3, #0]
		if (conn->rx_len) {
    6fe4:	89e3      	ldrh	r3, [r4, #14]
    6fe6:	b133      	cbz	r3, 6ff6 <bt_conn_recv+0x2a>
			BT_ERR("Unexpected first L2CAP frame");
    6fe8:	482b      	ldr	r0, [pc, #172]	; (7098 <bt_conn_recv+0xcc>)
    6fea:	2145      	movs	r1, #69	; 0x45
    6fec:	f00b f88c 	bl	12108 <printk>
			bt_conn_reset_rx_state(conn);
    6ff0:	4620      	mov	r0, r4
    6ff2:	f00c fe69 	bl	13cc8 <bt_conn_reset_rx_state>
		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    6ff6:	89ab      	ldrh	r3, [r5, #12]
    6ff8:	1af3      	subs	r3, r6, r3
    6ffa:	3304      	adds	r3, #4
    6ffc:	b29b      	uxth	r3, r3
    6ffe:	81e3      	strh	r3, [r4, #14]
		if (conn->rx_len) {
    7000:	2b00      	cmp	r3, #0
    7002:	d031      	beq.n	7068 <bt_conn_recv+0x9c>
			conn->rx = buf;
    7004:	6125      	str	r5, [r4, #16]
}
    7006:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->rx_len) {
    7008:	89e3      	ldrh	r3, [r4, #14]
    700a:	b95b      	cbnz	r3, 7024 <bt_conn_recv+0x58>
			BT_ERR("Unexpected L2CAP continuation");
    700c:	2145      	movs	r1, #69	; 0x45
    700e:	4823      	ldr	r0, [pc, #140]	; (709c <bt_conn_recv+0xd0>)
			BT_ERR("L2CAP data overflow");
    7010:	f00b f87a 	bl	12108 <printk>
			bt_conn_reset_rx_state(conn);
    7014:	4620      	mov	r0, r4
    7016:	f00c fe57 	bl	13cc8 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    701a:	4628      	mov	r0, r5
}
    701c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    7020:	f006 ba64 	b.w	d4ec <net_buf_unref>
		if (buf->len > conn->rx_len) {
    7024:	89ae      	ldrh	r6, [r5, #12]
    7026:	42b3      	cmp	r3, r6
    7028:	d202      	bcs.n	7030 <bt_conn_recv+0x64>
			BT_ERR("L2CAP data overflow");
    702a:	2145      	movs	r1, #69	; 0x45
    702c:	481c      	ldr	r0, [pc, #112]	; (70a0 <bt_conn_recv+0xd4>)
    702e:	e7ef      	b.n	7010 <bt_conn_recv+0x44>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    7030:	6920      	ldr	r0, [r4, #16]
    7032:	3008      	adds	r0, #8
    7034:	f00e fbd2 	bl	157dc <net_buf_simple_tailroom>
    7038:	4286      	cmp	r6, r0
    703a:	d902      	bls.n	7042 <bt_conn_recv+0x76>
			BT_ERR("Not enough buffer space for L2CAP data");
    703c:	2145      	movs	r1, #69	; 0x45
    703e:	4819      	ldr	r0, [pc, #100]	; (70a4 <bt_conn_recv+0xd8>)
    7040:	e7e6      	b.n	7010 <bt_conn_recv+0x44>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    7042:	6920      	ldr	r0, [r4, #16]
    7044:	89aa      	ldrh	r2, [r5, #12]
    7046:	68a9      	ldr	r1, [r5, #8]
    7048:	3008      	adds	r0, #8
    704a:	f00e fbcf 	bl	157ec <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    704e:	89e3      	ldrh	r3, [r4, #14]
    7050:	89aa      	ldrh	r2, [r5, #12]
		net_buf_unref(buf);
    7052:	4628      	mov	r0, r5
		conn->rx_len -= buf->len;
    7054:	1a9b      	subs	r3, r3, r2
    7056:	81e3      	strh	r3, [r4, #14]
		net_buf_unref(buf);
    7058:	f006 fa48 	bl	d4ec <net_buf_unref>
		if (conn->rx_len) {
    705c:	89e3      	ldrh	r3, [r4, #14]
    705e:	2b00      	cmp	r3, #0
    7060:	d1d1      	bne.n	7006 <bt_conn_recv+0x3a>
		buf = conn->rx;
    7062:	6925      	ldr	r5, [r4, #16]
		conn->rx_len = 0U;
    7064:	81e3      	strh	r3, [r4, #14]
		conn->rx = NULL;
    7066:	6123      	str	r3, [r4, #16]
	len = sys_le16_to_cpu(hdr->len);
    7068:	68ab      	ldr	r3, [r5, #8]
    706a:	881a      	ldrh	r2, [r3, #0]
	if (sizeof(*hdr) + len != buf->len) {
    706c:	89ab      	ldrh	r3, [r5, #12]
    706e:	1d11      	adds	r1, r2, #4
    7070:	4299      	cmp	r1, r3
    7072:	d00a      	beq.n	708a <bt_conn_recv+0xbe>
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
    7074:	2145      	movs	r1, #69	; 0x45
    7076:	480c      	ldr	r0, [pc, #48]	; (70a8 <bt_conn_recv+0xdc>)
    7078:	f00b f846 	bl	12108 <printk>
		net_buf_unref(buf);
    707c:	e7cd      	b.n	701a <bt_conn_recv+0x4e>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    707e:	4632      	mov	r2, r6
    7080:	2145      	movs	r1, #69	; 0x45
    7082:	480a      	ldr	r0, [pc, #40]	; (70ac <bt_conn_recv+0xe0>)
    7084:	f00b f840 	bl	12108 <printk>
		bt_conn_reset_rx_state(conn);
    7088:	e7c4      	b.n	7014 <bt_conn_recv+0x48>
	bt_l2cap_recv(conn, buf);
    708a:	4629      	mov	r1, r5
    708c:	4620      	mov	r0, r4
}
    708e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    7092:	f000 bfcf 	b.w	8034 <bt_l2cap_recv>
    7096:	bf00      	nop
    7098:	00019db2 	.word	0x00019db2
    709c:	00019dd4 	.word	0x00019dd4
    70a0:	00019df7 	.word	0x00019df7
    70a4:	00019e10 	.word	0x00019e10
    70a8:	00019e5f 	.word	0x00019e5f
    70ac:	00019e3c 	.word	0x00019e3c

000070b0 <bt_conn_send_cb>:
{
    70b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    70b4:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    70b6:	7b43      	ldrb	r3, [r0, #13]
{
    70b8:	4606      	mov	r6, r0
	if (conn->state != BT_CONN_CONNECTED) {
    70ba:	2b06      	cmp	r3, #6
{
    70bc:	460d      	mov	r5, r1
    70be:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    70c0:	d009      	beq.n	70d6 <bt_conn_send_cb+0x26>
		BT_ERR("not connected!");
    70c2:	4821      	ldr	r0, [pc, #132]	; (7148 <bt_conn_send_cb+0x98>)
    70c4:	2145      	movs	r1, #69	; 0x45
    70c6:	f00b f81f 	bl	12108 <printk>
		net_buf_unref(buf);
    70ca:	4628      	mov	r0, r5
    70cc:	f006 fa0e 	bl	d4ec <net_buf_unref>
			return -ENOTCONN;
    70d0:	f06f 0038 	mvn.w	r0, #56	; 0x38
    70d4:	e01a      	b.n	710c <bt_conn_send_cb+0x5c>
	if (cb) {
    70d6:	2a00      	cmp	r2, #0
    70d8:	d034      	beq.n	7144 <bt_conn_send_cb+0x94>
	return z_impl_k_current_get();
    70da:	f009 fd8b 	bl	10bf4 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    70de:	4b1b      	ldr	r3, [pc, #108]	; (714c <bt_conn_send_cb+0x9c>)
    70e0:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    70e2:	481b      	ldr	r0, [pc, #108]	; (7150 <bt_conn_send_cb+0xa0>)
    70e4:	bf07      	ittee	eq
    70e6:	2200      	moveq	r2, #0
    70e8:	2300      	moveq	r3, #0
    70ea:	f04f 32ff 	movne.w	r2, #4294967295
    70ee:	f04f 33ff 	movne.w	r3, #4294967295
    70f2:	f008 fbaf 	bl	f854 <z_impl_k_queue_get>
    70f6:	4604      	mov	r4, r0
		if (!tx) {
    70f8:	b950      	cbnz	r0, 7110 <bt_conn_send_cb+0x60>
			BT_ERR("Unable to allocate TX context");
    70fa:	2145      	movs	r1, #69	; 0x45
    70fc:	4815      	ldr	r0, [pc, #84]	; (7154 <bt_conn_send_cb+0xa4>)
    70fe:	f00b f803 	bl	12108 <printk>
			net_buf_unref(buf);
    7102:	4628      	mov	r0, r5
    7104:	f006 f9f2 	bl	d4ec <net_buf_unref>
			return -ENOBUFS;
    7108:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    710c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    7110:	7b73      	ldrb	r3, [r6, #13]
    7112:	2b06      	cmp	r3, #6
    7114:	d00a      	beq.n	712c <bt_conn_send_cb+0x7c>
			BT_WARN("Disconnected while allocating context");
    7116:	2157      	movs	r1, #87	; 0x57
    7118:	480f      	ldr	r0, [pc, #60]	; (7158 <bt_conn_send_cb+0xa8>)
    711a:	f00a fff5 	bl	12108 <printk>
			net_buf_unref(buf);
    711e:	4628      	mov	r0, r5
    7120:	f006 f9e4 	bl	d4ec <net_buf_unref>
			tx_free(tx);
    7124:	4620      	mov	r0, r4
    7126:	f7ff fd89 	bl	6c3c <tx_free>
    712a:	e7d1      	b.n	70d0 <bt_conn_send_cb+0x20>
		tx->pending_no_cb = 0U;
    712c:	2300      	movs	r3, #0
		tx->user_data = user_data;
    712e:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    7132:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    7134:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    7136:	f106 0034 	add.w	r0, r6, #52	; 0x34
    713a:	4629      	mov	r1, r5
    713c:	f006 f9a2 	bl	d484 <net_buf_put>
	return 0;
    7140:	2000      	movs	r0, #0
    7142:	e7e3      	b.n	710c <bt_conn_send_cb+0x5c>
		tx_data(buf)->tx = NULL;
    7144:	614a      	str	r2, [r1, #20]
    7146:	e7f6      	b.n	7136 <bt_conn_send_cb+0x86>
    7148:	00019e80 	.word	0x00019e80
    714c:	20001de8 	.word	0x20001de8
    7150:	200004e4 	.word	0x200004e4
    7154:	00019e94 	.word	0x00019e94
    7158:	00019eb7 	.word	0x00019eb7

0000715c <bt_conn_prepare_events>:
	conn_change.signaled = 0U;
    715c:	2200      	movs	r2, #0
    715e:	4b18      	ldr	r3, [pc, #96]	; (71c0 <bt_conn_prepare_events+0x64>)
{
    7160:	b510      	push	{r4, lr}
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    7162:	2101      	movs	r1, #1
	conn_change.signaled = 0U;
    7164:	609a      	str	r2, [r3, #8]
{
    7166:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    7168:	f00a fd74 	bl	11c54 <k_poll_event_init>
		if (!atomic_get(&conn->ref)) {
    716c:	4b15      	ldr	r3, [pc, #84]	; (71c4 <bt_conn_prepare_events+0x68>)
    716e:	f103 0058 	add.w	r0, r3, #88	; 0x58
    7172:	f00c fda6 	bl	13cc2 <atomic_get>
    7176:	4619      	mov	r1, r3
    7178:	b908      	cbnz	r0, 717e <bt_conn_prepare_events+0x22>
			continue;
    717a:	2001      	movs	r0, #1
}
    717c:	bd10      	pop	{r4, pc}
		if (conn->state == BT_CONN_DISCONNECTED &&
    717e:	7b5a      	ldrb	r2, [r3, #13]
    7180:	b97a      	cbnz	r2, 71a2 <bt_conn_prepare_events+0x46>
    7182:	1d1a      	adds	r2, r3, #4
    7184:	e8d2 0fef 	ldaex	r0, [r2]
    7188:	f020 0c40 	bic.w	ip, r0, #64	; 0x40
    718c:	e8c2 cfee 	stlex	lr, ip, [r2]
    7190:	f1be 0f00 	cmp.w	lr, #0
    7194:	d1f6      	bne.n	7184 <bt_conn_prepare_events+0x28>
    7196:	0642      	lsls	r2, r0, #25
    7198:	d503      	bpl.n	71a2 <bt_conn_prepare_events+0x46>
			conn_cleanup(conn);
    719a:	4618      	mov	r0, r3
    719c:	f7ff fe44 	bl	6e28 <conn_cleanup>
    71a0:	e7eb      	b.n	717a <bt_conn_prepare_events+0x1e>
		if (conn->state != BT_CONN_CONNECTED) {
    71a2:	7b4b      	ldrb	r3, [r1, #13]
    71a4:	2b06      	cmp	r3, #6
    71a6:	d1e8      	bne.n	717a <bt_conn_prepare_events+0x1e>
		k_poll_event_init(&events[ev_count],
    71a8:	4b07      	ldr	r3, [pc, #28]	; (71c8 <bt_conn_prepare_events+0x6c>)
    71aa:	f104 0014 	add.w	r0, r4, #20
    71ae:	2200      	movs	r2, #0
    71b0:	2104      	movs	r1, #4
    71b2:	f00a fd4f 	bl	11c54 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    71b6:	2301      	movs	r3, #1
    71b8:	2002      	movs	r0, #2
    71ba:	f884 3020 	strb.w	r3, [r4, #32]
	return ev_count;
    71be:	e7dd      	b.n	717c <bt_conn_prepare_events+0x20>
    71c0:	20000234 	.word	0x20000234
    71c4:	20000dcc 	.word	0x20000dcc
    71c8:	20000e00 	.word	0x20000e00

000071cc <bt_conn_add_le>:
{
    71cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!atomic_get(&conns[i].ref)) {
    71d0:	4c18      	ldr	r4, [pc, #96]	; (7234 <bt_conn_add_le+0x68>)
{
    71d2:	4607      	mov	r7, r0
		if (!atomic_get(&conns[i].ref)) {
    71d4:	f104 0858 	add.w	r8, r4, #88	; 0x58
    71d8:	4640      	mov	r0, r8
{
    71da:	460e      	mov	r6, r1
		if (!atomic_get(&conns[i].ref)) {
    71dc:	f00c fd71 	bl	13cc2 <atomic_get>
    71e0:	4605      	mov	r5, r0
    71e2:	b110      	cbz	r0, 71ea <bt_conn_add_le+0x1e>
		return NULL;
    71e4:	2000      	movs	r0, #0
}
    71e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(conn, 0, sizeof(*conn));
    71ea:	4601      	mov	r1, r0
    71ec:	22ac      	movs	r2, #172	; 0xac
    71ee:	4620      	mov	r0, r4
    71f0:	f00c faca 	bl	13788 <memset>
	k_delayed_work_init(&conn->update_work, conn_update_timeout);
    71f4:	4910      	ldr	r1, [pc, #64]	; (7238 <bt_conn_add_le+0x6c>)
    71f6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    71fa:	f00f fb82 	bl	16902 <k_delayed_work_init>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    71fe:	4b0f      	ldr	r3, [pc, #60]	; (723c <bt_conn_add_le+0x70>)
    7200:	62a5      	str	r5, [r4, #40]	; 0x28
    7202:	e9c4 350b 	strd	r3, r5, [r4, #44]	; 0x2c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    7206:	2501      	movs	r5, #1
    7208:	e8d8 3fef 	ldaex	r3, [r8]
    720c:	e8c8 5fe2 	stlex	r2, r5, [r8]
    7210:	2a00      	cmp	r2, #0
    7212:	d1f9      	bne.n	7208 <bt_conn_add_le+0x3c>
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    7214:	2207      	movs	r2, #7
    7216:	4631      	mov	r1, r6
    7218:	f104 007c 	add.w	r0, r4, #124	; 0x7c
	conn->id = id;
    721c:	7227      	strb	r7, [r4, #8]
    721e:	f00c fa88 	bl	13732 <memcpy>
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    7222:	4b07      	ldr	r3, [pc, #28]	; (7240 <bt_conn_add_le+0x74>)
			conn = &conns[i];
    7224:	4620      	mov	r0, r4
	conn->sec_level = BT_SECURITY_L1;
    7226:	7265      	strb	r5, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
    7228:	72a5      	strb	r5, [r4, #10]
	conn->type = BT_CONN_TYPE_LE;
    722a:	70a5      	strb	r5, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    722c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	return conn;
    7230:	e7d9      	b.n	71e6 <bt_conn_add_le+0x1a>
    7232:	bf00      	nop
    7234:	20000dcc 	.word	0x20000dcc
    7238:	00006dc5 	.word	0x00006dc5
    723c:	00013d49 	.word	0x00013d49
    7240:	00280018 	.word	0x00280018

00007244 <bt_conn_set_state>:
{
    7244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state == state) {
    7248:	7b45      	ldrb	r5, [r0, #13]
{
    724a:	4604      	mov	r4, r0
	if (conn->state == state) {
    724c:	428d      	cmp	r5, r1
{
    724e:	460e      	mov	r6, r1
	if (conn->state == state) {
    7250:	d10b      	bne.n	726a <bt_conn_set_state+0x26>
		BT_WARN("no transition %s", state2str(state));
    7252:	2157      	movs	r1, #87	; 0x57
    7254:	2d07      	cmp	r5, #7
    7256:	bf96      	itet	ls
    7258:	4b68      	ldrls	r3, [pc, #416]	; (73fc <bt_conn_set_state+0x1b8>)
	if (conn->state == state) {
    725a:	4a69      	ldrhi	r2, [pc, #420]	; (7400 <bt_conn_set_state+0x1bc>)
    725c:	f853 2025 	ldrls.w	r2, [r3, r5, lsl #2]
		BT_WARN("no transition %s", state2str(state));
    7260:	4868      	ldr	r0, [pc, #416]	; (7404 <bt_conn_set_state+0x1c0>)
}
    7262:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("no valid (%u) state was set", state);
    7266:	f00a bf4f 	b.w	12108 <printk>
	conn->state = state;
    726a:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
    726c:	b15d      	cbz	r5, 7286 <bt_conn_set_state+0x42>
    726e:	2d05      	cmp	r5, #5
    7270:	d00d      	beq.n	728e <bt_conn_set_state+0x4a>
	switch (conn->state) {
    7272:	7b63      	ldrb	r3, [r4, #13]
    7274:	2b07      	cmp	r3, #7
    7276:	f200 80ba 	bhi.w	73ee <bt_conn_set_state+0x1aa>
    727a:	e8df f003 	tbb	[pc, r3]
    727e:	bc26      	.short	0xbc26
    7280:	9abcbcbc 	.word	0x9abcbcbc
    7284:	bc0f      	.short	0xbc0f
	atomic_val_t old = atomic_inc(&conn->ref);
    7286:	3058      	adds	r0, #88	; 0x58
    7288:	f00c fd32 	bl	13cf0 <atomic_inc>
	return conn;
    728c:	e7f1      	b.n	7272 <bt_conn_set_state+0x2e>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    728e:	7883      	ldrb	r3, [r0, #2]
    7290:	2b01      	cmp	r3, #1
    7292:	d1ee      	bne.n	7272 <bt_conn_set_state+0x2e>
			k_delayed_work_cancel(&conn->update_work);
    7294:	305c      	adds	r0, #92	; 0x5c
    7296:	f009 ffa1 	bl	111dc <k_delayed_work_cancel>
    729a:	e7ea      	b.n	7272 <bt_conn_set_state+0x2e>
		if (conn->type == BT_CONN_TYPE_SCO) {
    729c:	78a3      	ldrb	r3, [r4, #2]
    729e:	2b04      	cmp	r3, #4
    72a0:	f000 80a9 	beq.w	73f6 <bt_conn_set_state+0x1b2>
	z_impl_k_queue_init(queue);
    72a4:	f104 0034 	add.w	r0, r4, #52	; 0x34
    72a8:	f00f fa62 	bl	16770 <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    72ac:	2100      	movs	r1, #0
    72ae:	4856      	ldr	r0, [pc, #344]	; (7408 <bt_conn_set_state+0x1c4>)
    72b0:	f00a fe2e 	bl	11f10 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    72b4:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    72b6:	4620      	mov	r0, r4
	list->tail = NULL;
    72b8:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
    72bc:	f000 fe68 	bl	7f90 <bt_l2cap_connected>
		notify_connected(conn);
    72c0:	4620      	mov	r0, r4
}
    72c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify_connected(conn);
    72c6:	f7ff bcc3 	b.w	6c50 <notify_connected>
		if (conn->type == BT_CONN_TYPE_SCO) {
    72ca:	78a3      	ldrb	r3, [r4, #2]
    72cc:	2b04      	cmp	r3, #4
    72ce:	d105      	bne.n	72dc <bt_conn_set_state+0x98>
	atomic_val_t old = atomic_dec(&conn->ref);
    72d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
    72d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	atomic_val_t old = atomic_dec(&conn->ref);
    72d8:	f00c bd01 	b.w	13cde <atomic_dec>
		switch (old_state) {
    72dc:	3d01      	subs	r5, #1
    72de:	2d06      	cmp	r5, #6
    72e0:	f200 8089 	bhi.w	73f6 <bt_conn_set_state+0x1b2>
    72e4:	a301      	add	r3, pc, #4	; (adr r3, 72ec <bt_conn_set_state+0xa8>)
    72e6:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    72ea:	bf00      	nop
    72ec:	000073a5 	.word	0x000073a5
    72f0:	000072d1 	.word	0x000072d1
    72f4:	000072d1 	.word	0x000072d1
    72f8:	000073a5 	.word	0x000073a5
    72fc:	000073a5 	.word	0x000073a5
    7300:	00007309 	.word	0x00007309
    7304:	00007309 	.word	0x00007309
		tx->pending_no_cb = 0U;
    7308:	2600      	movs	r6, #0
	z_impl_k_sem_give(sem);
    730a:	4d40      	ldr	r5, [pc, #256]	; (740c <bt_conn_set_state+0x1c8>)
	__asm__ volatile(
    730c:	f04f 0320 	mov.w	r3, #32
    7310:	f3ef 8211 	mrs	r2, BASEPRI
    7314:	f383 8811 	msr	BASEPRI, r3
    7318:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    731c:	69e3      	ldr	r3, [r4, #28]
    731e:	b14b      	cbz	r3, 7334 <bt_conn_set_state+0xf0>
			conn->pending_no_cb--;
    7320:	3b01      	subs	r3, #1
    7322:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    7324:	f382 8811 	msr	BASEPRI, r2
    7328:	f3bf 8f6f 	isb	sy
    732c:	4628      	mov	r0, r5
    732e:	f009 fc67 	bl	10c00 <z_impl_k_sem_give>
}
    7332:	e7eb      	b.n	730c <bt_conn_set_state+0xc8>
Z_GENLIST_IS_EMPTY(slist)
    7334:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    7336:	b128      	cbz	r0, 7344 <bt_conn_set_state+0x100>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7338:	69a1      	ldr	r1, [r4, #24]
    733a:	6803      	ldr	r3, [r0, #0]
    733c:	4288      	cmp	r0, r1
	list->head = node;
    733e:	6163      	str	r3, [r4, #20]
	list->tail = node;
    7340:	bf08      	it	eq
    7342:	61a3      	streq	r3, [r4, #24]
    7344:	f382 8811 	msr	BASEPRI, r2
    7348:	f3bf 8f6f 	isb	sy
		if (!node) {
    734c:	b188      	cbz	r0, 7372 <bt_conn_set_state+0x12e>
	__asm__ volatile(
    734e:	f04f 0220 	mov.w	r2, #32
    7352:	f3ef 8311 	mrs	r3, BASEPRI
    7356:	f382 8811 	msr	BASEPRI, r2
    735a:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    735e:	68c2      	ldr	r2, [r0, #12]
    7360:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    7362:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    7364:	f383 8811 	msr	BASEPRI, r3
    7368:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    736c:	f7ff fc66 	bl	6c3c <tx_free>
    7370:	e7dc      	b.n	732c <bt_conn_set_state+0xe8>
			tx_notify(conn);
    7372:	4620      	mov	r0, r4
    7374:	f00c fcc5 	bl	13d02 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    7378:	78a3      	ldrb	r3, [r4, #2]
    737a:	2b01      	cmp	r3, #1
    737c:	d103      	bne.n	7386 <bt_conn_set_state+0x142>
				k_delayed_work_cancel(&conn->update_work);
    737e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    7382:	f009 ff2b 	bl	111dc <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7386:	3404      	adds	r4, #4
    7388:	e8d4 3fef 	ldaex	r3, [r4]
    738c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7390:	e8c4 3fe2 	stlex	r2, r3, [r4]
    7394:	2a00      	cmp	r2, #0
    7396:	d1f7      	bne.n	7388 <bt_conn_set_state+0x144>
}
    7398:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_poll_signal_raise(signal, result);
    739c:	2100      	movs	r1, #0
    739e:	481a      	ldr	r0, [pc, #104]	; (7408 <bt_conn_set_state+0x1c4>)
    73a0:	f00a bdb6 	b.w	11f10 <z_impl_k_poll_signal_raise>
			if (conn->err) {
    73a4:	7b23      	ldrb	r3, [r4, #12]
    73a6:	2b00      	cmp	r3, #0
    73a8:	d092      	beq.n	72d0 <bt_conn_set_state+0x8c>
				notify_connected(conn);
    73aa:	4620      	mov	r0, r4
    73ac:	f7ff fc50 	bl	6c50 <notify_connected>
    73b0:	e78e      	b.n	72d0 <bt_conn_set_state+0x8c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    73b2:	78a3      	ldrb	r3, [r4, #2]
    73b4:	2b01      	cmp	r3, #1
    73b6:	d11e      	bne.n	73f6 <bt_conn_set_state+0x1b2>
				K_MSEC(10 * bt_dev.create_param.timeout));
    73b8:	210a      	movs	r1, #10
			return (u32_t)((t * to_hz + off) / from_hz);
    73ba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    73be:	f240 36e7 	movw	r6, #999	; 0x3e7
    73c2:	2700      	movs	r7, #0
    73c4:	4b12      	ldr	r3, [pc, #72]	; (7410 <bt_conn_set_state+0x1cc>)
    73c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    73ca:	8a9b      	ldrh	r3, [r3, #20]
    73cc:	4359      	muls	r1, r3
    73ce:	fbc0 6701 	smlal	r6, r7, r0, r1
    73d2:	2300      	movs	r3, #0
    73d4:	4630      	mov	r0, r6
    73d6:	4639      	mov	r1, r7
    73d8:	f7f8 febe 	bl	158 <__aeabi_uldivmod>
    73dc:	4602      	mov	r2, r0
    73de:	460b      	mov	r3, r1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    73e0:	480c      	ldr	r0, [pc, #48]	; (7414 <bt_conn_set_state+0x1d0>)
    73e2:	f104 015c 	add.w	r1, r4, #92	; 0x5c
}
    73e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    73ea:	f009 be6d 	b.w	110c8 <k_delayed_work_submit_to_queue>
		BT_WARN("no valid (%u) state was set", state);
    73ee:	4632      	mov	r2, r6
    73f0:	2157      	movs	r1, #87	; 0x57
    73f2:	4809      	ldr	r0, [pc, #36]	; (7418 <bt_conn_set_state+0x1d4>)
    73f4:	e735      	b.n	7262 <bt_conn_set_state+0x1e>
}
    73f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    73fa:	bf00      	nop
    73fc:	000171e0 	.word	0x000171e0
    7400:	00019ee2 	.word	0x00019ee2
    7404:	00019eec 	.word	0x00019eec
    7408:	20000234 	.word	0x20000234
    740c:	200000b4 	.word	0x200000b4
    7410:	20000000 	.word	0x20000000
    7414:	20001dcc 	.word	0x20001dcc
    7418:	00019f02 	.word	0x00019f02

0000741c <bt_conn_lookup_handle>:
{
    741c:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    741e:	4c0b      	ldr	r4, [pc, #44]	; (744c <bt_conn_lookup_handle+0x30>)
{
    7420:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    7422:	f104 0058 	add.w	r0, r4, #88	; 0x58
    7426:	f00c fc4c 	bl	13cc2 <atomic_get>
    742a:	b158      	cbz	r0, 7444 <bt_conn_lookup_handle+0x28>
		if (conns[i].state != BT_CONN_CONNECTED &&
    742c:	7b62      	ldrb	r2, [r4, #13]
    742e:	3a06      	subs	r2, #6
    7430:	2a01      	cmp	r2, #1
    7432:	d808      	bhi.n	7446 <bt_conn_lookup_handle+0x2a>
		if (conns[i].handle == handle) {
    7434:	8822      	ldrh	r2, [r4, #0]
    7436:	429a      	cmp	r2, r3
    7438:	d105      	bne.n	7446 <bt_conn_lookup_handle+0x2a>
	atomic_val_t old = atomic_inc(&conn->ref);
    743a:	f104 0058 	add.w	r0, r4, #88	; 0x58
    743e:	f00c fc57 	bl	13cf0 <atomic_inc>
			return bt_conn_ref(&conns[i]);
    7442:	4620      	mov	r0, r4
}
    7444:	bd10      	pop	{r4, pc}
	return NULL;
    7446:	2000      	movs	r0, #0
    7448:	e7fc      	b.n	7444 <bt_conn_lookup_handle+0x28>
    744a:	bf00      	nop
    744c:	20000dcc 	.word	0x20000dcc

00007450 <bt_conn_lookup_addr_le>:
{
    7450:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    7452:	4c0c      	ldr	r4, [pc, #48]	; (7484 <bt_conn_lookup_addr_le+0x34>)
{
    7454:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    7456:	f104 0058 	add.w	r0, r4, #88	; 0x58
{
    745a:	460a      	mov	r2, r1
		if (!atomic_get(&conns[i].ref)) {
    745c:	f00c fc31 	bl	13cc2 <atomic_get>
    7460:	b908      	cbnz	r0, 7466 <bt_conn_lookup_addr_le+0x16>
	return NULL;
    7462:	2000      	movs	r0, #0
}
    7464:	bd10      	pop	{r4, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    7466:	78a1      	ldrb	r1, [r4, #2]
    7468:	2901      	cmp	r1, #1
    746a:	d1fa      	bne.n	7462 <bt_conn_lookup_addr_le+0x12>
		if (bt_conn_is_peer_addr_le(&conns[i], id, peer)) {
    746c:	4619      	mov	r1, r3
    746e:	4620      	mov	r0, r4
    7470:	f00c fcd9 	bl	13e26 <bt_conn_is_peer_addr_le>
    7474:	2800      	cmp	r0, #0
    7476:	d0f4      	beq.n	7462 <bt_conn_lookup_addr_le+0x12>
	atomic_val_t old = atomic_inc(&conn->ref);
    7478:	f104 0058 	add.w	r0, r4, #88	; 0x58
    747c:	f00c fc38 	bl	13cf0 <atomic_inc>
		if (bt_conn_is_peer_addr_le(&conns[i], id, peer)) {
    7480:	4620      	mov	r0, r4
			return bt_conn_ref(&conns[i]);
    7482:	e7ef      	b.n	7464 <bt_conn_lookup_addr_le+0x14>
    7484:	20000dcc 	.word	0x20000dcc

00007488 <bt_conn_exists_le>:
{
    7488:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
    748a:	f7ff ffe1 	bl	7450 <bt_conn_lookup_addr_le>
	if (conn) {
    748e:	4604      	mov	r4, r0
    7490:	b178      	cbz	r0, 74b2 <bt_conn_exists_le+0x2a>
		BT_WARN("Found valid connection in %s state",
    7492:	7b43      	ldrb	r3, [r0, #13]
    7494:	2157      	movs	r1, #87	; 0x57
    7496:	2b07      	cmp	r3, #7
    7498:	bf96      	itet	ls
    749a:	4a06      	ldrls	r2, [pc, #24]	; (74b4 <bt_conn_exists_le+0x2c>)
    749c:	4a06      	ldrhi	r2, [pc, #24]	; (74b8 <bt_conn_exists_le+0x30>)
    749e:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
    74a2:	4806      	ldr	r0, [pc, #24]	; (74bc <bt_conn_exists_le+0x34>)
    74a4:	f00a fe30 	bl	12108 <printk>
	atomic_val_t old = atomic_dec(&conn->ref);
    74a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
    74ac:	f00c fc17 	bl	13cde <atomic_dec>
		return true;
    74b0:	2001      	movs	r0, #1
}
    74b2:	bd10      	pop	{r4, pc}
    74b4:	000171e0 	.word	0x000171e0
    74b8:	00019ee2 	.word	0x00019ee2
    74bc:	00019f23 	.word	0x00019f23

000074c0 <bt_conn_lookup_state_le>:
{
    74c0:	b570      	push	{r4, r5, r6, lr}
		if (!atomic_get(&conns[i].ref)) {
    74c2:	4c10      	ldr	r4, [pc, #64]	; (7504 <bt_conn_lookup_state_le+0x44>)
{
    74c4:	4605      	mov	r5, r0
		if (!atomic_get(&conns[i].ref)) {
    74c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
{
    74ca:	4616      	mov	r6, r2
		if (!atomic_get(&conns[i].ref)) {
    74cc:	f00c fbf9 	bl	13cc2 <atomic_get>
    74d0:	b908      	cbnz	r0, 74d6 <bt_conn_lookup_state_le+0x16>
	return NULL;
    74d2:	2000      	movs	r0, #0
}
    74d4:	bd70      	pop	{r4, r5, r6, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    74d6:	78a3      	ldrb	r3, [r4, #2]
    74d8:	2b01      	cmp	r3, #1
    74da:	d1fa      	bne.n	74d2 <bt_conn_lookup_state_le+0x12>
		if (peer && !bt_conn_is_peer_addr_le(&conns[i], id, peer)) {
    74dc:	b951      	cbnz	r1, 74f4 <bt_conn_lookup_state_le+0x34>
		if (conns[i].state == state && conns[i].id == id) {
    74de:	7b63      	ldrb	r3, [r4, #13]
    74e0:	42b3      	cmp	r3, r6
    74e2:	d1f6      	bne.n	74d2 <bt_conn_lookup_state_le+0x12>
    74e4:	7a23      	ldrb	r3, [r4, #8]
    74e6:	42ab      	cmp	r3, r5
    74e8:	d1f3      	bne.n	74d2 <bt_conn_lookup_state_le+0x12>
	atomic_val_t old = atomic_inc(&conn->ref);
    74ea:	4807      	ldr	r0, [pc, #28]	; (7508 <bt_conn_lookup_state_le+0x48>)
    74ec:	f00c fc00 	bl	13cf0 <atomic_inc>
			return bt_conn_ref(&conns[i]);
    74f0:	4804      	ldr	r0, [pc, #16]	; (7504 <bt_conn_lookup_state_le+0x44>)
    74f2:	e7ef      	b.n	74d4 <bt_conn_lookup_state_le+0x14>
		if (peer && !bt_conn_is_peer_addr_le(&conns[i], id, peer)) {
    74f4:	460a      	mov	r2, r1
    74f6:	4620      	mov	r0, r4
    74f8:	4629      	mov	r1, r5
    74fa:	f00c fc94 	bl	13e26 <bt_conn_is_peer_addr_le>
    74fe:	2800      	cmp	r0, #0
    7500:	d1ed      	bne.n	74de <bt_conn_lookup_state_le+0x1e>
    7502:	e7e6      	b.n	74d2 <bt_conn_lookup_state_le+0x12>
    7504:	20000dcc 	.word	0x20000dcc
    7508:	20000e24 	.word	0x20000e24

0000750c <bt_conn_get_info>:
{
	return &conn->le.dst;
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
    750c:	b510      	push	{r4, lr}
	info->type = conn->type;
    750e:	7882      	ldrb	r2, [r0, #2]
    7510:	700a      	strb	r2, [r1, #0]
	info->role = conn->role;
    7512:	78c4      	ldrb	r4, [r0, #3]
	info->id = conn->id;

	switch (conn->type) {
    7514:	2a01      	cmp	r2, #1
	info->role = conn->role;
    7516:	704c      	strb	r4, [r1, #1]
	info->id = conn->id;
    7518:	7a03      	ldrb	r3, [r0, #8]
    751a:	708b      	strb	r3, [r1, #2]
	switch (conn->type) {
    751c:	d11c      	bne.n	7558 <bt_conn_get_info+0x4c>
	case BT_CONN_TYPE_LE:
		info->le.dst = &conn->le.dst;
    751e:	f100 027c 	add.w	r2, r0, #124	; 0x7c
    7522:	608a      	str	r2, [r1, #8]
		info->le.src = &bt_dev.id_addr[conn->id];
    7524:	4a0e      	ldr	r2, [pc, #56]	; (7560 <bt_conn_get_info+0x54>)
    7526:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    752a:	4413      	add	r3, r2
    752c:	604b      	str	r3, [r1, #4]
		if (conn->role == BT_HCI_ROLE_MASTER) {
    752e:	f100 028a 	add.w	r2, r0, #138	; 0x8a
    7532:	f100 0383 	add.w	r3, r0, #131	; 0x83
    7536:	b964      	cbnz	r4, 7552 <bt_conn_get_info+0x46>
			info->le.local = &conn->le.init_addr;
			info->le.remote = &conn->le.resp_addr;
    7538:	e9c1 3203 	strd	r3, r2, [r1, #12]
		} else {
			info->le.local = &conn->le.resp_addr;
			info->le.remote = &conn->le.init_addr;
		}
		info->le.interval = conn->le.interval;
    753c:	f8b0 3092 	ldrh.w	r3, [r0, #146]	; 0x92
    7540:	828b      	strh	r3, [r1, #20]
		info->le.latency = conn->le.latency;
    7542:	f8b0 3098 	ldrh.w	r3, [r0, #152]	; 0x98
    7546:	82cb      	strh	r3, [r1, #22]
		info->le.timeout = conn->le.timeout;
    7548:	f8b0 309a 	ldrh.w	r3, [r0, #154]	; 0x9a
		info->le.phy = &conn->le.phy;
#endif
#if defined(CONFIG_BT_USER_DATA_LEN_UPDATE)
		info->le.data_len = &conn->le.data_len;
#endif
		return 0;
    754c:	2000      	movs	r0, #0
		info->le.timeout = conn->le.timeout;
    754e:	830b      	strh	r3, [r1, #24]
		return 0;
#endif
	}

	return -EINVAL;
}
    7550:	bd10      	pop	{r4, pc}
			info->le.remote = &conn->le.init_addr;
    7552:	e9c1 2303 	strd	r2, r3, [r1, #12]
    7556:	e7f1      	b.n	753c <bt_conn_get_info+0x30>
	return -EINVAL;
    7558:	f06f 0015 	mvn.w	r0, #21
    755c:	e7f8      	b.n	7550 <bt_conn_get_info+0x44>
    755e:	bf00      	nop
    7560:	20000000 	.word	0x20000000

00007564 <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
    7564:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    7568:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    756a:	4852      	ldr	r0, [pc, #328]	; (76b4 <bt_conn_le_create+0x150>)
    756c:	460f      	mov	r7, r1
    756e:	4615      	mov	r5, r2
    7570:	461e      	mov	r6, r3
    7572:	f00c fba6 	bl	13cc2 <atomic_get>
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    7576:	0781      	lsls	r1, r0, #30
    7578:	f140 8092 	bpl.w	76a0 <bt_conn_le_create+0x13c>
		return -EAGAIN;
	}

	if (!bt_le_conn_params_valid(conn_param)) {
    757c:	4610      	mov	r0, r2
    757e:	f00c fa9b 	bl	13ab8 <bt_le_conn_params_valid>
    7582:	b928      	cbnz	r0, 7590 <bt_conn_le_create+0x2c>
		return -EINVAL;
    7584:	f06f 0515 	mvn.w	r5, #21
		return err;
	}

	*ret_conn = conn;
	return 0;
}
    7588:	4628      	mov	r0, r5
    758a:	b002      	add	sp, #8
    758c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7590:	4848      	ldr	r0, [pc, #288]	; (76b4 <bt_conn_le_create+0x150>)
    7592:	f00c fb96 	bl	13cc2 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    7596:	0642      	lsls	r2, r0, #25
    7598:	d4f4      	bmi.n	7584 <bt_conn_le_create+0x20>
    759a:	4846      	ldr	r0, [pc, #280]	; (76b4 <bt_conn_le_create+0x150>)
    759c:	f00c fb91 	bl	13cc2 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
    75a0:	0503      	lsls	r3, r0, #20
    75a2:	f3c0 28c0 	ubfx	r8, r0, #11, #1
    75a6:	d47e      	bmi.n	76a6 <bt_conn_le_create+0x142>
	if (!bt_le_scan_random_addr_check()) {
    75a8:	f00c fa82 	bl	13ab0 <bt_le_scan_random_addr_check>
    75ac:	2800      	cmp	r0, #0
    75ae:	d0e9      	beq.n	7584 <bt_conn_le_create+0x20>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
    75b0:	4621      	mov	r1, r4
    75b2:	4640      	mov	r0, r8
    75b4:	f7ff ff68 	bl	7488 <bt_conn_exists_le>
    75b8:	2800      	cmp	r0, #0
    75ba:	d1e3      	bne.n	7584 <bt_conn_le_create+0x20>
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
    75bc:	7823      	ldrb	r3, [r4, #0]
    75be:	3b02      	subs	r3, #2
    75c0:	2b01      	cmp	r3, #1
    75c2:	d84b      	bhi.n	765c <bt_conn_le_create+0xf8>
    75c4:	2207      	movs	r2, #7
    75c6:	4621      	mov	r1, r4
    75c8:	4668      	mov	r0, sp
    75ca:	f00c f8b2 	bl	13732 <memcpy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
    75ce:	f89d 3000 	ldrb.w	r3, [sp]
    75d2:	3b02      	subs	r3, #2
    75d4:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
    75d8:	4669      	mov	r1, sp
    75da:	2000      	movs	r0, #0
    75dc:	f7ff fdf6 	bl	71cc <bt_conn_add_le>
	if (!conn) {
    75e0:	4604      	mov	r4, r0
    75e2:	2800      	cmp	r0, #0
    75e4:	d062      	beq.n	76ac <bt_conn_le_create+0x148>
	conn->le.interval_min = param->interval_min;
    75e6:	882b      	ldrh	r3, [r5, #0]
    75e8:	f8a0 3094 	strh.w	r3, [r0, #148]	; 0x94
	conn->le.interval_max = param->interval_max;
    75ec:	886b      	ldrh	r3, [r5, #2]
    75ee:	f8a0 3096 	strh.w	r3, [r0, #150]	; 0x96
	conn->le.latency = param->latency;
    75f2:	88ab      	ldrh	r3, [r5, #4]
    75f4:	f8a0 3098 	strh.w	r3, [r0, #152]	; 0x98
	conn->le.timeout = param->timeout;
    75f8:	88eb      	ldrh	r3, [r5, #6]
	bt_dev.create_param = *param;
    75fa:	4d2f      	ldr	r5, [pc, #188]	; (76b8 <bt_conn_le_create+0x154>)
	conn->le.timeout = param->timeout;
    75fc:	f8a0 309a 	strh.w	r3, [r0, #154]	; 0x9a
	bt_dev.create_param = *param;
    7600:	f105 0c08 	add.w	ip, r5, #8
    7604:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
    7608:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
    760c:	8aab      	ldrh	r3, [r5, #20]
    760e:	462a      	mov	r2, r5
	bt_dev.create_param.timeout =
    7610:	2b00      	cmp	r3, #0
    7612:	bf08      	it	eq
    7614:	f44f 7396 	moveq.w	r3, #300	; 0x12c
    7618:	82ab      	strh	r3, [r5, #20]
		(bt_dev.create_param.interval_coded != 0) ?
    761a:	8a2b      	ldrh	r3, [r5, #16]
	bt_dev.create_param.interval_coded =
    761c:	b903      	cbnz	r3, 7620 <bt_conn_le_create+0xbc>
    761e:	89ab      	ldrh	r3, [r5, #12]
    7620:	8213      	strh	r3, [r2, #16]
		(bt_dev.create_param.window_coded != 0) ?
    7622:	8a53      	ldrh	r3, [r2, #18]
	bt_dev.create_param.window_coded =
    7624:	b903      	cbnz	r3, 7628 <bt_conn_le_create+0xc4>
    7626:	89d3      	ldrh	r3, [r2, #14]
    7628:	8253      	strh	r3, [r2, #18]
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    762a:	f892 30cc 	ldrb.w	r3, [r2, #204]	; 0xcc
    762e:	b11b      	cbz	r3, 7638 <bt_conn_le_create+0xd4>
    7630:	f892 20cd 	ldrb.w	r2, [r2, #205]	; 0xcd
    7634:	429a      	cmp	r2, r3
    7636:	d91a      	bls.n	766e <bt_conn_le_create+0x10a>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    7638:	2101      	movs	r1, #1
    763a:	4620      	mov	r0, r4
    763c:	f7ff fe02 	bl	7244 <bt_conn_set_state>
		err = bt_le_scan_update(true);
    7640:	2001      	movs	r0, #1
    7642:	f7fe f96b 	bl	591c <bt_le_scan_update>
		if (err) {
    7646:	4605      	mov	r5, r0
    7648:	b340      	cbz	r0, 769c <bt_conn_le_create+0x138>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    764a:	4620      	mov	r0, r4
    764c:	2100      	movs	r1, #0
    764e:	f7ff fdf9 	bl	7244 <bt_conn_set_state>
	atomic_val_t old = atomic_dec(&conn->ref);
    7652:	f104 0058 	add.w	r0, r4, #88	; 0x58
    7656:	f00c fb42 	bl	13cde <atomic_dec>
			return err;
    765a:	e795      	b.n	7588 <bt_conn_le_create+0x24>
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
    765c:	4621      	mov	r1, r4
    765e:	f00c fa1f 	bl	13aa0 <bt_lookup_id_addr>
    7662:	2207      	movs	r2, #7
    7664:	4601      	mov	r1, r0
    7666:	4668      	mov	r0, sp
    7668:	f00c f863 	bl	13732 <memcpy>
}
    766c:	e7b4      	b.n	75d8 <bt_conn_le_create+0x74>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    766e:	2105      	movs	r1, #5
    7670:	4620      	mov	r0, r4
    7672:	f7ff fde7 	bl	7244 <bt_conn_set_state>
	err = bt_le_create_conn(conn);
    7676:	4620      	mov	r0, r4
    7678:	f00c fa1c 	bl	13ab4 <bt_le_create_conn>
	if (err) {
    767c:	4605      	mov	r5, r0
    767e:	b168      	cbz	r0, 769c <bt_conn_le_create+0x138>
		conn->err = 0;
    7680:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    7682:	4620      	mov	r0, r4
    7684:	4631      	mov	r1, r6
		conn->err = 0;
    7686:	7326      	strb	r6, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    7688:	f7ff fddc 	bl	7244 <bt_conn_set_state>
	atomic_val_t old = atomic_dec(&conn->ref);
    768c:	f104 0058 	add.w	r0, r4, #88	; 0x58
    7690:	f00c fb25 	bl	13cde <atomic_dec>
		bt_le_scan_update(false);
    7694:	4630      	mov	r0, r6
    7696:	f7fe f941 	bl	591c <bt_le_scan_update>
		return err;
    769a:	e775      	b.n	7588 <bt_conn_le_create+0x24>
	*ret_conn = conn;
    769c:	6034      	str	r4, [r6, #0]
	return 0;
    769e:	e773      	b.n	7588 <bt_conn_le_create+0x24>
		return -EAGAIN;
    76a0:	f06f 050a 	mvn.w	r5, #10
    76a4:	e770      	b.n	7588 <bt_conn_le_create+0x24>
		return -EALREADY;
    76a6:	f06f 0544 	mvn.w	r5, #68	; 0x44
    76aa:	e76d      	b.n	7588 <bt_conn_le_create+0x24>
		return -ENOMEM;
    76ac:	f06f 050b 	mvn.w	r5, #11
    76b0:	e76a      	b.n	7588 <bt_conn_le_create+0x24>
    76b2:	bf00      	nop
    76b4:	20000098 	.word	0x20000098
    76b8:	20000000 	.word	0x20000000

000076bc <bt_le_set_auto_conn>:

#if !defined(CONFIG_BT_WHITELIST)
int bt_le_set_auto_conn(const bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    76bc:	b570      	push	{r4, r5, r6, lr}
    76be:	4606      	mov	r6, r0
    76c0:	4835      	ldr	r0, [pc, #212]	; (7798 <bt_le_set_auto_conn+0xdc>)
    76c2:	460d      	mov	r5, r1
    76c4:	f00c fafd 	bl	13cc2 <atomic_get>
	struct bt_conn *conn;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    76c8:	0780      	lsls	r0, r0, #30
    76ca:	d55e      	bpl.n	778a <bt_le_set_auto_conn+0xce>
		return -EAGAIN;
	}

	if (param && !bt_le_conn_params_valid(param)) {
    76cc:	b929      	cbnz	r1, 76da <bt_le_set_auto_conn+0x1e>
		return -EINVAL;
	}

	if (!bt_le_scan_random_addr_check()) {
    76ce:	f00c f9ef 	bl	13ab0 <bt_le_scan_random_addr_check>
    76d2:	b940      	cbnz	r0, 76e6 <bt_le_set_auto_conn+0x2a>
		return -EINVAL;
    76d4:	f06f 0015 	mvn.w	r0, #21
	}

	bt_conn_unref(conn);

	return 0;
}
    76d8:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
    76da:	4608      	mov	r0, r1
    76dc:	f00c f9ec 	bl	13ab8 <bt_le_conn_params_valid>
    76e0:	2800      	cmp	r0, #0
    76e2:	d1f4      	bne.n	76ce <bt_le_set_auto_conn+0x12>
    76e4:	e7f6      	b.n	76d4 <bt_le_set_auto_conn+0x18>
	conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
    76e6:	4631      	mov	r1, r6
    76e8:	2000      	movs	r0, #0
    76ea:	f7ff feb1 	bl	7450 <bt_conn_lookup_addr_le>
	if (!conn) {
    76ee:	4604      	mov	r4, r0
    76f0:	b928      	cbnz	r0, 76fe <bt_le_set_auto_conn+0x42>
		conn = bt_conn_add_le(BT_ID_DEFAULT, addr);
    76f2:	4631      	mov	r1, r6
    76f4:	f7ff fd6a 	bl	71cc <bt_conn_add_le>
		if (!conn) {
    76f8:	4604      	mov	r4, r0
    76fa:	2800      	cmp	r0, #0
    76fc:	d048      	beq.n	7790 <bt_le_set_auto_conn+0xd4>
	if (param) {
    76fe:	1d23      	adds	r3, r4, #4
    7700:	f104 0658 	add.w	r6, r4, #88	; 0x58
    7704:	b365      	cbz	r5, 7760 <bt_le_set_auto_conn+0xa4>
	conn->le.interval_min = param->interval_min;
    7706:	882a      	ldrh	r2, [r5, #0]
    7708:	f8a4 2094 	strh.w	r2, [r4, #148]	; 0x94
	conn->le.interval_max = param->interval_max;
    770c:	886a      	ldrh	r2, [r5, #2]
    770e:	f8a4 2096 	strh.w	r2, [r4, #150]	; 0x96
	conn->le.latency = param->latency;
    7712:	88aa      	ldrh	r2, [r5, #4]
    7714:	f8a4 2098 	strh.w	r2, [r4, #152]	; 0x98
	conn->le.timeout = param->timeout;
    7718:	88ea      	ldrh	r2, [r5, #6]
    771a:	f8a4 209a 	strh.w	r2, [r4, #154]	; 0x9a
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    771e:	e8d3 2fef 	ldaex	r2, [r3]
    7722:	f042 0101 	orr.w	r1, r2, #1
    7726:	e8c3 1fe0 	stlex	r0, r1, [r3]
    772a:	2800      	cmp	r0, #0
    772c:	d1f7      	bne.n	771e <bt_le_set_auto_conn+0x62>
		if (!atomic_test_and_set_bit(conn->flags,
    772e:	07d1      	lsls	r1, r2, #31
    7730:	d402      	bmi.n	7738 <bt_le_set_auto_conn+0x7c>
	atomic_val_t old = atomic_inc(&conn->ref);
    7732:	4630      	mov	r0, r6
    7734:	f00c fadc 	bl	13cf0 <atomic_inc>
	if (conn->state == BT_CONN_DISCONNECTED &&
    7738:	7b63      	ldrb	r3, [r4, #13]
    773a:	b963      	cbnz	r3, 7756 <bt_le_set_auto_conn+0x9a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    773c:	4816      	ldr	r0, [pc, #88]	; (7798 <bt_le_set_auto_conn+0xdc>)
    773e:	f00c fac0 	bl	13cc2 <atomic_get>
    7742:	0783      	lsls	r3, r0, #30
    7744:	d507      	bpl.n	7756 <bt_le_set_auto_conn+0x9a>
		if (param) {
    7746:	b11d      	cbz	r5, 7750 <bt_le_set_auto_conn+0x94>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    7748:	2101      	movs	r1, #1
    774a:	4620      	mov	r0, r4
    774c:	f7ff fd7a 	bl	7244 <bt_conn_set_state>
		bt_le_scan_update(false);
    7750:	2000      	movs	r0, #0
    7752:	f7fe f8e3 	bl	591c <bt_le_scan_update>
	atomic_val_t old = atomic_dec(&conn->ref);
    7756:	4630      	mov	r0, r6
    7758:	f00c fac1 	bl	13cde <atomic_dec>
	return 0;
    775c:	2000      	movs	r0, #0
    775e:	e7bb      	b.n	76d8 <bt_le_set_auto_conn+0x1c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7760:	e8d3 2fef 	ldaex	r2, [r3]
    7764:	f022 0101 	bic.w	r1, r2, #1
    7768:	e8c3 1fe0 	stlex	r0, r1, [r3]
    776c:	2800      	cmp	r0, #0
    776e:	d1f7      	bne.n	7760 <bt_le_set_auto_conn+0xa4>
		if (atomic_test_and_clear_bit(conn->flags,
    7770:	07d2      	lsls	r2, r2, #31
    7772:	d5e1      	bpl.n	7738 <bt_le_set_auto_conn+0x7c>
	atomic_val_t old = atomic_dec(&conn->ref);
    7774:	4630      	mov	r0, r6
    7776:	f00c fab2 	bl	13cde <atomic_dec>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    777a:	7b63      	ldrb	r3, [r4, #13]
    777c:	2b01      	cmp	r3, #1
    777e:	d1db      	bne.n	7738 <bt_le_set_auto_conn+0x7c>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    7780:	4629      	mov	r1, r5
    7782:	4620      	mov	r0, r4
    7784:	f7ff fd5e 	bl	7244 <bt_conn_set_state>
    7788:	e7d6      	b.n	7738 <bt_le_set_auto_conn+0x7c>
		return -EAGAIN;
    778a:	f06f 000a 	mvn.w	r0, #10
    778e:	e7a3      	b.n	76d8 <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
    7790:	f06f 000b 	mvn.w	r0, #11
    7794:	e7a0      	b.n	76d8 <bt_le_set_auto_conn+0x1c>
    7796:	bf00      	nop
    7798:	20000098 	.word	0x20000098

0000779c <bt_conn_disconnect>:
{
    779c:	b538      	push	{r3, r4, r5, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    779e:	7883      	ldrb	r3, [r0, #2]
{
    77a0:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    77a2:	2b01      	cmp	r3, #1
{
    77a4:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    77a6:	d103      	bne.n	77b0 <bt_conn_disconnect+0x14>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
    77a8:	2100      	movs	r1, #0
    77aa:	307c      	adds	r0, #124	; 0x7c
    77ac:	f7ff ff86 	bl	76bc <bt_le_set_auto_conn>
	switch (conn->state) {
    77b0:	7b63      	ldrb	r3, [r4, #13]
    77b2:	3b01      	subs	r3, #1
    77b4:	2b06      	cmp	r3, #6
    77b6:	d805      	bhi.n	77c4 <bt_conn_disconnect+0x28>
    77b8:	e8df f003 	tbb	[pc, r3]
    77bc:	12040408 	.word	0x12040408
    77c0:	241c      	.short	0x241c
    77c2:	10          	.byte	0x10
    77c3:	00          	.byte	0x00
    77c4:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
    77c8:	4628      	mov	r0, r5
    77ca:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    77cc:	4620      	mov	r0, r4
    77ce:	2100      	movs	r1, #0
		conn->err = reason;
    77d0:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    77d2:	f7ff fd37 	bl	7244 <bt_conn_set_state>
			bt_le_scan_update(false);
    77d6:	2000      	movs	r0, #0
    77d8:	f7fe f8a0 	bl	591c <bt_le_scan_update>
		return 0;
    77dc:	2500      	movs	r5, #0
    77de:	e7f3      	b.n	77c8 <bt_conn_disconnect+0x2c>
		BT_WARN("Deprecated: Use bt_le_adv_stop instead");
    77e0:	2157      	movs	r1, #87	; 0x57
    77e2:	480e      	ldr	r0, [pc, #56]	; (781c <bt_conn_disconnect+0x80>)
    77e4:	f00a fc90 	bl	12108 <printk>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    77e8:	2100      	movs	r1, #0
    77ea:	4620      	mov	r0, r4
		conn->err = reason;
    77ec:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    77ee:	f7ff fd29 	bl	7244 <bt_conn_set_state>
		return 0;
    77f2:	e7f3      	b.n	77dc <bt_conn_disconnect+0x40>
			k_delayed_work_cancel(&conn->update_work);
    77f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    77f8:	f009 fcf0 	bl	111dc <k_delayed_work_cancel>
}
    77fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_create_conn_cancel();
    7800:	f7fd bf10 	b.w	5624 <bt_le_create_conn_cancel>
	err = bt_hci_disconnect(conn->handle, reason);
    7804:	4629      	mov	r1, r5
    7806:	8820      	ldrh	r0, [r4, #0]
    7808:	f00c f994 	bl	13b34 <bt_hci_disconnect>
	if (err) {
    780c:	4605      	mov	r5, r0
    780e:	2800      	cmp	r0, #0
    7810:	d1da      	bne.n	77c8 <bt_conn_disconnect+0x2c>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    7812:	2107      	movs	r1, #7
    7814:	4620      	mov	r0, r4
    7816:	f7ff fd15 	bl	7244 <bt_conn_set_state>
	return 0;
    781a:	e7d5      	b.n	77c8 <bt_conn_disconnect+0x2c>
    781c:	00019f4b 	.word	0x00019f4b

00007820 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
    7820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7822:	4604      	mov	r4, r0
    7824:	460d      	mov	r5, r1
    7826:	4617      	mov	r7, r2
    7828:	461e      	mov	r6, r3

	/*
	 * PDU must not be allocated from ISR as we block with 'K_FOREVER'
	 * during the allocation
	 */
	__ASSERT_NO_MSG(!k_is_in_isr());
    782a:	f00f f801 	bl	16830 <k_is_in_isr>
    782e:	b158      	cbz	r0, 7848 <bt_conn_create_pdu_timeout+0x28>
    7830:	4910      	ldr	r1, [pc, #64]	; (7874 <bt_conn_create_pdu_timeout+0x54>)
    7832:	4811      	ldr	r0, [pc, #68]	; (7878 <bt_conn_create_pdu_timeout+0x58>)
    7834:	f640 13ea 	movw	r3, #2538	; 0x9ea
    7838:	4a10      	ldr	r2, [pc, #64]	; (787c <bt_conn_create_pdu_timeout+0x5c>)
    783a:	f00a fc65 	bl	12108 <printk>
    783e:	f640 11ea 	movw	r1, #2538	; 0x9ea
    7842:	480e      	ldr	r0, [pc, #56]	; (787c <bt_conn_create_pdu_timeout+0x5c>)
    7844:	f00a fef6 	bl	12634 <assert_post_action>
	} else {
#if defined(CONFIG_NET_BUF_LOG)
		buf = net_buf_alloc_fixed_debug(pool, timeout, func,
							line);
#else
		buf = net_buf_alloc(pool, timeout);
    7848:	480d      	ldr	r0, [pc, #52]	; (7880 <bt_conn_create_pdu_timeout+0x60>)
    784a:	463a      	mov	r2, r7
    784c:	2c00      	cmp	r4, #0
    784e:	bf18      	it	ne
    7850:	4620      	movne	r0, r4
    7852:	4633      	mov	r3, r6
    7854:	f00d ff99 	bl	1578a <net_buf_alloc_fixed>
#endif
	}

	if (!buf) {
    7858:	4604      	mov	r4, r0
    785a:	b928      	cbnz	r0, 7868 <bt_conn_create_pdu_timeout+0x48>
		BT_WARN("Unable to allocate buffer within timeout");
    785c:	2157      	movs	r1, #87	; 0x57
    785e:	4809      	ldr	r0, [pc, #36]	; (7884 <bt_conn_create_pdu_timeout+0x64>)
    7860:	f00a fc52 	bl	12108 <printk>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
    7864:	4620      	mov	r0, r4
    7866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_reserve(buf, reserve);
    7868:	1d69      	adds	r1, r5, #5
    786a:	3008      	adds	r0, #8
    786c:	f005 fde0 	bl	d430 <net_buf_simple_reserve>
	return buf;
    7870:	e7f8      	b.n	7864 <bt_conn_create_pdu_timeout+0x44>
    7872:	bf00      	nop
    7874:	00019f77 	.word	0x00019f77
    7878:	00017d82 	.word	0x00017d82
    787c:	00019d1b 	.word	0x00019d1b
    7880:	2000052c 	.word	0x2000052c
    7884:	00019f86 	.word	0x00019f86

00007888 <bt_conn_create_frag_timeout>:
{
    7888:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    788a:	4801      	ldr	r0, [pc, #4]	; (7890 <bt_conn_create_frag_timeout+0x8>)
    788c:	f7ff bfc8 	b.w	7820 <bt_conn_create_pdu_timeout>
    7890:	200005b0 	.word	0x200005b0

00007894 <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    7894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7898:	4606      	mov	r6, r0
	frag = bt_conn_create_frag(0);
    789a:	f04f 33ff 	mov.w	r3, #4294967295
    789e:	f04f 32ff 	mov.w	r2, #4294967295
    78a2:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    78a4:	460c      	mov	r4, r1
	frag = bt_conn_create_frag(0);
    78a6:	f7ff ffef 	bl	7888 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    78aa:	7833      	ldrb	r3, [r6, #0]
	frag = bt_conn_create_frag(0);
    78ac:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    78ae:	2b06      	cmp	r3, #6
    78b0:	f04f 0600 	mov.w	r6, #0
    78b4:	d005      	beq.n	78c2 <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
    78b6:	f005 fe19 	bl	d4ec <net_buf_unref>
		return NULL;
    78ba:	4635      	mov	r5, r6
}
    78bc:	4628      	mov	r0, r5
    78be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    78c2:	6146      	str	r6, [r0, #20]
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    78c4:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.mtu;
    78c8:	4e0c      	ldr	r6, [pc, #48]	; (78fc <create_frag.isra.0+0x68>)
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    78ca:	4638      	mov	r0, r7
    78cc:	f8b6 80b0 	ldrh.w	r8, [r6, #176]	; 0xb0
    78d0:	f00d ff84 	bl	157dc <net_buf_simple_tailroom>
    78d4:	4580      	cmp	r8, r0
    78d6:	d20c      	bcs.n	78f2 <create_frag.isra.0+0x5e>
	return bt_dev.le.mtu;
    78d8:	f8b6 60b0 	ldrh.w	r6, [r6, #176]	; 0xb0
	net_buf_add_mem(frag, buf->data, frag_len);
    78dc:	f854 1f08 	ldr.w	r1, [r4, #8]!
    78e0:	4632      	mov	r2, r6
    78e2:	4638      	mov	r0, r7
    78e4:	f00d ff82 	bl	157ec <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    78e8:	4631      	mov	r1, r6
    78ea:	4620      	mov	r0, r4
    78ec:	f005 ff2e 	bl	d74c <net_buf_simple_pull>
	return frag;
    78f0:	e7e4      	b.n	78bc <create_frag.isra.0+0x28>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    78f2:	4638      	mov	r0, r7
    78f4:	f00d ff72 	bl	157dc <net_buf_simple_tailroom>
    78f8:	b286      	uxth	r6, r0
    78fa:	e7ef      	b.n	78dc <create_frag.isra.0+0x48>
    78fc:	20000000 	.word	0x20000000

00007900 <bt_conn_process_tx>:
{
    7900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    7902:	7b43      	ldrb	r3, [r0, #13]
{
    7904:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    7906:	b973      	cbnz	r3, 7926 <bt_conn_process_tx+0x26>
    7908:	1d03      	adds	r3, r0, #4
    790a:	e8d3 2fef 	ldaex	r2, [r3]
    790e:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    7912:	e8c3 1fe4 	stlex	r4, r1, [r3]
    7916:	2c00      	cmp	r4, #0
    7918:	d1f7      	bne.n	790a <bt_conn_process_tx+0xa>
    791a:	0653      	lsls	r3, r2, #25
    791c:	d503      	bpl.n	7926 <bt_conn_process_tx+0x26>
}
    791e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    7922:	f7ff ba81 	b.w	6e28 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    7926:	2200      	movs	r2, #0
    7928:	2300      	movs	r3, #0
    792a:	f105 0034 	add.w	r0, r5, #52	; 0x34
    792e:	f005 fd4b 	bl	d3c8 <net_buf_get>
	BT_ASSERT(buf);
    7932:	4604      	mov	r4, r0
    7934:	b960      	cbnz	r0, 7950 <bt_conn_process_tx+0x50>
    7936:	f240 6326 	movw	r3, #1574	; 0x626
    793a:	4a1f      	ldr	r2, [pc, #124]	; (79b8 <bt_conn_process_tx+0xb8>)
    793c:	491f      	ldr	r1, [pc, #124]	; (79bc <bt_conn_process_tx+0xbc>)
    793e:	4820      	ldr	r0, [pc, #128]	; (79c0 <bt_conn_process_tx+0xc0>)
    7940:	f00a fbe2 	bl	12108 <printk>
    7944:	4040      	eors	r0, r0
    7946:	f380 8811 	msr	BASEPRI, r0
    794a:	f04f 0003 	mov.w	r0, #3
    794e:	df02      	svc	2
	return bt_dev.le.mtu;
    7950:	4f1c      	ldr	r7, [pc, #112]	; (79c4 <bt_conn_process_tx+0xc4>)
	if (buf->len <= conn_mtu(conn)) {
    7952:	89a1      	ldrh	r1, [r4, #12]
    7954:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
    7958:	4291      	cmp	r1, r2
    795a:	d807      	bhi.n	796c <bt_conn_process_tx+0x6c>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    795c:	2300      	movs	r3, #0
    795e:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
    7960:	4621      	mov	r1, r4
    7962:	4628      	mov	r0, r5
    7964:	f7ff f98a 	bl	6c7c <send_frag>
	if (!send_buf(conn, buf)) {
    7968:	b140      	cbz	r0, 797c <bt_conn_process_tx+0x7c>
}
    796a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
    796c:	f105 060d 	add.w	r6, r5, #13
    7970:	4621      	mov	r1, r4
    7972:	4630      	mov	r0, r6
    7974:	f7ff ff8e 	bl	7894 <create_frag.isra.0>
	if (!frag) {
    7978:	4601      	mov	r1, r0
    797a:	b920      	cbnz	r0, 7986 <bt_conn_process_tx+0x86>
		net_buf_unref(buf);
    797c:	4620      	mov	r0, r4
}
    797e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    7982:	f005 bdb3 	b.w	d4ec <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    7986:	2301      	movs	r3, #1
    7988:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    798a:	4628      	mov	r0, r5
    798c:	f7ff f976 	bl	6c7c <send_frag>
    7990:	2800      	cmp	r0, #0
    7992:	d0f3      	beq.n	797c <bt_conn_process_tx+0x7c>
	while (buf->len > conn_mtu(conn)) {
    7994:	89a2      	ldrh	r2, [r4, #12]
    7996:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
    799a:	429a      	cmp	r2, r3
    799c:	d802      	bhi.n	79a4 <bt_conn_process_tx+0xa4>
	return send_frag(conn, buf, BT_ACL_CONT, false);
    799e:	2300      	movs	r3, #0
    79a0:	2201      	movs	r2, #1
    79a2:	e7dd      	b.n	7960 <bt_conn_process_tx+0x60>
		frag = create_frag(conn, buf);
    79a4:	4621      	mov	r1, r4
    79a6:	4630      	mov	r0, r6
    79a8:	f7ff ff74 	bl	7894 <create_frag.isra.0>
		if (!frag) {
    79ac:	4601      	mov	r1, r0
    79ae:	2800      	cmp	r0, #0
    79b0:	d0e4      	beq.n	797c <bt_conn_process_tx+0x7c>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    79b2:	2301      	movs	r3, #1
    79b4:	461a      	mov	r2, r3
    79b6:	e7e8      	b.n	798a <bt_conn_process_tx+0x8a>
    79b8:	00019d1b 	.word	0x00019d1b
    79bc:	0001b1ca 	.word	0x0001b1ca
    79c0:	00017d82 	.word	0x00017d82
    79c4:	20000000 	.word	0x20000000

000079c8 <bt_conn_auth_cb_register>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
    79c8:	4b0c      	ldr	r3, [pc, #48]	; (79fc <bt_conn_auth_cb_register+0x34>)
    79ca:	b908      	cbnz	r0, 79d0 <bt_conn_auth_cb_register+0x8>
		bt_auth = NULL;
    79cc:	6018      	str	r0, [r3, #0]
		return 0;
    79ce:	4770      	bx	lr
	}

	if (bt_auth) {
    79d0:	681a      	ldr	r2, [r3, #0]
    79d2:	b962      	cbnz	r2, 79ee <bt_conn_auth_cb_register+0x26>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
    79d4:	6902      	ldr	r2, [r0, #16]
    79d6:	b93a      	cbnz	r2, 79e8 <bt_conn_auth_cb_register+0x20>
    79d8:	6802      	ldr	r2, [r0, #0]
    79da:	b95a      	cbnz	r2, 79f4 <bt_conn_auth_cb_register+0x2c>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
    79dc:	6842      	ldr	r2, [r0, #4]
    79de:	b94a      	cbnz	r2, 79f4 <bt_conn_auth_cb_register+0x2c>
    79e0:	6882      	ldr	r2, [r0, #8]
    79e2:	b93a      	cbnz	r2, 79f4 <bt_conn_auth_cb_register+0x2c>
    79e4:	6942      	ldr	r2, [r0, #20]
    79e6:	b92a      	cbnz	r2, 79f4 <bt_conn_auth_cb_register+0x2c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
    79e8:	6018      	str	r0, [r3, #0]
	return 0;
    79ea:	2000      	movs	r0, #0
    79ec:	4770      	bx	lr
		return -EALREADY;
    79ee:	f06f 0044 	mvn.w	r0, #68	; 0x44
    79f2:	4770      	bx	lr
		return -EINVAL;
    79f4:	f06f 0015 	mvn.w	r0, #21
}
    79f8:	4770      	bx	lr
    79fa:	bf00      	nop
    79fc:	20000d24 	.word	0x20000d24

00007a00 <bt_conn_auth_pairing_confirm>:
	return -EINVAL;
}

int bt_conn_auth_pairing_confirm(struct bt_conn *conn)
{
	if (!bt_auth) {
    7a00:	4a05      	ldr	r2, [pc, #20]	; (7a18 <bt_conn_auth_pairing_confirm+0x18>)
    7a02:	6812      	ldr	r2, [r2, #0]
    7a04:	b122      	cbz	r2, 7a10 <bt_conn_auth_pairing_confirm+0x10>
		return -EINVAL;
	}

	switch (conn->type) {
    7a06:	7883      	ldrb	r3, [r0, #2]
    7a08:	2b01      	cmp	r3, #1
    7a0a:	d101      	bne.n	7a10 <bt_conn_auth_pairing_confirm+0x10>
#if defined(CONFIG_BT_SMP)
	case BT_CONN_TYPE_LE:
		return bt_smp_auth_pairing_confirm(conn);
    7a0c:	f005 b99c 	b.w	cd48 <bt_smp_auth_pairing_confirm>
		return ssp_confirm_reply(conn);
#endif /* CONFIG_BT_BREDR */
	default:
		return -EINVAL;
	}
}
    7a10:	f06f 0015 	mvn.w	r0, #21
    7a14:	4770      	bx	lr
    7a16:	bf00      	nop
    7a18:	20000d24 	.word	0x20000d24

00007a1c <bt_conn_index>:
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_index(struct bt_conn *conn)
{
	u8_t index = conn - conns;
    7a1c:	4b0c      	ldr	r3, [pc, #48]	; (7a50 <bt_conn_index+0x34>)
{
    7a1e:	b510      	push	{r4, lr}
	u8_t index = conn - conns;
    7a20:	1ac0      	subs	r0, r0, r3
    7a22:	1083      	asrs	r3, r0, #2
    7a24:	480b      	ldr	r0, [pc, #44]	; (7a54 <bt_conn_index+0x38>)
    7a26:	4358      	muls	r0, r3

	__ASSERT(index < CONFIG_BT_MAX_CONN, "Invalid bt_conn pointer");
    7a28:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
    7a2c:	d00e      	beq.n	7a4c <bt_conn_index+0x30>
    7a2e:	490a      	ldr	r1, [pc, #40]	; (7a58 <bt_conn_index+0x3c>)
    7a30:	f640 23a1 	movw	r3, #2721	; 0xaa1
    7a34:	4a09      	ldr	r2, [pc, #36]	; (7a5c <bt_conn_index+0x40>)
    7a36:	480a      	ldr	r0, [pc, #40]	; (7a60 <bt_conn_index+0x44>)
    7a38:	f00a fb66 	bl	12108 <printk>
    7a3c:	4809      	ldr	r0, [pc, #36]	; (7a64 <bt_conn_index+0x48>)
    7a3e:	f00a fb63 	bl	12108 <printk>
    7a42:	f640 21a1 	movw	r1, #2721	; 0xaa1
    7a46:	4805      	ldr	r0, [pc, #20]	; (7a5c <bt_conn_index+0x40>)
    7a48:	f00a fdf4 	bl	12634 <assert_post_action>
	return index;
}
    7a4c:	4620      	mov	r0, r4
    7a4e:	bd10      	pop	{r4, pc}
    7a50:	20000dcc 	.word	0x20000dcc
    7a54:	2fa0be83 	.word	0x2fa0be83
    7a58:	00019fb4 	.word	0x00019fb4
    7a5c:	00019d1b 	.word	0x00019d1b
    7a60:	00017d82 	.word	0x00017d82
    7a64:	00019fbe 	.word	0x00019fbe

00007a68 <bt_conn_lookup_index>:

struct bt_conn *bt_conn_lookup_index(u8_t index)
{
    7a68:	b508      	push	{r3, lr}
	struct bt_conn *conn;

	if (index >= ARRAY_SIZE(conns)) {
    7a6a:	b108      	cbz	r0, 7a70 <bt_conn_lookup_index+0x8>
		return NULL;
    7a6c:	2000      	movs	r0, #0
	if (!atomic_get(&conn->ref)) {
		return NULL;
	}

	return bt_conn_ref(conn);
}
    7a6e:	bd08      	pop	{r3, pc}
	if (!atomic_get(&conn->ref)) {
    7a70:	4804      	ldr	r0, [pc, #16]	; (7a84 <bt_conn_lookup_index+0x1c>)
    7a72:	f00c f926 	bl	13cc2 <atomic_get>
    7a76:	2800      	cmp	r0, #0
    7a78:	d0f8      	beq.n	7a6c <bt_conn_lookup_index+0x4>
	atomic_val_t old = atomic_inc(&conn->ref);
    7a7a:	4802      	ldr	r0, [pc, #8]	; (7a84 <bt_conn_lookup_index+0x1c>)
    7a7c:	f00c f938 	bl	13cf0 <atomic_inc>
	return bt_conn_ref(conn);
    7a80:	4801      	ldr	r0, [pc, #4]	; (7a88 <bt_conn_lookup_index+0x20>)
    7a82:	e7f4      	b.n	7a6e <bt_conn_lookup_index+0x6>
    7a84:	20000e24 	.word	0x20000e24
    7a88:	20000dcc 	.word	0x20000dcc

00007a8c <bt_conn_init>:

int bt_conn_init(void)
{
    7a8c:	b570      	push	{r4, r5, r6, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    7a8e:	2400      	movs	r4, #0
    7a90:	4d12      	ldr	r5, [pc, #72]	; (7adc <bt_conn_init+0x50>)
		k_fifo_put(&free_tx, &conn_tx[i]);
    7a92:	4e13      	ldr	r6, [pc, #76]	; (7ae0 <bt_conn_init+0x54>)
    7a94:	4629      	mov	r1, r5
    7a96:	4630      	mov	r0, r6
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    7a98:	3401      	adds	r4, #1
		k_fifo_put(&free_tx, &conn_tx[i]);
    7a9a:	f00e fe76 	bl	1678a <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    7a9e:	2c0a      	cmp	r4, #10
    7aa0:	f105 0510 	add.w	r5, r5, #16
    7aa4:	d1f6      	bne.n	7a94 <bt_conn_init+0x8>
	}

	bt_att_init();
    7aa6:	f00c feb5 	bl	14814 <bt_att_init>

	err = bt_smp_init();
    7aaa:	f005 fa05 	bl	ceb8 <bt_smp_init>
	if (err) {
    7aae:	4604      	mov	r4, r0
    7ab0:	b988      	cbnz	r0, 7ad6 <bt_conn_init+0x4a>
		return err;
	}

	bt_l2cap_init();
    7ab2:	f00c fc56 	bl	14362 <bt_l2cap_init>
	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
			struct bt_conn *conn = &conns[i];

			if (!atomic_get(&conn->ref)) {
    7ab6:	4b0b      	ldr	r3, [pc, #44]	; (7ae4 <bt_conn_init+0x58>)
    7ab8:	f103 0058 	add.w	r0, r3, #88	; 0x58
    7abc:	f00c f901 	bl	13cc2 <atomic_get>
    7ac0:	b148      	cbz	r0, 7ad6 <bt_conn_init+0x4a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    7ac2:	1d18      	adds	r0, r3, #4
    7ac4:	f00c f8fd 	bl	13cc2 <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_WHITELIST)
			if (atomic_test_bit(conn->flags,
    7ac8:	07c2      	lsls	r2, r0, #31
    7aca:	d504      	bpl.n	7ad6 <bt_conn_init+0x4a>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    7acc:	2101      	movs	r1, #1
    7ace:	4618      	mov	r0, r3
				conn->id = BT_ID_DEFAULT;
    7ad0:	721c      	strb	r4, [r3, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    7ad2:	f7ff fbb7 	bl	7244 <bt_conn_set_state>
#endif /* !defined(CONFIG_BT_WHITELIST) */
		}
	}

	return 0;
}
    7ad6:	4620      	mov	r0, r4
    7ad8:	bd70      	pop	{r4, r5, r6, pc}
    7ada:	bf00      	nop
    7adc:	20000d2c 	.word	0x20000d2c
    7ae0:	200004e4 	.word	0x200004e4
    7ae4:	20000dcc 	.word	0x20000dcc

00007ae8 <get_ident>:

static u8_t get_ident(void)
{
	static u8_t ident;

	ident++;
    7ae8:	4b04      	ldr	r3, [pc, #16]	; (7afc <get_ident+0x14>)
    7aea:	781a      	ldrb	r2, [r3, #0]
    7aec:	3201      	adds	r2, #1
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
    7aee:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    7af2:	bf08      	it	eq
    7af4:	2201      	moveq	r2, #1
    7af6:	701a      	strb	r2, [r3, #0]
	}

	return ident;
}
    7af8:	7818      	ldrb	r0, [r3, #0]
    7afa:	4770      	bx	lr
    7afc:	20001f68 	.word	0x20001f68

00007b00 <l2cap_server_lookup_psm>:
#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
static struct bt_l2cap_server *l2cap_server_lookup_psm(u16_t psm)
{
	struct bt_l2cap_server *server;

	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    7b00:	4a08      	ldr	r2, [pc, #32]	; (7b24 <l2cap_server_lookup_psm+0x24>)
{
    7b02:	4603      	mov	r3, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    7b04:	6810      	ldr	r0, [r2, #0]
    7b06:	b158      	cbz	r0, 7b20 <l2cap_server_lookup_psm+0x20>
    7b08:	3808      	subs	r0, #8
    7b0a:	b900      	cbnz	r0, 7b0e <l2cap_server_lookup_psm+0xe>
    7b0c:	4770      	bx	lr
		if (server->psm == psm) {
    7b0e:	8802      	ldrh	r2, [r0, #0]
    7b10:	429a      	cmp	r2, r3
    7b12:	d005      	beq.n	7b20 <l2cap_server_lookup_psm+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
    7b14:	f110 0208 	adds.w	r2, r0, #8
    7b18:	d001      	beq.n	7b1e <l2cap_server_lookup_psm+0x1e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    7b1a:	6880      	ldr	r0, [r0, #8]
    7b1c:	e7f3      	b.n	7b06 <l2cap_server_lookup_psm+0x6>
			return server;
		}
	}

	return NULL;
    7b1e:	4610      	mov	r0, r2
}
    7b20:	4770      	bx	lr
    7b22:	bf00      	nop
    7b24:	20000f28 	.word	0x20000f28

00007b28 <l2cap_accept>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    7b28:	b508      	push	{r3, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    7b2a:	4b07      	ldr	r3, [pc, #28]	; (7b48 <l2cap_accept+0x20>)
{
    7b2c:	4602      	mov	r2, r0
		if (l2cap->chan.chan.conn) {
    7b2e:	6818      	ldr	r0, [r3, #0]
    7b30:	b918      	cbnz	r0, 7b3a <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    7b32:	4a06      	ldr	r2, [pc, #24]	; (7b4c <l2cap_accept+0x24>)
    7b34:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
    7b36:	600b      	str	r3, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    7b38:	bd08      	pop	{r3, pc}
	BT_ERR("No available L2CAP context for conn %p", conn);
    7b3a:	4805      	ldr	r0, [pc, #20]	; (7b50 <l2cap_accept+0x28>)
    7b3c:	2145      	movs	r1, #69	; 0x45
    7b3e:	f00a fae3 	bl	12108 <printk>
    7b42:	f06f 000b 	mvn.w	r0, #11
    7b46:	e7f7      	b.n	7b38 <l2cap_accept+0x10>
    7b48:	20000e78 	.word	0x20000e78
    7b4c:	00017230 	.word	0x00017230
    7b50:	0001a02e 	.word	0x0001a02e

00007b54 <l2cap_create_le_sig_pdu.isra.0>:
	if (code == BT_L2CAP_DISCONN_REQ) {
    7b54:	2806      	cmp	r0, #6
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    7b56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7b58:	4605      	mov	r5, r0
    7b5a:	460f      	mov	r7, r1
	return bt_conn_create_pdu_timeout(pool,
    7b5c:	480e      	ldr	r0, [pc, #56]	; (7b98 <l2cap_create_le_sig_pdu.isra.0+0x44>)
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    7b5e:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
    7b60:	f04f 0300 	mov.w	r3, #0
    7b64:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    7b68:	f04f 0104 	mov.w	r1, #4
    7b6c:	bf18      	it	ne
    7b6e:	2000      	movne	r0, #0
    7b70:	f7ff fe56 	bl	7820 <bt_conn_create_pdu_timeout>
	if (!buf) {
    7b74:	4604      	mov	r4, r0
    7b76:	b930      	cbnz	r0, 7b86 <l2cap_create_le_sig_pdu.isra.0+0x32>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    7b78:	462a      	mov	r2, r5
    7b7a:	2145      	movs	r1, #69	; 0x45
    7b7c:	4807      	ldr	r0, [pc, #28]	; (7b9c <l2cap_create_le_sig_pdu.isra.0+0x48>)
    7b7e:	f00a fac3 	bl	12108 <printk>
}
    7b82:	4620      	mov	r0, r4
    7b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	hdr = net_buf_add(buf, sizeof(*hdr));
    7b86:	2104      	movs	r1, #4
    7b88:	3008      	adds	r0, #8
    7b8a:	f005 fe21 	bl	d7d0 <net_buf_simple_add>
	hdr->code = code;
    7b8e:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
    7b90:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    7b92:	8046      	strh	r6, [r0, #2]
	return buf;
    7b94:	e7f5      	b.n	7b82 <l2cap_create_le_sig_pdu.isra.0+0x2e>
    7b96:	bf00      	nop
    7b98:	20000558 	.word	0x20000558
    7b9c:	0001a05a 	.word	0x0001a05a

00007ba0 <l2cap_chan_tx_init>:
{
    7ba0:	b538      	push	{r3, r4, r5, lr}
    7ba2:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    7ba4:	2500      	movs	r5, #0
	(void)memset(&chan->tx, 0, sizeof(chan->tx));
    7ba6:	220c      	movs	r2, #12
    7ba8:	2100      	movs	r1, #0
    7baa:	3048      	adds	r0, #72	; 0x48
    7bac:	f00b fdec 	bl	13788 <memset>
    7bb0:	f104 0350 	add.w	r3, r4, #80	; 0x50
    7bb4:	e8d3 2fef 	ldaex	r2, [r3]
    7bb8:	e8c3 5fe1 	stlex	r1, r5, [r3]
    7bbc:	2900      	cmp	r1, #0
    7bbe:	d1f9      	bne.n	7bb4 <l2cap_chan_tx_init+0x14>
	z_impl_k_queue_init(queue);
    7bc0:	f104 0054 	add.w	r0, r4, #84	; 0x54
    7bc4:	f00e fdd4 	bl	16770 <z_impl_k_queue_init>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    7bc8:	4b02      	ldr	r3, [pc, #8]	; (7bd4 <l2cap_chan_tx_init+0x34>)
    7bca:	6765      	str	r5, [r4, #116]	; 0x74
    7bcc:	e9c4 351e 	strd	r3, r5, [r4, #120]	; 0x78
}
    7bd0:	bd38      	pop	{r3, r4, r5, pc}
    7bd2:	bf00      	nop
    7bd4:	000141fb 	.word	0x000141fb

00007bd8 <k_work_submit_to_queue.constprop.0>:
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
    7bd8:	4601      	mov	r1, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7bda:	f100 0308 	add.w	r3, r0, #8
    7bde:	e8d3 2fef 	ldaex	r2, [r3]
    7be2:	f042 0001 	orr.w	r0, r2, #1
    7be6:	e8c3 0fec 	stlex	ip, r0, [r3]
    7bea:	f1bc 0f00 	cmp.w	ip, #0
    7bee:	d1f6      	bne.n	7bde <k_work_submit_to_queue.constprop.0+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    7bf0:	07d3      	lsls	r3, r2, #31
    7bf2:	d402      	bmi.n	7bfa <k_work_submit_to_queue.constprop.0+0x22>
		k_queue_append(&work_q->queue, work);
    7bf4:	4801      	ldr	r0, [pc, #4]	; (7bfc <k_work_submit_to_queue.constprop.0+0x24>)
    7bf6:	f00e bdc8 	b.w	1678a <k_queue_append>
}
    7bfa:	4770      	bx	lr
    7bfc:	20001dcc 	.word	0x20001dcc

00007c00 <l2cap_rtx_timeout>:
{
    7c00:	b538      	push	{r3, r4, r5, lr}
    7c02:	4604      	mov	r4, r0
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
    7c04:	f1a0 0510 	sub.w	r5, r0, #16
	BT_ERR("chan %p timeout", chan);
    7c08:	462a      	mov	r2, r5
    7c0a:	2145      	movs	r1, #69	; 0x45
    7c0c:	4806      	ldr	r0, [pc, #24]	; (7c28 <l2cap_rtx_timeout+0x28>)
    7c0e:	f00a fa7b 	bl	12108 <printk>
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    7c12:	f854 0c10 	ldr.w	r0, [r4, #-16]
    7c16:	4629      	mov	r1, r5
    7c18:	f00c fa4e 	bl	140b8 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    7c1c:	4628      	mov	r0, r5
}
    7c1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    7c22:	f00c ba62 	b.w	140ea <bt_l2cap_chan_del>
    7c26:	bf00      	nop
    7c28:	0001a087 	.word	0x0001a087

00007c2c <l2cap_chan_le_send>:
{
    7c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7c30:	4606      	mov	r6, r0
    7c32:	460d      	mov	r5, r1
    7c34:	4617      	mov	r7, r2
    7c36:	b085      	sub	sp, #20
	if (!test_and_dec(&ch->tx.credits)) {
    7c38:	f100 0850 	add.w	r8, r0, #80	; 0x50
		old_value = atomic_get(target);
    7c3c:	4640      	mov	r0, r8
    7c3e:	f00c f9a5 	bl	13f8c <atomic_get>
		if (!old_value) {
    7c42:	2800      	cmp	r0, #0
    7c44:	f000 80b8 	beq.w	7db8 <l2cap_chan_le_send+0x18c>
		new_value = old_value - 1;
    7c48:	1e43      	subs	r3, r0, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    7c4a:	e8d8 2fef 	ldaex	r2, [r8]
    7c4e:	4282      	cmp	r2, r0
    7c50:	d103      	bne.n	7c5a <l2cap_chan_le_send+0x2e>
    7c52:	e8c8 3fe1 	stlex	r1, r3, [r8]
    7c56:	2900      	cmp	r1, #0
    7c58:	d1f7      	bne.n	7c4a <l2cap_chan_le_send+0x1e>
	} while (atomic_cas(target, old_value, new_value) == 0);
    7c5a:	d1ef      	bne.n	7c3c <l2cap_chan_le_send+0x10>
	net_buf_simple_save(&buf->b, &state);
    7c5c:	f105 0b08 	add.w	fp, r5, #8
	state->offset = net_buf_simple_headroom(buf);
    7c60:	4658      	mov	r0, fp
    7c62:	f00d fdb7 	bl	157d4 <net_buf_simple_headroom>
	state->len = buf->len;
    7c66:	f8b5 a00c 	ldrh.w	sl, [r5, #12]
	if (buf->len + sdu_hdr_len > ch->tx.mps) {
    7c6a:	f8b6 304c 	ldrh.w	r3, [r6, #76]	; 0x4c
    7c6e:	eb0a 0207 	add.w	r2, sl, r7
    7c72:	429a      	cmp	r2, r3
	state->offset = net_buf_simple_headroom(buf);
    7c74:	9002      	str	r0, [sp, #8]
    7c76:	d81e      	bhi.n	7cb6 <l2cap_chan_le_send+0x8a>
	if (net_buf_headroom(buf) >= headroom && !buf->frags) {
    7c78:	4658      	mov	r0, fp
    7c7a:	f00d fdab 	bl	157d4 <net_buf_simple_headroom>
	headroom = BT_L2CAP_CHAN_SEND_RESERVE + sdu_hdr_len;
    7c7e:	f107 0309 	add.w	r3, r7, #9
	if (net_buf_headroom(buf) >= headroom && !buf->frags) {
    7c82:	b29b      	uxth	r3, r3
    7c84:	4298      	cmp	r0, r3
    7c86:	d316      	bcc.n	7cb6 <l2cap_chan_le_send+0x8a>
    7c88:	682b      	ldr	r3, [r5, #0]
    7c8a:	b9a3      	cbnz	r3, 7cb6 <l2cap_chan_le_send+0x8a>
		if (sdu_hdr_len) {
    7c8c:	b137      	cbz	r7, 7c9c <l2cap_chan_le_send+0x70>
			net_buf_push_le16(buf, net_buf_frags_len(buf));
    7c8e:	4628      	mov	r0, r5
    7c90:	f00c f92d 	bl	13eee <net_buf_frags_len>
    7c94:	b281      	uxth	r1, r0
    7c96:	4658      	mov	r0, fp
    7c98:	f00d fd7c 	bl	15794 <net_buf_simple_push_le16>
		return net_buf_ref(buf);
    7c9c:	4628      	mov	r0, r5
    7c9e:	f005 fc6b 	bl	d578 <net_buf_ref>
	if (!seg) {
    7ca2:	4604      	mov	r4, r0
    7ca4:	2800      	cmp	r0, #0
    7ca6:	d138      	bne.n	7d1a <l2cap_chan_le_send+0xee>
	return atomic_add(target, 1);
    7ca8:	2101      	movs	r1, #1
    7caa:	4640      	mov	r0, r8
    7cac:	f00c f971 	bl	13f92 <atomic_add>
		return -EAGAIN;
    7cb0:	f06f 070a 	mvn.w	r7, #10
    7cb4:	e07a      	b.n	7dac <l2cap_chan_le_send+0x180>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    7cb6:	79a8      	ldrb	r0, [r5, #6]
    7cb8:	f005 fa78 	bl	d1ac <net_buf_pool_get>
	seg = net_buf_alloc(pool, K_NO_WAIT);
    7cbc:	2200      	movs	r2, #0
    7cbe:	2300      	movs	r3, #0
    7cc0:	f00d fd63 	bl	1578a <net_buf_alloc_fixed>
	if (seg) {
    7cc4:	4604      	mov	r4, r0
    7cc6:	2800      	cmp	r0, #0
    7cc8:	d04f      	beq.n	7d6a <l2cap_chan_le_send+0x13e>
		net_buf_reserve(seg, BT_L2CAP_CHAN_SEND_RESERVE);
    7cca:	2109      	movs	r1, #9
    7ccc:	3008      	adds	r0, #8
    7cce:	f005 fbaf 	bl	d430 <net_buf_simple_reserve>
	if (sdu_hdr_len) {
    7cd2:	f104 0908 	add.w	r9, r4, #8
    7cd6:	b137      	cbz	r7, 7ce6 <l2cap_chan_le_send+0xba>
		net_buf_add_le16(seg, net_buf_frags_len(buf));
    7cd8:	4628      	mov	r0, r5
    7cda:	f00c f908 	bl	13eee <net_buf_frags_len>
    7cde:	b281      	uxth	r1, r0
    7ce0:	4648      	mov	r0, r9
    7ce2:	f00d fd96 	bl	15812 <net_buf_simple_add_le16>
	len = MIN(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    7ce6:	4648      	mov	r0, r9
    7ce8:	f00d fd78 	bl	157dc <net_buf_simple_tailroom>
    7cec:	f8b6 104c 	ldrh.w	r1, [r6, #76]	; 0x4c
    7cf0:	1bc9      	subs	r1, r1, r7
    7cf2:	4288      	cmp	r0, r1
    7cf4:	d242      	bcs.n	7d7c <l2cap_chan_le_send+0x150>
    7cf6:	4648      	mov	r0, r9
    7cf8:	f00d fd70 	bl	157dc <net_buf_simple_tailroom>
    7cfc:	b282      	uxth	r2, r0
	len = MIN(buf->len, len);
    7cfe:	89a9      	ldrh	r1, [r5, #12]
	net_buf_add_mem(seg, buf->data, len);
    7d00:	4648      	mov	r0, r9
    7d02:	428a      	cmp	r2, r1
    7d04:	bf28      	it	cs
    7d06:	460a      	movcs	r2, r1
    7d08:	68a9      	ldr	r1, [r5, #8]
    7d0a:	9203      	str	r2, [sp, #12]
    7d0c:	f00d fd6e 	bl	157ec <net_buf_simple_add_mem>
	net_buf_pull(buf, len);
    7d10:	9a03      	ldr	r2, [sp, #12]
    7d12:	4658      	mov	r0, fp
    7d14:	4611      	mov	r1, r2
    7d16:	f005 fd19 	bl	d74c <net_buf_simple_pull>
	len = seg->len - sdu_hdr_len;
    7d1a:	89a2      	ldrh	r2, [r4, #12]
	if ((buf == seg || !buf->len) && ch->chan.ops->sent) {
    7d1c:	42a5      	cmp	r5, r4
    7d1e:	f8b6 1048 	ldrh.w	r1, [r6, #72]	; 0x48
	len = seg->len - sdu_hdr_len;
    7d22:	eba2 0707 	sub.w	r7, r2, r7
	if ((buf == seg || !buf->len) && ch->chan.ops->sent) {
    7d26:	d001      	beq.n	7d2c <l2cap_chan_le_send+0x100>
    7d28:	89ab      	ldrh	r3, [r5, #12]
    7d2a:	bb4b      	cbnz	r3, 7d80 <l2cap_chan_le_send+0x154>
    7d2c:	6873      	ldr	r3, [r6, #4]
    7d2e:	695b      	ldr	r3, [r3, #20]
    7d30:	b333      	cbz	r3, 7d80 <l2cap_chan_le_send+0x154>
		err = bt_l2cap_send_cb(ch->chan.conn, ch->tx.cid, seg,
    7d32:	4b24      	ldr	r3, [pc, #144]	; (7dc4 <l2cap_chan_le_send+0x198>)
    7d34:	9600      	str	r6, [sp, #0]
		err = bt_l2cap_send_cb(ch->chan.conn, ch->tx.cid, seg,
    7d36:	4622      	mov	r2, r4
    7d38:	6830      	ldr	r0, [r6, #0]
    7d3a:	f00c fa04 	bl	14146 <bt_l2cap_send_cb>
    7d3e:	4604      	mov	r4, r0
	if (err) {
    7d40:	b308      	cbz	r0, 7d86 <l2cap_chan_le_send+0x15a>
		BT_WARN("Unable to send seg %d", err);
    7d42:	4602      	mov	r2, r0
    7d44:	2157      	movs	r1, #87	; 0x57
    7d46:	4820      	ldr	r0, [pc, #128]	; (7dc8 <l2cap_chan_le_send+0x19c>)
    7d48:	f00a f9de 	bl	12108 <printk>
    7d4c:	2101      	movs	r1, #1
    7d4e:	4640      	mov	r0, r8
    7d50:	f00c f91f 	bl	13f92 <atomic_add>
		if (err == -ENOBUFS) {
    7d54:	f114 0f37 	cmn.w	r4, #55	; 0x37
    7d58:	d12c      	bne.n	7db4 <l2cap_chan_le_send+0x188>
	buf->data = buf->__buf + state->offset;
    7d5a:	6928      	ldr	r0, [r5, #16]
    7d5c:	9b02      	ldr	r3, [sp, #8]
	buf->len = state->len;
    7d5e:	f8a5 a00c 	strh.w	sl, [r5, #12]
	buf->data = buf->__buf + state->offset;
    7d62:	fa10 f083 	uxtah	r0, r0, r3
    7d66:	60a8      	str	r0, [r5, #8]
	buf->len = state->len;
    7d68:	e7a2      	b.n	7cb0 <l2cap_chan_le_send+0x84>
	return bt_conn_create_pdu_timeout(pool,
    7d6a:	2200      	movs	r2, #0
    7d6c:	2300      	movs	r3, #0
    7d6e:	2104      	movs	r1, #4
    7d70:	f7ff fd56 	bl	7820 <bt_conn_create_pdu_timeout>
	if (!seg) {
    7d74:	4604      	mov	r4, r0
    7d76:	2800      	cmp	r0, #0
    7d78:	d1ab      	bne.n	7cd2 <l2cap_chan_le_send+0xa6>
    7d7a:	e795      	b.n	7ca8 <l2cap_chan_le_send+0x7c>
	len = MIN(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    7d7c:	b28a      	uxth	r2, r1
    7d7e:	e7be      	b.n	7cfe <l2cap_chan_le_send+0xd2>
		err = bt_l2cap_send_cb(ch->chan.conn, ch->tx.cid, seg,
    7d80:	4b12      	ldr	r3, [pc, #72]	; (7dcc <l2cap_chan_le_send+0x1a0>)
    7d82:	9600      	str	r6, [sp, #0]
    7d84:	e7d7      	b.n	7d36 <l2cap_chan_le_send+0x10a>
	if (!atomic_get(&ch->tx.credits)) {
    7d86:	4640      	mov	r0, r8
    7d88:	f00c f900 	bl	13f8c <atomic_get>
    7d8c:	b970      	cbnz	r0, 7dac <l2cap_chan_le_send+0x180>
		atomic_clear_bit(ch->chan.status, BT_L2CAP_STATUS_OUT);
    7d8e:	f106 0130 	add.w	r1, r6, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7d92:	e8d1 3fef 	ldaex	r3, [r1]
    7d96:	f023 0301 	bic.w	r3, r3, #1
    7d9a:	e8c1 3fe2 	stlex	r2, r3, [r1]
    7d9e:	2a00      	cmp	r2, #0
    7da0:	d1f7      	bne.n	7d92 <l2cap_chan_le_send+0x166>
		if (ch->chan.ops->status) {
    7da2:	6873      	ldr	r3, [r6, #4]
    7da4:	699b      	ldr	r3, [r3, #24]
    7da6:	b10b      	cbz	r3, 7dac <l2cap_chan_le_send+0x180>
			ch->chan.ops->status(&ch->chan, ch->chan.status);
    7da8:	4630      	mov	r0, r6
    7daa:	4798      	blx	r3
}
    7dac:	4638      	mov	r0, r7
    7dae:	b005      	add	sp, #20
    7db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7db4:	4627      	mov	r7, r4
    7db6:	e7f9      	b.n	7dac <l2cap_chan_le_send+0x180>
		BT_WARN("No credits to transmit packet");
    7db8:	2157      	movs	r1, #87	; 0x57
    7dba:	4805      	ldr	r0, [pc, #20]	; (7dd0 <l2cap_chan_le_send+0x1a4>)
    7dbc:	f00a f9a4 	bl	12108 <printk>
    7dc0:	e776      	b.n	7cb0 <l2cap_chan_le_send+0x84>
    7dc2:	bf00      	nop
    7dc4:	000140a1 	.word	0x000140a1
    7dc8:	0001a09c 	.word	0x0001a09c
    7dcc:	0001409b 	.word	0x0001409b
    7dd0:	0001a0b7 	.word	0x0001a0b7

00007dd4 <l2cap_le_conn_req>:
{
    7dd4:	b538      	push	{r3, r4, r5, lr}
    7dd6:	4604      	mov	r4, r0
	ch->chan.ident = get_ident();
    7dd8:	f7ff fe86 	bl	7ae8 <get_ident>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_LE_CONN_REQ,
    7ddc:	220a      	movs	r2, #10
	ch->chan.ident = get_ident();
    7dde:	4601      	mov	r1, r0
    7de0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_LE_CONN_REQ,
    7de4:	2014      	movs	r0, #20
    7de6:	f7ff feb5 	bl	7b54 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    7dea:	4605      	mov	r5, r0
    7dec:	b1e8      	cbz	r0, 7e2a <l2cap_le_conn_req+0x56>
	req = net_buf_add(buf, sizeof(*req));
    7dee:	210a      	movs	r1, #10
    7df0:	3008      	adds	r0, #8
    7df2:	f005 fced 	bl	d7d0 <net_buf_simple_add>
	req->psm = sys_cpu_to_le16(ch->chan.psm);
    7df6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    7df8:	f44f 12a0 	mov.w	r2, #1310720	; 0x140000
    7dfc:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->rx.cid);
    7dfe:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    7e00:	f104 0110 	add.w	r1, r4, #16
    7e04:	8043      	strh	r3, [r0, #2]
	req->mtu = sys_cpu_to_le16(ch->rx.mtu);
    7e06:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    7e08:	8083      	strh	r3, [r0, #4]
	req->mps = sys_cpu_to_le16(ch->rx.mps);
    7e0a:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    7e0e:	80c3      	strh	r3, [r0, #6]
	req->credits = sys_cpu_to_le16(ch->rx.init_credits);
    7e10:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    7e14:	8103      	strh	r3, [r0, #8]
    7e16:	2300      	movs	r3, #0
    7e18:	4805      	ldr	r0, [pc, #20]	; (7e30 <l2cap_le_conn_req+0x5c>)
    7e1a:	f009 f955 	bl	110c8 <k_delayed_work_submit_to_queue>
	bt_l2cap_send(chan->chan.conn, BT_L2CAP_CID_LE_SIG, buf);
    7e1e:	6820      	ldr	r0, [r4, #0]
    7e20:	4629      	mov	r1, r5
    7e22:	f00c fa0c 	bl	1423e <bt_l2cap_send.constprop.0>
	return 0;
    7e26:	2000      	movs	r0, #0
}
    7e28:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
    7e2a:	f06f 000b 	mvn.w	r0, #11
    7e2e:	e7fb      	b.n	7e28 <l2cap_le_conn_req+0x54>
    7e30:	20001dcc 	.word	0x20001dcc

00007e34 <l2cap_chan_send_credits.isra.0>:
static void l2cap_chan_send_credits(struct bt_l2cap_le_chan *chan,
    7e34:	b570      	push	{r4, r5, r6, lr}
    7e36:	f8b0 6042 	ldrh.w	r6, [r0, #66]	; 0x42
    7e3a:	4604      	mov	r4, r0
	if (credits > chan->rx.init_credits) {
    7e3c:	428e      	cmp	r6, r1
    7e3e:	bf28      	it	cs
    7e40:	460e      	movcs	r6, r1
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CREDITS, get_ident(),
    7e42:	f7ff fe51 	bl	7ae8 <get_ident>
    7e46:	2204      	movs	r2, #4
    7e48:	4601      	mov	r1, r0
    7e4a:	2016      	movs	r0, #22
    7e4c:	f7ff fe82 	bl	7b54 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    7e50:	4605      	mov	r5, r0
    7e52:	2800      	cmp	r0, #0
    7e54:	d13a      	bne.n	7ecc <l2cap_chan_send_credits.isra.0+0x98>
		BT_ERR("Unable to send credits update");
    7e56:	2145      	movs	r1, #69	; 0x45
    7e58:	4826      	ldr	r0, [pc, #152]	; (7ef4 <l2cap_chan_send_credits.isra.0+0xc0>)
    7e5a:	f00a f955 	bl	12108 <printk>
	atomic_set_bit(chan->status, BT_L2CAP_STATUS_SHUTDOWN);
    7e5e:	f104 0630 	add.w	r6, r4, #48	; 0x30
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7e62:	e8d6 3fef 	ldaex	r3, [r6]
    7e66:	f043 0302 	orr.w	r3, r3, #2
    7e6a:	e8c6 3fe2 	stlex	r2, r3, [r6]
    7e6e:	2a00      	cmp	r2, #0
    7e70:	d1f7      	bne.n	7e62 <l2cap_chan_send_credits.isra.0+0x2e>
	if (ch->_sdu) {
    7e72:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    7e76:	b128      	cbz	r0, 7e84 <l2cap_chan_send_credits.isra.0+0x50>
		net_buf_unref(ch->_sdu);
    7e78:	f005 fb38 	bl	d4ec <net_buf_unref>
		ch->_sdu = NULL;
    7e7c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
		ch->_sdu_len = 0U;
    7e80:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
	if (ch->tx_buf) {
    7e84:	6f20      	ldr	r0, [r4, #112]	; 0x70
    7e86:	b118      	cbz	r0, 7e90 <l2cap_chan_send_credits.isra.0+0x5c>
		net_buf_unref(ch->tx_buf);
    7e88:	f005 fb30 	bl	d4ec <net_buf_unref>
		ch->tx_buf = NULL;
    7e8c:	2300      	movs	r3, #0
    7e8e:	6723      	str	r3, [r4, #112]	; 0x70
	while ((buf = net_buf_get(&ch->tx_queue, K_NO_WAIT))) {
    7e90:	f104 0554 	add.w	r5, r4, #84	; 0x54
    7e94:	2200      	movs	r2, #0
    7e96:	2300      	movs	r3, #0
    7e98:	4628      	mov	r0, r5
    7e9a:	f005 fa95 	bl	d3c8 <net_buf_get>
    7e9e:	b978      	cbnz	r0, 7ec0 <l2cap_chan_send_credits.isra.0+0x8c>
	while ((buf = net_buf_get(&ch->rx_queue, K_NO_WAIT))) {
    7ea0:	f104 0594 	add.w	r5, r4, #148	; 0x94
    7ea4:	2200      	movs	r2, #0
    7ea6:	2300      	movs	r3, #0
    7ea8:	4628      	mov	r0, r5
    7eaa:	f005 fa8d 	bl	d3c8 <net_buf_get>
    7eae:	b950      	cbnz	r0, 7ec6 <l2cap_chan_send_credits.isra.0+0x92>
	if (chan->ops->status) {
    7eb0:	6863      	ldr	r3, [r4, #4]
    7eb2:	699b      	ldr	r3, [r3, #24]
    7eb4:	b1eb      	cbz	r3, 7ef2 <l2cap_chan_send_credits.isra.0+0xbe>
		chan->ops->status(chan, chan->status);
    7eb6:	4631      	mov	r1, r6
    7eb8:	4620      	mov	r0, r4
}
    7eba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		chan->ops->status(chan, chan->status);
    7ebe:	4718      	bx	r3
		net_buf_unref(buf);
    7ec0:	f005 fb14 	bl	d4ec <net_buf_unref>
    7ec4:	e7e6      	b.n	7e94 <l2cap_chan_send_credits.isra.0+0x60>
		net_buf_unref(buf);
    7ec6:	f005 fb11 	bl	d4ec <net_buf_unref>
    7eca:	e7eb      	b.n	7ea4 <l2cap_chan_send_credits.isra.0+0x70>
	atomic_add(&chan->rx.credits, credits);
    7ecc:	4631      	mov	r1, r6
    7ece:	f104 0044 	add.w	r0, r4, #68	; 0x44
    7ed2:	f00c f85e 	bl	13f92 <atomic_add>
	ev = net_buf_add(buf, sizeof(*ev));
    7ed6:	2104      	movs	r1, #4
    7ed8:	f105 0008 	add.w	r0, r5, #8
    7edc:	f005 fc78 	bl	d7d0 <net_buf_simple_add>
	ev->cid = sys_cpu_to_le16(chan->rx.cid);
    7ee0:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
	bt_l2cap_send(chan->chan.conn, BT_L2CAP_CID_LE_SIG, buf);
    7ee2:	4629      	mov	r1, r5
	ev->credits = sys_cpu_to_le16(credits);
    7ee4:	8046      	strh	r6, [r0, #2]
	ev->cid = sys_cpu_to_le16(chan->rx.cid);
    7ee6:	8003      	strh	r3, [r0, #0]
	bt_l2cap_send(chan->chan.conn, BT_L2CAP_CID_LE_SIG, buf);
    7ee8:	6820      	ldr	r0, [r4, #0]
}
    7eea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_send(chan->chan.conn, BT_L2CAP_CID_LE_SIG, buf);
    7eee:	f00c b9a6 	b.w	1423e <bt_l2cap_send.constprop.0>
}
    7ef2:	bd70      	pop	{r4, r5, r6, pc}
    7ef4:	0001a0da 	.word	0x0001a0da

00007ef8 <l2cap_chan_add>:
	if (ch->rx.cid > 0) {
    7ef8:	8f8b      	ldrh	r3, [r1, #60]	; 0x3c
{
    7efa:	b570      	push	{r4, r5, r6, lr}
    7efc:	4605      	mov	r5, r0
    7efe:	460c      	mov	r4, r1
    7f00:	4616      	mov	r6, r2
	if (ch->rx.cid > 0) {
    7f02:	b92b      	cbnz	r3, 7f10 <l2cap_chan_add+0x18>
	for (cid = L2CAP_LE_CID_DYN_START; cid <= L2CAP_LE_CID_DYN_END; cid++) {
    7f04:	2140      	movs	r1, #64	; 0x40
		if (!bt_l2cap_le_lookup_rx_cid(conn, cid)) {
    7f06:	4628      	mov	r0, r5
    7f08:	f00c f9fb 	bl	14302 <bt_l2cap_le_lookup_rx_cid>
    7f0c:	bb50      	cbnz	r0, 7f64 <l2cap_chan_add+0x6c>
			ch->rx.cid = cid;
    7f0e:	87a1      	strh	r1, [r4, #60]	; 0x3c
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    7f10:	491c      	ldr	r1, [pc, #112]	; (7f84 <l2cap_chan_add+0x8c>)
    7f12:	f104 0010 	add.w	r0, r4, #16
    7f16:	f00e fcf4 	bl	16902 <k_delayed_work_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    7f1a:	2200      	movs	r2, #0
    7f1c:	f104 0330 	add.w	r3, r4, #48	; 0x30
    7f20:	e8d3 1fef 	ldaex	r1, [r3]
    7f24:	e8c3 2fe0 	stlex	r0, r2, [r3]
    7f28:	2800      	cmp	r0, #0
    7f2a:	d1f9      	bne.n	7f20 <l2cap_chan_add+0x28>
	parent->next = child;
    7f2c:	60a2      	str	r2, [r4, #8]
Z_GENLIST_APPEND(slist, snode)
    7f2e:	6d6a      	ldr	r2, [r5, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
    7f30:	f104 0308 	add.w	r3, r4, #8
    7f34:	bb02      	cbnz	r2, 7f78 <l2cap_chan_add+0x80>
	list->head = node;
    7f36:	e9c5 3314 	strd	r3, r3, [r5, #80]	; 0x50
	if (L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    7f3a:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
	chan->conn = conn;
    7f3c:	6025      	str	r5, [r4, #0]
	if (L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    7f3e:	3b40      	subs	r3, #64	; 0x40
    7f40:	b29b      	uxth	r3, r3
    7f42:	2b3f      	cmp	r3, #63	; 0x3f
	chan->destroy = destroy;
    7f44:	60e6      	str	r6, [r4, #12]
	if (L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    7f46:	d81a      	bhi.n	7f7e <l2cap_chan_add+0x86>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    7f48:	2300      	movs	r3, #0
    7f4a:	4a0f      	ldr	r2, [pc, #60]	; (7f88 <l2cap_chan_add+0x90>)
    7f4c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    7f50:	e9c4 2323 	strd	r2, r3, [r4, #140]	; 0x8c
    7f54:	f104 0094 	add.w	r0, r4, #148	; 0x94
    7f58:	f00e fc0a 	bl	16770 <z_impl_k_queue_init>
	chan->state = state;
    7f5c:	2001      	movs	r0, #1
    7f5e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
    7f62:	bd70      	pop	{r4, r5, r6, pc}
	for (cid = L2CAP_LE_CID_DYN_START; cid <= L2CAP_LE_CID_DYN_END; cid++) {
    7f64:	3101      	adds	r1, #1
    7f66:	b289      	uxth	r1, r1
    7f68:	2980      	cmp	r1, #128	; 0x80
    7f6a:	d1cc      	bne.n	7f06 <l2cap_chan_add+0xe>
		BT_ERR("Unable to allocate L2CAP CID");
    7f6c:	4807      	ldr	r0, [pc, #28]	; (7f8c <l2cap_chan_add+0x94>)
    7f6e:	2145      	movs	r1, #69	; 0x45
    7f70:	f00a f8ca 	bl	12108 <printk>
    7f74:	2000      	movs	r0, #0
    7f76:	e7f4      	b.n	7f62 <l2cap_chan_add+0x6a>
	parent->next = child;
    7f78:	6013      	str	r3, [r2, #0]
	list->tail = node;
    7f7a:	656b      	str	r3, [r5, #84]	; 0x54
}
    7f7c:	e7dd      	b.n	7f3a <l2cap_chan_add+0x42>
	return true;
    7f7e:	2001      	movs	r0, #1
    7f80:	e7ef      	b.n	7f62 <l2cap_chan_add+0x6a>
    7f82:	bf00      	nop
    7f84:	00007c01 	.word	0x00007c01
    7f88:	0000826d 	.word	0x0000826d
    7f8c:	0001a0fd 	.word	0x0001a0fd

00007f90 <bt_l2cap_connected>:
{
    7f90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    7f94:	4e21      	ldr	r6, [pc, #132]	; (801c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>)
{
    7f96:	4605      	mov	r5, r0
    7f98:	46b0      	mov	r8, r6
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    7f9a:	4c21      	ldr	r4, [pc, #132]	; (8020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>)
    7f9c:	4f21      	ldr	r7, [pc, #132]	; (8024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>)
    7f9e:	42b4      	cmp	r4, r6
    7fa0:	d90e      	bls.n	7fc0 <bt_l2cap_connected+0x30>
    7fa2:	4921      	ldr	r1, [pc, #132]	; (8028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>)
    7fa4:	f44f 73ab 	mov.w	r3, #342	; 0x156
    7fa8:	463a      	mov	r2, r7
    7faa:	4820      	ldr	r0, [pc, #128]	; (802c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>)
    7fac:	f00a f8ac 	bl	12108 <printk>
    7fb0:	481f      	ldr	r0, [pc, #124]	; (8030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>)
    7fb2:	f00a f8a9 	bl	12108 <printk>
    7fb6:	f44f 71ab 	mov.w	r1, #342	; 0x156
    7fba:	4638      	mov	r0, r7
    7fbc:	f00a fb3a 	bl	12634 <assert_post_action>
    7fc0:	4544      	cmp	r4, r8
    7fc2:	d302      	bcc.n	7fca <bt_l2cap_connected+0x3a>
}
    7fc4:	b002      	add	sp, #8
    7fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (fchan->accept(conn, &chan) < 0) {
    7fca:	4628      	mov	r0, r5
    7fcc:	6863      	ldr	r3, [r4, #4]
    7fce:	a901      	add	r1, sp, #4
    7fd0:	4798      	blx	r3
    7fd2:	2800      	cmp	r0, #0
    7fd4:	db20      	blt.n	8018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
		ch = BT_L2CAP_LE_CHAN(chan);
    7fd6:	9901      	ldr	r1, [sp, #4]
		ch->rx.cid = fchan->cid;
    7fd8:	8823      	ldrh	r3, [r4, #0]
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    7fda:	4628      	mov	r0, r5
    7fdc:	68a2      	ldr	r2, [r4, #8]
		ch->rx.cid = fchan->cid;
    7fde:	878b      	strh	r3, [r1, #60]	; 0x3c
		ch->tx.cid = fchan->cid;
    7fe0:	f8a1 3048 	strh.w	r3, [r1, #72]	; 0x48
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    7fe4:	f7ff ff88 	bl	7ef8 <l2cap_chan_add>
    7fe8:	2800      	cmp	r0, #0
    7fea:	d0eb      	beq.n	7fc4 <bt_l2cap_connected+0x34>
		if (chan->ops->connected) {
    7fec:	9801      	ldr	r0, [sp, #4]
    7fee:	6843      	ldr	r3, [r0, #4]
    7ff0:	681b      	ldr	r3, [r3, #0]
    7ff2:	b103      	cbz	r3, 7ff6 <bt_l2cap_connected+0x66>
			chan->ops->connected(chan);
    7ff4:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7ff6:	9b01      	ldr	r3, [sp, #4]
    7ff8:	3330      	adds	r3, #48	; 0x30
    7ffa:	e8d3 2fef 	ldaex	r2, [r3]
    7ffe:	f042 0201 	orr.w	r2, r2, #1
    8002:	e8c3 2fe1 	stlex	r1, r2, [r3]
    8006:	2900      	cmp	r1, #0
    8008:	d1f7      	bne.n	7ffa <bt_l2cap_connected+0x6a>
		if (chan->ops->status) {
    800a:	9801      	ldr	r0, [sp, #4]
    800c:	6843      	ldr	r3, [r0, #4]
    800e:	699b      	ldr	r3, [r3, #24]
    8010:	b113      	cbz	r3, 8018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
			chan->ops->status(chan, chan->status);
    8012:	f100 0130 	add.w	r1, r0, #48	; 0x30
    8016:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    8018:	340c      	adds	r4, #12
    801a:	e7c0      	b.n	7f9e <bt_l2cap_connected+0xe>
    801c:	00016cfc 	.word	0x00016cfc
    8020:	00016cd8 	.word	0x00016cd8
    8024:	0001a11f 	.word	0x0001a11f
    8028:	0001a150 	.word	0x0001a150
    802c:	00017d82 	.word	0x00017d82
    8030:	00017d9f 	.word	0x00017d9f

00008034 <bt_l2cap_recv>:
{
    8034:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
    8036:	898b      	ldrh	r3, [r1, #12]
{
    8038:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
    803a:	2b03      	cmp	r3, #3
{
    803c:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    803e:	d804      	bhi.n	804a <bt_l2cap_recv+0x16>
		BT_ERR("Too small L2CAP PDU received");
    8040:	2145      	movs	r1, #69	; 0x45
    8042:	481e      	ldr	r0, [pc, #120]	; (80bc <bt_l2cap_recv+0x88>)
		BT_WARN("Ignoring data received while channel has shutdown");
    8044:	f00a f860 	bl	12108 <printk>
		net_buf_unref(buf);
    8048:	e00f      	b.n	806a <bt_l2cap_recv+0x36>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    804a:	2104      	movs	r1, #4
    804c:	f104 0008 	add.w	r0, r4, #8
    8050:	f005 fb9c 	bl	d78c <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
    8054:	8842      	ldrh	r2, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    8056:	4628      	mov	r0, r5
    8058:	4611      	mov	r1, r2
    805a:	f00c f952 	bl	14302 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    805e:	4605      	mov	r5, r0
    8060:	b940      	cbnz	r0, 8074 <bt_l2cap_recv+0x40>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    8062:	2157      	movs	r1, #87	; 0x57
    8064:	4816      	ldr	r0, [pc, #88]	; (80c0 <bt_l2cap_recv+0x8c>)
    8066:	f00a f84f 	bl	12108 <printk>
	net_buf_unref(buf);
    806a:	4620      	mov	r0, r4
}
    806c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
    8070:	f005 ba3c 	b.w	d4ec <net_buf_unref>
	if (L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    8074:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    8076:	3b40      	subs	r3, #64	; 0x40
    8078:	b29b      	uxth	r3, r3
    807a:	2b3f      	cmp	r3, #63	; 0x3f
    807c:	d819      	bhi.n	80b2 <bt_l2cap_recv+0x7e>
	if (chan->chan.state == BT_L2CAP_DISCONNECT) {
    807e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
    8082:	2b04      	cmp	r3, #4
    8084:	d102      	bne.n	808c <bt_l2cap_recv+0x58>
		BT_WARN("Ignoring data received while disconnecting");
    8086:	2157      	movs	r1, #87	; 0x57
    8088:	480e      	ldr	r0, [pc, #56]	; (80c4 <bt_l2cap_recv+0x90>)
    808a:	e7db      	b.n	8044 <bt_l2cap_recv+0x10>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    808c:	3030      	adds	r0, #48	; 0x30
    808e:	f00b ff7d 	bl	13f8c <atomic_get>
	if (atomic_test_bit(chan->chan.status, BT_L2CAP_STATUS_SHUTDOWN)) {
    8092:	0783      	lsls	r3, r0, #30
    8094:	d502      	bpl.n	809c <bt_l2cap_recv+0x68>
		BT_WARN("Ignoring data received while channel has shutdown");
    8096:	2157      	movs	r1, #87	; 0x57
    8098:	480b      	ldr	r0, [pc, #44]	; (80c8 <bt_l2cap_recv+0x94>)
    809a:	e7d3      	b.n	8044 <bt_l2cap_recv+0x10>
	net_buf_put(&chan->rx_queue, buf);
    809c:	f105 0094 	add.w	r0, r5, #148	; 0x94
    80a0:	4621      	mov	r1, r4
    80a2:	f005 f9ef 	bl	d484 <net_buf_put>
	k_work_submit_to_queue(&k_sys_work_q, work);
    80a6:	f105 0088 	add.w	r0, r5, #136	; 0x88
}
    80aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    80ae:	f7ff bd93 	b.w	7bd8 <k_work_submit_to_queue.constprop.0>
	chan->ops->recv(chan, buf);
    80b2:	6843      	ldr	r3, [r0, #4]
    80b4:	4621      	mov	r1, r4
    80b6:	691b      	ldr	r3, [r3, #16]
    80b8:	4798      	blx	r3
    80ba:	e7d6      	b.n	806a <bt_l2cap_recv+0x36>
    80bc:	0001a177 	.word	0x0001a177
    80c0:	0001a199 	.word	0x0001a199
    80c4:	0001a1c3 	.word	0x0001a1c3
    80c8:	0001a1f3 	.word	0x0001a1f3

000080cc <bt_l2cap_chan_disconnect>:

	return l2cap_le_connect(conn, BT_L2CAP_LE_CHAN(chan), psm);
}

int bt_l2cap_chan_disconnect(struct bt_l2cap_chan *chan)
{
    80cc:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->conn;
	struct net_buf *buf;
	struct bt_l2cap_disconn_req *req;
	struct bt_l2cap_le_chan *ch;

	if (!conn) {
    80ce:	6803      	ldr	r3, [r0, #0]
{
    80d0:	4604      	mov	r4, r0
	if (!conn) {
    80d2:	b323      	cbz	r3, 811e <bt_l2cap_chan_disconnect+0x52>
	ch = BT_L2CAP_LE_CHAN(chan);

	BT_DBG("chan %p scid 0x%04x dcid 0x%04x", chan, ch->rx.cid,
	       ch->tx.cid);

	ch->chan.ident = get_ident();
    80d4:	f7ff fd08 	bl	7ae8 <get_ident>

	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_DISCONN_REQ,
    80d8:	2204      	movs	r2, #4
	ch->chan.ident = get_ident();
    80da:	4601      	mov	r1, r0
    80dc:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_DISCONN_REQ,
    80e0:	2006      	movs	r0, #6
    80e2:	f7ff fd37 	bl	7b54 <l2cap_create_le_sig_pdu.isra.0>
				      ch->chan.ident, sizeof(*req));
	if (!buf) {
    80e6:	4605      	mov	r5, r0
    80e8:	b1e0      	cbz	r0, 8124 <bt_l2cap_chan_disconnect+0x58>
		return -ENOMEM;
	}

	req = net_buf_add(buf, sizeof(*req));
    80ea:	2104      	movs	r1, #4
    80ec:	3008      	adds	r0, #8
    80ee:	f005 fb6f 	bl	d7d0 <net_buf_simple_add>
	req->dcid = sys_cpu_to_le16(ch->rx.cid);
    80f2:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    80f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    80f8:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->tx.cid);
    80fa:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    80fe:	f104 0110 	add.w	r1, r4, #16
    8102:	8043      	strh	r3, [r0, #2]
    8104:	2300      	movs	r3, #0
    8106:	4809      	ldr	r0, [pc, #36]	; (812c <bt_l2cap_chan_disconnect+0x60>)
    8108:	f008 ffde 	bl	110c8 <k_delayed_work_submit_to_queue>
	bt_l2cap_send(chan->chan.conn, BT_L2CAP_CID_LE_SIG, buf);
    810c:	6820      	ldr	r0, [r4, #0]
    810e:	4629      	mov	r1, r5
    8110:	f00c f895 	bl	1423e <bt_l2cap_send.constprop.0>
	chan->state = state;
    8114:	2304      	movs	r3, #4

	l2cap_chan_send_req(ch, buf, L2CAP_DISC_TIMEOUT);
	bt_l2cap_chan_set_state(chan, BT_L2CAP_DISCONNECT);

	return 0;
    8116:	2000      	movs	r0, #0
	chan->state = state;
    8118:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
    811c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTCONN;
    811e:	f06f 0038 	mvn.w	r0, #56	; 0x38
    8122:	e7fb      	b.n	811c <bt_l2cap_chan_disconnect+0x50>
		return -ENOMEM;
    8124:	f06f 000b 	mvn.w	r0, #11
    8128:	e7f8      	b.n	811c <bt_l2cap_chan_disconnect+0x50>
    812a:	bf00      	nop
    812c:	20001dcc 	.word	0x20001dcc

00008130 <l2cap_chan_le_recv_seg>:
	u16_t seg = 0U;
    8130:	2300      	movs	r3, #0
{
    8132:	b570      	push	{r4, r5, r6, lr}
    8134:	460d      	mov	r5, r1
	len = net_buf_frags_len(chan->_sdu);
    8136:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
{
    813a:	b086      	sub	sp, #24
    813c:	4604      	mov	r4, r0
	len = net_buf_frags_len(chan->_sdu);
    813e:	4608      	mov	r0, r1
	u16_t seg = 0U;
    8140:	f8ad 3016 	strh.w	r3, [sp, #22]
	len = net_buf_frags_len(chan->_sdu);
    8144:	f00b fed3 	bl	13eee <net_buf_frags_len>
	if (len) {
    8148:	b283      	uxth	r3, r0
	len = net_buf_frags_len(chan->_sdu);
    814a:	4606      	mov	r6, r0
	if (len) {
    814c:	b12b      	cbz	r3, 815a <l2cap_chan_le_recv_seg+0x2a>
		memcpy(&seg, net_buf_user_data(chan->_sdu), sizeof(seg));
    814e:	2202      	movs	r2, #2
    8150:	3114      	adds	r1, #20
    8152:	f10d 0016 	add.w	r0, sp, #22
    8156:	f00b faec 	bl	13732 <memcpy>
	if (len + buf->len > chan->_sdu_len) {
    815a:	89a8      	ldrh	r0, [r5, #12]
    815c:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
    8160:	fa10 f686 	uxtah	r6, r0, r6
    8164:	429e      	cmp	r6, r3
    8166:	dd08      	ble.n	817a <l2cap_chan_le_recv_seg+0x4a>
		BT_ERR("SDU length mismatch");
    8168:	2145      	movs	r1, #69	; 0x45
    816a:	483c      	ldr	r0, [pc, #240]	; (825c <l2cap_chan_le_recv_seg+0x12c>)
		BT_ERR("Unable to store SDU");
    816c:	f009 ffcc 	bl	12108 <printk>
		bt_l2cap_chan_disconnect(&chan->chan);
    8170:	4620      	mov	r0, r4
    8172:	f7ff ffab 	bl	80cc <bt_l2cap_chan_disconnect>
}
    8176:	b006      	add	sp, #24
    8178:	bd70      	pop	{r4, r5, r6, pc}
	seg++;
    817a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 *
 * @return Pointer to the user data of the buffer.
 */
static inline void *net_buf_user_data(const struct net_buf *buf)
{
	return (void *)buf->user_data;
    817e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    8182:	3301      	adds	r3, #1
	memcpy(net_buf_user_data(chan->_sdu), &seg, sizeof(seg));
    8184:	2202      	movs	r2, #2
    8186:	f10d 0116 	add.w	r1, sp, #22
    818a:	3014      	adds	r0, #20
	seg++;
    818c:	f8ad 3016 	strh.w	r3, [sp, #22]
	memcpy(net_buf_user_data(chan->_sdu), &seg, sizeof(seg));
    8190:	f00b facf 	bl	13732 <memcpy>
	len = net_buf_append_bytes(chan->_sdu, buf->len, buf->data, K_NO_WAIT,
    8194:	4b32      	ldr	r3, [pc, #200]	; (8260 <l2cap_chan_le_recv_seg+0x130>)
    8196:	2200      	movs	r2, #0
    8198:	9302      	str	r3, [sp, #8]
    819a:	2300      	movs	r3, #0
    819c:	e9cd 2300 	strd	r2, r3, [sp]
    81a0:	9403      	str	r4, [sp, #12]
    81a2:	68aa      	ldr	r2, [r5, #8]
    81a4:	89a9      	ldrh	r1, [r5, #12]
    81a6:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    81aa:	f00d fb3b 	bl	15824 <net_buf_append_bytes>
	if (len != buf->len) {
    81ae:	89ab      	ldrh	r3, [r5, #12]
    81b0:	b280      	uxth	r0, r0
    81b2:	4283      	cmp	r3, r0
    81b4:	d002      	beq.n	81bc <l2cap_chan_le_recv_seg+0x8c>
		BT_ERR("Unable to store SDU");
    81b6:	2145      	movs	r1, #69	; 0x45
    81b8:	482a      	ldr	r0, [pc, #168]	; (8264 <l2cap_chan_le_recv_seg+0x134>)
    81ba:	e7d7      	b.n	816c <l2cap_chan_le_recv_seg+0x3c>
	if (net_buf_frags_len(chan->_sdu) < chan->_sdu_len) {
    81bc:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
    81c0:	4630      	mov	r0, r6
    81c2:	f00b fe94 	bl	13eee <net_buf_frags_len>
    81c6:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
    81ca:	4298      	cmp	r0, r3
    81cc:	d225      	bcs.n	821a <l2cap_chan_le_recv_seg+0xea>
		if (!atomic_get(&chan->rx.credits) &&
    81ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
    81d2:	4618      	mov	r0, r3
    81d4:	f00b feda 	bl	13f8c <atomic_get>
    81d8:	2800      	cmp	r0, #0
    81da:	d1cc      	bne.n	8176 <l2cap_chan_le_recv_seg+0x46>
    81dc:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
    81e0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    81e4:	4291      	cmp	r1, r2
    81e6:	d1c6      	bne.n	8176 <l2cap_chan_le_recv_seg+0x46>
	atomic_val_t old_credits = atomic_get(&chan->rx.credits);
    81e8:	4618      	mov	r0, r3
    81ea:	f00b fecf 	bl	13f8c <atomic_get>
    81ee:	4606      	mov	r6, r0
	credits = ((chan->_sdu_len - net_buf_frags_len(buf)) +
    81f0:	4628      	mov	r0, r5
    81f2:	f00b fe7c 	bl	13eee <net_buf_frags_len>
    81f6:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
    81fa:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
    81fe:	440b      	add	r3, r1
    8200:	3b01      	subs	r3, #1
    8202:	1a1b      	subs	r3, r3, r0
		   (chan->rx.mps - 1)) / chan->rx.mps;
    8204:	fbb3 f1f1 	udiv	r1, r3, r1
	if (credits < old_credits) {
    8208:	b28b      	uxth	r3, r1
    820a:	429e      	cmp	r6, r3
    820c:	dcb3      	bgt.n	8176 <l2cap_chan_le_recv_seg+0x46>
	credits -= old_credits;
    820e:	1b89      	subs	r1, r1, r6
	l2cap_chan_send_credits(chan, buf, credits);
    8210:	4620      	mov	r0, r4
    8212:	b289      	uxth	r1, r1
    8214:	f7ff fe0e 	bl	7e34 <l2cap_chan_send_credits.isra.0>
    8218:	e7ad      	b.n	8176 <l2cap_chan_le_recv_seg+0x46>
	chan->_sdu = NULL;
    821a:	2300      	movs	r3, #0
    821c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	chan->_sdu_len = 0U;
    8220:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
	err = chan->chan.ops->recv(&chan->chan, buf);
    8224:	6863      	ldr	r3, [r4, #4]
    8226:	4631      	mov	r1, r6
    8228:	4620      	mov	r0, r4
    822a:	691b      	ldr	r3, [r3, #16]
	l2cap_chan_le_recv_sdu(chan, buf, seg);
    822c:	f8bd 5016 	ldrh.w	r5, [sp, #22]
	err = chan->chan.ops->recv(&chan->chan, buf);
    8230:	4798      	blx	r3
	if (err < 0) {
    8232:	1e02      	subs	r2, r0, #0
    8234:	da0d      	bge.n	8252 <l2cap_chan_le_recv_seg+0x122>
		if (err != -EINPROGRESS) {
    8236:	f112 0f44 	cmn.w	r2, #68	; 0x44
    823a:	d09c      	beq.n	8176 <l2cap_chan_le_recv_seg+0x46>
			BT_ERR("err %d", err);
    823c:	480a      	ldr	r0, [pc, #40]	; (8268 <l2cap_chan_le_recv_seg+0x138>)
    823e:	2145      	movs	r1, #69	; 0x45
    8240:	f009 ff62 	bl	12108 <printk>
			bt_l2cap_chan_disconnect(&chan->chan);
    8244:	4620      	mov	r0, r4
    8246:	f7ff ff41 	bl	80cc <bt_l2cap_chan_disconnect>
	net_buf_unref(buf);
    824a:	4630      	mov	r0, r6
    824c:	f005 f94e 	bl	d4ec <net_buf_unref>
    8250:	e791      	b.n	8176 <l2cap_chan_le_recv_seg+0x46>
	l2cap_chan_send_credits(chan, buf, seg);
    8252:	4629      	mov	r1, r5
    8254:	4620      	mov	r0, r4
    8256:	f7ff fded 	bl	7e34 <l2cap_chan_send_credits.isra.0>
    825a:	e7f6      	b.n	824a <l2cap_chan_le_recv_seg+0x11a>
    825c:	0001a22a 	.word	0x0001a22a
    8260:	00013f79 	.word	0x00013f79
    8264:	0001a243 	.word	0x0001a243
    8268:	0001a25c 	.word	0x0001a25c

0000826c <l2cap_rx_process>:
{
    826c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8270:	4604      	mov	r4, r0
		BT_ERR("No credits to receive packet");
    8272:	4f31      	ldr	r7, [pc, #196]	; (8338 <l2cap_rx_process+0xcc>)
			BT_ERR("err %d", err);
    8274:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8340 <l2cap_rx_process+0xd4>
			BT_ERR("Unable to allocate buffer for SDU");
    8278:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8344 <l2cap_rx_process+0xd8>
	struct bt_l2cap_le_chan *ch = CHAN_RX(work);
    827c:	f1a0 0588 	sub.w	r5, r0, #136	; 0x88
	while ((buf = net_buf_get(&ch->rx_queue, K_NO_WAIT))) {
    8280:	2200      	movs	r2, #0
    8282:	2300      	movs	r3, #0
    8284:	f104 000c 	add.w	r0, r4, #12
    8288:	f005 f89e 	bl	d3c8 <net_buf_get>
    828c:	4606      	mov	r6, r0
    828e:	b908      	cbnz	r0, 8294 <l2cap_rx_process+0x28>
}
    8290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!test_and_dec(&chan->rx.credits)) {
    8294:	f1a4 0344 	sub.w	r3, r4, #68	; 0x44
		old_value = atomic_get(target);
    8298:	4618      	mov	r0, r3
    829a:	f00b fe77 	bl	13f8c <atomic_get>
		if (!old_value) {
    829e:	2800      	cmp	r0, #0
    82a0:	d047      	beq.n	8332 <l2cap_rx_process+0xc6>
		new_value = old_value - 1;
    82a2:	1e42      	subs	r2, r0, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    82a4:	e8d3 1fef 	ldaex	r1, [r3]
    82a8:	4281      	cmp	r1, r0
    82aa:	d104      	bne.n	82b6 <l2cap_rx_process+0x4a>
    82ac:	e8c3 2fec 	stlex	ip, r2, [r3]
    82b0:	f1bc 0f00 	cmp.w	ip, #0
    82b4:	d1f6      	bne.n	82a4 <l2cap_rx_process+0x38>
	} while (atomic_cas(target, old_value, new_value) == 0);
    82b6:	d1ef      	bne.n	8298 <l2cap_rx_process+0x2c>
	if (chan->_sdu) {
    82b8:	f854 3c08 	ldr.w	r3, [r4, #-8]
    82bc:	b9db      	cbnz	r3, 82f6 <l2cap_rx_process+0x8a>
	sdu_len = net_buf_pull_le16(buf);
    82be:	f106 0008 	add.w	r0, r6, #8
    82c2:	f00d fa7f 	bl	157c4 <net_buf_simple_pull_le16>
	if (sdu_len > chan->rx.mtu) {
    82c6:	f834 3c4a 	ldrh.w	r3, [r4, #-74]
	sdu_len = net_buf_pull_le16(buf);
    82ca:	4682      	mov	sl, r0
	if (sdu_len > chan->rx.mtu) {
    82cc:	4283      	cmp	r3, r0
    82ce:	d204      	bcs.n	82da <l2cap_rx_process+0x6e>
		BT_ERR("Invalid SDU length");
    82d0:	2145      	movs	r1, #69	; 0x45
    82d2:	481a      	ldr	r0, [pc, #104]	; (833c <l2cap_rx_process+0xd0>)
		BT_ERR("No credits to receive packet");
    82d4:	f009 ff18 	bl	12108 <printk>
    82d8:	e022      	b.n	8320 <l2cap_rx_process+0xb4>
	if (chan->chan.ops->alloc_buf) {
    82da:	f854 3c84 	ldr.w	r3, [r4, #-132]
    82de:	68da      	ldr	r2, [r3, #12]
    82e0:	b18a      	cbz	r2, 8306 <l2cap_rx_process+0x9a>
		chan->_sdu = chan->chan.ops->alloc_buf(&chan->chan);
    82e2:	4628      	mov	r0, r5
    82e4:	4790      	blx	r2
    82e6:	f844 0c08 	str.w	r0, [r4, #-8]
		if (!chan->_sdu) {
    82ea:	b910      	cbnz	r0, 82f2 <l2cap_rx_process+0x86>
			BT_ERR("Unable to allocate buffer for SDU");
    82ec:	2145      	movs	r1, #69	; 0x45
    82ee:	4648      	mov	r0, r9
    82f0:	e7f0      	b.n	82d4 <l2cap_rx_process+0x68>
		chan->_sdu_len = sdu_len;
    82f2:	f824 ac04 	strh.w	sl, [r4, #-4]
		l2cap_chan_le_recv_seg(chan, buf);
    82f6:	4631      	mov	r1, r6
    82f8:	4628      	mov	r0, r5
    82fa:	f7ff ff19 	bl	8130 <l2cap_chan_le_recv_seg>
		net_buf_unref(buf);
    82fe:	4630      	mov	r0, r6
    8300:	f005 f8f4 	bl	d4ec <net_buf_unref>
    8304:	e7bc      	b.n	8280 <l2cap_rx_process+0x14>
	err = chan->chan.ops->recv(&chan->chan, buf);
    8306:	4631      	mov	r1, r6
    8308:	4628      	mov	r0, r5
    830a:	691b      	ldr	r3, [r3, #16]
    830c:	4798      	blx	r3
	if (err) {
    830e:	4602      	mov	r2, r0
    8310:	b150      	cbz	r0, 8328 <l2cap_rx_process+0xbc>
		if (err != -EINPROGRESS) {
    8312:	f110 0f44 	cmn.w	r0, #68	; 0x44
    8316:	d0f2      	beq.n	82fe <l2cap_rx_process+0x92>
			BT_ERR("err %d", err);
    8318:	2145      	movs	r1, #69	; 0x45
    831a:	4640      	mov	r0, r8
    831c:	f009 fef4 	bl	12108 <printk>
		bt_l2cap_chan_disconnect(&chan->chan);
    8320:	4628      	mov	r0, r5
    8322:	f7ff fed3 	bl	80cc <bt_l2cap_chan_disconnect>
		return;
    8326:	e7ea      	b.n	82fe <l2cap_rx_process+0x92>
	l2cap_chan_send_credits(chan, buf, 1);
    8328:	2101      	movs	r1, #1
    832a:	4628      	mov	r0, r5
    832c:	f7ff fd82 	bl	7e34 <l2cap_chan_send_credits.isra.0>
    8330:	e7e5      	b.n	82fe <l2cap_rx_process+0x92>
		BT_ERR("No credits to receive packet");
    8332:	2145      	movs	r1, #69	; 0x45
    8334:	4638      	mov	r0, r7
    8336:	e7cd      	b.n	82d4 <l2cap_rx_process+0x68>
    8338:	0001a2a7 	.word	0x0001a2a7
    833c:	0001a268 	.word	0x0001a268
    8340:	0001a25c 	.word	0x0001a25c
    8344:	0001a280 	.word	0x0001a280

00008348 <l2cap_recv>:
{
    8348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buf->len < sizeof(*hdr)) {
    834c:	898b      	ldrh	r3, [r1, #12]
{
    834e:	4680      	mov	r8, r0
	if (buf->len < sizeof(*hdr)) {
    8350:	2b03      	cmp	r3, #3
{
    8352:	460c      	mov	r4, r1
    8354:	b087      	sub	sp, #28
	if (buf->len < sizeof(*hdr)) {
    8356:	d804      	bhi.n	8362 <l2cap_recv+0x1a>
		BT_ERR("Too small L2CAP signaling PDU");
    8358:	2145      	movs	r1, #69	; 0x45
    835a:	48ac      	ldr	r0, [pc, #688]	; (860c <l2cap_recv+0x2c4>)
		BT_ERR("Too small LE Credits packet size");
    835c:	f009 fed4 	bl	12108 <printk>
		return;
    8360:	e00d      	b.n	837e <l2cap_recv+0x36>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    8362:	2104      	movs	r1, #4
    8364:	f104 0008 	add.w	r0, r4, #8
    8368:	f005 fa10 	bl	d78c <net_buf_simple_pull_mem>
	if (buf->len != len) {
    836c:	89a2      	ldrh	r2, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    836e:	8843      	ldrh	r3, [r0, #2]
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    8370:	4606      	mov	r6, r0
	if (buf->len != len) {
    8372:	4293      	cmp	r3, r2
    8374:	d007      	beq.n	8386 <l2cap_recv+0x3e>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    8376:	2145      	movs	r1, #69	; 0x45
    8378:	48a5      	ldr	r0, [pc, #660]	; (8610 <l2cap_recv+0x2c8>)
    837a:	f009 fec5 	bl	12108 <printk>
}
    837e:	2000      	movs	r0, #0
    8380:	b007      	add	sp, #28
    8382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!hdr->ident) {
    8386:	7845      	ldrb	r5, [r0, #1]
    8388:	b915      	cbnz	r5, 8390 <l2cap_recv+0x48>
		BT_ERR("Invalid ident value in L2CAP PDU");
    838a:	2145      	movs	r1, #69	; 0x45
    838c:	48a1      	ldr	r0, [pc, #644]	; (8614 <l2cap_recv+0x2cc>)
    838e:	e7e5      	b.n	835c <l2cap_recv+0x14>
	switch (hdr->code) {
    8390:	7803      	ldrb	r3, [r0, #0]
    8392:	1e59      	subs	r1, r3, #1
    8394:	2915      	cmp	r1, #21
    8396:	f200 820b 	bhi.w	87b0 <l2cap_recv+0x468>
    839a:	e8df f011 	tbh	[pc, r1, lsl #1]
    839e:	01b7      	.short	0x01b7
    83a0:	02090209 	.word	0x02090209
    83a4:	02090209 	.word	0x02090209
    83a8:	01820149 	.word	0x01820149
    83ac:	02090209 	.word	0x02090209
    83b0:	02090209 	.word	0x02090209
    83b4:	02090209 	.word	0x02090209
    83b8:	02090209 	.word	0x02090209
    83bc:	02090209 	.word	0x02090209
    83c0:	001601be 	.word	0x001601be
    83c4:	00ca001b 	.word	0x00ca001b
    83c8:	0190      	.short	0x0190
	if (buf->len < sizeof(*rsp)) {
    83ca:	2a01      	cmp	r2, #1
    83cc:	d8d7      	bhi.n	837e <l2cap_recv+0x36>
		BT_ERR("Too small LE conn param rsp");
    83ce:	2145      	movs	r1, #69	; 0x45
    83d0:	4891      	ldr	r0, [pc, #580]	; (8618 <l2cap_recv+0x2d0>)
    83d2:	e7c3      	b.n	835c <l2cap_recv+0x14>
	if (buf->len < sizeof(*req)) {
    83d4:	2a09      	cmp	r2, #9
    83d6:	d802      	bhi.n	83de <l2cap_recv+0x96>
		BT_ERR("Too small LE conn req packet size");
    83d8:	2145      	movs	r1, #69	; 0x45
    83da:	4890      	ldr	r0, [pc, #576]	; (861c <l2cap_recv+0x2d4>)
    83dc:	e7be      	b.n	835c <l2cap_recv+0x14>
	struct bt_l2cap_le_conn_req *req = (void *)buf->data;
    83de:	68a3      	ldr	r3, [r4, #8]
	mtu = sys_le16_to_cpu(req->mtu);
    83e0:	889e      	ldrh	r6, [r3, #4]
    83e2:	b2b2      	uxth	r2, r6
	if (mtu < L2CAP_LE_MIN_MTU || mps < L2CAP_LE_MIN_MTU) {
    83e4:	2a16      	cmp	r2, #22
    83e6:	d903      	bls.n	83f0 <l2cap_recv+0xa8>
	mps = sys_le16_to_cpu(req->mps);
    83e8:	88df      	ldrh	r7, [r3, #6]
    83ea:	b2ba      	uxth	r2, r7
	if (mtu < L2CAP_LE_MIN_MTU || mps < L2CAP_LE_MIN_MTU) {
    83ec:	2a16      	cmp	r2, #22
    83ee:	d802      	bhi.n	83f6 <l2cap_recv+0xae>
		BT_ERR("Invalid LE-Conn Req params");
    83f0:	2145      	movs	r1, #69	; 0x45
    83f2:	488b      	ldr	r0, [pc, #556]	; (8620 <l2cap_recv+0x2d8>)
    83f4:	e7b2      	b.n	835c <l2cap_recv+0x14>
		le_conn_req(l2cap, hdr->ident, buf);
    83f6:	f8d8 4000 	ldr.w	r4, [r8]
	psm = sys_le16_to_cpu(req->psm);
    83fa:	f8b3 b000 	ldrh.w	fp, [r3]
	scid = sys_le16_to_cpu(req->scid);
    83fe:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	credits = sys_le16_to_cpu(req->credits);
    8402:	891b      	ldrh	r3, [r3, #8]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    8404:	4629      	mov	r1, r5
	credits = sys_le16_to_cpu(req->credits);
    8406:	f8ad 3008 	strh.w	r3, [sp, #8]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    840a:	220a      	movs	r2, #10
	credits = sys_le16_to_cpu(req->credits);
    840c:	b29b      	uxth	r3, r3
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    840e:	2015      	movs	r0, #21
	credits = sys_le16_to_cpu(req->credits);
    8410:	9303      	str	r3, [sp, #12]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    8412:	f7ff fb9f 	bl	7b54 <l2cap_create_le_sig_pdu.isra.0>
	scid = sys_le16_to_cpu(req->scid);
    8416:	fa1f f988 	uxth.w	r9, r8
	if (!buf) {
    841a:	4605      	mov	r5, r0
    841c:	2800      	cmp	r0, #0
    841e:	d0ae      	beq.n	837e <l2cap_recv+0x36>
	rsp = net_buf_add(buf, sizeof(*rsp));
    8420:	210a      	movs	r1, #10
    8422:	3008      	adds	r0, #8
    8424:	f005 f9d4 	bl	d7d0 <net_buf_simple_add>
	(void)memset(rsp, 0, sizeof(*rsp));
    8428:	220a      	movs	r2, #10
    842a:	2100      	movs	r1, #0
	rsp = net_buf_add(buf, sizeof(*rsp));
    842c:	4682      	mov	sl, r0
	(void)memset(rsp, 0, sizeof(*rsp));
    842e:	f00b f9ab 	bl	13788 <memset>
	server = l2cap_server_lookup_psm(psm);
    8432:	4658      	mov	r0, fp
    8434:	f7ff fb64 	bl	7b00 <l2cap_server_lookup_psm>
	if (!server) {
    8438:	4683      	mov	fp, r0
    843a:	b908      	cbnz	r0, 8440 <l2cap_recv+0xf8>
		return BT_L2CAP_LE_ERR_PSM_NOT_SUPP;
    843c:	2202      	movs	r2, #2
    843e:	e004      	b.n	844a <l2cap_recv+0x102>
	if (conn->sec_level < server->sec_level) {
    8440:	7a61      	ldrb	r1, [r4, #9]
    8442:	7882      	ldrb	r2, [r0, #2]
    8444:	4291      	cmp	r1, r2
    8446:	d207      	bcs.n	8458 <l2cap_recv+0x110>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_LE_ERR_AUTHENTICATION);
    8448:	2205      	movs	r2, #5
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
    844a:	4629      	mov	r1, r5
    844c:	4620      	mov	r0, r4
		rsp->result = sys_cpu_to_le16(BT_L2CAP_LE_ERR_NO_RESOURCES);
    844e:	f8aa 2008 	strh.w	r2, [sl, #8]
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
    8452:	f00b fef4 	bl	1423e <bt_l2cap_send.constprop.0>
    8456:	e792      	b.n	837e <l2cap_recv+0x36>
	if (!L2CAP_LE_CID_IS_DYN(scid)) {
    8458:	f1a9 0240 	sub.w	r2, r9, #64	; 0x40
    845c:	2a3f      	cmp	r2, #63	; 0x3f
    845e:	d901      	bls.n	8464 <l2cap_recv+0x11c>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_LE_ERR_INVALID_SCID);
    8460:	2209      	movs	r2, #9
    8462:	e7f2      	b.n	844a <l2cap_recv+0x102>
	chan = bt_l2cap_le_lookup_tx_cid(conn, scid);
    8464:	4649      	mov	r1, r9
    8466:	4620      	mov	r0, r4
    8468:	f00b ff3b 	bl	142e2 <bt_l2cap_le_lookup_tx_cid>
    846c:	9004      	str	r0, [sp, #16]
	if (chan) {
    846e:	b108      	cbz	r0, 8474 <l2cap_recv+0x12c>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_LE_ERR_SCID_IN_USE);
    8470:	220a      	movs	r2, #10
    8472:	e7ea      	b.n	844a <l2cap_recv+0x102>
	err = server->accept(conn, &chan);
    8474:	4620      	mov	r0, r4
    8476:	f8db 2004 	ldr.w	r2, [fp, #4]
    847a:	a904      	add	r1, sp, #16
    847c:	4790      	blx	r2
	if (err < 0) {
    847e:	2800      	cmp	r0, #0
    8480:	da12      	bge.n	84a8 <l2cap_recv+0x160>
	switch (err) {
    8482:	f110 0f0c 	cmn.w	r0, #12
    8486:	d052      	beq.n	852e <l2cap_recv+0x1e6>
    8488:	f110 0f0b 	cmn.w	r0, #11
    848c:	da07      	bge.n	849e <l2cap_recv+0x156>
    848e:	f110 0f23 	cmn.w	r0, #35	; 0x23
    8492:	d0d3      	beq.n	843c <l2cap_recv+0xf4>
    8494:	300d      	adds	r0, #13
    8496:	bf14      	ite	ne
    8498:	220b      	movne	r2, #11
    849a:	2206      	moveq	r2, #6
    849c:	e7d5      	b.n	844a <l2cap_recv+0x102>
		return BT_L2CAP_LE_ERR_KEY_SIZE;
    849e:	3001      	adds	r0, #1
    84a0:	bf14      	ite	ne
    84a2:	220b      	movne	r2, #11
    84a4:	2207      	moveq	r2, #7
    84a6:	e7d0      	b.n	844a <l2cap_recv+0x102>
	chan->required_sec_level = server->sec_level;
    84a8:	f89b 2002 	ldrb.w	r2, [fp, #2]
    84ac:	9904      	ldr	r1, [sp, #16]
	if (l2cap_chan_add(conn, chan, l2cap_chan_destroy)) {
    84ae:	4620      	mov	r0, r4
	chan->required_sec_level = server->sec_level;
    84b0:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
	if (l2cap_chan_add(conn, chan, l2cap_chan_destroy)) {
    84b4:	4a5b      	ldr	r2, [pc, #364]	; (8624 <l2cap_recv+0x2dc>)
    84b6:	f7ff fd1f 	bl	7ef8 <l2cap_chan_add>
    84ba:	b3c0      	cbz	r0, 852e <l2cap_recv+0x1e6>
		struct bt_l2cap_le_chan *ch = BT_L2CAP_LE_CHAN(chan);
    84bc:	f8dd 9010 	ldr.w	r9, [sp, #16]
		l2cap_chan_tx_init(ch);
    84c0:	4648      	mov	r0, r9
    84c2:	f7ff fb6d 	bl	7ba0 <l2cap_chan_tx_init>
		ch->tx.init_credits = credits;
    84c6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
		l2cap_chan_tx_give_credits(ch, credits);
    84ca:	9903      	ldr	r1, [sp, #12]
		ch->tx.init_credits = credits;
    84cc:	f8a9 304e 	strh.w	r3, [r9, #78]	; 0x4e
		l2cap_chan_tx_give_credits(ch, credits);
    84d0:	4648      	mov	r0, r9
		ch->tx.cid = scid;
    84d2:	f8a9 8048 	strh.w	r8, [r9, #72]	; 0x48
		ch->tx.mps = mps;
    84d6:	f8a9 704c 	strh.w	r7, [r9, #76]	; 0x4c
		ch->tx.mtu = mtu;
    84da:	f8a9 604a 	strh.w	r6, [r9, #74]	; 0x4a
		l2cap_chan_tx_give_credits(ch, credits);
    84de:	f00b fdb2 	bl	14046 <l2cap_chan_tx_give_credits>
		l2cap_chan_rx_init(ch);
    84e2:	4648      	mov	r0, r9
    84e4:	f00b fd8b 	bl	13ffe <l2cap_chan_rx_init>
	atomic_add(&chan->rx.credits, credits);
    84e8:	f8b9 1042 	ldrh.w	r1, [r9, #66]	; 0x42
    84ec:	f109 0044 	add.w	r0, r9, #68	; 0x44
    84f0:	f00b fd4f 	bl	13f92 <atomic_add>
		chan->psm = server->psm;
    84f4:	9804      	ldr	r0, [sp, #16]
    84f6:	f8bb 2000 	ldrh.w	r2, [fp]
    84fa:	86c2      	strh	r2, [r0, #54]	; 0x36
	chan->state = state;
    84fc:	2203      	movs	r2, #3
    84fe:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
		if (chan->ops->connected) {
    8502:	6842      	ldr	r2, [r0, #4]
    8504:	6812      	ldr	r2, [r2, #0]
    8506:	b102      	cbz	r2, 850a <l2cap_recv+0x1c2>
			chan->ops->connected(chan);
    8508:	4790      	blx	r2
		rsp->dcid = sys_cpu_to_le16(ch->rx.cid);
    850a:	f8b9 203c 	ldrh.w	r2, [r9, #60]	; 0x3c
    850e:	f8aa 2000 	strh.w	r2, [sl]
		rsp->mps = sys_cpu_to_le16(ch->rx.mps);
    8512:	f8b9 2040 	ldrh.w	r2, [r9, #64]	; 0x40
    8516:	f8aa 2004 	strh.w	r2, [sl, #4]
		rsp->mtu = sys_cpu_to_le16(ch->rx.mtu);
    851a:	f8b9 203e 	ldrh.w	r2, [r9, #62]	; 0x3e
    851e:	f8aa 2002 	strh.w	r2, [sl, #2]
		rsp->credits = sys_cpu_to_le16(ch->rx.init_credits);
    8522:	f8b9 2042 	ldrh.w	r2, [r9, #66]	; 0x42
    8526:	f8aa 2006 	strh.w	r2, [sl, #6]
		rsp->result = BT_L2CAP_LE_SUCCESS;
    852a:	2200      	movs	r2, #0
    852c:	e78d      	b.n	844a <l2cap_recv+0x102>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_LE_ERR_NO_RESOURCES);
    852e:	2204      	movs	r2, #4
    8530:	e78b      	b.n	844a <l2cap_recv+0x102>
	if (buf->len < sizeof(*rsp)) {
    8532:	2a09      	cmp	r2, #9
    8534:	d802      	bhi.n	853c <l2cap_recv+0x1f4>
		BT_ERR("Too small LE conn rsp packet size");
    8536:	2145      	movs	r1, #69	; 0x45
    8538:	483b      	ldr	r0, [pc, #236]	; (8628 <l2cap_recv+0x2e0>)
    853a:	e70f      	b.n	835c <l2cap_recv+0x14>
	struct bt_l2cap_le_conn_rsp *rsp = (void *)buf->data;
    853c:	68a3      	ldr	r3, [r4, #8]
		le_conn_rsp(l2cap, hdr->ident, buf);
    853e:	f8d8 7000 	ldr.w	r7, [r8]
	result = sys_le16_to_cpu(rsp->result);
    8542:	891e      	ldrh	r6, [r3, #8]
	dcid = sys_le16_to_cpu(rsp->dcid);
    8544:	f8b3 b000 	ldrh.w	fp, [r3]
	mtu = sys_le16_to_cpu(rsp->mtu);
    8548:	f8b3 a002 	ldrh.w	sl, [r3, #2]
	mps = sys_le16_to_cpu(rsp->mps);
    854c:	f8b3 9004 	ldrh.w	r9, [r3, #4]
	credits = sys_le16_to_cpu(rsp->credits);
    8550:	f8b3 8006 	ldrh.w	r8, [r3, #6]
	if (result == BT_L2CAP_LE_SUCCESS ||
    8554:	f026 0308 	bic.w	r3, r6, #8
    8558:	b2a9      	uxth	r1, r5
    855a:	b10b      	cbz	r3, 8560 <l2cap_recv+0x218>
    855c:	2e05      	cmp	r6, #5
    855e:	d10b      	bne.n	8578 <l2cap_recv+0x230>
		chan = l2cap_lookup_ident(conn, ident);
    8560:	2200      	movs	r2, #0
		chan = l2cap_remove_ident(conn, ident);
    8562:	4638      	mov	r0, r7
    8564:	f00b fccb 	bl	13efe <__l2cap_lookup_ident>
    8568:	4604      	mov	r4, r0
	if (!chan) {
    856a:	b938      	cbnz	r0, 857c <l2cap_recv+0x234>
		BT_ERR("Cannot find channel for ident %u", ident);
    856c:	462a      	mov	r2, r5
    856e:	2145      	movs	r1, #69	; 0x45
    8570:	482e      	ldr	r0, [pc, #184]	; (862c <l2cap_recv+0x2e4>)
    8572:	f009 fdc9 	bl	12108 <printk>
		return;
    8576:	e702      	b.n	837e <l2cap_recv+0x36>
		chan = l2cap_remove_ident(conn, ident);
    8578:	2201      	movs	r2, #1
    857a:	e7f2      	b.n	8562 <l2cap_recv+0x21a>
	k_delayed_work_cancel(&chan->chan.rtx_work);
    857c:	3010      	adds	r0, #16
    857e:	f008 fe2d 	bl	111dc <k_delayed_work_cancel>
	chan->chan.ident = 0U;
    8582:	2300      	movs	r3, #0
	switch (result) {
    8584:	2e05      	cmp	r6, #5
	chan->chan.ident = 0U;
    8586:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	switch (result) {
    858a:	d027      	beq.n	85dc <l2cap_recv+0x294>
    858c:	2e08      	cmp	r6, #8
    858e:	d019      	beq.n	85c4 <l2cap_recv+0x27c>
    8590:	bb06      	cbnz	r6, 85d4 <l2cap_recv+0x28c>
	chan->state = state;
    8592:	2303      	movs	r3, #3
    8594:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if (chan->chan.ops->connected) {
    8598:	6863      	ldr	r3, [r4, #4]
		chan->tx.cid = dcid;
    859a:	f8a4 b048 	strh.w	fp, [r4, #72]	; 0x48
		if (chan->chan.ops->connected) {
    859e:	681b      	ldr	r3, [r3, #0]
		chan->tx.mtu = mtu;
    85a0:	f8a4 a04a 	strh.w	sl, [r4, #74]	; 0x4a
		chan->tx.mps = mps;
    85a4:	f8a4 904c 	strh.w	r9, [r4, #76]	; 0x4c
		if (chan->chan.ops->connected) {
    85a8:	b10b      	cbz	r3, 85ae <l2cap_recv+0x266>
			chan->chan.ops->connected(&chan->chan);
    85aa:	4620      	mov	r0, r4
    85ac:	4798      	blx	r3
		l2cap_chan_tx_give_credits(chan, credits);
    85ae:	4641      	mov	r1, r8
    85b0:	4620      	mov	r0, r4
    85b2:	f00b fd48 	bl	14046 <l2cap_chan_tx_give_credits>
	atomic_add(&chan->rx.credits, credits);
    85b6:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
    85ba:	f104 0044 	add.w	r0, r4, #68	; 0x44
    85be:	f00b fce8 	bl	13f92 <atomic_add>
}
    85c2:	e6dc      	b.n	837e <l2cap_recv+0x36>
		if (chan->chan.required_sec_level >= BT_SECURITY_L2) {
    85c4:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    85c8:	2b01      	cmp	r3, #1
    85ca:	d90b      	bls.n	85e4 <l2cap_recv+0x29c>
		bt_l2cap_chan_remove(conn, &chan->chan);
    85cc:	4621      	mov	r1, r4
    85ce:	4638      	mov	r0, r7
    85d0:	f00b fd72 	bl	140b8 <bt_l2cap_chan_remove>
		bt_l2cap_chan_del(&chan->chan);
    85d4:	4620      	mov	r0, r4
	bt_l2cap_chan_del(&chan->chan);
    85d6:	f00b fd88 	bl	140ea <bt_l2cap_chan_del>
    85da:	e6d0      	b.n	837e <l2cap_recv+0x36>
		if (chan->chan.required_sec_level < BT_SECURITY_L2) {
    85dc:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    85e0:	2b01      	cmp	r3, #1
    85e2:	d80b      	bhi.n	85fc <l2cap_recv+0x2b4>
			chan->chan.required_sec_level = BT_SECURITY_L2;
    85e4:	2302      	movs	r3, #2
			chan->chan.required_sec_level = BT_SECURITY_L4;
    85e6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	return bt_conn_set_security(chan->chan.conn,
    85ea:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
    85ee:	6820      	ldr	r0, [r4, #0]
    85f0:	f00b fbe8 	bl	13dc4 <bt_conn_set_security>
		if (l2cap_change_security(chan, result) == 0) {
    85f4:	2800      	cmp	r0, #0
    85f6:	f43f aec2 	beq.w	837e <l2cap_recv+0x36>
    85fa:	e7e7      	b.n	85cc <l2cap_recv+0x284>
		} else if (chan->chan.required_sec_level < BT_SECURITY_L3) {
    85fc:	2b02      	cmp	r3, #2
    85fe:	d101      	bne.n	8604 <l2cap_recv+0x2bc>
			chan->chan.required_sec_level = BT_SECURITY_L3;
    8600:	2303      	movs	r3, #3
    8602:	e7f0      	b.n	85e6 <l2cap_recv+0x29e>
		} else if (chan->chan.required_sec_level < BT_SECURITY_L4) {
    8604:	2b03      	cmp	r3, #3
    8606:	d1e1      	bne.n	85cc <l2cap_recv+0x284>
			chan->chan.required_sec_level = BT_SECURITY_L4;
    8608:	2304      	movs	r3, #4
    860a:	e7ec      	b.n	85e6 <l2cap_recv+0x29e>
    860c:	0001a2c9 	.word	0x0001a2c9
    8610:	0001a2ec 	.word	0x0001a2ec
    8614:	0001a312 	.word	0x0001a312
    8618:	0001a338 	.word	0x0001a338
    861c:	0001a359 	.word	0x0001a359
    8620:	0001a380 	.word	0x0001a380
    8624:	00013fa7 	.word	0x00013fa7
    8628:	0001a3a0 	.word	0x0001a3a0
    862c:	0001a3c7 	.word	0x0001a3c7
	if (buf->len < sizeof(*req)) {
    8630:	2a03      	cmp	r2, #3
    8632:	f67f aed1 	bls.w	83d8 <l2cap_recv+0x90>
	struct bt_l2cap_disconn_req *req = (void *)buf->data;
    8636:	68a6      	ldr	r6, [r4, #8]
		le_disconn_req(l2cap, hdr->ident, buf);
    8638:	f8d8 7000 	ldr.w	r7, [r8]
	chan = l2cap_remove_rx_cid(conn, dcid);
    863c:	8831      	ldrh	r1, [r6, #0]
    863e:	4638      	mov	r0, r7
    8640:	f00b fc7a 	bl	13f38 <l2cap_remove_rx_cid>
	if (!chan) {
    8644:	4604      	mov	r4, r0
    8646:	b9a0      	cbnz	r0, 8672 <l2cap_recv+0x32a>
		data.scid = req->scid;
    8648:	78f2      	ldrb	r2, [r6, #3]
    864a:	78b3      	ldrb	r3, [r6, #2]
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_INVALID_CID, &data,
    864c:	4629      	mov	r1, r5
		data.scid = req->scid;
    864e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8652:	f8ad 3010 	strh.w	r3, [sp, #16]
		data.dcid = req->dcid;
    8656:	7872      	ldrb	r2, [r6, #1]
    8658:	7833      	ldrb	r3, [r6, #0]
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_INVALID_CID, &data,
    865a:	4638      	mov	r0, r7
		data.dcid = req->dcid;
    865c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8660:	f8ad 3012 	strh.w	r3, [sp, #18]
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_INVALID_CID, &data,
    8664:	2304      	movs	r3, #4
    8666:	2202      	movs	r2, #2
    8668:	9300      	str	r3, [sp, #0]
    866a:	ab04      	add	r3, sp, #16
		l2cap_send_reject(chan->conn, hdr->ident,
    866c:	f00b fdf1 	bl	14252 <l2cap_send_reject>
		break;
    8670:	e685      	b.n	837e <l2cap_recv+0x36>
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_DISCONN_RSP, ident,
    8672:	4629      	mov	r1, r5
    8674:	2204      	movs	r2, #4
    8676:	2007      	movs	r0, #7
    8678:	f7ff fa6c 	bl	7b54 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    867c:	4605      	mov	r5, r0
    867e:	2800      	cmp	r0, #0
    8680:	f43f ae7d 	beq.w	837e <l2cap_recv+0x36>
	rsp = net_buf_add(buf, sizeof(*rsp));
    8684:	2104      	movs	r1, #4
    8686:	3008      	adds	r0, #8
    8688:	f005 f8a2 	bl	d7d0 <net_buf_simple_add>
	rsp->dcid = sys_cpu_to_le16(chan->rx.cid);
    868c:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    868e:	8003      	strh	r3, [r0, #0]
	rsp->scid = sys_cpu_to_le16(chan->tx.cid);
    8690:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    8694:	8043      	strh	r3, [r0, #2]
	bt_l2cap_chan_del(&chan->chan);
    8696:	4620      	mov	r0, r4
    8698:	f00b fd27 	bl	140ea <bt_l2cap_chan_del>
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
    869c:	4629      	mov	r1, r5
    869e:	4638      	mov	r0, r7
    86a0:	e6d7      	b.n	8452 <l2cap_recv+0x10a>
	if (buf->len < sizeof(*rsp)) {
    86a2:	2a03      	cmp	r2, #3
    86a4:	d802      	bhi.n	86ac <l2cap_recv+0x364>
		BT_ERR("Too small LE disconn rsp packet size");
    86a6:	2145      	movs	r1, #69	; 0x45
    86a8:	4847      	ldr	r0, [pc, #284]	; (87c8 <l2cap_recv+0x480>)
    86aa:	e657      	b.n	835c <l2cap_recv+0x14>
	scid = sys_le16_to_cpu(rsp->scid);
    86ac:	68a3      	ldr	r3, [r4, #8]
	chan = l2cap_remove_rx_cid(conn, scid);
    86ae:	f8d8 0000 	ldr.w	r0, [r8]
    86b2:	8859      	ldrh	r1, [r3, #2]
    86b4:	f00b fc40 	bl	13f38 <l2cap_remove_rx_cid>
	if (!chan) {
    86b8:	2800      	cmp	r0, #0
    86ba:	d18c      	bne.n	85d6 <l2cap_recv+0x28e>
    86bc:	e65f      	b.n	837e <l2cap_recv+0x36>
	if (buf->len < sizeof(*ev)) {
    86be:	2a03      	cmp	r2, #3
    86c0:	d802      	bhi.n	86c8 <l2cap_recv+0x380>
		BT_ERR("Too small LE Credits packet size");
    86c2:	2145      	movs	r1, #69	; 0x45
    86c4:	4841      	ldr	r0, [pc, #260]	; (87cc <l2cap_recv+0x484>)
    86c6:	e649      	b.n	835c <l2cap_recv+0x14>
	struct bt_l2cap_le_credits *ev = (void *)buf->data;
    86c8:	68a2      	ldr	r2, [r4, #8]
	chan = bt_l2cap_le_lookup_tx_cid(conn, cid);
    86ca:	f8d8 0000 	ldr.w	r0, [r8]
    86ce:	8811      	ldrh	r1, [r2, #0]
    86d0:	f00b fe07 	bl	142e2 <bt_l2cap_le_lookup_tx_cid>
	if (!chan) {
    86d4:	4604      	mov	r4, r0
    86d6:	b910      	cbnz	r0, 86de <l2cap_recv+0x396>
		BT_ERR("Unable to find channel of LE Credits packet");
    86d8:	2145      	movs	r1, #69	; 0x45
    86da:	483d      	ldr	r0, [pc, #244]	; (87d0 <l2cap_recv+0x488>)
    86dc:	e63e      	b.n	835c <l2cap_recv+0x14>
	if (atomic_get(&ch->tx.credits) + credits > UINT16_MAX) {
    86de:	3050      	adds	r0, #80	; 0x50
	credits = sys_le16_to_cpu(ev->credits);
    86e0:	8851      	ldrh	r1, [r2, #2]
	if (atomic_get(&ch->tx.credits) + credits > UINT16_MAX) {
    86e2:	f00b fc53 	bl	13f8c <atomic_get>
    86e6:	4408      	add	r0, r1
    86e8:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    86ec:	db07      	blt.n	86fe <l2cap_recv+0x3b6>
		BT_ERR("Credits overflow");
    86ee:	2145      	movs	r1, #69	; 0x45
    86f0:	4838      	ldr	r0, [pc, #224]	; (87d4 <l2cap_recv+0x48c>)
    86f2:	f009 fd09 	bl	12108 <printk>
		bt_l2cap_chan_disconnect(chan);
    86f6:	4620      	mov	r0, r4
    86f8:	f7ff fce8 	bl	80cc <bt_l2cap_chan_disconnect>
		return;
    86fc:	e63f      	b.n	837e <l2cap_recv+0x36>
	l2cap_chan_tx_give_credits(ch, credits);
    86fe:	4620      	mov	r0, r4
    8700:	f00b fca1 	bl	14046 <l2cap_chan_tx_give_credits>
	l2cap_chan_tx_resume(ch);
    8704:	4620      	mov	r0, r4
    8706:	f00b fcb7 	bl	14078 <l2cap_chan_tx_resume>
    870a:	e638      	b.n	837e <l2cap_recv+0x36>
	chan = l2cap_remove_ident(conn, ident);
    870c:	2201      	movs	r2, #1
    870e:	4629      	mov	r1, r5
    8710:	f8d8 0000 	ldr.w	r0, [r8]
    8714:	f00b fbf3 	bl	13efe <__l2cap_lookup_ident>
    8718:	e7ce      	b.n	86b8 <l2cap_recv+0x370>
	if (buf->len < sizeof(*req)) {
    871a:	2a07      	cmp	r2, #7
    871c:	d802      	bhi.n	8724 <l2cap_recv+0x3dc>
		BT_ERR("Too small LE conn update param req");
    871e:	2145      	movs	r1, #69	; 0x45
    8720:	482d      	ldr	r0, [pc, #180]	; (87d8 <l2cap_recv+0x490>)
    8722:	e61b      	b.n	835c <l2cap_recv+0x14>
			le_conn_param_update_req(l2cap, hdr->ident, buf);
    8724:	f8d8 6000 	ldr.w	r6, [r8]
	if (conn->role != BT_HCI_ROLE_MASTER) {
    8728:	78f3      	ldrb	r3, [r6, #3]
    872a:	b12b      	cbz	r3, 8738 <l2cap_recv+0x3f0>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
    872c:	2300      	movs	r3, #0
    872e:	4629      	mov	r1, r5
    8730:	461a      	mov	r2, r3
    8732:	4630      	mov	r0, r6
    8734:	9300      	str	r3, [sp, #0]
    8736:	e799      	b.n	866c <l2cap_recv+0x324>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    8738:	68a3      	ldr	r3, [r4, #8]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    873a:	2013      	movs	r0, #19
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    873c:	7859      	ldrb	r1, [r3, #1]
    873e:	781a      	ldrb	r2, [r3, #0]
    8740:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    8744:	f8ad 2010 	strh.w	r2, [sp, #16]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    8748:	78d9      	ldrb	r1, [r3, #3]
    874a:	789a      	ldrb	r2, [r3, #2]
    874c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    8750:	f8ad 2012 	strh.w	r2, [sp, #18]
	param.latency = sys_le16_to_cpu(req->latency);
    8754:	7959      	ldrb	r1, [r3, #5]
    8756:	791a      	ldrb	r2, [r3, #4]
    8758:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    875c:	f8ad 2014 	strh.w	r2, [sp, #20]
	param.timeout = sys_le16_to_cpu(req->timeout);
    8760:	799a      	ldrb	r2, [r3, #6]
    8762:	79db      	ldrb	r3, [r3, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    8764:	4629      	mov	r1, r5
	param.timeout = sys_le16_to_cpu(req->timeout);
    8766:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    876a:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
    876c:	f8ad 3016 	strh.w	r3, [sp, #22]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    8770:	f7ff f9f0 	bl	7b54 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    8774:	4604      	mov	r4, r0
    8776:	2800      	cmp	r0, #0
    8778:	f43f ae01 	beq.w	837e <l2cap_recv+0x36>
	accepted = le_param_req(conn, &param);
    877c:	a904      	add	r1, sp, #16
    877e:	4630      	mov	r0, r6
    8780:	f7fe fbd0 	bl	6f24 <le_param_req>
    8784:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    8786:	2102      	movs	r1, #2
    8788:	f104 0008 	add.w	r0, r4, #8
    878c:	f005 f820 	bl	d7d0 <net_buf_simple_add>
	if (accepted) {
    8790:	f085 0301 	eor.w	r3, r5, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    8794:	b2db      	uxtb	r3, r3
    8796:	8003      	strh	r3, [r0, #0]
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
    8798:	4621      	mov	r1, r4
    879a:	4630      	mov	r0, r6
    879c:	f00b fd4f 	bl	1423e <bt_l2cap_send.constprop.0>
	if (accepted) {
    87a0:	2d00      	cmp	r5, #0
    87a2:	f43f adec 	beq.w	837e <l2cap_recv+0x36>
		bt_conn_le_conn_update(conn, &param);
    87a6:	4630      	mov	r0, r6
    87a8:	a904      	add	r1, sp, #16
    87aa:	f00b fb68 	bl	13e7e <bt_conn_le_conn_update>
    87ae:	e5e6      	b.n	837e <l2cap_recv+0x36>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    87b0:	461a      	mov	r2, r3
    87b2:	2157      	movs	r1, #87	; 0x57
    87b4:	4809      	ldr	r0, [pc, #36]	; (87dc <l2cap_recv+0x494>)
    87b6:	f009 fca7 	bl	12108 <printk>
		l2cap_send_reject(chan->conn, hdr->ident,
    87ba:	2300      	movs	r3, #0
    87bc:	7871      	ldrb	r1, [r6, #1]
    87be:	9300      	str	r3, [sp, #0]
    87c0:	461a      	mov	r2, r3
    87c2:	f8d8 0000 	ldr.w	r0, [r8]
    87c6:	e751      	b.n	866c <l2cap_recv+0x324>
    87c8:	0001a3ed 	.word	0x0001a3ed
    87cc:	0001a417 	.word	0x0001a417
    87d0:	0001a43d 	.word	0x0001a43d
    87d4:	0001a46e 	.word	0x0001a46e
    87d8:	0001a484 	.word	0x0001a484
    87dc:	0001a4ac 	.word	0x0001a4ac

000087e0 <bt_att_destroy>:

	return 0;
}

void bt_att_destroy(struct bt_l2cap_chan *chan)
{
    87e0:	b507      	push	{r0, r1, r2, lr}
	struct bt_att *att = ATT_CHAN(chan);
    87e2:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&att_slab, (void **)&att);
    87e4:	a901      	add	r1, sp, #4
    87e6:	4803      	ldr	r0, [pc, #12]	; (87f4 <bt_att_destroy+0x14>)
    87e8:	f006 fd2a 	bl	f240 <k_mem_slab_free>
}
    87ec:	b003      	add	sp, #12
    87ee:	f85d fb04 	ldr.w	pc, [sp], #4
    87f2:	bf00      	nop
    87f4:	200003c0 	.word	0x200003c0

000087f8 <find_type_cb>:
{
    87f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    87fc:	f642 0301 	movw	r3, #10241	; 0x2801
    8800:	f04f 0800 	mov.w	r8, #0
{
    8804:	b090      	sub	sp, #64	; 0x40
	struct bt_att *att = data->att;
    8806:	680e      	ldr	r6, [r1, #0]
{
    8808:	4605      	mov	r5, r0
    880a:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    880c:	6800      	ldr	r0, [r0, #0]
    880e:	a90b      	add	r1, sp, #44	; 0x2c
	struct bt_conn *conn = att->chan.chan.conn;
    8810:	6837      	ldr	r7, [r6, #0]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    8812:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
    8816:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    881a:	f00b f825 	bl	13868 <bt_uuid_cmp>
    881e:	2800      	cmp	r0, #0
    8820:	d033      	beq.n	888a <find_type_cb+0x92>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    8822:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    8826:	6828      	ldr	r0, [r5, #0]
    8828:	a90b      	add	r1, sp, #44	; 0x2c
    882a:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
    882e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    8832:	f00b f819 	bl	13868 <bt_uuid_cmp>
    8836:	b150      	cbz	r0, 884e <find_type_cb+0x56>
		if (data->group &&
    8838:	68a3      	ldr	r3, [r4, #8]
    883a:	b123      	cbz	r3, 8846 <find_type_cb+0x4e>
		    attr->handle > sys_le16_to_cpu(data->group->end_handle)) {
    883c:	8a2a      	ldrh	r2, [r5, #16]
		if (data->group &&
    883e:	8859      	ldrh	r1, [r3, #2]
    8840:	4291      	cmp	r1, r2
    8842:	d200      	bcs.n	8846 <find_type_cb+0x4e>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    8844:	805a      	strh	r2, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    8846:	2001      	movs	r0, #1
}
    8848:	b010      	add	sp, #64	; 0x40
    884a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    884e:	6862      	ldr	r2, [r4, #4]
    8850:	f8b6 304a 	ldrh.w	r3, [r6, #74]	; 0x4a
    8854:	8992      	ldrh	r2, [r2, #12]
    8856:	1a9b      	subs	r3, r3, r2
    8858:	2b03      	cmp	r3, #3
    885a:	d9f5      	bls.n	8848 <find_type_cb+0x50>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    885c:	686e      	ldr	r6, [r5, #4]
    885e:	9000      	str	r0, [sp, #0]
    8860:	2310      	movs	r3, #16
    8862:	4629      	mov	r1, r5
    8864:	4638      	mov	r0, r7
    8866:	aa02      	add	r2, sp, #8
    8868:	47b0      	blx	r6
	if (read < 0) {
    886a:	1e06      	subs	r6, r0, #0
    886c:	db0d      	blt.n	888a <find_type_cb+0x92>
	if (read != data->value_len) {
    886e:	7c22      	ldrb	r2, [r4, #16]
    8870:	68e0      	ldr	r0, [r4, #12]
    8872:	42b2      	cmp	r2, r6
    8874:	d028      	beq.n	88c8 <find_type_cb+0xd0>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    8876:	4601      	mov	r1, r0
    8878:	a80b      	add	r0, sp, #44	; 0x2c
    887a:	f00b f81f 	bl	138bc <bt_uuid_create>
    887e:	b938      	cbnz	r0, 8890 <find_type_cb+0x98>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
    8880:	2157      	movs	r1, #87	; 0x57
    8882:	7c22      	ldrb	r2, [r4, #16]
    8884:	4812      	ldr	r0, [pc, #72]	; (88d0 <find_type_cb+0xd8>)
			BT_WARN("Unable to create UUID: size %d", read);
    8886:	f009 fc3f 	bl	12108 <printk>
	data->group = NULL;
    888a:	2300      	movs	r3, #0
    888c:	60a3      	str	r3, [r4, #8]
    888e:	e7da      	b.n	8846 <find_type_cb+0x4e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    8890:	b2f2      	uxtb	r2, r6
    8892:	a902      	add	r1, sp, #8
    8894:	a806      	add	r0, sp, #24
    8896:	f00b f811 	bl	138bc <bt_uuid_create>
    889a:	b918      	cbnz	r0, 88a4 <find_type_cb+0xac>
			BT_WARN("Unable to create UUID: size %d", read);
    889c:	4632      	mov	r2, r6
    889e:	2157      	movs	r1, #87	; 0x57
    88a0:	480c      	ldr	r0, [pc, #48]	; (88d4 <find_type_cb+0xdc>)
    88a2:	e7f0      	b.n	8886 <find_type_cb+0x8e>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    88a4:	a906      	add	r1, sp, #24
    88a6:	a80b      	add	r0, sp, #44	; 0x2c
    88a8:	f00a ffde 	bl	13868 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    88ac:	2800      	cmp	r0, #0
    88ae:	d1ec      	bne.n	888a <find_type_cb+0x92>
	data->err = 0x00;
    88b0:	2300      	movs	r3, #0
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    88b2:	6860      	ldr	r0, [r4, #4]
	data->err = 0x00;
    88b4:	7463      	strb	r3, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    88b6:	2104      	movs	r1, #4
    88b8:	3008      	adds	r0, #8
    88ba:	f004 ff89 	bl	d7d0 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    88be:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    88c0:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    88c2:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    88c4:	8043      	strh	r3, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
    88c6:	e7be      	b.n	8846 <find_type_cb+0x4e>
	} else if (memcmp(data->value, uuid, read)) {
    88c8:	a902      	add	r1, sp, #8
    88ca:	f00a ff22 	bl	13712 <memcmp>
    88ce:	e7ed      	b.n	88ac <find_type_cb+0xb4>
    88d0:	0001a4d8 	.word	0x0001a4d8
    88d4:	0001a4fc 	.word	0x0001a4fc

000088d8 <att_cb.isra.0>:
static bt_conn_tx_cb_t att_cb(struct net_buf *buf)
    88d8:	b508      	push	{r3, lr}
	switch (att_op_get_type(buf->data[0])) {
    88da:	7800      	ldrb	r0, [r0, #0]
    88dc:	f00b fd42 	bl	14364 <att_op_get_type>
    88e0:	3801      	subs	r0, #1
    88e2:	b2c0      	uxtb	r0, r0
    88e4:	2804      	cmp	r0, #4
    88e6:	bf96      	itet	ls
    88e8:	4b02      	ldrls	r3, [pc, #8]	; (88f4 <att_cb.isra.0+0x1c>)
    88ea:	4803      	ldrhi	r0, [pc, #12]	; (88f8 <att_cb.isra.0+0x20>)
    88ec:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
}
    88f0:	bd08      	pop	{r3, pc}
    88f2:	bf00      	nop
    88f4:	0001724c 	.word	0x0001724c
    88f8:	00014611 	.word	0x00014611

000088fc <att_send>:
{
    88fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    8900:	4698      	mov	r8, r3
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    8902:	688b      	ldr	r3, [r1, #8]
{
    8904:	4607      	mov	r7, r0
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    8906:	781b      	ldrb	r3, [r3, #0]
{
    8908:	460e      	mov	r6, r1
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    890a:	2bd2      	cmp	r3, #210	; 0xd2
{
    890c:	4615      	mov	r5, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    890e:	d10e      	bne.n	892e <att_send+0x32>
		err = bt_smp_sign(conn, buf);
    8910:	f00c feba 	bl	15688 <bt_smp_sign>
		if (err) {
    8914:	4604      	mov	r4, r0
    8916:	b150      	cbz	r0, 892e <att_send+0x32>
			BT_ERR("Error signing data");
    8918:	480c      	ldr	r0, [pc, #48]	; (894c <att_send+0x50>)
    891a:	2145      	movs	r1, #69	; 0x45
    891c:	f009 fbf4 	bl	12108 <printk>
			net_buf_unref(buf);
    8920:	4630      	mov	r0, r6
    8922:	f004 fde3 	bl	d4ec <net_buf_unref>
}
    8926:	4620      	mov	r0, r4
    8928:	b002      	add	sp, #8
    892a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf,
    892e:	b91d      	cbnz	r5, 8938 <att_send+0x3c>
				cb ? cb : att_cb(buf),
    8930:	68b0      	ldr	r0, [r6, #8]
    8932:	f7ff ffd1 	bl	88d8 <att_cb.isra.0>
    8936:	4605      	mov	r5, r0
	return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf,
    8938:	462b      	mov	r3, r5
    893a:	4632      	mov	r2, r6
    893c:	2104      	movs	r1, #4
    893e:	4638      	mov	r0, r7
    8940:	f8cd 8000 	str.w	r8, [sp]
    8944:	f00b fbff 	bl	14146 <bt_l2cap_send_cb>
    8948:	4604      	mov	r4, r0
    894a:	e7ec      	b.n	8926 <att_send+0x2a>
    894c:	0001a520 	.word	0x0001a520

00008950 <att_get>:
{
    8950:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    8952:	2104      	movs	r1, #4
    8954:	f00b fcc5 	bl	142e2 <bt_l2cap_le_lookup_tx_cid>
	__ASSERT(chan, "No ATT channel found");
    8958:	4604      	mov	r4, r0
    895a:	b960      	cbnz	r0, 8976 <att_get+0x26>
    895c:	4907      	ldr	r1, [pc, #28]	; (897c <att_get+0x2c>)
    895e:	2371      	movs	r3, #113	; 0x71
    8960:	4a07      	ldr	r2, [pc, #28]	; (8980 <att_get+0x30>)
    8962:	4808      	ldr	r0, [pc, #32]	; (8984 <att_get+0x34>)
    8964:	f009 fbd0 	bl	12108 <printk>
    8968:	4807      	ldr	r0, [pc, #28]	; (8988 <att_get+0x38>)
    896a:	f009 fbcd 	bl	12108 <printk>
    896e:	2171      	movs	r1, #113	; 0x71
    8970:	4803      	ldr	r0, [pc, #12]	; (8980 <att_get+0x30>)
    8972:	f009 fe5f 	bl	12634 <assert_post_action>
}
    8976:	4620      	mov	r0, r4
    8978:	bd10      	pop	{r4, pc}
    897a:	bf00      	nop
    897c:	0001a567 	.word	0x0001a567
    8980:	0001a538 	.word	0x0001a538
    8984:	00017d82 	.word	0x00017d82
    8988:	0001a56c 	.word	0x0001a56c

0000898c <bt_att_accept>:
{
    898c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    898e:	2200      	movs	r2, #0
{
    8990:	4606      	mov	r6, r0
    8992:	460d      	mov	r5, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    8994:	2300      	movs	r3, #0
    8996:	4810      	ldr	r0, [pc, #64]	; (89d8 <bt_att_accept+0x4c>)
    8998:	a901      	add	r1, sp, #4
    899a:	f006 fbe5 	bl	f168 <k_mem_slab_alloc>
    899e:	4604      	mov	r4, r0
    89a0:	b148      	cbz	r0, 89b6 <bt_att_accept+0x2a>
		BT_ERR("No available ATT context for conn %p", conn);
    89a2:	4632      	mov	r2, r6
    89a4:	2145      	movs	r1, #69	; 0x45
    89a6:	480d      	ldr	r0, [pc, #52]	; (89dc <bt_att_accept+0x50>)
    89a8:	f009 fbae 	bl	12108 <printk>
    89ac:	f06f 040b 	mvn.w	r4, #11
}
    89b0:	4620      	mov	r0, r4
    89b2:	b002      	add	sp, #8
    89b4:	bd70      	pop	{r4, r5, r6, pc}
	(void)memset(att, 0, sizeof(*att));
    89b6:	4601      	mov	r1, r0
    89b8:	f44f 7298 	mov.w	r2, #304	; 0x130
    89bc:	9801      	ldr	r0, [sp, #4]
    89be:	f00a fee3 	bl	13788 <memset>
	att->chan.chan.ops = &ops;
    89c2:	9801      	ldr	r0, [sp, #4]
    89c4:	4b06      	ldr	r3, [pc, #24]	; (89e0 <bt_att_accept+0x54>)
    89c6:	6043      	str	r3, [r0, #4]
	return z_impl_k_sem_init(sem, initial_count, limit);
    89c8:	220a      	movs	r2, #10
    89ca:	30e0      	adds	r0, #224	; 0xe0
    89cc:	4611      	mov	r1, r2
    89ce:	f00d ff1f 	bl	16810 <z_impl_k_sem_init>
	*chan = &att->chan.chan;
    89d2:	9b01      	ldr	r3, [sp, #4]
    89d4:	602b      	str	r3, [r5, #0]
	return 0;
    89d6:	e7eb      	b.n	89b0 <bt_att_accept+0x24>
    89d8:	200003c0 	.word	0x200003c0
    89dc:	0001a583 	.word	0x0001a583
    89e0:	00017348 	.word	0x00017348

000089e4 <bt_att_connected>:
{
    89e4:	b510      	push	{r4, lr}
    89e6:	4604      	mov	r4, r0
	z_impl_k_queue_init(queue);
    89e8:	30f8      	adds	r0, #248	; 0xf8
    89ea:	f00d fec1 	bl	16770 <z_impl_k_queue_init>
    89ee:	f504 708a 	add.w	r0, r4, #276	; 0x114
    89f2:	f00d febd 	bl	16770 <z_impl_k_queue_init>
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    89f6:	2317      	movs	r3, #23
	k_delayed_work_init(&att->timeout_work, att_timeout);
    89f8:	4905      	ldr	r1, [pc, #20]	; (8a10 <bt_att_connected+0x2c>)
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    89fa:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    89fe:	87e3      	strh	r3, [r4, #62]	; 0x3e
	k_delayed_work_init(&att->timeout_work, att_timeout);
    8a00:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    8a04:	f00d ff7d 	bl	16902 <k_delayed_work_init>
	list->head = NULL;
    8a08:	2300      	movs	r3, #0
	list->tail = NULL;
    8a0a:	e9c4 332e 	strd	r3, r3, [r4, #184]	; 0xb8
}
    8a0e:	bd10      	pop	{r4, pc}
    8a10:	000096b9 	.word	0x000096b9

00008a14 <att_send_req>:
{
    8a14:	b573      	push	{r0, r1, r4, r5, r6, lr}
    8a16:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(req);
    8a18:	460c      	mov	r4, r1
    8a1a:	b959      	cbnz	r1, 8a34 <att_send_req+0x20>
    8a1c:	492e      	ldr	r1, [pc, #184]	; (8ad8 <att_send_req+0xc4>)
    8a1e:	482f      	ldr	r0, [pc, #188]	; (8adc <att_send_req+0xc8>)
    8a20:	f44f 7397 	mov.w	r3, #302	; 0x12e
    8a24:	4a2e      	ldr	r2, [pc, #184]	; (8ae0 <att_send_req+0xcc>)
    8a26:	f009 fb6f 	bl	12108 <printk>
    8a2a:	f44f 7197 	mov.w	r1, #302	; 0x12e
    8a2e:	482c      	ldr	r0, [pc, #176]	; (8ae0 <att_send_req+0xcc>)
    8a30:	f009 fe00 	bl	12634 <assert_post_action>
	__ASSERT_NO_MSG(req->func);
    8a34:	6863      	ldr	r3, [r4, #4]
    8a36:	b95b      	cbnz	r3, 8a50 <att_send_req+0x3c>
    8a38:	492a      	ldr	r1, [pc, #168]	; (8ae4 <att_send_req+0xd0>)
    8a3a:	4828      	ldr	r0, [pc, #160]	; (8adc <att_send_req+0xc8>)
    8a3c:	f240 132f 	movw	r3, #303	; 0x12f
    8a40:	4a27      	ldr	r2, [pc, #156]	; (8ae0 <att_send_req+0xcc>)
    8a42:	f009 fb61 	bl	12108 <printk>
    8a46:	f240 112f 	movw	r1, #303	; 0x12f
    8a4a:	4825      	ldr	r0, [pc, #148]	; (8ae0 <att_send_req+0xcc>)
    8a4c:	f009 fdf2 	bl	12634 <assert_post_action>
	__ASSERT_NO_MSG(!att->req);
    8a50:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    8a54:	b15b      	cbz	r3, 8a6e <att_send_req+0x5a>
    8a56:	4924      	ldr	r1, [pc, #144]	; (8ae8 <att_send_req+0xd4>)
    8a58:	4820      	ldr	r0, [pc, #128]	; (8adc <att_send_req+0xc8>)
    8a5a:	f44f 7398 	mov.w	r3, #304	; 0x130
    8a5e:	4a20      	ldr	r2, [pc, #128]	; (8ae0 <att_send_req+0xcc>)
    8a60:	f009 fb52 	bl	12108 <printk>
    8a64:	f44f 7198 	mov.w	r1, #304	; 0x130
    8a68:	481d      	ldr	r0, [pc, #116]	; (8ae0 <att_send_req+0xcc>)
    8a6a:	f009 fde3 	bl	12634 <assert_post_action>
	att->req = req;
    8a6e:	f8c5 40b4 	str.w	r4, [r5, #180]	; 0xb4
	return z_impl_k_sem_take(sem, timeout);
    8a72:	2200      	movs	r2, #0
    8a74:	2300      	movs	r3, #0
    8a76:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
    8a7a:	f008 f905 	bl	10c88 <z_impl_k_sem_take>
	if (k_sem_take(&att->tx_sem, K_NO_WAIT) < 0) {
    8a7e:	2800      	cmp	r0, #0
    8a80:	da08      	bge.n	8a94 <att_send_req+0x80>
		k_fifo_put(&att->tx_queue, req->buf);
    8a82:	f105 00f8 	add.w	r0, r5, #248	; 0xf8
    8a86:	6921      	ldr	r1, [r4, #16]
    8a88:	f00d fe7f 	bl	1678a <k_queue_append>
		return 0;
    8a8c:	2500      	movs	r5, #0
}
    8a8e:	4628      	mov	r0, r5
    8a90:	b002      	add	sp, #8
    8a92:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_simple_save(&req->buf->b, &req->state);
    8a94:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    8a96:	f106 0008 	add.w	r0, r6, #8
    8a9a:	f00c fe9b 	bl	157d4 <net_buf_simple_headroom>
	state->len = buf->len;
    8a9e:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
    8aa0:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    8aa2:	81e3      	strh	r3, [r4, #14]
	err = bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    8aa4:	6920      	ldr	r0, [r4, #16]
    8aa6:	682d      	ldr	r5, [r5, #0]
    8aa8:	f004 fd66 	bl	d578 <net_buf_ref>
    8aac:	6923      	ldr	r3, [r4, #16]
    8aae:	4601      	mov	r1, r0
    8ab0:	6898      	ldr	r0, [r3, #8]
    8ab2:	f7ff ff11 	bl	88d8 <att_cb.isra.0>
    8ab6:	2600      	movs	r6, #0
    8ab8:	4603      	mov	r3, r0
    8aba:	460a      	mov	r2, r1
    8abc:	4628      	mov	r0, r5
    8abe:	2104      	movs	r1, #4
    8ac0:	9600      	str	r6, [sp, #0]
    8ac2:	f00b fb40 	bl	14146 <bt_l2cap_send_cb>
	if (err) {
    8ac6:	4605      	mov	r5, r0
    8ac8:	2800      	cmp	r0, #0
    8aca:	d0e0      	beq.n	8a8e <att_send_req+0x7a>
		net_buf_unref(req->buf);
    8acc:	6920      	ldr	r0, [r4, #16]
    8ace:	f004 fd0d 	bl	d4ec <net_buf_unref>
		req->buf = NULL;
    8ad2:	6126      	str	r6, [r4, #16]
		return err;
    8ad4:	e7db      	b.n	8a8e <att_send_req+0x7a>
    8ad6:	bf00      	nop
    8ad8:	0001a5bd 	.word	0x0001a5bd
    8adc:	00017d82 	.word	0x00017d82
    8ae0:	0001a538 	.word	0x0001a538
    8ae4:	0001a5ad 	.word	0x0001a5ad
    8ae8:	0001a5b7 	.word	0x0001a5b7

00008aec <att_req_sent>:
{
    8aec:	b538      	push	{r3, r4, r5, lr}
    8aee:	4604      	mov	r4, r0
    8af0:	460d      	mov	r5, r1
	struct bt_att *att = att_get(conn);
    8af2:	f7ff ff2d 	bl	8950 <att_get>
	if (att->req) {
    8af6:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
    8afa:	b13b      	cbz	r3, 8b0c <att_req_sent+0x20>
    8afc:	f100 01c0 	add.w	r1, r0, #192	; 0xc0
    8b00:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    8b04:	2300      	movs	r3, #0
    8b06:	4804      	ldr	r0, [pc, #16]	; (8b18 <att_req_sent+0x2c>)
    8b08:	f008 fade 	bl	110c8 <k_delayed_work_submit_to_queue>
	att_pdu_sent(conn, user_data);
    8b0c:	4629      	mov	r1, r5
    8b0e:	4620      	mov	r0, r4
}
    8b10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	att_pdu_sent(conn, user_data);
    8b14:	f00b bd7c 	b.w	14610 <att_pdu_sent>
    8b18:	20001dcc 	.word	0x20001dcc

00008b1c <att_chan_get>:
{
    8b1c:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    8b1e:	7b43      	ldrb	r3, [r0, #13]
    8b20:	2b06      	cmp	r3, #6
    8b22:	d005      	beq.n	8b30 <att_chan_get+0x14>
		BT_WARN("Not connected");
    8b24:	2157      	movs	r1, #87	; 0x57
    8b26:	480c      	ldr	r0, [pc, #48]	; (8b58 <att_chan_get+0x3c>)
		BT_WARN("ATT context flagged as disconnected");
    8b28:	f009 faee 	bl	12108 <printk>
		return NULL;
    8b2c:	2400      	movs	r4, #0
    8b2e:	e008      	b.n	8b42 <att_chan_get+0x26>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    8b30:	2104      	movs	r1, #4
    8b32:	f00b fbe6 	bl	14302 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    8b36:	4604      	mov	r4, r0
    8b38:	b928      	cbnz	r0, 8b46 <att_chan_get+0x2a>
		BT_ERR("Unable to find ATT channel");
    8b3a:	2145      	movs	r1, #69	; 0x45
    8b3c:	4807      	ldr	r0, [pc, #28]	; (8b5c <att_chan_get+0x40>)
    8b3e:	f009 fae3 	bl	12108 <printk>
}
    8b42:	4620      	mov	r0, r4
    8b44:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8b46:	f100 03b0 	add.w	r3, r0, #176	; 0xb0
    8b4a:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    8b4e:	075b      	lsls	r3, r3, #29
    8b50:	d5f7      	bpl.n	8b42 <att_chan_get+0x26>
		BT_WARN("ATT context flagged as disconnected");
    8b52:	2157      	movs	r1, #87	; 0x57
    8b54:	4802      	ldr	r0, [pc, #8]	; (8b60 <att_chan_get+0x44>)
    8b56:	e7e7      	b.n	8b28 <att_chan_get+0xc>
    8b58:	0001a5c1 	.word	0x0001a5c1
    8b5c:	0001a5d4 	.word	0x0001a5d4
    8b60:	0001a5f4 	.word	0x0001a5f4

00008b64 <prep_write_cb>:
{
    8b64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8b66:	460c      	mov	r4, r1
    8b68:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
    8b6a:	4601      	mov	r1, r0
    8b6c:	222a      	movs	r2, #42	; 0x2a
    8b6e:	6820      	ldr	r0, [r4, #0]
    8b70:	f00c f92e 	bl	14dd0 <bt_gatt_check_perm>
    8b74:	4605      	mov	r5, r0
    8b76:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    8b78:	2800      	cmp	r0, #0
    8b7a:	d12d      	bne.n	8bd8 <prep_write_cb+0x74>
	if (!(attr->perm & BT_GATT_PERM_PREPARE_WRITE)) {
    8b7c:	7cb3      	ldrb	r3, [r6, #18]
    8b7e:	065b      	lsls	r3, r3, #25
    8b80:	d514      	bpl.n	8bac <prep_write_cb+0x48>
	write = attr->write(data->conn, attr, data->value, data->len,
    8b82:	2301      	movs	r3, #1
    8b84:	9301      	str	r3, [sp, #4]
    8b86:	89e3      	ldrh	r3, [r4, #14]
    8b88:	4631      	mov	r1, r6
    8b8a:	9300      	str	r3, [sp, #0]
    8b8c:	68b7      	ldr	r7, [r6, #8]
    8b8e:	89a3      	ldrh	r3, [r4, #12]
    8b90:	68a2      	ldr	r2, [r4, #8]
    8b92:	6820      	ldr	r0, [r4, #0]
    8b94:	47b8      	blx	r7
	if (write != 0) {
    8b96:	b148      	cbz	r0, 8bac <prep_write_cb+0x48>
	if (err < 0 && err >= -0xff) {
    8b98:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
    8b9c:	bf32      	itee	cc
    8b9e:	230e      	movcc	r3, #14
		return -err;
    8ba0:	4243      	negcs	r3, r0
    8ba2:	b2db      	uxtbcs	r3, r3
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    8ba4:	7423      	strb	r3, [r4, #16]
}
    8ba6:	4628      	mov	r0, r5
    8ba8:	b003      	add	sp, #12
    8baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	data->buf = net_buf_alloc(&prep_pool, K_NO_WAIT);
    8bac:	2200      	movs	r2, #0
    8bae:	2300      	movs	r3, #0
    8bb0:	480a      	ldr	r0, [pc, #40]	; (8bdc <prep_write_cb+0x78>)
    8bb2:	f00c fdea 	bl	1578a <net_buf_alloc_fixed>
    8bb6:	6060      	str	r0, [r4, #4]
	if (!data->buf) {
    8bb8:	b908      	cbnz	r0, 8bbe <prep_write_cb+0x5a>
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    8bba:	2309      	movs	r3, #9
    8bbc:	e7f2      	b.n	8ba4 <prep_write_cb+0x40>
	attr_data->handle = attr->handle;
    8bbe:	8a33      	ldrh	r3, [r6, #16]
	net_buf_add_mem(data->buf, data->value, data->len);
    8bc0:	89a2      	ldrh	r2, [r4, #12]
	attr_data->handle = attr->handle;
    8bc2:	8283      	strh	r3, [r0, #20]
	attr_data->offset = data->offset;
    8bc4:	89e3      	ldrh	r3, [r4, #14]
	net_buf_add_mem(data->buf, data->value, data->len);
    8bc6:	68a1      	ldr	r1, [r4, #8]
	attr_data->offset = data->offset;
    8bc8:	82c3      	strh	r3, [r0, #22]
	net_buf_add_mem(data->buf, data->value, data->len);
    8bca:	3008      	adds	r0, #8
    8bcc:	f00c fe0e 	bl	157ec <net_buf_simple_add_mem>
	data->err = 0U;
    8bd0:	2300      	movs	r3, #0
	return BT_GATT_ITER_CONTINUE;
    8bd2:	2501      	movs	r5, #1
	data->err = 0U;
    8bd4:	7423      	strb	r3, [r4, #16]
	return BT_GATT_ITER_CONTINUE;
    8bd6:	e7e6      	b.n	8ba6 <prep_write_cb+0x42>
		return BT_GATT_ITER_STOP;
    8bd8:	2500      	movs	r5, #0
    8bda:	e7e4      	b.n	8ba6 <prep_write_cb+0x42>
    8bdc:	20000660 	.word	0x20000660

00008be0 <bt_att_create_pdu>:
{
    8be0:	b570      	push	{r4, r5, r6, lr}
    8be2:	460e      	mov	r6, r1
    8be4:	4615      	mov	r5, r2
	att = att_chan_get(conn);
    8be6:	f7ff ff99 	bl	8b1c <att_chan_get>
	if (!att) {
    8bea:	4604      	mov	r4, r0
    8bec:	b148      	cbz	r0, 8c02 <bt_att_create_pdu+0x22>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    8bee:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
    8bf2:	1c6b      	adds	r3, r5, #1
    8bf4:	4293      	cmp	r3, r2
    8bf6:	d906      	bls.n	8c06 <bt_att_create_pdu+0x26>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    8bf8:	2157      	movs	r1, #87	; 0x57
    8bfa:	4813      	ldr	r0, [pc, #76]	; (8c48 <bt_att_create_pdu+0x68>)
    8bfc:	f009 fa84 	bl	12108 <printk>
		return NULL;
    8c00:	2400      	movs	r4, #0
}
    8c02:	4620      	mov	r0, r4
    8c04:	bd70      	pop	{r4, r5, r6, pc}
	switch (att_op_get_type(op)) {
    8c06:	4630      	mov	r0, r6
    8c08:	f00b fbac 	bl	14364 <att_op_get_type>
    8c0c:	2802      	cmp	r0, #2
    8c0e:	d001      	beq.n	8c14 <bt_att_create_pdu+0x34>
    8c10:	2804      	cmp	r0, #4
    8c12:	d10e      	bne.n	8c32 <bt_att_create_pdu+0x52>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
    8c14:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    8c18:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
    8c1a:	2100      	movs	r1, #0
    8c1c:	4608      	mov	r0, r1
    8c1e:	f00b fa8f 	bl	14140 <bt_l2cap_create_pdu_timeout>
    8c22:	4604      	mov	r4, r0
	if (!buf) {
    8c24:	b950      	cbnz	r0, 8c3c <bt_att_create_pdu+0x5c>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
    8c26:	4632      	mov	r2, r6
    8c28:	2145      	movs	r1, #69	; 0x45
    8c2a:	4808      	ldr	r0, [pc, #32]	; (8c4c <bt_att_create_pdu+0x6c>)
    8c2c:	f009 fa6c 	bl	12108 <printk>
		return NULL;
    8c30:	e7e7      	b.n	8c02 <bt_att_create_pdu+0x22>
		buf = bt_l2cap_create_pdu(NULL, 0);
    8c32:	f04f 32ff 	mov.w	r2, #4294967295
    8c36:	f04f 33ff 	mov.w	r3, #4294967295
    8c3a:	e7ee      	b.n	8c1a <bt_att_create_pdu+0x3a>
	hdr = net_buf_add(buf, sizeof(*hdr));
    8c3c:	2101      	movs	r1, #1
    8c3e:	3008      	adds	r0, #8
    8c40:	f004 fdc6 	bl	d7d0 <net_buf_simple_add>
	hdr->code = op;
    8c44:	7006      	strb	r6, [r0, #0]
	return buf;
    8c46:	e7dc      	b.n	8c02 <bt_att_create_pdu+0x22>
    8c48:	0001a61d 	.word	0x0001a61d
    8c4c:	0001a05a 	.word	0x0001a05a

00008c50 <att_indicate>:
{
    8c50:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    8c52:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    8c54:	f101 0008 	add.w	r0, r1, #8
{
    8c58:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    8c5a:	f00c fdb3 	bl	157c4 <net_buf_simple_pull_le16>
	bt_gatt_notification(conn, handle, buf->data, buf->len);
    8c5e:	89a3      	ldrh	r3, [r4, #12]
	handle = net_buf_pull_le16(buf);
    8c60:	4601      	mov	r1, r0
	bt_gatt_notification(conn, handle, buf->data, buf->len);
    8c62:	68a2      	ldr	r2, [r4, #8]
    8c64:	4628      	mov	r0, r5
    8c66:	f00c f946 	bl	14ef6 <bt_gatt_notification>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    8c6a:	2200      	movs	r2, #0
    8c6c:	211e      	movs	r1, #30
    8c6e:	4628      	mov	r0, r5
    8c70:	f7ff ffb6 	bl	8be0 <bt_att_create_pdu>
	if (!buf) {
    8c74:	4602      	mov	r2, r0
    8c76:	b130      	cbz	r0, 8c86 <att_indicate+0x36>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent, NULL);
    8c78:	2300      	movs	r3, #0
    8c7a:	2104      	movs	r1, #4
    8c7c:	9300      	str	r3, [sp, #0]
    8c7e:	4628      	mov	r0, r5
    8c80:	4b02      	ldr	r3, [pc, #8]	; (8c8c <att_indicate+0x3c>)
    8c82:	f00b fa60 	bl	14146 <bt_l2cap_send_cb>
}
    8c86:	2000      	movs	r0, #0
    8c88:	b003      	add	sp, #12
    8c8a:	bd30      	pop	{r4, r5, pc}
    8c8c:	00014669 	.word	0x00014669

00008c90 <att_mtu_req>:
	mtu_client = sys_le16_to_cpu(req->mtu);
    8c90:	688b      	ldr	r3, [r1, #8]
{
    8c92:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	mtu_client = sys_le16_to_cpu(req->mtu);
    8c96:	881e      	ldrh	r6, [r3, #0]
{
    8c98:	4605      	mov	r5, r0
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    8c9a:	2e16      	cmp	r6, #22
    8c9c:	d922      	bls.n	8ce4 <att_mtu_req+0x54>
	struct bt_conn *conn = att->chan.chan.conn;
    8c9e:	f8d0 8000 	ldr.w	r8, [r0]
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    8ca2:	2202      	movs	r2, #2
    8ca4:	2103      	movs	r1, #3
    8ca6:	4640      	mov	r0, r8
    8ca8:	f7ff ff9a 	bl	8be0 <bt_att_create_pdu>
	if (!pdu) {
    8cac:	4607      	mov	r7, r0
    8cae:	b1d8      	cbz	r0, 8ce8 <att_mtu_req+0x58>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    8cb0:	2102      	movs	r1, #2
    8cb2:	3008      	adds	r0, #8
    8cb4:	f004 fd8c 	bl	d7d0 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    8cb8:	2400      	movs	r4, #0
    8cba:	f06f 0308 	mvn.w	r3, #8
    8cbe:	7044      	strb	r4, [r0, #1]
    8cc0:	7003      	strb	r3, [r0, #0]
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent, NULL);
    8cc2:	463a      	mov	r2, r7
    8cc4:	2104      	movs	r1, #4
    8cc6:	4640      	mov	r0, r8
    8cc8:	4b08      	ldr	r3, [pc, #32]	; (8cec <att_mtu_req+0x5c>)
    8cca:	9400      	str	r4, [sp, #0]
    8ccc:	f00b fa3b 	bl	14146 <bt_l2cap_send_cb>
	att->chan.rx.mtu = MIN(mtu_client, mtu_server);
    8cd0:	2ef7      	cmp	r6, #247	; 0xf7
    8cd2:	bf28      	it	cs
    8cd4:	26f7      	movcs	r6, #247	; 0xf7
	return 0;
    8cd6:	4620      	mov	r0, r4
	att->chan.rx.mtu = MIN(mtu_client, mtu_server);
    8cd8:	87ee      	strh	r6, [r5, #62]	; 0x3e
	att->chan.tx.mtu = att->chan.rx.mtu;
    8cda:	f8a5 604a 	strh.w	r6, [r5, #74]	; 0x4a
}
    8cde:	b002      	add	sp, #8
    8ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_INVALID_PDU;
    8ce4:	2004      	movs	r0, #4
    8ce6:	e7fa      	b.n	8cde <att_mtu_req+0x4e>
		return BT_ATT_ERR_UNLIKELY;
    8ce8:	200e      	movs	r0, #14
    8cea:	e7f8      	b.n	8cde <att_mtu_req+0x4e>
    8cec:	00014693 	.word	0x00014693

00008cf0 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    8cf0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    8cf4:	4688      	mov	r8, r1
    8cf6:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    8cf8:	2101      	movs	r1, #1
    8cfa:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    8cfc:	4605      	mov	r5, r0
    8cfe:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    8d00:	f7ff ff6e 	bl	8be0 <bt_att_create_pdu>
	if (!buf) {
    8d04:	4604      	mov	r4, r0
    8d06:	b180      	cbz	r0, 8d2a <send_err_rsp.part.0+0x3a>
	rsp = net_buf_add(buf, sizeof(*rsp));
    8d08:	2104      	movs	r1, #4
    8d0a:	3008      	adds	r0, #8
    8d0c:	f004 fd60 	bl	d7d0 <net_buf_simple_add>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent, NULL);
    8d10:	2300      	movs	r3, #0
	rsp->request = req;
    8d12:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
    8d16:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
    8d1a:	70c6      	strb	r6, [r0, #3]
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent, NULL);
    8d1c:	4622      	mov	r2, r4
    8d1e:	9300      	str	r3, [sp, #0]
    8d20:	2104      	movs	r1, #4
    8d22:	4628      	mov	r0, r5
    8d24:	4b02      	ldr	r3, [pc, #8]	; (8d30 <send_err_rsp.part.0+0x40>)
    8d26:	f00b fa0e 	bl	14146 <bt_l2cap_send_cb>
}
    8d2a:	b002      	add	sp, #8
    8d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8d30:	00014693 	.word	0x00014693

00008d34 <bt_att_recv>:
{
    8d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    8d36:	898b      	ldrh	r3, [r1, #12]
{
    8d38:	4604      	mov	r4, r0
    8d3a:	460e      	mov	r6, r1
	if (buf->len < sizeof(*hdr)) {
    8d3c:	b92b      	cbnz	r3, 8d4a <bt_att_recv+0x16>
		BT_ERR("Too small ATT PDU received");
    8d3e:	2145      	movs	r1, #69	; 0x45
    8d40:	4836      	ldr	r0, [pc, #216]	; (8e1c <bt_att_recv+0xe8>)
			BT_WARN("Ignoring unexpected indication");
    8d42:	f009 f9e1 	bl	12108 <printk>
}
    8d46:	2000      	movs	r0, #0
    8d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    8d4a:	2101      	movs	r1, #1
    8d4c:	f106 0008 	add.w	r0, r6, #8
    8d50:	f004 fd1c 	bl	d78c <net_buf_simple_pull_mem>
		if (hdr->code == handlers[i].op) {
    8d54:	4932      	ldr	r1, [pc, #200]	; (8e20 <bt_att_recv+0xec>)
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    8d56:	4605      	mov	r5, r0
		if (hdr->code == handlers[i].op) {
    8d58:	7802      	ldrb	r2, [r0, #0]
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    8d5a:	2300      	movs	r3, #0
    8d5c:	4608      	mov	r0, r1
		if (hdr->code == handlers[i].op) {
    8d5e:	f811 7033 	ldrb.w	r7, [r1, r3, lsl #3]
    8d62:	4297      	cmp	r7, r2
    8d64:	d116      	bne.n	8d94 <bt_att_recv+0x60>
		if (handler->type == ATT_REQUEST &&
    8d66:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
    8d6a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    8d6e:	789f      	ldrb	r7, [r3, #2]
    8d70:	2f01      	cmp	r7, #1
    8d72:	d124      	bne.n	8dbe <bt_att_recv+0x8a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8d74:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
    8d78:	e8d2 3fef 	ldaex	r3, [r2]
    8d7c:	f043 0101 	orr.w	r1, r3, #1
    8d80:	e8c2 1fee 	stlex	lr, r1, [r2]
    8d84:	f1be 0f00 	cmp.w	lr, #0
    8d88:	d1f6      	bne.n	8d78 <bt_att_recv+0x44>
    8d8a:	07da      	lsls	r2, r3, #31
    8d8c:	d529      	bpl.n	8de2 <bt_att_recv+0xae>
			BT_WARN("Ignoring unexpected request");
    8d8e:	2157      	movs	r1, #87	; 0x57
    8d90:	4824      	ldr	r0, [pc, #144]	; (8e24 <bt_att_recv+0xf0>)
    8d92:	e7d6      	b.n	8d42 <bt_att_recv+0xe>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    8d94:	3301      	adds	r3, #1
    8d96:	2b1b      	cmp	r3, #27
    8d98:	d1e1      	bne.n	8d5e <bt_att_recv+0x2a>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
    8d9a:	2157      	movs	r1, #87	; 0x57
    8d9c:	4822      	ldr	r0, [pc, #136]	; (8e28 <bt_att_recv+0xf4>)
    8d9e:	f009 f9b3 	bl	12108 <printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    8da2:	7829      	ldrb	r1, [r5, #0]
    8da4:	4608      	mov	r0, r1
    8da6:	f00b fadd 	bl	14364 <att_op_get_type>
    8daa:	2800      	cmp	r0, #0
    8dac:	d0cb      	beq.n	8d46 <bt_att_recv+0x12>
	if (!req) {
    8dae:	2900      	cmp	r1, #0
    8db0:	d0c9      	beq.n	8d46 <bt_att_recv+0x12>
    8db2:	2306      	movs	r3, #6
    8db4:	2200      	movs	r2, #0
    8db6:	6820      	ldr	r0, [r4, #0]
    8db8:	f7ff ff9a 	bl	8cf0 <send_err_rsp.part.0>
    8dbc:	e7c3      	b.n	8d46 <bt_att_recv+0x12>
		} else if (handler->type == ATT_INDICATION &&
    8dbe:	2f05      	cmp	r7, #5
    8dc0:	d10f      	bne.n	8de2 <bt_att_recv+0xae>
    8dc2:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
    8dc6:	e8d2 3fef 	ldaex	r3, [r2]
    8dca:	f043 0102 	orr.w	r1, r3, #2
    8dce:	e8c2 1fee 	stlex	lr, r1, [r2]
    8dd2:	f1be 0f00 	cmp.w	lr, #0
    8dd6:	d1f6      	bne.n	8dc6 <bt_att_recv+0x92>
    8dd8:	079b      	lsls	r3, r3, #30
    8dda:	d502      	bpl.n	8de2 <bt_att_recv+0xae>
			BT_WARN("Ignoring unexpected indication");
    8ddc:	2157      	movs	r1, #87	; 0x57
    8dde:	4813      	ldr	r0, [pc, #76]	; (8e2c <bt_att_recv+0xf8>)
    8de0:	e7af      	b.n	8d42 <bt_att_recv+0xe>
	if (buf->len < handler->expect_len) {
    8de2:	eb00 030c 	add.w	r3, r0, ip
    8de6:	89b2      	ldrh	r2, [r6, #12]
    8de8:	7859      	ldrb	r1, [r3, #1]
    8dea:	4291      	cmp	r1, r2
    8dec:	d908      	bls.n	8e00 <bt_att_recv+0xcc>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    8dee:	2145      	movs	r1, #69	; 0x45
    8df0:	782b      	ldrb	r3, [r5, #0]
    8df2:	480f      	ldr	r0, [pc, #60]	; (8e30 <bt_att_recv+0xfc>)
    8df4:	f009 f988 	bl	12108 <printk>
	if (handler->type == ATT_REQUEST && err) {
    8df8:	2f01      	cmp	r7, #1
    8dfa:	d1a4      	bne.n	8d46 <bt_att_recv+0x12>
		err = BT_ATT_ERR_INVALID_PDU;
    8dfc:	2304      	movs	r3, #4
    8dfe:	e008      	b.n	8e12 <bt_att_recv+0xde>
		err = handler->func(att, buf);
    8e00:	685b      	ldr	r3, [r3, #4]
    8e02:	4631      	mov	r1, r6
    8e04:	4620      	mov	r0, r4
    8e06:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    8e08:	2f01      	cmp	r7, #1
		err = handler->func(att, buf);
    8e0a:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    8e0c:	d19b      	bne.n	8d46 <bt_att_recv+0x12>
    8e0e:	2800      	cmp	r0, #0
    8e10:	d099      	beq.n	8d46 <bt_att_recv+0x12>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    8e12:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    8e14:	2900      	cmp	r1, #0
    8e16:	d096      	beq.n	8d46 <bt_att_recv+0x12>
    8e18:	e7cc      	b.n	8db4 <bt_att_recv+0x80>
    8e1a:	bf00      	nop
    8e1c:	0001a647 	.word	0x0001a647
    8e20:	00017260 	.word	0x00017260
    8e24:	0001a667 	.word	0x0001a667
    8e28:	0001a6d0 	.word	0x0001a6d0
    8e2c:	0001a688 	.word	0x0001a688
    8e30:	0001a6ac 	.word	0x0001a6ac

00008e34 <att_write_rsp>:
{
    8e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    8e38:	460d      	mov	r5, r1
    8e3a:	3900      	subs	r1, #0
    8e3c:	bf18      	it	ne
    8e3e:	2101      	movne	r1, #1
{
    8e40:	b088      	sub	sp, #32
    8e42:	4606      	mov	r6, r0
    8e44:	4690      	mov	r8, r2
    8e46:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    8e48:	f00c f881 	bl	14f4e <bt_gatt_change_aware>
    8e4c:	2800      	cmp	r0, #0
    8e4e:	d04e      	beq.n	8eee <att_write_rsp+0xba>
	if (!handle) {
    8e50:	2f00      	cmp	r7, #0
    8e52:	d04e      	beq.n	8ef2 <att_write_rsp+0xbe>
	(void)memset(&data, 0, sizeof(data));
    8e54:	2218      	movs	r2, #24
    8e56:	2100      	movs	r1, #0
    8e58:	a802      	add	r0, sp, #8
    8e5a:	f00a fc95 	bl	13788 <memset>
	if (rsp) {
    8e5e:	f1b8 0f00 	cmp.w	r8, #0
    8e62:	d124      	bne.n	8eae <att_write_rsp+0x7a>
	data.offset = offset;
    8e64:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    8e68:	4639      	mov	r1, r7
	data.offset = offset;
    8e6a:	f8ad 301a 	strh.w	r3, [sp, #26]
	data.value = value;
    8e6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    8e70:	4638      	mov	r0, r7
	data.value = value;
    8e72:	9305      	str	r3, [sp, #20]
	data.len = len;
    8e74:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    8e78:	4a1f      	ldr	r2, [pc, #124]	; (8ef8 <att_write_rsp+0xc4>)
	data.len = len;
    8e7a:	f8ad 3018 	strh.w	r3, [sp, #24]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    8e7e:	2301      	movs	r3, #1
    8e80:	f88d 301c 	strb.w	r3, [sp, #28]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    8e84:	ab02      	add	r3, sp, #8
	data.conn = conn;
    8e86:	9602      	str	r6, [sp, #8]
	data.req = req;
    8e88:	f88d 5010 	strb.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    8e8c:	f00b faa6 	bl	143dc <bt_gatt_foreach_attr>
	if (data.err) {
    8e90:	f89d 401c 	ldrb.w	r4, [sp, #28]
    8e94:	b30c      	cbz	r4, 8eda <att_write_rsp+0xa6>
		if (rsp) {
    8e96:	f1b8 0f00 	cmp.w	r8, #0
    8e9a:	d019      	beq.n	8ed0 <att_write_rsp+0x9c>
			net_buf_unref(data.buf);
    8e9c:	9803      	ldr	r0, [sp, #12]
    8e9e:	f004 fb25 	bl	d4ec <net_buf_unref>
	if (!req) {
    8ea2:	b975      	cbnz	r5, 8ec2 <att_write_rsp+0x8e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    8ea4:	2400      	movs	r4, #0
}
    8ea6:	4620      	mov	r0, r4
    8ea8:	b008      	add	sp, #32
    8eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    8eae:	2200      	movs	r2, #0
    8eb0:	4641      	mov	r1, r8
    8eb2:	4630      	mov	r0, r6
    8eb4:	f7ff fe94 	bl	8be0 <bt_att_create_pdu>
    8eb8:	9003      	str	r0, [sp, #12]
		if (!data.buf) {
    8eba:	2800      	cmp	r0, #0
    8ebc:	d1d2      	bne.n	8e64 <att_write_rsp+0x30>
			return BT_ATT_ERR_UNLIKELY;
    8ebe:	240e      	movs	r4, #14
    8ec0:	e7f1      	b.n	8ea6 <att_write_rsp+0x72>
    8ec2:	463a      	mov	r2, r7
    8ec4:	4629      	mov	r1, r5
    8ec6:	4630      	mov	r0, r6
    8ec8:	f89d 301c 	ldrb.w	r3, [sp, #28]
    8ecc:	f7ff ff10 	bl	8cf0 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    8ed0:	2d18      	cmp	r5, #24
    8ed2:	d1e7      	bne.n	8ea4 <att_write_rsp+0x70>
    8ed4:	f89d 401c 	ldrb.w	r4, [sp, #28]
    8ed8:	e7e5      	b.n	8ea6 <att_write_rsp+0x72>
	if (data.buf) {
    8eda:	9a03      	ldr	r2, [sp, #12]
    8edc:	2a00      	cmp	r2, #0
    8ede:	d0e1      	beq.n	8ea4 <att_write_rsp+0x70>
		(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    8ee0:	2104      	movs	r1, #4
    8ee2:	4630      	mov	r0, r6
    8ee4:	4b05      	ldr	r3, [pc, #20]	; (8efc <att_write_rsp+0xc8>)
    8ee6:	9400      	str	r4, [sp, #0]
    8ee8:	f00b f92d 	bl	14146 <bt_l2cap_send_cb>
    8eec:	e7db      	b.n	8ea6 <att_write_rsp+0x72>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    8eee:	2412      	movs	r4, #18
    8ef0:	e7d9      	b.n	8ea6 <att_write_rsp+0x72>
		return BT_ATT_ERR_INVALID_HANDLE;
    8ef2:	2401      	movs	r4, #1
    8ef4:	e7d7      	b.n	8ea6 <att_write_rsp+0x72>
    8ef6:	bf00      	nop
    8ef8:	000146bd 	.word	0x000146bd
    8efc:	00014693 	.word	0x00014693

00008f00 <att_exec_write_req>:
{
    8f00:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	u8_t err = 0U;
    8f04:	2400      	movs	r4, #0
	return att_exec_write_rsp(att, req->flags);
    8f06:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    8f08:	6807      	ldr	r7, [r0, #0]
	return att_exec_write_rsp(att, req->flags);
    8f0a:	f893 8000 	ldrb.w	r8, [r3]
	while ((buf = net_buf_get(&att->prep_queue, K_NO_WAIT))) {
    8f0e:	f500 768a 	add.w	r6, r0, #276	; 0x114
    8f12:	2200      	movs	r2, #0
    8f14:	2300      	movs	r3, #0
    8f16:	4630      	mov	r0, r6
    8f18:	f004 fa56 	bl	d3c8 <net_buf_get>
    8f1c:	4605      	mov	r5, r0
    8f1e:	b988      	cbnz	r0, 8f44 <att_exec_write_req+0x44>
	if (err) {
    8f20:	bb64      	cbnz	r4, 8f7c <att_exec_write_req+0x7c>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_EXEC_WRITE_RSP, 0);
    8f22:	4622      	mov	r2, r4
    8f24:	2119      	movs	r1, #25
    8f26:	4638      	mov	r0, r7
    8f28:	f7ff fe5a 	bl	8be0 <bt_att_create_pdu>
	if (!buf) {
    8f2c:	4602      	mov	r2, r0
    8f2e:	b338      	cbz	r0, 8f80 <att_exec_write_req+0x80>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent, NULL);
    8f30:	2104      	movs	r1, #4
    8f32:	4638      	mov	r0, r7
    8f34:	4b13      	ldr	r3, [pc, #76]	; (8f84 <att_exec_write_req+0x84>)
    8f36:	9400      	str	r4, [sp, #0]
    8f38:	f00b f905 	bl	14146 <bt_l2cap_send_cb>
}
    8f3c:	4620      	mov	r0, r4
    8f3e:	b004      	add	sp, #16
    8f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!err && flags == BT_ATT_FLAG_EXEC) {
    8f44:	b9b4      	cbnz	r4, 8f74 <att_exec_write_req+0x74>
    8f46:	f1b8 0f01 	cmp.w	r8, #1
    8f4a:	d113      	bne.n	8f74 <att_exec_write_req+0x74>
			err = att_write_rsp(conn, BT_ATT_OP_EXEC_WRITE_REQ, 0,
    8f4c:	89aa      	ldrh	r2, [r5, #12]
    8f4e:	8aab      	ldrh	r3, [r5, #20]
    8f50:	9202      	str	r2, [sp, #8]
    8f52:	68aa      	ldr	r2, [r5, #8]
    8f54:	2118      	movs	r1, #24
    8f56:	9201      	str	r2, [sp, #4]
    8f58:	8aea      	ldrh	r2, [r5, #22]
    8f5a:	4638      	mov	r0, r7
    8f5c:	9200      	str	r2, [sp, #0]
    8f5e:	4622      	mov	r2, r4
    8f60:	f7ff ff68 	bl	8e34 <att_write_rsp>
			if (err) {
    8f64:	4604      	mov	r4, r0
    8f66:	b128      	cbz	r0, 8f74 <att_exec_write_req+0x74>
	if (!req) {
    8f68:	4603      	mov	r3, r0
    8f6a:	2118      	movs	r1, #24
    8f6c:	4638      	mov	r0, r7
    8f6e:	8aaa      	ldrh	r2, [r5, #20]
    8f70:	f7ff febe 	bl	8cf0 <send_err_rsp.part.0>
		net_buf_unref(buf);
    8f74:	4628      	mov	r0, r5
    8f76:	f004 fab9 	bl	d4ec <net_buf_unref>
    8f7a:	e7ca      	b.n	8f12 <att_exec_write_req+0x12>
		return 0;
    8f7c:	4604      	mov	r4, r0
    8f7e:	e7dd      	b.n	8f3c <att_exec_write_req+0x3c>
		return BT_ATT_ERR_UNLIKELY;
    8f80:	240e      	movs	r4, #14
    8f82:	e7db      	b.n	8f3c <att_exec_write_req+0x3c>
    8f84:	00014693 	.word	0x00014693

00008f88 <att_prepare_write_req>:
{
    8f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8f8c:	460c      	mov	r4, r1
    8f8e:	4606      	mov	r6, r0
	req = net_buf_pull_mem(buf, sizeof(*req));
    8f90:	2104      	movs	r1, #4
{
    8f92:	b089      	sub	sp, #36	; 0x24
	req = net_buf_pull_mem(buf, sizeof(*req));
    8f94:	f104 0008 	add.w	r0, r4, #8
    8f98:	f004 fbf8 	bl	d78c <net_buf_simple_pull_mem>
	struct bt_conn *conn = att->chan.chan.conn;
    8f9c:	6835      	ldr	r5, [r6, #0]
	handle = sys_le16_to_cpu(req->handle);
    8f9e:	f8b0 a000 	ldrh.w	sl, [r0]
	offset = sys_le16_to_cpu(req->offset);
    8fa2:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!bt_gatt_change_aware(conn, true)) {
    8fa6:	2101      	movs	r1, #1
    8fa8:	4628      	mov	r0, r5
	return att_prep_write_rsp(att, handle, offset, buf->data, buf->len);
    8faa:	f8d4 8008 	ldr.w	r8, [r4, #8]
    8fae:	89a7      	ldrh	r7, [r4, #12]
	handle = sys_le16_to_cpu(req->handle);
    8fb0:	fa1f fb8a 	uxth.w	fp, sl
	if (!bt_gatt_change_aware(conn, true)) {
    8fb4:	f00b ffcb 	bl	14f4e <bt_gatt_change_aware>
    8fb8:	2800      	cmp	r0, #0
    8fba:	d04c      	beq.n	9056 <att_prepare_write_req+0xce>
	if (!handle) {
    8fbc:	f1bb 0f00 	cmp.w	fp, #0
    8fc0:	d04b      	beq.n	905a <att_prepare_write_req+0xd2>
	(void)memset(&data, 0, sizeof(data));
    8fc2:	2214      	movs	r2, #20
    8fc4:	2100      	movs	r1, #0
    8fc6:	a803      	add	r0, sp, #12
    8fc8:	f00a fbde 	bl	13788 <memset>
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    8fcc:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    8fce:	4659      	mov	r1, fp
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    8fd0:	f88d 301c 	strb.w	r3, [sp, #28]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    8fd4:	4658      	mov	r0, fp
    8fd6:	4a23      	ldr	r2, [pc, #140]	; (9064 <att_prepare_write_req+0xdc>)
    8fd8:	ab03      	add	r3, sp, #12
	data.conn = conn;
    8fda:	9503      	str	r5, [sp, #12]
	data.offset = offset;
    8fdc:	f8ad 901a 	strh.w	r9, [sp, #26]
	data.value = value;
    8fe0:	f8cd 8014 	str.w	r8, [sp, #20]
	data.len = len;
    8fe4:	f8ad 7018 	strh.w	r7, [sp, #24]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    8fe8:	f00b f9f8 	bl	143dc <bt_gatt_foreach_attr>
	if (data.err) {
    8fec:	f89d 401c 	ldrb.w	r4, [sp, #28]
    8ff0:	b154      	cbz	r4, 9008 <att_prepare_write_req+0x80>
	if (!req) {
    8ff2:	4623      	mov	r3, r4
    8ff4:	465a      	mov	r2, fp
    8ff6:	2116      	movs	r1, #22
    8ff8:	4628      	mov	r0, r5
    8ffa:	f7ff fe79 	bl	8cf0 <send_err_rsp.part.0>
		return 0;
    8ffe:	2400      	movs	r4, #0
}
    9000:	4620      	mov	r0, r4
    9002:	b009      	add	sp, #36	; 0x24
    9004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_buf_put(&att->prep_queue, data.buf);
    9008:	9904      	ldr	r1, [sp, #16]
    900a:	f506 708a 	add.w	r0, r6, #276	; 0x114
    900e:	f004 fa39 	bl	d484 <net_buf_put>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_PREPARE_WRITE_RSP, 0);
    9012:	4622      	mov	r2, r4
    9014:	2117      	movs	r1, #23
    9016:	4628      	mov	r0, r5
    9018:	f7ff fde2 	bl	8be0 <bt_att_create_pdu>
    901c:	9004      	str	r0, [sp, #16]
	if (!data.buf) {
    901e:	b1f0      	cbz	r0, 905e <att_prepare_write_req+0xd6>
	rsp = net_buf_add(data.buf, sizeof(*rsp));
    9020:	2104      	movs	r1, #4
    9022:	3008      	adds	r0, #8
    9024:	f004 fbd4 	bl	d7d0 <net_buf_simple_add>
    9028:	4606      	mov	r6, r0
	rsp->handle = sys_cpu_to_le16(handle);
    902a:	f8a0 a000 	strh.w	sl, [r0]
	rsp->offset = sys_cpu_to_le16(offset);
    902e:	f8a0 9002 	strh.w	r9, [r0, #2]
	net_buf_add(data.buf, len);
    9032:	9804      	ldr	r0, [sp, #16]
    9034:	4639      	mov	r1, r7
    9036:	3008      	adds	r0, #8
    9038:	f004 fbca 	bl	d7d0 <net_buf_simple_add>
	memcpy(rsp->value, value, len);
    903c:	463a      	mov	r2, r7
    903e:	4641      	mov	r1, r8
    9040:	1d30      	adds	r0, r6, #4
    9042:	f00a fb76 	bl	13732 <memcpy>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    9046:	2104      	movs	r1, #4
    9048:	4628      	mov	r0, r5
    904a:	4b07      	ldr	r3, [pc, #28]	; (9068 <att_prepare_write_req+0xe0>)
    904c:	9a04      	ldr	r2, [sp, #16]
    904e:	9400      	str	r4, [sp, #0]
    9050:	f00b f879 	bl	14146 <bt_l2cap_send_cb>
	return 0;
    9054:	e7d4      	b.n	9000 <att_prepare_write_req+0x78>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    9056:	2412      	movs	r4, #18
    9058:	e7d2      	b.n	9000 <att_prepare_write_req+0x78>
		return BT_ATT_ERR_INVALID_HANDLE;
    905a:	2401      	movs	r4, #1
    905c:	e7d0      	b.n	9000 <att_prepare_write_req+0x78>
		return BT_ATT_ERR_UNLIKELY;
    905e:	240e      	movs	r4, #14
    9060:	e7ce      	b.n	9000 <att_prepare_write_req+0x78>
    9062:	bf00      	nop
    9064:	00008b65 	.word	0x00008b65
    9068:	00014693 	.word	0x00014693

0000906c <att_read_group_req>:
{
    906c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u8_t uuid_len = buf->len - sizeof(*req);
    9070:	7b0c      	ldrb	r4, [r1, #12]
{
    9072:	4606      	mov	r6, r0
	u8_t uuid_len = buf->len - sizeof(*req);
    9074:	3c04      	subs	r4, #4
    9076:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    9078:	2c02      	cmp	r4, #2
{
    907a:	4608      	mov	r0, r1
    907c:	b08f      	sub	sp, #60	; 0x3c
	if (uuid_len != 2 && uuid_len != 16) {
    907e:	d001      	beq.n	9084 <att_read_group_req+0x18>
    9080:	2c10      	cmp	r4, #16
    9082:	d16f      	bne.n	9164 <att_read_group_req+0xf8>
	req = net_buf_pull_mem(buf, sizeof(*req));
    9084:	2104      	movs	r1, #4
    9086:	3008      	adds	r0, #8
	struct bt_conn *conn = att->chan.chan.conn;
    9088:	f8d6 9000 	ldr.w	r9, [r6]
	req = net_buf_pull_mem(buf, sizeof(*req));
    908c:	f004 fb7e 	bl	d78c <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    9090:	f10d 0810 	add.w	r8, sp, #16
	start_handle = sys_le16_to_cpu(req->start_handle);
    9094:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    9096:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    9098:	1d01      	adds	r1, r0, #4
    909a:	4622      	mov	r2, r4
    909c:	4640      	mov	r0, r8
    909e:	f00a fc0d 	bl	138bc <bt_uuid_create>
    90a2:	2800      	cmp	r0, #0
    90a4:	d060      	beq.n	9168 <att_read_group_req+0xfc>
	if (!start || !end) {
    90a6:	2d00      	cmp	r5, #0
    90a8:	d036      	beq.n	9118 <att_read_group_req+0xac>
    90aa:	2400      	movs	r4, #0
    90ac:	b39f      	cbz	r7, 9116 <att_read_group_req+0xaa>
	if (start > end) {
    90ae:	42bd      	cmp	r5, r7
    90b0:	d832      	bhi.n	9118 <att_read_group_req+0xac>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    90b2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    90b6:	4640      	mov	r0, r8
    90b8:	a903      	add	r1, sp, #12
    90ba:	f88d 400c 	strb.w	r4, [sp, #12]
    90be:	f8ad 300e 	strh.w	r3, [sp, #14]
    90c2:	f00a fbd1 	bl	13868 <bt_uuid_cmp>
    90c6:	bb90      	cbnz	r0, 912e <att_read_group_req+0xc2>
	struct bt_conn *conn = att->chan.chan.conn;
    90c8:	f8d6 9000 	ldr.w	r9, [r6]
	(void)memset(&data, 0, sizeof(data));
    90cc:	2214      	movs	r2, #20
    90ce:	2100      	movs	r1, #0
    90d0:	a809      	add	r0, sp, #36	; 0x24
    90d2:	f00a fb59 	bl	13788 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    90d6:	2201      	movs	r2, #1
    90d8:	2111      	movs	r1, #17
    90da:	4648      	mov	r0, r9
    90dc:	f7ff fd80 	bl	8be0 <bt_att_create_pdu>
    90e0:	900b      	str	r0, [sp, #44]	; 0x2c
	if (!data.buf) {
    90e2:	2800      	cmp	r0, #0
    90e4:	d040      	beq.n	9168 <att_read_group_req+0xfc>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    90e6:	2101      	movs	r1, #1
    90e8:	3008      	adds	r0, #8
	data.uuid = uuid;
    90ea:	e9cd 6809 	strd	r6, r8, [sp, #36]	; 0x24
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    90ee:	f004 fb6f 	bl	d7d0 <net_buf_simple_add>
	data.rsp->len = 0U;
    90f2:	2600      	movs	r6, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    90f4:	900c      	str	r0, [sp, #48]	; 0x30
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    90f6:	ab09      	add	r3, sp, #36	; 0x24
	data.rsp->len = 0U;
    90f8:	7006      	strb	r6, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    90fa:	4639      	mov	r1, r7
    90fc:	4628      	mov	r0, r5
    90fe:	4a1b      	ldr	r2, [pc, #108]	; (916c <att_read_group_req+0x100>)
	data.group = NULL;
    9100:	960d      	str	r6, [sp, #52]	; 0x34
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    9102:	f00b f96b 	bl	143dc <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    9106:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9108:	781c      	ldrb	r4, [r3, #0]
    910a:	bb1c      	cbnz	r4, 9154 <att_read_group_req+0xe8>
		net_buf_unref(data.buf);
    910c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    910e:	f004 f9ed 	bl	d4ec <net_buf_unref>
	if (!req) {
    9112:	230a      	movs	r3, #10
    9114:	e018      	b.n	9148 <att_read_group_req+0xdc>
			*err = 0U;
    9116:	463d      	mov	r5, r7
	if (!req) {
    9118:	2301      	movs	r3, #1
    911a:	462a      	mov	r2, r5
    911c:	2110      	movs	r1, #16
    911e:	4648      	mov	r0, r9
    9120:	f7ff fde6 	bl	8cf0 <send_err_rsp.part.0>
		return 0;
    9124:	2400      	movs	r4, #0
}
    9126:	4620      	mov	r0, r4
    9128:	b00f      	add	sp, #60	; 0x3c
    912a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    912e:	f642 0301 	movw	r3, #10241	; 0x2801
    9132:	4640      	mov	r0, r8
    9134:	a909      	add	r1, sp, #36	; 0x24
    9136:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
    913a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    913e:	f00a fb93 	bl	13868 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    9142:	2800      	cmp	r0, #0
    9144:	d0c0      	beq.n	90c8 <att_read_group_req+0x5c>
	if (!req) {
    9146:	2310      	movs	r3, #16
    9148:	462a      	mov	r2, r5
    914a:	2110      	movs	r1, #16
    914c:	4648      	mov	r0, r9
    914e:	f7ff fdcf 	bl	8cf0 <send_err_rsp.part.0>
		return 0;
    9152:	e7e8      	b.n	9126 <att_read_group_req+0xba>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    9154:	2104      	movs	r1, #4
    9156:	4648      	mov	r0, r9
    9158:	4b05      	ldr	r3, [pc, #20]	; (9170 <att_read_group_req+0x104>)
    915a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    915c:	9600      	str	r6, [sp, #0]
    915e:	f00a fff2 	bl	14146 <bt_l2cap_send_cb>
	return 0;
    9162:	e7df      	b.n	9124 <att_read_group_req+0xb8>
		return BT_ATT_ERR_INVALID_PDU;
    9164:	2404      	movs	r4, #4
    9166:	e7de      	b.n	9126 <att_read_group_req+0xba>
		return BT_ATT_ERR_UNLIKELY;
    9168:	240e      	movs	r4, #14
    916a:	e7dc      	b.n	9126 <att_read_group_req+0xba>
    916c:	0001448d 	.word	0x0001448d
    9170:	00014693 	.word	0x00014693

00009174 <att_read_mult_req>:
{
    9174:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    9178:	6806      	ldr	r6, [r0, #0]
{
    917a:	b089      	sub	sp, #36	; 0x24
	(void)memset(&data, 0, sizeof(data));
    917c:	2214      	movs	r2, #20
{
    917e:	4605      	mov	r5, r0
    9180:	460c      	mov	r4, r1
	(void)memset(&data, 0, sizeof(data));
    9182:	a803      	add	r0, sp, #12
    9184:	2100      	movs	r1, #0
    9186:	f00a faff 	bl	13788 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    918a:	2200      	movs	r2, #0
    918c:	210f      	movs	r1, #15
    918e:	4630      	mov	r0, r6
    9190:	f7ff fd26 	bl	8be0 <bt_att_create_pdu>
    9194:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
    9196:	b378      	cbz	r0, 91f8 <att_read_mult_req+0x84>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    9198:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    919c:	f8df 9060 	ldr.w	r9, [pc, #96]	; 9200 <att_read_mult_req+0x8c>
	data.att = att;
    91a0:	9503      	str	r5, [sp, #12]
		handle = net_buf_pull_le16(buf);
    91a2:	f104 0708 	add.w	r7, r4, #8
	while (buf->len >= sizeof(u16_t)) {
    91a6:	89a3      	ldrh	r3, [r4, #12]
    91a8:	2b01      	cmp	r3, #1
    91aa:	d808      	bhi.n	91be <att_read_mult_req+0x4a>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    91ac:	2400      	movs	r4, #0
    91ae:	2104      	movs	r1, #4
    91b0:	4630      	mov	r0, r6
    91b2:	4b12      	ldr	r3, [pc, #72]	; (91fc <att_read_mult_req+0x88>)
    91b4:	9a05      	ldr	r2, [sp, #20]
    91b6:	9400      	str	r4, [sp, #0]
    91b8:	f00a ffc5 	bl	14146 <bt_l2cap_send_cb>
	return 0;
    91bc:	e018      	b.n	91f0 <att_read_mult_req+0x7c>
		handle = net_buf_pull_le16(buf);
    91be:	4638      	mov	r0, r7
    91c0:	f00c fb00 	bl	157c4 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    91c4:	ab03      	add	r3, sp, #12
    91c6:	464a      	mov	r2, r9
    91c8:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    91ca:	4605      	mov	r5, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    91cc:	f88d 801c 	strb.w	r8, [sp, #28]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    91d0:	f00b f904 	bl	143dc <bt_gatt_foreach_attr>
		if (data.err) {
    91d4:	f89d 301c 	ldrb.w	r3, [sp, #28]
    91d8:	2b00      	cmp	r3, #0
    91da:	d0e4      	beq.n	91a6 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    91dc:	9805      	ldr	r0, [sp, #20]
    91de:	f004 f985 	bl	d4ec <net_buf_unref>
	if (!req) {
    91e2:	462a      	mov	r2, r5
    91e4:	210e      	movs	r1, #14
    91e6:	4630      	mov	r0, r6
    91e8:	f89d 301c 	ldrb.w	r3, [sp, #28]
    91ec:	f7ff fd80 	bl	8cf0 <send_err_rsp.part.0>
			return 0;
    91f0:	2000      	movs	r0, #0
}
    91f2:	b009      	add	sp, #36	; 0x24
    91f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    91f8:	200e      	movs	r0, #14
    91fa:	e7fa      	b.n	91f2 <att_read_mult_req+0x7e>
    91fc:	00014693 	.word	0x00014693
    9200:	00014719 	.word	0x00014719

00009204 <att_read_rsp>:
{
    9204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    9208:	6806      	ldr	r6, [r0, #0]
{
    920a:	4604      	mov	r4, r0
    920c:	460f      	mov	r7, r1
    920e:	b088      	sub	sp, #32
	if (!bt_gatt_change_aware(conn, true)) {
    9210:	2101      	movs	r1, #1
    9212:	4630      	mov	r0, r6
{
    9214:	4690      	mov	r8, r2
    9216:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
    9218:	f00b fe99 	bl	14f4e <bt_gatt_change_aware>
    921c:	b3a0      	cbz	r0, 9288 <att_read_rsp+0x84>
	if (!handle) {
    921e:	b3ad      	cbz	r5, 928c <att_read_rsp+0x88>
	(void)memset(&data, 0, sizeof(data));
    9220:	2214      	movs	r2, #20
    9222:	2100      	movs	r1, #0
    9224:	a803      	add	r0, sp, #12
    9226:	f00a faaf 	bl	13788 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    922a:	2200      	movs	r2, #0
    922c:	4641      	mov	r1, r8
    922e:	4630      	mov	r0, r6
    9230:	f7ff fcd6 	bl	8be0 <bt_att_create_pdu>
    9234:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
    9236:	b358      	cbz	r0, 9290 <att_read_rsp+0x8c>
	data.offset = offset;
    9238:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    923c:	4629      	mov	r1, r5
	data.offset = offset;
    923e:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    9242:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    9244:	4628      	mov	r0, r5
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    9246:	f88d 301c 	strb.w	r3, [sp, #28]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    924a:	4a12      	ldr	r2, [pc, #72]	; (9294 <att_read_rsp+0x90>)
    924c:	ab03      	add	r3, sp, #12
	data.att = att;
    924e:	9403      	str	r4, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    9250:	f00b f8c4 	bl	143dc <bt_gatt_foreach_attr>
	if (data.err) {
    9254:	f89d 401c 	ldrb.w	r4, [sp, #28]
    9258:	b174      	cbz	r4, 9278 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    925a:	9805      	ldr	r0, [sp, #20]
    925c:	f004 f946 	bl	d4ec <net_buf_unref>
	if (!req) {
    9260:	462a      	mov	r2, r5
    9262:	4639      	mov	r1, r7
    9264:	4630      	mov	r0, r6
    9266:	f89d 301c 	ldrb.w	r3, [sp, #28]
    926a:	f7ff fd41 	bl	8cf0 <send_err_rsp.part.0>
		return 0;
    926e:	2400      	movs	r4, #0
}
    9270:	4620      	mov	r0, r4
    9272:	b008      	add	sp, #32
    9274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    9278:	2104      	movs	r1, #4
    927a:	4630      	mov	r0, r6
    927c:	4b06      	ldr	r3, [pc, #24]	; (9298 <att_read_rsp+0x94>)
    927e:	9a05      	ldr	r2, [sp, #20]
    9280:	9400      	str	r4, [sp, #0]
    9282:	f00a ff60 	bl	14146 <bt_l2cap_send_cb>
	return 0;
    9286:	e7f3      	b.n	9270 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    9288:	2412      	movs	r4, #18
    928a:	e7f1      	b.n	9270 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    928c:	2401      	movs	r4, #1
    928e:	e7ef      	b.n	9270 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    9290:	240e      	movs	r4, #14
    9292:	e7ed      	b.n	9270 <att_read_rsp+0x6c>
    9294:	00014719 	.word	0x00014719
    9298:	00014693 	.word	0x00014693

0000929c <att_read_type_req>:
{
    929c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u8_t uuid_len = buf->len - sizeof(*req);
    92a0:	7b0c      	ldrb	r4, [r1, #12]
{
    92a2:	4606      	mov	r6, r0
	u8_t uuid_len = buf->len - sizeof(*req);
    92a4:	3c04      	subs	r4, #4
    92a6:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    92a8:	2c02      	cmp	r4, #2
{
    92aa:	4608      	mov	r0, r1
    92ac:	b08f      	sub	sp, #60	; 0x3c
	if (uuid_len != 2 && uuid_len != 16) {
    92ae:	d001      	beq.n	92b4 <att_read_type_req+0x18>
    92b0:	2c10      	cmp	r4, #16
    92b2:	d152      	bne.n	935a <att_read_type_req+0xbe>
	req = net_buf_pull_mem(buf, sizeof(*req));
    92b4:	2104      	movs	r1, #4
    92b6:	3008      	adds	r0, #8
	struct bt_conn *conn = att->chan.chan.conn;
    92b8:	f8d6 9000 	ldr.w	r9, [r6]
	req = net_buf_pull_mem(buf, sizeof(*req));
    92bc:	f004 fa66 	bl	d78c <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    92c0:	f10d 080c 	add.w	r8, sp, #12
	start_handle = sys_le16_to_cpu(req->start_handle);
    92c4:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    92c6:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    92c8:	1d01      	adds	r1, r0, #4
    92ca:	4622      	mov	r2, r4
    92cc:	4640      	mov	r0, r8
    92ce:	f00a faf5 	bl	138bc <bt_uuid_create>
    92d2:	b188      	cbz	r0, 92f8 <att_read_type_req+0x5c>
	if (!start || !end) {
    92d4:	b19d      	cbz	r5, 92fe <att_read_type_req+0x62>
    92d6:	b18f      	cbz	r7, 92fc <att_read_type_req+0x60>
	if (start > end) {
    92d8:	42bd      	cmp	r5, r7
    92da:	d810      	bhi.n	92fe <att_read_type_req+0x62>
	struct bt_conn *conn = att->chan.chan.conn;
    92dc:	f8d6 9000 	ldr.w	r9, [r6]
	(void)memset(&data, 0, sizeof(data));
    92e0:	2218      	movs	r2, #24
    92e2:	2100      	movs	r1, #0
    92e4:	a808      	add	r0, sp, #32
    92e6:	f00a fa4f 	bl	13788 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    92ea:	2201      	movs	r2, #1
    92ec:	2109      	movs	r1, #9
    92ee:	4648      	mov	r0, r9
    92f0:	f7ff fc76 	bl	8be0 <bt_att_create_pdu>
    92f4:	900a      	str	r0, [sp, #40]	; 0x28
	if (!data.buf) {
    92f6:	b968      	cbnz	r0, 9314 <att_read_type_req+0x78>
		return BT_ATT_ERR_UNLIKELY;
    92f8:	240e      	movs	r4, #14
    92fa:	e007      	b.n	930c <att_read_type_req+0x70>
			*err = 0U;
    92fc:	463d      	mov	r5, r7
	if (!req) {
    92fe:	2301      	movs	r3, #1
    9300:	462a      	mov	r2, r5
    9302:	2108      	movs	r1, #8
    9304:	4648      	mov	r0, r9
    9306:	f7ff fcf3 	bl	8cf0 <send_err_rsp.part.0>
		return 0;
    930a:	2400      	movs	r4, #0
}
    930c:	4620      	mov	r0, r4
    930e:	b00f      	add	sp, #60	; 0x3c
    9310:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    9314:	2101      	movs	r1, #1
    9316:	3008      	adds	r0, #8
	data.uuid = uuid;
    9318:	e9cd 6808 	strd	r6, r8, [sp, #32]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    931c:	f004 fa58 	bl	d7d0 <net_buf_simple_add>
	data.rsp->len = 0U;
    9320:	2600      	movs	r6, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    9322:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    9324:	900b      	str	r0, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    9326:	4639      	mov	r1, r7
	data.rsp->len = 0U;
    9328:	7006      	strb	r6, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    932a:	4a0d      	ldr	r2, [pc, #52]	; (9360 <att_read_type_req+0xc4>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    932c:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    9330:	4628      	mov	r0, r5
    9332:	ab08      	add	r3, sp, #32
    9334:	f00b f852 	bl	143dc <bt_gatt_foreach_attr>
	if (data.err) {
    9338:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
    933c:	b12c      	cbz	r4, 934a <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    933e:	980a      	ldr	r0, [sp, #40]	; 0x28
    9340:	f004 f8d4 	bl	d4ec <net_buf_unref>
	if (!req) {
    9344:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    9348:	e7da      	b.n	9300 <att_read_type_req+0x64>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    934a:	2104      	movs	r1, #4
    934c:	4648      	mov	r0, r9
    934e:	4b05      	ldr	r3, [pc, #20]	; (9364 <att_read_type_req+0xc8>)
    9350:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9352:	9400      	str	r4, [sp, #0]
    9354:	f00a fef7 	bl	14146 <bt_l2cap_send_cb>
	return 0;
    9358:	e7d8      	b.n	930c <att_read_type_req+0x70>
		return BT_ATT_ERR_INVALID_PDU;
    935a:	2404      	movs	r4, #4
    935c:	e7d6      	b.n	930c <att_read_type_req+0x70>
    935e:	bf00      	nop
    9360:	00014559 	.word	0x00014559
    9364:	00014693 	.word	0x00014693

00009368 <att_find_type_req>:
{
    9368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    936c:	4688      	mov	r8, r1
	struct bt_conn *conn = att->chan.chan.conn;
    936e:	f8d0 9000 	ldr.w	r9, [r0]
{
    9372:	4607      	mov	r7, r0
	req = net_buf_pull_mem(buf, sizeof(*req));
    9374:	2106      	movs	r1, #6
{
    9376:	b089      	sub	sp, #36	; 0x24
	req = net_buf_pull_mem(buf, sizeof(*req));
    9378:	f108 0008 	add.w	r0, r8, #8
    937c:	f004 fa06 	bl	d78c <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    9380:	8806      	ldrh	r6, [r0, #0]
	if (!start || !end) {
    9382:	b316      	cbz	r6, 93ca <att_find_type_req+0x62>
	end_handle = sys_le16_to_cpu(req->end_handle);
    9384:	f8b0 a002 	ldrh.w	sl, [r0, #2]
	if (!start || !end) {
    9388:	f1ba 0f00 	cmp.w	sl, #0
    938c:	d01c      	beq.n	93c8 <att_find_type_req+0x60>
	if (start > end) {
    938e:	45b2      	cmp	sl, r6
    9390:	d31b      	bcc.n	93ca <att_find_type_req+0x62>
	type = sys_le16_to_cpu(req->type);
    9392:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    9394:	2400      	movs	r4, #0
    9396:	f8ad 300a 	strh.w	r3, [sp, #10]
    939a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    939e:	a903      	add	r1, sp, #12
    93a0:	a802      	add	r0, sp, #8
	value = buf->data;
    93a2:	f8d8 b008 	ldr.w	fp, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    93a6:	f88d 4008 	strb.w	r4, [sp, #8]
    93aa:	f88d 400c 	strb.w	r4, [sp, #12]
    93ae:	f8ad 300e 	strh.w	r3, [sp, #14]
    93b2:	f00a fa59 	bl	13868 <bt_uuid_cmp>
    93b6:	4605      	mov	r5, r0
    93b8:	b190      	cbz	r0, 93e0 <att_find_type_req+0x78>
	if (!req) {
    93ba:	230a      	movs	r3, #10
    93bc:	4632      	mov	r2, r6
    93be:	2106      	movs	r1, #6
    93c0:	4648      	mov	r0, r9
    93c2:	f7ff fc95 	bl	8cf0 <send_err_rsp.part.0>
		return 0;
    93c6:	e007      	b.n	93d8 <att_find_type_req+0x70>
			*err = 0U;
    93c8:	4656      	mov	r6, sl
	if (!req) {
    93ca:	2301      	movs	r3, #1
    93cc:	4632      	mov	r2, r6
    93ce:	2106      	movs	r1, #6
    93d0:	4648      	mov	r0, r9
    93d2:	f7ff fc8d 	bl	8cf0 <send_err_rsp.part.0>
		return 0;
    93d6:	2400      	movs	r4, #0
}
    93d8:	4620      	mov	r0, r4
    93da:	b009      	add	sp, #36	; 0x24
    93dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return att_find_type_rsp(att, start_handle, end_handle, value,
    93e0:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = att->chan.chan.conn;
    93e4:	f8d7 8000 	ldr.w	r8, [r7]
	(void)memset(&data, 0, sizeof(data));
    93e8:	4601      	mov	r1, r0
    93ea:	2214      	movs	r2, #20
    93ec:	a803      	add	r0, sp, #12
    93ee:	f00a f9cb 	bl	13788 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    93f2:	462a      	mov	r2, r5
    93f4:	2107      	movs	r1, #7
    93f6:	4640      	mov	r0, r8
    93f8:	f7ff fbf2 	bl	8be0 <bt_att_create_pdu>
    93fc:	9004      	str	r0, [sp, #16]
	if (!data.buf) {
    93fe:	b308      	cbz	r0, 9444 <att_find_type_req+0xdc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    9400:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    9402:	4651      	mov	r1, sl
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    9404:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    9408:	4630      	mov	r0, r6
    940a:	4a0f      	ldr	r2, [pc, #60]	; (9448 <att_find_type_req+0xe0>)
    940c:	ab03      	add	r3, sp, #12
	data.value_len = value_len;
    940e:	f88d 401c 	strb.w	r4, [sp, #28]
	data.value = value;
    9412:	e9cd 5b05 	strd	r5, fp, [sp, #20]
	data.att = att;
    9416:	9703      	str	r7, [sp, #12]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    9418:	f00a ffe0 	bl	143dc <bt_gatt_foreach_attr>
	if (data.err) {
    941c:	f89d 401d 	ldrb.w	r4, [sp, #29]
    9420:	b144      	cbz	r4, 9434 <att_find_type_req+0xcc>
		net_buf_unref(data.buf);
    9422:	9804      	ldr	r0, [sp, #16]
    9424:	f004 f862 	bl	d4ec <net_buf_unref>
	if (!req) {
    9428:	4632      	mov	r2, r6
    942a:	2106      	movs	r1, #6
    942c:	4640      	mov	r0, r8
    942e:	f89d 301d 	ldrb.w	r3, [sp, #29]
    9432:	e7ce      	b.n	93d2 <att_find_type_req+0x6a>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    9434:	2104      	movs	r1, #4
    9436:	4640      	mov	r0, r8
    9438:	4b04      	ldr	r3, [pc, #16]	; (944c <att_find_type_req+0xe4>)
    943a:	9a04      	ldr	r2, [sp, #16]
    943c:	9400      	str	r4, [sp, #0]
    943e:	f00a fe82 	bl	14146 <bt_l2cap_send_cb>
	return 0;
    9442:	e7c9      	b.n	93d8 <att_find_type_req+0x70>
		return BT_ATT_ERR_UNLIKELY;
    9444:	240e      	movs	r4, #14
	return att_find_type_rsp(att, start_handle, end_handle, value,
    9446:	e7c7      	b.n	93d8 <att_find_type_req+0x70>
    9448:	000087f9 	.word	0x000087f9
    944c:	00014693 	.word	0x00014693

00009450 <att_find_info_req>:
{
    9450:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    9452:	688b      	ldr	r3, [r1, #8]
{
    9454:	4607      	mov	r7, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
    9456:	881d      	ldrh	r5, [r3, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    9458:	6806      	ldr	r6, [r0, #0]
{
    945a:	b087      	sub	sp, #28
	if (!start || !end) {
    945c:	b195      	cbz	r5, 9484 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    945e:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    9460:	b17c      	cbz	r4, 9482 <att_find_info_req+0x32>
	if (start > end) {
    9462:	42ac      	cmp	r4, r5
    9464:	d30e      	bcc.n	9484 <att_find_info_req+0x34>
	(void)memset(&data, 0, sizeof(data));
    9466:	2210      	movs	r2, #16
    9468:	2100      	movs	r1, #0
    946a:	a802      	add	r0, sp, #8
    946c:	f00a f98c 	bl	13788 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    9470:	2200      	movs	r2, #0
    9472:	2105      	movs	r1, #5
    9474:	4630      	mov	r0, r6
    9476:	f7ff fbb3 	bl	8be0 <bt_att_create_pdu>
    947a:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    947c:	b958      	cbnz	r0, 9496 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    947e:	200e      	movs	r0, #14
	return att_find_info_rsp(att, start_handle, end_handle);
    9480:	e007      	b.n	9492 <att_find_info_req+0x42>
			*err = 0U;
    9482:	4625      	mov	r5, r4
	if (!req) {
    9484:	2301      	movs	r3, #1
    9486:	462a      	mov	r2, r5
    9488:	2104      	movs	r1, #4
    948a:	4630      	mov	r0, r6
    948c:	f7ff fc30 	bl	8cf0 <send_err_rsp.part.0>
		return 0;
    9490:	2000      	movs	r0, #0
}
    9492:	b007      	add	sp, #28
    9494:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    9496:	4621      	mov	r1, r4
    9498:	4628      	mov	r0, r5
    949a:	4a0a      	ldr	r2, [pc, #40]	; (94c4 <att_find_info_req+0x74>)
    949c:	ab02      	add	r3, sp, #8
	data.att = att;
    949e:	9702      	str	r7, [sp, #8]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    94a0:	f00a ff9c 	bl	143dc <bt_gatt_foreach_attr>
	if (!data.rsp) {
    94a4:	9c04      	ldr	r4, [sp, #16]
    94a6:	b924      	cbnz	r4, 94b2 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    94a8:	9803      	ldr	r0, [sp, #12]
    94aa:	f004 f81f 	bl	d4ec <net_buf_unref>
	if (!req) {
    94ae:	230a      	movs	r3, #10
    94b0:	e7e9      	b.n	9486 <att_find_info_req+0x36>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    94b2:	2400      	movs	r4, #0
    94b4:	2104      	movs	r1, #4
    94b6:	4630      	mov	r0, r6
    94b8:	4b03      	ldr	r3, [pc, #12]	; (94c8 <att_find_info_req+0x78>)
    94ba:	9a03      	ldr	r2, [sp, #12]
    94bc:	9400      	str	r4, [sp, #0]
    94be:	f00a fe42 	bl	14146 <bt_l2cap_send_cb>
	return 0;
    94c2:	e7e5      	b.n	9490 <att_find_info_req+0x40>
    94c4:	000143f3 	.word	0x000143f3
    94c8:	00014693 	.word	0x00014693

000094cc <bt_att_req_alloc>:
	/* tx and rx MTU shall be symmetric */
	return att->chan.tx.mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    94cc:	b513      	push	{r0, r1, r4, lr}
	struct bt_att_req *req = NULL;
    94ce:	2400      	movs	r4, #0
{
    94d0:	4602      	mov	r2, r0
    94d2:	460b      	mov	r3, r1

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    94d4:	4807      	ldr	r0, [pc, #28]	; (94f4 <bt_att_req_alloc+0x28>)
    94d6:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
    94d8:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    94da:	f005 fe45 	bl	f168 <k_mem_slab_alloc>
    94de:	4601      	mov	r1, r0
    94e0:	b930      	cbnz	r0, 94f0 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
    94e2:	221c      	movs	r2, #28
    94e4:	9801      	ldr	r0, [sp, #4]
    94e6:	f00a f94f 	bl	13788 <memset>

	return req;
    94ea:	9801      	ldr	r0, [sp, #4]
}
    94ec:	b002      	add	sp, #8
    94ee:	bd10      	pop	{r4, pc}
		return NULL;
    94f0:	4620      	mov	r0, r4
    94f2:	e7fb      	b.n	94ec <bt_att_req_alloc+0x20>
    94f4:	200003dc 	.word	0x200003dc

000094f8 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    94f8:	b507      	push	{r0, r1, r2, lr}
    94fa:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
    94fc:	a901      	add	r1, sp, #4
    94fe:	4803      	ldr	r0, [pc, #12]	; (950c <bt_att_req_free+0x14>)
    9500:	f005 fe9e 	bl	f240 <k_mem_slab_free>
}
    9504:	b003      	add	sp, #12
    9506:	f85d fb04 	ldr.w	pc, [sp], #4
    950a:	bf00      	nop
    950c:	200003dc 	.word	0x200003dc

00009510 <att_handle_rsp>:
{
    9510:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    9514:	4604      	mov	r4, r0
	k_delayed_work_cancel(&att->timeout_work);
    9516:	30c0      	adds	r0, #192	; 0xc0
{
    9518:	460e      	mov	r6, r1
    951a:	4617      	mov	r7, r2
    951c:	4698      	mov	r8, r3
	k_delayed_work_cancel(&att->timeout_work);
    951e:	f007 fe5d 	bl	111dc <k_delayed_work_cancel>
	if (!att->req) {
    9522:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
    9526:	f04f 0a00 	mov.w	sl, #0
    952a:	b9f5      	cbnz	r5, 956a <att_handle_rsp+0x5a>
		BT_WARN("No pending ATT request");
    952c:	2157      	movs	r1, #87	; 0x57
    952e:	481d      	ldr	r0, [pc, #116]	; (95a4 <att_handle_rsp+0x94>)
    9530:	f008 fdea 	bl	12108 <printk>
Z_GENLIST_IS_EMPTY(slist)
    9534:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
Z_GENLIST_GET(slist, snode)
    9538:	b159      	cbz	r1, 9552 <att_handle_rsp+0x42>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    953a:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
    953e:	680b      	ldr	r3, [r1, #0]
    9540:	4291      	cmp	r1, r2
	list->head = node;
    9542:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    9546:	d101      	bne.n	954c <att_handle_rsp+0x3c>
	list->tail = node;
    9548:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
	att_send_req(att, ATT_REQ(node));
    954c:	4620      	mov	r0, r4
    954e:	f7ff fa61 	bl	8a14 <att_send_req>
	if (func) {
    9552:	b135      	cbz	r5, 9562 <att_handle_rsp+0x52>
		func(att->chan.chan.conn, err, pdu, len, params);
    9554:	463b      	mov	r3, r7
    9556:	4632      	mov	r2, r6
    9558:	4641      	mov	r1, r8
    955a:	6820      	ldr	r0, [r4, #0]
    955c:	f8cd 9000 	str.w	r9, [sp]
    9560:	47a8      	blx	r5
}
    9562:	2000      	movs	r0, #0
    9564:	b002      	add	sp, #8
    9566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (att->req == &cancel) {
    956a:	4b0f      	ldr	r3, [pc, #60]	; (95a8 <att_handle_rsp+0x98>)
    956c:	429d      	cmp	r5, r3
    956e:	d103      	bne.n	9578 <att_handle_rsp+0x68>
	bt_att_func_t func = NULL;
    9570:	4655      	mov	r5, sl
		att->req = NULL;
    9572:	f8c4 a0b4 	str.w	sl, [r4, #180]	; 0xb4
		goto process;
    9576:	e7dd      	b.n	9534 <att_handle_rsp+0x24>
	if (att->req->buf) {
    9578:	6928      	ldr	r0, [r5, #16]
    957a:	b128      	cbz	r0, 9588 <att_handle_rsp+0x78>
		net_buf_unref(att->req->buf);
    957c:	f003 ffb6 	bl	d4ec <net_buf_unref>
		att->req->buf = NULL;
    9580:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    9584:	f8c3 a010 	str.w	sl, [r3, #16]
	att->req->func = NULL;
    9588:	f04f 0a00 	mov.w	sl, #0
	func = att->req->func;
    958c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    9590:	6845      	ldr	r5, [r0, #4]
	att->req->func = NULL;
    9592:	f8c0 a004 	str.w	sl, [r0, #4]
	params = att->req->user_data;
    9596:	f8d0 9018 	ldr.w	r9, [r0, #24]
	att_req_destroy(att->req);
    959a:	f00b f944 	bl	14826 <att_req_destroy>
	att->req = NULL;
    959e:	f8c4 a0b4 	str.w	sl, [r4, #180]	; 0xb4
    95a2:	e7c7      	b.n	9534 <att_handle_rsp+0x24>
    95a4:	0001a6ef 	.word	0x0001a6ef
    95a8:	20000f30 	.word	0x20000f30

000095ac <att_error_rsp>:
	if (!att->req || att->req == &cancel) {
    95ac:	f8d0 20b4 	ldr.w	r2, [r0, #180]	; 0xb4
{
    95b0:	b570      	push	{r4, r5, r6, lr}
    95b2:	4604      	mov	r4, r0
	if (!att->req || att->req == &cancel) {
    95b4:	b352      	cbz	r2, 960c <att_error_rsp+0x60>
    95b6:	4b1a      	ldr	r3, [pc, #104]	; (9620 <att_error_rsp+0x74>)
    95b8:	429a      	cmp	r2, r3
    95ba:	d027      	beq.n	960c <att_error_rsp+0x60>
	if (att->req->buf) {
    95bc:	6913      	ldr	r3, [r2, #16]
	rsp = (void *)buf->data;
    95be:	6888      	ldr	r0, [r1, #8]
	if (att->req->buf) {
    95c0:	b12b      	cbz	r3, 95ce <att_error_rsp+0x22>
	buf->data = buf->__buf + state->offset;
    95c2:	8995      	ldrh	r5, [r2, #12]
    95c4:	6919      	ldr	r1, [r3, #16]
    95c6:	4429      	add	r1, r5
    95c8:	6099      	str	r1, [r3, #8]
	buf->len = state->len;
    95ca:	89d1      	ldrh	r1, [r2, #14]
    95cc:	8199      	strh	r1, [r3, #12]
	if (att->req->retrying) {
    95ce:	7d13      	ldrb	r3, [r2, #20]
	err = rsp->error;
    95d0:	78c5      	ldrb	r5, [r0, #3]
	if (att->req->retrying) {
    95d2:	b9e3      	cbnz	r3, 960e <att_error_rsp+0x62>
	switch (err) {
    95d4:	2d05      	cmp	r5, #5
	if (!att_change_security(att->chan.chan.conn, err)) {
    95d6:	6820      	ldr	r0, [r4, #0]
	switch (err) {
    95d8:	d006      	beq.n	95e8 <att_error_rsp+0x3c>
    95da:	2d0f      	cmp	r5, #15
    95dc:	d117      	bne.n	960e <att_error_rsp+0x62>
		if (conn->sec_level >= BT_SECURITY_L2)
    95de:	7a43      	ldrb	r3, [r0, #9]
    95e0:	2b01      	cmp	r3, #1
    95e2:	d814      	bhi.n	960e <att_error_rsp+0x62>
		sec = BT_SECURITY_L2;
    95e4:	2102      	movs	r1, #2
    95e6:	e007      	b.n	95f8 <att_error_rsp+0x4c>
		if (conn->sec_level < BT_SECURITY_L2) {
    95e8:	7a43      	ldrb	r3, [r0, #9]
    95ea:	2b01      	cmp	r3, #1
    95ec:	d9fa      	bls.n	95e4 <att_error_rsp+0x38>
		} else if (conn->sec_level < BT_SECURITY_L3) {
    95ee:	2b02      	cmp	r3, #2
    95f0:	d00a      	beq.n	9608 <att_error_rsp+0x5c>
		} else if (conn->sec_level < BT_SECURITY_L4) {
    95f2:	2b03      	cmp	r3, #3
    95f4:	d10b      	bne.n	960e <att_error_rsp+0x62>
			sec = BT_SECURITY_L4;
    95f6:	2104      	movs	r1, #4
	return bt_conn_set_security(conn, sec);
    95f8:	f00a fbe4 	bl	13dc4 <bt_conn_set_security>
	if (!att_change_security(att->chan.chan.conn, err)) {
    95fc:	b938      	cbnz	r0, 960e <att_error_rsp+0x62>
		att->req->retrying = true;
    95fe:	2201      	movs	r2, #1
    9600:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    9604:	751a      	strb	r2, [r3, #20]
}
    9606:	bd70      	pop	{r4, r5, r6, pc}
			sec = BT_SECURITY_L3;
    9608:	2103      	movs	r1, #3
    960a:	e7f5      	b.n	95f8 <att_error_rsp+0x4c>
		err = BT_ATT_ERR_UNLIKELY;
    960c:	250e      	movs	r5, #14
	return att_handle_rsp(att, NULL, 0, err);
    960e:	2200      	movs	r2, #0
    9610:	462b      	mov	r3, r5
    9612:	4620      	mov	r0, r4
}
    9614:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(att, NULL, 0, err);
    9618:	4611      	mov	r1, r2
    961a:	f7ff bf79 	b.w	9510 <att_handle_rsp>
    961e:	bf00      	nop
    9620:	20000f30 	.word	0x20000f30

00009624 <bt_att_encrypt_change>:
{
    9624:	b573      	push	{r0, r1, r4, r5, r6, lr}
    9626:	4604      	mov	r4, r0
	if (hci_status) {
    9628:	b139      	cbz	r1, 963a <bt_att_encrypt_change+0x16>
		att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    962a:	2200      	movs	r2, #0
    962c:	2305      	movs	r3, #5
    962e:	4611      	mov	r1, r2
}
    9630:	b002      	add	sp, #8
    9632:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    9636:	f7ff bf6b 	b.w	9510 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
    963a:	6805      	ldr	r5, [r0, #0]
	bt_gatt_encrypt_change(conn);
    963c:	4628      	mov	r0, r5
    963e:	f002 f869 	bl	b714 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
    9642:	7a6b      	ldrb	r3, [r5, #9]
    9644:	2b01      	cmp	r3, #1
    9646:	d022      	beq.n	968e <bt_att_encrypt_change+0x6a>
	if (!att->req || !att->req->retrying) {
    9648:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    964c:	b1fb      	cbz	r3, 968e <bt_att_encrypt_change+0x6a>
    964e:	7d1b      	ldrb	r3, [r3, #20]
    9650:	b1eb      	cbz	r3, 968e <bt_att_encrypt_change+0x6a>
	k_sem_take(&att->tx_sem, K_FOREVER);
    9652:	f104 06e0 	add.w	r6, r4, #224	; 0xe0
    9656:	f04f 33ff 	mov.w	r3, #4294967295
    965a:	f04f 32ff 	mov.w	r2, #4294967295
    965e:	4630      	mov	r0, r6
    9660:	f007 fb12 	bl	10c88 <z_impl_k_sem_take>
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    9664:	6823      	ldr	r3, [r4, #0]
    9666:	7b5b      	ldrb	r3, [r3, #13]
    9668:	2b06      	cmp	r3, #6
    966a:	d012      	beq.n	9692 <bt_att_encrypt_change+0x6e>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, att->req->buf,
    966c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    9670:	2600      	movs	r6, #0
    9672:	6919      	ldr	r1, [r3, #16]
    9674:	6888      	ldr	r0, [r1, #8]
    9676:	f7ff f92f 	bl	88d8 <att_cb.isra.0>
    967a:	9600      	str	r6, [sp, #0]
    967c:	4603      	mov	r3, r0
    967e:	460a      	mov	r2, r1
    9680:	4628      	mov	r0, r5
    9682:	2104      	movs	r1, #4
    9684:	f00a fd5f 	bl	14146 <bt_l2cap_send_cb>
	att->req->buf = NULL;
    9688:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    968c:	611e      	str	r6, [r3, #16]
}
    968e:	b002      	add	sp, #8
    9690:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9692:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
    9696:	e8d3 3faf 	lda	r3, [r3]
	if (!att_is_connected(att)) {
    969a:	075b      	lsls	r3, r3, #29
    969c:	d5e6      	bpl.n	966c <bt_att_encrypt_change+0x48>
		BT_WARN("Disconnected");
    969e:	2157      	movs	r1, #87	; 0x57
    96a0:	4804      	ldr	r0, [pc, #16]	; (96b4 <bt_att_encrypt_change+0x90>)
    96a2:	f008 fd31 	bl	12108 <printk>
	z_impl_k_sem_give(sem);
    96a6:	4630      	mov	r0, r6
}
    96a8:	b002      	add	sp, #8
    96aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    96ae:	f007 baa7 	b.w	10c00 <z_impl_k_sem_give>
    96b2:	bf00      	nop
    96b4:	0001a70b 	.word	0x0001a70b

000096b8 <att_timeout>:
{
    96b8:	b510      	push	{r4, lr}
    96ba:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    96bc:	2145      	movs	r1, #69	; 0x45
    96be:	4807      	ldr	r0, [pc, #28]	; (96dc <att_timeout+0x24>)
    96c0:	f008 fd22 	bl	12108 <printk>
	att_reset(att);
    96c4:	f1a4 00c0 	sub.w	r0, r4, #192	; 0xc0
    96c8:	f00b f8ed 	bl	148a6 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    96cc:	f854 0cc0 	ldr.w	r0, [r4, #-192]
    96d0:	f002 f892 	bl	b7f8 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    96d4:	2300      	movs	r3, #0
    96d6:	f844 3cc0 	str.w	r3, [r4, #-192]
}
    96da:	bd10      	pop	{r4, pc}
    96dc:	0001a71d 	.word	0x0001a71d

000096e0 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
    96e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    96e4:	460c      	mov	r4, r1
    96e6:	4616      	mov	r6, r2
    96e8:	4698      	mov	r8, r3
	struct bt_att *att;
	int err;

	__ASSERT_NO_MSG(conn);
    96ea:	4607      	mov	r7, r0
    96ec:	b958      	cbnz	r0, 9706 <bt_att_send+0x26>
    96ee:	4922      	ldr	r1, [pc, #136]	; (9778 <bt_att_send+0x98>)
    96f0:	4822      	ldr	r0, [pc, #136]	; (977c <bt_att_send+0x9c>)
    96f2:	f640 03f9 	movw	r3, #2297	; 0x8f9
    96f6:	4a22      	ldr	r2, [pc, #136]	; (9780 <bt_att_send+0xa0>)
    96f8:	f008 fd06 	bl	12108 <printk>
    96fc:	f640 01f9 	movw	r1, #2297	; 0x8f9
    9700:	481f      	ldr	r0, [pc, #124]	; (9780 <bt_att_send+0xa0>)
    9702:	f008 ff97 	bl	12634 <assert_post_action>
	__ASSERT_NO_MSG(buf);
    9706:	b95c      	cbnz	r4, 9720 <bt_att_send+0x40>
    9708:	491e      	ldr	r1, [pc, #120]	; (9784 <bt_att_send+0xa4>)
    970a:	481c      	ldr	r0, [pc, #112]	; (977c <bt_att_send+0x9c>)
    970c:	f640 03fa 	movw	r3, #2298	; 0x8fa
    9710:	4a1b      	ldr	r2, [pc, #108]	; (9780 <bt_att_send+0xa0>)
    9712:	f008 fcf9 	bl	12108 <printk>
    9716:	f640 01fa 	movw	r1, #2298	; 0x8fa
    971a:	4819      	ldr	r0, [pc, #100]	; (9780 <bt_att_send+0xa0>)
    971c:	f008 ff8a 	bl	12634 <assert_post_action>

	att = att_chan_get(conn);
    9720:	4638      	mov	r0, r7
    9722:	f7ff f9fb 	bl	8b1c <att_chan_get>
	if (!att) {
    9726:	4605      	mov	r5, r0
    9728:	b938      	cbnz	r0, 973a <bt_att_send+0x5a>
		net_buf_unref(buf);
    972a:	4620      	mov	r0, r4
    972c:	f003 fede 	bl	d4ec <net_buf_unref>
		return -ENOTCONN;
    9730:	f06f 0438 	mvn.w	r4, #56	; 0x38
		}
		return err;
	}

	return 0;
}
    9734:	4620      	mov	r0, r4
    9736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!cb) {
    973a:	b96e      	cbnz	r6, 9758 <bt_att_send+0x78>
	return z_impl_k_sem_take(sem, timeout);
    973c:	2200      	movs	r2, #0
    973e:	2300      	movs	r3, #0
    9740:	30e0      	adds	r0, #224	; 0xe0
    9742:	f007 faa1 	bl	10c88 <z_impl_k_sem_take>
		if (k_sem_take(&att->tx_sem, K_NO_WAIT) < 0) {
    9746:	2800      	cmp	r0, #0
    9748:	da06      	bge.n	9758 <bt_att_send+0x78>
			k_fifo_put(&att->tx_queue, buf);
    974a:	4621      	mov	r1, r4
    974c:	f105 00f8 	add.w	r0, r5, #248	; 0xf8
    9750:	f00d f81b 	bl	1678a <k_queue_append>
			return 0;
    9754:	4634      	mov	r4, r6
    9756:	e7ed      	b.n	9734 <bt_att_send+0x54>
	err = att_send(conn, buf, cb, user_data);
    9758:	4621      	mov	r1, r4
    975a:	4643      	mov	r3, r8
    975c:	4632      	mov	r2, r6
    975e:	4638      	mov	r0, r7
    9760:	f7ff f8cc 	bl	88fc <att_send>
	if (err) {
    9764:	4604      	mov	r4, r0
    9766:	2800      	cmp	r0, #0
    9768:	d0e4      	beq.n	9734 <bt_att_send+0x54>
		if (!cb) {
    976a:	2e00      	cmp	r6, #0
    976c:	d1e2      	bne.n	9734 <bt_att_send+0x54>
	z_impl_k_sem_give(sem);
    976e:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
    9772:	f007 fa45 	bl	10c00 <z_impl_k_sem_give>
}
    9776:	e7dd      	b.n	9734 <bt_att_send+0x54>
    9778:	0001a029 	.word	0x0001a029
    977c:	00017d82 	.word	0x00017d82
    9780:	0001a538 	.word	0x0001a538
    9784:	0001b1ca 	.word	0x0001b1ca

00009788 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
    9788:	b538      	push	{r3, r4, r5, lr}
    978a:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
    978c:	4605      	mov	r5, r0
    978e:	b958      	cbnz	r0, 97a8 <bt_att_req_send+0x20>
    9790:	491c      	ldr	r1, [pc, #112]	; (9804 <bt_att_req_send+0x7c>)
    9792:	481d      	ldr	r0, [pc, #116]	; (9808 <bt_att_req_send+0x80>)
    9794:	f640 131c 	movw	r3, #2332	; 0x91c
    9798:	4a1c      	ldr	r2, [pc, #112]	; (980c <bt_att_req_send+0x84>)
    979a:	f008 fcb5 	bl	12108 <printk>
    979e:	f640 111c 	movw	r1, #2332	; 0x91c
    97a2:	481a      	ldr	r0, [pc, #104]	; (980c <bt_att_req_send+0x84>)
    97a4:	f008 ff46 	bl	12634 <assert_post_action>
	__ASSERT_NO_MSG(req);
    97a8:	b95c      	cbnz	r4, 97c2 <bt_att_req_send+0x3a>
    97aa:	4919      	ldr	r1, [pc, #100]	; (9810 <bt_att_req_send+0x88>)
    97ac:	4816      	ldr	r0, [pc, #88]	; (9808 <bt_att_req_send+0x80>)
    97ae:	f640 131d 	movw	r3, #2333	; 0x91d
    97b2:	4a16      	ldr	r2, [pc, #88]	; (980c <bt_att_req_send+0x84>)
    97b4:	f008 fca8 	bl	12108 <printk>
    97b8:	f640 111d 	movw	r1, #2333	; 0x91d
    97bc:	4813      	ldr	r0, [pc, #76]	; (980c <bt_att_req_send+0x84>)
    97be:	f008 ff39 	bl	12634 <assert_post_action>

	att = att_chan_get(conn);
    97c2:	4628      	mov	r0, r5
    97c4:	f7ff f9aa 	bl	8b1c <att_chan_get>
	if (!att) {
    97c8:	4605      	mov	r5, r0
    97ca:	b930      	cbnz	r0, 97da <bt_att_req_send+0x52>
		net_buf_unref(req->buf);
    97cc:	6920      	ldr	r0, [r4, #16]
    97ce:	f003 fe8d 	bl	d4ec <net_buf_unref>
		req->buf = NULL;
		return -ENOTCONN;
    97d2:	f06f 0038 	mvn.w	r0, #56	; 0x38
		req->buf = NULL;
    97d6:	6125      	str	r5, [r4, #16]
		sys_slist_append(&att->reqs, &req->node);
		return 0;
	}

	return att_send_req(att, req);
}
    97d8:	bd38      	pop	{r3, r4, r5, pc}
	if (att->req) {
    97da:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
    97de:	b163      	cbz	r3, 97fa <bt_att_req_send+0x72>
	parent->next = child;
    97e0:	2000      	movs	r0, #0
    97e2:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
    97e4:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
    97e8:	b91b      	cbnz	r3, 97f2 <bt_att_req_send+0x6a>
		return 0;
    97ea:	4618      	mov	r0, r3
	list->head = node;
    97ec:	e9c5 442e 	strd	r4, r4, [r5, #184]	; 0xb8
}
    97f0:	e7f2      	b.n	97d8 <bt_att_req_send+0x50>
	parent->next = child;
    97f2:	601c      	str	r4, [r3, #0]
	list->tail = node;
    97f4:	f8c5 40bc 	str.w	r4, [r5, #188]	; 0xbc
}
    97f8:	e7ee      	b.n	97d8 <bt_att_req_send+0x50>
	return att_send_req(att, req);
    97fa:	4621      	mov	r1, r4
}
    97fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return att_send_req(att, req);
    9800:	f7ff b908 	b.w	8a14 <att_send_req>
    9804:	0001a029 	.word	0x0001a029
    9808:	00017d82 	.word	0x00017d82
    980c:	0001a538 	.word	0x0001a538
    9810:	0001a5bd 	.word	0x0001a5bd

00009814 <bt_att_req_cancel>:

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
    9814:	b510      	push	{r4, lr}
    9816:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("req %p", req);

	if (!conn || !req) {
    9818:	b370      	cbz	r0, 9878 <bt_att_req_cancel+0x64>
    981a:	b369      	cbz	r1, 9878 <bt_att_req_cancel+0x64>
		return;
	}

	att = att_chan_get(conn);
    981c:	f7ff f97e 	bl	8b1c <att_chan_get>
	if (!att) {
    9820:	b350      	cbz	r0, 9878 <bt_att_req_cancel+0x64>
		return;
	}

	/* Check if request is outstanding */
	if (att->req == req) {
    9822:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
    9826:	429c      	cmp	r4, r3
    9828:	d107      	bne.n	983a <bt_att_req_cancel+0x26>
		att->req = &cancel;
    982a:	4b14      	ldr	r3, [pc, #80]	; (987c <bt_att_req_cancel+0x68>)
    982c:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
	} else {
		/* Remove request from the list */
		sys_slist_find_and_remove(&att->reqs, &req->node);
	}

	att_req_destroy(req);
    9830:	4620      	mov	r0, r4
}
    9832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	att_req_destroy(req);
    9836:	f00a bff6 	b.w	14826 <att_req_destroy>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    983a:	2200      	movs	r2, #0
    983c:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
    9840:	2b00      	cmp	r3, #0
    9842:	d0f5      	beq.n	9830 <bt_att_req_cancel+0x1c>
    9844:	429c      	cmp	r4, r3
    9846:	d114      	bne.n	9872 <bt_att_req_cancel+0x5e>
Z_GENLIST_REMOVE(slist, snode)
    9848:	6823      	ldr	r3, [r4, #0]
    984a:	b952      	cbnz	r2, 9862 <bt_att_req_cancel+0x4e>
    984c:	f8d0 20bc 	ldr.w	r2, [r0, #188]	; 0xbc
	list->head = node;
    9850:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
Z_GENLIST_REMOVE(slist, snode)
    9854:	4294      	cmp	r4, r2
    9856:	d101      	bne.n	985c <bt_att_req_cancel+0x48>
	list->tail = node;
    9858:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	parent->next = child;
    985c:	2300      	movs	r3, #0
    985e:	6023      	str	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    9860:	e7e6      	b.n	9830 <bt_att_req_cancel+0x1c>
	parent->next = child;
    9862:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    9864:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
    9868:	429c      	cmp	r4, r3
	list->tail = node;
    986a:	bf08      	it	eq
    986c:	f8c0 20bc 	streq.w	r2, [r0, #188]	; 0xbc
}
    9870:	e7f4      	b.n	985c <bt_att_req_cancel+0x48>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    9872:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9874:	681b      	ldr	r3, [r3, #0]
    9876:	e7e3      	b.n	9840 <bt_att_req_cancel+0x2c>
}
    9878:	bd10      	pop	{r4, pc}
    987a:	bf00      	nop
    987c:	20000f30 	.word	0x20000f30

00009880 <db_hash_set>:

static u8_t stored_hash[16];

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
    9880:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
    9882:	4618      	mov	r0, r3
{
    9884:	4614      	mov	r4, r2
	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
    9886:	4907      	ldr	r1, [pc, #28]	; (98a4 <db_hash_set+0x24>)
    9888:	2210      	movs	r2, #16
    988a:	47a0      	blx	r4
	if (len < 0) {
    988c:	1e04      	subs	r4, r0, #0
    988e:	da06      	bge.n	989e <db_hash_set+0x1e>
		BT_ERR("Failed to decode value (err %zd)", len);
    9890:	4622      	mov	r2, r4
    9892:	2145      	movs	r1, #69	; 0x45
    9894:	4804      	ldr	r0, [pc, #16]	; (98a8 <db_hash_set+0x28>)
    9896:	f008 fc37 	bl	12108 <printk>
	}

	BT_HEXDUMP_DBG(stored_hash, sizeof(stored_hash), "Stored Hash: ");

	return 0;
}
    989a:	4620      	mov	r0, r4
    989c:	bd10      	pop	{r4, pc}
	return 0;
    989e:	2400      	movs	r4, #0
    98a0:	e7fb      	b.n	989a <db_hash_set+0x1a>
    98a2:	bf00      	nop
    98a4:	20001f79 	.word	0x20001f79
    98a8:	0001a735 	.word	0x0001a735

000098ac <db_hash_store>:
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
    98ac:	2210      	movs	r2, #16
{
    98ae:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
    98b0:	4906      	ldr	r1, [pc, #24]	; (98cc <db_hash_store+0x20>)
    98b2:	4807      	ldr	r0, [pc, #28]	; (98d0 <db_hash_store+0x24>)
    98b4:	f7f8 f9e6 	bl	1c84 <settings_save_one>
	if (err) {
    98b8:	4602      	mov	r2, r0
    98ba:	b128      	cbz	r0, 98c8 <db_hash_store+0x1c>
}
    98bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
    98c0:	2145      	movs	r1, #69	; 0x45
    98c2:	4804      	ldr	r0, [pc, #16]	; (98d4 <db_hash_store+0x28>)
    98c4:	f008 bc20 	b.w	12108 <printk>
}
    98c8:	bd08      	pop	{r3, pc}
    98ca:	bf00      	nop
    98cc:	20001f69 	.word	0x20001f69
    98d0:	0001a75b 	.word	0x0001a75b
    98d4:	0001a763 	.word	0x0001a763

000098d8 <sc_store>:
{
    98d8:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
    98da:	4605      	mov	r5, r0
    98dc:	f815 2b01 	ldrb.w	r2, [r5], #1
{
    98e0:	4604      	mov	r4, r0
    98e2:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
    98e4:	b1ca      	cbz	r2, 991a <sc_store+0x42>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
    98e6:	ae02      	add	r6, sp, #8
    98e8:	2104      	movs	r1, #4
    98ea:	4630      	mov	r0, r6
    98ec:	f008 fb76 	bl	11fdc <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
    98f0:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
    98f2:	462b      	mov	r3, r5
    98f4:	2124      	movs	r1, #36	; 0x24
    98f6:	4a0a      	ldr	r2, [pc, #40]	; (9920 <sc_store+0x48>)
    98f8:	a803      	add	r0, sp, #12
    98fa:	f7fb f843 	bl	4984 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
    98fe:	2204      	movs	r2, #4
    9900:	f104 0108 	add.w	r1, r4, #8
    9904:	a803      	add	r0, sp, #12
    9906:	f7f8 f9bd 	bl	1c84 <settings_save_one>
	if (err) {
    990a:	4602      	mov	r2, r0
    990c:	b118      	cbz	r0, 9916 <sc_store+0x3e>
		BT_ERR("failed to store SC (err %d)", err);
    990e:	2145      	movs	r1, #69	; 0x45
    9910:	4804      	ldr	r0, [pc, #16]	; (9924 <sc_store+0x4c>)
    9912:	f008 fbf9 	bl	12108 <printk>
}
    9916:	b00c      	add	sp, #48	; 0x30
    9918:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
    991a:	9200      	str	r2, [sp, #0]
    991c:	e7e9      	b.n	98f2 <sc_store+0x1a>
    991e:	bf00      	nop
    9920:	0001ac3f 	.word	0x0001ac3f
    9924:	0001a78e 	.word	0x0001a78e

00009928 <find_static_attr>:
{
    9928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    992c:	4f18      	ldr	r7, [pc, #96]	; (9990 <find_static_attr+0x68>)
{
    992e:	4605      	mov	r5, r0
	u16_t handle = 1;
    9930:	2601      	movs	r6, #1
    9932:	46b8      	mov	r8, r7
    9934:	4c17      	ldr	r4, [pc, #92]	; (9994 <find_static_attr+0x6c>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    9936:	f8df 906c 	ldr.w	r9, [pc, #108]	; 99a4 <find_static_attr+0x7c>
    993a:	f1a4 0a08 	sub.w	sl, r4, #8
    993e:	45ba      	cmp	sl, r7
    9940:	d90e      	bls.n	9960 <find_static_attr+0x38>
    9942:	4915      	ldr	r1, [pc, #84]	; (9998 <find_static_attr+0x70>)
    9944:	f240 4399 	movw	r3, #1177	; 0x499
    9948:	464a      	mov	r2, r9
    994a:	4814      	ldr	r0, [pc, #80]	; (999c <find_static_attr+0x74>)
    994c:	f008 fbdc 	bl	12108 <printk>
    9950:	4813      	ldr	r0, [pc, #76]	; (99a0 <find_static_attr+0x78>)
    9952:	f008 fbd9 	bl	12108 <printk>
    9956:	f240 4199 	movw	r1, #1177	; 0x499
    995a:	4648      	mov	r0, r9
    995c:	f008 fe6a 	bl	12634 <assert_post_action>
    9960:	45c2      	cmp	sl, r8
    9962:	d212      	bcs.n	998a <find_static_attr+0x62>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    9964:	2100      	movs	r1, #0
			if (attr == &static_svc->attrs[i]) {
    9966:	2214      	movs	r2, #20
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    9968:	f854 cc04 	ldr.w	ip, [r4, #-4]
    996c:	e006      	b.n	997c <find_static_attr+0x54>
			if (attr == &static_svc->attrs[i]) {
    996e:	f854 3c08 	ldr.w	r3, [r4, #-8]
    9972:	fb02 3301 	mla	r3, r2, r1, r3
    9976:	429d      	cmp	r5, r3
    9978:	d008      	beq.n	998c <find_static_attr+0x64>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    997a:	3101      	adds	r1, #1
    997c:	1873      	adds	r3, r6, r1
    997e:	458c      	cmp	ip, r1
    9980:	b298      	uxth	r0, r3
    9982:	d1f4      	bne.n	996e <find_static_attr+0x46>
    9984:	4606      	mov	r6, r0
    9986:	3408      	adds	r4, #8
    9988:	e7d7      	b.n	993a <find_static_attr+0x12>
	return 0;
    998a:	2000      	movs	r0, #0
}
    998c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9990:	00016d0c 	.word	0x00016d0c
    9994:	00016d04 	.word	0x00016d04
    9998:	0001a7df 	.word	0x0001a7df
    999c:	00017d82 	.word	0x00017d82
    99a0:	00017d9f 	.word	0x00017d9f
    99a4:	0001a7af 	.word	0x0001a7af

000099a8 <gatt_notify>:
{
    99a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    99ac:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
    99ae:	8992      	ldrh	r2, [r2, #12]
{
    99b0:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    99b2:	3202      	adds	r2, #2
    99b4:	211b      	movs	r1, #27
{
    99b6:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    99b8:	f7ff f912 	bl	8be0 <bt_att_create_pdu>
	if (!buf) {
    99bc:	4605      	mov	r5, r0
    99be:	b1c8      	cbz	r0, 99f4 <gatt_notify+0x4c>
	nfy = net_buf_add(buf, sizeof(*nfy));
    99c0:	f100 0908 	add.w	r9, r0, #8
    99c4:	2102      	movs	r1, #2
    99c6:	4648      	mov	r0, r9
    99c8:	f003 ff02 	bl	d7d0 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    99cc:	4606      	mov	r6, r0
	net_buf_add(buf, params->len);
    99ce:	89a1      	ldrh	r1, [r4, #12]
	nfy->handle = sys_cpu_to_le16(handle);
    99d0:	f826 8b02 	strh.w	r8, [r6], #2
	net_buf_add(buf, params->len);
    99d4:	4648      	mov	r0, r9
    99d6:	f003 fefb 	bl	d7d0 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
    99da:	89a2      	ldrh	r2, [r4, #12]
    99dc:	68a1      	ldr	r1, [r4, #8]
    99de:	4630      	mov	r0, r6
    99e0:	f009 fea7 	bl	13732 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
    99e4:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    99e8:	4629      	mov	r1, r5
    99ea:	4638      	mov	r0, r7
}
    99ec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
    99f0:	f7ff be76 	b.w	96e0 <bt_att_send>
		BT_WARN("No buffer available to send notification");
    99f4:	2157      	movs	r1, #87	; 0x57
    99f6:	4803      	ldr	r0, [pc, #12]	; (9a04 <gatt_notify+0x5c>)
    99f8:	f008 fb86 	bl	12108 <printk>
}
    99fc:	f06f 000b 	mvn.w	r0, #11
    9a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9a04:	0001a80e 	.word	0x0001a80e

00009a08 <gatt_send.constprop.0>:
static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
    9a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9a0c:	4606      	mov	r6, r0
    9a0e:	4688      	mov	r8, r1
    9a10:	4617      	mov	r7, r2
	if (params) {
    9a12:	461c      	mov	r4, r3
    9a14:	b31b      	cbz	r3, 9a5e <gatt_send.constprop.0+0x56>
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    9a16:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    9a1a:	2100      	movs	r1, #0
    9a1c:	f7ff fd56 	bl	94cc <bt_att_req_alloc>
		if (!req) {
    9a20:	4605      	mov	r5, r0
    9a22:	b920      	cbnz	r0, 9a2e <gatt_send.constprop.0+0x26>
			return -ENOMEM;
    9a24:	f06f 040b 	mvn.w	r4, #11
}
    9a28:	4620      	mov	r0, r4
    9a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		req->destroy = destroy;
    9a2e:	2300      	movs	r3, #0
		req->user_data = params;
    9a30:	6184      	str	r4, [r0, #24]
		err = bt_att_req_send(conn, req);
    9a32:	4601      	mov	r1, r0
		req->buf = buf;
    9a34:	f8c0 8010 	str.w	r8, [r0, #16]
		req->func = func;
    9a38:	6047      	str	r7, [r0, #4]
		req->destroy = destroy;
    9a3a:	6083      	str	r3, [r0, #8]
		err = bt_att_req_send(conn, req);
    9a3c:	4630      	mov	r0, r6
    9a3e:	f7ff fea3 	bl	9788 <bt_att_req_send>
		if (err) {
    9a42:	4604      	mov	r4, r0
    9a44:	2800      	cmp	r0, #0
    9a46:	d0ef      	beq.n	9a28 <gatt_send.constprop.0+0x20>
			bt_att_req_free(req);
    9a48:	4628      	mov	r0, r5
    9a4a:	f7ff fd55 	bl	94f8 <bt_att_req_free>
	if (err) {
    9a4e:	2c00      	cmp	r4, #0
    9a50:	d0ea      	beq.n	9a28 <gatt_send.constprop.0+0x20>
		BT_ERR("Error sending ATT PDU: %d", err);
    9a52:	4622      	mov	r2, r4
    9a54:	2145      	movs	r1, #69	; 0x45
    9a56:	4804      	ldr	r0, [pc, #16]	; (9a68 <gatt_send.constprop.0+0x60>)
    9a58:	f008 fb56 	bl	12108 <printk>
    9a5c:	e7e4      	b.n	9a28 <gatt_send.constprop.0+0x20>
		err = bt_att_send(conn, buf, NULL, NULL);
    9a5e:	461a      	mov	r2, r3
    9a60:	f7ff fe3e 	bl	96e0 <bt_att_send>
    9a64:	4604      	mov	r4, r0
    9a66:	e7f2      	b.n	9a4e <gatt_send.constprop.0+0x46>
    9a68:	0001a83c 	.word	0x0001a83c

00009a6c <gatt_indicate>:
{
    9a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9a70:	4614      	mov	r4, r2
				sizeof(*ind) + params->len);
    9a72:	8a12      	ldrh	r2, [r2, #16]
{
    9a74:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    9a76:	3202      	adds	r2, #2
    9a78:	211d      	movs	r1, #29
{
    9a7a:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    9a7c:	f7ff f8b0 	bl	8be0 <bt_att_create_pdu>
	if (!buf) {
    9a80:	4605      	mov	r5, r0
    9a82:	b1e8      	cbz	r0, 9ac0 <gatt_indicate+0x54>
	ind = net_buf_add(buf, sizeof(*ind));
    9a84:	f100 0808 	add.w	r8, r0, #8
    9a88:	2102      	movs	r1, #2
    9a8a:	4640      	mov	r0, r8
    9a8c:	f003 fea0 	bl	d7d0 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    9a90:	4606      	mov	r6, r0
	net_buf_add(buf, params->len);
    9a92:	8a21      	ldrh	r1, [r4, #16]
	ind->handle = sys_cpu_to_le16(handle);
    9a94:	f826 9b02 	strh.w	r9, [r6], #2
	net_buf_add(buf, params->len);
    9a98:	4640      	mov	r0, r8
    9a9a:	f003 fe99 	bl	d7d0 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    9a9e:	4630      	mov	r0, r6
    9aa0:	8a22      	ldrh	r2, [r4, #16]
    9aa2:	68e1      	ldr	r1, [r4, #12]
    9aa4:	f009 fe45 	bl	13732 <memcpy>
	if (!params->func) {
    9aa8:	68a3      	ldr	r3, [r4, #8]
    9aaa:	b933      	cbnz	r3, 9aba <gatt_indicate+0x4e>
		return gatt_send(conn, buf, NULL, NULL, NULL);
    9aac:	461a      	mov	r2, r3
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    9aae:	4629      	mov	r1, r5
    9ab0:	4638      	mov	r0, r7
}
    9ab2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    9ab6:	f7ff bfa7 	b.w	9a08 <gatt_send.constprop.0>
    9aba:	4623      	mov	r3, r4
    9abc:	4a04      	ldr	r2, [pc, #16]	; (9ad0 <gatt_indicate+0x64>)
    9abe:	e7f6      	b.n	9aae <gatt_indicate+0x42>
		BT_WARN("No buffer available to send indication");
    9ac0:	2157      	movs	r1, #87	; 0x57
    9ac2:	4804      	ldr	r0, [pc, #16]	; (9ad4 <gatt_indicate+0x68>)
    9ac4:	f008 fb20 	bl	12108 <printk>
}
    9ac8:	f06f 000b 	mvn.w	r0, #11
    9acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9ad0:	00014979 	.word	0x00014979
    9ad4:	0001a85b 	.word	0x0001a85b

00009ad8 <ccc_save>:
{
    9ad8:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    9ada:	6882      	ldr	r2, [r0, #8]
    9adc:	4b0b      	ldr	r3, [pc, #44]	; (9b0c <ccc_save+0x34>)
{
    9ade:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    9ae0:	429a      	cmp	r2, r3
{
    9ae2:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    9ae4:	d110      	bne.n	9b08 <ccc_save+0x30>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
    9ae6:	790a      	ldrb	r2, [r1, #4]
    9ae8:	68c0      	ldr	r0, [r0, #12]
    9aea:	6809      	ldr	r1, [r1, #0]
    9aec:	f00a ffee 	bl	14acc <ccc_find_cfg>
	if (!cfg) {
    9af0:	b150      	cbz	r0, 9b08 <ccc_save+0x30>
	save->store[save->count].handle = attr->handle;
    9af2:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
    9af6:	8a29      	ldrh	r1, [r5, #16]
    9af8:	eb04 0283 	add.w	r2, r4, r3, lsl #2
    9afc:	8111      	strh	r1, [r2, #8]
	save->store[save->count].value = cfg->value;
    9afe:	8901      	ldrh	r1, [r0, #8]
	save->count++;
    9b00:	3301      	adds	r3, #1
	save->store[save->count].value = cfg->value;
    9b02:	8151      	strh	r1, [r2, #10]
	save->count++;
    9b04:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
    9b08:	2001      	movs	r0, #1
    9b0a:	bd38      	pop	{r3, r4, r5, pc}
    9b0c:	00009ba1 	.word	0x00009ba1

00009b10 <ccc_load>:
{
    9b10:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    9b12:	4a22      	ldr	r2, [pc, #136]	; (9b9c <ccc_load+0x8c>)
{
    9b14:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    9b16:	6881      	ldr	r1, [r0, #8]
{
    9b18:	4603      	mov	r3, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    9b1a:	4291      	cmp	r1, r2
    9b1c:	d002      	beq.n	9b24 <ccc_load+0x14>
		return BT_GATT_ITER_CONTINUE;
    9b1e:	2001      	movs	r0, #1
}
    9b20:	b002      	add	sp, #8
    9b22:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
    9b24:	68a2      	ldr	r2, [r4, #8]
	ccc = attr->user_data;
    9b26:	68c6      	ldr	r6, [r0, #12]
	if (!load->entry) {
    9b28:	b94a      	cbnz	r2, 9b3e <ccc_load+0x2e>
	cfg = ccc_find_cfg(ccc, addr, id);
    9b2a:	4630      	mov	r0, r6
    9b2c:	7922      	ldrb	r2, [r4, #4]
    9b2e:	6821      	ldr	r1, [r4, #0]
    9b30:	f00a ffcc 	bl	14acc <ccc_find_cfg>
	if (!cfg) {
    9b34:	2800      	cmp	r0, #0
    9b36:	d0f2      	beq.n	9b1e <ccc_load+0xe>
	clear_ccc_cfg(cfg);
    9b38:	f00a ff87 	bl	14a4a <clear_ccc_cfg>
    9b3c:	e7ef      	b.n	9b1e <ccc_load+0xe>
	} else if (!load->count) {
    9b3e:	68e0      	ldr	r0, [r4, #12]
    9b40:	2800      	cmp	r0, #0
    9b42:	d0ed      	beq.n	9b20 <ccc_load+0x10>
	if (load->entry->handle != attr->handle) {
    9b44:	8812      	ldrh	r2, [r2, #0]
    9b46:	8a1b      	ldrh	r3, [r3, #16]
    9b48:	429a      	cmp	r2, r3
    9b4a:	d00a      	beq.n	9b62 <ccc_load+0x52>
		if (load->entry->handle < attr->handle) {
    9b4c:	d2e7      	bcs.n	9b1e <ccc_load+0xe>
	load->count--;
    9b4e:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
    9b50:	68a3      	ldr	r3, [r4, #8]
	load->count--;
    9b52:	3801      	subs	r0, #1
	load->entry++;
    9b54:	3304      	adds	r3, #4
	load->count--;
    9b56:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    9b58:	3800      	subs	r0, #0
    9b5a:	bf18      	it	ne
    9b5c:	2001      	movne	r0, #1
	load->entry++;
    9b5e:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    9b60:	e7de      	b.n	9b20 <ccc_load+0x10>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
    9b62:	4630      	mov	r0, r6
    9b64:	7922      	ldrb	r2, [r4, #4]
    9b66:	6821      	ldr	r1, [r4, #0]
    9b68:	f00a ffb0 	bl	14acc <ccc_find_cfg>
	if (!cfg) {
    9b6c:	4605      	mov	r5, r0
    9b6e:	b980      	cbnz	r0, 9b92 <ccc_load+0x82>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
    9b70:	9000      	str	r0, [sp, #0]
    9b72:	4602      	mov	r2, r0
    9b74:	f8cd 0003 	str.w	r0, [sp, #3]
    9b78:	4669      	mov	r1, sp
    9b7a:	4630      	mov	r0, r6
    9b7c:	f00a ffa6 	bl	14acc <ccc_find_cfg>
		if (!cfg) {
    9b80:	4605      	mov	r5, r0
    9b82:	2800      	cmp	r0, #0
    9b84:	d0e3      	beq.n	9b4e <ccc_load+0x3e>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
    9b86:	6821      	ldr	r1, [r4, #0]
    9b88:	3001      	adds	r0, #1
    9b8a:	f00a ff5b 	bl	14a44 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
    9b8e:	7923      	ldrb	r3, [r4, #4]
    9b90:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
    9b92:	68a3      	ldr	r3, [r4, #8]
    9b94:	885b      	ldrh	r3, [r3, #2]
    9b96:	812b      	strh	r3, [r5, #8]
    9b98:	e7d9      	b.n	9b4e <ccc_load+0x3e>
    9b9a:	bf00      	nop
    9b9c:	00009ba1 	.word	0x00009ba1

00009ba0 <bt_gatt_attr_write_ccc>:
{
    9ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9ba4:	461f      	mov	r7, r3
    9ba6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    9baa:	4606      	mov	r6, r0
    9bac:	4688      	mov	r8, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
    9bae:	f8d1 900c 	ldr.w	r9, [r1, #12]
	if (offset) {
    9bb2:	2b00      	cmp	r3, #0
    9bb4:	d144      	bne.n	9c40 <bt_gatt_attr_write_ccc+0xa0>
	if (!len || len > sizeof(u16_t)) {
    9bb6:	1e7b      	subs	r3, r7, #1
    9bb8:	2b01      	cmp	r3, #1
    9bba:	d844      	bhi.n	9c46 <bt_gatt_attr_write_ccc+0xa6>
	if (len < sizeof(u16_t)) {
    9bbc:	2f01      	cmp	r7, #1
		value = *(u8_t *)buf;
    9bbe:	7815      	ldrb	r5, [r2, #0]
	return ((u16_t)src[1] << 8) | src[0];
    9bc0:	bf18      	it	ne
    9bc2:	7853      	ldrbne	r3, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
    9bc4:	4649      	mov	r1, r9
		value = *(u8_t *)buf;
    9bc6:	bf0c      	ite	eq
    9bc8:	b2ad      	uxtheq	r5, r5
    9bca:	ea45 2503 	orrne.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
    9bce:	f00a ff8c 	bl	14aea <find_ccc_cfg>
	if (!cfg) {
    9bd2:	4604      	mov	r4, r0
    9bd4:	b9b0      	cbnz	r0, 9c04 <bt_gatt_attr_write_ccc+0x64>
		if (!value) {
    9bd6:	b915      	cbnz	r5, 9bde <bt_gatt_attr_write_ccc+0x3e>
			return len;
    9bd8:	4638      	mov	r0, r7
}
    9bda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
    9bde:	4649      	mov	r1, r9
    9be0:	f00a ff83 	bl	14aea <find_ccc_cfg>
		if (!cfg) {
    9be4:	4604      	mov	r4, r0
    9be6:	b930      	cbnz	r0, 9bf6 <bt_gatt_attr_write_ccc+0x56>
			BT_WARN("No space to store CCC cfg");
    9be8:	4818      	ldr	r0, [pc, #96]	; (9c4c <bt_gatt_attr_write_ccc+0xac>)
    9bea:	2157      	movs	r1, #87	; 0x57
    9bec:	f008 fa8c 	bl	12108 <printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    9bf0:	f06f 0010 	mvn.w	r0, #16
    9bf4:	e7f1      	b.n	9bda <bt_gatt_attr_write_ccc+0x3a>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    9bf6:	f106 017c 	add.w	r1, r6, #124	; 0x7c
    9bfa:	3001      	adds	r0, #1
    9bfc:	f00a ff22 	bl	14a44 <bt_addr_le_copy>
		cfg->id = conn->id;
    9c00:	7a33      	ldrb	r3, [r6, #8]
    9c02:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
    9c04:	f8d9 3010 	ldr.w	r3, [r9, #16]
    9c08:	b973      	cbnz	r3, 9c28 <bt_gatt_attr_write_ccc+0x88>
	if (cfg->value != ccc->value) {
    9c0a:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
    9c0e:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
    9c10:	42ab      	cmp	r3, r5
    9c12:	d003      	beq.n	9c1c <bt_gatt_attr_write_ccc+0x7c>
		gatt_ccc_changed(attr, ccc);
    9c14:	4649      	mov	r1, r9
    9c16:	4640      	mov	r0, r8
    9c18:	f00a fea4 	bl	14964 <gatt_ccc_changed>
	if (!value) {
    9c1c:	2d00      	cmp	r5, #0
    9c1e:	d1db      	bne.n	9bd8 <bt_gatt_attr_write_ccc+0x38>
		clear_ccc_cfg(cfg);
    9c20:	4620      	mov	r0, r4
    9c22:	f00a ff12 	bl	14a4a <clear_ccc_cfg>
    9c26:	e7d7      	b.n	9bd8 <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
    9c28:	462a      	mov	r2, r5
    9c2a:	4641      	mov	r1, r8
    9c2c:	4630      	mov	r0, r6
    9c2e:	4798      	blx	r3
		if (write < 0) {
    9c30:	2800      	cmp	r0, #0
    9c32:	dbd2      	blt.n	9bda <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
    9c34:	1e42      	subs	r2, r0, #1
    9c36:	2a01      	cmp	r2, #1
    9c38:	d9e7      	bls.n	9c0a <bt_gatt_attr_write_ccc+0x6a>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    9c3a:	f06f 000d 	mvn.w	r0, #13
    9c3e:	e7cc      	b.n	9bda <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    9c40:	f06f 0006 	mvn.w	r0, #6
    9c44:	e7c9      	b.n	9bda <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    9c46:	f06f 000c 	mvn.w	r0, #12
    9c4a:	e7c6      	b.n	9bda <bt_gatt_attr_write_ccc+0x3a>
    9c4c:	0001a887 	.word	0x0001a887

00009c50 <sc_commit>:
{
    9c50:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9c52:	4c0a      	ldr	r4, [pc, #40]	; (9c7c <sc_commit+0x2c>)
    9c54:	f06f 0102 	mvn.w	r1, #2
    9c58:	4620      	mov	r0, r4
    9c5a:	f00a ff04 	bl	14a66 <atomic_and>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9c5e:	e8d4 3faf 	lda	r3, [r4]
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    9c62:	07db      	lsls	r3, r3, #31
    9c64:	d507      	bpl.n	9c76 <sc_commit+0x26>
    9c66:	f44f 72a4 	mov.w	r2, #328	; 0x148
    9c6a:	2300      	movs	r3, #0
    9c6c:	4804      	ldr	r0, [pc, #16]	; (9c80 <sc_commit+0x30>)
    9c6e:	f1a4 0120 	sub.w	r1, r4, #32
    9c72:	f007 fa29 	bl	110c8 <k_delayed_work_submit_to_queue>
}
    9c76:	2000      	movs	r0, #0
    9c78:	bd10      	pop	{r4, pc}
    9c7a:	bf00      	nop
    9c7c:	20000fc4 	.word	0x20000fc4
    9c80:	20001dcc 	.word	0x20001dcc

00009c84 <gatt_sub_find_free>:
{
    9c84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9c86:	4606      	mov	r6, r0
	if (free_sub) {
    9c88:	460c      	mov	r4, r1
    9c8a:	b109      	cbz	r1, 9c90 <gatt_sub_find_free+0xc>
		*free_sub = NULL;
    9c8c:	2300      	movs	r3, #0
    9c8e:	600b      	str	r3, [r1, #0]
		if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
    9c90:	4d16      	ldr	r5, [pc, #88]	; (9cec <gatt_sub_find_free+0x68>)
    9c92:	4630      	mov	r0, r6
    9c94:	462a      	mov	r2, r5
    9c96:	f812 1b01 	ldrb.w	r1, [r2], #1
    9c9a:	f00a f8c4 	bl	13e26 <bt_conn_is_peer_addr_le>
    9c9e:	462f      	mov	r7, r5
    9ca0:	b9f8      	cbnz	r0, 9ce2 <gatt_sub_find_free+0x5e>
		} else if (free_sub &&
    9ca2:	b14c      	cbz	r4, 9cb8 <gatt_sub_find_free+0x34>
			   !bt_addr_le_cmp(BT_ADDR_LE_ANY, &sub->peer)) {
    9ca4:	9000      	str	r0, [sp, #0]
	return memcmp(a, b, sizeof(*a));
    9ca6:	2207      	movs	r2, #7
    9ca8:	f8cd 0003 	str.w	r0, [sp, #3]
    9cac:	1c69      	adds	r1, r5, #1
    9cae:	4668      	mov	r0, sp
    9cb0:	f009 fd2f 	bl	13712 <memcmp>
		} else if (free_sub &&
    9cb4:	b900      	cbnz	r0, 9cb8 <gatt_sub_find_free+0x34>
			*free_sub = sub;
    9cb6:	6025      	str	r5, [r4, #0]
		if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
    9cb8:	4630      	mov	r0, r6
    9cba:	4a0d      	ldr	r2, [pc, #52]	; (9cf0 <gatt_sub_find_free+0x6c>)
    9cbc:	7c39      	ldrb	r1, [r7, #16]
    9cbe:	f00a f8b2 	bl	13e26 <bt_conn_is_peer_addr_le>
    9cc2:	b980      	cbnz	r0, 9ce6 <gatt_sub_find_free+0x62>
		} else if (free_sub &&
    9cc4:	b154      	cbz	r4, 9cdc <gatt_sub_find_free+0x58>
			   !bt_addr_le_cmp(BT_ADDR_LE_ANY, &sub->peer)) {
    9cc6:	9000      	str	r0, [sp, #0]
    9cc8:	2207      	movs	r2, #7
    9cca:	f8cd 0003 	str.w	r0, [sp, #3]
    9cce:	4908      	ldr	r1, [pc, #32]	; (9cf0 <gatt_sub_find_free+0x6c>)
    9cd0:	4668      	mov	r0, sp
    9cd2:	f009 fd1e 	bl	13712 <memcmp>
		} else if (free_sub &&
    9cd6:	b908      	cbnz	r0, 9cdc <gatt_sub_find_free+0x58>
			*free_sub = sub;
    9cd8:	4b06      	ldr	r3, [pc, #24]	; (9cf4 <gatt_sub_find_free+0x70>)
    9cda:	6023      	str	r3, [r4, #0]
	return NULL;
    9cdc:	2000      	movs	r0, #0
}
    9cde:	b003      	add	sp, #12
    9ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct gatt_sub *sub = &subscriptions[i];
    9ce2:	4628      	mov	r0, r5
    9ce4:	e7fb      	b.n	9cde <gatt_sub_find_free+0x5a>
    9ce6:	4803      	ldr	r0, [pc, #12]	; (9cf4 <gatt_sub_find_free+0x70>)
    9ce8:	e7f9      	b.n	9cde <gatt_sub_find_free+0x5a>
    9cea:	bf00      	nop
    9cec:	20000fe0 	.word	0x20000fe0
    9cf0:	20000ff1 	.word	0x20000ff1
    9cf4:	20000ff0 	.word	0x20000ff0

00009cf8 <find_sc_cfg>:
{
    9cf8:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
    9cfa:	4c0e      	ldr	r4, [pc, #56]	; (9d34 <find_sc_cfg+0x3c>)
{
    9cfc:	4605      	mov	r5, r0
		if (id == sc_cfg[i].id &&
    9cfe:	7823      	ldrb	r3, [r4, #0]
{
    9d00:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
    9d02:	4283      	cmp	r3, r0
    9d04:	d00a      	beq.n	9d1c <find_sc_cfg+0x24>
    9d06:	7b23      	ldrb	r3, [r4, #12]
    9d08:	42ab      	cmp	r3, r5
    9d0a:	d111      	bne.n	9d30 <find_sc_cfg+0x38>
    9d0c:	2207      	movs	r2, #7
    9d0e:	4631      	mov	r1, r6
    9d10:	4809      	ldr	r0, [pc, #36]	; (9d38 <find_sc_cfg+0x40>)
    9d12:	f009 fcfe 	bl	13712 <memcmp>
    9d16:	b958      	cbnz	r0, 9d30 <find_sc_cfg+0x38>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    9d18:	2001      	movs	r0, #1
    9d1a:	e005      	b.n	9d28 <find_sc_cfg+0x30>
    9d1c:	2207      	movs	r2, #7
    9d1e:	1c60      	adds	r0, r4, #1
    9d20:	f009 fcf7 	bl	13712 <memcmp>
		if (id == sc_cfg[i].id &&
    9d24:	2800      	cmp	r0, #0
    9d26:	d1ee      	bne.n	9d06 <find_sc_cfg+0xe>
			return &sc_cfg[i];
    9d28:	230c      	movs	r3, #12
    9d2a:	fb03 4000 	mla	r0, r3, r0, r4
    9d2e:	e000      	b.n	9d32 <find_sc_cfg+0x3a>
	return NULL;
    9d30:	2000      	movs	r0, #0
}
    9d32:	bd70      	pop	{r4, r5, r6, pc}
    9d34:	20001e6e 	.word	0x20001e6e
    9d38:	20001e7b 	.word	0x20001e7b

00009d3c <sc_save>:
{
    9d3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    9d40:	4680      	mov	r8, r0
    9d42:	460f      	mov	r7, r1
    9d44:	4616      	mov	r6, r2
    9d46:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
    9d48:	f7ff ffd6 	bl	9cf8 <find_sc_cfg>
	if (!cfg) {
    9d4c:	4604      	mov	r4, r0
    9d4e:	b998      	cbnz	r0, 9d78 <sc_save+0x3c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    9d50:	4669      	mov	r1, sp
    9d52:	9000      	str	r0, [sp, #0]
    9d54:	f8cd 0003 	str.w	r0, [sp, #3]
    9d58:	f7ff ffce 	bl	9cf8 <find_sc_cfg>
		if (!cfg) {
    9d5c:	4604      	mov	r4, r0
    9d5e:	b930      	cbnz	r0, 9d6e <sc_save+0x32>
			BT_ERR("unable to save SC: no cfg left");
    9d60:	2145      	movs	r1, #69	; 0x45
    9d62:	4812      	ldr	r0, [pc, #72]	; (9dac <sc_save+0x70>)
    9d64:	f008 f9d0 	bl	12108 <printk>
}
    9d68:	b002      	add	sp, #8
    9d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&cfg->peer, peer);
    9d6e:	4639      	mov	r1, r7
		cfg->id = id;
    9d70:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
    9d74:	f00a fe66 	bl	14a44 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
    9d78:	8922      	ldrh	r2, [r4, #8]
    9d7a:	8963      	ldrh	r3, [r4, #10]
    9d7c:	b96a      	cbnz	r2, 9d9a <sc_save+0x5e>
    9d7e:	b973      	cbnz	r3, 9d9e <sc_save+0x62>
		cfg->data.start = start;
    9d80:	8126      	strh	r6, [r4, #8]
		*end = new_end;
    9d82:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
    9d84:	4621      	mov	r1, r4
    9d86:	f811 0b01 	ldrb.w	r0, [r1], #1
    9d8a:	f009 ff68 	bl	13c5e <bt_addr_le_is_bonded>
    9d8e:	2800      	cmp	r0, #0
    9d90:	d0ea      	beq.n	9d68 <sc_save+0x2c>
		sc_store(cfg);
    9d92:	4620      	mov	r0, r4
    9d94:	f7ff fda0 	bl	98d8 <sc_store>
    9d98:	e7e6      	b.n	9d68 <sc_save+0x2c>
	if (new_start >= *start && new_end <= *end) {
    9d9a:	4296      	cmp	r6, r2
    9d9c:	d302      	bcc.n	9da4 <sc_save+0x68>
    9d9e:	429d      	cmp	r5, r3
    9da0:	d8ef      	bhi.n	9d82 <sc_save+0x46>
    9da2:	e7e1      	b.n	9d68 <sc_save+0x2c>
	if (*end < new_end) {
    9da4:	429d      	cmp	r5, r3
		*start = new_start;
    9da6:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
    9da8:	d9ec      	bls.n	9d84 <sc_save+0x48>
    9daa:	e7ea      	b.n	9d82 <sc_save+0x46>
    9dac:	0001a8a6 	.word	0x0001a8a6

00009db0 <notify_cb>:
{
    9db0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    9db4:	4b31      	ldr	r3, [pc, #196]	; (9e7c <notify_cb+0xcc>)
    9db6:	6882      	ldr	r2, [r0, #8]
{
    9db8:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    9dba:	429a      	cmp	r2, r3
{
    9dbc:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    9dbe:	d113      	bne.n	9de8 <notify_cb+0x38>
	ccc = attr->user_data;
    9dc0:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    9dc2:	4b2f      	ldr	r3, [pc, #188]	; (9e80 <notify_cb+0xd0>)
    9dc4:	429f      	cmp	r7, r3
    9dc6:	d013      	beq.n	9df0 <notify_cb+0x40>
		if (cfg->value != data->type) {
    9dc8:	893a      	ldrh	r2, [r7, #8]
    9dca:	88ab      	ldrh	r3, [r5, #4]
    9dcc:	429a      	cmp	r2, r3
    9dce:	d10b      	bne.n	9de8 <notify_cb+0x38>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    9dd0:	4639      	mov	r1, r7
    9dd2:	f811 0b01 	ldrb.w	r0, [r1], #1
    9dd6:	f7fd fb3b 	bl	7450 <bt_conn_lookup_addr_le>
		if (!conn) {
    9dda:	4604      	mov	r4, r0
    9ddc:	b120      	cbz	r0, 9de8 <notify_cb+0x38>
		if (conn->state != BT_CONN_CONNECTED) {
    9dde:	7b43      	ldrb	r3, [r0, #13]
    9de0:	2b06      	cmp	r3, #6
    9de2:	d02d      	beq.n	9e40 <notify_cb+0x90>
			bt_conn_unref(conn);
    9de4:	f00a f846 	bl	13e74 <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
    9de8:	2001      	movs	r0, #1
}
    9dea:	b003      	add	sp, #12
    9dec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    9df0:	f04f 0800 	mov.w	r8, #0
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    9df4:	46c1      	mov	r9, r8
    9df6:	4c23      	ldr	r4, [pc, #140]	; (9e84 <notify_cb+0xd4>)
    9df8:	2207      	movs	r2, #7
    9dfa:	4669      	mov	r1, sp
    9dfc:	4620      	mov	r0, r4
    9dfe:	f8cd 9000 	str.w	r9, [sp]
    9e02:	f8cd 9003 	str.w	r9, [sp, #3]
    9e06:	f009 fc84 	bl	13712 <memcmp>
    9e0a:	b178      	cbz	r0, 9e2c <notify_cb+0x7c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    9e0c:	2206      	movs	r2, #6
    9e0e:	4621      	mov	r1, r4
    9e10:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    9e14:	f7fd fb54 	bl	74c0 <bt_conn_lookup_state_le>
			if (!conn) {
    9e18:	b978      	cbnz	r0, 9e3a <notify_cb+0x8a>
				sc = (struct sc_data *)data->ind_params->data;
    9e1a:	68ab      	ldr	r3, [r5, #8]
				sc_save(cfg->id, &cfg->peer,
    9e1c:	4621      	mov	r1, r4
				sc = (struct sc_data *)data->ind_params->data;
    9e1e:	68da      	ldr	r2, [r3, #12]
				sc_save(cfg->id, &cfg->peer,
    9e20:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    9e24:	8853      	ldrh	r3, [r2, #2]
    9e26:	8812      	ldrh	r2, [r2, #0]
    9e28:	f7ff ff88 	bl	9d3c <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    9e2c:	340c      	adds	r4, #12
    9e2e:	f1b8 0f00 	cmp.w	r8, #0
    9e32:	d1c9      	bne.n	9dc8 <notify_cb+0x18>
    9e34:	f04f 0801 	mov.w	r8, #1
    9e38:	e7de      	b.n	9df8 <notify_cb+0x48>
			bt_conn_unref(conn);
    9e3a:	f00a f81b 	bl	13e74 <bt_conn_unref>
    9e3e:	e7f5      	b.n	9e2c <notify_cb+0x7c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    9e40:	697b      	ldr	r3, [r7, #20]
    9e42:	b123      	cbz	r3, 9e4e <notify_cb+0x9e>
    9e44:	4631      	mov	r1, r6
    9e46:	4798      	blx	r3
    9e48:	b908      	cbnz	r0, 9e4e <notify_cb+0x9e>
			bt_conn_unref(conn);
    9e4a:	4620      	mov	r0, r4
    9e4c:	e7ca      	b.n	9de4 <notify_cb+0x34>
		if (data->type == BT_GATT_CCC_INDICATE) {
    9e4e:	8a31      	ldrh	r1, [r6, #16]
    9e50:	88ab      	ldrh	r3, [r5, #4]
    9e52:	3901      	subs	r1, #1
    9e54:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, attr->handle - 1,
    9e56:	4620      	mov	r0, r4
    9e58:	68aa      	ldr	r2, [r5, #8]
    9e5a:	b289      	uxth	r1, r1
		if (data->type == BT_GATT_CCC_INDICATE) {
    9e5c:	d10b      	bne.n	9e76 <notify_cb+0xc6>
			err = gatt_indicate(conn, attr->handle - 1,
    9e5e:	f7ff fe05 	bl	9a6c <gatt_indicate>
			err = gatt_notify(conn, attr->handle - 1,
    9e62:	4606      	mov	r6, r0
		bt_conn_unref(conn);
    9e64:	4620      	mov	r0, r4
    9e66:	f00a f805 	bl	13e74 <bt_conn_unref>
		if (err < 0) {
    9e6a:	2e00      	cmp	r6, #0
    9e6c:	f04f 0000 	mov.w	r0, #0
    9e70:	dbbb      	blt.n	9dea <notify_cb+0x3a>
		data->err = 0;
    9e72:	6028      	str	r0, [r5, #0]
    9e74:	e7b8      	b.n	9de8 <notify_cb+0x38>
			err = gatt_notify(conn, attr->handle - 1,
    9e76:	f7ff fd97 	bl	99a8 <gatt_notify>
    9e7a:	e7f2      	b.n	9e62 <notify_cb+0xb2>
    9e7c:	00009ba1 	.word	0x00009ba1
    9e80:	2000026c 	.word	0x2000026c
    9e84:	20001e6f 	.word	0x20001e6f

00009e88 <sc_set>:
{
    9e88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9e8c:	460e      	mov	r6, r1
    9e8e:	4690      	mov	r8, r2
    9e90:	4699      	mov	r9, r3
	if (!name) {
    9e92:	4604      	mov	r4, r0
{
    9e94:	b087      	sub	sp, #28
	if (!name) {
    9e96:	b948      	cbnz	r0, 9eac <sc_set+0x24>
		BT_ERR("Insufficient number of arguments");
    9e98:	2145      	movs	r1, #69	; 0x45
    9e9a:	4829      	ldr	r0, [pc, #164]	; (9f40 <sc_set+0xb8>)
    9e9c:	f008 f934 	bl	12108 <printk>
		return -EINVAL;
    9ea0:	f06f 0515 	mvn.w	r5, #21
}
    9ea4:	4628      	mov	r0, r5
    9ea6:	b007      	add	sp, #28
    9ea8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
    9eac:	a902      	add	r1, sp, #8
    9eae:	f009 fcb7 	bl	13820 <bt_settings_decode_key>
	if (err) {
    9eb2:	4605      	mov	r5, r0
    9eb4:	b128      	cbz	r0, 9ec2 <sc_set+0x3a>
		BT_ERR("Unable to decode address %s", log_strdup(name));
    9eb6:	4622      	mov	r2, r4
    9eb8:	2145      	movs	r1, #69	; 0x45
    9eba:	4822      	ldr	r0, [pc, #136]	; (9f44 <sc_set+0xbc>)
    9ebc:	f008 f924 	bl	12108 <printk>
    9ec0:	e7ee      	b.n	9ea0 <sc_set+0x18>
	settings_name_next(name, &next);
    9ec2:	4620      	mov	r0, r4
    9ec4:	a901      	add	r1, sp, #4
    9ec6:	f008 fd15 	bl	128f4 <settings_name_next>
	if (!next) {
    9eca:	9801      	ldr	r0, [sp, #4]
    9ecc:	b1d8      	cbz	r0, 9f06 <sc_set+0x7e>
		id = strtol(next, NULL, 10);
    9ece:	220a      	movs	r2, #10
    9ed0:	4629      	mov	r1, r5
    9ed2:	f009 fb69 	bl	135a8 <strtol>
    9ed6:	b2c7      	uxtb	r7, r0
	cfg = find_sc_cfg(id, &addr);
    9ed8:	4638      	mov	r0, r7
    9eda:	a902      	add	r1, sp, #8
    9edc:	f7ff ff0c 	bl	9cf8 <find_sc_cfg>
	if (!cfg && len_rd) {
    9ee0:	4604      	mov	r4, r0
    9ee2:	bb28      	cbnz	r0, 9f30 <sc_set+0xa8>
    9ee4:	2e00      	cmp	r6, #0
    9ee6:	d0dd      	beq.n	9ea4 <sc_set+0x1c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    9ee8:	a904      	add	r1, sp, #16
    9eea:	9004      	str	r0, [sp, #16]
    9eec:	f8cd 0013 	str.w	r0, [sp, #19]
    9ef0:	f7ff ff02 	bl	9cf8 <find_sc_cfg>
		if (!cfg) {
    9ef4:	4604      	mov	r4, r0
    9ef6:	b940      	cbnz	r0, 9f0a <sc_set+0x82>
			BT_ERR("Unable to restore SC: no cfg left");
    9ef8:	2145      	movs	r1, #69	; 0x45
    9efa:	4813      	ldr	r0, [pc, #76]	; (9f48 <sc_set+0xc0>)
    9efc:	f008 f904 	bl	12108 <printk>
			return -ENOMEM;
    9f00:	f06f 050b 	mvn.w	r5, #11
    9f04:	e7ce      	b.n	9ea4 <sc_set+0x1c>
		id = BT_ID_DEFAULT;
    9f06:	462f      	mov	r7, r5
    9f08:	e7e6      	b.n	9ed8 <sc_set+0x50>
		cfg->id = id;
    9f0a:	f800 7b01 	strb.w	r7, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
    9f0e:	a902      	add	r1, sp, #8
    9f10:	f00a fd98 	bl	14a44 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
    9f14:	f104 0108 	add.w	r1, r4, #8
    9f18:	2204      	movs	r2, #4
    9f1a:	4648      	mov	r0, r9
    9f1c:	47c0      	blx	r8
		if (len < 0) {
    9f1e:	1e04      	subs	r4, r0, #0
    9f20:	dac0      	bge.n	9ea4 <sc_set+0x1c>
			BT_ERR("Failed to decode value (err %zd)", len);
    9f22:	4622      	mov	r2, r4
    9f24:	2145      	movs	r1, #69	; 0x45
    9f26:	4809      	ldr	r0, [pc, #36]	; (9f4c <sc_set+0xc4>)
    9f28:	f008 f8ee 	bl	12108 <printk>
			return len;
    9f2c:	4625      	mov	r5, r4
    9f2e:	e7b9      	b.n	9ea4 <sc_set+0x1c>
	if (len_rd) {
    9f30:	2e00      	cmp	r6, #0
    9f32:	d1ef      	bne.n	9f14 <sc_set+0x8c>
		memset(cfg, 0, sizeof(*cfg));
    9f34:	220c      	movs	r2, #12
    9f36:	4631      	mov	r1, r6
    9f38:	f009 fc26 	bl	13788 <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
    9f3c:	e7b2      	b.n	9ea4 <sc_set+0x1c>
    9f3e:	bf00      	nop
    9f40:	00019127 	.word	0x00019127
    9f44:	0001a8ca 	.word	0x0001a8ca
    9f48:	0001a8eb 	.word	0x0001a8eb
    9f4c:	0001a735 	.word	0x0001a735

00009f50 <find_cf_cfg_by_addr>:
{
    9f50:	b570      	push	{r4, r5, r6, lr}
			if (id == cf_cfg[i].id &&
    9f52:	4c0e      	ldr	r4, [pc, #56]	; (9f8c <find_cf_cfg_by_addr+0x3c>)
{
    9f54:	4606      	mov	r6, r0
			if (id == cf_cfg[i].id &&
    9f56:	7823      	ldrb	r3, [r4, #0]
{
    9f58:	460d      	mov	r5, r1
			if (id == cf_cfg[i].id &&
    9f5a:	4283      	cmp	r3, r0
    9f5c:	d00a      	beq.n	9f74 <find_cf_cfg_by_addr+0x24>
    9f5e:	7c23      	ldrb	r3, [r4, #16]
    9f60:	42b3      	cmp	r3, r6
    9f62:	d111      	bne.n	9f88 <find_cf_cfg_by_addr+0x38>
    9f64:	2207      	movs	r2, #7
    9f66:	4628      	mov	r0, r5
    9f68:	4909      	ldr	r1, [pc, #36]	; (9f90 <find_cf_cfg_by_addr+0x40>)
    9f6a:	f009 fbd2 	bl	13712 <memcmp>
    9f6e:	b958      	cbnz	r0, 9f88 <find_cf_cfg_by_addr+0x38>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    9f70:	2001      	movs	r0, #1
    9f72:	e006      	b.n	9f82 <find_cf_cfg_by_addr+0x32>
    9f74:	2207      	movs	r2, #7
    9f76:	4628      	mov	r0, r5
    9f78:	1c61      	adds	r1, r4, #1
    9f7a:	f009 fbca 	bl	13712 <memcmp>
			if (id == cf_cfg[i].id &&
    9f7e:	2800      	cmp	r0, #0
    9f80:	d1ed      	bne.n	9f5e <find_cf_cfg_by_addr+0xe>
				return &cf_cfg[i];
    9f82:	eb04 1000 	add.w	r0, r4, r0, lsl #4
    9f86:	e000      	b.n	9f8a <find_cf_cfg_by_addr+0x3a>
	return NULL;
    9f88:	2000      	movs	r0, #0
}
    9f8a:	bd70      	pop	{r4, r5, r6, pc}
    9f8c:	20000f4c 	.word	0x20000f4c
    9f90:	20000f5d 	.word	0x20000f5d

00009f94 <find_cf_cfg>:
{
    9f94:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if (!conn) {
    9f96:	4605      	mov	r5, r0
    9f98:	4c15      	ldr	r4, [pc, #84]	; (9ff0 <find_cf_cfg+0x5c>)
    9f9a:	b140      	cbz	r0, 9fae <find_cf_cfg+0x1a>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    9f9c:	4622      	mov	r2, r4
    9f9e:	f812 1b01 	ldrb.w	r1, [r2], #1
    9fa2:	f009 ff40 	bl	13e26 <bt_conn_is_peer_addr_le>
    9fa6:	b1c0      	cbz	r0, 9fda <find_cf_cfg+0x46>
}
    9fa8:	4620      	mov	r0, r4
    9faa:	b003      	add	sp, #12
    9fac:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    9fae:	9000      	str	r0, [sp, #0]
    9fb0:	2207      	movs	r2, #7
    9fb2:	f8cd 0003 	str.w	r0, [sp, #3]
    9fb6:	4669      	mov	r1, sp
    9fb8:	1c60      	adds	r0, r4, #1
    9fba:	f009 fbaa 	bl	13712 <memcmp>
    9fbe:	2800      	cmp	r0, #0
    9fc0:	d0f2      	beq.n	9fa8 <find_cf_cfg+0x14>
    9fc2:	2207      	movs	r2, #7
    9fc4:	4669      	mov	r1, sp
    9fc6:	f104 0011 	add.w	r0, r4, #17
    9fca:	9500      	str	r5, [sp, #0]
    9fcc:	f8cd 5003 	str.w	r5, [sp, #3]
    9fd0:	f009 fb9f 	bl	13712 <memcmp>
    9fd4:	b948      	cbnz	r0, 9fea <find_cf_cfg+0x56>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    9fd6:	3410      	adds	r4, #16
    9fd8:	e7e6      	b.n	9fa8 <find_cf_cfg+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    9fda:	4628      	mov	r0, r5
    9fdc:	7c21      	ldrb	r1, [r4, #16]
    9fde:	f104 0211 	add.w	r2, r4, #17
    9fe2:	f009 ff20 	bl	13e26 <bt_conn_is_peer_addr_le>
    9fe6:	2800      	cmp	r0, #0
    9fe8:	d1f5      	bne.n	9fd6 <find_cf_cfg+0x42>
	return NULL;
    9fea:	2400      	movs	r4, #0
    9fec:	e7dc      	b.n	9fa8 <find_cf_cfg+0x14>
    9fee:	bf00      	nop
    9ff0:	20000f4c 	.word	0x20000f4c

00009ff4 <cf_write>:
{
    9ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9ff8:	461e      	mov	r6, r3
    9ffa:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    9ffe:	4607      	mov	r7, r0
	if (offset > sizeof(cfg->data)) {
    a000:	2b01      	cmp	r3, #1
{
    a002:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
    a004:	d83b      	bhi.n	a07e <cf_write+0x8a>
	if (offset + len > sizeof(cfg->data)) {
    a006:	4433      	add	r3, r6
    a008:	2b01      	cmp	r3, #1
    a00a:	4635      	mov	r5, r6
    a00c:	dc3a      	bgt.n	a084 <cf_write+0x90>
	cfg = find_cf_cfg(conn);
    a00e:	f7ff ffc1 	bl	9f94 <find_cf_cfg>
	if (!cfg) {
    a012:	4604      	mov	r4, r0
    a014:	b960      	cbnz	r0, a030 <cf_write+0x3c>
		cfg = find_cf_cfg(NULL);
    a016:	f7ff ffbd 	bl	9f94 <find_cf_cfg>
	if (!cfg) {
    a01a:	4604      	mov	r4, r0
    a01c:	b940      	cbnz	r0, a030 <cf_write+0x3c>
		BT_WARN("No space to store Client Supported Features");
    a01e:	2157      	movs	r1, #87	; 0x57
    a020:	481a      	ldr	r0, [pc, #104]	; (a08c <cf_write+0x98>)
    a022:	f008 f871 	bl	12108 <printk>
    a026:	f06f 0510 	mvn.w	r5, #16
}
    a02a:	4628      	mov	r0, r5
    a02c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i < len && i < last_byte; i++) {
    a030:	2300      	movs	r3, #0
    a032:	429e      	cmp	r6, r3
    a034:	d914      	bls.n	a060 <cf_write+0x6c>
    a036:	b13b      	cbz	r3, a048 <cf_write+0x54>
		cfg->data[i] |= value[i] & ((1 << last_bit) - 1);
    a038:	f898 3000 	ldrb.w	r3, [r8]
    a03c:	7a22      	ldrb	r2, [r4, #8]
    a03e:	f003 0301 	and.w	r3, r3, #1
    a042:	4313      	orrs	r3, r2
    a044:	7223      	strb	r3, [r4, #8]
	for (i = 0U; i < len && i < last_byte; i++) {
    a046:	e00d      	b.n	a064 <cf_write+0x70>
    a048:	7a21      	ldrb	r1, [r4, #8]
		u8_t chg_bits = value[i] ^ cfg->data[i];
    a04a:	f898 2000 	ldrb.w	r2, [r8]
	for (i = 0U; i < len && i < last_byte; i++) {
    a04e:	2301      	movs	r3, #1
		u8_t chg_bits = value[i] ^ cfg->data[i];
    a050:	404a      	eors	r2, r1
			if ((BIT(bit) & chg_bits) &&
    a052:	07d0      	lsls	r0, r2, #31
    a054:	d5ed      	bpl.n	a032 <cf_write+0x3e>
    a056:	07ca      	lsls	r2, r1, #31
    a058:	d5eb      	bpl.n	a032 <cf_write+0x3e>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    a05a:	f06f 0512 	mvn.w	r5, #18
    a05e:	e7e4      	b.n	a02a <cf_write+0x36>
	for (i = 0U; i < len && i < last_byte; i++) {
    a060:	2e00      	cmp	r6, #0
    a062:	d1e9      	bne.n	a038 <cf_write+0x44>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    a064:	f107 017c 	add.w	r1, r7, #124	; 0x7c
    a068:	1c60      	adds	r0, r4, #1
    a06a:	f00a fceb 	bl	14a44 <bt_addr_le_copy>
	cfg->id = conn->id;
    a06e:	4620      	mov	r0, r4
    a070:	7a3b      	ldrb	r3, [r7, #8]
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    a072:	2100      	movs	r1, #0
	cfg->id = conn->id;
    a074:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    a078:	f00a fd51 	bl	14b1e <atomic_set_bit>
	return len;
    a07c:	e7d5      	b.n	a02a <cf_write+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    a07e:	f06f 0506 	mvn.w	r5, #6
    a082:	e7d2      	b.n	a02a <cf_write+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    a084:	f06f 050c 	mvn.w	r5, #12
    a088:	e7cf      	b.n	a02a <cf_write+0x36>
    a08a:	bf00      	nop
    a08c:	0001a912 	.word	0x0001a912

0000a090 <sc_indicate_rsp>:
{
    a090:	b538      	push	{r3, r4, r5, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a092:	4d10      	ldr	r5, [pc, #64]	; (a0d4 <sc_indicate_rsp+0x44>)
    a094:	4604      	mov	r4, r0
    a096:	f06f 0102 	mvn.w	r1, #2
    a09a:	4628      	mov	r0, r5
    a09c:	f00a fce3 	bl	14a66 <atomic_and>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a0a0:	e8d5 3faf 	lda	r3, [r5]
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    a0a4:	07da      	lsls	r2, r3, #31
    a0a6:	d506      	bpl.n	a0b6 <sc_indicate_rsp+0x26>
    a0a8:	2200      	movs	r2, #0
    a0aa:	2300      	movs	r3, #0
    a0ac:	480a      	ldr	r0, [pc, #40]	; (a0d8 <sc_indicate_rsp+0x48>)
    a0ae:	f1a5 0120 	sub.w	r1, r5, #32
    a0b2:	f007 f809 	bl	110c8 <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
    a0b6:	4620      	mov	r0, r4
    a0b8:	f7ff ff6c 	bl	9f94 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    a0bc:	b140      	cbz	r0, a0d0 <sc_indicate_rsp+0x40>
    a0be:	7a03      	ldrb	r3, [r0, #8]
    a0c0:	07db      	lsls	r3, r3, #31
    a0c2:	d505      	bpl.n	a0d0 <sc_indicate_rsp+0x40>
}
    a0c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    a0c8:	2100      	movs	r1, #0
    a0ca:	300c      	adds	r0, #12
    a0cc:	f00a bd27 	b.w	14b1e <atomic_set_bit>
}
    a0d0:	bd38      	pop	{r3, r4, r5, pc}
    a0d2:	bf00      	nop
    a0d4:	20000fc4 	.word	0x20000fc4
    a0d8:	20001dcc 	.word	0x20001dcc

0000a0dc <cf_set>:
{
    a0dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    a0e0:	4688      	mov	r8, r1
    a0e2:	4616      	mov	r6, r2
    a0e4:	461f      	mov	r7, r3
	if (!name) {
    a0e6:	4605      	mov	r5, r0
    a0e8:	b948      	cbnz	r0, a0fe <cf_set+0x22>
		BT_ERR("Insufficient number of arguments");
    a0ea:	2145      	movs	r1, #69	; 0x45
    a0ec:	4821      	ldr	r0, [pc, #132]	; (a174 <cf_set+0x98>)
    a0ee:	f008 f80b 	bl	12108 <printk>
		return -EINVAL;
    a0f2:	f06f 0415 	mvn.w	r4, #21
}
    a0f6:	4620      	mov	r0, r4
    a0f8:	b004      	add	sp, #16
    a0fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
    a0fe:	a902      	add	r1, sp, #8
    a100:	f009 fb8e 	bl	13820 <bt_settings_decode_key>
	if (err) {
    a104:	4604      	mov	r4, r0
    a106:	b128      	cbz	r0, a114 <cf_set+0x38>
		BT_ERR("Unable to decode address %s", log_strdup(name));
    a108:	462a      	mov	r2, r5
    a10a:	2145      	movs	r1, #69	; 0x45
    a10c:	481a      	ldr	r0, [pc, #104]	; (a178 <cf_set+0x9c>)
    a10e:	f007 fffb 	bl	12108 <printk>
    a112:	e7ee      	b.n	a0f2 <cf_set+0x16>
	settings_name_next(name, &next);
    a114:	4628      	mov	r0, r5
    a116:	a901      	add	r1, sp, #4
    a118:	f008 fbec 	bl	128f4 <settings_name_next>
	if (!next) {
    a11c:	9801      	ldr	r0, [sp, #4]
    a11e:	b190      	cbz	r0, a146 <cf_set+0x6a>
		id = strtol(next, NULL, 10);
    a120:	220a      	movs	r2, #10
    a122:	4621      	mov	r1, r4
    a124:	f009 fa40 	bl	135a8 <strtol>
    a128:	b2c0      	uxtb	r0, r0
	cfg = find_cf_cfg_by_addr(id, &addr);
    a12a:	a902      	add	r1, sp, #8
    a12c:	f7ff ff10 	bl	9f50 <find_cf_cfg_by_addr>
	if (!cfg) {
    a130:	4601      	mov	r1, r0
    a132:	b950      	cbnz	r0, a14a <cf_set+0x6e>
		cfg = find_cf_cfg(NULL);
    a134:	f7ff ff2e 	bl	9f94 <find_cf_cfg>
		if (!cfg) {
    a138:	4601      	mov	r1, r0
    a13a:	b930      	cbnz	r0, a14a <cf_set+0x6e>
			BT_ERR("Unable to restore CF: no cfg left");
    a13c:	2145      	movs	r1, #69	; 0x45
    a13e:	480f      	ldr	r0, [pc, #60]	; (a17c <cf_set+0xa0>)
    a140:	f007 ffe2 	bl	12108 <printk>
			return 0;
    a144:	e7d7      	b.n	a0f6 <cf_set+0x1a>
		id = BT_ID_DEFAULT;
    a146:	4620      	mov	r0, r4
    a148:	e7ef      	b.n	a12a <cf_set+0x4e>
	if (len_rd) {
    a14a:	f1b8 0f00 	cmp.w	r8, #0
    a14e:	d00c      	beq.n	a16a <cf_set+0x8e>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
    a150:	2201      	movs	r2, #1
    a152:	4638      	mov	r0, r7
    a154:	3108      	adds	r1, #8
    a156:	47b0      	blx	r6
		if (len < 0) {
    a158:	1e05      	subs	r5, r0, #0
    a15a:	dacc      	bge.n	a0f6 <cf_set+0x1a>
			BT_ERR("Failed to decode value (err %zd)", len);
    a15c:	462a      	mov	r2, r5
    a15e:	2145      	movs	r1, #69	; 0x45
    a160:	4807      	ldr	r0, [pc, #28]	; (a180 <cf_set+0xa4>)
    a162:	f007 ffd1 	bl	12108 <printk>
			return len;
    a166:	462c      	mov	r4, r5
    a168:	e7c5      	b.n	a0f6 <cf_set+0x1a>
		clear_cf_cfg(cfg);
    a16a:	4608      	mov	r0, r1
    a16c:	f00a fc92 	bl	14a94 <clear_cf_cfg>
    a170:	e7c1      	b.n	a0f6 <cf_set+0x1a>
    a172:	bf00      	nop
    a174:	00019127 	.word	0x00019127
    a178:	0001a8ca 	.word	0x0001a8ca
    a17c:	0001a943 	.word	0x0001a943
    a180:	0001a735 	.word	0x0001a735

0000a184 <gatt_write_ccc.constprop.0>:
static int gatt_write_ccc(struct bt_conn *conn, u16_t handle, u16_t value,
    a184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a188:	4688      	mov	r8, r1
    a18a:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    a18c:	2112      	movs	r1, #18
    a18e:	2204      	movs	r2, #4
static int gatt_write_ccc(struct bt_conn *conn, u16_t handle, u16_t value,
    a190:	4606      	mov	r6, r0
    a192:	461d      	mov	r5, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    a194:	f7fe fd24 	bl	8be0 <bt_att_create_pdu>
	if (!buf) {
    a198:	4604      	mov	r4, r0
    a19a:	b1e8      	cbz	r0, a1d8 <gatt_write_ccc.constprop.0+0x54>
	req = net_buf_add(buf, sizeof(*req));
    a19c:	f100 0908 	add.w	r9, r0, #8
    a1a0:	2102      	movs	r1, #2
    a1a2:	4648      	mov	r0, r9
    a1a4:	f003 fb14 	bl	d7d0 <net_buf_simple_add>
	net_buf_add_le16(buf, value);
    a1a8:	4639      	mov	r1, r7
	req->handle = sys_cpu_to_le16(handle);
    a1aa:	f8a0 8000 	strh.w	r8, [r0]
	net_buf_add_le16(buf, value);
    a1ae:	4648      	mov	r0, r9
    a1b0:	f00b fb2f 	bl	15812 <net_buf_simple_add_le16>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a1b4:	f105 030c 	add.w	r3, r5, #12
    a1b8:	e8d3 2fef 	ldaex	r2, [r3]
    a1bc:	f042 0204 	orr.w	r2, r2, #4
    a1c0:	e8c3 2fe1 	stlex	r1, r2, [r3]
    a1c4:	2900      	cmp	r1, #0
    a1c6:	d1f7      	bne.n	a1b8 <gatt_write_ccc.constprop.0+0x34>
	return gatt_send(conn, buf, func, params, NULL);
    a1c8:	462b      	mov	r3, r5
    a1ca:	4621      	mov	r1, r4
    a1cc:	4630      	mov	r0, r6
}
    a1ce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, func, params, NULL);
    a1d2:	4a03      	ldr	r2, [pc, #12]	; (a1e0 <gatt_write_ccc.constprop.0+0x5c>)
    a1d4:	f7ff bc18 	b.w	9a08 <gatt_send.constprop.0>
}
    a1d8:	f06f 000b 	mvn.w	r0, #11
    a1dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a1e0:	00014cdb 	.word	0x00014cdb

0000a1e4 <bt_gatt_clear_sc>:
{
    a1e4:	b570      	push	{r4, r5, r6, lr}
    a1e6:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
    a1e8:	f7ff fd86 	bl	9cf8 <find_sc_cfg>
	if (!cfg) {
    a1ec:	4604      	mov	r4, r0
    a1ee:	b1e8      	cbz	r0, a22c <bt_gatt_clear_sc+0x48>
		if (cfg->id) {
    a1f0:	4605      	mov	r5, r0
    a1f2:	f815 2b01 	ldrb.w	r2, [r5], #1
    a1f6:	b1e2      	cbz	r2, a232 <bt_gatt_clear_sc+0x4e>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
    a1f8:	ae02      	add	r6, sp, #8
    a1fa:	2104      	movs	r1, #4
    a1fc:	4630      	mov	r0, r6
    a1fe:	f007 feed 	bl	11fdc <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
    a202:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
    a204:	4a0c      	ldr	r2, [pc, #48]	; (a238 <bt_gatt_clear_sc+0x54>)
    a206:	462b      	mov	r3, r5
    a208:	2124      	movs	r1, #36	; 0x24
    a20a:	a803      	add	r0, sp, #12
    a20c:	f7fa fbba 	bl	4984 <bt_settings_encode_key>
		err = settings_delete(key);
    a210:	a803      	add	r0, sp, #12
    a212:	f008 fb48 	bl	128a6 <settings_delete>
		if (err) {
    a216:	4602      	mov	r2, r0
    a218:	b118      	cbz	r0, a222 <bt_gatt_clear_sc+0x3e>
			BT_ERR("failed to delete SC (err %d)", err);
    a21a:	2145      	movs	r1, #69	; 0x45
    a21c:	4807      	ldr	r0, [pc, #28]	; (a23c <bt_gatt_clear_sc+0x58>)
    a21e:	f007 ff73 	bl	12108 <printk>
	memset(cfg, 0, sizeof(*cfg));
    a222:	220c      	movs	r2, #12
    a224:	2100      	movs	r1, #0
    a226:	4620      	mov	r0, r4
    a228:	f009 faae 	bl	13788 <memset>
}
    a22c:	2000      	movs	r0, #0
    a22e:	b00c      	add	sp, #48	; 0x30
    a230:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
    a232:	9200      	str	r2, [sp, #0]
    a234:	e7e6      	b.n	a204 <bt_gatt_clear_sc+0x20>
    a236:	bf00      	nop
    a238:	0001ac3f 	.word	0x0001ac3f
    a23c:	0001a96a 	.word	0x0001a96a

0000a240 <sc_clear>:
{
    a240:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    a242:	f100 067c 	add.w	r6, r0, #124	; 0x7c
{
    a246:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    a248:	4631      	mov	r1, r6
    a24a:	7a00      	ldrb	r0, [r0, #8]
    a24c:	f009 fd07 	bl	13c5e <bt_addr_le_is_bonded>
    a250:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
    a252:	4631      	mov	r1, r6
    a254:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    a256:	b14d      	cbz	r5, a26c <sc_clear+0x2c>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
    a258:	f7ff ffc4 	bl	a1e4 <bt_gatt_clear_sc>
		if (err) {
    a25c:	4602      	mov	r2, r0
    a25e:	b170      	cbz	r0, a27e <sc_clear+0x3e>
}
    a260:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Failed to clear SC %d", err);
    a264:	2145      	movs	r1, #69	; 0x45
    a266:	4806      	ldr	r0, [pc, #24]	; (a280 <sc_clear+0x40>)
    a268:	f007 bf4e 	b.w	12108 <printk>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
    a26c:	f7ff fd44 	bl	9cf8 <find_sc_cfg>
		if (cfg) {
    a270:	b128      	cbz	r0, a27e <sc_clear+0x3e>
	memset(cfg, 0, sizeof(*cfg));
    a272:	4629      	mov	r1, r5
}
    a274:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
    a278:	220c      	movs	r2, #12
    a27a:	f009 ba85 	b.w	13788 <memset>
}
    a27e:	bd70      	pop	{r4, r5, r6, pc}
    a280:	0001a98c 	.word	0x0001a98c

0000a284 <disconnected_cb>:
	if (attr->write != bt_gatt_attr_write_ccc) {
    a284:	6882      	ldr	r2, [r0, #8]
    a286:	4b20      	ldr	r3, [pc, #128]	; (a308 <disconnected_cb+0x84>)
{
    a288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    a28c:	429a      	cmp	r2, r3
{
    a28e:	4606      	mov	r6, r0
    a290:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    a292:	d102      	bne.n	a29a <disconnected_cb+0x16>
	ccc = attr->user_data;
    a294:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
    a296:	8963      	ldrh	r3, [r4, #10]
    a298:	b9c3      	cbnz	r3, a2cc <disconnected_cb+0x48>
}
    a29a:	2001      	movs	r0, #1
    a29c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    a2a0:	f105 087c 	add.w	r8, r5, #124	; 0x7c
    a2a4:	4641      	mov	r1, r8
    a2a6:	7a28      	ldrb	r0, [r5, #8]
    a2a8:	f009 fcd9 	bl	13c5e <bt_addr_le_is_bonded>
    a2ac:	b948      	cbnz	r0, a2c2 <disconnected_cb+0x3e>
				if (ccc == &sc_ccc) {
    a2ae:	4b17      	ldr	r3, [pc, #92]	; (a30c <disconnected_cb+0x88>)
    a2b0:	429c      	cmp	r4, r3
    a2b2:	d102      	bne.n	a2ba <disconnected_cb+0x36>
					sc_clear(conn);
    a2b4:	4628      	mov	r0, r5
    a2b6:	f7ff ffc3 	bl	a240 <sc_clear>
				clear_ccc_cfg(cfg);
    a2ba:	4620      	mov	r0, r4
    a2bc:	f00a fbc5 	bl	14a4a <clear_ccc_cfg>
	if (!value_used) {
    a2c0:	e019      	b.n	a2f6 <disconnected_cb+0x72>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    a2c2:	4641      	mov	r1, r8
    a2c4:	4638      	mov	r0, r7
    a2c6:	f00a fbbd 	bl	14a44 <bt_addr_le_copy>
	if (!value_used) {
    a2ca:	e014      	b.n	a2f6 <disconnected_cb+0x72>
		if (!cfg->value) {
    a2cc:	8923      	ldrh	r3, [r4, #8]
    a2ce:	b193      	cbz	r3, a2f6 <disconnected_cb+0x72>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    a2d0:	4627      	mov	r7, r4
    a2d2:	f817 1b01 	ldrb.w	r1, [r7], #1
    a2d6:	4628      	mov	r0, r5
    a2d8:	463a      	mov	r2, r7
    a2da:	f009 fda4 	bl	13e26 <bt_conn_is_peer_addr_le>
    a2de:	2800      	cmp	r0, #0
    a2e0:	d1de      	bne.n	a2a0 <disconnected_cb+0x1c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    a2e2:	4639      	mov	r1, r7
    a2e4:	7820      	ldrb	r0, [r4, #0]
    a2e6:	f7fd f8b3 	bl	7450 <bt_conn_lookup_addr_le>
			if (tmp) {
    a2ea:	b120      	cbz	r0, a2f6 <disconnected_cb+0x72>
				if (tmp->state == BT_CONN_CONNECTED) {
    a2ec:	7b45      	ldrb	r5, [r0, #13]
				bt_conn_unref(tmp);
    a2ee:	f009 fdc1 	bl	13e74 <bt_conn_unref>
	if (!value_used) {
    a2f2:	2d06      	cmp	r5, #6
    a2f4:	d0d1      	beq.n	a29a <disconnected_cb+0x16>
		ccc->value = 0U;
    a2f6:	2100      	movs	r1, #0
		if (ccc->cfg_changed) {
    a2f8:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
    a2fa:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
    a2fc:	2b00      	cmp	r3, #0
    a2fe:	d0cc      	beq.n	a29a <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
    a300:	4630      	mov	r0, r6
    a302:	4798      	blx	r3
    a304:	e7c9      	b.n	a29a <disconnected_cb+0x16>
    a306:	bf00      	nop
    a308:	00009ba1 	.word	0x00009ba1
    a30c:	2000026c 	.word	0x2000026c

0000a310 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    a310:	2201      	movs	r2, #1
{
    a312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a314:	4b20      	ldr	r3, [pc, #128]	; (a398 <bt_gatt_init+0x88>)
    a316:	e8d3 1fef 	ldaex	r1, [r3]
    a31a:	2900      	cmp	r1, #0
    a31c:	d103      	bne.n	a326 <bt_gatt_init+0x16>
    a31e:	e8c3 2fe0 	stlex	r0, r2, [r3]
    a322:	2800      	cmp	r0, #0
    a324:	d1f7      	bne.n	a316 <bt_gatt_init+0x6>
	if (!atomic_cas(&init, 0, 1)) {
    a326:	d032      	beq.n	a38e <bt_gatt_init+0x7e>
}
    a328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		last_static_handle += svc->attr_count;
    a32a:	4a1c      	ldr	r2, [pc, #112]	; (a39c <bt_gatt_init+0x8c>)
    a32c:	6863      	ldr	r3, [r4, #4]
    a32e:	8811      	ldrh	r1, [r2, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    a330:	3408      	adds	r4, #8
		last_static_handle += svc->attr_count;
    a332:	440b      	add	r3, r1
    a334:	8013      	strh	r3, [r2, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    a336:	42ac      	cmp	r4, r5
    a338:	d90e      	bls.n	a358 <bt_gatt_init+0x48>
    a33a:	4919      	ldr	r1, [pc, #100]	; (a3a0 <bt_gatt_init+0x90>)
    a33c:	f44f 7375 	mov.w	r3, #980	; 0x3d4
    a340:	4632      	mov	r2, r6
    a342:	4818      	ldr	r0, [pc, #96]	; (a3a4 <bt_gatt_init+0x94>)
    a344:	f007 fee0 	bl	12108 <printk>
    a348:	4817      	ldr	r0, [pc, #92]	; (a3a8 <bt_gatt_init+0x98>)
    a34a:	f007 fedd 	bl	12108 <printk>
    a34e:	f44f 7175 	mov.w	r1, #980	; 0x3d4
    a352:	4630      	mov	r0, r6
    a354:	f008 f96e 	bl	12634 <assert_post_action>
    a358:	42bc      	cmp	r4, r7
    a35a:	d3e6      	bcc.n	a32a <bt_gatt_init+0x1a>
	k_delayed_work_init(&db_hash_work, db_hash_process);
    a35c:	4913      	ldr	r1, [pc, #76]	; (a3ac <bt_gatt_init+0x9c>)
    a35e:	4814      	ldr	r0, [pc, #80]	; (a3b0 <bt_gatt_init+0xa0>)
    a360:	f00c facf 	bl	16902 <k_delayed_work_init>
    a364:	2300      	movs	r3, #0
    a366:	f44f 72a4 	mov.w	r2, #328	; 0x148
    a36a:	4911      	ldr	r1, [pc, #68]	; (a3b0 <bt_gatt_init+0xa0>)
    a36c:	4811      	ldr	r0, [pc, #68]	; (a3b4 <bt_gatt_init+0xa4>)
    a36e:	f006 feab 	bl	110c8 <k_delayed_work_submit_to_queue>
		k_delayed_work_init(&gatt_sc.work, sc_process);
    a372:	4911      	ldr	r1, [pc, #68]	; (a3b8 <bt_gatt_init+0xa8>)
    a374:	4811      	ldr	r0, [pc, #68]	; (a3bc <bt_gatt_init+0xac>)
    a376:	f00c fac4 	bl	16902 <k_delayed_work_init>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a37a:	4b11      	ldr	r3, [pc, #68]	; (a3c0 <bt_gatt_init+0xb0>)
    a37c:	e8d3 2fef 	ldaex	r2, [r3]
    a380:	f042 0202 	orr.w	r2, r2, #2
    a384:	e8c3 2fe1 	stlex	r1, r2, [r3]
    a388:	2900      	cmp	r1, #0
    a38a:	d0cd      	beq.n	a328 <bt_gatt_init+0x18>
    a38c:	e7f6      	b.n	a37c <bt_gatt_init+0x6c>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    a38e:	4d0d      	ldr	r5, [pc, #52]	; (a3c4 <bt_gatt_init+0xb4>)
    a390:	4c0d      	ldr	r4, [pc, #52]	; (a3c8 <bt_gatt_init+0xb8>)
    a392:	462f      	mov	r7, r5
    a394:	4e0d      	ldr	r6, [pc, #52]	; (a3cc <bt_gatt_init+0xbc>)
    a396:	e7ce      	b.n	a336 <bt_gatt_init+0x26>
    a398:	20000fc8 	.word	0x20000fc8
    a39c:	20001e6c 	.word	0x20001e6c
    a3a0:	0001a7e6 	.word	0x0001a7e6
    a3a4:	00017d82 	.word	0x00017d82
    a3a8:	00017d9f 	.word	0x00017d9f
    a3ac:	00014dcb 	.word	0x00014dcb
    a3b0:	20000f6c 	.word	0x20000f6c
    a3b4:	20001dcc 	.word	0x20001dcc
    a3b8:	0000a839 	.word	0x0000a839
    a3bc:	20000fa4 	.word	0x20000fa4
    a3c0:	20000fc4 	.word	0x20000fc4
    a3c4:	00016d0c 	.word	0x00016d0c
    a3c8:	00016cfc 	.word	0x00016cfc
    a3cc:	0001a7af 	.word	0x0001a7af

0000a3d0 <bt_gatt_attr_value_handle>:
{
    a3d0:	b508      	push	{r3, lr}
	if ((attr != NULL)
    a3d2:	b180      	cbz	r0, a3f6 <bt_gatt_attr_value_handle+0x26>
	    && (attr->read == bt_gatt_attr_read_chrc)) {
    a3d4:	6841      	ldr	r1, [r0, #4]
    a3d6:	4b09      	ldr	r3, [pc, #36]	; (a3fc <bt_gatt_attr_value_handle+0x2c>)
    a3d8:	4299      	cmp	r1, r3
    a3da:	d10c      	bne.n	a3f6 <bt_gatt_attr_value_handle+0x26>
		handle = chrc->value_handle;
    a3dc:	68c3      	ldr	r3, [r0, #12]
    a3de:	889b      	ldrh	r3, [r3, #4]
		if (handle == 0) {
    a3e0:	b91b      	cbnz	r3, a3ea <bt_gatt_attr_value_handle+0x1a>
			handle = (attr->handle ? : find_static_attr(attr)) + 1U;
    a3e2:	8a03      	ldrh	r3, [r0, #16]
    a3e4:	b11b      	cbz	r3, a3ee <bt_gatt_attr_value_handle+0x1e>
    a3e6:	3301      	adds	r3, #1
    a3e8:	b29b      	uxth	r3, r3
}
    a3ea:	4618      	mov	r0, r3
    a3ec:	bd08      	pop	{r3, pc}
			handle = (attr->handle ? : find_static_attr(attr)) + 1U;
    a3ee:	f7ff fa9b 	bl	9928 <find_static_attr>
    a3f2:	1c43      	adds	r3, r0, #1
    a3f4:	e7f8      	b.n	a3e8 <bt_gatt_attr_value_handle+0x18>
	u16_t handle = 0;
    a3f6:	2300      	movs	r3, #0
    a3f8:	e7f7      	b.n	a3ea <bt_gatt_attr_value_handle+0x1a>
    a3fa:	bf00      	nop
    a3fc:	00014d53 	.word	0x00014d53

0000a400 <bt_gatt_foreach_attr_type>:
{
    a400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a404:	b089      	sub	sp, #36	; 0x24
    a406:	9300      	str	r3, [sp, #0]
		num_matches = UINT16_MAX;
    a408:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
    a40c:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48
    a410:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
    a412:	2d00      	cmp	r5, #0
    a414:	bf08      	it	eq
    a416:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    a418:	4b2f      	ldr	r3, [pc, #188]	; (a4d8 <bt_gatt_foreach_attr_type+0xd8>)
{
    a41a:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
    a41c:	881b      	ldrh	r3, [r3, #0]
{
    a41e:	9101      	str	r1, [sp, #4]
	if (start_handle <= last_static_handle) {
    a420:	4283      	cmp	r3, r0
    a422:	d34d      	bcc.n	a4c0 <bt_gatt_foreach_attr_type+0xc0>
		u16_t handle = 1;
    a424:	2401      	movs	r4, #1
    a426:	4e2d      	ldr	r6, [pc, #180]	; (a4dc <bt_gatt_foreach_attr_type+0xdc>)
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    a428:	f8df a0c0 	ldr.w	sl, [pc, #192]	; a4ec <bt_gatt_foreach_attr_type+0xec>
    a42c:	f8df b0c0 	ldr.w	fp, [pc, #192]	; a4f0 <bt_gatt_foreach_attr_type+0xf0>
    a430:	f1a6 0908 	sub.w	r9, r6, #8
    a434:	45d1      	cmp	r9, sl
    a436:	d90e      	bls.n	a456 <bt_gatt_foreach_attr_type+0x56>
    a438:	4929      	ldr	r1, [pc, #164]	; (a4e0 <bt_gatt_foreach_attr_type+0xe0>)
    a43a:	f240 5356 	movw	r3, #1366	; 0x556
    a43e:	465a      	mov	r2, fp
    a440:	4828      	ldr	r0, [pc, #160]	; (a4e4 <bt_gatt_foreach_attr_type+0xe4>)
    a442:	f007 fe61 	bl	12108 <printk>
    a446:	4828      	ldr	r0, [pc, #160]	; (a4e8 <bt_gatt_foreach_attr_type+0xe8>)
    a448:	f007 fe5e 	bl	12108 <printk>
    a44c:	f240 5156 	movw	r1, #1366	; 0x556
    a450:	4658      	mov	r0, fp
    a452:	f008 f8ef 	bl	12634 <assert_post_action>
    a456:	4b25      	ldr	r3, [pc, #148]	; (a4ec <bt_gatt_foreach_attr_type+0xec>)
    a458:	4599      	cmp	r9, r3
    a45a:	d231      	bcs.n	a4c0 <bt_gatt_foreach_attr_type+0xc0>
			if (handle + static_svc->attr_count < start_handle) {
    a45c:	f856 3c04 	ldr.w	r3, [r6, #-4]
    a460:	4423      	add	r3, r4
    a462:	42bb      	cmp	r3, r7
    a464:	d234      	bcs.n	a4d0 <bt_gatt_foreach_attr_type+0xd0>
				handle += static_svc->attr_count;
    a466:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    a468:	3608      	adds	r6, #8
    a46a:	e7e1      	b.n	a430 <bt_gatt_foreach_attr_type+0x30>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    a46c:	4640      	mov	r0, r8
    a46e:	9903      	ldr	r1, [sp, #12]
    a470:	f009 f9fa 	bl	13868 <bt_uuid_cmp>
    a474:	b1c8      	cbz	r0, a4aa <bt_gatt_foreach_attr_type+0xaa>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    a476:	3401      	adds	r4, #1
    a478:	f109 0901 	add.w	r9, r9, #1
    a47c:	b2a4      	uxth	r4, r4
    a47e:	f856 3c04 	ldr.w	r3, [r6, #-4]
    a482:	454b      	cmp	r3, r9
    a484:	d9f0      	bls.n	a468 <bt_gatt_foreach_attr_type+0x68>
				memcpy(&attr, &static_svc->attrs[i],
    a486:	2214      	movs	r2, #20
    a488:	f856 1c08 	ldr.w	r1, [r6, #-8]
    a48c:	a803      	add	r0, sp, #12
    a48e:	fb02 1109 	mla	r1, r2, r9, r1
    a492:	f009 f94e 	bl	13732 <memcpy>
	if (attr->handle > end_handle) {
    a496:	9b01      	ldr	r3, [sp, #4]
				attr.handle = handle;
    a498:	f8ad 401c 	strh.w	r4, [sp, #28]
	if (attr->handle > end_handle) {
    a49c:	429c      	cmp	r4, r3
    a49e:	d80f      	bhi.n	a4c0 <bt_gatt_foreach_attr_type+0xc0>
	if (attr->handle < start_handle) {
    a4a0:	42bc      	cmp	r4, r7
    a4a2:	d3e8      	bcc.n	a476 <bt_gatt_foreach_attr_type+0x76>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    a4a4:	f1b8 0f00 	cmp.w	r8, #0
    a4a8:	d1e0      	bne.n	a46c <bt_gatt_foreach_attr_type+0x6c>
	if (attr_data && attr_data != attr->user_data) {
    a4aa:	9b00      	ldr	r3, [sp, #0]
    a4ac:	b95b      	cbnz	r3, a4c6 <bt_gatt_foreach_attr_type+0xc6>
	*num_matches -= 1;
    a4ae:	3d01      	subs	r5, #1
    a4b0:	b2ad      	uxth	r5, r5
	result = func(attr, user_data);
    a4b2:	9914      	ldr	r1, [sp, #80]	; 0x50
    a4b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    a4b6:	a803      	add	r0, sp, #12
    a4b8:	4798      	blx	r3
	if (!*num_matches) {
    a4ba:	b10d      	cbz	r5, a4c0 <bt_gatt_foreach_attr_type+0xc0>
				if (gatt_foreach_iter(&attr, start_handle,
    a4bc:	2800      	cmp	r0, #0
    a4be:	d1da      	bne.n	a476 <bt_gatt_foreach_attr_type+0x76>
}
    a4c0:	b009      	add	sp, #36	; 0x24
    a4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr_data && attr_data != attr->user_data) {
    a4c6:	9b06      	ldr	r3, [sp, #24]
    a4c8:	9a00      	ldr	r2, [sp, #0]
    a4ca:	429a      	cmp	r2, r3
    a4cc:	d1d3      	bne.n	a476 <bt_gatt_foreach_attr_type+0x76>
    a4ce:	e7ee      	b.n	a4ae <bt_gatt_foreach_attr_type+0xae>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    a4d0:	f04f 0900 	mov.w	r9, #0
    a4d4:	e7d3      	b.n	a47e <bt_gatt_foreach_attr_type+0x7e>
    a4d6:	bf00      	nop
    a4d8:	20001e6c 	.word	0x20001e6c
    a4dc:	00016d04 	.word	0x00016d04
    a4e0:	0001a7df 	.word	0x0001a7df
    a4e4:	00017d82 	.word	0x00017d82
    a4e8:	00017d9f 	.word	0x00017d9f
    a4ec:	00016d0c 	.word	0x00016d0c
    a4f0:	0001a7af 	.word	0x0001a7af

0000a4f4 <db_hash_gen>:
{
    a4f4:	b530      	push	{r4, r5, lr}
	u8_t key[16] = {};
    a4f6:	2400      	movs	r4, #0
{
    a4f8:	b0c9      	sub	sp, #292	; 0x124
    a4fa:	4605      	mov	r5, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    a4fc:	4669      	mov	r1, sp
    a4fe:	aa1c      	add	r2, sp, #112	; 0x70
    a500:	a804      	add	r0, sp, #16
	u8_t key[16] = {};
    a502:	e9cd 4400 	strd	r4, r4, [sp]
    a506:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    a50a:	f008 fd44 	bl	12f96 <tc_cmac_setup>
    a50e:	b928      	cbnz	r0, a51c <db_hash_gen+0x28>
		BT_ERR("Unable to setup AES CMAC");
    a510:	2145      	movs	r1, #69	; 0x45
    a512:	4812      	ldr	r0, [pc, #72]	; (a55c <db_hash_gen+0x68>)
		BT_ERR("Unable to calculate hash");
    a514:	f007 fdf8 	bl	12108 <printk>
}
    a518:	b049      	add	sp, #292	; 0x124
    a51a:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    a51c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a520:	2001      	movs	r0, #1
    a522:	4a0f      	ldr	r2, [pc, #60]	; (a560 <db_hash_gen+0x6c>)
    a524:	ab04      	add	r3, sp, #16
    a526:	f00a fc45 	bl	14db4 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    a52a:	480e      	ldr	r0, [pc, #56]	; (a564 <db_hash_gen+0x70>)
    a52c:	a904      	add	r1, sp, #16
    a52e:	f008 fdc9 	bl	130c4 <tc_cmac_final>
    a532:	b910      	cbnz	r0, a53a <db_hash_gen+0x46>
		BT_ERR("Unable to calculate hash");
    a534:	2145      	movs	r1, #69	; 0x45
    a536:	480c      	ldr	r0, [pc, #48]	; (a568 <db_hash_gen+0x74>)
    a538:	e7ec      	b.n	a514 <db_hash_gen+0x20>
    a53a:	4b0a      	ldr	r3, [pc, #40]	; (a564 <db_hash_gen+0x70>)
    a53c:	f103 0210 	add.w	r2, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		u8_t tmp = ((u8_t *)buf)[i];
    a540:	7819      	ldrb	r1, [r3, #0]

		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    a542:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
    a546:	3401      	adds	r4, #1
    a548:	2c08      	cmp	r4, #8
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    a54a:	f803 0b01 	strb.w	r0, [r3], #1
		((u8_t *)buf)[length - 1 - i] = tmp;
    a54e:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
    a550:	d1f6      	bne.n	a540 <db_hash_gen+0x4c>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
    a552:	2d00      	cmp	r5, #0
    a554:	d0e0      	beq.n	a518 <db_hash_gen+0x24>
		db_hash_store();
    a556:	f7ff f9a9 	bl	98ac <db_hash_store>
    a55a:	e7dd      	b.n	a518 <db_hash_gen+0x24>
    a55c:	0001a9a7 	.word	0x0001a9a7
    a560:	00014995 	.word	0x00014995
    a564:	20001f69 	.word	0x20001f69
    a568:	0001a9c5 	.word	0x0001a9c5

0000a56c <db_hash_commit>:

static int db_hash_commit(void)
{
    a56c:	b510      	push	{r4, lr}
	int err;

	/* Stop work and generate the hash */
	err = k_delayed_work_cancel(&db_hash_work);
    a56e:	4823      	ldr	r0, [pc, #140]	; (a5fc <db_hash_commit+0x90>)
    a570:	f006 fe34 	bl	111dc <k_delayed_work_cancel>
	if (!err) {
    a574:	b908      	cbnz	r0, a57a <db_hash_commit+0xe>
		db_hash_gen(false);
    a576:	f7ff ffbd 	bl	a4f4 <db_hash_gen>
	}

	/* Check if hash matches then skip SC update */
	if (!memcmp(stored_hash, db_hash, sizeof(stored_hash))) {
    a57a:	2210      	movs	r2, #16
    a57c:	4920      	ldr	r1, [pc, #128]	; (a600 <db_hash_commit+0x94>)
    a57e:	4821      	ldr	r0, [pc, #132]	; (a604 <db_hash_commit+0x98>)
    a580:	f009 f8c7 	bl	13712 <memcmp>
    a584:	b948      	cbnz	r0, a59a <db_hash_commit+0x2e>
		BT_DBG("Database Hash matches");
		k_delayed_work_cancel(&gatt_sc.work);
    a586:	4820      	ldr	r0, [pc, #128]	; (a608 <db_hash_commit+0x9c>)
    a588:	f006 fe28 	bl	111dc <k_delayed_work_cancel>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a58c:	f06f 0101 	mvn.w	r1, #1
    a590:	481e      	ldr	r0, [pc, #120]	; (a60c <db_hash_commit+0xa0>)
    a592:	f00a fa68 	bl	14a66 <atomic_and>

	/* Hash did not match overwrite with current hash */
	db_hash_store();

	return 0;
}
    a596:	2000      	movs	r0, #0
    a598:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a59a:	491d      	ldr	r1, [pc, #116]	; (a610 <db_hash_commit+0xa4>)
    a59c:	f101 0338 	add.w	r3, r1, #56	; 0x38
    a5a0:	e8d3 2fef 	ldaex	r2, [r3]
    a5a4:	f042 0001 	orr.w	r0, r2, #1
    a5a8:	e8c3 0fe4 	stlex	r4, r0, [r3]
    a5ac:	2c00      	cmp	r4, #0
    a5ae:	d1f7      	bne.n	a5a0 <db_hash_commit+0x34>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    a5b0:	f012 0f01 	tst.w	r2, #1
    a5b4:	460a      	mov	r2, r1
    a5b6:	d10f      	bne.n	a5d8 <db_hash_commit+0x6c>
		gatt_sc.start = start;
    a5b8:	4a16      	ldr	r2, [pc, #88]	; (a614 <db_hash_commit+0xa8>)
    a5ba:	614a      	str	r2, [r1, #20]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a5bc:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
    a5c0:	079b      	lsls	r3, r3, #30
    a5c2:	d406      	bmi.n	a5d2 <db_hash_commit+0x66>
    a5c4:	f44f 72a4 	mov.w	r2, #328	; 0x148
    a5c8:	2300      	movs	r3, #0
    a5ca:	490f      	ldr	r1, [pc, #60]	; (a608 <db_hash_commit+0x9c>)
    a5cc:	4812      	ldr	r0, [pc, #72]	; (a618 <db_hash_commit+0xac>)
    a5ce:	f006 fd7b 	bl	110c8 <k_delayed_work_submit_to_queue>
	db_hash_store();
    a5d2:	f7ff f96b 	bl	98ac <db_hash_store>
	return 0;
    a5d6:	e7de      	b.n	a596 <db_hash_commit+0x2a>
	if (new_start >= *start && new_end <= *end) {
    a5d8:	8ac8      	ldrh	r0, [r1, #22]
    a5da:	8a89      	ldrh	r1, [r1, #20]
    a5dc:	2901      	cmp	r1, #1
    a5de:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a5e2:	d805      	bhi.n	a5f0 <db_hash_commit+0x84>
    a5e4:	4288      	cmp	r0, r1
    a5e6:	d0f4      	beq.n	a5d2 <db_hash_commit+0x66>
		*end = new_end;
    a5e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a5ec:	82d1      	strh	r1, [r2, #22]
    a5ee:	e7e5      	b.n	a5bc <db_hash_commit+0x50>
		*start = new_start;
    a5f0:	2401      	movs	r4, #1
	if (*end < new_end) {
    a5f2:	4288      	cmp	r0, r1
		*start = new_start;
    a5f4:	8294      	strh	r4, [r2, #20]
	if (*end < new_end) {
    a5f6:	d0e1      	beq.n	a5bc <db_hash_commit+0x50>
    a5f8:	e7f6      	b.n	a5e8 <db_hash_commit+0x7c>
    a5fa:	bf00      	nop
    a5fc:	20000f6c 	.word	0x20000f6c
    a600:	20001f69 	.word	0x20001f69
    a604:	20001f79 	.word	0x20001f79
    a608:	20000fa4 	.word	0x20000fa4
    a60c:	20000fc4 	.word	0x20000fc4
    a610:	20000f8c 	.word	0x20000f8c
    a614:	ffff0001 	.word	0xffff0001
    a618:	20001dcc 	.word	0x20001dcc

0000a61c <ccc_set_direct>:
{
    a61c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a620:	b0b9      	sub	sp, #228	; 0xe4
    a622:	4688      	mov	r8, r1
    a624:	4616      	mov	r6, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    a626:	492c      	ldr	r1, [pc, #176]	; (a6d8 <ccc_set_direct+0xbc>)
    a628:	466a      	mov	r2, sp
    a62a:	9840      	ldr	r0, [sp, #256]	; 0x100
{
    a62c:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    a62e:	f008 f93e 	bl	128ae <settings_name_steq>
    a632:	b948      	cbnz	r0, a648 <ccc_set_direct+0x2c>
			BT_ERR("Invalid key");
    a634:	2145      	movs	r1, #69	; 0x45
    a636:	4829      	ldr	r0, [pc, #164]	; (a6dc <ccc_set_direct+0xc0>)
    a638:	f007 fd66 	bl	12108 <printk>
    a63c:	f06f 0515 	mvn.w	r5, #21
}
    a640:	4628      	mov	r0, r5
    a642:	b039      	add	sp, #228	; 0xe4
    a644:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
    a648:	9c00      	ldr	r4, [sp, #0]
		settings_name_next(name, &next);
    a64a:	a901      	add	r1, sp, #4
    a64c:	4620      	mov	r0, r4
    a64e:	f008 f951 	bl	128f4 <settings_name_next>
		if (!name) {
    a652:	b93c      	cbnz	r4, a664 <ccc_set_direct+0x48>
			BT_ERR("Insufficient number of arguments");
    a654:	2145      	movs	r1, #69	; 0x45
    a656:	4822      	ldr	r0, [pc, #136]	; (a6e0 <ccc_set_direct+0xc4>)
    a658:	f007 fd56 	bl	12108 <printk>
			return -EINVAL;
    a65c:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
    a660:	4625      	mov	r5, r4
    a662:	e7ed      	b.n	a640 <ccc_set_direct+0x24>
		} else if (!next) {
    a664:	9801      	ldr	r0, [sp, #4]
    a666:	b978      	cbnz	r0, a688 <ccc_set_direct+0x6c>
		err = bt_settings_decode_key(name, &addr);
    a668:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = strtol(next, NULL, 10);
    a66c:	f88d 0014 	strb.w	r0, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
    a670:	4649      	mov	r1, r9
    a672:	4620      	mov	r0, r4
    a674:	f009 f8d4 	bl	13820 <bt_settings_decode_key>
		if (err) {
    a678:	4605      	mov	r5, r0
    a67a:	b150      	cbz	r0, a692 <ccc_set_direct+0x76>
			BT_ERR("Unable to decode address %s", log_strdup(name));
    a67c:	4622      	mov	r2, r4
    a67e:	2145      	movs	r1, #69	; 0x45
    a680:	4818      	ldr	r0, [pc, #96]	; (a6e4 <ccc_set_direct+0xc8>)
    a682:	f007 fd41 	bl	12108 <printk>
    a686:	e7e9      	b.n	a65c <ccc_set_direct+0x40>
			load.addr_with_id.id = strtol(next, NULL, 10);
    a688:	220a      	movs	r2, #10
    a68a:	2100      	movs	r1, #0
    a68c:	f008 ff8c 	bl	135a8 <strtol>
    a690:	e7ea      	b.n	a668 <ccc_set_direct+0x4c>
		load.addr_with_id.addr = &addr;
    a692:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
    a696:	f1b8 0f00 	cmp.w	r8, #0
    a69a:	d019      	beq.n	a6d0 <ccc_set_direct+0xb4>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
    a69c:	f10d 0820 	add.w	r8, sp, #32
    a6a0:	22c0      	movs	r2, #192	; 0xc0
    a6a2:	4641      	mov	r1, r8
    a6a4:	4638      	mov	r0, r7
    a6a6:	47b0      	blx	r6
			if (len < 0) {
    a6a8:	1e04      	subs	r4, r0, #0
    a6aa:	da05      	bge.n	a6b8 <ccc_set_direct+0x9c>
				BT_ERR("Failed to decode value (err %zd)", len);
    a6ac:	4622      	mov	r2, r4
    a6ae:	2145      	movs	r1, #69	; 0x45
    a6b0:	480d      	ldr	r0, [pc, #52]	; (a6e8 <ccc_set_direct+0xcc>)
    a6b2:	f007 fd29 	bl	12108 <printk>
				return len;
    a6b6:	e7d3      	b.n	a660 <ccc_set_direct+0x44>
			load.count = len / sizeof(*ccc_store);
    a6b8:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
    a6ba:	f8cd 8018 	str.w	r8, [sp, #24]
			load.count = len / sizeof(*ccc_store);
    a6be:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
    a6c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a6c4:	2001      	movs	r0, #1
    a6c6:	4a09      	ldr	r2, [pc, #36]	; (a6ec <ccc_set_direct+0xd0>)
    a6c8:	ab04      	add	r3, sp, #16
    a6ca:	f00a fb73 	bl	14db4 <bt_gatt_foreach_attr>
	return 0;
    a6ce:	e7b7      	b.n	a640 <ccc_set_direct+0x24>
			load.count = 0;
    a6d0:	e9cd 0006 	strd	r0, r0, [sp, #24]
    a6d4:	e7f4      	b.n	a6c0 <ccc_set_direct+0xa4>
    a6d6:	bf00      	nop
    a6d8:	0001a9e3 	.word	0x0001a9e3
    a6dc:	0001a9ea 	.word	0x0001a9ea
    a6e0:	00019127 	.word	0x00019127
    a6e4:	0001a8ca 	.word	0x0001a8ca
    a6e8:	0001a735 	.word	0x0001a735
    a6ec:	00009b11 	.word	0x00009b11

0000a6f0 <bt_gatt_indicate>:
{
    a6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a6f2:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
    a6f4:	460e      	mov	r6, r1
{
    a6f6:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
    a6f8:	b971      	cbnz	r1, a718 <bt_gatt_indicate+0x28>
    a6fa:	4947      	ldr	r1, [pc, #284]	; (a818 <bt_gatt_indicate+0x128>)
    a6fc:	f240 736b 	movw	r3, #1899	; 0x76b
    a700:	4a46      	ldr	r2, [pc, #280]	; (a81c <bt_gatt_indicate+0x12c>)
    a702:	4847      	ldr	r0, [pc, #284]	; (a820 <bt_gatt_indicate+0x130>)
    a704:	f007 fd00 	bl	12108 <printk>
    a708:	4846      	ldr	r0, [pc, #280]	; (a824 <bt_gatt_indicate+0x134>)
    a70a:	f007 fcfd 	bl	12108 <printk>
    a70e:	f240 716b 	movw	r1, #1899	; 0x76b
    a712:	4842      	ldr	r0, [pc, #264]	; (a81c <bt_gatt_indicate+0x12c>)
    a714:	f007 ff8e 	bl	12634 <assert_post_action>
	__ASSERT(params->attr, "invalid parameters\n");
    a718:	6873      	ldr	r3, [r6, #4]
    a71a:	b973      	cbnz	r3, a73a <bt_gatt_indicate+0x4a>
    a71c:	4942      	ldr	r1, [pc, #264]	; (a828 <bt_gatt_indicate+0x138>)
    a71e:	f240 736c 	movw	r3, #1900	; 0x76c
    a722:	4a3e      	ldr	r2, [pc, #248]	; (a81c <bt_gatt_indicate+0x12c>)
    a724:	483e      	ldr	r0, [pc, #248]	; (a820 <bt_gatt_indicate+0x130>)
    a726:	f007 fcef 	bl	12108 <printk>
    a72a:	483e      	ldr	r0, [pc, #248]	; (a824 <bt_gatt_indicate+0x134>)
    a72c:	f007 fcec 	bl	12108 <printk>
    a730:	f240 716c 	movw	r1, #1900	; 0x76c
    a734:	4839      	ldr	r0, [pc, #228]	; (a81c <bt_gatt_indicate+0x12c>)
    a736:	f007 ff7d 	bl	12634 <assert_post_action>
    a73a:	4b3c      	ldr	r3, [pc, #240]	; (a82c <bt_gatt_indicate+0x13c>)
    a73c:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    a740:	079a      	lsls	r2, r3, #30
    a742:	d563      	bpl.n	a80c <bt_gatt_indicate+0x11c>
	attr = params->attr;
    a744:	6870      	ldr	r0, [r6, #4]
    a746:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    a748:	b115      	cbz	r5, a750 <bt_gatt_indicate+0x60>
    a74a:	7b6b      	ldrb	r3, [r5, #13]
    a74c:	2b06      	cmp	r3, #6
    a74e:	d160      	bne.n	a812 <bt_gatt_indicate+0x122>
	handle = attr->handle ? : find_static_attr(attr);
    a750:	8a04      	ldrh	r4, [r0, #16]
    a752:	b93c      	cbnz	r4, a764 <bt_gatt_indicate+0x74>
    a754:	f7ff f8e8 	bl	9928 <find_static_attr>
	if (!handle) {
    a758:	4604      	mov	r4, r0
    a75a:	b918      	cbnz	r0, a764 <bt_gatt_indicate+0x74>
		return -ENOENT;
    a75c:	f06f 0001 	mvn.w	r0, #1
}
    a760:	b00b      	add	sp, #44	; 0x2c
    a762:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (params->uuid) {
    a764:	6832      	ldr	r2, [r6, #0]
    a766:	b1b2      	cbz	r2, a796 <bt_gatt_indicate+0xa6>
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    a768:	a905      	add	r1, sp, #20
    a76a:	9102      	str	r1, [sp, #8]
    a76c:	4930      	ldr	r1, [pc, #192]	; (a830 <bt_gatt_indicate+0x140>)
		attr = NULL;
    a76e:	2300      	movs	r3, #0
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    a770:	9101      	str	r1, [sp, #4]
    a772:	2101      	movs	r1, #1
    a774:	4620      	mov	r0, r4
    a776:	9100      	str	r1, [sp, #0]
    a778:	f64f 71ff 	movw	r1, #65535	; 0xffff
		attr = NULL;
    a77c:	9305      	str	r3, [sp, #20]
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    a77e:	f7ff fe3f 	bl	a400 <bt_gatt_foreach_attr_type>
		if (!attr) {
    a782:	9805      	ldr	r0, [sp, #20]
    a784:	2800      	cmp	r0, #0
    a786:	d0e9      	beq.n	a75c <bt_gatt_indicate+0x6c>
		handle = attr->handle ? : find_static_attr(attr);
    a788:	8a04      	ldrh	r4, [r0, #16]
    a78a:	b924      	cbnz	r4, a796 <bt_gatt_indicate+0xa6>
    a78c:	f7ff f8cc 	bl	9928 <find_static_attr>
		if (!handle) {
    a790:	4604      	mov	r4, r0
    a792:	2800      	cmp	r0, #0
    a794:	d0e2      	beq.n	a75c <bt_gatt_indicate+0x6c>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    a796:	9b05      	ldr	r3, [sp, #20]
    a798:	af07      	add	r7, sp, #28
    a79a:	6818      	ldr	r0, [r3, #0]
    a79c:	2300      	movs	r3, #0
    a79e:	f88d 301c 	strb.w	r3, [sp, #28]
    a7a2:	f642 0303 	movw	r3, #10243	; 0x2803
    a7a6:	4639      	mov	r1, r7
    a7a8:	f8ad 301e 	strh.w	r3, [sp, #30]
    a7ac:	f009 f85c 	bl	13868 <bt_uuid_cmp>
    a7b0:	b950      	cbnz	r0, a7c8 <bt_gatt_indicate+0xd8>
		struct bt_gatt_chrc *chrc = attr->user_data;
    a7b2:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    a7b4:	68c3      	ldr	r3, [r0, #12]
    a7b6:	799b      	ldrb	r3, [r3, #6]
    a7b8:	069b      	lsls	r3, r3, #26
    a7ba:	d402      	bmi.n	a7c2 <bt_gatt_indicate+0xd2>
			return -EINVAL;
    a7bc:	f06f 0015 	mvn.w	r0, #21
    a7c0:	e7ce      	b.n	a760 <bt_gatt_indicate+0x70>
		handle = bt_gatt_attr_value_handle(attr);
    a7c2:	f7ff fe05 	bl	a3d0 <bt_gatt_attr_value_handle>
    a7c6:	4604      	mov	r4, r0
	if (conn) {
    a7c8:	b12d      	cbz	r5, a7d6 <bt_gatt_indicate+0xe6>
		return gatt_indicate(conn, handle, params);
    a7ca:	4632      	mov	r2, r6
    a7cc:	4621      	mov	r1, r4
    a7ce:	4628      	mov	r0, r5
    a7d0:	f7ff f94c 	bl	9a6c <gatt_indicate>
    a7d4:	e7c4      	b.n	a760 <bt_gatt_indicate+0x70>
	data.err = -ENOTCONN;
    a7d6:	f06f 0338 	mvn.w	r3, #56	; 0x38
    a7da:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    a7dc:	2302      	movs	r3, #2
    a7de:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    a7e2:	f642 1302 	movw	r3, #10498	; 0x2902
    a7e6:	f8ad 301a 	strh.w	r3, [sp, #26]
    a7ea:	4b12      	ldr	r3, [pc, #72]	; (a834 <bt_gatt_indicate+0x144>)
    a7ec:	4620      	mov	r0, r4
    a7ee:	9301      	str	r3, [sp, #4]
    a7f0:	2301      	movs	r3, #1
    a7f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a7f6:	9300      	str	r3, [sp, #0]
    a7f8:	9702      	str	r7, [sp, #8]
    a7fa:	462b      	mov	r3, r5
    a7fc:	aa06      	add	r2, sp, #24
	data.ind_params = params;
    a7fe:	9609      	str	r6, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    a800:	f88d 5018 	strb.w	r5, [sp, #24]
    a804:	f7ff fdfc 	bl	a400 <bt_gatt_foreach_attr_type>
	return data.err;
    a808:	9807      	ldr	r0, [sp, #28]
    a80a:	e7a9      	b.n	a760 <bt_gatt_indicate+0x70>
		return -EAGAIN;
    a80c:	f06f 000a 	mvn.w	r0, #10
    a810:	e7a6      	b.n	a760 <bt_gatt_indicate+0x70>
		return -ENOTCONN;
    a812:	f06f 0038 	mvn.w	r0, #56	; 0x38
    a816:	e7a3      	b.n	a760 <bt_gatt_indicate+0x70>
    a818:	0001a9fb 	.word	0x0001a9fb
    a81c:	0001a7af 	.word	0x0001a7af
    a820:	00017d82 	.word	0x00017d82
    a824:	0001aa02 	.word	0x0001aa02
    a828:	0001aa18 	.word	0x0001aa18
    a82c:	20000098 	.word	0x20000098
    a830:	00014ac7 	.word	0x00014ac7
    a834:	00009db1 	.word	0x00009db1

0000a838 <sc_process>:
{
    a838:	b537      	push	{r0, r1, r2, r4, r5, lr}
    a83a:	4604      	mov	r4, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
    a83c:	f100 0520 	add.w	r5, r0, #32
    a840:	e8d5 3faf 	lda	r3, [r5]
    a844:	079b      	lsls	r3, r3, #30
    a846:	d50e      	bpl.n	a866 <sc_process+0x2e>
    a848:	4919      	ldr	r1, [pc, #100]	; (a8b0 <sc_process+0x78>)
    a84a:	f44f 7360 	mov.w	r3, #896	; 0x380
    a84e:	4a19      	ldr	r2, [pc, #100]	; (a8b4 <sc_process+0x7c>)
    a850:	4819      	ldr	r0, [pc, #100]	; (a8b8 <sc_process+0x80>)
    a852:	f007 fc59 	bl	12108 <printk>
    a856:	4819      	ldr	r0, [pc, #100]	; (a8bc <sc_process+0x84>)
    a858:	f007 fc56 	bl	12108 <printk>
    a85c:	f44f 7160 	mov.w	r1, #896	; 0x380
    a860:	4814      	ldr	r0, [pc, #80]	; (a8b4 <sc_process+0x7c>)
    a862:	f007 fee7 	bl	12634 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
    a866:	f854 3c04 	ldr.w	r3, [r4, #-4]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a86a:	f06f 0101 	mvn.w	r1, #1
    a86e:	4628      	mov	r0, r5
    a870:	9301      	str	r3, [sp, #4]
    a872:	f00a f8f8 	bl	14a66 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
    a876:	4b12      	ldr	r3, [pc, #72]	; (a8c0 <sc_process+0x88>)
	sc->start = 0U;
    a878:	2000      	movs	r0, #0
	sc->params.attr = &_1_gatt_svc.attrs[2];
    a87a:	f844 3c14 	str.w	r3, [r4, #-20]
	sc->params.func = sc_indicate_rsp;
    a87e:	4b11      	ldr	r3, [pc, #68]	; (a8c4 <sc_process+0x8c>)
	sc->start = 0U;
    a880:	f824 0c04 	strh.w	r0, [r4, #-4]
	sc->params.func = sc_indicate_rsp;
    a884:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.data = &sc_range[0];
    a888:	ab01      	add	r3, sp, #4
    a88a:	f844 3c0c 	str.w	r3, [r4, #-12]
	sc->params.len = sizeof(sc_range);
    a88e:	2304      	movs	r3, #4
	sc->end = 0U;
    a890:	f824 0c02 	strh.w	r0, [r4, #-2]
	sc->params.len = sizeof(sc_range);
    a894:	f824 3c08 	strh.w	r3, [r4, #-8]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    a898:	f1a4 0118 	sub.w	r1, r4, #24
    a89c:	f7ff ff28 	bl	a6f0 <bt_gatt_indicate>
    a8a0:	b918      	cbnz	r0, a8aa <sc_process+0x72>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
    a8a2:	2101      	movs	r1, #1
    a8a4:	4628      	mov	r0, r5
    a8a6:	f00a f93a 	bl	14b1e <atomic_set_bit>
}
    a8aa:	b003      	add	sp, #12
    a8ac:	bd30      	pop	{r4, r5, pc}
    a8ae:	bf00      	nop
    a8b0:	0001aa25 	.word	0x0001aa25
    a8b4:	0001a7af 	.word	0x0001a7af
    a8b8:	00017d82 	.word	0x00017d82
    a8bc:	0001aa56 	.word	0x0001aa56
    a8c0:	0001738c 	.word	0x0001738c
    a8c4:	0000a091 	.word	0x0000a091

0000a8c8 <update_ccc>:
	if (attr->write != bt_gatt_attr_write_ccc) {
    a8c8:	6882      	ldr	r2, [r0, #8]
    a8ca:	4b39      	ldr	r3, [pc, #228]	; (a9b0 <update_ccc+0xe8>)
{
    a8cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    a8d0:	429a      	cmp	r2, r3
{
    a8d2:	4604      	mov	r4, r0
    a8d4:	460e      	mov	r6, r1
	struct bt_conn *conn = data->conn;
    a8d6:	680d      	ldr	r5, [r1, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
    a8d8:	d116      	bne.n	a908 <update_ccc+0x40>
	ccc = attr->user_data;
    a8da:	68c7      	ldr	r7, [r0, #12]
		if (!cfg->value ||
    a8dc:	893b      	ldrh	r3, [r7, #8]
    a8de:	b19b      	cbz	r3, a908 <update_ccc+0x40>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    a8e0:	463a      	mov	r2, r7
    a8e2:	4628      	mov	r0, r5
    a8e4:	f812 1b01 	ldrb.w	r1, [r2], #1
    a8e8:	f009 fa9d 	bl	13e26 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    a8ec:	b160      	cbz	r0, a908 <update_ccc+0x40>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    a8ee:	222a      	movs	r2, #42	; 0x2a
    a8f0:	4621      	mov	r1, r4
    a8f2:	4628      	mov	r0, r5
    a8f4:	f00a fa6c 	bl	14dd0 <bt_gatt_check_perm>
		if (err) {
    a8f8:	b1d8      	cbz	r0, a932 <update_ccc+0x6a>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    a8fa:	2803      	cmp	r0, #3
    a8fc:	d108      	bne.n	a910 <update_ccc+0x48>
				BT_WARN("CCC %p not writable", attr);
    a8fe:	4622      	mov	r2, r4
    a900:	2157      	movs	r1, #87	; 0x57
    a902:	482c      	ldr	r0, [pc, #176]	; (a9b4 <update_ccc+0xec>)
    a904:	f007 fc00 	bl	12108 <printk>
}
    a908:	2001      	movs	r0, #1
    a90a:	b002      	add	sp, #8
    a90c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				sec = BT_SECURITY_L3;
    a910:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
    a912:	4628      	mov	r0, r5
				sec = BT_SECURITY_L3;
    a914:	bf14      	ite	ne
    a916:	f04f 0802 	movne.w	r8, #2
    a91a:	f04f 0803 	moveq.w	r8, #3
			    bt_conn_get_security(conn) < sec) {
    a91e:	f009 fa80 	bl	13e22 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
    a922:	4580      	cmp	r8, r0
    a924:	d905      	bls.n	a932 <update_ccc+0x6a>
				if (data->sec < sec) {
    a926:	7933      	ldrb	r3, [r6, #4]
    a928:	4543      	cmp	r3, r8
    a92a:	d2ed      	bcs.n	a908 <update_ccc+0x40>
					data->sec = sec;
    a92c:	f886 8004 	strb.w	r8, [r6, #4]
    a930:	e7ea      	b.n	a908 <update_ccc+0x40>
		gatt_ccc_changed(attr, ccc);
    a932:	4639      	mov	r1, r7
    a934:	4620      	mov	r0, r4
    a936:	f00a f815 	bl	14964 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    a93a:	4b1f      	ldr	r3, [pc, #124]	; (a9b8 <update_ccc+0xf0>)
    a93c:	429f      	cmp	r7, r3
    a93e:	d1e3      	bne.n	a908 <update_ccc+0x40>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    a940:	7a28      	ldrb	r0, [r5, #8]
    a942:	f105 017c 	add.w	r1, r5, #124	; 0x7c
    a946:	f7ff f9d7 	bl	9cf8 <find_sc_cfg>
	if (!cfg) {
    a94a:	4604      	mov	r4, r0
    a94c:	2800      	cmp	r0, #0
    a94e:	d0db      	beq.n	a908 <update_ccc+0x40>
	if (!(cfg->data.start || cfg->data.end)) {
    a950:	8902      	ldrh	r2, [r0, #8]
    a952:	8943      	ldrh	r3, [r0, #10]
    a954:	ea52 0103 	orrs.w	r1, r2, r3
    a958:	d0d6      	beq.n	a908 <update_ccc+0x40>
	index = bt_conn_index(conn);
    a95a:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    a95c:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    a960:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
    a964:	f7fd f85a 	bl	7a1c <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    a968:	2314      	movs	r3, #20
    a96a:	4914      	ldr	r1, [pc, #80]	; (a9bc <update_ccc+0xf4>)
    a96c:	4a14      	ldr	r2, [pc, #80]	; (a9c0 <update_ccc+0xf8>)
    a96e:	fb03 1300 	mla	r3, r3, r0, r1
    a972:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    a974:	4a13      	ldr	r2, [pc, #76]	; (a9c4 <update_ccc+0xfc>)
    a976:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    a978:	aa01      	add	r2, sp, #4
    a97a:	60da      	str	r2, [r3, #12]
	sc_restore_params[index].len = sizeof(sc_range);
    a97c:	2204      	movs	r2, #4
    a97e:	821a      	strh	r2, [r3, #16]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    a980:	b203      	sxth	r3, r0
    a982:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    a986:	4628      	mov	r0, r5
    a988:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    a98c:	f7ff feb0 	bl	a6f0 <bt_gatt_indicate>
    a990:	b118      	cbz	r0, a99a <update_ccc+0xd2>
		BT_ERR("SC restore indication failed");
    a992:	2145      	movs	r1, #69	; 0x45
    a994:	480c      	ldr	r0, [pc, #48]	; (a9c8 <update_ccc+0x100>)
    a996:	f007 fbb7 	bl	12108 <printk>
	memset(&cfg->data, 0, sizeof(cfg->data));
    a99a:	2204      	movs	r2, #4
    a99c:	2100      	movs	r1, #0
    a99e:	f104 0008 	add.w	r0, r4, #8
    a9a2:	f008 fef1 	bl	13788 <memset>
		sc_store(cfg);
    a9a6:	4620      	mov	r0, r4
    a9a8:	f7fe ff96 	bl	98d8 <sc_store>
    a9ac:	e7ac      	b.n	a908 <update_ccc+0x40>
    a9ae:	bf00      	nop
    a9b0:	00009ba1 	.word	0x00009ba1
    a9b4:	0001aa71 	.word	0x0001aa71
    a9b8:	2000026c 	.word	0x2000026c
    a9bc:	20000fcc 	.word	0x20000fcc
    a9c0:	0001738c 	.word	0x0001738c
    a9c4:	00014b33 	.word	0x00014b33
    a9c8:	0001aa8a 	.word	0x0001aa8a

0000a9cc <bt_gatt_exchange_mtu>:
{
    a9cc:	b570      	push	{r4, r5, r6, lr}
    a9ce:	460e      	mov	r6, r1
	__ASSERT(conn, "invalid parameter\n");
    a9d0:	4604      	mov	r4, r0
    a9d2:	b970      	cbnz	r0, a9f2 <bt_gatt_exchange_mtu+0x26>
    a9d4:	4920      	ldr	r1, [pc, #128]	; (aa58 <bt_gatt_exchange_mtu+0x8c>)
    a9d6:	f640 134f 	movw	r3, #2383	; 0x94f
    a9da:	4a20      	ldr	r2, [pc, #128]	; (aa5c <bt_gatt_exchange_mtu+0x90>)
    a9dc:	4820      	ldr	r0, [pc, #128]	; (aa60 <bt_gatt_exchange_mtu+0x94>)
    a9de:	f007 fb93 	bl	12108 <printk>
    a9e2:	4820      	ldr	r0, [pc, #128]	; (aa64 <bt_gatt_exchange_mtu+0x98>)
    a9e4:	f007 fb90 	bl	12108 <printk>
    a9e8:	f640 114f 	movw	r1, #2383	; 0x94f
    a9ec:	481b      	ldr	r0, [pc, #108]	; (aa5c <bt_gatt_exchange_mtu+0x90>)
    a9ee:	f007 fe21 	bl	12634 <assert_post_action>
	__ASSERT(params && params->func, "invalid parameters\n");
    a9f2:	b10e      	cbz	r6, a9f8 <bt_gatt_exchange_mtu+0x2c>
    a9f4:	6833      	ldr	r3, [r6, #0]
    a9f6:	b973      	cbnz	r3, aa16 <bt_gatt_exchange_mtu+0x4a>
    a9f8:	491b      	ldr	r1, [pc, #108]	; (aa68 <bt_gatt_exchange_mtu+0x9c>)
    a9fa:	f44f 6315 	mov.w	r3, #2384	; 0x950
    a9fe:	4a17      	ldr	r2, [pc, #92]	; (aa5c <bt_gatt_exchange_mtu+0x90>)
    aa00:	4817      	ldr	r0, [pc, #92]	; (aa60 <bt_gatt_exchange_mtu+0x94>)
    aa02:	f007 fb81 	bl	12108 <printk>
    aa06:	4819      	ldr	r0, [pc, #100]	; (aa6c <bt_gatt_exchange_mtu+0xa0>)
    aa08:	f007 fb7e 	bl	12108 <printk>
    aa0c:	f44f 6115 	mov.w	r1, #2384	; 0x950
    aa10:	4812      	ldr	r0, [pc, #72]	; (aa5c <bt_gatt_exchange_mtu+0x90>)
    aa12:	f007 fe0f 	bl	12634 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
    aa16:	7b63      	ldrb	r3, [r4, #13]
    aa18:	2b06      	cmp	r3, #6
    aa1a:	d117      	bne.n	aa4c <bt_gatt_exchange_mtu+0x80>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_MTU_REQ, sizeof(*req));
    aa1c:	2202      	movs	r2, #2
    aa1e:	4620      	mov	r0, r4
    aa20:	4611      	mov	r1, r2
    aa22:	f7fe f8dd 	bl	8be0 <bt_att_create_pdu>
	if (!buf) {
    aa26:	4605      	mov	r5, r0
    aa28:	b198      	cbz	r0, aa52 <bt_gatt_exchange_mtu+0x86>
	req = net_buf_add(buf, sizeof(*req));
    aa2a:	2102      	movs	r1, #2
    aa2c:	3008      	adds	r0, #8
    aa2e:	f002 fecf 	bl	d7d0 <net_buf_simple_add>
	req->mtu = sys_cpu_to_le16(mtu);
    aa32:	f06f 0308 	mvn.w	r3, #8
    aa36:	7003      	strb	r3, [r0, #0]
    aa38:	2300      	movs	r3, #0
	return gatt_send(conn, buf, gatt_mtu_rsp, params, NULL);
    aa3a:	4629      	mov	r1, r5
	req->mtu = sys_cpu_to_le16(mtu);
    aa3c:	7043      	strb	r3, [r0, #1]
	return gatt_send(conn, buf, gatt_mtu_rsp, params, NULL);
    aa3e:	4a0c      	ldr	r2, [pc, #48]	; (aa70 <bt_gatt_exchange_mtu+0xa4>)
    aa40:	4633      	mov	r3, r6
    aa42:	4620      	mov	r0, r4
}
    aa44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return gatt_send(conn, buf, gatt_mtu_rsp, params, NULL);
    aa48:	f7fe bfde 	b.w	9a08 <gatt_send.constprop.0>
		return -ENOTCONN;
    aa4c:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    aa50:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    aa52:	f06f 000b 	mvn.w	r0, #11
    aa56:	e7fb      	b.n	aa50 <bt_gatt_exchange_mtu+0x84>
    aa58:	0001a029 	.word	0x0001a029
    aa5c:	0001a7af 	.word	0x0001a7af
    aa60:	00017d82 	.word	0x00017d82
    aa64:	0001aaac 	.word	0x0001aaac
    aa68:	0001aac1 	.word	0x0001aac1
    aa6c:	0001aa02 	.word	0x0001aa02
    aa70:	00014989 	.word	0x00014989

0000aa74 <bt_gatt_discover>:
{
    aa74:	b5f0      	push	{r4, r5, r6, r7, lr}
    aa76:	460c      	mov	r4, r1
	__ASSERT(conn, "invalid parameters\n");
    aa78:	4605      	mov	r5, r0
{
    aa7a:	b085      	sub	sp, #20
	__ASSERT(conn, "invalid parameters\n");
    aa7c:	b970      	cbnz	r0, aa9c <bt_gatt_discover+0x28>
    aa7e:	4990      	ldr	r1, [pc, #576]	; (acc0 <bt_gatt_discover+0x24c>)
    aa80:	f640 431f 	movw	r3, #3103	; 0xc1f
    aa84:	4a8f      	ldr	r2, [pc, #572]	; (acc4 <bt_gatt_discover+0x250>)
    aa86:	4890      	ldr	r0, [pc, #576]	; (acc8 <bt_gatt_discover+0x254>)
    aa88:	f007 fb3e 	bl	12108 <printk>
    aa8c:	488f      	ldr	r0, [pc, #572]	; (accc <bt_gatt_discover+0x258>)
    aa8e:	f007 fb3b 	bl	12108 <printk>
    aa92:	f640 411f 	movw	r1, #3103	; 0xc1f
    aa96:	488b      	ldr	r0, [pc, #556]	; (acc4 <bt_gatt_discover+0x250>)
    aa98:	f007 fdcc 	bl	12634 <assert_post_action>
	__ASSERT(params && params->func, "invalid parameters\n");
    aa9c:	b10c      	cbz	r4, aaa2 <bt_gatt_discover+0x2e>
    aa9e:	6863      	ldr	r3, [r4, #4]
    aaa0:	b973      	cbnz	r3, aac0 <bt_gatt_discover+0x4c>
    aaa2:	498b      	ldr	r1, [pc, #556]	; (acd0 <bt_gatt_discover+0x25c>)
    aaa4:	f44f 6342 	mov.w	r3, #3104	; 0xc20
    aaa8:	4a86      	ldr	r2, [pc, #536]	; (acc4 <bt_gatt_discover+0x250>)
    aaaa:	4887      	ldr	r0, [pc, #540]	; (acc8 <bt_gatt_discover+0x254>)
    aaac:	f007 fb2c 	bl	12108 <printk>
    aab0:	4886      	ldr	r0, [pc, #536]	; (accc <bt_gatt_discover+0x258>)
    aab2:	f007 fb29 	bl	12108 <printk>
    aab6:	f44f 6142 	mov.w	r1, #3104	; 0xc20
    aaba:	4882      	ldr	r0, [pc, #520]	; (acc4 <bt_gatt_discover+0x250>)
    aabc:	f007 fdba 	bl	12634 <assert_post_action>
	__ASSERT((params->start_handle && params->end_handle),
    aac0:	8923      	ldrh	r3, [r4, #8]
    aac2:	b10b      	cbz	r3, aac8 <bt_gatt_discover+0x54>
    aac4:	89e3      	ldrh	r3, [r4, #14]
    aac6:	b973      	cbnz	r3, aae6 <bt_gatt_discover+0x72>
    aac8:	4982      	ldr	r1, [pc, #520]	; (acd4 <bt_gatt_discover+0x260>)
    aaca:	f640 4321 	movw	r3, #3105	; 0xc21
    aace:	4a7d      	ldr	r2, [pc, #500]	; (acc4 <bt_gatt_discover+0x250>)
    aad0:	487d      	ldr	r0, [pc, #500]	; (acc8 <bt_gatt_discover+0x254>)
    aad2:	f007 fb19 	bl	12108 <printk>
    aad6:	487d      	ldr	r0, [pc, #500]	; (accc <bt_gatt_discover+0x258>)
    aad8:	f007 fb16 	bl	12108 <printk>
    aadc:	f640 4121 	movw	r1, #3105	; 0xc21
    aae0:	4878      	ldr	r0, [pc, #480]	; (acc4 <bt_gatt_discover+0x250>)
    aae2:	f007 fda7 	bl	12634 <assert_post_action>
	__ASSERT((params->start_handle <= params->end_handle),
    aae6:	8922      	ldrh	r2, [r4, #8]
    aae8:	89e3      	ldrh	r3, [r4, #14]
    aaea:	429a      	cmp	r2, r3
    aaec:	d90e      	bls.n	ab0c <bt_gatt_discover+0x98>
    aaee:	497a      	ldr	r1, [pc, #488]	; (acd8 <bt_gatt_discover+0x264>)
    aaf0:	f640 4323 	movw	r3, #3107	; 0xc23
    aaf4:	4a73      	ldr	r2, [pc, #460]	; (acc4 <bt_gatt_discover+0x250>)
    aaf6:	4874      	ldr	r0, [pc, #464]	; (acc8 <bt_gatt_discover+0x254>)
    aaf8:	f007 fb06 	bl	12108 <printk>
    aafc:	4873      	ldr	r0, [pc, #460]	; (accc <bt_gatt_discover+0x258>)
    aafe:	f007 fb03 	bl	12108 <printk>
    ab02:	f640 4123 	movw	r1, #3107	; 0xc23
    ab06:	486f      	ldr	r0, [pc, #444]	; (acc4 <bt_gatt_discover+0x250>)
    ab08:	f007 fd94 	bl	12634 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
    ab0c:	7b6b      	ldrb	r3, [r5, #13]
    ab0e:	2b06      	cmp	r3, #6
    ab10:	f040 80d3 	bne.w	acba <bt_gatt_discover+0x246>
	switch (params->type) {
    ab14:	7c22      	ldrb	r2, [r4, #16]
    ab16:	2a05      	cmp	r2, #5
    ab18:	f200 80ca 	bhi.w	acb0 <bt_gatt_discover+0x23c>
    ab1c:	e8df f002 	tbb	[pc, r2]
    ab20:	62620303 	.word	0x62620303
    ab24:	b481      	.short	0xb481
		if (params->uuid) {
    ab26:	6823      	ldr	r3, [r4, #0]
    ab28:	2b00      	cmp	r3, #0
    ab2a:	d03c      	beq.n	aba6 <bt_gatt_discover+0x132>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_REQ, sizeof(*req));
    ab2c:	2206      	movs	r2, #6
    ab2e:	4628      	mov	r0, r5
    ab30:	4611      	mov	r1, r2
    ab32:	f7fe f855 	bl	8be0 <bt_att_create_pdu>
	if (!buf) {
    ab36:	4606      	mov	r6, r0
    ab38:	b918      	cbnz	r0, ab42 <bt_gatt_discover+0xce>
		return -ENOMEM;
    ab3a:	f06f 000b 	mvn.w	r0, #11
}
    ab3e:	b005      	add	sp, #20
    ab40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	req = net_buf_add(buf, sizeof(*req));
    ab42:	f100 0708 	add.w	r7, r0, #8
    ab46:	2106      	movs	r1, #6
    ab48:	4638      	mov	r0, r7
    ab4a:	f002 fe41 	bl	d7d0 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    ab4e:	8923      	ldrh	r3, [r4, #8]
	switch (params->uuid->type) {
    ab50:	6821      	ldr	r1, [r4, #0]
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    ab52:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    ab54:	89e3      	ldrh	r3, [r4, #14]
    ab56:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
    ab58:	7c23      	ldrb	r3, [r4, #16]
		uuid_val = BT_UUID_16(BT_UUID_GATT_SECONDARY)->val;
    ab5a:	2b00      	cmp	r3, #0
	req->type = sys_cpu_to_le16(uuid_val);
    ab5c:	f642 0301 	movw	r3, #10241	; 0x2801
    ab60:	bf08      	it	eq
    ab62:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
    ab66:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
    ab68:	780a      	ldrb	r2, [r1, #0]
    ab6a:	b15a      	cbz	r2, ab84 <bt_gatt_discover+0x110>
    ab6c:	2a02      	cmp	r2, #2
    ab6e:	d014      	beq.n	ab9a <bt_gatt_discover+0x126>
		BT_ERR("Unknown UUID type %u", params->uuid->type);
    ab70:	485a      	ldr	r0, [pc, #360]	; (acdc <bt_gatt_discover+0x268>)
    ab72:	2145      	movs	r1, #69	; 0x45
    ab74:	f007 fac8 	bl	12108 <printk>
		net_buf_unref(buf);
    ab78:	4630      	mov	r0, r6
    ab7a:	f002 fcb7 	bl	d4ec <net_buf_unref>
	return -EINVAL;
    ab7e:	f06f 0015 	mvn.w	r0, #21
    ab82:	e7dc      	b.n	ab3e <bt_gatt_discover+0xca>
		net_buf_add_le16(buf, BT_UUID_16(params->uuid)->val);
    ab84:	4638      	mov	r0, r7
    ab86:	8849      	ldrh	r1, [r1, #2]
    ab88:	f00a fe43 	bl	15812 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_find_type_rsp, params, NULL);
    ab8c:	4623      	mov	r3, r4
    ab8e:	4a54      	ldr	r2, [pc, #336]	; (ace0 <bt_gatt_discover+0x26c>)
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
    ab90:	4631      	mov	r1, r6
    ab92:	4628      	mov	r0, r5
    ab94:	f7fe ff38 	bl	9a08 <gatt_send.constprop.0>
    ab98:	e7d1      	b.n	ab3e <bt_gatt_discover+0xca>
		net_buf_add_mem(buf, BT_UUID_128(params->uuid)->val, 16);
    ab9a:	2210      	movs	r2, #16
    ab9c:	4638      	mov	r0, r7
    ab9e:	3101      	adds	r1, #1
    aba0:	f00a fe24 	bl	157ec <net_buf_simple_add_mem>
		break;
    aba4:	e7f2      	b.n	ab8c <bt_gatt_discover+0x118>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_REQ, sizeof(*req));
    aba6:	2204      	movs	r2, #4
    aba8:	2110      	movs	r1, #16
    abaa:	4628      	mov	r0, r5
    abac:	f7fe f818 	bl	8be0 <bt_att_create_pdu>
	if (!buf) {
    abb0:	4606      	mov	r6, r0
    abb2:	2800      	cmp	r0, #0
    abb4:	d0c1      	beq.n	ab3a <bt_gatt_discover+0xc6>
	req = net_buf_add(buf, sizeof(*req));
    abb6:	f100 0708 	add.w	r7, r0, #8
    abba:	2104      	movs	r1, #4
    abbc:	4638      	mov	r0, r7
    abbe:	f002 fe07 	bl	d7d0 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    abc2:	8923      	ldrh	r3, [r4, #8]
    abc4:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    abc6:	89e3      	ldrh	r3, [r4, #14]
    abc8:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
    abca:	7c23      	ldrb	r3, [r4, #16]
    abcc:	b93b      	cbnz	r3, abde <bt_gatt_discover+0x16a>
		net_buf_add_le16(buf, BT_UUID_16(BT_UUID_GATT_PRIMARY)->val);
    abce:	f44f 5120 	mov.w	r1, #10240	; 0x2800
		net_buf_add_le16(buf, BT_UUID_16(BT_UUID_GATT_SECONDARY)->val);
    abd2:	4638      	mov	r0, r7
    abd4:	f00a fe1d 	bl	15812 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_group_rsp, params, NULL);
    abd8:	4623      	mov	r3, r4
    abda:	4a42      	ldr	r2, [pc, #264]	; (ace4 <bt_gatt_discover+0x270>)
    abdc:	e7d8      	b.n	ab90 <bt_gatt_discover+0x11c>
		net_buf_add_le16(buf, BT_UUID_16(BT_UUID_GATT_SECONDARY)->val);
    abde:	f642 0101 	movw	r1, #10241	; 0x2801
    abe2:	e7f6      	b.n	abd2 <bt_gatt_discover+0x15e>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_REQ, sizeof(*req));
    abe4:	2204      	movs	r2, #4
    abe6:	2108      	movs	r1, #8
    abe8:	4628      	mov	r0, r5
    abea:	f7fd fff9 	bl	8be0 <bt_att_create_pdu>
	if (!buf) {
    abee:	4606      	mov	r6, r0
    abf0:	2800      	cmp	r0, #0
    abf2:	d0a2      	beq.n	ab3a <bt_gatt_discover+0xc6>
	req = net_buf_add(buf, sizeof(*req));
    abf4:	f100 0708 	add.w	r7, r0, #8
    abf8:	2104      	movs	r1, #4
    abfa:	4638      	mov	r0, r7
    abfc:	f002 fde8 	bl	d7d0 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    ac00:	8923      	ldrh	r3, [r4, #8]
    ac02:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    ac04:	89e3      	ldrh	r3, [r4, #14]
    ac06:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
    ac08:	7c23      	ldrb	r3, [r4, #16]
		net_buf_add_le16(buf, BT_UUID_16(BT_UUID_GATT_CHRC)->val);
    ac0a:	4638      	mov	r0, r7
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
    ac0c:	2b02      	cmp	r3, #2
		net_buf_add_le16(buf, BT_UUID_16(BT_UUID_GATT_INCLUDE)->val);
    ac0e:	bf0c      	ite	eq
    ac10:	f642 0102 	movweq	r1, #10242	; 0x2802
		net_buf_add_le16(buf, BT_UUID_16(BT_UUID_GATT_CHRC)->val);
    ac14:	f642 0103 	movwne	r1, #10243	; 0x2803
    ac18:	f00a fdfb 	bl	15812 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_type_rsp, params, NULL);
    ac1c:	4623      	mov	r3, r4
    ac1e:	4a32      	ldr	r2, [pc, #200]	; (ace8 <bt_gatt_discover+0x274>)
    ac20:	e7b6      	b.n	ab90 <bt_gatt_discover+0x11c>
		if (params->uuid &&
    ac22:	6820      	ldr	r0, [r4, #0]
    ac24:	b380      	cbz	r0, ac88 <bt_gatt_discover+0x214>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
    ac26:	2600      	movs	r6, #0
    ac28:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    ac2c:	4669      	mov	r1, sp
    ac2e:	f88d 6000 	strb.w	r6, [sp]
    ac32:	f8ad 3002 	strh.w	r3, [sp, #2]
    ac36:	f008 fe17 	bl	13868 <bt_uuid_cmp>
		if (params->uuid &&
    ac3a:	2800      	cmp	r0, #0
    ac3c:	d09f      	beq.n	ab7e <bt_gatt_discover+0x10a>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
    ac3e:	f642 0301 	movw	r3, #10241	; 0x2801
    ac42:	6820      	ldr	r0, [r4, #0]
    ac44:	a901      	add	r1, sp, #4
    ac46:	f88d 6004 	strb.w	r6, [sp, #4]
    ac4a:	f8ad 3006 	strh.w	r3, [sp, #6]
    ac4e:	f008 fe0b 	bl	13868 <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
    ac52:	2800      	cmp	r0, #0
    ac54:	d093      	beq.n	ab7e <bt_gatt_discover+0x10a>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
    ac56:	f642 0302 	movw	r3, #10242	; 0x2802
    ac5a:	6820      	ldr	r0, [r4, #0]
    ac5c:	a902      	add	r1, sp, #8
    ac5e:	f88d 6008 	strb.w	r6, [sp, #8]
    ac62:	f8ad 300a 	strh.w	r3, [sp, #10]
    ac66:	f008 fdff 	bl	13868 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
    ac6a:	2800      	cmp	r0, #0
    ac6c:	d087      	beq.n	ab7e <bt_gatt_discover+0x10a>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
    ac6e:	f642 0303 	movw	r3, #10243	; 0x2803
    ac72:	6820      	ldr	r0, [r4, #0]
    ac74:	a903      	add	r1, sp, #12
    ac76:	f88d 600c 	strb.w	r6, [sp, #12]
    ac7a:	f8ad 300e 	strh.w	r3, [sp, #14]
    ac7e:	f008 fdf3 	bl	13868 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
    ac82:	2800      	cmp	r0, #0
    ac84:	f43f af7b 	beq.w	ab7e <bt_gatt_discover+0x10a>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_REQ, sizeof(*req));
    ac88:	2204      	movs	r2, #4
    ac8a:	4628      	mov	r0, r5
    ac8c:	4611      	mov	r1, r2
    ac8e:	f7fd ffa7 	bl	8be0 <bt_att_create_pdu>
	if (!buf) {
    ac92:	4606      	mov	r6, r0
    ac94:	2800      	cmp	r0, #0
    ac96:	f43f af50 	beq.w	ab3a <bt_gatt_discover+0xc6>
	req = net_buf_add(buf, sizeof(*req));
    ac9a:	2104      	movs	r1, #4
    ac9c:	3008      	adds	r0, #8
    ac9e:	f002 fd97 	bl	d7d0 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    aca2:	8923      	ldrh	r3, [r4, #8]
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
    aca4:	4a11      	ldr	r2, [pc, #68]	; (acec <bt_gatt_discover+0x278>)
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    aca6:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    aca8:	89e3      	ldrh	r3, [r4, #14]
    acaa:	8043      	strh	r3, [r0, #2]
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
    acac:	4623      	mov	r3, r4
    acae:	e76f      	b.n	ab90 <bt_gatt_discover+0x11c>
		BT_ERR("Invalid discovery type: %u", params->type);
    acb0:	2145      	movs	r1, #69	; 0x45
    acb2:	480f      	ldr	r0, [pc, #60]	; (acf0 <bt_gatt_discover+0x27c>)
    acb4:	f007 fa28 	bl	12108 <printk>
    acb8:	e761      	b.n	ab7e <bt_gatt_discover+0x10a>
		return -ENOTCONN;
    acba:	f06f 0038 	mvn.w	r0, #56	; 0x38
    acbe:	e73e      	b.n	ab3e <bt_gatt_discover+0xca>
    acc0:	0001a029 	.word	0x0001a029
    acc4:	0001a7af 	.word	0x0001a7af
    acc8:	00017d82 	.word	0x00017d82
    accc:	0001aa02 	.word	0x0001aa02
    acd0:	0001aac1 	.word	0x0001aac1
    acd4:	0001aad8 	.word	0x0001aad8
    acd8:	0001ab05 	.word	0x0001ab05
    acdc:	0001ab32 	.word	0x0001ab32
    ace0:	00014e61 	.word	0x00014e61
    ace4:	0000acf5 	.word	0x0000acf5
    ace8:	0000adf5 	.word	0x0000adf5
    acec:	0000b0b5 	.word	0x0000b0b5
    acf0:	0001ab4c 	.word	0x0001ab4c

0000acf4 <gatt_read_group_rsp>:
{
    acf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    acf8:	b08f      	sub	sp, #60	; 0x3c
    acfa:	4681      	mov	r9, r0
    acfc:	4617      	mov	r7, r2
    acfe:	9d18      	ldr	r5, [sp, #96]	; 0x60
	if (err) {
    ad00:	b131      	cbz	r1, ad10 <gatt_read_group_rsp+0x1c>
		params->func(conn, NULL, params);
    ad02:	462a      	mov	r2, r5
    ad04:	2100      	movs	r1, #0
    ad06:	686b      	ldr	r3, [r5, #4]
	params->func(conn, NULL, params);
    ad08:	4798      	blx	r3
}
    ad0a:	b00f      	add	sp, #60	; 0x3c
    ad0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (rsp->len) {
    ad10:	7812      	ldrb	r2, [r2, #0]
    ad12:	2a06      	cmp	r2, #6
    ad14:	d00a      	beq.n	ad2c <gatt_read_group_rsp+0x38>
    ad16:	2a14      	cmp	r2, #20
    ad18:	d01c      	beq.n	ad54 <gatt_read_group_rsp+0x60>
		BT_ERR("Invalid data len %u", rsp->len);
    ad1a:	2145      	movs	r1, #69	; 0x45
    ad1c:	4834      	ldr	r0, [pc, #208]	; (adf0 <gatt_read_group_rsp+0xfc>)
    ad1e:	f007 f9f3 	bl	12108 <printk>
	params->func(conn, NULL, params);
    ad22:	462a      	mov	r2, r5
    ad24:	2100      	movs	r1, #0
    ad26:	4648      	mov	r0, r9
    ad28:	686b      	ldr	r3, [r5, #4]
    ad2a:	e7ed      	b.n	ad08 <gatt_read_group_rsp+0x14>
		u.uuid.type = BT_UUID_TYPE_16;
    ad2c:	f88d 1010 	strb.w	r1, [sp, #16]
	u16_t start_handle, end_handle = 0U;
    ad30:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
    ad32:	3b01      	subs	r3, #1
    ad34:	b29c      	uxth	r4, r3
    ad36:	f107 0801 	add.w	r8, r7, #1
    ad3a:	783b      	ldrb	r3, [r7, #0]
    ad3c:	42a3      	cmp	r3, r4
    ad3e:	d90d      	bls.n	ad5c <gatt_read_group_rsp+0x68>
	if (length == 0U && end_handle) {
    ad40:	2c00      	cmp	r4, #0
    ad42:	d1ee      	bne.n	ad22 <gatt_read_group_rsp+0x2e>
    ad44:	2e00      	cmp	r6, #0
    ad46:	d0ec      	beq.n	ad22 <gatt_read_group_rsp+0x2e>
	gatt_discover_next(conn, handle, params);
    ad48:	462a      	mov	r2, r5
    ad4a:	4631      	mov	r1, r6
    ad4c:	4648      	mov	r0, r9
    ad4e:	f00a f86a 	bl	14e26 <gatt_discover_next>
    ad52:	e7da      	b.n	ad0a <gatt_read_group_rsp+0x16>
		u.uuid.type = BT_UUID_TYPE_128;
    ad54:	2202      	movs	r2, #2
    ad56:	f88d 2010 	strb.w	r2, [sp, #16]
		break;
    ad5a:	e7e9      	b.n	ad30 <gatt_read_group_rsp+0x3c>
		struct bt_gatt_attr attr = {};
    ad5c:	2214      	movs	r2, #20
    ad5e:	2100      	movs	r1, #0
    ad60:	a809      	add	r0, sp, #36	; 0x24
    ad62:	f008 fd11 	bl	13788 <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
    ad66:	f8b8 a000 	ldrh.w	sl, [r8]
    ad6a:	fa1f f38a 	uxth.w	r3, sl
		if (!start_handle) {
    ad6e:	2b00      	cmp	r3, #0
    ad70:	d0d7      	beq.n	ad22 <gatt_read_group_rsp+0x2e>
		end_handle = sys_le16_to_cpu(data->end_handle);
    ad72:	f8b8 b002 	ldrh.w	fp, [r8, #2]
    ad76:	fa1f f68b 	uxth.w	r6, fp
		if (!end_handle || end_handle < start_handle) {
    ad7a:	2e00      	cmp	r6, #0
    ad7c:	d0d1      	beq.n	ad22 <gatt_read_group_rsp+0x2e>
    ad7e:	42b3      	cmp	r3, r6
    ad80:	d8cf      	bhi.n	ad22 <gatt_read_group_rsp+0x2e>
		switch (u.uuid.type) {
    ad82:	f89d 3010 	ldrb.w	r3, [sp, #16]
    ad86:	b323      	cbz	r3, add2 <gatt_read_group_rsp+0xde>
    ad88:	2b02      	cmp	r3, #2
    ad8a:	d02a      	beq.n	ade2 <gatt_read_group_rsp+0xee>
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
    ad8c:	f04f 0300 	mov.w	r3, #0
    ad90:	f88d 3004 	strb.w	r3, [sp, #4]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
    ad94:	7c2b      	ldrb	r3, [r5, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    ad96:	462a      	mov	r2, r5
			uuid_svc.val = BT_UUID_16(BT_UUID_GATT_SECONDARY)->val;
    ad98:	2b00      	cmp	r3, #0
    ad9a:	f642 0301 	movw	r3, #10241	; 0x2801
    ad9e:	bf08      	it	eq
    ada0:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
    ada4:	f8ad 3006 	strh.w	r3, [sp, #6]
		value.uuid = &u.uuid;
    ada8:	ab04      	add	r3, sp, #16
    adaa:	9302      	str	r3, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
    adac:	ab01      	add	r3, sp, #4
    adae:	9309      	str	r3, [sp, #36]	; 0x24
		attr.user_data = &value;
    adb0:	ab02      	add	r3, sp, #8
    adb2:	930c      	str	r3, [sp, #48]	; 0x30
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    adb4:	4648      	mov	r0, r9
    adb6:	686b      	ldr	r3, [r5, #4]
		value.end_handle = end_handle;
    adb8:	f8ad b00c 	strh.w	fp, [sp, #12]
		attr.handle = start_handle;
    adbc:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    adc0:	a909      	add	r1, sp, #36	; 0x24
    adc2:	4798      	blx	r3
    adc4:	2800      	cmp	r0, #0
    adc6:	d0a0      	beq.n	ad0a <gatt_read_group_rsp+0x16>
	     length -= rsp->len, pdu = (const u8_t *)pdu + rsp->len) {
    adc8:	783a      	ldrb	r2, [r7, #0]
    adca:	1aa4      	subs	r4, r4, r2
    adcc:	b2a4      	uxth	r4, r4
    adce:	4490      	add	r8, r2
    add0:	e7b3      	b.n	ad3a <gatt_read_group_rsp+0x46>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
    add2:	2202      	movs	r2, #2
    add4:	f108 0104 	add.w	r1, r8, #4
    add8:	f10d 0012 	add.w	r0, sp, #18
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
    addc:	f008 fca9 	bl	13732 <memcpy>
			break;
    ade0:	e7d4      	b.n	ad8c <gatt_read_group_rsp+0x98>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
    ade2:	2210      	movs	r2, #16
    ade4:	f108 0104 	add.w	r1, r8, #4
    ade8:	f10d 0011 	add.w	r0, sp, #17
    adec:	e7f6      	b.n	addc <gatt_read_group_rsp+0xe8>
    adee:	bf00      	nop
    adf0:	0001ab6c 	.word	0x0001ab6c

0000adf4 <gatt_read_type_rsp>:
{
    adf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    adf8:	b091      	sub	sp, #68	; 0x44
    adfa:	4606      	mov	r6, r0
    adfc:	4617      	mov	r7, r2
    adfe:	461c      	mov	r4, r3
    ae00:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
	if (err) {
    ae04:	b129      	cbz	r1, ae12 <gatt_read_type_rsp+0x1e>
		params->func(conn, NULL, params);
    ae06:	4642      	mov	r2, r8
    ae08:	2100      	movs	r1, #0
    ae0a:	f8d8 3004 	ldr.w	r3, [r8, #4]
	params->func(conn, NULL, params);
    ae0e:	4798      	blx	r3
	if (!handle) {
    ae10:	e06f      	b.n	aef2 <gatt_read_type_rsp+0xfe>
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
    ae12:	f898 3010 	ldrb.w	r3, [r8, #16]
    ae16:	7812      	ldrb	r2, [r2, #0]
    ae18:	2b02      	cmp	r3, #2
    ae1a:	f040 808b 	bne.w	af34 <gatt_read_type_rsp+0x140>
	switch (rsp->len) {
    ae1e:	2a06      	cmp	r2, #6
    ae20:	d019      	beq.n	ae56 <gatt_read_type_rsp+0x62>
    ae22:	2a08      	cmp	r2, #8
    ae24:	f040 808a 	bne.w	af3c <gatt_read_type_rsp+0x148>
		u.uuid.type = BT_UUID_TYPE_16;
    ae28:	f88d 1018 	strb.w	r1, [sp, #24]
	u16_t handle = 0U;
    ae2c:	f04f 0900 	mov.w	r9, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
    ae30:	3c01      	subs	r4, #1
    ae32:	b2a4      	uxth	r4, r4
    ae34:	1c7d      	adds	r5, r7, #1
			value.uuid = &u.uuid;
    ae36:	f10d 0a18 	add.w	sl, sp, #24
	for (length--, pdu = rsp->data; length >= rsp->len;
    ae3a:	783b      	ldrb	r3, [r7, #0]
    ae3c:	42a3      	cmp	r3, r4
    ae3e:	d90d      	bls.n	ae5c <gatt_read_type_rsp+0x68>
	if (length == 0U && handle) {
    ae40:	b91c      	cbnz	r4, ae4a <gatt_read_type_rsp+0x56>
    ae42:	f1b9 0f00 	cmp.w	r9, #0
    ae46:	f040 80dd 	bne.w	b004 <gatt_read_type_rsp+0x210>
	params->func(conn, NULL, params);
    ae4a:	4642      	mov	r2, r8
    ae4c:	2100      	movs	r1, #0
    ae4e:	4630      	mov	r0, r6
    ae50:	f8d8 3004 	ldr.w	r3, [r8, #4]
    ae54:	e7db      	b.n	ae0e <gatt_read_type_rsp+0x1a>
		u.uuid.type = BT_UUID_TYPE_128;
    ae56:	f88d 3018 	strb.w	r3, [sp, #24]
		break;
    ae5a:	e7e7      	b.n	ae2c <gatt_read_type_rsp+0x38>
		handle = sys_le16_to_cpu(data->handle);
    ae5c:	f8b5 b000 	ldrh.w	fp, [r5]
    ae60:	fa1f f98b 	uxth.w	r9, fp
		if (!handle) {
    ae64:	f1b9 0f00 	cmp.w	r9, #0
    ae68:	d0ef      	beq.n	ae4a <gatt_read_type_rsp+0x56>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
    ae6a:	886b      	ldrh	r3, [r5, #2]
		switch (u.uuid.type) {
    ae6c:	f89d 2018 	ldrb.w	r2, [sp, #24]
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
    ae70:	f8ad 3014 	strh.w	r3, [sp, #20]
    ae74:	b298      	uxth	r0, r3
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
    ae76:	88ab      	ldrh	r3, [r5, #4]
    ae78:	b299      	uxth	r1, r3
    ae7a:	f8ad 3016 	strh.w	r3, [sp, #22]
		switch (u.uuid.type) {
    ae7e:	b172      	cbz	r2, ae9e <gatt_read_type_rsp+0xaa>
    ae80:	2a02      	cmp	r2, #2
    ae82:	d015      	beq.n	aeb0 <gatt_read_type_rsp+0xbc>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    ae84:	f8d8 1000 	ldr.w	r1, [r8]
    ae88:	2900      	cmp	r1, #0
    ae8a:	d038      	beq.n	aefe <gatt_read_type_rsp+0x10a>
    ae8c:	4650      	mov	r0, sl
    ae8e:	f008 fceb 	bl	13868 <bt_uuid_cmp>
    ae92:	b3a0      	cbz	r0, aefe <gatt_read_type_rsp+0x10a>
	     length -= rsp->len, pdu = (const u8_t *)pdu + rsp->len) {
    ae94:	783a      	ldrb	r2, [r7, #0]
    ae96:	1aa4      	subs	r4, r4, r2
    ae98:	b2a4      	uxth	r4, r4
    ae9a:	4415      	add	r5, r2
    ae9c:	e7cd      	b.n	ae3a <gatt_read_type_rsp+0x46>
			value.uuid = &u.uuid;
    ae9e:	f8cd a010 	str.w	sl, [sp, #16]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
    aea2:	79ab      	ldrb	r3, [r5, #6]
    aea4:	79ea      	ldrb	r2, [r5, #7]
    aea6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    aeaa:	f8ad 301a 	strh.w	r3, [sp, #26]
			break;
    aeae:	e7e9      	b.n	ae84 <gatt_read_type_rsp+0x90>
			params->_included.start_handle = value.start_handle;
    aeb0:	f8a8 000a 	strh.w	r0, [r8, #10]
			params->_included.end_handle = value.end_handle;
    aeb4:	f8a8 100c 	strh.w	r1, [r8, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
    aeb8:	4630      	mov	r0, r6
    aeba:	210a      	movs	r1, #10
			params->_included.attr_handle = handle;
    aebc:	f8a8 9008 	strh.w	r9, [r8, #8]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
    aec0:	9201      	str	r2, [sp, #4]
    aec2:	f7fd fe8d 	bl	8be0 <bt_att_create_pdu>
	if (!buf) {
    aec6:	4604      	mov	r4, r0
    aec8:	b1b0      	cbz	r0, aef8 <gatt_read_type_rsp+0x104>
	req = net_buf_add(buf, sizeof(*req));
    aeca:	9a01      	ldr	r2, [sp, #4]
    aecc:	3008      	adds	r0, #8
    aece:	4611      	mov	r1, r2
    aed0:	f002 fc7e 	bl	d7d0 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
    aed4:	f8b8 300a 	ldrh.w	r3, [r8, #10]
	return gatt_send(conn, buf, read_included_uuid_cb, params, NULL);
    aed8:	4621      	mov	r1, r4
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
    aeda:	8003      	strh	r3, [r0, #0]
	return gatt_send(conn, buf, read_included_uuid_cb, params, NULL);
    aedc:	4a4c      	ldr	r2, [pc, #304]	; (b010 <gatt_read_type_rsp+0x21c>)
    aede:	4643      	mov	r3, r8
    aee0:	4630      	mov	r0, r6
    aee2:	f7fe fd91 	bl	9a08 <gatt_send.constprop.0>
			return read_included_uuid(conn, params);
    aee6:	fa1f f980 	uxth.w	r9, r0
	if (!handle) {
    aeea:	f1b9 0f00 	cmp.w	r9, #0
    aeee:	f040 8089 	bne.w	b004 <gatt_read_type_rsp+0x210>
}
    aef2:	b011      	add	sp, #68	; 0x44
    aef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
    aef8:	f06f 000b 	mvn.w	r0, #11
    aefc:	e7f3      	b.n	aee6 <gatt_read_type_rsp+0xf2>
		attr = (&(struct bt_gatt_attr) {
    aefe:	2210      	movs	r2, #16
    af00:	2100      	movs	r1, #0
    af02:	a80c      	add	r0, sp, #48	; 0x30
    af04:	f008 fc40 	bl	13788 <memset>
			.uuid = BT_UUID_GATT_INCLUDE,
    af08:	2300      	movs	r3, #0
    af0a:	f88d 300c 	strb.w	r3, [sp, #12]
    af0e:	f642 0302 	movw	r3, #10242	; 0x2802
    af12:	f8ad 300e 	strh.w	r3, [sp, #14]
		attr = (&(struct bt_gatt_attr) {
    af16:	ab03      	add	r3, sp, #12
    af18:	930b      	str	r3, [sp, #44]	; 0x2c
    af1a:	ab04      	add	r3, sp, #16
    af1c:	930e      	str	r3, [sp, #56]	; 0x38
		if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
    af1e:	4642      	mov	r2, r8
    af20:	4630      	mov	r0, r6
    af22:	f8d8 3004 	ldr.w	r3, [r8, #4]
		attr->handle = handle;
    af26:	f8ad b03c 	strh.w	fp, [sp, #60]	; 0x3c
		if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
    af2a:	a90b      	add	r1, sp, #44	; 0x2c
    af2c:	4798      	blx	r3
    af2e:	2800      	cmp	r0, #0
    af30:	d1b0      	bne.n	ae94 <gatt_read_type_rsp+0xa0>
    af32:	e7de      	b.n	aef2 <gatt_read_type_rsp+0xfe>
	switch (rsp->len) {
    af34:	2a07      	cmp	r2, #7
    af36:	d006      	beq.n	af46 <gatt_read_type_rsp+0x152>
    af38:	2a15      	cmp	r2, #21
    af3a:	d02c      	beq.n	af96 <gatt_read_type_rsp+0x1a2>
		BT_ERR("Invalid data len %u", rsp->len);
    af3c:	2145      	movs	r1, #69	; 0x45
    af3e:	4835      	ldr	r0, [pc, #212]	; (b014 <gatt_read_type_rsp+0x220>)
    af40:	f007 f8e2 	bl	12108 <printk>
		goto done;
    af44:	e781      	b.n	ae4a <gatt_read_type_rsp+0x56>
		u.uuid.type = BT_UUID_TYPE_16;
    af46:	f88d 1018 	strb.w	r1, [sp, #24]
	u16_t handle = 0U;
    af4a:	f04f 0900 	mov.w	r9, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
    af4e:	3c01      	subs	r4, #1
		attr = (&(struct bt_gatt_attr)BT_GATT_CHRC(&u.uuid,
    af50:	f8df a0c4 	ldr.w	sl, [pc, #196]	; b018 <gatt_read_type_rsp+0x224>
	for (length--, pdu = rsp->data; length >= rsp->len;
    af54:	b2a4      	uxth	r4, r4
    af56:	1c7d      	adds	r5, r7, #1
    af58:	783b      	ldrb	r3, [r7, #0]
    af5a:	42a3      	cmp	r3, r4
    af5c:	f63f af70 	bhi.w	ae40 <gatt_read_type_rsp+0x4c>
		handle = sys_le16_to_cpu(data->handle);
    af60:	f8b5 b000 	ldrh.w	fp, [r5]
    af64:	fa1f f98b 	uxth.w	r9, fp
		if (!handle) {
    af68:	f1b9 0f00 	cmp.w	r9, #0
    af6c:	f43f af6d 	beq.w	ae4a <gatt_read_type_rsp+0x56>
		switch (u.uuid.type) {
    af70:	f89d 3018 	ldrb.w	r3, [sp, #24]
    af74:	b19b      	cbz	r3, af9e <gatt_read_type_rsp+0x1aa>
    af76:	2b02      	cmp	r3, #2
    af78:	d018      	beq.n	afac <gatt_read_type_rsp+0x1b8>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    af7a:	f8d8 1000 	ldr.w	r1, [r8]
    af7e:	ab06      	add	r3, sp, #24
    af80:	b1d9      	cbz	r1, afba <gatt_read_type_rsp+0x1c6>
    af82:	4618      	mov	r0, r3
    af84:	f008 fc70 	bl	13868 <bt_uuid_cmp>
    af88:	ab06      	add	r3, sp, #24
    af8a:	b1b0      	cbz	r0, afba <gatt_read_type_rsp+0x1c6>
	     length -= rsp->len, pdu = (const u8_t *)pdu + rsp->len) {
    af8c:	783a      	ldrb	r2, [r7, #0]
    af8e:	1aa4      	subs	r4, r4, r2
    af90:	b2a4      	uxth	r4, r4
    af92:	4415      	add	r5, r2
    af94:	e7e0      	b.n	af58 <gatt_read_type_rsp+0x164>
		u.uuid.type = BT_UUID_TYPE_128;
    af96:	2302      	movs	r3, #2
    af98:	f88d 3018 	strb.w	r3, [sp, #24]
		break;
    af9c:	e7d5      	b.n	af4a <gatt_read_type_rsp+0x156>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
    af9e:	796b      	ldrb	r3, [r5, #5]
    afa0:	79aa      	ldrb	r2, [r5, #6]
    afa2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    afa6:	f8ad 301a 	strh.w	r3, [sp, #26]
			break;
    afaa:	e7e6      	b.n	af7a <gatt_read_type_rsp+0x186>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
    afac:	2210      	movs	r2, #16
    afae:	1d69      	adds	r1, r5, #5
    afb0:	f10d 0019 	add.w	r0, sp, #25
    afb4:	f008 fbbd 	bl	13732 <memcpy>
			break;
    afb8:	e7df      	b.n	af7a <gatt_read_type_rsp+0x186>
		attr = (&(struct bt_gatt_attr)BT_GATT_CHRC(&u.uuid,
    afba:	f642 0103 	movw	r1, #10243	; 0x2803
    afbe:	2200      	movs	r2, #0
    afc0:	f8ad 100e 	strh.w	r1, [sp, #14]
    afc4:	a903      	add	r1, sp, #12
    afc6:	e9cd 1a0b 	strd	r1, sl, [sp, #44]	; 0x2c
    afca:	9304      	str	r3, [sp, #16]
    afcc:	f88d 200c 	strb.w	r2, [sp, #12]
    afd0:	920d      	str	r2, [sp, #52]	; 0x34
    afd2:	792a      	ldrb	r2, [r5, #4]
    afd4:	78eb      	ldrb	r3, [r5, #3]
		if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
    afd6:	4630      	mov	r0, r6
		attr = (&(struct bt_gatt_attr)BT_GATT_CHRC(&u.uuid,
    afd8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    afdc:	f8ad 3014 	strh.w	r3, [sp, #20]
    afe0:	78ab      	ldrb	r3, [r5, #2]
		if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
    afe2:	4642      	mov	r2, r8
		attr = (&(struct bt_gatt_attr)BT_GATT_CHRC(&u.uuid,
    afe4:	f88d 3016 	strb.w	r3, [sp, #22]
    afe8:	ab04      	add	r3, sp, #16
    afea:	930e      	str	r3, [sp, #56]	; 0x38
    afec:	2301      	movs	r3, #1
		attr->handle = handle;
    afee:	f8ad b03c 	strh.w	fp, [sp, #60]	; 0x3c
		attr = (&(struct bt_gatt_attr)BT_GATT_CHRC(&u.uuid,
    aff2:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
		if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
    aff6:	a90b      	add	r1, sp, #44	; 0x2c
    aff8:	f8d8 3004 	ldr.w	r3, [r8, #4]
    affc:	4798      	blx	r3
    affe:	2800      	cmp	r0, #0
    b000:	d1c4      	bne.n	af8c <gatt_read_type_rsp+0x198>
    b002:	e776      	b.n	aef2 <gatt_read_type_rsp+0xfe>
	gatt_discover_next(conn, handle, params);
    b004:	4642      	mov	r2, r8
    b006:	4649      	mov	r1, r9
    b008:	4630      	mov	r0, r6
    b00a:	f009 ff0c 	bl	14e26 <gatt_discover_next>
    b00e:	e770      	b.n	aef2 <gatt_read_type_rsp+0xfe>
    b010:	0000b01d 	.word	0x0000b01d
    b014:	0001ab6c 	.word	0x0001ab6c
    b018:	00014d53 	.word	0x00014d53

0000b01c <read_included_uuid_cb>:
{
    b01c:	b570      	push	{r4, r5, r6, lr}
	if (length != 16U) {
    b01e:	2b10      	cmp	r3, #16
{
    b020:	b08e      	sub	sp, #56	; 0x38
    b022:	4611      	mov	r1, r2
    b024:	4605      	mov	r5, r0
    b026:	461a      	mov	r2, r3
    b028:	9c12      	ldr	r4, [sp, #72]	; 0x48
	if (length != 16U) {
    b02a:	d00a      	beq.n	b042 <read_included_uuid_cb+0x26>
		BT_ERR("Invalid data len %u", length);
    b02c:	2145      	movs	r1, #69	; 0x45
    b02e:	4820      	ldr	r0, [pc, #128]	; (b0b0 <read_included_uuid_cb+0x94>)
    b030:	f007 f86a 	bl	12108 <printk>
		params->func(conn, NULL, params);
    b034:	4622      	mov	r2, r4
    b036:	2100      	movs	r1, #0
    b038:	4628      	mov	r0, r5
    b03a:	6863      	ldr	r3, [r4, #4]
    b03c:	4798      	blx	r3
}
    b03e:	b00e      	add	sp, #56	; 0x38
    b040:	bd70      	pop	{r4, r5, r6, pc}
	value.start_handle = params->_included.start_handle;
    b042:	8963      	ldrh	r3, [r4, #10]
	value.uuid = &u.uuid;
    b044:	ae04      	add	r6, sp, #16
	value.start_handle = params->_included.start_handle;
    b046:	f8ad 300c 	strh.w	r3, [sp, #12]
	value.end_handle = params->_included.end_handle;
    b04a:	89a3      	ldrh	r3, [r4, #12]
	memcpy(u.u128.val, pdu, length);
    b04c:	f10d 0011 	add.w	r0, sp, #17
	value.end_handle = params->_included.end_handle;
    b050:	f8ad 300e 	strh.w	r3, [sp, #14]
	u.uuid.type = BT_UUID_TYPE_128;
    b054:	2302      	movs	r3, #2
	value.uuid = &u.uuid;
    b056:	9602      	str	r6, [sp, #8]
	u.uuid.type = BT_UUID_TYPE_128;
    b058:	f88d 3010 	strb.w	r3, [sp, #16]
	memcpy(u.u128.val, pdu, length);
    b05c:	f008 fb69 	bl	13732 <memcpy>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    b060:	6821      	ldr	r1, [r4, #0]
    b062:	b9f9      	cbnz	r1, b0a4 <read_included_uuid_cb+0x88>
	attr = (&(struct bt_gatt_attr) {
    b064:	2210      	movs	r2, #16
    b066:	2100      	movs	r1, #0
    b068:	a80a      	add	r0, sp, #40	; 0x28
    b06a:	f008 fb8d 	bl	13788 <memset>
		.uuid = BT_UUID_GATT_INCLUDE,
    b06e:	2300      	movs	r3, #0
    b070:	f88d 3004 	strb.w	r3, [sp, #4]
    b074:	f642 0302 	movw	r3, #10242	; 0x2802
    b078:	f8ad 3006 	strh.w	r3, [sp, #6]
	attr = (&(struct bt_gatt_attr) {
    b07c:	ab01      	add	r3, sp, #4
    b07e:	9309      	str	r3, [sp, #36]	; 0x24
    b080:	ab02      	add	r3, sp, #8
    b082:	930c      	str	r3, [sp, #48]	; 0x30
	attr->handle = params->_included.attr_handle;
    b084:	8923      	ldrh	r3, [r4, #8]
	if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
    b086:	4622      	mov	r2, r4
	attr->handle = params->_included.attr_handle;
    b088:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
    b08c:	4628      	mov	r0, r5
    b08e:	6863      	ldr	r3, [r4, #4]
    b090:	a909      	add	r1, sp, #36	; 0x24
    b092:	4798      	blx	r3
    b094:	2800      	cmp	r0, #0
    b096:	d0d2      	beq.n	b03e <read_included_uuid_cb+0x22>
	gatt_discover_next(conn, params->start_handle, params);
    b098:	4622      	mov	r2, r4
    b09a:	4628      	mov	r0, r5
    b09c:	8921      	ldrh	r1, [r4, #8]
    b09e:	f009 fec2 	bl	14e26 <gatt_discover_next>
	return;
    b0a2:	e7cc      	b.n	b03e <read_included_uuid_cb+0x22>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    b0a4:	4630      	mov	r0, r6
    b0a6:	f008 fbdf 	bl	13868 <bt_uuid_cmp>
    b0aa:	2800      	cmp	r0, #0
    b0ac:	d0da      	beq.n	b064 <read_included_uuid_cb+0x48>
    b0ae:	e7f3      	b.n	b098 <read_included_uuid_cb+0x7c>
    b0b0:	0001ab6c 	.word	0x0001ab6c

0000b0b4 <gatt_find_info_rsp>:
{
    b0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b0b8:	b08f      	sub	sp, #60	; 0x3c
    b0ba:	4680      	mov	r8, r0
    b0bc:	4614      	mov	r4, r2
    b0be:	9e18      	ldr	r6, [sp, #96]	; 0x60
	if (err) {
    b0c0:	b941      	cbnz	r1, b0d4 <gatt_find_info_rsp+0x20>
	switch (rsp->format) {
    b0c2:	7812      	ldrb	r2, [r2, #0]
    b0c4:	2a01      	cmp	r2, #1
    b0c6:	d00b      	beq.n	b0e0 <gatt_find_info_rsp+0x2c>
    b0c8:	2a02      	cmp	r2, #2
    b0ca:	d022      	beq.n	b112 <gatt_find_info_rsp+0x5e>
		BT_ERR("Invalid format %u", rsp->format);
    b0cc:	2145      	movs	r1, #69	; 0x45
    b0ce:	484c      	ldr	r0, [pc, #304]	; (b200 <gatt_find_info_rsp+0x14c>)
    b0d0:	f007 f81a 	bl	12108 <printk>
	params->func(conn, NULL, params);
    b0d4:	4632      	mov	r2, r6
    b0d6:	2100      	movs	r1, #0
    b0d8:	4640      	mov	r0, r8
    b0da:	6873      	ldr	r3, [r6, #4]
    b0dc:	4798      	blx	r3
    b0de:	e08b      	b.n	b1f8 <gatt_find_info_rsp+0x144>
		len = sizeof(*info.i16);
    b0e0:	f04f 0a04 	mov.w	sl, #4
		u.uuid.type = BT_UUID_TYPE_16;
    b0e4:	f88d 1010 	strb.w	r1, [sp, #16]
	length--;
    b0e8:	3b01      	subs	r3, #1
    b0ea:	b29b      	uxth	r3, r3
	if (length < len) {
    b0ec:	4553      	cmp	r3, sl
    b0ee:	d3f1      	bcc.n	b0d4 <gatt_find_info_rsp+0x20>
	bool skip = false;
    b0f0:	f04f 0900 	mov.w	r9, #0
	for (i = length / len, pdu = rsp->info; i != 0;
    b0f4:	fbb3 f3fa 	udiv	r3, r3, sl
	u16_t handle = 0U;
    b0f8:	46cb      	mov	fp, r9
			skip = false;
    b0fa:	464d      	mov	r5, r9
	for (i = length / len, pdu = rsp->info; i != 0;
    b0fc:	9300      	str	r3, [sp, #0]
    b0fe:	3401      	adds	r4, #1
    b100:	af04      	add	r7, sp, #16
    b102:	9b00      	ldr	r3, [sp, #0]
    b104:	b953      	cbnz	r3, b11c <gatt_find_info_rsp+0x68>
	gatt_discover_next(conn, handle, params);
    b106:	4632      	mov	r2, r6
    b108:	4659      	mov	r1, fp
    b10a:	4640      	mov	r0, r8
    b10c:	f009 fe8b 	bl	14e26 <gatt_discover_next>
	return;
    b110:	e072      	b.n	b1f8 <gatt_find_info_rsp+0x144>
		len = sizeof(*info.i128);
    b112:	f04f 0a12 	mov.w	sl, #18
		u.uuid.type = BT_UUID_TYPE_128;
    b116:	f88d 2010 	strb.w	r2, [sp, #16]
		break;
    b11a:	e7e5      	b.n	b0e8 <gatt_find_info_rsp+0x34>
		handle = sys_le16_to_cpu(info.i16->handle);
    b11c:	8823      	ldrh	r3, [r4, #0]
    b11e:	f8ad 3004 	strh.w	r3, [sp, #4]
    b122:	fa1f fb83 	uxth.w	fp, r3
		if (skip) {
    b126:	f1b9 0f00 	cmp.w	r9, #0
    b12a:	d151      	bne.n	b1d0 <gatt_find_info_rsp+0x11c>
		switch (u.uuid.type) {
    b12c:	f89d 3010 	ldrb.w	r3, [sp, #16]
    b130:	2b00      	cmp	r3, #0
    b132:	d03a      	beq.n	b1aa <gatt_find_info_rsp+0xf6>
    b134:	2b02      	cmp	r3, #2
    b136:	d03f      	beq.n	b1b8 <gatt_find_info_rsp+0x104>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    b138:	6831      	ldr	r1, [r6, #0]
    b13a:	2900      	cmp	r1, #0
    b13c:	d143      	bne.n	b1c6 <gatt_find_info_rsp+0x112>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
    b13e:	7c33      	ldrb	r3, [r6, #16]
    b140:	2b04      	cmp	r3, #4
    b142:	d148      	bne.n	b1d6 <gatt_find_info_rsp+0x122>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
    b144:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    b148:	4638      	mov	r0, r7
    b14a:	a902      	add	r1, sp, #8
    b14c:	f88d 5008 	strb.w	r5, [sp, #8]
    b150:	f8ad 300a 	strh.w	r3, [sp, #10]
    b154:	f008 fb88 	bl	13868 <bt_uuid_cmp>
    b158:	b310      	cbz	r0, b1a0 <gatt_find_info_rsp+0xec>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
    b15a:	f642 0301 	movw	r3, #10241	; 0x2801
    b15e:	4638      	mov	r0, r7
    b160:	a903      	add	r1, sp, #12
    b162:	f88d 500c 	strb.w	r5, [sp, #12]
    b166:	f8ad 300e 	strh.w	r3, [sp, #14]
    b16a:	f008 fb7d 	bl	13868 <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
    b16e:	b1b8      	cbz	r0, b1a0 <gatt_find_info_rsp+0xec>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
    b170:	f642 0302 	movw	r3, #10242	; 0x2802
    b174:	4638      	mov	r0, r7
    b176:	a909      	add	r1, sp, #36	; 0x24
    b178:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
    b17c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    b180:	f008 fb72 	bl	13868 <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
    b184:	b160      	cbz	r0, b1a0 <gatt_find_info_rsp+0xec>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
    b186:	f642 0303 	movw	r3, #10243	; 0x2803
    b18a:	4638      	mov	r0, r7
    b18c:	a909      	add	r1, sp, #36	; 0x24
    b18e:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
    b192:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    b196:	f008 fb67 	bl	13868 <bt_uuid_cmp>
    b19a:	b9e0      	cbnz	r0, b1d6 <gatt_find_info_rsp+0x122>
				skip = true;
    b19c:	f04f 0901 	mov.w	r9, #1
	     i--, pdu = (const u8_t *)pdu + len) {
    b1a0:	9b00      	ldr	r3, [sp, #0]
    b1a2:	4454      	add	r4, sl
    b1a4:	3b01      	subs	r3, #1
    b1a6:	9300      	str	r3, [sp, #0]
    b1a8:	e7ab      	b.n	b102 <gatt_find_info_rsp+0x4e>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
    b1aa:	78a3      	ldrb	r3, [r4, #2]
    b1ac:	78e2      	ldrb	r2, [r4, #3]
    b1ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    b1b2:	f8ad 3012 	strh.w	r3, [sp, #18]
			break;
    b1b6:	e7bf      	b.n	b138 <gatt_find_info_rsp+0x84>
			memcpy(u.u128.val, info.i128->uuid, 16);
    b1b8:	2210      	movs	r2, #16
    b1ba:	1ca1      	adds	r1, r4, #2
    b1bc:	f10d 0011 	add.w	r0, sp, #17
    b1c0:	f008 fab7 	bl	13732 <memcpy>
			break;
    b1c4:	e7b8      	b.n	b138 <gatt_find_info_rsp+0x84>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    b1c6:	4638      	mov	r0, r7
    b1c8:	f008 fb4e 	bl	13868 <bt_uuid_cmp>
    b1cc:	2800      	cmp	r0, #0
    b1ce:	d0b6      	beq.n	b13e <gatt_find_info_rsp+0x8a>
			skip = false;
    b1d0:	f04f 0900 	mov.w	r9, #0
    b1d4:	e7e4      	b.n	b1a0 <gatt_find_info_rsp+0xec>
		attr->handle = handle;
    b1d6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
		if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
    b1da:	4632      	mov	r2, r6
		attr->handle = handle;
    b1dc:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
		if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
    b1e0:	4640      	mov	r0, r8
			BT_GATT_DESCRIPTOR(&u.uuid, 0, NULL, NULL, NULL));
    b1e2:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
    b1e6:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
		if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
    b1ea:	6873      	ldr	r3, [r6, #4]
			BT_GATT_DESCRIPTOR(&u.uuid, 0, NULL, NULL, NULL));
    b1ec:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
		if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
    b1f0:	a909      	add	r1, sp, #36	; 0x24
    b1f2:	4798      	blx	r3
    b1f4:	2800      	cmp	r0, #0
    b1f6:	d1d3      	bne.n	b1a0 <gatt_find_info_rsp+0xec>
}
    b1f8:	b00f      	add	sp, #60	; 0x3c
    b1fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b1fe:	bf00      	nop
    b200:	0001ab85 	.word	0x0001ab85

0000b204 <bt_gatt_write>:
{
    b204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b208:	460c      	mov	r4, r1
	__ASSERT(conn, "invalid parameters\n");
    b20a:	4605      	mov	r5, r0
    b20c:	b970      	cbnz	r0, b22c <bt_gatt_write+0x28>
    b20e:	494d      	ldr	r1, [pc, #308]	; (b344 <bt_gatt_write+0x140>)
    b210:	f640 53ae 	movw	r3, #3502	; 0xdae
    b214:	4a4c      	ldr	r2, [pc, #304]	; (b348 <bt_gatt_write+0x144>)
    b216:	484d      	ldr	r0, [pc, #308]	; (b34c <bt_gatt_write+0x148>)
    b218:	f006 ff76 	bl	12108 <printk>
    b21c:	484c      	ldr	r0, [pc, #304]	; (b350 <bt_gatt_write+0x14c>)
    b21e:	f006 ff73 	bl	12108 <printk>
    b222:	f640 51ae 	movw	r1, #3502	; 0xdae
    b226:	4848      	ldr	r0, [pc, #288]	; (b348 <bt_gatt_write+0x144>)
    b228:	f007 fa04 	bl	12634 <assert_post_action>
	__ASSERT(params && params->func, "invalid parameters\n");
    b22c:	b10c      	cbz	r4, b232 <bt_gatt_write+0x2e>
    b22e:	6823      	ldr	r3, [r4, #0]
    b230:	b973      	cbnz	r3, b250 <bt_gatt_write+0x4c>
    b232:	4948      	ldr	r1, [pc, #288]	; (b354 <bt_gatt_write+0x150>)
    b234:	f640 53af 	movw	r3, #3503	; 0xdaf
    b238:	4a43      	ldr	r2, [pc, #268]	; (b348 <bt_gatt_write+0x144>)
    b23a:	4844      	ldr	r0, [pc, #272]	; (b34c <bt_gatt_write+0x148>)
    b23c:	f006 ff64 	bl	12108 <printk>
    b240:	4843      	ldr	r0, [pc, #268]	; (b350 <bt_gatt_write+0x14c>)
    b242:	f006 ff61 	bl	12108 <printk>
    b246:	f640 51af 	movw	r1, #3503	; 0xdaf
    b24a:	483f      	ldr	r0, [pc, #252]	; (b348 <bt_gatt_write+0x144>)
    b24c:	f007 f9f2 	bl	12634 <assert_post_action>
	__ASSERT(params->handle, "invalid parameters\n");
    b250:	88a3      	ldrh	r3, [r4, #4]
    b252:	b973      	cbnz	r3, b272 <bt_gatt_write+0x6e>
    b254:	4940      	ldr	r1, [pc, #256]	; (b358 <bt_gatt_write+0x154>)
    b256:	f44f 635b 	mov.w	r3, #3504	; 0xdb0
    b25a:	4a3b      	ldr	r2, [pc, #236]	; (b348 <bt_gatt_write+0x144>)
    b25c:	483b      	ldr	r0, [pc, #236]	; (b34c <bt_gatt_write+0x148>)
    b25e:	f006 ff53 	bl	12108 <printk>
    b262:	483b      	ldr	r0, [pc, #236]	; (b350 <bt_gatt_write+0x14c>)
    b264:	f006 ff50 	bl	12108 <printk>
    b268:	f44f 615b 	mov.w	r1, #3504	; 0xdb0
    b26c:	4836      	ldr	r0, [pc, #216]	; (b348 <bt_gatt_write+0x144>)
    b26e:	f007 f9e1 	bl	12634 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
    b272:	7b6b      	ldrb	r3, [r5, #13]
    b274:	2b06      	cmp	r3, #6
    b276:	d162      	bne.n	b33e <bt_gatt_write+0x13a>
	if (params->offset ||
    b278:	88e3      	ldrh	r3, [r4, #6]
    b27a:	b163      	cbz	r3, b296 <bt_gatt_write+0x92>
	len = MIN(params->length, bt_att_get_mtu(conn) - sizeof(*req) - 1);
    b27c:	4628      	mov	r0, r5
    b27e:	89a6      	ldrh	r6, [r4, #12]
    b280:	f009 faca 	bl	14818 <bt_att_get_mtu>
    b284:	3805      	subs	r0, #5
    b286:	4286      	cmp	r6, r0
    b288:	d329      	bcc.n	b2de <bt_gatt_write+0xda>
    b28a:	4628      	mov	r0, r5
    b28c:	f009 fac4 	bl	14818 <bt_att_get_mtu>
    b290:	1f46      	subs	r6, r0, #5
    b292:	b2b6      	uxth	r6, r6
    b294:	e024      	b.n	b2e0 <bt_gatt_write+0xdc>
	    params->length > (bt_att_get_mtu(conn) - sizeof(*req) - 1)) {
    b296:	4628      	mov	r0, r5
    b298:	89a6      	ldrh	r6, [r4, #12]
    b29a:	f009 fabd 	bl	14818 <bt_att_get_mtu>
    b29e:	3803      	subs	r0, #3
	if (params->offset ||
    b2a0:	42b0      	cmp	r0, r6
    b2a2:	d3eb      	bcc.n	b27c <bt_gatt_write+0x78>
				sizeof(*req) + params->length);
    b2a4:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    b2a6:	2112      	movs	r1, #18
    b2a8:	4628      	mov	r0, r5
    b2aa:	3202      	adds	r2, #2
    b2ac:	f7fd fc98 	bl	8be0 <bt_att_create_pdu>
	if (!buf) {
    b2b0:	4606      	mov	r6, r0
    b2b2:	b1e0      	cbz	r0, b2ee <bt_gatt_write+0xea>
	req = net_buf_add(buf, sizeof(*req));
    b2b4:	f100 0708 	add.w	r7, r0, #8
    b2b8:	2102      	movs	r1, #2
    b2ba:	4638      	mov	r0, r7
    b2bc:	f002 fa88 	bl	d7d0 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->handle);
    b2c0:	88a3      	ldrh	r3, [r4, #4]
	memcpy(req->value, params->data, params->length);
    b2c2:	89a2      	ldrh	r2, [r4, #12]
	req->handle = sys_cpu_to_le16(params->handle);
    b2c4:	f820 3b02 	strh.w	r3, [r0], #2
	memcpy(req->value, params->data, params->length);
    b2c8:	68a1      	ldr	r1, [r4, #8]
    b2ca:	f008 fa32 	bl	13732 <memcpy>
	net_buf_add(buf, params->length);
    b2ce:	89a1      	ldrh	r1, [r4, #12]
    b2d0:	4638      	mov	r0, r7
    b2d2:	f002 fa7d 	bl	d7d0 <net_buf_simple_add>
	return gatt_send(conn, buf, gatt_write_rsp, params, NULL);
    b2d6:	4623      	mov	r3, r4
    b2d8:	4631      	mov	r1, r6
    b2da:	4a20      	ldr	r2, [pc, #128]	; (b35c <bt_gatt_write+0x158>)
    b2dc:	e02a      	b.n	b334 <bt_gatt_write+0x130>
	len = MIN(params->length, bt_att_get_mtu(conn) - sizeof(*req) - 1);
    b2de:	89a6      	ldrh	r6, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_PREPARE_WRITE_REQ,
    b2e0:	2116      	movs	r1, #22
    b2e2:	4628      	mov	r0, r5
    b2e4:	1d32      	adds	r2, r6, #4
    b2e6:	f7fd fc7b 	bl	8be0 <bt_att_create_pdu>
	if (!buf) {
    b2ea:	4607      	mov	r7, r0
    b2ec:	b918      	cbnz	r0, b2f6 <bt_gatt_write+0xf2>
		return -ENOMEM;
    b2ee:	f06f 000b 	mvn.w	r0, #11
}
    b2f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	req = net_buf_add(buf, sizeof(*req));
    b2f6:	f100 0808 	add.w	r8, r0, #8
    b2fa:	2104      	movs	r1, #4
    b2fc:	4640      	mov	r0, r8
    b2fe:	f002 fa67 	bl	d7d0 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->handle);
    b302:	88a3      	ldrh	r3, [r4, #4]
	memcpy(req->value, params->data, len);
    b304:	4632      	mov	r2, r6
	req->handle = sys_cpu_to_le16(params->handle);
    b306:	8003      	strh	r3, [r0, #0]
	req->offset = sys_cpu_to_le16(params->offset);
    b308:	88e3      	ldrh	r3, [r4, #6]
	memcpy(req->value, params->data, len);
    b30a:	68a1      	ldr	r1, [r4, #8]
	req->offset = sys_cpu_to_le16(params->offset);
    b30c:	8043      	strh	r3, [r0, #2]
	memcpy(req->value, params->data, len);
    b30e:	3004      	adds	r0, #4
    b310:	f008 fa0f 	bl	13732 <memcpy>
	net_buf_add(buf, len);
    b314:	4631      	mov	r1, r6
    b316:	4640      	mov	r0, r8
    b318:	f002 fa5a 	bl	d7d0 <net_buf_simple_add>
	params->offset += len;
    b31c:	88e3      	ldrh	r3, [r4, #6]
	return gatt_send(conn, buf, gatt_prepare_write_rsp, params, NULL);
    b31e:	4639      	mov	r1, r7
	params->offset += len;
    b320:	4433      	add	r3, r6
    b322:	80e3      	strh	r3, [r4, #6]
	params->data = (const u8_t *)params->data + len;
    b324:	68a3      	ldr	r3, [r4, #8]
	params->length -= len;
    b326:	89a0      	ldrh	r0, [r4, #12]
	params->data = (const u8_t *)params->data + len;
    b328:	4433      	add	r3, r6
    b32a:	60a3      	str	r3, [r4, #8]
	return gatt_send(conn, buf, gatt_prepare_write_rsp, params, NULL);
    b32c:	4623      	mov	r3, r4
	params->length -= len;
    b32e:	1b86      	subs	r6, r0, r6
	return gatt_send(conn, buf, gatt_prepare_write_rsp, params, NULL);
    b330:	4a0b      	ldr	r2, [pc, #44]	; (b360 <bt_gatt_write+0x15c>)
	params->length -= len;
    b332:	81a6      	strh	r6, [r4, #12]
	return gatt_send(conn, buf, gatt_write_rsp, params, NULL);
    b334:	4628      	mov	r0, r5
}
    b336:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return gatt_send(conn, buf, gatt_write_rsp, params, NULL);
    b33a:	f7fe bb65 	b.w	9a08 <gatt_send.constprop.0>
		return -ENOTCONN;
    b33e:	f06f 0038 	mvn.w	r0, #56	; 0x38
    b342:	e7d6      	b.n	b2f2 <bt_gatt_write+0xee>
    b344:	0001a029 	.word	0x0001a029
    b348:	0001a7af 	.word	0x0001a7af
    b34c:	00017d82 	.word	0x00017d82
    b350:	0001aa02 	.word	0x0001aa02
    b354:	0001aac1 	.word	0x0001aac1
    b358:	0001ab9c 	.word	0x0001ab9c
    b35c:	0001498f 	.word	0x0001498f
    b360:	0000b365 	.word	0x0000b365

0000b364 <gatt_prepare_write_rsp>:
{
    b364:	b570      	push	{r4, r5, r6, lr}
    b366:	9c04      	ldr	r4, [sp, #16]
    b368:	4606      	mov	r6, r0
	if (err) {
    b36a:	b121      	cbz	r1, b376 <gatt_prepare_write_rsp+0x12>
		params->func(conn, err, params);
    b36c:	4622      	mov	r2, r4
    b36e:	6823      	ldr	r3, [r4, #0]
}
    b370:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		params->func(conn, err, params);
    b374:	4718      	bx	r3
	if (!params->length) {
    b376:	89a3      	ldrh	r3, [r4, #12]
    b378:	b99b      	cbnz	r3, b3a2 <gatt_prepare_write_rsp+0x3e>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_EXEC_WRITE_REQ, sizeof(*req));
    b37a:	2201      	movs	r2, #1
    b37c:	2118      	movs	r1, #24
    b37e:	f7fd fc2f 	bl	8be0 <bt_att_create_pdu>
	if (!buf) {
    b382:	4605      	mov	r5, r0
    b384:	b190      	cbz	r0, b3ac <gatt_prepare_write_rsp+0x48>
	req = net_buf_add(buf, sizeof(*req));
    b386:	2101      	movs	r1, #1
    b388:	3008      	adds	r0, #8
    b38a:	f002 fa21 	bl	d7d0 <net_buf_simple_add>
	req->flags = BT_ATT_FLAG_EXEC;
    b38e:	2301      	movs	r3, #1
    b390:	7003      	strb	r3, [r0, #0]
	return gatt_send(conn, buf, gatt_write_rsp, params, NULL);
    b392:	4629      	mov	r1, r5
    b394:	4623      	mov	r3, r4
    b396:	4630      	mov	r0, r6
}
    b398:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return gatt_send(conn, buf, gatt_write_rsp, params, NULL);
    b39c:	4a04      	ldr	r2, [pc, #16]	; (b3b0 <gatt_prepare_write_rsp+0x4c>)
    b39e:	f7fe bb33 	b.w	9a08 <gatt_send.constprop.0>
	bt_gatt_write(conn, params);
    b3a2:	4621      	mov	r1, r4
}
    b3a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_gatt_write(conn, params);
    b3a8:	f7ff bf2c 	b.w	b204 <bt_gatt_write>
}
    b3ac:	bd70      	pop	{r4, r5, r6, pc}
    b3ae:	bf00      	nop
    b3b0:	0001498f 	.word	0x0001498f

0000b3b4 <bt_gatt_subscribe>:
{
    b3b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b3b6:	460c      	mov	r4, r1
	__ASSERT(conn, "invalid parameters\n");
    b3b8:	4605      	mov	r5, r0
    b3ba:	b970      	cbnz	r0, b3da <bt_gatt_subscribe+0x26>
    b3bc:	494d      	ldr	r1, [pc, #308]	; (b4f4 <bt_gatt_subscribe+0x140>)
    b3be:	f640 630d 	movw	r3, #3597	; 0xe0d
    b3c2:	4a4d      	ldr	r2, [pc, #308]	; (b4f8 <bt_gatt_subscribe+0x144>)
    b3c4:	484d      	ldr	r0, [pc, #308]	; (b4fc <bt_gatt_subscribe+0x148>)
    b3c6:	f006 fe9f 	bl	12108 <printk>
    b3ca:	484d      	ldr	r0, [pc, #308]	; (b500 <bt_gatt_subscribe+0x14c>)
    b3cc:	f006 fe9c 	bl	12108 <printk>
    b3d0:	f640 610d 	movw	r1, #3597	; 0xe0d
    b3d4:	4848      	ldr	r0, [pc, #288]	; (b4f8 <bt_gatt_subscribe+0x144>)
    b3d6:	f007 f92d 	bl	12634 <assert_post_action>
	__ASSERT(params && params->notify,  "invalid parameters\n");
    b3da:	b10c      	cbz	r4, b3e0 <bt_gatt_subscribe+0x2c>
    b3dc:	6823      	ldr	r3, [r4, #0]
    b3de:	b973      	cbnz	r3, b3fe <bt_gatt_subscribe+0x4a>
    b3e0:	4948      	ldr	r1, [pc, #288]	; (b504 <bt_gatt_subscribe+0x150>)
    b3e2:	f640 630e 	movw	r3, #3598	; 0xe0e
    b3e6:	4a44      	ldr	r2, [pc, #272]	; (b4f8 <bt_gatt_subscribe+0x144>)
    b3e8:	4844      	ldr	r0, [pc, #272]	; (b4fc <bt_gatt_subscribe+0x148>)
    b3ea:	f006 fe8d 	bl	12108 <printk>
    b3ee:	4844      	ldr	r0, [pc, #272]	; (b500 <bt_gatt_subscribe+0x14c>)
    b3f0:	f006 fe8a 	bl	12108 <printk>
    b3f4:	f640 610e 	movw	r1, #3598	; 0xe0e
    b3f8:	483f      	ldr	r0, [pc, #252]	; (b4f8 <bt_gatt_subscribe+0x144>)
    b3fa:	f007 f91b 	bl	12634 <assert_post_action>
	__ASSERT(params->value, "invalid parameters\n");
    b3fe:	8923      	ldrh	r3, [r4, #8]
    b400:	b973      	cbnz	r3, b420 <bt_gatt_subscribe+0x6c>
    b402:	4941      	ldr	r1, [pc, #260]	; (b508 <bt_gatt_subscribe+0x154>)
    b404:	f640 630f 	movw	r3, #3599	; 0xe0f
    b408:	4a3b      	ldr	r2, [pc, #236]	; (b4f8 <bt_gatt_subscribe+0x144>)
    b40a:	483c      	ldr	r0, [pc, #240]	; (b4fc <bt_gatt_subscribe+0x148>)
    b40c:	f006 fe7c 	bl	12108 <printk>
    b410:	483b      	ldr	r0, [pc, #236]	; (b500 <bt_gatt_subscribe+0x14c>)
    b412:	f006 fe79 	bl	12108 <printk>
    b416:	f640 610f 	movw	r1, #3599	; 0xe0f
    b41a:	4837      	ldr	r0, [pc, #220]	; (b4f8 <bt_gatt_subscribe+0x144>)
    b41c:	f007 f90a 	bl	12634 <assert_post_action>
	__ASSERT(params->ccc_handle, "invalid parameters\n");
    b420:	88e3      	ldrh	r3, [r4, #6]
    b422:	b973      	cbnz	r3, b442 <bt_gatt_subscribe+0x8e>
    b424:	4939      	ldr	r1, [pc, #228]	; (b50c <bt_gatt_subscribe+0x158>)
    b426:	f44f 6361 	mov.w	r3, #3600	; 0xe10
    b42a:	4a33      	ldr	r2, [pc, #204]	; (b4f8 <bt_gatt_subscribe+0x144>)
    b42c:	4833      	ldr	r0, [pc, #204]	; (b4fc <bt_gatt_subscribe+0x148>)
    b42e:	f006 fe6b 	bl	12108 <printk>
    b432:	4833      	ldr	r0, [pc, #204]	; (b500 <bt_gatt_subscribe+0x14c>)
    b434:	f006 fe68 	bl	12108 <printk>
    b438:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    b43c:	482e      	ldr	r0, [pc, #184]	; (b4f8 <bt_gatt_subscribe+0x144>)
    b43e:	f007 f8f9 	bl	12634 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
    b442:	7b6b      	ldrb	r3, [r5, #13]
    b444:	2b06      	cmp	r3, #6
    b446:	d14f      	bne.n	b4e8 <bt_gatt_subscribe+0x134>
	sub = gatt_sub_find_free(conn, &free_sub);
    b448:	4628      	mov	r0, r5
    b44a:	a901      	add	r1, sp, #4
    b44c:	f7fe fc1a 	bl	9c84 <gatt_sub_find_free>
	if (sub) {
    b450:	4606      	mov	r6, r0
    b452:	b970      	cbnz	r0, b472 <bt_gatt_subscribe+0xbe>
	if (free_sub) {
    b454:	9801      	ldr	r0, [sp, #4]
    b456:	b920      	cbnz	r0, b462 <bt_gatt_subscribe+0xae>
		return -ENOMEM;
    b458:	f06f 050b 	mvn.w	r5, #11
}
    b45c:	4628      	mov	r0, r5
    b45e:	b003      	add	sp, #12
    b460:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bt_addr_le_copy(&free_sub->peer, &conn->le.dst);
    b462:	f105 017c 	add.w	r1, r5, #124	; 0x7c
    b466:	3001      	adds	r0, #1
    b468:	f009 faec 	bl	14a44 <bt_addr_le_copy>
		free_sub->id = conn->id;
    b46c:	9e01      	ldr	r6, [sp, #4]
    b46e:	7a2b      	ldrb	r3, [r5, #8]
    b470:	7033      	strb	r3, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
    b472:	68b2      	ldr	r2, [r6, #8]
    b474:	b90a      	cbnz	r2, b47a <bt_gatt_subscribe+0xc6>
    b476:	4613      	mov	r3, r2
    b478:	e001      	b.n	b47e <bt_gatt_subscribe+0xca>
    b47a:	f1a2 0310 	sub.w	r3, r2, #16
			has_subscription = true;
    b47e:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
    b480:	b97b      	cbnz	r3, b4a2 <bt_gatt_subscribe+0xee>
	if (!has_subscription) {
    b482:	bb41      	cbnz	r1, b4d6 <bt_gatt_subscribe+0x122>
		err = gatt_write_ccc(conn, params->ccc_handle, params->value,
    b484:	4628      	mov	r0, r5
    b486:	4623      	mov	r3, r4
    b488:	8922      	ldrh	r2, [r4, #8]
    b48a:	88e1      	ldrh	r1, [r4, #6]
    b48c:	f7fe fe7a 	bl	a184 <gatt_write_ccc.constprop.0>
		if (err) {
    b490:	4605      	mov	r5, r0
    b492:	b300      	cbz	r0, b4d6 <bt_gatt_subscribe+0x122>
	if (sys_slist_is_empty(&sub->list)) {
    b494:	68b3      	ldr	r3, [r6, #8]
    b496:	2b00      	cmp	r3, #0
    b498:	d1e0      	bne.n	b45c <bt_gatt_subscribe+0xa8>
    b49a:	4630      	mov	r0, r6
    b49c:	f009 faee 	bl	14a7c <gatt_sub_remove.part.0>
    b4a0:	e7dc      	b.n	b45c <bt_gatt_subscribe+0xa8>
		if (tmp == params) {
    b4a2:	42a3      	cmp	r3, r4
    b4a4:	d106      	bne.n	b4b4 <bt_gatt_subscribe+0x100>
	if (sys_slist_is_empty(&sub->list)) {
    b4a6:	b912      	cbnz	r2, b4ae <bt_gatt_subscribe+0xfa>
    b4a8:	4630      	mov	r0, r6
    b4aa:	f009 fae7 	bl	14a7c <gatt_sub_remove.part.0>
			return -EALREADY;
    b4ae:	f06f 0544 	mvn.w	r5, #68	; 0x44
    b4b2:	e7d3      	b.n	b45c <bt_gatt_subscribe+0xa8>
		if (tmp->value_handle == params->value_handle &&
    b4b4:	889f      	ldrh	r7, [r3, #4]
    b4b6:	88a0      	ldrh	r0, [r4, #4]
    b4b8:	4287      	cmp	r7, r0
    b4ba:	d104      	bne.n	b4c6 <bt_gatt_subscribe+0x112>
    b4bc:	891f      	ldrh	r7, [r3, #8]
    b4be:	8920      	ldrh	r0, [r4, #8]
			has_subscription = true;
    b4c0:	4287      	cmp	r7, r0
    b4c2:	bf28      	it	cs
    b4c4:	2101      	movcs	r1, #1
Z_GENLIST_PEEK_NEXT(slist, snode)
    b4c6:	f113 0f10 	cmn.w	r3, #16
    b4ca:	d0da      	beq.n	b482 <bt_gatt_subscribe+0xce>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    b4cc:	691b      	ldr	r3, [r3, #16]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
    b4ce:	2b00      	cmp	r3, #0
    b4d0:	d0d7      	beq.n	b482 <bt_gatt_subscribe+0xce>
    b4d2:	3b10      	subs	r3, #16
    b4d4:	e7d4      	b.n	b480 <bt_gatt_subscribe+0xcc>
Z_GENLIST_PREPEND(slist, snode)
    b4d6:	68b2      	ldr	r2, [r6, #8]
	sys_slist_prepend(&sub->list, &params->node);
    b4d8:	f104 0310 	add.w	r3, r4, #16
	parent->next = child;
    b4dc:	6122      	str	r2, [r4, #16]
Z_GENLIST_PREPEND(slist, snode)
    b4de:	68f5      	ldr	r5, [r6, #12]
	list->head = node;
    b4e0:	60b3      	str	r3, [r6, #8]
Z_GENLIST_PREPEND(slist, snode)
    b4e2:	b925      	cbnz	r5, b4ee <bt_gatt_subscribe+0x13a>
	list->tail = node;
    b4e4:	60f3      	str	r3, [r6, #12]
}
    b4e6:	e7b9      	b.n	b45c <bt_gatt_subscribe+0xa8>
		return -ENOTCONN;
    b4e8:	f06f 0538 	mvn.w	r5, #56	; 0x38
    b4ec:	e7b6      	b.n	b45c <bt_gatt_subscribe+0xa8>
	return 0;
    b4ee:	2500      	movs	r5, #0
    b4f0:	e7b4      	b.n	b45c <bt_gatt_subscribe+0xa8>
    b4f2:	bf00      	nop
    b4f4:	0001a029 	.word	0x0001a029
    b4f8:	0001a7af 	.word	0x0001a7af
    b4fc:	00017d82 	.word	0x00017d82
    b500:	0001aa02 	.word	0x0001aa02
    b504:	0001abab 	.word	0x0001abab
    b508:	0001abc4 	.word	0x0001abc4
    b50c:	0001abd2 	.word	0x0001abd2

0000b510 <bt_gatt_unsubscribe>:
{
    b510:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b514:	460e      	mov	r6, r1
	__ASSERT(conn, "invalid parameters\n");
    b516:	4680      	mov	r8, r0
    b518:	b970      	cbnz	r0, b538 <bt_gatt_unsubscribe+0x28>
    b51a:	494b      	ldr	r1, [pc, #300]	; (b648 <bt_gatt_unsubscribe+0x138>)
    b51c:	f640 6347 	movw	r3, #3655	; 0xe47
    b520:	4a4a      	ldr	r2, [pc, #296]	; (b64c <bt_gatt_unsubscribe+0x13c>)
    b522:	484b      	ldr	r0, [pc, #300]	; (b650 <bt_gatt_unsubscribe+0x140>)
    b524:	f006 fdf0 	bl	12108 <printk>
    b528:	484a      	ldr	r0, [pc, #296]	; (b654 <bt_gatt_unsubscribe+0x144>)
    b52a:	f006 fded 	bl	12108 <printk>
    b52e:	f640 6147 	movw	r1, #3655	; 0xe47
    b532:	4846      	ldr	r0, [pc, #280]	; (b64c <bt_gatt_unsubscribe+0x13c>)
    b534:	f007 f87e 	bl	12634 <assert_post_action>
	__ASSERT(params, "invalid parameters\n");
    b538:	b976      	cbnz	r6, b558 <bt_gatt_unsubscribe+0x48>
    b53a:	4947      	ldr	r1, [pc, #284]	; (b658 <bt_gatt_unsubscribe+0x148>)
    b53c:	f640 6348 	movw	r3, #3656	; 0xe48
    b540:	4a42      	ldr	r2, [pc, #264]	; (b64c <bt_gatt_unsubscribe+0x13c>)
    b542:	4843      	ldr	r0, [pc, #268]	; (b650 <bt_gatt_unsubscribe+0x140>)
    b544:	f006 fde0 	bl	12108 <printk>
    b548:	4842      	ldr	r0, [pc, #264]	; (b654 <bt_gatt_unsubscribe+0x144>)
    b54a:	f006 fddd 	bl	12108 <printk>
    b54e:	f640 6148 	movw	r1, #3656	; 0xe48
    b552:	483e      	ldr	r0, [pc, #248]	; (b64c <bt_gatt_unsubscribe+0x13c>)
    b554:	f007 f86e 	bl	12634 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
    b558:	f898 300d 	ldrb.w	r3, [r8, #13]
    b55c:	2b06      	cmp	r3, #6
    b55e:	d170      	bne.n	b642 <bt_gatt_unsubscribe+0x132>
	sub = gatt_sub_find(conn);
    b560:	2100      	movs	r1, #0
    b562:	4640      	mov	r0, r8
    b564:	f7fe fb8e 	bl	9c84 <gatt_sub_find_free>
	if (!sub) {
    b568:	4607      	mov	r7, r0
    b56a:	b920      	cbnz	r0, b576 <bt_gatt_unsubscribe+0x66>
		return -EINVAL;
    b56c:	f06f 0015 	mvn.w	r0, #21
}
    b570:	b003      	add	sp, #12
    b572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
    b576:	6884      	ldr	r4, [r0, #8]
    b578:	b1d4      	cbz	r4, b5b0 <bt_gatt_unsubscribe+0xa0>
    b57a:	f1b4 0510 	subs.w	r5, r4, #16
    b57e:	d019      	beq.n	b5b4 <bt_gatt_unsubscribe+0xa4>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    b580:	6824      	ldr	r4, [r4, #0]
    b582:	b104      	cbz	r4, b586 <bt_gatt_unsubscribe+0x76>
    b584:	3c10      	subs	r4, #16
    b586:	f04f 0900 	mov.w	r9, #0
    b58a:	46cb      	mov	fp, r9
    b58c:	46ca      	mov	sl, r9
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b58e:	f106 020c 	add.w	r2, r6, #12
    b592:	b98d      	cbnz	r5, b5b8 <bt_gatt_unsubscribe+0xa8>
	if (!found) {
    b594:	f1bb 0f00 	cmp.w	fp, #0
    b598:	d0e8      	beq.n	b56c <bt_gatt_unsubscribe+0x5c>
	if (has_subscription) {
    b59a:	f1ba 0f00 	cmp.w	sl, #0
    b59e:	d045      	beq.n	b62c <bt_gatt_unsubscribe+0x11c>
		params->notify(conn, params, NULL, 0);
    b5a0:	462b      	mov	r3, r5
    b5a2:	462a      	mov	r2, r5
    b5a4:	4631      	mov	r1, r6
    b5a6:	4640      	mov	r0, r8
    b5a8:	6834      	ldr	r4, [r6, #0]
    b5aa:	47a0      	blx	r4
		return 0;
    b5ac:	4628      	mov	r0, r5
    b5ae:	e7df      	b.n	b570 <bt_gatt_unsubscribe+0x60>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
    b5b0:	4625      	mov	r5, r4
    b5b2:	e7e8      	b.n	b586 <bt_gatt_unsubscribe+0x76>
    b5b4:	462c      	mov	r4, r5
    b5b6:	e7e6      	b.n	b586 <bt_gatt_unsubscribe+0x76>
		if (params == tmp) {
    b5b8:	42b5      	cmp	r5, r6
    b5ba:	f105 0110 	add.w	r1, r5, #16
    b5be:	d128      	bne.n	b612 <bt_gatt_unsubscribe+0x102>
Z_GENLIST_REMOVE(slist, snode)
    b5c0:	692b      	ldr	r3, [r5, #16]
    b5c2:	f1b9 0f00 	cmp.w	r9, #0
    b5c6:	d11c      	bne.n	b602 <bt_gatt_unsubscribe+0xf2>
    b5c8:	68f8      	ldr	r0, [r7, #12]
	list->head = node;
    b5ca:	60bb      	str	r3, [r7, #8]
Z_GENLIST_REMOVE(slist, snode)
    b5cc:	4281      	cmp	r1, r0
    b5ce:	d100      	bne.n	b5d2 <bt_gatt_unsubscribe+0xc2>
	list->tail = node;
    b5d0:	60fb      	str	r3, [r7, #12]
	parent->next = child;
    b5d2:	2300      	movs	r3, #0
    b5d4:	612b      	str	r3, [r5, #16]
    b5d6:	e8d2 1faf 	lda	r1, [r2]
			if (atomic_test_bit(params->flags,
    b5da:	074b      	lsls	r3, r1, #29
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    b5dc:	f3c1 0b80 	ubfx	fp, r1, #2, #1
    b5e0:	d51f      	bpl.n	b622 <bt_gatt_unsubscribe+0x112>
	bt_att_req_cancel(conn, params);
    b5e2:	4631      	mov	r1, r6
    b5e4:	4640      	mov	r0, r8
    b5e6:	9201      	str	r2, [sp, #4]
    b5e8:	f7fe f914 	bl	9814 <bt_att_req_cancel>
}
    b5ec:	9a01      	ldr	r2, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
    b5ee:	b1dc      	cbz	r4, b628 <bt_gatt_unsubscribe+0x118>
Z_GENLIST_PEEK_NEXT(slist, snode)
    b5f0:	f114 0110 	adds.w	r1, r4, #16
    b5f4:	d002      	beq.n	b5fc <bt_gatt_unsubscribe+0xec>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    b5f6:	6921      	ldr	r1, [r4, #16]
    b5f8:	b101      	cbz	r1, b5fc <bt_gatt_unsubscribe+0xec>
    b5fa:	3910      	subs	r1, #16
    b5fc:	4625      	mov	r5, r4
    b5fe:	460c      	mov	r4, r1
    b600:	e7c7      	b.n	b592 <bt_gatt_unsubscribe+0x82>
	parent->next = child;
    b602:	f8c9 3000 	str.w	r3, [r9]
Z_GENLIST_REMOVE(slist, snode)
    b606:	68f8      	ldr	r0, [r7, #12]
    b608:	4281      	cmp	r1, r0
	list->tail = node;
    b60a:	bf08      	it	eq
    b60c:	f8c7 900c 	streq.w	r9, [r7, #12]
}
    b610:	e7df      	b.n	b5d2 <bt_gatt_unsubscribe+0xc2>
		if (tmp->value_handle == params->value_handle) {
    b612:	88ad      	ldrh	r5, [r5, #4]
    b614:	88b0      	ldrh	r0, [r6, #4]
    b616:	4689      	mov	r9, r1
    b618:	4285      	cmp	r5, r0
    b61a:	bf08      	it	eq
    b61c:	f04f 0a01 	moveq.w	sl, #1
    b620:	e7e5      	b.n	b5ee <bt_gatt_unsubscribe+0xde>
			found = true;
    b622:	f04f 0b01 	mov.w	fp, #1
    b626:	e7e2      	b.n	b5ee <bt_gatt_unsubscribe+0xde>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
    b628:	4621      	mov	r1, r4
    b62a:	e7e7      	b.n	b5fc <bt_gatt_unsubscribe+0xec>
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
    b62c:	4633      	mov	r3, r6
    b62e:	4652      	mov	r2, sl
    b630:	4640      	mov	r0, r8
    b632:	88f1      	ldrh	r1, [r6, #6]
	params->value = 0x0000;
    b634:	f8a6 a008 	strh.w	sl, [r6, #8]
}
    b638:	b003      	add	sp, #12
    b63a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
    b63e:	f7fe bda1 	b.w	a184 <gatt_write_ccc.constprop.0>
		return -ENOTCONN;
    b642:	f06f 0038 	mvn.w	r0, #56	; 0x38
    b646:	e793      	b.n	b570 <bt_gatt_unsubscribe+0x60>
    b648:	0001a029 	.word	0x0001a029
    b64c:	0001a7af 	.word	0x0001a7af
    b650:	00017d82 	.word	0x00017d82
    b654:	0001aa02 	.word	0x0001aa02
    b658:	0001a9fb 	.word	0x0001a9fb

0000b65c <bt_gatt_connected>:
	data.sec = BT_SECURITY_L1;
    b65c:	2301      	movs	r3, #1
{
    b65e:	b570      	push	{r4, r5, r6, lr}
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b660:	f100 067c 	add.w	r6, r0, #124	; 0x7c
{
    b664:	b08e      	sub	sp, #56	; 0x38
    b666:	4605      	mov	r5, r0
	data.conn = conn;
    b668:	9003      	str	r0, [sp, #12]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b66a:	4631      	mov	r1, r6
    b66c:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
    b66e:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b672:	f008 faf4 	bl	13c5e <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
    b676:	b190      	cbz	r0, b69e <bt_gatt_connected+0x42>
		if (conn->id) {
    b678:	7a2a      	ldrb	r2, [r5, #8]
    b67a:	b362      	cbz	r2, b6d6 <bt_gatt_connected+0x7a>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
    b67c:	ac02      	add	r4, sp, #8
    b67e:	2104      	movs	r1, #4
    b680:	4620      	mov	r0, r4
    b682:	f006 fcab 	bl	11fdc <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
    b686:	9400      	str	r4, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
    b688:	2124      	movs	r1, #36	; 0x24
    b68a:	4a1f      	ldr	r2, [pc, #124]	; (b708 <bt_gatt_connected+0xac>)
    b68c:	a805      	add	r0, sp, #20
    b68e:	4633      	mov	r3, r6
    b690:	f7f9 f978 	bl	4984 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
    b694:	aa05      	add	r2, sp, #20
    b696:	4610      	mov	r0, r2
    b698:	491c      	ldr	r1, [pc, #112]	; (b70c <bt_gatt_connected+0xb0>)
    b69a:	f7f6 fb57 	bl	1d4c <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    b69e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b6a2:	2001      	movs	r0, #1
    b6a4:	4a1a      	ldr	r2, [pc, #104]	; (b710 <bt_gatt_connected+0xb4>)
    b6a6:	ab03      	add	r3, sp, #12
    b6a8:	f009 fb84 	bl	14db4 <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
    b6ac:	4628      	mov	r0, r5
    b6ae:	f008 fbb8 	bl	13e22 <bt_conn_get_security>
    b6b2:	f89d 1010 	ldrb.w	r1, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    b6b6:	4288      	cmp	r0, r1
    b6b8:	d202      	bcs.n	b6c0 <bt_gatt_connected+0x64>
		bt_conn_set_security(conn, data.sec);
    b6ba:	4628      	mov	r0, r5
    b6bc:	f008 fb82 	bl	13dc4 <bt_conn_set_security>
	sub = gatt_sub_find(conn);
    b6c0:	2100      	movs	r1, #0
    b6c2:	4628      	mov	r0, r5
    b6c4:	f7fe fade 	bl	9c84 <gatt_sub_find_free>
	if (!sub) {
    b6c8:	b118      	cbz	r0, b6d2 <bt_gatt_connected+0x76>
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
    b6ca:	6884      	ldr	r4, [r0, #8]
    b6cc:	b10c      	cbz	r4, b6d2 <bt_gatt_connected+0x76>
    b6ce:	3c10      	subs	r4, #16
    b6d0:	b91c      	cbnz	r4, b6da <bt_gatt_connected+0x7e>
}
    b6d2:	b00e      	add	sp, #56	; 0x38
    b6d4:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
    b6d6:	9200      	str	r2, [sp, #0]
    b6d8:	e7d6      	b.n	b688 <bt_gatt_connected+0x2c>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
    b6da:	4631      	mov	r1, r6
    b6dc:	7a28      	ldrb	r0, [r5, #8]
    b6de:	f008 fabe 	bl	13c5e <bt_addr_le_is_bonded>
    b6e2:	b158      	cbz	r0, b6fc <bt_gatt_connected+0xa0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b6e4:	f104 030c 	add.w	r3, r4, #12
    b6e8:	e8d3 3faf 	lda	r3, [r3]
    b6ec:	079b      	lsls	r3, r3, #30
    b6ee:	d405      	bmi.n	b6fc <bt_gatt_connected+0xa0>
			gatt_write_ccc(conn, params->ccc_handle, params->value,
    b6f0:	4623      	mov	r3, r4
    b6f2:	4628      	mov	r0, r5
    b6f4:	8922      	ldrh	r2, [r4, #8]
    b6f6:	88e1      	ldrh	r1, [r4, #6]
    b6f8:	f7fe fd44 	bl	a184 <gatt_write_ccc.constprop.0>
Z_GENLIST_PEEK_NEXT(slist, snode)
    b6fc:	f114 0f10 	cmn.w	r4, #16
    b700:	d0e7      	beq.n	b6d2 <bt_gatt_connected+0x76>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    b702:	6924      	ldr	r4, [r4, #16]
    b704:	e7e2      	b.n	b6cc <bt_gatt_connected+0x70>
    b706:	bf00      	nop
    b708:	0001a9e6 	.word	0x0001a9e6
    b70c:	0000a61d 	.word	0x0000a61d
    b710:	0000a8c9 	.word	0x0000a8c9

0000b714 <bt_gatt_encrypt_change>:
{
    b714:	b507      	push	{r0, r1, r2, lr}
	data.conn = conn;
    b716:	9000      	str	r0, [sp, #0]
	data.sec = BT_SECURITY_L1;
    b718:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    b71a:	466b      	mov	r3, sp
    b71c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b720:	4a03      	ldr	r2, [pc, #12]	; (b730 <bt_gatt_encrypt_change+0x1c>)
	data.sec = BT_SECURITY_L1;
    b722:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    b726:	f009 fb45 	bl	14db4 <bt_gatt_foreach_attr>
}
    b72a:	b003      	add	sp, #12
    b72c:	f85d fb04 	ldr.w	pc, [sp], #4
    b730:	0000a8c9 	.word	0x0000a8c9

0000b734 <db_hash_read>:
{
    b734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b736:	4604      	mov	r4, r0
	err = k_delayed_work_cancel(&db_hash_work);
    b738:	4810      	ldr	r0, [pc, #64]	; (b77c <db_hash_read+0x48>)
{
    b73a:	4615      	mov	r5, r2
    b73c:	461f      	mov	r7, r3
    b73e:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	err = k_delayed_work_cancel(&db_hash_work);
    b742:	f005 fd4b 	bl	111dc <k_delayed_work_cancel>
	if (!err) {
    b746:	b910      	cbnz	r0, b74e <db_hash_read+0x1a>
		db_hash_gen(true);
    b748:	2001      	movs	r0, #1
    b74a:	f7fe fed3 	bl	a4f4 <db_hash_gen>
	bt_gatt_change_aware(conn, true);
    b74e:	2101      	movs	r1, #1
    b750:	4620      	mov	r0, r4
    b752:	f009 fbfc 	bl	14f4e <bt_gatt_change_aware>
	if (offset > value_len) {
    b756:	2e10      	cmp	r6, #16
    b758:	d80c      	bhi.n	b774 <db_hash_read+0x40>
	len = MIN(buf_len, value_len - offset);
    b75a:	f1c6 0410 	rsb	r4, r6, #16
    b75e:	42bc      	cmp	r4, r7
    b760:	bfa8      	it	ge
    b762:	463c      	movge	r4, r7
	memcpy(buf, (u8_t *)value + offset, len);
    b764:	4906      	ldr	r1, [pc, #24]	; (b780 <db_hash_read+0x4c>)
    b766:	4622      	mov	r2, r4
    b768:	4628      	mov	r0, r5
    b76a:	4431      	add	r1, r6
    b76c:	f007 ffe1 	bl	13732 <memcpy>
}
    b770:	4620      	mov	r0, r4
    b772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    b774:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
    b778:	e7fa      	b.n	b770 <db_hash_read+0x3c>
    b77a:	bf00      	nop
    b77c:	20000f6c 	.word	0x20000f6c
    b780:	20001f69 	.word	0x20001f69

0000b784 <bt_gatt_store_ccc>:
	save.count = 0;
    b784:	2300      	movs	r3, #0
{
    b786:	b570      	push	{r4, r5, r6, lr}
    b788:	4604      	mov	r4, r0
    b78a:	b0c0      	sub	sp, #256	; 0x100
    b78c:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
    b78e:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
    b790:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
    b794:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
    b796:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b79a:	2001      	movs	r0, #1
    b79c:	4a13      	ldr	r2, [pc, #76]	; (b7ec <bt_gatt_store_ccc+0x68>)
    b79e:	ab0d      	add	r3, sp, #52	; 0x34
    b7a0:	f009 fb08 	bl	14db4 <bt_gatt_foreach_attr>
	if (id) {
    b7a4:	b1ec      	cbz	r4, b7e2 <bt_gatt_store_ccc+0x5e>
		u8_to_dec(id_str, sizeof(id_str), id);
    b7a6:	ae03      	add	r6, sp, #12
    b7a8:	4622      	mov	r2, r4
    b7aa:	2104      	movs	r1, #4
    b7ac:	4630      	mov	r0, r6
    b7ae:	f006 fc15 	bl	11fdc <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
    b7b2:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    b7b4:	4a0e      	ldr	r2, [pc, #56]	; (b7f0 <bt_gatt_store_ccc+0x6c>)
    b7b6:	462b      	mov	r3, r5
    b7b8:	2124      	movs	r1, #36	; 0x24
    b7ba:	a804      	add	r0, sp, #16
    b7bc:	f7f9 f8e2 	bl	4984 <bt_settings_encode_key>
	if (save.count) {
    b7c0:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
    b7c2:	b182      	cbz	r2, b7e6 <bt_gatt_store_ccc+0x62>
		len = save.count * sizeof(*save.store);
    b7c4:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
    b7c6:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
    b7c8:	a804      	add	r0, sp, #16
    b7ca:	f7f6 fa5b 	bl	1c84 <settings_save_one>
	if (err) {
    b7ce:	4604      	mov	r4, r0
    b7d0:	b120      	cbz	r0, b7dc <bt_gatt_store_ccc+0x58>
		BT_ERR("Failed to store CCCs (err %d)", err);
    b7d2:	4602      	mov	r2, r0
    b7d4:	2145      	movs	r1, #69	; 0x45
    b7d6:	4807      	ldr	r0, [pc, #28]	; (b7f4 <bt_gatt_store_ccc+0x70>)
    b7d8:	f006 fc96 	bl	12108 <printk>
}
    b7dc:	4620      	mov	r0, r4
    b7de:	b040      	add	sp, #256	; 0x100
    b7e0:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    b7e2:	9400      	str	r4, [sp, #0]
    b7e4:	e7e6      	b.n	b7b4 <bt_gatt_store_ccc+0x30>
		str = NULL;
    b7e6:	4611      	mov	r1, r2
    b7e8:	e7ee      	b.n	b7c8 <bt_gatt_store_ccc+0x44>
    b7ea:	bf00      	nop
    b7ec:	00009ad9 	.word	0x00009ad9
    b7f0:	0001a9e6 	.word	0x0001a9e6
    b7f4:	0001abe5 	.word	0x0001abe5

0000b7f8 <bt_gatt_disconnected>:
{
    b7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b7fc:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    b7fe:	4603      	mov	r3, r0
    b800:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b804:	2001      	movs	r0, #1
{
    b806:	b08d      	sub	sp, #52	; 0x34
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    b808:	4a48      	ldr	r2, [pc, #288]	; (b92c <bt_gatt_disconnected+0x134>)
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b80a:	f104 067c 	add.w	r6, r4, #124	; 0x7c
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    b80e:	f009 fad1 	bl	14db4 <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b812:	4631      	mov	r1, r6
    b814:	7a20      	ldrb	r0, [r4, #8]
    b816:	f008 fa22 	bl	13c5e <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    b81a:	b378      	cbz	r0, b87c <bt_gatt_disconnected+0x84>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
    b81c:	4631      	mov	r1, r6
    b81e:	7a20      	ldrb	r0, [r4, #8]
    b820:	f7ff ffb0 	bl	b784 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
    b824:	4620      	mov	r0, r4
    b826:	f7fe fbb5 	bl	9f94 <find_cf_cfg>
	if (!cfg) {
    b82a:	4605      	mov	r5, r0
    b82c:	2800      	cmp	r0, #0
    b82e:	d04f      	beq.n	b8d0 <bt_gatt_disconnected+0xd8>
		if (conn->id) {
    b830:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
    b832:	3508      	adds	r5, #8
		if (conn->id) {
    b834:	2a00      	cmp	r2, #0
    b836:	d04d      	beq.n	b8d4 <bt_gatt_disconnected+0xdc>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
    b838:	af02      	add	r7, sp, #8
    b83a:	2104      	movs	r1, #4
    b83c:	4638      	mov	r0, r7
    b83e:	f006 fbcd 	bl	11fdc <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
    b842:	4633      	mov	r3, r6
    b844:	9700      	str	r7, [sp, #0]
    b846:	2124      	movs	r1, #36	; 0x24
    b848:	4a39      	ldr	r2, [pc, #228]	; (b930 <bt_gatt_disconnected+0x138>)
    b84a:	a803      	add	r0, sp, #12
    b84c:	f7f9 f89a 	bl	4984 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
    b850:	7a23      	ldrb	r3, [r4, #8]
    b852:	2701      	movs	r7, #1
    b854:	b93b      	cbnz	r3, b866 <bt_gatt_disconnected+0x6e>
		bt_settings_encode_key(key, sizeof(key), "cf",
    b856:	2300      	movs	r3, #0
    b858:	2124      	movs	r1, #36	; 0x24
    b85a:	9300      	str	r3, [sp, #0]
    b85c:	4a34      	ldr	r2, [pc, #208]	; (b930 <bt_gatt_disconnected+0x138>)
    b85e:	4633      	mov	r3, r6
    b860:	a803      	add	r0, sp, #12
    b862:	f7f9 f88f 	bl	4984 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
    b866:	463a      	mov	r2, r7
    b868:	4629      	mov	r1, r5
    b86a:	a803      	add	r0, sp, #12
    b86c:	f7f6 fa0a 	bl	1c84 <settings_save_one>
	if (err) {
    b870:	4602      	mov	r2, r0
    b872:	b118      	cbz	r0, b87c <bt_gatt_disconnected+0x84>
		BT_ERR("Failed to store Client Features (err %d)", err);
    b874:	2145      	movs	r1, #69	; 0x45
    b876:	482f      	ldr	r0, [pc, #188]	; (b934 <bt_gatt_disconnected+0x13c>)
    b878:	f006 fc46 	bl	12108 <printk>
	sub = gatt_sub_find(conn);
    b87c:	2100      	movs	r1, #0
    b87e:	4620      	mov	r0, r4
    b880:	f7fe fa00 	bl	9c84 <gatt_sub_find_free>
	if (!sub) {
    b884:	4607      	mov	r7, r0
    b886:	b3b0      	cbz	r0, b8f6 <bt_gatt_disconnected+0xfe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    b888:	6883      	ldr	r3, [r0, #8]
    b88a:	b3a3      	cbz	r3, b8f6 <bt_gatt_disconnected+0xfe>
    b88c:	f1b3 0810 	subs.w	r8, r3, #16
    b890:	d031      	beq.n	b8f6 <bt_gatt_disconnected+0xfe>
    b892:	681d      	ldr	r5, [r3, #0]
    b894:	b105      	cbz	r5, b898 <bt_gatt_disconnected+0xa0>
    b896:	3d10      	subs	r5, #16
    b898:	f04f 0b00 	mov.w	fp, #0
			params->value = 0U;
    b89c:	46da      	mov	sl, fp
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
    b89e:	f107 0901 	add.w	r9, r7, #1
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    b8a2:	4631      	mov	r1, r6
    b8a4:	7a20      	ldrb	r0, [r4, #8]
    b8a6:	f008 f9da 	bl	13c5e <bt_addr_le_is_bonded>
    b8aa:	b9a8      	cbnz	r0, b8d8 <bt_gatt_disconnected+0xe0>
			gatt_sub_remove(conn, sub, prev, params);
    b8ac:	4643      	mov	r3, r8
    b8ae:	465a      	mov	r2, fp
    b8b0:	4639      	mov	r1, r7
    b8b2:	4620      	mov	r0, r4
			params->value = 0U;
    b8b4:	f8a8 a008 	strh.w	sl, [r8, #8]
			gatt_sub_remove(conn, sub, prev, params);
    b8b8:	f009 f9ef 	bl	14c9a <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    b8bc:	b1dd      	cbz	r5, b8f6 <bt_gatt_disconnected+0xfe>
Z_GENLIST_PEEK_NEXT(slist, snode)
    b8be:	f115 0110 	adds.w	r1, r5, #16
    b8c2:	d002      	beq.n	b8ca <bt_gatt_disconnected+0xd2>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    b8c4:	6929      	ldr	r1, [r5, #16]
    b8c6:	b101      	cbz	r1, b8ca <bt_gatt_disconnected+0xd2>
    b8c8:	3910      	subs	r1, #16
    b8ca:	46a8      	mov	r8, r5
    b8cc:	460d      	mov	r5, r1
    b8ce:	e7e8      	b.n	b8a2 <bt_gatt_disconnected+0xaa>
		len = 0;
    b8d0:	4607      	mov	r7, r0
    b8d2:	e7c0      	b.n	b856 <bt_gatt_disconnected+0x5e>
    b8d4:	2701      	movs	r7, #1
    b8d6:	e7be      	b.n	b856 <bt_gatt_disconnected+0x5e>
    b8d8:	f108 030c 	add.w	r3, r8, #12
    b8dc:	e8d3 3faf 	lda	r3, [r3]
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    b8e0:	07db      	lsls	r3, r3, #31
    b8e2:	d4e3      	bmi.n	b8ac <bt_gatt_disconnected+0xb4>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
    b8e4:	787b      	ldrb	r3, [r7, #1]
    b8e6:	b11b      	cbz	r3, b8f0 <bt_gatt_disconnected+0xf8>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
    b8e8:	4631      	mov	r1, r6
    b8ea:	4648      	mov	r0, r9
    b8ec:	f009 f8aa 	bl	14a44 <bt_addr_le_copy>
			prev = &params->node;
    b8f0:	f108 0b10 	add.w	fp, r8, #16
    b8f4:	e7e2      	b.n	b8bc <bt_gatt_disconnected+0xc4>
	cfg = find_cf_cfg(conn);
    b8f6:	4620      	mov	r0, r4
    b8f8:	f7fe fb4c 	bl	9f94 <find_cf_cfg>
	if (!cfg) {
    b8fc:	4605      	mov	r5, r0
    b8fe:	b138      	cbz	r0, b910 <bt_gatt_disconnected+0x118>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b900:	4631      	mov	r1, r6
    b902:	7a20      	ldrb	r0, [r4, #8]
    b904:	f008 f9ab 	bl	13c5e <bt_addr_le_is_bonded>
    b908:	b928      	cbnz	r0, b916 <bt_gatt_disconnected+0x11e>
		clear_cf_cfg(cfg);
    b90a:	4628      	mov	r0, r5
    b90c:	f009 f8c2 	bl	14a94 <clear_cf_cfg>
}
    b910:	b00d      	add	sp, #52	; 0x34
    b912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    b916:	4631      	mov	r1, r6
    b918:	1c68      	adds	r0, r5, #1
    b91a:	f009 f893 	bl	14a44 <bt_addr_le_copy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b91e:	f06f 0102 	mvn.w	r1, #2
    b922:	f105 000c 	add.w	r0, r5, #12
    b926:	f009 f89e 	bl	14a66 <atomic_and>
}
    b92a:	e7f1      	b.n	b910 <bt_gatt_disconnected+0x118>
    b92c:	0000a285 	.word	0x0000a285
    b930:	0001ac39 	.word	0x0001ac39
    b934:	0001ac08 	.word	0x0001ac08

0000b938 <get_io_capa>:
static const u8_t *sc_public_key;
static K_SEM_DEFINE(sc_local_pkey_ready, 0, 1);

static u8_t get_io_capa(void)
{
	if (!bt_auth) {
    b938:	4b10      	ldr	r3, [pc, #64]	; (b97c <get_io_capa+0x44>)
    b93a:	681b      	ldr	r3, [r3, #0]
    b93c:	b1bb      	cbz	r3, b96e <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    b93e:	681a      	ldr	r2, [r3, #0]
    b940:	b142      	cbz	r2, b954 <get_io_capa+0x1c>
    b942:	6859      	ldr	r1, [r3, #4]
    b944:	b131      	cbz	r1, b954 <get_io_capa+0x1c>
    b946:	6899      	ldr	r1, [r3, #8]
    b948:	b911      	cbnz	r1, b950 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    b94a:	490d      	ldr	r1, [pc, #52]	; (b980 <get_io_capa+0x48>)
    b94c:	7809      	ldrb	r1, [r1, #0]
    b94e:	b939      	cbnz	r1, b960 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    b950:	2004      	movs	r0, #4
    b952:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    b954:	490a      	ldr	r1, [pc, #40]	; (b980 <get_io_capa+0x48>)
    b956:	7809      	ldrb	r1, [r1, #0]
    b958:	b111      	cbz	r1, b960 <get_io_capa+0x28>
    b95a:	b10a      	cbz	r2, b960 <get_io_capa+0x28>
    b95c:	6899      	ldr	r1, [r3, #8]
    b95e:	b941      	cbnz	r1, b972 <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
    b960:	685b      	ldr	r3, [r3, #4]
    b962:	b943      	cbnz	r3, b976 <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
    b964:	2a00      	cmp	r2, #0
    b966:	bf0c      	ite	eq
    b968:	2003      	moveq	r0, #3
    b96a:	2000      	movne	r0, #0
    b96c:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
    b96e:	2003      	movs	r0, #3
    b970:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
    b972:	2001      	movs	r0, #1
    b974:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
    b976:	2002      	movs	r0, #2
	}
}
    b978:	4770      	bx	lr
    b97a:	bf00      	nop
    b97c:	20000d24 	.word	0x20000d24
    b980:	20001f8a 	.word	0x20001f8a

0000b984 <sys_memcpy_swap>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
    b984:	4288      	cmp	r0, r1
{
    b986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b988:	4604      	mov	r4, r0
    b98a:	460d      	mov	r5, r1
    b98c:	4616      	mov	r6, r2
    b98e:	eb00 0702 	add.w	r7, r0, r2
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
    b992:	d91a      	bls.n	b9ca <sys_memcpy_swap+0x46>
    b994:	188b      	adds	r3, r1, r2
    b996:	4298      	cmp	r0, r3
    b998:	d20e      	bcs.n	b9b8 <sys_memcpy_swap+0x34>
    b99a:	490d      	ldr	r1, [pc, #52]	; (b9d0 <sys_memcpy_swap+0x4c>)
    b99c:	f240 2317 	movw	r3, #535	; 0x217
    b9a0:	4a0c      	ldr	r2, [pc, #48]	; (b9d4 <sys_memcpy_swap+0x50>)
    b9a2:	480d      	ldr	r0, [pc, #52]	; (b9d8 <sys_memcpy_swap+0x54>)
    b9a4:	f006 fbb0 	bl	12108 <printk>
    b9a8:	480c      	ldr	r0, [pc, #48]	; (b9dc <sys_memcpy_swap+0x58>)
    b9aa:	f006 fbad 	bl	12108 <printk>
    b9ae:	f240 2117 	movw	r1, #535	; 0x217
    b9b2:	4808      	ldr	r0, [pc, #32]	; (b9d4 <sys_memcpy_swap+0x50>)
    b9b4:	f006 fe3e 	bl	12634 <assert_post_action>
	psrc += length - 1;
    b9b8:	3e01      	subs	r6, #1
    b9ba:	4435      	add	r5, r6
		*pdst++ = *psrc--;
    b9bc:	f815 3901 	ldrb.w	r3, [r5], #-1
    b9c0:	f804 3b01 	strb.w	r3, [r4], #1
	for (; length > 0; length--) {
    b9c4:	42bc      	cmp	r4, r7
    b9c6:	d1f9      	bne.n	b9bc <sys_memcpy_swap+0x38>
}
    b9c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
    b9ca:	d0e6      	beq.n	b99a <sys_memcpy_swap+0x16>
    b9cc:	42b9      	cmp	r1, r7
    b9ce:	e7e3      	b.n	b998 <sys_memcpy_swap+0x14>
    b9d0:	00019c69 	.word	0x00019c69
    b9d4:	00019c3e 	.word	0x00019c3e
    b9d8:	00017d82 	.word	0x00017d82
    b9dc:	00019cc0 	.word	0x00019cc0

0000b9e0 <smp_chan_get>:
		return false;
	}
}

static struct bt_smp *smp_chan_get(struct bt_conn *conn)
{
    b9e0:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    b9e2:	2106      	movs	r1, #6
    b9e4:	f008 fc8d 	bl	14302 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    b9e8:	4604      	mov	r4, r0
    b9ea:	b918      	cbnz	r0, b9f4 <smp_chan_get+0x14>
		BT_ERR("Unable to find SMP channel");
    b9ec:	2145      	movs	r1, #69	; 0x45
    b9ee:	4802      	ldr	r0, [pc, #8]	; (b9f8 <smp_chan_get+0x18>)
    b9f0:	f006 fb8a 	bl	12108 <printk>
		return NULL;
	}

	return CONTAINER_OF(chan, struct bt_smp, chan);
}
    b9f4:	4620      	mov	r0, r4
    b9f6:	bd10      	pop	{r4, pc}
    b9f8:	0001ac4a 	.word	0x0001ac4a

0000b9fc <bt_smp_accept>:
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    b9fc:	b508      	push	{r3, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
    b9fe:	4b07      	ldr	r3, [pc, #28]	; (ba1c <bt_smp_accept+0x20>)
{
    ba00:	4602      	mov	r2, r0
		if (smp->chan.chan.conn) {
    ba02:	6818      	ldr	r0, [r3, #0]
    ba04:	b918      	cbnz	r0, ba0e <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.chan.ops = &ops;
    ba06:	4a06      	ldr	r2, [pc, #24]	; (ba20 <bt_smp_accept+0x24>)
    ba08:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan.chan;
    ba0a:	600b      	str	r3, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    ba0c:	bd08      	pop	{r3, pc}
	BT_ERR("No available SMP context for conn %p", conn);
    ba0e:	4805      	ldr	r0, [pc, #20]	; (ba24 <bt_smp_accept+0x28>)
    ba10:	2145      	movs	r1, #69	; 0x45
    ba12:	f006 fb79 	bl	12108 <printk>
    ba16:	f06f 000b 	mvn.w	r0, #11
    ba1a:	e7f7      	b.n	ba0c <bt_smp_accept+0x10>
    ba1c:	20001000 	.word	0x20001000
    ba20:	000174d8 	.word	0x000174d8
    ba24:	0001ac6a 	.word	0x0001ac6a

0000ba28 <smp_send.isra.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    ba28:	4613      	mov	r3, r2
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    ba2a:	2200      	movs	r2, #0
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    ba2c:	b513      	push	{r0, r1, r4, lr}
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    ba2e:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    ba30:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    ba32:	460a      	mov	r2, r1
    ba34:	6800      	ldr	r0, [r0, #0]
    ba36:	2106      	movs	r1, #6
    ba38:	f008 fb85 	bl	14146 <bt_l2cap_send_cb>
    ba3c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    ba40:	2300      	movs	r3, #0
    ba42:	4804      	ldr	r0, [pc, #16]	; (ba54 <smp_send.isra.0+0x2c>)
    ba44:	f504 71ce 	add.w	r1, r4, #412	; 0x19c
}
    ba48:	b002      	add	sp, #8
    ba4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ba4e:	f005 bb3b 	b.w	110c8 <k_delayed_work_submit_to_queue>
    ba52:	bf00      	nop
    ba54:	20001dcc 	.word	0x20001dcc

0000ba58 <sc_send_public_key>:
{
    ba58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    ba5a:	210c      	movs	r1, #12
{
    ba5c:	4605      	mov	r5, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    ba5e:	f009 fb79 	bl	15154 <smp_create_pdu.isra.0>
	if (!req_buf) {
    ba62:	4604      	mov	r4, r0
    ba64:	b1b0      	cbz	r0, ba94 <sc_send_public_key+0x3c>
	req = net_buf_add(req_buf, sizeof(*req));
    ba66:	2140      	movs	r1, #64	; 0x40
    ba68:	3008      	adds	r0, #8
    ba6a:	f001 feb1 	bl	d7d0 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
    ba6e:	4f0a      	ldr	r7, [pc, #40]	; (ba98 <sc_send_public_key+0x40>)
    ba70:	2220      	movs	r2, #32
    ba72:	6839      	ldr	r1, [r7, #0]
	req = net_buf_add(req_buf, sizeof(*req));
    ba74:	4606      	mov	r6, r0
	memcpy(req->x, sc_public_key, sizeof(req->x));
    ba76:	f007 fe5c 	bl	13732 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    ba7a:	2220      	movs	r2, #32
    ba7c:	6839      	ldr	r1, [r7, #0]
    ba7e:	18b0      	adds	r0, r6, r2
    ba80:	4411      	add	r1, r2
    ba82:	f007 fe56 	bl	13732 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
    ba86:	4628      	mov	r0, r5
    ba88:	2200      	movs	r2, #0
    ba8a:	4621      	mov	r1, r4
    ba8c:	f7ff ffcc 	bl	ba28 <smp_send.isra.0>
	return 0;
    ba90:	2000      	movs	r0, #0
}
    ba92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    ba94:	2008      	movs	r0, #8
    ba96:	e7fc      	b.n	ba92 <sc_send_public_key+0x3a>
    ba98:	200011bc 	.word	0x200011bc

0000ba9c <bt_smp_distribute_keys>:
{
    ba9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    baa0:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    baa2:	6800      	ldr	r0, [r0, #0]
{
    baa4:	b089      	sub	sp, #36	; 0x24
	if (!keys) {
    baa6:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
    baaa:	b95b      	cbnz	r3, bac4 <bt_smp_distribute_keys+0x28>
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
    baac:	307c      	adds	r0, #124	; 0x7c
    baae:	f7f8 fec9 	bl	4844 <bt_addr_le_str_real>
    bab2:	2145      	movs	r1, #69	; 0x45
    bab4:	4602      	mov	r2, r0
    bab6:	483c      	ldr	r0, [pc, #240]	; (bba8 <bt_smp_distribute_keys+0x10c>)
    bab8:	f006 fb26 	bl	12108 <printk>
		return BT_SMP_ERR_UNSPECIFIED;
    babc:	2008      	movs	r0, #8
}
    babe:	b009      	add	sp, #36	; 0x24
    bac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    bac4:	f104 07b4 	add.w	r7, r4, #180	; 0xb4
    bac8:	2105      	movs	r1, #5
    baca:	4638      	mov	r0, r7
    bacc:	f009 fb1e 	bl	1510c <atomic_test_bit>
    bad0:	4680      	mov	r8, r0
    bad2:	b9a8      	cbnz	r0, bb00 <bt_smp_distribute_keys+0x64>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    bad4:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
    bad8:	f013 0001 	ands.w	r0, r3, #1
    badc:	d0ef      	beq.n	babe <bt_smp_distribute_keys+0x22>
	struct bt_keys *keys = conn->le.keys;
    bade:	6823      	ldr	r3, [r4, #0]
		bt_rand((void *)&rand, sizeof(rand));
    bae0:	211a      	movs	r1, #26
    bae2:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
    bae4:	f8d3 50a8 	ldr.w	r5, [r3, #168]	; 0xa8
		bt_rand((void *)&rand, sizeof(rand));
    bae8:	f7fb f890 	bl	6c0c <bt_rand>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
    baec:	2106      	movs	r1, #6
    baee:	4620      	mov	r0, r4
    baf0:	f009 fb30 	bl	15154 <smp_create_pdu.isra.0>
		if (!buf) {
    baf4:	4606      	mov	r6, r0
    baf6:	b928      	cbnz	r0, bb04 <bt_smp_distribute_keys+0x68>
			BT_ERR("Unable to allocate Encrypt Info buffer");
    baf8:	2145      	movs	r1, #69	; 0x45
    bafa:	482c      	ldr	r0, [pc, #176]	; (bbac <bt_smp_distribute_keys+0x110>)
			BT_ERR("Unable to allocate Master Ident buffer");
    bafc:	f006 fb04 	bl	12108 <printk>
	return 0;
    bb00:	2000      	movs	r0, #0
    bb02:	e7dc      	b.n	babe <bt_smp_distribute_keys+0x22>
		info = net_buf_add(buf, sizeof(*info));
    bb04:	2110      	movs	r1, #16
    bb06:	3008      	adds	r0, #8
    bb08:	f001 fe62 	bl	d7d0 <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
    bb0c:	7b2a      	ldrb	r2, [r5, #12]
    bb0e:	a901      	add	r1, sp, #4
		info = net_buf_add(buf, sizeof(*info));
    bb10:	4681      	mov	r9, r0
		memcpy(info->ltk, rand.key, keys->enc_size);
    bb12:	f007 fe0e 	bl	13732 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    bb16:	7b28      	ldrb	r0, [r5, #12]
    bb18:	280f      	cmp	r0, #15
    bb1a:	d805      	bhi.n	bb28 <bt_smp_distribute_keys+0x8c>
			(void)memset(info->ltk + keys->enc_size, 0,
    bb1c:	f1c0 0210 	rsb	r2, r0, #16
    bb20:	4641      	mov	r1, r8
    bb22:	4448      	add	r0, r9
    bb24:	f007 fe30 	bl	13788 <memset>
		smp_send(smp, buf, NULL, NULL);
    bb28:	4631      	mov	r1, r6
    bb2a:	2200      	movs	r2, #0
    bb2c:	4620      	mov	r0, r4
    bb2e:	f7ff ff7b 	bl	ba28 <smp_send.isra.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_MASTER_IDENT,
    bb32:	2107      	movs	r1, #7
    bb34:	4620      	mov	r0, r4
    bb36:	f009 fb0d 	bl	15154 <smp_create_pdu.isra.0>
		if (!buf) {
    bb3a:	4606      	mov	r6, r0
    bb3c:	b910      	cbnz	r0, bb44 <bt_smp_distribute_keys+0xa8>
			BT_ERR("Unable to allocate Master Ident buffer");
    bb3e:	2145      	movs	r1, #69	; 0x45
    bb40:	481b      	ldr	r0, [pc, #108]	; (bbb0 <bt_smp_distribute_keys+0x114>)
    bb42:	e7db      	b.n	bafc <bt_smp_distribute_keys+0x60>
		ident = net_buf_add(buf, sizeof(*ident));
    bb44:	210a      	movs	r1, #10
    bb46:	3008      	adds	r0, #8
    bb48:	f001 fe42 	bl	d7d0 <net_buf_simple_add>
    bb4c:	4680      	mov	r8, r0
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
    bb4e:	2208      	movs	r2, #8
    bb50:	a905      	add	r1, sp, #20
    bb52:	3002      	adds	r0, #2
    bb54:	f007 fded 	bl	13732 <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
    bb58:	2202      	movs	r2, #2
    bb5a:	a907      	add	r1, sp, #28
    bb5c:	4640      	mov	r0, r8
    bb5e:	f007 fde8 	bl	13732 <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
    bb62:	4631      	mov	r1, r6
    bb64:	4620      	mov	r0, r4
    bb66:	4a13      	ldr	r2, [pc, #76]	; (bbb4 <bt_smp_distribute_keys+0x118>)
    bb68:	f7ff ff5e 	bl	ba28 <smp_send.isra.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    bb6c:	210c      	movs	r1, #12
    bb6e:	4638      	mov	r0, r7
    bb70:	f009 facc 	bl	1510c <atomic_test_bit>
    bb74:	2800      	cmp	r0, #0
    bb76:	d0c3      	beq.n	bb00 <bt_smp_distribute_keys+0x64>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    bb78:	4628      	mov	r0, r5
    bb7a:	2101      	movs	r1, #1
    bb7c:	f009 fe00 	bl	15780 <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, rand.key,
    bb80:	a901      	add	r1, sp, #4
    bb82:	2210      	movs	r2, #16
    bb84:	f105 004a 	add.w	r0, r5, #74	; 0x4a
    bb88:	f007 fdd3 	bl	13732 <memcpy>
			memcpy(keys->slave_ltk.rand, rand.rand,
    bb8c:	a905      	add	r1, sp, #20
    bb8e:	2208      	movs	r2, #8
    bb90:	f105 0040 	add.w	r0, r5, #64	; 0x40
    bb94:	f007 fdcd 	bl	13732 <memcpy>
			memcpy(keys->slave_ltk.ediv, rand.ediv,
    bb98:	2202      	movs	r2, #2
    bb9a:	a907      	add	r1, sp, #28
    bb9c:	f105 0048 	add.w	r0, r5, #72	; 0x48
    bba0:	f007 fdc7 	bl	13732 <memcpy>
    bba4:	e7ac      	b.n	bb00 <bt_smp_distribute_keys+0x64>
    bba6:	bf00      	nop
    bba8:	0001ac94 	.word	0x0001ac94
    bbac:	0001acae 	.word	0x0001acae
    bbb0:	0001acda 	.word	0x0001acda
    bbb4:	0000c3c1 	.word	0x0000c3c1

0000bbb8 <compute_and_send_master_dhcheck>:
	(void)memset(r, 0, sizeof(r));
    bbb8:	2210      	movs	r2, #16
{
    bbba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bbbe:	4604      	mov	r4, r0
    bbc0:	b0a2      	sub	sp, #136	; 0x88
	(void)memset(r, 0, sizeof(r));
    bbc2:	2100      	movs	r1, #0
    bbc4:	eb0d 0002 	add.w	r0, sp, r2
    bbc8:	f007 fdde 	bl	13788 <memset>
	switch (smp->method) {
    bbcc:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    bbd0:	2b05      	cmp	r3, #5
    bbd2:	d87d      	bhi.n	bcd0 <compute_and_send_master_dhcheck+0x118>
    bbd4:	e8df f003 	tbb	[pc, r3]
    bbd8:	09030309 	.word	0x09030309
    bbdc:	7e7c      	.short	0x7e7c
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    bbde:	2204      	movs	r2, #4
    bbe0:	f504 71c4 	add.w	r1, r4, #392	; 0x188
    bbe4:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    bbe6:	f007 fda4 	bl	13732 <memcpy>
	u8_t m[53] = { 0x00, /* counter */
    bbea:	4b4d      	ldr	r3, [pc, #308]	; (bd20 <compute_and_send_master_dhcheck+0x168>)
		   &smp->chan.chan.conn->le.init_addr,
    bbec:	6825      	ldr	r5, [r4, #0]
	u8_t m[53] = { 0x00, /* counter */
    bbee:	aa14      	add	r2, sp, #80	; 0x50
    bbf0:	f103 0730 	add.w	r7, r3, #48	; 0x30
    bbf4:	4616      	mov	r6, r2
    bbf6:	6818      	ldr	r0, [r3, #0]
    bbf8:	6859      	ldr	r1, [r3, #4]
    bbfa:	3308      	adds	r3, #8
    bbfc:	c603      	stmia	r6!, {r0, r1}
    bbfe:	42bb      	cmp	r3, r7
    bc00:	4632      	mov	r2, r6
    bc02:	d1f7      	bne.n	bbf4 <compute_and_send_master_dhcheck+0x3c>
    bc04:	6818      	ldr	r0, [r3, #0]
    bc06:	791b      	ldrb	r3, [r3, #4]
	sys_memcpy_swap(ws, w, 32);
    bc08:	2220      	movs	r2, #32
	u8_t m[53] = { 0x00, /* counter */
    bc0a:	6030      	str	r0, [r6, #0]
    bc0c:	7133      	strb	r3, [r6, #4]
	sys_memcpy_swap(ws, w, 32);
    bc0e:	f204 1147 	addw	r1, r4, #327	; 0x147
    bc12:	a80c      	add	r0, sp, #48	; 0x30
    bc14:	f7ff feb6 	bl	b984 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    bc18:	2220      	movs	r2, #32
    bc1a:	4842      	ldr	r0, [pc, #264]	; (bd24 <compute_and_send_master_dhcheck+0x16c>)
    bc1c:	ab08      	add	r3, sp, #32
    bc1e:	a90c      	add	r1, sp, #48	; 0x30
    bc20:	f009 f9bd 	bl	14f9e <bt_smp_aes_cmac>
	if (err) {
    bc24:	2800      	cmp	r0, #0
    bc26:	d153      	bne.n	bcd0 <compute_and_send_master_dhcheck+0x118>
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    bc28:	f104 07d7 	add.w	r7, r4, #215	; 0xd7
	sys_memcpy_swap(m + 5, n1, 16);
    bc2c:	2210      	movs	r2, #16
    bc2e:	4639      	mov	r1, r7
    bc30:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    bc34:	f104 08e7 	add.w	r8, r4, #231	; 0xe7
	sys_memcpy_swap(m + 5, n1, 16);
    bc38:	f7ff fea4 	bl	b984 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
    bc3c:	2210      	movs	r2, #16
    bc3e:	4641      	mov	r1, r8
    bc40:	f10d 0065 	add.w	r0, sp, #101	; 0x65
    bc44:	f7ff fe9e 	bl	b984 <sys_memcpy_swap>
	m[37] = a1->type;
    bc48:	f895 3083 	ldrb.w	r3, [r5, #131]	; 0x83
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    bc4c:	2206      	movs	r2, #6
    bc4e:	f105 0184 	add.w	r1, r5, #132	; 0x84
    bc52:	f10d 0076 	add.w	r0, sp, #118	; 0x76
	m[37] = a1->type;
    bc56:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    bc5a:	f7ff fe93 	bl	b984 <sys_memcpy_swap>
	m[44] = a2->type;
    bc5e:	f895 308a 	ldrb.w	r3, [r5, #138]	; 0x8a
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    bc62:	2206      	movs	r2, #6
    bc64:	f105 018b 	add.w	r1, r5, #139	; 0x8b
    bc68:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    bc6c:	f204 1677 	addw	r6, r4, #375	; 0x177
	m[44] = a2->type;
    bc70:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    bc74:	f7ff fe86 	bl	b984 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    bc78:	4633      	mov	r3, r6
    bc7a:	2235      	movs	r2, #53	; 0x35
    bc7c:	a914      	add	r1, sp, #80	; 0x50
    bc7e:	a808      	add	r0, sp, #32
    bc80:	f009 f98d 	bl	14f9e <bt_smp_aes_cmac>
	if (err) {
    bc84:	bb20      	cbnz	r0, bcd0 <compute_and_send_master_dhcheck+0x118>
	sys_mem_swap(mackey, 16);
    bc86:	4630      	mov	r0, r6
    bc88:	f009 f9bf 	bl	1500a <sys_mem_swap.constprop.0>
	m[0] = 0x01;
    bc8c:	2301      	movs	r3, #1
		   smp->tk)) {
    bc8e:	f104 05f7 	add.w	r5, r4, #247	; 0xf7
	m[0] = 0x01;
    bc92:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    bc96:	2235      	movs	r2, #53	; 0x35
    bc98:	462b      	mov	r3, r5
    bc9a:	a914      	add	r1, sp, #80	; 0x50
    bc9c:	a808      	add	r0, sp, #32
    bc9e:	f009 f97e 	bl	14f9e <bt_smp_aes_cmac>
	if (err) {
    bca2:	b9a8      	cbnz	r0, bcd0 <compute_and_send_master_dhcheck+0x118>
	sys_mem_swap(ltk, 16);
    bca4:	4628      	mov	r0, r5
    bca6:	f009 f9b0 	bl	1500a <sys_mem_swap.constprop.0>
		   &smp->chan.chan.conn->le.init_addr,
    bcaa:	4622      	mov	r2, r4
    bcac:	f852 3bba 	ldr.w	r3, [r2], #186
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    bcb0:	a914      	add	r1, sp, #80	; 0x50
    bcb2:	9103      	str	r1, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, e)) {
    bcb4:	f103 018a 	add.w	r1, r3, #138	; 0x8a
		   &smp->chan.chan.conn->le.init_addr,
    bcb8:	3383      	adds	r3, #131	; 0x83
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    bcba:	e9cd 2300 	strd	r2, r3, [sp]
    bcbe:	9102      	str	r1, [sp, #8]
    bcc0:	4642      	mov	r2, r8
    bcc2:	4639      	mov	r1, r7
    bcc4:	4630      	mov	r0, r6
    bcc6:	ab04      	add	r3, sp, #16
    bcc8:	f009 f9ad 	bl	15026 <smp_f6>
    bccc:	4605      	mov	r5, r0
    bcce:	b148      	cbz	r0, bce4 <compute_and_send_master_dhcheck+0x12c>
		return BT_SMP_ERR_UNSPECIFIED;
    bcd0:	2008      	movs	r0, #8
    bcd2:	e021      	b.n	bd18 <compute_and_send_master_dhcheck+0x160>
		if (smp->oobd_remote) {
    bcd4:	f8d4 1194 	ldr.w	r1, [r4, #404]	; 0x194
    bcd8:	2900      	cmp	r1, #0
    bcda:	d086      	beq.n	bbea <compute_and_send_master_dhcheck+0x32>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    bcdc:	2210      	movs	r2, #16
    bcde:	eb0d 0002 	add.w	r0, sp, r2
    bce2:	e780      	b.n	bbe6 <compute_and_send_master_dhcheck+0x2e>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    bce4:	210d      	movs	r1, #13
    bce6:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    bcea:	f009 fa29 	bl	15140 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
    bcee:	210d      	movs	r1, #13
    bcf0:	4620      	mov	r0, r4
    bcf2:	f009 fa2f 	bl	15154 <smp_create_pdu.isra.0>
	if (!buf) {
    bcf6:	4606      	mov	r6, r0
    bcf8:	2800      	cmp	r0, #0
    bcfa:	d0e9      	beq.n	bcd0 <compute_and_send_master_dhcheck+0x118>
	req = net_buf_add(buf, sizeof(*req));
    bcfc:	2110      	movs	r1, #16
    bcfe:	3008      	adds	r0, #8
    bd00:	f001 fd66 	bl	d7d0 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
    bd04:	2210      	movs	r2, #16
    bd06:	a914      	add	r1, sp, #80	; 0x50
    bd08:	f007 fd13 	bl	13732 <memcpy>
	smp_send(smp, buf, NULL, NULL);
    bd0c:	4620      	mov	r0, r4
    bd0e:	462a      	mov	r2, r5
    bd10:	4631      	mov	r1, r6
    bd12:	f7ff fe89 	bl	ba28 <smp_send.isra.0>
	return 0;
    bd16:	4628      	mov	r0, r5
}
    bd18:	b022      	add	sp, #136	; 0x88
    bd1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bd1e:	bf00      	nop
    bd20:	00016ef9 	.word	0x00016ef9
    bd24:	0001afa6 	.word	0x0001afa6

0000bd28 <smp_send_pairing_req>:
{
    bd28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bd2c:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
    bd2e:	f7ff fe57 	bl	b9e0 <smp_chan_get>
	if (!smp) {
    bd32:	4604      	mov	r4, r0
    bd34:	2800      	cmp	r0, #0
    bd36:	f000 80bc 	beq.w	beb2 <smp_send_pairing_req+0x18a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    bd3a:	f100 06b4 	add.w	r6, r0, #180	; 0xb4
    bd3e:	2104      	movs	r1, #4
    bd40:	4630      	mov	r0, r6
    bd42:	f009 f9e3 	bl	1510c <atomic_test_bit>
    bd46:	2800      	cmp	r0, #0
    bd48:	f040 80b6 	bne.w	beb8 <smp_send_pairing_req+0x190>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    bd4c:	2103      	movs	r1, #3
    bd4e:	4630      	mov	r0, r6
    bd50:	f009 f9dc 	bl	1510c <atomic_test_bit>
    bd54:	b120      	cbz	r0, bd60 <smp_send_pairing_req+0x38>
		return -EBUSY;
    bd56:	f06f 050f 	mvn.w	r5, #15
}
    bd5a:	4628      	mov	r0, r5
    bd5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    bd60:	2101      	movs	r1, #1
    bd62:	4630      	mov	r0, r6
    bd64:	f009 f9d2 	bl	1510c <atomic_test_bit>
    bd68:	2800      	cmp	r0, #0
    bd6a:	d1f4      	bne.n	bd56 <smp_send_pairing_req+0x2e>
	if (!sec_level_reachable(conn)) {
    bd6c:	7aab      	ldrb	r3, [r5, #10]
	switch (conn->required_sec_level) {
    bd6e:	2b03      	cmp	r3, #3
    bd70:	d016      	beq.n	bda0 <smp_send_pairing_req+0x78>
    bd72:	d805      	bhi.n	bd80 <smp_send_pairing_req+0x58>
    bd74:	3b01      	subs	r3, #1
    bd76:	2b01      	cmp	r3, #1
    bd78:	d920      	bls.n	bdbc <smp_send_pairing_req+0x94>
		return -EINVAL;
    bd7a:	f06f 0515 	mvn.w	r5, #21
    bd7e:	e7ec      	b.n	bd5a <smp_send_pairing_req+0x32>
	switch (conn->required_sec_level) {
    bd80:	2b04      	cmp	r3, #4
    bd82:	d1fa      	bne.n	bd7a <smp_send_pairing_req+0x52>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    bd84:	f7ff fdd8 	bl	b938 <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    bd88:	2803      	cmp	r0, #3
    bd8a:	d104      	bne.n	bd96 <smp_send_pairing_req+0x6e>
    bd8c:	4b4c      	ldr	r3, [pc, #304]	; (bec0 <smp_send_pairing_req+0x198>)
    bd8e:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    bd90:	b11b      	cbz	r3, bd9a <smp_send_pairing_req+0x72>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    bd92:	68db      	ldr	r3, [r3, #12]
    bd94:	b343      	cbz	r3, bde8 <smp_send_pairing_req+0xc0>
    bd96:	4b4b      	ldr	r3, [pc, #300]	; (bec4 <smp_send_pairing_req+0x19c>)
    bd98:	781b      	ldrb	r3, [r3, #0]
    bd9a:	f003 0301 	and.w	r3, r3, #1
    bd9e:	e00b      	b.n	bdb8 <smp_send_pairing_req+0x90>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    bda0:	f7ff fdca 	bl	b938 <get_io_capa>
    bda4:	2803      	cmp	r0, #3
    bda6:	d11d      	bne.n	bde4 <smp_send_pairing_req+0xbc>
		       (bt_auth && bt_auth->oob_data_request);
    bda8:	4b45      	ldr	r3, [pc, #276]	; (bec0 <smp_send_pairing_req+0x198>)
    bdaa:	681b      	ldr	r3, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    bdac:	2b00      	cmp	r3, #0
    bdae:	d0e4      	beq.n	bd7a <smp_send_pairing_req+0x52>
		       (bt_auth && bt_auth->oob_data_request);
    bdb0:	68db      	ldr	r3, [r3, #12]
    bdb2:	3b00      	subs	r3, #0
    bdb4:	bf18      	it	ne
    bdb6:	2301      	movne	r3, #1
	if (!sec_level_reachable(conn)) {
    bdb8:	2b00      	cmp	r3, #0
    bdba:	d0de      	beq.n	bd7a <smp_send_pairing_req+0x52>
	if (!conn->le.keys) {
    bdbc:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
    bdc0:	b1a3      	cbz	r3, bdec <smp_send_pairing_req+0xc4>
	(void)memset((u8_t *)smp + sizeof(smp->chan), 0,
    bdc2:	f104 0ab0 	add.w	sl, r4, #176	; 0xb0
    bdc6:	22ec      	movs	r2, #236	; 0xec
    bdc8:	2100      	movs	r1, #0
    bdca:	4650      	mov	r0, sl
    bdcc:	f007 fcdc 	bl	13788 <memset>
	if (bt_rand(smp->prnd, 16)) {
    bdd0:	2110      	movs	r1, #16
    bdd2:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
    bdd6:	f7fa ff19 	bl	6c0c <bt_rand>
    bdda:	4605      	mov	r5, r0
    bddc:	b190      	cbz	r0, be04 <smp_send_pairing_req+0xdc>
		return -ENOBUFS;
    bdde:	f06f 0536 	mvn.w	r5, #54	; 0x36
    bde2:	e7ba      	b.n	bd5a <smp_send_pairing_req+0x32>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    bde4:	2301      	movs	r3, #1
    bde6:	e7e7      	b.n	bdb8 <smp_send_pairing_req+0x90>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    bde8:	2300      	movs	r3, #0
    bdea:	e7d6      	b.n	bd9a <smp_send_pairing_req+0x72>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    bdec:	7a28      	ldrb	r0, [r5, #8]
    bdee:	f105 017c 	add.w	r1, r5, #124	; 0x7c
    bdf2:	f001 f877 	bl	cee4 <bt_keys_get_addr>
    bdf6:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
		if (!conn->le.keys) {
    bdfa:	2800      	cmp	r0, #0
    bdfc:	d1e1      	bne.n	bdc2 <smp_send_pairing_req+0x9a>
			return -ENOMEM;
    bdfe:	f06f 050b 	mvn.w	r5, #11
    be02:	e7aa      	b.n	bd5a <smp_send_pairing_req+0x32>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    be04:	2105      	movs	r1, #5
    be06:	4650      	mov	r0, sl
    be08:	f009 f99a 	bl	15140 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
    be0c:	f7fa fe18 	bl	6a40 <bt_pub_key_get>
    be10:	4b2d      	ldr	r3, [pc, #180]	; (bec8 <smp_send_pairing_req+0x1a0>)
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
    be12:	2101      	movs	r1, #1
	sc_public_key = bt_pub_key_get();
    be14:	6018      	str	r0, [r3, #0]
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
    be16:	4620      	mov	r0, r4
    be18:	f009 f99c 	bl	15154 <smp_create_pdu.isra.0>
	if (!req_buf) {
    be1c:	4681      	mov	r9, r0
    be1e:	2800      	cmp	r0, #0
    be20:	d0dd      	beq.n	bdde <smp_send_pairing_req+0xb6>
	req = net_buf_add(req_buf, sizeof(*req));
    be22:	2106      	movs	r1, #6
    be24:	3008      	adds	r0, #8
    be26:	f001 fcd3 	bl	d7d0 <net_buf_simple_add>
	if (sc_supported) {
    be2a:	4b26      	ldr	r3, [pc, #152]	; (bec4 <smp_send_pairing_req+0x19c>)
	req = net_buf_add(req_buf, sizeof(*req));
    be2c:	4607      	mov	r7, r0
	if (sc_supported) {
    be2e:	781b      	ldrb	r3, [r3, #0]
		auth &= BT_SMP_AUTH_MASK;
    be30:	2b00      	cmp	r3, #0
    be32:	bf14      	ite	ne
    be34:	f04f 0809 	movne.w	r8, #9
    be38:	f04f 0801 	moveq.w	r8, #1
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    be3c:	f7ff fd7c 	bl	b938 <get_io_capa>
	if (bondable) {
    be40:	4b22      	ldr	r3, [pc, #136]	; (becc <smp_send_pairing_req+0x1a4>)
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    be42:	2803      	cmp	r0, #3
	if (bondable) {
    be44:	781b      	ldrb	r3, [r3, #0]
		auth |= BT_SMP_AUTH_MITM;
    be46:	bf18      	it	ne
    be48:	f048 0804 	orrne.w	r8, r8, #4
	if (bondable) {
    be4c:	b373      	cbz	r3, beac <smp_send_pairing_req+0x184>
		auth |= BT_SMP_AUTH_BONDING;
    be4e:	f048 0801 	orr.w	r8, r8, #1
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
    be52:	f887 8002 	strb.w	r8, [r7, #2]
	req->io_capability = get_io_capa();
    be56:	f7ff fd6f 	bl	b938 <get_io_capa>
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    be5a:	4b1d      	ldr	r3, [pc, #116]	; (bed0 <smp_send_pairing_req+0x1a8>)
	req->resp_key_dist = RECV_KEYS;
    be5c:	f04f 0803 	mov.w	r8, #3
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    be60:	781b      	ldrb	r3, [r3, #0]
	smp->local_dist = SEND_KEYS;
    be62:	f240 3201 	movw	r2, #769	; 0x301
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    be66:	707b      	strb	r3, [r7, #1]
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    be68:	2310      	movs	r3, #16
    be6a:	70fb      	strb	r3, [r7, #3]
	req->init_key_dist = SEND_KEYS;
    be6c:	2301      	movs	r3, #1
	req->io_capability = get_io_capa();
    be6e:	7038      	strb	r0, [r7, #0]
	req->init_key_dist = SEND_KEYS;
    be70:	713b      	strb	r3, [r7, #4]
	req->resp_key_dist = RECV_KEYS;
    be72:	f887 8005 	strb.w	r8, [r7, #5]
	memcpy(smp->preq + 1, req, sizeof(*req));
    be76:	4639      	mov	r1, r7
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    be78:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
	smp->local_dist = SEND_KEYS;
    be7c:	f8a4 2198 	strh.w	r2, [r4, #408]	; 0x198
	memcpy(smp->preq + 1, req, sizeof(*req));
    be80:	f104 00ba 	add.w	r0, r4, #186	; 0xba
    be84:	2206      	movs	r2, #6
    be86:	f007 fc54 	bl	13732 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
    be8a:	2200      	movs	r2, #0
    be8c:	4649      	mov	r1, r9
    be8e:	4620      	mov	r0, r4
    be90:	f7ff fdca 	bl	ba28 <smp_send.isra.0>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
    be94:	4650      	mov	r0, sl
    be96:	2102      	movs	r1, #2
    be98:	f009 f952 	bl	15140 <atomic_set_bit>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    be9c:	210b      	movs	r1, #11
    be9e:	f009 f94f 	bl	15140 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    bea2:	4641      	mov	r1, r8
    bea4:	4630      	mov	r0, r6
    bea6:	f009 f94b 	bl	15140 <atomic_set_bit>
	return 0;
    beaa:	e756      	b.n	bd5a <smp_send_pairing_req+0x32>
		auth &= ~BT_SMP_AUTH_BONDING;
    beac:	f008 080c 	and.w	r8, r8, #12
    beb0:	e7cf      	b.n	be52 <smp_send_pairing_req+0x12a>
		return -ENOTCONN;
    beb2:	f06f 0538 	mvn.w	r5, #56	; 0x38
    beb6:	e750      	b.n	bd5a <smp_send_pairing_req+0x32>
		return -EIO;
    beb8:	f06f 0504 	mvn.w	r5, #4
    bebc:	e74d      	b.n	bd5a <smp_send_pairing_req+0x32>
    bebe:	bf00      	nop
    bec0:	20000d24 	.word	0x20000d24
    bec4:	20001f8a 	.word	0x20001f8a
    bec8:	200011bc 	.word	0x200011bc
    becc:	2000033c 	.word	0x2000033c
    bed0:	20001f89 	.word	0x20001f89

0000bed4 <smp_security_request>:
{
    bed4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    bed6:	4606      	mov	r6, r0
    bed8:	f856 4bb4 	ldr.w	r4, [r6], #180
	struct bt_smp_security_request *req = (void *)buf->data;
    bedc:	688b      	ldr	r3, [r1, #8]
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    bede:	4630      	mov	r0, r6
    bee0:	2103      	movs	r1, #3
    bee2:	f009 f913 	bl	1510c <atomic_test_bit>
    bee6:	b108      	cbz	r0, beec <smp_security_request+0x18>
	return 0;
    bee8:	2000      	movs	r0, #0
    beea:	e057      	b.n	bf9c <smp_security_request+0xc8>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    beec:	2101      	movs	r1, #1
    beee:	4630      	mov	r0, r6
    bef0:	f009 f90c 	bl	1510c <atomic_test_bit>
    bef4:	2800      	cmp	r0, #0
    bef6:	d1f7      	bne.n	bee8 <smp_security_request+0x14>
	if (sc_supported) {
    bef8:	781d      	ldrb	r5, [r3, #0]
    befa:	4b2c      	ldr	r3, [pc, #176]	; (bfac <smp_security_request+0xd8>)
    befc:	781b      	ldrb	r3, [r3, #0]
    befe:	b17b      	cbz	r3, bf20 <smp_security_request+0x4c>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
    bf00:	f005 050f 	and.w	r5, r5, #15
	if (conn->le.keys) {
    bf04:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    bf08:	b16b      	cbz	r3, bf26 <smp_security_request+0x52>
		if (!(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
    bf0a:	89db      	ldrh	r3, [r3, #14]
    bf0c:	f003 0324 	and.w	r3, r3, #36	; 0x24
    bf10:	b9d3      	cbnz	r3, bf48 <smp_security_request+0x74>
	if (smp_send_pairing_req(conn) < 0) {
    bf12:	4620      	mov	r0, r4
    bf14:	f7ff ff08 	bl	bd28 <smp_send_pairing_req>
    bf18:	2800      	cmp	r0, #0
    bf1a:	db3e      	blt.n	bf9a <smp_security_request+0xc6>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    bf1c:	210e      	movs	r1, #14
    bf1e:	e040      	b.n	bfa2 <smp_security_request+0xce>
		auth = req->auth_req & BT_SMP_AUTH_MASK;
    bf20:	f005 0507 	and.w	r5, r5, #7
    bf24:	e7ee      	b.n	bf04 <smp_security_request+0x30>
					     &conn->le.dst);
    bf26:	f104 077c 	add.w	r7, r4, #124	; 0x7c
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
    bf2a:	463a      	mov	r2, r7
    bf2c:	2020      	movs	r0, #32
    bf2e:	7a21      	ldrb	r1, [r4, #8]
    bf30:	f001 f818 	bl	cf64 <bt_keys_find>
    bf34:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
		if (!conn->le.keys) {
    bf38:	b930      	cbnz	r0, bf48 <smp_security_request+0x74>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK, conn->id,
    bf3a:	463a      	mov	r2, r7
    bf3c:	2004      	movs	r0, #4
    bf3e:	7a21      	ldrb	r1, [r4, #8]
    bf40:	f001 f810 	bl	cf64 <bt_keys_find>
    bf44:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
	if (!conn->le.keys) {
    bf48:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    bf4c:	2900      	cmp	r1, #0
    bf4e:	d0e0      	beq.n	bf12 <smp_security_request+0x3e>
	if ((auth & BT_SMP_AUTH_MITM) &&
    bf50:	076f      	lsls	r7, r5, #29
    bf52:	d50f      	bpl.n	bf74 <smp_security_request+0xa0>
    bf54:	7b4b      	ldrb	r3, [r1, #13]
    bf56:	07d8      	lsls	r0, r3, #31
    bf58:	d40c      	bmi.n	bf74 <smp_security_request+0xa0>
		if (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT) {
    bf5a:	f7ff fced 	bl	b938 <get_io_capa>
    bf5e:	2803      	cmp	r0, #3
			BT_INFO("New auth requirements: 0x%x, repairing",
    bf60:	462a      	mov	r2, r5
		if (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT) {
    bf62:	d002      	beq.n	bf6a <smp_security_request+0x96>
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
    bf64:	2149      	movs	r1, #73	; 0x49
    bf66:	4812      	ldr	r0, [pc, #72]	; (bfb0 <smp_security_request+0xdc>)
    bf68:	e001      	b.n	bf6e <smp_security_request+0x9a>
		BT_WARN("Unsupported auth requirements: 0x%x, repairing",
    bf6a:	2157      	movs	r1, #87	; 0x57
    bf6c:	4811      	ldr	r0, [pc, #68]	; (bfb4 <smp_security_request+0xe0>)
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
    bf6e:	f006 f8cb 	bl	12108 <printk>
		goto pair;
    bf72:	e7ce      	b.n	bf12 <smp_security_request+0x3e>
	if ((auth & BT_SMP_AUTH_SC) &&
    bf74:	072a      	lsls	r2, r5, #28
    bf76:	d504      	bpl.n	bf82 <smp_security_request+0xae>
    bf78:	89cb      	ldrh	r3, [r1, #14]
    bf7a:	069b      	lsls	r3, r3, #26
    bf7c:	d401      	bmi.n	bf82 <smp_security_request+0xae>
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
    bf7e:	462a      	mov	r2, r5
    bf80:	e7f0      	b.n	bf64 <smp_security_request+0x90>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
    bf82:	7b0b      	ldrb	r3, [r1, #12]
    bf84:	f101 0218 	add.w	r2, r1, #24
    bf88:	9300      	str	r3, [sp, #0]
    bf8a:	4620      	mov	r0, r4
    bf8c:	f101 031a 	add.w	r3, r1, #26
    bf90:	3110      	adds	r1, #16
    bf92:	f007 fedc 	bl	13d4e <bt_conn_le_start_encryption>
    bf96:	2800      	cmp	r0, #0
    bf98:	da02      	bge.n	bfa0 <smp_security_request+0xcc>
		return BT_SMP_ERR_UNSPECIFIED;
    bf9a:	2008      	movs	r0, #8
}
    bf9c:	b003      	add	sp, #12
    bf9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    bfa0:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    bfa2:	4630      	mov	r0, r6
    bfa4:	f009 f8cc 	bl	15140 <atomic_set_bit>
    bfa8:	e79e      	b.n	bee8 <smp_security_request+0x14>
    bfaa:	bf00      	nop
    bfac:	20001f8a 	.word	0x20001f8a
    bfb0:	0001ad06 	.word	0x0001ad06
    bfb4:	0001ad32 	.word	0x0001ad32

0000bfb8 <smp_ident_info>:
{
    bfb8:	b570      	push	{r4, r5, r6, lr}
    bfba:	460b      	mov	r3, r1
    bfbc:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    bfbe:	210c      	movs	r1, #12
    bfc0:	30b4      	adds	r0, #180	; 0xb4
    bfc2:	f009 f8a3 	bl	1510c <atomic_test_bit>
    bfc6:	b1c0      	cbz	r0, bffa <smp_ident_info+0x42>
		struct bt_smp_ident_info *req = (void *)buf->data;
    bfc8:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    bfca:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    bfcc:	2002      	movs	r0, #2
    bfce:	f103 057c 	add.w	r5, r3, #124	; 0x7c
    bfd2:	462a      	mov	r2, r5
    bfd4:	7a19      	ldrb	r1, [r3, #8]
    bfd6:	f009 fbc3 	bl	15760 <bt_keys_get_type>
		if (!keys) {
    bfda:	b948      	cbnz	r0, bff0 <smp_ident_info+0x38>
			BT_ERR("Unable to get keys for %s",
    bfdc:	4628      	mov	r0, r5
    bfde:	f7f8 fc31 	bl	4844 <bt_addr_le_str_real>
    bfe2:	2145      	movs	r1, #69	; 0x45
    bfe4:	4602      	mov	r2, r0
    bfe6:	4808      	ldr	r0, [pc, #32]	; (c008 <smp_ident_info+0x50>)
    bfe8:	f006 f88e 	bl	12108 <printk>
			return BT_SMP_ERR_UNSPECIFIED;
    bfec:	2008      	movs	r0, #8
}
    bfee:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->irk.val, req->irk, 16);
    bff0:	2210      	movs	r2, #16
    bff2:	4631      	mov	r1, r6
    bff4:	302a      	adds	r0, #42	; 0x2a
    bff6:	f007 fb9c 	bl	13732 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    bffa:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    bffe:	2109      	movs	r1, #9
    c000:	f009 f89e 	bl	15140 <atomic_set_bit>
	return 0;
    c004:	2000      	movs	r0, #0
    c006:	e7f2      	b.n	bfee <smp_ident_info+0x36>
    c008:	0001ad66 	.word	0x0001ad66

0000c00c <smp_encrypt_info>:
{
    c00c:	b570      	push	{r4, r5, r6, lr}
    c00e:	460b      	mov	r3, r1
    c010:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    c012:	210c      	movs	r1, #12
    c014:	30b4      	adds	r0, #180	; 0xb4
    c016:	f009 f879 	bl	1510c <atomic_test_bit>
    c01a:	b1c0      	cbz	r0, c04e <smp_encrypt_info+0x42>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    c01c:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    c01e:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    c020:	2004      	movs	r0, #4
    c022:	f103 057c 	add.w	r5, r3, #124	; 0x7c
    c026:	462a      	mov	r2, r5
    c028:	7a19      	ldrb	r1, [r3, #8]
    c02a:	f009 fb99 	bl	15760 <bt_keys_get_type>
		if (!keys) {
    c02e:	b948      	cbnz	r0, c044 <smp_encrypt_info+0x38>
			BT_ERR("Unable to get keys for %s",
    c030:	4628      	mov	r0, r5
    c032:	f7f8 fc07 	bl	4844 <bt_addr_le_str_real>
    c036:	2145      	movs	r1, #69	; 0x45
    c038:	4602      	mov	r2, r0
    c03a:	4808      	ldr	r0, [pc, #32]	; (c05c <smp_encrypt_info+0x50>)
    c03c:	f006 f864 	bl	12108 <printk>
			return BT_SMP_ERR_UNSPECIFIED;
    c040:	2008      	movs	r0, #8
}
    c042:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
    c044:	2210      	movs	r2, #16
    c046:	4631      	mov	r1, r6
    c048:	301a      	adds	r0, #26
    c04a:	f007 fb72 	bl	13732 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
    c04e:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    c052:	2107      	movs	r1, #7
    c054:	f009 f874 	bl	15140 <atomic_set_bit>
	return 0;
    c058:	2000      	movs	r0, #0
    c05a:	e7f2      	b.n	c042 <smp_encrypt_info+0x36>
    c05c:	0001ad66 	.word	0x0001ad66

0000c060 <smp_pairing_complete>:
{
    c060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c062:	4604      	mov	r4, r0
    c064:	4e22      	ldr	r6, [pc, #136]	; (c0f0 <smp_pairing_complete+0x90>)
    c066:	f100 07b4 	add.w	r7, r0, #180	; 0xb4
	if (!status) {
    c06a:	b9b1      	cbnz	r1, c09a <smp_pairing_complete+0x3a>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    c06c:	210c      	movs	r1, #12
    c06e:	4638      	mov	r0, r7
    c070:	f009 f84c 	bl	1510c <atomic_test_bit>
		if (bond_flag) {
    c074:	4605      	mov	r5, r0
    c076:	b120      	cbz	r0, c082 <smp_pairing_complete+0x22>
			bt_keys_store(smp->chan.chan.conn->le.keys);
    c078:	6823      	ldr	r3, [r4, #0]
    c07a:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
    c07e:	f001 f86b 	bl	d158 <bt_keys_store>
		if (bt_auth && bt_auth->pairing_complete) {
    c082:	6833      	ldr	r3, [r6, #0]
    c084:	b123      	cbz	r3, c090 <smp_pairing_complete+0x30>
    c086:	699b      	ldr	r3, [r3, #24]
		if (bt_auth && bt_auth->pairing_failed) {
    c088:	b113      	cbz	r3, c090 <smp_pairing_complete+0x30>
			bt_auth->pairing_failed(smp->chan.chan.conn, auth_err);
    c08a:	4629      	mov	r1, r5
    c08c:	6820      	ldr	r0, [r4, #0]
    c08e:	4798      	blx	r3
	smp_reset(smp);
    c090:	4620      	mov	r0, r4
}
    c092:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	smp_reset(smp);
    c096:	f009 b91e 	b.w	152d6 <smp_reset>
	switch (smp_err) {
    c09a:	3901      	subs	r1, #1
    c09c:	b2c9      	uxtb	r1, r1
    c09e:	290d      	cmp	r1, #13
    c0a0:	bf96      	itet	ls
    c0a2:	4b14      	ldrls	r3, [pc, #80]	; (c0f4 <smp_pairing_complete+0x94>)
	if (!status) {
    c0a4:	2508      	movhi	r5, #8
    c0a6:	5c5d      	ldrbls	r5, [r3, r1]
		if (smp->chan.chan.conn->le.keys &&
    c0a8:	6803      	ldr	r3, [r0, #0]
    c0aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    c0ae:	b153      	cbz	r3, c0c6 <smp_pairing_complete+0x66>
    c0b0:	7b1b      	ldrb	r3, [r3, #12]
    c0b2:	b9b3      	cbnz	r3, c0e2 <smp_pairing_complete+0x82>
			bt_keys_clear(smp->chan.chan.conn->le.keys);
    c0b4:	6823      	ldr	r3, [r4, #0]
    c0b6:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
    c0ba:	f000 ffb3 	bl	d024 <bt_keys_clear>
			smp->chan.chan.conn->le.keys = NULL;
    c0be:	2200      	movs	r2, #0
    c0c0:	6823      	ldr	r3, [r4, #0]
    c0c2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    c0c6:	2102      	movs	r1, #2
    c0c8:	4638      	mov	r0, r7
    c0ca:	f009 f81f 	bl	1510c <atomic_test_bit>
    c0ce:	b918      	cbnz	r0, c0d8 <smp_pairing_complete+0x78>
			bt_conn_security_changed(smp->chan.chan.conn, auth_err);
    c0d0:	4629      	mov	r1, r5
    c0d2:	6820      	ldr	r0, [r4, #0]
    c0d4:	f7fa ff60 	bl	6f98 <bt_conn_security_changed>
		if (bt_auth && bt_auth->pairing_failed) {
    c0d8:	6833      	ldr	r3, [r6, #0]
    c0da:	2b00      	cmp	r3, #0
    c0dc:	d0d8      	beq.n	c090 <smp_pairing_complete+0x30>
    c0de:	69db      	ldr	r3, [r3, #28]
    c0e0:	e7d2      	b.n	c088 <smp_pairing_complete+0x28>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
    c0e2:	2102      	movs	r1, #2
    c0e4:	4638      	mov	r0, r7
    c0e6:	f009 f811 	bl	1510c <atomic_test_bit>
		    (!smp->chan.chan.conn->le.keys->enc_size ||
    c0ea:	2800      	cmp	r0, #0
    c0ec:	d1e2      	bne.n	c0b4 <smp_pairing_complete+0x54>
    c0ee:	e7ea      	b.n	c0c6 <smp_pairing_complete+0x66>
    c0f0:	20000d24 	.word	0x20000d24
    c0f4:	0001af66 	.word	0x0001af66

0000c0f8 <bt_smp_dhkey_ready>:
{
    c0f8:	b538      	push	{r3, r4, r5, lr}
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    c0fa:	4c1c      	ldr	r4, [pc, #112]	; (c16c <bt_smp_dhkey_ready+0x74>)
{
    c0fc:	4605      	mov	r5, r0
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    c0fe:	2107      	movs	r1, #7
    c100:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    c104:	f009 f808 	bl	15118 <atomic_test_and_clear_bit>
    c108:	b370      	cbz	r0, c168 <bt_smp_dhkey_ready+0x70>
	if (!dhkey) {
    c10a:	b92d      	cbnz	r5, c118 <bt_smp_dhkey_ready+0x20>
		smp_error(smp, BT_SMP_ERR_DHKEY_CHECK_FAILED);
    c10c:	210b      	movs	r1, #11
				smp_error(smp, err);
    c10e:	4620      	mov	r0, r4
}
    c110:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				smp_error(smp, err);
    c114:	f009 b905 	b.w	15322 <smp_error>
	memcpy(smp->dhkey, dhkey, 32);
    c118:	4629      	mov	r1, r5
    c11a:	2220      	movs	r2, #32
    c11c:	f204 1047 	addw	r0, r4, #327	; 0x147
    c120:	f007 fb07 	bl	13732 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    c124:	2109      	movs	r1, #9
    c126:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    c12a:	f008 ffef 	bl	1510c <atomic_test_bit>
    c12e:	b128      	cbz	r0, c13c <bt_smp_dhkey_ready+0x44>
}
    c130:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    c134:	2108      	movs	r1, #8
    c136:	480e      	ldr	r0, [pc, #56]	; (c170 <bt_smp_dhkey_ready+0x78>)
    c138:	f009 b802 	b.w	15140 <atomic_set_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
    c13c:	210f      	movs	r1, #15
    c13e:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    c142:	f008 ffe3 	bl	1510c <atomic_test_bit>
    c146:	2800      	cmp	r0, #0
    c148:	d1f2      	bne.n	c130 <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
    c14a:	2108      	movs	r1, #8
    c14c:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    c150:	f008 ffdc 	bl	1510c <atomic_test_bit>
    c154:	b140      	cbz	r0, c168 <bt_smp_dhkey_ready+0x70>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    c156:	6823      	ldr	r3, [r4, #0]
    c158:	78db      	ldrb	r3, [r3, #3]
    c15a:	b92b      	cbnz	r3, c168 <bt_smp_dhkey_ready+0x70>
			err = compute_and_send_master_dhcheck(smp);
    c15c:	4620      	mov	r0, r4
    c15e:	f7ff fd2b 	bl	bbb8 <compute_and_send_master_dhcheck>
			if (err) {
    c162:	4601      	mov	r1, r0
    c164:	2800      	cmp	r0, #0
    c166:	d1d2      	bne.n	c10e <bt_smp_dhkey_ready+0x16>
}
    c168:	bd38      	pop	{r3, r4, r5, pc}
    c16a:	bf00      	nop
    c16c:	20001000 	.word	0x20001000
    c170:	200010b4 	.word	0x200010b4

0000c174 <bt_smp_recv>:
{
    c174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    c176:	898b      	ldrh	r3, [r1, #12]
{
    c178:	4604      	mov	r4, r0
    c17a:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    c17c:	b92b      	cbnz	r3, c18a <bt_smp_recv+0x16>
		BT_ERR("Too small SMP PDU received");
    c17e:	2145      	movs	r1, #69	; 0x45
    c180:	4825      	ldr	r0, [pc, #148]	; (c218 <bt_smp_recv+0xa4>)
    c182:	f005 ffc1 	bl	12108 <printk>
}
    c186:	2000      	movs	r0, #0
    c188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    c18a:	2101      	movs	r1, #1
    c18c:	f105 0008 	add.w	r0, r5, #8
    c190:	f001 fafc 	bl	d78c <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    c194:	2104      	movs	r1, #4
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    c196:	4606      	mov	r6, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    c198:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    c19c:	f008 ffb6 	bl	1510c <atomic_test_bit>
    c1a0:	7832      	ldrb	r2, [r6, #0]
    c1a2:	b120      	cbz	r0, c1ae <bt_smp_recv+0x3a>
		BT_WARN("SMP command (code 0x%02x) received after timeout",
    c1a4:	2157      	movs	r1, #87	; 0x57
    c1a6:	481d      	ldr	r0, [pc, #116]	; (c21c <bt_smp_recv+0xa8>)
    c1a8:	f005 ffae 	bl	12108 <printk>
		return 0;
    c1ac:	e7eb      	b.n	c186 <bt_smp_recv+0x12>
	if (hdr->code >= ARRAY_SIZE(handlers) || !handlers[hdr->code].func) {
    c1ae:	2a0d      	cmp	r2, #13
    c1b0:	d803      	bhi.n	c1ba <bt_smp_recv+0x46>
    c1b2:	4f1b      	ldr	r7, [pc, #108]	; (c220 <bt_smp_recv+0xac>)
    c1b4:	f857 3032 	ldr.w	r3, [r7, r2, lsl #3]
    c1b8:	b943      	cbnz	r3, c1cc <bt_smp_recv+0x58>
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
    c1ba:	2157      	movs	r1, #87	; 0x57
    c1bc:	4819      	ldr	r0, [pc, #100]	; (c224 <bt_smp_recv+0xb0>)
    c1be:	f005 ffa3 	bl	12108 <printk>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    c1c2:	2107      	movs	r1, #7
		smp_error(smp, err);
    c1c4:	4620      	mov	r0, r4
    c1c6:	f009 f8ac 	bl	15322 <smp_error>
    c1ca:	e7dc      	b.n	c186 <bt_smp_recv+0x12>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
    c1cc:	4611      	mov	r1, r2
    c1ce:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    c1d2:	f008 ffa1 	bl	15118 <atomic_test_and_clear_bit>
    c1d6:	7833      	ldrb	r3, [r6, #0]
    c1d8:	b948      	cbnz	r0, c1ee <bt_smp_recv+0x7a>
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
    c1da:	461a      	mov	r2, r3
    c1dc:	2157      	movs	r1, #87	; 0x57
    c1de:	4812      	ldr	r0, [pc, #72]	; (c228 <bt_smp_recv+0xb4>)
    c1e0:	f005 ff92 	bl	12108 <printk>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    c1e4:	7833      	ldrb	r3, [r6, #0]
    c1e6:	2b05      	cmp	r3, #5
    c1e8:	d0cd      	beq.n	c186 <bt_smp_recv+0x12>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    c1ea:	2108      	movs	r1, #8
    c1ec:	e7ea      	b.n	c1c4 <bt_smp_recv+0x50>
	if (buf->len != handlers[hdr->code].expect_len) {
    c1ee:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    c1f2:	89aa      	ldrh	r2, [r5, #12]
    c1f4:	7909      	ldrb	r1, [r1, #4]
    c1f6:	4291      	cmp	r1, r2
    c1f8:	d005      	beq.n	c206 <bt_smp_recv+0x92>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    c1fa:	2145      	movs	r1, #69	; 0x45
    c1fc:	480b      	ldr	r0, [pc, #44]	; (c22c <bt_smp_recv+0xb8>)
    c1fe:	f005 ff83 	bl	12108 <printk>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    c202:	210a      	movs	r1, #10
    c204:	e7de      	b.n	c1c4 <bt_smp_recv+0x50>
	err = handlers[hdr->code].func(smp, buf);
    c206:	4629      	mov	r1, r5
    c208:	4620      	mov	r0, r4
    c20a:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
    c20e:	4798      	blx	r3
	if (err) {
    c210:	4601      	mov	r1, r0
    c212:	2800      	cmp	r0, #0
    c214:	d0b7      	beq.n	c186 <bt_smp_recv+0x12>
    c216:	e7d5      	b.n	c1c4 <bt_smp_recv+0x50>
    c218:	0001ad85 	.word	0x0001ad85
    c21c:	0001ada5 	.word	0x0001ada5
    c220:	00017468 	.word	0x00017468
    c224:	0001addb 	.word	0x0001addb
    c228:	0001adfa 	.word	0x0001adfa
    c22c:	0001a6ac 	.word	0x0001a6ac

0000c230 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
    c230:	4b14      	ldr	r3, [pc, #80]	; (c284 <bt_smp_pkey_ready+0x54>)
{
    c232:	b510      	push	{r4, lr}
	sc_public_key = pkey;
    c234:	6018      	str	r0, [r3, #0]
	if (!pkey) {
    c236:	b928      	cbnz	r0, c244 <bt_smp_pkey_ready+0x14>
}
    c238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Public key not available");
    c23c:	2157      	movs	r1, #87	; 0x57
    c23e:	4812      	ldr	r0, [pc, #72]	; (c288 <bt_smp_pkey_ready+0x58>)
    c240:	f005 bf62 	b.w	12108 <printk>
	z_impl_k_sem_give(sem);
    c244:	4811      	ldr	r0, [pc, #68]	; (c28c <bt_smp_pkey_ready+0x5c>)
    c246:	f004 fcdb 	bl	10c00 <z_impl_k_sem_give>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c24a:	4c11      	ldr	r4, [pc, #68]	; (c290 <bt_smp_pkey_ready+0x60>)
    c24c:	f104 03b4 	add.w	r3, r4, #180	; 0xb4
    c250:	e8d3 3faf 	lda	r3, [r3]
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    c254:	065b      	lsls	r3, r3, #25
    c256:	d513      	bpl.n	c280 <bt_smp_pkey_ready+0x50>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    c258:	6823      	ldr	r3, [r4, #0]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c25a:	78db      	ldrb	r3, [r3, #3]
    c25c:	b983      	cbnz	r3, c280 <bt_smp_pkey_ready+0x50>
			err = sc_send_public_key(smp);
    c25e:	4620      	mov	r0, r4
    c260:	f7ff fbfa 	bl	ba58 <sc_send_public_key>
			if (err) {
    c264:	4601      	mov	r1, r0
    c266:	b110      	cbz	r0, c26e <bt_smp_pkey_ready+0x3e>
				smp_error(smp, err);
    c268:	4620      	mov	r0, r4
    c26a:	f009 f85a 	bl	15322 <smp_error>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c26e:	4b09      	ldr	r3, [pc, #36]	; (c294 <bt_smp_pkey_ready+0x64>)
    c270:	e8d3 2fef 	ldaex	r2, [r3]
    c274:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    c278:	e8c3 2fe1 	stlex	r1, r2, [r3]
    c27c:	2900      	cmp	r1, #0
    c27e:	d1f7      	bne.n	c270 <bt_smp_pkey_ready+0x40>
}
    c280:	bd10      	pop	{r4, pc}
    c282:	bf00      	nop
    c284:	200011bc 	.word	0x200011bc
    c288:	0001ae1a 	.word	0x0001ae1a
    c28c:	20000458 	.word	0x20000458
    c290:	20001000 	.word	0x20001000
    c294:	200010b0 	.word	0x200010b0

0000c298 <smp_pairing_failed>:
{
    c298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    c29a:	4605      	mov	r5, r0
	struct bt_smp_pairing_fail *req = (void *)buf->data;
    c29c:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    c29e:	f855 7bb4 	ldr.w	r7, [r5], #180
	BT_ERR("reason 0x%x", req->reason);
    c2a2:	2145      	movs	r1, #69	; 0x45
{
    c2a4:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
    c2a6:	7832      	ldrb	r2, [r6, #0]
    c2a8:	480e      	ldr	r0, [pc, #56]	; (c2e4 <smp_pairing_failed+0x4c>)
    c2aa:	f005 ff2d 	bl	12108 <printk>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    c2ae:	2109      	movs	r1, #9
    c2b0:	4628      	mov	r0, r5
    c2b2:	f008 ff31 	bl	15118 <atomic_test_and_clear_bit>
    c2b6:	b140      	cbz	r0, c2ca <smp_pairing_failed+0x32>
		if (bt_auth && bt_auth->cancel) {
    c2b8:	4b0b      	ldr	r3, [pc, #44]	; (c2e8 <smp_pairing_failed+0x50>)
    c2ba:	681b      	ldr	r3, [r3, #0]
    c2bc:	b963      	cbnz	r3, c2d8 <smp_pairing_failed+0x40>
	smp_pairing_complete(smp, req->reason);
    c2be:	4620      	mov	r0, r4
    c2c0:	7831      	ldrb	r1, [r6, #0]
    c2c2:	f7ff fecd 	bl	c060 <smp_pairing_complete>
}
    c2c6:	2000      	movs	r0, #0
    c2c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
    c2ca:	210a      	movs	r1, #10
    c2cc:	4628      	mov	r0, r5
    c2ce:	f008 ff23 	bl	15118 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    c2d2:	2800      	cmp	r0, #0
    c2d4:	d1f0      	bne.n	c2b8 <smp_pairing_failed+0x20>
    c2d6:	e7f2      	b.n	c2be <smp_pairing_failed+0x26>
		if (bt_auth && bt_auth->cancel) {
    c2d8:	691b      	ldr	r3, [r3, #16]
    c2da:	2b00      	cmp	r3, #0
    c2dc:	d0ef      	beq.n	c2be <smp_pairing_failed+0x26>
			bt_auth->cancel(conn);
    c2de:	4638      	mov	r0, r7
    c2e0:	4798      	blx	r3
    c2e2:	e7ec      	b.n	c2be <smp_pairing_failed+0x26>
    c2e4:	0001ae38 	.word	0x0001ae38
    c2e8:	20000d24 	.word	0x20000d24

0000c2ec <smp_timeout>:
{
    c2ec:	b510      	push	{r4, lr}
    c2ee:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
    c2f0:	2145      	movs	r1, #69	; 0x45
    c2f2:	4807      	ldr	r0, [pc, #28]	; (c310 <smp_timeout+0x24>)
    c2f4:	f005 ff08 	bl	12108 <printk>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
    c2f8:	f5a4 70ce 	sub.w	r0, r4, #412	; 0x19c
    c2fc:	2108      	movs	r1, #8
    c2fe:	f7ff feaf 	bl	c060 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    c302:	f1a4 00e8 	sub.w	r0, r4, #232	; 0xe8
    c306:	2104      	movs	r1, #4
}
    c308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    c30c:	f008 bf18 	b.w	15140 <atomic_set_bit>
    c310:	0001ae49 	.word	0x0001ae49

0000c314 <smp_master_ident>:
{
    c314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c318:	460b      	mov	r3, r1
    c31a:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    c31c:	210c      	movs	r1, #12
	struct bt_conn *conn = smp->chan.chan.conn;
    c31e:	f850 6bb4 	ldr.w	r6, [r0], #180
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    c322:	f008 fef3 	bl	1510c <atomic_test_bit>
    c326:	b328      	cbz	r0, c374 <smp_master_ident+0x60>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    c328:	f106 087c 	add.w	r8, r6, #124	; 0x7c
    c32c:	4642      	mov	r2, r8
    c32e:	2004      	movs	r0, #4
    c330:	7a31      	ldrb	r1, [r6, #8]
		struct bt_smp_master_ident *req = (void *)buf->data;
    c332:	689f      	ldr	r7, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    c334:	f009 fa14 	bl	15760 <bt_keys_get_type>
		if (!keys) {
    c338:	4605      	mov	r5, r0
    c33a:	b950      	cbnz	r0, c352 <smp_master_ident+0x3e>
			BT_ERR("Unable to get keys for %s",
    c33c:	4640      	mov	r0, r8
    c33e:	f7f8 fa81 	bl	4844 <bt_addr_le_str_real>
    c342:	2145      	movs	r1, #69	; 0x45
    c344:	4602      	mov	r2, r0
    c346:	481d      	ldr	r0, [pc, #116]	; (c3bc <smp_master_ident+0xa8>)
    c348:	f005 fede 	bl	12108 <printk>
			return BT_SMP_ERR_UNSPECIFIED;
    c34c:	2008      	movs	r0, #8
}
    c34e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
    c352:	2202      	movs	r2, #2
    c354:	4639      	mov	r1, r7
    c356:	3018      	adds	r0, #24
    c358:	f007 f9eb 	bl	13732 <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
    c35c:	2208      	movs	r2, #8
    c35e:	1cb9      	adds	r1, r7, #2
    c360:	f105 0010 	add.w	r0, r5, #16
    c364:	f007 f9e5 	bl	13732 <memcpy>
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    c368:	f894 3199 	ldrb.w	r3, [r4, #409]	; 0x199
    c36c:	f023 0301 	bic.w	r3, r3, #1
    c370:	f884 3199 	strb.w	r3, [r4, #409]	; 0x199
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    c374:	f894 3199 	ldrb.w	r3, [r4, #409]	; 0x199
    c378:	079a      	lsls	r2, r3, #30
    c37a:	d50b      	bpl.n	c394 <smp_master_ident+0x80>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    c37c:	2108      	movs	r1, #8
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    c37e:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    c382:	f008 fedd 	bl	15140 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c386:	78f3      	ldrb	r3, [r6, #3]
    c388:	b143      	cbz	r3, c39c <smp_master_ident+0x88>
	if (!smp->local_dist && !smp->remote_dist) {
    c38a:	f8b4 5198 	ldrh.w	r5, [r4, #408]	; 0x198
    c38e:	b17d      	cbz	r5, c3b0 <smp_master_ident+0x9c>
	return 0;
    c390:	2000      	movs	r0, #0
    c392:	e7dc      	b.n	c34e <smp_master_ident+0x3a>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    c394:	075b      	lsls	r3, r3, #29
    c396:	d5f6      	bpl.n	c386 <smp_master_ident+0x72>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    c398:	210a      	movs	r1, #10
    c39a:	e7f0      	b.n	c37e <smp_master_ident+0x6a>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    c39c:	f894 3199 	ldrb.w	r3, [r4, #409]	; 0x199
    c3a0:	2b00      	cmp	r3, #0
    c3a2:	d1f2      	bne.n	c38a <smp_master_ident+0x76>
		err = bt_smp_distribute_keys(smp);
    c3a4:	4620      	mov	r0, r4
    c3a6:	f7ff fb79 	bl	ba9c <bt_smp_distribute_keys>
		if (err) {
    c3aa:	2800      	cmp	r0, #0
    c3ac:	d0ed      	beq.n	c38a <smp_master_ident+0x76>
    c3ae:	e7ce      	b.n	c34e <smp_master_ident+0x3a>
		smp_pairing_complete(smp, 0);
    c3b0:	4620      	mov	r0, r4
    c3b2:	4629      	mov	r1, r5
    c3b4:	f7ff fe54 	bl	c060 <smp_pairing_complete>
	return 0;
    c3b8:	4628      	mov	r0, r5
    c3ba:	e7c8      	b.n	c34e <smp_master_ident+0x3a>
    c3bc:	0001ad66 	.word	0x0001ad66

0000c3c0 <smp_ident_sent>:
{
    c3c0:	b510      	push	{r4, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
    c3c2:	7883      	ldrb	r3, [r0, #2]
    c3c4:	2b01      	cmp	r3, #1
    c3c6:	d121      	bne.n	c40c <smp_ident_sent+0x4c>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
    c3c8:	2106      	movs	r1, #6
    c3ca:	f007 ff8a 	bl	142e2 <bt_l2cap_le_lookup_tx_cid>
		__ASSERT(chan, "No SMP channel found");
    c3ce:	4604      	mov	r4, r0
    c3d0:	b970      	cbnz	r0, c3f0 <smp_ident_sent+0x30>
    c3d2:	490f      	ldr	r1, [pc, #60]	; (c410 <smp_ident_sent+0x50>)
    c3d4:	f44f 734a 	mov.w	r3, #808	; 0x328
    c3d8:	4a0e      	ldr	r2, [pc, #56]	; (c414 <smp_ident_sent+0x54>)
    c3da:	480f      	ldr	r0, [pc, #60]	; (c418 <smp_ident_sent+0x58>)
    c3dc:	f005 fe94 	bl	12108 <printk>
    c3e0:	480e      	ldr	r0, [pc, #56]	; (c41c <smp_ident_sent+0x5c>)
    c3e2:	f005 fe91 	bl	12108 <printk>
    c3e6:	f44f 714a 	mov.w	r1, #808	; 0x328
    c3ea:	480a      	ldr	r0, [pc, #40]	; (c414 <smp_ident_sent+0x54>)
    c3ec:	f006 f922 	bl	12634 <assert_post_action>
		smp->local_dist &= ~dist_complete;
    c3f0:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
    c3f4:	f023 0301 	bic.w	r3, r3, #1
    c3f8:	f884 3198 	strb.w	r3, [r4, #408]	; 0x198
		if (!smp->local_dist && !smp->remote_dist) {
    c3fc:	f8b4 1198 	ldrh.w	r1, [r4, #408]	; 0x198
    c400:	b921      	cbnz	r1, c40c <smp_ident_sent+0x4c>
			smp_pairing_complete(smp, 0);
    c402:	4620      	mov	r0, r4
}
    c404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_pairing_complete(smp, 0);
    c408:	f7ff be2a 	b.w	c060 <smp_pairing_complete>
}
    c40c:	bd10      	pop	{r4, pc}
    c40e:	bf00      	nop
    c410:	0001a567 	.word	0x0001a567
    c414:	0001ae5a 	.word	0x0001ae5a
    c418:	00017d82 	.word	0x00017d82
    c41c:	0001ae89 	.word	0x0001ae89

0000c420 <bt_smp_connected>:
{
    c420:	b510      	push	{r4, lr}
    c422:	4604      	mov	r4, r0
	k_delayed_work_init(&smp->work, smp_timeout);
    c424:	4904      	ldr	r1, [pc, #16]	; (c438 <bt_smp_connected+0x18>)
    c426:	f500 70ce 	add.w	r0, r0, #412	; 0x19c
    c42a:	f00a fa6a 	bl	16902 <k_delayed_work_init>
	smp_reset(smp);
    c42e:	4620      	mov	r0, r4
}
    c430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
    c434:	f008 bf4f 	b.w	152d6 <smp_reset>
    c438:	0000c2ed 	.word	0x0000c2ed

0000c43c <smp_send_pairing_confirm>:
{
    c43c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
    c43e:	f890 40b8 	ldrb.w	r4, [r0, #184]	; 0xb8
{
    c442:	4605      	mov	r5, r0
	switch (smp->method) {
    c444:	2c02      	cmp	r4, #2
    c446:	d824      	bhi.n	c492 <smp_send_pairing_confirm+0x56>
    c448:	b14c      	cbz	r4, c45e <smp_send_pairing_confirm+0x22>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    c44a:	f890 318c 	ldrb.w	r3, [r0, #396]	; 0x18c
    c44e:	f8d0 4188 	ldr.w	r4, [r0, #392]	; 0x188
    c452:	40dc      	lsrs	r4, r3
    c454:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
    c458:	f064 047f 	orn	r4, r4, #127	; 0x7f
    c45c:	b2e4      	uxtb	r4, r4
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    c45e:	2103      	movs	r1, #3
    c460:	4628      	mov	r0, r5
    c462:	f008 fe77 	bl	15154 <smp_create_pdu.isra.0>
	if (!buf) {
    c466:	4606      	mov	r6, r0
    c468:	b1a8      	cbz	r0, c496 <smp_send_pairing_confirm+0x5a>
	req = net_buf_add(buf, sizeof(*req));
    c46a:	2110      	movs	r1, #16
    c46c:	3008      	adds	r0, #8
    c46e:	f001 f9af 	bl	d7d0 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    c472:	9000      	str	r0, [sp, #0]
    c474:	4812      	ldr	r0, [pc, #72]	; (c4c0 <smp_send_pairing_confirm+0x84>)
    c476:	4623      	mov	r3, r4
    c478:	6800      	ldr	r0, [r0, #0]
    c47a:	f105 02d7 	add.w	r2, r5, #215	; 0xd7
    c47e:	f205 1107 	addw	r1, r5, #263	; 0x107
    c482:	f008 fe1c 	bl	150be <smp_f4>
    c486:	4604      	mov	r4, r0
    c488:	b148      	cbz	r0, c49e <smp_send_pairing_confirm+0x62>
		net_buf_unref(buf);
    c48a:	4630      	mov	r0, r6
    c48c:	f001 f82e 	bl	d4ec <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    c490:	e001      	b.n	c496 <smp_send_pairing_confirm+0x5a>
	switch (smp->method) {
    c492:	2c03      	cmp	r4, #3
    c494:	d001      	beq.n	c49a <smp_send_pairing_confirm+0x5e>
		return BT_SMP_ERR_UNSPECIFIED;
    c496:	2008      	movs	r0, #8
    c498:	e010      	b.n	c4bc <smp_send_pairing_confirm+0x80>
	switch (smp->method) {
    c49a:	2400      	movs	r4, #0
    c49c:	e7df      	b.n	c45e <smp_send_pairing_confirm+0x22>
	smp_send(smp, buf, NULL, NULL);
    c49e:	4602      	mov	r2, r0
    c4a0:	4631      	mov	r1, r6
    c4a2:	4628      	mov	r0, r5
    c4a4:	f7ff fac0 	bl	ba28 <smp_send.isra.0>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c4a8:	35b4      	adds	r5, #180	; 0xb4
    c4aa:	e8d5 3fef 	ldaex	r3, [r5]
    c4ae:	f023 0301 	bic.w	r3, r3, #1
    c4b2:	e8c5 3fe2 	stlex	r2, r3, [r5]
    c4b6:	2a00      	cmp	r2, #0
    c4b8:	d1f7      	bne.n	c4aa <smp_send_pairing_confirm+0x6e>
	return 0;
    c4ba:	4620      	mov	r0, r4
}
    c4bc:	b002      	add	sp, #8
    c4be:	bd70      	pop	{r4, r5, r6, pc}
    c4c0:	200011bc 	.word	0x200011bc

0000c4c4 <smp_public_key>:
{
    c4c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
    c4c6:	688d      	ldr	r5, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
    c4c8:	f200 1607 	addw	r6, r0, #263	; 0x107
{
    c4cc:	4604      	mov	r4, r0
	memcpy(smp->pkey, req->x, 32);
    c4ce:	2220      	movs	r2, #32
    c4d0:	4629      	mov	r1, r5
    c4d2:	4630      	mov	r0, r6
    c4d4:	f007 f92d 	bl	13732 <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
    c4d8:	2220      	movs	r2, #32
    c4da:	f204 1027 	addw	r0, r4, #295	; 0x127
    c4de:	18a9      	adds	r1, r5, r2
    c4e0:	f007 f927 	bl	13732 <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
    c4e4:	2240      	movs	r2, #64	; 0x40
    c4e6:	4630      	mov	r0, r6
    c4e8:	495a      	ldr	r1, [pc, #360]	; (c654 <smp_public_key+0x190>)
    c4ea:	f007 f912 	bl	13712 <memcmp>
    c4ee:	b128      	cbz	r0, c4fc <smp_public_key+0x38>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    c4f0:	6823      	ldr	r3, [r4, #0]
    c4f2:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c4f4:	b323      	cbz	r3, c540 <smp_public_key+0x7c>
	return 0;
    c4f6:	2000      	movs	r0, #0
}
    c4f8:	b002      	add	sp, #8
    c4fa:	bd70      	pop	{r4, r5, r6, pc}
		BT_INFO("Remote is using Debug Public key");
    c4fc:	2149      	movs	r1, #73	; 0x49
    c4fe:	4856      	ldr	r0, [pc, #344]	; (c658 <smp_public_key+0x194>)
    c500:	f005 fe02 	bl	12108 <printk>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    c504:	210d      	movs	r1, #13
    c506:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    c50a:	f008 fe19 	bl	15140 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
    c50e:	6825      	ldr	r5, [r4, #0]
	if (!conn->le.keys) {
    c510:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
    c514:	b933      	cbnz	r3, c524 <smp_public_key+0x60>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    c516:	7a28      	ldrb	r0, [r5, #8]
    c518:	f105 017c 	add.w	r1, r5, #124	; 0x7c
    c51c:	f000 fce2 	bl	cee4 <bt_keys_get_addr>
    c520:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
	if (!conn->le.keys ||
    c524:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
    c528:	2b00      	cmp	r3, #0
    c52a:	d0e1      	beq.n	c4f0 <smp_public_key+0x2c>
    c52c:	89da      	ldrh	r2, [r3, #14]
    c52e:	f002 0224 	and.w	r2, r2, #36	; 0x24
    c532:	2a00      	cmp	r2, #0
    c534:	d0dc      	beq.n	c4f0 <smp_public_key+0x2c>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
    c536:	7b5b      	ldrb	r3, [r3, #13]
    c538:	0799      	lsls	r1, r3, #30
    c53a:	d5d9      	bpl.n	c4f0 <smp_public_key+0x2c>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
    c53c:	2003      	movs	r0, #3
    c53e:	e7db      	b.n	c4f8 <smp_public_key+0x34>
		switch (smp->method) {
    c540:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    c544:	2b05      	cmp	r3, #5
    c546:	d81a      	bhi.n	c57e <smp_public_key+0xba>
    c548:	e8df f003 	tbb	[pc, r3]
    c54c:	03134103 	.word	0x03134103
    c550:	4c19      	.short	0x4c19
			atomic_set_bit(&smp->allowed_cmds,
    c552:	2103      	movs	r1, #3
    c554:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    c558:	f008 fdf2 	bl	15140 <atomic_set_bit>
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
    c55c:	4630      	mov	r0, r6
    c55e:	493f      	ldr	r1, [pc, #252]	; (c65c <smp_public_key+0x198>)
    c560:	f7fa fa7c 	bl	6a5c <bt_dh_key_gen>
    c564:	b958      	cbnz	r0, c57e <smp_public_key+0xba>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    c566:	2107      	movs	r1, #7
    c568:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    c56c:	f008 fde8 	bl	15140 <atomic_set_bit>
	return 0;
    c570:	e7c1      	b.n	c4f6 <smp_public_key+0x32>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    c572:	2104      	movs	r1, #4
    c574:	f504 70c4 	add.w	r0, r4, #392	; 0x188
    c578:	f7fa fb48 	bl	6c0c <bt_rand>
    c57c:	b108      	cbz	r0, c582 <smp_public_key+0xbe>
		switch (smp->method) {
    c57e:	2008      	movs	r0, #8
    c580:	e7ba      	b.n	c4f8 <smp_public_key+0x34>
		smp->passkey %= 1000000;
    c582:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
    c586:	4a36      	ldr	r2, [pc, #216]	; (c660 <smp_public_key+0x19c>)
	if (bt_auth && bt_auth->passkey_display) {
    c588:	4d36      	ldr	r5, [pc, #216]	; (c664 <smp_public_key+0x1a0>)
		smp->passkey %= 1000000;
    c58a:	fbb1 f3f2 	udiv	r3, r1, r2
    c58e:	fb02 1313 	mls	r3, r2, r3, r1
    c592:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
	if (bt_auth && bt_auth->passkey_display) {
    c596:	682b      	ldr	r3, [r5, #0]
	smp->passkey_round = 0U;
    c598:	f884 018c 	strb.w	r0, [r4, #396]	; 0x18c
	if (bt_auth && bt_auth->passkey_display) {
    c59c:	b163      	cbz	r3, c5b8 <smp_public_key+0xf4>
    c59e:	681b      	ldr	r3, [r3, #0]
    c5a0:	b153      	cbz	r3, c5b8 <smp_public_key+0xf4>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    c5a2:	210a      	movs	r1, #10
    c5a4:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    c5a8:	f008 fdca 	bl	15140 <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    c5ac:	682b      	ldr	r3, [r5, #0]
    c5ae:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
    c5b2:	681b      	ldr	r3, [r3, #0]
    c5b4:	6820      	ldr	r0, [r4, #0]
    c5b6:	4798      	blx	r3
			atomic_set_bit(&smp->allowed_cmds,
    c5b8:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    c5bc:	2103      	movs	r1, #3
    c5be:	f008 fdbf 	bl	15140 <atomic_set_bit>
			err = smp_send_pairing_confirm(smp);
    c5c2:	4620      	mov	r0, r4
    c5c4:	f7ff ff3a 	bl	c43c <smp_send_pairing_confirm>
			if (err) {
    c5c8:	2800      	cmp	r0, #0
    c5ca:	d195      	bne.n	c4f8 <smp_public_key+0x34>
    c5cc:	e7c6      	b.n	c55c <smp_public_key+0x98>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    c5ce:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    c5d2:	2109      	movs	r1, #9
    c5d4:	f008 fdb4 	bl	15140 <atomic_set_bit>
			bt_auth->passkey_entry(smp->chan.chan.conn);
    c5d8:	4b22      	ldr	r3, [pc, #136]	; (c664 <smp_public_key+0x1a0>)
    c5da:	6820      	ldr	r0, [r4, #0]
    c5dc:	681b      	ldr	r3, [r3, #0]
    c5de:	685b      	ldr	r3, [r3, #4]
    c5e0:	4798      	blx	r3
			break;
    c5e2:	e7bb      	b.n	c55c <smp_public_key+0x98>
			if (bt_rand(smp->prnd, 16)) {
    c5e4:	2110      	movs	r1, #16
    c5e6:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
    c5ea:	f7fa fb0f 	bl	6c0c <bt_rand>
    c5ee:	2800      	cmp	r0, #0
    c5f0:	d1c5      	bne.n	c57e <smp_public_key+0xba>
			if (bt_auth && bt_auth->oob_data_request) {
    c5f2:	4d1c      	ldr	r5, [pc, #112]	; (c664 <smp_public_key+0x1a0>)
    c5f4:	682b      	ldr	r3, [r5, #0]
    c5f6:	b32b      	cbz	r3, c644 <smp_public_key+0x180>
    c5f8:	68db      	ldr	r3, [r3, #12]
    c5fa:	b31b      	cbz	r3, c644 <smp_public_key+0x180>
				struct bt_conn_oob_info info = {
    c5fc:	4b1a      	ldr	r3, [pc, #104]	; (c668 <smp_public_key+0x1a4>)
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    c5fe:	6821      	ldr	r1, [r4, #0]
				struct bt_conn_oob_info info = {
    c600:	881b      	ldrh	r3, [r3, #0]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c602:	78c9      	ldrb	r1, [r1, #3]
				struct bt_conn_oob_info info = {
    c604:	f8ad 3004 	strh.w	r3, [sp, #4]
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    c608:	f894 20bb 	ldrb.w	r2, [r4, #187]	; 0xbb
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    c60c:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c610:	b939      	cbnz	r1, c622 <smp_public_key+0x15e>
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
    c612:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    c614:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
    c618:	d416      	bmi.n	c648 <smp_public_key+0x184>
	int oob_config = BT_CONN_OOB_NO_DATA;
    c61a:	2b00      	cmp	r3, #0
    c61c:	bf08      	it	eq
    c61e:	2003      	moveq	r0, #3
    c620:	e000      	b.n	c624 <smp_public_key+0x160>
    c622:	2003      	movs	r0, #3
				smp->oobd_local = NULL;
    c624:	2300      	movs	r3, #0
	info->lesc.oob_config = oob_config;
    c626:	f88d 0005 	strb.w	r0, [sp, #5]
				smp->oobd_remote = NULL;
    c62a:	e9c4 3364 	strd	r3, r3, [r4, #400]	; 0x190
				atomic_set_bit(smp->flags,
    c62e:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    c632:	210b      	movs	r1, #11
    c634:	f008 fd84 	bl	15140 <atomic_set_bit>
				bt_auth->oob_data_request(smp->chan.chan.conn,
    c638:	682b      	ldr	r3, [r5, #0]
    c63a:	6820      	ldr	r0, [r4, #0]
    c63c:	68db      	ldr	r3, [r3, #12]
    c63e:	a901      	add	r1, sp, #4
    c640:	4798      	blx	r3
			break;
    c642:	e78b      	b.n	c55c <smp_public_key+0x98>
				return BT_SMP_ERR_OOB_NOT_AVAIL;
    c644:	2002      	movs	r0, #2
    c646:	e757      	b.n	c4f8 <smp_public_key+0x34>
				     BT_CONN_OOB_BOTH_PEERS :
    c648:	2b00      	cmp	r3, #0
    c64a:	bf0c      	ite	eq
    c64c:	2001      	moveq	r0, #1
    c64e:	2002      	movne	r0, #2
    c650:	e7e8      	b.n	c624 <smp_public_key+0x160>
    c652:	bf00      	nop
    c654:	0001afb6 	.word	0x0001afb6
    c658:	0001aea0 	.word	0x0001aea0
    c65c:	0000c0f9 	.word	0x0000c0f9
    c660:	000f4240 	.word	0x000f4240
    c664:	20000d24 	.word	0x20000d24
    c668:	00016f2e 	.word	0x00016f2e

0000c66c <smp_pairing_rsp>:
{
    c66c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *rsp = (void *)buf->data;
    c670:	688f      	ldr	r7, [r1, #8]
{
    c672:	4604      	mov	r4, r0
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    c674:	78fb      	ldrb	r3, [r7, #3]
    c676:	3b07      	subs	r3, #7
    c678:	2b09      	cmp	r3, #9
    c67a:	d904      	bls.n	c686 <smp_pairing_rsp+0x1a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    c67c:	2706      	movs	r7, #6
}
    c67e:	4638      	mov	r0, r7
    c680:	b002      	add	sp, #8
    c682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	smp->local_dist &= rsp->init_key_dist;
    c686:	793a      	ldrb	r2, [r7, #4]
    c688:	f890 3198 	ldrb.w	r3, [r0, #408]	; 0x198
	struct bt_conn *conn = smp->chan.chan.conn;
    c68c:	6806      	ldr	r6, [r0, #0]
	smp->local_dist &= rsp->init_key_dist;
    c68e:	4013      	ands	r3, r2
    c690:	f880 3198 	strb.w	r3, [r0, #408]	; 0x198
	smp->remote_dist &= rsp->resp_key_dist;
    c694:	797a      	ldrb	r2, [r7, #5]
    c696:	f890 3199 	ldrb.w	r3, [r0, #409]	; 0x199
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
    c69a:	4639      	mov	r1, r7
	smp->remote_dist &= rsp->resp_key_dist;
    c69c:	4013      	ands	r3, r2
    c69e:	f880 3199 	strb.w	r3, [r0, #409]	; 0x199
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    c6a2:	2302      	movs	r3, #2
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
    c6a4:	2206      	movs	r2, #6
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    c6a6:	f880 30c0 	strb.w	r3, [r0, #192]	; 0xc0
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
    c6aa:	30c1      	adds	r0, #193	; 0xc1
    c6ac:	f007 f841 	bl	13732 <memcpy>
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    c6b0:	78bb      	ldrb	r3, [r7, #2]
    c6b2:	f104 05b4 	add.w	r5, r4, #180	; 0xb4
    c6b6:	0718      	lsls	r0, r3, #28
    c6b8:	d507      	bpl.n	c6ca <smp_pairing_rsp+0x5e>
    c6ba:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
    c6be:	0719      	lsls	r1, r3, #28
    c6c0:	d503      	bpl.n	c6ca <smp_pairing_rsp+0x5e>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    c6c2:	2105      	movs	r1, #5
    c6c4:	4628      	mov	r0, r5
    c6c6:	f008 fd3b 	bl	15140 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    c6ca:	78bb      	ldrb	r3, [r7, #2]
    c6cc:	069a      	lsls	r2, r3, #26
    c6ce:	d507      	bpl.n	c6e0 <smp_pairing_rsp+0x74>
    c6d0:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
    c6d4:	069b      	lsls	r3, r3, #26
    c6d6:	d503      	bpl.n	c6e0 <smp_pairing_rsp+0x74>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    c6d8:	2113      	movs	r1, #19
    c6da:	4628      	mov	r0, r5
    c6dc:	f008 fd30 	bl	15140 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    c6e0:	78bb      	ldrb	r3, [r7, #2]
    c6e2:	07d8      	lsls	r0, r3, #31
    c6e4:	d507      	bpl.n	c6f6 <smp_pairing_rsp+0x8a>
    c6e6:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
    c6ea:	07d9      	lsls	r1, r3, #31
    c6ec:	d503      	bpl.n	c6f6 <smp_pairing_rsp+0x8a>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    c6ee:	210c      	movs	r1, #12
    c6f0:	4628      	mov	r0, r5
    c6f2:	f008 fd25 	bl	15140 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    c6f6:	2105      	movs	r1, #5
    c6f8:	4628      	mov	r0, r5
	smp->method = get_pair_method(smp, rsp->io_capability);
    c6fa:	783f      	ldrb	r7, [r7, #0]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    c6fc:	f008 fd06 	bl	1510c <atomic_test_bit>
    c700:	f8d4 8000 	ldr.w	r8, [r4]
    c704:	2800      	cmp	r0, #0
    c706:	d152      	bne.n	c7ae <smp_pairing_rsp+0x142>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    c708:	2f04      	cmp	r7, #4
    c70a:	d81d      	bhi.n	c748 <smp_pairing_rsp+0xdc>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    c70c:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
    c710:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
    c714:	4013      	ands	r3, r2
    c716:	07da      	lsls	r2, r3, #31
    c718:	d466      	bmi.n	c7e8 <smp_pairing_rsp+0x17c>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    c71a:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    c71e:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    c722:	4318      	orrs	r0, r3
    c724:	f010 0004 	ands.w	r0, r0, #4
    c728:	d00e      	beq.n	c748 <smp_pairing_rsp+0xdc>
	method = gen_method_legacy[remote_io][get_io_capa()];
    c72a:	f7ff f905 	bl	b938 <get_io_capa>
    c72e:	4ba0      	ldr	r3, [pc, #640]	; (c9b0 <smp_pairing_rsp+0x344>)
    c730:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    c734:	441f      	add	r7, r3
    c736:	5c38      	ldrb	r0, [r7, r0]
	if (method == PASSKEY_ROLE) {
    c738:	2804      	cmp	r0, #4
    c73a:	d105      	bne.n	c748 <smp_pairing_rsp+0xdc>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    c73c:	f898 3003 	ldrb.w	r3, [r8, #3]
			method = PASSKEY_INPUT;
    c740:	2b00      	cmp	r3, #0
    c742:	bf0c      	ite	eq
    c744:	2002      	moveq	r0, #2
    c746:	2001      	movne	r0, #1
	smp->method = get_pair_method(smp, rsp->io_capability);
    c748:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
	if (!conn->le.keys) {
    c74c:	f8d8 30a8 	ldr.w	r3, [r8, #168]	; 0xa8
    c750:	b93b      	cbnz	r3, c762 <smp_pairing_rsp+0xf6>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    c752:	f898 0008 	ldrb.w	r0, [r8, #8]
    c756:	f108 017c 	add.w	r1, r8, #124	; 0x7c
    c75a:	f000 fbc3 	bl	cee4 <bt_keys_get_addr>
    c75e:	f8c8 00a8 	str.w	r0, [r8, #168]	; 0xa8
	if (!conn->le.keys ||
    c762:	f8d8 20a8 	ldr.w	r2, [r8, #168]	; 0xa8
    c766:	2a00      	cmp	r2, #0
    c768:	d144      	bne.n	c7f4 <smp_pairing_rsp+0x188>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    c76a:	2105      	movs	r1, #5
    c76c:	4628      	mov	r0, r5
    c76e:	f008 fccd 	bl	1510c <atomic_test_bit>
    c772:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    c776:	2800      	cmp	r0, #0
    c778:	f040 80d9 	bne.w	c92e <smp_pairing_rsp+0x2c2>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    c77c:	461f      	mov	r7, r3
    c77e:	2b00      	cmp	r3, #0
    c780:	d156      	bne.n	c830 <smp_pairing_rsp+0x1c4>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    c782:	210e      	movs	r1, #14
    c784:	4628      	mov	r0, r5
    c786:	f008 fcc1 	bl	1510c <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    c78a:	2800      	cmp	r0, #0
    c78c:	d050      	beq.n	c830 <smp_pairing_rsp+0x1c4>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    c78e:	4e89      	ldr	r6, [pc, #548]	; (c9b4 <smp_pairing_rsp+0x348>)
    c790:	6833      	ldr	r3, [r6, #0]
    c792:	2b00      	cmp	r3, #0
    c794:	d04c      	beq.n	c830 <smp_pairing_rsp+0x1c4>
	    bt_auth && bt_auth->pairing_confirm) {
    c796:	695b      	ldr	r3, [r3, #20]
    c798:	2b00      	cmp	r3, #0
    c79a:	d049      	beq.n	c830 <smp_pairing_rsp+0x1c4>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    c79c:	4628      	mov	r0, r5
    c79e:	2109      	movs	r1, #9
    c7a0:	f008 fcce 	bl	15140 <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    c7a4:	6833      	ldr	r3, [r6, #0]
    c7a6:	6820      	ldr	r0, [r4, #0]
    c7a8:	695b      	ldr	r3, [r3, #20]
    c7aa:	4798      	blx	r3
		return 0;
    c7ac:	e767      	b.n	c67e <smp_pairing_rsp+0x12>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
    c7ae:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    c7b2:	f894 20c3 	ldrb.w	r2, [r4, #195]	; 0xc3
    c7b6:	ea00 0302 	and.w	r3, r0, r2
    c7ba:	071b      	lsls	r3, r3, #28
    c7bc:	d506      	bpl.n	c7cc <smp_pairing_rsp+0x160>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    c7be:	f894 10c2 	ldrb.w	r1, [r4, #194]	; 0xc2
    c7c2:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
    c7c6:	430b      	orrs	r3, r1
    c7c8:	07d9      	lsls	r1, r3, #31
    c7ca:	d40f      	bmi.n	c7ec <smp_pairing_rsp+0x180>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    c7cc:	2f04      	cmp	r7, #4
    c7ce:	d80f      	bhi.n	c7f0 <smp_pairing_rsp+0x184>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    c7d0:	4310      	orrs	r0, r2
    c7d2:	f010 0004 	ands.w	r0, r0, #4
    c7d6:	d0b7      	beq.n	c748 <smp_pairing_rsp+0xdc>
	return gen_method_sc[remote_io][get_io_capa()];
    c7d8:	f7ff f8ae 	bl	b938 <get_io_capa>
    c7dc:	4b76      	ldr	r3, [pc, #472]	; (c9b8 <smp_pairing_rsp+0x34c>)
    c7de:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    c7e2:	441f      	add	r7, r3
    c7e4:	5c38      	ldrb	r0, [r7, r0]
    c7e6:	e7af      	b.n	c748 <smp_pairing_rsp+0xdc>
		return LEGACY_OOB;
    c7e8:	2006      	movs	r0, #6
    c7ea:	e7ad      	b.n	c748 <smp_pairing_rsp+0xdc>
			return LE_SC_OOB;
    c7ec:	2005      	movs	r0, #5
    c7ee:	e7ab      	b.n	c748 <smp_pairing_rsp+0xdc>
		return JUST_WORKS;
    c7f0:	2000      	movs	r0, #0
    c7f2:	e7a9      	b.n	c748 <smp_pairing_rsp+0xdc>
	    !(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
    c7f4:	89d1      	ldrh	r1, [r2, #14]
	if (!conn->le.keys ||
    c7f6:	f011 0f24 	tst.w	r1, #36	; 0x24
    c7fa:	d0b6      	beq.n	c76a <smp_pairing_rsp+0xfe>
	return MIN(req->max_key_size, rsp->max_key_size);
    c7fc:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
    c800:	f894 00bd 	ldrb.w	r0, [r4, #189]	; 0xbd
	if (conn->le.keys->enc_size > get_encryption_key_size(smp)) {
    c804:	7b12      	ldrb	r2, [r2, #12]
    c806:	4283      	cmp	r3, r0
    c808:	bf28      	it	cs
    c80a:	4603      	movcs	r3, r0
    c80c:	429a      	cmp	r2, r3
    c80e:	d901      	bls.n	c814 <smp_pairing_rsp+0x1a8>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
    c810:	2703      	movs	r7, #3
    c812:	e734      	b.n	c67e <smp_pairing_rsp+0x12>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    c814:	068a      	lsls	r2, r1, #26
    c816:	d404      	bmi.n	c822 <smp_pairing_rsp+0x1b6>
	if (!IS_ENABLED(CONFIG_BT_SMP_ALLOW_UNAUTH_OVERWRITE) &&
    c818:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    c81c:	2b00      	cmp	r3, #0
    c81e:	d1a4      	bne.n	c76a <smp_pairing_rsp+0xfe>
    c820:	e7f6      	b.n	c810 <smp_pairing_rsp+0x1a4>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    c822:	2105      	movs	r1, #5
    c824:	4628      	mov	r0, r5
    c826:	f008 fc71 	bl	1510c <atomic_test_bit>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    c82a:	2800      	cmp	r0, #0
    c82c:	d1f4      	bne.n	c818 <smp_pairing_rsp+0x1ac>
    c82e:	e7ef      	b.n	c810 <smp_pairing_rsp+0x1a4>
	struct bt_conn *conn = smp->chan.chan.conn;
    c830:	6826      	ldr	r6, [r4, #0]
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
    c832:	7a30      	ldrb	r0, [r6, #8]
    c834:	f106 017c 	add.w	r1, r6, #124	; 0x7c
    c838:	f000 fbe4 	bl	d004 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
    c83c:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
    c840:	b148      	cbz	r0, c856 <smp_pairing_rsp+0x1ea>
    c842:	7b43      	ldrb	r3, [r0, #13]
    c844:	07db      	lsls	r3, r3, #31
    c846:	d506      	bpl.n	c856 <smp_pairing_rsp+0x1ea>
    c848:	b92a      	cbnz	r2, c856 <smp_pairing_rsp+0x1ea>
		BT_ERR("JustWorks failed, authenticated keys present");
    c84a:	2145      	movs	r1, #69	; 0x45
    c84c:	485b      	ldr	r0, [pc, #364]	; (c9bc <smp_pairing_rsp+0x350>)
    c84e:	f005 fc5b 	bl	12108 <printk>
				return BT_SMP_ERR_UNSPECIFIED;
    c852:	2708      	movs	r7, #8
    c854:	e713      	b.n	c67e <smp_pairing_rsp+0x12>
	switch (smp->method) {
    c856:	2a06      	cmp	r2, #6
    c858:	d85c      	bhi.n	c914 <smp_pairing_rsp+0x2a8>
    c85a:	e8df f002 	tbb	[pc, r2]
    c85e:	5117      	.short	0x5117
    c860:	5b5b5b27 	.word	0x5b5b5b27
    c864:	04          	.byte	0x04
    c865:	00          	.byte	0x00
		if (bt_auth && bt_auth->oob_data_request) {
    c866:	4e53      	ldr	r6, [pc, #332]	; (c9b4 <smp_pairing_rsp+0x348>)
    c868:	6833      	ldr	r3, [r6, #0]
    c86a:	2b00      	cmp	r3, #0
    c86c:	d057      	beq.n	c91e <smp_pairing_rsp+0x2b2>
    c86e:	68db      	ldr	r3, [r3, #12]
    c870:	2b00      	cmp	r3, #0
    c872:	d054      	beq.n	c91e <smp_pairing_rsp+0x2b2>
			struct bt_conn_oob_info info = {
    c874:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    c876:	2109      	movs	r1, #9
    c878:	4628      	mov	r0, r5
			struct bt_conn_oob_info info = {
    c87a:	f8ad 3004 	strh.w	r3, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    c87e:	f008 fc5f 	bl	15140 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    c882:	6833      	ldr	r3, [r6, #0]
    c884:	6820      	ldr	r0, [r4, #0]
    c886:	68db      	ldr	r3, [r3, #12]
    c888:	a901      	add	r1, sp, #4
    c88a:	4798      	blx	r3
	if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    c88c:	2109      	movs	r1, #9
    c88e:	4628      	mov	r0, r5
    c890:	f008 fc3c 	bl	1510c <atomic_test_bit>
    c894:	2800      	cmp	r0, #0
    c896:	d144      	bne.n	c922 <smp_pairing_rsp+0x2b6>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    c898:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    c89c:	2103      	movs	r1, #3
    c89e:	f008 fc4f 	bl	15140 <atomic_set_bit>
		return legacy_send_pairing_confirm(smp);
    c8a2:	4620      	mov	r0, r4
    c8a4:	f008 fe12 	bl	154cc <legacy_send_pairing_confirm>
	return sc_send_public_key(smp);
    c8a8:	4607      	mov	r7, r0
    c8aa:	e6e8      	b.n	c67e <smp_pairing_rsp+0x12>
			if (bt_rand(&passkey, sizeof(passkey))) {
    c8ac:	2104      	movs	r1, #4
    c8ae:	eb0d 0001 	add.w	r0, sp, r1
    c8b2:	f7fa f9ab 	bl	6c0c <bt_rand>
    c8b6:	2800      	cmp	r0, #0
    c8b8:	d1cb      	bne.n	c852 <smp_pairing_rsp+0x1e6>
			passkey %= 1000000;
    c8ba:	9901      	ldr	r1, [sp, #4]
    c8bc:	4a40      	ldr	r2, [pc, #256]	; (c9c0 <smp_pairing_rsp+0x354>)
		if (bt_auth && bt_auth->passkey_display) {
    c8be:	4f3d      	ldr	r7, [pc, #244]	; (c9b4 <smp_pairing_rsp+0x348>)
			passkey %= 1000000;
    c8c0:	fbb1 f3f2 	udiv	r3, r1, r2
    c8c4:	fb02 1313 	mls	r3, r2, r3, r1
    c8c8:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
    c8ca:	683b      	ldr	r3, [r7, #0]
    c8cc:	b153      	cbz	r3, c8e4 <smp_pairing_rsp+0x278>
    c8ce:	681b      	ldr	r3, [r3, #0]
    c8d0:	b143      	cbz	r3, c8e4 <smp_pairing_rsp+0x278>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    c8d2:	210a      	movs	r1, #10
    c8d4:	4628      	mov	r0, r5
    c8d6:	f008 fc33 	bl	15140 <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
    c8da:	683b      	ldr	r3, [r7, #0]
    c8dc:	4630      	mov	r0, r6
    c8de:	681b      	ldr	r3, [r3, #0]
    c8e0:	9901      	ldr	r1, [sp, #4]
    c8e2:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
    c8e4:	9b01      	ldr	r3, [sp, #4]
	dst[1] = val >> 8;
    c8e6:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    c8ea:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
	sys_put_le16(val >> 16, &dst[2]);
    c8ee:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    c8f0:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
	dst[1] = val >> 8;
    c8f4:	0a1b      	lsrs	r3, r3, #8
    c8f6:	f884 20f8 	strb.w	r2, [r4, #248]	; 0xf8
    c8fa:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
	if (ret) {
    c8fe:	e7c5      	b.n	c88c <smp_pairing_rsp+0x220>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    c900:	4628      	mov	r0, r5
    c902:	2109      	movs	r1, #9
    c904:	f008 fc1c 	bl	15140 <atomic_set_bit>
		bt_auth->passkey_entry(conn);
    c908:	4b2a      	ldr	r3, [pc, #168]	; (c9b4 <smp_pairing_rsp+0x348>)
    c90a:	4630      	mov	r0, r6
    c90c:	681b      	ldr	r3, [r3, #0]
    c90e:	685b      	ldr	r3, [r3, #4]
    c910:	4798      	blx	r3
	if (ret) {
    c912:	e7bb      	b.n	c88c <smp_pairing_rsp+0x220>
		BT_ERR("Unknown pairing method (%u)", smp->method);
    c914:	2145      	movs	r1, #69	; 0x45
    c916:	482b      	ldr	r0, [pc, #172]	; (c9c4 <smp_pairing_rsp+0x358>)
    c918:	f005 fbf6 	bl	12108 <printk>
	if (ret) {
    c91c:	e799      	b.n	c852 <smp_pairing_rsp+0x1e6>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
    c91e:	2702      	movs	r7, #2
    c920:	e6ad      	b.n	c67e <smp_pairing_rsp+0x12>
	atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    c922:	2100      	movs	r1, #0
    c924:	4628      	mov	r0, r5
    c926:	f008 fc0b 	bl	15140 <atomic_set_bit>
	return 0;
    c92a:	2700      	movs	r7, #0
    c92c:	e6a7      	b.n	c67e <smp_pairing_rsp+0x12>
	if ((IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) ||
    c92e:	7ab2      	ldrb	r2, [r6, #10]
    c930:	461f      	mov	r7, r3
    c932:	2a04      	cmp	r2, #4
    c934:	d10c      	bne.n	c950 <smp_pairing_rsp+0x2e4>
	     conn->required_sec_level == BT_SECURITY_L4) &&
    c936:	2b00      	cmp	r3, #0
    c938:	f43f af6a 	beq.w	c810 <smp_pairing_rsp+0x1a4>
	return MIN(req->max_key_size, rsp->max_key_size);
    c93c:	f894 20bd 	ldrb.w	r2, [r4, #189]	; 0xbd
    c940:	f894 10c4 	ldrb.w	r1, [r4, #196]	; 0xc4
	     conn->required_sec_level == BT_SECURITY_L4) &&
    c944:	428a      	cmp	r2, r1
    c946:	bf28      	it	cs
    c948:	460a      	movcs	r2, r1
    c94a:	2a10      	cmp	r2, #16
    c94c:	f47f ae96 	bne.w	c67c <smp_pairing_rsp+0x10>
	smp->local_dist &= SEND_KEYS_SC;
    c950:	2200      	movs	r2, #0
    c952:	f884 2198 	strb.w	r2, [r4, #408]	; 0x198
	smp->remote_dist &= RECV_KEYS_SC;
    c956:	f894 2199 	ldrb.w	r2, [r4, #409]	; 0x199
    c95a:	f002 0202 	and.w	r2, r2, #2
    c95e:	f884 2199 	strb.w	r2, [r4, #409]	; 0x199
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    c962:	b95b      	cbnz	r3, c97c <smp_pairing_rsp+0x310>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    c964:	210e      	movs	r1, #14
    c966:	4628      	mov	r0, r5
    c968:	f008 fbd0 	bl	1510c <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    c96c:	b130      	cbz	r0, c97c <smp_pairing_rsp+0x310>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    c96e:	4e11      	ldr	r6, [pc, #68]	; (c9b4 <smp_pairing_rsp+0x348>)
    c970:	6833      	ldr	r3, [r6, #0]
    c972:	b11b      	cbz	r3, c97c <smp_pairing_rsp+0x310>
	    bt_auth && bt_auth->pairing_confirm) {
    c974:	695b      	ldr	r3, [r3, #20]
    c976:	2b00      	cmp	r3, #0
    c978:	f47f af10 	bne.w	c79c <smp_pairing_rsp+0x130>
	if (!sc_public_key) {
    c97c:	4b12      	ldr	r3, [pc, #72]	; (c9c8 <smp_pairing_rsp+0x35c>)
    c97e:	681f      	ldr	r7, [r3, #0]
    c980:	b927      	cbnz	r7, c98c <smp_pairing_rsp+0x320>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    c982:	2106      	movs	r1, #6
    c984:	4628      	mov	r0, r5
    c986:	f008 fbdb 	bl	15140 <atomic_set_bit>
		return 0;
    c98a:	e678      	b.n	c67e <smp_pairing_rsp+0x12>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    c98c:	210c      	movs	r1, #12
    c98e:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    c992:	f008 fbd5 	bl	15140 <atomic_set_bit>
    c996:	e8d0 3fef 	ldaex	r3, [r0]
    c99a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    c99e:	e8c0 3fe2 	stlex	r2, r3, [r0]
    c9a2:	2a00      	cmp	r2, #0
    c9a4:	d1f7      	bne.n	c996 <smp_pairing_rsp+0x32a>
	return sc_send_public_key(smp);
    c9a6:	4620      	mov	r0, r4
    c9a8:	f7ff f856 	bl	ba58 <sc_send_public_key>
    c9ac:	e77c      	b.n	c8a8 <smp_pairing_rsp+0x23c>
    c9ae:	bf00      	nop
    c9b0:	0001af74 	.word	0x0001af74
    c9b4:	20000d24 	.word	0x20000d24
    c9b8:	0001af8d 	.word	0x0001af8d
    c9bc:	0001aec6 	.word	0x0001aec6
    c9c0:	000f4240 	.word	0x000f4240
    c9c4:	0001aef8 	.word	0x0001aef8
    c9c8:	200011bc 	.word	0x200011bc

0000c9cc <smp_pairing_random>:
{
    c9cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c9d0:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    c9d2:	f100 07e7 	add.w	r7, r0, #231	; 0xe7
    c9d6:	2210      	movs	r2, #16
    c9d8:	6889      	ldr	r1, [r1, #8]
{
    c9da:	b09e      	sub	sp, #120	; 0x78
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    c9dc:	4638      	mov	r0, r7
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    c9de:	f104 06b4 	add.w	r6, r4, #180	; 0xb4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    c9e2:	f006 fea6 	bl	13732 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    c9e6:	2105      	movs	r1, #5
    c9e8:	4630      	mov	r0, r6
    c9ea:	f008 fb8f 	bl	1510c <atomic_test_bit>
    c9ee:	f8d4 9000 	ldr.w	r9, [r4]
    c9f2:	2800      	cmp	r0, #0
    c9f4:	d157      	bne.n	caa6 <smp_pairing_random+0xda>
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    c9f6:	f109 038a 	add.w	r3, r9, #138	; 0x8a
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    c9fa:	f104 0af7 	add.w	sl, r4, #247	; 0xf7
    c9fe:	f10d 0828 	add.w	r8, sp, #40	; 0x28
    ca02:	9301      	str	r3, [sp, #4]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    ca04:	f109 0383 	add.w	r3, r9, #131	; 0x83
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    ca08:	9300      	str	r3, [sp, #0]
    ca0a:	4639      	mov	r1, r7
    ca0c:	4650      	mov	r0, sl
    ca0e:	f8cd 8008 	str.w	r8, [sp, #8]
    ca12:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
    ca16:	f104 02b9 	add.w	r2, r4, #185	; 0xb9
    ca1a:	f008 fcfc 	bl	15416 <smp_c1>
	if (err) {
    ca1e:	2800      	cmp	r0, #0
    ca20:	d13a      	bne.n	ca98 <smp_pairing_random+0xcc>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    ca22:	2210      	movs	r2, #16
    ca24:	4641      	mov	r1, r8
    ca26:	f104 00c7 	add.w	r0, r4, #199	; 0xc7
    ca2a:	f006 fe72 	bl	13712 <memcmp>
    ca2e:	2800      	cmp	r0, #0
    ca30:	d173      	bne.n	cb1a <smp_pairing_random+0x14e>
	    conn->role == BT_HCI_ROLE_MASTER) {
    ca32:	f899 5003 	ldrb.w	r5, [r9, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    ca36:	2d00      	cmp	r5, #0
    ca38:	f040 80db 	bne.w	cbf2 <smp_pairing_random+0x226>
	memcpy(out, r2, 8);
    ca3c:	2208      	movs	r2, #8
    ca3e:	f104 01d7 	add.w	r1, r4, #215	; 0xd7
    ca42:	4640      	mov	r0, r8
    ca44:	f006 fe75 	bl	13732 <memcpy>
	memcpy(out + 8, r1, 8);
    ca48:	2208      	movs	r2, #8
    ca4a:	4639      	mov	r1, r7
    ca4c:	a80c      	add	r0, sp, #48	; 0x30
    ca4e:	f006 fe70 	bl	13732 <memcpy>
	return bt_encrypt_le(k, out, out);
    ca52:	4642      	mov	r2, r8
    ca54:	4641      	mov	r1, r8
    ca56:	4650      	mov	r0, sl
    ca58:	f007 f90a 	bl	13c70 <bt_encrypt_le>
		if (err) {
    ca5c:	b9e0      	cbnz	r0, ca98 <smp_pairing_random+0xcc>
		(void)memset(ediv, 0, sizeof(ediv));
    ca5e:	2202      	movs	r2, #2
    ca60:	4629      	mov	r1, r5
    ca62:	a805      	add	r0, sp, #20
    ca64:	f006 fe90 	bl	13788 <memset>
		(void)memset(rand, 0, sizeof(rand));
    ca68:	2208      	movs	r2, #8
    ca6a:	4629      	mov	r1, r5
    ca6c:	a806      	add	r0, sp, #24
    ca6e:	f006 fe8b 	bl	13788 <memset>
	return MIN(req->max_key_size, rsp->max_key_size);
    ca72:	f894 20c4 	ldrb.w	r2, [r4, #196]	; 0xc4
    ca76:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
		if (bt_conn_le_start_encryption(conn, rand, ediv, tmp,
    ca7a:	4648      	mov	r0, r9
    ca7c:	429a      	cmp	r2, r3
    ca7e:	bf94      	ite	ls
    ca80:	9200      	strls	r2, [sp, #0]
    ca82:	9300      	strhi	r3, [sp, #0]
    ca84:	a906      	add	r1, sp, #24
    ca86:	4643      	mov	r3, r8
    ca88:	aa05      	add	r2, sp, #20
    ca8a:	f007 f960 	bl	13d4e <bt_conn_le_start_encryption>
    ca8e:	b128      	cbz	r0, ca9c <smp_pairing_random+0xd0>
			BT_ERR("Failed to start encryption");
    ca90:	2145      	movs	r1, #69	; 0x45
    ca92:	485f      	ldr	r0, [pc, #380]	; (cc10 <smp_pairing_random+0x244>)
    ca94:	f005 fb38 	bl	12108 <printk>
				return BT_SMP_ERR_UNSPECIFIED;
    ca98:	2508      	movs	r5, #8
    ca9a:	e03f      	b.n	cb1c <smp_pairing_random+0x150>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    ca9c:	2101      	movs	r1, #1
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    ca9e:	4630      	mov	r0, r6
    caa0:	f008 fb4e 	bl	15140 <atomic_set_bit>
			return 0;
    caa4:	e03a      	b.n	cb1c <smp_pairing_random+0x150>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    caa6:	f899 5003 	ldrb.w	r5, [r9, #3]
    caaa:	2d00      	cmp	r5, #0
    caac:	f040 80ae 	bne.w	cc0c <smp_pairing_random+0x240>
	switch (smp->method) {
    cab0:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    cab4:	2b05      	cmp	r3, #5
    cab6:	d8ef      	bhi.n	ca98 <smp_pairing_random+0xcc>
    cab8:	a201      	add	r2, pc, #4	; (adr r2, cac0 <smp_pairing_random+0xf4>)
    caba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cabe:	bf00      	nop
    cac0:	0000cb25 	.word	0x0000cb25
    cac4:	0000cad9 	.word	0x0000cad9
    cac8:	0000cad9 	.word	0x0000cad9
    cacc:	0000cb25 	.word	0x0000cb25
    cad0:	0000ca99 	.word	0x0000ca99
    cad4:	0000cbf7 	.word	0x0000cbf7
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    cad8:	f894 218c 	ldrb.w	r2, [r4, #396]	; 0x18c
    cadc:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
    cae0:	40d3      	lsrs	r3, r2
    cae2:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
    cae6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    caea:	b2db      	uxtb	r3, r3
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    caec:	f8df 912c 	ldr.w	r9, [pc, #300]	; cc1c <smp_pairing_random+0x250>
    caf0:	f10d 0828 	add.w	r8, sp, #40	; 0x28
    caf4:	f204 1a07 	addw	sl, r4, #263	; 0x107
    caf8:	f8cd 8000 	str.w	r8, [sp]
    cafc:	463a      	mov	r2, r7
    cafe:	4650      	mov	r0, sl
    cb00:	f8d9 1000 	ldr.w	r1, [r9]
    cb04:	f008 fadb 	bl	150be <smp_f4>
    cb08:	2800      	cmp	r0, #0
    cb0a:	d1c5      	bne.n	ca98 <smp_pairing_random+0xcc>
	if (memcmp(smp->pcnf, cfm, 16)) {
    cb0c:	2210      	movs	r2, #16
    cb0e:	4641      	mov	r1, r8
    cb10:	f104 00c7 	add.w	r0, r4, #199	; 0xc7
    cb14:	f006 fdfd 	bl	13712 <memcmp>
    cb18:	b130      	cbz	r0, cb28 <smp_pairing_random+0x15c>
		return BT_SMP_ERR_CONFIRM_FAILED;
    cb1a:	2504      	movs	r5, #4
}
    cb1c:	4628      	mov	r0, r5
    cb1e:	b01e      	add	sp, #120	; 0x78
    cb20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (smp->method) {
    cb24:	2300      	movs	r3, #0
    cb26:	e7e1      	b.n	caec <smp_pairing_random+0x120>
		switch (smp->method) {
    cb28:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    cb2c:	2b05      	cmp	r3, #5
    cb2e:	d8b3      	bhi.n	ca98 <smp_pairing_random+0xcc>
    cb30:	a201      	add	r2, pc, #4	; (adr r2, cb38 <smp_pairing_random+0x16c>)
    cb32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cb36:	bf00      	nop
    cb38:	0000cbf7 	.word	0x0000cbf7
    cb3c:	0000cbc3 	.word	0x0000cbc3
    cb40:	0000cbc3 	.word	0x0000cbc3
    cb44:	0000cb51 	.word	0x0000cb51
    cb48:	0000ca99 	.word	0x0000ca99
    cb4c:	0000cbf7 	.word	0x0000cbf7
	sys_memcpy_swap(m, u, 32);
    cb50:	2220      	movs	r2, #32
    cb52:	4640      	mov	r0, r8
    cb54:	f8d9 1000 	ldr.w	r1, [r9]
    cb58:	f7fe ff14 	bl	b984 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    cb5c:	2220      	movs	r2, #32
    cb5e:	4651      	mov	r1, sl
    cb60:	a812      	add	r0, sp, #72	; 0x48
    cb62:	f7fe ff0f 	bl	b984 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
    cb66:	2210      	movs	r2, #16
    cb68:	4639      	mov	r1, r7
    cb6a:	a81a      	add	r0, sp, #104	; 0x68
    cb6c:	f7fe ff0a 	bl	b984 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
    cb70:	2210      	movs	r2, #16
    cb72:	f104 01d7 	add.w	r1, r4, #215	; 0xd7
    cb76:	a806      	add	r0, sp, #24
    cb78:	f7fe ff04 	bl	b984 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    cb7c:	ab06      	add	r3, sp, #24
    cb7e:	2250      	movs	r2, #80	; 0x50
    cb80:	4641      	mov	r1, r8
    cb82:	4618      	mov	r0, r3
    cb84:	f008 fa0b 	bl	14f9e <bt_smp_aes_cmac>
	if (err) {
    cb88:	2800      	cmp	r0, #0
    cb8a:	d185      	bne.n	ca98 <smp_pairing_random+0xcc>
	memcpy(passkey, xs + 12, 4);
    cb8c:	a909      	add	r1, sp, #36	; 0x24
    cb8e:	2204      	movs	r2, #4
    cb90:	a805      	add	r0, sp, #20
    cb92:	f006 fdce 	bl	13732 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    cb96:	9b05      	ldr	r3, [sp, #20]
    cb98:	491e      	ldr	r1, [pc, #120]	; (cc14 <smp_pairing_random+0x248>)
    cb9a:	ba1b      	rev	r3, r3
    cb9c:	fbb3 f2f1 	udiv	r2, r3, r1
    cba0:	fb01 3312 	mls	r3, r1, r2, r3
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    cba4:	4630      	mov	r0, r6
    cba6:	2109      	movs	r1, #9
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    cba8:	9305      	str	r3, [sp, #20]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    cbaa:	f008 fac9 	bl	15140 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    cbae:	2108      	movs	r1, #8
    cbb0:	f008 fac6 	bl	15140 <atomic_set_bit>
			bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    cbb4:	4b18      	ldr	r3, [pc, #96]	; (cc18 <smp_pairing_random+0x24c>)
    cbb6:	9905      	ldr	r1, [sp, #20]
    cbb8:	681b      	ldr	r3, [r3, #0]
    cbba:	6820      	ldr	r0, [r4, #0]
    cbbc:	689b      	ldr	r3, [r3, #8]
    cbbe:	4798      	blx	r3
			return 0;
    cbc0:	e7ac      	b.n	cb1c <smp_pairing_random+0x150>
			smp->passkey_round++;
    cbc2:	f894 318c 	ldrb.w	r3, [r4, #396]	; 0x18c
    cbc6:	3301      	adds	r3, #1
    cbc8:	b2db      	uxtb	r3, r3
			if (smp->passkey_round == 20U) {
    cbca:	2b14      	cmp	r3, #20
			smp->passkey_round++;
    cbcc:	f884 318c 	strb.w	r3, [r4, #396]	; 0x18c
			if (smp->passkey_round == 20U) {
    cbd0:	d011      	beq.n	cbf6 <smp_pairing_random+0x22a>
			if (bt_rand(smp->prnd, 16)) {
    cbd2:	2110      	movs	r1, #16
    cbd4:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
    cbd8:	f7fa f818 	bl	6c0c <bt_rand>
    cbdc:	2800      	cmp	r0, #0
    cbde:	f47f af5b 	bne.w	ca98 <smp_pairing_random+0xcc>
			atomic_set_bit(&smp->allowed_cmds,
    cbe2:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    cbe6:	2103      	movs	r1, #3
    cbe8:	f008 faaa 	bl	15140 <atomic_set_bit>
			return smp_send_pairing_confirm(smp);
    cbec:	4620      	mov	r0, r4
    cbee:	f7ff fc25 	bl	c43c <smp_send_pairing_confirm>
		return compute_and_send_master_dhcheck(smp);
    cbf2:	4605      	mov	r5, r0
    cbf4:	e792      	b.n	cb1c <smp_pairing_random+0x150>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    cbf6:	2107      	movs	r1, #7
    cbf8:	4630      	mov	r0, r6
    cbfa:	f008 fa87 	bl	1510c <atomic_test_bit>
    cbfe:	b108      	cbz	r0, cc04 <smp_pairing_random+0x238>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    cc00:	2108      	movs	r1, #8
    cc02:	e74c      	b.n	ca9e <smp_pairing_random+0xd2>
		return compute_and_send_master_dhcheck(smp);
    cc04:	4620      	mov	r0, r4
    cc06:	f7fe ffd7 	bl	bbb8 <compute_and_send_master_dhcheck>
    cc0a:	e7f2      	b.n	cbf2 <smp_pairing_random+0x226>
	return BT_SMP_ERR_PAIRING_NOTSUPP;
    cc0c:	2505      	movs	r5, #5
    cc0e:	e785      	b.n	cb1c <smp_pairing_random+0x150>
    cc10:	0001af19 	.word	0x0001af19
    cc14:	000f4240 	.word	0x000f4240
    cc18:	20000d24 	.word	0x20000d24
    cc1c:	200011bc 	.word	0x200011bc

0000cc20 <smp_ident_addr_info>:
{
    cc20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
    cc24:	688f      	ldr	r7, [r1, #8]
{
    cc26:	4605      	mov	r5, r0
	return BT_ADDR_IS_RPA(&addr->a);
}

static inline bool bt_addr_le_is_identity(const bt_addr_le_t *addr)
{
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    cc28:	783b      	ldrb	r3, [r7, #0]
	struct bt_conn *conn = smp->chan.chan.conn;
    cc2a:	6804      	ldr	r4, [r0, #0]
    cc2c:	b1c3      	cbz	r3, cc60 <smp_ident_addr_info+0x40>
	if (!bt_addr_le_is_identity(&req->addr)) {
    cc2e:	79bb      	ldrb	r3, [r7, #6]
    cc30:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    cc34:	2bc0      	cmp	r3, #192	; 0xc0
    cc36:	d013      	beq.n	cc60 <smp_ident_addr_info+0x40>
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
    cc38:	4638      	mov	r0, r7
    cc3a:	f7f7 fe03 	bl	4844 <bt_addr_le_str_real>
    cc3e:	2145      	movs	r1, #69	; 0x45
    cc40:	4602      	mov	r2, r0
    cc42:	483e      	ldr	r0, [pc, #248]	; (cd3c <smp_ident_addr_info+0x11c>)
    cc44:	f005 fa60 	bl	12108 <printk>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
    cc48:	f104 007c 	add.w	r0, r4, #124	; 0x7c
    cc4c:	f7f7 fdfa 	bl	4844 <bt_addr_le_str_real>
    cc50:	2145      	movs	r1, #69	; 0x45
    cc52:	4602      	mov	r2, r0
    cc54:	483a      	ldr	r0, [pc, #232]	; (cd40 <smp_ident_addr_info+0x120>)
    cc56:	f005 fa57 	bl	12108 <printk>
		return BT_SMP_ERR_INVALID_PARAMS;
    cc5a:	200a      	movs	r0, #10
}
    cc5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    cc60:	210c      	movs	r1, #12
    cc62:	f105 00b4 	add.w	r0, r5, #180	; 0xb4
    cc66:	f008 fa51 	bl	1510c <atomic_test_bit>
    cc6a:	2800      	cmp	r0, #0
    cc6c:	d03e      	beq.n	ccec <smp_ident_addr_info+0xcc>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    cc6e:	f104 087c 	add.w	r8, r4, #124	; 0x7c
    cc72:	4642      	mov	r2, r8
    cc74:	2002      	movs	r0, #2
    cc76:	7a21      	ldrb	r1, [r4, #8]
    cc78:	f008 fd72 	bl	15760 <bt_keys_get_type>
		if (!keys) {
    cc7c:	4606      	mov	r6, r0
    cc7e:	b948      	cbnz	r0, cc94 <smp_ident_addr_info+0x74>
			BT_ERR("Unable to get keys for %s",
    cc80:	4640      	mov	r0, r8
    cc82:	f7f7 fddf 	bl	4844 <bt_addr_le_str_real>
    cc86:	2145      	movs	r1, #69	; 0x45
    cc88:	4602      	mov	r2, r0
    cc8a:	482e      	ldr	r0, [pc, #184]	; (cd44 <smp_ident_addr_info+0x124>)
    cc8c:	f005 fa3c 	bl	12108 <printk>
			return BT_SMP_ERR_UNSPECIFIED;
    cc90:	2008      	movs	r0, #8
    cc92:	e7e3      	b.n	cc5c <smp_ident_addr_info+0x3c>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    cc94:	78e3      	ldrb	r3, [r4, #3]
    cc96:	2b00      	cmp	r3, #0
    cc98:	d13c      	bne.n	cd14 <smp_ident_addr_info+0xf4>
			dst = &conn->le.resp_addr;
    cc9a:	f104 018a 	add.w	r1, r4, #138	; 0x8a
	if (addr->type != BT_ADDR_LE_RANDOM) {
    cc9e:	780b      	ldrb	r3, [r1, #0]
    cca0:	2b01      	cmp	r3, #1
    cca2:	d120      	bne.n	cce6 <smp_ident_addr_info+0xc6>
		if (bt_addr_le_is_rpa(dst)) {
    cca4:	798b      	ldrb	r3, [r1, #6]
    cca6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    ccaa:	2b40      	cmp	r3, #64	; 0x40
    ccac:	d11b      	bne.n	cce6 <smp_ident_addr_info+0xc6>
	memcpy(dst, src, sizeof(*dst));
    ccae:	2206      	movs	r2, #6
    ccb0:	3101      	adds	r1, #1
    ccb2:	f106 003a 	add.w	r0, r6, #58	; 0x3a
    ccb6:	f006 fd3c 	bl	13732 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    ccba:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
    ccbe:	b193      	cbz	r3, cce6 <smp_ident_addr_info+0xc6>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
    ccc0:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
    ccc4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    ccc8:	2bc0      	cmp	r3, #192	; 0xc0
    ccca:	d00c      	beq.n	cce6 <smp_ident_addr_info+0xc6>
	memcpy(dst, src, sizeof(*dst));
    cccc:	2207      	movs	r2, #7
    ccce:	4639      	mov	r1, r7
    ccd0:	1c70      	adds	r0, r6, #1
    ccd2:	f006 fd2e 	bl	13732 <memcpy>
    ccd6:	2207      	movs	r2, #7
    ccd8:	4639      	mov	r1, r7
    ccda:	4640      	mov	r0, r8
    ccdc:	f006 fd29 	bl	13732 <memcpy>
				bt_conn_identity_resolved(conn);
    cce0:	4620      	mov	r0, r4
    cce2:	f7fa f93f 	bl	6f64 <bt_conn_identity_resolved>
		bt_id_add(keys);
    cce6:	4630      	mov	r0, r6
    cce8:	f7f8 fcc0 	bl	566c <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    ccec:	f895 3199 	ldrb.w	r3, [r5, #409]	; 0x199
    ccf0:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    ccf4:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    ccf6:	f885 2199 	strb.w	r2, [r5, #409]	; 0x199
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    ccfa:	d504      	bpl.n	cd06 <smp_ident_addr_info+0xe6>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    ccfc:	210a      	movs	r1, #10
    ccfe:	f105 00b0 	add.w	r0, r5, #176	; 0xb0
    cd02:	f008 fa1d 	bl	15140 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    cd06:	78e3      	ldrb	r3, [r4, #3]
    cd08:	b13b      	cbz	r3, cd1a <smp_ident_addr_info+0xfa>
	if (!smp->local_dist && !smp->remote_dist) {
    cd0a:	f8b5 4198 	ldrh.w	r4, [r5, #408]	; 0x198
    cd0e:	b174      	cbz	r4, cd2e <smp_ident_addr_info+0x10e>
	return 0;
    cd10:	2000      	movs	r0, #0
    cd12:	e7a3      	b.n	cc5c <smp_ident_addr_info+0x3c>
			dst = &conn->le.init_addr;
    cd14:	f104 0183 	add.w	r1, r4, #131	; 0x83
    cd18:	e7c1      	b.n	cc9e <smp_ident_addr_info+0x7e>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    cd1a:	f895 3199 	ldrb.w	r3, [r5, #409]	; 0x199
    cd1e:	2b00      	cmp	r3, #0
    cd20:	d1f3      	bne.n	cd0a <smp_ident_addr_info+0xea>
		err = bt_smp_distribute_keys(smp);
    cd22:	4628      	mov	r0, r5
    cd24:	f7fe feba 	bl	ba9c <bt_smp_distribute_keys>
		if (err) {
    cd28:	2800      	cmp	r0, #0
    cd2a:	d0ee      	beq.n	cd0a <smp_ident_addr_info+0xea>
    cd2c:	e796      	b.n	cc5c <smp_ident_addr_info+0x3c>
		smp_pairing_complete(smp, 0);
    cd2e:	4628      	mov	r0, r5
    cd30:	4621      	mov	r1, r4
    cd32:	f7ff f995 	bl	c060 <smp_pairing_complete>
	return 0;
    cd36:	4620      	mov	r0, r4
    cd38:	e790      	b.n	cc5c <smp_ident_addr_info+0x3c>
    cd3a:	bf00      	nop
    cd3c:	0001af39 	.word	0x0001af39
    cd40:	0001af52 	.word	0x0001af52
    cd44:	0001ad66 	.word	0x0001ad66

0000cd48 <bt_smp_auth_pairing_confirm>:
{
    cd48:	b570      	push	{r4, r5, r6, lr}
    cd4a:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
    cd4c:	f7fe fe48 	bl	b9e0 <smp_chan_get>
	if (!smp) {
    cd50:	4605      	mov	r5, r0
    cd52:	b910      	cbnz	r0, cd5a <bt_smp_auth_pairing_confirm+0x12>
		return -EINVAL;
    cd54:	f06f 0015 	mvn.w	r0, #21
}
    cd58:	bd70      	pop	{r4, r5, r6, pc}
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER)) {
    cd5a:	f100 06b4 	add.w	r6, r0, #180	; 0xb4
    cd5e:	2109      	movs	r1, #9
    cd60:	4630      	mov	r0, r6
    cd62:	f008 f9d9 	bl	15118 <atomic_test_and_clear_bit>
    cd66:	2800      	cmp	r0, #0
    cd68:	d0f4      	beq.n	cd54 <bt_smp_auth_pairing_confirm+0xc>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    cd6a:	78e3      	ldrb	r3, [r4, #3]
    cd6c:	b9a3      	cbnz	r3, cd98 <bt_smp_auth_pairing_confirm+0x50>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    cd6e:	2105      	movs	r1, #5
    cd70:	4630      	mov	r0, r6
    cd72:	f008 f9cb 	bl	1510c <atomic_test_bit>
    cd76:	b940      	cbnz	r0, cd8a <bt_smp_auth_pairing_confirm+0x42>
			atomic_set_bit(&smp->allowed_cmds,
    cd78:	f105 00b0 	add.w	r0, r5, #176	; 0xb0
    cd7c:	2103      	movs	r1, #3
    cd7e:	f008 f9df 	bl	15140 <atomic_set_bit>
			return legacy_send_pairing_confirm(smp);
    cd82:	4628      	mov	r0, r5
    cd84:	f008 fba2 	bl	154cc <legacy_send_pairing_confirm>
    cd88:	e7e6      	b.n	cd58 <bt_smp_auth_pairing_confirm+0x10>
		if (!sc_public_key) {
    cd8a:	4b09      	ldr	r3, [pc, #36]	; (cdb0 <bt_smp_auth_pairing_confirm+0x68>)
    cd8c:	681c      	ldr	r4, [r3, #0]
    cd8e:	b92c      	cbnz	r4, cd9c <bt_smp_auth_pairing_confirm+0x54>
			atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    cd90:	2106      	movs	r1, #6
    cd92:	4630      	mov	r0, r6
    cd94:	f008 f9d4 	bl	15140 <atomic_set_bit>
	return 0;
    cd98:	2000      	movs	r0, #0
    cd9a:	e7dd      	b.n	cd58 <bt_smp_auth_pairing_confirm+0x10>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    cd9c:	f105 00b0 	add.w	r0, r5, #176	; 0xb0
    cda0:	210c      	movs	r1, #12
    cda2:	f008 f9cd 	bl	15140 <atomic_set_bit>
		return sc_send_public_key(smp);
    cda6:	4628      	mov	r0, r5
    cda8:	f7fe fe56 	bl	ba58 <sc_send_public_key>
    cdac:	e7d4      	b.n	cd58 <bt_smp_auth_pairing_confirm+0x10>
    cdae:	bf00      	nop
    cdb0:	200011bc 	.word	0x200011bc

0000cdb4 <bt_smp_update_keys>:
{
    cdb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cdb6:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
    cdb8:	f7fe fe12 	bl	b9e0 <smp_chan_get>
	if (!smp) {
    cdbc:	4605      	mov	r5, r0
    cdbe:	2800      	cmp	r0, #0
    cdc0:	d077      	beq.n	ceb2 <bt_smp_update_keys+0xfe>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    cdc2:	f100 06b4 	add.w	r6, r0, #180	; 0xb4
    cdc6:	2103      	movs	r1, #3
    cdc8:	4630      	mov	r0, r6
    cdca:	f008 f99f 	bl	1510c <atomic_test_bit>
    cdce:	2800      	cmp	r0, #0
    cdd0:	d06f      	beq.n	ceb2 <bt_smp_update_keys+0xfe>
	if (conn->le.keys) {
    cdd2:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
    cdd6:	b108      	cbz	r0, cddc <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
    cdd8:	f000 f924 	bl	d024 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    cddc:	f104 077c 	add.w	r7, r4, #124	; 0x7c
    cde0:	4639      	mov	r1, r7
    cde2:	7a20      	ldrb	r0, [r4, #8]
    cde4:	f000 f87e 	bl	cee4 <bt_keys_get_addr>
    cde8:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
	if (!conn->le.keys) {
    cdec:	b968      	cbnz	r0, ce0a <bt_smp_update_keys+0x56>
		BT_ERR("Unable to get keys for %s",
    cdee:	4638      	mov	r0, r7
    cdf0:	f7f7 fd28 	bl	4844 <bt_addr_le_str_real>
    cdf4:	2145      	movs	r1, #69	; 0x45
    cdf6:	4602      	mov	r2, r0
    cdf8:	482e      	ldr	r0, [pc, #184]	; (ceb4 <bt_smp_update_keys+0x100>)
    cdfa:	f005 f985 	bl	12108 <printk>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    cdfe:	4628      	mov	r0, r5
}
    ce00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    ce04:	2108      	movs	r1, #8
    ce06:	f008 ba8c 	b.w	15322 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
    ce0a:	210d      	movs	r1, #13
    ce0c:	4630      	mov	r0, r6
    ce0e:	f008 f97d 	bl	1510c <atomic_test_bit>
    ce12:	b128      	cbz	r0, ce20 <bt_smp_update_keys+0x6c>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
    ce14:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
    ce18:	7b53      	ldrb	r3, [r2, #13]
    ce1a:	f043 0302 	orr.w	r3, r3, #2
    ce1e:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
    ce20:	f895 20b8 	ldrb.w	r2, [r5, #184]	; 0xb8
    ce24:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    ce28:	2a03      	cmp	r2, #3
    ce2a:	7b4b      	ldrb	r3, [r1, #13]
    ce2c:	d838      	bhi.n	cea0 <bt_smp_update_keys+0xec>
    ce2e:	b3d2      	cbz	r2, cea6 <bt_smp_update_keys+0xf2>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
    ce30:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
    ce34:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
    ce36:	f895 30c4 	ldrb.w	r3, [r5, #196]	; 0xc4
    ce3a:	f895 20bd 	ldrb.w	r2, [r5, #189]	; 0xbd
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    ce3e:	4630      	mov	r0, r6
	return MIN(req->max_key_size, rsp->max_key_size);
    ce40:	4293      	cmp	r3, r2
    ce42:	bf28      	it	cs
    ce44:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
    ce46:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    ce48:	2105      	movs	r1, #5
    ce4a:	f008 f95f 	bl	1510c <atomic_test_bit>
    ce4e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
		conn->le.keys->flags |= BT_KEYS_SC;
    ce52:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    ce54:	b350      	cbz	r0, ceac <bt_smp_update_keys+0xf8>
		conn->le.keys->flags |= BT_KEYS_SC;
    ce56:	f042 0210 	orr.w	r2, r2, #16
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    ce5a:	210c      	movs	r1, #12
    ce5c:	4630      	mov	r0, r6
		conn->le.keys->flags |= BT_KEYS_SC;
    ce5e:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    ce60:	f008 f954 	bl	1510c <atomic_test_bit>
    ce64:	b328      	cbz	r0, ceb2 <bt_smp_update_keys+0xfe>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
    ce66:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
    ce6a:	2120      	movs	r1, #32
    ce6c:	f008 fc88 	bl	15780 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
    ce70:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
    ce74:	f105 01f7 	add.w	r1, r5, #247	; 0xf7
    ce78:	2210      	movs	r2, #16
    ce7a:	301a      	adds	r0, #26
    ce7c:	f006 fc59 	bl	13732 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
    ce80:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
    ce84:	2208      	movs	r2, #8
    ce86:	2100      	movs	r1, #0
    ce88:	3010      	adds	r0, #16
    ce8a:	f006 fc7d 	bl	13788 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
    ce8e:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
    ce92:	2202      	movs	r2, #2
}
    ce94:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
    ce98:	2100      	movs	r1, #0
    ce9a:	3018      	adds	r0, #24
    ce9c:	f006 bc74 	b.w	13788 <memset>
	switch (smp->method) {
    cea0:	3a05      	subs	r2, #5
    cea2:	2a01      	cmp	r2, #1
    cea4:	d9c4      	bls.n	ce30 <bt_smp_update_keys+0x7c>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
    cea6:	f023 0301 	bic.w	r3, r3, #1
    ceaa:	e7c3      	b.n	ce34 <bt_smp_update_keys+0x80>
		conn->le.keys->flags &= ~BT_KEYS_SC;
    ceac:	f022 0210 	bic.w	r2, r2, #16
    ceb0:	735a      	strb	r2, [r3, #13]
}
    ceb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ceb4:	0001ad66 	.word	0x0001ad66

0000ceb8 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
    ceb8:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    ceba:	4b07      	ldr	r3, [pc, #28]	; (ced8 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
    cebc:	4807      	ldr	r0, [pc, #28]	; (cedc <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    cebe:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
    cec2:	f003 0306 	and.w	r3, r3, #6
    cec6:	1f9a      	subs	r2, r3, #6
    cec8:	4253      	negs	r3, r2
    ceca:	4153      	adcs	r3, r2
    cecc:	4a04      	ldr	r2, [pc, #16]	; (cee0 <bt_smp_init+0x28>)
    cece:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
    ced0:	f7f9 fd76 	bl	69c0 <bt_pub_key_gen>
	}

	return smp_self_test();
}
    ced4:	2000      	movs	r0, #0
    ced6:	bd08      	pop	{r3, pc}
    ced8:	20000000 	.word	0x20000000
    cedc:	20000284 	.word	0x20000284
    cee0:	20001f8a 	.word	0x20001f8a

0000cee4 <bt_keys_get_addr>:
static u32_t aging_counter_val;
static struct bt_keys *last_keys_updated;
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(u8_t id, const bt_addr_le_t *addr)
{
    cee4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    cee6:	4c11      	ldr	r4, [pc, #68]	; (cf2c <bt_keys_get_addr+0x48>)
{
    cee8:	4605      	mov	r5, r0
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    ceea:	7823      	ldrb	r3, [r4, #0]
{
    ceec:	460e      	mov	r6, r1
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    ceee:	4283      	cmp	r3, r0
    cef0:	4627      	mov	r7, r4
    cef2:	d00b      	beq.n	cf0c <bt_keys_get_addr+0x28>
			return keys;
		}

		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    cef4:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
    cef6:	2207      	movs	r2, #7
    cef8:	4669      	mov	r1, sp
    cefa:	480d      	ldr	r0, [pc, #52]	; (cf30 <bt_keys_get_addr+0x4c>)
    cefc:	9400      	str	r4, [sp, #0]
    cefe:	f8cd 4003 	str.w	r4, [sp, #3]
    cf02:	f006 fc06 	bl	13712 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
    cf06:	b140      	cbz	r0, cf1a <bt_keys_get_addr+0x36>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
    cf08:	4620      	mov	r0, r4
    cf0a:	e00d      	b.n	cf28 <bt_keys_get_addr+0x44>
    cf0c:	2207      	movs	r2, #7
    cf0e:	1c60      	adds	r0, r4, #1
    cf10:	f006 fbff 	bl	13712 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    cf14:	2800      	cmp	r0, #0
    cf16:	d1ed      	bne.n	cef4 <bt_keys_get_addr+0x10>
    cf18:	e7f6      	b.n	cf08 <bt_keys_get_addr+0x24>
	memcpy(dst, src, sizeof(*dst));
    cf1a:	2207      	movs	r2, #7
    cf1c:	4631      	mov	r1, r6
    cf1e:	4804      	ldr	r0, [pc, #16]	; (cf30 <bt_keys_get_addr+0x4c>)
		keys->id = id;
    cf20:	703d      	strb	r5, [r7, #0]
    cf22:	f006 fc06 	bl	13732 <memcpy>
		return keys;
    cf26:	4801      	ldr	r0, [pc, #4]	; (cf2c <bt_keys_get_addr+0x48>)
}
    cf28:	b003      	add	sp, #12
    cf2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cf2c:	200011c0 	.word	0x200011c0
    cf30:	200011c1 	.word	0x200011c1

0000cf34 <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
    cf34:	460b      	mov	r3, r1
    cf36:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
    cf38:	4a04      	ldr	r2, [pc, #16]	; (cf4c <bt_keys_foreach+0x18>)
{
    cf3a:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
    cf3c:	89d4      	ldrh	r4, [r2, #14]
    cf3e:	4204      	tst	r4, r0
    cf40:	d002      	beq.n	cf48 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
    cf42:	4610      	mov	r0, r2
		}
	}
}
    cf44:	bc10      	pop	{r4}
			func(&key_pool[i], data);
    cf46:	4718      	bx	r3
}
    cf48:	bc10      	pop	{r4}
    cf4a:	4770      	bx	lr
    cf4c:	200011c0 	.word	0x200011c0

0000cf50 <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
    cf50:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
    cf52:	2200      	movs	r2, #0
    cf54:	2002      	movs	r0, #2
    cf56:	4902      	ldr	r1, [pc, #8]	; (cf60 <keys_commit+0x10>)
    cf58:	f7ff ffec 	bl	cf34 <bt_keys_foreach>
	}

	return 0;
}
    cf5c:	2000      	movs	r0, #0
    cf5e:	bd08      	pop	{r3, pc}
    cf60:	0001575d 	.word	0x0001575d

0000cf64 <bt_keys_find>:
{
    cf64:	b510      	push	{r4, lr}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    cf66:	4c09      	ldr	r4, [pc, #36]	; (cf8c <bt_keys_find+0x28>)
{
    cf68:	460b      	mov	r3, r1
    cf6a:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    cf6c:	89e2      	ldrh	r2, [r4, #14]
    cf6e:	4202      	tst	r2, r0
    cf70:	d007      	beq.n	cf82 <bt_keys_find+0x1e>
    cf72:	7822      	ldrb	r2, [r4, #0]
    cf74:	429a      	cmp	r2, r3
    cf76:	d104      	bne.n	cf82 <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
    cf78:	2207      	movs	r2, #7
    cf7a:	1c60      	adds	r0, r4, #1
    cf7c:	f006 fbc9 	bl	13712 <memcmp>
    cf80:	b108      	cbz	r0, cf86 <bt_keys_find+0x22>
	return NULL;
    cf82:	2000      	movs	r0, #0
}
    cf84:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    cf86:	4620      	mov	r0, r4
    cf88:	e7fc      	b.n	cf84 <bt_keys_find+0x20>
    cf8a:	bf00      	nop
    cf8c:	200011c0 	.word	0x200011c0

0000cf90 <bt_keys_find_irk>:
{
    cf90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
    cf92:	780b      	ldrb	r3, [r1, #0]
    cf94:	4607      	mov	r7, r0
    cf96:	2b01      	cmp	r3, #1
    cf98:	460c      	mov	r4, r1
    cf9a:	d001      	beq.n	cfa0 <bt_keys_find_irk+0x10>
		return NULL;
    cf9c:	2000      	movs	r0, #0
}
    cf9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
    cfa0:	798b      	ldrb	r3, [r1, #6]
    cfa2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    cfa6:	2b40      	cmp	r3, #64	; 0x40
    cfa8:	d1f8      	bne.n	cf9c <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    cfaa:	4d13      	ldr	r5, [pc, #76]	; (cff8 <bt_keys_find_irk+0x68>)
    cfac:	89eb      	ldrh	r3, [r5, #14]
    cfae:	462e      	mov	r6, r5
    cfb0:	f013 0f02 	tst.w	r3, #2
    cfb4:	d0f2      	beq.n	cf9c <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
    cfb6:	7833      	ldrb	r3, [r6, #0]
    cfb8:	42bb      	cmp	r3, r7
    cfba:	d10b      	bne.n	cfd4 <bt_keys_find_irk+0x44>
	return memcmp(a, b, sizeof(*a));
    cfbc:	2206      	movs	r2, #6
    cfbe:	f106 013a 	add.w	r1, r6, #58	; 0x3a
    cfc2:	1c60      	adds	r0, r4, #1
    cfc4:	f006 fba5 	bl	13712 <memcmp>
    cfc8:	b908      	cbnz	r0, cfce <bt_keys_find_irk+0x3e>
			return &key_pool[i];
    cfca:	4628      	mov	r0, r5
    cfcc:	e7e7      	b.n	cf9e <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    cfce:	89f3      	ldrh	r3, [r6, #14]
    cfd0:	079b      	lsls	r3, r3, #30
    cfd2:	d5e3      	bpl.n	cf9c <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
    cfd4:	7833      	ldrb	r3, [r6, #0]
    cfd6:	42bb      	cmp	r3, r7
    cfd8:	d1e0      	bne.n	cf9c <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    cfda:	3401      	adds	r4, #1
    cfdc:	4621      	mov	r1, r4
    cfde:	4807      	ldr	r0, [pc, #28]	; (cffc <bt_keys_find_irk+0x6c>)
    cfe0:	f006 fbf8 	bl	137d4 <bt_rpa_irk_matches>
    cfe4:	2800      	cmp	r0, #0
    cfe6:	d0d9      	beq.n	cf9c <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
    cfe8:	2206      	movs	r2, #6
    cfea:	4621      	mov	r1, r4
    cfec:	4804      	ldr	r0, [pc, #16]	; (d000 <bt_keys_find_irk+0x70>)
    cfee:	f006 fba0 	bl	13732 <memcpy>
			return &key_pool[i];
    cff2:	4801      	ldr	r0, [pc, #4]	; (cff8 <bt_keys_find_irk+0x68>)
}
    cff4:	e7d3      	b.n	cf9e <bt_keys_find_irk+0xe>
    cff6:	bf00      	nop
    cff8:	200011c0 	.word	0x200011c0
    cffc:	200011ea 	.word	0x200011ea
    d000:	200011fa 	.word	0x200011fa

0000d004 <bt_keys_find_addr>:
{
    d004:	b510      	push	{r4, lr}
		if (key_pool[i].id == id &&
    d006:	4c06      	ldr	r4, [pc, #24]	; (d020 <bt_keys_find_addr+0x1c>)
    d008:	7823      	ldrb	r3, [r4, #0]
    d00a:	4283      	cmp	r3, r0
    d00c:	d104      	bne.n	d018 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
    d00e:	2207      	movs	r2, #7
    d010:	1c60      	adds	r0, r4, #1
    d012:	f006 fb7e 	bl	13712 <memcmp>
    d016:	b108      	cbz	r0, d01c <bt_keys_find_addr+0x18>
	return NULL;
    d018:	2000      	movs	r0, #0
}
    d01a:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    d01c:	4620      	mov	r0, r4
    d01e:	e7fc      	b.n	d01a <bt_keys_find_addr+0x16>
    d020:	200011c0 	.word	0x200011c0

0000d024 <bt_keys_clear>:
{
    d024:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
    d026:	7a03      	ldrb	r3, [r0, #8]
{
    d028:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
    d02a:	075b      	lsls	r3, r3, #29
{
    d02c:	b08c      	sub	sp, #48	; 0x30
	if (keys->state & BT_KEYS_ID_ADDED) {
    d02e:	d501      	bpl.n	d034 <bt_keys_clear+0x10>
		bt_id_del(keys);
    d030:	f7f8 fbd6 	bl	57e0 <bt_id_del>
		if (keys->id) {
    d034:	4625      	mov	r5, r4
    d036:	f815 2b01 	ldrb.w	r2, [r5], #1
    d03a:	b1aa      	cbz	r2, d068 <bt_keys_clear+0x44>
			u8_to_dec(id, sizeof(id), keys->id);
    d03c:	ae02      	add	r6, sp, #8
    d03e:	2104      	movs	r1, #4
    d040:	4630      	mov	r0, r6
    d042:	f004 ffcb 	bl	11fdc <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
    d046:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
    d048:	462b      	mov	r3, r5
    d04a:	2124      	movs	r1, #36	; 0x24
    d04c:	4a07      	ldr	r2, [pc, #28]	; (d06c <bt_keys_clear+0x48>)
    d04e:	a803      	add	r0, sp, #12
    d050:	f7f7 fc98 	bl	4984 <bt_settings_encode_key>
		settings_delete(key);
    d054:	a803      	add	r0, sp, #12
    d056:	f005 fc26 	bl	128a6 <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
    d05a:	225c      	movs	r2, #92	; 0x5c
    d05c:	2100      	movs	r1, #0
    d05e:	4620      	mov	r0, r4
    d060:	f006 fb92 	bl	13788 <memset>
}
    d064:	b00c      	add	sp, #48	; 0x30
    d066:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "keys",
    d068:	9200      	str	r2, [sp, #0]
    d06a:	e7ed      	b.n	d048 <bt_keys_clear+0x24>
    d06c:	0001b0ae 	.word	0x0001b0ae

0000d070 <keys_set>:
{
    d070:	b570      	push	{r4, r5, r6, lr}
    d072:	4605      	mov	r5, r0
    d074:	4614      	mov	r4, r2
    d076:	4618      	mov	r0, r3
    d078:	b098      	sub	sp, #96	; 0x60
	if (!name) {
    d07a:	b945      	cbnz	r5, d08e <keys_set+0x1e>
		BT_ERR("Insufficient number of arguments");
    d07c:	2145      	movs	r1, #69	; 0x45
    d07e:	4830      	ldr	r0, [pc, #192]	; (d140 <keys_set+0xd0>)
    d080:	f005 f842 	bl	12108 <printk>
		return -EINVAL;
    d084:	f06f 0415 	mvn.w	r4, #21
}
    d088:	4620      	mov	r0, r4
    d08a:	b018      	add	sp, #96	; 0x60
    d08c:	bd70      	pop	{r4, r5, r6, pc}
	len = read_cb(cb_arg, val, sizeof(val));
    d08e:	2250      	movs	r2, #80	; 0x50
    d090:	a904      	add	r1, sp, #16
    d092:	47a0      	blx	r4
	if (len < 0) {
    d094:	1e04      	subs	r4, r0, #0
    d096:	da05      	bge.n	d0a4 <keys_set+0x34>
		BT_ERR("Failed to read value (err %zd)", len);
    d098:	4622      	mov	r2, r4
    d09a:	2145      	movs	r1, #69	; 0x45
    d09c:	4829      	ldr	r0, [pc, #164]	; (d144 <keys_set+0xd4>)
    d09e:	f005 f833 	bl	12108 <printk>
    d0a2:	e7ef      	b.n	d084 <keys_set+0x14>
	err = bt_settings_decode_key(name, &addr);
    d0a4:	4628      	mov	r0, r5
    d0a6:	a902      	add	r1, sp, #8
    d0a8:	f006 fbba 	bl	13820 <bt_settings_decode_key>
	if (err) {
    d0ac:	4606      	mov	r6, r0
    d0ae:	b118      	cbz	r0, d0b8 <keys_set+0x48>
		BT_ERR("Unable to decode address %s", name);
    d0b0:	462a      	mov	r2, r5
    d0b2:	2145      	movs	r1, #69	; 0x45
    d0b4:	4824      	ldr	r0, [pc, #144]	; (d148 <keys_set+0xd8>)
    d0b6:	e7f2      	b.n	d09e <keys_set+0x2e>
	settings_name_next(name, &next);
    d0b8:	4628      	mov	r0, r5
    d0ba:	a901      	add	r1, sp, #4
    d0bc:	f005 fc1a 	bl	128f4 <settings_name_next>
	if (!next) {
    d0c0:	9801      	ldr	r0, [sp, #4]
    d0c2:	b120      	cbz	r0, d0ce <keys_set+0x5e>
		id = strtol(next, NULL, 10);
    d0c4:	220a      	movs	r2, #10
    d0c6:	4631      	mov	r1, r6
    d0c8:	f006 fa6e 	bl	135a8 <strtol>
    d0cc:	b2c0      	uxtb	r0, r0
	if (!len) {
    d0ce:	b99c      	cbnz	r4, d0f8 <keys_set+0x88>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
    d0d0:	4601      	mov	r1, r0
    d0d2:	aa02      	add	r2, sp, #8
    d0d4:	203f      	movs	r0, #63	; 0x3f
    d0d6:	f7ff ff45 	bl	cf64 <bt_keys_find>
		if (keys) {
    d0da:	b120      	cbz	r0, d0e6 <keys_set+0x76>
			(void)memset(keys, 0, sizeof(*keys));
    d0dc:	225c      	movs	r2, #92	; 0x5c
    d0de:	4621      	mov	r1, r4
    d0e0:	f006 fb52 	bl	13788 <memset>
			BT_DBG("Cleared keys for %s", bt_addr_le_str(&addr));
    d0e4:	e7d0      	b.n	d088 <keys_set+0x18>
			BT_WARN("Unable to find deleted keys for %s",
    d0e6:	a802      	add	r0, sp, #8
    d0e8:	f7f7 fbac 	bl	4844 <bt_addr_le_str_real>
    d0ec:	2157      	movs	r1, #87	; 0x57
    d0ee:	4602      	mov	r2, r0
    d0f0:	4816      	ldr	r0, [pc, #88]	; (d14c <keys_set+0xdc>)
    d0f2:	f005 f809 	bl	12108 <printk>
    d0f6:	e7c7      	b.n	d088 <keys_set+0x18>
	keys = bt_keys_get_addr(id, &addr);
    d0f8:	a902      	add	r1, sp, #8
    d0fa:	f7ff fef3 	bl	cee4 <bt_keys_get_addr>
	if (!keys) {
    d0fe:	4605      	mov	r5, r0
    d100:	b950      	cbnz	r0, d118 <keys_set+0xa8>
		BT_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
    d102:	a802      	add	r0, sp, #8
    d104:	f7f7 fb9e 	bl	4844 <bt_addr_le_str_real>
    d108:	2145      	movs	r1, #69	; 0x45
    d10a:	4602      	mov	r2, r0
    d10c:	4810      	ldr	r0, [pc, #64]	; (d150 <keys_set+0xe0>)
    d10e:	f004 fffb 	bl	12108 <printk>
		return -ENOMEM;
    d112:	f06f 040b 	mvn.w	r4, #11
    d116:	e7b7      	b.n	d088 <keys_set+0x18>
	if (len != BT_KEYS_STORAGE_LEN) {
    d118:	2c50      	cmp	r4, #80	; 0x50
    d11a:	d009      	beq.n	d130 <keys_set+0xc0>
			BT_ERR("Invalid key length %zd != %zu", len,
    d11c:	2350      	movs	r3, #80	; 0x50
    d11e:	4622      	mov	r2, r4
    d120:	2145      	movs	r1, #69	; 0x45
    d122:	480c      	ldr	r0, [pc, #48]	; (d154 <keys_set+0xe4>)
    d124:	f004 fff0 	bl	12108 <printk>
			bt_keys_clear(keys);
    d128:	4628      	mov	r0, r5
    d12a:	f7ff ff7b 	bl	d024 <bt_keys_clear>
			return -EINVAL;
    d12e:	e7a9      	b.n	d084 <keys_set+0x14>
		memcpy(keys->storage_start, val, len);
    d130:	4622      	mov	r2, r4
    d132:	a904      	add	r1, sp, #16
    d134:	300c      	adds	r0, #12
    d136:	f006 fafc 	bl	13732 <memcpy>
	return 0;
    d13a:	2400      	movs	r4, #0
    d13c:	e7a4      	b.n	d088 <keys_set+0x18>
    d13e:	bf00      	nop
    d140:	00019127 	.word	0x00019127
    d144:	0001aff6 	.word	0x0001aff6
    d148:	0001a8ca 	.word	0x0001a8ca
    d14c:	0001b01a 	.word	0x0001b01a
    d150:	0001b042 	.word	0x0001b042
    d154:	0001b066 	.word	0x0001b066

0000d158 <bt_keys_store>:
{
    d158:	b570      	push	{r4, r5, r6, lr}
	if (keys->id) {
    d15a:	4605      	mov	r5, r0
    d15c:	f815 2b01 	ldrb.w	r2, [r5], #1
{
    d160:	4604      	mov	r4, r0
    d162:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
    d164:	b1da      	cbz	r2, d19e <bt_keys_store+0x46>
		u8_to_dec(id, sizeof(id), keys->id);
    d166:	ae02      	add	r6, sp, #8
    d168:	2104      	movs	r1, #4
    d16a:	4630      	mov	r0, r6
    d16c:	f004 ff36 	bl	11fdc <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
    d170:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
    d172:	462b      	mov	r3, r5
    d174:	2124      	movs	r1, #36	; 0x24
    d176:	4a0b      	ldr	r2, [pc, #44]	; (d1a4 <bt_keys_store+0x4c>)
    d178:	a803      	add	r0, sp, #12
    d17a:	f7f7 fc03 	bl	4984 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
    d17e:	f104 010c 	add.w	r1, r4, #12
    d182:	2250      	movs	r2, #80	; 0x50
    d184:	a803      	add	r0, sp, #12
    d186:	f7f4 fd7d 	bl	1c84 <settings_save_one>
	if (err) {
    d18a:	4604      	mov	r4, r0
    d18c:	b120      	cbz	r0, d198 <bt_keys_store+0x40>
		BT_ERR("Failed to save keys (err %d)", err);
    d18e:	4602      	mov	r2, r0
    d190:	2145      	movs	r1, #69	; 0x45
    d192:	4805      	ldr	r0, [pc, #20]	; (d1a8 <bt_keys_store+0x50>)
    d194:	f004 ffb8 	bl	12108 <printk>
}
    d198:	4620      	mov	r0, r4
    d19a:	b00c      	add	sp, #48	; 0x30
    d19c:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
    d19e:	9200      	str	r2, [sp, #0]
    d1a0:	e7e7      	b.n	d172 <bt_keys_store+0x1a>
    d1a2:	bf00      	nop
    d1a4:	0001b0ae 	.word	0x0001b0ae
    d1a8:	0001b089 	.word	0x0001b089

0000d1ac <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
    d1ac:	222c      	movs	r2, #44	; 0x2c
    d1ae:	4b02      	ldr	r3, [pc, #8]	; (d1b8 <net_buf_pool_get+0xc>)
    d1b0:	fb02 3000 	mla	r0, r2, r0, r3
    d1b4:	4770      	bx	lr
    d1b6:	bf00      	nop
    d1b8:	20000500 	.word	0x20000500

0000d1bc <net_buf_id>:

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	return buf - pool->__bufs;
    d1bc:	212c      	movs	r1, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    d1be:	7983      	ldrb	r3, [r0, #6]
	return buf - pool->__bufs;
    d1c0:	4a04      	ldr	r2, [pc, #16]	; (d1d4 <net_buf_id+0x18>)
    d1c2:	fb01 2303 	mla	r3, r1, r3, r2
    d1c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d1c8:	1ac0      	subs	r0, r0, r3
}
    d1ca:	4b03      	ldr	r3, [pc, #12]	; (d1d8 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
    d1cc:	10c0      	asrs	r0, r0, #3
}
    d1ce:	4358      	muls	r0, r3
    d1d0:	4770      	bx	lr
    d1d2:	bf00      	nop
    d1d4:	20000500 	.word	0x20000500
    d1d8:	aaaaaaab 	.word	0xaaaaaaab

0000d1dc <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static u8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
    d1dc:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    d1de:	242c      	movs	r4, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    d1e0:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    d1e2:	4a09      	ldr	r2, [pc, #36]	; (d208 <fixed_data_alloc+0x2c>)
    d1e4:	fb04 2303 	mla	r3, r4, r3, r2
    d1e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	*size = MIN(fixed->data_size, *size);
    d1ea:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    d1ec:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
    d1ee:	6823      	ldr	r3, [r4, #0]
    d1f0:	429a      	cmp	r2, r3
    d1f2:	bf94      	ite	ls
    d1f4:	600a      	strls	r2, [r1, #0]
    d1f6:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
    d1f8:	f7ff ffe0 	bl	d1bc <net_buf_id>
    d1fc:	e9d4 2300 	ldrd	r2, r3, [r4]
}
    d200:	fb02 3000 	mla	r0, r2, r0, r3
    d204:	bd10      	pop	{r4, pc}
    d206:	bf00      	nop
    d208:	20000500 	.word	0x20000500

0000d20c <net_buf_reset>:
{
    d20c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
    d20e:	7943      	ldrb	r3, [r0, #5]
{
    d210:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
    d212:	b14b      	cbz	r3, d228 <net_buf_reset+0x1c>
    d214:	490d      	ldr	r1, [pc, #52]	; (d24c <net_buf_reset+0x40>)
    d216:	480e      	ldr	r0, [pc, #56]	; (d250 <net_buf_reset+0x44>)
    d218:	234f      	movs	r3, #79	; 0x4f
    d21a:	4a0e      	ldr	r2, [pc, #56]	; (d254 <net_buf_reset+0x48>)
    d21c:	f004 ff74 	bl	12108 <printk>
    d220:	214f      	movs	r1, #79	; 0x4f
    d222:	480c      	ldr	r0, [pc, #48]	; (d254 <net_buf_reset+0x48>)
    d224:	f005 fa06 	bl	12634 <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
    d228:	6823      	ldr	r3, [r4, #0]
    d22a:	b14b      	cbz	r3, d240 <net_buf_reset+0x34>
    d22c:	490a      	ldr	r1, [pc, #40]	; (d258 <net_buf_reset+0x4c>)
    d22e:	4808      	ldr	r0, [pc, #32]	; (d250 <net_buf_reset+0x44>)
    d230:	2350      	movs	r3, #80	; 0x50
    d232:	4a08      	ldr	r2, [pc, #32]	; (d254 <net_buf_reset+0x48>)
    d234:	f004 ff68 	bl	12108 <printk>
    d238:	2150      	movs	r1, #80	; 0x50
    d23a:	4806      	ldr	r0, [pc, #24]	; (d254 <net_buf_reset+0x48>)
    d23c:	f005 f9fa 	bl	12634 <assert_post_action>
	buf->len  = 0U;
    d240:	2300      	movs	r3, #0
    d242:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
    d244:	6923      	ldr	r3, [r4, #16]
    d246:	60a3      	str	r3, [r4, #8]
}
    d248:	bd10      	pop	{r4, pc}
    d24a:	bf00      	nop
    d24c:	0001b0df 	.word	0x0001b0df
    d250:	00017d82 	.word	0x00017d82
    d254:	0001b0bb 	.word	0x0001b0bb
    d258:	0001b0f0 	.word	0x0001b0f0

0000d25c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
    d25c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    d260:	4605      	mov	r5, r0
    d262:	9101      	str	r1, [sp, #4]
	u64_t end = z_timeout_end_calc(timeout);
    d264:	4610      	mov	r0, r2
    d266:	4619      	mov	r1, r3
{
    d268:	4616      	mov	r6, r2
    d26a:	461f      	mov	r7, r3
	u64_t end = z_timeout_end_calc(timeout);
    d26c:	f009 fb57 	bl	1691e <z_timeout_end_calc>
    d270:	4680      	mov	r8, r0
    d272:	4689      	mov	r9, r1
	struct net_buf *buf;
	unsigned int key;

	__ASSERT_NO_MSG(pool);
    d274:	b94d      	cbnz	r5, d28a <net_buf_alloc_len+0x2e>
    d276:	494d      	ldr	r1, [pc, #308]	; (d3ac <net_buf_alloc_len+0x150>)
    d278:	484d      	ldr	r0, [pc, #308]	; (d3b0 <net_buf_alloc_len+0x154>)
    d27a:	23f1      	movs	r3, #241	; 0xf1
    d27c:	4a4d      	ldr	r2, [pc, #308]	; (d3b4 <net_buf_alloc_len+0x158>)
    d27e:	f004 ff43 	bl	12108 <printk>
    d282:	21f1      	movs	r1, #241	; 0xf1
    d284:	484b      	ldr	r0, [pc, #300]	; (d3b4 <net_buf_alloc_len+0x158>)
    d286:	f005 f9d5 	bl	12634 <assert_post_action>
	__asm__ volatile(
    d28a:	f04f 0320 	mov.w	r3, #32
    d28e:	f3ef 8a11 	mrs	sl, BASEPRI
    d292:	f383 8811 	msr	BASEPRI, r3
    d296:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
    d29a:	8beb      	ldrh	r3, [r5, #30]
    d29c:	2b00      	cmp	r3, #0
    d29e:	d055      	beq.n	d34c <net_buf_alloc_len+0xf0>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
    d2a0:	8baa      	ldrh	r2, [r5, #28]
    d2a2:	429a      	cmp	r2, r3
    d2a4:	d93e      	bls.n	d324 <net_buf_alloc_len+0xc8>
	return z_impl_k_queue_get(queue, timeout);
    d2a6:	2200      	movs	r2, #0
    d2a8:	2300      	movs	r3, #0
    d2aa:	4628      	mov	r0, r5
    d2ac:	f002 fad2 	bl	f854 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
    d2b0:	4604      	mov	r4, r0
    d2b2:	2800      	cmp	r0, #0
    d2b4:	d036      	beq.n	d324 <net_buf_alloc_len+0xc8>
	__asm__ volatile(
    d2b6:	f38a 8811 	msr	BASEPRI, sl
    d2ba:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
    d2be:	f8dd a004 	ldr.w	sl, [sp, #4]
    d2c2:	f1ba 0f00 	cmp.w	sl, #0
    d2c6:	d06d      	beq.n	d3a4 <net_buf_alloc_len+0x148>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    d2c8:	ea56 0307 	orrs.w	r3, r6, r7
    d2cc:	d010      	beq.n	d2f0 <net_buf_alloc_len+0x94>
    d2ce:	1c7b      	adds	r3, r7, #1
    d2d0:	bf08      	it	eq
    d2d2:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    d2d6:	d00b      	beq.n	d2f0 <net_buf_alloc_len+0x94>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			s64_t remaining = end - z_tick_get();
    d2d8:	f004 fa7e 	bl	117d8 <z_tick_get>
    d2dc:	ebb8 0600 	subs.w	r6, r8, r0
    d2e0:	eb69 0701 	sbc.w	r7, r9, r1
    d2e4:	2e00      	cmp	r6, #0
    d2e6:	f177 0300 	sbcs.w	r3, r7, #0
    d2ea:	bfbc      	itt	lt
    d2ec:	2600      	movlt	r6, #0
    d2ee:	2700      	movlt	r7, #0
	return pool->alloc->cb->alloc(buf, size, timeout);
    d2f0:	f04f 092c 	mov.w	r9, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    d2f4:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
    d2f6:	f8df 80c0 	ldr.w	r8, [pc, #192]	; d3b8 <net_buf_alloc_len+0x15c>
    d2fa:	4632      	mov	r2, r6
    d2fc:	fb09 8303 	mla	r3, r9, r3, r8
    d300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d302:	4620      	mov	r0, r4
    d304:	681b      	ldr	r3, [r3, #0]
    d306:	a901      	add	r1, sp, #4
    d308:	681d      	ldr	r5, [r3, #0]
    d30a:	463b      	mov	r3, r7
    d30c:	47a8      	blx	r5
    d30e:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
    d310:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
    d312:	bb58      	cbnz	r0, d36c <net_buf_alloc_len+0x110>
	k_lifo_put(&pool->free, buf);
    d314:	79a0      	ldrb	r0, [r4, #6]
    d316:	4621      	mov	r1, r4
    d318:	fb00 8009 	mla	r0, r0, r9, r8
    d31c:	f009 fa3a 	bl	16794 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
    d320:	462c      	mov	r4, r5
}
    d322:	e01f      	b.n	d364 <net_buf_alloc_len+0x108>
		uninit_count = pool->uninit_count--;
    d324:	8be8      	ldrh	r0, [r5, #30]
    d326:	1e43      	subs	r3, r0, #1
    d328:	83eb      	strh	r3, [r5, #30]
    d32a:	f38a 8811 	msr	BASEPRI, sl
    d32e:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
    d332:	2318      	movs	r3, #24
    d334:	8bac      	ldrh	r4, [r5, #28]
    d336:	1a24      	subs	r4, r4, r0
    d338:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    d33a:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
    d33e:	481e      	ldr	r0, [pc, #120]	; (d3b8 <net_buf_alloc_len+0x15c>)
    d340:	4b1e      	ldr	r3, [pc, #120]	; (d3bc <net_buf_alloc_len+0x160>)
    d342:	1a2d      	subs	r5, r5, r0
    d344:	10ad      	asrs	r5, r5, #2
    d346:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
    d348:	71a5      	strb	r5, [r4, #6]
		goto success;
    d34a:	e7b8      	b.n	d2be <net_buf_alloc_len+0x62>
    d34c:	f38a 8811 	msr	BASEPRI, sl
    d350:	f3bf 8f6f 	isb	sy
    d354:	4632      	mov	r2, r6
    d356:	463b      	mov	r3, r7
    d358:	4628      	mov	r0, r5
    d35a:	f002 fa7b 	bl	f854 <z_impl_k_queue_get>
	if (!buf) {
    d35e:	4604      	mov	r4, r0
    d360:	2800      	cmp	r0, #0
    d362:	d1ac      	bne.n	d2be <net_buf_alloc_len+0x62>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	pool->avail_count--;
	__ASSERT_NO_MSG(pool->avail_count >= 0);
#endif
	return buf;
}
    d364:	4620      	mov	r0, r4
    d366:	b002      	add	sp, #8
    d368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		NET_BUF_ASSERT(req_size <= size);
    d36c:	9b01      	ldr	r3, [sp, #4]
    d36e:	459a      	cmp	sl, r3
    d370:	d90e      	bls.n	d390 <net_buf_alloc_len+0x134>
    d372:	4913      	ldr	r1, [pc, #76]	; (d3c0 <net_buf_alloc_len+0x164>)
    d374:	f240 1351 	movw	r3, #337	; 0x151
    d378:	4a0e      	ldr	r2, [pc, #56]	; (d3b4 <net_buf_alloc_len+0x158>)
    d37a:	480d      	ldr	r0, [pc, #52]	; (d3b0 <net_buf_alloc_len+0x154>)
    d37c:	f004 fec4 	bl	12108 <printk>
    d380:	4810      	ldr	r0, [pc, #64]	; (d3c4 <net_buf_alloc_len+0x168>)
    d382:	f004 fec1 	bl	12108 <printk>
    d386:	f240 1151 	movw	r1, #337	; 0x151
    d38a:	480a      	ldr	r0, [pc, #40]	; (d3b4 <net_buf_alloc_len+0x158>)
    d38c:	f005 f952 	bl	12634 <assert_post_action>
	buf->frags = NULL;
    d390:	2300      	movs	r3, #0
    d392:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
    d394:	2301      	movs	r3, #1
    d396:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
    d398:	9b01      	ldr	r3, [sp, #4]
	net_buf_reset(buf);
    d39a:	4620      	mov	r0, r4
	buf->size  = size;
    d39c:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
    d39e:	f7ff ff35 	bl	d20c <net_buf_reset>
	return buf;
    d3a2:	e7df      	b.n	d364 <net_buf_alloc_len+0x108>
		buf->__buf = NULL;
    d3a4:	f8c4 a010 	str.w	sl, [r4, #16]
    d3a8:	e7f2      	b.n	d390 <net_buf_alloc_len+0x134>
    d3aa:	bf00      	nop
    d3ac:	0001b10a 	.word	0x0001b10a
    d3b0:	00017d82 	.word	0x00017d82
    d3b4:	0001b0bb 	.word	0x0001b0bb
    d3b8:	20000500 	.word	0x20000500
    d3bc:	ba2e8ba3 	.word	0xba2e8ba3
    d3c0:	0001b10f 	.word	0x0001b10f
    d3c4:	0001b120 	.word	0x0001b120

0000d3c8 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
    d3c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d3cc:	4606      	mov	r6, r0
    d3ce:	f002 fa41 	bl	f854 <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
    d3d2:	4605      	mov	r5, r0
    d3d4:	b150      	cbz	r0, d3ec <net_buf_get+0x24>
    d3d6:	4604      	mov	r4, r0
	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);
    d3d8:	4f12      	ldr	r7, [pc, #72]	; (d424 <net_buf_get+0x5c>)
    d3da:	f8df 804c 	ldr.w	r8, [pc, #76]	; d428 <net_buf_get+0x60>
    d3de:	f8df 904c 	ldr.w	r9, [pc, #76]	; d42c <net_buf_get+0x64>
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
    d3e2:	7963      	ldrb	r3, [r4, #5]
    d3e4:	f013 0301 	ands.w	r3, r3, #1
    d3e8:	d103      	bne.n	d3f2 <net_buf_get+0x2a>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
    d3ea:	6023      	str	r3, [r4, #0]

	return buf;
}
    d3ec:	4628      	mov	r0, r5
    d3ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d3f2:	2200      	movs	r2, #0
    d3f4:	2300      	movs	r3, #0
    d3f6:	4630      	mov	r0, r6
    d3f8:	f002 fa2c 	bl	f854 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
    d3fc:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
    d3fe:	b958      	cbnz	r0, d418 <net_buf_get+0x50>
    d400:	4641      	mov	r1, r8
    d402:	4648      	mov	r0, r9
    d404:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    d408:	463a      	mov	r2, r7
    d40a:	f004 fe7d 	bl	12108 <printk>
    d40e:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    d412:	4638      	mov	r0, r7
    d414:	f005 f90e 	bl	12634 <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
    d418:	7963      	ldrb	r3, [r4, #5]
    d41a:	f023 0301 	bic.w	r3, r3, #1
    d41e:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
    d420:	6824      	ldr	r4, [r4, #0]
    d422:	e7de      	b.n	d3e2 <net_buf_get+0x1a>
    d424:	0001b0bb 	.word	0x0001b0bb
    d428:	0001b123 	.word	0x0001b123
    d42c:	00017d82 	.word	0x00017d82

0000d430 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
    d430:	b538      	push	{r3, r4, r5, lr}
    d432:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
    d434:	4604      	mov	r4, r0
    d436:	b958      	cbnz	r0, d450 <net_buf_simple_reserve+0x20>
    d438:	490e      	ldr	r1, [pc, #56]	; (d474 <net_buf_simple_reserve+0x44>)
    d43a:	480f      	ldr	r0, [pc, #60]	; (d478 <net_buf_simple_reserve+0x48>)
    d43c:	f240 13bf 	movw	r3, #447	; 0x1bf
    d440:	4a0e      	ldr	r2, [pc, #56]	; (d47c <net_buf_simple_reserve+0x4c>)
    d442:	f004 fe61 	bl	12108 <printk>
    d446:	f240 11bf 	movw	r1, #447	; 0x1bf
    d44a:	480c      	ldr	r0, [pc, #48]	; (d47c <net_buf_simple_reserve+0x4c>)
    d44c:	f005 f8f2 	bl	12634 <assert_post_action>
	__ASSERT_NO_MSG(buf->len == 0U);
    d450:	88a3      	ldrh	r3, [r4, #4]
    d452:	b15b      	cbz	r3, d46c <net_buf_simple_reserve+0x3c>
    d454:	490a      	ldr	r1, [pc, #40]	; (d480 <net_buf_simple_reserve+0x50>)
    d456:	4808      	ldr	r0, [pc, #32]	; (d478 <net_buf_simple_reserve+0x48>)
    d458:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
    d45c:	4a07      	ldr	r2, [pc, #28]	; (d47c <net_buf_simple_reserve+0x4c>)
    d45e:	f004 fe53 	bl	12108 <printk>
    d462:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
    d466:	4805      	ldr	r0, [pc, #20]	; (d47c <net_buf_simple_reserve+0x4c>)
    d468:	f005 f8e4 	bl	12634 <assert_post_action>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
    d46c:	68a3      	ldr	r3, [r4, #8]
    d46e:	442b      	add	r3, r5
    d470:	6023      	str	r3, [r4, #0]
}
    d472:	bd38      	pop	{r3, r4, r5, pc}
    d474:	0001b1ca 	.word	0x0001b1ca
    d478:	00017d82 	.word	0x00017d82
    d47c:	0001b0bb 	.word	0x0001b0bb
    d480:	0001b12f 	.word	0x0001b12f

0000d484 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
    d484:	b538      	push	{r3, r4, r5, lr}
    d486:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
    d488:	4605      	mov	r5, r0
    d48a:	b958      	cbnz	r0, d4a4 <net_buf_put+0x20>
    d48c:	4913      	ldr	r1, [pc, #76]	; (d4dc <net_buf_put+0x58>)
    d48e:	4814      	ldr	r0, [pc, #80]	; (d4e0 <net_buf_put+0x5c>)
    d490:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
    d494:	4a13      	ldr	r2, [pc, #76]	; (d4e4 <net_buf_put+0x60>)
    d496:	f004 fe37 	bl	12108 <printk>
    d49a:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
    d49e:	4811      	ldr	r0, [pc, #68]	; (d4e4 <net_buf_put+0x60>)
    d4a0:	f005 f8c8 	bl	12634 <assert_post_action>
	__ASSERT_NO_MSG(buf);
    d4a4:	b95c      	cbnz	r4, d4be <net_buf_put+0x3a>
    d4a6:	4910      	ldr	r1, [pc, #64]	; (d4e8 <net_buf_put+0x64>)
    d4a8:	480d      	ldr	r0, [pc, #52]	; (d4e0 <net_buf_put+0x5c>)
    d4aa:	f240 13fd 	movw	r3, #509	; 0x1fd
    d4ae:	4a0d      	ldr	r2, [pc, #52]	; (d4e4 <net_buf_put+0x60>)
    d4b0:	f004 fe2a 	bl	12108 <printk>
    d4b4:	f240 11fd 	movw	r1, #509	; 0x1fd
    d4b8:	480a      	ldr	r0, [pc, #40]	; (d4e4 <net_buf_put+0x60>)
    d4ba:	f005 f8bb 	bl	12634 <assert_post_action>
{
    d4be:	4622      	mov	r2, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
    d4c0:	6811      	ldr	r1, [r2, #0]
    d4c2:	b929      	cbnz	r1, d4d0 <net_buf_put+0x4c>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
    d4c4:	4621      	mov	r1, r4
    d4c6:	4628      	mov	r0, r5
}
    d4c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_fifo_put_list(fifo, buf, tail);
    d4cc:	f002 b964 	b.w	f798 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
    d4d0:	7953      	ldrb	r3, [r2, #5]
    d4d2:	f043 0301 	orr.w	r3, r3, #1
    d4d6:	7153      	strb	r3, [r2, #5]
    d4d8:	460a      	mov	r2, r1
    d4da:	e7f1      	b.n	d4c0 <net_buf_put+0x3c>
    d4dc:	0001b13e 	.word	0x0001b13e
    d4e0:	00017d82 	.word	0x00017d82
    d4e4:	0001b0bb 	.word	0x0001b0bb
    d4e8:	0001b1ca 	.word	0x0001b1ca

0000d4ec <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    d4ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
    d4f0:	4605      	mov	r5, r0
    d4f2:	b328      	cbz	r0, d540 <net_buf_unref+0x54>
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
    d4f4:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
    d4f6:	f04f 082c 	mov.w	r8, #44	; 0x2c
    d4fa:	4e1b      	ldr	r6, [pc, #108]	; (d568 <net_buf_unref+0x7c>)
		struct net_buf *frags = buf->frags;
    d4fc:	462c      	mov	r4, r5
		if (--buf->ref > 0) {
    d4fe:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
    d500:	682d      	ldr	r5, [r5, #0]
		if (--buf->ref > 0) {
    d502:	3b01      	subs	r3, #1
    d504:	b2db      	uxtb	r3, r3
    d506:	7123      	strb	r3, [r4, #4]
    d508:	b9c3      	cbnz	r3, d53c <net_buf_unref+0x50>
		if (buf->__buf) {
    d50a:	6921      	ldr	r1, [r4, #16]
    d50c:	b159      	cbz	r1, d526 <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
    d50e:	7963      	ldrb	r3, [r4, #5]
    d510:	079b      	lsls	r3, r3, #30
    d512:	d407      	bmi.n	d524 <net_buf_unref+0x38>
	pool->alloc->cb->unref(buf, data);
    d514:	79a3      	ldrb	r3, [r4, #6]
    d516:	4620      	mov	r0, r4
    d518:	fb08 6303 	mla	r3, r8, r3, r6
    d51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d51e:	681b      	ldr	r3, [r3, #0]
    d520:	689b      	ldr	r3, [r3, #8]
    d522:	4798      	blx	r3
			buf->__buf = NULL;
    d524:	6127      	str	r7, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
    d526:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
    d528:	60a7      	str	r7, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		__ASSERT_NO_MSG(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
    d52a:	fb08 6300 	mla	r3, r8, r0, r6
    d52e:	6a1b      	ldr	r3, [r3, #32]
		buf->frags = NULL;
    d530:	6027      	str	r7, [r4, #0]
		if (pool->destroy) {
    d532:	b19b      	cbz	r3, d55c <net_buf_unref+0x70>
			pool->destroy(buf);
    d534:	4620      	mov	r0, r4
    d536:	4798      	blx	r3
	while (buf) {
    d538:	2d00      	cmp	r5, #0
    d53a:	d1df      	bne.n	d4fc <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
    d53c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
    d540:	490a      	ldr	r1, [pc, #40]	; (d56c <net_buf_unref+0x80>)
    d542:	480b      	ldr	r0, [pc, #44]	; (d570 <net_buf_unref+0x84>)
    d544:	f44f 7303 	mov.w	r3, #524	; 0x20c
    d548:	4a0a      	ldr	r2, [pc, #40]	; (d574 <net_buf_unref+0x88>)
    d54a:	f004 fddd 	bl	12108 <printk>
}
    d54e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
    d552:	f44f 7103 	mov.w	r1, #524	; 0x20c
    d556:	4807      	ldr	r0, [pc, #28]	; (d574 <net_buf_unref+0x88>)
    d558:	f005 b86c 	b.w	12634 <assert_post_action>
	k_lifo_put(&pool->free, buf);
    d55c:	4621      	mov	r1, r4
    d55e:	fb00 6008 	mla	r0, r0, r8, r6
    d562:	f009 f917 	bl	16794 <k_queue_prepend>
}
    d566:	e7e7      	b.n	d538 <net_buf_unref+0x4c>
    d568:	20000500 	.word	0x20000500
    d56c:	0001b1ca 	.word	0x0001b1ca
    d570:	00017d82 	.word	0x00017d82
    d574:	0001b0bb 	.word	0x0001b0bb

0000d578 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
    d578:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
    d57a:	4604      	mov	r4, r0
    d57c:	b958      	cbnz	r0, d596 <net_buf_ref+0x1e>
    d57e:	4908      	ldr	r1, [pc, #32]	; (d5a0 <net_buf_ref+0x28>)
    d580:	4808      	ldr	r0, [pc, #32]	; (d5a4 <net_buf_ref+0x2c>)
    d582:	f240 233b 	movw	r3, #571	; 0x23b
    d586:	4a08      	ldr	r2, [pc, #32]	; (d5a8 <net_buf_ref+0x30>)
    d588:	f004 fdbe 	bl	12108 <printk>
    d58c:	f240 213b 	movw	r1, #571	; 0x23b
    d590:	4805      	ldr	r0, [pc, #20]	; (d5a8 <net_buf_ref+0x30>)
    d592:	f005 f84f 	bl	12634 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
    d596:	7923      	ldrb	r3, [r4, #4]
	return buf;
}
    d598:	4620      	mov	r0, r4
	buf->ref++;
    d59a:	3301      	adds	r3, #1
    d59c:	7123      	strb	r3, [r4, #4]
}
    d59e:	bd10      	pop	{r4, pc}
    d5a0:	0001b1ca 	.word	0x0001b1ca
    d5a4:	00017d82 	.word	0x00017d82
    d5a8:	0001b0bb 	.word	0x0001b0bb

0000d5ac <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
    d5ac:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
    d5ae:	4604      	mov	r4, r0
    d5b0:	b958      	cbnz	r0, d5ca <net_buf_frag_last+0x1e>
    d5b2:	4908      	ldr	r1, [pc, #32]	; (d5d4 <net_buf_frag_last+0x28>)
    d5b4:	4808      	ldr	r0, [pc, #32]	; (d5d8 <net_buf_frag_last+0x2c>)
    d5b6:	f44f 731e 	mov.w	r3, #632	; 0x278
    d5ba:	4a08      	ldr	r2, [pc, #32]	; (d5dc <net_buf_frag_last+0x30>)
    d5bc:	f004 fda4 	bl	12108 <printk>
    d5c0:	f44f 711e 	mov.w	r1, #632	; 0x278
    d5c4:	4805      	ldr	r0, [pc, #20]	; (d5dc <net_buf_frag_last+0x30>)
    d5c6:	f005 f835 	bl	12634 <assert_post_action>

	while (buf->frags) {
    d5ca:	4620      	mov	r0, r4
    d5cc:	6824      	ldr	r4, [r4, #0]
    d5ce:	2c00      	cmp	r4, #0
    d5d0:	d1fb      	bne.n	d5ca <net_buf_frag_last+0x1e>
		buf = buf->frags;
	}

	return buf;
}
    d5d2:	bd10      	pop	{r4, pc}
    d5d4:	0001b1ca 	.word	0x0001b1ca
    d5d8:	00017d82 	.word	0x00017d82
    d5dc:	0001b0bb 	.word	0x0001b0bb

0000d5e0 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
    d5e0:	b538      	push	{r3, r4, r5, lr}
    d5e2:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
    d5e4:	4604      	mov	r4, r0
    d5e6:	b958      	cbnz	r0, d600 <net_buf_frag_insert+0x20>
    d5e8:	4910      	ldr	r1, [pc, #64]	; (d62c <net_buf_frag_insert+0x4c>)
    d5ea:	4811      	ldr	r0, [pc, #68]	; (d630 <net_buf_frag_insert+0x50>)
    d5ec:	f240 2383 	movw	r3, #643	; 0x283
    d5f0:	4a10      	ldr	r2, [pc, #64]	; (d634 <net_buf_frag_insert+0x54>)
    d5f2:	f004 fd89 	bl	12108 <printk>
    d5f6:	f240 2183 	movw	r1, #643	; 0x283
    d5fa:	480e      	ldr	r0, [pc, #56]	; (d634 <net_buf_frag_insert+0x54>)
    d5fc:	f005 f81a 	bl	12634 <assert_post_action>
	__ASSERT_NO_MSG(frag);
    d600:	b95d      	cbnz	r5, d61a <net_buf_frag_insert+0x3a>
    d602:	490d      	ldr	r1, [pc, #52]	; (d638 <net_buf_frag_insert+0x58>)
    d604:	480a      	ldr	r0, [pc, #40]	; (d630 <net_buf_frag_insert+0x50>)
    d606:	f44f 7321 	mov.w	r3, #644	; 0x284
    d60a:	4a0a      	ldr	r2, [pc, #40]	; (d634 <net_buf_frag_insert+0x54>)
    d60c:	f004 fd7c 	bl	12108 <printk>
    d610:	f44f 7121 	mov.w	r1, #644	; 0x284
    d614:	4807      	ldr	r0, [pc, #28]	; (d634 <net_buf_frag_insert+0x54>)
    d616:	f005 f80d 	bl	12634 <assert_post_action>

	if (parent->frags) {
    d61a:	6823      	ldr	r3, [r4, #0]
    d61c:	b123      	cbz	r3, d628 <net_buf_frag_insert+0x48>
		net_buf_frag_last(frag)->frags = parent->frags;
    d61e:	4628      	mov	r0, r5
    d620:	f7ff ffc4 	bl	d5ac <net_buf_frag_last>
    d624:	6823      	ldr	r3, [r4, #0]
    d626:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
    d628:	6025      	str	r5, [r4, #0]
}
    d62a:	bd38      	pop	{r3, r4, r5, pc}
    d62c:	0001b143 	.word	0x0001b143
    d630:	00017d82 	.word	0x00017d82
    d634:	0001b0bb 	.word	0x0001b0bb
    d638:	0001b169 	.word	0x0001b169

0000d63c <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
    d63c:	b538      	push	{r3, r4, r5, lr}
    d63e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frag);
    d640:	460d      	mov	r5, r1
    d642:	b959      	cbnz	r1, d65c <net_buf_frag_add+0x20>
    d644:	490c      	ldr	r1, [pc, #48]	; (d678 <net_buf_frag_add+0x3c>)
    d646:	480d      	ldr	r0, [pc, #52]	; (d67c <net_buf_frag_add+0x40>)
    d648:	f240 238f 	movw	r3, #655	; 0x28f
    d64c:	4a0c      	ldr	r2, [pc, #48]	; (d680 <net_buf_frag_add+0x44>)
    d64e:	f004 fd5b 	bl	12108 <printk>
    d652:	f240 218f 	movw	r1, #655	; 0x28f
    d656:	480a      	ldr	r0, [pc, #40]	; (d680 <net_buf_frag_add+0x44>)
    d658:	f004 ffec 	bl	12634 <assert_post_action>

	if (!head) {
    d65c:	b924      	cbnz	r4, d668 <net_buf_frag_add+0x2c>
		return net_buf_ref(frag);
    d65e:	4628      	mov	r0, r5
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
    d660:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
    d664:	f7ff bf88 	b.w	d578 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
    d668:	4620      	mov	r0, r4
    d66a:	f7ff ff9f 	bl	d5ac <net_buf_frag_last>
    d66e:	4629      	mov	r1, r5
    d670:	f7ff ffb6 	bl	d5e0 <net_buf_frag_insert>
}
    d674:	4620      	mov	r0, r4
    d676:	bd38      	pop	{r3, r4, r5, pc}
    d678:	0001b169 	.word	0x0001b169
    d67c:	00017d82 	.word	0x00017d82
    d680:	0001b0bb 	.word	0x0001b0bb

0000d684 <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
    d684:	b538      	push	{r3, r4, r5, lr}
    d686:	4605      	mov	r5, r0
	struct net_buf *next_frag;

	__ASSERT_NO_MSG(frag);
    d688:	460c      	mov	r4, r1
    d68a:	b959      	cbnz	r1, d6a4 <net_buf_frag_del+0x20>
    d68c:	4919      	ldr	r1, [pc, #100]	; (d6f4 <net_buf_frag_del+0x70>)
    d68e:	481a      	ldr	r0, [pc, #104]	; (d6f8 <net_buf_frag_del+0x74>)
    d690:	f44f 7329 	mov.w	r3, #676	; 0x2a4
    d694:	4a19      	ldr	r2, [pc, #100]	; (d6fc <net_buf_frag_del+0x78>)
    d696:	f004 fd37 	bl	12108 <printk>
    d69a:	f44f 7129 	mov.w	r1, #676	; 0x2a4
    d69e:	4817      	ldr	r0, [pc, #92]	; (d6fc <net_buf_frag_del+0x78>)
    d6a0:	f004 ffc8 	bl	12634 <assert_post_action>

	if (parent) {
    d6a4:	b1f5      	cbz	r5, d6e4 <net_buf_frag_del+0x60>
		__ASSERT_NO_MSG(parent->frags);
    d6a6:	682b      	ldr	r3, [r5, #0]
    d6a8:	b95b      	cbnz	r3, d6c2 <net_buf_frag_del+0x3e>
    d6aa:	4915      	ldr	r1, [pc, #84]	; (d700 <net_buf_frag_del+0x7c>)
    d6ac:	4812      	ldr	r0, [pc, #72]	; (d6f8 <net_buf_frag_del+0x74>)
    d6ae:	f240 23a7 	movw	r3, #679	; 0x2a7
    d6b2:	4a12      	ldr	r2, [pc, #72]	; (d6fc <net_buf_frag_del+0x78>)
    d6b4:	f004 fd28 	bl	12108 <printk>
    d6b8:	f240 21a7 	movw	r1, #679	; 0x2a7
    d6bc:	480f      	ldr	r0, [pc, #60]	; (d6fc <net_buf_frag_del+0x78>)
    d6be:	f004 ffb9 	bl	12634 <assert_post_action>
		__ASSERT_NO_MSG(parent->frags == frag);
    d6c2:	682b      	ldr	r3, [r5, #0]
    d6c4:	42a3      	cmp	r3, r4
    d6c6:	d00b      	beq.n	d6e0 <net_buf_frag_del+0x5c>
    d6c8:	490e      	ldr	r1, [pc, #56]	; (d704 <net_buf_frag_del+0x80>)
    d6ca:	480b      	ldr	r0, [pc, #44]	; (d6f8 <net_buf_frag_del+0x74>)
    d6cc:	f44f 732a 	mov.w	r3, #680	; 0x2a8
    d6d0:	4a0a      	ldr	r2, [pc, #40]	; (d6fc <net_buf_frag_del+0x78>)
    d6d2:	f004 fd19 	bl	12108 <printk>
    d6d6:	f44f 712a 	mov.w	r1, #680	; 0x2a8
    d6da:	4808      	ldr	r0, [pc, #32]	; (d6fc <net_buf_frag_del+0x78>)
    d6dc:	f004 ffaa 	bl	12634 <assert_post_action>
		parent->frags = frag->frags;
    d6e0:	6823      	ldr	r3, [r4, #0]
    d6e2:	602b      	str	r3, [r5, #0]
	}

	next_frag = frag->frags;

	frag->frags = NULL;
    d6e4:	2300      	movs	r3, #0
	next_frag = frag->frags;
    d6e6:	6825      	ldr	r5, [r4, #0]

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
    d6e8:	4620      	mov	r0, r4
	frag->frags = NULL;
    d6ea:	6023      	str	r3, [r4, #0]
	net_buf_unref(frag);
    d6ec:	f7ff fefe 	bl	d4ec <net_buf_unref>
#endif

	return next_frag;
}
    d6f0:	4628      	mov	r0, r5
    d6f2:	bd38      	pop	{r3, r4, r5, pc}
    d6f4:	0001b169 	.word	0x0001b169
    d6f8:	00017d82 	.word	0x00017d82
    d6fc:	0001b0bb 	.word	0x0001b0bb
    d700:	0001b14a 	.word	0x0001b14a
    d704:	0001b158 	.word	0x0001b158

0000d708 <net_buf_simple_push>:

	sys_put_be64(val, net_buf_simple_add(buf, sizeof(val)));
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
    d708:	b538      	push	{r3, r4, r5, lr}
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
    d70a:	6882      	ldr	r2, [r0, #8]
    d70c:	6803      	ldr	r3, [r0, #0]
{
    d70e:	4604      	mov	r4, r0
	return buf->data - buf->__buf;
    d710:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
    d712:	4299      	cmp	r1, r3
{
    d714:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
    d716:	d90b      	bls.n	d730 <net_buf_simple_push+0x28>
    d718:	4909      	ldr	r1, [pc, #36]	; (d740 <net_buf_simple_push+0x38>)
    d71a:	480a      	ldr	r0, [pc, #40]	; (d744 <net_buf_simple_push+0x3c>)
    d71c:	f240 337d 	movw	r3, #893	; 0x37d
    d720:	4a09      	ldr	r2, [pc, #36]	; (d748 <net_buf_simple_push+0x40>)
    d722:	f004 fcf1 	bl	12108 <printk>
    d726:	f240 317d 	movw	r1, #893	; 0x37d
    d72a:	4807      	ldr	r0, [pc, #28]	; (d748 <net_buf_simple_push+0x40>)
    d72c:	f004 ff82 	bl	12634 <assert_post_action>
	buf->data -= len;
    d730:	6820      	ldr	r0, [r4, #0]
	buf->len += len;
    d732:	88a1      	ldrh	r1, [r4, #4]
	buf->data -= len;
    d734:	1b40      	subs	r0, r0, r5
	buf->len += len;
    d736:	440d      	add	r5, r1
	buf->data -= len;
    d738:	6020      	str	r0, [r4, #0]
	buf->len += len;
    d73a:	80a5      	strh	r5, [r4, #4]
}
    d73c:	bd38      	pop	{r3, r4, r5, pc}
    d73e:	bf00      	nop
    d740:	0001b16e 	.word	0x0001b16e
    d744:	00017d82 	.word	0x00017d82
    d748:	0001b0bb 	.word	0x0001b0bb

0000d74c <net_buf_simple_pull>:
{
    d74c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf->len >= len);
    d74e:	8883      	ldrh	r3, [r0, #4]
{
    d750:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->len >= len);
    d752:	428b      	cmp	r3, r1
{
    d754:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
    d756:	d20b      	bcs.n	d770 <net_buf_simple_pull+0x24>
    d758:	4909      	ldr	r1, [pc, #36]	; (d780 <net_buf_simple_pull+0x34>)
    d75a:	480a      	ldr	r0, [pc, #40]	; (d784 <net_buf_simple_pull+0x38>)
    d75c:	f240 33d5 	movw	r3, #981	; 0x3d5
    d760:	4a09      	ldr	r2, [pc, #36]	; (d788 <net_buf_simple_pull+0x3c>)
    d762:	f004 fcd1 	bl	12108 <printk>
    d766:	f240 31d5 	movw	r1, #981	; 0x3d5
    d76a:	4807      	ldr	r0, [pc, #28]	; (d788 <net_buf_simple_pull+0x3c>)
    d76c:	f004 ff62 	bl	12634 <assert_post_action>
	buf->len -= len;
    d770:	88a3      	ldrh	r3, [r4, #4]
	return buf->data += len;
    d772:	6820      	ldr	r0, [r4, #0]
	buf->len -= len;
    d774:	1b5b      	subs	r3, r3, r5
	return buf->data += len;
    d776:	4428      	add	r0, r5
	buf->len -= len;
    d778:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
    d77a:	6020      	str	r0, [r4, #0]
}
    d77c:	bd38      	pop	{r3, r4, r5, pc}
    d77e:	bf00      	nop
    d780:	0001b192 	.word	0x0001b192
    d784:	00017d82 	.word	0x00017d82
    d788:	0001b0bb 	.word	0x0001b0bb

0000d78c <net_buf_simple_pull_mem>:
	__ASSERT_NO_MSG(buf->len >= len);
    d78c:	8883      	ldrh	r3, [r0, #4]
{
    d78e:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(buf->len >= len);
    d790:	428b      	cmp	r3, r1
{
    d792:	4604      	mov	r4, r0
    d794:	460d      	mov	r5, r1
	void *data = buf->data;
    d796:	6806      	ldr	r6, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
    d798:	d20b      	bcs.n	d7b2 <net_buf_simple_pull_mem+0x26>
    d79a:	490a      	ldr	r1, [pc, #40]	; (d7c4 <net_buf_simple_pull_mem+0x38>)
    d79c:	480a      	ldr	r0, [pc, #40]	; (d7c8 <net_buf_simple_pull_mem+0x3c>)
    d79e:	f240 33e1 	movw	r3, #993	; 0x3e1
    d7a2:	4a0a      	ldr	r2, [pc, #40]	; (d7cc <net_buf_simple_pull_mem+0x40>)
    d7a4:	f004 fcb0 	bl	12108 <printk>
    d7a8:	f240 31e1 	movw	r1, #993	; 0x3e1
    d7ac:	4807      	ldr	r0, [pc, #28]	; (d7cc <net_buf_simple_pull_mem+0x40>)
    d7ae:	f004 ff41 	bl	12634 <assert_post_action>
	buf->len -= len;
    d7b2:	88a3      	ldrh	r3, [r4, #4]
	buf->data += len;
    d7b4:	6821      	ldr	r1, [r4, #0]
	buf->len -= len;
    d7b6:	1b5b      	subs	r3, r3, r5
	buf->data += len;
    d7b8:	4429      	add	r1, r5
}
    d7ba:	4630      	mov	r0, r6
	buf->len -= len;
    d7bc:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
    d7be:	6021      	str	r1, [r4, #0]
}
    d7c0:	bd70      	pop	{r4, r5, r6, pc}
    d7c2:	bf00      	nop
    d7c4:	0001b192 	.word	0x0001b192
    d7c8:	00017d82 	.word	0x00017d82
    d7cc:	0001b0bb 	.word	0x0001b0bb

0000d7d0 <net_buf_simple_add>:
{
    d7d0:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
    d7d2:	6803      	ldr	r3, [r0, #0]
    d7d4:	8886      	ldrh	r6, [r0, #4]
    d7d6:	4604      	mov	r4, r0
    d7d8:	460d      	mov	r5, r1
    d7da:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
    d7dc:	f007 fffe 	bl	157dc <net_buf_simple_tailroom>
    d7e0:	4288      	cmp	r0, r1
    d7e2:	d20b      	bcs.n	d7fc <net_buf_simple_add+0x2c>
    d7e4:	4908      	ldr	r1, [pc, #32]	; (d808 <net_buf_simple_add+0x38>)
    d7e6:	4809      	ldr	r0, [pc, #36]	; (d80c <net_buf_simple_add+0x3c>)
    d7e8:	f240 3319 	movw	r3, #793	; 0x319
    d7ec:	4a08      	ldr	r2, [pc, #32]	; (d810 <net_buf_simple_add+0x40>)
    d7ee:	f004 fc8b 	bl	12108 <printk>
    d7f2:	f240 3119 	movw	r1, #793	; 0x319
    d7f6:	4806      	ldr	r0, [pc, #24]	; (d810 <net_buf_simple_add+0x40>)
    d7f8:	f004 ff1c 	bl	12634 <assert_post_action>
	buf->len += len;
    d7fc:	88a1      	ldrh	r1, [r4, #4]
}
    d7fe:	4630      	mov	r0, r6
	buf->len += len;
    d800:	440d      	add	r5, r1
    d802:	80a5      	strh	r5, [r4, #4]
}
    d804:	bd70      	pop	{r4, r5, r6, pc}
    d806:	bf00      	nop
    d808:	0001b1a2 	.word	0x0001b1a2
    d80c:	00017d82 	.word	0x00017d82
    d810:	0001b0bb 	.word	0x0001b0bb

0000d814 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    d814:	6802      	ldr	r2, [r0, #0]
{
    d816:	b510      	push	{r4, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
    d818:	0953      	lsrs	r3, r2, #5
{
    d81a:	4604      	mov	r4, r0
    switch (port)
    d81c:	d01e      	beq.n	d85c <nrf_gpio_pin_port_decode+0x48>
    d81e:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    d820:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d824:	bf18      	it	ne
    d826:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
    d828:	f002 021f 	and.w	r2, r2, #31

    return (mask & (1UL << pin_number)) ? true : false;
    d82c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    d82e:	07db      	lsls	r3, r3, #31
    d830:	d40b      	bmi.n	d84a <nrf_gpio_pin_port_decode+0x36>
    d832:	490c      	ldr	r1, [pc, #48]	; (d864 <nrf_gpio_pin_port_decode+0x50>)
    d834:	480c      	ldr	r0, [pc, #48]	; (d868 <nrf_gpio_pin_port_decode+0x54>)
    d836:	f240 230d 	movw	r3, #525	; 0x20d
    d83a:	4a0c      	ldr	r2, [pc, #48]	; (d86c <nrf_gpio_pin_port_decode+0x58>)
    d83c:	f004 fc64 	bl	12108 <printk>
    d840:	f240 210d 	movw	r1, #525	; 0x20d
    d844:	4809      	ldr	r0, [pc, #36]	; (d86c <nrf_gpio_pin_port_decode+0x58>)
    d846:	f004 fef5 	bl	12634 <assert_post_action>
    if (*p_pin < P0_PIN_NUM)
    d84a:	6823      	ldr	r3, [r4, #0]
    d84c:	2b1f      	cmp	r3, #31
        *p_pin = *p_pin & 0x1F;
    d84e:	bf85      	ittet	hi
    d850:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
    d854:	4806      	ldrhi	r0, [pc, #24]	; (d870 <nrf_gpio_pin_port_decode+0x5c>)
        return NRF_P0;
    d856:	4807      	ldrls	r0, [pc, #28]	; (d874 <nrf_gpio_pin_port_decode+0x60>)
        *p_pin = *p_pin & 0x1F;
    d858:	6023      	strhi	r3, [r4, #0]
}
    d85a:	bd10      	pop	{r4, pc}
    switch (port)
    d85c:	f04f 33ff 	mov.w	r3, #4294967295
    d860:	e7e2      	b.n	d828 <nrf_gpio_pin_port_decode+0x14>
    d862:	bf00      	nop
    d864:	0001b201 	.word	0x0001b201
    d868:	00017d82 	.word	0x00017d82
    d86c:	0001b1ce 	.word	0x0001b1ce
    d870:	50842800 	.word	0x50842800
    d874:	50842500 	.word	0x50842500

0000d878 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    d878:	b570      	push	{r4, r5, r6, lr}
    d87a:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    d87c:	460c      	mov	r4, r1
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    d87e:	68c5      	ldr	r5, [r0, #12]
    d880:	b961      	cbnz	r1, d89c <gpio_nrfx_manage_callback+0x24>
    d882:	4922      	ldr	r1, [pc, #136]	; (d90c <gpio_nrfx_manage_callback+0x94>)
    d884:	2324      	movs	r3, #36	; 0x24
    d886:	4a22      	ldr	r2, [pc, #136]	; (d910 <gpio_nrfx_manage_callback+0x98>)
    d888:	4822      	ldr	r0, [pc, #136]	; (d914 <gpio_nrfx_manage_callback+0x9c>)
    d88a:	f004 fc3d 	bl	12108 <printk>
    d88e:	4822      	ldr	r0, [pc, #136]	; (d918 <gpio_nrfx_manage_callback+0xa0>)
    d890:	f004 fc3a 	bl	12108 <printk>
    d894:	2124      	movs	r1, #36	; 0x24
    d896:	481e      	ldr	r0, [pc, #120]	; (d910 <gpio_nrfx_manage_callback+0x98>)
    d898:	f004 fecc 	bl	12634 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    d89c:	6863      	ldr	r3, [r4, #4]
    d89e:	b963      	cbnz	r3, d8ba <gpio_nrfx_manage_callback+0x42>
    d8a0:	491e      	ldr	r1, [pc, #120]	; (d91c <gpio_nrfx_manage_callback+0xa4>)
    d8a2:	2325      	movs	r3, #37	; 0x25
    d8a4:	4a1a      	ldr	r2, [pc, #104]	; (d910 <gpio_nrfx_manage_callback+0x98>)
    d8a6:	481b      	ldr	r0, [pc, #108]	; (d914 <gpio_nrfx_manage_callback+0x9c>)
    d8a8:	f004 fc2e 	bl	12108 <printk>
    d8ac:	481c      	ldr	r0, [pc, #112]	; (d920 <gpio_nrfx_manage_callback+0xa8>)
    d8ae:	f004 fc2b 	bl	12108 <printk>
    d8b2:	2125      	movs	r1, #37	; 0x25
    d8b4:	4816      	ldr	r0, [pc, #88]	; (d910 <gpio_nrfx_manage_callback+0x98>)
    d8b6:	f004 febd 	bl	12634 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
    d8ba:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    d8bc:	b15b      	cbz	r3, d8d6 <gpio_nrfx_manage_callback+0x5e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    d8be:	2200      	movs	r2, #0
    d8c0:	429c      	cmp	r4, r3
    d8c2:	d113      	bne.n	d8ec <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
    d8c4:	6823      	ldr	r3, [r4, #0]
    d8c6:	b95a      	cbnz	r2, d8e0 <gpio_nrfx_manage_callback+0x68>
    d8c8:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
    d8ca:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    d8cc:	4294      	cmp	r4, r2
    d8ce:	d100      	bne.n	d8d2 <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
    d8d0:	60ab      	str	r3, [r5, #8]
	parent->next = child;
    d8d2:	2300      	movs	r3, #0
    d8d4:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    d8d6:	b976      	cbnz	r6, d8f6 <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    d8d8:	2000      	movs	r0, #0
				     callback, set);
}
    d8da:	bd70      	pop	{r4, r5, r6, pc}
    d8dc:	460b      	mov	r3, r1
    d8de:	e7ef      	b.n	d8c0 <gpio_nrfx_manage_callback+0x48>
    d8e0:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    d8e2:	68ab      	ldr	r3, [r5, #8]
    d8e4:	429c      	cmp	r4, r3
	list->tail = node;
    d8e6:	bf08      	it	eq
    d8e8:	60aa      	streq	r2, [r5, #8]
}
    d8ea:	e7f2      	b.n	d8d2 <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    d8ec:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    d8ee:	461a      	mov	r2, r3
    d8f0:	2900      	cmp	r1, #0
    d8f2:	d1f3      	bne.n	d8dc <gpio_nrfx_manage_callback+0x64>
			if (!set) {
    d8f4:	b13e      	cbz	r6, d906 <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
    d8f6:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    d8f8:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    d8fa:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
    d8fc:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    d8fe:	2800      	cmp	r0, #0
    d900:	d1ea      	bne.n	d8d8 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    d902:	60ac      	str	r4, [r5, #8]
}
    d904:	e7e9      	b.n	d8da <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
    d906:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    d90a:	e7e6      	b.n	d8da <gpio_nrfx_manage_callback+0x62>
    d90c:	0001b251 	.word	0x0001b251
    d910:	0001b224 	.word	0x0001b224
    d914:	00017d82 	.word	0x00017d82
    d918:	0001b25a 	.word	0x0001b25a
    d91c:	0001b269 	.word	0x0001b269
    d920:	0001b27b 	.word	0x0001b27b

0000d924 <fire_callbacks>:

	return out;
}

static inline void fire_callbacks(struct device *port, u32_t pins)
{
    d924:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct gpio_nrfx_data *data = get_port_data(port);
    d928:	f8d0 800c 	ldr.w	r8, [r0, #12]
{
    d92c:	4606      	mov	r6, r0
	/* Instead of calling the common gpio_fire_callbacks() function,
	 * iterate the list of callbacks locally, to be able to perform
	 * additional masking of the pins and to call handlers only for
	 * the currently enabled callbacks.
	 */
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    d92e:	f8d8 4004 	ldr.w	r4, [r8, #4]
{
    d932:	460f      	mov	r7, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    d934:	b374      	cbz	r4, d994 <fire_callbacks+0x70>
	return node->next;
    d936:	6825      	ldr	r5, [r4, #0]
		/* Check currently enabled callbacks (data->int_en) in each
		 * iteration, as some callbacks may get disabled also in any
		 * of the handlers called here.
		 */
		if ((cb->pin_mask & pins) & data->int_en) {
			__ASSERT(cb->handler, "No callback handler!");
    d938:	f8df 9060 	ldr.w	r9, [pc, #96]	; d99c <fire_callbacks+0x78>
    d93c:	2d00      	cmp	r5, #0
    d93e:	bf38      	it	cc
    d940:	2500      	movcc	r5, #0
    d942:	f8df a05c 	ldr.w	sl, [pc, #92]	; d9a0 <fire_callbacks+0x7c>
    d946:	f8df b05c 	ldr.w	fp, [pc, #92]	; d9a4 <fire_callbacks+0x80>
		if ((cb->pin_mask & pins) & data->int_en) {
    d94a:	f8d8 3010 	ldr.w	r3, [r8, #16]
    d94e:	68a2      	ldr	r2, [r4, #8]
    d950:	403b      	ands	r3, r7
    d952:	4213      	tst	r3, r2
    d954:	d016      	beq.n	d984 <fire_callbacks+0x60>
			__ASSERT(cb->handler, "No callback handler!");
    d956:	6863      	ldr	r3, [r4, #4]
    d958:	b973      	cbnz	r3, d978 <fire_callbacks+0x54>
    d95a:	4651      	mov	r1, sl
    d95c:	f240 13a7 	movw	r3, #423	; 0x1a7
    d960:	464a      	mov	r2, r9
    d962:	4658      	mov	r0, fp
    d964:	f004 fbd0 	bl	12108 <printk>
    d968:	480b      	ldr	r0, [pc, #44]	; (d998 <fire_callbacks+0x74>)
    d96a:	f004 fbcd 	bl	12108 <printk>
    d96e:	f240 11a7 	movw	r1, #423	; 0x1a7
    d972:	4648      	mov	r0, r9
    d974:	f004 fe5e 	bl	12634 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    d978:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    d97c:	4621      	mov	r1, r4
    d97e:	4630      	mov	r0, r6
    d980:	403a      	ands	r2, r7
    d982:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    d984:	b135      	cbz	r5, d994 <fire_callbacks+0x70>
    d986:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    d988:	462c      	mov	r4, r5
    d98a:	2b00      	cmp	r3, #0
    d98c:	bf38      	it	cc
    d98e:	2300      	movcc	r3, #0
    d990:	461d      	mov	r5, r3
    d992:	e7da      	b.n	d94a <fire_callbacks+0x26>
		}
	}
}
    d994:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d998:	0001b27b 	.word	0x0001b27b
    d99c:	0001b292 	.word	0x0001b292
    d9a0:	0001b2be 	.word	0x0001b2be
    d9a4:	00017d82 	.word	0x00017d82

0000d9a8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(struct device *port)
{
    d9a8:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    d9aa:	4b09      	ldr	r3, [pc, #36]	; (d9d0 <gpio_nrfx_init+0x28>)
    d9ac:	781a      	ldrb	r2, [r3, #0]
    d9ae:	b96a      	cbnz	r2, d9cc <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    d9b0:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    d9b2:	200d      	movs	r0, #13
		gpio_initialized = true;
    d9b4:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    d9b6:	2105      	movs	r1, #5
    d9b8:	f7f6 f93a 	bl	3c30 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    d9bc:	200d      	movs	r0, #13
    d9be:	f7f6 f927 	bl	3c10 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    d9c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    d9c6:	4b03      	ldr	r3, [pc, #12]	; (d9d4 <gpio_nrfx_init+0x2c>)
    d9c8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    d9cc:	2000      	movs	r0, #0
    d9ce:	bd08      	pop	{r3, pc}
    d9d0:	20001f8b 	.word	0x20001f8b
    d9d4:	5000d000 	.word	0x5000d000

0000d9d8 <gpiote_pin_int_cfg>:
{
    d9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    d9da:	6843      	ldr	r3, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
    d9dc:	68c7      	ldr	r7, [r0, #12]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    d9de:	7a18      	ldrb	r0, [r3, #8]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    d9e0:	2300      	movs	r3, #0
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    d9e2:	f001 051f 	and.w	r5, r1, #31
{
    d9e6:	460e      	mov	r6, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    d9e8:	4946      	ldr	r1, [pc, #280]	; (db04 <gpiote_pin_int_cfg+0x12c>)
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    d9ea:	ea45 1540 	orr.w	r5, r5, r0, lsl #5
    d9ee:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
    d9f2:	b2d2      	uxtb	r2, r2
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    d9f4:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    d9f8:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    d9fc:	f3c0 2005 	ubfx	r0, r0, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    da00:	4285      	cmp	r5, r0
    da02:	d169      	bne.n	dad8 <gpiote_pin_int_cfg+0x100>
		    && (intenset & BIT(i))) {
    da04:	fa22 f003 	lsr.w	r0, r2, r3
    da08:	07c0      	lsls	r0, r0, #31
    da0a:	d565      	bpl.n	dad8 <gpiote_pin_int_cfg+0x100>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    da0c:	009a      	lsls	r2, r3, #2
    da0e:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    da12:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    da16:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    da1a:	f020 0001 	bic.w	r0, r0, #1
    da1e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    da22:	2201      	movs	r2, #1
    da24:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENCLR = mask;
    da28:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    da2c:	4628      	mov	r0, r5
    da2e:	2100      	movs	r1, #0
    da30:	f007 ff45 	bl	158be <nrf_gpio_cfg_sense_set>
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
    da34:	68fb      	ldr	r3, [r7, #12]
    da36:	40f3      	lsrs	r3, r6
    da38:	f013 0001 	ands.w	r0, r3, #1
    da3c:	d04b      	beq.n	dad6 <gpiote_pin_int_cfg+0xfe>
    da3e:	693b      	ldr	r3, [r7, #16]
    da40:	40f3      	lsrs	r3, r6
    da42:	f013 0001 	ands.w	r0, r3, #1
    da46:	d046      	beq.n	dad6 <gpiote_pin_int_cfg+0xfe>
		if (data->trig_edge & BIT(pin)) {
    da48:	69bb      	ldr	r3, [r7, #24]
    da4a:	40f3      	lsrs	r3, r6
    da4c:	f013 0401 	ands.w	r4, r3, #1
    da50:	d04c      	beq.n	daec <gpiote_pin_int_cfg+0x114>
			if (data->double_edge & BIT(pin)) {
    da52:	69fb      	ldr	r3, [r7, #28]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    da54:	2400      	movs	r4, #0
			if (data->double_edge & BIT(pin)) {
    da56:	40f3      	lsrs	r3, r6
    da58:	07db      	lsls	r3, r3, #31
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    da5a:	bf4c      	ite	mi
    da5c:	2603      	movmi	r6, #3
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    da5e:	6979      	ldrpl	r1, [r7, #20]
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
    da60:	4f28      	ldr	r7, [pc, #160]	; (db04 <gpiote_pin_int_cfg+0x12c>)
    da62:	bf5f      	itttt	pl
    da64:	fa21 f606 	lsrpl.w	r6, r1, r6
    da68:	f006 0601 	andpl.w	r6, r6, #1
    da6c:	f1c6 0602 	rsbpl	r6, r6, #2
    da70:	b2f6      	uxtbpl	r6, r6
    da72:	f504 73a2 	add.w	r3, r4, #324	; 0x144
    da76:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
    da7a:	f010 0003 	ands.w	r0, r0, #3
    da7e:	d12f      	bne.n	dae0 <gpiote_pin_int_cfg+0x108>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    da80:	00a2      	lsls	r2, r4, #2
    da82:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    da86:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    da8a:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    da8e:	022d      	lsls	r5, r5, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    da90:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    da94:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    da98:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    da9c:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    daa0:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
    daa4:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    daa8:	430e      	orrs	r6, r1
			nrf_gpiote_event_t evt =
    daaa:	f104 0140 	add.w	r1, r4, #64	; 0x40
    daae:	0089      	lsls	r1, r1, #2
    return ((uint32_t)p_reg + event);
    dab0:	b289      	uxth	r1, r1
    dab2:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    dab6:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    daba:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    dabe:	6008      	str	r0, [r1, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    dac0:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    dac4:	f041 0101 	orr.w	r1, r1, #1
    dac8:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    dacc:	2201      	movs	r2, #1
    dace:	fa02 f404 	lsl.w	r4, r2, r4
    p_reg->INTENSET = mask;
    dad2:	f8c7 4304 	str.w	r4, [r7, #772]	; 0x304
}
    dad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    dad8:	3301      	adds	r3, #1
    dada:	2b08      	cmp	r3, #8
    dadc:	d18a      	bne.n	d9f4 <gpiote_pin_int_cfg+0x1c>
    dade:	e7a5      	b.n	da2c <gpiote_pin_int_cfg+0x54>
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    dae0:	3401      	adds	r4, #1
    dae2:	2c08      	cmp	r4, #8
    dae4:	d1c5      	bne.n	da72 <gpiote_pin_int_cfg+0x9a>
	return -ENODEV;
    dae6:	f06f 0012 	mvn.w	r0, #18
    daea:	e7f4      	b.n	dad6 <gpiote_pin_int_cfg+0xfe>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    daec:	6979      	ldr	r1, [r7, #20]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    daee:	4628      	mov	r0, r5
	if ((BIT(pin) & data->int_active_level) != 0U) {
    daf0:	40f1      	lsrs	r1, r6
    daf2:	f001 0101 	and.w	r1, r1, #1
    daf6:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    dafa:	b2c9      	uxtb	r1, r1
    dafc:	f007 fedf 	bl	158be <nrf_gpio_cfg_sense_set>
	int res = 0;
    db00:	4620      	mov	r0, r4
    db02:	e7e8      	b.n	dad6 <gpiote_pin_int_cfg+0xfe>
    db04:	5000d000 	.word	0x5000d000

0000db08 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    db08:	4b2e      	ldr	r3, [pc, #184]	; (dbc4 <gpio_nrfx_config+0xbc>)
{
    db0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    db0c:	4c2e      	ldr	r4, [pc, #184]	; (dbc8 <gpio_nrfx_config+0xc0>)
    db0e:	4013      	ands	r3, r2
    db10:	42a3      	cmp	r3, r4
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    db12:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    db14:	d044      	beq.n	dba0 <gpio_nrfx_config+0x98>
    db16:	d80e      	bhi.n	db36 <gpio_nrfx_config+0x2e>
    db18:	2b06      	cmp	r3, #6
    db1a:	d043      	beq.n	dba4 <gpio_nrfx_config+0x9c>
    db1c:	d806      	bhi.n	db2c <gpio_nrfx_config+0x24>
    db1e:	2b00      	cmp	r3, #0
    db20:	d040      	beq.n	dba4 <gpio_nrfx_config+0x9c>
    db22:	2b02      	cmp	r3, #2
    db24:	d040      	beq.n	dba8 <gpio_nrfx_config+0xa0>
    db26:	f06f 0015 	mvn.w	r0, #21
    db2a:	e037      	b.n	db9c <gpio_nrfx_config+0x94>
    db2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    db30:	d1f9      	bne.n	db26 <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0S1;
    db32:	2401      	movs	r4, #1
    db34:	e009      	b.n	db4a <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    db36:	4c25      	ldr	r4, [pc, #148]	; (dbcc <gpio_nrfx_config+0xc4>)
    db38:	42a3      	cmp	r3, r4
    db3a:	d037      	beq.n	dbac <gpio_nrfx_config+0xa4>
    db3c:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    db40:	d036      	beq.n	dbb0 <gpio_nrfx_config+0xa8>
    db42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    db46:	d1ee      	bne.n	db26 <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_S0H1;
    db48:	2402      	movs	r4, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    db4a:	06d5      	lsls	r5, r2, #27
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    db4c:	f482 7380 	eor.w	r3, r2, #256	; 0x100
		pull = NRF_GPIO_PIN_PULLUP;
    db50:	bf4c      	ite	mi
    db52:	2603      	movmi	r6, #3
		pull = NRF_GPIO_PIN_NOPULL;
    db54:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    db58:	f3c3 2700 	ubfx	r7, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    db5c:	0593      	lsls	r3, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
    db5e:	f3c2 2540 	ubfx	r5, r2, #9, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    db62:	d507      	bpl.n	db74 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    db64:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    db66:	f8d0 c004 	ldr.w	ip, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    db6a:	d523      	bpl.n	dbb4 <gpio_nrfx_config+0xac>
			nrf_gpio_port_out_set(reg, BIT(pin));
    db6c:	2301      	movs	r3, #1
    db6e:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    db70:	f8cc 3008 	str.w	r3, [ip, #8]
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
    db74:	7a03      	ldrb	r3, [r0, #8]
    db76:	f001 011f 	and.w	r1, r1, #31
    db7a:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    db7e:	a801      	add	r0, sp, #4
    db80:	9101      	str	r1, [sp, #4]
    db82:	f7ff fe47 	bl	d814 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    db86:	9a01      	ldr	r2, [sp, #4]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    db88:	ea45 0347 	orr.w	r3, r5, r7, lsl #1
    db8c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    db90:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    db94:	3280      	adds	r2, #128	; 0x80
    db96:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	return 0;
    db9a:	2000      	movs	r0, #0
}
    db9c:	b003      	add	sp, #12
    db9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
    dba0:	2407      	movs	r4, #7
    dba2:	e7d2      	b.n	db4a <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    dba4:	461c      	mov	r4, r3
    dba6:	e7d0      	b.n	db4a <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
    dba8:	2404      	movs	r4, #4
    dbaa:	e7ce      	b.n	db4a <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
    dbac:	2405      	movs	r4, #5
    dbae:	e7cc      	b.n	db4a <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_H0H1;
    dbb0:	2403      	movs	r4, #3
    dbb2:	e7ca      	b.n	db4a <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    dbb4:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    dbb6:	bf42      	ittt	mi
    dbb8:	2301      	movmi	r3, #1
    dbba:	408b      	lslmi	r3, r1
    p_reg->OUTCLR = clr_mask;
    dbbc:	f8cc 300c 	strmi.w	r3, [ip, #12]
}
    dbc0:	e7d8      	b.n	db74 <gpio_nrfx_config+0x6c>
    dbc2:	bf00      	nop
    dbc4:	00f00006 	.word	0x00f00006
    dbc8:	00100006 	.word	0x00100006
    dbcc:	00400002 	.word	0x00400002

0000dbd0 <gpiote_event_handler>:
{
    dbd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	u32_t fired_triggers[GPIO_COUNT] = {0};
    dbd2:	2500      	movs	r5, #0
    dbd4:	e9cd 5500 	strd	r5, r5, [sp]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    dbd8:	4e24      	ldr	r6, [pc, #144]	; (dc6c <gpiote_event_handler+0x9c>)
    dbda:	6834      	ldr	r4, [r6, #0]
	if (port_event) {
    dbdc:	b144      	cbz	r4, dbf0 <gpiote_event_handler+0x20>
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p0));
    dbde:	4824      	ldr	r0, [pc, #144]	; (dc70 <gpiote_event_handler+0xa0>)
    dbe0:	f007 fe80 	bl	158e4 <check_level_trigger_pins>
		fired_triggers[0] =
    dbe4:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p1));
    dbe6:	4823      	ldr	r0, [pc, #140]	; (dc74 <gpiote_event_handler+0xa4>)
    dbe8:	f007 fe7c 	bl	158e4 <check_level_trigger_pins>
		fired_triggers[1] =
    dbec:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    dbee:	6035      	str	r5, [r6, #0]
{
    dbf0:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    dbf2:	2601      	movs	r6, #1
    dbf4:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
    dbf6:	4d20      	ldr	r5, [pc, #128]	; (dc78 <gpiote_event_handler+0xa8>)
    dbf8:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
    dbfc:	fa06 f102 	lsl.w	r1, r6, r2
    dc00:	4219      	tst	r1, r3
    dc02:	d01a      	beq.n	dc3a <gpiote_event_handler+0x6a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    dc04:	0091      	lsls	r1, r2, #2
    dc06:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    dc0a:	f501 4151 	add.w	r1, r1, #53504	; 0xd100
    dc0e:	680b      	ldr	r3, [r1, #0]
    dc10:	b19b      	cbz	r3, dc3a <gpiote_event_handler+0x6a>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    dc12:	f502 73a2 	add.w	r3, r2, #324	; 0x144
    dc16:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    dc1a:	af02      	add	r7, sp, #8
    dc1c:	f3c3 3040 	ubfx	r0, r3, #13, #1
    dc20:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    dc24:	f850 7c08 	ldr.w	r7, [r0, #-8]
    dc28:	f3c3 2304 	ubfx	r3, r3, #8, #5
    dc2c:	fa06 f303 	lsl.w	r3, r6, r3
    dc30:	433b      	orrs	r3, r7
    dc32:	f840 3c08 	str.w	r3, [r0, #-8]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    dc36:	f8c1 c000 	str.w	ip, [r1]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    dc3a:	3201      	adds	r2, #1
    dc3c:	2a08      	cmp	r2, #8
    dc3e:	d1db      	bne.n	dbf8 <gpiote_event_handler+0x28>
	if (fired_triggers[0]) {
    dc40:	9900      	ldr	r1, [sp, #0]
    dc42:	b111      	cbz	r1, dc4a <gpiote_event_handler+0x7a>
		fire_callbacks(DEVICE_GET(gpio_nrfx_p0), fired_triggers[0]);
    dc44:	480a      	ldr	r0, [pc, #40]	; (dc70 <gpiote_event_handler+0xa0>)
    dc46:	f7ff fe6d 	bl	d924 <fire_callbacks>
	if (fired_triggers[1]) {
    dc4a:	9901      	ldr	r1, [sp, #4]
    dc4c:	b111      	cbz	r1, dc54 <gpiote_event_handler+0x84>
		fire_callbacks(DEVICE_GET(gpio_nrfx_p1), fired_triggers[1]);
    dc4e:	4809      	ldr	r0, [pc, #36]	; (dc74 <gpiote_event_handler+0xa4>)
    dc50:	f7ff fe68 	bl	d924 <fire_callbacks>
	if (port_event) {
    dc54:	b144      	cbz	r4, dc68 <gpiote_event_handler+0x98>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p0));
    dc56:	4806      	ldr	r0, [pc, #24]	; (dc70 <gpiote_event_handler+0xa0>)
    dc58:	f007 fecc 	bl	159f4 <cfg_level_pins>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
    dc5c:	4805      	ldr	r0, [pc, #20]	; (dc74 <gpiote_event_handler+0xa4>)
}
    dc5e:	b003      	add	sp, #12
    dc60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
    dc64:	f007 bec6 	b.w	159f4 <cfg_level_pins>
}
    dc68:	b003      	add	sp, #12
    dc6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dc6c:	5000d17c 	.word	0x5000d17c
    dc70:	20000390 	.word	0x20000390
    dc74:	200003a0 	.word	0x200003a0
    dc78:	5000d000 	.word	0x5000d000

0000dc7c <vipm_nrf_1_register_callback>:
		    &vipm_nrf_##_idx##_driver_api)

#define VIPM_DEVICE(_idx, _)						\
	IF_ENABLED(CONFIG_IPM_MSG_CH_##_idx##_ENABLE, (VIPM_DEVICE_1(_idx);))

UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
    dc7c:	4b01      	ldr	r3, [pc, #4]	; (dc84 <vipm_nrf_1_register_callback+0x8>)
    dc7e:	6059      	str	r1, [r3, #4]
    dc80:	645a      	str	r2, [r3, #68]	; 0x44
    dc82:	4770      	bx	lr
    dc84:	20001264 	.word	0x20001264

0000dc88 <vipm_nrf_0_set_enabled>:
    dc88:	b508      	push	{r3, lr}
    dc8a:	2145      	movs	r1, #69	; 0x45
    dc8c:	4802      	ldr	r0, [pc, #8]	; (dc98 <vipm_nrf_0_set_enabled+0x10>)
    dc8e:	f004 fa3b 	bl	12108 <printk>
    dc92:	f06f 0015 	mvn.w	r0, #21
    dc96:	bd08      	pop	{r3, pc}
    dc98:	0001b2d8 	.word	0x0001b2d8

0000dc9c <vipm_nrf_0_register_callback>:
    dc9c:	2157      	movs	r1, #87	; 0x57
    dc9e:	4801      	ldr	r0, [pc, #4]	; (dca4 <vipm_nrf_0_register_callback+0x8>)
    dca0:	f004 ba32 	b.w	12108 <printk>
    dca4:	0001b2f9 	.word	0x0001b2f9

0000dca8 <vipm_nrf_1_send>:
    dca8:	b508      	push	{r3, lr}
    dcaa:	2145      	movs	r1, #69	; 0x45
    dcac:	4802      	ldr	r0, [pc, #8]	; (dcb8 <vipm_nrf_1_send+0x10>)
    dcae:	f004 fa2b 	bl	12108 <printk>
    dcb2:	f06f 0015 	mvn.w	r0, #21
    dcb6:	bd08      	pop	{r3, pc}
    dcb8:	0001b330 	.word	0x0001b330

0000dcbc <vipm_nrf_init>:
{
    dcbc:	b538      	push	{r3, r4, r5, lr}
	if (!nrfx_vipm_data.ipm_init) {
    dcbe:	4d0b      	ldr	r5, [pc, #44]	; (dcec <vipm_nrf_init+0x30>)
    dcc0:	f895 4080 	ldrb.w	r4, [r5, #128]	; 0x80
    dcc4:	b97c      	cbnz	r4, dce6 <vipm_nrf_init+0x2a>
{
	/* Init IPC */
#if IS_ENABLED(CONFIG_IPM_NRF_SINGLE_INSTANCE)
	nrfx_ipc_init(0, nrfx_ipc_handler, (void *)&nrfx_ipm_data);
#else
	nrfx_ipc_init(0, vipm_dispatcher, (void *)&nrfx_ipm_data);
    dcc6:	4a0a      	ldr	r2, [pc, #40]	; (dcf0 <vipm_nrf_init+0x34>)
    dcc8:	490a      	ldr	r1, [pc, #40]	; (dcf4 <vipm_nrf_init+0x38>)
    dcca:	4620      	mov	r0, r4
    dccc:	f000 fa88 	bl	e1e0 <nrfx_ipc_init>
#endif
	IRQ_CONNECT(DT_INST_IRQN(0),
    dcd0:	4622      	mov	r2, r4
    dcd2:	2101      	movs	r1, #1
    dcd4:	202a      	movs	r0, #42	; 0x2a
    dcd6:	f7f5 ffab 	bl	3c30 <z_arm_irq_priority_set>
		    DT_INST_IRQ(0, priority),
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	/* Set up signals and channels */
	nrfx_ipc_config_load(&ipc_cfg);
    dcda:	4807      	ldr	r0, [pc, #28]	; (dcf8 <vipm_nrf_init+0x3c>)
    dcdc:	f000 faa8 	bl	e230 <nrfx_ipc_config_load>
		nrfx_vipm_data.ipm_init = true;
    dce0:	2301      	movs	r3, #1
    dce2:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
}
    dce6:	2000      	movs	r0, #0
    dce8:	bd38      	pop	{r3, r4, r5, pc}
    dcea:	bf00      	nop
    dcec:	20001264 	.word	0x20001264
    dcf0:	2000125c 	.word	0x2000125c
    dcf4:	0000dcfd 	.word	0x0000dcfd
    dcf8:	00017544 	.word	0x00017544

0000dcfc <vipm_dispatcher>:
{
    dcfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd00:	4605      	mov	r5, r0
		__ASSERT(event_idx < NRFX_IPC_ID_MAX_VALUE,
    dd02:	4e17      	ldr	r6, [pc, #92]	; (dd60 <vipm_dispatcher+0x64>)
    dd04:	4f17      	ldr	r7, [pc, #92]	; (dd64 <vipm_dispatcher+0x68>)
    dd06:	f8df 8068 	ldr.w	r8, [pc, #104]	; dd70 <vipm_dispatcher+0x74>
	while (event_mask) {
    dd0a:	b90d      	cbnz	r5, dd10 <vipm_dispatcher+0x14>
}
    dd0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    dd10:	fa95 f4a5 	rbit	r4, r5
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
    dd14:	b314      	cbz	r4, dd5c <vipm_dispatcher+0x60>
  {
    return 32U;
  }
  return __builtin_clz(value);
    dd16:	fab4 f384 	clz	r3, r4
		__ASSERT(event_idx < NRFX_IPC_ID_MAX_VALUE,
    dd1a:	2b0f      	cmp	r3, #15
    dd1c:	461c      	mov	r4, r3
    dd1e:	dd0d      	ble.n	dd3c <vipm_dispatcher+0x40>
    dd20:	2383      	movs	r3, #131	; 0x83
    dd22:	4632      	mov	r2, r6
    dd24:	4639      	mov	r1, r7
    dd26:	4640      	mov	r0, r8
    dd28:	f004 f9ee 	bl	12108 <printk>
    dd2c:	4621      	mov	r1, r4
    dd2e:	480e      	ldr	r0, [pc, #56]	; (dd68 <vipm_dispatcher+0x6c>)
    dd30:	f004 f9ea 	bl	12108 <printk>
    dd34:	2183      	movs	r1, #131	; 0x83
    dd36:	4630      	mov	r0, r6
    dd38:	f004 fc7c 	bl	12634 <assert_post_action>
		event_mask &= ~BIT(event_idx);
    dd3c:	2301      	movs	r3, #1
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
    dd3e:	480b      	ldr	r0, [pc, #44]	; (dd6c <vipm_dispatcher+0x70>)
		event_mask &= ~BIT(event_idx);
    dd40:	40a3      	lsls	r3, r4
    dd42:	ea25 0503 	bic.w	r5, r5, r3
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
    dd46:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
    dd4a:	2b00      	cmp	r3, #0
    dd4c:	d0dd      	beq.n	dd0a <vipm_dispatcher+0xe>
			nrfx_vipm_data.callback[event_idx]
    dd4e:	2200      	movs	r2, #0
    dd50:	3410      	adds	r4, #16
    dd52:	4611      	mov	r1, r2
    dd54:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    dd58:	4798      	blx	r3
    dd5a:	e7d6      	b.n	dd0a <vipm_dispatcher+0xe>
    return 32U;
    dd5c:	2420      	movs	r4, #32
    dd5e:	e7df      	b.n	dd20 <vipm_dispatcher+0x24>
    dd60:	0001b351 	.word	0x0001b351
    dd64:	0001b37f 	.word	0x0001b37f
    dd68:	0001b38e 	.word	0x0001b38e
    dd6c:	20001264 	.word	0x20001264
    dd70:	00017d82 	.word	0x00017d82

0000dd74 <vipm_nrf_0_send>:
UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
    dd74:	2a10      	cmp	r2, #16
    dd76:	b508      	push	{r3, lr}
    dd78:	d810      	bhi.n	dd9c <vipm_nrf_0_send+0x28>
    dd7a:	b11a      	cbz	r2, dd84 <vipm_nrf_0_send+0x10>
    dd7c:	2157      	movs	r1, #87	; 0x57
    dd7e:	4809      	ldr	r0, [pc, #36]	; (dda4 <vipm_nrf_0_send+0x30>)
    dd80:	f004 f9c2 	bl	12108 <printk>
    dd84:	9b02      	ldr	r3, [sp, #8]
    dd86:	2b00      	cmp	r3, #0
    dd88:	dd03      	ble.n	dd92 <vipm_nrf_0_send+0x1e>
    dd8a:	2157      	movs	r1, #87	; 0x57
    dd8c:	4806      	ldr	r0, [pc, #24]	; (dda8 <vipm_nrf_0_send+0x34>)
    dd8e:	f004 f9bb 	bl	12108 <printk>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ipc_task_trigger(NRF_IPC_Type * p_reg, nrf_ipc_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dd92:	2201      	movs	r2, #1
    dd94:	2000      	movs	r0, #0
    dd96:	4b05      	ldr	r3, [pc, #20]	; (ddac <vipm_nrf_0_send+0x38>)
    dd98:	601a      	str	r2, [r3, #0]
    dd9a:	bd08      	pop	{r3, pc}
    dd9c:	f06f 0015 	mvn.w	r0, #21
    dda0:	e7fb      	b.n	dd9a <vipm_nrf_0_send+0x26>
    dda2:	bf00      	nop
    dda4:	0001b3a6 	.word	0x0001b3a6
    dda8:	0001b3df 	.word	0x0001b3df
    ddac:	5002a000 	.word	0x5002a000

0000ddb0 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    ddb0:	4b02      	ldr	r3, [pc, #8]	; (ddbc <flash_nrf_pages_layout+0xc>)
    ddb2:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    ddb4:	2301      	movs	r3, #1
    ddb6:	6013      	str	r3, [r2, #0]
}
    ddb8:	4770      	bx	lr
    ddba:	bf00      	nop
    ddbc:	200012ec 	.word	0x200012ec

0000ddc0 <flash_nrf_erase>:
{
    ddc0:	b570      	push	{r4, r5, r6, lr}
    ddc2:	460d      	mov	r5, r1
    ddc4:	4614      	mov	r4, r2
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
    ddc6:	f008 f87b 	bl	15ec0 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
    ddca:	4621      	mov	r1, r4
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
    ddcc:	4606      	mov	r6, r0
	if (is_regular_addr_valid(addr, size)) {
    ddce:	4628      	mov	r0, r5
    ddd0:	f007 fe58 	bl	15a84 <is_regular_addr_valid>
    ddd4:	b300      	cbz	r0, de18 <flash_nrf_erase+0x58>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    ddd6:	fbb5 f3f6 	udiv	r3, r5, r6
    ddda:	fb06 5313 	mls	r3, r6, r3, r5
    ddde:	b9db      	cbnz	r3, de18 <flash_nrf_erase+0x58>
    dde0:	fbb4 f3f6 	udiv	r3, r4, r6
    dde4:	fb06 4013 	mls	r0, r6, r3, r4
    dde8:	b9b0      	cbnz	r0, de18 <flash_nrf_erase+0x58>
		if (!n_pages) {
    ddea:	42a6      	cmp	r6, r4
    ddec:	d813      	bhi.n	de16 <flash_nrf_erase+0x56>
	return z_impl_k_sem_take(sem, timeout);
    ddee:	f04f 32ff 	mov.w	r2, #4294967295
    ddf2:	f04f 33ff 	mov.w	r3, #4294967295
    ddf6:	480a      	ldr	r0, [pc, #40]	; (de20 <flash_nrf_erase+0x60>)
    ddf8:	f002 ff46 	bl	10c88 <z_impl_k_sem_take>

#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

static int erase_op(void *context)
{
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
    ddfc:	f008 f860 	bl	15ec0 <nrfx_nvmc_flash_page_size_get>
    de00:	4606      	mov	r6, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    de02:	4628      	mov	r0, r5
    de04:	f000 fad6 	bl	e3b4 <nrfx_nvmc_page_erase>
				break;
			}
		}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

	} while (e_ctx->len > 0);
    de08:	1ba4      	subs	r4, r4, r6
    de0a:	4435      	add	r5, r6
    de0c:	d1f9      	bne.n	de02 <flash_nrf_erase+0x42>
	z_impl_k_sem_give(sem);
    de0e:	4804      	ldr	r0, [pc, #16]	; (de20 <flash_nrf_erase+0x60>)
    de10:	f002 fef6 	bl	10c00 <z_impl_k_sem_give>
	return ret;
    de14:	4620      	mov	r0, r4
}
    de16:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    de18:	f06f 0015 	mvn.w	r0, #21
    de1c:	e7fb      	b.n	de16 <flash_nrf_erase+0x56>
    de1e:	bf00      	nop
    de20:	200012f4 	.word	0x200012f4

0000de24 <nrf_flash_init>:
{
    de24:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    de26:	2201      	movs	r2, #1
    de28:	4806      	ldr	r0, [pc, #24]	; (de44 <nrf_flash_init+0x20>)
    de2a:	4611      	mov	r1, r2
    de2c:	f008 fcf0 	bl	16810 <z_impl_k_sem_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    de30:	f008 f849 	bl	15ec6 <nrfx_nvmc_flash_page_count_get>
    de34:	4c04      	ldr	r4, [pc, #16]	; (de48 <nrf_flash_init+0x24>)
    de36:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    de38:	f008 f842 	bl	15ec0 <nrfx_nvmc_flash_page_size_get>
    de3c:	6060      	str	r0, [r4, #4]
}
    de3e:	2000      	movs	r0, #0
    de40:	bd10      	pop	{r4, pc}
    de42:	bf00      	nop
    de44:	200012f4 	.word	0x200012f4
    de48:	200012ec 	.word	0x200012ec

0000de4c <flash_nrf_write>:
{
    de4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    de4e:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
    de50:	4619      	mov	r1, r3
    de52:	4630      	mov	r0, r6
{
    de54:	4617      	mov	r7, r2
    de56:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    de58:	f007 fe14 	bl	15a84 <is_regular_addr_valid>
    de5c:	b308      	cbz	r0, dea2 <flash_nrf_write+0x56>
	return (data & 0x3) ? false : true;
    de5e:	ea46 0504 	orr.w	r5, r6, r4
	if (!is_aligned_32(addr) || (len % sizeof(u32_t))) {
    de62:	f015 0503 	ands.w	r5, r5, #3
    de66:	d11c      	bne.n	dea2 <flash_nrf_write+0x56>
	if (!len) {
    de68:	b1f4      	cbz	r4, dea8 <flash_nrf_write+0x5c>
	return z_impl_k_sem_take(sem, timeout);
    de6a:	f04f 32ff 	mov.w	r2, #4294967295
    de6e:	f04f 33ff 	mov.w	r3, #4294967295
    de72:	480e      	ldr	r0, [pc, #56]	; (deac <flash_nrf_write+0x60>)
    de74:	f002 ff08 	bl	10c88 <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
    de78:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(u32_t)) {
    de7c:	42a5      	cmp	r5, r4
    de7e:	eb06 0005 	add.w	r0, r6, r5
    de82:	d109      	bne.n	de98 <flash_nrf_write+0x4c>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    de84:	4a0a      	ldr	r2, [pc, #40]	; (deb0 <flash_nrf_write+0x64>)
    de86:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    de8a:	07db      	lsls	r3, r3, #31
    de8c:	d5fb      	bpl.n	de86 <flash_nrf_write+0x3a>
	z_impl_k_sem_give(sem);
    de8e:	4807      	ldr	r0, [pc, #28]	; (deac <flash_nrf_write+0x60>)
    de90:	f002 feb6 	bl	10c00 <z_impl_k_sem_give>
    de94:	2000      	movs	r0, #0
}
    de96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nrfx_nvmc_word_write(w_ctx->flash_addr,
    de98:	5979      	ldr	r1, [r7, r5]
    de9a:	f000 fac3 	bl	e424 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
    de9e:	3504      	adds	r5, #4
}
    dea0:	e7ec      	b.n	de7c <flash_nrf_write+0x30>
		return -EINVAL;
    dea2:	f06f 0015 	mvn.w	r0, #21
    dea6:	e7f6      	b.n	de96 <flash_nrf_write+0x4a>
		return 0;
    dea8:	4620      	mov	r0, r4
    deaa:	e7f4      	b.n	de96 <flash_nrf_write+0x4a>
    deac:	200012f4 	.word	0x200012f4
    deb0:	50039000 	.word	0x50039000

0000deb4 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
    deb4:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    deb6:	794b      	ldrb	r3, [r1, #5]
    deb8:	2b01      	cmp	r3, #1
    deba:	d02b      	beq.n	df14 <uarte_nrfx_configure+0x60>
    debc:	2b03      	cmp	r3, #3
    debe:	d126      	bne.n	df0e <uarte_nrfx_configure+0x5a>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    dec0:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    dec2:	798b      	ldrb	r3, [r1, #6]
    dec4:	2b03      	cmp	r3, #3
    dec6:	d122      	bne.n	df0e <uarte_nrfx_configure+0x5a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    dec8:	79cd      	ldrb	r5, [r1, #7]
    deca:	b125      	cbz	r5, ded6 <uarte_nrfx_configure+0x22>
    decc:	2d01      	cmp	r5, #1
    dece:	d11e      	bne.n	df0e <uarte_nrfx_configure+0x5a>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    ded0:	6843      	ldr	r3, [r0, #4]
    ded2:	791b      	ldrb	r3, [r3, #4]
    ded4:	b1db      	cbz	r3, df0e <uarte_nrfx_configure+0x5a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    ded6:	790a      	ldrb	r2, [r1, #4]
    ded8:	2a01      	cmp	r2, #1
    deda:	d01d      	beq.n	df18 <uarte_nrfx_configure+0x64>
    dedc:	2a02      	cmp	r2, #2
    dede:	d01f      	beq.n	df20 <uarte_nrfx_configure+0x6c>
    dee0:	b9aa      	cbnz	r2, df0e <uarte_nrfx_configure+0x5a>
    dee2:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    dee4:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    dee6:	6846      	ldr	r6, [r0, #4]
	switch (baudrate) {
    dee8:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    deec:	6836      	ldr	r6, [r6, #0]
	switch (baudrate) {
    deee:	d06d      	beq.n	dfcc <uarte_nrfx_configure+0x118>
    def0:	d833      	bhi.n	df5a <uarte_nrfx_configure+0xa6>
    def2:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    def6:	d06c      	beq.n	dfd2 <uarte_nrfx_configure+0x11e>
    def8:	d81c      	bhi.n	df34 <uarte_nrfx_configure+0x80>
    defa:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    defe:	d06a      	beq.n	dfd6 <uarte_nrfx_configure+0x122>
    df00:	d810      	bhi.n	df24 <uarte_nrfx_configure+0x70>
    df02:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    df06:	d069      	beq.n	dfdc <uarte_nrfx_configure+0x128>
    df08:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    df0c:	d069      	beq.n	dfe2 <uarte_nrfx_configure+0x12e>
    df0e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    df12:	e05a      	b.n	dfca <uarte_nrfx_configure+0x116>
	switch (cfg->stop_bits) {
    df14:	2700      	movs	r7, #0
    df16:	e7d4      	b.n	dec2 <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    df18:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    df1c:	220e      	movs	r2, #14
    df1e:	e7e1      	b.n	dee4 <uarte_nrfx_configure+0x30>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    df20:	2400      	movs	r4, #0
    df22:	e7fb      	b.n	df1c <uarte_nrfx_configure+0x68>
	switch (baudrate) {
    df24:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    df28:	d05e      	beq.n	dfe8 <uarte_nrfx_configure+0x134>
    df2a:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    df2e:	d1ee      	bne.n	df0e <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    df30:	4b38      	ldr	r3, [pc, #224]	; (e014 <uarte_nrfx_configure+0x160>)
    df32:	e03e      	b.n	dfb2 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    df34:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    df38:	d059      	beq.n	dfee <uarte_nrfx_configure+0x13a>
    df3a:	d807      	bhi.n	df4c <uarte_nrfx_configure+0x98>
    df3c:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    df40:	d057      	beq.n	dff2 <uarte_nrfx_configure+0x13e>
    df42:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    df46:	d1e2      	bne.n	df0e <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    df48:	4b33      	ldr	r3, [pc, #204]	; (e018 <uarte_nrfx_configure+0x164>)
    df4a:	e032      	b.n	dfb2 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    df4c:	f647 2c12 	movw	ip, #31250	; 0x7a12
    df50:	4563      	cmp	r3, ip
    df52:	d1dc      	bne.n	df0e <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    df54:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    df58:	e02b      	b.n	dfb2 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    df5a:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    df5e:	d04a      	beq.n	dff6 <uarte_nrfx_configure+0x142>
    df60:	d813      	bhi.n	df8a <uarte_nrfx_configure+0xd6>
    df62:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    df66:	d049      	beq.n	dffc <uarte_nrfx_configure+0x148>
    df68:	d809      	bhi.n	df7e <uarte_nrfx_configure+0xca>
    df6a:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
    df6e:	4563      	cmp	r3, ip
    df70:	d046      	beq.n	e000 <uarte_nrfx_configure+0x14c>
    df72:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    df76:	d1ca      	bne.n	df0e <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    df78:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    df7c:	e019      	b.n	dfb2 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    df7e:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    df82:	d1c4      	bne.n	df0e <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    df84:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    df88:	e013      	b.n	dfb2 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    df8a:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    df8e:	d03a      	beq.n	e006 <uarte_nrfx_configure+0x152>
    df90:	d809      	bhi.n	dfa6 <uarte_nrfx_configure+0xf2>
    df92:	f8df c098 	ldr.w	ip, [pc, #152]	; e02c <uarte_nrfx_configure+0x178>
    df96:	4563      	cmp	r3, ip
    df98:	d038      	beq.n	e00c <uarte_nrfx_configure+0x158>
    df9a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    df9e:	d1b6      	bne.n	df0e <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    dfa0:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    dfa4:	e005      	b.n	dfb2 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    dfa6:	f8df c088 	ldr.w	ip, [pc, #136]	; e030 <uarte_nrfx_configure+0x17c>
    dfaa:	4563      	cmp	r3, ip
    dfac:	d1af      	bne.n	df0e <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    dfae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    dfb2:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
    dfb6:	432c      	orrs	r4, r5
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    dfb8:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->stop
    dfba:	433a      	orrs	r2, r7
                    | (uint32_t)p_cfg->hwfc;
    dfbc:	4322      	orrs	r2, r4
    dfbe:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    dfc0:	f8c6 256c 	str.w	r2, [r6, #1388]	; 0x56c
    dfc4:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    dfc8:	2000      	movs	r0, #0
}
    dfca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    dfcc:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    dfd0:	e7ef      	b.n	dfb2 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    dfd2:	4b12      	ldr	r3, [pc, #72]	; (e01c <uarte_nrfx_configure+0x168>)
    dfd4:	e7ed      	b.n	dfb2 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    dfd6:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    dfda:	e7ea      	b.n	dfb2 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = 0x00014000;
    dfdc:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    dfe0:	e7e7      	b.n	dfb2 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    dfe2:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    dfe6:	e7e4      	b.n	dfb2 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    dfe8:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    dfec:	e7e1      	b.n	dfb2 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    dfee:	4b0c      	ldr	r3, [pc, #48]	; (e020 <uarte_nrfx_configure+0x16c>)
    dff0:	e7df      	b.n	dfb2 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    dff2:	4b0c      	ldr	r3, [pc, #48]	; (e024 <uarte_nrfx_configure+0x170>)
    dff4:	e7dd      	b.n	dfb2 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    dff6:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    dffa:	e7da      	b.n	dfb2 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    dffc:	4b0a      	ldr	r3, [pc, #40]	; (e028 <uarte_nrfx_configure+0x174>)
    dffe:	e7d8      	b.n	dfb2 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    e000:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    e004:	e7d5      	b.n	dfb2 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    e006:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    e00a:	e7d2      	b.n	dfb2 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    e00c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    e010:	e7cf      	b.n	dfb2 <uarte_nrfx_configure+0xfe>
    e012:	bf00      	nop
    e014:	0013b000 	.word	0x0013b000
    e018:	004ea000 	.word	0x004ea000
    e01c:	00275000 	.word	0x00275000
    e020:	0075c000 	.word	0x0075c000
    e024:	003af000 	.word	0x003af000
    e028:	013a9000 	.word	0x013a9000
    e02c:	0003d090 	.word	0x0003d090
    e030:	000f4240 	.word	0x000f4240

0000e034 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    e034:	6802      	ldr	r2, [r0, #0]
{
    e036:	b510      	push	{r4, lr}
    switch (port)
    e038:	0953      	lsrs	r3, r2, #5
{
    e03a:	4604      	mov	r4, r0
    switch (port)
    e03c:	d01e      	beq.n	e07c <nrf_gpio_pin_port_decode+0x48>
    e03e:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    e040:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e044:	bf18      	it	ne
    e046:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    e048:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    e04c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    e04e:	07db      	lsls	r3, r3, #31
    e050:	d40b      	bmi.n	e06a <nrf_gpio_pin_port_decode+0x36>
    e052:	490c      	ldr	r1, [pc, #48]	; (e084 <nrf_gpio_pin_port_decode+0x50>)
    e054:	480c      	ldr	r0, [pc, #48]	; (e088 <nrf_gpio_pin_port_decode+0x54>)
    e056:	f240 230d 	movw	r3, #525	; 0x20d
    e05a:	4a0c      	ldr	r2, [pc, #48]	; (e08c <nrf_gpio_pin_port_decode+0x58>)
    e05c:	f004 f854 	bl	12108 <printk>
    e060:	f240 210d 	movw	r1, #525	; 0x20d
    e064:	4809      	ldr	r0, [pc, #36]	; (e08c <nrf_gpio_pin_port_decode+0x58>)
    e066:	f004 fae5 	bl	12634 <assert_post_action>
    if (*p_pin < P0_PIN_NUM)
    e06a:	6823      	ldr	r3, [r4, #0]
    e06c:	2b1f      	cmp	r3, #31
        *p_pin = *p_pin & 0x1F;
    e06e:	bf85      	ittet	hi
    e070:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
    e074:	4806      	ldrhi	r0, [pc, #24]	; (e090 <nrf_gpio_pin_port_decode+0x5c>)
        return NRF_P0;
    e076:	4807      	ldrls	r0, [pc, #28]	; (e094 <nrf_gpio_pin_port_decode+0x60>)
        *p_pin = *p_pin & 0x1F;
    e078:	6023      	strhi	r3, [r4, #0]
}
    e07a:	bd10      	pop	{r4, pc}
    switch (port)
    e07c:	f04f 33ff 	mov.w	r3, #4294967295
    e080:	e7e2      	b.n	e048 <nrf_gpio_pin_port_decode+0x14>
    e082:	bf00      	nop
    e084:	0001b201 	.word	0x0001b201
    e088:	00017d82 	.word	0x00017d82
    e08c:	0001b1ce 	.word	0x0001b1ce
    e090:	50842800 	.word	0x50842800
    e094:	50842500 	.word	0x50842500

0000e098 <k_sys_fatal_error_handler>:
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
    e098:	4803      	ldr	r0, [pc, #12]	; (e0a8 <k_sys_fatal_error_handler+0x10>)
    e09a:	2145      	movs	r1, #69	; 0x45
{
    e09c:	b508      	push	{r3, lr}
	LOG_ERR("Resetting system");
    e09e:	f004 f833 	bl	12108 <printk>
	sys_arch_reboot(0);
    e0a2:	2000      	movs	r0, #0
    e0a4:	f7f6 f914 	bl	42d0 <sys_arch_reboot>

	CODE_UNREACHABLE;
    e0a8:	0001b432 	.word	0x0001b432

0000e0ac <nrf53_errata_42>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA_APPLICATION) || defined (DEVELOP_IN_NRF5340_APPLICATION)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    e0ac:	4b05      	ldr	r3, [pc, #20]	; (e0c4 <nrf53_errata_42+0x18>)
    e0ae:	6818      	ldr	r0, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    e0b0:	3b04      	subs	r3, #4
        #endif
        #if defined (NRF5340_XXAA_APPLICATION) || defined (DEVELOP_IN_NRF5340_APPLICATION)
            if (var1 == 0x07)
    e0b2:	681b      	ldr	r3, [r3, #0]
    e0b4:	2b07      	cmp	r3, #7
    e0b6:	d103      	bne.n	e0c0 <nrf53_errata_42+0x14>
            {
                switch(var2)
    e0b8:	1e83      	subs	r3, r0, #2
    e0ba:	4258      	negs	r0, r3
    e0bc:	4158      	adcs	r0, r3
    e0be:	4770      	bx	lr
                    case 0x03ul:
                        return false;
                }
            }
        #endif
        return false;
    e0c0:	2000      	movs	r0, #0
    #endif
}
    e0c2:	4770      	bx	lr
    e0c4:	00ff0134 	.word	0x00ff0134

0000e0c8 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
    e0c8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    e0cc:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
    e0d0:	4b03      	ldr	r3, [pc, #12]	; (e0e0 <SystemCoreClockUpdate+0x18>)
    e0d2:	f002 0201 	and.w	r2, r2, #1
    e0d6:	40d3      	lsrs	r3, r2
    e0d8:	4a02      	ldr	r2, [pc, #8]	; (e0e4 <SystemCoreClockUpdate+0x1c>)
    e0da:	6013      	str	r3, [r2, #0]
#endif
}
    e0dc:	4770      	bx	lr
    e0de:	bf00      	nop
    e0e0:	07a12000 	.word	0x07a12000
    e0e4:	200002b0 	.word	0x200002b0

0000e0e8 <SystemInit>:

void SystemInit(void)
{
    e0e8:	b508      	push	{r3, lr}
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    e0ea:	f7ff ffdf 	bl	e0ac <nrf53_errata_42>
    e0ee:	b148      	cbz	r0, e104 <SystemInit+0x1c>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    e0f0:	4b33      	ldr	r3, [pc, #204]	; (e1c0 <SystemInit+0xd8>)
    e0f2:	681a      	ldr	r2, [r3, #0]
    e0f4:	b932      	cbnz	r2, e104 <SystemInit+0x1c>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    e0f6:	210d      	movs	r1, #13
    e0f8:	6019      	str	r1, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    e0fa:	2101      	movs	r1, #1
    e0fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    e100:	6019      	str	r1, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    e102:	601a      	str	r2, [r3, #0]
{
    e104:	2200      	movs	r2, #0
    e106:	00d3      	lsls	r3, r2, #3
    e108:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    e10c:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    e110:	3101      	adds	r1, #1
    e112:	d007      	beq.n	e124 <SystemInit+0x3c>
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    e114:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    e118:	3201      	adds	r2, #1
            *NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    e11a:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    e11e:	2a20      	cmp	r2, #32
            *NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    e120:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    e122:	d1f0      	bne.n	e106 <SystemInit+0x1e>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    e124:	f7ff ffc2 	bl	e0ac <nrf53_errata_42>
    e128:	2800      	cmp	r0, #0
    e12a:	d142      	bne.n	e1b2 <SystemInit+0xca>
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    e12c:	f7ff ffbe 	bl	e0ac <nrf53_errata_42>
    e130:	b138      	cbz	r0, e142 <SystemInit+0x5a>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    e132:	4b24      	ldr	r3, [pc, #144]	; (e1c4 <SystemInit+0xdc>)
    e134:	4a24      	ldr	r2, [pc, #144]	; (e1c8 <SystemInit+0xe0>)
    e136:	601a      	str	r2, [r3, #0]
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    e138:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    e13c:	2201      	movs	r2, #1
    e13e:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
    e142:	f7ff ffb3 	bl	e0ac <nrf53_errata_42>
    e146:	b110      	cbz	r0, e14e <SystemInit+0x66>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    e148:	2200      	movs	r2, #0
    e14a:	4b20      	ldr	r3, [pc, #128]	; (e1cc <SystemInit+0xe4>)
    e14c:	601a      	str	r2, [r3, #0]
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    e14e:	f7ff ffad 	bl	e0ac <nrf53_errata_42>
    e152:	b150      	cbz	r0, e16a <SystemInit+0x82>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    e154:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    e158:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    e15c:	07d1      	lsls	r1, r2, #31
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    e15e:	bf42      	ittt	mi
    e160:	2200      	movmi	r2, #0
    e162:	f8c3 2114 	strmi.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    e166:	f8c3 2118 	strmi.w	r2, [r3, #280]	; 0x118
        return false;
    #else
        #if defined (NRF5340_XXAA_APPLICATION) || defined (DEVELOP_IN_NRF5340_APPLICATION)\
         || defined (NRF5340_XXAA_NETWORK) || defined (DEVELOP_IN_NRF5340_NETWORK)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    e16a:	4b19      	ldr	r3, [pc, #100]	; (e1d0 <SystemInit+0xe8>)
                uint32_t var2 = *(uint32_t *)0x01FF0134ul;
            #endif
        #endif
        #if defined (NRF5340_XXAA_APPLICATION) || defined (DEVELOP_IN_NRF5340_APPLICATION)\
         || defined (NRF5340_XXAA_NETWORK) || defined (DEVELOP_IN_NRF5340_NETWORK)
            if (var1 == 0x07)
    e16c:	681b      	ldr	r3, [r3, #0]
    e16e:	2b07      	cmp	r3, #7
    e170:	d10e      	bne.n	e190 <SystemInit+0xa8>
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    e172:	4b18      	ldr	r3, [pc, #96]	; (e1d4 <SystemInit+0xec>)
            {
                switch(var2)
    e174:	681b      	ldr	r3, [r3, #0]
    e176:	3b02      	subs	r3, #2
    e178:	2b01      	cmp	r3, #1
    e17a:	d809      	bhi.n	e190 <SystemInit+0xa8>

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    e17c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    e180:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    e184:	07d2      	lsls	r2, r2, #31
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    e186:	bf44      	itt	mi
    e188:	f06f 0201 	mvnmi.w	r2, #1
    e18c:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    e190:	f7ff ff8c 	bl	e0ac <nrf53_errata_42>
    e194:	b110      	cbz	r0, e19c <SystemInit+0xb4>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    e196:	2265      	movs	r2, #101	; 0x65
    e198:	4b0f      	ldr	r3, [pc, #60]	; (e1d8 <SystemInit+0xf0>)
    e19a:	601a      	str	r2, [r3, #0]

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    e19c:	4a0f      	ldr	r2, [pc, #60]	; (e1dc <SystemInit+0xf4>)
    e19e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    e1a2:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    e1a6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
}
    e1aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SystemCoreClockUpdate();
    e1ae:	f7ff bf8b 	b.w	e0c8 <SystemCoreClockUpdate>
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    e1b2:	2229      	movs	r2, #41	; 0x29
    e1b4:	4b08      	ldr	r3, [pc, #32]	; (e1d8 <SystemInit+0xf0>)
    e1b6:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    e1b8:	2203      	movs	r2, #3
    e1ba:	631a      	str	r2, [r3, #48]	; 0x30
    e1bc:	e7b6      	b.n	e12c <SystemInit+0x44>
    e1be:	bf00      	nop
    e1c0:	50004a20 	.word	0x50004a20
    e1c4:	50039530 	.word	0x50039530
    e1c8:	beef0044 	.word	0xbeef0044
    e1cc:	5003254c 	.word	0x5003254c
    e1d0:	00ff0130 	.word	0x00ff0130
    e1d4:	00ff0134 	.word	0x00ff0134
    e1d8:	5000470c 	.word	0x5000470c
    e1dc:	e000ed00 	.word	0xe000ed00

0000e1e0 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
    e1e0:	b570      	push	{r4, r5, r6, lr}
    e1e2:	4616      	mov	r6, r2
    NRFX_ASSERT(handler);
    e1e4:	460d      	mov	r5, r1
    e1e6:	b949      	cbnz	r1, e1fc <nrfx_ipc_init+0x1c>
    e1e8:	490b      	ldr	r1, [pc, #44]	; (e218 <nrfx_ipc_init+0x38>)
    e1ea:	480c      	ldr	r0, [pc, #48]	; (e21c <nrfx_ipc_init+0x3c>)
    e1ec:	2332      	movs	r3, #50	; 0x32
    e1ee:	4a0c      	ldr	r2, [pc, #48]	; (e220 <nrfx_ipc_init+0x40>)
    e1f0:	f003 ff8a 	bl	12108 <printk>
    e1f4:	2132      	movs	r1, #50	; 0x32
    e1f6:	480a      	ldr	r0, [pc, #40]	; (e220 <nrfx_ipc_init+0x40>)
    e1f8:	f004 fa1c 	bl	12634 <assert_post_action>
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    e1fc:	4c09      	ldr	r4, [pc, #36]	; (e224 <nrfx_ipc_init+0x44>)
    e1fe:	7923      	ldrb	r3, [r4, #4]
    e200:	b943      	cbnz	r3, e214 <nrfx_ipc_init+0x34>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
    e202:	202a      	movs	r0, #42	; 0x2a
    e204:	f7f5 fd04 	bl	3c10 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    e208:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
    e20a:	4807      	ldr	r0, [pc, #28]	; (e228 <nrfx_ipc_init+0x48>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    e20c:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
    e20e:	6025      	str	r5, [r4, #0]
    m_ipc_cb.p_context = p_context;
    e210:	60a6      	str	r6, [r4, #8]
}
    e212:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
    e214:	4805      	ldr	r0, [pc, #20]	; (e22c <nrfx_ipc_init+0x4c>)
    e216:	e7fc      	b.n	e212 <nrfx_ipc_init+0x32>
    e218:	0001b2c2 	.word	0x0001b2c2
    e21c:	00017d82 	.word	0x00017d82
    e220:	0001b454 	.word	0x0001b454
    e224:	2000130c 	.word	0x2000130c
    e228:	0bad0000 	.word	0x0bad0000
    e22c:	0bad000c 	.word	0x0bad000c

0000e230 <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
    e230:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
    e232:	4604      	mov	r4, r0
    e234:	b948      	cbnz	r0, e24a <nrfx_ipc_config_load+0x1a>
    e236:	491a      	ldr	r1, [pc, #104]	; (e2a0 <nrfx_ipc_config_load+0x70>)
    e238:	481a      	ldr	r0, [pc, #104]	; (e2a4 <nrfx_ipc_config_load+0x74>)
    e23a:	2344      	movs	r3, #68	; 0x44
    e23c:	4a1a      	ldr	r2, [pc, #104]	; (e2a8 <nrfx_ipc_config_load+0x78>)
    e23e:	f003 ff63 	bl	12108 <printk>
    e242:	2144      	movs	r1, #68	; 0x44
    e244:	4818      	ldr	r0, [pc, #96]	; (e2a8 <nrfx_ipc_config_load+0x78>)
    e246:	f004 f9f5 	bl	12634 <assert_post_action>
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    e24a:	4b18      	ldr	r3, [pc, #96]	; (e2ac <nrfx_ipc_config_load+0x7c>)
    e24c:	791b      	ldrb	r3, [r3, #4]
    e24e:	2b01      	cmp	r3, #1
    e250:	d009      	beq.n	e266 <nrfx_ipc_config_load+0x36>
    e252:	4917      	ldr	r1, [pc, #92]	; (e2b0 <nrfx_ipc_config_load+0x80>)
    e254:	4813      	ldr	r0, [pc, #76]	; (e2a4 <nrfx_ipc_config_load+0x74>)
    e256:	2345      	movs	r3, #69	; 0x45
    e258:	4a13      	ldr	r2, [pc, #76]	; (e2a8 <nrfx_ipc_config_load+0x78>)
    e25a:	f003 ff55 	bl	12108 <printk>
    e25e:	2145      	movs	r1, #69	; 0x45
    e260:	4811      	ldr	r0, [pc, #68]	; (e2a8 <nrfx_ipc_config_load+0x78>)
    e262:	f004 f9e7 	bl	12634 <assert_post_action>
{
    e266:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
    e268:	4a12      	ldr	r2, [pc, #72]	; (e2b4 <nrfx_ipc_config_load+0x84>)

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
    e26a:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
    e26e:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
    e272:	3301      	adds	r3, #1
    e274:	2b10      	cmp	r3, #16
    e276:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
    e27a:	d1f6      	bne.n	e26a <nrfx_ipc_config_load+0x3a>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
    e27c:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
    e27e:	4a0d      	ldr	r2, [pc, #52]	; (e2b4 <nrfx_ipc_config_load+0x84>)
    e280:	f104 0140 	add.w	r1, r4, #64	; 0x40
    e284:	f503 70b2 	add.w	r0, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
    e288:	f851 5b04 	ldr.w	r5, [r1], #4
    for (i = 0; i < IPC_CONF_NUM; ++i)
    e28c:	3301      	adds	r3, #1
    e28e:	2b10      	cmp	r3, #16
    e290:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    e294:	d1f6      	bne.n	e284 <nrfx_ipc_config_load+0x54>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
    e296:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    p_reg->INTENSET = mask;
    e29a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    e29e:	bd38      	pop	{r3, r4, r5, pc}
    e2a0:	0001b48f 	.word	0x0001b48f
    e2a4:	00017d82 	.word	0x00017d82
    e2a8:	0001b454 	.word	0x0001b454
    e2ac:	2000130c 	.word	0x2000130c
    e2b0:	0001b498 	.word	0x0001b498
    e2b4:	5002a000 	.word	0x5002a000

0000e2b8 <nrfx_ipc_receive_event_enable>:
    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    e2b8:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    e2ba:	4b0b      	ldr	r3, [pc, #44]	; (e2e8 <nrfx_ipc_receive_event_enable+0x30>)
{
    e2bc:	4604      	mov	r4, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    e2be:	791b      	ldrb	r3, [r3, #4]
    e2c0:	2b01      	cmp	r3, #1
    e2c2:	d009      	beq.n	e2d8 <nrfx_ipc_receive_event_enable+0x20>
    e2c4:	4909      	ldr	r1, [pc, #36]	; (e2ec <nrfx_ipc_receive_event_enable+0x34>)
    e2c6:	480a      	ldr	r0, [pc, #40]	; (e2f0 <nrfx_ipc_receive_event_enable+0x38>)
    e2c8:	236a      	movs	r3, #106	; 0x6a
    e2ca:	4a0a      	ldr	r2, [pc, #40]	; (e2f4 <nrfx_ipc_receive_event_enable+0x3c>)
    e2cc:	f003 ff1c 	bl	12108 <printk>
    e2d0:	216a      	movs	r1, #106	; 0x6a
    e2d2:	4808      	ldr	r0, [pc, #32]	; (e2f4 <nrfx_ipc_receive_event_enable+0x3c>)
    e2d4:	f004 f9ae 	bl	12634 <assert_post_action>
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
    e2d8:	2301      	movs	r3, #1
    e2da:	fa03 f404 	lsl.w	r4, r3, r4
    e2de:	4b06      	ldr	r3, [pc, #24]	; (e2f8 <nrfx_ipc_receive_event_enable+0x40>)
    e2e0:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
}
    e2e4:	bd10      	pop	{r4, pc}
    e2e6:	bf00      	nop
    e2e8:	2000130c 	.word	0x2000130c
    e2ec:	0001b498 	.word	0x0001b498
    e2f0:	00017d82 	.word	0x00017d82
    e2f4:	0001b454 	.word	0x0001b454
    e2f8:	5002a000 	.word	0x5002a000

0000e2fc <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    e2fc:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    e2fe:	4b0b      	ldr	r3, [pc, #44]	; (e32c <nrfx_ipc_receive_event_disable+0x30>)
{
    e300:	4604      	mov	r4, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    e302:	791b      	ldrb	r3, [r3, #4]
    e304:	2b01      	cmp	r3, #1
    e306:	d009      	beq.n	e31c <nrfx_ipc_receive_event_disable+0x20>
    e308:	4909      	ldr	r1, [pc, #36]	; (e330 <nrfx_ipc_receive_event_disable+0x34>)
    e30a:	480a      	ldr	r0, [pc, #40]	; (e334 <nrfx_ipc_receive_event_disable+0x38>)
    e30c:	2370      	movs	r3, #112	; 0x70
    e30e:	4a0a      	ldr	r2, [pc, #40]	; (e338 <nrfx_ipc_receive_event_disable+0x3c>)
    e310:	f003 fefa 	bl	12108 <printk>
    e314:	2170      	movs	r1, #112	; 0x70
    e316:	4808      	ldr	r0, [pc, #32]	; (e338 <nrfx_ipc_receive_event_disable+0x3c>)
    e318:	f004 f98c 	bl	12634 <assert_post_action>
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
    e31c:	2301      	movs	r3, #1
    e31e:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->INTENCLR = mask;
    e322:	4b06      	ldr	r3, [pc, #24]	; (e33c <nrfx_ipc_receive_event_disable+0x40>)
    e324:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
}
    e328:	bd10      	pop	{r4, pc}
    e32a:	bf00      	nop
    e32c:	2000130c 	.word	0x2000130c
    e330:	0001b498 	.word	0x0001b498
    e334:	00017d82 	.word	0x00017d82
    e338:	0001b454 	.word	0x0001b454
    e33c:	5002a000 	.word	0x5002a000

0000e340 <nrfx_ipc_irq_handler>:
    return p_reg->INTPEND;
    e340:	4b16      	ldr	r3, [pc, #88]	; (e39c <nrfx_ipc_irq_handler+0x5c>)
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
    e342:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e346:	f8d3 630c 	ldr.w	r6, [r3, #780]	; 0x30c
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    e34a:	f8df 9060 	ldr.w	r9, [pc, #96]	; e3ac <nrfx_ipc_irq_handler+0x6c>
    // Get the information about events that fire this interrupt
    uint32_t events_map = nrf_ipc_int_pending_get(NRF_IPC);

    // Clear these events
    uint32_t bitmask = events_map;
    e34e:	4635      	mov	r5, r6
    e350:	4f13      	ldr	r7, [pc, #76]	; (e3a0 <nrfx_ipc_irq_handler+0x60>)
    e352:	f8df 805c 	ldr.w	r8, [pc, #92]	; e3b0 <nrfx_ipc_irq_handler+0x70>
    while (bitmask)
    e356:	b935      	cbnz	r5, e366 <nrfx_ipc_irq_handler+0x26>
        bitmask &= ~(1UL << event_idx);
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
    e358:	4b12      	ldr	r3, [pc, #72]	; (e3a4 <nrfx_ipc_irq_handler+0x64>)
    e35a:	4630      	mov	r0, r6
}
    e35c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
    e360:	681a      	ldr	r2, [r3, #0]
    e362:	6899      	ldr	r1, [r3, #8]
    e364:	4710      	bx	r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    e366:	fa95 f4a5 	rbit	r4, r5
        bitmask &= ~(1UL << event_idx);
    e36a:	2301      	movs	r3, #1
  return __builtin_clz(value);
    e36c:	fab4 f484 	clz	r4, r4
    e370:	40a3      	lsls	r3, r4
    e372:	2c0f      	cmp	r4, #15
    e374:	ea25 0503 	bic.w	r5, r5, r3
    e378:	d90b      	bls.n	e392 <nrfx_ipc_irq_handler+0x52>
    e37a:	4639      	mov	r1, r7
    e37c:	4640      	mov	r0, r8
    e37e:	f240 13e5 	movw	r3, #485	; 0x1e5
    e382:	464a      	mov	r2, r9
    e384:	f003 fec0 	bl	12108 <printk>
    e388:	f240 11e5 	movw	r1, #485	; 0x1e5
    e38c:	4648      	mov	r0, r9
    e38e:	f004 f951 	bl	12634 <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e392:	2200      	movs	r2, #0
    e394:	4b04      	ldr	r3, [pc, #16]	; (e3a8 <nrfx_ipc_irq_handler+0x68>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    e396:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e398:	511a      	str	r2, [r3, r4]
}
    e39a:	e7dc      	b.n	e356 <nrfx_ipc_irq_handler+0x16>
    e39c:	5002a000 	.word	0x5002a000
    e3a0:	0001b4f7 	.word	0x0001b4f7
    e3a4:	2000130c 	.word	0x2000130c
    e3a8:	5002a100 	.word	0x5002a100
    e3ac:	0001b4c5 	.word	0x0001b4c5
    e3b0:	00017d82 	.word	0x00017d82

0000e3b4 <nrfx_nvmc_page_erase>:
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
    e3b4:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
{
    e3b8:	b510      	push	{r4, lr}
    e3ba:	4604      	mov	r4, r0
    NRFX_ASSERT(((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
    e3bc:	d310      	bcc.n	e3e0 <nrfx_nvmc_page_erase+0x2c>
    e3be:	f100 437f 	add.w	r3, r0, #4278190080	; 0xff000000
    e3c2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e3c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    e3ca:	d309      	bcc.n	e3e0 <nrfx_nvmc_page_erase+0x2c>
    e3cc:	490f      	ldr	r1, [pc, #60]	; (e40c <nrfx_nvmc_page_erase+0x58>)
    e3ce:	4810      	ldr	r0, [pc, #64]	; (e410 <nrfx_nvmc_page_erase+0x5c>)
    e3d0:	23e1      	movs	r3, #225	; 0xe1
    e3d2:	4a10      	ldr	r2, [pc, #64]	; (e414 <nrfx_nvmc_page_erase+0x60>)
    e3d4:	f003 fe98 	bl	12108 <printk>
    e3d8:	21e1      	movs	r1, #225	; 0xe1
    e3da:	480e      	ldr	r0, [pc, #56]	; (e414 <nrfx_nvmc_page_erase+0x60>)
    e3dc:	f004 f92a 	bl	12634 <assert_post_action>
    return !(addr % flash_page_size_get());
    e3e0:	f3c4 030b 	ubfx	r3, r4, #0, #12
#if !defined(NRF_TRUSTZONE_NONSECURE)
     || ((addr - (uint32_t)NRF_UICR) < sizeof(NRF_UICR_Type))
#endif
    );

    if (!is_page_aligned_check(addr))
    e3e4:	b97b      	cbnz	r3, e406 <nrfx_nvmc_page_erase+0x52>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
    e3e6:	2202      	movs	r2, #2
    e3e8:	4b0b      	ldr	r3, [pc, #44]	; (e418 <nrfx_nvmc_page_erase+0x64>)
    e3ea:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
    e3ee:	f04f 32ff 	mov.w	r2, #4294967295
    e3f2:	6022      	str	r2, [r4, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    e3f4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    e3f8:	07d2      	lsls	r2, r2, #31
    e3fa:	d5fb      	bpl.n	e3f4 <nrfx_nvmc_page_erase+0x40>
    p_reg->CONFIG = (uint32_t)mode;
    e3fc:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
    e3fe:	4807      	ldr	r0, [pc, #28]	; (e41c <nrfx_nvmc_page_erase+0x68>)
    e400:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    e404:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_ADDR;
    e406:	4806      	ldr	r0, [pc, #24]	; (e420 <nrfx_nvmc_page_erase+0x6c>)
    e408:	e7fc      	b.n	e404 <nrfx_nvmc_page_erase+0x50>
    e40a:	bf00      	nop
    e40c:	0001b55e 	.word	0x0001b55e
    e410:	00017d82 	.word	0x00017d82
    e414:	0001b502 	.word	0x0001b502
    e418:	50039000 	.word	0x50039000
    e41c:	0bad0000 	.word	0x0bad0000
    e420:	0bad000a 	.word	0x0bad000a

0000e424 <nrfx_nvmc_word_write>:
    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    NRFX_ASSERT(((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
    e424:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
{
    e428:	b538      	push	{r3, r4, r5, lr}
    e42a:	4604      	mov	r4, r0
    e42c:	460d      	mov	r5, r1
    NRFX_ASSERT(((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
    e42e:	d312      	bcc.n	e456 <nrfx_nvmc_word_write+0x32>
    e430:	f100 437f 	add.w	r3, r0, #4278190080	; 0xff000000
    e434:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    e43c:	d30b      	bcc.n	e456 <nrfx_nvmc_word_write+0x32>
    e43e:	4914      	ldr	r1, [pc, #80]	; (e490 <nrfx_nvmc_word_write+0x6c>)
    e440:	4814      	ldr	r0, [pc, #80]	; (e494 <nrfx_nvmc_word_write+0x70>)
    e442:	f240 138b 	movw	r3, #395	; 0x18b
    e446:	4a14      	ldr	r2, [pc, #80]	; (e498 <nrfx_nvmc_word_write+0x74>)
    e448:	f003 fe5e 	bl	12108 <printk>
    e44c:	f240 118b 	movw	r1, #395	; 0x18b
    e450:	4811      	ldr	r0, [pc, #68]	; (e498 <nrfx_nvmc_word_write+0x74>)
    e452:	f004 f8ef 	bl	12634 <assert_post_action>
#if !defined(NRF_TRUSTZONE_NONSECURE)
     || ((addr - (uint32_t)NRF_UICR) < sizeof(NRF_UICR_Type))
#endif
    );
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
    e456:	07a1      	lsls	r1, r4, #30
    e458:	d00b      	beq.n	e472 <nrfx_nvmc_word_write+0x4e>
    e45a:	4910      	ldr	r1, [pc, #64]	; (e49c <nrfx_nvmc_word_write+0x78>)
    e45c:	480d      	ldr	r0, [pc, #52]	; (e494 <nrfx_nvmc_word_write+0x70>)
    e45e:	f44f 73c8 	mov.w	r3, #400	; 0x190
    e462:	4a0d      	ldr	r2, [pc, #52]	; (e498 <nrfx_nvmc_word_write+0x74>)
    e464:	f003 fe50 	bl	12108 <printk>
    e468:	f44f 71c8 	mov.w	r1, #400	; 0x190
    e46c:	480a      	ldr	r0, [pc, #40]	; (e498 <nrfx_nvmc_word_write+0x74>)
    e46e:	f004 f8e1 	bl	12634 <assert_post_action>
    e472:	2201      	movs	r2, #1
    e474:	4b0a      	ldr	r3, [pc, #40]	; (e4a0 <nrfx_nvmc_word_write+0x7c>)
    e476:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    e47a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    e47e:	07d2      	lsls	r2, r2, #31
    e480:	d5fb      	bpl.n	e47a <nrfx_nvmc_word_write+0x56>
    *(volatile uint32_t *)addr = value;
    e482:	6025      	str	r5, [r4, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    e484:	f3bf 8f5f 	dmb	sy
    p_reg->CONFIG = (uint32_t)mode;
    e488:	2200      	movs	r2, #0
    e48a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nvmc_write_mode_set();

    nvmc_word_write(addr, value);

    nvmc_readonly_mode_set();
}
    e48e:	bd38      	pop	{r3, r4, r5, pc}
    e490:	0001b55e 	.word	0x0001b55e
    e494:	00017d82 	.word	0x00017d82
    e498:	0001b502 	.word	0x0001b502
    e49c:	0001b5d4 	.word	0x0001b5d4
    e4a0:	50039000 	.word	0x50039000

0000e4a4 <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
    e4a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e4a8:	460e      	mov	r6, r1
    e4aa:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
    e4ac:	4d0c      	ldr	r5, [pc, #48]	; (e4e0 <metal_generic_dev_open+0x3c>)
    e4ae:	f855 4f18 	ldr.w	r4, [r5, #24]!
    e4b2:	42ac      	cmp	r4, r5
    e4b4:	d103      	bne.n	e4be <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
    e4b6:	f06f 0012 	mvn.w	r0, #18
    e4ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
    e4be:	4631      	mov	r1, r6
    e4c0:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
    e4c4:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
    e4c8:	f005 f908 	bl	136dc <strcmp>
    e4cc:	b930      	cbnz	r0, e4dc <metal_generic_dev_open+0x38>
			return metal_generic_dev_sys_open(dev);
    e4ce:	4640      	mov	r0, r8
			*device = dev;
    e4d0:	f8c7 8000 	str.w	r8, [r7]
}
    e4d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
    e4d8:	f007 bdcf 	b.w	1607a <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
    e4dc:	6824      	ldr	r4, [r4, #0]
    e4de:	e7e8      	b.n	e4b2 <metal_generic_dev_open+0xe>
    e4e0:	20001318 	.word	0x20001318

0000e4e4 <metal_bus_find>:
{
    e4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e4e8:	4607      	mov	r7, r0
    e4ea:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
    e4ec:	4e0b      	ldr	r6, [pc, #44]	; (e51c <metal_bus_find+0x38>)
    e4ee:	f856 4f08 	ldr.w	r4, [r6, #8]!
    e4f2:	42b4      	cmp	r4, r6
    e4f4:	d102      	bne.n	e4fc <metal_bus_find+0x18>
	return -ENOENT;
    e4f6:	f06f 0001 	mvn.w	r0, #1
    e4fa:	e00a      	b.n	e512 <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
    e4fc:	4639      	mov	r1, r7
    e4fe:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
    e502:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
    e506:	f005 f8e9 	bl	136dc <strcmp>
    e50a:	b920      	cbnz	r0, e516 <metal_bus_find+0x32>
    e50c:	b11d      	cbz	r5, e516 <metal_bus_find+0x32>
			*result = bus;
    e50e:	f8c5 8000 	str.w	r8, [r5]
}
    e512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
    e516:	6824      	ldr	r4, [r4, #0]
    e518:	e7eb      	b.n	e4f2 <metal_bus_find+0xe>
    e51a:	bf00      	nop
    e51c:	20001318 	.word	0x20001318

0000e520 <metal_bus_register>:
{
    e520:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
    e522:	4604      	mov	r4, r0
    e524:	b910      	cbnz	r0, e52c <metal_bus_register+0xc>
		return -EINVAL;
    e526:	f06f 0015 	mvn.w	r0, #21
}
    e52a:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
    e52c:	6800      	ldr	r0, [r0, #0]
    e52e:	2800      	cmp	r0, #0
    e530:	d0f9      	beq.n	e526 <metal_bus_register+0x6>
    e532:	f005 f8cc 	bl	136ce <strlen>
    e536:	2800      	cmp	r0, #0
    e538:	d0f5      	beq.n	e526 <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
    e53a:	2100      	movs	r1, #0
    e53c:	6820      	ldr	r0, [r4, #0]
    e53e:	f7ff ffd1 	bl	e4e4 <metal_bus_find>
    e542:	b1c0      	cbz	r0, e576 <metal_bus_register+0x56>
	metal_list_init(&bus->devices);
    e544:	f104 031c 	add.w	r3, r4, #28
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
	list->prev = list;
	list->next = list;
    e548:	e9c4 3307 	strd	r3, r3, [r4, #28]
}

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
	new_node->prev = node->prev;
    e54c:	4b0c      	ldr	r3, [pc, #48]	; (e580 <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
    e54e:	f104 0224 	add.w	r2, r4, #36	; 0x24
    e552:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
    e554:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
    e558:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
    e55a:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
    e55c:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
    e55e:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
    e560:	781a      	ldrb	r2, [r3, #0]
    e562:	2a06      	cmp	r2, #6
    e564:	d905      	bls.n	e572 <metal_bus_register+0x52>
    e566:	685b      	ldr	r3, [r3, #4]
    e568:	b143      	cbz	r3, e57c <metal_bus_register+0x5c>
    e56a:	2007      	movs	r0, #7
    e56c:	6822      	ldr	r2, [r4, #0]
    e56e:	4905      	ldr	r1, [pc, #20]	; (e584 <metal_bus_register+0x64>)
    e570:	4798      	blx	r3
	return 0;
    e572:	2000      	movs	r0, #0
    e574:	e7d9      	b.n	e52a <metal_bus_register+0xa>
		return -EEXIST;
    e576:	f06f 0010 	mvn.w	r0, #16
    e57a:	e7d6      	b.n	e52a <metal_bus_register+0xa>
	return 0;
    e57c:	4618      	mov	r0, r3
    e57e:	e7d4      	b.n	e52a <metal_bus_register+0xa>
    e580:	20001318 	.word	0x20001318
    e584:	0001b5fd 	.word	0x0001b5fd

0000e588 <metal_register_generic_device>:
{
    e588:	b510      	push	{r4, lr}
    e58a:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
    e58c:	6800      	ldr	r0, [r0, #0]
    e58e:	b910      	cbnz	r0, e596 <metal_register_generic_device+0xe>
		return -EINVAL;
    e590:	f06f 0015 	mvn.w	r0, #21
}
    e594:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
    e596:	f005 f89a 	bl	136ce <strlen>
    e59a:	2800      	cmp	r0, #0
    e59c:	d0f8      	beq.n	e590 <metal_register_generic_device+0x8>
    e59e:	68a3      	ldr	r3, [r4, #8]
    e5a0:	2b01      	cmp	r3, #1
    e5a2:	d8f5      	bhi.n	e590 <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
    e5a4:	4b06      	ldr	r3, [pc, #24]	; (e5c0 <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
    e5a6:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
    e5aa:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
    e5ac:	4b05      	ldr	r3, [pc, #20]	; (e5c4 <metal_register_generic_device+0x3c>)
    e5ae:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
    e5b0:	f103 0018 	add.w	r0, r3, #24
    e5b4:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
    e5b6:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
    e5b8:	61d9      	str	r1, [r3, #28]
	return 0;
    e5ba:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
    e5bc:	6011      	str	r1, [r2, #0]
}
    e5be:	e7e9      	b.n	e594 <metal_register_generic_device+0xc>
    e5c0:	200002b4 	.word	0x200002b4
    e5c4:	20001318 	.word	0x20001318

0000e5c8 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
    e5c8:	b538      	push	{r3, r4, r5, lr}
    e5ca:	4605      	mov	r5, r0
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
    e5cc:	4c0d      	ldr	r4, [pc, #52]	; (e604 <metal_init+0x3c>)
    e5ce:	2220      	movs	r2, #32
    e5d0:	4620      	mov	r0, r4
    e5d2:	2100      	movs	r1, #0
    e5d4:	f005 f8d8 	bl	13788 <memset>

	_metal.common.log_handler   = params->log_handler;
    e5d8:	682b      	ldr	r3, [r5, #0]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
    e5da:	4628      	mov	r0, r5
	_metal.common.log_handler   = params->log_handler;
    e5dc:	6063      	str	r3, [r4, #4]
	_metal.common.log_level     = params->log_level;
    e5de:	4623      	mov	r3, r4
    e5e0:	792a      	ldrb	r2, [r5, #4]
    e5e2:	f803 2b08 	strb.w	r2, [r3], #8
	list->next = list;
    e5e6:	e9c4 3302 	strd	r3, r3, [r4, #8]
	list->prev = list;
    e5ea:	f104 0310 	add.w	r3, r4, #16
	list->next = list;
    e5ee:	e9c4 3304 	strd	r3, r3, [r4, #16]
	list->prev = list;
    e5f2:	f104 0318 	add.w	r3, r4, #24
	list->next = list;
    e5f6:	e9c4 3306 	strd	r3, r3, [r4, #24]
	if (error)
		return error;

	return error;
}
    e5fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	error = metal_sys_init(params);
    e5fe:	f000 b803 	b.w	e608 <metal_sys_init>
    e602:	bf00      	nop
    e604:	20001318 	.word	0x20001318

0000e608 <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
    e608:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
    e60a:	4802      	ldr	r0, [pc, #8]	; (e614 <metal_sys_init+0xc>)
    e60c:	f7ff ff88 	bl	e520 <metal_bus_register>
	return 0;
}
    e610:	2000      	movs	r0, #0
    e612:	bd08      	pop	{r3, pc}
    e614:	200002b4 	.word	0x200002b4

0000e618 <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
    e618:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
    e61a:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
    e61c:	2b06      	cmp	r3, #6
{
    e61e:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
    e620:	bf88      	it	hi
    e622:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
    e624:	4b09      	ldr	r3, [pc, #36]	; (e64c <metal_zephyr_log_handler+0x34>)
{
    e626:	ac05      	add	r4, sp, #20
    e628:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
    e62c:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
    e630:	4807      	ldr	r0, [pc, #28]	; (e650 <metal_zephyr_log_handler+0x38>)
    e632:	f003 fd69 	bl	12108 <printk>

	va_start(args, format);
	vprintk(format, args);
    e636:	4621      	mov	r1, r4
    e638:	4628      	mov	r0, r5
	va_start(args, format);
    e63a:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
    e63c:	f7f2 ff10 	bl	1460 <vprintk>
	va_end(args);
}
    e640:	b002      	add	sp, #8
    e642:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    e646:	b003      	add	sp, #12
    e648:	4770      	bx	lr
    e64a:	bf00      	nop
    e64c:	0001765c 	.word	0x0001765c
    e650:	000191c1 	.word	0x000191c1

0000e654 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
    e654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e658:	b087      	sub	sp, #28
    e65a:	9305      	str	r3, [sp, #20]
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
    e65c:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
    e65e:	4606      	mov	r6, r0
	if (nvqs > num_vrings)
    e660:	4293      	cmp	r3, r2
{
    e662:	4617      	mov	r7, r2
	if (nvqs > num_vrings)
    e664:	d342      	bcc.n	e6ec <virtio_create_virtqueues+0x98>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
    e666:	2500      	movs	r5, #0
		vring_info = &vdev->vrings_info[i];
    e668:	f04f 0b18 	mov.w	fp, #24
	for (i = 0; i < nvqs; i++) {
    e66c:	42bd      	cmp	r5, r7
    e66e:	d103      	bne.n	e678 <virtio_create_virtqueues+0x24>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
    e670:	2000      	movs	r0, #0
}
    e672:	b007      	add	sp, #28
    e674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
    e678:	fb0b f805 	mul.w	r8, fp, r5
    e67c:	f8d6 902c 	ldr.w	r9, [r6, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_MASTER) {
    e680:	69b2      	ldr	r2, [r6, #24]
		vring_info = &vdev->vrings_info[i];
    e682:	eb09 0408 	add.w	r4, r9, r8
		vring_alloc = &vring_info->info;
    e686:	f104 0a04 	add.w	sl, r4, #4
		if (vdev->role == VIRTIO_DEV_MASTER) {
    e68a:	b9ca      	cbnz	r2, e6c0 <virtio_create_virtqueues+0x6c>
			struct metal_io_region *io = vring_info->io;
    e68c:	6960      	ldr	r0, [r4, #20]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
    e68e:	6863      	ldr	r3, [r4, #4]
    e690:	6801      	ldr	r1, [r0, #0]
			metal_io_block_set(io, offset, 0,
    e692:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
    e696:	1a59      	subs	r1, r3, r1
						      vring_alloc->align));
    e698:	68a3      	ldr	r3, [r4, #8]
static inline int vring_size(unsigned int num, unsigned long align)
{
	int size;

	size = num * sizeof(struct vring_desc);
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
    e69a:	f10c 0e03 	add.w	lr, ip, #3
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
    e69e:	1e5c      	subs	r4, r3, #1
    e6a0:	eb04 140c 	add.w	r4, r4, ip, lsl #4
    e6a4:	eb04 044e 	add.w	r4, r4, lr, lsl #1
    e6a8:	425b      	negs	r3, r3
    e6aa:	4023      	ands	r3, r4
			metal_io_block_set(io, offset, 0,
    e6ac:	6884      	ldr	r4, [r0, #8]
	size += sizeof(struct vring_used) +
    e6ae:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
    e6b2:	42a1      	cmp	r1, r4
    e6b4:	bf28      	it	cs
    e6b6:	f04f 31ff 	movcs.w	r1, #4294967295
    e6ba:	3306      	adds	r3, #6
    e6bc:	f007 fca4 	bl	16008 <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
    e6c0:	f859 3008 	ldr.w	r3, [r9, r8]
    e6c4:	9a05      	ldr	r2, [sp, #20]
    e6c6:	9302      	str	r3, [sp, #8]
    e6c8:	6a33      	ldr	r3, [r6, #32]
    e6ca:	4630      	mov	r0, r6
    e6cc:	6a1b      	ldr	r3, [r3, #32]
    e6ce:	b2a9      	uxth	r1, r5
    e6d0:	9301      	str	r3, [sp, #4]
    e6d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e6d4:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    e6d8:	9300      	str	r3, [sp, #0]
    e6da:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
    e6de:	4653      	mov	r3, sl
    e6e0:	f007 fce8 	bl	160b4 <virtqueue_create>
		if (ret)
    e6e4:	2800      	cmp	r0, #0
    e6e6:	d1c4      	bne.n	e672 <virtio_create_virtqueues+0x1e>
	for (i = 0; i < nvqs; i++) {
    e6e8:	3501      	adds	r5, #1
    e6ea:	e7bf      	b.n	e66c <virtio_create_virtqueues+0x18>
		return ERROR_VQUEUE_INVLD_PARAM;
    e6ec:	4800      	ldr	r0, [pc, #0]	; (e6f0 <virtio_create_virtqueues+0x9c>)
    e6ee:	e7c0      	b.n	e672 <virtio_create_virtqueues+0x1e>
    e6f0:	fffff440 	.word	0xfffff440

0000e6f4 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
    e6f4:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
    e6f6:	8944      	ldrh	r4, [r0, #10]
    e6f8:	428c      	cmp	r4, r1
    e6fa:	d312      	bcc.n	e722 <virtqueue_add_consumed_buffer+0x2e>
		return ERROR_VRING_NO_BUFF;
	}

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
    e6fc:	6a03      	ldr	r3, [r0, #32]
    e6fe:	3c01      	subs	r4, #1
    e700:	885d      	ldrh	r5, [r3, #2]
    e702:	402c      	ands	r4, r5
    e704:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
	used_desc->len = len;
    e708:	609a      	str	r2, [r3, #8]
	used_desc->id = head_idx;
    e70a:	6059      	str	r1, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
    e70c:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
    e710:	6a02      	ldr	r2, [r0, #32]
    e712:	8853      	ldrh	r3, [r2, #2]
    e714:	3301      	adds	r3, #1
    e716:	8053      	strh	r3, [r2, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
    e718:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
    e71a:	3301      	adds	r3, #1
    e71c:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
    e71e:	2000      	movs	r0, #0
}
    e720:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
    e722:	4801      	ldr	r0, [pc, #4]	; (e728 <virtqueue_add_consumed_buffer+0x34>)
    e724:	e7fc      	b.n	e720 <virtqueue_add_consumed_buffer+0x2c>
    e726:	bf00      	nop
    e728:	fffff441 	.word	0xfffff441

0000e72c <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
    e72c:	b430      	push	{r4, r5}
    e72e:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
    e730:	b148      	cbz	r0, e746 <rpmsg_send_offchannel_raw+0x1a>
    e732:	6a00      	ldr	r0, [r0, #32]
    e734:	b138      	cbz	r0, e746 <rpmsg_send_offchannel_raw+0x1a>
    e736:	b133      	cbz	r3, e746 <rpmsg_send_offchannel_raw+0x1a>
    e738:	3401      	adds	r4, #1
    e73a:	d004      	beq.n	e746 <rpmsg_send_offchannel_raw+0x1a>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
    e73c:	6f44      	ldr	r4, [r0, #116]	; 0x74
    e73e:	b114      	cbz	r4, e746 <rpmsg_send_offchannel_raw+0x1a>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
    e740:	46a4      	mov	ip, r4
						      size, wait);

	return RPMSG_ERR_PARAM;
}
    e742:	bc30      	pop	{r4, r5}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
    e744:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
    e746:	4801      	ldr	r0, [pc, #4]	; (e74c <rpmsg_send_offchannel_raw+0x20>)
}
    e748:	bc30      	pop	{r4, r5}
    e74a:	4770      	bx	lr
    e74c:	fffff82d 	.word	0xfffff82d

0000e750 <rpmsg_create_ept>:
}

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
    e750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e754:	460e      	mov	r6, r1
    e756:	4690      	mov	r8, r2
    e758:	461d      	mov	r5, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept)
    e75a:	4604      	mov	r4, r0
    e75c:	2800      	cmp	r0, #0
    e75e:	d066      	beq.n	e82e <rpmsg_create_ept+0xde>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
    e760:	f101 0758 	add.w	r7, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
    e764:	4638      	mov	r0, r7
    e766:	f007 fe5c 	bl	16422 <__metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
    e76a:	1c69      	adds	r1, r5, #1
    e76c:	f106 0248 	add.w	r2, r6, #72	; 0x48
    e770:	d059      	beq.n	e826 <rpmsg_create_ept+0xd6>
	if (addr < size)
    e772:	2d7f      	cmp	r5, #127	; 0x7f
    e774:	dc59      	bgt.n	e82a <rpmsg_create_ept+0xda>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
}

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
    e776:	0969      	lsrs	r1, r5, #5
    e778:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
    e77c:	f005 0c1f 	and.w	ip, r5, #31
    e780:	fa20 f30c 	lsr.w	r3, r0, ip
		status = rpmsg_is_address_set(rdev->bitmap,
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
    e784:	07db      	lsls	r3, r3, #31
    e786:	d506      	bpl.n	e796 <rpmsg_create_ept+0x46>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
					  src);
		} else if (status > 0) {
			status = RPMSG_SUCCESS;
    e788:	2500      	movs	r5, #0
    e78a:	4638      	mov	r0, r7
    e78c:	f002 fa38 	bl	10c00 <z_impl_k_sem_give>
	}

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
    e790:	4628      	mov	r0, r5
    e792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
    e796:	2301      	movs	r3, #1
    e798:	fa03 f30c 	lsl.w	r3, r3, ip
	bitmap[bit / METAL_BITS_PER_ULONG] |=
    e79c:	4303      	orrs	r3, r0
    e79e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
    e7a2:	4924      	ldr	r1, [pc, #144]	; (e834 <rpmsg_create_ept+0xe4>)
    e7a4:	2220      	movs	r2, #32
    e7a6:	f1b8 0f00 	cmp.w	r8, #0
    e7aa:	bf18      	it	ne
    e7ac:	4641      	movne	r1, r8
    e7ae:	4620      	mov	r0, r4
    e7b0:	f004 ff7a 	bl	136a8 <strncpy>
	ept->addr = src;
	ept->dest_addr = dest;
    e7b4:	9b06      	ldr	r3, [sp, #24]
	rpmsg_register_endpoint(rdev, ept);
    e7b6:	4621      	mov	r1, r4
    e7b8:	62a3      	str	r3, [r4, #40]	; 0x28
	ept->cb = cb;
    e7ba:	9b07      	ldr	r3, [sp, #28]
    e7bc:	4630      	mov	r0, r6
    e7be:	62e3      	str	r3, [r4, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
    e7c0:	9b08      	ldr	r3, [sp, #32]
	ept->addr = src;
    e7c2:	6265      	str	r5, [r4, #36]	; 0x24
	ept->ns_unbind_cb = ns_unbind_cb;
    e7c4:	6323      	str	r3, [r4, #48]	; 0x30
    e7c6:	f007 fe7b 	bl	164c0 <rpmsg_register_endpoint>
	if (rdev->support_ns && ept->dest_addr == RPMSG_ADDR_ANY) {
    e7ca:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
    e7ce:	2b00      	cmp	r3, #0
    e7d0:	d0da      	beq.n	e788 <rpmsg_create_ept+0x38>
    e7d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    e7d4:	3301      	adds	r3, #1
    e7d6:	d1d7      	bne.n	e788 <rpmsg_create_ept+0x38>
    e7d8:	4638      	mov	r0, r7
    e7da:	f002 fa11 	bl	10c00 <z_impl_k_sem_give>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
    e7de:	2100      	movs	r1, #0
    e7e0:	4620      	mov	r0, r4
    e7e2:	f007 fe24 	bl	1642e <rpmsg_send_ns_message>
    e7e6:	4605      	mov	r5, r0
    e7e8:	4638      	mov	r0, r7
    e7ea:	f007 fe1a 	bl	16422 <__metal_mutex_acquire>
		if (status)
    e7ee:	2d00      	cmp	r5, #0
    e7f0:	d0cb      	beq.n	e78a <rpmsg_create_ept+0x3a>
			rpmsg_unregister_endpoint(ept);
    e7f2:	4620      	mov	r0, r4
    e7f4:	f007 fdf7 	bl	163e6 <rpmsg_unregister_endpoint>
    e7f8:	e7c7      	b.n	e78a <rpmsg_create_ept+0x3a>
{
	unsigned int bit;

	for (bit = start;
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit++)
    e7fa:	3301      	adds	r3, #1
	for (bit = start;
    e7fc:	2b80      	cmp	r3, #128	; 0x80
    e7fe:	d0d0      	beq.n	e7a2 <rpmsg_create_ept+0x52>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
    e800:	0959      	lsrs	r1, r3, #5
    e802:	eb02 0e81 	add.w	lr, r2, r1, lsl #2
    e806:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
    e80a:	f003 0c1f 	and.w	ip, r3, #31
    e80e:	fa21 f00c 	lsr.w	r0, r1, ip
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
    e812:	07c0      	lsls	r0, r0, #31
    e814:	d4f1      	bmi.n	e7fa <rpmsg_create_ept+0xaa>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
    e816:	2001      	movs	r0, #1
    e818:	fa00 f00c 	lsl.w	r0, r0, ip
	bitmap[bit / METAL_BITS_PER_ULONG] |=
    e81c:	4308      	orrs	r0, r1
}
    e81e:	461d      	mov	r5, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
    e820:	f8ce 0000 	str.w	r0, [lr]
}
    e824:	e7bd      	b.n	e7a2 <rpmsg_create_ept+0x52>
	for (bit = start;
    e826:	2300      	movs	r3, #0
    e828:	e7ea      	b.n	e800 <rpmsg_create_ept+0xb0>
		return RPMSG_ERR_PARAM;
    e82a:	4d03      	ldr	r5, [pc, #12]	; (e838 <rpmsg_create_ept+0xe8>)
    e82c:	e7ad      	b.n	e78a <rpmsg_create_ept+0x3a>
		return RPMSG_ERR_PARAM;
    e82e:	4d02      	ldr	r5, [pc, #8]	; (e838 <rpmsg_create_ept+0xe8>)
    e830:	e7ae      	b.n	e790 <rpmsg_create_ept+0x40>
    e832:	bf00      	nop
    e834:	0001b122 	.word	0x0001b122
    e838:	fffff82d 	.word	0xfffff82d

0000e83c <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
    e83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e840:	4604      	mov	r4, r0
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	status = rpmsg_virtio_get_status(rvdev);
    e842:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
{
    e844:	469b      	mov	fp, r3
	rvdev->vdev->func->set_status(rvdev->vdev, status);
}

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_status(rvdev->vdev);
    e846:	6a03      	ldr	r3, [r0, #32]
    e848:	b08d      	sub	sp, #52	; 0x34
    e84a:	681b      	ldr	r3, [r3, #0]
    e84c:	4692      	mov	sl, r2
    e84e:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
    e852:	9103      	str	r1, [sp, #12]
    e854:	4798      	blx	r3
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
    e856:	0743      	lsls	r3, r0, #29
    e858:	f140 8089 	bpl.w	e96e <rpmsg_virtio_send_offchannel_raw+0x132>
		return RPMSG_ERR_DEV_STATE;
	}

	if (wait)
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
    e85c:	f643 2398 	movw	r3, #15000	; 0x3a98
    e860:	2f00      	cmp	r7, #0
    e862:	bf18      	it	ne
    e864:	461f      	movne	r7, r3

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
    e866:	f104 0858 	add.w	r8, r4, #88	; 0x58
    e86a:	4640      	mov	r0, r8
    e86c:	f007 fe67 	bl	1653e <__metal_mutex_acquire>
	return rvdev->vdev->role;
    e870:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    e872:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
    e874:	b373      	cbz	r3, e8d4 <rpmsg_virtio_send_offchannel_raw+0x98>
	if (role == RPMSG_REMOTE) {
    e876:	2b01      	cmp	r3, #1
    e878:	d108      	bne.n	e88c <rpmsg_virtio_send_offchannel_raw+0x50>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
    e87a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    e87e:	f007 fd9a 	bl	163b6 <virtqueue_get_desc_size>
    e882:	3810      	subs	r0, #16
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
		if (avail_size && size > avail_size) {
    e884:	2800      	cmp	r0, #0
    e886:	ea20 79e0 	bic.w	r9, r0, r0, asr #31
    e88a:	dc25      	bgt.n	e8d8 <rpmsg_virtio_send_offchannel_raw+0x9c>
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
    e88c:	f04f 0900 	mov.w	r9, #0
    e890:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    e892:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
    e894:	bb3b      	cbnz	r3, e8e6 <rpmsg_virtio_send_offchannel_raw+0xaa>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
    e896:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    e89a:	f10d 0212 	add.w	r2, sp, #18
    e89e:	a905      	add	r1, sp, #20
    e8a0:	f007 fc98 	bl	161d4 <virtqueue_get_buffer>
		if (!data) {
    e8a4:	4605      	mov	r5, r0
    e8a6:	b948      	cbnz	r0, e8bc <rpmsg_virtio_send_offchannel_raw+0x80>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
    e8a8:	f44f 7100 	mov.w	r1, #512	; 0x200
    e8ac:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    e8b0:	f007 fef4 	bl	1669c <rpmsg_virtio_shm_pool_get_buffer>
			*len = RPMSG_BUFFER_SIZE;
    e8b4:	f44f 7300 	mov.w	r3, #512	; 0x200
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
    e8b8:	4605      	mov	r5, r0
			*len = RPMSG_BUFFER_SIZE;
    e8ba:	9305      	str	r3, [sp, #20]
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
    e8bc:	4640      	mov	r0, r8
    e8be:	f007 fe26 	bl	1650e <k_sem_give>
			return RPMSG_ERR_BUFF_SIZE;
		}

		buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len, &idx);
		metal_mutex_release(&rdev->lock);
		if (buffer || !tick_count)
    e8c2:	2d00      	cmp	r5, #0
    e8c4:	d157      	bne.n	e976 <rpmsg_virtio_send_offchannel_raw+0x13a>
    e8c6:	2f00      	cmp	r7, #0
    e8c8:	d053      	beq.n	e972 <rpmsg_virtio_send_offchannel_raw+0x136>
			break;
		if (avail_size != 0)
    e8ca:	f1b9 0f00 	cmp.w	r9, #0
    e8ce:	d108      	bne.n	e8e2 <rpmsg_virtio_send_offchannel_raw+0xa6>
			return RPMSG_ERR_BUFF_SIZE;
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
		tick_count--;
    e8d0:	3f01      	subs	r7, #1
	while (1) {
    e8d2:	e7ca      	b.n	e86a <rpmsg_virtio_send_offchannel_raw+0x2e>
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
    e8d4:	f44f 79f8 	mov.w	r9, #496	; 0x1f0
		if (avail_size && size > avail_size) {
    e8d8:	454e      	cmp	r6, r9
    e8da:	ddd9      	ble.n	e890 <rpmsg_virtio_send_offchannel_raw+0x54>
    e8dc:	4640      	mov	r0, r8
    e8de:	f007 fe16 	bl	1650e <k_sem_give>
			return RPMSG_ERR_BUFF_SIZE;
    e8e2:	4e31      	ldr	r6, [pc, #196]	; (e9a8 <rpmsg_virtio_send_offchannel_raw+0x16c>)
    e8e4:	e03f      	b.n	e966 <rpmsg_virtio_send_offchannel_raw+0x12a>
	if (role == RPMSG_REMOTE) {
    e8e6:	2b01      	cmp	r3, #1
    e8e8:	d108      	bne.n	e8fc <rpmsg_virtio_send_offchannel_raw+0xc0>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
    e8ea:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    e8ee:	aa05      	add	r2, sp, #20
    e8f0:	f10d 0112 	add.w	r1, sp, #18
    e8f4:	f007 fca8 	bl	16248 <virtqueue_get_available_buffer>
    e8f8:	4605      	mov	r5, r0
    e8fa:	e7df      	b.n	e8bc <rpmsg_virtio_send_offchannel_raw+0x80>
	void *data = NULL;
    e8fc:	2500      	movs	r5, #0
    e8fe:	e7dd      	b.n	e8bc <rpmsg_virtio_send_offchannel_raw+0x80>
    e900:	683b      	ldr	r3, [r7, #0]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
    e902:	68b8      	ldr	r0, [r7, #8]
	io = rvdev->shbuf_io;
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");

	status = metal_io_block_write(io,
    e904:	f105 0110 	add.w	r1, r5, #16
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
    e908:	1ac9      	subs	r1, r1, r3
    e90a:	4281      	cmp	r1, r0
    e90c:	bf28      	it	cs
    e90e:	f04f 31ff 	movcs.w	r1, #4294967295
    e912:	4633      	mov	r3, r6
    e914:	465a      	mov	r2, fp
    e916:	4638      	mov	r0, r7
    e918:	f007 fb3b 	bl	15f92 <metal_io_block_write>
				      metal_io_virt_to_offset(io,
						RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\r\n");
    e91c:	4286      	cmp	r6, r0
    e91e:	d000      	beq.n	e922 <rpmsg_virtio_send_offchannel_raw+0xe6>
    e920:	e7fe      	b.n	e920 <rpmsg_virtio_send_offchannel_raw+0xe4>
    e922:	4640      	mov	r0, r8
    e924:	f007 fe0b 	bl	1653e <__metal_mutex_acquire>
    e928:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
	metal_mutex_acquire(&rdev->lock);

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
    e92a:	9a05      	ldr	r2, [sp, #20]
    e92c:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
    e92e:	b953      	cbnz	r3, e946 <rpmsg_virtio_send_offchannel_raw+0x10a>
		vqbuf.len = len;
    e930:	e9cd 5206 	strd	r5, r2, [sp, #24]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
    e934:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    e938:	2201      	movs	r2, #1
    e93a:	9500      	str	r5, [sp, #0]
    e93c:	a906      	add	r1, sp, #24
    e93e:	f007 fbe9 	bl	16114 <virtqueue_add_buffer>
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
    e942:	b148      	cbz	r0, e958 <rpmsg_virtio_send_offchannel_raw+0x11c>
    e944:	e7fe      	b.n	e944 <rpmsg_virtio_send_offchannel_raw+0x108>
	if (role == RPMSG_REMOTE) {
    e946:	2b01      	cmp	r3, #1
    e948:	d106      	bne.n	e958 <rpmsg_virtio_send_offchannel_raw+0x11c>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
    e94a:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    e94e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    e952:	f7ff fecf 	bl	e6f4 <virtqueue_add_consumed_buffer>
    e956:	e7f4      	b.n	e942 <rpmsg_virtio_send_offchannel_raw+0x106>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
    e958:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    e95c:	f007 fcf3 	bl	16346 <virtqueue_kick>
    e960:	4640      	mov	r0, r8
    e962:	f007 fdd4 	bl	1650e <k_sem_give>

	metal_mutex_release(&rdev->lock);

	return size;
}
    e966:	4630      	mov	r0, r6
    e968:	b00d      	add	sp, #52	; 0x34
    e96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return RPMSG_ERR_DEV_STATE;
    e96e:	4e0f      	ldr	r6, [pc, #60]	; (e9ac <rpmsg_virtio_send_offchannel_raw+0x170>)
    e970:	e7f9      	b.n	e966 <rpmsg_virtio_send_offchannel_raw+0x12a>
		return RPMSG_ERR_NO_BUFF;
    e972:	4e0f      	ldr	r6, [pc, #60]	; (e9b0 <rpmsg_virtio_send_offchannel_raw+0x174>)
    e974:	e7f7      	b.n	e966 <rpmsg_virtio_send_offchannel_raw+0x12a>
	rp_hdr.src = src;
    e976:	9b03      	ldr	r3, [sp, #12]
	io = rvdev->shbuf_io;
    e978:	f8d4 7088 	ldr.w	r7, [r4, #136]	; 0x88
	rp_hdr.src = src;
    e97c:	9308      	str	r3, [sp, #32]
	rp_hdr.reserved = 0;
    e97e:	2300      	movs	r3, #0
    e980:	6839      	ldr	r1, [r7, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
    e982:	68b8      	ldr	r0, [r7, #8]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
    e984:	1a69      	subs	r1, r5, r1
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
    e986:	4281      	cmp	r1, r0
    e988:	bf28      	it	cs
    e98a:	f04f 31ff 	movcs.w	r1, #4294967295
	rp_hdr.reserved = 0;
    e98e:	930a      	str	r3, [sp, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
    e990:	4638      	mov	r0, r7
    e992:	2310      	movs	r3, #16
    e994:	aa08      	add	r2, sp, #32
	rp_hdr.dst = dst;
    e996:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
	rp_hdr.len = size;
    e99a:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
    e99e:	f007 faf8 	bl	15f92 <metal_io_block_write>
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
    e9a2:	2810      	cmp	r0, #16
    e9a4:	d0ac      	beq.n	e900 <rpmsg_virtio_send_offchannel_raw+0xc4>
    e9a6:	e7fe      	b.n	e9a6 <rpmsg_virtio_send_offchannel_raw+0x16a>
    e9a8:	fffff82b 	.word	0xfffff82b
    e9ac:	fffff82c 	.word	0xfffff82c
    e9b0:	fffff82e 	.word	0xfffff82e

0000e9b4 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
    e9b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e9b8:	460d      	mov	r5, r1
    e9ba:	b088      	sub	sp, #32
    e9bc:	4617      	mov	r7, r2
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
	memset(rdev, 0, sizeof(*rdev));
    e9be:	2100      	movs	r1, #0
    e9c0:	227c      	movs	r2, #124	; 0x7c
{
    e9c2:	4604      	mov	r4, r0
    e9c4:	461e      	mov	r6, r3
    e9c6:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
	memset(rdev, 0, sizeof(*rdev));
    e9ca:	f004 fedd 	bl	13788 <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
    e9ce:	2201      	movs	r2, #1
    e9d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
    e9d4:	4611      	mov	r1, r2
    e9d6:	f007 ff1b 	bl	16810 <z_impl_k_sem_init>
	metal_mutex_init(&rdev->lock);
	rvdev->vdev = vdev;
	rdev->ns_bind_cb = ns_bind_cb;
	vdev->priv = rvdev;
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
    e9da:	4b5e      	ldr	r3, [pc, #376]	; (eb54 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf4>)
	rvdev->vdev = vdev;
    e9dc:	67e5      	str	r5, [r4, #124]	; 0x7c
	rdev->ns_bind_cb = ns_bind_cb;
    e9de:	6727      	str	r7, [r4, #112]	; 0x70
	vdev->priv = rvdev;
    e9e0:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
    e9e2:	6763      	str	r3, [r4, #116]	; 0x74
    e9e4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    e9e6:	f8d3 8018 	ldr.w	r8, [r3, #24]
	role = rpmsg_virtio_get_role(rvdev);

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
    e9ea:	f1b8 0f01 	cmp.w	r8, #1
    e9ee:	d020      	beq.n	ea32 <rpmsg_init_vdev+0x7e>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
    e9f0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
    e9f2:	6a03      	ldr	r3, [r0, #32]
    e9f4:	689b      	ldr	r3, [r3, #8]
    e9f6:	4798      	blx	r3
    e9f8:	2300      	movs	r3, #0
    e9fa:	6128      	str	r0, [r5, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
    e9fc:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
    ea00:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
    ea02:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
    ea06:	f1b8 0f00 	cmp.w	r8, #0
    ea0a:	d01e      	beq.n	ea4a <rpmsg_init_vdev+0x96>
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
    ea0c:	f1b8 0f01 	cmp.w	r8, #1
    ea10:	d133      	bne.n	ea7a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1a>
		vq_names[0] = "tx_vq";
    ea12:	4b51      	ldr	r3, [pc, #324]	; (eb58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf8>)
    ea14:	9302      	str	r3, [sp, #8]
		vq_names[1] = "rx_vq";
    ea16:	4b51      	ldr	r3, [pc, #324]	; (eb5c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfc>)
    ea18:	9303      	str	r3, [sp, #12]
		callback[0] = rpmsg_virtio_tx_callback;
    ea1a:	4b51      	ldr	r3, [pc, #324]	; (eb60 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x100>)
    ea1c:	9304      	str	r3, [sp, #16]
		callback[1] = rpmsg_virtio_rx_callback;
    ea1e:	4b51      	ldr	r3, [pc, #324]	; (eb64 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x104>)
    ea20:	9305      	str	r3, [sp, #20]
		rvdev->rvq  = vdev->vrings_info[1].vq;
    ea22:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    ea24:	699a      	ldr	r2, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
    ea26:	681b      	ldr	r3, [r3, #0]
		rvdev->rvq  = vdev->vrings_info[1].vq;
    ea28:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		rvdev->svq  = vdev->vrings_info[0].vq;
    ea2c:	e023      	b.n	ea76 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x16>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
    ea2e:	0743      	lsls	r3, r0, #29
    ea30:	d4de      	bmi.n	e9f0 <rpmsg_init_vdev+0x3c>
		status = rpmsg_virtio_get_status(rvdev);
    ea32:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	return rvdev->vdev->func->get_status(rvdev->vdev);
    ea34:	6a03      	ldr	r3, [r0, #32]
    ea36:	681b      	ldr	r3, [r3, #0]
    ea38:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
    ea3a:	0642      	lsls	r2, r0, #25
    ea3c:	d5f7      	bpl.n	ea2e <rpmsg_init_vdev+0x7a>
			rpmsg_virtio_set_status(rvdev, 0);
    ea3e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	rvdev->vdev->func->set_status(rvdev->vdev, status);
    ea40:	2100      	movs	r1, #0
    ea42:	6a03      	ldr	r3, [r0, #32]
    ea44:	685b      	ldr	r3, [r3, #4]
    ea46:	4798      	blx	r3
}
    ea48:	e7f3      	b.n	ea32 <rpmsg_init_vdev+0x7e>
		if (!shpool)
    ea4a:	f1b9 0f00 	cmp.w	r9, #0
    ea4e:	d07d      	beq.n	eb4c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xec>
		if (!shpool->size)
    ea50:	f8d9 3008 	ldr.w	r3, [r9, #8]
    ea54:	2b00      	cmp	r3, #0
    ea56:	d07b      	beq.n	eb50 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf0>
		vq_names[0] = "rx_vq";
    ea58:	4b40      	ldr	r3, [pc, #256]	; (eb5c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfc>)
		rvdev->shpool = shpool;
    ea5a:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
		vq_names[0] = "rx_vq";
    ea5e:	9302      	str	r3, [sp, #8]
		vq_names[1] = "tx_vq";
    ea60:	4b3d      	ldr	r3, [pc, #244]	; (eb58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf8>)
    ea62:	9303      	str	r3, [sp, #12]
		callback[0] = rpmsg_virtio_rx_callback;
    ea64:	4b3f      	ldr	r3, [pc, #252]	; (eb64 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x104>)
    ea66:	9304      	str	r3, [sp, #16]
		callback[1] = rpmsg_virtio_tx_callback;
    ea68:	4b3d      	ldr	r3, [pc, #244]	; (eb60 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x100>)
    ea6a:	9305      	str	r3, [sp, #20]
		rvdev->rvq  = vdev->vrings_info[0].vq;
    ea6c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    ea6e:	681a      	ldr	r2, [r3, #0]
		rvdev->svq  = vdev->vrings_info[1].vq;
    ea70:	699b      	ldr	r3, [r3, #24]
		rvdev->rvq  = vdev->vrings_info[0].vq;
    ea72:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		rvdev->svq  = vdev->vrings_info[0].vq;
    ea76:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
    ea7a:	ab04      	add	r3, sp, #16
    ea7c:	9300      	str	r3, [sp, #0]
    ea7e:	2202      	movs	r2, #2
    ea80:	2100      	movs	r1, #0
    ea82:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
    ea84:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    ea88:	ab02      	add	r3, sp, #8
    ea8a:	f7ff fde3 	bl	e654 <virtio_create_virtqueues>

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
    ea8e:	4607      	mov	r7, r0
    ea90:	2800      	cmp	r0, #0
    ea92:	d157      	bne.n	eb44 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe4>

	/*
	 * Suppress "tx-complete" interrupts
	 * since send method use busy loop when buffer pool exhaust
	 */
	virtqueue_disable_cb(rvdev->svq);
    ea94:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    ea98:	f007 fc2b 	bl	162f2 <virtqueue_disable_cb>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
    ea9c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		vq->shm_io = shm_io;
    ea9e:	681a      	ldr	r2, [r3, #0]
    eaa0:	699b      	ldr	r3, [r3, #24]
    eaa2:	6296      	str	r6, [r2, #40]	; 0x28
    eaa4:	629e      	str	r6, [r3, #40]	; 0x28
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
    eaa6:	f1b8 0f00 	cmp.w	r8, #0
    eaaa:	d108      	bne.n	eabe <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5e>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
    eaac:	f44f 7300 	mov.w	r3, #512	; 0x200
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
    eab0:	46c2      	mov	sl, r8
		vqbuf.len = RPMSG_BUFFER_SIZE;
    eab2:	9307      	str	r3, [sp, #28]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
    eab4:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    eab8:	895b      	ldrh	r3, [r3, #10]
    eaba:	4553      	cmp	r3, sl
    eabc:	d81f      	bhi.n	eafe <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9e>

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if (rdev->support_ns) {
    eabe:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    eac2:	e9c4 4400 	strd	r4, r4, [r4]
    eac6:	b18b      	cbz	r3, eaec <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8c>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
    eac8:	f104 0508 	add.w	r5, r4, #8
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
    eacc:	4926      	ldr	r1, [pc, #152]	; (eb68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x108>)
    eace:	2220      	movs	r2, #32
    ead0:	4628      	mov	r0, r5
    ead2:	f004 fde9 	bl	136a8 <strncpy>
	ept->addr = src;
    ead6:	2335      	movs	r3, #53	; 0x35
	ept->dest_addr = dest;
    ead8:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
	ept->cb = cb;
    eadc:	4b23      	ldr	r3, [pc, #140]	; (eb6c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10c>)
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		rpmsg_register_endpoint(rdev, &rdev->ns_ept);
    eade:	4629      	mov	r1, r5
    eae0:	6363      	str	r3, [r4, #52]	; 0x34
	ept->ns_unbind_cb = ns_unbind_cb;
    eae2:	2300      	movs	r3, #0
    eae4:	4620      	mov	r0, r4
    eae6:	63a3      	str	r3, [r4, #56]	; 0x38
    eae8:	f007 fcea 	bl	164c0 <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
    eaec:	f1b8 0f00 	cmp.w	r8, #0
    eaf0:	d128      	bne.n	eb44 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe4>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
    eaf2:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	rvdev->vdev->func->set_status(rvdev->vdev, status);
    eaf4:	2104      	movs	r1, #4
    eaf6:	6a03      	ldr	r3, [r0, #32]
    eaf8:	685b      	ldr	r3, [r3, #4]
    eafa:	4798      	blx	r3
}
    eafc:	e022      	b.n	eb44 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe4>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
    eafe:	f44f 7100 	mov.w	r1, #512	; 0x200
    eb02:	4648      	mov	r0, r9
    eb04:	f007 fdca 	bl	1669c <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
    eb08:	4605      	mov	r5, r0
    eb0a:	b1c8      	cbz	r0, eb40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe0>
    eb0c:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
    eb0e:	9006      	str	r0, [sp, #24]
    eb10:	1a41      	subs	r1, r0, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
    eb12:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
    eb14:	f44f 7300 	mov.w	r3, #512	; 0x200
    eb18:	4281      	cmp	r1, r0
    eb1a:	bf28      	it	cs
    eb1c:	f04f 31ff 	movcs.w	r1, #4294967295
    eb20:	2200      	movs	r2, #0
    eb22:	4630      	mov	r0, r6
    eb24:	f007 fa70 	bl	16008 <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
    eb28:	2301      	movs	r3, #1
    eb2a:	2200      	movs	r2, #0
    eb2c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    eb30:	9500      	str	r5, [sp, #0]
    eb32:	a906      	add	r1, sp, #24
    eb34:	f007 faee 	bl	16114 <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
    eb38:	b918      	cbnz	r0, eb42 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe2>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
    eb3a:	f10a 0a01 	add.w	sl, sl, #1
    eb3e:	e7b9      	b.n	eab4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x54>
				return RPMSG_ERR_NO_BUFF;
    eb40:	480b      	ldr	r0, [pc, #44]	; (eb70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x110>)
    eb42:	4607      	mov	r7, r0
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
}
    eb44:	4638      	mov	r0, r7
    eb46:	b008      	add	sp, #32
    eb48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return RPMSG_ERR_PARAM;
    eb4c:	4f09      	ldr	r7, [pc, #36]	; (eb74 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x114>)
    eb4e:	e7f9      	b.n	eb44 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe4>
			return RPMSG_ERR_NO_BUFF;
    eb50:	4f07      	ldr	r7, [pc, #28]	; (eb70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x110>)
    eb52:	e7f7      	b.n	eb44 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe4>
    eb54:	0000e83d 	.word	0x0000e83d
    eb58:	0001b6ae 	.word	0x0001b6ae
    eb5c:	0001b6a8 	.word	0x0001b6a8
    eb60:	0001650d 	.word	0x0001650d
    eb64:	000165dd 	.word	0x000165dd
    eb68:	0001b6b4 	.word	0x0001b6b4
    eb6c:	0001654b 	.word	0x0001654b
    eb70:	fffff82e 	.word	0xfffff82e
    eb74:	fffff82d 	.word	0xfffff82d

0000eb78 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(s32_t level)
{
    eb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			if (dev) {
				/* Initialization failed. Clear the API struct
				 * so that device_get_binding() will not succeed
				 * for it.
				 */
				dev->driver_api = NULL;
    eb7a:	2700      	movs	r7, #0
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    eb7c:	4b08      	ldr	r3, [pc, #32]	; (eba0 <z_sys_init_run_level+0x28>)
    eb7e:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    eb82:	3001      	adds	r0, #1
    eb84:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    eb88:	42a6      	cmp	r6, r4
    eb8a:	d800      	bhi.n	eb8e <z_sys_init_run_level+0x16>
			}
		}
	}
}
    eb8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		retval = entry->init(dev);
    eb8e:	e9d4 3500 	ldrd	r3, r5, [r4]
    eb92:	4628      	mov	r0, r5
    eb94:	4798      	blx	r3
		if (retval != 0) {
    eb96:	b108      	cbz	r0, eb9c <z_sys_init_run_level+0x24>
			if (dev) {
    eb98:	b105      	cbz	r5, eb9c <z_sys_init_run_level+0x24>
				dev->driver_api = NULL;
    eb9a:	60af      	str	r7, [r5, #8]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    eb9c:	3408      	adds	r4, #8
    eb9e:	e7f3      	b.n	eb88 <z_sys_init_run_level+0x10>
    eba0:	0001767c 	.word	0x0001767c

0000eba4 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
    eba4:	4b0f      	ldr	r3, [pc, #60]	; (ebe4 <z_impl_device_get_binding+0x40>)
{
    eba6:	b570      	push	{r4, r5, r6, lr}
    eba8:	4605      	mov	r5, r0
    ebaa:	461e      	mov	r6, r3
	for (dev = __device_start; dev != __device_end; dev++) {
    ebac:	4c0e      	ldr	r4, [pc, #56]	; (ebe8 <z_impl_device_get_binding+0x44>)
    ebae:	429c      	cmp	r4, r3
    ebb0:	d104      	bne.n	ebbc <z_impl_device_get_binding+0x18>
		    (dev->name == name)) {
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
    ebb2:	4c0d      	ldr	r4, [pc, #52]	; (ebe8 <z_impl_device_get_binding+0x44>)
    ebb4:	42b4      	cmp	r4, r6
    ebb6:	d108      	bne.n	ebca <z_impl_device_get_binding+0x26>
		    (strcmp(name, dev->name) == 0)) {
			return dev;
		}
	}

	return NULL;
    ebb8:	2400      	movs	r4, #0
    ebba:	e010      	b.n	ebde <z_impl_device_get_binding+0x3a>
		if ((dev->driver_api != NULL) &&
    ebbc:	68a2      	ldr	r2, [r4, #8]
    ebbe:	b112      	cbz	r2, ebc6 <z_impl_device_get_binding+0x22>
    ebc0:	6822      	ldr	r2, [r4, #0]
    ebc2:	42aa      	cmp	r2, r5
    ebc4:	d00b      	beq.n	ebde <z_impl_device_get_binding+0x3a>
	for (dev = __device_start; dev != __device_end; dev++) {
    ebc6:	3410      	adds	r4, #16
    ebc8:	e7f1      	b.n	ebae <z_impl_device_get_binding+0xa>
		if ((dev->driver_api != NULL) &&
    ebca:	68a3      	ldr	r3, [r4, #8]
    ebcc:	b90b      	cbnz	r3, ebd2 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    ebce:	3410      	adds	r4, #16
    ebd0:	e7f0      	b.n	ebb4 <z_impl_device_get_binding+0x10>
		    (strcmp(name, dev->name) == 0)) {
    ebd2:	4628      	mov	r0, r5
    ebd4:	6821      	ldr	r1, [r4, #0]
    ebd6:	f004 fd81 	bl	136dc <strcmp>
		if ((dev->driver_api != NULL) &&
    ebda:	2800      	cmp	r0, #0
    ebdc:	d1f7      	bne.n	ebce <z_impl_device_get_binding+0x2a>
}
    ebde:	4620      	mov	r0, r4
    ebe0:	bd70      	pop	{r4, r5, r6, pc}
    ebe2:	bf00      	nop
    ebe4:	200003c0 	.word	0x200003c0
    ebe8:	20000340 	.word	0x20000340

0000ebec <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    ebec:	4b01      	ldr	r3, [pc, #4]	; (ebf4 <z_impl_z_errno+0x8>)
    ebee:	6898      	ldr	r0, [r3, #8]
}
    ebf0:	305c      	adds	r0, #92	; 0x5c
    ebf2:	4770      	bx	lr
    ebf4:	20001d88 	.word	0x20001d88

0000ebf8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    ebf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ebfa:	4604      	mov	r4, r0
    ebfc:	460e      	mov	r6, r1
	__asm__ volatile(
    ebfe:	f04f 0320 	mov.w	r3, #32
    ec02:	f3ef 8711 	mrs	r7, BASEPRI
    ec06:	f383 8811 	msr	BASEPRI, r3
    ec0a:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    ec0e:	f001 fff1 	bl	10bf4 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    ec12:	2200      	movs	r2, #0
    ec14:	2c04      	cmp	r4, #4
    ec16:	bf98      	it	ls
    ec18:	4b21      	ldrls	r3, [pc, #132]	; (eca0 <z_fatal_error+0xa8>)
    ec1a:	4605      	mov	r5, r0
	switch (reason) {
    ec1c:	bf94      	ite	ls
    ec1e:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
    ec22:	4b20      	ldrhi	r3, [pc, #128]	; (eca4 <z_fatal_error+0xac>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    ec24:	9200      	str	r2, [sp, #0]
    ec26:	2145      	movs	r1, #69	; 0x45
    ec28:	4622      	mov	r2, r4
    ec2a:	481f      	ldr	r0, [pc, #124]	; (eca8 <z_fatal_error+0xb0>)
    ec2c:	f003 fa6c 	bl	12108 <printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    ec30:	b13e      	cbz	r6, ec42 <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    ec32:	69f3      	ldr	r3, [r6, #28]
    ec34:	f3c3 0308 	ubfx	r3, r3, #0, #9
    ec38:	b11b      	cbz	r3, ec42 <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
    ec3a:	2145      	movs	r1, #69	; 0x45
    ec3c:	481b      	ldr	r0, [pc, #108]	; (ecac <z_fatal_error+0xb4>)
    ec3e:	f003 fa63 	bl	12108 <printk>
	const char *thread_name = k_thread_name_get(thread);
    ec42:	4628      	mov	r0, r5
    ec44:	f007 fdff 	bl	16846 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
    ec48:	4603      	mov	r3, r0
    ec4a:	b330      	cbz	r0, ec9a <z_fatal_error+0xa2>
    ec4c:	7801      	ldrb	r1, [r0, #0]
		thread_name = "unknown";
    ec4e:	4a18      	ldr	r2, [pc, #96]	; (ecb0 <z_fatal_error+0xb8>)
    ec50:	2900      	cmp	r1, #0
    ec52:	bf08      	it	eq
    ec54:	4613      	moveq	r3, r2
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    ec56:	462a      	mov	r2, r5
    ec58:	2145      	movs	r1, #69	; 0x45
    ec5a:	4816      	ldr	r0, [pc, #88]	; (ecb4 <z_fatal_error+0xbc>)
    ec5c:	f003 fa54 	bl	12108 <printk>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
    ec60:	4631      	mov	r1, r6
    ec62:	4620      	mov	r0, r4
    ec64:	f7ff fa18 	bl	e098 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    ec68:	2c04      	cmp	r4, #4
    ec6a:	d10c      	bne.n	ec86 <z_fatal_error+0x8e>
    ec6c:	4912      	ldr	r1, [pc, #72]	; (ecb8 <z_fatal_error+0xc0>)
    ec6e:	238b      	movs	r3, #139	; 0x8b
    ec70:	4a12      	ldr	r2, [pc, #72]	; (ecbc <z_fatal_error+0xc4>)
    ec72:	4813      	ldr	r0, [pc, #76]	; (ecc0 <z_fatal_error+0xc8>)
    ec74:	f003 fa48 	bl	12108 <printk>
    ec78:	4812      	ldr	r0, [pc, #72]	; (ecc4 <z_fatal_error+0xcc>)
    ec7a:	f003 fa45 	bl	12108 <printk>
    ec7e:	218b      	movs	r1, #139	; 0x8b
    ec80:	480e      	ldr	r0, [pc, #56]	; (ecbc <z_fatal_error+0xc4>)
    ec82:	f003 fcd7 	bl	12634 <assert_post_action>
	__asm__ volatile(
    ec86:	f387 8811 	msr	BASEPRI, r7
    ec8a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    ec8e:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    ec90:	b003      	add	sp, #12
    ec92:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    ec96:	f7f5 bb39 	b.w	430c <z_impl_k_thread_abort>
		thread_name = "unknown";
    ec9a:	4b05      	ldr	r3, [pc, #20]	; (ecb0 <z_fatal_error+0xb8>)
    ec9c:	e7db      	b.n	ec56 <z_fatal_error+0x5e>
    ec9e:	bf00      	nop
    eca0:	00017694 	.word	0x00017694
    eca4:	0001b6b7 	.word	0x0001b6b7
    eca8:	0001b6cd 	.word	0x0001b6cd
    ecac:	0001b6fa 	.word	0x0001b6fa
    ecb0:	0001b6c5 	.word	0x0001b6c5
    ecb4:	0001b720 	.word	0x0001b720
    ecb8:	0001b75f 	.word	0x0001b75f
    ecbc:	0001b73d 	.word	0x0001b73d
    ecc0:	00017d82 	.word	0x00017d82
    ecc4:	0001b77c 	.word	0x0001b77c

0000ecc8 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    ecc8:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    ecca:	4d0b      	ldr	r5, [pc, #44]	; (ecf8 <idle+0x30>)
	__asm__ volatile(
    eccc:	f04f 0220 	mov.w	r2, #32
    ecd0:	f3ef 8311 	mrs	r3, BASEPRI
    ecd4:	f382 8811 	msr	BASEPRI, r2
    ecd8:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
    ecdc:	f002 fc34 	bl	11548 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    ece0:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
    ece2:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    ece4:	2802      	cmp	r0, #2
    ece6:	bfd8      	it	le
    ece8:	4608      	movle	r0, r1
    ecea:	f002 fc75 	bl	115d8 <z_set_timeout_expiry>
	_kernel.idle = ticks;
    ecee:	622c      	str	r4, [r5, #32]
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    ecf0:	f7f5 f89a 	bl	3e28 <arch_cpu_idle>
}
    ecf4:	e7ea      	b.n	eccc <idle+0x4>
    ecf6:	bf00      	nop
    ecf8:	20001d88 	.word	0x20001d88

0000ecfc <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    ecfc:	4802      	ldr	r0, [pc, #8]	; (ed08 <z_bss_zero+0xc>)
    ecfe:	4a03      	ldr	r2, [pc, #12]	; (ed0c <z_bss_zero+0x10>)
    ed00:	2100      	movs	r1, #0
    ed02:	1a12      	subs	r2, r2, r0
    ed04:	f004 bd40 	b.w	13788 <memset>
    ed08:	20000690 	.word	0x20000690
    ed0c:	20001fb0 	.word	0x20001fb0

0000ed10 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    ed10:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    ed12:	4806      	ldr	r0, [pc, #24]	; (ed2c <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    ed14:	4a06      	ldr	r2, [pc, #24]	; (ed30 <z_data_copy+0x20>)
    ed16:	4907      	ldr	r1, [pc, #28]	; (ed34 <z_data_copy+0x24>)
    ed18:	1a12      	subs	r2, r2, r0
    ed1a:	f004 fd0a 	bl	13732 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    ed1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    ed22:	4a05      	ldr	r2, [pc, #20]	; (ed38 <z_data_copy+0x28>)
    ed24:	4905      	ldr	r1, [pc, #20]	; (ed3c <z_data_copy+0x2c>)
    ed26:	4806      	ldr	r0, [pc, #24]	; (ed40 <z_data_copy+0x30>)
    ed28:	f004 bd03 	b.w	13732 <memcpy>
    ed2c:	20000000 	.word	0x20000000
    ed30:	2000068c 	.word	0x2000068c
    ed34:	0001be64 	.word	0x0001be64
    ed38:	00000000 	.word	0x00000000
    ed3c:	0001be64 	.word	0x0001be64
    ed40:	20000000 	.word	0x20000000

0000ed44 <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
    ed44:	2201      	movs	r2, #1
{
    ed46:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    ed48:	4b0b      	ldr	r3, [pc, #44]	; (ed78 <bg_thread_main+0x34>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    ed4a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    ed4c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    ed4e:	f7ff ff13 	bl	eb78 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    ed52:	4a0a      	ldr	r2, [pc, #40]	; (ed7c <bg_thread_main+0x38>)
    ed54:	490a      	ldr	r1, [pc, #40]	; (ed80 <bg_thread_main+0x3c>)
    ed56:	480b      	ldr	r0, [pc, #44]	; (ed84 <bg_thread_main+0x40>)
    ed58:	f003 f9d6 	bl	12108 <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    ed5c:	2003      	movs	r0, #3
    ed5e:	f7ff ff0b 	bl	eb78 <z_sys_init_run_level>

	z_init_static_threads();
    ed62:	f002 f8d9 	bl	10f18 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    ed66:	f7f2 f8fd 	bl	f64 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    ed6a:	4a07      	ldr	r2, [pc, #28]	; (ed88 <bg_thread_main+0x44>)
    ed6c:	7b13      	ldrb	r3, [r2, #12]
    ed6e:	f023 0301 	bic.w	r3, r3, #1
    ed72:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    ed74:	bd08      	pop	{r3, pc}
    ed76:	bf00      	nop
    ed78:	20001fac 	.word	0x20001fac
    ed7c:	0001b122 	.word	0x0001b122
    ed80:	0001b7fb 	.word	0x0001b7fb
    ed84:	0001b80b 	.word	0x0001b80b
    ed88:	200013ac 	.word	0x200013ac

0000ed8c <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    ed8c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(z_interrupt_stacks[0])) +
    ed90:	4b36      	ldr	r3, [pc, #216]	; (ee6c <z_cstart+0xe0>)
    ed92:	b0a5      	sub	sp, #148	; 0x94
    ed94:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    ed98:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    ed9c:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    eda0:	2400      	movs	r4, #0
    eda2:	23e0      	movs	r3, #224	; 0xe0
    eda4:	4d32      	ldr	r5, [pc, #200]	; (ee70 <z_cstart+0xe4>)
	z_setup_new_thread(&z_main_thread, z_main_stack,
    eda6:	f04f 0b01 	mov.w	fp, #1
    edaa:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    edae:	77ec      	strb	r4, [r5, #31]
    edb0:	762c      	strb	r4, [r5, #24]
    edb2:	766c      	strb	r4, [r5, #25]
    edb4:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    edb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
    edb8:	4e2e      	ldr	r6, [pc, #184]	; (ee74 <z_cstart+0xe8>)
    edba:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    edbe:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    edc0:	f7f5 fa7a 	bl	42b8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    edc4:	f7f5 f82a 	bl	3e1c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    edc8:	f04f 33ff 	mov.w	r3, #4294967295
    edcc:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    edce:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    edd0:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = 0;
#endif

	_current_cpu->current = dummy_thread;
    edd4:	4d28      	ldr	r5, [pc, #160]	; (ee78 <z_cstart+0xec>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    edd6:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	_current_cpu->current = dummy_thread;
    edda:	ab07      	add	r3, sp, #28
    eddc:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    edde:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
    ede0:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
    ede4:	f7ff fec8 	bl	eb78 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    ede8:	2001      	movs	r0, #1
    edea:	f7ff fec5 	bl	eb78 <z_sys_init_run_level>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    edee:	f8df a09c 	ldr.w	sl, [pc, #156]	; ee8c <z_cstart+0x100>
	z_sched_init();
    edf2:	f001 fd75 	bl	108e0 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    edf6:	f8df 8098 	ldr.w	r8, [pc, #152]	; ee90 <z_cstart+0x104>
    edfa:	4b20      	ldr	r3, [pc, #128]	; (ee7c <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
    edfc:	626e      	str	r6, [r5, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
    edfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
    ee02:	4641      	mov	r1, r8
    ee04:	4630      	mov	r0, r6
    ee06:	9305      	str	r3, [sp, #20]
    ee08:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    ee0c:	4653      	mov	r3, sl
    ee0e:	e9cd 4401 	strd	r4, r4, [sp, #4]
    ee12:	9400      	str	r4, [sp, #0]
    ee14:	f001 ffda 	bl	10dcc <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    ee18:	7b73      	ldrb	r3, [r6, #13]
	z_ready_thread(&z_main_thread);
    ee1a:	4630      	mov	r0, r6
    ee1c:	f023 0304 	bic.w	r3, r3, #4
    ee20:	7373      	strb	r3, [r6, #13]
    ee22:	f001 f839 	bl	fe98 <z_ready_thread>
	z_setup_new_thread(thread, stack,
    ee26:	230f      	movs	r3, #15
    ee28:	4f15      	ldr	r7, [pc, #84]	; (ee80 <z_cstart+0xf4>)
    ee2a:	f44f 72a0 	mov.w	r2, #320	; 0x140
    ee2e:	4638      	mov	r0, r7
    ee30:	e9cd 4302 	strd	r4, r3, [sp, #8]
    ee34:	4913      	ldr	r1, [pc, #76]	; (ee84 <z_cstart+0xf8>)
    ee36:	4b14      	ldr	r3, [pc, #80]	; (ee88 <z_cstart+0xfc>)
    ee38:	e9cd b404 	strd	fp, r4, [sp, #16]
    ee3c:	e9cd 4400 	strd	r4, r4, [sp]
    ee40:	f001 ffc4 	bl	10dcc <z_setup_new_thread>
    ee44:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
    ee46:	f44f 6280 	mov.w	r2, #1024	; 0x400
    ee4a:	f023 0304 	bic.w	r3, r3, #4
    ee4e:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    ee50:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
    ee54:	e9c5 3306 	strd	r3, r3, [r5, #24]
    ee58:	4641      	mov	r1, r8
    ee5a:	4653      	mov	r3, sl
    ee5c:	4630      	mov	r0, r6
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    ee5e:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
    ee60:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
    ee62:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
    ee66:	f7f4 ff2f 	bl	3cc8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    ee6a:	bf00      	nop
    ee6c:	200037d8 	.word	0x200037d8
    ee70:	e000ed00 	.word	0xe000ed00
    ee74:	200013ac 	.word	0x200013ac
    ee78:	20001d88 	.word	0x20001d88
    ee7c:	0001b832 	.word	0x0001b832
    ee80:	20001338 	.word	0x20001338
    ee84:	20003698 	.word	0x20003698
    ee88:	0000ecc9 	.word	0x0000ecc9
    ee8c:	0000ed45 	.word	0x0000ed45
    ee90:	20003298 	.word	0x20003298

0000ee94 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(struct device *unused)
{
    ee94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    ee96:	4d0f      	ldr	r5, [pc, #60]	; (eed4 <statics_init+0x40>)
    ee98:	4c0f      	ldr	r4, [pc, #60]	; (eed8 <statics_init+0x44>)
    ee9a:	462f      	mov	r7, r5
    ee9c:	4e0f      	ldr	r6, [pc, #60]	; (eedc <statics_init+0x48>)
    ee9e:	42ac      	cmp	r4, r5
    eea0:	d90c      	bls.n	eebc <statics_init+0x28>
    eea2:	490f      	ldr	r1, [pc, #60]	; (eee0 <statics_init+0x4c>)
    eea4:	2315      	movs	r3, #21
    eea6:	4632      	mov	r2, r6
    eea8:	480e      	ldr	r0, [pc, #56]	; (eee4 <statics_init+0x50>)
    eeaa:	f003 f92d 	bl	12108 <printk>
    eeae:	480e      	ldr	r0, [pc, #56]	; (eee8 <statics_init+0x54>)
    eeb0:	f003 f92a 	bl	12108 <printk>
    eeb4:	2115      	movs	r1, #21
    eeb6:	4630      	mov	r0, r6
    eeb8:	f003 fbbc 	bl	12634 <assert_post_action>
    eebc:	42bc      	cmp	r4, r7
    eebe:	d301      	bcc.n	eec4 <statics_init+0x30>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
    eec0:	2000      	movs	r0, #0
    eec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    eec4:	4620      	mov	r0, r4
    eec6:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    eeca:	f007 fbfc 	bl	166c6 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    eece:	3418      	adds	r4, #24
    eed0:	e7e5      	b.n	ee9e <statics_init+0xa>
    eed2:	bf00      	nop
    eed4:	20000410 	.word	0x20000410
    eed8:	200003f8 	.word	0x200003f8
    eedc:	0001b83a 	.word	0x0001b83a
    eee0:	0001b85c 	.word	0x0001b85c
    eee4:	00017d82 	.word	0x00017d82
    eee8:	00017d9f 	.word	0x00017d9f

0000eeec <k_heap_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
    eeec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eef0:	4606      	mov	r6, r0
    eef2:	b087      	sub	sp, #28
    eef4:	468a      	mov	sl, r1
	s64_t now, end = z_timeout_end_calc(timeout);
    eef6:	4610      	mov	r0, r2
    eef8:	4619      	mov	r1, r3
{
    eefa:	4690      	mov	r8, r2
    eefc:	4699      	mov	r9, r3
	s64_t now, end = z_timeout_end_calc(timeout);
    eefe:	f007 fd0e 	bl	1691e <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    ef02:	f106 0414 	add.w	r4, r6, #20
	s64_t now, end = z_timeout_end_calc(timeout);
    ef06:	e9cd 0104 	strd	r0, r1, [sp, #16]
    ef0a:	f04f 0320 	mov.w	r3, #32
    ef0e:	f3ef 8511 	mrs	r5, BASEPRI
    ef12:	f383 8811 	msr	BASEPRI, r3
    ef16:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ef1a:	4620      	mov	r0, r4
    ef1c:	f002 f88a 	bl	11034 <z_spin_lock_valid>
    ef20:	b968      	cbnz	r0, ef3e <k_heap_alloc+0x52>
    ef22:	235c      	movs	r3, #92	; 0x5c
    ef24:	4a3f      	ldr	r2, [pc, #252]	; (f024 <k_heap_alloc+0x138>)
    ef26:	4940      	ldr	r1, [pc, #256]	; (f028 <k_heap_alloc+0x13c>)
    ef28:	4840      	ldr	r0, [pc, #256]	; (f02c <k_heap_alloc+0x140>)
    ef2a:	f003 f8ed 	bl	12108 <printk>
    ef2e:	4621      	mov	r1, r4
    ef30:	483f      	ldr	r0, [pc, #252]	; (f030 <k_heap_alloc+0x144>)
    ef32:	f003 f8e9 	bl	12108 <printk>
    ef36:	215c      	movs	r1, #92	; 0x5c
    ef38:	483a      	ldr	r0, [pc, #232]	; (f024 <k_heap_alloc+0x138>)
    ef3a:	f003 fb7b 	bl	12634 <assert_post_action>
	z_spin_lock_set_owner(l);
    ef3e:	4620      	mov	r0, r4
    ef40:	f002 f894 	bl	1106c <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    ef44:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
    ef48:	b17b      	cbz	r3, ef6a <k_heap_alloc+0x7e>
    ef4a:	ea58 0309 	orrs.w	r3, r8, r9
    ef4e:	d00c      	beq.n	ef6a <k_heap_alloc+0x7e>
    ef50:	4938      	ldr	r1, [pc, #224]	; (f034 <k_heap_alloc+0x148>)
    ef52:	2323      	movs	r3, #35	; 0x23
    ef54:	4a38      	ldr	r2, [pc, #224]	; (f038 <k_heap_alloc+0x14c>)
    ef56:	4835      	ldr	r0, [pc, #212]	; (f02c <k_heap_alloc+0x140>)
    ef58:	f003 f8d6 	bl	12108 <printk>
    ef5c:	4837      	ldr	r0, [pc, #220]	; (f03c <k_heap_alloc+0x150>)
    ef5e:	f003 f8d3 	bl	12108 <printk>
    ef62:	2123      	movs	r1, #35	; 0x23
    ef64:	4834      	ldr	r0, [pc, #208]	; (f038 <k_heap_alloc+0x14c>)
    ef66:	f003 fb65 	bl	12634 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ef6a:	f8df 80b8 	ldr.w	r8, [pc, #184]	; f024 <k_heap_alloc+0x138>
    ef6e:	f8df 90b8 	ldr.w	r9, [pc, #184]	; f028 <k_heap_alloc+0x13c>
    ef72:	f8df b0b8 	ldr.w	fp, [pc, #184]	; f02c <k_heap_alloc+0x140>

	while (ret == NULL) {
		ret = sys_heap_alloc(&h->heap, bytes);
    ef76:	4651      	mov	r1, sl
    ef78:	4630      	mov	r0, r6
    ef7a:	f003 fabf 	bl	124fc <sys_heap_alloc>
    ef7e:	4607      	mov	r7, r0

		now = z_tick_get();
    ef80:	f002 fc2a 	bl	117d8 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
    ef84:	b1cf      	cbz	r7, efba <k_heap_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ef86:	4620      	mov	r0, r4
    ef88:	f002 f862 	bl	11050 <z_spin_unlock_valid>
    ef8c:	b968      	cbnz	r0, efaa <k_heap_alloc+0xbe>
    ef8e:	2384      	movs	r3, #132	; 0x84
    ef90:	4a24      	ldr	r2, [pc, #144]	; (f024 <k_heap_alloc+0x138>)
    ef92:	492b      	ldr	r1, [pc, #172]	; (f040 <k_heap_alloc+0x154>)
    ef94:	4825      	ldr	r0, [pc, #148]	; (f02c <k_heap_alloc+0x140>)
    ef96:	f003 f8b7 	bl	12108 <printk>
    ef9a:	4621      	mov	r1, r4
    ef9c:	4829      	ldr	r0, [pc, #164]	; (f044 <k_heap_alloc+0x158>)
    ef9e:	f003 f8b3 	bl	12108 <printk>
    efa2:	2184      	movs	r1, #132	; 0x84
    efa4:	481f      	ldr	r0, [pc, #124]	; (f024 <k_heap_alloc+0x138>)
    efa6:	f003 fb45 	bl	12634 <assert_post_action>
	__asm__ volatile(
    efaa:	f385 8811 	msr	BASEPRI, r5
    efae:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
    efb2:	4638      	mov	r0, r7
    efb4:	b007      	add	sp, #28
    efb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
    efba:	9b04      	ldr	r3, [sp, #16]
    efbc:	1a1b      	subs	r3, r3, r0
    efbe:	9302      	str	r3, [sp, #8]
    efc0:	9b05      	ldr	r3, [sp, #20]
    efc2:	eb63 0301 	sbc.w	r3, r3, r1
    efc6:	9303      	str	r3, [sp, #12]
    efc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    efcc:	2a01      	cmp	r2, #1
    efce:	f173 0300 	sbcs.w	r3, r3, #0
    efd2:	dbd8      	blt.n	ef86 <k_heap_alloc+0x9a>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    efd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    efd8:	4629      	mov	r1, r5
    efda:	e9cd 2300 	strd	r2, r3, [sp]
    efde:	4620      	mov	r0, r4
    efe0:	f106 020c 	add.w	r2, r6, #12
    efe4:	f001 fb26 	bl	10634 <z_pend_curr>
	__asm__ volatile(
    efe8:	f04f 0320 	mov.w	r3, #32
    efec:	f3ef 8511 	mrs	r5, BASEPRI
    eff0:	f383 8811 	msr	BASEPRI, r3
    eff4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    eff8:	4620      	mov	r0, r4
    effa:	f002 f81b 	bl	11034 <z_spin_lock_valid>
    effe:	b968      	cbnz	r0, f01c <k_heap_alloc+0x130>
    f000:	235c      	movs	r3, #92	; 0x5c
    f002:	4642      	mov	r2, r8
    f004:	4649      	mov	r1, r9
    f006:	4658      	mov	r0, fp
    f008:	f003 f87e 	bl	12108 <printk>
    f00c:	4621      	mov	r1, r4
    f00e:	4808      	ldr	r0, [pc, #32]	; (f030 <k_heap_alloc+0x144>)
    f010:	f003 f87a 	bl	12108 <printk>
    f014:	215c      	movs	r1, #92	; 0x5c
    f016:	4640      	mov	r0, r8
    f018:	f003 fb0c 	bl	12634 <assert_post_action>
	z_spin_lock_set_owner(l);
    f01c:	4620      	mov	r0, r4
    f01e:	f002 f825 	bl	1106c <z_spin_lock_set_owner>
	return k;
    f022:	e7a8      	b.n	ef76 <k_heap_alloc+0x8a>
    f024:	0001820d 	.word	0x0001820d
    f028:	00018233 	.word	0x00018233
    f02c:	00017d82 	.word	0x00017d82
    f030:	00018248 	.word	0x00018248
    f034:	0001b872 	.word	0x0001b872
    f038:	0001b83a 	.word	0x0001b83a
    f03c:	0001b120 	.word	0x0001b120
    f040:	00018260 	.word	0x00018260
    f044:	00018277 	.word	0x00018277

0000f048 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
    f048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f04a:	4605      	mov	r5, r0
    f04c:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    f04e:	f100 0414 	add.w	r4, r0, #20
    f052:	f04f 0320 	mov.w	r3, #32
    f056:	f3ef 8711 	mrs	r7, BASEPRI
    f05a:	f383 8811 	msr	BASEPRI, r3
    f05e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f062:	4620      	mov	r0, r4
    f064:	f001 ffe6 	bl	11034 <z_spin_lock_valid>
    f068:	b968      	cbnz	r0, f086 <k_heap_free+0x3e>
    f06a:	235c      	movs	r3, #92	; 0x5c
    f06c:	4a1a      	ldr	r2, [pc, #104]	; (f0d8 <k_heap_free+0x90>)
    f06e:	491b      	ldr	r1, [pc, #108]	; (f0dc <k_heap_free+0x94>)
    f070:	481b      	ldr	r0, [pc, #108]	; (f0e0 <k_heap_free+0x98>)
    f072:	f003 f849 	bl	12108 <printk>
    f076:	4621      	mov	r1, r4
    f078:	481a      	ldr	r0, [pc, #104]	; (f0e4 <k_heap_free+0x9c>)
    f07a:	f003 f845 	bl	12108 <printk>
    f07e:	215c      	movs	r1, #92	; 0x5c
    f080:	4815      	ldr	r0, [pc, #84]	; (f0d8 <k_heap_free+0x90>)
    f082:	f003 fad7 	bl	12634 <assert_post_action>
	z_spin_lock_set_owner(l);
    f086:	4620      	mov	r0, r4
    f088:	f001 fff0 	bl	1106c <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
    f08c:	4628      	mov	r0, r5
    f08e:	4631      	mov	r1, r6
    f090:	f003 f981 	bl	12396 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
    f094:	f105 000c 	add.w	r0, r5, #12
    f098:	f007 fbaa 	bl	167f0 <z_unpend_all>
    f09c:	b128      	cbz	r0, f0aa <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
    f09e:	4639      	mov	r1, r7
    f0a0:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    f0a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
    f0a6:	f000 bcd1 	b.w	fa4c <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f0aa:	4620      	mov	r0, r4
    f0ac:	f001 ffd0 	bl	11050 <z_spin_unlock_valid>
    f0b0:	b968      	cbnz	r0, f0ce <k_heap_free+0x86>
    f0b2:	2384      	movs	r3, #132	; 0x84
    f0b4:	4a08      	ldr	r2, [pc, #32]	; (f0d8 <k_heap_free+0x90>)
    f0b6:	490c      	ldr	r1, [pc, #48]	; (f0e8 <k_heap_free+0xa0>)
    f0b8:	4809      	ldr	r0, [pc, #36]	; (f0e0 <k_heap_free+0x98>)
    f0ba:	f003 f825 	bl	12108 <printk>
    f0be:	4621      	mov	r1, r4
    f0c0:	480a      	ldr	r0, [pc, #40]	; (f0ec <k_heap_free+0xa4>)
    f0c2:	f003 f821 	bl	12108 <printk>
    f0c6:	2184      	movs	r1, #132	; 0x84
    f0c8:	4803      	ldr	r0, [pc, #12]	; (f0d8 <k_heap_free+0x90>)
    f0ca:	f003 fab3 	bl	12634 <assert_post_action>
	__asm__ volatile(
    f0ce:	f387 8811 	msr	BASEPRI, r7
    f0d2:	f3bf 8f6f 	isb	sy
}
    f0d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f0d8:	0001820d 	.word	0x0001820d
    f0dc:	00018233 	.word	0x00018233
    f0e0:	00017d82 	.word	0x00017d82
    f0e4:	00018248 	.word	0x00018248
    f0e8:	00018260 	.word	0x00018260
    f0ec:	00018277 	.word	0x00018277

0000f0f0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
    f0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    f0f4:	4d16      	ldr	r5, [pc, #88]	; (f150 <init_mem_slab_module+0x60>)
    f0f6:	4c17      	ldr	r4, [pc, #92]	; (f154 <init_mem_slab_module+0x64>)
    f0f8:	46a8      	mov	r8, r5
    f0fa:	4e17      	ldr	r6, [pc, #92]	; (f158 <init_mem_slab_module+0x68>)
    f0fc:	42ac      	cmp	r4, r5
    f0fe:	d90c      	bls.n	f11a <init_mem_slab_module+0x2a>
    f100:	4916      	ldr	r1, [pc, #88]	; (f15c <init_mem_slab_module+0x6c>)
    f102:	2342      	movs	r3, #66	; 0x42
    f104:	4632      	mov	r2, r6
    f106:	4816      	ldr	r0, [pc, #88]	; (f160 <init_mem_slab_module+0x70>)
    f108:	f002 fffe 	bl	12108 <printk>
    f10c:	4815      	ldr	r0, [pc, #84]	; (f164 <init_mem_slab_module+0x74>)
    f10e:	f002 fffb 	bl	12108 <printk>
    f112:	2142      	movs	r1, #66	; 0x42
    f114:	4630      	mov	r0, r6
    f116:	f003 fa8d 	bl	12634 <assert_post_action>
    f11a:	4544      	cmp	r4, r8
    f11c:	d302      	bcc.n	f124 <init_mem_slab_module+0x34>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
    f11e:	2000      	movs	r0, #0
	return rc;
}
    f120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    f124:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    f128:	ea41 0302 	orr.w	r3, r1, r2
    f12c:	f013 0303 	ands.w	r3, r3, #3
    f130:	d10b      	bne.n	f14a <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
    f132:	68a0      	ldr	r0, [r4, #8]
	slab->free_list = NULL;
    f134:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    f136:	4283      	cmp	r3, r0
    f138:	d101      	bne.n	f13e <init_mem_slab_module+0x4e>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    f13a:	341c      	adds	r4, #28
    f13c:	e7de      	b.n	f0fc <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
    f13e:	6967      	ldr	r7, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    f140:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
    f142:	600f      	str	r7, [r1, #0]
		slab->free_list = p;
    f144:	6161      	str	r1, [r4, #20]
		p += slab->block_size;
    f146:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    f148:	e7f5      	b.n	f136 <init_mem_slab_module+0x46>
		return -EINVAL;
    f14a:	f06f 0015 	mvn.w	r0, #21
	return rc;
    f14e:	e7e7      	b.n	f120 <init_mem_slab_module+0x30>
    f150:	200003f8 	.word	0x200003f8
    f154:	200003c0 	.word	0x200003c0
    f158:	0001b8b7 	.word	0x0001b8b7
    f15c:	0001b8dc 	.word	0x0001b8dc
    f160:	00017d82 	.word	0x00017d82
    f164:	00017d9f 	.word	0x00017d9f

0000f168 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    f168:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    f16c:	4604      	mov	r4, r0
    f16e:	460d      	mov	r5, r1
    f170:	4616      	mov	r6, r2
    f172:	461f      	mov	r7, r3
	__asm__ volatile(
    f174:	f04f 0320 	mov.w	r3, #32
    f178:	f3ef 8811 	mrs	r8, BASEPRI
    f17c:	f383 8811 	msr	BASEPRI, r3
    f180:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f184:	4826      	ldr	r0, [pc, #152]	; (f220 <k_mem_slab_alloc+0xb8>)
    f186:	f001 ff55 	bl	11034 <z_spin_lock_valid>
    f18a:	b968      	cbnz	r0, f1a8 <k_mem_slab_alloc+0x40>
    f18c:	235c      	movs	r3, #92	; 0x5c
    f18e:	4a25      	ldr	r2, [pc, #148]	; (f224 <k_mem_slab_alloc+0xbc>)
    f190:	4925      	ldr	r1, [pc, #148]	; (f228 <k_mem_slab_alloc+0xc0>)
    f192:	4826      	ldr	r0, [pc, #152]	; (f22c <k_mem_slab_alloc+0xc4>)
    f194:	f002 ffb8 	bl	12108 <printk>
    f198:	4921      	ldr	r1, [pc, #132]	; (f220 <k_mem_slab_alloc+0xb8>)
    f19a:	4825      	ldr	r0, [pc, #148]	; (f230 <k_mem_slab_alloc+0xc8>)
    f19c:	f002 ffb4 	bl	12108 <printk>
    f1a0:	215c      	movs	r1, #92	; 0x5c
    f1a2:	4820      	ldr	r0, [pc, #128]	; (f224 <k_mem_slab_alloc+0xbc>)
    f1a4:	f003 fa46 	bl	12634 <assert_post_action>
	z_spin_lock_set_owner(l);
    f1a8:	481d      	ldr	r0, [pc, #116]	; (f220 <k_mem_slab_alloc+0xb8>)
    f1aa:	f001 ff5f 	bl	1106c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
    f1ae:	6963      	ldr	r3, [r4, #20]
    f1b0:	b1eb      	cbz	r3, f1ee <k_mem_slab_alloc+0x86>
		/* take a free block */
		*mem = slab->free_list;
    f1b2:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
    f1b4:	681b      	ldr	r3, [r3, #0]
    f1b6:	6163      	str	r3, [r4, #20]
		slab->num_used++;
    f1b8:	69a3      	ldr	r3, [r4, #24]
    f1ba:	3301      	adds	r3, #1
    f1bc:	61a3      	str	r3, [r4, #24]
		result = 0;
    f1be:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f1c0:	4817      	ldr	r0, [pc, #92]	; (f220 <k_mem_slab_alloc+0xb8>)
    f1c2:	f001 ff45 	bl	11050 <z_spin_unlock_valid>
    f1c6:	b968      	cbnz	r0, f1e4 <k_mem_slab_alloc+0x7c>
    f1c8:	2384      	movs	r3, #132	; 0x84
    f1ca:	4a16      	ldr	r2, [pc, #88]	; (f224 <k_mem_slab_alloc+0xbc>)
    f1cc:	4919      	ldr	r1, [pc, #100]	; (f234 <k_mem_slab_alloc+0xcc>)
    f1ce:	4817      	ldr	r0, [pc, #92]	; (f22c <k_mem_slab_alloc+0xc4>)
    f1d0:	f002 ff9a 	bl	12108 <printk>
    f1d4:	4912      	ldr	r1, [pc, #72]	; (f220 <k_mem_slab_alloc+0xb8>)
    f1d6:	4818      	ldr	r0, [pc, #96]	; (f238 <k_mem_slab_alloc+0xd0>)
    f1d8:	f002 ff96 	bl	12108 <printk>
    f1dc:	2184      	movs	r1, #132	; 0x84
    f1de:	4811      	ldr	r0, [pc, #68]	; (f224 <k_mem_slab_alloc+0xbc>)
    f1e0:	f003 fa28 	bl	12634 <assert_post_action>
	__asm__ volatile(
    f1e4:	f388 8811 	msr	BASEPRI, r8
    f1e8:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
    f1ec:	e013      	b.n	f216 <k_mem_slab_alloc+0xae>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    f1ee:	ea56 0207 	orrs.w	r2, r6, r7
    f1f2:	d103      	bne.n	f1fc <k_mem_slab_alloc+0x94>
		result = -ENOMEM;
    f1f4:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
    f1f8:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
    f1fa:	e7e1      	b.n	f1c0 <k_mem_slab_alloc+0x58>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
    f1fc:	4622      	mov	r2, r4
    f1fe:	4641      	mov	r1, r8
    f200:	e9cd 6700 	strd	r6, r7, [sp]
    f204:	4806      	ldr	r0, [pc, #24]	; (f220 <k_mem_slab_alloc+0xb8>)
    f206:	f001 fa15 	bl	10634 <z_pend_curr>
		if (result == 0) {
    f20a:	4604      	mov	r4, r0
    f20c:	b918      	cbnz	r0, f216 <k_mem_slab_alloc+0xae>
			*mem = _current->base.swap_data;
    f20e:	4b0b      	ldr	r3, [pc, #44]	; (f23c <k_mem_slab_alloc+0xd4>)
    f210:	689b      	ldr	r3, [r3, #8]
    f212:	695b      	ldr	r3, [r3, #20]
    f214:	602b      	str	r3, [r5, #0]
}
    f216:	4620      	mov	r0, r4
    f218:	b002      	add	sp, #8
    f21a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f21e:	bf00      	nop
    f220:	20001420 	.word	0x20001420
    f224:	0001820d 	.word	0x0001820d
    f228:	00018233 	.word	0x00018233
    f22c:	00017d82 	.word	0x00017d82
    f230:	00018248 	.word	0x00018248
    f234:	00018260 	.word	0x00018260
    f238:	00018277 	.word	0x00018277
    f23c:	20001d88 	.word	0x20001d88

0000f240 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    f240:	b570      	push	{r4, r5, r6, lr}
    f242:	4604      	mov	r4, r0
    f244:	460d      	mov	r5, r1
	__asm__ volatile(
    f246:	f04f 0320 	mov.w	r3, #32
    f24a:	f3ef 8611 	mrs	r6, BASEPRI
    f24e:	f383 8811 	msr	BASEPRI, r3
    f252:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f256:	4822      	ldr	r0, [pc, #136]	; (f2e0 <k_mem_slab_free+0xa0>)
    f258:	f001 feec 	bl	11034 <z_spin_lock_valid>
    f25c:	b968      	cbnz	r0, f27a <k_mem_slab_free+0x3a>
    f25e:	235c      	movs	r3, #92	; 0x5c
    f260:	4a20      	ldr	r2, [pc, #128]	; (f2e4 <k_mem_slab_free+0xa4>)
    f262:	4921      	ldr	r1, [pc, #132]	; (f2e8 <k_mem_slab_free+0xa8>)
    f264:	4821      	ldr	r0, [pc, #132]	; (f2ec <k_mem_slab_free+0xac>)
    f266:	f002 ff4f 	bl	12108 <printk>
    f26a:	491d      	ldr	r1, [pc, #116]	; (f2e0 <k_mem_slab_free+0xa0>)
    f26c:	4820      	ldr	r0, [pc, #128]	; (f2f0 <k_mem_slab_free+0xb0>)
    f26e:	f002 ff4b 	bl	12108 <printk>
    f272:	215c      	movs	r1, #92	; 0x5c
    f274:	481b      	ldr	r0, [pc, #108]	; (f2e4 <k_mem_slab_free+0xa4>)
    f276:	f003 f9dd 	bl	12634 <assert_post_action>
	z_spin_lock_set_owner(l);
    f27a:	4819      	ldr	r0, [pc, #100]	; (f2e0 <k_mem_slab_free+0xa0>)
    f27c:	f001 fef6 	bl	1106c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    f280:	4620      	mov	r0, r4
    f282:	f001 fa9d 	bl	107c0 <z_unpend_first_thread>

	if (pending_thread != NULL) {
    f286:	b158      	cbz	r0, f2a0 <k_mem_slab_free+0x60>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    f288:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    f28a:	682a      	ldr	r2, [r5, #0]
    f28c:	6701      	str	r1, [r0, #112]	; 0x70
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    f28e:	6142      	str	r2, [r0, #20]
		z_ready_thread(pending_thread);
    f290:	f000 fe02 	bl	fe98 <z_ready_thread>
		z_reschedule(&lock, key);
    f294:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
    f296:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
    f29a:	4811      	ldr	r0, [pc, #68]	; (f2e0 <k_mem_slab_free+0xa0>)
    f29c:	f000 bbd6 	b.w	fa4c <z_reschedule>
		**(char ***)mem = slab->free_list;
    f2a0:	682b      	ldr	r3, [r5, #0]
    f2a2:	6962      	ldr	r2, [r4, #20]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f2a4:	480e      	ldr	r0, [pc, #56]	; (f2e0 <k_mem_slab_free+0xa0>)
    f2a6:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
    f2a8:	682b      	ldr	r3, [r5, #0]
    f2aa:	6163      	str	r3, [r4, #20]
		slab->num_used--;
    f2ac:	69a3      	ldr	r3, [r4, #24]
    f2ae:	3b01      	subs	r3, #1
    f2b0:	61a3      	str	r3, [r4, #24]
    f2b2:	f001 fecd 	bl	11050 <z_spin_unlock_valid>
    f2b6:	b968      	cbnz	r0, f2d4 <k_mem_slab_free+0x94>
    f2b8:	2384      	movs	r3, #132	; 0x84
    f2ba:	4a0a      	ldr	r2, [pc, #40]	; (f2e4 <k_mem_slab_free+0xa4>)
    f2bc:	490d      	ldr	r1, [pc, #52]	; (f2f4 <k_mem_slab_free+0xb4>)
    f2be:	480b      	ldr	r0, [pc, #44]	; (f2ec <k_mem_slab_free+0xac>)
    f2c0:	f002 ff22 	bl	12108 <printk>
    f2c4:	4906      	ldr	r1, [pc, #24]	; (f2e0 <k_mem_slab_free+0xa0>)
    f2c6:	480c      	ldr	r0, [pc, #48]	; (f2f8 <k_mem_slab_free+0xb8>)
    f2c8:	f002 ff1e 	bl	12108 <printk>
    f2cc:	2184      	movs	r1, #132	; 0x84
    f2ce:	4805      	ldr	r0, [pc, #20]	; (f2e4 <k_mem_slab_free+0xa4>)
    f2d0:	f003 f9b0 	bl	12634 <assert_post_action>
	__asm__ volatile(
    f2d4:	f386 8811 	msr	BASEPRI, r6
    f2d8:	f3bf 8f6f 	isb	sy
}
    f2dc:	bd70      	pop	{r4, r5, r6, pc}
    f2de:	bf00      	nop
    f2e0:	20001420 	.word	0x20001420
    f2e4:	0001820d 	.word	0x0001820d
    f2e8:	00018233 	.word	0x00018233
    f2ec:	00017d82 	.word	0x00017d82
    f2f0:	00018248 	.word	0x00018248
    f2f4:	00018260 	.word	0x00018260
    f2f8:	00018277 	.word	0x00018277

0000f2fc <k_malloc>:
K_MEM_POOL_DEFINE(_heap_mem_pool, CONFIG_HEAP_MEM_POOL_MIN_SIZE,
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
    f2fc:	4601      	mov	r1, r0
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
    f2fe:	4801      	ldr	r0, [pc, #4]	; (f304 <k_malloc+0x8>)
    f300:	f007 ba06 	b.w	16710 <k_mem_pool_malloc>
    f304:	200002e0 	.word	0x200002e0

0000f308 <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
    f308:	b510      	push	{r4, lr}
    f30a:	4604      	mov	r4, r0
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
    f30c:	f007 fa90 	bl	16830 <k_is_in_isr>
    f310:	b948      	cbnz	r0, f326 <z_thread_malloc+0x1e>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
    f312:	4b06      	ldr	r3, [pc, #24]	; (f32c <z_thread_malloc+0x24>)
    f314:	689b      	ldr	r3, [r3, #8]
    f316:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	}

	if (pool) {
    f318:	b13b      	cbz	r3, f32a <z_thread_malloc+0x22>
		ret = k_mem_pool_malloc(pool, size);
    f31a:	4621      	mov	r1, r4
	} else {
		ret = NULL;
	}

	return ret;
}
    f31c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = k_mem_pool_malloc(pool, size);
    f320:	4618      	mov	r0, r3
    f322:	f007 b9f5 	b.w	16710 <k_mem_pool_malloc>
		pool = _HEAP_MEM_POOL;
    f326:	4b02      	ldr	r3, [pc, #8]	; (f330 <z_thread_malloc+0x28>)
    f328:	e7f7      	b.n	f31a <z_thread_malloc+0x12>
}
    f32a:	bd10      	pop	{r4, pc}
    f32c:	20001d88 	.word	0x20001d88
    f330:	200002e0 	.word	0x200002e0

0000f334 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    f334:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    f338:	4604      	mov	r4, r0
    f33a:	4616      	mov	r6, r2
    f33c:	461f      	mov	r7, r3
	__asm__ volatile(
    f33e:	f04f 0320 	mov.w	r3, #32
    f342:	f3ef 8811 	mrs	r8, BASEPRI
    f346:	f383 8811 	msr	BASEPRI, r3
    f34a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f34e:	4863      	ldr	r0, [pc, #396]	; (f4dc <z_impl_k_mutex_lock+0x1a8>)
    f350:	f001 fe70 	bl	11034 <z_spin_lock_valid>
    f354:	b968      	cbnz	r0, f372 <z_impl_k_mutex_lock+0x3e>
    f356:	235c      	movs	r3, #92	; 0x5c
    f358:	4a61      	ldr	r2, [pc, #388]	; (f4e0 <z_impl_k_mutex_lock+0x1ac>)
    f35a:	4962      	ldr	r1, [pc, #392]	; (f4e4 <z_impl_k_mutex_lock+0x1b0>)
    f35c:	4862      	ldr	r0, [pc, #392]	; (f4e8 <z_impl_k_mutex_lock+0x1b4>)
    f35e:	f002 fed3 	bl	12108 <printk>
    f362:	495e      	ldr	r1, [pc, #376]	; (f4dc <z_impl_k_mutex_lock+0x1a8>)
    f364:	4861      	ldr	r0, [pc, #388]	; (f4ec <z_impl_k_mutex_lock+0x1b8>)
    f366:	f002 fecf 	bl	12108 <printk>
    f36a:	215c      	movs	r1, #92	; 0x5c
    f36c:	485c      	ldr	r0, [pc, #368]	; (f4e0 <z_impl_k_mutex_lock+0x1ac>)
    f36e:	f003 f961 	bl	12634 <assert_post_action>
	z_spin_lock_set_owner(l);
    f372:	485a      	ldr	r0, [pc, #360]	; (f4dc <z_impl_k_mutex_lock+0x1a8>)
    f374:	f001 fe7a 	bl	1106c <z_spin_lock_set_owner>
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    f378:	68e3      	ldr	r3, [r4, #12]
    f37a:	4a5d      	ldr	r2, [pc, #372]	; (f4f0 <z_impl_k_mutex_lock+0x1bc>)
    f37c:	b1fb      	cbz	r3, f3be <z_impl_k_mutex_lock+0x8a>
    f37e:	68a0      	ldr	r0, [r4, #8]
    f380:	6891      	ldr	r1, [r2, #8]
    f382:	4288      	cmp	r0, r1
    f384:	d03d      	beq.n	f402 <z_impl_k_mutex_lock+0xce>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    f386:	ea56 0307 	orrs.w	r3, r6, r7
    f38a:	d13c      	bne.n	f406 <z_impl_k_mutex_lock+0xd2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f38c:	4853      	ldr	r0, [pc, #332]	; (f4dc <z_impl_k_mutex_lock+0x1a8>)
    f38e:	f001 fe5f 	bl	11050 <z_spin_unlock_valid>
    f392:	b968      	cbnz	r0, f3b0 <z_impl_k_mutex_lock+0x7c>
    f394:	2384      	movs	r3, #132	; 0x84
    f396:	4a52      	ldr	r2, [pc, #328]	; (f4e0 <z_impl_k_mutex_lock+0x1ac>)
    f398:	4956      	ldr	r1, [pc, #344]	; (f4f4 <z_impl_k_mutex_lock+0x1c0>)
    f39a:	4853      	ldr	r0, [pc, #332]	; (f4e8 <z_impl_k_mutex_lock+0x1b4>)
    f39c:	f002 feb4 	bl	12108 <printk>
    f3a0:	494e      	ldr	r1, [pc, #312]	; (f4dc <z_impl_k_mutex_lock+0x1a8>)
    f3a2:	4855      	ldr	r0, [pc, #340]	; (f4f8 <z_impl_k_mutex_lock+0x1c4>)
    f3a4:	f002 feb0 	bl	12108 <printk>
    f3a8:	2184      	movs	r1, #132	; 0x84
    f3aa:	484d      	ldr	r0, [pc, #308]	; (f4e0 <z_impl_k_mutex_lock+0x1ac>)
    f3ac:	f003 f942 	bl	12634 <assert_post_action>
	__asm__ volatile(
    f3b0:	f388 8811 	msr	BASEPRI, r8
    f3b4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
    f3b8:	f06f 000f 	mvn.w	r0, #15
    f3bc:	e01e      	b.n	f3fc <z_impl_k_mutex_lock+0xc8>
					_current->base.prio :
    f3be:	6891      	ldr	r1, [r2, #8]
    f3c0:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    f3c4:	3301      	adds	r3, #1
    f3c6:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    f3c8:	6893      	ldr	r3, [r2, #8]
    f3ca:	4844      	ldr	r0, [pc, #272]	; (f4dc <z_impl_k_mutex_lock+0x1a8>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    f3cc:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    f3ce:	60a3      	str	r3, [r4, #8]
    f3d0:	f001 fe3e 	bl	11050 <z_spin_unlock_valid>
    f3d4:	b968      	cbnz	r0, f3f2 <z_impl_k_mutex_lock+0xbe>
    f3d6:	2384      	movs	r3, #132	; 0x84
    f3d8:	4a41      	ldr	r2, [pc, #260]	; (f4e0 <z_impl_k_mutex_lock+0x1ac>)
    f3da:	4946      	ldr	r1, [pc, #280]	; (f4f4 <z_impl_k_mutex_lock+0x1c0>)
    f3dc:	4842      	ldr	r0, [pc, #264]	; (f4e8 <z_impl_k_mutex_lock+0x1b4>)
    f3de:	f002 fe93 	bl	12108 <printk>
    f3e2:	493e      	ldr	r1, [pc, #248]	; (f4dc <z_impl_k_mutex_lock+0x1a8>)
    f3e4:	4844      	ldr	r0, [pc, #272]	; (f4f8 <z_impl_k_mutex_lock+0x1c4>)
    f3e6:	f002 fe8f 	bl	12108 <printk>
    f3ea:	2184      	movs	r1, #132	; 0x84
    f3ec:	483c      	ldr	r0, [pc, #240]	; (f4e0 <z_impl_k_mutex_lock+0x1ac>)
    f3ee:	f003 f921 	bl	12634 <assert_post_action>
    f3f2:	f388 8811 	msr	BASEPRI, r8
    f3f6:	f3bf 8f6f 	isb	sy
		return 0;
    f3fa:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    f3fc:	b002      	add	sp, #8
    f3fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    f402:	6921      	ldr	r1, [r4, #16]
    f404:	e7de      	b.n	f3c4 <z_impl_k_mutex_lock+0x90>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    f406:	f990 300e 	ldrsb.w	r3, [r0, #14]
    f40a:	f991 100e 	ldrsb.w	r1, [r1, #14]
    f40e:	4299      	cmp	r1, r3
    f410:	bfa8      	it	ge
    f412:	4619      	movge	r1, r3
    f414:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    f418:	428b      	cmp	r3, r1
    f41a:	dd41      	ble.n	f4a0 <z_impl_k_mutex_lock+0x16c>
		return z_set_prio(mutex->owner, new_prio);
    f41c:	f001 f93a 	bl	10694 <z_set_prio>
    f420:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    f422:	4622      	mov	r2, r4
    f424:	4641      	mov	r1, r8
    f426:	e9cd 6700 	strd	r6, r7, [sp]
    f42a:	482c      	ldr	r0, [pc, #176]	; (f4dc <z_impl_k_mutex_lock+0x1a8>)
    f42c:	f001 f902 	bl	10634 <z_pend_curr>
	if (got_mutex == 0) {
    f430:	2800      	cmp	r0, #0
    f432:	d0e3      	beq.n	f3fc <z_impl_k_mutex_lock+0xc8>
	__asm__ volatile(
    f434:	f04f 0320 	mov.w	r3, #32
    f438:	f3ef 8611 	mrs	r6, BASEPRI
    f43c:	f383 8811 	msr	BASEPRI, r3
    f440:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f444:	4825      	ldr	r0, [pc, #148]	; (f4dc <z_impl_k_mutex_lock+0x1a8>)
    f446:	f001 fdf5 	bl	11034 <z_spin_lock_valid>
    f44a:	b968      	cbnz	r0, f468 <z_impl_k_mutex_lock+0x134>
    f44c:	235c      	movs	r3, #92	; 0x5c
    f44e:	4a24      	ldr	r2, [pc, #144]	; (f4e0 <z_impl_k_mutex_lock+0x1ac>)
    f450:	4924      	ldr	r1, [pc, #144]	; (f4e4 <z_impl_k_mutex_lock+0x1b0>)
    f452:	4825      	ldr	r0, [pc, #148]	; (f4e8 <z_impl_k_mutex_lock+0x1b4>)
    f454:	f002 fe58 	bl	12108 <printk>
    f458:	4920      	ldr	r1, [pc, #128]	; (f4dc <z_impl_k_mutex_lock+0x1a8>)
    f45a:	4824      	ldr	r0, [pc, #144]	; (f4ec <z_impl_k_mutex_lock+0x1b8>)
    f45c:	f002 fe54 	bl	12108 <printk>
    f460:	215c      	movs	r1, #92	; 0x5c
    f462:	481f      	ldr	r0, [pc, #124]	; (f4e0 <z_impl_k_mutex_lock+0x1ac>)
    f464:	f003 f8e6 	bl	12634 <assert_post_action>
	z_spin_lock_set_owner(l);
    f468:	481c      	ldr	r0, [pc, #112]	; (f4dc <z_impl_k_mutex_lock+0x1a8>)
    f46a:	f001 fdff 	bl	1106c <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    f46e:	6823      	ldr	r3, [r4, #0]
    f470:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f472:	429c      	cmp	r4, r3
    f474:	d007      	beq.n	f486 <z_impl_k_mutex_lock+0x152>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    f476:	b133      	cbz	r3, f486 <z_impl_k_mutex_lock+0x152>
    f478:	f993 300e 	ldrsb.w	r3, [r3, #14]
    f47c:	4299      	cmp	r1, r3
    f47e:	bfa8      	it	ge
    f480:	4619      	movge	r1, r3
    f482:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    f486:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    f488:	f990 300e 	ldrsb.w	r3, [r0, #14]
    f48c:	4299      	cmp	r1, r3
    f48e:	d109      	bne.n	f4a4 <z_impl_k_mutex_lock+0x170>
	if (resched) {
    f490:	b16d      	cbz	r5, f4ae <z_impl_k_mutex_lock+0x17a>
		z_reschedule(&lock, key);
    f492:	4631      	mov	r1, r6
    f494:	4811      	ldr	r0, [pc, #68]	; (f4dc <z_impl_k_mutex_lock+0x1a8>)
    f496:	f000 fad9 	bl	fa4c <z_reschedule>
	return -EAGAIN;
    f49a:	f06f 000a 	mvn.w	r0, #10
    f49e:	e7ad      	b.n	f3fc <z_impl_k_mutex_lock+0xc8>
	bool resched = false;
    f4a0:	2500      	movs	r5, #0
    f4a2:	e7be      	b.n	f422 <z_impl_k_mutex_lock+0xee>
		return z_set_prio(mutex->owner, new_prio);
    f4a4:	f001 f8f6 	bl	10694 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    f4a8:	2800      	cmp	r0, #0
    f4aa:	d1f2      	bne.n	f492 <z_impl_k_mutex_lock+0x15e>
    f4ac:	e7f0      	b.n	f490 <z_impl_k_mutex_lock+0x15c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f4ae:	480b      	ldr	r0, [pc, #44]	; (f4dc <z_impl_k_mutex_lock+0x1a8>)
    f4b0:	f001 fdce 	bl	11050 <z_spin_unlock_valid>
    f4b4:	b968      	cbnz	r0, f4d2 <z_impl_k_mutex_lock+0x19e>
    f4b6:	2384      	movs	r3, #132	; 0x84
    f4b8:	4a09      	ldr	r2, [pc, #36]	; (f4e0 <z_impl_k_mutex_lock+0x1ac>)
    f4ba:	490e      	ldr	r1, [pc, #56]	; (f4f4 <z_impl_k_mutex_lock+0x1c0>)
    f4bc:	480a      	ldr	r0, [pc, #40]	; (f4e8 <z_impl_k_mutex_lock+0x1b4>)
    f4be:	f002 fe23 	bl	12108 <printk>
    f4c2:	4906      	ldr	r1, [pc, #24]	; (f4dc <z_impl_k_mutex_lock+0x1a8>)
    f4c4:	480c      	ldr	r0, [pc, #48]	; (f4f8 <z_impl_k_mutex_lock+0x1c4>)
    f4c6:	f002 fe1f 	bl	12108 <printk>
    f4ca:	2184      	movs	r1, #132	; 0x84
    f4cc:	4804      	ldr	r0, [pc, #16]	; (f4e0 <z_impl_k_mutex_lock+0x1ac>)
    f4ce:	f003 f8b1 	bl	12634 <assert_post_action>
	__asm__ volatile(
    f4d2:	f386 8811 	msr	BASEPRI, r6
    f4d6:	f3bf 8f6f 	isb	sy
    f4da:	e7de      	b.n	f49a <z_impl_k_mutex_lock+0x166>
    f4dc:	20001d84 	.word	0x20001d84
    f4e0:	0001820d 	.word	0x0001820d
    f4e4:	00018233 	.word	0x00018233
    f4e8:	00017d82 	.word	0x00017d82
    f4ec:	00018248 	.word	0x00018248
    f4f0:	20001d88 	.word	0x20001d88
    f4f4:	00018260 	.word	0x00018260
    f4f8:	00018277 	.word	0x00018277

0000f4fc <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    f4fc:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	CHECKIF(mutex->owner == NULL) {
    f4fe:	6883      	ldr	r3, [r0, #8]
{
    f500:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    f502:	2b00      	cmp	r3, #0
    f504:	f000 8091 	beq.w	f62a <z_impl_k_mutex_unlock+0x12e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    f508:	4d4b      	ldr	r5, [pc, #300]	; (f638 <z_impl_k_mutex_unlock+0x13c>)
    f50a:	68aa      	ldr	r2, [r5, #8]
    f50c:	4293      	cmp	r3, r2
    f50e:	f040 808f 	bne.w	f630 <z_impl_k_mutex_unlock+0x134>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    f512:	68c3      	ldr	r3, [r0, #12]
    f514:	b94b      	cbnz	r3, f52a <z_impl_k_mutex_unlock+0x2e>
    f516:	4949      	ldr	r1, [pc, #292]	; (f63c <z_impl_k_mutex_unlock+0x140>)
    f518:	4849      	ldr	r0, [pc, #292]	; (f640 <z_impl_k_mutex_unlock+0x144>)
    f51a:	23e6      	movs	r3, #230	; 0xe6
    f51c:	4a49      	ldr	r2, [pc, #292]	; (f644 <z_impl_k_mutex_unlock+0x148>)
    f51e:	f002 fdf3 	bl	12108 <printk>
    f522:	21e6      	movs	r1, #230	; 0xe6
    f524:	4847      	ldr	r0, [pc, #284]	; (f644 <z_impl_k_mutex_unlock+0x148>)
    f526:	f003 f885 	bl	12634 <assert_post_action>
    f52a:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
    f52e:	b173      	cbz	r3, f54e <z_impl_k_mutex_unlock+0x52>
    f530:	4945      	ldr	r1, [pc, #276]	; (f648 <z_impl_k_mutex_unlock+0x14c>)
    f532:	f240 130b 	movw	r3, #267	; 0x10b
    f536:	4a45      	ldr	r2, [pc, #276]	; (f64c <z_impl_k_mutex_unlock+0x150>)
    f538:	4841      	ldr	r0, [pc, #260]	; (f640 <z_impl_k_mutex_unlock+0x144>)
    f53a:	f002 fde5 	bl	12108 <printk>
    f53e:	4844      	ldr	r0, [pc, #272]	; (f650 <z_impl_k_mutex_unlock+0x154>)
    f540:	f002 fde2 	bl	12108 <printk>
    f544:	f240 110b 	movw	r1, #267	; 0x10b
    f548:	4840      	ldr	r0, [pc, #256]	; (f64c <z_impl_k_mutex_unlock+0x150>)
    f54a:	f003 f873 	bl	12634 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
    f54e:	68ab      	ldr	r3, [r5, #8]
    f550:	7bdb      	ldrb	r3, [r3, #15]
    f552:	2b01      	cmp	r3, #1
    f554:	d10e      	bne.n	f574 <z_impl_k_mutex_unlock+0x78>
    f556:	493f      	ldr	r1, [pc, #252]	; (f654 <z_impl_k_mutex_unlock+0x158>)
    f558:	f44f 7386 	mov.w	r3, #268	; 0x10c
    f55c:	4a3b      	ldr	r2, [pc, #236]	; (f64c <z_impl_k_mutex_unlock+0x150>)
    f55e:	4838      	ldr	r0, [pc, #224]	; (f640 <z_impl_k_mutex_unlock+0x144>)
    f560:	f002 fdd2 	bl	12108 <printk>
    f564:	483a      	ldr	r0, [pc, #232]	; (f650 <z_impl_k_mutex_unlock+0x154>)
    f566:	f002 fdcf 	bl	12108 <printk>
    f56a:	f44f 7186 	mov.w	r1, #268	; 0x10c
    f56e:	4837      	ldr	r0, [pc, #220]	; (f64c <z_impl_k_mutex_unlock+0x150>)
    f570:	f003 f860 	bl	12634 <assert_post_action>

	--_current->base.sched_locked;
    f574:	68aa      	ldr	r2, [r5, #8]
    f576:	7bd3      	ldrb	r3, [r2, #15]
    f578:	3b01      	subs	r3, #1
    f57a:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
    f57c:	68e3      	ldr	r3, [r4, #12]
    f57e:	2b01      	cmp	r3, #1
    f580:	d005      	beq.n	f58e <z_impl_k_mutex_unlock+0x92>
		mutex->lock_count--;
    f582:	3b01      	subs	r3, #1
    f584:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
    f586:	f000 fbbd 	bl	fd04 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
    f58a:	2000      	movs	r0, #0
}
    f58c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    f58e:	f04f 0320 	mov.w	r3, #32
    f592:	f3ef 8511 	mrs	r5, BASEPRI
    f596:	f383 8811 	msr	BASEPRI, r3
    f59a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f59e:	482e      	ldr	r0, [pc, #184]	; (f658 <z_impl_k_mutex_unlock+0x15c>)
    f5a0:	f001 fd48 	bl	11034 <z_spin_lock_valid>
    f5a4:	b968      	cbnz	r0, f5c2 <z_impl_k_mutex_unlock+0xc6>
    f5a6:	235c      	movs	r3, #92	; 0x5c
    f5a8:	4a2c      	ldr	r2, [pc, #176]	; (f65c <z_impl_k_mutex_unlock+0x160>)
    f5aa:	492d      	ldr	r1, [pc, #180]	; (f660 <z_impl_k_mutex_unlock+0x164>)
    f5ac:	4824      	ldr	r0, [pc, #144]	; (f640 <z_impl_k_mutex_unlock+0x144>)
    f5ae:	f002 fdab 	bl	12108 <printk>
    f5b2:	4929      	ldr	r1, [pc, #164]	; (f658 <z_impl_k_mutex_unlock+0x15c>)
    f5b4:	482b      	ldr	r0, [pc, #172]	; (f664 <z_impl_k_mutex_unlock+0x168>)
    f5b6:	f002 fda7 	bl	12108 <printk>
    f5ba:	215c      	movs	r1, #92	; 0x5c
    f5bc:	4827      	ldr	r0, [pc, #156]	; (f65c <z_impl_k_mutex_unlock+0x160>)
    f5be:	f003 f839 	bl	12634 <assert_post_action>
	z_spin_lock_set_owner(l);
    f5c2:	4825      	ldr	r0, [pc, #148]	; (f658 <z_impl_k_mutex_unlock+0x15c>)
    f5c4:	f001 fd52 	bl	1106c <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    f5c8:	68a0      	ldr	r0, [r4, #8]
    f5ca:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
    f5cc:	f990 300e 	ldrsb.w	r3, [r0, #14]
    f5d0:	4299      	cmp	r1, r3
    f5d2:	d001      	beq.n	f5d8 <z_impl_k_mutex_unlock+0xdc>
		return z_set_prio(mutex->owner, new_prio);
    f5d4:	f001 f85e 	bl	10694 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    f5d8:	4620      	mov	r0, r4
    f5da:	f001 f8f1 	bl	107c0 <z_unpend_first_thread>
	mutex->owner = new_owner;
    f5de:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    f5e0:	b158      	cbz	r0, f5fa <z_impl_k_mutex_unlock+0xfe>
		mutex->owner_orig_prio = new_owner->base.prio;
    f5e2:	f990 200e 	ldrsb.w	r2, [r0, #14]
    f5e6:	6122      	str	r2, [r4, #16]
    f5e8:	2200      	movs	r2, #0
    f5ea:	6702      	str	r2, [r0, #112]	; 0x70
		z_ready_thread(new_owner);
    f5ec:	f000 fc54 	bl	fe98 <z_ready_thread>
		z_reschedule(&lock, key);
    f5f0:	4629      	mov	r1, r5
    f5f2:	4819      	ldr	r0, [pc, #100]	; (f658 <z_impl_k_mutex_unlock+0x15c>)
    f5f4:	f000 fa2a 	bl	fa4c <z_reschedule>
    f5f8:	e7c5      	b.n	f586 <z_impl_k_mutex_unlock+0x8a>
		mutex->lock_count = 0U;
    f5fa:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f5fc:	4816      	ldr	r0, [pc, #88]	; (f658 <z_impl_k_mutex_unlock+0x15c>)
    f5fe:	f001 fd27 	bl	11050 <z_spin_unlock_valid>
    f602:	b968      	cbnz	r0, f620 <z_impl_k_mutex_unlock+0x124>
    f604:	2384      	movs	r3, #132	; 0x84
    f606:	4a15      	ldr	r2, [pc, #84]	; (f65c <z_impl_k_mutex_unlock+0x160>)
    f608:	4917      	ldr	r1, [pc, #92]	; (f668 <z_impl_k_mutex_unlock+0x16c>)
    f60a:	480d      	ldr	r0, [pc, #52]	; (f640 <z_impl_k_mutex_unlock+0x144>)
    f60c:	f002 fd7c 	bl	12108 <printk>
    f610:	4911      	ldr	r1, [pc, #68]	; (f658 <z_impl_k_mutex_unlock+0x15c>)
    f612:	4816      	ldr	r0, [pc, #88]	; (f66c <z_impl_k_mutex_unlock+0x170>)
    f614:	f002 fd78 	bl	12108 <printk>
    f618:	2184      	movs	r1, #132	; 0x84
    f61a:	4810      	ldr	r0, [pc, #64]	; (f65c <z_impl_k_mutex_unlock+0x160>)
    f61c:	f003 f80a 	bl	12634 <assert_post_action>
	__asm__ volatile(
    f620:	f385 8811 	msr	BASEPRI, r5
    f624:	f3bf 8f6f 	isb	sy
    f628:	e7ad      	b.n	f586 <z_impl_k_mutex_unlock+0x8a>
		return -EINVAL;
    f62a:	f06f 0015 	mvn.w	r0, #21
    f62e:	e7ad      	b.n	f58c <z_impl_k_mutex_unlock+0x90>
		return -EPERM;
    f630:	f04f 30ff 	mov.w	r0, #4294967295
    f634:	e7aa      	b.n	f58c <z_impl_k_mutex_unlock+0x90>
    f636:	bf00      	nop
    f638:	20001d88 	.word	0x20001d88
    f63c:	0001b91b 	.word	0x0001b91b
    f640:	00017d82 	.word	0x00017d82
    f644:	0001b8f9 	.word	0x0001b8f9
    f648:	0001b95d 	.word	0x0001b95d
    f64c:	0001b932 	.word	0x0001b932
    f650:	0001b120 	.word	0x0001b120
    f654:	0001b96f 	.word	0x0001b96f
    f658:	20001d84 	.word	0x20001d84
    f65c:	0001820d 	.word	0x0001820d
    f660:	00018233 	.word	0x00018233
    f664:	00018248 	.word	0x00018248
    f668:	00018260 	.word	0x00018260
    f66c:	00018277 	.word	0x00018277

0000f670 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
    f670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f674:	4604      	mov	r4, r0
    f676:	460e      	mov	r6, r1
    f678:	4690      	mov	r8, r2
    f67a:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    f67c:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    f680:	f04f 0320 	mov.w	r3, #32
    f684:	f3ef 8711 	mrs	r7, BASEPRI
    f688:	f383 8811 	msr	BASEPRI, r3
    f68c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f690:	4628      	mov	r0, r5
    f692:	f001 fccf 	bl	11034 <z_spin_lock_valid>
    f696:	b968      	cbnz	r0, f6b4 <queue_insert+0x44>
    f698:	235c      	movs	r3, #92	; 0x5c
    f69a:	4a39      	ldr	r2, [pc, #228]	; (f780 <queue_insert+0x110>)
    f69c:	4939      	ldr	r1, [pc, #228]	; (f784 <queue_insert+0x114>)
    f69e:	483a      	ldr	r0, [pc, #232]	; (f788 <queue_insert+0x118>)
    f6a0:	f002 fd32 	bl	12108 <printk>
    f6a4:	4629      	mov	r1, r5
    f6a6:	4839      	ldr	r0, [pc, #228]	; (f78c <queue_insert+0x11c>)
    f6a8:	f002 fd2e 	bl	12108 <printk>
    f6ac:	215c      	movs	r1, #92	; 0x5c
    f6ae:	4834      	ldr	r0, [pc, #208]	; (f780 <queue_insert+0x110>)
    f6b0:	f002 ffc0 	bl	12634 <assert_post_action>
	z_spin_lock_set_owner(l);
    f6b4:	4628      	mov	r0, r5
    f6b6:	f001 fcd9 	bl	1106c <z_spin_lock_set_owner>
	struct k_thread *first_pending_thread;

	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
    f6ba:	f104 000c 	add.w	r0, r4, #12
    f6be:	f001 f87f 	bl	107c0 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
    f6c2:	b158      	cbz	r0, f6dc <queue_insert+0x6c>
    f6c4:	2400      	movs	r4, #0
    f6c6:	f8c0 8014 	str.w	r8, [r0, #20]
    f6ca:	6704      	str	r4, [r0, #112]	; 0x70
	z_ready_thread(thread);
    f6cc:	f000 fbe4 	bl	fe98 <z_ready_thread>
		sys_sfnode_init(data, 0x0);
	}

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
    f6d0:	4628      	mov	r0, r5
    f6d2:	4639      	mov	r1, r7
    f6d4:	f000 f9ba 	bl	fa4c <z_reschedule>
	return 0;
    f6d8:	2000      	movs	r0, #0
    f6da:	e01e      	b.n	f71a <queue_insert+0xaa>
	if (alloc) {
    f6dc:	f1b9 0f00 	cmp.w	r9, #0
    f6e0:	d02d      	beq.n	f73e <queue_insert+0xce>
		anode = z_thread_malloc(sizeof(*anode));
    f6e2:	2008      	movs	r0, #8
    f6e4:	f7ff fe10 	bl	f308 <z_thread_malloc>
		if (anode == NULL) {
    f6e8:	b9c8      	cbnz	r0, f71e <queue_insert+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f6ea:	4628      	mov	r0, r5
    f6ec:	f001 fcb0 	bl	11050 <z_spin_unlock_valid>
    f6f0:	b968      	cbnz	r0, f70e <queue_insert+0x9e>
    f6f2:	2384      	movs	r3, #132	; 0x84
    f6f4:	4a22      	ldr	r2, [pc, #136]	; (f780 <queue_insert+0x110>)
    f6f6:	4926      	ldr	r1, [pc, #152]	; (f790 <queue_insert+0x120>)
    f6f8:	4823      	ldr	r0, [pc, #140]	; (f788 <queue_insert+0x118>)
    f6fa:	f002 fd05 	bl	12108 <printk>
    f6fe:	4629      	mov	r1, r5
    f700:	4824      	ldr	r0, [pc, #144]	; (f794 <queue_insert+0x124>)
    f702:	f002 fd01 	bl	12108 <printk>
    f706:	2184      	movs	r1, #132	; 0x84
    f708:	481d      	ldr	r0, [pc, #116]	; (f780 <queue_insert+0x110>)
    f70a:	f002 ff93 	bl	12634 <assert_post_action>
	__asm__ volatile(
    f70e:	f387 8811 	msr	BASEPRI, r7
    f712:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
    f716:	f06f 000b 	mvn.w	r0, #11
}
    f71a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
    f71e:	2301      	movs	r3, #1
		anode->data = data;
    f720:	f8c0 8004 	str.w	r8, [r0, #4]
    f724:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
    f726:	6803      	ldr	r3, [r0, #0]
    f728:	f003 0303 	and.w	r3, r3, #3
    f72c:	b95e      	cbnz	r6, f746 <queue_insert+0xd6>
	parent->next_and_flags = cur_flags | (unative_t)child;
    f72e:	6822      	ldr	r2, [r4, #0]
    f730:	4313      	orrs	r3, r2
    f732:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    f734:	6863      	ldr	r3, [r4, #4]
	list->head = node;
    f736:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    f738:	b973      	cbnz	r3, f758 <queue_insert+0xe8>
	list->tail = node;
    f73a:	6060      	str	r0, [r4, #4]
}
    f73c:	e00c      	b.n	f758 <queue_insert+0xe8>
}
    f73e:	4640      	mov	r0, r8
	node->next_and_flags = flags;
    f740:	f8c8 9000 	str.w	r9, [r8]
}
    f744:	e7ef      	b.n	f726 <queue_insert+0xb6>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    f746:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    f748:	f032 0203 	bics.w	r2, r2, #3
    f74c:	d110      	bne.n	f770 <queue_insert+0x100>
Z_GENLIST_APPEND(sflist, sfnode)
    f74e:	6862      	ldr	r2, [r4, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
    f750:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
    f752:	b93a      	cbnz	r2, f764 <queue_insert+0xf4>
	list->head = node;
    f754:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
    f758:	2104      	movs	r1, #4
    f75a:	f104 0014 	add.w	r0, r4, #20
    f75e:	f007 f953 	bl	16a08 <z_handle_obj_poll_events>
    f762:	e7b5      	b.n	f6d0 <queue_insert+0x60>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    f764:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    f766:	f003 0303 	and.w	r3, r3, #3
    f76a:	4303      	orrs	r3, r0
    f76c:	6013      	str	r3, [r2, #0]
    f76e:	e7e4      	b.n	f73a <queue_insert+0xca>
    f770:	4313      	orrs	r3, r2
    f772:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    f774:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    f776:	f003 0303 	and.w	r3, r3, #3
    f77a:	4303      	orrs	r3, r0
    f77c:	6033      	str	r3, [r6, #0]
}
    f77e:	e7eb      	b.n	f758 <queue_insert+0xe8>
    f780:	0001820d 	.word	0x0001820d
    f784:	00018233 	.word	0x00018233
    f788:	00017d82 	.word	0x00017d82
    f78c:	00018248 	.word	0x00018248
    f790:	00018260 	.word	0x00018260
    f794:	00018277 	.word	0x00018277

0000f798 <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
    f798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f79c:	4605      	mov	r5, r0
    f79e:	4617      	mov	r7, r2
	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
    f7a0:	460c      	mov	r4, r1
    f7a2:	2900      	cmp	r1, #0
    f7a4:	d04a      	beq.n	f83c <k_queue_append_list+0xa4>
    f7a6:	2a00      	cmp	r2, #0
    f7a8:	d048      	beq.n	f83c <k_queue_append_list+0xa4>
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    f7aa:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    f7ae:	f04f 0320 	mov.w	r3, #32
    f7b2:	f3ef 8911 	mrs	r9, BASEPRI
    f7b6:	f383 8811 	msr	BASEPRI, r3
    f7ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f7be:	4630      	mov	r0, r6
    f7c0:	f001 fc38 	bl	11034 <z_spin_lock_valid>
    f7c4:	b968      	cbnz	r0, f7e2 <k_queue_append_list+0x4a>
    f7c6:	235c      	movs	r3, #92	; 0x5c
    f7c8:	4a1e      	ldr	r2, [pc, #120]	; (f844 <k_queue_append_list+0xac>)
    f7ca:	491f      	ldr	r1, [pc, #124]	; (f848 <k_queue_append_list+0xb0>)
    f7cc:	481f      	ldr	r0, [pc, #124]	; (f84c <k_queue_append_list+0xb4>)
    f7ce:	f002 fc9b 	bl	12108 <printk>
    f7d2:	4631      	mov	r1, r6
    f7d4:	481e      	ldr	r0, [pc, #120]	; (f850 <k_queue_append_list+0xb8>)
    f7d6:	f002 fc97 	bl	12108 <printk>
    f7da:	215c      	movs	r1, #92	; 0x5c
    f7dc:	4819      	ldr	r0, [pc, #100]	; (f844 <k_queue_append_list+0xac>)
    f7de:	f002 ff29 	bl	12634 <assert_post_action>
	z_spin_lock_set_owner(l);
    f7e2:	4630      	mov	r0, r6
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
    f7e4:	f105 080c 	add.w	r8, r5, #12
    f7e8:	f001 fc40 	bl	1106c <z_spin_lock_set_owner>
    f7ec:	4640      	mov	r0, r8
    f7ee:	f000 ffe7 	bl	107c0 <z_unpend_first_thread>
    f7f2:	f04f 0a00 	mov.w	sl, #0
	}

	while ((head != NULL) && (thread != NULL)) {
    f7f6:	b920      	cbnz	r0, f802 <k_queue_append_list+0x6a>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
    f7f8:	686b      	ldr	r3, [r5, #4]
    f7fa:	b9cb      	cbnz	r3, f830 <k_queue_append_list+0x98>
	list->head = node;
    f7fc:	602c      	str	r4, [r5, #0]
	list->tail = node;
    f7fe:	606f      	str	r7, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
    f800:	e00a      	b.n	f818 <k_queue_append_list+0x80>
    f802:	6144      	str	r4, [r0, #20]
    f804:	f8c0 a070 	str.w	sl, [r0, #112]	; 0x70
	z_ready_thread(thread);
    f808:	f000 fb46 	bl	fe98 <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
    f80c:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
    f80e:	4640      	mov	r0, r8
    f810:	f000 ffd6 	bl	107c0 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
    f814:	2c00      	cmp	r4, #0
    f816:	d1ee      	bne.n	f7f6 <k_queue_append_list+0x5e>
	z_handle_obj_poll_events(&queue->poll_events, state);
    f818:	2104      	movs	r1, #4
    f81a:	f105 0014 	add.w	r0, r5, #20
    f81e:	f007 f8f3 	bl	16a08 <z_handle_obj_poll_events>
	if (head != NULL) {
		sys_sflist_append_list(&queue->data_q, head, tail);
	}

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
    f822:	4630      	mov	r0, r6
    f824:	4649      	mov	r1, r9
    f826:	f000 f911 	bl	fa4c <z_reschedule>
	return 0;
    f82a:	2000      	movs	r0, #0
}
    f82c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    f830:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    f832:	f001 0103 	and.w	r1, r1, #3
    f836:	430c      	orrs	r4, r1
    f838:	601c      	str	r4, [r3, #0]
}
    f83a:	e7e0      	b.n	f7fe <k_queue_append_list+0x66>
		return -EINVAL;
    f83c:	f06f 0015 	mvn.w	r0, #21
    f840:	e7f4      	b.n	f82c <k_queue_append_list+0x94>
    f842:	bf00      	nop
    f844:	0001820d 	.word	0x0001820d
    f848:	00018233 	.word	0x00018233
    f84c:	00017d82 	.word	0x00017d82
    f850:	00018248 	.word	0x00018248

0000f854 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    f854:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    f858:	4606      	mov	r6, r0
    f85a:	4690      	mov	r8, r2
    f85c:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    f85e:	f100 0508 	add.w	r5, r0, #8
    f862:	f04f 0320 	mov.w	r3, #32
    f866:	f3ef 8711 	mrs	r7, BASEPRI
    f86a:	f383 8811 	msr	BASEPRI, r3
    f86e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f872:	4628      	mov	r0, r5
    f874:	f001 fbde 	bl	11034 <z_spin_lock_valid>
    f878:	b968      	cbnz	r0, f896 <z_impl_k_queue_get+0x42>
    f87a:	235c      	movs	r3, #92	; 0x5c
    f87c:	4a25      	ldr	r2, [pc, #148]	; (f914 <z_impl_k_queue_get+0xc0>)
    f87e:	4926      	ldr	r1, [pc, #152]	; (f918 <z_impl_k_queue_get+0xc4>)
    f880:	4826      	ldr	r0, [pc, #152]	; (f91c <z_impl_k_queue_get+0xc8>)
    f882:	f002 fc41 	bl	12108 <printk>
    f886:	4629      	mov	r1, r5
    f888:	4825      	ldr	r0, [pc, #148]	; (f920 <z_impl_k_queue_get+0xcc>)
    f88a:	f002 fc3d 	bl	12108 <printk>
    f88e:	215c      	movs	r1, #92	; 0x5c
    f890:	4820      	ldr	r0, [pc, #128]	; (f914 <z_impl_k_queue_get+0xc0>)
    f892:	f002 fecf 	bl	12634 <assert_post_action>
	z_spin_lock_set_owner(l);
    f896:	4628      	mov	r0, r5
    f898:	f001 fbe8 	bl	1106c <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
    f89c:	6834      	ldr	r4, [r6, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    f89e:	b33c      	cbz	r4, f8f0 <z_impl_k_queue_get+0x9c>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    f8a0:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    f8a2:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    f8a4:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    f8a8:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    f8aa:	4620      	mov	r0, r4
    f8ac:	f04f 0101 	mov.w	r1, #1
	list->head = node;
    f8b0:	6033      	str	r3, [r6, #0]
	list->tail = node;
    f8b2:	bf08      	it	eq
    f8b4:	6073      	streq	r3, [r6, #4]
    f8b6:	f006 ff4f 	bl	16758 <z_queue_node_peek>
    f8ba:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f8bc:	4628      	mov	r0, r5
    f8be:	f001 fbc7 	bl	11050 <z_spin_unlock_valid>
    f8c2:	b968      	cbnz	r0, f8e0 <z_impl_k_queue_get+0x8c>
    f8c4:	2384      	movs	r3, #132	; 0x84
    f8c6:	4a13      	ldr	r2, [pc, #76]	; (f914 <z_impl_k_queue_get+0xc0>)
    f8c8:	4916      	ldr	r1, [pc, #88]	; (f924 <z_impl_k_queue_get+0xd0>)
    f8ca:	4814      	ldr	r0, [pc, #80]	; (f91c <z_impl_k_queue_get+0xc8>)
    f8cc:	f002 fc1c 	bl	12108 <printk>
    f8d0:	4629      	mov	r1, r5
    f8d2:	4815      	ldr	r0, [pc, #84]	; (f928 <z_impl_k_queue_get+0xd4>)
    f8d4:	f002 fc18 	bl	12108 <printk>
    f8d8:	2184      	movs	r1, #132	; 0x84
    f8da:	480e      	ldr	r0, [pc, #56]	; (f914 <z_impl_k_queue_get+0xc0>)
    f8dc:	f002 feaa 	bl	12634 <assert_post_action>
	__asm__ volatile(
    f8e0:	f387 8811 	msr	BASEPRI, r7
    f8e4:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    f8e8:	4620      	mov	r0, r4
    f8ea:	b003      	add	sp, #12
    f8ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    f8f0:	ea58 0309 	orrs.w	r3, r8, r9
    f8f4:	d0e2      	beq.n	f8bc <z_impl_k_queue_get+0x68>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    f8f6:	4639      	mov	r1, r7
    f8f8:	4628      	mov	r0, r5
    f8fa:	e9cd 8900 	strd	r8, r9, [sp]
    f8fe:	f106 020c 	add.w	r2, r6, #12
    f902:	f000 fe97 	bl	10634 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    f906:	2800      	cmp	r0, #0
    f908:	d1ee      	bne.n	f8e8 <z_impl_k_queue_get+0x94>
    f90a:	4b08      	ldr	r3, [pc, #32]	; (f92c <z_impl_k_queue_get+0xd8>)
    f90c:	689b      	ldr	r3, [r3, #8]
    f90e:	695c      	ldr	r4, [r3, #20]
    f910:	e7ea      	b.n	f8e8 <z_impl_k_queue_get+0x94>
    f912:	bf00      	nop
    f914:	0001820d 	.word	0x0001820d
    f918:	00018233 	.word	0x00018233
    f91c:	00017d82 	.word	0x00017d82
    f920:	00018248 	.word	0x00018248
    f924:	00018260 	.word	0x00018260
    f928:	00018277 	.word	0x00018277
    f92c:	20001d88 	.word	0x20001d88

0000f930 <pended_on.isra.0>:
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
    f930:	6803      	ldr	r3, [r0, #0]
static _wait_q_t *pended_on(struct k_thread *thread)
    f932:	b510      	push	{r4, lr}
    f934:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    f936:	b95b      	cbnz	r3, f950 <pended_on.isra.0+0x20>
    f938:	4906      	ldr	r1, [pc, #24]	; (f954 <pended_on.isra.0+0x24>)
    f93a:	4807      	ldr	r0, [pc, #28]	; (f958 <pended_on.isra.0+0x28>)
    f93c:	f240 13d9 	movw	r3, #473	; 0x1d9
    f940:	4a06      	ldr	r2, [pc, #24]	; (f95c <pended_on.isra.0+0x2c>)
    f942:	f002 fbe1 	bl	12108 <printk>
    f946:	f240 11d9 	movw	r1, #473	; 0x1d9
    f94a:	4804      	ldr	r0, [pc, #16]	; (f95c <pended_on.isra.0+0x2c>)
    f94c:	f002 fe72 	bl	12634 <assert_post_action>

	return thread->base.pended_on;
}
    f950:	6820      	ldr	r0, [r4, #0]
    f952:	bd10      	pop	{r4, pc}
    f954:	0001b9c1 	.word	0x0001b9c1
    f958:	00017d82 	.word	0x00017d82
    f95c:	0001b99f 	.word	0x0001b99f

0000f960 <z_reset_time_slice>:
{
    f960:	b510      	push	{r4, lr}
	if (slice_time != 0) {
    f962:	4c08      	ldr	r4, [pc, #32]	; (f984 <z_reset_time_slice+0x24>)
    f964:	6823      	ldr	r3, [r4, #0]
    f966:	b15b      	cbz	r3, f980 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    f968:	f7f3 f84a 	bl	2a00 <z_clock_elapsed>
    f96c:	4603      	mov	r3, r0
    f96e:	6820      	ldr	r0, [r4, #0]
    f970:	4a05      	ldr	r2, [pc, #20]	; (f988 <z_reset_time_slice+0x28>)
    f972:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
    f974:	2100      	movs	r1, #0
}
    f976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    f97a:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    f97c:	f001 be2c 	b.w	115d8 <z_set_timeout_expiry>
}
    f980:	bd10      	pop	{r4, pc}
    f982:	bf00      	nop
    f984:	20001dc4 	.word	0x20001dc4
    f988:	20001d88 	.word	0x20001d88

0000f98c <k_sched_time_slice_set>:
{
    f98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f98e:	4605      	mov	r5, r0
    f990:	460c      	mov	r4, r1
	__asm__ volatile(
    f992:	f04f 0320 	mov.w	r3, #32
    f996:	f3ef 8611 	mrs	r6, BASEPRI
    f99a:	f383 8811 	msr	BASEPRI, r3
    f99e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f9a2:	4820      	ldr	r0, [pc, #128]	; (fa24 <k_sched_time_slice_set+0x98>)
    f9a4:	f001 fb46 	bl	11034 <z_spin_lock_valid>
    f9a8:	b968      	cbnz	r0, f9c6 <k_sched_time_slice_set+0x3a>
    f9aa:	235c      	movs	r3, #92	; 0x5c
    f9ac:	4a1e      	ldr	r2, [pc, #120]	; (fa28 <k_sched_time_slice_set+0x9c>)
    f9ae:	491f      	ldr	r1, [pc, #124]	; (fa2c <k_sched_time_slice_set+0xa0>)
    f9b0:	481f      	ldr	r0, [pc, #124]	; (fa30 <k_sched_time_slice_set+0xa4>)
    f9b2:	f002 fba9 	bl	12108 <printk>
    f9b6:	491b      	ldr	r1, [pc, #108]	; (fa24 <k_sched_time_slice_set+0x98>)
    f9b8:	481e      	ldr	r0, [pc, #120]	; (fa34 <k_sched_time_slice_set+0xa8>)
    f9ba:	f002 fba5 	bl	12108 <printk>
    f9be:	215c      	movs	r1, #92	; 0x5c
    f9c0:	4819      	ldr	r0, [pc, #100]	; (fa28 <k_sched_time_slice_set+0x9c>)
    f9c2:	f002 fe37 	bl	12634 <assert_post_action>
	z_spin_lock_set_owner(l);
    f9c6:	4817      	ldr	r0, [pc, #92]	; (fa24 <k_sched_time_slice_set+0x98>)
    f9c8:	f001 fb50 	bl	1106c <z_spin_lock_set_owner>
    f9cc:	f44f 4700 	mov.w	r7, #32768	; 0x8000
		_current_cpu->slice_ticks = 0;
    f9d0:	2200      	movs	r2, #0
    f9d2:	f240 30e7 	movw	r0, #999	; 0x3e7
    f9d6:	2100      	movs	r1, #0
    f9d8:	4b17      	ldr	r3, [pc, #92]	; (fa38 <k_sched_time_slice_set+0xac>)
    f9da:	fbe7 0105 	umlal	r0, r1, r7, r5
    f9de:	611a      	str	r2, [r3, #16]
    f9e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f9e4:	2300      	movs	r3, #0
    f9e6:	f7f0 fbb7 	bl	158 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    f9ea:	4b14      	ldr	r3, [pc, #80]	; (fa3c <k_sched_time_slice_set+0xb0>)
    f9ec:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    f9ee:	4b14      	ldr	r3, [pc, #80]	; (fa40 <k_sched_time_slice_set+0xb4>)
    f9f0:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
    f9f2:	f7ff ffb5 	bl	f960 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f9f6:	480b      	ldr	r0, [pc, #44]	; (fa24 <k_sched_time_slice_set+0x98>)
    f9f8:	f001 fb2a 	bl	11050 <z_spin_unlock_valid>
    f9fc:	b968      	cbnz	r0, fa1a <k_sched_time_slice_set+0x8e>
    f9fe:	2384      	movs	r3, #132	; 0x84
    fa00:	4a09      	ldr	r2, [pc, #36]	; (fa28 <k_sched_time_slice_set+0x9c>)
    fa02:	4910      	ldr	r1, [pc, #64]	; (fa44 <k_sched_time_slice_set+0xb8>)
    fa04:	480a      	ldr	r0, [pc, #40]	; (fa30 <k_sched_time_slice_set+0xa4>)
    fa06:	f002 fb7f 	bl	12108 <printk>
    fa0a:	4906      	ldr	r1, [pc, #24]	; (fa24 <k_sched_time_slice_set+0x98>)
    fa0c:	480e      	ldr	r0, [pc, #56]	; (fa48 <k_sched_time_slice_set+0xbc>)
    fa0e:	f002 fb7b 	bl	12108 <printk>
    fa12:	2184      	movs	r1, #132	; 0x84
    fa14:	4804      	ldr	r0, [pc, #16]	; (fa28 <k_sched_time_slice_set+0x9c>)
    fa16:	f002 fe0d 	bl	12634 <assert_post_action>
	__asm__ volatile(
    fa1a:	f386 8811 	msr	BASEPRI, r6
    fa1e:	f3bf 8f6f 	isb	sy
}
    fa22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fa24:	20001dbc 	.word	0x20001dbc
    fa28:	0001820d 	.word	0x0001820d
    fa2c:	00018233 	.word	0x00018233
    fa30:	00017d82 	.word	0x00017d82
    fa34:	00018248 	.word	0x00018248
    fa38:	20001d88 	.word	0x20001d88
    fa3c:	20001dc4 	.word	0x20001dc4
    fa40:	20001dc0 	.word	0x20001dc0
    fa44:	00018260 	.word	0x00018260
    fa48:	00018277 	.word	0x00018277

0000fa4c <z_reschedule>:

	return arch_irq_unlocked(key) && !arch_is_in_isr();
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    fa4c:	b538      	push	{r3, r4, r5, lr}
    fa4e:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    fa50:	460d      	mov	r5, r1
    fa52:	b9c1      	cbnz	r1, fa86 <z_reschedule+0x3a>
    fa54:	f3ef 8305 	mrs	r3, IPSR
    fa58:	b9ab      	cbnz	r3, fa86 <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fa5a:	f001 faf9 	bl	11050 <z_spin_unlock_valid>
    fa5e:	b968      	cbnz	r0, fa7c <z_reschedule+0x30>
    fa60:	239b      	movs	r3, #155	; 0x9b
    fa62:	4a14      	ldr	r2, [pc, #80]	; (fab4 <z_reschedule+0x68>)
    fa64:	4914      	ldr	r1, [pc, #80]	; (fab8 <z_reschedule+0x6c>)
    fa66:	4815      	ldr	r0, [pc, #84]	; (fabc <z_reschedule+0x70>)
    fa68:	f002 fb4e 	bl	12108 <printk>
    fa6c:	4621      	mov	r1, r4
    fa6e:	4814      	ldr	r0, [pc, #80]	; (fac0 <z_reschedule+0x74>)
    fa70:	f002 fb4a 	bl	12108 <printk>
    fa74:	219b      	movs	r1, #155	; 0x9b
    fa76:	480f      	ldr	r0, [pc, #60]	; (fab4 <z_reschedule+0x68>)
    fa78:	f002 fddc 	bl	12634 <assert_post_action>
	if (resched(key.key)) {
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    fa7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
    fa80:	2000      	movs	r0, #0
    fa82:	f7f4 b8ab 	b.w	3bdc <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fa86:	4620      	mov	r0, r4
    fa88:	f001 fae2 	bl	11050 <z_spin_unlock_valid>
    fa8c:	b968      	cbnz	r0, faaa <z_reschedule+0x5e>
    fa8e:	2384      	movs	r3, #132	; 0x84
    fa90:	4a08      	ldr	r2, [pc, #32]	; (fab4 <z_reschedule+0x68>)
    fa92:	4909      	ldr	r1, [pc, #36]	; (fab8 <z_reschedule+0x6c>)
    fa94:	4809      	ldr	r0, [pc, #36]	; (fabc <z_reschedule+0x70>)
    fa96:	f002 fb37 	bl	12108 <printk>
    fa9a:	4621      	mov	r1, r4
    fa9c:	4808      	ldr	r0, [pc, #32]	; (fac0 <z_reschedule+0x74>)
    fa9e:	f002 fb33 	bl	12108 <printk>
    faa2:	2184      	movs	r1, #132	; 0x84
    faa4:	4803      	ldr	r0, [pc, #12]	; (fab4 <z_reschedule+0x68>)
    faa6:	f002 fdc5 	bl	12634 <assert_post_action>
    faaa:	f385 8811 	msr	BASEPRI, r5
    faae:	f3bf 8f6f 	isb	sy
    fab2:	bd38      	pop	{r3, r4, r5, pc}
    fab4:	0001820d 	.word	0x0001820d
    fab8:	00018260 	.word	0x00018260
    fabc:	00017d82 	.word	0x00017d82
    fac0:	00018277 	.word	0x00018277

0000fac4 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    fac4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    fac6:	f04f 0320 	mov.w	r3, #32
    faca:	f3ef 8511 	mrs	r5, BASEPRI
    face:	f383 8811 	msr	BASEPRI, r3
    fad2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    fad6:	482b      	ldr	r0, [pc, #172]	; (fb84 <k_sched_lock+0xc0>)
    fad8:	f001 faac 	bl	11034 <z_spin_lock_valid>
    fadc:	b968      	cbnz	r0, fafa <k_sched_lock+0x36>
    fade:	235c      	movs	r3, #92	; 0x5c
    fae0:	4a29      	ldr	r2, [pc, #164]	; (fb88 <k_sched_lock+0xc4>)
    fae2:	492a      	ldr	r1, [pc, #168]	; (fb8c <k_sched_lock+0xc8>)
    fae4:	482a      	ldr	r0, [pc, #168]	; (fb90 <k_sched_lock+0xcc>)
    fae6:	f002 fb0f 	bl	12108 <printk>
    faea:	4926      	ldr	r1, [pc, #152]	; (fb84 <k_sched_lock+0xc0>)
    faec:	4829      	ldr	r0, [pc, #164]	; (fb94 <k_sched_lock+0xd0>)
    faee:	f002 fb0b 	bl	12108 <printk>
    faf2:	215c      	movs	r1, #92	; 0x5c
    faf4:	4824      	ldr	r0, [pc, #144]	; (fb88 <k_sched_lock+0xc4>)
    faf6:	f002 fd9d 	bl	12634 <assert_post_action>
	z_spin_lock_set_owner(l);
    fafa:	4822      	ldr	r0, [pc, #136]	; (fb84 <k_sched_lock+0xc0>)
    fafc:	f001 fab6 	bl	1106c <z_spin_lock_set_owner>
    fb00:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    fb04:	b173      	cbz	r3, fb24 <k_sched_lock+0x60>
    fb06:	4924      	ldr	r1, [pc, #144]	; (fb98 <k_sched_lock+0xd4>)
    fb08:	f240 130b 	movw	r3, #267	; 0x10b
    fb0c:	4a23      	ldr	r2, [pc, #140]	; (fb9c <k_sched_lock+0xd8>)
    fb0e:	4820      	ldr	r0, [pc, #128]	; (fb90 <k_sched_lock+0xcc>)
    fb10:	f002 fafa 	bl	12108 <printk>
    fb14:	4822      	ldr	r0, [pc, #136]	; (fba0 <k_sched_lock+0xdc>)
    fb16:	f002 faf7 	bl	12108 <printk>
    fb1a:	f240 110b 	movw	r1, #267	; 0x10b
    fb1e:	481f      	ldr	r0, [pc, #124]	; (fb9c <k_sched_lock+0xd8>)
    fb20:	f002 fd88 	bl	12634 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
    fb24:	4c1f      	ldr	r4, [pc, #124]	; (fba4 <k_sched_lock+0xe0>)
    fb26:	68a2      	ldr	r2, [r4, #8]
    fb28:	7bd2      	ldrb	r2, [r2, #15]
    fb2a:	2a01      	cmp	r2, #1
    fb2c:	d10e      	bne.n	fb4c <k_sched_lock+0x88>
    fb2e:	491e      	ldr	r1, [pc, #120]	; (fba8 <k_sched_lock+0xe4>)
    fb30:	f44f 7386 	mov.w	r3, #268	; 0x10c
    fb34:	4a19      	ldr	r2, [pc, #100]	; (fb9c <k_sched_lock+0xd8>)
    fb36:	4816      	ldr	r0, [pc, #88]	; (fb90 <k_sched_lock+0xcc>)
    fb38:	f002 fae6 	bl	12108 <printk>
    fb3c:	4818      	ldr	r0, [pc, #96]	; (fba0 <k_sched_lock+0xdc>)
    fb3e:	f002 fae3 	bl	12108 <printk>
    fb42:	f44f 7186 	mov.w	r1, #268	; 0x10c
    fb46:	4815      	ldr	r0, [pc, #84]	; (fb9c <k_sched_lock+0xd8>)
    fb48:	f002 fd74 	bl	12634 <assert_post_action>
	--_current->base.sched_locked;
    fb4c:	68a2      	ldr	r2, [r4, #8]
    fb4e:	7bd3      	ldrb	r3, [r2, #15]
    fb50:	3b01      	subs	r3, #1
    fb52:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fb54:	480b      	ldr	r0, [pc, #44]	; (fb84 <k_sched_lock+0xc0>)
    fb56:	f001 fa7b 	bl	11050 <z_spin_unlock_valid>
    fb5a:	b968      	cbnz	r0, fb78 <k_sched_lock+0xb4>
    fb5c:	2384      	movs	r3, #132	; 0x84
    fb5e:	4a0a      	ldr	r2, [pc, #40]	; (fb88 <k_sched_lock+0xc4>)
    fb60:	4912      	ldr	r1, [pc, #72]	; (fbac <k_sched_lock+0xe8>)
    fb62:	480b      	ldr	r0, [pc, #44]	; (fb90 <k_sched_lock+0xcc>)
    fb64:	f002 fad0 	bl	12108 <printk>
    fb68:	4906      	ldr	r1, [pc, #24]	; (fb84 <k_sched_lock+0xc0>)
    fb6a:	4811      	ldr	r0, [pc, #68]	; (fbb0 <k_sched_lock+0xec>)
    fb6c:	f002 facc 	bl	12108 <printk>
    fb70:	2184      	movs	r1, #132	; 0x84
    fb72:	4805      	ldr	r0, [pc, #20]	; (fb88 <k_sched_lock+0xc4>)
    fb74:	f002 fd5e 	bl	12634 <assert_post_action>
	__asm__ volatile(
    fb78:	f385 8811 	msr	BASEPRI, r5
    fb7c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    fb80:	bd38      	pop	{r3, r4, r5, pc}
    fb82:	bf00      	nop
    fb84:	20001dbc 	.word	0x20001dbc
    fb88:	0001820d 	.word	0x0001820d
    fb8c:	00018233 	.word	0x00018233
    fb90:	00017d82 	.word	0x00017d82
    fb94:	00018248 	.word	0x00018248
    fb98:	0001b95d 	.word	0x0001b95d
    fb9c:	0001b932 	.word	0x0001b932
    fba0:	0001b120 	.word	0x0001b120
    fba4:	20001d88 	.word	0x20001d88
    fba8:	0001b96f 	.word	0x0001b96f
    fbac:	00018260 	.word	0x00018260
    fbb0:	00018277 	.word	0x00018277

0000fbb4 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    fbb4:	4b11      	ldr	r3, [pc, #68]	; (fbfc <z_priq_dumb_remove+0x48>)
{
    fbb6:	b510      	push	{r4, lr}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    fbb8:	f103 0228 	add.w	r2, r3, #40	; 0x28
    fbbc:	4282      	cmp	r2, r0
{
    fbbe:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    fbc0:	d105      	bne.n	fbce <z_priq_dumb_remove+0x1a>
    fbc2:	689b      	ldr	r3, [r3, #8]
    fbc4:	428b      	cmp	r3, r1
    fbc6:	d102      	bne.n	fbce <z_priq_dumb_remove+0x1a>
    fbc8:	7b4b      	ldrb	r3, [r1, #13]
    fbca:	06db      	lsls	r3, r3, #27
    fbcc:	d115      	bne.n	fbfa <z_priq_dumb_remove+0x46>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    fbce:	4b0c      	ldr	r3, [pc, #48]	; (fc00 <z_priq_dumb_remove+0x4c>)
    fbd0:	429c      	cmp	r4, r3
    fbd2:	d10b      	bne.n	fbec <z_priq_dumb_remove+0x38>
    fbd4:	490b      	ldr	r1, [pc, #44]	; (fc04 <z_priq_dumb_remove+0x50>)
    fbd6:	480c      	ldr	r0, [pc, #48]	; (fc08 <z_priq_dumb_remove+0x54>)
    fbd8:	f240 336b 	movw	r3, #875	; 0x36b
    fbdc:	4a0b      	ldr	r2, [pc, #44]	; (fc0c <z_priq_dumb_remove+0x58>)
    fbde:	f002 fa93 	bl	12108 <printk>
    fbe2:	f240 316b 	movw	r1, #875	; 0x36b
    fbe6:	4809      	ldr	r0, [pc, #36]	; (fc0c <z_priq_dumb_remove+0x58>)
    fbe8:	f002 fd24 	bl	12634 <assert_post_action>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    fbec:	e9d4 3200 	ldrd	r3, r2, [r4]
    fbf0:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    fbf2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    fbf4:	2300      	movs	r3, #0
	node->prev = NULL;
    fbf6:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    fbfa:	bd10      	pop	{r4, pc}
    fbfc:	20001d88 	.word	0x20001d88
    fc00:	20001338 	.word	0x20001338
    fc04:	0001b9d8 	.word	0x0001b9d8
    fc08:	00017d82 	.word	0x00017d82
    fc0c:	0001b99f 	.word	0x0001b99f

0000fc10 <z_unpend_thread>:
{
    fc10:	b538      	push	{r3, r4, r5, lr}
    fc12:	4604      	mov	r4, r0
	__asm__ volatile(
    fc14:	f04f 0320 	mov.w	r3, #32
    fc18:	f3ef 8511 	mrs	r5, BASEPRI
    fc1c:	f383 8811 	msr	BASEPRI, r3
    fc20:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    fc24:	481e      	ldr	r0, [pc, #120]	; (fca0 <z_unpend_thread+0x90>)
    fc26:	f001 fa05 	bl	11034 <z_spin_lock_valid>
    fc2a:	b968      	cbnz	r0, fc48 <z_unpend_thread+0x38>
    fc2c:	235c      	movs	r3, #92	; 0x5c
    fc2e:	4a1d      	ldr	r2, [pc, #116]	; (fca4 <z_unpend_thread+0x94>)
    fc30:	491d      	ldr	r1, [pc, #116]	; (fca8 <z_unpend_thread+0x98>)
    fc32:	481e      	ldr	r0, [pc, #120]	; (fcac <z_unpend_thread+0x9c>)
    fc34:	f002 fa68 	bl	12108 <printk>
    fc38:	4919      	ldr	r1, [pc, #100]	; (fca0 <z_unpend_thread+0x90>)
    fc3a:	481d      	ldr	r0, [pc, #116]	; (fcb0 <z_unpend_thread+0xa0>)
    fc3c:	f002 fa64 	bl	12108 <printk>
    fc40:	215c      	movs	r1, #92	; 0x5c
    fc42:	4818      	ldr	r0, [pc, #96]	; (fca4 <z_unpend_thread+0x94>)
    fc44:	f002 fcf6 	bl	12634 <assert_post_action>
	z_spin_lock_set_owner(l);
    fc48:	4815      	ldr	r0, [pc, #84]	; (fca0 <z_unpend_thread+0x90>)
    fc4a:	f001 fa0f 	bl	1106c <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    fc4e:	f104 0008 	add.w	r0, r4, #8
    fc52:	f7ff fe6d 	bl	f930 <pended_on.isra.0>
    fc56:	4621      	mov	r1, r4
    fc58:	f7ff ffac 	bl	fbb4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    fc5c:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fc5e:	4810      	ldr	r0, [pc, #64]	; (fca0 <z_unpend_thread+0x90>)
    fc60:	f023 0302 	bic.w	r3, r3, #2
    fc64:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
    fc66:	2300      	movs	r3, #0
    fc68:	60a3      	str	r3, [r4, #8]
    fc6a:	f001 f9f1 	bl	11050 <z_spin_unlock_valid>
    fc6e:	b968      	cbnz	r0, fc8c <z_unpend_thread+0x7c>
    fc70:	2384      	movs	r3, #132	; 0x84
    fc72:	4a0c      	ldr	r2, [pc, #48]	; (fca4 <z_unpend_thread+0x94>)
    fc74:	490f      	ldr	r1, [pc, #60]	; (fcb4 <z_unpend_thread+0xa4>)
    fc76:	480d      	ldr	r0, [pc, #52]	; (fcac <z_unpend_thread+0x9c>)
    fc78:	f002 fa46 	bl	12108 <printk>
    fc7c:	4908      	ldr	r1, [pc, #32]	; (fca0 <z_unpend_thread+0x90>)
    fc7e:	480e      	ldr	r0, [pc, #56]	; (fcb8 <z_unpend_thread+0xa8>)
    fc80:	f002 fa42 	bl	12108 <printk>
    fc84:	2184      	movs	r1, #132	; 0x84
    fc86:	4807      	ldr	r0, [pc, #28]	; (fca4 <z_unpend_thread+0x94>)
    fc88:	f002 fcd4 	bl	12634 <assert_post_action>
	__asm__ volatile(
    fc8c:	f385 8811 	msr	BASEPRI, r5
    fc90:	f3bf 8f6f 	isb	sy
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    fc94:	f104 0018 	add.w	r0, r4, #24
}
    fc98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    fc9c:	f001 bc06 	b.w	114ac <z_abort_timeout>
    fca0:	20001dbc 	.word	0x20001dbc
    fca4:	0001820d 	.word	0x0001820d
    fca8:	00018233 	.word	0x00018233
    fcac:	00017d82 	.word	0x00017d82
    fcb0:	00018248 	.word	0x00018248
    fcb4:	00018260 	.word	0x00018260
    fcb8:	00018277 	.word	0x00018277

0000fcbc <update_cache>:
{
    fcbc:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    fcbe:	4c10      	ldr	r4, [pc, #64]	; (fd00 <update_cache+0x44>)
{
    fcc0:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    fcc2:	f104 0028 	add.w	r0, r4, #40	; 0x28
    fcc6:	f006 fd89 	bl	167dc <z_priq_dumb_best>
    fcca:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
    fccc:	68a3      	ldr	r3, [r4, #8]
    fcce:	7b59      	ldrb	r1, [r3, #13]
    fcd0:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
    fcd2:	bf44      	itt	mi
    fcd4:	f041 0108 	orrmi.w	r1, r1, #8
    fcd8:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
    fcda:	b905      	cbnz	r5, fcde <update_cache+0x22>
    fcdc:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
    fcde:	b94e      	cbnz	r6, fcf4 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
    fce0:	7b5a      	ldrb	r2, [r3, #13]
    fce2:	06d2      	lsls	r2, r2, #27
    fce4:	d106      	bne.n	fcf4 <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    fce6:	69aa      	ldr	r2, [r5, #24]
    fce8:	b922      	cbnz	r2, fcf4 <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
    fcea:	89da      	ldrh	r2, [r3, #14]
    fcec:	2a7f      	cmp	r2, #127	; 0x7f
    fcee:	d901      	bls.n	fcf4 <update_cache+0x38>
		_kernel.ready_q.cache = _current;
    fcf0:	6263      	str	r3, [r4, #36]	; 0x24
}
    fcf2:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
    fcf4:	42ab      	cmp	r3, r5
    fcf6:	d001      	beq.n	fcfc <update_cache+0x40>
			z_reset_time_slice();
    fcf8:	f7ff fe32 	bl	f960 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    fcfc:	6265      	str	r5, [r4, #36]	; 0x24
}
    fcfe:	e7f8      	b.n	fcf2 <update_cache+0x36>
    fd00:	20001d88 	.word	0x20001d88

0000fd04 <k_sched_unlock>:
{
    fd04:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    fd06:	f04f 0320 	mov.w	r3, #32
    fd0a:	f3ef 8511 	mrs	r5, BASEPRI
    fd0e:	f383 8811 	msr	BASEPRI, r3
    fd12:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    fd16:	482d      	ldr	r0, [pc, #180]	; (fdcc <k_sched_unlock+0xc8>)
    fd18:	f001 f98c 	bl	11034 <z_spin_lock_valid>
    fd1c:	b968      	cbnz	r0, fd3a <k_sched_unlock+0x36>
    fd1e:	235c      	movs	r3, #92	; 0x5c
    fd20:	4a2b      	ldr	r2, [pc, #172]	; (fdd0 <k_sched_unlock+0xcc>)
    fd22:	492c      	ldr	r1, [pc, #176]	; (fdd4 <k_sched_unlock+0xd0>)
    fd24:	482c      	ldr	r0, [pc, #176]	; (fdd8 <k_sched_unlock+0xd4>)
    fd26:	f002 f9ef 	bl	12108 <printk>
    fd2a:	4928      	ldr	r1, [pc, #160]	; (fdcc <k_sched_unlock+0xc8>)
    fd2c:	482b      	ldr	r0, [pc, #172]	; (fddc <k_sched_unlock+0xd8>)
    fd2e:	f002 f9eb 	bl	12108 <printk>
    fd32:	215c      	movs	r1, #92	; 0x5c
    fd34:	4826      	ldr	r0, [pc, #152]	; (fdd0 <k_sched_unlock+0xcc>)
    fd36:	f002 fc7d 	bl	12634 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0, "");
    fd3a:	4c29      	ldr	r4, [pc, #164]	; (fde0 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
    fd3c:	4823      	ldr	r0, [pc, #140]	; (fdcc <k_sched_unlock+0xc8>)
    fd3e:	f001 f995 	bl	1106c <z_spin_lock_set_owner>
    fd42:	68a2      	ldr	r2, [r4, #8]
    fd44:	7bd2      	ldrb	r2, [r2, #15]
    fd46:	b972      	cbnz	r2, fd66 <k_sched_unlock+0x62>
    fd48:	4926      	ldr	r1, [pc, #152]	; (fde4 <k_sched_unlock+0xe0>)
    fd4a:	f240 330a 	movw	r3, #778	; 0x30a
    fd4e:	4a26      	ldr	r2, [pc, #152]	; (fde8 <k_sched_unlock+0xe4>)
    fd50:	4821      	ldr	r0, [pc, #132]	; (fdd8 <k_sched_unlock+0xd4>)
    fd52:	f002 f9d9 	bl	12108 <printk>
    fd56:	4825      	ldr	r0, [pc, #148]	; (fdec <k_sched_unlock+0xe8>)
    fd58:	f002 f9d6 	bl	12108 <printk>
    fd5c:	f240 310a 	movw	r1, #778	; 0x30a
    fd60:	4821      	ldr	r0, [pc, #132]	; (fde8 <k_sched_unlock+0xe4>)
    fd62:	f002 fc67 	bl	12634 <assert_post_action>
    fd66:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    fd6a:	b173      	cbz	r3, fd8a <k_sched_unlock+0x86>
    fd6c:	4920      	ldr	r1, [pc, #128]	; (fdf0 <k_sched_unlock+0xec>)
    fd6e:	f240 330b 	movw	r3, #779	; 0x30b
    fd72:	4a1d      	ldr	r2, [pc, #116]	; (fde8 <k_sched_unlock+0xe4>)
    fd74:	4818      	ldr	r0, [pc, #96]	; (fdd8 <k_sched_unlock+0xd4>)
    fd76:	f002 f9c7 	bl	12108 <printk>
    fd7a:	481c      	ldr	r0, [pc, #112]	; (fdec <k_sched_unlock+0xe8>)
    fd7c:	f002 f9c4 	bl	12108 <printk>
    fd80:	f240 310b 	movw	r1, #779	; 0x30b
    fd84:	4818      	ldr	r0, [pc, #96]	; (fde8 <k_sched_unlock+0xe4>)
    fd86:	f002 fc55 	bl	12634 <assert_post_action>
		++_current->base.sched_locked;
    fd8a:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
    fd8c:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    fd8e:	7bd3      	ldrb	r3, [r2, #15]
    fd90:	3301      	adds	r3, #1
    fd92:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    fd94:	f7ff ff92 	bl	fcbc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fd98:	480c      	ldr	r0, [pc, #48]	; (fdcc <k_sched_unlock+0xc8>)
    fd9a:	f001 f959 	bl	11050 <z_spin_unlock_valid>
    fd9e:	b968      	cbnz	r0, fdbc <k_sched_unlock+0xb8>
    fda0:	2384      	movs	r3, #132	; 0x84
    fda2:	4a0b      	ldr	r2, [pc, #44]	; (fdd0 <k_sched_unlock+0xcc>)
    fda4:	4913      	ldr	r1, [pc, #76]	; (fdf4 <k_sched_unlock+0xf0>)
    fda6:	480c      	ldr	r0, [pc, #48]	; (fdd8 <k_sched_unlock+0xd4>)
    fda8:	f002 f9ae 	bl	12108 <printk>
    fdac:	4907      	ldr	r1, [pc, #28]	; (fdcc <k_sched_unlock+0xc8>)
    fdae:	4812      	ldr	r0, [pc, #72]	; (fdf8 <k_sched_unlock+0xf4>)
    fdb0:	f002 f9aa 	bl	12108 <printk>
    fdb4:	2184      	movs	r1, #132	; 0x84
    fdb6:	4806      	ldr	r0, [pc, #24]	; (fdd0 <k_sched_unlock+0xcc>)
    fdb8:	f002 fc3c 	bl	12634 <assert_post_action>
	__asm__ volatile(
    fdbc:	f385 8811 	msr	BASEPRI, r5
    fdc0:	f3bf 8f6f 	isb	sy
}
    fdc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    fdc8:	f006 bcfe 	b.w	167c8 <z_reschedule_unlocked>
    fdcc:	20001dbc 	.word	0x20001dbc
    fdd0:	0001820d 	.word	0x0001820d
    fdd4:	00018233 	.word	0x00018233
    fdd8:	00017d82 	.word	0x00017d82
    fddc:	00018248 	.word	0x00018248
    fde0:	20001d88 	.word	0x20001d88
    fde4:	0001b9f9 	.word	0x0001b9f9
    fde8:	0001b99f 	.word	0x0001b99f
    fdec:	0001b120 	.word	0x0001b120
    fdf0:	0001b95d 	.word	0x0001b95d
    fdf4:	00018260 	.word	0x00018260
    fdf8:	00018277 	.word	0x00018277

0000fdfc <ready_thread>:
{
    fdfc:	b570      	push	{r4, r5, r6, lr}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    fdfe:	7b43      	ldrb	r3, [r0, #13]
    fe00:	4604      	mov	r4, r0
    fe02:	06db      	lsls	r3, r3, #27
    fe04:	d13d      	bne.n	fe82 <ready_thread+0x86>
	return !sys_dnode_is_linked(&t->node);
    fe06:	6985      	ldr	r5, [r0, #24]
	if (z_is_thread_ready(thread)) {
    fe08:	2d00      	cmp	r5, #0
    fe0a:	d13a      	bne.n	fe82 <ready_thread+0x86>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    fe0c:	4b1d      	ldr	r3, [pc, #116]	; (fe84 <ready_thread+0x88>)
    fe0e:	4298      	cmp	r0, r3
    fe10:	d10b      	bne.n	fe2a <ready_thread+0x2e>
    fe12:	491d      	ldr	r1, [pc, #116]	; (fe88 <ready_thread+0x8c>)
    fe14:	481d      	ldr	r0, [pc, #116]	; (fe8c <ready_thread+0x90>)
    fe16:	f240 3355 	movw	r3, #853	; 0x355
    fe1a:	4a1d      	ldr	r2, [pc, #116]	; (fe90 <ready_thread+0x94>)
    fe1c:	f002 f974 	bl	12108 <printk>
    fe20:	f240 3155 	movw	r1, #853	; 0x355
    fe24:	481a      	ldr	r0, [pc, #104]	; (fe90 <ready_thread+0x94>)
    fe26:	f002 fc05 	bl	12634 <assert_post_action>
	return list->head == list;
    fe2a:	4a1a      	ldr	r2, [pc, #104]	; (fe94 <ready_thread+0x98>)
    fe2c:	4613      	mov	r3, r2
    fe2e:	f853 0f28 	ldr.w	r0, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fe32:	4298      	cmp	r0, r3
    fe34:	bf18      	it	ne
    fe36:	4605      	movne	r5, r0
    fe38:	2d00      	cmp	r5, #0
    fe3a:	4619      	mov	r1, r3
    fe3c:	462b      	mov	r3, r5
    fe3e:	bf38      	it	cc
    fe40:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    fe42:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fe44:	b1bb      	cbz	r3, fe76 <ready_thread+0x7a>
	if (thread_1->base.prio < thread_2->base.prio) {
    fe46:	f994 600e 	ldrsb.w	r6, [r4, #14]
    fe4a:	f993 500e 	ldrsb.w	r5, [r3, #14]
    fe4e:	42ae      	cmp	r6, r5
    fe50:	db03      	blt.n	fe5a <ready_thread+0x5e>
	return (node == list->tail) ? NULL : node->next;
    fe52:	4298      	cmp	r0, r3
    fe54:	d00f      	beq.n	fe76 <ready_thread+0x7a>
    fe56:	681b      	ldr	r3, [r3, #0]
    fe58:	e7f4      	b.n	fe44 <ready_thread+0x48>
	node->prev = successor->prev;
    fe5a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    fe5c:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    fe60:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    fe62:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
    fe64:	7b63      	ldrb	r3, [r4, #13]
		update_cache(0);
    fe66:	2000      	movs	r0, #0
    fe68:	f063 037f 	orn	r3, r3, #127	; 0x7f
    fe6c:	7363      	strb	r3, [r4, #13]
}
    fe6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    fe72:	f7ff bf23 	b.w	fcbc <update_cache>
	node->prev = list->tail;
    fe76:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
    fe7a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    fe7c:	601c      	str	r4, [r3, #0]
	list->tail = node;
    fe7e:	62d4      	str	r4, [r2, #44]	; 0x2c
}
    fe80:	e7f0      	b.n	fe64 <ready_thread+0x68>
}
    fe82:	bd70      	pop	{r4, r5, r6, pc}
    fe84:	20001338 	.word	0x20001338
    fe88:	0001b9d8 	.word	0x0001b9d8
    fe8c:	00017d82 	.word	0x00017d82
    fe90:	0001b99f 	.word	0x0001b99f
    fe94:	20001d88 	.word	0x20001d88

0000fe98 <z_ready_thread>:
{
    fe98:	b538      	push	{r3, r4, r5, lr}
    fe9a:	4604      	mov	r4, r0
	__asm__ volatile(
    fe9c:	f04f 0320 	mov.w	r3, #32
    fea0:	f3ef 8511 	mrs	r5, BASEPRI
    fea4:	f383 8811 	msr	BASEPRI, r3
    fea8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    feac:	4817      	ldr	r0, [pc, #92]	; (ff0c <z_ready_thread+0x74>)
    feae:	f001 f8c1 	bl	11034 <z_spin_lock_valid>
    feb2:	b968      	cbnz	r0, fed0 <z_ready_thread+0x38>
    feb4:	235c      	movs	r3, #92	; 0x5c
    feb6:	4a16      	ldr	r2, [pc, #88]	; (ff10 <z_ready_thread+0x78>)
    feb8:	4916      	ldr	r1, [pc, #88]	; (ff14 <z_ready_thread+0x7c>)
    feba:	4817      	ldr	r0, [pc, #92]	; (ff18 <z_ready_thread+0x80>)
    febc:	f002 f924 	bl	12108 <printk>
    fec0:	4912      	ldr	r1, [pc, #72]	; (ff0c <z_ready_thread+0x74>)
    fec2:	4816      	ldr	r0, [pc, #88]	; (ff1c <z_ready_thread+0x84>)
    fec4:	f002 f920 	bl	12108 <printk>
    fec8:	215c      	movs	r1, #92	; 0x5c
    feca:	4811      	ldr	r0, [pc, #68]	; (ff10 <z_ready_thread+0x78>)
    fecc:	f002 fbb2 	bl	12634 <assert_post_action>
	z_spin_lock_set_owner(l);
    fed0:	480e      	ldr	r0, [pc, #56]	; (ff0c <z_ready_thread+0x74>)
    fed2:	f001 f8cb 	bl	1106c <z_spin_lock_set_owner>
		ready_thread(thread);
    fed6:	4620      	mov	r0, r4
    fed8:	f7ff ff90 	bl	fdfc <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fedc:	480b      	ldr	r0, [pc, #44]	; (ff0c <z_ready_thread+0x74>)
    fede:	f001 f8b7 	bl	11050 <z_spin_unlock_valid>
    fee2:	b968      	cbnz	r0, ff00 <z_ready_thread+0x68>
    fee4:	2384      	movs	r3, #132	; 0x84
    fee6:	4a0a      	ldr	r2, [pc, #40]	; (ff10 <z_ready_thread+0x78>)
    fee8:	490d      	ldr	r1, [pc, #52]	; (ff20 <z_ready_thread+0x88>)
    feea:	480b      	ldr	r0, [pc, #44]	; (ff18 <z_ready_thread+0x80>)
    feec:	f002 f90c 	bl	12108 <printk>
    fef0:	4906      	ldr	r1, [pc, #24]	; (ff0c <z_ready_thread+0x74>)
    fef2:	480c      	ldr	r0, [pc, #48]	; (ff24 <z_ready_thread+0x8c>)
    fef4:	f002 f908 	bl	12108 <printk>
    fef8:	2184      	movs	r1, #132	; 0x84
    fefa:	4805      	ldr	r0, [pc, #20]	; (ff10 <z_ready_thread+0x78>)
    fefc:	f002 fb9a 	bl	12634 <assert_post_action>
	__asm__ volatile(
    ff00:	f385 8811 	msr	BASEPRI, r5
    ff04:	f3bf 8f6f 	isb	sy
}
    ff08:	bd38      	pop	{r3, r4, r5, pc}
    ff0a:	bf00      	nop
    ff0c:	20001dbc 	.word	0x20001dbc
    ff10:	0001820d 	.word	0x0001820d
    ff14:	00018233 	.word	0x00018233
    ff18:	00017d82 	.word	0x00017d82
    ff1c:	00018248 	.word	0x00018248
    ff20:	00018260 	.word	0x00018260
    ff24:	00018277 	.word	0x00018277

0000ff28 <z_thread_timeout>:
	if (thread->base.pended_on != NULL) {
    ff28:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
    ff2c:	b570      	push	{r4, r5, r6, lr}
    ff2e:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    ff30:	f1a0 0518 	sub.w	r5, r0, #24
	if (thread->base.pended_on != NULL) {
    ff34:	2b00      	cmp	r3, #0
    ff36:	d042      	beq.n	ffbe <z_thread_timeout+0x96>
	__asm__ volatile(
    ff38:	f04f 0320 	mov.w	r3, #32
    ff3c:	f3ef 8611 	mrs	r6, BASEPRI
    ff40:	f383 8811 	msr	BASEPRI, r3
    ff44:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ff48:	4822      	ldr	r0, [pc, #136]	; (ffd4 <z_thread_timeout+0xac>)
    ff4a:	f001 f873 	bl	11034 <z_spin_lock_valid>
    ff4e:	b968      	cbnz	r0, ff6c <z_thread_timeout+0x44>
    ff50:	235c      	movs	r3, #92	; 0x5c
    ff52:	4a21      	ldr	r2, [pc, #132]	; (ffd8 <z_thread_timeout+0xb0>)
    ff54:	4921      	ldr	r1, [pc, #132]	; (ffdc <z_thread_timeout+0xb4>)
    ff56:	4822      	ldr	r0, [pc, #136]	; (ffe0 <z_thread_timeout+0xb8>)
    ff58:	f002 f8d6 	bl	12108 <printk>
    ff5c:	491d      	ldr	r1, [pc, #116]	; (ffd4 <z_thread_timeout+0xac>)
    ff5e:	4821      	ldr	r0, [pc, #132]	; (ffe4 <z_thread_timeout+0xbc>)
    ff60:	f002 f8d2 	bl	12108 <printk>
    ff64:	215c      	movs	r1, #92	; 0x5c
    ff66:	481c      	ldr	r0, [pc, #112]	; (ffd8 <z_thread_timeout+0xb0>)
    ff68:	f002 fb64 	bl	12634 <assert_post_action>
	z_spin_lock_set_owner(l);
    ff6c:	4819      	ldr	r0, [pc, #100]	; (ffd4 <z_thread_timeout+0xac>)
    ff6e:	f001 f87d 	bl	1106c <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    ff72:	f1a4 0010 	sub.w	r0, r4, #16
    ff76:	f7ff fcdb 	bl	f930 <pended_on.isra.0>
    ff7a:	4629      	mov	r1, r5
    ff7c:	f7ff fe1a 	bl	fbb4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    ff80:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ff84:	4813      	ldr	r0, [pc, #76]	; (ffd4 <z_thread_timeout+0xac>)
    ff86:	f023 0302 	bic.w	r3, r3, #2
    ff8a:	f804 3c0b 	strb.w	r3, [r4, #-11]
		thread->base.pended_on = NULL;
    ff8e:	2300      	movs	r3, #0
    ff90:	f844 3c10 	str.w	r3, [r4, #-16]
    ff94:	f001 f85c 	bl	11050 <z_spin_unlock_valid>
    ff98:	b968      	cbnz	r0, ffb6 <z_thread_timeout+0x8e>
    ff9a:	2384      	movs	r3, #132	; 0x84
    ff9c:	4a0e      	ldr	r2, [pc, #56]	; (ffd8 <z_thread_timeout+0xb0>)
    ff9e:	4912      	ldr	r1, [pc, #72]	; (ffe8 <z_thread_timeout+0xc0>)
    ffa0:	480f      	ldr	r0, [pc, #60]	; (ffe0 <z_thread_timeout+0xb8>)
    ffa2:	f002 f8b1 	bl	12108 <printk>
    ffa6:	490b      	ldr	r1, [pc, #44]	; (ffd4 <z_thread_timeout+0xac>)
    ffa8:	4810      	ldr	r0, [pc, #64]	; (ffec <z_thread_timeout+0xc4>)
    ffaa:	f002 f8ad 	bl	12108 <printk>
    ffae:	2184      	movs	r1, #132	; 0x84
    ffb0:	4809      	ldr	r0, [pc, #36]	; (ffd8 <z_thread_timeout+0xb0>)
    ffb2:	f002 fb3f 	bl	12634 <assert_post_action>
	__asm__ volatile(
    ffb6:	f386 8811 	msr	BASEPRI, r6
    ffba:	f3bf 8f6f 	isb	sy
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    ffbe:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	z_ready_thread(thread);
    ffc2:	4628      	mov	r0, r5
    ffc4:	f023 0314 	bic.w	r3, r3, #20
    ffc8:	f804 3c0b 	strb.w	r3, [r4, #-11]
}
    ffcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    ffd0:	f7ff bf62 	b.w	fe98 <z_ready_thread>
    ffd4:	20001dbc 	.word	0x20001dbc
    ffd8:	0001820d 	.word	0x0001820d
    ffdc:	00018233 	.word	0x00018233
    ffe0:	00017d82 	.word	0x00017d82
    ffe4:	00018248 	.word	0x00018248
    ffe8:	00018260 	.word	0x00018260
    ffec:	00018277 	.word	0x00018277

0000fff0 <z_sched_start>:
{
    fff0:	b538      	push	{r3, r4, r5, lr}
    fff2:	4604      	mov	r4, r0
	__asm__ volatile(
    fff4:	f04f 0320 	mov.w	r3, #32
    fff8:	f3ef 8511 	mrs	r5, BASEPRI
    fffc:	f383 8811 	msr	BASEPRI, r3
   10000:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10004:	481d      	ldr	r0, [pc, #116]	; (1007c <z_sched_start+0x8c>)
   10006:	f001 f815 	bl	11034 <z_spin_lock_valid>
   1000a:	b968      	cbnz	r0, 10028 <z_sched_start+0x38>
   1000c:	235c      	movs	r3, #92	; 0x5c
   1000e:	4a1c      	ldr	r2, [pc, #112]	; (10080 <z_sched_start+0x90>)
   10010:	491c      	ldr	r1, [pc, #112]	; (10084 <z_sched_start+0x94>)
   10012:	481d      	ldr	r0, [pc, #116]	; (10088 <z_sched_start+0x98>)
   10014:	f002 f878 	bl	12108 <printk>
   10018:	4918      	ldr	r1, [pc, #96]	; (1007c <z_sched_start+0x8c>)
   1001a:	481c      	ldr	r0, [pc, #112]	; (1008c <z_sched_start+0x9c>)
   1001c:	f002 f874 	bl	12108 <printk>
   10020:	215c      	movs	r1, #92	; 0x5c
   10022:	4817      	ldr	r0, [pc, #92]	; (10080 <z_sched_start+0x90>)
   10024:	f002 fb06 	bl	12634 <assert_post_action>
	z_spin_lock_set_owner(l);
   10028:	4814      	ldr	r0, [pc, #80]	; (1007c <z_sched_start+0x8c>)
   1002a:	f001 f81f 	bl	1106c <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   1002e:	7b63      	ldrb	r3, [r4, #13]
   10030:	075a      	lsls	r2, r3, #29
   10032:	d416      	bmi.n	10062 <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10034:	4811      	ldr	r0, [pc, #68]	; (1007c <z_sched_start+0x8c>)
   10036:	f001 f80b 	bl	11050 <z_spin_unlock_valid>
   1003a:	b968      	cbnz	r0, 10058 <z_sched_start+0x68>
   1003c:	2384      	movs	r3, #132	; 0x84
   1003e:	4a10      	ldr	r2, [pc, #64]	; (10080 <z_sched_start+0x90>)
   10040:	4913      	ldr	r1, [pc, #76]	; (10090 <z_sched_start+0xa0>)
   10042:	4811      	ldr	r0, [pc, #68]	; (10088 <z_sched_start+0x98>)
   10044:	f002 f860 	bl	12108 <printk>
   10048:	490c      	ldr	r1, [pc, #48]	; (1007c <z_sched_start+0x8c>)
   1004a:	4812      	ldr	r0, [pc, #72]	; (10094 <z_sched_start+0xa4>)
   1004c:	f002 f85c 	bl	12108 <printk>
   10050:	2184      	movs	r1, #132	; 0x84
   10052:	480b      	ldr	r0, [pc, #44]	; (10080 <z_sched_start+0x90>)
   10054:	f002 faee 	bl	12634 <assert_post_action>
	__asm__ volatile(
   10058:	f385 8811 	msr	BASEPRI, r5
   1005c:	f3bf 8f6f 	isb	sy
}
   10060:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   10062:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   10066:	4620      	mov	r0, r4
   10068:	7363      	strb	r3, [r4, #13]
   1006a:	f7ff fec7 	bl	fdfc <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1006e:	4629      	mov	r1, r5
}
   10070:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   10074:	4801      	ldr	r0, [pc, #4]	; (1007c <z_sched_start+0x8c>)
   10076:	f7ff bce9 	b.w	fa4c <z_reschedule>
   1007a:	bf00      	nop
   1007c:	20001dbc 	.word	0x20001dbc
   10080:	0001820d 	.word	0x0001820d
   10084:	00018233 	.word	0x00018233
   10088:	00017d82 	.word	0x00017d82
   1008c:	00018248 	.word	0x00018248
   10090:	00018260 	.word	0x00018260
   10094:	00018277 	.word	0x00018277

00010098 <z_move_thread_to_end_of_prio_q>:
{
   10098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1009a:	4604      	mov	r4, r0
	__asm__ volatile(
   1009c:	f04f 0320 	mov.w	r3, #32
   100a0:	f3ef 8511 	mrs	r5, BASEPRI
   100a4:	f383 8811 	msr	BASEPRI, r3
   100a8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   100ac:	4837      	ldr	r0, [pc, #220]	; (1018c <z_move_thread_to_end_of_prio_q+0xf4>)
   100ae:	f000 ffc1 	bl	11034 <z_spin_lock_valid>
   100b2:	b968      	cbnz	r0, 100d0 <z_move_thread_to_end_of_prio_q+0x38>
   100b4:	235c      	movs	r3, #92	; 0x5c
   100b6:	4a36      	ldr	r2, [pc, #216]	; (10190 <z_move_thread_to_end_of_prio_q+0xf8>)
   100b8:	4936      	ldr	r1, [pc, #216]	; (10194 <z_move_thread_to_end_of_prio_q+0xfc>)
   100ba:	4837      	ldr	r0, [pc, #220]	; (10198 <z_move_thread_to_end_of_prio_q+0x100>)
   100bc:	f002 f824 	bl	12108 <printk>
   100c0:	4932      	ldr	r1, [pc, #200]	; (1018c <z_move_thread_to_end_of_prio_q+0xf4>)
   100c2:	4836      	ldr	r0, [pc, #216]	; (1019c <z_move_thread_to_end_of_prio_q+0x104>)
   100c4:	f002 f820 	bl	12108 <printk>
   100c8:	215c      	movs	r1, #92	; 0x5c
   100ca:	4831      	ldr	r0, [pc, #196]	; (10190 <z_move_thread_to_end_of_prio_q+0xf8>)
   100cc:	f002 fab2 	bl	12634 <assert_post_action>
	z_spin_lock_set_owner(l);
   100d0:	482e      	ldr	r0, [pc, #184]	; (1018c <z_move_thread_to_end_of_prio_q+0xf4>)
   100d2:	f000 ffcb 	bl	1106c <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   100d6:	f994 300d 	ldrsb.w	r3, [r4, #13]
   100da:	2b00      	cmp	r3, #0
   100dc:	da03      	bge.n	100e6 <z_move_thread_to_end_of_prio_q+0x4e>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   100de:	4621      	mov	r1, r4
   100e0:	482f      	ldr	r0, [pc, #188]	; (101a0 <z_move_thread_to_end_of_prio_q+0x108>)
   100e2:	f7ff fd67 	bl	fbb4 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   100e6:	4b2f      	ldr	r3, [pc, #188]	; (101a4 <z_move_thread_to_end_of_prio_q+0x10c>)
   100e8:	429c      	cmp	r4, r3
   100ea:	d10b      	bne.n	10104 <z_move_thread_to_end_of_prio_q+0x6c>
   100ec:	492e      	ldr	r1, [pc, #184]	; (101a8 <z_move_thread_to_end_of_prio_q+0x110>)
   100ee:	482a      	ldr	r0, [pc, #168]	; (10198 <z_move_thread_to_end_of_prio_q+0x100>)
   100f0:	f240 3355 	movw	r3, #853	; 0x355
   100f4:	4a2d      	ldr	r2, [pc, #180]	; (101ac <z_move_thread_to_end_of_prio_q+0x114>)
   100f6:	f002 f807 	bl	12108 <printk>
   100fa:	f240 3155 	movw	r1, #853	; 0x355
   100fe:	482b      	ldr	r0, [pc, #172]	; (101ac <z_move_thread_to_end_of_prio_q+0x114>)
   10100:	f002 fa98 	bl	12634 <assert_post_action>
	return list->head == list;
   10104:	4a2a      	ldr	r2, [pc, #168]	; (101b0 <z_move_thread_to_end_of_prio_q+0x118>)
   10106:	4611      	mov	r1, r2
   10108:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1010c:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1010e:	428b      	cmp	r3, r1
   10110:	bf08      	it	eq
   10112:	2300      	moveq	r3, #0
   10114:	2b00      	cmp	r3, #0
   10116:	bf38      	it	cc
   10118:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1011a:	2b00      	cmp	r3, #0
   1011c:	d02f      	beq.n	1017e <z_move_thread_to_end_of_prio_q+0xe6>
	if (thread_1->base.prio < thread_2->base.prio) {
   1011e:	f994 700e 	ldrsb.w	r7, [r4, #14]
   10122:	f993 600e 	ldrsb.w	r6, [r3, #14]
   10126:	42b7      	cmp	r7, r6
   10128:	db03      	blt.n	10132 <z_move_thread_to_end_of_prio_q+0x9a>
	return (node == list->tail) ? NULL : node->next;
   1012a:	4283      	cmp	r3, r0
   1012c:	d027      	beq.n	1017e <z_move_thread_to_end_of_prio_q+0xe6>
   1012e:	681b      	ldr	r3, [r3, #0]
   10130:	e7f3      	b.n	1011a <z_move_thread_to_end_of_prio_q+0x82>
	node->prev = successor->prev;
   10132:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   10134:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   10138:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1013a:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   1013c:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   1013e:	6890      	ldr	r0, [r2, #8]
   10140:	f063 037f 	orn	r3, r3, #127	; 0x7f
   10144:	7363      	strb	r3, [r4, #13]
   10146:	1b03      	subs	r3, r0, r4
   10148:	4258      	negs	r0, r3
   1014a:	4158      	adcs	r0, r3
   1014c:	f7ff fdb6 	bl	fcbc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10150:	480e      	ldr	r0, [pc, #56]	; (1018c <z_move_thread_to_end_of_prio_q+0xf4>)
   10152:	f000 ff7d 	bl	11050 <z_spin_unlock_valid>
   10156:	b968      	cbnz	r0, 10174 <z_move_thread_to_end_of_prio_q+0xdc>
   10158:	2384      	movs	r3, #132	; 0x84
   1015a:	4a0d      	ldr	r2, [pc, #52]	; (10190 <z_move_thread_to_end_of_prio_q+0xf8>)
   1015c:	4915      	ldr	r1, [pc, #84]	; (101b4 <z_move_thread_to_end_of_prio_q+0x11c>)
   1015e:	480e      	ldr	r0, [pc, #56]	; (10198 <z_move_thread_to_end_of_prio_q+0x100>)
   10160:	f001 ffd2 	bl	12108 <printk>
   10164:	4909      	ldr	r1, [pc, #36]	; (1018c <z_move_thread_to_end_of_prio_q+0xf4>)
   10166:	4814      	ldr	r0, [pc, #80]	; (101b8 <z_move_thread_to_end_of_prio_q+0x120>)
   10168:	f001 ffce 	bl	12108 <printk>
   1016c:	2184      	movs	r1, #132	; 0x84
   1016e:	4808      	ldr	r0, [pc, #32]	; (10190 <z_move_thread_to_end_of_prio_q+0xf8>)
   10170:	f002 fa60 	bl	12634 <assert_post_action>
	__asm__ volatile(
   10174:	f385 8811 	msr	BASEPRI, r5
   10178:	f3bf 8f6f 	isb	sy
}
   1017c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node->prev = list->tail;
   1017e:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   10182:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   10184:	601c      	str	r4, [r3, #0]
	list->tail = node;
   10186:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   10188:	e7d8      	b.n	1013c <z_move_thread_to_end_of_prio_q+0xa4>
   1018a:	bf00      	nop
   1018c:	20001dbc 	.word	0x20001dbc
   10190:	0001820d 	.word	0x0001820d
   10194:	00018233 	.word	0x00018233
   10198:	00017d82 	.word	0x00017d82
   1019c:	00018248 	.word	0x00018248
   101a0:	20001db0 	.word	0x20001db0
   101a4:	20001338 	.word	0x20001338
   101a8:	0001b9d8 	.word	0x0001b9d8
   101ac:	0001b99f 	.word	0x0001b99f
   101b0:	20001d88 	.word	0x20001d88
   101b4:	00018260 	.word	0x00018260
   101b8:	00018277 	.word	0x00018277

000101bc <z_time_slice>:
{
   101bc:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   101be:	4a15      	ldr	r2, [pc, #84]	; (10214 <z_time_slice+0x58>)
   101c0:	4b15      	ldr	r3, [pc, #84]	; (10218 <z_time_slice+0x5c>)
   101c2:	6814      	ldr	r4, [r2, #0]
{
   101c4:	4601      	mov	r1, r0
	if (pending_current == _current) {
   101c6:	6898      	ldr	r0, [r3, #8]
   101c8:	42a0      	cmp	r0, r4
   101ca:	461c      	mov	r4, r3
   101cc:	d103      	bne.n	101d6 <z_time_slice+0x1a>
}
   101ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   101d2:	f7ff bbc5 	b.w	f960 <z_reset_time_slice>
	pending_current = NULL;
   101d6:	2500      	movs	r5, #0
   101d8:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   101da:	4a10      	ldr	r2, [pc, #64]	; (1021c <z_time_slice+0x60>)
   101dc:	6812      	ldr	r2, [r2, #0]
   101de:	b1b2      	cbz	r2, 1020e <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   101e0:	89c2      	ldrh	r2, [r0, #14]
   101e2:	2a7f      	cmp	r2, #127	; 0x7f
   101e4:	d813      	bhi.n	1020e <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   101e6:	4a0e      	ldr	r2, [pc, #56]	; (10220 <z_time_slice+0x64>)
   101e8:	f990 500e 	ldrsb.w	r5, [r0, #14]
   101ec:	6812      	ldr	r2, [r2, #0]
   101ee:	4295      	cmp	r5, r2
   101f0:	db0d      	blt.n	1020e <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
   101f2:	4a0c      	ldr	r2, [pc, #48]	; (10224 <z_time_slice+0x68>)
   101f4:	4290      	cmp	r0, r2
   101f6:	d00a      	beq.n	1020e <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   101f8:	6982      	ldr	r2, [r0, #24]
   101fa:	b942      	cbnz	r2, 1020e <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   101fc:	691a      	ldr	r2, [r3, #16]
   101fe:	428a      	cmp	r2, r1
   10200:	dc02      	bgt.n	10208 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   10202:	f7ff ff49 	bl	10098 <z_move_thread_to_end_of_prio_q>
   10206:	e7e2      	b.n	101ce <z_time_slice+0x12>
			_current_cpu->slice_ticks -= ticks;
   10208:	1a52      	subs	r2, r2, r1
   1020a:	611a      	str	r2, [r3, #16]
}
   1020c:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   1020e:	2300      	movs	r3, #0
   10210:	6123      	str	r3, [r4, #16]
   10212:	e7fb      	b.n	1020c <z_time_slice+0x50>
   10214:	20001db8 	.word	0x20001db8
   10218:	20001d88 	.word	0x20001d88
   1021c:	20001dc4 	.word	0x20001dc4
   10220:	20001dc0 	.word	0x20001dc0
   10224:	20001338 	.word	0x20001338

00010228 <z_impl_k_thread_suspend>:
{
   10228:	b570      	push	{r4, r5, r6, lr}
   1022a:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
   1022c:	3018      	adds	r0, #24
   1022e:	f001 f93d 	bl	114ac <z_abort_timeout>
	__asm__ volatile(
   10232:	f04f 0320 	mov.w	r3, #32
   10236:	f3ef 8611 	mrs	r6, BASEPRI
   1023a:	f383 8811 	msr	BASEPRI, r3
   1023e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10242:	4825      	ldr	r0, [pc, #148]	; (102d8 <z_impl_k_thread_suspend+0xb0>)
   10244:	f000 fef6 	bl	11034 <z_spin_lock_valid>
   10248:	b968      	cbnz	r0, 10266 <z_impl_k_thread_suspend+0x3e>
   1024a:	235c      	movs	r3, #92	; 0x5c
   1024c:	4a23      	ldr	r2, [pc, #140]	; (102dc <z_impl_k_thread_suspend+0xb4>)
   1024e:	4924      	ldr	r1, [pc, #144]	; (102e0 <z_impl_k_thread_suspend+0xb8>)
   10250:	4824      	ldr	r0, [pc, #144]	; (102e4 <z_impl_k_thread_suspend+0xbc>)
   10252:	f001 ff59 	bl	12108 <printk>
   10256:	4920      	ldr	r1, [pc, #128]	; (102d8 <z_impl_k_thread_suspend+0xb0>)
   10258:	4823      	ldr	r0, [pc, #140]	; (102e8 <z_impl_k_thread_suspend+0xc0>)
   1025a:	f001 ff55 	bl	12108 <printk>
   1025e:	215c      	movs	r1, #92	; 0x5c
   10260:	481e      	ldr	r0, [pc, #120]	; (102dc <z_impl_k_thread_suspend+0xb4>)
   10262:	f002 f9e7 	bl	12634 <assert_post_action>
	z_spin_lock_set_owner(l);
   10266:	481c      	ldr	r0, [pc, #112]	; (102d8 <z_impl_k_thread_suspend+0xb0>)
   10268:	f000 ff00 	bl	1106c <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   1026c:	f994 300d 	ldrsb.w	r3, [r4, #13]
   10270:	2b00      	cmp	r3, #0
   10272:	da07      	bge.n	10284 <z_impl_k_thread_suspend+0x5c>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   10274:	4621      	mov	r1, r4
   10276:	481d      	ldr	r0, [pc, #116]	; (102ec <z_impl_k_thread_suspend+0xc4>)
   10278:	f7ff fc9c 	bl	fbb4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1027c:	7b63      	ldrb	r3, [r4, #13]
   1027e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   10282:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   10284:	4d1a      	ldr	r5, [pc, #104]	; (102f0 <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   10286:	7b63      	ldrb	r3, [r4, #13]
   10288:	68a8      	ldr	r0, [r5, #8]
   1028a:	f043 0310 	orr.w	r3, r3, #16
   1028e:	7363      	strb	r3, [r4, #13]
   10290:	1b03      	subs	r3, r0, r4
   10292:	4258      	negs	r0, r3
   10294:	4158      	adcs	r0, r3
   10296:	f7ff fd11 	bl	fcbc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1029a:	480f      	ldr	r0, [pc, #60]	; (102d8 <z_impl_k_thread_suspend+0xb0>)
   1029c:	f000 fed8 	bl	11050 <z_spin_unlock_valid>
   102a0:	b968      	cbnz	r0, 102be <z_impl_k_thread_suspend+0x96>
   102a2:	2384      	movs	r3, #132	; 0x84
   102a4:	4a0d      	ldr	r2, [pc, #52]	; (102dc <z_impl_k_thread_suspend+0xb4>)
   102a6:	4913      	ldr	r1, [pc, #76]	; (102f4 <z_impl_k_thread_suspend+0xcc>)
   102a8:	480e      	ldr	r0, [pc, #56]	; (102e4 <z_impl_k_thread_suspend+0xbc>)
   102aa:	f001 ff2d 	bl	12108 <printk>
   102ae:	490a      	ldr	r1, [pc, #40]	; (102d8 <z_impl_k_thread_suspend+0xb0>)
   102b0:	4811      	ldr	r0, [pc, #68]	; (102f8 <z_impl_k_thread_suspend+0xd0>)
   102b2:	f001 ff29 	bl	12108 <printk>
   102b6:	2184      	movs	r1, #132	; 0x84
   102b8:	4808      	ldr	r0, [pc, #32]	; (102dc <z_impl_k_thread_suspend+0xb4>)
   102ba:	f002 f9bb 	bl	12634 <assert_post_action>
	__asm__ volatile(
   102be:	f386 8811 	msr	BASEPRI, r6
   102c2:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   102c6:	68ab      	ldr	r3, [r5, #8]
   102c8:	42a3      	cmp	r3, r4
   102ca:	d103      	bne.n	102d4 <z_impl_k_thread_suspend+0xac>
}
   102cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   102d0:	f006 ba7a 	b.w	167c8 <z_reschedule_unlocked>
}
   102d4:	bd70      	pop	{r4, r5, r6, pc}
   102d6:	bf00      	nop
   102d8:	20001dbc 	.word	0x20001dbc
   102dc:	0001820d 	.word	0x0001820d
   102e0:	00018233 	.word	0x00018233
   102e4:	00017d82 	.word	0x00017d82
   102e8:	00018248 	.word	0x00018248
   102ec:	20001db0 	.word	0x20001db0
   102f0:	20001d88 	.word	0x20001d88
   102f4:	00018260 	.word	0x00018260
   102f8:	00018277 	.word	0x00018277

000102fc <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   102fc:	6d83      	ldr	r3, [r0, #88]	; 0x58
{
   102fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10302:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   10304:	b103      	cbz	r3, 10308 <z_thread_single_abort+0xc>
		thread->fn_abort();
   10306:	4798      	blx	r3
   10308:	f104 0018 	add.w	r0, r4, #24
   1030c:	f001 f8ce 	bl	114ac <z_abort_timeout>
	__asm__ volatile(
   10310:	f04f 0320 	mov.w	r3, #32
   10314:	f3ef 8611 	mrs	r6, BASEPRI
   10318:	f383 8811 	msr	BASEPRI, r3
   1031c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10320:	4839      	ldr	r0, [pc, #228]	; (10408 <z_thread_single_abort+0x10c>)
   10322:	f000 fe87 	bl	11034 <z_spin_lock_valid>
   10326:	b968      	cbnz	r0, 10344 <z_thread_single_abort+0x48>
   10328:	235c      	movs	r3, #92	; 0x5c
   1032a:	4a38      	ldr	r2, [pc, #224]	; (1040c <z_thread_single_abort+0x110>)
   1032c:	4938      	ldr	r1, [pc, #224]	; (10410 <z_thread_single_abort+0x114>)
   1032e:	4839      	ldr	r0, [pc, #228]	; (10414 <z_thread_single_abort+0x118>)
   10330:	f001 feea 	bl	12108 <printk>
   10334:	4934      	ldr	r1, [pc, #208]	; (10408 <z_thread_single_abort+0x10c>)
   10336:	4838      	ldr	r0, [pc, #224]	; (10418 <z_thread_single_abort+0x11c>)
   10338:	f001 fee6 	bl	12108 <printk>
   1033c:	215c      	movs	r1, #92	; 0x5c
   1033e:	4833      	ldr	r0, [pc, #204]	; (1040c <z_thread_single_abort+0x110>)
   10340:	f002 f978 	bl	12634 <assert_post_action>
	z_spin_lock_set_owner(l);
   10344:	4830      	ldr	r0, [pc, #192]	; (10408 <z_thread_single_abort+0x10c>)
   10346:	f000 fe91 	bl	1106c <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1034a:	7b63      	ldrb	r3, [r4, #13]
   1034c:	06d8      	lsls	r0, r3, #27
   1034e:	d136      	bne.n	103be <z_thread_single_abort+0xc2>
		if (z_is_thread_ready(thread)) {
   10350:	69a2      	ldr	r2, [r4, #24]
   10352:	2a00      	cmp	r2, #0
   10354:	d133      	bne.n	103be <z_thread_single_abort+0xc2>
			if (z_is_thread_queued(thread)) {
   10356:	0619      	lsls	r1, r3, #24
   10358:	d507      	bpl.n	1036a <z_thread_single_abort+0x6e>
				_priq_run_remove(&_kernel.ready_q.runq,
   1035a:	4621      	mov	r1, r4
   1035c:	482f      	ldr	r0, [pc, #188]	; (1041c <z_thread_single_abort+0x120>)
   1035e:	f7ff fc29 	bl	fbb4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   10362:	7b63      	ldrb	r3, [r4, #13]
   10364:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   10368:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   1036a:	4b2d      	ldr	r3, [pc, #180]	; (10420 <z_thread_single_abort+0x124>)
   1036c:	6898      	ldr	r0, [r3, #8]
   1036e:	1b02      	subs	r2, r0, r4
   10370:	4250      	negs	r0, r2
   10372:	4150      	adcs	r0, r2
   10374:	f7ff fca2 	bl	fcbc <update_cache>
			waiter->base.pended_on = NULL;
   10378:	2700      	movs	r7, #0
		thread->base.thread_state |= mask;
   1037a:	7b63      	ldrb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1037c:	f104 0828 	add.w	r8, r4, #40	; 0x28
   10380:	f043 0308 	orr.w	r3, r3, #8
   10384:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   10386:	6aa5      	ldr	r5, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10388:	4545      	cmp	r5, r8
   1038a:	d000      	beq.n	1038e <z_thread_single_abort+0x92>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   1038c:	bb3d      	cbnz	r5, 103de <z_thread_single_abort+0xe2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1038e:	481e      	ldr	r0, [pc, #120]	; (10408 <z_thread_single_abort+0x10c>)
   10390:	f000 fe5e 	bl	11050 <z_spin_unlock_valid>
   10394:	b968      	cbnz	r0, 103b2 <z_thread_single_abort+0xb6>
   10396:	2384      	movs	r3, #132	; 0x84
   10398:	4a1c      	ldr	r2, [pc, #112]	; (1040c <z_thread_single_abort+0x110>)
   1039a:	4922      	ldr	r1, [pc, #136]	; (10424 <z_thread_single_abort+0x128>)
   1039c:	481d      	ldr	r0, [pc, #116]	; (10414 <z_thread_single_abort+0x118>)
   1039e:	f001 feb3 	bl	12108 <printk>
   103a2:	4919      	ldr	r1, [pc, #100]	; (10408 <z_thread_single_abort+0x10c>)
   103a4:	4820      	ldr	r0, [pc, #128]	; (10428 <z_thread_single_abort+0x12c>)
   103a6:	f001 feaf 	bl	12108 <printk>
   103aa:	2184      	movs	r1, #132	; 0x84
   103ac:	4817      	ldr	r0, [pc, #92]	; (1040c <z_thread_single_abort+0x110>)
   103ae:	f002 f941 	bl	12634 <assert_post_action>
	__asm__ volatile(
   103b2:	f386 8811 	msr	BASEPRI, r6
   103b6:	f3bf 8f6f 	isb	sy
}
   103ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
   103be:	079b      	lsls	r3, r3, #30
   103c0:	d5da      	bpl.n	10378 <z_thread_single_abort+0x7c>
				_priq_wait_remove(&pended_on(thread)->waitq,
   103c2:	f104 0008 	add.w	r0, r4, #8
   103c6:	f7ff fab3 	bl	f930 <pended_on.isra.0>
   103ca:	4621      	mov	r1, r4
   103cc:	f7ff fbf2 	bl	fbb4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   103d0:	7b63      	ldrb	r3, [r4, #13]
   103d2:	f023 0302 	bic.w	r3, r3, #2
   103d6:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   103d8:	2300      	movs	r3, #0
   103da:	60a3      	str	r3, [r4, #8]
   103dc:	e7cc      	b.n	10378 <z_thread_single_abort+0x7c>
   103de:	f105 0018 	add.w	r0, r5, #24
   103e2:	f001 f863 	bl	114ac <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   103e6:	f105 0008 	add.w	r0, r5, #8
   103ea:	f7ff faa1 	bl	f930 <pended_on.isra.0>
   103ee:	4629      	mov	r1, r5
   103f0:	f7ff fbe0 	bl	fbb4 <z_priq_dumb_remove>
   103f4:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
   103f6:	4628      	mov	r0, r5
   103f8:	f023 0302 	bic.w	r3, r3, #2
   103fc:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   103fe:	60af      	str	r7, [r5, #8]
   10400:	672f      	str	r7, [r5, #112]	; 0x70
			ready_thread(waiter);
   10402:	f7ff fcfb 	bl	fdfc <ready_thread>
   10406:	e7be      	b.n	10386 <z_thread_single_abort+0x8a>
   10408:	20001dbc 	.word	0x20001dbc
   1040c:	0001820d 	.word	0x0001820d
   10410:	00018233 	.word	0x00018233
   10414:	00017d82 	.word	0x00017d82
   10418:	00018248 	.word	0x00018248
   1041c:	20001db0 	.word	0x20001db0
   10420:	20001d88 	.word	0x20001d88
   10424:	00018260 	.word	0x00018260
   10428:	00018277 	.word	0x00018277

0001042c <unready_thread>:
{
   1042c:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   1042e:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   10432:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   10434:	2b00      	cmp	r3, #0
   10436:	da07      	bge.n	10448 <unready_thread+0x1c>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   10438:	4601      	mov	r1, r0
   1043a:	4808      	ldr	r0, [pc, #32]	; (1045c <unready_thread+0x30>)
   1043c:	f7ff fbba 	bl	fbb4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   10440:	7b63      	ldrb	r3, [r4, #13]
   10442:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   10446:	7363      	strb	r3, [r4, #13]
	update_cache(thread == _current);
   10448:	4b05      	ldr	r3, [pc, #20]	; (10460 <unready_thread+0x34>)
   1044a:	6898      	ldr	r0, [r3, #8]
   1044c:	1b03      	subs	r3, r0, r4
   1044e:	4258      	negs	r0, r3
   10450:	4158      	adcs	r0, r3
}
   10452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   10456:	f7ff bc31 	b.w	fcbc <update_cache>
   1045a:	bf00      	nop
   1045c:	20001db0 	.word	0x20001db0
   10460:	20001d88 	.word	0x20001d88

00010464 <z_remove_thread_from_ready_q>:
{
   10464:	b538      	push	{r3, r4, r5, lr}
   10466:	4604      	mov	r4, r0
	__asm__ volatile(
   10468:	f04f 0320 	mov.w	r3, #32
   1046c:	f3ef 8511 	mrs	r5, BASEPRI
   10470:	f383 8811 	msr	BASEPRI, r3
   10474:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10478:	4817      	ldr	r0, [pc, #92]	; (104d8 <z_remove_thread_from_ready_q+0x74>)
   1047a:	f000 fddb 	bl	11034 <z_spin_lock_valid>
   1047e:	b968      	cbnz	r0, 1049c <z_remove_thread_from_ready_q+0x38>
   10480:	235c      	movs	r3, #92	; 0x5c
   10482:	4a16      	ldr	r2, [pc, #88]	; (104dc <z_remove_thread_from_ready_q+0x78>)
   10484:	4916      	ldr	r1, [pc, #88]	; (104e0 <z_remove_thread_from_ready_q+0x7c>)
   10486:	4817      	ldr	r0, [pc, #92]	; (104e4 <z_remove_thread_from_ready_q+0x80>)
   10488:	f001 fe3e 	bl	12108 <printk>
   1048c:	4912      	ldr	r1, [pc, #72]	; (104d8 <z_remove_thread_from_ready_q+0x74>)
   1048e:	4816      	ldr	r0, [pc, #88]	; (104e8 <z_remove_thread_from_ready_q+0x84>)
   10490:	f001 fe3a 	bl	12108 <printk>
   10494:	215c      	movs	r1, #92	; 0x5c
   10496:	4811      	ldr	r0, [pc, #68]	; (104dc <z_remove_thread_from_ready_q+0x78>)
   10498:	f002 f8cc 	bl	12634 <assert_post_action>
	z_spin_lock_set_owner(l);
   1049c:	480e      	ldr	r0, [pc, #56]	; (104d8 <z_remove_thread_from_ready_q+0x74>)
   1049e:	f000 fde5 	bl	1106c <z_spin_lock_set_owner>
		unready_thread(thread);
   104a2:	4620      	mov	r0, r4
   104a4:	f7ff ffc2 	bl	1042c <unready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   104a8:	480b      	ldr	r0, [pc, #44]	; (104d8 <z_remove_thread_from_ready_q+0x74>)
   104aa:	f000 fdd1 	bl	11050 <z_spin_unlock_valid>
   104ae:	b968      	cbnz	r0, 104cc <z_remove_thread_from_ready_q+0x68>
   104b0:	2384      	movs	r3, #132	; 0x84
   104b2:	4a0a      	ldr	r2, [pc, #40]	; (104dc <z_remove_thread_from_ready_q+0x78>)
   104b4:	490d      	ldr	r1, [pc, #52]	; (104ec <z_remove_thread_from_ready_q+0x88>)
   104b6:	480b      	ldr	r0, [pc, #44]	; (104e4 <z_remove_thread_from_ready_q+0x80>)
   104b8:	f001 fe26 	bl	12108 <printk>
   104bc:	4906      	ldr	r1, [pc, #24]	; (104d8 <z_remove_thread_from_ready_q+0x74>)
   104be:	480c      	ldr	r0, [pc, #48]	; (104f0 <z_remove_thread_from_ready_q+0x8c>)
   104c0:	f001 fe22 	bl	12108 <printk>
   104c4:	2184      	movs	r1, #132	; 0x84
   104c6:	4805      	ldr	r0, [pc, #20]	; (104dc <z_remove_thread_from_ready_q+0x78>)
   104c8:	f002 f8b4 	bl	12634 <assert_post_action>
	__asm__ volatile(
   104cc:	f385 8811 	msr	BASEPRI, r5
   104d0:	f3bf 8f6f 	isb	sy
}
   104d4:	bd38      	pop	{r3, r4, r5, pc}
   104d6:	bf00      	nop
   104d8:	20001dbc 	.word	0x20001dbc
   104dc:	0001820d 	.word	0x0001820d
   104e0:	00018233 	.word	0x00018233
   104e4:	00017d82 	.word	0x00017d82
   104e8:	00018248 	.word	0x00018248
   104ec:	00018260 	.word	0x00018260
   104f0:	00018277 	.word	0x00018277

000104f4 <add_to_waitq_locked>:
{
   104f4:	b538      	push	{r3, r4, r5, lr}
   104f6:	4604      	mov	r4, r0
   104f8:	460d      	mov	r5, r1
	unready_thread(thread);
   104fa:	f7ff ff97 	bl	1042c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   104fe:	7b63      	ldrb	r3, [r4, #13]
   10500:	f043 0302 	orr.w	r3, r3, #2
   10504:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   10506:	b33d      	cbz	r5, 10558 <add_to_waitq_locked+0x64>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   10508:	4b17      	ldr	r3, [pc, #92]	; (10568 <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
   1050a:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1050c:	429c      	cmp	r4, r3
   1050e:	d10b      	bne.n	10528 <add_to_waitq_locked+0x34>
   10510:	4916      	ldr	r1, [pc, #88]	; (1056c <add_to_waitq_locked+0x78>)
   10512:	4817      	ldr	r0, [pc, #92]	; (10570 <add_to_waitq_locked+0x7c>)
   10514:	f240 3355 	movw	r3, #853	; 0x355
   10518:	4a16      	ldr	r2, [pc, #88]	; (10574 <add_to_waitq_locked+0x80>)
   1051a:	f001 fdf5 	bl	12108 <printk>
   1051e:	f240 3155 	movw	r1, #853	; 0x355
   10522:	4814      	ldr	r0, [pc, #80]	; (10574 <add_to_waitq_locked+0x80>)
   10524:	f002 f886 	bl	12634 <assert_post_action>
	return list->head == list;
   10528:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1052a:	429d      	cmp	r5, r3
   1052c:	bf08      	it	eq
   1052e:	2300      	moveq	r3, #0
   10530:	2b00      	cmp	r3, #0
   10532:	bf38      	it	cc
   10534:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10536:	b183      	cbz	r3, 1055a <add_to_waitq_locked+0x66>
	if (thread_1->base.prio < thread_2->base.prio) {
   10538:	f994 100e 	ldrsb.w	r1, [r4, #14]
   1053c:	f993 200e 	ldrsb.w	r2, [r3, #14]
   10540:	4291      	cmp	r1, r2
   10542:	db04      	blt.n	1054e <add_to_waitq_locked+0x5a>
	return (node == list->tail) ? NULL : node->next;
   10544:	686a      	ldr	r2, [r5, #4]
   10546:	429a      	cmp	r2, r3
   10548:	d007      	beq.n	1055a <add_to_waitq_locked+0x66>
   1054a:	681b      	ldr	r3, [r3, #0]
   1054c:	e7f3      	b.n	10536 <add_to_waitq_locked+0x42>
	node->prev = successor->prev;
   1054e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   10550:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   10554:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   10556:	605c      	str	r4, [r3, #4]
}
   10558:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
   1055a:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   1055c:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   1055e:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   10560:	686b      	ldr	r3, [r5, #4]
   10562:	601c      	str	r4, [r3, #0]
	list->tail = node;
   10564:	606c      	str	r4, [r5, #4]
   10566:	e7f7      	b.n	10558 <add_to_waitq_locked+0x64>
   10568:	20001338 	.word	0x20001338
   1056c:	0001b9d8 	.word	0x0001b9d8
   10570:	00017d82 	.word	0x00017d82
   10574:	0001b99f 	.word	0x0001b99f

00010578 <pend>:
{
   10578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1057c:	4604      	mov	r4, r0
   1057e:	460d      	mov	r5, r1
   10580:	4616      	mov	r6, r2
   10582:	461f      	mov	r7, r3
	__asm__ volatile(
   10584:	f04f 0320 	mov.w	r3, #32
   10588:	f3ef 8811 	mrs	r8, BASEPRI
   1058c:	f383 8811 	msr	BASEPRI, r3
   10590:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10594:	481f      	ldr	r0, [pc, #124]	; (10614 <pend+0x9c>)
   10596:	f000 fd4d 	bl	11034 <z_spin_lock_valid>
   1059a:	b968      	cbnz	r0, 105b8 <pend+0x40>
   1059c:	235c      	movs	r3, #92	; 0x5c
   1059e:	4a1e      	ldr	r2, [pc, #120]	; (10618 <pend+0xa0>)
   105a0:	491e      	ldr	r1, [pc, #120]	; (1061c <pend+0xa4>)
   105a2:	481f      	ldr	r0, [pc, #124]	; (10620 <pend+0xa8>)
   105a4:	f001 fdb0 	bl	12108 <printk>
   105a8:	491a      	ldr	r1, [pc, #104]	; (10614 <pend+0x9c>)
   105aa:	481e      	ldr	r0, [pc, #120]	; (10624 <pend+0xac>)
   105ac:	f001 fdac 	bl	12108 <printk>
   105b0:	215c      	movs	r1, #92	; 0x5c
   105b2:	4819      	ldr	r0, [pc, #100]	; (10618 <pend+0xa0>)
   105b4:	f002 f83e 	bl	12634 <assert_post_action>
	z_spin_lock_set_owner(l);
   105b8:	4816      	ldr	r0, [pc, #88]	; (10614 <pend+0x9c>)
   105ba:	f000 fd57 	bl	1106c <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   105be:	4620      	mov	r0, r4
   105c0:	4629      	mov	r1, r5
   105c2:	f7ff ff97 	bl	104f4 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   105c6:	4813      	ldr	r0, [pc, #76]	; (10614 <pend+0x9c>)
   105c8:	f000 fd42 	bl	11050 <z_spin_unlock_valid>
   105cc:	b968      	cbnz	r0, 105ea <pend+0x72>
   105ce:	2384      	movs	r3, #132	; 0x84
   105d0:	4a11      	ldr	r2, [pc, #68]	; (10618 <pend+0xa0>)
   105d2:	4915      	ldr	r1, [pc, #84]	; (10628 <pend+0xb0>)
   105d4:	4812      	ldr	r0, [pc, #72]	; (10620 <pend+0xa8>)
   105d6:	f001 fd97 	bl	12108 <printk>
   105da:	490e      	ldr	r1, [pc, #56]	; (10614 <pend+0x9c>)
   105dc:	4813      	ldr	r0, [pc, #76]	; (1062c <pend+0xb4>)
   105de:	f001 fd93 	bl	12108 <printk>
   105e2:	2184      	movs	r1, #132	; 0x84
   105e4:	480c      	ldr	r0, [pc, #48]	; (10618 <pend+0xa0>)
   105e6:	f002 f825 	bl	12634 <assert_post_action>
	__asm__ volatile(
   105ea:	f388 8811 	msr	BASEPRI, r8
   105ee:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   105f2:	1c7b      	adds	r3, r7, #1
   105f4:	bf08      	it	eq
   105f6:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   105fa:	d008      	beq.n	1060e <pend+0x96>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   105fc:	4632      	mov	r2, r6
   105fe:	463b      	mov	r3, r7
   10600:	f104 0018 	add.w	r0, r4, #24
   10604:	490a      	ldr	r1, [pc, #40]	; (10630 <pend+0xb8>)
}
   10606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1060a:	f000 be71 	b.w	112f0 <z_add_timeout>
   1060e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10612:	bf00      	nop
   10614:	20001dbc 	.word	0x20001dbc
   10618:	0001820d 	.word	0x0001820d
   1061c:	00018233 	.word	0x00018233
   10620:	00017d82 	.word	0x00017d82
   10624:	00018248 	.word	0x00018248
   10628:	00018260 	.word	0x00018260
   1062c:	00018277 	.word	0x00018277
   10630:	0000ff29 	.word	0x0000ff29

00010634 <z_pend_curr>:
{
   10634:	b538      	push	{r3, r4, r5, lr}
   10636:	4604      	mov	r4, r0
	pending_current = _current;
   10638:	4b10      	ldr	r3, [pc, #64]	; (1067c <z_pend_curr+0x48>)
{
   1063a:	460d      	mov	r5, r1
	pending_current = _current;
   1063c:	6898      	ldr	r0, [r3, #8]
   1063e:	4b10      	ldr	r3, [pc, #64]	; (10680 <z_pend_curr+0x4c>)
{
   10640:	4611      	mov	r1, r2
	pending_current = _current;
   10642:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   10644:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   10648:	f7ff ff96 	bl	10578 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1064c:	4620      	mov	r0, r4
   1064e:	f000 fcff 	bl	11050 <z_spin_unlock_valid>
   10652:	b968      	cbnz	r0, 10670 <z_pend_curr+0x3c>
   10654:	239b      	movs	r3, #155	; 0x9b
   10656:	4a0b      	ldr	r2, [pc, #44]	; (10684 <z_pend_curr+0x50>)
   10658:	490b      	ldr	r1, [pc, #44]	; (10688 <z_pend_curr+0x54>)
   1065a:	480c      	ldr	r0, [pc, #48]	; (1068c <z_pend_curr+0x58>)
   1065c:	f001 fd54 	bl	12108 <printk>
   10660:	4621      	mov	r1, r4
   10662:	480b      	ldr	r0, [pc, #44]	; (10690 <z_pend_curr+0x5c>)
   10664:	f001 fd50 	bl	12108 <printk>
   10668:	219b      	movs	r1, #155	; 0x9b
   1066a:	4806      	ldr	r0, [pc, #24]	; (10684 <z_pend_curr+0x50>)
   1066c:	f001 ffe2 	bl	12634 <assert_post_action>
   10670:	4628      	mov	r0, r5
}
   10672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10676:	f7f3 bab1 	b.w	3bdc <arch_swap>
   1067a:	bf00      	nop
   1067c:	20001d88 	.word	0x20001d88
   10680:	20001db8 	.word	0x20001db8
   10684:	0001820d 	.word	0x0001820d
   10688:	00018260 	.word	0x00018260
   1068c:	00017d82 	.word	0x00017d82
   10690:	00018277 	.word	0x00018277

00010694 <z_set_prio>:
{
   10694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10696:	4604      	mov	r4, r0
   10698:	460e      	mov	r6, r1
	__asm__ volatile(
   1069a:	f04f 0320 	mov.w	r3, #32
   1069e:	f3ef 8711 	mrs	r7, BASEPRI
   106a2:	f383 8811 	msr	BASEPRI, r3
   106a6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   106aa:	4839      	ldr	r0, [pc, #228]	; (10790 <z_set_prio+0xfc>)
   106ac:	f000 fcc2 	bl	11034 <z_spin_lock_valid>
   106b0:	b968      	cbnz	r0, 106ce <z_set_prio+0x3a>
   106b2:	235c      	movs	r3, #92	; 0x5c
   106b4:	4a37      	ldr	r2, [pc, #220]	; (10794 <z_set_prio+0x100>)
   106b6:	4938      	ldr	r1, [pc, #224]	; (10798 <z_set_prio+0x104>)
   106b8:	4838      	ldr	r0, [pc, #224]	; (1079c <z_set_prio+0x108>)
   106ba:	f001 fd25 	bl	12108 <printk>
   106be:	4934      	ldr	r1, [pc, #208]	; (10790 <z_set_prio+0xfc>)
   106c0:	4837      	ldr	r0, [pc, #220]	; (107a0 <z_set_prio+0x10c>)
   106c2:	f001 fd21 	bl	12108 <printk>
   106c6:	215c      	movs	r1, #92	; 0x5c
   106c8:	4832      	ldr	r0, [pc, #200]	; (10794 <z_set_prio+0x100>)
   106ca:	f001 ffb3 	bl	12634 <assert_post_action>
	z_spin_lock_set_owner(l);
   106ce:	4830      	ldr	r0, [pc, #192]	; (10790 <z_set_prio+0xfc>)
   106d0:	f000 fccc 	bl	1106c <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   106d4:	7b63      	ldrb	r3, [r4, #13]
   106d6:	b276      	sxtb	r6, r6
   106d8:	06db      	lsls	r3, r3, #27
   106da:	d155      	bne.n	10788 <z_set_prio+0xf4>
	return !sys_dnode_is_linked(&t->node);
   106dc:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
   106de:	2d00      	cmp	r5, #0
   106e0:	d152      	bne.n	10788 <z_set_prio+0xf4>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   106e2:	4621      	mov	r1, r4
   106e4:	482f      	ldr	r0, [pc, #188]	; (107a4 <z_set_prio+0x110>)
   106e6:	f7ff fa65 	bl	fbb4 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   106ea:	4b2f      	ldr	r3, [pc, #188]	; (107a8 <z_set_prio+0x114>)
				thread->base.prio = prio;
   106ec:	73a6      	strb	r6, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   106ee:	429c      	cmp	r4, r3
   106f0:	d10b      	bne.n	1070a <z_set_prio+0x76>
   106f2:	492e      	ldr	r1, [pc, #184]	; (107ac <z_set_prio+0x118>)
   106f4:	4829      	ldr	r0, [pc, #164]	; (1079c <z_set_prio+0x108>)
   106f6:	f240 3355 	movw	r3, #853	; 0x355
   106fa:	4a2d      	ldr	r2, [pc, #180]	; (107b0 <z_set_prio+0x11c>)
   106fc:	f001 fd04 	bl	12108 <printk>
   10700:	f240 3155 	movw	r1, #853	; 0x355
   10704:	482a      	ldr	r0, [pc, #168]	; (107b0 <z_set_prio+0x11c>)
   10706:	f001 ff95 	bl	12634 <assert_post_action>
	return list->head == list;
   1070a:	4a2a      	ldr	r2, [pc, #168]	; (107b4 <z_set_prio+0x120>)
   1070c:	4613      	mov	r3, r2
   1070e:	f853 0f28 	ldr.w	r0, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10712:	4298      	cmp	r0, r3
   10714:	bf18      	it	ne
   10716:	4605      	movne	r5, r0
   10718:	2d00      	cmp	r5, #0
   1071a:	4619      	mov	r1, r3
   1071c:	462b      	mov	r3, r5
   1071e:	bf38      	it	cc
   10720:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   10722:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10724:	b353      	cbz	r3, 1077c <z_set_prio+0xe8>
	if (thread_1->base.prio < thread_2->base.prio) {
   10726:	f994 600e 	ldrsb.w	r6, [r4, #14]
   1072a:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1072e:	42ae      	cmp	r6, r5
   10730:	db03      	blt.n	1073a <z_set_prio+0xa6>
	return (node == list->tail) ? NULL : node->next;
   10732:	4298      	cmp	r0, r3
   10734:	d022      	beq.n	1077c <z_set_prio+0xe8>
   10736:	681b      	ldr	r3, [r3, #0]
   10738:	e7f4      	b.n	10724 <z_set_prio+0x90>
	node->prev = successor->prev;
   1073a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1073c:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   10740:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   10742:	605c      	str	r4, [r3, #4]
			update_cache(1);
   10744:	2001      	movs	r0, #1
   10746:	f7ff fab9 	bl	fcbc <update_cache>
   1074a:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1074c:	4810      	ldr	r0, [pc, #64]	; (10790 <z_set_prio+0xfc>)
   1074e:	f000 fc7f 	bl	11050 <z_spin_unlock_valid>
   10752:	b968      	cbnz	r0, 10770 <z_set_prio+0xdc>
   10754:	2384      	movs	r3, #132	; 0x84
   10756:	4a0f      	ldr	r2, [pc, #60]	; (10794 <z_set_prio+0x100>)
   10758:	4917      	ldr	r1, [pc, #92]	; (107b8 <z_set_prio+0x124>)
   1075a:	4810      	ldr	r0, [pc, #64]	; (1079c <z_set_prio+0x108>)
   1075c:	f001 fcd4 	bl	12108 <printk>
   10760:	490b      	ldr	r1, [pc, #44]	; (10790 <z_set_prio+0xfc>)
   10762:	4816      	ldr	r0, [pc, #88]	; (107bc <z_set_prio+0x128>)
   10764:	f001 fcd0 	bl	12108 <printk>
   10768:	2184      	movs	r1, #132	; 0x84
   1076a:	480a      	ldr	r0, [pc, #40]	; (10794 <z_set_prio+0x100>)
   1076c:	f001 ff62 	bl	12634 <assert_post_action>
	__asm__ volatile(
   10770:	f387 8811 	msr	BASEPRI, r7
   10774:	f3bf 8f6f 	isb	sy
}
   10778:	4620      	mov	r0, r4
   1077a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node->prev = list->tail;
   1077c:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   10780:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   10782:	601c      	str	r4, [r3, #0]
	list->tail = node;
   10784:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   10786:	e7dd      	b.n	10744 <z_set_prio+0xb0>
			thread->base.prio = prio;
   10788:	73a6      	strb	r6, [r4, #14]
   1078a:	2400      	movs	r4, #0
   1078c:	e7de      	b.n	1074c <z_set_prio+0xb8>
   1078e:	bf00      	nop
   10790:	20001dbc 	.word	0x20001dbc
   10794:	0001820d 	.word	0x0001820d
   10798:	00018233 	.word	0x00018233
   1079c:	00017d82 	.word	0x00017d82
   107a0:	00018248 	.word	0x00018248
   107a4:	20001db0 	.word	0x20001db0
   107a8:	20001338 	.word	0x20001338
   107ac:	0001b9d8 	.word	0x0001b9d8
   107b0:	0001b99f 	.word	0x0001b99f
   107b4:	20001d88 	.word	0x20001d88
   107b8:	00018260 	.word	0x00018260
   107bc:	00018277 	.word	0x00018277

000107c0 <z_unpend_first_thread>:
{
   107c0:	b538      	push	{r3, r4, r5, lr}
   107c2:	4604      	mov	r4, r0
	__asm__ volatile(
   107c4:	f04f 0320 	mov.w	r3, #32
   107c8:	f3ef 8511 	mrs	r5, BASEPRI
   107cc:	f383 8811 	msr	BASEPRI, r3
   107d0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   107d4:	483b      	ldr	r0, [pc, #236]	; (108c4 <z_unpend_first_thread+0x104>)
   107d6:	f000 fc2d 	bl	11034 <z_spin_lock_valid>
   107da:	b968      	cbnz	r0, 107f8 <z_unpend_first_thread+0x38>
   107dc:	235c      	movs	r3, #92	; 0x5c
   107de:	4a3a      	ldr	r2, [pc, #232]	; (108c8 <z_unpend_first_thread+0x108>)
   107e0:	493a      	ldr	r1, [pc, #232]	; (108cc <z_unpend_first_thread+0x10c>)
   107e2:	483b      	ldr	r0, [pc, #236]	; (108d0 <z_unpend_first_thread+0x110>)
   107e4:	f001 fc90 	bl	12108 <printk>
   107e8:	4936      	ldr	r1, [pc, #216]	; (108c4 <z_unpend_first_thread+0x104>)
   107ea:	483a      	ldr	r0, [pc, #232]	; (108d4 <z_unpend_first_thread+0x114>)
   107ec:	f001 fc8c 	bl	12108 <printk>
   107f0:	215c      	movs	r1, #92	; 0x5c
   107f2:	4835      	ldr	r0, [pc, #212]	; (108c8 <z_unpend_first_thread+0x108>)
   107f4:	f001 ff1e 	bl	12634 <assert_post_action>
	z_spin_lock_set_owner(l);
   107f8:	4832      	ldr	r0, [pc, #200]	; (108c4 <z_unpend_first_thread+0x104>)
   107fa:	f000 fc37 	bl	1106c <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   107fe:	4620      	mov	r0, r4
   10800:	f005 ffec 	bl	167dc <z_priq_dumb_best>
   10804:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10806:	482f      	ldr	r0, [pc, #188]	; (108c4 <z_unpend_first_thread+0x104>)
   10808:	f000 fc22 	bl	11050 <z_spin_unlock_valid>
   1080c:	b968      	cbnz	r0, 1082a <z_unpend_first_thread+0x6a>
   1080e:	2384      	movs	r3, #132	; 0x84
   10810:	4a2d      	ldr	r2, [pc, #180]	; (108c8 <z_unpend_first_thread+0x108>)
   10812:	4931      	ldr	r1, [pc, #196]	; (108d8 <z_unpend_first_thread+0x118>)
   10814:	482e      	ldr	r0, [pc, #184]	; (108d0 <z_unpend_first_thread+0x110>)
   10816:	f001 fc77 	bl	12108 <printk>
   1081a:	492a      	ldr	r1, [pc, #168]	; (108c4 <z_unpend_first_thread+0x104>)
   1081c:	482f      	ldr	r0, [pc, #188]	; (108dc <z_unpend_first_thread+0x11c>)
   1081e:	f001 fc73 	bl	12108 <printk>
   10822:	2184      	movs	r1, #132	; 0x84
   10824:	4828      	ldr	r0, [pc, #160]	; (108c8 <z_unpend_first_thread+0x108>)
   10826:	f001 ff05 	bl	12634 <assert_post_action>
	__asm__ volatile(
   1082a:	f385 8811 	msr	BASEPRI, r5
   1082e:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   10832:	2c00      	cmp	r4, #0
   10834:	d043      	beq.n	108be <z_unpend_first_thread+0xfe>
	__asm__ volatile(
   10836:	f04f 0320 	mov.w	r3, #32
   1083a:	f3ef 8511 	mrs	r5, BASEPRI
   1083e:	f383 8811 	msr	BASEPRI, r3
   10842:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10846:	481f      	ldr	r0, [pc, #124]	; (108c4 <z_unpend_first_thread+0x104>)
   10848:	f000 fbf4 	bl	11034 <z_spin_lock_valid>
   1084c:	b968      	cbnz	r0, 1086a <z_unpend_first_thread+0xaa>
   1084e:	235c      	movs	r3, #92	; 0x5c
   10850:	4a1d      	ldr	r2, [pc, #116]	; (108c8 <z_unpend_first_thread+0x108>)
   10852:	491e      	ldr	r1, [pc, #120]	; (108cc <z_unpend_first_thread+0x10c>)
   10854:	481e      	ldr	r0, [pc, #120]	; (108d0 <z_unpend_first_thread+0x110>)
   10856:	f001 fc57 	bl	12108 <printk>
   1085a:	491a      	ldr	r1, [pc, #104]	; (108c4 <z_unpend_first_thread+0x104>)
   1085c:	481d      	ldr	r0, [pc, #116]	; (108d4 <z_unpend_first_thread+0x114>)
   1085e:	f001 fc53 	bl	12108 <printk>
   10862:	215c      	movs	r1, #92	; 0x5c
   10864:	4818      	ldr	r0, [pc, #96]	; (108c8 <z_unpend_first_thread+0x108>)
   10866:	f001 fee5 	bl	12634 <assert_post_action>
	z_spin_lock_set_owner(l);
   1086a:	4816      	ldr	r0, [pc, #88]	; (108c4 <z_unpend_first_thread+0x104>)
   1086c:	f000 fbfe 	bl	1106c <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   10870:	f104 0008 	add.w	r0, r4, #8
   10874:	f7ff f85c 	bl	f930 <pended_on.isra.0>
   10878:	4621      	mov	r1, r4
   1087a:	f7ff f99b 	bl	fbb4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1087e:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10880:	4810      	ldr	r0, [pc, #64]	; (108c4 <z_unpend_first_thread+0x104>)
   10882:	f023 0302 	bic.w	r3, r3, #2
   10886:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
   10888:	2300      	movs	r3, #0
   1088a:	60a3      	str	r3, [r4, #8]
   1088c:	f000 fbe0 	bl	11050 <z_spin_unlock_valid>
   10890:	b968      	cbnz	r0, 108ae <z_unpend_first_thread+0xee>
   10892:	2384      	movs	r3, #132	; 0x84
   10894:	4a0c      	ldr	r2, [pc, #48]	; (108c8 <z_unpend_first_thread+0x108>)
   10896:	4910      	ldr	r1, [pc, #64]	; (108d8 <z_unpend_first_thread+0x118>)
   10898:	480d      	ldr	r0, [pc, #52]	; (108d0 <z_unpend_first_thread+0x110>)
   1089a:	f001 fc35 	bl	12108 <printk>
   1089e:	4909      	ldr	r1, [pc, #36]	; (108c4 <z_unpend_first_thread+0x104>)
   108a0:	480e      	ldr	r0, [pc, #56]	; (108dc <z_unpend_first_thread+0x11c>)
   108a2:	f001 fc31 	bl	12108 <printk>
   108a6:	2184      	movs	r1, #132	; 0x84
   108a8:	4807      	ldr	r0, [pc, #28]	; (108c8 <z_unpend_first_thread+0x108>)
   108aa:	f001 fec3 	bl	12634 <assert_post_action>
	__asm__ volatile(
   108ae:	f385 8811 	msr	BASEPRI, r5
   108b2:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   108b6:	f104 0018 	add.w	r0, r4, #24
   108ba:	f000 fdf7 	bl	114ac <z_abort_timeout>
}
   108be:	4620      	mov	r0, r4
   108c0:	bd38      	pop	{r3, r4, r5, pc}
   108c2:	bf00      	nop
   108c4:	20001dbc 	.word	0x20001dbc
   108c8:	0001820d 	.word	0x0001820d
   108cc:	00018233 	.word	0x00018233
   108d0:	00017d82 	.word	0x00017d82
   108d4:	00018248 	.word	0x00018248
   108d8:	00018260 	.word	0x00018260
   108dc:	00018277 	.word	0x00018277

000108e0 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   108e0:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   108e2:	4b04      	ldr	r3, [pc, #16]	; (108f4 <z_sched_init+0x14>)
   108e4:	4608      	mov	r0, r1
   108e6:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   108ea:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   108ee:	f7ff b84d 	b.w	f98c <k_sched_time_slice_set>
   108f2:	bf00      	nop
   108f4:	20001d88 	.word	0x20001d88

000108f8 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   108f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   108fa:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   108fe:	b173      	cbz	r3, 1091e <z_impl_k_yield+0x26>
   10900:	4946      	ldr	r1, [pc, #280]	; (10a1c <z_impl_k_yield+0x124>)
   10902:	f44f 638c 	mov.w	r3, #1120	; 0x460
   10906:	4a46      	ldr	r2, [pc, #280]	; (10a20 <z_impl_k_yield+0x128>)
   10908:	4846      	ldr	r0, [pc, #280]	; (10a24 <z_impl_k_yield+0x12c>)
   1090a:	f001 fbfd 	bl	12108 <printk>
   1090e:	4846      	ldr	r0, [pc, #280]	; (10a28 <z_impl_k_yield+0x130>)
   10910:	f001 fbfa 	bl	12108 <printk>
   10914:	f44f 618c 	mov.w	r1, #1120	; 0x460
   10918:	4841      	ldr	r0, [pc, #260]	; (10a20 <z_impl_k_yield+0x128>)
   1091a:	f001 fe8b 	bl	12634 <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   1091e:	4c43      	ldr	r4, [pc, #268]	; (10a2c <z_impl_k_yield+0x134>)
   10920:	4e43      	ldr	r6, [pc, #268]	; (10a30 <z_impl_k_yield+0x138>)
   10922:	68a2      	ldr	r2, [r4, #8]
   10924:	42b2      	cmp	r2, r6
   10926:	d067      	beq.n	109f8 <z_impl_k_yield+0x100>
	__asm__ volatile(
   10928:	f04f 0320 	mov.w	r3, #32
   1092c:	f3ef 8711 	mrs	r7, BASEPRI
   10930:	f383 8811 	msr	BASEPRI, r3
   10934:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10938:	483e      	ldr	r0, [pc, #248]	; (10a34 <z_impl_k_yield+0x13c>)
   1093a:	f000 fb7b 	bl	11034 <z_spin_lock_valid>
   1093e:	b968      	cbnz	r0, 1095c <z_impl_k_yield+0x64>
   10940:	235c      	movs	r3, #92	; 0x5c
   10942:	4a3d      	ldr	r2, [pc, #244]	; (10a38 <z_impl_k_yield+0x140>)
   10944:	493d      	ldr	r1, [pc, #244]	; (10a3c <z_impl_k_yield+0x144>)
   10946:	4837      	ldr	r0, [pc, #220]	; (10a24 <z_impl_k_yield+0x12c>)
   10948:	f001 fbde 	bl	12108 <printk>
   1094c:	4939      	ldr	r1, [pc, #228]	; (10a34 <z_impl_k_yield+0x13c>)
   1094e:	483c      	ldr	r0, [pc, #240]	; (10a40 <z_impl_k_yield+0x148>)
   10950:	f001 fbda 	bl	12108 <printk>
   10954:	215c      	movs	r1, #92	; 0x5c
   10956:	4838      	ldr	r0, [pc, #224]	; (10a38 <z_impl_k_yield+0x140>)
   10958:	f001 fe6c 	bl	12634 <assert_post_action>
	z_spin_lock_set_owner(l);
   1095c:	4835      	ldr	r0, [pc, #212]	; (10a34 <z_impl_k_yield+0x13c>)
   1095e:	f000 fb85 	bl	1106c <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   10962:	68a1      	ldr	r1, [r4, #8]
   10964:	4837      	ldr	r0, [pc, #220]	; (10a44 <z_impl_k_yield+0x14c>)
   10966:	f7ff f925 	bl	fbb4 <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   1096a:	68a5      	ldr	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1096c:	42b5      	cmp	r5, r6
   1096e:	d10b      	bne.n	10988 <z_impl_k_yield+0x90>
   10970:	4935      	ldr	r1, [pc, #212]	; (10a48 <z_impl_k_yield+0x150>)
   10972:	482c      	ldr	r0, [pc, #176]	; (10a24 <z_impl_k_yield+0x12c>)
   10974:	f240 3355 	movw	r3, #853	; 0x355
   10978:	4a29      	ldr	r2, [pc, #164]	; (10a20 <z_impl_k_yield+0x128>)
   1097a:	f001 fbc5 	bl	12108 <printk>
   1097e:	f240 3155 	movw	r1, #853	; 0x355
   10982:	4827      	ldr	r0, [pc, #156]	; (10a20 <z_impl_k_yield+0x128>)
   10984:	f001 fe56 	bl	12634 <assert_post_action>
	return list->head == list;
   10988:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1098a:	492e      	ldr	r1, [pc, #184]	; (10a44 <z_impl_k_yield+0x14c>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1098c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1098e:	428b      	cmp	r3, r1
   10990:	bf08      	it	eq
   10992:	2300      	moveq	r3, #0
   10994:	2b00      	cmp	r3, #0
   10996:	bf38      	it	cc
   10998:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1099a:	2b00      	cmp	r3, #0
   1099c:	d038      	beq.n	10a10 <z_impl_k_yield+0x118>
	if (thread_1->base.prio < thread_2->base.prio) {
   1099e:	f995 600e 	ldrsb.w	r6, [r5, #14]
   109a2:	f993 000e 	ldrsb.w	r0, [r3, #14]
   109a6:	4286      	cmp	r6, r0
   109a8:	db03      	blt.n	109b2 <z_impl_k_yield+0xba>
	return (node == list->tail) ? NULL : node->next;
   109aa:	4293      	cmp	r3, r2
   109ac:	d030      	beq.n	10a10 <z_impl_k_yield+0x118>
   109ae:	681b      	ldr	r3, [r3, #0]
   109b0:	e7f3      	b.n	1099a <z_impl_k_yield+0xa2>
	node->prev = successor->prev;
   109b2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   109b4:	e9c5 3200 	strd	r3, r2, [r5]
	successor->prev->next = node;
   109b8:	6015      	str	r5, [r2, #0]
	successor->prev = node;
   109ba:	605d      	str	r5, [r3, #4]
			z_mark_thread_as_queued(_current);
   109bc:	68a2      	ldr	r2, [r4, #8]
			update_cache(1);
   109be:	2001      	movs	r0, #1
	thread->base.thread_state |= states;
   109c0:	7b53      	ldrb	r3, [r2, #13]
   109c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   109c6:	7353      	strb	r3, [r2, #13]
   109c8:	f7ff f978 	bl	fcbc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   109cc:	4819      	ldr	r0, [pc, #100]	; (10a34 <z_impl_k_yield+0x13c>)
   109ce:	f000 fb3f 	bl	11050 <z_spin_unlock_valid>
   109d2:	b968      	cbnz	r0, 109f0 <z_impl_k_yield+0xf8>
   109d4:	2384      	movs	r3, #132	; 0x84
   109d6:	4a18      	ldr	r2, [pc, #96]	; (10a38 <z_impl_k_yield+0x140>)
   109d8:	491c      	ldr	r1, [pc, #112]	; (10a4c <z_impl_k_yield+0x154>)
   109da:	4812      	ldr	r0, [pc, #72]	; (10a24 <z_impl_k_yield+0x12c>)
   109dc:	f001 fb94 	bl	12108 <printk>
   109e0:	4914      	ldr	r1, [pc, #80]	; (10a34 <z_impl_k_yield+0x13c>)
   109e2:	481b      	ldr	r0, [pc, #108]	; (10a50 <z_impl_k_yield+0x158>)
   109e4:	f001 fb90 	bl	12108 <printk>
   109e8:	2184      	movs	r1, #132	; 0x84
   109ea:	4813      	ldr	r0, [pc, #76]	; (10a38 <z_impl_k_yield+0x140>)
   109ec:	f001 fe22 	bl	12634 <assert_post_action>
	__asm__ volatile(
   109f0:	f387 8811 	msr	BASEPRI, r7
   109f4:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   109f8:	f04f 0320 	mov.w	r3, #32
   109fc:	f3ef 8011 	mrs	r0, BASEPRI
   10a00:	f383 8811 	msr	BASEPRI, r3
   10a04:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   10a08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   10a0c:	f7f3 b8e6 	b.w	3bdc <arch_swap>
	node->prev = list->tail;
   10a10:	e9c5 1200 	strd	r1, r2, [r5]
	list->tail->next = node;
   10a14:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   10a16:	601d      	str	r5, [r3, #0]
	list->tail = node;
   10a18:	62e5      	str	r5, [r4, #44]	; 0x2c
}
   10a1a:	e7cf      	b.n	109bc <z_impl_k_yield+0xc4>
   10a1c:	0001b95d 	.word	0x0001b95d
   10a20:	0001b99f 	.word	0x0001b99f
   10a24:	00017d82 	.word	0x00017d82
   10a28:	0001b120 	.word	0x0001b120
   10a2c:	20001d88 	.word	0x20001d88
   10a30:	20001338 	.word	0x20001338
   10a34:	20001dbc 	.word	0x20001dbc
   10a38:	0001820d 	.word	0x0001820d
   10a3c:	00018233 	.word	0x00018233
   10a40:	00018248 	.word	0x00018248
   10a44:	20001db0 	.word	0x20001db0
   10a48:	0001b9d8 	.word	0x0001b9d8
   10a4c:	00018260 	.word	0x00018260
   10a50:	00018277 	.word	0x00018277

00010a54 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
{
   10a54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   10a58:	4604      	mov	r4, r0
   10a5a:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	u32_t expected_wakeup_time;

	__ASSERT(!arch_is_in_isr(), "");
   10a5e:	b173      	cbz	r3, 10a7e <z_tick_sleep+0x2a>
   10a60:	493c      	ldr	r1, [pc, #240]	; (10b54 <z_tick_sleep+0x100>)
   10a62:	f240 437e 	movw	r3, #1150	; 0x47e
   10a66:	4a3c      	ldr	r2, [pc, #240]	; (10b58 <z_tick_sleep+0x104>)
   10a68:	483c      	ldr	r0, [pc, #240]	; (10b5c <z_tick_sleep+0x108>)
   10a6a:	f001 fb4d 	bl	12108 <printk>
   10a6e:	483c      	ldr	r0, [pc, #240]	; (10b60 <z_tick_sleep+0x10c>)
   10a70:	f001 fb4a 	bl	12108 <printk>
   10a74:	f240 417e 	movw	r1, #1150	; 0x47e
   10a78:	4837      	ldr	r0, [pc, #220]	; (10b58 <z_tick_sleep+0x104>)
   10a7a:	f001 fddb 	bl	12634 <assert_post_action>

	K_DEBUG("thread %p for %d ticks\n", _current, ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   10a7e:	b92c      	cbnz	r4, 10a8c <z_tick_sleep+0x38>
	z_impl_k_yield();
   10a80:	f7ff ff3a 	bl	108f8 <z_impl_k_yield>
		return ticks;
	}
#endif

	return 0;
}
   10a84:	4620      	mov	r0, r4
   10a86:	b002      	add	sp, #8
   10a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_time = ticks + z_tick_get_32();
   10a8c:	f005 ff41 	bl	16912 <z_tick_get_32>
	struct k_spinlock local_lock = {};
   10a90:	2300      	movs	r3, #0
	timeout = Z_TIMEOUT_TICKS(ticks);
   10a92:	4626      	mov	r6, r4
   10a94:	17e7      	asrs	r7, r4, #31
	struct k_spinlock local_lock = {};
   10a96:	9301      	str	r3, [sp, #4]
	expected_wakeup_time = ticks + z_tick_get_32();
   10a98:	4404      	add	r4, r0
   10a9a:	f04f 0320 	mov.w	r3, #32
   10a9e:	f3ef 8811 	mrs	r8, BASEPRI
   10aa2:	f383 8811 	msr	BASEPRI, r3
   10aa6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10aaa:	a801      	add	r0, sp, #4
   10aac:	f000 fac2 	bl	11034 <z_spin_lock_valid>
   10ab0:	b968      	cbnz	r0, 10ace <z_tick_sleep+0x7a>
   10ab2:	235c      	movs	r3, #92	; 0x5c
   10ab4:	4a2b      	ldr	r2, [pc, #172]	; (10b64 <z_tick_sleep+0x110>)
   10ab6:	492c      	ldr	r1, [pc, #176]	; (10b68 <z_tick_sleep+0x114>)
   10ab8:	4828      	ldr	r0, [pc, #160]	; (10b5c <z_tick_sleep+0x108>)
   10aba:	f001 fb25 	bl	12108 <printk>
   10abe:	482b      	ldr	r0, [pc, #172]	; (10b6c <z_tick_sleep+0x118>)
   10ac0:	a901      	add	r1, sp, #4
   10ac2:	f001 fb21 	bl	12108 <printk>
   10ac6:	215c      	movs	r1, #92	; 0x5c
   10ac8:	4826      	ldr	r0, [pc, #152]	; (10b64 <z_tick_sleep+0x110>)
   10aca:	f001 fdb3 	bl	12634 <assert_post_action>
	pending_current = _current;
   10ace:	4d28      	ldr	r5, [pc, #160]	; (10b70 <z_tick_sleep+0x11c>)
	z_spin_lock_set_owner(l);
   10ad0:	a801      	add	r0, sp, #4
   10ad2:	f000 facb 	bl	1106c <z_spin_lock_set_owner>
   10ad6:	68a8      	ldr	r0, [r5, #8]
   10ad8:	4b26      	ldr	r3, [pc, #152]	; (10b74 <z_tick_sleep+0x120>)
   10ada:	6018      	str	r0, [r3, #0]
	z_remove_thread_from_ready_q(_current);
   10adc:	f7ff fcc2 	bl	10464 <z_remove_thread_from_ready_q>
	z_add_thread_timeout(_current, timeout);
   10ae0:	68a8      	ldr	r0, [r5, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   10ae2:	4632      	mov	r2, r6
   10ae4:	463b      	mov	r3, r7
   10ae6:	3018      	adds	r0, #24
   10ae8:	4923      	ldr	r1, [pc, #140]	; (10b78 <z_tick_sleep+0x124>)
   10aea:	f000 fc01 	bl	112f0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   10aee:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10af0:	a801      	add	r0, sp, #4
	thread->base.thread_state |= _THREAD_SUSPENDED;
   10af2:	7b53      	ldrb	r3, [r2, #13]
   10af4:	f043 0310 	orr.w	r3, r3, #16
   10af8:	7353      	strb	r3, [r2, #13]
   10afa:	f000 faa9 	bl	11050 <z_spin_unlock_valid>
   10afe:	b968      	cbnz	r0, 10b1c <z_tick_sleep+0xc8>
   10b00:	239b      	movs	r3, #155	; 0x9b
   10b02:	4a18      	ldr	r2, [pc, #96]	; (10b64 <z_tick_sleep+0x110>)
   10b04:	491d      	ldr	r1, [pc, #116]	; (10b7c <z_tick_sleep+0x128>)
   10b06:	4815      	ldr	r0, [pc, #84]	; (10b5c <z_tick_sleep+0x108>)
   10b08:	f001 fafe 	bl	12108 <printk>
   10b0c:	481c      	ldr	r0, [pc, #112]	; (10b80 <z_tick_sleep+0x12c>)
   10b0e:	a901      	add	r1, sp, #4
   10b10:	f001 fafa 	bl	12108 <printk>
   10b14:	219b      	movs	r1, #155	; 0x9b
   10b16:	4813      	ldr	r0, [pc, #76]	; (10b64 <z_tick_sleep+0x110>)
   10b18:	f001 fd8c 	bl	12634 <assert_post_action>
   10b1c:	4640      	mov	r0, r8
   10b1e:	f7f3 f85d 	bl	3bdc <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   10b22:	68ab      	ldr	r3, [r5, #8]
   10b24:	7b5b      	ldrb	r3, [r3, #13]
   10b26:	06db      	lsls	r3, r3, #27
   10b28:	d50e      	bpl.n	10b48 <z_tick_sleep+0xf4>
   10b2a:	4916      	ldr	r1, [pc, #88]	; (10b84 <z_tick_sleep+0x130>)
   10b2c:	f240 43a3 	movw	r3, #1187	; 0x4a3
   10b30:	4a09      	ldr	r2, [pc, #36]	; (10b58 <z_tick_sleep+0x104>)
   10b32:	480a      	ldr	r0, [pc, #40]	; (10b5c <z_tick_sleep+0x108>)
   10b34:	f001 fae8 	bl	12108 <printk>
   10b38:	4809      	ldr	r0, [pc, #36]	; (10b60 <z_tick_sleep+0x10c>)
   10b3a:	f001 fae5 	bl	12108 <printk>
   10b3e:	f240 41a3 	movw	r1, #1187	; 0x4a3
   10b42:	4805      	ldr	r0, [pc, #20]	; (10b58 <z_tick_sleep+0x104>)
   10b44:	f001 fd76 	bl	12634 <assert_post_action>
	ticks = expected_wakeup_time - z_tick_get_32();
   10b48:	f005 fee3 	bl	16912 <z_tick_get_32>
   10b4c:	1a24      	subs	r4, r4, r0
   10b4e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   10b52:	e797      	b.n	10a84 <z_tick_sleep+0x30>
   10b54:	0001b95d 	.word	0x0001b95d
   10b58:	0001b99f 	.word	0x0001b99f
   10b5c:	00017d82 	.word	0x00017d82
   10b60:	0001b120 	.word	0x0001b120
   10b64:	0001820d 	.word	0x0001820d
   10b68:	00018233 	.word	0x00018233
   10b6c:	00018248 	.word	0x00018248
   10b70:	20001d88 	.word	0x20001d88
   10b74:	20001db8 	.word	0x20001db8
   10b78:	0000ff29 	.word	0x0000ff29
   10b7c:	00018260 	.word	0x00018260
   10b80:	00018277 	.word	0x00018277
   10b84:	0001ba29 	.word	0x0001ba29

00010b88 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(k_timeout_t timeout)
{
   10b88:	b538      	push	{r3, r4, r5, lr}
   10b8a:	4604      	mov	r4, r0
   10b8c:	460d      	mov	r5, r1
   10b8e:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   10b92:	b173      	cbz	r3, 10bb2 <z_impl_k_sleep+0x2a>
   10b94:	4912      	ldr	r1, [pc, #72]	; (10be0 <z_impl_k_sleep+0x58>)
   10b96:	f240 43b2 	movw	r3, #1202	; 0x4b2
   10b9a:	4a12      	ldr	r2, [pc, #72]	; (10be4 <z_impl_k_sleep+0x5c>)
   10b9c:	4812      	ldr	r0, [pc, #72]	; (10be8 <z_impl_k_sleep+0x60>)
   10b9e:	f001 fab3 	bl	12108 <printk>
   10ba2:	4812      	ldr	r0, [pc, #72]	; (10bec <z_impl_k_sleep+0x64>)
   10ba4:	f001 fab0 	bl	12108 <printk>
   10ba8:	f240 41b2 	movw	r1, #1202	; 0x4b2
   10bac:	480d      	ldr	r0, [pc, #52]	; (10be4 <z_impl_k_sleep+0x5c>)
   10bae:	f001 fd41 	bl	12634 <assert_post_action>

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   10bb2:	3501      	adds	r5, #1
   10bb4:	bf08      	it	eq
   10bb6:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   10bba:	d106      	bne.n	10bca <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
   10bbc:	4b0c      	ldr	r3, [pc, #48]	; (10bf0 <z_impl_k_sleep+0x68>)
   10bbe:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   10bc0:	f7ff fb32 	bl	10228 <z_impl_k_thread_suspend>
		return (s32_t) K_TICKS_FOREVER;
   10bc4:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
   10bc8:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   10bca:	4620      	mov	r0, r4
   10bcc:	f7ff ff42 	bl	10a54 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   10bd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   10bd4:	fb80 3403 	smull	r3, r4, r0, r3
   10bd8:	0bd8      	lsrs	r0, r3, #15
   10bda:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   10bde:	e7f3      	b.n	10bc8 <z_impl_k_sleep+0x40>
   10be0:	0001b95d 	.word	0x0001b95d
   10be4:	0001b99f 	.word	0x0001b99f
   10be8:	00017d82 	.word	0x00017d82
   10bec:	0001b120 	.word	0x0001b120
   10bf0:	20001d88 	.word	0x20001d88

00010bf4 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   10bf4:	4b01      	ldr	r3, [pc, #4]	; (10bfc <z_impl_k_current_get+0x8>)
   10bf6:	6898      	ldr	r0, [r3, #8]
   10bf8:	4770      	bx	lr
   10bfa:	bf00      	nop
   10bfc:	20001d88 	.word	0x20001d88

00010c00 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   10c00:	b538      	push	{r3, r4, r5, lr}
   10c02:	4604      	mov	r4, r0
   10c04:	f04f 0320 	mov.w	r3, #32
   10c08:	f3ef 8511 	mrs	r5, BASEPRI
   10c0c:	f383 8811 	msr	BASEPRI, r3
   10c10:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10c14:	4817      	ldr	r0, [pc, #92]	; (10c74 <z_impl_k_sem_give+0x74>)
   10c16:	f000 fa0d 	bl	11034 <z_spin_lock_valid>
   10c1a:	b968      	cbnz	r0, 10c38 <z_impl_k_sem_give+0x38>
   10c1c:	235c      	movs	r3, #92	; 0x5c
   10c1e:	4a16      	ldr	r2, [pc, #88]	; (10c78 <z_impl_k_sem_give+0x78>)
   10c20:	4916      	ldr	r1, [pc, #88]	; (10c7c <z_impl_k_sem_give+0x7c>)
   10c22:	4817      	ldr	r0, [pc, #92]	; (10c80 <z_impl_k_sem_give+0x80>)
   10c24:	f001 fa70 	bl	12108 <printk>
   10c28:	4912      	ldr	r1, [pc, #72]	; (10c74 <z_impl_k_sem_give+0x74>)
   10c2a:	4816      	ldr	r0, [pc, #88]	; (10c84 <z_impl_k_sem_give+0x84>)
   10c2c:	f001 fa6c 	bl	12108 <printk>
   10c30:	215c      	movs	r1, #92	; 0x5c
   10c32:	4811      	ldr	r0, [pc, #68]	; (10c78 <z_impl_k_sem_give+0x78>)
   10c34:	f001 fcfe 	bl	12634 <assert_post_action>
	z_spin_lock_set_owner(l);
   10c38:	480e      	ldr	r0, [pc, #56]	; (10c74 <z_impl_k_sem_give+0x74>)
   10c3a:	f000 fa17 	bl	1106c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   10c3e:	4620      	mov	r0, r4
   10c40:	f7ff fdbe 	bl	107c0 <z_unpend_first_thread>

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);

	if (thread != NULL) {
   10c44:	b148      	cbz	r0, 10c5a <z_impl_k_sem_give+0x5a>
   10c46:	2200      	movs	r2, #0
   10c48:	6702      	str	r2, [r0, #112]	; 0x70
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   10c4a:	f7ff f925 	bl	fe98 <z_ready_thread>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   10c4e:	4629      	mov	r1, r5
}
   10c50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   10c54:	4807      	ldr	r0, [pc, #28]	; (10c74 <z_impl_k_sem_give+0x74>)
   10c56:	f7fe bef9 	b.w	fa4c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   10c5a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   10c5e:	429a      	cmp	r2, r3
   10c60:	bf18      	it	ne
   10c62:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   10c64:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   10c66:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   10c68:	f104 0010 	add.w	r0, r4, #16
   10c6c:	f005 fecc 	bl	16a08 <z_handle_obj_poll_events>
}
   10c70:	e7ed      	b.n	10c4e <z_impl_k_sem_give+0x4e>
   10c72:	bf00      	nop
   10c74:	20001dc8 	.word	0x20001dc8
   10c78:	0001820d 	.word	0x0001820d
   10c7c:	00018233 	.word	0x00018233
   10c80:	00017d82 	.word	0x00017d82
   10c84:	00018248 	.word	0x00018248

00010c88 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   10c88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10c8a:	4604      	mov	r4, r0
   10c8c:	4616      	mov	r6, r2
   10c8e:	461f      	mov	r7, r3
   10c90:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   10c94:	b17b      	cbz	r3, 10cb6 <z_impl_k_sem_take+0x2e>
   10c96:	ea56 0307 	orrs.w	r3, r6, r7
   10c9a:	d00c      	beq.n	10cb6 <z_impl_k_sem_take+0x2e>
   10c9c:	4935      	ldr	r1, [pc, #212]	; (10d74 <z_impl_k_sem_take+0xec>)
   10c9e:	238c      	movs	r3, #140	; 0x8c
   10ca0:	4a35      	ldr	r2, [pc, #212]	; (10d78 <z_impl_k_sem_take+0xf0>)
   10ca2:	4836      	ldr	r0, [pc, #216]	; (10d7c <z_impl_k_sem_take+0xf4>)
   10ca4:	f001 fa30 	bl	12108 <printk>
   10ca8:	4835      	ldr	r0, [pc, #212]	; (10d80 <z_impl_k_sem_take+0xf8>)
   10caa:	f001 fa2d 	bl	12108 <printk>
   10cae:	218c      	movs	r1, #140	; 0x8c
   10cb0:	4831      	ldr	r0, [pc, #196]	; (10d78 <z_impl_k_sem_take+0xf0>)
   10cb2:	f001 fcbf 	bl	12634 <assert_post_action>
   10cb6:	f04f 0320 	mov.w	r3, #32
   10cba:	f3ef 8511 	mrs	r5, BASEPRI
   10cbe:	f383 8811 	msr	BASEPRI, r3
   10cc2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10cc6:	482f      	ldr	r0, [pc, #188]	; (10d84 <z_impl_k_sem_take+0xfc>)
   10cc8:	f000 f9b4 	bl	11034 <z_spin_lock_valid>
   10ccc:	b968      	cbnz	r0, 10cea <z_impl_k_sem_take+0x62>
   10cce:	235c      	movs	r3, #92	; 0x5c
   10cd0:	4a2d      	ldr	r2, [pc, #180]	; (10d88 <z_impl_k_sem_take+0x100>)
   10cd2:	492e      	ldr	r1, [pc, #184]	; (10d8c <z_impl_k_sem_take+0x104>)
   10cd4:	4829      	ldr	r0, [pc, #164]	; (10d7c <z_impl_k_sem_take+0xf4>)
   10cd6:	f001 fa17 	bl	12108 <printk>
   10cda:	492a      	ldr	r1, [pc, #168]	; (10d84 <z_impl_k_sem_take+0xfc>)
   10cdc:	482c      	ldr	r0, [pc, #176]	; (10d90 <z_impl_k_sem_take+0x108>)
   10cde:	f001 fa13 	bl	12108 <printk>
   10ce2:	215c      	movs	r1, #92	; 0x5c
   10ce4:	4828      	ldr	r0, [pc, #160]	; (10d88 <z_impl_k_sem_take+0x100>)
   10ce6:	f001 fca5 	bl	12634 <assert_post_action>
	z_spin_lock_set_owner(l);
   10cea:	4826      	ldr	r0, [pc, #152]	; (10d84 <z_impl_k_sem_take+0xfc>)
   10cec:	f000 f9be 	bl	1106c <z_spin_lock_set_owner>
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   10cf0:	68a3      	ldr	r3, [r4, #8]
   10cf2:	b1d3      	cbz	r3, 10d2a <z_impl_k_sem_take+0xa2>
		sem->count--;
   10cf4:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10cf6:	4823      	ldr	r0, [pc, #140]	; (10d84 <z_impl_k_sem_take+0xfc>)
   10cf8:	60a3      	str	r3, [r4, #8]
   10cfa:	f000 f9a9 	bl	11050 <z_spin_unlock_valid>
   10cfe:	b968      	cbnz	r0, 10d1c <z_impl_k_sem_take+0x94>
   10d00:	2384      	movs	r3, #132	; 0x84
   10d02:	4a21      	ldr	r2, [pc, #132]	; (10d88 <z_impl_k_sem_take+0x100>)
   10d04:	4923      	ldr	r1, [pc, #140]	; (10d94 <z_impl_k_sem_take+0x10c>)
   10d06:	481d      	ldr	r0, [pc, #116]	; (10d7c <z_impl_k_sem_take+0xf4>)
   10d08:	f001 f9fe 	bl	12108 <printk>
   10d0c:	491d      	ldr	r1, [pc, #116]	; (10d84 <z_impl_k_sem_take+0xfc>)
   10d0e:	4822      	ldr	r0, [pc, #136]	; (10d98 <z_impl_k_sem_take+0x110>)
   10d10:	f001 f9fa 	bl	12108 <printk>
   10d14:	2184      	movs	r1, #132	; 0x84
   10d16:	481c      	ldr	r0, [pc, #112]	; (10d88 <z_impl_k_sem_take+0x100>)
   10d18:	f001 fc8c 	bl	12634 <assert_post_action>
	__asm__ volatile(
   10d1c:	f385 8811 	msr	BASEPRI, r5
   10d20:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   10d24:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   10d26:	b003      	add	sp, #12
   10d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   10d2a:	ea56 0307 	orrs.w	r3, r6, r7
   10d2e:	d118      	bne.n	10d62 <z_impl_k_sem_take+0xda>
   10d30:	4814      	ldr	r0, [pc, #80]	; (10d84 <z_impl_k_sem_take+0xfc>)
   10d32:	f000 f98d 	bl	11050 <z_spin_unlock_valid>
   10d36:	b968      	cbnz	r0, 10d54 <z_impl_k_sem_take+0xcc>
   10d38:	2384      	movs	r3, #132	; 0x84
   10d3a:	4a13      	ldr	r2, [pc, #76]	; (10d88 <z_impl_k_sem_take+0x100>)
   10d3c:	4915      	ldr	r1, [pc, #84]	; (10d94 <z_impl_k_sem_take+0x10c>)
   10d3e:	480f      	ldr	r0, [pc, #60]	; (10d7c <z_impl_k_sem_take+0xf4>)
   10d40:	f001 f9e2 	bl	12108 <printk>
   10d44:	490f      	ldr	r1, [pc, #60]	; (10d84 <z_impl_k_sem_take+0xfc>)
   10d46:	4814      	ldr	r0, [pc, #80]	; (10d98 <z_impl_k_sem_take+0x110>)
   10d48:	f001 f9de 	bl	12108 <printk>
   10d4c:	2184      	movs	r1, #132	; 0x84
   10d4e:	480e      	ldr	r0, [pc, #56]	; (10d88 <z_impl_k_sem_take+0x100>)
   10d50:	f001 fc70 	bl	12634 <assert_post_action>
   10d54:	f385 8811 	msr	BASEPRI, r5
   10d58:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   10d5c:	f06f 000f 	mvn.w	r0, #15
   10d60:	e7e1      	b.n	10d26 <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   10d62:	4622      	mov	r2, r4
   10d64:	4629      	mov	r1, r5
   10d66:	e9cd 6700 	strd	r6, r7, [sp]
   10d6a:	4806      	ldr	r0, [pc, #24]	; (10d84 <z_impl_k_sem_take+0xfc>)
   10d6c:	f7ff fc62 	bl	10634 <z_pend_curr>
	return ret;
   10d70:	e7d9      	b.n	10d26 <z_impl_k_sem_take+0x9e>
   10d72:	bf00      	nop
   10d74:	0001ba89 	.word	0x0001ba89
   10d78:	0001ba69 	.word	0x0001ba69
   10d7c:	00017d82 	.word	0x00017d82
   10d80:	0001b120 	.word	0x0001b120
   10d84:	20001dc8 	.word	0x20001dc8
   10d88:	0001820d 	.word	0x0001820d
   10d8c:	00018233 	.word	0x00018233
   10d90:	00018248 	.word	0x00018248
   10d94:	00018260 	.word	0x00018260
   10d98:	00018277 	.word	0x00018277

00010d9c <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   10d9c:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   10d9e:	4c08      	ldr	r4, [pc, #32]	; (10dc0 <k_sys_work_q_init+0x24>)
   10da0:	f04f 33ff 	mov.w	r3, #4294967295
   10da4:	f44f 6200 	mov.w	r2, #2048	; 0x800
   10da8:	4620      	mov	r0, r4
   10daa:	4906      	ldr	r1, [pc, #24]	; (10dc4 <k_sys_work_q_init+0x28>)
   10dac:	f000 f966 	bl	1107c <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   10db0:	4905      	ldr	r1, [pc, #20]	; (10dc8 <k_sys_work_q_init+0x2c>)
   10db2:	f104 001c 	add.w	r0, r4, #28
   10db6:	f005 fd43 	bl	16840 <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   10dba:	2000      	movs	r0, #0
   10dbc:	bd10      	pop	{r4, pc}
   10dbe:	bf00      	nop
   10dc0:	20001dcc 	.word	0x20001dcc
   10dc4:	20003fd8 	.word	0x20003fd8
   10dc8:	0001bad6 	.word	0x0001bad6

00010dcc <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   10dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10dd0:	b086      	sub	sp, #24
   10dd2:	e9dd 6a11 	ldrd	r6, sl, [sp, #68]	; 0x44
	Z_ASSERT_VALID_PRIO(prio, entry);
   10dd6:	2e0f      	cmp	r6, #15
{
   10dd8:	4604      	mov	r4, r0
   10dda:	4688      	mov	r8, r1
   10ddc:	4691      	mov	r9, r2
   10dde:	461f      	mov	r7, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   10de0:	d127      	bne.n	10e32 <z_setup_new_thread+0x66>
   10de2:	4b20      	ldr	r3, [pc, #128]	; (10e64 <z_setup_new_thread+0x98>)
   10de4:	429f      	cmp	r7, r3
   10de6:	d128      	bne.n	10e3a <z_setup_new_thread+0x6e>
	sys_dlist_init(&w->waitq);
   10de8:	f104 0328 	add.w	r3, r4, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   10dec:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
	thread_base->thread_state = (u8_t)initial_state;
   10df0:	2304      	movs	r3, #4

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
   10df2:	2500      	movs	r5, #0
	thread_base->thread_state = (u8_t)initial_state;
   10df4:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   10df6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10df8:	464a      	mov	r2, r9
   10dfa:	9302      	str	r3, [sp, #8]
   10dfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10dfe:	4641      	mov	r1, r8
   10e00:	9301      	str	r3, [sp, #4]
   10e02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10e04:	4620      	mov	r0, r4
   10e06:	9300      	str	r3, [sp, #0]
	node->prev = NULL;
   10e08:	e9c4 5506 	strd	r5, r5, [r4, #24]
   10e0c:	463b      	mov	r3, r7
   10e0e:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	thread_base->user_options = (u8_t)options;
   10e12:	f884 a00c 	strb.w	sl, [r4, #12]
	thread_base->prio = priority;
   10e16:	73a6      	strb	r6, [r4, #14]
	thread_base->sched_locked = 0U;
   10e18:	73e5      	strb	r5, [r4, #15]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   10e1a:	f7f2 ff3b 	bl	3c94 <arch_new_thread>
	if (!_current) {
   10e1e:	4b12      	ldr	r3, [pc, #72]	; (10e68 <z_setup_new_thread+0x9c>)
	new_thread->fn_abort = NULL;
   10e20:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
	if (!_current) {
   10e24:	689b      	ldr	r3, [r3, #8]
   10e26:	b103      	cbz	r3, 10e2a <z_setup_new_thread+0x5e>
	new_thread->resource_pool = _current->resource_pool;
   10e28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   10e2a:	66a3      	str	r3, [r4, #104]	; 0x68
}
   10e2c:	b006      	add	sp, #24
   10e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   10e32:	f106 0310 	add.w	r3, r6, #16
   10e36:	2b1e      	cmp	r3, #30
   10e38:	d9d6      	bls.n	10de8 <z_setup_new_thread+0x1c>
   10e3a:	f44f 73e7 	mov.w	r3, #462	; 0x1ce
   10e3e:	4a0b      	ldr	r2, [pc, #44]	; (10e6c <z_setup_new_thread+0xa0>)
   10e40:	490b      	ldr	r1, [pc, #44]	; (10e70 <z_setup_new_thread+0xa4>)
   10e42:	480c      	ldr	r0, [pc, #48]	; (10e74 <z_setup_new_thread+0xa8>)
   10e44:	f001 f960 	bl	12108 <printk>
   10e48:	4631      	mov	r1, r6
   10e4a:	f06f 030f 	mvn.w	r3, #15
   10e4e:	220e      	movs	r2, #14
   10e50:	4809      	ldr	r0, [pc, #36]	; (10e78 <z_setup_new_thread+0xac>)
   10e52:	f001 f959 	bl	12108 <printk>
   10e56:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
   10e5a:	4804      	ldr	r0, [pc, #16]	; (10e6c <z_setup_new_thread+0xa0>)
   10e5c:	f001 fbea 	bl	12634 <assert_post_action>
   10e60:	e7c2      	b.n	10de8 <z_setup_new_thread+0x1c>
   10e62:	bf00      	nop
   10e64:	0000ecc9 	.word	0x0000ecc9
   10e68:	20001d88 	.word	0x20001d88
   10e6c:	0001badf 	.word	0x0001badf
   10e70:	0001bb02 	.word	0x0001bb02
   10e74:	00017d82 	.word	0x00017d82
   10e78:	0001bb82 	.word	0x0001bb82

00010e7c <z_impl_k_thread_create>:
{
   10e7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10e80:	b087      	sub	sp, #28
   10e82:	4604      	mov	r4, r0
   10e84:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
   10e88:	460d      	mov	r5, r1
   10e8a:	4690      	mov	r8, r2
   10e8c:	4699      	mov	r9, r3
   10e8e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   10e92:	b173      	cbz	r3, 10eb2 <z_impl_k_thread_create+0x36>
   10e94:	491b      	ldr	r1, [pc, #108]	; (10f04 <z_impl_k_thread_create+0x88>)
   10e96:	f240 2343 	movw	r3, #579	; 0x243
   10e9a:	4a1b      	ldr	r2, [pc, #108]	; (10f08 <z_impl_k_thread_create+0x8c>)
   10e9c:	481b      	ldr	r0, [pc, #108]	; (10f0c <z_impl_k_thread_create+0x90>)
   10e9e:	f001 f933 	bl	12108 <printk>
   10ea2:	481b      	ldr	r0, [pc, #108]	; (10f10 <z_impl_k_thread_create+0x94>)
   10ea4:	f001 f930 	bl	12108 <printk>
   10ea8:	f240 2143 	movw	r1, #579	; 0x243
   10eac:	4816      	ldr	r0, [pc, #88]	; (10f08 <z_impl_k_thread_create+0x8c>)
   10eae:	f001 fbc1 	bl	12634 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   10eb2:	2300      	movs	r3, #0
   10eb4:	9305      	str	r3, [sp, #20]
   10eb6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   10eb8:	4642      	mov	r2, r8
   10eba:	9304      	str	r3, [sp, #16]
   10ebc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10ebe:	4629      	mov	r1, r5
   10ec0:	9303      	str	r3, [sp, #12]
   10ec2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10ec4:	4620      	mov	r0, r4
   10ec6:	9302      	str	r3, [sp, #8]
   10ec8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10eca:	9301      	str	r3, [sp, #4]
   10ecc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10ece:	9300      	str	r3, [sp, #0]
   10ed0:	464b      	mov	r3, r9
   10ed2:	f7ff ff7b 	bl	10dcc <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   10ed6:	1c7b      	adds	r3, r7, #1
   10ed8:	bf08      	it	eq
   10eda:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   10ede:	d005      	beq.n	10eec <z_impl_k_thread_create+0x70>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   10ee0:	ea56 0307 	orrs.w	r3, r6, r7
   10ee4:	d106      	bne.n	10ef4 <z_impl_k_thread_create+0x78>
	z_sched_start(thread);
   10ee6:	4620      	mov	r0, r4
   10ee8:	f7ff f882 	bl	fff0 <z_sched_start>
}
   10eec:	4620      	mov	r0, r4
   10eee:	b007      	add	sp, #28
   10ef0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10ef4:	4632      	mov	r2, r6
   10ef6:	463b      	mov	r3, r7
   10ef8:	4906      	ldr	r1, [pc, #24]	; (10f14 <z_impl_k_thread_create+0x98>)
   10efa:	f104 0018 	add.w	r0, r4, #24
   10efe:	f000 f9f7 	bl	112f0 <z_add_timeout>
   10f02:	e7f3      	b.n	10eec <z_impl_k_thread_create+0x70>
   10f04:	0001b95d 	.word	0x0001b95d
   10f08:	0001badf 	.word	0x0001badf
   10f0c:	00017d82 	.word	0x00017d82
   10f10:	0001bbb3 	.word	0x0001bbb3
   10f14:	0000ff29 	.word	0x0000ff29

00010f18 <z_init_static_threads>:
{
   10f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   10f1c:	f8df 9110 	ldr.w	r9, [pc, #272]	; 11030 <z_init_static_threads+0x118>
   10f20:	4d3d      	ldr	r5, [pc, #244]	; (11018 <z_init_static_threads+0x100>)
   10f22:	46c8      	mov	r8, r9
   10f24:	f8df a100 	ldr.w	sl, [pc, #256]	; 11028 <z_init_static_threads+0x110>
{
   10f28:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   10f2a:	454d      	cmp	r5, r9
   10f2c:	d90e      	bls.n	10f4c <z_init_static_threads+0x34>
   10f2e:	493b      	ldr	r1, [pc, #236]	; (1101c <z_init_static_threads+0x104>)
   10f30:	f44f 732a 	mov.w	r3, #680	; 0x2a8
   10f34:	4652      	mov	r2, sl
   10f36:	483a      	ldr	r0, [pc, #232]	; (11020 <z_init_static_threads+0x108>)
   10f38:	f001 f8e6 	bl	12108 <printk>
   10f3c:	4839      	ldr	r0, [pc, #228]	; (11024 <z_init_static_threads+0x10c>)
   10f3e:	f001 f8e3 	bl	12108 <printk>
   10f42:	f44f 712a 	mov.w	r1, #680	; 0x2a8
   10f46:	4650      	mov	r0, sl
   10f48:	f001 fb74 	bl	12634 <assert_post_action>
   10f4c:	4545      	cmp	r5, r8
   10f4e:	f105 0430 	add.w	r4, r5, #48	; 0x30
   10f52:	d31f      	bcc.n	10f94 <z_init_static_threads+0x7c>
	k_sched_lock();
   10f54:	f7fe fdb6 	bl	fac4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   10f58:	4c2f      	ldr	r4, [pc, #188]	; (11018 <z_init_static_threads+0x100>)
   10f5a:	4d33      	ldr	r5, [pc, #204]	; (11028 <z_init_static_threads+0x110>)
   10f5c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 1101c <z_init_static_threads+0x104>
   10f60:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 11020 <z_init_static_threads+0x108>
   10f64:	4544      	cmp	r4, r8
   10f66:	d90e      	bls.n	10f86 <z_init_static_threads+0x6e>
   10f68:	4651      	mov	r1, sl
   10f6a:	f240 23c7 	movw	r3, #711	; 0x2c7
   10f6e:	462a      	mov	r2, r5
   10f70:	4658      	mov	r0, fp
   10f72:	f001 f8c9 	bl	12108 <printk>
   10f76:	482b      	ldr	r0, [pc, #172]	; (11024 <z_init_static_threads+0x10c>)
   10f78:	f001 f8c6 	bl	12108 <printk>
   10f7c:	f240 21c7 	movw	r1, #711	; 0x2c7
   10f80:	4628      	mov	r0, r5
   10f82:	f001 fb57 	bl	12634 <assert_post_action>
   10f86:	4544      	cmp	r4, r8
   10f88:	d321      	bcc.n	10fce <z_init_static_threads+0xb6>
}
   10f8a:	b007      	add	sp, #28
   10f8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
   10f90:	f7fe beb8 	b.w	fd04 <k_sched_unlock>
		z_setup_new_thread(
   10f94:	f854 3c04 	ldr.w	r3, [r4, #-4]
   10f98:	9305      	str	r3, [sp, #20]
   10f9a:	f854 3c10 	ldr.w	r3, [r4, #-16]
   10f9e:	9304      	str	r3, [sp, #16]
   10fa0:	f854 3c14 	ldr.w	r3, [r4, #-20]
   10fa4:	9303      	str	r3, [sp, #12]
   10fa6:	f854 3c18 	ldr.w	r3, [r4, #-24]
   10faa:	9302      	str	r3, [sp, #8]
   10fac:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   10fb0:	9301      	str	r3, [sp, #4]
   10fb2:	f854 3c20 	ldr.w	r3, [r4, #-32]
   10fb6:	9300      	str	r3, [sp, #0]
   10fb8:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   10fbc:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   10fc0:	f7ff ff04 	bl	10dcc <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   10fc4:	f854 3c30 	ldr.w	r3, [r4, #-48]
   10fc8:	655d      	str	r5, [r3, #84]	; 0x54
   10fca:	4625      	mov	r5, r4
   10fcc:	e7ad      	b.n	10f2a <z_init_static_threads+0x12>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   10fce:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10fd0:	1c5a      	adds	r2, r3, #1
   10fd2:	d017      	beq.n	11004 <z_init_static_threads+0xec>
			return (u32_t)((t * to_hz + off) / from_hz);
   10fd4:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   10fd8:	f240 30e7 	movw	r0, #999	; 0x3e7
   10fdc:	2100      	movs	r1, #0
					    K_MSEC(thread_data->init_delay));
   10fde:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   10fe2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10fe6:	2300      	movs	r3, #0
   10fe8:	fbce 010c 	smlal	r0, r1, lr, ip
   10fec:	f7ef f8b4 	bl	158 <__aeabi_uldivmod>
   10ff0:	2700      	movs	r7, #0
   10ff2:	4606      	mov	r6, r0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   10ff4:	ea56 0307 	orrs.w	r3, r6, r7
			schedule_new_thread(thread_data->init_thread,
   10ff8:	f8d4 9000 	ldr.w	r9, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   10ffc:	d104      	bne.n	11008 <z_init_static_threads+0xf0>
	z_sched_start(thread);
   10ffe:	4648      	mov	r0, r9
   11000:	f7fe fff6 	bl	fff0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   11004:	3430      	adds	r4, #48	; 0x30
   11006:	e7ad      	b.n	10f64 <z_init_static_threads+0x4c>
   11008:	4602      	mov	r2, r0
   1100a:	463b      	mov	r3, r7
   1100c:	4907      	ldr	r1, [pc, #28]	; (1102c <z_init_static_threads+0x114>)
   1100e:	f109 0018 	add.w	r0, r9, #24
   11012:	f000 f96d 	bl	112f0 <z_add_timeout>
   11016:	e7f5      	b.n	11004 <z_init_static_threads+0xec>
   11018:	200003c0 	.word	0x200003c0
   1101c:	0001bbd8 	.word	0x0001bbd8
   11020:	00017d82 	.word	0x00017d82
   11024:	00017d9f 	.word	0x00017d9f
   11028:	0001badf 	.word	0x0001badf
   1102c:	0000ff29 	.word	0x0000ff29
   11030:	200003c0 	.word	0x200003c0

00011034 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   11034:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   11036:	b138      	cbz	r0, 11048 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3) == _current_cpu->id) {
   11038:	4b04      	ldr	r3, [pc, #16]	; (1104c <z_spin_lock_valid+0x18>)
   1103a:	f000 0003 	and.w	r0, r0, #3
   1103e:	7d1b      	ldrb	r3, [r3, #20]
   11040:	1ac0      	subs	r0, r0, r3
   11042:	bf18      	it	ne
   11044:	2001      	movne	r0, #1
   11046:	4770      	bx	lr
			return false;
		}
	}
	return true;
   11048:	2001      	movs	r0, #1
}
   1104a:	4770      	bx	lr
   1104c:	20001d88 	.word	0x20001d88

00011050 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   11050:	4905      	ldr	r1, [pc, #20]	; (11068 <z_spin_unlock_valid+0x18>)
{
   11052:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   11054:	688a      	ldr	r2, [r1, #8]
   11056:	7d08      	ldrb	r0, [r1, #20]
   11058:	6819      	ldr	r1, [r3, #0]
   1105a:	4302      	orrs	r2, r0
   1105c:	2000      	movs	r0, #0
   1105e:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   11060:	bf04      	itt	eq
   11062:	6018      	streq	r0, [r3, #0]
	return true;
   11064:	2001      	moveq	r0, #1
}
   11066:	4770      	bx	lr
   11068:	20001d88 	.word	0x20001d88

0001106c <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   1106c:	4a02      	ldr	r2, [pc, #8]	; (11078 <z_spin_lock_set_owner+0xc>)
   1106e:	7d11      	ldrb	r1, [r2, #20]
   11070:	6893      	ldr	r3, [r2, #8]
   11072:	430b      	orrs	r3, r1
   11074:	6003      	str	r3, [r0, #0]
}
   11076:	4770      	bx	lr
   11078:	20001d88 	.word	0x20001d88

0001107c <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   1107c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11080:	4604      	mov	r4, r0
   11082:	b088      	sub	sp, #32
   11084:	460d      	mov	r5, r1
   11086:	4616      	mov	r6, r2
   11088:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
   1108a:	f005 fb71 	bl	16770 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   1108e:	f104 081c 	add.w	r8, r4, #28
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   11092:	2200      	movs	r2, #0
   11094:	2300      	movs	r3, #0
   11096:	e9cd 7203 	strd	r7, r2, [sp, #12]
   1109a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1109e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   110a2:	4629      	mov	r1, r5
   110a4:	4632      	mov	r2, r6
   110a6:	4640      	mov	r0, r8
   110a8:	4b05      	ldr	r3, [pc, #20]	; (110c0 <k_work_q_start+0x44>)
   110aa:	9400      	str	r4, [sp, #0]
   110ac:	f7ff fee6 	bl	10e7c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   110b0:	4640      	mov	r0, r8
   110b2:	4904      	ldr	r1, [pc, #16]	; (110c4 <k_work_q_start+0x48>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   110b4:	b008      	add	sp, #32
   110b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   110ba:	f005 bbc1 	b.w	16840 <z_impl_k_thread_name_set>
   110be:	bf00      	nop
   110c0:	00012151 	.word	0x00012151
   110c4:	0001bc05 	.word	0x0001bc05

000110c8 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   110c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   110cc:	4680      	mov	r8, r0
   110ce:	460d      	mov	r5, r1
   110d0:	4616      	mov	r6, r2
   110d2:	461f      	mov	r7, r3
	__asm__ volatile(
   110d4:	f04f 0320 	mov.w	r3, #32
   110d8:	f3ef 8911 	mrs	r9, BASEPRI
   110dc:	f383 8811 	msr	BASEPRI, r3
   110e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   110e4:	4835      	ldr	r0, [pc, #212]	; (111bc <k_delayed_work_submit_to_queue+0xf4>)
   110e6:	f7ff ffa5 	bl	11034 <z_spin_lock_valid>
   110ea:	b968      	cbnz	r0, 11108 <k_delayed_work_submit_to_queue+0x40>
   110ec:	235c      	movs	r3, #92	; 0x5c
   110ee:	4a34      	ldr	r2, [pc, #208]	; (111c0 <k_delayed_work_submit_to_queue+0xf8>)
   110f0:	4934      	ldr	r1, [pc, #208]	; (111c4 <k_delayed_work_submit_to_queue+0xfc>)
   110f2:	4835      	ldr	r0, [pc, #212]	; (111c8 <k_delayed_work_submit_to_queue+0x100>)
   110f4:	f001 f808 	bl	12108 <printk>
   110f8:	4930      	ldr	r1, [pc, #192]	; (111bc <k_delayed_work_submit_to_queue+0xf4>)
   110fa:	4834      	ldr	r0, [pc, #208]	; (111cc <k_delayed_work_submit_to_queue+0x104>)
   110fc:	f001 f804 	bl	12108 <printk>
   11100:	215c      	movs	r1, #92	; 0x5c
   11102:	482f      	ldr	r0, [pc, #188]	; (111c0 <k_delayed_work_submit_to_queue+0xf8>)
   11104:	f001 fa96 	bl	12634 <assert_post_action>
	z_spin_lock_set_owner(l);
   11108:	482c      	ldr	r0, [pc, #176]	; (111bc <k_delayed_work_submit_to_queue+0xf4>)
   1110a:	f7ff ffaf 	bl	1106c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   1110e:	69eb      	ldr	r3, [r5, #28]
   11110:	b30b      	cbz	r3, 11156 <k_delayed_work_submit_to_queue+0x8e>
   11112:	4543      	cmp	r3, r8
   11114:	d14e      	bne.n	111b4 <k_delayed_work_submit_to_queue+0xec>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   11116:	4628      	mov	r0, r5
   11118:	f005 fbb0 	bl	1687c <work_cancel>
		/* -EALREADY indicates the work has already completed so this
		 * is likely a recurring work.
		 */
		if (err == -EALREADY) {
   1111c:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
   11120:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   11122:	d01b      	beq.n	1115c <k_delayed_work_submit_to_queue+0x94>
			err = 0;
		} else if (err < 0) {
   11124:	2800      	cmp	r0, #0
   11126:	da1a      	bge.n	1115e <k_delayed_work_submit_to_queue+0x96>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11128:	4824      	ldr	r0, [pc, #144]	; (111bc <k_delayed_work_submit_to_queue+0xf4>)
   1112a:	f7ff ff91 	bl	11050 <z_spin_unlock_valid>
   1112e:	b968      	cbnz	r0, 1114c <k_delayed_work_submit_to_queue+0x84>
   11130:	2384      	movs	r3, #132	; 0x84
   11132:	4a23      	ldr	r2, [pc, #140]	; (111c0 <k_delayed_work_submit_to_queue+0xf8>)
   11134:	4926      	ldr	r1, [pc, #152]	; (111d0 <k_delayed_work_submit_to_queue+0x108>)
   11136:	4824      	ldr	r0, [pc, #144]	; (111c8 <k_delayed_work_submit_to_queue+0x100>)
   11138:	f000 ffe6 	bl	12108 <printk>
   1113c:	491f      	ldr	r1, [pc, #124]	; (111bc <k_delayed_work_submit_to_queue+0xf4>)
   1113e:	4825      	ldr	r0, [pc, #148]	; (111d4 <k_delayed_work_submit_to_queue+0x10c>)
   11140:	f000 ffe2 	bl	12108 <printk>
   11144:	2184      	movs	r1, #132	; 0x84
   11146:	481e      	ldr	r0, [pc, #120]	; (111c0 <k_delayed_work_submit_to_queue+0xf8>)
   11148:	f001 fa74 	bl	12634 <assert_post_action>
	__asm__ volatile(
   1114c:	f389 8811 	msr	BASEPRI, r9
   11150:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   11154:	e023      	b.n	1119e <k_delayed_work_submit_to_queue+0xd6>
	if (work->work_q == work_q) {
   11156:	f1b8 0f00 	cmp.w	r8, #0
   1115a:	d0dc      	beq.n	11116 <k_delayed_work_submit_to_queue+0x4e>
	int err = 0;
   1115c:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1115e:	ea56 0307 	orrs.w	r3, r6, r7
	work->work_q = work_q;
   11162:	f8c5 801c 	str.w	r8, [r5, #28]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   11166:	d11d      	bne.n	111a4 <k_delayed_work_submit_to_queue+0xdc>
   11168:	4814      	ldr	r0, [pc, #80]	; (111bc <k_delayed_work_submit_to_queue+0xf4>)
   1116a:	f7ff ff71 	bl	11050 <z_spin_unlock_valid>
   1116e:	b968      	cbnz	r0, 1118c <k_delayed_work_submit_to_queue+0xc4>
   11170:	2384      	movs	r3, #132	; 0x84
   11172:	4a13      	ldr	r2, [pc, #76]	; (111c0 <k_delayed_work_submit_to_queue+0xf8>)
   11174:	4916      	ldr	r1, [pc, #88]	; (111d0 <k_delayed_work_submit_to_queue+0x108>)
   11176:	4814      	ldr	r0, [pc, #80]	; (111c8 <k_delayed_work_submit_to_queue+0x100>)
   11178:	f000 ffc6 	bl	12108 <printk>
   1117c:	490f      	ldr	r1, [pc, #60]	; (111bc <k_delayed_work_submit_to_queue+0xf4>)
   1117e:	4815      	ldr	r0, [pc, #84]	; (111d4 <k_delayed_work_submit_to_queue+0x10c>)
   11180:	f000 ffc2 	bl	12108 <printk>
   11184:	2184      	movs	r1, #132	; 0x84
   11186:	480e      	ldr	r0, [pc, #56]	; (111c0 <k_delayed_work_submit_to_queue+0xf8>)
   11188:	f001 fa54 	bl	12634 <assert_post_action>
   1118c:	f389 8811 	msr	BASEPRI, r9
   11190:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   11194:	4629      	mov	r1, r5
   11196:	4640      	mov	r0, r8
   11198:	f005 fb57 	bl	1684a <k_work_submit_to_queue>
		return 0;
   1119c:	2400      	movs	r4, #0
}
   1119e:	4620      	mov	r0, r4
   111a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   111a4:	4632      	mov	r2, r6
   111a6:	463b      	mov	r3, r7
   111a8:	490b      	ldr	r1, [pc, #44]	; (111d8 <k_delayed_work_submit_to_queue+0x110>)
   111aa:	f105 000c 	add.w	r0, r5, #12
   111ae:	f000 f89f 	bl	112f0 <z_add_timeout>
   111b2:	e7b9      	b.n	11128 <k_delayed_work_submit_to_queue+0x60>
		err = -EADDRINUSE;
   111b4:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   111b8:	e7b6      	b.n	11128 <k_delayed_work_submit_to_queue+0x60>
   111ba:	bf00      	nop
   111bc:	20001e5c 	.word	0x20001e5c
   111c0:	0001820d 	.word	0x0001820d
   111c4:	00018233 	.word	0x00018233
   111c8:	00017d82 	.word	0x00017d82
   111cc:	00018248 	.word	0x00018248
   111d0:	00018260 	.word	0x00018260
   111d4:	00018277 	.word	0x00018277
   111d8:	00016873 	.word	0x00016873

000111dc <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   111dc:	b538      	push	{r3, r4, r5, lr}
	if (!work->work_q) {
   111de:	69c3      	ldr	r3, [r0, #28]
{
   111e0:	4604      	mov	r4, r0
	if (!work->work_q) {
   111e2:	2b00      	cmp	r3, #0
   111e4:	d038      	beq.n	11258 <k_delayed_work_cancel+0x7c>
	__asm__ volatile(
   111e6:	f04f 0320 	mov.w	r3, #32
   111ea:	f3ef 8511 	mrs	r5, BASEPRI
   111ee:	f383 8811 	msr	BASEPRI, r3
   111f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   111f6:	481a      	ldr	r0, [pc, #104]	; (11260 <k_delayed_work_cancel+0x84>)
   111f8:	f7ff ff1c 	bl	11034 <z_spin_lock_valid>
   111fc:	b968      	cbnz	r0, 1121a <k_delayed_work_cancel+0x3e>
   111fe:	235c      	movs	r3, #92	; 0x5c
   11200:	4a18      	ldr	r2, [pc, #96]	; (11264 <k_delayed_work_cancel+0x88>)
   11202:	4919      	ldr	r1, [pc, #100]	; (11268 <k_delayed_work_cancel+0x8c>)
   11204:	4819      	ldr	r0, [pc, #100]	; (1126c <k_delayed_work_cancel+0x90>)
   11206:	f000 ff7f 	bl	12108 <printk>
   1120a:	4915      	ldr	r1, [pc, #84]	; (11260 <k_delayed_work_cancel+0x84>)
   1120c:	4818      	ldr	r0, [pc, #96]	; (11270 <k_delayed_work_cancel+0x94>)
   1120e:	f000 ff7b 	bl	12108 <printk>
   11212:	215c      	movs	r1, #92	; 0x5c
   11214:	4813      	ldr	r0, [pc, #76]	; (11264 <k_delayed_work_cancel+0x88>)
   11216:	f001 fa0d 	bl	12634 <assert_post_action>
	z_spin_lock_set_owner(l);
   1121a:	4811      	ldr	r0, [pc, #68]	; (11260 <k_delayed_work_cancel+0x84>)
   1121c:	f7ff ff26 	bl	1106c <z_spin_lock_set_owner>
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = work_cancel(work);
   11220:	4620      	mov	r0, r4
   11222:	f005 fb2b 	bl	1687c <work_cancel>
   11226:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11228:	480d      	ldr	r0, [pc, #52]	; (11260 <k_delayed_work_cancel+0x84>)
   1122a:	f7ff ff11 	bl	11050 <z_spin_unlock_valid>
   1122e:	b968      	cbnz	r0, 1124c <k_delayed_work_cancel+0x70>
   11230:	2384      	movs	r3, #132	; 0x84
   11232:	4a0c      	ldr	r2, [pc, #48]	; (11264 <k_delayed_work_cancel+0x88>)
   11234:	490f      	ldr	r1, [pc, #60]	; (11274 <k_delayed_work_cancel+0x98>)
   11236:	480d      	ldr	r0, [pc, #52]	; (1126c <k_delayed_work_cancel+0x90>)
   11238:	f000 ff66 	bl	12108 <printk>
   1123c:	4908      	ldr	r1, [pc, #32]	; (11260 <k_delayed_work_cancel+0x84>)
   1123e:	480e      	ldr	r0, [pc, #56]	; (11278 <k_delayed_work_cancel+0x9c>)
   11240:	f000 ff62 	bl	12108 <printk>
   11244:	2184      	movs	r1, #132	; 0x84
   11246:	4807      	ldr	r0, [pc, #28]	; (11264 <k_delayed_work_cancel+0x88>)
   11248:	f001 f9f4 	bl	12634 <assert_post_action>
	__asm__ volatile(
   1124c:	f385 8811 	msr	BASEPRI, r5
   11250:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   11254:	4620      	mov	r0, r4
   11256:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   11258:	f06f 0415 	mvn.w	r4, #21
   1125c:	e7fa      	b.n	11254 <k_delayed_work_cancel+0x78>
   1125e:	bf00      	nop
   11260:	20001e5c 	.word	0x20001e5c
   11264:	0001820d 	.word	0x0001820d
   11268:	00018233 	.word	0x00018233
   1126c:	00017d82 	.word	0x00017d82
   11270:	00018248 	.word	0x00018248
   11274:	00018260 	.word	0x00018260
   11278:	00018277 	.word	0x00018277

0001127c <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   1127c:	4b03      	ldr	r3, [pc, #12]	; (1128c <elapsed+0x10>)
   1127e:	681b      	ldr	r3, [r3, #0]
   11280:	b90b      	cbnz	r3, 11286 <elapsed+0xa>
   11282:	f7f1 bbbd 	b.w	2a00 <z_clock_elapsed>
}
   11286:	2000      	movs	r0, #0
   11288:	4770      	bx	lr
   1128a:	bf00      	nop
   1128c:	20001e60 	.word	0x20001e60

00011290 <next_timeout>:
	return list->head == list;
   11290:	4b0b      	ldr	r3, [pc, #44]	; (112c0 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   11292:	b510      	push	{r4, lr}
   11294:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11296:	429c      	cmp	r4, r3
   11298:	bf08      	it	eq
   1129a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   1129c:	f7ff ffee 	bl	1127c <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   112a0:	b154      	cbz	r4, 112b8 <next_timeout+0x28>
   112a2:	68a3      	ldr	r3, [r4, #8]
   112a4:	1a18      	subs	r0, r3, r0
   112a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   112aa:	4b06      	ldr	r3, [pc, #24]	; (112c4 <next_timeout+0x34>)
   112ac:	691b      	ldr	r3, [r3, #16]
   112ae:	b113      	cbz	r3, 112b6 <next_timeout+0x26>
   112b0:	4298      	cmp	r0, r3
   112b2:	bfa8      	it	ge
   112b4:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   112b6:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   112b8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   112bc:	e7f5      	b.n	112aa <next_timeout+0x1a>
   112be:	bf00      	nop
   112c0:	200002e4 	.word	0x200002e4
   112c4:	20001d88 	.word	0x20001d88

000112c8 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   112c8:	6803      	ldr	r3, [r0, #0]
   112ca:	b140      	cbz	r0, 112de <remove_timeout+0x16>
   112cc:	4a07      	ldr	r2, [pc, #28]	; (112ec <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   112ce:	6852      	ldr	r2, [r2, #4]
   112d0:	4290      	cmp	r0, r2
   112d2:	d004      	beq.n	112de <remove_timeout+0x16>
	if (next(t) != NULL) {
   112d4:	b11b      	cbz	r3, 112de <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   112d6:	689a      	ldr	r2, [r3, #8]
   112d8:	6881      	ldr	r1, [r0, #8]
   112da:	440a      	add	r2, r1
   112dc:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   112de:	6842      	ldr	r2, [r0, #4]
   112e0:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   112e2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   112e4:	2300      	movs	r3, #0
	node->prev = NULL;
   112e6:	e9c0 3300 	strd	r3, r3, [r0]
}
   112ea:	4770      	bx	lr
   112ec:	200002e4 	.word	0x200002e4

000112f0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   112f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112f4:	9101      	str	r1, [sp, #4]
   112f6:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   112f8:	1c4b      	adds	r3, r1, #1
   112fa:	bf08      	it	eq
   112fc:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   11300:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   11302:	f000 80ad 	beq.w	11460 <z_add_timeout+0x170>
#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   11306:	f06f 0301 	mvn.w	r3, #1
   1130a:	f04f 3bff 	mov.w	fp, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
   1130e:	1c54      	adds	r4, r2, #1
   11310:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   11314:	ebb3 0804 	subs.w	r8, r3, r4
   11318:	eb6b 0905 	sbc.w	r9, fp, r5
   1131c:	f1b8 0f00 	cmp.w	r8, #0
   11320:	f179 0300 	sbcs.w	r3, r9, #0
   11324:	db0f      	blt.n	11346 <z_add_timeout+0x56>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   11326:	f7ff ffa9 	bl	1127c <elapsed>
   1132a:	f06f 0301 	mvn.w	r3, #1
   1132e:	4a52      	ldr	r2, [pc, #328]	; (11478 <z_add_timeout+0x188>)
   11330:	e9d2 1c00 	ldrd	r1, ip, [r2]
   11334:	1a5b      	subs	r3, r3, r1
   11336:	eb6b 020c 	sbc.w	r2, fp, ip
   1133a:	1b1e      	subs	r6, r3, r4
   1133c:	eb62 0705 	sbc.w	r7, r2, r5
   11340:	1a34      	subs	r4, r6, r0
   11342:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   11346:	f8da 3000 	ldr.w	r3, [sl]
   1134a:	b163      	cbz	r3, 11366 <z_add_timeout+0x76>
   1134c:	494b      	ldr	r1, [pc, #300]	; (1147c <z_add_timeout+0x18c>)
   1134e:	2367      	movs	r3, #103	; 0x67
   11350:	4a4b      	ldr	r2, [pc, #300]	; (11480 <z_add_timeout+0x190>)
   11352:	484c      	ldr	r0, [pc, #304]	; (11484 <z_add_timeout+0x194>)
   11354:	f000 fed8 	bl	12108 <printk>
   11358:	484b      	ldr	r0, [pc, #300]	; (11488 <z_add_timeout+0x198>)
   1135a:	f000 fed5 	bl	12108 <printk>
   1135e:	2167      	movs	r1, #103	; 0x67
   11360:	4847      	ldr	r0, [pc, #284]	; (11480 <z_add_timeout+0x190>)
   11362:	f001 f967 	bl	12634 <assert_post_action>
	to->fn = fn;
   11366:	9b01      	ldr	r3, [sp, #4]
	ticks = MAX(1, ticks);
   11368:	2c01      	cmp	r4, #1
	to->fn = fn;
   1136a:	f8ca 300c 	str.w	r3, [sl, #12]
	ticks = MAX(1, ticks);
   1136e:	f175 0300 	sbcs.w	r3, r5, #0
   11372:	bfb8      	it	lt
   11374:	2401      	movlt	r4, #1
	__asm__ volatile(
   11376:	f04f 0320 	mov.w	r3, #32
   1137a:	f3ef 8611 	mrs	r6, BASEPRI
   1137e:	f383 8811 	msr	BASEPRI, r3
   11382:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11386:	4841      	ldr	r0, [pc, #260]	; (1148c <z_add_timeout+0x19c>)
   11388:	f7ff fe54 	bl	11034 <z_spin_lock_valid>
   1138c:	b968      	cbnz	r0, 113aa <z_add_timeout+0xba>
   1138e:	235c      	movs	r3, #92	; 0x5c
   11390:	4a3f      	ldr	r2, [pc, #252]	; (11490 <z_add_timeout+0x1a0>)
   11392:	4940      	ldr	r1, [pc, #256]	; (11494 <z_add_timeout+0x1a4>)
   11394:	483b      	ldr	r0, [pc, #236]	; (11484 <z_add_timeout+0x194>)
   11396:	f000 feb7 	bl	12108 <printk>
   1139a:	493c      	ldr	r1, [pc, #240]	; (1148c <z_add_timeout+0x19c>)
   1139c:	483e      	ldr	r0, [pc, #248]	; (11498 <z_add_timeout+0x1a8>)
   1139e:	f000 feb3 	bl	12108 <printk>
   113a2:	215c      	movs	r1, #92	; 0x5c
   113a4:	483a      	ldr	r0, [pc, #232]	; (11490 <z_add_timeout+0x1a0>)
   113a6:	f001 f945 	bl	12634 <assert_post_action>
	z_spin_lock_set_owner(l);
   113aa:	4838      	ldr	r0, [pc, #224]	; (1148c <z_add_timeout+0x19c>)
   113ac:	f7ff fe5e 	bl	1106c <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   113b0:	f7ff ff64 	bl	1127c <elapsed>
   113b4:	4420      	add	r0, r4
	return list->head == list;
   113b6:	4c39      	ldr	r4, [pc, #228]	; (1149c <z_add_timeout+0x1ac>)
   113b8:	f8ca 0008 	str.w	r0, [sl, #8]
   113bc:	6825      	ldr	r5, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   113be:	42a5      	cmp	r5, r4
   113c0:	d005      	beq.n	113ce <z_add_timeout+0xde>
		for (t = first(); t != NULL; t = next(t)) {
			__ASSERT(t->dticks >= 0, "");
   113c2:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 11480 <z_add_timeout+0x190>
   113c6:	4f36      	ldr	r7, [pc, #216]	; (114a0 <z_add_timeout+0x1b0>)
   113c8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 11484 <z_add_timeout+0x194>
		for (t = first(); t != NULL; t = next(t)) {
   113cc:	b955      	cbnz	r5, 113e4 <z_add_timeout+0xf4>
	node->prev = list->tail;
   113ce:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   113d0:	f8ca 4000 	str.w	r4, [sl]
	node->prev = list->tail;
   113d4:	f8ca 3004 	str.w	r3, [sl, #4]
	list->tail->next = node;
   113d8:	6863      	ldr	r3, [r4, #4]
   113da:	f8c3 a000 	str.w	sl, [r3]
	list->tail = node;
   113de:	f8c4 a004 	str.w	sl, [r4, #4]
}
   113e2:	e01d      	b.n	11420 <z_add_timeout+0x130>
			__ASSERT(t->dticks >= 0, "");
   113e4:	68ab      	ldr	r3, [r5, #8]
   113e6:	2b00      	cmp	r3, #0
   113e8:	da0c      	bge.n	11404 <z_add_timeout+0x114>
   113ea:	4639      	mov	r1, r7
   113ec:	2370      	movs	r3, #112	; 0x70
   113ee:	464a      	mov	r2, r9
   113f0:	4640      	mov	r0, r8
   113f2:	f000 fe89 	bl	12108 <printk>
   113f6:	4824      	ldr	r0, [pc, #144]	; (11488 <z_add_timeout+0x198>)
   113f8:	f000 fe86 	bl	12108 <printk>
   113fc:	2170      	movs	r1, #112	; 0x70
   113fe:	4648      	mov	r0, r9
   11400:	f001 f918 	bl	12634 <assert_post_action>

			if (t->dticks > to->dticks) {
   11404:	68aa      	ldr	r2, [r5, #8]
   11406:	f8da 3008 	ldr.w	r3, [sl, #8]
   1140a:	429a      	cmp	r2, r3
   1140c:	dd2b      	ble.n	11466 <z_add_timeout+0x176>
				t->dticks -= to->dticks;
   1140e:	1ad3      	subs	r3, r2, r3
   11410:	60ab      	str	r3, [r5, #8]
	node->prev = successor->prev;
   11412:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   11414:	e9ca 5300 	strd	r5, r3, [sl]
	successor->prev->next = node;
   11418:	f8c3 a000 	str.w	sl, [r3]
	successor->prev = node;
   1141c:	f8c5 a004 	str.w	sl, [r5, #4]
	return list->head == list;
   11420:	6823      	ldr	r3, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11422:	42a3      	cmp	r3, r4
   11424:	d006      	beq.n	11434 <z_add_timeout+0x144>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   11426:	459a      	cmp	sl, r3
   11428:	d104      	bne.n	11434 <z_add_timeout+0x144>
			z_clock_set_timeout(next_timeout(), false);
   1142a:	f7ff ff31 	bl	11290 <next_timeout>
   1142e:	2100      	movs	r1, #0
   11430:	f7f1 fa82 	bl	2938 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11434:	4815      	ldr	r0, [pc, #84]	; (1148c <z_add_timeout+0x19c>)
   11436:	f7ff fe0b 	bl	11050 <z_spin_unlock_valid>
   1143a:	b968      	cbnz	r0, 11458 <z_add_timeout+0x168>
   1143c:	2384      	movs	r3, #132	; 0x84
   1143e:	4a14      	ldr	r2, [pc, #80]	; (11490 <z_add_timeout+0x1a0>)
   11440:	4918      	ldr	r1, [pc, #96]	; (114a4 <z_add_timeout+0x1b4>)
   11442:	4810      	ldr	r0, [pc, #64]	; (11484 <z_add_timeout+0x194>)
   11444:	f000 fe60 	bl	12108 <printk>
   11448:	4910      	ldr	r1, [pc, #64]	; (1148c <z_add_timeout+0x19c>)
   1144a:	4817      	ldr	r0, [pc, #92]	; (114a8 <z_add_timeout+0x1b8>)
   1144c:	f000 fe5c 	bl	12108 <printk>
   11450:	2184      	movs	r1, #132	; 0x84
   11452:	480f      	ldr	r0, [pc, #60]	; (11490 <z_add_timeout+0x1a0>)
   11454:	f001 f8ee 	bl	12634 <assert_post_action>
	__asm__ volatile(
   11458:	f386 8811 	msr	BASEPRI, r6
   1145c:	f3bf 8f6f 	isb	sy
		}
	}
}
   11460:	b003      	add	sp, #12
   11462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   11466:	1a9b      	subs	r3, r3, r2
   11468:	f8ca 3008 	str.w	r3, [sl, #8]
	return (node == list->tail) ? NULL : node->next;
   1146c:	6863      	ldr	r3, [r4, #4]
   1146e:	429d      	cmp	r5, r3
   11470:	d0ad      	beq.n	113ce <z_add_timeout+0xde>
   11472:	682d      	ldr	r5, [r5, #0]
   11474:	e7aa      	b.n	113cc <z_add_timeout+0xdc>
   11476:	bf00      	nop
   11478:	200007f8 	.word	0x200007f8
   1147c:	0001bc33 	.word	0x0001bc33
   11480:	0001bc0f 	.word	0x0001bc0f
   11484:	00017d82 	.word	0x00017d82
   11488:	0001b120 	.word	0x0001b120
   1148c:	20001e64 	.word	0x20001e64
   11490:	0001820d 	.word	0x0001820d
   11494:	00018233 	.word	0x00018233
   11498:	00018248 	.word	0x00018248
   1149c:	200002e4 	.word	0x200002e4
   114a0:	0001bc53 	.word	0x0001bc53
   114a4:	00018260 	.word	0x00018260
   114a8:	00018277 	.word	0x00018277

000114ac <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   114ac:	b538      	push	{r3, r4, r5, lr}
   114ae:	4604      	mov	r4, r0
	__asm__ volatile(
   114b0:	f04f 0320 	mov.w	r3, #32
   114b4:	f3ef 8511 	mrs	r5, BASEPRI
   114b8:	f383 8811 	msr	BASEPRI, r3
   114bc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   114c0:	481a      	ldr	r0, [pc, #104]	; (1152c <z_abort_timeout+0x80>)
   114c2:	f7ff fdb7 	bl	11034 <z_spin_lock_valid>
   114c6:	b968      	cbnz	r0, 114e4 <z_abort_timeout+0x38>
   114c8:	235c      	movs	r3, #92	; 0x5c
   114ca:	4a19      	ldr	r2, [pc, #100]	; (11530 <z_abort_timeout+0x84>)
   114cc:	4919      	ldr	r1, [pc, #100]	; (11534 <z_abort_timeout+0x88>)
   114ce:	481a      	ldr	r0, [pc, #104]	; (11538 <z_abort_timeout+0x8c>)
   114d0:	f000 fe1a 	bl	12108 <printk>
   114d4:	4915      	ldr	r1, [pc, #84]	; (1152c <z_abort_timeout+0x80>)
   114d6:	4819      	ldr	r0, [pc, #100]	; (1153c <z_abort_timeout+0x90>)
   114d8:	f000 fe16 	bl	12108 <printk>
   114dc:	215c      	movs	r1, #92	; 0x5c
   114de:	4814      	ldr	r0, [pc, #80]	; (11530 <z_abort_timeout+0x84>)
   114e0:	f001 f8a8 	bl	12634 <assert_post_action>
	z_spin_lock_set_owner(l);
   114e4:	4811      	ldr	r0, [pc, #68]	; (1152c <z_abort_timeout+0x80>)
   114e6:	f7ff fdc1 	bl	1106c <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   114ea:	6823      	ldr	r3, [r4, #0]
   114ec:	b1db      	cbz	r3, 11526 <z_abort_timeout+0x7a>
			remove_timeout(to);
   114ee:	4620      	mov	r0, r4
   114f0:	f7ff feea 	bl	112c8 <remove_timeout>
			ret = 0;
   114f4:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   114f6:	480d      	ldr	r0, [pc, #52]	; (1152c <z_abort_timeout+0x80>)
   114f8:	f7ff fdaa 	bl	11050 <z_spin_unlock_valid>
   114fc:	b968      	cbnz	r0, 1151a <z_abort_timeout+0x6e>
   114fe:	2384      	movs	r3, #132	; 0x84
   11500:	4a0b      	ldr	r2, [pc, #44]	; (11530 <z_abort_timeout+0x84>)
   11502:	490f      	ldr	r1, [pc, #60]	; (11540 <z_abort_timeout+0x94>)
   11504:	480c      	ldr	r0, [pc, #48]	; (11538 <z_abort_timeout+0x8c>)
   11506:	f000 fdff 	bl	12108 <printk>
   1150a:	4908      	ldr	r1, [pc, #32]	; (1152c <z_abort_timeout+0x80>)
   1150c:	480d      	ldr	r0, [pc, #52]	; (11544 <z_abort_timeout+0x98>)
   1150e:	f000 fdfb 	bl	12108 <printk>
   11512:	2184      	movs	r1, #132	; 0x84
   11514:	4806      	ldr	r0, [pc, #24]	; (11530 <z_abort_timeout+0x84>)
   11516:	f001 f88d 	bl	12634 <assert_post_action>
	__asm__ volatile(
   1151a:	f385 8811 	msr	BASEPRI, r5
   1151e:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   11522:	4620      	mov	r0, r4
   11524:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   11526:	f06f 0415 	mvn.w	r4, #21
   1152a:	e7e4      	b.n	114f6 <z_abort_timeout+0x4a>
   1152c:	20001e64 	.word	0x20001e64
   11530:	0001820d 	.word	0x0001820d
   11534:	00018233 	.word	0x00018233
   11538:	00017d82 	.word	0x00017d82
   1153c:	00018248 	.word	0x00018248
   11540:	00018260 	.word	0x00018260
   11544:	00018277 	.word	0x00018277

00011548 <z_get_next_timeout_expiry>:

	return ticks;
}

s32_t z_get_next_timeout_expiry(void)
{
   11548:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1154a:	f04f 0320 	mov.w	r3, #32
   1154e:	f3ef 8511 	mrs	r5, BASEPRI
   11552:	f383 8811 	msr	BASEPRI, r3
   11556:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1155a:	4818      	ldr	r0, [pc, #96]	; (115bc <z_get_next_timeout_expiry+0x74>)
   1155c:	f7ff fd6a 	bl	11034 <z_spin_lock_valid>
   11560:	b968      	cbnz	r0, 1157e <z_get_next_timeout_expiry+0x36>
   11562:	235c      	movs	r3, #92	; 0x5c
   11564:	4a16      	ldr	r2, [pc, #88]	; (115c0 <z_get_next_timeout_expiry+0x78>)
   11566:	4917      	ldr	r1, [pc, #92]	; (115c4 <z_get_next_timeout_expiry+0x7c>)
   11568:	4817      	ldr	r0, [pc, #92]	; (115c8 <z_get_next_timeout_expiry+0x80>)
   1156a:	f000 fdcd 	bl	12108 <printk>
   1156e:	4913      	ldr	r1, [pc, #76]	; (115bc <z_get_next_timeout_expiry+0x74>)
   11570:	4816      	ldr	r0, [pc, #88]	; (115cc <z_get_next_timeout_expiry+0x84>)
   11572:	f000 fdc9 	bl	12108 <printk>
   11576:	215c      	movs	r1, #92	; 0x5c
   11578:	4811      	ldr	r0, [pc, #68]	; (115c0 <z_get_next_timeout_expiry+0x78>)
   1157a:	f001 f85b 	bl	12634 <assert_post_action>
	z_spin_lock_set_owner(l);
   1157e:	480f      	ldr	r0, [pc, #60]	; (115bc <z_get_next_timeout_expiry+0x74>)
   11580:	f7ff fd74 	bl	1106c <z_spin_lock_set_owner>
	s32_t ret = (s32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   11584:	f7ff fe84 	bl	11290 <next_timeout>
   11588:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1158a:	480c      	ldr	r0, [pc, #48]	; (115bc <z_get_next_timeout_expiry+0x74>)
   1158c:	f7ff fd60 	bl	11050 <z_spin_unlock_valid>
   11590:	b968      	cbnz	r0, 115ae <z_get_next_timeout_expiry+0x66>
   11592:	2384      	movs	r3, #132	; 0x84
   11594:	4a0a      	ldr	r2, [pc, #40]	; (115c0 <z_get_next_timeout_expiry+0x78>)
   11596:	490e      	ldr	r1, [pc, #56]	; (115d0 <z_get_next_timeout_expiry+0x88>)
   11598:	480b      	ldr	r0, [pc, #44]	; (115c8 <z_get_next_timeout_expiry+0x80>)
   1159a:	f000 fdb5 	bl	12108 <printk>
   1159e:	4907      	ldr	r1, [pc, #28]	; (115bc <z_get_next_timeout_expiry+0x74>)
   115a0:	480c      	ldr	r0, [pc, #48]	; (115d4 <z_get_next_timeout_expiry+0x8c>)
   115a2:	f000 fdb1 	bl	12108 <printk>
   115a6:	2184      	movs	r1, #132	; 0x84
   115a8:	4805      	ldr	r0, [pc, #20]	; (115c0 <z_get_next_timeout_expiry+0x78>)
   115aa:	f001 f843 	bl	12634 <assert_post_action>
	__asm__ volatile(
   115ae:	f385 8811 	msr	BASEPRI, r5
   115b2:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   115b6:	4620      	mov	r0, r4
   115b8:	bd38      	pop	{r3, r4, r5, pc}
   115ba:	bf00      	nop
   115bc:	20001e64 	.word	0x20001e64
   115c0:	0001820d 	.word	0x0001820d
   115c4:	00018233 	.word	0x00018233
   115c8:	00017d82 	.word	0x00017d82
   115cc:	00018248 	.word	0x00018248
   115d0:	00018260 	.word	0x00018260
   115d4:	00018277 	.word	0x00018277

000115d8 <z_set_timeout_expiry>:

void z_set_timeout_expiry(s32_t ticks, bool idle)
{
   115d8:	b570      	push	{r4, r5, r6, lr}
   115da:	4604      	mov	r4, r0
   115dc:	460d      	mov	r5, r1
	__asm__ volatile(
   115de:	f04f 0320 	mov.w	r3, #32
   115e2:	f3ef 8611 	mrs	r6, BASEPRI
   115e6:	f383 8811 	msr	BASEPRI, r3
   115ea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   115ee:	481b      	ldr	r0, [pc, #108]	; (1165c <z_set_timeout_expiry+0x84>)
   115f0:	f7ff fd20 	bl	11034 <z_spin_lock_valid>
   115f4:	b968      	cbnz	r0, 11612 <z_set_timeout_expiry+0x3a>
   115f6:	235c      	movs	r3, #92	; 0x5c
   115f8:	4a19      	ldr	r2, [pc, #100]	; (11660 <z_set_timeout_expiry+0x88>)
   115fa:	491a      	ldr	r1, [pc, #104]	; (11664 <z_set_timeout_expiry+0x8c>)
   115fc:	481a      	ldr	r0, [pc, #104]	; (11668 <z_set_timeout_expiry+0x90>)
   115fe:	f000 fd83 	bl	12108 <printk>
   11602:	4916      	ldr	r1, [pc, #88]	; (1165c <z_set_timeout_expiry+0x84>)
   11604:	4819      	ldr	r0, [pc, #100]	; (1166c <z_set_timeout_expiry+0x94>)
   11606:	f000 fd7f 	bl	12108 <printk>
   1160a:	215c      	movs	r1, #92	; 0x5c
   1160c:	4814      	ldr	r0, [pc, #80]	; (11660 <z_set_timeout_expiry+0x88>)
   1160e:	f001 f811 	bl	12634 <assert_post_action>
	z_spin_lock_set_owner(l);
   11612:	4812      	ldr	r0, [pc, #72]	; (1165c <z_set_timeout_expiry+0x84>)
   11614:	f7ff fd2a 	bl	1106c <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next = next_timeout();
   11618:	f7ff fe3a 	bl	11290 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1161c:	2801      	cmp	r0, #1
   1161e:	dd05      	ble.n	1162c <z_set_timeout_expiry+0x54>
   11620:	42a0      	cmp	r0, r4
   11622:	dd03      	ble.n	1162c <z_set_timeout_expiry+0x54>
			z_clock_set_timeout(ticks, idle);
   11624:	4629      	mov	r1, r5
   11626:	4620      	mov	r0, r4
   11628:	f7f1 f986 	bl	2938 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1162c:	480b      	ldr	r0, [pc, #44]	; (1165c <z_set_timeout_expiry+0x84>)
   1162e:	f7ff fd0f 	bl	11050 <z_spin_unlock_valid>
   11632:	b968      	cbnz	r0, 11650 <z_set_timeout_expiry+0x78>
   11634:	2384      	movs	r3, #132	; 0x84
   11636:	4a0a      	ldr	r2, [pc, #40]	; (11660 <z_set_timeout_expiry+0x88>)
   11638:	490d      	ldr	r1, [pc, #52]	; (11670 <z_set_timeout_expiry+0x98>)
   1163a:	480b      	ldr	r0, [pc, #44]	; (11668 <z_set_timeout_expiry+0x90>)
   1163c:	f000 fd64 	bl	12108 <printk>
   11640:	4906      	ldr	r1, [pc, #24]	; (1165c <z_set_timeout_expiry+0x84>)
   11642:	480c      	ldr	r0, [pc, #48]	; (11674 <z_set_timeout_expiry+0x9c>)
   11644:	f000 fd60 	bl	12108 <printk>
   11648:	2184      	movs	r1, #132	; 0x84
   1164a:	4805      	ldr	r0, [pc, #20]	; (11660 <z_set_timeout_expiry+0x88>)
   1164c:	f000 fff2 	bl	12634 <assert_post_action>
	__asm__ volatile(
   11650:	f386 8811 	msr	BASEPRI, r6
   11654:	f3bf 8f6f 	isb	sy
		}
	}
}
   11658:	bd70      	pop	{r4, r5, r6, pc}
   1165a:	bf00      	nop
   1165c:	20001e64 	.word	0x20001e64
   11660:	0001820d 	.word	0x0001820d
   11664:	00018233 	.word	0x00018233
   11668:	00017d82 	.word	0x00017d82
   1166c:	00018248 	.word	0x00018248
   11670:	00018260 	.word	0x00018260
   11674:	00018277 	.word	0x00018277

00011678 <z_clock_announce>:

void z_clock_announce(s32_t ticks)
{
   11678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1167c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1167e:	f7fe fd9d 	bl	101bc <z_time_slice>
	__asm__ volatile(
   11682:	f04f 0320 	mov.w	r3, #32
   11686:	f3ef 8511 	mrs	r5, BASEPRI
   1168a:	f383 8811 	msr	BASEPRI, r3
   1168e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11692:	4847      	ldr	r0, [pc, #284]	; (117b0 <z_clock_announce+0x138>)
   11694:	f7ff fcce 	bl	11034 <z_spin_lock_valid>
   11698:	b968      	cbnz	r0, 116b6 <z_clock_announce+0x3e>
   1169a:	235c      	movs	r3, #92	; 0x5c
   1169c:	4a45      	ldr	r2, [pc, #276]	; (117b4 <z_clock_announce+0x13c>)
   1169e:	4946      	ldr	r1, [pc, #280]	; (117b8 <z_clock_announce+0x140>)
   116a0:	4846      	ldr	r0, [pc, #280]	; (117bc <z_clock_announce+0x144>)
   116a2:	f000 fd31 	bl	12108 <printk>
   116a6:	4942      	ldr	r1, [pc, #264]	; (117b0 <z_clock_announce+0x138>)
   116a8:	4845      	ldr	r0, [pc, #276]	; (117c0 <z_clock_announce+0x148>)
   116aa:	f000 fd2d 	bl	12108 <printk>
   116ae:	215c      	movs	r1, #92	; 0x5c
   116b0:	4840      	ldr	r0, [pc, #256]	; (117b4 <z_clock_announce+0x13c>)
   116b2:	f000 ffbf 	bl	12634 <assert_post_action>
	z_spin_lock_set_owner(l);
   116b6:	4f43      	ldr	r7, [pc, #268]	; (117c4 <z_clock_announce+0x14c>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   116b8:	4e43      	ldr	r6, [pc, #268]	; (117c8 <z_clock_announce+0x150>)
   116ba:	46b9      	mov	r9, r7
   116bc:	483c      	ldr	r0, [pc, #240]	; (117b0 <z_clock_announce+0x138>)
	return list->head == list;
   116be:	f8df 8114 	ldr.w	r8, [pc, #276]	; 117d4 <z_clock_announce+0x15c>
   116c2:	f7ff fcd3 	bl	1106c <z_spin_lock_set_owner>
   116c6:	6034      	str	r4, [r6, #0]
   116c8:	f8d8 4000 	ldr.w	r4, [r8]
   116cc:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   116ce:	4544      	cmp	r4, r8
   116d0:	e9d7 0100 	ldrd	r0, r1, [r7]
   116d4:	d005      	beq.n	116e2 <z_clock_announce+0x6a>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   116d6:	b124      	cbz	r4, 116e2 <z_clock_announce+0x6a>
   116d8:	68a3      	ldr	r3, [r4, #8]
   116da:	4293      	cmp	r3, r2
   116dc:	dd25      	ble.n	1172a <z_clock_announce+0xb2>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   116de:	1a9b      	subs	r3, r3, r2
   116e0:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   116e2:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   116e4:	1880      	adds	r0, r0, r2
   116e6:	eb41 71e2 	adc.w	r1, r1, r2, asr #31
   116ea:	e9c9 0100 	strd	r0, r1, [r9]
	announce_remaining = 0;
   116ee:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   116f0:	f7ff fdce 	bl	11290 <next_timeout>
   116f4:	4621      	mov	r1, r4
   116f6:	f7f1 f91f 	bl	2938 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   116fa:	482d      	ldr	r0, [pc, #180]	; (117b0 <z_clock_announce+0x138>)
   116fc:	f7ff fca8 	bl	11050 <z_spin_unlock_valid>
   11700:	b968      	cbnz	r0, 1171e <z_clock_announce+0xa6>
   11702:	2384      	movs	r3, #132	; 0x84
   11704:	4a2b      	ldr	r2, [pc, #172]	; (117b4 <z_clock_announce+0x13c>)
   11706:	4931      	ldr	r1, [pc, #196]	; (117cc <z_clock_announce+0x154>)
   11708:	482c      	ldr	r0, [pc, #176]	; (117bc <z_clock_announce+0x144>)
   1170a:	f000 fcfd 	bl	12108 <printk>
   1170e:	4928      	ldr	r1, [pc, #160]	; (117b0 <z_clock_announce+0x138>)
   11710:	482f      	ldr	r0, [pc, #188]	; (117d0 <z_clock_announce+0x158>)
   11712:	f000 fcf9 	bl	12108 <printk>
   11716:	2184      	movs	r1, #132	; 0x84
   11718:	4826      	ldr	r0, [pc, #152]	; (117b4 <z_clock_announce+0x13c>)
   1171a:	f000 ff8b 	bl	12634 <assert_post_action>
	__asm__ volatile(
   1171e:	f385 8811 	msr	BASEPRI, r5
   11722:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   11726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   1172a:	18c0      	adds	r0, r0, r3
   1172c:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
		announce_remaining -= dt;
   11730:	1ad3      	subs	r3, r2, r3
   11732:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   11734:	2300      	movs	r3, #0
		curr_tick += dt;
   11736:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   1173a:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   1173c:	4620      	mov	r0, r4
   1173e:	f7ff fdc3 	bl	112c8 <remove_timeout>
   11742:	481b      	ldr	r0, [pc, #108]	; (117b0 <z_clock_announce+0x138>)
   11744:	f7ff fc84 	bl	11050 <z_spin_unlock_valid>
   11748:	b968      	cbnz	r0, 11766 <z_clock_announce+0xee>
   1174a:	2384      	movs	r3, #132	; 0x84
   1174c:	4a19      	ldr	r2, [pc, #100]	; (117b4 <z_clock_announce+0x13c>)
   1174e:	491f      	ldr	r1, [pc, #124]	; (117cc <z_clock_announce+0x154>)
   11750:	481a      	ldr	r0, [pc, #104]	; (117bc <z_clock_announce+0x144>)
   11752:	f000 fcd9 	bl	12108 <printk>
   11756:	4916      	ldr	r1, [pc, #88]	; (117b0 <z_clock_announce+0x138>)
   11758:	481d      	ldr	r0, [pc, #116]	; (117d0 <z_clock_announce+0x158>)
   1175a:	f000 fcd5 	bl	12108 <printk>
   1175e:	2184      	movs	r1, #132	; 0x84
   11760:	4814      	ldr	r0, [pc, #80]	; (117b4 <z_clock_announce+0x13c>)
   11762:	f000 ff67 	bl	12634 <assert_post_action>
   11766:	f385 8811 	msr	BASEPRI, r5
   1176a:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1176e:	4620      	mov	r0, r4
   11770:	68e3      	ldr	r3, [r4, #12]
   11772:	4798      	blx	r3
	__asm__ volatile(
   11774:	f04f 0320 	mov.w	r3, #32
   11778:	f3ef 8511 	mrs	r5, BASEPRI
   1177c:	f383 8811 	msr	BASEPRI, r3
   11780:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11784:	480a      	ldr	r0, [pc, #40]	; (117b0 <z_clock_announce+0x138>)
   11786:	f7ff fc55 	bl	11034 <z_spin_lock_valid>
   1178a:	b968      	cbnz	r0, 117a8 <z_clock_announce+0x130>
   1178c:	235c      	movs	r3, #92	; 0x5c
   1178e:	4a09      	ldr	r2, [pc, #36]	; (117b4 <z_clock_announce+0x13c>)
   11790:	4909      	ldr	r1, [pc, #36]	; (117b8 <z_clock_announce+0x140>)
   11792:	480a      	ldr	r0, [pc, #40]	; (117bc <z_clock_announce+0x144>)
   11794:	f000 fcb8 	bl	12108 <printk>
   11798:	4905      	ldr	r1, [pc, #20]	; (117b0 <z_clock_announce+0x138>)
   1179a:	4809      	ldr	r0, [pc, #36]	; (117c0 <z_clock_announce+0x148>)
   1179c:	f000 fcb4 	bl	12108 <printk>
   117a0:	215c      	movs	r1, #92	; 0x5c
   117a2:	4804      	ldr	r0, [pc, #16]	; (117b4 <z_clock_announce+0x13c>)
   117a4:	f000 ff46 	bl	12634 <assert_post_action>
	z_spin_lock_set_owner(l);
   117a8:	4801      	ldr	r0, [pc, #4]	; (117b0 <z_clock_announce+0x138>)
   117aa:	f7ff fc5f 	bl	1106c <z_spin_lock_set_owner>
	return k;
   117ae:	e78b      	b.n	116c8 <z_clock_announce+0x50>
   117b0:	20001e64 	.word	0x20001e64
   117b4:	0001820d 	.word	0x0001820d
   117b8:	00018233 	.word	0x00018233
   117bc:	00017d82 	.word	0x00017d82
   117c0:	00018248 	.word	0x00018248
   117c4:	200007f8 	.word	0x200007f8
   117c8:	20001e60 	.word	0x20001e60
   117cc:	00018260 	.word	0x00018260
   117d0:	00018277 	.word	0x00018277
   117d4:	200002e4 	.word	0x200002e4

000117d8 <z_tick_get>:

s64_t z_tick_get(void)
{
   117d8:	b570      	push	{r4, r5, r6, lr}
   117da:	f04f 0320 	mov.w	r3, #32
   117de:	f3ef 8611 	mrs	r6, BASEPRI
   117e2:	f383 8811 	msr	BASEPRI, r3
   117e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   117ea:	481b      	ldr	r0, [pc, #108]	; (11858 <z_tick_get+0x80>)
   117ec:	f7ff fc22 	bl	11034 <z_spin_lock_valid>
   117f0:	b968      	cbnz	r0, 1180e <z_tick_get+0x36>
   117f2:	235c      	movs	r3, #92	; 0x5c
   117f4:	4a19      	ldr	r2, [pc, #100]	; (1185c <z_tick_get+0x84>)
   117f6:	491a      	ldr	r1, [pc, #104]	; (11860 <z_tick_get+0x88>)
   117f8:	481a      	ldr	r0, [pc, #104]	; (11864 <z_tick_get+0x8c>)
   117fa:	f000 fc85 	bl	12108 <printk>
   117fe:	4916      	ldr	r1, [pc, #88]	; (11858 <z_tick_get+0x80>)
   11800:	4819      	ldr	r0, [pc, #100]	; (11868 <z_tick_get+0x90>)
   11802:	f000 fc81 	bl	12108 <printk>
   11806:	215c      	movs	r1, #92	; 0x5c
   11808:	4814      	ldr	r0, [pc, #80]	; (1185c <z_tick_get+0x84>)
   1180a:	f000 ff13 	bl	12634 <assert_post_action>
	z_spin_lock_set_owner(l);
   1180e:	4812      	ldr	r0, [pc, #72]	; (11858 <z_tick_get+0x80>)
   11810:	f7ff fc2c 	bl	1106c <z_spin_lock_set_owner>
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   11814:	f7f1 f8f4 	bl	2a00 <z_clock_elapsed>
   11818:	4b14      	ldr	r3, [pc, #80]	; (1186c <z_tick_get+0x94>)
   1181a:	e9d3 4500 	ldrd	r4, r5, [r3]
   1181e:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11820:	480d      	ldr	r0, [pc, #52]	; (11858 <z_tick_get+0x80>)
   11822:	f145 0500 	adc.w	r5, r5, #0
   11826:	f7ff fc13 	bl	11050 <z_spin_unlock_valid>
   1182a:	b968      	cbnz	r0, 11848 <z_tick_get+0x70>
   1182c:	2384      	movs	r3, #132	; 0x84
   1182e:	4a0b      	ldr	r2, [pc, #44]	; (1185c <z_tick_get+0x84>)
   11830:	490f      	ldr	r1, [pc, #60]	; (11870 <z_tick_get+0x98>)
   11832:	480c      	ldr	r0, [pc, #48]	; (11864 <z_tick_get+0x8c>)
   11834:	f000 fc68 	bl	12108 <printk>
   11838:	4907      	ldr	r1, [pc, #28]	; (11858 <z_tick_get+0x80>)
   1183a:	480e      	ldr	r0, [pc, #56]	; (11874 <z_tick_get+0x9c>)
   1183c:	f000 fc64 	bl	12108 <printk>
   11840:	2184      	movs	r1, #132	; 0x84
   11842:	4806      	ldr	r0, [pc, #24]	; (1185c <z_tick_get+0x84>)
   11844:	f000 fef6 	bl	12634 <assert_post_action>
	__asm__ volatile(
   11848:	f386 8811 	msr	BASEPRI, r6
   1184c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   11850:	4620      	mov	r0, r4
   11852:	4629      	mov	r1, r5
   11854:	bd70      	pop	{r4, r5, r6, pc}
   11856:	bf00      	nop
   11858:	20001e64 	.word	0x20001e64
   1185c:	0001820d 	.word	0x0001820d
   11860:	00018233 	.word	0x00018233
   11864:	00017d82 	.word	0x00017d82
   11868:	00018248 	.word	0x00018248
   1186c:	200007f8 	.word	0x200007f8
   11870:	00018260 	.word	0x00018260
   11874:	00018277 	.word	0x00018277

00011878 <k_poll_poller_cb>:

	return events_registered;
}

static int k_poll_poller_cb(struct k_poll_event *event, u32_t state)
{
   11878:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   1187a:	6883      	ldr	r3, [r0, #8]
{
   1187c:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   1187e:	685c      	ldr	r4, [r3, #4]

	__ASSERT(thread != NULL, "poller should have a thread\n");
   11880:	b964      	cbnz	r4, 1189c <k_poll_poller_cb+0x24>
   11882:	4915      	ldr	r1, [pc, #84]	; (118d8 <k_poll_poller_cb+0x60>)
   11884:	23e0      	movs	r3, #224	; 0xe0
   11886:	4a15      	ldr	r2, [pc, #84]	; (118dc <k_poll_poller_cb+0x64>)
   11888:	4815      	ldr	r0, [pc, #84]	; (118e0 <k_poll_poller_cb+0x68>)
   1188a:	f000 fc3d 	bl	12108 <printk>
   1188e:	4815      	ldr	r0, [pc, #84]	; (118e4 <k_poll_poller_cb+0x6c>)
   11890:	f000 fc3a 	bl	12108 <printk>
   11894:	21e0      	movs	r1, #224	; 0xe0
   11896:	4811      	ldr	r0, [pc, #68]	; (118dc <k_poll_poller_cb+0x64>)
   11898:	f000 fecc 	bl	12634 <assert_post_action>

	if (!z_is_thread_pending(thread)) {
   1189c:	7b63      	ldrb	r3, [r4, #13]
   1189e:	079a      	lsls	r2, r3, #30
   118a0:	d50e      	bpl.n	118c0 <k_poll_poller_cb+0x48>
		return 0;
	}

	if (z_is_thread_timeout_expired(thread)) {
   118a2:	6a23      	ldr	r3, [r4, #32]
   118a4:	3302      	adds	r3, #2
   118a6:	d014      	beq.n	118d2 <k_poll_poller_cb+0x5a>
		return -EAGAIN;
	}

	z_unpend_thread(thread);
   118a8:	4620      	mov	r0, r4
   118aa:	f7fe f9b1 	bl	fc10 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   118ae:	2d08      	cmp	r5, #8
   118b0:	bf0c      	ite	eq
   118b2:	f06f 0303 	mvneq.w	r3, #3
   118b6:	2300      	movne	r3, #0
   118b8:	6723      	str	r3, [r4, #112]	; 0x70
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   118ba:	7b63      	ldrb	r3, [r4, #13]
   118bc:	06db      	lsls	r3, r3, #27
   118be:	d001      	beq.n	118c4 <k_poll_poller_cb+0x4c>
		state == K_POLL_STATE_CANCELLED ? -EINTR : 0);

	if (!z_is_thread_ready(thread)) {
		return 0;
   118c0:	2000      	movs	r0, #0
	}

	z_ready_thread(thread);

	return 0;
}
   118c2:	bd38      	pop	{r3, r4, r5, pc}
	if (!z_is_thread_ready(thread)) {
   118c4:	69a5      	ldr	r5, [r4, #24]
   118c6:	2d00      	cmp	r5, #0
   118c8:	d1fa      	bne.n	118c0 <k_poll_poller_cb+0x48>
	z_ready_thread(thread);
   118ca:	4620      	mov	r0, r4
   118cc:	f7fe fae4 	bl	fe98 <z_ready_thread>
	return 0;
   118d0:	e7f6      	b.n	118c0 <k_poll_poller_cb+0x48>
		return -EAGAIN;
   118d2:	f06f 000a 	mvn.w	r0, #10
   118d6:	e7f4      	b.n	118c2 <k_poll_poller_cb+0x4a>
   118d8:	0001bc83 	.word	0x0001bc83
   118dc:	0001bc62 	.word	0x0001bc62
   118e0:	00017d82 	.word	0x00017d82
   118e4:	0001bc99 	.word	0x0001bc99

000118e8 <clear_event_registrations>:
{
   118e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   118ec:	2414      	movs	r4, #20
   118ee:	4680      	mov	r8, r0
   118f0:	4616      	mov	r6, r2
	while (num_events--) {
   118f2:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   118f6:	4d48      	ldr	r5, [pc, #288]	; (11a18 <clear_event_registrations+0x130>)
   118f8:	f8df 9158 	ldr.w	r9, [pc, #344]	; 11a54 <clear_event_registrations+0x16c>
   118fc:	4f47      	ldr	r7, [pc, #284]	; (11a1c <clear_event_registrations+0x134>)
	while (num_events--) {
   118fe:	4544      	cmp	r4, r8
   11900:	d101      	bne.n	11906 <clear_event_registrations+0x1e>
}
   11902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   11906:	2300      	movs	r3, #0
   11908:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   1190c:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   11910:	f003 030f 	and.w	r3, r3, #15
   11914:	2b04      	cmp	r3, #4
   11916:	d83d      	bhi.n	11994 <clear_event_registrations+0xac>
   11918:	e8df f003 	tbb	[pc, r3]
   1191c:	3c032d49 	.word	0x3c032d49
   11920:	1e          	.byte	0x1e
   11921:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   11922:	f854 3c04 	ldr.w	r3, [r4, #-4]
   11926:	b963      	cbnz	r3, 11942 <clear_event_registrations+0x5a>
   11928:	493d      	ldr	r1, [pc, #244]	; (11a20 <clear_event_registrations+0x138>)
   1192a:	2396      	movs	r3, #150	; 0x96
   1192c:	462a      	mov	r2, r5
   1192e:	4638      	mov	r0, r7
   11930:	f000 fbea 	bl	12108 <printk>
   11934:	483b      	ldr	r0, [pc, #236]	; (11a24 <clear_event_registrations+0x13c>)
   11936:	f000 fbe7 	bl	12108 <printk>
   1193a:	2196      	movs	r1, #150	; 0x96
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1193c:	4628      	mov	r0, r5
   1193e:	f000 fe79 	bl	12634 <assert_post_action>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   11942:	f854 3c14 	ldr.w	r3, [r4, #-20]
   11946:	b393      	cbz	r3, 119ae <clear_event_registrations+0xc6>
	node->prev->next = node->next;
   11948:	f854 2c10 	ldr.w	r2, [r4, #-16]
   1194c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1194e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   11950:	2300      	movs	r3, #0
	node->prev = NULL;
   11952:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   11956:	e02a      	b.n	119ae <clear_event_registrations+0xc6>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   11958:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1195c:	2b00      	cmp	r3, #0
   1195e:	d1f0      	bne.n	11942 <clear_event_registrations+0x5a>
   11960:	4931      	ldr	r1, [pc, #196]	; (11a28 <clear_event_registrations+0x140>)
   11962:	239a      	movs	r3, #154	; 0x9a
   11964:	462a      	mov	r2, r5
   11966:	4638      	mov	r0, r7
   11968:	f000 fbce 	bl	12108 <printk>
   1196c:	482f      	ldr	r0, [pc, #188]	; (11a2c <clear_event_registrations+0x144>)
   1196e:	f000 fbcb 	bl	12108 <printk>
   11972:	219a      	movs	r1, #154	; 0x9a
   11974:	e7e2      	b.n	1193c <clear_event_registrations+0x54>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   11976:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1197a:	2b00      	cmp	r3, #0
   1197c:	d1e1      	bne.n	11942 <clear_event_registrations+0x5a>
   1197e:	492c      	ldr	r1, [pc, #176]	; (11a30 <clear_event_registrations+0x148>)
   11980:	239e      	movs	r3, #158	; 0x9e
   11982:	462a      	mov	r2, r5
   11984:	4638      	mov	r0, r7
   11986:	f000 fbbf 	bl	12108 <printk>
   1198a:	482a      	ldr	r0, [pc, #168]	; (11a34 <clear_event_registrations+0x14c>)
   1198c:	f000 fbbc 	bl	12108 <printk>
   11990:	219e      	movs	r1, #158	; 0x9e
   11992:	e7d3      	b.n	1193c <clear_event_registrations+0x54>
		__ASSERT(false, "invalid event type\n");
   11994:	4649      	mov	r1, r9
   11996:	23a5      	movs	r3, #165	; 0xa5
   11998:	462a      	mov	r2, r5
   1199a:	4638      	mov	r0, r7
   1199c:	f000 fbb4 	bl	12108 <printk>
   119a0:	4825      	ldr	r0, [pc, #148]	; (11a38 <clear_event_registrations+0x150>)
   119a2:	f000 fbb1 	bl	12108 <printk>
   119a6:	21a5      	movs	r1, #165	; 0xa5
   119a8:	4628      	mov	r0, r5
   119aa:	f000 fe43 	bl	12634 <assert_post_action>
   119ae:	4823      	ldr	r0, [pc, #140]	; (11a3c <clear_event_registrations+0x154>)
   119b0:	f7ff fb4e 	bl	11050 <z_spin_unlock_valid>
   119b4:	b968      	cbnz	r0, 119d2 <clear_event_registrations+0xea>
   119b6:	2384      	movs	r3, #132	; 0x84
   119b8:	4638      	mov	r0, r7
   119ba:	4a21      	ldr	r2, [pc, #132]	; (11a40 <clear_event_registrations+0x158>)
   119bc:	4921      	ldr	r1, [pc, #132]	; (11a44 <clear_event_registrations+0x15c>)
   119be:	f000 fba3 	bl	12108 <printk>
   119c2:	491e      	ldr	r1, [pc, #120]	; (11a3c <clear_event_registrations+0x154>)
   119c4:	4820      	ldr	r0, [pc, #128]	; (11a48 <clear_event_registrations+0x160>)
   119c6:	f000 fb9f 	bl	12108 <printk>
   119ca:	2184      	movs	r1, #132	; 0x84
   119cc:	481c      	ldr	r0, [pc, #112]	; (11a40 <clear_event_registrations+0x158>)
   119ce:	f000 fe31 	bl	12634 <assert_post_action>
   119d2:	f386 8811 	msr	BASEPRI, r6
   119d6:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   119da:	f04f 0320 	mov.w	r3, #32
   119de:	f3ef 8611 	mrs	r6, BASEPRI
   119e2:	f383 8811 	msr	BASEPRI, r3
   119e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   119ea:	4814      	ldr	r0, [pc, #80]	; (11a3c <clear_event_registrations+0x154>)
   119ec:	f7ff fb22 	bl	11034 <z_spin_lock_valid>
   119f0:	b968      	cbnz	r0, 11a0e <clear_event_registrations+0x126>
   119f2:	235c      	movs	r3, #92	; 0x5c
   119f4:	4638      	mov	r0, r7
   119f6:	4a12      	ldr	r2, [pc, #72]	; (11a40 <clear_event_registrations+0x158>)
   119f8:	4914      	ldr	r1, [pc, #80]	; (11a4c <clear_event_registrations+0x164>)
   119fa:	f000 fb85 	bl	12108 <printk>
   119fe:	490f      	ldr	r1, [pc, #60]	; (11a3c <clear_event_registrations+0x154>)
   11a00:	4813      	ldr	r0, [pc, #76]	; (11a50 <clear_event_registrations+0x168>)
   11a02:	f000 fb81 	bl	12108 <printk>
   11a06:	215c      	movs	r1, #92	; 0x5c
   11a08:	480d      	ldr	r0, [pc, #52]	; (11a40 <clear_event_registrations+0x158>)
   11a0a:	f000 fe13 	bl	12634 <assert_post_action>
	z_spin_lock_set_owner(l);
   11a0e:	480b      	ldr	r0, [pc, #44]	; (11a3c <clear_event_registrations+0x154>)
   11a10:	f7ff fb2c 	bl	1106c <z_spin_lock_set_owner>
	return k;
   11a14:	3c14      	subs	r4, #20
   11a16:	e772      	b.n	118fe <clear_event_registrations+0x16>
   11a18:	0001bc62 	.word	0x0001bc62
   11a1c:	00017d82 	.word	0x00017d82
   11a20:	0001bcb8 	.word	0x0001bcb8
   11a24:	0001bcd2 	.word	0x0001bcd2
   11a28:	0001bce7 	.word	0x0001bce7
   11a2c:	0001bd03 	.word	0x0001bd03
   11a30:	0001bd14 	.word	0x0001bd14
   11a34:	0001bd31 	.word	0x0001bd31
   11a38:	0001bd48 	.word	0x0001bd48
   11a3c:	20001e68 	.word	0x20001e68
   11a40:	0001820d 	.word	0x0001820d
   11a44:	00018260 	.word	0x00018260
   11a48:	00018277 	.word	0x00018277
   11a4c:	00018233 	.word	0x00018233
   11a50:	00018248 	.word	0x00018248
   11a54:	0001ba27 	.word	0x0001ba27

00011a58 <register_events>:
{
   11a58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   11a5c:	2700      	movs	r7, #0
{
   11a5e:	4615      	mov	r5, r2
   11a60:	4604      	mov	r4, r0
	int events_registered = 0;
   11a62:	46b9      	mov	r9, r7
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11a64:	4e6a      	ldr	r6, [pc, #424]	; (11c10 <register_events+0x1b8>)
   11a66:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 11c4c <register_events+0x1f4>
   11a6a:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 11c50 <register_events+0x1f8>
{
   11a6e:	9100      	str	r1, [sp, #0]
   11a70:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   11a72:	9b00      	ldr	r3, [sp, #0]
   11a74:	429f      	cmp	r7, r3
   11a76:	db03      	blt.n	11a80 <register_events+0x28>
}
   11a78:	4648      	mov	r0, r9
   11a7a:	b003      	add	sp, #12
   11a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a80:	f04f 0320 	mov.w	r3, #32
   11a84:	f3ef 8b11 	mrs	fp, BASEPRI
   11a88:	f383 8811 	msr	BASEPRI, r3
   11a8c:	f3bf 8f6f 	isb	sy
   11a90:	4630      	mov	r0, r6
   11a92:	f7ff facf 	bl	11034 <z_spin_lock_valid>
   11a96:	b968      	cbnz	r0, 11ab4 <register_events+0x5c>
   11a98:	235c      	movs	r3, #92	; 0x5c
   11a9a:	4642      	mov	r2, r8
   11a9c:	4651      	mov	r1, sl
   11a9e:	485d      	ldr	r0, [pc, #372]	; (11c14 <register_events+0x1bc>)
   11aa0:	f000 fb32 	bl	12108 <printk>
   11aa4:	4631      	mov	r1, r6
   11aa6:	485c      	ldr	r0, [pc, #368]	; (11c18 <register_events+0x1c0>)
   11aa8:	f000 fb2e 	bl	12108 <printk>
   11aac:	215c      	movs	r1, #92	; 0x5c
   11aae:	4640      	mov	r0, r8
   11ab0:	f000 fdc0 	bl	12634 <assert_post_action>
	z_spin_lock_set_owner(l);
   11ab4:	4630      	mov	r0, r6
   11ab6:	f7ff fad9 	bl	1106c <z_spin_lock_set_owner>
	switch (event->type) {
   11aba:	7b63      	ldrb	r3, [r4, #13]
   11abc:	f003 030f 	and.w	r3, r3, #15
   11ac0:	2b04      	cmp	r3, #4
   11ac2:	d844      	bhi.n	11b4e <register_events+0xf6>
   11ac4:	e8df f003 	tbb	[pc, r3]
   11ac8:	43033d2d 	.word	0x43033d2d
   11acc:	2a          	.byte	0x2a
   11acd:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0) {
   11ace:	6923      	ldr	r3, [r4, #16]
   11ad0:	689b      	ldr	r3, [r3, #8]
   11ad2:	b333      	cbz	r3, 11b22 <register_events+0xca>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   11ad4:	2202      	movs	r2, #2
	event->poller = NULL;
   11ad6:	2100      	movs	r1, #0
	event->state |= state;
   11ad8:	68e3      	ldr	r3, [r4, #12]
	event->poller = NULL;
   11ada:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   11adc:	f3c3 3004 	ubfx	r0, r3, #12, #5
   11ae0:	4302      	orrs	r2, r0
   11ae2:	f362 3310 	bfi	r3, r2, #12, #5
   11ae6:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   11ae8:	7029      	strb	r1, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11aea:	4630      	mov	r0, r6
   11aec:	f7ff fab0 	bl	11050 <z_spin_unlock_valid>
   11af0:	b968      	cbnz	r0, 11b0e <register_events+0xb6>
   11af2:	2384      	movs	r3, #132	; 0x84
   11af4:	4642      	mov	r2, r8
   11af6:	4949      	ldr	r1, [pc, #292]	; (11c1c <register_events+0x1c4>)
   11af8:	4846      	ldr	r0, [pc, #280]	; (11c14 <register_events+0x1bc>)
   11afa:	f000 fb05 	bl	12108 <printk>
   11afe:	4631      	mov	r1, r6
   11b00:	4847      	ldr	r0, [pc, #284]	; (11c20 <register_events+0x1c8>)
   11b02:	f000 fb01 	bl	12108 <printk>
   11b06:	2184      	movs	r1, #132	; 0x84
   11b08:	4640      	mov	r0, r8
   11b0a:	f000 fd93 	bl	12634 <assert_post_action>
	__asm__ volatile(
   11b0e:	f38b 8811 	msr	BASEPRI, fp
   11b12:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   11b16:	3701      	adds	r7, #1
   11b18:	3414      	adds	r4, #20
   11b1a:	e7aa      	b.n	11a72 <register_events+0x1a>
		if (!k_queue_is_empty(event->queue)) {
   11b1c:	6923      	ldr	r3, [r4, #16]
   11b1e:	681b      	ldr	r3, [r3, #0]
   11b20:	bb33      	cbnz	r3, 11b70 <register_events+0x118>
		} else if (!just_check && poller->is_polling) {
   11b22:	9b01      	ldr	r3, [sp, #4]
   11b24:	2b00      	cmp	r3, #0
   11b26:	d1e0      	bne.n	11aea <register_events+0x92>
   11b28:	782b      	ldrb	r3, [r5, #0]
   11b2a:	2b00      	cmp	r3, #0
   11b2c:	d0dd      	beq.n	11aea <register_events+0x92>
	switch (event->type) {
   11b2e:	7b63      	ldrb	r3, [r4, #13]
   11b30:	f003 030f 	and.w	r3, r3, #15
   11b34:	2b04      	cmp	r3, #4
   11b36:	d85d      	bhi.n	11bf4 <register_events+0x19c>
   11b38:	e8df f003 	tbb	[pc, r3]
   11b3c:	5c1c4931 	.word	0x5c1c4931
   11b40:	35          	.byte	0x35
   11b41:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   11b42:	6923      	ldr	r3, [r4, #16]
   11b44:	689b      	ldr	r3, [r3, #8]
   11b46:	2b00      	cmp	r3, #0
   11b48:	d0eb      	beq.n	11b22 <register_events+0xca>
			*state = K_POLL_STATE_SIGNALED;
   11b4a:	2201      	movs	r2, #1
   11b4c:	e7c3      	b.n	11ad6 <register_events+0x7e>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   11b4e:	2350      	movs	r3, #80	; 0x50
   11b50:	4a34      	ldr	r2, [pc, #208]	; (11c24 <register_events+0x1cc>)
   11b52:	4935      	ldr	r1, [pc, #212]	; (11c28 <register_events+0x1d0>)
   11b54:	482f      	ldr	r0, [pc, #188]	; (11c14 <register_events+0x1bc>)
   11b56:	f000 fad7 	bl	12108 <printk>
   11b5a:	7b61      	ldrb	r1, [r4, #13]
   11b5c:	4833      	ldr	r0, [pc, #204]	; (11c2c <register_events+0x1d4>)
   11b5e:	f001 010f 	and.w	r1, r1, #15
   11b62:	f000 fad1 	bl	12108 <printk>
   11b66:	2150      	movs	r1, #80	; 0x50
   11b68:	482e      	ldr	r0, [pc, #184]	; (11c24 <register_events+0x1cc>)
   11b6a:	f000 fd63 	bl	12634 <assert_post_action>
		break;
   11b6e:	e7d8      	b.n	11b22 <register_events+0xca>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   11b70:	2204      	movs	r2, #4
   11b72:	e7b0      	b.n	11ad6 <register_events+0x7e>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   11b74:	6923      	ldr	r3, [r4, #16]
   11b76:	b963      	cbnz	r3, 11b92 <register_events+0x13a>
   11b78:	492d      	ldr	r1, [pc, #180]	; (11c30 <register_events+0x1d8>)
   11b7a:	2375      	movs	r3, #117	; 0x75
   11b7c:	4a29      	ldr	r2, [pc, #164]	; (11c24 <register_events+0x1cc>)
   11b7e:	4825      	ldr	r0, [pc, #148]	; (11c14 <register_events+0x1bc>)
   11b80:	f000 fac2 	bl	12108 <printk>
   11b84:	482b      	ldr	r0, [pc, #172]	; (11c34 <register_events+0x1dc>)
   11b86:	f000 fabf 	bl	12108 <printk>
   11b8a:	2175      	movs	r1, #117	; 0x75
   11b8c:	4825      	ldr	r0, [pc, #148]	; (11c24 <register_events+0x1cc>)
   11b8e:	f000 fd51 	bl	12634 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   11b92:	462a      	mov	r2, r5
   11b94:	4621      	mov	r1, r4
   11b96:	6920      	ldr	r0, [r4, #16]
   11b98:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   11b9a:	f004 ff04 	bl	169a6 <add_event>
	event->poller = poller;
   11b9e:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
   11ba0:	f109 0901 	add.w	r9, r9, #1
   11ba4:	e7a1      	b.n	11aea <register_events+0x92>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   11ba6:	6923      	ldr	r3, [r4, #16]
   11ba8:	b963      	cbnz	r3, 11bc4 <register_events+0x16c>
   11baa:	4923      	ldr	r1, [pc, #140]	; (11c38 <register_events+0x1e0>)
   11bac:	2379      	movs	r3, #121	; 0x79
   11bae:	4a1d      	ldr	r2, [pc, #116]	; (11c24 <register_events+0x1cc>)
   11bb0:	4818      	ldr	r0, [pc, #96]	; (11c14 <register_events+0x1bc>)
   11bb2:	f000 faa9 	bl	12108 <printk>
   11bb6:	4821      	ldr	r0, [pc, #132]	; (11c3c <register_events+0x1e4>)
   11bb8:	f000 faa6 	bl	12108 <printk>
   11bbc:	2179      	movs	r1, #121	; 0x79
   11bbe:	4819      	ldr	r0, [pc, #100]	; (11c24 <register_events+0x1cc>)
   11bc0:	f000 fd38 	bl	12634 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   11bc4:	6920      	ldr	r0, [r4, #16]
   11bc6:	462a      	mov	r2, r5
   11bc8:	4621      	mov	r1, r4
   11bca:	3014      	adds	r0, #20
   11bcc:	e7e5      	b.n	11b9a <register_events+0x142>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   11bce:	6923      	ldr	r3, [r4, #16]
   11bd0:	b963      	cbnz	r3, 11bec <register_events+0x194>
   11bd2:	491b      	ldr	r1, [pc, #108]	; (11c40 <register_events+0x1e8>)
   11bd4:	237d      	movs	r3, #125	; 0x7d
   11bd6:	4a13      	ldr	r2, [pc, #76]	; (11c24 <register_events+0x1cc>)
   11bd8:	480e      	ldr	r0, [pc, #56]	; (11c14 <register_events+0x1bc>)
   11bda:	f000 fa95 	bl	12108 <printk>
   11bde:	4819      	ldr	r0, [pc, #100]	; (11c44 <register_events+0x1ec>)
   11be0:	f000 fa92 	bl	12108 <printk>
   11be4:	217d      	movs	r1, #125	; 0x7d
   11be6:	480f      	ldr	r0, [pc, #60]	; (11c24 <register_events+0x1cc>)
   11be8:	f000 fd24 	bl	12634 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   11bec:	462a      	mov	r2, r5
   11bee:	4621      	mov	r1, r4
   11bf0:	6920      	ldr	r0, [r4, #16]
   11bf2:	e7d2      	b.n	11b9a <register_events+0x142>
		__ASSERT(false, "invalid event type\n");
   11bf4:	2384      	movs	r3, #132	; 0x84
   11bf6:	4a0b      	ldr	r2, [pc, #44]	; (11c24 <register_events+0x1cc>)
   11bf8:	490b      	ldr	r1, [pc, #44]	; (11c28 <register_events+0x1d0>)
   11bfa:	4806      	ldr	r0, [pc, #24]	; (11c14 <register_events+0x1bc>)
   11bfc:	f000 fa84 	bl	12108 <printk>
   11c00:	4811      	ldr	r0, [pc, #68]	; (11c48 <register_events+0x1f0>)
   11c02:	f000 fa81 	bl	12108 <printk>
   11c06:	2184      	movs	r1, #132	; 0x84
   11c08:	4806      	ldr	r0, [pc, #24]	; (11c24 <register_events+0x1cc>)
   11c0a:	f000 fd13 	bl	12634 <assert_post_action>
		break;
   11c0e:	e7c6      	b.n	11b9e <register_events+0x146>
   11c10:	20001e68 	.word	0x20001e68
   11c14:	00017d82 	.word	0x00017d82
   11c18:	00018248 	.word	0x00018248
   11c1c:	00018260 	.word	0x00018260
   11c20:	00018277 	.word	0x00018277
   11c24:	0001bc62 	.word	0x0001bc62
   11c28:	0001ba27 	.word	0x0001ba27
   11c2c:	0001bd5e 	.word	0x0001bd5e
   11c30:	0001bcb8 	.word	0x0001bcb8
   11c34:	0001bcd2 	.word	0x0001bcd2
   11c38:	0001bce7 	.word	0x0001bce7
   11c3c:	0001bd03 	.word	0x0001bd03
   11c40:	0001bd14 	.word	0x0001bd14
   11c44:	0001bd31 	.word	0x0001bd31
   11c48:	0001bd48 	.word	0x0001bd48
   11c4c:	0001820d 	.word	0x0001820d
   11c50:	00018233 	.word	0x00018233

00011c54 <k_poll_event_init>:
{
   11c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11c56:	4605      	mov	r5, r0
   11c58:	460f      	mov	r7, r1
   11c5a:	461e      	mov	r6, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   11c5c:	4614      	mov	r4, r2
   11c5e:	b162      	cbz	r2, 11c7a <k_poll_event_init+0x26>
   11c60:	491b      	ldr	r1, [pc, #108]	; (11cd0 <k_poll_event_init+0x7c>)
   11c62:	2329      	movs	r3, #41	; 0x29
   11c64:	4a1b      	ldr	r2, [pc, #108]	; (11cd4 <k_poll_event_init+0x80>)
   11c66:	481c      	ldr	r0, [pc, #112]	; (11cd8 <k_poll_event_init+0x84>)
   11c68:	f000 fa4e 	bl	12108 <printk>
   11c6c:	481b      	ldr	r0, [pc, #108]	; (11cdc <k_poll_event_init+0x88>)
   11c6e:	f000 fa4b 	bl	12108 <printk>
   11c72:	2129      	movs	r1, #41	; 0x29
   11c74:	4817      	ldr	r0, [pc, #92]	; (11cd4 <k_poll_event_init+0x80>)
   11c76:	f000 fcdd 	bl	12634 <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   11c7a:	2f0f      	cmp	r7, #15
   11c7c:	d90c      	bls.n	11c98 <k_poll_event_init+0x44>
   11c7e:	4918      	ldr	r1, [pc, #96]	; (11ce0 <k_poll_event_init+0x8c>)
   11c80:	232b      	movs	r3, #43	; 0x2b
   11c82:	4a14      	ldr	r2, [pc, #80]	; (11cd4 <k_poll_event_init+0x80>)
   11c84:	4814      	ldr	r0, [pc, #80]	; (11cd8 <k_poll_event_init+0x84>)
   11c86:	f000 fa3f 	bl	12108 <printk>
   11c8a:	4816      	ldr	r0, [pc, #88]	; (11ce4 <k_poll_event_init+0x90>)
   11c8c:	f000 fa3c 	bl	12108 <printk>
   11c90:	212b      	movs	r1, #43	; 0x2b
   11c92:	4810      	ldr	r0, [pc, #64]	; (11cd4 <k_poll_event_init+0x80>)
   11c94:	f000 fcce 	bl	12634 <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   11c98:	b966      	cbnz	r6, 11cb4 <k_poll_event_init+0x60>
   11c9a:	4913      	ldr	r1, [pc, #76]	; (11ce8 <k_poll_event_init+0x94>)
   11c9c:	232c      	movs	r3, #44	; 0x2c
   11c9e:	4a0d      	ldr	r2, [pc, #52]	; (11cd4 <k_poll_event_init+0x80>)
   11ca0:	480d      	ldr	r0, [pc, #52]	; (11cd8 <k_poll_event_init+0x84>)
   11ca2:	f000 fa31 	bl	12108 <printk>
   11ca6:	4811      	ldr	r0, [pc, #68]	; (11cec <k_poll_event_init+0x98>)
   11ca8:	f000 fa2e 	bl	12108 <printk>
   11cac:	212c      	movs	r1, #44	; 0x2c
   11cae:	4809      	ldr	r0, [pc, #36]	; (11cd4 <k_poll_event_init+0x80>)
   11cb0:	f000 fcc0 	bl	12634 <assert_post_action>
	event->poller = NULL;
   11cb4:	2300      	movs	r3, #0
	event->type = type;
   11cb6:	0464      	lsls	r4, r4, #17
   11cb8:	023f      	lsls	r7, r7, #8
	event->poller = NULL;
   11cba:	60ab      	str	r3, [r5, #8]
	event->type = type;
   11cbc:	f404 3400 	and.w	r4, r4, #131072	; 0x20000
   11cc0:	7b2b      	ldrb	r3, [r5, #12]
   11cc2:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
   11cc6:	433c      	orrs	r4, r7
   11cc8:	431c      	orrs	r4, r3
	event->obj = obj;
   11cca:	e9c5 4603 	strd	r4, r6, [r5, #12]
}
   11cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11cd0:	0001bd7b 	.word	0x0001bd7b
   11cd4:	0001bc62 	.word	0x0001bc62
   11cd8:	00017d82 	.word	0x00017d82
   11cdc:	0001bd9b 	.word	0x0001bd9b
   11ce0:	0001bdc1 	.word	0x0001bdc1
   11ce4:	0001bde5 	.word	0x0001bde5
   11ce8:	0001bdf5 	.word	0x0001bdf5
   11cec:	0001be08 	.word	0x0001be08

00011cf0 <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   11cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11cf4:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   11cf6:	2301      	movs	r3, #1
{
   11cf8:	b088      	sub	sp, #32
	struct _poller poller = { .is_polling = true,
   11cfa:	f88d 3014 	strb.w	r3, [sp, #20]
				  .thread     = _current,
   11cfe:	4b74      	ldr	r3, [pc, #464]	; (11ed0 <z_impl_k_poll+0x1e0>)
{
   11d00:	4604      	mov	r4, r0
	struct _poller poller = { .is_polling = true,
   11d02:	689b      	ldr	r3, [r3, #8]
{
   11d04:	460d      	mov	r5, r1
	struct _poller poller = { .is_polling = true,
   11d06:	9306      	str	r3, [sp, #24]
   11d08:	4b72      	ldr	r3, [pc, #456]	; (11ed4 <z_impl_k_poll+0x1e4>)
{
   11d0a:	4616      	mov	r6, r2
	struct _poller poller = { .is_polling = true,
   11d0c:	9307      	str	r3, [sp, #28]
   11d0e:	f3ef 8305 	mrs	r3, IPSR
				  .cb         = k_poll_poller_cb };

	__ASSERT(!arch_is_in_isr(), "");
   11d12:	b173      	cbz	r3, 11d32 <z_impl_k_poll+0x42>
   11d14:	4970      	ldr	r1, [pc, #448]	; (11ed8 <z_impl_k_poll+0x1e8>)
   11d16:	f44f 7380 	mov.w	r3, #256	; 0x100
   11d1a:	4a70      	ldr	r2, [pc, #448]	; (11edc <z_impl_k_poll+0x1ec>)
   11d1c:	4870      	ldr	r0, [pc, #448]	; (11ee0 <z_impl_k_poll+0x1f0>)
   11d1e:	f000 f9f3 	bl	12108 <printk>
   11d22:	4870      	ldr	r0, [pc, #448]	; (11ee4 <z_impl_k_poll+0x1f4>)
   11d24:	f000 f9f0 	bl	12108 <printk>
   11d28:	f44f 7180 	mov.w	r1, #256	; 0x100
   11d2c:	486b      	ldr	r0, [pc, #428]	; (11edc <z_impl_k_poll+0x1ec>)
   11d2e:	f000 fc81 	bl	12634 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   11d32:	b974      	cbnz	r4, 11d52 <z_impl_k_poll+0x62>
   11d34:	496c      	ldr	r1, [pc, #432]	; (11ee8 <z_impl_k_poll+0x1f8>)
   11d36:	f240 1301 	movw	r3, #257	; 0x101
   11d3a:	4a68      	ldr	r2, [pc, #416]	; (11edc <z_impl_k_poll+0x1ec>)
   11d3c:	4868      	ldr	r0, [pc, #416]	; (11ee0 <z_impl_k_poll+0x1f0>)
   11d3e:	f000 f9e3 	bl	12108 <printk>
   11d42:	486a      	ldr	r0, [pc, #424]	; (11eec <z_impl_k_poll+0x1fc>)
   11d44:	f000 f9e0 	bl	12108 <printk>
   11d48:	f240 1101 	movw	r1, #257	; 0x101
   11d4c:	4863      	ldr	r0, [pc, #396]	; (11edc <z_impl_k_poll+0x1ec>)
   11d4e:	f000 fc71 	bl	12634 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   11d52:	2d00      	cmp	r5, #0
   11d54:	da0e      	bge.n	11d74 <z_impl_k_poll+0x84>
   11d56:	4966      	ldr	r1, [pc, #408]	; (11ef0 <z_impl_k_poll+0x200>)
   11d58:	f44f 7381 	mov.w	r3, #258	; 0x102
   11d5c:	4a5f      	ldr	r2, [pc, #380]	; (11edc <z_impl_k_poll+0x1ec>)
   11d5e:	4860      	ldr	r0, [pc, #384]	; (11ee0 <z_impl_k_poll+0x1f0>)
   11d60:	f000 f9d2 	bl	12108 <printk>
   11d64:	4863      	ldr	r0, [pc, #396]	; (11ef4 <z_impl_k_poll+0x204>)
   11d66:	f000 f9cf 	bl	12108 <printk>
   11d6a:	f44f 7181 	mov.w	r1, #258	; 0x102
   11d6e:	485b      	ldr	r0, [pc, #364]	; (11edc <z_impl_k_poll+0x1ec>)
   11d70:	f000 fc60 	bl	12634 <assert_post_action>

	events_registered = register_events(events, num_events, &poller,
   11d74:	ea56 0307 	orrs.w	r3, r6, r7
   11d78:	bf0c      	ite	eq
   11d7a:	2301      	moveq	r3, #1
   11d7c:	2300      	movne	r3, #0
   11d7e:	4629      	mov	r1, r5
   11d80:	4620      	mov	r0, r4
   11d82:	aa05      	add	r2, sp, #20
   11d84:	f7ff fe68 	bl	11a58 <register_events>
   11d88:	4680      	mov	r8, r0
	__asm__ volatile(
   11d8a:	f04f 0320 	mov.w	r3, #32
   11d8e:	f3ef 8511 	mrs	r5, BASEPRI
   11d92:	f383 8811 	msr	BASEPRI, r3
   11d96:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11d9a:	4857      	ldr	r0, [pc, #348]	; (11ef8 <z_impl_k_poll+0x208>)
   11d9c:	f7ff f94a 	bl	11034 <z_spin_lock_valid>
   11da0:	b968      	cbnz	r0, 11dbe <z_impl_k_poll+0xce>
   11da2:	235c      	movs	r3, #92	; 0x5c
   11da4:	4a55      	ldr	r2, [pc, #340]	; (11efc <z_impl_k_poll+0x20c>)
   11da6:	4956      	ldr	r1, [pc, #344]	; (11f00 <z_impl_k_poll+0x210>)
   11da8:	484d      	ldr	r0, [pc, #308]	; (11ee0 <z_impl_k_poll+0x1f0>)
   11daa:	f000 f9ad 	bl	12108 <printk>
   11dae:	4952      	ldr	r1, [pc, #328]	; (11ef8 <z_impl_k_poll+0x208>)
   11db0:	4854      	ldr	r0, [pc, #336]	; (11f04 <z_impl_k_poll+0x214>)
   11db2:	f000 f9a9 	bl	12108 <printk>
   11db6:	215c      	movs	r1, #92	; 0x5c
   11db8:	4850      	ldr	r0, [pc, #320]	; (11efc <z_impl_k_poll+0x20c>)
   11dba:	f000 fc3b 	bl	12634 <assert_post_action>
	z_spin_lock_set_owner(l);
   11dbe:	484e      	ldr	r0, [pc, #312]	; (11ef8 <z_impl_k_poll+0x208>)
   11dc0:	f7ff f954 	bl	1106c <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   11dc4:	f89d 3014 	ldrb.w	r3, [sp, #20]
   11dc8:	b9fb      	cbnz	r3, 11e0a <z_impl_k_poll+0x11a>
		clear_event_registrations(events, events_registered, key);
   11dca:	4620      	mov	r0, r4
   11dcc:	462a      	mov	r2, r5
   11dce:	4641      	mov	r1, r8
   11dd0:	f7ff fd8a 	bl	118e8 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11dd4:	4848      	ldr	r0, [pc, #288]	; (11ef8 <z_impl_k_poll+0x208>)
   11dd6:	f7ff f93b 	bl	11050 <z_spin_unlock_valid>
   11dda:	b968      	cbnz	r0, 11df8 <z_impl_k_poll+0x108>
   11ddc:	2384      	movs	r3, #132	; 0x84
   11dde:	4a47      	ldr	r2, [pc, #284]	; (11efc <z_impl_k_poll+0x20c>)
   11de0:	4949      	ldr	r1, [pc, #292]	; (11f08 <z_impl_k_poll+0x218>)
   11de2:	483f      	ldr	r0, [pc, #252]	; (11ee0 <z_impl_k_poll+0x1f0>)
   11de4:	f000 f990 	bl	12108 <printk>
   11de8:	4943      	ldr	r1, [pc, #268]	; (11ef8 <z_impl_k_poll+0x208>)
   11dea:	4848      	ldr	r0, [pc, #288]	; (11f0c <z_impl_k_poll+0x21c>)
   11dec:	f000 f98c 	bl	12108 <printk>
   11df0:	2184      	movs	r1, #132	; 0x84
   11df2:	4842      	ldr	r0, [pc, #264]	; (11efc <z_impl_k_poll+0x20c>)
   11df4:	f000 fc1e 	bl	12634 <assert_post_action>
	__asm__ volatile(
   11df8:	f385 8811 	msr	BASEPRI, r5
   11dfc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		return 0;
   11e00:	2500      	movs	r5, #0
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   11e02:	4628      	mov	r0, r5
   11e04:	b008      	add	sp, #32
   11e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	poller.is_polling = false;
   11e0a:	2300      	movs	r3, #0
   11e0c:	f88d 3014 	strb.w	r3, [sp, #20]
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   11e10:	ea56 0307 	orrs.w	r3, r6, r7
   11e14:	d118      	bne.n	11e48 <z_impl_k_poll+0x158>
   11e16:	4838      	ldr	r0, [pc, #224]	; (11ef8 <z_impl_k_poll+0x208>)
   11e18:	f7ff f91a 	bl	11050 <z_spin_unlock_valid>
   11e1c:	b968      	cbnz	r0, 11e3a <z_impl_k_poll+0x14a>
   11e1e:	2384      	movs	r3, #132	; 0x84
   11e20:	4a36      	ldr	r2, [pc, #216]	; (11efc <z_impl_k_poll+0x20c>)
   11e22:	4939      	ldr	r1, [pc, #228]	; (11f08 <z_impl_k_poll+0x218>)
   11e24:	482e      	ldr	r0, [pc, #184]	; (11ee0 <z_impl_k_poll+0x1f0>)
   11e26:	f000 f96f 	bl	12108 <printk>
   11e2a:	4933      	ldr	r1, [pc, #204]	; (11ef8 <z_impl_k_poll+0x208>)
   11e2c:	4837      	ldr	r0, [pc, #220]	; (11f0c <z_impl_k_poll+0x21c>)
   11e2e:	f000 f96b 	bl	12108 <printk>
   11e32:	2184      	movs	r1, #132	; 0x84
   11e34:	4831      	ldr	r0, [pc, #196]	; (11efc <z_impl_k_poll+0x20c>)
   11e36:	f000 fbfd 	bl	12634 <assert_post_action>
   11e3a:	f385 8811 	msr	BASEPRI, r5
   11e3e:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   11e42:	f06f 050a 	mvn.w	r5, #10
   11e46:	e7dc      	b.n	11e02 <z_impl_k_poll+0x112>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   11e48:	4629      	mov	r1, r5
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   11e4a:	aa03      	add	r2, sp, #12
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   11e4c:	e9cd 6700 	strd	r6, r7, [sp]
   11e50:	4829      	ldr	r0, [pc, #164]	; (11ef8 <z_impl_k_poll+0x208>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   11e52:	e9cd 2203 	strd	r2, r2, [sp, #12]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   11e56:	f7fe fbed 	bl	10634 <z_pend_curr>
   11e5a:	4605      	mov	r5, r0
	__asm__ volatile(
   11e5c:	f04f 0320 	mov.w	r3, #32
   11e60:	f3ef 8611 	mrs	r6, BASEPRI
   11e64:	f383 8811 	msr	BASEPRI, r3
   11e68:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11e6c:	4822      	ldr	r0, [pc, #136]	; (11ef8 <z_impl_k_poll+0x208>)
   11e6e:	f7ff f8e1 	bl	11034 <z_spin_lock_valid>
   11e72:	b968      	cbnz	r0, 11e90 <z_impl_k_poll+0x1a0>
   11e74:	235c      	movs	r3, #92	; 0x5c
   11e76:	4a21      	ldr	r2, [pc, #132]	; (11efc <z_impl_k_poll+0x20c>)
   11e78:	4921      	ldr	r1, [pc, #132]	; (11f00 <z_impl_k_poll+0x210>)
   11e7a:	4819      	ldr	r0, [pc, #100]	; (11ee0 <z_impl_k_poll+0x1f0>)
   11e7c:	f000 f944 	bl	12108 <printk>
   11e80:	491d      	ldr	r1, [pc, #116]	; (11ef8 <z_impl_k_poll+0x208>)
   11e82:	4820      	ldr	r0, [pc, #128]	; (11f04 <z_impl_k_poll+0x214>)
   11e84:	f000 f940 	bl	12108 <printk>
   11e88:	215c      	movs	r1, #92	; 0x5c
   11e8a:	481c      	ldr	r0, [pc, #112]	; (11efc <z_impl_k_poll+0x20c>)
   11e8c:	f000 fbd2 	bl	12634 <assert_post_action>
	z_spin_lock_set_owner(l);
   11e90:	4819      	ldr	r0, [pc, #100]	; (11ef8 <z_impl_k_poll+0x208>)
   11e92:	f7ff f8eb 	bl	1106c <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   11e96:	4620      	mov	r0, r4
   11e98:	4632      	mov	r2, r6
   11e9a:	4641      	mov	r1, r8
   11e9c:	f7ff fd24 	bl	118e8 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11ea0:	4815      	ldr	r0, [pc, #84]	; (11ef8 <z_impl_k_poll+0x208>)
   11ea2:	f7ff f8d5 	bl	11050 <z_spin_unlock_valid>
   11ea6:	b968      	cbnz	r0, 11ec4 <z_impl_k_poll+0x1d4>
   11ea8:	2384      	movs	r3, #132	; 0x84
   11eaa:	4a14      	ldr	r2, [pc, #80]	; (11efc <z_impl_k_poll+0x20c>)
   11eac:	4916      	ldr	r1, [pc, #88]	; (11f08 <z_impl_k_poll+0x218>)
   11eae:	480c      	ldr	r0, [pc, #48]	; (11ee0 <z_impl_k_poll+0x1f0>)
   11eb0:	f000 f92a 	bl	12108 <printk>
   11eb4:	4910      	ldr	r1, [pc, #64]	; (11ef8 <z_impl_k_poll+0x208>)
   11eb6:	4815      	ldr	r0, [pc, #84]	; (11f0c <z_impl_k_poll+0x21c>)
   11eb8:	f000 f926 	bl	12108 <printk>
   11ebc:	2184      	movs	r1, #132	; 0x84
   11ebe:	480f      	ldr	r0, [pc, #60]	; (11efc <z_impl_k_poll+0x20c>)
   11ec0:	f000 fbb8 	bl	12634 <assert_post_action>
	__asm__ volatile(
   11ec4:	f386 8811 	msr	BASEPRI, r6
   11ec8:	f3bf 8f6f 	isb	sy
	return swap_rc;
   11ecc:	e799      	b.n	11e02 <z_impl_k_poll+0x112>
   11ece:	bf00      	nop
   11ed0:	20001d88 	.word	0x20001d88
   11ed4:	00011879 	.word	0x00011879
   11ed8:	0001b95d 	.word	0x0001b95d
   11edc:	0001bc62 	.word	0x0001bc62
   11ee0:	00017d82 	.word	0x00017d82
   11ee4:	0001b120 	.word	0x0001b120
   11ee8:	0001be22 	.word	0x0001be22
   11eec:	0001be38 	.word	0x0001be38
   11ef0:	0001be47 	.word	0x0001be47
   11ef4:	0001be57 	.word	0x0001be57
   11ef8:	20001e68 	.word	0x20001e68
   11efc:	0001820d 	.word	0x0001820d
   11f00:	00018233 	.word	0x00018233
   11f04:	00018248 	.word	0x00018248
   11f08:	00018260 	.word	0x00018260
   11f0c:	00018277 	.word	0x00018277

00011f10 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   11f10:	b570      	push	{r4, r5, r6, lr}
   11f12:	4604      	mov	r4, r0
   11f14:	460d      	mov	r5, r1
	__asm__ volatile(
   11f16:	f04f 0320 	mov.w	r3, #32
   11f1a:	f3ef 8611 	mrs	r6, BASEPRI
   11f1e:	f383 8811 	msr	BASEPRI, r3
   11f22:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11f26:	4821      	ldr	r0, [pc, #132]	; (11fac <z_impl_k_poll_signal_raise+0x9c>)
   11f28:	f7ff f884 	bl	11034 <z_spin_lock_valid>
   11f2c:	b968      	cbnz	r0, 11f4a <z_impl_k_poll_signal_raise+0x3a>
   11f2e:	235c      	movs	r3, #92	; 0x5c
   11f30:	4a1f      	ldr	r2, [pc, #124]	; (11fb0 <z_impl_k_poll_signal_raise+0xa0>)
   11f32:	4920      	ldr	r1, [pc, #128]	; (11fb4 <z_impl_k_poll_signal_raise+0xa4>)
   11f34:	4820      	ldr	r0, [pc, #128]	; (11fb8 <z_impl_k_poll_signal_raise+0xa8>)
   11f36:	f000 f8e7 	bl	12108 <printk>
   11f3a:	491c      	ldr	r1, [pc, #112]	; (11fac <z_impl_k_poll_signal_raise+0x9c>)
   11f3c:	481f      	ldr	r0, [pc, #124]	; (11fbc <z_impl_k_poll_signal_raise+0xac>)
   11f3e:	f000 f8e3 	bl	12108 <printk>
   11f42:	215c      	movs	r1, #92	; 0x5c
   11f44:	481a      	ldr	r0, [pc, #104]	; (11fb0 <z_impl_k_poll_signal_raise+0xa0>)
   11f46:	f000 fb75 	bl	12634 <assert_post_action>
	z_spin_lock_set_owner(l);
   11f4a:	4818      	ldr	r0, [pc, #96]	; (11fac <z_impl_k_poll_signal_raise+0x9c>)
   11f4c:	f7ff f88e 	bl	1106c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
	signal->signaled = 1U;
   11f50:	2101      	movs	r1, #1
	return list->head == list;
   11f52:	6820      	ldr	r0, [r4, #0]
	signal->result = result;
   11f54:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   11f56:	4284      	cmp	r4, r0
	signal->signaled = 1U;
   11f58:	60a1      	str	r1, [r4, #8]
   11f5a:	d117      	bne.n	11f8c <z_impl_k_poll_signal_raise+0x7c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11f5c:	4813      	ldr	r0, [pc, #76]	; (11fac <z_impl_k_poll_signal_raise+0x9c>)
   11f5e:	f7ff f877 	bl	11050 <z_spin_unlock_valid>
   11f62:	b968      	cbnz	r0, 11f80 <z_impl_k_poll_signal_raise+0x70>
   11f64:	2384      	movs	r3, #132	; 0x84
   11f66:	4a12      	ldr	r2, [pc, #72]	; (11fb0 <z_impl_k_poll_signal_raise+0xa0>)
   11f68:	4915      	ldr	r1, [pc, #84]	; (11fc0 <z_impl_k_poll_signal_raise+0xb0>)
   11f6a:	4813      	ldr	r0, [pc, #76]	; (11fb8 <z_impl_k_poll_signal_raise+0xa8>)
   11f6c:	f000 f8cc 	bl	12108 <printk>
   11f70:	490e      	ldr	r1, [pc, #56]	; (11fac <z_impl_k_poll_signal_raise+0x9c>)
   11f72:	4814      	ldr	r0, [pc, #80]	; (11fc4 <z_impl_k_poll_signal_raise+0xb4>)
   11f74:	f000 f8c8 	bl	12108 <printk>
   11f78:	2184      	movs	r1, #132	; 0x84
   11f7a:	480d      	ldr	r0, [pc, #52]	; (11fb0 <z_impl_k_poll_signal_raise+0xa0>)
   11f7c:	f000 fb5a 	bl	12634 <assert_post_action>
	__asm__ volatile(
   11f80:	f386 8811 	msr	BASEPRI, r6
   11f84:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   11f88:	2400      	movs	r4, #0
   11f8a:	e00d      	b.n	11fa8 <z_impl_k_poll_signal_raise+0x98>
	node->prev->next = node->next;
   11f8c:	e9d0 3200 	ldrd	r3, r2, [r0]
   11f90:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   11f92:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   11f94:	2300      	movs	r3, #0
	node->prev = NULL;
   11f96:	e9c0 3300 	strd	r3, r3, [r0]
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   11f9a:	f004 fce9 	bl	16970 <signal_poll_event>

	z_reschedule(&lock, key);
   11f9e:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   11fa0:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   11fa2:	4802      	ldr	r0, [pc, #8]	; (11fac <z_impl_k_poll_signal_raise+0x9c>)
   11fa4:	f7fd fd52 	bl	fa4c <z_reschedule>
	return rc;
}
   11fa8:	4620      	mov	r0, r4
   11faa:	bd70      	pop	{r4, r5, r6, pc}
   11fac:	20001e68 	.word	0x20001e68
   11fb0:	0001820d 	.word	0x0001820d
   11fb4:	00018233 	.word	0x00018233
   11fb8:	00017d82 	.word	0x00017d82
   11fbc:	00018248 	.word	0x00018248
   11fc0:	00018260 	.word	0x00018260
   11fc4:	00018277 	.word	0x00018277

00011fc8 <z_impl_uart_irq_rx_enable>:
	if (api->irq_rx_enable) {
   11fc8:	6883      	ldr	r3, [r0, #8]
   11fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11fcc:	b103      	cbz	r3, 11fd0 <z_impl_uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   11fce:	4718      	bx	r3
}
   11fd0:	4770      	bx	lr

00011fd2 <uart_irq_tx_disable>:
	if (api->irq_tx_disable) {
   11fd2:	6883      	ldr	r3, [r0, #8]
   11fd4:	6a1b      	ldr	r3, [r3, #32]
   11fd6:	b103      	cbz	r3, 11fda <uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
   11fd8:	4718      	bx	r3
}
   11fda:	4770      	bx	lr

00011fdc <u8_to_dec>:
 */

#include <sys/util.h>

u8_t u8_to_dec(char *buf, u8_t buflen, u8_t value)
{
   11fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   11fde:	f04f 0c0a 	mov.w	ip, #10
{
   11fe2:	4605      	mov	r5, r0
	while (buflen > 0 && divisor > 0) {
   11fe4:	2604      	movs	r6, #4
	u8_t num_digits = 0;
   11fe6:	2000      	movs	r0, #0
	u8_t divisor = 100;
   11fe8:	2464      	movs	r4, #100	; 0x64
	while (buflen > 0 && divisor > 0) {
   11fea:	b111      	cbz	r1, 11ff2 <u8_to_dec+0x16>
   11fec:	3e01      	subs	r6, #1
   11fee:	d101      	bne.n	11ff4 <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   11ff0:	702e      	strb	r6, [r5, #0]
	}

	return num_digits;
}
   11ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		digit = value / divisor;
   11ff4:	fbb2 f7f4 	udiv	r7, r2, r4
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   11ff8:	42a2      	cmp	r2, r4
		digit = value / divisor;
   11ffa:	b2fb      	uxtb	r3, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   11ffc:	d202      	bcs.n	12004 <u8_to_dec+0x28>
   11ffe:	2c01      	cmp	r4, #1
   12000:	d000      	beq.n	12004 <u8_to_dec+0x28>
   12002:	b130      	cbz	r0, 12012 <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   12004:	3330      	adds	r3, #48	; 0x30
   12006:	f805 3b01 	strb.w	r3, [r5], #1
			buflen--;
   1200a:	3901      	subs	r1, #1
			num_digits++;
   1200c:	1c43      	adds	r3, r0, #1
			buflen--;
   1200e:	b2c9      	uxtb	r1, r1
			num_digits++;
   12010:	b2d8      	uxtb	r0, r3
		value -= digit * divisor;
   12012:	fb04 2217 	mls	r2, r4, r7, r2
		divisor /= 10;
   12016:	fbb4 f4fc 	udiv	r4, r4, ip
   1201a:	b2d2      	uxtb	r2, r2
   1201c:	e7e5      	b.n	11fea <u8_to_dec+0xe>

0001201e <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, u8_t *x)
{
	if (c >= '0' && c <= '9') {
   1201e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   12022:	b2db      	uxtb	r3, r3
   12024:	2b09      	cmp	r3, #9
   12026:	d802      	bhi.n	1202e <char2hex+0x10>
		*x = c - '0';
   12028:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   1202a:	2000      	movs	r0, #0
   1202c:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   1202e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   12032:	2b05      	cmp	r3, #5
   12034:	d802      	bhi.n	1203c <char2hex+0x1e>
		*x = c - 'a' + 10;
   12036:	3857      	subs	r0, #87	; 0x57
   12038:	7008      	strb	r0, [r1, #0]
   1203a:	e7f6      	b.n	1202a <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   1203c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   12040:	2b05      	cmp	r3, #5
   12042:	d801      	bhi.n	12048 <char2hex+0x2a>
		*x = c - 'A' + 10;
   12044:	3837      	subs	r0, #55	; 0x37
   12046:	e7f7      	b.n	12038 <char2hex+0x1a>
		return -EINVAL;
   12048:	f06f 0015 	mvn.w	r0, #21
}
   1204c:	4770      	bx	lr

0001204e <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, u8_t *buf, size_t buflen)
{
   1204e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12050:	4604      	mov	r4, r0
	u8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   12052:	f001 0001 	and.w	r0, r1, #1
   12056:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   1205a:	429d      	cmp	r5, r3
   1205c:	ea4f 0651 	mov.w	r6, r1, lsr #1
   12060:	d903      	bls.n	1206a <hex2bin+0x1c>
		return 0;
   12062:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   12064:	4628      	mov	r0, r5
   12066:	b003      	add	sp, #12
   12068:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   1206a:	b158      	cbz	r0, 12084 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   1206c:	7820      	ldrb	r0, [r4, #0]
   1206e:	f10d 0107 	add.w	r1, sp, #7
   12072:	f7ff ffd4 	bl	1201e <char2hex>
   12076:	2800      	cmp	r0, #0
   12078:	dbf3      	blt.n	12062 <hex2bin+0x14>
		buf[0] = dec;
   1207a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		hex++;
   1207e:	3401      	adds	r4, #1
		buf[0] = dec;
   12080:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   12084:	3401      	adds	r4, #1
   12086:	4416      	add	r6, r2
   12088:	42b2      	cmp	r2, r6
   1208a:	d0eb      	beq.n	12064 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   1208c:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   12090:	f10d 0107 	add.w	r1, sp, #7
   12094:	f7ff ffc3 	bl	1201e <char2hex>
   12098:	2800      	cmp	r0, #0
   1209a:	dbe2      	blt.n	12062 <hex2bin+0x14>
		buf[i] = dec << 4;
   1209c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   120a0:	f10d 0107 	add.w	r1, sp, #7
		buf[i] = dec << 4;
   120a4:	011b      	lsls	r3, r3, #4
   120a6:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   120a8:	f814 0b02 	ldrb.w	r0, [r4], #2
   120ac:	f7ff ffb7 	bl	1201e <char2hex>
   120b0:	2800      	cmp	r0, #0
   120b2:	dbd6      	blt.n	12062 <hex2bin+0x14>
		buf[i] += dec;
   120b4:	7813      	ldrb	r3, [r2, #0]
   120b6:	f89d 1007 	ldrb.w	r1, [sp, #7]
   120ba:	440b      	add	r3, r1
   120bc:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   120c0:	e7e2      	b.n	12088 <hex2bin+0x3a>

000120c2 <arch_printk_char_out>:
}
   120c2:	2000      	movs	r0, #0
   120c4:	4770      	bx	lr

000120c6 <print_err>:
{
   120c6:	b570      	push	{r4, r5, r6, lr}
   120c8:	460d      	mov	r5, r1
   120ca:	4604      	mov	r4, r0
	out('E', ctx);
   120cc:	2045      	movs	r0, #69	; 0x45
   120ce:	47a0      	blx	r4
	out('R', ctx);
   120d0:	4629      	mov	r1, r5
   120d2:	2052      	movs	r0, #82	; 0x52
   120d4:	47a0      	blx	r4
	out('R', ctx);
   120d6:	4629      	mov	r1, r5
   120d8:	4623      	mov	r3, r4
}
   120da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   120de:	2052      	movs	r0, #82	; 0x52
   120e0:	4718      	bx	r3

000120e2 <str_out>:
{
   120e2:	b530      	push	{r4, r5, lr}
   120e4:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   120e6:	680c      	ldr	r4, [r1, #0]
   120e8:	1c55      	adds	r5, r2, #1
   120ea:	b114      	cbz	r4, 120f2 <str_out+0x10>
   120ec:	684b      	ldr	r3, [r1, #4]
   120ee:	4293      	cmp	r3, r2
   120f0:	dc01      	bgt.n	120f6 <str_out+0x14>
		ctx->count++;
   120f2:	608d      	str	r5, [r1, #8]
}
   120f4:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   120f6:	3b01      	subs	r3, #1
   120f8:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   120fa:	bf08      	it	eq
   120fc:	2200      	moveq	r2, #0
   120fe:	608d      	str	r5, [r1, #8]
   12100:	bf0c      	ite	eq
   12102:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   12104:	54a0      	strbne	r0, [r4, r2]
   12106:	e7f5      	b.n	120f4 <str_out+0x12>

00012108 <printk>:
{
   12108:	b40f      	push	{r0, r1, r2, r3}
   1210a:	b507      	push	{r0, r1, r2, lr}
   1210c:	a904      	add	r1, sp, #16
   1210e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   12112:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   12114:	f7ef f9a4 	bl	1460 <vprintk>
}
   12118:	b003      	add	sp, #12
   1211a:	f85d eb04 	ldr.w	lr, [sp], #4
   1211e:	b004      	add	sp, #16
   12120:	4770      	bx	lr

00012122 <snprintk>:
{
   12122:	b40c      	push	{r2, r3}
   12124:	b507      	push	{r0, r1, r2, lr}
   12126:	ab04      	add	r3, sp, #16
   12128:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1212c:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1212e:	f7ef f9a5 	bl	147c <vsnprintk>
}
   12132:	b003      	add	sp, #12
   12134:	f85d eb04 	ldr.w	lr, [sp], #4
   12138:	b002      	add	sp, #8
   1213a:	4770      	bx	lr

0001213c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1213c:	4604      	mov	r4, r0
   1213e:	b508      	push	{r3, lr}
   12140:	4608      	mov	r0, r1
   12142:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   12144:	461a      	mov	r2, r3
   12146:	47a0      	blx	r4
	return z_impl_k_current_get();
   12148:	f7fe fd54 	bl	10bf4 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1214c:	f7f2 f8de 	bl	430c <z_impl_k_thread_abort>

00012150 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   12150:	b510      	push	{r4, lr}
   12152:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   12154:	f04f 33ff 	mov.w	r3, #4294967295
   12158:	f04f 32ff 	mov.w	r2, #4294967295
   1215c:	4620      	mov	r0, r4
   1215e:	f7fd fb79 	bl	f854 <z_impl_k_queue_get>
   12162:	4603      	mov	r3, r0
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   12164:	2800      	cmp	r0, #0
   12166:	d0f5      	beq.n	12154 <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   12168:	6842      	ldr	r2, [r0, #4]
   1216a:	3308      	adds	r3, #8
   1216c:	e8d3 1fef 	ldaex	r1, [r3]
   12170:	f021 0c01 	bic.w	ip, r1, #1
   12174:	e8c3 cfee 	stlex	lr, ip, [r3]
   12178:	f1be 0f00 	cmp.w	lr, #0
   1217c:	d1f6      	bne.n	1216c <z_work_q_main+0x1c>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   1217e:	07cb      	lsls	r3, r1, #31
   12180:	d500      	bpl.n	12184 <z_work_q_main+0x34>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   12182:	4790      	blx	r2
	z_impl_k_yield();
   12184:	f7fe fbb8 	bl	108f8 <z_impl_k_yield>
   12188:	e7e4      	b.n	12154 <z_work_q_main+0x4>

0001218a <chunk_field>:
}

static inline size_t chunk_field(struct z_heap *h, chunkid_t c,
				 enum chunk_fields f)
{
	void *cmem = &h->buf[c];
   1218a:	6803      	ldr	r3, [r0, #0]
   1218c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3

	if (big_heap(h)) {
   12190:	6883      	ldr	r3, [r0, #8]
   12192:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((u32_t *)cmem)[f];
   12196:	bf2c      	ite	cs
   12198:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((u16_t *)cmem)[f];
   1219c:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   121a0:	4770      	bx	lr

000121a2 <chunk_set>:

static inline void chunk_set(struct z_heap *h, chunkid_t c,
			     enum chunk_fields f, chunkid_t val)
{
   121a2:	b510      	push	{r4, lr}
	CHECK(c >= h->chunk0 && c < h->len);
	CHECK((val & ~((h->size_mask << 1) + 1)) == 0);
	CHECK((val & h->size_mask) < h->len);

	void *cmem = &h->buf[c];
   121a4:	6804      	ldr	r4, [r0, #0]

	if (big_heap(h)) {
   121a6:	6880      	ldr	r0, [r0, #8]
	void *cmem = &h->buf[c];
   121a8:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if (big_heap(h)) {
   121ac:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((u32_t *)cmem)[f] = (u32_t) val;
   121b0:	bf2c      	ite	cs
   121b2:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		((u16_t *)cmem)[f] = (u16_t) val;
   121b6:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   121ba:	bd10      	pop	{r4, pc}

000121bc <right_chunk>:
{
	return c - left_size(h, c);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
   121bc:	b538      	push	{r3, r4, r5, lr}
   121be:	4605      	mov	r5, r0
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   121c0:	2200      	movs	r2, #0
{
   121c2:	460c      	mov	r4, r1
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   121c4:	f7ff ffe1 	bl	1218a <chunk_field>
   121c8:	68eb      	ldr	r3, [r5, #12]
   121ca:	4018      	ands	r0, r3
	return c + size(h, c);
}
   121cc:	4420      	add	r0, r4
   121ce:	bd38      	pop	{r3, r4, r5, pc}

000121d0 <free_list_remove>:
	return ret;
}

static void free_list_remove(struct z_heap *h, int bidx,
			     chunkid_t c)
{
   121d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct z_heap_bucket *b = &h->buckets[bidx];
   121d4:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   121d8:	4616      	mov	r6, r2
	struct z_heap_bucket *b = &h->buckets[bidx];
   121da:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
	CHECK(b->next != 0);
	CHECK(b->list_size > 0);
	CHECK((((h->avail_buckets & (1 << bidx)) == 0)
	       == (h->buckets[bidx].next == 0)));

	b->list_size--;
   121de:	6853      	ldr	r3, [r2, #4]
{
   121e0:	4604      	mov	r4, r0
	b->list_size--;
   121e2:	3b01      	subs	r3, #1
{
   121e4:	460d      	mov	r5, r1
	b->list_size--;
   121e6:	6053      	str	r3, [r2, #4]

	if (b->list_size == 0) {
   121e8:	b953      	cbnz	r3, 12200 <free_list_remove+0x30>
		h->avail_buckets &= ~(1 << bidx);
   121ea:	2201      	movs	r2, #1
   121ec:	fa02 f101 	lsl.w	r1, r2, r1
   121f0:	6942      	ldr	r2, [r0, #20]
   121f2:	ea22 0201 	bic.w	r2, r2, r1
   121f6:	6142      	str	r2, [r0, #20]
		b->next = 0;
   121f8:	f848 3035 	str.w	r3, [r8, r5, lsl #3]

		b->next = second;
		chunk_set(h, first, FREE_NEXT, second);
		chunk_set(h, second, FREE_PREV, first);
	}
}
   121fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   12200:	4631      	mov	r1, r6
   12202:	2202      	movs	r2, #2
   12204:	f7ff ffc1 	bl	1218a <chunk_field>
	return chunk_field(h, c, FREE_NEXT);
   12208:	4631      	mov	r1, r6
	return chunk_field(h, c, FREE_PREV);
   1220a:	4607      	mov	r7, r0
	return chunk_field(h, c, FREE_NEXT);
   1220c:	2203      	movs	r2, #3
   1220e:	4620      	mov	r0, r4
   12210:	f7ff ffbb 	bl	1218a <chunk_field>
   12214:	4606      	mov	r6, r0
		chunk_set(h, first, FREE_NEXT, second);
   12216:	4603      	mov	r3, r0
   12218:	4639      	mov	r1, r7
		b->next = second;
   1221a:	f848 0035 	str.w	r0, [r8, r5, lsl #3]
		chunk_set(h, first, FREE_NEXT, second);
   1221e:	2203      	movs	r2, #3
   12220:	4620      	mov	r0, r4
   12222:	f7ff ffbe 	bl	121a2 <chunk_set>
		chunk_set(h, second, FREE_PREV, first);
   12226:	463b      	mov	r3, r7
   12228:	4631      	mov	r1, r6
   1222a:	4620      	mov	r0, r4
}
   1222c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		chunk_set(h, second, FREE_PREV, first);
   12230:	2202      	movs	r2, #2
   12232:	f7ff bfb6 	b.w	121a2 <chunk_set>

00012236 <free_list_add>:

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   12236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1223a:	4604      	mov	r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   1223c:	2200      	movs	r2, #0
   1223e:	460d      	mov	r5, r1
   12240:	f7ff ffa3 	bl	1218a <chunk_field>
   12244:	68e2      	ldr	r2, [r4, #12]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   12246:	68a3      	ldr	r3, [r4, #8]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   12248:	4010      	ands	r0, r2
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   1224a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
}

static int bucket_idx(struct z_heap *h, size_t sz)
{
	/* A chunk of size 2 is the minimum size on big heaps */
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   1224e:	fab0 f280 	clz	r2, r0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   12252:	bf34      	ite	cc
   12254:	2000      	movcc	r0, #0
   12256:	2001      	movcs	r0, #1
	int b = bucket_idx(h, size(h, c));

	if (h->buckets[b].list_size++ == 0) {
   12258:	6863      	ldr	r3, [r4, #4]
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   1225a:	f1c0 001f 	rsb	r0, r0, #31
   1225e:	1a80      	subs	r0, r0, r2
   12260:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   12264:	684a      	ldr	r2, [r1, #4]
   12266:	1c56      	adds	r6, r2, #1
   12268:	604e      	str	r6, [r1, #4]
   1226a:	b9a2      	cbnz	r2, 12296 <free_list_add+0x60>
		CHECK(h->buckets[b].next == 0);
		CHECK((h->avail_buckets & (1 << b)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << b);
   1226c:	2201      	movs	r2, #1
   1226e:	fa02 f100 	lsl.w	r1, r2, r0
   12272:	6962      	ldr	r2, [r4, #20]
   12274:	430a      	orrs	r2, r1
   12276:	6162      	str	r2, [r4, #20]
		h->buckets[b].next = c;
		chunk_set(h, c, FREE_PREV, c);
   12278:	4629      	mov	r1, r5
		h->buckets[b].next = c;
   1227a:	f843 5030 	str.w	r5, [r3, r0, lsl #3]
		chunk_set(h, c, FREE_PREV, c);
   1227e:	2202      	movs	r2, #2
   12280:	462b      	mov	r3, r5
   12282:	4620      	mov	r0, r4
   12284:	f7ff ff8d 	bl	121a2 <chunk_set>
		chunk_set(h, c, FREE_NEXT, c);
   12288:	2203      	movs	r2, #3
   1228a:	4629      	mov	r1, r5
		chunkid_t first = free_prev(h, second);

		chunk_set(h, c, FREE_PREV, first);
		chunk_set(h, c, FREE_NEXT, second);
		chunk_set(h, first, FREE_NEXT, c);
		chunk_set(h, second, FREE_PREV, c);
   1228c:	4620      	mov	r0, r4
	}

	CHECK(h->avail_buckets & (1 << bucket_idx(h, size(h, c))));
}
   1228e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		chunk_set(h, second, FREE_PREV, c);
   12292:	f7ff bf86 	b.w	121a2 <chunk_set>
		chunkid_t second = h->buckets[b].next;
   12296:	f853 7030 	ldr.w	r7, [r3, r0, lsl #3]
	return chunk_field(h, c, FREE_PREV);
   1229a:	2202      	movs	r2, #2
   1229c:	4639      	mov	r1, r7
   1229e:	4620      	mov	r0, r4
   122a0:	f7ff ff73 	bl	1218a <chunk_field>
   122a4:	4606      	mov	r6, r0
		chunk_set(h, c, FREE_PREV, first);
   122a6:	4603      	mov	r3, r0
   122a8:	2202      	movs	r2, #2
   122aa:	4629      	mov	r1, r5
   122ac:	4620      	mov	r0, r4
   122ae:	f7ff ff78 	bl	121a2 <chunk_set>
		chunk_set(h, c, FREE_NEXT, second);
   122b2:	463b      	mov	r3, r7
   122b4:	2203      	movs	r2, #3
   122b6:	4629      	mov	r1, r5
   122b8:	4620      	mov	r0, r4
   122ba:	f7ff ff72 	bl	121a2 <chunk_set>
		chunk_set(h, first, FREE_NEXT, c);
   122be:	2203      	movs	r2, #3
   122c0:	4631      	mov	r1, r6
   122c2:	462b      	mov	r3, r5
   122c4:	4620      	mov	r0, r4
   122c6:	f7ff ff6c 	bl	121a2 <chunk_set>
		chunk_set(h, second, FREE_PREV, c);
   122ca:	2202      	movs	r2, #2
   122cc:	4639      	mov	r1, r7
   122ce:	e7dd      	b.n	1228c <free_list_add+0x56>

000122d0 <split_alloc>:

/* Allocates (fit check has already been perfomred) from the next
 * chunk at the specified bucket level
 */
static void *split_alloc(struct z_heap *h, int bidx, size_t sz)
{
   122d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   122d4:	4604      	mov	r4, r0
	CHECK(h->buckets[bidx].next != 0
	      && sz <= size(h, h->buckets[bidx].next));

	chunkid_t c = h->buckets[bidx].next;
   122d6:	6843      	ldr	r3, [r0, #4]
{
   122d8:	4617      	mov	r7, r2
	chunkid_t c = h->buckets[bidx].next;
   122da:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]

	free_list_remove(h, bidx, c);
   122de:	462a      	mov	r2, r5
   122e0:	f7ff ff76 	bl	121d0 <free_list_remove>
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   122e4:	2200      	movs	r2, #0
   122e6:	4629      	mov	r1, r5
   122e8:	4620      	mov	r0, r4
   122ea:	f7ff ff4e 	bl	1218a <chunk_field>
	/* Split off remainder if it's usefully large */
	size_t rem = size(h, c) - sz;

	CHECK(rem < h->len);

	if (rem >= (big_heap(h) ? 2 : 1)) {
   122ee:	68a3      	ldr	r3, [r4, #8]
   122f0:	68e6      	ldr	r6, [r4, #12]
   122f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   122f6:	bf2c      	ite	cs
   122f8:	2302      	movcs	r3, #2
   122fa:	2301      	movcc	r3, #1
   122fc:	4006      	ands	r6, r0
	size_t rem = size(h, c) - sz;
   122fe:	1bf6      	subs	r6, r6, r7
	if (rem >= (big_heap(h) ? 2 : 1)) {
   12300:	42b3      	cmp	r3, r6
   12302:	d82d      	bhi.n	12360 <split_alloc+0x90>
		chunkid_t c2 = c + sz;
		chunkid_t c3 = right_chunk(h, c);
   12304:	4629      	mov	r1, r5
   12306:	4620      	mov	r0, r4
   12308:	f7ff ff58 	bl	121bc <right_chunk>
		chunkid_t c2 = c + sz;
   1230c:	eb05 0807 	add.w	r8, r5, r7

		chunk_set(h, c, SIZE_AND_USED, sz);
   12310:	463b      	mov	r3, r7
   12312:	2200      	movs	r2, #0
   12314:	4629      	mov	r1, r5
		chunkid_t c3 = right_chunk(h, c);
   12316:	4681      	mov	r9, r0
		chunk_set(h, c, SIZE_AND_USED, sz);
   12318:	4620      	mov	r0, r4
   1231a:	f7ff ff42 	bl	121a2 <chunk_set>
		chunk_set(h, c2, SIZE_AND_USED, rem);
   1231e:	4633      	mov	r3, r6
   12320:	2200      	movs	r2, #0
   12322:	4641      	mov	r1, r8
   12324:	4620      	mov	r0, r4
   12326:	f7ff ff3c 	bl	121a2 <chunk_set>
		chunk_set(h, c2, LEFT_SIZE, sz);
   1232a:	463b      	mov	r3, r7
   1232c:	2201      	movs	r2, #1
   1232e:	4641      	mov	r1, r8
   12330:	4620      	mov	r0, r4
   12332:	f7ff ff36 	bl	121a2 <chunk_set>
   12336:	2200      	movs	r2, #0
   12338:	4641      	mov	r1, r8
   1233a:	4620      	mov	r0, r4
   1233c:	f7ff ff25 	bl	1218a <chunk_field>
   12340:	68e3      	ldr	r3, [r4, #12]
		if (!last_chunk(h, c2)) {
   12342:	68a2      	ldr	r2, [r4, #8]
   12344:	4003      	ands	r3, r0
	return (c + size(h, c)) == h->len;
   12346:	4443      	add	r3, r8
		if (!last_chunk(h, c2)) {
   12348:	4293      	cmp	r3, r2
   1234a:	d005      	beq.n	12358 <split_alloc+0x88>
			chunk_set(h, c3, LEFT_SIZE, rem);
   1234c:	4633      	mov	r3, r6
   1234e:	2201      	movs	r2, #1
   12350:	4649      	mov	r1, r9
   12352:	4620      	mov	r0, r4
   12354:	f7ff ff25 	bl	121a2 <chunk_set>
		}
		free_list_add(h, c2);
   12358:	4641      	mov	r1, r8
   1235a:	4620      	mov	r0, r4
   1235c:	f7ff ff6b 	bl	12236 <free_list_add>
   12360:	4629      	mov	r1, r5
   12362:	2200      	movs	r2, #0
   12364:	4620      	mov	r0, r4
   12366:	f7ff ff10 	bl	1218a <chunk_field>
   1236a:	68e2      	ldr	r2, [r4, #12]
	chunk_set(h, c, SIZE_AND_USED,
   1236c:	4629      	mov	r1, r5
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   1236e:	ea00 0302 	and.w	r3, r0, r2
		  size(h, c) | (used ? (h->size_mask + 1) : 0));
   12372:	3201      	adds	r2, #1
	chunk_set(h, c, SIZE_AND_USED,
   12374:	4620      	mov	r0, r4
   12376:	4313      	orrs	r3, r2
   12378:	2200      	movs	r2, #0
   1237a:	f7ff ff12 	bl	121a2 <chunk_set>
	return big_heap(h) ? 8 : 4;
   1237e:	68a3      	ldr	r3, [r4, #8]
	u8_t *ret = ((u8_t *)&h->buf[c]) + chunk_header_bytes(h);
   12380:	6820      	ldr	r0, [r4, #0]
   12382:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   12386:	bf2c      	ite	cs
   12388:	2308      	movcs	r3, #8
   1238a:	2304      	movcc	r3, #4
   1238c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
	}

	chunk_set_used(h, c, true);

	return chunk_mem(h, c);
}
   12390:	4428      	add	r0, r5
   12392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00012396 <sys_heap_free>:

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   12396:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (mem == NULL) {
   1239a:	2900      	cmp	r1, #0
   1239c:	f000 80ac 	beq.w	124f8 <sys_heap_free+0x162>
		return; /* ISO C free() semantics */
	}

	struct z_heap *h = heap->heap;
   123a0:	6804      	ldr	r4, [r0, #0]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   123a2:	2200      	movs	r2, #0
	return big_heap(h) ? 8 : 4;
   123a4:	68a7      	ldr	r7, [r4, #8]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   123a6:	4620      	mov	r0, r4
	return big_heap(h) ? 8 : 4;
   123a8:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   123ac:	bf2c      	ite	cs
   123ae:	2508      	movcs	r5, #8
   123b0:	2504      	movcc	r5, #4
	chunkid_t c = ((u8_t *)mem - chunk_header_bytes(h)
   123b2:	1b4d      	subs	r5, r1, r5
		       - (u8_t *)h->buf) / CHUNK_UNIT;
   123b4:	6821      	ldr	r1, [r4, #0]
   123b6:	1a6d      	subs	r5, r5, r1
   123b8:	bf48      	it	mi
   123ba:	3507      	addmi	r5, #7
   123bc:	10ed      	asrs	r5, r5, #3
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   123be:	4629      	mov	r1, r5
   123c0:	f7ff fee3 	bl	1218a <chunk_field>
   123c4:	68e6      	ldr	r6, [r4, #12]
   123c6:	ea06 0800 	and.w	r8, r6, r0
	return (c + size(h, c)) == h->len;
   123ca:	eb05 0308 	add.w	r3, r5, r8

	/* Merge with right chunk?  We can just absorb it. */
	if (!last_chunk(h, c) && !used(h, right_chunk(h, c))) {
   123ce:	42bb      	cmp	r3, r7
   123d0:	d036      	beq.n	12440 <sys_heap_free+0xaa>
   123d2:	4629      	mov	r1, r5
   123d4:	4620      	mov	r0, r4
   123d6:	f7ff fef1 	bl	121bc <right_chunk>
	return (chunk_field(h, c, SIZE_AND_USED) & ~h->size_mask) != 0;
   123da:	2200      	movs	r2, #0
   123dc:	4601      	mov	r1, r0
   123de:	4682      	mov	sl, r0
   123e0:	4620      	mov	r0, r4
   123e2:	f7ff fed2 	bl	1218a <chunk_field>
   123e6:	ea30 0906 	bics.w	r9, r0, r6
   123ea:	d129      	bne.n	12440 <sys_heap_free+0xaa>
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   123ec:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   123f0:	bf34      	ite	cc
   123f2:	2700      	movcc	r7, #0
   123f4:	2701      	movcs	r7, #1
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   123f6:	4006      	ands	r6, r0
		chunkid_t rc = right_chunk(h, c);
		size_t newsz = size(h, c) + size(h, rc);
   123f8:	44b0      	add	r8, r6
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   123fa:	fab6 f686 	clz	r6, r6
   123fe:	f1c7 071f 	rsb	r7, r7, #31

		free_list_remove(h, bucket_idx(h, size(h, rc)), rc);
   12402:	4652      	mov	r2, sl
   12404:	4620      	mov	r0, r4
   12406:	1bb9      	subs	r1, r7, r6
   12408:	f7ff fee2 	bl	121d0 <free_list_remove>
		chunk_set(h, c, SIZE_AND_USED, newsz);
   1240c:	4643      	mov	r3, r8
   1240e:	464a      	mov	r2, r9
   12410:	4629      	mov	r1, r5
   12412:	4620      	mov	r0, r4
   12414:	f7ff fec5 	bl	121a2 <chunk_set>
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   12418:	4629      	mov	r1, r5
   1241a:	4620      	mov	r0, r4
   1241c:	f7ff feb5 	bl	1218a <chunk_field>
   12420:	68e3      	ldr	r3, [r4, #12]
   12422:	4018      	ands	r0, r3
		if (!last_chunk(h, c)) {
   12424:	68a3      	ldr	r3, [r4, #8]
	return (c + size(h, c)) == h->len;
   12426:	4428      	add	r0, r5
		if (!last_chunk(h, c)) {
   12428:	4283      	cmp	r3, r0
   1242a:	d009      	beq.n	12440 <sys_heap_free+0xaa>
			chunk_set(h, right_chunk(h, c), LEFT_SIZE, newsz);
   1242c:	4629      	mov	r1, r5
   1242e:	4620      	mov	r0, r4
   12430:	f7ff fec4 	bl	121bc <right_chunk>
   12434:	4643      	mov	r3, r8
   12436:	4601      	mov	r1, r0
   12438:	2201      	movs	r2, #1
   1243a:	4620      	mov	r0, r4
   1243c:	f7ff feb1 	bl	121a2 <chunk_set>
		}
	}

	/* Merge with left chunk?  It absorbs us. */
	if (c != h->chunk0 && !used(h, left_chunk(h, c))) {
   12440:	6923      	ldr	r3, [r4, #16]
   12442:	42ab      	cmp	r3, r5
   12444:	d046      	beq.n	124d4 <sys_heap_free+0x13e>
	return chunk_field(h, c, LEFT_SIZE);
   12446:	2201      	movs	r2, #1
   12448:	4629      	mov	r1, r5
   1244a:	4620      	mov	r0, r4
   1244c:	f7ff fe9d 	bl	1218a <chunk_field>
	return c - left_size(h, c);
   12450:	1a2f      	subs	r7, r5, r0
	return (chunk_field(h, c, SIZE_AND_USED) & ~h->size_mask) != 0;
   12452:	2200      	movs	r2, #0
   12454:	4639      	mov	r1, r7
   12456:	4620      	mov	r0, r4
   12458:	f7ff fe97 	bl	1218a <chunk_field>
   1245c:	f8d4 800c 	ldr.w	r8, [r4, #12]
   12460:	4606      	mov	r6, r0
   12462:	ea30 0908 	bics.w	r9, r0, r8
   12466:	d135      	bne.n	124d4 <sys_heap_free+0x13e>
   12468:	464a      	mov	r2, r9
   1246a:	4629      	mov	r1, r5
   1246c:	4620      	mov	r0, r4
   1246e:	f7ff fe8c 	bl	1218a <chunk_field>
   12472:	4682      	mov	sl, r0
		chunkid_t lc = left_chunk(h, c);
		chunkid_t rc = right_chunk(h, c);
   12474:	4629      	mov	r1, r5
   12476:	4620      	mov	r0, r4
   12478:	f7ff fea0 	bl	121bc <right_chunk>
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   1247c:	68a1      	ldr	r1, [r4, #8]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   1247e:	ea06 0608 	and.w	r6, r6, r8
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   12482:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   12486:	bf34      	ite	cc
   12488:	2100      	movcc	r1, #0
   1248a:	2101      	movcs	r1, #1
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   1248c:	ea08 080a 	and.w	r8, r8, sl
		size_t csz = size(h, c);
		size_t merged_sz = csz + size(h, lc);
   12490:	44b0      	add	r8, r6
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   12492:	fab6 f686 	clz	r6, r6
   12496:	f1c1 011f 	rsb	r1, r1, #31

		free_list_remove(h, bucket_idx(h, size(h, lc)), lc);
   1249a:	463a      	mov	r2, r7
   1249c:	1b89      	subs	r1, r1, r6
		chunkid_t rc = right_chunk(h, c);
   1249e:	4605      	mov	r5, r0
		free_list_remove(h, bucket_idx(h, size(h, lc)), lc);
   124a0:	4620      	mov	r0, r4
   124a2:	f7ff fe95 	bl	121d0 <free_list_remove>
		chunk_set(h, lc, SIZE_AND_USED, merged_sz);
   124a6:	4643      	mov	r3, r8
   124a8:	464a      	mov	r2, r9
   124aa:	4639      	mov	r1, r7
   124ac:	4620      	mov	r0, r4
   124ae:	f7ff fe78 	bl	121a2 <chunk_set>
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   124b2:	4639      	mov	r1, r7
   124b4:	4620      	mov	r0, r4
   124b6:	f7ff fe68 	bl	1218a <chunk_field>
   124ba:	68e3      	ldr	r3, [r4, #12]
   124bc:	4018      	ands	r0, r3
		if (!last_chunk(h, lc)) {
   124be:	68a3      	ldr	r3, [r4, #8]
	return (c + size(h, c)) == h->len;
   124c0:	4438      	add	r0, r7
		if (!last_chunk(h, lc)) {
   124c2:	4298      	cmp	r0, r3
   124c4:	d005      	beq.n	124d2 <sys_heap_free+0x13c>
			chunk_set(h, rc, LEFT_SIZE, merged_sz);
   124c6:	4643      	mov	r3, r8
   124c8:	2201      	movs	r2, #1
   124ca:	4629      	mov	r1, r5
   124cc:	4620      	mov	r0, r4
   124ce:	f7ff fe68 	bl	121a2 <chunk_set>
		}

		c = lc;
   124d2:	463d      	mov	r5, r7
   124d4:	4629      	mov	r1, r5
   124d6:	2200      	movs	r2, #0
   124d8:	4620      	mov	r0, r4
   124da:	f7ff fe56 	bl	1218a <chunk_field>
   124de:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, SIZE_AND_USED,
   124e0:	4629      	mov	r1, r5
   124e2:	4003      	ands	r3, r0
   124e4:	2200      	movs	r2, #0
   124e6:	4620      	mov	r0, r4
   124e8:	f7ff fe5b 	bl	121a2 <chunk_set>
	}

	chunk_set_used(h, c, false);
	free_list_add(h, c);
   124ec:	4629      	mov	r1, r5
   124ee:	4620      	mov	r0, r4
}
   124f0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	free_list_add(h, c);
   124f4:	f7ff be9f 	b.w	12236 <free_list_add>
}
   124f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000124fc <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   124fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct z_heap *h = heap->heap;
   12500:	6804      	ldr	r4, [r0, #0]
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   12502:	1dcd      	adds	r5, r1, #7
	return big_heap(h) ? 8 : 4;
   12504:	68a2      	ldr	r2, [r4, #8]
   12506:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1250a:	bf2c      	ite	cs
   1250c:	2308      	movcs	r3, #8
   1250e:	2304      	movcc	r3, #4
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   12510:	441d      	add	r5, r3
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   12512:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   12516:	ea4f 05d5 	mov.w	r5, r5, lsr #3
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   1251a:	fab5 f685 	clz	r6, r5
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   1251e:	bf34      	ite	cc
   12520:	2300      	movcc	r3, #0
   12522:	2301      	movcs	r3, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   12524:	441e      	add	r6, r3
   12526:	f1c6 081f 	rsb	r8, r6, #31
	size_t sz = bytes_to_chunksz(h, bytes);
	int bi = bucket_idx(h, sz);
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bytes == 0 || bi > bucket_idx(h, h->len)) {
   1252a:	2900      	cmp	r1, #0
   1252c:	d03b      	beq.n	125a6 <sys_heap_alloc+0xaa>
   1252e:	fab2 f282 	clz	r2, r2
   12532:	f1c3 031f 	rsb	r3, r3, #31
   12536:	1a9b      	subs	r3, r3, r2
   12538:	4598      	cmp	r8, r3
   1253a:	dc34      	bgt.n	125a6 <sys_heap_alloc+0xaa>
	struct z_heap_bucket *b = &h->buckets[bi];
   1253c:	6867      	ldr	r7, [r4, #4]
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	int loops = MIN(b->list_size, CONFIG_SYS_HEAP_ALLOC_LOOPS);

	for (int i = 0; i < loops; i++) {
   1253e:	f04f 0a00 	mov.w	sl, #0
	struct z_heap_bucket *b = &h->buckets[bi];
   12542:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
	int loops = MIN(b->list_size, CONFIG_SYS_HEAP_ALLOC_LOOPS);
   12546:	687b      	ldr	r3, [r7, #4]
   12548:	2b03      	cmp	r3, #3
   1254a:	bf28      	it	cs
   1254c:	2303      	movcs	r3, #3
   1254e:	4699      	mov	r9, r3
	for (int i = 0; i < loops; i++) {
   12550:	45ca      	cmp	sl, r9
   12552:	db0d      	blt.n	12570 <sys_heap_alloc+0x74>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   12554:	f04f 31ff 	mov.w	r1, #4294967295
   12558:	6963      	ldr	r3, [r4, #20]
   1255a:	f1c6 0620 	rsb	r6, r6, #32
   1255e:	40b1      	lsls	r1, r6

	if ((bmask & h->avail_buckets) != 0) {
   12560:	4019      	ands	r1, r3
   12562:	d020      	beq.n	125a6 <sys_heap_alloc+0xaa>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);

		return split_alloc(h, minbucket, sz);
   12564:	fa91 f1a1 	rbit	r1, r1
   12568:	462a      	mov	r2, r5
   1256a:	fab1 f181 	clz	r1, r1
   1256e:	e00c      	b.n	1258a <sys_heap_alloc+0x8e>
		if (size(h, b->next) >= sz) {
   12570:	f8d7 b000 	ldr.w	fp, [r7]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   12574:	2200      	movs	r2, #0
   12576:	4659      	mov	r1, fp
   12578:	4620      	mov	r0, r4
   1257a:	f7ff fe06 	bl	1218a <chunk_field>
   1257e:	68e3      	ldr	r3, [r4, #12]
   12580:	4018      	ands	r0, r3
   12582:	42a8      	cmp	r0, r5
   12584:	d306      	bcc.n	12594 <sys_heap_alloc+0x98>
			return split_alloc(h, bi, sz);
   12586:	462a      	mov	r2, r5
   12588:	4641      	mov	r1, r8
		return split_alloc(h, minbucket, sz);
   1258a:	4620      	mov	r0, r4
	}

	return NULL;
}
   1258c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return split_alloc(h, minbucket, sz);
   12590:	f7ff be9e 	b.w	122d0 <split_alloc>
	return chunk_field(h, c, FREE_NEXT);
   12594:	2203      	movs	r2, #3
   12596:	4659      	mov	r1, fp
   12598:	4620      	mov	r0, r4
   1259a:	f7ff fdf6 	bl	1218a <chunk_field>
	for (int i = 0; i < loops; i++) {
   1259e:	f10a 0a01 	add.w	sl, sl, #1
		b->next = free_next(h, b->next);
   125a2:	6038      	str	r0, [r7, #0]
	for (int i = 0; i < loops; i++) {
   125a4:	e7d4      	b.n	12550 <sys_heap_alloc+0x54>
}
   125a6:	2000      	movs	r0, #0
   125a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000125ac <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   125ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	CHECK(bytes < 0x800000000ULL);
#endif

	/* Round the start up, the end down */
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
   125ae:	188b      	adds	r3, r1, r2

	heap->heap = (struct z_heap *)addr;
	h->buf = (u64_t *)addr;
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
	h->len = buf_sz;
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   125b0:	f647 72ff 	movw	r2, #32767	; 0x7fff
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
   125b4:	1dcc      	adds	r4, r1, #7
   125b6:	f024 0407 	bic.w	r4, r4, #7
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
   125ba:	f023 0307 	bic.w	r3, r3, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   125be:	1b1b      	subs	r3, r3, r4
   125c0:	08db      	lsrs	r3, r3, #3
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   125c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   125c6:	bf2c      	ite	cs
   125c8:	f06f 4100 	mvncs.w	r1, #2147483648	; 0x80000000
   125cc:	4611      	movcc	r1, r2
	heap->heap = (struct z_heap *)addr;
   125ce:	6004      	str	r4, [r0, #0]
	h->avail_buckets = 0;
   125d0:	2000      	movs	r0, #0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   125d2:	4293      	cmp	r3, r2
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   125d4:	60e1      	str	r1, [r4, #12]
   125d6:	bf94      	ite	ls
   125d8:	2100      	movls	r1, #0
   125da:	2101      	movhi	r1, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   125dc:	fab3 f683 	clz	r6, r3
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   125e0:	4617      	mov	r7, r2
				* sizeof(struct z_heap_bucket));

	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);

	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
		heap->heap->buckets[i].list_size = 0;
   125e2:	4684      	mov	ip, r0
	size_t buckets_bytes = ((bucket_idx(h, buf_sz) + 1)
   125e4:	f1c1 0120 	rsb	r1, r1, #32
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
   125e8:	f104 0518 	add.w	r5, r4, #24
	size_t buckets_bytes = ((bucket_idx(h, buf_sz) + 1)
   125ec:	1b89      	subs	r1, r1, r6
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   125ee:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
	h->len = buf_sz;
   125f2:	e9c4 5301 	strd	r5, r3, [r4, #4]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
   125f6:	3103      	adds	r1, #3
	h->buf = (u64_t *)addr;
   125f8:	6024      	str	r4, [r4, #0]
	h->avail_buckets = 0;
   125fa:	6160      	str	r0, [r4, #20]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
   125fc:	6121      	str	r1, [r4, #16]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   125fe:	68a2      	ldr	r2, [r4, #8]
   12600:	42ba      	cmp	r2, r7
   12602:	bf94      	ite	ls
   12604:	2200      	movls	r2, #0
   12606:	2201      	movhi	r2, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   12608:	f1c2 021f 	rsb	r2, r2, #31
   1260c:	1b92      	subs	r2, r2, r6
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
   1260e:	4290      	cmp	r0, r2
   12610:	dd0a      	ble.n	12628 <sys_heap_init+0x7c>
		heap->heap->buckets[i].next = 0;
	}

	chunk_set(h, h->chunk0, SIZE_AND_USED, buf_sz - h->chunk0);
   12612:	4620      	mov	r0, r4
   12614:	1a5b      	subs	r3, r3, r1
   12616:	2200      	movs	r2, #0
   12618:	f7ff fdc3 	bl	121a2 <chunk_set>
	free_list_add(h, h->chunk0);
   1261c:	4620      	mov	r0, r4
   1261e:	6921      	ldr	r1, [r4, #16]
}
   12620:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, h->chunk0);
   12624:	f7ff be07 	b.w	12236 <free_list_add>
		heap->heap->buckets[i].list_size = 0;
   12628:	f8c5 c004 	str.w	ip, [r5, #4]
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
   1262c:	3001      	adds	r0, #1
		heap->heap->buckets[i].next = 0;
   1262e:	f845 cb08 	str.w	ip, [r5], #8
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
   12632:	e7e4      	b.n	125fe <sys_heap_init+0x52>

00012634 <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   12634:	4040      	eors	r0, r0
   12636:	f380 8811 	msr	BASEPRI, r0
   1263a:	f04f 0004 	mov.w	r0, #4
   1263e:	df02      	svc	2
}
   12640:	4770      	bx	lr

00012642 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   12642:	4770      	bx	lr

00012644 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   12644:	f7fb bd50 	b.w	e0e8 <SystemInit>

00012648 <flash_write_protection_set>:
	return api->write_protection(dev, enable);
   12648:	6883      	ldr	r3, [r0, #8]
   1264a:	68db      	ldr	r3, [r3, #12]
   1264c:	4718      	bx	r3

0001264e <nvs_flash_rd>:
{
   1264e:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   12650:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   12652:	8984      	ldrh	r4, [r0, #12]
   12654:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   12656:	fa16 f181 	uxtah	r1, r6, r1
   1265a:	fb05 1104 	mla	r1, r5, r4, r1
	rc = flash_read(fs->flash_device, offset, data, len);
   1265e:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return api->read(dev, offset, data, len);
   12660:	6884      	ldr	r4, [r0, #8]
   12662:	6824      	ldr	r4, [r4, #0]
   12664:	46a4      	mov	ip, r4
}
   12666:	bc70      	pop	{r4, r5, r6}
   12668:	4760      	bx	ip

0001266a <nvs_flash_block_cmp>:
{
   1266a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1266e:	4681      	mov	r9, r0
   12670:	460e      	mov	r6, r1
   12672:	4617      	mov	r7, r2
   12674:	461c      	mov	r4, r3
	block_size = NVS_BLOCK_SIZE & ~(fs->write_block_size - 1U);
   12676:	7c05      	ldrb	r5, [r0, #16]
{
   12678:	b089      	sub	sp, #36	; 0x24
	block_size = NVS_BLOCK_SIZE & ~(fs->write_block_size - 1U);
   1267a:	426d      	negs	r5, r5
   1267c:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   12680:	b91c      	cbnz	r4, 1268a <nvs_flash_block_cmp+0x20>
	return 0;
   12682:	4620      	mov	r0, r4
}
   12684:	b009      	add	sp, #36	; 0x24
   12686:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   1268a:	42ac      	cmp	r4, r5
   1268c:	46a0      	mov	r8, r4
   1268e:	bf28      	it	cs
   12690:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   12692:	466a      	mov	r2, sp
   12694:	4643      	mov	r3, r8
   12696:	4631      	mov	r1, r6
   12698:	4648      	mov	r0, r9
   1269a:	f7ff ffd8 	bl	1264e <nvs_flash_rd>
		if (rc) {
   1269e:	2800      	cmp	r0, #0
   126a0:	d1f0      	bne.n	12684 <nvs_flash_block_cmp+0x1a>
		rc = memcmp(data8, buf, bytes_to_cmp);
   126a2:	4642      	mov	r2, r8
   126a4:	4669      	mov	r1, sp
   126a6:	4638      	mov	r0, r7
   126a8:	f001 f833 	bl	13712 <memcmp>
		if (rc) {
   126ac:	b920      	cbnz	r0, 126b8 <nvs_flash_block_cmp+0x4e>
		len -= bytes_to_cmp;
   126ae:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   126b2:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   126b4:	4447      	add	r7, r8
   126b6:	e7e3      	b.n	12680 <nvs_flash_block_cmp+0x16>
			return 1;
   126b8:	2001      	movs	r0, #1
   126ba:	e7e3      	b.n	12684 <nvs_flash_block_cmp+0x1a>

000126bc <nvs_ate_crc8_check>:
{
   126bc:	b510      	push	{r4, lr}
   126be:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   126c0:	4601      	mov	r1, r0
   126c2:	2207      	movs	r2, #7
   126c4:	20ff      	movs	r0, #255	; 0xff
   126c6:	f7ee fcc3 	bl	1050 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   126ca:	79e3      	ldrb	r3, [r4, #7]
}
   126cc:	1a18      	subs	r0, r3, r0
   126ce:	bf18      	it	ne
   126d0:	2001      	movne	r0, #1
   126d2:	bd10      	pop	{r4, pc}

000126d4 <nvs_ate_crc8_update>:
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   126d4:	4601      	mov	r1, r0
{
   126d6:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   126d8:	2207      	movs	r2, #7
{
   126da:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   126dc:	20ff      	movs	r0, #255	; 0xff
   126de:	f7ee fcb7 	bl	1050 <crc8_ccitt>
	entry->crc8 = crc8;
   126e2:	71e0      	strb	r0, [r4, #7]
}
   126e4:	bd10      	pop	{r4, pc}

000126e6 <nvs_al_size.isra.0>:
static inline size_t nvs_al_size(struct nvs_fs *fs, size_t len)
   126e6:	4603      	mov	r3, r0
   126e8:	4608      	mov	r0, r1
	if (fs->write_block_size <= 1U) {
   126ea:	2b01      	cmp	r3, #1
	return (len + (fs->write_block_size - 1U)) & ~(fs->write_block_size - 1U);
   126ec:	bf81      	itttt	hi
   126ee:	f103 31ff 	addhi.w	r1, r3, #4294967295
   126f2:	1809      	addhi	r1, r1, r0
   126f4:	4258      	neghi	r0, r3
   126f6:	4008      	andhi	r0, r1
}
   126f8:	4770      	bx	lr

000126fa <nvs_sector_advance.isra.0>:
	*addr += (1 << ADDR_SECT_SHIFT);
   126fa:	680b      	ldr	r3, [r1, #0]
   126fc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   12700:	0c1a      	lsrs	r2, r3, #16
   12702:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   12706:	bf08      	it	eq
   12708:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   1270c:	600b      	str	r3, [r1, #0]
}
   1270e:	4770      	bx	lr

00012710 <nvs_flash_cmp_const.constprop.0>:
static int nvs_flash_cmp_const(struct nvs_fs *fs, u32_t addr, u8_t value,
   12710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	block_size = NVS_BLOCK_SIZE & ~(fs->write_block_size - 1U);
   12714:	7c05      	ldrb	r5, [r0, #16]
static int nvs_flash_cmp_const(struct nvs_fs *fs, u32_t addr, u8_t value,
   12716:	b088      	sub	sp, #32
	block_size = NVS_BLOCK_SIZE & ~(fs->write_block_size - 1U);
   12718:	426d      	negs	r5, r5
   1271a:	f005 0520 	and.w	r5, r5, #32
static int nvs_flash_cmp_const(struct nvs_fs *fs, u32_t addr, u8_t value,
   1271e:	4607      	mov	r7, r0
   12720:	460e      	mov	r6, r1
   12722:	4614      	mov	r4, r2
	(void)memset(cmp, value, block_size);
   12724:	21ff      	movs	r1, #255	; 0xff
   12726:	462a      	mov	r2, r5
   12728:	4668      	mov	r0, sp
   1272a:	f001 f82d 	bl	13788 <memset>
	while (len) {
   1272e:	b91c      	cbnz	r4, 12738 <nvs_flash_cmp_const.constprop.0+0x28>
	return 0;
   12730:	4620      	mov	r0, r4
}
   12732:	b008      	add	sp, #32
   12734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   12738:	42a5      	cmp	r5, r4
   1273a:	46a8      	mov	r8, r5
   1273c:	bf28      	it	cs
   1273e:	46a0      	movcs	r8, r4
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   12740:	466a      	mov	r2, sp
   12742:	4643      	mov	r3, r8
   12744:	4631      	mov	r1, r6
   12746:	4638      	mov	r0, r7
   12748:	f7ff ff8f 	bl	1266a <nvs_flash_block_cmp>
		if (rc) {
   1274c:	2800      	cmp	r0, #0
   1274e:	d1f0      	bne.n	12732 <nvs_flash_cmp_const.constprop.0+0x22>
		len -= bytes_to_cmp;
   12750:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   12754:	4446      	add	r6, r8
   12756:	e7ea      	b.n	1272e <nvs_flash_cmp_const.constprop.0+0x1e>

00012758 <nvs_flash_erase_sector>:
{
   12758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	addr &= ADDR_SECT_MASK;
   1275c:	0c0e      	lsrs	r6, r1, #16
   1275e:	0436      	lsls	r6, r6, #16
	rc = nvs_flash_cmp_const(fs, addr, 0xff, fs->sector_size);
   12760:	4631      	mov	r1, r6
   12762:	8982      	ldrh	r2, [r0, #12]
{
   12764:	4605      	mov	r5, r0
	rc = nvs_flash_cmp_const(fs, addr, 0xff, fs->sector_size);
   12766:	f7ff ffd3 	bl	12710 <nvs_flash_cmp_const.constprop.0>
	if (rc <= 0) {
   1276a:	1e04      	subs	r4, r0, #0
   1276c:	dd17      	ble.n	1279e <nvs_flash_erase_sector+0x46>
	rc = flash_write_protection_set(fs->flash_device, 0);
   1276e:	2100      	movs	r1, #0
   12770:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	offset = fs->offset;
   12772:	682f      	ldr	r7, [r5, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   12774:	f8b5 800c 	ldrh.w	r8, [r5, #12]
	rc = flash_write_protection_set(fs->flash_device, 0);
   12778:	f7ff ff66 	bl	12648 <flash_write_protection_set>
	if (rc) {
   1277c:	4604      	mov	r4, r0
   1277e:	b970      	cbnz	r0, 1279e <nvs_flash_erase_sector+0x46>
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   12780:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   12782:	89aa      	ldrh	r2, [r5, #12]
	return api->erase(dev, offset, size);
   12784:	6883      	ldr	r3, [r0, #8]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   12786:	0c31      	lsrs	r1, r6, #16
   12788:	fb08 7101 	mla	r1, r8, r1, r7
   1278c:	689b      	ldr	r3, [r3, #8]
   1278e:	4798      	blx	r3
	if (rc) {
   12790:	4604      	mov	r4, r0
   12792:	b920      	cbnz	r0, 1279e <nvs_flash_erase_sector+0x46>
	(void) flash_write_protection_set(fs->flash_device, 1);
   12794:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	return api->write_protection(dev, enable);
   12796:	6883      	ldr	r3, [r0, #8]
   12798:	2101      	movs	r1, #1
   1279a:	68db      	ldr	r3, [r3, #12]
   1279c:	4798      	blx	r3
}
   1279e:	4620      	mov	r0, r4
   127a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000127a4 <nvs_flash_al_wrt.part.0>:
static int nvs_flash_al_wrt(struct nvs_fs *fs, u32_t addr, const void *data,
   127a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   127a8:	4605      	mov	r5, r0
   127aa:	460c      	mov	r4, r1
	offset = fs->offset;
   127ac:	f8d0 a000 	ldr.w	sl, [r0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   127b0:	8987      	ldrh	r7, [r0, #12]
static int nvs_flash_al_wrt(struct nvs_fs *fs, u32_t addr, const void *data,
   127b2:	b088      	sub	sp, #32
	rc = flash_write_protection_set(fs->flash_device, 0);
   127b4:	2100      	movs	r1, #0
   127b6:	6a80      	ldr	r0, [r0, #40]	; 0x28
static int nvs_flash_al_wrt(struct nvs_fs *fs, u32_t addr, const void *data,
   127b8:	4690      	mov	r8, r2
   127ba:	461e      	mov	r6, r3
	rc = flash_write_protection_set(fs->flash_device, 0);
   127bc:	f7ff ff44 	bl	12648 <flash_write_protection_set>
	if (rc) {
   127c0:	bb78      	cbnz	r0, 12822 <nvs_flash_al_wrt.part.0+0x7e>
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   127c2:	ea4f 4914 	mov.w	r9, r4, lsr #16
	offset += addr & ADDR_OFFS_MASK;
   127c6:	fa1a f484 	uxtah	r4, sl, r4
   127ca:	fb07 4909 	mla	r9, r7, r9, r4
	blen = len & ~(fs->write_block_size - 1U);
   127ce:	7c2f      	ldrb	r7, [r5, #16]
   127d0:	427f      	negs	r7, r7
	if (blen > 0) {
   127d2:	4037      	ands	r7, r6
   127d4:	d00b      	beq.n	127ee <nvs_flash_al_wrt.part.0+0x4a>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   127d6:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	return api->write(dev, offset, data, len);
   127d8:	6883      	ldr	r3, [r0, #8]
   127da:	4642      	mov	r2, r8
   127dc:	685c      	ldr	r4, [r3, #4]
   127de:	4649      	mov	r1, r9
   127e0:	463b      	mov	r3, r7
   127e2:	47a0      	blx	r4
		if (rc) {
   127e4:	4604      	mov	r4, r0
   127e6:	b9b8      	cbnz	r0, 12818 <nvs_flash_al_wrt.part.0+0x74>
		len -= blen;
   127e8:	1bf6      	subs	r6, r6, r7
		offset += blen;
   127ea:	44b9      	add	r9, r7
		data8 += blen;
   127ec:	44b8      	add	r8, r7
	if (len) {
   127ee:	b1de      	cbz	r6, 12828 <nvs_flash_al_wrt.part.0+0x84>
		memcpy(buf, data8, len);
   127f0:	4632      	mov	r2, r6
   127f2:	4641      	mov	r1, r8
   127f4:	4668      	mov	r0, sp
   127f6:	f000 ff9c 	bl	13732 <memcpy>
		(void)memset(buf + len, 0xff, fs->write_block_size - len);
   127fa:	7c2a      	ldrb	r2, [r5, #16]
   127fc:	21ff      	movs	r1, #255	; 0xff
   127fe:	1b92      	subs	r2, r2, r6
   12800:	eb0d 0006 	add.w	r0, sp, r6
   12804:	f000 ffc0 	bl	13788 <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   12808:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   1280a:	7c2b      	ldrb	r3, [r5, #16]
   1280c:	6882      	ldr	r2, [r0, #8]
   1280e:	4649      	mov	r1, r9
   12810:	6854      	ldr	r4, [r2, #4]
   12812:	466a      	mov	r2, sp
   12814:	47a0      	blx	r4
   12816:	4604      	mov	r4, r0
	(void) flash_write_protection_set(fs->flash_device, 1);
   12818:	2101      	movs	r1, #1
   1281a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   1281c:	f7ff ff14 	bl	12648 <flash_write_protection_set>
	return rc;
   12820:	4620      	mov	r0, r4
}
   12822:	b008      	add	sp, #32
   12824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
end:
   12828:	4634      	mov	r4, r6
   1282a:	e7f5      	b.n	12818 <nvs_flash_al_wrt.part.0+0x74>

0001282c <nvs_flash_ate_wrt>:
{
   1282c:	b510      	push	{r4, lr}
   1282e:	460a      	mov	r2, r1
	if (!len) {
   12830:	2308      	movs	r3, #8
   12832:	6841      	ldr	r1, [r0, #4]
{
   12834:	4604      	mov	r4, r0
   12836:	f7ff ffb5 	bl	127a4 <nvs_flash_al_wrt.part.0>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   1283a:	2108      	movs	r1, #8
   1283c:	4602      	mov	r2, r0
   1283e:	7c20      	ldrb	r0, [r4, #16]
   12840:	f7ff ff51 	bl	126e6 <nvs_al_size.isra.0>
   12844:	6863      	ldr	r3, [r4, #4]
   12846:	1a1b      	subs	r3, r3, r0
   12848:	6063      	str	r3, [r4, #4]
}
   1284a:	4610      	mov	r0, r2
   1284c:	bd10      	pop	{r4, pc}

0001284e <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   1284e:	2300      	movs	r3, #0
   12850:	461a      	mov	r2, r3
   12852:	f7ef b88d 	b.w	1970 <nvs_write>

00012856 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, u16_t id, void *data, size_t len)
{
   12856:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   12858:	2400      	movs	r4, #0
   1285a:	9400      	str	r4, [sp, #0]
   1285c:	f7ef f960 	bl	1b20 <nvs_read_hist>
	return rc;
}
   12860:	b002      	add	sp, #8
   12862:	bd10      	pop	{r4, pc}

00012864 <get_sectors_cb>:
{
   12864:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   12866:	6802      	ldr	r2, [r0, #0]
   12868:	684c      	ldr	r4, [r1, #4]
   1286a:	42a2      	cmp	r2, r4
   1286c:	d316      	bcc.n	1289c <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   1286e:	688b      	ldr	r3, [r1, #8]
   12870:	4423      	add	r3, r4
   12872:	429a      	cmp	r2, r3
   12874:	d206      	bcs.n	12884 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   12876:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   1287a:	42ab      	cmp	r3, r5
   1287c:	d304      	bcc.n	12888 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   1287e:	f06f 030b 	mvn.w	r3, #11
   12882:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   12884:	2000      	movs	r0, #0
   12886:	e00a      	b.n	1289e <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   12888:	68cd      	ldr	r5, [r1, #12]
   1288a:	1b12      	subs	r2, r2, r4
   1288c:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   12890:	6842      	ldr	r2, [r0, #4]
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   12892:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
	data->ret_idx++;
   12896:	3301      	adds	r3, #1
	ret[data->ret_idx].fs_size = info->size;
   12898:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   1289a:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   1289c:	2001      	movs	r0, #1
}
   1289e:	bd70      	pop	{r4, r5, r6, pc}

000128a0 <settings_load>:
	return settings_load_subtree(NULL);
   128a0:	2000      	movs	r0, #0
   128a2:	f7ef ba29 	b.w	1cf8 <settings_load_subtree>

000128a6 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   128a6:	2200      	movs	r2, #0
   128a8:	4611      	mov	r1, r2
   128aa:	f7ef b9eb 	b.w	1c84 <settings_save_one>

000128ae <settings_name_steq>:
{
   128ae:	4603      	mov	r3, r0
   128b0:	b530      	push	{r4, r5, lr}
   128b2:	4608      	mov	r0, r1
	if (next) {
   128b4:	b10a      	cbz	r2, 128ba <settings_name_steq+0xc>
		*next = NULL;
   128b6:	2100      	movs	r1, #0
   128b8:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   128ba:	b163      	cbz	r3, 128d6 <settings_name_steq+0x28>
   128bc:	b190      	cbz	r0, 128e4 <settings_name_steq+0x36>
   128be:	1e41      	subs	r1, r0, #1
   128c0:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   128c2:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   128c6:	4604      	mov	r4, r0
   128c8:	f810 3b01 	ldrb.w	r3, [r0], #1
   128cc:	b15d      	cbz	r5, 128e6 <settings_name_steq+0x38>
   128ce:	429d      	cmp	r5, r3
   128d0:	d101      	bne.n	128d6 <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   128d2:	2d3d      	cmp	r5, #61	; 0x3d
   128d4:	d1f5      	bne.n	128c2 <settings_name_steq+0x14>
	return 0;
   128d6:	2000      	movs	r0, #0
   128d8:	e004      	b.n	128e4 <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   128da:	2b3d      	cmp	r3, #61	; 0x3d
   128dc:	d008      	beq.n	128f0 <settings_name_steq+0x42>
   128de:	fab3 f083 	clz	r0, r3
   128e2:	0940      	lsrs	r0, r0, #5
}
   128e4:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   128e6:	2b2f      	cmp	r3, #47	; 0x2f
   128e8:	d1f7      	bne.n	128da <settings_name_steq+0x2c>
		if (next) {
   128ea:	b10a      	cbz	r2, 128f0 <settings_name_steq+0x42>
			*next = name + 1;
   128ec:	3401      	adds	r4, #1
   128ee:	6014      	str	r4, [r2, #0]
		return 1;
   128f0:	2001      	movs	r0, #1
   128f2:	e7f7      	b.n	128e4 <settings_name_steq+0x36>

000128f4 <settings_name_next>:
{
   128f4:	4603      	mov	r3, r0
   128f6:	b530      	push	{r4, r5, lr}
	if (next) {
   128f8:	b109      	cbz	r1, 128fe <settings_name_next+0xa>
		*next = NULL;
   128fa:	2200      	movs	r2, #0
   128fc:	600a      	str	r2, [r1, #0]
	if (!name) {
   128fe:	b16b      	cbz	r3, 1291c <settings_name_next+0x28>
   12900:	461a      	mov	r2, r3
   12902:	4614      	mov	r4, r2
   12904:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   12906:	f812 5b01 	ldrb.w	r5, [r2], #1
   1290a:	b135      	cbz	r5, 1291a <settings_name_next+0x26>
   1290c:	2d3d      	cmp	r5, #61	; 0x3d
   1290e:	d004      	beq.n	1291a <settings_name_next+0x26>
   12910:	2d2f      	cmp	r5, #47	; 0x2f
   12912:	d1f6      	bne.n	12902 <settings_name_next+0xe>
		if (next) {
   12914:	b109      	cbz	r1, 1291a <settings_name_next+0x26>
			*next = name + 1;
   12916:	3401      	adds	r4, #1
   12918:	600c      	str	r4, [r1, #0]
}
   1291a:	bd30      	pop	{r4, r5, pc}
		return 0;
   1291c:	4618      	mov	r0, r3
   1291e:	e7fc      	b.n	1291a <settings_name_next+0x26>

00012920 <settings_nvs_read_fn>:
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   12920:	4613      	mov	r3, r2
{
   12922:	b510      	push	{r4, lr}
   12924:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   12926:	460a      	mov	r2, r1
   12928:	8881      	ldrh	r1, [r0, #4]
   1292a:	6800      	ldr	r0, [r0, #0]
   1292c:	f7ff ff93 	bl	12856 <nvs_read>
}
   12930:	42a0      	cmp	r0, r4
   12932:	bfa8      	it	ge
   12934:	4620      	movge	r0, r4
   12936:	bd10      	pop	{r4, pc}

00012938 <settings_nvs_save>:
{
   12938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1293c:	b097      	sub	sp, #92	; 0x5c
   1293e:	4604      	mov	r4, r0
   12940:	469b      	mov	fp, r3
	if (!name) {
   12942:	4689      	mov	r9, r1
{
   12944:	9201      	str	r2, [sp, #4]
	if (!name) {
   12946:	2900      	cmp	r1, #0
   12948:	d067      	beq.n	12a1a <settings_nvs_save+0xe2>
	delete = ((value == NULL) || (val_len == 0));
   1294a:	b1da      	cbz	r2, 12984 <settings_nvs_save+0x4c>
   1294c:	fabb f78b 	clz	r7, fp
   12950:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   12952:	8ea5      	ldrh	r5, [r4, #52]	; 0x34
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   12954:	f104 0a08 	add.w	sl, r4, #8
	name_id = cf->last_name_id + 1;
   12958:	3501      	adds	r5, #1
   1295a:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   1295c:	46a8      	mov	r8, r5
		name_id--;
   1295e:	1e6e      	subs	r6, r5, #1
   12960:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   12962:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   12966:	d02e      	beq.n	129c6 <settings_nvs_save+0x8e>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   12968:	234a      	movs	r3, #74	; 0x4a
   1296a:	4631      	mov	r1, r6
   1296c:	4650      	mov	r0, sl
   1296e:	aa03      	add	r2, sp, #12
   12970:	f7ff ff71 	bl	12856 <nvs_read>
		if (rc < 0) {
   12974:	2800      	cmp	r0, #0
   12976:	da07      	bge.n	12988 <settings_nvs_save+0x50>
			if (rc == -ENOENT) {
   12978:	f110 0f02 	cmn.w	r0, #2
   1297c:	bf08      	it	eq
   1297e:	46b0      	moveq	r8, r6
   12980:	4635      	mov	r5, r6
   12982:	e7ec      	b.n	1295e <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   12984:	2701      	movs	r7, #1
   12986:	e7e4      	b.n	12952 <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   12988:	ab16      	add	r3, sp, #88	; 0x58
   1298a:	4418      	add	r0, r3
   1298c:	2300      	movs	r3, #0
		if (strcmp(name, rdname)) {
   1298e:	a903      	add	r1, sp, #12
		rdname[rc] = '\0';
   12990:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   12994:	4648      	mov	r0, r9
   12996:	f000 fea1 	bl	136dc <strcmp>
   1299a:	2800      	cmp	r0, #0
   1299c:	d1f0      	bne.n	12980 <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   1299e:	2f00      	cmp	r7, #0
   129a0:	d039      	beq.n	12a16 <settings_nvs_save+0xde>
   129a2:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   129a4:	42b3      	cmp	r3, r6
   129a6:	d140      	bne.n	12a2a <settings_nvs_save+0xf2>
			cf->last_name_id--;
   129a8:	4622      	mov	r2, r4
   129aa:	1e73      	subs	r3, r6, #1
   129ac:	f822 3f34 	strh.w	r3, [r2, #52]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   129b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   129b4:	2302      	movs	r3, #2
   129b6:	4650      	mov	r0, sl
   129b8:	f7ee ffda 	bl	1970 <nvs_write>
			if (rc < 0) {
   129bc:	2800      	cmp	r0, #0
   129be:	da34      	bge.n	12a2a <settings_nvs_save+0xf2>
}
   129c0:	b017      	add	sp, #92	; 0x5c
   129c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   129c6:	bb5f      	cbnz	r7, 12a20 <settings_nvs_save+0xe8>
	write_name = true;
   129c8:	2701      	movs	r7, #1
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   129ca:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   129ce:	d029      	beq.n	12a24 <settings_nvs_save+0xec>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   129d0:	f104 0508 	add.w	r5, r4, #8
   129d4:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   129d8:	465b      	mov	r3, fp
   129da:	4628      	mov	r0, r5
   129dc:	9a01      	ldr	r2, [sp, #4]
   129de:	b289      	uxth	r1, r1
   129e0:	f7ee ffc6 	bl	1970 <nvs_write>
	if (write_name) {
   129e4:	b157      	cbz	r7, 129fc <settings_nvs_save+0xc4>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   129e6:	4648      	mov	r0, r9
   129e8:	f000 fe71 	bl	136ce <strlen>
   129ec:	464a      	mov	r2, r9
   129ee:	4603      	mov	r3, r0
   129f0:	4641      	mov	r1, r8
   129f2:	4628      	mov	r0, r5
   129f4:	f7ee ffbc 	bl	1970 <nvs_write>
		if (rc < 0) {
   129f8:	2800      	cmp	r0, #0
   129fa:	dbe1      	blt.n	129c0 <settings_nvs_save+0x88>
	if (write_name_id > cf->last_name_id) {
   129fc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   129fe:	4543      	cmp	r3, r8
   12a00:	d220      	bcs.n	12a44 <settings_nvs_save+0x10c>
		cf->last_name_id = write_name_id;
   12a02:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   12a04:	2302      	movs	r3, #2
   12a06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   12a0a:	4628      	mov	r0, r5
		cf->last_name_id = write_name_id;
   12a0c:	f822 8f34 	strh.w	r8, [r2, #52]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   12a10:	f7ee ffae 	bl	1970 <nvs_write>
   12a14:	e016      	b.n	12a44 <settings_nvs_save+0x10c>
   12a16:	46b0      	mov	r8, r6
   12a18:	e7d7      	b.n	129ca <settings_nvs_save+0x92>
		return -EINVAL;
   12a1a:	f06f 0015 	mvn.w	r0, #21
   12a1e:	e7cf      	b.n	129c0 <settings_nvs_save+0x88>
		return 0;
   12a20:	2000      	movs	r0, #0
   12a22:	e7cd      	b.n	129c0 <settings_nvs_save+0x88>
		return -ENOMEM;
   12a24:	f06f 000b 	mvn.w	r0, #11
   12a28:	e7ca      	b.n	129c0 <settings_nvs_save+0x88>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   12a2a:	4631      	mov	r1, r6
   12a2c:	4650      	mov	r0, sl
   12a2e:	f7ff ff0e 	bl	1284e <nvs_delete>
			if (rc >= 0) {
   12a32:	2800      	cmp	r0, #0
   12a34:	dbc4      	blt.n	129c0 <settings_nvs_save+0x88>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   12a36:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   12a3a:	313f      	adds	r1, #63	; 0x3f
   12a3c:	4650      	mov	r0, sl
   12a3e:	b289      	uxth	r1, r1
   12a40:	f7ff ff05 	bl	1284e <nvs_delete>
	if (rc < 0) {
   12a44:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   12a48:	e7ba      	b.n	129c0 <settings_nvs_save+0x88>

00012a4a <settings_nvs_backend_init>:
{
   12a4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   12a4c:	f100 0608 	add.w	r6, r0, #8
   12a50:	6b81      	ldr	r1, [r0, #56]	; 0x38
{
   12a52:	4604      	mov	r4, r0
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   12a54:	4630      	mov	r0, r6
   12a56:	f7ee fe69 	bl	172c <nvs_init>
	if (rc) {
   12a5a:	4605      	mov	r5, r0
   12a5c:	b970      	cbnz	r0, 12a7c <settings_nvs_backend_init+0x32>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   12a5e:	2302      	movs	r3, #2
   12a60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   12a64:	4630      	mov	r0, r6
   12a66:	f10d 0206 	add.w	r2, sp, #6
   12a6a:	f7ff fef4 	bl	12856 <nvs_read>
	if (rc < 0) {
   12a6e:	2800      	cmp	r0, #0
		cf->last_name_id = NVS_NAMECNT_ID;
   12a70:	bfb4      	ite	lt
   12a72:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
		cf->last_name_id = last_name_id;
   12a76:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
   12a7a:	86a3      	strh	r3, [r4, #52]	; 0x34
}
   12a7c:	4628      	mov	r0, r5
   12a7e:	b002      	add	sp, #8
   12a80:	bd70      	pop	{r4, r5, r6, pc}

00012a82 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   12a82:	2200      	movs	r2, #0
   12a84:	f7ef bb94 	b.w	21b0 <clock_async_start>

00012a88 <clk_init>:
{
   12a88:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   12a8a:	2200      	movs	r2, #0
{
   12a8c:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   12a8e:	2101      	movs	r1, #1
   12a90:	2005      	movs	r0, #5
   12a92:	f7f1 f8cd 	bl	3c30 <z_arm_irq_priority_set>
	irq_enable(DT_INST_IRQN(0));
   12a96:	2005      	movs	r0, #5
   12a98:	f7f1 f8ba 	bl	3c10 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
   12a9c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   12aa0:	2202      	movs	r2, #2
   12aa2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
   12aa6:	2203      	movs	r2, #3
	list->head = NULL;
   12aa8:	2000      	movs	r0, #0
   12aaa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		sys_slist_init(&(get_sub_data(dev, i)->list));
   12aae:	68e3      	ldr	r3, [r4, #12]
	list->tail = NULL;
   12ab0:	e9c3 0000 	strd	r0, r0, [r3]
   12ab4:	68e3      	ldr	r3, [r4, #12]
   12ab6:	e9c3 0003 	strd	r0, r0, [r3, #12]
}
   12aba:	bd10      	pop	{r4, pc}

00012abc <bt_rpmsg_open>:
	return bt_rpmsg_platform_init();
   12abc:	f7ef bdbe 	b.w	263c <bt_rpmsg_platform_init>

00012ac0 <virtio_get_status>:
}
   12ac0:	2004      	movs	r0, #4
   12ac2:	4770      	bx	lr

00012ac4 <virtio_get_features>:
}
   12ac4:	2001      	movs	r0, #1
   12ac6:	4770      	bx	lr

00012ac8 <virtio_set_features>:
}
   12ac8:	4770      	bx	lr

00012aca <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   12aca:	f003 bd03 	b.w	164d4 <rpmsg_destroy_ept>

00012ace <endpoint_cb>:
{
   12ace:	b508      	push	{r3, lr}
   12ad0:	4608      	mov	r0, r1
	bt_rpmsg_rx(data, len);
   12ad2:	4611      	mov	r1, r2
   12ad4:	f7ef fcb8 	bl	2448 <bt_rpmsg_rx>
}
   12ad8:	2000      	movs	r0, #0
   12ada:	bd08      	pop	{r3, pc}

00012adc <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   12adc:	4770      	bx	lr

00012ade <attr_find_by_handle>:
{
   12ade:	b570      	push	{r4, r5, r6, lr}
   12ae0:	4604      	mov	r4, r0
	if (!dm->cur_attr_id) {
   12ae2:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   12ae6:	b1a8      	cbz	r0, 12b14 <attr_find_by_handle+0x36>
	ssize_t lower = 0;
   12ae8:	2600      	movs	r6, #0
	ssize_t upper = dm->cur_attr_id - 1;
   12aea:	3801      	subs	r0, #1
	while (upper >= lower) {
   12aec:	4286      	cmp	r6, r0
   12aee:	dd01      	ble.n	12af4 <attr_find_by_handle+0x16>
		return NULL;
   12af0:	2000      	movs	r0, #0
   12af2:	e00f      	b.n	12b14 <attr_find_by_handle+0x36>
		size_t m = (lower + upper) / 2;
   12af4:	1832      	adds	r2, r6, r0
   12af6:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   12afa:	1052      	asrs	r2, r2, #1
		if (cur_attr->handle < handle) {
   12afc:	1cd5      	adds	r5, r2, #3
   12afe:	00eb      	lsls	r3, r5, #3
   12b00:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
   12b04:	892d      	ldrh	r5, [r5, #8]
   12b06:	428d      	cmp	r5, r1
   12b08:	d201      	bcs.n	12b0e <attr_find_by_handle+0x30>
			lower = m + 1;
   12b0a:	1c56      	adds	r6, r2, #1
   12b0c:	e7ee      	b.n	12aec <attr_find_by_handle+0xe>
		} else if (cur_attr->handle > handle) {
   12b0e:	d802      	bhi.n	12b16 <attr_find_by_handle+0x38>
		struct bt_gatt_dm_attr *cur_attr = &dm->attrs[m];
   12b10:	3304      	adds	r3, #4
   12b12:	18e0      	adds	r0, r4, r3
}
   12b14:	bd70      	pop	{r4, r5, r6, pc}
			upper = m - 1;
   12b16:	1e50      	subs	r0, r2, #1
   12b18:	e7e8      	b.n	12aec <attr_find_by_handle+0xe>

00012b1a <svc_attr_memory_release>:
	dm->cur_attr_id = 0;
   12b1a:	2300      	movs	r3, #0
{
   12b1c:	b510      	push	{r4, lr}
   12b1e:	4604      	mov	r4, r0
	dm->cur_attr_id = 0;
   12b20:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
Z_GENLIST_IS_EMPTY(slist)
   12b24:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
	while (!sys_slist_is_empty(&dm->chunk_list)) {
   12b28:	b910      	cbnz	r0, 12b30 <svc_attr_memory_release+0x16>
	dm->cur_chunk_len = 0;
   12b2a:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
}
   12b2e:	bd10      	pop	{r4, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   12b30:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
   12b34:	6803      	ldr	r3, [r0, #0]
   12b36:	4290      	cmp	r0, r2
	list->head = node;
   12b38:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
	list->tail = node;
   12b3c:	bf08      	it	eq
   12b3e:	f8c4 3140 	streq.w	r3, [r4, #320]	; 0x140
		k_free(item);
   12b42:	f003 fdfd 	bl	16740 <k_free>
   12b46:	e7ed      	b.n	12b24 <svc_attr_memory_release+0xa>

00012b48 <atomic_and>:
{
   12b48:	4603      	mov	r3, r0
}
   12b4a:	e8d3 0fef 	ldaex	r0, [r3]
   12b4e:	ea00 0201 	and.w	r2, r0, r1
   12b52:	e8c3 2fec 	stlex	ip, r2, [r3]
   12b56:	f1bc 0f00 	cmp.w	ip, #0
   12b5a:	d1f6      	bne.n	12b4a <atomic_and+0x2>
   12b5c:	4770      	bx	lr

00012b5e <discovery_complete_not_found>:
{
   12b5e:	b510      	push	{r4, lr}
   12b60:	4604      	mov	r4, r0
	svc_attr_memory_release(dm);
   12b62:	f7ff ffda 	bl	12b1a <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12b66:	f06f 0101 	mvn.w	r1, #1
   12b6a:	f504 709c 	add.w	r0, r4, #312	; 0x138
   12b6e:	f7ff ffeb 	bl	12b48 <atomic_and>
	if (dm->callback->service_not_found) {
   12b72:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   12b76:	685b      	ldr	r3, [r3, #4]
   12b78:	b123      	cbz	r3, 12b84 <discovery_complete_not_found+0x26>
		dm->callback->service_not_found(dm->conn, dm->context);
   12b7a:	e9d4 0100 	ldrd	r0, r1, [r4]
}
   12b7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		dm->callback->service_not_found(dm->conn, dm->context);
   12b82:	4718      	bx	r3
}
   12b84:	bd10      	pop	{r4, pc}

00012b86 <bt_gatt_dm_attr_service_val>:
{
   12b86:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   12b88:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   12b8c:	2400      	movs	r4, #0
{
   12b8e:	4605      	mov	r5, r0
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   12b90:	6801      	ldr	r1, [r0, #0]
   12b92:	4668      	mov	r0, sp
   12b94:	f88d 4000 	strb.w	r4, [sp]
   12b98:	f8ad 3002 	strh.w	r3, [sp, #2]
   12b9c:	f000 fe64 	bl	13868 <bt_uuid_cmp>
   12ba0:	b918      	cbnz	r0, 12baa <bt_gatt_dm_attr_service_val+0x24>
		return &((struct bt_gatt_service_val *)attr->uuid)[-1];
   12ba2:	6828      	ldr	r0, [r5, #0]
   12ba4:	3808      	subs	r0, #8
}
   12ba6:	b003      	add	sp, #12
   12ba8:	bd30      	pop	{r4, r5, pc}
	    (!bt_uuid_cmp(BT_UUID_GATT_SECONDARY, attr->uuid))) {
   12baa:	f642 0301 	movw	r3, #10241	; 0x2801
   12bae:	6829      	ldr	r1, [r5, #0]
   12bb0:	a801      	add	r0, sp, #4
   12bb2:	f88d 4004 	strb.w	r4, [sp, #4]
   12bb6:	f8ad 3006 	strh.w	r3, [sp, #6]
   12bba:	f000 fe55 	bl	13868 <bt_uuid_cmp>
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   12bbe:	2800      	cmp	r0, #0
   12bc0:	d0ef      	beq.n	12ba2 <bt_gatt_dm_attr_service_val+0x1c>
	return NULL;
   12bc2:	4620      	mov	r0, r4
   12bc4:	e7ef      	b.n	12ba6 <bt_gatt_dm_attr_service_val+0x20>

00012bc6 <bt_gatt_dm_attr_chrc_val>:
{
   12bc6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   12bc8:	f642 0303 	movw	r3, #10243	; 0x2803
   12bcc:	2400      	movs	r4, #0
{
   12bce:	4605      	mov	r5, r0
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   12bd0:	6801      	ldr	r1, [r0, #0]
   12bd2:	a801      	add	r0, sp, #4
   12bd4:	f88d 4004 	strb.w	r4, [sp, #4]
   12bd8:	f8ad 3006 	strh.w	r3, [sp, #6]
   12bdc:	f000 fe44 	bl	13868 <bt_uuid_cmp>
   12be0:	b918      	cbnz	r0, 12bea <bt_gatt_dm_attr_chrc_val+0x24>
		return &((struct bt_gatt_chrc *)attr->uuid)[-1];
   12be2:	6828      	ldr	r0, [r5, #0]
   12be4:	3808      	subs	r0, #8
}
   12be6:	b003      	add	sp, #12
   12be8:	bd30      	pop	{r4, r5, pc}
	return NULL;
   12bea:	4620      	mov	r0, r4
   12bec:	e7fb      	b.n	12be6 <bt_gatt_dm_attr_chrc_val+0x20>

00012bee <bt_gatt_dm_conn_get>:
}
   12bee:	6800      	ldr	r0, [r0, #0]
   12bf0:	4770      	bx	lr

00012bf2 <bt_gatt_dm_service_get>:
}
   12bf2:	301c      	adds	r0, #28
   12bf4:	4770      	bx	lr

00012bf6 <bt_gatt_dm_char_next>:
{
   12bf6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12bf8:	f100 051c 	add.w	r5, r0, #28
	if (!prev) {
   12bfc:	b131      	cbz	r1, 12c0c <bt_gatt_dm_char_next+0x16>
	if (dm->attrs <= prev) {
   12bfe:	42a9      	cmp	r1, r5
   12c00:	d203      	bcs.n	12c0a <bt_gatt_dm_char_next+0x14>
	return NULL;
   12c02:	2500      	movs	r5, #0
}
   12c04:	4628      	mov	r0, r5
   12c06:	b003      	add	sp, #12
   12c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12c0a:	460d      	mov	r5, r1
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   12c0c:	2600      	movs	r6, #0
   12c0e:	f642 0703 	movw	r7, #10243	; 0x2803
		const struct bt_gatt_dm_attr *const end =
   12c12:	f8d0 4134 	ldr.w	r4, [r0, #308]	; 0x134
   12c16:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   12c1a:	f100 041c 	add.w	r4, r0, #28
		while (++prev < end) {
   12c1e:	3508      	adds	r5, #8
   12c20:	42ac      	cmp	r4, r5
   12c22:	d9ee      	bls.n	12c02 <bt_gatt_dm_char_next+0xc>
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   12c24:	6829      	ldr	r1, [r5, #0]
   12c26:	a801      	add	r0, sp, #4
   12c28:	f88d 6004 	strb.w	r6, [sp, #4]
   12c2c:	f8ad 7006 	strh.w	r7, [sp, #6]
   12c30:	f000 fe1a 	bl	13868 <bt_uuid_cmp>
   12c34:	2800      	cmp	r0, #0
   12c36:	d1f2      	bne.n	12c1e <bt_gatt_dm_char_next+0x28>
   12c38:	e7e4      	b.n	12c04 <bt_gatt_dm_char_next+0xe>

00012c3a <bt_gatt_dm_attr_next>:
{
   12c3a:	4602      	mov	r2, r0
   12c3c:	f100 031c 	add.w	r3, r0, #28
	if (!prev) {
   12c40:	b111      	cbz	r1, 12c48 <bt_gatt_dm_attr_next+0xe>
	if (dm->attrs <= prev) {
   12c42:	4299      	cmp	r1, r3
   12c44:	d30b      	bcc.n	12c5e <bt_gatt_dm_attr_next+0x24>
   12c46:	460b      	mov	r3, r1
		if (++prev < end) {
   12c48:	f103 0008 	add.w	r0, r3, #8
		const struct bt_gatt_dm_attr *const end =
   12c4c:	f8d2 3134 	ldr.w	r3, [r2, #308]	; 0x134
   12c50:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   12c54:	321c      	adds	r2, #28
	return NULL;
   12c56:	4290      	cmp	r0, r2
   12c58:	bf28      	it	cs
   12c5a:	2000      	movcs	r0, #0
   12c5c:	4770      	bx	lr
   12c5e:	2000      	movs	r0, #0
}
   12c60:	4770      	bx	lr

00012c62 <bt_gatt_dm_desc_next>:
{
   12c62:	b513      	push	{r0, r1, r4, lr}
	const struct bt_gatt_dm_attr *curr = bt_gatt_dm_attr_next(dm, prev);
   12c64:	f7ff ffe9 	bl	12c3a <bt_gatt_dm_attr_next>
	if (curr && !bt_uuid_cmp(BT_UUID_GATT_CHRC, curr->uuid)) {
   12c68:	4604      	mov	r4, r0
   12c6a:	b158      	cbz	r0, 12c84 <bt_gatt_dm_desc_next+0x22>
   12c6c:	2300      	movs	r3, #0
   12c6e:	f88d 3004 	strb.w	r3, [sp, #4]
   12c72:	f642 0303 	movw	r3, #10243	; 0x2803
   12c76:	6801      	ldr	r1, [r0, #0]
   12c78:	a801      	add	r0, sp, #4
   12c7a:	f8ad 3006 	strh.w	r3, [sp, #6]
   12c7e:	f000 fdf3 	bl	13868 <bt_uuid_cmp>
   12c82:	b900      	cbnz	r0, 12c86 <bt_gatt_dm_desc_next+0x24>
		curr = NULL;
   12c84:	2400      	movs	r4, #0
}
   12c86:	4620      	mov	r0, r4
   12c88:	b002      	add	sp, #8
   12c8a:	bd10      	pop	{r4, pc}

00012c8c <bt_gatt_dm_desc_by_uuid>:
{
   12c8c:	b570      	push	{r4, r5, r6, lr}
   12c8e:	4605      	mov	r5, r0
   12c90:	4616      	mov	r6, r2
	const struct bt_gatt_dm_attr *curr = attr_chrc;
   12c92:	460c      	mov	r4, r1
	while ((curr = bt_gatt_dm_desc_next(dm, curr)) != NULL) {
   12c94:	4621      	mov	r1, r4
   12c96:	4628      	mov	r0, r5
   12c98:	f7ff ffe3 	bl	12c62 <bt_gatt_dm_desc_next>
   12c9c:	4604      	mov	r4, r0
   12c9e:	b128      	cbz	r0, 12cac <bt_gatt_dm_desc_by_uuid+0x20>
		if (!bt_uuid_cmp(uuid, curr->uuid)) {
   12ca0:	4630      	mov	r0, r6
   12ca2:	6821      	ldr	r1, [r4, #0]
   12ca4:	f000 fde0 	bl	13868 <bt_uuid_cmp>
   12ca8:	2800      	cmp	r0, #0
   12caa:	d1f3      	bne.n	12c94 <bt_gatt_dm_desc_by_uuid+0x8>
}
   12cac:	4620      	mov	r0, r4
   12cae:	bd70      	pop	{r4, r5, r6, pc}

00012cb0 <bt_gatt_dm_data_release>:

	return err;
}

int bt_gatt_dm_data_release(struct bt_gatt_dm *dm)
{
   12cb0:	b510      	push	{r4, lr}
	if (!atomic_test_and_clear_bit(dm->state_flags,
   12cb2:	f500 749c 	add.w	r4, r0, #312	; 0x138
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12cb6:	e8d4 3fef 	ldaex	r3, [r4]
   12cba:	f023 0202 	bic.w	r2, r3, #2
   12cbe:	e8c4 2fe1 	stlex	r1, r2, [r4]
   12cc2:	2900      	cmp	r1, #0
   12cc4:	d1f7      	bne.n	12cb6 <bt_gatt_dm_data_release+0x6>
   12cc6:	079b      	lsls	r3, r3, #30
   12cc8:	d508      	bpl.n	12cdc <bt_gatt_dm_data_release+0x2c>
				       STATE_ATTRS_RELEASE_PENDING)) {
		return -EALREADY;
	}

	svc_attr_memory_release(dm);
   12cca:	f7ff ff26 	bl	12b1a <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12cce:	f06f 0101 	mvn.w	r1, #1
   12cd2:	4620      	mov	r0, r4
   12cd4:	f7ff ff38 	bl	12b48 <atomic_and>
	atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);

	return 0;
   12cd8:	2000      	movs	r0, #0
}
   12cda:	bd10      	pop	{r4, pc}
		return -EALREADY;
   12cdc:	f06f 0044 	mvn.w	r0, #68	; 0x44
   12ce0:	e7fb      	b.n	12cda <bt_gatt_dm_data_release+0x2a>

00012ce2 <bt_scan_stop>:
	return bt_le_scan_stop();
   12ce2:	f7f3 bdd3 	b.w	688c <bt_le_scan_stop>

00012ce6 <on_sent>:
{
   12ce6:	4613      	mov	r3, r2
   12ce8:	4608      	mov	r0, r1
	data = params->data;
   12cea:	6891      	ldr	r1, [r2, #8]
	length = params->length;
   12cec:	8992      	ldrh	r2, [r2, #12]
{
   12cee:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12cf0:	f1a3 0420 	sub.w	r4, r3, #32
   12cf4:	e8d4 cfef 	ldaex	ip, [r4]
   12cf8:	f02c 0c04 	bic.w	ip, ip, #4
   12cfc:	e8c4 cfee 	stlex	lr, ip, [r4]
   12d00:	f1be 0f00 	cmp.w	lr, #0
   12d04:	d1f6      	bne.n	12cf4 <on_sent+0xe>
	if (nus_c->cbs.data_sent) {
   12d06:	695b      	ldr	r3, [r3, #20]
   12d08:	b113      	cbz	r3, 12d10 <on_sent+0x2a>
}
   12d0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		nus_c->cbs.data_sent(err, data, length);
   12d0e:	4718      	bx	r3
}
   12d10:	bd10      	pop	{r4, pc}

00012d12 <on_received>:
{
   12d12:	4608      	mov	r0, r1
   12d14:	b510      	push	{r4, lr}
   12d16:	4619      	mov	r1, r3
	if (!data) {
   12d18:	4614      	mov	r4, r2
   12d1a:	b97a      	cbnz	r2, 12d3c <on_received+0x2a>
		params->value_handle = 0;
   12d1c:	8082      	strh	r2, [r0, #4]
   12d1e:	f1a0 030c 	sub.w	r3, r0, #12
   12d22:	e8d3 2fef 	ldaex	r2, [r3]
   12d26:	f022 0202 	bic.w	r2, r2, #2
   12d2a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   12d2e:	2900      	cmp	r1, #0
   12d30:	d1f7      	bne.n	12d22 <on_received+0x10>
		if (nus_c->cbs.tx_notif_disabled) {
   12d32:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   12d34:	b108      	cbz	r0, 12d3a <on_received+0x28>
			nus_c->cbs.tx_notif_disabled();
   12d36:	4780      	blx	r0
   12d38:	4620      	mov	r0, r4
}
   12d3a:	bd10      	pop	{r4, pc}
	if (nus_c->cbs.data_received) {
   12d3c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   12d3e:	b11b      	cbz	r3, 12d48 <on_received+0x36>
}
   12d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return nus_c->cbs.data_received(data, length);
   12d44:	4610      	mov	r0, r2
   12d46:	4718      	bx	r3
	return BT_GATT_ITER_CONTINUE;
   12d48:	2001      	movs	r0, #1
   12d4a:	e7f6      	b.n	12d3a <on_received+0x28>

00012d4c <bt_gatt_nus_c_init>:
{
   12d4c:	b510      	push	{r4, lr}
	if (!nus_c || !nus_c_init) {
   12d4e:	b198      	cbz	r0, 12d78 <bt_gatt_nus_c_init+0x2c>
   12d50:	b191      	cbz	r1, 12d78 <bt_gatt_nus_c_init+0x2c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12d52:	1d03      	adds	r3, r0, #4
   12d54:	e8d3 4fef 	ldaex	r4, [r3]
   12d58:	f044 0201 	orr.w	r2, r4, #1
   12d5c:	e8c3 2fec 	stlex	ip, r2, [r3]
   12d60:	f1bc 0f00 	cmp.w	ip, #0
   12d64:	d1f6      	bne.n	12d54 <bt_gatt_nus_c_init+0x8>
	if (atomic_test_and_set_bit(&nus_c->state, NUS_C_INITIALIZED)) {
   12d66:	f014 0401 	ands.w	r4, r4, #1
   12d6a:	d108      	bne.n	12d7e <bt_gatt_nus_c_init+0x32>
	memcpy(&nus_c->cbs, &nus_c_init->cbs, sizeof(nus_c->cbs));
   12d6c:	220c      	movs	r2, #12
   12d6e:	3034      	adds	r0, #52	; 0x34
   12d70:	f000 fcdf 	bl	13732 <memcpy>
}
   12d74:	4620      	mov	r0, r4
   12d76:	bd10      	pop	{r4, pc}
		return -EINVAL;
   12d78:	f06f 0415 	mvn.w	r4, #21
   12d7c:	e7fa      	b.n	12d74 <bt_gatt_nus_c_init+0x28>
		return -EALREADY;
   12d7e:	f06f 0444 	mvn.w	r4, #68	; 0x44
   12d82:	e7f7      	b.n	12d74 <bt_gatt_nus_c_init+0x28>

00012d84 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   12d84:	b538      	push	{r3, r4, r5, lr}
   12d86:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   12d88:	42ab      	cmp	r3, r5
{
   12d8a:	4611      	mov	r1, r2
   12d8c:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   12d8e:	d804      	bhi.n	12d9a <_copy+0x16>
		(void)memcpy(to, from, from_len);
   12d90:	461a      	mov	r2, r3
   12d92:	f000 fcce 	bl	13732 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   12d96:	4620      	mov	r0, r4
   12d98:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   12d9a:	2400      	movs	r4, #0
   12d9c:	e7fb      	b.n	12d96 <_copy+0x12>

00012d9e <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   12d9e:	f000 bcf3 	b.w	13788 <memset>

00012da2 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   12da2:	09c3      	lsrs	r3, r0, #7
   12da4:	005a      	lsls	r2, r3, #1
   12da6:	4413      	add	r3, r2
   12da8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   12dac:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   12db0:	b2c0      	uxtb	r0, r0
   12db2:	4770      	bx	lr

00012db4 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   12db4:	78cb      	ldrb	r3, [r1, #3]
   12db6:	7802      	ldrb	r2, [r0, #0]
   12db8:	4053      	eors	r3, r2
   12dba:	7003      	strb	r3, [r0, #0]
   12dbc:	884b      	ldrh	r3, [r1, #2]
   12dbe:	7842      	ldrb	r2, [r0, #1]
   12dc0:	4053      	eors	r3, r2
   12dc2:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   12dc4:	680a      	ldr	r2, [r1, #0]
   12dc6:	7883      	ldrb	r3, [r0, #2]
   12dc8:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   12dcc:	7083      	strb	r3, [r0, #2]
   12dce:	680a      	ldr	r2, [r1, #0]
   12dd0:	78c3      	ldrb	r3, [r0, #3]
   12dd2:	4053      	eors	r3, r2
   12dd4:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   12dd6:	79cb      	ldrb	r3, [r1, #7]
   12dd8:	7902      	ldrb	r2, [r0, #4]
   12dda:	4053      	eors	r3, r2
   12ddc:	7103      	strb	r3, [r0, #4]
   12dde:	88cb      	ldrh	r3, [r1, #6]
   12de0:	7942      	ldrb	r2, [r0, #5]
   12de2:	4053      	eors	r3, r2
   12de4:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   12de6:	684a      	ldr	r2, [r1, #4]
   12de8:	7983      	ldrb	r3, [r0, #6]
   12dea:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   12dee:	7183      	strb	r3, [r0, #6]
   12df0:	684a      	ldr	r2, [r1, #4]
   12df2:	79c3      	ldrb	r3, [r0, #7]
   12df4:	4053      	eors	r3, r2
   12df6:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   12df8:	7acb      	ldrb	r3, [r1, #11]
   12dfa:	7a02      	ldrb	r2, [r0, #8]
   12dfc:	4053      	eors	r3, r2
   12dfe:	7203      	strb	r3, [r0, #8]
   12e00:	7a42      	ldrb	r2, [r0, #9]
   12e02:	894b      	ldrh	r3, [r1, #10]
   12e04:	4053      	eors	r3, r2
   12e06:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   12e08:	688a      	ldr	r2, [r1, #8]
   12e0a:	7a83      	ldrb	r3, [r0, #10]
   12e0c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   12e10:	7283      	strb	r3, [r0, #10]
   12e12:	688a      	ldr	r2, [r1, #8]
   12e14:	7ac3      	ldrb	r3, [r0, #11]
   12e16:	4053      	eors	r3, r2
   12e18:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   12e1a:	7bcb      	ldrb	r3, [r1, #15]
   12e1c:	7b02      	ldrb	r2, [r0, #12]
   12e1e:	4053      	eors	r3, r2
   12e20:	7303      	strb	r3, [r0, #12]
   12e22:	89cb      	ldrh	r3, [r1, #14]
   12e24:	7b42      	ldrb	r2, [r0, #13]
   12e26:	4053      	eors	r3, r2
   12e28:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   12e2a:	68ca      	ldr	r2, [r1, #12]
   12e2c:	7b83      	ldrb	r3, [r0, #14]
   12e2e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   12e32:	7383      	strb	r3, [r0, #14]
   12e34:	68ca      	ldr	r2, [r1, #12]
   12e36:	7bc3      	ldrb	r3, [r0, #15]
   12e38:	4053      	eors	r3, r2
   12e3a:	73c3      	strb	r3, [r0, #15]
}
   12e3c:	4770      	bx	lr

00012e3e <shift_rows>:
{
   12e3e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   12e40:	7802      	ldrb	r2, [r0, #0]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   12e42:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   12e44:	f88d 2000 	strb.w	r2, [sp]
   12e48:	7942      	ldrb	r2, [r0, #5]
   12e4a:	f88d 2001 	strb.w	r2, [sp, #1]
   12e4e:	7a82      	ldrb	r2, [r0, #10]
   12e50:	f88d 2002 	strb.w	r2, [sp, #2]
   12e54:	7bc2      	ldrb	r2, [r0, #15]
   12e56:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   12e5a:	7902      	ldrb	r2, [r0, #4]
   12e5c:	f88d 2004 	strb.w	r2, [sp, #4]
   12e60:	7a42      	ldrb	r2, [r0, #9]
   12e62:	f88d 2005 	strb.w	r2, [sp, #5]
   12e66:	7b82      	ldrb	r2, [r0, #14]
   12e68:	f88d 2006 	strb.w	r2, [sp, #6]
   12e6c:	78c2      	ldrb	r2, [r0, #3]
   12e6e:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   12e72:	7a02      	ldrb	r2, [r0, #8]
   12e74:	f88d 2008 	strb.w	r2, [sp, #8]
   12e78:	7b42      	ldrb	r2, [r0, #13]
   12e7a:	f88d 2009 	strb.w	r2, [sp, #9]
   12e7e:	7882      	ldrb	r2, [r0, #2]
   12e80:	f88d 200a 	strb.w	r2, [sp, #10]
   12e84:	79c2      	ldrb	r2, [r0, #7]
   12e86:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   12e8a:	7b02      	ldrb	r2, [r0, #12]
   12e8c:	f88d 200c 	strb.w	r2, [sp, #12]
   12e90:	7842      	ldrb	r2, [r0, #1]
   12e92:	f88d 200d 	strb.w	r2, [sp, #13]
   12e96:	7982      	ldrb	r2, [r0, #6]
   12e98:	f88d 200e 	strb.w	r2, [sp, #14]
   12e9c:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   12ea0:	2310      	movs	r3, #16
   12ea2:	466a      	mov	r2, sp
   12ea4:	4619      	mov	r1, r3
   12ea6:	f7ff ff6d 	bl	12d84 <_copy>
}
   12eaa:	b005      	add	sp, #20
   12eac:	f85d fb04 	ldr.w	pc, [sp], #4

00012eb0 <mult_row_column>:
{
   12eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12eb2:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   12eb4:	7808      	ldrb	r0, [r1, #0]
{
   12eb6:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   12eb8:	f7ff ff73 	bl	12da2 <_double_byte>
   12ebc:	4605      	mov	r5, r0
   12ebe:	7860      	ldrb	r0, [r4, #1]
   12ec0:	f7ff ff6f 	bl	12da2 <_double_byte>
   12ec4:	78a2      	ldrb	r2, [r4, #2]
   12ec6:	7863      	ldrb	r3, [r4, #1]
   12ec8:	4053      	eors	r3, r2
   12eca:	78e2      	ldrb	r2, [r4, #3]
   12ecc:	4053      	eors	r3, r2
   12ece:	405d      	eors	r5, r3
   12ed0:	4045      	eors	r5, r0
   12ed2:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   12ed4:	7860      	ldrb	r0, [r4, #1]
   12ed6:	7827      	ldrb	r7, [r4, #0]
   12ed8:	f7ff ff63 	bl	12da2 <_double_byte>
   12edc:	4605      	mov	r5, r0
   12ede:	78a0      	ldrb	r0, [r4, #2]
   12ee0:	f7ff ff5f 	bl	12da2 <_double_byte>
   12ee4:	78a3      	ldrb	r3, [r4, #2]
   12ee6:	405f      	eors	r7, r3
   12ee8:	78e3      	ldrb	r3, [r4, #3]
   12eea:	405f      	eors	r7, r3
   12eec:	407d      	eors	r5, r7
   12eee:	4045      	eors	r5, r0
   12ef0:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   12ef2:	78a0      	ldrb	r0, [r4, #2]
   12ef4:	7865      	ldrb	r5, [r4, #1]
   12ef6:	7827      	ldrb	r7, [r4, #0]
   12ef8:	f7ff ff53 	bl	12da2 <_double_byte>
   12efc:	406f      	eors	r7, r5
   12efe:	4605      	mov	r5, r0
   12f00:	78e0      	ldrb	r0, [r4, #3]
   12f02:	f7ff ff4e 	bl	12da2 <_double_byte>
   12f06:	78e3      	ldrb	r3, [r4, #3]
   12f08:	405f      	eors	r7, r3
   12f0a:	407d      	eors	r5, r7
   12f0c:	4045      	eors	r5, r0
   12f0e:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   12f10:	7820      	ldrb	r0, [r4, #0]
   12f12:	f7ff ff46 	bl	12da2 <_double_byte>
   12f16:	7863      	ldrb	r3, [r4, #1]
   12f18:	7825      	ldrb	r5, [r4, #0]
   12f1a:	405d      	eors	r5, r3
   12f1c:	78a3      	ldrb	r3, [r4, #2]
   12f1e:	405d      	eors	r5, r3
   12f20:	4045      	eors	r5, r0
   12f22:	78e0      	ldrb	r0, [r4, #3]
   12f24:	f7ff ff3d 	bl	12da2 <_double_byte>
   12f28:	b2ed      	uxtb	r5, r5
   12f2a:	4045      	eors	r5, r0
   12f2c:	70f5      	strb	r5, [r6, #3]
}
   12f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00012f30 <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   12f30:	460a      	mov	r2, r1
{
   12f32:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   12f34:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   12f38:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   12f3a:	2b00      	cmp	r3, #0
   12f3c:	bfb4      	ite	lt
   12f3e:	2387      	movlt	r3, #135	; 0x87
   12f40:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   12f42:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   12f46:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   12f4a:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   12f4c:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   12f50:	d002      	beq.n	12f58 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   12f52:	7813      	ldrb	r3, [r2, #0]
   12f54:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   12f56:	e7f4      	b.n	12f42 <gf_double+0x12>
	}
}
   12f58:	bd10      	pop	{r4, pc}

00012f5a <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   12f5a:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   12f5c:	b120      	cbz	r0, 12f68 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   12f5e:	2258      	movs	r2, #88	; 0x58
   12f60:	2100      	movs	r1, #0
   12f62:	f7ff ff1c 	bl	12d9e <_set>
   12f66:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   12f68:	bd08      	pop	{r3, pc}

00012f6a <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   12f6a:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   12f6c:	4604      	mov	r4, r0
   12f6e:	b188      	cbz	r0, 12f94 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   12f70:	2210      	movs	r2, #16
   12f72:	2100      	movs	r1, #0
   12f74:	f7ff ff13 	bl	12d9e <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   12f78:	2210      	movs	r2, #16
   12f7a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   12f7e:	2100      	movs	r1, #0
   12f80:	f7ff ff0d 	bl	12d9e <_set>
	s->leftover_offset = 0;
   12f84:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   12f86:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   12f88:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   12f8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   12f8e:	2001      	movs	r0, #1
   12f90:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   12f94:	bd10      	pop	{r4, pc}

00012f96 <tc_cmac_setup>:
{
   12f96:	b570      	push	{r4, r5, r6, lr}
   12f98:	460d      	mov	r5, r1
   12f9a:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   12f9c:	4604      	mov	r4, r0
   12f9e:	b310      	cbz	r0, 12fe6 <tc_cmac_setup+0x50>
   12fa0:	b311      	cbz	r1, 12fe8 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   12fa2:	2258      	movs	r2, #88	; 0x58
   12fa4:	2100      	movs	r1, #0
   12fa6:	f7ff fefa 	bl	12d9e <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   12faa:	4629      	mov	r1, r5
   12fac:	4630      	mov	r0, r6
	s->sched = sched;
   12fae:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   12fb0:	f7f0 fc44 	bl	383c <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   12fb4:	2210      	movs	r2, #16
   12fb6:	2100      	movs	r1, #0
   12fb8:	4620      	mov	r0, r4
   12fba:	f7ff fef0 	bl	12d9e <_set>
	gf_double (s->K1, s->iv);
   12fbe:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   12fc2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   12fc4:	4621      	mov	r1, r4
   12fc6:	4620      	mov	r0, r4
   12fc8:	f7f0 fc8c 	bl	38e4 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   12fcc:	4621      	mov	r1, r4
   12fce:	4628      	mov	r0, r5
   12fd0:	f7ff ffae 	bl	12f30 <gf_double>
	gf_double (s->K2, s->K1);
   12fd4:	4629      	mov	r1, r5
   12fd6:	f104 0020 	add.w	r0, r4, #32
   12fda:	f7ff ffa9 	bl	12f30 <gf_double>
	tc_cmac_init(s);
   12fde:	4620      	mov	r0, r4
   12fe0:	f7ff ffc3 	bl	12f6a <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   12fe4:	2001      	movs	r0, #1
}
   12fe6:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   12fe8:	4608      	mov	r0, r1
   12fea:	e7fc      	b.n	12fe6 <tc_cmac_setup+0x50>

00012fec <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   12fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12ff0:	460d      	mov	r5, r1
   12ff2:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   12ff4:	4604      	mov	r4, r0
   12ff6:	2800      	cmp	r0, #0
   12ff8:	d062      	beq.n	130c0 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   12ffa:	b912      	cbnz	r2, 13002 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   12ffc:	2001      	movs	r0, #1
}
   12ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   13002:	2900      	cmp	r1, #0
   13004:	d05c      	beq.n	130c0 <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   13006:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   1300a:	ea50 0301 	orrs.w	r3, r0, r1
   1300e:	d057      	beq.n	130c0 <tc_cmac_update+0xd4>
	s->countdown--;
   13010:	f110 32ff 	adds.w	r2, r0, #4294967295
	if (s->leftover_offset > 0) {
   13014:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   13018:	f141 33ff 	adc.w	r3, r1, #4294967295
   1301c:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   13020:	f1b8 0f00 	cmp.w	r8, #0
   13024:	d02a      	beq.n	1307c <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   13026:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   1302a:	f108 0030 	add.w	r0, r8, #48	; 0x30
   1302e:	42be      	cmp	r6, r7
   13030:	4420      	add	r0, r4
   13032:	d208      	bcs.n	13046 <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   13034:	462a      	mov	r2, r5
   13036:	4633      	mov	r3, r6
   13038:	4631      	mov	r1, r6
   1303a:	f7ff fea3 	bl	12d84 <_copy>
			s->leftover_offset += data_length;
   1303e:	6c62      	ldr	r2, [r4, #68]	; 0x44
   13040:	4432      	add	r2, r6
   13042:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   13044:	e7da      	b.n	12ffc <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   13046:	463b      	mov	r3, r7
   13048:	462a      	mov	r2, r5
   1304a:	4639      	mov	r1, r7
   1304c:	f7ff fe9a 	bl	12d84 <_copy>
		s->leftover_offset = 0;
   13050:	2300      	movs	r3, #0
   13052:	3e10      	subs	r6, #16
   13054:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   13056:	4446      	add	r6, r8
		data += remaining_space;
   13058:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1305a:	1e63      	subs	r3, r4, #1
   1305c:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   13060:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   13064:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   13068:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1306a:	ea82 0200 	eor.w	r2, r2, r0
   1306e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   13070:	d1f6      	bne.n	13060 <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   13072:	4621      	mov	r1, r4
   13074:	4620      	mov	r0, r4
   13076:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   13078:	f7f0 fc34 	bl	38e4 <tc_aes_encrypt>
   1307c:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   13080:	2e10      	cmp	r6, #16
   13082:	d80a      	bhi.n	1309a <tc_cmac_update+0xae>
	if (data_length > 0) {
   13084:	2e00      	cmp	r6, #0
   13086:	d0b9      	beq.n	12ffc <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   13088:	4633      	mov	r3, r6
   1308a:	462a      	mov	r2, r5
   1308c:	4631      	mov	r1, r6
   1308e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   13092:	f7ff fe77 	bl	12d84 <_copy>
		s->leftover_offset = data_length;
   13096:	6466      	str	r6, [r4, #68]	; 0x44
   13098:	e7b0      	b.n	12ffc <tc_cmac_update+0x10>
   1309a:	1e63      	subs	r3, r4, #1
   1309c:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   1309e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   130a2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   130a6:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   130a8:	ea82 0200 	eor.w	r2, r2, r0
   130ac:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   130ae:	d1f6      	bne.n	1309e <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   130b0:	4621      	mov	r1, r4
   130b2:	4620      	mov	r0, r4
   130b4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   130b6:	f7f0 fc15 	bl	38e4 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   130ba:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   130bc:	3e10      	subs	r6, #16
   130be:	e7df      	b.n	13080 <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   130c0:	2000      	movs	r0, #0
   130c2:	e79c      	b.n	12ffe <tc_cmac_update+0x12>

000130c4 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   130c4:	b570      	push	{r4, r5, r6, lr}
   130c6:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   130c8:	4605      	mov	r5, r0
   130ca:	b1f0      	cbz	r0, 1310a <tc_cmac_final+0x46>
   130cc:	b371      	cbz	r1, 1312c <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   130ce:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   130d0:	2a10      	cmp	r2, #16
   130d2:	d11b      	bne.n	1310c <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   130d4:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   130d6:	1e63      	subs	r3, r4, #1
   130d8:	3901      	subs	r1, #1
   130da:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   130de:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   130e2:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   130e6:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   130e8:	ea82 0206 	eor.w	r2, r2, r6
   130ec:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   130f0:	ea82 0206 	eor.w	r2, r2, r6
   130f4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   130f6:	d1f2      	bne.n	130de <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   130f8:	4621      	mov	r1, r4
   130fa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   130fc:	4628      	mov	r0, r5
   130fe:	f7f0 fbf1 	bl	38e4 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   13102:	4620      	mov	r0, r4
   13104:	f7ff ff29 	bl	12f5a <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   13108:	2001      	movs	r0, #1
}
   1310a:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1310c:	f102 0030 	add.w	r0, r2, #48	; 0x30
   13110:	2100      	movs	r1, #0
   13112:	f1c2 0210 	rsb	r2, r2, #16
   13116:	4420      	add	r0, r4
   13118:	f7ff fe41 	bl	12d9e <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1311c:	2280      	movs	r2, #128	; 0x80
   1311e:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   13120:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   13124:	4423      	add	r3, r4
   13126:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1312a:	e7d4      	b.n	130d6 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1312c:	4608      	mov	r0, r1
   1312e:	e7ec      	b.n	1310a <tc_cmac_final+0x46>

00013130 <tc_sha256_update>:
{
   13130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13132:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   13134:	b110      	cbz	r0, 1313c <tc_sha256_update+0xc>
   13136:	b1f9      	cbz	r1, 13178 <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   13138:	b90a      	cbnz	r2, 1313e <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   1313a:	2001      	movs	r0, #1
}
   1313c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   1313e:	2600      	movs	r6, #0
   13140:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   13142:	f100 0728 	add.w	r7, r0, #40	; 0x28
	while (datalen-- > 0) {
   13146:	42a5      	cmp	r5, r4
   13148:	d0f7      	beq.n	1313a <tc_sha256_update+0xa>
		s->leftover[s->leftover_offset++] = *(data++);
   1314a:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1314c:	1c5a      	adds	r2, r3, #1
   1314e:	6682      	str	r2, [r0, #104]	; 0x68
   13150:	f814 1b01 	ldrb.w	r1, [r4], #1
   13154:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   13156:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   13158:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   1315c:	d9f3      	bls.n	13146 <tc_sha256_update+0x16>
			compress(s->iv, s->leftover);
   1315e:	4639      	mov	r1, r7
   13160:	f7f0 fc2a 	bl	39b8 <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   13164:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   13168:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   1316c:	f142 0200 	adc.w	r2, r2, #0
   13170:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   13174:	6686      	str	r6, [r0, #104]	; 0x68
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   13176:	e7e6      	b.n	13146 <tc_sha256_update+0x16>
		return TC_CRYPTO_FAIL;
   13178:	4608      	mov	r0, r1
   1317a:	e7df      	b.n	1313c <tc_sha256_update+0xc>

0001317c <tc_sha256_final>:
{
   1317c:	b570      	push	{r4, r5, r6, lr}
   1317e:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   13180:	4605      	mov	r5, r0
   13182:	2800      	cmp	r0, #0
   13184:	d054      	beq.n	13230 <tc_sha256_final+0xb4>
   13186:	2900      	cmp	r1, #0
   13188:	d053      	beq.n	13232 <tc_sha256_final+0xb6>
	s->bits_hashed += (s->leftover_offset << 3);
   1318a:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
   1318e:	6e89      	ldr	r1, [r1, #104]	; 0x68
   13190:	f104 0628 	add.w	r6, r4, #40	; 0x28
   13194:	00c8      	lsls	r0, r1, #3
   13196:	1812      	adds	r2, r2, r0
   13198:	f143 0300 	adc.w	r3, r3, #0
   1319c:	e9c4 2308 	strd	r2, r3, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   131a0:	2380      	movs	r3, #128	; 0x80
   131a2:	1c48      	adds	r0, r1, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   131a4:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   131a6:	4421      	add	r1, r4
   131a8:	66a0      	str	r0, [r4, #104]	; 0x68
   131aa:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   131ae:	d90b      	bls.n	131c8 <tc_sha256_final+0x4c>
		_set(s->leftover + s->leftover_offset, 0x00,
   131b0:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   131b4:	2100      	movs	r1, #0
   131b6:	4430      	add	r0, r6
   131b8:	f7ff fdf1 	bl	12d9e <_set>
		compress(s->iv, s->leftover);
   131bc:	4631      	mov	r1, r6
   131be:	4620      	mov	r0, r4
   131c0:	f7f0 fbfa 	bl	39b8 <compress>
		s->leftover_offset = 0;
   131c4:	2300      	movs	r3, #0
   131c6:	66a3      	str	r3, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   131c8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   131ca:	2100      	movs	r1, #0
   131cc:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   131d0:	4430      	add	r0, r6
   131d2:	f7ff fde4 	bl	12d9e <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   131d6:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   131d8:	4631      	mov	r1, r6
   131da:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   131dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   131de:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   131e0:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   131e2:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   131e6:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   131ea:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   131ec:	0e1b      	lsrs	r3, r3, #24
	compress(s->iv, s->leftover);
   131ee:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   131f0:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   131f4:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   131f8:	f7f0 fbde 	bl	39b8 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   131fc:	1f26      	subs	r6, r4, #4
   131fe:	1d2b      	adds	r3, r5, #4
   13200:	f105 0024 	add.w	r0, r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   13204:	f856 2f04 	ldr.w	r2, [r6, #4]!
		*digest++ = (uint8_t)(t >> 24);
   13208:	3304      	adds	r3, #4
   1320a:	0e11      	lsrs	r1, r2, #24
   1320c:	f803 1c08 	strb.w	r1, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   13210:	0c11      	lsrs	r1, r2, #16
   13212:	f803 1c07 	strb.w	r1, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   13216:	0a11      	lsrs	r1, r2, #8
   13218:	f803 1c06 	strb.w	r1, [r3, #-6]
		*digest++ = (uint8_t)(t);
   1321c:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   13220:	4283      	cmp	r3, r0
   13222:	d1ef      	bne.n	13204 <tc_sha256_final+0x88>
	_set(s, 0, sizeof(*s));
   13224:	4620      	mov	r0, r4
   13226:	2270      	movs	r2, #112	; 0x70
   13228:	2100      	movs	r1, #0
   1322a:	f7ff fdb8 	bl	12d9e <_set>
	return TC_CRYPTO_SUCCESS;
   1322e:	2001      	movs	r0, #1
}
   13230:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   13232:	4608      	mov	r0, r1
   13234:	e7fc      	b.n	13230 <tc_sha256_final+0xb4>

00013236 <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   13236:	b530      	push	{r4, r5, lr}
   13238:	1e43      	subs	r3, r0, #1
   1323a:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   1323c:	42a9      	cmp	r1, r5
   1323e:	d106      	bne.n	1324e <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   13240:	2136      	movs	r1, #54	; 0x36
   13242:	245c      	movs	r4, #92	; 0x5c
   13244:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   13246:	1a13      	subs	r3, r2, r0
   13248:	2b3f      	cmp	r3, #63	; 0x3f
   1324a:	d90c      	bls.n	13266 <rekey+0x30>
	}
}
   1324c:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   1324e:	780c      	ldrb	r4, [r1, #0]
   13250:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   13254:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   13258:	f811 4b01 	ldrb.w	r4, [r1], #1
   1325c:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   13260:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   13264:	e7ea      	b.n	1323c <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   13266:	f802 1b01 	strb.w	r1, [r2], #1
   1326a:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   1326e:	e7ea      	b.n	13246 <rekey+0x10>

00013270 <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   13270:	b5f0      	push	{r4, r5, r6, r7, lr}
   13272:	460e      	mov	r6, r1
   13274:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   13276:	4605      	mov	r5, r0
{
   13278:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   1327a:	b1b8      	cbz	r0, 132ac <tc_hmac_set_key+0x3c>
   1327c:	b341      	cbz	r1, 132d0 <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   1327e:	b34a      	cbz	r2, 132d4 <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   13280:	2a40      	cmp	r2, #64	; 0x40
   13282:	f100 0770 	add.w	r7, r0, #112	; 0x70
   13286:	d813      	bhi.n	132b0 <tc_hmac_set_key+0x40>
		 * certain timing attacks. Without these dummy calls,
		 * adversaries would be able to learn whether the key_size is
		 * greater than TC_SHA256_BLOCK_SIZE by measuring the time
		 * consumed in this process.
		 */
		(void)tc_sha256_init(&dummy_state.hash_state);
   13288:	a810      	add	r0, sp, #64	; 0x40
   1328a:	f7f0 fc7b 	bl	3b84 <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   1328e:	4622      	mov	r2, r4
   13290:	4669      	mov	r1, sp
   13292:	a810      	add	r0, sp, #64	; 0x40
   13294:	f7ff ff4c 	bl	13130 <tc_sha256_update>
				       dummy_key,
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   13298:	a910      	add	r1, sp, #64	; 0x40
   1329a:	a834      	add	r0, sp, #208	; 0xd0
   1329c:	f7ff ff6e 	bl	1317c <tc_sha256_final>
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   132a0:	4622      	mov	r2, r4
   132a2:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   132a4:	4638      	mov	r0, r7
   132a6:	f7ff ffc6 	bl	13236 <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   132aa:	2001      	movs	r0, #1
}
   132ac:	b04d      	add	sp, #308	; 0x134
   132ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   132b0:	f7f0 fc68 	bl	3b84 <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   132b4:	4622      	mov	r2, r4
   132b6:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   132b8:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   132bc:	4628      	mov	r0, r5
   132be:	f7ff ff37 	bl	13130 <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   132c2:	4629      	mov	r1, r5
   132c4:	4620      	mov	r0, r4
   132c6:	f7ff ff59 	bl	1317c <tc_sha256_final>
		rekey(ctx->key,
   132ca:	2220      	movs	r2, #32
   132cc:	4621      	mov	r1, r4
   132ce:	e7e9      	b.n	132a4 <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   132d0:	4608      	mov	r0, r1
   132d2:	e7eb      	b.n	132ac <tc_hmac_set_key+0x3c>
   132d4:	4610      	mov	r0, r2
   132d6:	e7e9      	b.n	132ac <tc_hmac_set_key+0x3c>

000132d8 <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   132d8:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   132da:	4604      	mov	r4, r0
   132dc:	b140      	cbz	r0, 132f0 <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   132de:	f7f0 fc51 	bl	3b84 <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   132e2:	2240      	movs	r2, #64	; 0x40
   132e4:	4620      	mov	r0, r4
   132e6:	f104 0170 	add.w	r1, r4, #112	; 0x70
   132ea:	f7ff ff21 	bl	13130 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   132ee:	2001      	movs	r0, #1
}
   132f0:	bd10      	pop	{r4, pc}

000132f2 <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   132f2:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   132f4:	b110      	cbz	r0, 132fc <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   132f6:	f7ff ff1b 	bl	13130 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   132fa:	2001      	movs	r0, #1
}
   132fc:	bd08      	pop	{r3, pc}

000132fe <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   132fe:	b570      	push	{r4, r5, r6, lr}
   13300:	460e      	mov	r6, r1
   13302:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   13304:	4605      	mov	r5, r0
   13306:	b1f0      	cbz	r0, 13346 <tc_hmac_final+0x48>
   13308:	2920      	cmp	r1, #32
   1330a:	d11c      	bne.n	13346 <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   1330c:	b1ea      	cbz	r2, 1334a <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   1330e:	4611      	mov	r1, r2
   13310:	f7ff ff34 	bl	1317c <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   13314:	4620      	mov	r0, r4
   13316:	f7f0 fc35 	bl	3b84 <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   1331a:	2240      	movs	r2, #64	; 0x40
   1331c:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   13320:	4620      	mov	r0, r4
   13322:	f7ff ff05 	bl	13130 <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   13326:	4632      	mov	r2, r6
   13328:	4629      	mov	r1, r5
   1332a:	4620      	mov	r0, r4
   1332c:	f7ff ff00 	bl	13130 <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   13330:	4621      	mov	r1, r4
   13332:	4628      	mov	r0, r5
   13334:	f7ff ff22 	bl	1317c <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   13338:	4620      	mov	r0, r4
   1333a:	22f0      	movs	r2, #240	; 0xf0
   1333c:	2100      	movs	r1, #0
   1333e:	f7ff fd2e 	bl	12d9e <_set>

	return TC_CRYPTO_SUCCESS;
   13342:	2001      	movs	r0, #1
}
   13344:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   13346:	2000      	movs	r0, #0
   13348:	e7fc      	b.n	13344 <tc_hmac_final+0x46>
   1334a:	4610      	mov	r0, r2
   1334c:	e7fa      	b.n	13344 <tc_hmac_final+0x46>

0001334e <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   1334e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13352:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   13354:	f04f 0b01 	mov.w	fp, #1
{
   13358:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   1335a:	2300      	movs	r3, #0
{
   1335c:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1335e:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   13362:	4631      	mov	r1, r6
{
   13364:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   13366:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   13368:	f88d 3006 	strb.w	r3, [sp, #6]
{
   1336c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   13370:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   13374:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   13378:	f7ff ff7a 	bl	13270 <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   1337c:	4620      	mov	r0, r4
   1337e:	f7ff ffab 	bl	132d8 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   13382:	2220      	movs	r2, #32
   13384:	4629      	mov	r1, r5
   13386:	4620      	mov	r0, r4
   13388:	f7ff ffb3 	bl	132f2 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   1338c:	465a      	mov	r2, fp
   1338e:	4620      	mov	r0, r4
   13390:	f10d 0106 	add.w	r1, sp, #6
   13394:	f7ff ffad 	bl	132f2 <tc_hmac_update>

	if (data && datalen)
   13398:	f1b8 0f00 	cmp.w	r8, #0
   1339c:	d007      	beq.n	133ae <update+0x60>
   1339e:	f1b9 0f00 	cmp.w	r9, #0
   133a2:	d004      	beq.n	133ae <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   133a4:	464a      	mov	r2, r9
   133a6:	4641      	mov	r1, r8
   133a8:	4620      	mov	r0, r4
   133aa:	f7ff ffa2 	bl	132f2 <tc_hmac_update>
	if (additional_data && additional_datalen)
   133ae:	b13f      	cbz	r7, 133c0 <update+0x72>
   133b0:	f1ba 0f00 	cmp.w	sl, #0
   133b4:	d004      	beq.n	133c0 <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   133b6:	4652      	mov	r2, sl
   133b8:	4639      	mov	r1, r7
   133ba:	4620      	mov	r0, r4
   133bc:	f7ff ff99 	bl	132f2 <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   133c0:	4622      	mov	r2, r4
   133c2:	2120      	movs	r1, #32
   133c4:	4630      	mov	r0, r6
   133c6:	f7ff ff9a 	bl	132fe <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   133ca:	2220      	movs	r2, #32
   133cc:	4631      	mov	r1, r6
   133ce:	4620      	mov	r0, r4
   133d0:	f7ff ff4e 	bl	13270 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   133d4:	4620      	mov	r0, r4
   133d6:	f7ff ff7f 	bl	132d8 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   133da:	2220      	movs	r2, #32
   133dc:	4629      	mov	r1, r5
   133de:	4620      	mov	r0, r4
   133e0:	f7ff ff87 	bl	132f2 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   133e4:	4622      	mov	r2, r4
   133e6:	2120      	movs	r1, #32
   133e8:	4628      	mov	r0, r5
   133ea:	f7ff ff88 	bl	132fe <tc_hmac_final>

	if (data == 0 || datalen == 0)
   133ee:	f1b8 0f00 	cmp.w	r8, #0
   133f2:	d03a      	beq.n	1346a <update+0x11c>
   133f4:	f1b9 0f00 	cmp.w	r9, #0
   133f8:	d037      	beq.n	1346a <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   133fa:	2220      	movs	r2, #32
   133fc:	4631      	mov	r1, r6
   133fe:	4620      	mov	r0, r4
   13400:	f7ff ff36 	bl	13270 <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   13404:	4620      	mov	r0, r4
   13406:	f7ff ff67 	bl	132d8 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1340a:	2220      	movs	r2, #32
   1340c:	4629      	mov	r1, r5
   1340e:	4620      	mov	r0, r4
   13410:	f7ff ff6f 	bl	132f2 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   13414:	2201      	movs	r2, #1
   13416:	f10d 0107 	add.w	r1, sp, #7
   1341a:	4620      	mov	r0, r4
   1341c:	f7ff ff69 	bl	132f2 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   13420:	464a      	mov	r2, r9
   13422:	4641      	mov	r1, r8
   13424:	4620      	mov	r0, r4
   13426:	f7ff ff64 	bl	132f2 <tc_hmac_update>
	if (additional_data && additional_datalen)
   1342a:	b13f      	cbz	r7, 1343c <update+0xee>
   1342c:	f1ba 0f00 	cmp.w	sl, #0
   13430:	d004      	beq.n	1343c <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   13432:	4652      	mov	r2, sl
   13434:	4639      	mov	r1, r7
   13436:	4620      	mov	r0, r4
   13438:	f7ff ff5b 	bl	132f2 <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   1343c:	4622      	mov	r2, r4
   1343e:	2120      	movs	r1, #32
   13440:	4630      	mov	r0, r6
   13442:	f7ff ff5c 	bl	132fe <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   13446:	2220      	movs	r2, #32
   13448:	4631      	mov	r1, r6
   1344a:	4620      	mov	r0, r4
   1344c:	f7ff ff10 	bl	13270 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   13450:	4620      	mov	r0, r4
   13452:	f7ff ff41 	bl	132d8 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   13456:	2220      	movs	r2, #32
   13458:	4629      	mov	r1, r5
   1345a:	4620      	mov	r0, r4
   1345c:	f7ff ff49 	bl	132f2 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   13460:	4622      	mov	r2, r4
   13462:	2120      	movs	r1, #32
   13464:	4628      	mov	r0, r5
   13466:	f7ff ff4a 	bl	132fe <tc_hmac_final>
}
   1346a:	b003      	add	sp, #12
   1346c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00013470 <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   13470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13472:	460c      	mov	r4, r1
   13474:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   13476:	4605      	mov	r5, r0
   13478:	b1b0      	cbz	r0, 134a8 <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   1347a:	b1b9      	cbz	r1, 134ac <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   1347c:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   1347e:	2220      	movs	r2, #32
   13480:	2100      	movs	r1, #0
   13482:	30f0      	adds	r0, #240	; 0xf0
   13484:	f7ff fc8b 	bl	12d9e <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   13488:	2220      	movs	r2, #32
   1348a:	2101      	movs	r1, #1
   1348c:	f505 7088 	add.w	r0, r5, #272	; 0x110
   13490:	f7ff fc85 	bl	12d9e <_set>
	update(prng, personalization, plen, 0, 0);
   13494:	4628      	mov	r0, r5
   13496:	4633      	mov	r3, r6
   13498:	463a      	mov	r2, r7
   1349a:	4621      	mov	r1, r4
   1349c:	9600      	str	r6, [sp, #0]
   1349e:	f7ff ff56 	bl	1334e <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   134a2:	2001      	movs	r0, #1
	prng->countdown = 0;
   134a4:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   134a8:	b003      	add	sp, #12
   134aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   134ac:	4608      	mov	r0, r1
   134ae:	e7fb      	b.n	134a8 <tc_hmac_prng_init+0x38>

000134b0 <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   134b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   134b2:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   134b4:	4605      	mov	r5, r0
   134b6:	b180      	cbz	r0, 134da <tc_hmac_prng_reseed+0x2a>
   134b8:	b179      	cbz	r1, 134da <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   134ba:	2a1f      	cmp	r2, #31
   134bc:	d90d      	bls.n	134da <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   134be:	b153      	cbz	r3, 134d6 <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   134c0:	b16c      	cbz	r4, 134de <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   134c2:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   134c4:	f7ff ff43 	bl	1334e <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   134c8:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   134cc:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   134ce:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   134d2:	b003      	add	sp, #12
   134d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   134d6:	9300      	str	r3, [sp, #0]
   134d8:	e7f4      	b.n	134c4 <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   134da:	2000      	movs	r0, #0
   134dc:	e7f9      	b.n	134d2 <tc_hmac_prng_reseed+0x22>
   134de:	4620      	mov	r0, r4
   134e0:	e7f7      	b.n	134d2 <tc_hmac_prng_reseed+0x22>

000134e2 <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   134e2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   134e6:	460d      	mov	r5, r1
   134e8:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   134ea:	4680      	mov	r8, r0
   134ec:	b3d8      	cbz	r0, 13566 <tc_hmac_prng_generate+0x84>
   134ee:	b3d2      	cbz	r2, 13566 <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   134f0:	1e4b      	subs	r3, r1, #1
   134f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   134f6:	d236      	bcs.n	13566 <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   134f8:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   134fc:	b3ab      	cbz	r3, 1356a <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   134fe:	3b01      	subs	r3, #1
   13500:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   13504:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   13508:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1350c:	2220      	movs	r2, #32
   1350e:	4649      	mov	r1, r9
   13510:	4620      	mov	r0, r4
   13512:	f7ff fead 	bl	13270 <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   13516:	4620      	mov	r0, r4
   13518:	f7ff fede 	bl	132d8 <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1351c:	2220      	movs	r2, #32
   1351e:	4639      	mov	r1, r7
   13520:	4620      	mov	r0, r4
   13522:	f7ff fee6 	bl	132f2 <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   13526:	4622      	mov	r2, r4
   13528:	2120      	movs	r1, #32
   1352a:	4638      	mov	r0, r7
   1352c:	f7ff fee7 	bl	132fe <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   13530:	2d20      	cmp	r5, #32
   13532:	462e      	mov	r6, r5
   13534:	bf28      	it	cs
   13536:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   13538:	4640      	mov	r0, r8
   1353a:	4633      	mov	r3, r6
   1353c:	463a      	mov	r2, r7
   1353e:	4631      	mov	r1, r6
   13540:	f7ff fc20 	bl	12d84 <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   13544:	2d20      	cmp	r5, #32
   13546:	bf38      	it	cc
   13548:	2520      	movcc	r5, #32
	while (outlen != 0) {
   1354a:	3d20      	subs	r5, #32
		out += bufferlen;
   1354c:	44b0      	add	r8, r6
	while (outlen != 0) {
   1354e:	d1dd      	bne.n	1350c <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   13550:	4620      	mov	r0, r4
   13552:	462b      	mov	r3, r5
   13554:	462a      	mov	r2, r5
   13556:	4629      	mov	r1, r5
   13558:	9500      	str	r5, [sp, #0]
   1355a:	f7ff fef8 	bl	1334e <update>

	return TC_CRYPTO_SUCCESS;
   1355e:	2001      	movs	r0, #1
}
   13560:	b003      	add	sp, #12
   13562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   13566:	2000      	movs	r0, #0
   13568:	e7fa      	b.n	13560 <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   1356a:	f04f 30ff 	mov.w	r0, #4294967295
   1356e:	e7f7      	b.n	13560 <tc_hmac_prng_generate+0x7e>

00013570 <z_irq_spurious>:
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   13570:	2100      	movs	r1, #0
   13572:	2001      	movs	r0, #1
   13574:	f7f0 bbc6 	b.w	3d04 <z_arm_fatal_error>

00013578 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   13578:	6e03      	ldr	r3, [r0, #96]	; 0x60
   1357a:	f383 880b 	msr	PSPLIM, r3
}
   1357e:	4770      	bx	lr

00013580 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   13580:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   13582:	6800      	ldr	r0, [r0, #0]
   13584:	f7f0 bbbe 	b.w	3d04 <z_arm_fatal_error>

00013588 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   13588:	b508      	push	{r3, lr}
	handler();
   1358a:	f7f0 fc5b 	bl	3e44 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1358e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   13592:	f7f0 bc9d 	b.w	3ed0 <z_arm_exc_exit>

00013596 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   13596:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   1359a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1359e:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   135a0:	bf08      	it	eq
   135a2:	f06f 0015 	mvneq.w	r0, #21
   135a6:	4770      	bx	lr

000135a8 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   135a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   135ac:	4684      	mov	ip, r0
   135ae:	4688      	mov	r8, r1
	register const char *s = nptr;
   135b0:	4601      	mov	r1, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   135b2:	460c      	mov	r4, r1
   135b4:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
}

static inline int isspace(int c)
{
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   135b8:	2b20      	cmp	r3, #32
   135ba:	d033      	beq.n	13624 <strtol+0x7c>
   135bc:	f1a3 0009 	sub.w	r0, r3, #9
   135c0:	2804      	cmp	r0, #4
   135c2:	d92f      	bls.n	13624 <strtol+0x7c>
	} while (isspace(c));
	if (c == '-') {
   135c4:	2b2d      	cmp	r3, #45	; 0x2d
   135c6:	d12f      	bne.n	13628 <strtol+0x80>
		neg = 1;
		c = *s++;
   135c8:	784b      	ldrb	r3, [r1, #1]
   135ca:	1c8c      	adds	r4, r1, #2
		neg = 1;
   135cc:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   135ce:	2a00      	cmp	r2, #0
   135d0:	d05c      	beq.n	1368c <strtol+0xe4>
   135d2:	2a10      	cmp	r2, #16
   135d4:	d109      	bne.n	135ea <strtol+0x42>
   135d6:	2b30      	cmp	r3, #48	; 0x30
   135d8:	d107      	bne.n	135ea <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   135da:	7823      	ldrb	r3, [r4, #0]
   135dc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   135e0:	2b58      	cmp	r3, #88	; 0x58
   135e2:	d14e      	bne.n	13682 <strtol+0xda>
		c = s[1];
		s += 2;
		base = 16;
   135e4:	2210      	movs	r2, #16
		c = s[1];
   135e6:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   135e8:	3402      	adds	r4, #2
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   135ea:	2600      	movs	r6, #0
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   135ec:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   135f0:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
   135f2:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   135f6:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   135f8:	fb02 791e 	mls	r9, r2, lr, r7
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   135fc:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   13600:	2d09      	cmp	r5, #9
   13602:	d817      	bhi.n	13634 <strtol+0x8c>
			c -= '0';
   13604:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   13606:	429a      	cmp	r2, r3
   13608:	dd24      	ble.n	13654 <strtol+0xac>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1360a:	1c75      	adds	r5, r6, #1
   1360c:	d007      	beq.n	1361e <strtol+0x76>
   1360e:	4570      	cmp	r0, lr
   13610:	d81d      	bhi.n	1364e <strtol+0xa6>
   13612:	d101      	bne.n	13618 <strtol+0x70>
   13614:	454b      	cmp	r3, r9
   13616:	dc1a      	bgt.n	1364e <strtol+0xa6>
			any = -1;
		} else {
			any = 1;
   13618:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   1361a:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   1361e:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   13622:	e7eb      	b.n	135fc <strtol+0x54>
{
   13624:	4621      	mov	r1, r4
   13626:	e7c4      	b.n	135b2 <strtol+0xa>
	} else if (c == '+') {
   13628:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   1362a:	bf04      	itt	eq
   1362c:	784b      	ldrbeq	r3, [r1, #1]
   1362e:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   13630:	2100      	movs	r1, #0
   13632:	e7cc      	b.n	135ce <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   13634:	f043 0520 	orr.w	r5, r3, #32
   13638:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1363a:	2d19      	cmp	r5, #25
   1363c:	d80a      	bhi.n	13654 <strtol+0xac>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1363e:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   13642:	2d1a      	cmp	r5, #26
   13644:	bf34      	ite	cc
   13646:	2537      	movcc	r5, #55	; 0x37
   13648:	2557      	movcs	r5, #87	; 0x57
   1364a:	1b5b      	subs	r3, r3, r5
   1364c:	e7db      	b.n	13606 <strtol+0x5e>
			any = -1;
   1364e:	f04f 36ff 	mov.w	r6, #4294967295
   13652:	e7e4      	b.n	1361e <strtol+0x76>
		}
	}

	if (any < 0) {
   13654:	1c73      	adds	r3, r6, #1
   13656:	d109      	bne.n	1366c <strtol+0xc4>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   13658:	f7fb fac8 	bl	ebec <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   1365c:	2326      	movs	r3, #38	; 0x26
   1365e:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   13660:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   13662:	f1b8 0f00 	cmp.w	r8, #0
   13666:	d107      	bne.n	13678 <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   13668:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   1366c:	b101      	cbz	r1, 13670 <strtol+0xc8>
		acc = -acc;
   1366e:	4240      	negs	r0, r0
	if (endptr != NULL) {
   13670:	f1b8 0f00 	cmp.w	r8, #0
   13674:	d0f8      	beq.n	13668 <strtol+0xc0>
		*endptr = (char *)(any ? s - 1 : nptr);
   13676:	b10e      	cbz	r6, 1367c <strtol+0xd4>
   13678:	f104 3cff 	add.w	ip, r4, #4294967295
   1367c:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   13680:	e7f2      	b.n	13668 <strtol+0xc0>
	if (base == 0) {
   13682:	2330      	movs	r3, #48	; 0x30
   13684:	2a00      	cmp	r2, #0
   13686:	d1b0      	bne.n	135ea <strtol+0x42>
		base = c == '0' ? 8 : 10;
   13688:	2208      	movs	r2, #8
   1368a:	e7ae      	b.n	135ea <strtol+0x42>
	if ((base == 0 || base == 16) &&
   1368c:	2b30      	cmp	r3, #48	; 0x30
   1368e:	d0a4      	beq.n	135da <strtol+0x32>
		base = c == '0' ? 8 : 10;
   13690:	220a      	movs	r2, #10
   13692:	e7aa      	b.n	135ea <strtol+0x42>

00013694 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   13694:	4603      	mov	r3, r0
   13696:	3901      	subs	r1, #1
   13698:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1369c:	b90a      	cbnz	r2, 136a2 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1369e:	701a      	strb	r2, [r3, #0]

	return dest;
}
   136a0:	4770      	bx	lr
		*d = *s;
   136a2:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   136a6:	e7f7      	b.n	13698 <strcpy+0x4>

000136a8 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   136a8:	b570      	push	{r4, r5, r6, lr}
   136aa:	4605      	mov	r5, r0
   136ac:	3901      	subs	r1, #1
   136ae:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   136b0:	b142      	cbz	r2, 136c4 <strncpy+0x1c>
   136b2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   136b6:	1e56      	subs	r6, r2, #1
   136b8:	b92b      	cbnz	r3, 136c6 <strncpy+0x1e>
   136ba:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   136bc:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   136c0:	42a2      	cmp	r2, r4
   136c2:	d1fb      	bne.n	136bc <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   136c4:	bd70      	pop	{r4, r5, r6, pc}
		n--;
   136c6:	4632      	mov	r2, r6
		*d = *s;
   136c8:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   136cc:	e7ef      	b.n	136ae <strncpy+0x6>

000136ce <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   136ce:	4603      	mov	r3, r0
	size_t n = 0;
   136d0:	2000      	movs	r0, #0

	while (*s != '\0') {
   136d2:	5c1a      	ldrb	r2, [r3, r0]
   136d4:	b902      	cbnz	r2, 136d8 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   136d6:	4770      	bx	lr
		n++;
   136d8:	3001      	adds	r0, #1
   136da:	e7fa      	b.n	136d2 <strlen+0x4>

000136dc <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   136dc:	1e43      	subs	r3, r0, #1
   136de:	3901      	subs	r1, #1
   136e0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   136e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   136e8:	4282      	cmp	r2, r0
   136ea:	d101      	bne.n	136f0 <strcmp+0x14>
   136ec:	2a00      	cmp	r2, #0
   136ee:	d1f7      	bne.n	136e0 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   136f0:	1a10      	subs	r0, r2, r0
   136f2:	4770      	bx	lr

000136f4 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   136f4:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   136f6:	2400      	movs	r4, #0
   136f8:	42a2      	cmp	r2, r4
   136fa:	d008      	beq.n	1370e <strncmp+0x1a>
   136fc:	5d03      	ldrb	r3, [r0, r4]
   136fe:	5d0d      	ldrb	r5, [r1, r4]
   13700:	42ab      	cmp	r3, r5
   13702:	d102      	bne.n	1370a <strncmp+0x16>
   13704:	3401      	adds	r4, #1
   13706:	2b00      	cmp	r3, #0
   13708:	d1f6      	bne.n	136f8 <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   1370a:	1b58      	subs	r0, r3, r5
   1370c:	e000      	b.n	13710 <strncmp+0x1c>
   1370e:	2000      	movs	r0, #0
}
   13710:	bd30      	pop	{r4, r5, pc}

00013712 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   13712:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   13714:	b15a      	cbz	r2, 1372e <memcmp+0x1c>
   13716:	3901      	subs	r1, #1
   13718:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1371a:	f810 2b01 	ldrb.w	r2, [r0], #1
   1371e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   13722:	42a0      	cmp	r0, r4
   13724:	d001      	beq.n	1372a <memcmp+0x18>
   13726:	429a      	cmp	r2, r3
   13728:	d0f7      	beq.n	1371a <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1372a:	1ad0      	subs	r0, r2, r3
}
   1372c:	bd10      	pop	{r4, pc}
		return 0;
   1372e:	4610      	mov	r0, r2
   13730:	e7fc      	b.n	1372c <memcmp+0x1a>

00013732 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   13732:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   13734:	ea81 0400 	eor.w	r4, r1, r0
   13738:	07a5      	lsls	r5, r4, #30
   1373a:	4603      	mov	r3, r0
   1373c:	d00b      	beq.n	13756 <memcpy+0x24>
   1373e:	3b01      	subs	r3, #1
   13740:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   13742:	4291      	cmp	r1, r2
   13744:	d11b      	bne.n	1377e <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   13746:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   13748:	2a00      	cmp	r2, #0
   1374a:	d0fc      	beq.n	13746 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1374c:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   13750:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   13752:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   13756:	079c      	lsls	r4, r3, #30
   13758:	d1f6      	bne.n	13748 <memcpy+0x16>
   1375a:	f022 0403 	bic.w	r4, r2, #3
   1375e:	1f1d      	subs	r5, r3, #4
   13760:	0896      	lsrs	r6, r2, #2
   13762:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   13764:	42b9      	cmp	r1, r7
   13766:	d105      	bne.n	13774 <memcpy+0x42>
   13768:	f06f 0503 	mvn.w	r5, #3
   1376c:	4423      	add	r3, r4
   1376e:	fb05 2206 	mla	r2, r5, r6, r2
   13772:	e7e4      	b.n	1373e <memcpy+0xc>
			*(d_word++) = *(s_word++);
   13774:	f851 cb04 	ldr.w	ip, [r1], #4
   13778:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   1377c:	e7f2      	b.n	13764 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   1377e:	f811 4b01 	ldrb.w	r4, [r1], #1
   13782:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   13786:	e7dc      	b.n	13742 <memcpy+0x10>

00013788 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   13788:	4603      	mov	r3, r0
{
   1378a:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
   1378c:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1378e:	079c      	lsls	r4, r3, #30
   13790:	d111      	bne.n	137b6 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   13792:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   13796:	f022 0603 	bic.w	r6, r2, #3
   1379a:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1379e:	441e      	add	r6, r3
   137a0:	0894      	lsrs	r4, r2, #2
   137a2:	42b3      	cmp	r3, r6
   137a4:	d10d      	bne.n	137c2 <memset+0x3a>
   137a6:	f06f 0503 	mvn.w	r5, #3
   137aa:	fb05 2204 	mla	r2, r5, r4, r2
   137ae:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   137b0:	4293      	cmp	r3, r2
   137b2:	d109      	bne.n	137c8 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   137b4:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   137b6:	2a00      	cmp	r2, #0
   137b8:	d0fc      	beq.n	137b4 <memset+0x2c>
		*(d_byte++) = c_byte;
   137ba:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   137be:	3a01      	subs	r2, #1
   137c0:	e7e5      	b.n	1378e <memset+0x6>
		*(d_word++) = c_word;
   137c2:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   137c6:	e7ec      	b.n	137a2 <memset+0x1a>
		*(d_byte++) = c_byte;
   137c8:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   137cc:	e7f0      	b.n	137b0 <memset+0x28>

000137ce <_stdout_hook_default>:
}
   137ce:	f04f 30ff 	mov.w	r0, #4294967295
   137d2:	4770      	bx	lr

000137d4 <bt_rpa_irk_matches>:

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   137d4:	2203      	movs	r2, #3
	return 0;
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
   137d6:	b530      	push	{r4, r5, lr}
   137d8:	4605      	mov	r5, r0
   137da:	b087      	sub	sp, #28
   137dc:	460c      	mov	r4, r1
	memcpy(res, r, 3);
   137de:	a802      	add	r0, sp, #8
   137e0:	4411      	add	r1, r2
   137e2:	f7ff ffa6 	bl	13732 <memcpy>
	(void)memset(res + 3, 0, 13);
   137e6:	220d      	movs	r2, #13
   137e8:	2100      	movs	r1, #0
   137ea:	f10d 000b 	add.w	r0, sp, #11
   137ee:	f7ff ffcb 	bl	13788 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   137f2:	aa02      	add	r2, sp, #8
   137f4:	4611      	mov	r1, r2
   137f6:	4628      	mov	r0, r5
   137f8:	f000 fa3a 	bl	13c70 <bt_encrypt_le>
	if (err) {
   137fc:	b970      	cbnz	r0, 1381c <bt_rpa_irk_matches+0x48>
	memcpy(out, res, 3);
   137fe:	2203      	movs	r2, #3
   13800:	a902      	add	r1, sp, #8
   13802:	a801      	add	r0, sp, #4
   13804:	f7ff ff95 	bl	13732 <memcpy>
	err = ah(irk, addr->val + 3, hash);
	if (err) {
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   13808:	2203      	movs	r2, #3
   1380a:	4620      	mov	r0, r4
   1380c:	a901      	add	r1, sp, #4
   1380e:	f7ff ff80 	bl	13712 <memcmp>
   13812:	fab0 f080 	clz	r0, r0
   13816:	0940      	lsrs	r0, r0, #5
}
   13818:	b007      	add	sp, #28
   1381a:	bd30      	pop	{r4, r5, pc}
		return false;
   1381c:	2000      	movs	r0, #0
   1381e:	e7fb      	b.n	13818 <bt_rpa_irk_matches+0x44>

00013820 <bt_settings_decode_key>:
{
   13820:	b570      	push	{r4, r5, r6, lr}
   13822:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   13824:	2100      	movs	r1, #0
{
   13826:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   13828:	f7ff f864 	bl	128f4 <settings_name_next>
   1382c:	280d      	cmp	r0, #13
   1382e:	d118      	bne.n	13862 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   13830:	7b23      	ldrb	r3, [r4, #12]
   13832:	2b30      	cmp	r3, #48	; 0x30
   13834:	d111      	bne.n	1385a <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   13836:	2300      	movs	r3, #0
   13838:	702b      	strb	r3, [r5, #0]
   1383a:	f104 060c 	add.w	r6, r4, #12
   1383e:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   13840:	462a      	mov	r2, r5
   13842:	4620      	mov	r0, r4
   13844:	2301      	movs	r3, #1
   13846:	2102      	movs	r1, #2
   13848:	3402      	adds	r4, #2
   1384a:	f7fe fc00 	bl	1204e <hex2bin>
	for (u8_t i = 0; i < 6; i++) {
   1384e:	42b4      	cmp	r4, r6
   13850:	f105 35ff 	add.w	r5, r5, #4294967295
   13854:	d1f4      	bne.n	13840 <bt_settings_decode_key+0x20>
	return 0;
   13856:	2000      	movs	r0, #0
}
   13858:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   1385a:	2b31      	cmp	r3, #49	; 0x31
   1385c:	d101      	bne.n	13862 <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   1385e:	2301      	movs	r3, #1
   13860:	e7ea      	b.n	13838 <bt_settings_decode_key+0x18>
		return -EINVAL;
   13862:	f06f 0015 	mvn.w	r0, #21
   13866:	e7f7      	b.n	13858 <bt_settings_decode_key+0x38>

00013868 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   13868:	b510      	push	{r4, lr}
   1386a:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1386c:	7801      	ldrb	r1, [r0, #0]
   1386e:	7822      	ldrb	r2, [r4, #0]
{
   13870:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   13872:	428a      	cmp	r2, r1
   13874:	d00e      	beq.n	13894 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   13876:	4669      	mov	r1, sp
   13878:	f7f1 f904 	bl	4a84 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1387c:	4620      	mov	r0, r4
   1387e:	a905      	add	r1, sp, #20
   13880:	f7f1 f900 	bl	4a84 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   13884:	2210      	movs	r2, #16
   13886:	f10d 0115 	add.w	r1, sp, #21
   1388a:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1388e:	f7ff ff40 	bl	13712 <memcmp>
   13892:	e007      	b.n	138a4 <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   13894:	2a01      	cmp	r2, #1
   13896:	d007      	beq.n	138a8 <bt_uuid_cmp+0x40>
   13898:	2a02      	cmp	r2, #2
   1389a:	d008      	beq.n	138ae <bt_uuid_cmp+0x46>
   1389c:	b95a      	cbnz	r2, 138b6 <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1389e:	8840      	ldrh	r0, [r0, #2]
   138a0:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   138a2:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   138a4:	b00a      	add	sp, #40	; 0x28
   138a6:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   138a8:	6840      	ldr	r0, [r0, #4]
   138aa:	6863      	ldr	r3, [r4, #4]
   138ac:	e7f9      	b.n	138a2 <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   138ae:	2210      	movs	r2, #16
   138b0:	1c61      	adds	r1, r4, #1
   138b2:	3001      	adds	r0, #1
   138b4:	e7eb      	b.n	1388e <bt_uuid_cmp+0x26>
	switch (u1->type) {
   138b6:	f06f 0015 	mvn.w	r0, #21
   138ba:	e7f3      	b.n	138a4 <bt_uuid_cmp+0x3c>

000138bc <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const u8_t *data, u8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   138bc:	2a04      	cmp	r2, #4
{
   138be:	b538      	push	{r3, r4, r5, lr}
   138c0:	460c      	mov	r4, r1
	switch (data_len) {
   138c2:	d00d      	beq.n	138e0 <bt_uuid_create+0x24>
   138c4:	2a10      	cmp	r2, #16
   138c6:	d019      	beq.n	138fc <bt_uuid_create+0x40>
   138c8:	2a02      	cmp	r2, #2
   138ca:	f04f 0300 	mov.w	r3, #0
   138ce:	d11b      	bne.n	13908 <bt_uuid_create+0x4c>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   138d0:	7003      	strb	r3, [r0, #0]
	return ((u16_t)src[1] << 8) | src[0];
   138d2:	784a      	ldrb	r2, [r1, #1]
   138d4:	780b      	ldrb	r3, [r1, #0]
   138d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   138da:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   138dc:	2001      	movs	r0, #1
}
   138de:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   138e0:	2301      	movs	r3, #1
   138e2:	7003      	strb	r3, [r0, #0]
   138e4:	78a2      	ldrb	r2, [r4, #2]
   138e6:	78c9      	ldrb	r1, [r1, #3]
   138e8:	7865      	ldrb	r5, [r4, #1]
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   138ea:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((u16_t)src[1] << 8) | src[0];
   138ee:	7822      	ldrb	r2, [r4, #0]
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   138f0:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   138f4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   138f8:	6042      	str	r2, [r0, #4]
		break;
   138fa:	e7ef      	b.n	138dc <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
   138fc:	2302      	movs	r3, #2
   138fe:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   13902:	f7ff ff16 	bl	13732 <memcpy>
		break;
   13906:	e7e9      	b.n	138dc <bt_uuid_create+0x20>
	switch (data_len) {
   13908:	4618      	mov	r0, r3
   1390a:	e7e8      	b.n	138de <bt_uuid_create+0x22>

0001390c <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1390c:	e8d0 0faf 	lda	r0, [r0]
}
   13910:	4770      	bx	lr

00013912 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   13912:	2207      	movs	r2, #7
   13914:	f7ff bf0d 	b.w	13732 <memcpy>

00013918 <atomic_or>:
{
   13918:	4603      	mov	r3, r0
}
   1391a:	e8d3 0fef 	ldaex	r0, [r3]
   1391e:	ea40 0201 	orr.w	r2, r0, r1
   13922:	e8c3 2fec 	stlex	ip, r2, [r3]
   13926:	f1bc 0f00 	cmp.w	ip, #0
   1392a:	d1f6      	bne.n	1391a <atomic_or+0x2>
   1392c:	4770      	bx	lr

0001392e <atomic_test_and_set_bit>:
{
   1392e:	b508      	push	{r3, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   13930:	2301      	movs	r3, #1
   13932:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   13936:	f7ff ffef 	bl	13918 <atomic_or>
	return (old & mask) != 0;
   1393a:	4201      	tst	r1, r0
}
   1393c:	bf14      	ite	ne
   1393e:	2001      	movne	r0, #1
   13940:	2000      	moveq	r0, #0
   13942:	bd08      	pop	{r3, pc}

00013944 <atomic_and>:
{
   13944:	4603      	mov	r3, r0
}
   13946:	e8d3 0fef 	ldaex	r0, [r3]
   1394a:	ea00 0201 	and.w	r2, r0, r1
   1394e:	e8c3 2fec 	stlex	ip, r2, [r3]
   13952:	f1bc 0f00 	cmp.w	ip, #0
   13956:	d1f6      	bne.n	13946 <atomic_and+0x2>
   13958:	4770      	bx	lr

0001395a <atomic_set_bit_to>:
 * @param val true for 1, false for 0.
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
   1395a:	460b      	mov	r3, r1
   1395c:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1395e:	f001 041f 	and.w	r4, r1, #31
   13962:	2101      	movs	r1, #1
   13964:	095b      	lsrs	r3, r3, #5
   13966:	40a1      	lsls	r1, r4

	if (val) {
   13968:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1396c:	b112      	cbz	r2, 13974 <atomic_set_bit_to+0x1a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
   1396e:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13970:	f7ff bfd2 	b.w	13918 <atomic_or>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13974:	43c9      	mvns	r1, r1
}
   13976:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13978:	f7ff bfe4 	b.w	13944 <atomic_and>

0001397c <sys_put_le64>:
	dst[1] = val >> 8;
   1397c:	f3c0 2307 	ubfx	r3, r0, #8, #8
   13980:	7053      	strb	r3, [r2, #1]
	dst[0] = val;
   13982:	2300      	movs	r3, #0
   13984:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   13986:	0e00      	lsrs	r0, r0, #24
   13988:	70d0      	strb	r0, [r2, #3]
   1398a:	f3c1 2007 	ubfx	r0, r1, #8, #8
   1398e:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   13990:	7093      	strb	r3, [r2, #2]
   13992:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   13994:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   13996:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   13998:	71d1      	strb	r1, [r2, #7]
}
   1399a:	4770      	bx	lr

0001399c <le_adv_set_private_addr.isra.0>:
static int le_set_private_addr(u8_t id)
   1399c:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1399e:	2106      	movs	r1, #6
   139a0:	4668      	mov	r0, sp
   139a2:	f7f3 f933 	bl	6c0c <bt_rand>
	if (err) {
   139a6:	b940      	cbnz	r0, 139ba <le_adv_set_private_addr.isra.0+0x1e>
	nrpa.val[5] &= 0x3f;
   139a8:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   139ac:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
   139ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   139b2:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   139b6:	f7f1 fcd1 	bl	535c <set_random_address>
}
   139ba:	b003      	add	sp, #12
   139bc:	f85d fb04 	ldr.w	pc, [sp], #4

000139c0 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   139c0:	f100 0314 	add.w	r3, r0, #20
{
   139c4:	b510      	push	{r4, lr}
   139c6:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   139c8:	4618      	mov	r0, r3
   139ca:	f7ff ff9f 	bl	1390c <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   139ce:	0642      	lsls	r2, r0, #25
   139d0:	d50a      	bpl.n	139e8 <adv_pause_enabled+0x28>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   139d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   139d6:	4618      	mov	r0, r3
   139d8:	f7ff ff9e 	bl	13918 <atomic_or>
	return set_le_adv_enable_legacy(adv, enable);
   139dc:	4620      	mov	r0, r4
}
   139de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   139e2:	2100      	movs	r1, #0
   139e4:	f7f1 bcfa 	b.w	53dc <set_le_adv_enable_legacy>
}
   139e8:	bd10      	pop	{r4, pc}

000139ea <adv_unpause_enabled>:
{
   139ea:	b510      	push	{r4, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   139ec:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   139f0:	4604      	mov	r4, r0
   139f2:	3014      	adds	r0, #20
   139f4:	f7ff ffa6 	bl	13944 <atomic_and>
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   139f8:	04c3      	lsls	r3, r0, #19
   139fa:	d505      	bpl.n	13a08 <adv_unpause_enabled+0x1e>
	return set_le_adv_enable_legacy(adv, enable);
   139fc:	4620      	mov	r0, r4
}
   139fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   13a02:	2101      	movs	r1, #1
   13a04:	f7f1 bcea 	b.w	53dc <set_le_adv_enable_legacy>
}
   13a08:	bd10      	pop	{r4, pc}

00013a0a <hci_id_add.isra.0>:
static int hci_id_add(u8_t id, const bt_addr_le_t *addr, u8_t peer_irk[16])
   13a0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13a0c:	4607      	mov	r7, r0
   13a0e:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   13a10:	f242 0027 	movw	r0, #8231	; 0x2027
   13a14:	2127      	movs	r1, #39	; 0x27
   13a16:	f7f1 fbc9 	bl	51ac <bt_hci_cmd_create>
	if (!buf) {
   13a1a:	4604      	mov	r4, r0
   13a1c:	b1d0      	cbz	r0, 13a54 <hci_id_add.isra.0+0x4a>
	cp = net_buf_add(buf, sizeof(*cp));
   13a1e:	2127      	movs	r1, #39	; 0x27
   13a20:	3008      	adds	r0, #8
   13a22:	f7f9 fed5 	bl	d7d0 <net_buf_simple_add>
   13a26:	4605      	mov	r5, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   13a28:	4639      	mov	r1, r7
   13a2a:	f7ff ff72 	bl	13912 <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   13a2e:	4631      	mov	r1, r6
   13a30:	2210      	movs	r2, #16
   13a32:	1de8      	adds	r0, r5, #7
   13a34:	f7ff fe7d 	bl	13732 <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   13a38:	2210      	movs	r2, #16
   13a3a:	2100      	movs	r1, #0
   13a3c:	f105 0017 	add.w	r0, r5, #23
   13a40:	f7ff fea2 	bl	13788 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   13a44:	4621      	mov	r1, r4
}
   13a46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   13a4a:	2200      	movs	r2, #0
   13a4c:	f242 0027 	movw	r0, #8231	; 0x2027
   13a50:	f7f1 bbf6 	b.w	5240 <bt_hci_cmd_send_sync>
}
   13a54:	f06f 0036 	mvn.w	r0, #54	; 0x36
   13a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00013a5a <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   13a5a:	7a03      	ldrb	r3, [r0, #8]
   13a5c:	075b      	lsls	r3, r3, #29
   13a5e:	d504      	bpl.n	13a6a <keys_add_id+0x10>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   13a60:	f100 012a 	add.w	r1, r0, #42	; 0x2a
   13a64:	3001      	adds	r0, #1
   13a66:	f7ff bfd0 	b.w	13a0a <hci_id_add.isra.0>
}
   13a6a:	4770      	bx	lr

00013a6c <addr_res_enable>:
{
   13a6c:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   13a6e:	2101      	movs	r1, #1
{
   13a70:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   13a72:	f242 002d 	movw	r0, #8237	; 0x202d
   13a76:	f7f1 fb99 	bl	51ac <bt_hci_cmd_create>
	if (!buf) {
   13a7a:	4604      	mov	r4, r0
   13a7c:	b158      	cbz	r0, 13a96 <addr_res_enable+0x2a>
	net_buf_add_u8(buf, enable);
   13a7e:	4629      	mov	r1, r5
   13a80:	3008      	adds	r0, #8
   13a82:	f001 febf 	bl	15804 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   13a86:	4621      	mov	r1, r4
}
   13a88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   13a8c:	2200      	movs	r2, #0
   13a8e:	f242 002d 	movw	r0, #8237	; 0x202d
   13a92:	f7f1 bbd5 	b.w	5240 <bt_hci_cmd_send_sync>
}
   13a96:	f06f 0036 	mvn.w	r0, #54	; 0x36
   13a9a:	bd38      	pop	{r3, r4, r5, pc}

00013a9c <set_le_scan_enable>:
	return set_le_scan_enable_legacy(enable);
   13a9c:	f7f1 bccc 	b.w	5438 <set_le_scan_enable_legacy>

00013aa0 <bt_lookup_id_addr>:
{
   13aa0:	b510      	push	{r4, lr}
   13aa2:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   13aa4:	f7f9 fa74 	bl	cf90 <bt_keys_find_irk>
		if (keys) {
   13aa8:	b100      	cbz	r0, 13aac <bt_lookup_id_addr+0xc>
			return &keys->addr;
   13aaa:	1c44      	adds	r4, r0, #1
}
   13aac:	4620      	mov	r0, r4
   13aae:	bd10      	pop	{r4, pc}

00013ab0 <bt_le_scan_random_addr_check>:
}
   13ab0:	2001      	movs	r0, #1
   13ab2:	4770      	bx	lr

00013ab4 <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   13ab4:	f7f1 bd4a 	b.w	554c <bt_le_create_conn_legacy>

00013ab8 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   13ab8:	8802      	ldrh	r2, [r0, #0]
   13aba:	8843      	ldrh	r3, [r0, #2]
{
   13abc:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   13abe:	429a      	cmp	r2, r3
   13ac0:	d818      	bhi.n	13af4 <bt_le_conn_params_valid+0x3c>
   13ac2:	2a05      	cmp	r2, #5
   13ac4:	d916      	bls.n	13af4 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   13ac6:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   13aca:	d813      	bhi.n	13af4 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   13acc:	8884      	ldrh	r4, [r0, #4]
   13ace:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   13ad2:	d20f      	bcs.n	13af4 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   13ad4:	88c1      	ldrh	r1, [r0, #6]
   13ad6:	f640 4076 	movw	r0, #3190	; 0xc76
   13ada:	f1a1 020a 	sub.w	r2, r1, #10
   13ade:	b292      	uxth	r2, r2
   13ae0:	4282      	cmp	r2, r0
   13ae2:	d807      	bhi.n	13af4 <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   13ae4:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   13ae8:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   13aec:	bf34      	ite	cc
   13aee:	2001      	movcc	r0, #1
   13af0:	2000      	movcs	r0, #0
}
   13af2:	bd10      	pop	{r4, pc}
		return false;
   13af4:	2000      	movs	r0, #0
   13af6:	e7fc      	b.n	13af2 <bt_le_conn_params_valid+0x3a>

00013af8 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   13af8:	7a03      	ldrb	r3, [r0, #8]
   13afa:	07d9      	lsls	r1, r3, #31
   13afc:	d504      	bpl.n	13b08 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   13afe:	f023 0301 	bic.w	r3, r3, #1
   13b02:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   13b04:	f7f1 bdb2 	b.w	566c <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   13b08:	0799      	lsls	r1, r3, #30
   13b0a:	d504      	bpl.n	13b16 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   13b0c:	f023 0302 	bic.w	r3, r3, #2
   13b10:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   13b12:	f7f1 be65 	b.w	57e0 <bt_id_del>
}
   13b16:	4770      	bx	lr

00013b18 <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
   13b18:	2301      	movs	r3, #1
{
   13b1a:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   13b1c:	2106      	movs	r1, #6
{
   13b1e:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   13b20:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   13b24:	f7f3 f872 	bl	6c0c <bt_rand>
	if (err) {
   13b28:	b918      	cbnz	r0, 13b32 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
   13b2a:	79a3      	ldrb	r3, [r4, #6]
   13b2c:	f063 033f 	orn	r3, r3, #63	; 0x3f
   13b30:	71a3      	strb	r3, [r4, #6]
}
   13b32:	bd10      	pop	{r4, pc}

00013b34 <bt_hci_disconnect>:
{
   13b34:	b570      	push	{r4, r5, r6, lr}
   13b36:	4606      	mov	r6, r0
   13b38:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   13b3a:	f240 4006 	movw	r0, #1030	; 0x406
   13b3e:	2103      	movs	r1, #3
   13b40:	f7f1 fb34 	bl	51ac <bt_hci_cmd_create>
	if (!buf) {
   13b44:	4604      	mov	r4, r0
   13b46:	b160      	cbz	r0, 13b62 <bt_hci_disconnect+0x2e>
	disconn = net_buf_add(buf, sizeof(*disconn));
   13b48:	2103      	movs	r1, #3
   13b4a:	3008      	adds	r0, #8
   13b4c:	f7f9 fe40 	bl	d7d0 <net_buf_simple_add>
	disconn->reason = reason;
   13b50:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   13b52:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
   13b54:	4621      	mov	r1, r4
}
   13b56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
   13b5a:	f240 4006 	movw	r0, #1030	; 0x406
   13b5e:	f7f2 b8a7 	b.w	5cb0 <bt_hci_cmd_send>
}
   13b62:	f06f 0036 	mvn.w	r0, #54	; 0x36
   13b66:	bd70      	pop	{r4, r5, r6, pc}

00013b68 <bt_le_set_data_len>:
{
   13b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13b6a:	4607      	mov	r7, r0
   13b6c:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   13b6e:	f242 0022 	movw	r0, #8226	; 0x2022
   13b72:	2106      	movs	r1, #6
{
   13b74:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   13b76:	f7f1 fb19 	bl	51ac <bt_hci_cmd_create>
	if (!buf) {
   13b7a:	4604      	mov	r4, r0
   13b7c:	b170      	cbz	r0, 13b9c <bt_le_set_data_len+0x34>
	cp = net_buf_add(buf, sizeof(*cp));
   13b7e:	2106      	movs	r1, #6
   13b80:	3008      	adds	r0, #8
   13b82:	f7f9 fe25 	bl	d7d0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   13b86:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   13b88:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(conn->handle);
   13b8a:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   13b8c:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   13b8e:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   13b90:	f242 0022 	movw	r0, #8226	; 0x2022
}
   13b94:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   13b98:	f7f2 b88a 	b.w	5cb0 <bt_hci_cmd_send>
}
   13b9c:	f06f 0036 	mvn.w	r0, #54	; 0x36
   13ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00013ba2 <bt_le_set_phy>:
{
   13ba2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13ba4:	4607      	mov	r7, r0
   13ba6:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   13ba8:	f242 0032 	movw	r0, #8242	; 0x2032
   13bac:	2107      	movs	r1, #7
{
   13bae:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   13bb0:	f7f1 fafc 	bl	51ac <bt_hci_cmd_create>
	if (!buf) {
   13bb4:	4604      	mov	r4, r0
   13bb6:	b198      	cbz	r0, 13be0 <bt_le_set_phy+0x3e>
	cp = net_buf_add(buf, sizeof(*cp));
   13bb8:	2107      	movs	r1, #7
   13bba:	3008      	adds	r0, #8
   13bbc:	f7f9 fe08 	bl	d7d0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   13bc0:	883a      	ldrh	r2, [r7, #0]
	cp = net_buf_add(buf, sizeof(*cp));
   13bc2:	4603      	mov	r3, r0
	cp->handle = sys_cpu_to_le16(conn->handle);
   13bc4:	8002      	strh	r2, [r0, #0]
	cp->all_phys = 0U;
   13bc6:	2000      	movs	r0, #0
	cp->tx_phys = pref_tx_phy;
   13bc8:	70de      	strb	r6, [r3, #3]
	cp->all_phys = 0U;
   13bca:	7098      	strb	r0, [r3, #2]
	cp->rx_phys = pref_rx_phy;
   13bcc:	711d      	strb	r5, [r3, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
   13bce:	7158      	strb	r0, [r3, #5]
   13bd0:	7198      	strb	r0, [r3, #6]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   13bd2:	4621      	mov	r1, r4
}
   13bd4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   13bd8:	f242 0032 	movw	r0, #8242	; 0x2032
   13bdc:	f7f2 b868 	b.w	5cb0 <bt_hci_cmd_send>
}
   13be0:	f06f 0036 	mvn.w	r0, #54	; 0x36
   13be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00013be6 <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   13be6:	6880      	ldr	r0, [r0, #8]
   13be8:	f7f2 b9e0 	b.w	5fac <enh_conn_complete>

00013bec <le_legacy_conn_complete>:
{
   13bec:	b510      	push	{r4, lr}
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   13bee:	2400      	movs	r4, #0
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   13bf0:	6881      	ldr	r1, [r0, #8]
{
   13bf2:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   13bf4:	780b      	ldrb	r3, [r1, #0]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   13bf6:	a803      	add	r0, sp, #12
	enh.status         = evt->status;
   13bf8:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   13bfc:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   13c00:	3104      	adds	r1, #4
	enh.handle         = evt->handle;
   13c02:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   13c06:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   13c0a:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   13c0e:	f8b1 3007 	ldrh.w	r3, [r1, #7]
   13c12:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   13c16:	f8b1 3009 	ldrh.w	r3, [r1, #9]
   13c1a:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   13c1e:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   13c22:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   13c26:	7b4b      	ldrb	r3, [r1, #13]
   13c28:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   13c2c:	f7ff fe71 	bl	13912 <bt_addr_le_copy>
	memcpy(dst, src, sizeof(*dst));
   13c30:	4669      	mov	r1, sp
   13c32:	2206      	movs	r2, #6
   13c34:	f10d 0013 	add.w	r0, sp, #19
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   13c38:	9400      	str	r4, [sp, #0]
   13c3a:	f8ad 4004 	strh.w	r4, [sp, #4]
   13c3e:	f7ff fd78 	bl	13732 <memcpy>
   13c42:	2206      	movs	r2, #6
   13c44:	4669      	mov	r1, sp
   13c46:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   13c4a:	9400      	str	r4, [sp, #0]
   13c4c:	f8ad 4004 	strh.w	r4, [sp, #4]
   13c50:	f7ff fd6f 	bl	13732 <memcpy>
	enh_conn_complete(&enh);
   13c54:	a802      	add	r0, sp, #8
   13c56:	f7f2 f9a9 	bl	5fac <enh_conn_complete>
}
   13c5a:	b00a      	add	sp, #40	; 0x28
   13c5c:	bd10      	pop	{r4, pc}

00013c5e <bt_addr_le_is_bonded>:
{
   13c5e:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   13c60:	f7f9 f9d0 	bl	d004 <bt_keys_find_addr>
		return keys && keys->keys;
   13c64:	b118      	cbz	r0, 13c6e <bt_addr_le_is_bonded+0x10>
   13c66:	89c0      	ldrh	r0, [r0, #14]
   13c68:	3800      	subs	r0, #0
   13c6a:	bf18      	it	ne
   13c6c:	2001      	movne	r0, #1
}
   13c6e:	bd08      	pop	{r3, pc}

00013c70 <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
   13c70:	b530      	push	{r4, r5, lr}
   13c72:	b0b1      	sub	sp, #196	; 0xc4
   13c74:	460d      	mov	r5, r1
	u8_t tmp[16];

	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	sys_memcpy_swap(tmp, key, 16);
   13c76:	4601      	mov	r1, r0
   13c78:	4668      	mov	r0, sp
{
   13c7a:	4614      	mov	r4, r2
	sys_memcpy_swap(tmp, key, 16);
   13c7c:	f7f2 ff6a 	bl	6b54 <sys_memcpy_swap.constprop.0>

	if (tc_aes128_set_encrypt_key(&s, tmp) == TC_CRYPTO_FAIL) {
   13c80:	4669      	mov	r1, sp
   13c82:	a804      	add	r0, sp, #16
   13c84:	f7ef fdda 	bl	383c <tc_aes128_set_encrypt_key>
   13c88:	b1c0      	cbz	r0, 13cbc <bt_encrypt_le+0x4c>
		return -EINVAL;
	}

	sys_memcpy_swap(tmp, plaintext, 16);
   13c8a:	4629      	mov	r1, r5
   13c8c:	4668      	mov	r0, sp
   13c8e:	f7f2 ff61 	bl	6b54 <sys_memcpy_swap.constprop.0>

	if (tc_aes_encrypt(enc_data, tmp, &s) == TC_CRYPTO_FAIL) {
   13c92:	4669      	mov	r1, sp
   13c94:	4620      	mov	r0, r4
   13c96:	aa04      	add	r2, sp, #16
   13c98:	f7ef fe24 	bl	38e4 <tc_aes_encrypt>
   13c9c:	b170      	cbz	r0, 13cbc <bt_encrypt_le+0x4c>
   13c9e:	1e63      	subs	r3, r4, #1
   13ca0:	f104 0210 	add.w	r2, r4, #16
   13ca4:	3407      	adds	r4, #7
		u8_t tmp = ((u8_t *)buf)[i];
   13ca6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
   13caa:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   13cae:	42a3      	cmp	r3, r4
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
   13cb0:	7018      	strb	r0, [r3, #0]
		((u8_t *)buf)[length - 1 - i] = tmp;
   13cb2:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   13cb4:	d1f7      	bne.n	13ca6 <bt_encrypt_le+0x36>

	sys_mem_swap(enc_data, 16);

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
   13cb6:	2000      	movs	r0, #0
}
   13cb8:	b031      	add	sp, #196	; 0xc4
   13cba:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   13cbc:	f06f 0015 	mvn.w	r0, #21
   13cc0:	e7fa      	b.n	13cb8 <bt_encrypt_le+0x48>

00013cc2 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13cc2:	e8d0 0faf 	lda	r0, [r0]
}
   13cc6:	4770      	bx	lr

00013cc8 <bt_conn_reset_rx_state>:
	if (!conn->rx_len) {
   13cc8:	89c3      	ldrh	r3, [r0, #14]
{
   13cca:	b510      	push	{r4, lr}
   13ccc:	4604      	mov	r4, r0
	if (!conn->rx_len) {
   13cce:	b12b      	cbz	r3, 13cdc <bt_conn_reset_rx_state+0x14>
	net_buf_unref(conn->rx);
   13cd0:	6900      	ldr	r0, [r0, #16]
   13cd2:	f7f9 fc0b 	bl	d4ec <net_buf_unref>
	conn->rx = NULL;
   13cd6:	2300      	movs	r3, #0
   13cd8:	6123      	str	r3, [r4, #16]
	conn->rx_len = 0U;
   13cda:	81e3      	strh	r3, [r4, #14]
}
   13cdc:	bd10      	pop	{r4, pc}

00013cde <atomic_dec>:
{
   13cde:	4603      	mov	r3, r0
}
   13ce0:	e8d3 0fef 	ldaex	r0, [r3]
   13ce4:	1e42      	subs	r2, r0, #1
   13ce6:	e8c3 2fe1 	stlex	r1, r2, [r3]
   13cea:	2900      	cmp	r1, #0
   13cec:	d1f8      	bne.n	13ce0 <atomic_dec+0x2>
   13cee:	4770      	bx	lr

00013cf0 <atomic_inc>:
{
   13cf0:	4603      	mov	r3, r0
}
   13cf2:	e8d3 0fef 	ldaex	r0, [r3]
   13cf6:	1c42      	adds	r2, r0, #1
   13cf8:	e8c3 2fe1 	stlex	r1, r2, [r3]
   13cfc:	2900      	cmp	r1, #0
   13cfe:	d1f8      	bne.n	13cf2 <atomic_inc+0x2>
   13d00:	4770      	bx	lr

00013d02 <tx_notify>:
{
   13d02:	b570      	push	{r4, r5, r6, lr}
   13d04:	4604      	mov	r4, r0
	__asm__ volatile(
   13d06:	f04f 0220 	mov.w	r2, #32
   13d0a:	f3ef 8311 	mrs	r3, BASEPRI
   13d0e:	f382 8811 	msr	BASEPRI, r2
   13d12:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   13d16:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   13d18:	b920      	cbnz	r0, 13d24 <tx_notify+0x22>
	__asm__ volatile(
   13d1a:	f383 8811 	msr	BASEPRI, r3
   13d1e:	f3bf 8f6f 	isb	sy
}
   13d22:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13d24:	6a61      	ldr	r1, [r4, #36]	; 0x24
   13d26:	6802      	ldr	r2, [r0, #0]
   13d28:	4288      	cmp	r0, r1
	list->tail = node;
   13d2a:	bf08      	it	eq
   13d2c:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
   13d2e:	6222      	str	r2, [r4, #32]
   13d30:	f383 8811 	msr	BASEPRI, r3
   13d34:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   13d38:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   13d3c:	f7f2 ff7e 	bl	6c3c <tx_free>
		cb(conn, user_data);
   13d40:	4631      	mov	r1, r6
   13d42:	4620      	mov	r0, r4
   13d44:	47a8      	blx	r5
	while (1) {
   13d46:	e7de      	b.n	13d06 <tx_notify+0x4>

00013d48 <tx_complete_work>:
	tx_notify(conn);
   13d48:	3828      	subs	r0, #40	; 0x28
   13d4a:	f7ff bfda 	b.w	13d02 <tx_notify>

00013d4e <bt_conn_le_start_encryption>:
{
   13d4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13d52:	4682      	mov	sl, r0
   13d54:	4689      	mov	r9, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   13d56:	f242 0019 	movw	r0, #8217	; 0x2019
   13d5a:	211c      	movs	r1, #28
{
   13d5c:	4690      	mov	r8, r2
   13d5e:	461f      	mov	r7, r3
   13d60:	9e08      	ldr	r6, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   13d62:	f7f1 fa23 	bl	51ac <bt_hci_cmd_create>
	if (!buf) {
   13d66:	4605      	mov	r5, r0
   13d68:	b340      	cbz	r0, 13dbc <bt_conn_le_start_encryption+0x6e>
	cp = net_buf_add(buf, sizeof(*cp));
   13d6a:	211c      	movs	r1, #28
   13d6c:	3008      	adds	r0, #8
   13d6e:	f7f9 fd2f 	bl	d7d0 <net_buf_simple_add>
   13d72:	4604      	mov	r4, r0
	cp->handle = sys_cpu_to_le16(conn->handle);
   13d74:	f8ba 3000 	ldrh.w	r3, [sl]
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   13d78:	2208      	movs	r2, #8
	cp->handle = sys_cpu_to_le16(conn->handle);
   13d7a:	f820 3b02 	strh.w	r3, [r0], #2
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   13d7e:	4649      	mov	r1, r9
   13d80:	f7ff fcd7 	bl	13732 <memcpy>
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   13d84:	2202      	movs	r2, #2
   13d86:	4641      	mov	r1, r8
   13d88:	f104 000a 	add.w	r0, r4, #10
	memcpy(cp->ltk, ltk, len);
   13d8c:	340c      	adds	r4, #12
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   13d8e:	f7ff fcd0 	bl	13732 <memcpy>
	memcpy(cp->ltk, ltk, len);
   13d92:	4632      	mov	r2, r6
   13d94:	4639      	mov	r1, r7
   13d96:	4620      	mov	r0, r4
   13d98:	f7ff fccb 	bl	13732 <memcpy>
	if (len < sizeof(cp->ltk)) {
   13d9c:	2e0f      	cmp	r6, #15
   13d9e:	d805      	bhi.n	13dac <bt_conn_le_start_encryption+0x5e>
		(void)memset(cp->ltk + len, 0, sizeof(cp->ltk) - len);
   13da0:	2100      	movs	r1, #0
   13da2:	f1c6 0210 	rsb	r2, r6, #16
   13da6:	19a0      	adds	r0, r4, r6
   13da8:	f7ff fcee 	bl	13788 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   13dac:	4629      	mov	r1, r5
}
   13dae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   13db2:	2200      	movs	r2, #0
   13db4:	f242 0019 	movw	r0, #8217	; 0x2019
   13db8:	f7f1 ba42 	b.w	5240 <bt_hci_cmd_send_sync>
}
   13dbc:	f06f 0036 	mvn.w	r0, #54	; 0x36
   13dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00013dc4 <bt_conn_set_security>:
{
   13dc4:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   13dc6:	7b43      	ldrb	r3, [r0, #13]
{
   13dc8:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   13dca:	2b06      	cmp	r3, #6
   13dcc:	d124      	bne.n	13e18 <bt_conn_set_security+0x54>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   13dce:	7a43      	ldrb	r3, [r0, #9]
   13dd0:	428b      	cmp	r3, r1
   13dd2:	d224      	bcs.n	13e1e <bt_conn_set_security+0x5a>
   13dd4:	7a83      	ldrb	r3, [r0, #10]
   13dd6:	428b      	cmp	r3, r1
   13dd8:	d221      	bcs.n	13e1e <bt_conn_set_security+0x5a>
	if (val) {
   13dda:	060a      	lsls	r2, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   13ddc:	f100 0304 	add.w	r3, r0, #4
   13de0:	d511      	bpl.n	13e06 <bt_conn_set_security+0x42>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13de2:	e8d3 2fef 	ldaex	r2, [r3]
   13de6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   13dea:	e8c3 2fe0 	stlex	r0, r2, [r3]
   13dee:	2800      	cmp	r0, #0
   13df0:	d1f7      	bne.n	13de2 <bt_conn_set_security+0x1e>
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   13df2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		return bt_smp_start_security(conn);
   13df6:	4620      	mov	r0, r4
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   13df8:	72a1      	strb	r1, [r4, #10]
		return bt_smp_start_security(conn);
   13dfa:	f001 fc48 	bl	1568e <bt_smp_start_security>
	if (err) {
   13dfe:	b108      	cbz	r0, 13e04 <bt_conn_set_security+0x40>
		conn->required_sec_level = conn->sec_level;
   13e00:	7a63      	ldrb	r3, [r4, #9]
   13e02:	72a3      	strb	r3, [r4, #10]
}
   13e04:	bd10      	pop	{r4, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13e06:	e8d3 2fef 	ldaex	r2, [r3]
   13e0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   13e0e:	e8c3 2fe0 	stlex	r0, r2, [r3]
   13e12:	2800      	cmp	r0, #0
   13e14:	d0ed      	beq.n	13df2 <bt_conn_set_security+0x2e>
   13e16:	e7f6      	b.n	13e06 <bt_conn_set_security+0x42>
		return -ENOTCONN;
   13e18:	f06f 0038 	mvn.w	r0, #56	; 0x38
   13e1c:	e7f2      	b.n	13e04 <bt_conn_set_security+0x40>
		return 0;
   13e1e:	2000      	movs	r0, #0
   13e20:	e7f0      	b.n	13e04 <bt_conn_set_security+0x40>

00013e22 <bt_conn_get_security>:
}
   13e22:	7a40      	ldrb	r0, [r0, #9]
   13e24:	4770      	bx	lr

00013e26 <bt_conn_is_peer_addr_le>:
{
   13e26:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   13e28:	7a03      	ldrb	r3, [r0, #8]
{
   13e2a:	4604      	mov	r4, r0
	if (id != conn->id) {
   13e2c:	428b      	cmp	r3, r1
{
   13e2e:	4615      	mov	r5, r2
	if (id != conn->id) {
   13e30:	d115      	bne.n	13e5e <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   13e32:	f100 017c 	add.w	r1, r0, #124	; 0x7c
   13e36:	2207      	movs	r2, #7
   13e38:	4628      	mov	r0, r5
   13e3a:	f7ff fc6a 	bl	13712 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   13e3e:	b180      	cbz	r0, 13e62 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   13e40:	78e3      	ldrb	r3, [r4, #3]
   13e42:	2207      	movs	r2, #7
   13e44:	b943      	cbnz	r3, 13e58 <bt_conn_is_peer_addr_le+0x32>
   13e46:	f104 018a 	add.w	r1, r4, #138	; 0x8a
   13e4a:	4628      	mov	r0, r5
   13e4c:	f7ff fc61 	bl	13712 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   13e50:	fab0 f080 	clz	r0, r0
   13e54:	0940      	lsrs	r0, r0, #5
}
   13e56:	bd38      	pop	{r3, r4, r5, pc}
   13e58:	f104 0183 	add.w	r1, r4, #131	; 0x83
   13e5c:	e7f5      	b.n	13e4a <bt_conn_is_peer_addr_le+0x24>
		return false;
   13e5e:	2000      	movs	r0, #0
   13e60:	e7f9      	b.n	13e56 <bt_conn_is_peer_addr_le+0x30>
		return true;
   13e62:	2001      	movs	r0, #1
   13e64:	e7f7      	b.n	13e56 <bt_conn_is_peer_addr_le+0x30>

00013e66 <bt_conn_ref>:
{
   13e66:	b510      	push	{r4, lr}
   13e68:	4604      	mov	r4, r0
	atomic_val_t old = atomic_inc(&conn->ref);
   13e6a:	3058      	adds	r0, #88	; 0x58
   13e6c:	f7ff ff40 	bl	13cf0 <atomic_inc>
}
   13e70:	4620      	mov	r0, r4
   13e72:	bd10      	pop	{r4, pc}

00013e74 <bt_conn_unref>:
	atomic_val_t old = atomic_dec(&conn->ref);
   13e74:	3058      	adds	r0, #88	; 0x58
   13e76:	f7ff bf32 	b.w	13cde <atomic_dec>

00013e7a <bt_conn_get_dst>:
}
   13e7a:	307c      	adds	r0, #124	; 0x7c
   13e7c:	4770      	bx	lr

00013e7e <bt_conn_le_conn_update>:
{
   13e7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13e80:	4607      	mov	r7, r0
   13e82:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   13e84:	f242 0013 	movw	r0, #8211	; 0x2013
   13e88:	210e      	movs	r1, #14
   13e8a:	f7f1 f98f 	bl	51ac <bt_hci_cmd_create>
	if (!buf) {
   13e8e:	4606      	mov	r6, r0
   13e90:	b1d0      	cbz	r0, 13ec8 <bt_conn_le_conn_update+0x4a>
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   13e92:	210e      	movs	r1, #14
   13e94:	3008      	adds	r0, #8
   13e96:	f7f9 fc9b 	bl	d7d0 <net_buf_simple_add>
   13e9a:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   13e9c:	220e      	movs	r2, #14
   13e9e:	2100      	movs	r1, #0
   13ea0:	f7ff fc72 	bl	13788 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   13ea4:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   13ea6:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   13ea8:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   13eaa:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   13eac:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   13eae:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   13eb0:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   13eb2:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   13eb6:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   13eb8:	88ab      	ldrh	r3, [r5, #4]
   13eba:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   13ebc:	88eb      	ldrh	r3, [r5, #6]
   13ebe:	8123      	strh	r3, [r4, #8]
}
   13ec0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   13ec4:	f7f1 b9bc 	b.w	5240 <bt_hci_cmd_send_sync>
}
   13ec8:	f06f 0036 	mvn.w	r0, #54	; 0x36
   13ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00013ece <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   13ece:	6813      	ldr	r3, [r2, #0]
   13ed0:	b939      	cbnz	r1, 13ee2 <sys_slist_remove+0x14>
   13ed2:	6841      	ldr	r1, [r0, #4]
	list->head = node;
   13ed4:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   13ed6:	428a      	cmp	r2, r1
   13ed8:	d100      	bne.n	13edc <sys_slist_remove+0xe>
	list->tail = node;
   13eda:	6043      	str	r3, [r0, #4]
	parent->next = child;
   13edc:	2300      	movs	r3, #0
   13ede:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   13ee0:	4770      	bx	lr
	parent->next = child;
   13ee2:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   13ee4:	6843      	ldr	r3, [r0, #4]
   13ee6:	429a      	cmp	r2, r3
	list->tail = node;
   13ee8:	bf08      	it	eq
   13eea:	6041      	streq	r1, [r0, #4]
}
   13eec:	e7f6      	b.n	13edc <sys_slist_remove+0xe>

00013eee <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   13eee:	4603      	mov	r3, r0
	size_t bytes = 0;
   13ef0:	2000      	movs	r0, #0

	while (buf) {
   13ef2:	b903      	cbnz	r3, 13ef6 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   13ef4:	4770      	bx	lr
		bytes += buf->len;
   13ef6:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   13ef8:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   13efa:	4410      	add	r0, r2
		buf = buf->frags;
   13efc:	e7f9      	b.n	13ef2 <net_buf_frags_len+0x4>

00013efe <__l2cap_lookup_ident>:
{
   13efe:	b538      	push	{r3, r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   13f00:	6d04      	ldr	r4, [r0, #80]	; 0x50
{
   13f02:	460b      	mov	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   13f04:	b164      	cbz	r4, 13f20 <__l2cap_lookup_ident+0x22>
   13f06:	2100      	movs	r1, #0
   13f08:	3c08      	subs	r4, #8
   13f0a:	b14c      	cbz	r4, 13f20 <__l2cap_lookup_ident+0x22>
		if (chan->ident == ident) {
   13f0c:	f894 5038 	ldrb.w	r5, [r4, #56]	; 0x38
   13f10:	429d      	cmp	r5, r3
   13f12:	d107      	bne.n	13f24 <__l2cap_lookup_ident+0x26>
			if (remove) {
   13f14:	b122      	cbz	r2, 13f20 <__l2cap_lookup_ident+0x22>
				sys_slist_remove(&conn->channels, prev,
   13f16:	f104 0208 	add.w	r2, r4, #8
   13f1a:	3050      	adds	r0, #80	; 0x50
   13f1c:	f7ff ffd7 	bl	13ece <sys_slist_remove>
}
   13f20:	4620      	mov	r0, r4
   13f22:	bd38      	pop	{r3, r4, r5, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   13f24:	f114 0108 	adds.w	r1, r4, #8
   13f28:	d004      	beq.n	13f34 <__l2cap_lookup_ident+0x36>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   13f2a:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   13f2c:	2c00      	cmp	r4, #0
   13f2e:	d0f7      	beq.n	13f20 <__l2cap_lookup_ident+0x22>
   13f30:	3c08      	subs	r4, #8
   13f32:	e7ea      	b.n	13f0a <__l2cap_lookup_ident+0xc>
	return NULL;
   13f34:	460c      	mov	r4, r1
   13f36:	e7f3      	b.n	13f20 <__l2cap_lookup_ident+0x22>

00013f38 <l2cap_remove_rx_cid>:
	if (!L2CAP_LE_CID_IS_DYN(cid)) {
   13f38:	f1a1 0240 	sub.w	r2, r1, #64	; 0x40
   13f3c:	2a3f      	cmp	r2, #63	; 0x3f
{
   13f3e:	b538      	push	{r3, r4, r5, lr}
   13f40:	460b      	mov	r3, r1
	if (!L2CAP_LE_CID_IS_DYN(cid)) {
   13f42:	d815      	bhi.n	13f70 <l2cap_remove_rx_cid+0x38>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   13f44:	6d04      	ldr	r4, [r0, #80]	; 0x50
   13f46:	b154      	cbz	r4, 13f5e <l2cap_remove_rx_cid+0x26>
   13f48:	2100      	movs	r1, #0
   13f4a:	3c08      	subs	r4, #8
   13f4c:	b13c      	cbz	r4, 13f5e <l2cap_remove_rx_cid+0x26>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   13f4e:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
   13f50:	f104 0208 	add.w	r2, r4, #8
   13f54:	429d      	cmp	r5, r3
   13f56:	d104      	bne.n	13f62 <l2cap_remove_rx_cid+0x2a>
			sys_slist_remove(&conn->channels, prev, &chan->node);
   13f58:	3050      	adds	r0, #80	; 0x50
   13f5a:	f7ff ffb8 	bl	13ece <sys_slist_remove>
}
   13f5e:	4620      	mov	r0, r4
   13f60:	bd38      	pop	{r3, r4, r5, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   13f62:	b13a      	cbz	r2, 13f74 <l2cap_remove_rx_cid+0x3c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   13f64:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   13f66:	2c00      	cmp	r4, #0
   13f68:	d0f9      	beq.n	13f5e <l2cap_remove_rx_cid+0x26>
   13f6a:	4611      	mov	r1, r2
   13f6c:	3c08      	subs	r4, #8
   13f6e:	e7ed      	b.n	13f4c <l2cap_remove_rx_cid+0x14>
		return NULL;
   13f70:	2400      	movs	r4, #0
   13f72:	e7f4      	b.n	13f5e <l2cap_remove_rx_cid+0x26>
   13f74:	4614      	mov	r4, r2
   13f76:	e7f2      	b.n	13f5e <l2cap_remove_rx_cid+0x26>

00013f78 <l2cap_alloc_frag>:
{
   13f78:	b508      	push	{r3, lr}
	frag = chan->chan.ops->alloc_buf(&chan->chan);
   13f7a:	6853      	ldr	r3, [r2, #4]
{
   13f7c:	4610      	mov	r0, r2
	frag = chan->chan.ops->alloc_buf(&chan->chan);
   13f7e:	68db      	ldr	r3, [r3, #12]
   13f80:	4798      	blx	r3
}
   13f82:	2800      	cmp	r0, #0
   13f84:	bf38      	it	cc
   13f86:	2000      	movcc	r0, #0
   13f88:	bd08      	pop	{r3, pc}

00013f8a <l2cap_connected>:
}
   13f8a:	4770      	bx	lr

00013f8c <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13f8c:	e8d0 0faf 	lda	r0, [r0]
}
   13f90:	4770      	bx	lr

00013f92 <atomic_add>:
{
   13f92:	4603      	mov	r3, r0
}
   13f94:	e8d3 0fef 	ldaex	r0, [r3]
   13f98:	1842      	adds	r2, r0, r1
   13f9a:	e8c3 2fec 	stlex	ip, r2, [r3]
   13f9e:	f1bc 0f00 	cmp.w	ip, #0
   13fa2:	d1f7      	bne.n	13f94 <atomic_add+0x2>
   13fa4:	4770      	bx	lr

00013fa6 <l2cap_chan_destroy>:
{
   13fa6:	b570      	push	{r4, r5, r6, lr}
   13fa8:	4604      	mov	r4, r0
	k_delayed_work_cancel(&chan->rtx_work);
   13faa:	3010      	adds	r0, #16
   13fac:	f7fd f916 	bl	111dc <k_delayed_work_cancel>
	if (ch->tx_buf) {
   13fb0:	6f20      	ldr	r0, [r4, #112]	; 0x70
   13fb2:	b118      	cbz	r0, 13fbc <l2cap_chan_destroy+0x16>
		net_buf_unref(ch->tx_buf);
   13fb4:	f7f9 fa9a 	bl	d4ec <net_buf_unref>
		ch->tx_buf = NULL;
   13fb8:	2300      	movs	r3, #0
   13fba:	6723      	str	r3, [r4, #112]	; 0x70
	while ((buf = net_buf_get(&ch->tx_queue, K_NO_WAIT))) {
   13fbc:	f104 0554 	add.w	r5, r4, #84	; 0x54
   13fc0:	2200      	movs	r2, #0
   13fc2:	2300      	movs	r3, #0
   13fc4:	4628      	mov	r0, r5
   13fc6:	f7f9 f9ff 	bl	d3c8 <net_buf_get>
   13fca:	b990      	cbnz	r0, 13ff2 <l2cap_chan_destroy+0x4c>
	while ((buf = net_buf_get(&ch->rx_queue, K_NO_WAIT))) {
   13fcc:	f104 0694 	add.w	r6, r4, #148	; 0x94
   13fd0:	2200      	movs	r2, #0
   13fd2:	2300      	movs	r3, #0
   13fd4:	4630      	mov	r0, r6
   13fd6:	f7f9 f9f7 	bl	d3c8 <net_buf_get>
   13fda:	4605      	mov	r5, r0
   13fdc:	b960      	cbnz	r0, 13ff8 <l2cap_chan_destroy+0x52>
	if (ch->_sdu) {
   13fde:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
   13fe2:	b128      	cbz	r0, 13ff0 <l2cap_chan_destroy+0x4a>
		net_buf_unref(ch->_sdu);
   13fe4:	f7f9 fa82 	bl	d4ec <net_buf_unref>
		ch->_sdu = NULL;
   13fe8:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
		ch->_sdu_len = 0U;
   13fec:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
}
   13ff0:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   13ff2:	f7f9 fa7b 	bl	d4ec <net_buf_unref>
   13ff6:	e7e3      	b.n	13fc0 <l2cap_chan_destroy+0x1a>
		net_buf_unref(buf);
   13ff8:	f7f9 fa78 	bl	d4ec <net_buf_unref>
   13ffc:	e7e8      	b.n	13fd0 <l2cap_chan_destroy+0x2a>

00013ffe <l2cap_chan_rx_init>:
	if (!chan->rx.mtu) {
   13ffe:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
   14000:	b90b      	cbnz	r3, 14006 <l2cap_chan_rx_init+0x8>
		chan->rx.mtu = L2CAP_MAX_LE_MTU;
   14002:	23f5      	movs	r3, #245	; 0xf5
   14004:	87c3      	strh	r3, [r0, #62]	; 0x3e
	if (!chan->rx.init_credits) {
   14006:	f8b0 2042 	ldrh.w	r2, [r0, #66]	; 0x42
   1400a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
   1400c:	b94a      	cbnz	r2, 14022 <l2cap_chan_rx_init+0x24>
		if (chan->chan.ops->alloc_buf) {
   1400e:	6842      	ldr	r2, [r0, #4]
   14010:	68d2      	ldr	r2, [r2, #12]
   14012:	b1aa      	cbz	r2, 14040 <l2cap_chan_rx_init+0x42>
						 (L2CAP_MAX_LE_MPS - 1)) /
   14014:	21f7      	movs	r1, #247	; 0xf7
			chan->rx.init_credits = (chan->rx.mtu +
   14016:	f103 02f6 	add.w	r2, r3, #246	; 0xf6
						 (L2CAP_MAX_LE_MPS - 1)) /
   1401a:	fbb2 f2f1 	udiv	r2, r2, r1
			chan->rx.init_credits = L2CAP_LE_MAX_CREDITS;
   1401e:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
	chan->rx.mps = MIN(chan->rx.mtu + 2, L2CAP_MAX_LE_MPS);
   14022:	3302      	adds	r3, #2
   14024:	2bf7      	cmp	r3, #247	; 0xf7
   14026:	bfa8      	it	ge
   14028:	23f7      	movge	r3, #247	; 0xf7
   1402a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1402e:	2300      	movs	r3, #0
   14030:	3044      	adds	r0, #68	; 0x44
   14032:	e8d0 2fef 	ldaex	r2, [r0]
   14036:	e8c0 3fe1 	stlex	r1, r3, [r0]
   1403a:	2900      	cmp	r1, #0
   1403c:	d1f9      	bne.n	14032 <l2cap_chan_rx_init+0x34>
}
   1403e:	4770      	bx	lr
			chan->rx.init_credits = L2CAP_LE_MAX_CREDITS;
   14040:	2205      	movs	r2, #5
   14042:	e7ec      	b.n	1401e <l2cap_chan_rx_init+0x20>

00014044 <l2cap_disconnected>:
   14044:	4770      	bx	lr

00014046 <l2cap_chan_tx_give_credits>:
{
   14046:	b510      	push	{r4, lr}
   14048:	4604      	mov	r4, r0
	atomic_add(&chan->tx.credits, credits);
   1404a:	3050      	adds	r0, #80	; 0x50
   1404c:	f7ff ffa1 	bl	13f92 <atomic_add>
	if (!atomic_test_and_set_bit(chan->chan.status, BT_L2CAP_STATUS_OUT) &&
   14050:	f104 0130 	add.w	r1, r4, #48	; 0x30
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14054:	e8d1 3fef 	ldaex	r3, [r1]
   14058:	f043 0201 	orr.w	r2, r3, #1
   1405c:	e8c1 2fe0 	stlex	r0, r2, [r1]
   14060:	2800      	cmp	r0, #0
   14062:	d1f7      	bne.n	14054 <l2cap_chan_tx_give_credits+0xe>
   14064:	07db      	lsls	r3, r3, #31
   14066:	d406      	bmi.n	14076 <l2cap_chan_tx_give_credits+0x30>
	    chan->chan.ops->status) {
   14068:	6863      	ldr	r3, [r4, #4]
   1406a:	699b      	ldr	r3, [r3, #24]
	if (!atomic_test_and_set_bit(chan->chan.status, BT_L2CAP_STATUS_OUT) &&
   1406c:	b11b      	cbz	r3, 14076 <l2cap_chan_tx_give_credits+0x30>
		chan->chan.ops->status(&chan->chan, chan->chan.status);
   1406e:	4620      	mov	r0, r4
}
   14070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->chan.ops->status(&chan->chan, chan->chan.status);
   14074:	4718      	bx	r3
}
   14076:	bd10      	pop	{r4, pc}

00014078 <l2cap_chan_tx_resume>:
{
   14078:	b508      	push	{r3, lr}
   1407a:	4603      	mov	r3, r0
	if (!atomic_get(&ch->tx.credits) ||
   1407c:	3050      	adds	r0, #80	; 0x50
   1407e:	f7ff ff85 	bl	13f8c <atomic_get>
   14082:	b148      	cbz	r0, 14098 <l2cap_chan_tx_resume+0x20>
   14084:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   14086:	b90a      	cbnz	r2, 1408c <l2cap_chan_tx_resume+0x14>
	    (k_fifo_is_empty(&ch->tx_queue) && !ch->tx_buf)) {
   14088:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1408a:	b12a      	cbz	r2, 14098 <l2cap_chan_tx_resume+0x20>
	k_work_submit_to_queue(&k_sys_work_q, work);
   1408c:	f103 0074 	add.w	r0, r3, #116	; 0x74
}
   14090:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   14094:	f7f3 bda0 	b.w	7bd8 <k_work_submit_to_queue.constprop.0>
   14098:	bd08      	pop	{r3, pc}

0001409a <l2cap_chan_seg_sent>:
	l2cap_chan_tx_resume(BT_L2CAP_LE_CHAN(chan));
   1409a:	4608      	mov	r0, r1
   1409c:	f7ff bfec 	b.w	14078 <l2cap_chan_tx_resume>

000140a0 <l2cap_chan_sdu_sent>:
	if (chan->ops->sent) {
   140a0:	684b      	ldr	r3, [r1, #4]
{
   140a2:	b510      	push	{r4, lr}
	if (chan->ops->sent) {
   140a4:	695b      	ldr	r3, [r3, #20]
{
   140a6:	460c      	mov	r4, r1
	if (chan->ops->sent) {
   140a8:	b10b      	cbz	r3, 140ae <l2cap_chan_sdu_sent+0xe>
		chan->ops->sent(chan);
   140aa:	4608      	mov	r0, r1
   140ac:	4798      	blx	r3
	l2cap_chan_tx_resume(BT_L2CAP_LE_CHAN(chan));
   140ae:	4620      	mov	r0, r4
}
   140b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	l2cap_chan_tx_resume(BT_L2CAP_LE_CHAN(chan));
   140b4:	f7ff bfe0 	b.w	14078 <l2cap_chan_tx_resume>

000140b8 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   140b8:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   140ba:	b410      	push	{r4}
   140bc:	460c      	mov	r4, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   140be:	b113      	cbz	r3, 140c6 <bt_l2cap_chan_remove+0xe>
   140c0:	2100      	movs	r1, #0
   140c2:	3b08      	subs	r3, #8
   140c4:	b90b      	cbnz	r3, 140ca <bt_l2cap_chan_remove+0x12>
}
   140c6:	bc10      	pop	{r4}
   140c8:	4770      	bx	lr
		if (chan == ch) {
   140ca:	42a3      	cmp	r3, r4
   140cc:	f103 0208 	add.w	r2, r3, #8
   140d0:	d103      	bne.n	140da <bt_l2cap_chan_remove+0x22>
}
   140d2:	bc10      	pop	{r4}
			sys_slist_remove(&conn->channels, prev, &chan->node);
   140d4:	3050      	adds	r0, #80	; 0x50
   140d6:	f7ff befa 	b.w	13ece <sys_slist_remove>
Z_GENLIST_PEEK_NEXT(slist, snode)
   140da:	2a00      	cmp	r2, #0
   140dc:	d0f3      	beq.n	140c6 <bt_l2cap_chan_remove+0xe>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   140de:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   140e0:	2b00      	cmp	r3, #0
   140e2:	d0f0      	beq.n	140c6 <bt_l2cap_chan_remove+0xe>
   140e4:	4611      	mov	r1, r2
   140e6:	3b08      	subs	r3, #8
   140e8:	e7ec      	b.n	140c4 <bt_l2cap_chan_remove+0xc>

000140ea <bt_l2cap_chan_del>:
	if (!chan->conn) {
   140ea:	6803      	ldr	r3, [r0, #0]
{
   140ec:	b510      	push	{r4, lr}
   140ee:	4604      	mov	r4, r0
	if (!chan->conn) {
   140f0:	b12b      	cbz	r3, 140fe <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
   140f2:	6843      	ldr	r3, [r0, #4]
   140f4:	685b      	ldr	r3, [r3, #4]
   140f6:	b103      	cbz	r3, 140fa <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
   140f8:	4798      	blx	r3
	chan->conn = NULL;
   140fa:	2300      	movs	r3, #0
   140fc:	6023      	str	r3, [r4, #0]
	chan->state = state;
   140fe:	2300      	movs	r3, #0
   14100:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	chan->psm = 0U;
   14104:	86e3      	strh	r3, [r4, #54]	; 0x36
	if (chan->destroy) {
   14106:	68e3      	ldr	r3, [r4, #12]
   14108:	b11b      	cbz	r3, 14112 <bt_l2cap_chan_del+0x28>
		chan->destroy(chan);
   1410a:	4620      	mov	r0, r4
}
   1410c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->destroy(chan);
   14110:	4718      	bx	r3
}
   14112:	bd10      	pop	{r4, pc}

00014114 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   14114:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   14116:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   14118:	b18b      	cbz	r3, 1413e <bt_l2cap_disconnected+0x2a>
   1411a:	f1b3 0008 	subs.w	r0, r3, #8
   1411e:	d00e      	beq.n	1413e <bt_l2cap_disconnected+0x2a>
   14120:	681c      	ldr	r4, [r3, #0]
   14122:	b104      	cbz	r4, 14126 <bt_l2cap_disconnected+0x12>
   14124:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   14126:	f7ff ffe0 	bl	140ea <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1412a:	b144      	cbz	r4, 1413e <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1412c:	f114 0308 	adds.w	r3, r4, #8
   14130:	d002      	beq.n	14138 <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   14132:	68a3      	ldr	r3, [r4, #8]
   14134:	b103      	cbz	r3, 14138 <bt_l2cap_disconnected+0x24>
   14136:	3b08      	subs	r3, #8
{
   14138:	4620      	mov	r0, r4
   1413a:	461c      	mov	r4, r3
   1413c:	e7f3      	b.n	14126 <bt_l2cap_disconnected+0x12>
}
   1413e:	bd10      	pop	{r4, pc}

00014140 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   14140:	3104      	adds	r1, #4
   14142:	f7f3 bb6d 	b.w	7820 <bt_conn_create_pdu_timeout>

00014146 <bt_l2cap_send_cb>:
{
   14146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1414a:	4614      	mov	r4, r2
   1414c:	4605      	mov	r5, r0
   1414e:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
   14150:	f102 0008 	add.w	r0, r2, #8
   14154:	2104      	movs	r1, #4
{
   14156:	461e      	mov	r6, r3
   14158:	f8dd 8018 	ldr.w	r8, [sp, #24]
	hdr = net_buf_push(buf, sizeof(*hdr));
   1415c:	f7f9 fad4 	bl	d708 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   14160:	89a2      	ldrh	r2, [r4, #12]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   14162:	4643      	mov	r3, r8
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   14164:	3a04      	subs	r2, #4
   14166:	8002      	strh	r2, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
   14168:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1416a:	4632      	mov	r2, r6
   1416c:	4621      	mov	r1, r4
   1416e:	4628      	mov	r0, r5
}
   14170:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   14174:	f7f2 bf9c 	b.w	70b0 <bt_conn_send_cb>

00014178 <l2cap_chan_le_send_sdu>:
{
   14178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	total_len = net_buf_frags_len(*buf) + sent;
   1417c:	680c      	ldr	r4, [r1, #0]
{
   1417e:	4607      	mov	r7, r0
	total_len = net_buf_frags_len(*buf) + sent;
   14180:	4620      	mov	r0, r4
{
   14182:	4616      	mov	r6, r2
   14184:	4688      	mov	r8, r1
	total_len = net_buf_frags_len(*buf) + sent;
   14186:	f7ff feb2 	bl	13eee <net_buf_frags_len>
	if (total_len > ch->tx.mtu) {
   1418a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
	total_len = net_buf_frags_len(*buf) + sent;
   1418e:	eb06 0900 	add.w	r9, r6, r0
	if (total_len > ch->tx.mtu) {
   14192:	454b      	cmp	r3, r9
   14194:	db2e      	blt.n	141f4 <l2cap_chan_le_send_sdu+0x7c>
	if (!frag->len && frag->frags) {
   14196:	89a3      	ldrh	r3, [r4, #12]
   14198:	b91b      	cbnz	r3, 141a2 <l2cap_chan_le_send_sdu+0x2a>
   1419a:	6823      	ldr	r3, [r4, #0]
   1419c:	2b00      	cmp	r3, #0
   1419e:	bf18      	it	ne
   141a0:	461c      	movne	r4, r3
	if (!sent) {
   141a2:	b986      	cbnz	r6, 141c6 <l2cap_chan_le_send_sdu+0x4e>
		ret = l2cap_chan_le_send(ch, frag, BT_L2CAP_SDU_HDR_LEN);
   141a4:	2202      	movs	r2, #2
   141a6:	4621      	mov	r1, r4
   141a8:	4638      	mov	r0, r7
   141aa:	f7f3 fd3f 	bl	7c2c <l2cap_chan_le_send>
		if (ret < 0) {
   141ae:	1e05      	subs	r5, r0, #0
   141b0:	da08      	bge.n	141c4 <l2cap_chan_le_send_sdu+0x4c>
			if (ret == -EAGAIN) {
   141b2:	f115 0f0b 	cmn.w	r5, #11
				data_sent(frag)->len = sent;
   141b6:	bf08      	it	eq
   141b8:	82a6      	strheq	r6, [r4, #20]
			*buf = frag;
   141ba:	f8c8 4000 	str.w	r4, [r8]
}
   141be:	4628      	mov	r0, r5
   141c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		sent = ret;
   141c4:	b2ae      	uxth	r6, r5
	if (!frag->len && frag->frags) {
   141c6:	2500      	movs	r5, #0
	for (ret = 0; sent < total_len; sent += ret) {
   141c8:	454e      	cmp	r6, r9
   141ca:	db03      	blt.n	141d4 <l2cap_chan_le_send_sdu+0x5c>
	net_buf_unref(frag);
   141cc:	4620      	mov	r0, r4
   141ce:	f7f9 f98d 	bl	d4ec <net_buf_unref>
	return ret;
   141d2:	e7f4      	b.n	141be <l2cap_chan_le_send_sdu+0x46>
		if (!frag->len) {
   141d4:	89a0      	ldrh	r0, [r4, #12]
   141d6:	b918      	cbnz	r0, 141e0 <l2cap_chan_le_send_sdu+0x68>
			frag = net_buf_frag_del(NULL, frag);
   141d8:	4621      	mov	r1, r4
   141da:	f7f9 fa53 	bl	d684 <net_buf_frag_del>
   141de:	4604      	mov	r4, r0
		ret = l2cap_chan_le_send(ch, frag, 0);
   141e0:	2200      	movs	r2, #0
   141e2:	4621      	mov	r1, r4
   141e4:	4638      	mov	r0, r7
   141e6:	f7f3 fd21 	bl	7c2c <l2cap_chan_le_send>
		if (ret < 0) {
   141ea:	1e05      	subs	r5, r0, #0
   141ec:	dbe1      	blt.n	141b2 <l2cap_chan_le_send_sdu+0x3a>
	for (ret = 0; sent < total_len; sent += ret) {
   141ee:	442e      	add	r6, r5
   141f0:	b2b6      	uxth	r6, r6
   141f2:	e7e9      	b.n	141c8 <l2cap_chan_le_send_sdu+0x50>
		return -EMSGSIZE;
   141f4:	f06f 0523 	mvn.w	r5, #35	; 0x23
   141f8:	e7e1      	b.n	141be <l2cap_chan_le_send_sdu+0x46>

000141fa <l2cap_chan_tx_process>:
{
   141fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   141fc:	4604      	mov	r4, r0
		ch->tx_buf = NULL;
   141fe:	2700      	movs	r7, #0
	ch = CONTAINER_OF(work, struct bt_l2cap_le_chan, tx_work);
   14200:	f1a0 0574 	sub.w	r5, r0, #116	; 0x74
	return net_buf_get(&ch->tx_queue, K_NO_WAIT);
   14204:	f1a0 0620 	sub.w	r6, r0, #32
	if (ch->tx_buf) {
   14208:	f854 0c04 	ldr.w	r0, [r4, #-4]
   1420c:	b188      	cbz	r0, 14232 <l2cap_chan_tx_process+0x38>
		ch->tx_buf = NULL;
   1420e:	f844 7c04 	str.w	r7, [r4, #-4]
	while ((buf = l2cap_chan_le_get_tx_buf(ch))) {
   14212:	9001      	str	r0, [sp, #4]
   14214:	b158      	cbz	r0, 1422e <l2cap_chan_tx_process+0x34>
		sent = l2cap_chan_le_send_sdu(ch, &buf, sent);
   14216:	8a82      	ldrh	r2, [r0, #20]
   14218:	a901      	add	r1, sp, #4
   1421a:	4628      	mov	r0, r5
   1421c:	f7ff ffac 	bl	14178 <l2cap_chan_le_send_sdu>
		if (sent < 0) {
   14220:	2800      	cmp	r0, #0
   14222:	daf1      	bge.n	14208 <l2cap_chan_tx_process+0xe>
			if (sent == -EAGAIN) {
   14224:	300b      	adds	r0, #11
   14226:	d102      	bne.n	1422e <l2cap_chan_tx_process+0x34>
				ch->tx_buf = buf;
   14228:	9b01      	ldr	r3, [sp, #4]
   1422a:	f844 3c04 	str.w	r3, [r4, #-4]
}
   1422e:	b003      	add	sp, #12
   14230:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_get(&ch->tx_queue, K_NO_WAIT);
   14232:	2200      	movs	r2, #0
   14234:	2300      	movs	r3, #0
   14236:	4630      	mov	r0, r6
   14238:	f7f9 f8c6 	bl	d3c8 <net_buf_get>
   1423c:	e7e9      	b.n	14212 <l2cap_chan_tx_process+0x18>

0001423e <bt_l2cap_send.constprop.0>:
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   1423e:	2300      	movs	r3, #0
static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
   14240:	b507      	push	{r0, r1, r2, lr}
   14242:	460a      	mov	r2, r1
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   14244:	9300      	str	r3, [sp, #0]
   14246:	2105      	movs	r1, #5
   14248:	f7ff ff7d 	bl	14146 <bt_l2cap_send_cb>
}
   1424c:	b003      	add	sp, #12
   1424e:	f85d fb04 	ldr.w	pc, [sp], #4

00014252 <l2cap_send_reject>:
{
   14252:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14256:	f89d 9020 	ldrb.w	r9, [sp, #32]
   1425a:	4606      	mov	r6, r0
   1425c:	4617      	mov	r7, r2
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1425e:	2001      	movs	r0, #1
   14260:	f109 0202 	add.w	r2, r9, #2
{
   14264:	461d      	mov	r5, r3
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   14266:	f7f3 fc75 	bl	7b54 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   1426a:	4604      	mov	r4, r0
   1426c:	b190      	cbz	r0, 14294 <l2cap_send_reject+0x42>
	rej = net_buf_add(buf, sizeof(*rej));
   1426e:	f100 0808 	add.w	r8, r0, #8
   14272:	2102      	movs	r1, #2
   14274:	4640      	mov	r0, r8
   14276:	f7f9 faab 	bl	d7d0 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   1427a:	8007      	strh	r7, [r0, #0]
	if (data) {
   1427c:	b125      	cbz	r5, 14288 <l2cap_send_reject+0x36>
		net_buf_add_mem(buf, data, data_len);
   1427e:	464a      	mov	r2, r9
   14280:	4629      	mov	r1, r5
   14282:	4640      	mov	r0, r8
   14284:	f001 fab2 	bl	157ec <net_buf_simple_add_mem>
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
   14288:	4621      	mov	r1, r4
   1428a:	4630      	mov	r0, r6
}
   1428c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
   14290:	f7ff bfd5 	b.w	1423e <bt_l2cap_send.constprop.0>
}
   14294:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00014298 <bt_l2cap_encrypt_change>:
{
   14298:	b538      	push	{r3, r4, r5, lr}
   1429a:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1429c:	6d04      	ldr	r4, [r0, #80]	; 0x50
   1429e:	b10c      	cbz	r4, 142a4 <bt_l2cap_encrypt_change+0xc>
   142a0:	3c08      	subs	r4, #8
   142a2:	b904      	cbnz	r4, 142a6 <bt_l2cap_encrypt_change+0xe>
}
   142a4:	bd38      	pop	{r3, r4, r5, pc}
	if (chan->state != BT_L2CAP_CONNECT || chan->ident) {
   142a6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   142aa:	2b01      	cmp	r3, #1
   142ac:	d10a      	bne.n	142c4 <bt_l2cap_encrypt_change+0x2c>
   142ae:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   142b2:	b93b      	cbnz	r3, 142c4 <bt_l2cap_encrypt_change+0x2c>
	if (status) {
   142b4:	b18d      	cbz	r5, 142da <bt_l2cap_encrypt_change+0x42>
		bt_l2cap_chan_remove(chan->conn, chan);
   142b6:	6820      	ldr	r0, [r4, #0]
   142b8:	4621      	mov	r1, r4
   142ba:	f7ff fefd 	bl	140b8 <bt_l2cap_chan_remove>
		bt_l2cap_chan_del(chan);
   142be:	4620      	mov	r0, r4
   142c0:	f7ff ff13 	bl	140ea <bt_l2cap_chan_del>
		if (chan->ops->encrypt_change) {
   142c4:	6863      	ldr	r3, [r4, #4]
   142c6:	689b      	ldr	r3, [r3, #8]
   142c8:	b113      	cbz	r3, 142d0 <bt_l2cap_encrypt_change+0x38>
			chan->ops->encrypt_change(chan, hci_status);
   142ca:	4629      	mov	r1, r5
   142cc:	4620      	mov	r0, r4
   142ce:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   142d0:	f114 0f08 	cmn.w	r4, #8
   142d4:	d0e6      	beq.n	142a4 <bt_l2cap_encrypt_change+0xc>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   142d6:	68a4      	ldr	r4, [r4, #8]
   142d8:	e7e1      	b.n	1429e <bt_l2cap_encrypt_change+0x6>
	l2cap_le_conn_req(BT_L2CAP_LE_CHAN(chan));
   142da:	4620      	mov	r0, r4
   142dc:	f7f3 fd7a 	bl	7dd4 <l2cap_le_conn_req>
   142e0:	e7f0      	b.n	142c4 <bt_l2cap_encrypt_change+0x2c>

000142e2 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   142e2:	6d00      	ldr	r0, [r0, #80]	; 0x50
   142e4:	b160      	cbz	r0, 14300 <bt_l2cap_le_lookup_tx_cid+0x1e>
   142e6:	3808      	subs	r0, #8
   142e8:	b900      	cbnz	r0, 142ec <bt_l2cap_le_lookup_tx_cid+0xa>
   142ea:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   142ec:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   142f0:	428b      	cmp	r3, r1
   142f2:	d005      	beq.n	14300 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   142f4:	f110 0308 	adds.w	r3, r0, #8
   142f8:	d001      	beq.n	142fe <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   142fa:	6880      	ldr	r0, [r0, #8]
   142fc:	e7f2      	b.n	142e4 <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   142fe:	4618      	mov	r0, r3
}
   14300:	4770      	bx	lr

00014302 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   14302:	6d00      	ldr	r0, [r0, #80]	; 0x50
   14304:	b158      	cbz	r0, 1431e <bt_l2cap_le_lookup_rx_cid+0x1c>
   14306:	3808      	subs	r0, #8
   14308:	b900      	cbnz	r0, 1430c <bt_l2cap_le_lookup_rx_cid+0xa>
   1430a:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1430c:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
   1430e:	428b      	cmp	r3, r1
   14310:	d005      	beq.n	1431e <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   14312:	f110 0308 	adds.w	r3, r0, #8
   14316:	d001      	beq.n	1431c <bt_l2cap_le_lookup_rx_cid+0x1a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   14318:	6880      	ldr	r0, [r0, #8]
   1431a:	e7f3      	b.n	14304 <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   1431c:	4618      	mov	r0, r3
}
   1431e:	4770      	bx	lr

00014320 <bt_l2cap_update_conn_param>:
{
   14320:	b570      	push	{r4, r5, r6, lr}
   14322:	460c      	mov	r4, r1
   14324:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   14326:	f7f3 fbdf 	bl	7ae8 <get_ident>
   1432a:	2208      	movs	r2, #8
   1432c:	4601      	mov	r1, r0
   1432e:	2012      	movs	r0, #18
   14330:	f7f3 fc10 	bl	7b54 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   14334:	4605      	mov	r5, r0
   14336:	b188      	cbz	r0, 1435c <bt_l2cap_update_conn_param+0x3c>
	req = net_buf_add(buf, sizeof(*req));
   14338:	2108      	movs	r1, #8
   1433a:	4408      	add	r0, r1
   1433c:	f7f9 fa48 	bl	d7d0 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   14340:	8822      	ldrh	r2, [r4, #0]
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
   14342:	4629      	mov	r1, r5
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   14344:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   14346:	8862      	ldrh	r2, [r4, #2]
   14348:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   1434a:	88a2      	ldrh	r2, [r4, #4]
   1434c:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   1434e:	88e2      	ldrh	r2, [r4, #6]
   14350:	80c2      	strh	r2, [r0, #6]
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
   14352:	4630      	mov	r0, r6
   14354:	f7ff ff73 	bl	1423e <bt_l2cap_send.constprop.0>
	return 0;
   14358:	2000      	movs	r0, #0
}
   1435a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   1435c:	f06f 000b 	mvn.w	r0, #11
   14360:	e7fb      	b.n	1435a <bt_l2cap_update_conn_param+0x3a>

00014362 <bt_l2cap_init>:
}
   14362:	4770      	bx	lr

00014364 <att_op_get_type>:
	switch (op) {
   14364:	281e      	cmp	r0, #30
   14366:	d816      	bhi.n	14396 <att_op_get_type+0x32>
   14368:	b308      	cbz	r0, 143ae <att_op_get_type+0x4a>
   1436a:	1e43      	subs	r3, r0, #1
   1436c:	2b1d      	cmp	r3, #29
   1436e:	d81e      	bhi.n	143ae <att_op_get_type+0x4a>
   14370:	e8df f003 	tbb	[pc, r3]
   14374:	23172317 	.word	0x23172317
   14378:	23172317 	.word	0x23172317
   1437c:	23172317 	.word	0x23172317
   14380:	23172317 	.word	0x23172317
   14384:	1d172317 	.word	0x1d172317
   14388:	2317231d 	.word	0x2317231d
   1438c:	1d191d17 	.word	0x1d191d17
   14390:	0f1b      	.short	0x0f1b
   14392:	2004      	movs	r0, #4
   14394:	4770      	bx	lr
   14396:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1439a:	2b52      	cmp	r3, #82	; 0x52
   1439c:	d107      	bne.n	143ae <att_op_get_type+0x4a>
		return ATT_COMMAND;
   1439e:	2000      	movs	r0, #0
}
   143a0:	4770      	bx	lr
		return ATT_RESPONSE;
   143a2:	2002      	movs	r0, #2
   143a4:	4770      	bx	lr
		return ATT_NOTIFICATION;
   143a6:	2003      	movs	r0, #3
   143a8:	4770      	bx	lr
		return ATT_INDICATION;
   143aa:	2005      	movs	r0, #5
   143ac:	4770      	bx	lr
		return ATT_COMMAND;
   143ae:	f010 0f40 	tst.w	r0, #64	; 0x40
   143b2:	bf0c      	ite	eq
   143b4:	2006      	moveq	r0, #6
   143b6:	2000      	movne	r0, #0
   143b8:	4770      	bx	lr
		return ATT_REQUEST;
   143ba:	2001      	movs	r0, #1
   143bc:	4770      	bx	lr

000143be <att_notify>:
{
   143be:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
   143c0:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
   143c2:	f101 0008 	add.w	r0, r1, #8
{
   143c6:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
   143c8:	f001 f9fc 	bl	157c4 <net_buf_simple_pull_le16>
	bt_gatt_notification(conn, handle, buf->data, buf->len);
   143cc:	89a3      	ldrh	r3, [r4, #12]
	handle = net_buf_pull_le16(buf);
   143ce:	4601      	mov	r1, r0
	bt_gatt_notification(conn, handle, buf->data, buf->len);
   143d0:	68a2      	ldr	r2, [r4, #8]
   143d2:	4628      	mov	r0, r5
   143d4:	f000 fd8f 	bl	14ef6 <bt_gatt_notification>
}
   143d8:	2000      	movs	r0, #0
   143da:	bd38      	pop	{r3, r4, r5, pc}

000143dc <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(u16_t start_handle, u16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   143dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   143de:	e9cd 2301 	strd	r2, r3, [sp, #4]
   143e2:	2300      	movs	r3, #0
   143e4:	461a      	mov	r2, r3
   143e6:	9300      	str	r3, [sp, #0]
   143e8:	f7f6 f80a 	bl	a400 <bt_gatt_foreach_attr_type>
				  user_data);
}
   143ec:	b005      	add	sp, #20
   143ee:	f85d fb04 	ldr.w	pc, [sp], #4

000143f2 <find_info_cb>:
	if (!data->rsp) {
   143f2:	688b      	ldr	r3, [r1, #8]
{
   143f4:	b570      	push	{r4, r5, r6, lr}
   143f6:	4605      	mov	r5, r0
   143f8:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
   143fa:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
   143fc:	b963      	cbnz	r3, 14418 <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   143fe:	6848      	ldr	r0, [r1, #4]
   14400:	2101      	movs	r1, #1
   14402:	3008      	adds	r0, #8
   14404:	f7f9 f9e4 	bl	d7d0 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   14408:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1440a:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1440c:	781b      	ldrb	r3, [r3, #0]
   1440e:	2b00      	cmp	r3, #0
   14410:	bf0c      	ite	eq
   14412:	2301      	moveq	r3, #1
   14414:	2302      	movne	r3, #2
   14416:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   14418:	68a3      	ldr	r3, [r4, #8]
   1441a:	781b      	ldrb	r3, [r3, #0]
   1441c:	2b01      	cmp	r3, #1
   1441e:	d003      	beq.n	14428 <find_info_cb+0x36>
   14420:	2b02      	cmp	r3, #2
   14422:	d01a      	beq.n	1445a <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   14424:	2000      	movs	r0, #0
   14426:	e017      	b.n	14458 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   14428:	682b      	ldr	r3, [r5, #0]
   1442a:	781b      	ldrb	r3, [r3, #0]
   1442c:	2b00      	cmp	r3, #0
   1442e:	d1f9      	bne.n	14424 <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   14430:	6860      	ldr	r0, [r4, #4]
   14432:	2104      	movs	r1, #4
   14434:	3008      	adds	r0, #8
   14436:	f7f9 f9cb 	bl	d7d0 <net_buf_simple_add>
		data->info16->handle = sys_cpu_to_le16(attr->handle);
   1443a:	8a2b      	ldrh	r3, [r5, #16]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1443c:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
   1443e:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   14440:	682b      	ldr	r3, [r5, #0]
   14442:	885b      	ldrh	r3, [r3, #2]
   14444:	8043      	strh	r3, [r0, #2]
		if (att->chan.tx.mtu - data->buf->len >
   14446:	6863      	ldr	r3, [r4, #4]
   14448:	f8b6 004a 	ldrh.w	r0, [r6, #74]	; 0x4a
   1444c:	899b      	ldrh	r3, [r3, #12]
   1444e:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   14450:	2804      	cmp	r0, #4
   14452:	bf94      	ite	ls
   14454:	2000      	movls	r0, #0
   14456:	2001      	movhi	r0, #1
}
   14458:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1445a:	682b      	ldr	r3, [r5, #0]
   1445c:	781b      	ldrb	r3, [r3, #0]
   1445e:	2b02      	cmp	r3, #2
   14460:	d1e0      	bne.n	14424 <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   14462:	6860      	ldr	r0, [r4, #4]
   14464:	2112      	movs	r1, #18
   14466:	3008      	adds	r0, #8
   14468:	f7f9 f9b2 	bl	d7d0 <net_buf_simple_add>
		data->info128->handle = sys_cpu_to_le16(attr->handle);
   1446c:	8a2b      	ldrh	r3, [r5, #16]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1446e:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   14470:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   14472:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(attr->handle);
   14474:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   14478:	3101      	adds	r1, #1
   1447a:	f7ff f95a 	bl	13732 <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
   1447e:	6863      	ldr	r3, [r4, #4]
   14480:	f8b6 004a 	ldrh.w	r0, [r6, #74]	; 0x4a
   14484:	899b      	ldrh	r3, [r3, #12]
   14486:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   14488:	2812      	cmp	r0, #18
   1448a:	e7e2      	b.n	14452 <find_info_cb+0x60>

0001448c <read_group_cb>:
{
   1448c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   14490:	f04f 0800 	mov.w	r8, #0
   14494:	f44f 5320 	mov.w	r3, #10240	; 0x2800
	struct bt_att *att = data->att;
   14498:	680e      	ldr	r6, [r1, #0]
{
   1449a:	4605      	mov	r5, r0
   1449c:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1449e:	6800      	ldr	r0, [r0, #0]
   144a0:	a902      	add	r1, sp, #8
	struct bt_conn *conn = att->chan.chan.conn;
   144a2:	6837      	ldr	r7, [r6, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   144a4:	f88d 8008 	strb.w	r8, [sp, #8]
   144a8:	f8ad 300a 	strh.w	r3, [sp, #10]
   144ac:	f7ff f9dc 	bl	13868 <bt_uuid_cmp>
   144b0:	b198      	cbz	r0, 144da <read_group_cb+0x4e>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   144b2:	f642 0301 	movw	r3, #10241	; 0x2801
   144b6:	6828      	ldr	r0, [r5, #0]
   144b8:	a903      	add	r1, sp, #12
   144ba:	f88d 800c 	strb.w	r8, [sp, #12]
   144be:	f8ad 300e 	strh.w	r3, [sp, #14]
   144c2:	f7ff f9d1 	bl	13868 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   144c6:	b140      	cbz	r0, 144da <read_group_cb+0x4e>
		if (data->group &&
   144c8:	6923      	ldr	r3, [r4, #16]
   144ca:	b123      	cbz	r3, 144d6 <read_group_cb+0x4a>
		    attr->handle > sys_le16_to_cpu(data->group->end_handle)) {
   144cc:	8a2a      	ldrh	r2, [r5, #16]
		if (data->group &&
   144ce:	8859      	ldrh	r1, [r3, #2]
   144d0:	4291      	cmp	r1, r2
   144d2:	d200      	bcs.n	144d6 <read_group_cb+0x4a>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
   144d4:	805a      	strh	r2, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   144d6:	2001      	movs	r0, #1
   144d8:	e012      	b.n	14500 <read_group_cb+0x74>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   144da:	6861      	ldr	r1, [r4, #4]
   144dc:	6828      	ldr	r0, [r5, #0]
   144de:	f7ff f9c3 	bl	13868 <bt_uuid_cmp>
   144e2:	b110      	cbz	r0, 144ea <read_group_cb+0x5e>
		data->group = NULL;
   144e4:	2300      	movs	r3, #0
   144e6:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   144e8:	e7f5      	b.n	144d6 <read_group_cb+0x4a>
	if (data->rsp->len &&
   144ea:	68e3      	ldr	r3, [r4, #12]
   144ec:	68a0      	ldr	r0, [r4, #8]
   144ee:	781a      	ldrb	r2, [r3, #0]
   144f0:	b14a      	cbz	r2, 14506 <read_group_cb+0x7a>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
   144f2:	f8b6 304a 	ldrh.w	r3, [r6, #74]	; 0x4a
   144f6:	8981      	ldrh	r1, [r0, #12]
   144f8:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   144fa:	4293      	cmp	r3, r2
   144fc:	da03      	bge.n	14506 <read_group_cb+0x7a>
		return BT_GATT_ITER_STOP;
   144fe:	2000      	movs	r0, #0
}
   14500:	b004      	add	sp, #16
   14502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   14506:	2104      	movs	r1, #4
   14508:	3008      	adds	r0, #8
   1450a:	f7f9 f961 	bl	d7d0 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
   1450e:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   14510:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
   14512:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
   14514:	8043      	strh	r3, [r0, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   14516:	f8b6 304a 	ldrh.w	r3, [r6, #74]	; 0x4a
   1451a:	2600      	movs	r6, #0
   1451c:	68a1      	ldr	r1, [r4, #8]
   1451e:	4638      	mov	r0, r7
   14520:	898a      	ldrh	r2, [r1, #12]
   14522:	6889      	ldr	r1, [r1, #8]
   14524:	1a9b      	subs	r3, r3, r2
   14526:	9600      	str	r6, [sp, #0]
   14528:	440a      	add	r2, r1
   1452a:	f8d5 8004 	ldr.w	r8, [r5, #4]
   1452e:	4629      	mov	r1, r5
   14530:	b29b      	uxth	r3, r3
   14532:	47c0      	blx	r8
	if (read < 0) {
   14534:	1e01      	subs	r1, r0, #0
   14536:	dbe2      	blt.n	144fe <read_group_cb+0x72>
	if (!data->rsp->len) {
   14538:	68e5      	ldr	r5, [r4, #12]
   1453a:	68a0      	ldr	r0, [r4, #8]
   1453c:	782a      	ldrb	r2, [r5, #0]
   1453e:	1d0b      	adds	r3, r1, #4
   14540:	b922      	cbnz	r2, 1454c <read_group_cb+0xc0>
		data->rsp->len = read + sizeof(*data->group);
   14542:	702b      	strb	r3, [r5, #0]
	net_buf_add(data->buf, read);
   14544:	3008      	adds	r0, #8
   14546:	f7f9 f943 	bl	d7d0 <net_buf_simple_add>
   1454a:	e7c4      	b.n	144d6 <read_group_cb+0x4a>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1454c:	429a      	cmp	r2, r3
   1454e:	d0f9      	beq.n	14544 <read_group_cb+0xb8>
		data->buf->len -= sizeof(*data->group);
   14550:	8983      	ldrh	r3, [r0, #12]
   14552:	3b04      	subs	r3, #4
   14554:	8183      	strh	r3, [r0, #12]
		return false;
   14556:	e7d2      	b.n	144fe <read_group_cb+0x72>

00014558 <read_type_cb>:
{
   14558:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att *att = data->att;
   1455c:	f8d1 8000 	ldr.w	r8, [r1]
{
   14560:	4606      	mov	r6, r0
   14562:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   14564:	6800      	ldr	r0, [r0, #0]
   14566:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = att->chan.chan.conn;
   14568:	f8d8 9000 	ldr.w	r9, [r8]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1456c:	f7ff f97c 	bl	13868 <bt_uuid_cmp>
   14570:	4607      	mov	r7, r0
   14572:	2800      	cmp	r0, #0
   14574:	d14a      	bne.n	1460c <read_type_cb+0xb4>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   14576:	2215      	movs	r2, #21
   14578:	4631      	mov	r1, r6
   1457a:	4648      	mov	r0, r9
   1457c:	f000 fc28 	bl	14dd0 <bt_gatt_check_perm>
   14580:	4604      	mov	r4, r0
   14582:	7528      	strb	r0, [r5, #20]
	if (data->err) {
   14584:	b140      	cbz	r0, 14598 <read_type_cb+0x40>
		if (data->rsp->len) {
   14586:	68eb      	ldr	r3, [r5, #12]
   14588:	781c      	ldrb	r4, [r3, #0]
   1458a:	b10c      	cbz	r4, 14590 <read_type_cb+0x38>
		return BT_GATT_ITER_STOP;
   1458c:	463c      	mov	r4, r7
			data->err = 0x00;
   1458e:	752f      	strb	r7, [r5, #20]
}
   14590:	4620      	mov	r0, r4
   14592:	b003      	add	sp, #12
   14594:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(data->buf, sizeof(*data->item));
   14598:	68a8      	ldr	r0, [r5, #8]
   1459a:	2102      	movs	r1, #2
   1459c:	3008      	adds	r0, #8
   1459e:	f7f9 f917 	bl	d7d0 <net_buf_simple_add>
	data->item->handle = sys_cpu_to_le16(attr->handle);
   145a2:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   145a4:	68a9      	ldr	r1, [r5, #8]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
   145a6:	6128      	str	r0, [r5, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   145a8:	898a      	ldrh	r2, [r1, #12]
	data->item->handle = sys_cpu_to_le16(attr->handle);
   145aa:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   145ac:	f8b8 304a 	ldrh.w	r3, [r8, #74]	; 0x4a
   145b0:	6889      	ldr	r1, [r1, #8]
   145b2:	1a9b      	subs	r3, r3, r2
   145b4:	9400      	str	r4, [sp, #0]
   145b6:	440a      	add	r2, r1
   145b8:	4648      	mov	r0, r9
   145ba:	4631      	mov	r1, r6
   145bc:	6877      	ldr	r7, [r6, #4]
   145be:	b29b      	uxth	r3, r3
   145c0:	47b8      	blx	r7
	if (read < 0) {
   145c2:	1e01      	subs	r1, r0, #0
   145c4:	da07      	bge.n	145d6 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   145c6:	f111 0fff 	cmn.w	r1, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   145ca:	bf32      	itee	cc
   145cc:	210e      	movcc	r1, #14
		return -err;
   145ce:	4249      	negcs	r1, r1
   145d0:	b2c9      	uxtbcs	r1, r1
		data->err = err_to_att(read);
   145d2:	7529      	strb	r1, [r5, #20]
		return BT_GATT_ITER_STOP;
   145d4:	e7dc      	b.n	14590 <read_type_cb+0x38>
	if (!data->rsp->len) {
   145d6:	68ee      	ldr	r6, [r5, #12]
   145d8:	68a8      	ldr	r0, [r5, #8]
   145da:	7832      	ldrb	r2, [r6, #0]
   145dc:	1c8b      	adds	r3, r1, #2
   145de:	b97a      	cbnz	r2, 14600 <read_type_cb+0xa8>
		data->rsp->len = read + sizeof(*data->item);
   145e0:	7033      	strb	r3, [r6, #0]
	net_buf_add(data->buf, read);
   145e2:	3008      	adds	r0, #8
   145e4:	f7f9 f8f4 	bl	d7d0 <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
   145e8:	68ab      	ldr	r3, [r5, #8]
   145ea:	f8b8 404a 	ldrh.w	r4, [r8, #74]	; 0x4a
   145ee:	8998      	ldrh	r0, [r3, #12]
   145f0:	68eb      	ldr	r3, [r5, #12]
   145f2:	1a24      	subs	r4, r4, r0
   145f4:	7818      	ldrb	r0, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   145f6:	4284      	cmp	r4, r0
   145f8:	bfd4      	ite	le
   145fa:	2400      	movle	r4, #0
   145fc:	2401      	movgt	r4, #1
   145fe:	e7c7      	b.n	14590 <read_type_cb+0x38>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   14600:	429a      	cmp	r2, r3
   14602:	d0ee      	beq.n	145e2 <read_type_cb+0x8a>
		data->buf->len -= sizeof(*data->item);
   14604:	8983      	ldrh	r3, [r0, #12]
   14606:	3b02      	subs	r3, #2
   14608:	8183      	strh	r3, [r0, #12]
		return BT_GATT_ITER_STOP;
   1460a:	e7c1      	b.n	14590 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   1460c:	2401      	movs	r4, #1
   1460e:	e7bf      	b.n	14590 <read_type_cb+0x38>

00014610 <att_pdu_sent>:
{
   14610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14614:	4607      	mov	r7, r0
	struct bt_att *att = att_get(conn);
   14616:	f7f4 f99b 	bl	8950 <att_get>
   1461a:	4605      	mov	r5, r0
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1461c:	f100 08f8 	add.w	r8, r0, #248	; 0xf8
   14620:	2200      	movs	r2, #0
   14622:	2300      	movs	r3, #0
   14624:	4640      	mov	r0, r8
   14626:	f7f8 fecf 	bl	d3c8 <net_buf_get>
   1462a:	4604      	mov	r4, r0
   1462c:	b928      	cbnz	r0, 1463a <att_pdu_sent+0x2a>
	z_impl_k_sem_give(sem);
   1462e:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
}
   14632:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   14636:	f7fc bae3 	b.w	10c00 <z_impl_k_sem_give>
		if (att->req && att->req->buf == buf) {
   1463a:	f8d5 60b4 	ldr.w	r6, [r5, #180]	; 0xb4
   1463e:	b14e      	cbz	r6, 14654 <att_pdu_sent+0x44>
   14640:	6933      	ldr	r3, [r6, #16]
   14642:	42a3      	cmp	r3, r4
   14644:	d106      	bne.n	14654 <att_pdu_sent+0x44>
	state->offset = net_buf_simple_headroom(buf);
   14646:	f104 0008 	add.w	r0, r4, #8
   1464a:	f001 f8c3 	bl	157d4 <net_buf_simple_headroom>
	state->len = buf->len;
   1464e:	89a3      	ldrh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   14650:	81b0      	strh	r0, [r6, #12]
	state->len = buf->len;
   14652:	81f3      	strh	r3, [r6, #14]
		if (!att_send(conn, buf, NULL, NULL)) {
   14654:	2300      	movs	r3, #0
   14656:	4621      	mov	r1, r4
   14658:	461a      	mov	r2, r3
   1465a:	4638      	mov	r0, r7
   1465c:	f7f4 f94e 	bl	88fc <att_send>
   14660:	2800      	cmp	r0, #0
   14662:	d1dd      	bne.n	14620 <att_pdu_sent+0x10>
}
   14664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00014668 <att_cfm_sent>:
{
   14668:	b538      	push	{r3, r4, r5, lr}
   1466a:	4604      	mov	r4, r0
   1466c:	460d      	mov	r5, r1
	struct bt_att *att = att_get(conn);
   1466e:	f7f4 f96f 	bl	8950 <att_get>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14672:	f100 03b0 	add.w	r3, r0, #176	; 0xb0
   14676:	e8d3 2fef 	ldaex	r2, [r3]
   1467a:	f022 0202 	bic.w	r2, r2, #2
   1467e:	e8c3 2fe1 	stlex	r1, r2, [r3]
   14682:	2900      	cmp	r1, #0
   14684:	d1f7      	bne.n	14676 <att_cfm_sent+0xe>
	att_pdu_sent(conn, user_data);
   14686:	4629      	mov	r1, r5
   14688:	4620      	mov	r0, r4
}
   1468a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	att_pdu_sent(conn, user_data);
   1468e:	f7ff bfbf 	b.w	14610 <att_pdu_sent>

00014692 <att_rsp_sent>:
{
   14692:	b538      	push	{r3, r4, r5, lr}
   14694:	4604      	mov	r4, r0
   14696:	460d      	mov	r5, r1
	struct bt_att *att = att_get(conn);
   14698:	f7f4 f95a 	bl	8950 <att_get>
   1469c:	f100 03b0 	add.w	r3, r0, #176	; 0xb0
   146a0:	e8d3 2fef 	ldaex	r2, [r3]
   146a4:	f022 0201 	bic.w	r2, r2, #1
   146a8:	e8c3 2fe1 	stlex	r1, r2, [r3]
   146ac:	2900      	cmp	r1, #0
   146ae:	d1f7      	bne.n	146a0 <att_rsp_sent+0xe>
	att_pdu_sent(conn, user_data);
   146b0:	4629      	mov	r1, r5
   146b2:	4620      	mov	r0, r4
}
   146b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	att_pdu_sent(conn, user_data);
   146b8:	f7ff bfaa 	b.w	14610 <att_pdu_sent>

000146bc <write_cb>:
{
   146bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   146be:	460c      	mov	r4, r1
   146c0:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   146c2:	4601      	mov	r1, r0
   146c4:	222a      	movs	r2, #42	; 0x2a
   146c6:	6820      	ldr	r0, [r4, #0]
   146c8:	f000 fb82 	bl	14dd0 <bt_gatt_check_perm>
   146cc:	4605      	mov	r5, r0
   146ce:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   146d0:	bb00      	cbnz	r0, 14714 <write_cb+0x58>
	if (!data->req) {
   146d2:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   146d4:	4631      	mov	r1, r6
	if (!data->req) {
   146d6:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   146d8:	bf14      	ite	ne
   146da:	2300      	movne	r3, #0
   146dc:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   146de:	9301      	str	r3, [sp, #4]
   146e0:	8a63      	ldrh	r3, [r4, #18]
   146e2:	68b7      	ldr	r7, [r6, #8]
   146e4:	9300      	str	r3, [sp, #0]
   146e6:	68e2      	ldr	r2, [r4, #12]
   146e8:	8a23      	ldrh	r3, [r4, #16]
   146ea:	6820      	ldr	r0, [r4, #0]
   146ec:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   146ee:	1e03      	subs	r3, r0, #0
   146f0:	db05      	blt.n	146fe <write_cb+0x42>
   146f2:	8a22      	ldrh	r2, [r4, #16]
   146f4:	4293      	cmp	r3, r2
   146f6:	d10b      	bne.n	14710 <write_cb+0x54>
	data->err = 0U;
   146f8:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   146fa:	2501      	movs	r5, #1
   146fc:	e005      	b.n	1470a <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   146fe:	f113 0fff 	cmn.w	r3, #255	; 0xff
   14702:	d305      	bcc.n	14710 <write_cb+0x54>
		return -err;
   14704:	425b      	negs	r3, r3
   14706:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   14708:	7523      	strb	r3, [r4, #20]
}
   1470a:	4628      	mov	r0, r5
   1470c:	b003      	add	sp, #12
   1470e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   14710:	230e      	movs	r3, #14
   14712:	e7f9      	b.n	14708 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   14714:	2500      	movs	r5, #0
   14716:	e7f8      	b.n	1470a <write_cb+0x4e>

00014718 <read_cb>:
{
   14718:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1471c:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1471e:	6888      	ldr	r0, [r1, #8]
	struct bt_att *att = data->att;
   14720:	f8d1 9000 	ldr.w	r9, [r1]
{
   14724:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   14726:	3008      	adds	r0, #8
   14728:	2100      	movs	r1, #0
	struct bt_conn *conn = att->chan.chan.conn;
   1472a:	f8d9 8000 	ldr.w	r8, [r9]
	data->err = 0x00;
   1472e:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   14730:	f7f9 f84e 	bl	d7d0 <net_buf_simple_add>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   14734:	2215      	movs	r2, #21
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   14736:	60e0      	str	r0, [r4, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   14738:	4631      	mov	r1, r6
   1473a:	4640      	mov	r0, r8
	data->err = 0x00;
   1473c:	7427      	strb	r7, [r4, #16]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1473e:	f000 fb47 	bl	14dd0 <bt_gatt_check_perm>
   14742:	4605      	mov	r5, r0
   14744:	7420      	strb	r0, [r4, #16]
	if (data->err) {
   14746:	bb00      	cbnz	r0, 1478a <read_cb+0x72>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   14748:	68a1      	ldr	r1, [r4, #8]
   1474a:	f8b9 304a 	ldrh.w	r3, [r9, #74]	; 0x4a
   1474e:	898a      	ldrh	r2, [r1, #12]
   14750:	88a0      	ldrh	r0, [r4, #4]
   14752:	6889      	ldr	r1, [r1, #8]
   14754:	1a9b      	subs	r3, r3, r2
   14756:	9000      	str	r0, [sp, #0]
   14758:	440a      	add	r2, r1
   1475a:	4640      	mov	r0, r8
   1475c:	4631      	mov	r1, r6
   1475e:	6877      	ldr	r7, [r6, #4]
   14760:	b29b      	uxth	r3, r3
   14762:	47b8      	blx	r7
	if (read < 0) {
   14764:	1e01      	subs	r1, r0, #0
   14766:	da0a      	bge.n	1477e <read_cb+0x66>
	if (err < 0 && err >= -0xff) {
   14768:	f111 0fff 	cmn.w	r1, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   1476c:	bf32      	itee	cc
   1476e:	210e      	movcc	r1, #14
		return -err;
   14770:	4249      	negcs	r1, r1
   14772:	b2c9      	uxtbcs	r1, r1
		data->err = err_to_att(read);
   14774:	7421      	strb	r1, [r4, #16]
}
   14776:	4628      	mov	r0, r5
   14778:	b003      	add	sp, #12
   1477a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_add(data->buf, read);
   1477e:	68a0      	ldr	r0, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   14780:	2501      	movs	r5, #1
	net_buf_add(data->buf, read);
   14782:	3008      	adds	r0, #8
   14784:	f7f9 f824 	bl	d7d0 <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
   14788:	e7f5      	b.n	14776 <read_cb+0x5e>
		return BT_GATT_ITER_STOP;
   1478a:	463d      	mov	r5, r7
   1478c:	e7f3      	b.n	14776 <read_cb+0x5e>

0001478e <att_write_cmd>:
{
   1478e:	b530      	push	{r4, r5, lr}
   14790:	460c      	mov	r4, r1
   14792:	b085      	sub	sp, #20
	struct bt_conn *conn = att->chan.chan.conn;
   14794:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
   14796:	f101 0008 	add.w	r0, r1, #8
   1479a:	f001 f813 	bl	157c4 <net_buf_simple_pull_le16>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
   1479e:	89a2      	ldrh	r2, [r4, #12]
	handle = net_buf_pull_le16(buf);
   147a0:	4603      	mov	r3, r0
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
   147a2:	9202      	str	r2, [sp, #8]
   147a4:	68a2      	ldr	r2, [r4, #8]
   147a6:	4628      	mov	r0, r5
   147a8:	9201      	str	r2, [sp, #4]
   147aa:	2200      	movs	r2, #0
   147ac:	4611      	mov	r1, r2
   147ae:	9200      	str	r2, [sp, #0]
   147b0:	f7f4 fb40 	bl	8e34 <att_write_rsp>
}
   147b4:	b005      	add	sp, #20
   147b6:	bd30      	pop	{r4, r5, pc}

000147b8 <att_write_req>:
{
   147b8:	b530      	push	{r4, r5, lr}
   147ba:	460c      	mov	r4, r1
   147bc:	b085      	sub	sp, #20
	struct bt_conn *conn = att->chan.chan.conn;
   147be:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
   147c0:	f101 0008 	add.w	r0, r1, #8
   147c4:	f000 fffe 	bl	157c4 <net_buf_simple_pull_le16>
	return att_write_rsp(conn, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   147c8:	89a2      	ldrh	r2, [r4, #12]
	handle = net_buf_pull_le16(buf);
   147ca:	4603      	mov	r3, r0
	return att_write_rsp(conn, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   147cc:	9202      	str	r2, [sp, #8]
   147ce:	68a2      	ldr	r2, [r4, #8]
   147d0:	2112      	movs	r1, #18
   147d2:	9201      	str	r2, [sp, #4]
   147d4:	2200      	movs	r2, #0
   147d6:	4628      	mov	r0, r5
   147d8:	9200      	str	r2, [sp, #0]
   147da:	2213      	movs	r2, #19
   147dc:	f7f4 fb2a 	bl	8e34 <att_write_rsp>
}
   147e0:	b005      	add	sp, #20
   147e2:	bd30      	pop	{r4, r5, pc}

000147e4 <att_read_blob_req>:
{
   147e4:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   147e6:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
   147e8:	210c      	movs	r1, #12
   147ea:	8813      	ldrh	r3, [r2, #0]
   147ec:	8852      	ldrh	r2, [r2, #2]
   147ee:	9200      	str	r2, [sp, #0]
   147f0:	220d      	movs	r2, #13
   147f2:	f7f4 fd07 	bl	9204 <att_read_rsp>
}
   147f6:	b003      	add	sp, #12
   147f8:	f85d fb04 	ldr.w	pc, [sp], #4

000147fc <att_read_req>:
{
   147fc:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   147fe:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   14800:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   14802:	210a      	movs	r1, #10
   14804:	881b      	ldrh	r3, [r3, #0]
   14806:	9200      	str	r2, [sp, #0]
   14808:	220b      	movs	r2, #11
   1480a:	f7f4 fcfb 	bl	9204 <att_read_rsp>
}
   1480e:	b003      	add	sp, #12
   14810:	f85d fb04 	ldr.w	pc, [sp], #4

00014814 <bt_att_init>:
	bt_gatt_init();
   14814:	f7f5 bd7c 	b.w	a310 <bt_gatt_init>

00014818 <bt_att_get_mtu>:
{
   14818:	b508      	push	{r3, lr}
	att = att_chan_get(conn);
   1481a:	f7f4 f97f 	bl	8b1c <att_chan_get>
	if (!att) {
   1481e:	b108      	cbz	r0, 14824 <bt_att_get_mtu+0xc>
	return att->chan.tx.mtu;
   14820:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
}
   14824:	bd08      	pop	{r3, pc}

00014826 <att_req_destroy>:
{
   14826:	b510      	push	{r4, lr}
   14828:	4604      	mov	r4, r0
	if (req->buf) {
   1482a:	6900      	ldr	r0, [r0, #16]
   1482c:	b108      	cbz	r0, 14832 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   1482e:	f7f8 fe5d 	bl	d4ec <net_buf_unref>
	if (req->destroy) {
   14832:	68a3      	ldr	r3, [r4, #8]
   14834:	b10b      	cbz	r3, 1483a <att_req_destroy+0x14>
		req->destroy(req);
   14836:	4620      	mov	r0, r4
   14838:	4798      	blx	r3
	bt_att_req_free(req);
   1483a:	4620      	mov	r0, r4
}
   1483c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   14840:	f7f4 be5a 	b.w	94f8 <bt_att_req_free>

00014844 <att_handle_find_info_rsp>:
	return att_handle_rsp(att, buf->data, buf->len, 0);
   14844:	898a      	ldrh	r2, [r1, #12]
   14846:	2300      	movs	r3, #0
   14848:	6889      	ldr	r1, [r1, #8]
   1484a:	f7f4 be61 	b.w	9510 <att_handle_rsp>

0001484e <att_handle_find_type_rsp>:
   1484e:	f7ff bff9 	b.w	14844 <att_handle_find_info_rsp>

00014852 <att_handle_read_type_rsp>:
   14852:	f7ff bff7 	b.w	14844 <att_handle_find_info_rsp>

00014856 <att_handle_read_rsp>:
   14856:	f7ff bff5 	b.w	14844 <att_handle_find_info_rsp>

0001485a <att_handle_read_blob_rsp>:
   1485a:	f7ff bff3 	b.w	14844 <att_handle_find_info_rsp>

0001485e <att_handle_read_mult_rsp>:
   1485e:	f7ff bff1 	b.w	14844 <att_handle_find_info_rsp>

00014862 <att_handle_read_group_rsp>:
   14862:	f7ff bfef 	b.w	14844 <att_handle_find_info_rsp>

00014866 <att_handle_write_rsp>:
   14866:	f7ff bfed 	b.w	14844 <att_handle_find_info_rsp>

0001486a <att_handle_prepare_write_rsp>:
   1486a:	f7ff bfeb 	b.w	14844 <att_handle_find_info_rsp>

0001486e <att_handle_exec_write_rsp>:
   1486e:	f7ff bfe9 	b.w	14844 <att_handle_find_info_rsp>

00014872 <att_confirm>:
   14872:	f7ff bfe7 	b.w	14844 <att_handle_find_info_rsp>

00014876 <att_mtu_rsp>:
{
   14876:	b410      	push	{r4}
   14878:	460c      	mov	r4, r1
	if (!att) {
   1487a:	b190      	cbz	r0, 148a2 <att_mtu_rsp+0x2c>
	rsp = (void *)buf->data;
   1487c:	6889      	ldr	r1, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
   1487e:	880a      	ldrh	r2, [r1, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   14880:	2a16      	cmp	r2, #22
   14882:	d805      	bhi.n	14890 <att_mtu_rsp+0x1a>
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   14884:	2200      	movs	r2, #0
   14886:	2304      	movs	r3, #4
   14888:	4611      	mov	r1, r2
}
   1488a:	bc10      	pop	{r4}
	return att_handle_rsp(att, rsp, buf->len, 0);
   1488c:	f7f4 be40 	b.w	9510 <att_handle_rsp>
	att->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   14890:	2af7      	cmp	r2, #247	; 0xf7
   14892:	bf28      	it	cs
   14894:	22f7      	movcs	r2, #247	; 0xf7
	return att_handle_rsp(att, rsp, buf->len, 0);
   14896:	2300      	movs	r3, #0
	att->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   14898:	87c2      	strh	r2, [r0, #62]	; 0x3e
	att->chan.tx.mtu = att->chan.rx.mtu;
   1489a:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
	return att_handle_rsp(att, rsp, buf->len, 0);
   1489e:	89a2      	ldrh	r2, [r4, #12]
   148a0:	e7f3      	b.n	1488a <att_mtu_rsp+0x14>
}
   148a2:	bc10      	pop	{r4}
   148a4:	4770      	bx	lr

000148a6 <att_reset>:
{
   148a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   148a8:	4604      	mov	r4, r0
	while ((buf = k_fifo_get(&att->prep_queue, K_NO_WAIT))) {
   148aa:	f500 758a 	add.w	r5, r0, #276	; 0x114
	return z_impl_k_queue_get(queue, timeout);
   148ae:	2200      	movs	r2, #0
   148b0:	2300      	movs	r3, #0
   148b2:	4628      	mov	r0, r5
   148b4:	f7fa ffce 	bl	f854 <z_impl_k_queue_get>
   148b8:	bb20      	cbnz	r0, 14904 <att_reset+0x5e>
	while ((buf = k_fifo_get(&att->tx_queue, K_NO_WAIT))) {
   148ba:	f104 05f8 	add.w	r5, r4, #248	; 0xf8
   148be:	2200      	movs	r2, #0
   148c0:	2300      	movs	r3, #0
   148c2:	4628      	mov	r0, r5
   148c4:	f7fa ffc6 	bl	f854 <z_impl_k_queue_get>
   148c8:	b9f8      	cbnz	r0, 1490a <att_reset+0x64>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   148ca:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
   148ce:	e8d3 2fef 	ldaex	r2, [r3]
   148d2:	f042 0204 	orr.w	r2, r2, #4
   148d6:	e8c3 2fe1 	stlex	r1, r2, [r3]
   148da:	2900      	cmp	r1, #0
   148dc:	d1f7      	bne.n	148ce <att_reset+0x28>
   148de:	250a      	movs	r5, #10
		k_sem_give(&att->tx_sem);
   148e0:	f104 06e0 	add.w	r6, r4, #224	; 0xe0
	z_impl_k_sem_give(sem);
   148e4:	4630      	mov	r0, r6
   148e6:	f7fc f98b 	bl	10c00 <z_impl_k_sem_give>
	for (i = 0; i < CONFIG_BT_ATT_TX_MAX; i++) {
   148ea:	3d01      	subs	r5, #1
   148ec:	d1fa      	bne.n	148e4 <att_reset+0x3e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   148ee:	f8d4 60b8 	ldr.w	r6, [r4, #184]	; 0xb8
   148f2:	b96e      	cbnz	r6, 14910 <att_reset+0x6a>
	list->head = NULL;
   148f4:	2200      	movs	r2, #0
	if (!att->req) {
   148f6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
	list->tail = NULL;
   148fa:	e9c4 222e 	strd	r2, r2, [r4, #184]	; 0xb8
   148fe:	bb03      	cbnz	r3, 14942 <att_reset+0x9c>
}
   14900:	b003      	add	sp, #12
   14902:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   14904:	f7f8 fdf2 	bl	d4ec <net_buf_unref>
   14908:	e7d1      	b.n	148ae <att_reset+0x8>
		net_buf_unref(buf);
   1490a:	f7f8 fdef 	bl	d4ec <net_buf_unref>
   1490e:	e7d6      	b.n	148be <att_reset+0x18>
	return node->next;
   14910:	6835      	ldr	r5, [r6, #0]
   14912:	2d00      	cmp	r5, #0
   14914:	bf38      	it	cc
   14916:	2500      	movcc	r5, #0
		if (req->func) {
   14918:	6877      	ldr	r7, [r6, #4]
   1491a:	b137      	cbz	r7, 1492a <att_reset+0x84>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1491c:	69b3      	ldr	r3, [r6, #24]
   1491e:	210e      	movs	r1, #14
   14920:	9300      	str	r3, [sp, #0]
   14922:	2300      	movs	r3, #0
   14924:	461a      	mov	r2, r3
   14926:	4618      	mov	r0, r3
   14928:	47b8      	blx	r7
		att_req_destroy(req);
   1492a:	4630      	mov	r0, r6
   1492c:	f7ff ff7b 	bl	14826 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   14930:	2d00      	cmp	r5, #0
   14932:	d0df      	beq.n	148f4 <att_reset+0x4e>
   14934:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   14936:	462e      	mov	r6, r5
   14938:	2b00      	cmp	r3, #0
   1493a:	bf38      	it	cc
   1493c:	2300      	movcc	r3, #0
   1493e:	461d      	mov	r5, r3
   14940:	e7ea      	b.n	14918 <att_reset+0x72>
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
   14942:	230e      	movs	r3, #14
   14944:	4611      	mov	r1, r2
   14946:	4620      	mov	r0, r4
}
   14948:	b003      	add	sp, #12
   1494a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1494e:	f7f4 bddf 	b.w	9510 <att_handle_rsp>

00014952 <bt_att_disconnected>:
{
   14952:	b510      	push	{r4, lr}
   14954:	4604      	mov	r4, r0
	att_reset(att);
   14956:	f7ff ffa6 	bl	148a6 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   1495a:	6820      	ldr	r0, [r4, #0]
}
   1495c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_disconnected(ch->chan.conn);
   14960:	f7f6 bf4a 	b.w	b7f8 <bt_gatt_disconnected>

00014964 <gatt_ccc_changed>:
{
   14964:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   14966:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   14968:	895a      	ldrh	r2, [r3, #10]
   1496a:	428a      	cmp	r2, r1
   1496c:	d003      	beq.n	14976 <gatt_ccc_changed+0x12>
		ccc->value = value;
   1496e:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   14970:	68db      	ldr	r3, [r3, #12]
   14972:	b103      	cbz	r3, 14976 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   14974:	4718      	bx	r3
}
   14976:	4770      	bx	lr

00014978 <gatt_indicate_rsp>:
{
   14978:	b410      	push	{r4}
   1497a:	9b01      	ldr	r3, [sp, #4]
   1497c:	460a      	mov	r2, r1
	params->func(conn, params->attr, err);
   1497e:	e9d3 1401 	ldrd	r1, r4, [r3, #4]
   14982:	4623      	mov	r3, r4
}
   14984:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
   14986:	4718      	bx	r3

00014988 <gatt_mtu_rsp>:
{
   14988:	9a00      	ldr	r2, [sp, #0]
	params->func(conn, err, params);
   1498a:	6813      	ldr	r3, [r2, #0]
   1498c:	4718      	bx	r3

0001498e <gatt_write_rsp>:
{
   1498e:	9a00      	ldr	r2, [sp, #0]
	params->func(conn, err, params);
   14990:	6813      	ldr	r3, [r2, #0]
   14992:	4718      	bx	r3

00014994 <gen_hash_m>:
{
   14994:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   14996:	6807      	ldr	r7, [r0, #0]
{
   14998:	4605      	mov	r5, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1499a:	783e      	ldrb	r6, [r7, #0]
{
   1499c:	460c      	mov	r4, r1
   1499e:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   149a0:	b10e      	cbz	r6, 149a6 <gen_hash_m+0x12>
	switch (u16->val) {
   149a2:	2601      	movs	r6, #1
   149a4:	e015      	b.n	149d2 <gen_hash_m+0x3e>
   149a6:	887b      	ldrh	r3, [r7, #2]
   149a8:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   149ac:	d004      	beq.n	149b8 <gen_hash_m+0x24>
   149ae:	d813      	bhi.n	149d8 <gen_hash_m+0x44>
   149b0:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   149b4:	2b03      	cmp	r3, #3
   149b6:	d8f4      	bhi.n	149a2 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(attr->handle);
   149b8:	8a2b      	ldrh	r3, [r5, #16]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   149ba:	2202      	movs	r2, #2
   149bc:	4620      	mov	r0, r4
   149be:	f10d 010e 	add.w	r1, sp, #14
		value = sys_cpu_to_le16(attr->handle);
   149c2:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   149c6:	f7fe fb11 	bl	12fec <tc_cmac_update>
   149ca:	b9e8      	cbnz	r0, 14a08 <gen_hash_m+0x74>
			state->err = -EINVAL;
   149cc:	f06f 0315 	mvn.w	r3, #21
   149d0:	65a3      	str	r3, [r4, #88]	; 0x58
}
   149d2:	4630      	mov	r0, r6
   149d4:	b009      	add	sp, #36	; 0x24
   149d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   149d8:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   149dc:	33ff      	adds	r3, #255	; 0xff
   149de:	b29b      	uxth	r3, r3
   149e0:	2b04      	cmp	r3, #4
   149e2:	d8de      	bhi.n	149a2 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(attr->handle);
   149e4:	8a03      	ldrh	r3, [r0, #16]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   149e6:	2202      	movs	r2, #2
   149e8:	4620      	mov	r0, r4
   149ea:	f10d 010e 	add.w	r1, sp, #14
		value = sys_cpu_to_le16(attr->handle);
   149ee:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   149f2:	f7fe fafb 	bl	12fec <tc_cmac_update>
   149f6:	2800      	cmp	r0, #0
   149f8:	d0e8      	beq.n	149cc <gen_hash_m+0x38>
		value = sys_cpu_to_le16(u16->val);
   149fa:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   149fc:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   149fe:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   14a02:	f10d 010e 	add.w	r1, sp, #14
   14a06:	e017      	b.n	14a38 <gen_hash_m+0xa4>
		value = sys_cpu_to_le16(u16->val);
   14a08:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   14a0a:	2202      	movs	r2, #2
   14a0c:	4620      	mov	r0, r4
   14a0e:	f10d 010e 	add.w	r1, sp, #14
		value = sys_cpu_to_le16(u16->val);
   14a12:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   14a16:	f7fe fae9 	bl	12fec <tc_cmac_update>
   14a1a:	2800      	cmp	r0, #0
   14a1c:	d0d6      	beq.n	149cc <gen_hash_m+0x38>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   14a1e:	2000      	movs	r0, #0
   14a20:	2310      	movs	r3, #16
   14a22:	4629      	mov	r1, r5
   14a24:	eb0d 0203 	add.w	r2, sp, r3
   14a28:	686f      	ldr	r7, [r5, #4]
   14a2a:	9000      	str	r0, [sp, #0]
   14a2c:	47b8      	blx	r7
		if (len < 0) {
   14a2e:	1e02      	subs	r2, r0, #0
   14a30:	da01      	bge.n	14a36 <gen_hash_m+0xa2>
			state->err = len;
   14a32:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   14a34:	e7cd      	b.n	149d2 <gen_hash_m+0x3e>
		if (tc_cmac_update(&state->state, data, len) ==
   14a36:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   14a38:	4620      	mov	r0, r4
   14a3a:	f7fe fad7 	bl	12fec <tc_cmac_update>
   14a3e:	2800      	cmp	r0, #0
   14a40:	d1af      	bne.n	149a2 <gen_hash_m+0xe>
   14a42:	e7c3      	b.n	149cc <gen_hash_m+0x38>

00014a44 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   14a44:	2207      	movs	r2, #7
   14a46:	f7fe be74 	b.w	13732 <memcpy>

00014a4a <clear_ccc_cfg>:
{
   14a4a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   14a4c:	2500      	movs	r5, #0
{
   14a4e:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   14a50:	4669      	mov	r1, sp
   14a52:	3001      	adds	r0, #1
   14a54:	9500      	str	r5, [sp, #0]
   14a56:	f8cd 5003 	str.w	r5, [sp, #3]
   14a5a:	f7ff fff3 	bl	14a44 <bt_addr_le_copy>
	cfg->id = 0U;
   14a5e:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   14a60:	8125      	strh	r5, [r4, #8]
}
   14a62:	b003      	add	sp, #12
   14a64:	bd30      	pop	{r4, r5, pc}

00014a66 <atomic_and>:
{
   14a66:	4603      	mov	r3, r0
}
   14a68:	e8d3 0fef 	ldaex	r0, [r3]
   14a6c:	ea00 0201 	and.w	r2, r0, r1
   14a70:	e8c3 2fec 	stlex	ip, r2, [r3]
   14a74:	f1bc 0f00 	cmp.w	ip, #0
   14a78:	d1f6      	bne.n	14a68 <atomic_and+0x2>
   14a7a:	4770      	bx	lr

00014a7c <gatt_sub_remove.part.0>:
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   14a7c:	2300      	movs	r3, #0
static void gatt_sub_remove(struct bt_conn *conn, struct gatt_sub *sub,
   14a7e:	b507      	push	{r0, r1, r2, lr}
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   14a80:	3001      	adds	r0, #1
   14a82:	4669      	mov	r1, sp
   14a84:	9300      	str	r3, [sp, #0]
   14a86:	f8cd 3003 	str.w	r3, [sp, #3]
   14a8a:	f7ff ffdb 	bl	14a44 <bt_addr_le_copy>
}
   14a8e:	b003      	add	sp, #12
   14a90:	f85d fb04 	ldr.w	pc, [sp], #4

00014a94 <clear_cf_cfg>:
{
   14a94:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14a96:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   14a98:	2500      	movs	r5, #0
   14a9a:	4669      	mov	r1, sp
   14a9c:	3001      	adds	r0, #1
   14a9e:	9500      	str	r5, [sp, #0]
   14aa0:	f8cd 5003 	str.w	r5, [sp, #3]
   14aa4:	f7ff ffce 	bl	14a44 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   14aa8:	f104 0008 	add.w	r0, r4, #8
   14aac:	2201      	movs	r2, #1
   14aae:	4629      	mov	r1, r5
   14ab0:	f7fe fe6a 	bl	13788 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   14ab4:	340c      	adds	r4, #12
   14ab6:	e8d4 3fef 	ldaex	r3, [r4]
   14aba:	e8c4 5fe2 	stlex	r2, r5, [r4]
   14abe:	2a00      	cmp	r2, #0
   14ac0:	d1f9      	bne.n	14ab6 <clear_cf_cfg+0x22>
}
   14ac2:	b003      	add	sp, #12
   14ac4:	bd30      	pop	{r4, r5, pc}

00014ac6 <match_uuid>:
   14ac6:	6008      	str	r0, [r1, #0]
   14ac8:	2000      	movs	r0, #0
   14aca:	4770      	bx	lr

00014acc <ccc_find_cfg>:
{
   14acc:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   14ace:	7803      	ldrb	r3, [r0, #0]
{
   14ad0:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   14ad2:	4293      	cmp	r3, r2
   14ad4:	d001      	beq.n	14ada <ccc_find_cfg+0xe>
	return NULL;
   14ad6:	2000      	movs	r0, #0
}
   14ad8:	bd10      	pop	{r4, pc}
	return memcmp(a, b, sizeof(*a));
   14ada:	2207      	movs	r2, #7
   14adc:	3001      	adds	r0, #1
   14ade:	f7fe fe18 	bl	13712 <memcmp>
		if (id == ccc->cfg[i].id &&
   14ae2:	2800      	cmp	r0, #0
   14ae4:	d1f7      	bne.n	14ad6 <ccc_find_cfg+0xa>
			return &ccc->cfg[i];
   14ae6:	4620      	mov	r0, r4
   14ae8:	e7f6      	b.n	14ad8 <ccc_find_cfg+0xc>

00014aea <find_ccc_cfg>:
{
   14aea:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14aec:	460c      	mov	r4, r1
   14aee:	1c4d      	adds	r5, r1, #1
		if (conn) {
   14af0:	b148      	cbz	r0, 14b06 <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   14af2:	462a      	mov	r2, r5
   14af4:	7809      	ldrb	r1, [r1, #0]
   14af6:	f7ff f996 	bl	13e26 <bt_conn_is_peer_addr_le>
   14afa:	2800      	cmp	r0, #0
	return NULL;
   14afc:	bf08      	it	eq
   14afe:	2400      	moveq	r4, #0
}
   14b00:	4620      	mov	r0, r4
   14b02:	b003      	add	sp, #12
   14b04:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   14b06:	9000      	str	r0, [sp, #0]
   14b08:	2207      	movs	r2, #7
   14b0a:	f8cd 0003 	str.w	r0, [sp, #3]
   14b0e:	4669      	mov	r1, sp
   14b10:	4628      	mov	r0, r5
   14b12:	f7fe fdfe 	bl	13712 <memcmp>
   14b16:	2800      	cmp	r0, #0
	return NULL;
   14b18:	bf18      	it	ne
   14b1a:	2400      	movne	r4, #0
   14b1c:	e7f0      	b.n	14b00 <find_ccc_cfg+0x16>

00014b1e <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   14b1e:	2301      	movs	r3, #1
   14b20:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14b22:	e8d0 2fef 	ldaex	r2, [r0]
   14b26:	431a      	orrs	r2, r3
   14b28:	e8c0 2fe1 	stlex	r1, r2, [r0]
   14b2c:	2900      	cmp	r1, #0
   14b2e:	d1f8      	bne.n	14b22 <atomic_set_bit+0x4>
}
   14b30:	4770      	bx	lr

00014b32 <sc_restore_rsp>:
{
   14b32:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   14b34:	f7f5 fa2e 	bl	9f94 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   14b38:	b140      	cbz	r0, 14b4c <sc_restore_rsp+0x1a>
   14b3a:	7a03      	ldrb	r3, [r0, #8]
   14b3c:	07db      	lsls	r3, r3, #31
   14b3e:	d505      	bpl.n	14b4c <sc_restore_rsp+0x1a>
}
   14b40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   14b44:	2100      	movs	r1, #0
   14b46:	300c      	adds	r0, #12
   14b48:	f7ff bfe9 	b.w	14b1e <atomic_set_bit>
}
   14b4c:	bd08      	pop	{r3, pc}

00014b4e <read_appearance>:
{
   14b4e:	b513      	push	{r0, r1, r4, lr}
   14b50:	4610      	mov	r0, r2
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
   14b52:	2200      	movs	r2, #0
{
   14b54:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
   14b58:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   14b5c:	2902      	cmp	r1, #2
   14b5e:	d80d      	bhi.n	14b7c <read_appearance+0x2e>
	len = MIN(buf_len, value_len - offset);
   14b60:	f1c1 0402 	rsb	r4, r1, #2
   14b64:	429c      	cmp	r4, r3
   14b66:	bfa8      	it	ge
   14b68:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
   14b6a:	f10d 0306 	add.w	r3, sp, #6
   14b6e:	4622      	mov	r2, r4
   14b70:	4419      	add	r1, r3
   14b72:	f7fe fdde 	bl	13732 <memcpy>
}
   14b76:	4620      	mov	r0, r4
   14b78:	b002      	add	sp, #8
   14b7a:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   14b7c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   14b80:	e7f9      	b.n	14b76 <read_appearance+0x28>

00014b82 <read_name>:
{
   14b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14b86:	4698      	mov	r8, r3
   14b88:	4615      	mov	r5, r2
   14b8a:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	const char *name = bt_get_name();
   14b8e:	f7f1 fd2d 	bl	65ec <bt_get_name>
   14b92:	4607      	mov	r7, r0
				 strlen(name));
   14b94:	f7fe fd9b 	bl	136ce <strlen>
	if (offset > value_len) {
   14b98:	b283      	uxth	r3, r0
   14b9a:	42b3      	cmp	r3, r6
   14b9c:	d30c      	bcc.n	14bb8 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   14b9e:	1b9c      	subs	r4, r3, r6
   14ba0:	4544      	cmp	r4, r8
   14ba2:	bfa8      	it	ge
   14ba4:	4644      	movge	r4, r8
   14ba6:	b2a4      	uxth	r4, r4
	memcpy(buf, (u8_t *)value + offset, len);
   14ba8:	4622      	mov	r2, r4
   14baa:	4628      	mov	r0, r5
   14bac:	19b9      	adds	r1, r7, r6
   14bae:	f7fe fdc0 	bl	13732 <memcpy>
}
   14bb2:	4620      	mov	r0, r4
   14bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   14bb8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   14bbc:	e7f9      	b.n	14bb2 <read_name+0x30>

00014bbe <cf_read>:
{
   14bbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14bc0:	461f      	mov	r7, r3
	u8_t data[1] = {};
   14bc2:	2300      	movs	r3, #0
{
   14bc4:	4615      	mov	r5, r2
   14bc6:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	u8_t data[1] = {};
   14bca:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg = find_cf_cfg(conn);
   14bce:	f7f5 f9e1 	bl	9f94 <find_cf_cfg>
	if (cfg) {
   14bd2:	b128      	cbz	r0, 14be0 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   14bd4:	f100 0108 	add.w	r1, r0, #8
   14bd8:	2201      	movs	r2, #1
   14bda:	a801      	add	r0, sp, #4
   14bdc:	f7fe fda9 	bl	13732 <memcpy>
	if (offset > value_len) {
   14be0:	2e01      	cmp	r6, #1
   14be2:	d80d      	bhi.n	14c00 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   14be4:	f1c6 0401 	rsb	r4, r6, #1
   14be8:	42bc      	cmp	r4, r7
   14bea:	bfa8      	it	ge
   14bec:	463c      	movge	r4, r7
	memcpy(buf, (u8_t *)value + offset, len);
   14bee:	ab01      	add	r3, sp, #4
   14bf0:	4622      	mov	r2, r4
   14bf2:	4628      	mov	r0, r5
   14bf4:	1999      	adds	r1, r3, r6
   14bf6:	f7fe fd9c 	bl	13732 <memcpy>
}
   14bfa:	4620      	mov	r0, r4
   14bfc:	b003      	add	sp, #12
   14bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   14c00:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   14c04:	e7f9      	b.n	14bfa <cf_read+0x3c>

00014c06 <bt_gatt_attr_read_ccc>:
{
   14c06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   14c08:	68c9      	ldr	r1, [r1, #12]
{
   14c0a:	4615      	mov	r5, r2
   14c0c:	461f      	mov	r7, r3
   14c0e:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	cfg = find_ccc_cfg(conn, ccc);
   14c12:	f7ff ff6a 	bl	14aea <find_ccc_cfg>
	if (cfg) {
   14c16:	b100      	cbz	r0, 14c1a <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   14c18:	8900      	ldrh	r0, [r0, #8]
	if (offset > value_len) {
   14c1a:	2e02      	cmp	r6, #2
   14c1c:	f8ad 0006 	strh.w	r0, [sp, #6]
   14c20:	d80e      	bhi.n	14c40 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   14c22:	f1c6 0402 	rsb	r4, r6, #2
   14c26:	42bc      	cmp	r4, r7
   14c28:	bfa8      	it	ge
   14c2a:	463c      	movge	r4, r7
	memcpy(buf, (u8_t *)value + offset, len);
   14c2c:	f10d 0306 	add.w	r3, sp, #6
   14c30:	4622      	mov	r2, r4
   14c32:	4628      	mov	r0, r5
   14c34:	1999      	adds	r1, r3, r6
   14c36:	f7fe fd7c 	bl	13732 <memcpy>
}
   14c3a:	4620      	mov	r0, r4
   14c3c:	b003      	add	sp, #12
   14c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   14c40:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   14c44:	e7f9      	b.n	14c3a <bt_gatt_attr_read_ccc+0x34>

00014c46 <bt_gatt_attr_read_service>:
{
   14c46:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   14c48:	68c9      	ldr	r1, [r1, #12]
{
   14c4a:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   14c4c:	780b      	ldrb	r3, [r1, #0]
{
   14c4e:	4610      	mov	r0, r2
   14c50:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   14c54:	b993      	cbnz	r3, 14c7c <bt_gatt_attr_read_service+0x36>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   14c56:	884b      	ldrh	r3, [r1, #2]
	if (offset > value_len) {
   14c58:	2d02      	cmp	r5, #2
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   14c5a:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   14c5e:	d819      	bhi.n	14c94 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   14c60:	f1c5 0202 	rsb	r2, r5, #2
   14c64:	4294      	cmp	r4, r2
   14c66:	bfa8      	it	ge
   14c68:	4614      	movge	r4, r2
	memcpy(buf, (u8_t *)value + offset, len);
   14c6a:	4622      	mov	r2, r4
   14c6c:	f10d 0306 	add.w	r3, sp, #6
   14c70:	1959      	adds	r1, r3, r5
   14c72:	f7fe fd5e 	bl	13732 <memcpy>
}
   14c76:	4620      	mov	r0, r4
   14c78:	b003      	add	sp, #12
   14c7a:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   14c7c:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   14c7e:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   14c82:	d807      	bhi.n	14c94 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   14c84:	f1c5 0210 	rsb	r2, r5, #16
   14c88:	4294      	cmp	r4, r2
   14c8a:	bfa8      	it	ge
   14c8c:	4614      	movge	r4, r2
	memcpy(buf, (u8_t *)value + offset, len);
   14c8e:	4429      	add	r1, r5
   14c90:	4622      	mov	r2, r4
   14c92:	e7ee      	b.n	14c72 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   14c94:	f06f 0406 	mvn.w	r4, #6
   14c98:	e7ed      	b.n	14c76 <bt_gatt_attr_read_service+0x30>

00014c9a <gatt_sub_remove>:
{
   14c9a:	b538      	push	{r3, r4, r5, lr}
   14c9c:	460c      	mov	r4, r1
	if (params) {
   14c9e:	4619      	mov	r1, r3
   14ca0:	b16b      	cbz	r3, 14cbe <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   14ca2:	f103 0510 	add.w	r5, r3, #16
Z_GENLIST_REMOVE(slist, snode)
   14ca6:	691b      	ldr	r3, [r3, #16]
   14ca8:	b982      	cbnz	r2, 14ccc <gatt_sub_remove+0x32>
   14caa:	68e2      	ldr	r2, [r4, #12]
	list->head = node;
   14cac:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   14cae:	4295      	cmp	r5, r2
   14cb0:	d100      	bne.n	14cb4 <gatt_sub_remove+0x1a>
	list->tail = node;
   14cb2:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   14cb4:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   14cb6:	680d      	ldr	r5, [r1, #0]
   14cb8:	461a      	mov	r2, r3
   14cba:	610b      	str	r3, [r1, #16]
   14cbc:	47a8      	blx	r5
	if (sys_slist_is_empty(&sub->list)) {
   14cbe:	68a3      	ldr	r3, [r4, #8]
   14cc0:	b953      	cbnz	r3, 14cd8 <gatt_sub_remove+0x3e>
   14cc2:	4620      	mov	r0, r4
}
   14cc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   14cc8:	f7ff bed8 	b.w	14a7c <gatt_sub_remove.part.0>
   14ccc:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   14cce:	68e3      	ldr	r3, [r4, #12]
   14cd0:	429d      	cmp	r5, r3
	list->tail = node;
   14cd2:	bf08      	it	eq
   14cd4:	60e2      	streq	r2, [r4, #12]
}
   14cd6:	e7ed      	b.n	14cb4 <gatt_sub_remove+0x1a>
   14cd8:	bd38      	pop	{r3, r4, r5, pc}

00014cda <gatt_write_ccc_rsp>:
{
   14cda:	b570      	push	{r4, r5, r6, lr}
   14cdc:	460e      	mov	r6, r1
   14cde:	9c04      	ldr	r4, [sp, #16]
   14ce0:	4605      	mov	r5, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14ce2:	f06f 0104 	mvn.w	r1, #4
   14ce6:	f104 000c 	add.w	r0, r4, #12
   14cea:	f7ff febc 	bl	14a66 <atomic_and>
	if (err) {
   14cee:	b1b6      	cbz	r6, 14d1e <gatt_write_ccc_rsp+0x44>
		sub = gatt_sub_find(conn);
   14cf0:	2100      	movs	r1, #0
   14cf2:	4628      	mov	r0, r5
   14cf4:	f7f4 ffc6 	bl	9c84 <gatt_sub_find_free>
		if (!sub) {
   14cf8:	4601      	mov	r1, r0
   14cfa:	b1d0      	cbz	r0, 14d32 <gatt_write_ccc_rsp+0x58>
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
   14cfc:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   14cfe:	b1c3      	cbz	r3, 14d32 <gatt_write_ccc_rsp+0x58>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   14d00:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   14d02:	f104 0010 	add.w	r0, r4, #16
   14d06:	4283      	cmp	r3, r0
   14d08:	d105      	bne.n	14d16 <gatt_write_ccc_rsp+0x3c>
				gatt_sub_remove(conn, sub, tmp, params);
   14d0a:	4623      	mov	r3, r4
   14d0c:	4628      	mov	r0, r5
}
   14d0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				gatt_sub_remove(conn, sub, tmp, params);
   14d12:	f7ff bfc2 	b.w	14c9a <gatt_sub_remove>
Z_GENLIST_PEEK_NEXT(slist, snode)
   14d16:	b162      	cbz	r2, 14d32 <gatt_write_ccc_rsp+0x58>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   14d18:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   14d1a:	6812      	ldr	r2, [r2, #0]
   14d1c:	e7f3      	b.n	14d06 <gatt_write_ccc_rsp+0x2c>
	} else if (!params->value) {
   14d1e:	8923      	ldrh	r3, [r4, #8]
   14d20:	b93b      	cbnz	r3, 14d32 <gatt_write_ccc_rsp+0x58>
		params->notify(conn, params, NULL, 0);
   14d22:	6826      	ldr	r6, [r4, #0]
   14d24:	4621      	mov	r1, r4
   14d26:	4628      	mov	r0, r5
   14d28:	46b4      	mov	ip, r6
}
   14d2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		params->notify(conn, params, NULL, 0);
   14d2e:	461a      	mov	r2, r3
   14d30:	4760      	bx	ip
}
   14d32:	bd70      	pop	{r4, r5, r6, pc}

00014d34 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   14d34:	2a02      	cmp	r2, #2
{
   14d36:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   14d38:	d108      	bne.n	14d4c <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   14d3a:	2300      	movs	r3, #0
   14d3c:	f100 017c 	add.w	r1, r0, #124	; 0x7c
   14d40:	461a      	mov	r2, r3
   14d42:	7a00      	ldrb	r0, [r0, #8]
   14d44:	f7f4 fffa 	bl	9d3c <sc_save>
}
   14d48:	2002      	movs	r0, #2
   14d4a:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   14d4c:	f7f5 fa78 	bl	a240 <sc_clear>
   14d50:	e7fa      	b.n	14d48 <sc_ccc_cfg_write+0x14>

00014d52 <bt_gatt_attr_read_chrc>:
{
   14d52:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   14d54:	68cf      	ldr	r7, [r1, #12]
{
   14d56:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   14d58:	79bb      	ldrb	r3, [r7, #6]
{
   14d5a:	b087      	sub	sp, #28
   14d5c:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   14d5e:	f88d 3004 	strb.w	r3, [sp, #4]
{
   14d62:	4615      	mov	r5, r2
   14d64:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   14d68:	f7f5 fb32 	bl	a3d0 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   14d6c:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   14d6e:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   14d72:	780b      	ldrb	r3, [r1, #0]
   14d74:	b99b      	cbnz	r3, 14d9e <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   14d76:	884b      	ldrh	r3, [r1, #2]
		value_len += 2U;
   14d78:	2105      	movs	r1, #5
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   14d7a:	f8ad 3007 	strh.w	r3, [sp, #7]
	if (offset > value_len) {
   14d7e:	42b1      	cmp	r1, r6
   14d80:	d315      	bcc.n	14dae <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   14d82:	1b89      	subs	r1, r1, r6
   14d84:	42a1      	cmp	r1, r4
   14d86:	bfa8      	it	ge
   14d88:	4621      	movge	r1, r4
	memcpy(buf, (u8_t *)value + offset, len);
   14d8a:	ab01      	add	r3, sp, #4
   14d8c:	b28c      	uxth	r4, r1
   14d8e:	4622      	mov	r2, r4
   14d90:	4628      	mov	r0, r5
   14d92:	1999      	adds	r1, r3, r6
   14d94:	f7fe fccd 	bl	13732 <memcpy>
}
   14d98:	4620      	mov	r0, r4
   14d9a:	b007      	add	sp, #28
   14d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   14d9e:	3101      	adds	r1, #1
   14da0:	2210      	movs	r2, #16
   14da2:	f10d 0007 	add.w	r0, sp, #7
   14da6:	f7fe fcc4 	bl	13732 <memcpy>
		value_len += 16U;
   14daa:	2113      	movs	r1, #19
   14dac:	e7e7      	b.n	14d7e <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   14dae:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   14db2:	e7f1      	b.n	14d98 <bt_gatt_attr_read_chrc+0x46>

00014db4 <bt_gatt_foreach_attr>:
{
   14db4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   14db6:	e9cd 2301 	strd	r2, r3, [sp, #4]
   14dba:	2300      	movs	r3, #0
   14dbc:	461a      	mov	r2, r3
   14dbe:	9300      	str	r3, [sp, #0]
   14dc0:	f7f5 fb1e 	bl	a400 <bt_gatt_foreach_attr_type>
}
   14dc4:	b005      	add	sp, #20
   14dc6:	f85d fb04 	ldr.w	pc, [sp], #4

00014dca <db_hash_process>:
	db_hash_gen(true);
   14dca:	2001      	movs	r0, #1
   14dcc:	f7f5 bb92 	b.w	a4f4 <db_hash_gen>

00014dd0 <bt_gatt_check_perm>:
{
   14dd0:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   14dd2:	07d4      	lsls	r4, r2, #31
{
   14dd4:	4605      	mov	r5, r0
   14dd6:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   14dd8:	d504      	bpl.n	14de4 <bt_gatt_check_perm+0x14>
   14dda:	f010 0f15 	tst.w	r0, #21
   14dde:	d01e      	beq.n	14e1e <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   14de0:	684b      	ldr	r3, [r1, #4]
   14de2:	b1e3      	cbz	r3, 14e1e <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   14de4:	0793      	lsls	r3, r2, #30
   14de6:	d504      	bpl.n	14df2 <bt_gatt_check_perm+0x22>
   14de8:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   14dec:	d019      	beq.n	14e22 <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   14dee:	688b      	ldr	r3, [r1, #8]
   14df0:	b1bb      	cbz	r3, 14e22 <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   14df2:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   14df6:	f014 0f30 	tst.w	r4, #48	; 0x30
   14dfa:	d103      	bne.n	14e04 <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   14dfc:	f014 000c 	ands.w	r0, r4, #12
   14e00:	d107      	bne.n	14e12 <bt_gatt_check_perm+0x42>
}
   14e02:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   14e04:	4628      	mov	r0, r5
   14e06:	f7ff f80c 	bl	13e22 <bt_conn_get_security>
   14e0a:	2802      	cmp	r0, #2
   14e0c:	d8f6      	bhi.n	14dfc <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   14e0e:	2005      	movs	r0, #5
   14e10:	e7f7      	b.n	14e02 <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   14e12:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   14e14:	2b00      	cmp	r3, #0
   14e16:	bf14      	ite	ne
   14e18:	2000      	movne	r0, #0
   14e1a:	200f      	moveq	r0, #15
   14e1c:	e7f1      	b.n	14e02 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   14e1e:	2002      	movs	r0, #2
   14e20:	e7ef      	b.n	14e02 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   14e22:	2003      	movs	r0, #3
   14e24:	e7ed      	b.n	14e02 <bt_gatt_check_perm+0x32>

00014e26 <gatt_discover_next>:
{
   14e26:	b570      	push	{r4, r5, r6, lr}
   14e28:	4605      	mov	r5, r0
   14e2a:	4614      	mov	r4, r2
	if (!last_handle)
   14e2c:	b929      	cbnz	r1, 14e3a <gatt_discover_next+0x14>
	if (!bt_gatt_discover(conn, params)) {
   14e2e:	4621      	mov	r1, r4
   14e30:	4628      	mov	r0, r5
   14e32:	f7f5 fe1f 	bl	aa74 <bt_gatt_discover>
   14e36:	b928      	cbnz	r0, 14e44 <gatt_discover_next+0x1e>
}
   14e38:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   14e3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14e3e:	4291      	cmp	r1, r2
   14e40:	d107      	bne.n	14e52 <gatt_discover_next+0x2c>
	params->start_handle = last_handle;
   14e42:	8121      	strh	r1, [r4, #8]
	params->func(conn, NULL, params);
   14e44:	4622      	mov	r2, r4
   14e46:	4628      	mov	r0, r5
   14e48:	6863      	ldr	r3, [r4, #4]
   14e4a:	2100      	movs	r1, #0
}
   14e4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   14e50:	4718      	bx	r3
	if (params->start_handle > params->end_handle) {
   14e52:	89e2      	ldrh	r2, [r4, #14]
		params->start_handle++;
   14e54:	1c4b      	adds	r3, r1, #1
   14e56:	b29b      	uxth	r3, r3
	if (params->start_handle > params->end_handle) {
   14e58:	429a      	cmp	r2, r3
		params->start_handle++;
   14e5a:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
   14e5c:	d2e7      	bcs.n	14e2e <gatt_discover_next+0x8>
   14e5e:	e7f1      	b.n	14e44 <gatt_discover_next+0x1e>

00014e60 <gatt_find_type_rsp>:
{
   14e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14e64:	b088      	sub	sp, #32
   14e66:	4607      	mov	r7, r0
   14e68:	4690      	mov	r8, r2
   14e6a:	461d      	mov	r5, r3
	if (err) {
   14e6c:	460c      	mov	r4, r1
{
   14e6e:	9e10      	ldr	r6, [sp, #64]	; 0x40
	if (err) {
   14e70:	2900      	cmp	r1, #0
   14e72:	d13a      	bne.n	14eea <gatt_find_type_rsp+0x8a>
	u16_t end_handle = 0U, start_handle;
   14e74:	4689      	mov	r9, r1
		struct bt_gatt_attr attr = {};
   14e76:	468a      	mov	sl, r1
	for (i = 0U; length >= sizeof(rsp->list[i]);
   14e78:	2d03      	cmp	r5, #3
   14e7a:	d809      	bhi.n	14e90 <gatt_find_type_rsp+0x30>
	if (length > 0) {
   14e7c:	2d00      	cmp	r5, #0
   14e7e:	d134      	bne.n	14eea <gatt_find_type_rsp+0x8a>
	gatt_discover_next(conn, end_handle, params);
   14e80:	4632      	mov	r2, r6
   14e82:	4649      	mov	r1, r9
   14e84:	4638      	mov	r0, r7
   14e86:	f7ff ffce 	bl	14e26 <gatt_discover_next>
}
   14e8a:	b008      	add	sp, #32
   14e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		struct bt_gatt_attr attr = {};
   14e90:	2210      	movs	r2, #16
   14e92:	2100      	movs	r1, #0
   14e94:	eb0d 0002 	add.w	r0, sp, r2
   14e98:	f7fe fc76 	bl	13788 <memset>
		start_handle = sys_le16_to_cpu(rsp->list[i].start_handle);
   14e9c:	b2e3      	uxtb	r3, r4
   14e9e:	f838 2023 	ldrh.w	r2, [r8, r3, lsl #2]
		end_handle = sys_le16_to_cpu(rsp->list[i].end_handle);
   14ea2:	eb08 0183 	add.w	r1, r8, r3, lsl #2
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   14ea6:	7c33      	ldrb	r3, [r6, #16]
		end_handle = sys_le16_to_cpu(rsp->list[i].end_handle);
   14ea8:	f8b1 9002 	ldrh.w	r9, [r1, #2]
			uuid_svc.val = BT_UUID_16(BT_UUID_GATT_SECONDARY)->val;
   14eac:	2b00      	cmp	r3, #0
   14eae:	f642 0301 	movw	r3, #10241	; 0x2801
   14eb2:	bf08      	it	eq
   14eb4:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
   14eb8:	f8ad 3002 	strh.w	r3, [sp, #2]
		value.uuid = params->uuid;
   14ebc:	6833      	ldr	r3, [r6, #0]
		attr.handle = start_handle;
   14ebe:	f8ad 201c 	strh.w	r2, [sp, #28]
		value.uuid = params->uuid;
   14ec2:	9301      	str	r3, [sp, #4]
		attr.user_data = &value;
   14ec4:	ab01      	add	r3, sp, #4
   14ec6:	9306      	str	r3, [sp, #24]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14ec8:	4632      	mov	r2, r6
   14eca:	4638      	mov	r0, r7
   14ecc:	6873      	ldr	r3, [r6, #4]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   14ece:	f88d a000 	strb.w	sl, [sp]
		value.end_handle = end_handle;
   14ed2:	f8ad 9008 	strh.w	r9, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
   14ed6:	f8cd d00c 	str.w	sp, [sp, #12]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14eda:	a903      	add	r1, sp, #12
   14edc:	4798      	blx	r3
   14ede:	3401      	adds	r4, #1
   14ee0:	2800      	cmp	r0, #0
   14ee2:	d0d2      	beq.n	14e8a <gatt_find_type_rsp+0x2a>
	     i++, length -=  sizeof(rsp->list[i])) {
   14ee4:	3d04      	subs	r5, #4
   14ee6:	b2ad      	uxth	r5, r5
   14ee8:	e7c6      	b.n	14e78 <gatt_find_type_rsp+0x18>
	params->func(conn, NULL, params);
   14eea:	4632      	mov	r2, r6
   14eec:	2100      	movs	r1, #0
   14eee:	4638      	mov	r0, r7
   14ef0:	6873      	ldr	r3, [r6, #4]
   14ef2:	4798      	blx	r3
   14ef4:	e7c9      	b.n	14e8a <gatt_find_type_rsp+0x2a>

00014ef6 <bt_gatt_notification>:
{
   14ef6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14efa:	4688      	mov	r8, r1
	sub = gatt_sub_find(conn);
   14efc:	2100      	movs	r1, #0
{
   14efe:	4607      	mov	r7, r0
   14f00:	4691      	mov	r9, r2
   14f02:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   14f04:	f7f4 febe 	bl	9c84 <gatt_sub_find_free>
	if (!sub) {
   14f08:	b1f8      	cbz	r0, 14f4a <bt_gatt_notification+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   14f0a:	6883      	ldr	r3, [r0, #8]
   14f0c:	b1eb      	cbz	r3, 14f4a <bt_gatt_notification+0x54>
   14f0e:	f1b3 0610 	subs.w	r6, r3, #16
   14f12:	d01a      	beq.n	14f4a <bt_gatt_notification+0x54>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   14f14:	681c      	ldr	r4, [r3, #0]
   14f16:	b104      	cbz	r4, 14f1a <bt_gatt_notification+0x24>
   14f18:	3c10      	subs	r4, #16
		if (handle != params->value_handle) {
   14f1a:	88b3      	ldrh	r3, [r6, #4]
   14f1c:	4543      	cmp	r3, r8
   14f1e:	d10a      	bne.n	14f36 <bt_gatt_notification+0x40>
		if (params->notify(conn, params, data, length) ==
   14f20:	4653      	mov	r3, sl
   14f22:	464a      	mov	r2, r9
   14f24:	4631      	mov	r1, r6
   14f26:	4638      	mov	r0, r7
   14f28:	6835      	ldr	r5, [r6, #0]
   14f2a:	47a8      	blx	r5
   14f2c:	b918      	cbnz	r0, 14f36 <bt_gatt_notification+0x40>
			bt_gatt_unsubscribe(conn, params);
   14f2e:	4631      	mov	r1, r6
   14f30:	4638      	mov	r0, r7
   14f32:	f7f6 faed 	bl	b510 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   14f36:	b144      	cbz	r4, 14f4a <bt_gatt_notification+0x54>
Z_GENLIST_PEEK_NEXT(slist, snode)
   14f38:	f114 0510 	adds.w	r5, r4, #16
   14f3c:	d002      	beq.n	14f44 <bt_gatt_notification+0x4e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   14f3e:	6925      	ldr	r5, [r4, #16]
   14f40:	b105      	cbz	r5, 14f44 <bt_gatt_notification+0x4e>
   14f42:	3d10      	subs	r5, #16
{
   14f44:	4626      	mov	r6, r4
   14f46:	462c      	mov	r4, r5
   14f48:	e7e7      	b.n	14f1a <bt_gatt_notification+0x24>
}
   14f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00014f4e <bt_gatt_change_aware>:
{
   14f4e:	b570      	push	{r4, r5, r6, lr}
   14f50:	460d      	mov	r5, r1
	cfg = find_cf_cfg(conn);
   14f52:	f7f5 f81f 	bl	9f94 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   14f56:	b910      	cbnz	r0, 14f5e <bt_gatt_change_aware+0x10>
		return true;
   14f58:	2501      	movs	r5, #1
}
   14f5a:	4628      	mov	r0, r5
   14f5c:	bd70      	pop	{r4, r5, r6, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   14f5e:	7a03      	ldrb	r3, [r0, #8]
   14f60:	07da      	lsls	r2, r3, #31
   14f62:	d5f9      	bpl.n	14f58 <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   14f64:	f100 040c 	add.w	r4, r0, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14f68:	e8d4 1faf 	lda	r1, [r4]
   14f6c:	f011 0601 	ands.w	r6, r1, #1
   14f70:	d1f2      	bne.n	14f58 <bt_gatt_change_aware+0xa>
	if (!req) {
   14f72:	2d00      	cmp	r5, #0
   14f74:	d0f1      	beq.n	14f5a <bt_gatt_change_aware+0xc>
   14f76:	e8d4 3faf 	lda	r3, [r4]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   14f7a:	f3c3 0540 	ubfx	r5, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   14f7e:	079b      	lsls	r3, r3, #30
   14f80:	d509      	bpl.n	14f96 <bt_gatt_change_aware+0x48>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14f82:	f06f 0102 	mvn.w	r1, #2
   14f86:	4620      	mov	r0, r4
   14f88:	f7ff fd6d 	bl	14a66 <atomic_and>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   14f8c:	4631      	mov	r1, r6
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   14f8e:	4620      	mov	r0, r4
   14f90:	f7ff fdc5 	bl	14b1e <atomic_set_bit>
	return false;
   14f94:	e7e1      	b.n	14f5a <bt_gatt_change_aware+0xc>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   14f96:	2101      	movs	r1, #1
   14f98:	e7f9      	b.n	14f8e <bt_gatt_change_aware+0x40>

00014f9a <smp_pairing_req>:
}
   14f9a:	2007      	movs	r0, #7
   14f9c:	4770      	bx	lr

00014f9e <bt_smp_aes_cmac>:
{
   14f9e:	b570      	push	{r4, r5, r6, lr}
   14fa0:	b0c2      	sub	sp, #264	; 0x108
   14fa2:	460d      	mov	r5, r1
   14fa4:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   14fa6:	4601      	mov	r1, r0
   14fa8:	aa16      	add	r2, sp, #88	; 0x58
   14faa:	4668      	mov	r0, sp
{
   14fac:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   14fae:	f7fd fff2 	bl	12f96 <tc_cmac_setup>
   14fb2:	b150      	cbz	r0, 14fca <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   14fb4:	4632      	mov	r2, r6
   14fb6:	4629      	mov	r1, r5
   14fb8:	4668      	mov	r0, sp
   14fba:	f7fe f817 	bl	12fec <tc_cmac_update>
   14fbe:	b120      	cbz	r0, 14fca <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   14fc0:	4669      	mov	r1, sp
   14fc2:	4620      	mov	r0, r4
   14fc4:	f7fe f87e 	bl	130c4 <tc_cmac_final>
   14fc8:	b918      	cbnz	r0, 14fd2 <bt_smp_aes_cmac+0x34>
		return -EIO;
   14fca:	f06f 0004 	mvn.w	r0, #4
}
   14fce:	b042      	add	sp, #264	; 0x108
   14fd0:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   14fd2:	2000      	movs	r0, #0
   14fd4:	e7fb      	b.n	14fce <bt_smp_aes_cmac+0x30>

00014fd6 <bt_smp_disconnected>:
{
   14fd6:	b538      	push	{r3, r4, r5, lr}
	struct bt_keys *keys = chan->conn->le.keys;
   14fd8:	6803      	ldr	r3, [r0, #0]
{
   14fda:	4604      	mov	r4, r0
	struct bt_keys *keys = chan->conn->le.keys;
   14fdc:	f8d3 50a8 	ldr.w	r5, [r3, #168]	; 0xa8
	k_delayed_work_cancel(&smp->work);
   14fe0:	f500 70ce 	add.w	r0, r0, #412	; 0x19c
   14fe4:	f7fc f8fa 	bl	111dc <k_delayed_work_cancel>
	if (keys) {
   14fe8:	b13d      	cbz	r5, 14ffa <bt_smp_disconnected+0x24>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   14fea:	89eb      	ldrh	r3, [r5, #14]
   14fec:	b113      	cbz	r3, 14ff4 <bt_smp_disconnected+0x1e>
   14fee:	7b6b      	ldrb	r3, [r5, #13]
   14ff0:	079b      	lsls	r3, r3, #30
   14ff2:	d502      	bpl.n	14ffa <bt_smp_disconnected+0x24>
			bt_keys_clear(keys);
   14ff4:	4628      	mov	r0, r5
   14ff6:	f7f8 f815 	bl	d024 <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   14ffa:	4620      	mov	r0, r4
}
   14ffc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	(void)memset(smp, 0, sizeof(*smp));
   15000:	f44f 72de 	mov.w	r2, #444	; 0x1bc
   15004:	2100      	movs	r1, #0
   15006:	f7fe bbbf 	b.w	13788 <memset>

0001500a <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   1500a:	b510      	push	{r4, lr}
   1500c:	1e43      	subs	r3, r0, #1
   1500e:	f100 0210 	add.w	r2, r0, #16
   15012:	3007      	adds	r0, #7
		u8_t tmp = ((u8_t *)buf)[i];
   15014:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
   15018:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   1501c:	4283      	cmp	r3, r0
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
   1501e:	701c      	strb	r4, [r3, #0]
		((u8_t *)buf)[length - 1 - i] = tmp;
   15020:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   15022:	d1f7      	bne.n	15014 <sys_mem_swap.constprop.0+0xa>
	}
}
   15024:	bd10      	pop	{r4, pc}

00015026 <smp_f6>:
{
   15026:	b5f0      	push	{r4, r5, r6, r7, lr}
   15028:	4616      	mov	r6, r2
   1502a:	461c      	mov	r4, r3
   1502c:	4605      	mov	r5, r0
   1502e:	b097      	sub	sp, #92	; 0x5c
	sys_memcpy_swap(m, n1, 16);
   15030:	2210      	movs	r2, #16
   15032:	a805      	add	r0, sp, #20
{
   15034:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   15036:	f7f6 fca5 	bl	b984 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   1503a:	2210      	movs	r2, #16
   1503c:	4631      	mov	r1, r6
   1503e:	a809      	add	r0, sp, #36	; 0x24
   15040:	f7f6 fca0 	bl	b984 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   15044:	4621      	mov	r1, r4
   15046:	2210      	movs	r2, #16
   15048:	a80d      	add	r0, sp, #52	; 0x34
   1504a:	f7f6 fc9b 	bl	b984 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   1504e:	2203      	movs	r2, #3
   15050:	991c      	ldr	r1, [sp, #112]	; 0x70
   15052:	a811      	add	r0, sp, #68	; 0x44
   15054:	f7f6 fc96 	bl	b984 <sys_memcpy_swap>
	m[51] = a1->type;
   15058:	9c1d      	ldr	r4, [sp, #116]	; 0x74
	memcpy(m + 52, a1->a.val, 6);
   1505a:	2206      	movs	r2, #6
	m[51] = a1->type;
   1505c:	f814 3b01 	ldrb.w	r3, [r4], #1
	memcpy(m + 52, a1->a.val, 6);
   15060:	a812      	add	r0, sp, #72	; 0x48
   15062:	4621      	mov	r1, r4
	m[51] = a1->type;
   15064:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   15068:	f7fe fb63 	bl	13732 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   1506c:	4621      	mov	r1, r4
   1506e:	2206      	movs	r2, #6
   15070:	a812      	add	r0, sp, #72	; 0x48
   15072:	f7f6 fc87 	bl	b984 <sys_memcpy_swap>
	m[58] = a2->type;
   15076:	9c1e      	ldr	r4, [sp, #120]	; 0x78
	memcpy(m + 59, a2->a.val, 6);
   15078:	2206      	movs	r2, #6
	m[58] = a2->type;
   1507a:	f814 3b01 	ldrb.w	r3, [r4], #1
	memcpy(m + 59, a2->a.val, 6);
   1507e:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   15082:	4621      	mov	r1, r4
	m[58] = a2->type;
   15084:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   15088:	f7fe fb53 	bl	13732 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   1508c:	4621      	mov	r1, r4
   1508e:	2206      	movs	r2, #6
   15090:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   15094:	f7f6 fc76 	bl	b984 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   15098:	2210      	movs	r2, #16
   1509a:	4629      	mov	r1, r5
   1509c:	a801      	add	r0, sp, #4
   1509e:	f7f6 fc71 	bl	b984 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   150a2:	463b      	mov	r3, r7
   150a4:	2241      	movs	r2, #65	; 0x41
   150a6:	a905      	add	r1, sp, #20
   150a8:	a801      	add	r0, sp, #4
   150aa:	f7ff ff78 	bl	14f9e <bt_smp_aes_cmac>
	if (err) {
   150ae:	4604      	mov	r4, r0
   150b0:	b910      	cbnz	r0, 150b8 <smp_f6+0x92>
	sys_mem_swap(check, 16);
   150b2:	4638      	mov	r0, r7
   150b4:	f7ff ffa9 	bl	1500a <sys_mem_swap.constprop.0>
}
   150b8:	4620      	mov	r0, r4
   150ba:	b017      	add	sp, #92	; 0x5c
   150bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000150be <smp_f4>:
{
   150be:	b5f0      	push	{r4, r5, r6, r7, lr}
   150c0:	460e      	mov	r6, r1
   150c2:	4614      	mov	r4, r2
   150c4:	461d      	mov	r5, r3
   150c6:	b097      	sub	sp, #92	; 0x5c
	sys_memcpy_swap(m, u, 32);
   150c8:	4601      	mov	r1, r0
   150ca:	2220      	movs	r2, #32
   150cc:	a805      	add	r0, sp, #20
{
   150ce:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   150d0:	f7f6 fc58 	bl	b984 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   150d4:	2220      	movs	r2, #32
   150d6:	4631      	mov	r1, r6
   150d8:	a80d      	add	r0, sp, #52	; 0x34
   150da:	f7f6 fc53 	bl	b984 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   150de:	4621      	mov	r1, r4
   150e0:	2210      	movs	r2, #16
   150e2:	a801      	add	r0, sp, #4
	m[64] = z;
   150e4:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   150e8:	f7f6 fc4c 	bl	b984 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   150ec:	463b      	mov	r3, r7
   150ee:	2241      	movs	r2, #65	; 0x41
   150f0:	a905      	add	r1, sp, #20
   150f2:	a801      	add	r0, sp, #4
   150f4:	f7ff ff53 	bl	14f9e <bt_smp_aes_cmac>
	if (err) {
   150f8:	4604      	mov	r4, r0
   150fa:	b910      	cbnz	r0, 15102 <smp_f4+0x44>
	sys_mem_swap(res, 16);
   150fc:	4638      	mov	r0, r7
   150fe:	f7ff ff84 	bl	1500a <sys_mem_swap.constprop.0>
}
   15102:	4620      	mov	r0, r4
   15104:	b017      	add	sp, #92	; 0x5c
   15106:	bdf0      	pop	{r4, r5, r6, r7, pc}

00015108 <smp_signing_info>:
   15108:	2007      	movs	r0, #7
   1510a:	4770      	bx	lr

0001510c <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1510c:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   15110:	4108      	asrs	r0, r1
}
   15112:	f000 0001 	and.w	r0, r0, #1
   15116:	4770      	bx	lr

00015118 <atomic_test_and_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   15118:	2301      	movs	r3, #1
   1511a:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1511e:	43ca      	mvns	r2, r1
{
   15120:	b500      	push	{lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15122:	e8d0 3fef 	ldaex	r3, [r0]
   15126:	ea03 0c02 	and.w	ip, r3, r2
   1512a:	e8c0 cfee 	stlex	lr, ip, [r0]
   1512e:	f1be 0f00 	cmp.w	lr, #0
   15132:	d1f6      	bne.n	15122 <atomic_test_and_clear_bit+0xa>
	return (old & mask) != 0;
   15134:	420b      	tst	r3, r1
}
   15136:	bf14      	ite	ne
   15138:	2001      	movne	r0, #1
   1513a:	2000      	moveq	r0, #0
   1513c:	f85d fb04 	ldr.w	pc, [sp], #4

00015140 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   15140:	2301      	movs	r3, #1
   15142:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15144:	e8d0 2fef 	ldaex	r2, [r0]
   15148:	431a      	orrs	r2, r3
   1514a:	e8c0 2fe1 	stlex	r1, r2, [r0]
   1514e:	2900      	cmp	r1, #0
   15150:	d1f8      	bne.n	15144 <atomic_set_bit+0x4>
}
   15152:	4770      	bx	lr

00015154 <smp_create_pdu.isra.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, u8_t op, size_t len)
   15154:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   15156:	f100 05b4 	add.w	r5, r0, #180	; 0xb4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, u8_t op, size_t len)
   1515a:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1515c:	4628      	mov	r0, r5
   1515e:	2104      	movs	r1, #4
   15160:	f7ff ffd4 	bl	1510c <atomic_test_bit>
   15164:	b168      	cbz	r0, 15182 <smp_create_pdu.isra.0+0x2e>
		timeout = K_NO_WAIT;
   15166:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   15168:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   1516a:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1516c:	4608      	mov	r0, r1
   1516e:	f7fe ffe7 	bl	14140 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   15172:	4604      	mov	r4, r0
   15174:	b940      	cbnz	r0, 15188 <smp_create_pdu.isra.0+0x34>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   15176:	2104      	movs	r1, #4
   15178:	4628      	mov	r0, r5
   1517a:	f7ff ffe1 	bl	15140 <atomic_set_bit>
}
   1517e:	4620      	mov	r0, r4
   15180:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   15182:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   15186:	e7ef      	b.n	15168 <smp_create_pdu.isra.0+0x14>
	hdr = net_buf_add(buf, sizeof(*hdr));
   15188:	2101      	movs	r1, #1
   1518a:	3008      	adds	r0, #8
   1518c:	f7f8 fb20 	bl	d7d0 <net_buf_simple_add>
	hdr->code = op;
   15190:	7006      	strb	r6, [r0, #0]
	return buf;
   15192:	e7f4      	b.n	1517e <smp_create_pdu.isra.0+0x2a>

00015194 <smp_send_pairing_random>:
{
   15194:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   15196:	2104      	movs	r1, #4
{
   15198:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   1519a:	f7ff ffdb 	bl	15154 <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   1519e:	4604      	mov	r4, r0
   151a0:	b178      	cbz	r0, 151c2 <smp_send_pairing_random+0x2e>
	req = net_buf_add(rsp_buf, sizeof(*req));
   151a2:	2110      	movs	r1, #16
   151a4:	3008      	adds	r0, #8
   151a6:	f7f8 fb13 	bl	d7d0 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   151aa:	2210      	movs	r2, #16
   151ac:	f105 01d7 	add.w	r1, r5, #215	; 0xd7
   151b0:	f7fe fabf 	bl	13732 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   151b4:	4628      	mov	r0, r5
   151b6:	2200      	movs	r2, #0
   151b8:	4621      	mov	r1, r4
   151ba:	f7f6 fc35 	bl	ba28 <smp_send.isra.0>
	return 0;
   151be:	2000      	movs	r0, #0
}
   151c0:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   151c2:	2008      	movs	r0, #8
   151c4:	e7fc      	b.n	151c0 <smp_send_pairing_random+0x2c>

000151c6 <smp_pairing_confirm>:
{
   151c6:	b510      	push	{r4, lr}
   151c8:	4604      	mov	r4, r0
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   151ca:	6889      	ldr	r1, [r1, #8]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   151cc:	f100 03b4 	add.w	r3, r0, #180	; 0xb4
   151d0:	e8d3 2fef 	ldaex	r2, [r3]
   151d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
   151d8:	e8c3 2fe0 	stlex	r0, r2, [r3]
   151dc:	2800      	cmp	r0, #0
   151de:	d1f7      	bne.n	151d0 <smp_pairing_confirm+0xa>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   151e0:	2210      	movs	r2, #16
   151e2:	f104 00c7 	add.w	r0, r4, #199	; 0xc7
   151e6:	f7fe faa4 	bl	13732 <memcpy>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   151ea:	6823      	ldr	r3, [r4, #0]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   151ec:	78db      	ldrb	r3, [r3, #3]
   151ee:	b94b      	cbnz	r3, 15204 <smp_pairing_confirm+0x3e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   151f0:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   151f4:	2104      	movs	r1, #4
   151f6:	f7ff ffa3 	bl	15140 <atomic_set_bit>
		return smp_send_pairing_random(smp);
   151fa:	4620      	mov	r0, r4
}
   151fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return smp_send_pairing_random(smp);
   15200:	f7ff bfc8 	b.w	15194 <smp_send_pairing_random>
}
   15204:	2000      	movs	r0, #0
   15206:	bd10      	pop	{r4, pc}

00015208 <smp_dhkey_check>:
{
   15208:	b5f0      	push	{r4, r5, r6, r7, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   1520a:	6803      	ldr	r3, [r0, #0]
{
   1520c:	4604      	mov	r4, r0
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   1520e:	78dd      	ldrb	r5, [r3, #3]
{
   15210:	b091      	sub	sp, #68	; 0x44
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   15212:	2d00      	cmp	r5, #0
   15214:	d15d      	bne.n	152d2 <smp_dhkey_check+0xca>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   15216:	688f      	ldr	r7, [r1, #8]
		(void)memset(r, 0, sizeof(r));
   15218:	2210      	movs	r2, #16
   1521a:	4629      	mov	r1, r5
   1521c:	a80c      	add	r0, sp, #48	; 0x30
   1521e:	f7fe fab3 	bl	13788 <memset>
		switch (smp->method) {
   15222:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
   15226:	2b05      	cmp	r3, #5
   15228:	d81f      	bhi.n	1526a <smp_dhkey_check+0x62>
   1522a:	e8df f003 	tbb	[pc, r3]
   1522e:	0309      	.short	0x0309
   15230:	201e0903 	.word	0x201e0903
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
   15234:	2204      	movs	r2, #4
   15236:	f504 71c4 	add.w	r1, r4, #392	; 0x188
				memcpy(r, smp->oobd_local->r, sizeof(r));
   1523a:	a80c      	add	r0, sp, #48	; 0x30
   1523c:	f7fe fa79 	bl	13732 <memcpy>
			   &smp->chan.chan.conn->le.resp_addr,
   15240:	4622      	mov	r2, r4
   15242:	f852 3bd7 	ldr.w	r3, [r2], #215
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
   15246:	ae08      	add	r6, sp, #32
			   &smp->chan.chan.conn->le.init_addr, e)) {
   15248:	f103 0183 	add.w	r1, r3, #131	; 0x83
			   &smp->chan.chan.conn->le.resp_addr,
   1524c:	338a      	adds	r3, #138	; 0x8a
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
   1524e:	9301      	str	r3, [sp, #4]
   15250:	f104 03c1 	add.w	r3, r4, #193	; 0xc1
   15254:	9102      	str	r1, [sp, #8]
   15256:	9300      	str	r3, [sp, #0]
   15258:	9603      	str	r6, [sp, #12]
   1525a:	ab0c      	add	r3, sp, #48	; 0x30
   1525c:	f104 01e7 	add.w	r1, r4, #231	; 0xe7
   15260:	f204 1077 	addw	r0, r4, #375	; 0x177
   15264:	f7ff fedf 	bl	15026 <smp_f6>
   15268:	b138      	cbz	r0, 1527a <smp_dhkey_check+0x72>
		switch (smp->method) {
   1526a:	2508      	movs	r5, #8
   1526c:	e02c      	b.n	152c8 <smp_dhkey_check+0xc0>
			if (smp->oobd_local) {
   1526e:	f8d4 1190 	ldr.w	r1, [r4, #400]	; 0x190
   15272:	2900      	cmp	r1, #0
   15274:	d0e4      	beq.n	15240 <smp_dhkey_check+0x38>
				memcpy(r, smp->oobd_local->r, sizeof(r));
   15276:	2210      	movs	r2, #16
   15278:	e7df      	b.n	1523a <smp_dhkey_check+0x32>
		if (memcmp(e, req->e, 16)) {
   1527a:	4630      	mov	r0, r6
   1527c:	2210      	movs	r2, #16
   1527e:	4639      	mov	r1, r7
   15280:	f7fe fa47 	bl	13712 <memcmp>
   15284:	4606      	mov	r6, r0
   15286:	bb10      	cbnz	r0, 152ce <smp_dhkey_check+0xc6>
	return MIN(req->max_key_size, rsp->max_key_size);
   15288:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
   1528c:	f894 70bd 	ldrb.w	r7, [r4, #189]	; 0xbd
		(void)memset(ediv, 0, sizeof(ediv));
   15290:	4601      	mov	r1, r0
	return MIN(req->max_key_size, rsp->max_key_size);
   15292:	429f      	cmp	r7, r3
   15294:	bf28      	it	cs
   15296:	461f      	movcs	r7, r3
		(void)memset(ediv, 0, sizeof(ediv));
   15298:	2202      	movs	r2, #2
   1529a:	a805      	add	r0, sp, #20
   1529c:	f7fe fa74 	bl	13788 <memset>
		(void)memset(rand, 0, sizeof(rand));
   152a0:	2208      	movs	r2, #8
   152a2:	4631      	mov	r1, r6
   152a4:	a806      	add	r0, sp, #24
   152a6:	f7fe fa6f 	bl	13788 <memset>
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, rand, ediv,
   152aa:	6820      	ldr	r0, [r4, #0]
   152ac:	9700      	str	r7, [sp, #0]
   152ae:	f104 03f7 	add.w	r3, r4, #247	; 0xf7
   152b2:	aa05      	add	r2, sp, #20
   152b4:	a906      	add	r1, sp, #24
   152b6:	f7fe fd4a 	bl	13d4e <bt_conn_le_start_encryption>
   152ba:	2800      	cmp	r0, #0
   152bc:	dbd5      	blt.n	1526a <smp_dhkey_check+0x62>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   152be:	2101      	movs	r1, #1
   152c0:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
   152c4:	f7ff ff3c 	bl	15140 <atomic_set_bit>
}
   152c8:	4628      	mov	r0, r5
   152ca:	b011      	add	sp, #68	; 0x44
   152cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   152ce:	250b      	movs	r5, #11
   152d0:	e7fa      	b.n	152c8 <smp_dhkey_check+0xc0>
	return 0;
   152d2:	2500      	movs	r5, #0
   152d4:	e7f8      	b.n	152c8 <smp_dhkey_check+0xc0>

000152d6 <smp_reset>:
{
   152d6:	b538      	push	{r3, r4, r5, lr}
   152d8:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   152da:	6805      	ldr	r5, [r0, #0]
	k_delayed_work_cancel(&smp->work);
   152dc:	f500 70ce 	add.w	r0, r0, #412	; 0x19c
   152e0:	f7fb ff7c 	bl	111dc <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
   152e4:	2300      	movs	r3, #0
	atomic_set(&smp->allowed_cmds, 0);
   152e6:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
	smp->method = JUST_WORKS;
   152ea:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   152ee:	e8d0 2fef 	ldaex	r2, [r0]
   152f2:	e8c0 3fe1 	stlex	r1, r3, [r0]
   152f6:	2900      	cmp	r1, #0
   152f8:	d1f9      	bne.n	152ee <smp_reset+0x18>
   152fa:	34b4      	adds	r4, #180	; 0xb4
   152fc:	e8d4 2fef 	ldaex	r2, [r4]
   15300:	e8c4 3fe1 	stlex	r1, r3, [r4]
   15304:	2900      	cmp	r1, #0
   15306:	d1f9      	bne.n	152fc <smp_reset+0x26>
	if (conn->required_sec_level != conn->sec_level) {
   15308:	7a6b      	ldrb	r3, [r5, #9]
   1530a:	7aaa      	ldrb	r2, [r5, #10]
   1530c:	429a      	cmp	r2, r3
		conn->required_sec_level = conn->sec_level;
   1530e:	bf18      	it	ne
   15310:	72ab      	strbne	r3, [r5, #10]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   15312:	78eb      	ldrb	r3, [r5, #3]
   15314:	b923      	cbnz	r3, 15320 <smp_reset+0x4a>
}
   15316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   1531a:	210b      	movs	r1, #11
   1531c:	f7ff bf10 	b.w	15140 <atomic_set_bit>
}
   15320:	bd38      	pop	{r3, r4, r5, pc}

00015322 <smp_error>:
{
   15322:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15324:	4606      	mov	r6, r0
   15326:	460c      	mov	r4, r1
	smp_pairing_complete(smp, reason);
   15328:	f7f6 fe9a 	bl	c060 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   1532c:	2105      	movs	r1, #5
   1532e:	4630      	mov	r0, r6
   15330:	f7ff ff10 	bl	15154 <smp_create_pdu.isra.0>
	if (!buf) {
   15334:	4605      	mov	r5, r0
   15336:	b178      	cbz	r0, 15358 <smp_error+0x36>
	rsp = net_buf_add(buf, sizeof(*rsp));
   15338:	2101      	movs	r1, #1
   1533a:	3008      	adds	r0, #8
   1533c:	f7f8 fa48 	bl	d7d0 <net_buf_simple_add>
	rsp->reason = reason;
   15340:	7004      	strb	r4, [r0, #0]
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   15342:	2400      	movs	r4, #0
   15344:	462a      	mov	r2, r5
   15346:	4623      	mov	r3, r4
   15348:	2106      	movs	r1, #6
   1534a:	6830      	ldr	r0, [r6, #0]
   1534c:	9400      	str	r4, [sp, #0]
   1534e:	f7fe fefa 	bl	14146 <bt_l2cap_send_cb>
	return 0;
   15352:	4620      	mov	r0, r4
}
   15354:	b002      	add	sp, #8
   15356:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   15358:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1535c:	e7fa      	b.n	15354 <smp_error+0x32>

0001535e <bt_smp_encrypt_change>:
{
   1535e:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn = chan->conn;
   15360:	4605      	mov	r5, r0
{
   15362:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->conn;
   15364:	f855 6bb4 	ldr.w	r6, [r5], #180
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15368:	e8d5 3fef 	ldaex	r3, [r5]
   1536c:	f023 0302 	bic.w	r3, r3, #2
   15370:	e8c5 3fe2 	stlex	r2, r3, [r5]
   15374:	2a00      	cmp	r2, #0
   15376:	d1f7      	bne.n	15368 <bt_smp_encrypt_change+0xa>
	if (hci_status) {
   15378:	2900      	cmp	r1, #0
   1537a:	d14b      	bne.n	15414 <bt_smp_encrypt_change+0xb6>
	if (!conn->encrypt) {
   1537c:	7af3      	ldrb	r3, [r6, #11]
   1537e:	2b00      	cmp	r3, #0
   15380:	d048      	beq.n	15414 <bt_smp_encrypt_change+0xb6>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   15382:	2103      	movs	r1, #3
   15384:	4628      	mov	r0, r5
   15386:	f7ff fec1 	bl	1510c <atomic_test_bit>
   1538a:	b920      	cbnz	r0, 15396 <bt_smp_encrypt_change+0x38>
		smp_reset(smp);
   1538c:	4620      	mov	r0, r4
}
   1538e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		smp_reset(smp);
   15392:	f7ff bfa0 	b.w	152d6 <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   15396:	2105      	movs	r1, #5
   15398:	4628      	mov	r0, r5
   1539a:	f7ff feb7 	bl	1510c <atomic_test_bit>
   1539e:	b198      	cbz	r0, 153c8 <bt_smp_encrypt_change+0x6a>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   153a0:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
   153a4:	071b      	lsls	r3, r3, #28
   153a6:	d507      	bpl.n	153b8 <bt_smp_encrypt_change+0x5a>
   153a8:	f894 3199 	ldrb.w	r3, [r4, #409]	; 0x199
   153ac:	0718      	lsls	r0, r3, #28
   153ae:	d503      	bpl.n	153b8 <bt_smp_encrypt_change+0x5a>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   153b0:	2110      	movs	r1, #16
   153b2:	4628      	mov	r0, r5
   153b4:	f7ff fec4 	bl	15140 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   153b8:	f8b4 3198 	ldrh.w	r3, [r4, #408]	; 0x198
   153bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   153c0:	f023 0308 	bic.w	r3, r3, #8
   153c4:	f8a4 3198 	strh.w	r3, [r4, #408]	; 0x198
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   153c8:	f894 3199 	ldrb.w	r3, [r4, #409]	; 0x199
   153cc:	07d9      	lsls	r1, r3, #31
   153ce:	d519      	bpl.n	15404 <bt_smp_encrypt_change+0xa6>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   153d0:	2106      	movs	r1, #6
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   153d2:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   153d6:	f7ff feb3 	bl	15140 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   153da:	2102      	movs	r1, #2
   153dc:	4628      	mov	r0, r5
   153de:	f7ff feaf 	bl	15140 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   153e2:	78f3      	ldrb	r3, [r6, #3]
   153e4:	b913      	cbnz	r3, 153ec <bt_smp_encrypt_change+0x8e>
	    conn->role == BT_HCI_ROLE_MASTER && smp->remote_dist) {
   153e6:	f894 3199 	ldrb.w	r3, [r4, #409]	; 0x199
   153ea:	b99b      	cbnz	r3, 15414 <bt_smp_encrypt_change+0xb6>
	if (bt_smp_distribute_keys(smp)) {
   153ec:	4620      	mov	r0, r4
   153ee:	f7f6 fb55 	bl	ba9c <bt_smp_distribute_keys>
   153f2:	b978      	cbnz	r0, 15414 <bt_smp_encrypt_change+0xb6>
	if (!smp->local_dist && !smp->remote_dist) {
   153f4:	f8b4 1198 	ldrh.w	r1, [r4, #408]	; 0x198
   153f8:	b961      	cbnz	r1, 15414 <bt_smp_encrypt_change+0xb6>
		smp_pairing_complete(smp, 0);
   153fa:	4620      	mov	r0, r4
}
   153fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		smp_pairing_complete(smp, 0);
   15400:	f7f6 be2e 	b.w	c060 <smp_pairing_complete>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   15404:	079a      	lsls	r2, r3, #30
   15406:	d501      	bpl.n	1540c <bt_smp_encrypt_change+0xae>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   15408:	2108      	movs	r1, #8
   1540a:	e7e2      	b.n	153d2 <bt_smp_encrypt_change+0x74>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1540c:	075b      	lsls	r3, r3, #29
   1540e:	d5e4      	bpl.n	153da <bt_smp_encrypt_change+0x7c>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   15410:	210a      	movs	r1, #10
   15412:	e7de      	b.n	153d2 <bt_smp_encrypt_change+0x74>
}
   15414:	bd70      	pop	{r4, r5, r6, pc}

00015416 <smp_c1>:
{
   15416:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1541a:	4699      	mov	r9, r3
   1541c:	b089      	sub	sp, #36	; 0x24
   1541e:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
	p1[0] = ia->type;
   15422:	783b      	ldrb	r3, [r7, #0]
{
   15424:	460c      	mov	r4, r1
	p1[0] = ia->type;
   15426:	f88d 3000 	strb.w	r3, [sp]
	p1[1] = ra->type;
   1542a:	f898 3000 	ldrb.w	r3, [r8]
{
   1542e:	4611      	mov	r1, r2
   15430:	9d12      	ldr	r5, [sp, #72]	; 0x48
	memcpy(p1 + 2, preq, 7);
   15432:	2207      	movs	r2, #7
{
   15434:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   15436:	f10d 0002 	add.w	r0, sp, #2
	p1[1] = ra->type;
   1543a:	f88d 3001 	strb.w	r3, [sp, #1]
	memcpy(p1 + 2, preq, 7);
   1543e:	f7fe f978 	bl	13732 <memcpy>
	memcpy(p1 + 9, pres, 7);
   15442:	2207      	movs	r2, #7
   15444:	4649      	mov	r1, r9
   15446:	f10d 0009 	add.w	r0, sp, #9
   1544a:	f7fe f972 	bl	13732 <memcpy>
	while (len--) {
   1544e:	4629      	mov	r1, r5
   15450:	466a      	mov	r2, sp
   15452:	f104 0010 	add.w	r0, r4, #16
   15456:	4284      	cmp	r4, r0
   15458:	d127      	bne.n	154aa <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   1545a:	462a      	mov	r2, r5
   1545c:	4629      	mov	r1, r5
   1545e:	4630      	mov	r0, r6
   15460:	f7fe fc06 	bl	13c70 <bt_encrypt_le>
	if (err) {
   15464:	4604      	mov	r4, r0
   15466:	b9e0      	cbnz	r0, 154a2 <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   15468:	2206      	movs	r2, #6
   1546a:	f108 0101 	add.w	r1, r8, #1
   1546e:	a804      	add	r0, sp, #16
   15470:	f7fe f95f 	bl	13732 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   15474:	2206      	movs	r2, #6
   15476:	1c79      	adds	r1, r7, #1
   15478:	f10d 0016 	add.w	r0, sp, #22
   1547c:	f7fe f959 	bl	13732 <memcpy>
	(void)memset(p2 + 12, 0, 4);
   15480:	2204      	movs	r2, #4
   15482:	4621      	mov	r1, r4
   15484:	a807      	add	r0, sp, #28
   15486:	f7fe f97f 	bl	13788 <memset>
	while (len--) {
   1548a:	462a      	mov	r2, r5
   1548c:	f105 0010 	add.w	r0, r5, #16
   15490:	ab04      	add	r3, sp, #16
   15492:	4282      	cmp	r2, r0
   15494:	d112      	bne.n	154bc <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   15496:	462a      	mov	r2, r5
   15498:	4629      	mov	r1, r5
   1549a:	4630      	mov	r0, r6
   1549c:	f7fe fbe8 	bl	13c70 <bt_encrypt_le>
   154a0:	4604      	mov	r4, r0
}
   154a2:	4620      	mov	r0, r4
   154a4:	b009      	add	sp, #36	; 0x24
   154a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   154aa:	f814 3b01 	ldrb.w	r3, [r4], #1
   154ae:	f812 cb01 	ldrb.w	ip, [r2], #1
   154b2:	ea83 030c 	eor.w	r3, r3, ip
   154b6:	f801 3b01 	strb.w	r3, [r1], #1
   154ba:	e7cc      	b.n	15456 <smp_c1+0x40>
   154bc:	f812 1b01 	ldrb.w	r1, [r2], #1
   154c0:	f813 4b01 	ldrb.w	r4, [r3], #1
   154c4:	4061      	eors	r1, r4
   154c6:	f802 1c01 	strb.w	r1, [r2, #-1]
   154ca:	e7e2      	b.n	15492 <smp_c1+0x7c>

000154cc <legacy_send_pairing_confirm>:
{
   154cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   154ce:	2103      	movs	r1, #3
{
   154d0:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   154d2:	6805      	ldr	r5, [r0, #0]
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   154d4:	f7ff fe3e 	bl	15154 <smp_create_pdu.isra.0>
	if (!buf) {
   154d8:	4606      	mov	r6, r0
   154da:	b1c0      	cbz	r0, 1550e <legacy_send_pairing_confirm+0x42>
	req = net_buf_add(buf, sizeof(*req));
   154dc:	2110      	movs	r1, #16
   154de:	3008      	adds	r0, #8
   154e0:	f7f8 f976 	bl	d7d0 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   154e4:	f105 038a 	add.w	r3, r5, #138	; 0x8a
   154e8:	3583      	adds	r5, #131	; 0x83
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   154ea:	9002      	str	r0, [sp, #8]
   154ec:	9301      	str	r3, [sp, #4]
   154ee:	9500      	str	r5, [sp, #0]
   154f0:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
   154f4:	f104 02b9 	add.w	r2, r4, #185	; 0xb9
   154f8:	f104 01d7 	add.w	r1, r4, #215	; 0xd7
   154fc:	f104 00f7 	add.w	r0, r4, #247	; 0xf7
   15500:	f7ff ff89 	bl	15416 <smp_c1>
   15504:	4605      	mov	r5, r0
   15506:	b120      	cbz	r0, 15512 <legacy_send_pairing_confirm+0x46>
		net_buf_unref(buf);
   15508:	4630      	mov	r0, r6
   1550a:	f7f7 ffef 	bl	d4ec <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1550e:	2008      	movs	r0, #8
   15510:	e00e      	b.n	15530 <legacy_send_pairing_confirm+0x64>
	smp_send(smp, buf, NULL, NULL);
   15512:	4602      	mov	r2, r0
   15514:	4631      	mov	r1, r6
   15516:	4620      	mov	r0, r4
   15518:	f7f6 fa86 	bl	ba28 <smp_send.isra.0>
   1551c:	34b4      	adds	r4, #180	; 0xb4
   1551e:	e8d4 3fef 	ldaex	r3, [r4]
   15522:	f023 0301 	bic.w	r3, r3, #1
   15526:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1552a:	2a00      	cmp	r2, #0
   1552c:	d1f7      	bne.n	1551e <legacy_send_pairing_confirm+0x52>
	return 0;
   1552e:	4628      	mov	r0, r5
}
   15530:	b004      	add	sp, #16
   15532:	bd70      	pop	{r4, r5, r6, pc}

00015534 <bt_smp_request_ltk>:
{
   15534:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   15538:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   1553a:	4605      	mov	r5, r0
   1553c:	e9cd 2300 	strd	r2, r3, [sp]
	smp = smp_chan_get(conn);
   15540:	f7f6 fa4e 	bl	b9e0 <smp_chan_get>
	if (!smp) {
   15544:	4604      	mov	r4, r0
   15546:	2800      	cmp	r0, #0
   15548:	f000 809c 	beq.w	15684 <bt_smp_request_ltk+0x150>
	if (ediv == 0U && rand == 0U &&
   1554c:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   15550:	f1b9 0f00 	cmp.w	r9, #0
   15554:	d12d      	bne.n	155b2 <bt_smp_request_ltk+0x7e>
   15556:	e9dd 2300 	ldrd	r2, r3, [sp]
   1555a:	4313      	orrs	r3, r2
   1555c:	d129      	bne.n	155b2 <bt_smp_request_ltk+0x7e>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   1555e:	f100 08b4 	add.w	r8, r0, #180	; 0xb4
   15562:	2103      	movs	r1, #3
   15564:	4640      	mov	r0, r8
   15566:	f7ff fdd1 	bl	1510c <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   1556a:	b310      	cbz	r0, 155b2 <bt_smp_request_ltk+0x7e>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1556c:	2101      	movs	r1, #1
   1556e:	4640      	mov	r0, r8
   15570:	f7ff fdcc 	bl	1510c <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   15574:	4606      	mov	r6, r0
   15576:	b1e0      	cbz	r0, 155b2 <bt_smp_request_ltk+0x7e>
	return MIN(req->max_key_size, rsp->max_key_size);
   15578:	f894 50c4 	ldrb.w	r5, [r4, #196]	; 0xc4
   1557c:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
		memcpy(ltk, smp->tk, enc_size);
   15580:	4638      	mov	r0, r7
	return MIN(req->max_key_size, rsp->max_key_size);
   15582:	429d      	cmp	r5, r3
   15584:	bf28      	it	cs
   15586:	461d      	movcs	r5, r3
		memcpy(ltk, smp->tk, enc_size);
   15588:	f104 01f7 	add.w	r1, r4, #247	; 0xf7
   1558c:	462a      	mov	r2, r5
   1558e:	f7fe f8d0 	bl	13732 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   15592:	2d0f      	cmp	r5, #15
   15594:	d805      	bhi.n	155a2 <bt_smp_request_ltk+0x6e>
			(void)memset(ltk + enc_size, 0,
   15596:	4649      	mov	r1, r9
   15598:	f1c5 0210 	rsb	r2, r5, #16
   1559c:	1978      	adds	r0, r7, r5
   1559e:	f7fe f8f3 	bl	13788 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   155a2:	2101      	movs	r1, #1
   155a4:	4640      	mov	r0, r8
   155a6:	f7ff fdcb 	bl	15140 <atomic_set_bit>
}
   155aa:	4630      	mov	r0, r6
   155ac:	b003      	add	sp, #12
   155ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   155b2:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
   155b6:	b983      	cbnz	r3, 155da <bt_smp_request_ltk+0xa6>
					     &conn->le.dst);
   155b8:	f105 067c 	add.w	r6, r5, #124	; 0x7c
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   155bc:	4632      	mov	r2, r6
   155be:	2020      	movs	r0, #32
   155c0:	7a29      	ldrb	r1, [r5, #8]
   155c2:	f7f7 fccf 	bl	cf64 <bt_keys_find>
   155c6:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
		if (!conn->le.keys) {
   155ca:	b930      	cbnz	r0, 155da <bt_smp_request_ltk+0xa6>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
   155cc:	4632      	mov	r2, r6
   155ce:	2001      	movs	r0, #1
   155d0:	7a29      	ldrb	r1, [r5, #8]
   155d2:	f7f7 fcc7 	bl	cf64 <bt_keys_find>
   155d6:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
	if (ediv == 0U && rand == 0U &&
   155da:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
   155de:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   155e2:	b9ce      	cbnz	r6, 15618 <bt_smp_request_ltk+0xe4>
   155e4:	e9dd 2300 	ldrd	r2, r3, [sp]
   155e8:	4313      	orrs	r3, r2
   155ea:	d115      	bne.n	15618 <bt_smp_request_ltk+0xe4>
   155ec:	2800      	cmp	r0, #0
   155ee:	d03c      	beq.n	1566a <bt_smp_request_ltk+0x136>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   155f0:	89c3      	ldrh	r3, [r0, #14]
   155f2:	069a      	lsls	r2, r3, #26
   155f4:	d511      	bpl.n	1561a <bt_smp_request_ltk+0xe6>
		enc_size = conn->le.keys->enc_size;
   155f6:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   155f8:	f100 011a 	add.w	r1, r0, #26
   155fc:	4622      	mov	r2, r4
   155fe:	4638      	mov	r0, r7
   15600:	f7fe f897 	bl	13732 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   15604:	2c0f      	cmp	r4, #15
   15606:	d805      	bhi.n	15614 <bt_smp_request_ltk+0xe0>
			(void)memset(ltk + enc_size, 0,
   15608:	4631      	mov	r1, r6
   1560a:	f1c4 0210 	rsb	r2, r4, #16
   1560e:	1938      	adds	r0, r7, r4
   15610:	f7fe f8ba 	bl	13788 <memset>
		return true;
   15614:	2601      	movs	r6, #1
   15616:	e7c8      	b.n	155aa <bt_smp_request_ltk+0x76>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   15618:	b338      	cbz	r0, 1566a <bt_smp_request_ltk+0x136>
   1561a:	89c3      	ldrh	r3, [r0, #14]
   1561c:	07db      	lsls	r3, r3, #31
   1561e:	d524      	bpl.n	1566a <bt_smp_request_ltk+0x136>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   15620:	2208      	movs	r2, #8
   15622:	4669      	mov	r1, sp
   15624:	3040      	adds	r0, #64	; 0x40
   15626:	f7fe f874 	bl	13712 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   1562a:	b9f0      	cbnz	r0, 1566a <bt_smp_request_ltk+0x136>
	    !memcmp(conn->le.keys->slave_ltk.ediv, &ediv, 2)) {
   1562c:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   15630:	2202      	movs	r2, #2
   15632:	a90a      	add	r1, sp, #40	; 0x28
   15634:	3048      	adds	r0, #72	; 0x48
   15636:	f7fe f86c 	bl	13712 <memcmp>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   1563a:	4606      	mov	r6, r0
   1563c:	b9a8      	cbnz	r0, 1566a <bt_smp_request_ltk+0x136>
		enc_size = conn->le.keys->enc_size;
   1563e:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   15642:	4638      	mov	r0, r7
		enc_size = conn->le.keys->enc_size;
   15644:	7b0d      	ldrb	r5, [r1, #12]
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   15646:	314a      	adds	r1, #74	; 0x4a
   15648:	462a      	mov	r2, r5
   1564a:	f7fe f872 	bl	13732 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   1564e:	2d0f      	cmp	r5, #15
   15650:	d805      	bhi.n	1565e <bt_smp_request_ltk+0x12a>
			(void)memset(ltk + enc_size, 0,
   15652:	4631      	mov	r1, r6
   15654:	f1c5 0210 	rsb	r2, r5, #16
   15658:	1978      	adds	r0, r7, r5
   1565a:	f7fe f895 	bl	13788 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1565e:	2101      	movs	r1, #1
   15660:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
   15664:	f7ff fd6c 	bl	15140 <atomic_set_bit>
		return true;
   15668:	e7d4      	b.n	15614 <bt_smp_request_ltk+0xe0>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1566a:	210e      	movs	r1, #14
   1566c:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
   15670:	f7ff fd4c 	bl	1510c <atomic_test_bit>
   15674:	b118      	cbz	r0, 1567e <bt_smp_request_ltk+0x14a>
		bt_conn_security_changed(smp->chan.chan.conn,
   15676:	2102      	movs	r1, #2
   15678:	6820      	ldr	r0, [r4, #0]
   1567a:	f7f1 fc8d 	bl	6f98 <bt_conn_security_changed>
	smp_reset(smp);
   1567e:	4620      	mov	r0, r4
   15680:	f7ff fe29 	bl	152d6 <smp_reset>
	return false;
   15684:	2600      	movs	r6, #0
   15686:	e790      	b.n	155aa <bt_smp_request_ltk+0x76>

00015688 <bt_smp_sign>:
   15688:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1568c:	4770      	bx	lr

0001568e <bt_smp_start_security>:
{
   1568e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (conn->role) {
   15690:	78c3      	ldrb	r3, [r0, #3]
{
   15692:	4604      	mov	r4, r0
	switch (conn->role) {
   15694:	2b00      	cmp	r3, #0
   15696:	d15b      	bne.n	15750 <bt_smp_start_security+0xc2>
		smp = smp_chan_get(conn);
   15698:	f7f6 f9a2 	bl	b9e0 <smp_chan_get>
		if (!smp) {
   1569c:	4605      	mov	r5, r0
   1569e:	2800      	cmp	r0, #0
   156a0:	d059      	beq.n	15756 <bt_smp_start_security+0xc8>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   156a2:	210b      	movs	r1, #11
   156a4:	1d20      	adds	r0, r4, #4
   156a6:	f7ff fd31 	bl	1510c <atomic_test_bit>
   156aa:	bb00      	cbnz	r0, 156ee <bt_smp_start_security+0x60>
	if (!conn->le.keys) {
   156ac:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   156b0:	b983      	cbnz	r3, 156d4 <bt_smp_start_security+0x46>
						     conn->id, &conn->le.dst);
   156b2:	f104 067c 	add.w	r6, r4, #124	; 0x7c
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   156b6:	4632      	mov	r2, r6
   156b8:	2020      	movs	r0, #32
   156ba:	7a21      	ldrb	r1, [r4, #8]
   156bc:	f7f7 fc52 	bl	cf64 <bt_keys_find>
   156c0:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
		if (!conn->le.keys) {
   156c4:	b930      	cbnz	r0, 156d4 <bt_smp_start_security+0x46>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   156c6:	4632      	mov	r2, r6
   156c8:	2004      	movs	r0, #4
   156ca:	7a21      	ldrb	r1, [r4, #8]
   156cc:	f7f7 fc4a 	bl	cf64 <bt_keys_find>
   156d0:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
	if (!conn->le.keys ||
   156d4:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   156d8:	b14b      	cbz	r3, 156ee <bt_smp_start_security+0x60>
   156da:	89da      	ldrh	r2, [r3, #14]
   156dc:	f002 0224 	and.w	r2, r2, #36	; 0x24
   156e0:	b12a      	cbz	r2, 156ee <bt_smp_start_security+0x60>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   156e2:	7aa2      	ldrb	r2, [r4, #10]
   156e4:	2a02      	cmp	r2, #2
   156e6:	d908      	bls.n	156fa <bt_smp_start_security+0x6c>
   156e8:	7b5b      	ldrb	r3, [r3, #13]
   156ea:	07db      	lsls	r3, r3, #31
   156ec:	d405      	bmi.n	156fa <bt_smp_start_security+0x6c>
			return smp_send_pairing_req(conn);
   156ee:	4620      	mov	r0, r4
}
   156f0:	b002      	add	sp, #8
   156f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			return smp_send_pairing_req(conn);
   156f6:	f7f6 bb17 	b.w	bd28 <smp_send_pairing_req>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   156fa:	f105 06b4 	add.w	r6, r5, #180	; 0xb4
   156fe:	2103      	movs	r1, #3
   15700:	4630      	mov	r0, r6
   15702:	f7ff fd03 	bl	1510c <atomic_test_bit>
   15706:	b120      	cbz	r0, 15712 <bt_smp_start_security+0x84>
			return -EBUSY;
   15708:	f06f 040f 	mvn.w	r4, #15
}
   1570c:	4620      	mov	r0, r4
   1570e:	b002      	add	sp, #8
   15710:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   15712:	2101      	movs	r1, #1
   15714:	4630      	mov	r0, r6
   15716:	f7ff fcf9 	bl	1510c <atomic_test_bit>
   1571a:	2800      	cmp	r0, #0
   1571c:	d1f4      	bne.n	15708 <bt_smp_start_security+0x7a>
						  conn->le.keys->ltk.rand,
   1571e:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
		err = bt_conn_le_start_encryption(conn,
   15722:	4620      	mov	r0, r4
   15724:	7b0b      	ldrb	r3, [r1, #12]
   15726:	f101 0218 	add.w	r2, r1, #24
   1572a:	9300      	str	r3, [sp, #0]
   1572c:	f101 031a 	add.w	r3, r1, #26
   15730:	3110      	adds	r1, #16
   15732:	f7fe fb0c 	bl	13d4e <bt_conn_le_start_encryption>
		if (err) {
   15736:	4604      	mov	r4, r0
   15738:	2800      	cmp	r0, #0
   1573a:	d1e7      	bne.n	1570c <bt_smp_start_security+0x7e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   1573c:	f105 00b0 	add.w	r0, r5, #176	; 0xb0
   15740:	210b      	movs	r1, #11
   15742:	f7ff fcfd 	bl	15140 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   15746:	2101      	movs	r1, #1
   15748:	4630      	mov	r0, r6
   1574a:	f7ff fcf9 	bl	15140 <atomic_set_bit>
		return 0;
   1574e:	e7dd      	b.n	1570c <bt_smp_start_security+0x7e>
		return -EINVAL;
   15750:	f06f 0415 	mvn.w	r4, #21
   15754:	e7da      	b.n	1570c <bt_smp_start_security+0x7e>
			return -ENOTCONN;
   15756:	f06f 0438 	mvn.w	r4, #56	; 0x38
   1575a:	e7d7      	b.n	1570c <bt_smp_start_security+0x7e>

0001575c <id_add>:
	bt_id_add(keys);
   1575c:	f7ef bf86 	b.w	566c <bt_id_add>

00015760 <bt_keys_get_type>:
{
   15760:	b570      	push	{r4, r5, r6, lr}
   15762:	4604      	mov	r4, r0
   15764:	460d      	mov	r5, r1
   15766:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   15768:	f7f7 fbfc 	bl	cf64 <bt_keys_find>
	if (keys) {
   1576c:	b938      	cbnz	r0, 1577e <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   1576e:	4631      	mov	r1, r6
   15770:	4628      	mov	r0, r5
   15772:	f7f7 fbb7 	bl	cee4 <bt_keys_get_addr>
	if (!keys) {
   15776:	b110      	cbz	r0, 1577e <bt_keys_get_type+0x1e>
	keys->keys |= type;
   15778:	89c3      	ldrh	r3, [r0, #14]
   1577a:	431c      	orrs	r4, r3
   1577c:	81c4      	strh	r4, [r0, #14]
}
   1577e:	bd70      	pop	{r4, r5, r6, pc}

00015780 <bt_keys_add_type>:
	keys->keys |= type;
   15780:	89c3      	ldrh	r3, [r0, #14]
   15782:	4319      	orrs	r1, r3
   15784:	81c1      	strh	r1, [r0, #14]
}
   15786:	4770      	bx	lr

00015788 <fixed_data_unref>:
}
   15788:	4770      	bx	lr

0001578a <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1578a:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1578c:	6849      	ldr	r1, [r1, #4]
   1578e:	6809      	ldr	r1, [r1, #0]
   15790:	f7f7 bd64 	b.w	d25c <net_buf_alloc_len>

00015794 <net_buf_simple_push_le16>:
{
   15794:	b510      	push	{r4, lr}
   15796:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_push(buf, sizeof(val)));
   15798:	2102      	movs	r1, #2
   1579a:	f7f7 ffb5 	bl	d708 <net_buf_simple_push>
	dst[0] = val;
   1579e:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   157a0:	0a24      	lsrs	r4, r4, #8
   157a2:	7044      	strb	r4, [r0, #1]
}
   157a4:	bd10      	pop	{r4, pc}

000157a6 <net_buf_simple_push_u8>:
{
   157a6:	b510      	push	{r4, lr}
   157a8:	460c      	mov	r4, r1
	u8_t *data = net_buf_simple_push(buf, 1);
   157aa:	2101      	movs	r1, #1
   157ac:	f7f7 ffac 	bl	d708 <net_buf_simple_push>
	*data = val;
   157b0:	7004      	strb	r4, [r0, #0]
}
   157b2:	bd10      	pop	{r4, pc}

000157b4 <net_buf_simple_pull_u8>:
{
   157b4:	b510      	push	{r4, lr}
	val = buf->data[0];
   157b6:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   157b8:	2101      	movs	r1, #1
	val = buf->data[0];
   157ba:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   157bc:	f7f7 ffc6 	bl	d74c <net_buf_simple_pull>
}
   157c0:	4620      	mov	r0, r4
   157c2:	bd10      	pop	{r4, pc}

000157c4 <net_buf_simple_pull_le16>:
{
   157c4:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((u16_t *)buf->data);
   157c6:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   157c8:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
   157ca:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   157cc:	f7f7 ffbe 	bl	d74c <net_buf_simple_pull>
}
   157d0:	4620      	mov	r0, r4
   157d2:	bd10      	pop	{r4, pc}

000157d4 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   157d4:	6802      	ldr	r2, [r0, #0]
   157d6:	6880      	ldr	r0, [r0, #8]
}
   157d8:	1a10      	subs	r0, r2, r0
   157da:	4770      	bx	lr

000157dc <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   157dc:	8883      	ldrh	r3, [r0, #4]
   157de:	88c2      	ldrh	r2, [r0, #6]
   157e0:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   157e2:	6803      	ldr	r3, [r0, #0]
   157e4:	6880      	ldr	r0, [r0, #8]
   157e6:	1a18      	subs	r0, r3, r0
}
   157e8:	1a10      	subs	r0, r2, r0
   157ea:	4770      	bx	lr

000157ec <net_buf_simple_add_mem>:
{
   157ec:	b538      	push	{r3, r4, r5, lr}
   157ee:	460d      	mov	r5, r1
   157f0:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   157f2:	4611      	mov	r1, r2
   157f4:	f7f7 ffec 	bl	d7d0 <net_buf_simple_add>
   157f8:	4622      	mov	r2, r4
   157fa:	4629      	mov	r1, r5
}
   157fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   15800:	f7fd bf97 	b.w	13732 <memcpy>

00015804 <net_buf_simple_add_u8>:
{
   15804:	b510      	push	{r4, lr}
   15806:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   15808:	2101      	movs	r1, #1
   1580a:	f7f7 ffe1 	bl	d7d0 <net_buf_simple_add>
	*u8 = val;
   1580e:	7004      	strb	r4, [r0, #0]
}
   15810:	bd10      	pop	{r4, pc}

00015812 <net_buf_simple_add_le16>:
{
   15812:	b510      	push	{r4, lr}
   15814:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   15816:	2102      	movs	r1, #2
   15818:	f7f7 ffda 	bl	d7d0 <net_buf_simple_add>
	dst[0] = val;
   1581c:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   1581e:	0a24      	lsrs	r4, r4, #8
   15820:	7044      	strb	r4, [r0, #1]
}
   15822:	bd10      	pop	{r4, pc}

00015824 <net_buf_append_bytes>:
{
   15824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15828:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1582a:	4680      	mov	r8, r0
   1582c:	460e      	mov	r6, r1
   1582e:	4617      	mov	r7, r2
	struct net_buf *frag = net_buf_frag_last(buf);
   15830:	f7f7 febc 	bl	d5ac <net_buf_frag_last>
	size_t added_len = 0;
   15834:	f04f 0900 	mov.w	r9, #0
	struct net_buf *frag = net_buf_frag_last(buf);
   15838:	4604      	mov	r4, r0
		u16_t count = MIN(len, net_buf_tailroom(frag));
   1583a:	3408      	adds	r4, #8
   1583c:	4620      	mov	r0, r4
   1583e:	f7ff ffcd 	bl	157dc <net_buf_simple_tailroom>
   15842:	42b0      	cmp	r0, r6
   15844:	bf94      	ite	ls
   15846:	fa1f fa80 	uxthls.w	sl, r0
   1584a:	fa1f fa86 	uxthhi.w	sl, r6
		net_buf_add_mem(frag, value8, count);
   1584e:	4639      	mov	r1, r7
   15850:	4652      	mov	r2, sl
   15852:	4620      	mov	r0, r4
   15854:	f7ff ffca 	bl	157ec <net_buf_simple_add_mem>
		if (len == 0) {
   15858:	ebb6 060a 	subs.w	r6, r6, sl
		added_len += count;
   1585c:	44d1      	add	r9, sl
		value8 += count;
   1585e:	4457      	add	r7, sl
		if (len == 0) {
   15860:	d00a      	beq.n	15878 <net_buf_append_bytes+0x54>
		frag = allocate_cb(timeout, user_data);
   15862:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   15866:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   15868:	47a8      	blx	r5
		if (!frag) {
   1586a:	4604      	mov	r4, r0
   1586c:	b120      	cbz	r0, 15878 <net_buf_append_bytes+0x54>
		net_buf_frag_add(buf, frag);
   1586e:	4601      	mov	r1, r0
   15870:	4640      	mov	r0, r8
   15872:	f7f7 fee3 	bl	d63c <net_buf_frag_add>
	do {
   15876:	e7e0      	b.n	1583a <net_buf_append_bytes+0x16>
}
   15878:	4648      	mov	r0, r9
   1587a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001587e <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1587e:	6843      	ldr	r3, [r0, #4]
}
   15880:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   15882:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   15884:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   15886:	600b      	str	r3, [r1, #0]
}
   15888:	4770      	bx	lr

0001588a <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1588a:	6843      	ldr	r3, [r0, #4]
   1588c:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1588e:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   15890:	4042      	eors	r2, r0
   15892:	400a      	ands	r2, r1
   15894:	4042      	eors	r2, r0
    p_reg->OUT = value;
   15896:	605a      	str	r2, [r3, #4]
}
   15898:	2000      	movs	r0, #0
   1589a:	4770      	bx	lr

0001589c <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1589c:	6843      	ldr	r3, [r0, #4]
}
   1589e:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   158a0:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   158a2:	6099      	str	r1, [r3, #8]
}
   158a4:	4770      	bx	lr

000158a6 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   158a6:	6843      	ldr	r3, [r0, #4]
}
   158a8:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   158aa:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   158ac:	60d9      	str	r1, [r3, #12]
}
   158ae:	4770      	bx	lr

000158b0 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   158b0:	6843      	ldr	r3, [r0, #4]
}
   158b2:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   158b4:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   158b6:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   158b8:	404b      	eors	r3, r1
    p_reg->OUT = value;
   158ba:	6053      	str	r3, [r2, #4]
}
   158bc:	4770      	bx	lr

000158be <nrf_gpio_cfg_sense_set>:
{
   158be:	b513      	push	{r0, r1, r4, lr}
   158c0:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   158c2:	a801      	add	r0, sp, #4
{
   158c4:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   158c6:	f7f7 ffa5 	bl	d814 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   158ca:	9b01      	ldr	r3, [sp, #4]
   158cc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   158d0:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   158d4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   158d8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   158dc:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   158e0:	b002      	add	sp, #8
   158e2:	bd10      	pop	{r4, pc}

000158e4 <check_level_trigger_pins>:
{
   158e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u32_t bit = 1U << pin;
   158e8:	2601      	movs	r6, #1
	u32_t pin = 0U;
   158ea:	2700      	movs	r7, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   158ec:	68c3      	ldr	r3, [r0, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   158ee:	f8d0 8004 	ldr.w	r8, [r0, #4]
	u32_t out = data->int_en & data->pin_int_en;
   158f2:	e9d3 2403 	ldrd	r2, r4, [r3, #12]
   158f6:	4014      	ands	r4, r2
	out &= ~data->trig_edge & ~data->double_edge;
   158f8:	e9d3 2106 	ldrd	r2, r1, [r3, #24]
   158fc:	430a      	orrs	r2, r1
   158fe:	ea24 0402 	bic.w	r4, r4, r2
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   15902:	f8d8 2004 	ldr.w	r2, [r8, #4]
	u32_t pin_states = ~(port_in ^ data->int_active_level);
   15906:	695b      	ldr	r3, [r3, #20]
    return p_reg->IN;
   15908:	6915      	ldr	r5, [r2, #16]
   1590a:	405d      	eors	r5, r3
	u32_t out = pin_states & level_pins;
   1590c:	ea24 0505 	bic.w	r5, r4, r5
	while (level_pins) {
   15910:	b914      	cbnz	r4, 15918 <check_level_trigger_pins+0x34>
}
   15912:	4628      	mov	r0, r5
   15914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   15918:	4234      	tst	r4, r6
   1591a:	d00a      	beq.n	15932 <check_level_trigger_pins+0x4e>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1591c:	f898 3008 	ldrb.w	r3, [r8, #8]
   15920:	f007 001f 	and.w	r0, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   15924:	2100      	movs	r1, #0
   15926:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   1592a:	f7ff ffc8 	bl	158be <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1592e:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   15932:	3701      	adds	r7, #1
		bit <<= 1;
   15934:	0076      	lsls	r6, r6, #1
   15936:	e7eb      	b.n	15910 <check_level_trigger_pins+0x2c>

00015938 <gpio_nrfx_pin_disable_callback>:
	WRITE_BIT(data->int_en, pin, enable);
   15938:	2301      	movs	r3, #1
{
   1593a:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
   1593c:	68c4      	ldr	r4, [r0, #12]
	WRITE_BIT(data->int_en, pin, enable);
   1593e:	fa03 f201 	lsl.w	r2, r3, r1
   15942:	6923      	ldr	r3, [r4, #16]
   15944:	ea23 0302 	bic.w	r3, r3, r2
   15948:	6123      	str	r3, [r4, #16]
}
   1594a:	bc10      	pop	{r4}
	return gpiote_pin_int_cfg(port, pin);
   1594c:	f7f8 b844 	b.w	d9d8 <gpiote_pin_int_cfg>

00015950 <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
   15950:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   15954:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   15958:	4606      	mov	r6, r0
   1595a:	460f      	mov	r7, r1
   1595c:	4690      	mov	r8, r2
   1595e:	4699      	mov	r9, r3
	struct gpio_nrfx_data *data = get_port_data(port);
   15960:	68c4      	ldr	r4, [r0, #12]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   15962:	d13a      	bne.n	159da <gpio_nrfx_pin_interrupt_configure+0x8a>
	u32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   15964:	6843      	ldr	r3, [r0, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15966:	a801      	add	r0, sp, #4
   15968:	7a1a      	ldrb	r2, [r3, #8]
   1596a:	f001 031f 	and.w	r3, r1, #31
   1596e:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   15972:	9301      	str	r3, [sp, #4]
   15974:	f7f7 ff4e 	bl	d814 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   15978:	9b01      	ldr	r3, [sp, #4]
   1597a:	3380      	adds	r3, #128	; 0x80
   1597c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   15980:	07db      	lsls	r3, r3, #31
   15982:	d434      	bmi.n	159ee <gpio_nrfx_pin_interrupt_configure+0x9e>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   15984:	2501      	movs	r5, #1
   15986:	68e3      	ldr	r3, [r4, #12]
   15988:	40bd      	lsls	r5, r7
   1598a:	431d      	orrs	r5, r3
   1598c:	60e5      	str	r5, [r4, #12]
	WRITE_BIT(data->int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1598e:	2501      	movs	r5, #1
   15990:	6923      	ldr	r3, [r4, #16]
   15992:	40bd      	lsls	r5, r7
   15994:	f5b8 5f00 	cmp.w	r8, #8192	; 0x2000
   15998:	bf14      	ite	ne
   1599a:	432b      	orrne	r3, r5
   1599c:	43ab      	biceq	r3, r5
   1599e:	6123      	str	r3, [r4, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   159a0:	69a3      	ldr	r3, [r4, #24]
   159a2:	f5b8 3fa0 	cmp.w	r8, #81920	; 0x14000
   159a6:	bf0c      	ite	eq
   159a8:	432b      	orreq	r3, r5
   159aa:	43ab      	bicne	r3, r5
   159ac:	61a3      	str	r3, [r4, #24]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   159ae:	69e3      	ldr	r3, [r4, #28]
   159b0:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
   159b4:	bf0c      	ite	eq
   159b6:	432b      	orreq	r3, r5
   159b8:	43ab      	bicne	r3, r5
   159ba:	61e3      	str	r3, [r4, #28]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   159bc:	6963      	ldr	r3, [r4, #20]
   159be:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
   159c2:	bf0c      	ite	eq
   159c4:	431d      	orreq	r5, r3
   159c6:	ea23 0505 	bicne.w	r5, r3, r5
	return gpiote_pin_int_cfg(port, pin);
   159ca:	4639      	mov	r1, r7
   159cc:	4630      	mov	r0, r6
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   159ce:	6165      	str	r5, [r4, #20]
	return gpiote_pin_int_cfg(port, pin);
   159d0:	f7f8 f802 	bl	d9d8 <gpiote_pin_int_cfg>
}
   159d4:	b003      	add	sp, #12
   159d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   159da:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   159de:	d1d1      	bne.n	15984 <gpio_nrfx_pin_interrupt_configure+0x34>
   159e0:	2501      	movs	r5, #1
   159e2:	fa05 f301 	lsl.w	r3, r5, r1
   159e6:	68e5      	ldr	r5, [r4, #12]
   159e8:	ea25 0503 	bic.w	r5, r5, r3
   159ec:	e7ce      	b.n	1598c <gpio_nrfx_pin_interrupt_configure+0x3c>
		return -ENOTSUP;
   159ee:	f06f 0022 	mvn.w	r0, #34	; 0x22
   159f2:	e7ef      	b.n	159d4 <gpio_nrfx_pin_interrupt_configure+0x84>

000159f4 <cfg_level_pins>:
{
   159f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u32_t bit = 1U << pin;
   159f8:	2701      	movs	r7, #1
	u32_t pin = 0U;
   159fa:	2600      	movs	r6, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
   159fc:	68c5      	ldr	r5, [r0, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   159fe:	f8d0 8004 	ldr.w	r8, [r0, #4]
	u32_t out = data->int_en & data->pin_int_en;
   15a02:	e9d5 3403 	ldrd	r3, r4, [r5, #12]
   15a06:	401c      	ands	r4, r3
	out &= ~data->trig_edge & ~data->double_edge;
   15a08:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
   15a0c:	4313      	orrs	r3, r2
   15a0e:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
   15a12:	b90c      	cbnz	r4, 15a18 <cfg_level_pins+0x24>
}
   15a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   15a18:	4227      	tst	r7, r4
   15a1a:	d010      	beq.n	15a3e <cfg_level_pins+0x4a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   15a1c:	6969      	ldr	r1, [r5, #20]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   15a1e:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   15a22:	40f1      	lsrs	r1, r6
   15a24:	f001 0101 	and.w	r1, r1, #1
   15a28:	f1c1 0103 	rsb	r1, r1, #3
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   15a2c:	f006 001f 	and.w	r0, r6, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   15a30:	b2c9      	uxtb	r1, r1
   15a32:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   15a36:	f7ff ff42 	bl	158be <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   15a3a:	ea24 0407 	bic.w	r4, r4, r7
		++pin;
   15a3e:	3601      	adds	r6, #1
		bit <<= 1;
   15a40:	007f      	lsls	r7, r7, #1
   15a42:	e7e6      	b.n	15a12 <cfg_level_pins+0x1e>

00015a44 <gpio_nrfx_pin_enable_callback>:
	WRITE_BIT(data->int_en, pin, enable);
   15a44:	2301      	movs	r3, #1
{
   15a46:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
   15a48:	68c4      	ldr	r4, [r0, #12]
	WRITE_BIT(data->int_en, pin, enable);
   15a4a:	fa03 f201 	lsl.w	r2, r3, r1
   15a4e:	6923      	ldr	r3, [r4, #16]
   15a50:	4313      	orrs	r3, r2
   15a52:	6123      	str	r3, [r4, #16]
}
   15a54:	bc10      	pop	{r4}
	return gpiote_pin_int_cfg(port, pin);
   15a56:	f7f7 bfbf 	b.w	d9d8 <gpiote_pin_int_cfg>

00015a5a <vipm_nrf_max_data_size_get>:
static inline int z_impl_ipm_max_data_size_get(struct device *ipmdev)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->driver_api;

	return api->max_data_size_get(ipmdev);
   15a5a:	6883      	ldr	r3, [r0, #8]
   15a5c:	689b      	ldr	r3, [r3, #8]
   15a5e:	4718      	bx	r3

00015a60 <vipm_nrf_max_id_val_get>:
}
   15a60:	2000      	movs	r0, #0
   15a62:	4770      	bx	lr

00015a64 <vipm_nrf_1_set_enabled>:
UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   15a64:	b508      	push	{r3, lr}
   15a66:	b139      	cbz	r1, 15a78 <vipm_nrf_1_set_enabled+0x14>
   15a68:	202a      	movs	r0, #42	; 0x2a
   15a6a:	f7ee f8d1 	bl	3c10 <arch_irq_enable>
   15a6e:	2001      	movs	r0, #1
   15a70:	f7f8 fc22 	bl	e2b8 <nrfx_ipc_receive_event_enable>
   15a74:	2000      	movs	r0, #0
   15a76:	bd08      	pop	{r3, pc}
   15a78:	2001      	movs	r0, #1
   15a7a:	f7f8 fc3f 	bl	e2fc <nrfx_ipc_receive_event_disable>
   15a7e:	e7f9      	b.n	15a74 <vipm_nrf_1_set_enabled+0x10>

00015a80 <flash_nrf_write_protection>:
}
   15a80:	2000      	movs	r0, #0
   15a82:	4770      	bx	lr

00015a84 <is_regular_addr_valid>:
{
   15a84:	b538      	push	{r3, r4, r5, lr}
   15a86:	4604      	mov	r4, r0
   15a88:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   15a8a:	f000 fa16 	bl	15eba <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   15a8e:	4284      	cmp	r4, r0
   15a90:	d209      	bcs.n	15aa6 <is_regular_addr_valid+0x22>
   15a92:	2c00      	cmp	r4, #0
   15a94:	db07      	blt.n	15aa6 <is_regular_addr_valid+0x22>
	    addr < 0 ||
   15a96:	42a8      	cmp	r0, r5
   15a98:	d305      	bcc.n	15aa6 <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   15a9a:	442c      	add	r4, r5
	    len > flash_size ||
   15a9c:	4284      	cmp	r4, r0
   15a9e:	bf8c      	ite	hi
   15aa0:	2000      	movhi	r0, #0
   15aa2:	2001      	movls	r0, #1
}
   15aa4:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   15aa6:	2000      	movs	r0, #0
   15aa8:	e7fc      	b.n	15aa4 <is_regular_addr_valid+0x20>

00015aaa <flash_nrf_read>:
{
   15aaa:	b570      	push	{r4, r5, r6, lr}
   15aac:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   15aae:	4619      	mov	r1, r3
   15ab0:	4628      	mov	r0, r5
{
   15ab2:	4616      	mov	r6, r2
   15ab4:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   15ab6:	f7ff ffe5 	bl	15a84 <is_regular_addr_valid>
   15aba:	b138      	cbz	r0, 15acc <flash_nrf_read+0x22>
	if (!len) {
   15abc:	b14c      	cbz	r4, 15ad2 <flash_nrf_read+0x28>
	memcpy(data, (void *)addr, len);
   15abe:	4622      	mov	r2, r4
   15ac0:	4629      	mov	r1, r5
   15ac2:	4630      	mov	r0, r6
   15ac4:	f7fd fe35 	bl	13732 <memcpy>
	return 0;
   15ac8:	2000      	movs	r0, #0
}
   15aca:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   15acc:	f06f 0015 	mvn.w	r0, #21
   15ad0:	e7fb      	b.n	15aca <flash_nrf_read+0x20>
		return 0;
   15ad2:	4620      	mov	r0, r4
   15ad4:	e7f9      	b.n	15aca <flash_nrf_read+0x20>

00015ad6 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
   15ad6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   15ada:	461e      	mov	r6, r3
	off_t group_offs = 0;
	u32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
   15adc:	6883      	ldr	r3, [r0, #8]
{
   15ade:	460c      	mov	r4, r1
	api->page_layout(dev, &layout, &layout_size);
   15ae0:	691b      	ldr	r3, [r3, #16]
   15ae2:	4669      	mov	r1, sp
{
   15ae4:	4617      	mov	r7, r2
	api->page_layout(dev, &layout, &layout_size);
   15ae6:	aa01      	add	r2, sp, #4
   15ae8:	4798      	blx	r3

	while (layout_size--) {
   15aea:	e9dd 1000 	ldrd	r1, r0, [sp]
   15aee:	2300      	movs	r3, #0
	off_t end = 0;
   15af0:	461d      	mov	r5, r3
	off_t group_offs = 0;
   15af2:	469e      	mov	lr, r3
	size_t page_count = 0;
   15af4:	469c      	mov	ip, r3
   15af6:	f100 38ff 	add.w	r8, r0, #4294967295
	while (layout_size--) {
   15afa:	f1b8 3fff 	cmp.w	r8, #4294967295
   15afe:	d102      	bne.n	15b06 <flash_get_page_info+0x30>
		page_count += layout->pages_count;

		layout++;
	}

	return -EINVAL; /* page of the index doesn't exist */
   15b00:	f06f 0015 	mvn.w	r0, #21
   15b04:	e018      	b.n	15b38 <flash_get_page_info+0x62>
		if (use_addr) {
   15b06:	680a      	ldr	r2, [r1, #0]
   15b08:	b1cf      	cbz	r7, 15b3e <flash_get_page_info+0x68>
			end += layout->pages_count * layout->pages_size;
   15b0a:	6848      	ldr	r0, [r1, #4]
   15b0c:	fb00 5502 	mla	r5, r0, r2, r5
		if (offs < end) {
   15b10:	42a5      	cmp	r5, r4
   15b12:	f108 38ff 	add.w	r8, r8, #4294967295
   15b16:	dd17      	ble.n	15b48 <flash_get_page_info+0x72>
   15b18:	b103      	cbz	r3, 15b1c <flash_get_page_info+0x46>
   15b1a:	9100      	str	r1, [sp, #0]
			info->size = layout->pages_size;
   15b1c:	9b00      	ldr	r3, [sp, #0]
   15b1e:	685b      	ldr	r3, [r3, #4]
   15b20:	6073      	str	r3, [r6, #4]
			if (use_addr) {
   15b22:	b177      	cbz	r7, 15b42 <flash_get_page_info+0x6c>
				num_in_group = (offs - group_offs) /
   15b24:	eba4 040e 	sub.w	r4, r4, lr
   15b28:	fbb4 f4f3 	udiv	r4, r4, r3
			return 0;
   15b2c:	2000      	movs	r0, #0
			info->start_offset = group_offs +
   15b2e:	fb04 e303 	mla	r3, r4, r3, lr
			info->index = page_count + num_in_group;
   15b32:	4464      	add	r4, ip
			info->start_offset = group_offs +
   15b34:	6033      	str	r3, [r6, #0]
			info->index = page_count + num_in_group;
   15b36:	60b4      	str	r4, [r6, #8]
}
   15b38:	b002      	add	sp, #8
   15b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			end += layout->pages_count;
   15b3e:	4415      	add	r5, r2
   15b40:	e7e6      	b.n	15b10 <flash_get_page_info+0x3a>
				num_in_group = offs - page_count;
   15b42:	eba4 040c 	sub.w	r4, r4, ip
   15b46:	e7f1      	b.n	15b2c <flash_get_page_info+0x56>
		group_offs += layout->pages_count * layout->pages_size;
   15b48:	684b      	ldr	r3, [r1, #4]
		page_count += layout->pages_count;
   15b4a:	4494      	add	ip, r2
		group_offs += layout->pages_count * layout->pages_size;
   15b4c:	fb03 ee02 	mla	lr, r3, r2, lr
		layout++;
   15b50:	3108      	adds	r1, #8
   15b52:	2301      	movs	r3, #1
   15b54:	e7d1      	b.n	15afa <flash_get_page_info+0x24>

00015b56 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(struct device *dev, off_t offs,
				      struct flash_pages_info *info)
{
   15b56:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, true, info);
   15b58:	2201      	movs	r2, #1
   15b5a:	f7ff bfbc 	b.w	15ad6 <flash_get_page_info>

00015b5e <flash_page_foreach>:

	return count;
}

void flash_page_foreach(struct device *dev, flash_page_cb cb, void *data)
{
   15b5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->driver_api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
   15b62:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
   15b64:	6883      	ldr	r3, [r0, #8]
{
   15b66:	b086      	sub	sp, #24
   15b68:	4688      	mov	r8, r1
   15b6a:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   15b6c:	691b      	ldr	r3, [r3, #16]
   15b6e:	aa02      	add	r2, sp, #8
   15b70:	a901      	add	r1, sp, #4
   15b72:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
   15b74:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   15b76:	4625      	mov	r5, r4
   15b78:	9b02      	ldr	r3, [sp, #8]
   15b7a:	42ab      	cmp	r3, r5
   15b7c:	d802      	bhi.n	15b84 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   15b7e:	b006      	add	sp, #24
   15b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
   15b84:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
   15b86:	9f01      	ldr	r7, [sp, #4]
   15b88:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
   15b8c:	687b      	ldr	r3, [r7, #4]
   15b8e:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   15b90:	683a      	ldr	r2, [r7, #0]
   15b92:	eb0a 0306 	add.w	r3, sl, r6
   15b96:	42b2      	cmp	r2, r6
   15b98:	d802      	bhi.n	15ba0 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   15b9a:	469a      	mov	sl, r3
   15b9c:	3501      	adds	r5, #1
   15b9e:	e7eb      	b.n	15b78 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   15ba0:	4649      	mov	r1, r9
   15ba2:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   15ba4:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   15ba6:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   15ba8:	47c0      	blx	r8
   15baa:	2800      	cmp	r0, #0
   15bac:	d0e7      	beq.n	15b7e <flash_page_foreach+0x20>
			off += page_info.size;
   15bae:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   15bb0:	3601      	adds	r6, #1
			off += page_info.size;
   15bb2:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   15bb4:	e7ec      	b.n	15b90 <flash_page_foreach+0x32>

00015bb6 <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   15bb6:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   15bb8:	6843      	ldr	r3, [r0, #4]
	if (data->int_driven->disable_tx_irq &&
   15bba:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   15bbc:	681b      	ldr	r3, [r3, #0]
	if (data->int_driven->disable_tx_irq &&
   15bbe:	7b91      	ldrb	r1, [r2, #14]
   15bc0:	b159      	cbz	r1, 15bda <uarte_nrfx_isr_int+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15bc2:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   15bc6:	b141      	cbz	r1, 15bda <uarte_nrfx_isr_int+0x24>
    p_reg->INTENCLR = mask;
   15bc8:	f44f 7180 	mov.w	r1, #256	; 0x100
   15bcc:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15bd0:	2101      	movs	r1, #1
   15bd2:	60d9      	str	r1, [r3, #12]
		data->int_driven->disable_tx_irq = false;
   15bd4:	2300      	movs	r3, #0
   15bd6:	7393      	strb	r3, [r2, #14]
		return;
   15bd8:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15bda:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   15bde:	b111      	cbz	r1, 15be6 <uarte_nrfx_isr_int+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15be0:	2100      	movs	r1, #0
   15be2:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   15be6:	6813      	ldr	r3, [r2, #0]
   15be8:	b10b      	cbz	r3, 15bee <uarte_nrfx_isr_int+0x38>
		data->int_driven->cb(data->int_driven->cb_data);
   15bea:	6850      	ldr	r0, [r2, #4]
   15bec:	4718      	bx	r3
}
   15bee:	4770      	bx	lr

00015bf0 <uarte_nrfx_config_get>:

static int uarte_nrfx_config_get(struct device *dev, struct uart_config *cfg)
{
   15bf0:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   15bf2:	68c2      	ldr	r2, [r0, #12]
   15bf4:	e892 0003 	ldmia.w	r2, {r0, r1}
   15bf8:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
}
   15bfc:	2000      	movs	r0, #0
   15bfe:	4770      	bx	lr

00015c00 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   15c00:	6843      	ldr	r3, [r0, #4]
   15c02:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   15c04:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   15c08:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
static int uarte_nrfx_err_check(struct device *dev)
{
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	/* register bitfields maps to the defines in uart.h */
	return nrf_uarte_errorsrc_get_and_clear(uarte);
}
   15c0c:	4770      	bx	lr

00015c0e <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   15c0e:	6843      	ldr	r3, [r0, #4]
 * @return 0 if a character arrived, -1 if the input buffer is empty.
 */
static int uarte_nrfx_poll_in(struct device *dev, unsigned char *c)
{

	const struct uarte_nrfx_data *data = get_dev_data(dev);
   15c10:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   15c12:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15c14:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (data->async) {
		return -ENOTSUP;
	}
#endif

	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   15c18:	b138      	cbz	r0, 15c2a <uarte_nrfx_poll_in+0x1c>
		return -1;
	}

	*c = data->rx_data;
   15c1a:	7c12      	ldrb	r2, [r2, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15c1c:	2000      	movs	r0, #0
   15c1e:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15c20:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15c22:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15c26:	601a      	str	r2, [r3, #0]

	/* clear the interrupt */
	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);

	return 0;
   15c28:	4770      	bx	lr
		return -1;
   15c2a:	f04f 30ff 	mov.w	r0, #4294967295
}
   15c2e:	4770      	bx	lr

00015c30 <uarte_nrfx_fifo_fill>:
#ifdef UARTE_INTERRUPT_DRIVEN
/** Interrupt driven FIFO fill function */
static int uarte_nrfx_fifo_fill(struct device *dev,
				const u8_t *tx_data,
				int len)
{
   15c30:	4603      	mov	r3, r0
	return config->uarte_regs;
   15c32:	6840      	ldr	r0, [r0, #4]
{
   15c34:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   15c36:	6804      	ldr	r4, [r0, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15c38:	f8d4 0120 	ldr.w	r0, [r4, #288]	; 0x120
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   15c3c:	b190      	cbz	r0, 15c64 <uarte_nrfx_fifo_fill+0x34>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   15c3e:	68dd      	ldr	r5, [r3, #12]
		return 0;
	}

	if (len > data->int_driven->tx_buff_size) {
   15c40:	68ab      	ldr	r3, [r5, #8]
   15c42:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15c44:	2300      	movs	r3, #0
   15c46:	4290      	cmp	r0, r2
   15c48:	bfa8      	it	ge
   15c4a:	4610      	movge	r0, r2
   15c4c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
	}

	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDTX);

	/* Copy data to RAM buffer for EasyDMA transfer */
	for (int i = 0; i < len; i++) {
   15c50:	68aa      	ldr	r2, [r5, #8]
   15c52:	4283      	cmp	r3, r0
   15c54:	6892      	ldr	r2, [r2, #8]
   15c56:	db06      	blt.n	15c66 <uarte_nrfx_fifo_fill+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15c58:	2301      	movs	r3, #1

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   15c5a:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   15c5e:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15c62:	60a3      	str	r3, [r4, #8]
	nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, len);

	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTTX);

	return len;
}
   15c64:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   15c66:	5cce      	ldrb	r6, [r1, r3]
   15c68:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
   15c6a:	3301      	adds	r3, #1
   15c6c:	e7f0      	b.n	15c50 <uarte_nrfx_fifo_fill+0x20>

00015c6e <uarte_nrfx_fifo_read>:
	return config->uarte_regs;
   15c6e:	6842      	ldr	r2, [r0, #4]

/** Interrupt driven FIFO read function */
static int uarte_nrfx_fifo_read(struct device *dev,
				u8_t *rx_data,
				const int size)
{
   15c70:	4603      	mov	r3, r0
	return config->uarte_regs;
   15c72:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15c74:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
	int num_rx = 0;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	const struct uarte_nrfx_data *data = get_dev_data(dev);

	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   15c78:	b138      	cbz	r0, 15c8a <uarte_nrfx_fifo_read+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15c7a:	2000      	movs	r0, #0
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   15c7c:	68db      	ldr	r3, [r3, #12]
   15c7e:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15c82:	2001      	movs	r0, #1
		/* Clear the interrupt */
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

		/* Receive a character */
		rx_data[num_rx++] = (u8_t)data->rx_data;
   15c84:	7c1b      	ldrb	r3, [r3, #16]
   15c86:	700b      	strb	r3, [r1, #0]
   15c88:	6010      	str	r0, [r2, #0]

		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
	}

	return num_rx;
}
   15c8a:	4770      	bx	lr

00015c8c <uarte_nrfx_irq_tx_enable>:
static void uarte_nrfx_irq_tx_enable(struct device *dev)
{
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	data->int_driven->disable_tx_irq = false;
   15c8c:	2100      	movs	r1, #0
   15c8e:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   15c90:	6843      	ldr	r3, [r0, #4]
	data->int_driven->disable_tx_irq = false;
   15c92:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   15c94:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   15c96:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   15c98:	f44f 7280 	mov.w	r2, #256	; 0x100
   15c9c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
}
   15ca0:	4770      	bx	lr

00015ca2 <uarte_nrfx_irq_tx_disable>:
/** Interrupt driven transfer disabling function */
static void uarte_nrfx_irq_tx_disable(struct device *dev)
{
	struct uarte_nrfx_data *data = get_dev_data(dev);
	/* TX IRQ will be disabled after current transmission is finished */
	data->int_driven->disable_tx_irq = true;
   15ca2:	2201      	movs	r2, #1
   15ca4:	68c3      	ldr	r3, [r0, #12]
   15ca6:	689b      	ldr	r3, [r3, #8]
   15ca8:	739a      	strb	r2, [r3, #14]
}
   15caa:	4770      	bx	lr

00015cac <uarte_nrfx_irq_tx_ready_complete>:
	/* ENDTX flag is always on so that ISR is called when we enable TX IRQ.
	 * Because of that we have to explicitly check if ENDTX interrupt is
	 * enabled, otherwise this function would always return true no matter
	 * what would be the source of interrupt.
	 */
	return !data->int_driven->disable_tx_irq &&
   15cac:	68c3      	ldr	r3, [r0, #12]
   15cae:	689b      	ldr	r3, [r3, #8]
   15cb0:	7b9b      	ldrb	r3, [r3, #14]
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   15cb2:	b94b      	cbnz	r3, 15cc8 <uarte_nrfx_irq_tx_ready_complete+0x1c>
	return config->uarte_regs;
   15cb4:	6843      	ldr	r3, [r0, #4]
   15cb6:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15cb8:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return !data->int_driven->disable_tx_irq &&
   15cbc:	b128      	cbz	r0, 15cca <uarte_nrfx_irq_tx_ready_complete+0x1e>
    return p_reg->INTENSET & mask;
   15cbe:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   15cc2:	f3c0 2000 	ubfx	r0, r0, #8, #1
   15cc6:	4770      	bx	lr
   15cc8:	2000      	movs	r0, #0
	       nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK);
}
   15cca:	4770      	bx	lr

00015ccc <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   15ccc:	6843      	ldr	r3, [r0, #4]
   15cce:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15cd0:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
static int uarte_nrfx_irq_rx_ready(struct device *dev)
{
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX);
}
   15cd4:	3800      	subs	r0, #0
   15cd6:	bf18      	it	ne
   15cd8:	2001      	movne	r0, #1
   15cda:	4770      	bx	lr

00015cdc <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   15cdc:	2210      	movs	r2, #16
	return config->uarte_regs;
   15cde:	6843      	ldr	r3, [r0, #4]
   15ce0:	681b      	ldr	r3, [r3, #0]
   15ce2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
static void uarte_nrfx_irq_rx_enable(struct device *dev)
{
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDRX_MASK);
}
   15ce6:	4770      	bx	lr

00015ce8 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   15ce8:	2210      	movs	r2, #16
	return config->uarte_regs;
   15cea:	6843      	ldr	r3, [r0, #4]
   15cec:	681b      	ldr	r3, [r3, #0]
   15cee:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
static void uarte_nrfx_irq_rx_disable(struct device *dev)
{
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	nrf_uarte_int_disable(uarte, NRF_UARTE_INT_ENDRX_MASK);
}
   15cf2:	4770      	bx	lr

00015cf4 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   15cf4:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   15cf8:	6843      	ldr	r3, [r0, #4]
   15cfa:	681b      	ldr	r3, [r3, #0]
   15cfc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
static void uarte_nrfx_irq_err_enable(struct device *dev)
{
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ERROR_MASK);
}
   15d00:	4770      	bx	lr

00015d02 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   15d02:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   15d06:	6843      	ldr	r3, [r0, #4]
   15d08:	681b      	ldr	r3, [r3, #0]
   15d0a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
static void uarte_nrfx_irq_err_disable(struct device *dev)
{
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	nrf_uarte_int_disable(uarte, NRF_UARTE_INT_ERROR_MASK);
}
   15d0e:	4770      	bx	lr

00015d10 <uarte_nrfx_irq_update>:

/** Interrupt driven interrupt update function */
static int uarte_nrfx_irq_update(struct device *dev)
{
	return 1;
}
   15d10:	2001      	movs	r0, #1
   15d12:	4770      	bx	lr

00015d14 <uarte_nrfx_irq_callback_set>:
					uart_irq_callback_user_data_t cb,
					void *cb_data)
{
	struct uarte_nrfx_data *data = get_dev_data(dev);

	data->int_driven->cb = cb;
   15d14:	68c3      	ldr	r3, [r0, #12]
   15d16:	689b      	ldr	r3, [r3, #8]
	data->int_driven->cb_data = cb_data;
   15d18:	e9c3 1200 	strd	r1, r2, [r3]
}
   15d1c:	4770      	bx	lr

00015d1e <uarte_nrfx_irq_is_pending>:
{
   15d1e:	b508      	push	{r3, lr}
	return config->uarte_regs;
   15d20:	6843      	ldr	r3, [r0, #4]
{
   15d22:	4602      	mov	r2, r0
	return config->uarte_regs;
   15d24:	6819      	ldr	r1, [r3, #0]
    return p_reg->INTENSET & mask;
   15d26:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   15d2a:	05db      	lsls	r3, r3, #23
   15d2c:	d405      	bmi.n	15d3a <uarte_nrfx_irq_is_pending+0x1c>
   15d2e:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   15d32:	f010 0010 	ands.w	r0, r0, #16
   15d36:	d106      	bne.n	15d46 <uarte_nrfx_irq_is_pending+0x28>
}
   15d38:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   15d3a:	f7ff ffb7 	bl	15cac <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   15d3e:	2800      	cmp	r0, #0
   15d40:	d0f5      	beq.n	15d2e <uarte_nrfx_irq_is_pending+0x10>
		||
   15d42:	2001      	movs	r0, #1
   15d44:	e7f8      	b.n	15d38 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   15d46:	4610      	mov	r0, r2
   15d48:	f7ff ffc0 	bl	15ccc <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   15d4c:	3800      	subs	r0, #0
   15d4e:	bf18      	it	ne
   15d50:	2001      	movne	r0, #1
   15d52:	e7f1      	b.n	15d38 <uarte_nrfx_irq_is_pending+0x1a>

00015d54 <uarte_nrfx_poll_out>:
{
   15d54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   15d58:	6843      	ldr	r3, [r0, #4]
{
   15d5a:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   15d5e:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   15d60:	68c6      	ldr	r6, [r0, #12]
	if (!k_is_in_isr()) {
   15d62:	f000 fd65 	bl	16830 <k_is_in_isr>
   15d66:	b9c0      	cbnz	r0, 15d9a <uarte_nrfx_poll_out+0x46>
		lock = &data->poll_out_lock;
   15d68:	2564      	movs	r5, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   15d6a:	f04f 0801 	mov.w	r8, #1
   15d6e:	f106 070c 	add.w	r7, r6, #12
   15d72:	e8d7 3fef 	ldaex	r3, [r7]
   15d76:	2b00      	cmp	r3, #0
   15d78:	d103      	bne.n	15d82 <uarte_nrfx_poll_out+0x2e>
   15d7a:	e8c7 8fe2 	stlex	r2, r8, [r7]
   15d7e:	2a00      	cmp	r2, #0
   15d80:	d1f7      	bne.n	15d72 <uarte_nrfx_poll_out+0x1e>
		while (atomic_cas((atomic_t *) lock,
   15d82:	d00c      	beq.n	15d9e <uarte_nrfx_poll_out+0x4a>
	return z_impl_k_sleep(timeout);
   15d84:	2021      	movs	r0, #33	; 0x21
   15d86:	2100      	movs	r1, #0
   15d88:	3d01      	subs	r5, #1
   15d8a:	f7fa fefd 	bl	10b88 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   15d8e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   15d92:	d1ee      	bne.n	15d72 <uarte_nrfx_poll_out+0x1e>
}
   15d94:	b002      	add	sp, #8
   15d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*lock = 1;
   15d9a:	2301      	movs	r3, #1
   15d9c:	60f3      	str	r3, [r6, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15d9e:	2300      	movs	r3, #0
   15da0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   15da4:	f10d 0307 	add.w	r3, sp, #7
   15da8:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   15dac:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15dae:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    p_reg->TXD.MAXCNT = length;
   15db2:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15db6:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15db8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
   15dbc:	b923      	cbnz	r3, 15dc8 <uarte_nrfx_poll_out+0x74>
   15dbe:	2001      	movs	r0, #1
   15dc0:	f000 f879 	bl	15eb6 <nrfx_busy_wait>
   15dc4:	3d01      	subs	r5, #1
   15dc6:	d1f7      	bne.n	15db8 <uarte_nrfx_poll_out+0x64>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15dc8:	2301      	movs	r3, #1
   15dca:	60e3      	str	r3, [r4, #12]
	*lock = 0;
   15dcc:	2300      	movs	r3, #0
   15dce:	60f3      	str	r3, [r6, #12]
   15dd0:	e7e0      	b.n	15d94 <uarte_nrfx_poll_out+0x40>

00015dd2 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   15dd2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15dd6:	4606      	mov	r6, r0
   15dd8:	2714      	movs	r7, #20
   15dda:	2101      	movs	r1, #1
   15ddc:	2200      	movs	r2, #0
   15dde:	2008      	movs	r0, #8
   15de0:	f7ed ff26 	bl	3c30 <z_arm_irq_priority_set>
   15de4:	2008      	movs	r0, #8
   15de6:	f7ed ff13 	bl	3c10 <arch_irq_enable>
	return config->uarte_regs;
   15dea:	6873      	ldr	r3, [r6, #4]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15dec:	2501      	movs	r5, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15dee:	a801      	add	r0, sp, #4
   15df0:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   15df2:	f8d6 800c 	ldr.w	r8, [r6, #12]
        nrf_gpio_pin_set(pin_number);
   15df6:	9701      	str	r7, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15df8:	f7f8 f91c 	bl	e034 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15dfc:	9b01      	ldr	r3, [sp, #4]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15dfe:	f04f 0a03 	mov.w	sl, #3
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15e02:	fa05 f303 	lsl.w	r3, r5, r3
    p_reg->OUTSET = set_mask;
   15e06:	6083      	str	r3, [r0, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15e08:	a801      	add	r0, sp, #4
   15e0a:	9701      	str	r7, [sp, #4]
   15e0c:	f7f8 f912 	bl	e034 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15e10:	f04f 0b16 	mov.w	fp, #22
   15e14:	9b01      	ldr	r3, [sp, #4]
   15e16:	f04f 0900 	mov.w	r9, #0
   15e1a:	3380      	adds	r3, #128	; 0x80
   15e1c:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15e20:	a801      	add	r0, sp, #4
   15e22:	f8cd b004 	str.w	fp, [sp, #4]
   15e26:	f7f8 f905 	bl	e034 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15e2a:	9b01      	ldr	r3, [sp, #4]
   15e2c:	3380      	adds	r3, #128	; 0x80
   15e2e:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
   15e32:	f8c4 750c 	str.w	r7, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   15e36:	2713      	movs	r7, #19
   15e38:	f8c4 b514 	str.w	fp, [r4, #1300]	; 0x514
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15e3c:	a801      	add	r0, sp, #4
   15e3e:	9701      	str	r7, [sp, #4]
   15e40:	f7f8 f8f8 	bl	e034 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15e44:	9b01      	ldr	r3, [sp, #4]
   15e46:	fa05 f303 	lsl.w	r3, r5, r3
    p_reg->OUTSET = set_mask;
   15e4a:	6083      	str	r3, [r0, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15e4c:	a801      	add	r0, sp, #4
   15e4e:	9701      	str	r7, [sp, #4]
   15e50:	f7f8 f8f0 	bl	e034 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15e54:	9b01      	ldr	r3, [sp, #4]
   15e56:	3380      	adds	r3, #128	; 0x80
   15e58:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   15e5c:	f04f 0a15 	mov.w	sl, #21
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15e60:	a801      	add	r0, sp, #4
   15e62:	f8cd a004 	str.w	sl, [sp, #4]
   15e66:	f7f8 f8e5 	bl	e034 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15e6a:	9b01      	ldr	r3, [sp, #4]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   15e6c:	68f1      	ldr	r1, [r6, #12]
   15e6e:	3380      	adds	r3, #128	; 0x80
   15e70:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   15e74:	f8c4 7508 	str.w	r7, [r4, #1288]	; 0x508
   15e78:	4630      	mov	r0, r6
    p_reg->PSEL.CTS = pselcts;
   15e7a:	f8c4 a510 	str.w	sl, [r4, #1296]	; 0x510
   15e7e:	f7f8 f819 	bl	deb4 <uarte_nrfx_configure>
	if (err) {
   15e82:	b9a0      	cbnz	r0, 15eae <uarte_0_init+0xdc>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   15e84:	2308      	movs	r3, #8
   15e86:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   15e8a:	f108 0310 	add.w	r3, r8, #16
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15e8e:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   15e92:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
   15e96:	f8d8 3008 	ldr.w	r3, [r8, #8]
    p_reg->RXD.MAXCNT = length;
   15e9a:	f8c4 5538 	str.w	r5, [r4, #1336]	; 0x538
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   15e9e:	689b      	ldr	r3, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15ea0:	6025      	str	r5, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   15ea2:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   15ea6:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15eaa:	60a5      	str	r5, [r4, #8]
   15eac:	60e5      	str	r5, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   15eae:	b003      	add	sp, #12
   15eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015eb4 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   15eb4:	4700      	bx	r0

00015eb6 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   15eb6:	f000 bcc1 	b.w	1683c <z_impl_k_busy_wait>

00015eba <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   15eba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   15ebe:	4770      	bx	lr

00015ec0 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   15ec0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   15ec4:	4770      	bx	lr

00015ec6 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   15ec6:	f44f 7080 	mov.w	r0, #256	; 0x100
   15eca:	4770      	bx	lr

00015ecc <metal_device_open>:
{
   15ecc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15ece:	460c      	mov	r4, r1
   15ed0:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
   15ed2:	4606      	mov	r6, r0
   15ed4:	b918      	cbnz	r0, 15ede <metal_device_open+0x12>
		return -EINVAL;
   15ed6:	f06f 0015 	mvn.w	r0, #21
}
   15eda:	b002      	add	sp, #8
   15edc:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
   15ede:	f7fd fbf6 	bl	136ce <strlen>
   15ee2:	2800      	cmp	r0, #0
   15ee4:	d0f7      	beq.n	15ed6 <metal_device_open+0xa>
   15ee6:	2c00      	cmp	r4, #0
   15ee8:	d0f5      	beq.n	15ed6 <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
   15eea:	4620      	mov	r0, r4
   15eec:	f7fd fbef 	bl	136ce <strlen>
   15ef0:	2800      	cmp	r0, #0
   15ef2:	d0f0      	beq.n	15ed6 <metal_device_open+0xa>
   15ef4:	2d00      	cmp	r5, #0
   15ef6:	d0ee      	beq.n	15ed6 <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
   15ef8:	4630      	mov	r0, r6
   15efa:	a901      	add	r1, sp, #4
   15efc:	f7f8 faf2 	bl	e4e4 <metal_bus_find>
	if (error)
   15f00:	2800      	cmp	r0, #0
   15f02:	d1ea      	bne.n	15eda <metal_device_open+0xe>
	if (!bus->ops.dev_open)
   15f04:	9801      	ldr	r0, [sp, #4]
   15f06:	6883      	ldr	r3, [r0, #8]
   15f08:	b11b      	cbz	r3, 15f12 <metal_device_open+0x46>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   15f0a:	462a      	mov	r2, r5
   15f0c:	4621      	mov	r1, r4
   15f0e:	4798      	blx	r3
	if (error)
   15f10:	e7e3      	b.n	15eda <metal_device_open+0xe>
		return -ENODEV;
   15f12:	f06f 0012 	mvn.w	r0, #18
   15f16:	e7e0      	b.n	15eda <metal_device_open+0xe>

00015f18 <metal_io_block_read>:
	metal_sys_io_mem_map(io);
}

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   15f18:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   15f1a:	6804      	ldr	r4, [r0, #0]
   15f1c:	6885      	ldr	r5, [r0, #8]
		: NULL);
   15f1e:	1c66      	adds	r6, r4, #1
   15f20:	d00f      	beq.n	15f42 <metal_io_block_read+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   15f22:	42a9      	cmp	r1, r5
   15f24:	d232      	bcs.n	15f8c <metal_io_block_read+0x74>
		: NULL);
   15f26:	440c      	add	r4, r1
	unsigned char *dest = dst;
	int retlen;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   15f28:	185e      	adds	r6, r3, r1
   15f2a:	42ae      	cmp	r6, r5
		len = io->size - offset;
   15f2c:	bf88      	it	hi
   15f2e:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   15f30:	6a05      	ldr	r5, [r0, #32]
   15f32:	b155      	cbz	r5, 15f4a <metal_io_block_read+0x32>
		retlen = (*io->ops.block_read)(
   15f34:	9300      	str	r3, [sp, #0]
   15f36:	2305      	movs	r3, #5
   15f38:	47a8      	blx	r5
   15f3a:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   15f3c:	4618      	mov	r0, r3
   15f3e:	b002      	add	sp, #8
   15f40:	bd70      	pop	{r4, r5, r6, pc}
	if (offset >= io->size)
   15f42:	42a9      	cmp	r1, r5
   15f44:	d222      	bcs.n	15f8c <metal_io_block_read+0x74>
   15f46:	2400      	movs	r4, #0
   15f48:	e7ee      	b.n	15f28 <metal_io_block_read+0x10>
		atomic_thread_fence(memory_order_seq_cst);
   15f4a:	f3bf 8f5b 	dmb	ish
		while ( len && (
   15f4e:	4621      	mov	r1, r4
   15f50:	4618      	mov	r0, r3
   15f52:	2800      	cmp	r0, #0
   15f54:	d0f2      	beq.n	15f3c <metal_io_block_read+0x24>
			((uintptr_t)dest % sizeof(int)) ||
   15f56:	ea42 0401 	orr.w	r4, r2, r1
   15f5a:	07a4      	lsls	r4, r4, #30
   15f5c:	d10a      	bne.n	15f74 <metal_io_block_read+0x5c>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   15f5e:	2803      	cmp	r0, #3
   15f60:	dc0e      	bgt.n	15f80 <metal_io_block_read+0x68>
   15f62:	3901      	subs	r1, #1
   15f64:	4410      	add	r0, r2
		for (; len != 0; dest++, ptr++, len--)
   15f66:	4282      	cmp	r2, r0
   15f68:	d0e8      	beq.n	15f3c <metal_io_block_read+0x24>
				*(const unsigned char *)ptr;
   15f6a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
			*(unsigned char *)dest =
   15f6e:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   15f72:	e7f8      	b.n	15f66 <metal_io_block_read+0x4e>
				*(const unsigned char *)ptr;
   15f74:	f811 4b01 	ldrb.w	r4, [r1], #1
			len--;
   15f78:	3801      	subs	r0, #1
			*(unsigned char *)dest =
   15f7a:	f802 4b01 	strb.w	r4, [r2], #1
			len--;
   15f7e:	e7e8      	b.n	15f52 <metal_io_block_read+0x3a>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   15f80:	f851 4b04 	ldr.w	r4, [r1], #4
   15f84:	3804      	subs	r0, #4
   15f86:	f842 4b04 	str.w	r4, [r2], #4
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   15f8a:	e7e8      	b.n	15f5e <metal_io_block_read+0x46>
		return -ERANGE;
   15f8c:	f06f 0325 	mvn.w	r3, #37	; 0x25
   15f90:	e7d4      	b.n	15f3c <metal_io_block_read+0x24>

00015f92 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   15f92:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   15f94:	6804      	ldr	r4, [r0, #0]
   15f96:	6885      	ldr	r5, [r0, #8]
		: NULL);
   15f98:	1c66      	adds	r6, r4, #1
   15f9a:	d00e      	beq.n	15fba <metal_io_block_write+0x28>
	return (io->virt != METAL_BAD_VA && offset < io->size
   15f9c:	42a9      	cmp	r1, r5
   15f9e:	d230      	bcs.n	16002 <metal_io_block_write+0x70>
		: NULL);
   15fa0:	440c      	add	r4, r1
	const unsigned char *source = src;
	int retlen;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   15fa2:	185e      	adds	r6, r3, r1
   15fa4:	42ae      	cmp	r6, r5
		len = io->size - offset;
   15fa6:	bf88      	it	hi
   15fa8:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   15faa:	6a45      	ldr	r5, [r0, #36]	; 0x24
   15fac:	b94d      	cbnz	r5, 15fc2 <metal_io_block_write+0x30>
   15fae:	4619      	mov	r1, r3
		retlen = (*io->ops.block_write)(
			io, offset, src, memory_order_seq_cst, len);
	} else {
		while ( len && (
   15fb0:	b991      	cbnz	r1, 15fd8 <metal_io_block_write+0x46>
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
		for (; len != 0; ptr++, source++, len--)
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
   15fb2:	f3bf 8f5b 	dmb	ish
	retlen = len;
   15fb6:	4618      	mov	r0, r3
   15fb8:	e006      	b.n	15fc8 <metal_io_block_write+0x36>
	if (offset >= io->size)
   15fba:	42a9      	cmp	r1, r5
   15fbc:	d221      	bcs.n	16002 <metal_io_block_write+0x70>
   15fbe:	2400      	movs	r4, #0
   15fc0:	e7ef      	b.n	15fa2 <metal_io_block_write+0x10>
		retlen = (*io->ops.block_write)(
   15fc2:	9300      	str	r3, [sp, #0]
   15fc4:	2305      	movs	r3, #5
   15fc6:	47a8      	blx	r5
	}
	return retlen;
}
   15fc8:	b002      	add	sp, #8
   15fca:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
   15fcc:	f812 0b01 	ldrb.w	r0, [r2], #1
			len--;
   15fd0:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
   15fd2:	f804 0b01 	strb.w	r0, [r4], #1
			len--;
   15fd6:	e7eb      	b.n	15fb0 <metal_io_block_write+0x1e>
			((uintptr_t)ptr % sizeof(int)) ||
   15fd8:	ea44 0002 	orr.w	r0, r4, r2
   15fdc:	0780      	lsls	r0, r0, #30
   15fde:	d1f5      	bne.n	15fcc <metal_io_block_write+0x3a>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   15fe0:	2903      	cmp	r1, #3
   15fe2:	dc08      	bgt.n	15ff6 <metal_io_block_write+0x64>
   15fe4:	3a01      	subs	r2, #1
   15fe6:	4421      	add	r1, r4
		for (; len != 0; ptr++, source++, len--)
   15fe8:	428c      	cmp	r4, r1
   15fea:	d0e2      	beq.n	15fb2 <metal_io_block_write+0x20>
				*(const unsigned char *)source;
   15fec:	f812 0f01 	ldrb.w	r0, [r2, #1]!
			*(unsigned char *)ptr =
   15ff0:	f804 0b01 	strb.w	r0, [r4], #1
		for (; len != 0; ptr++, source++, len--)
   15ff4:	e7f8      	b.n	15fe8 <metal_io_block_write+0x56>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   15ff6:	f852 0b04 	ldr.w	r0, [r2], #4
   15ffa:	3904      	subs	r1, #4
   15ffc:	f844 0b04 	str.w	r0, [r4], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   16000:	e7ee      	b.n	15fe0 <metal_io_block_write+0x4e>
		return -ERANGE;
   16002:	f06f 0025 	mvn.w	r0, #37	; 0x25
   16006:	e7df      	b.n	15fc8 <metal_io_block_write+0x36>

00016008 <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   16008:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   1600a:	6804      	ldr	r4, [r0, #0]
   1600c:	461d      	mov	r5, r3
		: NULL);
   1600e:	1c66      	adds	r6, r4, #1
   16010:	6883      	ldr	r3, [r0, #8]
   16012:	d00e      	beq.n	16032 <metal_io_block_set+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   16014:	4299      	cmp	r1, r3
   16016:	d22d      	bcs.n	16074 <metal_io_block_set+0x6c>
		: NULL);
   16018:	440c      	add	r4, r1
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   1601a:	186e      	adds	r6, r5, r1
   1601c:	429e      	cmp	r6, r3
		len = io->size - offset;
	retlen = len;
	if (io->ops.block_set) {
   1601e:	6a86      	ldr	r6, [r0, #40]	; 0x28
		len = io->size - offset;
   16020:	bf88      	it	hi
   16022:	1a5d      	subhi	r5, r3, r1
	if (io->ops.block_set) {
   16024:	b186      	cbz	r6, 16048 <metal_io_block_set+0x40>
		(*io->ops.block_set)(
   16026:	2305      	movs	r3, #5
   16028:	9500      	str	r5, [sp, #0]
   1602a:	47b0      	blx	r6
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   1602c:	4628      	mov	r0, r5
   1602e:	b002      	add	sp, #8
   16030:	bd70      	pop	{r4, r5, r6, pc}
	if (offset >= io->size)
   16032:	4299      	cmp	r1, r3
   16034:	d21e      	bcs.n	16074 <metal_io_block_set+0x6c>
   16036:	2400      	movs	r4, #0
   16038:	e7ef      	b.n	1601a <metal_io_block_set+0x12>
			*(unsigned char *)ptr = (unsigned char) value;
   1603a:	f804 2b01 	strb.w	r2, [r4], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   1603e:	3b01      	subs	r3, #1
   16040:	b923      	cbnz	r3, 1604c <metal_io_block_set+0x44>
		atomic_thread_fence(memory_order_seq_cst);
   16042:	f3bf 8f5b 	dmb	ish
   16046:	e7f1      	b.n	1602c <metal_io_block_set+0x24>
   16048:	462b      	mov	r3, r5
   1604a:	e7f9      	b.n	16040 <metal_io_block_set+0x38>
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   1604c:	07a1      	lsls	r1, r4, #30
   1604e:	d1f4      	bne.n	1603a <metal_io_block_set+0x32>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   16050:	0611      	lsls	r1, r2, #24
   16052:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   16056:	4311      	orrs	r1, r2
   16058:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1605c:	2b03      	cmp	r3, #3
   1605e:	dc05      	bgt.n	1606c <metal_io_block_set+0x64>
   16060:	4423      	add	r3, r4
		for (; len != 0; ptr++, len--)
   16062:	429c      	cmp	r4, r3
   16064:	d0ed      	beq.n	16042 <metal_io_block_set+0x3a>
			*(unsigned char *)ptr = (unsigned char) value;
   16066:	f804 2b01 	strb.w	r2, [r4], #1
		for (; len != 0; ptr++, len--)
   1606a:	e7fa      	b.n	16062 <metal_io_block_set+0x5a>
			*(unsigned int *)ptr = cint;
   1606c:	f844 1b04 	str.w	r1, [r4], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   16070:	3b04      	subs	r3, #4
   16072:	e7f3      	b.n	1605c <metal_io_block_set+0x54>
		return -ERANGE;
   16074:	f06f 0525 	mvn.w	r5, #37	; 0x25
   16078:	e7d8      	b.n	1602c <metal_io_block_set+0x24>

0001607a <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   1607a:	2000      	movs	r0, #0
   1607c:	4770      	bx	lr

0001607e <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   1607e:	b430      	push	{r4, r5}
	if (!io->ops.offset_to_phys) {
   16080:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   16082:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
   16084:	b984      	cbnz	r4, 160a8 <metal_io_phys+0x2a>
		unsigned long page = (io->page_shift >=
   16086:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
		return (io->physmap && offset < io->size
   16088:	6845      	ldr	r5, [r0, #4]
				     0 : offset >> io->page_shift);
   1608a:	291f      	cmp	r1, #31
   1608c:	bf98      	it	ls
   1608e:	fa23 f401 	lsrls.w	r4, r3, r1
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
   16092:	b165      	cbz	r5, 160ae <metal_io_phys+0x30>
		return (io->physmap && offset < io->size
   16094:	6881      	ldr	r1, [r0, #8]
   16096:	428b      	cmp	r3, r1
   16098:	d209      	bcs.n	160ae <metal_io_phys+0x30>
			? io->physmap[page] + (offset & io->page_mask)
   1609a:	6900      	ldr	r0, [r0, #16]
   1609c:	4003      	ands	r3, r0
			: METAL_BAD_PHYS);
   1609e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   160a2:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
   160a4:	bc30      	pop	{r4, r5}
   160a6:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
   160a8:	4623      	mov	r3, r4
}
   160aa:	bc30      	pop	{r4, r5}
	return io->ops.offset_to_phys(io, offset);
   160ac:	4718      	bx	r3
			: METAL_BAD_PHYS);
   160ae:	f04f 30ff 	mov.w	r0, #4294967295
   160b2:	e7f7      	b.n	160a4 <metal_io_phys+0x26>

000160b4 <virtqueue_create>:
{
   160b4:	b570      	push	{r4, r5, r6, lr}
   160b6:	9c06      	ldr	r4, [sp, #24]
		vq->vq_queue_index = id;
   160b8:	8121      	strh	r1, [r4, #8]
		vq->callback = callback;
   160ba:	9904      	ldr	r1, [sp, #16]
		vq->vq_name = name;
   160bc:	e9c4 0200 	strd	r0, r2, [r4]
		vq->vq_nentries = ring->num_descs;
   160c0:	891a      	ldrh	r2, [r3, #8]
		vq->callback = callback;
   160c2:	60e1      	str	r1, [r4, #12]
		vq->notify = notify;
   160c4:	9905      	ldr	r1, [sp, #20]
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   160c6:	1c96      	adds	r6, r2, #2
   160c8:	6121      	str	r1, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   160ca:	e9d3 1500 	ldrd	r1, r5, [r3]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   160ce:	eb01 1302 	add.w	r3, r1, r2, lsl #4
   160d2:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   160d4:	eb03 0346 	add.w	r3, r3, r6, lsl #1
	      align - 1) & ~(align - 1));
   160d8:	1c6e      	adds	r6, r5, #1
   160da:	4433      	add	r3, r6
   160dc:	426d      	negs	r5, r5
   160de:	402b      	ands	r3, r5
	vr->used = (struct vring_used *)
   160e0:	6223      	str	r3, [r4, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_SLAVE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   160e2:	6983      	ldr	r3, [r0, #24]
	vr->desc = (struct vring_desc *)p;
   160e4:	e9c4 2105 	strd	r2, r1, [r4, #20]
		vq->vq_nentries = ring->num_descs;
   160e8:	8162      	strh	r2, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   160ea:	84a2      	strh	r2, [r4, #36]	; 0x24
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   160ec:	b96b      	cbnz	r3, 1610a <virtqueue_create+0x56>
		int i;

		for (i = 0; i < size - 1; i++)
   160ee:	3a01      	subs	r2, #1
   160f0:	4293      	cmp	r3, r2
   160f2:	eb01 1003 	add.w	r0, r1, r3, lsl #4
   160f6:	db0a      	blt.n	1610e <virtqueue_create+0x5a>
			vr->desc[i].next = i + 1;
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   160f8:	2300      	movs	r3, #0
   160fa:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   160fe:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   16102:	7393      	strb	r3, [r2, #14]
   16104:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   16108:	73d3      	strb	r3, [r2, #15]
}
   1610a:	2000      	movs	r0, #0
   1610c:	bd70      	pop	{r4, r5, r6, pc}
			vr->desc[i].next = i + 1;
   1610e:	3301      	adds	r3, #1
   16110:	81c3      	strh	r3, [r0, #14]
		for (i = 0; i < size - 1; i++)
   16112:	e7ed      	b.n	160f0 <virtqueue_create+0x3c>

00016114 <virtqueue_add_buffer>:
{
   16114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   16118:	2700      	movs	r7, #0
		head_idx = vq->vq_desc_head_idx;
   1611a:	f8b0 b02c 	ldrh.w	fp, [r0, #44]	; 0x2c
{
   1611e:	4604      	mov	r4, r0
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   16120:	465d      	mov	r5, fp
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   16122:	46ba      	mov	sl, r7
{
   16124:	b085      	sub	sp, #20
	needed = readable + writable;
   16126:	18d6      	adds	r6, r2, r3
{
   16128:	4691      	mov	r9, r2
		dxp->cookie = cookie;
   1612a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1612c:	eb00 03cb 	add.w	r3, r0, fp, lsl #3
   16130:	635a      	str	r2, [r3, #52]	; 0x34
		dxp->ndescs = needed;
   16132:	871e      	strh	r6, [r3, #56]	; 0x38
		if (i < needed - 1)
   16134:	1e72      	subs	r2, r6, #1
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   16136:	6983      	ldr	r3, [r0, #24]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   16138:	f101 0804 	add.w	r8, r1, #4
		if (i < needed - 1)
   1613c:	9201      	str	r2, [sp, #4]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1613e:	42be      	cmp	r6, r7
   16140:	dc19      	bgt.n	16176 <virtqueue_add_buffer+0x62>
		vq->vq_free_cnt -= needed;
   16142:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   16144:	8962      	ldrh	r2, [r4, #10]
		vq->vq_free_cnt -= needed;
   16146:	1b9e      	subs	r6, r3, r6
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   16148:	69e3      	ldr	r3, [r4, #28]
		vq->vq_desc_head_idx = idx;
   1614a:	85a5      	strh	r5, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   1614c:	84a6      	strh	r6, [r4, #36]	; 0x24
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   1614e:	1e51      	subs	r1, r2, #1
   16150:	885a      	ldrh	r2, [r3, #2]
}
   16152:	2000      	movs	r0, #0
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   16154:	400a      	ands	r2, r1
   16156:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   1615a:	f8a3 b004 	strh.w	fp, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
   1615e:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.avail->idx++;
   16162:	69e2      	ldr	r2, [r4, #28]
   16164:	8853      	ldrh	r3, [r2, #2]
   16166:	3301      	adds	r3, #1
   16168:	8053      	strh	r3, [r2, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   1616a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   1616c:	3301      	adds	r3, #1
   1616e:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   16170:	b005      	add	sp, #20
   16172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   16176:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		dp = &desc[idx];
   16178:	012a      	lsls	r2, r5, #4
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   1617a:	f858 1c04 	ldr.w	r1, [r8, #-4]
   1617e:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   16182:	9302      	str	r3, [sp, #8]
   16184:	6803      	ldr	r3, [r0, #0]
   16186:	9203      	str	r2, [sp, #12]
   16188:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   1618a:	6883      	ldr	r3, [r0, #8]
   1618c:	f108 0808 	add.w	r8, r8, #8
   16190:	4299      	cmp	r1, r3
   16192:	bf28      	it	cs
   16194:	f04f 31ff 	movcs.w	r1, #4294967295
   16198:	f7ff ff71 	bl	1607e <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   1619c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   161a0:	5098      	str	r0, [r3, r2]
		dp->len = buf_list[i].len;
   161a2:	f858 2c08 	ldr.w	r2, [r8, #-8]
			dp->flags |= VRING_DESC_F_NEXT;
   161a6:	f885 a00d 	strb.w	sl, [r5, #13]
		dp->len = buf_list[i].len;
   161aa:	60aa      	str	r2, [r5, #8]
		if (i < needed - 1)
   161ac:	9a01      	ldr	r2, [sp, #4]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   161ae:	f8c5 a004 	str.w	sl, [r5, #4]
		if (i < needed - 1)
   161b2:	4297      	cmp	r7, r2
			dp->flags |= VRING_DESC_F_NEXT;
   161b4:	bfb6      	itet	lt
   161b6:	2201      	movlt	r2, #1
		dp->flags = 0;
   161b8:	f885 a00c 	strbge.w	sl, [r5, #12]
			dp->flags |= VRING_DESC_F_NEXT;
   161bc:	732a      	strblt	r2, [r5, #12]
		if (i >= readable)
   161be:	45b9      	cmp	r9, r7
			dp->flags |= VRING_DESC_F_WRITE;
   161c0:	bfd8      	it	le
   161c2:	89aa      	ldrhle	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   161c4:	f107 0701 	add.w	r7, r7, #1
			dp->flags |= VRING_DESC_F_WRITE;
   161c8:	bfdc      	itt	le
   161ca:	f042 0202 	orrle.w	r2, r2, #2
   161ce:	81aa      	strhle	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   161d0:	89ed      	ldrh	r5, [r5, #14]
   161d2:	e7b4      	b.n	1613e <virtqueue_add_buffer+0x2a>

000161d4 <virtqueue_get_buffer>:
{
   161d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   161d6:	b350      	cbz	r0, 1622e <virtqueue_get_buffer+0x5a>
   161d8:	6a05      	ldr	r5, [r0, #32]
   161da:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   161dc:	886c      	ldrh	r4, [r5, #2]
   161de:	429c      	cmp	r4, r3
   161e0:	d030      	beq.n	16244 <virtqueue_get_buffer+0x70>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   161e2:	1c5c      	adds	r4, r3, #1
   161e4:	85c4      	strh	r4, [r0, #46]	; 0x2e
   161e6:	8944      	ldrh	r4, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
   161e8:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   161ec:	3c01      	subs	r4, #1
   161ee:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
   161f0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   161f4:	686b      	ldr	r3, [r5, #4]
   161f6:	b29e      	uxth	r6, r3
	if (len)
   161f8:	b109      	cbz	r1, 161fe <virtqueue_get_buffer+0x2a>
		*len = uep->len;
   161fa:	68ad      	ldr	r5, [r5, #8]
   161fc:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
   161fe:	f8d0 c018 	ldr.w	ip, [r0, #24]
   16202:	b29b      	uxth	r3, r3
   16204:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
   16208:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   1620c:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
   1620e:	8c87      	ldrh	r7, [r0, #36]	; 0x24
   16210:	442f      	add	r7, r5
	dxp->ndescs--;
   16212:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
   16214:	8487      	strh	r7, [r0, #36]	; 0x24
	dxp->ndescs--;
   16216:	871d      	strh	r5, [r3, #56]	; 0x38
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   16218:	898d      	ldrh	r5, [r1, #12]
   1621a:	076f      	lsls	r7, r5, #29
   1621c:	d50e      	bpl.n	1623c <virtqueue_get_buffer+0x68>
	dp->next = vq->vq_desc_head_idx;
   1621e:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   16220:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
   16222:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
   16224:	8586      	strh	r6, [r0, #44]	; 0x2c
	cookie = vq->vq_descx[desc_idx].cookie;
   16226:	6b58      	ldr	r0, [r3, #52]	; 0x34
	vq->vq_descx[desc_idx].cookie = NULL;
   16228:	6359      	str	r1, [r3, #52]	; 0x34
	if (idx)
   1622a:	b102      	cbz	r2, 1622e <virtqueue_get_buffer+0x5a>
		*idx = used_idx;
   1622c:	8014      	strh	r4, [r2, #0]
}
   1622e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
   16230:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
			dp = &vq->vq_ring.desc[dp->next];
   16232:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
   16234:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
   16236:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
   1623a:	871d      	strh	r5, [r3, #56]	; 0x38
		while (dp->flags & VRING_DESC_F_NEXT) {
   1623c:	898d      	ldrh	r5, [r1, #12]
   1623e:	07ed      	lsls	r5, r5, #31
   16240:	d4f6      	bmi.n	16230 <virtqueue_get_buffer+0x5c>
   16242:	e7ec      	b.n	1621e <virtqueue_get_buffer+0x4a>
		return NULL;
   16244:	2000      	movs	r0, #0
   16246:	e7f2      	b.n	1622e <virtqueue_get_buffer+0x5a>

00016248 <virtqueue_get_available_buffer>:
{
   16248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	atomic_thread_fence(memory_order_seq_cst);
   1624c:	f3bf 8f5b 	dmb	ish
{
   16250:	4617      	mov	r7, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   16252:	69c2      	ldr	r2, [r0, #28]
{
   16254:	460e      	mov	r6, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   16256:	8853      	ldrh	r3, [r2, #2]
   16258:	8e01      	ldrh	r1, [r0, #48]	; 0x30
{
   1625a:	4605      	mov	r5, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1625c:	428b      	cmp	r3, r1
   1625e:	d046      	beq.n	162ee <virtqueue_get_available_buffer+0xa6>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   16260:	1c4b      	adds	r3, r1, #1
   16262:	8603      	strh	r3, [r0, #48]	; 0x30
   16264:	8943      	ldrh	r3, [r0, #10]
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   16266:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   1626a:	3b01      	subs	r3, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   1626c:	400b      	ands	r3, r1
   1626e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   16272:	889a      	ldrh	r2, [r3, #4]
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   16274:	6983      	ldr	r3, [r0, #24]
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   16276:	b291      	uxth	r1, r2
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   16278:	eb03 1301 	add.w	r3, r3, r1, lsl #4
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   1627c:	8032      	strh	r2, [r6, #0]
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   1627e:	f8d3 9000 	ldr.w	r9, [r3]
	if (!io->ops.phys_to_offset) {
   16282:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
   16286:	bb5b      	cbnz	r3, 162e0 <virtqueue_get_available_buffer+0x98>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   16288:	f8d8 4010 	ldr.w	r4, [r8, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   1628c:	1c62      	adds	r2, r4, #1
   1628e:	bf09      	itett	eq
   16290:	f8d8 3004 	ldreq.w	r3, [r8, #4]
   16294:	ea09 0404 	andne.w	r4, r9, r4
   16298:	681c      	ldreq	r4, [r3, #0]
   1629a:	eba9 0404 	subeq.w	r4, r9, r4
			if (metal_io_phys(io, offset) == phys)
   1629e:	4621      	mov	r1, r4
   162a0:	4640      	mov	r0, r8
   162a2:	f7ff feec 	bl	1607e <metal_io_phys>
   162a6:	4581      	cmp	r9, r0
   162a8:	d009      	beq.n	162be <virtqueue_get_available_buffer+0x76>
			offset += io->page_mask + 1;
   162aa:	f8d8 3010 	ldr.w	r3, [r8, #16]
   162ae:	3301      	adds	r3, #1
   162b0:	441c      	add	r4, r3
		} while (offset < io->size);
   162b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   162b6:	429c      	cmp	r4, r3
   162b8:	d3f1      	bcc.n	1629e <virtqueue_get_available_buffer+0x56>
		return METAL_BAD_OFFSET;
   162ba:	f04f 34ff 	mov.w	r4, #4294967295
	return (io->virt != METAL_BAD_VA && offset < io->size
   162be:	f8d8 0000 	ldr.w	r0, [r8]
		: NULL);
   162c2:	1c43      	adds	r3, r0, #1
   162c4:	d011      	beq.n	162ea <virtqueue_get_available_buffer+0xa2>
	return (io->virt != METAL_BAD_VA && offset < io->size
   162c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   162ca:	42a3      	cmp	r3, r4
   162cc:	d90d      	bls.n	162ea <virtqueue_get_available_buffer+0xa2>
		: NULL);
   162ce:	4420      	add	r0, r4
	*len = vq->vq_ring.desc[*avail_idx].len;
   162d0:	8832      	ldrh	r2, [r6, #0]
   162d2:	69ab      	ldr	r3, [r5, #24]
   162d4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   162d8:	689b      	ldr	r3, [r3, #8]
   162da:	603b      	str	r3, [r7, #0]
}
   162dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (*io->ops.phys_to_offset)(io, phys);
   162e0:	4649      	mov	r1, r9
   162e2:	4640      	mov	r0, r8
   162e4:	4798      	blx	r3
   162e6:	4604      	mov	r4, r0
   162e8:	e7e9      	b.n	162be <virtqueue_get_available_buffer+0x76>
		: NULL);
   162ea:	2000      	movs	r0, #0
   162ec:	e7f0      	b.n	162d0 <virtqueue_get_available_buffer+0x88>
		return NULL;
   162ee:	2000      	movs	r0, #0
   162f0:	e7f4      	b.n	162dc <virtqueue_get_available_buffer+0x94>

000162f2 <virtqueue_disable_cb>:
{
   162f2:	b530      	push	{r4, r5, lr}
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   162f4:	2500      	movs	r5, #0
   162f6:	6802      	ldr	r2, [r0, #0]
   162f8:	6993      	ldr	r3, [r2, #24]
   162fa:	6912      	ldr	r2, [r2, #16]
   162fc:	f002 5400 	and.w	r4, r2, #536870912	; 0x20000000
   16300:	ea54 0205 	orrs.w	r2, r4, r5
   16304:	d014      	beq.n	16330 <virtqueue_disable_cb+0x3e>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   16306:	b94b      	cbnz	r3, 1631c <virtqueue_disable_cb+0x2a>
			vring_used_event(&vq->vq_ring) =
   16308:	69c2      	ldr	r2, [r0, #28]
   1630a:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   1630c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   1630e:	8940      	ldrh	r0, [r0, #10]
			vring_used_event(&vq->vq_ring) =
   16310:	eb02 0241 	add.w	r2, r2, r1, lsl #1
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   16314:	1a1b      	subs	r3, r3, r0
			vring_avail_event(&vq->vq_ring) =
   16316:	3b01      	subs	r3, #1
   16318:	8093      	strh	r3, [r2, #4]
}
   1631a:	bd30      	pop	{r4, r5, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
   1631c:	2b01      	cmp	r3, #1
   1631e:	d1fc      	bne.n	1631a <virtqueue_disable_cb+0x28>
			vring_avail_event(&vq->vq_ring) =
   16320:	6a02      	ldr	r2, [r0, #32]
   16322:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   16324:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   16326:	8940      	ldrh	r0, [r0, #10]
			vring_avail_event(&vq->vq_ring) =
   16328:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
			    vq->vq_available_idx - vq->vq_nentries - 1;
   1632c:	1a1b      	subs	r3, r3, r0
   1632e:	e7f2      	b.n	16316 <virtqueue_disable_cb+0x24>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
   16330:	b92b      	cbnz	r3, 1633e <virtqueue_disable_cb+0x4c>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   16332:	69c2      	ldr	r2, [r0, #28]
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   16334:	8813      	ldrh	r3, [r2, #0]
   16336:	f043 0301 	orr.w	r3, r3, #1
   1633a:	8013      	strh	r3, [r2, #0]
}
   1633c:	e7ed      	b.n	1631a <virtqueue_disable_cb+0x28>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
   1633e:	2b01      	cmp	r3, #1
   16340:	d1eb      	bne.n	1631a <virtqueue_disable_cb+0x28>
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   16342:	6a02      	ldr	r2, [r0, #32]
   16344:	e7f6      	b.n	16334 <virtqueue_disable_cb+0x42>

00016346 <virtqueue_kick>:
{
   16346:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
   16348:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1634c:	2300      	movs	r3, #0
   1634e:	6801      	ldr	r1, [r0, #0]
{
   16350:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   16352:	6908      	ldr	r0, [r1, #16]
   16354:	f000 5200 	and.w	r2, r0, #536870912	; 0x20000000
   16358:	4313      	orrs	r3, r2
   1635a:	698b      	ldr	r3, [r1, #24]
   1635c:	d020      	beq.n	163a0 <virtqueue_kick+0x5a>
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1635e:	b9b3      	cbnz	r3, 1638e <virtqueue_kick+0x48>
			new_idx = vq->vq_ring.avail->idx;
   16360:	69e3      	ldr	r3, [r4, #28]
			prev_idx = new_idx - vq->vq_queued_cnt;
			event_idx = vring_avail_event(&vq->vq_ring);
   16362:	6961      	ldr	r1, [r4, #20]
			new_idx = vq->vq_ring.avail->idx;
   16364:	885a      	ldrh	r2, [r3, #2]
			event_idx = vring_avail_event(&vq->vq_ring);
   16366:	6a23      	ldr	r3, [r4, #32]
   16368:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			event_idx = vring_used_event(&vq->vq_ring);
   1636c:	889b      	ldrh	r3, [r3, #4]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   1636e:	1ad2      	subs	r2, r2, r3
   16370:	3a01      	subs	r2, #1
   16372:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   16374:	b292      	uxth	r2, r2
   16376:	4293      	cmp	r3, r2
   16378:	bf94      	ite	ls
   1637a:	2300      	movls	r3, #0
   1637c:	2301      	movhi	r3, #1
	if (vq_ring_must_notify(vq))
   1637e:	b11b      	cbz	r3, 16388 <virtqueue_kick+0x42>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
   16380:	6923      	ldr	r3, [r4, #16]
   16382:	b10b      	cbz	r3, 16388 <virtqueue_kick+0x42>
		vq->notify(vq);
   16384:	4620      	mov	r0, r4
   16386:	4798      	blx	r3
	vq->vq_queued_cnt = 0;
   16388:	2300      	movs	r3, #0
   1638a:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   1638c:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
   1638e:	2b01      	cmp	r3, #1
   16390:	d1fa      	bne.n	16388 <virtqueue_kick+0x42>
			new_idx = vq->vq_ring.used->idx;
   16392:	6a23      	ldr	r3, [r4, #32]
			event_idx = vring_used_event(&vq->vq_ring);
   16394:	6961      	ldr	r1, [r4, #20]
			new_idx = vq->vq_ring.used->idx;
   16396:	885a      	ldrh	r2, [r3, #2]
			event_idx = vring_used_event(&vq->vq_ring);
   16398:	69e3      	ldr	r3, [r4, #28]
   1639a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   1639e:	e7e5      	b.n	1636c <virtqueue_kick+0x26>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
   163a0:	b92b      	cbnz	r3, 163ae <virtqueue_kick+0x68>
			return (vq->vq_ring.used->flags &
   163a2:	6a23      	ldr	r3, [r4, #32]
			return (vq->vq_ring.avail->flags &
   163a4:	881b      	ldrh	r3, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   163a6:	43db      	mvns	r3, r3
   163a8:	f003 0301 	and.w	r3, r3, #1
   163ac:	e7e7      	b.n	1637e <virtqueue_kick+0x38>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
   163ae:	2b01      	cmp	r3, #1
   163b0:	d1ea      	bne.n	16388 <virtqueue_kick+0x42>
			return (vq->vq_ring.avail->flags &
   163b2:	69e3      	ldr	r3, [r4, #28]
   163b4:	e7f6      	b.n	163a4 <virtqueue_kick+0x5e>

000163b6 <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   163b6:	69c2      	ldr	r2, [r0, #28]
   163b8:	8e01      	ldrh	r1, [r0, #48]	; 0x30
   163ba:	8853      	ldrh	r3, [r2, #2]
   163bc:	428b      	cmp	r3, r1
   163be:	d00a      	beq.n	163d6 <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
   163c0:	8943      	ldrh	r3, [r0, #10]
   163c2:	3b01      	subs	r3, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
   163c4:	400b      	ands	r3, r1
   163c6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
	len = vq->vq_ring.desc[avail_idx].len;
   163ca:	889a      	ldrh	r2, [r3, #4]
   163cc:	6983      	ldr	r3, [r0, #24]
   163ce:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   163d2:	6898      	ldr	r0, [r3, #8]
	return len;
   163d4:	4770      	bx	lr
		return 0;
   163d6:	2000      	movs	r0, #0
}
   163d8:	4770      	bx	lr

000163da <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
   163da:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   163de:	68c3      	ldr	r3, [r0, #12]
   163e0:	b103      	cbz	r3, 163e4 <virtqueue_notification+0xa>
		vq->callback(vq);
   163e2:	4718      	bx	r3
}
   163e4:	4770      	bx	lr

000163e6 <rpmsg_unregister_endpoint>:
{
   163e6:	b510      	push	{r4, lr}
	if (!ept)
   163e8:	b1d0      	cbz	r0, 16420 <rpmsg_unregister_endpoint+0x3a>
	if (ept->addr != RPMSG_ADDR_ANY)
   163ea:	6a43      	ldr	r3, [r0, #36]	; 0x24
   163ec:	1c5a      	adds	r2, r3, #1
   163ee:	d00f      	beq.n	16410 <rpmsg_unregister_endpoint+0x2a>
	if (addr < size)
   163f0:	2b7f      	cmp	r3, #127	; 0x7f
   163f2:	dc0d      	bgt.n	16410 <rpmsg_unregister_endpoint+0x2a>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   163f4:	2101      	movs	r1, #1
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   163f6:	6a02      	ldr	r2, [r0, #32]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   163f8:	095c      	lsrs	r4, r3, #5
   163fa:	3248      	adds	r2, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   163fc:	f003 031f 	and.w	r3, r3, #31
   16400:	fa01 f303 	lsl.w	r3, r1, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   16404:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
   16408:	ea21 0103 	bic.w	r1, r1, r3
   1640c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
	metal_list_del(&ept->node);
   16410:	f100 0334 	add.w	r3, r0, #52	; 0x34
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   16414:	e9d0 120d 	ldrd	r1, r2, [r0, #52]	; 0x34
   16418:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   1641a:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
   1641c:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
}
   16420:	bd10      	pop	{r4, pc}

00016422 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   16422:	f04f 32ff 	mov.w	r2, #4294967295
   16426:	f04f 33ff 	mov.w	r3, #4294967295
   1642a:	f7fa bc2d 	b.w	10c88 <z_impl_k_sem_take>

0001642e <rpmsg_send_ns_message>:
{
   1642e:	b510      	push	{r4, lr}
	ns_msg.addr = ept->addr;
   16430:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
   16432:	b08c      	sub	sp, #48	; 0x30
   16434:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   16436:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   16438:	2220      	movs	r2, #32
   1643a:	4601      	mov	r1, r0
   1643c:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
   1643e:	930a      	str	r3, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   16440:	f7fd f932 	bl	136a8 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   16444:	2328      	movs	r3, #40	; 0x28
   16446:	2201      	movs	r2, #1
   16448:	4620      	mov	r0, r4
   1644a:	e9cd 3200 	strd	r3, r2, [sp]
   1644e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   16450:	2235      	movs	r2, #53	; 0x35
   16452:	ab02      	add	r3, sp, #8
   16454:	f7f8 f96a 	bl	e72c <rpmsg_send_offchannel_raw>
}
   16458:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   1645c:	b00c      	add	sp, #48	; 0x30
   1645e:	bd10      	pop	{r4, pc}

00016460 <rpmsg_get_endpoint>:
{
   16460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16464:	4680      	mov	r8, r0
   16466:	4689      	mov	r9, r1
   16468:	4615      	mov	r5, r2
   1646a:	461e      	mov	r6, r3
	metal_list_for_each(&rdev->endpoints, node) {
   1646c:	6807      	ldr	r7, [r0, #0]
   1646e:	45b8      	cmp	r8, r7
   16470:	d101      	bne.n	16476 <rpmsg_get_endpoint+0x16>
	return NULL;
   16472:	2400      	movs	r4, #0
   16474:	e021      	b.n	164ba <rpmsg_get_endpoint+0x5a>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   16476:	1c69      	adds	r1, r5, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   16478:	f1a7 0434 	sub.w	r4, r7, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1647c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1647e:	d006      	beq.n	1648e <rpmsg_get_endpoint+0x2e>
   16480:	429d      	cmp	r5, r3
		if (addr == ept->addr && dest_addr == ept->dest_addr)
   16482:	d01a      	beq.n	164ba <rpmsg_get_endpoint+0x5a>
		if (name)
   16484:	f1b9 0f00 	cmp.w	r9, #0
   16488:	d106      	bne.n	16498 <rpmsg_get_endpoint+0x38>
	metal_list_for_each(&rdev->endpoints, node) {
   1648a:	683f      	ldr	r7, [r7, #0]
   1648c:	e7ef      	b.n	1646e <rpmsg_get_endpoint+0xe>
		if (addr == ept->addr && dest_addr == ept->dest_addr)
   1648e:	3301      	adds	r3, #1
   16490:	d1f8      	bne.n	16484 <rpmsg_get_endpoint+0x24>
   16492:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   16494:	42b3      	cmp	r3, r6
   16496:	e7f4      	b.n	16482 <rpmsg_get_endpoint+0x22>
			name_match = !strncmp(ept->name, name,
   16498:	2220      	movs	r2, #32
   1649a:	4649      	mov	r1, r9
   1649c:	4620      	mov	r0, r4
   1649e:	f7fd f929 	bl	136f4 <strncmp>
		if (!name || !name_match)
   164a2:	2800      	cmp	r0, #0
   164a4:	d1f1      	bne.n	1648a <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   164a6:	1c72      	adds	r2, r6, #1
   164a8:	d002      	beq.n	164b0 <rpmsg_get_endpoint+0x50>
   164aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   164ac:	42b3      	cmp	r3, r6
   164ae:	d004      	beq.n	164ba <rpmsg_get_endpoint+0x5a>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   164b0:	1c6b      	adds	r3, r5, #1
   164b2:	d1ea      	bne.n	1648a <rpmsg_get_endpoint+0x2a>
   164b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   164b6:	3301      	adds	r3, #1
   164b8:	d1e7      	bne.n	1648a <rpmsg_get_endpoint+0x2a>
}
   164ba:	4620      	mov	r0, r4
   164bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000164c0 <rpmsg_register_endpoint>:
	new_node->prev = node->prev;
   164c0:	6842      	ldr	r2, [r0, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   164c2:	f101 0334 	add.w	r3, r1, #52	; 0x34
	new_node->next = node;
   164c6:	e9c1 020d 	strd	r0, r2, [r1, #52]	; 0x34
	ept->rdev = rdev;
   164ca:	6208      	str	r0, [r1, #32]
	new_node->next->prev = new_node;
   164cc:	6043      	str	r3, [r0, #4]
	new_node->prev->next = new_node;
   164ce:	6b8a      	ldr	r2, [r1, #56]	; 0x38
   164d0:	6013      	str	r3, [r2, #0]
}
   164d2:	4770      	bx	lr

000164d4 <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
   164d4:	b538      	push	{r3, r4, r5, lr}
	struct rpmsg_device *rdev;

	if (!ept)
   164d6:	4604      	mov	r4, r0
   164d8:	b1b8      	cbz	r0, 1650a <rpmsg_destroy_ept+0x36>
		return;

	rdev = ept->rdev;
	if (ept->name[0] && rdev->support_ns && ept->addr != RPMSG_NS_EPT_ADDR)
   164da:	7803      	ldrb	r3, [r0, #0]
	rdev = ept->rdev;
   164dc:	6a05      	ldr	r5, [r0, #32]
	if (ept->name[0] && rdev->support_ns && ept->addr != RPMSG_NS_EPT_ADDR)
   164de:	b143      	cbz	r3, 164f2 <rpmsg_destroy_ept+0x1e>
   164e0:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
   164e4:	b12b      	cbz	r3, 164f2 <rpmsg_destroy_ept+0x1e>
   164e6:	6a43      	ldr	r3, [r0, #36]	; 0x24
   164e8:	2b35      	cmp	r3, #53	; 0x35
   164ea:	d002      	beq.n	164f2 <rpmsg_destroy_ept+0x1e>
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   164ec:	2101      	movs	r1, #1
   164ee:	f7ff ff9e 	bl	1642e <rpmsg_send_ns_message>
	metal_mutex_acquire(&rdev->lock);
   164f2:	3558      	adds	r5, #88	; 0x58
   164f4:	4628      	mov	r0, r5
   164f6:	f7ff ff94 	bl	16422 <__metal_mutex_acquire>
	rpmsg_unregister_endpoint(ept);
   164fa:	4620      	mov	r0, r4
   164fc:	f7ff ff73 	bl	163e6 <rpmsg_unregister_endpoint>
	z_impl_k_sem_give(sem);
   16500:	4628      	mov	r0, r5
	metal_mutex_release(&rdev->lock);
}
   16502:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   16506:	f7fa bb7b 	b.w	10c00 <z_impl_k_sem_give>
   1650a:	bd38      	pop	{r3, r4, r5, pc}

0001650c <rpmsg_virtio_tx_callback>:
}
   1650c:	4770      	bx	lr

0001650e <k_sem_give>:
   1650e:	f7fa bb77 	b.w	10c00 <z_impl_k_sem_give>

00016512 <rpmsg_virtio_get_rx_buffer>:
{
   16512:	b430      	push	{r4, r5}
	return rvdev->vdev->role;
   16514:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
   16516:	4613      	mov	r3, r2
   16518:	69ad      	ldr	r5, [r5, #24]
	if (role == RPMSG_MASTER) {
   1651a:	b925      	cbnz	r5, 16526 <rpmsg_virtio_get_rx_buffer+0x14>
}
   1651c:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   1651e:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   16522:	f7ff be57 	b.w	161d4 <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
   16526:	2d01      	cmp	r5, #1
   16528:	d106      	bne.n	16538 <rpmsg_virtio_get_rx_buffer+0x26>
}
   1652a:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   1652c:	460a      	mov	r2, r1
   1652e:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   16532:	4619      	mov	r1, r3
   16534:	f7ff be88 	b.w	16248 <virtqueue_get_available_buffer>
}
   16538:	2000      	movs	r0, #0
   1653a:	bc30      	pop	{r4, r5}
   1653c:	4770      	bx	lr

0001653e <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   1653e:	f04f 32ff 	mov.w	r2, #4294967295
   16542:	f04f 33ff 	mov.w	r3, #4294967295
   16546:	f7fa bb9f 	b.w	10c88 <z_impl_k_sem_take>

0001654a <rpmsg_virtio_ns_callback>:
{
   1654a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (len != sizeof(*ns_msg))
   1654e:	2a28      	cmp	r2, #40	; 0x28
{
   16550:	4680      	mov	r8, r0
   16552:	460e      	mov	r6, r1
   16554:	b089      	sub	sp, #36	; 0x24
	if (len != sizeof(*ns_msg))
   16556:	d12b      	bne.n	165b0 <rpmsg_virtio_ns_callback+0x66>
	struct rpmsg_device *rdev = ept->rdev;
   16558:	6a05      	ldr	r5, [r0, #32]
	metal_io_block_read(io,
   1655a:	2320      	movs	r3, #32
	struct metal_io_region *io = rvdev->shbuf_io;
   1655c:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
	metal_io_block_read(io,
   16560:	466a      	mov	r2, sp
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   16562:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   16564:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   16566:	1a71      	subs	r1, r6, r1
   16568:	42a1      	cmp	r1, r4
   1656a:	bf28      	it	cs
   1656c:	f04f 31ff 	movcs.w	r1, #4294967295
   16570:	f7ff fcd2 	bl	15f18 <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
   16574:	f105 0758 	add.w	r7, r5, #88	; 0x58
	dest = ns_msg->addr;
   16578:	f8d6 9020 	ldr.w	r9, [r6, #32]
   1657c:	4638      	mov	r0, r7
   1657e:	f7ff ffde 	bl	1653e <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   16582:	464b      	mov	r3, r9
   16584:	f04f 32ff 	mov.w	r2, #4294967295
   16588:	4669      	mov	r1, sp
   1658a:	4628      	mov	r0, r5
   1658c:	f7ff ff68 	bl	16460 <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   16590:	6a73      	ldr	r3, [r6, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   16592:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   16594:	07db      	lsls	r3, r3, #31
   16596:	d50f      	bpl.n	165b8 <rpmsg_virtio_ns_callback+0x6e>
		if (_ept)
   16598:	b110      	cbz	r0, 165a0 <rpmsg_virtio_ns_callback+0x56>
			_ept->dest_addr = RPMSG_ADDR_ANY;
   1659a:	f04f 33ff 	mov.w	r3, #4294967295
   1659e:	6283      	str	r3, [r0, #40]	; 0x28
   165a0:	4638      	mov	r0, r7
   165a2:	f7ff ffb4 	bl	1650e <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   165a6:	b11c      	cbz	r4, 165b0 <rpmsg_virtio_ns_callback+0x66>
   165a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   165aa:	b10b      	cbz	r3, 165b0 <rpmsg_virtio_ns_callback+0x66>
			_ept->ns_unbind_cb(ept);
   165ac:	4640      	mov	r0, r8
   165ae:	4798      	blx	r3
}
   165b0:	2000      	movs	r0, #0
   165b2:	b009      	add	sp, #36	; 0x24
   165b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!_ept) {
   165b8:	b950      	cbnz	r0, 165d0 <rpmsg_virtio_ns_callback+0x86>
   165ba:	4638      	mov	r0, r7
   165bc:	f7ff ffa7 	bl	1650e <k_sem_give>
			if (rdev->ns_bind_cb)
   165c0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   165c2:	2b00      	cmp	r3, #0
   165c4:	d0f4      	beq.n	165b0 <rpmsg_virtio_ns_callback+0x66>
				rdev->ns_bind_cb(rdev, name, dest);
   165c6:	464a      	mov	r2, r9
   165c8:	4669      	mov	r1, sp
   165ca:	4628      	mov	r0, r5
   165cc:	4798      	blx	r3
   165ce:	e7ef      	b.n	165b0 <rpmsg_virtio_ns_callback+0x66>
			_ept->dest_addr = dest;
   165d0:	f8c0 9028 	str.w	r9, [r0, #40]	; 0x28
   165d4:	4638      	mov	r0, r7
   165d6:	f7ff ff9a 	bl	1650e <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   165da:	e7e9      	b.n	165b0 <rpmsg_virtio_ns_callback+0x66>

000165dc <rpmsg_virtio_rx_callback>:
{
   165dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   165e0:	6803      	ldr	r3, [r0, #0]
{
   165e2:	b086      	sub	sp, #24
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   165e4:	6a5e      	ldr	r6, [r3, #36]	; 0x24
	metal_mutex_acquire(&rdev->lock);
   165e6:	f106 0758 	add.w	r7, r6, #88	; 0x58
	__metal_mutex_acquire(mutex);
   165ea:	4638      	mov	r0, r7
   165ec:	f7ff ffa7 	bl	1653e <__metal_mutex_acquire>
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   165f0:	4630      	mov	r0, r6
   165f2:	f10d 020a 	add.w	r2, sp, #10
   165f6:	a903      	add	r1, sp, #12
   165f8:	f7ff ff8b 	bl	16512 <rpmsg_virtio_get_rx_buffer>
   165fc:	4604      	mov	r4, r0
   165fe:	4638      	mov	r0, r7
   16600:	f7ff ff85 	bl	1650e <k_sem_give>
	while (rp_hdr) {
   16604:	b914      	cbnz	r4, 1660c <rpmsg_virtio_rx_callback+0x30>
}
   16606:	b006      	add	sp, #24
   16608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1660c:	4638      	mov	r0, r7
   1660e:	f7ff ff96 	bl	1653e <__metal_mutex_acquire>
			     struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   16612:	f04f 33ff 	mov.w	r3, #4294967295
   16616:	2100      	movs	r1, #0
   16618:	4630      	mov	r0, r6
   1661a:	6862      	ldr	r2, [r4, #4]
   1661c:	f7ff ff20 	bl	16460 <rpmsg_get_endpoint>
   16620:	4605      	mov	r5, r0
   16622:	4638      	mov	r0, r7
   16624:	f7ff ff73 	bl	1650e <k_sem_give>
		if (ept) {
   16628:	b185      	cbz	r5, 1664c <rpmsg_virtio_rx_callback+0x70>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   1662a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1662c:	6823      	ldr	r3, [r4, #0]
   1662e:	3201      	adds	r2, #1
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   16630:	6be9      	ldr	r1, [r5, #60]	; 0x3c
				ept->dest_addr = rp_hdr->src;
   16632:	bf08      	it	eq
   16634:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   16636:	89a2      	ldrh	r2, [r4, #12]
   16638:	9100      	str	r1, [sp, #0]
   1663a:	4628      	mov	r0, r5
   1663c:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
   16640:	f104 0110 	add.w	r1, r4, #16
   16644:	47c0      	blx	r8
			RPMSG_ASSERT(status >= 0,
   16646:	2800      	cmp	r0, #0
   16648:	da00      	bge.n	1664c <rpmsg_virtio_rx_callback+0x70>
   1664a:	e7fe      	b.n	1664a <rpmsg_virtio_rx_callback+0x6e>
   1664c:	4638      	mov	r0, r7
   1664e:	f7ff ff76 	bl	1653e <__metal_mutex_acquire>
   16652:	6ff2      	ldr	r2, [r6, #124]	; 0x7c
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   16654:	9b03      	ldr	r3, [sp, #12]
   16656:	6992      	ldr	r2, [r2, #24]
	if (role == RPMSG_MASTER) {
   16658:	b9b2      	cbnz	r2, 16688 <rpmsg_virtio_rx_callback+0xac>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   1665a:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
   1665c:	e9cd 4304 	strd	r4, r3, [sp, #16]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   16660:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   16664:	2301      	movs	r3, #1
   16666:	a904      	add	r1, sp, #16
   16668:	f7ff fd54 	bl	16114 <virtqueue_add_buffer>
		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   1666c:	4630      	mov	r0, r6
   1666e:	f10d 020a 	add.w	r2, sp, #10
   16672:	a903      	add	r1, sp, #12
   16674:	f7ff ff4d 	bl	16512 <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   16678:	4604      	mov	r4, r0
   1667a:	2800      	cmp	r0, #0
   1667c:	d1bf      	bne.n	165fe <rpmsg_virtio_rx_callback+0x22>
			virtqueue_kick(rvdev->rvq);
   1667e:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   16682:	f7ff fe60 	bl	16346 <virtqueue_kick>
   16686:	e7ba      	b.n	165fe <rpmsg_virtio_rx_callback+0x22>
	if (role == RPMSG_REMOTE) {
   16688:	2a01      	cmp	r2, #1
   1668a:	d1ef      	bne.n	1666c <rpmsg_virtio_rx_callback+0x90>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   1668c:	461a      	mov	r2, r3
   1668e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   16692:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   16696:	f7f8 f82d 	bl	e6f4 <virtqueue_add_consumed_buffer>
   1669a:	e7e7      	b.n	1666c <rpmsg_virtio_rx_callback+0x90>

0001669c <rpmsg_virtio_shm_pool_get_buffer>:
{
   1669c:	4603      	mov	r3, r0
	if (shpool->avail < size)
   1669e:	6842      	ldr	r2, [r0, #4]
{
   166a0:	b510      	push	{r4, lr}
	if (shpool->avail < size)
   166a2:	428a      	cmp	r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   166a4:	bf29      	itett	cs
   166a6:	6880      	ldrcs	r0, [r0, #8]
		return NULL;
   166a8:	2000      	movcc	r0, #0
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   166aa:	1a84      	subcs	r4, r0, r2
   166ac:	6818      	ldrcs	r0, [r3, #0]
	shpool->avail -= size;
   166ae:	bf22      	ittt	cs
   166b0:	1a52      	subcs	r2, r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   166b2:	1900      	addcs	r0, r0, r4
	shpool->avail -= size;
   166b4:	605a      	strcs	r2, [r3, #4]
}
   166b6:	bd10      	pop	{r4, pc}

000166b8 <rpmsg_virtio_init_shm_pool>:
	if (!shpool)
   166b8:	b110      	cbz	r0, 166c0 <rpmsg_virtio_init_shm_pool+0x8>
	shpool->avail = size;
   166ba:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
   166be:	6001      	str	r1, [r0, #0]
}
   166c0:	4770      	bx	lr

000166c2 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   166c2:	f7fc ba0b 	b.w	12adc <z_clock_idle_exit>

000166c6 <k_heap_init>:
{
   166c6:	b410      	push	{r4}
   166c8:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   166cc:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   166d0:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   166d2:	f7fb bf6b 	b.w	125ac <sys_heap_init>

000166d6 <k_mem_pool_alloc>:
 * backend.
 */

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, k_timeout_t timeout)
{
   166d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   166d8:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   166dc:	4614      	mov	r4, r2
	block->id.heap = p->heap;
   166de:	6800      	ldr	r0, [r0, #0]
{
   166e0:	460d      	mov	r5, r1
	block->id.heap = p->heap;
   166e2:	6048      	str	r0, [r1, #4]
	block->data = k_heap_alloc(p->heap, size, timeout);
   166e4:	4632      	mov	r2, r6
   166e6:	463b      	mov	r3, r7
   166e8:	4621      	mov	r1, r4
   166ea:	f7f8 fbff 	bl	eeec <k_heap_alloc>
   166ee:	6028      	str	r0, [r5, #0]

	/* The legacy API returns -EAGAIN on timeout expiration, but
	 * -ENOMEM if the timeout was K_NO_WAIT. Don't ask.
	 */
	if (size != 0 && block->data == NULL) {
   166f0:	b144      	cbz	r4, 16704 <k_mem_pool_alloc+0x2e>
   166f2:	b938      	cbnz	r0, 16704 <k_mem_pool_alloc+0x2e>
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
   166f4:	ea56 0307 	orrs.w	r3, r6, r7
   166f8:	bf0c      	ite	eq
   166fa:	f06f 000b 	mvneq.w	r0, #11
   166fe:	f06f 000a 	mvnne.w	r0, #10
	} else {
		return 0;
	}
}
   16702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   16704:	2000      	movs	r0, #0
   16706:	e7fc      	b.n	16702 <k_mem_pool_alloc+0x2c>

00016708 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
	k_heap_free(id->heap, id->data);
   16708:	e9d0 1000 	ldrd	r1, r0, [r0]
   1670c:	f7f8 bc9c 	b.w	f048 <k_heap_free>

00016710 <k_mem_pool_malloc>:
{
   16710:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   16712:	2408      	movs	r4, #8
   16714:	190a      	adds	r2, r1, r4
   16716:	d208      	bcs.n	1672a <k_mem_pool_malloc+0x1a>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   16718:	2600      	movs	r6, #0
   1671a:	2700      	movs	r7, #0
   1671c:	eb0d 0104 	add.w	r1, sp, r4
   16720:	e9cd 6700 	strd	r6, r7, [sp]
   16724:	f7ff ffd7 	bl	166d6 <k_mem_pool_alloc>
   16728:	b110      	cbz	r0, 16730 <k_mem_pool_malloc+0x20>
		return NULL;
   1672a:	2000      	movs	r0, #0
}
   1672c:	b004      	add	sp, #16
   1672e:	bdd0      	pop	{r4, r6, r7, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   16730:	4622      	mov	r2, r4
   16732:	9802      	ldr	r0, [sp, #8]
   16734:	a902      	add	r1, sp, #8
   16736:	f7fc fffc 	bl	13732 <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   1673a:	9802      	ldr	r0, [sp, #8]
   1673c:	3008      	adds	r0, #8
   1673e:	e7f5      	b.n	1672c <k_mem_pool_malloc+0x1c>

00016740 <k_free>:
	if (ptr != NULL) {
   16740:	b110      	cbz	r0, 16748 <k_free+0x8>
		k_mem_pool_free_id(ptr);
   16742:	3808      	subs	r0, #8
   16744:	f7ff bfe0 	b.w	16708 <k_mem_pool_free_id>
}
   16748:	4770      	bx	lr

0001674a <z_impl_k_mutex_init>:
{
   1674a:	4603      	mov	r3, r0
	mutex->owner = NULL;
   1674c:	2000      	movs	r0, #0
   1674e:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   16752:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   16756:	4770      	bx	lr

00016758 <z_queue_node_peek>:
{
   16758:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   1675a:	4604      	mov	r4, r0
   1675c:	b130      	cbz	r0, 1676c <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1675e:	6802      	ldr	r2, [r0, #0]
   16760:	0793      	lsls	r3, r2, #30
   16762:	d003      	beq.n	1676c <z_queue_node_peek+0x14>
		ret = anode->data;
   16764:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   16766:	b109      	cbz	r1, 1676c <z_queue_node_peek+0x14>
			k_free(anode);
   16768:	f7ff ffea 	bl	16740 <k_free>
}
   1676c:	4620      	mov	r0, r4
   1676e:	bd10      	pop	{r4, pc}

00016770 <z_impl_k_queue_init>:
	list->head = NULL;
   16770:	2300      	movs	r3, #0
	list->tail = NULL;
   16772:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   16776:	6083      	str	r3, [r0, #8]
   16778:	f100 030c 	add.w	r3, r0, #12
   1677c:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   16780:	f100 0314 	add.w	r3, r0, #20
   16784:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   16788:	4770      	bx	lr

0001678a <k_queue_append>:
{
   1678a:	460a      	mov	r2, r1
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   1678c:	2300      	movs	r3, #0
   1678e:	6841      	ldr	r1, [r0, #4]
   16790:	f7f8 bf6e 	b.w	f670 <queue_insert>

00016794 <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false);
   16794:	2300      	movs	r3, #0
{
   16796:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false);
   16798:	4619      	mov	r1, r3
   1679a:	f7f8 bf69 	b.w	f670 <queue_insert>

0001679e <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   1679e:	f990 000e 	ldrsb.w	r0, [r0, #14]
   167a2:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   167a6:	4298      	cmp	r0, r3
   167a8:	bfac      	ite	ge
   167aa:	2000      	movge	r0, #0
   167ac:	2001      	movlt	r0, #1
   167ae:	4770      	bx	lr

000167b0 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   167b0:	4603      	mov	r3, r0
   167b2:	b920      	cbnz	r0, 167be <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   167b4:	f3ef 8205 	mrs	r2, IPSR
   167b8:	b90a      	cbnz	r2, 167be <z_reschedule_irqlock+0xe>
   167ba:	f7ed ba0f 	b.w	3bdc <arch_swap>
   167be:	f383 8811 	msr	BASEPRI, r3
   167c2:	f3bf 8f6f 	isb	sy
}
   167c6:	4770      	bx	lr

000167c8 <z_reschedule_unlocked>:
	__asm__ volatile(
   167c8:	f04f 0320 	mov.w	r3, #32
   167cc:	f3ef 8011 	mrs	r0, BASEPRI
   167d0:	f383 8811 	msr	BASEPRI, r3
   167d4:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   167d8:	f7ff bfea 	b.w	167b0 <z_reschedule_irqlock>

000167dc <z_priq_dumb_best>:
{
   167dc:	4603      	mov	r3, r0
	return list->head == list;
   167de:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   167e0:	4283      	cmp	r3, r0
   167e2:	d003      	beq.n	167ec <z_priq_dumb_best+0x10>
	if (n != NULL) {
   167e4:	2800      	cmp	r0, #0
   167e6:	bf38      	it	cc
   167e8:	2000      	movcc	r0, #0
   167ea:	4770      	bx	lr
	struct k_thread *thread = NULL;
   167ec:	2000      	movs	r0, #0
}
   167ee:	4770      	bx	lr

000167f0 <z_unpend_all>:
{
   167f0:	b538      	push	{r3, r4, r5, lr}
   167f2:	4605      	mov	r5, r0
	int need_sched = 0;
   167f4:	2000      	movs	r0, #0
	return list->head == list;
   167f6:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   167f8:	42a5      	cmp	r5, r4
   167fa:	d000      	beq.n	167fe <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   167fc:	b904      	cbnz	r4, 16800 <z_unpend_all+0x10>
}
   167fe:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   16800:	4620      	mov	r0, r4
   16802:	f7f9 fa05 	bl	fc10 <z_unpend_thread>
		z_ready_thread(thread);
   16806:	4620      	mov	r0, r4
   16808:	f7f9 fb46 	bl	fe98 <z_ready_thread>
		need_sched = 1;
   1680c:	2001      	movs	r0, #1
   1680e:	e7f2      	b.n	167f6 <z_unpend_all+0x6>

00016810 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   16810:	b15a      	cbz	r2, 1682a <z_impl_k_sem_init+0x1a>
   16812:	428a      	cmp	r2, r1
   16814:	d309      	bcc.n	1682a <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   16816:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1681a:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   1681e:	e9c0 0000 	strd	r0, r0, [r0]
   16822:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   16826:	2000      	movs	r0, #0
   16828:	4770      	bx	lr
		return -EINVAL;
   1682a:	f06f 0015 	mvn.w	r0, #21
}
   1682e:	4770      	bx	lr

00016830 <k_is_in_isr>:
   16830:	f3ef 8005 	mrs	r0, IPSR
}
   16834:	3800      	subs	r0, #0
   16836:	bf18      	it	ne
   16838:	2001      	movne	r0, #1
   1683a:	4770      	bx	lr

0001683c <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   1683c:	f7ea be50 	b.w	14e0 <arch_busy_wait>

00016840 <z_impl_k_thread_name_set>:
}
   16840:	f06f 0046 	mvn.w	r0, #70	; 0x46
   16844:	4770      	bx	lr

00016846 <k_thread_name_get>:
}
   16846:	2000      	movs	r0, #0
   16848:	4770      	bx	lr

0001684a <k_work_submit_to_queue>:
{
   1684a:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1684c:	f101 0308 	add.w	r3, r1, #8
   16850:	e8d3 2fef 	ldaex	r2, [r3]
   16854:	f042 0c01 	orr.w	ip, r2, #1
   16858:	e8c3 cfee 	stlex	lr, ip, [r3]
   1685c:	f1be 0f00 	cmp.w	lr, #0
   16860:	d1f6      	bne.n	16850 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   16862:	07d3      	lsls	r3, r2, #31
   16864:	d403      	bmi.n	1686e <k_work_submit_to_queue+0x24>
}
   16866:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   1686a:	f7ff bf8e 	b.w	1678a <k_queue_append>
}
   1686e:	f85d fb04 	ldr.w	pc, [sp], #4

00016872 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   16872:	f1a0 010c 	sub.w	r1, r0, #12
   16876:	6900      	ldr	r0, [r0, #16]
   16878:	f7ff bfe7 	b.w	1684a <k_work_submit_to_queue>

0001687c <work_cancel>:
	CHECKIF(work->work_q == NULL) {
   1687c:	69c3      	ldr	r3, [r0, #28]
{
   1687e:	b570      	push	{r4, r5, r6, lr}
   16880:	4604      	mov	r4, r0
	CHECKIF(work->work_q == NULL) {
   16882:	b913      	cbnz	r3, 1688a <work_cancel+0xe>
		return -EALREADY;
   16884:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
   16888:	bd70      	pop	{r4, r5, r6, pc}
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   1688a:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1688e:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   16892:	07db      	lsls	r3, r3, #31
   16894:	d52f      	bpl.n	168f6 <work_cancel+0x7a>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   16896:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   16898:	69c2      	ldr	r2, [r0, #28]
   1689a:	6813      	ldr	r3, [r2, #0]
   1689c:	b913      	cbnz	r3, 168a4 <work_cancel+0x28>
			return -EINVAL;
   1689e:	f06f 0015 	mvn.w	r0, #21
   168a2:	e7f1      	b.n	16888 <work_cancel+0xc>
   168a4:	429c      	cmp	r4, r3
   168a6:	d121      	bne.n	168ec <work_cancel+0x70>
Z_GENLIST_REMOVE(sflist, sfnode)
   168a8:	6823      	ldr	r3, [r4, #0]
   168aa:	6856      	ldr	r6, [r2, #4]
   168ac:	f023 0003 	bic.w	r0, r3, #3
   168b0:	b991      	cbnz	r1, 168d8 <work_cancel+0x5c>
   168b2:	42b4      	cmp	r4, r6
	list->head = node;
   168b4:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   168b6:	d100      	bne.n	168ba <work_cancel+0x3e>
	list->tail = node;
   168b8:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   168ba:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   168bc:	f003 0303 	and.w	r3, r3, #3
   168c0:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   168c2:	2000      	movs	r0, #0
   168c4:	61e0      	str	r0, [r4, #28]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   168c6:	e8d5 3fef 	ldaex	r3, [r5]
   168ca:	f023 0301 	bic.w	r3, r3, #1
   168ce:	e8c5 3fe2 	stlex	r2, r3, [r5]
   168d2:	2a00      	cmp	r2, #0
   168d4:	d0d8      	beq.n	16888 <work_cancel+0xc>
   168d6:	e7f6      	b.n	168c6 <work_cancel+0x4a>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   168d8:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   168da:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   168dc:	f003 0303 	and.w	r3, r3, #3
   168e0:	ea43 0300 	orr.w	r3, r3, r0
   168e4:	600b      	str	r3, [r1, #0]
	list->tail = node;
   168e6:	bf08      	it	eq
   168e8:	6051      	streq	r1, [r2, #4]
}
   168ea:	e7e6      	b.n	168ba <work_cancel+0x3e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   168ec:	6818      	ldr	r0, [r3, #0]
   168ee:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   168f0:	f020 0303 	bic.w	r3, r0, #3
   168f4:	e7d2      	b.n	1689c <work_cancel+0x20>
		int err = z_abort_timeout(&work->timeout);
   168f6:	300c      	adds	r0, #12
   168f8:	f7fa fdd8 	bl	114ac <z_abort_timeout>
		if (err) {
   168fc:	2800      	cmp	r0, #0
   168fe:	d0e0      	beq.n	168c2 <work_cancel+0x46>
   16900:	e7c0      	b.n	16884 <work_cancel+0x8>

00016902 <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   16902:	2300      	movs	r3, #0
   16904:	e9c0 3100 	strd	r3, r1, [r0]
	node->next = NULL;
   16908:	e9c0 3302 	strd	r3, r3, [r0, #8]
	node->prev = NULL;
   1690c:	6103      	str	r3, [r0, #16]
	work->work_q = NULL;
   1690e:	61c3      	str	r3, [r0, #28]
}
   16910:	4770      	bx	lr

00016912 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   16912:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   16914:	f7fa ff60 	bl	117d8 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   16918:	bd08      	pop	{r3, pc}

0001691a <z_impl_k_uptime_ticks>:

s64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   1691a:	f7fa bf5d 	b.w	117d8 <z_tick_get>

0001691e <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
u64_t z_timeout_end_calc(k_timeout_t timeout)
{
   1691e:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   16920:	1c4b      	adds	r3, r1, #1
   16922:	bf08      	it	eq
   16924:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   16928:	4604      	mov	r4, r0
   1692a:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1692c:	d013      	beq.n	16956 <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1692e:	ea54 0105 	orrs.w	r1, r4, r5
   16932:	d103      	bne.n	1693c <z_timeout_end_calc+0x1e>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
#endif
	return z_tick_get() + MAX(1, dt);
}
   16934:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   16938:	f7fa bf4e 	b.w	117d8 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1693c:	f06f 0101 	mvn.w	r1, #1
   16940:	1a0a      	subs	r2, r1, r0
   16942:	f04f 31ff 	mov.w	r1, #4294967295
   16946:	eb61 0305 	sbc.w	r3, r1, r5
   1694a:	2a00      	cmp	r2, #0
   1694c:	f173 0100 	sbcs.w	r1, r3, #0
   16950:	db02      	blt.n	16958 <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   16952:	4610      	mov	r0, r2
   16954:	4619      	mov	r1, r3
}
   16956:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   16958:	f7fa ff3e 	bl	117d8 <z_tick_get>
   1695c:	2c01      	cmp	r4, #1
   1695e:	f175 0300 	sbcs.w	r3, r5, #0
   16962:	bfbc      	itt	lt
   16964:	2401      	movlt	r4, #1
   16966:	2500      	movlt	r5, #0
   16968:	1820      	adds	r0, r4, r0
   1696a:	eb45 0101 	adc.w	r1, r5, r1
   1696e:	e7f2      	b.n	16956 <z_timeout_end_calc+0x38>

00016970 <signal_poll_event>:
{
   16970:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   16972:	6884      	ldr	r4, [r0, #8]
{
   16974:	4605      	mov	r5, r0
   16976:	460e      	mov	r6, r1
	if (poller) {
   16978:	b19c      	cbz	r4, 169a2 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   1697a:	68a3      	ldr	r3, [r4, #8]
   1697c:	b95b      	cbnz	r3, 16996 <signal_poll_event+0x26>
	int retcode = 0;
   1697e:	4618      	mov	r0, r3
		poller->is_polling = false;
   16980:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   16982:	2300      	movs	r3, #0
   16984:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   16986:	68eb      	ldr	r3, [r5, #12]
   16988:	f3c3 3104 	ubfx	r1, r3, #12, #5
   1698c:	430e      	orrs	r6, r1
   1698e:	f366 3310 	bfi	r3, r6, #12, #5
   16992:	60eb      	str	r3, [r5, #12]
	return retcode;
   16994:	e004      	b.n	169a0 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   16996:	4798      	blx	r3
		poller->is_polling = false;
   16998:	2300      	movs	r3, #0
		if (retcode < 0) {
   1699a:	2800      	cmp	r0, #0
		poller->is_polling = false;
   1699c:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   1699e:	daf0      	bge.n	16982 <signal_poll_event+0x12>
}
   169a0:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   169a2:	4620      	mov	r0, r4
   169a4:	e7ed      	b.n	16982 <signal_poll_event+0x12>

000169a6 <add_event>:
{
   169a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   169a8:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   169aa:	e9d0 2300 	ldrd	r2, r3, [r0]
   169ae:	4290      	cmp	r0, r2
   169b0:	4604      	mov	r4, r0
   169b2:	460d      	mov	r5, r1
   169b4:	d106      	bne.n	169c4 <add_event+0x1e>
	node->prev = list->tail;
   169b6:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   169b8:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   169ba:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   169bc:	6863      	ldr	r3, [r4, #4]
   169be:	601d      	str	r5, [r3, #0]
	list->tail = node;
   169c0:	6065      	str	r5, [r4, #4]
}
   169c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   169c4:	2b00      	cmp	r3, #0
   169c6:	d0f6      	beq.n	169b6 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   169c8:	689b      	ldr	r3, [r3, #8]
   169ca:	6879      	ldr	r1, [r7, #4]
   169cc:	6858      	ldr	r0, [r3, #4]
   169ce:	f7ff fee6 	bl	1679e <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   169d2:	2800      	cmp	r0, #0
   169d4:	d1ef      	bne.n	169b6 <add_event+0x10>
	return list->head == list;
   169d6:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   169d8:	42b4      	cmp	r4, r6
   169da:	d0ec      	beq.n	169b6 <add_event+0x10>
   169dc:	2e00      	cmp	r6, #0
   169de:	bf38      	it	cc
   169e0:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   169e2:	2e00      	cmp	r6, #0
   169e4:	d0e7      	beq.n	169b6 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   169e6:	68b3      	ldr	r3, [r6, #8]
   169e8:	6878      	ldr	r0, [r7, #4]
   169ea:	6859      	ldr	r1, [r3, #4]
   169ec:	f7ff fed7 	bl	1679e <z_is_t1_higher_prio_than_t2>
   169f0:	b128      	cbz	r0, 169fe <add_event+0x58>
	node->prev = successor->prev;
   169f2:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   169f4:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   169f8:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   169fa:	6075      	str	r5, [r6, #4]
			return;
   169fc:	e7e1      	b.n	169c2 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   169fe:	6863      	ldr	r3, [r4, #4]
   16a00:	42b3      	cmp	r3, r6
   16a02:	d0d8      	beq.n	169b6 <add_event+0x10>
   16a04:	6836      	ldr	r6, [r6, #0]
   16a06:	e7ec      	b.n	169e2 <add_event+0x3c>

00016a08 <z_handle_obj_poll_events>:
{
   16a08:	4603      	mov	r3, r0
	return list->head == list;
   16a0a:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   16a0c:	4283      	cmp	r3, r0
   16a0e:	d008      	beq.n	16a22 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   16a10:	e9d0 3200 	ldrd	r3, r2, [r0]
   16a14:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   16a16:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   16a18:	2300      	movs	r3, #0
	node->prev = NULL;
   16a1a:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   16a1e:	f7ff bfa7 	b.w	16970 <signal_poll_event>
}
   16a22:	4770      	bx	lr

00016a24 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   16a24:	4770      	bx	lr
