
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	20003698 	.word	0x20003698
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   4:	00003de1 	.word	0x00003de1
   8:	000133c7 	.word	0x000133c7
   c:	00003e11 	.word	0x00003e11
  10:	00003e11 	.word	0x00003e11
		if (fdtable[fd].obj == NULL) {
  14:	00003e11 	.word	0x00003e11
  18:	00003e11 	.word	0x00003e11
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
  1c:	00003e11 	.word	0x00003e11
	...
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
  2c:	00003bbd 	.word	0x00003bbd
  30:	00003e11 	.word	0x00003e11
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  34:	00000000 	.word	0x00000000
		fdtable[fd].obj = FD_OBJ_RESERVED;
  38:	00003b65 	.word	0x00003b65
  3c:	000027b5 	.word	0x000027b5

00000040 <_irq_vector_table>:
  40:	00003da1 00003da1 00003da1 00003da1     .=...=...=...=..
		sys_pm_notify_power_state_exit(pm_state);
		_sys_pm_power_state_exit_post_ops(pm_state);
	}

	return pm_state;
}
  50:	00003da1 00003da1 00003da1 00003da1     .=...=...=...=..
  60:	00003da1 00003da1 00003da1 00003da1     .=...=...=...=..
  70:	00003da1 00003da1 00003da1 00003da1     .=...=...=...=..
  80:	00003da1 00003da1 00003da1 00003da1     .=...=...=...=..
  90:	00003da1 00003da1 00003da1 00003da1     .=...=...=...=..
  a0:	00003da1 00003da1 00003da1 00003da1     .=...=...=...=..
  b0:	00003da1 00003da1 00003da1 00003da1     .=...=...=...=..
  c0:	00003da1 00003da1 00003da1 00003da1     .=...=...=...=..
  d0:	00003da1 00003da1 00003da1 00003da1     .=...=...=...=..
  e0:	00003da1 00003da1 00003da1 00003da1     .=...=...=...=..
  f0:	00003da1 00003da1 00003da1 00003da1     .=...=...=...=..
 100:	00003da1 00003da1 00003da1 00003da1     .=...=...=...=..
 110:	00003da1 00003da1 00003da1 00003da1     .=...=...=...=..
 120:	00003da1 00003da1 00003da1 00003da1     .=...=...=...=..
 130:	00003da1 00003da1 00003da1 00003da1     .=...=...=...=..
 140:	00003da1 00003da1 00003da1 00003da1     .=...=...=...=..
 150:	00003da1                                .=..

Disassembly of section text:

00000158 <__aeabi_uldivmod>:
     158:	b953      	cbnz	r3, 170 <__aeabi_uldivmod+0x18>
     15a:	b94a      	cbnz	r2, 170 <__aeabi_uldivmod+0x18>
     15c:	2900      	cmp	r1, #0
     15e:	bf08      	it	eq
     160:	2800      	cmpeq	r0, #0
     162:	bf1c      	itt	ne
     164:	f04f 31ff 	movne.w	r1, #4294967295
     168:	f04f 30ff 	movne.w	r0, #4294967295
     16c:	f000 b984 	b.w	478 <__aeabi_idiv0>
     170:	f1ad 0c08 	sub.w	ip, sp, #8
     174:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     178:	f000 f806 	bl	188 <__udivmoddi4>
     17c:	f8dd e004 	ldr.w	lr, [sp, #4]
     180:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     184:	b004      	add	sp, #16
     186:	4770      	bx	lr

00000188 <__udivmoddi4>:
     188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     18c:	9e09      	ldr	r6, [sp, #36]	; 0x24
     18e:	460d      	mov	r5, r1
     190:	4604      	mov	r4, r0
     192:	468a      	mov	sl, r1
     194:	2b00      	cmp	r3, #0
     196:	f040 8085 	bne.w	2a4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x24>
     19a:	428a      	cmp	r2, r1
     19c:	4617      	mov	r7, r2
     19e:	d944      	bls.n	22a <CONFIG_UART_MUX_RX_STACK_SIZE+0x2a>
     1a0:	fab2 f282 	clz	r2, r2
     1a4:	b14a      	cbz	r2, 1ba <__udivmoddi4+0x32>
     1a6:	f1c2 0120 	rsb	r1, r2, #32
     1aa:	fa05 f302 	lsl.w	r3, r5, r2
     1ae:	4097      	lsls	r7, r2
     1b0:	4094      	lsls	r4, r2
     1b2:	fa20 f101 	lsr.w	r1, r0, r1
     1b6:	ea41 0a03 	orr.w	sl, r1, r3
     1ba:	ea4f 4817 	mov.w	r8, r7, lsr #16
     1be:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     1c2:	fa1f f987 	uxth.w	r9, r7
     1c6:	fbba fef8 	udiv	lr, sl, r8
     1ca:	fb08 a31e 	mls	r3, r8, lr, sl
     1ce:	fb0e f109 	mul.w	r1, lr, r9
     1d2:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
     1d6:	4299      	cmp	r1, r3
     1d8:	d907      	bls.n	1ea <CONFIG_SRAM_SIZE+0x2a>
     1da:	18fb      	adds	r3, r7, r3
     1dc:	f10e 30ff 	add.w	r0, lr, #4294967295
     1e0:	d202      	bcs.n	1e8 <CONFIG_SRAM_SIZE+0x28>
     1e2:	4299      	cmp	r1, r3
     1e4:	f200 8130 	bhi.w	448 <CONFIG_BT_HCI_TX_STACK_SIZE+0x48>
     1e8:	4686      	mov	lr, r0
     1ea:	1a59      	subs	r1, r3, r1
     1ec:	b2a3      	uxth	r3, r4
     1ee:	fbb1 f0f8 	udiv	r0, r1, r8
     1f2:	fb08 1110 	mls	r1, r8, r0, r1
     1f6:	fb00 f909 	mul.w	r9, r0, r9
     1fa:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     1fe:	45a1      	cmp	r9, r4
     200:	d907      	bls.n	212 <CONFIG_UART_MUX_RX_STACK_SIZE+0x12>
     202:	193c      	adds	r4, r7, r4
     204:	f100 33ff 	add.w	r3, r0, #4294967295
     208:	d202      	bcs.n	210 <CONFIG_UART_MUX_RX_STACK_SIZE+0x10>
     20a:	45a1      	cmp	r9, r4
     20c:	f200 8119 	bhi.w	442 <CONFIG_BT_HCI_TX_STACK_SIZE+0x42>
     210:	4618      	mov	r0, r3
     212:	eba4 0409 	sub.w	r4, r4, r9
     216:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     21a:	2100      	movs	r1, #0
     21c:	b11e      	cbz	r6, 226 <CONFIG_UART_MUX_RX_STACK_SIZE+0x26>
     21e:	40d4      	lsrs	r4, r2
     220:	2300      	movs	r3, #0
     222:	e9c6 4300 	strd	r4, r3, [r6]
     226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     22a:	b902      	cbnz	r2, 22e <CONFIG_UART_MUX_RX_STACK_SIZE+0x2e>
     22c:	deff      	udf	#255	; 0xff
     22e:	fab2 f282 	clz	r2, r2
     232:	2a00      	cmp	r2, #0
     234:	d151      	bne.n	2da <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5a>
     236:	1bcb      	subs	r3, r1, r7
     238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     23c:	fa1f f887 	uxth.w	r8, r7
     240:	2101      	movs	r1, #1
     242:	0c25      	lsrs	r5, r4, #16
     244:	fbb3 fcfe 	udiv	ip, r3, lr
     248:	fb0e 301c 	mls	r0, lr, ip, r3
     24c:	fb08 f90c 	mul.w	r9, r8, ip
     250:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     254:	45a9      	cmp	r9, r5
     256:	d90b      	bls.n	270 <CONFIG_UART_MUX_RX_STACK_SIZE+0x70>
     258:	197d      	adds	r5, r7, r5
     25a:	f10c 33ff 	add.w	r3, ip, #4294967295
     25e:	bf2c      	ite	cs
     260:	2001      	movcs	r0, #1
     262:	2000      	movcc	r0, #0
     264:	45a9      	cmp	r9, r5
     266:	d902      	bls.n	26e <CONFIG_UART_MUX_RX_STACK_SIZE+0x6e>
     268:	2800      	cmp	r0, #0
     26a:	f000 80f1 	beq.w	450 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x4>
     26e:	469c      	mov	ip, r3
     270:	eba5 0509 	sub.w	r5, r5, r9
     274:	b2a3      	uxth	r3, r4
     276:	fbb5 f0fe 	udiv	r0, r5, lr
     27a:	fb0e 5510 	mls	r5, lr, r0, r5
     27e:	fb08 f800 	mul.w	r8, r8, r0
     282:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     286:	45a0      	cmp	r8, r4
     288:	d907      	bls.n	29a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1a>
     28a:	193c      	adds	r4, r7, r4
     28c:	f100 33ff 	add.w	r3, r0, #4294967295
     290:	d202      	bcs.n	298 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x18>
     292:	45a0      	cmp	r8, r4
     294:	f200 80d2 	bhi.w	43c <CONFIG_BT_HCI_TX_STACK_SIZE+0x3c>
     298:	4618      	mov	r0, r3
     29a:	eba4 0408 	sub.w	r4, r4, r8
     29e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     2a2:	e7bb      	b.n	21c <CONFIG_UART_MUX_RX_STACK_SIZE+0x1c>
     2a4:	428b      	cmp	r3, r1
     2a6:	d908      	bls.n	2ba <CONFIG_PM_PARTITION_SIZE_PROVISION+0x3a>
     2a8:	2e00      	cmp	r6, #0
     2aa:	f000 80be 	beq.w	42a <CONFIG_BT_HCI_TX_STACK_SIZE+0x2a>
     2ae:	2100      	movs	r1, #0
     2b0:	e9c6 0500 	strd	r0, r5, [r6]
     2b4:	4608      	mov	r0, r1
     2b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     2ba:	fab3 f183 	clz	r1, r3
     2be:	2900      	cmp	r1, #0
     2c0:	d14d      	bne.n	35e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xde>
     2c2:	42ab      	cmp	r3, r5
     2c4:	f0c0 80b4 	bcc.w	430 <CONFIG_BT_HCI_TX_STACK_SIZE+0x30>
     2c8:	4282      	cmp	r2, r0
     2ca:	f240 80b1 	bls.w	430 <CONFIG_BT_HCI_TX_STACK_SIZE+0x30>
     2ce:	4608      	mov	r0, r1
     2d0:	2e00      	cmp	r6, #0
     2d2:	d0a8      	beq.n	226 <CONFIG_UART_MUX_RX_STACK_SIZE+0x26>
     2d4:	e9c6 4a00 	strd	r4, sl, [r6]
     2d8:	e7a5      	b.n	226 <CONFIG_UART_MUX_RX_STACK_SIZE+0x26>
     2da:	f1c2 0020 	rsb	r0, r2, #32
     2de:	4097      	lsls	r7, r2
     2e0:	fa01 f302 	lsl.w	r3, r1, r2
     2e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     2e8:	40c1      	lsrs	r1, r0
     2ea:	fa24 f500 	lsr.w	r5, r4, r0
     2ee:	fa1f f887 	uxth.w	r8, r7
     2f2:	4094      	lsls	r4, r2
     2f4:	431d      	orrs	r5, r3
     2f6:	fbb1 f0fe 	udiv	r0, r1, lr
     2fa:	0c2b      	lsrs	r3, r5, #16
     2fc:	fb0e 1110 	mls	r1, lr, r0, r1
     300:	fb00 fc08 	mul.w	ip, r0, r8
     304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     308:	459c      	cmp	ip, r3
     30a:	d90e      	bls.n	32a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xaa>
     30c:	18fb      	adds	r3, r7, r3
     30e:	f100 31ff 	add.w	r1, r0, #4294967295
     312:	bf2c      	ite	cs
     314:	f04f 0901 	movcs.w	r9, #1
     318:	f04f 0900 	movcc.w	r9, #0
     31c:	459c      	cmp	ip, r3
     31e:	d903      	bls.n	328 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa8>
     320:	f1b9 0f00 	cmp.w	r9, #0
     324:	f000 8098 	beq.w	458 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xc>
     328:	4608      	mov	r0, r1
     32a:	eba3 030c 	sub.w	r3, r3, ip
     32e:	b2ad      	uxth	r5, r5
     330:	fbb3 f1fe 	udiv	r1, r3, lr
     334:	fb0e 3311 	mls	r3, lr, r1, r3
     338:	fb01 fc08 	mul.w	ip, r1, r8
     33c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     340:	45ac      	cmp	ip, r5
     342:	d907      	bls.n	354 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd4>
     344:	197d      	adds	r5, r7, r5
     346:	f101 33ff 	add.w	r3, r1, #4294967295
     34a:	d202      	bcs.n	352 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd2>
     34c:	45ac      	cmp	ip, r5
     34e:	f200 808a 	bhi.w	466 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x1a>
     352:	4619      	mov	r1, r3
     354:	eba5 030c 	sub.w	r3, r5, ip
     358:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     35c:	e771      	b.n	242 <CONFIG_UART_MUX_RX_STACK_SIZE+0x42>
     35e:	f1c1 0420 	rsb	r4, r1, #32
     362:	408b      	lsls	r3, r1
     364:	fa02 f701 	lsl.w	r7, r2, r1
     368:	fa05 fc01 	lsl.w	ip, r5, r1
     36c:	40e2      	lsrs	r2, r4
     36e:	fa20 f804 	lsr.w	r8, r0, r4
     372:	40e5      	lsrs	r5, r4
     374:	fa00 fe01 	lsl.w	lr, r0, r1
     378:	4313      	orrs	r3, r2
     37a:	ea48 020c 	orr.w	r2, r8, ip
     37e:	ea4f 4813 	mov.w	r8, r3, lsr #16
     382:	ea4f 4c12 	mov.w	ip, r2, lsr #16
     386:	fa1f f983 	uxth.w	r9, r3
     38a:	fbb5 faf8 	udiv	sl, r5, r8
     38e:	fb08 551a 	mls	r5, r8, sl, r5
     392:	fb0a f009 	mul.w	r0, sl, r9
     396:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
     39a:	4560      	cmp	r0, ip
     39c:	d90e      	bls.n	3bc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x13c>
     39e:	eb13 0c0c 	adds.w	ip, r3, ip
     3a2:	f10a 35ff 	add.w	r5, sl, #4294967295
     3a6:	bf2c      	ite	cs
     3a8:	f04f 0b01 	movcs.w	fp, #1
     3ac:	f04f 0b00 	movcc.w	fp, #0
     3b0:	4560      	cmp	r0, ip
     3b2:	d902      	bls.n	3ba <CONFIG_PM_PARTITION_SIZE_PROVISION+0x13a>
     3b4:	f1bb 0f00 	cmp.w	fp, #0
     3b8:	d051      	beq.n	45e <CONFIG_BT_HCI_ECC_STACK_SIZE+0x12>
     3ba:	46aa      	mov	sl, r5
     3bc:	ebac 0c00 	sub.w	ip, ip, r0
     3c0:	b292      	uxth	r2, r2
     3c2:	fbbc f0f8 	udiv	r0, ip, r8
     3c6:	fb08 cc10 	mls	ip, r8, r0, ip
     3ca:	fb00 f909 	mul.w	r9, r0, r9
     3ce:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
     3d2:	45e1      	cmp	r9, ip
     3d4:	d907      	bls.n	3e6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x166>
     3d6:	eb13 0c0c 	adds.w	ip, r3, ip
     3da:	f100 32ff 	add.w	r2, r0, #4294967295
     3de:	d201      	bcs.n	3e4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x164>
     3e0:	45e1      	cmp	r9, ip
     3e2:	d843      	bhi.n	46c <CONFIG_BT_HCI_ECC_STACK_SIZE+0x20>
     3e4:	4610      	mov	r0, r2
     3e6:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
     3ea:	ebac 0c09 	sub.w	ip, ip, r9
     3ee:	fba0 8907 	umull	r8, r9, r0, r7
     3f2:	45cc      	cmp	ip, r9
     3f4:	4645      	mov	r5, r8
     3f6:	464a      	mov	r2, r9
     3f8:	d302      	bcc.n	400 <CONFIG_BT_HCI_TX_STACK_SIZE>
     3fa:	d106      	bne.n	40a <CONFIG_BT_HCI_TX_STACK_SIZE+0xa>
     3fc:	45c6      	cmp	lr, r8
     3fe:	d204      	bcs.n	40a <CONFIG_BT_HCI_TX_STACK_SIZE+0xa>
     400:	3801      	subs	r0, #1
     402:	ebb8 0507 	subs.w	r5, r8, r7
     406:	eb69 0203 	sbc.w	r2, r9, r3
     40a:	b396      	cbz	r6, 472 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x26>
     40c:	ebbe 0305 	subs.w	r3, lr, r5
     410:	eb6c 0c02 	sbc.w	ip, ip, r2
     414:	fa23 f201 	lsr.w	r2, r3, r1
     418:	fa0c f404 	lsl.w	r4, ip, r4
     41c:	fa2c f301 	lsr.w	r3, ip, r1
     420:	2100      	movs	r1, #0
     422:	4314      	orrs	r4, r2
     424:	e9c6 4300 	strd	r4, r3, [r6]
     428:	e6fd      	b.n	226 <CONFIG_UART_MUX_RX_STACK_SIZE+0x26>
     42a:	4631      	mov	r1, r6
     42c:	4630      	mov	r0, r6
     42e:	e6fa      	b.n	226 <CONFIG_UART_MUX_RX_STACK_SIZE+0x26>
     430:	1a84      	subs	r4, r0, r2
     432:	eb65 0303 	sbc.w	r3, r5, r3
     436:	2001      	movs	r0, #1
     438:	469a      	mov	sl, r3
     43a:	e749      	b.n	2d0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x50>
     43c:	3802      	subs	r0, #2
     43e:	443c      	add	r4, r7
     440:	e72b      	b.n	29a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1a>
     442:	3802      	subs	r0, #2
     444:	443c      	add	r4, r7
     446:	e6e4      	b.n	212 <CONFIG_UART_MUX_RX_STACK_SIZE+0x12>
     448:	f1ae 0e02 	sub.w	lr, lr, #2
     44c:	443b      	add	r3, r7
     44e:	e6cc      	b.n	1ea <CONFIG_SRAM_SIZE+0x2a>
     450:	f1ac 0c02 	sub.w	ip, ip, #2
     454:	443d      	add	r5, r7
     456:	e70b      	b.n	270 <CONFIG_UART_MUX_RX_STACK_SIZE+0x70>
     458:	3802      	subs	r0, #2
     45a:	443b      	add	r3, r7
     45c:	e765      	b.n	32a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xaa>
     45e:	f1aa 0a02 	sub.w	sl, sl, #2
     462:	449c      	add	ip, r3
     464:	e7aa      	b.n	3bc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x13c>
     466:	3902      	subs	r1, #2
     468:	443d      	add	r5, r7
     46a:	e773      	b.n	354 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd4>
     46c:	3802      	subs	r0, #2
     46e:	449c      	add	ip, r3
     470:	e7b9      	b.n	3e6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x166>
     472:	4631      	mov	r1, r6
     474:	e6d7      	b.n	226 <CONFIG_UART_MUX_RX_STACK_SIZE+0x26>
     476:	bf00      	nop

00000478 <__aeabi_idiv0>:
     478:	4770      	bx	lr
     47a:	bf00      	nop
     47c:	0000      	movs	r0, r0
	...

00000480 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
     480:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
     482:	4d60      	ldr	r5, [pc, #384]	; (604 <CONFIG_BT_COMPANY_ID+0x13>)
     484:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
     488:	6899      	ldr	r1, [r3, #8]
     48a:	f011 0101 	ands.w	r1, r1, #1
     48e:	d11e      	bne.n	4ce <bt_init+0x4e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
     490:	f640 4003 	movw	r0, #3075	; 0xc03
     494:	aa01      	add	r2, sp, #4
     496:	f004 fe8b 	bl	51b0 <bt_hci_cmd_send_sync>
		if (err) {
     49a:	4604      	mov	r4, r0
     49c:	2800      	cmp	r0, #0
     49e:	f040 80ae 	bne.w	5fe <CONFIG_BT_COMPANY_ID+0xd>
		hci_reset_complete(rsp);
     4a2:	9b01      	ldr	r3, [sp, #4]
	u8_t status = buf->data[0];
     4a4:	689b      	ldr	r3, [r3, #8]
	if (status) {
     4a6:	781b      	ldrb	r3, [r3, #0]
     4a8:	b973      	cbnz	r3, 4c8 <bt_init+0x48>
	scan_dev_found_cb = NULL;
     4aa:	4a57      	ldr	r2, [pc, #348]	; (608 <CONFIG_BT_COMPANY_ID+0x17>)
     4ac:	6013      	str	r3, [r2, #0]
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
     4ae:	f105 0398 	add.w	r3, r5, #152	; 0x98
     4b2:	4618      	mov	r0, r3
     4b4:	f013 f95b 	bl	1376e <atomic_get>
     4b8:	f000 0005 	and.w	r0, r0, #5
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     4bc:	e8d3 2fef 	ldaex	r2, [r3]
     4c0:	e8c3 0fe1 	stlex	r1, r0, [r3]
     4c4:	2900      	cmp	r1, #0
     4c6:	d1f9      	bne.n	4bc <bt_init+0x3c>
		net_buf_unref(rsp);
     4c8:	9801      	ldr	r0, [sp, #4]
     4ca:	f00c ff47 	bl	d35c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
     4ce:	2100      	movs	r1, #0
     4d0:	f241 0003 	movw	r0, #4099	; 0x1003
     4d4:	aa01      	add	r2, sp, #4
     4d6:	f004 fe6b 	bl	51b0 <bt_hci_cmd_send_sync>
	if (err) {
     4da:	4604      	mov	r4, r0
     4dc:	2800      	cmp	r0, #0
     4de:	f040 808e 	bne.w	5fe <CONFIG_BT_COMPANY_ID+0xd>
	read_local_features_complete(rsp);
     4e2:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
     4e4:	2208      	movs	r2, #8
     4e6:	6899      	ldr	r1, [r3, #8]
     4e8:	4848      	ldr	r0, [pc, #288]	; (60c <CONFIG_BT_COMPANY_ID+0x1b>)
     4ea:	3101      	adds	r1, #1
     4ec:	f013 f840 	bl	13570 <memcpy>
	net_buf_unref(rsp);
     4f0:	9801      	ldr	r0, [sp, #4]
     4f2:	f00c ff33 	bl	d35c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
     4f6:	4621      	mov	r1, r4
     4f8:	f241 0001 	movw	r0, #4097	; 0x1001
     4fc:	aa01      	add	r2, sp, #4
     4fe:	f004 fe57 	bl	51b0 <bt_hci_cmd_send_sync>
	if (err) {
     502:	4604      	mov	r4, r0
     504:	2800      	cmp	r0, #0
     506:	d17a      	bne.n	5fe <CONFIG_BT_COMPANY_ID+0xd>
	read_local_ver_complete(rsp);
     508:	9801      	ldr	r0, [sp, #4]
     50a:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
     50c:	785a      	ldrb	r2, [r3, #1]
     50e:	f885 2038 	strb.w	r2, [r5, #56]	; 0x38
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
     512:	78d9      	ldrb	r1, [r3, #3]
     514:	789a      	ldrb	r2, [r3, #2]
     516:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     51a:	876a      	strh	r2, [r5, #58]	; 0x3a
	bt_dev.lmp_version = rp->lmp_version;
     51c:	791a      	ldrb	r2, [r3, #4]
     51e:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
     522:	7a19      	ldrb	r1, [r3, #8]
     524:	79da      	ldrb	r2, [r3, #7]
     526:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     52a:	87aa      	strh	r2, [r5, #60]	; 0x3c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
     52c:	795a      	ldrb	r2, [r3, #5]
     52e:	799b      	ldrb	r3, [r3, #6]
     530:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
     534:	87eb      	strh	r3, [r5, #62]	; 0x3e
	net_buf_unref(rsp);
     536:	f00c ff11 	bl	d35c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
     53a:	4621      	mov	r1, r4
     53c:	f241 0002 	movw	r0, #4098	; 0x1002
     540:	aa01      	add	r2, sp, #4
     542:	f004 fe35 	bl	51b0 <bt_hci_cmd_send_sync>
	if (err) {
     546:	4604      	mov	r4, r0
     548:	2800      	cmp	r0, #0
     54a:	d158      	bne.n	5fe <CONFIG_BT_COMPANY_ID+0xd>
	read_supported_commands_complete(rsp);
     54c:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
     54e:	2240      	movs	r2, #64	; 0x40
     550:	6899      	ldr	r1, [r3, #8]
     552:	482f      	ldr	r0, [pc, #188]	; (610 <CONFIG_BT_COMPANY_ID+0x1f>)
     554:	3101      	adds	r1, #1
     556:	f013 f80b 	bl	13570 <memcpy>
	net_buf_unref(rsp);
     55a:	9801      	ldr	r0, [sp, #4]
     55c:	f00c fefe 	bl	d35c <net_buf_unref>
		err = prng_init();
     560:	f006 faec 	bl	6b3c <prng_init>
		if (err) {
     564:	4604      	mov	r4, r0
     566:	2800      	cmp	r0, #0
     568:	d149      	bne.n	5fe <CONFIG_BT_COMPANY_ID+0xd>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
     56a:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
     56e:	069a      	lsls	r2, r3, #26
     570:	d40e      	bmi.n	590 <bt_init+0x110>
		BT_WARN("Controller to host flow control not supported");
     572:	2157      	movs	r1, #87	; 0x57
     574:	4827      	ldr	r0, [pc, #156]	; (614 <CONFIG_BT_COMPANY_ID+0x23>)
     576:	f011 fce7 	bl	11f48 <printk>
	if (!BT_FEAT_LE(bt_dev.features)) {
     57a:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
     57e:	065b      	lsls	r3, r3, #25
     580:	d44c      	bmi.n	61c <CONFIG_BT_COMPANY_ID+0x2b>
		BT_ERR("Non-LE capable controller detected!");
     582:	2145      	movs	r1, #69	; 0x45
     584:	4824      	ldr	r0, [pc, #144]	; (618 <CONFIG_BT_COMPANY_ID+0x27>)
     586:	f011 fcdf 	bl	11f48 <printk>
		return -ENODEV;
     58a:	f06f 0412 	mvn.w	r4, #18
     58e:	e036      	b.n	5fe <CONFIG_BT_COMPANY_ID+0xd>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
     590:	2107      	movs	r1, #7
     592:	f640 4033 	movw	r0, #3123	; 0xc33
     596:	f004 fdc1 	bl	511c <bt_hci_cmd_create>
	if (!buf) {
     59a:	4607      	mov	r7, r0
     59c:	b910      	cbnz	r0, 5a4 <bt_init+0x124>
		return -ENOBUFS;
     59e:	f06f 0436 	mvn.w	r4, #54	; 0x36
     5a2:	e02c      	b.n	5fe <CONFIG_BT_COMPANY_ID+0xd>
	hbs = net_buf_add(buf, sizeof(*hbs));
     5a4:	2107      	movs	r1, #7
     5a6:	3008      	adds	r0, #8
     5a8:	f00d f84a 	bl	d640 <net_buf_simple_add>
	(void)memset(hbs, 0, sizeof(*hbs));
     5ac:	4621      	mov	r1, r4
     5ae:	2207      	movs	r2, #7
	hbs = net_buf_add(buf, sizeof(*hbs));
     5b0:	4606      	mov	r6, r0
	(void)memset(hbs, 0, sizeof(*hbs));
     5b2:	f013 f808 	bl	135c6 <memset>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
     5b6:	f06f 0304 	mvn.w	r3, #4
     5ba:	7033      	strb	r3, [r6, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
     5bc:	2306      	movs	r3, #6
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
     5be:	4622      	mov	r2, r4
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
     5c0:	7074      	strb	r4, [r6, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
     5c2:	7134      	strb	r4, [r6, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
     5c4:	4639      	mov	r1, r7
     5c6:	f640 4033 	movw	r0, #3123	; 0xc33
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
     5ca:	70f3      	strb	r3, [r6, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
     5cc:	f004 fdf0 	bl	51b0 <bt_hci_cmd_send_sync>
	if (err) {
     5d0:	4604      	mov	r4, r0
     5d2:	b9a0      	cbnz	r0, 5fe <CONFIG_BT_COMPANY_ID+0xd>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
     5d4:	2101      	movs	r1, #1
     5d6:	f640 4031 	movw	r0, #3121	; 0xc31
     5da:	f004 fd9f 	bl	511c <bt_hci_cmd_create>
	if (!buf) {
     5de:	4606      	mov	r6, r0
     5e0:	2800      	cmp	r0, #0
     5e2:	d0dc      	beq.n	59e <bt_init+0x11e>
	net_buf_add_u8(buf, BT_HCI_CTL_TO_HOST_FLOW_ENABLE);
     5e4:	2101      	movs	r1, #1
     5e6:	3008      	adds	r0, #8
     5e8:	f015 f83a 	bl	15660 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
     5ec:	4622      	mov	r2, r4
     5ee:	4631      	mov	r1, r6
     5f0:	f640 4031 	movw	r0, #3121	; 0xc31
     5f4:	f004 fddc 	bl	51b0 <bt_hci_cmd_send_sync>
	if (err) {
     5f8:	4604      	mov	r4, r0
     5fa:	2800      	cmp	r0, #0
     5fc:	d0bd      	beq.n	57a <bt_init+0xfa>
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
     5fe:	4620      	mov	r0, r4
     600:	b003      	add	sp, #12
     602:	bdf0      	pop	{r4, r5, r6, r7, pc}
     604:	20000000 	.word	0x20000000
     608:	20000ca8 	.word	0x20000ca8
     60c:	20000040 	.word	0x20000040
     610:	20000048 	.word	0x20000048
     614:	000196e4 	.word	0x000196e4
     618:	00019717 	.word	0x00019717
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
     61c:	2100      	movs	r1, #0
     61e:	f242 0003 	movw	r0, #8195	; 0x2003
     622:	aa01      	add	r2, sp, #4
     624:	f004 fdc4 	bl	51b0 <bt_hci_cmd_send_sync>
	if (err) {
     628:	4604      	mov	r4, r0
     62a:	2800      	cmp	r0, #0
     62c:	d1e7      	bne.n	5fe <CONFIG_BT_COMPANY_ID+0xd>
	read_le_features_complete(rsp);
     62e:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
     630:	2208      	movs	r2, #8
     632:	6899      	ldr	r1, [r3, #8]
     634:	48b8      	ldr	r0, [pc, #736]	; (918 <CONFIG_BT_RX_STACK_SIZE+0x80>)
     636:	3101      	adds	r1, #1
     638:	f012 ff9a 	bl	13570 <memcpy>
	net_buf_unref(rsp);
     63c:	9801      	ldr	r0, [sp, #4]
     63e:	f00c fe8d 	bl	d35c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
     642:	4621      	mov	r1, r4
     644:	f242 0002 	movw	r0, #8194	; 0x2002
     648:	aa01      	add	r2, sp, #4
     64a:	f004 fdb1 	bl	51b0 <bt_hci_cmd_send_sync>
	if (err) {
     64e:	4604      	mov	r4, r0
     650:	2800      	cmp	r0, #0
     652:	d1d4      	bne.n	5fe <CONFIG_BT_COMPANY_ID+0xd>
	le_read_buffer_size_complete(rsp);
     654:	9b01      	ldr	r3, [sp, #4]
     656:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
     658:	f8b3 2001 	ldrh.w	r2, [r3, #1]
     65c:	b291      	uxth	r1, r2
     65e:	f8a5 20b0 	strh.w	r2, [r5, #176]	; 0xb0
	if (!bt_dev.le.mtu) {
     662:	b121      	cbz	r1, 66e <CONFIG_BT_COMPANY_ID+0x7d>
	k_sem_init(&bt_dev.le.pkts, rp->le_max_num, rp->le_max_num);
     664:	78da      	ldrb	r2, [r3, #3]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
     666:	48ad      	ldr	r0, [pc, #692]	; (91c <CONFIG_BT_RX_STACK_SIZE+0x84>)
     668:	4611      	mov	r1, r2
     66a:	f015 fffb 	bl	16664 <z_impl_k_sem_init>
	net_buf_unref(rsp);
     66e:	9801      	ldr	r0, [sp, #4]
     670:	f00c fe74 	bl	d35c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
     674:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
     678:	f016 0620 	ands.w	r6, r6, #32
     67c:	f000 80f1 	beq.w	862 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x62>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
     680:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
     684:	071f      	lsls	r7, r3, #28
     686:	d511      	bpl.n	6ac <CONFIG_BT_COMPANY_ID+0xbb>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
     688:	2100      	movs	r1, #0
     68a:	f242 001c 	movw	r0, #8220	; 0x201c
     68e:	aa01      	add	r2, sp, #4
     690:	f004 fd8e 	bl	51b0 <bt_hci_cmd_send_sync>
		if (err) {
     694:	4604      	mov	r4, r0
     696:	2800      	cmp	r0, #0
     698:	d1b1      	bne.n	5fe <CONFIG_BT_COMPANY_ID+0xd>
		le_read_supp_states_complete(rsp);
     69a:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
     69c:	6883      	ldr	r3, [r0, #8]
     69e:	f853 2f01 	ldr.w	r2, [r3, #1]!
     6a2:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
     6a4:	e9c5 232a 	strd	r2, r3, [r5, #168]	; 0xa8
		net_buf_unref(rsp);
     6a8:	f00c fe58 	bl	d35c <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
     6ac:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
     6b0:	069e      	lsls	r6, r3, #26
     6b2:	d523      	bpl.n	6fc <CONFIG_BT_COMPANY_ID+0x10b>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
     6b4:	4668      	mov	r0, sp
     6b6:	f10d 0102 	add.w	r1, sp, #2
     6ba:	f004 fde7 	bl	528c <hci_le_read_max_data_len>
		if (err) {
     6be:	4604      	mov	r4, r0
     6c0:	2800      	cmp	r0, #0
     6c2:	d19c      	bne.n	5fe <CONFIG_BT_COMPANY_ID+0xd>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     6c4:	2104      	movs	r1, #4
     6c6:	f242 0024 	movw	r0, #8228	; 0x2024
     6ca:	f004 fd27 	bl	511c <bt_hci_cmd_create>
		if (!buf) {
     6ce:	4606      	mov	r6, r0
     6d0:	2800      	cmp	r0, #0
     6d2:	f43f af64 	beq.w	59e <bt_init+0x11e>
		cp = net_buf_add(buf, sizeof(*cp));
     6d6:	2104      	movs	r1, #4
     6d8:	3008      	adds	r0, #8
     6da:	f00c ffb1 	bl	d640 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
     6de:	f8bd 3000 	ldrh.w	r3, [sp]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     6e2:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
     6e4:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
     6e6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     6ea:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
     6ec:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     6ee:	f242 0024 	movw	r0, #8228	; 0x2024
     6f2:	f004 fd5d 	bl	51b0 <bt_hci_cmd_send_sync>
		if (err) {
     6f6:	4604      	mov	r4, r0
     6f8:	2800      	cmp	r0, #0
     6fa:	d180      	bne.n	5fe <CONFIG_BT_COMPANY_ID+0xd>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
     6fc:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
     700:	065c      	lsls	r4, r3, #25
     702:	d510      	bpl.n	726 <CONFIG_BT_COMPANY_ID+0x135>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
     704:	2100      	movs	r1, #0
     706:	f242 002a 	movw	r0, #8234	; 0x202a
     70a:	aa01      	add	r2, sp, #4
     70c:	f004 fd50 	bl	51b0 <bt_hci_cmd_send_sync>
		if (err) {
     710:	4604      	mov	r4, r0
     712:	2800      	cmp	r0, #0
     714:	f47f af73 	bne.w	5fe <CONFIG_BT_COMPANY_ID+0xd>
		le_read_resolving_list_size_complete(rsp);
     718:	9801      	ldr	r0, [sp, #4]
	bt_dev.le.rl_size = rp->rl_size;
     71a:	6883      	ldr	r3, [r0, #8]
     71c:	785b      	ldrb	r3, [r3, #1]
     71e:	f885 30cc 	strb.w	r3, [r5, #204]	; 0xcc
		net_buf_unref(rsp);
     722:	f00c fe1b 	bl	d35c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
     726:	2108      	movs	r1, #8
     728:	f242 0001 	movw	r0, #8193	; 0x2001
     72c:	f004 fcf6 	bl	511c <bt_hci_cmd_create>
	if (!buf) {
     730:	4604      	mov	r4, r0
     732:	2800      	cmp	r0, #0
     734:	f43f af33 	beq.w	59e <bt_init+0x11e>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
     738:	2108      	movs	r1, #8
     73a:	4408      	add	r0, r1
     73c:	f00c ff80 	bl	d640 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
     740:	f895 10a0 	ldrb.w	r1, [r5, #160]	; 0xa0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
     744:	f240 2302 	movw	r3, #514	; 0x202
     748:	f011 0f40 	tst.w	r1, #64	; 0x40
     74c:	bf08      	it	eq
     74e:	2303      	moveq	r3, #3
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
     750:	4602      	mov	r2, r0
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
     752:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
     754:	bf4c      	ite	mi
     756:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
     75a:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
     75e:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
     762:	068f      	lsls	r7, r1, #26
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
     764:	bf48      	it	mi
     766:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
     76a:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     76e:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
     772:	bf18      	it	ne
     774:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     778:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     77c:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
     77e:	bf48      	it	mi
     780:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     784:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
     786:	bf08      	it	eq
     788:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
     78c:	2100      	movs	r1, #0
     78e:	f013 f826 	bl	137de <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
     792:	4621      	mov	r1, r4
     794:	2200      	movs	r2, #0
     796:	f242 0001 	movw	r0, #8193	; 0x2001
     79a:	f004 fd09 	bl	51b0 <bt_hci_cmd_send_sync>
	if (err) {
     79e:	4604      	mov	r4, r0
     7a0:	2800      	cmp	r0, #0
     7a2:	f47f af2c 	bne.w	5fe <CONFIG_BT_COMPANY_ID+0xd>
	if (BT_FEAT_BREDR(bt_dev.features)) {
     7a6:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
     7aa:	0698      	lsls	r0, r3, #26
     7ac:	d41e      	bmi.n	7ec <CONFIG_BT_COMPANY_ID+0x1fb>
	if (bt_dev.le.mtu) {
     7ae:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
     7b2:	b9d9      	cbnz	r1, 7ec <CONFIG_BT_COMPANY_ID+0x1fb>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
     7b4:	f241 0005 	movw	r0, #4101	; 0x1005
     7b8:	aa01      	add	r2, sp, #4
     7ba:	f004 fcf9 	bl	51b0 <bt_hci_cmd_send_sync>
	if (err) {
     7be:	4604      	mov	r4, r0
     7c0:	2800      	cmp	r0, #0
     7c2:	f47f af1c 	bne.w	5fe <CONFIG_BT_COMPANY_ID+0xd>
	if (bt_dev.le.mtu) {
     7c6:	f8b5 30b0 	ldrh.w	r3, [r5, #176]	; 0xb0
     7ca:	b963      	cbnz	r3, 7e6 <CONFIG_BT_COMPANY_ID+0x1f5>
	read_buffer_size_complete(rsp);
     7cc:	9b01      	ldr	r3, [sp, #4]
     7ce:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
     7d0:	785a      	ldrb	r2, [r3, #1]
     7d2:	7899      	ldrb	r1, [r3, #2]
     7d4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     7d8:	f8a5 20b0 	strh.w	r2, [r5, #176]	; 0xb0
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
     7dc:	889a      	ldrh	r2, [r3, #4]
     7de:	484f      	ldr	r0, [pc, #316]	; (91c <CONFIG_BT_RX_STACK_SIZE+0x84>)
     7e0:	4611      	mov	r1, r2
     7e2:	f015 ff3f 	bl	16664 <z_impl_k_sem_init>
	net_buf_unref(rsp);
     7e6:	9801      	ldr	r0, [sp, #4]
     7e8:	f00c fdb8 	bl	d35c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
     7ec:	2108      	movs	r1, #8
     7ee:	f640 4001 	movw	r0, #3073	; 0xc01
     7f2:	f004 fc93 	bl	511c <bt_hci_cmd_create>
	if (!buf) {
     7f6:	4604      	mov	r4, r0
     7f8:	2800      	cmp	r0, #0
     7fa:	f43f aed0 	beq.w	59e <bt_init+0x11e>
	ev = net_buf_add(buf, sizeof(*ev));
     7fe:	2108      	movs	r1, #8
     800:	4408      	add	r0, r1
     802:	f00c ff1d 	bl	d640 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     806:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
	ev = net_buf_add(buf, sizeof(*ev));
     80a:	4602      	mov	r2, r0
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     80c:	07d9      	lsls	r1, r3, #31
     80e:	d543      	bpl.n	898 <CONFIG_BT_RX_STACK_SIZE>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
     810:	a13f      	add	r1, pc, #252	; (adr r1, 910 <CONFIG_BT_RX_STACK_SIZE+0x78>)
     812:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
     816:	f012 ffe2 	bl	137de <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
     81a:	4621      	mov	r1, r4
     81c:	2200      	movs	r2, #0
     81e:	f640 4001 	movw	r0, #3073	; 0xc01
     822:	f004 fcc5 	bl	51b0 <bt_hci_cmd_send_sync>
	if (err) {
     826:	4604      	mov	r4, r0
     828:	2800      	cmp	r0, #0
     82a:	f47f aee8 	bne.w	5fe <CONFIG_BT_COMPANY_ID+0xd>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
     82e:	4601      	mov	r1, r0
     830:	aa01      	add	r2, sp, #4
     832:	f64f 4001 	movw	r0, #64513	; 0xfc01
     836:	f004 fcbb 	bl	51b0 <bt_hci_cmd_send_sync>
	if (err) {
     83a:	4604      	mov	r4, r0
     83c:	b380      	cbz	r0, 8a0 <CONFIG_BT_RX_STACK_SIZE+0x8>
		BT_WARN("Vendor HCI extensions not available");
     83e:	2157      	movs	r1, #87	; 0x57
     840:	4837      	ldr	r0, [pc, #220]	; (920 <CONFIG_BT_RX_STACK_SIZE+0x88>)
			BT_WARN("Failed to read supported vendor features");
     842:	f011 fb81 	bl	11f48 <printk>
		err = bt_conn_init();
     846:	f007 f8cb 	bl	79e0 <bt_conn_init>
		if (err) {
     84a:	4604      	mov	r4, r0
     84c:	2800      	cmp	r0, #0
     84e:	f47f aed6 	bne.w	5fe <CONFIG_BT_COMPANY_ID+0xd>
		if (!bt_dev.id_count) {
     852:	79eb      	ldrb	r3, [r5, #7]
     854:	2b00      	cmp	r3, #0
     856:	d154      	bne.n	902 <CONFIG_BT_RX_STACK_SIZE+0x6a>
			BT_INFO("No ID address. App must call settings_load()");
     858:	2149      	movs	r1, #73	; 0x49
     85a:	4832      	ldr	r0, [pc, #200]	; (924 <CONFIG_BT_RX_STACK_SIZE+0x8c>)
     85c:	f011 fb74 	bl	11f48 <printk>
			return 0;
     860:	e6cd      	b.n	5fe <CONFIG_BT_COMPANY_ID+0xd>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
     862:	2102      	movs	r1, #2
     864:	f640 406d 	movw	r0, #3181	; 0xc6d
     868:	f004 fc58 	bl	511c <bt_hci_cmd_create>
		if (!buf) {
     86c:	4604      	mov	r4, r0
     86e:	2800      	cmp	r0, #0
     870:	f43f ae95 	beq.w	59e <bt_init+0x11e>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
     874:	2102      	movs	r1, #2
     876:	3008      	adds	r0, #8
     878:	f00c fee2 	bl	d640 <net_buf_simple_add>
		cp_le->le = 0x01;
     87c:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
     87e:	4621      	mov	r1, r4
		cp_le->le = 0x01;
     880:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
     882:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
     884:	4632      	mov	r2, r6
     886:	f640 406d 	movw	r0, #3181	; 0xc6d
     88a:	f004 fc91 	bl	51b0 <bt_hci_cmd_send_sync>
		if (err) {
     88e:	4604      	mov	r4, r0
     890:	2800      	cmp	r0, #0
     892:	f43f aef5 	beq.w	680 <CONFIG_BT_COMPANY_ID+0x8f>
     896:	e6b2      	b.n	5fe <CONFIG_BT_COMPANY_ID+0xd>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
     898:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
     89c:	4822      	ldr	r0, [pc, #136]	; (928 <CONFIG_BT_RX_STACK_SIZE+0x90>)
     89e:	e7ba      	b.n	816 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x16>
	net_buf_unref(rsp);
     8a0:	9801      	ldr	r0, [sp, #4]
     8a2:	f00c fd5b 	bl	d35c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
     8a6:	4621      	mov	r1, r4
     8a8:	f64f 4002 	movw	r0, #64514	; 0xfc02
     8ac:	aa01      	add	r2, sp, #4
     8ae:	f004 fc7f 	bl	51b0 <bt_hci_cmd_send_sync>
	if (err) {
     8b2:	4604      	mov	r4, r0
     8b4:	b110      	cbz	r0, 8bc <CONFIG_BT_RX_STACK_SIZE+0x24>
		BT_WARN("Failed to read supported vendor commands");
     8b6:	2157      	movs	r1, #87	; 0x57
     8b8:	481c      	ldr	r0, [pc, #112]	; (92c <CONFIG_BT_RX_STACK_SIZE+0x94>)
     8ba:	e7c2      	b.n	842 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x42>
	rp.cmds = (void *)rsp->data;
     8bc:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
     8be:	2202      	movs	r2, #2
     8c0:	6899      	ldr	r1, [r3, #8]
     8c2:	481b      	ldr	r0, [pc, #108]	; (930 <CONFIG_BT_RX_STACK_SIZE+0x98>)
     8c4:	3101      	adds	r1, #1
     8c6:	f012 fe53 	bl	13570 <memcpy>
	net_buf_unref(rsp);
     8ca:	9801      	ldr	r0, [sp, #4]
     8cc:	f00c fd46 	bl	d35c <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
     8d0:	f895 3089 	ldrb.w	r3, [r5, #137]	; 0x89
     8d4:	075b      	lsls	r3, r3, #29
     8d6:	d5b6      	bpl.n	846 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x46>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
     8d8:	4621      	mov	r1, r4
     8da:	f64f 4003 	movw	r0, #64515	; 0xfc03
     8de:	aa01      	add	r2, sp, #4
     8e0:	f004 fc66 	bl	51b0 <bt_hci_cmd_send_sync>
		if (err) {
     8e4:	b110      	cbz	r0, 8ec <CONFIG_BT_RX_STACK_SIZE+0x54>
			BT_WARN("Failed to read supported vendor features");
     8e6:	2157      	movs	r1, #87	; 0x57
     8e8:	4812      	ldr	r0, [pc, #72]	; (934 <CONFIG_BT_RX_STACK_SIZE+0x9c>)
     8ea:	e7aa      	b.n	842 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x42>
		memcpy(bt_dev.vs_features, rp.feat->features,
     8ec:	2201      	movs	r2, #1
		rp.feat = (void *)rsp->data;
     8ee:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
     8f0:	4811      	ldr	r0, [pc, #68]	; (938 <CONFIG_BT_RX_STACK_SIZE+0xa0>)
     8f2:	6899      	ldr	r1, [r3, #8]
     8f4:	4411      	add	r1, r2
     8f6:	f012 fe3b 	bl	13570 <memcpy>
		net_buf_unref(rsp);
     8fa:	9801      	ldr	r0, [sp, #4]
     8fc:	f00c fd2e 	bl	d35c <net_buf_unref>
     900:	e7a1      	b.n	846 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x46>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
     902:	2104      	movs	r1, #4
     904:	480d      	ldr	r0, [pc, #52]	; (93c <CONFIG_BT_RX_STACK_SIZE+0xa4>)
     906:	f012 ff38 	bl	1377a <atomic_or>
	bt_finalize_init();
     90a:	f005 fd95 	bl	6438 <bt_finalize_init>
	return 0;
     90e:	e676      	b.n	5fe <CONFIG_BT_COMPANY_ID+0xd>
     910:	02008890 	.word	0x02008890
     914:	20008000 	.word	0x20008000
     918:	200000a0 	.word	0x200000a0
     91c:	200000b4 	.word	0x200000b4
     920:	00019740 	.word	0x00019740
     924:	000197c5 	.word	0x000197c5
     928:	02008810 	.word	0x02008810
     92c:	00019769 	.word	0x00019769
     930:	20000089 	.word	0x20000089
     934:	00019797 	.word	0x00019797
     938:	20000088 	.word	0x20000088
     93c:	20000098 	.word	0x20000098

00000940 <discovery_error>:

static void discovery_error(struct bt_conn *conn,
			    int err,
			    void *context)
{
	printk("Error while discovering GATT database: (%d)\n", err);
     940:	4801      	ldr	r0, [pc, #4]	; (948 <discovery_error+0x8>)
     942:	f011 bb01 	b.w	11f48 <printk>
     946:	bf00      	nop
     948:	00017504 	.word	0x00017504

0000094c <discovery_service_not_found>:
	printk("Service not found\n");
     94c:	4801      	ldr	r0, [pc, #4]	; (954 <discovery_service_not_found+0x8>)
     94e:	f011 bafb 	b.w	11f48 <printk>
     952:	bf00      	nop
     954:	00017531 	.word	0x00017531

00000958 <scan_connecting_error>:
		addr, connectable);
}

static void scan_connecting_error(struct bt_scan_device_info *device_info)
{
	printk("Connecting failed\n");
     958:	4801      	ldr	r0, [pc, #4]	; (960 <scan_connecting_error+0x8>)
     95a:	f011 baf5 	b.w	11f48 <printk>
     95e:	bf00      	nop
     960:	00017544 	.word	0x00017544

00000964 <discovery_complete>:
{
     964:	b538      	push	{r3, r4, r5, lr}
     966:	4604      	mov	r4, r0
     968:	460d      	mov	r5, r1
	printk("Service discovery completed\n");
     96a:	4807      	ldr	r0, [pc, #28]	; (988 <discovery_complete+0x24>)
     96c:	f011 faec 	bl	11f48 <printk>
	bt_gatt_nus_c_handles_assign(dm, nus_c);
     970:	4629      	mov	r1, r5
     972:	4620      	mov	r0, r4
     974:	f002 fe10 	bl	3598 <bt_gatt_nus_c_handles_assign>
	bt_gatt_nus_c_tx_notif_enable(nus_c);
     978:	4628      	mov	r0, r5
     97a:	f002 fecd 	bl	3718 <bt_gatt_nus_c_tx_notif_enable>
	bt_gatt_dm_data_release(dm);
     97e:	4620      	mov	r0, r4
}
     980:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_dm_data_release(dm);
     984:	f012 b8b3 	b.w	12aee <bt_gatt_dm_data_release>
     988:	00017557 	.word	0x00017557

0000098c <nus_client_init>:
	printk("UART initialized\n");
	return 0;
}

static int nus_client_init(void)
{
     98c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int err;
	struct bt_gatt_nus_c_init_param nus_c_init_obj = {
     98e:	2300      	movs	r3, #0
     990:	9303      	str	r3, [sp, #12]
     992:	4b0a      	ldr	r3, [pc, #40]	; (9bc <nus_client_init+0x30>)
			.data_received = ble_data_received,
			.data_sent = ble_data_sent,
		}
	};

	err = bt_gatt_nus_c_init(&gatt_nus_c, &nus_c_init_obj);
     994:	480a      	ldr	r0, [pc, #40]	; (9c0 <nus_client_init+0x34>)
	struct bt_gatt_nus_c_init_param nus_c_init_obj = {
     996:	9301      	str	r3, [sp, #4]
     998:	4b0a      	ldr	r3, [pc, #40]	; (9c4 <nus_client_init+0x38>)
	err = bt_gatt_nus_c_init(&gatt_nus_c, &nus_c_init_obj);
     99a:	a901      	add	r1, sp, #4
	struct bt_gatt_nus_c_init_param nus_c_init_obj = {
     99c:	9302      	str	r3, [sp, #8]
	err = bt_gatt_nus_c_init(&gatt_nus_c, &nus_c_init_obj);
     99e:	f012 f8f4 	bl	12b8a <bt_gatt_nus_c_init>
	if (err) {
     9a2:	4604      	mov	r4, r0
     9a4:	b130      	cbz	r0, 9b4 <nus_client_init+0x28>
		printk("NUS Client initialization failed (err %d)\n", err);
     9a6:	4601      	mov	r1, r0
     9a8:	4807      	ldr	r0, [pc, #28]	; (9c8 <nus_client_init+0x3c>)
     9aa:	f011 facd 	bl	11f48 <printk>
		return err;
	}

	printk("NUS Client module initialized\n");
	return err;
}
     9ae:	4620      	mov	r0, r4
     9b0:	b004      	add	sp, #16
     9b2:	bd10      	pop	{r4, pc}
	printk("NUS Client module initialized\n");
     9b4:	4805      	ldr	r0, [pc, #20]	; (9cc <nus_client_init+0x40>)
     9b6:	f011 fac7 	bl	11f48 <printk>
	return err;
     9ba:	e7f8      	b.n	9ae <nus_client_init+0x22>
     9bc:	00000aed 	.word	0x00000aed
     9c0:	20000804 	.word	0x20000804
     9c4:	00000e25 	.word	0x00000e25
     9c8:	00017574 	.word	0x00017574
     9cc:	0001759f 	.word	0x0001759f

000009d0 <scan_connecting>:
{
     9d0:	b508      	push	{r3, lr}
	default_conn = bt_conn_ref(conn);
     9d2:	4608      	mov	r0, r1
     9d4:	f013 f978 	bl	13cc8 <bt_conn_ref>
     9d8:	4b01      	ldr	r3, [pc, #4]	; (9e0 <scan_connecting+0x10>)
     9da:	6018      	str	r0, [r3, #0]
}
     9dc:	bd08      	pop	{r3, pc}
     9de:	bf00      	nop
     9e0:	20000800 	.word	0x20000800

000009e4 <uart_cb>:
{
     9e4:	b570      	push	{r4, r5, r6, lr}
     9e6:	4604      	mov	r4, r0
static inline int z_impl_uart_irq_update(struct device *dev)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	if (api->irq_update) {
     9e8:	6883      	ldr	r3, [r0, #8]
     9ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
     9ec:	b103      	cbz	r3, 9f0 <uart_cb+0xc>
		return api->irq_update(dev);
     9ee:	4798      	blx	r3
	if (api->irq_rx_ready) {
     9f0:	68a3      	ldr	r3, [r4, #8]
     9f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     9f4:	b35b      	cbz	r3, a4e <uart_cb+0x6a>
		return api->irq_rx_ready(dev);
     9f6:	4620      	mov	r0, r4
     9f8:	4798      	blx	r3
	if (uart_irq_rx_ready(uart)) {
     9fa:	b340      	cbz	r0, a4e <uart_cb+0x6a>
		if (!rx) {
     9fc:	4d36      	ldr	r5, [pc, #216]	; (ad8 <uart_cb+0xf4>)
     9fe:	682e      	ldr	r6, [r5, #0]
     a00:	b936      	cbnz	r6, a10 <uart_cb+0x2c>
			rx = k_malloc(sizeof(*rx));
     a02:	201c      	movs	r0, #28
     a04:	f00e fbac 	bl	f160 <k_malloc>
     a08:	6028      	str	r0, [r5, #0]
			if (rx) {
     a0a:	2800      	cmp	r0, #0
     a0c:	d033      	beq.n	a76 <uart_cb+0x92>
				rx->len = 0;
     a0e:	8306      	strh	r6, [r0, #24]
	if (api->fifo_read) {
     a10:	68a3      	ldr	r3, [r4, #8]
     a12:	699b      	ldr	r3, [r3, #24]
     a14:	b143      	cbz	r3, a28 <uart_cb+0x44>
		data_length = uart_fifo_read(uart, &rx->data[rx->len],
     a16:	6829      	ldr	r1, [r5, #0]
     a18:	8b0a      	ldrh	r2, [r1, #24]
     a1a:	1d10      	adds	r0, r2, #4
		return api->fifo_read(dev, rx_data, size);
     a1c:	4401      	add	r1, r0
     a1e:	f1c2 0214 	rsb	r2, r2, #20
     a22:	4620      	mov	r0, r4
     a24:	4798      	blx	r3
     a26:	4603      	mov	r3, r0
		rx->len += data_length;
     a28:	6829      	ldr	r1, [r5, #0]
     a2a:	8b08      	ldrh	r0, [r1, #24]
     a2c:	4403      	add	r3, r0
     a2e:	b298      	uxth	r0, r3
     a30:	8308      	strh	r0, [r1, #24]
		if (rx->len > 0) {
     a32:	b160      	cbz	r0, a4e <uart_cb+0x6a>
			if ((rx->len == UART_BUF_SIZE) ||
     a34:	2814      	cmp	r0, #20
     a36:	d005      	beq.n	a44 <uart_cb+0x60>
			   (rx->data[rx->len - 1] == '\n') ||
     a38:	4408      	add	r0, r1
     a3a:	78c3      	ldrb	r3, [r0, #3]
			if ((rx->len == UART_BUF_SIZE) ||
     a3c:	2b0a      	cmp	r3, #10
     a3e:	d001      	beq.n	a44 <uart_cb+0x60>
			   (rx->data[rx->len - 1] == '\n') ||
     a40:	2b0d      	cmp	r3, #13
     a42:	d104      	bne.n	a4e <uart_cb+0x6a>
				k_fifo_put(&fifo_uart_rx_data, rx);
     a44:	4825      	ldr	r0, [pc, #148]	; (adc <uart_cb+0xf8>)
     a46:	f015 fdce 	bl	165e6 <k_queue_append>
				rx = NULL;
     a4a:	2300      	movs	r3, #0
     a4c:	602b      	str	r3, [r5, #0]
	if (api->irq_tx_ready) {
     a4e:	68a3      	ldr	r3, [r4, #8]
     a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     a52:	2b00      	cmp	r3, #0
     a54:	d03f      	beq.n	ad6 <uart_cb+0xf2>
		return api->irq_tx_ready(dev);
     a56:	4620      	mov	r0, r4
     a58:	4798      	blx	r3
	if (uart_irq_tx_ready(uart)) {
     a5a:	2800      	cmp	r0, #0
     a5c:	d03b      	beq.n	ad6 <uart_cb+0xf2>
	return z_impl_k_queue_get(queue, timeout);
     a5e:	2200      	movs	r2, #0
     a60:	2300      	movs	r3, #0
     a62:	481f      	ldr	r0, [pc, #124]	; (ae0 <uart_cb+0xfc>)
     a64:	f00e fe28 	bl	f6b8 <z_impl_k_queue_get>
		if (!buf) {
     a68:	4605      	mov	r5, r0
     a6a:	bb68      	cbnz	r0, ac8 <uart_cb+0xe4>
			uart_irq_tx_disable(uart);
     a6c:	4620      	mov	r0, r4
}
     a6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			uart_irq_tx_disable(uart);
     a72:	f011 b9ce 	b.w	11e12 <uart_irq_tx_disable>
	if (api->irq_rx_disable) {
     a76:	68a3      	ldr	r3, [r4, #8]
     a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     a7a:	b10b      	cbz	r3, a80 <uart_cb+0x9c>
		api->irq_rx_disable(dev);
     a7c:	4620      	mov	r0, r4
     a7e:	4798      	blx	r3
}
     a80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				rx_disabled = true;
     a84:	2201      	movs	r2, #1
     a86:	4b17      	ldr	r3, [pc, #92]	; (ae4 <uart_cb+0x100>)
				printk("Not able to allocate UART receive buffer\n");
     a88:	4817      	ldr	r0, [pc, #92]	; (ae8 <uart_cb+0x104>)
				rx_disabled = true;
     a8a:	701a      	strb	r2, [r3, #0]
				printk("Not able to allocate UART receive buffer\n");
     a8c:	f011 ba5c 	b.w	11f48 <printk>
	if (api->fifo_fill) {
     a90:	695b      	ldr	r3, [r3, #20]
     a92:	b12b      	cbz	r3, aa0 <uart_cb+0xbc>
						  &buf->data[written],
     a94:	1d31      	adds	r1, r6, #4
		return api->fifo_fill(dev, tx_data, size);
     a96:	4620      	mov	r0, r4
     a98:	1b92      	subs	r2, r2, r6
     a9a:	4429      	add	r1, r5
     a9c:	4798      	blx	r3
     a9e:	4603      	mov	r3, r0
			written += uart_fifo_fill(uart,
     aa0:	4433      	add	r3, r6
     aa2:	b29e      	uxth	r6, r3
		while (buf->len > written) {
     aa4:	8b2a      	ldrh	r2, [r5, #24]
     aa6:	68a3      	ldr	r3, [r4, #8]
     aa8:	42b2      	cmp	r2, r6
     aaa:	d8f1      	bhi.n	a90 <uart_cb+0xac>
	if (api->irq_tx_complete) {
     aac:	68a3      	ldr	r3, [r4, #8]
     aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
     ab0:	b963      	cbnz	r3, acc <uart_cb+0xe8>
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
     ab2:	4b0b      	ldr	r3, [pc, #44]	; (ae0 <uart_cb+0xfc>)
		if (k_fifo_is_empty(&fifo_uart_tx_data)) {
     ab4:	681b      	ldr	r3, [r3, #0]
     ab6:	b913      	cbnz	r3, abe <uart_cb+0xda>
			uart_irq_tx_disable(uart);
     ab8:	4620      	mov	r0, r4
     aba:	f011 f9aa 	bl	11e12 <uart_irq_tx_disable>
		k_free(buf);
     abe:	4628      	mov	r0, r5
}
     ac0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_free(buf);
     ac4:	f015 bd6a 	b.w	1659c <k_free>
		u16_t written = 0;
     ac8:	2600      	movs	r6, #0
     aca:	e7eb      	b.n	aa4 <uart_cb+0xc0>
		return api->irq_tx_complete(dev);
     acc:	4620      	mov	r0, r4
     ace:	4798      	blx	r3
		while (!uart_irq_tx_complete(uart)) {
     ad0:	2800      	cmp	r0, #0
     ad2:	d0eb      	beq.n	aac <uart_cb+0xc8>
     ad4:	e7ed      	b.n	ab2 <uart_cb+0xce>
}
     ad6:	bd70      	pop	{r4, r5, r6, pc}
     ad8:	20000844 	.word	0x20000844
     adc:	200004ac 	.word	0x200004ac
     ae0:	200004c8 	.word	0x200004c8
     ae4:	20001e82 	.word	0x20001e82
     ae8:	000175be 	.word	0x000175be

00000aec <ble_data_received>:
{
     aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     af0:	4607      	mov	r7, r0
     af2:	460e      	mov	r6, r1
	for (u16_t pos = 0; pos != len;) {
     af4:	2500      	movs	r5, #0
		k_fifo_put(&fifo_uart_tx_data, tx);
     af6:	f8df 8070 	ldr.w	r8, [pc, #112]	; b68 <ble_data_received+0x7c>
	for (u16_t pos = 0; pos != len;) {
     afa:	42b5      	cmp	r5, r6
     afc:	d106      	bne.n	b0c <ble_data_received+0x20>
	uart_irq_tx_enable(uart);
     afe:	4b18      	ldr	r3, [pc, #96]	; (b60 <ble_data_received+0x74>)
     b00:	6818      	ldr	r0, [r3, #0]
	if (api->irq_tx_enable) {
     b02:	6883      	ldr	r3, [r0, #8]
     b04:	69db      	ldr	r3, [r3, #28]
     b06:	b14b      	cbz	r3, b1c <ble_data_received+0x30>
		api->irq_tx_enable(dev);
     b08:	4798      	blx	r3
     b0a:	e007      	b.n	b1c <ble_data_received+0x30>
		struct uart_data_t *tx = k_malloc(sizeof(*tx));
     b0c:	201c      	movs	r0, #28
     b0e:	f00e fb27 	bl	f160 <k_malloc>
		if (!tx) {
     b12:	4604      	mov	r4, r0
     b14:	b928      	cbnz	r0, b22 <ble_data_received+0x36>
			printk("Not able to allocate UART send data buffer\n");
     b16:	4813      	ldr	r0, [pc, #76]	; (b64 <ble_data_received+0x78>)
     b18:	f011 fa16 	bl	11f48 <printk>
}
     b1c:	2001      	movs	r0, #1
     b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((len - pos) > tx_data_size) {
     b22:	1b72      	subs	r2, r6, r5
     b24:	2a13      	cmp	r2, #19
			tx->len = tx_data_size;
     b26:	bf8c      	ite	hi
     b28:	2213      	movhi	r2, #19
			tx->len = (len - pos);
     b2a:	b292      	uxthls	r2, r2
     b2c:	8302      	strh	r2, [r0, #24]
		memcpy(tx->data, &data[pos], tx->len);
     b2e:	1979      	adds	r1, r7, r5
     b30:	3004      	adds	r0, #4
     b32:	f012 fd1d 	bl	13570 <memcpy>
		pos += tx->len;
     b36:	8b23      	ldrh	r3, [r4, #24]
     b38:	441d      	add	r5, r3
     b3a:	b2ad      	uxth	r5, r5
		if ((pos == len) && (data[len - 1] == '\r')) {
     b3c:	42ae      	cmp	r6, r5
     b3e:	d109      	bne.n	b54 <ble_data_received+0x68>
     b40:	19ba      	adds	r2, r7, r6
     b42:	f812 2c01 	ldrb.w	r2, [r2, #-1]
     b46:	2a0d      	cmp	r2, #13
     b48:	d104      	bne.n	b54 <ble_data_received+0x68>
			tx->data[tx->len] = '\n';
     b4a:	210a      	movs	r1, #10
     b4c:	18e2      	adds	r2, r4, r3
			tx->len++;
     b4e:	3301      	adds	r3, #1
			tx->data[tx->len] = '\n';
     b50:	7111      	strb	r1, [r2, #4]
			tx->len++;
     b52:	8323      	strh	r3, [r4, #24]
		k_fifo_put(&fifo_uart_tx_data, tx);
     b54:	4621      	mov	r1, r4
     b56:	4640      	mov	r0, r8
     b58:	f015 fd45 	bl	165e6 <k_queue_append>
     b5c:	e7cd      	b.n	afa <ble_data_received+0xe>
     b5e:	bf00      	nop
     b60:	20000848 	.word	0x20000848
     b64:	000175e8 	.word	0x000175e8
     b68:	200004c8 	.word	0x200004c8

00000b6c <scan_init>:
		scan_connecting_error, scan_connecting);

static int scan_init(void)
{
	int err;
	struct bt_scan_init_param scan_init = {
     b6c:	2300      	movs	r3, #0
{
     b6e:	b570      	push	{r4, r5, r6, lr}
     b70:	b088      	sub	sp, #32
	struct bt_scan_init_param scan_init = {
     b72:	e9cd 3300 	strd	r3, r3, [sp]
     b76:	9302      	str	r3, [sp, #8]
     b78:	2301      	movs	r3, #1
		.connect_if_match = 1,
	};

	bt_scan_init(&scan_init);
     b7a:	4668      	mov	r0, sp
	struct bt_scan_init_param scan_init = {
     b7c:	f88d 3004 	strb.w	r3, [sp, #4]
	bt_scan_init(&scan_init);
     b80:	f002 fc92 	bl	34a8 <bt_scan_init>
	bt_scan_cb_register(&scan_cb);
     b84:	4815      	ldr	r0, [pc, #84]	; (bdc <scan_init+0x70>)
     b86:	f002 faf5 	bl	3174 <bt_scan_cb_register>

	err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_NUS_SERVICE);
     b8a:	aa03      	add	r2, sp, #12
     b8c:	4615      	mov	r5, r2
     b8e:	4b14      	ldr	r3, [pc, #80]	; (be0 <scan_init+0x74>)
     b90:	f103 0610 	add.w	r6, r3, #16
     b94:	4614      	mov	r4, r2
     b96:	6818      	ldr	r0, [r3, #0]
     b98:	6859      	ldr	r1, [r3, #4]
     b9a:	3308      	adds	r3, #8
     b9c:	c403      	stmia	r4!, {r0, r1}
     b9e:	42b3      	cmp	r3, r6
     ba0:	4622      	mov	r2, r4
     ba2:	d1f7      	bne.n	b94 <scan_init+0x28>
     ba4:	781b      	ldrb	r3, [r3, #0]
     ba6:	4629      	mov	r1, r5
     ba8:	7023      	strb	r3, [r4, #0]
     baa:	2003      	movs	r0, #3
     bac:	f002 faf2 	bl	3194 <bt_scan_filter_add>
	if (err) {
     bb0:	4604      	mov	r4, r0
		printk("Scanning filters cannot be set (err %d)\n", err);
     bb2:	4601      	mov	r1, r0
	if (err) {
     bb4:	b128      	cbz	r0, bc2 <scan_init+0x56>
		printk("Scanning filters cannot be set (err %d)\n", err);
     bb6:	480b      	ldr	r0, [pc, #44]	; (be4 <scan_init+0x78>)
		return err;
	}

	err = bt_scan_filter_enable(BT_SCAN_UUID_FILTER, false);
	if (err) {
		printk("Filters cannot be turned on (err %d)\n", err);
     bb8:	f011 f9c6 	bl	11f48 <printk>
		return err;
	}

	printk("Scan module initialized\n");
	return err;
}
     bbc:	4620      	mov	r0, r4
     bbe:	b008      	add	sp, #32
     bc0:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_scan_filter_enable(BT_SCAN_UUID_FILTER, false);
     bc2:	2004      	movs	r0, #4
     bc4:	f002 fb4a 	bl	325c <bt_scan_filter_enable>
	if (err) {
     bc8:	4604      	mov	r4, r0
     bca:	b110      	cbz	r0, bd2 <scan_init+0x66>
		printk("Filters cannot be turned on (err %d)\n", err);
     bcc:	4601      	mov	r1, r0
     bce:	4806      	ldr	r0, [pc, #24]	; (be8 <scan_init+0x7c>)
     bd0:	e7f2      	b.n	bb8 <scan_init+0x4c>
	printk("Scan module initialized\n");
     bd2:	4806      	ldr	r0, [pc, #24]	; (bec <scan_init+0x80>)
     bd4:	f011 f9b8 	bl	11f48 <printk>
	return err;
     bd8:	e7f0      	b.n	bbc <scan_init+0x50>
     bda:	bf00      	nop
     bdc:	20000170 	.word	0x20000170
     be0:	00016ca0 	.word	0x00016ca0
     be4:	00017614 	.word	0x00017614
     be8:	0001763d 	.word	0x0001763d
     bec:	00017663 	.word	0x00017663

00000bf0 <gatt_discover.part.0>:
static void gatt_discover(struct bt_conn *conn)
     bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
     bf2:	b087      	sub	sp, #28
			       BT_UUID_NUS_SERVICE,
     bf4:	aa01      	add	r2, sp, #4
static void gatt_discover(struct bt_conn *conn)
     bf6:	4605      	mov	r5, r0
     bf8:	4616      	mov	r6, r2
			       BT_UUID_NUS_SERVICE,
     bfa:	4b0d      	ldr	r3, [pc, #52]	; (c30 <gatt_discover.part.0+0x40>)
     bfc:	f103 0710 	add.w	r7, r3, #16
     c00:	4614      	mov	r4, r2
     c02:	6818      	ldr	r0, [r3, #0]
     c04:	6859      	ldr	r1, [r3, #4]
     c06:	3308      	adds	r3, #8
     c08:	c403      	stmia	r4!, {r0, r1}
     c0a:	42bb      	cmp	r3, r7
     c0c:	4622      	mov	r2, r4
     c0e:	d1f7      	bne.n	c00 <gatt_discover.part.0+0x10>
     c10:	781b      	ldrb	r3, [r3, #0]
	err = bt_gatt_dm_start(conn,
     c12:	4631      	mov	r1, r6
			       BT_UUID_NUS_SERVICE,
     c14:	7023      	strb	r3, [r4, #0]
	err = bt_gatt_dm_start(conn,
     c16:	4628      	mov	r0, r5
     c18:	4b06      	ldr	r3, [pc, #24]	; (c34 <gatt_discover.part.0+0x44>)
     c1a:	4a07      	ldr	r2, [pc, #28]	; (c38 <gatt_discover.part.0+0x48>)
     c1c:	f002 f912 	bl	2e44 <bt_gatt_dm_start>
	if (err) {
     c20:	4601      	mov	r1, r0
     c22:	b110      	cbz	r0, c2a <gatt_discover.part.0+0x3a>
		printk("could not start the discovery procedure, error "
     c24:	4805      	ldr	r0, [pc, #20]	; (c3c <gatt_discover.part.0+0x4c>)
     c26:	f011 f98f 	bl	11f48 <printk>
}
     c2a:	b007      	add	sp, #28
     c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c2e:	bf00      	nop
     c30:	00016ca0 	.word	0x00016ca0
     c34:	20000804 	.word	0x20000804
     c38:	20000164 	.word	0x20000164
     c3c:	0001767c 	.word	0x0001767c

00000c40 <bt_addr_le_to_str.constprop.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     c40:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
     c42:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     c44:	b08a      	sub	sp, #40	; 0x28
     c46:	4604      	mov	r4, r0
     c48:	460e      	mov	r6, r1
     c4a:	ad07      	add	r5, sp, #28
     c4c:	2b03      	cmp	r3, #3
     c4e:	d820      	bhi.n	c92 <bt_addr_le_to_str.constprop.0+0x52>
     c50:	e8df f003 	tbb	[pc, r3]
     c54:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
     c58:	4911      	ldr	r1, [pc, #68]	; (ca0 <bt_addr_le_to_str.constprop.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
     c5a:	4628      	mov	r0, r5
     c5c:	f012 fc39 	bl	134d2 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
     c60:	7863      	ldrb	r3, [r4, #1]
     c62:	211e      	movs	r1, #30
     c64:	9304      	str	r3, [sp, #16]
     c66:	78a3      	ldrb	r3, [r4, #2]
     c68:	4630      	mov	r0, r6
     c6a:	9303      	str	r3, [sp, #12]
     c6c:	78e3      	ldrb	r3, [r4, #3]
     c6e:	4a0d      	ldr	r2, [pc, #52]	; (ca4 <bt_addr_le_to_str.constprop.0+0x64>)
     c70:	9302      	str	r3, [sp, #8]
     c72:	7923      	ldrb	r3, [r4, #4]
     c74:	9505      	str	r5, [sp, #20]
     c76:	9301      	str	r3, [sp, #4]
     c78:	7963      	ldrb	r3, [r4, #5]
     c7a:	9300      	str	r3, [sp, #0]
     c7c:	79a3      	ldrb	r3, [r4, #6]
     c7e:	f011 f970 	bl	11f62 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
     c82:	b00a      	add	sp, #40	; 0x28
     c84:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
     c86:	4908      	ldr	r1, [pc, #32]	; (ca8 <bt_addr_le_to_str.constprop.0+0x68>)
     c88:	e7e7      	b.n	c5a <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "public-id");
     c8a:	4908      	ldr	r1, [pc, #32]	; (cac <bt_addr_le_to_str.constprop.0+0x6c>)
     c8c:	e7e5      	b.n	c5a <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "random-id");
     c8e:	4908      	ldr	r1, [pc, #32]	; (cb0 <bt_addr_le_to_str.constprop.0+0x70>)
     c90:	e7e3      	b.n	c5a <bt_addr_le_to_str.constprop.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
     c92:	210a      	movs	r1, #10
     c94:	4628      	mov	r0, r5
     c96:	4a07      	ldr	r2, [pc, #28]	; (cb4 <bt_addr_le_to_str.constprop.0+0x74>)
     c98:	f011 f963 	bl	11f62 <snprintk>
		break;
     c9c:	e7e0      	b.n	c60 <bt_addr_le_to_str.constprop.0+0x20>
     c9e:	bf00      	nop
     ca0:	000176b5 	.word	0x000176b5
     ca4:	000176de 	.word	0x000176de
     ca8:	000176bc 	.word	0x000176bc
     cac:	000176c3 	.word	0x000176c3
     cb0:	000176cd 	.word	0x000176cd
     cb4:	000176d7 	.word	0x000176d7

00000cb8 <pairing_confirm>:
	printk("Pairing cancelled: %s\n", addr);
}


static void pairing_confirm(struct bt_conn *conn)
{
     cb8:	b510      	push	{r4, lr}
     cba:	4604      	mov	r4, r0
     cbc:	b088      	sub	sp, #32
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     cbe:	f013 f80d 	bl	13cdc <bt_conn_get_dst>
     cc2:	4669      	mov	r1, sp
     cc4:	f7ff ffbc 	bl	c40 <bt_addr_le_to_str.constprop.0>

	bt_conn_auth_pairing_confirm(conn);
     cc8:	4620      	mov	r0, r4
     cca:	f006 fe43 	bl	7954 <bt_conn_auth_pairing_confirm>

	printk("Pairing confirmed: %s\n", addr);
     cce:	4669      	mov	r1, sp
     cd0:	4802      	ldr	r0, [pc, #8]	; (cdc <pairing_confirm+0x24>)
     cd2:	f011 f939 	bl	11f48 <printk>
}
     cd6:	b008      	add	sp, #32
     cd8:	bd10      	pop	{r4, pc}
     cda:	bf00      	nop
     cdc:	00017701 	.word	0x00017701

00000ce0 <connected>:
{
     ce0:	b530      	push	{r4, r5, lr}
     ce2:	460d      	mov	r5, r1
     ce4:	b089      	sub	sp, #36	; 0x24
     ce6:	4604      	mov	r4, r0
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     ce8:	f012 fff8 	bl	13cdc <bt_conn_get_dst>
     cec:	4669      	mov	r1, sp
     cee:	f7ff ffa7 	bl	c40 <bt_addr_le_to_str.constprop.0>
	if (conn_err) {
     cf2:	b135      	cbz	r5, d02 <connected+0x22>
		printk("Failed to connect to %s (%d)\n", addr, conn_err);
     cf4:	462a      	mov	r2, r5
     cf6:	4669      	mov	r1, sp
     cf8:	4810      	ldr	r0, [pc, #64]	; (d3c <connected+0x5c>)
     cfa:	f011 f925 	bl	11f48 <printk>
}
     cfe:	b009      	add	sp, #36	; 0x24
     d00:	bd30      	pop	{r4, r5, pc}
	printk("Connected: %s\n", addr);
     d02:	4669      	mov	r1, sp
     d04:	480e      	ldr	r0, [pc, #56]	; (d40 <connected+0x60>)
     d06:	f011 f91f 	bl	11f48 <printk>
	err = bt_conn_set_security(conn, BT_SECURITY_L2);
     d0a:	2102      	movs	r1, #2
     d0c:	4620      	mov	r0, r4
     d0e:	f012 ff8a 	bl	13c26 <bt_conn_set_security>
	if (err) {
     d12:	4601      	mov	r1, r0
     d14:	b148      	cbz	r0, d2a <connected+0x4a>
		printk("Failed to set security: %d\n", err);
     d16:	480b      	ldr	r0, [pc, #44]	; (d44 <connected+0x64>)
     d18:	f011 f916 	bl	11f48 <printk>
	if (conn != default_conn) {
     d1c:	4b0a      	ldr	r3, [pc, #40]	; (d48 <connected+0x68>)
     d1e:	681b      	ldr	r3, [r3, #0]
     d20:	429c      	cmp	r4, r3
     d22:	d102      	bne.n	d2a <connected+0x4a>
     d24:	4620      	mov	r0, r4
     d26:	f7ff ff63 	bl	bf0 <gatt_discover.part.0>
	err = bt_scan_stop();
     d2a:	f011 fef9 	bl	12b20 <bt_scan_stop>
	if ((!err) && (err != -EALREADY)) {
     d2e:	4601      	mov	r1, r0
     d30:	2800      	cmp	r0, #0
     d32:	d1e4      	bne.n	cfe <connected+0x1e>
		printk("Stop LE scan failed (err %d)\n", err);
     d34:	4805      	ldr	r0, [pc, #20]	; (d4c <connected+0x6c>)
     d36:	f011 f907 	bl	11f48 <printk>
     d3a:	e7e0      	b.n	cfe <connected+0x1e>
     d3c:	00017718 	.word	0x00017718
     d40:	00017736 	.word	0x00017736
     d44:	00017745 	.word	0x00017745
     d48:	20000800 	.word	0x20000800
     d4c:	00017761 	.word	0x00017761

00000d50 <disconnected>:
{
     d50:	b530      	push	{r4, r5, lr}
     d52:	460d      	mov	r5, r1
     d54:	4604      	mov	r4, r0
     d56:	b089      	sub	sp, #36	; 0x24
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     d58:	f012 ffc0 	bl	13cdc <bt_conn_get_dst>
     d5c:	4669      	mov	r1, sp
     d5e:	f7ff ff6f 	bl	c40 <bt_addr_le_to_str.constprop.0>
	printk("Disconnected: %s (reason %u)\n", addr, reason);
     d62:	462a      	mov	r2, r5
	if (default_conn != conn) {
     d64:	4d0a      	ldr	r5, [pc, #40]	; (d90 <disconnected+0x40>)
	printk("Disconnected: %s (reason %u)\n", addr, reason);
     d66:	480b      	ldr	r0, [pc, #44]	; (d94 <disconnected+0x44>)
     d68:	4669      	mov	r1, sp
     d6a:	f011 f8ed 	bl	11f48 <printk>
	if (default_conn != conn) {
     d6e:	6828      	ldr	r0, [r5, #0]
     d70:	42a0      	cmp	r0, r4
     d72:	d10b      	bne.n	d8c <disconnected+0x3c>
	bt_conn_unref(default_conn);
     d74:	f012 ffaf 	bl	13cd6 <bt_conn_unref>
	default_conn = NULL;
     d78:	2300      	movs	r3, #0
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
     d7a:	2001      	movs	r0, #1
	default_conn = NULL;
     d7c:	602b      	str	r3, [r5, #0]
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
     d7e:	f002 fbc9 	bl	3514 <bt_scan_start>
	if (err) {
     d82:	4601      	mov	r1, r0
     d84:	b110      	cbz	r0, d8c <disconnected+0x3c>
		printk("Scanning failed to start (err %d)\n", err);
     d86:	4804      	ldr	r0, [pc, #16]	; (d98 <disconnected+0x48>)
     d88:	f011 f8de 	bl	11f48 <printk>
}
     d8c:	b009      	add	sp, #36	; 0x24
     d8e:	bd30      	pop	{r4, r5, pc}
     d90:	20000800 	.word	0x20000800
     d94:	0001777f 	.word	0x0001777f
     d98:	0001779d 	.word	0x0001779d

00000d9c <auth_cancel>:
{
     d9c:	b500      	push	{lr}
     d9e:	b089      	sub	sp, #36	; 0x24
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     da0:	f012 ff9c 	bl	13cdc <bt_conn_get_dst>
     da4:	4669      	mov	r1, sp
     da6:	f7ff ff4b 	bl	c40 <bt_addr_le_to_str.constprop.0>
	printk("Pairing cancelled: %s\n", addr);
     daa:	4669      	mov	r1, sp
     dac:	4802      	ldr	r0, [pc, #8]	; (db8 <auth_cancel+0x1c>)
     dae:	f011 f8cb 	bl	11f48 <printk>
}
     db2:	b009      	add	sp, #36	; 0x24
     db4:	f85d fb04 	ldr.w	pc, [sp], #4
     db8:	000177c0 	.word	0x000177c0

00000dbc <pairing_complete>:


static void pairing_complete(struct bt_conn *conn, bool bonded)
{
     dbc:	b510      	push	{r4, lr}
     dbe:	460c      	mov	r4, r1
     dc0:	b088      	sub	sp, #32
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     dc2:	f012 ff8b 	bl	13cdc <bt_conn_get_dst>
     dc6:	4669      	mov	r1, sp
     dc8:	f7ff ff3a 	bl	c40 <bt_addr_le_to_str.constprop.0>

	printk("Pairing completed: %s, bonded: %d\n", addr, bonded);
     dcc:	4622      	mov	r2, r4
     dce:	4669      	mov	r1, sp
     dd0:	4802      	ldr	r0, [pc, #8]	; (ddc <pairing_complete+0x20>)
     dd2:	f011 f8b9 	bl	11f48 <printk>
}
     dd6:	b008      	add	sp, #32
     dd8:	bd10      	pop	{r4, pc}
     dda:	bf00      	nop
     ddc:	000177d7 	.word	0x000177d7

00000de0 <pairing_failed>:


static void pairing_failed(struct bt_conn *conn, enum bt_security_err reason)
{
     de0:	b510      	push	{r4, lr}
     de2:	460c      	mov	r4, r1
     de4:	b088      	sub	sp, #32
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     de6:	f012 ff79 	bl	13cdc <bt_conn_get_dst>
     dea:	4669      	mov	r1, sp
     dec:	f7ff ff28 	bl	c40 <bt_addr_le_to_str.constprop.0>

	printk("Pairing failed conn: %s, reason %d\n", addr, reason);
     df0:	4622      	mov	r2, r4
     df2:	4669      	mov	r1, sp
     df4:	4802      	ldr	r0, [pc, #8]	; (e00 <pairing_failed+0x20>)
     df6:	f011 f8a7 	bl	11f48 <printk>
}
     dfa:	b008      	add	sp, #32
     dfc:	bd10      	pop	{r4, pc}
     dfe:	bf00      	nop
     e00:	000177fa 	.word	0x000177fa

00000e04 <scan_filter_match>:
{
     e04:	b510      	push	{r4, lr}
     e06:	4614      	mov	r4, r2
     e08:	b088      	sub	sp, #32
	bt_addr_le_to_str(device_info->addr, addr, sizeof(addr));
     e0a:	4669      	mov	r1, sp
     e0c:	6840      	ldr	r0, [r0, #4]
     e0e:	f7ff ff17 	bl	c40 <bt_addr_le_to_str.constprop.0>
	printk("Filters matched. Address: %s connectable: %d\n",
     e12:	4622      	mov	r2, r4
     e14:	4669      	mov	r1, sp
     e16:	4802      	ldr	r0, [pc, #8]	; (e20 <scan_filter_match+0x1c>)
     e18:	f011 f896 	bl	11f48 <printk>
}
     e1c:	b008      	add	sp, #32
     e1e:	bd10      	pop	{r4, pc}
     e20:	0001781e 	.word	0x0001781e

00000e24 <ble_data_sent>:
{
     e24:	b510      	push	{r4, lr}
     e26:	4604      	mov	r4, r0
	k_free(buf);
     e28:	1f08      	subs	r0, r1, #4
     e2a:	f015 fbb7 	bl	1659c <k_free>
	if (rx_disabled) {
     e2e:	4b0a      	ldr	r3, [pc, #40]	; (e58 <ble_data_sent+0x34>)
     e30:	781a      	ldrb	r2, [r3, #0]
     e32:	b12a      	cbz	r2, e40 <ble_data_sent+0x1c>
		rx_disabled = false;
     e34:	2200      	movs	r2, #0
     e36:	701a      	strb	r2, [r3, #0]
		uart_irq_rx_enable(uart);
     e38:	4b08      	ldr	r3, [pc, #32]	; (e5c <ble_data_sent+0x38>)
     e3a:	6818      	ldr	r0, [r3, #0]
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
     e3c:	f010 ffe4 	bl	11e08 <z_impl_uart_irq_rx_enable>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
     e40:	4807      	ldr	r0, [pc, #28]	; (e60 <ble_data_sent+0x3c>)
     e42:	f00f fdfd 	bl	10a40 <z_impl_k_sem_give>
	if (err) {
     e46:	b12c      	cbz	r4, e54 <ble_data_sent+0x30>
		printk("ATT error code: 0x%02X\n", err);
     e48:	4621      	mov	r1, r4
}
     e4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("ATT error code: 0x%02X\n", err);
     e4e:	4805      	ldr	r0, [pc, #20]	; (e64 <ble_data_sent+0x40>)
     e50:	f011 b87a 	b.w	11f48 <printk>
}
     e54:	bd10      	pop	{r4, pc}
     e56:	bf00      	nop
     e58:	20001e82 	.word	0x20001e82
     e5c:	20000848 	.word	0x20000848
     e60:	20000410 	.word	0x20000410
     e64:	0001784c 	.word	0x0001784c

00000e68 <uart_init>:
{
     e68:	b510      	push	{r4, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     e6a:	480d      	ldr	r0, [pc, #52]	; (ea0 <uart_init+0x38>)
     e6c:	f00d fdcc 	bl	ea08 <z_impl_device_get_binding>
	uart = device_get_binding(DT_LABEL(DT_NODELABEL(uart0)));
     e70:	4c0c      	ldr	r4, [pc, #48]	; (ea4 <uart_init+0x3c>)
     e72:	4602      	mov	r2, r0
     e74:	6020      	str	r0, [r4, #0]
	if (!uart) {
     e76:	b928      	cbnz	r0, e84 <uart_init+0x1c>
		printk("UART binding failed\n");
     e78:	480b      	ldr	r0, [pc, #44]	; (ea8 <uart_init+0x40>)
     e7a:	f011 f865 	bl	11f48 <printk>
		return -ENXIO;
     e7e:	f06f 0005 	mvn.w	r0, #5
}
     e82:	bd10      	pop	{r4, pc}
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
     e84:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
     e86:	b11b      	cbz	r3, e90 <uart_init+0x28>
     e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
     e8a:	b10b      	cbz	r3, e90 <uart_init+0x28>
		api->irq_callback_set(dev, cb, user_data);
     e8c:	4907      	ldr	r1, [pc, #28]	; (eac <uart_init+0x44>)
     e8e:	4798      	blx	r3
	uart_irq_rx_enable(uart);
     e90:	6820      	ldr	r0, [r4, #0]
     e92:	f010 ffb9 	bl	11e08 <z_impl_uart_irq_rx_enable>
	printk("UART initialized\n");
     e96:	4806      	ldr	r0, [pc, #24]	; (eb0 <uart_init+0x48>)
     e98:	f011 f856 	bl	11f48 <printk>
	return 0;
     e9c:	2000      	movs	r0, #0
     e9e:	e7f0      	b.n	e82 <uart_init+0x1a>
     ea0:	00017864 	.word	0x00017864
     ea4:	20000848 	.word	0x20000848
     ea8:	0001786b 	.word	0x0001786b
     eac:	000009e5 	.word	0x000009e5
     eb0:	00017880 	.word	0x00017880

00000eb4 <security_changed>:
{
     eb4:	b570      	push	{r4, r5, r6, lr}
     eb6:	4616      	mov	r6, r2
     eb8:	b088      	sub	sp, #32
     eba:	460d      	mov	r5, r1
     ebc:	4604      	mov	r4, r0
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     ebe:	f012 ff0d 	bl	13cdc <bt_conn_get_dst>
     ec2:	4669      	mov	r1, sp
     ec4:	f7ff febc 	bl	c40 <bt_addr_le_to_str.constprop.0>
	if (!err) {
     ec8:	b96e      	cbnz	r6, ee6 <security_changed+0x32>
		printk("Security changed: %s level %u\n", addr, level);
     eca:	462a      	mov	r2, r5
     ecc:	4669      	mov	r1, sp
     ece:	4809      	ldr	r0, [pc, #36]	; (ef4 <security_changed+0x40>)
     ed0:	f011 f83a 	bl	11f48 <printk>
	if (conn != default_conn) {
     ed4:	4b08      	ldr	r3, [pc, #32]	; (ef8 <security_changed+0x44>)
     ed6:	681b      	ldr	r3, [r3, #0]
     ed8:	429c      	cmp	r4, r3
     eda:	d102      	bne.n	ee2 <security_changed+0x2e>
     edc:	4620      	mov	r0, r4
     ede:	f7ff fe87 	bl	bf0 <gatt_discover.part.0>
}
     ee2:	b008      	add	sp, #32
     ee4:	bd70      	pop	{r4, r5, r6, pc}
		printk("Security failed: %s level %u err %d\n", addr, level,
     ee6:	4633      	mov	r3, r6
     ee8:	462a      	mov	r2, r5
     eea:	4669      	mov	r1, sp
     eec:	4803      	ldr	r0, [pc, #12]	; (efc <security_changed+0x48>)
     eee:	f011 f82b 	bl	11f48 <printk>
     ef2:	e7ef      	b.n	ed4 <security_changed+0x20>
     ef4:	00017892 	.word	0x00017892
     ef8:	20000800 	.word	0x20000800
     efc:	000178b1 	.word	0x000178b1

00000f00 <main>:
	.pairing_complete = pairing_complete,
	.pairing_failed = pairing_failed
};

void main(void)
{
     f00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int err;

	printk("Starting Bluetooth Central UART example\n");
     f02:	482c      	ldr	r0, [pc, #176]	; (fb4 <main+0xb4>)
     f04:	f011 f820 	bl	11f48 <printk>

	err = bt_conn_auth_cb_register(&conn_auth_callbacks);
     f08:	482b      	ldr	r0, [pc, #172]	; (fb8 <main+0xb8>)
     f0a:	f006 fd07 	bl	791c <bt_conn_auth_cb_register>
	if (err) {
     f0e:	b128      	cbz	r0, f1c <main+0x1c>
		printk("Failed to register authorization callbacks.\n");
     f10:	482a      	ldr	r0, [pc, #168]	; (fbc <main+0xbc>)
		err = k_sem_take(&nus_write_sem, NUS_WRITE_TIMEOUT);
		if (err) {
			printk("NUS send timeout\n");
		}
	}
}
     f12:	b004      	add	sp, #16
     f14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("Failed to register authorization callbacks.\n");
     f18:	f011 b816 	b.w	11f48 <printk>
	err = bt_enable(NULL);
     f1c:	f005 faa4 	bl	6468 <bt_enable>
	if (err) {
     f20:	4604      	mov	r4, r0
     f22:	b130      	cbz	r0, f32 <main+0x32>
		printk("Bluetooth init failed (err %d)\n", err);
     f24:	4601      	mov	r1, r0
     f26:	4826      	ldr	r0, [pc, #152]	; (fc0 <main+0xc0>)
}
     f28:	b004      	add	sp, #16
     f2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("Scanning failed to start (err %d)\n", err);
     f2e:	f011 b80b 	b.w	11f48 <printk>
	printk("Bluetooth initialized\n");
     f32:	4824      	ldr	r0, [pc, #144]	; (fc4 <main+0xc4>)
     f34:	f011 f808 	bl	11f48 <printk>
		settings_load();
     f38:	f011 fbd2 	bl	126e0 <settings_load>
	bt_conn_cb_register(&conn_callbacks);
     f3c:	4822      	ldr	r0, [pc, #136]	; (fc8 <main+0xc8>)
     f3e:	f006 f805 	bl	6f4c <bt_conn_cb_register>
	int (*module_init[])(void) = {uart_init, scan_init, nus_client_init};
     f42:	ab01      	add	r3, sp, #4
     f44:	461d      	mov	r5, r3
     f46:	4a21      	ldr	r2, [pc, #132]	; (fcc <main+0xcc>)
     f48:	ca07      	ldmia	r2, {r0, r1, r2}
     f4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		err = (*module_init[i])();
     f4e:	f855 3b04 	ldr.w	r3, [r5], #4
     f52:	4798      	blx	r3
		if (err) {
     f54:	bb60      	cbnz	r0, fb0 <main+0xb0>
	for (size_t i = 0; i < ARRAY_SIZE(module_init); i++) {
     f56:	3401      	adds	r4, #1
     f58:	2c03      	cmp	r4, #3
     f5a:	d1f8      	bne.n	f4e <main+0x4e>
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
     f5c:	2001      	movs	r0, #1
     f5e:	f002 fad9 	bl	3514 <bt_scan_start>
	if (err) {
     f62:	4601      	mov	r1, r0
     f64:	b108      	cbz	r0, f6a <main+0x6a>
		printk("Scanning failed to start (err %d)\n", err);
     f66:	481a      	ldr	r0, [pc, #104]	; (fd0 <main+0xd0>)
     f68:	e7de      	b.n	f28 <main+0x28>
	printk("Scanning successfully started\n");
     f6a:	481a      	ldr	r0, [pc, #104]	; (fd4 <main+0xd4>)
     f6c:	f010 ffec 	bl	11f48 <printk>
	return z_impl_k_queue_get(queue, timeout);
     f70:	4c19      	ldr	r4, [pc, #100]	; (fd8 <main+0xd8>)
		err = bt_gatt_nus_c_send(&gatt_nus_c, buf->data, buf->len);
     f72:	4d1a      	ldr	r5, [pc, #104]	; (fdc <main+0xdc>)
			printk("Failed to send data over BLE connection"
     f74:	4e1a      	ldr	r6, [pc, #104]	; (fe0 <main+0xe0>)
     f76:	f04f 32ff 	mov.w	r2, #4294967295
     f7a:	f04f 33ff 	mov.w	r3, #4294967295
     f7e:	4620      	mov	r0, r4
     f80:	f00e fb9a 	bl	f6b8 <z_impl_k_queue_get>
		err = bt_gatt_nus_c_send(&gatt_nus_c, buf->data, buf->len);
     f84:	1d01      	adds	r1, r0, #4
     f86:	8b02      	ldrh	r2, [r0, #24]
     f88:	4628      	mov	r0, r5
     f8a:	f002 fad7 	bl	353c <bt_gatt_nus_c_send>
		if (err) {
     f8e:	4601      	mov	r1, r0
     f90:	b110      	cbz	r0, f98 <main+0x98>
			printk("Failed to send data over BLE connection"
     f92:	4630      	mov	r0, r6
     f94:	f010 ffd8 	bl	11f48 <printk>
	return z_impl_k_sem_take(sem, timeout);
     f98:	f241 3234 	movw	r2, #4916	; 0x1334
     f9c:	2300      	movs	r3, #0
     f9e:	4811      	ldr	r0, [pc, #68]	; (fe4 <main+0xe4>)
     fa0:	f00f fd92 	bl	10ac8 <z_impl_k_sem_take>
		if (err) {
     fa4:	2800      	cmp	r0, #0
     fa6:	d0e6      	beq.n	f76 <main+0x76>
			printk("NUS send timeout\n");
     fa8:	480f      	ldr	r0, [pc, #60]	; (fe8 <main+0xe8>)
     faa:	f010 ffcd 	bl	11f48 <printk>
	for (;;) {
     fae:	e7e2      	b.n	f76 <main+0x76>
}
     fb0:	b004      	add	sp, #16
     fb2:	bd70      	pop	{r4, r5, r6, pc}
     fb4:	000178d6 	.word	0x000178d6
     fb8:	20000128 	.word	0x20000128
     fbc:	000178ff 	.word	0x000178ff
     fc0:	0001792c 	.word	0x0001792c
     fc4:	0001794c 	.word	0x0001794c
     fc8:	20000148 	.word	0x20000148
     fcc:	00016cb4 	.word	0x00016cb4
     fd0:	0001779d 	.word	0x0001779d
     fd4:	00017963 	.word	0x00017963
     fd8:	200004ac 	.word	0x200004ac
     fdc:	20000804 	.word	0x20000804
     fe0:	00017982 	.word	0x00017982
     fe4:	20000410 	.word	0x20000410
     fe8:	000179b3 	.word	0x000179b3

00000fec <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

u8_t crc8_ccitt(u8_t val, const void *buf, size_t cnt)
{
     fec:	b530      	push	{r4, r5, lr}
	size_t i;
	const u8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
     fee:	4c0a      	ldr	r4, [pc, #40]	; (1018 <crc8_ccitt+0x2c>)
     ff0:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
     ff2:	4291      	cmp	r1, r2
     ff4:	d100      	bne.n	ff8 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
     ff6:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
     ff8:	f811 3b01 	ldrb.w	r3, [r1], #1
     ffc:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
     ffe:	0903      	lsrs	r3, r0, #4
    1000:	5ce3      	ldrb	r3, [r4, r3]
    1002:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
    1006:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    1008:	f3c3 1303 	ubfx	r3, r3, #4, #4
    100c:	5ce0      	ldrb	r0, [r4, r3]
    100e:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
    1012:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
    1014:	e7ed      	b.n	ff2 <crc8_ccitt+0x6>
    1016:	bf00      	nop
    1018:	000179c5 	.word	0x000179c5

0000101c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    101c:	680b      	ldr	r3, [r1, #0]
    101e:	3301      	adds	r3, #1
    1020:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    1022:	4b01      	ldr	r3, [pc, #4]	; (1028 <char_out+0xc>)
    1024:	681b      	ldr	r3, [r3, #0]
    1026:	4718      	bx	r3
    1028:	20000178 	.word	0x20000178

0000102c <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    102c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1030:	b085      	sub	sp, #20
    1032:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    1034:	469b      	mov	fp, r3
    1036:	2c01      	cmp	r4, #1
    1038:	bfb8      	it	lt
    103a:	2401      	movlt	r4, #1
    103c:	2b01      	cmp	r3, #1
    103e:	bf0c      	ite	eq
    1040:	2330      	moveq	r3, #48	; 0x30
    1042:	2320      	movne	r3, #32
    1044:	4615      	mov	r5, r2
    1046:	4606      	mov	r6, r0
    1048:	468a      	mov	sl, r1
    104a:	2701      	movs	r7, #1
    104c:	f04f 080a 	mov.w	r8, #10
    1050:	2200      	movs	r2, #0
    1052:	f8df 9070 	ldr.w	r9, [pc, #112]	; 10c4 <_printk_dec_ulong+0x98>
    1056:	9302      	str	r3, [sp, #8]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
    1058:	fbb5 f3f9 	udiv	r3, r5, r9
    105c:	9301      	str	r3, [sp, #4]
    105e:	b90a      	cbnz	r2, 1064 <_printk_dec_ulong+0x38>
    1060:	45a9      	cmp	r9, r5
    1062:	d81e      	bhi.n	10a2 <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
    1064:	9b01      	ldr	r3, [sp, #4]
    1066:	4651      	mov	r1, sl
    1068:	f103 0030 	add.w	r0, r3, #48	; 0x30
    106c:	47b0      	blx	r6
			found_largest_digit = 1;
    106e:	2201      	movs	r2, #1
			digits++;
    1070:	3701      	adds	r7, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
    1072:	9b01      	ldr	r3, [sp, #4]
		remaining--;
    1074:	f108 38ff 	add.w	r8, r8, #4294967295
		remainder %= pos;
    1078:	fb09 5513 	mls	r5, r9, r3, r5
		pos /= 10;
    107c:	230a      	movs	r3, #10
	while (pos >= 10) {
    107e:	f1b8 0f01 	cmp.w	r8, #1
		pos /= 10;
    1082:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
    1086:	d1e7      	bne.n	1058 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
    1088:	4651      	mov	r1, sl
    108a:	f105 0030 	add.w	r0, r5, #48	; 0x30
    108e:	47b0      	blx	r6

	if (padding == PAD_SPACE_AFTER) {
    1090:	f1bb 0f03 	cmp.w	fp, #3
    1094:	d102      	bne.n	109c <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
    1096:	1be4      	subs	r4, r4, r7
		while (remaining-- > 0) {
    1098:	2c00      	cmp	r4, #0
    109a:	dc0e      	bgt.n	10ba <_printk_dec_ulong+0x8e>
			out(' ', ctx);
		}
	}
}
    109c:	b005      	add	sp, #20
    109e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    10a2:	4544      	cmp	r4, r8
    10a4:	dbe5      	blt.n	1072 <_printk_dec_ulong+0x46>
				&& padding < PAD_SPACE_AFTER) {
    10a6:	f1bb 0f02 	cmp.w	fp, #2
    10aa:	d8e2      	bhi.n	1072 <_printk_dec_ulong+0x46>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    10ac:	4651      	mov	r1, sl
    10ae:	9802      	ldr	r0, [sp, #8]
    10b0:	9203      	str	r2, [sp, #12]
			digits++;
    10b2:	3701      	adds	r7, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    10b4:	47b0      	blx	r6
			digits++;
    10b6:	9a03      	ldr	r2, [sp, #12]
    10b8:	e7db      	b.n	1072 <_printk_dec_ulong+0x46>
			out(' ', ctx);
    10ba:	4651      	mov	r1, sl
    10bc:	2020      	movs	r0, #32
    10be:	47b0      	blx	r6
    10c0:	3c01      	subs	r4, #1
    10c2:	e7e9      	b.n	1098 <_printk_dec_ulong+0x6c>
    10c4:	3b9aca00 	.word	0x3b9aca00

000010c8 <__printk_hook_install>:
	_char_out = fn;
    10c8:	4b01      	ldr	r3, [pc, #4]	; (10d0 <__printk_hook_install+0x8>)
    10ca:	6018      	str	r0, [r3, #0]
}
    10cc:	4770      	bx	lr
    10ce:	bf00      	nop
    10d0:	20000178 	.word	0x20000178

000010d4 <z_vprintk>:
{
    10d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
    10d8:	2700      	movs	r7, #0
{
    10da:	4605      	mov	r5, r0
    10dc:	468b      	mov	fp, r1
	int min_width = -1;
    10de:	f04f 39ff 	mov.w	r9, #4294967295
	enum pad_type padding = PAD_NONE;
    10e2:	46b8      	mov	r8, r7
{
    10e4:	461c      	mov	r4, r3
    10e6:	b08d      	sub	sp, #52	; 0x34
    10e8:	1e53      	subs	r3, r2, #1
    10ea:	9303      	str	r3, [sp, #12]
			might_format = 0;
    10ec:	2600      	movs	r6, #0
					break;
    10ee:	e005      	b.n	10fc <z_vprintk+0x28>
		if (!might_format) {
    10f0:	b96e      	cbnz	r6, 110e <z_vprintk+0x3a>
			if (*fmt != '%') {
    10f2:	2825      	cmp	r0, #37	; 0x25
    10f4:	f000 8171 	beq.w	13da <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x52>
				out((int)*fmt, ctx);
    10f8:	4659      	mov	r1, fp
    10fa:	47a8      	blx	r5
	while (*fmt) {
    10fc:	9b03      	ldr	r3, [sp, #12]
    10fe:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    1102:	9303      	str	r3, [sp, #12]
    1104:	2800      	cmp	r0, #0
    1106:	d1f3      	bne.n	10f0 <z_vprintk+0x1c>
}
    1108:	b00d      	add	sp, #52	; 0x34
    110a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
    110e:	287a      	cmp	r0, #122	; 0x7a
    1110:	d80a      	bhi.n	1128 <z_vprintk+0x54>
    1112:	2862      	cmp	r0, #98	; 0x62
    1114:	d810      	bhi.n	1138 <z_vprintk+0x64>
    1116:	2830      	cmp	r0, #48	; 0x30
    1118:	d054      	beq.n	11c4 <z_vprintk+0xf0>
    111a:	d845      	bhi.n	11a8 <z_vprintk+0xd4>
    111c:	2825      	cmp	r0, #37	; 0x25
    111e:	f000 815a 	beq.w	13d6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4e>
    1122:	282d      	cmp	r0, #45	; 0x2d
    1124:	f000 815f 	beq.w	13e6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5e>
					out((int)'%', ctx);
    1128:	4659      	mov	r1, fp
    112a:	2025      	movs	r0, #37	; 0x25
    112c:	47a8      	blx	r5
					out((int)*fmt, ctx);
    112e:	4659      	mov	r1, fp
    1130:	9b03      	ldr	r3, [sp, #12]
    1132:	7818      	ldrb	r0, [r3, #0]
    1134:	47a8      	blx	r5
    1136:	e7d9      	b.n	10ec <z_vprintk+0x18>
    1138:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
    113c:	2b17      	cmp	r3, #23
    113e:	d8f3      	bhi.n	1128 <z_vprintk+0x54>
    1140:	a201      	add	r2, pc, #4	; (adr r2, 1148 <z_vprintk+0x74>)
    1142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1146:	bf00      	nop
    1148:	000013cf 	.word	0x000013cf
    114c:	00001213 	.word	0x00001213
    1150:	00001129 	.word	0x00001129
    1154:	00001129 	.word	0x00001129
    1158:	00001129 	.word	0x00001129
    115c:	000011f5 	.word	0x000011f5
    1160:	00001213 	.word	0x00001213
    1164:	00001129 	.word	0x00001129
    1168:	00001129 	.word	0x00001129
    116c:	000011f5 	.word	0x000011f5
    1170:	00001129 	.word	0x00001129
    1174:	00001129 	.word	0x00001129
    1178:	00001129 	.word	0x00001129
    117c:	000012b5 	.word	0x000012b5
    1180:	00001129 	.word	0x00001129
    1184:	00001129 	.word	0x00001129
    1188:	0000139f 	.word	0x0000139f
    118c:	00001129 	.word	0x00001129
    1190:	00001283 	.word	0x00001283
    1194:	00001129 	.word	0x00001129
    1198:	00001129 	.word	0x00001129
    119c:	000011b1 	.word	0x000011b1
    11a0:	00001129 	.word	0x00001129
    11a4:	000011f5 	.word	0x000011f5
			switch (*fmt) {
    11a8:	2839      	cmp	r0, #57	; 0x39
    11aa:	d91a      	bls.n	11e2 <z_vprintk+0x10e>
    11ac:	2858      	cmp	r0, #88	; 0x58
    11ae:	d1bb      	bne.n	1128 <z_vprintk+0x54>
				if (*fmt == 'p') {
    11b0:	9b03      	ldr	r3, [sp, #12]
    11b2:	781b      	ldrb	r3, [r3, #0]
    11b4:	2b70      	cmp	r3, #112	; 0x70
    11b6:	f040 8088 	bne.w	12ca <z_vprintk+0x1f6>
					x = va_arg(ap, unsigned int);
    11ba:	f854 3b04 	ldr.w	r3, [r4], #4
    11be:	2200      	movs	r2, #0
    11c0:	9306      	str	r3, [sp, #24]
    11c2:	e090      	b.n	12e6 <z_vprintk+0x212>
				if (min_width < 0 && padding == PAD_NONE) {
    11c4:	f1b9 0f00 	cmp.w	r9, #0
    11c8:	da0e      	bge.n	11e8 <z_vprintk+0x114>
    11ca:	f1b8 0f00 	cmp.w	r8, #0
    11ce:	f000 810d 	beq.w	13ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x64>
					min_width = *fmt - '0';
    11d2:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    11d6:	f1b8 0f00 	cmp.w	r8, #0
    11da:	bf08      	it	eq
    11dc:	f04f 0802 	moveq.w	r8, #2
    11e0:	e78c      	b.n	10fc <z_vprintk+0x28>
				if (min_width < 0) {
    11e2:	f1b9 0f00 	cmp.w	r9, #0
    11e6:	dbf4      	blt.n	11d2 <z_vprintk+0xfe>
					min_width = 10 * min_width + *fmt - '0';
    11e8:	230a      	movs	r3, #10
    11ea:	fb03 0909 	mla	r9, r3, r9, r0
    11ee:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    11f2:	e7f0      	b.n	11d6 <z_vprintk+0x102>
				if (*fmt == 'h' && length_mod == 'h') {
    11f4:	2868      	cmp	r0, #104	; 0x68
    11f6:	d103      	bne.n	1200 <z_vprintk+0x12c>
    11f8:	2f68      	cmp	r7, #104	; 0x68
    11fa:	d106      	bne.n	120a <z_vprintk+0x136>
					length_mod = 'H';
    11fc:	2748      	movs	r7, #72	; 0x48
    11fe:	e77d      	b.n	10fc <z_vprintk+0x28>
				} else if (*fmt == 'l' && length_mod == 'l') {
    1200:	286c      	cmp	r0, #108	; 0x6c
    1202:	d102      	bne.n	120a <z_vprintk+0x136>
    1204:	2f6c      	cmp	r7, #108	; 0x6c
    1206:	f000 80f4 	beq.w	13f2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6a>
				} else if (length_mod == 0) {
    120a:	2f00      	cmp	r7, #0
    120c:	d18c      	bne.n	1128 <z_vprintk+0x54>
    120e:	4607      	mov	r7, r0
    1210:	e774      	b.n	10fc <z_vprintk+0x28>
				if (length_mod == 'z') {
    1212:	2f7a      	cmp	r7, #122	; 0x7a
    1214:	d102      	bne.n	121c <z_vprintk+0x148>
					d = va_arg(ap, int);
    1216:	f854 6b04 	ldr.w	r6, [r4], #4
    121a:	e021      	b.n	1260 <z_vprintk+0x18c>
				} else if (length_mod == 'l') {
    121c:	2f6c      	cmp	r7, #108	; 0x6c
    121e:	d0fa      	beq.n	1216 <z_vprintk+0x142>
				} else if (length_mod == 'L') {
    1220:	2f4c      	cmp	r7, #76	; 0x4c
    1222:	d1f8      	bne.n	1216 <z_vprintk+0x142>
					long long lld = va_arg(ap, long long);
    1224:	3407      	adds	r4, #7
    1226:	f024 0407 	bic.w	r4, r4, #7
    122a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    122e:	e9cd 2304 	strd	r2, r3, [sp, #16]
					if (lld > __LONG_MAX__ ||
    1232:	9b04      	ldr	r3, [sp, #16]
    1234:	f04f 30ff 	mov.w	r0, #4294967295
    1238:	f113 4100 	adds.w	r1, r3, #2147483648	; 0x80000000
    123c:	9b05      	ldr	r3, [sp, #20]
    123e:	9108      	str	r1, [sp, #32]
    1240:	f143 0100 	adc.w	r1, r3, #0
    1244:	9109      	str	r1, [sp, #36]	; 0x24
    1246:	2100      	movs	r1, #0
    1248:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    124c:	4299      	cmp	r1, r3
    124e:	bf08      	it	eq
    1250:	4290      	cmpeq	r0, r2
    1252:	d204      	bcs.n	125e <z_vprintk+0x18a>
						print_err(out, ctx);
    1254:	4659      	mov	r1, fp
    1256:	4628      	mov	r0, r5
    1258:	f010 fe55 	bl	11f06 <print_err>
						break;
    125c:	e746      	b.n	10ec <z_vprintk+0x18>
					d = lld;
    125e:	9e04      	ldr	r6, [sp, #16]
				if (d < 0) {
    1260:	2e00      	cmp	r6, #0
    1262:	da05      	bge.n	1270 <z_vprintk+0x19c>
					out((int)'-', ctx);
    1264:	4659      	mov	r1, fp
    1266:	202d      	movs	r0, #45	; 0x2d
    1268:	47a8      	blx	r5
					d = -d;
    126a:	4276      	negs	r6, r6
					min_width--;
    126c:	f109 39ff 	add.w	r9, r9, #4294967295
				_printk_dec_ulong(out, ctx, d, padding,
    1270:	4643      	mov	r3, r8
    1272:	4632      	mov	r2, r6
    1274:	f8cd 9000 	str.w	r9, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
    1278:	4659      	mov	r1, fp
    127a:	4628      	mov	r0, r5
    127c:	f7ff fed6 	bl	102c <_printk_dec_ulong>
				break;
    1280:	e734      	b.n	10ec <z_vprintk+0x18>
				if (length_mod == 'z') {
    1282:	2f7a      	cmp	r7, #122	; 0x7a
    1284:	d102      	bne.n	128c <z_vprintk+0x1b8>
					u = va_arg(ap, unsigned int);
    1286:	f854 2b04 	ldr.w	r2, [r4], #4
    128a:	e00f      	b.n	12ac <z_vprintk+0x1d8>
				} else if (length_mod == 'l') {
    128c:	2f6c      	cmp	r7, #108	; 0x6c
    128e:	d0fa      	beq.n	1286 <z_vprintk+0x1b2>
				} else if (length_mod == 'L') {
    1290:	2f4c      	cmp	r7, #76	; 0x4c
    1292:	d1f8      	bne.n	1286 <z_vprintk+0x1b2>
					if (llu > ~0UL) {
    1294:	2100      	movs	r1, #0
    1296:	f04f 30ff 	mov.w	r0, #4294967295
					unsigned long long llu =
    129a:	3407      	adds	r4, #7
    129c:	f024 0407 	bic.w	r4, r4, #7
    12a0:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
    12a4:	4299      	cmp	r1, r3
    12a6:	bf08      	it	eq
    12a8:	4290      	cmpeq	r0, r2
    12aa:	d3d3      	bcc.n	1254 <z_vprintk+0x180>
				_printk_dec_ulong(out, ctx, u, padding,
    12ac:	4643      	mov	r3, r8
    12ae:	f8cd 9000 	str.w	r9, [sp]
    12b2:	e7e1      	b.n	1278 <z_vprintk+0x1a4>
				out('0', ctx);
    12b4:	4659      	mov	r1, fp
    12b6:	2030      	movs	r0, #48	; 0x30
    12b8:	47a8      	blx	r5
				out('x', ctx);
    12ba:	4659      	mov	r1, fp
    12bc:	2078      	movs	r0, #120	; 0x78
    12be:	47a8      	blx	r5
					min_width = 8;
    12c0:	f04f 0908 	mov.w	r9, #8
				padding = PAD_ZERO_BEFORE;
    12c4:	f04f 0801 	mov.w	r8, #1
    12c8:	e772      	b.n	11b0 <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
    12ca:	2f6c      	cmp	r7, #108	; 0x6c
    12cc:	f43f af75 	beq.w	11ba <z_vprintk+0xe6>
				} else if (length_mod == 'L') {
    12d0:	2f4c      	cmp	r7, #76	; 0x4c
    12d2:	f47f af72 	bne.w	11ba <z_vprintk+0xe6>
					x = va_arg(ap, unsigned long long);
    12d6:	1de3      	adds	r3, r4, #7
    12d8:	f023 0307 	bic.w	r3, r3, #7
    12dc:	461c      	mov	r4, r3
    12de:	f854 2b08 	ldr.w	r2, [r4], #8
    12e2:	9206      	str	r2, [sp, #24]
    12e4:	685a      	ldr	r2, [r3, #4]
	int digits = 0;
    12e6:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
    12e8:	2310      	movs	r3, #16
	int shift = sizeof(num) * 8;
    12ea:	f04f 0a40 	mov.w	sl, #64	; 0x40
	int digits = 0;
    12ee:	9104      	str	r1, [sp, #16]
	int found_largest_digit = 0;
    12f0:	9107      	str	r1, [sp, #28]
		shift -= 4;
    12f2:	f1aa 0a04 	sub.w	sl, sl, #4
		nibble = (num >> shift) & 0xf;
    12f6:	9906      	ldr	r1, [sp, #24]
    12f8:	f1ca 0e20 	rsb	lr, sl, #32
    12fc:	f1aa 0c20 	sub.w	ip, sl, #32
    1300:	fa21 f00a 	lsr.w	r0, r1, sl
    1304:	fa02 fe0e 	lsl.w	lr, r2, lr
    1308:	ea40 000e 	orr.w	r0, r0, lr
    130c:	fa22 fc0c 	lsr.w	ip, r2, ip
    1310:	ea40 000c 	orr.w	r0, r0, ip
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
    1314:	f010 000f 	ands.w	r0, r0, #15
    1318:	d107      	bne.n	132a <z_vprintk+0x256>
    131a:	9907      	ldr	r1, [sp, #28]
    131c:	b911      	cbnz	r1, 1324 <z_vprintk+0x250>
    131e:	f1ba 0f00 	cmp.w	sl, #0
    1322:	d125      	bne.n	1370 <z_vprintk+0x29c>
			nibble += nibble > 9 ? 87 : 48;
    1324:	f04f 0c30 	mov.w	ip, #48	; 0x30
    1328:	e005      	b.n	1336 <z_vprintk+0x262>
    132a:	2809      	cmp	r0, #9
    132c:	bf8c      	ite	hi
    132e:	f04f 0c57 	movhi.w	ip, #87	; 0x57
    1332:	f04f 0c30 	movls.w	ip, #48	; 0x30
    1336:	4460      	add	r0, ip
			out((int)nibble, ctx);
    1338:	4659      	mov	r1, fp
    133a:	b240      	sxtb	r0, r0
    133c:	920a      	str	r2, [sp, #40]	; 0x28
    133e:	9307      	str	r3, [sp, #28]
    1340:	47a8      	blx	r5
			digits++;
    1342:	9b04      	ldr	r3, [sp, #16]
	while (shift >= 4) {
    1344:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			digits++;
    1346:	3301      	adds	r3, #1
    1348:	9304      	str	r3, [sp, #16]
	while (shift >= 4) {
    134a:	9b07      	ldr	r3, [sp, #28]
    134c:	f1ba 0f00 	cmp.w	sl, #0
    1350:	d123      	bne.n	139a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12>
	if (padding == PAD_SPACE_AFTER) {
    1352:	f1b8 0f03 	cmp.w	r8, #3
    1356:	f47f aec9 	bne.w	10ec <z_vprintk+0x18>
		remaining = min_width * 2 - digits;
    135a:	9b04      	ldr	r3, [sp, #16]
    135c:	ebc3 0649 	rsb	r6, r3, r9, lsl #1
		while (remaining-- > 0) {
    1360:	2e00      	cmp	r6, #0
    1362:	f77f aec3 	ble.w	10ec <z_vprintk+0x18>
			out(' ', ctx);
    1366:	4659      	mov	r1, fp
    1368:	2020      	movs	r0, #32
    136a:	47a8      	blx	r5
    136c:	3e01      	subs	r6, #1
    136e:	e7f7      	b.n	1360 <z_vprintk+0x28c>
		if (remaining-- <= min_width) {
    1370:	1e59      	subs	r1, r3, #1
    1372:	4599      	cmp	r9, r3
    1374:	910a      	str	r1, [sp, #40]	; 0x28
    1376:	db07      	blt.n	1388 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT>
			if (padding == PAD_ZERO_BEFORE) {
    1378:	f1b8 0f01 	cmp.w	r8, #1
    137c:	d106      	bne.n	138c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4>
				out('0', ctx);
    137e:	4659      	mov	r1, fp
    1380:	2030      	movs	r0, #48	; 0x30
    1382:	920b      	str	r2, [sp, #44]	; 0x2c
				out(' ', ctx);
    1384:	47a8      	blx	r5
    1386:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
			nibble += nibble > 9 ? 87 : 48;
    1388:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    138a:	e7b2      	b.n	12f2 <z_vprintk+0x21e>
			} else if (padding == PAD_SPACE_BEFORE) {
    138c:	f1b8 0f02 	cmp.w	r8, #2
    1390:	d1fa      	bne.n	1388 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT>
				out(' ', ctx);
    1392:	4659      	mov	r1, fp
    1394:	2020      	movs	r0, #32
    1396:	920b      	str	r2, [sp, #44]	; 0x2c
    1398:	e7f4      	b.n	1384 <z_vprintk+0x2b0>
			found_largest_digit = 1;
    139a:	9607      	str	r6, [sp, #28]
    139c:	e7a9      	b.n	12f2 <z_vprintk+0x21e>
				char *s = va_arg(ap, char *);
    139e:	f854 6b04 	ldr.w	r6, [r4], #4
				while (*s) {
    13a2:	46b2      	mov	sl, r6
    13a4:	4653      	mov	r3, sl
    13a6:	f81a 0b01 	ldrb.w	r0, [sl], #1
    13aa:	b968      	cbnz	r0, 13c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x40>
				if (padding == PAD_SPACE_AFTER) {
    13ac:	f1b8 0f03 	cmp.w	r8, #3
    13b0:	d121      	bne.n	13f6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6e>
					int remaining = min_width - (s - start);
    13b2:	1b9e      	subs	r6, r3, r6
    13b4:	eba9 0606 	sub.w	r6, r9, r6
					while (remaining-- > 0) {
    13b8:	2e00      	cmp	r6, #0
    13ba:	f77f ae97 	ble.w	10ec <z_vprintk+0x18>
						out(' ', ctx);
    13be:	4659      	mov	r1, fp
    13c0:	2020      	movs	r0, #32
    13c2:	47a8      	blx	r5
    13c4:	3e01      	subs	r6, #1
    13c6:	e7f7      	b.n	13b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x30>
					out((int)(*s++), ctx);
    13c8:	4659      	mov	r1, fp
    13ca:	47a8      	blx	r5
    13cc:	e7ea      	b.n	13a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1c>
				out(c, ctx);
    13ce:	4659      	mov	r1, fp
    13d0:	f854 0b04 	ldr.w	r0, [r4], #4
    13d4:	e6ae      	b.n	1134 <z_vprintk+0x60>
				out((int)'%', ctx);
    13d6:	4659      	mov	r1, fp
    13d8:	e6ac      	b.n	1134 <z_vprintk+0x60>
				length_mod = 0;
    13da:	4637      	mov	r7, r6
				padding = PAD_NONE;
    13dc:	46b0      	mov	r8, r6
				min_width = -1;
    13de:	f04f 39ff 	mov.w	r9, #4294967295
				might_format = 1;
    13e2:	2601      	movs	r6, #1
    13e4:	e68a      	b.n	10fc <z_vprintk+0x28>
			switch (*fmt) {
    13e6:	f04f 0803 	mov.w	r8, #3
    13ea:	e687      	b.n	10fc <z_vprintk+0x28>
					padding = PAD_ZERO_BEFORE;
    13ec:	f04f 0801 	mov.w	r8, #1
    13f0:	e684      	b.n	10fc <z_vprintk+0x28>
					length_mod = 'L';
    13f2:	274c      	movs	r7, #76	; 0x4c
    13f4:	e682      	b.n	10fc <z_vprintk+0x28>
			might_format = 0;
    13f6:	4606      	mov	r6, r0
		++fmt;
    13f8:	e680      	b.n	10fc <z_vprintk+0x28>
    13fa:	bf00      	nop

000013fc <vprintk>:
{
    13fc:	b507      	push	{r0, r1, r2, lr}
    13fe:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    1400:	2100      	movs	r1, #0
{
    1402:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    1404:	9101      	str	r1, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
    1406:	4803      	ldr	r0, [pc, #12]	; (1414 <vprintk+0x18>)
    1408:	a901      	add	r1, sp, #4
    140a:	f7ff fe63 	bl	10d4 <z_vprintk>
}
    140e:	b003      	add	sp, #12
    1410:	f85d fb04 	ldr.w	pc, [sp], #4
    1414:	0000101d 	.word	0x0000101d

00001418 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    1418:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    141a:	2500      	movs	r5, #0
{
    141c:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    141e:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    1422:	4604      	mov	r4, r0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    1424:	a901      	add	r1, sp, #4
    1426:	4805      	ldr	r0, [pc, #20]	; (143c <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    1428:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    142a:	f7ff fe53 	bl	10d4 <z_vprintk>

	if (ctx.count < ctx.max) {
    142e:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    1432:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    1434:	bfb8      	it	lt
    1436:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    1438:	b005      	add	sp, #20
    143a:	bd30      	pop	{r4, r5, pc}
    143c:	00011f23 	.word	0x00011f23

00001440 <nordicsemi_nrf53_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    1440:	f04f 0320 	mov.w	r3, #32
    1444:	f3ef 8111 	mrs	r1, BASEPRI
    1448:	f383 8811 	msr	BASEPRI, r3
    144c:	f3bf 8f6f 	isb	sy
	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_CACHE
#ifdef CONFIG_SOC_NRF5340_CPUAPP
	/* Enable the instruction & data cache */
	NRF_CACHE->ENABLE = CACHE_ENABLE_ENABLE_Msk;
    1450:	2301      	movs	r3, #1
    1452:	4a09      	ldr	r2, [pc, #36]	; (1478 <nordicsemi_nrf53_init+0x38>)
    1454:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
#endif /* CONFIG_SOC_NRF5340_CPUNET */
#endif

#if defined(CONFIG_SOC_NRF5340_CPUAPP) && \
	!defined(CONFIG_TRUSTED_EXECUTION_NONSECURE)
	*((u32_t *)0x500046D0) = 0x1;
    1458:	f502 525b 	add.w	r2, r2, #14016	; 0x36c0
    145c:	3210      	adds	r2, #16
#endif

#if defined(CONFIG_SOC_DCDC_NRF53X_APP)
	NRF_REGULATORS->VREGMAIN.DCDCEN = 1;
    145e:	6353      	str	r3, [r2, #52]	; 0x34
	*((u32_t *)0x500046D0) = 0x1;
    1460:	6013      	str	r3, [r2, #0]
#endif
#if defined(CONFIG_SOC_DCDC_NRF53X_NET)
	NRF_REGULATORS->VREGRADIO.DCDCEN = 1;
    1462:	f8c2 3234 	str.w	r3, [r2, #564]	; 0x234
#endif
#if defined(CONFIG_SOC_DCDC_NRF53X_HV)
	NRF_REGULATORS->VREGH.DCDCEN = 1;
    1466:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    146a:	f381 8811 	msr	BASEPRI, r1
    146e:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1472:	2000      	movs	r0, #0
    1474:	4770      	bx	lr
    1476:	bf00      	nop
    1478:	50001000 	.word	0x50001000

0000147c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    147c:	b148      	cbz	r0, 1492 <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    147e:	4b05      	ldr	r3, [pc, #20]	; (1494 <arch_busy_wait+0x18>)
    1480:	681a      	ldr	r2, [r3, #0]
    1482:	4b05      	ldr	r3, [pc, #20]	; (1498 <arch_busy_wait+0x1c>)
    1484:	fbb2 f2f3 	udiv	r2, r2, r3
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    1488:	4b04      	ldr	r3, [pc, #16]	; (149c <arch_busy_wait+0x20>)
    delay_cycles(cycles);
    148a:	4350      	muls	r0, r2
    148c:	f043 0301 	orr.w	r3, r3, #1
    1490:	4718      	bx	r3

void arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    1492:	4770      	bx	lr
    1494:	200002b0 	.word	0x200002b0
    1498:	000f4240 	.word	0x000f4240
    149c:	00016d80 	.word	0x00016d80

000014a0 <nvs_prev_ate>:

/* walking through allocation entry list, from newest to oldest entries
 * read ate from addr, modify addr to the previous ate
 */
static int nvs_prev_ate(struct nvs_fs *fs, u32_t *addr, struct nvs_ate *ate)
{
    14a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    14a4:	2308      	movs	r3, #8
{
    14a6:	460d      	mov	r5, r1
    14a8:	b085      	sub	sp, #20
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    14aa:	6809      	ldr	r1, [r1, #0]
{
    14ac:	4607      	mov	r7, r0
	int rc;
	struct nvs_ate close_ate, end_ate;
	u32_t data_end_addr, ate_end_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    14ae:	7c04      	ldrb	r4, [r0, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    14b0:	f010 ffed 	bl	1248e <nvs_flash_rd>

	rc = nvs_flash_ate_rd(fs, *addr, ate);
	if (rc) {
    14b4:	b968      	cbnz	r0, 14d2 <nvs_prev_ate+0x32>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    14b6:	2108      	movs	r1, #8
    14b8:	4620      	mov	r0, r4
    14ba:	f011 f834 	bl	12526 <nvs_al_size.isra.0>
		return rc;
	}

	*addr += ate_size;
    14be:	6829      	ldr	r1, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
    14c0:	89bb      	ldrh	r3, [r7, #12]
	*addr += ate_size;
    14c2:	4401      	add	r1, r0
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
    14c4:	b28a      	uxth	r2, r1
    14c6:	1a1b      	subs	r3, r3, r0
    14c8:	429a      	cmp	r2, r3
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    14ca:	4606      	mov	r6, r0
	*addr += ate_size;
    14cc:	6029      	str	r1, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
    14ce:	d003      	beq.n	14d8 <nvs_prev_ate+0x38>
		return 0;
    14d0:	2000      	movs	r0, #0
	/* remark: if there was absolutely no valid data in the sector *addr
	 * is kept at sector_end - 2*ate_size, the next read will contain
	 * invalid data and continue with a sector jump
	 */
	return 0;
}
    14d2:	b005      	add	sp, #20
    14d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
    14d8:	0c0b      	lsrs	r3, r1, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
    14da:	bf09      	itett	eq
    14dc:	89fb      	ldrheq	r3, [r7, #14]
		*addr -= (1 << ADDR_SECT_SHIFT);
    14de:	f5a1 3180 	subne.w	r1, r1, #65536	; 0x10000
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
    14e2:	f103 33ff 	addeq.w	r3, r3, #4294967295
    14e6:	eb01 4103 	addeq.w	r1, r1, r3, lsl #16
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    14ea:	466a      	mov	r2, sp
    14ec:	2308      	movs	r3, #8
    14ee:	4638      	mov	r0, r7
    14f0:	6029      	str	r1, [r5, #0]
    14f2:	f010 ffcc 	bl	1248e <nvs_flash_rd>
	if (rc) {
    14f6:	2800      	cmp	r0, #0
    14f8:	d1eb      	bne.n	14d2 <nvs_prev_ate+0x32>
    14fa:	466a      	mov	r2, sp
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    14fc:	4603      	mov	r3, r0
		if (data8[i] != value) {
    14fe:	f812 1b01 	ldrb.w	r1, [r2], #1
    1502:	29ff      	cmp	r1, #255	; 0xff
    1504:	d115      	bne.n	1532 <nvs_prev_ate+0x92>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    1506:	3301      	adds	r3, #1
    1508:	2b08      	cmp	r3, #8
    150a:	d1f8      	bne.n	14fe <nvs_prev_ate+0x5e>
		*addr = fs->ate_wra;
    150c:	687b      	ldr	r3, [r7, #4]
    150e:	602b      	str	r3, [r5, #0]
		return 0;
    1510:	e7df      	b.n	14d2 <nvs_prev_ate+0x32>
		if (close_ate.offset < (fs->sector_size - ate_size) &&
    1512:	89bb      	ldrh	r3, [r7, #12]
    1514:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    1518:	1b9b      	subs	r3, r3, r6
    151a:	4299      	cmp	r1, r3
    151c:	d20f      	bcs.n	153e <nvs_prev_ate+0x9e>
		    !(close_ate.offset % ate_size)) {
    151e:	fbb1 f3f6 	udiv	r3, r1, r6
    1522:	fb06 1313 	mls	r3, r6, r3, r1
		if (close_ate.offset < (fs->sector_size - ate_size) &&
    1526:	b953      	cbnz	r3, 153e <nvs_prev_ate+0x9e>
			(*addr) &= ADDR_SECT_MASK;
    1528:	0c24      	lsrs	r4, r4, #16
    152a:	0424      	lsls	r4, r4, #16
			(*addr) += close_ate.offset;
    152c:	440c      	add	r4, r1
    152e:	602c      	str	r4, [r5, #0]
			return 0;
    1530:	e7cf      	b.n	14d2 <nvs_prev_ate+0x32>
	if (!nvs_ate_crc8_check(&close_ate)) {
    1532:	4668      	mov	r0, sp
    1534:	f010 ffe2 	bl	124fc <nvs_ate_crc8_check>
    1538:	682c      	ldr	r4, [r5, #0]
    153a:	2800      	cmp	r0, #0
    153c:	d0e9      	beq.n	1512 <nvs_prev_ate+0x72>
	data_end_addr = *addr & ADDR_SECT_MASK;
    153e:	4b10      	ldr	r3, [pc, #64]	; (1580 <nvs_prev_ate+0xe0>)
	*addr -= ate_size;
    1540:	1ba4      	subs	r4, r4, r6
			data_end_addr &= ADDR_SECT_MASK;
    1542:	4699      	mov	r9, r3
	*addr -= ate_size;
    1544:	602c      	str	r4, [r5, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
    1546:	ea04 0803 	and.w	r8, r4, r3
	while (ate_end_addr > data_end_addr) {
    154a:	45a0      	cmp	r8, r4
    154c:	d2c0      	bcs.n	14d0 <nvs_prev_ate+0x30>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    154e:	2308      	movs	r3, #8
    1550:	4621      	mov	r1, r4
    1552:	4638      	mov	r0, r7
    1554:	eb0d 0203 	add.w	r2, sp, r3
    1558:	f010 ff99 	bl	1248e <nvs_flash_rd>
		if (rc) {
    155c:	2800      	cmp	r0, #0
    155e:	d1b8      	bne.n	14d2 <nvs_prev_ate+0x32>
		if (!nvs_ate_crc8_check(&end_ate)) {
    1560:	a802      	add	r0, sp, #8
    1562:	f010 ffcb 	bl	124fc <nvs_ate_crc8_check>
    1566:	b940      	cbnz	r0, 157a <nvs_prev_ate+0xda>
			data_end_addr += end_ate.offset + end_ate.len;
    1568:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    156c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
			data_end_addr &= ADDR_SECT_MASK;
    1570:	ea08 0809 	and.w	r8, r8, r9
			data_end_addr += end_ate.offset + end_ate.len;
    1574:	4413      	add	r3, r2
    1576:	4498      	add	r8, r3
			*addr = ate_end_addr;
    1578:	602c      	str	r4, [r5, #0]
		ate_end_addr -= ate_size;
    157a:	1ba4      	subs	r4, r4, r6
    157c:	e7e5      	b.n	154a <nvs_prev_ate+0xaa>
    157e:	bf00      	nop
    1580:	ffff0000 	.word	0xffff0000

00001584 <nvs_gc>:
/* garbage collection: the address ate_wra has been updated to the new sector
 * that has just been started. The data to gc is in the sector after this new
 * sector.
 */
static int nvs_gc(struct nvs_fs *fs)
{
    1584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct nvs_ate close_ate, gc_ate, wlk_ate;
	u32_t sec_addr, gc_addr, gc_prev_addr, wlk_addr, wlk_prev_addr,
	      data_addr, stop_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    1588:	2108      	movs	r1, #8
{
    158a:	b095      	sub	sp, #84	; 0x54
    158c:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    158e:	7c00      	ldrb	r0, [r0, #16]
    1590:	f010 ffc9 	bl	12526 <nvs_al_size.isra.0>
    1594:	4606      	mov	r6, r0

	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    1596:	686b      	ldr	r3, [r5, #4]
	nvs_sector_advance(fs, &sec_addr);
    1598:	89e8      	ldrh	r0, [r5, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    159a:	0c1b      	lsrs	r3, r3, #16
    159c:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &sec_addr);
    159e:	a903      	add	r1, sp, #12
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    15a0:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
    15a2:	f010 ffca 	bl	1253a <nvs_sector_advance.isra.0>
	gc_addr = sec_addr + fs->sector_size - ate_size;
    15a6:	9b03      	ldr	r3, [sp, #12]
    15a8:	89a9      	ldrh	r1, [r5, #12]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    15aa:	af06      	add	r7, sp, #24
	gc_addr = sec_addr + fs->sector_size - ate_size;
    15ac:	4419      	add	r1, r3
    15ae:	1b89      	subs	r1, r1, r6
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    15b0:	2308      	movs	r3, #8
    15b2:	463a      	mov	r2, r7
    15b4:	4628      	mov	r0, r5
	gc_addr = sec_addr + fs->sector_size - ate_size;
    15b6:	9104      	str	r1, [sp, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    15b8:	f010 ff69 	bl	1248e <nvs_flash_rd>

	/* if the sector is not closed don't do gc */
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
	if (rc < 0) {
    15bc:	1e04      	subs	r4, r0, #0
    15be:	db71      	blt.n	16a4 <nvs_gc+0x120>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    15c0:	2300      	movs	r3, #0
		if (data8[i] != value) {
    15c2:	5cfa      	ldrb	r2, [r7, r3]
    15c4:	2aff      	cmp	r2, #255	; 0xff
    15c6:	d171      	bne.n	16ac <nvs_gc+0x128>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    15c8:	3301      	adds	r3, #1
    15ca:	2b08      	cmp	r3, #8
    15cc:	d1f9      	bne.n	15c2 <nvs_gc+0x3e>
		return rc;
	}

	rc = nvs_ate_cmp_const(&close_ate, 0xff);
	if (!rc) {
		rc = nvs_flash_erase_sector(fs, sec_addr);
    15ce:	4628      	mov	r0, r5
    15d0:	9903      	ldr	r1, [sp, #12]
    15d2:	f010 ffe1 	bl	12598 <nvs_flash_erase_sector>
    15d6:	4604      	mov	r4, r0
		if (rc) {
    15d8:	e064      	b.n	16a4 <nvs_gc+0x120>
		bytes_to_copy = MIN(block_size, len);
    15da:	4557      	cmp	r7, sl
    15dc:	463e      	mov	r6, r7
    15de:	bf28      	it	cs
    15e0:	4656      	movcs	r6, sl
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
    15e2:	4641      	mov	r1, r8
    15e4:	4633      	mov	r3, r6
    15e6:	4628      	mov	r0, r5
    15e8:	aa0c      	add	r2, sp, #48	; 0x30
    15ea:	f010 ff50 	bl	1248e <nvs_flash_rd>
		if (rc) {
    15ee:	4604      	mov	r4, r0
    15f0:	2800      	cmp	r0, #0
    15f2:	d157      	bne.n	16a4 <nvs_gc+0x120>
	if (!len) {
    15f4:	b136      	cbz	r6, 1604 <nvs_gc+0x80>
    15f6:	4633      	mov	r3, r6
    15f8:	4628      	mov	r0, r5
    15fa:	68a9      	ldr	r1, [r5, #8]
    15fc:	aa0c      	add	r2, sp, #48	; 0x30
    15fe:	f010 fff1 	bl	125e4 <nvs_flash_al_wrt.part.0>
    1602:	4604      	mov	r4, r0
	fs->data_wra += nvs_al_size(fs, len);
    1604:	4631      	mov	r1, r6
    1606:	7c28      	ldrb	r0, [r5, #16]
    1608:	f010 ff8d 	bl	12526 <nvs_al_size.isra.0>
    160c:	68aa      	ldr	r2, [r5, #8]
    160e:	4402      	add	r2, r0
    1610:	60aa      	str	r2, [r5, #8]
		if (rc) {
    1612:	2c00      	cmp	r4, #0
    1614:	d146      	bne.n	16a4 <nvs_gc+0x120>
		len -= bytes_to_copy;
    1616:	ebaa 0a06 	sub.w	sl, sl, r6
		addr += bytes_to_copy;
    161a:	44b0      	add	r8, r6
    161c:	e038      	b.n	1690 <nvs_gc+0x10c>
				return rc;
			}
		}

		/* stop gc at end of the sector */
		if (gc_prev_addr == stop_addr) {
    161e:	9b01      	ldr	r3, [sp, #4]
    1620:	455b      	cmp	r3, fp
    1622:	d0d4      	beq.n	15ce <nvs_gc+0x4a>
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    1624:	4628      	mov	r0, r5
    1626:	aa08      	add	r2, sp, #32
    1628:	a904      	add	r1, sp, #16
		gc_prev_addr = gc_addr;
    162a:	f8dd b010 	ldr.w	fp, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    162e:	f7ff ff37 	bl	14a0 <nvs_prev_ate>
		if (rc) {
    1632:	4604      	mov	r4, r0
    1634:	2800      	cmp	r0, #0
    1636:	d135      	bne.n	16a4 <nvs_gc+0x120>
		wlk_addr = fs->ate_wra;
    1638:	686b      	ldr	r3, [r5, #4]
    163a:	9305      	str	r3, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    163c:	4628      	mov	r0, r5
    163e:	aa0a      	add	r2, sp, #40	; 0x28
    1640:	a905      	add	r1, sp, #20
			wlk_prev_addr = wlk_addr;
    1642:	9f05      	ldr	r7, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    1644:	f7ff ff2c 	bl	14a0 <nvs_prev_ate>
			if (rc) {
    1648:	4604      	mov	r4, r0
    164a:	bb58      	cbnz	r0, 16a4 <nvs_gc+0x120>
			if ((wlk_ate.id == gc_ate.id) &&
    164c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
    1650:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    1654:	429a      	cmp	r2, r3
    1656:	d1f1      	bne.n	163c <nvs_gc+0xb8>
			    (!nvs_ate_crc8_check(&wlk_ate))) {
    1658:	a80a      	add	r0, sp, #40	; 0x28
    165a:	f010 ff4f 	bl	124fc <nvs_ate_crc8_check>
			if ((wlk_ate.id == gc_ate.id) &&
    165e:	2800      	cmp	r0, #0
    1660:	d1ec      	bne.n	163c <nvs_gc+0xb8>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
    1662:	455f      	cmp	r7, fp
    1664:	d1db      	bne.n	161e <nvs_gc+0x9a>
    1666:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    166a:	2b00      	cmp	r3, #0
    166c:	d0d7      	beq.n	161e <nvs_gc+0x9a>
			data_addr += gc_ate.offset;
    166e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    1672:	ea0b 0809 	and.w	r8, fp, r9
			data_addr += gc_ate.offset;
    1676:	4498      	add	r8, r3
			gc_ate.offset = (u16_t)(fs->data_wra & ADDR_OFFS_MASK);
    1678:	68ab      	ldr	r3, [r5, #8]
			nvs_ate_crc8_update(&gc_ate);
    167a:	a808      	add	r0, sp, #32
			gc_ate.offset = (u16_t)(fs->data_wra & ADDR_OFFS_MASK);
    167c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			nvs_ate_crc8_update(&gc_ate);
    1680:	f010 ff48 	bl	12514 <nvs_ate_crc8_update>
	block_size = NVS_BLOCK_SIZE & ~(fs->write_block_size - 1U);
    1684:	7c2f      	ldrb	r7, [r5, #16]
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
    1686:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
	block_size = NVS_BLOCK_SIZE & ~(fs->write_block_size - 1U);
    168a:	427f      	negs	r7, r7
    168c:	f007 0720 	and.w	r7, r7, #32
	while (len) {
    1690:	f1ba 0f00 	cmp.w	sl, #0
    1694:	d1a1      	bne.n	15da <nvs_gc+0x56>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
    1696:	4628      	mov	r0, r5
    1698:	a908      	add	r1, sp, #32
    169a:	f010 ffe7 	bl	1266c <nvs_flash_ate_wrt>
			if (rc) {
    169e:	4604      	mov	r4, r0
    16a0:	2800      	cmp	r0, #0
    16a2:	d0bc      	beq.n	161e <nvs_gc+0x9a>
	rc = nvs_flash_erase_sector(fs, sec_addr);
	if (rc) {
		return rc;
	}
	return 0;
}
    16a4:	4620      	mov	r0, r4
    16a6:	b015      	add	sp, #84	; 0x54
    16a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	stop_addr = gc_addr - ate_size;
    16ac:	9b04      	ldr	r3, [sp, #16]
	gc_addr += close_ate.offset;
    16ae:	f8bd 101a 	ldrh.w	r1, [sp, #26]
	stop_addr = gc_addr - ate_size;
    16b2:	1b9a      	subs	r2, r3, r6
    16b4:	9201      	str	r2, [sp, #4]
	gc_addr &= ADDR_SECT_MASK;
    16b6:	4a03      	ldr	r2, [pc, #12]	; (16c4 <nvs_gc+0x140>)
    16b8:	4013      	ands	r3, r2
	gc_addr += close_ate.offset;
    16ba:	440b      	add	r3, r1
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    16bc:	4691      	mov	r9, r2
	gc_addr += close_ate.offset;
    16be:	9304      	str	r3, [sp, #16]
    16c0:	e7b0      	b.n	1624 <nvs_gc+0xa0>
    16c2:	bf00      	nop
    16c4:	ffff0000 	.word	0xffff0000

000016c8 <nvs_init>:
	}
	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
    16c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    16cc:	4604      	mov	r4, r0
    16ce:	460d      	mov	r5, r1
    16d0:	b087      	sub	sp, #28

	int rc;
	struct flash_pages_info info;

	k_mutex_init(&fs->nvs_lock);
    16d2:	f100 0614 	add.w	r6, r0, #20
	return z_impl_k_mutex_init(mutex);
    16d6:	4630      	mov	r0, r6
    16d8:	f014 ff65 	bl	165a6 <z_impl_k_mutex_init>
    16dc:	4628      	mov	r0, r5
    16de:	f00d f993 	bl	ea08 <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
    16e2:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
    16e4:	b948      	cbnz	r0, 16fa <nvs_init+0x32>
		LOG_ERR("No valid flash device found");
    16e6:	2145      	movs	r1, #69	; 0x45
    16e8:	487f      	ldr	r0, [pc, #508]	; (18e8 <nvs_init+0x220>)
    16ea:	f010 fc2d 	bl	11f48 <printk>
		return -ENXIO;
    16ee:	f06f 0505 	mvn.w	r5, #5
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
    16f2:	4628      	mov	r0, r5
    16f4:	b007      	add	sp, #28
    16f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
static inline size_t z_impl_flash_get_write_block_size(struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->driver_api;

	return api->write_block_size;
    16fa:	6883      	ldr	r3, [r0, #8]
	fs->write_block_size = flash_get_write_block_size(fs->flash_device);
    16fc:	7d1b      	ldrb	r3, [r3, #20]
	if (fs->write_block_size > NVS_BLOCK_SIZE) {
    16fe:	2b20      	cmp	r3, #32
	fs->write_block_size = flash_get_write_block_size(fs->flash_device);
    1700:	7423      	strb	r3, [r4, #16]
	if (fs->write_block_size > NVS_BLOCK_SIZE) {
    1702:	d906      	bls.n	1712 <nvs_init+0x4a>
		LOG_ERR("Unsupported write block size");
    1704:	2145      	movs	r1, #69	; 0x45
    1706:	4879      	ldr	r0, [pc, #484]	; (18ec <nvs_init+0x224>)
		LOG_ERR("Configuration error - sector count");
    1708:	f010 fc1e 	bl	11f48 <printk>
		return -EINVAL;
    170c:	f06f 0515 	mvn.w	r5, #21
    1710:	e7ef      	b.n	16f2 <nvs_init+0x2a>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
    1712:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    1714:	6821      	ldr	r1, [r4, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
    1716:	aa03      	add	r2, sp, #12
    1718:	f014 f94b 	bl	159b2 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
    171c:	b110      	cbz	r0, 1724 <nvs_init+0x5c>
		LOG_ERR("Unable to get page info");
    171e:	2145      	movs	r1, #69	; 0x45
    1720:	4873      	ldr	r0, [pc, #460]	; (18f0 <nvs_init+0x228>)
    1722:	e7f1      	b.n	1708 <nvs_init+0x40>
	if (!fs->sector_size || fs->sector_size % info.size) {
    1724:	89a3      	ldrh	r3, [r4, #12]
    1726:	b12b      	cbz	r3, 1734 <nvs_init+0x6c>
    1728:	9a04      	ldr	r2, [sp, #16]
    172a:	fbb3 f5f2 	udiv	r5, r3, r2
    172e:	fb02 3515 	mls	r5, r2, r5, r3
    1732:	b115      	cbz	r5, 173a <nvs_init+0x72>
		LOG_ERR("Invalid sector size");
    1734:	2145      	movs	r1, #69	; 0x45
    1736:	486f      	ldr	r0, [pc, #444]	; (18f4 <nvs_init+0x22c>)
    1738:	e7e6      	b.n	1708 <nvs_init+0x40>
	if (fs->sector_count < 2) {
    173a:	89e3      	ldrh	r3, [r4, #14]
    173c:	2b01      	cmp	r3, #1
    173e:	d802      	bhi.n	1746 <nvs_init+0x7e>
		LOG_ERR("Configuration error - sector count");
    1740:	2145      	movs	r1, #69	; 0x45
    1742:	486d      	ldr	r0, [pc, #436]	; (18f8 <nvs_init+0x230>)
    1744:	e7e0      	b.n	1708 <nvs_init+0x40>
	u32_t addr = 0U;
    1746:	9500      	str	r5, [sp, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    1748:	f04f 32ff 	mov.w	r2, #4294967295
    174c:	f04f 33ff 	mov.w	r3, #4294967295
    1750:	4630      	mov	r0, r6
    1752:	f00d fd21 	bl	f198 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    1756:	2108      	movs	r1, #8
    1758:	7c20      	ldrb	r0, [r4, #16]
    175a:	f010 fee4 	bl	12526 <nvs_al_size.isra.0>
	u16_t i, closed_sectors = 0;
    175e:	46a9      	mov	r9, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    1760:	4607      	mov	r7, r0
	for (i = 0; i < fs->sector_count; i++) {
    1762:	89e3      	ldrh	r3, [r4, #14]
    1764:	fa1f f885 	uxth.w	r8, r5
    1768:	4543      	cmp	r3, r8
    176a:	d863      	bhi.n	1834 <nvs_init+0x16c>
	if (closed_sectors == fs->sector_count) {
    176c:	89e3      	ldrh	r3, [r4, #14]
    176e:	454b      	cmp	r3, r9
    1770:	f000 809f 	beq.w	18b2 <nvs_init+0x1ea>
	if (i == fs->sector_count) {
    1774:	4598      	cmp	r8, r3
    1776:	d10a      	bne.n	178e <nvs_init+0xc6>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, 0xff,
    1778:	9900      	ldr	r1, [sp, #0]
    177a:	2208      	movs	r2, #8
    177c:	4620      	mov	r0, r4
    177e:	1bc9      	subs	r1, r1, r7
    1780:	f010 fee6 	bl	12550 <nvs_flash_cmp_const.constprop.0>
		if (!rc) {
    1784:	b918      	cbnz	r0, 178e <nvs_init+0xc6>
			nvs_sector_advance(fs, &addr);
    1786:	4669      	mov	r1, sp
    1788:	89e0      	ldrh	r0, [r4, #14]
    178a:	f010 fed6 	bl	1253a <nvs_sector_advance.isra.0>
	fs->ate_wra = addr - ate_size;
    178e:	9b00      	ldr	r3, [sp, #0]
    1790:	1bda      	subs	r2, r3, r7
    1792:	6062      	str	r2, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
    1794:	4a59      	ldr	r2, [pc, #356]	; (18fc <nvs_init+0x234>)
			fs->data_wra = addr & ADDR_SECT_MASK;
    1796:	4690      	mov	r8, r2
	fs->data_wra = addr & ADDR_SECT_MASK;
    1798:	4013      	ands	r3, r2
    179a:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
    179c:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    17a0:	4299      	cmp	r1, r3
    17a2:	d30e      	bcc.n	17c2 <nvs_init+0xfa>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    17a4:	2308      	movs	r3, #8
    17a6:	4620      	mov	r0, r4
    17a8:	aa01      	add	r2, sp, #4
    17aa:	f010 fe70 	bl	1248e <nvs_flash_rd>
		if (rc) {
    17ae:	4605      	mov	r5, r0
    17b0:	bb18      	cbnz	r0, 17fa <nvs_init+0x132>
    17b2:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
    17b4:	f813 2b01 	ldrb.w	r2, [r3], #1
    17b8:	2aff      	cmp	r2, #255	; 0xff
    17ba:	d17d      	bne.n	18b8 <nvs_init+0x1f0>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    17bc:	3501      	adds	r5, #1
    17be:	2d08      	cmp	r5, #8
    17c0:	d1f8      	bne.n	17b4 <nvs_init+0xec>
	while (fs->ate_wra > fs->data_wra) {
    17c2:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
    17c6:	428a      	cmp	r2, r1
    17c8:	d906      	bls.n	17d8 <nvs_init+0x110>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, 0xff, empty_len);
    17ca:	4620      	mov	r0, r4
    17cc:	1a52      	subs	r2, r2, r1
    17ce:	f010 febf 	bl	12550 <nvs_flash_cmp_const.constprop.0>
		if (rc < 0) {
    17d2:	1e05      	subs	r5, r0, #0
    17d4:	db11      	blt.n	17fa <nvs_init+0x132>
		if (!rc) {
    17d6:	d14f      	bne.n	1878 <nvs_init+0x1b0>
	addr = fs->ate_wra & ADDR_SECT_MASK;
    17d8:	6863      	ldr	r3, [r4, #4]
    17da:	f8df 8120 	ldr.w	r8, [pc, #288]	; 18fc <nvs_init+0x234>
	nvs_sector_advance(fs, &addr);
    17de:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
    17e0:	ea03 0308 	and.w	r3, r3, r8
	nvs_sector_advance(fs, &addr);
    17e4:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
    17e6:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
    17e8:	f010 fea7 	bl	1253a <nvs_sector_advance.isra.0>
	rc = nvs_flash_cmp_const(fs, addr, 0xff, fs->sector_size);
    17ec:	4620      	mov	r0, r4
    17ee:	89a2      	ldrh	r2, [r4, #12]
    17f0:	9900      	ldr	r1, [sp, #0]
    17f2:	f010 fead 	bl	12550 <nvs_flash_cmp_const.constprop.0>
	if (rc < 0) {
    17f6:	1e05      	subs	r5, r0, #0
    17f8:	da43      	bge.n	1882 <nvs_init+0x1ba>
	return z_impl_k_mutex_unlock(mutex);
    17fa:	4630      	mov	r0, r6
    17fc:	f00d fdb0 	bl	f360 <z_impl_k_mutex_unlock>
	if (rc) {
    1800:	2d00      	cmp	r5, #0
    1802:	f47f af76 	bne.w	16f2 <nvs_init+0x2a>
	fs->ready = true;
    1806:	2301      	movs	r3, #1
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    1808:	89e2      	ldrh	r2, [r4, #14]
	fs->ready = true;
    180a:	7463      	strb	r3, [r4, #17]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    180c:	2149      	movs	r1, #73	; 0x49
    180e:	89a3      	ldrh	r3, [r4, #12]
    1810:	483b      	ldr	r0, [pc, #236]	; (1900 <nvs_init+0x238>)
    1812:	f010 fb99 	bl	11f48 <printk>
	LOG_INF("alloc wra: %d, %x",
    1816:	6862      	ldr	r2, [r4, #4]
    1818:	2149      	movs	r1, #73	; 0x49
    181a:	b293      	uxth	r3, r2
    181c:	4839      	ldr	r0, [pc, #228]	; (1904 <nvs_init+0x23c>)
    181e:	0c12      	lsrs	r2, r2, #16
    1820:	f010 fb92 	bl	11f48 <printk>
	LOG_INF("data wra: %d, %x",
    1824:	68a2      	ldr	r2, [r4, #8]
    1826:	2149      	movs	r1, #73	; 0x49
    1828:	b293      	uxth	r3, r2
    182a:	4837      	ldr	r0, [pc, #220]	; (1908 <nvs_init+0x240>)
    182c:	0c12      	lsrs	r2, r2, #16
    182e:	f010 fb8b 	bl	11f48 <printk>
	return 0;
    1832:	e75e      	b.n	16f2 <nvs_init+0x2a>
		       (u16_t)(fs->sector_size - ate_size);
    1834:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
    1836:	042b      	lsls	r3, r5, #16
		       (u16_t)(fs->sector_size - ate_size);
    1838:	1bc9      	subs	r1, r1, r7
		addr = (i << ADDR_SECT_SHIFT) +
    183a:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, 0xff,
    183e:	2208      	movs	r2, #8
    1840:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
    1842:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, 0xff,
    1844:	f010 fe84 	bl	12550 <nvs_flash_cmp_const.constprop.0>
		if (rc) {
    1848:	b170      	cbz	r0, 1868 <nvs_init+0x1a0>
			nvs_sector_advance(fs, &addr);
    184a:	4669      	mov	r1, sp
    184c:	89e0      	ldrh	r0, [r4, #14]
    184e:	f010 fe74 	bl	1253a <nvs_sector_advance.isra.0>
			closed_sectors++;
    1852:	f109 0901 	add.w	r9, r9, #1
			rc = nvs_flash_cmp_const(fs, addr, 0xff,
    1856:	2208      	movs	r2, #8
    1858:	4620      	mov	r0, r4
    185a:	9900      	ldr	r1, [sp, #0]
			closed_sectors++;
    185c:	fa1f f989 	uxth.w	r9, r9
			rc = nvs_flash_cmp_const(fs, addr, 0xff,
    1860:	f010 fe76 	bl	12550 <nvs_flash_cmp_const.constprop.0>
			if (!rc) {
    1864:	2800      	cmp	r0, #0
    1866:	d081      	beq.n	176c <nvs_init+0xa4>
	for (i = 0; i < fs->sector_count; i++) {
    1868:	3501      	adds	r5, #1
    186a:	e77a      	b.n	1762 <nvs_init+0x9a>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    186c:	f1b9 0f00 	cmp.w	r9, #0
    1870:	d037      	beq.n	18e2 <nvs_init+0x21a>
				rc = -ESPIPE;
    1872:	f06f 051c 	mvn.w	r5, #28
    1876:	e7c0      	b.n	17fa <nvs_init+0x132>
		fs->data_wra += fs->write_block_size;
    1878:	68a3      	ldr	r3, [r4, #8]
    187a:	7c22      	ldrb	r2, [r4, #16]
    187c:	4413      	add	r3, r2
    187e:	60a3      	str	r3, [r4, #8]
    1880:	e79f      	b.n	17c2 <nvs_init+0xfa>
	if (rc) {
    1882:	d0ba      	beq.n	17fa <nvs_init+0x132>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    1884:	4620      	mov	r0, r4
    1886:	6861      	ldr	r1, [r4, #4]
    1888:	f010 fe86 	bl	12598 <nvs_flash_erase_sector>
		if (rc) {
    188c:	4605      	mov	r5, r0
    188e:	2800      	cmp	r0, #0
    1890:	d1b3      	bne.n	17fa <nvs_init+0x132>
		fs->ate_wra &= ADDR_SECT_MASK;
    1892:	6863      	ldr	r3, [r4, #4]
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    1894:	89a0      	ldrh	r0, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
    1896:	ea03 0308 	and.w	r3, r3, r8
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    189a:	4403      	add	r3, r0
    189c:	eba3 0047 	sub.w	r0, r3, r7, lsl #1
    18a0:	6060      	str	r0, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    18a2:	ea00 0008 	and.w	r0, r0, r8
    18a6:	60a0      	str	r0, [r4, #8]
		rc = nvs_gc(fs);
    18a8:	4620      	mov	r0, r4
    18aa:	f7ff fe6b 	bl	1584 <nvs_gc>
    18ae:	4605      	mov	r5, r0
end:
    18b0:	e7a3      	b.n	17fa <nvs_init+0x132>
		rc = -EDEADLK;
    18b2:	f06f 0520 	mvn.w	r5, #32
    18b6:	e7a0      	b.n	17fa <nvs_init+0x132>
		if (!nvs_ate_crc8_check(&last_ate)) {
    18b8:	a801      	add	r0, sp, #4
    18ba:	f010 fe1f 	bl	124fc <nvs_ate_crc8_check>
    18be:	6865      	ldr	r5, [r4, #4]
    18c0:	b978      	cbnz	r0, 18e2 <nvs_init+0x21a>
			fs->data_wra = addr & ADDR_SECT_MASK;
    18c2:	9800      	ldr	r0, [sp, #0]
			fs->data_wra += last_ate.offset;
    18c4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    18c8:	f8bd 9008 	ldrh.w	r9, [sp, #8]
			fs->data_wra = addr & ADDR_SECT_MASK;
    18cc:	ea00 0008 	and.w	r0, r0, r8
			fs->data_wra += last_ate.offset;
    18d0:	4402      	add	r2, r0
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    18d2:	4649      	mov	r1, r9
    18d4:	7c20      	ldrb	r0, [r4, #16]
    18d6:	f010 fe26 	bl	12526 <nvs_al_size.isra.0>
    18da:	4410      	add	r0, r2
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    18dc:	42a8      	cmp	r0, r5
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    18de:	60a0      	str	r0, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    18e0:	d0c4      	beq.n	186c <nvs_init+0x1a4>
		fs->ate_wra -= ate_size;
    18e2:	1bed      	subs	r5, r5, r7
    18e4:	6065      	str	r5, [r4, #4]
    18e6:	e759      	b.n	179c <nvs_init+0xd4>
    18e8:	000179f2 	.word	0x000179f2
    18ec:	00017a13 	.word	0x00017a13
    18f0:	00017a35 	.word	0x00017a35
    18f4:	00017a52 	.word	0x00017a52
    18f8:	00017a6b 	.word	0x00017a6b
    18fc:	ffff0000 	.word	0xffff0000
    1900:	00017a93 	.word	0x00017a93
    1904:	00017aaf 	.word	0x00017aaf
    1908:	00017ac6 	.word	0x00017ac6

0000190c <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, u16_t id, const void *data, size_t len)
{
    190c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1910:	461e      	mov	r6, r3
	struct nvs_ate wlk_ate;
	u32_t wlk_addr, rd_addr;
	u16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
    1912:	7c43      	ldrb	r3, [r0, #17]
{
    1914:	4604      	mov	r4, r0
    1916:	4689      	mov	r9, r1
    1918:	4690      	mov	r8, r2
    191a:	b089      	sub	sp, #36	; 0x24
	if (!fs->ready) {
    191c:	b94b      	cbnz	r3, 1932 <nvs_write+0x26>
		LOG_ERR("NVS not initialized");
    191e:	2145      	movs	r1, #69	; 0x45
    1920:	4864      	ldr	r0, [pc, #400]	; (1ab4 <nvs_write+0x1a8>)
    1922:	f010 fb11 	bl	11f48 <printk>
		return -EACCES;
    1926:	f06f 050c 	mvn.w	r5, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
    192a:	4628      	mov	r0, r5
    192c:	b009      	add	sp, #36	; 0x24
    192e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    1932:	f890 b010 	ldrb.w	fp, [r0, #16]
    1936:	2108      	movs	r1, #8
    1938:	4658      	mov	r0, fp
    193a:	f010 fdf4 	bl	12526 <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 3 * ate_size)) ||
    193e:	89a3      	ldrh	r3, [r4, #12]
    1940:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    1944:	1a9b      	subs	r3, r3, r2
    1946:	42b3      	cmp	r3, r6
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    1948:	4682      	mov	sl, r0
	if ((len > (fs->sector_size - 3 * ate_size)) ||
    194a:	f0c0 80ae 	bcc.w	1aaa <nvs_write+0x19e>
    194e:	b11e      	cbz	r6, 1958 <nvs_write+0x4c>
	    ((len > 0) && (data == NULL))) {
    1950:	f1b8 0f00 	cmp.w	r8, #0
    1954:	f000 80a9 	beq.w	1aaa <nvs_write+0x19e>
	wlk_addr = fs->ate_wra;
    1958:	6863      	ldr	r3, [r4, #4]
    195a:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    195c:	4620      	mov	r0, r4
    195e:	aa04      	add	r2, sp, #16
    1960:	a903      	add	r1, sp, #12
		rd_addr = wlk_addr;
    1962:	9f03      	ldr	r7, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    1964:	f7ff fd9c 	bl	14a0 <nvs_prev_ate>
		if (rc) {
    1968:	4605      	mov	r5, r0
    196a:	2800      	cmp	r0, #0
    196c:	d1dd      	bne.n	192a <nvs_write+0x1e>
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
    196e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    1972:	454b      	cmp	r3, r9
    1974:	d005      	beq.n	1982 <nvs_write+0x76>
		if (wlk_addr == fs->ate_wra) {
    1976:	6862      	ldr	r2, [r4, #4]
    1978:	9b03      	ldr	r3, [sp, #12]
    197a:	429a      	cmp	r2, r3
    197c:	d1ee      	bne.n	195c <nvs_write+0x50>
		if (len == 0) {
    197e:	b9d6      	cbnz	r6, 19b6 <nvs_write+0xaa>
    1980:	e7d3      	b.n	192a <nvs_write+0x1e>
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
    1982:	a804      	add	r0, sp, #16
    1984:	f010 fdba 	bl	124fc <nvs_ate_crc8_check>
    1988:	2800      	cmp	r0, #0
    198a:	d1f4      	bne.n	1976 <nvs_write+0x6a>
		if (len == 0) {
    198c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    1990:	b17e      	cbz	r6, 19b2 <nvs_write+0xa6>
		} else if (len == wlk_ate.len) {
    1992:	42b3      	cmp	r3, r6
    1994:	d10f      	bne.n	19b6 <nvs_write+0xaa>
		rd_addr += wlk_ate.offset;
    1996:	f8bd 0012 	ldrh.w	r0, [sp, #18]
		rd_addr &= ADDR_SECT_MASK;
    199a:	0c39      	lsrs	r1, r7, #16
    199c:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
    199e:	4401      	add	r1, r0
    19a0:	4633      	mov	r3, r6
    19a2:	4642      	mov	r2, r8
    19a4:	4620      	mov	r0, r4
    19a6:	f010 fd80 	bl	124aa <nvs_flash_block_cmp>
			if (rc <= 0) {
    19aa:	2800      	cmp	r0, #0
    19ac:	dc03      	bgt.n	19b6 <nvs_write+0xaa>
    19ae:	4605      	mov	r5, r0
    19b0:	e7bb      	b.n	192a <nvs_write+0x1e>
			if (wlk_ate.len == 0U) {
    19b2:	2b00      	cmp	r3, #0
    19b4:	d0b9      	beq.n	192a <nvs_write+0x1e>
	data_size = nvs_al_size(fs, len);
    19b6:	4631      	mov	r1, r6
    19b8:	4658      	mov	r0, fp
    19ba:	f010 fdb4 	bl	12526 <nvs_al_size.isra.0>
	if (data_size) {
    19be:	4607      	mov	r7, r0
    19c0:	2800      	cmp	r0, #0
    19c2:	d13f      	bne.n	1a44 <nvs_write+0x138>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
    19c4:	f104 0a14 	add.w	sl, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
    19c8:	f04f 33ff 	mov.w	r3, #4294967295
    19cc:	f04f 32ff 	mov.w	r2, #4294967295
    19d0:	4650      	mov	r0, sl
    19d2:	f00d fbe1 	bl	f198 <z_impl_k_mutex_lock>
	gc_count = 0;
    19d6:	2300      	movs	r3, #0
	fs->ate_wra &= ADDR_SECT_MASK;
    19d8:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 1ab8 <nvs_write+0x1ac>
		if (gc_count == fs->sector_count) {
    19dc:	89e2      	ldrh	r2, [r4, #14]
    19de:	4293      	cmp	r3, r2
    19e0:	d060      	beq.n	1aa4 <nvs_write+0x198>
		if (fs->ate_wra >= fs->data_wra + required_space) {
    19e2:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
    19e6:	1878      	adds	r0, r7, r1
    19e8:	4282      	cmp	r2, r0
    19ea:	d32e      	bcc.n	1a4a <nvs_write+0x13e>
	entry.part = 0xff;
    19ec:	23ff      	movs	r3, #255	; 0xff
	nvs_ate_crc8_update(&entry);
    19ee:	a806      	add	r0, sp, #24
	entry.id = id;
    19f0:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.offset = (u16_t)(fs->data_wra & ADDR_OFFS_MASK);
    19f4:	f8ad 101a 	strh.w	r1, [sp, #26]
	entry.len = (u16_t)len;
    19f8:	f8ad 601c 	strh.w	r6, [sp, #28]
	entry.part = 0xff;
    19fc:	f88d 301e 	strb.w	r3, [sp, #30]
	nvs_ate_crc8_update(&entry);
    1a00:	f010 fd88 	bl	12514 <nvs_ate_crc8_update>
	if (!len) {
    1a04:	b136      	cbz	r6, 1a14 <nvs_write+0x108>
    1a06:	4633      	mov	r3, r6
    1a08:	4642      	mov	r2, r8
    1a0a:	4620      	mov	r0, r4
    1a0c:	68a1      	ldr	r1, [r4, #8]
    1a0e:	f010 fde9 	bl	125e4 <nvs_flash_al_wrt.part.0>
    1a12:	4605      	mov	r5, r0
	fs->data_wra += nvs_al_size(fs, len);
    1a14:	4631      	mov	r1, r6
    1a16:	7c20      	ldrb	r0, [r4, #16]
    1a18:	f010 fd85 	bl	12526 <nvs_al_size.isra.0>
    1a1c:	68a3      	ldr	r3, [r4, #8]
    1a1e:	4403      	add	r3, r0
    1a20:	60a3      	str	r3, [r4, #8]
	if (rc) {
    1a22:	2d00      	cmp	r5, #0
    1a24:	d144      	bne.n	1ab0 <nvs_write+0x1a4>
	rc = nvs_flash_ate_wrt(fs, &entry);
    1a26:	4620      	mov	r0, r4
    1a28:	a906      	add	r1, sp, #24
    1a2a:	f010 fe1f 	bl	1266c <nvs_flash_ate_wrt>
	if (rc) {
    1a2e:	4605      	mov	r5, r0
    1a30:	2800      	cmp	r0, #0
    1a32:	d13d      	bne.n	1ab0 <nvs_write+0x1a4>
	rc = len;
    1a34:	4632      	mov	r2, r6
    1a36:	9201      	str	r2, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
    1a38:	4650      	mov	r0, sl
    1a3a:	f00d fc91 	bl	f360 <z_impl_k_mutex_unlock>
	return rc;
    1a3e:	9a01      	ldr	r2, [sp, #4]
    1a40:	4615      	mov	r5, r2
    1a42:	e772      	b.n	192a <nvs_write+0x1e>
		required_space = data_size + ate_size;
    1a44:	4457      	add	r7, sl
    1a46:	b2bf      	uxth	r7, r7
    1a48:	e7bc      	b.n	19c4 <nvs_write+0xb8>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    1a4a:	2108      	movs	r1, #8
    1a4c:	7c20      	ldrb	r0, [r4, #16]
    1a4e:	9301      	str	r3, [sp, #4]
    1a50:	f010 fd69 	bl	12526 <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
    1a54:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1a58:	f8ad 1018 	strh.w	r1, [sp, #24]
	close_ate.len = 0U;
    1a5c:	2100      	movs	r1, #0
    1a5e:	f8ad 101c 	strh.w	r1, [sp, #28]
	close_ate.offset = (u16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
    1a62:	1811      	adds	r1, r2, r0
    1a64:	f8ad 101a 	strh.w	r1, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
    1a68:	89a1      	ldrh	r1, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
    1a6a:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
    1a6e:	440a      	add	r2, r1
    1a70:	1a10      	subs	r0, r2, r0
    1a72:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
    1a74:	a806      	add	r0, sp, #24
    1a76:	f010 fd4d 	bl	12514 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
    1a7a:	a906      	add	r1, sp, #24
    1a7c:	4620      	mov	r0, r4
    1a7e:	f010 fdf5 	bl	1266c <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
    1a82:	89e0      	ldrh	r0, [r4, #14]
    1a84:	1d21      	adds	r1, r4, #4
    1a86:	f010 fd58 	bl	1253a <nvs_sector_advance.isra.0>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    1a8a:	6862      	ldr	r2, [r4, #4]
		rc = nvs_gc(fs);
    1a8c:	4620      	mov	r0, r4
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    1a8e:	ea02 020b 	and.w	r2, r2, fp
    1a92:	60a2      	str	r2, [r4, #8]
		rc = nvs_gc(fs);
    1a94:	f7ff fd76 	bl	1584 <nvs_gc>
		if (rc) {
    1a98:	4602      	mov	r2, r0
    1a9a:	2800      	cmp	r0, #0
    1a9c:	d1cb      	bne.n	1a36 <nvs_write+0x12a>
		gc_count++;
    1a9e:	9b01      	ldr	r3, [sp, #4]
    1aa0:	3301      	adds	r3, #1
		if (gc_count == fs->sector_count) {
    1aa2:	e79b      	b.n	19dc <nvs_write+0xd0>
			rc = -ENOSPC;
    1aa4:	f06f 021b 	mvn.w	r2, #27
    1aa8:	e7c5      	b.n	1a36 <nvs_write+0x12a>
		return -EINVAL;
    1aaa:	f06f 0515 	mvn.w	r5, #21
    1aae:	e73c      	b.n	192a <nvs_write+0x1e>
			if (rc) {
    1ab0:	462a      	mov	r2, r5
    1ab2:	e7c0      	b.n	1a36 <nvs_write+0x12a>
    1ab4:	000179d9 	.word	0x000179d9
    1ab8:	ffff0000 	.word	0xffff0000

00001abc <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, u16_t id, void *data, size_t len,
		      u16_t cnt)
{
    1abc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    1ac0:	461e      	mov	r6, r3
	u32_t wlk_addr, rd_addr;
	u16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
    1ac2:	7c43      	ldrb	r3, [r0, #17]
{
    1ac4:	4604      	mov	r4, r0
    1ac6:	460f      	mov	r7, r1
    1ac8:	4690      	mov	r8, r2
    1aca:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
	if (!fs->ready) {
    1ace:	b943      	cbnz	r3, 1ae2 <nvs_read_hist+0x26>
		LOG_ERR("NVS not initialized");
    1ad0:	4828      	ldr	r0, [pc, #160]	; (1b74 <nvs_read_hist+0xb8>)
    1ad2:	2145      	movs	r1, #69	; 0x45
    1ad4:	f010 fa38 	bl	11f48 <printk>
		return -EACCES;
    1ad8:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
    1adc:	b004      	add	sp, #16
    1ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    1ae2:	2108      	movs	r1, #8
    1ae4:	7c00      	ldrb	r0, [r0, #16]
    1ae6:	f010 fd1e 	bl	12526 <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
    1aea:	89a3      	ldrh	r3, [r4, #12]
    1aec:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    1af0:	42b3      	cmp	r3, r6
    1af2:	d33b      	bcc.n	1b6c <nvs_read_hist+0xb0>
	cnt_his = 0U;
    1af4:	f04f 0a00 	mov.w	sl, #0
	wlk_addr = fs->ate_wra;
    1af8:	6863      	ldr	r3, [r4, #4]
    1afa:	9301      	str	r3, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    1afc:	4620      	mov	r0, r4
    1afe:	aa02      	add	r2, sp, #8
    1b00:	a901      	add	r1, sp, #4
		rd_addr = wlk_addr;
    1b02:	9d01      	ldr	r5, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    1b04:	f7ff fccc 	bl	14a0 <nvs_prev_ate>
		if (rc) {
    1b08:	2800      	cmp	r0, #0
    1b0a:	d1e7      	bne.n	1adc <nvs_read_hist+0x20>
		if ((wlk_ate.id == id) &&  (!nvs_ate_crc8_check(&wlk_ate))) {
    1b0c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    1b10:	42bb      	cmp	r3, r7
    1b12:	d107      	bne.n	1b24 <nvs_read_hist+0x68>
    1b14:	a802      	add	r0, sp, #8
    1b16:	f010 fcf1 	bl	124fc <nvs_ate_crc8_check>
    1b1a:	b918      	cbnz	r0, 1b24 <nvs_read_hist+0x68>
			cnt_his++;
    1b1c:	f10a 0a01 	add.w	sl, sl, #1
    1b20:	fa1f fa8a 	uxth.w	sl, sl
		if (wlk_addr == fs->ate_wra) {
    1b24:	6862      	ldr	r2, [r4, #4]
    1b26:	9b01      	ldr	r3, [sp, #4]
    1b28:	429a      	cmp	r2, r3
    1b2a:	d018      	beq.n	1b5e <nvs_read_hist+0xa2>
	while (cnt_his <= cnt) {
    1b2c:	45ca      	cmp	sl, r9
    1b2e:	d9e5      	bls.n	1afc <nvs_read_hist+0x40>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    1b30:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    1b34:	b1bb      	cbz	r3, 1b66 <nvs_read_hist+0xaa>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    1b36:	45ca      	cmp	sl, r9
    1b38:	d315      	bcc.n	1b66 <nvs_read_hist+0xaa>
	rd_addr += wlk_ate.offset;
    1b3a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
    1b3e:	0c2d      	lsrs	r5, r5, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    1b40:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
    1b42:	ea4f 4505 	mov.w	r5, r5, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    1b46:	bf28      	it	cs
    1b48:	4633      	movcs	r3, r6
    1b4a:	4642      	mov	r2, r8
    1b4c:	4620      	mov	r0, r4
    1b4e:	4429      	add	r1, r5
    1b50:	f010 fc9d 	bl	1248e <nvs_flash_rd>
	if (rc) {
    1b54:	2800      	cmp	r0, #0
    1b56:	d1c1      	bne.n	1adc <nvs_read_hist+0x20>
	return wlk_ate.len;
    1b58:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    1b5c:	e7be      	b.n	1adc <nvs_read_hist+0x20>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    1b5e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    1b62:	42bb      	cmp	r3, r7
    1b64:	d0e4      	beq.n	1b30 <nvs_read_hist+0x74>
		return -ENOENT;
    1b66:	f06f 0001 	mvn.w	r0, #1
    1b6a:	e7b7      	b.n	1adc <nvs_read_hist+0x20>
		return -EINVAL;
    1b6c:	f06f 0015 	mvn.w	r0, #21
    1b70:	e7b4      	b.n	1adc <nvs_read_hist+0x20>
    1b72:	bf00      	nop
    1b74:	000179d9 	.word	0x000179d9

00001b78 <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    1b78:	4b09      	ldr	r3, [pc, #36]	; (1ba0 <get_flash_area_from_id+0x28>)
{
    1b7a:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
    1b7c:	681d      	ldr	r5, [r3, #0]
		if (flash_map[i].fa_id == idx) {
    1b7e:	4b09      	ldr	r3, [pc, #36]	; (1ba4 <get_flash_area_from_id+0x2c>)
{
    1b80:	4602      	mov	r2, r0
		if (flash_map[i].fa_id == idx) {
    1b82:	681c      	ldr	r4, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
    1b84:	2300      	movs	r3, #0
    1b86:	429d      	cmp	r5, r3
    1b88:	dc01      	bgt.n	1b8e <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
    1b8a:	2000      	movs	r0, #0
}
    1b8c:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
    1b8e:	0119      	lsls	r1, r3, #4
    1b90:	5c61      	ldrb	r1, [r4, r1]
    1b92:	eb04 1003 	add.w	r0, r4, r3, lsl #4
    1b96:	4291      	cmp	r1, r2
    1b98:	d0f8      	beq.n	1b8c <get_flash_area_from_id+0x14>
	for (int i = 0; i < flash_map_entries; i++) {
    1b9a:	3301      	adds	r3, #1
    1b9c:	e7f3      	b.n	1b86 <get_flash_area_from_id+0xe>
    1b9e:	bf00      	nop
    1ba0:	00016db8 	.word	0x00016db8
    1ba4:	2000017c 	.word	0x2000017c

00001ba8 <flash_area_open>:

int flash_area_open(u8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    1ba8:	4b08      	ldr	r3, [pc, #32]	; (1bcc <flash_area_open+0x24>)
{
    1baa:	b510      	push	{r4, lr}
	if (flash_map == NULL) {
    1bac:	681b      	ldr	r3, [r3, #0]
{
    1bae:	460c      	mov	r4, r1
	if (flash_map == NULL) {
    1bb0:	b12b      	cbz	r3, 1bbe <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
    1bb2:	f7ff ffe1 	bl	1b78 <get_flash_area_from_id>
	if (area == NULL) {
    1bb6:	b128      	cbz	r0, 1bc4 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
    1bb8:	6020      	str	r0, [r4, #0]
	return 0;
    1bba:	2000      	movs	r0, #0
}
    1bbc:	bd10      	pop	{r4, pc}
		return -EACCES;
    1bbe:	f06f 000c 	mvn.w	r0, #12
    1bc2:	e7fb      	b.n	1bbc <flash_area_open+0x14>
		return -ENOENT;
    1bc4:	f06f 0001 	mvn.w	r0, #1
    1bc8:	e7f8      	b.n	1bbc <flash_area_open+0x14>
    1bca:	bf00      	nop
    1bcc:	2000017c 	.word	0x2000017c

00001bd0 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, u32_t *cnt, struct flash_sector *ret)
{
    1bd0:	b530      	push	{r4, r5, lr}
    1bd2:	b089      	sub	sp, #36	; 0x24
    1bd4:	460c      	mov	r4, r1
    1bd6:	4615      	mov	r5, r2
	cb_data->area_idx = idx;
    1bd8:	9001      	str	r0, [sp, #4]
	fa = get_flash_area_from_id(idx);
    1bda:	f7ff ffcd 	bl	1b78 <get_flash_area_from_id>
	if (fa == NULL) {
    1bde:	b1b8      	cbz	r0, 1c10 <flash_area_get_sectors+0x40>
	cb_data->area_off = fa->fa_off;
    1be0:	6843      	ldr	r3, [r0, #4]
	cb_data->ret_len = *cnt;
    1be2:	6822      	ldr	r2, [r4, #0]
	cb_data->area_off = fa->fa_off;
    1be4:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    1be6:	6883      	ldr	r3, [r0, #8]
	flash_dev = device_get_binding(fa->fa_dev_name);
    1be8:	68c0      	ldr	r0, [r0, #12]
	cb_data->ret = ret;
    1bea:	e9cd 3503 	strd	r3, r5, [sp, #12]
	cb_data->ret_idx = 0U;
    1bee:	2300      	movs	r3, #0
	cb_data->status = 0;
    1bf0:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    1bf4:	9305      	str	r3, [sp, #20]
    1bf6:	f00c ff07 	bl	ea08 <z_impl_device_get_binding>
	if (flash_dev == NULL) {
    1bfa:	b160      	cbz	r0, 1c16 <flash_area_get_sectors+0x46>
	flash_page_foreach(flash_dev, cb, cb_data);
    1bfc:	4907      	ldr	r1, [pc, #28]	; (1c1c <flash_area_get_sectors+0x4c>)
    1bfe:	aa01      	add	r2, sp, #4
    1c00:	f013 fedb 	bl	159ba <flash_page_foreach>
	if (cb_data->status == 0) {
    1c04:	9807      	ldr	r0, [sp, #28]
    1c06:	b908      	cbnz	r0, 1c0c <flash_area_get_sectors+0x3c>
		*cnt = cb_data->ret_idx;
    1c08:	9b05      	ldr	r3, [sp, #20]
    1c0a:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    1c0c:	b009      	add	sp, #36	; 0x24
    1c0e:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    1c10:	f06f 0015 	mvn.w	r0, #21
    1c14:	e7fa      	b.n	1c0c <flash_area_get_sectors+0x3c>
		return -ENODEV;
    1c16:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    1c1a:	e7f7      	b.n	1c0c <flash_area_get_sectors+0x3c>
    1c1c:	000126a5 	.word	0x000126a5

00001c20 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    1c20:	4b10      	ldr	r3, [pc, #64]	; (1c64 <settings_save_one+0x44>)
{
    1c22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
    1c26:	681c      	ldr	r4, [r3, #0]
{
    1c28:	4605      	mov	r5, r0
    1c2a:	460e      	mov	r6, r1
    1c2c:	4617      	mov	r7, r2
	if (!cs) {
    1c2e:	b1ac      	cbz	r4, 1c5c <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
    1c30:	f04f 32ff 	mov.w	r2, #4294967295
    1c34:	f04f 33ff 	mov.w	r3, #4294967295
    1c38:	480b      	ldr	r0, [pc, #44]	; (1c68 <settings_save_one+0x48>)
    1c3a:	f00d faad 	bl	f198 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    1c3e:	6863      	ldr	r3, [r4, #4]
    1c40:	4632      	mov	r2, r6
    1c42:	f8d3 8008 	ldr.w	r8, [r3, #8]
    1c46:	4629      	mov	r1, r5
    1c48:	463b      	mov	r3, r7
    1c4a:	4620      	mov	r0, r4
    1c4c:	47c0      	blx	r8
    1c4e:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    1c50:	4805      	ldr	r0, [pc, #20]	; (1c68 <settings_save_one+0x48>)
    1c52:	f00d fb85 	bl	f360 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    1c56:	4620      	mov	r0, r4
    1c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    1c5c:	f06f 0401 	mvn.w	r4, #1
    1c60:	e7f9      	b.n	1c56 <settings_save_one+0x36>
    1c62:	bf00      	nop
    1c64:	20000854 	.word	0x20000854
    1c68:	20000484 	.word	0x20000484

00001c6c <settings_src_register>:
	return node->next;
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
    1c6c:	2300      	movs	r3, #0
    1c6e:	6003      	str	r3, [r0, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    1c70:	4b04      	ldr	r3, [pc, #16]	; (1c84 <settings_src_register+0x18>)
    1c72:	685a      	ldr	r2, [r3, #4]
    1c74:	b912      	cbnz	r2, 1c7c <settings_src_register+0x10>
	list->head = node;
    1c76:	e9c3 0000 	strd	r0, r0, [r3]
}
    1c7a:	4770      	bx	lr
	parent->next = child;
    1c7c:	6010      	str	r0, [r2, #0]
	list->tail = node;
    1c7e:	6058      	str	r0, [r3, #4]
}
    1c80:	4770      	bx	lr
    1c82:	bf00      	nop
    1c84:	2000084c 	.word	0x2000084c

00001c88 <settings_dst_register>:
	settings_save_dst = cs;
    1c88:	4b01      	ldr	r3, [pc, #4]	; (1c90 <settings_dst_register+0x8>)
    1c8a:	6018      	str	r0, [r3, #0]
}
    1c8c:	4770      	bx	lr
    1c8e:	bf00      	nop
    1c90:	20000854 	.word	0x20000854

00001c94 <settings_load_subtree>:
	const struct settings_load_arg arg = {
    1c94:	2300      	movs	r3, #0
{
    1c96:	b530      	push	{r4, r5, lr}
    1c98:	b085      	sub	sp, #20
    1c9a:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
    1c9c:	e9cd 3302 	strd	r3, r3, [sp, #8]
    1ca0:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    1ca2:	f04f 33ff 	mov.w	r3, #4294967295
    1ca6:	f04f 32ff 	mov.w	r2, #4294967295
    1caa:	480b      	ldr	r0, [pc, #44]	; (1cd8 <settings_load_subtree+0x44>)
    1cac:	f00d fa74 	bl	f198 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    1cb0:	4b0a      	ldr	r3, [pc, #40]	; (1cdc <settings_load_subtree+0x48>)
    1cb2:	681c      	ldr	r4, [r3, #0]
    1cb4:	b134      	cbz	r4, 1cc4 <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
    1cb6:	6863      	ldr	r3, [r4, #4]
    1cb8:	4620      	mov	r0, r4
    1cba:	681b      	ldr	r3, [r3, #0]
    1cbc:	a901      	add	r1, sp, #4
    1cbe:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1cc0:	6824      	ldr	r4, [r4, #0]
	return node->next;
    1cc2:	e7f7      	b.n	1cb4 <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
    1cc4:	4628      	mov	r0, r5
    1cc6:	f000 f8dd 	bl	1e84 <settings_commit_subtree>
    1cca:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    1ccc:	4802      	ldr	r0, [pc, #8]	; (1cd8 <settings_load_subtree+0x44>)
    1cce:	f00d fb47 	bl	f360 <z_impl_k_mutex_unlock>
}
    1cd2:	4620      	mov	r0, r4
    1cd4:	b005      	add	sp, #20
    1cd6:	bd30      	pop	{r4, r5, pc}
    1cd8:	20000484 	.word	0x20000484
    1cdc:	2000084c 	.word	0x2000084c

00001ce0 <settings_load_subtree_direct>:
{
    1ce0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
    1ce2:	e9cd 0101 	strd	r0, r1, [sp, #4]
    1ce6:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
    1ce8:	f04f 33ff 	mov.w	r3, #4294967295
    1cec:	f04f 32ff 	mov.w	r2, #4294967295
    1cf0:	4809      	ldr	r0, [pc, #36]	; (1d18 <settings_load_subtree_direct+0x38>)
    1cf2:	f00d fa51 	bl	f198 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    1cf6:	4b09      	ldr	r3, [pc, #36]	; (1d1c <settings_load_subtree_direct+0x3c>)
    1cf8:	681c      	ldr	r4, [r3, #0]
    1cfa:	b134      	cbz	r4, 1d0a <settings_load_subtree_direct+0x2a>
		cs->cs_itf->csi_load(cs, &arg);
    1cfc:	6863      	ldr	r3, [r4, #4]
    1cfe:	4620      	mov	r0, r4
    1d00:	681b      	ldr	r3, [r3, #0]
    1d02:	a901      	add	r1, sp, #4
    1d04:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1d06:	6824      	ldr	r4, [r4, #0]
	return node->next;
    1d08:	e7f7      	b.n	1cfa <settings_load_subtree_direct+0x1a>
	return z_impl_k_mutex_unlock(mutex);
    1d0a:	4803      	ldr	r0, [pc, #12]	; (1d18 <settings_load_subtree_direct+0x38>)
    1d0c:	f00d fb28 	bl	f360 <z_impl_k_mutex_unlock>
}
    1d10:	2000      	movs	r0, #0
    1d12:	b004      	add	sp, #16
    1d14:	bd10      	pop	{r4, pc}
    1d16:	bf00      	nop
    1d18:	20000484 	.word	0x20000484
    1d1c:	2000084c 	.word	0x2000084c

00001d20 <settings_store_init>:
	list->head = NULL;
    1d20:	2200      	movs	r2, #0
    1d22:	4b02      	ldr	r3, [pc, #8]	; (1d2c <settings_store_init+0xc>)
	list->tail = NULL;
    1d24:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    1d28:	4770      	bx	lr
    1d2a:	bf00      	nop
    1d2c:	2000084c 	.word	0x2000084c

00001d30 <settings_init>:
	list->head = NULL;
    1d30:	2200      	movs	r2, #0
    1d32:	4b02      	ldr	r3, [pc, #8]	; (1d3c <settings_init+0xc>)
	list->tail = NULL;
    1d34:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
    1d38:	f7ff bff2 	b.w	1d20 <settings_store_init>
    1d3c:	20000858 	.word	0x20000858

00001d40 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
    1d40:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    1d44:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
    1d46:	460e      	mov	r6, r1
    1d48:	b109      	cbz	r1, 1d4e <settings_parse_and_lookup+0xe>
		*next = NULL;
    1d4a:	2300      	movs	r3, #0
    1d4c:	600b      	str	r3, [r1, #0]
	}

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    1d4e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 1e00 <settings_parse_and_lookup+0xc0>
    1d52:	2500      	movs	r5, #0
    1d54:	46c2      	mov	sl, r8
    1d56:	4c25      	ldr	r4, [pc, #148]	; (1dec <settings_parse_and_lookup+0xac>)
    1d58:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1e04 <settings_parse_and_lookup+0xc4>
    1d5c:	4544      	cmp	r4, r8
    1d5e:	d90c      	bls.n	1d7a <settings_parse_and_lookup+0x3a>
    1d60:	4923      	ldr	r1, [pc, #140]	; (1df0 <settings_parse_and_lookup+0xb0>)
    1d62:	2394      	movs	r3, #148	; 0x94
    1d64:	464a      	mov	r2, r9
    1d66:	4823      	ldr	r0, [pc, #140]	; (1df4 <settings_parse_and_lookup+0xb4>)
    1d68:	f010 f8ee 	bl	11f48 <printk>
    1d6c:	4822      	ldr	r0, [pc, #136]	; (1df8 <settings_parse_and_lookup+0xb8>)
    1d6e:	f010 f8eb 	bl	11f48 <printk>
    1d72:	2194      	movs	r1, #148	; 0x94
    1d74:	4648      	mov	r0, r9
    1d76:	f010 fb7d 	bl	12474 <assert_post_action>
    1d7a:	4554      	cmp	r4, sl
    1d7c:	d308      	bcc.n	1d90 <settings_parse_and_lookup+0x50>
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    1d7e:	4b1f      	ldr	r3, [pc, #124]	; (1dfc <settings_parse_and_lookup+0xbc>)
    1d80:	681c      	ldr	r4, [r3, #0]
    1d82:	b10c      	cbz	r4, 1d88 <settings_parse_and_lookup+0x48>
    1d84:	3c14      	subs	r4, #20
    1d86:	b9c4      	cbnz	r4, 1dba <settings_parse_and_lookup+0x7a>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
    1d88:	4628      	mov	r0, r5
    1d8a:	b002      	add	sp, #8
    1d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    1d90:	4638      	mov	r0, r7
    1d92:	6821      	ldr	r1, [r4, #0]
    1d94:	aa01      	add	r2, sp, #4
    1d96:	f010 fcaa 	bl	126ee <settings_name_steq>
    1d9a:	b160      	cbz	r0, 1db6 <settings_parse_and_lookup+0x76>
		if (!bestmatch) {
    1d9c:	b925      	cbnz	r5, 1da8 <settings_parse_and_lookup+0x68>
			if (next) {
    1d9e:	b10e      	cbz	r6, 1da4 <settings_parse_and_lookup+0x64>
				*next = tmpnext;
    1da0:	9b01      	ldr	r3, [sp, #4]
    1da2:	6033      	str	r3, [r6, #0]
    1da4:	4625      	mov	r5, r4
    1da6:	e006      	b.n	1db6 <settings_parse_and_lookup+0x76>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    1da8:	2200      	movs	r2, #0
    1daa:	6829      	ldr	r1, [r5, #0]
    1dac:	6820      	ldr	r0, [r4, #0]
    1dae:	f010 fc9e 	bl	126ee <settings_name_steq>
    1db2:	2800      	cmp	r0, #0
    1db4:	d1f3      	bne.n	1d9e <settings_parse_and_lookup+0x5e>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    1db6:	3414      	adds	r4, #20
    1db8:	e7d0      	b.n	1d5c <settings_parse_and_lookup+0x1c>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    1dba:	4638      	mov	r0, r7
    1dbc:	6821      	ldr	r1, [r4, #0]
    1dbe:	aa01      	add	r2, sp, #4
    1dc0:	f010 fc95 	bl	126ee <settings_name_steq>
    1dc4:	b160      	cbz	r0, 1de0 <settings_parse_and_lookup+0xa0>
		if (!bestmatch) {
    1dc6:	b925      	cbnz	r5, 1dd2 <settings_parse_and_lookup+0x92>
			if (next) {
    1dc8:	b10e      	cbz	r6, 1dce <settings_parse_and_lookup+0x8e>
				*next = tmpnext;
    1dca:	9b01      	ldr	r3, [sp, #4]
    1dcc:	6033      	str	r3, [r6, #0]
    1dce:	4625      	mov	r5, r4
    1dd0:	e006      	b.n	1de0 <settings_parse_and_lookup+0xa0>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    1dd2:	2200      	movs	r2, #0
    1dd4:	6829      	ldr	r1, [r5, #0]
    1dd6:	6820      	ldr	r0, [r4, #0]
    1dd8:	f010 fc89 	bl	126ee <settings_name_steq>
    1ddc:	2800      	cmp	r0, #0
    1dde:	d1f3      	bne.n	1dc8 <settings_parse_and_lookup+0x88>
Z_GENLIST_PEEK_NEXT(slist, snode)
    1de0:	f114 0f14 	cmn.w	r4, #20
    1de4:	d0d0      	beq.n	1d88 <settings_parse_and_lookup+0x48>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1de6:	6964      	ldr	r4, [r4, #20]
    1de8:	e7cb      	b.n	1d82 <settings_parse_and_lookup+0x42>
    1dea:	bf00      	nop
    1dec:	00016b58 	.word	0x00016b58
    1df0:	00017b28 	.word	0x00017b28
    1df4:	00017b50 	.word	0x00017b50
    1df8:	00017b6d 	.word	0x00017b6d
    1dfc:	20000858 	.word	0x20000858
    1e00:	00016bbc 	.word	0x00016bbc
    1e04:	00017af6 	.word	0x00017af6

00001e08 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
    1e08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1e0c:	b085      	sub	sp, #20
    1e0e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    1e12:	4604      	mov	r4, r0
    1e14:	460d      	mov	r5, r1
    1e16:	4616      	mov	r6, r2
    1e18:	461f      	mov	r7, r3
	int rc;
	const char *name_key = name;
    1e1a:	9003      	str	r0, [sp, #12]

	if (load_arg && load_arg->subtree &&
    1e1c:	f1b8 0f00 	cmp.w	r8, #0
    1e20:	d018      	beq.n	1e54 <settings_call_set_handler+0x4c>
    1e22:	f8d8 1000 	ldr.w	r1, [r8]
    1e26:	b181      	cbz	r1, 1e4a <settings_call_set_handler+0x42>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
    1e28:	aa03      	add	r2, sp, #12
    1e2a:	f010 fc60 	bl	126ee <settings_name_steq>
	if (load_arg && load_arg->subtree &&
    1e2e:	b960      	cbnz	r0, 1e4a <settings_call_set_handler+0x42>

		if (rc != 0) {
			LOG_ERR("set-value failure. key: %s error(%d)",
				log_strdup(name), rc);
			/* Ignoring the error */
			rc = 0;
    1e30:	2000      	movs	r0, #0
    1e32:	e007      	b.n	1e44 <settings_call_set_handler+0x3c>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
    1e34:	f8d8 3008 	ldr.w	r3, [r8, #8]
    1e38:	4632      	mov	r2, r6
    1e3a:	9300      	str	r3, [sp, #0]
    1e3c:	4629      	mov	r1, r5
    1e3e:	463b      	mov	r3, r7
    1e40:	9803      	ldr	r0, [sp, #12]
    1e42:	47c8      	blx	r9
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
    1e44:	b005      	add	sp, #20
    1e46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (load_arg && load_arg->cb) {
    1e4a:	f8d8 9004 	ldr.w	r9, [r8, #4]
    1e4e:	f1b9 0f00 	cmp.w	r9, #0
    1e52:	d1ef      	bne.n	1e34 <settings_call_set_handler+0x2c>
		ch = settings_parse_and_lookup(name, &name_key);
    1e54:	4620      	mov	r0, r4
    1e56:	a903      	add	r1, sp, #12
    1e58:	f7ff ff72 	bl	1d40 <settings_parse_and_lookup>
		if (!ch) {
    1e5c:	2800      	cmp	r0, #0
    1e5e:	d0e7      	beq.n	1e30 <settings_call_set_handler+0x28>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
    1e60:	463b      	mov	r3, r7
    1e62:	f8d0 8008 	ldr.w	r8, [r0, #8]
    1e66:	4632      	mov	r2, r6
    1e68:	4629      	mov	r1, r5
    1e6a:	9803      	ldr	r0, [sp, #12]
    1e6c:	47c0      	blx	r8
		if (rc != 0) {
    1e6e:	4603      	mov	r3, r0
    1e70:	2800      	cmp	r0, #0
    1e72:	d0dd      	beq.n	1e30 <settings_call_set_handler+0x28>
			LOG_ERR("set-value failure. key: %s error(%d)",
    1e74:	4622      	mov	r2, r4
    1e76:	2145      	movs	r1, #69	; 0x45
    1e78:	4801      	ldr	r0, [pc, #4]	; (1e80 <settings_call_set_handler+0x78>)
    1e7a:	f010 f865 	bl	11f48 <printk>
    1e7e:	e7d7      	b.n	1e30 <settings_call_set_handler+0x28>
    1e80:	00017b8c 	.word	0x00017b8c

00001e84 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
    1e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int rc;
	int rc2;

	rc = 0;

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    1e88:	4f23      	ldr	r7, [pc, #140]	; (1f18 <settings_commit_subtree+0x94>)
{
    1e8a:	4606      	mov	r6, r0
	rc = 0;
    1e8c:	2500      	movs	r5, #0
    1e8e:	46b9      	mov	r9, r7
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    1e90:	4c22      	ldr	r4, [pc, #136]	; (1f1c <settings_commit_subtree+0x98>)
    1e92:	f8df 809c 	ldr.w	r8, [pc, #156]	; 1f30 <settings_commit_subtree+0xac>
    1e96:	42bc      	cmp	r4, r7
    1e98:	d90c      	bls.n	1eb4 <settings_commit_subtree+0x30>
    1e9a:	4921      	ldr	r1, [pc, #132]	; (1f20 <settings_commit_subtree+0x9c>)
    1e9c:	23f4      	movs	r3, #244	; 0xf4
    1e9e:	4642      	mov	r2, r8
    1ea0:	4820      	ldr	r0, [pc, #128]	; (1f24 <settings_commit_subtree+0xa0>)
    1ea2:	f010 f851 	bl	11f48 <printk>
    1ea6:	4820      	ldr	r0, [pc, #128]	; (1f28 <settings_commit_subtree+0xa4>)
    1ea8:	f010 f84e 	bl	11f48 <printk>
    1eac:	21f4      	movs	r1, #244	; 0xf4
    1eae:	4640      	mov	r0, r8
    1eb0:	f010 fae0 	bl	12474 <assert_post_action>
    1eb4:	454c      	cmp	r4, r9
    1eb6:	d307      	bcc.n	1ec8 <settings_commit_subtree+0x44>
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    1eb8:	4b1c      	ldr	r3, [pc, #112]	; (1f2c <settings_commit_subtree+0xa8>)
    1eba:	681c      	ldr	r4, [r3, #0]
    1ebc:	b10c      	cbz	r4, 1ec2 <settings_commit_subtree+0x3e>
    1ebe:	3c14      	subs	r4, #20
    1ec0:	b9a4      	cbnz	r4, 1eec <settings_commit_subtree+0x68>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
    1ec2:	4628      	mov	r0, r5
    1ec4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    1ec8:	b91e      	cbnz	r6, 1ed2 <settings_commit_subtree+0x4e>
		if (ch->h_commit) {
    1eca:	68e3      	ldr	r3, [r4, #12]
    1ecc:	b94b      	cbnz	r3, 1ee2 <settings_commit_subtree+0x5e>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    1ece:	3414      	adds	r4, #20
    1ed0:	e7e1      	b.n	1e96 <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    1ed2:	2200      	movs	r2, #0
    1ed4:	4631      	mov	r1, r6
    1ed6:	6820      	ldr	r0, [r4, #0]
    1ed8:	f010 fc09 	bl	126ee <settings_name_steq>
    1edc:	2800      	cmp	r0, #0
    1ede:	d1f4      	bne.n	1eca <settings_commit_subtree+0x46>
    1ee0:	e7f5      	b.n	1ece <settings_commit_subtree+0x4a>
			rc2 = ch->h_commit();
    1ee2:	4798      	blx	r3
				rc = rc2;
    1ee4:	2d00      	cmp	r5, #0
    1ee6:	bf08      	it	eq
    1ee8:	4605      	moveq	r5, r0
    1eea:	e7f0      	b.n	1ece <settings_commit_subtree+0x4a>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    1eec:	b936      	cbnz	r6, 1efc <settings_commit_subtree+0x78>
		if (ch->h_commit) {
    1eee:	68e3      	ldr	r3, [r4, #12]
    1ef0:	b963      	cbnz	r3, 1f0c <settings_commit_subtree+0x88>
Z_GENLIST_PEEK_NEXT(slist, snode)
    1ef2:	f114 0f14 	cmn.w	r4, #20
    1ef6:	d0e4      	beq.n	1ec2 <settings_commit_subtree+0x3e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1ef8:	6964      	ldr	r4, [r4, #20]
    1efa:	e7df      	b.n	1ebc <settings_commit_subtree+0x38>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    1efc:	2200      	movs	r2, #0
    1efe:	4631      	mov	r1, r6
    1f00:	6820      	ldr	r0, [r4, #0]
    1f02:	f010 fbf4 	bl	126ee <settings_name_steq>
    1f06:	2800      	cmp	r0, #0
    1f08:	d1f1      	bne.n	1eee <settings_commit_subtree+0x6a>
    1f0a:	e7f2      	b.n	1ef2 <settings_commit_subtree+0x6e>
			rc2 = ch->h_commit();
    1f0c:	4798      	blx	r3
				rc = rc2;
    1f0e:	2d00      	cmp	r5, #0
    1f10:	bf08      	it	eq
    1f12:	4605      	moveq	r5, r0
    1f14:	e7ed      	b.n	1ef2 <settings_commit_subtree+0x6e>
    1f16:	bf00      	nop
    1f18:	00016bbc 	.word	0x00016bbc
    1f1c:	00016b58 	.word	0x00016b58
    1f20:	00017b28 	.word	0x00017b28
    1f24:	00017b50 	.word	0x00017b50
    1f28:	00017b6d 	.word	0x00017b6d
    1f2c:	20000858 	.word	0x20000858
    1f30:	00017af6 	.word	0x00017af6

00001f34 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
    1f34:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
    1f36:	4c06      	ldr	r4, [pc, #24]	; (1f50 <settings_subsys_init+0x1c>)
    1f38:	7823      	ldrb	r3, [r4, #0]
    1f3a:	b93b      	cbnz	r3, 1f4c <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
    1f3c:	f7ff fef8 	bl	1d30 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
    1f40:	f000 f864 	bl	200c <settings_backend_init>

	if (!err) {
    1f44:	b908      	cbnz	r0, 1f4a <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
    1f46:	2301      	movs	r3, #1
    1f48:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
    1f4a:	bd10      	pop	{r4, pc}
		return 0;
    1f4c:	2000      	movs	r0, #0
    1f4e:	e7fc      	b.n	1f4a <settings_subsys_init+0x16>
    1f50:	20001e83 	.word	0x20001e83

00001f54 <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
    1f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1f58:	4680      	mov	r8, r0
    1f5a:	4689      	mov	r9, r1
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	u16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
    1f5c:	8e84      	ldrh	r4, [r0, #52]	; 0x34
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
    1f5e:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 2008 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8>
	name_id = cf->last_name_id + 1;
    1f62:	3401      	adds	r4, #1
{
    1f64:	b098      	sub	sp, #96	; 0x60
	name_id = cf->last_name_id + 1;
    1f66:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    1f68:	f100 0608 	add.w	r6, r0, #8
		name_id--;
    1f6c:	1e65      	subs	r5, r4, #1
    1f6e:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
    1f70:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    1f74:	d045      	beq.n	2002 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    1f76:	234a      	movs	r3, #74	; 0x4a
    1f78:	4629      	mov	r1, r5
    1f7a:	aa05      	add	r2, sp, #20
    1f7c:	4630      	mov	r0, r6
    1f7e:	f010 fb8a 	bl	12696 <nvs_read>
    1f82:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
    1f86:	343f      	adds	r4, #63	; 0x3f
    1f88:	b2a4      	uxth	r4, r4
    1f8a:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    1f8c:	4621      	mov	r1, r4
    1f8e:	2301      	movs	r3, #1
    1f90:	4630      	mov	r0, r6
    1f92:	f10d 020b 	add.w	r2, sp, #11
    1f96:	f010 fb7e 	bl	12696 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
    1f9a:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    1f9c:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
    1f9e:	dc03      	bgt.n	1fa8 <settings_nvs_load+0x54>
    1fa0:	2800      	cmp	r0, #0
    1fa2:	dc03      	bgt.n	1fac <settings_nvs_load+0x58>
{
    1fa4:	462c      	mov	r4, r5
    1fa6:	e7e1      	b.n	1f6c <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
    1fa8:	2800      	cmp	r0, #0
    1faa:	dc16      	bgt.n	1fda <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
    1fac:	f8b8 3034 	ldrh.w	r3, [r8, #52]	; 0x34
    1fb0:	42ab      	cmp	r3, r5
    1fb2:	d109      	bne.n	1fc8 <settings_nvs_load+0x74>
				cf->last_name_id--;
    1fb4:	4642      	mov	r2, r8
    1fb6:	1e6b      	subs	r3, r5, #1
    1fb8:	f822 3f34 	strh.w	r3, [r2, #52]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
    1fbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1fc0:	2302      	movs	r3, #2
    1fc2:	4630      	mov	r0, r6
    1fc4:	f7ff fca2 	bl	190c <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
    1fc8:	4629      	mov	r1, r5
    1fca:	4630      	mov	r0, r6
    1fcc:	f010 fb5f 	bl	1268e <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
    1fd0:	4621      	mov	r1, r4
    1fd2:	4630      	mov	r0, r6
    1fd4:	f010 fb5b 	bl	1268e <nvs_delete>
			continue;
    1fd8:	e7e4      	b.n	1fa4 <settings_nvs_load+0x50>
		name[rc1] = '\0';
    1fda:	ab18      	add	r3, sp, #96	; 0x60
    1fdc:	441f      	add	r7, r3
    1fde:	2300      	movs	r3, #0
		ret = settings_call_set_handler(
    1fe0:	4652      	mov	r2, sl
		name[rc1] = '\0';
    1fe2:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
    1fe6:	a805      	add	r0, sp, #20
    1fe8:	f8cd 9000 	str.w	r9, [sp]
    1fec:	ab03      	add	r3, sp, #12
		read_fn_arg.fs = &cf->cf_nvs;
    1fee:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
    1ff0:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
    1ff4:	f7ff ff08 	bl	1e08 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
    1ff8:	2800      	cmp	r0, #0
    1ffa:	d0d3      	beq.n	1fa4 <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
    1ffc:	b018      	add	sp, #96	; 0x60
    1ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2002:	2000      	movs	r0, #0
	return ret;
    2004:	e7fa      	b.n	1ffc <settings_nvs_load+0xa8>
    2006:	bf00      	nop
    2008:	00012761 	.word	0x00012761

0000200c <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
    200c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	u16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	u32_t sector_cnt = 1;
    200e:	2501      	movs	r5, #1

	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
    2010:	4669      	mov	r1, sp
    2012:	4628      	mov	r0, r5
	u32_t sector_cnt = 1;
    2014:	9501      	str	r5, [sp, #4]
	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
    2016:	f7ff fdc7 	bl	1ba8 <flash_area_open>
	if (rc) {
    201a:	4604      	mov	r4, r0
    201c:	2800      	cmp	r0, #0
    201e:	d136      	bne.n	208e <settings_backend_init+0x82>
		return rc;
	}

	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
    2020:	4628      	mov	r0, r5
    2022:	aa02      	add	r2, sp, #8
    2024:	a901      	add	r1, sp, #4
    2026:	f7ff fdd3 	bl	1bd0 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
    202a:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
    202e:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
    2030:	d02d      	beq.n	208e <settings_backend_init+0x82>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
    2032:	b138      	cbz	r0, 2044 <settings_backend_init+0x38>
    2034:	340c      	adds	r4, #12
    2036:	d005      	beq.n	2044 <settings_backend_init+0x38>
		k_panic();
    2038:	4040      	eors	r0, r0
    203a:	f380 8811 	msr	BASEPRI, r0
    203e:	f04f 0004 	mov.w	r0, #4
    2042:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
    2044:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
    2046:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
    204a:	d223      	bcs.n	2094 <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
    204c:	2300      	movs	r3, #0
	size_t nvs_sector_size, nvs_size = 0;
    204e:	4618      	mov	r0, r3
		if (nvs_size > fa->fa_size) {
    2050:	9a00      	ldr	r2, [sp, #0]
    2052:	6895      	ldr	r5, [r2, #8]
		nvs_size += nvs_sector_size;
    2054:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
    2056:	4285      	cmp	r5, r0
    2058:	b29c      	uxth	r4, r3
    205a:	d303      	bcc.n	2064 <settings_backend_init+0x58>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
    205c:	3301      	adds	r3, #1
    205e:	2b08      	cmp	r3, #8
    2060:	d1f8      	bne.n	2054 <settings_backend_init+0x48>
    2062:	461c      	mov	r4, r3
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
    2064:	4d0d      	ldr	r5, [pc, #52]	; (209c <settings_backend_init+0x90>)
	default_settings_nvs.cf_nvs.sector_count = cnt;
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
    2066:	6853      	ldr	r3, [r2, #4]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;

	rc = settings_nvs_backend_init(&default_settings_nvs);
    2068:	4628      	mov	r0, r5
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
    206a:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
    206c:	68d3      	ldr	r3, [r2, #12]
	default_settings_nvs.cf_nvs.sector_count = cnt;
    206e:	82ec      	strh	r4, [r5, #22]
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
    2070:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
    2072:	63ab      	str	r3, [r5, #56]	; 0x38
	rc = settings_nvs_backend_init(&default_settings_nvs);
    2074:	f010 fc08 	bl	12888 <settings_nvs_backend_init>
	if (rc) {
    2078:	4604      	mov	r4, r0
    207a:	b940      	cbnz	r0, 208e <settings_backend_init+0x82>
	cf->cf_store.cs_itf = &settings_nvs_itf;
    207c:	4e08      	ldr	r6, [pc, #32]	; (20a0 <settings_backend_init+0x94>)
	settings_src_register(&cf->cf_store);
    207e:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
    2080:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
    2082:	f7ff fdf3 	bl	1c6c <settings_src_register>
	settings_dst_register(&cf->cf_store);
    2086:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
    2088:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
    208a:	f7ff fdfd 	bl	1c88 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
    208e:	4620      	mov	r0, r4
    2090:	b004      	add	sp, #16
    2092:	bd70      	pop	{r4, r5, r6, pc}
		return -EDOM;
    2094:	f06f 0424 	mvn.w	r4, #36	; 0x24
    2098:	e7f9      	b.n	208e <settings_backend_init+0x82>
    209a:	bf00      	nop
    209c:	20000860 	.word	0x20000860
    20a0:	20000180 	.word	0x20000180

000020a4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    20a4:	b510      	push	{r4, lr}
    20a6:	4807      	ldr	r0, [pc, #28]	; (20c4 <uart_console_init+0x20>)
    20a8:	f00c fcae 	bl	ea08 <z_impl_device_get_binding>
	__stdout_hook_install(console_out);
    20ac:	4c06      	ldr	r4, [pc, #24]	; (20c8 <uart_console_init+0x24>)

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    20ae:	4b07      	ldr	r3, [pc, #28]	; (20cc <uart_console_init+0x28>)
    20b0:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    20b2:	4620      	mov	r0, r4
    20b4:	f002 fb26 	bl	4704 <__stdout_hook_install>
	__printk_hook_install(console_out);
    20b8:	4620      	mov	r0, r4
    20ba:	f7ff f805 	bl	10c8 <__printk_hook_install>
#endif

	uart_console_hook_install();

	return 0;
}
    20be:	2000      	movs	r0, #0
    20c0:	bd10      	pop	{r4, pc}
    20c2:	bf00      	nop
    20c4:	00017864 	.word	0x00017864
    20c8:	000020d1 	.word	0x000020d1
    20cc:	2000089c 	.word	0x2000089c

000020d0 <console_out>:
	if ('\n' == c) {
    20d0:	280a      	cmp	r0, #10
{
    20d2:	b538      	push	{r3, r4, r5, lr}
    20d4:	4604      	mov	r4, r0
    20d6:	4d07      	ldr	r5, [pc, #28]	; (20f4 <console_out+0x24>)
	if ('\n' == c) {
    20d8:	d104      	bne.n	20e4 <console_out+0x14>
    20da:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
    20dc:	6883      	ldr	r3, [r0, #8]
    20de:	210d      	movs	r1, #13
    20e0:	685b      	ldr	r3, [r3, #4]
    20e2:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    20e4:	6828      	ldr	r0, [r5, #0]
    20e6:	6883      	ldr	r3, [r0, #8]
    20e8:	b2e1      	uxtb	r1, r4
    20ea:	685b      	ldr	r3, [r3, #4]
    20ec:	4798      	blx	r3
}
    20ee:	4620      	mov	r0, r4
    20f0:	bd38      	pop	{r3, r4, r5, pc}
    20f2:	bf00      	nop
    20f4:	2000089c 	.word	0x2000089c

000020f8 <get_status>:
	return &config->subsys[type];
}

static enum clock_control_status get_status(struct device *dev,
					    clock_control_subsys_t subsys)
{
    20f8:	b538      	push	{r3, r4, r5, lr}
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
	struct nrf_clock_control_sub_data *data;

	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    20fa:	b2cc      	uxtb	r4, r1
    20fc:	2c01      	cmp	r4, #1
{
    20fe:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2100:	d909      	bls.n	2116 <get_status+0x1e>
    2102:	490b      	ldr	r1, [pc, #44]	; (2130 <get_status+0x38>)
    2104:	480b      	ldr	r0, [pc, #44]	; (2134 <get_status+0x3c>)
    2106:	237f      	movs	r3, #127	; 0x7f
    2108:	4a0b      	ldr	r2, [pc, #44]	; (2138 <get_status+0x40>)
    210a:	f00f ff1d 	bl	11f48 <printk>
    210e:	217f      	movs	r1, #127	; 0x7f
    2110:	4809      	ldr	r0, [pc, #36]	; (2138 <get_status+0x40>)
    2112:	f010 f9af 	bl	12474 <assert_post_action>
	data = get_sub_data(dev, type);
	if (data->started) {
    2116:	210c      	movs	r1, #12
	data = get_sub_data(dev, type);
    2118:	68eb      	ldr	r3, [r5, #12]
	if (data->started) {
    211a:	fb04 3101 	mla	r1, r4, r1, r3
    211e:	7a4b      	ldrb	r3, [r1, #9]
    2120:	b923      	cbnz	r3, 212c <get_status+0x34>
		return CLOCK_CONTROL_STATUS_ON;
	}

	if (data->ref > 0) {
    2122:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
    2124:	fab0 f080 	clz	r0, r0
    2128:	0940      	lsrs	r0, r0, #5
		return CLOCK_CONTROL_STATUS_STARTING;
	}

	return CLOCK_CONTROL_STATUS_OFF;
}
    212a:	bd38      	pop	{r3, r4, r5, pc}
		return CLOCK_CONTROL_STATUS_ON;
    212c:	2002      	movs	r0, #2
    212e:	e7fc      	b.n	212a <get_status+0x32>
    2130:	00017bf7 	.word	0x00017bf7
    2134:	00017b50 	.word	0x00017b50
    2138:	00017bbc 	.word	0x00017bbc

0000213c <clock_async_start>:
}

static int clock_async_start(struct device *dev,
			     clock_control_subsys_t subsys,
			     struct clock_control_async_data *data)
{
    213c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct nrf_clock_control_sub_config *config;
	struct nrf_clock_control_sub_data *clk_data;
	int key;
	u8_t ref;

	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2140:	b2ce      	uxtb	r6, r1
    2142:	2e01      	cmp	r6, #1
{
    2144:	4607      	mov	r7, r0
    2146:	4689      	mov	r9, r1
    2148:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    214a:	d909      	bls.n	2160 <clock_async_start+0x24>
    214c:	4941      	ldr	r1, [pc, #260]	; (2254 <clock_async_start+0x118>)
    214e:	4842      	ldr	r0, [pc, #264]	; (2258 <clock_async_start+0x11c>)
    2150:	23ef      	movs	r3, #239	; 0xef
    2152:	4a42      	ldr	r2, [pc, #264]	; (225c <clock_async_start+0x120>)
    2154:	f00f fef8 	bl	11f48 <printk>
    2158:	21ef      	movs	r1, #239	; 0xef
    215a:	4840      	ldr	r0, [pc, #256]	; (225c <clock_async_start+0x120>)
    215c:	f010 f98a 	bl	12474 <assert_post_action>
	config = get_sub_config(dev, type);
    2160:	f8d7 a004 	ldr.w	sl, [r7, #4]
	clk_data = get_sub_data(dev, type);
    2164:	f8d7 800c 	ldr.w	r8, [r7, #12]

	__ASSERT_NO_MSG((data == NULL) ||
    2168:	2c00      	cmp	r4, #0
    216a:	d153      	bne.n	2214 <clock_async_start+0xd8>
	__asm__ volatile(
    216c:	f04f 0320 	mov.w	r3, #32
    2170:	f3ef 8b11 	mrs	fp, BASEPRI
    2174:	f383 8811 	msr	BASEPRI, r3
    2178:	f3bf 8f6f 	isb	sy
	    && is_in_list(&clk_data->list, &data->node)) {
		return -EBUSY;
	}

	key = irq_lock();
	ref = ++clk_data->ref;
    217c:	230c      	movs	r3, #12
    217e:	fb06 8303 	mla	r3, r6, r3, r8
    2182:	7a1d      	ldrb	r5, [r3, #8]
    2184:	3501      	adds	r5, #1
    2186:	b2ed      	uxtb	r5, r5
    2188:	721d      	strb	r5, [r3, #8]
	__ASSERT_NO_MSG(clk_data->ref > 0);
    218a:	b95d      	cbnz	r5, 21a4 <clock_async_start+0x68>
    218c:	4934      	ldr	r1, [pc, #208]	; (2260 <clock_async_start+0x124>)
    218e:	4832      	ldr	r0, [pc, #200]	; (2258 <clock_async_start+0x11c>)
    2190:	f44f 7380 	mov.w	r3, #256	; 0x100
    2194:	4a31      	ldr	r2, [pc, #196]	; (225c <clock_async_start+0x120>)
    2196:	f00f fed7 	bl	11f48 <printk>
    219a:	f44f 7180 	mov.w	r1, #256	; 0x100
    219e:	482f      	ldr	r0, [pc, #188]	; (225c <clock_async_start+0x120>)
    21a0:	f010 f968 	bl	12474 <assert_post_action>
	__asm__ volatile(
    21a4:	f38b 8811 	msr	BASEPRI, fp
    21a8:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	if (data) {
    21ac:	b344      	cbz	r4, 2200 <clock_async_start+0xc4>
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    21ae:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    21b2:	2203      	movs	r2, #3
    21b4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		bool already_started;

		clock_irqs_disable();
		already_started = clk_data->started;
    21b8:	220c      	movs	r2, #12
    21ba:	4372      	muls	r2, r6
    21bc:	eb08 0302 	add.w	r3, r8, r2
    21c0:	7a59      	ldrb	r1, [r3, #9]
		if (!already_started) {
    21c2:	b991      	cbnz	r1, 21ea <clock_async_start+0xae>
	__asm__ volatile(
    21c4:	f04f 0020 	mov.w	r0, #32
    21c8:	f3ef 8c11 	mrs	ip, BASEPRI
    21cc:	f380 8811 	msr	BASEPRI, r0
    21d0:	f3bf 8f6f 	isb	sy
	parent->next = child;
    21d4:	6021      	str	r1, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
    21d6:	6858      	ldr	r0, [r3, #4]
    21d8:	2800      	cmp	r0, #0
    21da:	d133      	bne.n	2244 <clock_async_start+0x108>
	list->tail = node;
    21dc:	605c      	str	r4, [r3, #4]
	list->head = node;
    21de:	f848 4002 	str.w	r4, [r8, r2]
	__asm__ volatile(
    21e2:	f38c 8811 	msr	BASEPRI, ip
    21e6:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
    21ea:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    21ee:	2203      	movs	r2, #3
    21f0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
			list_append(&clk_data->list, &data->node);
		}
		clock_irqs_enable();

		if (already_started) {
    21f4:	b121      	cbz	r1, 2200 <clock_async_start+0xc4>
			data->cb(dev, subsys, data->user_data);
    21f6:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    21fa:	4649      	mov	r1, r9
    21fc:	4638      	mov	r0, r7
    21fe:	4798      	blx	r3
		}
	}

	if (ref == 1) {
    2200:	2d01      	cmp	r5, #1
    2202:	d105      	bne.n	2210 <clock_async_start+0xd4>
		if (IS_ENABLED(CONFIG_NRF52_ANOMALY_132_WORKAROUND) &&
			(subsys == CLOCK_CONTROL_NRF_SUBSYS_LF)) {
			anomaly_132_workaround();
		}

		nrf_clock_task_trigger(NRF_CLOCK, config->start_tsk);
    2204:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_clock_task_trigger(NRF_CLOCK_Type * p_reg, nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2208:	78b3      	ldrb	r3, [r6, #2]
    220a:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    220e:	601d      	str	r5, [r3, #0]
	}

	return 0;
    2210:	2000      	movs	r0, #0
    2212:	e01c      	b.n	224e <clock_async_start+0x112>
	__ASSERT_NO_MSG((data == NULL) ||
    2214:	6863      	ldr	r3, [r4, #4]
    2216:	b94b      	cbnz	r3, 222c <clock_async_start+0xf0>
    2218:	4912      	ldr	r1, [pc, #72]	; (2264 <clock_async_start+0x128>)
    221a:	480f      	ldr	r0, [pc, #60]	; (2258 <clock_async_start+0x11c>)
    221c:	23f3      	movs	r3, #243	; 0xf3
    221e:	4a0f      	ldr	r2, [pc, #60]	; (225c <clock_async_start+0x120>)
    2220:	f00f fe92 	bl	11f48 <printk>
    2224:	21f3      	movs	r1, #243	; 0xf3
    2226:	480d      	ldr	r0, [pc, #52]	; (225c <clock_async_start+0x120>)
    2228:	f010 f924 	bl	12474 <assert_post_action>
	sys_snode_t *item = sys_slist_peek_head(list);
    222c:	230c      	movs	r3, #12
    222e:	4373      	muls	r3, r6
    2230:	f858 3003 	ldr.w	r3, [r8, r3]
		if (item == node) {
    2234:	429c      	cmp	r4, r3
    2236:	d008      	beq.n	224a <clock_async_start+0x10e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    2238:	2b00      	cmp	r3, #0
    223a:	d097      	beq.n	216c <clock_async_start+0x30>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    223c:	681b      	ldr	r3, [r3, #0]
	} while (item);
    223e:	2b00      	cmp	r3, #0
    2240:	d1f8      	bne.n	2234 <clock_async_start+0xf8>
    2242:	e793      	b.n	216c <clock_async_start+0x30>
	parent->next = child;
    2244:	6004      	str	r4, [r0, #0]
	list->tail = node;
    2246:	605c      	str	r4, [r3, #4]
}
    2248:	e7cb      	b.n	21e2 <clock_async_start+0xa6>
		return -EBUSY;
    224a:	f06f 000f 	mvn.w	r0, #15
}
    224e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2252:	bf00      	nop
    2254:	00017bf7 	.word	0x00017bf7
    2258:	00017b50 	.word	0x00017b50
    225c:	00017bbc 	.word	0x00017bbc
    2260:	00017c69 	.word	0x00017c69
    2264:	00017c1b 	.word	0x00017c1b

00002268 <clock_stop>:
{
    2268:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    226a:	b2cc      	uxtb	r4, r1
    226c:	2c01      	cmp	r4, #1
{
    226e:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2270:	d909      	bls.n	2286 <clock_stop+0x1e>
    2272:	4918      	ldr	r1, [pc, #96]	; (22d4 <clock_stop+0x6c>)
    2274:	4818      	ldr	r0, [pc, #96]	; (22d8 <clock_stop+0x70>)
    2276:	2394      	movs	r3, #148	; 0x94
    2278:	4a18      	ldr	r2, [pc, #96]	; (22dc <clock_stop+0x74>)
    227a:	f00f fe65 	bl	11f48 <printk>
    227e:	2194      	movs	r1, #148	; 0x94
    2280:	4816      	ldr	r0, [pc, #88]	; (22dc <clock_stop+0x74>)
    2282:	f010 f8f7 	bl	12474 <assert_post_action>
	config = get_sub_config(dev, type);
    2286:	6869      	ldr	r1, [r5, #4]
	data = get_sub_data(dev, type);
    2288:	68ed      	ldr	r5, [r5, #12]
	__asm__ volatile(
    228a:	f04f 0320 	mov.w	r3, #32
    228e:	f3ef 8611 	mrs	r6, BASEPRI
    2292:	f383 8811 	msr	BASEPRI, r3
    2296:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
    229a:	220c      	movs	r2, #12
    229c:	4362      	muls	r2, r4
    229e:	18ab      	adds	r3, r5, r2
    22a0:	7a18      	ldrb	r0, [r3, #8]
    22a2:	b190      	cbz	r0, 22ca <clock_stop+0x62>
	data->ref--;
    22a4:	3801      	subs	r0, #1
    22a6:	b2c0      	uxtb	r0, r0
    22a8:	7218      	strb	r0, [r3, #8]
	if (data->ref == 0) {
    22aa:	b988      	cbnz	r0, 22d0 <clock_stop+0x68>
		nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
    22ac:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    22b0:	2101      	movs	r1, #1
	list->head = NULL;
    22b2:	50a8      	str	r0, [r5, r2]
    22b4:	78e2      	ldrb	r2, [r4, #3]
	list->tail = NULL;
    22b6:	6058      	str	r0, [r3, #4]
    22b8:	f102 2250 	add.w	r2, r2, #1342197760	; 0x50005000
    22bc:	6011      	str	r1, [r2, #0]
		data->started = false;
    22be:	7258      	strb	r0, [r3, #9]
	__asm__ volatile(
    22c0:	f386 8811 	msr	BASEPRI, r6
    22c4:	f3bf 8f6f 	isb	sy
}
    22c8:	bd70      	pop	{r4, r5, r6, pc}
		err = -EALREADY;
    22ca:	f06f 0044 	mvn.w	r0, #68	; 0x44
    22ce:	e7f7      	b.n	22c0 <clock_stop+0x58>
	int err = 0;
    22d0:	2000      	movs	r0, #0
    22d2:	e7f5      	b.n	22c0 <clock_stop+0x58>
    22d4:	00017bf7 	.word	0x00017bf7
    22d8:	00017b50 	.word	0x00017b50
    22dc:	00017bbc 	.word	0x00017bbc

000022e0 <clkstarted_handle.constprop.0>:
DEVICE_AND_API_INIT(clock_nrf, DT_INST_LABEL(0),
		    clk_init, &data, &config, PRE_KERNEL_1,
		    CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &clock_control_api);

static void clkstarted_handle(struct device *dev,
    22e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
	struct clock_control_async_data *async_data;

	DBG(dev, type, "Clock started");
	sub_data->started = true;
    22e2:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    22e4:	4e11      	ldr	r6, [pc, #68]	; (232c <clkstarted_handle.constprop.0+0x4c>)
static void clkstarted_handle(struct device *dev,
    22e6:	4605      	mov	r5, r0
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    22e8:	68f3      	ldr	r3, [r6, #12]
	sub_data->started = true;
    22ea:	fb04 3400 	mla	r4, r4, r0, r3
    22ee:	2301      	movs	r3, #1
    22f0:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
    22f2:	f04f 0320 	mov.w	r3, #32
    22f6:	f3ef 8111 	mrs	r1, BASEPRI
    22fa:	f383 8811 	msr	BASEPRI, r3
    22fe:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
    2302:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    2304:	b12b      	cbz	r3, 2312 <clkstarted_handle.constprop.0+0x32>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    2306:	6860      	ldr	r0, [r4, #4]
    2308:	681a      	ldr	r2, [r3, #0]
    230a:	4283      	cmp	r3, r0
	list->head = node;
    230c:	6022      	str	r2, [r4, #0]
	list->tail = node;
    230e:	bf08      	it	eq
    2310:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
    2312:	f381 8811 	msr	BASEPRI, r1
    2316:	f3bf 8f6f 	isb	sy

	while ((async_data = list_get(&sub_data->list)) != NULL) {
    231a:	b903      	cbnz	r3, 231e <clkstarted_handle.constprop.0+0x3e>
		async_data->cb(dev, (clock_control_subsys_t)type,
				async_data->user_data);
	}
}
    231c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		async_data->cb(dev, (clock_control_subsys_t)type,
    231e:	4629      	mov	r1, r5
    2320:	e9d3 7201 	ldrd	r7, r2, [r3, #4]
    2324:	4630      	mov	r0, r6
    2326:	47b8      	blx	r7
    2328:	e7e3      	b.n	22f2 <clkstarted_handle.constprop.0+0x12>
    232a:	bf00      	nop
    232c:	20000340 	.word	0x20000340

00002330 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    2330:	b508      	push	{r3, lr}
#endif
}

NRF_STATIC_INLINE bool nrf_clock_event_check(NRF_CLOCK_Type const * p_reg, nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2332:	4b11      	ldr	r3, [pc, #68]	; (2378 <nrf_power_clock_isr+0x48>)
    2334:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    2336:	b16a      	cbz	r2, 2354 <nrf_power_clock_isr+0x24>
    return p_reg->INTENSET & mask;
    2338:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    233c:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    2340:	07d1      	lsls	r1, r2, #31
    2342:	d507      	bpl.n	2354 <nrf_power_clock_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2344:	2200      	movs	r2, #0
    2346:	601a      	str	r2, [r3, #0]
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    2348:	4b0c      	ldr	r3, [pc, #48]	; (237c <nrf_power_clock_isr+0x4c>)

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    234a:	68db      	ldr	r3, [r3, #12]
    234c:	7a58      	ldrb	r0, [r3, #9]
    234e:	b908      	cbnz	r0, 2354 <nrf_power_clock_isr+0x24>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    2350:	f7ff ffc6 	bl	22e0 <clkstarted_handle.constprop.0>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2354:	4b0a      	ldr	r3, [pc, #40]	; (2380 <nrf_power_clock_isr+0x50>)
    2356:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    2358:	b162      	cbz	r2, 2374 <nrf_power_clock_isr+0x44>
    return p_reg->INTENSET & mask;
    235a:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    235e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    2362:	0792      	lsls	r2, r2, #30
    2364:	d506      	bpl.n	2374 <nrf_power_clock_isr+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2366:	2200      	movs	r2, #0
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started();
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2368:	2001      	movs	r0, #1
    236a:	601a      	str	r2, [r3, #0]
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    236c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2370:	f7ff bfb6 	b.w	22e0 <clkstarted_handle.constprop.0>
}
    2374:	bd08      	pop	{r3, pc}
    2376:	bf00      	nop
    2378:	50005100 	.word	0x50005100
    237c:	20000340 	.word	0x20000340
    2380:	50005104 	.word	0x50005104

00002384 <bt_rpmsg_init>:

static int bt_rpmsg_init(struct device *unused)
{
	ARG_UNUSED(unused);

	return bt_hci_driver_register(&drv);
    2384:	4801      	ldr	r0, [pc, #4]	; (238c <bt_rpmsg_init+0x8>)
    2386:	f004 b843 	b.w	6410 <bt_hci_driver_register>
    238a:	bf00      	nop
    238c:	00016de0 	.word	0x00016de0

00002390 <bt_rpmsg_send>:
{
    2390:	b510      	push	{r4, lr}
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    2392:	7d02      	ldrb	r2, [r0, #20]
    2394:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    2396:	b152      	cbz	r2, 23ae <bt_rpmsg_send+0x1e>
    2398:	2a02      	cmp	r2, #2
    239a:	d009      	beq.n	23b0 <bt_rpmsg_send+0x20>
		BT_ERR("Unknown type %u", bt_buf_get_type(buf));
    239c:	2145      	movs	r1, #69	; 0x45
    239e:	480b      	ldr	r0, [pc, #44]	; (23cc <bt_rpmsg_send+0x3c>)
		BT_ERR("Failed to send (err %d)", err);
    23a0:	f00f fdd2 	bl	11f48 <printk>
	net_buf_unref(buf);
    23a4:	4620      	mov	r0, r4
    23a6:	f00a ffd9 	bl	d35c <net_buf_unref>
}
    23aa:	2000      	movs	r0, #0
    23ac:	bd10      	pop	{r4, pc}
	switch (bt_buf_get_type(buf)) {
    23ae:	2201      	movs	r2, #1
	net_buf_push_u8(buf, pkt_indicator);
    23b0:	4611      	mov	r1, r2
    23b2:	f104 0008 	add.w	r0, r4, #8
    23b6:	f013 f924 	bl	15602 <net_buf_simple_push_u8>
	err = bt_rpmsg_platform_send(buf);
    23ba:	4620      	mov	r0, r4
    23bc:	f000 f9e4 	bl	2788 <bt_rpmsg_platform_send>
	if (err < 0) {
    23c0:	1e02      	subs	r2, r0, #0
    23c2:	daef      	bge.n	23a4 <bt_rpmsg_send+0x14>
		BT_ERR("Failed to send (err %d)", err);
    23c4:	2145      	movs	r1, #69	; 0x45
    23c6:	4802      	ldr	r0, [pc, #8]	; (23d0 <bt_rpmsg_send+0x40>)
    23c8:	e7ea      	b.n	23a0 <bt_rpmsg_send+0x10>
    23ca:	bf00      	nop
    23cc:	00017c9b 	.word	0x00017c9b
    23d0:	00017cb0 	.word	0x00017cb0

000023d4 <bt_rpmsg_rx>:
{
    23d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	pkt_indicator = *data++;
    23d8:	4680      	mov	r8, r0
    23da:	f818 2b01 	ldrb.w	r2, [r8], #1
{
    23de:	4606      	mov	r6, r0
	switch (pkt_indicator) {
    23e0:	2a02      	cmp	r2, #2
{
    23e2:	460d      	mov	r5, r1
	remaining -= sizeof(pkt_indicator);
    23e4:	f101 33ff 	add.w	r3, r1, #4294967295
	switch (pkt_indicator) {
    23e8:	d03e      	beq.n	2468 <bt_rpmsg_rx+0x94>
    23ea:	2a04      	cmp	r2, #4
    23ec:	d169      	bne.n	24c2 <bt_rpmsg_rx+0xee>
	if (remaining < sizeof(hdr)) {
    23ee:	2b01      	cmp	r3, #1
    23f0:	d806      	bhi.n	2400 <bt_rpmsg_rx+0x2c>
		BT_ERR("Not enough data for event header");
    23f2:	2145      	movs	r1, #69	; 0x45
    23f4:	4835      	ldr	r0, [pc, #212]	; (24cc <bt_rpmsg_rx+0xf8>)
		BT_ERR("Event payload length is not correct");
    23f6:	f00f fda7 	bl	11f48 <printk>
}
    23fa:	b002      	add	sp, #8
    23fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (evt_type) {
    2400:	7843      	ldrb	r3, [r0, #1]
    2402:	2b3e      	cmp	r3, #62	; 0x3e
    2404:	d110      	bne.n	2428 <bt_rpmsg_rx+0x54>
		switch (subevt_type) {
    2406:	78c7      	ldrb	r7, [r0, #3]
    2408:	1ebb      	subs	r3, r7, #2
    240a:	425f      	negs	r7, r3
    240c:	415f      	adcs	r7, r3
	memcpy((void *)&hdr, data, sizeof(hdr));
    240e:	2202      	movs	r2, #2
    2410:	4641      	mov	r1, r8
    2412:	a801      	add	r0, sp, #4
    2414:	f011 f8ac 	bl	13570 <memcpy>
	if (remaining != hdr.len) {
    2418:	f89d 3005 	ldrb.w	r3, [sp, #5]
	remaining -= sizeof(hdr);
    241c:	3d03      	subs	r5, #3
	if (remaining != hdr.len) {
    241e:	429d      	cmp	r5, r3
    2420:	d004      	beq.n	242c <bt_rpmsg_rx+0x58>
		BT_ERR("Event payload length is not correct");
    2422:	2145      	movs	r1, #69	; 0x45
    2424:	482a      	ldr	r0, [pc, #168]	; (24d0 <bt_rpmsg_rx+0xfc>)
    2426:	e7e6      	b.n	23f6 <bt_rpmsg_rx+0x22>
		return false;
    2428:	2700      	movs	r7, #0
    242a:	e7f0      	b.n	240e <bt_rpmsg_rx+0x3a>
	buf = bt_buf_get_evt(hdr.evt, discardable, K_NO_WAIT);
    242c:	2200      	movs	r2, #0
    242e:	2300      	movs	r3, #0
    2430:	4639      	mov	r1, r7
    2432:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2436:	f004 fa5f 	bl	68f8 <bt_buf_get_evt>
	if (!buf) {
    243a:	4604      	mov	r4, r0
    243c:	b920      	cbnz	r0, 2448 <bt_rpmsg_rx+0x74>
		if (discardable) {
    243e:	2f00      	cmp	r7, #0
    2440:	d1db      	bne.n	23fa <bt_rpmsg_rx+0x26>
			BT_ERR("No available event buffers!");
    2442:	2145      	movs	r1, #69	; 0x45
    2444:	4823      	ldr	r0, [pc, #140]	; (24d4 <bt_rpmsg_rx+0x100>)
    2446:	e7d6      	b.n	23f6 <bt_rpmsg_rx+0x22>
	net_buf_add_mem(buf, &hdr, sizeof(hdr));
    2448:	f100 0708 	add.w	r7, r0, #8
    244c:	2202      	movs	r2, #2
    244e:	a901      	add	r1, sp, #4
    2450:	4638      	mov	r0, r7
    2452:	f013 f8f9 	bl	15648 <net_buf_simple_add_mem>
	net_buf_add_mem(buf, data, remaining);
    2456:	462a      	mov	r2, r5
    2458:	1cf1      	adds	r1, r6, #3
	net_buf_add_mem(buf, data, remaining);
    245a:	4638      	mov	r0, r7
    245c:	f013 f8f4 	bl	15648 <net_buf_simple_add_mem>
		bt_recv(buf);
    2460:	4620      	mov	r0, r4
    2462:	f003 ffab 	bl	63bc <bt_recv>
		BT_HEXDUMP_DBG(buf->data, buf->len, "RX buf payload:");
    2466:	e7c8      	b.n	23fa <bt_rpmsg_rx+0x26>
	if (remaining < sizeof(hdr)) {
    2468:	2b03      	cmp	r3, #3
    246a:	d802      	bhi.n	2472 <bt_rpmsg_rx+0x9e>
		BT_ERR("Not enough data for ACL header");
    246c:	2145      	movs	r1, #69	; 0x45
    246e:	481a      	ldr	r0, [pc, #104]	; (24d8 <bt_rpmsg_rx+0x104>)
    2470:	e7c1      	b.n	23f6 <bt_rpmsg_rx+0x22>
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
    2472:	2200      	movs	r2, #0
    2474:	2300      	movs	r3, #0
    2476:	2003      	movs	r0, #3
    2478:	f004 f9e4 	bl	6844 <bt_buf_get_rx>
	if (buf) {
    247c:	4604      	mov	r4, r0
    247e:	b1d0      	cbz	r0, 24b6 <bt_rpmsg_rx+0xe2>
		memcpy((void *)&hdr, data, sizeof(hdr));
    2480:	2204      	movs	r2, #4
    2482:	4641      	mov	r1, r8
    2484:	eb0d 0002 	add.w	r0, sp, r2
    2488:	f011 f872 	bl	13570 <memcpy>
		net_buf_add_mem(buf, &hdr, sizeof(hdr));
    248c:	2204      	movs	r2, #4
    248e:	f104 0708 	add.w	r7, r4, #8
    2492:	4638      	mov	r0, r7
    2494:	eb0d 0102 	add.w	r1, sp, r2
    2498:	f013 f8d6 	bl	15648 <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    249c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		remaining -= sizeof(hdr);
    24a0:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    24a2:	429d      	cmp	r5, r3
    24a4:	d00a      	beq.n	24bc <bt_rpmsg_rx+0xe8>
		BT_ERR("ACL payload length is not correct");
    24a6:	2145      	movs	r1, #69	; 0x45
    24a8:	480c      	ldr	r0, [pc, #48]	; (24dc <bt_rpmsg_rx+0x108>)
    24aa:	f00f fd4d 	bl	11f48 <printk>
		net_buf_unref(buf);
    24ae:	4620      	mov	r0, r4
    24b0:	f00a ff54 	bl	d35c <net_buf_unref>
	if (buf) {
    24b4:	e7a1      	b.n	23fa <bt_rpmsg_rx+0x26>
		BT_ERR("No available ACL buffers!");
    24b6:	2145      	movs	r1, #69	; 0x45
    24b8:	4809      	ldr	r0, [pc, #36]	; (24e0 <bt_rpmsg_rx+0x10c>)
    24ba:	e79c      	b.n	23f6 <bt_rpmsg_rx+0x22>
	net_buf_add_mem(buf, data, remaining);
    24bc:	462a      	mov	r2, r5
    24be:	1d71      	adds	r1, r6, #5
    24c0:	e7cb      	b.n	245a <bt_rpmsg_rx+0x86>
		BT_ERR("Unknown HCI type %u", pkt_indicator);
    24c2:	2145      	movs	r1, #69	; 0x45
    24c4:	4807      	ldr	r0, [pc, #28]	; (24e4 <bt_rpmsg_rx+0x110>)
    24c6:	f00f fd3f 	bl	11f48 <printk>
		BT_HEXDUMP_DBG(buf->data, buf->len, "RX buf payload:");
    24ca:	e796      	b.n	23fa <bt_rpmsg_rx+0x26>
    24cc:	00017ccd 	.word	0x00017ccd
    24d0:	00017cf3 	.word	0x00017cf3
    24d4:	00017d1c 	.word	0x00017d1c
    24d8:	00017d3d 	.word	0x00017d3d
    24dc:	00017d80 	.word	0x00017d80
    24e0:	00017d61 	.word	0x00017d61
    24e4:	00017da7 	.word	0x00017da7

000024e8 <virtio_set_status>:
	return *(volatile u8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(u8_t data, mem_addr_t addr)
{
	*(volatile u8_t *)addr = data;
    24e8:	4b01      	ldr	r3, [pc, #4]	; (24f0 <virtio_set_status+0x8>)
    24ea:	7019      	strb	r1, [r3, #0]
}

static void virtio_set_status(struct virtio_device *vdev, unsigned char status)
{
	sys_write8(status, VDEV_STATUS_ADDR);
}
    24ec:	4770      	bx	lr
    24ee:	bf00      	nop
    24f0:	20070000 	.word	0x20070000

000024f4 <ns_bind_cb>:
{
	rpmsg_destroy_ept(ep);
}

static void ns_bind_cb(struct rpmsg_device *rdev, const char *name, u32_t dest)
{
    24f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	(void)rpmsg_create_ept(&ep,
    24f6:	4b09      	ldr	r3, [pc, #36]	; (251c <ns_bind_cb+0x28>)
    24f8:	9302      	str	r3, [sp, #8]
    24fa:	4b09      	ldr	r3, [pc, #36]	; (2520 <ns_bind_cb+0x2c>)
    24fc:	e9cd 2300 	strd	r2, r3, [sp]
    2500:	460a      	mov	r2, r1
    2502:	f04f 33ff 	mov.w	r3, #4294967295
    2506:	4601      	mov	r1, r0
    2508:	4806      	ldr	r0, [pc, #24]	; (2524 <ns_bind_cb+0x30>)
    250a:	f00c f853 	bl	e5b4 <rpmsg_create_ept>
	z_impl_k_sem_give(sem);
    250e:	4806      	ldr	r0, [pc, #24]	; (2528 <ns_bind_cb+0x34>)
				dest,
				endpoint_cb,
				rpmsg_service_unbind);

	k_sem_give(&ready_sem);
}
    2510:	b005      	add	sp, #20
    2512:	f85d eb04 	ldr.w	lr, [sp], #4
    2516:	f00e ba93 	b.w	10a40 <z_impl_k_sem_give>
    251a:	bf00      	nop
    251c:	00012909 	.word	0x00012909
    2520:	0001290d 	.word	0x0001290d
    2524:	20000930 	.word	0x20000930
    2528:	20000428 	.word	0x20000428

0000252c <virtio_notify>:
	status = ipm_send(ipm_tx_handle, 0, 0, NULL, 0);
    252c:	4b0a      	ldr	r3, [pc, #40]	; (2558 <virtio_notify+0x2c>)
{
    252e:	b513      	push	{r0, r1, r4, lr}
	status = ipm_send(ipm_tx_handle, 0, 0, NULL, 0);
    2530:	6818      	ldr	r0, [r3, #0]
			   const void *data, int size)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->driver_api;

	return api->send(ipmdev, wait, id, data, size);
    2532:	2300      	movs	r3, #0
    2534:	6882      	ldr	r2, [r0, #8]
    2536:	9300      	str	r3, [sp, #0]
    2538:	6814      	ldr	r4, [r2, #0]
    253a:	4619      	mov	r1, r3
    253c:	461a      	mov	r2, r3
    253e:	47a0      	blx	r4
	if (status != 0) {
    2540:	4602      	mov	r2, r0
    2542:	b130      	cbz	r0, 2552 <virtio_notify+0x26>
		BT_ERR("ipm_send failed to notify: %d", status);
    2544:	2145      	movs	r1, #69	; 0x45
    2546:	4805      	ldr	r0, [pc, #20]	; (255c <virtio_notify+0x30>)
}
    2548:	b002      	add	sp, #8
    254a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("ipm_send failed to notify: %d", status);
    254e:	f00f bcfb 	b.w	11f48 <printk>
}
    2552:	b002      	add	sp, #8
    2554:	bd10      	pop	{r4, pc}
    2556:	bf00      	nop
    2558:	20000974 	.word	0x20000974
    255c:	00017dd4 	.word	0x00017dd4

00002560 <bt_rpmsg_rx_thread>:

static void bt_rpmsg_rx_thread(void *p1, void *p2, void *p3)
{
    2560:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_take(sem, timeout);
    2562:	4d07      	ldr	r5, [pc, #28]	; (2580 <bt_rpmsg_rx_thread+0x20>)

	while (1) {
		int status = k_sem_take(&rx_sem, K_FOREVER);

		if (status == 0) {
			virtqueue_notification(vq[0]);
    2564:	4c07      	ldr	r4, [pc, #28]	; (2584 <bt_rpmsg_rx_thread+0x24>)
    2566:	f04f 32ff 	mov.w	r2, #4294967295
    256a:	f04f 33ff 	mov.w	r3, #4294967295
    256e:	4628      	mov	r0, r5
    2570:	f00e faaa 	bl	10ac8 <z_impl_k_sem_take>
		if (status == 0) {
    2574:	2800      	cmp	r0, #0
    2576:	d1f6      	bne.n	2566 <bt_rpmsg_rx_thread+0x6>
			virtqueue_notification(vq[0]);
    2578:	6820      	ldr	r0, [r4, #0]
    257a:	f013 fe5c 	bl	16236 <virtqueue_notification>
	while (1) {
    257e:	e7f2      	b.n	2566 <bt_rpmsg_rx_thread+0x6>
    2580:	20000440 	.word	0x20000440
    2584:	20000a44 	.word	0x20000a44

00002588 <ipm_callback>:
	z_impl_k_sem_give(sem);
    2588:	4801      	ldr	r0, [pc, #4]	; (2590 <ipm_callback+0x8>)
    258a:	f00e ba59 	b.w	10a40 <z_impl_k_sem_give>
    258e:	bf00      	nop
    2590:	20000440 	.word	0x20000440

00002594 <bt_rpmsg_platform_init>:
		}
	}
}

int bt_rpmsg_platform_init(void)
{
    2594:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    2596:	4b5b      	ldr	r3, [pc, #364]	; (2704 <bt_rpmsg_platform_init+0x170>)
{
    2598:	b08b      	sub	sp, #44	; 0x2c
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    259a:	9308      	str	r3, [sp, #32]
    259c:	2306      	movs	r3, #6
    259e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    25a2:	2200      	movs	r2, #0
    25a4:	2300      	movs	r3, #0
    25a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    25aa:	2300      	movs	r3, #0
    25ac:	f06f 0207 	mvn.w	r2, #7
    25b0:	e9cd 3301 	strd	r3, r3, [sp, #4]
    25b4:	e9cd 2303 	strd	r2, r3, [sp, #12]
    25b8:	4953      	ldr	r1, [pc, #332]	; (2708 <bt_rpmsg_platform_init+0x174>)
    25ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
    25be:	9300      	str	r3, [sp, #0]
    25c0:	4852      	ldr	r0, [pc, #328]	; (270c <bt_rpmsg_platform_init+0x178>)
    25c2:	4b53      	ldr	r3, [pc, #332]	; (2710 <bt_rpmsg_platform_init+0x17c>)
    25c4:	f00e fb7a 	bl	10cbc <z_impl_k_thread_create>
			bt_rpmsg_rx_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_BT_RPMSG_NRF53_RX_PRIO),
			0, K_NO_WAIT);

	/* Libmetal setup */
	err = metal_init(&metal_params);
    25c8:	a808      	add	r0, sp, #32
    25ca:	f00b ff2f 	bl	e42c <metal_init>
	if (err) {
    25ce:	4604      	mov	r4, r0
    25d0:	b138      	cbz	r0, 25e2 <bt_rpmsg_platform_init+0x4e>
		BT_ERR("metal_init: failed - error code %d", err);
    25d2:	2145      	movs	r1, #69	; 0x45
    25d4:	4602      	mov	r2, r0
    25d6:	484f      	ldr	r0, [pc, #316]	; (2714 <bt_rpmsg_platform_init+0x180>)
		return err;
	}

	err = metal_register_generic_device(&shm_device);
	if (err) {
		BT_ERR("Couldn't register shared memory device: %d", err);
    25d8:	f00f fcb6 	bl	11f48 <printk>

	/* Wait til nameservice ep is setup */
	k_sem_take(&ready_sem, K_FOREVER);

	return 0;
}
    25dc:	4620      	mov	r0, r4
    25de:	b00b      	add	sp, #44	; 0x2c
    25e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = metal_register_generic_device(&shm_device);
    25e2:	484d      	ldr	r0, [pc, #308]	; (2718 <bt_rpmsg_platform_init+0x184>)
    25e4:	f00b ff02 	bl	e3ec <metal_register_generic_device>
	if (err) {
    25e8:	4604      	mov	r4, r0
    25ea:	b118      	cbz	r0, 25f4 <bt_rpmsg_platform_init+0x60>
		BT_ERR("Couldn't register shared memory device: %d", err);
    25ec:	4602      	mov	r2, r0
    25ee:	2145      	movs	r1, #69	; 0x45
    25f0:	484a      	ldr	r0, [pc, #296]	; (271c <bt_rpmsg_platform_init+0x188>)
    25f2:	e7f1      	b.n	25d8 <bt_rpmsg_platform_init+0x44>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
    25f4:	4d4a      	ldr	r5, [pc, #296]	; (2720 <bt_rpmsg_platform_init+0x18c>)
    25f6:	494b      	ldr	r1, [pc, #300]	; (2724 <bt_rpmsg_platform_init+0x190>)
    25f8:	462a      	mov	r2, r5
    25fa:	484b      	ldr	r0, [pc, #300]	; (2728 <bt_rpmsg_platform_init+0x194>)
    25fc:	f013 fb94 	bl	15d28 <metal_device_open>
	if (err) {
    2600:	4604      	mov	r4, r0
    2602:	b118      	cbz	r0, 260c <bt_rpmsg_platform_init+0x78>
		BT_ERR("metal_device_open failed: %d", err);
    2604:	4602      	mov	r2, r0
    2606:	2145      	movs	r1, #69	; 0x45
    2608:	4848      	ldr	r0, [pc, #288]	; (272c <bt_rpmsg_platform_init+0x198>)
    260a:	e7e5      	b.n	25d8 <bt_rpmsg_platform_init+0x44>
	io = metal_device_io_region(device, 0);
    260c:	682b      	ldr	r3, [r5, #0]
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
    260e:	4f48      	ldr	r7, [pc, #288]	; (2730 <bt_rpmsg_platform_init+0x19c>)
		? &device->regions[index]
		: NULL);
    2610:	689a      	ldr	r2, [r3, #8]
    2612:	b93a      	cbnz	r2, 2624 <bt_rpmsg_platform_init+0x90>
    2614:	603a      	str	r2, [r7, #0]
		BT_ERR("metal_device_io_region failed to get region");
    2616:	2145      	movs	r1, #69	; 0x45
    2618:	4846      	ldr	r0, [pc, #280]	; (2734 <bt_rpmsg_platform_init+0x1a0>)
		BT_ERR("Could not get RX IPM device handle");
    261a:	f00f fc95 	bl	11f48 <printk>
		return -ENODEV;
    261e:	f06f 0412 	mvn.w	r4, #18
    2622:	e7db      	b.n	25dc <bt_rpmsg_platform_init+0x48>
    2624:	330c      	adds	r3, #12
	io = metal_device_io_region(device, 0);
    2626:	603b      	str	r3, [r7, #0]
	if (!io) {
    2628:	2b00      	cmp	r3, #0
    262a:	d0f4      	beq.n	2616 <bt_rpmsg_platform_init+0x82>
    262c:	4842      	ldr	r0, [pc, #264]	; (2738 <bt_rpmsg_platform_init+0x1a4>)
    262e:	f00c f9eb 	bl	ea08 <z_impl_device_get_binding>
	ipm_tx_handle = device_get_binding("IPM_0");
    2632:	4b42      	ldr	r3, [pc, #264]	; (273c <bt_rpmsg_platform_init+0x1a8>)
    2634:	6018      	str	r0, [r3, #0]
	if (!ipm_tx_handle) {
    2636:	b910      	cbnz	r0, 263e <bt_rpmsg_platform_init+0xaa>
		BT_ERR("Could not get TX IPM device handle");
    2638:	2145      	movs	r1, #69	; 0x45
    263a:	4841      	ldr	r0, [pc, #260]	; (2740 <bt_rpmsg_platform_init+0x1ac>)
    263c:	e7ed      	b.n	261a <bt_rpmsg_platform_init+0x86>
    263e:	4841      	ldr	r0, [pc, #260]	; (2744 <bt_rpmsg_platform_init+0x1b0>)
    2640:	f00c f9e2 	bl	ea08 <z_impl_device_get_binding>
	if (!ipm_rx_handle) {
    2644:	b910      	cbnz	r0, 264c <bt_rpmsg_platform_init+0xb8>
		BT_ERR("Could not get RX IPM device handle");
    2646:	2145      	movs	r1, #69	; 0x45
    2648:	483f      	ldr	r0, [pc, #252]	; (2748 <bt_rpmsg_platform_init+0x1b4>)
    264a:	e7e6      	b.n	261a <bt_rpmsg_platform_init+0x86>
					 ipm_callback_t cb, void *context)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->driver_api;

	api->register_callback(ipmdev, cb, context);
    264c:	6883      	ldr	r3, [r0, #8]
    264e:	4622      	mov	r2, r4
    2650:	685b      	ldr	r3, [r3, #4]
    2652:	493e      	ldr	r1, [pc, #248]	; (274c <bt_rpmsg_platform_init+0x1b8>)
    2654:	4798      	blx	r3
#endif

#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
static inline void *metal_allocate_memory(unsigned int size)
{
	return k_malloc(size);
    2656:	20b4      	movs	r0, #180	; 0xb4
    2658:	f00c fd82 	bl	f160 <k_malloc>
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = metal_allocate_memory(vq_size);
	if (vqs) {
    265c:	4606      	mov	r6, r0
    265e:	b118      	cbz	r0, 2668 <bt_rpmsg_platform_init+0xd4>
		memset(vqs, 0x00, vq_size);
    2660:	22b4      	movs	r2, #180	; 0xb4
    2662:	4621      	mov	r1, r4
    2664:	f010 ffaf 	bl	135c6 <memset>
	vq[0] = virtqueue_allocate(VRING_SIZE);
    2668:	4d39      	ldr	r5, [pc, #228]	; (2750 <bt_rpmsg_platform_init+0x1bc>)
    266a:	602e      	str	r6, [r5, #0]
	if (!vq[0]) {
    266c:	b936      	cbnz	r6, 267c <bt_rpmsg_platform_init+0xe8>
		BT_ERR("virtqueue_allocate failed to alloc vq[0]");
    266e:	2145      	movs	r1, #69	; 0x45
    2670:	4838      	ldr	r0, [pc, #224]	; (2754 <bt_rpmsg_platform_init+0x1c0>)
		BT_ERR("virtqueue_allocate failed to alloc vq[1]");
    2672:	f00f fc69 	bl	11f48 <printk>
		return -ENOMEM;
    2676:	f06f 040b 	mvn.w	r4, #11
    267a:	e7af      	b.n	25dc <bt_rpmsg_platform_init+0x48>
    267c:	20b4      	movs	r0, #180	; 0xb4
    267e:	f00c fd6f 	bl	f160 <k_malloc>
	if (vqs) {
    2682:	4604      	mov	r4, r0
    2684:	b118      	cbz	r0, 268e <bt_rpmsg_platform_init+0xfa>
		memset(vqs, 0x00, vq_size);
    2686:	22b4      	movs	r2, #180	; 0xb4
    2688:	2100      	movs	r1, #0
    268a:	f010 ff9c 	bl	135c6 <memset>
	vq[1] = virtqueue_allocate(VRING_SIZE);
    268e:	606c      	str	r4, [r5, #4]
	if (!vq[1]) {
    2690:	b914      	cbnz	r4, 2698 <bt_rpmsg_platform_init+0x104>
		BT_ERR("virtqueue_allocate failed to alloc vq[1]");
    2692:	2145      	movs	r1, #69	; 0x45
    2694:	4830      	ldr	r0, [pc, #192]	; (2758 <bt_rpmsg_platform_init+0x1c4>)
    2696:	e7ec      	b.n	2672 <bt_rpmsg_platform_init+0xde>
	rvrings[0].io = io;
    2698:	4b30      	ldr	r3, [pc, #192]	; (275c <bt_rpmsg_platform_init+0x1c8>)
	rvrings[0].info.vaddr = (void *)VRING_TX_ADDRESS;
    269a:	4a31      	ldr	r2, [pc, #196]	; (2760 <bt_rpmsg_platform_init+0x1cc>)
	rvrings[1].vq = vq[1];
    269c:	619c      	str	r4, [r3, #24]
	rvrings[0].info.vaddr = (void *)VRING_TX_ADDRESS;
    269e:	605a      	str	r2, [r3, #4]
	rvrings[0].info.align = VRING_ALIGNMENT;
    26a0:	2204      	movs	r2, #4
    26a2:	609a      	str	r2, [r3, #8]
	rvrings[1].info.align = VRING_ALIGNMENT;
    26a4:	621a      	str	r2, [r3, #32]
	vdev.role = RPMSG_MASTER;
    26a6:	2200      	movs	r2, #0
    26a8:	4c2e      	ldr	r4, [pc, #184]	; (2764 <bt_rpmsg_platform_init+0x1d0>)
	rvrings[0].info.num_descs = VRING_SIZE;
    26aa:	2110      	movs	r1, #16
	vdev.role = RPMSG_MASTER;
    26ac:	61a2      	str	r2, [r4, #24]
	vdev.vrings_num = VRING_COUNT;
    26ae:	2202      	movs	r2, #2
	rvrings[0].io = io;
    26b0:	6838      	ldr	r0, [r7, #0]
	rvrings[0].vq = vq[0];
    26b2:	682d      	ldr	r5, [r5, #0]
	rvrings[0].io = io;
    26b4:	6158      	str	r0, [r3, #20]
	rvrings[0].vq = vq[0];
    26b6:	601d      	str	r5, [r3, #0]
	rvrings[1].io = io;
    26b8:	62d8      	str	r0, [r3, #44]	; 0x2c
	vdev.vrings_num = VRING_COUNT;
    26ba:	62a2      	str	r2, [r4, #40]	; 0x28
	rvrings[1].info.vaddr = (void *)VRING_RX_ADDRESS;
    26bc:	482a      	ldr	r0, [pc, #168]	; (2768 <bt_rpmsg_platform_init+0x1d4>)
	vdev.func = &dispatch;
    26be:	4a2b      	ldr	r2, [pc, #172]	; (276c <bt_rpmsg_platform_init+0x1d8>)
	rpmsg_virtio_init_shm_pool(&shpool, (void *)SHM_START_ADDR, SHM_SIZE);
    26c0:	4d2b      	ldr	r5, [pc, #172]	; (2770 <bt_rpmsg_platform_init+0x1dc>)
	rvrings[0].info.num_descs = VRING_SIZE;
    26c2:	8199      	strh	r1, [r3, #12]
	rvrings[1].info.vaddr = (void *)VRING_RX_ADDRESS;
    26c4:	61d8      	str	r0, [r3, #28]
	rvrings[1].info.num_descs = VRING_SIZE;
    26c6:	8499      	strh	r1, [r3, #36]	; 0x24
	vdev.func = &dispatch;
    26c8:	6222      	str	r2, [r4, #32]
	rpmsg_virtio_init_shm_pool(&shpool, (void *)SHM_START_ADDR, SHM_SIZE);
    26ca:	4628      	mov	r0, r5
    26cc:	f44f 42f8 	mov.w	r2, #31744	; 0x7c00
    26d0:	4928      	ldr	r1, [pc, #160]	; (2774 <bt_rpmsg_platform_init+0x1e0>)
	vdev.vrings_info = &rvrings[0];
    26d2:	62e3      	str	r3, [r4, #44]	; 0x2c
	rpmsg_virtio_init_shm_pool(&shpool, (void *)SHM_START_ADDR, SHM_SIZE);
    26d4:	f013 ff1e 	bl	16514 <rpmsg_virtio_init_shm_pool>
	err = rpmsg_init_vdev(&rvdev, &vdev, ns_bind_cb, io, &shpool);
    26d8:	4621      	mov	r1, r4
    26da:	683b      	ldr	r3, [r7, #0]
    26dc:	4a26      	ldr	r2, [pc, #152]	; (2778 <bt_rpmsg_platform_init+0x1e4>)
    26de:	4827      	ldr	r0, [pc, #156]	; (277c <bt_rpmsg_platform_init+0x1e8>)
    26e0:	9500      	str	r5, [sp, #0]
    26e2:	f00c f899 	bl	e818 <rpmsg_init_vdev>
	if (err) {
    26e6:	4604      	mov	r4, r0
    26e8:	b118      	cbz	r0, 26f2 <bt_rpmsg_platform_init+0x15e>
		BT_ERR("rpmsg_init_vdev failed %d", err);
    26ea:	4602      	mov	r2, r0
    26ec:	2145      	movs	r1, #69	; 0x45
    26ee:	4824      	ldr	r0, [pc, #144]	; (2780 <bt_rpmsg_platform_init+0x1ec>)
    26f0:	e772      	b.n	25d8 <bt_rpmsg_platform_init+0x44>
	return z_impl_k_sem_take(sem, timeout);
    26f2:	f04f 32ff 	mov.w	r2, #4294967295
    26f6:	f04f 33ff 	mov.w	r3, #4294967295
    26fa:	4822      	ldr	r0, [pc, #136]	; (2784 <bt_rpmsg_platform_init+0x1f0>)
    26fc:	f00e f9e4 	bl	10ac8 <z_impl_k_sem_take>
	return 0;
    2700:	e76c      	b.n	25dc <bt_rpmsg_platform_init+0x48>
    2702:	bf00      	nop
    2704:	0000e47d 	.word	0x0000e47d
    2708:	20002200 	.word	0x20002200
    270c:	200008b8 	.word	0x200008b8
    2710:	00002561 	.word	0x00002561
    2714:	00017df7 	.word	0x00017df7
    2718:	20000190 	.word	0x20000190
    271c:	00017e1f 	.word	0x00017e1f
    2720:	2000092c 	.word	0x2000092c
    2724:	00017e4f 	.word	0x00017e4f
    2728:	00017e59 	.word	0x00017e59
    272c:	00017e61 	.word	0x00017e61
    2730:	20000970 	.word	0x20000970
    2734:	00017e83 	.word	0x00017e83
    2738:	00017eb4 	.word	0x00017eb4
    273c:	20000974 	.word	0x20000974
    2740:	00017eba 	.word	0x00017eba
    2744:	00017ee2 	.word	0x00017ee2
    2748:	00017ee8 	.word	0x00017ee8
    274c:	00002589 	.word	0x00002589
    2750:	20000a44 	.word	0x20000a44
    2754:	00017f10 	.word	0x00017f10
    2758:	00017f3e 	.word	0x00017f3e
    275c:	20000a08 	.word	0x20000a08
    2760:	20077c00 	.word	0x20077c00
    2764:	20000690 	.word	0x20000690
    2768:	20077800 	.word	0x20077800
    276c:	00016df4 	.word	0x00016df4
    2770:	20000a38 	.word	0x20000a38
    2774:	20070400 	.word	0x20070400
    2778:	000024f5 	.word	0x000024f5
    277c:	20000978 	.word	0x20000978
    2780:	00017f6c 	.word	0x00017f6c
    2784:	20000428 	.word	0x20000428

00002788 <bt_rpmsg_platform_send>:

int bt_rpmsg_platform_send(struct net_buf *buf)
{
    2788:	b513      	push	{r0, r1, r4, lr}
	return rpmsg_send(&ep, buf->data, buf->len);
    278a:	6883      	ldr	r3, [r0, #8]
    278c:	8981      	ldrh	r1, [r0, #12]
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	if (ept->dest_addr == RPMSG_ADDR_ANY)
    278e:	4807      	ldr	r0, [pc, #28]	; (27ac <bt_rpmsg_platform_send+0x24>)
    2790:	6a82      	ldr	r2, [r0, #40]	; 0x28
    2792:	1c54      	adds	r4, r2, #1
    2794:	d007      	beq.n	27a6 <bt_rpmsg_platform_send+0x1e>
		return RPMSG_ERR_ADDR;
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
    2796:	2401      	movs	r4, #1
    2798:	e9cd 1400 	strd	r1, r4, [sp]
    279c:	6a41      	ldr	r1, [r0, #36]	; 0x24
    279e:	f00b fef7 	bl	e590 <rpmsg_send_offchannel_raw>
}
    27a2:	b002      	add	sp, #8
    27a4:	bd10      	pop	{r4, pc}
		return RPMSG_ERR_ADDR;
    27a6:	4802      	ldr	r0, [pc, #8]	; (27b0 <bt_rpmsg_platform_send+0x28>)
	return rpmsg_send(&ep, buf->data, buf->len);
    27a8:	e7fb      	b.n	27a2 <bt_rpmsg_platform_send+0x1a>
    27aa:	bf00      	nop
    27ac:	20000930 	.word	0x20000930
    27b0:	fffff829 	.word	0xfffff829

000027b4 <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
    27b4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
    27b6:	4c06      	ldr	r4, [pc, #24]	; (27d0 <z_clock_isr+0x1c>)
    27b8:	4906      	ldr	r1, [pc, #24]	; (27d4 <z_clock_isr+0x20>)
    27ba:	4622      	mov	r2, r4
    27bc:	4806      	ldr	r0, [pc, #24]	; (27d8 <z_clock_isr+0x24>)
    27be:	2317      	movs	r3, #23
    27c0:	f00f fbc2 	bl	11f48 <printk>
    27c4:	4620      	mov	r0, r4
}
    27c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
    27ca:	2117      	movs	r1, #23
    27cc:	f00f be52 	b.w	12474 <assert_post_action>
    27d0:	00017f9f 	.word	0x00017f9f
    27d4:	0001b82b 	.word	0x0001b82b
    27d8:	00017b50 	.word	0x00017b50

000027dc <handle_next_tick_case>:
 * counter progresses during that time it means that 1 tick elapsed and
 * interrupt is set pending.
 */
static void handle_next_tick_case(u32_t t)
{
	set_comparator(t + 2);
    27dc:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    27de:	4b08      	ldr	r3, [pc, #32]	; (2800 <handle_next_tick_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    27e0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    27e4:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    27e8:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
    27ec:	4290      	cmp	r0, r2
    27ee:	d100      	bne.n	27f2 <handle_next_tick_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
    27f0:	4770      	bx	lr
    27f2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
    27f6:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    27f8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    27fc:	e7f2      	b.n	27e4 <handle_next_tick_case+0x8>
    27fe:	bf00      	nop
    2800:	50015000 	.word	0x50015000

00002804 <rtc1_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2804:	2200      	movs	r2, #0
    2806:	4b06      	ldr	r3, [pc, #24]	; (2820 <rtc1_nrf_isr+0x1c>)
    2808:	601a      	str	r2, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	u32_t t = get_comparator();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    280a:	4a06      	ldr	r2, [pc, #24]	; (2824 <rtc1_nrf_isr+0x20>)
    return p_reg->CC[ch];
    280c:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
    2810:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    2812:	1ac0      	subs	r0, r0, r3
    2814:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    2818:	4403      	add	r3, r0
    281a:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_ticks(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    281c:	f00e be4c 	b.w	114b8 <z_clock_announce>
    2820:	50015140 	.word	0x50015140
    2824:	20000a4c 	.word	0x20000a4c

00002828 <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
    2828:	b538      	push	{r3, r4, r5, lr}
    282a:	4814      	ldr	r0, [pc, #80]	; (287c <z_clock_driver_init+0x54>)
    282c:	f00c f8ec 	bl	ea08 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_LABEL(DT_INST(0, nordic_nrf_clock)));
	if (!clock) {
    2830:	b300      	cbz	r0, 2874 <z_clock_driver_init+0x4c>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    2832:	6883      	ldr	r3, [r0, #8]
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    2834:	2400      	movs	r4, #0
    2836:	2101      	movs	r1, #1
    2838:	681b      	ldr	r3, [r3, #0]
    283a:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    283c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2840:	4d0f      	ldr	r5, [pc, #60]	; (2880 <z_clock_driver_init+0x58>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2842:	4b10      	ldr	r3, [pc, #64]	; (2884 <z_clock_driver_init+0x5c>)
    p_reg->PRESCALER = val;
    2844:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2848:	601c      	str	r4, [r3, #0]
    284a:	4b0f      	ldr	r3, [pc, #60]	; (2888 <z_clock_driver_init+0x60>)
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC1_IRQn);
	int_enable();

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    284c:	2101      	movs	r1, #1
    284e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
    2852:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2856:	4622      	mov	r2, r4
    2858:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    285c:	2015      	movs	r0, #21
    285e:	f001 f9cd 	bl	3bfc <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
    2862:	2015      	movs	r0, #21
    2864:	f001 f9ba 	bl	3bdc <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    2868:	2301      	movs	r3, #1

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
    286a:	4620      	mov	r0, r4
    286c:	4a07      	ldr	r2, [pc, #28]	; (288c <z_clock_driver_init+0x64>)
    286e:	6013      	str	r3, [r2, #0]
    2870:	602b      	str	r3, [r5, #0]
}
    2872:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    2874:	f04f 30ff 	mov.w	r0, #4294967295
    2878:	e7fb      	b.n	2872 <z_clock_driver_init+0x4a>
    287a:	bf00      	nop
    287c:	00017c7b 	.word	0x00017c7b
    2880:	50015000 	.word	0x50015000
    2884:	50015140 	.word	0x50015140
    2888:	e000e100 	.word	0xe000e100
    288c:	50015008 	.word	0x50015008

00002890 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    2890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     return p_reg->COUNTER;
    2892:	4b2c      	ldr	r3, [pc, #176]	; (2944 <z_clock_set_timeout+0xb4>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2894:	4c2c      	ldr	r4, [pc, #176]	; (2948 <z_clock_set_timeout+0xb8>)
    2896:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	u32_t unannounced = counter_sub(counter(), last_count);
    289a:	4b2c      	ldr	r3, [pc, #176]	; (294c <z_clock_set_timeout+0xbc>)
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    289c:	f1b0 3fff 	cmp.w	r0, #4294967295
    28a0:	bf08      	it	eq
    28a2:	4620      	moveq	r0, r4
	u32_t unannounced = counter_sub(counter(), last_count);
    28a4:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    28a6:	1a52      	subs	r2, r2, r1
    28a8:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    28ac:	0212      	lsls	r2, r2, #8
    28ae:	d436      	bmi.n	291e <z_clock_set_timeout+0x8e>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    28b0:	3801      	subs	r0, #1
    28b2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    28b6:	42a0      	cmp	r0, r4
    28b8:	bfa8      	it	ge
    28ba:	4620      	movge	r0, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    28bc:	3301      	adds	r3, #1
    28be:	4418      	add	r0, r3
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    28c0:	42a0      	cmp	r0, r4
    28c2:	bf94      	ite	ls
    28c4:	180c      	addls	r4, r1, r0
    28c6:	190c      	addhi	r4, r1, r4
    p_reg->INTENCLR = mask;
    28c8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    28cc:	2700      	movs	r7, #0
    p_reg->INTENCLR = mask;
    28ce:	4b1d      	ldr	r3, [pc, #116]	; (2944 <z_clock_set_timeout+0xb4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    28d0:	4e1f      	ldr	r6, [pc, #124]	; (2950 <z_clock_set_timeout+0xc0>)
    p_reg->INTENCLR = mask;
    28d2:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
     return p_reg->COUNTER;
    28d6:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    return p_reg->CC[ch];
    28da:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    28de:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	return (a - b) & COUNTER_MAX;
    28e2:	1a52      	subs	r2, r2, r1
    28e4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (counter_sub(prev_val, now) == 1) {
    28e8:	2a01      	cmp	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    28ea:	6037      	str	r7, [r6, #0]
    p_reg->CC[ch] = cc_val;
    28ec:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    28f0:	461d      	mov	r5, r3
    28f2:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
    28f6:	d103      	bne.n	2900 <z_clock_set_timeout+0x70>
	z_impl_k_busy_wait(usec_to_wait);
    28f8:	200f      	movs	r0, #15
    28fa:	f013 fec9 	bl	16690 <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    28fe:	6037      	str	r7, [r6, #0]
    2900:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2904:	4b13      	ldr	r3, [pc, #76]	; (2954 <z_clock_set_timeout+0xc4>)
    2906:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
    290a:	f8d5 0504 	ldr.w	r0, [r5, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    290e:	1a23      	subs	r3, r4, r0
    2910:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (diff == 1) {
    2914:	2b01      	cmp	r3, #1
    2916:	d104      	bne.n	2922 <z_clock_set_timeout+0x92>
		handle_next_tick_case(t);
    2918:	f7ff ff60 	bl	27dc <handle_next_tick_case>
    291c:	e00b      	b.n	2936 <z_clock_set_timeout+0xa6>
		ticks = 0;
    291e:	2000      	movs	r0, #0
    2920:	e7cc      	b.n	28bc <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    2922:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    2926:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
     return p_reg->COUNTER;
    292a:	f8d5 0504 	ldr.w	r0, [r5, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    292e:	1a24      	subs	r4, r4, r0
    2930:	3c02      	subs	r4, #2
	if (diff > MAX_TICKS) {
    2932:	0223      	lsls	r3, r4, #8
    2934:	d4f0      	bmi.n	2918 <z_clock_set_timeout+0x88>
    p_reg->INTENSET = mask;
    2936:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    293a:	4b02      	ldr	r3, [pc, #8]	; (2944 <z_clock_set_timeout+0xb4>)
    293c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	set_protected_absolute_ticks(cyc);
}
    2940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2942:	bf00      	nop
    2944:	50015000 	.word	0x50015000
    2948:	007fffff 	.word	0x007fffff
    294c:	20000a4c 	.word	0x20000a4c
    2950:	50015140 	.word	0x50015140
    2954:	e000e100 	.word	0xe000e100

00002958 <z_clock_elapsed>:

u32_t z_clock_elapsed(void)
{
    2958:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    295a:	f04f 0320 	mov.w	r3, #32
    295e:	f3ef 8511 	mrs	r5, BASEPRI
    2962:	f383 8811 	msr	BASEPRI, r3
    2966:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    296a:	481a      	ldr	r0, [pc, #104]	; (29d4 <z_clock_elapsed+0x7c>)
    296c:	f00e fa82 	bl	10e74 <z_spin_lock_valid>
    2970:	b968      	cbnz	r0, 298e <z_clock_elapsed+0x36>
    2972:	235c      	movs	r3, #92	; 0x5c
    2974:	4a18      	ldr	r2, [pc, #96]	; (29d8 <z_clock_elapsed+0x80>)
    2976:	4919      	ldr	r1, [pc, #100]	; (29dc <z_clock_elapsed+0x84>)
    2978:	4819      	ldr	r0, [pc, #100]	; (29e0 <z_clock_elapsed+0x88>)
    297a:	f00f fae5 	bl	11f48 <printk>
    297e:	4915      	ldr	r1, [pc, #84]	; (29d4 <z_clock_elapsed+0x7c>)
    2980:	4818      	ldr	r0, [pc, #96]	; (29e4 <z_clock_elapsed+0x8c>)
    2982:	f00f fae1 	bl	11f48 <printk>
    2986:	215c      	movs	r1, #92	; 0x5c
    2988:	4813      	ldr	r0, [pc, #76]	; (29d8 <z_clock_elapsed+0x80>)
    298a:	f00f fd73 	bl	12474 <assert_post_action>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
    298e:	4811      	ldr	r0, [pc, #68]	; (29d4 <z_clock_elapsed+0x7c>)
    2990:	f00e fa8c 	bl	10eac <z_spin_lock_set_owner>
     return p_reg->COUNTER;
    2994:	4b14      	ldr	r3, [pc, #80]	; (29e8 <z_clock_elapsed+0x90>)
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2996:	480f      	ldr	r0, [pc, #60]	; (29d4 <z_clock_elapsed+0x7c>)
    2998:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    299c:	4b13      	ldr	r3, [pc, #76]	; (29ec <z_clock_elapsed+0x94>)
	return (a - b) & COUNTER_MAX;
    299e:	681b      	ldr	r3, [r3, #0]
    29a0:	1ae4      	subs	r4, r4, r3
    29a2:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    29a6:	f00e fa73 	bl	10e90 <z_spin_unlock_valid>
    29aa:	b968      	cbnz	r0, 29c8 <z_clock_elapsed+0x70>
    29ac:	2384      	movs	r3, #132	; 0x84
    29ae:	4a0a      	ldr	r2, [pc, #40]	; (29d8 <z_clock_elapsed+0x80>)
    29b0:	490f      	ldr	r1, [pc, #60]	; (29f0 <z_clock_elapsed+0x98>)
    29b2:	480b      	ldr	r0, [pc, #44]	; (29e0 <z_clock_elapsed+0x88>)
    29b4:	f00f fac8 	bl	11f48 <printk>
    29b8:	4906      	ldr	r1, [pc, #24]	; (29d4 <z_clock_elapsed+0x7c>)
    29ba:	480e      	ldr	r0, [pc, #56]	; (29f4 <z_clock_elapsed+0x9c>)
    29bc:	f00f fac4 	bl	11f48 <printk>
    29c0:	2184      	movs	r1, #132	; 0x84
    29c2:	4805      	ldr	r0, [pc, #20]	; (29d8 <z_clock_elapsed+0x80>)
    29c4:	f00f fd56 	bl	12474 <assert_post_action>
	__asm__ volatile(
    29c8:	f385 8811 	msr	BASEPRI, r5
    29cc:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    29d0:	4620      	mov	r0, r4
    29d2:	bd38      	pop	{r3, r4, r5, pc}
    29d4:	20000a50 	.word	0x20000a50
    29d8:	00017fdb 	.word	0x00017fdb
    29dc:	00018001 	.word	0x00018001
    29e0:	00017b50 	.word	0x00017b50
    29e4:	00018016 	.word	0x00018016
    29e8:	50015000 	.word	0x50015000
    29ec:	20000a4c 	.word	0x20000a4c
    29f0:	0001802e 	.word	0x0001802e
    29f4:	00018045 	.word	0x00018045

000029f8 <user_data_alloc.constprop.0>:

/* Currently only one instance is supported */
static struct bt_gatt_dm bt_gatt_dm_inst;

/* Returns pointer to newly allocated space in a dm->data_chunk */
static void *user_data_alloc(struct bt_gatt_dm *dm,
    29f8:	b538      	push	{r3, r4, r5, lr}
	struct data_chunk_item *item;

	/* Round up len to 32 bits to make sure that return pointers are always
	 * correctly aligned.
	 */
	len = (len + DATA_ALIGN - 1) & ~(DATA_ALIGN - 1);
    29fa:	1cc5      	adds	r5, r0, #3
    29fc:	f025 0503 	bic.w	r5, r5, #3

	__ASSERT_NO_MSG(len <= CHUNK_DATA_SIZE);
    2a00:	2d74      	cmp	r5, #116	; 0x74
    2a02:	d909      	bls.n	2a18 <user_data_alloc.constprop.0+0x20>
    2a04:	4917      	ldr	r1, [pc, #92]	; (2a64 <user_data_alloc.constprop.0+0x6c>)
    2a06:	4818      	ldr	r0, [pc, #96]	; (2a68 <user_data_alloc.constprop.0+0x70>)
    2a08:	2350      	movs	r3, #80	; 0x50
    2a0a:	4a18      	ldr	r2, [pc, #96]	; (2a6c <user_data_alloc.constprop.0+0x74>)
    2a0c:	f00f fa9c 	bl	11f48 <printk>
    2a10:	2150      	movs	r1, #80	; 0x50
    2a12:	4816      	ldr	r0, [pc, #88]	; (2a6c <user_data_alloc.constprop.0+0x74>)
    2a14:	f00f fd2e 	bl	12474 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
    2a18:	4c15      	ldr	r4, [pc, #84]	; (2a70 <user_data_alloc.constprop.0+0x78>)

	if (sys_slist_is_empty(&dm->chunk_list) ||
    2a1a:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    2a1e:	b123      	cbz	r3, 2a2a <user_data_alloc.constprop.0+0x32>
	    dm->cur_chunk_len + len > CHUNK_DATA_SIZE) {
    2a20:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    2a24:	442b      	add	r3, r5
	if (sys_slist_is_empty(&dm->chunk_list) ||
    2a26:	2b74      	cmp	r3, #116	; 0x74
    2a28:	d918      	bls.n	2a5c <user_data_alloc.constprop.0+0x64>

		item = k_malloc(sizeof(struct data_chunk_item));
    2a2a:	2078      	movs	r0, #120	; 0x78
    2a2c:	f00c fb98 	bl	f160 <k_malloc>

		if (!item) {
    2a30:	b178      	cbz	r0, 2a52 <user_data_alloc.constprop.0+0x5a>
	parent->next = child;
    2a32:	2300      	movs	r3, #0
    2a34:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
    2a36:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    2a3a:	b95a      	cbnz	r2, 2a54 <user_data_alloc.constprop.0+0x5c>
	list->head = node;
    2a3c:	e9c4 004f 	strd	r0, r0, [r4, #316]	; 0x13c
			return NULL;
		}

		sys_slist_append(&dm->chunk_list, &item->node);
		dm->cur_chunk_len = 0;
    2a40:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
		item = SYS_SLIST_PEEK_TAIL_CONTAINER(&dm->chunk_list, item,
						     node);

	}

	user_data_loc = &item->data[dm->cur_chunk_len];
    2a44:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    2a48:	1d1a      	adds	r2, r3, #4
	dm->cur_chunk_len += len;
    2a4a:	441d      	add	r5, r3
	user_data_loc = &item->data[dm->cur_chunk_len];
    2a4c:	4410      	add	r0, r2
	dm->cur_chunk_len += len;
    2a4e:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144

	return user_data_loc;
}
    2a52:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
    2a54:	6010      	str	r0, [r2, #0]
	list->tail = node;
    2a56:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
}
    2a5a:	e7f1      	b.n	2a40 <user_data_alloc.constprop.0+0x48>
		item = SYS_SLIST_PEEK_TAIL_CONTAINER(&dm->chunk_list, item,
    2a5c:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
	return list->tail;
    2a60:	e7f0      	b.n	2a44 <user_data_alloc.constprop.0+0x4c>
    2a62:	bf00      	nop
    2a64:	00018085 	.word	0x00018085
    2a68:	00017b50 	.word	0x00017b50
    2a6c:	0001805a 	.word	0x0001805a
    2a70:	20000a54 	.word	0x20000a54

00002a74 <attr_store.constprop.0>:
 * @param[in] attr           Service attribute
 * @param[in] additional_len Additional buffer length
 *
 * @return Pointer to newly stored attribute.
 */
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    2a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_gatt_dm_attr *cur_attr;

	LOG_DBG("Attr store, pos: %zu, handle: %"PRIu16,
		dm->cur_attr_id,
		attr->handle);
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    2a78:	4c1f      	ldr	r4, [pc, #124]	; (2af8 <attr_store.constprop.0+0x84>)
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    2a7a:	4606      	mov	r6, r0
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    2a7c:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    2a80:	460d      	mov	r5, r1
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    2a82:	2b22      	cmp	r3, #34	; 0x22
    2a84:	d907      	bls.n	2a96 <attr_store.constprop.0+0x22>
		LOG_ERR("No space for new attribute.");
    2a86:	2145      	movs	r1, #69	; 0x45
    2a88:	481c      	ldr	r0, [pc, #112]	; (2afc <attr_store.constprop.0+0x88>)
    2a8a:	f00f fa5d 	bl	11f48 <printk>
		return NULL;
    2a8e:	2700      	movs	r7, #0
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];

	memcpy(cur_attr->uuid, attr->uuid, uuid_size);

	return cur_attr;
}
    2a90:	4638      	mov	r0, r7
    2a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	size_t uuid_size = get_uuid_size(attr->uuid);
    2a96:	6803      	ldr	r3, [r0, #0]
    2a98:	781b      	ldrb	r3, [r3, #0]
	switch (uuid->type) {
    2a9a:	2b02      	cmp	r3, #2
    2a9c:	d80d      	bhi.n	2aba <attr_store.constprop.0+0x46>
    2a9e:	4a18      	ldr	r2, [pc, #96]	; (2b00 <attr_store.constprop.0+0x8c>)
    2aa0:	f812 9003 	ldrb.w	r9, [r2, r3]
	u8_t *attr_data = user_data_alloc(dm, additional_len + uuid_size);
    2aa4:	eb05 0009 	add.w	r0, r5, r9
    2aa8:	f7ff ffa6 	bl	29f8 <user_data_alloc.constprop.0>
	if (!attr_data) {
    2aac:	4607      	mov	r7, r0
    2aae:	b958      	cbnz	r0, 2ac8 <attr_store.constprop.0+0x54>
		LOG_ERR("No space for attribute data.");
    2ab0:	2145      	movs	r1, #69	; 0x45
    2ab2:	4814      	ldr	r0, [pc, #80]	; (2b04 <attr_store.constprop.0+0x90>)
    2ab4:	f00f fa48 	bl	11f48 <printk>
		return NULL;
    2ab8:	e7ea      	b.n	2a90 <attr_store.constprop.0+0x1c>
		LOG_ERR("Unsupported UUID type.");
    2aba:	2145      	movs	r1, #69	; 0x45
    2abc:	4812      	ldr	r0, [pc, #72]	; (2b08 <attr_store.constprop.0+0x94>)
    2abe:	f00f fa43 	bl	11f48 <printk>
    2ac2:	f04f 0900 	mov.w	r9, #0
    2ac6:	e7ed      	b.n	2aa4 <attr_store.constprop.0+0x30>
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
    2ac8:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];
    2acc:	4428      	add	r0, r5
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
    2ace:	1c5a      	adds	r2, r3, #1
    2ad0:	3303      	adds	r3, #3
    2ad2:	00db      	lsls	r3, r3, #3
    2ad4:	f103 0804 	add.w	r8, r3, #4
    2ad8:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
    2adc:	44a0      	add	r8, r4
	cur_attr->handle = attr->handle;
    2ade:	441c      	add	r4, r3
    2ae0:	8a33      	ldrh	r3, [r6, #16]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    2ae2:	464a      	mov	r2, r9
	cur_attr->handle = attr->handle;
    2ae4:	8123      	strh	r3, [r4, #8]
	cur_attr->perm = attr->perm;
    2ae6:	7cb3      	ldrb	r3, [r6, #18]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    2ae8:	6831      	ldr	r1, [r6, #0]
	cur_attr->perm = attr->perm;
    2aea:	72a3      	strb	r3, [r4, #10]
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];
    2aec:	6060      	str	r0, [r4, #4]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    2aee:	f010 fd3f 	bl	13570 <memcpy>
	return cur_attr;
    2af2:	4647      	mov	r7, r8
    2af4:	e7cc      	b.n	2a90 <attr_store.constprop.0+0x1c>
    2af6:	bf00      	nop
    2af8:	20000a54 	.word	0x20000a54
    2afc:	000180d5 	.word	0x000180d5
    2b00:	0001844a 	.word	0x0001844a
    2b04:	00018112 	.word	0x00018112
    2b08:	000180f6 	.word	0x000180f6

00002b0c <discovery_complete.constprop.0>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2b0c:	4808      	ldr	r0, [pc, #32]	; (2b30 <discovery_complete.constprop.0+0x24>)
    2b0e:	f500 739c 	add.w	r3, r0, #312	; 0x138
    2b12:	e8d3 2fef 	ldaex	r2, [r3]
    2b16:	f042 0202 	orr.w	r2, r2, #2
    2b1a:	e8c3 2fe1 	stlex	r1, r2, [r3]
    2b1e:	2900      	cmp	r1, #0
    2b20:	d1f7      	bne.n	2b12 <discovery_complete.constprop.0+0x6>

static void discovery_complete(struct bt_gatt_dm *dm)
{
	LOG_DBG("Discovery complete.");
	atomic_set_bit(dm->state_flags, STATE_ATTRS_RELEASE_PENDING);
	if (dm->callback->completed) {
    2b22:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
    2b26:	681b      	ldr	r3, [r3, #0]
    2b28:	b10b      	cbz	r3, 2b2e <discovery_complete.constprop.0+0x22>
		dm->callback->completed(dm, dm->context);
    2b2a:	6841      	ldr	r1, [r0, #4]
    2b2c:	4718      	bx	r3
	}
}
    2b2e:	4770      	bx	lr
    2b30:	20000a54 	.word	0x20000a54

00002b34 <discovery_complete_error.constprop.0>:
	if (dm->callback->service_not_found) {
		dm->callback->service_not_found(dm->conn, dm->context);
	}
}

static void discovery_complete_error(struct bt_gatt_dm *dm, int err)
    2b34:	b570      	push	{r4, r5, r6, lr}
{
	svc_attr_memory_release(dm);
    2b36:	4c0b      	ldr	r4, [pc, #44]	; (2b64 <discovery_complete_error.constprop.0+0x30>)
static void discovery_complete_error(struct bt_gatt_dm *dm, int err)
    2b38:	4605      	mov	r5, r0
	svc_attr_memory_release(dm);
    2b3a:	4620      	mov	r0, r4
    2b3c:	f00f ff0c 	bl	12958 <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2b40:	f06f 0101 	mvn.w	r1, #1
    2b44:	f504 709c 	add.w	r0, r4, #312	; 0x138
    2b48:	f00f ff1d 	bl	12986 <atomic_and>
	atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);
	if (dm->callback->error_found) {
    2b4c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    2b50:	689b      	ldr	r3, [r3, #8]
    2b52:	b12b      	cbz	r3, 2b60 <discovery_complete_error.constprop.0+0x2c>
		dm->callback->error_found(dm->conn, err, dm->context);
    2b54:	4629      	mov	r1, r5
    2b56:	6862      	ldr	r2, [r4, #4]
    2b58:	6820      	ldr	r0, [r4, #0]
	}
}
    2b5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		dm->callback->error_found(dm->conn, err, dm->context);
    2b5e:	4718      	bx	r3
}
    2b60:	bd70      	pop	{r4, r5, r6, pc}
    2b62:	bf00      	nop
    2b64:	20000a54 	.word	0x20000a54

00002b68 <uuid_store.constprop.0>:
static struct bt_uuid *uuid_store(struct bt_gatt_dm *dm,
    2b68:	b570      	push	{r4, r5, r6, lr}
	if (!uuid) {
    2b6a:	4604      	mov	r4, r0
    2b6c:	b930      	cbnz	r0, 2b7c <uuid_store.constprop.0+0x14>
		LOG_ERR("Uninitialized UUID.");
    2b6e:	2145      	movs	r1, #69	; 0x45
    2b70:	480c      	ldr	r0, [pc, #48]	; (2ba4 <uuid_store.constprop.0+0x3c>)
    2b72:	f00f f9e9 	bl	11f48 <printk>
    2b76:	4625      	mov	r5, r4
}
    2b78:	4628      	mov	r0, r5
    2b7a:	bd70      	pop	{r4, r5, r6, pc}
	size_t size = get_uuid_size(uuid);
    2b7c:	7803      	ldrb	r3, [r0, #0]
	switch (uuid->type) {
    2b7e:	2b02      	cmp	r3, #2
    2b80:	d80a      	bhi.n	2b98 <uuid_store.constprop.0+0x30>
    2b82:	4a09      	ldr	r2, [pc, #36]	; (2ba8 <uuid_store.constprop.0+0x40>)
    2b84:	5cd6      	ldrb	r6, [r2, r3]
	void *buffer = user_data_alloc(dm, size);
    2b86:	4630      	mov	r0, r6
    2b88:	f7ff ff36 	bl	29f8 <user_data_alloc.constprop.0>
	memcpy(buffer, uuid, size);
    2b8c:	4632      	mov	r2, r6
    2b8e:	4621      	mov	r1, r4
	void *buffer = user_data_alloc(dm, size);
    2b90:	4605      	mov	r5, r0
	memcpy(buffer, uuid, size);
    2b92:	f010 fced 	bl	13570 <memcpy>
	return (struct bt_uuid *)buffer;
    2b96:	e7ef      	b.n	2b78 <uuid_store.constprop.0+0x10>
		LOG_ERR("Unsupported UUID type.");
    2b98:	2145      	movs	r1, #69	; 0x45
    2b9a:	4804      	ldr	r0, [pc, #16]	; (2bac <uuid_store.constprop.0+0x44>)
    2b9c:	f00f f9d4 	bl	11f48 <printk>
    2ba0:	2600      	movs	r6, #0
    2ba2:	e7f0      	b.n	2b86 <uuid_store.constprop.0+0x1e>
    2ba4:	00018134 	.word	0x00018134
    2ba8:	0001844a 	.word	0x0001844a
    2bac:	000180f6 	.word	0x000180f6

00002bb0 <discovery_callback>:
}

static u8_t discovery_callback(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr,
			       struct bt_gatt_discover_params *params)
{
    2bb0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    2bb4:	460d      	mov	r5, r1
		LOG_DBG("NULL attribute");
	} else {
		LOG_DBG("Attr: handle %u", attr->handle);
	}

	if (conn != bt_gatt_dm_inst.conn) {
    2bb6:	497d      	ldr	r1, [pc, #500]	; (2dac <discovery_callback+0x1fc>)
    2bb8:	680b      	ldr	r3, [r1, #0]
    2bba:	460f      	mov	r7, r1
    2bbc:	4283      	cmp	r3, r0
    2bbe:	d008      	beq.n	2bd2 <discovery_callback+0x22>
		LOG_ERR("Unexpected conn object. Aborting.");
    2bc0:	487b      	ldr	r0, [pc, #492]	; (2db0 <discovery_callback+0x200>)
    2bc2:	2145      	movs	r1, #69	; 0x45
    2bc4:	f00f f9c0 	bl	11f48 <printk>
		discovery_complete_error(&bt_gatt_dm_inst, -EFAULT);
    2bc8:	f06f 000d 	mvn.w	r0, #13
				discovery_complete_error(dm, err);
    2bcc:	f7ff ffb2 	bl	2b34 <discovery_complete_error.constprop.0>
    2bd0:	e034      	b.n	2c3c <discovery_callback+0x8c>
		return BT_GATT_ITER_STOP;
	}

	switch (params->type) {
    2bd2:	7c13      	ldrb	r3, [r2, #16]
    2bd4:	2b03      	cmp	r3, #3
    2bd6:	f000 80b3 	beq.w	2d40 <discovery_callback+0x190>
    2bda:	d811      	bhi.n	2c00 <discovery_callback+0x50>
    2bdc:	2b02      	cmp	r3, #2
    2bde:	d129      	bne.n	2c34 <discovery_callback+0x84>
		return discovery_process_characteristic(&bt_gatt_dm_inst,
							attr,
							params);
	default:
		/* This should not be possible */
		__ASSERT(false, "Unknown param type.");
    2be0:	f240 13b3 	movw	r3, #435	; 0x1b3
    2be4:	4a73      	ldr	r2, [pc, #460]	; (2db4 <discovery_callback+0x204>)
    2be6:	4974      	ldr	r1, [pc, #464]	; (2db8 <discovery_callback+0x208>)
    2be8:	4874      	ldr	r0, [pc, #464]	; (2dbc <discovery_callback+0x20c>)
    2bea:	f00f f9ad 	bl	11f48 <printk>
    2bee:	4874      	ldr	r0, [pc, #464]	; (2dc0 <discovery_callback+0x210>)
    2bf0:	f00f f9aa 	bl	11f48 <printk>
    2bf4:	f240 11b3 	movw	r1, #435	; 0x1b3
    2bf8:	486e      	ldr	r0, [pc, #440]	; (2db4 <discovery_callback+0x204>)
    2bfa:	f00f fc3b 	bl	12474 <assert_post_action>
    2bfe:	e01d      	b.n	2c3c <discovery_callback+0x8c>
	switch (params->type) {
    2c00:	2b05      	cmp	r3, #5
    2c02:	d1ed      	bne.n	2be0 <discovery_callback+0x30>
	if (!attr) {
    2c04:	2d00      	cmp	r5, #0
    2c06:	f040 8082 	bne.w	2d0e <discovery_callback+0x15e>
		if (dm->cur_attr_id > 1) {
    2c0a:	f8d1 3134 	ldr.w	r3, [r1, #308]	; 0x134
    2c0e:	2b01      	cmp	r3, #1
    2c10:	d97a      	bls.n	2d08 <discovery_callback+0x158>
				dm->attrs[0].handle + 1;
    2c12:	8c0b      	ldrh	r3, [r1, #32]
			int err = bt_gatt_discover(dm->conn,
    2c14:	3108      	adds	r1, #8
				dm->attrs[0].handle + 1;
    2c16:	3301      	adds	r3, #1
			dm->discover_params.start_handle =
    2c18:	810b      	strh	r3, [r1, #8]
			dm->discover_params.type =
    2c1a:	2303      	movs	r3, #3
    2c1c:	740b      	strb	r3, [r1, #16]
			int err = bt_gatt_discover(dm->conn,
    2c1e:	f007 fe7f 	bl	a920 <bt_gatt_discover>
			if (err) {
    2c22:	4604      	mov	r4, r0
    2c24:	b150      	cbz	r0, 2c3c <discovery_callback+0x8c>
				LOG_ERR("Characteristic discover failed,"
    2c26:	4602      	mov	r2, r0
    2c28:	2145      	movs	r1, #69	; 0x45
    2c2a:	4866      	ldr	r0, [pc, #408]	; (2dc4 <discovery_callback+0x214>)
    2c2c:	f00f f98c 	bl	11f48 <printk>
				discovery_complete_error(dm, err);
    2c30:	4620      	mov	r0, r4
    2c32:	e7cb      	b.n	2bcc <discovery_callback+0x1c>
	if (!attr) {
    2c34:	b925      	cbnz	r5, 2c40 <discovery_callback+0x90>
		discovery_complete_not_found(dm);
    2c36:	4608      	mov	r0, r1
    2c38:	f00f feb0 	bl	1299c <discovery_complete_not_found>
		__ASSERT(false, "Unknown param type.");
    2c3c:	2400      	movs	r4, #0
    2c3e:	e04b      	b.n	2cd8 <discovery_callback+0x128>
		attr_store(dm, attr, sizeof(*service_val));
    2c40:	2108      	movs	r1, #8
    2c42:	4628      	mov	r0, r5
	struct bt_gatt_service_val *service_val = attr->user_data;
    2c44:	f8d5 800c 	ldr.w	r8, [r5, #12]
		attr_store(dm, attr, sizeof(*service_val));
    2c48:	f7ff ff14 	bl	2a74 <attr_store.constprop.0>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
    2c4c:	2400      	movs	r4, #0
    2c4e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
		attr_store(dm, attr, sizeof(*service_val));
    2c52:	4606      	mov	r6, r0
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
    2c54:	a901      	add	r1, sp, #4
    2c56:	6828      	ldr	r0, [r5, #0]
    2c58:	f88d 4004 	strb.w	r4, [sp, #4]
    2c5c:	f8ad 3006 	strh.w	r3, [sp, #6]
    2c60:	f010 fd21 	bl	136a6 <bt_uuid_cmp>
    2c64:	b1b0      	cbz	r0, 2c94 <discovery_callback+0xe4>
    2c66:	f642 0301 	movw	r3, #10241	; 0x2801
    2c6a:	4669      	mov	r1, sp
    2c6c:	6828      	ldr	r0, [r5, #0]
    2c6e:	f88d 4000 	strb.w	r4, [sp]
    2c72:	f8ad 3002 	strh.w	r3, [sp, #2]
    2c76:	f010 fd16 	bl	136a6 <bt_uuid_cmp>
    2c7a:	b158      	cbz	r0, 2c94 <discovery_callback+0xe4>
    2c7c:	4952      	ldr	r1, [pc, #328]	; (2dc8 <discovery_callback+0x218>)
    2c7e:	484f      	ldr	r0, [pc, #316]	; (2dbc <discovery_callback+0x20c>)
    2c80:	f240 1317 	movw	r3, #279	; 0x117
    2c84:	4a4b      	ldr	r2, [pc, #300]	; (2db4 <discovery_callback+0x204>)
    2c86:	f00f f95f 	bl	11f48 <printk>
    2c8a:	f240 1117 	movw	r1, #279	; 0x117
    2c8e:	4849      	ldr	r0, [pc, #292]	; (2db4 <discovery_callback+0x204>)
    2c90:	f00f fbf0 	bl	12474 <assert_post_action>
	if (!cur_attr) {
    2c94:	b936      	cbnz	r6, 2ca4 <discovery_callback+0xf4>
		LOG_ERR("Not enough memory for service attribute.");
    2c96:	484d      	ldr	r0, [pc, #308]	; (2dcc <discovery_callback+0x21c>)
    2c98:	2145      	movs	r1, #69	; 0x45
    2c9a:	f00f f955 	bl	11f48 <printk>
		discovery_complete_error(dm, -ENOMEM);
    2c9e:	f06f 000b 	mvn.w	r0, #11
    2ca2:	e793      	b.n	2bcc <discovery_callback+0x1c>
		bt_gatt_dm_attr_service_val(cur_attr);
    2ca4:	4630      	mov	r0, r6
    2ca6:	f00f fe8d 	bl	129c4 <bt_gatt_dm_attr_service_val>
    2caa:	4605      	mov	r5, r0
	memcpy(cur_service_val, service_val, sizeof(*cur_service_val));
    2cac:	2208      	movs	r2, #8
    2cae:	4641      	mov	r1, r8
    2cb0:	f010 fc5e 	bl	13570 <memcpy>
	cur_service_val->uuid = uuid_store(dm, cur_service_val->uuid);
    2cb4:	6828      	ldr	r0, [r5, #0]
    2cb6:	f7ff ff57 	bl	2b68 <uuid_store.constprop.0>
    2cba:	4604      	mov	r4, r0
    2cbc:	6028      	str	r0, [r5, #0]
	if (!cur_service_val->uuid) {
    2cbe:	b930      	cbnz	r0, 2cce <discovery_callback+0x11e>
		LOG_ERR("Not enough memory for service attribute data.");
    2cc0:	2145      	movs	r1, #69	; 0x45
    2cc2:	4843      	ldr	r0, [pc, #268]	; (2dd0 <discovery_callback+0x220>)
    2cc4:	f00f f940 	bl	11f48 <printk>
		discovery_complete_error(dm, -ENOMEM);
    2cc8:	f06f 000b 	mvn.w	r0, #11
    2ccc:	e05a      	b.n	2d84 <discovery_callback+0x1d4>
	if (cur_attr->handle == cur_service_val->end_handle) {
    2cce:	88aa      	ldrh	r2, [r5, #4]
    2cd0:	88b3      	ldrh	r3, [r6, #4]
    2cd2:	4293      	cmp	r3, r2
    2cd4:	d104      	bne.n	2ce0 <discovery_callback+0x130>
		return BT_GATT_ITER_CONTINUE;
    2cd6:	2401      	movs	r4, #1
		break;
	}

	return BT_GATT_ITER_STOP;
}
    2cd8:	4620      	mov	r0, r4
    2cda:	b002      	add	sp, #8
    2cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
    2ce0:	2305      	movs	r3, #5
	dm->discover_params.uuid         = NULL;
    2ce2:	2400      	movs	r4, #0
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
    2ce4:	763b      	strb	r3, [r7, #24]
	dm->discover_params.start_handle = cur_attr->handle + 1;
    2ce6:	88b3      	ldrh	r3, [r6, #4]
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
    2ce8:	493a      	ldr	r1, [pc, #232]	; (2dd4 <discovery_callback+0x224>)
	dm->discover_params.start_handle = cur_attr->handle + 1;
    2cea:	3301      	adds	r3, #1
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
    2cec:	6838      	ldr	r0, [r7, #0]
	dm->discover_params.end_handle   = cur_service_val->end_handle;
    2cee:	82fa      	strh	r2, [r7, #22]
	dm->discover_params.uuid         = NULL;
    2cf0:	60bc      	str	r4, [r7, #8]
	dm->discover_params.start_handle = cur_attr->handle + 1;
    2cf2:	823b      	strh	r3, [r7, #16]
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
    2cf4:	f007 fe14 	bl	a920 <bt_gatt_discover>
	if (err) {
    2cf8:	4602      	mov	r2, r0
    2cfa:	2800      	cmp	r0, #0
    2cfc:	d09e      	beq.n	2c3c <discovery_callback+0x8c>
		LOG_ERR("Descriptor discover failed, error: %d.", err);
    2cfe:	2145      	movs	r1, #69	; 0x45
    2d00:	4835      	ldr	r0, [pc, #212]	; (2dd8 <discovery_callback+0x228>)
		LOG_ERR("Not enough memory for next attribute descriptor"
    2d02:	f00f f921 	bl	11f48 <printk>
		discovery_complete_error(dm, -ENOMEM);
    2d06:	e7df      	b.n	2cc8 <discovery_callback+0x118>
			discovery_complete(dm);
    2d08:	f7ff ff00 	bl	2b0c <discovery_complete.constprop.0>
    2d0c:	e796      	b.n	2c3c <discovery_callback+0x8c>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
    2d0e:	2400      	movs	r4, #0
    2d10:	f642 0303 	movw	r3, #10243	; 0x2803
    2d14:	6828      	ldr	r0, [r5, #0]
    2d16:	a901      	add	r1, sp, #4
    2d18:	f88d 4004 	strb.w	r4, [sp, #4]
    2d1c:	f8ad 3006 	strh.w	r3, [sp, #6]
    2d20:	f010 fcc1 	bl	136a6 <bt_uuid_cmp>
    2d24:	b950      	cbnz	r0, 2d3c <discovery_callback+0x18c>
		cur_attr = attr_store(dm, attr, sizeof(struct bt_gatt_chrc));
    2d26:	2108      	movs	r1, #8
		cur_attr = attr_store(dm, attr, 0);
    2d28:	4628      	mov	r0, r5
    2d2a:	f7ff fea3 	bl	2a74 <attr_store.constprop.0>
    2d2e:	4604      	mov	r4, r0
	if (!cur_attr) {
    2d30:	2800      	cmp	r0, #0
    2d32:	d1d0      	bne.n	2cd6 <discovery_callback+0x126>
		LOG_ERR("Not enough memory for next attribute descriptor"
    2d34:	2145      	movs	r1, #69	; 0x45
    2d36:	8a2a      	ldrh	r2, [r5, #16]
    2d38:	4828      	ldr	r0, [pc, #160]	; (2ddc <discovery_callback+0x22c>)
    2d3a:	e7e2      	b.n	2d02 <discovery_callback+0x152>
		cur_attr = attr_store(dm, attr, 0);
    2d3c:	4621      	mov	r1, r4
    2d3e:	e7f3      	b.n	2d28 <discovery_callback+0x178>
	if (!attr) {
    2d40:	2d00      	cmp	r5, #0
    2d42:	d0e1      	beq.n	2d08 <discovery_callback+0x158>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0);
    2d44:	2300      	movs	r3, #0
    2d46:	f88d 3004 	strb.w	r3, [sp, #4]
    2d4a:	f642 0303 	movw	r3, #10243	; 0x2803
    2d4e:	6828      	ldr	r0, [r5, #0]
    2d50:	a901      	add	r1, sp, #4
    2d52:	f8ad 3006 	strh.w	r3, [sp, #6]
    2d56:	f010 fca6 	bl	136a6 <bt_uuid_cmp>
    2d5a:	b158      	cbz	r0, 2d74 <discovery_callback+0x1c4>
    2d5c:	4920      	ldr	r1, [pc, #128]	; (2de0 <discovery_callback+0x230>)
    2d5e:	4817      	ldr	r0, [pc, #92]	; (2dbc <discovery_callback+0x20c>)
    2d60:	f44f 73c0 	mov.w	r3, #384	; 0x180
    2d64:	4a13      	ldr	r2, [pc, #76]	; (2db4 <discovery_callback+0x204>)
    2d66:	f00f f8ef 	bl	11f48 <printk>
    2d6a:	f44f 71c0 	mov.w	r1, #384	; 0x180
    2d6e:	4811      	ldr	r0, [pc, #68]	; (2db4 <discovery_callback+0x204>)
    2d70:	f00f fb80 	bl	12474 <assert_post_action>
	cur_attr = attr_find_by_handle(dm, attr->handle);
    2d74:	8a29      	ldrh	r1, [r5, #16]
    2d76:	480d      	ldr	r0, [pc, #52]	; (2dac <discovery_callback+0x1fc>)
    2d78:	f00f fdd0 	bl	1291c <attr_find_by_handle>
	if (!cur_attr) {
    2d7c:	4604      	mov	r4, r0
    2d7e:	b920      	cbnz	r0, 2d8a <discovery_callback+0x1da>
		discovery_complete_error(dm, -ESRCH);
    2d80:	f06f 0002 	mvn.w	r0, #2
		discovery_complete_error(dm, -ENOMEM);
    2d84:	f7ff fed6 	bl	2b34 <discovery_complete_error.constprop.0>
		return BT_GATT_ITER_STOP;
    2d88:	e7a6      	b.n	2cd8 <discovery_callback+0x128>
	gatt_chrc = attr->user_data;
    2d8a:	68ec      	ldr	r4, [r5, #12]
	cur_gatt_chrc = bt_gatt_dm_attr_chrc_val(cur_attr);
    2d8c:	f00f fe3a 	bl	12a04 <bt_gatt_dm_attr_chrc_val>
    2d90:	4605      	mov	r5, r0
	memcpy(cur_gatt_chrc, gatt_chrc, sizeof(*cur_gatt_chrc));
    2d92:	4621      	mov	r1, r4
    2d94:	2208      	movs	r2, #8
    2d96:	f010 fbeb 	bl	13570 <memcpy>
	cur_gatt_chrc->uuid = uuid_store(dm, cur_gatt_chrc->uuid);
    2d9a:	6828      	ldr	r0, [r5, #0]
    2d9c:	f7ff fee4 	bl	2b68 <uuid_store.constprop.0>
    2da0:	4604      	mov	r4, r0
    2da2:	6028      	str	r0, [r5, #0]
	if (!cur_gatt_chrc->uuid) {
    2da4:	2800      	cmp	r0, #0
    2da6:	d196      	bne.n	2cd6 <discovery_callback+0x126>
    2da8:	e78e      	b.n	2cc8 <discovery_callback+0x118>
    2daa:	bf00      	nop
    2dac:	20000a54 	.word	0x20000a54
    2db0:	0001814d 	.word	0x0001814d
    2db4:	0001805a 	.word	0x0001805a
    2db8:	0001b82b 	.word	0x0001b82b
    2dbc:	00017b50 	.word	0x00017b50
    2dc0:	000183f4 	.word	0x000183f4
    2dc4:	00018302 	.word	0x00018302
    2dc8:	00018174 	.word	0x00018174
    2dcc:	00018275 	.word	0x00018275
    2dd0:	000182a3 	.word	0x000182a3
    2dd4:	20000a5c 	.word	0x20000a5c
    2dd8:	000182d6 	.word	0x000182d6
    2ddc:	00018332 	.word	0x00018332
    2de0:	00018375 	.word	0x00018375

00002de4 <bt_gatt_dm_char_by_uuid>:
}

const struct bt_gatt_dm_attr *bt_gatt_dm_char_by_uuid(
	const struct bt_gatt_dm *dm,
	const struct bt_uuid *uuid)
{
    2de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2de8:	4606      	mov	r6, r0
    2dea:	460f      	mov	r7, r1
	const struct bt_gatt_dm_attr *curr = NULL;
    2dec:	2400      	movs	r4, #0

	while ((curr = bt_gatt_dm_char_next(dm, curr)) != NULL) {
		struct bt_gatt_chrc *chrc = bt_gatt_dm_attr_chrc_val(curr);

		__ASSERT_NO_MSG(chrc != NULL);
    2dee:	f8df 8048 	ldr.w	r8, [pc, #72]	; 2e38 <bt_gatt_dm_char_by_uuid+0x54>
    2df2:	f8df 9048 	ldr.w	r9, [pc, #72]	; 2e3c <bt_gatt_dm_char_by_uuid+0x58>
    2df6:	f8df a048 	ldr.w	sl, [pc, #72]	; 2e40 <bt_gatt_dm_char_by_uuid+0x5c>
	while ((curr = bt_gatt_dm_char_next(dm, curr)) != NULL) {
    2dfa:	4621      	mov	r1, r4
    2dfc:	4630      	mov	r0, r6
    2dfe:	f00f fe19 	bl	12a34 <bt_gatt_dm_char_next>
    2e02:	4604      	mov	r4, r0
    2e04:	b1a8      	cbz	r0, 2e32 <bt_gatt_dm_char_by_uuid+0x4e>
		struct bt_gatt_chrc *chrc = bt_gatt_dm_attr_chrc_val(curr);
    2e06:	f00f fdfd 	bl	12a04 <bt_gatt_dm_attr_chrc_val>
		__ASSERT_NO_MSG(chrc != NULL);
    2e0a:	4605      	mov	r5, r0
    2e0c:	b958      	cbnz	r0, 2e26 <bt_gatt_dm_char_by_uuid+0x42>
    2e0e:	4649      	mov	r1, r9
    2e10:	4650      	mov	r0, sl
    2e12:	f240 13fb 	movw	r3, #507	; 0x1fb
    2e16:	4642      	mov	r2, r8
    2e18:	f00f f896 	bl	11f48 <printk>
    2e1c:	f240 11fb 	movw	r1, #507	; 0x1fb
    2e20:	4640      	mov	r0, r8
    2e22:	f00f fb27 	bl	12474 <assert_post_action>
		if (!bt_uuid_cmp(uuid, chrc->uuid)) {
    2e26:	4638      	mov	r0, r7
    2e28:	6829      	ldr	r1, [r5, #0]
    2e2a:	f010 fc3c 	bl	136a6 <bt_uuid_cmp>
    2e2e:	2800      	cmp	r0, #0
    2e30:	d1e3      	bne.n	2dfa <bt_gatt_dm_char_by_uuid+0x16>
			return curr;
		}
	}

	return NULL;
}
    2e32:	4620      	mov	r0, r4
    2e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2e38:	0001805a 	.word	0x0001805a
    2e3c:	0001840a 	.word	0x0001840a
    2e40:	00017b50 	.word	0x00017b50

00002e44 <bt_gatt_dm_start>:

int bt_gatt_dm_start(struct bt_conn *conn,
		     const struct bt_uuid *svc_uuid,
		     const struct bt_gatt_dm_cb *cb,
		     void *context)
{
    2e44:	b570      	push	{r4, r5, r6, lr}
    2e46:	4605      	mov	r5, r0
	int err;
	struct bt_gatt_dm *dm;

	if (svc_uuid &&
    2e48:	4608      	mov	r0, r1
    2e4a:	b119      	cbz	r1, 2e54 <bt_gatt_dm_start+0x10>
    2e4c:	7809      	ldrb	r1, [r1, #0]
    2e4e:	f011 0ffd 	tst.w	r1, #253	; 0xfd
    2e52:	d139      	bne.n	2ec8 <bt_gatt_dm_start+0x84>
	    (svc_uuid->type != BT_UUID_TYPE_16) &&
	    (svc_uuid->type != BT_UUID_TYPE_128)) {
		return -EINVAL;
	}

	if (!cb) {
    2e54:	2a00      	cmp	r2, #0
    2e56:	d037      	beq.n	2ec8 <bt_gatt_dm_start+0x84>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2e58:	4c1e      	ldr	r4, [pc, #120]	; (2ed4 <bt_gatt_dm_start+0x90>)
    2e5a:	f504 769c 	add.w	r6, r4, #312	; 0x138
    2e5e:	e8d6 1fef 	ldaex	r1, [r6]
    2e62:	f041 0c01 	orr.w	ip, r1, #1
    2e66:	e8c6 cfee 	stlex	lr, ip, [r6]
    2e6a:	f1be 0f00 	cmp.w	lr, #0
    2e6e:	d1f6      	bne.n	2e5e <bt_gatt_dm_start+0x1a>
		return -EINVAL;
	}

	dm = &bt_gatt_dm_inst;

	if (atomic_test_and_set_bit(dm->state_flags, STATE_ATTRS_LOCKED)) {
    2e70:	f011 0101 	ands.w	r1, r1, #1
    2e74:	d12b      	bne.n	2ece <bt_gatt_dm_start+0x8a>
		return -EALREADY;
	}

	dm->conn = conn;
	dm->context = context;
    2e76:	e9c4 5300 	strd	r5, r3, [r4]
	list->tail = NULL;
    2e7a:	e9c4 114f 	strd	r1, r1, [r4, #316]	; 0x13c
	dm->callback = cb;
    2e7e:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
	dm->cur_attr_id = 0;
    2e82:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
	sys_slist_init(&dm->chunk_list);
	dm->cur_chunk_len = 0;
    2e86:	f8c4 1144 	str.w	r1, [r4, #324]	; 0x144

	dm->discover_params.uuid = svc_uuid ? uuid_store(dm, svc_uuid) : NULL;
    2e8a:	b108      	cbz	r0, 2e90 <bt_gatt_dm_start+0x4c>
    2e8c:	f7ff fe6c 	bl	2b68 <uuid_store.constprop.0>
	dm->discover_params.func = discovery_callback;
    2e90:	4b11      	ldr	r3, [pc, #68]	; (2ed8 <bt_gatt_dm_start+0x94>)
	dm->discover_params.uuid = svc_uuid ? uuid_store(dm, svc_uuid) : NULL;
    2e92:	60a0      	str	r0, [r4, #8]
	dm->discover_params.func = discovery_callback;
    2e94:	60e3      	str	r3, [r4, #12]
	dm->discover_params.start_handle = 0x0001;
    2e96:	2301      	movs	r3, #1
    2e98:	8223      	strh	r3, [r4, #16]
	dm->discover_params.end_handle = 0xffff;
    2e9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2e9e:	82e3      	strh	r3, [r4, #22]
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
    2ea0:	2300      	movs	r3, #0

	err = bt_gatt_discover(conn, &dm->discover_params);
    2ea2:	4628      	mov	r0, r5
    2ea4:	490d      	ldr	r1, [pc, #52]	; (2edc <bt_gatt_dm_start+0x98>)
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
    2ea6:	7623      	strb	r3, [r4, #24]
	err = bt_gatt_discover(conn, &dm->discover_params);
    2ea8:	f007 fd3a 	bl	a920 <bt_gatt_discover>
	if (err) {
    2eac:	4604      	mov	r4, r0
    2eae:	b148      	cbz	r0, 2ec4 <bt_gatt_dm_start+0x80>
		LOG_ERR("Discover failed, error: %d.", err);
    2eb0:	4602      	mov	r2, r0
    2eb2:	2145      	movs	r1, #69	; 0x45
    2eb4:	480a      	ldr	r0, [pc, #40]	; (2ee0 <bt_gatt_dm_start+0x9c>)
    2eb6:	f00f f847 	bl	11f48 <printk>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2eba:	f06f 0101 	mvn.w	r1, #1
    2ebe:	4809      	ldr	r0, [pc, #36]	; (2ee4 <bt_gatt_dm_start+0xa0>)
    2ec0:	f00f fd61 	bl	12986 <atomic_and>
		atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);
	}

	return err;
}
    2ec4:	4620      	mov	r0, r4
    2ec6:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    2ec8:	f06f 0415 	mvn.w	r4, #21
    2ecc:	e7fa      	b.n	2ec4 <bt_gatt_dm_start+0x80>
		return -EALREADY;
    2ece:	f06f 0444 	mvn.w	r4, #68	; 0x44
    2ed2:	e7f7      	b.n	2ec4 <bt_gatt_dm_start+0x80>
    2ed4:	20000a54 	.word	0x20000a54
    2ed8:	00002bb1 	.word	0x00002bb1
    2edc:	20000a5c 	.word	0x20000a5c
    2ee0:	0001841e 	.word	0x0001841e
    2ee4:	20000b8c 	.word	0x20000b8c

00002ee8 <scan_default_param_set>:
{
	return (mode & MODE_CHECK) != 0;
}

static void scan_default_param_set(void)
{
    2ee8:	b570      	push	{r4, r5, r6, lr}
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
    2eea:	4d06      	ldr	r5, [pc, #24]	; (2f04 <scan_default_param_set+0x1c>)
{
    2eec:	b086      	sub	sp, #24
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
    2eee:	ac01      	add	r4, sp, #4
    2ef0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2ef2:	c40f      	stmia	r4!, {r0, r1, r2, r3}

	/* Set the default parameters. */
	bt_scan.scan_param = *scan_param;
    2ef4:	4c04      	ldr	r4, [pc, #16]	; (2f08 <scan_default_param_set+0x20>)
    2ef6:	ae01      	add	r6, sp, #4
    2ef8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    2efa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2efc:	682b      	ldr	r3, [r5, #0]
    2efe:	6023      	str	r3, [r4, #0]
}
    2f00:	b006      	add	sp, #24
    2f02:	bd70      	pop	{r4, r5, r6, pc}
    2f04:	00016cc0 	.word	0x00016cc0
    2f08:	20000bd0 	.word	0x20000bd0

00002f0c <uuid_check>:
{
    2f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_scan.scan_filters.uuid.enabled;
    2f10:	4c29      	ldr	r4, [pc, #164]	; (2fb8 <uuid_check+0xac>)
{
    2f12:	b08b      	sub	sp, #44	; 0x2c
	if (is_uuid_filter_enabled()) {
    2f14:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
{
    2f18:	4606      	mov	r6, r0
    2f1a:	9100      	str	r1, [sp, #0]
    2f1c:	9203      	str	r2, [sp, #12]
	if (is_uuid_filter_enabled()) {
    2f1e:	2b00      	cmp	r3, #0
    2f20:	d03c      	beq.n	2f9c <uuid_check+0x90>
	for (size_t i = 0; i < counter; i++) {
    2f22:	2700      	movs	r7, #0
	u8_t uuid_match_cnt = 0;
    2f24:	463d      	mov	r5, r7
	u8_t data_len = data->data_len;
    2f26:	784b      	ldrb	r3, [r1, #1]
	const bool all_filters_mode = bt_scan.scan_filters.all_mode;
    2f28:	f894 b028 	ldrb.w	fp, [r4, #40]	; 0x28
	const u8_t counter = bt_scan.scan_filters.uuid.cnt;
    2f2c:	f894 a020 	ldrb.w	sl, [r4, #32]
	u8_t data_len = data->data_len;
    2f30:	9301      	str	r3, [sp, #4]
	for (size_t i = 0; i < counter; i++) {
    2f32:	4557      	cmp	r7, sl
    2f34:	d30e      	bcc.n	2f54 <uuid_check+0x48>
	control->filter_status.uuid.count = uuid_match_cnt;
    2f36:	f886 5040 	strb.w	r5, [r6, #64]	; 0x40
	if ((all_filters_mode && (uuid_match_cnt == counter)) ||
    2f3a:	f1bb 0f00 	cmp.w	fp, #0
    2f3e:	d02b      	beq.n	2f98 <uuid_check+0x8c>
    2f40:	45aa      	cmp	sl, r5
    2f42:	d12b      	bne.n	2f9c <uuid_check+0x90>
			control->filter_match_cnt++;
    2f44:	7873      	ldrb	r3, [r6, #1]
    2f46:	3301      	adds	r3, #1
    2f48:	7073      	strb	r3, [r6, #1]
			control->filter_status.uuid.match = true;
    2f4a:	2301      	movs	r3, #1
    2f4c:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
			control->filter_match = true;
    2f50:	70b3      	strb	r3, [r6, #2]
}
    2f52:	e023      	b.n	2f9c <uuid_check+0x90>
	for (size_t i = 0; i < data_len; i += uuid_len) {
    2f54:	f04f 0900 	mov.w	r9, #0
		if (find_uuid(data->data, data_len, uuid_type,
    2f58:	9b00      	ldr	r3, [sp, #0]
    2f5a:	9a03      	ldr	r2, [sp, #12]
    2f5c:	685b      	ldr	r3, [r3, #4]
    2f5e:	9302      	str	r3, [sp, #8]
	switch (uuid_type) {
    2f60:	4b16      	ldr	r3, [pc, #88]	; (2fbc <uuid_check+0xb0>)
    2f62:	f813 8002 	ldrb.w	r8, [r3, r2]
	for (size_t i = 0; i < data_len; i += uuid_len) {
    2f66:	9b01      	ldr	r3, [sp, #4]
    2f68:	4599      	cmp	r9, r3
    2f6a:	d305      	bcc.n	2f78 <uuid_check+0x6c>
		} else if (all_filters_mode) {
    2f6c:	f1bb 0f00 	cmp.w	fp, #0
    2f70:	d1e1      	bne.n	2f36 <uuid_check+0x2a>
	for (size_t i = 0; i < counter; i++) {
    2f72:	3701      	adds	r7, #1
    2f74:	3418      	adds	r4, #24
    2f76:	e7dc      	b.n	2f32 <uuid_check+0x26>
		if (!bt_uuid_create(&uuid.uuid, &data[i], uuid_len)) {
    2f78:	9b02      	ldr	r3, [sp, #8]
    2f7a:	4642      	mov	r2, r8
    2f7c:	eb03 0109 	add.w	r1, r3, r9
    2f80:	a805      	add	r0, sp, #20
    2f82:	f010 fbba 	bl	136fa <bt_uuid_create>
    2f86:	2800      	cmp	r0, #0
    2f88:	d0f0      	beq.n	2f6c <uuid_check+0x60>
		if (bt_uuid_cmp(&uuid.uuid, target_uuid->uuid) == 0) {
    2f8a:	68a1      	ldr	r1, [r4, #8]
    2f8c:	a805      	add	r0, sp, #20
    2f8e:	f010 fb8a 	bl	136a6 <bt_uuid_cmp>
    2f92:	b130      	cbz	r0, 2fa2 <uuid_check+0x96>
	for (size_t i = 0; i < data_len; i += uuid_len) {
    2f94:	44c1      	add	r9, r8
    2f96:	e7e6      	b.n	2f66 <uuid_check+0x5a>
	    ((!all_filters_mode) && (uuid_match_cnt > 0))) {
    2f98:	2d00      	cmp	r5, #0
    2f9a:	d1d3      	bne.n	2f44 <uuid_check+0x38>
}
    2f9c:	b00b      	add	sp, #44	; 0x2c
    2f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				uuid_filter->uuid[i].uuid;
    2fa2:	68a1      	ldr	r1, [r4, #8]
			control->filter_status.uuid.uuid[uuid_match_cnt] =
    2fa4:	eb06 0285 	add.w	r2, r6, r5, lsl #2
			uuid_match_cnt++;
    2fa8:	3501      	adds	r5, #1
			control->filter_status.uuid.uuid[uuid_match_cnt] =
    2faa:	63d1      	str	r1, [r2, #60]	; 0x3c
			uuid_match_cnt++;
    2fac:	b2ed      	uxtb	r5, r5
			if (!all_filters_mode) {
    2fae:	f1bb 0f00 	cmp.w	fp, #0
    2fb2:	d1de      	bne.n	2f72 <uuid_check+0x66>
    2fb4:	e7bf      	b.n	2f36 <uuid_check+0x2a>
    2fb6:	bf00      	nop
    2fb8:	20000ba0 	.word	0x20000ba0
    2fbc:	00018459 	.word	0x00018459

00002fc0 <adv_data_found>:
		control->filter_cnt++;
	}
}

static bool adv_data_found(struct bt_data *data, void *user_data)
{
    2fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_scan_control *scan_control =
			(struct bt_scan_control *)user_data;

	switch (data->type) {
    2fc4:	7803      	ldrb	r3, [r0, #0]
{
    2fc6:	4605      	mov	r5, r0
	switch (data->type) {
    2fc8:	2b19      	cmp	r3, #25
{
    2fca:	460c      	mov	r4, r1
	switch (data->type) {
    2fcc:	d812      	bhi.n	2ff4 <adv_data_found+0x34>
    2fce:	2b01      	cmp	r3, #1
    2fd0:	d912      	bls.n	2ff8 <adv_data_found+0x38>
    2fd2:	3b02      	subs	r3, #2
    2fd4:	2b17      	cmp	r3, #23
    2fd6:	d80f      	bhi.n	2ff8 <adv_data_found+0x38>
    2fd8:	e8df f003 	tbb	[pc, r3]
    2fdc:	81817b7b 	.word	0x81817b7b
    2fe0:	11318383 	.word	0x11318383
    2fe4:	0e0e0e0e 	.word	0x0e0e0e0e
    2fe8:	0e0e0e0e 	.word	0x0e0e0e0e
    2fec:	0e0e0e0e 	.word	0x0e0e0e0e
    2ff0:	560e0e0e 	.word	0x560e0e0e
    2ff4:	2bff      	cmp	r3, #255	; 0xff
    2ff6:	d076      	beq.n	30e6 <adv_data_found+0x126>
	default:
		break;
	}

	return true;
}
    2ff8:	2001      	movs	r0, #1
    2ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return bt_scan.scan_filters.name.enabled;
    2ffe:	4e50      	ldr	r6, [pc, #320]	; (3140 <adv_data_found+0x180>)
	if (is_name_filter_enabled()) {
    3000:	7873      	ldrb	r3, [r6, #1]
    3002:	2b00      	cmp	r3, #0
    3004:	d0f8      	beq.n	2ff8 <adv_data_found+0x38>
	for (size_t i = 0; i < counter; i++) {
    3006:	2700      	movs	r7, #0
	u8_t counter = bt_scan.scan_filters.name.cnt;
    3008:	f896 a000 	ldrb.w	sl, [r6]
	u8_t data_len = data->data_len;
    300c:	f890 8001 	ldrb.w	r8, [r0, #1]
	for (size_t i = 0; i < counter; i++) {
    3010:	4557      	cmp	r7, sl
    3012:	d2f1      	bcs.n	2ff8 <adv_data_found+0x38>
		if (adv_name_cmp(data->data,
    3014:	eb06 1947 	add.w	r9, r6, r7, lsl #5
	return strncmp(target_name, data, data_len) == 0;
    3018:	4642      	mov	r2, r8
    301a:	4648      	mov	r0, r9
    301c:	6869      	ldr	r1, [r5, #4]
    301e:	f010 fa88 	bl	13532 <strncmp>
		if (adv_name_cmp(data->data,
    3022:	b950      	cbnz	r0, 303a <adv_data_found+0x7a>
			control->filter_match_cnt++;
    3024:	7863      	ldrb	r3, [r4, #1]
			control->filter_status.name.name =
    3026:	f8c4 901c 	str.w	r9, [r4, #28]
			control->filter_match_cnt++;
    302a:	3301      	adds	r3, #1
    302c:	7063      	strb	r3, [r4, #1]
			control->filter_status.name.match = true;
    302e:	2301      	movs	r3, #1
			control->filter_status.name.len = data_len;
    3030:	f884 8020 	strb.w	r8, [r4, #32]
			control->filter_status.name.match = true;
    3034:	7623      	strb	r3, [r4, #24]
			control->filter_match = true;
    3036:	70a3      	strb	r3, [r4, #2]
    3038:	e7de      	b.n	2ff8 <adv_data_found+0x38>
	for (size_t i = 0; i < counter; i++) {
    303a:	3701      	adds	r7, #1
    303c:	e7e8      	b.n	3010 <adv_data_found+0x50>
	return bt_scan.scan_filters.short_name.enabled;
    303e:	4e40      	ldr	r6, [pc, #256]	; (3140 <adv_data_found+0x180>)
	if (is_short_name_filter_enabled()) {
    3040:	78f3      	ldrb	r3, [r6, #3]
    3042:	2b00      	cmp	r3, #0
    3044:	d0d8      	beq.n	2ff8 <adv_data_found+0x38>
	u8_t data_len = data->data_len;
    3046:	78b3      	ldrb	r3, [r6, #2]
    3048:	f890 8001 	ldrb.w	r8, [r0, #1]
	for (size_t i = 0; i < counter; i++) {
    304c:	eb03 1343 	add.w	r3, r3, r3, lsl #5
    3050:	18f7      	adds	r7, r6, r3
    3052:	42be      	cmp	r6, r7
    3054:	d0d0      	beq.n	2ff8 <adv_data_found+0x38>
	if ((data_len >= short_name_min_len) &&
    3056:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
    305a:	4543      	cmp	r3, r8
    305c:	d812      	bhi.n	3084 <adv_data_found+0xc4>
    305e:	f106 0902 	add.w	r9, r6, #2
	    (strncmp(target_name, data, data_len) == 0)) {
    3062:	4642      	mov	r2, r8
    3064:	4648      	mov	r0, r9
    3066:	6869      	ldr	r1, [r5, #4]
    3068:	f010 fa63 	bl	13532 <strncmp>
	if ((data_len >= short_name_min_len) &&
    306c:	b950      	cbnz	r0, 3084 <adv_data_found+0xc4>
			control->filter_match_cnt++;
    306e:	7863      	ldrb	r3, [r4, #1]
			control->filter_status.short_name.name =
    3070:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
			control->filter_match_cnt++;
    3074:	3301      	adds	r3, #1
    3076:	7063      	strb	r3, [r4, #1]
			control->filter_status.short_name.match = true;
    3078:	2301      	movs	r3, #1
			control->filter_status.short_name.len = data_len;
    307a:	f884 802c 	strb.w	r8, [r4, #44]	; 0x2c
			control->filter_status.short_name.match = true;
    307e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
			control->filter_match = true;
    3082:	e7d8      	b.n	3036 <adv_data_found+0x76>
	for (size_t i = 0; i < counter; i++) {
    3084:	3621      	adds	r6, #33	; 0x21
    3086:	e7e4      	b.n	3052 <adv_data_found+0x92>
	return bt_scan.scan_filters.appearance.enabled;
    3088:	4b2d      	ldr	r3, [pc, #180]	; (3140 <adv_data_found+0x180>)
	if (is_appearance_filter_enabled()) {
    308a:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
    308e:	2a00      	cmp	r2, #0
    3090:	d0b2      	beq.n	2ff8 <adv_data_found+0x38>
	for (size_t i = 0; i < counter; i++) {
    3092:	2200      	movs	r2, #0
	const u8_t counter =
    3094:	f893 6024 	ldrb.w	r6, [r3, #36]	; 0x24
	u8_t data_len = data->data_len;
    3098:	7847      	ldrb	r7, [r0, #1]
	for (size_t i = 0; i < counter; i++) {
    309a:	42b2      	cmp	r2, r6
    309c:	d2ac      	bcs.n	2ff8 <adv_data_found+0x38>
	if (data_len != sizeof(u16_t)) {
    309e:	2f02      	cmp	r7, #2
    30a0:	d115      	bne.n	30ce <adv_data_found+0x10e>
		if (find_appearance(data->data,
    30a2:	6868      	ldr	r0, [r5, #4]
	return ((u16_t)src[0] << 8) | src[1];
    30a4:	f890 c000 	ldrb.w	ip, [r0]
    30a8:	7841      	ldrb	r1, [r0, #1]
	if (decoded_appearance == *appearance) {
    30aa:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    30ae:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    30b0:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
    30b4:	4288      	cmp	r0, r1
    30b6:	d10a      	bne.n	30ce <adv_data_found+0x10e>
		if (find_appearance(data->data,
    30b8:	3212      	adds	r2, #18
    30ba:	eb03 0342 	add.w	r3, r3, r2, lsl #1
			control->filter_status.appearance.appearance =
    30be:	64a3      	str	r3, [r4, #72]	; 0x48
			control->filter_match_cnt++;
    30c0:	7863      	ldrb	r3, [r4, #1]
    30c2:	3301      	adds	r3, #1
    30c4:	7063      	strb	r3, [r4, #1]
			control->filter_status.appearance.match = true;
    30c6:	2301      	movs	r3, #1
    30c8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			control->filter_match = true;
    30cc:	e7b3      	b.n	3036 <adv_data_found+0x76>
	for (size_t i = 0; i < counter; i++) {
    30ce:	3201      	adds	r2, #1
    30d0:	e7e3      	b.n	309a <adv_data_found+0xda>
		uuid_check(scan_control, data, BT_UUID_TYPE_16);
    30d2:	2200      	movs	r2, #0
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
    30d4:	4629      	mov	r1, r5
    30d6:	4620      	mov	r0, r4
    30d8:	f7ff ff18 	bl	2f0c <uuid_check>
		break;
    30dc:	e78c      	b.n	2ff8 <adv_data_found+0x38>
		uuid_check(scan_control, data, BT_UUID_TYPE_32);
    30de:	2201      	movs	r2, #1
    30e0:	e7f8      	b.n	30d4 <adv_data_found+0x114>
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
    30e2:	2202      	movs	r2, #2
    30e4:	e7f6      	b.n	30d4 <adv_data_found+0x114>
	return bt_scan.scan_filters.manufacturer_data.enabled;
    30e6:	4b16      	ldr	r3, [pc, #88]	; (3140 <adv_data_found+0x180>)
	if (is_manufacturer_data_filter_enabled()) {
    30e8:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
    30ec:	4698      	mov	r8, r3
    30ee:	2a00      	cmp	r2, #0
    30f0:	d082      	beq.n	2ff8 <adv_data_found+0x38>
	u8_t counter = bt_scan.scan_filters.manufacturer_data.cnt;
    30f2:	4699      	mov	r9, r3
	for (size_t i = 0; i < counter; i++) {
    30f4:	2700      	movs	r7, #0
	u8_t counter = bt_scan.scan_filters.manufacturer_data.cnt;
    30f6:	f893 a026 	ldrb.w	sl, [r3, #38]	; 0x26
	for (size_t i = 0; i < counter; i++) {
    30fa:	4557      	cmp	r7, sl
    30fc:	f4bf af7c 	bcs.w	2ff8 <adv_data_found+0x38>
		if (adv_manufacturer_data_cmp(data->data,
    3100:	f899 2046 	ldrb.w	r2, [r9, #70]	; 0x46
	if (target_data_len > data_len) {
    3104:	786b      	ldrb	r3, [r5, #1]
    3106:	4293      	cmp	r3, r2
    3108:	d315      	bcc.n	3136 <adv_data_found+0x176>
    310a:	f109 0626 	add.w	r6, r9, #38	; 0x26
	if (memcmp(target_data, data, target_data_len) != 0) {
    310e:	4630      	mov	r0, r6
    3110:	6869      	ldr	r1, [r5, #4]
    3112:	f010 fa1d 	bl	13550 <memcmp>
    3116:	b970      	cbnz	r0, 3136 <adv_data_found+0x176>
				md_filter->manufacturer_data[i].data_len;
    3118:	eb07 1347 	add.w	r3, r7, r7, lsl #5
			control->filter_status.manufacturer_data.data =
    311c:	6526      	str	r6, [r4, #80]	; 0x50
				md_filter->manufacturer_data[i].data_len;
    311e:	4443      	add	r3, r8
			control->filter_status.manufacturer_data.len =
    3120:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
    3124:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
			control->filter_match_cnt++;
    3128:	7863      	ldrb	r3, [r4, #1]
    312a:	3301      	adds	r3, #1
    312c:	7063      	strb	r3, [r4, #1]
			control->filter_status.manufacturer_data.match = true;
    312e:	2301      	movs	r3, #1
    3130:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
    3134:	e77f      	b.n	3036 <adv_data_found+0x76>
	for (size_t i = 0; i < counter; i++) {
    3136:	3701      	adds	r7, #1
    3138:	f109 0921 	add.w	r9, r9, #33	; 0x21
    313c:	e7dd      	b.n	30fa <adv_data_found+0x13a>
    313e:	bf00      	nop
    3140:	20000ba0 	.word	0x20000ba0

00003144 <notify_filter_matched.constprop.0>:
static void notify_filter_matched(struct bt_scan_device_info *device_info,
    3144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3146:	4605      	mov	r5, r0
    3148:	460e      	mov	r6, r1
    314a:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    314c:	4b08      	ldr	r3, [pc, #32]	; (3170 <notify_filter_matched.constprop.0+0x2c>)
    314e:	681c      	ldr	r4, [r3, #0]
    3150:	b10c      	cbz	r4, 3156 <notify_filter_matched.constprop.0+0x12>
    3152:	3c04      	subs	r4, #4
    3154:	b904      	cbnz	r4, 3158 <notify_filter_matched.constprop.0+0x14>
}
    3156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->cb_addr->filter_match) {
    3158:	6823      	ldr	r3, [r4, #0]
    315a:	681b      	ldr	r3, [r3, #0]
    315c:	b11b      	cbz	r3, 3166 <notify_filter_matched.constprop.0+0x22>
			cb->cb_addr->filter_match(device_info, filter_match,
    315e:	463a      	mov	r2, r7
    3160:	4631      	mov	r1, r6
    3162:	4628      	mov	r0, r5
    3164:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    3166:	1d23      	adds	r3, r4, #4
    3168:	d0f5      	beq.n	3156 <notify_filter_matched.constprop.0+0x12>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    316a:	6864      	ldr	r4, [r4, #4]
    316c:	e7f0      	b.n	3150 <notify_filter_matched.constprop.0+0xc>
    316e:	bf00      	nop
    3170:	20000bec 	.word	0x20000bec

00003174 <bt_scan_cb_register>:
	if (!cb) {
    3174:	b150      	cbz	r0, 318c <bt_scan_cb_register+0x18>
	parent->next = child;
    3176:	2300      	movs	r3, #0
    3178:	6043      	str	r3, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
    317a:	4b05      	ldr	r3, [pc, #20]	; (3190 <bt_scan_cb_register+0x1c>)
	sys_slist_append(&callback_list, &cb->node);
    317c:	1d02      	adds	r2, r0, #4
    317e:	6859      	ldr	r1, [r3, #4]
    3180:	b911      	cbnz	r1, 3188 <bt_scan_cb_register+0x14>
	list->head = node;
    3182:	e9c3 2200 	strd	r2, r2, [r3]
}
    3186:	4770      	bx	lr
	parent->next = child;
    3188:	600a      	str	r2, [r1, #0]
	list->tail = node;
    318a:	605a      	str	r2, [r3, #4]
}
    318c:	4770      	bx	lr
    318e:	bf00      	nop
    3190:	20000bec 	.word	0x20000bec

00003194 <bt_scan_filter_add>:
{
    3194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3196:	4605      	mov	r5, r0
	if (!data) {
    3198:	460c      	mov	r4, r1
    319a:	2900      	cmp	r1, #0
    319c:	d048      	beq.n	3230 <bt_scan_filter_add+0x9c>
	return z_impl_k_mutex_lock(mutex, timeout);
    319e:	f04f 32ff 	mov.w	r2, #4294967295
    31a2:	f04f 33ff 	mov.w	r3, #4294967295
    31a6:	4824      	ldr	r0, [pc, #144]	; (3238 <bt_scan_filter_add+0xa4>)
    31a8:	f00b fff6 	bl	f198 <z_impl_k_mutex_lock>
	switch (type) {
    31ac:	2d03      	cmp	r5, #3
    31ae:	d00c      	beq.n	31ca <bt_scan_filter_add+0x36>
    31b0:	d938      	bls.n	3224 <bt_scan_filter_add+0x90>
    31b2:	3d04      	subs	r5, #4
		err = -EINVAL;
    31b4:	2d01      	cmp	r5, #1
    31b6:	bf94      	ite	ls
    31b8:	f06f 040b 	mvnls.w	r4, #11
    31bc:	f06f 0415 	mvnhi.w	r4, #21
	return z_impl_k_mutex_unlock(mutex);
    31c0:	481d      	ldr	r0, [pc, #116]	; (3238 <bt_scan_filter_add+0xa4>)
    31c2:	f00c f8cd 	bl	f360 <z_impl_k_mutex_unlock>
}
    31c6:	4620      	mov	r0, r4
    31c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	u8_t counter = bt_scan.scan_filters.uuid.cnt;
    31ca:	4a1c      	ldr	r2, [pc, #112]	; (323c <bt_scan_filter_add+0xa8>)
	if (counter >= CONFIG_BT_SCAN_UUID_CNT) {
    31cc:	f892 3020 	ldrb.w	r3, [r2, #32]
    31d0:	bb43      	cbnz	r3, 3224 <bt_scan_filter_add+0x90>
	switch (uuid->type) {
    31d2:	7823      	ldrb	r3, [r4, #0]
    31d4:	2b01      	cmp	r3, #1
    31d6:	d00c      	beq.n	31f2 <bt_scan_filter_add+0x5e>
    31d8:	2b02      	cmp	r3, #2
    31da:	d011      	beq.n	3200 <bt_scan_filter_add+0x6c>
    31dc:	bb2b      	cbnz	r3, 322a <bt_scan_filter_add+0x96>
		uuid_filter[counter].uuid_data.uuid_16 = *uuid_16;
    31de:	6820      	ldr	r0, [r4, #0]
    31e0:	f102 030c 	add.w	r3, r2, #12
    31e4:	60d0      	str	r0, [r2, #12]
		uuid_filter[counter].uuid =
    31e6:	6093      	str	r3, [r2, #8]
	bt_scan.scan_filters.uuid.cnt++;
    31e8:	2301      	movs	r3, #1
	return 0;
    31ea:	2400      	movs	r4, #0
	bt_scan.scan_filters.uuid.cnt++;
    31ec:	f882 3020 	strb.w	r3, [r2, #32]
	return 0;
    31f0:	e7e6      	b.n	31c0 <bt_scan_filter_add+0x2c>
		uuid_filter[counter].uuid_data.uuid_32 = *uuid_32;
    31f2:	f102 030c 	add.w	r3, r2, #12
    31f6:	e894 0003 	ldmia.w	r4, {r0, r1}
    31fa:	e883 0003 	stmia.w	r3, {r0, r1}
    31fe:	e7f2      	b.n	31e6 <bt_scan_filter_add+0x52>
		uuid_filter[counter].uuid_data.uuid_128 = *uuid_128;
    3200:	4623      	mov	r3, r4
    3202:	f102 040c 	add.w	r4, r2, #12
    3206:	4626      	mov	r6, r4
    3208:	f103 0710 	add.w	r7, r3, #16
    320c:	4625      	mov	r5, r4
    320e:	6818      	ldr	r0, [r3, #0]
    3210:	6859      	ldr	r1, [r3, #4]
    3212:	3308      	adds	r3, #8
    3214:	c503      	stmia	r5!, {r0, r1}
    3216:	42bb      	cmp	r3, r7
    3218:	462c      	mov	r4, r5
    321a:	d1f7      	bne.n	320c <bt_scan_filter_add+0x78>
    321c:	781b      	ldrb	r3, [r3, #0]
    321e:	702b      	strb	r3, [r5, #0]
		uuid_filter[counter].uuid =
    3220:	6096      	str	r6, [r2, #8]
		break;
    3222:	e7e1      	b.n	31e8 <bt_scan_filter_add+0x54>
		return -ENOMEM;
    3224:	f06f 040b 	mvn.w	r4, #11
    3228:	e7ca      	b.n	31c0 <bt_scan_filter_add+0x2c>
	switch (uuid->type) {
    322a:	f06f 0415 	mvn.w	r4, #21
    322e:	e7c7      	b.n	31c0 <bt_scan_filter_add+0x2c>
		return -EINVAL;
    3230:	f06f 0415 	mvn.w	r4, #21
    3234:	e7c7      	b.n	31c6 <bt_scan_filter_add+0x32>
    3236:	bf00      	nop
    3238:	20000498 	.word	0x20000498
    323c:	20000ba0 	.word	0x20000ba0

00003240 <bt_scan_filter_disable>:
	bt_scan.scan_filters.name.enabled = false;
    3240:	2200      	movs	r2, #0
    3242:	4b05      	ldr	r3, [pc, #20]	; (3258 <bt_scan_filter_disable+0x18>)
    3244:	705a      	strb	r2, [r3, #1]
	bt_scan.scan_filters.short_name.enabled = false;
    3246:	70da      	strb	r2, [r3, #3]
	bt_scan.scan_filters.addr.enabled = false;
    3248:	715a      	strb	r2, [r3, #5]
	bt_scan.scan_filters.uuid.enabled = false;
    324a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	bt_scan.scan_filters.appearance.enabled = false;
    324e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	bt_scan.scan_filters.manufacturer_data.enabled = false;
    3252:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
    3256:	4770      	bx	lr
    3258:	20000ba0 	.word	0x20000ba0

0000325c <bt_scan_filter_enable>:
{
    325c:	b508      	push	{r3, lr}
	if (!check_filter_mode(mode)) {
    325e:	0683      	lsls	r3, r0, #26
    3260:	d025      	beq.n	32ae <bt_scan_filter_enable+0x52>
	bt_scan_filter_disable();
    3262:	f7ff ffed 	bl	3240 <bt_scan_filter_disable>
	if (mode & BT_SCAN_ADDR_FILTER) {
    3266:	f010 0f02 	tst.w	r0, #2
		filters->addr.enabled = true;
    326a:	bf18      	it	ne
    326c:	2201      	movne	r2, #1
    326e:	4b11      	ldr	r3, [pc, #68]	; (32b4 <bt_scan_filter_enable+0x58>)
    3270:	bf18      	it	ne
    3272:	715a      	strbne	r2, [r3, #5]
	if (mode & BT_SCAN_NAME_FILTER) {
    3274:	07c2      	lsls	r2, r0, #31
		filters->name.enabled = true;
    3276:	bf44      	itt	mi
    3278:	2201      	movmi	r2, #1
    327a:	705a      	strbmi	r2, [r3, #1]
	if (mode & BT_SCAN_SHORT_NAME_FILTER) {
    327c:	06c2      	lsls	r2, r0, #27
		filters->short_name.enabled = true;
    327e:	bf44      	itt	mi
    3280:	2201      	movmi	r2, #1
    3282:	70da      	strbmi	r2, [r3, #3]
	if (mode & BT_SCAN_UUID_FILTER) {
    3284:	0742      	lsls	r2, r0, #29
		filters->uuid.enabled = true;
    3286:	bf44      	itt	mi
    3288:	2201      	movmi	r2, #1
    328a:	f883 2021 	strbmi.w	r2, [r3, #33]	; 0x21
	if (mode & BT_SCAN_APPEARANCE_FILTER) {
    328e:	0702      	lsls	r2, r0, #28
		filters->appearance.enabled = true;
    3290:	bf44      	itt	mi
    3292:	2201      	movmi	r2, #1
    3294:	f883 2025 	strbmi.w	r2, [r3, #37]	; 0x25
	if (mode & BT_SCAN_MANUFACTURER_DATA_FILTER) {
    3298:	0682      	lsls	r2, r0, #26
		filters->manufacturer_data.enabled = true;
    329a:	bf48      	it	mi
    329c:	2201      	movmi	r2, #1
	return 0;
    329e:	f04f 0000 	mov.w	r0, #0
		filters->manufacturer_data.enabled = true;
    32a2:	bf48      	it	mi
    32a4:	f883 2027 	strbmi.w	r2, [r3, #39]	; 0x27
	filters->all_mode = match_all;
    32a8:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
}
    32ac:	bd08      	pop	{r3, pc}
		return -EINVAL;
    32ae:	f06f 0015 	mvn.w	r0, #21
    32b2:	e7fb      	b.n	32ac <bt_scan_filter_enable+0x50>
    32b4:	20000ba0 	.word	0x20000ba0

000032b8 <scan_connect_with_target.part.0>:
static void scan_connect_with_target(struct bt_scan_control *control,
    32b8:	b570      	push	{r4, r5, r6, lr}
    32ba:	460e      	mov	r6, r1
    32bc:	b086      	sub	sp, #24
    32be:	4605      	mov	r5, r0
	bt_scan_stop();
    32c0:	f00f fc2e 	bl	12b20 <bt_scan_stop>
			       BT_CONN_LE_CREATE_CONN,
    32c4:	4b18      	ldr	r3, [pc, #96]	; (3328 <scan_connect_with_target.part.0+0x70>)
    32c6:	ac02      	add	r4, sp, #8
    32c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    32ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	err = bt_conn_le_create(addr,
    32ce:	4621      	mov	r1, r4
    32d0:	ab01      	add	r3, sp, #4
    32d2:	4630      	mov	r0, r6
    32d4:	4a15      	ldr	r2, [pc, #84]	; (332c <scan_connect_with_target.part.0+0x74>)
    32d6:	f004 f8ef 	bl	74b8 <bt_conn_le_create>
	if (err) {
    32da:	4b15      	ldr	r3, [pc, #84]	; (3330 <scan_connect_with_target.part.0+0x78>)
    32dc:	3508      	adds	r5, #8
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    32de:	681c      	ldr	r4, [r3, #0]
	if (err) {
    32e0:	b168      	cbz	r0, 32fe <scan_connect_with_target.part.0+0x46>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    32e2:	b10c      	cbz	r4, 32e8 <scan_connect_with_target.part.0+0x30>
    32e4:	3c04      	subs	r4, #4
    32e6:	b90c      	cbnz	r4, 32ec <scan_connect_with_target.part.0+0x34>
}
    32e8:	b006      	add	sp, #24
    32ea:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->cb_addr->connecting_error) {
    32ec:	6823      	ldr	r3, [r4, #0]
    32ee:	689b      	ldr	r3, [r3, #8]
    32f0:	b10b      	cbz	r3, 32f6 <scan_connect_with_target.part.0+0x3e>
			cb->cb_addr->connecting_error(device_info);
    32f2:	4628      	mov	r0, r5
    32f4:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    32f6:	1d22      	adds	r2, r4, #4
    32f8:	d0f6      	beq.n	32e8 <scan_connect_with_target.part.0+0x30>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    32fa:	6864      	ldr	r4, [r4, #4]
    32fc:	e7f1      	b.n	32e2 <scan_connect_with_target.part.0+0x2a>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    32fe:	b91c      	cbnz	r4, 3308 <scan_connect_with_target.part.0+0x50>
		bt_conn_unref(conn);
    3300:	9801      	ldr	r0, [sp, #4]
    3302:	f010 fce8 	bl	13cd6 <bt_conn_unref>
    3306:	e7ef      	b.n	32e8 <scan_connect_with_target.part.0+0x30>
		notify_connecting(&control->device_info, conn);
    3308:	9e01      	ldr	r6, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    330a:	3c04      	subs	r4, #4
    330c:	2c00      	cmp	r4, #0
    330e:	d0f7      	beq.n	3300 <scan_connect_with_target.part.0+0x48>
		if (cb->cb_addr->connecting) {
    3310:	6823      	ldr	r3, [r4, #0]
    3312:	68db      	ldr	r3, [r3, #12]
    3314:	b113      	cbz	r3, 331c <scan_connect_with_target.part.0+0x64>
			cb->cb_addr->connecting(device_info, conn);
    3316:	4631      	mov	r1, r6
    3318:	4628      	mov	r0, r5
    331a:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    331c:	1d23      	adds	r3, r4, #4
    331e:	d0ef      	beq.n	3300 <scan_connect_with_target.part.0+0x48>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3320:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    3322:	2c00      	cmp	r4, #0
    3324:	d1f1      	bne.n	330a <scan_connect_with_target.part.0+0x52>
    3326:	e7eb      	b.n	3300 <scan_connect_with_target.part.0+0x48>
    3328:	00016cd4 	.word	0x00016cd4
    332c:	20000be4 	.word	0x20000be4
    3330:	20000bec 	.word	0x20000bec

00003334 <scan_device_found>:
	}
}

static void scan_device_found(const bt_addr_le_t *addr, s8_t rssi, u8_t type,
			      struct net_buf_simple *ad)
{
    3334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_scan_control scan_control;
	struct net_buf_simple_state state;

	memset(&scan_control, 0, sizeof(scan_control));

	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    3338:	4c56      	ldr	r4, [pc, #344]	; (3494 <scan_device_found+0x160>)
{
    333a:	b099      	sub	sp, #100	; 0x64
    333c:	4606      	mov	r6, r0
    333e:	4689      	mov	r9, r1
    3340:	4690      	mov	r8, r2
	memset(&scan_control, 0, sizeof(scan_control));
    3342:	2100      	movs	r1, #0
    3344:	2258      	movs	r2, #88	; 0x58
    3346:	a802      	add	r0, sp, #8
{
    3348:	461d      	mov	r5, r3
	memset(&scan_control, 0, sizeof(scan_control));
    334a:	f010 f93c 	bl	135c6 <memset>
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    334e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	return bt_scan.scan_filters.addr.enabled;
    3352:	7962      	ldrb	r2, [r4, #5]
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    3354:	f88d 300b 	strb.w	r3, [sp, #11]
	control->filter_cnt = 0;
    3358:	2300      	movs	r3, #0
    335a:	f88d 3008 	strb.w	r3, [sp, #8]
	if (is_addr_filter_enabled()) {
    335e:	b112      	cbz	r2, 3366 <scan_device_found+0x32>
		control->filter_cnt++;
    3360:	2301      	movs	r3, #1
    3362:	f88d 3008 	strb.w	r3, [sp, #8]
	if (is_name_filter_enabled()) {
    3366:	7863      	ldrb	r3, [r4, #1]
    3368:	b123      	cbz	r3, 3374 <scan_device_found+0x40>
		control->filter_cnt++;
    336a:	f89d 3008 	ldrb.w	r3, [sp, #8]
    336e:	3301      	adds	r3, #1
    3370:	f88d 3008 	strb.w	r3, [sp, #8]
	if (is_short_name_filter_enabled()) {
    3374:	78e3      	ldrb	r3, [r4, #3]
    3376:	b123      	cbz	r3, 3382 <scan_device_found+0x4e>
		control->filter_cnt++;
    3378:	f89d 3008 	ldrb.w	r3, [sp, #8]
    337c:	3301      	adds	r3, #1
    337e:	f88d 3008 	strb.w	r3, [sp, #8]
	if (is_uuid_filter_enabled()) {
    3382:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    3386:	b123      	cbz	r3, 3392 <scan_device_found+0x5e>
		control->filter_cnt++;
    3388:	f89d 3008 	ldrb.w	r3, [sp, #8]
    338c:	3301      	adds	r3, #1
    338e:	f88d 3008 	strb.w	r3, [sp, #8]
	if (is_appearance_filter_enabled()) {
    3392:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    3396:	b123      	cbz	r3, 33a2 <scan_device_found+0x6e>
		control->filter_cnt++;
    3398:	f89d 3008 	ldrb.w	r3, [sp, #8]
    339c:	3301      	adds	r3, #1
    339e:	f88d 3008 	strb.w	r3, [sp, #8]
	if (is_manufacturer_data_filter_enabled()) {
    33a2:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    33a6:	b123      	cbz	r3, 33b2 <scan_device_found+0x7e>
		control->filter_cnt++;
    33a8:	f89d 3008 	ldrb.w	r3, [sp, #8]
    33ac:	3301      	adds	r3, #1
    33ae:	f88d 3008 	strb.w	r3, [sp, #8]

	check_enabled_filters(&scan_control);

	/* Check id device is connectable. */
	if (type == BT_GAP_ADV_TYPE_ADV_IND ||
    33b2:	f1b8 0f01 	cmp.w	r8, #1
	    type ==  BT_GAP_ADV_TYPE_ADV_DIRECT_IND) {
		scan_control.connectable = true;
    33b6:	bf9c      	itt	ls
    33b8:	2301      	movls	r3, #1
    33ba:	f88d 300c 	strbls.w	r3, [sp, #12]
	if (is_addr_filter_enabled()) {
    33be:	b1da      	cbz	r2, 33f8 <scan_device_found+0xc4>
	for (size_t i = 0; i < counter; i++) {
    33c0:	f04f 0a00 	mov.w	sl, #0
	u8_t counter = bt_scan.scan_filters.addr.cnt;
    33c4:	f894 b004 	ldrb.w	fp, [r4, #4]
	for (size_t i = 0; i < counter; i++) {
    33c8:	4f33      	ldr	r7, [pc, #204]	; (3498 <scan_device_found+0x164>)
    33ca:	45da      	cmp	sl, fp
    33cc:	d214      	bcs.n	33f8 <scan_device_found+0xc4>
	return memcmp(a, b, sizeof(*a));
}

static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
    33ce:	4639      	mov	r1, r7
    33d0:	2207      	movs	r2, #7
    33d2:	4630      	mov	r0, r6
		if (bt_addr_le_cmp(target_addr, &addr[i]) == 0) {
    33d4:	9701      	str	r7, [sp, #4]
    33d6:	f010 f8bb 	bl	13550 <memcmp>
    33da:	3707      	adds	r7, #7
    33dc:	9b01      	ldr	r3, [sp, #4]
    33de:	2800      	cmp	r0, #0
    33e0:	d13c      	bne.n	345c <scan_device_found+0x128>
			control->filter_status.addr.addr = &addr[i];
    33e2:	930f      	str	r3, [sp, #60]	; 0x3c
			control->filter_match_cnt++;
    33e4:	f89d 3009 	ldrb.w	r3, [sp, #9]
    33e8:	3301      	adds	r3, #1
    33ea:	f88d 3009 	strb.w	r3, [sp, #9]
			control->filter_status.addr.match = true;
    33ee:	2301      	movs	r3, #1
    33f0:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			control->filter_match = true;
    33f4:	f88d 300a 	strb.w	r3, [sp, #10]
 * @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    33f8:	4628      	mov	r0, r5
    33fa:	f012 f919 	bl	15630 <net_buf_simple_headroom>
    33fe:	4607      	mov	r7, r0

	/* Save advertising buffer state to transfer it
	 * data to application if futher processing is needed.
	 */
	net_buf_simple_save(ad, &state);
	bt_data_parse(ad, adv_data_found, (void *)&scan_control);
    3400:	4926      	ldr	r1, [pc, #152]	; (349c <scan_device_found+0x168>)
    3402:	4628      	mov	r0, r5
    3404:	aa02      	add	r2, sp, #8
	state->len = buf->len;
    3406:	f8b5 a004 	ldrh.w	sl, [r5, #4]
    340a:	f002 fba1 	bl	5b50 <bt_data_parse>
	net_buf_simple_restore(ad, &state);

	scan_control.device_info.addr = addr;
	scan_control.device_info.conn_param = &bt_scan.conn_param;
    340e:	4b24      	ldr	r3, [pc, #144]	; (34a0 <scan_device_found+0x16c>)
 * @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    3410:	68a8      	ldr	r0, [r5, #8]
    3412:	9306      	str	r3, [sp, #24]
	if (control->all_mode &&
    3414:	f89d 300b 	ldrb.w	r3, [sp, #11]
    3418:	fa10 f787 	uxtah	r7, r0, r7
    341c:	602f      	str	r7, [r5, #0]
	buf->len = state->len;
    341e:	f8a5 a004 	strh.w	sl, [r5, #4]
	scan_control.device_info.addr = addr;
    3422:	9605      	str	r6, [sp, #20]
	scan_control.device_info.adv_info.adv_type = type;
    3424:	f88d 8010 	strb.w	r8, [sp, #16]
	scan_control.device_info.adv_info.rssi = rssi;
    3428:	f88d 9011 	strb.w	r9, [sp, #17]
	scan_control.device_info.adv_data = ad;
    342c:	9507      	str	r5, [sp, #28]
	if (control->all_mode &&
    342e:	b1c3      	cbz	r3, 3462 <scan_device_found+0x12e>
    3430:	f89d 2009 	ldrb.w	r2, [sp, #9]
    3434:	f89d 3008 	ldrb.w	r3, [sp, #8]
    3438:	429a      	cmp	r2, r3
    343a:	d116      	bne.n	346a <scan_device_found+0x136>
		notify_filter_matched(&control->device_info,
    343c:	f89d 200c 	ldrb.w	r2, [sp, #12]
    3440:	a908      	add	r1, sp, #32
    3442:	a804      	add	r0, sp, #16
    3444:	f7ff fe7e 	bl	3144 <notify_filter_matched.constprop.0>
	if (!bt_scan.connect_if_match) {
    3448:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    344c:	b11b      	cbz	r3, 3456 <scan_device_found+0x122>
    344e:	4631      	mov	r1, r6
    3450:	a802      	add	r0, sp, #8
    3452:	f7ff ff31 	bl	32b8 <scan_connect_with_target.part.0>
	/* In the multifilter mode, the number of the active filters must equal
	 * the number of the filters matched to generate the notification.
	 * If the event handler is not NULL, notify the main application.
	 */
	filter_state_check(&scan_control, addr);
}
    3456:	b019      	add	sp, #100	; 0x64
    3458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < counter; i++) {
    345c:	f10a 0a01 	add.w	sl, sl, #1
    3460:	e7b3      	b.n	33ca <scan_device_found+0x96>
	else if ((!control->all_mode) && control->filter_match) {
    3462:	f89d 300a 	ldrb.w	r3, [sp, #10]
    3466:	2b00      	cmp	r3, #0
    3468:	d1e8      	bne.n	343c <scan_device_found+0x108>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    346a:	4b0e      	ldr	r3, [pc, #56]	; (34a4 <scan_device_found+0x170>)
    346c:	681c      	ldr	r4, [r3, #0]
    346e:	2c00      	cmp	r4, #0
    3470:	d0f1      	beq.n	3456 <scan_device_found+0x122>
		notify_filter_no_match(&control->device_info,
    3472:	f89d 500c 	ldrb.w	r5, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    3476:	3c04      	subs	r4, #4
    3478:	2c00      	cmp	r4, #0
    347a:	d0ec      	beq.n	3456 <scan_device_found+0x122>
		if (cb->cb_addr->filter_no_match) {
    347c:	6823      	ldr	r3, [r4, #0]
    347e:	685b      	ldr	r3, [r3, #4]
    3480:	b113      	cbz	r3, 3488 <scan_device_found+0x154>
			cb->cb_addr->filter_no_match(device_info, connectable);
    3482:	4629      	mov	r1, r5
    3484:	a804      	add	r0, sp, #16
    3486:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    3488:	1d23      	adds	r3, r4, #4
    348a:	d0e4      	beq.n	3456 <scan_device_found+0x122>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    348c:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    348e:	2c00      	cmp	r4, #0
    3490:	d1f1      	bne.n	3476 <scan_device_found+0x142>
    3492:	e7e0      	b.n	3456 <scan_device_found+0x122>
    3494:	20000ba0 	.word	0x20000ba0
    3498:	20000ba4 	.word	0x20000ba4
    349c:	00002fc1 	.word	0x00002fc1
    34a0:	20000be4 	.word	0x20000be4
    34a4:	20000bec 	.word	0x20000bec

000034a8 <bt_scan_init>:
{
    34a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    34aa:	4605      	mov	r5, r0
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
    34ac:	4c16      	ldr	r4, [pc, #88]	; (3508 <bt_scan_init+0x60>)
    34ae:	222c      	movs	r2, #44	; 0x2c
    34b0:	2100      	movs	r1, #0
    34b2:	4620      	mov	r0, r4
    34b4:	f010 f887 	bl	135c6 <memset>
	if (init) {
    34b8:	4627      	mov	r7, r4
    34ba:	b1d5      	cbz	r5, 34f2 <bt_scan_init+0x4a>
		bt_scan.connect_if_match = init->connect_if_match;
    34bc:	792b      	ldrb	r3, [r5, #4]
    34be:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		if (init->scan_param) {
    34c2:	682c      	ldr	r4, [r5, #0]
    34c4:	b164      	cbz	r4, 34e0 <bt_scan_init+0x38>
			bt_scan.scan_param = *init->scan_param;
    34c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    34c8:	f107 0630 	add.w	r6, r7, #48	; 0x30
    34cc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    34ce:	6823      	ldr	r3, [r4, #0]
    34d0:	6033      	str	r3, [r6, #0]
		if (init->conn_param) {
    34d2:	68aa      	ldr	r2, [r5, #8]
    34d4:	b13a      	cbz	r2, 34e6 <bt_scan_init+0x3e>
			bt_scan.conn_param = *init->conn_param;
    34d6:	4b0d      	ldr	r3, [pc, #52]	; (350c <bt_scan_init+0x64>)
    34d8:	6810      	ldr	r0, [r2, #0]
    34da:	6851      	ldr	r1, [r2, #4]
    34dc:	c303      	stmia	r3!, {r0, r1}
}
    34de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			scan_default_param_set();
    34e0:	f7ff fd02 	bl	2ee8 <scan_default_param_set>
    34e4:	e7f5      	b.n	34d2 <bt_scan_init+0x2a>
	bt_scan.conn_param = *conn_param;
    34e6:	f04f 73c8 	mov.w	r3, #26214400	; 0x1900000
    34ea:	4909      	ldr	r1, [pc, #36]	; (3510 <bt_scan_init+0x68>)
    34ec:	e9c7 1311 	strd	r1, r3, [r7, #68]	; 0x44
}
    34f0:	e7f5      	b.n	34de <bt_scan_init+0x36>
		scan_default_param_set();
    34f2:	f7ff fcf9 	bl	2ee8 <scan_default_param_set>
	bt_scan.conn_param = *conn_param;
    34f6:	f04f 73c8 	mov.w	r3, #26214400	; 0x1900000
    34fa:	4a05      	ldr	r2, [pc, #20]	; (3510 <bt_scan_init+0x68>)
		bt_scan.connect_if_match = false;
    34fc:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
	bt_scan.conn_param = *conn_param;
    3500:	e9c4 2311 	strd	r2, r3, [r4, #68]	; 0x44
}
    3504:	e7eb      	b.n	34de <bt_scan_init+0x36>
    3506:	bf00      	nop
    3508:	20000ba0 	.word	0x20000ba0
    350c:	20000be4 	.word	0x20000be4
    3510:	00280018 	.word	0x00280018

00003514 <bt_scan_start>:

int bt_scan_start(enum bt_scan_type scan_type)
{
	switch (scan_type) {
    3514:	b108      	cbz	r0, 351a <bt_scan_start+0x6>
    3516:	2801      	cmp	r0, #1
    3518:	d106      	bne.n	3528 <bt_scan_start+0x14>
	case BT_SCAN_TYPE_SCAN_ACTIVE:
		bt_scan.scan_param.type = BT_HCI_LE_SCAN_ACTIVE;
		break;

	case BT_SCAN_TYPE_SCAN_PASSIVE:
		bt_scan.scan_param.type = BT_HCI_LE_SCAN_PASSIVE;
    351a:	4b05      	ldr	r3, [pc, #20]	; (3530 <bt_scan_start+0x1c>)
	default:
		return -EINVAL;
	}

	/* Start the scanning. */
	int err = bt_le_scan_start(&bt_scan.scan_param, scan_device_found);
    351c:	4905      	ldr	r1, [pc, #20]	; (3534 <bt_scan_start+0x20>)
		bt_scan.scan_param.type = BT_HCI_LE_SCAN_PASSIVE;
    351e:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
	int err = bt_le_scan_start(&bt_scan.scan_param, scan_device_found);
    3522:	4805      	ldr	r0, [pc, #20]	; (3538 <bt_scan_start+0x24>)
    3524:	f003 b920 	b.w	6768 <bt_le_scan_start>
	if (!err) {
		LOG_DBG("Scanning");
	}

	return err;
}
    3528:	f06f 0015 	mvn.w	r0, #21
    352c:	4770      	bx	lr
    352e:	bf00      	nop
    3530:	20000ba0 	.word	0x20000ba0
    3534:	00003335 	.word	0x00003335
    3538:	20000bd0 	.word	0x20000bd0

0000353c <bt_gatt_nus_c_send>:
	return 0;
}

int bt_gatt_nus_c_send(struct bt_gatt_nus_c *nus_c, const u8_t *data,
		       u16_t len)
{
    353c:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (!nus_c->conn) {
    353e:	6803      	ldr	r3, [r0, #0]
    3540:	b313      	cbz	r3, 3588 <bt_gatt_nus_c_send+0x4c>
		return -ENOTCONN;
	}

	if (atomic_test_and_set_bit(&nus_c->state, NUS_C_RX_WRITE_PENDING)) {
    3542:	1d04      	adds	r4, r0, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3544:	e8d4 3fef 	ldaex	r3, [r4]
    3548:	f043 0504 	orr.w	r5, r3, #4
    354c:	e8c4 5fec 	stlex	ip, r5, [r4]
    3550:	f1bc 0f00 	cmp.w	ip, #0
    3554:	d1f6      	bne.n	3544 <bt_gatt_nus_c_send+0x8>
    3556:	f013 0304 	ands.w	r3, r3, #4
    355a:	d118      	bne.n	358e <bt_gatt_nus_c_send+0x52>
		return -EALREADY;
	}

	nus_c->rx_write_params.func = on_sent;
    355c:	4d0d      	ldr	r5, [pc, #52]	; (3594 <bt_gatt_nus_c_send+0x58>)
	nus_c->rx_write_params.handle = nus_c->handles.rx;
	nus_c->rx_write_params.offset = 0;
	nus_c->rx_write_params.data = data;
    355e:	62c1      	str	r1, [r0, #44]	; 0x2c
	nus_c->rx_write_params.func = on_sent;
    3560:	6245      	str	r5, [r0, #36]	; 0x24
	nus_c->rx_write_params.handle = nus_c->handles.rx;
    3562:	8905      	ldrh	r5, [r0, #8]
	nus_c->rx_write_params.offset = 0;
    3564:	8543      	strh	r3, [r0, #42]	; 0x2a
	nus_c->rx_write_params.handle = nus_c->handles.rx;
    3566:	8505      	strh	r5, [r0, #40]	; 0x28
	nus_c->rx_write_params.length = len;
    3568:	8602      	strh	r2, [r0, #48]	; 0x30

	err = bt_gatt_write(nus_c->conn, &nus_c->rx_write_params);
    356a:	f100 0124 	add.w	r1, r0, #36	; 0x24
    356e:	6800      	ldr	r0, [r0, #0]
    3570:	f007 fd9e 	bl	b0b0 <bt_gatt_write>
	if (err) {
    3574:	b138      	cbz	r0, 3586 <bt_gatt_nus_c_send+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3576:	e8d4 3fef 	ldaex	r3, [r4]
    357a:	f023 0304 	bic.w	r3, r3, #4
    357e:	e8c4 3fe2 	stlex	r2, r3, [r4]
    3582:	2a00      	cmp	r2, #0
    3584:	d1f7      	bne.n	3576 <bt_gatt_nus_c_send+0x3a>
		atomic_clear_bit(&nus_c->state, NUS_C_RX_WRITE_PENDING);
	}

	return err;
}
    3586:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTCONN;
    3588:	f06f 0038 	mvn.w	r0, #56	; 0x38
    358c:	e7fb      	b.n	3586 <bt_gatt_nus_c_send+0x4a>
		return -EALREADY;
    358e:	f06f 0044 	mvn.w	r0, #68	; 0x44
    3592:	e7f8      	b.n	3586 <bt_gatt_nus_c_send+0x4a>
    3594:	00012b25 	.word	0x00012b25

00003598 <bt_gatt_nus_c_handles_assign>:

int bt_gatt_nus_c_handles_assign(struct bt_gatt_dm *dm,
				 struct bt_gatt_nus_c *nus_c)
{
    3598:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    359c:	b097      	sub	sp, #92	; 0x5c
    359e:	460e      	mov	r6, r1
    35a0:	4605      	mov	r5, r0
	const struct bt_gatt_dm_attr *gatt_service_attr =
			bt_gatt_dm_service_get(dm);
    35a2:	f00f fa45 	bl	12a30 <bt_gatt_dm_service_get>
	const struct bt_gatt_service_val *gatt_service =
			bt_gatt_dm_attr_service_val(gatt_service_attr);
    35a6:	f00f fa0d 	bl	129c4 <bt_gatt_dm_attr_service_val>
	const struct bt_gatt_dm_attr *gatt_chrc;
	const struct bt_gatt_dm_attr *gatt_desc;

	if (bt_uuid_cmp(gatt_service->uuid, BT_UUID_NUS_SERVICE)) {
    35aa:	aa11      	add	r2, sp, #68	; 0x44
    35ac:	4617      	mov	r7, r2
    35ae:	4b52      	ldr	r3, [pc, #328]	; (36f8 <bt_gatt_nus_c_handles_assign+0x160>)
    35b0:	f8d0 c000 	ldr.w	ip, [r0]
    35b4:	f103 0e10 	add.w	lr, r3, #16
    35b8:	4614      	mov	r4, r2
    35ba:	6818      	ldr	r0, [r3, #0]
    35bc:	6859      	ldr	r1, [r3, #4]
    35be:	3308      	adds	r3, #8
    35c0:	c403      	stmia	r4!, {r0, r1}
    35c2:	4573      	cmp	r3, lr
    35c4:	4622      	mov	r2, r4
    35c6:	d1f7      	bne.n	35b8 <bt_gatt_nus_c_handles_assign+0x20>
    35c8:	781b      	ldrb	r3, [r3, #0]
    35ca:	4639      	mov	r1, r7
    35cc:	7023      	strb	r3, [r4, #0]
    35ce:	4660      	mov	r0, ip
    35d0:	f010 f869 	bl	136a6 <bt_uuid_cmp>
    35d4:	4604      	mov	r4, r0
    35d6:	b128      	cbz	r0, 35e4 <bt_gatt_nus_c_handles_assign+0x4c>
		return -ENOTSUP;
    35d8:	f06f 0422 	mvn.w	r4, #34	; 0x22
	nus_c->handles.rx = gatt_desc->handle;

	/* Assign connection instance. */
	nus_c->conn = bt_gatt_dm_conn_get(dm);
	return 0;
}
    35dc:	4620      	mov	r0, r4
    35de:	b017      	add	sp, #92	; 0x5c
    35e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	memset(&nus_c->handles, 0xFF, sizeof(nus_c->handles));
    35e4:	2206      	movs	r2, #6
    35e6:	21ff      	movs	r1, #255	; 0xff
    35e8:	f106 0008 	add.w	r0, r6, #8
    35ec:	f00f ffeb 	bl	135c6 <memset>
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_NUS_TX);
    35f0:	4b42      	ldr	r3, [pc, #264]	; (36fc <bt_gatt_nus_c_handles_assign+0x164>)
    35f2:	aa02      	add	r2, sp, #8
    35f4:	f103 0e10 	add.w	lr, r3, #16
    35f8:	4690      	mov	r8, r2
    35fa:	46f1      	mov	r9, lr
    35fc:	4694      	mov	ip, r2
    35fe:	6818      	ldr	r0, [r3, #0]
    3600:	6859      	ldr	r1, [r3, #4]
    3602:	3308      	adds	r3, #8
    3604:	e8ac 0003 	stmia.w	ip!, {r0, r1}
    3608:	4573      	cmp	r3, lr
    360a:	4662      	mov	r2, ip
    360c:	d1f6      	bne.n	35fc <bt_gatt_nus_c_handles_assign+0x64>
    360e:	781b      	ldrb	r3, [r3, #0]
    3610:	4641      	mov	r1, r8
    3612:	4628      	mov	r0, r5
    3614:	f88c 3000 	strb.w	r3, [ip]
    3618:	f7ff fbe4 	bl	2de4 <bt_gatt_dm_char_by_uuid>
	if (!gatt_chrc) {
    361c:	4680      	mov	r8, r0
    361e:	b930      	cbnz	r0, 362e <bt_gatt_nus_c_handles_assign+0x96>
		LOG_ERR("Missing NUS TX characteristic.");
    3620:	2145      	movs	r1, #69	; 0x45
    3622:	4837      	ldr	r0, [pc, #220]	; (3700 <bt_gatt_nus_c_handles_assign+0x168>)
		LOG_ERR("Missing NUS RX value descriptor in characteristic.");
    3624:	f00e fc90 	bl	11f48 <printk>
		return -EINVAL;
    3628:	f06f 0415 	mvn.w	r4, #21
    362c:	e7d6      	b.n	35dc <bt_gatt_nus_c_handles_assign+0x44>
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_NUS_TX);
    362e:	f10d 0c1c 	add.w	ip, sp, #28
    3632:	4662      	mov	r2, ip
    3634:	4b31      	ldr	r3, [pc, #196]	; (36fc <bt_gatt_nus_c_handles_assign+0x164>)
    3636:	46e6      	mov	lr, ip
    3638:	6818      	ldr	r0, [r3, #0]
    363a:	6859      	ldr	r1, [r3, #4]
    363c:	3308      	adds	r3, #8
    363e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
    3642:	454b      	cmp	r3, r9
    3644:	46f4      	mov	ip, lr
    3646:	d1f6      	bne.n	3636 <bt_gatt_nus_c_handles_assign+0x9e>
    3648:	781b      	ldrb	r3, [r3, #0]
    364a:	4641      	mov	r1, r8
    364c:	4628      	mov	r0, r5
    364e:	f88e 3000 	strb.w	r3, [lr]
    3652:	f00f fa3a 	bl	12aca <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
    3656:	b910      	cbnz	r0, 365e <bt_gatt_nus_c_handles_assign+0xc6>
		LOG_ERR("Missing NUS TX value descriptor in characteristic.");
    3658:	2145      	movs	r1, #69	; 0x45
    365a:	482a      	ldr	r0, [pc, #168]	; (3704 <bt_gatt_nus_c_handles_assign+0x16c>)
    365c:	e7e2      	b.n	3624 <bt_gatt_nus_c_handles_assign+0x8c>
	nus_c->handles.tx = gatt_desc->handle;
    365e:	8883      	ldrh	r3, [r0, #4]
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_GATT_CCC);
    3660:	4641      	mov	r1, r8
	nus_c->handles.tx = gatt_desc->handle;
    3662:	8173      	strh	r3, [r6, #10]
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_GATT_CCC);
    3664:	2300      	movs	r3, #0
    3666:	f88d 3004 	strb.w	r3, [sp, #4]
    366a:	f642 1302 	movw	r3, #10498	; 0x2902
    366e:	4628      	mov	r0, r5
    3670:	aa01      	add	r2, sp, #4
    3672:	f8ad 3006 	strh.w	r3, [sp, #6]
    3676:	f00f fa28 	bl	12aca <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
    367a:	b910      	cbnz	r0, 3682 <bt_gatt_nus_c_handles_assign+0xea>
		LOG_ERR("Missing NUS TX CCC in characteristic.");
    367c:	2145      	movs	r1, #69	; 0x45
    367e:	4822      	ldr	r0, [pc, #136]	; (3708 <bt_gatt_nus_c_handles_assign+0x170>)
    3680:	e7d0      	b.n	3624 <bt_gatt_nus_c_handles_assign+0x8c>
	nus_c->handles.tx_ccc = gatt_desc->handle;
    3682:	8883      	ldrh	r3, [r0, #4]
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_NUS_RX);
    3684:	aa0c      	add	r2, sp, #48	; 0x30
	nus_c->handles.tx_ccc = gatt_desc->handle;
    3686:	81b3      	strh	r3, [r6, #12]
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_NUS_RX);
    3688:	4b20      	ldr	r3, [pc, #128]	; (370c <bt_gatt_nus_c_handles_assign+0x174>)
    368a:	4691      	mov	r9, r2
    368c:	f103 0e10 	add.w	lr, r3, #16
    3690:	46f0      	mov	r8, lr
    3692:	4694      	mov	ip, r2
    3694:	6818      	ldr	r0, [r3, #0]
    3696:	6859      	ldr	r1, [r3, #4]
    3698:	3308      	adds	r3, #8
    369a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
    369e:	4573      	cmp	r3, lr
    36a0:	4662      	mov	r2, ip
    36a2:	d1f6      	bne.n	3692 <bt_gatt_nus_c_handles_assign+0xfa>
    36a4:	781b      	ldrb	r3, [r3, #0]
    36a6:	4649      	mov	r1, r9
    36a8:	f88c 3000 	strb.w	r3, [ip]
    36ac:	4628      	mov	r0, r5
    36ae:	f7ff fb99 	bl	2de4 <bt_gatt_dm_char_by_uuid>
	if (!gatt_chrc) {
    36b2:	4684      	mov	ip, r0
    36b4:	b910      	cbnz	r0, 36bc <bt_gatt_nus_c_handles_assign+0x124>
		LOG_ERR("Missing NUS RX characteristic.");
    36b6:	2145      	movs	r1, #69	; 0x45
    36b8:	4815      	ldr	r0, [pc, #84]	; (3710 <bt_gatt_nus_c_handles_assign+0x178>)
    36ba:	e7b3      	b.n	3624 <bt_gatt_nus_c_handles_assign+0x8c>
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_NUS_RX);
    36bc:	463a      	mov	r2, r7
    36be:	4b13      	ldr	r3, [pc, #76]	; (370c <bt_gatt_nus_c_handles_assign+0x174>)
    36c0:	4696      	mov	lr, r2
    36c2:	6818      	ldr	r0, [r3, #0]
    36c4:	6859      	ldr	r1, [r3, #4]
    36c6:	3308      	adds	r3, #8
    36c8:	e8ae 0003 	stmia.w	lr!, {r0, r1}
    36cc:	4543      	cmp	r3, r8
    36ce:	4672      	mov	r2, lr
    36d0:	d1f6      	bne.n	36c0 <bt_gatt_nus_c_handles_assign+0x128>
    36d2:	781b      	ldrb	r3, [r3, #0]
    36d4:	463a      	mov	r2, r7
    36d6:	4661      	mov	r1, ip
    36d8:	4628      	mov	r0, r5
    36da:	f88e 3000 	strb.w	r3, [lr]
    36de:	f00f f9f4 	bl	12aca <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
    36e2:	b910      	cbnz	r0, 36ea <bt_gatt_nus_c_handles_assign+0x152>
		LOG_ERR("Missing NUS RX value descriptor in characteristic.");
    36e4:	2145      	movs	r1, #69	; 0x45
    36e6:	480b      	ldr	r0, [pc, #44]	; (3714 <bt_gatt_nus_c_handles_assign+0x17c>)
    36e8:	e79c      	b.n	3624 <bt_gatt_nus_c_handles_assign+0x8c>
	nus_c->handles.rx = gatt_desc->handle;
    36ea:	8883      	ldrh	r3, [r0, #4]
	nus_c->conn = bt_gatt_dm_conn_get(dm);
    36ec:	4628      	mov	r0, r5
	nus_c->handles.rx = gatt_desc->handle;
    36ee:	8133      	strh	r3, [r6, #8]
	nus_c->conn = bt_gatt_dm_conn_get(dm);
    36f0:	f00f f99c 	bl	12a2c <bt_gatt_dm_conn_get>
    36f4:	6030      	str	r0, [r6, #0]
	return 0;
    36f6:	e771      	b.n	35dc <bt_gatt_nus_c_handles_assign+0x44>
    36f8:	00016d10 	.word	0x00016d10
    36fc:	00016d21 	.word	0x00016d21
    3700:	0001845c 	.word	0x0001845c
    3704:	00018480 	.word	0x00018480
    3708:	000184b8 	.word	0x000184b8
    370c:	00016d32 	.word	0x00016d32
    3710:	000184e3 	.word	0x000184e3
    3714:	00018507 	.word	0x00018507

00003718 <bt_gatt_nus_c_tx_notif_enable>:

int bt_gatt_nus_c_tx_notif_enable(struct bt_gatt_nus_c *nus_c)
{
    3718:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (atomic_test_and_set_bit(&nus_c->state, NUS_C_TX_NOTIF_ENABLED)) {
    371a:	1d05      	adds	r5, r0, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    371c:	e8d5 3fef 	ldaex	r3, [r5]
    3720:	f043 0202 	orr.w	r2, r3, #2
    3724:	e8c5 2fe1 	stlex	r1, r2, [r5]
    3728:	2900      	cmp	r1, #0
    372a:	d1f7      	bne.n	371c <bt_gatt_nus_c_tx_notif_enable+0x4>
    372c:	079b      	lsls	r3, r3, #30
    372e:	d427      	bmi.n	3780 <bt_gatt_nus_c_tx_notif_enable+0x68>
		return -EALREADY;
	}

	nus_c->tx_notif_params.notify = on_received;
    3730:	4b15      	ldr	r3, [pc, #84]	; (3788 <bt_gatt_nus_c_tx_notif_enable+0x70>)
    3732:	6103      	str	r3, [r0, #16]
	nus_c->tx_notif_params.value = BT_GATT_CCC_NOTIFY;
    3734:	2301      	movs	r3, #1
    3736:	8303      	strh	r3, [r0, #24]
	nus_c->tx_notif_params.value_handle = nus_c->handles.tx;
    3738:	8943      	ldrh	r3, [r0, #10]
    373a:	8283      	strh	r3, [r0, #20]
	nus_c->tx_notif_params.ccc_handle = nus_c->handles.tx_ccc;
    373c:	8983      	ldrh	r3, [r0, #12]
    373e:	82c3      	strh	r3, [r0, #22]
    3740:	f100 031c 	add.w	r3, r0, #28
    3744:	e8d3 2fef 	ldaex	r2, [r3]
    3748:	f042 0201 	orr.w	r2, r2, #1
    374c:	e8c3 2fe1 	stlex	r1, r2, [r3]
    3750:	2900      	cmp	r1, #0
    3752:	d1f7      	bne.n	3744 <bt_gatt_nus_c_tx_notif_enable+0x2c>
	atomic_set_bit(nus_c->tx_notif_params.flags,
		       BT_GATT_SUBSCRIBE_FLAG_VOLATILE);

	err = bt_gatt_subscribe(nus_c->conn, &nus_c->tx_notif_params);
    3754:	f100 0110 	add.w	r1, r0, #16
    3758:	6800      	ldr	r0, [r0, #0]
    375a:	f007 fd81 	bl	b260 <bt_gatt_subscribe>
	if (err) {
    375e:	4604      	mov	r4, r0
    3760:	b160      	cbz	r0, 377c <bt_gatt_nus_c_tx_notif_enable+0x64>
		LOG_ERR("Subscribe failed (err %d)", err);
    3762:	4602      	mov	r2, r0
    3764:	2145      	movs	r1, #69	; 0x45
    3766:	4809      	ldr	r0, [pc, #36]	; (378c <bt_gatt_nus_c_tx_notif_enable+0x74>)
    3768:	f00e fbee 	bl	11f48 <printk>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    376c:	e8d5 3fef 	ldaex	r3, [r5]
    3770:	f023 0302 	bic.w	r3, r3, #2
    3774:	e8c5 3fe2 	stlex	r2, r3, [r5]
    3778:	2a00      	cmp	r2, #0
    377a:	d1f7      	bne.n	376c <bt_gatt_nus_c_tx_notif_enable+0x54>
	} else {
		LOG_DBG("[SUBSCRIBED]");
	}

	return err;
}
    377c:	4620      	mov	r0, r4
    377e:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
    3780:	f06f 0444 	mvn.w	r4, #68	; 0x44
    3784:	e7fa      	b.n	377c <bt_gatt_nus_c_tx_notif_enable+0x64>
    3786:	bf00      	nop
    3788:	00012b51 	.word	0x00012b51
    378c:	0001853f 	.word	0x0001853f

00003790 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    3790:	b5f0      	push	{r4, r5, r6, r7, lr}
    3792:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
    3794:	4e26      	ldr	r6, [pc, #152]	; (3830 <tc_aes128_set_encrypt_key+0xa0>)
{
    3796:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    3798:	ad01      	add	r5, sp, #4
{
    379a:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    379c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    379e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    37a0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    37a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    37a4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    37a8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
    37ac:	4638      	mov	r0, r7
    37ae:	2f00      	cmp	r7, #0
    37b0:	d039      	beq.n	3826 <tc_aes128_set_encrypt_key+0x96>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    37b2:	2c00      	cmp	r4, #0
    37b4:	d039      	beq.n	382a <tc_aes128_set_encrypt_key+0x9a>
    37b6:	1f38      	subs	r0, r7, #4
    37b8:	4602      	mov	r2, r0
    37ba:	4621      	mov	r1, r4
    37bc:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    37be:	784b      	ldrb	r3, [r1, #1]
    37c0:	780d      	ldrb	r5, [r1, #0]
    37c2:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    37c4:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    37c8:	78cd      	ldrb	r5, [r1, #3]
    37ca:	3104      	adds	r1, #4
    37cc:	432b      	orrs	r3, r5
    37ce:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
    37d2:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    37d4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    37d8:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    37dc:	d1ef      	bne.n	37be <tc_aes128_set_encrypt_key+0x2e>
    37de:	2104      	movs	r1, #4
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
    37e0:	4c14      	ldr	r4, [pc, #80]	; (3834 <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
    37e2:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    37e4:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    37e6:	d116      	bne.n	3816 <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    37e8:	f3c3 4207 	ubfx	r2, r3, #16, #8
    37ec:	5ca5      	ldrb	r5, [r4, r2]
    37ee:	0e1a      	lsrs	r2, r3, #24
    37f0:	5ca2      	ldrb	r2, [r4, r2]
    37f2:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    37f6:	f3c3 2507 	ubfx	r5, r3, #8, #8
    37fa:	5d65      	ldrb	r5, [r4, r5]
    37fc:	b2db      	uxtb	r3, r3
    37fe:	5ce3      	ldrb	r3, [r4, r3]
    3800:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    3804:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    3808:	ad0c      	add	r5, sp, #48	; 0x30
    380a:	f021 0303 	bic.w	r3, r1, #3
    380e:	442b      	add	r3, r5
    3810:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    3814:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
    3816:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    381a:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    381c:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    381e:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    3820:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    3822:	d1de      	bne.n	37e2 <tc_aes128_set_encrypt_key+0x52>
	}

	return TC_CRYPTO_SUCCESS;
    3824:	2001      	movs	r0, #1
}
    3826:	b00d      	add	sp, #52	; 0x34
    3828:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    382a:	4620      	mov	r0, r4
    382c:	e7fb      	b.n	3826 <tc_aes128_set_encrypt_key+0x96>
    382e:	bf00      	nop
    3830:	00016ce4 	.word	0x00016ce4
    3834:	00018564 	.word	0x00018564

00003838 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    3838:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    383c:	4615      	mov	r5, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    383e:	4606      	mov	r6, r0
{
    3840:	b089      	sub	sp, #36	; 0x24
	if (out == (uint8_t *) 0) {
    3842:	2800      	cmp	r0, #0
    3844:	d058      	beq.n	38f8 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    3846:	2900      	cmp	r1, #0
    3848:	d059      	beq.n	38fe <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    384a:	2a00      	cmp	r2, #0
    384c:	d059      	beq.n	3902 <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    384e:	2310      	movs	r3, #16
    3850:	460a      	mov	r2, r1
    3852:	4668      	mov	r0, sp
    3854:	4619      	mov	r1, r3
		s[i] = sbox[s[i]];
    3856:	4c2c      	ldr	r4, [pc, #176]	; (3908 <tc_aes_encrypt+0xd0>)
	(void)_copy(state, sizeof(state), in, sizeof(state));
    3858:	f00f f9b3 	bl	12bc2 <_copy>
	add_round_key(state, s->words);
    385c:	4629      	mov	r1, r5
    385e:	4668      	mov	r0, sp
    3860:	f00f f9c7 	bl	12bf2 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
    3864:	46a1      	mov	r9, r4
    3866:	f105 0710 	add.w	r7, r5, #16
    386a:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
    386c:	46e8      	mov	r8, sp
{
    386e:	466a      	mov	r2, sp
    3870:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
    3872:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    3874:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
    3876:	5c61      	ldrb	r1, [r4, r1]
    3878:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    387c:	d1f9      	bne.n	3872 <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
    387e:	4668      	mov	r0, sp
    3880:	f00f f9fc 	bl	12c7c <shift_rows>
	mult_row_column(t, s);
    3884:	4669      	mov	r1, sp
    3886:	a804      	add	r0, sp, #16
    3888:	f00f fa31 	bl	12cee <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    388c:	a901      	add	r1, sp, #4
    388e:	a805      	add	r0, sp, #20
    3890:	f00f fa2d 	bl	12cee <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
    3894:	a902      	add	r1, sp, #8
    3896:	a806      	add	r0, sp, #24
    3898:	f00f fa29 	bl	12cee <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
    389c:	a903      	add	r1, sp, #12
    389e:	a807      	add	r0, sp, #28
    38a0:	f00f fa25 	bl	12cee <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    38a4:	2310      	movs	r3, #16
    38a6:	4668      	mov	r0, sp
    38a8:	4619      	mov	r1, r3
    38aa:	eb0d 0203 	add.w	r2, sp, r3
    38ae:	f00f f988 	bl	12bc2 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    38b2:	4639      	mov	r1, r7
    38b4:	4668      	mov	r0, sp
    38b6:	3710      	adds	r7, #16
    38b8:	f00f f99b 	bl	12bf2 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
    38bc:	42af      	cmp	r7, r5
    38be:	d1d5      	bne.n	386c <tc_aes_encrypt+0x34>
    38c0:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
    38c2:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
    38c6:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
    38c8:	f819 3003 	ldrb.w	r3, [r9, r3]
    38cc:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    38d0:	d1f7      	bne.n	38c2 <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
    38d2:	4668      	mov	r0, sp
    38d4:	f00f f9d2 	bl	12c7c <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    38d8:	4629      	mov	r1, r5
    38da:	4668      	mov	r0, sp
    38dc:	f00f f989 	bl	12bf2 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    38e0:	2310      	movs	r3, #16
    38e2:	466a      	mov	r2, sp
    38e4:	4619      	mov	r1, r3
    38e6:	4630      	mov	r0, r6
    38e8:	f00f f96b 	bl	12bc2 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    38ec:	4668      	mov	r0, sp
    38ee:	2210      	movs	r2, #16
    38f0:	4621      	mov	r1, r4
    38f2:	f00f f973 	bl	12bdc <_set>

	return TC_CRYPTO_SUCCESS;
    38f6:	2001      	movs	r0, #1
}
    38f8:	b009      	add	sp, #36	; 0x24
    38fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
    38fe:	4608      	mov	r0, r1
    3900:	e7fa      	b.n	38f8 <tc_aes_encrypt+0xc0>
    3902:	4610      	mov	r0, r2
    3904:	e7f8      	b.n	38f8 <tc_aes_encrypt+0xc0>
    3906:	bf00      	nop
    3908:	00018564 	.word	0x00018564

0000390c <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
    390c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    3910:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    3912:	6803      	ldr	r3, [r0, #0]
{
    3914:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    3916:	9303      	str	r3, [sp, #12]
    3918:	6843      	ldr	r3, [r0, #4]
    391a:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 3ad4 <compress+0x1c8>
    391e:	9304      	str	r3, [sp, #16]
    3920:	6883      	ldr	r3, [r0, #8]
    3922:	9c03      	ldr	r4, [sp, #12]
    3924:	9305      	str	r3, [sp, #20]
    3926:	68c3      	ldr	r3, [r0, #12]
{
    3928:	9102      	str	r1, [sp, #8]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    392a:	9306      	str	r3, [sp, #24]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    392c:	6903      	ldr	r3, [r0, #16]
    392e:	9307      	str	r3, [sp, #28]
    3930:	6943      	ldr	r3, [r0, #20]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    3932:	e9dd e206 	ldrd	lr, r2, [sp, #24]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    3936:	9308      	str	r3, [sp, #32]
    3938:	6983      	ldr	r3, [r0, #24]
    393a:	9309      	str	r3, [sp, #36]	; 0x24
    393c:	69c3      	ldr	r3, [r0, #28]
    393e:	e9dd cb08 	ldrd	ip, fp, [sp, #32]
    3942:	4698      	mov	r8, r3
    3944:	930a      	str	r3, [sp, #40]	; 0x28
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    3946:	9b05      	ldr	r3, [sp, #20]
    3948:	9301      	str	r3, [sp, #4]
    394a:	9b04      	ldr	r3, [sp, #16]
    394c:	9300      	str	r3, [sp, #0]
	n = (((unsigned int)(*((*c)++))) << 24);
    394e:	9b02      	ldr	r3, [sp, #8]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
		t1 = work_space[i] = n;
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
		t2 = Sigma0(a) + Maj(a, b, c);
    3950:	9e01      	ldr	r6, [sp, #4]
    3952:	59dd      	ldr	r5, [r3, r7]
		t1 = work_space[i] = n;
    3954:	ab0c      	add	r3, sp, #48	; 0x30
    3956:	ba2d      	rev	r5, r5
    3958:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
    395a:	f85a 3b04 	ldr.w	r3, [sl], #4
    395e:	3704      	adds	r7, #4
    3960:	eb05 0903 	add.w	r9, r5, r3
    3964:	ea4f 25f2 	mov.w	r5, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    3968:	ea85 15b2 	eor.w	r5, r5, r2, ror #6
    396c:	ea85 6572 	eor.w	r5, r5, r2, ror #25
    3970:	444d      	add	r5, r9
    3972:	ea2b 0302 	bic.w	r3, fp, r2
    3976:	ea02 090c 	and.w	r9, r2, ip
    397a:	ea83 0309 	eor.w	r3, r3, r9
    397e:	442b      	add	r3, r5
    3980:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
    3982:	e9dd 1500 	ldrd	r1, r5, [sp]
	return (((a) >> n) | ((a) << (32 - n)));
    3986:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    398a:	404d      	eors	r5, r1
    398c:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
    3990:	4025      	ands	r5, r4
    3992:	ea01 0906 	and.w	r9, r1, r6
    3996:	ea85 0509 	eor.w	r5, r5, r9
    399a:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
    399e:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
    39a0:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
    39a2:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
    39a6:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
    39a8:	46b6      	mov	lr, r6
    39aa:	46d8      	mov	r8, fp
    39ac:	f040 8081 	bne.w	3ab2 <compress+0x1a6>
    39b0:	f04f 0a10 	mov.w	sl, #16
    39b4:	4946      	ldr	r1, [pc, #280]	; (3ad0 <compress+0x1c4>)
    39b6:	910b      	str	r1, [sp, #44]	; 0x2c
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
    39b8:	4651      	mov	r1, sl
    39ba:	f10a 0a01 	add.w	sl, sl, #1
    39be:	ae1c      	add	r6, sp, #112	; 0x70
    39c0:	f00a 070f 	and.w	r7, sl, #15
    39c4:	eb06 0787 	add.w	r7, r6, r7, lsl #2
    39c8:	f857 6c40 	ldr.w	r6, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    39cc:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
    39d0:	ea4f 48b6 	mov.w	r8, r6, ror #18
		s1 = work_space[(i+14)&0x0f];
    39d4:	f101 070e 	add.w	r7, r1, #14
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    39d8:	3109      	adds	r1, #9
		s0 = work_space[(i+1)&0x0f];
    39da:	9602      	str	r6, [sp, #8]
		s0 = sigma0(s0);
    39dc:	ea88 18f6 	eor.w	r8, r8, r6, ror #7
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    39e0:	f001 010f 	and.w	r1, r1, #15
		s1 = work_space[(i+14)&0x0f];
    39e4:	ae1c      	add	r6, sp, #112	; 0x70
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    39e6:	eb06 0989 	add.w	r9, r6, r9, lsl #2
    39ea:	eb06 0181 	add.w	r1, r6, r1, lsl #2
		s1 = work_space[(i+14)&0x0f];
    39ee:	f007 070f 	and.w	r7, r7, #15
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    39f2:	f851 1c40 	ldr.w	r1, [r1, #-64]
		s1 = work_space[(i+14)&0x0f];
    39f6:	eb06 0787 	add.w	r7, r6, r7, lsl #2
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    39fa:	f859 6c40 	ldr.w	r6, [r9, #-64]
		s1 = work_space[(i+14)&0x0f];
    39fe:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    3a02:	4431      	add	r1, r6
		s0 = sigma0(s0);
    3a04:	9e02      	ldr	r6, [sp, #8]
	return (((a) >> n) | ((a) << (32 - n)));
    3a06:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s0 = sigma0(s0);
    3a0a:	ea88 08d6 	eor.w	r8, r8, r6, lsr #3
		s1 = sigma1(s1);
    3a0e:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
    3a12:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    3a16:	4441      	add	r1, r8
    3a18:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    3a1a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    3a1c:	f849 1c40 	str.w	r1, [r9, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
    3a20:	ea4f 29f5 	mov.w	r9, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    3a24:	ea05 0802 	and.w	r8, r5, r2
    3a28:	ea89 19b5 	eor.w	r9, r9, r5, ror #6
    3a2c:	ea2c 0705 	bic.w	r7, ip, r5
    3a30:	f856 eb04 	ldr.w	lr, [r6], #4
    3a34:	ea87 0708 	eor.w	r7, r7, r8
    3a38:	ea89 6975 	eor.w	r9, r9, r5, ror #25
    3a3c:	444f      	add	r7, r9
    3a3e:	4477      	add	r7, lr
    3a40:	960b      	str	r6, [sp, #44]	; 0x2c
		t2 = Sigma0(a) + Maj(a, b, c);
    3a42:	9e00      	ldr	r6, [sp, #0]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    3a44:	4439      	add	r1, r7
    3a46:	4459      	add	r1, fp
		t2 = Sigma0(a) + Maj(a, b, c);
    3a48:	ea04 0e06 	and.w	lr, r4, r6
    3a4c:	ea84 0b06 	eor.w	fp, r4, r6
		h = g; g = f; f = e; e = d + t1;
    3a50:	9e01      	ldr	r6, [sp, #4]
	return (((a) >> n) | ((a) << (32 - n)));
    3a52:	ea4f 3773 	mov.w	r7, r3, ror #13
		h = g; g = f; f = e; e = d + t1;
    3a56:	440e      	add	r6, r1
		t2 = Sigma0(a) + Maj(a, b, c);
    3a58:	ea87 07b3 	eor.w	r7, r7, r3, ror #2
    3a5c:	ea0b 0b03 	and.w	fp, fp, r3
    3a60:	ea8b 0b0e 	eor.w	fp, fp, lr
		h = g; g = f; f = e; e = d + t1;
    3a64:	46b0      	mov	r8, r6
		t2 = Sigma0(a) + Maj(a, b, c);
    3a66:	ea87 57b3 	eor.w	r7, r7, r3, ror #22
    3a6a:	9e00      	ldr	r6, [sp, #0]
    3a6c:	445f      	add	r7, fp
	for ( ; i < 64; ++i) {
    3a6e:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
    3a72:	46e3      	mov	fp, ip
		d = c; c = b; b = a; a = t1 + t2;
    3a74:	4439      	add	r1, r7
	for ( ; i < 64; ++i) {
    3a76:	9601      	str	r6, [sp, #4]
    3a78:	d123      	bne.n	3ac2 <compress+0x1b6>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
    3a7a:	9e03      	ldr	r6, [sp, #12]
    3a7c:	440e      	add	r6, r1
    3a7e:	9904      	ldr	r1, [sp, #16]
    3a80:	6006      	str	r6, [r0, #0]
    3a82:	4419      	add	r1, r3
    3a84:	9b05      	ldr	r3, [sp, #20]
    3a86:	6041      	str	r1, [r0, #4]
    3a88:	4423      	add	r3, r4
    3a8a:	9900      	ldr	r1, [sp, #0]
    3a8c:	6083      	str	r3, [r0, #8]
    3a8e:	9b06      	ldr	r3, [sp, #24]
    3a90:	440b      	add	r3, r1
    3a92:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
    3a94:	9b07      	ldr	r3, [sp, #28]
    3a96:	4443      	add	r3, r8
    3a98:	6103      	str	r3, [r0, #16]
    3a9a:	9b08      	ldr	r3, [sp, #32]
    3a9c:	442b      	add	r3, r5
    3a9e:	6143      	str	r3, [r0, #20]
    3aa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3aa2:	4413      	add	r3, r2
    3aa4:	6183      	str	r3, [r0, #24]
    3aa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3aa8:	4463      	add	r3, ip
    3aaa:	61c3      	str	r3, [r0, #28]
}
    3aac:	b01d      	add	sp, #116	; 0x74
    3aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3ab2:	9900      	ldr	r1, [sp, #0]
    3ab4:	46e3      	mov	fp, ip
    3ab6:	e9cd 4100 	strd	r4, r1, [sp]
    3aba:	4694      	mov	ip, r2
		d = c; c = b; b = a; a = t1 + t2;
    3abc:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    3abe:	462a      	mov	r2, r5
    3ac0:	e745      	b.n	394e <compress+0x42>
    3ac2:	4694      	mov	ip, r2
    3ac4:	9400      	str	r4, [sp, #0]
    3ac6:	462a      	mov	r2, r5
    3ac8:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    3aca:	4645      	mov	r5, r8
		d = c; c = b; b = a; a = t1 + t2;
    3acc:	460b      	mov	r3, r1
    3ace:	e773      	b.n	39b8 <compress+0xac>
    3ad0:	00016e58 	.word	0x00016e58
    3ad4:	00016e18 	.word	0x00016e18

00003ad8 <tc_sha256_init>:
{
    3ad8:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
    3ada:	4604      	mov	r4, r0
    3adc:	b1c8      	cbz	r0, 3b12 <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
    3ade:	2270      	movs	r2, #112	; 0x70
    3ae0:	2100      	movs	r1, #0
    3ae2:	f00f f87b 	bl	12bdc <_set>
	s->iv[1] = 0xbb67ae85;
    3ae6:	4b0b      	ldr	r3, [pc, #44]	; (3b14 <tc_sha256_init+0x3c>)
    3ae8:	4a0b      	ldr	r2, [pc, #44]	; (3b18 <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
    3aea:	490c      	ldr	r1, [pc, #48]	; (3b1c <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
    3aec:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
    3af0:	4b0b      	ldr	r3, [pc, #44]	; (3b20 <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
    3af2:	480c      	ldr	r0, [pc, #48]	; (3b24 <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
    3af4:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
    3af8:	4b0b      	ldr	r3, [pc, #44]	; (3b28 <tc_sha256_init+0x50>)
    3afa:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
    3afe:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
    3b00:	4b0a      	ldr	r3, [pc, #40]	; (3b2c <tc_sha256_init+0x54>)
    3b02:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
    3b04:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    3b08:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    3b0c:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
    3b10:	61e3      	str	r3, [r4, #28]
}
    3b12:	bd10      	pop	{r4, pc}
    3b14:	bb67ae85 	.word	0xbb67ae85
    3b18:	6a09e667 	.word	0x6a09e667
    3b1c:	3c6ef372 	.word	0x3c6ef372
    3b20:	a54ff53a 	.word	0xa54ff53a
    3b24:	510e527f 	.word	0x510e527f
    3b28:	9b05688c 	.word	0x9b05688c
    3b2c:	1f83d9ab 	.word	0x1f83d9ab

00003b30 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    3b30:	4a09      	ldr	r2, [pc, #36]	; (3b58 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    3b32:	490a      	ldr	r1, [pc, #40]	; (3b5c <arch_swap+0x2c>)
	_current->arch.basepri = key;
    3b34:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    3b36:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    3b38:	66d8      	str	r0, [r3, #108]	; 0x6c
	_current->arch.swap_return_value = _k_neg_eagain;
    3b3a:	6719      	str	r1, [r3, #112]	; 0x70

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3b3c:	4908      	ldr	r1, [pc, #32]	; (3b60 <arch_swap+0x30>)
    3b3e:	684b      	ldr	r3, [r1, #4]
    3b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3b44:	604b      	str	r3, [r1, #4]
    3b46:	2300      	movs	r3, #0
    3b48:	f383 8811 	msr	BASEPRI, r3
    3b4c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    3b50:	6893      	ldr	r3, [r2, #8]
}
    3b52:	6f18      	ldr	r0, [r3, #112]	; 0x70
    3b54:	4770      	bx	lr
    3b56:	bf00      	nop
    3b58:	20001d84 	.word	0x20001d84
    3b5c:	000174ec 	.word	0x000174ec
    3b60:	e000ed00 	.word	0xe000ed00

00003b64 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    3b64:	4913      	ldr	r1, [pc, #76]	; (3bb4 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    3b66:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    3b68:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    3b6c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    3b6e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    3b72:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3b76:	2020      	movs	r0, #32
    msr BASEPRI, r0
    3b78:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    3b7c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    3b80:	4f0d      	ldr	r7, [pc, #52]	; (3bb8 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    3b82:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    3b86:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    3b88:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    3b8a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    3b8c:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
    movs r3, #0
    3b8e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    3b90:	66d3      	str	r3, [r2, #108]	; 0x6c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    3b92:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    3b96:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    3b9a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    3b9e:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    3ba2:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    3ba6:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    3ba8:	f00f fc05 	bl	133b6 <configure_builtin_stack_guard>
    pop {r2, lr}
    3bac:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    3bb0:	4770      	bx	lr
    3bb2:	0000      	.short	0x0000
    ldr r1, =_kernel
    3bb4:	20001d84 	.word	0x20001d84
    ldr v4, =_SCS_ICSR
    3bb8:	e000ed04 	.word	0xe000ed04

00003bbc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    3bbc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    3bc0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    3bc2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    3bc6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    3bca:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    3bcc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    3bd0:	2902      	cmp	r1, #2
    beq _oops
    3bd2:	d0ff      	beq.n	3bd4 <_oops>

00003bd4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    3bd4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    3bd6:	f00f fbf2 	bl	133be <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    3bda:	bd01      	pop	{r0, pc}

00003bdc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    3bdc:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    3bde:	2b00      	cmp	r3, #0
    3be0:	db08      	blt.n	3bf4 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3be2:	2201      	movs	r2, #1
    3be4:	f000 001f 	and.w	r0, r0, #31
    3be8:	fa02 f000 	lsl.w	r0, r2, r0
    3bec:	4a02      	ldr	r2, [pc, #8]	; (3bf8 <arch_irq_enable+0x1c>)
    3bee:	095b      	lsrs	r3, r3, #5
    3bf0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    3bf4:	4770      	bx	lr
    3bf6:	bf00      	nop
    3bf8:	e000e100 	.word	0xe000e100

00003bfc <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, u32_t flags)
{
    3bfc:	b570      	push	{r4, r5, r6, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
    3bfe:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    3c00:	2c07      	cmp	r4, #7
{
    3c02:	4605      	mov	r5, r0
    3c04:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    3c06:	d90e      	bls.n	3c26 <z_arm_irq_priority_set+0x2a>
    3c08:	235b      	movs	r3, #91	; 0x5b
    3c0a:	4a10      	ldr	r2, [pc, #64]	; (3c4c <z_arm_irq_priority_set+0x50>)
    3c0c:	4910      	ldr	r1, [pc, #64]	; (3c50 <z_arm_irq_priority_set+0x54>)
    3c0e:	4811      	ldr	r0, [pc, #68]	; (3c54 <z_arm_irq_priority_set+0x58>)
    3c10:	f00e f99a 	bl	11f48 <printk>
    3c14:	4631      	mov	r1, r6
    3c16:	4810      	ldr	r0, [pc, #64]	; (3c58 <z_arm_irq_priority_set+0x5c>)
    3c18:	2207      	movs	r2, #7
    3c1a:	f00e f995 	bl	11f48 <printk>
    3c1e:	215b      	movs	r1, #91	; 0x5b
    3c20:	480a      	ldr	r0, [pc, #40]	; (3c4c <z_arm_irq_priority_set+0x50>)
    3c22:	f00e fc27 	bl	12474 <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    3c26:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    3c28:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3c2a:	bfac      	ite	ge
    3c2c:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3c30:	4b0a      	ldrlt	r3, [pc, #40]	; (3c5c <z_arm_irq_priority_set+0x60>)
    3c32:	ea4f 1444 	mov.w	r4, r4, lsl #5
    3c36:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3c38:	bfab      	itete	ge
    3c3a:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3c3e:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3c42:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3c46:	555c      	strblt	r4, [r3, r5]
}
    3c48:	bd70      	pop	{r4, r5, r6, pc}
    3c4a:	bf00      	nop
    3c4c:	00018664 	.word	0x00018664
    3c50:	0001869a 	.word	0x0001869a
    3c54:	00017b50 	.word	0x00017b50
    3c58:	000186b5 	.word	0x000186b5
    3c5c:	e000ed14 	.word	0xe000ed14

00003c60 <arch_new_thread>:
#ifdef CONFIG_INIT_STACKS
	memset(stack, 0xaa, stack_size);
#endif
#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)stack;
	thread->stack_info.size = stack_size;
    3c60:	e9c0 1218 	strd	r1, r2, [r0, #96]	; 0x60
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
    3c64:	440a      	add	r2, r1
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(Z_STACK_PTR_ALIGN(stackEnd -
    3c66:	3a20      	subs	r2, #32
    3c68:	f022 0207 	bic.w	r2, r2, #7
#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
    3c6c:	6013      	str	r3, [r2, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
    3c6e:	9b00      	ldr	r3, [sp, #0]
	pInitCtx->basic.pc &= 0xfffffffe;
    3c70:	4907      	ldr	r1, [pc, #28]	; (3c90 <arch_new_thread+0x30>)
	pInitCtx->basic.a2 = (u32_t)parameter1;
    3c72:	6053      	str	r3, [r2, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    3c74:	9b01      	ldr	r3, [sp, #4]
	pInitCtx->basic.pc &= 0xfffffffe;
    3c76:	f021 0101 	bic.w	r1, r1, #1
	pInitCtx->basic.a3 = (u32_t)parameter2;
    3c7a:	6093      	str	r3, [r2, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    3c7c:	9b02      	ldr	r3, [sp, #8]
	pInitCtx->basic.pc &= 0xfffffffe;
    3c7e:	6191      	str	r1, [r2, #24]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    3c80:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	pInitCtx->basic.xpsr =
    3c82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3c86:	61d3      	str	r3, [r2, #28]
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (u32_t)pInitCtx;

	thread->arch.basepri = 0;
    3c88:	2300      	movs	r3, #0
	thread->callee_saved.psp = (u32_t)pInitCtx;
    3c8a:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    3c8c:	66c3      	str	r3, [r0, #108]	; 0x6c

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    3c8e:	4770      	bx	lr
    3c90:	00011f7d 	.word	0x00011f7d

00003c94 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
    3c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c96:	460d      	mov	r5, r1
    3c98:	4614      	mov	r4, r2
    3c9a:	4607      	mov	r7, r0
    3c9c:	461e      	mov	r6, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    3c9e:	f000 fb1d 	bl	42dc <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);

	_current = main_thread;
    3ca2:	4b0a      	ldr	r3, [pc, #40]	; (3ccc <arch_switch_to_main_thread+0x38>)
	start_of_main_stack =
    3ca4:	442c      	add	r4, r5
	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);
    3ca6:	f024 0407 	bic.w	r4, r4, #7
	_current = main_thread;
    3caa:	609f      	str	r7, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    3cac:	f385 880b 	msr	PSPLIM, r5

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    3cb0:	4630      	mov	r0, r6
    3cb2:	f384 8809 	msr	PSP, r4
    3cb6:	2100      	movs	r1, #0
    3cb8:	b663      	cpsie	if
    3cba:	f381 8811 	msr	BASEPRI, r1
    3cbe:	f3bf 8f6f 	isb	sy
    3cc2:	2200      	movs	r2, #0
    3cc4:	2300      	movs	r3, #0
    3cc6:	f00e f959 	bl	11f7c <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    3cca:	bf00      	nop
    3ccc:	20001d84 	.word	0x20001d84

00003cd0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    3cd0:	4901      	ldr	r1, [pc, #4]	; (3cd8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    3cd2:	2210      	movs	r2, #16
	str	r2, [r1]
    3cd4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    3cd6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    3cd8:	e000ed10 	.word	0xe000ed10

00003cdc <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    3cdc:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    3cde:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    3ce0:	f380 8811 	msr	BASEPRI, r0
	isb
    3ce4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    3ce8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    3cec:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    3cee:	b662      	cpsie	i
	isb
    3cf0:	f3bf 8f6f 	isb	sy

	bx	lr
    3cf4:	4770      	bx	lr
    3cf6:	bf00      	nop

00003cf8 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3cf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    3cfa:	4605      	mov	r5, r0

	if (esf != NULL) {
    3cfc:	460c      	mov	r4, r1
    3cfe:	b1c9      	cbz	r1, 3d34 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    3d00:	688b      	ldr	r3, [r1, #8]
    3d02:	4810      	ldr	r0, [pc, #64]	; (3d44 <z_arm_fatal_error+0x4c>)
    3d04:	9300      	str	r3, [sp, #0]
    3d06:	e9d1 2300 	ldrd	r2, r3, [r1]
    3d0a:	2145      	movs	r1, #69	; 0x45
    3d0c:	f00e f91c 	bl	11f48 <printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    3d10:	6963      	ldr	r3, [r4, #20]
    3d12:	2145      	movs	r1, #69	; 0x45
    3d14:	9300      	str	r3, [sp, #0]
    3d16:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    3d1a:	480b      	ldr	r0, [pc, #44]	; (3d48 <z_arm_fatal_error+0x50>)
    3d1c:	f00e f914 	bl	11f48 <printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    3d20:	2145      	movs	r1, #69	; 0x45
    3d22:	69e2      	ldr	r2, [r4, #28]
    3d24:	4809      	ldr	r0, [pc, #36]	; (3d4c <z_arm_fatal_error+0x54>)
    3d26:	f00e f90f 	bl	11f48 <printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    3d2a:	2145      	movs	r1, #69	; 0x45
    3d2c:	69a2      	ldr	r2, [r4, #24]
    3d2e:	4808      	ldr	r0, [pc, #32]	; (3d50 <z_arm_fatal_error+0x58>)
    3d30:	f00e f90a 	bl	11f48 <printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    3d34:	4621      	mov	r1, r4
    3d36:	4628      	mov	r0, r5
}
    3d38:	b003      	add	sp, #12
    3d3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    3d3e:	f00a be8d 	b.w	ea5c <z_fatal_error>
    3d42:	bf00      	nop
    3d44:	000186ea 	.word	0x000186ea
    3d48:	0001871e 	.word	0x0001871e
    3d4c:	00018752 	.word	0x00018752
    3d50:	00018766 	.word	0x00018766

00003d54 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    3d54:	bf30      	wfi
    b z_SysNmiOnReset
    3d56:	f7ff bffd 	b.w	3d54 <z_SysNmiOnReset>
    3d5a:	bf00      	nop

00003d5c <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3d5c:	4a0e      	ldr	r2, [pc, #56]	; (3d98 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    3d5e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3d60:	4b0e      	ldr	r3, [pc, #56]	; (3d9c <z_arm_prep_c+0x40>)
    3d62:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    3d66:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3d68:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3d6c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    3d70:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3d74:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    3d78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    3d7c:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    3d80:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    3d84:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    3d88:	f00a feea 	bl	eb60 <z_bss_zero>
	z_data_copy();
    3d8c:	f00a fef2 	bl	eb74 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    3d90:	f000 fa5a 	bl	4248 <z_arm_interrupt_init>
	z_cstart();
    3d94:	f00a ff2c 	bl	ebf0 <z_cstart>
    3d98:	00000000 	.word	0x00000000
    3d9c:	e000ed00 	.word	0xe000ed00

00003da0 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    3da0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    3da2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    3da4:	4a0b      	ldr	r2, [pc, #44]	; (3dd4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    3da6:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    3da8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    3daa:	bf1e      	ittt	ne
	movne	r1, #0
    3dac:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    3dae:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    3db0:	f012 fbb5 	blne	1651e <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    3db4:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    3db6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    3dba:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    3dbe:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    3dc2:	4905      	ldr	r1, [pc, #20]	; (3dd8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    3dc4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    3dc6:	c909      	ldmia	r1!, {r0, r3}
#ifdef CONFIG_EXECUTION_BENCHMARKING
	push {r0, r3}	/* Save r0 and r3 into stack */
	bl read_timer_end_of_isr
	pop {r0, r3}	/* Restore r0 and r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    3dc8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    3dca:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    3dce:	4903      	ldr	r1, [pc, #12]	; (3ddc <_isr_wrapper+0x3c>)
	bx r1
    3dd0:	4708      	bx	r1
    3dd2:	0000      	.short	0x0000
	ldr r2, =_kernel
    3dd4:	20001d84 	.word	0x20001d84
	ldr r1, =_sw_isr_table
    3dd8:	000168fc 	.word	0x000168fc
	ldr r1, =z_arm_int_exit
    3ddc:	00004209 	.word	0x00004209

00003de0 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    3de0:	f00e fb50 	bl	12484 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3de4:	2020      	movs	r0, #32
    msr BASEPRI, r0
    3de6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    3dea:	4808      	ldr	r0, [pc, #32]	; (3e0c <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    3dec:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    3df0:	1840      	adds	r0, r0, r1
    msr PSP, r0
    3df2:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    3df6:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    3dfa:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    3dfc:	4308      	orrs	r0, r1
    msr CONTROL, r0
    3dfe:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    3e02:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    3e06:	f7ff ffa9 	bl	3d5c <z_arm_prep_c>
    3e0a:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    3e0c:	200037d8 	.word	0x200037d8

00003e10 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    3e10:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    3e14:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
    3e18:	4672      	mov	r2, lr

	push {r0, lr}
    3e1a:	b501      	push	{r0, lr}

	bl z_arm_fault
    3e1c:	f000 f920 	bl	4060 <z_arm_fault>

	pop {r0, pc}
    3e20:	bd01      	pop	{r0, pc}
    3e22:	bf00      	nop

00003e24 <bus_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    3e24:	b570      	push	{r4, r5, r6, lr}
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3e26:	4c23      	ldr	r4, [pc, #140]	; (3eb4 <bus_fault.isra.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    3e28:	4606      	mov	r6, r0
    3e2a:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    3e2c:	4822      	ldr	r0, [pc, #136]	; (3eb8 <bus_fault.isra.0+0x94>)
    3e2e:	2145      	movs	r1, #69	; 0x45
    3e30:	f00e f88a 	bl	11f48 <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3e34:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    3e36:	04d1      	lsls	r1, r2, #19
    3e38:	d503      	bpl.n	3e42 <bus_fault.isra.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    3e3a:	2145      	movs	r1, #69	; 0x45
    3e3c:	481f      	ldr	r0, [pc, #124]	; (3ebc <bus_fault.isra.0+0x98>)
    3e3e:	f00e f883 	bl	11f48 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    3e42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3e44:	051a      	lsls	r2, r3, #20
    3e46:	d503      	bpl.n	3e50 <bus_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    3e48:	2145      	movs	r1, #69	; 0x45
    3e4a:	481d      	ldr	r0, [pc, #116]	; (3ec0 <bus_fault.isra.0+0x9c>)
    3e4c:	f00e f87c 	bl	11f48 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    3e50:	4c18      	ldr	r4, [pc, #96]	; (3eb4 <bus_fault.isra.0+0x90>)
    3e52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3e54:	059b      	lsls	r3, r3, #22
    3e56:	d510      	bpl.n	3e7a <bus_fault.isra.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    3e58:	481a      	ldr	r0, [pc, #104]	; (3ec4 <bus_fault.isra.0+0xa0>)
    3e5a:	2145      	movs	r1, #69	; 0x45
    3e5c:	f00e f874 	bl	11f48 <printk>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    3e60:	6ba2      	ldr	r2, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    3e62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3e64:	0418      	lsls	r0, r3, #16
    3e66:	d508      	bpl.n	3e7a <bus_fault.isra.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    3e68:	2145      	movs	r1, #69	; 0x45
    3e6a:	4817      	ldr	r0, [pc, #92]	; (3ec8 <bus_fault.isra.0+0xa4>)
    3e6c:	f00e f86c 	bl	11f48 <printk>
			if (from_hard_fault) {
    3e70:	b11e      	cbz	r6, 3e7a <bus_fault.isra.0+0x56>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    3e72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3e74:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    3e78:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3e7a:	4c0e      	ldr	r4, [pc, #56]	; (3eb4 <bus_fault.isra.0+0x90>)
    3e7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3e7e:	0559      	lsls	r1, r3, #21
    3e80:	d503      	bpl.n	3e8a <bus_fault.isra.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    3e82:	2145      	movs	r1, #69	; 0x45
    3e84:	4811      	ldr	r0, [pc, #68]	; (3ecc <bus_fault.isra.0+0xa8>)
    3e86:	f00e f85f 	bl	11f48 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    3e8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3e8c:	05da      	lsls	r2, r3, #23
    3e8e:	d50b      	bpl.n	3ea8 <bus_fault.isra.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    3e90:	2145      	movs	r1, #69	; 0x45
    3e92:	480f      	ldr	r0, [pc, #60]	; (3ed0 <bus_fault.isra.0+0xac>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    3e94:	f00e f858 	bl	11f48 <printk>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
    3e98:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3e9a:	4a06      	ldr	r2, [pc, #24]	; (3eb4 <bus_fault.isra.0+0x90>)
    3e9c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3e9e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    3ea2:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    3ea4:	7028      	strb	r0, [r5, #0]

	return reason;
}
    3ea6:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    3ea8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3eaa:	049b      	lsls	r3, r3, #18
    3eac:	d5f4      	bpl.n	3e98 <bus_fault.isra.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    3eae:	2145      	movs	r1, #69	; 0x45
    3eb0:	4808      	ldr	r0, [pc, #32]	; (3ed4 <bus_fault.isra.0+0xb0>)
    3eb2:	e7ef      	b.n	3e94 <bus_fault.isra.0+0x70>
    3eb4:	e000ed00 	.word	0xe000ed00
    3eb8:	00018799 	.word	0x00018799
    3ebc:	000187b4 	.word	0x000187b4
    3ec0:	000187ca 	.word	0x000187ca
    3ec4:	000187e2 	.word	0x000187e2
    3ec8:	00018800 	.word	0x00018800
    3ecc:	0001881a 	.word	0x0001881a
    3ed0:	0001883a 	.word	0x0001883a
    3ed4:	00018857 	.word	0x00018857

00003ed8 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
    3ed8:	b538      	push	{r3, r4, r5, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3eda:	4c21      	ldr	r4, [pc, #132]	; (3f60 <usage_fault.isra.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    3edc:	2145      	movs	r1, #69	; 0x45
    3ede:	4821      	ldr	r0, [pc, #132]	; (3f64 <usage_fault.isra.0+0x8c>)
    3ee0:	f00e f832 	bl	11f48 <printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3ee4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    3ee6:	0195      	lsls	r5, r2, #6
    3ee8:	d503      	bpl.n	3ef2 <usage_fault.isra.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    3eea:	2145      	movs	r1, #69	; 0x45
    3eec:	481e      	ldr	r0, [pc, #120]	; (3f68 <usage_fault.isra.0+0x90>)
    3eee:	f00e f82b 	bl	11f48 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    3ef2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3ef4:	01dc      	lsls	r4, r3, #7
    3ef6:	d503      	bpl.n	3f00 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    3ef8:	2145      	movs	r1, #69	; 0x45
    3efa:	481c      	ldr	r0, [pc, #112]	; (3f6c <usage_fault.isra.0+0x94>)
    3efc:	f00e f824 	bl	11f48 <printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    3f00:	4d17      	ldr	r5, [pc, #92]	; (3f60 <usage_fault.isra.0+0x88>)
    3f02:	6aac      	ldr	r4, [r5, #40]	; 0x28
    3f04:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    3f08:	d004      	beq.n	3f14 <usage_fault.isra.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    3f0a:	2145      	movs	r1, #69	; 0x45
    3f0c:	4818      	ldr	r0, [pc, #96]	; (3f70 <usage_fault.isra.0+0x98>)
    3f0e:	f00e f81b 	bl	11f48 <printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    3f12:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    3f14:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3f16:	0318      	lsls	r0, r3, #12
    3f18:	d503      	bpl.n	3f22 <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    3f1a:	2145      	movs	r1, #69	; 0x45
    3f1c:	4815      	ldr	r0, [pc, #84]	; (3f74 <usage_fault.isra.0+0x9c>)
    3f1e:	f00e f813 	bl	11f48 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    3f22:	4d0f      	ldr	r5, [pc, #60]	; (3f60 <usage_fault.isra.0+0x88>)
    3f24:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    3f26:	0351      	lsls	r1, r2, #13
    3f28:	d503      	bpl.n	3f32 <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    3f2a:	2145      	movs	r1, #69	; 0x45
    3f2c:	4812      	ldr	r0, [pc, #72]	; (3f78 <usage_fault.isra.0+0xa0>)
    3f2e:	f00e f80b 	bl	11f48 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    3f32:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3f34:	039a      	lsls	r2, r3, #14
    3f36:	d503      	bpl.n	3f40 <usage_fault.isra.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    3f38:	2145      	movs	r1, #69	; 0x45
    3f3a:	4810      	ldr	r0, [pc, #64]	; (3f7c <usage_fault.isra.0+0xa4>)
    3f3c:	f00e f804 	bl	11f48 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    3f40:	4d07      	ldr	r5, [pc, #28]	; (3f60 <usage_fault.isra.0+0x88>)
    3f42:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3f44:	03db      	lsls	r3, r3, #15
    3f46:	d503      	bpl.n	3f50 <usage_fault.isra.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    3f48:	2145      	movs	r1, #69	; 0x45
    3f4a:	480d      	ldr	r0, [pc, #52]	; (3f80 <usage_fault.isra.0+0xa8>)
    3f4c:	f00d fffc 	bl	11f48 <printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3f50:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    3f52:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3f54:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    3f58:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    3f5c:	62ab      	str	r3, [r5, #40]	; 0x28
}
    3f5e:	bd38      	pop	{r3, r4, r5, pc}
    3f60:	e000ed00 	.word	0xe000ed00
    3f64:	0001888b 	.word	0x0001888b
    3f68:	000188a8 	.word	0x000188a8
    3f6c:	000188c0 	.word	0x000188c0
    3f70:	000188df 	.word	0x000188df
    3f74:	0001890e 	.word	0x0001890e
    3f78:	00018931 	.word	0x00018931
    3f7c:	0001895b 	.word	0x0001895b
    3f80:	0001897a 	.word	0x0001897a

00003f84 <mem_manage_fault.isra.0>:
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    3f84:	b570      	push	{r4, r5, r6, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3f86:	4c2a      	ldr	r4, [pc, #168]	; (4030 <mem_manage_fault.isra.0+0xac>)
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    3f88:	4606      	mov	r6, r0
    3f8a:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    3f8c:	4829      	ldr	r0, [pc, #164]	; (4034 <mem_manage_fault.isra.0+0xb0>)
    3f8e:	2145      	movs	r1, #69	; 0x45
    3f90:	f00d ffda 	bl	11f48 <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3f94:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    3f96:	06d1      	lsls	r1, r2, #27
    3f98:	d503      	bpl.n	3fa2 <mem_manage_fault.isra.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    3f9a:	2145      	movs	r1, #69	; 0x45
    3f9c:	4826      	ldr	r0, [pc, #152]	; (4038 <mem_manage_fault.isra.0+0xb4>)
    3f9e:	f00d ffd3 	bl	11f48 <printk>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    3fa2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3fa4:	071a      	lsls	r2, r3, #28
    3fa6:	d503      	bpl.n	3fb0 <mem_manage_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    3fa8:	2145      	movs	r1, #69	; 0x45
    3faa:	4824      	ldr	r0, [pc, #144]	; (403c <mem_manage_fault.isra.0+0xb8>)
    3fac:	f00d ffcc 	bl	11f48 <printk>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    3fb0:	4c1f      	ldr	r4, [pc, #124]	; (4030 <mem_manage_fault.isra.0+0xac>)
    3fb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3fb4:	079b      	lsls	r3, r3, #30
    3fb6:	d510      	bpl.n	3fda <mem_manage_fault.isra.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
    3fb8:	4821      	ldr	r0, [pc, #132]	; (4040 <mem_manage_fault.isra.0+0xbc>)
    3fba:	2145      	movs	r1, #69	; 0x45
    3fbc:	f00d ffc4 	bl	11f48 <printk>
		mmfar = SCB->MMFAR;
    3fc0:	6b62      	ldr	r2, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    3fc2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3fc4:	0618      	lsls	r0, r3, #24
    3fc6:	d508      	bpl.n	3fda <mem_manage_fault.isra.0+0x56>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    3fc8:	2145      	movs	r1, #69	; 0x45
    3fca:	481e      	ldr	r0, [pc, #120]	; (4044 <mem_manage_fault.isra.0+0xc0>)
    3fcc:	f00d ffbc 	bl	11f48 <printk>
			if (from_hard_fault) {
    3fd0:	b11e      	cbz	r6, 3fda <mem_manage_fault.isra.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    3fd2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3fd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3fd8:	62a3      	str	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    3fda:	4c15      	ldr	r4, [pc, #84]	; (4030 <mem_manage_fault.isra.0+0xac>)
    3fdc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    3fde:	07d1      	lsls	r1, r2, #31
    3fe0:	d503      	bpl.n	3fea <mem_manage_fault.isra.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
    3fe2:	2145      	movs	r1, #69	; 0x45
    3fe4:	4818      	ldr	r0, [pc, #96]	; (4048 <mem_manage_fault.isra.0+0xc4>)
    3fe6:	f00d ffaf 	bl	11f48 <printk>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3fea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3fec:	069a      	lsls	r2, r3, #26
    3fee:	d503      	bpl.n	3ff8 <mem_manage_fault.isra.0+0x74>
		PR_FAULT_INFO(
    3ff0:	2145      	movs	r1, #69	; 0x45
    3ff2:	4816      	ldr	r0, [pc, #88]	; (404c <mem_manage_fault.isra.0+0xc8>)
    3ff4:	f00d ffa8 	bl	11f48 <printk>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    3ff8:	4b0d      	ldr	r3, [pc, #52]	; (4030 <mem_manage_fault.isra.0+0xac>)
    3ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3ffc:	06db      	lsls	r3, r3, #27
    3ffe:	d50e      	bpl.n	401e <mem_manage_fault.isra.0+0x9a>
	__ASSERT(0,
    4000:	4913      	ldr	r1, [pc, #76]	; (4050 <mem_manage_fault.isra.0+0xcc>)
    4002:	f44f 739b 	mov.w	r3, #310	; 0x136
    4006:	4a13      	ldr	r2, [pc, #76]	; (4054 <mem_manage_fault.isra.0+0xd0>)
    4008:	4813      	ldr	r0, [pc, #76]	; (4058 <mem_manage_fault.isra.0+0xd4>)
    400a:	f00d ff9d 	bl	11f48 <printk>
    400e:	4813      	ldr	r0, [pc, #76]	; (405c <mem_manage_fault.isra.0+0xd8>)
    4010:	f00d ff9a 	bl	11f48 <printk>
    4014:	f44f 719b 	mov.w	r1, #310	; 0x136
    4018:	480e      	ldr	r0, [pc, #56]	; (4054 <mem_manage_fault.isra.0+0xd0>)
    401a:	f00e fa2b 	bl	12474 <assert_post_action>
	*recoverable = memory_fault_recoverable(esf);
    401e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    4020:	4a03      	ldr	r2, [pc, #12]	; (4030 <mem_manage_fault.isra.0+0xac>)
    4022:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4024:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    4028:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    402a:	7028      	strb	r0, [r5, #0]
}
    402c:	bd70      	pop	{r4, r5, r6, pc}
    402e:	bf00      	nop
    4030:	e000ed00 	.word	0xe000ed00
    4034:	000189aa 	.word	0x000189aa
    4038:	000189c5 	.word	0x000189c5
    403c:	000187ca 	.word	0x000187ca
    4040:	000189fd 	.word	0x000189fd
    4044:	00018a1a 	.word	0x00018a1a
    4048:	00018a35 	.word	0x00018a35
    404c:	00018857 	.word	0x00018857
    4050:	0001b82b 	.word	0x0001b82b
    4054:	00018a59 	.word	0x00018a59
    4058:	00017b50 	.word	0x00017b50
    405c:	00018a93 	.word	0x00018a93

00004060 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
    4060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4064:	4b52      	ldr	r3, [pc, #328]	; (41b0 <z_arm_fault+0x150>)
{
    4066:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4068:	f8d3 8004 	ldr.w	r8, [r3, #4]
    406c:	2500      	movs	r5, #0
{
    406e:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4070:	f3c8 0708 	ubfx	r7, r8, #0, #9
    4074:	f385 8811 	msr	BASEPRI, r5
    4078:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    407c:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    4080:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    4084:	d107      	bne.n	4096 <z_arm_fault+0x36>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    4086:	f002 030c 	and.w	r3, r2, #12
    408a:	2b08      	cmp	r3, #8
    408c:	d114      	bne.n	40b8 <z_arm_fault+0x58>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    408e:	2145      	movs	r1, #69	; 0x45
    4090:	4848      	ldr	r0, [pc, #288]	; (41b4 <z_arm_fault+0x154>)
    4092:	f00d ff59 	bl	11f48 <printk>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    4096:	f240 33b1 	movw	r3, #945	; 0x3b1
    409a:	4a47      	ldr	r2, [pc, #284]	; (41b8 <z_arm_fault+0x158>)
    409c:	4947      	ldr	r1, [pc, #284]	; (41bc <z_arm_fault+0x15c>)
    409e:	4848      	ldr	r0, [pc, #288]	; (41c0 <z_arm_fault+0x160>)
    40a0:	f00d ff52 	bl	11f48 <printk>
    40a4:	4847      	ldr	r0, [pc, #284]	; (41c4 <z_arm_fault+0x164>)
    40a6:	f00d ff4f 	bl	11f48 <printk>
    40aa:	f240 31b1 	movw	r1, #945	; 0x3b1
    40ae:	4842      	ldr	r0, [pc, #264]	; (41b8 <z_arm_fault+0x158>)
    40b0:	f00e f9e0 	bl	12474 <assert_post_action>
    40b4:	2600      	movs	r6, #0
    40b6:	e005      	b.n	40c4 <z_arm_fault+0x64>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    40b8:	0712      	lsls	r2, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
    40ba:	bf5c      	itt	pl
    40bc:	4606      	movpl	r6, r0
			*nested_exc = true;
    40be:	2501      	movpl	r5, #1
	__ASSERT(esf != NULL,
    40c0:	2e00      	cmp	r6, #0
    40c2:	d0e8      	beq.n	4096 <z_arm_fault+0x36>
	*recoverable = false;
    40c4:	2300      	movs	r3, #0
    40c6:	1efa      	subs	r2, r7, #3
    40c8:	461c      	mov	r4, r3
    40ca:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    40ce:	4613      	mov	r3, r2
    40d0:	2b09      	cmp	r3, #9
    40d2:	d85b      	bhi.n	418c <z_arm_fault+0x12c>
    40d4:	e8df f003 	tbb	[pc, r3]
    40d8:	33534f05 	.word	0x33534f05
    40dc:	5a5a5a5a 	.word	0x5a5a5a5a
    40e0:	575a      	.short	0x575a
	PR_FAULT_INFO("***** HARD FAULT *****");
    40e2:	2145      	movs	r1, #69	; 0x45
    40e4:	4838      	ldr	r0, [pc, #224]	; (41c8 <z_arm_fault+0x168>)
    40e6:	f00d ff2f 	bl	11f48 <printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    40ea:	4b31      	ldr	r3, [pc, #196]	; (41b0 <z_arm_fault+0x150>)
	*recoverable = false;
    40ec:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    40f0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    40f2:	f014 0402 	ands.w	r4, r4, #2
    40f6:	d005      	beq.n	4104 <z_arm_fault+0xa4>
		PR_EXC("  Bus fault on vector table read");
    40f8:	2145      	movs	r1, #69	; 0x45
    40fa:	4834      	ldr	r0, [pc, #208]	; (41cc <z_arm_fault+0x16c>)
	PR_FAULT_INFO(
    40fc:	f00d ff24 	bl	11f48 <printk>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    4100:	2400      	movs	r4, #0
}
    4102:	e01f      	b.n	4144 <z_arm_fault+0xe4>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    4104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4106:	005b      	lsls	r3, r3, #1
    4108:	d51c      	bpl.n	4144 <z_arm_fault+0xe4>
		PR_EXC("  Fault escalation (see below)");
    410a:	2145      	movs	r1, #69	; 0x45
    410c:	4830      	ldr	r0, [pc, #192]	; (41d0 <z_arm_fault+0x170>)
    410e:	f00d ff1b 	bl	11f48 <printk>
		if (SCB_MMFSR != 0) {
    4112:	4b30      	ldr	r3, [pc, #192]	; (41d4 <z_arm_fault+0x174>)
    4114:	781b      	ldrb	r3, [r3, #0]
    4116:	b12b      	cbz	r3, 4124 <z_arm_fault+0xc4>
			reason = mem_manage_fault(esf, 1, recoverable);
    4118:	2001      	movs	r0, #1
    411a:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    411e:	f7ff ff31 	bl	3f84 <mem_manage_fault.isra.0>
    4122:	e00e      	b.n	4142 <z_arm_fault+0xe2>
		} else if (SCB_BFSR != 0) {
    4124:	4b2c      	ldr	r3, [pc, #176]	; (41d8 <z_arm_fault+0x178>)
    4126:	781b      	ldrb	r3, [r3, #0]
    4128:	b12b      	cbz	r3, 4136 <z_arm_fault+0xd6>
			reason = bus_fault(esf, 1, recoverable);
    412a:	2001      	movs	r0, #1
    412c:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    4130:	f7ff fe78 	bl	3e24 <bus_fault.isra.0>
    4134:	e005      	b.n	4142 <z_arm_fault+0xe2>
		} else if (SCB_UFSR != 0) {
    4136:	4b29      	ldr	r3, [pc, #164]	; (41dc <z_arm_fault+0x17c>)
    4138:	881b      	ldrh	r3, [r3, #0]
    413a:	b29b      	uxth	r3, r3
    413c:	b113      	cbz	r3, 4144 <z_arm_fault+0xe4>
			reason = usage_fault(esf);
    413e:	f7ff fecb 	bl	3ed8 <usage_fault.isra.0>
    4142:	4604      	mov	r4, r0
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    4144:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4148:	b993      	cbnz	r3, 4170 <z_arm_fault+0x110>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    414a:	2220      	movs	r2, #32
    414c:	4631      	mov	r1, r6
    414e:	a802      	add	r0, sp, #8
    4150:	f00f fa0e 	bl	13570 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    4154:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4156:	b335      	cbz	r5, 41a6 <z_arm_fault+0x146>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    4158:	f3c3 0208 	ubfx	r2, r3, #0, #9
    415c:	b922      	cbnz	r2, 4168 <z_arm_fault+0x108>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    415e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    4162:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    4166:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    4168:	4620      	mov	r0, r4
    416a:	a902      	add	r1, sp, #8
    416c:	f7ff fdc4 	bl	3cf8 <z_arm_fatal_error>
}
    4170:	b00a      	add	sp, #40	; 0x28
    4172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    4176:	2000      	movs	r0, #0
    4178:	f10d 0107 	add.w	r1, sp, #7
    417c:	e7cf      	b.n	411e <z_arm_fault+0xbe>
		reason = bus_fault(esf, 0, recoverable);
    417e:	2000      	movs	r0, #0
    4180:	f10d 0107 	add.w	r1, sp, #7
    4184:	e7d4      	b.n	4130 <z_arm_fault+0xd0>
	PR_FAULT_INFO(
    4186:	2145      	movs	r1, #69	; 0x45
    4188:	4815      	ldr	r0, [pc, #84]	; (41e0 <z_arm_fault+0x180>)
    418a:	e7b7      	b.n	40fc <z_arm_fault+0x9c>
	PR_FAULT_INFO("***** %s %d) *****",
    418c:	4915      	ldr	r1, [pc, #84]	; (41e4 <z_arm_fault+0x184>)
    418e:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    4192:	4a15      	ldr	r2, [pc, #84]	; (41e8 <z_arm_fault+0x188>)
    4194:	4815      	ldr	r0, [pc, #84]	; (41ec <z_arm_fault+0x18c>)
    4196:	bf08      	it	eq
    4198:	460a      	moveq	r2, r1
    419a:	f1a7 0310 	sub.w	r3, r7, #16
    419e:	2145      	movs	r1, #69	; 0x45
    41a0:	f00d fed2 	bl	11f48 <printk>
    41a4:	e7ac      	b.n	4100 <z_arm_fault+0xa0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    41a6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    41aa:	f023 0301 	bic.w	r3, r3, #1
    41ae:	e7da      	b.n	4166 <z_arm_fault+0x106>
    41b0:	e000ed00 	.word	0xe000ed00
    41b4:	00018afb 	.word	0x00018afb
    41b8:	00018a59 	.word	0x00018a59
    41bc:	00018b2b 	.word	0x00018b2b
    41c0:	00017b50 	.word	0x00017b50
    41c4:	00018b3e 	.word	0x00018b3e
    41c8:	00018b7c 	.word	0x00018b7c
    41cc:	00018b98 	.word	0x00018b98
    41d0:	00018bbe 	.word	0x00018bbe
    41d4:	e000ed28 	.word	0xe000ed28
    41d8:	e000ed29 	.word	0xe000ed29
    41dc:	e000ed2a 	.word	0xe000ed2a
    41e0:	00018be2 	.word	0x00018be2
    41e4:	00018acd 	.word	0x00018acd
    41e8:	00018ae2 	.word	0x00018ae2
    41ec:	00018c1d 	.word	0x00018c1d

000041f0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    41f0:	4b04      	ldr	r3, [pc, #16]	; (4204 <z_arm_fault_init+0x14>)
    41f2:	695a      	ldr	r2, [r3, #20]
    41f4:	f042 0210 	orr.w	r2, r2, #16
    41f8:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    41fa:	695a      	ldr	r2, [r3, #20]
    41fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    4200:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    4202:	4770      	bx	lr
    4204:	e000ed00 	.word	0xe000ed00

00004208 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    4208:	4b04      	ldr	r3, [pc, #16]	; (421c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    420a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    420c:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    420e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    4210:	d003      	beq.n	421a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    4212:	4903      	ldr	r1, [pc, #12]	; (4220 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    4214:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    4218:	600a      	str	r2, [r1, #0]

0000421a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    421a:	4770      	bx	lr
	ldr r3, =_kernel
    421c:	20001d84 	.word	0x20001d84
	ldr r1, =_SCS_ICSR
    4220:	e000ed04 	.word	0xe000ed04

00004224 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    4224:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4228:	4905      	ldr	r1, [pc, #20]	; (4240 <sys_arch_reboot+0x1c>)
    422a:	4b06      	ldr	r3, [pc, #24]	; (4244 <sys_arch_reboot+0x20>)
    422c:	68ca      	ldr	r2, [r1, #12]
    422e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4232:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4234:	60cb      	str	r3, [r1, #12]
    4236:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    423a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    423c:	e7fd      	b.n	423a <sys_arch_reboot+0x16>
    423e:	bf00      	nop
    4240:	e000ed00 	.word	0xe000ed00
    4244:	05fa0004 	.word	0x05fa0004

00004248 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    4248:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    424a:	2120      	movs	r1, #32
    424c:	4803      	ldr	r0, [pc, #12]	; (425c <z_arm_interrupt_init+0x14>)
    424e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    4250:	3301      	adds	r3, #1
    4252:	2b45      	cmp	r3, #69	; 0x45
    4254:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    4258:	d1f9      	bne.n	424e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    425a:	4770      	bx	lr
    425c:	e000e100 	.word	0xe000e100

00004260 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    4260:	b538      	push	{r3, r4, r5, lr}
    4262:	4604      	mov	r4, r0
	__asm__ volatile(
    4264:	f04f 0320 	mov.w	r3, #32
    4268:	f3ef 8511 	mrs	r5, BASEPRI
    426c:	f383 8811 	msr	BASEPRI, r3
    4270:	f3bf 8f6f 	isb	sy
	unsigned int key;

	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
    4274:	7b03      	ldrb	r3, [r0, #12]
    4276:	07db      	lsls	r3, r3, #31
    4278:	d50c      	bpl.n	4294 <z_impl_k_thread_abort+0x34>
    427a:	4912      	ldr	r1, [pc, #72]	; (42c4 <z_impl_k_thread_abort+0x64>)
    427c:	2323      	movs	r3, #35	; 0x23
    427e:	4a12      	ldr	r2, [pc, #72]	; (42c8 <z_impl_k_thread_abort+0x68>)
    4280:	4812      	ldr	r0, [pc, #72]	; (42cc <z_impl_k_thread_abort+0x6c>)
    4282:	f00d fe61 	bl	11f48 <printk>
    4286:	4812      	ldr	r0, [pc, #72]	; (42d0 <z_impl_k_thread_abort+0x70>)
    4288:	f00d fe5e 	bl	11f48 <printk>
    428c:	2123      	movs	r1, #35	; 0x23
    428e:	480e      	ldr	r0, [pc, #56]	; (42c8 <z_impl_k_thread_abort+0x68>)
    4290:	f00e f8f0 	bl	12474 <assert_post_action>
		 "essential thread aborted");

	z_thread_single_abort(thread);
    4294:	4620      	mov	r0, r4
    4296:	f00b ff5b 	bl	10150 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    429a:	4b0e      	ldr	r3, [pc, #56]	; (42d4 <z_impl_k_thread_abort+0x74>)
    429c:	689b      	ldr	r3, [r3, #8]
    429e:	42a3      	cmp	r3, r4
    42a0:	d10b      	bne.n	42ba <z_impl_k_thread_abort+0x5a>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    42a2:	4b0d      	ldr	r3, [pc, #52]	; (42d8 <z_impl_k_thread_abort+0x78>)
    42a4:	685a      	ldr	r2, [r3, #4]
    42a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
    42aa:	b912      	cbnz	r2, 42b2 <z_impl_k_thread_abort+0x52>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
    42ac:	4628      	mov	r0, r5
    42ae:	f7ff fc3f 	bl	3b30 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    42b2:	685a      	ldr	r2, [r3, #4]
    42b4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    42b8:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    42ba:	4628      	mov	r0, r5
}
    42bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    42c0:	f012 b9a4 	b.w	1660c <z_reschedule_irqlock>
    42c4:	00018c76 	.word	0x00018c76
    42c8:	00018c35 	.word	0x00018c35
    42cc:	00017b50 	.word	0x00017b50
    42d0:	00018ca4 	.word	0x00018ca4
    42d4:	20001d84 	.word	0x20001d84
    42d8:	e000ed00 	.word	0xe000ed00

000042dc <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    42dc:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    42de:	4b0e      	ldr	r3, [pc, #56]	; (4318 <z_arm_configure_static_mpu_regions+0x3c>)
{
    42e0:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
    42e2:	9302      	str	r3, [sp, #8]
    42e4:	4b0d      	ldr	r3, [pc, #52]	; (431c <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    42e6:	4c0e      	ldr	r4, [pc, #56]	; (4320 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
    42e8:	9303      	str	r3, [sp, #12]
    42ea:	4b0e      	ldr	r3, [pc, #56]	; (4324 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    42ec:	4a0e      	ldr	r2, [pc, #56]	; (4328 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
    42ee:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
    42f0:	ab02      	add	r3, sp, #8
    42f2:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    42f4:	a801      	add	r0, sp, #4
    42f6:	4623      	mov	r3, r4
    42f8:	2101      	movs	r1, #1
    42fa:	f000 f96d 	bl	45d8 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
    42fe:	2300      	movs	r3, #0
    4300:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    4302:	4b0a      	ldr	r3, [pc, #40]	; (432c <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    4304:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    4306:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    4308:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
    430a:	9305      	str	r3, [sp, #20]
    430c:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    430e:	f000 f989 	bl	4624 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    4312:	b008      	add	sp, #32
    4314:	bd10      	pop	{r4, pc}
    4316:	bf00      	nop
    4318:	20000000 	.word	0x20000000
    431c:	00000000 	.word	0x00000000
    4320:	20070000 	.word	0x20070000
    4324:	00010006 	.word	0x00010006
    4328:	20000000 	.word	0x20000000
    432c:	20000690 	.word	0x20000690

00004330 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
    4330:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    4332:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    4334:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    4336:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    433a:	f004 031f 	and.w	r3, r4, #31
    433e:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    4340:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    4342:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    4344:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    4348:	4904      	ldr	r1, [pc, #16]	; (435c <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    434a:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    434e:	f043 0301 	orr.w	r3, r3, #1
    4352:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    4354:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    4356:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    4358:	bd10      	pop	{r4, pc}
    435a:	bf00      	nop
    435c:	e000ed90 	.word	0xe000ed90

00004360 <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const u8_t index,
	const struct k_mem_partition *new_region)
{
    4360:	b530      	push	{r4, r5, lr}

	LOG_DBG("Configure MPU region at index 0x%x", index);

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    4362:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
    4364:	680c      	ldr	r4, [r1, #0]
{
    4366:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_k_mem_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, u32_t base, u32_t size)
{
	p_attr->rbar = attr->rbar &
    4368:	890a      	ldrh	r2, [r1, #8]
    436a:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
    436c:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    436e:	3b01      	subs	r3, #1
    4370:	f024 041f 	bic.w	r4, r4, #31
    4374:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    4376:	f002 021f 	and.w	r2, r2, #31
    437a:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    437e:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
    4382:	280f      	cmp	r0, #15
    4384:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
    4386:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    438a:	9303      	str	r3, [sp, #12]
    438c:	d909      	bls.n	43a2 <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    438e:	4602      	mov	r2, r0
    4390:	2145      	movs	r1, #69	; 0x45
    4392:	4806      	ldr	r0, [pc, #24]	; (43ac <mpu_configure_region+0x4c>)
    4394:	f00d fdd8 	bl	11f48 <printk>
		return -EINVAL;
    4398:	f06f 0415 	mvn.w	r4, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
    439c:	4620      	mov	r0, r4
    439e:	b005      	add	sp, #20
    43a0:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
    43a2:	4669      	mov	r1, sp
    43a4:	f7ff ffc4 	bl	4330 <region_init>
	return region_allocate_and_init(index,
    43a8:	e7f8      	b.n	439c <mpu_configure_region+0x3c>
    43aa:	bf00      	nop
    43ac:	00018cc3 	.word	0x00018cc3

000043b0 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    43b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    43b4:	4680      	mov	r8, r0
    43b6:	4689      	mov	r9, r1
    43b8:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    43ba:	2700      	movs	r7, #0
	MPU->RNR = index;
    43bc:	4d4e      	ldr	r5, [pc, #312]	; (44f8 <mpu_configure_regions_and_partition.constprop.0+0x148>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    43be:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    43c0:	454f      	cmp	r7, r9
    43c2:	da29      	bge.n	4418 <mpu_configure_regions_and_partition.constprop.0+0x68>
		if (regions[i]->size == 0U) {
    43c4:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
    43c8:	f8d3 a004 	ldr.w	sl, [r3, #4]
    43cc:	f1ba 0f00 	cmp.w	sl, #0
    43d0:	d042      	beq.n	4458 <mpu_configure_regions_and_partition.constprop.0+0xa8>
		&&
    43d2:	f1ba 0f1f 	cmp.w	sl, #31
    43d6:	d918      	bls.n	440a <mpu_configure_regions_and_partition.constprop.0+0x5a>
		&&
    43d8:	f01a 0f1f 	tst.w	sl, #31
    43dc:	d115      	bne.n	440a <mpu_configure_regions_and_partition.constprop.0+0x5a>
		((part->start &
    43de:	f8d3 b000 	ldr.w	fp, [r3]
		&&
    43e2:	f01b 0f1f 	tst.w	fp, #31
    43e6:	d110      	bne.n	440a <mpu_configure_regions_and_partition.constprop.0+0x5a>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    43e8:	4658      	mov	r0, fp
    43ea:	f00e fff3 	bl	133d4 <arm_cmse_mpu_region_get>
    43ee:	4606      	mov	r6, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    43f0:	eb0a 000b 	add.w	r0, sl, fp
    43f4:	3801      	subs	r0, #1
    43f6:	f00e ffed 	bl	133d4 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    43fa:	4286      	cmp	r6, r0
    43fc:	d010      	beq.n	4420 <mpu_configure_regions_and_partition.constprop.0+0x70>
	return -EINVAL;
    43fe:	f06f 0615 	mvn.w	r6, #21
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    4402:	4632      	mov	r2, r6
    4404:	2145      	movs	r1, #69	; 0x45
    4406:	483d      	ldr	r0, [pc, #244]	; (44fc <mpu_configure_regions_and_partition.constprop.0+0x14c>)
    4408:	e002      	b.n	4410 <mpu_configure_regions_and_partition.constprop.0+0x60>
			LOG_ERR("Partition %u: sanity check failed.", i);
    440a:	463a      	mov	r2, r7
    440c:	2145      	movs	r1, #69	; 0x45
    440e:	483c      	ldr	r0, [pc, #240]	; (4500 <mpu_configure_regions_and_partition.constprop.0+0x150>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    4410:	f00d fd9a 	bl	11f48 <printk>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    4414:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    4418:	4620      	mov	r0, r4
    441a:	b005      	add	sp, #20
    441c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    4420:	f116 0f16 	cmn.w	r6, #22
    4424:	d0ed      	beq.n	4402 <mpu_configure_regions_and_partition.constprop.0+0x52>
			(u_reg_index > (reg_index - 1))) {
    4426:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    4428:	42b3      	cmp	r3, r6
    442a:	dbea      	blt.n	4402 <mpu_configure_regions_and_partition.constprop.0+0x52>
	MPU->RNR = index;
    442c:	60ae      	str	r6, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    442e:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
    4430:	60ae      	str	r6, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    4432:	692b      	ldr	r3, [r5, #16]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    4434:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    4438:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    443c:	f043 0b1f 	orr.w	fp, r3, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    4440:	e9d1 3200 	ldrd	r3, r2, [r1]
    4444:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
    4446:	4298      	cmp	r0, r3
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    4448:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i]->start == u_reg_base) &&
    444c:	d116      	bne.n	447c <mpu_configure_regions_and_partition.constprop.0+0xcc>
    444e:	45d3      	cmp	fp, sl
    4450:	d104      	bne.n	445c <mpu_configure_regions_and_partition.constprop.0+0xac>
			mpu_configure_region(u_reg_index, regions[i]);
    4452:	b2f0      	uxtb	r0, r6
    4454:	f7ff ff84 	bl	4360 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    4458:	3701      	adds	r7, #1
    445a:	e7b1      	b.n	43c0 <mpu_configure_regions_and_partition.constprop.0+0x10>
	MPU->RNR = index;
    445c:	60ae      	str	r6, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    445e:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    4460:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    4464:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    4468:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    446a:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
    446c:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
    446e:	f7ff ff77 	bl	4360 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    4472:	f110 0f16 	cmn.w	r0, #22
    4476:	d0cd      	beq.n	4414 <mpu_configure_regions_and_partition.constprop.0+0x64>
			reg_index++;
    4478:	1c44      	adds	r4, r0, #1
    447a:	e7ed      	b.n	4458 <mpu_configure_regions_and_partition.constprop.0+0xa8>
	MPU->RNR = index;
    447c:	60ae      	str	r6, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    447e:	692a      	ldr	r2, [r5, #16]
    4480:	3b01      	subs	r3, #1
    4482:	f023 031f 	bic.w	r3, r3, #31
    4486:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    448a:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    448c:	45d3      	cmp	fp, sl
    448e:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    4490:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
    4492:	d0ec      	beq.n	446e <mpu_configure_regions_and_partition.constprop.0+0xbe>
				mpu_configure_region(reg_index, regions[i]);
    4494:	f7ff ff64 	bl	4360 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    4498:	f110 0f16 	cmn.w	r0, #22
    449c:	d0ba      	beq.n	4414 <mpu_configure_regions_and_partition.constprop.0+0x64>
	MPU->RNR = index;
    449e:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
    44a0:	68ea      	ldr	r2, [r5, #12]
    44a2:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
    44a6:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = MPU->RBAR &
    44aa:	f362 0304 	bfi	r3, r2, #0, #5
    44ae:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    44b2:	692b      	ldr	r3, [r5, #16]
    44b4:	f89d 2008 	ldrb.w	r2, [sp, #8]
    44b8:	085b      	lsrs	r3, r3, #1
    44ba:	f363 1247 	bfi	r2, r3, #5, #3
    44be:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
    44c2:	f858 2027 	ldr.w	r2, [r8, r7, lsl #2]
			reg_index++;
    44c6:	3001      	adds	r0, #1
			fill_region.base = regions[i]->start +
    44c8:	e9d2 3200 	ldrd	r3, r2, [r2]
    44cc:	4413      	add	r3, r2
    44ce:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
    44d0:	f023 031f 	bic.w	r3, r3, #31
    44d4:	445b      	add	r3, fp
    44d6:	eba3 030a 	sub.w	r3, r3, sl
    44da:	b2c0      	uxtb	r0, r0
    44dc:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
    44e0:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
    44e2:	9303      	str	r3, [sp, #12]
    44e4:	d903      	bls.n	44ee <mpu_configure_regions_and_partition.constprop.0+0x13e>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    44e6:	4602      	mov	r2, r0
    44e8:	2145      	movs	r1, #69	; 0x45
    44ea:	4806      	ldr	r0, [pc, #24]	; (4504 <mpu_configure_regions_and_partition.constprop.0+0x154>)
    44ec:	e790      	b.n	4410 <mpu_configure_regions_and_partition.constprop.0+0x60>
	region_init(index, region_conf);
    44ee:	4669      	mov	r1, sp
    44f0:	f7ff ff1e 	bl	4330 <region_init>
    44f4:	e7c0      	b.n	4478 <mpu_configure_regions_and_partition.constprop.0+0xc8>
    44f6:	bf00      	nop
    44f8:	e000ed90 	.word	0xe000ed90
    44fc:	00018d16 	.word	0x00018d16
    4500:	00018cee 	.word	0x00018cee
    4504:	00018cc3 	.word	0x00018cc3

00004508 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    4508:	2205      	movs	r2, #5
    450a:	4b03      	ldr	r3, [pc, #12]	; (4518 <arm_core_mpu_enable+0x10>)
    450c:	605a      	str	r2, [r3, #4]
    450e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4512:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    4516:	4770      	bx	lr
    4518:	e000ed90 	.word	0xe000ed90

0000451c <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    451c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    4520:	2200      	movs	r2, #0
    4522:	4b01      	ldr	r3, [pc, #4]	; (4528 <arm_core_mpu_disable+0xc>)
    4524:	605a      	str	r2, [r3, #4]
}
    4526:	4770      	bx	lr
    4528:	e000ed90 	.word	0xe000ed90

0000452c <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
    452c:	b570      	push	{r4, r5, r6, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    452e:	4e20      	ldr	r6, [pc, #128]	; (45b0 <arm_mpu_init+0x84>)
    4530:	6835      	ldr	r5, [r6, #0]
    4532:	2d10      	cmp	r5, #16
    4534:	d913      	bls.n	455e <arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    4536:	f240 1339 	movw	r3, #313	; 0x139
    453a:	4a1e      	ldr	r2, [pc, #120]	; (45b4 <arm_mpu_init+0x88>)
    453c:	491e      	ldr	r1, [pc, #120]	; (45b8 <arm_mpu_init+0x8c>)
    453e:	481f      	ldr	r0, [pc, #124]	; (45bc <arm_mpu_init+0x90>)
    4540:	f00d fd02 	bl	11f48 <printk>
    4544:	2210      	movs	r2, #16
    4546:	4629      	mov	r1, r5
    4548:	481d      	ldr	r0, [pc, #116]	; (45c0 <arm_mpu_init+0x94>)
    454a:	f00d fcfd 	bl	11f48 <printk>
    454e:	4819      	ldr	r0, [pc, #100]	; (45b4 <arm_mpu_init+0x88>)
    4550:	f240 1139 	movw	r1, #313	; 0x139
    4554:	f00d ff8e 	bl	12474 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    4558:	f04f 30ff 	mov.w	r0, #4294967295
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
    455c:	bd70      	pop	{r4, r5, r6, pc}
	arm_core_mpu_disable();
    455e:	f7ff ffdd 	bl	451c <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4562:	2000      	movs	r0, #0
	MPU->MAIR0 =
    4564:	4c17      	ldr	r4, [pc, #92]	; (45c4 <arm_mpu_init+0x98>)
    4566:	4a18      	ldr	r2, [pc, #96]	; (45c8 <arm_mpu_init+0x9c>)
    4568:	6322      	str	r2, [r4, #48]	; 0x30
    456a:	4285      	cmp	r5, r0
    456c:	d119      	bne.n	45a2 <arm_mpu_init+0x76>
	static_regions_num = mpu_config.num_regions;
    456e:	4b17      	ldr	r3, [pc, #92]	; (45cc <arm_mpu_init+0xa0>)
    4570:	701d      	strb	r5, [r3, #0]
	arm_core_mpu_enable();
    4572:	f7ff ffc9 	bl	4508 <arm_core_mpu_enable>
	__ASSERT(
    4576:	6823      	ldr	r3, [r4, #0]
    4578:	f3c3 2307 	ubfx	r3, r3, #8, #8
    457c:	2b10      	cmp	r3, #16
    457e:	d00e      	beq.n	459e <arm_mpu_init+0x72>
    4580:	4913      	ldr	r1, [pc, #76]	; (45d0 <arm_mpu_init+0xa4>)
    4582:	f240 135b 	movw	r3, #347	; 0x15b
    4586:	4a0b      	ldr	r2, [pc, #44]	; (45b4 <arm_mpu_init+0x88>)
    4588:	480c      	ldr	r0, [pc, #48]	; (45bc <arm_mpu_init+0x90>)
    458a:	f00d fcdd 	bl	11f48 <printk>
    458e:	4811      	ldr	r0, [pc, #68]	; (45d4 <arm_mpu_init+0xa8>)
    4590:	f00d fcda 	bl	11f48 <printk>
    4594:	f240 115b 	movw	r1, #347	; 0x15b
    4598:	4806      	ldr	r0, [pc, #24]	; (45b4 <arm_mpu_init+0x88>)
    459a:	f00d ff6b 	bl	12474 <assert_post_action>
	return 0;
    459e:	2000      	movs	r0, #0
    45a0:	e7dc      	b.n	455c <arm_mpu_init+0x30>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    45a2:	6871      	ldr	r1, [r6, #4]
    45a4:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    45a8:	f7ff fec2 	bl	4330 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    45ac:	3001      	adds	r0, #1
    45ae:	e7dc      	b.n	456a <arm_mpu_init+0x3e>
    45b0:	00016f18 	.word	0x00016f18
    45b4:	00018d3e 	.word	0x00018d3e
    45b8:	0001b82b 	.word	0x0001b82b
    45bc:	00017b50 	.word	0x00017b50
    45c0:	00018d7e 	.word	0x00018d7e
    45c4:	e000ed90 	.word	0xe000ed90
    45c8:	0044ffaa 	.word	0x0044ffaa
    45cc:	20001e84 	.word	0x20001e84
    45d0:	00018db2 	.word	0x00018db2
    45d4:	00018e03 	.word	0x00018e03

000045d8 <arm_core_mpu_configure_static_mpu_regions>:
{
    45d8:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    45da:	4d0d      	ldr	r5, [pc, #52]	; (4610 <arm_core_mpu_configure_static_mpu_regions+0x38>)
    45dc:	460c      	mov	r4, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    45de:	782a      	ldrb	r2, [r5, #0]
    45e0:	f7ff fee6 	bl	43b0 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    45e4:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    45e6:	3016      	adds	r0, #22
    45e8:	d111      	bne.n	460e <arm_core_mpu_configure_static_mpu_regions+0x36>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    45ea:	f44f 7381 	mov.w	r3, #258	; 0x102
    45ee:	4a09      	ldr	r2, [pc, #36]	; (4614 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    45f0:	4909      	ldr	r1, [pc, #36]	; (4618 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    45f2:	480a      	ldr	r0, [pc, #40]	; (461c <arm_core_mpu_configure_static_mpu_regions+0x44>)
    45f4:	f00d fca8 	bl	11f48 <printk>
    45f8:	4621      	mov	r1, r4
    45fa:	4809      	ldr	r0, [pc, #36]	; (4620 <arm_core_mpu_configure_static_mpu_regions+0x48>)
    45fc:	f00d fca4 	bl	11f48 <printk>
}
    4600:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    4604:	f44f 7181 	mov.w	r1, #258	; 0x102
    4608:	4802      	ldr	r0, [pc, #8]	; (4614 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    460a:	f00d bf33 	b.w	12474 <assert_post_action>
}
    460e:	bd38      	pop	{r3, r4, r5, pc}
    4610:	20001e84 	.word	0x20001e84
    4614:	00018d3e 	.word	0x00018d3e
    4618:	0001b82b 	.word	0x0001b82b
    461c:	00017b50 	.word	0x00017b50
    4620:	00018e24 	.word	0x00018e24

00004624 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    4624:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4628:	4e2f      	ldr	r6, [pc, #188]	; (46e8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
    462a:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    462c:	4605      	mov	r5, r0
    462e:	f04f 0800 	mov.w	r8, #0
    4632:	46b3      	mov	fp, r6
	MPU->RNR = index;
    4634:	4f2d      	ldr	r7, [pc, #180]	; (46ec <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    4636:	45c8      	cmp	r8, r9
    4638:	db02      	blt.n	4640 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
}
    463a:	b003      	add	sp, #12
    463c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
    4640:	f8d5 a004 	ldr.w	sl, [r5, #4]
    4644:	f1ba 0f00 	cmp.w	sl, #0
    4648:	d049      	beq.n	46de <arm_core_mpu_mark_areas_for_dynamic_regions+0xba>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    464a:	6829      	ldr	r1, [r5, #0]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    464c:	4608      	mov	r0, r1
    464e:	9101      	str	r1, [sp, #4]
    4650:	f00e fec0 	bl	133d4 <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    4654:	9901      	ldr	r1, [sp, #4]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    4656:	4604      	mov	r4, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    4658:	eb0a 0001 	add.w	r0, sl, r1
    465c:	3801      	subs	r0, #1
    465e:	f00e feb9 	bl	133d4 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    4662:	4284      	cmp	r4, r0
    4664:	f04f 0214 	mov.w	r2, #20
    4668:	4b21      	ldr	r3, [pc, #132]	; (46f0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
    466a:	d018      	beq.n	469e <arm_core_mpu_mark_areas_for_dynamic_regions+0x7a>
		dyn_reg_info[i].index =
    466c:	f06f 0315 	mvn.w	r3, #21
    4670:	fb02 f808 	mul.w	r8, r2, r8
    4674:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    4678:	f44f 7389 	mov.w	r3, #274	; 0x112
    467c:	4a1d      	ldr	r2, [pc, #116]	; (46f4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
    467e:	491e      	ldr	r1, [pc, #120]	; (46f8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
    4680:	481e      	ldr	r0, [pc, #120]	; (46fc <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
    4682:	f00d fc61 	bl	11f48 <printk>
    4686:	4649      	mov	r1, r9
    4688:	481d      	ldr	r0, [pc, #116]	; (4700 <arm_core_mpu_mark_areas_for_dynamic_regions+0xdc>)
    468a:	f00d fc5d 	bl	11f48 <printk>
    468e:	f44f 7189 	mov.w	r1, #274	; 0x112
    4692:	4818      	ldr	r0, [pc, #96]	; (46f4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
}
    4694:	b003      	add	sp, #12
    4696:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    469a:	f00d beeb 	b.w	12474 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    469e:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    46a2:	6034      	str	r4, [r6, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    46a4:	d0e8      	beq.n	4678 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    46a6:	7819      	ldrb	r1, [r3, #0]
    46a8:	42a1      	cmp	r1, r4
    46aa:	dde5      	ble.n	4678 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
    46ac:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    46b0:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
    46b2:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
    46b4:	68fc      	ldr	r4, [r7, #12]
    46b6:	f100 0108 	add.w	r1, r0, #8
    46ba:	7b00      	ldrb	r0, [r0, #12]
    46bc:	f364 0004 	bfi	r0, r4, #0, #5
    46c0:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    46c2:	6938      	ldr	r0, [r7, #16]
    46c4:	790c      	ldrb	r4, [r1, #4]
    46c6:	0840      	lsrs	r0, r0, #1
    46c8:	f360 1447 	bfi	r4, r0, #5, #3
    46cc:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    46ce:	68f9      	ldr	r1, [r7, #12]
    46d0:	f021 011f 	bic.w	r1, r1, #31
    46d4:	6071      	str	r1, [r6, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    46d6:	6939      	ldr	r1, [r7, #16]
    46d8:	f021 011f 	bic.w	r1, r1, #31
    46dc:	6131      	str	r1, [r6, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    46de:	f108 0801 	add.w	r8, r8, #1
    46e2:	3614      	adds	r6, #20
    46e4:	350c      	adds	r5, #12
    46e6:	e7a6      	b.n	4636 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    46e8:	20000bf4 	.word	0x20000bf4
    46ec:	e000ed90 	.word	0xe000ed90
    46f0:	20001e84 	.word	0x20001e84
    46f4:	00018d3e 	.word	0x00018d3e
    46f8:	0001b82b 	.word	0x0001b82b
    46fc:	00017b50 	.word	0x00017b50
    4700:	00018e50 	.word	0x00018e50

00004704 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    4704:	4b01      	ldr	r3, [pc, #4]	; (470c <__stdout_hook_install+0x8>)
    4706:	6018      	str	r0, [r3, #0]
}
    4708:	4770      	bx	lr
    470a:	bf00      	nop
    470c:	200001e8 	.word	0x200001e8

00004710 <remoteproc_mgr_boot>:
{
	/* UARTE */
	/* Assign specific GPIOs that will be used to get UARTE from
	 * nRF5340 Network MCU.
	 */
	NRF_P0->PIN_CNF[CPUNET_UARTE_PIN_TX] =
    4710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	NRF_SPU->EXTDOMAIN[0].PERM = 1 << 4;
}
#endif /* !CONFIG_TRUSTED_EXECUTION_NONSECURE */

static int remoteproc_mgr_boot(struct device *dev)
{
    4714:	b508      	push	{r3, lr}
	NRF_P0->PIN_CNF[CPUNET_UARTE_PIN_TX] =
    4716:	4b0c      	ldr	r3, [pc, #48]	; (4748 <remoteproc_mgr_boot+0x38>)

	/* Initialize inter-processor shared memory block to zero. It is
	 * assumed that the application image has access to the shared
	 * memory at this point (see #24147).
	 */
	memset((void *) SHM_BASE_ADDRESS, 0, SHM_SIZE);
    4718:	2100      	movs	r1, #0
	NRF_P0->PIN_CNF[CPUNET_UARTE_PIN_TX] =
    471a:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
	NRF_P0->PIN_CNF[CPUNET_UARTE_PIN_RX] =
    471e:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
	NRF_P0->PIN_CNF[CPUNET_UARTE_PIN_RTS] =
    4722:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	NRF_P0->PIN_CNF[CPUNET_UARTE_PIN_CTS] =
    4726:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	NRF_SPU->EXTDOMAIN[0].PERM = 1 << 4;
    472a:	2210      	movs	r2, #16
    472c:	4b07      	ldr	r3, [pc, #28]	; (474c <remoteproc_mgr_boot+0x3c>)
	memset((void *) SHM_BASE_ADDRESS, 0, SHM_SIZE);
    472e:	4808      	ldr	r0, [pc, #32]	; (4750 <remoteproc_mgr_boot+0x40>)
	NRF_SPU->EXTDOMAIN[0].PERM = 1 << 4;
    4730:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
	memset((void *) SHM_BASE_ADDRESS, 0, SHM_SIZE);
    4734:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4738:	f00e ff45 	bl	135c6 <memset>
#endif

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
    473c:	2000      	movs	r0, #0
    473e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4742:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");

	return 0;
}
    4746:	bd08      	pop	{r3, pc}
    4748:	50842500 	.word	0x50842500
    474c:	50003000 	.word	0x50003000
    4750:	20070000 	.word	0x20070000

00004754 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const u8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    4754:	4b0e      	ldr	r3, [pc, #56]	; (4790 <bt_hex_real+0x3c>)
    4756:	2940      	cmp	r1, #64	; 0x40
    4758:	bf28      	it	cs
    475a:	2140      	movcs	r1, #64	; 0x40
{
    475c:	b570      	push	{r4, r5, r6, lr}
    475e:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    4760:	4c0c      	ldr	r4, [pc, #48]	; (4794 <bt_hex_real+0x40>)
    4762:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
    4764:	42b0      	cmp	r0, r6
    4766:	f103 0302 	add.w	r3, r3, #2
    476a:	d104      	bne.n	4776 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    476c:	2300      	movs	r3, #0
    476e:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    4772:	4807      	ldr	r0, [pc, #28]	; (4790 <bt_hex_real+0x3c>)
    4774:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    4776:	7802      	ldrb	r2, [r0, #0]
    4778:	0912      	lsrs	r2, r2, #4
    477a:	5ca2      	ldrb	r2, [r4, r2]
    477c:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    4780:	f810 2b01 	ldrb.w	r2, [r0], #1
    4784:	f002 020f 	and.w	r2, r2, #15
    4788:	5ca2      	ldrb	r2, [r4, r2]
    478a:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    478e:	e7e9      	b.n	4764 <bt_hex_real+0x10>
    4790:	20001e85 	.word	0x20001e85
    4794:	00018ea8 	.word	0x00018ea8

00004798 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    4798:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
    479a:	7803      	ldrb	r3, [r0, #0]
    479c:	b08b      	sub	sp, #44	; 0x2c
    479e:	4604      	mov	r4, r0
    47a0:	ad07      	add	r5, sp, #28
    47a2:	2b03      	cmp	r3, #3
    47a4:	d821      	bhi.n	47ea <bt_addr_le_str_real+0x52>
    47a6:	e8df f003 	tbb	[pc, r3]
    47aa:	1a02      	.short	0x1a02
    47ac:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    47ae:	4912      	ldr	r1, [pc, #72]	; (47f8 <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
    47b0:	4628      	mov	r0, r5
    47b2:	f00e fe8e 	bl	134d2 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    47b6:	7863      	ldrb	r3, [r4, #1]
    47b8:	211e      	movs	r1, #30
    47ba:	9304      	str	r3, [sp, #16]
    47bc:	78a3      	ldrb	r3, [r4, #2]
    47be:	4a0f      	ldr	r2, [pc, #60]	; (47fc <bt_addr_le_str_real+0x64>)
    47c0:	9303      	str	r3, [sp, #12]
    47c2:	78e3      	ldrb	r3, [r4, #3]
    47c4:	9505      	str	r5, [sp, #20]
    47c6:	9302      	str	r3, [sp, #8]
    47c8:	7923      	ldrb	r3, [r4, #4]
    47ca:	480d      	ldr	r0, [pc, #52]	; (4800 <bt_addr_le_str_real+0x68>)
    47cc:	9301      	str	r3, [sp, #4]
    47ce:	7963      	ldrb	r3, [r4, #5]
    47d0:	9300      	str	r3, [sp, #0]
    47d2:	79a3      	ldrb	r3, [r4, #6]
    47d4:	f00d fbc5 	bl	11f62 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    47d8:	4809      	ldr	r0, [pc, #36]	; (4800 <bt_addr_le_str_real+0x68>)
    47da:	b00b      	add	sp, #44	; 0x2c
    47dc:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    47de:	4909      	ldr	r1, [pc, #36]	; (4804 <bt_addr_le_str_real+0x6c>)
    47e0:	e7e6      	b.n	47b0 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    47e2:	4909      	ldr	r1, [pc, #36]	; (4808 <bt_addr_le_str_real+0x70>)
    47e4:	e7e4      	b.n	47b0 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    47e6:	4909      	ldr	r1, [pc, #36]	; (480c <bt_addr_le_str_real+0x74>)
    47e8:	e7e2      	b.n	47b0 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    47ea:	210a      	movs	r1, #10
    47ec:	4628      	mov	r0, r5
    47ee:	4a08      	ldr	r2, [pc, #32]	; (4810 <bt_addr_le_str_real+0x78>)
    47f0:	f00d fbb7 	bl	11f62 <snprintk>
		break;
    47f4:	e7df      	b.n	47b6 <bt_addr_le_str_real+0x1e>
    47f6:	bf00      	nop
    47f8:	000176b5 	.word	0x000176b5
    47fc:	000176de 	.word	0x000176de
    4800:	20001f06 	.word	0x20001f06
    4804:	000176bc 	.word	0x000176bc
    4808:	000176c3 	.word	0x000176c3
    480c:	000176cd 	.word	0x000176cd
    4810:	000176d7 	.word	0x000176d7

00004814 <save_id>:
#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
	int err;
	BT_INFO("Saving ID");
    4814:	2149      	movs	r1, #73	; 0x49
{
    4816:	b508      	push	{r3, lr}
	BT_INFO("Saving ID");
    4818:	4809      	ldr	r0, [pc, #36]	; (4840 <save_id+0x2c>)
    481a:	f00d fb95 	bl	11f48 <printk>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
    481e:	4909      	ldr	r1, [pc, #36]	; (4844 <save_id+0x30>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
    4820:	4809      	ldr	r0, [pc, #36]	; (4848 <save_id+0x34>)
    4822:	79ca      	ldrb	r2, [r1, #7]
    4824:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    4828:	f7fd f9fa 	bl	1c20 <settings_save_one>
	if (err) {
    482c:	4602      	mov	r2, r0
    482e:	b128      	cbz	r0, 483c <save_id+0x28>
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
    4830:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save ID (err %d)", err);
    4834:	2145      	movs	r1, #69	; 0x45
    4836:	4805      	ldr	r0, [pc, #20]	; (484c <save_id+0x38>)
    4838:	f00d bb86 	b.w	11f48 <printk>
}
    483c:	bd08      	pop	{r3, pc}
    483e:	bf00      	nop
    4840:	00018ec0 	.word	0x00018ec0
    4844:	20000000 	.word	0x20000000
    4848:	00018ecf 	.word	0x00018ecf
    484c:	00018ed5 	.word	0x00018ed5

00004850 <set>:
{
    4850:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4852:	4616      	mov	r6, r2
    4854:	461f      	mov	r7, r3
	if (!name) {
    4856:	4604      	mov	r4, r0
    4858:	b930      	cbnz	r0, 4868 <set+0x18>
		BT_ERR("Insufficient number of arguments");
    485a:	2145      	movs	r1, #69	; 0x45
    485c:	4819      	ldr	r0, [pc, #100]	; (48c4 <set+0x74>)
    485e:	f00d fb73 	bl	11f48 <printk>
	return -ENOENT;
    4862:	f06f 0401 	mvn.w	r4, #1
    4866:	e013      	b.n	4890 <set+0x40>
	len = settings_name_next(name, &next);
    4868:	a901      	add	r1, sp, #4
    486a:	f00d ff63 	bl	12734 <settings_name_next>
	if (!strncmp(name, "id", len)) {
    486e:	4916      	ldr	r1, [pc, #88]	; (48c8 <set+0x78>)
	len = settings_name_next(name, &next);
    4870:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
    4872:	4620      	mov	r0, r4
    4874:	f00e fe5d 	bl	13532 <strncmp>
    4878:	4604      	mov	r4, r0
    487a:	2800      	cmp	r0, #0
    487c:	d1f1      	bne.n	4862 <set+0x12>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    487e:	4d13      	ldr	r5, [pc, #76]	; (48cc <set+0x7c>)
    4880:	e8d5 3faf 	lda	r3, [r5]
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
    4884:	075b      	lsls	r3, r3, #29
    4886:	d506      	bpl.n	4896 <set+0x46>
			BT_WARN("Ignoring identities stored in flash");
    4888:	2157      	movs	r1, #87	; 0x57
    488a:	4811      	ldr	r0, [pc, #68]	; (48d0 <set+0x80>)
    488c:	f00d fb5c 	bl	11f48 <printk>
}
    4890:	4620      	mov	r0, r4
    4892:	b003      	add	sp, #12
    4894:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
    4896:	3d98      	subs	r5, #152	; 0x98
    4898:	2207      	movs	r2, #7
    489a:	4629      	mov	r1, r5
    489c:	4638      	mov	r0, r7
    489e:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
    48a0:	2806      	cmp	r0, #6
    48a2:	d80a      	bhi.n	48ba <set+0x6a>
				BT_ERR("Invalid length ID address in storage");
    48a4:	2145      	movs	r1, #69	; 0x45
    48a6:	480b      	ldr	r0, [pc, #44]	; (48d4 <set+0x84>)
    48a8:	f00d fb4e 	bl	11f48 <printk>
			(void)memset(bt_dev.id_addr, 0,
    48ac:	2207      	movs	r2, #7
    48ae:	4621      	mov	r1, r4
    48b0:	4628      	mov	r0, r5
    48b2:	f00e fe88 	bl	135c6 <memset>
			bt_dev.id_count = 0U;
    48b6:	71ec      	strb	r4, [r5, #7]
    48b8:	e7ea      	b.n	4890 <set+0x40>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
    48ba:	2307      	movs	r3, #7
    48bc:	fbb0 f0f3 	udiv	r0, r0, r3
    48c0:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
    48c2:	e7e5      	b.n	4890 <set+0x40>
    48c4:	00018ef5 	.word	0x00018ef5
    48c8:	000176ca 	.word	0x000176ca
    48cc:	20000098 	.word	0x20000098
    48d0:	00018f1b 	.word	0x00018f1b
    48d4:	00018f44 	.word	0x00018f44

000048d8 <bt_settings_encode_key>:
{
    48d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    48dc:	b088      	sub	sp, #32
    48de:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    48e2:	799c      	ldrb	r4, [r3, #6]
    48e4:	795d      	ldrb	r5, [r3, #5]
    48e6:	791e      	ldrb	r6, [r3, #4]
    48e8:	78df      	ldrb	r7, [r3, #3]
    48ea:	f893 c002 	ldrb.w	ip, [r3, #2]
    48ee:	f893 e001 	ldrb.w	lr, [r3, #1]
    48f2:	781b      	ldrb	r3, [r3, #0]
	if (key) {
    48f4:	f1b8 0f00 	cmp.w	r8, #0
    48f8:	d00e      	beq.n	4918 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
    48fa:	e9cd 3806 	strd	r3, r8, [sp, #24]
    48fe:	e9cd ce04 	strd	ip, lr, [sp, #16]
    4902:	4613      	mov	r3, r2
    4904:	e9cd 6702 	strd	r6, r7, [sp, #8]
    4908:	e9cd 4500 	strd	r4, r5, [sp]
    490c:	4a08      	ldr	r2, [pc, #32]	; (4930 <bt_settings_encode_key+0x58>)
    490e:	f00d fb28 	bl	11f62 <snprintk>
}
    4912:	b008      	add	sp, #32
    4914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
    4918:	e9cd e305 	strd	lr, r3, [sp, #20]
    491c:	e9cd 7c03 	strd	r7, ip, [sp, #12]
    4920:	4613      	mov	r3, r2
    4922:	e9cd 5601 	strd	r5, r6, [sp, #4]
    4926:	4a03      	ldr	r2, [pc, #12]	; (4934 <bt_settings_encode_key+0x5c>)
    4928:	9400      	str	r4, [sp, #0]
    492a:	f00d fb1a 	bl	11f62 <snprintk>
}
    492e:	e7f0      	b.n	4912 <bt_settings_encode_key+0x3a>
    4930:	00018f6e 	.word	0x00018f6e
    4934:	00018f92 	.word	0x00018f92

00004938 <bt_settings_save_id>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4938:	4907      	ldr	r1, [pc, #28]	; (4958 <bt_settings_save_id+0x20>)
    493a:	e8d1 3fef 	ldaex	r3, [r1]
    493e:	f043 0201 	orr.w	r2, r3, #1
    4942:	e8c1 2fe0 	stlex	r0, r2, [r1]
    4946:	2800      	cmp	r0, #0
    4948:	d1f7      	bne.n	493a <bt_settings_save_id+0x2>
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    494a:	07db      	lsls	r3, r3, #31
    494c:	d403      	bmi.n	4956 <bt_settings_save_id+0x1e>
		k_queue_append(&work_q->queue, work);
    494e:	4803      	ldr	r0, [pc, #12]	; (495c <bt_settings_save_id+0x24>)
    4950:	3908      	subs	r1, #8
    4952:	f011 be48 	b.w	165e6 <k_queue_append>
K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
}
    4956:	4770      	bx	lr
    4958:	200001f4 	.word	0x200001f4
    495c:	20001dc8 	.word	0x20001dc8

00004960 <commit>:

static int commit(void)
{
    4960:	b538      	push	{r3, r4, r5, lr}
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
    4962:	4c13      	ldr	r4, [pc, #76]	; (49b0 <commit+0x50>)
    4964:	79e3      	ldrb	r3, [r4, #7]
    4966:	b96b      	cbnz	r3, 4984 <commit+0x24>
		bt_setup_public_id_addr();
    4968:	f001 fe46 	bl	65f8 <bt_setup_public_id_addr>
	}

	if (!bt_dev.id_count) {
    496c:	79e3      	ldrb	r3, [r4, #7]
    496e:	b94b      	cbnz	r3, 4984 <commit+0x24>
		int err;

		err = bt_setup_random_id_addr();
    4970:	f001 fece 	bl	6710 <bt_setup_random_id_addr>
		if (err) {
    4974:	4604      	mov	r4, r0
    4976:	b128      	cbz	r0, 4984 <commit+0x24>
			BT_ERR("Unable to setup an identity address");
    4978:	2145      	movs	r1, #69	; 0x45
    497a:	480e      	ldr	r0, [pc, #56]	; (49b4 <commit+0x54>)
    497c:	f00d fae4 	bl	11f48 <printk>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
    4980:	4620      	mov	r0, r4
    4982:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4984:	4d0c      	ldr	r5, [pc, #48]	; (49b8 <commit+0x58>)
    4986:	e8d5 3faf 	lda	r3, [r5]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    498a:	079b      	lsls	r3, r3, #30
    498c:	d401      	bmi.n	4992 <commit+0x32>
		bt_finalize_init();
    498e:	f001 fd53 	bl	6438 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4992:	e8d5 4fef 	ldaex	r4, [r5]
    4996:	f424 4300 	bic.w	r3, r4, #32768	; 0x8000
    499a:	e8c5 3fe2 	stlex	r2, r3, [r5]
    499e:	2a00      	cmp	r2, #0
    49a0:	d1f7      	bne.n	4992 <commit+0x32>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
    49a2:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
    49a6:	d0eb      	beq.n	4980 <commit+0x20>
		bt_settings_save_id();
    49a8:	f7ff ffc6 	bl	4938 <bt_settings_save_id>
	return 0;
    49ac:	2400      	movs	r4, #0
    49ae:	e7e7      	b.n	4980 <commit+0x20>
    49b0:	20000000 	.word	0x20000000
    49b4:	00018fb3 	.word	0x00018fb3
    49b8:	20000098 	.word	0x20000098

000049bc <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
    49bc:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
    49be:	f7fd fab9 	bl	1f34 <settings_subsys_init>
	if (err) {
    49c2:	4604      	mov	r4, r0
    49c4:	b120      	cbz	r0, 49d0 <bt_settings_init+0x14>
		BT_ERR("settings_subsys_init failed (err %d)", err);
    49c6:	4602      	mov	r2, r0
    49c8:	2145      	movs	r1, #69	; 0x45
    49ca:	4802      	ldr	r0, [pc, #8]	; (49d4 <bt_settings_init+0x18>)
    49cc:	f00d fabc 	bl	11f48 <printk>
		return err;
	}

	return 0;
}
    49d0:	4620      	mov	r0, r4
    49d2:	bd10      	pop	{r4, pc}
    49d4:	00018fdc 	.word	0x00018fdc

000049d8 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    49d8:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    49da:	7802      	ldrb	r2, [r0, #0]
{
    49dc:	4604      	mov	r4, r0
	switch (src->type) {
    49de:	2a01      	cmp	r2, #1
{
    49e0:	460b      	mov	r3, r1
	switch (src->type) {
    49e2:	d016      	beq.n	4a12 <uuid_to_uuid128+0x3a>
    49e4:	2a02      	cmp	r2, #2
    49e6:	d02c      	beq.n	4a42 <uuid_to_uuid128+0x6a>
    49e8:	b98a      	cbnz	r2, 4a0e <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    49ea:	460d      	mov	r5, r1
    49ec:	4a18      	ldr	r2, [pc, #96]	; (4a50 <uuid_to_uuid128+0x78>)
    49ee:	f102 0710 	add.w	r7, r2, #16
    49f2:	462e      	mov	r6, r5
    49f4:	6810      	ldr	r0, [r2, #0]
    49f6:	6851      	ldr	r1, [r2, #4]
    49f8:	3208      	adds	r2, #8
    49fa:	c603      	stmia	r6!, {r0, r1}
    49fc:	42ba      	cmp	r2, r7
    49fe:	4635      	mov	r5, r6
    4a00:	d1f7      	bne.n	49f2 <uuid_to_uuid128+0x1a>
    4a02:	7812      	ldrb	r2, [r2, #0]
    4a04:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    4a06:	8862      	ldrh	r2, [r4, #2]
	dst[0] = val;
    4a08:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    4a0a:	0a12      	lsrs	r2, r2, #8
    4a0c:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    4a0e:	bcf0      	pop	{r4, r5, r6, r7}
    4a10:	4770      	bx	lr
		*dst = uuid128_base;
    4a12:	460d      	mov	r5, r1
    4a14:	4a0e      	ldr	r2, [pc, #56]	; (4a50 <uuid_to_uuid128+0x78>)
    4a16:	f102 0710 	add.w	r7, r2, #16
    4a1a:	462e      	mov	r6, r5
    4a1c:	6810      	ldr	r0, [r2, #0]
    4a1e:	6851      	ldr	r1, [r2, #4]
    4a20:	3208      	adds	r2, #8
    4a22:	c603      	stmia	r6!, {r0, r1}
    4a24:	42ba      	cmp	r2, r7
    4a26:	4635      	mov	r5, r6
    4a28:	d1f7      	bne.n	4a1a <uuid_to_uuid128+0x42>
    4a2a:	7812      	ldrb	r2, [r2, #0]
    4a2c:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    4a2e:	6862      	ldr	r2, [r4, #4]
    4a30:	f3c2 2107 	ubfx	r1, r2, #8, #8
	dst[0] = val;
    4a34:	735a      	strb	r2, [r3, #13]
	sys_put_le16(val >> 16, &dst[2]);
    4a36:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    4a38:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    4a3a:	0a12      	lsrs	r2, r2, #8
    4a3c:	7399      	strb	r1, [r3, #14]
    4a3e:	741a      	strb	r2, [r3, #16]
}
    4a40:	e7e5      	b.n	4a0e <uuid_to_uuid128+0x36>
		memcpy(dst, src, sizeof(*dst));
    4a42:	4601      	mov	r1, r0
}
    4a44:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    4a46:	2211      	movs	r2, #17
    4a48:	4618      	mov	r0, r3
    4a4a:	f00e bd91 	b.w	13570 <memcpy>
    4a4e:	bf00      	nop
    4a50:	00019015 	.word	0x00019015

00004a54 <le_dhkey_complete>:
{
    4a54:	b510      	push	{r4, lr}
	if (dh_key_cb) {
    4a56:	4c06      	ldr	r4, [pc, #24]	; (4a70 <le_dhkey_complete+0x1c>)
    4a58:	6822      	ldr	r2, [r4, #0]
    4a5a:	b132      	cbz	r2, 4a6a <le_dhkey_complete+0x16>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    4a5c:	6880      	ldr	r0, [r0, #8]
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    4a5e:	7803      	ldrb	r3, [r0, #0]
    4a60:	b923      	cbnz	r3, 4a6c <le_dhkey_complete+0x18>
    4a62:	3001      	adds	r0, #1
    4a64:	4790      	blx	r2
		dh_key_cb = NULL;
    4a66:	2300      	movs	r3, #0
    4a68:	6023      	str	r3, [r4, #0]
}
    4a6a:	bd10      	pop	{r4, pc}
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    4a6c:	2000      	movs	r0, #0
    4a6e:	e7f9      	b.n	4a64 <le_dhkey_complete+0x10>
    4a70:	20000c20 	.word	0x20000c20

00004a74 <hci_data_buf_overflow>:
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    4a74:	6883      	ldr	r3, [r0, #8]
    4a76:	2157      	movs	r1, #87	; 0x57
    4a78:	781a      	ldrb	r2, [r3, #0]
    4a7a:	4801      	ldr	r0, [pc, #4]	; (4a80 <hci_data_buf_overflow+0xc>)
    4a7c:	f00d ba64 	b.w	11f48 <printk>
    4a80:	00019026 	.word	0x00019026

00004a84 <le_pkey_complete>:
{
    4a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    4a86:	6886      	ldr	r6, [r0, #8]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4a88:	f06f 0110 	mvn.w	r1, #16
    4a8c:	480e      	ldr	r0, [pc, #56]	; (4ac8 <le_pkey_complete+0x44>)
    4a8e:	f00e fe8a 	bl	137a6 <atomic_and>
	if (!evt->status) {
    4a92:	7833      	ldrb	r3, [r6, #0]
    4a94:	b943      	cbnz	r3, 4aa8 <le_pkey_complete+0x24>
		memcpy(pub_key, evt->key, 64);
    4a96:	1c71      	adds	r1, r6, #1
    4a98:	2240      	movs	r2, #64	; 0x40
    4a9a:	480c      	ldr	r0, [pc, #48]	; (4acc <le_pkey_complete+0x48>)
    4a9c:	f00e fd68 	bl	13570 <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    4aa0:	2108      	movs	r1, #8
    4aa2:	4809      	ldr	r0, [pc, #36]	; (4ac8 <le_pkey_complete+0x44>)
    4aa4:	f00e fe69 	bl	1377a <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    4aa8:	4d09      	ldr	r5, [pc, #36]	; (4ad0 <le_pkey_complete+0x4c>)
		cb->func(evt->status ? NULL : pub_key);
    4aaa:	4f08      	ldr	r7, [pc, #32]	; (4acc <le_pkey_complete+0x48>)
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    4aac:	682c      	ldr	r4, [r5, #0]
    4aae:	b90c      	cbnz	r4, 4ab4 <le_pkey_complete+0x30>
	pub_key_cb = NULL;
    4ab0:	602c      	str	r4, [r5, #0]
}
    4ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->func(evt->status ? NULL : pub_key);
    4ab4:	7832      	ldrb	r2, [r6, #0]
    4ab6:	6823      	ldr	r3, [r4, #0]
    4ab8:	2a00      	cmp	r2, #0
    4aba:	bf0c      	ite	eq
    4abc:	4638      	moveq	r0, r7
    4abe:	2000      	movne	r0, #0
    4ac0:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    4ac2:	6864      	ldr	r4, [r4, #4]
    4ac4:	e7f3      	b.n	4aae <le_pkey_complete+0x2a>
    4ac6:	bf00      	nop
    4ac8:	20000098 	.word	0x20000098
    4acc:	20001f24 	.word	0x20001f24
    4ad0:	20000c24 	.word	0x20000c24

00004ad4 <le_data_len_change>:
	u16_t handle = sys_le16_to_cpu(evt->handle);
    4ad4:	6883      	ldr	r3, [r0, #8]
{
    4ad6:	b510      	push	{r4, lr}
	u16_t handle = sys_le16_to_cpu(evt->handle);
    4ad8:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    4ada:	4620      	mov	r0, r4
    4adc:	f002 fc70 	bl	73c0 <bt_conn_lookup_handle>
	if (!conn) {
    4ae0:	b930      	cbnz	r0, 4af0 <le_data_len_change+0x1c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    4ae2:	4622      	mov	r2, r4
}
    4ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    4ae8:	2145      	movs	r1, #69	; 0x45
    4aea:	4803      	ldr	r0, [pc, #12]	; (4af8 <le_data_len_change+0x24>)
    4aec:	f00d ba2c 	b.w	11f48 <printk>
}
    4af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    4af4:	f00f b8ef 	b.w	13cd6 <bt_conn_unref>
    4af8:	00019053 	.word	0x00019053

00004afc <hci_disconn_complete_prio>:
{
    4afc:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    4afe:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    4b00:	781a      	ldrb	r2, [r3, #0]
    4b02:	b9aa      	cbnz	r2, 4b30 <hci_disconn_complete_prio+0x34>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    4b04:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    4b08:	4628      	mov	r0, r5
    4b0a:	f002 fc59 	bl	73c0 <bt_conn_lookup_handle>
	if (!conn) {
    4b0e:	4604      	mov	r4, r0
    4b10:	b930      	cbnz	r0, 4b20 <hci_disconn_complete_prio+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
    4b12:	462a      	mov	r2, r5
}
    4b14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    4b18:	2145      	movs	r1, #69	; 0x45
    4b1a:	4806      	ldr	r0, [pc, #24]	; (4b34 <hci_disconn_complete_prio+0x38>)
    4b1c:	f00d ba14 	b.w	11f48 <printk>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    4b20:	2101      	movs	r1, #1
    4b22:	f002 fb57 	bl	71d4 <bt_conn_set_state>
	bt_conn_unref(conn);
    4b26:	4620      	mov	r0, r4
}
    4b28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    4b2c:	f00f b8d3 	b.w	13cd6 <bt_conn_unref>
}
    4b30:	bd38      	pop	{r3, r4, r5, pc}
    4b32:	bf00      	nop
    4b34:	0001907c 	.word	0x0001907c

00004b38 <hci_vendor_event>:
		BT_WARN("Unhandled vendor-specific event: %s",
    4b38:	8981      	ldrh	r1, [r0, #12]
{
    4b3a:	b508      	push	{r3, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    4b3c:	6880      	ldr	r0, [r0, #8]
    4b3e:	f7ff fe09 	bl	4754 <bt_hex_real>
}
    4b42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    4b46:	4602      	mov	r2, r0
    4b48:	2157      	movs	r1, #87	; 0x57
    4b4a:	4801      	ldr	r0, [pc, #4]	; (4b50 <hci_vendor_event+0x18>)
    4b4c:	f00d b9fc 	b.w	11f48 <printk>
    4b50:	000190a7 	.word	0x000190a7

00004b54 <le_conn_update_complete>:
{
    4b54:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    4b56:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    4b58:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    4b5c:	4630      	mov	r0, r6
    4b5e:	f002 fc2f 	bl	73c0 <bt_conn_lookup_handle>
	if (!conn) {
    4b62:	4604      	mov	r4, r0
    4b64:	b930      	cbnz	r0, 4b74 <le_conn_update_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    4b66:	4632      	mov	r2, r6
    4b68:	2145      	movs	r1, #69	; 0x45
    4b6a:	481a      	ldr	r0, [pc, #104]	; (4bd4 <le_conn_update_complete+0x80>)
    4b6c:	f00d f9ec 	bl	11f48 <printk>
}
    4b70:	b002      	add	sp, #8
    4b72:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
    4b74:	782b      	ldrb	r3, [r5, #0]
    4b76:	b9bb      	cbnz	r3, 4ba8 <le_conn_update_complete+0x54>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    4b78:	792a      	ldrb	r2, [r5, #4]
    4b7a:	78eb      	ldrb	r3, [r5, #3]
    4b7c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4b80:	f8a0 3092 	strh.w	r3, [r0, #146]	; 0x92
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    4b84:	79aa      	ldrb	r2, [r5, #6]
    4b86:	796b      	ldrb	r3, [r5, #5]
    4b88:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4b8c:	f8a0 3098 	strh.w	r3, [r0, #152]	; 0x98
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    4b90:	79eb      	ldrb	r3, [r5, #7]
    4b92:	7a2a      	ldrb	r2, [r5, #8]
    4b94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4b98:	f8a0 309a 	strh.w	r3, [r0, #154]	; 0x9a
		notify_le_param_updated(conn);
    4b9c:	f002 f958 	bl	6e50 <notify_le_param_updated>
	bt_conn_unref(conn);
    4ba0:	4620      	mov	r0, r4
    4ba2:	f00f f898 	bl	13cd6 <bt_conn_unref>
    4ba6:	e7e3      	b.n	4b70 <le_conn_update_complete+0x1c>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    4ba8:	2b1a      	cmp	r3, #26
    4baa:	d1f9      	bne.n	4ba0 <le_conn_update_complete+0x4c>
    4bac:	78c3      	ldrb	r3, [r0, #3]
    4bae:	2b01      	cmp	r3, #1
    4bb0:	d1f6      	bne.n	4ba0 <le_conn_update_complete+0x4c>
		   !atomic_test_and_set_bit(conn->flags,
    4bb2:	210a      	movs	r1, #10
    4bb4:	3004      	adds	r0, #4
    4bb6:	f00e fdeb 	bl	13790 <atomic_test_and_set_bit>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    4bba:	2800      	cmp	r0, #0
    4bbc:	d1f0      	bne.n	4ba0 <le_conn_update_complete+0x4c>
		param.interval_min = conn->le.interval_min;
    4bbe:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
		bt_l2cap_update_conn_param(conn, &param);
    4bc2:	4669      	mov	r1, sp
		param.interval_min = conn->le.interval_min;
    4bc4:	9300      	str	r3, [sp, #0]
		param.latency = conn->le.pending_latency;
    4bc6:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
		bt_l2cap_update_conn_param(conn, &param);
    4bca:	4620      	mov	r0, r4
		param.latency = conn->le.pending_latency;
    4bcc:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
    4bce:	f00f fade 	bl	1418e <bt_l2cap_update_conn_param>
    4bd2:	e7e5      	b.n	4ba0 <le_conn_update_complete+0x4c>
    4bd4:	00019053 	.word	0x00019053

00004bd8 <update_sec_level>:
{
    4bd8:	b510      	push	{r4, lr}
	if (!conn->encrypt) {
    4bda:	7ac3      	ldrb	r3, [r0, #11]
{
    4bdc:	4604      	mov	r4, r0
	if (!conn->encrypt) {
    4bde:	b913      	cbnz	r3, 4be6 <update_sec_level+0xe>
		conn->sec_level = BT_SECURITY_L1;
    4be0:	2301      	movs	r3, #1
    4be2:	7243      	strb	r3, [r0, #9]
}
    4be4:	bd10      	pop	{r4, pc}
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
    4be6:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
    4bea:	b1cb      	cbz	r3, 4c20 <update_sec_level+0x48>
    4bec:	7b5a      	ldrb	r2, [r3, #13]
    4bee:	07d1      	lsls	r1, r2, #31
    4bf0:	d516      	bpl.n	4c20 <update_sec_level+0x48>
		if (conn->le.keys->flags & BT_KEYS_SC &&
    4bf2:	06d2      	lsls	r2, r2, #27
    4bf4:	d512      	bpl.n	4c1c <update_sec_level+0x44>
    4bf6:	7b1b      	ldrb	r3, [r3, #12]
    4bf8:	2b10      	cmp	r3, #16
    4bfa:	d10f      	bne.n	4c1c <update_sec_level+0x44>
			conn->sec_level = BT_SECURITY_L4;
    4bfc:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
    4bfe:	7263      	strb	r3, [r4, #9]
	if (conn->required_sec_level > conn->sec_level) {
    4c00:	7aa2      	ldrb	r2, [r4, #10]
    4c02:	7a63      	ldrb	r3, [r4, #9]
    4c04:	429a      	cmp	r2, r3
    4c06:	d9ed      	bls.n	4be4 <update_sec_level+0xc>
		BT_ERR("Failed to set required security level");
    4c08:	2145      	movs	r1, #69	; 0x45
    4c0a:	4806      	ldr	r0, [pc, #24]	; (4c24 <update_sec_level+0x4c>)
    4c0c:	f00d f99c 	bl	11f48 <printk>
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTH_FAIL);
    4c10:	4620      	mov	r0, r4
}
    4c12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTH_FAIL);
    4c16:	2105      	movs	r1, #5
    4c18:	f002 bd6a 	b.w	76f0 <bt_conn_disconnect>
			conn->sec_level = BT_SECURITY_L3;
    4c1c:	2303      	movs	r3, #3
    4c1e:	e7ee      	b.n	4bfe <update_sec_level+0x26>
		conn->sec_level = BT_SECURITY_L2;
    4c20:	2302      	movs	r3, #2
    4c22:	e7ec      	b.n	4bfe <update_sec_level+0x26>
    4c24:	000190d0 	.word	0x000190d0

00004c28 <hci_encrypt_key_refresh_complete>:
{
    4c28:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    4c2a:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    4c2c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    4c30:	4630      	mov	r0, r6
    4c32:	f002 fbc5 	bl	73c0 <bt_conn_lookup_handle>
	if (!conn) {
    4c36:	4604      	mov	r4, r0
    4c38:	b930      	cbnz	r0, 4c48 <hci_encrypt_key_refresh_complete+0x20>
		BT_ERR("Unable to look up conn with handle %u", handle);
    4c3a:	4632      	mov	r2, r6
}
    4c3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    4c40:	2145      	movs	r1, #69	; 0x45
    4c42:	4811      	ldr	r0, [pc, #68]	; (4c88 <hci_encrypt_key_refresh_complete+0x60>)
    4c44:	f00d b980 	b.w	11f48 <printk>
	if (evt->status) {
    4c48:	7829      	ldrb	r1, [r5, #0]
    4c4a:	b179      	cbz	r1, 4c6c <hci_encrypt_key_refresh_complete+0x44>
	conn->required_sec_level = conn->sec_level;
    4c4c:	2929      	cmp	r1, #41	; 0x29
    4c4e:	bf88      	it	hi
    4c50:	2208      	movhi	r2, #8
    4c52:	7a43      	ldrb	r3, [r0, #9]
    4c54:	7283      	strb	r3, [r0, #10]
	switch (hci_err) {
    4c56:	bf9c      	itt	ls
    4c58:	4b0c      	ldrls	r3, [pc, #48]	; (4c8c <hci_encrypt_key_refresh_complete+0x64>)
    4c5a:	5c5a      	ldrbls	r2, [r3, r1]
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    4c5c:	4620      	mov	r0, r4
    4c5e:	f002 f961 	bl	6f24 <bt_conn_security_changed>
	bt_conn_unref(conn);
    4c62:	4620      	mov	r0, r4
}
    4c64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    4c68:	f00f b835 	b.w	13cd6 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    4c6c:	7883      	ldrb	r3, [r0, #2]
    4c6e:	2b01      	cmp	r3, #1
    4c70:	d104      	bne.n	4c7c <hci_encrypt_key_refresh_complete+0x54>
		bt_smp_update_keys(conn);
    4c72:	f007 ffd7 	bl	cc24 <bt_smp_update_keys>
		update_sec_level(conn);
    4c76:	4620      	mov	r0, r4
    4c78:	f7ff ffae 	bl	4bd8 <update_sec_level>
	conn->required_sec_level = conn->sec_level;
    4c7c:	7a63      	ldrb	r3, [r4, #9]
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    4c7e:	2200      	movs	r2, #0
	conn->required_sec_level = conn->sec_level;
    4c80:	72a3      	strb	r3, [r4, #10]
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    4c82:	7829      	ldrb	r1, [r5, #0]
    4c84:	e7ea      	b.n	4c5c <hci_encrypt_key_refresh_complete+0x34>
    4c86:	bf00      	nop
    4c88:	0001907c 	.word	0x0001907c
    4c8c:	000199c7 	.word	0x000199c7

00004c90 <hci_encrypt_change>:
{
    4c90:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    4c92:	6885      	ldr	r5, [r0, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    4c94:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    4c98:	4630      	mov	r0, r6
    4c9a:	f002 fb91 	bl	73c0 <bt_conn_lookup_handle>
	if (!conn) {
    4c9e:	4604      	mov	r4, r0
    4ca0:	b930      	cbnz	r0, 4cb0 <hci_encrypt_change+0x20>
		BT_ERR("Unable to look up conn with handle %u", handle);
    4ca2:	4632      	mov	r2, r6
}
    4ca4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    4ca8:	2145      	movs	r1, #69	; 0x45
    4caa:	4812      	ldr	r0, [pc, #72]	; (4cf4 <hci_encrypt_change+0x64>)
    4cac:	f00d b94c 	b.w	11f48 <printk>
	if (evt->status) {
    4cb0:	7829      	ldrb	r1, [r5, #0]
    4cb2:	b179      	cbz	r1, 4cd4 <hci_encrypt_change+0x44>
	conn->required_sec_level = conn->sec_level;
    4cb4:	2929      	cmp	r1, #41	; 0x29
    4cb6:	bf88      	it	hi
    4cb8:	2208      	movhi	r2, #8
    4cba:	7a43      	ldrb	r3, [r0, #9]
    4cbc:	7283      	strb	r3, [r0, #10]
	switch (hci_err) {
    4cbe:	bf9c      	itt	ls
    4cc0:	4b0d      	ldrls	r3, [pc, #52]	; (4cf8 <hci_encrypt_change+0x68>)
    4cc2:	5c5a      	ldrbls	r2, [r3, r1]
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    4cc4:	4620      	mov	r0, r4
    4cc6:	f002 f92d 	bl	6f24 <bt_conn_security_changed>
	bt_conn_unref(conn);
    4cca:	4620      	mov	r0, r4
}
    4ccc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    4cd0:	f00f b801 	b.w	13cd6 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    4cd4:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
    4cd6:	78eb      	ldrb	r3, [r5, #3]
	if (conn->type == BT_CONN_TYPE_LE) {
    4cd8:	2a01      	cmp	r2, #1
	conn->encrypt = evt->encrypt;
    4cda:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
    4cdc:	d105      	bne.n	4cea <hci_encrypt_change+0x5a>
		if (conn->encrypt) {
    4cde:	b10b      	cbz	r3, 4ce4 <hci_encrypt_change+0x54>
			bt_smp_update_keys(conn);
    4ce0:	f007 ffa0 	bl	cc24 <bt_smp_update_keys>
		update_sec_level(conn);
    4ce4:	4620      	mov	r0, r4
    4ce6:	f7ff ff77 	bl	4bd8 <update_sec_level>
	conn->required_sec_level = conn->sec_level;
    4cea:	7a63      	ldrb	r3, [r4, #9]
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    4cec:	2200      	movs	r2, #0
	conn->required_sec_level = conn->sec_level;
    4cee:	72a3      	strb	r3, [r4, #10]
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    4cf0:	7829      	ldrb	r1, [r5, #0]
    4cf2:	e7e7      	b.n	4cc4 <hci_encrypt_change+0x34>
    4cf4:	0001907c 	.word	0x0001907c
    4cf8:	000199c7 	.word	0x000199c7

00004cfc <hci_cmd_done>:
{
    4cfc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4d00:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    4d02:	7990      	ldrb	r0, [r2, #6]
{
    4d04:	460f      	mov	r7, r1
    4d06:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    4d08:	f008 f988 	bl	d01c <net_buf_pool_get>
    4d0c:	4d2a      	ldr	r5, [pc, #168]	; (4db8 <hci_cmd_done+0xbc>)
    4d0e:	4285      	cmp	r5, r0
    4d10:	d00e      	beq.n	4d30 <hci_cmd_done+0x34>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    4d12:	79a4      	ldrb	r4, [r4, #6]
    4d14:	4620      	mov	r0, r4
    4d16:	f008 f981 	bl	d01c <net_buf_pool_get>
    4d1a:	4623      	mov	r3, r4
    4d1c:	e9cd 0500 	strd	r0, r5, [sp]
    4d20:	4632      	mov	r2, r6
    4d22:	2157      	movs	r1, #87	; 0x57
    4d24:	4825      	ldr	r0, [pc, #148]	; (4dbc <hci_cmd_done+0xc0>)
    4d26:	f00d f90f 	bl	11f48 <printk>
}
    4d2a:	b002      	add	sp, #8
    4d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
    4d30:	4620      	mov	r0, r4
    4d32:	f008 f97b 	bl	d02c <net_buf_id>
    4d36:	f04f 080c 	mov.w	r8, #12
    4d3a:	4d21      	ldr	r5, [pc, #132]	; (4dc0 <hci_cmd_done+0xc4>)
    4d3c:	fb08 5300 	mla	r3, r8, r0, r5
    4d40:	885b      	ldrh	r3, [r3, #2]
    4d42:	42b3      	cmp	r3, r6
    4d44:	d00a      	beq.n	4d5c <hci_cmd_done+0x60>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    4d46:	4620      	mov	r0, r4
    4d48:	f008 f970 	bl	d02c <net_buf_id>
    4d4c:	fb08 5000 	mla	r0, r8, r0, r5
    4d50:	4632      	mov	r2, r6
    4d52:	8843      	ldrh	r3, [r0, #2]
    4d54:	2157      	movs	r1, #87	; 0x57
    4d56:	481b      	ldr	r0, [pc, #108]	; (4dc4 <hci_cmd_done+0xc8>)
    4d58:	f00d f8f6 	bl	11f48 <printk>
	if (cmd(buf)->state && !status) {
    4d5c:	4620      	mov	r0, r4
    4d5e:	f008 f965 	bl	d02c <net_buf_id>
    4d62:	260c      	movs	r6, #12
    4d64:	fb06 5000 	mla	r0, r6, r0, r5
    4d68:	6843      	ldr	r3, [r0, #4]
    4d6a:	b15b      	cbz	r3, 4d84 <hci_cmd_done+0x88>
    4d6c:	b957      	cbnz	r7, 4d84 <hci_cmd_done+0x88>
		struct cmd_state_set *update = cmd(buf)->state;
    4d6e:	4620      	mov	r0, r4
    4d70:	f008 f95c 	bl	d02c <net_buf_id>
    4d74:	fb06 5000 	mla	r0, r6, r0, r5
    4d78:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    4d7a:	7a1a      	ldrb	r2, [r3, #8]
    4d7c:	e9d3 0100 	ldrd	r0, r1, [r3]
    4d80:	f00e fd1c 	bl	137bc <atomic_set_bit_to>
	if (cmd(buf)->sync) {
    4d84:	4620      	mov	r0, r4
    4d86:	f008 f951 	bl	d02c <net_buf_id>
    4d8a:	260c      	movs	r6, #12
    4d8c:	fb06 5000 	mla	r0, r6, r0, r5
    4d90:	6883      	ldr	r3, [r0, #8]
    4d92:	2b00      	cmp	r3, #0
    4d94:	d0c9      	beq.n	4d2a <hci_cmd_done+0x2e>
		cmd(buf)->status = status;
    4d96:	4620      	mov	r0, r4
    4d98:	f008 f948 	bl	d02c <net_buf_id>
    4d9c:	4370      	muls	r0, r6
    4d9e:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    4da0:	4620      	mov	r0, r4
    4da2:	f008 f943 	bl	d02c <net_buf_id>
    4da6:	fb06 5500 	mla	r5, r6, r0, r5
    4daa:	68a8      	ldr	r0, [r5, #8]
}
    4dac:	b002      	add	sp, #8
    4dae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_impl_k_sem_give(sem);
    4db2:	f00b be45 	b.w	10a40 <z_impl_k_sem_give>
    4db6:	bf00      	nop
    4db8:	200005dc 	.word	0x200005dc
    4dbc:	000190fb 	.word	0x000190fb
    4dc0:	20000c08 	.word	0x20000c08
    4dc4:	00019135 	.word	0x00019135

00004dc8 <handle_event>:
{
    4dc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4dca:	4605      	mov	r5, r0
    4dcc:	4614      	mov	r4, r2
    4dce:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
    4dd0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		if (handler->event != event) {
    4dd4:	7822      	ldrb	r2, [r4, #0]
    4dd6:	42aa      	cmp	r2, r5
    4dd8:	d010      	beq.n	4dfc <handle_event+0x34>
	for (i = 0; i < num_handlers; i++) {
    4dda:	3408      	adds	r4, #8
    4ddc:	429c      	cmp	r4, r3
    4dde:	d1f9      	bne.n	4dd4 <handle_event+0xc>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    4de0:	8984      	ldrh	r4, [r0, #12]
    4de2:	6880      	ldr	r0, [r0, #8]
    4de4:	4621      	mov	r1, r4
    4de6:	f7ff fcb5 	bl	4754 <bt_hex_real>
    4dea:	4623      	mov	r3, r4
    4dec:	9000      	str	r0, [sp, #0]
    4dee:	462a      	mov	r2, r5
    4df0:	2157      	movs	r1, #87	; 0x57
    4df2:	480b      	ldr	r0, [pc, #44]	; (4e20 <handle_event+0x58>)
    4df4:	f00d f8a8 	bl	11f48 <printk>
}
    4df8:	b003      	add	sp, #12
    4dfa:	bd30      	pop	{r4, r5, pc}
		if (buf->len < handler->min_len) {
    4dfc:	8982      	ldrh	r2, [r0, #12]
    4dfe:	7863      	ldrb	r3, [r4, #1]
    4e00:	4293      	cmp	r3, r2
    4e02:	d907      	bls.n	4e14 <handle_event+0x4c>
			BT_ERR("Too small (%u bytes) event 0x%02x",
    4e04:	462b      	mov	r3, r5
    4e06:	2145      	movs	r1, #69	; 0x45
    4e08:	4806      	ldr	r0, [pc, #24]	; (4e24 <handle_event+0x5c>)
}
    4e0a:	b003      	add	sp, #12
    4e0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    4e10:	f00d b89a 	b.w	11f48 <printk>
		handler->handler(buf);
    4e14:	6863      	ldr	r3, [r4, #4]
}
    4e16:	b003      	add	sp, #12
    4e18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		handler->handler(buf);
    4e1c:	4718      	bx	r3
    4e1e:	bf00      	nop
    4e20:	00019194 	.word	0x00019194
    4e24:	0001916d 	.word	0x0001916d

00004e28 <hci_le_meta_event>:
{
    4e28:	b510      	push	{r4, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    4e2a:	2101      	movs	r1, #1
{
    4e2c:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    4e2e:	3008      	adds	r0, #8
    4e30:	f008 fbe4 	bl	d5fc <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    4e34:	4621      	mov	r1, r4
}
    4e36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    4e3a:	230b      	movs	r3, #11
    4e3c:	4a01      	ldr	r2, [pc, #4]	; (4e44 <hci_le_meta_event+0x1c>)
    4e3e:	7800      	ldrb	r0, [r0, #0]
    4e40:	f7ff bfc2 	b.w	4dc8 <handle_event>
    4e44:	00016f40 	.word	0x00016f40

00004e48 <hci_rx_thread>:
	}
}

#if !defined(CONFIG_BT_RECV_IS_RX_THREAD)
static void hci_rx_thread(void)
{
    4e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	BT_DBG("started");

	while (1) {
		BT_DBG("calling fifo_get_wait");
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
    4e4c:	4f41      	ldr	r7, [pc, #260]	; (4f54 <hci_rx_thread+0x10c>)
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    4e4e:	f8df 8124 	ldr.w	r8, [pc, #292]	; 4f74 <hci_rx_thread+0x12c>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    4e52:	4e41      	ldr	r6, [pc, #260]	; (4f58 <hci_rx_thread+0x110>)
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
    4e54:	f04f 32ff 	mov.w	r2, #4294967295
    4e58:	f04f 33ff 	mov.w	r3, #4294967295
    4e5c:	4638      	mov	r0, r7
    4e5e:	f008 f9eb 	bl	d238 <net_buf_get>
    4e62:	7d02      	ldrb	r2, [r0, #20]
    4e64:	4604      	mov	r4, r0

		BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
		       buf->len);

		switch (bt_buf_get_type(buf)) {
    4e66:	2a01      	cmp	r2, #1
    4e68:	d042      	beq.n	4ef0 <hci_rx_thread+0xa8>
    4e6a:	2a03      	cmp	r2, #3
    4e6c:	d16f      	bne.n	4f4e <hci_rx_thread+0x106>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    4e6e:	8983      	ldrh	r3, [r0, #12]
    4e70:	2b03      	cmp	r3, #3
    4e72:	d80c      	bhi.n	4e8e <hci_rx_thread+0x46>
    4e74:	f240 5305 	movw	r3, #1285	; 0x505
    4e78:	4632      	mov	r2, r6
    4e7a:	4938      	ldr	r1, [pc, #224]	; (4f5c <hci_rx_thread+0x114>)
    4e7c:	4838      	ldr	r0, [pc, #224]	; (4f60 <hci_rx_thread+0x118>)
    4e7e:	f00d f863 	bl	11f48 <printk>
    4e82:	4040      	eors	r0, r0
    4e84:	f380 8811 	msr	BASEPRI, r0
    4e88:	f04f 0003 	mov.w	r0, #3
    4e8c:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    4e8e:	2104      	movs	r1, #4
    4e90:	f104 0008 	add.w	r0, r4, #8
    4e94:	f008 fbb2 	bl	d5fc <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    4e98:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    4e9a:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    4e9c:	f8b0 9000 	ldrh.w	r9, [r0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    4ea0:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
    4ea2:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
    4ea4:	f3c9 000b 	ubfx	r0, r9, #0, #12
	if (buf->len != len) {
    4ea8:	4293      	cmp	r3, r2
	acl(buf)->handle = bt_acl_handle(handle);
    4eaa:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
    4eac:	d007      	beq.n	4ebe <hci_rx_thread+0x76>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    4eae:	2145      	movs	r1, #69	; 0x45
    4eb0:	482c      	ldr	r0, [pc, #176]	; (4f64 <hci_rx_thread+0x11c>)
    4eb2:	f00d f849 	bl	11f48 <printk>
		case BT_BUF_EVT:
			hci_event(buf);
			break;
		default:
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
			net_buf_unref(buf);
    4eb6:	4620      	mov	r0, r4
    4eb8:	f008 fa50 	bl	d35c <net_buf_unref>
			break;
    4ebc:	e015      	b.n	4eea <hci_rx_thread+0xa2>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    4ebe:	f002 fa7f 	bl	73c0 <bt_conn_lookup_handle>
	if (!conn) {
    4ec2:	4605      	mov	r5, r0
    4ec4:	b928      	cbnz	r0, 4ed2 <hci_rx_thread+0x8a>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    4ec6:	2145      	movs	r1, #69	; 0x45
    4ec8:	8ae2      	ldrh	r2, [r4, #22]
    4eca:	4827      	ldr	r0, [pc, #156]	; (4f68 <hci_rx_thread+0x120>)
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    4ecc:	f00d f83c 	bl	11f48 <printk>
    4ed0:	e7f1      	b.n	4eb6 <hci_rx_thread+0x6e>
	acl(buf)->index = bt_conn_index(conn);
    4ed2:	f002 fd4d 	bl	7970 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    4ed6:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
    4ed8:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    4eda:	ea4f 3219 	mov.w	r2, r9, lsr #12
    4ede:	4628      	mov	r0, r5
    4ee0:	f002 f83c 	bl	6f5c <bt_conn_recv>
	bt_conn_unref(conn);
    4ee4:	4628      	mov	r0, r5
    4ee6:	f00e fef6 	bl	13cd6 <bt_conn_unref>
	z_impl_k_yield();
    4eea:	f00b fc27 	bl	1073c <z_impl_k_yield>
	while (1) {
    4eee:	e7b1      	b.n	4e54 <hci_rx_thread+0xc>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    4ef0:	8983      	ldrh	r3, [r0, #12]
    4ef2:	2b01      	cmp	r3, #1
    4ef4:	d80c      	bhi.n	4f10 <hci_rx_thread+0xc8>
    4ef6:	f241 4382 	movw	r3, #5250	; 0x1482
    4efa:	4632      	mov	r2, r6
    4efc:	4917      	ldr	r1, [pc, #92]	; (4f5c <hci_rx_thread+0x114>)
    4efe:	4818      	ldr	r0, [pc, #96]	; (4f60 <hci_rx_thread+0x118>)
    4f00:	f00d f822 	bl	11f48 <printk>
    4f04:	4040      	eors	r0, r0
    4f06:	f380 8811 	msr	BASEPRI, r0
    4f0a:	f04f 0003 	mov.w	r0, #3
    4f0e:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    4f10:	2102      	movs	r1, #2
    4f12:	f104 0008 	add.w	r0, r4, #8
    4f16:	f008 fb71 	bl	d5fc <net_buf_simple_pull_mem>
    4f1a:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    4f1c:	7800      	ldrb	r0, [r0, #0]
    4f1e:	f00e fc14 	bl	1374a <bt_hci_evt_get_flags>
    4f22:	0783      	lsls	r3, r0, #30
    4f24:	d40c      	bmi.n	4f40 <hci_rx_thread+0xf8>
    4f26:	f241 4386 	movw	r3, #5254	; 0x1486
    4f2a:	4632      	mov	r2, r6
    4f2c:	490f      	ldr	r1, [pc, #60]	; (4f6c <hci_rx_thread+0x124>)
    4f2e:	480c      	ldr	r0, [pc, #48]	; (4f60 <hci_rx_thread+0x118>)
    4f30:	f00d f80a 	bl	11f48 <printk>
    4f34:	4040      	eors	r0, r0
    4f36:	f380 8811 	msr	BASEPRI, r0
    4f3a:	f04f 0003 	mov.w	r0, #3
    4f3e:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    4f40:	2305      	movs	r3, #5
    4f42:	4642      	mov	r2, r8
    4f44:	4621      	mov	r1, r4
    4f46:	7828      	ldrb	r0, [r5, #0]
    4f48:	f7ff ff3e 	bl	4dc8 <handle_event>
	net_buf_unref(buf);
    4f4c:	e7b3      	b.n	4eb6 <hci_rx_thread+0x6e>
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    4f4e:	2145      	movs	r1, #69	; 0x45
    4f50:	4807      	ldr	r0, [pc, #28]	; (4f70 <hci_rx_thread+0x128>)
    4f52:	e7bb      	b.n	4ecc <hci_rx_thread+0x84>
    4f54:	200000ec 	.word	0x200000ec
    4f58:	000191bb 	.word	0x000191bb
    4f5c:	000191ef 	.word	0x000191ef
    4f60:	00017b50 	.word	0x00017b50
    4f64:	00019208 	.word	0x00019208
    4f68:	00019231 	.word	0x00019231
    4f6c:	00019258 	.word	0x00019258
    4f70:	00019286 	.word	0x00019286
    4f74:	00016fe8 	.word	0x00016fe8

00004f78 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    4f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f7a:	4606      	mov	r6, r0
	u8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    4f7c:	2500      	movs	r5, #0
    4f7e:	4f0a      	ldr	r7, [pc, #40]	; (4fa8 <id_find+0x30>)
    4f80:	79fb      	ldrb	r3, [r7, #7]
    4f82:	b2ec      	uxtb	r4, r5
    4f84:	42a3      	cmp	r3, r4
    4f86:	d802      	bhi.n	4f8e <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    4f88:	f06f 0401 	mvn.w	r4, #1
    4f8c:	e009      	b.n	4fa2 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    4f8e:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    4f92:	2207      	movs	r2, #7
    4f94:	4630      	mov	r0, r6
    4f96:	4439      	add	r1, r7
    4f98:	f00e fada 	bl	13550 <memcmp>
    4f9c:	3501      	adds	r5, #1
    4f9e:	2800      	cmp	r0, #0
    4fa0:	d1ee      	bne.n	4f80 <id_find+0x8>
}
    4fa2:	4620      	mov	r0, r4
    4fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4fa6:	bf00      	nop
    4fa8:	20000000 	.word	0x20000000

00004fac <hci_num_completed_packets>:
{
    4fac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i = 0; i < evt->num_handles; i++) {
    4fb0:	2500      	movs	r5, #0
			tx->pending_no_cb = 0U;
    4fb2:	46a8      	mov	r8, r5
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    4fb4:	6887      	ldr	r7, [r0, #8]
    4fb6:	f8df 9104 	ldr.w	r9, [pc, #260]	; 50bc <hci_num_completed_packets+0x110>
	for (i = 0; i < evt->num_handles; i++) {
    4fba:	783b      	ldrb	r3, [r7, #0]
    4fbc:	429d      	cmp	r5, r3
    4fbe:	db01      	blt.n	4fc4 <hci_num_completed_packets+0x18>
}
    4fc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    4fc4:	eb07 0385 	add.w	r3, r7, r5, lsl #2
    4fc8:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    4fcc:	f8b3 6003 	ldrh.w	r6, [r3, #3]
    4fd0:	f04f 0320 	mov.w	r3, #32
    4fd4:	f3ef 8a11 	mrs	sl, BASEPRI
    4fd8:	f383 8811 	msr	BASEPRI, r3
    4fdc:	f3bf 8f6f 	isb	sy
		conn = bt_conn_lookup_handle(handle);
    4fe0:	4658      	mov	r0, fp
    4fe2:	f002 f9ed 	bl	73c0 <bt_conn_lookup_handle>
		if (!conn) {
    4fe6:	4604      	mov	r4, r0
    4fe8:	b950      	cbnz	r0, 5000 <hci_num_completed_packets+0x54>
	__asm__ volatile(
    4fea:	f38a 8811 	msr	BASEPRI, sl
    4fee:	f3bf 8f6f 	isb	sy
			BT_ERR("No connection for handle %u", handle);
    4ff2:	2145      	movs	r1, #69	; 0x45
    4ff4:	465a      	mov	r2, fp
    4ff6:	482f      	ldr	r0, [pc, #188]	; (50b4 <hci_num_completed_packets+0x108>)
    4ff8:	f00c ffa6 	bl	11f48 <printk>
	for (i = 0; i < evt->num_handles; i++) {
    4ffc:	3501      	adds	r5, #1
    4ffe:	e7dc      	b.n	4fba <hci_num_completed_packets+0xe>
    5000:	f38a 8811 	msr	BASEPRI, sl
    5004:	f3bf 8f6f 	isb	sy
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    5008:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
    500c:	b346      	cbz	r6, 5060 <hci_num_completed_packets+0xb4>
	__asm__ volatile(
    500e:	f04f 0320 	mov.w	r3, #32
    5012:	f3ef 8211 	mrs	r2, BASEPRI
    5016:	f383 8811 	msr	BASEPRI, r3
    501a:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    501e:	69e3      	ldr	r3, [r4, #28]
    5020:	b16b      	cbz	r3, 503e <hci_num_completed_packets+0x92>
				conn->pending_no_cb--;
    5022:	3b01      	subs	r3, #1
    5024:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    5026:	f382 8811 	msr	BASEPRI, r2
    502a:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    502e:	4620      	mov	r0, r4
    5030:	f001 ff0a 	bl	6e48 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
    5034:	3e01      	subs	r6, #1
    5036:	f00b fd03 	bl	10a40 <z_impl_k_sem_give>
    503a:	b2b6      	uxth	r6, r6
    503c:	e7e6      	b.n	500c <hci_num_completed_packets+0x60>
Z_GENLIST_IS_EMPTY(slist)
    503e:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
    5040:	b12b      	cbz	r3, 504e <hci_num_completed_packets+0xa2>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    5042:	69a1      	ldr	r1, [r4, #24]
    5044:	6818      	ldr	r0, [r3, #0]
    5046:	428b      	cmp	r3, r1
	list->head = node;
    5048:	6160      	str	r0, [r4, #20]
	list->tail = node;
    504a:	bf08      	it	eq
    504c:	61a0      	streq	r0, [r4, #24]
    504e:	f382 8811 	msr	BASEPRI, r2
    5052:	f3bf 8f6f 	isb	sy
			if (!node) {
    5056:	b93b      	cbnz	r3, 5068 <hci_num_completed_packets+0xbc>
				BT_ERR("packets count mismatch");
    5058:	2145      	movs	r1, #69	; 0x45
    505a:	4817      	ldr	r0, [pc, #92]	; (50b8 <hci_num_completed_packets+0x10c>)
    505c:	f00c ff74 	bl	11f48 <printk>
		bt_conn_unref(conn);
    5060:	4620      	mov	r0, r4
    5062:	f00e fe38 	bl	13cd6 <bt_conn_unref>
    5066:	e7c9      	b.n	4ffc <hci_num_completed_packets+0x50>
	__asm__ volatile(
    5068:	f04f 0220 	mov.w	r2, #32
    506c:	f3ef 8111 	mrs	r1, BASEPRI
    5070:	f382 8811 	msr	BASEPRI, r2
    5074:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    5078:	68da      	ldr	r2, [r3, #12]
    507a:	61e2      	str	r2, [r4, #28]
	parent->next = child;
    507c:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
    5080:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    5082:	f8c3 800c 	str.w	r8, [r3, #12]
    5086:	b98a      	cbnz	r2, 50ac <hci_num_completed_packets+0x100>
	list->head = node;
    5088:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    508c:	f381 8811 	msr	BASEPRI, r1
    5090:	f3bf 8f6f 	isb	sy
    5094:	2100      	movs	r1, #0
    5096:	f104 0030 	add.w	r0, r4, #48	; 0x30
    509a:	f00e fb79 	bl	13790 <atomic_test_and_set_bit>
    509e:	2800      	cmp	r0, #0
    50a0:	d1c5      	bne.n	502e <hci_num_completed_packets+0x82>
		k_queue_append(&work_q->queue, work);
    50a2:	4651      	mov	r1, sl
    50a4:	4648      	mov	r0, r9
    50a6:	f011 fa9e 	bl	165e6 <k_queue_append>
    50aa:	e7c0      	b.n	502e <hci_num_completed_packets+0x82>
	parent->next = child;
    50ac:	6013      	str	r3, [r2, #0]
	list->tail = node;
    50ae:	6263      	str	r3, [r4, #36]	; 0x24
}
    50b0:	e7ec      	b.n	508c <hci_num_completed_packets+0xe0>
    50b2:	bf00      	nop
    50b4:	0001929f 	.word	0x0001929f
    50b8:	000192c0 	.word	0x000192c0
    50bc:	20001dc8 	.word	0x20001dc8

000050c0 <hci_cmd_status>:
{
    50c0:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    50c2:	2104      	movs	r1, #4
{
    50c4:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    50c6:	3008      	adds	r0, #8
    50c8:	f008 fa98 	bl	d5fc <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    50cc:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    50ce:	7801      	ldrb	r1, [r0, #0]
    50d0:	4622      	mov	r2, r4
    50d2:	8840      	ldrh	r0, [r0, #2]
    50d4:	f7ff fe12 	bl	4cfc <hci_cmd_done>
	if (ncmd) {
    50d8:	b125      	cbz	r5, 50e4 <hci_cmd_status+0x24>
}
    50da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    50de:	4802      	ldr	r0, [pc, #8]	; (50e8 <hci_cmd_status+0x28>)
    50e0:	f00b bcae 	b.w	10a40 <z_impl_k_sem_give>
    50e4:	bd38      	pop	{r3, r4, r5, pc}
    50e6:	bf00      	nop
    50e8:	200000d0 	.word	0x200000d0

000050ec <hci_cmd_complete>:
{
    50ec:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    50ee:	2103      	movs	r1, #3
{
    50f0:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    50f2:	3008      	adds	r0, #8
    50f4:	f008 fa82 	bl	d5fc <net_buf_simple_pull_mem>
	status = buf->data[0];
    50f8:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    50fa:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    50fc:	4622      	mov	r2, r4
    50fe:	7819      	ldrb	r1, [r3, #0]
    5100:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    5104:	f7ff fdfa 	bl	4cfc <hci_cmd_done>
	if (ncmd) {
    5108:	b125      	cbz	r5, 5114 <hci_cmd_complete+0x28>
}
    510a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    510e:	4802      	ldr	r0, [pc, #8]	; (5118 <hci_cmd_complete+0x2c>)
    5110:	f00b bc96 	b.w	10a40 <z_impl_k_sem_give>
    5114:	bd38      	pop	{r3, r4, r5, pc}
    5116:	bf00      	nop
    5118:	200000d0 	.word	0x200000d0

0000511c <bt_hci_cmd_create>:
{
    511c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    5120:	f04f 32ff 	mov.w	r2, #4294967295
{
    5124:	4605      	mov	r5, r0
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    5126:	f04f 33ff 	mov.w	r3, #4294967295
    512a:	481c      	ldr	r0, [pc, #112]	; (519c <bt_hci_cmd_create+0x80>)
{
    512c:	460e      	mov	r6, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    512e:	f010 fa5a 	bl	155e6 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
    5132:	4604      	mov	r4, r0
    5134:	b958      	cbnz	r0, 514e <bt_hci_cmd_create+0x32>
    5136:	491a      	ldr	r1, [pc, #104]	; (51a0 <bt_hci_cmd_create+0x84>)
    5138:	481a      	ldr	r0, [pc, #104]	; (51a4 <bt_hci_cmd_create+0x88>)
    513a:	f44f 7393 	mov.w	r3, #294	; 0x126
    513e:	4a1a      	ldr	r2, [pc, #104]	; (51a8 <bt_hci_cmd_create+0x8c>)
    5140:	f00c ff02 	bl	11f48 <printk>
    5144:	f44f 7193 	mov.w	r1, #294	; 0x126
    5148:	4817      	ldr	r0, [pc, #92]	; (51a8 <bt_hci_cmd_create+0x8c>)
    514a:	f00d f993 	bl	12474 <assert_post_action>
	*(u8_t *)net_buf_user_data(buf) = type;
    514e:	2700      	movs	r7, #0
	net_buf_reserve(buf, BT_BUF_RESERVE);
    5150:	f104 0b08 	add.w	fp, r4, #8
    5154:	2101      	movs	r1, #1
    5156:	4658      	mov	r0, fp
    5158:	f008 f8a2 	bl	d2a0 <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
    515c:	4620      	mov	r0, r4
    515e:	7527      	strb	r7, [r4, #20]
    5160:	f007 ff64 	bl	d02c <net_buf_id>
    5164:	f04f 0a0c 	mov.w	sl, #12
    5168:	f8df 8040 	ldr.w	r8, [pc, #64]	; 51ac <bt_hci_cmd_create+0x90>
    516c:	fb0a 8000 	mla	r0, sl, r0, r8
    5170:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
    5172:	4620      	mov	r0, r4
    5174:	f007 ff5a 	bl	d02c <net_buf_id>
    5178:	fb0a 8000 	mla	r0, sl, r0, r8
    517c:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
    517e:	4620      	mov	r0, r4
    5180:	f007 ff54 	bl	d02c <net_buf_id>
    5184:	fb0a 8000 	mla	r0, sl, r0, r8
	hdr = net_buf_add(buf, sizeof(*hdr));
    5188:	2103      	movs	r1, #3
	cmd(buf)->state = NULL;
    518a:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    518c:	4658      	mov	r0, fp
    518e:	f008 fa57 	bl	d640 <net_buf_simple_add>
	hdr->param_len = param_len;
    5192:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    5194:	8005      	strh	r5, [r0, #0]
}
    5196:	4620      	mov	r0, r4
    5198:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    519c:	200005dc 	.word	0x200005dc
    51a0:	0001afce 	.word	0x0001afce
    51a4:	00017b50 	.word	0x00017b50
    51a8:	000191bb 	.word	0x000191bb
    51ac:	20000c08 	.word	0x20000c08

000051b0 <bt_hci_cmd_send_sync>:
{
    51b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    51b4:	4680      	mov	r8, r0
    51b6:	4615      	mov	r5, r2
	if (!buf) {
    51b8:	460c      	mov	r4, r1
{
    51ba:	b086      	sub	sp, #24
	if (!buf) {
    51bc:	b921      	cbnz	r1, 51c8 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
    51be:	f7ff ffad 	bl	511c <bt_hci_cmd_create>
		if (!buf) {
    51c2:	4604      	mov	r4, r0
    51c4:	2800      	cmp	r0, #0
    51c6:	d04f      	beq.n	5268 <bt_hci_cmd_send_sync+0xb8>
	return z_impl_k_sem_init(sem, initial_count, limit);
    51c8:	2201      	movs	r2, #1
    51ca:	2100      	movs	r1, #0
    51cc:	4668      	mov	r0, sp
    51ce:	f011 fa49 	bl	16664 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    51d2:	4620      	mov	r0, r4
    51d4:	f007 ff2a 	bl	d02c <net_buf_id>
    51d8:	230c      	movs	r3, #12
    51da:	4e25      	ldr	r6, [pc, #148]	; (5270 <bt_hci_cmd_send_sync+0xc0>)
    51dc:	fb03 6000 	mla	r0, r3, r0, r6
    51e0:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    51e4:	4620      	mov	r0, r4
    51e6:	f008 f8ff 	bl	d3e8 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    51ea:	4621      	mov	r1, r4
    51ec:	4821      	ldr	r0, [pc, #132]	; (5274 <bt_hci_cmd_send_sync+0xc4>)
    51ee:	f008 f881 	bl	d2f4 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    51f2:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    51f6:	2300      	movs	r3, #0
    51f8:	4668      	mov	r0, sp
    51fa:	f00b fc65 	bl	10ac8 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    51fe:	4607      	mov	r7, r0
    5200:	b180      	cbz	r0, 5224 <bt_hci_cmd_send_sync+0x74>
    5202:	f240 1371 	movw	r3, #369	; 0x171
    5206:	4a1c      	ldr	r2, [pc, #112]	; (5278 <bt_hci_cmd_send_sync+0xc8>)
    5208:	491c      	ldr	r1, [pc, #112]	; (527c <bt_hci_cmd_send_sync+0xcc>)
    520a:	481d      	ldr	r0, [pc, #116]	; (5280 <bt_hci_cmd_send_sync+0xd0>)
    520c:	f00c fe9c 	bl	11f48 <printk>
    5210:	4639      	mov	r1, r7
    5212:	481c      	ldr	r0, [pc, #112]	; (5284 <bt_hci_cmd_send_sync+0xd4>)
    5214:	f00c fe98 	bl	11f48 <printk>
    5218:	4040      	eors	r0, r0
    521a:	f380 8811 	msr	BASEPRI, r0
    521e:	f04f 0003 	mov.w	r0, #3
    5222:	df02      	svc	2
	status = cmd(buf)->status;
    5224:	4620      	mov	r0, r4
    5226:	f007 ff01 	bl	d02c <net_buf_id>
    522a:	230c      	movs	r3, #12
    522c:	4343      	muls	r3, r0
    522e:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
    5230:	b18e      	cbz	r6, 5256 <bt_hci_cmd_send_sync+0xa6>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    5232:	4633      	mov	r3, r6
    5234:	4642      	mov	r2, r8
    5236:	2157      	movs	r1, #87	; 0x57
    5238:	4813      	ldr	r0, [pc, #76]	; (5288 <bt_hci_cmd_send_sync+0xd8>)
    523a:	f00c fe85 	bl	11f48 <printk>
		net_buf_unref(buf);
    523e:	4620      	mov	r0, r4
    5240:	f008 f88c 	bl	d35c <net_buf_unref>
			return -EIO;
    5244:	2e09      	cmp	r6, #9
    5246:	bf0c      	ite	eq
    5248:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
    524c:	f06f 0004 	mvnne.w	r0, #4
}
    5250:	b006      	add	sp, #24
    5252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
    5256:	b115      	cbz	r5, 525e <bt_hci_cmd_send_sync+0xae>
	return 0;
    5258:	4630      	mov	r0, r6
		*rsp = buf;
    525a:	602c      	str	r4, [r5, #0]
    525c:	e7f8      	b.n	5250 <bt_hci_cmd_send_sync+0xa0>
		net_buf_unref(buf);
    525e:	4620      	mov	r0, r4
    5260:	f008 f87c 	bl	d35c <net_buf_unref>
	return 0;
    5264:	4628      	mov	r0, r5
    5266:	e7f3      	b.n	5250 <bt_hci_cmd_send_sync+0xa0>
			return -ENOBUFS;
    5268:	f06f 0036 	mvn.w	r0, #54	; 0x36
    526c:	e7f0      	b.n	5250 <bt_hci_cmd_send_sync+0xa0>
    526e:	bf00      	nop
    5270:	20000c08 	.word	0x20000c08
    5274:	20000108 	.word	0x20000108
    5278:	000191bb 	.word	0x000191bb
    527c:	000192dc 	.word	0x000192dc
    5280:	00017b50 	.word	0x00017b50
    5284:	000192e5 	.word	0x000192e5
    5288:	00019305 	.word	0x00019305

0000528c <hci_le_read_max_data_len>:
{
    528c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    528e:	4606      	mov	r6, r0
    5290:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    5292:	f242 002f 	movw	r0, #8239	; 0x202f
    5296:	2100      	movs	r1, #0
    5298:	aa01      	add	r2, sp, #4
    529a:	f7ff ff89 	bl	51b0 <bt_hci_cmd_send_sync>
	if (err) {
    529e:	4604      	mov	r4, r0
    52a0:	b130      	cbz	r0, 52b0 <hci_le_read_max_data_len+0x24>
		BT_ERR("Failed to read DLE max data len");
    52a2:	2145      	movs	r1, #69	; 0x45
    52a4:	4808      	ldr	r0, [pc, #32]	; (52c8 <hci_le_read_max_data_len+0x3c>)
    52a6:	f00c fe4f 	bl	11f48 <printk>
}
    52aa:	4620      	mov	r0, r4
    52ac:	b002      	add	sp, #8
    52ae:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    52b0:	9801      	ldr	r0, [sp, #4]
    52b2:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    52b4:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    52b8:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    52ba:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    52be:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    52c0:	f008 f84c 	bl	d35c <net_buf_unref>
	return 0;
    52c4:	e7f1      	b.n	52aa <hci_le_read_max_data_len+0x1e>
    52c6:	bf00      	nop
    52c8:	00019326 	.word	0x00019326

000052cc <set_random_address>:
{
    52cc:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    52ce:	4e15      	ldr	r6, [pc, #84]	; (5324 <set_random_address+0x58>)
    52d0:	2206      	movs	r2, #6
    52d2:	f106 0131 	add.w	r1, r6, #49	; 0x31
    52d6:	4605      	mov	r5, r0
    52d8:	f00e f93a 	bl	13550 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    52dc:	4604      	mov	r4, r0
    52de:	b1e0      	cbz	r0, 531a <set_random_address+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    52e0:	2106      	movs	r1, #6
    52e2:	f242 0005 	movw	r0, #8197	; 0x2005
    52e6:	f7ff ff19 	bl	511c <bt_hci_cmd_create>
	if (!buf) {
    52ea:	4604      	mov	r4, r0
    52ec:	b1b8      	cbz	r0, 531e <set_random_address+0x52>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    52ee:	2206      	movs	r2, #6
    52f0:	4629      	mov	r1, r5
    52f2:	3008      	adds	r0, #8
    52f4:	f010 f9a8 	bl	15648 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    52f8:	4621      	mov	r1, r4
    52fa:	2200      	movs	r2, #0
    52fc:	f242 0005 	movw	r0, #8197	; 0x2005
    5300:	f7ff ff56 	bl	51b0 <bt_hci_cmd_send_sync>
	if (err) {
    5304:	4604      	mov	r4, r0
    5306:	b940      	cbnz	r0, 531a <set_random_address+0x4e>
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    5308:	2206      	movs	r2, #6
    530a:	4629      	mov	r1, r5
    530c:	f106 0031 	add.w	r0, r6, #49	; 0x31
    5310:	f00e f92e 	bl	13570 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    5314:	2301      	movs	r3, #1
    5316:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}
    531a:	4620      	mov	r0, r4
    531c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    531e:	f06f 0436 	mvn.w	r4, #54	; 0x36
    5322:	e7fa      	b.n	531a <set_random_address+0x4e>
    5324:	20000000 	.word	0x20000000

00005328 <le_create_conn_set_random_addr.isra.0>:
static int le_create_conn_set_random_addr(bool use_filter, u8_t *own_addr_type)
    5328:	b538      	push	{r3, r4, r5, lr}
		if (addr->type == BT_ADDR_LE_RANDOM) {
    532a:	4c07      	ldr	r4, [pc, #28]	; (5348 <le_create_conn_set_random_addr.isra.0+0x20>)
static int le_create_conn_set_random_addr(bool use_filter, u8_t *own_addr_type)
    532c:	4605      	mov	r5, r0
		if (addr->type == BT_ADDR_LE_RANDOM) {
    532e:	7823      	ldrb	r3, [r4, #0]
    5330:	2b01      	cmp	r3, #1
    5332:	d003      	beq.n	533c <le_create_conn_set_random_addr.isra.0+0x14>
	return 0;
    5334:	2000      	movs	r0, #0
		*own_addr_type = addr->type;
    5336:	7823      	ldrb	r3, [r4, #0]
    5338:	702b      	strb	r3, [r5, #0]
}
    533a:	bd38      	pop	{r3, r4, r5, pc}
			err = set_random_address(&addr->a);
    533c:	1c60      	adds	r0, r4, #1
    533e:	f7ff ffc5 	bl	52cc <set_random_address>
			if (err) {
    5342:	2800      	cmp	r0, #0
    5344:	d0f6      	beq.n	5334 <le_create_conn_set_random_addr.isra.0+0xc>
    5346:	e7f8      	b.n	533a <le_create_conn_set_random_addr.isra.0+0x12>
    5348:	20000000 	.word	0x20000000

0000534c <set_le_adv_enable_legacy>:
{
    534c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    534e:	4606      	mov	r6, r0
    5350:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    5352:	f242 000a 	movw	r0, #8202	; 0x200a
    5356:	2101      	movs	r1, #1
    5358:	f7ff fee0 	bl	511c <bt_hci_cmd_create>
	if (!buf) {
    535c:	4604      	mov	r4, r0
    535e:	b1e8      	cbz	r0, 539c <set_le_adv_enable_legacy+0x50>
	if (enable) {
    5360:	3008      	adds	r0, #8
    5362:	b1cd      	cbz	r5, 5398 <set_le_adv_enable_legacy+0x4c>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    5364:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    5366:	f010 f97b 	bl	15660 <net_buf_simple_add_u8>
	state->bit = bit;
    536a:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
    536c:	4620      	mov	r0, r4
	cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
    536e:	3614      	adds	r6, #20
	state->bit = bit;
    5370:	9302      	str	r3, [sp, #8]
	state->target = target;
    5372:	9601      	str	r6, [sp, #4]
	state->val = val;
    5374:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    5378:	f007 fe58 	bl	d02c <net_buf_id>
    537c:	220c      	movs	r2, #12
    537e:	4b09      	ldr	r3, [pc, #36]	; (53a4 <set_le_adv_enable_legacy+0x58>)
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    5380:	4621      	mov	r1, r4
	cmd(buf)->state = &state;
    5382:	fb02 3000 	mla	r0, r2, r0, r3
    5386:	ab01      	add	r3, sp, #4
    5388:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    538a:	2200      	movs	r2, #0
    538c:	f242 000a 	movw	r0, #8202	; 0x200a
    5390:	f7ff ff0e 	bl	51b0 <bt_hci_cmd_send_sync>
}
    5394:	b004      	add	sp, #16
    5396:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    5398:	4629      	mov	r1, r5
    539a:	e7e4      	b.n	5366 <set_le_adv_enable_legacy+0x1a>
		return -ENOBUFS;
    539c:	f06f 0036 	mvn.w	r0, #54	; 0x36
    53a0:	e7f8      	b.n	5394 <set_le_adv_enable_legacy+0x48>
    53a2:	bf00      	nop
    53a4:	20000c08 	.word	0x20000c08

000053a8 <set_le_scan_enable_legacy>:
{
    53a8:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    53aa:	2102      	movs	r1, #2
{
    53ac:	4604      	mov	r4, r0
    53ae:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    53b0:	f242 000c 	movw	r0, #8204	; 0x200c
    53b4:	f7ff feb2 	bl	511c <bt_hci_cmd_create>
	if (!buf) {
    53b8:	4605      	mov	r5, r0
    53ba:	b348      	cbz	r0, 5410 <set_le_scan_enable_legacy+0x68>
	cp = net_buf_add(buf, sizeof(*cp));
    53bc:	2102      	movs	r1, #2
    53be:	3008      	adds	r0, #8
    53c0:	f008 f93e 	bl	d640 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    53c4:	2c01      	cmp	r4, #1
	cp = net_buf_add(buf, sizeof(*cp));
    53c6:	4603      	mov	r3, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    53c8:	d11f      	bne.n	540a <set_le_scan_enable_legacy+0x62>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    53ca:	4813      	ldr	r0, [pc, #76]	; (5418 <set_le_scan_enable_legacy+0x70>)
    53cc:	f00e f9cf 	bl	1376e <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    53d0:	f3c0 2000 	ubfx	r0, r0, #8, #1
    53d4:	7058      	strb	r0, [r3, #1]
	cp->enable = enable;
    53d6:	701c      	strb	r4, [r3, #0]
	state->target = target;
    53d8:	4b0f      	ldr	r3, [pc, #60]	; (5418 <set_le_scan_enable_legacy+0x70>)
	cmd(buf)->state = &state;
    53da:	4628      	mov	r0, r5
	state->target = target;
    53dc:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    53de:	2305      	movs	r3, #5
	cmd_state_set_init(&state, bt_dev.flags, BT_DEV_SCANNING,
    53e0:	f004 0401 	and.w	r4, r4, #1
	state->bit = bit;
    53e4:	9302      	str	r3, [sp, #8]
	cmd_state_set_init(&state, bt_dev.flags, BT_DEV_SCANNING,
    53e6:	f88d 400c 	strb.w	r4, [sp, #12]
	cmd(buf)->state = &state;
    53ea:	f007 fe1f 	bl	d02c <net_buf_id>
    53ee:	220c      	movs	r2, #12
    53f0:	4b0a      	ldr	r3, [pc, #40]	; (541c <set_le_scan_enable_legacy+0x74>)
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    53f2:	4629      	mov	r1, r5
	cmd(buf)->state = &state;
    53f4:	fb02 3000 	mla	r0, r2, r0, r3
    53f8:	ab01      	add	r3, sp, #4
    53fa:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    53fc:	2200      	movs	r2, #0
    53fe:	f242 000c 	movw	r0, #8204	; 0x200c
    5402:	f7ff fed5 	bl	51b0 <bt_hci_cmd_send_sync>
}
    5406:	b005      	add	sp, #20
    5408:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    540a:	2200      	movs	r2, #0
    540c:	7042      	strb	r2, [r0, #1]
    540e:	e7e2      	b.n	53d6 <set_le_scan_enable_legacy+0x2e>
		return -ENOBUFS;
    5410:	f06f 0036 	mvn.w	r0, #54	; 0x36
    5414:	e7f7      	b.n	5406 <set_le_scan_enable_legacy+0x5e>
    5416:	bf00      	nop
    5418:	20000098 	.word	0x20000098
    541c:	20000c08 	.word	0x20000c08

00005420 <start_le_scan_legacy>:
{
    5420:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5422:	4605      	mov	r5, r0
    5424:	460e      	mov	r6, r1
    5426:	4614      	mov	r4, r2
	(void)memset(&set_param, 0, sizeof(set_param));
    5428:	2100      	movs	r1, #0
    542a:	2207      	movs	r2, #7
    542c:	4668      	mov	r0, sp
    542e:	f00e f8ca 	bl	135c6 <memset>
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
    5432:	2300      	movs	r3, #0
		*own_addr_type = bt_dev.id_addr[0].type;
    5434:	481f      	ldr	r0, [pc, #124]	; (54b4 <start_le_scan_legacy+0x94>)
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
    5436:	f88d 3006 	strb.w	r3, [sp, #6]
		*own_addr_type = bt_dev.id_addr[0].type;
    543a:	f810 3b2c 	ldrb.w	r3, [r0], #44
	set_param.scan_type = scan_type;
    543e:	f88d 5000 	strb.w	r5, [sp]
	set_param.interval = sys_cpu_to_le16(interval);
    5442:	f8ad 6001 	strh.w	r6, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
    5446:	f8ad 4003 	strh.w	r4, [sp, #3]
		*own_addr_type = bt_dev.id_addr[0].type;
    544a:	f88d 3005 	strb.w	r3, [sp, #5]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    544e:	f00e f98e 	bl	1376e <atomic_get>
		    adv && !atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    5452:	0642      	lsls	r2, r0, #25
    5454:	d406      	bmi.n	5464 <start_le_scan_legacy+0x44>
			err = le_set_private_addr(BT_ID_DEFAULT);
    5456:	f00e f9d2 	bl	137fe <le_adv_set_private_addr.isra.0>
			if (err) {
    545a:	4604      	mov	r4, r0
    545c:	bb18      	cbnz	r0, 54a6 <start_le_scan_legacy+0x86>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    545e:	2301      	movs	r3, #1
    5460:	f88d 3005 	strb.w	r3, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    5464:	2107      	movs	r1, #7
    5466:	f242 000b 	movw	r0, #8203	; 0x200b
    546a:	f7ff fe57 	bl	511c <bt_hci_cmd_create>
	if (!buf) {
    546e:	4604      	mov	r4, r0
    5470:	b1e0      	cbz	r0, 54ac <start_le_scan_legacy+0x8c>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    5472:	2207      	movs	r2, #7
    5474:	4669      	mov	r1, sp
    5476:	3008      	adds	r0, #8
    5478:	f010 f8e6 	bl	15648 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    547c:	4621      	mov	r1, r4
    547e:	2200      	movs	r2, #0
    5480:	f242 000b 	movw	r0, #8203	; 0x200b
    5484:	f7ff fe94 	bl	51b0 <bt_hci_cmd_send_sync>
	if (err) {
    5488:	4604      	mov	r4, r0
    548a:	b960      	cbnz	r0, 54a6 <start_le_scan_legacy+0x86>
	return set_le_scan_enable_legacy(enable);
    548c:	2001      	movs	r0, #1
    548e:	f7ff ff8b 	bl	53a8 <set_le_scan_enable_legacy>
	if (err) {
    5492:	4604      	mov	r4, r0
    5494:	b938      	cbnz	r0, 54a6 <start_le_scan_legacy+0x86>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);
    5496:	1e6b      	subs	r3, r5, #1
    5498:	425a      	negs	r2, r3
    549a:	f04f 0107 	mov.w	r1, #7
    549e:	4806      	ldr	r0, [pc, #24]	; (54b8 <start_le_scan_legacy+0x98>)
    54a0:	415a      	adcs	r2, r3
    54a2:	f00e f98b 	bl	137bc <atomic_set_bit_to>
}
    54a6:	4620      	mov	r0, r4
    54a8:	b002      	add	sp, #8
    54aa:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    54ac:	f06f 0436 	mvn.w	r4, #54	; 0x36
    54b0:	e7f9      	b.n	54a6 <start_le_scan_legacy+0x86>
    54b2:	bf00      	nop
    54b4:	20000000 	.word	0x20000000
    54b8:	20000098 	.word	0x20000098

000054bc <bt_le_create_conn_legacy>:
{
    54bc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    54c0:	4606      	mov	r6, r0
	err = le_create_conn_set_random_addr(use_filter, &own_addr_type);
    54c2:	f10d 0003 	add.w	r0, sp, #3
    54c6:	f7ff ff2f 	bl	5328 <le_create_conn_set_random_addr.isra.0>
	if (err) {
    54ca:	4605      	mov	r5, r0
    54cc:	2800      	cmp	r0, #0
    54ce:	d150      	bne.n	5572 <bt_le_create_conn_legacy+0xb6>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    54d0:	2119      	movs	r1, #25
    54d2:	f242 000d 	movw	r0, #8205	; 0x200d
    54d6:	f7ff fe21 	bl	511c <bt_hci_cmd_create>
	if (!buf) {
    54da:	4607      	mov	r7, r0
    54dc:	2800      	cmp	r0, #0
    54de:	d04f      	beq.n	5580 <bt_le_create_conn_legacy+0xc4>
	cp = net_buf_add(buf, sizeof(*cp));
    54e0:	2119      	movs	r1, #25
    54e2:	3008      	adds	r0, #8
    54e4:	f008 f8ac 	bl	d640 <net_buf_simple_add>
    54e8:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
    54ea:	4629      	mov	r1, r5
    54ec:	2219      	movs	r2, #25
    54ee:	f00e f86a 	bl	135c6 <memset>
	cp->own_addr_type = own_addr_type;
    54f2:	f89d 3003 	ldrb.w	r3, [sp, #3]
		if (!bt_dev.le.rl_size ||
    54f6:	4d24      	ldr	r5, [pc, #144]	; (5588 <bt_le_create_conn_legacy+0xcc>)
	cp->own_addr_type = own_addr_type;
    54f8:	7323      	strb	r3, [r4, #12]
		if (!bt_dev.le.rl_size ||
    54fa:	f895 30cc 	ldrb.w	r3, [r5, #204]	; 0xcc
    54fe:	2b00      	cmp	r3, #0
    5500:	d03b      	beq.n	557a <bt_le_create_conn_legacy+0xbe>
    5502:	f895 20cd 	ldrb.w	r2, [r5, #205]	; 0xcd
    5506:	429a      	cmp	r2, r3
    5508:	d837      	bhi.n	557a <bt_le_create_conn_legacy+0xbe>
		const bt_addr_le_t *peer_addr = &conn->le.dst;
    550a:	f106 017c 	add.w	r1, r6, #124	; 0x7c
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
    550e:	f04f 0800 	mov.w	r8, #0
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
    5512:	1d60      	adds	r0, r4, #5
    5514:	f00e f92e 	bl	13774 <bt_addr_le_copy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
    5518:	f884 8004 	strb.w	r8, [r4, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    551c:	89ab      	ldrh	r3, [r5, #12]
	cmd(buf)->state = &state;
    551e:	4638      	mov	r0, r7
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    5520:	8023      	strh	r3, [r4, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
    5522:	89eb      	ldrh	r3, [r5, #14]
    5524:	8063      	strh	r3, [r4, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    5526:	f8b6 3094 	ldrh.w	r3, [r6, #148]	; 0x94
    552a:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    552e:	f8b6 3096 	ldrh.w	r3, [r6, #150]	; 0x96
    5532:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    5536:	f8b6 3098 	ldrh.w	r3, [r6, #152]	; 0x98
    553a:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    553e:	f8b6 309a 	ldrh.w	r3, [r6, #154]	; 0x9a
    5542:	f8a4 3013 	strh.w	r3, [r4, #19]
	state->target = target;
    5546:	4b11      	ldr	r3, [pc, #68]	; (558c <bt_le_create_conn_legacy+0xd0>)
    5548:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    554a:	230b      	movs	r3, #11
    554c:	9302      	str	r3, [sp, #8]
	state->val = val;
    554e:	2301      	movs	r3, #1
    5550:	f88d 300c 	strb.w	r3, [sp, #12]
	cmd(buf)->state = &state;
    5554:	f007 fd6a 	bl	d02c <net_buf_id>
    5558:	220c      	movs	r2, #12
    555a:	4b0d      	ldr	r3, [pc, #52]	; (5590 <bt_le_create_conn_legacy+0xd4>)
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    555c:	4639      	mov	r1, r7
	cmd(buf)->state = &state;
    555e:	fb02 3000 	mla	r0, r2, r0, r3
    5562:	ab01      	add	r3, sp, #4
    5564:	6043      	str	r3, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    5566:	4642      	mov	r2, r8
    5568:	f242 000d 	movw	r0, #8205	; 0x200d
    556c:	f7ff fe20 	bl	51b0 <bt_hci_cmd_send_sync>
    5570:	4605      	mov	r5, r0
}
    5572:	4628      	mov	r0, r5
    5574:	b004      	add	sp, #16
    5576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			peer_addr = &conn->le.resp_addr;
    557a:	f106 018a 	add.w	r1, r6, #138	; 0x8a
    557e:	e7c6      	b.n	550e <bt_le_create_conn_legacy+0x52>
		return -ENOBUFS;
    5580:	f06f 0536 	mvn.w	r5, #54	; 0x36
    5584:	e7f5      	b.n	5572 <bt_le_create_conn_legacy+0xb6>
    5586:	bf00      	nop
    5588:	20000000 	.word	0x20000000
    558c:	20000098 	.word	0x20000098
    5590:	20000c08 	.word	0x20000c08

00005594 <bt_le_create_conn_cancel>:
{
    5594:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    5596:	2100      	movs	r1, #0
{
    5598:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    559a:	f242 000e 	movw	r0, #8206	; 0x200e
    559e:	f7ff fdbd 	bl	511c <bt_hci_cmd_create>
	state->target = target;
    55a2:	4b0c      	ldr	r3, [pc, #48]	; (55d4 <bt_le_create_conn_cancel+0x40>)
	state->val = val;
    55a4:	2500      	movs	r5, #0
	state->target = target;
    55a6:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    55a8:	230b      	movs	r3, #11
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    55aa:	4604      	mov	r4, r0
	state->bit = bit;
    55ac:	9302      	str	r3, [sp, #8]
	state->val = val;
    55ae:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    55b2:	f007 fd3b 	bl	d02c <net_buf_id>
    55b6:	220c      	movs	r2, #12
    55b8:	4b07      	ldr	r3, [pc, #28]	; (55d8 <bt_le_create_conn_cancel+0x44>)
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    55ba:	4621      	mov	r1, r4
	cmd(buf)->state = &state;
    55bc:	fb02 3000 	mla	r0, r2, r0, r3
    55c0:	ab01      	add	r3, sp, #4
    55c2:	6043      	str	r3, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    55c4:	462a      	mov	r2, r5
    55c6:	f242 000e 	movw	r0, #8206	; 0x200e
    55ca:	f7ff fdf1 	bl	51b0 <bt_hci_cmd_send_sync>
}
    55ce:	b005      	add	sp, #20
    55d0:	bd30      	pop	{r4, r5, pc}
    55d2:	bf00      	nop
    55d4:	20000098 	.word	0x20000098
    55d8:	20000c08 	.word	0x20000c08

000055dc <bt_id_add>:
{
    55dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    55e0:	4f53      	ldr	r7, [pc, #332]	; (5730 <bt_id_add+0x154>)
{
    55e2:	4604      	mov	r4, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    55e4:	f897 20cc 	ldrb.w	r2, [r7, #204]	; 0xcc
    55e8:	463d      	mov	r5, r7
    55ea:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
    55ee:	b10a      	cbz	r2, 55f4 <bt_id_add+0x18>
    55f0:	429a      	cmp	r2, r3
    55f2:	d209      	bcs.n	5608 <bt_id_add+0x2c>
		bt_dev.le.rl_entries++;
    55f4:	3301      	adds	r3, #1
    55f6:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
		keys->state |= BT_KEYS_ID_ADDED;
    55fa:	7a23      	ldrb	r3, [r4, #8]
    55fc:	f043 0304 	orr.w	r3, r3, #4
    5600:	7223      	strb	r3, [r4, #8]
}
    5602:	b002      	add	sp, #8
    5604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    5608:	2100      	movs	r1, #0
    560a:	2206      	movs	r2, #6
    560c:	4608      	mov	r0, r1
    560e:	f001 ff2d 	bl	746c <bt_conn_lookup_state_le>
	if (conn) {
    5612:	4606      	mov	r6, r0
    5614:	b168      	cbz	r0, 5632 <bt_id_add+0x56>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    5616:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    561a:	f107 0098 	add.w	r0, r7, #152	; 0x98
    561e:	f00e f8ac 	bl	1377a <atomic_or>
	keys->state |= flag;
    5622:	7a23      	ldrb	r3, [r4, #8]
		bt_conn_unref(conn);
    5624:	4630      	mov	r0, r6
	keys->state |= flag;
    5626:	f043 0301 	orr.w	r3, r3, #1
    562a:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
    562c:	f00e fb53 	bl	13cd6 <bt_conn_unref>
		return;
    5630:	e7e7      	b.n	5602 <bt_id_add+0x26>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5632:	f107 0098 	add.w	r0, r7, #152	; 0x98
    5636:	f00e f89a 	bl	1376e <atomic_get>
	func(&bt_dev.adv, data);
    563a:	4631      	mov	r1, r6
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    563c:	f3c0 1740 	ubfx	r7, r0, #5, #1
    5640:	f105 0018 	add.w	r0, r5, #24
    5644:	f00e f8ed 	bl	13822 <adv_pause_enabled>
	if (scan_enabled) {
    5648:	b117      	cbz	r7, 5650 <bt_id_add+0x74>
		set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    564a:	4630      	mov	r0, r6
    564c:	f00e f957 	bl	138fe <set_le_scan_enable>
	if (bt_dev.le.rl_entries) {
    5650:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    5654:	b143      	cbz	r3, 5668 <bt_id_add+0x8c>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    5656:	2000      	movs	r0, #0
    5658:	f00e f939 	bl	138ce <addr_res_enable>
		if (err) {
    565c:	b120      	cbz	r0, 5668 <bt_id_add+0x8c>
			BT_WARN("Failed to disable address resolution");
    565e:	2157      	movs	r1, #87	; 0x57
    5660:	4834      	ldr	r0, [pc, #208]	; (5734 <bt_id_add+0x158>)
		BT_WARN("Set privacy mode command is not supported");
    5662:	f00c fc71 	bl	11f48 <printk>
	if (err) {
    5666:	e01c      	b.n	56a2 <bt_id_add+0xc6>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
    5668:	f895 20cd 	ldrb.w	r2, [r5, #205]	; 0xcd
    566c:	f895 30cc 	ldrb.w	r3, [r5, #204]	; 0xcc
    5670:	429a      	cmp	r2, r3
    5672:	d122      	bne.n	56ba <bt_id_add+0xde>
		BT_WARN("Resolving list size exceeded. Switching to host.");
    5674:	2157      	movs	r1, #87	; 0x57
    5676:	4830      	ldr	r0, [pc, #192]	; (5738 <bt_id_add+0x15c>)
    5678:	f00c fc66 	bl	11f48 <printk>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
    567c:	2200      	movs	r2, #0
    567e:	f242 0029 	movw	r0, #8233	; 0x2029
    5682:	4611      	mov	r1, r2
    5684:	f7ff fd94 	bl	51b0 <bt_hci_cmd_send_sync>
		if (err) {
    5688:	b110      	cbz	r0, 5690 <bt_id_add+0xb4>
			BT_ERR("Failed to clear resolution list");
    568a:	2145      	movs	r1, #69	; 0x45
    568c:	482b      	ldr	r0, [pc, #172]	; (573c <bt_id_add+0x160>)
    568e:	e7e8      	b.n	5662 <bt_id_add+0x86>
		bt_dev.le.rl_entries++;
    5690:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    5694:	3301      	adds	r3, #1
    5696:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
		keys->state |= BT_KEYS_ID_ADDED;
    569a:	7a23      	ldrb	r3, [r4, #8]
    569c:	f043 0304 	orr.w	r3, r3, #4
    56a0:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    56a2:	2001      	movs	r0, #1
    56a4:	f00e f913 	bl	138ce <addr_res_enable>
	if (scan_enabled) {
    56a8:	b117      	cbz	r7, 56b0 <bt_id_add+0xd4>
		set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    56aa:	2001      	movs	r0, #1
    56ac:	f00e f927 	bl	138fe <set_le_scan_enable>
	func(&bt_dev.adv, data);
    56b0:	2100      	movs	r1, #0
    56b2:	4823      	ldr	r0, [pc, #140]	; (5740 <bt_id_add+0x164>)
    56b4:	f00e f8ca 	bl	1384c <adv_unpause_enabled>
}
    56b8:	e7a3      	b.n	5602 <bt_id_add+0x26>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
    56ba:	f104 0801 	add.w	r8, r4, #1
    56be:	4640      	mov	r0, r8
    56c0:	f104 012a 	add.w	r1, r4, #42	; 0x2a
    56c4:	f00e f8d2 	bl	1386c <hci_id_add.isra.0>
	if (err) {
    56c8:	4606      	mov	r6, r0
    56ca:	b110      	cbz	r0, 56d2 <bt_id_add+0xf6>
		BT_ERR("Failed to add IRK to controller");
    56cc:	2145      	movs	r1, #69	; 0x45
    56ce:	481d      	ldr	r0, [pc, #116]	; (5744 <bt_id_add+0x168>)
    56d0:	e7c7      	b.n	5662 <bt_id_add+0x86>
	bt_dev.le.rl_entries++;
    56d2:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    56d6:	3301      	adds	r3, #1
    56d8:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
	keys->state |= BT_KEYS_ID_ADDED;
    56dc:	7a23      	ldrb	r3, [r4, #8]
    56de:	f043 0304 	orr.w	r3, r3, #4
    56e2:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
    56e4:	f895 306f 	ldrb.w	r3, [r5, #111]	; 0x6f
    56e8:	075b      	lsls	r3, r3, #29
    56ea:	d402      	bmi.n	56f2 <bt_id_add+0x116>
		BT_WARN("Set privacy mode command is not supported");
    56ec:	2157      	movs	r1, #87	; 0x57
    56ee:	4816      	ldr	r0, [pc, #88]	; (5748 <bt_id_add+0x16c>)
    56f0:	e7b7      	b.n	5662 <bt_id_add+0x86>
	bt_addr_le_copy(&cp.id_addr, addr);
    56f2:	4641      	mov	r1, r8
    56f4:	4668      	mov	r0, sp
    56f6:	f00e f83d 	bl	13774 <bt_addr_le_copy>
	cp.mode = mode;
    56fa:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    56fc:	2108      	movs	r1, #8
    56fe:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
    5702:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    5706:	f7ff fd09 	bl	511c <bt_hci_cmd_create>
	if (!buf) {
    570a:	4604      	mov	r4, r0
    570c:	b910      	cbnz	r0, 5714 <bt_id_add+0x138>
		BT_ERR("Failed to set privacy mode");
    570e:	2145      	movs	r1, #69	; 0x45
    5710:	480e      	ldr	r0, [pc, #56]	; (574c <bt_id_add+0x170>)
    5712:	e7a6      	b.n	5662 <bt_id_add+0x86>
	net_buf_add_mem(buf, &cp, sizeof(cp));
    5714:	2208      	movs	r2, #8
    5716:	4669      	mov	r1, sp
    5718:	4410      	add	r0, r2
    571a:	f00f ff95 	bl	15648 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
    571e:	4632      	mov	r2, r6
    5720:	4621      	mov	r1, r4
    5722:	f242 004e 	movw	r0, #8270	; 0x204e
    5726:	f7ff fd43 	bl	51b0 <bt_hci_cmd_send_sync>
	if (err) {
    572a:	2800      	cmp	r0, #0
    572c:	d0b9      	beq.n	56a2 <bt_id_add+0xc6>
    572e:	e7ee      	b.n	570e <bt_id_add+0x132>
    5730:	20000000 	.word	0x20000000
    5734:	00019352 	.word	0x00019352
    5738:	0001937c 	.word	0x0001937c
    573c:	000193b2 	.word	0x000193b2
    5740:	20000018 	.word	0x20000018
    5744:	000193d7 	.word	0x000193d7
    5748:	000193fc 	.word	0x000193fc
    574c:	0001942b 	.word	0x0001942b

00005750 <bt_id_del>:
{
    5750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!bt_dev.le.rl_size ||
    5754:	4f48      	ldr	r7, [pc, #288]	; (5878 <bt_id_del+0x128>)
{
    5756:	4604      	mov	r4, r0
	if (!bt_dev.le.rl_size ||
    5758:	f897 20cc 	ldrb.w	r2, [r7, #204]	; 0xcc
    575c:	463d      	mov	r5, r7
    575e:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
    5762:	b112      	cbz	r2, 576a <bt_id_del+0x1a>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    5764:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
    5766:	4293      	cmp	r3, r2
    5768:	dd08      	ble.n	577c <bt_id_del+0x2c>
		bt_dev.le.rl_entries--;
    576a:	3b01      	subs	r3, #1
    576c:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
		keys->state &= ~BT_KEYS_ID_ADDED;
    5770:	7a23      	ldrb	r3, [r4, #8]
    5772:	f023 0304 	bic.w	r3, r3, #4
    5776:	7223      	strb	r3, [r4, #8]
}
    5778:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    577c:	2100      	movs	r1, #0
    577e:	2206      	movs	r2, #6
    5780:	4608      	mov	r0, r1
    5782:	f001 fe73 	bl	746c <bt_conn_lookup_state_le>
	if (conn) {
    5786:	4606      	mov	r6, r0
    5788:	b170      	cbz	r0, 57a8 <bt_id_del+0x58>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    578a:	f107 0098 	add.w	r0, r7, #152	; 0x98
    578e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    5792:	f00d fff2 	bl	1377a <atomic_or>
	keys->state |= flag;
    5796:	7a23      	ldrb	r3, [r4, #8]
		bt_conn_unref(conn);
    5798:	4630      	mov	r0, r6
	keys->state |= flag;
    579a:	f043 0302 	orr.w	r3, r3, #2
    579e:	7223      	strb	r3, [r4, #8]
}
    57a0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
    57a4:	f00e ba97 	b.w	13cd6 <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    57a8:	f107 0098 	add.w	r0, r7, #152	; 0x98
    57ac:	f00d ffdf 	bl	1376e <atomic_get>
	func(&bt_dev.adv, data);
    57b0:	4631      	mov	r1, r6
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    57b2:	f3c0 1840 	ubfx	r8, r0, #5, #1
    57b6:	f107 0018 	add.w	r0, r7, #24
    57ba:	f00e f832 	bl	13822 <adv_pause_enabled>
	if (scan_enabled) {
    57be:	f1b8 0f00 	cmp.w	r8, #0
    57c2:	d002      	beq.n	57ca <bt_id_del+0x7a>
		set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    57c4:	4630      	mov	r0, r6
    57c6:	f00e f89a 	bl	138fe <set_le_scan_enable>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    57ca:	2000      	movs	r0, #0
    57cc:	f00e f87f 	bl	138ce <addr_res_enable>
	if (err) {
    57d0:	4606      	mov	r6, r0
    57d2:	b1b0      	cbz	r0, 5802 <bt_id_del+0xb2>
		BT_ERR("Disabling address resolution failed (err %d)", err);
    57d4:	4602      	mov	r2, r0
    57d6:	2145      	movs	r1, #69	; 0x45
    57d8:	4828      	ldr	r0, [pc, #160]	; (587c <bt_id_del+0x12c>)
    57da:	f00c fbb5 	bl	11f48 <printk>
	if (bt_dev.le.rl_entries) {
    57de:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    57e2:	b113      	cbz	r3, 57ea <bt_id_del+0x9a>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    57e4:	2001      	movs	r0, #1
    57e6:	f00e f872 	bl	138ce <addr_res_enable>
	if (scan_enabled) {
    57ea:	f1b8 0f00 	cmp.w	r8, #0
    57ee:	d002      	beq.n	57f6 <bt_id_del+0xa6>
		set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    57f0:	2001      	movs	r0, #1
    57f2:	f00e f884 	bl	138fe <set_le_scan_enable>
}
    57f6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	func(&bt_dev.adv, data);
    57fa:	2100      	movs	r1, #0
    57fc:	4820      	ldr	r0, [pc, #128]	; (5880 <bt_id_del+0x130>)
    57fe:	f00e b825 	b.w	1384c <adv_unpause_enabled>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    5802:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    5806:	f895 20cc 	ldrb.w	r2, [r5, #204]	; 0xcc
    580a:	429a      	cmp	r2, r3
    580c:	d20c      	bcs.n	5828 <bt_id_del+0xd8>
		bt_dev.le.rl_entries--;
    580e:	3b01      	subs	r3, #1
    5810:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
		keys->state &= ~BT_KEYS_ID_ADDED;
    5814:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    5816:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
    5818:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    581c:	2002      	movs	r0, #2
    581e:	4919      	ldr	r1, [pc, #100]	; (5884 <bt_id_del+0x134>)
		keys->state &= ~BT_KEYS_ID_ADDED;
    5820:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    5822:	f007 fabf 	bl	cda4 <bt_keys_foreach>
		goto done;
    5826:	e7da      	b.n	57de <bt_id_del+0x8e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
    5828:	2107      	movs	r1, #7
    582a:	f242 0028 	movw	r0, #8232	; 0x2028
    582e:	f7ff fc75 	bl	511c <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
    5832:	f104 0901 	add.w	r9, r4, #1
	if (!buf) {
    5836:	4607      	mov	r7, r0
    5838:	b920      	cbnz	r0, 5844 <bt_id_del+0xf4>
		BT_ERR("Failed to remove IRK from controller");
    583a:	2145      	movs	r1, #69	; 0x45
    583c:	4812      	ldr	r0, [pc, #72]	; (5888 <bt_id_del+0x138>)
    583e:	f00c fb83 	bl	11f48 <printk>
		goto done;
    5842:	e7cc      	b.n	57de <bt_id_del+0x8e>
	cp = net_buf_add(buf, sizeof(*cp));
    5844:	2107      	movs	r1, #7
    5846:	3008      	adds	r0, #8
    5848:	f007 fefa 	bl	d640 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    584c:	4649      	mov	r1, r9
    584e:	f00d ff91 	bl	13774 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
    5852:	4632      	mov	r2, r6
    5854:	4639      	mov	r1, r7
    5856:	f242 0028 	movw	r0, #8232	; 0x2028
    585a:	f7ff fca9 	bl	51b0 <bt_hci_cmd_send_sync>
	if (err) {
    585e:	2800      	cmp	r0, #0
    5860:	d1eb      	bne.n	583a <bt_id_del+0xea>
	bt_dev.le.rl_entries--;
    5862:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    5866:	3b01      	subs	r3, #1
    5868:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
	keys->state &= ~BT_KEYS_ID_ADDED;
    586c:	7a23      	ldrb	r3, [r4, #8]
    586e:	f023 0304 	bic.w	r3, r3, #4
    5872:	7223      	strb	r3, [r4, #8]
    5874:	e7b3      	b.n	57de <bt_id_del+0x8e>
    5876:	bf00      	nop
    5878:	20000000 	.word	0x20000000
    587c:	0001944b 	.word	0x0001944b
    5880:	20000018 	.word	0x20000018
    5884:	000138bd 	.word	0x000138bd
    5888:	0001947d 	.word	0x0001947d

0000588c <bt_le_scan_update>:
{
    588c:	b570      	push	{r4, r5, r6, lr}
    588e:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5890:	481c      	ldr	r0, [pc, #112]	; (5904 <bt_le_scan_update+0x78>)
    5892:	f00d ff6c 	bl	1376e <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    5896:	0641      	lsls	r1, r0, #25
    5898:	f3c0 1380 	ubfx	r3, r0, #6, #1
    589c:	d501      	bpl.n	58a2 <bt_le_scan_update+0x16>
			return 0;
    589e:	2000      	movs	r0, #0
    58a0:	e02b      	b.n	58fa <bt_le_scan_update+0x6e>
    58a2:	4818      	ldr	r0, [pc, #96]	; (5904 <bt_le_scan_update+0x78>)
    58a4:	f00d ff63 	bl	1376e <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    58a8:	0682      	lsls	r2, r0, #26
    58aa:	d421      	bmi.n	58f0 <bt_le_scan_update+0x64>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    58ac:	2100      	movs	r1, #0
    58ae:	2206      	movs	r2, #6
    58b0:	4608      	mov	r0, r1
    58b2:	f001 fddb 	bl	746c <bt_conn_lookup_state_le>
		if (conn) {
    58b6:	4604      	mov	r4, r0
    58b8:	bb00      	cbnz	r0, 58fc <bt_le_scan_update+0x70>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    58ba:	2202      	movs	r2, #2
    58bc:	4601      	mov	r1, r0
    58be:	f001 fdd5 	bl	746c <bt_conn_lookup_state_le>
		if (!conn) {
    58c2:	4605      	mov	r5, r0
    58c4:	2800      	cmp	r0, #0
    58c6:	d0ea      	beq.n	589e <bt_le_scan_update+0x12>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    58c8:	f44f 7180 	mov.w	r1, #256	; 0x100
    58cc:	480d      	ldr	r0, [pc, #52]	; (5904 <bt_le_scan_update+0x78>)
    58ce:	f00d ff54 	bl	1377a <atomic_or>
		bt_conn_unref(conn);
    58d2:	4628      	mov	r0, r5
    58d4:	f00e f9ff 	bl	13cd6 <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
    58d8:	2e00      	cmp	r6, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    58da:	4620      	mov	r0, r4
}
    58dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    58e0:	bf15      	itete	ne
    58e2:	2230      	movne	r2, #48	; 0x30
    58e4:	2212      	moveq	r2, #18
    58e6:	2160      	movne	r1, #96	; 0x60
    58e8:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    58ec:	f7ff bd98 	b.w	5420 <start_le_scan_legacy>
	return set_le_scan_enable_legacy(enable);
    58f0:	4618      	mov	r0, r3
    58f2:	f7ff fd59 	bl	53a8 <set_le_scan_enable_legacy>
		if (err) {
    58f6:	2800      	cmp	r0, #0
    58f8:	d0d8      	beq.n	58ac <bt_le_scan_update+0x20>
}
    58fa:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_unref(conn);
    58fc:	f00e f9eb 	bl	13cd6 <bt_conn_unref>
    5900:	e7cd      	b.n	589e <bt_le_scan_update+0x12>
    5902:	bf00      	nop
    5904:	20000098 	.word	0x20000098

00005908 <hci_disconn_complete>:
{
    5908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    590a:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    590c:	7835      	ldrb	r5, [r6, #0]
    590e:	bb45      	cbnz	r5, 5962 <hci_disconn_complete+0x5a>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    5910:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    5914:	4638      	mov	r0, r7
    5916:	f001 fd53 	bl	73c0 <bt_conn_lookup_handle>
	if (!conn) {
    591a:	4604      	mov	r4, r0
    591c:	b930      	cbnz	r0, 592c <hci_disconn_complete+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
    591e:	463a      	mov	r2, r7
}
    5920:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    5924:	2145      	movs	r1, #69	; 0x45
    5926:	480f      	ldr	r0, [pc, #60]	; (5964 <hci_disconn_complete+0x5c>)
    5928:	f00c bb0e 	b.w	11f48 <printk>
	conn->err = evt->reason;
    592c:	78f3      	ldrb	r3, [r6, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    592e:	4629      	mov	r1, r5
	conn->err = evt->reason;
    5930:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5932:	f001 fc4f 	bl	71d4 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    5936:	78a3      	ldrb	r3, [r4, #2]
	conn->handle = 0U;
    5938:	8025      	strh	r5, [r4, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    593a:	2b01      	cmp	r3, #1
    593c:	d004      	beq.n	5948 <hci_disconn_complete+0x40>
	bt_conn_unref(conn);
    593e:	4620      	mov	r0, r4
}
    5940:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    5944:	f00e b9c7 	b.w	13cd6 <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5948:	1d20      	adds	r0, r4, #4
    594a:	f00d ff10 	bl	1376e <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    594e:	07c3      	lsls	r3, r0, #31
    5950:	d5f5      	bpl.n	593e <hci_disconn_complete+0x36>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    5952:	4620      	mov	r0, r4
    5954:	2102      	movs	r1, #2
    5956:	f001 fc3d 	bl	71d4 <bt_conn_set_state>
		bt_le_scan_update(false);
    595a:	4628      	mov	r0, r5
    595c:	f7ff ff96 	bl	588c <bt_le_scan_update>
    5960:	e7ed      	b.n	593e <hci_disconn_complete+0x36>
}
    5962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5964:	0001907c 	.word	0x0001907c

00005968 <le_adv_report>:
{
    5968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t num_reports = net_buf_pull_u8(buf);
    596c:	f100 0708 	add.w	r7, r0, #8
{
    5970:	b08f      	sub	sp, #60	; 0x3c
    5972:	4604      	mov	r4, r0
	u8_t num_reports = net_buf_pull_u8(buf);
    5974:	4638      	mov	r0, r7
    5976:	f00f fe4b 	bl	15610 <net_buf_simple_pull_u8>
    597a:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 5b48 <le_adv_report+0x1e0>
	if (scan_dev_found_cb) {
    597e:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 5b4c <le_adv_report+0x1e4>
	u8_t num_reports = net_buf_pull_u8(buf);
    5982:	9002      	str	r0, [sp, #8]
	while (num_reports--) {
    5984:	9b02      	ldr	r3, [sp, #8]
    5986:	b133      	cbz	r3, 5996 <le_adv_report+0x2e>
		if (buf->len < sizeof(*evt)) {
    5988:	89a3      	ldrh	r3, [r4, #12]
    598a:	2b08      	cmp	r3, #8
    598c:	d806      	bhi.n	599c <le_adv_report+0x34>
			BT_ERR("Unexpected end of buffer");
    598e:	2145      	movs	r1, #69	; 0x45
    5990:	486a      	ldr	r0, [pc, #424]	; (5b3c <le_adv_report+0x1d4>)
    5992:	f00c fad9 	bl	11f48 <printk>
}
    5996:	b00f      	add	sp, #60	; 0x3c
    5998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		evt = net_buf_pull_mem(buf, sizeof(*evt));
    599c:	2109      	movs	r1, #9
    599e:	4638      	mov	r0, r7
    59a0:	f007 fe2c 	bl	d5fc <net_buf_simple_pull_mem>
		adv_info.rssi = evt->data[evt->length];
    59a4:	7a03      	ldrb	r3, [r0, #8]
		evt = net_buf_pull_mem(buf, sizeof(*evt));
    59a6:	4606      	mov	r6, r0
		adv_info.rssi = evt->data[evt->length];
    59a8:	9301      	str	r3, [sp, #4]
    59aa:	18c3      	adds	r3, r0, r3
    59ac:	7a5b      	ldrb	r3, [r3, #9]
		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);
    59ae:	f100 0a01 	add.w	sl, r0, #1
		adv_info.rssi = evt->data[evt->length];
    59b2:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    59b6:	2301      	movs	r3, #1
    59b8:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    59bc:	237f      	movs	r3, #127	; 0x7f
    59be:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
		adv_info.sid = BT_GAP_SID_INVALID;
    59c2:	23ff      	movs	r3, #255	; 0xff
    59c4:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		adv_info.adv_type = evt->evt_type;
    59c8:	7803      	ldrb	r3, [r0, #0]
    59ca:	4648      	mov	r0, r9
    59cc:	2b04      	cmp	r3, #4
    59ce:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    59d2:	bf8e      	itee	hi
    59d4:	2300      	movhi	r3, #0
    59d6:	4a5a      	ldrls	r2, [pc, #360]	; (5b40 <le_adv_report+0x1d8>)
    59d8:	5cd3      	ldrbls	r3, [r2, r3]
		adv_info.adv_props = get_adv_props(evt->evt_type);
    59da:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    59de:	f00d fec6 	bl	1376e <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    59e2:	0645      	lsls	r5, r0, #25
    59e4:	d50d      	bpl.n	5a02 <le_adv_report+0x9a>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    59e6:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    59ea:	0758      	lsls	r0, r3, #29
    59ec:	d509      	bpl.n	5a02 <le_adv_report+0x9a>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    59ee:	7a31      	ldrb	r1, [r6, #8]
    59f0:	4638      	mov	r0, r7
    59f2:	3101      	adds	r1, #1
    59f4:	f007 fde2 	bl	d5bc <net_buf_simple_pull>
    59f8:	9b02      	ldr	r3, [sp, #8]
    59fa:	1e58      	subs	r0, r3, #1
    59fc:	b2c3      	uxtb	r3, r0
    59fe:	9302      	str	r3, [sp, #8]
    5a00:	e7c0      	b.n	5984 <le_adv_report+0x1c>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    5a02:	7873      	ldrb	r3, [r6, #1]
    5a04:	f10d 081c 	add.w	r8, sp, #28
    5a08:	1e9a      	subs	r2, r3, #2
    5a0a:	2a01      	cmp	r2, #1
    5a0c:	d853      	bhi.n	5ab6 <le_adv_report+0x14e>
		bt_addr_le_copy(&id_addr, addr);
    5a0e:	4651      	mov	r1, sl
    5a10:	4640      	mov	r0, r8
    5a12:	f00d feaf 	bl	13774 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    5a16:	f89d 301c 	ldrb.w	r3, [sp, #28]
    5a1a:	3b02      	subs	r3, #2
    5a1c:	f88d 301c 	strb.w	r3, [sp, #28]
	if (scan_dev_found_cb) {
    5a20:	f8db 3000 	ldr.w	r3, [fp]
	info->addr = &id_addr;
    5a24:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	if (scan_dev_found_cb) {
    5a28:	b1bb      	cbz	r3, 5a5a <le_adv_report+0xf2>
	state->offset = net_buf_simple_headroom(buf);
    5a2a:	4638      	mov	r0, r7
    5a2c:	f00f fe00 	bl	15630 <net_buf_simple_headroom>
	state->len = buf->len;
    5a30:	89a3      	ldrh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    5a32:	9003      	str	r0, [sp, #12]
	state->len = buf->len;
    5a34:	9304      	str	r3, [sp, #16]
		buf->len = len;
    5a36:	9b01      	ldr	r3, [sp, #4]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    5a38:	4640      	mov	r0, r8
		buf->len = len;
    5a3a:	81a3      	strh	r3, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    5a3c:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
    5a40:	463b      	mov	r3, r7
    5a42:	f99d 1031 	ldrsb.w	r1, [sp, #49]	; 0x31
    5a46:	f8db 5000 	ldr.w	r5, [fp]
    5a4a:	47a8      	blx	r5
	buf->data = buf->__buf + state->offset;
    5a4c:	9b03      	ldr	r3, [sp, #12]
    5a4e:	6920      	ldr	r0, [r4, #16]
    5a50:	fa10 f083 	uxtah	r0, r0, r3
	buf->len = state->len;
    5a54:	9b04      	ldr	r3, [sp, #16]
	buf->data = buf->__buf + state->offset;
    5a56:	60a0      	str	r0, [r4, #8]
	buf->len = state->len;
    5a58:	81a3      	strh	r3, [r4, #12]
	SYS_SLIST_FOR_EACH_CONTAINER(&scan_cbs, listener, node) {
    5a5a:	4b3a      	ldr	r3, [pc, #232]	; (5b44 <le_adv_report+0x1dc>)
    5a5c:	681d      	ldr	r5, [r3, #0]
    5a5e:	2d00      	cmp	r5, #0
    5a60:	d13a      	bne.n	5ad8 <le_adv_report+0x170>
    5a62:	4648      	mov	r0, r9
	check_pending_conn(&id_addr, addr, info->adv_props);
    5a64:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    5a68:	f00d fe81 	bl	1376e <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    5a6c:	0641      	lsls	r1, r0, #25
    5a6e:	f3c0 1580 	ubfx	r5, r0, #6, #1
    5a72:	d4bc      	bmi.n	59ee <le_adv_report+0x86>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
    5a74:	07da      	lsls	r2, r3, #31
    5a76:	d5ba      	bpl.n	59ee <le_adv_report+0x86>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
    5a78:	4641      	mov	r1, r8
    5a7a:	2202      	movs	r2, #2
    5a7c:	4628      	mov	r0, r5
    5a7e:	f001 fcf5 	bl	746c <bt_conn_lookup_state_le>
	if (!conn) {
    5a82:	4680      	mov	r8, r0
    5a84:	2800      	cmp	r0, #0
    5a86:	d0b2      	beq.n	59ee <le_adv_report+0x86>
    5a88:	4648      	mov	r0, r9
    5a8a:	f00d fe70 	bl	1376e <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    5a8e:	0683      	lsls	r3, r0, #26
    5a90:	d440      	bmi.n	5b14 <le_adv_report+0x1ac>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    5a92:	f108 008a 	add.w	r0, r8, #138	; 0x8a
    5a96:	4651      	mov	r1, sl
    5a98:	f00d fe6c 	bl	13774 <bt_addr_le_copy>
	return bt_le_create_conn_legacy(conn);
    5a9c:	4640      	mov	r0, r8
    5a9e:	f7ff fd0d 	bl	54bc <bt_le_create_conn_legacy>
	if (bt_le_create_conn(conn)) {
    5aa2:	2800      	cmp	r0, #0
    5aa4:	d13b      	bne.n	5b1e <le_adv_report+0x1b6>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    5aa6:	4640      	mov	r0, r8
    5aa8:	2106      	movs	r1, #6
    5aaa:	f001 fb93 	bl	71d4 <bt_conn_set_state>
	bt_conn_unref(conn);
    5aae:	4640      	mov	r0, r8
    5ab0:	f00e f911 	bl	13cd6 <bt_conn_unref>
	return;
    5ab4:	e79b      	b.n	59ee <le_adv_report+0x86>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    5ab6:	2bff      	cmp	r3, #255	; 0xff
    5ab8:	d108      	bne.n	5acc <le_adv_report+0x164>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    5aba:	2300      	movs	r3, #0
    5abc:	a909      	add	r1, sp, #36	; 0x24
    5abe:	9309      	str	r3, [sp, #36]	; 0x24
    5ac0:	f8cd 3027 	str.w	r3, [sp, #39]	; 0x27
		bt_addr_le_copy(&id_addr,
    5ac4:	4640      	mov	r0, r8
    5ac6:	f00d fe55 	bl	13774 <bt_addr_le_copy>
    5aca:	e7a9      	b.n	5a20 <le_adv_report+0xb8>
    5acc:	4651      	mov	r1, sl
    5ace:	2000      	movs	r0, #0
    5ad0:	f00d ff17 	bl	13902 <bt_lookup_id_addr>
    5ad4:	4601      	mov	r1, r0
    5ad6:	e7f5      	b.n	5ac4 <le_adv_report+0x15c>
	SYS_SLIST_FOR_EACH_CONTAINER(&scan_cbs, listener, node) {
    5ad8:	3d08      	subs	r5, #8
    5ada:	2d00      	cmp	r5, #0
    5adc:	d0c1      	beq.n	5a62 <le_adv_report+0xfa>
	state->offset = net_buf_simple_headroom(buf);
    5ade:	4638      	mov	r0, r7
    5ae0:	f00f fda6 	bl	15630 <net_buf_simple_headroom>
	state->len = buf->len;
    5ae4:	89a3      	ldrh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    5ae6:	9003      	str	r0, [sp, #12]
	state->len = buf->len;
    5ae8:	9304      	str	r3, [sp, #16]
		buf->len = len;
    5aea:	9b01      	ldr	r3, [sp, #4]
		listener->recv(info, &buf->b);
    5aec:	a80b      	add	r0, sp, #44	; 0x2c
		buf->len = len;
    5aee:	81a3      	strh	r3, [r4, #12]
		listener->recv(info, &buf->b);
    5af0:	462b      	mov	r3, r5
    5af2:	f853 2b08 	ldr.w	r2, [r3], #8
    5af6:	4639      	mov	r1, r7
    5af8:	9305      	str	r3, [sp, #20]
    5afa:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
    5afc:	9b03      	ldr	r3, [sp, #12]
    5afe:	6920      	ldr	r0, [r4, #16]
    5b00:	fa10 f083 	uxtah	r0, r0, r3
	buf->len = state->len;
    5b04:	9b04      	ldr	r3, [sp, #16]
	buf->data = buf->__buf + state->offset;
    5b06:	60a0      	str	r0, [r4, #8]
	buf->len = state->len;
    5b08:	81a3      	strh	r3, [r4, #12]
Z_GENLIST_PEEK_NEXT(slist, snode)
    5b0a:	9b05      	ldr	r3, [sp, #20]
    5b0c:	2b00      	cmp	r3, #0
    5b0e:	d0a8      	beq.n	5a62 <le_adv_report+0xfa>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    5b10:	68ad      	ldr	r5, [r5, #8]
	return node->next;
    5b12:	e7a4      	b.n	5a5e <le_adv_report+0xf6>
	return set_le_scan_enable_legacy(enable);
    5b14:	4628      	mov	r0, r5
    5b16:	f7ff fc47 	bl	53a8 <set_le_scan_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    5b1a:	2800      	cmp	r0, #0
    5b1c:	d0b9      	beq.n	5a92 <le_adv_report+0x12a>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    5b1e:	231f      	movs	r3, #31
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5b20:	2100      	movs	r1, #0
    5b22:	4640      	mov	r0, r8
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    5b24:	f888 300c 	strb.w	r3, [r8, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5b28:	f001 fb54 	bl	71d4 <bt_conn_set_state>
	bt_conn_unref(conn);
    5b2c:	4640      	mov	r0, r8
    5b2e:	f00e f8d2 	bl	13cd6 <bt_conn_unref>
	bt_le_scan_update(false);
    5b32:	2000      	movs	r0, #0
    5b34:	f7ff feaa 	bl	588c <bt_le_scan_update>
    5b38:	e759      	b.n	59ee <le_adv_report+0x86>
    5b3a:	bf00      	nop
    5b3c:	000194a7 	.word	0x000194a7
    5b40:	000199f1 	.word	0x000199f1
    5b44:	20000ca0 	.word	0x20000ca0
    5b48:	20000098 	.word	0x20000098
    5b4c:	20000ca8 	.word	0x20000ca8

00005b50 <bt_data_parse>:
{
    5b50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5b52:	4604      	mov	r4, r0
    5b54:	460e      	mov	r6, r1
    5b56:	4617      	mov	r7, r2
	while (ad->len > 1) {
    5b58:	88a3      	ldrh	r3, [r4, #4]
    5b5a:	2b01      	cmp	r3, #1
    5b5c:	d90c      	bls.n	5b78 <bt_data_parse+0x28>
		len = net_buf_simple_pull_u8(ad);
    5b5e:	4620      	mov	r0, r4
    5b60:	f00f fd56 	bl	15610 <net_buf_simple_pull_u8>
		if (len == 0U) {
    5b64:	4605      	mov	r5, r0
    5b66:	b138      	cbz	r0, 5b78 <bt_data_parse+0x28>
		if (len > ad->len) {
    5b68:	88a2      	ldrh	r2, [r4, #4]
    5b6a:	b283      	uxth	r3, r0
    5b6c:	429a      	cmp	r2, r3
    5b6e:	d205      	bcs.n	5b7c <bt_data_parse+0x2c>
			BT_WARN("Malformed data");
    5b70:	2157      	movs	r1, #87	; 0x57
    5b72:	480c      	ldr	r0, [pc, #48]	; (5ba4 <bt_data_parse+0x54>)
    5b74:	f00c f9e8 	bl	11f48 <printk>
}
    5b78:	b003      	add	sp, #12
    5b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data.type = net_buf_simple_pull_u8(ad);
    5b7c:	4620      	mov	r0, r4
    5b7e:	f00f fd47 	bl	15610 <net_buf_simple_pull_u8>
		data.data = ad->data;
    5b82:	6823      	ldr	r3, [r4, #0]
		data.type = net_buf_simple_pull_u8(ad);
    5b84:	f88d 0000 	strb.w	r0, [sp]
		data.data_len = len - 1;
    5b88:	3d01      	subs	r5, #1
		if (!func(&data, user_data)) {
    5b8a:	4639      	mov	r1, r7
    5b8c:	4668      	mov	r0, sp
		data.data_len = len - 1;
    5b8e:	f88d 5001 	strb.w	r5, [sp, #1]
		data.data = ad->data;
    5b92:	9301      	str	r3, [sp, #4]
		if (!func(&data, user_data)) {
    5b94:	47b0      	blx	r6
    5b96:	2800      	cmp	r0, #0
    5b98:	d0ee      	beq.n	5b78 <bt_data_parse+0x28>
		net_buf_simple_pull(ad, len - 1);
    5b9a:	4629      	mov	r1, r5
    5b9c:	4620      	mov	r0, r4
    5b9e:	f007 fd0d 	bl	d5bc <net_buf_simple_pull>
    5ba2:	e7d9      	b.n	5b58 <bt_data_parse+0x8>
    5ba4:	000194c5 	.word	0x000194c5

00005ba8 <id_create.isra.0>:

static void id_create(u8_t id, bt_addr_le_t *addr, u8_t *irk)
    5ba8:	b530      	push	{r4, r5, lr}
    5baa:	4d17      	ldr	r5, [pc, #92]	; (5c08 <id_create.isra.0+0x60>)
    5bac:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    5bb0:	460c      	mov	r4, r1
static void id_create(u8_t id, bt_addr_le_t *addr, u8_t *irk)
    5bb2:	b085      	sub	sp, #20
    5bb4:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    5bb6:	b1b1      	cbz	r1, 5be6 <id_create.isra.0+0x3e>
    5bb8:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    5bba:	2207      	movs	r2, #7
    5bbc:	4620      	mov	r0, r4
    5bbe:	a902      	add	r1, sp, #8
    5bc0:	9302      	str	r3, [sp, #8]
    5bc2:	f8cd 300b 	str.w	r3, [sp, #11]
    5bc6:	f00d fcc3 	bl	13550 <memcmp>
    5bca:	b160      	cbz	r0, 5be6 <id_create.isra.0+0x3e>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    5bcc:	4621      	mov	r1, r4
    5bce:	4628      	mov	r0, r5
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    5bd0:	f00d fdd0 	bl	13774 <bt_addr_le_copy>
    5bd4:	480d      	ldr	r0, [pc, #52]	; (5c0c <id_create.isra.0+0x64>)
    5bd6:	f00d fdca 	bl	1376e <atomic_get>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    5bda:	0783      	lsls	r3, r0, #30
    5bdc:	d501      	bpl.n	5be2 <id_create.isra.0+0x3a>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
    5bde:	f7fe feab 	bl	4938 <bt_settings_save_id>
	}
}
    5be2:	b005      	add	sp, #20
    5be4:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
    5be6:	4668      	mov	r0, sp
    5be8:	f00d fec7 	bl	1397a <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    5bec:	4668      	mov	r0, sp
    5bee:	f7ff f9c3 	bl	4f78 <id_find>
    5bf2:	2800      	cmp	r0, #0
    5bf4:	daf7      	bge.n	5be6 <id_create.isra.0+0x3e>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    5bf6:	4669      	mov	r1, sp
    5bf8:	4628      	mov	r0, r5
    5bfa:	f00d fdbb 	bl	13774 <bt_addr_le_copy>
		if (addr) {
    5bfe:	2c00      	cmp	r4, #0
    5c00:	d0e8      	beq.n	5bd4 <id_create.isra.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    5c02:	4629      	mov	r1, r5
    5c04:	4620      	mov	r0, r4
    5c06:	e7e3      	b.n	5bd0 <id_create.isra.0+0x28>
    5c08:	20000000 	.word	0x20000000
    5c0c:	20000098 	.word	0x20000098

00005c10 <bt_send>:
	return bt_dev.drv->send(buf);
    5c10:	4b02      	ldr	r3, [pc, #8]	; (5c1c <bt_send+0xc>)
    5c12:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    5c16:	691b      	ldr	r3, [r3, #16]
    5c18:	4718      	bx	r3
    5c1a:	bf00      	nop
    5c1c:	20000000 	.word	0x20000000

00005c20 <bt_hci_cmd_send>:
{
    5c20:	b538      	push	{r3, r4, r5, lr}
    5c22:	4605      	mov	r5, r0
	if (!buf) {
    5c24:	460c      	mov	r4, r1
    5c26:	b919      	cbnz	r1, 5c30 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    5c28:	f7ff fa78 	bl	511c <bt_hci_cmd_create>
		if (!buf) {
    5c2c:	4604      	mov	r4, r0
    5c2e:	b1c0      	cbz	r0, 5c62 <bt_hci_cmd_send+0x42>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    5c30:	f640 4335 	movw	r3, #3125	; 0xc35
    5c34:	429d      	cmp	r5, r3
    5c36:	d10e      	bne.n	5c56 <bt_hci_cmd_send+0x36>
		err = bt_send(buf);
    5c38:	4620      	mov	r0, r4
    5c3a:	f7ff ffe9 	bl	5c10 <bt_send>
		if (err) {
    5c3e:	4605      	mov	r5, r0
    5c40:	b138      	cbz	r0, 5c52 <bt_hci_cmd_send+0x32>
			BT_ERR("Unable to send to driver (err %d)", err);
    5c42:	4602      	mov	r2, r0
    5c44:	2145      	movs	r1, #69	; 0x45
    5c46:	4808      	ldr	r0, [pc, #32]	; (5c68 <bt_hci_cmd_send+0x48>)
    5c48:	f00c f97e 	bl	11f48 <printk>
			net_buf_unref(buf);
    5c4c:	4620      	mov	r0, r4
    5c4e:	f007 fb85 	bl	d35c <net_buf_unref>
}
    5c52:	4628      	mov	r0, r5
    5c54:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    5c56:	4621      	mov	r1, r4
    5c58:	4804      	ldr	r0, [pc, #16]	; (5c6c <bt_hci_cmd_send+0x4c>)
    5c5a:	f007 fb4b 	bl	d2f4 <net_buf_put>
	return 0;
    5c5e:	2500      	movs	r5, #0
    5c60:	e7f7      	b.n	5c52 <bt_hci_cmd_send+0x32>
			return -ENOBUFS;
    5c62:	f06f 0536 	mvn.w	r5, #54	; 0x36
    5c66:	e7f4      	b.n	5c52 <bt_hci_cmd_send+0x32>
    5c68:	000194d9 	.word	0x000194d9
    5c6c:	20000108 	.word	0x20000108

00005c70 <report_completed_packet>:
{
    5c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5c72:	4604      	mov	r4, r0
	u16_t handle = acl(buf)->handle;
    5c74:	8ac6      	ldrh	r6, [r0, #22]
 *
 * @param buf Buffer to destroy.
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    5c76:	7980      	ldrb	r0, [r0, #6]
    5c78:	f007 f9d0 	bl	d01c <net_buf_pool_get>

	k_lifo_put(&pool->free, buf);
    5c7c:	4621      	mov	r1, r4
    5c7e:	f010 fcb7 	bl	165f0 <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    5c82:	4b24      	ldr	r3, [pc, #144]	; (5d14 <report_completed_packet+0xa4>)
    5c84:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
    5c88:	069b      	lsls	r3, r3, #26
    5c8a:	d541      	bpl.n	5d10 <report_completed_packet+0xa0>
	conn = bt_conn_lookup_index(acl(buf)->index);
    5c8c:	7d60      	ldrb	r0, [r4, #21]
    5c8e:	f001 fe95 	bl	79bc <bt_conn_lookup_index>
	if (!conn) {
    5c92:	4605      	mov	r5, r0
    5c94:	b930      	cbnz	r0, 5ca4 <report_completed_packet+0x34>
		BT_WARN("Unable to look up conn with index 0x%02x",
    5c96:	7d62      	ldrb	r2, [r4, #21]
    5c98:	2157      	movs	r1, #87	; 0x57
}
    5c9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_WARN("Unable to look up conn with index 0x%02x",
    5c9e:	481e      	ldr	r0, [pc, #120]	; (5d18 <report_completed_packet+0xa8>)
    5ca0:	f00c b952 	b.w	11f48 <printk>
	if (!bt_conn_is_handle_valid(conn)) {
    5ca4:	7b43      	ldrb	r3, [r0, #13]
struct bt_conn *bt_conn_lookup_handle(u16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	return conn->state == BT_CONN_CONNECTED ||
	       conn->state == BT_CONN_DISCONNECT ||
    5ca6:	1fda      	subs	r2, r3, #7
    5ca8:	2a01      	cmp	r2, #1
    5caa:	d90a      	bls.n	5cc2 <report_completed_packet+0x52>
    5cac:	2b01      	cmp	r3, #1
    5cae:	d008      	beq.n	5cc2 <report_completed_packet+0x52>
		BT_WARN("Not reporting packet for non-connected conn");
    5cb0:	481a      	ldr	r0, [pc, #104]	; (5d1c <report_completed_packet+0xac>)
    5cb2:	2157      	movs	r1, #87	; 0x57
    5cb4:	f00c f948 	bl	11f48 <printk>
		bt_conn_unref(conn);
    5cb8:	4628      	mov	r0, r5
}
    5cba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    5cbe:	f00e b80a 	b.w	13cd6 <bt_conn_unref>
	bt_conn_unref(conn);
    5cc2:	4628      	mov	r0, r5
    5cc4:	f00e f807 	bl	13cd6 <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
    5cc8:	2105      	movs	r1, #5
    5cca:	f640 4035 	movw	r0, #3125	; 0xc35
    5cce:	f7ff fa25 	bl	511c <bt_hci_cmd_create>
	if (!buf) {
    5cd2:	4604      	mov	r4, r0
    5cd4:	b928      	cbnz	r0, 5ce2 <report_completed_packet+0x72>
}
    5cd6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to allocate new HCI command");
    5cda:	2145      	movs	r1, #69	; 0x45
    5cdc:	4810      	ldr	r0, [pc, #64]	; (5d20 <report_completed_packet+0xb0>)
    5cde:	f00c b933 	b.w	11f48 <printk>
	cp = net_buf_add(buf, sizeof(*cp));
    5ce2:	f100 0708 	add.w	r7, r0, #8
    5ce6:	2101      	movs	r1, #1
    5ce8:	4638      	mov	r0, r7
    5cea:	f007 fca9 	bl	d640 <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
    5cee:	2501      	movs	r5, #1
	hc = net_buf_add(buf, sizeof(*hc));
    5cf0:	2104      	movs	r1, #4
	cp->num_handles = sys_cpu_to_le16(1);
    5cf2:	7005      	strb	r5, [r0, #0]
	hc = net_buf_add(buf, sizeof(*hc));
    5cf4:	4638      	mov	r0, r7
    5cf6:	f007 fca3 	bl	d640 <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
    5cfa:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
    5cfc:	8006      	strh	r6, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
    5cfe:	7085      	strb	r5, [r0, #2]
    5d00:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    5d02:	4621      	mov	r1, r4
}
    5d04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    5d08:	f640 4035 	movw	r0, #3125	; 0xc35
    5d0c:	f7ff bf88 	b.w	5c20 <bt_hci_cmd_send>
}
    5d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5d12:	bf00      	nop
    5d14:	20000000 	.word	0x20000000
    5d18:	00019500 	.word	0x00019500
    5d1c:	0001952e 	.word	0x0001952e
    5d20:	0001955f 	.word	0x0001955f

00005d24 <le_ltk_request>:
{
    5d24:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
    5d26:	6884      	ldr	r4, [r0, #8]
{
    5d28:	b087      	sub	sp, #28
	handle = sys_le16_to_cpu(evt->handle);
    5d2a:	8826      	ldrh	r6, [r4, #0]
    5d2c:	b2b7      	uxth	r7, r6
	conn = bt_conn_lookup_handle(handle);
    5d2e:	4638      	mov	r0, r7
    5d30:	f001 fb46 	bl	73c0 <bt_conn_lookup_handle>
	if (!conn) {
    5d34:	4605      	mov	r5, r0
    5d36:	b930      	cbnz	r0, 5d46 <le_ltk_request+0x22>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    5d38:	463a      	mov	r2, r7
    5d3a:	2145      	movs	r1, #69	; 0x45
    5d3c:	481f      	ldr	r0, [pc, #124]	; (5dbc <le_ltk_request+0x98>)
    5d3e:	f00c f903 	bl	11f48 <printk>
}
    5d42:	b007      	add	sp, #28
    5d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
    5d46:	af02      	add	r7, sp, #8
    5d48:	f8d4 2002 	ldr.w	r2, [r4, #2]
    5d4c:	f8d4 3006 	ldr.w	r3, [r4, #6]
    5d50:	9701      	str	r7, [sp, #4]
    5d52:	8961      	ldrh	r1, [r4, #10]
    5d54:	9100      	str	r1, [sp, #0]
    5d56:	f00f fb1a 	bl	1538e <bt_smp_request_ltk>
    5d5a:	b1f0      	cbz	r0, 5d9a <le_ltk_request+0x76>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    5d5c:	2112      	movs	r1, #18
    5d5e:	f242 001a 	movw	r0, #8218	; 0x201a
    5d62:	f7ff f9db 	bl	511c <bt_hci_cmd_create>
	if (!buf) {
    5d66:	4604      	mov	r4, r0
    5d68:	b938      	cbnz	r0, 5d7a <le_ltk_request+0x56>
		BT_ERR("Out of command buffers");
    5d6a:	2145      	movs	r1, #69	; 0x45
    5d6c:	4814      	ldr	r0, [pc, #80]	; (5dc0 <le_ltk_request+0x9c>)
    5d6e:	f00c f8eb 	bl	11f48 <printk>
	bt_conn_unref(conn);
    5d72:	4628      	mov	r0, r5
    5d74:	f00d ffaf 	bl	13cd6 <bt_conn_unref>
    5d78:	e7e3      	b.n	5d42 <le_ltk_request+0x1e>
	cp = net_buf_add(buf, sizeof(*cp));
    5d7a:	2112      	movs	r1, #18
    5d7c:	3008      	adds	r0, #8
    5d7e:	f007 fc5f 	bl	d640 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    5d82:	4639      	mov	r1, r7
    5d84:	2210      	movs	r2, #16
	cp->handle = sys_cpu_to_le16(handle);
    5d86:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    5d8a:	f00d fbf1 	bl	13570 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    5d8e:	4621      	mov	r1, r4
    5d90:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    5d94:	f7ff ff44 	bl	5c20 <bt_hci_cmd_send>
    5d98:	e7eb      	b.n	5d72 <le_ltk_request+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    5d9a:	2102      	movs	r1, #2
    5d9c:	f242 001b 	movw	r0, #8219	; 0x201b
    5da0:	f7ff f9bc 	bl	511c <bt_hci_cmd_create>
	if (!buf) {
    5da4:	4604      	mov	r4, r0
    5da6:	2800      	cmp	r0, #0
    5da8:	d0df      	beq.n	5d6a <le_ltk_request+0x46>
	cp = net_buf_add(buf, sizeof(*cp));
    5daa:	2102      	movs	r1, #2
    5dac:	3008      	adds	r0, #8
    5dae:	f007 fc47 	bl	d640 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    5db2:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
    5db4:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    5db6:	f242 001b 	movw	r0, #8219	; 0x201b
    5dba:	e7eb      	b.n	5d94 <le_ltk_request+0x70>
    5dbc:	00019053 	.word	0x00019053
    5dc0:	00019587 	.word	0x00019587

00005dc4 <conn_auto_initiate>:
{
    5dc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    5dc6:	7b43      	ldrb	r3, [r0, #13]
{
    5dc8:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    5dca:	2b07      	cmp	r3, #7
    5dcc:	d11e      	bne.n	5e0c <conn_auto_initiate+0x48>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    5dce:	1d06      	adds	r6, r0, #4
    5dd0:	4630      	mov	r0, r6
    5dd2:	f00d fccc 	bl	1376e <atomic_get>
    5dd6:	0480      	lsls	r0, r0, #18
    5dd8:	d41a      	bmi.n	5e10 <conn_auto_initiate+0x4c>
    5dda:	78e3      	ldrb	r3, [r4, #3]
    5ddc:	b123      	cbz	r3, 5de8 <conn_auto_initiate+0x24>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    5dde:	4b27      	ldr	r3, [pc, #156]	; (5e7c <conn_auto_initiate+0xb8>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    5de0:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
    5de4:	0719      	lsls	r1, r3, #28
    5de6:	d513      	bpl.n	5e10 <conn_auto_initiate+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    5de8:	2102      	movs	r1, #2
    5dea:	f242 0016 	movw	r0, #8214	; 0x2016
    5dee:	f7ff f995 	bl	511c <bt_hci_cmd_create>
	if (!buf) {
    5df2:	4605      	mov	r5, r0
    5df4:	b160      	cbz	r0, 5e10 <conn_auto_initiate+0x4c>
	cp = net_buf_add(buf, sizeof(*cp));
    5df6:	2102      	movs	r1, #2
    5df8:	3008      	adds	r0, #8
    5dfa:	f007 fc21 	bl	d640 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    5dfe:	8823      	ldrh	r3, [r4, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    5e00:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(conn->handle);
    5e02:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    5e04:	f242 0016 	movw	r0, #8214	; 0x2016
    5e08:	f7ff ff0a 	bl	5c20 <bt_hci_cmd_send>
}
    5e0c:	b002      	add	sp, #8
    5e0e:	bd70      	pop	{r4, r5, r6, pc}
    5e10:	4630      	mov	r0, r6
    5e12:	f00d fcac 	bl	1376e <atomic_get>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    5e16:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    5e1a:	4d18      	ldr	r5, [pc, #96]	; (5e7c <conn_auto_initiate+0xb8>)
    5e1c:	d113      	bne.n	5e46 <conn_auto_initiate+0x82>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    5e1e:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
    5e22:	07da      	lsls	r2, r3, #31
    5e24:	d50f      	bpl.n	5e46 <conn_auto_initiate+0x82>
		err = bt_le_set_phy(conn,
    5e26:	2202      	movs	r2, #2
    5e28:	4620      	mov	r0, r4
    5e2a:	4611      	mov	r1, r2
    5e2c:	f00d fdea 	bl	13a04 <bt_le_set_phy>
		if (!err) {
    5e30:	4602      	mov	r2, r0
    5e32:	b920      	cbnz	r0, 5e3e <conn_auto_initiate+0x7a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    5e34:	2180      	movs	r1, #128	; 0x80
    5e36:	4630      	mov	r0, r6
    5e38:	f00d fc9f 	bl	1377a <atomic_or>
			return;
    5e3c:	e7e6      	b.n	5e0c <conn_auto_initiate+0x48>
		BT_ERR("Failed to set LE PHY (%d)", err);
    5e3e:	2145      	movs	r1, #69	; 0x45
    5e40:	480f      	ldr	r0, [pc, #60]	; (5e80 <conn_auto_initiate+0xbc>)
    5e42:	f00c f881 	bl	11f48 <printk>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    5e46:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
    5e4a:	069b      	lsls	r3, r3, #26
    5e4c:	d5de      	bpl.n	5e0c <conn_auto_initiate+0x48>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    5e4e:	f10d 0106 	add.w	r1, sp, #6
    5e52:	a801      	add	r0, sp, #4
    5e54:	f7ff fa1a 	bl	528c <hci_le_read_max_data_len>
		if (!err) {
    5e58:	2800      	cmp	r0, #0
    5e5a:	d1d7      	bne.n	5e0c <conn_auto_initiate+0x48>
			err = bt_le_set_data_len(conn, tx_octets, tx_time);
    5e5c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    5e60:	4620      	mov	r0, r4
    5e62:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5e66:	f00d fdb0 	bl	139ca <bt_le_set_data_len>
			if (err) {
    5e6a:	4602      	mov	r2, r0
    5e6c:	2800      	cmp	r0, #0
    5e6e:	d0cd      	beq.n	5e0c <conn_auto_initiate+0x48>
				BT_ERR("Failed to set data len (%d)", err);
    5e70:	2145      	movs	r1, #69	; 0x45
    5e72:	4804      	ldr	r0, [pc, #16]	; (5e84 <conn_auto_initiate+0xc0>)
    5e74:	f00c f868 	bl	11f48 <printk>
    5e78:	e7c8      	b.n	5e0c <conn_auto_initiate+0x48>
    5e7a:	bf00      	nop
    5e7c:	20000000 	.word	0x20000000
    5e80:	000195a3 	.word	0x000195a3
    5e84:	000195c2 	.word	0x000195c2

00005e88 <le_phy_update_complete>:
{
    5e88:	b538      	push	{r3, r4, r5, lr}
	u16_t handle = sys_le16_to_cpu(evt->handle);
    5e8a:	6883      	ldr	r3, [r0, #8]
    5e8c:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    5e90:	4628      	mov	r0, r5
    5e92:	f001 fa95 	bl	73c0 <bt_conn_lookup_handle>
	if (!conn) {
    5e96:	4604      	mov	r4, r0
    5e98:	b930      	cbnz	r0, 5ea8 <le_phy_update_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    5e9a:	462a      	mov	r2, r5
}
    5e9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    5ea0:	2145      	movs	r1, #69	; 0x45
    5ea2:	480c      	ldr	r0, [pc, #48]	; (5ed4 <le_phy_update_complete+0x4c>)
    5ea4:	f00c b850 	b.w	11f48 <printk>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    5ea8:	1d05      	adds	r5, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5eaa:	f06f 0180 	mvn.w	r1, #128	; 0x80
    5eae:	4628      	mov	r0, r5
    5eb0:	f00d fc79 	bl	137a6 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    5eb4:	0603      	lsls	r3, r0, #24
    5eb6:	d507      	bpl.n	5ec8 <le_phy_update_complete+0x40>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    5eb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    5ebc:	4628      	mov	r0, r5
    5ebe:	f00d fc5c 	bl	1377a <atomic_or>
		conn_auto_initiate(conn);
    5ec2:	4620      	mov	r0, r4
    5ec4:	f7ff ff7e 	bl	5dc4 <conn_auto_initiate>
	bt_conn_unref(conn);
    5ec8:	4620      	mov	r0, r4
}
    5eca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    5ece:	f00d bf02 	b.w	13cd6 <bt_conn_unref>
    5ed2:	bf00      	nop
    5ed4:	00019053 	.word	0x00019053

00005ed8 <le_remote_feat_complete>:
{
    5ed8:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    5eda:	6885      	ldr	r5, [r0, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    5edc:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    5ee0:	4630      	mov	r0, r6
    5ee2:	f001 fa6d 	bl	73c0 <bt_conn_lookup_handle>
	if (!conn) {
    5ee6:	4604      	mov	r4, r0
    5ee8:	b930      	cbnz	r0, 5ef8 <le_remote_feat_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    5eea:	4632      	mov	r2, r6
}
    5eec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    5ef0:	2145      	movs	r1, #69	; 0x45
    5ef2:	480b      	ldr	r0, [pc, #44]	; (5f20 <le_remote_feat_complete+0x48>)
    5ef4:	f00c b828 	b.w	11f48 <printk>
	if (!evt->status) {
    5ef8:	782b      	ldrb	r3, [r5, #0]
    5efa:	b923      	cbnz	r3, 5f06 <le_remote_feat_complete+0x2e>
		memcpy(conn->le.features, evt->features,
    5efc:	2208      	movs	r2, #8
    5efe:	1ce9      	adds	r1, r5, #3
    5f00:	30a0      	adds	r0, #160	; 0xa0
    5f02:	f00d fb35 	bl	13570 <memcpy>
    5f06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    5f0a:	1d20      	adds	r0, r4, #4
    5f0c:	f00d fc35 	bl	1377a <atomic_or>
	conn_auto_initiate(conn);
    5f10:	4620      	mov	r0, r4
    5f12:	f7ff ff57 	bl	5dc4 <conn_auto_initiate>
	bt_conn_unref(conn);
    5f16:	4620      	mov	r0, r4
}
    5f18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    5f1c:	f00d bedb 	b.w	13cd6 <bt_conn_unref>
    5f20:	00019053 	.word	0x00019053

00005f24 <enh_conn_complete>:
{
    5f24:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	u16_t handle = sys_le16_to_cpu(evt->handle);
    5f28:	f8b0 7001 	ldrh.w	r7, [r0, #1]
{
    5f2c:	4604      	mov	r4, r0
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5f2e:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
    5f32:	485b      	ldr	r0, [pc, #364]	; (60a0 <enh_conn_complete+0x17c>)
    5f34:	f00d fc37 	bl	137a6 <atomic_and>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    5f38:	0442      	lsls	r2, r0, #17
	u16_t handle = sys_le16_to_cpu(evt->handle);
    5f3a:	fa1f f887 	uxth.w	r8, r7
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    5f3e:	d504      	bpl.n	5f4a <enh_conn_complete+0x26>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
    5f40:	2200      	movs	r2, #0
    5f42:	2002      	movs	r0, #2
    5f44:	4957      	ldr	r1, [pc, #348]	; (60a4 <enh_conn_complete+0x180>)
    5f46:	f006 ff2d 	bl	cda4 <bt_keys_foreach>
	if (evt->status) {
    5f4a:	7825      	ldrb	r5, [r4, #0]
    5f4c:	b34d      	cbz	r5, 5fa2 <enh_conn_complete+0x7e>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    5f4e:	2d02      	cmp	r5, #2
    5f50:	d121      	bne.n	5f96 <enh_conn_complete+0x72>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    5f52:	2100      	movs	r1, #0
    5f54:	2206      	movs	r2, #6
    5f56:	4608      	mov	r0, r1
    5f58:	f001 fa88 	bl	746c <bt_conn_lookup_state_le>
	if (!conn) {
    5f5c:	4604      	mov	r4, r0
    5f5e:	b948      	cbnz	r0, 5f74 <enh_conn_complete+0x50>
		BT_ERR("No pending master connection");
    5f60:	2145      	movs	r1, #69	; 0x45
    5f62:	4851      	ldr	r0, [pc, #324]	; (60a8 <enh_conn_complete+0x184>)
    5f64:	f00b fff0 	bl	11f48 <printk>
			bt_le_scan_update(false);
    5f68:	2000      	movs	r0, #0
    5f6a:	f7ff fc8f 	bl	588c <bt_le_scan_update>
}
    5f6e:	b004      	add	sp, #16
    5f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5f74:	2100      	movs	r1, #0
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
    5f76:	7305      	strb	r5, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5f78:	f001 f92c 	bl	71d4 <bt_conn_set_state>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5f7c:	1d20      	adds	r0, r4, #4
    5f7e:	f00d fbf6 	bl	1376e <atomic_get>
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    5f82:	07c3      	lsls	r3, r0, #31
    5f84:	d503      	bpl.n	5f8e <enh_conn_complete+0x6a>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    5f86:	4629      	mov	r1, r5
    5f88:	4620      	mov	r0, r4
    5f8a:	f001 f923 	bl	71d4 <bt_conn_set_state>
	bt_conn_unref(conn);
    5f8e:	4620      	mov	r0, r4
    5f90:	f00d fea1 	bl	13cd6 <bt_conn_unref>
    5f94:	e7e8      	b.n	5f68 <enh_conn_complete+0x44>
		BT_WARN("Unexpected status 0x%02x", evt->status);
    5f96:	462a      	mov	r2, r5
    5f98:	2157      	movs	r1, #87	; 0x57
    5f9a:	4844      	ldr	r0, [pc, #272]	; (60ac <enh_conn_complete+0x188>)
    5f9c:	f00b ffd4 	bl	11f48 <printk>
		return;
    5fa0:	e7e5      	b.n	5f6e <enh_conn_complete+0x4a>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    5fa2:	7923      	ldrb	r3, [r4, #4]
    5fa4:	1d26      	adds	r6, r4, #4
    5fa6:	3b02      	subs	r3, #2
    5fa8:	2b01      	cmp	r3, #1
    5faa:	d82b      	bhi.n	6004 <enh_conn_complete+0xe0>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    5fac:	4631      	mov	r1, r6
    5fae:	a802      	add	r0, sp, #8
    5fb0:	f00d fbe0 	bl	13774 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    5fb4:	f89d 3008 	ldrb.w	r3, [sp, #8]
	memcpy(dst, src, sizeof(*dst));
    5fb8:	2206      	movs	r2, #6
    5fba:	3b02      	subs	r3, #2
    5fbc:	f104 0111 	add.w	r1, r4, #17
    5fc0:	f10d 0001 	add.w	r0, sp, #1
    5fc4:	f88d 3008 	strb.w	r3, [sp, #8]
    5fc8:	f00d fad2 	bl	13570 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    5fcc:	2301      	movs	r3, #1
    5fce:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_MASTER) {
    5fd2:	78e0      	ldrb	r0, [r4, #3]
    5fd4:	b960      	cbnz	r0, 5ff0 <enh_conn_complete+0xcc>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    5fd6:	2206      	movs	r2, #6
    5fd8:	a902      	add	r1, sp, #8
    5fda:	f001 fa47 	bl	746c <bt_conn_lookup_state_le>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    5fde:	78e3      	ldrb	r3, [r4, #3]
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    5fe0:	4605      	mov	r5, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    5fe2:	b923      	cbnz	r3, 5fee <enh_conn_complete+0xca>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5fe4:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    5fe8:	482d      	ldr	r0, [pc, #180]	; (60a0 <enh_conn_complete+0x17c>)
    5fea:	f00d fbdc 	bl	137a6 <atomic_and>
	if (!conn) {
    5fee:	b9e5      	cbnz	r5, 602a <enh_conn_complete+0x106>
		BT_ERR("Unable to add new conn for handle %u", handle);
    5ff0:	4642      	mov	r2, r8
    5ff2:	2145      	movs	r1, #69	; 0x45
    5ff4:	482e      	ldr	r0, [pc, #184]	; (60b0 <enh_conn_complete+0x18c>)
    5ff6:	f00b ffa7 	bl	11f48 <printk>
		bt_hci_disconnect(handle, BT_HCI_ERR_MEM_CAPACITY_EXCEEDED);
    5ffa:	2107      	movs	r1, #7
    5ffc:	4640      	mov	r0, r8
    5ffe:	f00d fcca 	bl	13996 <bt_hci_disconnect>
		return;
    6002:	e7b4      	b.n	5f6e <enh_conn_complete+0x4a>
		u8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
    6004:	78e3      	ldrb	r3, [r4, #3]
		bt_addr_le_copy(&id_addr,
    6006:	4631      	mov	r1, r6
		u8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
    6008:	2b01      	cmp	r3, #1
    600a:	bf04      	itt	eq
    600c:	4b29      	ldreq	r3, [pc, #164]	; (60b4 <enh_conn_complete+0x190>)
    600e:	f893 5037 	ldrbeq.w	r5, [r3, #55]	; 0x37
		bt_addr_le_copy(&id_addr,
    6012:	4628      	mov	r0, r5
    6014:	f00d fc75 	bl	13902 <bt_lookup_id_addr>
    6018:	4601      	mov	r1, r0
    601a:	a802      	add	r0, sp, #8
    601c:	f00d fbaa 	bl	13774 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    6020:	4631      	mov	r1, r6
    6022:	4668      	mov	r0, sp
    6024:	f00d fba6 	bl	13774 <bt_addr_le_copy>
    6028:	e7d3      	b.n	5fd2 <enh_conn_complete+0xae>
	conn->handle = handle;
    602a:	4628      	mov	r0, r5
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    602c:	a902      	add	r1, sp, #8
	conn->handle = handle;
    602e:	f820 7b7c 	strh.w	r7, [r0], #124
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    6032:	f00d fb9f 	bl	13774 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    6036:	7e22      	ldrb	r2, [r4, #24]
    6038:	7de3      	ldrb	r3, [r4, #23]
    603a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    603e:	f8a5 3092 	strh.w	r3, [r5, #146]	; 0x92
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    6042:	7ea2      	ldrb	r2, [r4, #26]
    6044:	7e63      	ldrb	r3, [r4, #25]
    6046:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    604a:	f8a5 3098 	strh.w	r3, [r5, #152]	; 0x98
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    604e:	7f22      	ldrb	r2, [r4, #28]
    6050:	7ee3      	ldrb	r3, [r4, #27]
    6052:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->err = 0U;
    6056:	2200      	movs	r2, #0
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    6058:	f8a5 309a 	strh.w	r3, [r5, #154]	; 0x9a
	conn->role = evt->role;
    605c:	78e3      	ldrb	r3, [r4, #3]
	conn->err = 0U;
    605e:	732a      	strb	r2, [r5, #12]
	conn->role = evt->role;
    6060:	70eb      	strb	r3, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    6062:	b96b      	cbnz	r3, 6080 <enh_conn_complete+0x15c>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
    6064:	4669      	mov	r1, sp
    6066:	f105 008a 	add.w	r0, r5, #138	; 0x8a
    606a:	f00d fb83 	bl	13774 <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
    606e:	7a29      	ldrb	r1, [r5, #8]
			bt_addr_le_copy(&conn->le.init_addr,
    6070:	4b10      	ldr	r3, [pc, #64]	; (60b4 <enh_conn_complete+0x190>)
					&bt_dev.id_addr[conn->id]);
    6072:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
    6076:	4419      	add	r1, r3
    6078:	f105 0083 	add.w	r0, r5, #131	; 0x83
    607c:	f00d fb7a 	bl	13774 <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    6080:	2107      	movs	r1, #7
    6082:	4628      	mov	r0, r5
    6084:	f001 f8a6 	bl	71d4 <bt_conn_set_state>
	conn_auto_initiate(conn);
    6088:	4628      	mov	r0, r5
    608a:	f7ff fe9b 	bl	5dc4 <conn_auto_initiate>
	bt_conn_unref(conn);
    608e:	4628      	mov	r0, r5
    6090:	f00d fe21 	bl	13cd6 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    6094:	78eb      	ldrb	r3, [r5, #3]
    6096:	2b00      	cmp	r3, #0
    6098:	f47f af69 	bne.w	5f6e <enh_conn_complete+0x4a>
    609c:	e764      	b.n	5f68 <enh_conn_complete+0x44>
    609e:	bf00      	nop
    60a0:	20000098 	.word	0x20000098
    60a4:	0001395b 	.word	0x0001395b
    60a8:	000195e3 	.word	0x000195e3
    60ac:	00019605 	.word	0x00019605
    60b0:	00019623 	.word	0x00019623
    60b4:	20000000 	.word	0x20000000

000060b8 <le_conn_param_neg_reply>:
{
    60b8:	b570      	push	{r4, r5, r6, lr}
    60ba:	4606      	mov	r6, r0
    60bc:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    60be:	f242 0021 	movw	r0, #8225	; 0x2021
    60c2:	2103      	movs	r1, #3
    60c4:	f7ff f82a 	bl	511c <bt_hci_cmd_create>
	if (!buf) {
    60c8:	4604      	mov	r4, r0
    60ca:	b928      	cbnz	r0, 60d8 <le_conn_param_neg_reply+0x20>
}
    60cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    60d0:	2145      	movs	r1, #69	; 0x45
    60d2:	4808      	ldr	r0, [pc, #32]	; (60f4 <le_conn_param_neg_reply+0x3c>)
    60d4:	f00b bf38 	b.w	11f48 <printk>
	cp = net_buf_add(buf, sizeof(*cp));
    60d8:	2103      	movs	r1, #3
    60da:	3008      	adds	r0, #8
    60dc:	f007 fab0 	bl	d640 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    60e0:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    60e2:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    60e4:	4621      	mov	r1, r4
}
    60e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    60ea:	f242 0021 	movw	r0, #8225	; 0x2021
    60ee:	f7ff bd97 	b.w	5c20 <bt_hci_cmd_send>
    60f2:	bf00      	nop
    60f4:	0001964d 	.word	0x0001964d

000060f8 <le_conn_param_req>:
{
    60f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    60fa:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    60fc:	78d9      	ldrb	r1, [r3, #3]
    60fe:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    6100:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    6102:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    6106:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    610a:	7959      	ldrb	r1, [r3, #5]
    610c:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
    610e:	b2bc      	uxth	r4, r7
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    6110:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    6114:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    6118:	799a      	ldrb	r2, [r3, #6]
    611a:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
    611c:	4620      	mov	r0, r4
	param.latency = sys_le16_to_cpu(evt->latency);
    611e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    6122:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    6126:	7a1a      	ldrb	r2, [r3, #8]
    6128:	7a5b      	ldrb	r3, [r3, #9]
    612a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    612e:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    6132:	f001 f945 	bl	73c0 <bt_conn_lookup_handle>
	if (!conn) {
    6136:	4606      	mov	r6, r0
    6138:	b950      	cbnz	r0, 6150 <le_conn_param_req+0x58>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    613a:	2145      	movs	r1, #69	; 0x45
    613c:	481c      	ldr	r0, [pc, #112]	; (61b0 <le_conn_param_req+0xb8>)
    613e:	4622      	mov	r2, r4
    6140:	f00b ff02 	bl	11f48 <printk>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    6144:	2102      	movs	r1, #2
    6146:	4620      	mov	r0, r4
    6148:	f7ff ffb6 	bl	60b8 <le_conn_param_neg_reply>
}
    614c:	b003      	add	sp, #12
    614e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    6150:	4669      	mov	r1, sp
    6152:	f000 fead 	bl	6eb0 <le_param_req>
    6156:	b938      	cbnz	r0, 6168 <le_conn_param_req+0x70>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    6158:	211e      	movs	r1, #30
    615a:	4620      	mov	r0, r4
    615c:	f7ff ffac 	bl	60b8 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    6160:	4630      	mov	r0, r6
    6162:	f00d fdb8 	bl	13cd6 <bt_conn_unref>
    6166:	e7f1      	b.n	614c <le_conn_param_req+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    6168:	210e      	movs	r1, #14
    616a:	f242 0020 	movw	r0, #8224	; 0x2020
    616e:	f7fe ffd5 	bl	511c <bt_hci_cmd_create>
	if (!buf) {
    6172:	4605      	mov	r5, r0
    6174:	2800      	cmp	r0, #0
    6176:	d0f3      	beq.n	6160 <le_conn_param_req+0x68>
	cp = net_buf_add(buf, sizeof(*cp));
    6178:	210e      	movs	r1, #14
    617a:	3008      	adds	r0, #8
    617c:	f007 fa60 	bl	d640 <net_buf_simple_add>
    6180:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
    6182:	220e      	movs	r2, #14
    6184:	2100      	movs	r1, #0
    6186:	f00d fa1e 	bl	135c6 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    618a:	f8bd 3000 	ldrh.w	r3, [sp]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    618e:	4629      	mov	r1, r5
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    6190:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    6192:	f8bd 3002 	ldrh.w	r3, [sp, #2]
	cp->handle = sys_cpu_to_le16(handle);
    6196:	8027      	strh	r7, [r4, #0]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    6198:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    619a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    619e:	f242 0020 	movw	r0, #8224	; 0x2020
	cp->latency = sys_cpu_to_le16(param->latency);
    61a2:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    61a4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    61a8:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    61aa:	f7ff fd39 	bl	5c20 <bt_hci_cmd_send>
    61ae:	e7d7      	b.n	6160 <le_conn_param_req+0x68>
    61b0:	00019053 	.word	0x00019053

000061b4 <hci_tx_thread>:
{
    61b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    61b8:	f8df 812c 	ldr.w	r8, [pc, #300]	; 62e8 <hci_tx_thread+0x134>
		BT_ASSERT(err == 0);
    61bc:	f8df 9154 	ldr.w	r9, [pc, #340]	; 6314 <hci_tx_thread+0x160>
			ev_count += bt_conn_prepare_events(&events[1]);
    61c0:	f108 0a14 	add.w	sl, r8, #20
		events[0].state = K_POLL_STATE_NOT_READY;
    61c4:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    61c8:	4650      	mov	r0, sl
		events[0].state = K_POLL_STATE_NOT_READY;
    61ca:	f36f 3310 	bfc	r3, #12, #5
    61ce:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    61d2:	f000 ff8b 	bl	70ec <bt_conn_prepare_events>
    61d6:	1c46      	adds	r6, r0, #1
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    61d8:	f04f 32ff 	mov.w	r2, #4294967295
    61dc:	f04f 33ff 	mov.w	r3, #4294967295
    61e0:	4631      	mov	r1, r6
    61e2:	4841      	ldr	r0, [pc, #260]	; (62e8 <hci_tx_thread+0x134>)
    61e4:	f00b fca4 	bl	11b30 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    61e8:	b160      	cbz	r0, 6204 <hci_tx_thread+0x50>
    61ea:	f241 43f3 	movw	r3, #5363	; 0x14f3
    61ee:	464a      	mov	r2, r9
    61f0:	493e      	ldr	r1, [pc, #248]	; (62ec <hci_tx_thread+0x138>)
    61f2:	483f      	ldr	r0, [pc, #252]	; (62f0 <hci_tx_thread+0x13c>)
    61f4:	f00b fea8 	bl	11f48 <printk>
    61f8:	4040      	eors	r0, r0
    61fa:	f380 8811 	msr	BASEPRI, r0
    61fe:	f04f 0003 	mov.w	r0, #3
    6202:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    6204:	4d3b      	ldr	r5, [pc, #236]	; (62f4 <hci_tx_thread+0x140>)
{
    6206:	4f38      	ldr	r7, [pc, #224]	; (62e8 <hci_tx_thread+0x134>)
    6208:	f105 0bd0 	add.w	fp, r5, #208	; 0xd0
	for (; count; ev++, count--) {
    620c:	b916      	cbnz	r6, 6214 <hci_tx_thread+0x60>
	z_impl_k_yield();
    620e:	f00a fa95 	bl	1073c <z_impl_k_yield>
	while (1) {
    6212:	e7d7      	b.n	61c4 <hci_tx_thread+0x10>
		switch (ev->state) {
    6214:	68fa      	ldr	r2, [r7, #12]
    6216:	f3c2 3204 	ubfx	r2, r2, #12, #5
    621a:	2a01      	cmp	r2, #1
    621c:	d954      	bls.n	62c8 <hci_tx_thread+0x114>
    621e:	2a04      	cmp	r2, #4
    6220:	d15c      	bne.n	62dc <hci_tx_thread+0x128>
			if (ev->tag == BT_EVENT_CMD_TX) {
    6222:	7b3b      	ldrb	r3, [r7, #12]
    6224:	2b00      	cmp	r3, #0
    6226:	d152      	bne.n	62ce <hci_tx_thread+0x11a>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    6228:	2200      	movs	r2, #0
    622a:	2300      	movs	r3, #0
    622c:	4832      	ldr	r0, [pc, #200]	; (62f8 <hci_tx_thread+0x144>)
    622e:	f007 f803 	bl	d238 <net_buf_get>
	BT_ASSERT(buf);
    6232:	4604      	mov	r4, r0
    6234:	b960      	cbnz	r0, 6250 <hci_tx_thread+0x9c>
    6236:	f241 4395 	movw	r3, #5269	; 0x1495
    623a:	464a      	mov	r2, r9
    623c:	492f      	ldr	r1, [pc, #188]	; (62fc <hci_tx_thread+0x148>)
    623e:	482c      	ldr	r0, [pc, #176]	; (62f0 <hci_tx_thread+0x13c>)
    6240:	f00b fe82 	bl	11f48 <printk>
    6244:	4040      	eors	r0, r0
    6246:	f380 8811 	msr	BASEPRI, r0
    624a:	f04f 0003 	mov.w	r0, #3
    624e:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    6250:	f04f 33ff 	mov.w	r3, #4294967295
    6254:	f04f 32ff 	mov.w	r2, #4294967295
    6258:	4658      	mov	r0, fp
    625a:	f00a fc35 	bl	10ac8 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    625e:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
    6262:	b153      	cbz	r3, 627a <hci_tx_thread+0xc6>
		BT_ERR("Uncleared pending sent_cmd");
    6264:	2145      	movs	r1, #69	; 0x45
    6266:	4826      	ldr	r0, [pc, #152]	; (6300 <hci_tx_thread+0x14c>)
    6268:	f00b fe6e 	bl	11f48 <printk>
		net_buf_unref(bt_dev.sent_cmd);
    626c:	f8d5 00e8 	ldr.w	r0, [r5, #232]	; 0xe8
    6270:	f007 f874 	bl	d35c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    6274:	2300      	movs	r3, #0
    6276:	f8c5 30e8 	str.w	r3, [r5, #232]	; 0xe8
	bt_dev.sent_cmd = net_buf_ref(buf);
    627a:	4620      	mov	r0, r4
    627c:	f007 f8b4 	bl	d3e8 <net_buf_ref>
    6280:	f8c5 00e8 	str.w	r0, [r5, #232]	; 0xe8
	err = bt_send(buf);
    6284:	4620      	mov	r0, r4
    6286:	f7ff fcc3 	bl	5c10 <bt_send>
	if (err) {
    628a:	4602      	mov	r2, r0
    628c:	b1e0      	cbz	r0, 62c8 <hci_tx_thread+0x114>
		BT_ERR("Unable to send to driver (err %d)", err);
    628e:	2145      	movs	r1, #69	; 0x45
    6290:	481c      	ldr	r0, [pc, #112]	; (6304 <hci_tx_thread+0x150>)
    6292:	f00b fe59 	bl	11f48 <printk>
	z_impl_k_sem_give(sem);
    6296:	481c      	ldr	r0, [pc, #112]	; (6308 <hci_tx_thread+0x154>)
    6298:	f00a fbd2 	bl	10a40 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    629c:	4620      	mov	r0, r4
    629e:	f006 fec5 	bl	d02c <net_buf_id>
    62a2:	220c      	movs	r2, #12
    62a4:	4b19      	ldr	r3, [pc, #100]	; (630c <hci_tx_thread+0x158>)
    62a6:	211f      	movs	r1, #31
    62a8:	fb02 3000 	mla	r0, r2, r0, r3
    62ac:	4622      	mov	r2, r4
    62ae:	8840      	ldrh	r0, [r0, #2]
    62b0:	f7fe fd24 	bl	4cfc <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    62b4:	f8d5 00e8 	ldr.w	r0, [r5, #232]	; 0xe8
    62b8:	f007 f850 	bl	d35c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    62bc:	2300      	movs	r3, #0
		net_buf_unref(buf);
    62be:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    62c0:	f8c5 30e8 	str.w	r3, [r5, #232]	; 0xe8
		net_buf_unref(buf);
    62c4:	f007 f84a 	bl	d35c <net_buf_unref>
	for (; count; ev++, count--) {
    62c8:	3714      	adds	r7, #20
    62ca:	3e01      	subs	r6, #1
    62cc:	e79e      	b.n	620c <hci_tx_thread+0x58>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    62ce:	2b01      	cmp	r3, #1
    62d0:	d1fa      	bne.n	62c8 <hci_tx_thread+0x114>
					conn = CONTAINER_OF(ev->fifo,
    62d2:	6938      	ldr	r0, [r7, #16]
					bt_conn_process_tx(conn);
    62d4:	3834      	subs	r0, #52	; 0x34
    62d6:	f001 fabd 	bl	7854 <bt_conn_process_tx>
    62da:	e7f5      	b.n	62c8 <hci_tx_thread+0x114>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    62dc:	2157      	movs	r1, #87	; 0x57
    62de:	480c      	ldr	r0, [pc, #48]	; (6310 <hci_tx_thread+0x15c>)
    62e0:	f00b fe32 	bl	11f48 <printk>
    62e4:	e7f0      	b.n	62c8 <hci_tx_thread+0x114>
    62e6:	bf00      	nop
    62e8:	200001f8 	.word	0x200001f8
    62ec:	000192dc 	.word	0x000192dc
    62f0:	00017b50 	.word	0x00017b50
    62f4:	20000000 	.word	0x20000000
    62f8:	20000108 	.word	0x20000108
    62fc:	0001afce 	.word	0x0001afce
    6300:	0001966c 	.word	0x0001966c
    6304:	000194d9 	.word	0x000194d9
    6308:	200000d0 	.word	0x200000d0
    630c:	20000c08 	.word	0x20000c08
    6310:	0001968c 	.word	0x0001968c
    6314:	000191bb 	.word	0x000191bb

00006318 <hci_event_prio>:
{
    6318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    631c:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    631e:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    6322:	4630      	mov	r0, r6
    6324:	f00f f984 	bl	15630 <net_buf_simple_headroom>
	state->len = buf->len;
    6328:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    632c:	4605      	mov	r5, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
    632e:	f1b8 0f01 	cmp.w	r8, #1
    6332:	d80c      	bhi.n	634e <hci_event_prio+0x36>
    6334:	f641 03ee 	movw	r3, #6382	; 0x18ee
    6338:	4a1b      	ldr	r2, [pc, #108]	; (63a8 <hci_event_prio+0x90>)
    633a:	491c      	ldr	r1, [pc, #112]	; (63ac <hci_event_prio+0x94>)
    633c:	481c      	ldr	r0, [pc, #112]	; (63b0 <hci_event_prio+0x98>)
    633e:	f00b fe03 	bl	11f48 <printk>
    6342:	4040      	eors	r0, r0
    6344:	f380 8811 	msr	BASEPRI, r0
    6348:	f04f 0003 	mov.w	r0, #3
    634c:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    634e:	2102      	movs	r1, #2
    6350:	4630      	mov	r0, r6
    6352:	f007 f953 	bl	d5fc <net_buf_simple_pull_mem>
    6356:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    6358:	7800      	ldrb	r0, [r0, #0]
    635a:	f00d f9f6 	bl	1374a <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    635e:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    6360:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    6362:	d40c      	bmi.n	637e <hci_event_prio+0x66>
    6364:	f641 03f2 	movw	r3, #6386	; 0x18f2
    6368:	4a0f      	ldr	r2, [pc, #60]	; (63a8 <hci_event_prio+0x90>)
    636a:	4912      	ldr	r1, [pc, #72]	; (63b4 <hci_event_prio+0x9c>)
    636c:	4810      	ldr	r0, [pc, #64]	; (63b0 <hci_event_prio+0x98>)
    636e:	f00b fdeb 	bl	11f48 <printk>
    6372:	4040      	eors	r0, r0
    6374:	f380 8811 	msr	BASEPRI, r0
    6378:	f04f 0003 	mov.w	r0, #3
    637c:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    637e:	2305      	movs	r3, #5
    6380:	4621      	mov	r1, r4
    6382:	4a0d      	ldr	r2, [pc, #52]	; (63b8 <hci_event_prio+0xa0>)
    6384:	7838      	ldrb	r0, [r7, #0]
    6386:	f7fe fd1f 	bl	4dc8 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    638a:	07b3      	lsls	r3, r6, #30
    638c:	d507      	bpl.n	639e <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    638e:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    6390:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    6394:	fa10 f585 	uxtah	r5, r0, r5
    6398:	60a5      	str	r5, [r4, #8]
}
    639a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    639e:	4620      	mov	r0, r4
}
    63a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    63a4:	f006 bfda 	b.w	d35c <net_buf_unref>
    63a8:	000191bb 	.word	0x000191bb
    63ac:	000191ef 	.word	0x000191ef
    63b0:	00017b50 	.word	0x00017b50
    63b4:	000196b2 	.word	0x000196b2
    63b8:	00017010 	.word	0x00017010

000063bc <bt_recv>:
{
    63bc:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    63be:	7d02      	ldrb	r2, [r0, #20]
    63c0:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
    63c2:	2a01      	cmp	r2, #1
    63c4:	d007      	beq.n	63d6 <bt_recv+0x1a>
    63c6:	2a03      	cmp	r2, #3
    63c8:	d113      	bne.n	63f2 <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
    63ca:	480f      	ldr	r0, [pc, #60]	; (6408 <bt_recv+0x4c>)
    63cc:	4629      	mov	r1, r5
    63ce:	f006 ff91 	bl	d2f4 <net_buf_put>
		return 0;
    63d2:	2000      	movs	r0, #0
    63d4:	e00c      	b.n	63f0 <bt_recv+0x34>
		u8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    63d6:	6883      	ldr	r3, [r0, #8]
    63d8:	7818      	ldrb	r0, [r3, #0]
    63da:	f00d f9b6 	bl	1374a <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    63de:	07c3      	lsls	r3, r0, #31
		u8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    63e0:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    63e2:	d502      	bpl.n	63ea <bt_recv+0x2e>
			hci_event_prio(buf);
    63e4:	4628      	mov	r0, r5
    63e6:	f7ff ff97 	bl	6318 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    63ea:	f014 0002 	ands.w	r0, r4, #2
    63ee:	d1ec      	bne.n	63ca <bt_recv+0xe>
}
    63f0:	bd38      	pop	{r3, r4, r5, pc}
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    63f2:	2145      	movs	r1, #69	; 0x45
    63f4:	4805      	ldr	r0, [pc, #20]	; (640c <bt_recv+0x50>)
    63f6:	f00b fda7 	bl	11f48 <printk>
		net_buf_unref(buf);
    63fa:	4628      	mov	r0, r5
    63fc:	f006 ffae 	bl	d35c <net_buf_unref>
		return -EINVAL;
    6400:	f06f 0015 	mvn.w	r0, #21
    6404:	e7f4      	b.n	63f0 <bt_recv+0x34>
    6406:	bf00      	nop
    6408:	200000ec 	.word	0x200000ec
    640c:	000196cb 	.word	0x000196cb

00006410 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    6410:	4a08      	ldr	r2, [pc, #32]	; (6434 <bt_hci_driver_register+0x24>)
{
    6412:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    6414:	f8d2 0124 	ldr.w	r0, [r2, #292]	; 0x124
    6418:	b930      	cbnz	r0, 6428 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    641a:	68d9      	ldr	r1, [r3, #12]
    641c:	b139      	cbz	r1, 642e <bt_hci_driver_register+0x1e>
    641e:	6919      	ldr	r1, [r3, #16]
    6420:	b129      	cbz	r1, 642e <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    6422:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
	return 0;
    6426:	4770      	bx	lr
		return -EALREADY;
    6428:	f06f 0044 	mvn.w	r0, #68	; 0x44
    642c:	4770      	bx	lr
		return -EINVAL;
    642e:	f06f 0015 	mvn.w	r0, #21
}
    6432:	4770      	bx	lr
    6434:	20000000 	.word	0x20000000

00006438 <bt_finalize_init>:
{
    6438:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    643a:	2102      	movs	r1, #2
    643c:	4803      	ldr	r0, [pc, #12]	; (644c <bt_finalize_init+0x14>)
    643e:	f00d f99c 	bl	1377a <atomic_or>
}
    6442:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_scan_update(false);
    6446:	2000      	movs	r0, #0
    6448:	f7ff ba20 	b.w	588c <bt_le_scan_update>
    644c:	20000098 	.word	0x20000098

00006450 <init_work>:
{
    6450:	b510      	push	{r4, lr}
	err = bt_init();
    6452:	f7fa f815 	bl	480 <bt_init>
	if (ready_cb) {
    6456:	4b03      	ldr	r3, [pc, #12]	; (6464 <init_work+0x14>)
    6458:	681b      	ldr	r3, [r3, #0]
    645a:	b113      	cbz	r3, 6462 <init_work+0x12>
}
    645c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    6460:	4718      	bx	r3
}
    6462:	bd10      	pop	{r4, pc}
    6464:	20000c28 	.word	0x20000c28

00006468 <bt_enable>:
{
    6468:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	if (!bt_dev.drv) {
    646c:	4d35      	ldr	r5, [pc, #212]	; (6544 <bt_enable+0xdc>)
{
    646e:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    6470:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
{
    6474:	b088      	sub	sp, #32
	if (!bt_dev.drv) {
    6476:	b94b      	cbnz	r3, 648c <bt_enable+0x24>
		BT_ERR("No HCI driver registered");
    6478:	2145      	movs	r1, #69	; 0x45
    647a:	4833      	ldr	r0, [pc, #204]	; (6548 <bt_enable+0xe0>)
    647c:	f00b fd64 	bl	11f48 <printk>
		return -ENODEV;
    6480:	f06f 0412 	mvn.w	r4, #18
}
    6484:	4620      	mov	r0, r4
    6486:	b008      	add	sp, #32
    6488:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    648c:	2100      	movs	r1, #0
    648e:	f105 0098 	add.w	r0, r5, #152	; 0x98
    6492:	f00d f97d 	bl	13790 <atomic_test_and_set_bit>
    6496:	2800      	cmp	r0, #0
    6498:	d151      	bne.n	653e <bt_enable+0xd6>
		err = bt_settings_init();
    649a:	f7fe fa8f 	bl	49bc <bt_settings_init>
		if (err) {
    649e:	4604      	mov	r4, r0
    64a0:	2800      	cmp	r0, #0
    64a2:	d1ef      	bne.n	6484 <bt_enable+0x1c>
	ready_cb = cb;
    64a4:	4b29      	ldr	r3, [pc, #164]	; (654c <bt_enable+0xe4>)
    64a6:	f04f 0800 	mov.w	r8, #0
    64aa:	f04f 0900 	mov.w	r9, #0
    64ae:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    64b0:	f06f 0308 	mvn.w	r3, #8
    64b4:	e9cd 0000 	strd	r0, r0, [sp]
    64b8:	e9cd 0302 	strd	r0, r3, [sp, #8]
    64bc:	9004      	str	r0, [sp, #16]
    64be:	f44f 6280 	mov.w	r2, #1024	; 0x400
    64c2:	e9cd 8906 	strd	r8, r9, [sp, #24]
    64c6:	4b22      	ldr	r3, [pc, #136]	; (6550 <bt_enable+0xe8>)
    64c8:	4922      	ldr	r1, [pc, #136]	; (6554 <bt_enable+0xec>)
    64ca:	4823      	ldr	r0, [pc, #140]	; (6558 <bt_enable+0xf0>)
    64cc:	f00a fbf6 	bl	10cbc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    64d0:	4922      	ldr	r1, [pc, #136]	; (655c <bt_enable+0xf4>)
    64d2:	4821      	ldr	r0, [pc, #132]	; (6558 <bt_enable+0xf0>)
    64d4:	f010 f8de 	bl	16694 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    64d8:	f06f 0307 	mvn.w	r3, #7
    64dc:	f640 0298 	movw	r2, #2200	; 0x898
    64e0:	e9cd 4302 	strd	r4, r3, [sp, #8]
    64e4:	e9cd 8906 	strd	r8, r9, [sp, #24]
    64e8:	e9cd 4400 	strd	r4, r4, [sp]
    64ec:	4b1c      	ldr	r3, [pc, #112]	; (6560 <bt_enable+0xf8>)
    64ee:	491d      	ldr	r1, [pc, #116]	; (6564 <bt_enable+0xfc>)
    64f0:	9404      	str	r4, [sp, #16]
    64f2:	481d      	ldr	r0, [pc, #116]	; (6568 <bt_enable+0x100>)
    64f4:	f00a fbe2 	bl	10cbc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    64f8:	491c      	ldr	r1, [pc, #112]	; (656c <bt_enable+0x104>)
    64fa:	481b      	ldr	r0, [pc, #108]	; (6568 <bt_enable+0x100>)
    64fc:	f010 f8ca 	bl	16694 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
    6500:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    6504:	68db      	ldr	r3, [r3, #12]
    6506:	4798      	blx	r3
	if (err) {
    6508:	4604      	mov	r4, r0
    650a:	b128      	cbz	r0, 6518 <bt_enable+0xb0>
		BT_ERR("HCI driver open failed (%d)", err);
    650c:	4602      	mov	r2, r0
    650e:	2145      	movs	r1, #69	; 0x45
    6510:	4817      	ldr	r0, [pc, #92]	; (6570 <bt_enable+0x108>)
    6512:	f00b fd19 	bl	11f48 <printk>
		return err;
    6516:	e7b5      	b.n	6484 <bt_enable+0x1c>
	if (!cb) {
    6518:	b926      	cbnz	r6, 6524 <bt_enable+0xbc>
}
    651a:	b008      	add	sp, #32
    651c:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
		return bt_init();
    6520:	f7f9 bfae 	b.w	480 <bt_init>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    6524:	4601      	mov	r1, r0
    6526:	f105 0094 	add.w	r0, r5, #148	; 0x94
    652a:	f00d f931 	bl	13790 <atomic_test_and_set_bit>
    652e:	2800      	cmp	r0, #0
    6530:	d1a8      	bne.n	6484 <bt_enable+0x1c>
		k_queue_append(&work_q->queue, work);
    6532:	4810      	ldr	r0, [pc, #64]	; (6574 <bt_enable+0x10c>)
    6534:	f105 018c 	add.w	r1, r5, #140	; 0x8c
    6538:	f010 f855 	bl	165e6 <k_queue_append>
    653c:	e7a2      	b.n	6484 <bt_enable+0x1c>
		return -EALREADY;
    653e:	f06f 0444 	mvn.w	r4, #68	; 0x44
    6542:	e79f      	b.n	6484 <bt_enable+0x1c>
    6544:	20000000 	.word	0x20000000
    6548:	000197f7 	.word	0x000197f7
    654c:	20000c28 	.word	0x20000c28
    6550:	000061b5 	.word	0x000061b5
    6554:	20002e98 	.word	0x20002e98
    6558:	20000cac 	.word	0x20000cac
    655c:	00019815 	.word	0x00019815
    6560:	00004e49 	.word	0x00004e49
    6564:	20002600 	.word	0x20002600
    6568:	20000c2c 	.word	0x20000c2c
    656c:	0001981b 	.word	0x0001981b
    6570:	00019821 	.word	0x00019821
    6574:	20001dc8 	.word	0x20001dc8

00006578 <bt_get_name>:
}
    6578:	4800      	ldr	r0, [pc, #0]	; (657c <bt_get_name+0x4>)
    657a:	4770      	bx	lr
    657c:	0001934b 	.word	0x0001934b

00006580 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, u8_t *irk)
{
    6580:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6582:	460c      	mov	r4, r1
	int new_id;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    6584:	4605      	mov	r5, r0
    6586:	b918      	cbnz	r0, 6590 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    6588:	b31c      	cbz	r4, 65d2 <bt_id_create+0x52>
		return -EINVAL;
    658a:	f06f 0415 	mvn.w	r4, #21
    658e:	e01d      	b.n	65cc <bt_id_create+0x4c>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    6590:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    6592:	2207      	movs	r2, #7
    6594:	4669      	mov	r1, sp
    6596:	9300      	str	r3, [sp, #0]
    6598:	f8cd 3003 	str.w	r3, [sp, #3]
    659c:	f00c ffd8 	bl	13550 <memcmp>
    65a0:	2800      	cmp	r0, #0
    65a2:	d0f1      	beq.n	6588 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    65a4:	782b      	ldrb	r3, [r5, #0]
    65a6:	2b01      	cmp	r3, #1
    65a8:	d104      	bne.n	65b4 <bt_id_create+0x34>
    65aa:	79ab      	ldrb	r3, [r5, #6]
    65ac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    65b0:	2bc0      	cmp	r3, #192	; 0xc0
    65b2:	d004      	beq.n	65be <bt_id_create+0x3e>
			BT_ERR("Only static random identity address supported");
    65b4:	2145      	movs	r1, #69	; 0x45
    65b6:	480e      	ldr	r0, [pc, #56]	; (65f0 <bt_id_create+0x70>)
    65b8:	f00b fcc6 	bl	11f48 <printk>
			return -EINVAL;
    65bc:	e7e5      	b.n	658a <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    65be:	4628      	mov	r0, r5
    65c0:	f7fe fcda 	bl	4f78 <id_find>
    65c4:	2800      	cmp	r0, #0
    65c6:	dbdf      	blt.n	6588 <bt_id_create+0x8>
			return -EALREADY;
    65c8:	f06f 0444 	mvn.w	r4, #68	; 0x44

	new_id = bt_dev.id_count++;
	id_create(new_id, addr, irk);

	return new_id;
}
    65cc:	4620      	mov	r0, r4
    65ce:	b003      	add	sp, #12
    65d0:	bd30      	pop	{r4, r5, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    65d2:	4b08      	ldr	r3, [pc, #32]	; (65f4 <bt_id_create+0x74>)
    65d4:	79dc      	ldrb	r4, [r3, #7]
    65d6:	2c01      	cmp	r4, #1
    65d8:	d006      	beq.n	65e8 <bt_id_create+0x68>
	new_id = bt_dev.id_count++;
    65da:	1c62      	adds	r2, r4, #1
	id_create(new_id, addr, irk);
    65dc:	4629      	mov	r1, r5
    65de:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    65e0:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
    65e2:	f7ff fae1 	bl	5ba8 <id_create.isra.0>
	return new_id;
    65e6:	e7f1      	b.n	65cc <bt_id_create+0x4c>
		return -ENOMEM;
    65e8:	f06f 040b 	mvn.w	r4, #11
    65ec:	e7ee      	b.n	65cc <bt_id_create+0x4c>
    65ee:	bf00      	nop
    65f0:	00019842 	.word	0x00019842
    65f4:	20000000 	.word	0x20000000

000065f8 <bt_setup_public_id_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

void bt_setup_public_id_addr(void)
{
    65f8:	b570      	push	{r4, r5, r6, lr}
    65fa:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    65fc:	2100      	movs	r1, #0
    65fe:	f241 0009 	movw	r0, #4105	; 0x1009
    6602:	aa01      	add	r2, sp, #4
    6604:	f7fe fdd4 	bl	51b0 <bt_hci_cmd_send_sync>
	if (err) {
    6608:	4e1c      	ldr	r6, [pc, #112]	; (667c <bt_setup_public_id_addr+0x84>)
    660a:	4604      	mov	r4, r0
    660c:	b138      	cbz	r0, 661e <bt_setup_public_id_addr+0x26>
		BT_WARN("Failed to read public address");
    660e:	2157      	movs	r1, #87	; 0x57
    6610:	481b      	ldr	r0, [pc, #108]	; (6680 <bt_setup_public_id_addr+0x88>)
    6612:	f00b fc99 	bl	11f48 <printk>
	bt_addr_le_t addr;
	u8_t *irk = NULL;

	bt_dev.id_count = bt_read_public_addr(&addr);
    6616:	2300      	movs	r3, #0
    6618:	71f3      	strb	r3, [r6, #7]
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	id_create(BT_ID_DEFAULT, &addr, irk);
}
    661a:	b006      	add	sp, #24
    661c:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    661e:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
    6620:	2206      	movs	r2, #6
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    6622:	689d      	ldr	r5, [r3, #8]
    6624:	a904      	add	r1, sp, #16
    6626:	3501      	adds	r5, #1
    6628:	9004      	str	r0, [sp, #16]
    662a:	f8ad 0014 	strh.w	r0, [sp, #20]
    662e:	4628      	mov	r0, r5
    6630:	f00c ff8e 	bl	13550 <memcmp>
    6634:	b918      	cbnz	r0, 663e <bt_setup_public_id_addr+0x46>
		net_buf_unref(rsp);
    6636:	9801      	ldr	r0, [sp, #4]
    6638:	f006 fe90 	bl	d35c <net_buf_unref>
    663c:	e7eb      	b.n	6616 <bt_setup_public_id_addr+0x1e>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    663e:	4b11      	ldr	r3, [pc, #68]	; (6684 <bt_setup_public_id_addr+0x8c>)
    6640:	2206      	movs	r2, #6
    6642:	6818      	ldr	r0, [r3, #0]
    6644:	889b      	ldrh	r3, [r3, #4]
    6646:	9002      	str	r0, [sp, #8]
    6648:	a902      	add	r1, sp, #8
    664a:	4628      	mov	r0, r5
    664c:	f8ad 300c 	strh.w	r3, [sp, #12]
    6650:	f00c ff7e 	bl	13550 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    6654:	2800      	cmp	r0, #0
    6656:	d0ee      	beq.n	6636 <bt_setup_public_id_addr+0x3e>
	memcpy(dst, src, sizeof(*dst));
    6658:	4629      	mov	r1, r5
    665a:	2206      	movs	r2, #6
    665c:	f10d 0011 	add.w	r0, sp, #17
    6660:	f00c ff86 	bl	13570 <memcpy>
	net_buf_unref(rsp);
    6664:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    6666:	f88d 4010 	strb.w	r4, [sp, #16]
	net_buf_unref(rsp);
    666a:	f006 fe77 	bl	d35c <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
    666e:	2301      	movs	r3, #1
	id_create(BT_ID_DEFAULT, &addr, irk);
    6670:	4620      	mov	r0, r4
    6672:	a904      	add	r1, sp, #16
	bt_dev.id_count = bt_read_public_addr(&addr);
    6674:	71f3      	strb	r3, [r6, #7]
	id_create(BT_ID_DEFAULT, &addr, irk);
    6676:	f7ff fa97 	bl	5ba8 <id_create.isra.0>
    667a:	e7ce      	b.n	661a <bt_setup_public_id_addr+0x22>
    667c:	20000000 	.word	0x20000000
    6680:	00019875 	.word	0x00019875
    6684:	00016d43 	.word	0x00016d43

00006688 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
u8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], u8_t size)
{
    6688:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	u8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    668c:	4b1c      	ldr	r3, [pc, #112]	; (6700 <bt_read_static_addr+0x78>)
{
    668e:	4607      	mov	r7, r0
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    6690:	f893 408a 	ldrb.w	r4, [r3, #138]	; 0x8a
{
    6694:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    6696:	f014 0401 	ands.w	r4, r4, #1
    669a:	d104      	bne.n	66a6 <bt_read_static_addr+0x1e>
		BT_WARN("Read Static Addresses command not available");
    669c:	2157      	movs	r1, #87	; 0x57
    669e:	4819      	ldr	r0, [pc, #100]	; (6704 <bt_read_static_addr+0x7c>)
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
    66a0:	f00b fc52 	bl	11f48 <printk>
    66a4:	e00c      	b.n	66c0 <bt_read_static_addr+0x38>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    66a6:	2100      	movs	r1, #0
    66a8:	f64f 4009 	movw	r0, #64521	; 0xfc09
    66ac:	aa01      	add	r2, sp, #4
    66ae:	f7fe fd7f 	bl	51b0 <bt_hci_cmd_send_sync>
	if (err) {
    66b2:	4605      	mov	r5, r0
    66b4:	b140      	cbz	r0, 66c8 <bt_read_static_addr+0x40>
		BT_WARN("Failed to read static addresses");
    66b6:	2157      	movs	r1, #87	; 0x57
    66b8:	4813      	ldr	r0, [pc, #76]	; (6708 <bt_read_static_addr+0x80>)
    66ba:	f00b fc45 	bl	11f48 <printk>
    66be:	2400      	movs	r4, #0
	}

	return cnt;
}
    66c0:	4620      	mov	r0, r4
    66c2:	b002      	add	sp, #8
    66c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    66c8:	f04f 0816 	mov.w	r8, #22
	rp = (void *)rsp->data;
    66cc:	9b01      	ldr	r3, [sp, #4]
    66ce:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    66d0:	785c      	ldrb	r4, [r3, #1]
    66d2:	42b4      	cmp	r4, r6
    66d4:	bf28      	it	cs
    66d6:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    66d8:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
    66da:	42ac      	cmp	r4, r5
    66dc:	dc07      	bgt.n	66ee <bt_read_static_addr+0x66>
	net_buf_unref(rsp);
    66de:	9801      	ldr	r0, [sp, #4]
    66e0:	f006 fe3c 	bl	d35c <net_buf_unref>
	if (!cnt) {
    66e4:	2c00      	cmp	r4, #0
    66e6:	d1eb      	bne.n	66c0 <bt_read_static_addr+0x38>
		BT_WARN("No static addresses stored in controller");
    66e8:	2157      	movs	r1, #87	; 0x57
    66ea:	4808      	ldr	r0, [pc, #32]	; (670c <bt_read_static_addr+0x84>)
    66ec:	e7d8      	b.n	66a0 <bt_read_static_addr+0x18>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    66ee:	fb08 7005 	mla	r0, r8, r5, r7
    66f2:	2216      	movs	r2, #22
    66f4:	4631      	mov	r1, r6
    66f6:	f00c ff3b 	bl	13570 <memcpy>
	for (i = 0; i < cnt; i++) {
    66fa:	3501      	adds	r5, #1
    66fc:	e7ed      	b.n	66da <bt_read_static_addr+0x52>
    66fe:	bf00      	nop
    6700:	20000000 	.word	0x20000000
    6704:	00019898 	.word	0x00019898
    6708:	000198c9 	.word	0x000198c9
    670c:	000198ee 	.word	0x000198ee

00006710 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    6710:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    6712:	4d14      	ldr	r5, [pc, #80]	; (6764 <bt_setup_random_id_addr+0x54>)
{
    6714:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    6716:	79ec      	ldrb	r4, [r5, #7]
    6718:	b9f4      	cbnz	r4, 6758 <bt_setup_random_id_addr+0x48>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    671a:	2101      	movs	r1, #1
    671c:	a802      	add	r0, sp, #8
    671e:	f7ff ffb3 	bl	6688 <bt_read_static_addr>
    6722:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
    6724:	b1c0      	cbz	r0, 6758 <bt_setup_random_id_addr+0x48>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    6726:	2716      	movs	r7, #22
    6728:	e00f      	b.n	674a <bt_setup_random_id_addr+0x3a>
    672a:	ab02      	add	r3, sp, #8
    672c:	fb07 3106 	mla	r1, r7, r6, r3
    6730:	2206      	movs	r2, #6
    6732:	f10d 0001 	add.w	r0, sp, #1
    6736:	f00c ff1b 	bl	13570 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    673a:	2301      	movs	r3, #1

				id_create(i, &addr, irk);
    673c:	4669      	mov	r1, sp
    673e:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
    6740:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
    6744:	f7ff fa30 	bl	5ba8 <id_create.isra.0>
			for (u8_t i = 0; i < bt_dev.id_count; i++) {
    6748:	3401      	adds	r4, #1
    674a:	79eb      	ldrb	r3, [r5, #7]
    674c:	b2e6      	uxtb	r6, r4
    674e:	42b3      	cmp	r3, r6
    6750:	d8eb      	bhi.n	672a <bt_setup_random_id_addr+0x1a>
			}

			return 0;
    6752:	2000      	movs	r0, #0
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
    6754:	b009      	add	sp, #36	; 0x24
    6756:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
    6758:	2100      	movs	r1, #0
    675a:	4608      	mov	r0, r1
    675c:	f7ff ff10 	bl	6580 <bt_id_create>
    6760:	e7f8      	b.n	6754 <bt_setup_random_id_addr+0x44>
    6762:	bf00      	nop
    6764:	20000000 	.word	0x20000000

00006768 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    6768:	b570      	push	{r4, r5, r6, lr}
    676a:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    676c:	4828      	ldr	r0, [pc, #160]	; (6810 <bt_le_scan_start+0xa8>)
    676e:	460e      	mov	r6, r1
    6770:	f00c fffd 	bl	1376e <atomic_get>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    6774:	0781      	lsls	r1, r0, #30
    6776:	d53f      	bpl.n	67f8 <bt_le_scan_start+0x90>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    6778:	782b      	ldrb	r3, [r5, #0]
    677a:	2b01      	cmp	r3, #1
    677c:	d83f      	bhi.n	67fe <bt_le_scan_start+0x96>
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
    677e:	686b      	ldr	r3, [r5, #4]
    6780:	f033 030f 	bics.w	r3, r3, #15
    6784:	d13b      	bne.n	67fe <bt_le_scan_start+0x96>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    6786:	f643 70fc 	movw	r0, #16380	; 0x3ffc
    678a:	8929      	ldrh	r1, [r5, #8]
    678c:	1f0b      	subs	r3, r1, #4
    678e:	b29b      	uxth	r3, r3
    6790:	4283      	cmp	r3, r0
    6792:	d834      	bhi.n	67fe <bt_le_scan_start+0x96>
	if (param->window < 0x0004 || param->window > 0x4000) {
    6794:	896a      	ldrh	r2, [r5, #10]
    6796:	1f13      	subs	r3, r2, #4
    6798:	b29b      	uxth	r3, r3
    679a:	4283      	cmp	r3, r0
    679c:	d82f      	bhi.n	67fe <bt_le_scan_start+0x96>
	if (param->window > param->interval) {
    679e:	4291      	cmp	r1, r2
    67a0:	d32d      	bcc.n	67fe <bt_le_scan_start+0x96>
	if (param->type && !bt_le_scan_random_addr_check()) {
		return -EINVAL;
	}

	/* Return if active scan is already enabled */
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    67a2:	2106      	movs	r1, #6
    67a4:	481a      	ldr	r0, [pc, #104]	; (6810 <bt_le_scan_start+0xa8>)
    67a6:	f00c fff3 	bl	13790 <atomic_test_and_set_bit>
    67aa:	4603      	mov	r3, r0
    67ac:	bb50      	cbnz	r0, 6804 <bt_le_scan_start+0x9c>
    67ae:	4818      	ldr	r0, [pc, #96]	; (6810 <bt_le_scan_start+0xa8>)
    67b0:	f00c ffdd 	bl	1376e <atomic_get>
		return -EALREADY;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    67b4:	0682      	lsls	r2, r0, #26
    67b6:	d50b      	bpl.n	67d0 <bt_le_scan_start+0x68>
	return set_le_scan_enable_legacy(enable);
    67b8:	4618      	mov	r0, r3
    67ba:	f7fe fdf5 	bl	53a8 <set_le_scan_enable_legacy>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
		if (err) {
    67be:	4604      	mov	r4, r0
    67c0:	b130      	cbz	r0, 67d0 <bt_le_scan_start+0x68>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    67c2:	f06f 0140 	mvn.w	r1, #64	; 0x40
    67c6:	4812      	ldr	r0, [pc, #72]	; (6810 <bt_le_scan_start+0xa8>)
    67c8:	f00c ffed 	bl	137a6 <atomic_and>
	}

	scan_dev_found_cb = cb;

	return 0;
}
    67cc:	4620      	mov	r0, r4
    67ce:	bd70      	pop	{r4, r5, r6, pc}
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
    67d0:	686a      	ldr	r2, [r5, #4]
    67d2:	2108      	movs	r1, #8
    67d4:	480e      	ldr	r0, [pc, #56]	; (6810 <bt_le_scan_start+0xa8>)
    67d6:	f002 0201 	and.w	r2, r2, #1
    67da:	f00c ffef 	bl	137bc <atomic_set_bit_to>
		if (param->timeout) {
    67de:	89ab      	ldrh	r3, [r5, #12]
    67e0:	b99b      	cbnz	r3, 680a <bt_le_scan_start+0xa2>
		err = start_le_scan_legacy(param->type, param->interval,
    67e2:	896a      	ldrh	r2, [r5, #10]
    67e4:	8929      	ldrh	r1, [r5, #8]
    67e6:	7828      	ldrb	r0, [r5, #0]
    67e8:	f7fe fe1a 	bl	5420 <start_le_scan_legacy>
	if (err) {
    67ec:	4604      	mov	r4, r0
    67ee:	2800      	cmp	r0, #0
    67f0:	d1e7      	bne.n	67c2 <bt_le_scan_start+0x5a>
	scan_dev_found_cb = cb;
    67f2:	4b08      	ldr	r3, [pc, #32]	; (6814 <bt_le_scan_start+0xac>)
    67f4:	601e      	str	r6, [r3, #0]
	return 0;
    67f6:	e7e9      	b.n	67cc <bt_le_scan_start+0x64>
		return -EAGAIN;
    67f8:	f06f 040a 	mvn.w	r4, #10
    67fc:	e7e6      	b.n	67cc <bt_le_scan_start+0x64>
		return -EINVAL;
    67fe:	f06f 0415 	mvn.w	r4, #21
    6802:	e7e3      	b.n	67cc <bt_le_scan_start+0x64>
		return -EALREADY;
    6804:	f06f 0444 	mvn.w	r4, #68	; 0x44
    6808:	e7e0      	b.n	67cc <bt_le_scan_start+0x64>
			return -ENOTSUP;
    680a:	f06f 0422 	mvn.w	r4, #34	; 0x22
    680e:	e7dd      	b.n	67cc <bt_le_scan_start+0x64>
    6810:	20000098 	.word	0x20000098
    6814:	20000ca8 	.word	0x20000ca8

00006818 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    6818:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    681a:	f06f 0140 	mvn.w	r1, #64	; 0x40
    681e:	4807      	ldr	r0, [pc, #28]	; (683c <bt_le_scan_stop+0x24>)
    6820:	f00c ffc1 	bl	137a6 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    6824:	0643      	lsls	r3, r0, #25
    6826:	d506      	bpl.n	6836 <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
    6828:	2000      	movs	r0, #0
    682a:	4b05      	ldr	r3, [pc, #20]	; (6840 <bt_le_scan_stop+0x28>)
    682c:	6018      	str	r0, [r3, #0]
		pending_id_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
    682e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    6832:	f7ff b82b 	b.w	588c <bt_le_scan_update>
}
    6836:	f06f 0044 	mvn.w	r0, #68	; 0x44
    683a:	bd08      	pop	{r3, pc}
    683c:	20000098 	.word	0x20000098
    6840:	20000ca8 	.word	0x20000ca8

00006844 <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN,
    6844:	2801      	cmp	r0, #1
{
    6846:	b570      	push	{r4, r5, r6, lr}
    6848:	4605      	mov	r5, r0
    684a:	4616      	mov	r6, r2
    684c:	461c      	mov	r4, r3
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN,
    684e:	d01f      	beq.n	6890 <bt_buf_get_rx+0x4c>
    6850:	2803      	cmp	r0, #3
    6852:	d00e      	beq.n	6872 <bt_buf_get_rx+0x2e>
    6854:	490f      	ldr	r1, [pc, #60]	; (6894 <bt_buf_get_rx+0x50>)
    6856:	f242 03da 	movw	r3, #8410	; 0x20da
    685a:	4a0f      	ldr	r2, [pc, #60]	; (6898 <bt_buf_get_rx+0x54>)
    685c:	480f      	ldr	r0, [pc, #60]	; (689c <bt_buf_get_rx+0x58>)
    685e:	f00b fb73 	bl	11f48 <printk>
    6862:	480f      	ldr	r0, [pc, #60]	; (68a0 <bt_buf_get_rx+0x5c>)
    6864:	f00b fb70 	bl	11f48 <printk>
    6868:	f242 01da 	movw	r1, #8410	; 0x20da
    686c:	480a      	ldr	r0, [pc, #40]	; (6898 <bt_buf_get_rx+0x54>)
    686e:	f00b fe01 	bl	12474 <assert_post_action>

#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	if (type == BT_BUF_EVT) {
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
    6872:	4632      	mov	r2, r6
    6874:	4623      	mov	r3, r4
    6876:	480b      	ldr	r0, [pc, #44]	; (68a4 <bt_buf_get_rx+0x60>)
		buf = net_buf_alloc(&hci_rx_pool, timeout);
    6878:	f00e feb5 	bl	155e6 <net_buf_alloc_fixed>
    687c:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    687e:	b12c      	cbz	r4, 688c <bt_buf_get_rx+0x48>
		net_buf_reserve(buf, BT_BUF_RESERVE);
    6880:	2101      	movs	r1, #1
    6882:	f104 0008 	add.w	r0, r4, #8
    6886:	f006 fd0b 	bl	d2a0 <net_buf_simple_reserve>
	*(u8_t *)net_buf_user_data(buf) = type;
    688a:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    688c:	4620      	mov	r0, r4
    688e:	bd70      	pop	{r4, r5, r6, pc}
		buf = net_buf_alloc(&hci_rx_pool, timeout);
    6890:	4805      	ldr	r0, [pc, #20]	; (68a8 <bt_buf_get_rx+0x64>)
    6892:	e7f1      	b.n	6878 <bt_buf_get_rx+0x34>
    6894:	0001991c 	.word	0x0001991c
    6898:	000191bb 	.word	0x000191bb
    689c:	00017b50 	.word	0x00017b50
    68a0:	00019948 	.word	0x00019948
    68a4:	20000500 	.word	0x20000500
    68a8:	20000608 	.word	0x20000608

000068ac <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    68ac:	4602      	mov	r2, r0
    68ae:	460b      	mov	r3, r1
    68b0:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
    68b2:	f04f 0120 	mov.w	r1, #32
    68b6:	f3ef 8511 	mrs	r5, BASEPRI
    68ba:	f381 8811 	msr	BASEPRI, r1
    68be:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
	bt_dev.sent_cmd = NULL;
    68c2:	2000      	movs	r0, #0
	buf = bt_dev.sent_cmd;
    68c4:	490b      	ldr	r1, [pc, #44]	; (68f4 <bt_buf_get_cmd_complete+0x48>)
    68c6:	f8d1 40e8 	ldr.w	r4, [r1, #232]	; 0xe8
	bt_dev.sent_cmd = NULL;
    68ca:	f8c1 00e8 	str.w	r0, [r1, #232]	; 0xe8
	__asm__ volatile(
    68ce:	f385 8811 	msr	BASEPRI, r5
    68d2:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    68d6:	b924      	cbnz	r4, 68e2 <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    68d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    68dc:	2001      	movs	r0, #1
    68de:	f7ff bfb1 	b.w	6844 <bt_buf_get_rx>
    68e2:	2101      	movs	r1, #1
		buf->len = 0U;
    68e4:	81a0      	strh	r0, [r4, #12]
    68e6:	7521      	strb	r1, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
    68e8:	f104 0008 	add.w	r0, r4, #8
    68ec:	f006 fcd8 	bl	d2a0 <net_buf_simple_reserve>
}
    68f0:	4620      	mov	r0, r4
    68f2:	bd70      	pop	{r4, r5, r6, pc}
    68f4:	20000000 	.word	0x20000000

000068f8 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(u8_t evt, bool discardable, k_timeout_t timeout)
{
    68f8:	b570      	push	{r4, r5, r6, lr}
    68fa:	4604      	mov	r4, r0
	switch (evt) {
    68fc:	2c0f      	cmp	r4, #15
{
    68fe:	460d      	mov	r5, r1
    6900:	4610      	mov	r0, r2
    6902:	4619      	mov	r1, r3
	switch (evt) {
    6904:	d805      	bhi.n	6912 <bt_buf_get_evt+0x1a>
    6906:	2c0d      	cmp	r4, #13
    6908:	d912      	bls.n	6930 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    690a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    690e:	f7ff bfcd 	b.w	68ac <bt_buf_get_cmd_complete>
	switch (evt) {
    6912:	2c13      	cmp	r4, #19
    6914:	d10c      	bne.n	6930 <bt_buf_get_evt+0x38>
			buf = net_buf_alloc(&num_complete_pool, timeout);
    6916:	480b      	ldr	r0, [pc, #44]	; (6944 <bt_buf_get_evt+0x4c>)
			buf = net_buf_alloc(&discardable_pool, timeout);
    6918:	f00e fe65 	bl	155e6 <net_buf_alloc_fixed>
			if (buf) {
    691c:	4604      	mov	r4, r0
    691e:	b128      	cbz	r0, 692c <bt_buf_get_evt+0x34>
				net_buf_reserve(buf, BT_BUF_RESERVE);
    6920:	2101      	movs	r1, #1
    6922:	3008      	adds	r0, #8
    6924:	f006 fcbc 	bl	d2a0 <net_buf_simple_reserve>
    6928:	2301      	movs	r3, #1
    692a:	7523      	strb	r3, [r4, #20]
}
    692c:	4620      	mov	r0, r4
    692e:	bd70      	pop	{r4, r5, r6, pc}
			buf = net_buf_alloc(&discardable_pool, timeout);
    6930:	4602      	mov	r2, r0
    6932:	460b      	mov	r3, r1
		if (discardable) {
    6934:	b10d      	cbz	r5, 693a <bt_buf_get_evt+0x42>
			buf = net_buf_alloc(&discardable_pool, timeout);
    6936:	4804      	ldr	r0, [pc, #16]	; (6948 <bt_buf_get_evt+0x50>)
    6938:	e7ee      	b.n	6918 <bt_buf_get_evt+0x20>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    693a:	2001      	movs	r0, #1
}
    693c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    6940:	f7ff bf80 	b.w	6844 <bt_buf_get_rx>
    6944:	20000634 	.word	0x20000634
    6948:	20000584 	.word	0x20000584

0000694c <bt_pub_key_gen>:
}
#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_ECC)
int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    694c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    694e:	4e1b      	ldr	r6, [pc, #108]	; (69bc <bt_pub_key_gen+0x70>)
    6950:	f896 306a 	ldrb.w	r3, [r6, #106]	; 0x6a
    6954:	f003 0306 	and.w	r3, r3, #6
    6958:	2b06      	cmp	r3, #6
    695a:	d007      	beq.n	696c <bt_pub_key_gen+0x20>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
    695c:	2157      	movs	r1, #87	; 0x57
    695e:	4818      	ldr	r0, [pc, #96]	; (69c0 <bt_pub_key_gen+0x74>)
    6960:	f00b faf2 	bl	11f48 <printk>
		return -ENOTSUP;
    6964:	f06f 0422 	mvn.w	r4, #34	; 0x22
		pub_key_cb = NULL;
		return err;
	}

	return 0;
}
    6968:	4620      	mov	r0, r4
    696a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	new_cb->_next = pub_key_cb;
    696c:	4f15      	ldr	r7, [pc, #84]	; (69c4 <bt_pub_key_gen+0x78>)
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    696e:	2104      	movs	r1, #4
	new_cb->_next = pub_key_cb;
    6970:	683b      	ldr	r3, [r7, #0]
	pub_key_cb = new_cb;
    6972:	6038      	str	r0, [r7, #0]
	new_cb->_next = pub_key_cb;
    6974:	6043      	str	r3, [r0, #4]
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    6976:	f106 0098 	add.w	r0, r6, #152	; 0x98
    697a:	f00c ff09 	bl	13790 <atomic_test_and_set_bit>
    697e:	4605      	mov	r5, r0
    6980:	b9d0      	cbnz	r0, 69b8 <bt_pub_key_gen+0x6c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    6982:	f06f 0108 	mvn.w	r1, #8
    6986:	f106 0098 	add.w	r0, r6, #152	; 0x98
    698a:	f00c ff0c 	bl	137a6 <atomic_and>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    698e:	462a      	mov	r2, r5
    6990:	4629      	mov	r1, r5
    6992:	f242 0025 	movw	r0, #8229	; 0x2025
    6996:	f7fe fc0b 	bl	51b0 <bt_hci_cmd_send_sync>
	if (err) {
    699a:	4604      	mov	r4, r0
    699c:	2800      	cmp	r0, #0
    699e:	d0e3      	beq.n	6968 <bt_pub_key_gen+0x1c>
		BT_ERR("Sending LE P256 Public Key command failed");
    69a0:	2145      	movs	r1, #69	; 0x45
    69a2:	4809      	ldr	r0, [pc, #36]	; (69c8 <bt_pub_key_gen+0x7c>)
    69a4:	f00b fad0 	bl	11f48 <printk>
    69a8:	f06f 0110 	mvn.w	r1, #16
    69ac:	f106 0098 	add.w	r0, r6, #152	; 0x98
    69b0:	f00c fef9 	bl	137a6 <atomic_and>
		pub_key_cb = NULL;
    69b4:	603d      	str	r5, [r7, #0]
		return err;
    69b6:	e7d7      	b.n	6968 <bt_pub_key_gen+0x1c>
		return 0;
    69b8:	2400      	movs	r4, #0
    69ba:	e7d5      	b.n	6968 <bt_pub_key_gen+0x1c>
    69bc:	20000000 	.word	0x20000000
    69c0:	00019968 	.word	0x00019968
    69c4:	20000c24 	.word	0x20000c24
    69c8:	0001998c 	.word	0x0001998c

000069cc <bt_pub_key_get>:

const u8_t *bt_pub_key_get(void)
{
    69cc:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    69ce:	4804      	ldr	r0, [pc, #16]	; (69e0 <bt_pub_key_get+0x14>)
    69d0:	f00c fecd 	bl	1376e <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    69d4:	f010 0f08 	tst.w	r0, #8
		return pub_key;
	}

	return NULL;
}
    69d8:	4802      	ldr	r0, [pc, #8]	; (69e4 <bt_pub_key_get+0x18>)
    69da:	bf08      	it	eq
    69dc:	2000      	moveq	r0, #0
    69de:	bd08      	pop	{r3, pc}
    69e0:	20000098 	.word	0x20000098
    69e4:	20001f24 	.word	0x20001f24

000069e8 <bt_dh_key_gen>:

int bt_dh_key_gen(const u8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    69e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    69ea:	4d1a      	ldr	r5, [pc, #104]	; (6a54 <bt_dh_key_gen+0x6c>)
{
    69ec:	4606      	mov	r6, r0
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    69ee:	682b      	ldr	r3, [r5, #0]
    69f0:	b113      	cbz	r3, 69f8 <bt_dh_key_gen+0x10>
		return -EBUSY;
    69f2:	f06f 000f 	mvn.w	r0, #15
		dh_key_cb = NULL;
		return err;
	}

	return 0;
}
    69f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    69f8:	4817      	ldr	r0, [pc, #92]	; (6a58 <bt_dh_key_gen+0x70>)
    69fa:	f00c feb8 	bl	1376e <atomic_get>
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    69fe:	06c2      	lsls	r2, r0, #27
    6a00:	f3c0 1700 	ubfx	r7, r0, #4, #1
    6a04:	d4f5      	bmi.n	69f2 <bt_dh_key_gen+0xa>
    6a06:	4814      	ldr	r0, [pc, #80]	; (6a58 <bt_dh_key_gen+0x70>)
    6a08:	f00c feb1 	bl	1376e <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    6a0c:	0703      	lsls	r3, r0, #28
    6a0e:	d51d      	bpl.n	6a4c <bt_dh_key_gen+0x64>
	dh_key_cb = cb;
    6a10:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    6a12:	f242 0026 	movw	r0, #8230	; 0x2026
    6a16:	2140      	movs	r1, #64	; 0x40
    6a18:	f7fe fb80 	bl	511c <bt_hci_cmd_create>
	if (!buf) {
    6a1c:	4604      	mov	r4, r0
    6a1e:	b918      	cbnz	r0, 6a28 <bt_dh_key_gen+0x40>
		dh_key_cb = NULL;
    6a20:	6028      	str	r0, [r5, #0]
		return -ENOBUFS;
    6a22:	f06f 0036 	mvn.w	r0, #54	; 0x36
    6a26:	e7e6      	b.n	69f6 <bt_dh_key_gen+0xe>
	cp = net_buf_add(buf, sizeof(*cp));
    6a28:	2140      	movs	r1, #64	; 0x40
    6a2a:	3008      	adds	r0, #8
    6a2c:	f006 fe08 	bl	d640 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    6a30:	2240      	movs	r2, #64	; 0x40
    6a32:	4631      	mov	r1, r6
    6a34:	f00c fd9c 	bl	13570 <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    6a38:	463a      	mov	r2, r7
    6a3a:	4621      	mov	r1, r4
    6a3c:	f242 0026 	movw	r0, #8230	; 0x2026
    6a40:	f7fe fbb6 	bl	51b0 <bt_hci_cmd_send_sync>
	if (err) {
    6a44:	2800      	cmp	r0, #0
    6a46:	d0d6      	beq.n	69f6 <bt_dh_key_gen+0xe>
		dh_key_cb = NULL;
    6a48:	602f      	str	r7, [r5, #0]
		return err;
    6a4a:	e7d4      	b.n	69f6 <bt_dh_key_gen+0xe>
		return -EADDRNOTAVAIL;
    6a4c:	f06f 0030 	mvn.w	r0, #48	; 0x30
    6a50:	e7d1      	b.n	69f6 <bt_dh_key_gen+0xe>
    6a52:	bf00      	nop
    6a54:	20000c20 	.word	0x20000c20
    6a58:	20000098 	.word	0x20000098

00006a5c <prng_reseed.constprop.0>:

#include "hci_core.h"

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
    6a5c:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
	u8_t seed[32];
	s64_t extra;
	size_t i;
	int ret;

	for (i = 0; i < (sizeof(seed) / 8); i++) {
    6a60:	2500      	movs	r5, #0
static int prng_reseed(struct tc_hmac_prng_struct *h)
    6a62:	b08c      	sub	sp, #48	; 0x30
		struct bt_hci_rp_le_rand *rp;
		struct net_buf *rsp;

		ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    6a64:	2100      	movs	r1, #0
    6a66:	f242 0018 	movw	r0, #8216	; 0x2018
    6a6a:	aa02      	add	r2, sp, #8
    6a6c:	f7fe fba0 	bl	51b0 <bt_hci_cmd_send_sync>
		if (ret) {
    6a70:	4604      	mov	r4, r0
    6a72:	bb68      	cbnz	r0, 6ad0 <prng_reseed.constprop.0+0x74>
			return ret;
		}

		rp = (void *)rsp->data;
    6a74:	9b02      	ldr	r3, [sp, #8]
		memcpy(&seed[i * 8], rp->rand, 8);
    6a76:	2208      	movs	r2, #8
    6a78:	6899      	ldr	r1, [r3, #8]
    6a7a:	ab04      	add	r3, sp, #16
    6a7c:	eb03 00c5 	add.w	r0, r3, r5, lsl #3
    6a80:	3101      	adds	r1, #1
    6a82:	f00c fd75 	bl	13570 <memcpy>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
    6a86:	3501      	adds	r5, #1

		net_buf_unref(rsp);
    6a88:	9802      	ldr	r0, [sp, #8]
    6a8a:	f006 fc67 	bl	d35c <net_buf_unref>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
    6a8e:	2d04      	cmp	r5, #4
    6a90:	d1e8      	bne.n	6a64 <prng_reseed.constprop.0+0x8>
	return z_impl_k_uptime_ticks();
    6a92:	f00f fe6c 	bl	1676e <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    6a96:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    6a9a:	fba0 bc05 	umull	fp, ip, r0, r5
    6a9e:	fb05 cc01 	mla	ip, r5, r1, ip
    6aa2:	ea4f 32db 	mov.w	r2, fp, lsr #15
    6aa6:	ea42 424c 	orr.w	r2, r2, ip, lsl #17
    6aaa:	ea4f 33dc 	mov.w	r3, ip, lsr #15
	}

	extra = k_uptime_get();
    6aae:	e9cd 2302 	strd	r2, r3, [sp, #8]

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (u8_t *)&extra,
    6ab2:	2308      	movs	r3, #8
    6ab4:	2220      	movs	r2, #32
    6ab6:	9300      	str	r3, [sp, #0]
    6ab8:	4807      	ldr	r0, [pc, #28]	; (6ad8 <prng_reseed.constprop.0+0x7c>)
    6aba:	446b      	add	r3, sp
    6abc:	a904      	add	r1, sp, #16
    6abe:	f00c fc16 	bl	132ee <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
    6ac2:	b928      	cbnz	r0, 6ad0 <prng_reseed.constprop.0+0x74>
		BT_ERR("Failed to re-seed PRNG");
    6ac4:	2145      	movs	r1, #69	; 0x45
    6ac6:	4805      	ldr	r0, [pc, #20]	; (6adc <prng_reseed.constprop.0+0x80>)
    6ac8:	f00b fa3e 	bl	11f48 <printk>
    6acc:	f06f 0404 	mvn.w	r4, #4
		return -EIO;
	}

	return 0;
}
    6ad0:	4620      	mov	r0, r4
    6ad2:	b00c      	add	sp, #48	; 0x30
    6ad4:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
    6ad8:	200006c0 	.word	0x200006c0
    6adc:	000199f6 	.word	0x000199f6

00006ae0 <sys_memcpy_swap.constprop.0>:
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
{
	u8_t *pdst = (u8_t *)dst;
	const u8_t *psrc = (const u8_t *)src;

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
    6ae0:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
    6ae2:	b570      	push	{r4, r5, r6, lr}
    6ae4:	4604      	mov	r4, r0
    6ae6:	460d      	mov	r5, r1
    6ae8:	f101 0610 	add.w	r6, r1, #16
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
    6aec:	d919      	bls.n	6b22 <sys_memcpy_swap.constprop.0+0x42>
    6aee:	42b0      	cmp	r0, r6
    6af0:	d20e      	bcs.n	6b10 <sys_memcpy_swap.constprop.0+0x30>
    6af2:	490e      	ldr	r1, [pc, #56]	; (6b2c <sys_memcpy_swap.constprop.0+0x4c>)
    6af4:	f240 2317 	movw	r3, #535	; 0x217
    6af8:	4a0d      	ldr	r2, [pc, #52]	; (6b30 <sys_memcpy_swap.constprop.0+0x50>)
    6afa:	480e      	ldr	r0, [pc, #56]	; (6b34 <sys_memcpy_swap.constprop.0+0x54>)
    6afc:	f00b fa24 	bl	11f48 <printk>
    6b00:	480d      	ldr	r0, [pc, #52]	; (6b38 <sys_memcpy_swap.constprop.0+0x58>)
    6b02:	f00b fa21 	bl	11f48 <printk>
    6b06:	f240 2117 	movw	r1, #535	; 0x217
    6b0a:	4809      	ldr	r0, [pc, #36]	; (6b30 <sys_memcpy_swap.constprop.0+0x50>)
    6b0c:	f00b fcb2 	bl	12474 <assert_post_action>
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
    6b10:	4633      	mov	r3, r6
    6b12:	3c01      	subs	r4, #1
		*pdst++ = *psrc--;
    6b14:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
	for (; length > 0; length--) {
    6b18:	42ab      	cmp	r3, r5
		*pdst++ = *psrc--;
    6b1a:	f804 2f01 	strb.w	r2, [r4, #1]!
	for (; length > 0; length--) {
    6b1e:	d1f9      	bne.n	6b14 <sys_memcpy_swap.constprop.0+0x34>
	}
}
    6b20:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
    6b22:	d0e6      	beq.n	6af2 <sys_memcpy_swap.constprop.0+0x12>
    6b24:	f100 0310 	add.w	r3, r0, #16
    6b28:	4299      	cmp	r1, r3
    6b2a:	e7e1      	b.n	6af0 <sys_memcpy_swap.constprop.0+0x10>
    6b2c:	00019a3d 	.word	0x00019a3d
    6b30:	00019a12 	.word	0x00019a12
    6b34:	00017b50 	.word	0x00017b50
    6b38:	00019a94 	.word	0x00019a94

00006b3c <prng_init>:

int prng_init(void)
{
    6b3c:	b513      	push	{r0, r1, r4, lr}
	struct bt_hci_rp_le_rand *rp;
	struct net_buf *rsp;
	int ret;

	/* Check first that HCI_LE_Rand is supported */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    6b3e:	4b13      	ldr	r3, [pc, #76]	; (6b8c <prng_init+0x50>)
    6b40:	f993 3063 	ldrsb.w	r3, [r3, #99]	; 0x63
    6b44:	2b00      	cmp	r3, #0
    6b46:	da1d      	bge.n	6b84 <prng_init+0x48>
		return -ENOTSUP;
	}

	ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    6b48:	2100      	movs	r1, #0
    6b4a:	f242 0018 	movw	r0, #8216	; 0x2018
    6b4e:	aa01      	add	r2, sp, #4
    6b50:	f7fe fb2e 	bl	51b0 <bt_hci_cmd_send_sync>
	if (ret) {
    6b54:	b988      	cbnz	r0, 6b7a <prng_init+0x3e>
		return ret;
	}

	rp = (void *)rsp->data;
    6b56:	9b01      	ldr	r3, [sp, #4]

	ret = tc_hmac_prng_init(&prng, rp->rand, sizeof(rp->rand));
    6b58:	2208      	movs	r2, #8
    6b5a:	6899      	ldr	r1, [r3, #8]
    6b5c:	480c      	ldr	r0, [pc, #48]	; (6b90 <prng_init+0x54>)
    6b5e:	3101      	adds	r1, #1
    6b60:	f00c fba5 	bl	132ae <tc_hmac_prng_init>
    6b64:	4604      	mov	r4, r0

	net_buf_unref(rsp);
    6b66:	9801      	ldr	r0, [sp, #4]
    6b68:	f006 fbf8 	bl	d35c <net_buf_unref>

	if (ret == TC_CRYPTO_FAIL) {
    6b6c:	b93c      	cbnz	r4, 6b7e <prng_init+0x42>
		BT_ERR("Failed to initialize PRNG");
    6b6e:	4809      	ldr	r0, [pc, #36]	; (6b94 <prng_init+0x58>)
    6b70:	2145      	movs	r1, #69	; 0x45
    6b72:	f00b f9e9 	bl	11f48 <printk>
		return -EIO;
    6b76:	f06f 0004 	mvn.w	r0, #4
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
    6b7a:	b002      	add	sp, #8
    6b7c:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
    6b7e:	f7ff ff6d 	bl	6a5c <prng_reseed.constprop.0>
    6b82:	e7fa      	b.n	6b7a <prng_init+0x3e>
		return -ENOTSUP;
    6b84:	f06f 0022 	mvn.w	r0, #34	; 0x22
    6b88:	e7f7      	b.n	6b7a <prng_init+0x3e>
    6b8a:	bf00      	nop
    6b8c:	20000000 	.word	0x20000000
    6b90:	200006c0 	.word	0x200006c0
    6b94:	00019ac6 	.word	0x00019ac6

00006b98 <bt_rand>:

int bt_rand(void *buf, size_t len)
{
    6b98:	b538      	push	{r3, r4, r5, lr}
	int ret;

	ret = tc_hmac_prng_generate(buf, len, &prng);
    6b9a:	4a0a      	ldr	r2, [pc, #40]	; (6bc4 <bt_rand+0x2c>)
{
    6b9c:	4604      	mov	r4, r0
    6b9e:	460d      	mov	r5, r1
	ret = tc_hmac_prng_generate(buf, len, &prng);
    6ba0:	f00c fbbe 	bl	13320 <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
    6ba4:	1c43      	adds	r3, r0, #1
    6ba6:	d107      	bne.n	6bb8 <bt_rand+0x20>
		ret = prng_reseed(&prng);
    6ba8:	f7ff ff58 	bl	6a5c <prng_reseed.constprop.0>
		if (ret) {
    6bac:	b948      	cbnz	r0, 6bc2 <bt_rand+0x2a>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
    6bae:	4629      	mov	r1, r5
    6bb0:	4620      	mov	r0, r4
    6bb2:	4a04      	ldr	r2, [pc, #16]	; (6bc4 <bt_rand+0x2c>)
    6bb4:	f00c fbb4 	bl	13320 <tc_hmac_prng_generate>
	}

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
    6bb8:	2801      	cmp	r0, #1
    6bba:	bf14      	ite	ne
    6bbc:	f06f 0004 	mvnne.w	r0, #4
    6bc0:	2000      	moveq	r0, #0
	}

	return -EIO;
}
    6bc2:	bd38      	pop	{r3, r4, r5, pc}
    6bc4:	200006c0 	.word	0x200006c0

00006bc8 <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    6bc8:	2300      	movs	r3, #0
{
    6bca:	4601      	mov	r1, r0
	tx->user_data = NULL;
    6bcc:	e9c0 3301 	strd	r3, r3, [r0, #4]
	tx->pending_no_cb = 0U;
    6bd0:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    6bd2:	4801      	ldr	r0, [pc, #4]	; (6bd8 <tx_free+0x10>)
    6bd4:	f00f bd07 	b.w	165e6 <k_queue_append>
    6bd8:	200004e4 	.word	0x200004e4

00006bdc <notify_connected>:
{
    6bdc:	b538      	push	{r3, r4, r5, lr}
    6bde:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    6be0:	4b08      	ldr	r3, [pc, #32]	; (6c04 <notify_connected+0x28>)
    6be2:	681d      	ldr	r5, [r3, #0]
    6be4:	7b21      	ldrb	r1, [r4, #12]
    6be6:	b92d      	cbnz	r5, 6bf4 <notify_connected+0x18>
	if (!conn->err) {
    6be8:	b951      	cbnz	r1, 6c00 <notify_connected+0x24>
		bt_gatt_connected(conn);
    6bea:	4620      	mov	r0, r4
}
    6bec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
    6bf0:	f004 bc8a 	b.w	b508 <bt_gatt_connected>
		if (cb->connected) {
    6bf4:	682b      	ldr	r3, [r5, #0]
    6bf6:	b10b      	cbz	r3, 6bfc <notify_connected+0x20>
			cb->connected(conn, conn->err);
    6bf8:	4620      	mov	r0, r4
    6bfa:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    6bfc:	69ad      	ldr	r5, [r5, #24]
    6bfe:	e7f1      	b.n	6be4 <notify_connected+0x8>
}
    6c00:	bd38      	pop	{r3, r4, r5, pc}
    6c02:	bf00      	nop
    6c04:	20000d24 	.word	0x20000d24

00006c08 <send_frag>:
	return 0;
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    6c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6c0c:	4604      	mov	r4, r0
    6c0e:	460e      	mov	r6, r1
    6c10:	4691      	mov	r9, r2
    6c12:	461f      	mov	r7, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    6c14:	694d      	ldr	r5, [r1, #20]
	return z_impl_k_sem_take(sem, timeout);
    6c16:	f04f 33ff 	mov.w	r3, #4294967295
    6c1a:	f04f 32ff 	mov.w	r2, #4294967295
    6c1e:	4847      	ldr	r0, [pc, #284]	; (6d3c <send_frag+0x134>)
    6c20:	f009 ff52 	bl	10ac8 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    6c24:	7b63      	ldrb	r3, [r4, #13]
    6c26:	2b07      	cmp	r3, #7
    6c28:	d148      	bne.n	6cbc <send_frag+0xb4>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    6c2a:	2104      	movs	r1, #4
    6c2c:	f106 0008 	add.w	r0, r6, #8
    6c30:	f006 fca2 	bl	d578 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    6c34:	8822      	ldrh	r2, [r4, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    6c36:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    6c38:	ea42 3209 	orr.w	r2, r2, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    6c3c:	3b04      	subs	r3, #4
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    6c3e:	8002      	strh	r2, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    6c40:	8043      	strh	r3, [r0, #2]
	__asm__ volatile(
    6c42:	f04f 0320 	mov.w	r3, #32
    6c46:	f3ef 8211 	mrs	r2, BASEPRI
    6c4a:	f383 8811 	msr	BASEPRI, r3
    6c4e:	f3bf 8f6f 	isb	sy

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
    6c52:	2d00      	cmp	r5, #0
    6c54:	d044      	beq.n	6ce0 <send_frag+0xd8>
	parent->next = child;
    6c56:	2300      	movs	r3, #0
    6c58:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    6c5a:	69a3      	ldr	r3, [r4, #24]
    6c5c:	2b00      	cmp	r3, #0
    6c5e:	d13c      	bne.n	6cda <send_frag+0xd2>
	list->head = node;
    6c60:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    6c64:	f382 8811 	msr	BASEPRI, r2
    6c68:	f3bf 8f6f 	isb	sy
    6c6c:	2302      	movs	r3, #2
	}
	irq_unlock(key);

	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	err = bt_send(buf);
    6c6e:	4630      	mov	r0, r6
    6c70:	7533      	strb	r3, [r6, #20]
    6c72:	f7fe ffcd 	bl	5c10 <bt_send>
	if (err) {
    6c76:	4602      	mov	r2, r0
    6c78:	2800      	cmp	r0, #0
    6c7a:	d05c      	beq.n	6d36 <send_frag+0x12e>
		BT_ERR("Unable to send to driver (err %d)", err);
    6c7c:	2145      	movs	r1, #69	; 0x45
    6c7e:	4830      	ldr	r0, [pc, #192]	; (6d40 <send_frag+0x138>)
    6c80:	f00b f962 	bl	11f48 <printk>
	__asm__ volatile(
    6c84:	f04f 0320 	mov.w	r3, #32
    6c88:	f3ef 8911 	mrs	r9, BASEPRI
    6c8c:	f383 8811 	msr	BASEPRI, r3
    6c90:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
    6c94:	2d00      	cmp	r5, #0
    6c96:	d039      	beq.n	6d0c <send_frag+0x104>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6c98:	2200      	movs	r2, #0
    6c9a:	6963      	ldr	r3, [r4, #20]
    6c9c:	b153      	cbz	r3, 6cb4 <send_frag+0xac>
    6c9e:	429d      	cmp	r5, r3
    6ca0:	d131      	bne.n	6d06 <send_frag+0xfe>
Z_GENLIST_REMOVE(slist, snode)
    6ca2:	682b      	ldr	r3, [r5, #0]
    6ca4:	bb4a      	cbnz	r2, 6cfa <send_frag+0xf2>
    6ca6:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
    6ca8:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    6caa:	4295      	cmp	r5, r2
    6cac:	d100      	bne.n	6cb0 <send_frag+0xa8>
	list->tail = node;
    6cae:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    6cb0:	2300      	movs	r3, #0
    6cb2:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    6cb4:	f389 8811 	msr	BASEPRI, r9
    6cb8:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    6cbc:	481f      	ldr	r0, [pc, #124]	; (6d3c <send_frag+0x134>)
    6cbe:	f009 febf 	bl	10a40 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
    6cc2:	b115      	cbz	r5, 6cca <send_frag+0xc2>
		tx_free(tx);
    6cc4:	4628      	mov	r0, r5
    6cc6:	f7ff ff7f 	bl	6bc8 <tx_free>
	}

	if (always_consume) {
    6cca:	b11f      	cbz	r7, 6cd4 <send_frag+0xcc>
		net_buf_unref(buf);
    6ccc:	4630      	mov	r0, r6
    6cce:	f006 fb45 	bl	d35c <net_buf_unref>
	}
	return false;
    6cd2:	2700      	movs	r7, #0
}
    6cd4:	4638      	mov	r0, r7
    6cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6cda:	601d      	str	r5, [r3, #0]
	list->tail = node;
    6cdc:	61a5      	str	r5, [r4, #24]
}
    6cde:	e7c1      	b.n	6c64 <send_frag+0x5c>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
    6ce0:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
    6ce2:	b133      	cbz	r3, 6cf2 <send_frag+0xea>
			pending_no_cb = &tail_tx->pending_no_cb;
    6ce4:	f103 080c 	add.w	r8, r3, #12
    6ce8:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    6cea:	3301      	adds	r3, #1
    6cec:	f8c8 3000 	str.w	r3, [r8]
    6cf0:	e7b8      	b.n	6c64 <send_frag+0x5c>
			pending_no_cb = &conn->pending_no_cb;
    6cf2:	69e3      	ldr	r3, [r4, #28]
    6cf4:	f104 081c 	add.w	r8, r4, #28
    6cf8:	e7f7      	b.n	6cea <send_frag+0xe2>
	parent->next = child;
    6cfa:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    6cfc:	69a3      	ldr	r3, [r4, #24]
    6cfe:	429d      	cmp	r5, r3
	list->tail = node;
    6d00:	bf08      	it	eq
    6d02:	61a2      	streq	r2, [r4, #24]
}
    6d04:	e7d4      	b.n	6cb0 <send_frag+0xa8>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    6d06:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6d08:	681b      	ldr	r3, [r3, #0]
    6d0a:	e7c7      	b.n	6c9c <send_frag+0x94>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
    6d0c:	f8d8 3000 	ldr.w	r3, [r8]
    6d10:	b95b      	cbnz	r3, 6d2a <send_frag+0x122>
    6d12:	490c      	ldr	r1, [pc, #48]	; (6d44 <send_frag+0x13c>)
    6d14:	480c      	ldr	r0, [pc, #48]	; (6d48 <send_frag+0x140>)
    6d16:	f240 5371 	movw	r3, #1393	; 0x571
    6d1a:	4a0c      	ldr	r2, [pc, #48]	; (6d4c <send_frag+0x144>)
    6d1c:	f00b f914 	bl	11f48 <printk>
    6d20:	f240 5171 	movw	r1, #1393	; 0x571
    6d24:	4809      	ldr	r0, [pc, #36]	; (6d4c <send_frag+0x144>)
    6d26:	f00b fba5 	bl	12474 <assert_post_action>
			(*pending_no_cb)--;
    6d2a:	f8d8 3000 	ldr.w	r3, [r8]
    6d2e:	3b01      	subs	r3, #1
    6d30:	f8c8 3000 	str.w	r3, [r8]
    6d34:	e7be      	b.n	6cb4 <send_frag+0xac>
	return true;
    6d36:	2701      	movs	r7, #1
    6d38:	e7cc      	b.n	6cd4 <send_frag+0xcc>
    6d3a:	bf00      	nop
    6d3c:	200000b4 	.word	0x200000b4
    6d40:	000194d9 	.word	0x000194d9
    6d44:	00019b1f 	.word	0x00019b1f
    6d48:	00017b50 	.word	0x00017b50
    6d4c:	00019aef 	.word	0x00019aef

00006d50 <conn_update_timeout>:
{
    6d50:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    6d52:	f810 3c4f 	ldrb.w	r3, [r0, #-79]
{
    6d56:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED) {
    6d58:	b9a3      	cbnz	r3, 6d84 <conn_update_timeout+0x34>
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, update_work);
    6d5a:	f1a0 065c 	sub.w	r6, r0, #92	; 0x5c
		bt_l2cap_disconnected(conn);
    6d5e:	4630      	mov	r0, r6
    6d60:	f00d f904 	bl	13f6c <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    6d64:	4b12      	ldr	r3, [pc, #72]	; (6db0 <conn_update_timeout+0x60>)
    6d66:	681d      	ldr	r5, [r3, #0]
    6d68:	b925      	cbnz	r5, 6d74 <conn_update_timeout+0x24>
	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_val_t old = atomic_dec(&conn->ref);
    6d6a:	1f20      	subs	r0, r4, #4
}
    6d6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	atomic_val_t old = atomic_dec(&conn->ref);
    6d70:	f00c bee6 	b.w	13b40 <atomic_dec>
		if (cb->disconnected) {
    6d74:	686b      	ldr	r3, [r5, #4]
    6d76:	b11b      	cbz	r3, 6d80 <conn_update_timeout+0x30>
			cb->disconnected(conn, conn->err);
    6d78:	4630      	mov	r0, r6
    6d7a:	f814 1c50 	ldrb.w	r1, [r4, #-80]
    6d7e:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    6d80:	69ad      	ldr	r5, [r5, #24]
    6d82:	e7f1      	b.n	6d68 <conn_update_timeout+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
    6d84:	f810 3c5a 	ldrb.w	r3, [r0, #-90]
    6d88:	2b01      	cmp	r3, #1
    6d8a:	d110      	bne.n	6dae <conn_update_timeout+0x5e>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    6d8c:	f810 3c59 	ldrb.w	r3, [r0, #-89]
    6d90:	b91b      	cbnz	r3, 6d9a <conn_update_timeout+0x4a>
}
    6d92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_le_create_conn_cancel();
    6d96:	f7fe bbfd 	b.w	5594 <bt_le_create_conn_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6d9a:	f1a0 0458 	sub.w	r4, r0, #88	; 0x58
    6d9e:	e8d4 3fef 	ldaex	r3, [r4]
    6da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6da6:	e8c4 3fe2 	stlex	r2, r3, [r4]
    6daa:	2a00      	cmp	r2, #0
    6dac:	d1f7      	bne.n	6d9e <conn_update_timeout+0x4e>
}
    6dae:	bd70      	pop	{r4, r5, r6, pc}
    6db0:	20000d24 	.word	0x20000d24

00006db4 <conn_cleanup>:
{
    6db4:	b570      	push	{r4, r5, r6, lr}
    6db6:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    6db8:	f100 0634 	add.w	r6, r0, #52	; 0x34
    6dbc:	2200      	movs	r2, #0
    6dbe:	2300      	movs	r3, #0
    6dc0:	4630      	mov	r0, r6
    6dc2:	f006 fa39 	bl	d238 <net_buf_get>
    6dc6:	4605      	mov	r5, r0
    6dc8:	bb50      	cbnz	r0, 6e20 <conn_cleanup+0x6c>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
    6dca:	6963      	ldr	r3, [r4, #20]
    6dcc:	b173      	cbz	r3, 6dec <conn_cleanup+0x38>
    6dce:	4918      	ldr	r1, [pc, #96]	; (6e30 <conn_cleanup+0x7c>)
    6dd0:	f240 53df 	movw	r3, #1503	; 0x5df
    6dd4:	4a17      	ldr	r2, [pc, #92]	; (6e34 <conn_cleanup+0x80>)
    6dd6:	4818      	ldr	r0, [pc, #96]	; (6e38 <conn_cleanup+0x84>)
    6dd8:	f00b f8b6 	bl	11f48 <printk>
    6ddc:	4817      	ldr	r0, [pc, #92]	; (6e3c <conn_cleanup+0x88>)
    6dde:	f00b f8b3 	bl	11f48 <printk>
    6de2:	f240 51df 	movw	r1, #1503	; 0x5df
    6de6:	4813      	ldr	r0, [pc, #76]	; (6e34 <conn_cleanup+0x80>)
    6de8:	f00b fb44 	bl	12474 <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
    6dec:	69e3      	ldr	r3, [r4, #28]
    6dee:	b15b      	cbz	r3, 6e08 <conn_cleanup+0x54>
    6df0:	4913      	ldr	r1, [pc, #76]	; (6e40 <conn_cleanup+0x8c>)
    6df2:	4811      	ldr	r0, [pc, #68]	; (6e38 <conn_cleanup+0x84>)
    6df4:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
    6df8:	4a0e      	ldr	r2, [pc, #56]	; (6e34 <conn_cleanup+0x80>)
    6dfa:	f00b f8a5 	bl	11f48 <printk>
    6dfe:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
    6e02:	480c      	ldr	r0, [pc, #48]	; (6e34 <conn_cleanup+0x80>)
    6e04:	f00b fb36 	bl	12474 <assert_post_action>
	bt_conn_reset_rx_state(conn);
    6e08:	4620      	mov	r0, r4
    6e0a:	f00c fe8e 	bl	13b2a <bt_conn_reset_rx_state>
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					k_timeout_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    6e0e:	f104 015c 	add.w	r1, r4, #92	; 0x5c
    6e12:	2200      	movs	r2, #0
}
    6e14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6e18:	2300      	movs	r3, #0
    6e1a:	480a      	ldr	r0, [pc, #40]	; (6e44 <conn_cleanup+0x90>)
    6e1c:	f00a b874 	b.w	10f08 <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
    6e20:	6968      	ldr	r0, [r5, #20]
    6e22:	b108      	cbz	r0, 6e28 <conn_cleanup+0x74>
			tx_free(tx_data(buf)->tx);
    6e24:	f7ff fed0 	bl	6bc8 <tx_free>
		net_buf_unref(buf);
    6e28:	4628      	mov	r0, r5
    6e2a:	f006 fa97 	bl	d35c <net_buf_unref>
    6e2e:	e7c5      	b.n	6dbc <conn_cleanup+0x8>
    6e30:	00019b32 	.word	0x00019b32
    6e34:	00019aef 	.word	0x00019aef
    6e38:	00017b50 	.word	0x00017b50
    6e3c:	00019b58 	.word	0x00019b58
    6e40:	00019b6d 	.word	0x00019b6d
    6e44:	20001dc8 	.word	0x20001dc8

00006e48 <bt_conn_get_pkts>:
}
    6e48:	4800      	ldr	r0, [pc, #0]	; (6e4c <bt_conn_get_pkts+0x4>)
    6e4a:	4770      	bx	lr
    6e4c:	200000b4 	.word	0x200000b4

00006e50 <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    6e50:	1d03      	adds	r3, r0, #4
{
    6e52:	b570      	push	{r4, r5, r6, lr}
    6e54:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    6e56:	4618      	mov	r0, r3
    6e58:	f00c fe64 	bl	13b24 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    6e5c:	0582      	lsls	r2, r0, #22
    6e5e:	d515      	bpl.n	6e8c <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
    6e60:	f8b4 2092 	ldrh.w	r2, [r4, #146]	; 0x92
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    6e64:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    6e68:	4291      	cmp	r1, r2
    6e6a:	d80f      	bhi.n	6e8c <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
    6e6c:	f8b4 1096 	ldrh.w	r1, [r4, #150]	; 0x96
    6e70:	4291      	cmp	r1, r2
    6e72:	d30b      	bcc.n	6e8c <notify_le_param_updated+0x3c>
	    conn->le.latency == conn->le.pending_latency &&
    6e74:	e9d4 1226 	ldrd	r1, r2, [r4, #152]	; 0x98
    6e78:	4291      	cmp	r1, r2
    6e7a:	d107      	bne.n	6e8c <notify_le_param_updated+0x3c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6e7c:	e8d3 2fef 	ldaex	r2, [r3]
    6e80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    6e84:	e8c3 2fe1 	stlex	r1, r2, [r3]
    6e88:	2900      	cmp	r1, #0
    6e8a:	d1f7      	bne.n	6e7c <notify_le_param_updated+0x2c>
	for (cb = callback_list; cb; cb = cb->_next) {
    6e8c:	4b07      	ldr	r3, [pc, #28]	; (6eac <notify_le_param_updated+0x5c>)
    6e8e:	681d      	ldr	r5, [r3, #0]
    6e90:	b905      	cbnz	r5, 6e94 <notify_le_param_updated+0x44>
}
    6e92:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    6e94:	68ee      	ldr	r6, [r5, #12]
    6e96:	b13e      	cbz	r6, 6ea8 <notify_le_param_updated+0x58>
			cb->le_param_updated(conn, conn->le.interval,
    6e98:	4620      	mov	r0, r4
    6e9a:	f8b4 309a 	ldrh.w	r3, [r4, #154]	; 0x9a
    6e9e:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
    6ea2:	f8b4 1092 	ldrh.w	r1, [r4, #146]	; 0x92
    6ea6:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    6ea8:	69ad      	ldr	r5, [r5, #24]
    6eaa:	e7f1      	b.n	6e90 <notify_le_param_updated+0x40>
    6eac:	20000d24 	.word	0x20000d24

00006eb0 <le_param_req>:
{
    6eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6eb2:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    6eb4:	4608      	mov	r0, r1
{
    6eb6:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    6eb8:	f00c fd2f 	bl	1391a <bt_le_conn_params_valid>
    6ebc:	4604      	mov	r4, r0
    6ebe:	b910      	cbnz	r0, 6ec6 <le_param_req+0x16>
		return false;
    6ec0:	2400      	movs	r4, #0
}
    6ec2:	4620      	mov	r0, r4
    6ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    6ec6:	4b09      	ldr	r3, [pc, #36]	; (6eec <le_param_req+0x3c>)
    6ec8:	681e      	ldr	r6, [r3, #0]
    6eca:	2e00      	cmp	r6, #0
    6ecc:	d0f9      	beq.n	6ec2 <le_param_req+0x12>
		if (!cb->le_param_req) {
    6ece:	68b3      	ldr	r3, [r6, #8]
    6ed0:	b90b      	cbnz	r3, 6ed6 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    6ed2:	69b6      	ldr	r6, [r6, #24]
    6ed4:	e7f9      	b.n	6eca <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    6ed6:	4629      	mov	r1, r5
    6ed8:	4638      	mov	r0, r7
    6eda:	4798      	blx	r3
    6edc:	2800      	cmp	r0, #0
    6ede:	d0ef      	beq.n	6ec0 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    6ee0:	4628      	mov	r0, r5
    6ee2:	f00c fd1a 	bl	1391a <bt_le_conn_params_valid>
    6ee6:	2800      	cmp	r0, #0
    6ee8:	d1f3      	bne.n	6ed2 <le_param_req+0x22>
    6eea:	e7e9      	b.n	6ec0 <le_param_req+0x10>
    6eec:	20000d24 	.word	0x20000d24

00006ef0 <bt_conn_identity_resolved>:
{
    6ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->role == BT_HCI_ROLE_MASTER) {
    6ef2:	78c3      	ldrb	r3, [r0, #3]
{
    6ef4:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
    6ef6:	b93b      	cbnz	r3, 6f08 <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
    6ef8:	f100 068a 	add.w	r6, r0, #138	; 0x8a
	for (cb = callback_list; cb; cb = cb->_next) {
    6efc:	4b08      	ldr	r3, [pc, #32]	; (6f20 <bt_conn_identity_resolved+0x30>)
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    6efe:	f104 077c 	add.w	r7, r4, #124	; 0x7c
	for (cb = callback_list; cb; cb = cb->_next) {
    6f02:	681d      	ldr	r5, [r3, #0]
    6f04:	b91d      	cbnz	r5, 6f0e <bt_conn_identity_resolved+0x1e>
}
    6f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
    6f08:	f100 0683 	add.w	r6, r0, #131	; 0x83
    6f0c:	e7f6      	b.n	6efc <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
    6f0e:	692b      	ldr	r3, [r5, #16]
    6f10:	b11b      	cbz	r3, 6f1a <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    6f12:	463a      	mov	r2, r7
    6f14:	4631      	mov	r1, r6
    6f16:	4620      	mov	r0, r4
    6f18:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    6f1a:	69ad      	ldr	r5, [r5, #24]
    6f1c:	e7f2      	b.n	6f04 <bt_conn_identity_resolved+0x14>
    6f1e:	bf00      	nop
    6f20:	20000d24 	.word	0x20000d24

00006f24 <bt_conn_security_changed>:
{
    6f24:	b570      	push	{r4, r5, r6, lr}
    6f26:	4605      	mov	r5, r0
    6f28:	4616      	mov	r6, r2
	bt_l2cap_security_changed(conn, hci_err);
    6f2a:	f00d f8e1 	bl	140f0 <bt_l2cap_security_changed>
	for (cb = callback_list; cb; cb = cb->_next) {
    6f2e:	4b06      	ldr	r3, [pc, #24]	; (6f48 <bt_conn_security_changed+0x24>)
    6f30:	681c      	ldr	r4, [r3, #0]
    6f32:	b904      	cbnz	r4, 6f36 <bt_conn_security_changed+0x12>
}
    6f34:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->security_changed) {
    6f36:	6963      	ldr	r3, [r4, #20]
    6f38:	b11b      	cbz	r3, 6f42 <bt_conn_security_changed+0x1e>
			cb->security_changed(conn, conn->sec_level, err);
    6f3a:	4632      	mov	r2, r6
    6f3c:	4628      	mov	r0, r5
    6f3e:	7a69      	ldrb	r1, [r5, #9]
    6f40:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    6f42:	69a4      	ldr	r4, [r4, #24]
    6f44:	e7f5      	b.n	6f32 <bt_conn_security_changed+0xe>
    6f46:	bf00      	nop
    6f48:	20000d24 	.word	0x20000d24

00006f4c <bt_conn_cb_register>:
	cb->_next = callback_list;
    6f4c:	4b02      	ldr	r3, [pc, #8]	; (6f58 <bt_conn_cb_register+0xc>)
    6f4e:	681a      	ldr	r2, [r3, #0]
	callback_list = cb;
    6f50:	6018      	str	r0, [r3, #0]
	cb->_next = callback_list;
    6f52:	6182      	str	r2, [r0, #24]
}
    6f54:	4770      	bx	lr
    6f56:	bf00      	nop
    6f58:	20000d24 	.word	0x20000d24

00006f5c <bt_conn_recv>:
{
    6f5c:	b570      	push	{r4, r5, r6, lr}
    6f5e:	4616      	mov	r6, r2
    6f60:	4604      	mov	r4, r0
    6f62:	460d      	mov	r5, r1
	tx_notify(conn);
    6f64:	f00c fdfe 	bl	13b64 <tx_notify>
	switch (flags) {
    6f68:	2e01      	cmp	r6, #1
    6f6a:	d015      	beq.n	6f98 <bt_conn_recv+0x3c>
    6f6c:	2e02      	cmp	r6, #2
    6f6e:	d14e      	bne.n	700e <bt_conn_recv+0xb2>
		len = sys_le16_to_cpu(hdr->len);
    6f70:	68ab      	ldr	r3, [r5, #8]
    6f72:	881e      	ldrh	r6, [r3, #0]
		if (conn->rx_len) {
    6f74:	89e3      	ldrh	r3, [r4, #14]
    6f76:	b133      	cbz	r3, 6f86 <bt_conn_recv+0x2a>
			BT_ERR("Unexpected first L2CAP frame");
    6f78:	482b      	ldr	r0, [pc, #172]	; (7028 <bt_conn_recv+0xcc>)
    6f7a:	2145      	movs	r1, #69	; 0x45
    6f7c:	f00a ffe4 	bl	11f48 <printk>
			bt_conn_reset_rx_state(conn);
    6f80:	4620      	mov	r0, r4
    6f82:	f00c fdd2 	bl	13b2a <bt_conn_reset_rx_state>
		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    6f86:	89ab      	ldrh	r3, [r5, #12]
    6f88:	1af3      	subs	r3, r6, r3
    6f8a:	3304      	adds	r3, #4
    6f8c:	b29b      	uxth	r3, r3
    6f8e:	81e3      	strh	r3, [r4, #14]
		if (conn->rx_len) {
    6f90:	2b00      	cmp	r3, #0
    6f92:	d031      	beq.n	6ff8 <bt_conn_recv+0x9c>
			conn->rx = buf;
    6f94:	6125      	str	r5, [r4, #16]
}
    6f96:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->rx_len) {
    6f98:	89e3      	ldrh	r3, [r4, #14]
    6f9a:	b95b      	cbnz	r3, 6fb4 <bt_conn_recv+0x58>
			BT_ERR("Unexpected L2CAP continuation");
    6f9c:	2145      	movs	r1, #69	; 0x45
    6f9e:	4823      	ldr	r0, [pc, #140]	; (702c <bt_conn_recv+0xd0>)
			BT_ERR("L2CAP data overflow");
    6fa0:	f00a ffd2 	bl	11f48 <printk>
			bt_conn_reset_rx_state(conn);
    6fa4:	4620      	mov	r0, r4
    6fa6:	f00c fdc0 	bl	13b2a <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    6faa:	4628      	mov	r0, r5
}
    6fac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    6fb0:	f006 b9d4 	b.w	d35c <net_buf_unref>
		if (buf->len > conn->rx_len) {
    6fb4:	89ae      	ldrh	r6, [r5, #12]
    6fb6:	42b3      	cmp	r3, r6
    6fb8:	d202      	bcs.n	6fc0 <bt_conn_recv+0x64>
			BT_ERR("L2CAP data overflow");
    6fba:	2145      	movs	r1, #69	; 0x45
    6fbc:	481c      	ldr	r0, [pc, #112]	; (7030 <bt_conn_recv+0xd4>)
    6fbe:	e7ef      	b.n	6fa0 <bt_conn_recv+0x44>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    6fc0:	6920      	ldr	r0, [r4, #16]
    6fc2:	3008      	adds	r0, #8
    6fc4:	f00e fb38 	bl	15638 <net_buf_simple_tailroom>
    6fc8:	4286      	cmp	r6, r0
    6fca:	d902      	bls.n	6fd2 <bt_conn_recv+0x76>
			BT_ERR("Not enough buffer space for L2CAP data");
    6fcc:	2145      	movs	r1, #69	; 0x45
    6fce:	4819      	ldr	r0, [pc, #100]	; (7034 <bt_conn_recv+0xd8>)
    6fd0:	e7e6      	b.n	6fa0 <bt_conn_recv+0x44>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    6fd2:	6920      	ldr	r0, [r4, #16]
    6fd4:	89aa      	ldrh	r2, [r5, #12]
    6fd6:	68a9      	ldr	r1, [r5, #8]
    6fd8:	3008      	adds	r0, #8
    6fda:	f00e fb35 	bl	15648 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    6fde:	89e3      	ldrh	r3, [r4, #14]
    6fe0:	89aa      	ldrh	r2, [r5, #12]
		net_buf_unref(buf);
    6fe2:	4628      	mov	r0, r5
		conn->rx_len -= buf->len;
    6fe4:	1a9b      	subs	r3, r3, r2
    6fe6:	81e3      	strh	r3, [r4, #14]
		net_buf_unref(buf);
    6fe8:	f006 f9b8 	bl	d35c <net_buf_unref>
		if (conn->rx_len) {
    6fec:	89e3      	ldrh	r3, [r4, #14]
    6fee:	2b00      	cmp	r3, #0
    6ff0:	d1d1      	bne.n	6f96 <bt_conn_recv+0x3a>
		buf = conn->rx;
    6ff2:	6925      	ldr	r5, [r4, #16]
		conn->rx_len = 0U;
    6ff4:	81e3      	strh	r3, [r4, #14]
		conn->rx = NULL;
    6ff6:	6123      	str	r3, [r4, #16]
	len = sys_le16_to_cpu(hdr->len);
    6ff8:	68ab      	ldr	r3, [r5, #8]
    6ffa:	881a      	ldrh	r2, [r3, #0]
	if (sizeof(*hdr) + len != buf->len) {
    6ffc:	89ab      	ldrh	r3, [r5, #12]
    6ffe:	1d11      	adds	r1, r2, #4
    7000:	4299      	cmp	r1, r3
    7002:	d00a      	beq.n	701a <bt_conn_recv+0xbe>
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
    7004:	2145      	movs	r1, #69	; 0x45
    7006:	480c      	ldr	r0, [pc, #48]	; (7038 <bt_conn_recv+0xdc>)
    7008:	f00a ff9e 	bl	11f48 <printk>
		net_buf_unref(buf);
    700c:	e7cd      	b.n	6faa <bt_conn_recv+0x4e>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    700e:	4632      	mov	r2, r6
    7010:	2145      	movs	r1, #69	; 0x45
    7012:	480a      	ldr	r0, [pc, #40]	; (703c <bt_conn_recv+0xe0>)
    7014:	f00a ff98 	bl	11f48 <printk>
		bt_conn_reset_rx_state(conn);
    7018:	e7c4      	b.n	6fa4 <bt_conn_recv+0x48>
	bt_l2cap_recv(conn, buf);
    701a:	4629      	mov	r1, r5
    701c:	4620      	mov	r0, r4
}
    701e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    7022:	f000 bfb1 	b.w	7f88 <bt_l2cap_recv>
    7026:	bf00      	nop
    7028:	00019b86 	.word	0x00019b86
    702c:	00019ba8 	.word	0x00019ba8
    7030:	00019bcb 	.word	0x00019bcb
    7034:	00019be4 	.word	0x00019be4
    7038:	00019c33 	.word	0x00019c33
    703c:	00019c10 	.word	0x00019c10

00007040 <bt_conn_send_cb>:
{
    7040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7044:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    7046:	7b43      	ldrb	r3, [r0, #13]
{
    7048:	4606      	mov	r6, r0
	if (conn->state != BT_CONN_CONNECTED) {
    704a:	2b07      	cmp	r3, #7
{
    704c:	460d      	mov	r5, r1
    704e:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    7050:	d009      	beq.n	7066 <bt_conn_send_cb+0x26>
		BT_ERR("not connected!");
    7052:	4821      	ldr	r0, [pc, #132]	; (70d8 <bt_conn_send_cb+0x98>)
    7054:	2145      	movs	r1, #69	; 0x45
    7056:	f00a ff77 	bl	11f48 <printk>
		net_buf_unref(buf);
    705a:	4628      	mov	r0, r5
    705c:	f006 f97e 	bl	d35c <net_buf_unref>
			return -ENOTCONN;
    7060:	f06f 0038 	mvn.w	r0, #56	; 0x38
    7064:	e01a      	b.n	709c <bt_conn_send_cb+0x5c>
	if (cb) {
    7066:	2a00      	cmp	r2, #0
    7068:	d034      	beq.n	70d4 <bt_conn_send_cb+0x94>
	return z_impl_k_current_get();
    706a:	f009 fce3 	bl	10a34 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    706e:	4b1b      	ldr	r3, [pc, #108]	; (70dc <bt_conn_send_cb+0x9c>)
    7070:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    7072:	481b      	ldr	r0, [pc, #108]	; (70e0 <bt_conn_send_cb+0xa0>)
    7074:	bf07      	ittee	eq
    7076:	2200      	moveq	r2, #0
    7078:	2300      	moveq	r3, #0
    707a:	f04f 32ff 	movne.w	r2, #4294967295
    707e:	f04f 33ff 	movne.w	r3, #4294967295
    7082:	f008 fb19 	bl	f6b8 <z_impl_k_queue_get>
    7086:	4604      	mov	r4, r0
		if (!tx) {
    7088:	b950      	cbnz	r0, 70a0 <bt_conn_send_cb+0x60>
			BT_ERR("Unable to allocate TX context");
    708a:	2145      	movs	r1, #69	; 0x45
    708c:	4815      	ldr	r0, [pc, #84]	; (70e4 <bt_conn_send_cb+0xa4>)
    708e:	f00a ff5b 	bl	11f48 <printk>
			net_buf_unref(buf);
    7092:	4628      	mov	r0, r5
    7094:	f006 f962 	bl	d35c <net_buf_unref>
			return -ENOBUFS;
    7098:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    709c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    70a0:	7b73      	ldrb	r3, [r6, #13]
    70a2:	2b07      	cmp	r3, #7
    70a4:	d00a      	beq.n	70bc <bt_conn_send_cb+0x7c>
			BT_WARN("Disconnected while allocating context");
    70a6:	2157      	movs	r1, #87	; 0x57
    70a8:	480f      	ldr	r0, [pc, #60]	; (70e8 <bt_conn_send_cb+0xa8>)
    70aa:	f00a ff4d 	bl	11f48 <printk>
			net_buf_unref(buf);
    70ae:	4628      	mov	r0, r5
    70b0:	f006 f954 	bl	d35c <net_buf_unref>
			tx_free(tx);
    70b4:	4620      	mov	r0, r4
    70b6:	f7ff fd87 	bl	6bc8 <tx_free>
    70ba:	e7d1      	b.n	7060 <bt_conn_send_cb+0x20>
		tx->pending_no_cb = 0U;
    70bc:	2300      	movs	r3, #0
		tx->user_data = user_data;
    70be:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    70c2:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    70c4:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    70c6:	f106 0034 	add.w	r0, r6, #52	; 0x34
    70ca:	4629      	mov	r1, r5
    70cc:	f006 f912 	bl	d2f4 <net_buf_put>
	return 0;
    70d0:	2000      	movs	r0, #0
    70d2:	e7e3      	b.n	709c <bt_conn_send_cb+0x5c>
		tx_data(buf)->tx = NULL;
    70d4:	614a      	str	r2, [r1, #20]
    70d6:	e7f6      	b.n	70c6 <bt_conn_send_cb+0x86>
    70d8:	00019c54 	.word	0x00019c54
    70dc:	20001de4 	.word	0x20001de4
    70e0:	200004e4 	.word	0x200004e4
    70e4:	00019c68 	.word	0x00019c68
    70e8:	00019c8b 	.word	0x00019c8b

000070ec <bt_conn_prepare_events>:
	conn_change.signaled = 0U;
    70ec:	2200      	movs	r2, #0
    70ee:	4b18      	ldr	r3, [pc, #96]	; (7150 <bt_conn_prepare_events+0x64>)
{
    70f0:	b510      	push	{r4, lr}
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    70f2:	2101      	movs	r1, #1
	conn_change.signaled = 0U;
    70f4:	609a      	str	r2, [r3, #8]
{
    70f6:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    70f8:	f00a fccc 	bl	11a94 <k_poll_event_init>
		if (!atomic_get(&conn->ref)) {
    70fc:	4b15      	ldr	r3, [pc, #84]	; (7154 <bt_conn_prepare_events+0x68>)
    70fe:	f103 0058 	add.w	r0, r3, #88	; 0x58
    7102:	f00c fd0f 	bl	13b24 <atomic_get>
    7106:	4619      	mov	r1, r3
    7108:	b908      	cbnz	r0, 710e <bt_conn_prepare_events+0x22>
			continue;
    710a:	2001      	movs	r0, #1
}
    710c:	bd10      	pop	{r4, pc}
		if (conn->state == BT_CONN_DISCONNECTED &&
    710e:	7b5a      	ldrb	r2, [r3, #13]
    7110:	b97a      	cbnz	r2, 7132 <bt_conn_prepare_events+0x46>
    7112:	1d1a      	adds	r2, r3, #4
    7114:	e8d2 0fef 	ldaex	r0, [r2]
    7118:	f020 0c40 	bic.w	ip, r0, #64	; 0x40
    711c:	e8c2 cfee 	stlex	lr, ip, [r2]
    7120:	f1be 0f00 	cmp.w	lr, #0
    7124:	d1f6      	bne.n	7114 <bt_conn_prepare_events+0x28>
    7126:	0642      	lsls	r2, r0, #25
    7128:	d503      	bpl.n	7132 <bt_conn_prepare_events+0x46>
			conn_cleanup(conn);
    712a:	4618      	mov	r0, r3
    712c:	f7ff fe42 	bl	6db4 <conn_cleanup>
    7130:	e7eb      	b.n	710a <bt_conn_prepare_events+0x1e>
		if (conn->state != BT_CONN_CONNECTED) {
    7132:	7b4b      	ldrb	r3, [r1, #13]
    7134:	2b07      	cmp	r3, #7
    7136:	d1e8      	bne.n	710a <bt_conn_prepare_events+0x1e>
		k_poll_event_init(&events[ev_count],
    7138:	4b07      	ldr	r3, [pc, #28]	; (7158 <bt_conn_prepare_events+0x6c>)
    713a:	f104 0014 	add.w	r0, r4, #20
    713e:	2200      	movs	r2, #0
    7140:	2104      	movs	r1, #4
    7142:	f00a fca7 	bl	11a94 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    7146:	2301      	movs	r3, #1
    7148:	2002      	movs	r0, #2
    714a:	f884 3020 	strb.w	r3, [r4, #32]
	return ev_count;
    714e:	e7dd      	b.n	710c <bt_conn_prepare_events+0x20>
    7150:	20000234 	.word	0x20000234
    7154:	20000dc8 	.word	0x20000dc8
    7158:	20000dfc 	.word	0x20000dfc

0000715c <bt_conn_add_le>:
{
    715c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!atomic_get(&conns[i].ref)) {
    7160:	4c18      	ldr	r4, [pc, #96]	; (71c4 <bt_conn_add_le+0x68>)
{
    7162:	4607      	mov	r7, r0
		if (!atomic_get(&conns[i].ref)) {
    7164:	f104 0858 	add.w	r8, r4, #88	; 0x58
    7168:	4640      	mov	r0, r8
{
    716a:	460e      	mov	r6, r1
		if (!atomic_get(&conns[i].ref)) {
    716c:	f00c fcda 	bl	13b24 <atomic_get>
    7170:	4605      	mov	r5, r0
    7172:	b110      	cbz	r0, 717a <bt_conn_add_le+0x1e>
		return NULL;
    7174:	2000      	movs	r0, #0
}
    7176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(conn, 0, sizeof(*conn));
    717a:	4601      	mov	r1, r0
    717c:	22ac      	movs	r2, #172	; 0xac
    717e:	4620      	mov	r0, r4
    7180:	f00c fa21 	bl	135c6 <memset>
	k_delayed_work_init(&conn->update_work, conn_update_timeout);
    7184:	4910      	ldr	r1, [pc, #64]	; (71c8 <bt_conn_add_le+0x6c>)
    7186:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    718a:	f00f fae4 	bl	16756 <k_delayed_work_init>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    718e:	4b0f      	ldr	r3, [pc, #60]	; (71cc <bt_conn_add_le+0x70>)
    7190:	62a5      	str	r5, [r4, #40]	; 0x28
    7192:	e9c4 350b 	strd	r3, r5, [r4, #44]	; 0x2c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    7196:	2501      	movs	r5, #1
    7198:	e8d8 3fef 	ldaex	r3, [r8]
    719c:	e8c8 5fe2 	stlex	r2, r5, [r8]
    71a0:	2a00      	cmp	r2, #0
    71a2:	d1f9      	bne.n	7198 <bt_conn_add_le+0x3c>
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    71a4:	2207      	movs	r2, #7
    71a6:	4631      	mov	r1, r6
    71a8:	f104 007c 	add.w	r0, r4, #124	; 0x7c
	conn->id = id;
    71ac:	7227      	strb	r7, [r4, #8]
    71ae:	f00c f9df 	bl	13570 <memcpy>
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    71b2:	4b07      	ldr	r3, [pc, #28]	; (71d0 <bt_conn_add_le+0x74>)
			conn = &conns[i];
    71b4:	4620      	mov	r0, r4
	conn->sec_level = BT_SECURITY_L1;
    71b6:	7265      	strb	r5, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
    71b8:	72a5      	strb	r5, [r4, #10]
	conn->type = BT_CONN_TYPE_LE;
    71ba:	70a5      	strb	r5, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    71bc:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	return conn;
    71c0:	e7d9      	b.n	7176 <bt_conn_add_le+0x1a>
    71c2:	bf00      	nop
    71c4:	20000dc8 	.word	0x20000dc8
    71c8:	00006d51 	.word	0x00006d51
    71cc:	00013bab 	.word	0x00013bab
    71d0:	00280018 	.word	0x00280018

000071d4 <bt_conn_set_state>:
{
    71d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state == state) {
    71d8:	7b45      	ldrb	r5, [r0, #13]
{
    71da:	4604      	mov	r4, r0
	if (conn->state == state) {
    71dc:	428d      	cmp	r5, r1
{
    71de:	460e      	mov	r6, r1
	if (conn->state == state) {
    71e0:	d10b      	bne.n	71fa <bt_conn_set_state+0x26>
		BT_WARN("no transition %s", state2str(state));
    71e2:	2157      	movs	r1, #87	; 0x57
    71e4:	2d08      	cmp	r5, #8
    71e6:	bf96      	itet	ls
    71e8:	4b6c      	ldrls	r3, [pc, #432]	; (739c <bt_conn_set_state+0x1c8>)
	if (conn->state == state) {
    71ea:	4a6d      	ldrhi	r2, [pc, #436]	; (73a0 <bt_conn_set_state+0x1cc>)
    71ec:	f853 2025 	ldrls.w	r2, [r3, r5, lsl #2]
		BT_WARN("no transition %s", state2str(state));
    71f0:	486c      	ldr	r0, [pc, #432]	; (73a4 <bt_conn_set_state+0x1d0>)
}
    71f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("no valid (%u) state was set", state);
    71f6:	f00a bea7 	b.w	11f48 <printk>
	conn->state = state;
    71fa:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
    71fc:	b165      	cbz	r5, 7218 <bt_conn_set_state+0x44>
    71fe:	2d06      	cmp	r5, #6
    7200:	d00e      	beq.n	7220 <bt_conn_set_state+0x4c>
	switch (conn->state) {
    7202:	7b63      	ldrb	r3, [r4, #13]
    7204:	2b08      	cmp	r3, #8
    7206:	f200 80c2 	bhi.w	738e <bt_conn_set_state+0x1ba>
    720a:	e8df f003 	tbb	[pc, r3]
    720e:	103f      	.short	0x103f
    7210:	c4c4c4c4 	.word	0xc4c4c4c4
    7214:	2883      	.short	0x2883
    7216:	c4          	.byte	0xc4
    7217:	00          	.byte	0x00
	atomic_val_t old = atomic_inc(&conn->ref);
    7218:	3058      	adds	r0, #88	; 0x58
    721a:	f00c fc9a 	bl	13b52 <atomic_inc>
	return conn;
    721e:	e7f0      	b.n	7202 <bt_conn_set_state+0x2e>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    7220:	7883      	ldrb	r3, [r0, #2]
    7222:	2b01      	cmp	r3, #1
    7224:	d1ed      	bne.n	7202 <bt_conn_set_state+0x2e>
			k_delayed_work_cancel(&conn->update_work);
    7226:	305c      	adds	r0, #92	; 0x5c
    7228:	f009 fef8 	bl	1101c <k_delayed_work_cancel>
    722c:	e7e9      	b.n	7202 <bt_conn_set_state+0x2e>
		tx->pending_no_cb = 0U;
    722e:	2600      	movs	r6, #0
	z_impl_k_sem_give(sem);
    7230:	4d5d      	ldr	r5, [pc, #372]	; (73a8 <bt_conn_set_state+0x1d4>)
	__asm__ volatile(
    7232:	f04f 0320 	mov.w	r3, #32
    7236:	f3ef 8211 	mrs	r2, BASEPRI
    723a:	f383 8811 	msr	BASEPRI, r3
    723e:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    7242:	69e3      	ldr	r3, [r4, #28]
    7244:	2b00      	cmp	r3, #0
    7246:	f000 8083 	beq.w	7350 <bt_conn_set_state+0x17c>
			conn->pending_no_cb--;
    724a:	3b01      	subs	r3, #1
    724c:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    724e:	f382 8811 	msr	BASEPRI, r2
    7252:	f3bf 8f6f 	isb	sy
    7256:	4628      	mov	r0, r5
    7258:	f009 fbf2 	bl	10a40 <z_impl_k_sem_give>
}
    725c:	e7e9      	b.n	7232 <bt_conn_set_state+0x5e>
		if (conn->type == BT_CONN_TYPE_SCO) {
    725e:	78a3      	ldrb	r3, [r4, #2]
    7260:	2b04      	cmp	r3, #4
    7262:	f000 8098 	beq.w	7396 <bt_conn_set_state+0x1c2>
	z_impl_k_queue_init(queue);
    7266:	f104 0034 	add.w	r0, r4, #52	; 0x34
    726a:	f00f f9af 	bl	165cc <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    726e:	2100      	movs	r1, #0
    7270:	484e      	ldr	r0, [pc, #312]	; (73ac <bt_conn_set_state+0x1d8>)
    7272:	f00a fd6d 	bl	11d50 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    7276:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    7278:	4620      	mov	r0, r4
	list->tail = NULL;
    727a:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
    727e:	f000 fe31 	bl	7ee4 <bt_l2cap_connected>
		notify_connected(conn);
    7282:	4620      	mov	r0, r4
}
    7284:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify_connected(conn);
    7288:	f7ff bca8 	b.w	6bdc <notify_connected>
		if (conn->type == BT_CONN_TYPE_SCO) {
    728c:	78a3      	ldrb	r3, [r4, #2]
    728e:	2b04      	cmp	r3, #4
    7290:	d105      	bne.n	729e <bt_conn_set_state+0xca>
	atomic_val_t old = atomic_dec(&conn->ref);
    7292:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
    7296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	atomic_val_t old = atomic_dec(&conn->ref);
    729a:	f00c bc51 	b.w	13b40 <atomic_dec>
		switch (old_state) {
    729e:	2d08      	cmp	r5, #8
    72a0:	d879      	bhi.n	7396 <bt_conn_set_state+0x1c2>
    72a2:	a301      	add	r3, pc, #4	; (adr r3, 72a8 <bt_conn_set_state+0xd4>)
    72a4:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    72a8:	0000730d 	.word	0x0000730d
    72ac:	000072cd 	.word	0x000072cd
    72b0:	000072ff 	.word	0x000072ff
    72b4:	00007293 	.word	0x00007293
    72b8:	00007293 	.word	0x00007293
    72bc:	000072ff 	.word	0x000072ff
    72c0:	000072ff 	.word	0x000072ff
    72c4:	0000730d 	.word	0x0000730d
    72c8:	0000730d 	.word	0x0000730d
			tx_notify(conn);
    72cc:	4620      	mov	r0, r4
    72ce:	f00c fc49 	bl	13b64 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    72d2:	78a3      	ldrb	r3, [r4, #2]
    72d4:	2b01      	cmp	r3, #1
    72d6:	d103      	bne.n	72e0 <bt_conn_set_state+0x10c>
				k_delayed_work_cancel(&conn->update_work);
    72d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    72dc:	f009 fe9e 	bl	1101c <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    72e0:	3404      	adds	r4, #4
    72e2:	e8d4 3fef 	ldaex	r3, [r4]
    72e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    72ea:	e8c4 3fe2 	stlex	r2, r3, [r4]
    72ee:	2a00      	cmp	r2, #0
    72f0:	d1f7      	bne.n	72e2 <bt_conn_set_state+0x10e>
}
    72f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    72f6:	2100      	movs	r1, #0
    72f8:	482c      	ldr	r0, [pc, #176]	; (73ac <bt_conn_set_state+0x1d8>)
    72fa:	f00a bd29 	b.w	11d50 <z_impl_k_poll_signal_raise>
			if (conn->err) {
    72fe:	7b23      	ldrb	r3, [r4, #12]
    7300:	2b00      	cmp	r3, #0
    7302:	d0c6      	beq.n	7292 <bt_conn_set_state+0xbe>
				notify_connected(conn);
    7304:	4620      	mov	r0, r4
    7306:	f7ff fc69 	bl	6bdc <notify_connected>
    730a:	e7c2      	b.n	7292 <bt_conn_set_state+0xbe>
			BT_WARN("Invalid (%u) old state", state);
    730c:	4632      	mov	r2, r6
    730e:	2157      	movs	r1, #87	; 0x57
    7310:	4827      	ldr	r0, [pc, #156]	; (73b0 <bt_conn_set_state+0x1dc>)
    7312:	e76e      	b.n	71f2 <bt_conn_set_state+0x1e>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    7314:	78a3      	ldrb	r3, [r4, #2]
    7316:	2b01      	cmp	r3, #1
    7318:	d13d      	bne.n	7396 <bt_conn_set_state+0x1c2>
				K_MSEC(10 * bt_dev.create_param.timeout));
    731a:	210a      	movs	r1, #10
			return (u32_t)((t * to_hz + off) / from_hz);
    731c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    7320:	f240 36e7 	movw	r6, #999	; 0x3e7
    7324:	2700      	movs	r7, #0
    7326:	4b23      	ldr	r3, [pc, #140]	; (73b4 <bt_conn_set_state+0x1e0>)
    7328:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    732c:	8a9b      	ldrh	r3, [r3, #20]
    732e:	4359      	muls	r1, r3
    7330:	fbc0 6701 	smlal	r6, r7, r0, r1
    7334:	2300      	movs	r3, #0
    7336:	4630      	mov	r0, r6
    7338:	4639      	mov	r1, r7
    733a:	f7f8 ff0d 	bl	158 <__aeabi_uldivmod>
    733e:	4602      	mov	r2, r0
    7340:	460b      	mov	r3, r1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    7342:	481d      	ldr	r0, [pc, #116]	; (73b8 <bt_conn_set_state+0x1e4>)
    7344:	f104 015c 	add.w	r1, r4, #92	; 0x5c
}
    7348:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    734c:	f009 bddc 	b.w	10f08 <k_delayed_work_submit_to_queue>
Z_GENLIST_IS_EMPTY(slist)
    7350:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    7352:	b128      	cbz	r0, 7360 <bt_conn_set_state+0x18c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7354:	69a1      	ldr	r1, [r4, #24]
    7356:	6803      	ldr	r3, [r0, #0]
    7358:	4288      	cmp	r0, r1
	list->head = node;
    735a:	6163      	str	r3, [r4, #20]
	list->tail = node;
    735c:	bf08      	it	eq
    735e:	61a3      	streq	r3, [r4, #24]
    7360:	f382 8811 	msr	BASEPRI, r2
    7364:	f3bf 8f6f 	isb	sy
		if (!node) {
    7368:	b1a8      	cbz	r0, 7396 <bt_conn_set_state+0x1c2>
	__asm__ volatile(
    736a:	f04f 0220 	mov.w	r2, #32
    736e:	f3ef 8311 	mrs	r3, BASEPRI
    7372:	f382 8811 	msr	BASEPRI, r2
    7376:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    737a:	68c2      	ldr	r2, [r0, #12]
    737c:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    737e:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    7380:	f383 8811 	msr	BASEPRI, r3
    7384:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    7388:	f7ff fc1e 	bl	6bc8 <tx_free>
    738c:	e763      	b.n	7256 <bt_conn_set_state+0x82>
		BT_WARN("no valid (%u) state was set", state);
    738e:	4632      	mov	r2, r6
    7390:	2157      	movs	r1, #87	; 0x57
    7392:	480a      	ldr	r0, [pc, #40]	; (73bc <bt_conn_set_state+0x1e8>)
    7394:	e72d      	b.n	71f2 <bt_conn_set_state+0x1e>
}
    7396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    739a:	bf00      	nop
    739c:	00017038 	.word	0x00017038
    73a0:	00019cb6 	.word	0x00019cb6
    73a4:	00019cc0 	.word	0x00019cc0
    73a8:	200000b4 	.word	0x200000b4
    73ac:	20000234 	.word	0x20000234
    73b0:	00019cd6 	.word	0x00019cd6
    73b4:	20000000 	.word	0x20000000
    73b8:	20001dc8 	.word	0x20001dc8
    73bc:	00019cf2 	.word	0x00019cf2

000073c0 <bt_conn_lookup_handle>:
		if (!atomic_get(&conns[i].ref)) {
    73c0:	4a0c      	ldr	r2, [pc, #48]	; (73f4 <bt_conn_lookup_handle+0x34>)
{
    73c2:	b508      	push	{r3, lr}
    73c4:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    73c6:	f102 0058 	add.w	r0, r2, #88	; 0x58
    73ca:	f00c fbab 	bl	13b24 <atomic_get>
    73ce:	4611      	mov	r1, r2
    73d0:	b160      	cbz	r0, 73ec <bt_conn_lookup_handle+0x2c>
		if (!bt_conn_is_handle_valid(&conns[i])) {
    73d2:	7b52      	ldrb	r2, [r2, #13]
    73d4:	1fd0      	subs	r0, r2, #7
    73d6:	2801      	cmp	r0, #1
    73d8:	d901      	bls.n	73de <bt_conn_lookup_handle+0x1e>
    73da:	2a01      	cmp	r2, #1
    73dc:	d107      	bne.n	73ee <bt_conn_lookup_handle+0x2e>
		if (conns[i].handle == handle) {
    73de:	880a      	ldrh	r2, [r1, #0]
    73e0:	429a      	cmp	r2, r3
    73e2:	d104      	bne.n	73ee <bt_conn_lookup_handle+0x2e>
	atomic_val_t old = atomic_inc(&conn->ref);
    73e4:	4804      	ldr	r0, [pc, #16]	; (73f8 <bt_conn_lookup_handle+0x38>)
    73e6:	f00c fbb4 	bl	13b52 <atomic_inc>
		if (!bt_conn_is_handle_valid(&conns[i])) {
    73ea:	4802      	ldr	r0, [pc, #8]	; (73f4 <bt_conn_lookup_handle+0x34>)
}
    73ec:	bd08      	pop	{r3, pc}
	return NULL;
    73ee:	2000      	movs	r0, #0
    73f0:	e7fc      	b.n	73ec <bt_conn_lookup_handle+0x2c>
    73f2:	bf00      	nop
    73f4:	20000dc8 	.word	0x20000dc8
    73f8:	20000e20 	.word	0x20000e20

000073fc <bt_conn_lookup_addr_le>:
{
    73fc:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    73fe:	4c0c      	ldr	r4, [pc, #48]	; (7430 <bt_conn_lookup_addr_le+0x34>)
{
    7400:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    7402:	f104 0058 	add.w	r0, r4, #88	; 0x58
{
    7406:	460a      	mov	r2, r1
		if (!atomic_get(&conns[i].ref)) {
    7408:	f00c fb8c 	bl	13b24 <atomic_get>
    740c:	b908      	cbnz	r0, 7412 <bt_conn_lookup_addr_le+0x16>
	return NULL;
    740e:	2000      	movs	r0, #0
}
    7410:	bd10      	pop	{r4, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    7412:	78a1      	ldrb	r1, [r4, #2]
    7414:	2901      	cmp	r1, #1
    7416:	d1fa      	bne.n	740e <bt_conn_lookup_addr_le+0x12>
		if (bt_conn_is_peer_addr_le(&conns[i], id, peer)) {
    7418:	4619      	mov	r1, r3
    741a:	4620      	mov	r0, r4
    741c:	f00c fc34 	bl	13c88 <bt_conn_is_peer_addr_le>
    7420:	2800      	cmp	r0, #0
    7422:	d0f4      	beq.n	740e <bt_conn_lookup_addr_le+0x12>
	atomic_val_t old = atomic_inc(&conn->ref);
    7424:	f104 0058 	add.w	r0, r4, #88	; 0x58
    7428:	f00c fb93 	bl	13b52 <atomic_inc>
		if (bt_conn_is_peer_addr_le(&conns[i], id, peer)) {
    742c:	4620      	mov	r0, r4
			return bt_conn_ref(&conns[i]);
    742e:	e7ef      	b.n	7410 <bt_conn_lookup_addr_le+0x14>
    7430:	20000dc8 	.word	0x20000dc8

00007434 <bt_conn_exists_le>:
{
    7434:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
    7436:	f7ff ffe1 	bl	73fc <bt_conn_lookup_addr_le>
	if (conn) {
    743a:	4604      	mov	r4, r0
    743c:	b178      	cbz	r0, 745e <bt_conn_exists_le+0x2a>
		BT_WARN("Found valid connection in %s state",
    743e:	7b43      	ldrb	r3, [r0, #13]
    7440:	2157      	movs	r1, #87	; 0x57
    7442:	2b08      	cmp	r3, #8
    7444:	bf96      	itet	ls
    7446:	4a06      	ldrls	r2, [pc, #24]	; (7460 <bt_conn_exists_le+0x2c>)
    7448:	4a06      	ldrhi	r2, [pc, #24]	; (7464 <bt_conn_exists_le+0x30>)
    744a:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
    744e:	4806      	ldr	r0, [pc, #24]	; (7468 <bt_conn_exists_le+0x34>)
    7450:	f00a fd7a 	bl	11f48 <printk>
	atomic_val_t old = atomic_dec(&conn->ref);
    7454:	f104 0058 	add.w	r0, r4, #88	; 0x58
    7458:	f00c fb72 	bl	13b40 <atomic_dec>
		return true;
    745c:	2001      	movs	r0, #1
}
    745e:	bd10      	pop	{r4, pc}
    7460:	00017038 	.word	0x00017038
    7464:	00019cb6 	.word	0x00019cb6
    7468:	00019d13 	.word	0x00019d13

0000746c <bt_conn_lookup_state_le>:
{
    746c:	b570      	push	{r4, r5, r6, lr}
		if (!atomic_get(&conns[i].ref)) {
    746e:	4c10      	ldr	r4, [pc, #64]	; (74b0 <bt_conn_lookup_state_le+0x44>)
{
    7470:	4605      	mov	r5, r0
		if (!atomic_get(&conns[i].ref)) {
    7472:	f104 0058 	add.w	r0, r4, #88	; 0x58
{
    7476:	4616      	mov	r6, r2
		if (!atomic_get(&conns[i].ref)) {
    7478:	f00c fb54 	bl	13b24 <atomic_get>
    747c:	b908      	cbnz	r0, 7482 <bt_conn_lookup_state_le+0x16>
	return NULL;
    747e:	2000      	movs	r0, #0
}
    7480:	bd70      	pop	{r4, r5, r6, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    7482:	78a3      	ldrb	r3, [r4, #2]
    7484:	2b01      	cmp	r3, #1
    7486:	d1fa      	bne.n	747e <bt_conn_lookup_state_le+0x12>
		if (peer && !bt_conn_is_peer_addr_le(&conns[i], id, peer)) {
    7488:	b951      	cbnz	r1, 74a0 <bt_conn_lookup_state_le+0x34>
		if (conns[i].state == state && conns[i].id == id) {
    748a:	7b63      	ldrb	r3, [r4, #13]
    748c:	42b3      	cmp	r3, r6
    748e:	d1f6      	bne.n	747e <bt_conn_lookup_state_le+0x12>
    7490:	7a23      	ldrb	r3, [r4, #8]
    7492:	42ab      	cmp	r3, r5
    7494:	d1f3      	bne.n	747e <bt_conn_lookup_state_le+0x12>
	atomic_val_t old = atomic_inc(&conn->ref);
    7496:	4807      	ldr	r0, [pc, #28]	; (74b4 <bt_conn_lookup_state_le+0x48>)
    7498:	f00c fb5b 	bl	13b52 <atomic_inc>
			return bt_conn_ref(&conns[i]);
    749c:	4804      	ldr	r0, [pc, #16]	; (74b0 <bt_conn_lookup_state_le+0x44>)
    749e:	e7ef      	b.n	7480 <bt_conn_lookup_state_le+0x14>
		if (peer && !bt_conn_is_peer_addr_le(&conns[i], id, peer)) {
    74a0:	460a      	mov	r2, r1
    74a2:	4620      	mov	r0, r4
    74a4:	4629      	mov	r1, r5
    74a6:	f00c fbef 	bl	13c88 <bt_conn_is_peer_addr_le>
    74aa:	2800      	cmp	r0, #0
    74ac:	d1ed      	bne.n	748a <bt_conn_lookup_state_le+0x1e>
    74ae:	e7e6      	b.n	747e <bt_conn_lookup_state_le+0x12>
    74b0:	20000dc8 	.word	0x20000dc8
    74b4:	20000e20 	.word	0x20000e20

000074b8 <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
    74b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    74bc:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    74be:	4852      	ldr	r0, [pc, #328]	; (7608 <bt_conn_le_create+0x150>)
    74c0:	460f      	mov	r7, r1
    74c2:	4615      	mov	r5, r2
    74c4:	461e      	mov	r6, r3
    74c6:	f00c fb2d 	bl	13b24 <atomic_get>
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    74ca:	0781      	lsls	r1, r0, #30
    74cc:	f140 8092 	bpl.w	75f4 <bt_conn_le_create+0x13c>
		return -EAGAIN;
	}

	if (!bt_le_conn_params_valid(conn_param)) {
    74d0:	4610      	mov	r0, r2
    74d2:	f00c fa22 	bl	1391a <bt_le_conn_params_valid>
    74d6:	b928      	cbnz	r0, 74e4 <bt_conn_le_create+0x2c>
		return -EINVAL;
    74d8:	f06f 0515 	mvn.w	r5, #21
		return err;
	}

	*ret_conn = conn;
	return 0;
}
    74dc:	4628      	mov	r0, r5
    74de:	b002      	add	sp, #8
    74e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    74e4:	4848      	ldr	r0, [pc, #288]	; (7608 <bt_conn_le_create+0x150>)
    74e6:	f00c fb1d 	bl	13b24 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    74ea:	0642      	lsls	r2, r0, #25
    74ec:	d4f4      	bmi.n	74d8 <bt_conn_le_create+0x20>
    74ee:	4846      	ldr	r0, [pc, #280]	; (7608 <bt_conn_le_create+0x150>)
    74f0:	f00c fb18 	bl	13b24 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
    74f4:	0503      	lsls	r3, r0, #20
    74f6:	f3c0 28c0 	ubfx	r8, r0, #11, #1
    74fa:	d47e      	bmi.n	75fa <bt_conn_le_create+0x142>
	if (!bt_le_scan_random_addr_check()) {
    74fc:	f00c fa09 	bl	13912 <bt_le_scan_random_addr_check>
    7500:	2800      	cmp	r0, #0
    7502:	d0e9      	beq.n	74d8 <bt_conn_le_create+0x20>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
    7504:	4621      	mov	r1, r4
    7506:	4640      	mov	r0, r8
    7508:	f7ff ff94 	bl	7434 <bt_conn_exists_le>
    750c:	2800      	cmp	r0, #0
    750e:	d1e3      	bne.n	74d8 <bt_conn_le_create+0x20>
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
    7510:	7823      	ldrb	r3, [r4, #0]
    7512:	3b02      	subs	r3, #2
    7514:	2b01      	cmp	r3, #1
    7516:	d84b      	bhi.n	75b0 <bt_conn_le_create+0xf8>
    7518:	2207      	movs	r2, #7
    751a:	4621      	mov	r1, r4
    751c:	4668      	mov	r0, sp
    751e:	f00c f827 	bl	13570 <memcpy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
    7522:	f89d 3000 	ldrb.w	r3, [sp]
    7526:	3b02      	subs	r3, #2
    7528:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
    752c:	4669      	mov	r1, sp
    752e:	2000      	movs	r0, #0
    7530:	f7ff fe14 	bl	715c <bt_conn_add_le>
	if (!conn) {
    7534:	4604      	mov	r4, r0
    7536:	2800      	cmp	r0, #0
    7538:	d062      	beq.n	7600 <bt_conn_le_create+0x148>
	conn->le.interval_min = param->interval_min;
    753a:	882b      	ldrh	r3, [r5, #0]
    753c:	f8a0 3094 	strh.w	r3, [r0, #148]	; 0x94
	conn->le.interval_max = param->interval_max;
    7540:	886b      	ldrh	r3, [r5, #2]
    7542:	f8a0 3096 	strh.w	r3, [r0, #150]	; 0x96
	conn->le.latency = param->latency;
    7546:	88ab      	ldrh	r3, [r5, #4]
    7548:	f8a0 3098 	strh.w	r3, [r0, #152]	; 0x98
	conn->le.timeout = param->timeout;
    754c:	88eb      	ldrh	r3, [r5, #6]
	bt_dev.create_param = *param;
    754e:	4d2f      	ldr	r5, [pc, #188]	; (760c <bt_conn_le_create+0x154>)
	conn->le.timeout = param->timeout;
    7550:	f8a0 309a 	strh.w	r3, [r0, #154]	; 0x9a
	bt_dev.create_param = *param;
    7554:	f105 0c08 	add.w	ip, r5, #8
    7558:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
    755c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
    7560:	8aab      	ldrh	r3, [r5, #20]
    7562:	462a      	mov	r2, r5
	bt_dev.create_param.timeout =
    7564:	2b00      	cmp	r3, #0
    7566:	bf08      	it	eq
    7568:	f44f 7396 	moveq.w	r3, #300	; 0x12c
    756c:	82ab      	strh	r3, [r5, #20]
		(bt_dev.create_param.interval_coded != 0) ?
    756e:	8a2b      	ldrh	r3, [r5, #16]
	bt_dev.create_param.interval_coded =
    7570:	b903      	cbnz	r3, 7574 <bt_conn_le_create+0xbc>
    7572:	89ab      	ldrh	r3, [r5, #12]
    7574:	8213      	strh	r3, [r2, #16]
		(bt_dev.create_param.window_coded != 0) ?
    7576:	8a53      	ldrh	r3, [r2, #18]
	bt_dev.create_param.window_coded =
    7578:	b903      	cbnz	r3, 757c <bt_conn_le_create+0xc4>
    757a:	89d3      	ldrh	r3, [r2, #14]
    757c:	8253      	strh	r3, [r2, #18]
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    757e:	f892 30cc 	ldrb.w	r3, [r2, #204]	; 0xcc
    7582:	b11b      	cbz	r3, 758c <bt_conn_le_create+0xd4>
    7584:	f892 20cd 	ldrb.w	r2, [r2, #205]	; 0xcd
    7588:	429a      	cmp	r2, r3
    758a:	d91a      	bls.n	75c2 <bt_conn_le_create+0x10a>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    758c:	2102      	movs	r1, #2
    758e:	4620      	mov	r0, r4
    7590:	f7ff fe20 	bl	71d4 <bt_conn_set_state>
		err = bt_le_scan_update(true);
    7594:	2001      	movs	r0, #1
    7596:	f7fe f979 	bl	588c <bt_le_scan_update>
		if (err) {
    759a:	4605      	mov	r5, r0
    759c:	b340      	cbz	r0, 75f0 <bt_conn_le_create+0x138>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    759e:	4620      	mov	r0, r4
    75a0:	2100      	movs	r1, #0
    75a2:	f7ff fe17 	bl	71d4 <bt_conn_set_state>
	atomic_val_t old = atomic_dec(&conn->ref);
    75a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
    75aa:	f00c fac9 	bl	13b40 <atomic_dec>
			return err;
    75ae:	e795      	b.n	74dc <bt_conn_le_create+0x24>
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
    75b0:	4621      	mov	r1, r4
    75b2:	f00c f9a6 	bl	13902 <bt_lookup_id_addr>
    75b6:	2207      	movs	r2, #7
    75b8:	4601      	mov	r1, r0
    75ba:	4668      	mov	r0, sp
    75bc:	f00b ffd8 	bl	13570 <memcpy>
}
    75c0:	e7b4      	b.n	752c <bt_conn_le_create+0x74>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    75c2:	2106      	movs	r1, #6
    75c4:	4620      	mov	r0, r4
    75c6:	f7ff fe05 	bl	71d4 <bt_conn_set_state>
	err = bt_le_create_conn(conn);
    75ca:	4620      	mov	r0, r4
    75cc:	f00c f9a3 	bl	13916 <bt_le_create_conn>
	if (err) {
    75d0:	4605      	mov	r5, r0
    75d2:	b168      	cbz	r0, 75f0 <bt_conn_le_create+0x138>
		conn->err = 0;
    75d4:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    75d6:	4620      	mov	r0, r4
    75d8:	4631      	mov	r1, r6
		conn->err = 0;
    75da:	7326      	strb	r6, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    75dc:	f7ff fdfa 	bl	71d4 <bt_conn_set_state>
	atomic_val_t old = atomic_dec(&conn->ref);
    75e0:	f104 0058 	add.w	r0, r4, #88	; 0x58
    75e4:	f00c faac 	bl	13b40 <atomic_dec>
		bt_le_scan_update(false);
    75e8:	4630      	mov	r0, r6
    75ea:	f7fe f94f 	bl	588c <bt_le_scan_update>
		return err;
    75ee:	e775      	b.n	74dc <bt_conn_le_create+0x24>
	*ret_conn = conn;
    75f0:	6034      	str	r4, [r6, #0]
	return 0;
    75f2:	e773      	b.n	74dc <bt_conn_le_create+0x24>
		return -EAGAIN;
    75f4:	f06f 050a 	mvn.w	r5, #10
    75f8:	e770      	b.n	74dc <bt_conn_le_create+0x24>
		return -EALREADY;
    75fa:	f06f 0544 	mvn.w	r5, #68	; 0x44
    75fe:	e76d      	b.n	74dc <bt_conn_le_create+0x24>
		return -ENOMEM;
    7600:	f06f 050b 	mvn.w	r5, #11
    7604:	e76a      	b.n	74dc <bt_conn_le_create+0x24>
    7606:	bf00      	nop
    7608:	20000098 	.word	0x20000098
    760c:	20000000 	.word	0x20000000

00007610 <bt_le_set_auto_conn>:

#if !defined(CONFIG_BT_WHITELIST)
int bt_le_set_auto_conn(const bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    7610:	b570      	push	{r4, r5, r6, lr}
    7612:	4606      	mov	r6, r0
    7614:	4835      	ldr	r0, [pc, #212]	; (76ec <bt_le_set_auto_conn+0xdc>)
    7616:	460d      	mov	r5, r1
    7618:	f00c fa84 	bl	13b24 <atomic_get>
	struct bt_conn *conn;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    761c:	0780      	lsls	r0, r0, #30
    761e:	d55e      	bpl.n	76de <bt_le_set_auto_conn+0xce>
		return -EAGAIN;
	}

	if (param && !bt_le_conn_params_valid(param)) {
    7620:	b929      	cbnz	r1, 762e <bt_le_set_auto_conn+0x1e>
		return -EINVAL;
	}

	if (!bt_le_scan_random_addr_check()) {
    7622:	f00c f976 	bl	13912 <bt_le_scan_random_addr_check>
    7626:	b940      	cbnz	r0, 763a <bt_le_set_auto_conn+0x2a>
		return -EINVAL;
    7628:	f06f 0015 	mvn.w	r0, #21
	}

	bt_conn_unref(conn);

	return 0;
}
    762c:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
    762e:	4608      	mov	r0, r1
    7630:	f00c f973 	bl	1391a <bt_le_conn_params_valid>
    7634:	2800      	cmp	r0, #0
    7636:	d1f4      	bne.n	7622 <bt_le_set_auto_conn+0x12>
    7638:	e7f6      	b.n	7628 <bt_le_set_auto_conn+0x18>
	conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
    763a:	4631      	mov	r1, r6
    763c:	2000      	movs	r0, #0
    763e:	f7ff fedd 	bl	73fc <bt_conn_lookup_addr_le>
	if (!conn) {
    7642:	4604      	mov	r4, r0
    7644:	b928      	cbnz	r0, 7652 <bt_le_set_auto_conn+0x42>
		conn = bt_conn_add_le(BT_ID_DEFAULT, addr);
    7646:	4631      	mov	r1, r6
    7648:	f7ff fd88 	bl	715c <bt_conn_add_le>
		if (!conn) {
    764c:	4604      	mov	r4, r0
    764e:	2800      	cmp	r0, #0
    7650:	d048      	beq.n	76e4 <bt_le_set_auto_conn+0xd4>
	if (param) {
    7652:	1d23      	adds	r3, r4, #4
    7654:	f104 0658 	add.w	r6, r4, #88	; 0x58
    7658:	b365      	cbz	r5, 76b4 <bt_le_set_auto_conn+0xa4>
	conn->le.interval_min = param->interval_min;
    765a:	882a      	ldrh	r2, [r5, #0]
    765c:	f8a4 2094 	strh.w	r2, [r4, #148]	; 0x94
	conn->le.interval_max = param->interval_max;
    7660:	886a      	ldrh	r2, [r5, #2]
    7662:	f8a4 2096 	strh.w	r2, [r4, #150]	; 0x96
	conn->le.latency = param->latency;
    7666:	88aa      	ldrh	r2, [r5, #4]
    7668:	f8a4 2098 	strh.w	r2, [r4, #152]	; 0x98
	conn->le.timeout = param->timeout;
    766c:	88ea      	ldrh	r2, [r5, #6]
    766e:	f8a4 209a 	strh.w	r2, [r4, #154]	; 0x9a
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7672:	e8d3 2fef 	ldaex	r2, [r3]
    7676:	f042 0101 	orr.w	r1, r2, #1
    767a:	e8c3 1fe0 	stlex	r0, r1, [r3]
    767e:	2800      	cmp	r0, #0
    7680:	d1f7      	bne.n	7672 <bt_le_set_auto_conn+0x62>
		if (!atomic_test_and_set_bit(conn->flags,
    7682:	07d1      	lsls	r1, r2, #31
    7684:	d402      	bmi.n	768c <bt_le_set_auto_conn+0x7c>
	atomic_val_t old = atomic_inc(&conn->ref);
    7686:	4630      	mov	r0, r6
    7688:	f00c fa63 	bl	13b52 <atomic_inc>
	if (conn->state == BT_CONN_DISCONNECTED &&
    768c:	7b63      	ldrb	r3, [r4, #13]
    768e:	b963      	cbnz	r3, 76aa <bt_le_set_auto_conn+0x9a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    7690:	4816      	ldr	r0, [pc, #88]	; (76ec <bt_le_set_auto_conn+0xdc>)
    7692:	f00c fa47 	bl	13b24 <atomic_get>
    7696:	0783      	lsls	r3, r0, #30
    7698:	d507      	bpl.n	76aa <bt_le_set_auto_conn+0x9a>
		if (param) {
    769a:	b11d      	cbz	r5, 76a4 <bt_le_set_auto_conn+0x94>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    769c:	2102      	movs	r1, #2
    769e:	4620      	mov	r0, r4
    76a0:	f7ff fd98 	bl	71d4 <bt_conn_set_state>
		bt_le_scan_update(false);
    76a4:	2000      	movs	r0, #0
    76a6:	f7fe f8f1 	bl	588c <bt_le_scan_update>
	atomic_val_t old = atomic_dec(&conn->ref);
    76aa:	4630      	mov	r0, r6
    76ac:	f00c fa48 	bl	13b40 <atomic_dec>
	return 0;
    76b0:	2000      	movs	r0, #0
    76b2:	e7bb      	b.n	762c <bt_le_set_auto_conn+0x1c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    76b4:	e8d3 2fef 	ldaex	r2, [r3]
    76b8:	f022 0101 	bic.w	r1, r2, #1
    76bc:	e8c3 1fe0 	stlex	r0, r1, [r3]
    76c0:	2800      	cmp	r0, #0
    76c2:	d1f7      	bne.n	76b4 <bt_le_set_auto_conn+0xa4>
		if (atomic_test_and_clear_bit(conn->flags,
    76c4:	07d2      	lsls	r2, r2, #31
    76c6:	d5e1      	bpl.n	768c <bt_le_set_auto_conn+0x7c>
	atomic_val_t old = atomic_dec(&conn->ref);
    76c8:	4630      	mov	r0, r6
    76ca:	f00c fa39 	bl	13b40 <atomic_dec>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    76ce:	7b63      	ldrb	r3, [r4, #13]
    76d0:	2b02      	cmp	r3, #2
    76d2:	d1db      	bne.n	768c <bt_le_set_auto_conn+0x7c>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    76d4:	4629      	mov	r1, r5
    76d6:	4620      	mov	r0, r4
    76d8:	f7ff fd7c 	bl	71d4 <bt_conn_set_state>
    76dc:	e7d6      	b.n	768c <bt_le_set_auto_conn+0x7c>
		return -EAGAIN;
    76de:	f06f 000a 	mvn.w	r0, #10
    76e2:	e7a3      	b.n	762c <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
    76e4:	f06f 000b 	mvn.w	r0, #11
    76e8:	e7a0      	b.n	762c <bt_le_set_auto_conn+0x1c>
    76ea:	bf00      	nop
    76ec:	20000098 	.word	0x20000098

000076f0 <bt_conn_disconnect>:
{
    76f0:	b538      	push	{r3, r4, r5, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    76f2:	7883      	ldrb	r3, [r0, #2]
{
    76f4:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    76f6:	2b01      	cmp	r3, #1
{
    76f8:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    76fa:	d103      	bne.n	7704 <bt_conn_disconnect+0x14>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
    76fc:	2100      	movs	r1, #0
    76fe:	307c      	adds	r0, #124	; 0x7c
    7700:	f7ff ff86 	bl	7610 <bt_le_set_auto_conn>
	switch (conn->state) {
    7704:	7b63      	ldrb	r3, [r4, #13]
    7706:	3b02      	subs	r3, #2
    7708:	2b06      	cmp	r3, #6
    770a:	d805      	bhi.n	7718 <bt_conn_disconnect+0x28>
    770c:	e8df f003 	tbb	[pc, r3]
    7710:	12040408 	.word	0x12040408
    7714:	241c      	.short	0x241c
    7716:	10          	.byte	0x10
    7717:	00          	.byte	0x00
    7718:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
    771c:	4628      	mov	r0, r5
    771e:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    7720:	4620      	mov	r0, r4
    7722:	2100      	movs	r1, #0
		conn->err = reason;
    7724:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    7726:	f7ff fd55 	bl	71d4 <bt_conn_set_state>
			bt_le_scan_update(false);
    772a:	2000      	movs	r0, #0
    772c:	f7fe f8ae 	bl	588c <bt_le_scan_update>
		return 0;
    7730:	2500      	movs	r5, #0
    7732:	e7f3      	b.n	771c <bt_conn_disconnect+0x2c>
		BT_WARN("Deprecated: Use bt_le_adv_stop instead");
    7734:	2157      	movs	r1, #87	; 0x57
    7736:	480e      	ldr	r0, [pc, #56]	; (7770 <bt_conn_disconnect+0x80>)
    7738:	f00a fc06 	bl	11f48 <printk>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    773c:	2100      	movs	r1, #0
    773e:	4620      	mov	r0, r4
		conn->err = reason;
    7740:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    7742:	f7ff fd47 	bl	71d4 <bt_conn_set_state>
		return 0;
    7746:	e7f3      	b.n	7730 <bt_conn_disconnect+0x40>
			k_delayed_work_cancel(&conn->update_work);
    7748:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    774c:	f009 fc66 	bl	1101c <k_delayed_work_cancel>
}
    7750:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_create_conn_cancel();
    7754:	f7fd bf1e 	b.w	5594 <bt_le_create_conn_cancel>
	err = bt_hci_disconnect(conn->handle, reason);
    7758:	4629      	mov	r1, r5
    775a:	8820      	ldrh	r0, [r4, #0]
    775c:	f00c f91b 	bl	13996 <bt_hci_disconnect>
	if (err) {
    7760:	4605      	mov	r5, r0
    7762:	2800      	cmp	r0, #0
    7764:	d1da      	bne.n	771c <bt_conn_disconnect+0x2c>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    7766:	2108      	movs	r1, #8
    7768:	4620      	mov	r0, r4
    776a:	f7ff fd33 	bl	71d4 <bt_conn_set_state>
	return 0;
    776e:	e7d5      	b.n	771c <bt_conn_disconnect+0x2c>
    7770:	00019d3b 	.word	0x00019d3b

00007774 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
    7774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7776:	4604      	mov	r4, r0
    7778:	460d      	mov	r5, r1
    777a:	4617      	mov	r7, r2
    777c:	461e      	mov	r6, r3

	/*
	 * PDU must not be allocated from ISR as we block with 'K_FOREVER'
	 * during the allocation
	 */
	__ASSERT_NO_MSG(!k_is_in_isr());
    777e:	f00e ff81 	bl	16684 <k_is_in_isr>
    7782:	b158      	cbz	r0, 779c <bt_conn_create_pdu_timeout+0x28>
    7784:	4910      	ldr	r1, [pc, #64]	; (77c8 <bt_conn_create_pdu_timeout+0x54>)
    7786:	4811      	ldr	r0, [pc, #68]	; (77cc <bt_conn_create_pdu_timeout+0x58>)
    7788:	f640 13e8 	movw	r3, #2536	; 0x9e8
    778c:	4a10      	ldr	r2, [pc, #64]	; (77d0 <bt_conn_create_pdu_timeout+0x5c>)
    778e:	f00a fbdb 	bl	11f48 <printk>
    7792:	f640 11e8 	movw	r1, #2536	; 0x9e8
    7796:	480e      	ldr	r0, [pc, #56]	; (77d0 <bt_conn_create_pdu_timeout+0x5c>)
    7798:	f00a fe6c 	bl	12474 <assert_post_action>
	} else {
#if defined(CONFIG_NET_BUF_LOG)
		buf = net_buf_alloc_fixed_debug(pool, timeout, func,
							line);
#else
		buf = net_buf_alloc(pool, timeout);
    779c:	480d      	ldr	r0, [pc, #52]	; (77d4 <bt_conn_create_pdu_timeout+0x60>)
    779e:	463a      	mov	r2, r7
    77a0:	2c00      	cmp	r4, #0
    77a2:	bf18      	it	ne
    77a4:	4620      	movne	r0, r4
    77a6:	4633      	mov	r3, r6
    77a8:	f00d ff1d 	bl	155e6 <net_buf_alloc_fixed>
#endif
	}

	if (!buf) {
    77ac:	4604      	mov	r4, r0
    77ae:	b928      	cbnz	r0, 77bc <bt_conn_create_pdu_timeout+0x48>
		BT_WARN("Unable to allocate buffer within timeout");
    77b0:	2157      	movs	r1, #87	; 0x57
    77b2:	4809      	ldr	r0, [pc, #36]	; (77d8 <bt_conn_create_pdu_timeout+0x64>)
    77b4:	f00a fbc8 	bl	11f48 <printk>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
    77b8:	4620      	mov	r0, r4
    77ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_reserve(buf, reserve);
    77bc:	1d69      	adds	r1, r5, #5
    77be:	3008      	adds	r0, #8
    77c0:	f005 fd6e 	bl	d2a0 <net_buf_simple_reserve>
	return buf;
    77c4:	e7f8      	b.n	77b8 <bt_conn_create_pdu_timeout+0x44>
    77c6:	bf00      	nop
    77c8:	00019d67 	.word	0x00019d67
    77cc:	00017b50 	.word	0x00017b50
    77d0:	00019aef 	.word	0x00019aef
    77d4:	2000052c 	.word	0x2000052c
    77d8:	00019d76 	.word	0x00019d76

000077dc <bt_conn_create_frag_timeout>:
{
    77dc:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    77de:	4801      	ldr	r0, [pc, #4]	; (77e4 <bt_conn_create_frag_timeout+0x8>)
    77e0:	f7ff bfc8 	b.w	7774 <bt_conn_create_pdu_timeout>
    77e4:	200005b0 	.word	0x200005b0

000077e8 <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    77e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    77ec:	4606      	mov	r6, r0
	frag = bt_conn_create_frag(0);
    77ee:	f04f 33ff 	mov.w	r3, #4294967295
    77f2:	f04f 32ff 	mov.w	r2, #4294967295
    77f6:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    77f8:	460c      	mov	r4, r1
	frag = bt_conn_create_frag(0);
    77fa:	f7ff ffef 	bl	77dc <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    77fe:	7833      	ldrb	r3, [r6, #0]
	frag = bt_conn_create_frag(0);
    7800:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    7802:	2b07      	cmp	r3, #7
    7804:	f04f 0600 	mov.w	r6, #0
    7808:	d005      	beq.n	7816 <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
    780a:	f005 fda7 	bl	d35c <net_buf_unref>
		return NULL;
    780e:	4635      	mov	r5, r6
}
    7810:	4628      	mov	r0, r5
    7812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    7816:	6146      	str	r6, [r0, #20]
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    7818:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.mtu;
    781c:	4e0c      	ldr	r6, [pc, #48]	; (7850 <create_frag.isra.0+0x68>)
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    781e:	4638      	mov	r0, r7
    7820:	f8b6 80b0 	ldrh.w	r8, [r6, #176]	; 0xb0
    7824:	f00d ff08 	bl	15638 <net_buf_simple_tailroom>
    7828:	4580      	cmp	r8, r0
    782a:	d20c      	bcs.n	7846 <create_frag.isra.0+0x5e>
	return bt_dev.le.mtu;
    782c:	f8b6 60b0 	ldrh.w	r6, [r6, #176]	; 0xb0
	net_buf_add_mem(frag, buf->data, frag_len);
    7830:	f854 1f08 	ldr.w	r1, [r4, #8]!
    7834:	4632      	mov	r2, r6
    7836:	4638      	mov	r0, r7
    7838:	f00d ff06 	bl	15648 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    783c:	4631      	mov	r1, r6
    783e:	4620      	mov	r0, r4
    7840:	f005 febc 	bl	d5bc <net_buf_simple_pull>
	return frag;
    7844:	e7e4      	b.n	7810 <create_frag.isra.0+0x28>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    7846:	4638      	mov	r0, r7
    7848:	f00d fef6 	bl	15638 <net_buf_simple_tailroom>
    784c:	b286      	uxth	r6, r0
    784e:	e7ef      	b.n	7830 <create_frag.isra.0+0x48>
    7850:	20000000 	.word	0x20000000

00007854 <bt_conn_process_tx>:
{
    7854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    7856:	7b43      	ldrb	r3, [r0, #13]
{
    7858:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    785a:	b973      	cbnz	r3, 787a <bt_conn_process_tx+0x26>
    785c:	1d03      	adds	r3, r0, #4
    785e:	e8d3 2fef 	ldaex	r2, [r3]
    7862:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    7866:	e8c3 1fe4 	stlex	r4, r1, [r3]
    786a:	2c00      	cmp	r4, #0
    786c:	d1f7      	bne.n	785e <bt_conn_process_tx+0xa>
    786e:	0653      	lsls	r3, r2, #25
    7870:	d503      	bpl.n	787a <bt_conn_process_tx+0x26>
}
    7872:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    7876:	f7ff ba9d 	b.w	6db4 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    787a:	2200      	movs	r2, #0
    787c:	2300      	movs	r3, #0
    787e:	f105 0034 	add.w	r0, r5, #52	; 0x34
    7882:	f005 fcd9 	bl	d238 <net_buf_get>
	BT_ASSERT(buf);
    7886:	4604      	mov	r4, r0
    7888:	b960      	cbnz	r0, 78a4 <bt_conn_process_tx+0x50>
    788a:	f240 631d 	movw	r3, #1565	; 0x61d
    788e:	4a1f      	ldr	r2, [pc, #124]	; (790c <bt_conn_process_tx+0xb8>)
    7890:	491f      	ldr	r1, [pc, #124]	; (7910 <bt_conn_process_tx+0xbc>)
    7892:	4820      	ldr	r0, [pc, #128]	; (7914 <bt_conn_process_tx+0xc0>)
    7894:	f00a fb58 	bl	11f48 <printk>
    7898:	4040      	eors	r0, r0
    789a:	f380 8811 	msr	BASEPRI, r0
    789e:	f04f 0003 	mov.w	r0, #3
    78a2:	df02      	svc	2
	return bt_dev.le.mtu;
    78a4:	4f1c      	ldr	r7, [pc, #112]	; (7918 <bt_conn_process_tx+0xc4>)
	if (buf->len <= conn_mtu(conn)) {
    78a6:	89a1      	ldrh	r1, [r4, #12]
    78a8:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
    78ac:	4291      	cmp	r1, r2
    78ae:	d807      	bhi.n	78c0 <bt_conn_process_tx+0x6c>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    78b0:	2300      	movs	r3, #0
    78b2:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
    78b4:	4621      	mov	r1, r4
    78b6:	4628      	mov	r0, r5
    78b8:	f7ff f9a6 	bl	6c08 <send_frag>
	if (!send_buf(conn, buf)) {
    78bc:	b140      	cbz	r0, 78d0 <bt_conn_process_tx+0x7c>
}
    78be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
    78c0:	f105 060d 	add.w	r6, r5, #13
    78c4:	4621      	mov	r1, r4
    78c6:	4630      	mov	r0, r6
    78c8:	f7ff ff8e 	bl	77e8 <create_frag.isra.0>
	if (!frag) {
    78cc:	4601      	mov	r1, r0
    78ce:	b920      	cbnz	r0, 78da <bt_conn_process_tx+0x86>
		net_buf_unref(buf);
    78d0:	4620      	mov	r0, r4
}
    78d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    78d6:	f005 bd41 	b.w	d35c <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    78da:	2301      	movs	r3, #1
    78dc:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    78de:	4628      	mov	r0, r5
    78e0:	f7ff f992 	bl	6c08 <send_frag>
    78e4:	2800      	cmp	r0, #0
    78e6:	d0f3      	beq.n	78d0 <bt_conn_process_tx+0x7c>
	while (buf->len > conn_mtu(conn)) {
    78e8:	89a2      	ldrh	r2, [r4, #12]
    78ea:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
    78ee:	429a      	cmp	r2, r3
    78f0:	d802      	bhi.n	78f8 <bt_conn_process_tx+0xa4>
	return send_frag(conn, buf, BT_ACL_CONT, false);
    78f2:	2300      	movs	r3, #0
    78f4:	2201      	movs	r2, #1
    78f6:	e7dd      	b.n	78b4 <bt_conn_process_tx+0x60>
		frag = create_frag(conn, buf);
    78f8:	4621      	mov	r1, r4
    78fa:	4630      	mov	r0, r6
    78fc:	f7ff ff74 	bl	77e8 <create_frag.isra.0>
		if (!frag) {
    7900:	4601      	mov	r1, r0
    7902:	2800      	cmp	r0, #0
    7904:	d0e4      	beq.n	78d0 <bt_conn_process_tx+0x7c>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    7906:	2301      	movs	r3, #1
    7908:	461a      	mov	r2, r3
    790a:	e7e8      	b.n	78de <bt_conn_process_tx+0x8a>
    790c:	00019aef 	.word	0x00019aef
    7910:	0001afce 	.word	0x0001afce
    7914:	00017b50 	.word	0x00017b50
    7918:	20000000 	.word	0x20000000

0000791c <bt_conn_auth_cb_register>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
    791c:	4b0c      	ldr	r3, [pc, #48]	; (7950 <bt_conn_auth_cb_register+0x34>)
    791e:	b908      	cbnz	r0, 7924 <bt_conn_auth_cb_register+0x8>
		bt_auth = NULL;
    7920:	6018      	str	r0, [r3, #0]
		return 0;
    7922:	4770      	bx	lr
	}

	if (bt_auth) {
    7924:	681a      	ldr	r2, [r3, #0]
    7926:	b962      	cbnz	r2, 7942 <bt_conn_auth_cb_register+0x26>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
    7928:	6902      	ldr	r2, [r0, #16]
    792a:	b93a      	cbnz	r2, 793c <bt_conn_auth_cb_register+0x20>
    792c:	6802      	ldr	r2, [r0, #0]
    792e:	b95a      	cbnz	r2, 7948 <bt_conn_auth_cb_register+0x2c>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
    7930:	6842      	ldr	r2, [r0, #4]
    7932:	b94a      	cbnz	r2, 7948 <bt_conn_auth_cb_register+0x2c>
    7934:	6882      	ldr	r2, [r0, #8]
    7936:	b93a      	cbnz	r2, 7948 <bt_conn_auth_cb_register+0x2c>
    7938:	6942      	ldr	r2, [r0, #20]
    793a:	b92a      	cbnz	r2, 7948 <bt_conn_auth_cb_register+0x2c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
    793c:	6018      	str	r0, [r3, #0]
	return 0;
    793e:	2000      	movs	r0, #0
    7940:	4770      	bx	lr
		return -EALREADY;
    7942:	f06f 0044 	mvn.w	r0, #68	; 0x44
    7946:	4770      	bx	lr
		return -EINVAL;
    7948:	f06f 0015 	mvn.w	r0, #21
}
    794c:	4770      	bx	lr
    794e:	bf00      	nop
    7950:	20000d20 	.word	0x20000d20

00007954 <bt_conn_auth_pairing_confirm>:
	return -EINVAL;
}

int bt_conn_auth_pairing_confirm(struct bt_conn *conn)
{
	if (!bt_auth) {
    7954:	4a05      	ldr	r2, [pc, #20]	; (796c <bt_conn_auth_pairing_confirm+0x18>)
    7956:	6812      	ldr	r2, [r2, #0]
    7958:	b122      	cbz	r2, 7964 <bt_conn_auth_pairing_confirm+0x10>
		return -EINVAL;
	}

	switch (conn->type) {
    795a:	7883      	ldrb	r3, [r0, #2]
    795c:	2b01      	cmp	r3, #1
    795e:	d101      	bne.n	7964 <bt_conn_auth_pairing_confirm+0x10>
#if defined(CONFIG_BT_SMP)
	case BT_CONN_TYPE_LE:
		return bt_smp_auth_pairing_confirm(conn);
    7960:	f005 b92a 	b.w	cbb8 <bt_smp_auth_pairing_confirm>
		return ssp_confirm_reply(conn);
#endif /* CONFIG_BT_BREDR */
	default:
		return -EINVAL;
	}
}
    7964:	f06f 0015 	mvn.w	r0, #21
    7968:	4770      	bx	lr
    796a:	bf00      	nop
    796c:	20000d20 	.word	0x20000d20

00007970 <bt_conn_index>:
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_index(struct bt_conn *conn)
{
	u8_t index = conn - conns;
    7970:	4b0c      	ldr	r3, [pc, #48]	; (79a4 <bt_conn_index+0x34>)
{
    7972:	b510      	push	{r4, lr}
	u8_t index = conn - conns;
    7974:	1ac0      	subs	r0, r0, r3
    7976:	1083      	asrs	r3, r0, #2
    7978:	480b      	ldr	r0, [pc, #44]	; (79a8 <bt_conn_index+0x38>)
    797a:	4358      	muls	r0, r3

	__ASSERT(index < CONFIG_BT_MAX_CONN, "Invalid bt_conn pointer");
    797c:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
    7980:	d00e      	beq.n	79a0 <bt_conn_index+0x30>
    7982:	490a      	ldr	r1, [pc, #40]	; (79ac <bt_conn_index+0x3c>)
    7984:	f640 239f 	movw	r3, #2719	; 0xa9f
    7988:	4a09      	ldr	r2, [pc, #36]	; (79b0 <bt_conn_index+0x40>)
    798a:	480a      	ldr	r0, [pc, #40]	; (79b4 <bt_conn_index+0x44>)
    798c:	f00a fadc 	bl	11f48 <printk>
    7990:	4809      	ldr	r0, [pc, #36]	; (79b8 <bt_conn_index+0x48>)
    7992:	f00a fad9 	bl	11f48 <printk>
    7996:	f640 219f 	movw	r1, #2719	; 0xa9f
    799a:	4805      	ldr	r0, [pc, #20]	; (79b0 <bt_conn_index+0x40>)
    799c:	f00a fd6a 	bl	12474 <assert_post_action>
	return index;
}
    79a0:	4620      	mov	r0, r4
    79a2:	bd10      	pop	{r4, pc}
    79a4:	20000dc8 	.word	0x20000dc8
    79a8:	2fa0be83 	.word	0x2fa0be83
    79ac:	00019da4 	.word	0x00019da4
    79b0:	00019aef 	.word	0x00019aef
    79b4:	00017b50 	.word	0x00017b50
    79b8:	00019dae 	.word	0x00019dae

000079bc <bt_conn_lookup_index>:

struct bt_conn *bt_conn_lookup_index(u8_t index)
{
    79bc:	b508      	push	{r3, lr}
	struct bt_conn *conn;

	if (index >= ARRAY_SIZE(conns)) {
    79be:	b108      	cbz	r0, 79c4 <bt_conn_lookup_index+0x8>
		return NULL;
    79c0:	2000      	movs	r0, #0
	if (!atomic_get(&conn->ref)) {
		return NULL;
	}

	return bt_conn_ref(conn);
}
    79c2:	bd08      	pop	{r3, pc}
	if (!atomic_get(&conn->ref)) {
    79c4:	4804      	ldr	r0, [pc, #16]	; (79d8 <bt_conn_lookup_index+0x1c>)
    79c6:	f00c f8ad 	bl	13b24 <atomic_get>
    79ca:	2800      	cmp	r0, #0
    79cc:	d0f8      	beq.n	79c0 <bt_conn_lookup_index+0x4>
	atomic_val_t old = atomic_inc(&conn->ref);
    79ce:	4802      	ldr	r0, [pc, #8]	; (79d8 <bt_conn_lookup_index+0x1c>)
    79d0:	f00c f8bf 	bl	13b52 <atomic_inc>
	return bt_conn_ref(conn);
    79d4:	4801      	ldr	r0, [pc, #4]	; (79dc <bt_conn_lookup_index+0x20>)
    79d6:	e7f4      	b.n	79c2 <bt_conn_lookup_index+0x6>
    79d8:	20000e20 	.word	0x20000e20
    79dc:	20000dc8 	.word	0x20000dc8

000079e0 <bt_conn_init>:

int bt_conn_init(void)
{
    79e0:	b570      	push	{r4, r5, r6, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    79e2:	2400      	movs	r4, #0
    79e4:	4d12      	ldr	r5, [pc, #72]	; (7a30 <bt_conn_init+0x50>)
		k_fifo_put(&free_tx, &conn_tx[i]);
    79e6:	4e13      	ldr	r6, [pc, #76]	; (7a34 <bt_conn_init+0x54>)
    79e8:	4629      	mov	r1, r5
    79ea:	4630      	mov	r0, r6
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    79ec:	3401      	adds	r4, #1
		k_fifo_put(&free_tx, &conn_tx[i]);
    79ee:	f00e fdfa 	bl	165e6 <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    79f2:	2c0a      	cmp	r4, #10
    79f4:	f105 0510 	add.w	r5, r5, #16
    79f8:	d1f6      	bne.n	79e8 <bt_conn_init+0x8>
	}

	bt_att_init();
    79fa:	f00c fe42 	bl	14682 <bt_att_init>

	err = bt_smp_init();
    79fe:	f005 f993 	bl	cd28 <bt_smp_init>
	if (err) {
    7a02:	4604      	mov	r4, r0
    7a04:	b988      	cbnz	r0, 7a2a <bt_conn_init+0x4a>
		return err;
	}

	bt_l2cap_init();
    7a06:	f00c fbe3 	bl	141d0 <bt_l2cap_init>
	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
			struct bt_conn *conn = &conns[i];

			if (!atomic_get(&conn->ref)) {
    7a0a:	4b0b      	ldr	r3, [pc, #44]	; (7a38 <bt_conn_init+0x58>)
    7a0c:	f103 0058 	add.w	r0, r3, #88	; 0x58
    7a10:	f00c f888 	bl	13b24 <atomic_get>
    7a14:	b148      	cbz	r0, 7a2a <bt_conn_init+0x4a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    7a16:	1d18      	adds	r0, r3, #4
    7a18:	f00c f884 	bl	13b24 <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_WHITELIST)
			if (atomic_test_bit(conn->flags,
    7a1c:	07c2      	lsls	r2, r0, #31
    7a1e:	d504      	bpl.n	7a2a <bt_conn_init+0x4a>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    7a20:	2102      	movs	r1, #2
    7a22:	4618      	mov	r0, r3
				conn->id = BT_ID_DEFAULT;
    7a24:	721c      	strb	r4, [r3, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    7a26:	f7ff fbd5 	bl	71d4 <bt_conn_set_state>
#endif /* !defined(CONFIG_BT_WHITELIST) */
		}
	}

	return 0;
}
    7a2a:	4620      	mov	r0, r4
    7a2c:	bd70      	pop	{r4, r5, r6, pc}
    7a2e:	bf00      	nop
    7a30:	20000d28 	.word	0x20000d28
    7a34:	200004e4 	.word	0x200004e4
    7a38:	20000dc8 	.word	0x20000dc8

00007a3c <get_ident>:

static u8_t get_ident(void)
{
	static u8_t ident;

	ident++;
    7a3c:	4b04      	ldr	r3, [pc, #16]	; (7a50 <get_ident+0x14>)
    7a3e:	781a      	ldrb	r2, [r3, #0]
    7a40:	3201      	adds	r2, #1
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
    7a42:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    7a46:	bf08      	it	eq
    7a48:	2201      	moveq	r2, #1
    7a4a:	701a      	strb	r2, [r3, #0]
	}

	return ident;
}
    7a4c:	7818      	ldrb	r0, [r3, #0]
    7a4e:	4770      	bx	lr
    7a50:	20001f64 	.word	0x20001f64

00007a54 <l2cap_server_lookup_psm>:
#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
static struct bt_l2cap_server *l2cap_server_lookup_psm(u16_t psm)
{
	struct bt_l2cap_server *server;

	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    7a54:	4a08      	ldr	r2, [pc, #32]	; (7a78 <l2cap_server_lookup_psm+0x24>)
{
    7a56:	4603      	mov	r3, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    7a58:	6810      	ldr	r0, [r2, #0]
    7a5a:	b158      	cbz	r0, 7a74 <l2cap_server_lookup_psm+0x20>
    7a5c:	3808      	subs	r0, #8
    7a5e:	b900      	cbnz	r0, 7a62 <l2cap_server_lookup_psm+0xe>
    7a60:	4770      	bx	lr
		if (server->psm == psm) {
    7a62:	8802      	ldrh	r2, [r0, #0]
    7a64:	429a      	cmp	r2, r3
    7a66:	d005      	beq.n	7a74 <l2cap_server_lookup_psm+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
    7a68:	f110 0208 	adds.w	r2, r0, #8
    7a6c:	d001      	beq.n	7a72 <l2cap_server_lookup_psm+0x1e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    7a6e:	6880      	ldr	r0, [r0, #8]
    7a70:	e7f3      	b.n	7a5a <l2cap_server_lookup_psm+0x6>
			return server;
		}
	}

	return NULL;
    7a72:	4610      	mov	r0, r2
}
    7a74:	4770      	bx	lr
    7a76:	bf00      	nop
    7a78:	20000f24 	.word	0x20000f24

00007a7c <l2cap_accept>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    7a7c:	b508      	push	{r3, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    7a7e:	4b07      	ldr	r3, [pc, #28]	; (7a9c <l2cap_accept+0x20>)
{
    7a80:	4602      	mov	r2, r0
		if (l2cap->chan.chan.conn) {
    7a82:	6818      	ldr	r0, [r3, #0]
    7a84:	b918      	cbnz	r0, 7a8e <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    7a86:	4a06      	ldr	r2, [pc, #24]	; (7aa0 <l2cap_accept+0x24>)
    7a88:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
    7a8a:	600b      	str	r3, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    7a8c:	bd08      	pop	{r3, pc}
	BT_ERR("No available L2CAP context for conn %p", conn);
    7a8e:	4805      	ldr	r0, [pc, #20]	; (7aa4 <l2cap_accept+0x28>)
    7a90:	2145      	movs	r1, #69	; 0x45
    7a92:	f00a fa59 	bl	11f48 <printk>
    7a96:	f06f 000b 	mvn.w	r0, #11
    7a9a:	e7f7      	b.n	7a8c <l2cap_accept+0x10>
    7a9c:	20000e74 	.word	0x20000e74
    7aa0:	0001708c 	.word	0x0001708c
    7aa4:	00019e32 	.word	0x00019e32

00007aa8 <l2cap_create_le_sig_pdu.isra.0>:
	if (code == BT_L2CAP_DISCONN_REQ) {
    7aa8:	2806      	cmp	r0, #6
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    7aaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7aac:	4605      	mov	r5, r0
    7aae:	460f      	mov	r7, r1
	return bt_conn_create_pdu_timeout(pool,
    7ab0:	480e      	ldr	r0, [pc, #56]	; (7aec <l2cap_create_le_sig_pdu.isra.0+0x44>)
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    7ab2:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
    7ab4:	f04f 0300 	mov.w	r3, #0
    7ab8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    7abc:	f04f 0104 	mov.w	r1, #4
    7ac0:	bf18      	it	ne
    7ac2:	2000      	movne	r0, #0
    7ac4:	f7ff fe56 	bl	7774 <bt_conn_create_pdu_timeout>
	if (!buf) {
    7ac8:	4604      	mov	r4, r0
    7aca:	b930      	cbnz	r0, 7ada <l2cap_create_le_sig_pdu.isra.0+0x32>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    7acc:	462a      	mov	r2, r5
    7ace:	2145      	movs	r1, #69	; 0x45
    7ad0:	4807      	ldr	r0, [pc, #28]	; (7af0 <l2cap_create_le_sig_pdu.isra.0+0x48>)
    7ad2:	f00a fa39 	bl	11f48 <printk>
}
    7ad6:	4620      	mov	r0, r4
    7ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	hdr = net_buf_add(buf, sizeof(*hdr));
    7ada:	2104      	movs	r1, #4
    7adc:	3008      	adds	r0, #8
    7ade:	f005 fdaf 	bl	d640 <net_buf_simple_add>
	hdr->code = code;
    7ae2:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
    7ae4:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    7ae6:	8046      	strh	r6, [r0, #2]
	return buf;
    7ae8:	e7f5      	b.n	7ad6 <l2cap_create_le_sig_pdu.isra.0+0x2e>
    7aea:	bf00      	nop
    7aec:	20000558 	.word	0x20000558
    7af0:	00019e5e 	.word	0x00019e5e

00007af4 <l2cap_chan_tx_init>:
{
    7af4:	b538      	push	{r3, r4, r5, lr}
    7af6:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    7af8:	2500      	movs	r5, #0
	(void)memset(&chan->tx, 0, sizeof(chan->tx));
    7afa:	220c      	movs	r2, #12
    7afc:	2100      	movs	r1, #0
    7afe:	3048      	adds	r0, #72	; 0x48
    7b00:	f00b fd61 	bl	135c6 <memset>
    7b04:	f104 0350 	add.w	r3, r4, #80	; 0x50
    7b08:	e8d3 2fef 	ldaex	r2, [r3]
    7b0c:	e8c3 5fe1 	stlex	r1, r5, [r3]
    7b10:	2900      	cmp	r1, #0
    7b12:	d1f9      	bne.n	7b08 <l2cap_chan_tx_init+0x14>
	z_impl_k_queue_init(queue);
    7b14:	f104 0054 	add.w	r0, r4, #84	; 0x54
    7b18:	f00e fd58 	bl	165cc <z_impl_k_queue_init>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    7b1c:	4b02      	ldr	r3, [pc, #8]	; (7b28 <l2cap_chan_tx_init+0x34>)
    7b1e:	6765      	str	r5, [r4, #116]	; 0x74
    7b20:	e9c4 351e 	strd	r3, r5, [r4, #120]	; 0x78
}
    7b24:	bd38      	pop	{r3, r4, r5, pc}
    7b26:	bf00      	nop
    7b28:	00014053 	.word	0x00014053

00007b2c <k_work_submit_to_queue.constprop.0>:
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
    7b2c:	4601      	mov	r1, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7b2e:	f100 0308 	add.w	r3, r0, #8
    7b32:	e8d3 2fef 	ldaex	r2, [r3]
    7b36:	f042 0001 	orr.w	r0, r2, #1
    7b3a:	e8c3 0fec 	stlex	ip, r0, [r3]
    7b3e:	f1bc 0f00 	cmp.w	ip, #0
    7b42:	d1f6      	bne.n	7b32 <k_work_submit_to_queue.constprop.0+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    7b44:	07d3      	lsls	r3, r2, #31
    7b46:	d402      	bmi.n	7b4e <k_work_submit_to_queue.constprop.0+0x22>
		k_queue_append(&work_q->queue, work);
    7b48:	4801      	ldr	r0, [pc, #4]	; (7b50 <k_work_submit_to_queue.constprop.0+0x24>)
    7b4a:	f00e bd4c 	b.w	165e6 <k_queue_append>
}
    7b4e:	4770      	bx	lr
    7b50:	20001dc8 	.word	0x20001dc8

00007b54 <l2cap_rtx_timeout>:
{
    7b54:	b538      	push	{r3, r4, r5, lr}
    7b56:	4604      	mov	r4, r0
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
    7b58:	f1a0 0510 	sub.w	r5, r0, #16
	BT_ERR("chan %p timeout", chan);
    7b5c:	462a      	mov	r2, r5
    7b5e:	2145      	movs	r1, #69	; 0x45
    7b60:	4806      	ldr	r0, [pc, #24]	; (7b7c <l2cap_rtx_timeout+0x28>)
    7b62:	f00a f9f1 	bl	11f48 <printk>
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    7b66:	f854 0c10 	ldr.w	r0, [r4, #-16]
    7b6a:	4629      	mov	r1, r5
    7b6c:	f00c f9d0 	bl	13f10 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    7b70:	4628      	mov	r0, r5
}
    7b72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    7b76:	f00c b9e4 	b.w	13f42 <bt_l2cap_chan_del>
    7b7a:	bf00      	nop
    7b7c:	00019e8b 	.word	0x00019e8b

00007b80 <l2cap_chan_le_send>:
{
    7b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7b84:	4606      	mov	r6, r0
    7b86:	460d      	mov	r5, r1
    7b88:	4617      	mov	r7, r2
    7b8a:	b085      	sub	sp, #20
	if (!test_and_dec(&ch->tx.credits)) {
    7b8c:	f100 0850 	add.w	r8, r0, #80	; 0x50
		old_value = atomic_get(target);
    7b90:	4640      	mov	r0, r8
    7b92:	f00c f927 	bl	13de4 <atomic_get>
		if (!old_value) {
    7b96:	2800      	cmp	r0, #0
    7b98:	f000 80b8 	beq.w	7d0c <l2cap_chan_le_send+0x18c>
		new_value = old_value - 1;
    7b9c:	1e43      	subs	r3, r0, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    7b9e:	e8d8 2fef 	ldaex	r2, [r8]
    7ba2:	4282      	cmp	r2, r0
    7ba4:	d103      	bne.n	7bae <l2cap_chan_le_send+0x2e>
    7ba6:	e8c8 3fe1 	stlex	r1, r3, [r8]
    7baa:	2900      	cmp	r1, #0
    7bac:	d1f7      	bne.n	7b9e <l2cap_chan_le_send+0x1e>
	} while (atomic_cas(target, old_value, new_value) == 0);
    7bae:	d1ef      	bne.n	7b90 <l2cap_chan_le_send+0x10>
	net_buf_simple_save(&buf->b, &state);
    7bb0:	f105 0b08 	add.w	fp, r5, #8
	state->offset = net_buf_simple_headroom(buf);
    7bb4:	4658      	mov	r0, fp
    7bb6:	f00d fd3b 	bl	15630 <net_buf_simple_headroom>
	state->len = buf->len;
    7bba:	f8b5 a00c 	ldrh.w	sl, [r5, #12]
	if (buf->len + sdu_hdr_len > ch->tx.mps) {
    7bbe:	f8b6 304c 	ldrh.w	r3, [r6, #76]	; 0x4c
    7bc2:	eb0a 0207 	add.w	r2, sl, r7
    7bc6:	429a      	cmp	r2, r3
	state->offset = net_buf_simple_headroom(buf);
    7bc8:	9002      	str	r0, [sp, #8]
    7bca:	d81e      	bhi.n	7c0a <l2cap_chan_le_send+0x8a>
	if (net_buf_headroom(buf) >= headroom && !buf->frags) {
    7bcc:	4658      	mov	r0, fp
    7bce:	f00d fd2f 	bl	15630 <net_buf_simple_headroom>
	headroom = BT_L2CAP_CHAN_SEND_RESERVE + sdu_hdr_len;
    7bd2:	f107 0309 	add.w	r3, r7, #9
	if (net_buf_headroom(buf) >= headroom && !buf->frags) {
    7bd6:	b29b      	uxth	r3, r3
    7bd8:	4298      	cmp	r0, r3
    7bda:	d316      	bcc.n	7c0a <l2cap_chan_le_send+0x8a>
    7bdc:	682b      	ldr	r3, [r5, #0]
    7bde:	b9a3      	cbnz	r3, 7c0a <l2cap_chan_le_send+0x8a>
		if (sdu_hdr_len) {
    7be0:	b137      	cbz	r7, 7bf0 <l2cap_chan_le_send+0x70>
			net_buf_push_le16(buf, net_buf_frags_len(buf));
    7be2:	4628      	mov	r0, r5
    7be4:	f00c f8b4 	bl	13d50 <net_buf_frags_len>
    7be8:	b281      	uxth	r1, r0
    7bea:	4658      	mov	r0, fp
    7bec:	f00d fd00 	bl	155f0 <net_buf_simple_push_le16>
		return net_buf_ref(buf);
    7bf0:	4628      	mov	r0, r5
    7bf2:	f005 fbf9 	bl	d3e8 <net_buf_ref>
	if (!seg) {
    7bf6:	4604      	mov	r4, r0
    7bf8:	2800      	cmp	r0, #0
    7bfa:	d138      	bne.n	7c6e <l2cap_chan_le_send+0xee>
	return atomic_add(target, 1);
    7bfc:	2101      	movs	r1, #1
    7bfe:	4640      	mov	r0, r8
    7c00:	f00c f8f3 	bl	13dea <atomic_add>
		return -EAGAIN;
    7c04:	f06f 070a 	mvn.w	r7, #10
    7c08:	e07a      	b.n	7d00 <l2cap_chan_le_send+0x180>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    7c0a:	79a8      	ldrb	r0, [r5, #6]
    7c0c:	f005 fa06 	bl	d01c <net_buf_pool_get>
	seg = net_buf_alloc(pool, K_NO_WAIT);
    7c10:	2200      	movs	r2, #0
    7c12:	2300      	movs	r3, #0
    7c14:	f00d fce7 	bl	155e6 <net_buf_alloc_fixed>
	if (seg) {
    7c18:	4604      	mov	r4, r0
    7c1a:	2800      	cmp	r0, #0
    7c1c:	d04f      	beq.n	7cbe <l2cap_chan_le_send+0x13e>
		net_buf_reserve(seg, BT_L2CAP_CHAN_SEND_RESERVE);
    7c1e:	2109      	movs	r1, #9
    7c20:	3008      	adds	r0, #8
    7c22:	f005 fb3d 	bl	d2a0 <net_buf_simple_reserve>
	if (sdu_hdr_len) {
    7c26:	f104 0908 	add.w	r9, r4, #8
    7c2a:	b137      	cbz	r7, 7c3a <l2cap_chan_le_send+0xba>
		net_buf_add_le16(seg, net_buf_frags_len(buf));
    7c2c:	4628      	mov	r0, r5
    7c2e:	f00c f88f 	bl	13d50 <net_buf_frags_len>
    7c32:	b281      	uxth	r1, r0
    7c34:	4648      	mov	r0, r9
    7c36:	f00d fd1a 	bl	1566e <net_buf_simple_add_le16>
	len = MIN(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    7c3a:	4648      	mov	r0, r9
    7c3c:	f00d fcfc 	bl	15638 <net_buf_simple_tailroom>
    7c40:	f8b6 104c 	ldrh.w	r1, [r6, #76]	; 0x4c
    7c44:	1bc9      	subs	r1, r1, r7
    7c46:	4288      	cmp	r0, r1
    7c48:	d242      	bcs.n	7cd0 <l2cap_chan_le_send+0x150>
    7c4a:	4648      	mov	r0, r9
    7c4c:	f00d fcf4 	bl	15638 <net_buf_simple_tailroom>
    7c50:	b282      	uxth	r2, r0
	len = MIN(buf->len, len);
    7c52:	89a9      	ldrh	r1, [r5, #12]
	net_buf_add_mem(seg, buf->data, len);
    7c54:	4648      	mov	r0, r9
    7c56:	428a      	cmp	r2, r1
    7c58:	bf28      	it	cs
    7c5a:	460a      	movcs	r2, r1
    7c5c:	68a9      	ldr	r1, [r5, #8]
    7c5e:	9203      	str	r2, [sp, #12]
    7c60:	f00d fcf2 	bl	15648 <net_buf_simple_add_mem>
	net_buf_pull(buf, len);
    7c64:	9a03      	ldr	r2, [sp, #12]
    7c66:	4658      	mov	r0, fp
    7c68:	4611      	mov	r1, r2
    7c6a:	f005 fca7 	bl	d5bc <net_buf_simple_pull>
	len = seg->len - sdu_hdr_len;
    7c6e:	89a2      	ldrh	r2, [r4, #12]
	if ((buf == seg || !buf->len) && ch->chan.ops->sent) {
    7c70:	42a5      	cmp	r5, r4
    7c72:	f8b6 1048 	ldrh.w	r1, [r6, #72]	; 0x48
	len = seg->len - sdu_hdr_len;
    7c76:	eba2 0707 	sub.w	r7, r2, r7
	if ((buf == seg || !buf->len) && ch->chan.ops->sent) {
    7c7a:	d001      	beq.n	7c80 <l2cap_chan_le_send+0x100>
    7c7c:	89ab      	ldrh	r3, [r5, #12]
    7c7e:	bb4b      	cbnz	r3, 7cd4 <l2cap_chan_le_send+0x154>
    7c80:	6873      	ldr	r3, [r6, #4]
    7c82:	695b      	ldr	r3, [r3, #20]
    7c84:	b333      	cbz	r3, 7cd4 <l2cap_chan_le_send+0x154>
		err = bt_l2cap_send_cb(ch->chan.conn, ch->tx.cid, seg,
    7c86:	4b24      	ldr	r3, [pc, #144]	; (7d18 <l2cap_chan_le_send+0x198>)
    7c88:	9600      	str	r6, [sp, #0]
		err = bt_l2cap_send_cb(ch->chan.conn, ch->tx.cid, seg,
    7c8a:	4622      	mov	r2, r4
    7c8c:	6830      	ldr	r0, [r6, #0]
    7c8e:	f00c f986 	bl	13f9e <bt_l2cap_send_cb>
    7c92:	4604      	mov	r4, r0
	if (err) {
    7c94:	b308      	cbz	r0, 7cda <l2cap_chan_le_send+0x15a>
		BT_WARN("Unable to send seg %d", err);
    7c96:	4602      	mov	r2, r0
    7c98:	2157      	movs	r1, #87	; 0x57
    7c9a:	4820      	ldr	r0, [pc, #128]	; (7d1c <l2cap_chan_le_send+0x19c>)
    7c9c:	f00a f954 	bl	11f48 <printk>
    7ca0:	2101      	movs	r1, #1
    7ca2:	4640      	mov	r0, r8
    7ca4:	f00c f8a1 	bl	13dea <atomic_add>
		if (err == -ENOBUFS) {
    7ca8:	f114 0f37 	cmn.w	r4, #55	; 0x37
    7cac:	d12c      	bne.n	7d08 <l2cap_chan_le_send+0x188>
	buf->data = buf->__buf + state->offset;
    7cae:	6928      	ldr	r0, [r5, #16]
    7cb0:	9b02      	ldr	r3, [sp, #8]
	buf->len = state->len;
    7cb2:	f8a5 a00c 	strh.w	sl, [r5, #12]
	buf->data = buf->__buf + state->offset;
    7cb6:	fa10 f083 	uxtah	r0, r0, r3
    7cba:	60a8      	str	r0, [r5, #8]
	buf->len = state->len;
    7cbc:	e7a2      	b.n	7c04 <l2cap_chan_le_send+0x84>
	return bt_conn_create_pdu_timeout(pool,
    7cbe:	2200      	movs	r2, #0
    7cc0:	2300      	movs	r3, #0
    7cc2:	2104      	movs	r1, #4
    7cc4:	f7ff fd56 	bl	7774 <bt_conn_create_pdu_timeout>
	if (!seg) {
    7cc8:	4604      	mov	r4, r0
    7cca:	2800      	cmp	r0, #0
    7ccc:	d1ab      	bne.n	7c26 <l2cap_chan_le_send+0xa6>
    7cce:	e795      	b.n	7bfc <l2cap_chan_le_send+0x7c>
	len = MIN(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    7cd0:	b28a      	uxth	r2, r1
    7cd2:	e7be      	b.n	7c52 <l2cap_chan_le_send+0xd2>
		err = bt_l2cap_send_cb(ch->chan.conn, ch->tx.cid, seg,
    7cd4:	4b12      	ldr	r3, [pc, #72]	; (7d20 <l2cap_chan_le_send+0x1a0>)
    7cd6:	9600      	str	r6, [sp, #0]
    7cd8:	e7d7      	b.n	7c8a <l2cap_chan_le_send+0x10a>
	if (!atomic_get(&ch->tx.credits)) {
    7cda:	4640      	mov	r0, r8
    7cdc:	f00c f882 	bl	13de4 <atomic_get>
    7ce0:	b970      	cbnz	r0, 7d00 <l2cap_chan_le_send+0x180>
		atomic_clear_bit(ch->chan.status, BT_L2CAP_STATUS_OUT);
    7ce2:	f106 0130 	add.w	r1, r6, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7ce6:	e8d1 3fef 	ldaex	r3, [r1]
    7cea:	f023 0301 	bic.w	r3, r3, #1
    7cee:	e8c1 3fe2 	stlex	r2, r3, [r1]
    7cf2:	2a00      	cmp	r2, #0
    7cf4:	d1f7      	bne.n	7ce6 <l2cap_chan_le_send+0x166>
		if (ch->chan.ops->status) {
    7cf6:	6873      	ldr	r3, [r6, #4]
    7cf8:	699b      	ldr	r3, [r3, #24]
    7cfa:	b10b      	cbz	r3, 7d00 <l2cap_chan_le_send+0x180>
			ch->chan.ops->status(&ch->chan, ch->chan.status);
    7cfc:	4630      	mov	r0, r6
    7cfe:	4798      	blx	r3
}
    7d00:	4638      	mov	r0, r7
    7d02:	b005      	add	sp, #20
    7d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7d08:	4627      	mov	r7, r4
    7d0a:	e7f9      	b.n	7d00 <l2cap_chan_le_send+0x180>
		BT_WARN("No credits to transmit packet");
    7d0c:	2157      	movs	r1, #87	; 0x57
    7d0e:	4805      	ldr	r0, [pc, #20]	; (7d24 <l2cap_chan_le_send+0x1a4>)
    7d10:	f00a f91a 	bl	11f48 <printk>
    7d14:	e776      	b.n	7c04 <l2cap_chan_le_send+0x84>
    7d16:	bf00      	nop
    7d18:	00013ef9 	.word	0x00013ef9
    7d1c:	00019ea0 	.word	0x00019ea0
    7d20:	00013ef3 	.word	0x00013ef3
    7d24:	00019ebb 	.word	0x00019ebb

00007d28 <l2cap_le_conn_req>:
{
    7d28:	b538      	push	{r3, r4, r5, lr}
    7d2a:	4604      	mov	r4, r0
	ch->chan.ident = get_ident();
    7d2c:	f7ff fe86 	bl	7a3c <get_ident>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_LE_CONN_REQ,
    7d30:	220a      	movs	r2, #10
	ch->chan.ident = get_ident();
    7d32:	4601      	mov	r1, r0
    7d34:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_LE_CONN_REQ,
    7d38:	2014      	movs	r0, #20
    7d3a:	f7ff feb5 	bl	7aa8 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    7d3e:	4605      	mov	r5, r0
    7d40:	b1e8      	cbz	r0, 7d7e <l2cap_le_conn_req+0x56>
	req = net_buf_add(buf, sizeof(*req));
    7d42:	210a      	movs	r1, #10
    7d44:	3008      	adds	r0, #8
    7d46:	f005 fc7b 	bl	d640 <net_buf_simple_add>
	req->psm = sys_cpu_to_le16(ch->chan.psm);
    7d4a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    7d4c:	f44f 12a0 	mov.w	r2, #1310720	; 0x140000
    7d50:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->rx.cid);
    7d52:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    7d54:	f104 0110 	add.w	r1, r4, #16
    7d58:	8043      	strh	r3, [r0, #2]
	req->mtu = sys_cpu_to_le16(ch->rx.mtu);
    7d5a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    7d5c:	8083      	strh	r3, [r0, #4]
	req->mps = sys_cpu_to_le16(ch->rx.mps);
    7d5e:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    7d62:	80c3      	strh	r3, [r0, #6]
	req->credits = sys_cpu_to_le16(ch->rx.init_credits);
    7d64:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    7d68:	8103      	strh	r3, [r0, #8]
    7d6a:	2300      	movs	r3, #0
    7d6c:	4805      	ldr	r0, [pc, #20]	; (7d84 <l2cap_le_conn_req+0x5c>)
    7d6e:	f009 f8cb 	bl	10f08 <k_delayed_work_submit_to_queue>
	bt_l2cap_send(chan->chan.conn, BT_L2CAP_CID_LE_SIG, buf);
    7d72:	6820      	ldr	r0, [r4, #0]
    7d74:	4629      	mov	r1, r5
    7d76:	f00c f98e 	bl	14096 <bt_l2cap_send.constprop.0>
	return 0;
    7d7a:	2000      	movs	r0, #0
}
    7d7c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
    7d7e:	f06f 000b 	mvn.w	r0, #11
    7d82:	e7fb      	b.n	7d7c <l2cap_le_conn_req+0x54>
    7d84:	20001dc8 	.word	0x20001dc8

00007d88 <l2cap_chan_send_credits.isra.0>:
static void l2cap_chan_send_credits(struct bt_l2cap_le_chan *chan,
    7d88:	b570      	push	{r4, r5, r6, lr}
    7d8a:	f8b0 6042 	ldrh.w	r6, [r0, #66]	; 0x42
    7d8e:	4604      	mov	r4, r0
	if (credits > chan->rx.init_credits) {
    7d90:	428e      	cmp	r6, r1
    7d92:	bf28      	it	cs
    7d94:	460e      	movcs	r6, r1
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CREDITS, get_ident(),
    7d96:	f7ff fe51 	bl	7a3c <get_ident>
    7d9a:	2204      	movs	r2, #4
    7d9c:	4601      	mov	r1, r0
    7d9e:	2016      	movs	r0, #22
    7da0:	f7ff fe82 	bl	7aa8 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    7da4:	4605      	mov	r5, r0
    7da6:	2800      	cmp	r0, #0
    7da8:	d13a      	bne.n	7e20 <l2cap_chan_send_credits.isra.0+0x98>
		BT_ERR("Unable to send credits update");
    7daa:	2145      	movs	r1, #69	; 0x45
    7dac:	4826      	ldr	r0, [pc, #152]	; (7e48 <l2cap_chan_send_credits.isra.0+0xc0>)
    7dae:	f00a f8cb 	bl	11f48 <printk>
	atomic_set_bit(chan->status, BT_L2CAP_STATUS_SHUTDOWN);
    7db2:	f104 0630 	add.w	r6, r4, #48	; 0x30
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7db6:	e8d6 3fef 	ldaex	r3, [r6]
    7dba:	f043 0302 	orr.w	r3, r3, #2
    7dbe:	e8c6 3fe2 	stlex	r2, r3, [r6]
    7dc2:	2a00      	cmp	r2, #0
    7dc4:	d1f7      	bne.n	7db6 <l2cap_chan_send_credits.isra.0+0x2e>
	if (ch->_sdu) {
    7dc6:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    7dca:	b128      	cbz	r0, 7dd8 <l2cap_chan_send_credits.isra.0+0x50>
		net_buf_unref(ch->_sdu);
    7dcc:	f005 fac6 	bl	d35c <net_buf_unref>
		ch->_sdu = NULL;
    7dd0:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
		ch->_sdu_len = 0U;
    7dd4:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
	if (ch->tx_buf) {
    7dd8:	6f20      	ldr	r0, [r4, #112]	; 0x70
    7dda:	b118      	cbz	r0, 7de4 <l2cap_chan_send_credits.isra.0+0x5c>
		net_buf_unref(ch->tx_buf);
    7ddc:	f005 fabe 	bl	d35c <net_buf_unref>
		ch->tx_buf = NULL;
    7de0:	2300      	movs	r3, #0
    7de2:	6723      	str	r3, [r4, #112]	; 0x70
	while ((buf = net_buf_get(&ch->tx_queue, K_NO_WAIT))) {
    7de4:	f104 0554 	add.w	r5, r4, #84	; 0x54
    7de8:	2200      	movs	r2, #0
    7dea:	2300      	movs	r3, #0
    7dec:	4628      	mov	r0, r5
    7dee:	f005 fa23 	bl	d238 <net_buf_get>
    7df2:	b978      	cbnz	r0, 7e14 <l2cap_chan_send_credits.isra.0+0x8c>
	while ((buf = net_buf_get(&ch->rx_queue, K_NO_WAIT))) {
    7df4:	f104 0594 	add.w	r5, r4, #148	; 0x94
    7df8:	2200      	movs	r2, #0
    7dfa:	2300      	movs	r3, #0
    7dfc:	4628      	mov	r0, r5
    7dfe:	f005 fa1b 	bl	d238 <net_buf_get>
    7e02:	b950      	cbnz	r0, 7e1a <l2cap_chan_send_credits.isra.0+0x92>
	if (chan->ops->status) {
    7e04:	6863      	ldr	r3, [r4, #4]
    7e06:	699b      	ldr	r3, [r3, #24]
    7e08:	b1eb      	cbz	r3, 7e46 <l2cap_chan_send_credits.isra.0+0xbe>
		chan->ops->status(chan, chan->status);
    7e0a:	4631      	mov	r1, r6
    7e0c:	4620      	mov	r0, r4
}
    7e0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		chan->ops->status(chan, chan->status);
    7e12:	4718      	bx	r3
		net_buf_unref(buf);
    7e14:	f005 faa2 	bl	d35c <net_buf_unref>
    7e18:	e7e6      	b.n	7de8 <l2cap_chan_send_credits.isra.0+0x60>
		net_buf_unref(buf);
    7e1a:	f005 fa9f 	bl	d35c <net_buf_unref>
    7e1e:	e7eb      	b.n	7df8 <l2cap_chan_send_credits.isra.0+0x70>
	atomic_add(&chan->rx.credits, credits);
    7e20:	4631      	mov	r1, r6
    7e22:	f104 0044 	add.w	r0, r4, #68	; 0x44
    7e26:	f00b ffe0 	bl	13dea <atomic_add>
	ev = net_buf_add(buf, sizeof(*ev));
    7e2a:	2104      	movs	r1, #4
    7e2c:	f105 0008 	add.w	r0, r5, #8
    7e30:	f005 fc06 	bl	d640 <net_buf_simple_add>
	ev->cid = sys_cpu_to_le16(chan->rx.cid);
    7e34:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
	bt_l2cap_send(chan->chan.conn, BT_L2CAP_CID_LE_SIG, buf);
    7e36:	4629      	mov	r1, r5
	ev->credits = sys_cpu_to_le16(credits);
    7e38:	8046      	strh	r6, [r0, #2]
	ev->cid = sys_cpu_to_le16(chan->rx.cid);
    7e3a:	8003      	strh	r3, [r0, #0]
	bt_l2cap_send(chan->chan.conn, BT_L2CAP_CID_LE_SIG, buf);
    7e3c:	6820      	ldr	r0, [r4, #0]
}
    7e3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_send(chan->chan.conn, BT_L2CAP_CID_LE_SIG, buf);
    7e42:	f00c b928 	b.w	14096 <bt_l2cap_send.constprop.0>
}
    7e46:	bd70      	pop	{r4, r5, r6, pc}
    7e48:	00019ede 	.word	0x00019ede

00007e4c <l2cap_chan_add>:
	if (ch->rx.cid > 0) {
    7e4c:	8f8b      	ldrh	r3, [r1, #60]	; 0x3c
{
    7e4e:	b570      	push	{r4, r5, r6, lr}
    7e50:	4605      	mov	r5, r0
    7e52:	460c      	mov	r4, r1
    7e54:	4616      	mov	r6, r2
	if (ch->rx.cid > 0) {
    7e56:	b92b      	cbnz	r3, 7e64 <l2cap_chan_add+0x18>
	for (cid = L2CAP_LE_CID_DYN_START; cid <= L2CAP_LE_CID_DYN_END; cid++) {
    7e58:	2140      	movs	r1, #64	; 0x40
		if (!bt_l2cap_le_lookup_rx_cid(conn, cid)) {
    7e5a:	4628      	mov	r0, r5
    7e5c:	f00c f988 	bl	14170 <bt_l2cap_le_lookup_rx_cid>
    7e60:	bb50      	cbnz	r0, 7eb8 <l2cap_chan_add+0x6c>
			ch->rx.cid = cid;
    7e62:	87a1      	strh	r1, [r4, #60]	; 0x3c
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    7e64:	491c      	ldr	r1, [pc, #112]	; (7ed8 <l2cap_chan_add+0x8c>)
    7e66:	f104 0010 	add.w	r0, r4, #16
    7e6a:	f00e fc74 	bl	16756 <k_delayed_work_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    7e6e:	2200      	movs	r2, #0
    7e70:	f104 0330 	add.w	r3, r4, #48	; 0x30
    7e74:	e8d3 1fef 	ldaex	r1, [r3]
    7e78:	e8c3 2fe0 	stlex	r0, r2, [r3]
    7e7c:	2800      	cmp	r0, #0
    7e7e:	d1f9      	bne.n	7e74 <l2cap_chan_add+0x28>
	parent->next = child;
    7e80:	60a2      	str	r2, [r4, #8]
Z_GENLIST_APPEND(slist, snode)
    7e82:	6d6a      	ldr	r2, [r5, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
    7e84:	f104 0308 	add.w	r3, r4, #8
    7e88:	bb02      	cbnz	r2, 7ecc <l2cap_chan_add+0x80>
	list->head = node;
    7e8a:	e9c5 3314 	strd	r3, r3, [r5, #80]	; 0x50
	if (L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    7e8e:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
	chan->conn = conn;
    7e90:	6025      	str	r5, [r4, #0]
	if (L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    7e92:	3b40      	subs	r3, #64	; 0x40
    7e94:	b29b      	uxth	r3, r3
    7e96:	2b3f      	cmp	r3, #63	; 0x3f
	chan->destroy = destroy;
    7e98:	60e6      	str	r6, [r4, #12]
	if (L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    7e9a:	d81a      	bhi.n	7ed2 <l2cap_chan_add+0x86>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    7e9c:	2300      	movs	r3, #0
    7e9e:	4a0f      	ldr	r2, [pc, #60]	; (7edc <l2cap_chan_add+0x90>)
    7ea0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    7ea4:	e9c4 2323 	strd	r2, r3, [r4, #140]	; 0x8c
    7ea8:	f104 0094 	add.w	r0, r4, #148	; 0x94
    7eac:	f00e fb8e 	bl	165cc <z_impl_k_queue_init>
	chan->state = state;
    7eb0:	2001      	movs	r0, #1
    7eb2:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
    7eb6:	bd70      	pop	{r4, r5, r6, pc}
	for (cid = L2CAP_LE_CID_DYN_START; cid <= L2CAP_LE_CID_DYN_END; cid++) {
    7eb8:	3101      	adds	r1, #1
    7eba:	b289      	uxth	r1, r1
    7ebc:	2980      	cmp	r1, #128	; 0x80
    7ebe:	d1cc      	bne.n	7e5a <l2cap_chan_add+0xe>
		BT_ERR("Unable to allocate L2CAP CID");
    7ec0:	4807      	ldr	r0, [pc, #28]	; (7ee0 <l2cap_chan_add+0x94>)
    7ec2:	2145      	movs	r1, #69	; 0x45
    7ec4:	f00a f840 	bl	11f48 <printk>
    7ec8:	2000      	movs	r0, #0
    7eca:	e7f4      	b.n	7eb6 <l2cap_chan_add+0x6a>
	parent->next = child;
    7ecc:	6013      	str	r3, [r2, #0]
	list->tail = node;
    7ece:	656b      	str	r3, [r5, #84]	; 0x54
}
    7ed0:	e7dd      	b.n	7e8e <l2cap_chan_add+0x42>
	return true;
    7ed2:	2001      	movs	r0, #1
    7ed4:	e7ef      	b.n	7eb6 <l2cap_chan_add+0x6a>
    7ed6:	bf00      	nop
    7ed8:	00007b55 	.word	0x00007b55
    7edc:	000081c1 	.word	0x000081c1
    7ee0:	00019f01 	.word	0x00019f01

00007ee4 <bt_l2cap_connected>:
{
    7ee4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    7ee8:	4e21      	ldr	r6, [pc, #132]	; (7f70 <bt_l2cap_connected+0x8c>)
{
    7eea:	4605      	mov	r5, r0
    7eec:	46b0      	mov	r8, r6
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    7eee:	4c21      	ldr	r4, [pc, #132]	; (7f74 <bt_l2cap_connected+0x90>)
    7ef0:	4f21      	ldr	r7, [pc, #132]	; (7f78 <bt_l2cap_connected+0x94>)
    7ef2:	42b4      	cmp	r4, r6
    7ef4:	d90e      	bls.n	7f14 <bt_l2cap_connected+0x30>
    7ef6:	4921      	ldr	r1, [pc, #132]	; (7f7c <bt_l2cap_connected+0x98>)
    7ef8:	f44f 73ab 	mov.w	r3, #342	; 0x156
    7efc:	463a      	mov	r2, r7
    7efe:	4820      	ldr	r0, [pc, #128]	; (7f80 <bt_l2cap_connected+0x9c>)
    7f00:	f00a f822 	bl	11f48 <printk>
    7f04:	481f      	ldr	r0, [pc, #124]	; (7f84 <bt_l2cap_connected+0xa0>)
    7f06:	f00a f81f 	bl	11f48 <printk>
    7f0a:	f44f 71ab 	mov.w	r1, #342	; 0x156
    7f0e:	4638      	mov	r0, r7
    7f10:	f00a fab0 	bl	12474 <assert_post_action>
    7f14:	4544      	cmp	r4, r8
    7f16:	d302      	bcc.n	7f1e <bt_l2cap_connected+0x3a>
}
    7f18:	b002      	add	sp, #8
    7f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (fchan->accept(conn, &chan) < 0) {
    7f1e:	4628      	mov	r0, r5
    7f20:	6863      	ldr	r3, [r4, #4]
    7f22:	a901      	add	r1, sp, #4
    7f24:	4798      	blx	r3
    7f26:	2800      	cmp	r0, #0
    7f28:	db20      	blt.n	7f6c <bt_l2cap_connected+0x88>
		ch = BT_L2CAP_LE_CHAN(chan);
    7f2a:	9901      	ldr	r1, [sp, #4]
		ch->rx.cid = fchan->cid;
    7f2c:	8823      	ldrh	r3, [r4, #0]
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    7f2e:	4628      	mov	r0, r5
    7f30:	68a2      	ldr	r2, [r4, #8]
		ch->rx.cid = fchan->cid;
    7f32:	878b      	strh	r3, [r1, #60]	; 0x3c
		ch->tx.cid = fchan->cid;
    7f34:	f8a1 3048 	strh.w	r3, [r1, #72]	; 0x48
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    7f38:	f7ff ff88 	bl	7e4c <l2cap_chan_add>
    7f3c:	2800      	cmp	r0, #0
    7f3e:	d0eb      	beq.n	7f18 <bt_l2cap_connected+0x34>
		if (chan->ops->connected) {
    7f40:	9801      	ldr	r0, [sp, #4]
    7f42:	6843      	ldr	r3, [r0, #4]
    7f44:	681b      	ldr	r3, [r3, #0]
    7f46:	b103      	cbz	r3, 7f4a <bt_l2cap_connected+0x66>
			chan->ops->connected(chan);
    7f48:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7f4a:	9b01      	ldr	r3, [sp, #4]
    7f4c:	3330      	adds	r3, #48	; 0x30
    7f4e:	e8d3 2fef 	ldaex	r2, [r3]
    7f52:	f042 0201 	orr.w	r2, r2, #1
    7f56:	e8c3 2fe1 	stlex	r1, r2, [r3]
    7f5a:	2900      	cmp	r1, #0
    7f5c:	d1f7      	bne.n	7f4e <bt_l2cap_connected+0x6a>
		if (chan->ops->status) {
    7f5e:	9801      	ldr	r0, [sp, #4]
    7f60:	6843      	ldr	r3, [r0, #4]
    7f62:	699b      	ldr	r3, [r3, #24]
    7f64:	b113      	cbz	r3, 7f6c <bt_l2cap_connected+0x88>
			chan->ops->status(chan, chan->status);
    7f66:	f100 0130 	add.w	r1, r0, #48	; 0x30
    7f6a:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    7f6c:	340c      	adds	r4, #12
    7f6e:	e7c0      	b.n	7ef2 <bt_l2cap_connected+0xe>
    7f70:	00016b48 	.word	0x00016b48
    7f74:	00016b24 	.word	0x00016b24
    7f78:	00019f23 	.word	0x00019f23
    7f7c:	00019f54 	.word	0x00019f54
    7f80:	00017b50 	.word	0x00017b50
    7f84:	00017b6d 	.word	0x00017b6d

00007f88 <bt_l2cap_recv>:
{
    7f88:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
    7f8a:	898b      	ldrh	r3, [r1, #12]
{
    7f8c:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
    7f8e:	2b03      	cmp	r3, #3
{
    7f90:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    7f92:	d804      	bhi.n	7f9e <bt_l2cap_recv+0x16>
		BT_ERR("Too small L2CAP PDU received");
    7f94:	2145      	movs	r1, #69	; 0x45
    7f96:	481e      	ldr	r0, [pc, #120]	; (8010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>)
		BT_WARN("Ignoring data received while channel has shutdown");
    7f98:	f009 ffd6 	bl	11f48 <printk>
		net_buf_unref(buf);
    7f9c:	e00f      	b.n	7fbe <bt_l2cap_recv+0x36>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    7f9e:	2104      	movs	r1, #4
    7fa0:	f104 0008 	add.w	r0, r4, #8
    7fa4:	f005 fb2a 	bl	d5fc <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
    7fa8:	8842      	ldrh	r2, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    7faa:	4628      	mov	r0, r5
    7fac:	4611      	mov	r1, r2
    7fae:	f00c f8df 	bl	14170 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    7fb2:	4605      	mov	r5, r0
    7fb4:	b940      	cbnz	r0, 7fc8 <bt_l2cap_recv+0x40>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    7fb6:	2157      	movs	r1, #87	; 0x57
    7fb8:	4816      	ldr	r0, [pc, #88]	; (8014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>)
    7fba:	f009 ffc5 	bl	11f48 <printk>
	net_buf_unref(buf);
    7fbe:	4620      	mov	r0, r4
}
    7fc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
    7fc4:	f005 b9ca 	b.w	d35c <net_buf_unref>
	if (L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    7fc8:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    7fca:	3b40      	subs	r3, #64	; 0x40
    7fcc:	b29b      	uxth	r3, r3
    7fce:	2b3f      	cmp	r3, #63	; 0x3f
    7fd0:	d819      	bhi.n	8006 <CONFIG_FPROTECT_BLOCK_SIZE+0x6>
	if (chan->chan.state == BT_L2CAP_DISCONNECT) {
    7fd2:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
    7fd6:	2b04      	cmp	r3, #4
    7fd8:	d102      	bne.n	7fe0 <bt_l2cap_recv+0x58>
		BT_WARN("Ignoring data received while disconnecting");
    7fda:	2157      	movs	r1, #87	; 0x57
    7fdc:	480e      	ldr	r0, [pc, #56]	; (8018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>)
    7fde:	e7db      	b.n	7f98 <bt_l2cap_recv+0x10>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    7fe0:	3030      	adds	r0, #48	; 0x30
    7fe2:	f00b feff 	bl	13de4 <atomic_get>
	if (atomic_test_bit(chan->chan.status, BT_L2CAP_STATUS_SHUTDOWN)) {
    7fe6:	0783      	lsls	r3, r0, #30
    7fe8:	d502      	bpl.n	7ff0 <bt_l2cap_recv+0x68>
		BT_WARN("Ignoring data received while channel has shutdown");
    7fea:	2157      	movs	r1, #87	; 0x57
    7fec:	480b      	ldr	r0, [pc, #44]	; (801c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>)
    7fee:	e7d3      	b.n	7f98 <bt_l2cap_recv+0x10>
	net_buf_put(&chan->rx_queue, buf);
    7ff0:	f105 0094 	add.w	r0, r5, #148	; 0x94
    7ff4:	4621      	mov	r1, r4
    7ff6:	f005 f97d 	bl	d2f4 <net_buf_put>
	k_work_submit_to_queue(&k_sys_work_q, work);
    7ffa:	f105 0088 	add.w	r0, r5, #136	; 0x88
}
    7ffe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8002:	f7ff bd93 	b.w	7b2c <k_work_submit_to_queue.constprop.0>
	chan->ops->recv(chan, buf);
    8006:	6843      	ldr	r3, [r0, #4]
    8008:	4621      	mov	r1, r4
    800a:	691b      	ldr	r3, [r3, #16]
    800c:	4798      	blx	r3
    800e:	e7d6      	b.n	7fbe <bt_l2cap_recv+0x36>
    8010:	00019f7b 	.word	0x00019f7b
    8014:	00019f9d 	.word	0x00019f9d
    8018:	00019fc7 	.word	0x00019fc7
    801c:	00019ff7 	.word	0x00019ff7

00008020 <bt_l2cap_chan_disconnect>:

	return l2cap_le_connect(conn, BT_L2CAP_LE_CHAN(chan), psm);
}

int bt_l2cap_chan_disconnect(struct bt_l2cap_chan *chan)
{
    8020:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->conn;
	struct net_buf *buf;
	struct bt_l2cap_disconn_req *req;
	struct bt_l2cap_le_chan *ch;

	if (!conn) {
    8022:	6803      	ldr	r3, [r0, #0]
{
    8024:	4604      	mov	r4, r0
	if (!conn) {
    8026:	b323      	cbz	r3, 8072 <bt_l2cap_chan_disconnect+0x52>
	ch = BT_L2CAP_LE_CHAN(chan);

	BT_DBG("chan %p scid 0x%04x dcid 0x%04x", chan, ch->rx.cid,
	       ch->tx.cid);

	ch->chan.ident = get_ident();
    8028:	f7ff fd08 	bl	7a3c <get_ident>

	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_DISCONN_REQ,
    802c:	2204      	movs	r2, #4
	ch->chan.ident = get_ident();
    802e:	4601      	mov	r1, r0
    8030:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_DISCONN_REQ,
    8034:	2006      	movs	r0, #6
    8036:	f7ff fd37 	bl	7aa8 <l2cap_create_le_sig_pdu.isra.0>
				      ch->chan.ident, sizeof(*req));
	if (!buf) {
    803a:	4605      	mov	r5, r0
    803c:	b1e0      	cbz	r0, 8078 <bt_l2cap_chan_disconnect+0x58>
		return -ENOMEM;
	}

	req = net_buf_add(buf, sizeof(*req));
    803e:	2104      	movs	r1, #4
    8040:	3008      	adds	r0, #8
    8042:	f005 fafd 	bl	d640 <net_buf_simple_add>
	req->dcid = sys_cpu_to_le16(ch->rx.cid);
    8046:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    8048:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    804c:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->tx.cid);
    804e:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    8052:	f104 0110 	add.w	r1, r4, #16
    8056:	8043      	strh	r3, [r0, #2]
    8058:	2300      	movs	r3, #0
    805a:	4809      	ldr	r0, [pc, #36]	; (8080 <bt_l2cap_chan_disconnect+0x60>)
    805c:	f008 ff54 	bl	10f08 <k_delayed_work_submit_to_queue>
	bt_l2cap_send(chan->chan.conn, BT_L2CAP_CID_LE_SIG, buf);
    8060:	6820      	ldr	r0, [r4, #0]
    8062:	4629      	mov	r1, r5
    8064:	f00c f817 	bl	14096 <bt_l2cap_send.constprop.0>
	chan->state = state;
    8068:	2304      	movs	r3, #4

	l2cap_chan_send_req(ch, buf, L2CAP_DISC_TIMEOUT);
	bt_l2cap_chan_set_state(chan, BT_L2CAP_DISCONNECT);

	return 0;
    806a:	2000      	movs	r0, #0
	chan->state = state;
    806c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
    8070:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTCONN;
    8072:	f06f 0038 	mvn.w	r0, #56	; 0x38
    8076:	e7fb      	b.n	8070 <bt_l2cap_chan_disconnect+0x50>
		return -ENOMEM;
    8078:	f06f 000b 	mvn.w	r0, #11
    807c:	e7f8      	b.n	8070 <bt_l2cap_chan_disconnect+0x50>
    807e:	bf00      	nop
    8080:	20001dc8 	.word	0x20001dc8

00008084 <l2cap_chan_le_recv_seg>:
	u16_t seg = 0U;
    8084:	2300      	movs	r3, #0
{
    8086:	b570      	push	{r4, r5, r6, lr}
    8088:	460d      	mov	r5, r1
	len = net_buf_frags_len(chan->_sdu);
    808a:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
{
    808e:	b086      	sub	sp, #24
    8090:	4604      	mov	r4, r0
	len = net_buf_frags_len(chan->_sdu);
    8092:	4608      	mov	r0, r1
	u16_t seg = 0U;
    8094:	f8ad 3016 	strh.w	r3, [sp, #22]
	len = net_buf_frags_len(chan->_sdu);
    8098:	f00b fe5a 	bl	13d50 <net_buf_frags_len>
	if (len) {
    809c:	b283      	uxth	r3, r0
	len = net_buf_frags_len(chan->_sdu);
    809e:	4606      	mov	r6, r0
	if (len) {
    80a0:	b12b      	cbz	r3, 80ae <l2cap_chan_le_recv_seg+0x2a>
		memcpy(&seg, net_buf_user_data(chan->_sdu), sizeof(seg));
    80a2:	2202      	movs	r2, #2
    80a4:	3114      	adds	r1, #20
    80a6:	f10d 0016 	add.w	r0, sp, #22
    80aa:	f00b fa61 	bl	13570 <memcpy>
	if (len + buf->len > chan->_sdu_len) {
    80ae:	89a8      	ldrh	r0, [r5, #12]
    80b0:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
    80b4:	fa10 f686 	uxtah	r6, r0, r6
    80b8:	429e      	cmp	r6, r3
    80ba:	dd08      	ble.n	80ce <l2cap_chan_le_recv_seg+0x4a>
		BT_ERR("SDU length mismatch");
    80bc:	2145      	movs	r1, #69	; 0x45
    80be:	483c      	ldr	r0, [pc, #240]	; (81b0 <l2cap_chan_le_recv_seg+0x12c>)
		BT_ERR("Unable to store SDU");
    80c0:	f009 ff42 	bl	11f48 <printk>
		bt_l2cap_chan_disconnect(&chan->chan);
    80c4:	4620      	mov	r0, r4
    80c6:	f7ff ffab 	bl	8020 <bt_l2cap_chan_disconnect>
}
    80ca:	b006      	add	sp, #24
    80cc:	bd70      	pop	{r4, r5, r6, pc}
	seg++;
    80ce:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 *
 * @return Pointer to the user data of the buffer.
 */
static inline void *net_buf_user_data(const struct net_buf *buf)
{
	return (void *)buf->user_data;
    80d2:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    80d6:	3301      	adds	r3, #1
	memcpy(net_buf_user_data(chan->_sdu), &seg, sizeof(seg));
    80d8:	2202      	movs	r2, #2
    80da:	f10d 0116 	add.w	r1, sp, #22
    80de:	3014      	adds	r0, #20
	seg++;
    80e0:	f8ad 3016 	strh.w	r3, [sp, #22]
	memcpy(net_buf_user_data(chan->_sdu), &seg, sizeof(seg));
    80e4:	f00b fa44 	bl	13570 <memcpy>
	len = net_buf_append_bytes(chan->_sdu, buf->len, buf->data, K_NO_WAIT,
    80e8:	4b32      	ldr	r3, [pc, #200]	; (81b4 <l2cap_chan_le_recv_seg+0x130>)
    80ea:	2200      	movs	r2, #0
    80ec:	9302      	str	r3, [sp, #8]
    80ee:	2300      	movs	r3, #0
    80f0:	e9cd 2300 	strd	r2, r3, [sp]
    80f4:	9403      	str	r4, [sp, #12]
    80f6:	68aa      	ldr	r2, [r5, #8]
    80f8:	89a9      	ldrh	r1, [r5, #12]
    80fa:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    80fe:	f00d fabf 	bl	15680 <net_buf_append_bytes>
	if (len != buf->len) {
    8102:	89ab      	ldrh	r3, [r5, #12]
    8104:	b280      	uxth	r0, r0
    8106:	4283      	cmp	r3, r0
    8108:	d002      	beq.n	8110 <l2cap_chan_le_recv_seg+0x8c>
		BT_ERR("Unable to store SDU");
    810a:	2145      	movs	r1, #69	; 0x45
    810c:	482a      	ldr	r0, [pc, #168]	; (81b8 <l2cap_chan_le_recv_seg+0x134>)
    810e:	e7d7      	b.n	80c0 <l2cap_chan_le_recv_seg+0x3c>
	if (net_buf_frags_len(chan->_sdu) < chan->_sdu_len) {
    8110:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
    8114:	4630      	mov	r0, r6
    8116:	f00b fe1b 	bl	13d50 <net_buf_frags_len>
    811a:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
    811e:	4298      	cmp	r0, r3
    8120:	d225      	bcs.n	816e <l2cap_chan_le_recv_seg+0xea>
		if (!atomic_get(&chan->rx.credits) &&
    8122:	f104 0344 	add.w	r3, r4, #68	; 0x44
    8126:	4618      	mov	r0, r3
    8128:	f00b fe5c 	bl	13de4 <atomic_get>
    812c:	2800      	cmp	r0, #0
    812e:	d1cc      	bne.n	80ca <l2cap_chan_le_recv_seg+0x46>
    8130:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
    8134:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    8138:	4291      	cmp	r1, r2
    813a:	d1c6      	bne.n	80ca <l2cap_chan_le_recv_seg+0x46>
	atomic_val_t old_credits = atomic_get(&chan->rx.credits);
    813c:	4618      	mov	r0, r3
    813e:	f00b fe51 	bl	13de4 <atomic_get>
    8142:	4606      	mov	r6, r0
	credits = ((chan->_sdu_len - net_buf_frags_len(buf)) +
    8144:	4628      	mov	r0, r5
    8146:	f00b fe03 	bl	13d50 <net_buf_frags_len>
    814a:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
    814e:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
    8152:	440b      	add	r3, r1
    8154:	3b01      	subs	r3, #1
    8156:	1a1b      	subs	r3, r3, r0
		   (chan->rx.mps - 1)) / chan->rx.mps;
    8158:	fbb3 f1f1 	udiv	r1, r3, r1
	if (credits < old_credits) {
    815c:	b28b      	uxth	r3, r1
    815e:	429e      	cmp	r6, r3
    8160:	dcb3      	bgt.n	80ca <l2cap_chan_le_recv_seg+0x46>
	credits -= old_credits;
    8162:	1b89      	subs	r1, r1, r6
	l2cap_chan_send_credits(chan, buf, credits);
    8164:	4620      	mov	r0, r4
    8166:	b289      	uxth	r1, r1
    8168:	f7ff fe0e 	bl	7d88 <l2cap_chan_send_credits.isra.0>
    816c:	e7ad      	b.n	80ca <l2cap_chan_le_recv_seg+0x46>
	chan->_sdu = NULL;
    816e:	2300      	movs	r3, #0
    8170:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	chan->_sdu_len = 0U;
    8174:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
	err = chan->chan.ops->recv(&chan->chan, buf);
    8178:	6863      	ldr	r3, [r4, #4]
    817a:	4631      	mov	r1, r6
    817c:	4620      	mov	r0, r4
    817e:	691b      	ldr	r3, [r3, #16]
	l2cap_chan_le_recv_sdu(chan, buf, seg);
    8180:	f8bd 5016 	ldrh.w	r5, [sp, #22]
	err = chan->chan.ops->recv(&chan->chan, buf);
    8184:	4798      	blx	r3
	if (err < 0) {
    8186:	1e02      	subs	r2, r0, #0
    8188:	da0d      	bge.n	81a6 <l2cap_chan_le_recv_seg+0x122>
		if (err != -EINPROGRESS) {
    818a:	f112 0f44 	cmn.w	r2, #68	; 0x44
    818e:	d09c      	beq.n	80ca <l2cap_chan_le_recv_seg+0x46>
			BT_ERR("err %d", err);
    8190:	480a      	ldr	r0, [pc, #40]	; (81bc <l2cap_chan_le_recv_seg+0x138>)
    8192:	2145      	movs	r1, #69	; 0x45
    8194:	f009 fed8 	bl	11f48 <printk>
			bt_l2cap_chan_disconnect(&chan->chan);
    8198:	4620      	mov	r0, r4
    819a:	f7ff ff41 	bl	8020 <bt_l2cap_chan_disconnect>
	net_buf_unref(buf);
    819e:	4630      	mov	r0, r6
    81a0:	f005 f8dc 	bl	d35c <net_buf_unref>
    81a4:	e791      	b.n	80ca <l2cap_chan_le_recv_seg+0x46>
	l2cap_chan_send_credits(chan, buf, seg);
    81a6:	4629      	mov	r1, r5
    81a8:	4620      	mov	r0, r4
    81aa:	f7ff fded 	bl	7d88 <l2cap_chan_send_credits.isra.0>
    81ae:	e7f6      	b.n	819e <l2cap_chan_le_recv_seg+0x11a>
    81b0:	0001a02e 	.word	0x0001a02e
    81b4:	00013ddb 	.word	0x00013ddb
    81b8:	0001a047 	.word	0x0001a047
    81bc:	0001a060 	.word	0x0001a060

000081c0 <l2cap_rx_process>:
{
    81c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    81c4:	4604      	mov	r4, r0
		BT_ERR("No credits to receive packet");
    81c6:	4f31      	ldr	r7, [pc, #196]	; (828c <l2cap_rx_process+0xcc>)
			BT_ERR("err %d", err);
    81c8:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8294 <l2cap_rx_process+0xd4>
			BT_ERR("Unable to allocate buffer for SDU");
    81cc:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8298 <l2cap_rx_process+0xd8>
	struct bt_l2cap_le_chan *ch = CHAN_RX(work);
    81d0:	f1a0 0588 	sub.w	r5, r0, #136	; 0x88
	while ((buf = net_buf_get(&ch->rx_queue, K_NO_WAIT))) {
    81d4:	2200      	movs	r2, #0
    81d6:	2300      	movs	r3, #0
    81d8:	f104 000c 	add.w	r0, r4, #12
    81dc:	f005 f82c 	bl	d238 <net_buf_get>
    81e0:	4606      	mov	r6, r0
    81e2:	b908      	cbnz	r0, 81e8 <l2cap_rx_process+0x28>
}
    81e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!test_and_dec(&chan->rx.credits)) {
    81e8:	f1a4 0344 	sub.w	r3, r4, #68	; 0x44
		old_value = atomic_get(target);
    81ec:	4618      	mov	r0, r3
    81ee:	f00b fdf9 	bl	13de4 <atomic_get>
		if (!old_value) {
    81f2:	2800      	cmp	r0, #0
    81f4:	d047      	beq.n	8286 <l2cap_rx_process+0xc6>
		new_value = old_value - 1;
    81f6:	1e42      	subs	r2, r0, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    81f8:	e8d3 1fef 	ldaex	r1, [r3]
    81fc:	4281      	cmp	r1, r0
    81fe:	d104      	bne.n	820a <l2cap_rx_process+0x4a>
    8200:	e8c3 2fec 	stlex	ip, r2, [r3]
    8204:	f1bc 0f00 	cmp.w	ip, #0
    8208:	d1f6      	bne.n	81f8 <l2cap_rx_process+0x38>
	} while (atomic_cas(target, old_value, new_value) == 0);
    820a:	d1ef      	bne.n	81ec <l2cap_rx_process+0x2c>
	if (chan->_sdu) {
    820c:	f854 3c08 	ldr.w	r3, [r4, #-8]
    8210:	b9db      	cbnz	r3, 824a <l2cap_rx_process+0x8a>
	sdu_len = net_buf_pull_le16(buf);
    8212:	f106 0008 	add.w	r0, r6, #8
    8216:	f00d fa03 	bl	15620 <net_buf_simple_pull_le16>
	if (sdu_len > chan->rx.mtu) {
    821a:	f834 3c4a 	ldrh.w	r3, [r4, #-74]
	sdu_len = net_buf_pull_le16(buf);
    821e:	4682      	mov	sl, r0
	if (sdu_len > chan->rx.mtu) {
    8220:	4283      	cmp	r3, r0
    8222:	d204      	bcs.n	822e <l2cap_rx_process+0x6e>
		BT_ERR("Invalid SDU length");
    8224:	2145      	movs	r1, #69	; 0x45
    8226:	481a      	ldr	r0, [pc, #104]	; (8290 <l2cap_rx_process+0xd0>)
		BT_ERR("No credits to receive packet");
    8228:	f009 fe8e 	bl	11f48 <printk>
    822c:	e022      	b.n	8274 <l2cap_rx_process+0xb4>
	if (chan->chan.ops->alloc_buf) {
    822e:	f854 3c84 	ldr.w	r3, [r4, #-132]
    8232:	68da      	ldr	r2, [r3, #12]
    8234:	b18a      	cbz	r2, 825a <l2cap_rx_process+0x9a>
		chan->_sdu = chan->chan.ops->alloc_buf(&chan->chan);
    8236:	4628      	mov	r0, r5
    8238:	4790      	blx	r2
    823a:	f844 0c08 	str.w	r0, [r4, #-8]
		if (!chan->_sdu) {
    823e:	b910      	cbnz	r0, 8246 <l2cap_rx_process+0x86>
			BT_ERR("Unable to allocate buffer for SDU");
    8240:	2145      	movs	r1, #69	; 0x45
    8242:	4648      	mov	r0, r9
    8244:	e7f0      	b.n	8228 <l2cap_rx_process+0x68>
		chan->_sdu_len = sdu_len;
    8246:	f824 ac04 	strh.w	sl, [r4, #-4]
		l2cap_chan_le_recv_seg(chan, buf);
    824a:	4631      	mov	r1, r6
    824c:	4628      	mov	r0, r5
    824e:	f7ff ff19 	bl	8084 <l2cap_chan_le_recv_seg>
		net_buf_unref(buf);
    8252:	4630      	mov	r0, r6
    8254:	f005 f882 	bl	d35c <net_buf_unref>
    8258:	e7bc      	b.n	81d4 <l2cap_rx_process+0x14>
	err = chan->chan.ops->recv(&chan->chan, buf);
    825a:	4631      	mov	r1, r6
    825c:	4628      	mov	r0, r5
    825e:	691b      	ldr	r3, [r3, #16]
    8260:	4798      	blx	r3
	if (err) {
    8262:	4602      	mov	r2, r0
    8264:	b150      	cbz	r0, 827c <l2cap_rx_process+0xbc>
		if (err != -EINPROGRESS) {
    8266:	f110 0f44 	cmn.w	r0, #68	; 0x44
    826a:	d0f2      	beq.n	8252 <l2cap_rx_process+0x92>
			BT_ERR("err %d", err);
    826c:	2145      	movs	r1, #69	; 0x45
    826e:	4640      	mov	r0, r8
    8270:	f009 fe6a 	bl	11f48 <printk>
		bt_l2cap_chan_disconnect(&chan->chan);
    8274:	4628      	mov	r0, r5
    8276:	f7ff fed3 	bl	8020 <bt_l2cap_chan_disconnect>
		return;
    827a:	e7ea      	b.n	8252 <l2cap_rx_process+0x92>
	l2cap_chan_send_credits(chan, buf, 1);
    827c:	2101      	movs	r1, #1
    827e:	4628      	mov	r0, r5
    8280:	f7ff fd82 	bl	7d88 <l2cap_chan_send_credits.isra.0>
    8284:	e7e5      	b.n	8252 <l2cap_rx_process+0x92>
		BT_ERR("No credits to receive packet");
    8286:	2145      	movs	r1, #69	; 0x45
    8288:	4638      	mov	r0, r7
    828a:	e7cd      	b.n	8228 <l2cap_rx_process+0x68>
    828c:	0001a0ab 	.word	0x0001a0ab
    8290:	0001a06c 	.word	0x0001a06c
    8294:	0001a060 	.word	0x0001a060
    8298:	0001a084 	.word	0x0001a084

0000829c <l2cap_recv>:
{
    829c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buf->len < sizeof(*hdr)) {
    82a0:	898b      	ldrh	r3, [r1, #12]
{
    82a2:	4680      	mov	r8, r0
	if (buf->len < sizeof(*hdr)) {
    82a4:	2b03      	cmp	r3, #3
{
    82a6:	460c      	mov	r4, r1
    82a8:	b087      	sub	sp, #28
	if (buf->len < sizeof(*hdr)) {
    82aa:	d804      	bhi.n	82b6 <l2cap_recv+0x1a>
		BT_ERR("Too small L2CAP signaling PDU");
    82ac:	2145      	movs	r1, #69	; 0x45
    82ae:	48ab      	ldr	r0, [pc, #684]	; (855c <l2cap_recv+0x2c0>)
		BT_ERR("Too small LE Credits packet size");
    82b0:	f009 fe4a 	bl	11f48 <printk>
		return;
    82b4:	e00d      	b.n	82d2 <l2cap_recv+0x36>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    82b6:	2104      	movs	r1, #4
    82b8:	f104 0008 	add.w	r0, r4, #8
    82bc:	f005 f99e 	bl	d5fc <net_buf_simple_pull_mem>
	if (buf->len != len) {
    82c0:	89a2      	ldrh	r2, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    82c2:	8843      	ldrh	r3, [r0, #2]
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    82c4:	4606      	mov	r6, r0
	if (buf->len != len) {
    82c6:	4293      	cmp	r3, r2
    82c8:	d007      	beq.n	82da <l2cap_recv+0x3e>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    82ca:	2145      	movs	r1, #69	; 0x45
    82cc:	48a4      	ldr	r0, [pc, #656]	; (8560 <l2cap_recv+0x2c4>)
    82ce:	f009 fe3b 	bl	11f48 <printk>
}
    82d2:	2000      	movs	r0, #0
    82d4:	b007      	add	sp, #28
    82d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!hdr->ident) {
    82da:	7845      	ldrb	r5, [r0, #1]
    82dc:	b915      	cbnz	r5, 82e4 <l2cap_recv+0x48>
		BT_ERR("Invalid ident value in L2CAP PDU");
    82de:	2145      	movs	r1, #69	; 0x45
    82e0:	48a0      	ldr	r0, [pc, #640]	; (8564 <l2cap_recv+0x2c8>)
    82e2:	e7e5      	b.n	82b0 <l2cap_recv+0x14>
	switch (hdr->code) {
    82e4:	7803      	ldrb	r3, [r0, #0]
    82e6:	1e59      	subs	r1, r3, #1
    82e8:	2915      	cmp	r1, #21
    82ea:	f200 8209 	bhi.w	8700 <l2cap_recv+0x464>
    82ee:	e8df f011 	tbh	[pc, r1, lsl #1]
    82f2:	01b5      	.short	0x01b5
    82f4:	02070207 	.word	0x02070207
    82f8:	02070207 	.word	0x02070207
    82fc:	01800147 	.word	0x01800147
    8300:	02070207 	.word	0x02070207
    8304:	02070207 	.word	0x02070207
    8308:	02070207 	.word	0x02070207
    830c:	02070207 	.word	0x02070207
    8310:	02070207 	.word	0x02070207
    8314:	001601bc 	.word	0x001601bc
    8318:	00ca001b 	.word	0x00ca001b
    831c:	018e      	.short	0x018e
	if (buf->len < sizeof(*rsp)) {
    831e:	2a01      	cmp	r2, #1
    8320:	d8d7      	bhi.n	82d2 <l2cap_recv+0x36>
		BT_ERR("Too small LE conn param rsp");
    8322:	2145      	movs	r1, #69	; 0x45
    8324:	4890      	ldr	r0, [pc, #576]	; (8568 <l2cap_recv+0x2cc>)
    8326:	e7c3      	b.n	82b0 <l2cap_recv+0x14>
	if (buf->len < sizeof(*req)) {
    8328:	2a09      	cmp	r2, #9
    832a:	d802      	bhi.n	8332 <l2cap_recv+0x96>
		BT_ERR("Too small LE conn req packet size");
    832c:	2145      	movs	r1, #69	; 0x45
    832e:	488f      	ldr	r0, [pc, #572]	; (856c <l2cap_recv+0x2d0>)
    8330:	e7be      	b.n	82b0 <l2cap_recv+0x14>
	struct bt_l2cap_le_conn_req *req = (void *)buf->data;
    8332:	68a3      	ldr	r3, [r4, #8]
	mtu = sys_le16_to_cpu(req->mtu);
    8334:	889e      	ldrh	r6, [r3, #4]
    8336:	b2b2      	uxth	r2, r6
	if (mtu < L2CAP_LE_MIN_MTU || mps < L2CAP_LE_MIN_MTU) {
    8338:	2a16      	cmp	r2, #22
    833a:	d903      	bls.n	8344 <l2cap_recv+0xa8>
	mps = sys_le16_to_cpu(req->mps);
    833c:	88df      	ldrh	r7, [r3, #6]
    833e:	b2ba      	uxth	r2, r7
	if (mtu < L2CAP_LE_MIN_MTU || mps < L2CAP_LE_MIN_MTU) {
    8340:	2a16      	cmp	r2, #22
    8342:	d802      	bhi.n	834a <l2cap_recv+0xae>
		BT_ERR("Invalid LE-Conn Req params");
    8344:	2145      	movs	r1, #69	; 0x45
    8346:	488a      	ldr	r0, [pc, #552]	; (8570 <l2cap_recv+0x2d4>)
    8348:	e7b2      	b.n	82b0 <l2cap_recv+0x14>
		le_conn_req(l2cap, hdr->ident, buf);
    834a:	f8d8 4000 	ldr.w	r4, [r8]
	psm = sys_le16_to_cpu(req->psm);
    834e:	f8b3 b000 	ldrh.w	fp, [r3]
	scid = sys_le16_to_cpu(req->scid);
    8352:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	credits = sys_le16_to_cpu(req->credits);
    8356:	891b      	ldrh	r3, [r3, #8]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    8358:	4629      	mov	r1, r5
	credits = sys_le16_to_cpu(req->credits);
    835a:	f8ad 3008 	strh.w	r3, [sp, #8]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    835e:	220a      	movs	r2, #10
	credits = sys_le16_to_cpu(req->credits);
    8360:	b29b      	uxth	r3, r3
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    8362:	2015      	movs	r0, #21
	credits = sys_le16_to_cpu(req->credits);
    8364:	9303      	str	r3, [sp, #12]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    8366:	f7ff fb9f 	bl	7aa8 <l2cap_create_le_sig_pdu.isra.0>
	scid = sys_le16_to_cpu(req->scid);
    836a:	fa1f f988 	uxth.w	r9, r8
	if (!buf) {
    836e:	4605      	mov	r5, r0
    8370:	2800      	cmp	r0, #0
    8372:	d0ae      	beq.n	82d2 <l2cap_recv+0x36>
	rsp = net_buf_add(buf, sizeof(*rsp));
    8374:	210a      	movs	r1, #10
    8376:	3008      	adds	r0, #8
    8378:	f005 f962 	bl	d640 <net_buf_simple_add>
	(void)memset(rsp, 0, sizeof(*rsp));
    837c:	220a      	movs	r2, #10
    837e:	2100      	movs	r1, #0
	rsp = net_buf_add(buf, sizeof(*rsp));
    8380:	4682      	mov	sl, r0
	(void)memset(rsp, 0, sizeof(*rsp));
    8382:	f00b f920 	bl	135c6 <memset>
	server = l2cap_server_lookup_psm(psm);
    8386:	4658      	mov	r0, fp
    8388:	f7ff fb64 	bl	7a54 <l2cap_server_lookup_psm>
	if (!server) {
    838c:	4683      	mov	fp, r0
    838e:	b908      	cbnz	r0, 8394 <l2cap_recv+0xf8>
		return BT_L2CAP_LE_ERR_PSM_NOT_SUPP;
    8390:	2202      	movs	r2, #2
    8392:	e004      	b.n	839e <l2cap_recv+0x102>
	if (conn->sec_level < server->sec_level) {
    8394:	7a61      	ldrb	r1, [r4, #9]
    8396:	7882      	ldrb	r2, [r0, #2]
    8398:	4291      	cmp	r1, r2
    839a:	d207      	bcs.n	83ac <l2cap_recv+0x110>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_LE_ERR_AUTHENTICATION);
    839c:	2205      	movs	r2, #5
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
    839e:	4629      	mov	r1, r5
    83a0:	4620      	mov	r0, r4
		rsp->result = sys_cpu_to_le16(BT_L2CAP_LE_ERR_NO_RESOURCES);
    83a2:	f8aa 2008 	strh.w	r2, [sl, #8]
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
    83a6:	f00b fe76 	bl	14096 <bt_l2cap_send.constprop.0>
    83aa:	e792      	b.n	82d2 <l2cap_recv+0x36>
	if (!L2CAP_LE_CID_IS_DYN(scid)) {
    83ac:	f1a9 0240 	sub.w	r2, r9, #64	; 0x40
    83b0:	2a3f      	cmp	r2, #63	; 0x3f
    83b2:	d901      	bls.n	83b8 <l2cap_recv+0x11c>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_LE_ERR_INVALID_SCID);
    83b4:	2209      	movs	r2, #9
    83b6:	e7f2      	b.n	839e <l2cap_recv+0x102>
	chan = bt_l2cap_le_lookup_tx_cid(conn, scid);
    83b8:	4649      	mov	r1, r9
    83ba:	4620      	mov	r0, r4
    83bc:	f00b fec8 	bl	14150 <bt_l2cap_le_lookup_tx_cid>
    83c0:	9004      	str	r0, [sp, #16]
	if (chan) {
    83c2:	b108      	cbz	r0, 83c8 <l2cap_recv+0x12c>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_LE_ERR_SCID_IN_USE);
    83c4:	220a      	movs	r2, #10
    83c6:	e7ea      	b.n	839e <l2cap_recv+0x102>
	err = server->accept(conn, &chan);
    83c8:	4620      	mov	r0, r4
    83ca:	f8db 2004 	ldr.w	r2, [fp, #4]
    83ce:	a904      	add	r1, sp, #16
    83d0:	4790      	blx	r2
	if (err < 0) {
    83d2:	2800      	cmp	r0, #0
    83d4:	da12      	bge.n	83fc <l2cap_recv+0x160>
	switch (err) {
    83d6:	f110 0f0c 	cmn.w	r0, #12
    83da:	d052      	beq.n	8482 <l2cap_recv+0x1e6>
    83dc:	f110 0f0b 	cmn.w	r0, #11
    83e0:	da07      	bge.n	83f2 <l2cap_recv+0x156>
    83e2:	f110 0f23 	cmn.w	r0, #35	; 0x23
    83e6:	d0d3      	beq.n	8390 <l2cap_recv+0xf4>
    83e8:	300d      	adds	r0, #13
    83ea:	bf14      	ite	ne
    83ec:	220b      	movne	r2, #11
    83ee:	2206      	moveq	r2, #6
    83f0:	e7d5      	b.n	839e <l2cap_recv+0x102>
		return BT_L2CAP_LE_ERR_KEY_SIZE;
    83f2:	3001      	adds	r0, #1
    83f4:	bf14      	ite	ne
    83f6:	220b      	movne	r2, #11
    83f8:	2207      	moveq	r2, #7
    83fa:	e7d0      	b.n	839e <l2cap_recv+0x102>
	chan->required_sec_level = server->sec_level;
    83fc:	f89b 2002 	ldrb.w	r2, [fp, #2]
    8400:	9904      	ldr	r1, [sp, #16]
	if (l2cap_chan_add(conn, chan, l2cap_chan_destroy)) {
    8402:	4620      	mov	r0, r4
	chan->required_sec_level = server->sec_level;
    8404:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
	if (l2cap_chan_add(conn, chan, l2cap_chan_destroy)) {
    8408:	4a5a      	ldr	r2, [pc, #360]	; (8574 <l2cap_recv+0x2d8>)
    840a:	f7ff fd1f 	bl	7e4c <l2cap_chan_add>
    840e:	b3c0      	cbz	r0, 8482 <l2cap_recv+0x1e6>
		struct bt_l2cap_le_chan *ch = BT_L2CAP_LE_CHAN(chan);
    8410:	f8dd 9010 	ldr.w	r9, [sp, #16]
		l2cap_chan_tx_init(ch);
    8414:	4648      	mov	r0, r9
    8416:	f7ff fb6d 	bl	7af4 <l2cap_chan_tx_init>
		ch->tx.init_credits = credits;
    841a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
		l2cap_chan_tx_give_credits(ch, credits);
    841e:	9903      	ldr	r1, [sp, #12]
		ch->tx.init_credits = credits;
    8420:	f8a9 304e 	strh.w	r3, [r9, #78]	; 0x4e
		l2cap_chan_tx_give_credits(ch, credits);
    8424:	4648      	mov	r0, r9
		ch->tx.cid = scid;
    8426:	f8a9 8048 	strh.w	r8, [r9, #72]	; 0x48
		ch->tx.mps = mps;
    842a:	f8a9 704c 	strh.w	r7, [r9, #76]	; 0x4c
		ch->tx.mtu = mtu;
    842e:	f8a9 604a 	strh.w	r6, [r9, #74]	; 0x4a
		l2cap_chan_tx_give_credits(ch, credits);
    8432:	f00b fd34 	bl	13e9e <l2cap_chan_tx_give_credits>
		l2cap_chan_rx_init(ch);
    8436:	4648      	mov	r0, r9
    8438:	f00b fd0d 	bl	13e56 <l2cap_chan_rx_init>
	atomic_add(&chan->rx.credits, credits);
    843c:	f8b9 1042 	ldrh.w	r1, [r9, #66]	; 0x42
    8440:	f109 0044 	add.w	r0, r9, #68	; 0x44
    8444:	f00b fcd1 	bl	13dea <atomic_add>
		chan->psm = server->psm;
    8448:	9804      	ldr	r0, [sp, #16]
    844a:	f8bb 2000 	ldrh.w	r2, [fp]
    844e:	86c2      	strh	r2, [r0, #54]	; 0x36
	chan->state = state;
    8450:	2203      	movs	r2, #3
    8452:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
		if (chan->ops->connected) {
    8456:	6842      	ldr	r2, [r0, #4]
    8458:	6812      	ldr	r2, [r2, #0]
    845a:	b102      	cbz	r2, 845e <l2cap_recv+0x1c2>
			chan->ops->connected(chan);
    845c:	4790      	blx	r2
		rsp->dcid = sys_cpu_to_le16(ch->rx.cid);
    845e:	f8b9 203c 	ldrh.w	r2, [r9, #60]	; 0x3c
    8462:	f8aa 2000 	strh.w	r2, [sl]
		rsp->mps = sys_cpu_to_le16(ch->rx.mps);
    8466:	f8b9 2040 	ldrh.w	r2, [r9, #64]	; 0x40
    846a:	f8aa 2004 	strh.w	r2, [sl, #4]
		rsp->mtu = sys_cpu_to_le16(ch->rx.mtu);
    846e:	f8b9 203e 	ldrh.w	r2, [r9, #62]	; 0x3e
    8472:	f8aa 2002 	strh.w	r2, [sl, #2]
		rsp->credits = sys_cpu_to_le16(ch->rx.init_credits);
    8476:	f8b9 2042 	ldrh.w	r2, [r9, #66]	; 0x42
    847a:	f8aa 2006 	strh.w	r2, [sl, #6]
		rsp->result = BT_L2CAP_LE_SUCCESS;
    847e:	2200      	movs	r2, #0
    8480:	e78d      	b.n	839e <l2cap_recv+0x102>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_LE_ERR_NO_RESOURCES);
    8482:	2204      	movs	r2, #4
    8484:	e78b      	b.n	839e <l2cap_recv+0x102>
	if (buf->len < sizeof(*rsp)) {
    8486:	2a09      	cmp	r2, #9
    8488:	d802      	bhi.n	8490 <l2cap_recv+0x1f4>
		BT_ERR("Too small LE conn rsp packet size");
    848a:	2145      	movs	r1, #69	; 0x45
    848c:	483a      	ldr	r0, [pc, #232]	; (8578 <l2cap_recv+0x2dc>)
    848e:	e70f      	b.n	82b0 <l2cap_recv+0x14>
	struct bt_l2cap_le_conn_rsp *rsp = (void *)buf->data;
    8490:	68a3      	ldr	r3, [r4, #8]
		le_conn_rsp(l2cap, hdr->ident, buf);
    8492:	f8d8 7000 	ldr.w	r7, [r8]
	result = sys_le16_to_cpu(rsp->result);
    8496:	891e      	ldrh	r6, [r3, #8]
	dcid = sys_le16_to_cpu(rsp->dcid);
    8498:	f8b3 b000 	ldrh.w	fp, [r3]
	mtu = sys_le16_to_cpu(rsp->mtu);
    849c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
	mps = sys_le16_to_cpu(rsp->mps);
    84a0:	f8b3 9004 	ldrh.w	r9, [r3, #4]
	credits = sys_le16_to_cpu(rsp->credits);
    84a4:	f8b3 8006 	ldrh.w	r8, [r3, #6]
	if (result == BT_L2CAP_LE_SUCCESS ||
    84a8:	f026 0308 	bic.w	r3, r6, #8
    84ac:	b2a9      	uxth	r1, r5
    84ae:	b10b      	cbz	r3, 84b4 <l2cap_recv+0x218>
    84b0:	2e05      	cmp	r6, #5
    84b2:	d10b      	bne.n	84cc <l2cap_recv+0x230>
		chan = l2cap_lookup_ident(conn, ident);
    84b4:	2200      	movs	r2, #0
		chan = l2cap_remove_ident(conn, ident);
    84b6:	4638      	mov	r0, r7
    84b8:	f00b fc52 	bl	13d60 <__l2cap_lookup_ident>
    84bc:	4604      	mov	r4, r0
	if (!chan) {
    84be:	b938      	cbnz	r0, 84d0 <l2cap_recv+0x234>
		BT_ERR("Cannot find channel for ident %u", ident);
    84c0:	462a      	mov	r2, r5
    84c2:	2145      	movs	r1, #69	; 0x45
    84c4:	482d      	ldr	r0, [pc, #180]	; (857c <l2cap_recv+0x2e0>)
    84c6:	f009 fd3f 	bl	11f48 <printk>
		return;
    84ca:	e702      	b.n	82d2 <l2cap_recv+0x36>
		chan = l2cap_remove_ident(conn, ident);
    84cc:	2201      	movs	r2, #1
    84ce:	e7f2      	b.n	84b6 <l2cap_recv+0x21a>
	k_delayed_work_cancel(&chan->chan.rtx_work);
    84d0:	3010      	adds	r0, #16
    84d2:	f008 fda3 	bl	1101c <k_delayed_work_cancel>
	chan->chan.ident = 0U;
    84d6:	2300      	movs	r3, #0
	switch (result) {
    84d8:	2e05      	cmp	r6, #5
	chan->chan.ident = 0U;
    84da:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	switch (result) {
    84de:	d01b      	beq.n	8518 <l2cap_recv+0x27c>
    84e0:	2e08      	cmp	r6, #8
    84e2:	d019      	beq.n	8518 <l2cap_recv+0x27c>
    84e4:	bb26      	cbnz	r6, 8530 <l2cap_recv+0x294>
	chan->state = state;
    84e6:	2303      	movs	r3, #3
    84e8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if (chan->chan.ops->connected) {
    84ec:	6863      	ldr	r3, [r4, #4]
		chan->tx.cid = dcid;
    84ee:	f8a4 b048 	strh.w	fp, [r4, #72]	; 0x48
		if (chan->chan.ops->connected) {
    84f2:	681b      	ldr	r3, [r3, #0]
		chan->tx.mtu = mtu;
    84f4:	f8a4 a04a 	strh.w	sl, [r4, #74]	; 0x4a
		chan->tx.mps = mps;
    84f8:	f8a4 904c 	strh.w	r9, [r4, #76]	; 0x4c
		if (chan->chan.ops->connected) {
    84fc:	b10b      	cbz	r3, 8502 <l2cap_recv+0x266>
			chan->chan.ops->connected(&chan->chan);
    84fe:	4620      	mov	r0, r4
    8500:	4798      	blx	r3
		l2cap_chan_tx_give_credits(chan, credits);
    8502:	4641      	mov	r1, r8
    8504:	4620      	mov	r0, r4
    8506:	f00b fcca 	bl	13e9e <l2cap_chan_tx_give_credits>
	atomic_add(&chan->rx.credits, credits);
    850a:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
    850e:	f104 0044 	add.w	r0, r4, #68	; 0x44
    8512:	f00b fc6a 	bl	13dea <atomic_add>
}
    8516:	e6dc      	b.n	82d2 <l2cap_recv+0x36>
	switch (err) {
    8518:	2e05      	cmp	r6, #5
		if (l2cap_change_security(chan, result) == 0) {
    851a:	6820      	ldr	r0, [r4, #0]
	switch (err) {
    851c:	d00c      	beq.n	8538 <l2cap_recv+0x29c>
    851e:	2e08      	cmp	r6, #8
    8520:	d102      	bne.n	8528 <l2cap_recv+0x28c>
		if (conn->sec_level >= BT_SECURITY_L2) {
    8522:	7a43      	ldrb	r3, [r0, #9]
    8524:	2b01      	cmp	r3, #1
    8526:	d915      	bls.n	8554 <l2cap_recv+0x2b8>
		bt_l2cap_chan_remove(conn, &chan->chan);
    8528:	4621      	mov	r1, r4
    852a:	4638      	mov	r0, r7
    852c:	f00b fcf0 	bl	13f10 <bt_l2cap_chan_remove>
		bt_l2cap_chan_del(&chan->chan);
    8530:	4620      	mov	r0, r4
	bt_l2cap_chan_del(&chan->chan);
    8532:	f00b fd06 	bl	13f42 <bt_l2cap_chan_del>
    8536:	e6cc      	b.n	82d2 <l2cap_recv+0x36>
		if (conn->sec_level < BT_SECURITY_L2) {
    8538:	7a43      	ldrb	r3, [r0, #9]
    853a:	2b01      	cmp	r3, #1
    853c:	d90a      	bls.n	8554 <l2cap_recv+0x2b8>
		} else if (conn->sec_level < BT_SECURITY_L3) {
    853e:	2b02      	cmp	r3, #2
    8540:	d00a      	beq.n	8558 <l2cap_recv+0x2bc>
		} else if (conn->sec_level < BT_SECURITY_L4) {
    8542:	2b03      	cmp	r3, #3
    8544:	d1f0      	bne.n	8528 <l2cap_recv+0x28c>
			sec = BT_SECURITY_L4;
    8546:	2104      	movs	r1, #4
	return bt_conn_set_security(chan->chan.conn, sec);
    8548:	f00b fb6d 	bl	13c26 <bt_conn_set_security>
		if (l2cap_change_security(chan, result) == 0) {
    854c:	2800      	cmp	r0, #0
    854e:	f43f aec0 	beq.w	82d2 <l2cap_recv+0x36>
    8552:	e7e9      	b.n	8528 <l2cap_recv+0x28c>
		sec = BT_SECURITY_L2;
    8554:	2102      	movs	r1, #2
    8556:	e7f7      	b.n	8548 <l2cap_recv+0x2ac>
			sec = BT_SECURITY_L3;
    8558:	2103      	movs	r1, #3
    855a:	e7f5      	b.n	8548 <l2cap_recv+0x2ac>
    855c:	0001a0cd 	.word	0x0001a0cd
    8560:	0001a0f0 	.word	0x0001a0f0
    8564:	0001a116 	.word	0x0001a116
    8568:	0001a13c 	.word	0x0001a13c
    856c:	0001a15d 	.word	0x0001a15d
    8570:	0001a184 	.word	0x0001a184
    8574:	00013dff 	.word	0x00013dff
    8578:	0001a1a4 	.word	0x0001a1a4
    857c:	0001a1cb 	.word	0x0001a1cb
	if (buf->len < sizeof(*req)) {
    8580:	2a03      	cmp	r2, #3
    8582:	f67f aed3 	bls.w	832c <l2cap_recv+0x90>
	struct bt_l2cap_disconn_req *req = (void *)buf->data;
    8586:	68a6      	ldr	r6, [r4, #8]
		le_disconn_req(l2cap, hdr->ident, buf);
    8588:	f8d8 7000 	ldr.w	r7, [r8]
	chan = l2cap_remove_rx_cid(conn, dcid);
    858c:	8831      	ldrh	r1, [r6, #0]
    858e:	4638      	mov	r0, r7
    8590:	f00b fc03 	bl	13d9a <l2cap_remove_rx_cid>
	if (!chan) {
    8594:	4604      	mov	r4, r0
    8596:	b9a0      	cbnz	r0, 85c2 <l2cap_recv+0x326>
		data.scid = req->scid;
    8598:	78f2      	ldrb	r2, [r6, #3]
    859a:	78b3      	ldrb	r3, [r6, #2]
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_INVALID_CID, &data,
    859c:	4629      	mov	r1, r5
		data.scid = req->scid;
    859e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    85a2:	f8ad 3010 	strh.w	r3, [sp, #16]
		data.dcid = req->dcid;
    85a6:	7872      	ldrb	r2, [r6, #1]
    85a8:	7833      	ldrb	r3, [r6, #0]
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_INVALID_CID, &data,
    85aa:	4638      	mov	r0, r7
		data.dcid = req->dcid;
    85ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    85b0:	f8ad 3012 	strh.w	r3, [sp, #18]
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_INVALID_CID, &data,
    85b4:	2304      	movs	r3, #4
    85b6:	2202      	movs	r2, #2
    85b8:	9300      	str	r3, [sp, #0]
    85ba:	ab04      	add	r3, sp, #16
		l2cap_send_reject(chan->conn, hdr->ident,
    85bc:	f00b fd75 	bl	140aa <l2cap_send_reject>
		break;
    85c0:	e687      	b.n	82d2 <l2cap_recv+0x36>
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_DISCONN_RSP, ident,
    85c2:	4629      	mov	r1, r5
    85c4:	2204      	movs	r2, #4
    85c6:	2007      	movs	r0, #7
    85c8:	f7ff fa6e 	bl	7aa8 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    85cc:	4605      	mov	r5, r0
    85ce:	2800      	cmp	r0, #0
    85d0:	f43f ae7f 	beq.w	82d2 <l2cap_recv+0x36>
	rsp = net_buf_add(buf, sizeof(*rsp));
    85d4:	2104      	movs	r1, #4
    85d6:	3008      	adds	r0, #8
    85d8:	f005 f832 	bl	d640 <net_buf_simple_add>
	rsp->dcid = sys_cpu_to_le16(chan->rx.cid);
    85dc:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    85de:	8003      	strh	r3, [r0, #0]
	rsp->scid = sys_cpu_to_le16(chan->tx.cid);
    85e0:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    85e4:	8043      	strh	r3, [r0, #2]
	bt_l2cap_chan_del(&chan->chan);
    85e6:	4620      	mov	r0, r4
    85e8:	f00b fcab 	bl	13f42 <bt_l2cap_chan_del>
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
    85ec:	4629      	mov	r1, r5
    85ee:	4638      	mov	r0, r7
    85f0:	e6d9      	b.n	83a6 <l2cap_recv+0x10a>
	if (buf->len < sizeof(*rsp)) {
    85f2:	2a03      	cmp	r2, #3
    85f4:	d802      	bhi.n	85fc <l2cap_recv+0x360>
		BT_ERR("Too small LE disconn rsp packet size");
    85f6:	2145      	movs	r1, #69	; 0x45
    85f8:	4847      	ldr	r0, [pc, #284]	; (8718 <l2cap_recv+0x47c>)
    85fa:	e659      	b.n	82b0 <l2cap_recv+0x14>
	scid = sys_le16_to_cpu(rsp->scid);
    85fc:	68a3      	ldr	r3, [r4, #8]
	chan = l2cap_remove_rx_cid(conn, scid);
    85fe:	f8d8 0000 	ldr.w	r0, [r8]
    8602:	8859      	ldrh	r1, [r3, #2]
    8604:	f00b fbc9 	bl	13d9a <l2cap_remove_rx_cid>
	if (!chan) {
    8608:	2800      	cmp	r0, #0
    860a:	d192      	bne.n	8532 <l2cap_recv+0x296>
    860c:	e661      	b.n	82d2 <l2cap_recv+0x36>
	if (buf->len < sizeof(*ev)) {
    860e:	2a03      	cmp	r2, #3
    8610:	d802      	bhi.n	8618 <l2cap_recv+0x37c>
		BT_ERR("Too small LE Credits packet size");
    8612:	2145      	movs	r1, #69	; 0x45
    8614:	4841      	ldr	r0, [pc, #260]	; (871c <l2cap_recv+0x480>)
    8616:	e64b      	b.n	82b0 <l2cap_recv+0x14>
	struct bt_l2cap_le_credits *ev = (void *)buf->data;
    8618:	68a2      	ldr	r2, [r4, #8]
	chan = bt_l2cap_le_lookup_tx_cid(conn, cid);
    861a:	f8d8 0000 	ldr.w	r0, [r8]
    861e:	8811      	ldrh	r1, [r2, #0]
    8620:	f00b fd96 	bl	14150 <bt_l2cap_le_lookup_tx_cid>
	if (!chan) {
    8624:	4604      	mov	r4, r0
    8626:	b910      	cbnz	r0, 862e <l2cap_recv+0x392>
		BT_ERR("Unable to find channel of LE Credits packet");
    8628:	2145      	movs	r1, #69	; 0x45
    862a:	483d      	ldr	r0, [pc, #244]	; (8720 <l2cap_recv+0x484>)
    862c:	e640      	b.n	82b0 <l2cap_recv+0x14>
	if (atomic_get(&ch->tx.credits) + credits > UINT16_MAX) {
    862e:	3050      	adds	r0, #80	; 0x50
	credits = sys_le16_to_cpu(ev->credits);
    8630:	8851      	ldrh	r1, [r2, #2]
	if (atomic_get(&ch->tx.credits) + credits > UINT16_MAX) {
    8632:	f00b fbd7 	bl	13de4 <atomic_get>
    8636:	4408      	add	r0, r1
    8638:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    863c:	db07      	blt.n	864e <l2cap_recv+0x3b2>
		BT_ERR("Credits overflow");
    863e:	2145      	movs	r1, #69	; 0x45
    8640:	4838      	ldr	r0, [pc, #224]	; (8724 <l2cap_recv+0x488>)
    8642:	f009 fc81 	bl	11f48 <printk>
		bt_l2cap_chan_disconnect(chan);
    8646:	4620      	mov	r0, r4
    8648:	f7ff fcea 	bl	8020 <bt_l2cap_chan_disconnect>
		return;
    864c:	e641      	b.n	82d2 <l2cap_recv+0x36>
	l2cap_chan_tx_give_credits(ch, credits);
    864e:	4620      	mov	r0, r4
    8650:	f00b fc25 	bl	13e9e <l2cap_chan_tx_give_credits>
	l2cap_chan_tx_resume(ch);
    8654:	4620      	mov	r0, r4
    8656:	f00b fc3b 	bl	13ed0 <l2cap_chan_tx_resume>
    865a:	e63a      	b.n	82d2 <l2cap_recv+0x36>
	chan = l2cap_remove_ident(conn, ident);
    865c:	2201      	movs	r2, #1
    865e:	4629      	mov	r1, r5
    8660:	f8d8 0000 	ldr.w	r0, [r8]
    8664:	f00b fb7c 	bl	13d60 <__l2cap_lookup_ident>
    8668:	e7ce      	b.n	8608 <l2cap_recv+0x36c>
	if (buf->len < sizeof(*req)) {
    866a:	2a07      	cmp	r2, #7
    866c:	d802      	bhi.n	8674 <l2cap_recv+0x3d8>
		BT_ERR("Too small LE conn update param req");
    866e:	2145      	movs	r1, #69	; 0x45
    8670:	482d      	ldr	r0, [pc, #180]	; (8728 <l2cap_recv+0x48c>)
    8672:	e61d      	b.n	82b0 <l2cap_recv+0x14>
			le_conn_param_update_req(l2cap, hdr->ident, buf);
    8674:	f8d8 6000 	ldr.w	r6, [r8]
	if (conn->role != BT_HCI_ROLE_MASTER) {
    8678:	78f3      	ldrb	r3, [r6, #3]
    867a:	b12b      	cbz	r3, 8688 <l2cap_recv+0x3ec>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
    867c:	2300      	movs	r3, #0
    867e:	4629      	mov	r1, r5
    8680:	461a      	mov	r2, r3
    8682:	4630      	mov	r0, r6
    8684:	9300      	str	r3, [sp, #0]
    8686:	e799      	b.n	85bc <l2cap_recv+0x320>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    8688:	68a3      	ldr	r3, [r4, #8]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    868a:	2013      	movs	r0, #19
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    868c:	7859      	ldrb	r1, [r3, #1]
    868e:	781a      	ldrb	r2, [r3, #0]
    8690:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    8694:	f8ad 2010 	strh.w	r2, [sp, #16]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    8698:	78d9      	ldrb	r1, [r3, #3]
    869a:	789a      	ldrb	r2, [r3, #2]
    869c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    86a0:	f8ad 2012 	strh.w	r2, [sp, #18]
	param.latency = sys_le16_to_cpu(req->latency);
    86a4:	7959      	ldrb	r1, [r3, #5]
    86a6:	791a      	ldrb	r2, [r3, #4]
    86a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    86ac:	f8ad 2014 	strh.w	r2, [sp, #20]
	param.timeout = sys_le16_to_cpu(req->timeout);
    86b0:	799a      	ldrb	r2, [r3, #6]
    86b2:	79db      	ldrb	r3, [r3, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    86b4:	4629      	mov	r1, r5
	param.timeout = sys_le16_to_cpu(req->timeout);
    86b6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    86ba:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
    86bc:	f8ad 3016 	strh.w	r3, [sp, #22]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    86c0:	f7ff f9f2 	bl	7aa8 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    86c4:	4604      	mov	r4, r0
    86c6:	2800      	cmp	r0, #0
    86c8:	f43f ae03 	beq.w	82d2 <l2cap_recv+0x36>
	accepted = le_param_req(conn, &param);
    86cc:	a904      	add	r1, sp, #16
    86ce:	4630      	mov	r0, r6
    86d0:	f7fe fbee 	bl	6eb0 <le_param_req>
    86d4:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    86d6:	2102      	movs	r1, #2
    86d8:	f104 0008 	add.w	r0, r4, #8
    86dc:	f004 ffb0 	bl	d640 <net_buf_simple_add>
	if (accepted) {
    86e0:	f085 0301 	eor.w	r3, r5, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    86e4:	b2db      	uxtb	r3, r3
    86e6:	8003      	strh	r3, [r0, #0]
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
    86e8:	4621      	mov	r1, r4
    86ea:	4630      	mov	r0, r6
    86ec:	f00b fcd3 	bl	14096 <bt_l2cap_send.constprop.0>
	if (accepted) {
    86f0:	2d00      	cmp	r5, #0
    86f2:	f43f adee 	beq.w	82d2 <l2cap_recv+0x36>
		bt_conn_le_conn_update(conn, &param);
    86f6:	4630      	mov	r0, r6
    86f8:	a904      	add	r1, sp, #16
    86fa:	f00b faf1 	bl	13ce0 <bt_conn_le_conn_update>
    86fe:	e5e8      	b.n	82d2 <l2cap_recv+0x36>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    8700:	461a      	mov	r2, r3
    8702:	2157      	movs	r1, #87	; 0x57
    8704:	4809      	ldr	r0, [pc, #36]	; (872c <l2cap_recv+0x490>)
    8706:	f009 fc1f 	bl	11f48 <printk>
		l2cap_send_reject(chan->conn, hdr->ident,
    870a:	2300      	movs	r3, #0
    870c:	7871      	ldrb	r1, [r6, #1]
    870e:	9300      	str	r3, [sp, #0]
    8710:	461a      	mov	r2, r3
    8712:	f8d8 0000 	ldr.w	r0, [r8]
    8716:	e751      	b.n	85bc <l2cap_recv+0x320>
    8718:	0001a1f1 	.word	0x0001a1f1
    871c:	0001a21b 	.word	0x0001a21b
    8720:	0001a241 	.word	0x0001a241
    8724:	0001a272 	.word	0x0001a272
    8728:	0001a288 	.word	0x0001a288
    872c:	0001a2b0 	.word	0x0001a2b0

00008730 <bt_att_destroy>:

	return 0;
}

void bt_att_destroy(struct bt_l2cap_chan *chan)
{
    8730:	b507      	push	{r0, r1, r2, lr}
	struct bt_att *att = ATT_CHAN(chan);
    8732:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&att_slab, (void **)&att);
    8734:	a901      	add	r1, sp, #4
    8736:	4803      	ldr	r0, [pc, #12]	; (8744 <bt_att_destroy+0x14>)
    8738:	f006 fcb4 	bl	f0a4 <k_mem_slab_free>
}
    873c:	b003      	add	sp, #12
    873e:	f85d fb04 	ldr.w	pc, [sp], #4
    8742:	bf00      	nop
    8744:	200003c0 	.word	0x200003c0

00008748 <find_type_cb>:
{
    8748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    874c:	f642 0301 	movw	r3, #10241	; 0x2801
    8750:	f04f 0800 	mov.w	r8, #0
{
    8754:	b090      	sub	sp, #64	; 0x40
	struct bt_att *att = data->att;
    8756:	680e      	ldr	r6, [r1, #0]
{
    8758:	4605      	mov	r5, r0
    875a:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    875c:	6800      	ldr	r0, [r0, #0]
    875e:	a90b      	add	r1, sp, #44	; 0x2c
	struct bt_conn *conn = att->chan.chan.conn;
    8760:	6837      	ldr	r7, [r6, #0]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    8762:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
    8766:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    876a:	f00a ff9c 	bl	136a6 <bt_uuid_cmp>
    876e:	2800      	cmp	r0, #0
    8770:	d033      	beq.n	87da <find_type_cb+0x92>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    8772:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    8776:	6828      	ldr	r0, [r5, #0]
    8778:	a90b      	add	r1, sp, #44	; 0x2c
    877a:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
    877e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    8782:	f00a ff90 	bl	136a6 <bt_uuid_cmp>
    8786:	b150      	cbz	r0, 879e <find_type_cb+0x56>
		if (data->group &&
    8788:	68a3      	ldr	r3, [r4, #8]
    878a:	b123      	cbz	r3, 8796 <find_type_cb+0x4e>
		    attr->handle > sys_le16_to_cpu(data->group->end_handle)) {
    878c:	8a2a      	ldrh	r2, [r5, #16]
		if (data->group &&
    878e:	8859      	ldrh	r1, [r3, #2]
    8790:	4291      	cmp	r1, r2
    8792:	d200      	bcs.n	8796 <find_type_cb+0x4e>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    8794:	805a      	strh	r2, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    8796:	2001      	movs	r0, #1
}
    8798:	b010      	add	sp, #64	; 0x40
    879a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    879e:	6862      	ldr	r2, [r4, #4]
    87a0:	f8b6 304a 	ldrh.w	r3, [r6, #74]	; 0x4a
    87a4:	8992      	ldrh	r2, [r2, #12]
    87a6:	1a9b      	subs	r3, r3, r2
    87a8:	2b03      	cmp	r3, #3
    87aa:	d9f5      	bls.n	8798 <find_type_cb+0x50>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    87ac:	686e      	ldr	r6, [r5, #4]
    87ae:	9000      	str	r0, [sp, #0]
    87b0:	2310      	movs	r3, #16
    87b2:	4629      	mov	r1, r5
    87b4:	4638      	mov	r0, r7
    87b6:	aa02      	add	r2, sp, #8
    87b8:	47b0      	blx	r6
	if (read < 0) {
    87ba:	1e06      	subs	r6, r0, #0
    87bc:	db0d      	blt.n	87da <find_type_cb+0x92>
	if (read != data->value_len) {
    87be:	7c22      	ldrb	r2, [r4, #16]
    87c0:	68e0      	ldr	r0, [r4, #12]
    87c2:	42b2      	cmp	r2, r6
    87c4:	d028      	beq.n	8818 <find_type_cb+0xd0>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    87c6:	4601      	mov	r1, r0
    87c8:	a80b      	add	r0, sp, #44	; 0x2c
    87ca:	f00a ff96 	bl	136fa <bt_uuid_create>
    87ce:	b938      	cbnz	r0, 87e0 <find_type_cb+0x98>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
    87d0:	2157      	movs	r1, #87	; 0x57
    87d2:	7c22      	ldrb	r2, [r4, #16]
    87d4:	4812      	ldr	r0, [pc, #72]	; (8820 <find_type_cb+0xd8>)
			BT_WARN("Unable to create UUID: size %d", read);
    87d6:	f009 fbb7 	bl	11f48 <printk>
	data->group = NULL;
    87da:	2300      	movs	r3, #0
    87dc:	60a3      	str	r3, [r4, #8]
    87de:	e7da      	b.n	8796 <find_type_cb+0x4e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    87e0:	b2f2      	uxtb	r2, r6
    87e2:	a902      	add	r1, sp, #8
    87e4:	a806      	add	r0, sp, #24
    87e6:	f00a ff88 	bl	136fa <bt_uuid_create>
    87ea:	b918      	cbnz	r0, 87f4 <find_type_cb+0xac>
			BT_WARN("Unable to create UUID: size %d", read);
    87ec:	4632      	mov	r2, r6
    87ee:	2157      	movs	r1, #87	; 0x57
    87f0:	480c      	ldr	r0, [pc, #48]	; (8824 <find_type_cb+0xdc>)
    87f2:	e7f0      	b.n	87d6 <find_type_cb+0x8e>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    87f4:	a906      	add	r1, sp, #24
    87f6:	a80b      	add	r0, sp, #44	; 0x2c
    87f8:	f00a ff55 	bl	136a6 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    87fc:	2800      	cmp	r0, #0
    87fe:	d1ec      	bne.n	87da <find_type_cb+0x92>
	data->err = 0x00;
    8800:	2300      	movs	r3, #0
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    8802:	6860      	ldr	r0, [r4, #4]
	data->err = 0x00;
    8804:	7463      	strb	r3, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    8806:	2104      	movs	r1, #4
    8808:	3008      	adds	r0, #8
    880a:	f004 ff19 	bl	d640 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    880e:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    8810:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    8812:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    8814:	8043      	strh	r3, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
    8816:	e7be      	b.n	8796 <find_type_cb+0x4e>
	} else if (memcmp(data->value, uuid, read)) {
    8818:	a902      	add	r1, sp, #8
    881a:	f00a fe99 	bl	13550 <memcmp>
    881e:	e7ed      	b.n	87fc <find_type_cb+0xb4>
    8820:	0001a2dc 	.word	0x0001a2dc
    8824:	0001a300 	.word	0x0001a300

00008828 <att_cb.isra.0>:
static bt_conn_tx_cb_t att_cb(struct net_buf *buf)
    8828:	b508      	push	{r3, lr}
	switch (att_op_get_type(buf->data[0])) {
    882a:	7800      	ldrb	r0, [r0, #0]
    882c:	f00b fcd1 	bl	141d2 <att_op_get_type>
    8830:	3801      	subs	r0, #1
    8832:	b2c0      	uxtb	r0, r0
    8834:	2804      	cmp	r0, #4
    8836:	bf96      	itet	ls
    8838:	4b02      	ldrls	r3, [pc, #8]	; (8844 <att_cb.isra.0+0x1c>)
    883a:	4803      	ldrhi	r0, [pc, #12]	; (8848 <att_cb.isra.0+0x20>)
    883c:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
}
    8840:	bd08      	pop	{r3, pc}
    8842:	bf00      	nop
    8844:	000170a8 	.word	0x000170a8
    8848:	0001447f 	.word	0x0001447f

0000884c <att_send>:
{
    884c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    8850:	4698      	mov	r8, r3
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    8852:	688b      	ldr	r3, [r1, #8]
{
    8854:	4607      	mov	r7, r0
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    8856:	781b      	ldrb	r3, [r3, #0]
{
    8858:	460e      	mov	r6, r1
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    885a:	2bd2      	cmp	r3, #210	; 0xd2
{
    885c:	4615      	mov	r5, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    885e:	d10e      	bne.n	887e <att_send+0x32>
		err = bt_smp_sign(conn, buf);
    8860:	f00c fe40 	bl	154e4 <bt_smp_sign>
		if (err) {
    8864:	4604      	mov	r4, r0
    8866:	b150      	cbz	r0, 887e <att_send+0x32>
			BT_ERR("Error signing data");
    8868:	480c      	ldr	r0, [pc, #48]	; (889c <att_send+0x50>)
    886a:	2145      	movs	r1, #69	; 0x45
    886c:	f009 fb6c 	bl	11f48 <printk>
			net_buf_unref(buf);
    8870:	4630      	mov	r0, r6
    8872:	f004 fd73 	bl	d35c <net_buf_unref>
}
    8876:	4620      	mov	r0, r4
    8878:	b002      	add	sp, #8
    887a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf,
    887e:	b91d      	cbnz	r5, 8888 <att_send+0x3c>
				cb ? cb : att_cb(buf),
    8880:	68b0      	ldr	r0, [r6, #8]
    8882:	f7ff ffd1 	bl	8828 <att_cb.isra.0>
    8886:	4605      	mov	r5, r0
	return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf,
    8888:	462b      	mov	r3, r5
    888a:	4632      	mov	r2, r6
    888c:	2104      	movs	r1, #4
    888e:	4638      	mov	r0, r7
    8890:	f8cd 8000 	str.w	r8, [sp]
    8894:	f00b fb83 	bl	13f9e <bt_l2cap_send_cb>
    8898:	4604      	mov	r4, r0
    889a:	e7ec      	b.n	8876 <att_send+0x2a>
    889c:	0001a324 	.word	0x0001a324

000088a0 <att_get>:
{
    88a0:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    88a2:	2104      	movs	r1, #4
    88a4:	f00b fc54 	bl	14150 <bt_l2cap_le_lookup_tx_cid>
	__ASSERT(chan, "No ATT channel found");
    88a8:	4604      	mov	r4, r0
    88aa:	b960      	cbnz	r0, 88c6 <att_get+0x26>
    88ac:	4907      	ldr	r1, [pc, #28]	; (88cc <att_get+0x2c>)
    88ae:	2371      	movs	r3, #113	; 0x71
    88b0:	4a07      	ldr	r2, [pc, #28]	; (88d0 <att_get+0x30>)
    88b2:	4808      	ldr	r0, [pc, #32]	; (88d4 <att_get+0x34>)
    88b4:	f009 fb48 	bl	11f48 <printk>
    88b8:	4807      	ldr	r0, [pc, #28]	; (88d8 <att_get+0x38>)
    88ba:	f009 fb45 	bl	11f48 <printk>
    88be:	2171      	movs	r1, #113	; 0x71
    88c0:	4803      	ldr	r0, [pc, #12]	; (88d0 <att_get+0x30>)
    88c2:	f009 fdd7 	bl	12474 <assert_post_action>
}
    88c6:	4620      	mov	r0, r4
    88c8:	bd10      	pop	{r4, pc}
    88ca:	bf00      	nop
    88cc:	0001a36b 	.word	0x0001a36b
    88d0:	0001a33c 	.word	0x0001a33c
    88d4:	00017b50 	.word	0x00017b50
    88d8:	0001a370 	.word	0x0001a370

000088dc <bt_att_accept>:
{
    88dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    88de:	2200      	movs	r2, #0
{
    88e0:	4606      	mov	r6, r0
    88e2:	460d      	mov	r5, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    88e4:	2300      	movs	r3, #0
    88e6:	4810      	ldr	r0, [pc, #64]	; (8928 <bt_att_accept+0x4c>)
    88e8:	a901      	add	r1, sp, #4
    88ea:	f006 fb6f 	bl	efcc <k_mem_slab_alloc>
    88ee:	4604      	mov	r4, r0
    88f0:	b148      	cbz	r0, 8906 <bt_att_accept+0x2a>
		BT_ERR("No available ATT context for conn %p", conn);
    88f2:	4632      	mov	r2, r6
    88f4:	2145      	movs	r1, #69	; 0x45
    88f6:	480d      	ldr	r0, [pc, #52]	; (892c <bt_att_accept+0x50>)
    88f8:	f009 fb26 	bl	11f48 <printk>
    88fc:	f06f 040b 	mvn.w	r4, #11
}
    8900:	4620      	mov	r0, r4
    8902:	b002      	add	sp, #8
    8904:	bd70      	pop	{r4, r5, r6, pc}
	(void)memset(att, 0, sizeof(*att));
    8906:	4601      	mov	r1, r0
    8908:	f44f 7298 	mov.w	r2, #304	; 0x130
    890c:	9801      	ldr	r0, [sp, #4]
    890e:	f00a fe5a 	bl	135c6 <memset>
	att->chan.chan.ops = &ops;
    8912:	9801      	ldr	r0, [sp, #4]
    8914:	4b06      	ldr	r3, [pc, #24]	; (8930 <bt_att_accept+0x54>)
    8916:	6043      	str	r3, [r0, #4]
	return z_impl_k_sem_init(sem, initial_count, limit);
    8918:	220a      	movs	r2, #10
    891a:	30e0      	adds	r0, #224	; 0xe0
    891c:	4611      	mov	r1, r2
    891e:	f00d fea1 	bl	16664 <z_impl_k_sem_init>
	*chan = &att->chan.chan;
    8922:	9b01      	ldr	r3, [sp, #4]
    8924:	602b      	str	r3, [r5, #0]
	return 0;
    8926:	e7eb      	b.n	8900 <bt_att_accept+0x24>
    8928:	200003c0 	.word	0x200003c0
    892c:	0001a387 	.word	0x0001a387
    8930:	000171a4 	.word	0x000171a4

00008934 <bt_att_connected>:
{
    8934:	b510      	push	{r4, lr}
    8936:	4604      	mov	r4, r0
	z_impl_k_queue_init(queue);
    8938:	30f8      	adds	r0, #248	; 0xf8
    893a:	f00d fe47 	bl	165cc <z_impl_k_queue_init>
    893e:	f504 708a 	add.w	r0, r4, #276	; 0x114
    8942:	f00d fe43 	bl	165cc <z_impl_k_queue_init>
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    8946:	2317      	movs	r3, #23
	k_delayed_work_init(&att->timeout_work, att_timeout);
    8948:	4905      	ldr	r1, [pc, #20]	; (8960 <bt_att_connected+0x2c>)
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    894a:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    894e:	87e3      	strh	r3, [r4, #62]	; 0x3e
	k_delayed_work_init(&att->timeout_work, att_timeout);
    8950:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    8954:	f00d feff 	bl	16756 <k_delayed_work_init>
	list->head = NULL;
    8958:	2300      	movs	r3, #0
	list->tail = NULL;
    895a:	e9c4 332e 	strd	r3, r3, [r4, #184]	; 0xb8
}
    895e:	bd10      	pop	{r4, pc}
    8960:	0000960d 	.word	0x0000960d

00008964 <att_send_req>:
{
    8964:	b573      	push	{r0, r1, r4, r5, r6, lr}
    8966:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(req);
    8968:	460c      	mov	r4, r1
    896a:	b959      	cbnz	r1, 8984 <att_send_req+0x20>
    896c:	492e      	ldr	r1, [pc, #184]	; (8a28 <att_send_req+0xc4>)
    896e:	482f      	ldr	r0, [pc, #188]	; (8a2c <att_send_req+0xc8>)
    8970:	f44f 7397 	mov.w	r3, #302	; 0x12e
    8974:	4a2e      	ldr	r2, [pc, #184]	; (8a30 <att_send_req+0xcc>)
    8976:	f009 fae7 	bl	11f48 <printk>
    897a:	f44f 7197 	mov.w	r1, #302	; 0x12e
    897e:	482c      	ldr	r0, [pc, #176]	; (8a30 <att_send_req+0xcc>)
    8980:	f009 fd78 	bl	12474 <assert_post_action>
	__ASSERT_NO_MSG(req->func);
    8984:	6863      	ldr	r3, [r4, #4]
    8986:	b95b      	cbnz	r3, 89a0 <att_send_req+0x3c>
    8988:	492a      	ldr	r1, [pc, #168]	; (8a34 <att_send_req+0xd0>)
    898a:	4828      	ldr	r0, [pc, #160]	; (8a2c <att_send_req+0xc8>)
    898c:	f240 132f 	movw	r3, #303	; 0x12f
    8990:	4a27      	ldr	r2, [pc, #156]	; (8a30 <att_send_req+0xcc>)
    8992:	f009 fad9 	bl	11f48 <printk>
    8996:	f240 112f 	movw	r1, #303	; 0x12f
    899a:	4825      	ldr	r0, [pc, #148]	; (8a30 <att_send_req+0xcc>)
    899c:	f009 fd6a 	bl	12474 <assert_post_action>
	__ASSERT_NO_MSG(!att->req);
    89a0:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    89a4:	b15b      	cbz	r3, 89be <att_send_req+0x5a>
    89a6:	4924      	ldr	r1, [pc, #144]	; (8a38 <att_send_req+0xd4>)
    89a8:	4820      	ldr	r0, [pc, #128]	; (8a2c <att_send_req+0xc8>)
    89aa:	f44f 7398 	mov.w	r3, #304	; 0x130
    89ae:	4a20      	ldr	r2, [pc, #128]	; (8a30 <att_send_req+0xcc>)
    89b0:	f009 faca 	bl	11f48 <printk>
    89b4:	f44f 7198 	mov.w	r1, #304	; 0x130
    89b8:	481d      	ldr	r0, [pc, #116]	; (8a30 <att_send_req+0xcc>)
    89ba:	f009 fd5b 	bl	12474 <assert_post_action>
	att->req = req;
    89be:	f8c5 40b4 	str.w	r4, [r5, #180]	; 0xb4
	return z_impl_k_sem_take(sem, timeout);
    89c2:	2200      	movs	r2, #0
    89c4:	2300      	movs	r3, #0
    89c6:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
    89ca:	f008 f87d 	bl	10ac8 <z_impl_k_sem_take>
	if (k_sem_take(&att->tx_sem, K_NO_WAIT) < 0) {
    89ce:	2800      	cmp	r0, #0
    89d0:	da08      	bge.n	89e4 <att_send_req+0x80>
		k_fifo_put(&att->tx_queue, req->buf);
    89d2:	f105 00f8 	add.w	r0, r5, #248	; 0xf8
    89d6:	6921      	ldr	r1, [r4, #16]
    89d8:	f00d fe05 	bl	165e6 <k_queue_append>
		return 0;
    89dc:	2500      	movs	r5, #0
}
    89de:	4628      	mov	r0, r5
    89e0:	b002      	add	sp, #8
    89e2:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_simple_save(&req->buf->b, &req->state);
    89e4:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    89e6:	f106 0008 	add.w	r0, r6, #8
    89ea:	f00c fe21 	bl	15630 <net_buf_simple_headroom>
	state->len = buf->len;
    89ee:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
    89f0:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    89f2:	81e3      	strh	r3, [r4, #14]
	err = bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    89f4:	6920      	ldr	r0, [r4, #16]
    89f6:	682d      	ldr	r5, [r5, #0]
    89f8:	f004 fcf6 	bl	d3e8 <net_buf_ref>
    89fc:	6923      	ldr	r3, [r4, #16]
    89fe:	4601      	mov	r1, r0
    8a00:	6898      	ldr	r0, [r3, #8]
    8a02:	f7ff ff11 	bl	8828 <att_cb.isra.0>
    8a06:	2600      	movs	r6, #0
    8a08:	4603      	mov	r3, r0
    8a0a:	460a      	mov	r2, r1
    8a0c:	4628      	mov	r0, r5
    8a0e:	2104      	movs	r1, #4
    8a10:	9600      	str	r6, [sp, #0]
    8a12:	f00b fac4 	bl	13f9e <bt_l2cap_send_cb>
	if (err) {
    8a16:	4605      	mov	r5, r0
    8a18:	2800      	cmp	r0, #0
    8a1a:	d0e0      	beq.n	89de <att_send_req+0x7a>
		net_buf_unref(req->buf);
    8a1c:	6920      	ldr	r0, [r4, #16]
    8a1e:	f004 fc9d 	bl	d35c <net_buf_unref>
		req->buf = NULL;
    8a22:	6126      	str	r6, [r4, #16]
		return err;
    8a24:	e7db      	b.n	89de <att_send_req+0x7a>
    8a26:	bf00      	nop
    8a28:	0001a3c1 	.word	0x0001a3c1
    8a2c:	00017b50 	.word	0x00017b50
    8a30:	0001a33c 	.word	0x0001a33c
    8a34:	0001a3b1 	.word	0x0001a3b1
    8a38:	0001a3bb 	.word	0x0001a3bb

00008a3c <att_req_sent>:
{
    8a3c:	b538      	push	{r3, r4, r5, lr}
    8a3e:	4604      	mov	r4, r0
    8a40:	460d      	mov	r5, r1
	struct bt_att *att = att_get(conn);
    8a42:	f7ff ff2d 	bl	88a0 <att_get>
	if (att->req) {
    8a46:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
    8a4a:	b13b      	cbz	r3, 8a5c <att_req_sent+0x20>
    8a4c:	f100 01c0 	add.w	r1, r0, #192	; 0xc0
    8a50:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    8a54:	2300      	movs	r3, #0
    8a56:	4804      	ldr	r0, [pc, #16]	; (8a68 <att_req_sent+0x2c>)
    8a58:	f008 fa56 	bl	10f08 <k_delayed_work_submit_to_queue>
	att_pdu_sent(conn, user_data);
    8a5c:	4629      	mov	r1, r5
    8a5e:	4620      	mov	r0, r4
}
    8a60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	att_pdu_sent(conn, user_data);
    8a64:	f00b bd0b 	b.w	1447e <att_pdu_sent>
    8a68:	20001dc8 	.word	0x20001dc8

00008a6c <att_chan_get>:
{
    8a6c:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    8a6e:	7b43      	ldrb	r3, [r0, #13]
    8a70:	2b07      	cmp	r3, #7
    8a72:	d005      	beq.n	8a80 <att_chan_get+0x14>
		BT_WARN("Not connected");
    8a74:	2157      	movs	r1, #87	; 0x57
    8a76:	480c      	ldr	r0, [pc, #48]	; (8aa8 <att_chan_get+0x3c>)
		BT_WARN("ATT context flagged as disconnected");
    8a78:	f009 fa66 	bl	11f48 <printk>
		return NULL;
    8a7c:	2400      	movs	r4, #0
    8a7e:	e008      	b.n	8a92 <att_chan_get+0x26>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    8a80:	2104      	movs	r1, #4
    8a82:	f00b fb75 	bl	14170 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    8a86:	4604      	mov	r4, r0
    8a88:	b928      	cbnz	r0, 8a96 <att_chan_get+0x2a>
		BT_ERR("Unable to find ATT channel");
    8a8a:	2145      	movs	r1, #69	; 0x45
    8a8c:	4807      	ldr	r0, [pc, #28]	; (8aac <att_chan_get+0x40>)
    8a8e:	f009 fa5b 	bl	11f48 <printk>
}
    8a92:	4620      	mov	r0, r4
    8a94:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8a96:	f100 03b0 	add.w	r3, r0, #176	; 0xb0
    8a9a:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    8a9e:	075b      	lsls	r3, r3, #29
    8aa0:	d5f7      	bpl.n	8a92 <att_chan_get+0x26>
		BT_WARN("ATT context flagged as disconnected");
    8aa2:	2157      	movs	r1, #87	; 0x57
    8aa4:	4802      	ldr	r0, [pc, #8]	; (8ab0 <att_chan_get+0x44>)
    8aa6:	e7e7      	b.n	8a78 <att_chan_get+0xc>
    8aa8:	0001a3c5 	.word	0x0001a3c5
    8aac:	0001a3d8 	.word	0x0001a3d8
    8ab0:	0001a3f8 	.word	0x0001a3f8

00008ab4 <prep_write_cb>:
{
    8ab4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8ab6:	460c      	mov	r4, r1
    8ab8:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
    8aba:	4601      	mov	r1, r0
    8abc:	222a      	movs	r2, #42	; 0x2a
    8abe:	6820      	ldr	r0, [r4, #0]
    8ac0:	f00c f8b3 	bl	14c2a <bt_gatt_check_perm>
    8ac4:	4605      	mov	r5, r0
    8ac6:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    8ac8:	2800      	cmp	r0, #0
    8aca:	d12d      	bne.n	8b28 <prep_write_cb+0x74>
	if (!(attr->perm & BT_GATT_PERM_PREPARE_WRITE)) {
    8acc:	7cb3      	ldrb	r3, [r6, #18]
    8ace:	065b      	lsls	r3, r3, #25
    8ad0:	d514      	bpl.n	8afc <prep_write_cb+0x48>
	write = attr->write(data->conn, attr, data->value, data->len,
    8ad2:	2301      	movs	r3, #1
    8ad4:	9301      	str	r3, [sp, #4]
    8ad6:	89e3      	ldrh	r3, [r4, #14]
    8ad8:	4631      	mov	r1, r6
    8ada:	9300      	str	r3, [sp, #0]
    8adc:	68b7      	ldr	r7, [r6, #8]
    8ade:	89a3      	ldrh	r3, [r4, #12]
    8ae0:	68a2      	ldr	r2, [r4, #8]
    8ae2:	6820      	ldr	r0, [r4, #0]
    8ae4:	47b8      	blx	r7
	if (write != 0) {
    8ae6:	b148      	cbz	r0, 8afc <prep_write_cb+0x48>
	if (err < 0 && err >= -0xff) {
    8ae8:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
    8aec:	bf32      	itee	cc
    8aee:	230e      	movcc	r3, #14
		return -err;
    8af0:	4243      	negcs	r3, r0
    8af2:	b2db      	uxtbcs	r3, r3
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    8af4:	7423      	strb	r3, [r4, #16]
}
    8af6:	4628      	mov	r0, r5
    8af8:	b003      	add	sp, #12
    8afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	data->buf = net_buf_alloc(&prep_pool, K_NO_WAIT);
    8afc:	2200      	movs	r2, #0
    8afe:	2300      	movs	r3, #0
    8b00:	480a      	ldr	r0, [pc, #40]	; (8b2c <prep_write_cb+0x78>)
    8b02:	f00c fd70 	bl	155e6 <net_buf_alloc_fixed>
    8b06:	6060      	str	r0, [r4, #4]
	if (!data->buf) {
    8b08:	b908      	cbnz	r0, 8b0e <prep_write_cb+0x5a>
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    8b0a:	2309      	movs	r3, #9
    8b0c:	e7f2      	b.n	8af4 <prep_write_cb+0x40>
	attr_data->handle = attr->handle;
    8b0e:	8a33      	ldrh	r3, [r6, #16]
	net_buf_add_mem(data->buf, data->value, data->len);
    8b10:	89a2      	ldrh	r2, [r4, #12]
	attr_data->handle = attr->handle;
    8b12:	8283      	strh	r3, [r0, #20]
	attr_data->offset = data->offset;
    8b14:	89e3      	ldrh	r3, [r4, #14]
	net_buf_add_mem(data->buf, data->value, data->len);
    8b16:	68a1      	ldr	r1, [r4, #8]
	attr_data->offset = data->offset;
    8b18:	82c3      	strh	r3, [r0, #22]
	net_buf_add_mem(data->buf, data->value, data->len);
    8b1a:	3008      	adds	r0, #8
    8b1c:	f00c fd94 	bl	15648 <net_buf_simple_add_mem>
	data->err = 0U;
    8b20:	2300      	movs	r3, #0
	return BT_GATT_ITER_CONTINUE;
    8b22:	2501      	movs	r5, #1
	data->err = 0U;
    8b24:	7423      	strb	r3, [r4, #16]
	return BT_GATT_ITER_CONTINUE;
    8b26:	e7e6      	b.n	8af6 <prep_write_cb+0x42>
		return BT_GATT_ITER_STOP;
    8b28:	2500      	movs	r5, #0
    8b2a:	e7e4      	b.n	8af6 <prep_write_cb+0x42>
    8b2c:	20000660 	.word	0x20000660

00008b30 <bt_att_create_pdu>:
{
    8b30:	b570      	push	{r4, r5, r6, lr}
    8b32:	460e      	mov	r6, r1
    8b34:	4615      	mov	r5, r2
	att = att_chan_get(conn);
    8b36:	f7ff ff99 	bl	8a6c <att_chan_get>
	if (!att) {
    8b3a:	4604      	mov	r4, r0
    8b3c:	b148      	cbz	r0, 8b52 <bt_att_create_pdu+0x22>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    8b3e:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
    8b42:	1c6b      	adds	r3, r5, #1
    8b44:	4293      	cmp	r3, r2
    8b46:	d906      	bls.n	8b56 <bt_att_create_pdu+0x26>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    8b48:	2157      	movs	r1, #87	; 0x57
    8b4a:	4813      	ldr	r0, [pc, #76]	; (8b98 <bt_att_create_pdu+0x68>)
    8b4c:	f009 f9fc 	bl	11f48 <printk>
		return NULL;
    8b50:	2400      	movs	r4, #0
}
    8b52:	4620      	mov	r0, r4
    8b54:	bd70      	pop	{r4, r5, r6, pc}
	switch (att_op_get_type(op)) {
    8b56:	4630      	mov	r0, r6
    8b58:	f00b fb3b 	bl	141d2 <att_op_get_type>
    8b5c:	2802      	cmp	r0, #2
    8b5e:	d001      	beq.n	8b64 <bt_att_create_pdu+0x34>
    8b60:	2804      	cmp	r0, #4
    8b62:	d10e      	bne.n	8b82 <bt_att_create_pdu+0x52>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
    8b64:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    8b68:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
    8b6a:	2100      	movs	r1, #0
    8b6c:	4608      	mov	r0, r1
    8b6e:	f00b fa13 	bl	13f98 <bt_l2cap_create_pdu_timeout>
    8b72:	4604      	mov	r4, r0
	if (!buf) {
    8b74:	b950      	cbnz	r0, 8b8c <bt_att_create_pdu+0x5c>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
    8b76:	4632      	mov	r2, r6
    8b78:	2145      	movs	r1, #69	; 0x45
    8b7a:	4808      	ldr	r0, [pc, #32]	; (8b9c <bt_att_create_pdu+0x6c>)
    8b7c:	f009 f9e4 	bl	11f48 <printk>
		return NULL;
    8b80:	e7e7      	b.n	8b52 <bt_att_create_pdu+0x22>
		buf = bt_l2cap_create_pdu(NULL, 0);
    8b82:	f04f 32ff 	mov.w	r2, #4294967295
    8b86:	f04f 33ff 	mov.w	r3, #4294967295
    8b8a:	e7ee      	b.n	8b6a <bt_att_create_pdu+0x3a>
	hdr = net_buf_add(buf, sizeof(*hdr));
    8b8c:	2101      	movs	r1, #1
    8b8e:	3008      	adds	r0, #8
    8b90:	f004 fd56 	bl	d640 <net_buf_simple_add>
	hdr->code = op;
    8b94:	7006      	strb	r6, [r0, #0]
	return buf;
    8b96:	e7dc      	b.n	8b52 <bt_att_create_pdu+0x22>
    8b98:	0001a421 	.word	0x0001a421
    8b9c:	00019e5e 	.word	0x00019e5e

00008ba0 <att_indicate>:
{
    8ba0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    8ba2:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    8ba4:	f101 0008 	add.w	r0, r1, #8
{
    8ba8:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    8baa:	f00c fd39 	bl	15620 <net_buf_simple_pull_le16>
	bt_gatt_notification(conn, handle, buf->data, buf->len);
    8bae:	89a3      	ldrh	r3, [r4, #12]
	handle = net_buf_pull_le16(buf);
    8bb0:	4601      	mov	r1, r0
	bt_gatt_notification(conn, handle, buf->data, buf->len);
    8bb2:	68a2      	ldr	r2, [r4, #8]
    8bb4:	4628      	mov	r0, r5
    8bb6:	f00c f8cb 	bl	14d50 <bt_gatt_notification>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    8bba:	2200      	movs	r2, #0
    8bbc:	211e      	movs	r1, #30
    8bbe:	4628      	mov	r0, r5
    8bc0:	f7ff ffb6 	bl	8b30 <bt_att_create_pdu>
	if (!buf) {
    8bc4:	4602      	mov	r2, r0
    8bc6:	b130      	cbz	r0, 8bd6 <att_indicate+0x36>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent, NULL);
    8bc8:	2300      	movs	r3, #0
    8bca:	2104      	movs	r1, #4
    8bcc:	9300      	str	r3, [sp, #0]
    8bce:	4628      	mov	r0, r5
    8bd0:	4b02      	ldr	r3, [pc, #8]	; (8bdc <att_indicate+0x3c>)
    8bd2:	f00b f9e4 	bl	13f9e <bt_l2cap_send_cb>
}
    8bd6:	2000      	movs	r0, #0
    8bd8:	b003      	add	sp, #12
    8bda:	bd30      	pop	{r4, r5, pc}
    8bdc:	000144d7 	.word	0x000144d7

00008be0 <att_mtu_req>:
	mtu_client = sys_le16_to_cpu(req->mtu);
    8be0:	688b      	ldr	r3, [r1, #8]
{
    8be2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	mtu_client = sys_le16_to_cpu(req->mtu);
    8be6:	881e      	ldrh	r6, [r3, #0]
{
    8be8:	4605      	mov	r5, r0
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    8bea:	2e16      	cmp	r6, #22
    8bec:	d922      	bls.n	8c34 <att_mtu_req+0x54>
	struct bt_conn *conn = att->chan.chan.conn;
    8bee:	f8d0 8000 	ldr.w	r8, [r0]
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    8bf2:	2202      	movs	r2, #2
    8bf4:	2103      	movs	r1, #3
    8bf6:	4640      	mov	r0, r8
    8bf8:	f7ff ff9a 	bl	8b30 <bt_att_create_pdu>
	if (!pdu) {
    8bfc:	4607      	mov	r7, r0
    8bfe:	b1d8      	cbz	r0, 8c38 <att_mtu_req+0x58>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    8c00:	2102      	movs	r1, #2
    8c02:	3008      	adds	r0, #8
    8c04:	f004 fd1c 	bl	d640 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    8c08:	2400      	movs	r4, #0
    8c0a:	f06f 0308 	mvn.w	r3, #8
    8c0e:	7044      	strb	r4, [r0, #1]
    8c10:	7003      	strb	r3, [r0, #0]
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent, NULL);
    8c12:	463a      	mov	r2, r7
    8c14:	2104      	movs	r1, #4
    8c16:	4640      	mov	r0, r8
    8c18:	4b08      	ldr	r3, [pc, #32]	; (8c3c <att_mtu_req+0x5c>)
    8c1a:	9400      	str	r4, [sp, #0]
    8c1c:	f00b f9bf 	bl	13f9e <bt_l2cap_send_cb>
	att->chan.rx.mtu = MIN(mtu_client, mtu_server);
    8c20:	2ef7      	cmp	r6, #247	; 0xf7
    8c22:	bf28      	it	cs
    8c24:	26f7      	movcs	r6, #247	; 0xf7
	return 0;
    8c26:	4620      	mov	r0, r4
	att->chan.rx.mtu = MIN(mtu_client, mtu_server);
    8c28:	87ee      	strh	r6, [r5, #62]	; 0x3e
	att->chan.tx.mtu = att->chan.rx.mtu;
    8c2a:	f8a5 604a 	strh.w	r6, [r5, #74]	; 0x4a
}
    8c2e:	b002      	add	sp, #8
    8c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_INVALID_PDU;
    8c34:	2004      	movs	r0, #4
    8c36:	e7fa      	b.n	8c2e <att_mtu_req+0x4e>
		return BT_ATT_ERR_UNLIKELY;
    8c38:	200e      	movs	r0, #14
    8c3a:	e7f8      	b.n	8c2e <att_mtu_req+0x4e>
    8c3c:	00014501 	.word	0x00014501

00008c40 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    8c40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    8c44:	4688      	mov	r8, r1
    8c46:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    8c48:	2101      	movs	r1, #1
    8c4a:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    8c4c:	4605      	mov	r5, r0
    8c4e:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    8c50:	f7ff ff6e 	bl	8b30 <bt_att_create_pdu>
	if (!buf) {
    8c54:	4604      	mov	r4, r0
    8c56:	b180      	cbz	r0, 8c7a <send_err_rsp.part.0+0x3a>
	rsp = net_buf_add(buf, sizeof(*rsp));
    8c58:	2104      	movs	r1, #4
    8c5a:	3008      	adds	r0, #8
    8c5c:	f004 fcf0 	bl	d640 <net_buf_simple_add>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent, NULL);
    8c60:	2300      	movs	r3, #0
	rsp->request = req;
    8c62:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
    8c66:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
    8c6a:	70c6      	strb	r6, [r0, #3]
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent, NULL);
    8c6c:	4622      	mov	r2, r4
    8c6e:	9300      	str	r3, [sp, #0]
    8c70:	2104      	movs	r1, #4
    8c72:	4628      	mov	r0, r5
    8c74:	4b02      	ldr	r3, [pc, #8]	; (8c80 <send_err_rsp.part.0+0x40>)
    8c76:	f00b f992 	bl	13f9e <bt_l2cap_send_cb>
}
    8c7a:	b002      	add	sp, #8
    8c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8c80:	00014501 	.word	0x00014501

00008c84 <bt_att_recv>:
{
    8c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    8c86:	898b      	ldrh	r3, [r1, #12]
{
    8c88:	4604      	mov	r4, r0
    8c8a:	460e      	mov	r6, r1
	if (buf->len < sizeof(*hdr)) {
    8c8c:	b92b      	cbnz	r3, 8c9a <bt_att_recv+0x16>
		BT_ERR("Too small ATT PDU received");
    8c8e:	2145      	movs	r1, #69	; 0x45
    8c90:	4836      	ldr	r0, [pc, #216]	; (8d6c <bt_att_recv+0xe8>)
			BT_WARN("Ignoring unexpected indication");
    8c92:	f009 f959 	bl	11f48 <printk>
}
    8c96:	2000      	movs	r0, #0
    8c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    8c9a:	2101      	movs	r1, #1
    8c9c:	f106 0008 	add.w	r0, r6, #8
    8ca0:	f004 fcac 	bl	d5fc <net_buf_simple_pull_mem>
		if (hdr->code == handlers[i].op) {
    8ca4:	4932      	ldr	r1, [pc, #200]	; (8d70 <bt_att_recv+0xec>)
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    8ca6:	4605      	mov	r5, r0
		if (hdr->code == handlers[i].op) {
    8ca8:	7802      	ldrb	r2, [r0, #0]
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    8caa:	2300      	movs	r3, #0
    8cac:	4608      	mov	r0, r1
		if (hdr->code == handlers[i].op) {
    8cae:	f811 7033 	ldrb.w	r7, [r1, r3, lsl #3]
    8cb2:	4297      	cmp	r7, r2
    8cb4:	d116      	bne.n	8ce4 <bt_att_recv+0x60>
		if (handler->type == ATT_REQUEST &&
    8cb6:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
    8cba:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    8cbe:	789f      	ldrb	r7, [r3, #2]
    8cc0:	2f01      	cmp	r7, #1
    8cc2:	d124      	bne.n	8d0e <bt_att_recv+0x8a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8cc4:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
    8cc8:	e8d2 3fef 	ldaex	r3, [r2]
    8ccc:	f043 0101 	orr.w	r1, r3, #1
    8cd0:	e8c2 1fee 	stlex	lr, r1, [r2]
    8cd4:	f1be 0f00 	cmp.w	lr, #0
    8cd8:	d1f6      	bne.n	8cc8 <bt_att_recv+0x44>
    8cda:	07da      	lsls	r2, r3, #31
    8cdc:	d529      	bpl.n	8d32 <bt_att_recv+0xae>
			BT_WARN("Ignoring unexpected request");
    8cde:	2157      	movs	r1, #87	; 0x57
    8ce0:	4824      	ldr	r0, [pc, #144]	; (8d74 <bt_att_recv+0xf0>)
    8ce2:	e7d6      	b.n	8c92 <bt_att_recv+0xe>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    8ce4:	3301      	adds	r3, #1
    8ce6:	2b1b      	cmp	r3, #27
    8ce8:	d1e1      	bne.n	8cae <bt_att_recv+0x2a>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
    8cea:	2157      	movs	r1, #87	; 0x57
    8cec:	4822      	ldr	r0, [pc, #136]	; (8d78 <bt_att_recv+0xf4>)
    8cee:	f009 f92b 	bl	11f48 <printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    8cf2:	7829      	ldrb	r1, [r5, #0]
    8cf4:	4608      	mov	r0, r1
    8cf6:	f00b fa6c 	bl	141d2 <att_op_get_type>
    8cfa:	2800      	cmp	r0, #0
    8cfc:	d0cb      	beq.n	8c96 <bt_att_recv+0x12>
	if (!req) {
    8cfe:	2900      	cmp	r1, #0
    8d00:	d0c9      	beq.n	8c96 <bt_att_recv+0x12>
    8d02:	2306      	movs	r3, #6
    8d04:	2200      	movs	r2, #0
    8d06:	6820      	ldr	r0, [r4, #0]
    8d08:	f7ff ff9a 	bl	8c40 <send_err_rsp.part.0>
    8d0c:	e7c3      	b.n	8c96 <bt_att_recv+0x12>
		} else if (handler->type == ATT_INDICATION &&
    8d0e:	2f05      	cmp	r7, #5
    8d10:	d10f      	bne.n	8d32 <bt_att_recv+0xae>
    8d12:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
    8d16:	e8d2 3fef 	ldaex	r3, [r2]
    8d1a:	f043 0102 	orr.w	r1, r3, #2
    8d1e:	e8c2 1fee 	stlex	lr, r1, [r2]
    8d22:	f1be 0f00 	cmp.w	lr, #0
    8d26:	d1f6      	bne.n	8d16 <bt_att_recv+0x92>
    8d28:	079b      	lsls	r3, r3, #30
    8d2a:	d502      	bpl.n	8d32 <bt_att_recv+0xae>
			BT_WARN("Ignoring unexpected indication");
    8d2c:	2157      	movs	r1, #87	; 0x57
    8d2e:	4813      	ldr	r0, [pc, #76]	; (8d7c <bt_att_recv+0xf8>)
    8d30:	e7af      	b.n	8c92 <bt_att_recv+0xe>
	if (buf->len < handler->expect_len) {
    8d32:	eb00 030c 	add.w	r3, r0, ip
    8d36:	89b2      	ldrh	r2, [r6, #12]
    8d38:	7859      	ldrb	r1, [r3, #1]
    8d3a:	4291      	cmp	r1, r2
    8d3c:	d908      	bls.n	8d50 <bt_att_recv+0xcc>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    8d3e:	2145      	movs	r1, #69	; 0x45
    8d40:	782b      	ldrb	r3, [r5, #0]
    8d42:	480f      	ldr	r0, [pc, #60]	; (8d80 <bt_att_recv+0xfc>)
    8d44:	f009 f900 	bl	11f48 <printk>
	if (handler->type == ATT_REQUEST && err) {
    8d48:	2f01      	cmp	r7, #1
    8d4a:	d1a4      	bne.n	8c96 <bt_att_recv+0x12>
		err = BT_ATT_ERR_INVALID_PDU;
    8d4c:	2304      	movs	r3, #4
    8d4e:	e008      	b.n	8d62 <bt_att_recv+0xde>
		err = handler->func(att, buf);
    8d50:	685b      	ldr	r3, [r3, #4]
    8d52:	4631      	mov	r1, r6
    8d54:	4620      	mov	r0, r4
    8d56:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    8d58:	2f01      	cmp	r7, #1
		err = handler->func(att, buf);
    8d5a:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    8d5c:	d19b      	bne.n	8c96 <bt_att_recv+0x12>
    8d5e:	2800      	cmp	r0, #0
    8d60:	d099      	beq.n	8c96 <bt_att_recv+0x12>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    8d62:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    8d64:	2900      	cmp	r1, #0
    8d66:	d096      	beq.n	8c96 <bt_att_recv+0x12>
    8d68:	e7cc      	b.n	8d04 <bt_att_recv+0x80>
    8d6a:	bf00      	nop
    8d6c:	0001a44b 	.word	0x0001a44b
    8d70:	000170bc 	.word	0x000170bc
    8d74:	0001a46b 	.word	0x0001a46b
    8d78:	0001a4d4 	.word	0x0001a4d4
    8d7c:	0001a48c 	.word	0x0001a48c
    8d80:	0001a4b0 	.word	0x0001a4b0

00008d84 <att_write_rsp>:
{
    8d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    8d88:	460d      	mov	r5, r1
    8d8a:	3900      	subs	r1, #0
    8d8c:	bf18      	it	ne
    8d8e:	2101      	movne	r1, #1
{
    8d90:	b088      	sub	sp, #32
    8d92:	4606      	mov	r6, r0
    8d94:	4690      	mov	r8, r2
    8d96:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    8d98:	f00c f806 	bl	14da8 <bt_gatt_change_aware>
    8d9c:	2800      	cmp	r0, #0
    8d9e:	d04e      	beq.n	8e3e <att_write_rsp+0xba>
	if (!handle) {
    8da0:	2f00      	cmp	r7, #0
    8da2:	d04e      	beq.n	8e42 <att_write_rsp+0xbe>
	(void)memset(&data, 0, sizeof(data));
    8da4:	2218      	movs	r2, #24
    8da6:	2100      	movs	r1, #0
    8da8:	a802      	add	r0, sp, #8
    8daa:	f00a fc0c 	bl	135c6 <memset>
	if (rsp) {
    8dae:	f1b8 0f00 	cmp.w	r8, #0
    8db2:	d124      	bne.n	8dfe <att_write_rsp+0x7a>
	data.offset = offset;
    8db4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    8db8:	4639      	mov	r1, r7
	data.offset = offset;
    8dba:	f8ad 301a 	strh.w	r3, [sp, #26]
	data.value = value;
    8dbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    8dc0:	4638      	mov	r0, r7
	data.value = value;
    8dc2:	9305      	str	r3, [sp, #20]
	data.len = len;
    8dc4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    8dc8:	4a1f      	ldr	r2, [pc, #124]	; (8e48 <att_write_rsp+0xc4>)
	data.len = len;
    8dca:	f8ad 3018 	strh.w	r3, [sp, #24]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    8dce:	2301      	movs	r3, #1
    8dd0:	f88d 301c 	strb.w	r3, [sp, #28]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    8dd4:	ab02      	add	r3, sp, #8
	data.conn = conn;
    8dd6:	9602      	str	r6, [sp, #8]
	data.req = req;
    8dd8:	f88d 5010 	strb.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    8ddc:	f00b fa35 	bl	1424a <bt_gatt_foreach_attr>
	if (data.err) {
    8de0:	f89d 401c 	ldrb.w	r4, [sp, #28]
    8de4:	b30c      	cbz	r4, 8e2a <att_write_rsp+0xa6>
		if (rsp) {
    8de6:	f1b8 0f00 	cmp.w	r8, #0
    8dea:	d019      	beq.n	8e20 <att_write_rsp+0x9c>
			net_buf_unref(data.buf);
    8dec:	9803      	ldr	r0, [sp, #12]
    8dee:	f004 fab5 	bl	d35c <net_buf_unref>
	if (!req) {
    8df2:	b975      	cbnz	r5, 8e12 <att_write_rsp+0x8e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    8df4:	2400      	movs	r4, #0
}
    8df6:	4620      	mov	r0, r4
    8df8:	b008      	add	sp, #32
    8dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    8dfe:	2200      	movs	r2, #0
    8e00:	4641      	mov	r1, r8
    8e02:	4630      	mov	r0, r6
    8e04:	f7ff fe94 	bl	8b30 <bt_att_create_pdu>
    8e08:	9003      	str	r0, [sp, #12]
		if (!data.buf) {
    8e0a:	2800      	cmp	r0, #0
    8e0c:	d1d2      	bne.n	8db4 <att_write_rsp+0x30>
			return BT_ATT_ERR_UNLIKELY;
    8e0e:	240e      	movs	r4, #14
    8e10:	e7f1      	b.n	8df6 <att_write_rsp+0x72>
    8e12:	463a      	mov	r2, r7
    8e14:	4629      	mov	r1, r5
    8e16:	4630      	mov	r0, r6
    8e18:	f89d 301c 	ldrb.w	r3, [sp, #28]
    8e1c:	f7ff ff10 	bl	8c40 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    8e20:	2d18      	cmp	r5, #24
    8e22:	d1e7      	bne.n	8df4 <att_write_rsp+0x70>
    8e24:	f89d 401c 	ldrb.w	r4, [sp, #28]
    8e28:	e7e5      	b.n	8df6 <att_write_rsp+0x72>
	if (data.buf) {
    8e2a:	9a03      	ldr	r2, [sp, #12]
    8e2c:	2a00      	cmp	r2, #0
    8e2e:	d0e1      	beq.n	8df4 <att_write_rsp+0x70>
		(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    8e30:	2104      	movs	r1, #4
    8e32:	4630      	mov	r0, r6
    8e34:	4b05      	ldr	r3, [pc, #20]	; (8e4c <att_write_rsp+0xc8>)
    8e36:	9400      	str	r4, [sp, #0]
    8e38:	f00b f8b1 	bl	13f9e <bt_l2cap_send_cb>
    8e3c:	e7db      	b.n	8df6 <att_write_rsp+0x72>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    8e3e:	2412      	movs	r4, #18
    8e40:	e7d9      	b.n	8df6 <att_write_rsp+0x72>
		return BT_ATT_ERR_INVALID_HANDLE;
    8e42:	2401      	movs	r4, #1
    8e44:	e7d7      	b.n	8df6 <att_write_rsp+0x72>
    8e46:	bf00      	nop
    8e48:	0001452b 	.word	0x0001452b
    8e4c:	00014501 	.word	0x00014501

00008e50 <att_exec_write_req>:
{
    8e50:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	u8_t err = 0U;
    8e54:	2400      	movs	r4, #0
	return att_exec_write_rsp(att, req->flags);
    8e56:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    8e58:	6807      	ldr	r7, [r0, #0]
	return att_exec_write_rsp(att, req->flags);
    8e5a:	f893 8000 	ldrb.w	r8, [r3]
	while ((buf = net_buf_get(&att->prep_queue, K_NO_WAIT))) {
    8e5e:	f500 768a 	add.w	r6, r0, #276	; 0x114
    8e62:	2200      	movs	r2, #0
    8e64:	2300      	movs	r3, #0
    8e66:	4630      	mov	r0, r6
    8e68:	f004 f9e6 	bl	d238 <net_buf_get>
    8e6c:	4605      	mov	r5, r0
    8e6e:	b988      	cbnz	r0, 8e94 <att_exec_write_req+0x44>
	if (err) {
    8e70:	bb64      	cbnz	r4, 8ecc <att_exec_write_req+0x7c>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_EXEC_WRITE_RSP, 0);
    8e72:	4622      	mov	r2, r4
    8e74:	2119      	movs	r1, #25
    8e76:	4638      	mov	r0, r7
    8e78:	f7ff fe5a 	bl	8b30 <bt_att_create_pdu>
	if (!buf) {
    8e7c:	4602      	mov	r2, r0
    8e7e:	b338      	cbz	r0, 8ed0 <att_exec_write_req+0x80>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent, NULL);
    8e80:	2104      	movs	r1, #4
    8e82:	4638      	mov	r0, r7
    8e84:	4b13      	ldr	r3, [pc, #76]	; (8ed4 <att_exec_write_req+0x84>)
    8e86:	9400      	str	r4, [sp, #0]
    8e88:	f00b f889 	bl	13f9e <bt_l2cap_send_cb>
}
    8e8c:	4620      	mov	r0, r4
    8e8e:	b004      	add	sp, #16
    8e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!err && flags == BT_ATT_FLAG_EXEC) {
    8e94:	b9b4      	cbnz	r4, 8ec4 <att_exec_write_req+0x74>
    8e96:	f1b8 0f01 	cmp.w	r8, #1
    8e9a:	d113      	bne.n	8ec4 <att_exec_write_req+0x74>
			err = att_write_rsp(conn, BT_ATT_OP_EXEC_WRITE_REQ, 0,
    8e9c:	89aa      	ldrh	r2, [r5, #12]
    8e9e:	8aab      	ldrh	r3, [r5, #20]
    8ea0:	9202      	str	r2, [sp, #8]
    8ea2:	68aa      	ldr	r2, [r5, #8]
    8ea4:	2118      	movs	r1, #24
    8ea6:	9201      	str	r2, [sp, #4]
    8ea8:	8aea      	ldrh	r2, [r5, #22]
    8eaa:	4638      	mov	r0, r7
    8eac:	9200      	str	r2, [sp, #0]
    8eae:	4622      	mov	r2, r4
    8eb0:	f7ff ff68 	bl	8d84 <att_write_rsp>
			if (err) {
    8eb4:	4604      	mov	r4, r0
    8eb6:	b128      	cbz	r0, 8ec4 <att_exec_write_req+0x74>
	if (!req) {
    8eb8:	4603      	mov	r3, r0
    8eba:	2118      	movs	r1, #24
    8ebc:	4638      	mov	r0, r7
    8ebe:	8aaa      	ldrh	r2, [r5, #20]
    8ec0:	f7ff febe 	bl	8c40 <send_err_rsp.part.0>
		net_buf_unref(buf);
    8ec4:	4628      	mov	r0, r5
    8ec6:	f004 fa49 	bl	d35c <net_buf_unref>
    8eca:	e7ca      	b.n	8e62 <att_exec_write_req+0x12>
		return 0;
    8ecc:	4604      	mov	r4, r0
    8ece:	e7dd      	b.n	8e8c <att_exec_write_req+0x3c>
		return BT_ATT_ERR_UNLIKELY;
    8ed0:	240e      	movs	r4, #14
    8ed2:	e7db      	b.n	8e8c <att_exec_write_req+0x3c>
    8ed4:	00014501 	.word	0x00014501

00008ed8 <att_prepare_write_req>:
{
    8ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8edc:	460c      	mov	r4, r1
    8ede:	4606      	mov	r6, r0
	req = net_buf_pull_mem(buf, sizeof(*req));
    8ee0:	2104      	movs	r1, #4
{
    8ee2:	b089      	sub	sp, #36	; 0x24
	req = net_buf_pull_mem(buf, sizeof(*req));
    8ee4:	f104 0008 	add.w	r0, r4, #8
    8ee8:	f004 fb88 	bl	d5fc <net_buf_simple_pull_mem>
	struct bt_conn *conn = att->chan.chan.conn;
    8eec:	6835      	ldr	r5, [r6, #0]
	handle = sys_le16_to_cpu(req->handle);
    8eee:	f8b0 a000 	ldrh.w	sl, [r0]
	offset = sys_le16_to_cpu(req->offset);
    8ef2:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!bt_gatt_change_aware(conn, true)) {
    8ef6:	2101      	movs	r1, #1
    8ef8:	4628      	mov	r0, r5
	return att_prep_write_rsp(att, handle, offset, buf->data, buf->len);
    8efa:	f8d4 8008 	ldr.w	r8, [r4, #8]
    8efe:	89a7      	ldrh	r7, [r4, #12]
	handle = sys_le16_to_cpu(req->handle);
    8f00:	fa1f fb8a 	uxth.w	fp, sl
	if (!bt_gatt_change_aware(conn, true)) {
    8f04:	f00b ff50 	bl	14da8 <bt_gatt_change_aware>
    8f08:	2800      	cmp	r0, #0
    8f0a:	d04c      	beq.n	8fa6 <att_prepare_write_req+0xce>
	if (!handle) {
    8f0c:	f1bb 0f00 	cmp.w	fp, #0
    8f10:	d04b      	beq.n	8faa <att_prepare_write_req+0xd2>
	(void)memset(&data, 0, sizeof(data));
    8f12:	2214      	movs	r2, #20
    8f14:	2100      	movs	r1, #0
    8f16:	a803      	add	r0, sp, #12
    8f18:	f00a fb55 	bl	135c6 <memset>
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    8f1c:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    8f1e:	4659      	mov	r1, fp
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    8f20:	f88d 301c 	strb.w	r3, [sp, #28]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    8f24:	4658      	mov	r0, fp
    8f26:	4a23      	ldr	r2, [pc, #140]	; (8fb4 <att_prepare_write_req+0xdc>)
    8f28:	ab03      	add	r3, sp, #12
	data.conn = conn;
    8f2a:	9503      	str	r5, [sp, #12]
	data.offset = offset;
    8f2c:	f8ad 901a 	strh.w	r9, [sp, #26]
	data.value = value;
    8f30:	f8cd 8014 	str.w	r8, [sp, #20]
	data.len = len;
    8f34:	f8ad 7018 	strh.w	r7, [sp, #24]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    8f38:	f00b f987 	bl	1424a <bt_gatt_foreach_attr>
	if (data.err) {
    8f3c:	f89d 401c 	ldrb.w	r4, [sp, #28]
    8f40:	b154      	cbz	r4, 8f58 <att_prepare_write_req+0x80>
	if (!req) {
    8f42:	4623      	mov	r3, r4
    8f44:	465a      	mov	r2, fp
    8f46:	2116      	movs	r1, #22
    8f48:	4628      	mov	r0, r5
    8f4a:	f7ff fe79 	bl	8c40 <send_err_rsp.part.0>
		return 0;
    8f4e:	2400      	movs	r4, #0
}
    8f50:	4620      	mov	r0, r4
    8f52:	b009      	add	sp, #36	; 0x24
    8f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_buf_put(&att->prep_queue, data.buf);
    8f58:	9904      	ldr	r1, [sp, #16]
    8f5a:	f506 708a 	add.w	r0, r6, #276	; 0x114
    8f5e:	f004 f9c9 	bl	d2f4 <net_buf_put>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_PREPARE_WRITE_RSP, 0);
    8f62:	4622      	mov	r2, r4
    8f64:	2117      	movs	r1, #23
    8f66:	4628      	mov	r0, r5
    8f68:	f7ff fde2 	bl	8b30 <bt_att_create_pdu>
    8f6c:	9004      	str	r0, [sp, #16]
	if (!data.buf) {
    8f6e:	b1f0      	cbz	r0, 8fae <att_prepare_write_req+0xd6>
	rsp = net_buf_add(data.buf, sizeof(*rsp));
    8f70:	2104      	movs	r1, #4
    8f72:	3008      	adds	r0, #8
    8f74:	f004 fb64 	bl	d640 <net_buf_simple_add>
    8f78:	4606      	mov	r6, r0
	rsp->handle = sys_cpu_to_le16(handle);
    8f7a:	f8a0 a000 	strh.w	sl, [r0]
	rsp->offset = sys_cpu_to_le16(offset);
    8f7e:	f8a0 9002 	strh.w	r9, [r0, #2]
	net_buf_add(data.buf, len);
    8f82:	9804      	ldr	r0, [sp, #16]
    8f84:	4639      	mov	r1, r7
    8f86:	3008      	adds	r0, #8
    8f88:	f004 fb5a 	bl	d640 <net_buf_simple_add>
	memcpy(rsp->value, value, len);
    8f8c:	463a      	mov	r2, r7
    8f8e:	4641      	mov	r1, r8
    8f90:	1d30      	adds	r0, r6, #4
    8f92:	f00a faed 	bl	13570 <memcpy>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    8f96:	2104      	movs	r1, #4
    8f98:	4628      	mov	r0, r5
    8f9a:	4b07      	ldr	r3, [pc, #28]	; (8fb8 <att_prepare_write_req+0xe0>)
    8f9c:	9a04      	ldr	r2, [sp, #16]
    8f9e:	9400      	str	r4, [sp, #0]
    8fa0:	f00a fffd 	bl	13f9e <bt_l2cap_send_cb>
	return 0;
    8fa4:	e7d4      	b.n	8f50 <att_prepare_write_req+0x78>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    8fa6:	2412      	movs	r4, #18
    8fa8:	e7d2      	b.n	8f50 <att_prepare_write_req+0x78>
		return BT_ATT_ERR_INVALID_HANDLE;
    8faa:	2401      	movs	r4, #1
    8fac:	e7d0      	b.n	8f50 <att_prepare_write_req+0x78>
		return BT_ATT_ERR_UNLIKELY;
    8fae:	240e      	movs	r4, #14
    8fb0:	e7ce      	b.n	8f50 <att_prepare_write_req+0x78>
    8fb2:	bf00      	nop
    8fb4:	00008ab5 	.word	0x00008ab5
    8fb8:	00014501 	.word	0x00014501

00008fbc <att_read_group_req>:
{
    8fbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u8_t uuid_len = buf->len - sizeof(*req);
    8fc0:	7b0c      	ldrb	r4, [r1, #12]
{
    8fc2:	4606      	mov	r6, r0
	u8_t uuid_len = buf->len - sizeof(*req);
    8fc4:	3c04      	subs	r4, #4
    8fc6:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    8fc8:	2c02      	cmp	r4, #2
{
    8fca:	4608      	mov	r0, r1
    8fcc:	b08f      	sub	sp, #60	; 0x3c
	if (uuid_len != 2 && uuid_len != 16) {
    8fce:	d001      	beq.n	8fd4 <att_read_group_req+0x18>
    8fd0:	2c10      	cmp	r4, #16
    8fd2:	d16f      	bne.n	90b4 <att_read_group_req+0xf8>
	req = net_buf_pull_mem(buf, sizeof(*req));
    8fd4:	2104      	movs	r1, #4
    8fd6:	3008      	adds	r0, #8
	struct bt_conn *conn = att->chan.chan.conn;
    8fd8:	f8d6 9000 	ldr.w	r9, [r6]
	req = net_buf_pull_mem(buf, sizeof(*req));
    8fdc:	f004 fb0e 	bl	d5fc <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    8fe0:	f10d 0810 	add.w	r8, sp, #16
	start_handle = sys_le16_to_cpu(req->start_handle);
    8fe4:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    8fe6:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    8fe8:	1d01      	adds	r1, r0, #4
    8fea:	4622      	mov	r2, r4
    8fec:	4640      	mov	r0, r8
    8fee:	f00a fb84 	bl	136fa <bt_uuid_create>
    8ff2:	2800      	cmp	r0, #0
    8ff4:	d060      	beq.n	90b8 <att_read_group_req+0xfc>
	if (!start || !end) {
    8ff6:	2d00      	cmp	r5, #0
    8ff8:	d036      	beq.n	9068 <att_read_group_req+0xac>
    8ffa:	2400      	movs	r4, #0
    8ffc:	b39f      	cbz	r7, 9066 <att_read_group_req+0xaa>
	if (start > end) {
    8ffe:	42bd      	cmp	r5, r7
    9000:	d832      	bhi.n	9068 <att_read_group_req+0xac>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    9002:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    9006:	4640      	mov	r0, r8
    9008:	a903      	add	r1, sp, #12
    900a:	f88d 400c 	strb.w	r4, [sp, #12]
    900e:	f8ad 300e 	strh.w	r3, [sp, #14]
    9012:	f00a fb48 	bl	136a6 <bt_uuid_cmp>
    9016:	bb90      	cbnz	r0, 907e <att_read_group_req+0xc2>
	struct bt_conn *conn = att->chan.chan.conn;
    9018:	f8d6 9000 	ldr.w	r9, [r6]
	(void)memset(&data, 0, sizeof(data));
    901c:	2214      	movs	r2, #20
    901e:	2100      	movs	r1, #0
    9020:	a809      	add	r0, sp, #36	; 0x24
    9022:	f00a fad0 	bl	135c6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    9026:	2201      	movs	r2, #1
    9028:	2111      	movs	r1, #17
    902a:	4648      	mov	r0, r9
    902c:	f7ff fd80 	bl	8b30 <bt_att_create_pdu>
    9030:	900b      	str	r0, [sp, #44]	; 0x2c
	if (!data.buf) {
    9032:	2800      	cmp	r0, #0
    9034:	d040      	beq.n	90b8 <att_read_group_req+0xfc>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    9036:	2101      	movs	r1, #1
    9038:	3008      	adds	r0, #8
	data.uuid = uuid;
    903a:	e9cd 6809 	strd	r6, r8, [sp, #36]	; 0x24
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    903e:	f004 faff 	bl	d640 <net_buf_simple_add>
	data.rsp->len = 0U;
    9042:	2600      	movs	r6, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    9044:	900c      	str	r0, [sp, #48]	; 0x30
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    9046:	ab09      	add	r3, sp, #36	; 0x24
	data.rsp->len = 0U;
    9048:	7006      	strb	r6, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    904a:	4639      	mov	r1, r7
    904c:	4628      	mov	r0, r5
    904e:	4a1b      	ldr	r2, [pc, #108]	; (90bc <att_read_group_req+0x100>)
	data.group = NULL;
    9050:	960d      	str	r6, [sp, #52]	; 0x34
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    9052:	f00b f8fa 	bl	1424a <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    9056:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9058:	781c      	ldrb	r4, [r3, #0]
    905a:	bb1c      	cbnz	r4, 90a4 <att_read_group_req+0xe8>
		net_buf_unref(data.buf);
    905c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    905e:	f004 f97d 	bl	d35c <net_buf_unref>
	if (!req) {
    9062:	230a      	movs	r3, #10
    9064:	e018      	b.n	9098 <att_read_group_req+0xdc>
			*err = 0U;
    9066:	463d      	mov	r5, r7
	if (!req) {
    9068:	2301      	movs	r3, #1
    906a:	462a      	mov	r2, r5
    906c:	2110      	movs	r1, #16
    906e:	4648      	mov	r0, r9
    9070:	f7ff fde6 	bl	8c40 <send_err_rsp.part.0>
		return 0;
    9074:	2400      	movs	r4, #0
}
    9076:	4620      	mov	r0, r4
    9078:	b00f      	add	sp, #60	; 0x3c
    907a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    907e:	f642 0301 	movw	r3, #10241	; 0x2801
    9082:	4640      	mov	r0, r8
    9084:	a909      	add	r1, sp, #36	; 0x24
    9086:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
    908a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    908e:	f00a fb0a 	bl	136a6 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    9092:	2800      	cmp	r0, #0
    9094:	d0c0      	beq.n	9018 <att_read_group_req+0x5c>
	if (!req) {
    9096:	2310      	movs	r3, #16
    9098:	462a      	mov	r2, r5
    909a:	2110      	movs	r1, #16
    909c:	4648      	mov	r0, r9
    909e:	f7ff fdcf 	bl	8c40 <send_err_rsp.part.0>
		return 0;
    90a2:	e7e8      	b.n	9076 <att_read_group_req+0xba>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    90a4:	2104      	movs	r1, #4
    90a6:	4648      	mov	r0, r9
    90a8:	4b05      	ldr	r3, [pc, #20]	; (90c0 <att_read_group_req+0x104>)
    90aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    90ac:	9600      	str	r6, [sp, #0]
    90ae:	f00a ff76 	bl	13f9e <bt_l2cap_send_cb>
	return 0;
    90b2:	e7df      	b.n	9074 <att_read_group_req+0xb8>
		return BT_ATT_ERR_INVALID_PDU;
    90b4:	2404      	movs	r4, #4
    90b6:	e7de      	b.n	9076 <att_read_group_req+0xba>
		return BT_ATT_ERR_UNLIKELY;
    90b8:	240e      	movs	r4, #14
    90ba:	e7dc      	b.n	9076 <att_read_group_req+0xba>
    90bc:	000142fb 	.word	0x000142fb
    90c0:	00014501 	.word	0x00014501

000090c4 <att_read_mult_req>:
{
    90c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    90c8:	6806      	ldr	r6, [r0, #0]
{
    90ca:	b089      	sub	sp, #36	; 0x24
	(void)memset(&data, 0, sizeof(data));
    90cc:	2214      	movs	r2, #20
{
    90ce:	4605      	mov	r5, r0
    90d0:	460c      	mov	r4, r1
	(void)memset(&data, 0, sizeof(data));
    90d2:	a803      	add	r0, sp, #12
    90d4:	2100      	movs	r1, #0
    90d6:	f00a fa76 	bl	135c6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    90da:	2200      	movs	r2, #0
    90dc:	210f      	movs	r1, #15
    90de:	4630      	mov	r0, r6
    90e0:	f7ff fd26 	bl	8b30 <bt_att_create_pdu>
    90e4:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
    90e6:	b378      	cbz	r0, 9148 <att_read_mult_req+0x84>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    90e8:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    90ec:	f8df 9060 	ldr.w	r9, [pc, #96]	; 9150 <att_read_mult_req+0x8c>
	data.att = att;
    90f0:	9503      	str	r5, [sp, #12]
		handle = net_buf_pull_le16(buf);
    90f2:	f104 0708 	add.w	r7, r4, #8
	while (buf->len >= sizeof(u16_t)) {
    90f6:	89a3      	ldrh	r3, [r4, #12]
    90f8:	2b01      	cmp	r3, #1
    90fa:	d808      	bhi.n	910e <att_read_mult_req+0x4a>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    90fc:	2400      	movs	r4, #0
    90fe:	2104      	movs	r1, #4
    9100:	4630      	mov	r0, r6
    9102:	4b12      	ldr	r3, [pc, #72]	; (914c <att_read_mult_req+0x88>)
    9104:	9a05      	ldr	r2, [sp, #20]
    9106:	9400      	str	r4, [sp, #0]
    9108:	f00a ff49 	bl	13f9e <bt_l2cap_send_cb>
	return 0;
    910c:	e018      	b.n	9140 <att_read_mult_req+0x7c>
		handle = net_buf_pull_le16(buf);
    910e:	4638      	mov	r0, r7
    9110:	f00c fa86 	bl	15620 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    9114:	ab03      	add	r3, sp, #12
    9116:	464a      	mov	r2, r9
    9118:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    911a:	4605      	mov	r5, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    911c:	f88d 801c 	strb.w	r8, [sp, #28]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    9120:	f00b f893 	bl	1424a <bt_gatt_foreach_attr>
		if (data.err) {
    9124:	f89d 301c 	ldrb.w	r3, [sp, #28]
    9128:	2b00      	cmp	r3, #0
    912a:	d0e4      	beq.n	90f6 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    912c:	9805      	ldr	r0, [sp, #20]
    912e:	f004 f915 	bl	d35c <net_buf_unref>
	if (!req) {
    9132:	462a      	mov	r2, r5
    9134:	210e      	movs	r1, #14
    9136:	4630      	mov	r0, r6
    9138:	f89d 301c 	ldrb.w	r3, [sp, #28]
    913c:	f7ff fd80 	bl	8c40 <send_err_rsp.part.0>
			return 0;
    9140:	2000      	movs	r0, #0
}
    9142:	b009      	add	sp, #36	; 0x24
    9144:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    9148:	200e      	movs	r0, #14
    914a:	e7fa      	b.n	9142 <att_read_mult_req+0x7e>
    914c:	00014501 	.word	0x00014501
    9150:	00014587 	.word	0x00014587

00009154 <att_read_rsp>:
{
    9154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    9158:	6806      	ldr	r6, [r0, #0]
{
    915a:	4604      	mov	r4, r0
    915c:	460f      	mov	r7, r1
    915e:	b088      	sub	sp, #32
	if (!bt_gatt_change_aware(conn, true)) {
    9160:	2101      	movs	r1, #1
    9162:	4630      	mov	r0, r6
{
    9164:	4690      	mov	r8, r2
    9166:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
    9168:	f00b fe1e 	bl	14da8 <bt_gatt_change_aware>
    916c:	b3a0      	cbz	r0, 91d8 <att_read_rsp+0x84>
	if (!handle) {
    916e:	b3ad      	cbz	r5, 91dc <att_read_rsp+0x88>
	(void)memset(&data, 0, sizeof(data));
    9170:	2214      	movs	r2, #20
    9172:	2100      	movs	r1, #0
    9174:	a803      	add	r0, sp, #12
    9176:	f00a fa26 	bl	135c6 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    917a:	2200      	movs	r2, #0
    917c:	4641      	mov	r1, r8
    917e:	4630      	mov	r0, r6
    9180:	f7ff fcd6 	bl	8b30 <bt_att_create_pdu>
    9184:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
    9186:	b358      	cbz	r0, 91e0 <att_read_rsp+0x8c>
	data.offset = offset;
    9188:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    918c:	4629      	mov	r1, r5
	data.offset = offset;
    918e:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    9192:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    9194:	4628      	mov	r0, r5
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    9196:	f88d 301c 	strb.w	r3, [sp, #28]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    919a:	4a12      	ldr	r2, [pc, #72]	; (91e4 <att_read_rsp+0x90>)
    919c:	ab03      	add	r3, sp, #12
	data.att = att;
    919e:	9403      	str	r4, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    91a0:	f00b f853 	bl	1424a <bt_gatt_foreach_attr>
	if (data.err) {
    91a4:	f89d 401c 	ldrb.w	r4, [sp, #28]
    91a8:	b174      	cbz	r4, 91c8 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    91aa:	9805      	ldr	r0, [sp, #20]
    91ac:	f004 f8d6 	bl	d35c <net_buf_unref>
	if (!req) {
    91b0:	462a      	mov	r2, r5
    91b2:	4639      	mov	r1, r7
    91b4:	4630      	mov	r0, r6
    91b6:	f89d 301c 	ldrb.w	r3, [sp, #28]
    91ba:	f7ff fd41 	bl	8c40 <send_err_rsp.part.0>
		return 0;
    91be:	2400      	movs	r4, #0
}
    91c0:	4620      	mov	r0, r4
    91c2:	b008      	add	sp, #32
    91c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    91c8:	2104      	movs	r1, #4
    91ca:	4630      	mov	r0, r6
    91cc:	4b06      	ldr	r3, [pc, #24]	; (91e8 <att_read_rsp+0x94>)
    91ce:	9a05      	ldr	r2, [sp, #20]
    91d0:	9400      	str	r4, [sp, #0]
    91d2:	f00a fee4 	bl	13f9e <bt_l2cap_send_cb>
	return 0;
    91d6:	e7f3      	b.n	91c0 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    91d8:	2412      	movs	r4, #18
    91da:	e7f1      	b.n	91c0 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    91dc:	2401      	movs	r4, #1
    91de:	e7ef      	b.n	91c0 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    91e0:	240e      	movs	r4, #14
    91e2:	e7ed      	b.n	91c0 <att_read_rsp+0x6c>
    91e4:	00014587 	.word	0x00014587
    91e8:	00014501 	.word	0x00014501

000091ec <att_read_type_req>:
{
    91ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u8_t uuid_len = buf->len - sizeof(*req);
    91f0:	7b0c      	ldrb	r4, [r1, #12]
{
    91f2:	4606      	mov	r6, r0
	u8_t uuid_len = buf->len - sizeof(*req);
    91f4:	3c04      	subs	r4, #4
    91f6:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    91f8:	2c02      	cmp	r4, #2
{
    91fa:	4608      	mov	r0, r1
    91fc:	b08f      	sub	sp, #60	; 0x3c
	if (uuid_len != 2 && uuid_len != 16) {
    91fe:	d001      	beq.n	9204 <att_read_type_req+0x18>
    9200:	2c10      	cmp	r4, #16
    9202:	d152      	bne.n	92aa <att_read_type_req+0xbe>
	req = net_buf_pull_mem(buf, sizeof(*req));
    9204:	2104      	movs	r1, #4
    9206:	3008      	adds	r0, #8
	struct bt_conn *conn = att->chan.chan.conn;
    9208:	f8d6 9000 	ldr.w	r9, [r6]
	req = net_buf_pull_mem(buf, sizeof(*req));
    920c:	f004 f9f6 	bl	d5fc <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    9210:	f10d 080c 	add.w	r8, sp, #12
	start_handle = sys_le16_to_cpu(req->start_handle);
    9214:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    9216:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    9218:	1d01      	adds	r1, r0, #4
    921a:	4622      	mov	r2, r4
    921c:	4640      	mov	r0, r8
    921e:	f00a fa6c 	bl	136fa <bt_uuid_create>
    9222:	b188      	cbz	r0, 9248 <att_read_type_req+0x5c>
	if (!start || !end) {
    9224:	b19d      	cbz	r5, 924e <att_read_type_req+0x62>
    9226:	b18f      	cbz	r7, 924c <att_read_type_req+0x60>
	if (start > end) {
    9228:	42bd      	cmp	r5, r7
    922a:	d810      	bhi.n	924e <att_read_type_req+0x62>
	struct bt_conn *conn = att->chan.chan.conn;
    922c:	f8d6 9000 	ldr.w	r9, [r6]
	(void)memset(&data, 0, sizeof(data));
    9230:	2218      	movs	r2, #24
    9232:	2100      	movs	r1, #0
    9234:	a808      	add	r0, sp, #32
    9236:	f00a f9c6 	bl	135c6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    923a:	2201      	movs	r2, #1
    923c:	2109      	movs	r1, #9
    923e:	4648      	mov	r0, r9
    9240:	f7ff fc76 	bl	8b30 <bt_att_create_pdu>
    9244:	900a      	str	r0, [sp, #40]	; 0x28
	if (!data.buf) {
    9246:	b968      	cbnz	r0, 9264 <att_read_type_req+0x78>
		return BT_ATT_ERR_UNLIKELY;
    9248:	240e      	movs	r4, #14
    924a:	e007      	b.n	925c <att_read_type_req+0x70>
			*err = 0U;
    924c:	463d      	mov	r5, r7
	if (!req) {
    924e:	2301      	movs	r3, #1
    9250:	462a      	mov	r2, r5
    9252:	2108      	movs	r1, #8
    9254:	4648      	mov	r0, r9
    9256:	f7ff fcf3 	bl	8c40 <send_err_rsp.part.0>
		return 0;
    925a:	2400      	movs	r4, #0
}
    925c:	4620      	mov	r0, r4
    925e:	b00f      	add	sp, #60	; 0x3c
    9260:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    9264:	2101      	movs	r1, #1
    9266:	3008      	adds	r0, #8
	data.uuid = uuid;
    9268:	e9cd 6808 	strd	r6, r8, [sp, #32]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    926c:	f004 f9e8 	bl	d640 <net_buf_simple_add>
	data.rsp->len = 0U;
    9270:	2600      	movs	r6, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    9272:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    9274:	900b      	str	r0, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    9276:	4639      	mov	r1, r7
	data.rsp->len = 0U;
    9278:	7006      	strb	r6, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    927a:	4a0d      	ldr	r2, [pc, #52]	; (92b0 <att_read_type_req+0xc4>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    927c:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    9280:	4628      	mov	r0, r5
    9282:	ab08      	add	r3, sp, #32
    9284:	f00a ffe1 	bl	1424a <bt_gatt_foreach_attr>
	if (data.err) {
    9288:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
    928c:	b12c      	cbz	r4, 929a <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    928e:	980a      	ldr	r0, [sp, #40]	; 0x28
    9290:	f004 f864 	bl	d35c <net_buf_unref>
	if (!req) {
    9294:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    9298:	e7da      	b.n	9250 <att_read_type_req+0x64>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    929a:	2104      	movs	r1, #4
    929c:	4648      	mov	r0, r9
    929e:	4b05      	ldr	r3, [pc, #20]	; (92b4 <att_read_type_req+0xc8>)
    92a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    92a2:	9400      	str	r4, [sp, #0]
    92a4:	f00a fe7b 	bl	13f9e <bt_l2cap_send_cb>
	return 0;
    92a8:	e7d8      	b.n	925c <att_read_type_req+0x70>
		return BT_ATT_ERR_INVALID_PDU;
    92aa:	2404      	movs	r4, #4
    92ac:	e7d6      	b.n	925c <att_read_type_req+0x70>
    92ae:	bf00      	nop
    92b0:	000143c7 	.word	0x000143c7
    92b4:	00014501 	.word	0x00014501

000092b8 <att_find_type_req>:
{
    92b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    92bc:	4688      	mov	r8, r1
	struct bt_conn *conn = att->chan.chan.conn;
    92be:	f8d0 9000 	ldr.w	r9, [r0]
{
    92c2:	4607      	mov	r7, r0
	req = net_buf_pull_mem(buf, sizeof(*req));
    92c4:	2106      	movs	r1, #6
{
    92c6:	b089      	sub	sp, #36	; 0x24
	req = net_buf_pull_mem(buf, sizeof(*req));
    92c8:	f108 0008 	add.w	r0, r8, #8
    92cc:	f004 f996 	bl	d5fc <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    92d0:	8806      	ldrh	r6, [r0, #0]
	if (!start || !end) {
    92d2:	b316      	cbz	r6, 931a <att_find_type_req+0x62>
	end_handle = sys_le16_to_cpu(req->end_handle);
    92d4:	f8b0 a002 	ldrh.w	sl, [r0, #2]
	if (!start || !end) {
    92d8:	f1ba 0f00 	cmp.w	sl, #0
    92dc:	d01c      	beq.n	9318 <att_find_type_req+0x60>
	if (start > end) {
    92de:	45b2      	cmp	sl, r6
    92e0:	d31b      	bcc.n	931a <att_find_type_req+0x62>
	type = sys_le16_to_cpu(req->type);
    92e2:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    92e4:	2400      	movs	r4, #0
    92e6:	f8ad 300a 	strh.w	r3, [sp, #10]
    92ea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    92ee:	a903      	add	r1, sp, #12
    92f0:	a802      	add	r0, sp, #8
	value = buf->data;
    92f2:	f8d8 b008 	ldr.w	fp, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    92f6:	f88d 4008 	strb.w	r4, [sp, #8]
    92fa:	f88d 400c 	strb.w	r4, [sp, #12]
    92fe:	f8ad 300e 	strh.w	r3, [sp, #14]
    9302:	f00a f9d0 	bl	136a6 <bt_uuid_cmp>
    9306:	4605      	mov	r5, r0
    9308:	b190      	cbz	r0, 9330 <att_find_type_req+0x78>
	if (!req) {
    930a:	230a      	movs	r3, #10
    930c:	4632      	mov	r2, r6
    930e:	2106      	movs	r1, #6
    9310:	4648      	mov	r0, r9
    9312:	f7ff fc95 	bl	8c40 <send_err_rsp.part.0>
		return 0;
    9316:	e007      	b.n	9328 <att_find_type_req+0x70>
			*err = 0U;
    9318:	4656      	mov	r6, sl
	if (!req) {
    931a:	2301      	movs	r3, #1
    931c:	4632      	mov	r2, r6
    931e:	2106      	movs	r1, #6
    9320:	4648      	mov	r0, r9
    9322:	f7ff fc8d 	bl	8c40 <send_err_rsp.part.0>
		return 0;
    9326:	2400      	movs	r4, #0
}
    9328:	4620      	mov	r0, r4
    932a:	b009      	add	sp, #36	; 0x24
    932c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return att_find_type_rsp(att, start_handle, end_handle, value,
    9330:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = att->chan.chan.conn;
    9334:	f8d7 8000 	ldr.w	r8, [r7]
	(void)memset(&data, 0, sizeof(data));
    9338:	4601      	mov	r1, r0
    933a:	2214      	movs	r2, #20
    933c:	a803      	add	r0, sp, #12
    933e:	f00a f942 	bl	135c6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    9342:	462a      	mov	r2, r5
    9344:	2107      	movs	r1, #7
    9346:	4640      	mov	r0, r8
    9348:	f7ff fbf2 	bl	8b30 <bt_att_create_pdu>
    934c:	9004      	str	r0, [sp, #16]
	if (!data.buf) {
    934e:	b308      	cbz	r0, 9394 <att_find_type_req+0xdc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    9350:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    9352:	4651      	mov	r1, sl
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    9354:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    9358:	4630      	mov	r0, r6
    935a:	4a0f      	ldr	r2, [pc, #60]	; (9398 <att_find_type_req+0xe0>)
    935c:	ab03      	add	r3, sp, #12
	data.value_len = value_len;
    935e:	f88d 401c 	strb.w	r4, [sp, #28]
	data.value = value;
    9362:	e9cd 5b05 	strd	r5, fp, [sp, #20]
	data.att = att;
    9366:	9703      	str	r7, [sp, #12]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    9368:	f00a ff6f 	bl	1424a <bt_gatt_foreach_attr>
	if (data.err) {
    936c:	f89d 401d 	ldrb.w	r4, [sp, #29]
    9370:	b144      	cbz	r4, 9384 <att_find_type_req+0xcc>
		net_buf_unref(data.buf);
    9372:	9804      	ldr	r0, [sp, #16]
    9374:	f003 fff2 	bl	d35c <net_buf_unref>
	if (!req) {
    9378:	4632      	mov	r2, r6
    937a:	2106      	movs	r1, #6
    937c:	4640      	mov	r0, r8
    937e:	f89d 301d 	ldrb.w	r3, [sp, #29]
    9382:	e7ce      	b.n	9322 <att_find_type_req+0x6a>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    9384:	2104      	movs	r1, #4
    9386:	4640      	mov	r0, r8
    9388:	4b04      	ldr	r3, [pc, #16]	; (939c <att_find_type_req+0xe4>)
    938a:	9a04      	ldr	r2, [sp, #16]
    938c:	9400      	str	r4, [sp, #0]
    938e:	f00a fe06 	bl	13f9e <bt_l2cap_send_cb>
	return 0;
    9392:	e7c9      	b.n	9328 <att_find_type_req+0x70>
		return BT_ATT_ERR_UNLIKELY;
    9394:	240e      	movs	r4, #14
	return att_find_type_rsp(att, start_handle, end_handle, value,
    9396:	e7c7      	b.n	9328 <att_find_type_req+0x70>
    9398:	00008749 	.word	0x00008749
    939c:	00014501 	.word	0x00014501

000093a0 <att_find_info_req>:
{
    93a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    93a2:	688b      	ldr	r3, [r1, #8]
{
    93a4:	4607      	mov	r7, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
    93a6:	881d      	ldrh	r5, [r3, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    93a8:	6806      	ldr	r6, [r0, #0]
{
    93aa:	b087      	sub	sp, #28
	if (!start || !end) {
    93ac:	b195      	cbz	r5, 93d4 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    93ae:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    93b0:	b17c      	cbz	r4, 93d2 <att_find_info_req+0x32>
	if (start > end) {
    93b2:	42ac      	cmp	r4, r5
    93b4:	d30e      	bcc.n	93d4 <att_find_info_req+0x34>
	(void)memset(&data, 0, sizeof(data));
    93b6:	2210      	movs	r2, #16
    93b8:	2100      	movs	r1, #0
    93ba:	a802      	add	r0, sp, #8
    93bc:	f00a f903 	bl	135c6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    93c0:	2200      	movs	r2, #0
    93c2:	2105      	movs	r1, #5
    93c4:	4630      	mov	r0, r6
    93c6:	f7ff fbb3 	bl	8b30 <bt_att_create_pdu>
    93ca:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    93cc:	b958      	cbnz	r0, 93e6 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    93ce:	200e      	movs	r0, #14
	return att_find_info_rsp(att, start_handle, end_handle);
    93d0:	e007      	b.n	93e2 <att_find_info_req+0x42>
			*err = 0U;
    93d2:	4625      	mov	r5, r4
	if (!req) {
    93d4:	2301      	movs	r3, #1
    93d6:	462a      	mov	r2, r5
    93d8:	2104      	movs	r1, #4
    93da:	4630      	mov	r0, r6
    93dc:	f7ff fc30 	bl	8c40 <send_err_rsp.part.0>
		return 0;
    93e0:	2000      	movs	r0, #0
}
    93e2:	b007      	add	sp, #28
    93e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    93e6:	4621      	mov	r1, r4
    93e8:	4628      	mov	r0, r5
    93ea:	4a0a      	ldr	r2, [pc, #40]	; (9414 <att_find_info_req+0x74>)
    93ec:	ab02      	add	r3, sp, #8
	data.att = att;
    93ee:	9702      	str	r7, [sp, #8]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    93f0:	f00a ff2b 	bl	1424a <bt_gatt_foreach_attr>
	if (!data.rsp) {
    93f4:	9c04      	ldr	r4, [sp, #16]
    93f6:	b924      	cbnz	r4, 9402 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    93f8:	9803      	ldr	r0, [sp, #12]
    93fa:	f003 ffaf 	bl	d35c <net_buf_unref>
	if (!req) {
    93fe:	230a      	movs	r3, #10
    9400:	e7e9      	b.n	93d6 <att_find_info_req+0x36>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent,
    9402:	2400      	movs	r4, #0
    9404:	2104      	movs	r1, #4
    9406:	4630      	mov	r0, r6
    9408:	4b03      	ldr	r3, [pc, #12]	; (9418 <att_find_info_req+0x78>)
    940a:	9a03      	ldr	r2, [sp, #12]
    940c:	9400      	str	r4, [sp, #0]
    940e:	f00a fdc6 	bl	13f9e <bt_l2cap_send_cb>
	return 0;
    9412:	e7e5      	b.n	93e0 <att_find_info_req+0x40>
    9414:	00014261 	.word	0x00014261
    9418:	00014501 	.word	0x00014501

0000941c <bt_att_req_alloc>:
	/* tx and rx MTU shall be symmetric */
	return att->chan.tx.mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    941c:	b513      	push	{r0, r1, r4, lr}
	struct bt_att_req *req = NULL;
    941e:	2400      	movs	r4, #0
{
    9420:	4602      	mov	r2, r0
    9422:	460b      	mov	r3, r1

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    9424:	4807      	ldr	r0, [pc, #28]	; (9444 <bt_att_req_alloc+0x28>)
    9426:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
    9428:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    942a:	f005 fdcf 	bl	efcc <k_mem_slab_alloc>
    942e:	4601      	mov	r1, r0
    9430:	b930      	cbnz	r0, 9440 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
    9432:	221c      	movs	r2, #28
    9434:	9801      	ldr	r0, [sp, #4]
    9436:	f00a f8c6 	bl	135c6 <memset>

	return req;
    943a:	9801      	ldr	r0, [sp, #4]
}
    943c:	b002      	add	sp, #8
    943e:	bd10      	pop	{r4, pc}
		return NULL;
    9440:	4620      	mov	r0, r4
    9442:	e7fb      	b.n	943c <bt_att_req_alloc+0x20>
    9444:	200003dc 	.word	0x200003dc

00009448 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    9448:	b507      	push	{r0, r1, r2, lr}
    944a:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
    944c:	a901      	add	r1, sp, #4
    944e:	4803      	ldr	r0, [pc, #12]	; (945c <bt_att_req_free+0x14>)
    9450:	f005 fe28 	bl	f0a4 <k_mem_slab_free>
}
    9454:	b003      	add	sp, #12
    9456:	f85d fb04 	ldr.w	pc, [sp], #4
    945a:	bf00      	nop
    945c:	200003dc 	.word	0x200003dc

00009460 <att_handle_rsp>:
{
    9460:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    9464:	4604      	mov	r4, r0
	k_delayed_work_cancel(&att->timeout_work);
    9466:	30c0      	adds	r0, #192	; 0xc0
{
    9468:	460e      	mov	r6, r1
    946a:	4617      	mov	r7, r2
    946c:	4698      	mov	r8, r3
	k_delayed_work_cancel(&att->timeout_work);
    946e:	f007 fdd5 	bl	1101c <k_delayed_work_cancel>
	if (!att->req) {
    9472:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
    9476:	f04f 0a00 	mov.w	sl, #0
    947a:	b9f5      	cbnz	r5, 94ba <att_handle_rsp+0x5a>
		BT_WARN("No pending ATT request");
    947c:	2157      	movs	r1, #87	; 0x57
    947e:	481d      	ldr	r0, [pc, #116]	; (94f4 <att_handle_rsp+0x94>)
    9480:	f008 fd62 	bl	11f48 <printk>
Z_GENLIST_IS_EMPTY(slist)
    9484:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
Z_GENLIST_GET(slist, snode)
    9488:	b159      	cbz	r1, 94a2 <att_handle_rsp+0x42>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    948a:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
    948e:	680b      	ldr	r3, [r1, #0]
    9490:	4291      	cmp	r1, r2
	list->head = node;
    9492:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    9496:	d101      	bne.n	949c <att_handle_rsp+0x3c>
	list->tail = node;
    9498:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
	att_send_req(att, ATT_REQ(node));
    949c:	4620      	mov	r0, r4
    949e:	f7ff fa61 	bl	8964 <att_send_req>
	if (func) {
    94a2:	b135      	cbz	r5, 94b2 <att_handle_rsp+0x52>
		func(att->chan.chan.conn, err, pdu, len, params);
    94a4:	463b      	mov	r3, r7
    94a6:	4632      	mov	r2, r6
    94a8:	4641      	mov	r1, r8
    94aa:	6820      	ldr	r0, [r4, #0]
    94ac:	f8cd 9000 	str.w	r9, [sp]
    94b0:	47a8      	blx	r5
}
    94b2:	2000      	movs	r0, #0
    94b4:	b002      	add	sp, #8
    94b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (att->req == &cancel) {
    94ba:	4b0f      	ldr	r3, [pc, #60]	; (94f8 <att_handle_rsp+0x98>)
    94bc:	429d      	cmp	r5, r3
    94be:	d103      	bne.n	94c8 <att_handle_rsp+0x68>
	bt_att_func_t func = NULL;
    94c0:	4655      	mov	r5, sl
		att->req = NULL;
    94c2:	f8c4 a0b4 	str.w	sl, [r4, #180]	; 0xb4
		goto process;
    94c6:	e7dd      	b.n	9484 <att_handle_rsp+0x24>
	if (att->req->buf) {
    94c8:	6928      	ldr	r0, [r5, #16]
    94ca:	b128      	cbz	r0, 94d8 <att_handle_rsp+0x78>
		net_buf_unref(att->req->buf);
    94cc:	f003 ff46 	bl	d35c <net_buf_unref>
		att->req->buf = NULL;
    94d0:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    94d4:	f8c3 a010 	str.w	sl, [r3, #16]
	att->req->func = NULL;
    94d8:	f04f 0a00 	mov.w	sl, #0
	func = att->req->func;
    94dc:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    94e0:	6845      	ldr	r5, [r0, #4]
	att->req->func = NULL;
    94e2:	f8c0 a004 	str.w	sl, [r0, #4]
	params = att->req->user_data;
    94e6:	f8d0 9018 	ldr.w	r9, [r0, #24]
	att_req_destroy(att->req);
    94ea:	f00b f8d3 	bl	14694 <att_req_destroy>
	att->req = NULL;
    94ee:	f8c4 a0b4 	str.w	sl, [r4, #180]	; 0xb4
    94f2:	e7c7      	b.n	9484 <att_handle_rsp+0x24>
    94f4:	0001a4f3 	.word	0x0001a4f3
    94f8:	20000f2c 	.word	0x20000f2c

000094fc <att_error_rsp>:
	if (!att->req || att->req == &cancel) {
    94fc:	f8d0 20b4 	ldr.w	r2, [r0, #180]	; 0xb4
{
    9500:	b570      	push	{r4, r5, r6, lr}
    9502:	4604      	mov	r4, r0
	if (!att->req || att->req == &cancel) {
    9504:	b352      	cbz	r2, 955c <att_error_rsp+0x60>
    9506:	4b1a      	ldr	r3, [pc, #104]	; (9570 <att_error_rsp+0x74>)
    9508:	429a      	cmp	r2, r3
    950a:	d027      	beq.n	955c <att_error_rsp+0x60>
	if (att->req->buf) {
    950c:	6913      	ldr	r3, [r2, #16]
	rsp = (void *)buf->data;
    950e:	6888      	ldr	r0, [r1, #8]
	if (att->req->buf) {
    9510:	b12b      	cbz	r3, 951e <att_error_rsp+0x22>
	buf->data = buf->__buf + state->offset;
    9512:	8995      	ldrh	r5, [r2, #12]
    9514:	6919      	ldr	r1, [r3, #16]
    9516:	4429      	add	r1, r5
    9518:	6099      	str	r1, [r3, #8]
	buf->len = state->len;
    951a:	89d1      	ldrh	r1, [r2, #14]
    951c:	8199      	strh	r1, [r3, #12]
	if (att->req->retrying) {
    951e:	7d13      	ldrb	r3, [r2, #20]
	err = rsp->error;
    9520:	78c5      	ldrb	r5, [r0, #3]
	if (att->req->retrying) {
    9522:	b9e3      	cbnz	r3, 955e <att_error_rsp+0x62>
	switch (err) {
    9524:	2d05      	cmp	r5, #5
	if (!att_change_security(att->chan.chan.conn, err)) {
    9526:	6820      	ldr	r0, [r4, #0]
	switch (err) {
    9528:	d006      	beq.n	9538 <att_error_rsp+0x3c>
    952a:	2d0f      	cmp	r5, #15
    952c:	d117      	bne.n	955e <att_error_rsp+0x62>
		if (conn->sec_level >= BT_SECURITY_L2)
    952e:	7a43      	ldrb	r3, [r0, #9]
    9530:	2b01      	cmp	r3, #1
    9532:	d814      	bhi.n	955e <att_error_rsp+0x62>
		sec = BT_SECURITY_L2;
    9534:	2102      	movs	r1, #2
    9536:	e007      	b.n	9548 <att_error_rsp+0x4c>
		if (conn->sec_level < BT_SECURITY_L2) {
    9538:	7a43      	ldrb	r3, [r0, #9]
    953a:	2b01      	cmp	r3, #1
    953c:	d9fa      	bls.n	9534 <att_error_rsp+0x38>
		} else if (conn->sec_level < BT_SECURITY_L3) {
    953e:	2b02      	cmp	r3, #2
    9540:	d00a      	beq.n	9558 <att_error_rsp+0x5c>
		} else if (conn->sec_level < BT_SECURITY_L4) {
    9542:	2b03      	cmp	r3, #3
    9544:	d10b      	bne.n	955e <att_error_rsp+0x62>
			sec = BT_SECURITY_L4;
    9546:	2104      	movs	r1, #4
	return bt_conn_set_security(conn, sec);
    9548:	f00a fb6d 	bl	13c26 <bt_conn_set_security>
	if (!att_change_security(att->chan.chan.conn, err)) {
    954c:	b938      	cbnz	r0, 955e <att_error_rsp+0x62>
		att->req->retrying = true;
    954e:	2201      	movs	r2, #1
    9550:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    9554:	751a      	strb	r2, [r3, #20]
}
    9556:	bd70      	pop	{r4, r5, r6, pc}
			sec = BT_SECURITY_L3;
    9558:	2103      	movs	r1, #3
    955a:	e7f5      	b.n	9548 <att_error_rsp+0x4c>
		err = BT_ATT_ERR_UNLIKELY;
    955c:	250e      	movs	r5, #14
	return att_handle_rsp(att, NULL, 0, err);
    955e:	2200      	movs	r2, #0
    9560:	462b      	mov	r3, r5
    9562:	4620      	mov	r0, r4
}
    9564:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(att, NULL, 0, err);
    9568:	4611      	mov	r1, r2
    956a:	f7ff bf79 	b.w	9460 <att_handle_rsp>
    956e:	bf00      	nop
    9570:	20000f2c 	.word	0x20000f2c

00009574 <bt_att_encrypt_change>:
{
    9574:	b573      	push	{r0, r1, r4, r5, r6, lr}
    9576:	4604      	mov	r4, r0
	if (hci_status) {
    9578:	b151      	cbz	r1, 9590 <bt_att_encrypt_change+0x1c>
		if (att->req) {
    957a:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
    957e:	b38b      	cbz	r3, 95e4 <bt_att_encrypt_change+0x70>
			att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    9580:	2200      	movs	r2, #0
    9582:	2305      	movs	r3, #5
    9584:	4611      	mov	r1, r2
}
    9586:	b002      	add	sp, #8
    9588:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    958c:	f7ff bf68 	b.w	9460 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
    9590:	6805      	ldr	r5, [r0, #0]
	bt_gatt_encrypt_change(conn);
    9592:	4628      	mov	r0, r5
    9594:	f002 f814 	bl	b5c0 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
    9598:	7a6b      	ldrb	r3, [r5, #9]
    959a:	2b01      	cmp	r3, #1
    959c:	d022      	beq.n	95e4 <bt_att_encrypt_change+0x70>
	if (!att->req || !att->req->retrying) {
    959e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    95a2:	b1fb      	cbz	r3, 95e4 <bt_att_encrypt_change+0x70>
    95a4:	7d1b      	ldrb	r3, [r3, #20]
    95a6:	b1eb      	cbz	r3, 95e4 <bt_att_encrypt_change+0x70>
	k_sem_take(&att->tx_sem, K_FOREVER);
    95a8:	f104 06e0 	add.w	r6, r4, #224	; 0xe0
    95ac:	f04f 33ff 	mov.w	r3, #4294967295
    95b0:	f04f 32ff 	mov.w	r2, #4294967295
    95b4:	4630      	mov	r0, r6
    95b6:	f007 fa87 	bl	10ac8 <z_impl_k_sem_take>
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    95ba:	6823      	ldr	r3, [r4, #0]
    95bc:	7b5b      	ldrb	r3, [r3, #13]
    95be:	2b07      	cmp	r3, #7
    95c0:	d012      	beq.n	95e8 <bt_att_encrypt_change+0x74>
	(void)bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, att->req->buf,
    95c2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    95c6:	2600      	movs	r6, #0
    95c8:	6919      	ldr	r1, [r3, #16]
    95ca:	6888      	ldr	r0, [r1, #8]
    95cc:	f7ff f92c 	bl	8828 <att_cb.isra.0>
    95d0:	9600      	str	r6, [sp, #0]
    95d2:	4603      	mov	r3, r0
    95d4:	460a      	mov	r2, r1
    95d6:	4628      	mov	r0, r5
    95d8:	2104      	movs	r1, #4
    95da:	f00a fce0 	bl	13f9e <bt_l2cap_send_cb>
	att->req->buf = NULL;
    95de:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    95e2:	611e      	str	r6, [r3, #16]
}
    95e4:	b002      	add	sp, #8
    95e6:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    95e8:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
    95ec:	e8d3 3faf 	lda	r3, [r3]
	if (!att_is_connected(att)) {
    95f0:	075b      	lsls	r3, r3, #29
    95f2:	d5e6      	bpl.n	95c2 <bt_att_encrypt_change+0x4e>
		BT_WARN("Disconnected");
    95f4:	2157      	movs	r1, #87	; 0x57
    95f6:	4804      	ldr	r0, [pc, #16]	; (9608 <bt_att_encrypt_change+0x94>)
    95f8:	f008 fca6 	bl	11f48 <printk>
	z_impl_k_sem_give(sem);
    95fc:	4630      	mov	r0, r6
}
    95fe:	b002      	add	sp, #8
    9600:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9604:	f007 ba1c 	b.w	10a40 <z_impl_k_sem_give>
    9608:	0001a50f 	.word	0x0001a50f

0000960c <att_timeout>:
{
    960c:	b510      	push	{r4, lr}
    960e:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    9610:	2145      	movs	r1, #69	; 0x45
    9612:	4807      	ldr	r0, [pc, #28]	; (9630 <att_timeout+0x24>)
    9614:	f008 fc98 	bl	11f48 <printk>
	att_reset(att);
    9618:	f1a4 00c0 	sub.w	r0, r4, #192	; 0xc0
    961c:	f00b f87a 	bl	14714 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    9620:	f854 0cc0 	ldr.w	r0, [r4, #-192]
    9624:	f002 f83e 	bl	b6a4 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    9628:	2300      	movs	r3, #0
    962a:	f844 3cc0 	str.w	r3, [r4, #-192]
}
    962e:	bd10      	pop	{r4, pc}
    9630:	0001a521 	.word	0x0001a521

00009634 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
    9634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9638:	460c      	mov	r4, r1
    963a:	4616      	mov	r6, r2
    963c:	4698      	mov	r8, r3
	struct bt_att *att;
	int err;

	__ASSERT_NO_MSG(conn);
    963e:	4607      	mov	r7, r0
    9640:	b958      	cbnz	r0, 965a <bt_att_send+0x26>
    9642:	4922      	ldr	r1, [pc, #136]	; (96cc <bt_att_send+0x98>)
    9644:	4822      	ldr	r0, [pc, #136]	; (96d0 <bt_att_send+0x9c>)
    9646:	f640 03fc 	movw	r3, #2300	; 0x8fc
    964a:	4a22      	ldr	r2, [pc, #136]	; (96d4 <bt_att_send+0xa0>)
    964c:	f008 fc7c 	bl	11f48 <printk>
    9650:	f640 01fc 	movw	r1, #2300	; 0x8fc
    9654:	481f      	ldr	r0, [pc, #124]	; (96d4 <bt_att_send+0xa0>)
    9656:	f008 ff0d 	bl	12474 <assert_post_action>
	__ASSERT_NO_MSG(buf);
    965a:	b95c      	cbnz	r4, 9674 <bt_att_send+0x40>
    965c:	491e      	ldr	r1, [pc, #120]	; (96d8 <bt_att_send+0xa4>)
    965e:	481c      	ldr	r0, [pc, #112]	; (96d0 <bt_att_send+0x9c>)
    9660:	f640 03fd 	movw	r3, #2301	; 0x8fd
    9664:	4a1b      	ldr	r2, [pc, #108]	; (96d4 <bt_att_send+0xa0>)
    9666:	f008 fc6f 	bl	11f48 <printk>
    966a:	f640 01fd 	movw	r1, #2301	; 0x8fd
    966e:	4819      	ldr	r0, [pc, #100]	; (96d4 <bt_att_send+0xa0>)
    9670:	f008 ff00 	bl	12474 <assert_post_action>

	att = att_chan_get(conn);
    9674:	4638      	mov	r0, r7
    9676:	f7ff f9f9 	bl	8a6c <att_chan_get>
	if (!att) {
    967a:	4605      	mov	r5, r0
    967c:	b938      	cbnz	r0, 968e <bt_att_send+0x5a>
		net_buf_unref(buf);
    967e:	4620      	mov	r0, r4
    9680:	f003 fe6c 	bl	d35c <net_buf_unref>
		return -ENOTCONN;
    9684:	f06f 0438 	mvn.w	r4, #56	; 0x38
		}
		return err;
	}

	return 0;
}
    9688:	4620      	mov	r0, r4
    968a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!cb) {
    968e:	b96e      	cbnz	r6, 96ac <bt_att_send+0x78>
	return z_impl_k_sem_take(sem, timeout);
    9690:	2200      	movs	r2, #0
    9692:	2300      	movs	r3, #0
    9694:	30e0      	adds	r0, #224	; 0xe0
    9696:	f007 fa17 	bl	10ac8 <z_impl_k_sem_take>
		if (k_sem_take(&att->tx_sem, K_NO_WAIT) < 0) {
    969a:	2800      	cmp	r0, #0
    969c:	da06      	bge.n	96ac <bt_att_send+0x78>
			k_fifo_put(&att->tx_queue, buf);
    969e:	4621      	mov	r1, r4
    96a0:	f105 00f8 	add.w	r0, r5, #248	; 0xf8
    96a4:	f00c ff9f 	bl	165e6 <k_queue_append>
			return 0;
    96a8:	4634      	mov	r4, r6
    96aa:	e7ed      	b.n	9688 <bt_att_send+0x54>
	err = att_send(conn, buf, cb, user_data);
    96ac:	4621      	mov	r1, r4
    96ae:	4643      	mov	r3, r8
    96b0:	4632      	mov	r2, r6
    96b2:	4638      	mov	r0, r7
    96b4:	f7ff f8ca 	bl	884c <att_send>
	if (err) {
    96b8:	4604      	mov	r4, r0
    96ba:	2800      	cmp	r0, #0
    96bc:	d0e4      	beq.n	9688 <bt_att_send+0x54>
		if (!cb) {
    96be:	2e00      	cmp	r6, #0
    96c0:	d1e2      	bne.n	9688 <bt_att_send+0x54>
	z_impl_k_sem_give(sem);
    96c2:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
    96c6:	f007 f9bb 	bl	10a40 <z_impl_k_sem_give>
}
    96ca:	e7dd      	b.n	9688 <bt_att_send+0x54>
    96cc:	00019e2d 	.word	0x00019e2d
    96d0:	00017b50 	.word	0x00017b50
    96d4:	0001a33c 	.word	0x0001a33c
    96d8:	0001afce 	.word	0x0001afce

000096dc <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
    96dc:	b538      	push	{r3, r4, r5, lr}
    96de:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
    96e0:	4605      	mov	r5, r0
    96e2:	b958      	cbnz	r0, 96fc <bt_att_req_send+0x20>
    96e4:	491c      	ldr	r1, [pc, #112]	; (9758 <bt_att_req_send+0x7c>)
    96e6:	481d      	ldr	r0, [pc, #116]	; (975c <bt_att_req_send+0x80>)
    96e8:	f640 131f 	movw	r3, #2335	; 0x91f
    96ec:	4a1c      	ldr	r2, [pc, #112]	; (9760 <bt_att_req_send+0x84>)
    96ee:	f008 fc2b 	bl	11f48 <printk>
    96f2:	f640 111f 	movw	r1, #2335	; 0x91f
    96f6:	481a      	ldr	r0, [pc, #104]	; (9760 <bt_att_req_send+0x84>)
    96f8:	f008 febc 	bl	12474 <assert_post_action>
	__ASSERT_NO_MSG(req);
    96fc:	b95c      	cbnz	r4, 9716 <bt_att_req_send+0x3a>
    96fe:	4919      	ldr	r1, [pc, #100]	; (9764 <bt_att_req_send+0x88>)
    9700:	4816      	ldr	r0, [pc, #88]	; (975c <bt_att_req_send+0x80>)
    9702:	f44f 6312 	mov.w	r3, #2336	; 0x920
    9706:	4a16      	ldr	r2, [pc, #88]	; (9760 <bt_att_req_send+0x84>)
    9708:	f008 fc1e 	bl	11f48 <printk>
    970c:	f44f 6112 	mov.w	r1, #2336	; 0x920
    9710:	4813      	ldr	r0, [pc, #76]	; (9760 <bt_att_req_send+0x84>)
    9712:	f008 feaf 	bl	12474 <assert_post_action>

	att = att_chan_get(conn);
    9716:	4628      	mov	r0, r5
    9718:	f7ff f9a8 	bl	8a6c <att_chan_get>
	if (!att) {
    971c:	4605      	mov	r5, r0
    971e:	b930      	cbnz	r0, 972e <bt_att_req_send+0x52>
		net_buf_unref(req->buf);
    9720:	6920      	ldr	r0, [r4, #16]
    9722:	f003 fe1b 	bl	d35c <net_buf_unref>
		req->buf = NULL;
		return -ENOTCONN;
    9726:	f06f 0038 	mvn.w	r0, #56	; 0x38
		req->buf = NULL;
    972a:	6125      	str	r5, [r4, #16]
		sys_slist_append(&att->reqs, &req->node);
		return 0;
	}

	return att_send_req(att, req);
}
    972c:	bd38      	pop	{r3, r4, r5, pc}
	if (att->req) {
    972e:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
    9732:	b163      	cbz	r3, 974e <bt_att_req_send+0x72>
	parent->next = child;
    9734:	2000      	movs	r0, #0
    9736:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
    9738:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
    973c:	b91b      	cbnz	r3, 9746 <bt_att_req_send+0x6a>
		return 0;
    973e:	4618      	mov	r0, r3
	list->head = node;
    9740:	e9c5 442e 	strd	r4, r4, [r5, #184]	; 0xb8
}
    9744:	e7f2      	b.n	972c <bt_att_req_send+0x50>
	parent->next = child;
    9746:	601c      	str	r4, [r3, #0]
	list->tail = node;
    9748:	f8c5 40bc 	str.w	r4, [r5, #188]	; 0xbc
}
    974c:	e7ee      	b.n	972c <bt_att_req_send+0x50>
	return att_send_req(att, req);
    974e:	4621      	mov	r1, r4
}
    9750:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return att_send_req(att, req);
    9754:	f7ff b906 	b.w	8964 <att_send_req>
    9758:	00019e2d 	.word	0x00019e2d
    975c:	00017b50 	.word	0x00017b50
    9760:	0001a33c 	.word	0x0001a33c
    9764:	0001a3c1 	.word	0x0001a3c1

00009768 <bt_att_req_cancel>:

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
    9768:	b510      	push	{r4, lr}
    976a:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("req %p", req);

	if (!conn || !req) {
    976c:	b370      	cbz	r0, 97cc <bt_att_req_cancel+0x64>
    976e:	b369      	cbz	r1, 97cc <bt_att_req_cancel+0x64>
		return;
	}

	att = att_chan_get(conn);
    9770:	f7ff f97c 	bl	8a6c <att_chan_get>
	if (!att) {
    9774:	b350      	cbz	r0, 97cc <bt_att_req_cancel+0x64>
		return;
	}

	/* Check if request is outstanding */
	if (att->req == req) {
    9776:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
    977a:	429c      	cmp	r4, r3
    977c:	d107      	bne.n	978e <bt_att_req_cancel+0x26>
		att->req = &cancel;
    977e:	4b14      	ldr	r3, [pc, #80]	; (97d0 <bt_att_req_cancel+0x68>)
    9780:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
	} else {
		/* Remove request from the list */
		sys_slist_find_and_remove(&att->reqs, &req->node);
	}

	att_req_destroy(req);
    9784:	4620      	mov	r0, r4
}
    9786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	att_req_destroy(req);
    978a:	f00a bf83 	b.w	14694 <att_req_destroy>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    978e:	2200      	movs	r2, #0
    9790:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
    9794:	2b00      	cmp	r3, #0
    9796:	d0f5      	beq.n	9784 <bt_att_req_cancel+0x1c>
    9798:	429c      	cmp	r4, r3
    979a:	d114      	bne.n	97c6 <bt_att_req_cancel+0x5e>
Z_GENLIST_REMOVE(slist, snode)
    979c:	6823      	ldr	r3, [r4, #0]
    979e:	b952      	cbnz	r2, 97b6 <bt_att_req_cancel+0x4e>
    97a0:	f8d0 20bc 	ldr.w	r2, [r0, #188]	; 0xbc
	list->head = node;
    97a4:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
Z_GENLIST_REMOVE(slist, snode)
    97a8:	4294      	cmp	r4, r2
    97aa:	d101      	bne.n	97b0 <bt_att_req_cancel+0x48>
	list->tail = node;
    97ac:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	parent->next = child;
    97b0:	2300      	movs	r3, #0
    97b2:	6023      	str	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    97b4:	e7e6      	b.n	9784 <bt_att_req_cancel+0x1c>
	parent->next = child;
    97b6:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    97b8:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
    97bc:	429c      	cmp	r4, r3
	list->tail = node;
    97be:	bf08      	it	eq
    97c0:	f8c0 20bc 	streq.w	r2, [r0, #188]	; 0xbc
}
    97c4:	e7f4      	b.n	97b0 <bt_att_req_cancel+0x48>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    97c6:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    97c8:	681b      	ldr	r3, [r3, #0]
    97ca:	e7e3      	b.n	9794 <bt_att_req_cancel+0x2c>
}
    97cc:	bd10      	pop	{r4, pc}
    97ce:	bf00      	nop
    97d0:	20000f2c 	.word	0x20000f2c

000097d4 <db_hash_set>:

static u8_t stored_hash[16];

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
    97d4:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
    97d6:	4618      	mov	r0, r3
{
    97d8:	4614      	mov	r4, r2
	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
    97da:	4907      	ldr	r1, [pc, #28]	; (97f8 <db_hash_set+0x24>)
    97dc:	2210      	movs	r2, #16
    97de:	47a0      	blx	r4
	if (len < 0) {
    97e0:	1e04      	subs	r4, r0, #0
    97e2:	da06      	bge.n	97f2 <db_hash_set+0x1e>
		BT_ERR("Failed to decode value (err %zd)", len);
    97e4:	4622      	mov	r2, r4
    97e6:	2145      	movs	r1, #69	; 0x45
    97e8:	4804      	ldr	r0, [pc, #16]	; (97fc <db_hash_set+0x28>)
    97ea:	f008 fbad 	bl	11f48 <printk>
	}

	BT_HEXDUMP_DBG(stored_hash, sizeof(stored_hash), "Stored Hash: ");

	return 0;
}
    97ee:	4620      	mov	r0, r4
    97f0:	bd10      	pop	{r4, pc}
	return 0;
    97f2:	2400      	movs	r4, #0
    97f4:	e7fb      	b.n	97ee <db_hash_set+0x1a>
    97f6:	bf00      	nop
    97f8:	20001f75 	.word	0x20001f75
    97fc:	0001a539 	.word	0x0001a539

00009800 <db_hash_store>:
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
    9800:	2210      	movs	r2, #16
{
    9802:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
    9804:	4906      	ldr	r1, [pc, #24]	; (9820 <db_hash_store+0x20>)
    9806:	4807      	ldr	r0, [pc, #28]	; (9824 <db_hash_store+0x24>)
    9808:	f7f8 fa0a 	bl	1c20 <settings_save_one>
	if (err) {
    980c:	4602      	mov	r2, r0
    980e:	b128      	cbz	r0, 981c <db_hash_store+0x1c>
}
    9810:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
    9814:	2145      	movs	r1, #69	; 0x45
    9816:	4804      	ldr	r0, [pc, #16]	; (9828 <db_hash_store+0x28>)
    9818:	f008 bb96 	b.w	11f48 <printk>
}
    981c:	bd08      	pop	{r3, pc}
    981e:	bf00      	nop
    9820:	20001f65 	.word	0x20001f65
    9824:	0001a55f 	.word	0x0001a55f
    9828:	0001a567 	.word	0x0001a567

0000982c <sc_store>:
{
    982c:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
    982e:	4605      	mov	r5, r0
    9830:	f815 2b01 	ldrb.w	r2, [r5], #1
{
    9834:	4604      	mov	r4, r0
    9836:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
    9838:	b1ca      	cbz	r2, 986e <sc_store+0x42>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
    983a:	ae02      	add	r6, sp, #8
    983c:	2104      	movs	r1, #4
    983e:	4630      	mov	r0, r6
    9840:	f008 faec 	bl	11e1c <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
    9844:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
    9846:	462b      	mov	r3, r5
    9848:	2124      	movs	r1, #36	; 0x24
    984a:	4a0a      	ldr	r2, [pc, #40]	; (9874 <sc_store+0x48>)
    984c:	a803      	add	r0, sp, #12
    984e:	f7fb f843 	bl	48d8 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
    9852:	2204      	movs	r2, #4
    9854:	f104 0108 	add.w	r1, r4, #8
    9858:	a803      	add	r0, sp, #12
    985a:	f7f8 f9e1 	bl	1c20 <settings_save_one>
	if (err) {
    985e:	4602      	mov	r2, r0
    9860:	b118      	cbz	r0, 986a <sc_store+0x3e>
		BT_ERR("failed to store SC (err %d)", err);
    9862:	2145      	movs	r1, #69	; 0x45
    9864:	4804      	ldr	r0, [pc, #16]	; (9878 <sc_store+0x4c>)
    9866:	f008 fb6f 	bl	11f48 <printk>
}
    986a:	b00c      	add	sp, #48	; 0x30
    986c:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
    986e:	9200      	str	r2, [sp, #0]
    9870:	e7e9      	b.n	9846 <sc_store+0x1a>
    9872:	bf00      	nop
    9874:	0001aa43 	.word	0x0001aa43
    9878:	0001a592 	.word	0x0001a592

0000987c <find_static_attr>:
{
    987c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    9880:	4f18      	ldr	r7, [pc, #96]	; (98e4 <find_static_attr+0x68>)
{
    9882:	4605      	mov	r5, r0
	u16_t handle = 1;
    9884:	2601      	movs	r6, #1
    9886:	46b8      	mov	r8, r7
    9888:	4c17      	ldr	r4, [pc, #92]	; (98e8 <find_static_attr+0x6c>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    988a:	f8df 906c 	ldr.w	r9, [pc, #108]	; 98f8 <find_static_attr+0x7c>
    988e:	f1a4 0a08 	sub.w	sl, r4, #8
    9892:	45ba      	cmp	sl, r7
    9894:	d90e      	bls.n	98b4 <find_static_attr+0x38>
    9896:	4915      	ldr	r1, [pc, #84]	; (98ec <find_static_attr+0x70>)
    9898:	f240 4399 	movw	r3, #1177	; 0x499
    989c:	464a      	mov	r2, r9
    989e:	4814      	ldr	r0, [pc, #80]	; (98f0 <find_static_attr+0x74>)
    98a0:	f008 fb52 	bl	11f48 <printk>
    98a4:	4813      	ldr	r0, [pc, #76]	; (98f4 <find_static_attr+0x78>)
    98a6:	f008 fb4f 	bl	11f48 <printk>
    98aa:	f240 4199 	movw	r1, #1177	; 0x499
    98ae:	4648      	mov	r0, r9
    98b0:	f008 fde0 	bl	12474 <assert_post_action>
    98b4:	45c2      	cmp	sl, r8
    98b6:	d212      	bcs.n	98de <find_static_attr+0x62>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    98b8:	2100      	movs	r1, #0
			if (attr == &static_svc->attrs[i]) {
    98ba:	2214      	movs	r2, #20
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    98bc:	f854 cc04 	ldr.w	ip, [r4, #-4]
    98c0:	e006      	b.n	98d0 <find_static_attr+0x54>
			if (attr == &static_svc->attrs[i]) {
    98c2:	f854 3c08 	ldr.w	r3, [r4, #-8]
    98c6:	fb02 3301 	mla	r3, r2, r1, r3
    98ca:	429d      	cmp	r5, r3
    98cc:	d008      	beq.n	98e0 <find_static_attr+0x64>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    98ce:	3101      	adds	r1, #1
    98d0:	1873      	adds	r3, r6, r1
    98d2:	458c      	cmp	ip, r1
    98d4:	b298      	uxth	r0, r3
    98d6:	d1f4      	bne.n	98c2 <find_static_attr+0x46>
    98d8:	4606      	mov	r6, r0
    98da:	3408      	adds	r4, #8
    98dc:	e7d7      	b.n	988e <find_static_attr+0x12>
	return 0;
    98de:	2000      	movs	r0, #0
}
    98e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    98e4:	00016b58 	.word	0x00016b58
    98e8:	00016b50 	.word	0x00016b50
    98ec:	0001a5e3 	.word	0x0001a5e3
    98f0:	00017b50 	.word	0x00017b50
    98f4:	00017b6d 	.word	0x00017b6d
    98f8:	0001a5b3 	.word	0x0001a5b3

000098fc <gatt_notify>:
{
    98fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9900:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
    9902:	8992      	ldrh	r2, [r2, #12]
{
    9904:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    9906:	3202      	adds	r2, #2
    9908:	211b      	movs	r1, #27
{
    990a:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    990c:	f7ff f910 	bl	8b30 <bt_att_create_pdu>
	if (!buf) {
    9910:	4605      	mov	r5, r0
    9912:	b1c8      	cbz	r0, 9948 <gatt_notify+0x4c>
	nfy = net_buf_add(buf, sizeof(*nfy));
    9914:	f100 0908 	add.w	r9, r0, #8
    9918:	2102      	movs	r1, #2
    991a:	4648      	mov	r0, r9
    991c:	f003 fe90 	bl	d640 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    9920:	4606      	mov	r6, r0
	net_buf_add(buf, params->len);
    9922:	89a1      	ldrh	r1, [r4, #12]
	nfy->handle = sys_cpu_to_le16(handle);
    9924:	f826 8b02 	strh.w	r8, [r6], #2
	net_buf_add(buf, params->len);
    9928:	4648      	mov	r0, r9
    992a:	f003 fe89 	bl	d640 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
    992e:	89a2      	ldrh	r2, [r4, #12]
    9930:	68a1      	ldr	r1, [r4, #8]
    9932:	4630      	mov	r0, r6
    9934:	f009 fe1c 	bl	13570 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
    9938:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    993c:	4629      	mov	r1, r5
    993e:	4638      	mov	r0, r7
}
    9940:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
    9944:	f7ff be76 	b.w	9634 <bt_att_send>
		BT_WARN("No buffer available to send notification");
    9948:	2157      	movs	r1, #87	; 0x57
    994a:	4803      	ldr	r0, [pc, #12]	; (9958 <gatt_notify+0x5c>)
    994c:	f008 fafc 	bl	11f48 <printk>
}
    9950:	f06f 000b 	mvn.w	r0, #11
    9954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9958:	0001a612 	.word	0x0001a612

0000995c <gatt_send.constprop.0>:
static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
    995c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9960:	4606      	mov	r6, r0
    9962:	4688      	mov	r8, r1
    9964:	4617      	mov	r7, r2
	if (params) {
    9966:	461c      	mov	r4, r3
    9968:	b31b      	cbz	r3, 99b2 <gatt_send.constprop.0+0x56>
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    996a:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    996e:	2100      	movs	r1, #0
    9970:	f7ff fd54 	bl	941c <bt_att_req_alloc>
		if (!req) {
    9974:	4605      	mov	r5, r0
    9976:	b920      	cbnz	r0, 9982 <gatt_send.constprop.0+0x26>
			return -ENOMEM;
    9978:	f06f 040b 	mvn.w	r4, #11
}
    997c:	4620      	mov	r0, r4
    997e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		req->destroy = destroy;
    9982:	2300      	movs	r3, #0
		req->user_data = params;
    9984:	6184      	str	r4, [r0, #24]
		err = bt_att_req_send(conn, req);
    9986:	4601      	mov	r1, r0
		req->buf = buf;
    9988:	f8c0 8010 	str.w	r8, [r0, #16]
		req->func = func;
    998c:	6047      	str	r7, [r0, #4]
		req->destroy = destroy;
    998e:	6083      	str	r3, [r0, #8]
		err = bt_att_req_send(conn, req);
    9990:	4630      	mov	r0, r6
    9992:	f7ff fea3 	bl	96dc <bt_att_req_send>
		if (err) {
    9996:	4604      	mov	r4, r0
    9998:	2800      	cmp	r0, #0
    999a:	d0ef      	beq.n	997c <gatt_send.constprop.0+0x20>
			bt_att_req_free(req);
    999c:	4628      	mov	r0, r5
    999e:	f7ff fd53 	bl	9448 <bt_att_req_free>
	if (err) {
    99a2:	2c00      	cmp	r4, #0
    99a4:	d0ea      	beq.n	997c <gatt_send.constprop.0+0x20>
		BT_ERR("Error sending ATT PDU: %d", err);
    99a6:	4622      	mov	r2, r4
    99a8:	2145      	movs	r1, #69	; 0x45
    99aa:	4804      	ldr	r0, [pc, #16]	; (99bc <gatt_send.constprop.0+0x60>)
    99ac:	f008 facc 	bl	11f48 <printk>
    99b0:	e7e4      	b.n	997c <gatt_send.constprop.0+0x20>
		err = bt_att_send(conn, buf, NULL, NULL);
    99b2:	461a      	mov	r2, r3
    99b4:	f7ff fe3e 	bl	9634 <bt_att_send>
    99b8:	4604      	mov	r4, r0
    99ba:	e7f2      	b.n	99a2 <gatt_send.constprop.0+0x46>
    99bc:	0001a640 	.word	0x0001a640

000099c0 <gatt_indicate>:
{
    99c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    99c4:	4614      	mov	r4, r2
				sizeof(*ind) + params->len);
    99c6:	8a12      	ldrh	r2, [r2, #16]
{
    99c8:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    99ca:	3202      	adds	r2, #2
    99cc:	211d      	movs	r1, #29
{
    99ce:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    99d0:	f7ff f8ae 	bl	8b30 <bt_att_create_pdu>
	if (!buf) {
    99d4:	4605      	mov	r5, r0
    99d6:	b1e8      	cbz	r0, 9a14 <gatt_indicate+0x54>
	ind = net_buf_add(buf, sizeof(*ind));
    99d8:	f100 0808 	add.w	r8, r0, #8
    99dc:	2102      	movs	r1, #2
    99de:	4640      	mov	r0, r8
    99e0:	f003 fe2e 	bl	d640 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    99e4:	4606      	mov	r6, r0
	net_buf_add(buf, params->len);
    99e6:	8a21      	ldrh	r1, [r4, #16]
	ind->handle = sys_cpu_to_le16(handle);
    99e8:	f826 9b02 	strh.w	r9, [r6], #2
	net_buf_add(buf, params->len);
    99ec:	4640      	mov	r0, r8
    99ee:	f003 fe27 	bl	d640 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    99f2:	4630      	mov	r0, r6
    99f4:	8a22      	ldrh	r2, [r4, #16]
    99f6:	68e1      	ldr	r1, [r4, #12]
    99f8:	f009 fdba 	bl	13570 <memcpy>
	if (!params->func) {
    99fc:	68a3      	ldr	r3, [r4, #8]
    99fe:	b933      	cbnz	r3, 9a0e <gatt_indicate+0x4e>
		return gatt_send(conn, buf, NULL, NULL, NULL);
    9a00:	461a      	mov	r2, r3
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    9a02:	4629      	mov	r1, r5
    9a04:	4638      	mov	r0, r7
}
    9a06:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    9a0a:	f7ff bfa7 	b.w	995c <gatt_send.constprop.0>
    9a0e:	4623      	mov	r3, r4
    9a10:	4a04      	ldr	r2, [pc, #16]	; (9a24 <gatt_indicate+0x64>)
    9a12:	e7f6      	b.n	9a02 <gatt_indicate+0x42>
		BT_WARN("No buffer available to send indication");
    9a14:	2157      	movs	r1, #87	; 0x57
    9a16:	4804      	ldr	r0, [pc, #16]	; (9a28 <gatt_indicate+0x68>)
    9a18:	f008 fa96 	bl	11f48 <printk>
}
    9a1c:	f06f 000b 	mvn.w	r0, #11
    9a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9a24:	000147d9 	.word	0x000147d9
    9a28:	0001a65f 	.word	0x0001a65f

00009a2c <ccc_save>:
{
    9a2c:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    9a2e:	6882      	ldr	r2, [r0, #8]
    9a30:	4b0b      	ldr	r3, [pc, #44]	; (9a60 <ccc_save+0x34>)
{
    9a32:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    9a34:	429a      	cmp	r2, r3
{
    9a36:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    9a38:	d110      	bne.n	9a5c <ccc_save+0x30>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
    9a3a:	790a      	ldrb	r2, [r1, #4]
    9a3c:	68c0      	ldr	r0, [r0, #12]
    9a3e:	6809      	ldr	r1, [r1, #0]
    9a40:	f00a ff71 	bl	14926 <ccc_find_cfg>
	if (!cfg) {
    9a44:	b150      	cbz	r0, 9a5c <ccc_save+0x30>
	save->store[save->count].handle = attr->handle;
    9a46:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
    9a4a:	8a29      	ldrh	r1, [r5, #16]
    9a4c:	eb04 0283 	add.w	r2, r4, r3, lsl #2
    9a50:	8111      	strh	r1, [r2, #8]
	save->store[save->count].value = cfg->value;
    9a52:	8901      	ldrh	r1, [r0, #8]
	save->count++;
    9a54:	3301      	adds	r3, #1
	save->store[save->count].value = cfg->value;
    9a56:	8151      	strh	r1, [r2, #10]
	save->count++;
    9a58:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
    9a5c:	2001      	movs	r0, #1
    9a5e:	bd38      	pop	{r3, r4, r5, pc}
    9a60:	00009af5 	.word	0x00009af5

00009a64 <ccc_load>:
{
    9a64:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    9a66:	4a22      	ldr	r2, [pc, #136]	; (9af0 <ccc_load+0x8c>)
{
    9a68:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    9a6a:	6881      	ldr	r1, [r0, #8]
{
    9a6c:	4603      	mov	r3, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    9a6e:	4291      	cmp	r1, r2
    9a70:	d002      	beq.n	9a78 <ccc_load+0x14>
		return BT_GATT_ITER_CONTINUE;
    9a72:	2001      	movs	r0, #1
}
    9a74:	b002      	add	sp, #8
    9a76:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
    9a78:	68a2      	ldr	r2, [r4, #8]
	ccc = attr->user_data;
    9a7a:	68c6      	ldr	r6, [r0, #12]
	if (!load->entry) {
    9a7c:	b94a      	cbnz	r2, 9a92 <ccc_load+0x2e>
	cfg = ccc_find_cfg(ccc, addr, id);
    9a7e:	4630      	mov	r0, r6
    9a80:	7922      	ldrb	r2, [r4, #4]
    9a82:	6821      	ldr	r1, [r4, #0]
    9a84:	f00a ff4f 	bl	14926 <ccc_find_cfg>
	if (!cfg) {
    9a88:	2800      	cmp	r0, #0
    9a8a:	d0f2      	beq.n	9a72 <ccc_load+0xe>
	clear_ccc_cfg(cfg);
    9a8c:	f00a ff0a 	bl	148a4 <clear_ccc_cfg>
    9a90:	e7ef      	b.n	9a72 <ccc_load+0xe>
	} else if (!load->count) {
    9a92:	68e0      	ldr	r0, [r4, #12]
    9a94:	2800      	cmp	r0, #0
    9a96:	d0ed      	beq.n	9a74 <ccc_load+0x10>
	if (load->entry->handle != attr->handle) {
    9a98:	8812      	ldrh	r2, [r2, #0]
    9a9a:	8a1b      	ldrh	r3, [r3, #16]
    9a9c:	429a      	cmp	r2, r3
    9a9e:	d00a      	beq.n	9ab6 <ccc_load+0x52>
		if (load->entry->handle < attr->handle) {
    9aa0:	d2e7      	bcs.n	9a72 <ccc_load+0xe>
	load->count--;
    9aa2:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
    9aa4:	68a3      	ldr	r3, [r4, #8]
	load->count--;
    9aa6:	3801      	subs	r0, #1
	load->entry++;
    9aa8:	3304      	adds	r3, #4
	load->count--;
    9aaa:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    9aac:	3800      	subs	r0, #0
    9aae:	bf18      	it	ne
    9ab0:	2001      	movne	r0, #1
	load->entry++;
    9ab2:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    9ab4:	e7de      	b.n	9a74 <ccc_load+0x10>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
    9ab6:	4630      	mov	r0, r6
    9ab8:	7922      	ldrb	r2, [r4, #4]
    9aba:	6821      	ldr	r1, [r4, #0]
    9abc:	f00a ff33 	bl	14926 <ccc_find_cfg>
	if (!cfg) {
    9ac0:	4605      	mov	r5, r0
    9ac2:	b980      	cbnz	r0, 9ae6 <ccc_load+0x82>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
    9ac4:	9000      	str	r0, [sp, #0]
    9ac6:	4602      	mov	r2, r0
    9ac8:	f8cd 0003 	str.w	r0, [sp, #3]
    9acc:	4669      	mov	r1, sp
    9ace:	4630      	mov	r0, r6
    9ad0:	f00a ff29 	bl	14926 <ccc_find_cfg>
		if (!cfg) {
    9ad4:	4605      	mov	r5, r0
    9ad6:	2800      	cmp	r0, #0
    9ad8:	d0e3      	beq.n	9aa2 <ccc_load+0x3e>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
    9ada:	6821      	ldr	r1, [r4, #0]
    9adc:	3001      	adds	r0, #1
    9ade:	f00a fede 	bl	1489e <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
    9ae2:	7923      	ldrb	r3, [r4, #4]
    9ae4:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
    9ae6:	68a3      	ldr	r3, [r4, #8]
    9ae8:	885b      	ldrh	r3, [r3, #2]
    9aea:	812b      	strh	r3, [r5, #8]
    9aec:	e7d9      	b.n	9aa2 <ccc_load+0x3e>
    9aee:	bf00      	nop
    9af0:	00009af5 	.word	0x00009af5

00009af4 <bt_gatt_attr_write_ccc>:
{
    9af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9af8:	461f      	mov	r7, r3
    9afa:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    9afe:	4606      	mov	r6, r0
    9b00:	4688      	mov	r8, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
    9b02:	f8d1 900c 	ldr.w	r9, [r1, #12]
	if (offset) {
    9b06:	2b00      	cmp	r3, #0
    9b08:	d144      	bne.n	9b94 <bt_gatt_attr_write_ccc+0xa0>
	if (!len || len > sizeof(u16_t)) {
    9b0a:	1e7b      	subs	r3, r7, #1
    9b0c:	2b01      	cmp	r3, #1
    9b0e:	d844      	bhi.n	9b9a <bt_gatt_attr_write_ccc+0xa6>
	if (len < sizeof(u16_t)) {
    9b10:	2f01      	cmp	r7, #1
		value = *(u8_t *)buf;
    9b12:	7815      	ldrb	r5, [r2, #0]
	return ((u16_t)src[1] << 8) | src[0];
    9b14:	bf18      	it	ne
    9b16:	7853      	ldrbne	r3, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
    9b18:	4649      	mov	r1, r9
		value = *(u8_t *)buf;
    9b1a:	bf0c      	ite	eq
    9b1c:	b2ad      	uxtheq	r5, r5
    9b1e:	ea45 2503 	orrne.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
    9b22:	f00a ff0f 	bl	14944 <find_ccc_cfg>
	if (!cfg) {
    9b26:	4604      	mov	r4, r0
    9b28:	b9b0      	cbnz	r0, 9b58 <bt_gatt_attr_write_ccc+0x64>
		if (!value) {
    9b2a:	b915      	cbnz	r5, 9b32 <bt_gatt_attr_write_ccc+0x3e>
			return len;
    9b2c:	4638      	mov	r0, r7
}
    9b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
    9b32:	4649      	mov	r1, r9
    9b34:	f00a ff06 	bl	14944 <find_ccc_cfg>
		if (!cfg) {
    9b38:	4604      	mov	r4, r0
    9b3a:	b930      	cbnz	r0, 9b4a <bt_gatt_attr_write_ccc+0x56>
			BT_WARN("No space to store CCC cfg");
    9b3c:	4818      	ldr	r0, [pc, #96]	; (9ba0 <bt_gatt_attr_write_ccc+0xac>)
    9b3e:	2157      	movs	r1, #87	; 0x57
    9b40:	f008 fa02 	bl	11f48 <printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    9b44:	f06f 0010 	mvn.w	r0, #16
    9b48:	e7f1      	b.n	9b2e <bt_gatt_attr_write_ccc+0x3a>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    9b4a:	f106 017c 	add.w	r1, r6, #124	; 0x7c
    9b4e:	3001      	adds	r0, #1
    9b50:	f00a fea5 	bl	1489e <bt_addr_le_copy>
		cfg->id = conn->id;
    9b54:	7a33      	ldrb	r3, [r6, #8]
    9b56:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
    9b58:	f8d9 3010 	ldr.w	r3, [r9, #16]
    9b5c:	b973      	cbnz	r3, 9b7c <bt_gatt_attr_write_ccc+0x88>
	if (cfg->value != ccc->value) {
    9b5e:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
    9b62:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
    9b64:	42ab      	cmp	r3, r5
    9b66:	d003      	beq.n	9b70 <bt_gatt_attr_write_ccc+0x7c>
		gatt_ccc_changed(attr, ccc);
    9b68:	4649      	mov	r1, r9
    9b6a:	4640      	mov	r0, r8
    9b6c:	f00a fe2a 	bl	147c4 <gatt_ccc_changed>
	if (!value) {
    9b70:	2d00      	cmp	r5, #0
    9b72:	d1db      	bne.n	9b2c <bt_gatt_attr_write_ccc+0x38>
		clear_ccc_cfg(cfg);
    9b74:	4620      	mov	r0, r4
    9b76:	f00a fe95 	bl	148a4 <clear_ccc_cfg>
    9b7a:	e7d7      	b.n	9b2c <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
    9b7c:	462a      	mov	r2, r5
    9b7e:	4641      	mov	r1, r8
    9b80:	4630      	mov	r0, r6
    9b82:	4798      	blx	r3
		if (write < 0) {
    9b84:	2800      	cmp	r0, #0
    9b86:	dbd2      	blt.n	9b2e <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
    9b88:	1e42      	subs	r2, r0, #1
    9b8a:	2a01      	cmp	r2, #1
    9b8c:	d9e7      	bls.n	9b5e <bt_gatt_attr_write_ccc+0x6a>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    9b8e:	f06f 000d 	mvn.w	r0, #13
    9b92:	e7cc      	b.n	9b2e <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    9b94:	f06f 0006 	mvn.w	r0, #6
    9b98:	e7c9      	b.n	9b2e <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    9b9a:	f06f 000c 	mvn.w	r0, #12
    9b9e:	e7c6      	b.n	9b2e <bt_gatt_attr_write_ccc+0x3a>
    9ba0:	0001a68b 	.word	0x0001a68b

00009ba4 <sc_commit>:
{
    9ba4:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9ba6:	4c0a      	ldr	r4, [pc, #40]	; (9bd0 <sc_commit+0x2c>)
    9ba8:	f06f 0102 	mvn.w	r1, #2
    9bac:	4620      	mov	r0, r4
    9bae:	f00a fe87 	bl	148c0 <atomic_and>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9bb2:	e8d4 3faf 	lda	r3, [r4]
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    9bb6:	07db      	lsls	r3, r3, #31
    9bb8:	d507      	bpl.n	9bca <sc_commit+0x26>
    9bba:	f44f 72a4 	mov.w	r2, #328	; 0x148
    9bbe:	2300      	movs	r3, #0
    9bc0:	4804      	ldr	r0, [pc, #16]	; (9bd4 <sc_commit+0x30>)
    9bc2:	f1a4 0120 	sub.w	r1, r4, #32
    9bc6:	f007 f99f 	bl	10f08 <k_delayed_work_submit_to_queue>
}
    9bca:	2000      	movs	r0, #0
    9bcc:	bd10      	pop	{r4, pc}
    9bce:	bf00      	nop
    9bd0:	20000fc0 	.word	0x20000fc0
    9bd4:	20001dc8 	.word	0x20001dc8

00009bd8 <gatt_sub_find_free>:
{
    9bd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9bda:	4606      	mov	r6, r0
	if (free_sub) {
    9bdc:	460c      	mov	r4, r1
    9bde:	b109      	cbz	r1, 9be4 <gatt_sub_find_free+0xc>
		*free_sub = NULL;
    9be0:	2300      	movs	r3, #0
    9be2:	600b      	str	r3, [r1, #0]
		if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
    9be4:	4d16      	ldr	r5, [pc, #88]	; (9c40 <gatt_sub_find_free+0x68>)
    9be6:	4630      	mov	r0, r6
    9be8:	462a      	mov	r2, r5
    9bea:	f812 1b01 	ldrb.w	r1, [r2], #1
    9bee:	f00a f84b 	bl	13c88 <bt_conn_is_peer_addr_le>
    9bf2:	462f      	mov	r7, r5
    9bf4:	b9f8      	cbnz	r0, 9c36 <gatt_sub_find_free+0x5e>
		} else if (free_sub &&
    9bf6:	b14c      	cbz	r4, 9c0c <gatt_sub_find_free+0x34>
			   !bt_addr_le_cmp(BT_ADDR_LE_ANY, &sub->peer)) {
    9bf8:	9000      	str	r0, [sp, #0]
	return memcmp(a, b, sizeof(*a));
    9bfa:	2207      	movs	r2, #7
    9bfc:	f8cd 0003 	str.w	r0, [sp, #3]
    9c00:	1c69      	adds	r1, r5, #1
    9c02:	4668      	mov	r0, sp
    9c04:	f009 fca4 	bl	13550 <memcmp>
		} else if (free_sub &&
    9c08:	b900      	cbnz	r0, 9c0c <gatt_sub_find_free+0x34>
			*free_sub = sub;
    9c0a:	6025      	str	r5, [r4, #0]
		if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
    9c0c:	4630      	mov	r0, r6
    9c0e:	4a0d      	ldr	r2, [pc, #52]	; (9c44 <gatt_sub_find_free+0x6c>)
    9c10:	7c39      	ldrb	r1, [r7, #16]
    9c12:	f00a f839 	bl	13c88 <bt_conn_is_peer_addr_le>
    9c16:	b980      	cbnz	r0, 9c3a <gatt_sub_find_free+0x62>
		} else if (free_sub &&
    9c18:	b154      	cbz	r4, 9c30 <gatt_sub_find_free+0x58>
			   !bt_addr_le_cmp(BT_ADDR_LE_ANY, &sub->peer)) {
    9c1a:	9000      	str	r0, [sp, #0]
    9c1c:	2207      	movs	r2, #7
    9c1e:	f8cd 0003 	str.w	r0, [sp, #3]
    9c22:	4908      	ldr	r1, [pc, #32]	; (9c44 <gatt_sub_find_free+0x6c>)
    9c24:	4668      	mov	r0, sp
    9c26:	f009 fc93 	bl	13550 <memcmp>
		} else if (free_sub &&
    9c2a:	b908      	cbnz	r0, 9c30 <gatt_sub_find_free+0x58>
			*free_sub = sub;
    9c2c:	4b06      	ldr	r3, [pc, #24]	; (9c48 <gatt_sub_find_free+0x70>)
    9c2e:	6023      	str	r3, [r4, #0]
	return NULL;
    9c30:	2000      	movs	r0, #0
}
    9c32:	b003      	add	sp, #12
    9c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct gatt_sub *sub = &subscriptions[i];
    9c36:	4628      	mov	r0, r5
    9c38:	e7fb      	b.n	9c32 <gatt_sub_find_free+0x5a>
    9c3a:	4803      	ldr	r0, [pc, #12]	; (9c48 <gatt_sub_find_free+0x70>)
    9c3c:	e7f9      	b.n	9c32 <gatt_sub_find_free+0x5a>
    9c3e:	bf00      	nop
    9c40:	20000fdc 	.word	0x20000fdc
    9c44:	20000fed 	.word	0x20000fed
    9c48:	20000fec 	.word	0x20000fec

00009c4c <find_sc_cfg>:
{
    9c4c:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
    9c4e:	4c0e      	ldr	r4, [pc, #56]	; (9c88 <find_sc_cfg+0x3c>)
{
    9c50:	4605      	mov	r5, r0
		if (id == sc_cfg[i].id &&
    9c52:	7823      	ldrb	r3, [r4, #0]
{
    9c54:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
    9c56:	4283      	cmp	r3, r0
    9c58:	d00a      	beq.n	9c70 <find_sc_cfg+0x24>
    9c5a:	7b23      	ldrb	r3, [r4, #12]
    9c5c:	42ab      	cmp	r3, r5
    9c5e:	d111      	bne.n	9c84 <find_sc_cfg+0x38>
    9c60:	2207      	movs	r2, #7
    9c62:	4631      	mov	r1, r6
    9c64:	4809      	ldr	r0, [pc, #36]	; (9c8c <find_sc_cfg+0x40>)
    9c66:	f009 fc73 	bl	13550 <memcmp>
    9c6a:	b958      	cbnz	r0, 9c84 <find_sc_cfg+0x38>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    9c6c:	2001      	movs	r0, #1
    9c6e:	e005      	b.n	9c7c <find_sc_cfg+0x30>
    9c70:	2207      	movs	r2, #7
    9c72:	1c60      	adds	r0, r4, #1
    9c74:	f009 fc6c 	bl	13550 <memcmp>
		if (id == sc_cfg[i].id &&
    9c78:	2800      	cmp	r0, #0
    9c7a:	d1ee      	bne.n	9c5a <find_sc_cfg+0xe>
			return &sc_cfg[i];
    9c7c:	230c      	movs	r3, #12
    9c7e:	fb03 4000 	mla	r0, r3, r0, r4
    9c82:	e000      	b.n	9c86 <find_sc_cfg+0x3a>
	return NULL;
    9c84:	2000      	movs	r0, #0
}
    9c86:	bd70      	pop	{r4, r5, r6, pc}
    9c88:	20001e6a 	.word	0x20001e6a
    9c8c:	20001e77 	.word	0x20001e77

00009c90 <sc_save>:
{
    9c90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    9c94:	4680      	mov	r8, r0
    9c96:	460f      	mov	r7, r1
    9c98:	4616      	mov	r6, r2
    9c9a:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
    9c9c:	f7ff ffd6 	bl	9c4c <find_sc_cfg>
	if (!cfg) {
    9ca0:	4604      	mov	r4, r0
    9ca2:	b998      	cbnz	r0, 9ccc <sc_save+0x3c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    9ca4:	4669      	mov	r1, sp
    9ca6:	9000      	str	r0, [sp, #0]
    9ca8:	f8cd 0003 	str.w	r0, [sp, #3]
    9cac:	f7ff ffce 	bl	9c4c <find_sc_cfg>
		if (!cfg) {
    9cb0:	4604      	mov	r4, r0
    9cb2:	b930      	cbnz	r0, 9cc2 <sc_save+0x32>
			BT_ERR("unable to save SC: no cfg left");
    9cb4:	2145      	movs	r1, #69	; 0x45
    9cb6:	4812      	ldr	r0, [pc, #72]	; (9d00 <sc_save+0x70>)
    9cb8:	f008 f946 	bl	11f48 <printk>
}
    9cbc:	b002      	add	sp, #8
    9cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&cfg->peer, peer);
    9cc2:	4639      	mov	r1, r7
		cfg->id = id;
    9cc4:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
    9cc8:	f00a fde9 	bl	1489e <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
    9ccc:	8922      	ldrh	r2, [r4, #8]
    9cce:	8963      	ldrh	r3, [r4, #10]
    9cd0:	b96a      	cbnz	r2, 9cee <sc_save+0x5e>
    9cd2:	b973      	cbnz	r3, 9cf2 <sc_save+0x62>
		cfg->data.start = start;
    9cd4:	8126      	strh	r6, [r4, #8]
		*end = new_end;
    9cd6:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
    9cd8:	4621      	mov	r1, r4
    9cda:	f811 0b01 	ldrb.w	r0, [r1], #1
    9cde:	f009 feef 	bl	13ac0 <bt_addr_le_is_bonded>
    9ce2:	2800      	cmp	r0, #0
    9ce4:	d0ea      	beq.n	9cbc <sc_save+0x2c>
		sc_store(cfg);
    9ce6:	4620      	mov	r0, r4
    9ce8:	f7ff fda0 	bl	982c <sc_store>
    9cec:	e7e6      	b.n	9cbc <sc_save+0x2c>
	if (new_start >= *start && new_end <= *end) {
    9cee:	4296      	cmp	r6, r2
    9cf0:	d302      	bcc.n	9cf8 <sc_save+0x68>
    9cf2:	429d      	cmp	r5, r3
    9cf4:	d8ef      	bhi.n	9cd6 <sc_save+0x46>
    9cf6:	e7e1      	b.n	9cbc <sc_save+0x2c>
	if (*end < new_end) {
    9cf8:	429d      	cmp	r5, r3
		*start = new_start;
    9cfa:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
    9cfc:	d9ec      	bls.n	9cd8 <sc_save+0x48>
    9cfe:	e7ea      	b.n	9cd6 <sc_save+0x46>
    9d00:	0001a6aa 	.word	0x0001a6aa

00009d04 <notify_cb>:
{
    9d04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    9d08:	4b31      	ldr	r3, [pc, #196]	; (9dd0 <notify_cb+0xcc>)
    9d0a:	6882      	ldr	r2, [r0, #8]
{
    9d0c:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    9d0e:	429a      	cmp	r2, r3
{
    9d10:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    9d12:	d113      	bne.n	9d3c <notify_cb+0x38>
	ccc = attr->user_data;
    9d14:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    9d16:	4b2f      	ldr	r3, [pc, #188]	; (9dd4 <notify_cb+0xd0>)
    9d18:	429f      	cmp	r7, r3
    9d1a:	d013      	beq.n	9d44 <notify_cb+0x40>
		if (cfg->value != data->type) {
    9d1c:	893a      	ldrh	r2, [r7, #8]
    9d1e:	88ab      	ldrh	r3, [r5, #4]
    9d20:	429a      	cmp	r2, r3
    9d22:	d10b      	bne.n	9d3c <notify_cb+0x38>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    9d24:	4639      	mov	r1, r7
    9d26:	f811 0b01 	ldrb.w	r0, [r1], #1
    9d2a:	f7fd fb67 	bl	73fc <bt_conn_lookup_addr_le>
		if (!conn) {
    9d2e:	4604      	mov	r4, r0
    9d30:	b120      	cbz	r0, 9d3c <notify_cb+0x38>
		if (conn->state != BT_CONN_CONNECTED) {
    9d32:	7b43      	ldrb	r3, [r0, #13]
    9d34:	2b07      	cmp	r3, #7
    9d36:	d02d      	beq.n	9d94 <notify_cb+0x90>
			bt_conn_unref(conn);
    9d38:	f009 ffcd 	bl	13cd6 <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
    9d3c:	2001      	movs	r0, #1
}
    9d3e:	b003      	add	sp, #12
    9d40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    9d44:	f04f 0800 	mov.w	r8, #0
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    9d48:	46c1      	mov	r9, r8
    9d4a:	4c23      	ldr	r4, [pc, #140]	; (9dd8 <notify_cb+0xd4>)
    9d4c:	2207      	movs	r2, #7
    9d4e:	4669      	mov	r1, sp
    9d50:	4620      	mov	r0, r4
    9d52:	f8cd 9000 	str.w	r9, [sp]
    9d56:	f8cd 9003 	str.w	r9, [sp, #3]
    9d5a:	f009 fbf9 	bl	13550 <memcmp>
    9d5e:	b178      	cbz	r0, 9d80 <notify_cb+0x7c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    9d60:	2207      	movs	r2, #7
    9d62:	4621      	mov	r1, r4
    9d64:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    9d68:	f7fd fb80 	bl	746c <bt_conn_lookup_state_le>
			if (!conn) {
    9d6c:	b978      	cbnz	r0, 9d8e <notify_cb+0x8a>
				sc = (struct sc_data *)data->ind_params->data;
    9d6e:	68ab      	ldr	r3, [r5, #8]
				sc_save(cfg->id, &cfg->peer,
    9d70:	4621      	mov	r1, r4
				sc = (struct sc_data *)data->ind_params->data;
    9d72:	68da      	ldr	r2, [r3, #12]
				sc_save(cfg->id, &cfg->peer,
    9d74:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    9d78:	8853      	ldrh	r3, [r2, #2]
    9d7a:	8812      	ldrh	r2, [r2, #0]
    9d7c:	f7ff ff88 	bl	9c90 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    9d80:	340c      	adds	r4, #12
    9d82:	f1b8 0f00 	cmp.w	r8, #0
    9d86:	d1c9      	bne.n	9d1c <notify_cb+0x18>
    9d88:	f04f 0801 	mov.w	r8, #1
    9d8c:	e7de      	b.n	9d4c <notify_cb+0x48>
			bt_conn_unref(conn);
    9d8e:	f009 ffa2 	bl	13cd6 <bt_conn_unref>
    9d92:	e7f5      	b.n	9d80 <notify_cb+0x7c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    9d94:	697b      	ldr	r3, [r7, #20]
    9d96:	b123      	cbz	r3, 9da2 <notify_cb+0x9e>
    9d98:	4631      	mov	r1, r6
    9d9a:	4798      	blx	r3
    9d9c:	b908      	cbnz	r0, 9da2 <notify_cb+0x9e>
			bt_conn_unref(conn);
    9d9e:	4620      	mov	r0, r4
    9da0:	e7ca      	b.n	9d38 <notify_cb+0x34>
		if (data->type == BT_GATT_CCC_INDICATE) {
    9da2:	8a31      	ldrh	r1, [r6, #16]
    9da4:	88ab      	ldrh	r3, [r5, #4]
    9da6:	3901      	subs	r1, #1
    9da8:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, attr->handle - 1,
    9daa:	4620      	mov	r0, r4
    9dac:	68aa      	ldr	r2, [r5, #8]
    9dae:	b289      	uxth	r1, r1
		if (data->type == BT_GATT_CCC_INDICATE) {
    9db0:	d10b      	bne.n	9dca <notify_cb+0xc6>
			err = gatt_indicate(conn, attr->handle - 1,
    9db2:	f7ff fe05 	bl	99c0 <gatt_indicate>
			err = gatt_notify(conn, attr->handle - 1,
    9db6:	4606      	mov	r6, r0
		bt_conn_unref(conn);
    9db8:	4620      	mov	r0, r4
    9dba:	f009 ff8c 	bl	13cd6 <bt_conn_unref>
		if (err < 0) {
    9dbe:	2e00      	cmp	r6, #0
    9dc0:	f04f 0000 	mov.w	r0, #0
    9dc4:	dbbb      	blt.n	9d3e <notify_cb+0x3a>
		data->err = 0;
    9dc6:	6028      	str	r0, [r5, #0]
    9dc8:	e7b8      	b.n	9d3c <notify_cb+0x38>
			err = gatt_notify(conn, attr->handle - 1,
    9dca:	f7ff fd97 	bl	98fc <gatt_notify>
    9dce:	e7f2      	b.n	9db6 <notify_cb+0xb2>
    9dd0:	00009af5 	.word	0x00009af5
    9dd4:	2000026c 	.word	0x2000026c
    9dd8:	20001e6b 	.word	0x20001e6b

00009ddc <sc_set>:
{
    9ddc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9de0:	460e      	mov	r6, r1
    9de2:	4690      	mov	r8, r2
    9de4:	4699      	mov	r9, r3
	if (!name) {
    9de6:	4604      	mov	r4, r0
{
    9de8:	b087      	sub	sp, #28
	if (!name) {
    9dea:	b948      	cbnz	r0, 9e00 <sc_set+0x24>
		BT_ERR("Insufficient number of arguments");
    9dec:	2145      	movs	r1, #69	; 0x45
    9dee:	4829      	ldr	r0, [pc, #164]	; (9e94 <sc_set+0xb8>)
    9df0:	f008 f8aa 	bl	11f48 <printk>
		return -EINVAL;
    9df4:	f06f 0515 	mvn.w	r5, #21
}
    9df8:	4628      	mov	r0, r5
    9dfa:	b007      	add	sp, #28
    9dfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
    9e00:	a902      	add	r1, sp, #8
    9e02:	f009 fc2c 	bl	1365e <bt_settings_decode_key>
	if (err) {
    9e06:	4605      	mov	r5, r0
    9e08:	b128      	cbz	r0, 9e16 <sc_set+0x3a>
		BT_ERR("Unable to decode address %s", log_strdup(name));
    9e0a:	4622      	mov	r2, r4
    9e0c:	2145      	movs	r1, #69	; 0x45
    9e0e:	4822      	ldr	r0, [pc, #136]	; (9e98 <sc_set+0xbc>)
    9e10:	f008 f89a 	bl	11f48 <printk>
    9e14:	e7ee      	b.n	9df4 <sc_set+0x18>
	settings_name_next(name, &next);
    9e16:	4620      	mov	r0, r4
    9e18:	a901      	add	r1, sp, #4
    9e1a:	f008 fc8b 	bl	12734 <settings_name_next>
	if (!next) {
    9e1e:	9801      	ldr	r0, [sp, #4]
    9e20:	b1d8      	cbz	r0, 9e5a <sc_set+0x7e>
		id = strtol(next, NULL, 10);
    9e22:	220a      	movs	r2, #10
    9e24:	4629      	mov	r1, r5
    9e26:	f009 fade 	bl	133e6 <strtol>
    9e2a:	b2c7      	uxtb	r7, r0
	cfg = find_sc_cfg(id, &addr);
    9e2c:	4638      	mov	r0, r7
    9e2e:	a902      	add	r1, sp, #8
    9e30:	f7ff ff0c 	bl	9c4c <find_sc_cfg>
	if (!cfg && len_rd) {
    9e34:	4604      	mov	r4, r0
    9e36:	bb28      	cbnz	r0, 9e84 <sc_set+0xa8>
    9e38:	2e00      	cmp	r6, #0
    9e3a:	d0dd      	beq.n	9df8 <sc_set+0x1c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    9e3c:	a904      	add	r1, sp, #16
    9e3e:	9004      	str	r0, [sp, #16]
    9e40:	f8cd 0013 	str.w	r0, [sp, #19]
    9e44:	f7ff ff02 	bl	9c4c <find_sc_cfg>
		if (!cfg) {
    9e48:	4604      	mov	r4, r0
    9e4a:	b940      	cbnz	r0, 9e5e <sc_set+0x82>
			BT_ERR("Unable to restore SC: no cfg left");
    9e4c:	2145      	movs	r1, #69	; 0x45
    9e4e:	4813      	ldr	r0, [pc, #76]	; (9e9c <sc_set+0xc0>)
    9e50:	f008 f87a 	bl	11f48 <printk>
			return -ENOMEM;
    9e54:	f06f 050b 	mvn.w	r5, #11
    9e58:	e7ce      	b.n	9df8 <sc_set+0x1c>
		id = BT_ID_DEFAULT;
    9e5a:	462f      	mov	r7, r5
    9e5c:	e7e6      	b.n	9e2c <sc_set+0x50>
		cfg->id = id;
    9e5e:	f800 7b01 	strb.w	r7, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
    9e62:	a902      	add	r1, sp, #8
    9e64:	f00a fd1b 	bl	1489e <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
    9e68:	f104 0108 	add.w	r1, r4, #8
    9e6c:	2204      	movs	r2, #4
    9e6e:	4648      	mov	r0, r9
    9e70:	47c0      	blx	r8
		if (len < 0) {
    9e72:	1e04      	subs	r4, r0, #0
    9e74:	dac0      	bge.n	9df8 <sc_set+0x1c>
			BT_ERR("Failed to decode value (err %zd)", len);
    9e76:	4622      	mov	r2, r4
    9e78:	2145      	movs	r1, #69	; 0x45
    9e7a:	4809      	ldr	r0, [pc, #36]	; (9ea0 <sc_set+0xc4>)
    9e7c:	f008 f864 	bl	11f48 <printk>
			return len;
    9e80:	4625      	mov	r5, r4
    9e82:	e7b9      	b.n	9df8 <sc_set+0x1c>
	if (len_rd) {
    9e84:	2e00      	cmp	r6, #0
    9e86:	d1ef      	bne.n	9e68 <sc_set+0x8c>
		memset(cfg, 0, sizeof(*cfg));
    9e88:	220c      	movs	r2, #12
    9e8a:	4631      	mov	r1, r6
    9e8c:	f009 fb9b 	bl	135c6 <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
    9e90:	e7b2      	b.n	9df8 <sc_set+0x1c>
    9e92:	bf00      	nop
    9e94:	00018ef5 	.word	0x00018ef5
    9e98:	0001a6ce 	.word	0x0001a6ce
    9e9c:	0001a6ef 	.word	0x0001a6ef
    9ea0:	0001a539 	.word	0x0001a539

00009ea4 <find_cf_cfg_by_addr>:
{
    9ea4:	b570      	push	{r4, r5, r6, lr}
			if (id == cf_cfg[i].id &&
    9ea6:	4c0e      	ldr	r4, [pc, #56]	; (9ee0 <find_cf_cfg_by_addr+0x3c>)
{
    9ea8:	4606      	mov	r6, r0
			if (id == cf_cfg[i].id &&
    9eaa:	7823      	ldrb	r3, [r4, #0]
{
    9eac:	460d      	mov	r5, r1
			if (id == cf_cfg[i].id &&
    9eae:	4283      	cmp	r3, r0
    9eb0:	d00a      	beq.n	9ec8 <find_cf_cfg_by_addr+0x24>
    9eb2:	7c23      	ldrb	r3, [r4, #16]
    9eb4:	42b3      	cmp	r3, r6
    9eb6:	d111      	bne.n	9edc <find_cf_cfg_by_addr+0x38>
    9eb8:	2207      	movs	r2, #7
    9eba:	4628      	mov	r0, r5
    9ebc:	4909      	ldr	r1, [pc, #36]	; (9ee4 <find_cf_cfg_by_addr+0x40>)
    9ebe:	f009 fb47 	bl	13550 <memcmp>
    9ec2:	b958      	cbnz	r0, 9edc <find_cf_cfg_by_addr+0x38>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    9ec4:	2001      	movs	r0, #1
    9ec6:	e006      	b.n	9ed6 <find_cf_cfg_by_addr+0x32>
    9ec8:	2207      	movs	r2, #7
    9eca:	4628      	mov	r0, r5
    9ecc:	1c61      	adds	r1, r4, #1
    9ece:	f009 fb3f 	bl	13550 <memcmp>
			if (id == cf_cfg[i].id &&
    9ed2:	2800      	cmp	r0, #0
    9ed4:	d1ed      	bne.n	9eb2 <find_cf_cfg_by_addr+0xe>
				return &cf_cfg[i];
    9ed6:	eb04 1000 	add.w	r0, r4, r0, lsl #4
    9eda:	e000      	b.n	9ede <find_cf_cfg_by_addr+0x3a>
	return NULL;
    9edc:	2000      	movs	r0, #0
}
    9ede:	bd70      	pop	{r4, r5, r6, pc}
    9ee0:	20000f48 	.word	0x20000f48
    9ee4:	20000f59 	.word	0x20000f59

00009ee8 <find_cf_cfg>:
{
    9ee8:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if (!conn) {
    9eea:	4605      	mov	r5, r0
    9eec:	4c15      	ldr	r4, [pc, #84]	; (9f44 <find_cf_cfg+0x5c>)
    9eee:	b140      	cbz	r0, 9f02 <find_cf_cfg+0x1a>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    9ef0:	4622      	mov	r2, r4
    9ef2:	f812 1b01 	ldrb.w	r1, [r2], #1
    9ef6:	f009 fec7 	bl	13c88 <bt_conn_is_peer_addr_le>
    9efa:	b1c0      	cbz	r0, 9f2e <find_cf_cfg+0x46>
}
    9efc:	4620      	mov	r0, r4
    9efe:	b003      	add	sp, #12
    9f00:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    9f02:	9000      	str	r0, [sp, #0]
    9f04:	2207      	movs	r2, #7
    9f06:	f8cd 0003 	str.w	r0, [sp, #3]
    9f0a:	4669      	mov	r1, sp
    9f0c:	1c60      	adds	r0, r4, #1
    9f0e:	f009 fb1f 	bl	13550 <memcmp>
    9f12:	2800      	cmp	r0, #0
    9f14:	d0f2      	beq.n	9efc <find_cf_cfg+0x14>
    9f16:	2207      	movs	r2, #7
    9f18:	4669      	mov	r1, sp
    9f1a:	f104 0011 	add.w	r0, r4, #17
    9f1e:	9500      	str	r5, [sp, #0]
    9f20:	f8cd 5003 	str.w	r5, [sp, #3]
    9f24:	f009 fb14 	bl	13550 <memcmp>
    9f28:	b948      	cbnz	r0, 9f3e <find_cf_cfg+0x56>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    9f2a:	3410      	adds	r4, #16
    9f2c:	e7e6      	b.n	9efc <find_cf_cfg+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    9f2e:	4628      	mov	r0, r5
    9f30:	7c21      	ldrb	r1, [r4, #16]
    9f32:	f104 0211 	add.w	r2, r4, #17
    9f36:	f009 fea7 	bl	13c88 <bt_conn_is_peer_addr_le>
    9f3a:	2800      	cmp	r0, #0
    9f3c:	d1f5      	bne.n	9f2a <find_cf_cfg+0x42>
	return NULL;
    9f3e:	2400      	movs	r4, #0
    9f40:	e7dc      	b.n	9efc <find_cf_cfg+0x14>
    9f42:	bf00      	nop
    9f44:	20000f48 	.word	0x20000f48

00009f48 <cf_write>:
{
    9f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9f4c:	461e      	mov	r6, r3
    9f4e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    9f52:	4607      	mov	r7, r0
	if (offset > sizeof(cfg->data)) {
    9f54:	2b01      	cmp	r3, #1
{
    9f56:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
    9f58:	d83b      	bhi.n	9fd2 <cf_write+0x8a>
	if (offset + len > sizeof(cfg->data)) {
    9f5a:	4433      	add	r3, r6
    9f5c:	2b01      	cmp	r3, #1
    9f5e:	4635      	mov	r5, r6
    9f60:	dc3a      	bgt.n	9fd8 <cf_write+0x90>
	cfg = find_cf_cfg(conn);
    9f62:	f7ff ffc1 	bl	9ee8 <find_cf_cfg>
	if (!cfg) {
    9f66:	4604      	mov	r4, r0
    9f68:	b960      	cbnz	r0, 9f84 <cf_write+0x3c>
		cfg = find_cf_cfg(NULL);
    9f6a:	f7ff ffbd 	bl	9ee8 <find_cf_cfg>
	if (!cfg) {
    9f6e:	4604      	mov	r4, r0
    9f70:	b940      	cbnz	r0, 9f84 <cf_write+0x3c>
		BT_WARN("No space to store Client Supported Features");
    9f72:	2157      	movs	r1, #87	; 0x57
    9f74:	481a      	ldr	r0, [pc, #104]	; (9fe0 <cf_write+0x98>)
    9f76:	f007 ffe7 	bl	11f48 <printk>
    9f7a:	f06f 0510 	mvn.w	r5, #16
}
    9f7e:	4628      	mov	r0, r5
    9f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i < len && i < last_byte; i++) {
    9f84:	2300      	movs	r3, #0
    9f86:	429e      	cmp	r6, r3
    9f88:	d914      	bls.n	9fb4 <cf_write+0x6c>
    9f8a:	b13b      	cbz	r3, 9f9c <cf_write+0x54>
		cfg->data[i] |= value[i] & ((1 << last_bit) - 1);
    9f8c:	f898 3000 	ldrb.w	r3, [r8]
    9f90:	7a22      	ldrb	r2, [r4, #8]
    9f92:	f003 0301 	and.w	r3, r3, #1
    9f96:	4313      	orrs	r3, r2
    9f98:	7223      	strb	r3, [r4, #8]
	for (i = 0U; i < len && i < last_byte; i++) {
    9f9a:	e00d      	b.n	9fb8 <cf_write+0x70>
    9f9c:	7a21      	ldrb	r1, [r4, #8]
		u8_t chg_bits = value[i] ^ cfg->data[i];
    9f9e:	f898 2000 	ldrb.w	r2, [r8]
	for (i = 0U; i < len && i < last_byte; i++) {
    9fa2:	2301      	movs	r3, #1
		u8_t chg_bits = value[i] ^ cfg->data[i];
    9fa4:	404a      	eors	r2, r1
			if ((BIT(bit) & chg_bits) &&
    9fa6:	07d0      	lsls	r0, r2, #31
    9fa8:	d5ed      	bpl.n	9f86 <cf_write+0x3e>
    9faa:	07ca      	lsls	r2, r1, #31
    9fac:	d5eb      	bpl.n	9f86 <cf_write+0x3e>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    9fae:	f06f 0512 	mvn.w	r5, #18
    9fb2:	e7e4      	b.n	9f7e <cf_write+0x36>
	for (i = 0U; i < len && i < last_byte; i++) {
    9fb4:	2e00      	cmp	r6, #0
    9fb6:	d1e9      	bne.n	9f8c <cf_write+0x44>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    9fb8:	f107 017c 	add.w	r1, r7, #124	; 0x7c
    9fbc:	1c60      	adds	r0, r4, #1
    9fbe:	f00a fc6e 	bl	1489e <bt_addr_le_copy>
	cfg->id = conn->id;
    9fc2:	4620      	mov	r0, r4
    9fc4:	7a3b      	ldrb	r3, [r7, #8]
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    9fc6:	2100      	movs	r1, #0
	cfg->id = conn->id;
    9fc8:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    9fcc:	f00a fcd4 	bl	14978 <atomic_set_bit>
	return len;
    9fd0:	e7d5      	b.n	9f7e <cf_write+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    9fd2:	f06f 0506 	mvn.w	r5, #6
    9fd6:	e7d2      	b.n	9f7e <cf_write+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    9fd8:	f06f 050c 	mvn.w	r5, #12
    9fdc:	e7cf      	b.n	9f7e <cf_write+0x36>
    9fde:	bf00      	nop
    9fe0:	0001a716 	.word	0x0001a716

00009fe4 <sc_indicate_rsp>:
{
    9fe4:	b538      	push	{r3, r4, r5, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9fe6:	4d10      	ldr	r5, [pc, #64]	; (a028 <sc_indicate_rsp+0x44>)
    9fe8:	4604      	mov	r4, r0
    9fea:	f06f 0102 	mvn.w	r1, #2
    9fee:	4628      	mov	r0, r5
    9ff0:	f00a fc66 	bl	148c0 <atomic_and>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9ff4:	e8d5 3faf 	lda	r3, [r5]
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    9ff8:	07da      	lsls	r2, r3, #31
    9ffa:	d506      	bpl.n	a00a <sc_indicate_rsp+0x26>
    9ffc:	2200      	movs	r2, #0
    9ffe:	2300      	movs	r3, #0
    a000:	480a      	ldr	r0, [pc, #40]	; (a02c <sc_indicate_rsp+0x48>)
    a002:	f1a5 0120 	sub.w	r1, r5, #32
    a006:	f006 ff7f 	bl	10f08 <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
    a00a:	4620      	mov	r0, r4
    a00c:	f7ff ff6c 	bl	9ee8 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    a010:	b140      	cbz	r0, a024 <sc_indicate_rsp+0x40>
    a012:	7a03      	ldrb	r3, [r0, #8]
    a014:	07db      	lsls	r3, r3, #31
    a016:	d505      	bpl.n	a024 <sc_indicate_rsp+0x40>
}
    a018:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    a01c:	2100      	movs	r1, #0
    a01e:	300c      	adds	r0, #12
    a020:	f00a bcaa 	b.w	14978 <atomic_set_bit>
}
    a024:	bd38      	pop	{r3, r4, r5, pc}
    a026:	bf00      	nop
    a028:	20000fc0 	.word	0x20000fc0
    a02c:	20001dc8 	.word	0x20001dc8

0000a030 <cf_set>:
{
    a030:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    a034:	4688      	mov	r8, r1
    a036:	4616      	mov	r6, r2
    a038:	461f      	mov	r7, r3
	if (!name) {
    a03a:	4605      	mov	r5, r0
    a03c:	b948      	cbnz	r0, a052 <cf_set+0x22>
		BT_ERR("Insufficient number of arguments");
    a03e:	2145      	movs	r1, #69	; 0x45
    a040:	4821      	ldr	r0, [pc, #132]	; (a0c8 <cf_set+0x98>)
    a042:	f007 ff81 	bl	11f48 <printk>
		return -EINVAL;
    a046:	f06f 0415 	mvn.w	r4, #21
}
    a04a:	4620      	mov	r0, r4
    a04c:	b004      	add	sp, #16
    a04e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
    a052:	a902      	add	r1, sp, #8
    a054:	f009 fb03 	bl	1365e <bt_settings_decode_key>
	if (err) {
    a058:	4604      	mov	r4, r0
    a05a:	b128      	cbz	r0, a068 <cf_set+0x38>
		BT_ERR("Unable to decode address %s", log_strdup(name));
    a05c:	462a      	mov	r2, r5
    a05e:	2145      	movs	r1, #69	; 0x45
    a060:	481a      	ldr	r0, [pc, #104]	; (a0cc <cf_set+0x9c>)
    a062:	f007 ff71 	bl	11f48 <printk>
    a066:	e7ee      	b.n	a046 <cf_set+0x16>
	settings_name_next(name, &next);
    a068:	4628      	mov	r0, r5
    a06a:	a901      	add	r1, sp, #4
    a06c:	f008 fb62 	bl	12734 <settings_name_next>
	if (!next) {
    a070:	9801      	ldr	r0, [sp, #4]
    a072:	b190      	cbz	r0, a09a <cf_set+0x6a>
		id = strtol(next, NULL, 10);
    a074:	220a      	movs	r2, #10
    a076:	4621      	mov	r1, r4
    a078:	f009 f9b5 	bl	133e6 <strtol>
    a07c:	b2c0      	uxtb	r0, r0
	cfg = find_cf_cfg_by_addr(id, &addr);
    a07e:	a902      	add	r1, sp, #8
    a080:	f7ff ff10 	bl	9ea4 <find_cf_cfg_by_addr>
	if (!cfg) {
    a084:	4601      	mov	r1, r0
    a086:	b950      	cbnz	r0, a09e <cf_set+0x6e>
		cfg = find_cf_cfg(NULL);
    a088:	f7ff ff2e 	bl	9ee8 <find_cf_cfg>
		if (!cfg) {
    a08c:	4601      	mov	r1, r0
    a08e:	b930      	cbnz	r0, a09e <cf_set+0x6e>
			BT_ERR("Unable to restore CF: no cfg left");
    a090:	2145      	movs	r1, #69	; 0x45
    a092:	480f      	ldr	r0, [pc, #60]	; (a0d0 <cf_set+0xa0>)
    a094:	f007 ff58 	bl	11f48 <printk>
			return 0;
    a098:	e7d7      	b.n	a04a <cf_set+0x1a>
		id = BT_ID_DEFAULT;
    a09a:	4620      	mov	r0, r4
    a09c:	e7ef      	b.n	a07e <cf_set+0x4e>
	if (len_rd) {
    a09e:	f1b8 0f00 	cmp.w	r8, #0
    a0a2:	d00c      	beq.n	a0be <cf_set+0x8e>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
    a0a4:	2201      	movs	r2, #1
    a0a6:	4638      	mov	r0, r7
    a0a8:	3108      	adds	r1, #8
    a0aa:	47b0      	blx	r6
		if (len < 0) {
    a0ac:	1e05      	subs	r5, r0, #0
    a0ae:	dacc      	bge.n	a04a <cf_set+0x1a>
			BT_ERR("Failed to decode value (err %zd)", len);
    a0b0:	462a      	mov	r2, r5
    a0b2:	2145      	movs	r1, #69	; 0x45
    a0b4:	4807      	ldr	r0, [pc, #28]	; (a0d4 <cf_set+0xa4>)
    a0b6:	f007 ff47 	bl	11f48 <printk>
			return len;
    a0ba:	462c      	mov	r4, r5
    a0bc:	e7c5      	b.n	a04a <cf_set+0x1a>
		clear_cf_cfg(cfg);
    a0be:	4608      	mov	r0, r1
    a0c0:	f00a fc15 	bl	148ee <clear_cf_cfg>
    a0c4:	e7c1      	b.n	a04a <cf_set+0x1a>
    a0c6:	bf00      	nop
    a0c8:	00018ef5 	.word	0x00018ef5
    a0cc:	0001a6ce 	.word	0x0001a6ce
    a0d0:	0001a747 	.word	0x0001a747
    a0d4:	0001a539 	.word	0x0001a539

0000a0d8 <gatt_write_ccc.constprop.0>:
static int gatt_write_ccc(struct bt_conn *conn, u16_t handle, u16_t value,
    a0d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a0dc:	4688      	mov	r8, r1
    a0de:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    a0e0:	2112      	movs	r1, #18
    a0e2:	2204      	movs	r2, #4
static int gatt_write_ccc(struct bt_conn *conn, u16_t handle, u16_t value,
    a0e4:	4606      	mov	r6, r0
    a0e6:	461d      	mov	r5, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    a0e8:	f7fe fd22 	bl	8b30 <bt_att_create_pdu>
	if (!buf) {
    a0ec:	4604      	mov	r4, r0
    a0ee:	b1e8      	cbz	r0, a12c <gatt_write_ccc.constprop.0+0x54>
	req = net_buf_add(buf, sizeof(*req));
    a0f0:	f100 0908 	add.w	r9, r0, #8
    a0f4:	2102      	movs	r1, #2
    a0f6:	4648      	mov	r0, r9
    a0f8:	f003 faa2 	bl	d640 <net_buf_simple_add>
	net_buf_add_le16(buf, value);
    a0fc:	4639      	mov	r1, r7
	req->handle = sys_cpu_to_le16(handle);
    a0fe:	f8a0 8000 	strh.w	r8, [r0]
	net_buf_add_le16(buf, value);
    a102:	4648      	mov	r0, r9
    a104:	f00b fab3 	bl	1566e <net_buf_simple_add_le16>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a108:	f105 030c 	add.w	r3, r5, #12
    a10c:	e8d3 2fef 	ldaex	r2, [r3]
    a110:	f042 0204 	orr.w	r2, r2, #4
    a114:	e8c3 2fe1 	stlex	r1, r2, [r3]
    a118:	2900      	cmp	r1, #0
    a11a:	d1f7      	bne.n	a10c <gatt_write_ccc.constprop.0+0x34>
	return gatt_send(conn, buf, func, params, NULL);
    a11c:	462b      	mov	r3, r5
    a11e:	4621      	mov	r1, r4
    a120:	4630      	mov	r0, r6
}
    a122:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, func, params, NULL);
    a126:	4a03      	ldr	r2, [pc, #12]	; (a134 <gatt_write_ccc.constprop.0+0x5c>)
    a128:	f7ff bc18 	b.w	995c <gatt_send.constprop.0>
}
    a12c:	f06f 000b 	mvn.w	r0, #11
    a130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a134:	00014b35 	.word	0x00014b35

0000a138 <bt_gatt_clear_sc>:
{
    a138:	b570      	push	{r4, r5, r6, lr}
    a13a:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
    a13c:	f7ff fd86 	bl	9c4c <find_sc_cfg>
	if (!cfg) {
    a140:	4604      	mov	r4, r0
    a142:	b1e8      	cbz	r0, a180 <bt_gatt_clear_sc+0x48>
		if (cfg->id) {
    a144:	4605      	mov	r5, r0
    a146:	f815 2b01 	ldrb.w	r2, [r5], #1
    a14a:	b1e2      	cbz	r2, a186 <bt_gatt_clear_sc+0x4e>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
    a14c:	ae02      	add	r6, sp, #8
    a14e:	2104      	movs	r1, #4
    a150:	4630      	mov	r0, r6
    a152:	f007 fe63 	bl	11e1c <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
    a156:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
    a158:	4a0c      	ldr	r2, [pc, #48]	; (a18c <bt_gatt_clear_sc+0x54>)
    a15a:	462b      	mov	r3, r5
    a15c:	2124      	movs	r1, #36	; 0x24
    a15e:	a803      	add	r0, sp, #12
    a160:	f7fa fbba 	bl	48d8 <bt_settings_encode_key>
		err = settings_delete(key);
    a164:	a803      	add	r0, sp, #12
    a166:	f008 fabe 	bl	126e6 <settings_delete>
		if (err) {
    a16a:	4602      	mov	r2, r0
    a16c:	b118      	cbz	r0, a176 <bt_gatt_clear_sc+0x3e>
			BT_ERR("failed to delete SC (err %d)", err);
    a16e:	2145      	movs	r1, #69	; 0x45
    a170:	4807      	ldr	r0, [pc, #28]	; (a190 <bt_gatt_clear_sc+0x58>)
    a172:	f007 fee9 	bl	11f48 <printk>
	memset(cfg, 0, sizeof(*cfg));
    a176:	220c      	movs	r2, #12
    a178:	2100      	movs	r1, #0
    a17a:	4620      	mov	r0, r4
    a17c:	f009 fa23 	bl	135c6 <memset>
}
    a180:	2000      	movs	r0, #0
    a182:	b00c      	add	sp, #48	; 0x30
    a184:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
    a186:	9200      	str	r2, [sp, #0]
    a188:	e7e6      	b.n	a158 <bt_gatt_clear_sc+0x20>
    a18a:	bf00      	nop
    a18c:	0001aa43 	.word	0x0001aa43
    a190:	0001a76e 	.word	0x0001a76e

0000a194 <sc_clear>:
{
    a194:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    a196:	f100 067c 	add.w	r6, r0, #124	; 0x7c
{
    a19a:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    a19c:	4631      	mov	r1, r6
    a19e:	7a00      	ldrb	r0, [r0, #8]
    a1a0:	f009 fc8e 	bl	13ac0 <bt_addr_le_is_bonded>
    a1a4:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
    a1a6:	4631      	mov	r1, r6
    a1a8:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    a1aa:	b14d      	cbz	r5, a1c0 <sc_clear+0x2c>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
    a1ac:	f7ff ffc4 	bl	a138 <bt_gatt_clear_sc>
		if (err) {
    a1b0:	4602      	mov	r2, r0
    a1b2:	b170      	cbz	r0, a1d2 <sc_clear+0x3e>
}
    a1b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Failed to clear SC %d", err);
    a1b8:	2145      	movs	r1, #69	; 0x45
    a1ba:	4806      	ldr	r0, [pc, #24]	; (a1d4 <sc_clear+0x40>)
    a1bc:	f007 bec4 	b.w	11f48 <printk>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
    a1c0:	f7ff fd44 	bl	9c4c <find_sc_cfg>
		if (cfg) {
    a1c4:	b128      	cbz	r0, a1d2 <sc_clear+0x3e>
	memset(cfg, 0, sizeof(*cfg));
    a1c6:	4629      	mov	r1, r5
}
    a1c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
    a1cc:	220c      	movs	r2, #12
    a1ce:	f009 b9fa 	b.w	135c6 <memset>
}
    a1d2:	bd70      	pop	{r4, r5, r6, pc}
    a1d4:	0001a790 	.word	0x0001a790

0000a1d8 <disconnected_cb>:
	if (attr->write != bt_gatt_attr_write_ccc) {
    a1d8:	6882      	ldr	r2, [r0, #8]
    a1da:	4b20      	ldr	r3, [pc, #128]	; (a25c <disconnected_cb+0x84>)
{
    a1dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    a1e0:	429a      	cmp	r2, r3
{
    a1e2:	4606      	mov	r6, r0
    a1e4:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    a1e6:	d102      	bne.n	a1ee <disconnected_cb+0x16>
	ccc = attr->user_data;
    a1e8:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
    a1ea:	8963      	ldrh	r3, [r4, #10]
    a1ec:	b9c3      	cbnz	r3, a220 <disconnected_cb+0x48>
}
    a1ee:	2001      	movs	r0, #1
    a1f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    a1f4:	f105 087c 	add.w	r8, r5, #124	; 0x7c
    a1f8:	4641      	mov	r1, r8
    a1fa:	7a28      	ldrb	r0, [r5, #8]
    a1fc:	f009 fc60 	bl	13ac0 <bt_addr_le_is_bonded>
    a200:	b948      	cbnz	r0, a216 <disconnected_cb+0x3e>
				if (ccc == &sc_ccc) {
    a202:	4b17      	ldr	r3, [pc, #92]	; (a260 <disconnected_cb+0x88>)
    a204:	429c      	cmp	r4, r3
    a206:	d102      	bne.n	a20e <disconnected_cb+0x36>
					sc_clear(conn);
    a208:	4628      	mov	r0, r5
    a20a:	f7ff ffc3 	bl	a194 <sc_clear>
				clear_ccc_cfg(cfg);
    a20e:	4620      	mov	r0, r4
    a210:	f00a fb48 	bl	148a4 <clear_ccc_cfg>
	if (!value_used) {
    a214:	e019      	b.n	a24a <disconnected_cb+0x72>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    a216:	4641      	mov	r1, r8
    a218:	4638      	mov	r0, r7
    a21a:	f00a fb40 	bl	1489e <bt_addr_le_copy>
	if (!value_used) {
    a21e:	e014      	b.n	a24a <disconnected_cb+0x72>
		if (!cfg->value) {
    a220:	8923      	ldrh	r3, [r4, #8]
    a222:	b193      	cbz	r3, a24a <disconnected_cb+0x72>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    a224:	4627      	mov	r7, r4
    a226:	f817 1b01 	ldrb.w	r1, [r7], #1
    a22a:	4628      	mov	r0, r5
    a22c:	463a      	mov	r2, r7
    a22e:	f009 fd2b 	bl	13c88 <bt_conn_is_peer_addr_le>
    a232:	2800      	cmp	r0, #0
    a234:	d1de      	bne.n	a1f4 <disconnected_cb+0x1c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    a236:	4639      	mov	r1, r7
    a238:	7820      	ldrb	r0, [r4, #0]
    a23a:	f7fd f8df 	bl	73fc <bt_conn_lookup_addr_le>
			if (tmp) {
    a23e:	b120      	cbz	r0, a24a <disconnected_cb+0x72>
				if (tmp->state == BT_CONN_CONNECTED) {
    a240:	7b45      	ldrb	r5, [r0, #13]
				bt_conn_unref(tmp);
    a242:	f009 fd48 	bl	13cd6 <bt_conn_unref>
	if (!value_used) {
    a246:	2d07      	cmp	r5, #7
    a248:	d0d1      	beq.n	a1ee <disconnected_cb+0x16>
		ccc->value = 0U;
    a24a:	2100      	movs	r1, #0
		if (ccc->cfg_changed) {
    a24c:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
    a24e:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
    a250:	2b00      	cmp	r3, #0
    a252:	d0cc      	beq.n	a1ee <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
    a254:	4630      	mov	r0, r6
    a256:	4798      	blx	r3
    a258:	e7c9      	b.n	a1ee <disconnected_cb+0x16>
    a25a:	bf00      	nop
    a25c:	00009af5 	.word	0x00009af5
    a260:	2000026c 	.word	0x2000026c

0000a264 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    a264:	2201      	movs	r2, #1
{
    a266:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a268:	4b20      	ldr	r3, [pc, #128]	; (a2ec <bt_gatt_init+0x88>)
    a26a:	e8d3 1fef 	ldaex	r1, [r3]
    a26e:	2900      	cmp	r1, #0
    a270:	d103      	bne.n	a27a <bt_gatt_init+0x16>
    a272:	e8c3 2fe0 	stlex	r0, r2, [r3]
    a276:	2800      	cmp	r0, #0
    a278:	d1f7      	bne.n	a26a <bt_gatt_init+0x6>
	if (!atomic_cas(&init, 0, 1)) {
    a27a:	d032      	beq.n	a2e2 <bt_gatt_init+0x7e>
}
    a27c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		last_static_handle += svc->attr_count;
    a27e:	4a1c      	ldr	r2, [pc, #112]	; (a2f0 <bt_gatt_init+0x8c>)
    a280:	6863      	ldr	r3, [r4, #4]
    a282:	8811      	ldrh	r1, [r2, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    a284:	3408      	adds	r4, #8
		last_static_handle += svc->attr_count;
    a286:	440b      	add	r3, r1
    a288:	8013      	strh	r3, [r2, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    a28a:	42ac      	cmp	r4, r5
    a28c:	d90e      	bls.n	a2ac <bt_gatt_init+0x48>
    a28e:	4919      	ldr	r1, [pc, #100]	; (a2f4 <bt_gatt_init+0x90>)
    a290:	f44f 7375 	mov.w	r3, #980	; 0x3d4
    a294:	4632      	mov	r2, r6
    a296:	4818      	ldr	r0, [pc, #96]	; (a2f8 <bt_gatt_init+0x94>)
    a298:	f007 fe56 	bl	11f48 <printk>
    a29c:	4817      	ldr	r0, [pc, #92]	; (a2fc <bt_gatt_init+0x98>)
    a29e:	f007 fe53 	bl	11f48 <printk>
    a2a2:	f44f 7175 	mov.w	r1, #980	; 0x3d4
    a2a6:	4630      	mov	r0, r6
    a2a8:	f008 f8e4 	bl	12474 <assert_post_action>
    a2ac:	42bc      	cmp	r4, r7
    a2ae:	d3e6      	bcc.n	a27e <bt_gatt_init+0x1a>
	k_delayed_work_init(&db_hash_work, db_hash_process);
    a2b0:	4913      	ldr	r1, [pc, #76]	; (a300 <bt_gatt_init+0x9c>)
    a2b2:	4814      	ldr	r0, [pc, #80]	; (a304 <bt_gatt_init+0xa0>)
    a2b4:	f00c fa4f 	bl	16756 <k_delayed_work_init>
    a2b8:	2300      	movs	r3, #0
    a2ba:	f44f 72a4 	mov.w	r2, #328	; 0x148
    a2be:	4911      	ldr	r1, [pc, #68]	; (a304 <bt_gatt_init+0xa0>)
    a2c0:	4811      	ldr	r0, [pc, #68]	; (a308 <bt_gatt_init+0xa4>)
    a2c2:	f006 fe21 	bl	10f08 <k_delayed_work_submit_to_queue>
		k_delayed_work_init(&gatt_sc.work, sc_process);
    a2c6:	4911      	ldr	r1, [pc, #68]	; (a30c <bt_gatt_init+0xa8>)
    a2c8:	4811      	ldr	r0, [pc, #68]	; (a310 <bt_gatt_init+0xac>)
    a2ca:	f00c fa44 	bl	16756 <k_delayed_work_init>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a2ce:	4b11      	ldr	r3, [pc, #68]	; (a314 <bt_gatt_init+0xb0>)
    a2d0:	e8d3 2fef 	ldaex	r2, [r3]
    a2d4:	f042 0202 	orr.w	r2, r2, #2
    a2d8:	e8c3 2fe1 	stlex	r1, r2, [r3]
    a2dc:	2900      	cmp	r1, #0
    a2de:	d0cd      	beq.n	a27c <bt_gatt_init+0x18>
    a2e0:	e7f6      	b.n	a2d0 <bt_gatt_init+0x6c>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    a2e2:	4d0d      	ldr	r5, [pc, #52]	; (a318 <bt_gatt_init+0xb4>)
    a2e4:	4c0d      	ldr	r4, [pc, #52]	; (a31c <bt_gatt_init+0xb8>)
    a2e6:	462f      	mov	r7, r5
    a2e8:	4e0d      	ldr	r6, [pc, #52]	; (a320 <bt_gatt_init+0xbc>)
    a2ea:	e7ce      	b.n	a28a <bt_gatt_init+0x26>
    a2ec:	20000fc4 	.word	0x20000fc4
    a2f0:	20001e68 	.word	0x20001e68
    a2f4:	0001a5ea 	.word	0x0001a5ea
    a2f8:	00017b50 	.word	0x00017b50
    a2fc:	00017b6d 	.word	0x00017b6d
    a300:	00014c25 	.word	0x00014c25
    a304:	20000f68 	.word	0x20000f68
    a308:	20001dc8 	.word	0x20001dc8
    a30c:	0000a78d 	.word	0x0000a78d
    a310:	20000fa0 	.word	0x20000fa0
    a314:	20000fc0 	.word	0x20000fc0
    a318:	00016b58 	.word	0x00016b58
    a31c:	00016b48 	.word	0x00016b48
    a320:	0001a5b3 	.word	0x0001a5b3

0000a324 <bt_gatt_attr_value_handle>:
{
    a324:	b508      	push	{r3, lr}
	if ((attr != NULL)
    a326:	b180      	cbz	r0, a34a <bt_gatt_attr_value_handle+0x26>
	    && (attr->read == bt_gatt_attr_read_chrc)) {
    a328:	6841      	ldr	r1, [r0, #4]
    a32a:	4b09      	ldr	r3, [pc, #36]	; (a350 <bt_gatt_attr_value_handle+0x2c>)
    a32c:	4299      	cmp	r1, r3
    a32e:	d10c      	bne.n	a34a <bt_gatt_attr_value_handle+0x26>
		handle = chrc->value_handle;
    a330:	68c3      	ldr	r3, [r0, #12]
    a332:	889b      	ldrh	r3, [r3, #4]
		if (handle == 0) {
    a334:	b91b      	cbnz	r3, a33e <bt_gatt_attr_value_handle+0x1a>
			handle = (attr->handle ? : find_static_attr(attr)) + 1U;
    a336:	8a03      	ldrh	r3, [r0, #16]
    a338:	b11b      	cbz	r3, a342 <bt_gatt_attr_value_handle+0x1e>
    a33a:	3301      	adds	r3, #1
    a33c:	b29b      	uxth	r3, r3
}
    a33e:	4618      	mov	r0, r3
    a340:	bd08      	pop	{r3, pc}
			handle = (attr->handle ? : find_static_attr(attr)) + 1U;
    a342:	f7ff fa9b 	bl	987c <find_static_attr>
    a346:	1c43      	adds	r3, r0, #1
    a348:	e7f8      	b.n	a33c <bt_gatt_attr_value_handle+0x18>
	u16_t handle = 0;
    a34a:	2300      	movs	r3, #0
    a34c:	e7f7      	b.n	a33e <bt_gatt_attr_value_handle+0x1a>
    a34e:	bf00      	nop
    a350:	00014bad 	.word	0x00014bad

0000a354 <bt_gatt_foreach_attr_type>:
{
    a354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a358:	b089      	sub	sp, #36	; 0x24
    a35a:	9300      	str	r3, [sp, #0]
		num_matches = UINT16_MAX;
    a35c:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
    a360:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48
    a364:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
    a366:	2d00      	cmp	r5, #0
    a368:	bf08      	it	eq
    a36a:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    a36c:	4b2f      	ldr	r3, [pc, #188]	; (a42c <bt_gatt_foreach_attr_type+0xd8>)
{
    a36e:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
    a370:	881b      	ldrh	r3, [r3, #0]
{
    a372:	9101      	str	r1, [sp, #4]
	if (start_handle <= last_static_handle) {
    a374:	4283      	cmp	r3, r0
    a376:	d34d      	bcc.n	a414 <bt_gatt_foreach_attr_type+0xc0>
		u16_t handle = 1;
    a378:	2401      	movs	r4, #1
    a37a:	4e2d      	ldr	r6, [pc, #180]	; (a430 <bt_gatt_foreach_attr_type+0xdc>)
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    a37c:	f8df a0c0 	ldr.w	sl, [pc, #192]	; a440 <bt_gatt_foreach_attr_type+0xec>
    a380:	f8df b0c0 	ldr.w	fp, [pc, #192]	; a444 <bt_gatt_foreach_attr_type+0xf0>
    a384:	f1a6 0908 	sub.w	r9, r6, #8
    a388:	45d1      	cmp	r9, sl
    a38a:	d90e      	bls.n	a3aa <bt_gatt_foreach_attr_type+0x56>
    a38c:	4929      	ldr	r1, [pc, #164]	; (a434 <bt_gatt_foreach_attr_type+0xe0>)
    a38e:	f240 5356 	movw	r3, #1366	; 0x556
    a392:	465a      	mov	r2, fp
    a394:	4828      	ldr	r0, [pc, #160]	; (a438 <bt_gatt_foreach_attr_type+0xe4>)
    a396:	f007 fdd7 	bl	11f48 <printk>
    a39a:	4828      	ldr	r0, [pc, #160]	; (a43c <bt_gatt_foreach_attr_type+0xe8>)
    a39c:	f007 fdd4 	bl	11f48 <printk>
    a3a0:	f240 5156 	movw	r1, #1366	; 0x556
    a3a4:	4658      	mov	r0, fp
    a3a6:	f008 f865 	bl	12474 <assert_post_action>
    a3aa:	4b25      	ldr	r3, [pc, #148]	; (a440 <bt_gatt_foreach_attr_type+0xec>)
    a3ac:	4599      	cmp	r9, r3
    a3ae:	d231      	bcs.n	a414 <bt_gatt_foreach_attr_type+0xc0>
			if (handle + static_svc->attr_count < start_handle) {
    a3b0:	f856 3c04 	ldr.w	r3, [r6, #-4]
    a3b4:	4423      	add	r3, r4
    a3b6:	42bb      	cmp	r3, r7
    a3b8:	d234      	bcs.n	a424 <bt_gatt_foreach_attr_type+0xd0>
				handle += static_svc->attr_count;
    a3ba:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    a3bc:	3608      	adds	r6, #8
    a3be:	e7e1      	b.n	a384 <bt_gatt_foreach_attr_type+0x30>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    a3c0:	4640      	mov	r0, r8
    a3c2:	9903      	ldr	r1, [sp, #12]
    a3c4:	f009 f96f 	bl	136a6 <bt_uuid_cmp>
    a3c8:	b1c8      	cbz	r0, a3fe <bt_gatt_foreach_attr_type+0xaa>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    a3ca:	3401      	adds	r4, #1
    a3cc:	f109 0901 	add.w	r9, r9, #1
    a3d0:	b2a4      	uxth	r4, r4
    a3d2:	f856 3c04 	ldr.w	r3, [r6, #-4]
    a3d6:	454b      	cmp	r3, r9
    a3d8:	d9f0      	bls.n	a3bc <bt_gatt_foreach_attr_type+0x68>
				memcpy(&attr, &static_svc->attrs[i],
    a3da:	2214      	movs	r2, #20
    a3dc:	f856 1c08 	ldr.w	r1, [r6, #-8]
    a3e0:	a803      	add	r0, sp, #12
    a3e2:	fb02 1109 	mla	r1, r2, r9, r1
    a3e6:	f009 f8c3 	bl	13570 <memcpy>
	if (attr->handle > end_handle) {
    a3ea:	9b01      	ldr	r3, [sp, #4]
				attr.handle = handle;
    a3ec:	f8ad 401c 	strh.w	r4, [sp, #28]
	if (attr->handle > end_handle) {
    a3f0:	429c      	cmp	r4, r3
    a3f2:	d80f      	bhi.n	a414 <bt_gatt_foreach_attr_type+0xc0>
	if (attr->handle < start_handle) {
    a3f4:	42bc      	cmp	r4, r7
    a3f6:	d3e8      	bcc.n	a3ca <bt_gatt_foreach_attr_type+0x76>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    a3f8:	f1b8 0f00 	cmp.w	r8, #0
    a3fc:	d1e0      	bne.n	a3c0 <bt_gatt_foreach_attr_type+0x6c>
	if (attr_data && attr_data != attr->user_data) {
    a3fe:	9b00      	ldr	r3, [sp, #0]
    a400:	b95b      	cbnz	r3, a41a <bt_gatt_foreach_attr_type+0xc6>
	*num_matches -= 1;
    a402:	3d01      	subs	r5, #1
    a404:	b2ad      	uxth	r5, r5
	result = func(attr, user_data);
    a406:	9914      	ldr	r1, [sp, #80]	; 0x50
    a408:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    a40a:	a803      	add	r0, sp, #12
    a40c:	4798      	blx	r3
	if (!*num_matches) {
    a40e:	b10d      	cbz	r5, a414 <bt_gatt_foreach_attr_type+0xc0>
				if (gatt_foreach_iter(&attr, start_handle,
    a410:	2800      	cmp	r0, #0
    a412:	d1da      	bne.n	a3ca <bt_gatt_foreach_attr_type+0x76>
}
    a414:	b009      	add	sp, #36	; 0x24
    a416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr_data && attr_data != attr->user_data) {
    a41a:	9b06      	ldr	r3, [sp, #24]
    a41c:	9a00      	ldr	r2, [sp, #0]
    a41e:	429a      	cmp	r2, r3
    a420:	d1d3      	bne.n	a3ca <bt_gatt_foreach_attr_type+0x76>
    a422:	e7ee      	b.n	a402 <bt_gatt_foreach_attr_type+0xae>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    a424:	f04f 0900 	mov.w	r9, #0
    a428:	e7d3      	b.n	a3d2 <bt_gatt_foreach_attr_type+0x7e>
    a42a:	bf00      	nop
    a42c:	20001e68 	.word	0x20001e68
    a430:	00016b50 	.word	0x00016b50
    a434:	0001a5e3 	.word	0x0001a5e3
    a438:	00017b50 	.word	0x00017b50
    a43c:	00017b6d 	.word	0x00017b6d
    a440:	00016b58 	.word	0x00016b58
    a444:	0001a5b3 	.word	0x0001a5b3

0000a448 <db_hash_gen>:
{
    a448:	b530      	push	{r4, r5, lr}
	u8_t key[16] = {};
    a44a:	2400      	movs	r4, #0
{
    a44c:	b0c9      	sub	sp, #292	; 0x124
    a44e:	4605      	mov	r5, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    a450:	4669      	mov	r1, sp
    a452:	aa1c      	add	r2, sp, #112	; 0x70
    a454:	a804      	add	r0, sp, #16
	u8_t key[16] = {};
    a456:	e9cd 4400 	strd	r4, r4, [sp]
    a45a:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    a45e:	f008 fcb9 	bl	12dd4 <tc_cmac_setup>
    a462:	b928      	cbnz	r0, a470 <db_hash_gen+0x28>
		BT_ERR("Unable to setup AES CMAC");
    a464:	2145      	movs	r1, #69	; 0x45
    a466:	4812      	ldr	r0, [pc, #72]	; (a4b0 <db_hash_gen+0x68>)
		BT_ERR("Unable to calculate hash");
    a468:	f007 fd6e 	bl	11f48 <printk>
}
    a46c:	b049      	add	sp, #292	; 0x124
    a46e:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    a470:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a474:	2001      	movs	r0, #1
    a476:	4a0f      	ldr	r2, [pc, #60]	; (a4b4 <db_hash_gen+0x6c>)
    a478:	ab04      	add	r3, sp, #16
    a47a:	f00a fbc8 	bl	14c0e <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    a47e:	480e      	ldr	r0, [pc, #56]	; (a4b8 <db_hash_gen+0x70>)
    a480:	a904      	add	r1, sp, #16
    a482:	f008 fd3e 	bl	12f02 <tc_cmac_final>
    a486:	b910      	cbnz	r0, a48e <db_hash_gen+0x46>
		BT_ERR("Unable to calculate hash");
    a488:	2145      	movs	r1, #69	; 0x45
    a48a:	480c      	ldr	r0, [pc, #48]	; (a4bc <db_hash_gen+0x74>)
    a48c:	e7ec      	b.n	a468 <db_hash_gen+0x20>
    a48e:	4b0a      	ldr	r3, [pc, #40]	; (a4b8 <db_hash_gen+0x70>)
    a490:	f103 0210 	add.w	r2, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		u8_t tmp = ((u8_t *)buf)[i];
    a494:	7819      	ldrb	r1, [r3, #0]

		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    a496:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
    a49a:	3401      	adds	r4, #1
    a49c:	2c08      	cmp	r4, #8
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    a49e:	f803 0b01 	strb.w	r0, [r3], #1
		((u8_t *)buf)[length - 1 - i] = tmp;
    a4a2:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
    a4a4:	d1f6      	bne.n	a494 <db_hash_gen+0x4c>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
    a4a6:	2d00      	cmp	r5, #0
    a4a8:	d0e0      	beq.n	a46c <db_hash_gen+0x24>
		db_hash_store();
    a4aa:	f7ff f9a9 	bl	9800 <db_hash_store>
    a4ae:	e7dd      	b.n	a46c <db_hash_gen+0x24>
    a4b0:	0001a7ab 	.word	0x0001a7ab
    a4b4:	000147ef 	.word	0x000147ef
    a4b8:	20001f65 	.word	0x20001f65
    a4bc:	0001a7c9 	.word	0x0001a7c9

0000a4c0 <db_hash_commit>:

static int db_hash_commit(void)
{
    a4c0:	b510      	push	{r4, lr}
	int err;

	/* Stop work and generate the hash */
	err = k_delayed_work_cancel(&db_hash_work);
    a4c2:	4823      	ldr	r0, [pc, #140]	; (a550 <db_hash_commit+0x90>)
    a4c4:	f006 fdaa 	bl	1101c <k_delayed_work_cancel>
	if (!err) {
    a4c8:	b908      	cbnz	r0, a4ce <db_hash_commit+0xe>
		db_hash_gen(false);
    a4ca:	f7ff ffbd 	bl	a448 <db_hash_gen>
	}

	/* Check if hash matches then skip SC update */
	if (!memcmp(stored_hash, db_hash, sizeof(stored_hash))) {
    a4ce:	2210      	movs	r2, #16
    a4d0:	4920      	ldr	r1, [pc, #128]	; (a554 <db_hash_commit+0x94>)
    a4d2:	4821      	ldr	r0, [pc, #132]	; (a558 <db_hash_commit+0x98>)
    a4d4:	f009 f83c 	bl	13550 <memcmp>
    a4d8:	b948      	cbnz	r0, a4ee <db_hash_commit+0x2e>
		BT_DBG("Database Hash matches");
		k_delayed_work_cancel(&gatt_sc.work);
    a4da:	4820      	ldr	r0, [pc, #128]	; (a55c <db_hash_commit+0x9c>)
    a4dc:	f006 fd9e 	bl	1101c <k_delayed_work_cancel>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a4e0:	f06f 0101 	mvn.w	r1, #1
    a4e4:	481e      	ldr	r0, [pc, #120]	; (a560 <db_hash_commit+0xa0>)
    a4e6:	f00a f9eb 	bl	148c0 <atomic_and>

	/* Hash did not match overwrite with current hash */
	db_hash_store();

	return 0;
}
    a4ea:	2000      	movs	r0, #0
    a4ec:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a4ee:	491d      	ldr	r1, [pc, #116]	; (a564 <db_hash_commit+0xa4>)
    a4f0:	f101 0338 	add.w	r3, r1, #56	; 0x38
    a4f4:	e8d3 2fef 	ldaex	r2, [r3]
    a4f8:	f042 0001 	orr.w	r0, r2, #1
    a4fc:	e8c3 0fe4 	stlex	r4, r0, [r3]
    a500:	2c00      	cmp	r4, #0
    a502:	d1f7      	bne.n	a4f4 <db_hash_commit+0x34>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    a504:	f012 0f01 	tst.w	r2, #1
    a508:	460a      	mov	r2, r1
    a50a:	d10f      	bne.n	a52c <db_hash_commit+0x6c>
		gatt_sc.start = start;
    a50c:	4a16      	ldr	r2, [pc, #88]	; (a568 <db_hash_commit+0xa8>)
    a50e:	614a      	str	r2, [r1, #20]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a510:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
    a514:	079b      	lsls	r3, r3, #30
    a516:	d406      	bmi.n	a526 <db_hash_commit+0x66>
    a518:	f44f 72a4 	mov.w	r2, #328	; 0x148
    a51c:	2300      	movs	r3, #0
    a51e:	490f      	ldr	r1, [pc, #60]	; (a55c <db_hash_commit+0x9c>)
    a520:	4812      	ldr	r0, [pc, #72]	; (a56c <db_hash_commit+0xac>)
    a522:	f006 fcf1 	bl	10f08 <k_delayed_work_submit_to_queue>
	db_hash_store();
    a526:	f7ff f96b 	bl	9800 <db_hash_store>
	return 0;
    a52a:	e7de      	b.n	a4ea <db_hash_commit+0x2a>
	if (new_start >= *start && new_end <= *end) {
    a52c:	8ac8      	ldrh	r0, [r1, #22]
    a52e:	8a89      	ldrh	r1, [r1, #20]
    a530:	2901      	cmp	r1, #1
    a532:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a536:	d805      	bhi.n	a544 <db_hash_commit+0x84>
    a538:	4288      	cmp	r0, r1
    a53a:	d0f4      	beq.n	a526 <db_hash_commit+0x66>
		*end = new_end;
    a53c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a540:	82d1      	strh	r1, [r2, #22]
    a542:	e7e5      	b.n	a510 <db_hash_commit+0x50>
		*start = new_start;
    a544:	2401      	movs	r4, #1
	if (*end < new_end) {
    a546:	4288      	cmp	r0, r1
		*start = new_start;
    a548:	8294      	strh	r4, [r2, #20]
	if (*end < new_end) {
    a54a:	d0e1      	beq.n	a510 <db_hash_commit+0x50>
    a54c:	e7f6      	b.n	a53c <db_hash_commit+0x7c>
    a54e:	bf00      	nop
    a550:	20000f68 	.word	0x20000f68
    a554:	20001f65 	.word	0x20001f65
    a558:	20001f75 	.word	0x20001f75
    a55c:	20000fa0 	.word	0x20000fa0
    a560:	20000fc0 	.word	0x20000fc0
    a564:	20000f88 	.word	0x20000f88
    a568:	ffff0001 	.word	0xffff0001
    a56c:	20001dc8 	.word	0x20001dc8

0000a570 <ccc_set_direct>:
{
    a570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a574:	b0b9      	sub	sp, #228	; 0xe4
    a576:	4688      	mov	r8, r1
    a578:	4616      	mov	r6, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    a57a:	492c      	ldr	r1, [pc, #176]	; (a62c <ccc_set_direct+0xbc>)
    a57c:	466a      	mov	r2, sp
    a57e:	9840      	ldr	r0, [sp, #256]	; 0x100
{
    a580:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    a582:	f008 f8b4 	bl	126ee <settings_name_steq>
    a586:	b948      	cbnz	r0, a59c <ccc_set_direct+0x2c>
			BT_ERR("Invalid key");
    a588:	2145      	movs	r1, #69	; 0x45
    a58a:	4829      	ldr	r0, [pc, #164]	; (a630 <ccc_set_direct+0xc0>)
    a58c:	f007 fcdc 	bl	11f48 <printk>
    a590:	f06f 0515 	mvn.w	r5, #21
}
    a594:	4628      	mov	r0, r5
    a596:	b039      	add	sp, #228	; 0xe4
    a598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
    a59c:	9c00      	ldr	r4, [sp, #0]
		settings_name_next(name, &next);
    a59e:	a901      	add	r1, sp, #4
    a5a0:	4620      	mov	r0, r4
    a5a2:	f008 f8c7 	bl	12734 <settings_name_next>
		if (!name) {
    a5a6:	b93c      	cbnz	r4, a5b8 <ccc_set_direct+0x48>
			BT_ERR("Insufficient number of arguments");
    a5a8:	2145      	movs	r1, #69	; 0x45
    a5aa:	4822      	ldr	r0, [pc, #136]	; (a634 <ccc_set_direct+0xc4>)
    a5ac:	f007 fccc 	bl	11f48 <printk>
			return -EINVAL;
    a5b0:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
    a5b4:	4625      	mov	r5, r4
    a5b6:	e7ed      	b.n	a594 <ccc_set_direct+0x24>
		} else if (!next) {
    a5b8:	9801      	ldr	r0, [sp, #4]
    a5ba:	b978      	cbnz	r0, a5dc <ccc_set_direct+0x6c>
		err = bt_settings_decode_key(name, &addr);
    a5bc:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = strtol(next, NULL, 10);
    a5c0:	f88d 0014 	strb.w	r0, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
    a5c4:	4649      	mov	r1, r9
    a5c6:	4620      	mov	r0, r4
    a5c8:	f009 f849 	bl	1365e <bt_settings_decode_key>
		if (err) {
    a5cc:	4605      	mov	r5, r0
    a5ce:	b150      	cbz	r0, a5e6 <ccc_set_direct+0x76>
			BT_ERR("Unable to decode address %s", log_strdup(name));
    a5d0:	4622      	mov	r2, r4
    a5d2:	2145      	movs	r1, #69	; 0x45
    a5d4:	4818      	ldr	r0, [pc, #96]	; (a638 <ccc_set_direct+0xc8>)
    a5d6:	f007 fcb7 	bl	11f48 <printk>
    a5da:	e7e9      	b.n	a5b0 <ccc_set_direct+0x40>
			load.addr_with_id.id = strtol(next, NULL, 10);
    a5dc:	220a      	movs	r2, #10
    a5de:	2100      	movs	r1, #0
    a5e0:	f008 ff01 	bl	133e6 <strtol>
    a5e4:	e7ea      	b.n	a5bc <ccc_set_direct+0x4c>
		load.addr_with_id.addr = &addr;
    a5e6:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
    a5ea:	f1b8 0f00 	cmp.w	r8, #0
    a5ee:	d019      	beq.n	a624 <ccc_set_direct+0xb4>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
    a5f0:	f10d 0820 	add.w	r8, sp, #32
    a5f4:	22c0      	movs	r2, #192	; 0xc0
    a5f6:	4641      	mov	r1, r8
    a5f8:	4638      	mov	r0, r7
    a5fa:	47b0      	blx	r6
			if (len < 0) {
    a5fc:	1e04      	subs	r4, r0, #0
    a5fe:	da05      	bge.n	a60c <ccc_set_direct+0x9c>
				BT_ERR("Failed to decode value (err %zd)", len);
    a600:	4622      	mov	r2, r4
    a602:	2145      	movs	r1, #69	; 0x45
    a604:	480d      	ldr	r0, [pc, #52]	; (a63c <ccc_set_direct+0xcc>)
    a606:	f007 fc9f 	bl	11f48 <printk>
				return len;
    a60a:	e7d3      	b.n	a5b4 <ccc_set_direct+0x44>
			load.count = len / sizeof(*ccc_store);
    a60c:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
    a60e:	f8cd 8018 	str.w	r8, [sp, #24]
			load.count = len / sizeof(*ccc_store);
    a612:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
    a614:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a618:	2001      	movs	r0, #1
    a61a:	4a09      	ldr	r2, [pc, #36]	; (a640 <ccc_set_direct+0xd0>)
    a61c:	ab04      	add	r3, sp, #16
    a61e:	f00a faf6 	bl	14c0e <bt_gatt_foreach_attr>
	return 0;
    a622:	e7b7      	b.n	a594 <ccc_set_direct+0x24>
			load.count = 0;
    a624:	e9cd 0006 	strd	r0, r0, [sp, #24]
    a628:	e7f4      	b.n	a614 <ccc_set_direct+0xa4>
    a62a:	bf00      	nop
    a62c:	0001a7e7 	.word	0x0001a7e7
    a630:	0001a7ee 	.word	0x0001a7ee
    a634:	00018ef5 	.word	0x00018ef5
    a638:	0001a6ce 	.word	0x0001a6ce
    a63c:	0001a539 	.word	0x0001a539
    a640:	00009a65 	.word	0x00009a65

0000a644 <bt_gatt_indicate>:
{
    a644:	b5f0      	push	{r4, r5, r6, r7, lr}
    a646:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
    a648:	460e      	mov	r6, r1
{
    a64a:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
    a64c:	b971      	cbnz	r1, a66c <bt_gatt_indicate+0x28>
    a64e:	4947      	ldr	r1, [pc, #284]	; (a76c <bt_gatt_indicate+0x128>)
    a650:	f240 736b 	movw	r3, #1899	; 0x76b
    a654:	4a46      	ldr	r2, [pc, #280]	; (a770 <bt_gatt_indicate+0x12c>)
    a656:	4847      	ldr	r0, [pc, #284]	; (a774 <bt_gatt_indicate+0x130>)
    a658:	f007 fc76 	bl	11f48 <printk>
    a65c:	4846      	ldr	r0, [pc, #280]	; (a778 <bt_gatt_indicate+0x134>)
    a65e:	f007 fc73 	bl	11f48 <printk>
    a662:	f240 716b 	movw	r1, #1899	; 0x76b
    a666:	4842      	ldr	r0, [pc, #264]	; (a770 <bt_gatt_indicate+0x12c>)
    a668:	f007 ff04 	bl	12474 <assert_post_action>
	__ASSERT(params->attr, "invalid parameters\n");
    a66c:	6873      	ldr	r3, [r6, #4]
    a66e:	b973      	cbnz	r3, a68e <bt_gatt_indicate+0x4a>
    a670:	4942      	ldr	r1, [pc, #264]	; (a77c <bt_gatt_indicate+0x138>)
    a672:	f240 736c 	movw	r3, #1900	; 0x76c
    a676:	4a3e      	ldr	r2, [pc, #248]	; (a770 <bt_gatt_indicate+0x12c>)
    a678:	483e      	ldr	r0, [pc, #248]	; (a774 <bt_gatt_indicate+0x130>)
    a67a:	f007 fc65 	bl	11f48 <printk>
    a67e:	483e      	ldr	r0, [pc, #248]	; (a778 <bt_gatt_indicate+0x134>)
    a680:	f007 fc62 	bl	11f48 <printk>
    a684:	f240 716c 	movw	r1, #1900	; 0x76c
    a688:	4839      	ldr	r0, [pc, #228]	; (a770 <bt_gatt_indicate+0x12c>)
    a68a:	f007 fef3 	bl	12474 <assert_post_action>
    a68e:	4b3c      	ldr	r3, [pc, #240]	; (a780 <bt_gatt_indicate+0x13c>)
    a690:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    a694:	079a      	lsls	r2, r3, #30
    a696:	d563      	bpl.n	a760 <bt_gatt_indicate+0x11c>
	attr = params->attr;
    a698:	6870      	ldr	r0, [r6, #4]
    a69a:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    a69c:	b115      	cbz	r5, a6a4 <bt_gatt_indicate+0x60>
    a69e:	7b6b      	ldrb	r3, [r5, #13]
    a6a0:	2b07      	cmp	r3, #7
    a6a2:	d160      	bne.n	a766 <bt_gatt_indicate+0x122>
	handle = attr->handle ? : find_static_attr(attr);
    a6a4:	8a04      	ldrh	r4, [r0, #16]
    a6a6:	b93c      	cbnz	r4, a6b8 <bt_gatt_indicate+0x74>
    a6a8:	f7ff f8e8 	bl	987c <find_static_attr>
	if (!handle) {
    a6ac:	4604      	mov	r4, r0
    a6ae:	b918      	cbnz	r0, a6b8 <bt_gatt_indicate+0x74>
		return -ENOENT;
    a6b0:	f06f 0001 	mvn.w	r0, #1
}
    a6b4:	b00b      	add	sp, #44	; 0x2c
    a6b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (params->uuid) {
    a6b8:	6832      	ldr	r2, [r6, #0]
    a6ba:	b1b2      	cbz	r2, a6ea <bt_gatt_indicate+0xa6>
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    a6bc:	a905      	add	r1, sp, #20
    a6be:	9102      	str	r1, [sp, #8]
    a6c0:	4930      	ldr	r1, [pc, #192]	; (a784 <bt_gatt_indicate+0x140>)
		attr = NULL;
    a6c2:	2300      	movs	r3, #0
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    a6c4:	9101      	str	r1, [sp, #4]
    a6c6:	2101      	movs	r1, #1
    a6c8:	4620      	mov	r0, r4
    a6ca:	9100      	str	r1, [sp, #0]
    a6cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
		attr = NULL;
    a6d0:	9305      	str	r3, [sp, #20]
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    a6d2:	f7ff fe3f 	bl	a354 <bt_gatt_foreach_attr_type>
		if (!attr) {
    a6d6:	9805      	ldr	r0, [sp, #20]
    a6d8:	2800      	cmp	r0, #0
    a6da:	d0e9      	beq.n	a6b0 <bt_gatt_indicate+0x6c>
		handle = attr->handle ? : find_static_attr(attr);
    a6dc:	8a04      	ldrh	r4, [r0, #16]
    a6de:	b924      	cbnz	r4, a6ea <bt_gatt_indicate+0xa6>
    a6e0:	f7ff f8cc 	bl	987c <find_static_attr>
		if (!handle) {
    a6e4:	4604      	mov	r4, r0
    a6e6:	2800      	cmp	r0, #0
    a6e8:	d0e2      	beq.n	a6b0 <bt_gatt_indicate+0x6c>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    a6ea:	9b05      	ldr	r3, [sp, #20]
    a6ec:	af07      	add	r7, sp, #28
    a6ee:	6818      	ldr	r0, [r3, #0]
    a6f0:	2300      	movs	r3, #0
    a6f2:	f88d 301c 	strb.w	r3, [sp, #28]
    a6f6:	f642 0303 	movw	r3, #10243	; 0x2803
    a6fa:	4639      	mov	r1, r7
    a6fc:	f8ad 301e 	strh.w	r3, [sp, #30]
    a700:	f008 ffd1 	bl	136a6 <bt_uuid_cmp>
    a704:	b950      	cbnz	r0, a71c <bt_gatt_indicate+0xd8>
		struct bt_gatt_chrc *chrc = attr->user_data;
    a706:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    a708:	68c3      	ldr	r3, [r0, #12]
    a70a:	799b      	ldrb	r3, [r3, #6]
    a70c:	069b      	lsls	r3, r3, #26
    a70e:	d402      	bmi.n	a716 <bt_gatt_indicate+0xd2>
			return -EINVAL;
    a710:	f06f 0015 	mvn.w	r0, #21
    a714:	e7ce      	b.n	a6b4 <bt_gatt_indicate+0x70>
		handle = bt_gatt_attr_value_handle(attr);
    a716:	f7ff fe05 	bl	a324 <bt_gatt_attr_value_handle>
    a71a:	4604      	mov	r4, r0
	if (conn) {
    a71c:	b12d      	cbz	r5, a72a <bt_gatt_indicate+0xe6>
		return gatt_indicate(conn, handle, params);
    a71e:	4632      	mov	r2, r6
    a720:	4621      	mov	r1, r4
    a722:	4628      	mov	r0, r5
    a724:	f7ff f94c 	bl	99c0 <gatt_indicate>
    a728:	e7c4      	b.n	a6b4 <bt_gatt_indicate+0x70>
	data.err = -ENOTCONN;
    a72a:	f06f 0338 	mvn.w	r3, #56	; 0x38
    a72e:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    a730:	2302      	movs	r3, #2
    a732:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    a736:	f642 1302 	movw	r3, #10498	; 0x2902
    a73a:	f8ad 301a 	strh.w	r3, [sp, #26]
    a73e:	4b12      	ldr	r3, [pc, #72]	; (a788 <bt_gatt_indicate+0x144>)
    a740:	4620      	mov	r0, r4
    a742:	9301      	str	r3, [sp, #4]
    a744:	2301      	movs	r3, #1
    a746:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a74a:	9300      	str	r3, [sp, #0]
    a74c:	9702      	str	r7, [sp, #8]
    a74e:	462b      	mov	r3, r5
    a750:	aa06      	add	r2, sp, #24
	data.ind_params = params;
    a752:	9609      	str	r6, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    a754:	f88d 5018 	strb.w	r5, [sp, #24]
    a758:	f7ff fdfc 	bl	a354 <bt_gatt_foreach_attr_type>
	return data.err;
    a75c:	9807      	ldr	r0, [sp, #28]
    a75e:	e7a9      	b.n	a6b4 <bt_gatt_indicate+0x70>
		return -EAGAIN;
    a760:	f06f 000a 	mvn.w	r0, #10
    a764:	e7a6      	b.n	a6b4 <bt_gatt_indicate+0x70>
		return -ENOTCONN;
    a766:	f06f 0038 	mvn.w	r0, #56	; 0x38
    a76a:	e7a3      	b.n	a6b4 <bt_gatt_indicate+0x70>
    a76c:	0001a7ff 	.word	0x0001a7ff
    a770:	0001a5b3 	.word	0x0001a5b3
    a774:	00017b50 	.word	0x00017b50
    a778:	0001a806 	.word	0x0001a806
    a77c:	0001a81c 	.word	0x0001a81c
    a780:	20000098 	.word	0x20000098
    a784:	00014921 	.word	0x00014921
    a788:	00009d05 	.word	0x00009d05

0000a78c <sc_process>:
{
    a78c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    a78e:	4604      	mov	r4, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
    a790:	f100 0520 	add.w	r5, r0, #32
    a794:	e8d5 3faf 	lda	r3, [r5]
    a798:	079b      	lsls	r3, r3, #30
    a79a:	d50e      	bpl.n	a7ba <sc_process+0x2e>
    a79c:	4919      	ldr	r1, [pc, #100]	; (a804 <sc_process+0x78>)
    a79e:	f44f 7360 	mov.w	r3, #896	; 0x380
    a7a2:	4a19      	ldr	r2, [pc, #100]	; (a808 <sc_process+0x7c>)
    a7a4:	4819      	ldr	r0, [pc, #100]	; (a80c <sc_process+0x80>)
    a7a6:	f007 fbcf 	bl	11f48 <printk>
    a7aa:	4819      	ldr	r0, [pc, #100]	; (a810 <sc_process+0x84>)
    a7ac:	f007 fbcc 	bl	11f48 <printk>
    a7b0:	f44f 7160 	mov.w	r1, #896	; 0x380
    a7b4:	4814      	ldr	r0, [pc, #80]	; (a808 <sc_process+0x7c>)
    a7b6:	f007 fe5d 	bl	12474 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
    a7ba:	f854 3c04 	ldr.w	r3, [r4, #-4]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a7be:	f06f 0101 	mvn.w	r1, #1
    a7c2:	4628      	mov	r0, r5
    a7c4:	9301      	str	r3, [sp, #4]
    a7c6:	f00a f87b 	bl	148c0 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
    a7ca:	4b12      	ldr	r3, [pc, #72]	; (a814 <sc_process+0x88>)
	sc->start = 0U;
    a7cc:	2000      	movs	r0, #0
	sc->params.attr = &_1_gatt_svc.attrs[2];
    a7ce:	f844 3c14 	str.w	r3, [r4, #-20]
	sc->params.func = sc_indicate_rsp;
    a7d2:	4b11      	ldr	r3, [pc, #68]	; (a818 <sc_process+0x8c>)
	sc->start = 0U;
    a7d4:	f824 0c04 	strh.w	r0, [r4, #-4]
	sc->params.func = sc_indicate_rsp;
    a7d8:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.data = &sc_range[0];
    a7dc:	ab01      	add	r3, sp, #4
    a7de:	f844 3c0c 	str.w	r3, [r4, #-12]
	sc->params.len = sizeof(sc_range);
    a7e2:	2304      	movs	r3, #4
	sc->end = 0U;
    a7e4:	f824 0c02 	strh.w	r0, [r4, #-2]
	sc->params.len = sizeof(sc_range);
    a7e8:	f824 3c08 	strh.w	r3, [r4, #-8]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    a7ec:	f1a4 0118 	sub.w	r1, r4, #24
    a7f0:	f7ff ff28 	bl	a644 <bt_gatt_indicate>
    a7f4:	b918      	cbnz	r0, a7fe <sc_process+0x72>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
    a7f6:	2101      	movs	r1, #1
    a7f8:	4628      	mov	r0, r5
    a7fa:	f00a f8bd 	bl	14978 <atomic_set_bit>
}
    a7fe:	b003      	add	sp, #12
    a800:	bd30      	pop	{r4, r5, pc}
    a802:	bf00      	nop
    a804:	0001a829 	.word	0x0001a829
    a808:	0001a5b3 	.word	0x0001a5b3
    a80c:	00017b50 	.word	0x00017b50
    a810:	0001a85a 	.word	0x0001a85a
    a814:	000171e8 	.word	0x000171e8
    a818:	00009fe5 	.word	0x00009fe5

0000a81c <update_ccc>:
	if (attr->write != bt_gatt_attr_write_ccc) {
    a81c:	6882      	ldr	r2, [r0, #8]
    a81e:	4b39      	ldr	r3, [pc, #228]	; (a904 <update_ccc+0xe8>)
{
    a820:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    a824:	429a      	cmp	r2, r3
{
    a826:	4604      	mov	r4, r0
    a828:	460e      	mov	r6, r1
	struct bt_conn *conn = data->conn;
    a82a:	680d      	ldr	r5, [r1, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
    a82c:	d116      	bne.n	a85c <update_ccc+0x40>
	ccc = attr->user_data;
    a82e:	68c7      	ldr	r7, [r0, #12]
		if (!cfg->value ||
    a830:	893b      	ldrh	r3, [r7, #8]
    a832:	b19b      	cbz	r3, a85c <update_ccc+0x40>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    a834:	463a      	mov	r2, r7
    a836:	4628      	mov	r0, r5
    a838:	f812 1b01 	ldrb.w	r1, [r2], #1
    a83c:	f009 fa24 	bl	13c88 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    a840:	b160      	cbz	r0, a85c <update_ccc+0x40>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    a842:	222a      	movs	r2, #42	; 0x2a
    a844:	4621      	mov	r1, r4
    a846:	4628      	mov	r0, r5
    a848:	f00a f9ef 	bl	14c2a <bt_gatt_check_perm>
		if (err) {
    a84c:	b1d8      	cbz	r0, a886 <update_ccc+0x6a>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    a84e:	2803      	cmp	r0, #3
    a850:	d108      	bne.n	a864 <update_ccc+0x48>
				BT_WARN("CCC %p not writable", attr);
    a852:	4622      	mov	r2, r4
    a854:	2157      	movs	r1, #87	; 0x57
    a856:	482c      	ldr	r0, [pc, #176]	; (a908 <update_ccc+0xec>)
    a858:	f007 fb76 	bl	11f48 <printk>
}
    a85c:	2001      	movs	r0, #1
    a85e:	b002      	add	sp, #8
    a860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				sec = BT_SECURITY_L3;
    a864:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
    a866:	4628      	mov	r0, r5
				sec = BT_SECURITY_L3;
    a868:	bf14      	ite	ne
    a86a:	f04f 0802 	movne.w	r8, #2
    a86e:	f04f 0803 	moveq.w	r8, #3
			    bt_conn_get_security(conn) < sec) {
    a872:	f009 fa07 	bl	13c84 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
    a876:	4580      	cmp	r8, r0
    a878:	d905      	bls.n	a886 <update_ccc+0x6a>
				if (data->sec < sec) {
    a87a:	7933      	ldrb	r3, [r6, #4]
    a87c:	4543      	cmp	r3, r8
    a87e:	d2ed      	bcs.n	a85c <update_ccc+0x40>
					data->sec = sec;
    a880:	f886 8004 	strb.w	r8, [r6, #4]
    a884:	e7ea      	b.n	a85c <update_ccc+0x40>
		gatt_ccc_changed(attr, ccc);
    a886:	4639      	mov	r1, r7
    a888:	4620      	mov	r0, r4
    a88a:	f009 ff9b 	bl	147c4 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    a88e:	4b1f      	ldr	r3, [pc, #124]	; (a90c <update_ccc+0xf0>)
    a890:	429f      	cmp	r7, r3
    a892:	d1e3      	bne.n	a85c <update_ccc+0x40>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    a894:	7a28      	ldrb	r0, [r5, #8]
    a896:	f105 017c 	add.w	r1, r5, #124	; 0x7c
    a89a:	f7ff f9d7 	bl	9c4c <find_sc_cfg>
	if (!cfg) {
    a89e:	4604      	mov	r4, r0
    a8a0:	2800      	cmp	r0, #0
    a8a2:	d0db      	beq.n	a85c <update_ccc+0x40>
	if (!(cfg->data.start || cfg->data.end)) {
    a8a4:	8902      	ldrh	r2, [r0, #8]
    a8a6:	8943      	ldrh	r3, [r0, #10]
    a8a8:	ea52 0103 	orrs.w	r1, r2, r3
    a8ac:	d0d6      	beq.n	a85c <update_ccc+0x40>
	index = bt_conn_index(conn);
    a8ae:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    a8b0:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    a8b4:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
    a8b8:	f7fd f85a 	bl	7970 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    a8bc:	2314      	movs	r3, #20
    a8be:	4914      	ldr	r1, [pc, #80]	; (a910 <update_ccc+0xf4>)
    a8c0:	4a14      	ldr	r2, [pc, #80]	; (a914 <update_ccc+0xf8>)
    a8c2:	fb03 1300 	mla	r3, r3, r0, r1
    a8c6:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    a8c8:	4a13      	ldr	r2, [pc, #76]	; (a918 <update_ccc+0xfc>)
    a8ca:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    a8cc:	aa01      	add	r2, sp, #4
    a8ce:	60da      	str	r2, [r3, #12]
	sc_restore_params[index].len = sizeof(sc_range);
    a8d0:	2204      	movs	r2, #4
    a8d2:	821a      	strh	r2, [r3, #16]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    a8d4:	b203      	sxth	r3, r0
    a8d6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    a8da:	4628      	mov	r0, r5
    a8dc:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    a8e0:	f7ff feb0 	bl	a644 <bt_gatt_indicate>
    a8e4:	b118      	cbz	r0, a8ee <update_ccc+0xd2>
		BT_ERR("SC restore indication failed");
    a8e6:	2145      	movs	r1, #69	; 0x45
    a8e8:	480c      	ldr	r0, [pc, #48]	; (a91c <update_ccc+0x100>)
    a8ea:	f007 fb2d 	bl	11f48 <printk>
	memset(&cfg->data, 0, sizeof(cfg->data));
    a8ee:	2204      	movs	r2, #4
    a8f0:	2100      	movs	r1, #0
    a8f2:	f104 0008 	add.w	r0, r4, #8
    a8f6:	f008 fe66 	bl	135c6 <memset>
		sc_store(cfg);
    a8fa:	4620      	mov	r0, r4
    a8fc:	f7fe ff96 	bl	982c <sc_store>
    a900:	e7ac      	b.n	a85c <update_ccc+0x40>
    a902:	bf00      	nop
    a904:	00009af5 	.word	0x00009af5
    a908:	0001a875 	.word	0x0001a875
    a90c:	2000026c 	.word	0x2000026c
    a910:	20000fc8 	.word	0x20000fc8
    a914:	000171e8 	.word	0x000171e8
    a918:	0001498d 	.word	0x0001498d
    a91c:	0001a88e 	.word	0x0001a88e

0000a920 <bt_gatt_discover>:
{
    a920:	b5f0      	push	{r4, r5, r6, r7, lr}
    a922:	460c      	mov	r4, r1
	__ASSERT(conn, "invalid parameters\n");
    a924:	4605      	mov	r5, r0
{
    a926:	b085      	sub	sp, #20
	__ASSERT(conn, "invalid parameters\n");
    a928:	b970      	cbnz	r0, a948 <bt_gatt_discover+0x28>
    a92a:	4990      	ldr	r1, [pc, #576]	; (ab6c <bt_gatt_discover+0x24c>)
    a92c:	f640 431f 	movw	r3, #3103	; 0xc1f
    a930:	4a8f      	ldr	r2, [pc, #572]	; (ab70 <bt_gatt_discover+0x250>)
    a932:	4890      	ldr	r0, [pc, #576]	; (ab74 <bt_gatt_discover+0x254>)
    a934:	f007 fb08 	bl	11f48 <printk>
    a938:	488f      	ldr	r0, [pc, #572]	; (ab78 <bt_gatt_discover+0x258>)
    a93a:	f007 fb05 	bl	11f48 <printk>
    a93e:	f640 411f 	movw	r1, #3103	; 0xc1f
    a942:	488b      	ldr	r0, [pc, #556]	; (ab70 <bt_gatt_discover+0x250>)
    a944:	f007 fd96 	bl	12474 <assert_post_action>
	__ASSERT(params && params->func, "invalid parameters\n");
    a948:	b10c      	cbz	r4, a94e <bt_gatt_discover+0x2e>
    a94a:	6863      	ldr	r3, [r4, #4]
    a94c:	b973      	cbnz	r3, a96c <bt_gatt_discover+0x4c>
    a94e:	498b      	ldr	r1, [pc, #556]	; (ab7c <bt_gatt_discover+0x25c>)
    a950:	f44f 6342 	mov.w	r3, #3104	; 0xc20
    a954:	4a86      	ldr	r2, [pc, #536]	; (ab70 <bt_gatt_discover+0x250>)
    a956:	4887      	ldr	r0, [pc, #540]	; (ab74 <bt_gatt_discover+0x254>)
    a958:	f007 faf6 	bl	11f48 <printk>
    a95c:	4886      	ldr	r0, [pc, #536]	; (ab78 <bt_gatt_discover+0x258>)
    a95e:	f007 faf3 	bl	11f48 <printk>
    a962:	f44f 6142 	mov.w	r1, #3104	; 0xc20
    a966:	4882      	ldr	r0, [pc, #520]	; (ab70 <bt_gatt_discover+0x250>)
    a968:	f007 fd84 	bl	12474 <assert_post_action>
	__ASSERT((params->start_handle && params->end_handle),
    a96c:	8923      	ldrh	r3, [r4, #8]
    a96e:	b10b      	cbz	r3, a974 <bt_gatt_discover+0x54>
    a970:	89e3      	ldrh	r3, [r4, #14]
    a972:	b973      	cbnz	r3, a992 <bt_gatt_discover+0x72>
    a974:	4982      	ldr	r1, [pc, #520]	; (ab80 <bt_gatt_discover+0x260>)
    a976:	f640 4321 	movw	r3, #3105	; 0xc21
    a97a:	4a7d      	ldr	r2, [pc, #500]	; (ab70 <bt_gatt_discover+0x250>)
    a97c:	487d      	ldr	r0, [pc, #500]	; (ab74 <bt_gatt_discover+0x254>)
    a97e:	f007 fae3 	bl	11f48 <printk>
    a982:	487d      	ldr	r0, [pc, #500]	; (ab78 <bt_gatt_discover+0x258>)
    a984:	f007 fae0 	bl	11f48 <printk>
    a988:	f640 4121 	movw	r1, #3105	; 0xc21
    a98c:	4878      	ldr	r0, [pc, #480]	; (ab70 <bt_gatt_discover+0x250>)
    a98e:	f007 fd71 	bl	12474 <assert_post_action>
	__ASSERT((params->start_handle <= params->end_handle),
    a992:	8922      	ldrh	r2, [r4, #8]
    a994:	89e3      	ldrh	r3, [r4, #14]
    a996:	429a      	cmp	r2, r3
    a998:	d90e      	bls.n	a9b8 <bt_gatt_discover+0x98>
    a99a:	497a      	ldr	r1, [pc, #488]	; (ab84 <bt_gatt_discover+0x264>)
    a99c:	f640 4323 	movw	r3, #3107	; 0xc23
    a9a0:	4a73      	ldr	r2, [pc, #460]	; (ab70 <bt_gatt_discover+0x250>)
    a9a2:	4874      	ldr	r0, [pc, #464]	; (ab74 <bt_gatt_discover+0x254>)
    a9a4:	f007 fad0 	bl	11f48 <printk>
    a9a8:	4873      	ldr	r0, [pc, #460]	; (ab78 <bt_gatt_discover+0x258>)
    a9aa:	f007 facd 	bl	11f48 <printk>
    a9ae:	f640 4123 	movw	r1, #3107	; 0xc23
    a9b2:	486f      	ldr	r0, [pc, #444]	; (ab70 <bt_gatt_discover+0x250>)
    a9b4:	f007 fd5e 	bl	12474 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
    a9b8:	7b6b      	ldrb	r3, [r5, #13]
    a9ba:	2b07      	cmp	r3, #7
    a9bc:	f040 80d3 	bne.w	ab66 <bt_gatt_discover+0x246>
	switch (params->type) {
    a9c0:	7c22      	ldrb	r2, [r4, #16]
    a9c2:	2a05      	cmp	r2, #5
    a9c4:	f200 80ca 	bhi.w	ab5c <bt_gatt_discover+0x23c>
    a9c8:	e8df f002 	tbb	[pc, r2]
    a9cc:	62620303 	.word	0x62620303
    a9d0:	b481      	.short	0xb481
		if (params->uuid) {
    a9d2:	6823      	ldr	r3, [r4, #0]
    a9d4:	2b00      	cmp	r3, #0
    a9d6:	d03c      	beq.n	aa52 <bt_gatt_discover+0x132>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_REQ, sizeof(*req));
    a9d8:	2206      	movs	r2, #6
    a9da:	4628      	mov	r0, r5
    a9dc:	4611      	mov	r1, r2
    a9de:	f7fe f8a7 	bl	8b30 <bt_att_create_pdu>
	if (!buf) {
    a9e2:	4606      	mov	r6, r0
    a9e4:	b918      	cbnz	r0, a9ee <bt_gatt_discover+0xce>
		return -ENOMEM;
    a9e6:	f06f 000b 	mvn.w	r0, #11
}
    a9ea:	b005      	add	sp, #20
    a9ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	req = net_buf_add(buf, sizeof(*req));
    a9ee:	f100 0708 	add.w	r7, r0, #8
    a9f2:	2106      	movs	r1, #6
    a9f4:	4638      	mov	r0, r7
    a9f6:	f002 fe23 	bl	d640 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    a9fa:	8923      	ldrh	r3, [r4, #8]
	switch (params->uuid->type) {
    a9fc:	6821      	ldr	r1, [r4, #0]
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    a9fe:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    aa00:	89e3      	ldrh	r3, [r4, #14]
    aa02:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
    aa04:	7c23      	ldrb	r3, [r4, #16]
		uuid_val = BT_UUID_16(BT_UUID_GATT_SECONDARY)->val;
    aa06:	2b00      	cmp	r3, #0
	req->type = sys_cpu_to_le16(uuid_val);
    aa08:	f642 0301 	movw	r3, #10241	; 0x2801
    aa0c:	bf08      	it	eq
    aa0e:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
    aa12:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
    aa14:	780a      	ldrb	r2, [r1, #0]
    aa16:	b15a      	cbz	r2, aa30 <bt_gatt_discover+0x110>
    aa18:	2a02      	cmp	r2, #2
    aa1a:	d014      	beq.n	aa46 <bt_gatt_discover+0x126>
		BT_ERR("Unknown UUID type %u", params->uuid->type);
    aa1c:	485a      	ldr	r0, [pc, #360]	; (ab88 <bt_gatt_discover+0x268>)
    aa1e:	2145      	movs	r1, #69	; 0x45
    aa20:	f007 fa92 	bl	11f48 <printk>
		net_buf_unref(buf);
    aa24:	4630      	mov	r0, r6
    aa26:	f002 fc99 	bl	d35c <net_buf_unref>
	return -EINVAL;
    aa2a:	f06f 0015 	mvn.w	r0, #21
    aa2e:	e7dc      	b.n	a9ea <bt_gatt_discover+0xca>
		net_buf_add_le16(buf, BT_UUID_16(params->uuid)->val);
    aa30:	4638      	mov	r0, r7
    aa32:	8849      	ldrh	r1, [r1, #2]
    aa34:	f00a fe1b 	bl	1566e <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_find_type_rsp, params, NULL);
    aa38:	4623      	mov	r3, r4
    aa3a:	4a54      	ldr	r2, [pc, #336]	; (ab8c <bt_gatt_discover+0x26c>)
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
    aa3c:	4631      	mov	r1, r6
    aa3e:	4628      	mov	r0, r5
    aa40:	f7fe ff8c 	bl	995c <gatt_send.constprop.0>
    aa44:	e7d1      	b.n	a9ea <bt_gatt_discover+0xca>
		net_buf_add_mem(buf, BT_UUID_128(params->uuid)->val, 16);
    aa46:	2210      	movs	r2, #16
    aa48:	4638      	mov	r0, r7
    aa4a:	3101      	adds	r1, #1
    aa4c:	f00a fdfc 	bl	15648 <net_buf_simple_add_mem>
		break;
    aa50:	e7f2      	b.n	aa38 <bt_gatt_discover+0x118>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_REQ, sizeof(*req));
    aa52:	2204      	movs	r2, #4
    aa54:	2110      	movs	r1, #16
    aa56:	4628      	mov	r0, r5
    aa58:	f7fe f86a 	bl	8b30 <bt_att_create_pdu>
	if (!buf) {
    aa5c:	4606      	mov	r6, r0
    aa5e:	2800      	cmp	r0, #0
    aa60:	d0c1      	beq.n	a9e6 <bt_gatt_discover+0xc6>
	req = net_buf_add(buf, sizeof(*req));
    aa62:	f100 0708 	add.w	r7, r0, #8
    aa66:	2104      	movs	r1, #4
    aa68:	4638      	mov	r0, r7
    aa6a:	f002 fde9 	bl	d640 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    aa6e:	8923      	ldrh	r3, [r4, #8]
    aa70:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    aa72:	89e3      	ldrh	r3, [r4, #14]
    aa74:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
    aa76:	7c23      	ldrb	r3, [r4, #16]
    aa78:	b93b      	cbnz	r3, aa8a <bt_gatt_discover+0x16a>
		net_buf_add_le16(buf, BT_UUID_16(BT_UUID_GATT_PRIMARY)->val);
    aa7a:	f44f 5120 	mov.w	r1, #10240	; 0x2800
		net_buf_add_le16(buf, BT_UUID_16(BT_UUID_GATT_SECONDARY)->val);
    aa7e:	4638      	mov	r0, r7
    aa80:	f00a fdf5 	bl	1566e <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_group_rsp, params, NULL);
    aa84:	4623      	mov	r3, r4
    aa86:	4a42      	ldr	r2, [pc, #264]	; (ab90 <bt_gatt_discover+0x270>)
    aa88:	e7d8      	b.n	aa3c <bt_gatt_discover+0x11c>
		net_buf_add_le16(buf, BT_UUID_16(BT_UUID_GATT_SECONDARY)->val);
    aa8a:	f642 0101 	movw	r1, #10241	; 0x2801
    aa8e:	e7f6      	b.n	aa7e <bt_gatt_discover+0x15e>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_REQ, sizeof(*req));
    aa90:	2204      	movs	r2, #4
    aa92:	2108      	movs	r1, #8
    aa94:	4628      	mov	r0, r5
    aa96:	f7fe f84b 	bl	8b30 <bt_att_create_pdu>
	if (!buf) {
    aa9a:	4606      	mov	r6, r0
    aa9c:	2800      	cmp	r0, #0
    aa9e:	d0a2      	beq.n	a9e6 <bt_gatt_discover+0xc6>
	req = net_buf_add(buf, sizeof(*req));
    aaa0:	f100 0708 	add.w	r7, r0, #8
    aaa4:	2104      	movs	r1, #4
    aaa6:	4638      	mov	r0, r7
    aaa8:	f002 fdca 	bl	d640 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    aaac:	8923      	ldrh	r3, [r4, #8]
    aaae:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    aab0:	89e3      	ldrh	r3, [r4, #14]
    aab2:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
    aab4:	7c23      	ldrb	r3, [r4, #16]
		net_buf_add_le16(buf, BT_UUID_16(BT_UUID_GATT_CHRC)->val);
    aab6:	4638      	mov	r0, r7
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
    aab8:	2b02      	cmp	r3, #2
		net_buf_add_le16(buf, BT_UUID_16(BT_UUID_GATT_INCLUDE)->val);
    aaba:	bf0c      	ite	eq
    aabc:	f642 0102 	movweq	r1, #10242	; 0x2802
		net_buf_add_le16(buf, BT_UUID_16(BT_UUID_GATT_CHRC)->val);
    aac0:	f642 0103 	movwne	r1, #10243	; 0x2803
    aac4:	f00a fdd3 	bl	1566e <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_type_rsp, params, NULL);
    aac8:	4623      	mov	r3, r4
    aaca:	4a32      	ldr	r2, [pc, #200]	; (ab94 <bt_gatt_discover+0x274>)
    aacc:	e7b6      	b.n	aa3c <bt_gatt_discover+0x11c>
		if (params->uuid &&
    aace:	6820      	ldr	r0, [r4, #0]
    aad0:	b380      	cbz	r0, ab34 <bt_gatt_discover+0x214>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
    aad2:	2600      	movs	r6, #0
    aad4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    aad8:	4669      	mov	r1, sp
    aada:	f88d 6000 	strb.w	r6, [sp]
    aade:	f8ad 3002 	strh.w	r3, [sp, #2]
    aae2:	f008 fde0 	bl	136a6 <bt_uuid_cmp>
		if (params->uuid &&
    aae6:	2800      	cmp	r0, #0
    aae8:	d09f      	beq.n	aa2a <bt_gatt_discover+0x10a>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
    aaea:	f642 0301 	movw	r3, #10241	; 0x2801
    aaee:	6820      	ldr	r0, [r4, #0]
    aaf0:	a901      	add	r1, sp, #4
    aaf2:	f88d 6004 	strb.w	r6, [sp, #4]
    aaf6:	f8ad 3006 	strh.w	r3, [sp, #6]
    aafa:	f008 fdd4 	bl	136a6 <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
    aafe:	2800      	cmp	r0, #0
    ab00:	d093      	beq.n	aa2a <bt_gatt_discover+0x10a>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
    ab02:	f642 0302 	movw	r3, #10242	; 0x2802
    ab06:	6820      	ldr	r0, [r4, #0]
    ab08:	a902      	add	r1, sp, #8
    ab0a:	f88d 6008 	strb.w	r6, [sp, #8]
    ab0e:	f8ad 300a 	strh.w	r3, [sp, #10]
    ab12:	f008 fdc8 	bl	136a6 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
    ab16:	2800      	cmp	r0, #0
    ab18:	d087      	beq.n	aa2a <bt_gatt_discover+0x10a>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
    ab1a:	f642 0303 	movw	r3, #10243	; 0x2803
    ab1e:	6820      	ldr	r0, [r4, #0]
    ab20:	a903      	add	r1, sp, #12
    ab22:	f88d 600c 	strb.w	r6, [sp, #12]
    ab26:	f8ad 300e 	strh.w	r3, [sp, #14]
    ab2a:	f008 fdbc 	bl	136a6 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
    ab2e:	2800      	cmp	r0, #0
    ab30:	f43f af7b 	beq.w	aa2a <bt_gatt_discover+0x10a>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_REQ, sizeof(*req));
    ab34:	2204      	movs	r2, #4
    ab36:	4628      	mov	r0, r5
    ab38:	4611      	mov	r1, r2
    ab3a:	f7fd fff9 	bl	8b30 <bt_att_create_pdu>
	if (!buf) {
    ab3e:	4606      	mov	r6, r0
    ab40:	2800      	cmp	r0, #0
    ab42:	f43f af50 	beq.w	a9e6 <bt_gatt_discover+0xc6>
	req = net_buf_add(buf, sizeof(*req));
    ab46:	2104      	movs	r1, #4
    ab48:	3008      	adds	r0, #8
    ab4a:	f002 fd79 	bl	d640 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    ab4e:	8923      	ldrh	r3, [r4, #8]
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
    ab50:	4a11      	ldr	r2, [pc, #68]	; (ab98 <bt_gatt_discover+0x278>)
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    ab52:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    ab54:	89e3      	ldrh	r3, [r4, #14]
    ab56:	8043      	strh	r3, [r0, #2]
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
    ab58:	4623      	mov	r3, r4
    ab5a:	e76f      	b.n	aa3c <bt_gatt_discover+0x11c>
		BT_ERR("Invalid discovery type: %u", params->type);
    ab5c:	2145      	movs	r1, #69	; 0x45
    ab5e:	480f      	ldr	r0, [pc, #60]	; (ab9c <bt_gatt_discover+0x27c>)
    ab60:	f007 f9f2 	bl	11f48 <printk>
    ab64:	e761      	b.n	aa2a <bt_gatt_discover+0x10a>
		return -ENOTCONN;
    ab66:	f06f 0038 	mvn.w	r0, #56	; 0x38
    ab6a:	e73e      	b.n	a9ea <bt_gatt_discover+0xca>
    ab6c:	00019e2d 	.word	0x00019e2d
    ab70:	0001a5b3 	.word	0x0001a5b3
    ab74:	00017b50 	.word	0x00017b50
    ab78:	0001a806 	.word	0x0001a806
    ab7c:	0001a8c5 	.word	0x0001a8c5
    ab80:	0001a8dc 	.word	0x0001a8dc
    ab84:	0001a909 	.word	0x0001a909
    ab88:	0001a936 	.word	0x0001a936
    ab8c:	00014cbb 	.word	0x00014cbb
    ab90:	0000aba1 	.word	0x0000aba1
    ab94:	0000aca1 	.word	0x0000aca1
    ab98:	0000af61 	.word	0x0000af61
    ab9c:	0001a950 	.word	0x0001a950

0000aba0 <gatt_read_group_rsp>:
{
    aba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aba4:	b08f      	sub	sp, #60	; 0x3c
    aba6:	4681      	mov	r9, r0
    aba8:	4617      	mov	r7, r2
    abaa:	9d18      	ldr	r5, [sp, #96]	; 0x60
	if (err) {
    abac:	b131      	cbz	r1, abbc <gatt_read_group_rsp+0x1c>
		params->func(conn, NULL, params);
    abae:	462a      	mov	r2, r5
    abb0:	2100      	movs	r1, #0
    abb2:	686b      	ldr	r3, [r5, #4]
	params->func(conn, NULL, params);
    abb4:	4798      	blx	r3
}
    abb6:	b00f      	add	sp, #60	; 0x3c
    abb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (rsp->len) {
    abbc:	7812      	ldrb	r2, [r2, #0]
    abbe:	2a06      	cmp	r2, #6
    abc0:	d00a      	beq.n	abd8 <gatt_read_group_rsp+0x38>
    abc2:	2a14      	cmp	r2, #20
    abc4:	d01c      	beq.n	ac00 <gatt_read_group_rsp+0x60>
		BT_ERR("Invalid data len %u", rsp->len);
    abc6:	2145      	movs	r1, #69	; 0x45
    abc8:	4834      	ldr	r0, [pc, #208]	; (ac9c <gatt_read_group_rsp+0xfc>)
    abca:	f007 f9bd 	bl	11f48 <printk>
	params->func(conn, NULL, params);
    abce:	462a      	mov	r2, r5
    abd0:	2100      	movs	r1, #0
    abd2:	4648      	mov	r0, r9
    abd4:	686b      	ldr	r3, [r5, #4]
    abd6:	e7ed      	b.n	abb4 <gatt_read_group_rsp+0x14>
		u.uuid.type = BT_UUID_TYPE_16;
    abd8:	f88d 1010 	strb.w	r1, [sp, #16]
	u16_t start_handle, end_handle = 0U;
    abdc:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
    abde:	3b01      	subs	r3, #1
    abe0:	b29c      	uxth	r4, r3
    abe2:	f107 0801 	add.w	r8, r7, #1
    abe6:	783b      	ldrb	r3, [r7, #0]
    abe8:	42a3      	cmp	r3, r4
    abea:	d90d      	bls.n	ac08 <gatt_read_group_rsp+0x68>
	if (length == 0U && end_handle) {
    abec:	2c00      	cmp	r4, #0
    abee:	d1ee      	bne.n	abce <gatt_read_group_rsp+0x2e>
    abf0:	2e00      	cmp	r6, #0
    abf2:	d0ec      	beq.n	abce <gatt_read_group_rsp+0x2e>
	gatt_discover_next(conn, handle, params);
    abf4:	462a      	mov	r2, r5
    abf6:	4631      	mov	r1, r6
    abf8:	4648      	mov	r0, r9
    abfa:	f00a f841 	bl	14c80 <gatt_discover_next>
    abfe:	e7da      	b.n	abb6 <gatt_read_group_rsp+0x16>
		u.uuid.type = BT_UUID_TYPE_128;
    ac00:	2202      	movs	r2, #2
    ac02:	f88d 2010 	strb.w	r2, [sp, #16]
		break;
    ac06:	e7e9      	b.n	abdc <gatt_read_group_rsp+0x3c>
		struct bt_gatt_attr attr = {};
    ac08:	2214      	movs	r2, #20
    ac0a:	2100      	movs	r1, #0
    ac0c:	a809      	add	r0, sp, #36	; 0x24
    ac0e:	f008 fcda 	bl	135c6 <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
    ac12:	f8b8 a000 	ldrh.w	sl, [r8]
    ac16:	fa1f f38a 	uxth.w	r3, sl
		if (!start_handle) {
    ac1a:	2b00      	cmp	r3, #0
    ac1c:	d0d7      	beq.n	abce <gatt_read_group_rsp+0x2e>
		end_handle = sys_le16_to_cpu(data->end_handle);
    ac1e:	f8b8 b002 	ldrh.w	fp, [r8, #2]
    ac22:	fa1f f68b 	uxth.w	r6, fp
		if (!end_handle || end_handle < start_handle) {
    ac26:	2e00      	cmp	r6, #0
    ac28:	d0d1      	beq.n	abce <gatt_read_group_rsp+0x2e>
    ac2a:	42b3      	cmp	r3, r6
    ac2c:	d8cf      	bhi.n	abce <gatt_read_group_rsp+0x2e>
		switch (u.uuid.type) {
    ac2e:	f89d 3010 	ldrb.w	r3, [sp, #16]
    ac32:	b323      	cbz	r3, ac7e <gatt_read_group_rsp+0xde>
    ac34:	2b02      	cmp	r3, #2
    ac36:	d02a      	beq.n	ac8e <gatt_read_group_rsp+0xee>
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
    ac38:	f04f 0300 	mov.w	r3, #0
    ac3c:	f88d 3004 	strb.w	r3, [sp, #4]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
    ac40:	7c2b      	ldrb	r3, [r5, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    ac42:	462a      	mov	r2, r5
			uuid_svc.val = BT_UUID_16(BT_UUID_GATT_SECONDARY)->val;
    ac44:	2b00      	cmp	r3, #0
    ac46:	f642 0301 	movw	r3, #10241	; 0x2801
    ac4a:	bf08      	it	eq
    ac4c:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
    ac50:	f8ad 3006 	strh.w	r3, [sp, #6]
		value.uuid = &u.uuid;
    ac54:	ab04      	add	r3, sp, #16
    ac56:	9302      	str	r3, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
    ac58:	ab01      	add	r3, sp, #4
    ac5a:	9309      	str	r3, [sp, #36]	; 0x24
		attr.user_data = &value;
    ac5c:	ab02      	add	r3, sp, #8
    ac5e:	930c      	str	r3, [sp, #48]	; 0x30
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    ac60:	4648      	mov	r0, r9
    ac62:	686b      	ldr	r3, [r5, #4]
		value.end_handle = end_handle;
    ac64:	f8ad b00c 	strh.w	fp, [sp, #12]
		attr.handle = start_handle;
    ac68:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    ac6c:	a909      	add	r1, sp, #36	; 0x24
    ac6e:	4798      	blx	r3
    ac70:	2800      	cmp	r0, #0
    ac72:	d0a0      	beq.n	abb6 <gatt_read_group_rsp+0x16>
	     length -= rsp->len, pdu = (const u8_t *)pdu + rsp->len) {
    ac74:	783a      	ldrb	r2, [r7, #0]
    ac76:	1aa4      	subs	r4, r4, r2
    ac78:	b2a4      	uxth	r4, r4
    ac7a:	4490      	add	r8, r2
    ac7c:	e7b3      	b.n	abe6 <gatt_read_group_rsp+0x46>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
    ac7e:	2202      	movs	r2, #2
    ac80:	f108 0104 	add.w	r1, r8, #4
    ac84:	f10d 0012 	add.w	r0, sp, #18
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
    ac88:	f008 fc72 	bl	13570 <memcpy>
			break;
    ac8c:	e7d4      	b.n	ac38 <gatt_read_group_rsp+0x98>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
    ac8e:	2210      	movs	r2, #16
    ac90:	f108 0104 	add.w	r1, r8, #4
    ac94:	f10d 0011 	add.w	r0, sp, #17
    ac98:	e7f6      	b.n	ac88 <gatt_read_group_rsp+0xe8>
    ac9a:	bf00      	nop
    ac9c:	0001a970 	.word	0x0001a970

0000aca0 <gatt_read_type_rsp>:
{
    aca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aca4:	b091      	sub	sp, #68	; 0x44
    aca6:	4606      	mov	r6, r0
    aca8:	4617      	mov	r7, r2
    acaa:	461c      	mov	r4, r3
    acac:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
	if (err) {
    acb0:	b129      	cbz	r1, acbe <gatt_read_type_rsp+0x1e>
		params->func(conn, NULL, params);
    acb2:	4642      	mov	r2, r8
    acb4:	2100      	movs	r1, #0
    acb6:	f8d8 3004 	ldr.w	r3, [r8, #4]
	params->func(conn, NULL, params);
    acba:	4798      	blx	r3
	if (!handle) {
    acbc:	e06f      	b.n	ad9e <gatt_read_type_rsp+0xfe>
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
    acbe:	f898 3010 	ldrb.w	r3, [r8, #16]
    acc2:	7812      	ldrb	r2, [r2, #0]
    acc4:	2b02      	cmp	r3, #2
    acc6:	f040 808b 	bne.w	ade0 <gatt_read_type_rsp+0x140>
	switch (rsp->len) {
    acca:	2a06      	cmp	r2, #6
    accc:	d019      	beq.n	ad02 <gatt_read_type_rsp+0x62>
    acce:	2a08      	cmp	r2, #8
    acd0:	f040 808a 	bne.w	ade8 <gatt_read_type_rsp+0x148>
		u.uuid.type = BT_UUID_TYPE_16;
    acd4:	f88d 1018 	strb.w	r1, [sp, #24]
	u16_t handle = 0U;
    acd8:	f04f 0900 	mov.w	r9, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
    acdc:	3c01      	subs	r4, #1
    acde:	b2a4      	uxth	r4, r4
    ace0:	1c7d      	adds	r5, r7, #1
			value.uuid = &u.uuid;
    ace2:	f10d 0a18 	add.w	sl, sp, #24
	for (length--, pdu = rsp->data; length >= rsp->len;
    ace6:	783b      	ldrb	r3, [r7, #0]
    ace8:	42a3      	cmp	r3, r4
    acea:	d90d      	bls.n	ad08 <gatt_read_type_rsp+0x68>
	if (length == 0U && handle) {
    acec:	b91c      	cbnz	r4, acf6 <gatt_read_type_rsp+0x56>
    acee:	f1b9 0f00 	cmp.w	r9, #0
    acf2:	f040 80dd 	bne.w	aeb0 <gatt_read_type_rsp+0x210>
	params->func(conn, NULL, params);
    acf6:	4642      	mov	r2, r8
    acf8:	2100      	movs	r1, #0
    acfa:	4630      	mov	r0, r6
    acfc:	f8d8 3004 	ldr.w	r3, [r8, #4]
    ad00:	e7db      	b.n	acba <gatt_read_type_rsp+0x1a>
		u.uuid.type = BT_UUID_TYPE_128;
    ad02:	f88d 3018 	strb.w	r3, [sp, #24]
		break;
    ad06:	e7e7      	b.n	acd8 <gatt_read_type_rsp+0x38>
		handle = sys_le16_to_cpu(data->handle);
    ad08:	f8b5 b000 	ldrh.w	fp, [r5]
    ad0c:	fa1f f98b 	uxth.w	r9, fp
		if (!handle) {
    ad10:	f1b9 0f00 	cmp.w	r9, #0
    ad14:	d0ef      	beq.n	acf6 <gatt_read_type_rsp+0x56>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
    ad16:	886b      	ldrh	r3, [r5, #2]
		switch (u.uuid.type) {
    ad18:	f89d 2018 	ldrb.w	r2, [sp, #24]
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
    ad1c:	f8ad 3014 	strh.w	r3, [sp, #20]
    ad20:	b298      	uxth	r0, r3
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
    ad22:	88ab      	ldrh	r3, [r5, #4]
    ad24:	b299      	uxth	r1, r3
    ad26:	f8ad 3016 	strh.w	r3, [sp, #22]
		switch (u.uuid.type) {
    ad2a:	b172      	cbz	r2, ad4a <gatt_read_type_rsp+0xaa>
    ad2c:	2a02      	cmp	r2, #2
    ad2e:	d015      	beq.n	ad5c <gatt_read_type_rsp+0xbc>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    ad30:	f8d8 1000 	ldr.w	r1, [r8]
    ad34:	2900      	cmp	r1, #0
    ad36:	d038      	beq.n	adaa <gatt_read_type_rsp+0x10a>
    ad38:	4650      	mov	r0, sl
    ad3a:	f008 fcb4 	bl	136a6 <bt_uuid_cmp>
    ad3e:	b3a0      	cbz	r0, adaa <gatt_read_type_rsp+0x10a>
	     length -= rsp->len, pdu = (const u8_t *)pdu + rsp->len) {
    ad40:	783a      	ldrb	r2, [r7, #0]
    ad42:	1aa4      	subs	r4, r4, r2
    ad44:	b2a4      	uxth	r4, r4
    ad46:	4415      	add	r5, r2
    ad48:	e7cd      	b.n	ace6 <gatt_read_type_rsp+0x46>
			value.uuid = &u.uuid;
    ad4a:	f8cd a010 	str.w	sl, [sp, #16]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
    ad4e:	79ab      	ldrb	r3, [r5, #6]
    ad50:	79ea      	ldrb	r2, [r5, #7]
    ad52:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ad56:	f8ad 301a 	strh.w	r3, [sp, #26]
			break;
    ad5a:	e7e9      	b.n	ad30 <gatt_read_type_rsp+0x90>
			params->_included.start_handle = value.start_handle;
    ad5c:	f8a8 000a 	strh.w	r0, [r8, #10]
			params->_included.end_handle = value.end_handle;
    ad60:	f8a8 100c 	strh.w	r1, [r8, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
    ad64:	4630      	mov	r0, r6
    ad66:	210a      	movs	r1, #10
			params->_included.attr_handle = handle;
    ad68:	f8a8 9008 	strh.w	r9, [r8, #8]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
    ad6c:	9201      	str	r2, [sp, #4]
    ad6e:	f7fd fedf 	bl	8b30 <bt_att_create_pdu>
	if (!buf) {
    ad72:	4604      	mov	r4, r0
    ad74:	b1b0      	cbz	r0, ada4 <gatt_read_type_rsp+0x104>
	req = net_buf_add(buf, sizeof(*req));
    ad76:	9a01      	ldr	r2, [sp, #4]
    ad78:	3008      	adds	r0, #8
    ad7a:	4611      	mov	r1, r2
    ad7c:	f002 fc60 	bl	d640 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
    ad80:	f8b8 300a 	ldrh.w	r3, [r8, #10]
	return gatt_send(conn, buf, read_included_uuid_cb, params, NULL);
    ad84:	4621      	mov	r1, r4
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
    ad86:	8003      	strh	r3, [r0, #0]
	return gatt_send(conn, buf, read_included_uuid_cb, params, NULL);
    ad88:	4a4c      	ldr	r2, [pc, #304]	; (aebc <gatt_read_type_rsp+0x21c>)
    ad8a:	4643      	mov	r3, r8
    ad8c:	4630      	mov	r0, r6
    ad8e:	f7fe fde5 	bl	995c <gatt_send.constprop.0>
			return read_included_uuid(conn, params);
    ad92:	fa1f f980 	uxth.w	r9, r0
	if (!handle) {
    ad96:	f1b9 0f00 	cmp.w	r9, #0
    ad9a:	f040 8089 	bne.w	aeb0 <gatt_read_type_rsp+0x210>
}
    ad9e:	b011      	add	sp, #68	; 0x44
    ada0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
    ada4:	f06f 000b 	mvn.w	r0, #11
    ada8:	e7f3      	b.n	ad92 <gatt_read_type_rsp+0xf2>
		attr = (&(struct bt_gatt_attr) {
    adaa:	2210      	movs	r2, #16
    adac:	2100      	movs	r1, #0
    adae:	a80c      	add	r0, sp, #48	; 0x30
    adb0:	f008 fc09 	bl	135c6 <memset>
			.uuid = BT_UUID_GATT_INCLUDE,
    adb4:	2300      	movs	r3, #0
    adb6:	f88d 300c 	strb.w	r3, [sp, #12]
    adba:	f642 0302 	movw	r3, #10242	; 0x2802
    adbe:	f8ad 300e 	strh.w	r3, [sp, #14]
		attr = (&(struct bt_gatt_attr) {
    adc2:	ab03      	add	r3, sp, #12
    adc4:	930b      	str	r3, [sp, #44]	; 0x2c
    adc6:	ab04      	add	r3, sp, #16
    adc8:	930e      	str	r3, [sp, #56]	; 0x38
		if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
    adca:	4642      	mov	r2, r8
    adcc:	4630      	mov	r0, r6
    adce:	f8d8 3004 	ldr.w	r3, [r8, #4]
		attr->handle = handle;
    add2:	f8ad b03c 	strh.w	fp, [sp, #60]	; 0x3c
		if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
    add6:	a90b      	add	r1, sp, #44	; 0x2c
    add8:	4798      	blx	r3
    adda:	2800      	cmp	r0, #0
    addc:	d1b0      	bne.n	ad40 <gatt_read_type_rsp+0xa0>
    adde:	e7de      	b.n	ad9e <gatt_read_type_rsp+0xfe>
	switch (rsp->len) {
    ade0:	2a07      	cmp	r2, #7
    ade2:	d006      	beq.n	adf2 <gatt_read_type_rsp+0x152>
    ade4:	2a15      	cmp	r2, #21
    ade6:	d02c      	beq.n	ae42 <gatt_read_type_rsp+0x1a2>
		BT_ERR("Invalid data len %u", rsp->len);
    ade8:	2145      	movs	r1, #69	; 0x45
    adea:	4835      	ldr	r0, [pc, #212]	; (aec0 <gatt_read_type_rsp+0x220>)
    adec:	f007 f8ac 	bl	11f48 <printk>
		goto done;
    adf0:	e781      	b.n	acf6 <gatt_read_type_rsp+0x56>
		u.uuid.type = BT_UUID_TYPE_16;
    adf2:	f88d 1018 	strb.w	r1, [sp, #24]
	u16_t handle = 0U;
    adf6:	f04f 0900 	mov.w	r9, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
    adfa:	3c01      	subs	r4, #1
		attr = (&(struct bt_gatt_attr)BT_GATT_CHRC(&u.uuid,
    adfc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; aec4 <gatt_read_type_rsp+0x224>
	for (length--, pdu = rsp->data; length >= rsp->len;
    ae00:	b2a4      	uxth	r4, r4
    ae02:	1c7d      	adds	r5, r7, #1
    ae04:	783b      	ldrb	r3, [r7, #0]
    ae06:	42a3      	cmp	r3, r4
    ae08:	f63f af70 	bhi.w	acec <gatt_read_type_rsp+0x4c>
		handle = sys_le16_to_cpu(data->handle);
    ae0c:	f8b5 b000 	ldrh.w	fp, [r5]
    ae10:	fa1f f98b 	uxth.w	r9, fp
		if (!handle) {
    ae14:	f1b9 0f00 	cmp.w	r9, #0
    ae18:	f43f af6d 	beq.w	acf6 <gatt_read_type_rsp+0x56>
		switch (u.uuid.type) {
    ae1c:	f89d 3018 	ldrb.w	r3, [sp, #24]
    ae20:	b19b      	cbz	r3, ae4a <gatt_read_type_rsp+0x1aa>
    ae22:	2b02      	cmp	r3, #2
    ae24:	d018      	beq.n	ae58 <gatt_read_type_rsp+0x1b8>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    ae26:	f8d8 1000 	ldr.w	r1, [r8]
    ae2a:	ab06      	add	r3, sp, #24
    ae2c:	b1d9      	cbz	r1, ae66 <gatt_read_type_rsp+0x1c6>
    ae2e:	4618      	mov	r0, r3
    ae30:	f008 fc39 	bl	136a6 <bt_uuid_cmp>
    ae34:	ab06      	add	r3, sp, #24
    ae36:	b1b0      	cbz	r0, ae66 <gatt_read_type_rsp+0x1c6>
	     length -= rsp->len, pdu = (const u8_t *)pdu + rsp->len) {
    ae38:	783a      	ldrb	r2, [r7, #0]
    ae3a:	1aa4      	subs	r4, r4, r2
    ae3c:	b2a4      	uxth	r4, r4
    ae3e:	4415      	add	r5, r2
    ae40:	e7e0      	b.n	ae04 <gatt_read_type_rsp+0x164>
		u.uuid.type = BT_UUID_TYPE_128;
    ae42:	2302      	movs	r3, #2
    ae44:	f88d 3018 	strb.w	r3, [sp, #24]
		break;
    ae48:	e7d5      	b.n	adf6 <gatt_read_type_rsp+0x156>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
    ae4a:	796b      	ldrb	r3, [r5, #5]
    ae4c:	79aa      	ldrb	r2, [r5, #6]
    ae4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ae52:	f8ad 301a 	strh.w	r3, [sp, #26]
			break;
    ae56:	e7e6      	b.n	ae26 <gatt_read_type_rsp+0x186>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
    ae58:	2210      	movs	r2, #16
    ae5a:	1d69      	adds	r1, r5, #5
    ae5c:	f10d 0019 	add.w	r0, sp, #25
    ae60:	f008 fb86 	bl	13570 <memcpy>
			break;
    ae64:	e7df      	b.n	ae26 <gatt_read_type_rsp+0x186>
		attr = (&(struct bt_gatt_attr)BT_GATT_CHRC(&u.uuid,
    ae66:	f642 0103 	movw	r1, #10243	; 0x2803
    ae6a:	2200      	movs	r2, #0
    ae6c:	f8ad 100e 	strh.w	r1, [sp, #14]
    ae70:	a903      	add	r1, sp, #12
    ae72:	e9cd 1a0b 	strd	r1, sl, [sp, #44]	; 0x2c
    ae76:	9304      	str	r3, [sp, #16]
    ae78:	f88d 200c 	strb.w	r2, [sp, #12]
    ae7c:	920d      	str	r2, [sp, #52]	; 0x34
    ae7e:	792a      	ldrb	r2, [r5, #4]
    ae80:	78eb      	ldrb	r3, [r5, #3]
		if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
    ae82:	4630      	mov	r0, r6
		attr = (&(struct bt_gatt_attr)BT_GATT_CHRC(&u.uuid,
    ae84:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ae88:	f8ad 3014 	strh.w	r3, [sp, #20]
    ae8c:	78ab      	ldrb	r3, [r5, #2]
		if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
    ae8e:	4642      	mov	r2, r8
		attr = (&(struct bt_gatt_attr)BT_GATT_CHRC(&u.uuid,
    ae90:	f88d 3016 	strb.w	r3, [sp, #22]
    ae94:	ab04      	add	r3, sp, #16
    ae96:	930e      	str	r3, [sp, #56]	; 0x38
    ae98:	2301      	movs	r3, #1
		attr->handle = handle;
    ae9a:	f8ad b03c 	strh.w	fp, [sp, #60]	; 0x3c
		attr = (&(struct bt_gatt_attr)BT_GATT_CHRC(&u.uuid,
    ae9e:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
		if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
    aea2:	a90b      	add	r1, sp, #44	; 0x2c
    aea4:	f8d8 3004 	ldr.w	r3, [r8, #4]
    aea8:	4798      	blx	r3
    aeaa:	2800      	cmp	r0, #0
    aeac:	d1c4      	bne.n	ae38 <gatt_read_type_rsp+0x198>
    aeae:	e776      	b.n	ad9e <gatt_read_type_rsp+0xfe>
	gatt_discover_next(conn, handle, params);
    aeb0:	4642      	mov	r2, r8
    aeb2:	4649      	mov	r1, r9
    aeb4:	4630      	mov	r0, r6
    aeb6:	f009 fee3 	bl	14c80 <gatt_discover_next>
    aeba:	e770      	b.n	ad9e <gatt_read_type_rsp+0xfe>
    aebc:	0000aec9 	.word	0x0000aec9
    aec0:	0001a970 	.word	0x0001a970
    aec4:	00014bad 	.word	0x00014bad

0000aec8 <read_included_uuid_cb>:
{
    aec8:	b570      	push	{r4, r5, r6, lr}
	if (length != 16U) {
    aeca:	2b10      	cmp	r3, #16
{
    aecc:	b08e      	sub	sp, #56	; 0x38
    aece:	4611      	mov	r1, r2
    aed0:	4605      	mov	r5, r0
    aed2:	461a      	mov	r2, r3
    aed4:	9c12      	ldr	r4, [sp, #72]	; 0x48
	if (length != 16U) {
    aed6:	d00a      	beq.n	aeee <read_included_uuid_cb+0x26>
		BT_ERR("Invalid data len %u", length);
    aed8:	2145      	movs	r1, #69	; 0x45
    aeda:	4820      	ldr	r0, [pc, #128]	; (af5c <read_included_uuid_cb+0x94>)
    aedc:	f007 f834 	bl	11f48 <printk>
		params->func(conn, NULL, params);
    aee0:	4622      	mov	r2, r4
    aee2:	2100      	movs	r1, #0
    aee4:	4628      	mov	r0, r5
    aee6:	6863      	ldr	r3, [r4, #4]
    aee8:	4798      	blx	r3
}
    aeea:	b00e      	add	sp, #56	; 0x38
    aeec:	bd70      	pop	{r4, r5, r6, pc}
	value.start_handle = params->_included.start_handle;
    aeee:	8963      	ldrh	r3, [r4, #10]
	value.uuid = &u.uuid;
    aef0:	ae04      	add	r6, sp, #16
	value.start_handle = params->_included.start_handle;
    aef2:	f8ad 300c 	strh.w	r3, [sp, #12]
	value.end_handle = params->_included.end_handle;
    aef6:	89a3      	ldrh	r3, [r4, #12]
	memcpy(u.u128.val, pdu, length);
    aef8:	f10d 0011 	add.w	r0, sp, #17
	value.end_handle = params->_included.end_handle;
    aefc:	f8ad 300e 	strh.w	r3, [sp, #14]
	u.uuid.type = BT_UUID_TYPE_128;
    af00:	2302      	movs	r3, #2
	value.uuid = &u.uuid;
    af02:	9602      	str	r6, [sp, #8]
	u.uuid.type = BT_UUID_TYPE_128;
    af04:	f88d 3010 	strb.w	r3, [sp, #16]
	memcpy(u.u128.val, pdu, length);
    af08:	f008 fb32 	bl	13570 <memcpy>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    af0c:	6821      	ldr	r1, [r4, #0]
    af0e:	b9f9      	cbnz	r1, af50 <read_included_uuid_cb+0x88>
	attr = (&(struct bt_gatt_attr) {
    af10:	2210      	movs	r2, #16
    af12:	2100      	movs	r1, #0
    af14:	a80a      	add	r0, sp, #40	; 0x28
    af16:	f008 fb56 	bl	135c6 <memset>
		.uuid = BT_UUID_GATT_INCLUDE,
    af1a:	2300      	movs	r3, #0
    af1c:	f88d 3004 	strb.w	r3, [sp, #4]
    af20:	f642 0302 	movw	r3, #10242	; 0x2802
    af24:	f8ad 3006 	strh.w	r3, [sp, #6]
	attr = (&(struct bt_gatt_attr) {
    af28:	ab01      	add	r3, sp, #4
    af2a:	9309      	str	r3, [sp, #36]	; 0x24
    af2c:	ab02      	add	r3, sp, #8
    af2e:	930c      	str	r3, [sp, #48]	; 0x30
	attr->handle = params->_included.attr_handle;
    af30:	8923      	ldrh	r3, [r4, #8]
	if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
    af32:	4622      	mov	r2, r4
	attr->handle = params->_included.attr_handle;
    af34:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
    af38:	4628      	mov	r0, r5
    af3a:	6863      	ldr	r3, [r4, #4]
    af3c:	a909      	add	r1, sp, #36	; 0x24
    af3e:	4798      	blx	r3
    af40:	2800      	cmp	r0, #0
    af42:	d0d2      	beq.n	aeea <read_included_uuid_cb+0x22>
	gatt_discover_next(conn, params->start_handle, params);
    af44:	4622      	mov	r2, r4
    af46:	4628      	mov	r0, r5
    af48:	8921      	ldrh	r1, [r4, #8]
    af4a:	f009 fe99 	bl	14c80 <gatt_discover_next>
	return;
    af4e:	e7cc      	b.n	aeea <read_included_uuid_cb+0x22>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    af50:	4630      	mov	r0, r6
    af52:	f008 fba8 	bl	136a6 <bt_uuid_cmp>
    af56:	2800      	cmp	r0, #0
    af58:	d0da      	beq.n	af10 <read_included_uuid_cb+0x48>
    af5a:	e7f3      	b.n	af44 <read_included_uuid_cb+0x7c>
    af5c:	0001a970 	.word	0x0001a970

0000af60 <gatt_find_info_rsp>:
{
    af60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    af64:	b08f      	sub	sp, #60	; 0x3c
    af66:	4680      	mov	r8, r0
    af68:	4614      	mov	r4, r2
    af6a:	9e18      	ldr	r6, [sp, #96]	; 0x60
	if (err) {
    af6c:	b941      	cbnz	r1, af80 <gatt_find_info_rsp+0x20>
	switch (rsp->format) {
    af6e:	7812      	ldrb	r2, [r2, #0]
    af70:	2a01      	cmp	r2, #1
    af72:	d00b      	beq.n	af8c <gatt_find_info_rsp+0x2c>
    af74:	2a02      	cmp	r2, #2
    af76:	d022      	beq.n	afbe <gatt_find_info_rsp+0x5e>
		BT_ERR("Invalid format %u", rsp->format);
    af78:	2145      	movs	r1, #69	; 0x45
    af7a:	484c      	ldr	r0, [pc, #304]	; (b0ac <gatt_find_info_rsp+0x14c>)
    af7c:	f006 ffe4 	bl	11f48 <printk>
	params->func(conn, NULL, params);
    af80:	4632      	mov	r2, r6
    af82:	2100      	movs	r1, #0
    af84:	4640      	mov	r0, r8
    af86:	6873      	ldr	r3, [r6, #4]
    af88:	4798      	blx	r3
    af8a:	e08b      	b.n	b0a4 <gatt_find_info_rsp+0x144>
		len = sizeof(*info.i16);
    af8c:	f04f 0a04 	mov.w	sl, #4
		u.uuid.type = BT_UUID_TYPE_16;
    af90:	f88d 1010 	strb.w	r1, [sp, #16]
	length--;
    af94:	3b01      	subs	r3, #1
    af96:	b29b      	uxth	r3, r3
	if (length < len) {
    af98:	4553      	cmp	r3, sl
    af9a:	d3f1      	bcc.n	af80 <gatt_find_info_rsp+0x20>
	bool skip = false;
    af9c:	f04f 0900 	mov.w	r9, #0
	for (i = length / len, pdu = rsp->info; i != 0;
    afa0:	fbb3 f3fa 	udiv	r3, r3, sl
	u16_t handle = 0U;
    afa4:	46cb      	mov	fp, r9
			skip = false;
    afa6:	464d      	mov	r5, r9
	for (i = length / len, pdu = rsp->info; i != 0;
    afa8:	9300      	str	r3, [sp, #0]
    afaa:	3401      	adds	r4, #1
    afac:	af04      	add	r7, sp, #16
    afae:	9b00      	ldr	r3, [sp, #0]
    afb0:	b953      	cbnz	r3, afc8 <gatt_find_info_rsp+0x68>
	gatt_discover_next(conn, handle, params);
    afb2:	4632      	mov	r2, r6
    afb4:	4659      	mov	r1, fp
    afb6:	4640      	mov	r0, r8
    afb8:	f009 fe62 	bl	14c80 <gatt_discover_next>
	return;
    afbc:	e072      	b.n	b0a4 <gatt_find_info_rsp+0x144>
		len = sizeof(*info.i128);
    afbe:	f04f 0a12 	mov.w	sl, #18
		u.uuid.type = BT_UUID_TYPE_128;
    afc2:	f88d 2010 	strb.w	r2, [sp, #16]
		break;
    afc6:	e7e5      	b.n	af94 <gatt_find_info_rsp+0x34>
		handle = sys_le16_to_cpu(info.i16->handle);
    afc8:	8823      	ldrh	r3, [r4, #0]
    afca:	f8ad 3004 	strh.w	r3, [sp, #4]
    afce:	fa1f fb83 	uxth.w	fp, r3
		if (skip) {
    afd2:	f1b9 0f00 	cmp.w	r9, #0
    afd6:	d151      	bne.n	b07c <gatt_find_info_rsp+0x11c>
		switch (u.uuid.type) {
    afd8:	f89d 3010 	ldrb.w	r3, [sp, #16]
    afdc:	2b00      	cmp	r3, #0
    afde:	d03a      	beq.n	b056 <gatt_find_info_rsp+0xf6>
    afe0:	2b02      	cmp	r3, #2
    afe2:	d03f      	beq.n	b064 <gatt_find_info_rsp+0x104>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    afe4:	6831      	ldr	r1, [r6, #0]
    afe6:	2900      	cmp	r1, #0
    afe8:	d143      	bne.n	b072 <gatt_find_info_rsp+0x112>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
    afea:	7c33      	ldrb	r3, [r6, #16]
    afec:	2b04      	cmp	r3, #4
    afee:	d148      	bne.n	b082 <gatt_find_info_rsp+0x122>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
    aff0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    aff4:	4638      	mov	r0, r7
    aff6:	a902      	add	r1, sp, #8
    aff8:	f88d 5008 	strb.w	r5, [sp, #8]
    affc:	f8ad 300a 	strh.w	r3, [sp, #10]
    b000:	f008 fb51 	bl	136a6 <bt_uuid_cmp>
    b004:	b310      	cbz	r0, b04c <gatt_find_info_rsp+0xec>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
    b006:	f642 0301 	movw	r3, #10241	; 0x2801
    b00a:	4638      	mov	r0, r7
    b00c:	a903      	add	r1, sp, #12
    b00e:	f88d 500c 	strb.w	r5, [sp, #12]
    b012:	f8ad 300e 	strh.w	r3, [sp, #14]
    b016:	f008 fb46 	bl	136a6 <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
    b01a:	b1b8      	cbz	r0, b04c <gatt_find_info_rsp+0xec>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
    b01c:	f642 0302 	movw	r3, #10242	; 0x2802
    b020:	4638      	mov	r0, r7
    b022:	a909      	add	r1, sp, #36	; 0x24
    b024:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
    b028:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    b02c:	f008 fb3b 	bl	136a6 <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
    b030:	b160      	cbz	r0, b04c <gatt_find_info_rsp+0xec>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
    b032:	f642 0303 	movw	r3, #10243	; 0x2803
    b036:	4638      	mov	r0, r7
    b038:	a909      	add	r1, sp, #36	; 0x24
    b03a:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
    b03e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    b042:	f008 fb30 	bl	136a6 <bt_uuid_cmp>
    b046:	b9e0      	cbnz	r0, b082 <gatt_find_info_rsp+0x122>
				skip = true;
    b048:	f04f 0901 	mov.w	r9, #1
	     i--, pdu = (const u8_t *)pdu + len) {
    b04c:	9b00      	ldr	r3, [sp, #0]
    b04e:	4454      	add	r4, sl
    b050:	3b01      	subs	r3, #1
    b052:	9300      	str	r3, [sp, #0]
    b054:	e7ab      	b.n	afae <gatt_find_info_rsp+0x4e>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
    b056:	78a3      	ldrb	r3, [r4, #2]
    b058:	78e2      	ldrb	r2, [r4, #3]
    b05a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    b05e:	f8ad 3012 	strh.w	r3, [sp, #18]
			break;
    b062:	e7bf      	b.n	afe4 <gatt_find_info_rsp+0x84>
			memcpy(u.u128.val, info.i128->uuid, 16);
    b064:	2210      	movs	r2, #16
    b066:	1ca1      	adds	r1, r4, #2
    b068:	f10d 0011 	add.w	r0, sp, #17
    b06c:	f008 fa80 	bl	13570 <memcpy>
			break;
    b070:	e7b8      	b.n	afe4 <gatt_find_info_rsp+0x84>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    b072:	4638      	mov	r0, r7
    b074:	f008 fb17 	bl	136a6 <bt_uuid_cmp>
    b078:	2800      	cmp	r0, #0
    b07a:	d0b6      	beq.n	afea <gatt_find_info_rsp+0x8a>
			skip = false;
    b07c:	f04f 0900 	mov.w	r9, #0
    b080:	e7e4      	b.n	b04c <gatt_find_info_rsp+0xec>
		attr->handle = handle;
    b082:	f8bd 3004 	ldrh.w	r3, [sp, #4]
		if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
    b086:	4632      	mov	r2, r6
		attr->handle = handle;
    b088:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
		if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
    b08c:	4640      	mov	r0, r8
			BT_GATT_DESCRIPTOR(&u.uuid, 0, NULL, NULL, NULL));
    b08e:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
    b092:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
		if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
    b096:	6873      	ldr	r3, [r6, #4]
			BT_GATT_DESCRIPTOR(&u.uuid, 0, NULL, NULL, NULL));
    b098:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
		if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
    b09c:	a909      	add	r1, sp, #36	; 0x24
    b09e:	4798      	blx	r3
    b0a0:	2800      	cmp	r0, #0
    b0a2:	d1d3      	bne.n	b04c <gatt_find_info_rsp+0xec>
}
    b0a4:	b00f      	add	sp, #60	; 0x3c
    b0a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b0aa:	bf00      	nop
    b0ac:	0001a989 	.word	0x0001a989

0000b0b0 <bt_gatt_write>:
{
    b0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b0b4:	460c      	mov	r4, r1
	__ASSERT(conn, "invalid parameters\n");
    b0b6:	4605      	mov	r5, r0
    b0b8:	b970      	cbnz	r0, b0d8 <bt_gatt_write+0x28>
    b0ba:	494d      	ldr	r1, [pc, #308]	; (b1f0 <bt_gatt_write+0x140>)
    b0bc:	f640 53ae 	movw	r3, #3502	; 0xdae
    b0c0:	4a4c      	ldr	r2, [pc, #304]	; (b1f4 <bt_gatt_write+0x144>)
    b0c2:	484d      	ldr	r0, [pc, #308]	; (b1f8 <bt_gatt_write+0x148>)
    b0c4:	f006 ff40 	bl	11f48 <printk>
    b0c8:	484c      	ldr	r0, [pc, #304]	; (b1fc <bt_gatt_write+0x14c>)
    b0ca:	f006 ff3d 	bl	11f48 <printk>
    b0ce:	f640 51ae 	movw	r1, #3502	; 0xdae
    b0d2:	4848      	ldr	r0, [pc, #288]	; (b1f4 <bt_gatt_write+0x144>)
    b0d4:	f007 f9ce 	bl	12474 <assert_post_action>
	__ASSERT(params && params->func, "invalid parameters\n");
    b0d8:	b10c      	cbz	r4, b0de <bt_gatt_write+0x2e>
    b0da:	6823      	ldr	r3, [r4, #0]
    b0dc:	b973      	cbnz	r3, b0fc <bt_gatt_write+0x4c>
    b0de:	4948      	ldr	r1, [pc, #288]	; (b200 <bt_gatt_write+0x150>)
    b0e0:	f640 53af 	movw	r3, #3503	; 0xdaf
    b0e4:	4a43      	ldr	r2, [pc, #268]	; (b1f4 <bt_gatt_write+0x144>)
    b0e6:	4844      	ldr	r0, [pc, #272]	; (b1f8 <bt_gatt_write+0x148>)
    b0e8:	f006 ff2e 	bl	11f48 <printk>
    b0ec:	4843      	ldr	r0, [pc, #268]	; (b1fc <bt_gatt_write+0x14c>)
    b0ee:	f006 ff2b 	bl	11f48 <printk>
    b0f2:	f640 51af 	movw	r1, #3503	; 0xdaf
    b0f6:	483f      	ldr	r0, [pc, #252]	; (b1f4 <bt_gatt_write+0x144>)
    b0f8:	f007 f9bc 	bl	12474 <assert_post_action>
	__ASSERT(params->handle, "invalid parameters\n");
    b0fc:	88a3      	ldrh	r3, [r4, #4]
    b0fe:	b973      	cbnz	r3, b11e <bt_gatt_write+0x6e>
    b100:	4940      	ldr	r1, [pc, #256]	; (b204 <bt_gatt_write+0x154>)
    b102:	f44f 635b 	mov.w	r3, #3504	; 0xdb0
    b106:	4a3b      	ldr	r2, [pc, #236]	; (b1f4 <bt_gatt_write+0x144>)
    b108:	483b      	ldr	r0, [pc, #236]	; (b1f8 <bt_gatt_write+0x148>)
    b10a:	f006 ff1d 	bl	11f48 <printk>
    b10e:	483b      	ldr	r0, [pc, #236]	; (b1fc <bt_gatt_write+0x14c>)
    b110:	f006 ff1a 	bl	11f48 <printk>
    b114:	f44f 615b 	mov.w	r1, #3504	; 0xdb0
    b118:	4836      	ldr	r0, [pc, #216]	; (b1f4 <bt_gatt_write+0x144>)
    b11a:	f007 f9ab 	bl	12474 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
    b11e:	7b6b      	ldrb	r3, [r5, #13]
    b120:	2b07      	cmp	r3, #7
    b122:	d162      	bne.n	b1ea <bt_gatt_write+0x13a>
	if (params->offset ||
    b124:	88e3      	ldrh	r3, [r4, #6]
    b126:	b163      	cbz	r3, b142 <bt_gatt_write+0x92>
	len = MIN(params->length, bt_att_get_mtu(conn) - sizeof(*req) - 1);
    b128:	4628      	mov	r0, r5
    b12a:	89a6      	ldrh	r6, [r4, #12]
    b12c:	f009 faab 	bl	14686 <bt_att_get_mtu>
    b130:	3805      	subs	r0, #5
    b132:	4286      	cmp	r6, r0
    b134:	d329      	bcc.n	b18a <bt_gatt_write+0xda>
    b136:	4628      	mov	r0, r5
    b138:	f009 faa5 	bl	14686 <bt_att_get_mtu>
    b13c:	1f46      	subs	r6, r0, #5
    b13e:	b2b6      	uxth	r6, r6
    b140:	e024      	b.n	b18c <bt_gatt_write+0xdc>
	    params->length > (bt_att_get_mtu(conn) - sizeof(*req) - 1)) {
    b142:	4628      	mov	r0, r5
    b144:	89a6      	ldrh	r6, [r4, #12]
    b146:	f009 fa9e 	bl	14686 <bt_att_get_mtu>
    b14a:	3803      	subs	r0, #3
	if (params->offset ||
    b14c:	42b0      	cmp	r0, r6
    b14e:	d3eb      	bcc.n	b128 <bt_gatt_write+0x78>
				sizeof(*req) + params->length);
    b150:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    b152:	2112      	movs	r1, #18
    b154:	4628      	mov	r0, r5
    b156:	3202      	adds	r2, #2
    b158:	f7fd fcea 	bl	8b30 <bt_att_create_pdu>
	if (!buf) {
    b15c:	4606      	mov	r6, r0
    b15e:	b1e0      	cbz	r0, b19a <bt_gatt_write+0xea>
	req = net_buf_add(buf, sizeof(*req));
    b160:	f100 0708 	add.w	r7, r0, #8
    b164:	2102      	movs	r1, #2
    b166:	4638      	mov	r0, r7
    b168:	f002 fa6a 	bl	d640 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->handle);
    b16c:	88a3      	ldrh	r3, [r4, #4]
	memcpy(req->value, params->data, params->length);
    b16e:	89a2      	ldrh	r2, [r4, #12]
	req->handle = sys_cpu_to_le16(params->handle);
    b170:	f820 3b02 	strh.w	r3, [r0], #2
	memcpy(req->value, params->data, params->length);
    b174:	68a1      	ldr	r1, [r4, #8]
    b176:	f008 f9fb 	bl	13570 <memcpy>
	net_buf_add(buf, params->length);
    b17a:	89a1      	ldrh	r1, [r4, #12]
    b17c:	4638      	mov	r0, r7
    b17e:	f002 fa5f 	bl	d640 <net_buf_simple_add>
	return gatt_send(conn, buf, gatt_write_rsp, params, NULL);
    b182:	4623      	mov	r3, r4
    b184:	4631      	mov	r1, r6
    b186:	4a20      	ldr	r2, [pc, #128]	; (b208 <bt_gatt_write+0x158>)
    b188:	e02a      	b.n	b1e0 <bt_gatt_write+0x130>
	len = MIN(params->length, bt_att_get_mtu(conn) - sizeof(*req) - 1);
    b18a:	89a6      	ldrh	r6, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_PREPARE_WRITE_REQ,
    b18c:	2116      	movs	r1, #22
    b18e:	4628      	mov	r0, r5
    b190:	1d32      	adds	r2, r6, #4
    b192:	f7fd fccd 	bl	8b30 <bt_att_create_pdu>
	if (!buf) {
    b196:	4607      	mov	r7, r0
    b198:	b918      	cbnz	r0, b1a2 <bt_gatt_write+0xf2>
		return -ENOMEM;
    b19a:	f06f 000b 	mvn.w	r0, #11
}
    b19e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	req = net_buf_add(buf, sizeof(*req));
    b1a2:	f100 0808 	add.w	r8, r0, #8
    b1a6:	2104      	movs	r1, #4
    b1a8:	4640      	mov	r0, r8
    b1aa:	f002 fa49 	bl	d640 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->handle);
    b1ae:	88a3      	ldrh	r3, [r4, #4]
	memcpy(req->value, params->data, len);
    b1b0:	4632      	mov	r2, r6
	req->handle = sys_cpu_to_le16(params->handle);
    b1b2:	8003      	strh	r3, [r0, #0]
	req->offset = sys_cpu_to_le16(params->offset);
    b1b4:	88e3      	ldrh	r3, [r4, #6]
	memcpy(req->value, params->data, len);
    b1b6:	68a1      	ldr	r1, [r4, #8]
	req->offset = sys_cpu_to_le16(params->offset);
    b1b8:	8043      	strh	r3, [r0, #2]
	memcpy(req->value, params->data, len);
    b1ba:	3004      	adds	r0, #4
    b1bc:	f008 f9d8 	bl	13570 <memcpy>
	net_buf_add(buf, len);
    b1c0:	4631      	mov	r1, r6
    b1c2:	4640      	mov	r0, r8
    b1c4:	f002 fa3c 	bl	d640 <net_buf_simple_add>
	params->offset += len;
    b1c8:	88e3      	ldrh	r3, [r4, #6]
	return gatt_send(conn, buf, gatt_prepare_write_rsp, params, NULL);
    b1ca:	4639      	mov	r1, r7
	params->offset += len;
    b1cc:	4433      	add	r3, r6
    b1ce:	80e3      	strh	r3, [r4, #6]
	params->data = (const u8_t *)params->data + len;
    b1d0:	68a3      	ldr	r3, [r4, #8]
	params->length -= len;
    b1d2:	89a0      	ldrh	r0, [r4, #12]
	params->data = (const u8_t *)params->data + len;
    b1d4:	4433      	add	r3, r6
    b1d6:	60a3      	str	r3, [r4, #8]
	return gatt_send(conn, buf, gatt_prepare_write_rsp, params, NULL);
    b1d8:	4623      	mov	r3, r4
	params->length -= len;
    b1da:	1b86      	subs	r6, r0, r6
	return gatt_send(conn, buf, gatt_prepare_write_rsp, params, NULL);
    b1dc:	4a0b      	ldr	r2, [pc, #44]	; (b20c <bt_gatt_write+0x15c>)
	params->length -= len;
    b1de:	81a6      	strh	r6, [r4, #12]
	return gatt_send(conn, buf, gatt_write_rsp, params, NULL);
    b1e0:	4628      	mov	r0, r5
}
    b1e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return gatt_send(conn, buf, gatt_write_rsp, params, NULL);
    b1e6:	f7fe bbb9 	b.w	995c <gatt_send.constprop.0>
		return -ENOTCONN;
    b1ea:	f06f 0038 	mvn.w	r0, #56	; 0x38
    b1ee:	e7d6      	b.n	b19e <bt_gatt_write+0xee>
    b1f0:	00019e2d 	.word	0x00019e2d
    b1f4:	0001a5b3 	.word	0x0001a5b3
    b1f8:	00017b50 	.word	0x00017b50
    b1fc:	0001a806 	.word	0x0001a806
    b200:	0001a8c5 	.word	0x0001a8c5
    b204:	0001a9a0 	.word	0x0001a9a0
    b208:	000147e9 	.word	0x000147e9
    b20c:	0000b211 	.word	0x0000b211

0000b210 <gatt_prepare_write_rsp>:
{
    b210:	b570      	push	{r4, r5, r6, lr}
    b212:	9c04      	ldr	r4, [sp, #16]
    b214:	4606      	mov	r6, r0
	if (err) {
    b216:	b121      	cbz	r1, b222 <gatt_prepare_write_rsp+0x12>
		params->func(conn, err, params);
    b218:	4622      	mov	r2, r4
    b21a:	6823      	ldr	r3, [r4, #0]
}
    b21c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		params->func(conn, err, params);
    b220:	4718      	bx	r3
	if (!params->length) {
    b222:	89a3      	ldrh	r3, [r4, #12]
    b224:	b99b      	cbnz	r3, b24e <gatt_prepare_write_rsp+0x3e>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_EXEC_WRITE_REQ, sizeof(*req));
    b226:	2201      	movs	r2, #1
    b228:	2118      	movs	r1, #24
    b22a:	f7fd fc81 	bl	8b30 <bt_att_create_pdu>
	if (!buf) {
    b22e:	4605      	mov	r5, r0
    b230:	b190      	cbz	r0, b258 <gatt_prepare_write_rsp+0x48>
	req = net_buf_add(buf, sizeof(*req));
    b232:	2101      	movs	r1, #1
    b234:	3008      	adds	r0, #8
    b236:	f002 fa03 	bl	d640 <net_buf_simple_add>
	req->flags = BT_ATT_FLAG_EXEC;
    b23a:	2301      	movs	r3, #1
    b23c:	7003      	strb	r3, [r0, #0]
	return gatt_send(conn, buf, gatt_write_rsp, params, NULL);
    b23e:	4629      	mov	r1, r5
    b240:	4623      	mov	r3, r4
    b242:	4630      	mov	r0, r6
}
    b244:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return gatt_send(conn, buf, gatt_write_rsp, params, NULL);
    b248:	4a04      	ldr	r2, [pc, #16]	; (b25c <gatt_prepare_write_rsp+0x4c>)
    b24a:	f7fe bb87 	b.w	995c <gatt_send.constprop.0>
	bt_gatt_write(conn, params);
    b24e:	4621      	mov	r1, r4
}
    b250:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_gatt_write(conn, params);
    b254:	f7ff bf2c 	b.w	b0b0 <bt_gatt_write>
}
    b258:	bd70      	pop	{r4, r5, r6, pc}
    b25a:	bf00      	nop
    b25c:	000147e9 	.word	0x000147e9

0000b260 <bt_gatt_subscribe>:
{
    b260:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b262:	460c      	mov	r4, r1
	__ASSERT(conn, "invalid parameters\n");
    b264:	4605      	mov	r5, r0
    b266:	b970      	cbnz	r0, b286 <bt_gatt_subscribe+0x26>
    b268:	494d      	ldr	r1, [pc, #308]	; (b3a0 <bt_gatt_subscribe+0x140>)
    b26a:	f640 630d 	movw	r3, #3597	; 0xe0d
    b26e:	4a4d      	ldr	r2, [pc, #308]	; (b3a4 <bt_gatt_subscribe+0x144>)
    b270:	484d      	ldr	r0, [pc, #308]	; (b3a8 <bt_gatt_subscribe+0x148>)
    b272:	f006 fe69 	bl	11f48 <printk>
    b276:	484d      	ldr	r0, [pc, #308]	; (b3ac <bt_gatt_subscribe+0x14c>)
    b278:	f006 fe66 	bl	11f48 <printk>
    b27c:	f640 610d 	movw	r1, #3597	; 0xe0d
    b280:	4848      	ldr	r0, [pc, #288]	; (b3a4 <bt_gatt_subscribe+0x144>)
    b282:	f007 f8f7 	bl	12474 <assert_post_action>
	__ASSERT(params && params->notify,  "invalid parameters\n");
    b286:	b10c      	cbz	r4, b28c <bt_gatt_subscribe+0x2c>
    b288:	6823      	ldr	r3, [r4, #0]
    b28a:	b973      	cbnz	r3, b2aa <bt_gatt_subscribe+0x4a>
    b28c:	4948      	ldr	r1, [pc, #288]	; (b3b0 <bt_gatt_subscribe+0x150>)
    b28e:	f640 630e 	movw	r3, #3598	; 0xe0e
    b292:	4a44      	ldr	r2, [pc, #272]	; (b3a4 <bt_gatt_subscribe+0x144>)
    b294:	4844      	ldr	r0, [pc, #272]	; (b3a8 <bt_gatt_subscribe+0x148>)
    b296:	f006 fe57 	bl	11f48 <printk>
    b29a:	4844      	ldr	r0, [pc, #272]	; (b3ac <bt_gatt_subscribe+0x14c>)
    b29c:	f006 fe54 	bl	11f48 <printk>
    b2a0:	f640 610e 	movw	r1, #3598	; 0xe0e
    b2a4:	483f      	ldr	r0, [pc, #252]	; (b3a4 <bt_gatt_subscribe+0x144>)
    b2a6:	f007 f8e5 	bl	12474 <assert_post_action>
	__ASSERT(params->value, "invalid parameters\n");
    b2aa:	8923      	ldrh	r3, [r4, #8]
    b2ac:	b973      	cbnz	r3, b2cc <bt_gatt_subscribe+0x6c>
    b2ae:	4941      	ldr	r1, [pc, #260]	; (b3b4 <bt_gatt_subscribe+0x154>)
    b2b0:	f640 630f 	movw	r3, #3599	; 0xe0f
    b2b4:	4a3b      	ldr	r2, [pc, #236]	; (b3a4 <bt_gatt_subscribe+0x144>)
    b2b6:	483c      	ldr	r0, [pc, #240]	; (b3a8 <bt_gatt_subscribe+0x148>)
    b2b8:	f006 fe46 	bl	11f48 <printk>
    b2bc:	483b      	ldr	r0, [pc, #236]	; (b3ac <bt_gatt_subscribe+0x14c>)
    b2be:	f006 fe43 	bl	11f48 <printk>
    b2c2:	f640 610f 	movw	r1, #3599	; 0xe0f
    b2c6:	4837      	ldr	r0, [pc, #220]	; (b3a4 <bt_gatt_subscribe+0x144>)
    b2c8:	f007 f8d4 	bl	12474 <assert_post_action>
	__ASSERT(params->ccc_handle, "invalid parameters\n");
    b2cc:	88e3      	ldrh	r3, [r4, #6]
    b2ce:	b973      	cbnz	r3, b2ee <bt_gatt_subscribe+0x8e>
    b2d0:	4939      	ldr	r1, [pc, #228]	; (b3b8 <bt_gatt_subscribe+0x158>)
    b2d2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
    b2d6:	4a33      	ldr	r2, [pc, #204]	; (b3a4 <bt_gatt_subscribe+0x144>)
    b2d8:	4833      	ldr	r0, [pc, #204]	; (b3a8 <bt_gatt_subscribe+0x148>)
    b2da:	f006 fe35 	bl	11f48 <printk>
    b2de:	4833      	ldr	r0, [pc, #204]	; (b3ac <bt_gatt_subscribe+0x14c>)
    b2e0:	f006 fe32 	bl	11f48 <printk>
    b2e4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    b2e8:	482e      	ldr	r0, [pc, #184]	; (b3a4 <bt_gatt_subscribe+0x144>)
    b2ea:	f007 f8c3 	bl	12474 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
    b2ee:	7b6b      	ldrb	r3, [r5, #13]
    b2f0:	2b07      	cmp	r3, #7
    b2f2:	d14f      	bne.n	b394 <bt_gatt_subscribe+0x134>
	sub = gatt_sub_find_free(conn, &free_sub);
    b2f4:	4628      	mov	r0, r5
    b2f6:	a901      	add	r1, sp, #4
    b2f8:	f7fe fc6e 	bl	9bd8 <gatt_sub_find_free>
	if (sub) {
    b2fc:	4606      	mov	r6, r0
    b2fe:	b970      	cbnz	r0, b31e <bt_gatt_subscribe+0xbe>
	if (free_sub) {
    b300:	9801      	ldr	r0, [sp, #4]
    b302:	b920      	cbnz	r0, b30e <bt_gatt_subscribe+0xae>
		return -ENOMEM;
    b304:	f06f 050b 	mvn.w	r5, #11
}
    b308:	4628      	mov	r0, r5
    b30a:	b003      	add	sp, #12
    b30c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bt_addr_le_copy(&free_sub->peer, &conn->le.dst);
    b30e:	f105 017c 	add.w	r1, r5, #124	; 0x7c
    b312:	3001      	adds	r0, #1
    b314:	f009 fac3 	bl	1489e <bt_addr_le_copy>
		free_sub->id = conn->id;
    b318:	9e01      	ldr	r6, [sp, #4]
    b31a:	7a2b      	ldrb	r3, [r5, #8]
    b31c:	7033      	strb	r3, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
    b31e:	68b2      	ldr	r2, [r6, #8]
    b320:	b90a      	cbnz	r2, b326 <bt_gatt_subscribe+0xc6>
    b322:	4613      	mov	r3, r2
    b324:	e001      	b.n	b32a <bt_gatt_subscribe+0xca>
    b326:	f1a2 0310 	sub.w	r3, r2, #16
			has_subscription = true;
    b32a:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
    b32c:	b97b      	cbnz	r3, b34e <bt_gatt_subscribe+0xee>
	if (!has_subscription) {
    b32e:	bb41      	cbnz	r1, b382 <bt_gatt_subscribe+0x122>
		err = gatt_write_ccc(conn, params->ccc_handle, params->value,
    b330:	4628      	mov	r0, r5
    b332:	4623      	mov	r3, r4
    b334:	8922      	ldrh	r2, [r4, #8]
    b336:	88e1      	ldrh	r1, [r4, #6]
    b338:	f7fe fece 	bl	a0d8 <gatt_write_ccc.constprop.0>
		if (err) {
    b33c:	4605      	mov	r5, r0
    b33e:	b300      	cbz	r0, b382 <bt_gatt_subscribe+0x122>
	if (sys_slist_is_empty(&sub->list)) {
    b340:	68b3      	ldr	r3, [r6, #8]
    b342:	2b00      	cmp	r3, #0
    b344:	d1e0      	bne.n	b308 <bt_gatt_subscribe+0xa8>
    b346:	4630      	mov	r0, r6
    b348:	f009 fac5 	bl	148d6 <gatt_sub_remove.part.0>
    b34c:	e7dc      	b.n	b308 <bt_gatt_subscribe+0xa8>
		if (tmp == params) {
    b34e:	42a3      	cmp	r3, r4
    b350:	d106      	bne.n	b360 <bt_gatt_subscribe+0x100>
	if (sys_slist_is_empty(&sub->list)) {
    b352:	b912      	cbnz	r2, b35a <bt_gatt_subscribe+0xfa>
    b354:	4630      	mov	r0, r6
    b356:	f009 fabe 	bl	148d6 <gatt_sub_remove.part.0>
			return -EALREADY;
    b35a:	f06f 0544 	mvn.w	r5, #68	; 0x44
    b35e:	e7d3      	b.n	b308 <bt_gatt_subscribe+0xa8>
		if (tmp->value_handle == params->value_handle &&
    b360:	889f      	ldrh	r7, [r3, #4]
    b362:	88a0      	ldrh	r0, [r4, #4]
    b364:	4287      	cmp	r7, r0
    b366:	d104      	bne.n	b372 <bt_gatt_subscribe+0x112>
    b368:	891f      	ldrh	r7, [r3, #8]
    b36a:	8920      	ldrh	r0, [r4, #8]
			has_subscription = true;
    b36c:	4287      	cmp	r7, r0
    b36e:	bf28      	it	cs
    b370:	2101      	movcs	r1, #1
Z_GENLIST_PEEK_NEXT(slist, snode)
    b372:	f113 0f10 	cmn.w	r3, #16
    b376:	d0da      	beq.n	b32e <bt_gatt_subscribe+0xce>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    b378:	691b      	ldr	r3, [r3, #16]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
    b37a:	2b00      	cmp	r3, #0
    b37c:	d0d7      	beq.n	b32e <bt_gatt_subscribe+0xce>
    b37e:	3b10      	subs	r3, #16
    b380:	e7d4      	b.n	b32c <bt_gatt_subscribe+0xcc>
Z_GENLIST_PREPEND(slist, snode)
    b382:	68b2      	ldr	r2, [r6, #8]
	sys_slist_prepend(&sub->list, &params->node);
    b384:	f104 0310 	add.w	r3, r4, #16
	parent->next = child;
    b388:	6122      	str	r2, [r4, #16]
Z_GENLIST_PREPEND(slist, snode)
    b38a:	68f5      	ldr	r5, [r6, #12]
	list->head = node;
    b38c:	60b3      	str	r3, [r6, #8]
Z_GENLIST_PREPEND(slist, snode)
    b38e:	b925      	cbnz	r5, b39a <bt_gatt_subscribe+0x13a>
	list->tail = node;
    b390:	60f3      	str	r3, [r6, #12]
}
    b392:	e7b9      	b.n	b308 <bt_gatt_subscribe+0xa8>
		return -ENOTCONN;
    b394:	f06f 0538 	mvn.w	r5, #56	; 0x38
    b398:	e7b6      	b.n	b308 <bt_gatt_subscribe+0xa8>
	return 0;
    b39a:	2500      	movs	r5, #0
    b39c:	e7b4      	b.n	b308 <bt_gatt_subscribe+0xa8>
    b39e:	bf00      	nop
    b3a0:	00019e2d 	.word	0x00019e2d
    b3a4:	0001a5b3 	.word	0x0001a5b3
    b3a8:	00017b50 	.word	0x00017b50
    b3ac:	0001a806 	.word	0x0001a806
    b3b0:	0001a9af 	.word	0x0001a9af
    b3b4:	0001a9c8 	.word	0x0001a9c8
    b3b8:	0001a9d6 	.word	0x0001a9d6

0000b3bc <bt_gatt_unsubscribe>:
{
    b3bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b3c0:	460e      	mov	r6, r1
	__ASSERT(conn, "invalid parameters\n");
    b3c2:	4680      	mov	r8, r0
    b3c4:	b970      	cbnz	r0, b3e4 <bt_gatt_unsubscribe+0x28>
    b3c6:	494b      	ldr	r1, [pc, #300]	; (b4f4 <bt_gatt_unsubscribe+0x138>)
    b3c8:	f640 6347 	movw	r3, #3655	; 0xe47
    b3cc:	4a4a      	ldr	r2, [pc, #296]	; (b4f8 <bt_gatt_unsubscribe+0x13c>)
    b3ce:	484b      	ldr	r0, [pc, #300]	; (b4fc <bt_gatt_unsubscribe+0x140>)
    b3d0:	f006 fdba 	bl	11f48 <printk>
    b3d4:	484a      	ldr	r0, [pc, #296]	; (b500 <bt_gatt_unsubscribe+0x144>)
    b3d6:	f006 fdb7 	bl	11f48 <printk>
    b3da:	f640 6147 	movw	r1, #3655	; 0xe47
    b3de:	4846      	ldr	r0, [pc, #280]	; (b4f8 <bt_gatt_unsubscribe+0x13c>)
    b3e0:	f007 f848 	bl	12474 <assert_post_action>
	__ASSERT(params, "invalid parameters\n");
    b3e4:	b976      	cbnz	r6, b404 <bt_gatt_unsubscribe+0x48>
    b3e6:	4947      	ldr	r1, [pc, #284]	; (b504 <bt_gatt_unsubscribe+0x148>)
    b3e8:	f640 6348 	movw	r3, #3656	; 0xe48
    b3ec:	4a42      	ldr	r2, [pc, #264]	; (b4f8 <bt_gatt_unsubscribe+0x13c>)
    b3ee:	4843      	ldr	r0, [pc, #268]	; (b4fc <bt_gatt_unsubscribe+0x140>)
    b3f0:	f006 fdaa 	bl	11f48 <printk>
    b3f4:	4842      	ldr	r0, [pc, #264]	; (b500 <bt_gatt_unsubscribe+0x144>)
    b3f6:	f006 fda7 	bl	11f48 <printk>
    b3fa:	f640 6148 	movw	r1, #3656	; 0xe48
    b3fe:	483e      	ldr	r0, [pc, #248]	; (b4f8 <bt_gatt_unsubscribe+0x13c>)
    b400:	f007 f838 	bl	12474 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
    b404:	f898 300d 	ldrb.w	r3, [r8, #13]
    b408:	2b07      	cmp	r3, #7
    b40a:	d170      	bne.n	b4ee <bt_gatt_unsubscribe+0x132>
	sub = gatt_sub_find(conn);
    b40c:	2100      	movs	r1, #0
    b40e:	4640      	mov	r0, r8
    b410:	f7fe fbe2 	bl	9bd8 <gatt_sub_find_free>
	if (!sub) {
    b414:	4607      	mov	r7, r0
    b416:	b920      	cbnz	r0, b422 <bt_gatt_unsubscribe+0x66>
		return -EINVAL;
    b418:	f06f 0015 	mvn.w	r0, #21
}
    b41c:	b003      	add	sp, #12
    b41e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
    b422:	6884      	ldr	r4, [r0, #8]
    b424:	b1d4      	cbz	r4, b45c <bt_gatt_unsubscribe+0xa0>
    b426:	f1b4 0510 	subs.w	r5, r4, #16
    b42a:	d019      	beq.n	b460 <bt_gatt_unsubscribe+0xa4>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    b42c:	6824      	ldr	r4, [r4, #0]
    b42e:	b104      	cbz	r4, b432 <bt_gatt_unsubscribe+0x76>
    b430:	3c10      	subs	r4, #16
    b432:	f04f 0900 	mov.w	r9, #0
    b436:	46cb      	mov	fp, r9
    b438:	46ca      	mov	sl, r9
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b43a:	f106 020c 	add.w	r2, r6, #12
    b43e:	b98d      	cbnz	r5, b464 <bt_gatt_unsubscribe+0xa8>
	if (!found) {
    b440:	f1bb 0f00 	cmp.w	fp, #0
    b444:	d0e8      	beq.n	b418 <bt_gatt_unsubscribe+0x5c>
	if (has_subscription) {
    b446:	f1ba 0f00 	cmp.w	sl, #0
    b44a:	d045      	beq.n	b4d8 <bt_gatt_unsubscribe+0x11c>
		params->notify(conn, params, NULL, 0);
    b44c:	462b      	mov	r3, r5
    b44e:	462a      	mov	r2, r5
    b450:	4631      	mov	r1, r6
    b452:	4640      	mov	r0, r8
    b454:	6834      	ldr	r4, [r6, #0]
    b456:	47a0      	blx	r4
		return 0;
    b458:	4628      	mov	r0, r5
    b45a:	e7df      	b.n	b41c <bt_gatt_unsubscribe+0x60>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
    b45c:	4625      	mov	r5, r4
    b45e:	e7e8      	b.n	b432 <bt_gatt_unsubscribe+0x76>
    b460:	462c      	mov	r4, r5
    b462:	e7e6      	b.n	b432 <bt_gatt_unsubscribe+0x76>
		if (params == tmp) {
    b464:	42b5      	cmp	r5, r6
    b466:	f105 0110 	add.w	r1, r5, #16
    b46a:	d128      	bne.n	b4be <bt_gatt_unsubscribe+0x102>
Z_GENLIST_REMOVE(slist, snode)
    b46c:	692b      	ldr	r3, [r5, #16]
    b46e:	f1b9 0f00 	cmp.w	r9, #0
    b472:	d11c      	bne.n	b4ae <bt_gatt_unsubscribe+0xf2>
    b474:	68f8      	ldr	r0, [r7, #12]
	list->head = node;
    b476:	60bb      	str	r3, [r7, #8]
Z_GENLIST_REMOVE(slist, snode)
    b478:	4281      	cmp	r1, r0
    b47a:	d100      	bne.n	b47e <bt_gatt_unsubscribe+0xc2>
	list->tail = node;
    b47c:	60fb      	str	r3, [r7, #12]
	parent->next = child;
    b47e:	2300      	movs	r3, #0
    b480:	612b      	str	r3, [r5, #16]
    b482:	e8d2 1faf 	lda	r1, [r2]
			if (atomic_test_bit(params->flags,
    b486:	074b      	lsls	r3, r1, #29
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    b488:	f3c1 0b80 	ubfx	fp, r1, #2, #1
    b48c:	d51f      	bpl.n	b4ce <bt_gatt_unsubscribe+0x112>
	bt_att_req_cancel(conn, params);
    b48e:	4631      	mov	r1, r6
    b490:	4640      	mov	r0, r8
    b492:	9201      	str	r2, [sp, #4]
    b494:	f7fe f968 	bl	9768 <bt_att_req_cancel>
}
    b498:	9a01      	ldr	r2, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
    b49a:	b1dc      	cbz	r4, b4d4 <bt_gatt_unsubscribe+0x118>
Z_GENLIST_PEEK_NEXT(slist, snode)
    b49c:	f114 0110 	adds.w	r1, r4, #16
    b4a0:	d002      	beq.n	b4a8 <bt_gatt_unsubscribe+0xec>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    b4a2:	6921      	ldr	r1, [r4, #16]
    b4a4:	b101      	cbz	r1, b4a8 <bt_gatt_unsubscribe+0xec>
    b4a6:	3910      	subs	r1, #16
    b4a8:	4625      	mov	r5, r4
    b4aa:	460c      	mov	r4, r1
    b4ac:	e7c7      	b.n	b43e <bt_gatt_unsubscribe+0x82>
	parent->next = child;
    b4ae:	f8c9 3000 	str.w	r3, [r9]
Z_GENLIST_REMOVE(slist, snode)
    b4b2:	68f8      	ldr	r0, [r7, #12]
    b4b4:	4281      	cmp	r1, r0
	list->tail = node;
    b4b6:	bf08      	it	eq
    b4b8:	f8c7 900c 	streq.w	r9, [r7, #12]
}
    b4bc:	e7df      	b.n	b47e <bt_gatt_unsubscribe+0xc2>
		if (tmp->value_handle == params->value_handle) {
    b4be:	88ad      	ldrh	r5, [r5, #4]
    b4c0:	88b0      	ldrh	r0, [r6, #4]
    b4c2:	4689      	mov	r9, r1
    b4c4:	4285      	cmp	r5, r0
    b4c6:	bf08      	it	eq
    b4c8:	f04f 0a01 	moveq.w	sl, #1
    b4cc:	e7e5      	b.n	b49a <bt_gatt_unsubscribe+0xde>
			found = true;
    b4ce:	f04f 0b01 	mov.w	fp, #1
    b4d2:	e7e2      	b.n	b49a <bt_gatt_unsubscribe+0xde>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
    b4d4:	4621      	mov	r1, r4
    b4d6:	e7e7      	b.n	b4a8 <bt_gatt_unsubscribe+0xec>
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
    b4d8:	4633      	mov	r3, r6
    b4da:	4652      	mov	r2, sl
    b4dc:	4640      	mov	r0, r8
    b4de:	88f1      	ldrh	r1, [r6, #6]
	params->value = 0x0000;
    b4e0:	f8a6 a008 	strh.w	sl, [r6, #8]
}
    b4e4:	b003      	add	sp, #12
    b4e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
    b4ea:	f7fe bdf5 	b.w	a0d8 <gatt_write_ccc.constprop.0>
		return -ENOTCONN;
    b4ee:	f06f 0038 	mvn.w	r0, #56	; 0x38
    b4f2:	e793      	b.n	b41c <bt_gatt_unsubscribe+0x60>
    b4f4:	00019e2d 	.word	0x00019e2d
    b4f8:	0001a5b3 	.word	0x0001a5b3
    b4fc:	00017b50 	.word	0x00017b50
    b500:	0001a806 	.word	0x0001a806
    b504:	0001a7ff 	.word	0x0001a7ff

0000b508 <bt_gatt_connected>:
	data.sec = BT_SECURITY_L1;
    b508:	2301      	movs	r3, #1
{
    b50a:	b570      	push	{r4, r5, r6, lr}
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b50c:	f100 067c 	add.w	r6, r0, #124	; 0x7c
{
    b510:	b08e      	sub	sp, #56	; 0x38
    b512:	4605      	mov	r5, r0
	data.conn = conn;
    b514:	9003      	str	r0, [sp, #12]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b516:	4631      	mov	r1, r6
    b518:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
    b51a:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b51e:	f008 facf 	bl	13ac0 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
    b522:	b190      	cbz	r0, b54a <bt_gatt_connected+0x42>
		if (conn->id) {
    b524:	7a2a      	ldrb	r2, [r5, #8]
    b526:	b362      	cbz	r2, b582 <bt_gatt_connected+0x7a>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
    b528:	ac02      	add	r4, sp, #8
    b52a:	2104      	movs	r1, #4
    b52c:	4620      	mov	r0, r4
    b52e:	f006 fc75 	bl	11e1c <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
    b532:	9400      	str	r4, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
    b534:	2124      	movs	r1, #36	; 0x24
    b536:	4a1f      	ldr	r2, [pc, #124]	; (b5b4 <bt_gatt_connected+0xac>)
    b538:	a805      	add	r0, sp, #20
    b53a:	4633      	mov	r3, r6
    b53c:	f7f9 f9cc 	bl	48d8 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
    b540:	aa05      	add	r2, sp, #20
    b542:	4610      	mov	r0, r2
    b544:	491c      	ldr	r1, [pc, #112]	; (b5b8 <bt_gatt_connected+0xb0>)
    b546:	f7f6 fbcb 	bl	1ce0 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    b54a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b54e:	2001      	movs	r0, #1
    b550:	4a1a      	ldr	r2, [pc, #104]	; (b5bc <bt_gatt_connected+0xb4>)
    b552:	ab03      	add	r3, sp, #12
    b554:	f009 fb5b 	bl	14c0e <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
    b558:	4628      	mov	r0, r5
    b55a:	f008 fb93 	bl	13c84 <bt_conn_get_security>
    b55e:	f89d 1010 	ldrb.w	r1, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    b562:	4288      	cmp	r0, r1
    b564:	d202      	bcs.n	b56c <bt_gatt_connected+0x64>
		bt_conn_set_security(conn, data.sec);
    b566:	4628      	mov	r0, r5
    b568:	f008 fb5d 	bl	13c26 <bt_conn_set_security>
	sub = gatt_sub_find(conn);
    b56c:	2100      	movs	r1, #0
    b56e:	4628      	mov	r0, r5
    b570:	f7fe fb32 	bl	9bd8 <gatt_sub_find_free>
	if (!sub) {
    b574:	b118      	cbz	r0, b57e <bt_gatt_connected+0x76>
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
    b576:	6884      	ldr	r4, [r0, #8]
    b578:	b10c      	cbz	r4, b57e <bt_gatt_connected+0x76>
    b57a:	3c10      	subs	r4, #16
    b57c:	b91c      	cbnz	r4, b586 <bt_gatt_connected+0x7e>
}
    b57e:	b00e      	add	sp, #56	; 0x38
    b580:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
    b582:	9200      	str	r2, [sp, #0]
    b584:	e7d6      	b.n	b534 <bt_gatt_connected+0x2c>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
    b586:	4631      	mov	r1, r6
    b588:	7a28      	ldrb	r0, [r5, #8]
    b58a:	f008 fa99 	bl	13ac0 <bt_addr_le_is_bonded>
    b58e:	b158      	cbz	r0, b5a8 <bt_gatt_connected+0xa0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b590:	f104 030c 	add.w	r3, r4, #12
    b594:	e8d3 3faf 	lda	r3, [r3]
    b598:	079b      	lsls	r3, r3, #30
    b59a:	d405      	bmi.n	b5a8 <bt_gatt_connected+0xa0>
			gatt_write_ccc(conn, params->ccc_handle, params->value,
    b59c:	4623      	mov	r3, r4
    b59e:	4628      	mov	r0, r5
    b5a0:	8922      	ldrh	r2, [r4, #8]
    b5a2:	88e1      	ldrh	r1, [r4, #6]
    b5a4:	f7fe fd98 	bl	a0d8 <gatt_write_ccc.constprop.0>
Z_GENLIST_PEEK_NEXT(slist, snode)
    b5a8:	f114 0f10 	cmn.w	r4, #16
    b5ac:	d0e7      	beq.n	b57e <bt_gatt_connected+0x76>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    b5ae:	6924      	ldr	r4, [r4, #16]
    b5b0:	e7e2      	b.n	b578 <bt_gatt_connected+0x70>
    b5b2:	bf00      	nop
    b5b4:	0001a7ea 	.word	0x0001a7ea
    b5b8:	0000a571 	.word	0x0000a571
    b5bc:	0000a81d 	.word	0x0000a81d

0000b5c0 <bt_gatt_encrypt_change>:
{
    b5c0:	b507      	push	{r0, r1, r2, lr}
	data.conn = conn;
    b5c2:	9000      	str	r0, [sp, #0]
	data.sec = BT_SECURITY_L1;
    b5c4:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    b5c6:	466b      	mov	r3, sp
    b5c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b5cc:	4a03      	ldr	r2, [pc, #12]	; (b5dc <bt_gatt_encrypt_change+0x1c>)
	data.sec = BT_SECURITY_L1;
    b5ce:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    b5d2:	f009 fb1c 	bl	14c0e <bt_gatt_foreach_attr>
}
    b5d6:	b003      	add	sp, #12
    b5d8:	f85d fb04 	ldr.w	pc, [sp], #4
    b5dc:	0000a81d 	.word	0x0000a81d

0000b5e0 <db_hash_read>:
{
    b5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b5e2:	4604      	mov	r4, r0
	err = k_delayed_work_cancel(&db_hash_work);
    b5e4:	4810      	ldr	r0, [pc, #64]	; (b628 <db_hash_read+0x48>)
{
    b5e6:	4615      	mov	r5, r2
    b5e8:	461f      	mov	r7, r3
    b5ea:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	err = k_delayed_work_cancel(&db_hash_work);
    b5ee:	f005 fd15 	bl	1101c <k_delayed_work_cancel>
	if (!err) {
    b5f2:	b910      	cbnz	r0, b5fa <db_hash_read+0x1a>
		db_hash_gen(true);
    b5f4:	2001      	movs	r0, #1
    b5f6:	f7fe ff27 	bl	a448 <db_hash_gen>
	bt_gatt_change_aware(conn, true);
    b5fa:	2101      	movs	r1, #1
    b5fc:	4620      	mov	r0, r4
    b5fe:	f009 fbd3 	bl	14da8 <bt_gatt_change_aware>
	if (offset > value_len) {
    b602:	2e10      	cmp	r6, #16
    b604:	d80c      	bhi.n	b620 <db_hash_read+0x40>
	len = MIN(buf_len, value_len - offset);
    b606:	f1c6 0410 	rsb	r4, r6, #16
    b60a:	42bc      	cmp	r4, r7
    b60c:	bfa8      	it	ge
    b60e:	463c      	movge	r4, r7
	memcpy(buf, (u8_t *)value + offset, len);
    b610:	4906      	ldr	r1, [pc, #24]	; (b62c <db_hash_read+0x4c>)
    b612:	4622      	mov	r2, r4
    b614:	4628      	mov	r0, r5
    b616:	4431      	add	r1, r6
    b618:	f007 ffaa 	bl	13570 <memcpy>
}
    b61c:	4620      	mov	r0, r4
    b61e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    b620:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
    b624:	e7fa      	b.n	b61c <db_hash_read+0x3c>
    b626:	bf00      	nop
    b628:	20000f68 	.word	0x20000f68
    b62c:	20001f65 	.word	0x20001f65

0000b630 <bt_gatt_store_ccc>:
	save.count = 0;
    b630:	2300      	movs	r3, #0
{
    b632:	b570      	push	{r4, r5, r6, lr}
    b634:	4604      	mov	r4, r0
    b636:	b0c0      	sub	sp, #256	; 0x100
    b638:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
    b63a:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
    b63c:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
    b640:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
    b642:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b646:	2001      	movs	r0, #1
    b648:	4a13      	ldr	r2, [pc, #76]	; (b698 <bt_gatt_store_ccc+0x68>)
    b64a:	ab0d      	add	r3, sp, #52	; 0x34
    b64c:	f009 fadf 	bl	14c0e <bt_gatt_foreach_attr>
	if (id) {
    b650:	b1ec      	cbz	r4, b68e <bt_gatt_store_ccc+0x5e>
		u8_to_dec(id_str, sizeof(id_str), id);
    b652:	ae03      	add	r6, sp, #12
    b654:	4622      	mov	r2, r4
    b656:	2104      	movs	r1, #4
    b658:	4630      	mov	r0, r6
    b65a:	f006 fbdf 	bl	11e1c <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
    b65e:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    b660:	4a0e      	ldr	r2, [pc, #56]	; (b69c <bt_gatt_store_ccc+0x6c>)
    b662:	462b      	mov	r3, r5
    b664:	2124      	movs	r1, #36	; 0x24
    b666:	a804      	add	r0, sp, #16
    b668:	f7f9 f936 	bl	48d8 <bt_settings_encode_key>
	if (save.count) {
    b66c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
    b66e:	b182      	cbz	r2, b692 <bt_gatt_store_ccc+0x62>
		len = save.count * sizeof(*save.store);
    b670:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
    b672:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
    b674:	a804      	add	r0, sp, #16
    b676:	f7f6 fad3 	bl	1c20 <settings_save_one>
	if (err) {
    b67a:	4604      	mov	r4, r0
    b67c:	b120      	cbz	r0, b688 <bt_gatt_store_ccc+0x58>
		BT_ERR("Failed to store CCCs (err %d)", err);
    b67e:	4602      	mov	r2, r0
    b680:	2145      	movs	r1, #69	; 0x45
    b682:	4807      	ldr	r0, [pc, #28]	; (b6a0 <bt_gatt_store_ccc+0x70>)
    b684:	f006 fc60 	bl	11f48 <printk>
}
    b688:	4620      	mov	r0, r4
    b68a:	b040      	add	sp, #256	; 0x100
    b68c:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    b68e:	9400      	str	r4, [sp, #0]
    b690:	e7e6      	b.n	b660 <bt_gatt_store_ccc+0x30>
		str = NULL;
    b692:	4611      	mov	r1, r2
    b694:	e7ee      	b.n	b674 <bt_gatt_store_ccc+0x44>
    b696:	bf00      	nop
    b698:	00009a2d 	.word	0x00009a2d
    b69c:	0001a7ea 	.word	0x0001a7ea
    b6a0:	0001a9e9 	.word	0x0001a9e9

0000b6a4 <bt_gatt_disconnected>:
{
    b6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b6a8:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    b6aa:	4603      	mov	r3, r0
    b6ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b6b0:	2001      	movs	r0, #1
{
    b6b2:	b08d      	sub	sp, #52	; 0x34
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    b6b4:	4a48      	ldr	r2, [pc, #288]	; (b7d8 <bt_gatt_disconnected+0x134>)
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b6b6:	f104 067c 	add.w	r6, r4, #124	; 0x7c
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    b6ba:	f009 faa8 	bl	14c0e <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b6be:	4631      	mov	r1, r6
    b6c0:	7a20      	ldrb	r0, [r4, #8]
    b6c2:	f008 f9fd 	bl	13ac0 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    b6c6:	b378      	cbz	r0, b728 <bt_gatt_disconnected+0x84>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
    b6c8:	4631      	mov	r1, r6
    b6ca:	7a20      	ldrb	r0, [r4, #8]
    b6cc:	f7ff ffb0 	bl	b630 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
    b6d0:	4620      	mov	r0, r4
    b6d2:	f7fe fc09 	bl	9ee8 <find_cf_cfg>
	if (!cfg) {
    b6d6:	4605      	mov	r5, r0
    b6d8:	2800      	cmp	r0, #0
    b6da:	d04f      	beq.n	b77c <bt_gatt_disconnected+0xd8>
		if (conn->id) {
    b6dc:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
    b6de:	3508      	adds	r5, #8
		if (conn->id) {
    b6e0:	2a00      	cmp	r2, #0
    b6e2:	d04d      	beq.n	b780 <bt_gatt_disconnected+0xdc>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
    b6e4:	af02      	add	r7, sp, #8
    b6e6:	2104      	movs	r1, #4
    b6e8:	4638      	mov	r0, r7
    b6ea:	f006 fb97 	bl	11e1c <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
    b6ee:	4633      	mov	r3, r6
    b6f0:	9700      	str	r7, [sp, #0]
    b6f2:	2124      	movs	r1, #36	; 0x24
    b6f4:	4a39      	ldr	r2, [pc, #228]	; (b7dc <bt_gatt_disconnected+0x138>)
    b6f6:	a803      	add	r0, sp, #12
    b6f8:	f7f9 f8ee 	bl	48d8 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
    b6fc:	7a23      	ldrb	r3, [r4, #8]
    b6fe:	2701      	movs	r7, #1
    b700:	b93b      	cbnz	r3, b712 <bt_gatt_disconnected+0x6e>
		bt_settings_encode_key(key, sizeof(key), "cf",
    b702:	2300      	movs	r3, #0
    b704:	2124      	movs	r1, #36	; 0x24
    b706:	9300      	str	r3, [sp, #0]
    b708:	4a34      	ldr	r2, [pc, #208]	; (b7dc <bt_gatt_disconnected+0x138>)
    b70a:	4633      	mov	r3, r6
    b70c:	a803      	add	r0, sp, #12
    b70e:	f7f9 f8e3 	bl	48d8 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
    b712:	463a      	mov	r2, r7
    b714:	4629      	mov	r1, r5
    b716:	a803      	add	r0, sp, #12
    b718:	f7f6 fa82 	bl	1c20 <settings_save_one>
	if (err) {
    b71c:	4602      	mov	r2, r0
    b71e:	b118      	cbz	r0, b728 <bt_gatt_disconnected+0x84>
		BT_ERR("Failed to store Client Features (err %d)", err);
    b720:	2145      	movs	r1, #69	; 0x45
    b722:	482f      	ldr	r0, [pc, #188]	; (b7e0 <bt_gatt_disconnected+0x13c>)
    b724:	f006 fc10 	bl	11f48 <printk>
	sub = gatt_sub_find(conn);
    b728:	2100      	movs	r1, #0
    b72a:	4620      	mov	r0, r4
    b72c:	f7fe fa54 	bl	9bd8 <gatt_sub_find_free>
	if (!sub) {
    b730:	4607      	mov	r7, r0
    b732:	b3b0      	cbz	r0, b7a2 <bt_gatt_disconnected+0xfe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    b734:	6883      	ldr	r3, [r0, #8]
    b736:	b3a3      	cbz	r3, b7a2 <bt_gatt_disconnected+0xfe>
    b738:	f1b3 0810 	subs.w	r8, r3, #16
    b73c:	d031      	beq.n	b7a2 <bt_gatt_disconnected+0xfe>
    b73e:	681d      	ldr	r5, [r3, #0]
    b740:	b105      	cbz	r5, b744 <bt_gatt_disconnected+0xa0>
    b742:	3d10      	subs	r5, #16
    b744:	f04f 0b00 	mov.w	fp, #0
			params->value = 0U;
    b748:	46da      	mov	sl, fp
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
    b74a:	f107 0901 	add.w	r9, r7, #1
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    b74e:	4631      	mov	r1, r6
    b750:	7a20      	ldrb	r0, [r4, #8]
    b752:	f008 f9b5 	bl	13ac0 <bt_addr_le_is_bonded>
    b756:	b9a8      	cbnz	r0, b784 <bt_gatt_disconnected+0xe0>
			gatt_sub_remove(conn, sub, prev, params);
    b758:	4643      	mov	r3, r8
    b75a:	465a      	mov	r2, fp
    b75c:	4639      	mov	r1, r7
    b75e:	4620      	mov	r0, r4
			params->value = 0U;
    b760:	f8a8 a008 	strh.w	sl, [r8, #8]
			gatt_sub_remove(conn, sub, prev, params);
    b764:	f009 f9c6 	bl	14af4 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    b768:	b1dd      	cbz	r5, b7a2 <bt_gatt_disconnected+0xfe>
Z_GENLIST_PEEK_NEXT(slist, snode)
    b76a:	f115 0110 	adds.w	r1, r5, #16
    b76e:	d002      	beq.n	b776 <bt_gatt_disconnected+0xd2>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    b770:	6929      	ldr	r1, [r5, #16]
    b772:	b101      	cbz	r1, b776 <bt_gatt_disconnected+0xd2>
    b774:	3910      	subs	r1, #16
    b776:	46a8      	mov	r8, r5
    b778:	460d      	mov	r5, r1
    b77a:	e7e8      	b.n	b74e <bt_gatt_disconnected+0xaa>
		len = 0;
    b77c:	4607      	mov	r7, r0
    b77e:	e7c0      	b.n	b702 <bt_gatt_disconnected+0x5e>
    b780:	2701      	movs	r7, #1
    b782:	e7be      	b.n	b702 <bt_gatt_disconnected+0x5e>
    b784:	f108 030c 	add.w	r3, r8, #12
    b788:	e8d3 3faf 	lda	r3, [r3]
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    b78c:	07db      	lsls	r3, r3, #31
    b78e:	d4e3      	bmi.n	b758 <bt_gatt_disconnected+0xb4>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
    b790:	787b      	ldrb	r3, [r7, #1]
    b792:	b11b      	cbz	r3, b79c <bt_gatt_disconnected+0xf8>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
    b794:	4631      	mov	r1, r6
    b796:	4648      	mov	r0, r9
    b798:	f009 f881 	bl	1489e <bt_addr_le_copy>
			prev = &params->node;
    b79c:	f108 0b10 	add.w	fp, r8, #16
    b7a0:	e7e2      	b.n	b768 <bt_gatt_disconnected+0xc4>
	cfg = find_cf_cfg(conn);
    b7a2:	4620      	mov	r0, r4
    b7a4:	f7fe fba0 	bl	9ee8 <find_cf_cfg>
	if (!cfg) {
    b7a8:	4605      	mov	r5, r0
    b7aa:	b138      	cbz	r0, b7bc <bt_gatt_disconnected+0x118>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b7ac:	4631      	mov	r1, r6
    b7ae:	7a20      	ldrb	r0, [r4, #8]
    b7b0:	f008 f986 	bl	13ac0 <bt_addr_le_is_bonded>
    b7b4:	b928      	cbnz	r0, b7c2 <bt_gatt_disconnected+0x11e>
		clear_cf_cfg(cfg);
    b7b6:	4628      	mov	r0, r5
    b7b8:	f009 f899 	bl	148ee <clear_cf_cfg>
}
    b7bc:	b00d      	add	sp, #52	; 0x34
    b7be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    b7c2:	4631      	mov	r1, r6
    b7c4:	1c68      	adds	r0, r5, #1
    b7c6:	f009 f86a 	bl	1489e <bt_addr_le_copy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b7ca:	f06f 0102 	mvn.w	r1, #2
    b7ce:	f105 000c 	add.w	r0, r5, #12
    b7d2:	f009 f875 	bl	148c0 <atomic_and>
}
    b7d6:	e7f1      	b.n	b7bc <bt_gatt_disconnected+0x118>
    b7d8:	0000a1d9 	.word	0x0000a1d9
    b7dc:	0001aa3d 	.word	0x0001aa3d
    b7e0:	0001aa0c 	.word	0x0001aa0c

0000b7e4 <get_io_capa>:
static const u8_t *sc_public_key;
static K_SEM_DEFINE(sc_local_pkey_ready, 0, 1);

static u8_t get_io_capa(void)
{
	if (!bt_auth) {
    b7e4:	4b10      	ldr	r3, [pc, #64]	; (b828 <get_io_capa+0x44>)
    b7e6:	681b      	ldr	r3, [r3, #0]
    b7e8:	b1bb      	cbz	r3, b81a <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    b7ea:	681a      	ldr	r2, [r3, #0]
    b7ec:	b142      	cbz	r2, b800 <get_io_capa+0x1c>
    b7ee:	6859      	ldr	r1, [r3, #4]
    b7f0:	b131      	cbz	r1, b800 <get_io_capa+0x1c>
    b7f2:	6899      	ldr	r1, [r3, #8]
    b7f4:	b911      	cbnz	r1, b7fc <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    b7f6:	490d      	ldr	r1, [pc, #52]	; (b82c <get_io_capa+0x48>)
    b7f8:	7809      	ldrb	r1, [r1, #0]
    b7fa:	b939      	cbnz	r1, b80c <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    b7fc:	2004      	movs	r0, #4
    b7fe:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    b800:	490a      	ldr	r1, [pc, #40]	; (b82c <get_io_capa+0x48>)
    b802:	7809      	ldrb	r1, [r1, #0]
    b804:	b111      	cbz	r1, b80c <get_io_capa+0x28>
    b806:	b10a      	cbz	r2, b80c <get_io_capa+0x28>
    b808:	6899      	ldr	r1, [r3, #8]
    b80a:	b941      	cbnz	r1, b81e <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
    b80c:	685b      	ldr	r3, [r3, #4]
    b80e:	b943      	cbnz	r3, b822 <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
    b810:	2a00      	cmp	r2, #0
    b812:	bf0c      	ite	eq
    b814:	2003      	moveq	r0, #3
    b816:	2000      	movne	r0, #0
    b818:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
    b81a:	2003      	movs	r0, #3
    b81c:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
    b81e:	2001      	movs	r0, #1
    b820:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
    b822:	2002      	movs	r0, #2
	}
}
    b824:	4770      	bx	lr
    b826:	bf00      	nop
    b828:	20000d20 	.word	0x20000d20
    b82c:	20001f86 	.word	0x20001f86

0000b830 <sys_memcpy_swap>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
    b830:	4288      	cmp	r0, r1
{
    b832:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b834:	4604      	mov	r4, r0
    b836:	460d      	mov	r5, r1
    b838:	4616      	mov	r6, r2
    b83a:	eb00 0702 	add.w	r7, r0, r2
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
    b83e:	d91a      	bls.n	b876 <sys_memcpy_swap+0x46>
    b840:	188b      	adds	r3, r1, r2
    b842:	4298      	cmp	r0, r3
    b844:	d20e      	bcs.n	b864 <sys_memcpy_swap+0x34>
    b846:	490d      	ldr	r1, [pc, #52]	; (b87c <sys_memcpy_swap+0x4c>)
    b848:	f240 2317 	movw	r3, #535	; 0x217
    b84c:	4a0c      	ldr	r2, [pc, #48]	; (b880 <sys_memcpy_swap+0x50>)
    b84e:	480d      	ldr	r0, [pc, #52]	; (b884 <sys_memcpy_swap+0x54>)
    b850:	f006 fb7a 	bl	11f48 <printk>
    b854:	480c      	ldr	r0, [pc, #48]	; (b888 <sys_memcpy_swap+0x58>)
    b856:	f006 fb77 	bl	11f48 <printk>
    b85a:	f240 2117 	movw	r1, #535	; 0x217
    b85e:	4808      	ldr	r0, [pc, #32]	; (b880 <sys_memcpy_swap+0x50>)
    b860:	f006 fe08 	bl	12474 <assert_post_action>
	psrc += length - 1;
    b864:	3e01      	subs	r6, #1
    b866:	4435      	add	r5, r6
		*pdst++ = *psrc--;
    b868:	f815 3901 	ldrb.w	r3, [r5], #-1
    b86c:	f804 3b01 	strb.w	r3, [r4], #1
	for (; length > 0; length--) {
    b870:	42bc      	cmp	r4, r7
    b872:	d1f9      	bne.n	b868 <sys_memcpy_swap+0x38>
}
    b874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
    b876:	d0e6      	beq.n	b846 <sys_memcpy_swap+0x16>
    b878:	42b9      	cmp	r1, r7
    b87a:	e7e3      	b.n	b844 <sys_memcpy_swap+0x14>
    b87c:	00019a3d 	.word	0x00019a3d
    b880:	00019a12 	.word	0x00019a12
    b884:	00017b50 	.word	0x00017b50
    b888:	00019a94 	.word	0x00019a94

0000b88c <smp_chan_get>:
		return false;
	}
}

static struct bt_smp *smp_chan_get(struct bt_conn *conn)
{
    b88c:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    b88e:	2106      	movs	r1, #6
    b890:	f008 fc6e 	bl	14170 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    b894:	4604      	mov	r4, r0
    b896:	b918      	cbnz	r0, b8a0 <smp_chan_get+0x14>
		BT_ERR("Unable to find SMP channel");
    b898:	2145      	movs	r1, #69	; 0x45
    b89a:	4802      	ldr	r0, [pc, #8]	; (b8a4 <smp_chan_get+0x18>)
    b89c:	f006 fb54 	bl	11f48 <printk>
		return NULL;
	}

	return CONTAINER_OF(chan, struct bt_smp, chan);
}
    b8a0:	4620      	mov	r0, r4
    b8a2:	bd10      	pop	{r4, pc}
    b8a4:	0001aa4e 	.word	0x0001aa4e

0000b8a8 <bt_smp_accept>:
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    b8a8:	b508      	push	{r3, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
    b8aa:	4b07      	ldr	r3, [pc, #28]	; (b8c8 <bt_smp_accept+0x20>)
{
    b8ac:	4602      	mov	r2, r0
		if (smp->chan.chan.conn) {
    b8ae:	6818      	ldr	r0, [r3, #0]
    b8b0:	b918      	cbnz	r0, b8ba <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.chan.ops = &ops;
    b8b2:	4a06      	ldr	r2, [pc, #24]	; (b8cc <bt_smp_accept+0x24>)
    b8b4:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan.chan;
    b8b6:	600b      	str	r3, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    b8b8:	bd08      	pop	{r3, pc}
	BT_ERR("No available SMP context for conn %p", conn);
    b8ba:	4805      	ldr	r0, [pc, #20]	; (b8d0 <bt_smp_accept+0x28>)
    b8bc:	2145      	movs	r1, #69	; 0x45
    b8be:	f006 fb43 	bl	11f48 <printk>
    b8c2:	f06f 000b 	mvn.w	r0, #11
    b8c6:	e7f7      	b.n	b8b8 <bt_smp_accept+0x10>
    b8c8:	20000ffc 	.word	0x20000ffc
    b8cc:	00017334 	.word	0x00017334
    b8d0:	0001aa6e 	.word	0x0001aa6e

0000b8d4 <smp_send.isra.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    b8d4:	4613      	mov	r3, r2
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    b8d6:	2200      	movs	r2, #0
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    b8d8:	b513      	push	{r0, r1, r4, lr}
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    b8da:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    b8dc:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    b8de:	460a      	mov	r2, r1
    b8e0:	6800      	ldr	r0, [r0, #0]
    b8e2:	2106      	movs	r1, #6
    b8e4:	f008 fb5b 	bl	13f9e <bt_l2cap_send_cb>
    b8e8:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    b8ec:	2300      	movs	r3, #0
    b8ee:	4804      	ldr	r0, [pc, #16]	; (b900 <smp_send.isra.0+0x2c>)
    b8f0:	f504 71ce 	add.w	r1, r4, #412	; 0x19c
}
    b8f4:	b002      	add	sp, #8
    b8f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b8fa:	f005 bb05 	b.w	10f08 <k_delayed_work_submit_to_queue>
    b8fe:	bf00      	nop
    b900:	20001dc8 	.word	0x20001dc8

0000b904 <sc_send_public_key>:
{
    b904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    b906:	210c      	movs	r1, #12
{
    b908:	4605      	mov	r5, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    b90a:	f009 fb50 	bl	14fae <smp_create_pdu.isra.0>
	if (!req_buf) {
    b90e:	4604      	mov	r4, r0
    b910:	b1b0      	cbz	r0, b940 <sc_send_public_key+0x3c>
	req = net_buf_add(req_buf, sizeof(*req));
    b912:	2140      	movs	r1, #64	; 0x40
    b914:	3008      	adds	r0, #8
    b916:	f001 fe93 	bl	d640 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
    b91a:	4f0a      	ldr	r7, [pc, #40]	; (b944 <sc_send_public_key+0x40>)
    b91c:	2220      	movs	r2, #32
    b91e:	6839      	ldr	r1, [r7, #0]
	req = net_buf_add(req_buf, sizeof(*req));
    b920:	4606      	mov	r6, r0
	memcpy(req->x, sc_public_key, sizeof(req->x));
    b922:	f007 fe25 	bl	13570 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    b926:	2220      	movs	r2, #32
    b928:	6839      	ldr	r1, [r7, #0]
    b92a:	18b0      	adds	r0, r6, r2
    b92c:	4411      	add	r1, r2
    b92e:	f007 fe1f 	bl	13570 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
    b932:	4628      	mov	r0, r5
    b934:	2200      	movs	r2, #0
    b936:	4621      	mov	r1, r4
    b938:	f7ff ffcc 	bl	b8d4 <smp_send.isra.0>
	return 0;
    b93c:	2000      	movs	r0, #0
}
    b93e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    b940:	2008      	movs	r0, #8
    b942:	e7fc      	b.n	b93e <sc_send_public_key+0x3a>
    b944:	200011b8 	.word	0x200011b8

0000b948 <bt_smp_distribute_keys>:
{
    b948:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b94c:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    b94e:	6800      	ldr	r0, [r0, #0]
{
    b950:	b089      	sub	sp, #36	; 0x24
	if (!keys) {
    b952:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
    b956:	b95b      	cbnz	r3, b970 <bt_smp_distribute_keys+0x28>
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
    b958:	307c      	adds	r0, #124	; 0x7c
    b95a:	f7f8 ff1d 	bl	4798 <bt_addr_le_str_real>
    b95e:	2145      	movs	r1, #69	; 0x45
    b960:	4602      	mov	r2, r0
    b962:	483c      	ldr	r0, [pc, #240]	; (ba54 <bt_smp_distribute_keys+0x10c>)
    b964:	f006 faf0 	bl	11f48 <printk>
		return BT_SMP_ERR_UNSPECIFIED;
    b968:	2008      	movs	r0, #8
}
    b96a:	b009      	add	sp, #36	; 0x24
    b96c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    b970:	f104 07b4 	add.w	r7, r4, #180	; 0xb4
    b974:	2105      	movs	r1, #5
    b976:	4638      	mov	r0, r7
    b978:	f009 faf5 	bl	14f66 <atomic_test_bit>
    b97c:	4680      	mov	r8, r0
    b97e:	b9a8      	cbnz	r0, b9ac <bt_smp_distribute_keys+0x64>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    b980:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
    b984:	f013 0001 	ands.w	r0, r3, #1
    b988:	d0ef      	beq.n	b96a <bt_smp_distribute_keys+0x22>
	struct bt_keys *keys = conn->le.keys;
    b98a:	6823      	ldr	r3, [r4, #0]
		bt_rand((void *)&rand, sizeof(rand));
    b98c:	211a      	movs	r1, #26
    b98e:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
    b990:	f8d3 50a8 	ldr.w	r5, [r3, #168]	; 0xa8
		bt_rand((void *)&rand, sizeof(rand));
    b994:	f7fb f900 	bl	6b98 <bt_rand>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
    b998:	2106      	movs	r1, #6
    b99a:	4620      	mov	r0, r4
    b99c:	f009 fb07 	bl	14fae <smp_create_pdu.isra.0>
		if (!buf) {
    b9a0:	4606      	mov	r6, r0
    b9a2:	b928      	cbnz	r0, b9b0 <bt_smp_distribute_keys+0x68>
			BT_ERR("Unable to allocate Encrypt Info buffer");
    b9a4:	2145      	movs	r1, #69	; 0x45
    b9a6:	482c      	ldr	r0, [pc, #176]	; (ba58 <bt_smp_distribute_keys+0x110>)
			BT_ERR("Unable to allocate Master Ident buffer");
    b9a8:	f006 face 	bl	11f48 <printk>
	return 0;
    b9ac:	2000      	movs	r0, #0
    b9ae:	e7dc      	b.n	b96a <bt_smp_distribute_keys+0x22>
		info = net_buf_add(buf, sizeof(*info));
    b9b0:	2110      	movs	r1, #16
    b9b2:	3008      	adds	r0, #8
    b9b4:	f001 fe44 	bl	d640 <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
    b9b8:	7b2a      	ldrb	r2, [r5, #12]
    b9ba:	a901      	add	r1, sp, #4
		info = net_buf_add(buf, sizeof(*info));
    b9bc:	4681      	mov	r9, r0
		memcpy(info->ltk, rand.key, keys->enc_size);
    b9be:	f007 fdd7 	bl	13570 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    b9c2:	7b28      	ldrb	r0, [r5, #12]
    b9c4:	280f      	cmp	r0, #15
    b9c6:	d805      	bhi.n	b9d4 <bt_smp_distribute_keys+0x8c>
			(void)memset(info->ltk + keys->enc_size, 0,
    b9c8:	f1c0 0210 	rsb	r2, r0, #16
    b9cc:	4641      	mov	r1, r8
    b9ce:	4448      	add	r0, r9
    b9d0:	f007 fdf9 	bl	135c6 <memset>
		smp_send(smp, buf, NULL, NULL);
    b9d4:	4631      	mov	r1, r6
    b9d6:	2200      	movs	r2, #0
    b9d8:	4620      	mov	r0, r4
    b9da:	f7ff ff7b 	bl	b8d4 <smp_send.isra.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_MASTER_IDENT,
    b9de:	2107      	movs	r1, #7
    b9e0:	4620      	mov	r0, r4
    b9e2:	f009 fae4 	bl	14fae <smp_create_pdu.isra.0>
		if (!buf) {
    b9e6:	4606      	mov	r6, r0
    b9e8:	b910      	cbnz	r0, b9f0 <bt_smp_distribute_keys+0xa8>
			BT_ERR("Unable to allocate Master Ident buffer");
    b9ea:	2145      	movs	r1, #69	; 0x45
    b9ec:	481b      	ldr	r0, [pc, #108]	; (ba5c <bt_smp_distribute_keys+0x114>)
    b9ee:	e7db      	b.n	b9a8 <bt_smp_distribute_keys+0x60>
		ident = net_buf_add(buf, sizeof(*ident));
    b9f0:	210a      	movs	r1, #10
    b9f2:	3008      	adds	r0, #8
    b9f4:	f001 fe24 	bl	d640 <net_buf_simple_add>
    b9f8:	4680      	mov	r8, r0
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
    b9fa:	2208      	movs	r2, #8
    b9fc:	a905      	add	r1, sp, #20
    b9fe:	3002      	adds	r0, #2
    ba00:	f007 fdb6 	bl	13570 <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
    ba04:	2202      	movs	r2, #2
    ba06:	a907      	add	r1, sp, #28
    ba08:	4640      	mov	r0, r8
    ba0a:	f007 fdb1 	bl	13570 <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
    ba0e:	4631      	mov	r1, r6
    ba10:	4620      	mov	r0, r4
    ba12:	4a13      	ldr	r2, [pc, #76]	; (ba60 <bt_smp_distribute_keys+0x118>)
    ba14:	f7ff ff5e 	bl	b8d4 <smp_send.isra.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    ba18:	210c      	movs	r1, #12
    ba1a:	4638      	mov	r0, r7
    ba1c:	f009 faa3 	bl	14f66 <atomic_test_bit>
    ba20:	2800      	cmp	r0, #0
    ba22:	d0c3      	beq.n	b9ac <bt_smp_distribute_keys+0x64>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    ba24:	4628      	mov	r0, r5
    ba26:	2101      	movs	r1, #1
    ba28:	f009 fdd8 	bl	155dc <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, rand.key,
    ba2c:	a901      	add	r1, sp, #4
    ba2e:	2210      	movs	r2, #16
    ba30:	f105 004a 	add.w	r0, r5, #74	; 0x4a
    ba34:	f007 fd9c 	bl	13570 <memcpy>
			memcpy(keys->slave_ltk.rand, rand.rand,
    ba38:	a905      	add	r1, sp, #20
    ba3a:	2208      	movs	r2, #8
    ba3c:	f105 0040 	add.w	r0, r5, #64	; 0x40
    ba40:	f007 fd96 	bl	13570 <memcpy>
			memcpy(keys->slave_ltk.ediv, rand.ediv,
    ba44:	2202      	movs	r2, #2
    ba46:	a907      	add	r1, sp, #28
    ba48:	f105 0048 	add.w	r0, r5, #72	; 0x48
    ba4c:	f007 fd90 	bl	13570 <memcpy>
    ba50:	e7ac      	b.n	b9ac <bt_smp_distribute_keys+0x64>
    ba52:	bf00      	nop
    ba54:	0001aa98 	.word	0x0001aa98
    ba58:	0001aab2 	.word	0x0001aab2
    ba5c:	0001aade 	.word	0x0001aade
    ba60:	0000c275 	.word	0x0000c275

0000ba64 <compute_and_send_master_dhcheck>:
	(void)memset(r, 0, sizeof(r));
    ba64:	2210      	movs	r2, #16
{
    ba66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ba6a:	4604      	mov	r4, r0
    ba6c:	b0a2      	sub	sp, #136	; 0x88
	(void)memset(r, 0, sizeof(r));
    ba6e:	2100      	movs	r1, #0
    ba70:	eb0d 0002 	add.w	r0, sp, r2
    ba74:	f007 fda7 	bl	135c6 <memset>
	switch (smp->method) {
    ba78:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    ba7c:	2b05      	cmp	r3, #5
    ba7e:	d87d      	bhi.n	bb7c <compute_and_send_master_dhcheck+0x118>
    ba80:	e8df f003 	tbb	[pc, r3]
    ba84:	09030309 	.word	0x09030309
    ba88:	7e7c      	.short	0x7e7c
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    ba8a:	2204      	movs	r2, #4
    ba8c:	f504 71c4 	add.w	r1, r4, #392	; 0x188
    ba90:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    ba92:	f007 fd6d 	bl	13570 <memcpy>
	u8_t m[53] = { 0x00, /* counter */
    ba96:	4b4d      	ldr	r3, [pc, #308]	; (bbcc <compute_and_send_master_dhcheck+0x168>)
		   &smp->chan.chan.conn->le.init_addr,
    ba98:	6825      	ldr	r5, [r4, #0]
	u8_t m[53] = { 0x00, /* counter */
    ba9a:	aa14      	add	r2, sp, #80	; 0x50
    ba9c:	f103 0730 	add.w	r7, r3, #48	; 0x30
    baa0:	4616      	mov	r6, r2
    baa2:	6818      	ldr	r0, [r3, #0]
    baa4:	6859      	ldr	r1, [r3, #4]
    baa6:	3308      	adds	r3, #8
    baa8:	c603      	stmia	r6!, {r0, r1}
    baaa:	42bb      	cmp	r3, r7
    baac:	4632      	mov	r2, r6
    baae:	d1f7      	bne.n	baa0 <compute_and_send_master_dhcheck+0x3c>
    bab0:	6818      	ldr	r0, [r3, #0]
    bab2:	791b      	ldrb	r3, [r3, #4]
	sys_memcpy_swap(ws, w, 32);
    bab4:	2220      	movs	r2, #32
	u8_t m[53] = { 0x00, /* counter */
    bab6:	6030      	str	r0, [r6, #0]
    bab8:	7133      	strb	r3, [r6, #4]
	sys_memcpy_swap(ws, w, 32);
    baba:	f204 1147 	addw	r1, r4, #327	; 0x147
    babe:	a80c      	add	r0, sp, #48	; 0x30
    bac0:	f7ff feb6 	bl	b830 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    bac4:	2220      	movs	r2, #32
    bac6:	4842      	ldr	r0, [pc, #264]	; (bbd0 <compute_and_send_master_dhcheck+0x16c>)
    bac8:	ab08      	add	r3, sp, #32
    baca:	a90c      	add	r1, sp, #48	; 0x30
    bacc:	f009 f994 	bl	14df8 <bt_smp_aes_cmac>
	if (err) {
    bad0:	2800      	cmp	r0, #0
    bad2:	d153      	bne.n	bb7c <compute_and_send_master_dhcheck+0x118>
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    bad4:	f104 07d7 	add.w	r7, r4, #215	; 0xd7
	sys_memcpy_swap(m + 5, n1, 16);
    bad8:	2210      	movs	r2, #16
    bada:	4639      	mov	r1, r7
    badc:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    bae0:	f104 08e7 	add.w	r8, r4, #231	; 0xe7
	sys_memcpy_swap(m + 5, n1, 16);
    bae4:	f7ff fea4 	bl	b830 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
    bae8:	2210      	movs	r2, #16
    baea:	4641      	mov	r1, r8
    baec:	f10d 0065 	add.w	r0, sp, #101	; 0x65
    baf0:	f7ff fe9e 	bl	b830 <sys_memcpy_swap>
	m[37] = a1->type;
    baf4:	f895 3083 	ldrb.w	r3, [r5, #131]	; 0x83
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    baf8:	2206      	movs	r2, #6
    bafa:	f105 0184 	add.w	r1, r5, #132	; 0x84
    bafe:	f10d 0076 	add.w	r0, sp, #118	; 0x76
	m[37] = a1->type;
    bb02:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    bb06:	f7ff fe93 	bl	b830 <sys_memcpy_swap>
	m[44] = a2->type;
    bb0a:	f895 308a 	ldrb.w	r3, [r5, #138]	; 0x8a
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    bb0e:	2206      	movs	r2, #6
    bb10:	f105 018b 	add.w	r1, r5, #139	; 0x8b
    bb14:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    bb18:	f204 1677 	addw	r6, r4, #375	; 0x177
	m[44] = a2->type;
    bb1c:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    bb20:	f7ff fe86 	bl	b830 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    bb24:	4633      	mov	r3, r6
    bb26:	2235      	movs	r2, #53	; 0x35
    bb28:	a914      	add	r1, sp, #80	; 0x50
    bb2a:	a808      	add	r0, sp, #32
    bb2c:	f009 f964 	bl	14df8 <bt_smp_aes_cmac>
	if (err) {
    bb30:	bb20      	cbnz	r0, bb7c <compute_and_send_master_dhcheck+0x118>
	sys_mem_swap(mackey, 16);
    bb32:	4630      	mov	r0, r6
    bb34:	f009 f996 	bl	14e64 <sys_mem_swap.constprop.0>
	m[0] = 0x01;
    bb38:	2301      	movs	r3, #1
		   smp->tk)) {
    bb3a:	f104 05f7 	add.w	r5, r4, #247	; 0xf7
	m[0] = 0x01;
    bb3e:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    bb42:	2235      	movs	r2, #53	; 0x35
    bb44:	462b      	mov	r3, r5
    bb46:	a914      	add	r1, sp, #80	; 0x50
    bb48:	a808      	add	r0, sp, #32
    bb4a:	f009 f955 	bl	14df8 <bt_smp_aes_cmac>
	if (err) {
    bb4e:	b9a8      	cbnz	r0, bb7c <compute_and_send_master_dhcheck+0x118>
	sys_mem_swap(ltk, 16);
    bb50:	4628      	mov	r0, r5
    bb52:	f009 f987 	bl	14e64 <sys_mem_swap.constprop.0>
		   &smp->chan.chan.conn->le.init_addr,
    bb56:	4622      	mov	r2, r4
    bb58:	f852 3bba 	ldr.w	r3, [r2], #186
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    bb5c:	a914      	add	r1, sp, #80	; 0x50
    bb5e:	9103      	str	r1, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, e)) {
    bb60:	f103 018a 	add.w	r1, r3, #138	; 0x8a
		   &smp->chan.chan.conn->le.init_addr,
    bb64:	3383      	adds	r3, #131	; 0x83
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    bb66:	e9cd 2300 	strd	r2, r3, [sp]
    bb6a:	9102      	str	r1, [sp, #8]
    bb6c:	4642      	mov	r2, r8
    bb6e:	4639      	mov	r1, r7
    bb70:	4630      	mov	r0, r6
    bb72:	ab04      	add	r3, sp, #16
    bb74:	f009 f984 	bl	14e80 <smp_f6>
    bb78:	4605      	mov	r5, r0
    bb7a:	b148      	cbz	r0, bb90 <compute_and_send_master_dhcheck+0x12c>
		return BT_SMP_ERR_UNSPECIFIED;
    bb7c:	2008      	movs	r0, #8
    bb7e:	e021      	b.n	bbc4 <compute_and_send_master_dhcheck+0x160>
		if (smp->oobd_remote) {
    bb80:	f8d4 1194 	ldr.w	r1, [r4, #404]	; 0x194
    bb84:	2900      	cmp	r1, #0
    bb86:	d086      	beq.n	ba96 <compute_and_send_master_dhcheck+0x32>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    bb88:	2210      	movs	r2, #16
    bb8a:	eb0d 0002 	add.w	r0, sp, r2
    bb8e:	e780      	b.n	ba92 <compute_and_send_master_dhcheck+0x2e>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    bb90:	210d      	movs	r1, #13
    bb92:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    bb96:	f009 fa00 	bl	14f9a <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
    bb9a:	210d      	movs	r1, #13
    bb9c:	4620      	mov	r0, r4
    bb9e:	f009 fa06 	bl	14fae <smp_create_pdu.isra.0>
	if (!buf) {
    bba2:	4606      	mov	r6, r0
    bba4:	2800      	cmp	r0, #0
    bba6:	d0e9      	beq.n	bb7c <compute_and_send_master_dhcheck+0x118>
	req = net_buf_add(buf, sizeof(*req));
    bba8:	2110      	movs	r1, #16
    bbaa:	3008      	adds	r0, #8
    bbac:	f001 fd48 	bl	d640 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
    bbb0:	2210      	movs	r2, #16
    bbb2:	a914      	add	r1, sp, #80	; 0x50
    bbb4:	f007 fcdc 	bl	13570 <memcpy>
	smp_send(smp, buf, NULL, NULL);
    bbb8:	4620      	mov	r0, r4
    bbba:	462a      	mov	r2, r5
    bbbc:	4631      	mov	r1, r6
    bbbe:	f7ff fe89 	bl	b8d4 <smp_send.isra.0>
	return 0;
    bbc2:	4628      	mov	r0, r5
}
    bbc4:	b022      	add	sp, #136	; 0x88
    bbc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bbca:	bf00      	nop
    bbcc:	00016d49 	.word	0x00016d49
    bbd0:	0001adaa 	.word	0x0001adaa

0000bbd4 <smp_send_pairing_req>:
{
    bbd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bbd8:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
    bbda:	f7ff fe57 	bl	b88c <smp_chan_get>
	if (!smp) {
    bbde:	4604      	mov	r4, r0
    bbe0:	2800      	cmp	r0, #0
    bbe2:	f000 80bb 	beq.w	bd5c <smp_send_pairing_req+0x188>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    bbe6:	f100 06b4 	add.w	r6, r0, #180	; 0xb4
    bbea:	2104      	movs	r1, #4
    bbec:	4630      	mov	r0, r6
    bbee:	f009 f9ba 	bl	14f66 <atomic_test_bit>
    bbf2:	2800      	cmp	r0, #0
    bbf4:	f040 80b5 	bne.w	bd62 <smp_send_pairing_req+0x18e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    bbf8:	2103      	movs	r1, #3
    bbfa:	4630      	mov	r0, r6
    bbfc:	f009 f9b3 	bl	14f66 <atomic_test_bit>
    bc00:	b120      	cbz	r0, bc0c <smp_send_pairing_req+0x38>
		return -EBUSY;
    bc02:	f06f 050f 	mvn.w	r5, #15
}
    bc06:	4628      	mov	r0, r5
    bc08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    bc0c:	2101      	movs	r1, #1
    bc0e:	4630      	mov	r0, r6
    bc10:	f009 f9a9 	bl	14f66 <atomic_test_bit>
    bc14:	2800      	cmp	r0, #0
    bc16:	d1f4      	bne.n	bc02 <smp_send_pairing_req+0x2e>
	if (!sec_level_reachable(conn)) {
    bc18:	7aab      	ldrb	r3, [r5, #10]
	switch (conn->required_sec_level) {
    bc1a:	2b03      	cmp	r3, #3
    bc1c:	d016      	beq.n	bc4c <smp_send_pairing_req+0x78>
    bc1e:	d805      	bhi.n	bc2c <smp_send_pairing_req+0x58>
    bc20:	3b01      	subs	r3, #1
    bc22:	2b01      	cmp	r3, #1
    bc24:	d91f      	bls.n	bc66 <smp_send_pairing_req+0x92>
		return -EINVAL;
    bc26:	f06f 0515 	mvn.w	r5, #21
    bc2a:	e7ec      	b.n	bc06 <smp_send_pairing_req+0x32>
	switch (conn->required_sec_level) {
    bc2c:	2b04      	cmp	r3, #4
    bc2e:	d1fa      	bne.n	bc26 <smp_send_pairing_req+0x52>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    bc30:	f7ff fdd8 	bl	b7e4 <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    bc34:	2803      	cmp	r0, #3
    bc36:	d104      	bne.n	bc42 <smp_send_pairing_req+0x6e>
    bc38:	4b4b      	ldr	r3, [pc, #300]	; (bd68 <smp_send_pairing_req+0x194>)
    bc3a:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    bc3c:	b11b      	cbz	r3, bc46 <smp_send_pairing_req+0x72>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    bc3e:	68db      	ldr	r3, [r3, #12]
    bc40:	b33b      	cbz	r3, bc92 <smp_send_pairing_req+0xbe>
    bc42:	4b4a      	ldr	r3, [pc, #296]	; (bd6c <smp_send_pairing_req+0x198>)
    bc44:	781b      	ldrb	r3, [r3, #0]
    bc46:	f003 0301 	and.w	r3, r3, #1
    bc4a:	e00a      	b.n	bc62 <smp_send_pairing_req+0x8e>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    bc4c:	f7ff fdca 	bl	b7e4 <get_io_capa>
    bc50:	2803      	cmp	r0, #3
    bc52:	d11c      	bne.n	bc8e <smp_send_pairing_req+0xba>
		       (bt_auth && bt_auth->oob_data_request);
    bc54:	4b44      	ldr	r3, [pc, #272]	; (bd68 <smp_send_pairing_req+0x194>)
    bc56:	681b      	ldr	r3, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    bc58:	b11b      	cbz	r3, bc62 <smp_send_pairing_req+0x8e>
		       (bt_auth && bt_auth->oob_data_request);
    bc5a:	68db      	ldr	r3, [r3, #12]
    bc5c:	3b00      	subs	r3, #0
    bc5e:	bf18      	it	ne
    bc60:	2301      	movne	r3, #1
	if (!sec_level_reachable(conn)) {
    bc62:	2b00      	cmp	r3, #0
    bc64:	d0df      	beq.n	bc26 <smp_send_pairing_req+0x52>
	if (!conn->le.keys) {
    bc66:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
    bc6a:	b1a3      	cbz	r3, bc96 <smp_send_pairing_req+0xc2>
	(void)memset((u8_t *)smp + sizeof(smp->chan), 0,
    bc6c:	f104 0ab0 	add.w	sl, r4, #176	; 0xb0
    bc70:	22ec      	movs	r2, #236	; 0xec
    bc72:	2100      	movs	r1, #0
    bc74:	4650      	mov	r0, sl
    bc76:	f007 fca6 	bl	135c6 <memset>
	if (bt_rand(smp->prnd, 16)) {
    bc7a:	2110      	movs	r1, #16
    bc7c:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
    bc80:	f7fa ff8a 	bl	6b98 <bt_rand>
    bc84:	4605      	mov	r5, r0
    bc86:	b190      	cbz	r0, bcae <smp_send_pairing_req+0xda>
		return -ENOBUFS;
    bc88:	f06f 0536 	mvn.w	r5, #54	; 0x36
    bc8c:	e7bb      	b.n	bc06 <smp_send_pairing_req+0x32>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    bc8e:	2301      	movs	r3, #1
    bc90:	e7e7      	b.n	bc62 <smp_send_pairing_req+0x8e>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    bc92:	2300      	movs	r3, #0
    bc94:	e7d7      	b.n	bc46 <smp_send_pairing_req+0x72>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    bc96:	7a28      	ldrb	r0, [r5, #8]
    bc98:	f105 017c 	add.w	r1, r5, #124	; 0x7c
    bc9c:	f001 f85a 	bl	cd54 <bt_keys_get_addr>
    bca0:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
		if (!conn->le.keys) {
    bca4:	2800      	cmp	r0, #0
    bca6:	d1e1      	bne.n	bc6c <smp_send_pairing_req+0x98>
			return -ENOMEM;
    bca8:	f06f 050b 	mvn.w	r5, #11
    bcac:	e7ab      	b.n	bc06 <smp_send_pairing_req+0x32>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    bcae:	2105      	movs	r1, #5
    bcb0:	4650      	mov	r0, sl
    bcb2:	f009 f972 	bl	14f9a <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
    bcb6:	f7fa fe89 	bl	69cc <bt_pub_key_get>
    bcba:	4b2d      	ldr	r3, [pc, #180]	; (bd70 <smp_send_pairing_req+0x19c>)
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
    bcbc:	2101      	movs	r1, #1
	sc_public_key = bt_pub_key_get();
    bcbe:	6018      	str	r0, [r3, #0]
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
    bcc0:	4620      	mov	r0, r4
    bcc2:	f009 f974 	bl	14fae <smp_create_pdu.isra.0>
	if (!req_buf) {
    bcc6:	4681      	mov	r9, r0
    bcc8:	2800      	cmp	r0, #0
    bcca:	d0dd      	beq.n	bc88 <smp_send_pairing_req+0xb4>
	req = net_buf_add(req_buf, sizeof(*req));
    bccc:	2106      	movs	r1, #6
    bcce:	3008      	adds	r0, #8
    bcd0:	f001 fcb6 	bl	d640 <net_buf_simple_add>
	if (sc_supported) {
    bcd4:	4b25      	ldr	r3, [pc, #148]	; (bd6c <smp_send_pairing_req+0x198>)
	req = net_buf_add(req_buf, sizeof(*req));
    bcd6:	4607      	mov	r7, r0
	if (sc_supported) {
    bcd8:	781b      	ldrb	r3, [r3, #0]
		auth &= BT_SMP_AUTH_MASK;
    bcda:	2b00      	cmp	r3, #0
    bcdc:	bf14      	ite	ne
    bcde:	f04f 0809 	movne.w	r8, #9
    bce2:	f04f 0801 	moveq.w	r8, #1
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    bce6:	f7ff fd7d 	bl	b7e4 <get_io_capa>
	if (bondable) {
    bcea:	4b22      	ldr	r3, [pc, #136]	; (bd74 <smp_send_pairing_req+0x1a0>)
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    bcec:	2803      	cmp	r0, #3
	if (bondable) {
    bcee:	781b      	ldrb	r3, [r3, #0]
		auth |= BT_SMP_AUTH_MITM;
    bcf0:	bf18      	it	ne
    bcf2:	f048 0804 	orrne.w	r8, r8, #4
	if (bondable) {
    bcf6:	b373      	cbz	r3, bd56 <smp_send_pairing_req+0x182>
		auth |= BT_SMP_AUTH_BONDING;
    bcf8:	f048 0801 	orr.w	r8, r8, #1
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
    bcfc:	f887 8002 	strb.w	r8, [r7, #2]
	req->io_capability = get_io_capa();
    bd00:	f7ff fd70 	bl	b7e4 <get_io_capa>
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    bd04:	4b1c      	ldr	r3, [pc, #112]	; (bd78 <smp_send_pairing_req+0x1a4>)
	req->resp_key_dist = RECV_KEYS;
    bd06:	f04f 0803 	mov.w	r8, #3
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    bd0a:	781b      	ldrb	r3, [r3, #0]
	smp->local_dist = SEND_KEYS;
    bd0c:	f240 3201 	movw	r2, #769	; 0x301
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    bd10:	707b      	strb	r3, [r7, #1]
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    bd12:	2310      	movs	r3, #16
    bd14:	70fb      	strb	r3, [r7, #3]
	req->init_key_dist = SEND_KEYS;
    bd16:	2301      	movs	r3, #1
	req->io_capability = get_io_capa();
    bd18:	7038      	strb	r0, [r7, #0]
	req->init_key_dist = SEND_KEYS;
    bd1a:	713b      	strb	r3, [r7, #4]
	req->resp_key_dist = RECV_KEYS;
    bd1c:	f887 8005 	strb.w	r8, [r7, #5]
	memcpy(smp->preq + 1, req, sizeof(*req));
    bd20:	4639      	mov	r1, r7
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    bd22:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
	smp->local_dist = SEND_KEYS;
    bd26:	f8a4 2198 	strh.w	r2, [r4, #408]	; 0x198
	memcpy(smp->preq + 1, req, sizeof(*req));
    bd2a:	f104 00ba 	add.w	r0, r4, #186	; 0xba
    bd2e:	2206      	movs	r2, #6
    bd30:	f007 fc1e 	bl	13570 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
    bd34:	2200      	movs	r2, #0
    bd36:	4649      	mov	r1, r9
    bd38:	4620      	mov	r0, r4
    bd3a:	f7ff fdcb 	bl	b8d4 <smp_send.isra.0>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
    bd3e:	4650      	mov	r0, sl
    bd40:	2102      	movs	r1, #2
    bd42:	f009 f92a 	bl	14f9a <atomic_set_bit>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    bd46:	210b      	movs	r1, #11
    bd48:	f009 f927 	bl	14f9a <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    bd4c:	4641      	mov	r1, r8
    bd4e:	4630      	mov	r0, r6
    bd50:	f009 f923 	bl	14f9a <atomic_set_bit>
	return 0;
    bd54:	e757      	b.n	bc06 <smp_send_pairing_req+0x32>
		auth &= ~BT_SMP_AUTH_BONDING;
    bd56:	f008 080c 	and.w	r8, r8, #12
    bd5a:	e7cf      	b.n	bcfc <smp_send_pairing_req+0x128>
		return -ENOTCONN;
    bd5c:	f06f 0538 	mvn.w	r5, #56	; 0x38
    bd60:	e751      	b.n	bc06 <smp_send_pairing_req+0x32>
		return -EIO;
    bd62:	f06f 0504 	mvn.w	r5, #4
    bd66:	e74e      	b.n	bc06 <smp_send_pairing_req+0x32>
    bd68:	20000d20 	.word	0x20000d20
    bd6c:	20001f86 	.word	0x20001f86
    bd70:	200011b8 	.word	0x200011b8
    bd74:	2000033c 	.word	0x2000033c
    bd78:	20001f85 	.word	0x20001f85

0000bd7c <smp_security_request>:
{
    bd7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    bd7e:	4606      	mov	r6, r0
    bd80:	f856 4bb4 	ldr.w	r4, [r6], #180
	struct bt_smp_security_request *req = (void *)buf->data;
    bd84:	688b      	ldr	r3, [r1, #8]
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    bd86:	4630      	mov	r0, r6
    bd88:	2103      	movs	r1, #3
    bd8a:	f009 f8ec 	bl	14f66 <atomic_test_bit>
    bd8e:	b108      	cbz	r0, bd94 <smp_security_request+0x18>
	return 0;
    bd90:	2000      	movs	r0, #0
    bd92:	e057      	b.n	be44 <smp_security_request+0xc8>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    bd94:	2101      	movs	r1, #1
    bd96:	4630      	mov	r0, r6
    bd98:	f009 f8e5 	bl	14f66 <atomic_test_bit>
    bd9c:	2800      	cmp	r0, #0
    bd9e:	d1f7      	bne.n	bd90 <smp_security_request+0x14>
	if (sc_supported) {
    bda0:	781d      	ldrb	r5, [r3, #0]
    bda2:	4b2c      	ldr	r3, [pc, #176]	; (be54 <smp_security_request+0xd8>)
    bda4:	781b      	ldrb	r3, [r3, #0]
    bda6:	b17b      	cbz	r3, bdc8 <smp_security_request+0x4c>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
    bda8:	f005 050f 	and.w	r5, r5, #15
	if (conn->le.keys) {
    bdac:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    bdb0:	b16b      	cbz	r3, bdce <smp_security_request+0x52>
		if (!(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
    bdb2:	89db      	ldrh	r3, [r3, #14]
    bdb4:	f003 0324 	and.w	r3, r3, #36	; 0x24
    bdb8:	b9d3      	cbnz	r3, bdf0 <smp_security_request+0x74>
	if (smp_send_pairing_req(conn) < 0) {
    bdba:	4620      	mov	r0, r4
    bdbc:	f7ff ff0a 	bl	bbd4 <smp_send_pairing_req>
    bdc0:	2800      	cmp	r0, #0
    bdc2:	db3e      	blt.n	be42 <smp_security_request+0xc6>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    bdc4:	210e      	movs	r1, #14
    bdc6:	e040      	b.n	be4a <smp_security_request+0xce>
		auth = req->auth_req & BT_SMP_AUTH_MASK;
    bdc8:	f005 0507 	and.w	r5, r5, #7
    bdcc:	e7ee      	b.n	bdac <smp_security_request+0x30>
					     &conn->le.dst);
    bdce:	f104 077c 	add.w	r7, r4, #124	; 0x7c
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
    bdd2:	463a      	mov	r2, r7
    bdd4:	2020      	movs	r0, #32
    bdd6:	7a21      	ldrb	r1, [r4, #8]
    bdd8:	f000 fffc 	bl	cdd4 <bt_keys_find>
    bddc:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
		if (!conn->le.keys) {
    bde0:	b930      	cbnz	r0, bdf0 <smp_security_request+0x74>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK, conn->id,
    bde2:	463a      	mov	r2, r7
    bde4:	2004      	movs	r0, #4
    bde6:	7a21      	ldrb	r1, [r4, #8]
    bde8:	f000 fff4 	bl	cdd4 <bt_keys_find>
    bdec:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
	if (!conn->le.keys) {
    bdf0:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    bdf4:	2900      	cmp	r1, #0
    bdf6:	d0e0      	beq.n	bdba <smp_security_request+0x3e>
	if ((auth & BT_SMP_AUTH_MITM) &&
    bdf8:	076f      	lsls	r7, r5, #29
    bdfa:	d50f      	bpl.n	be1c <smp_security_request+0xa0>
    bdfc:	7b4b      	ldrb	r3, [r1, #13]
    bdfe:	07d8      	lsls	r0, r3, #31
    be00:	d40c      	bmi.n	be1c <smp_security_request+0xa0>
		if (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT) {
    be02:	f7ff fcef 	bl	b7e4 <get_io_capa>
    be06:	2803      	cmp	r0, #3
			BT_INFO("New auth requirements: 0x%x, repairing",
    be08:	462a      	mov	r2, r5
		if (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT) {
    be0a:	d002      	beq.n	be12 <smp_security_request+0x96>
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
    be0c:	2149      	movs	r1, #73	; 0x49
    be0e:	4812      	ldr	r0, [pc, #72]	; (be58 <smp_security_request+0xdc>)
    be10:	e001      	b.n	be16 <smp_security_request+0x9a>
		BT_WARN("Unsupported auth requirements: 0x%x, repairing",
    be12:	2157      	movs	r1, #87	; 0x57
    be14:	4811      	ldr	r0, [pc, #68]	; (be5c <smp_security_request+0xe0>)
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
    be16:	f006 f897 	bl	11f48 <printk>
		goto pair;
    be1a:	e7ce      	b.n	bdba <smp_security_request+0x3e>
	if ((auth & BT_SMP_AUTH_SC) &&
    be1c:	072a      	lsls	r2, r5, #28
    be1e:	d504      	bpl.n	be2a <smp_security_request+0xae>
    be20:	89cb      	ldrh	r3, [r1, #14]
    be22:	069b      	lsls	r3, r3, #26
    be24:	d401      	bmi.n	be2a <smp_security_request+0xae>
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
    be26:	462a      	mov	r2, r5
    be28:	e7f0      	b.n	be0c <smp_security_request+0x90>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
    be2a:	7b0b      	ldrb	r3, [r1, #12]
    be2c:	f101 0218 	add.w	r2, r1, #24
    be30:	9300      	str	r3, [sp, #0]
    be32:	4620      	mov	r0, r4
    be34:	f101 031a 	add.w	r3, r1, #26
    be38:	3110      	adds	r1, #16
    be3a:	f007 feb9 	bl	13bb0 <bt_conn_le_start_encryption>
    be3e:	2800      	cmp	r0, #0
    be40:	da02      	bge.n	be48 <smp_security_request+0xcc>
		return BT_SMP_ERR_UNSPECIFIED;
    be42:	2008      	movs	r0, #8
}
    be44:	b003      	add	sp, #12
    be46:	bdf0      	pop	{r4, r5, r6, r7, pc}
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    be48:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    be4a:	4630      	mov	r0, r6
    be4c:	f009 f8a5 	bl	14f9a <atomic_set_bit>
    be50:	e79e      	b.n	bd90 <smp_security_request+0x14>
    be52:	bf00      	nop
    be54:	20001f86 	.word	0x20001f86
    be58:	0001ab0a 	.word	0x0001ab0a
    be5c:	0001ab36 	.word	0x0001ab36

0000be60 <smp_ident_info>:
{
    be60:	b570      	push	{r4, r5, r6, lr}
    be62:	460b      	mov	r3, r1
    be64:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    be66:	210c      	movs	r1, #12
    be68:	30b4      	adds	r0, #180	; 0xb4
    be6a:	f009 f87c 	bl	14f66 <atomic_test_bit>
    be6e:	b1c0      	cbz	r0, bea2 <smp_ident_info+0x42>
		struct bt_smp_ident_info *req = (void *)buf->data;
    be70:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    be72:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    be74:	2002      	movs	r0, #2
    be76:	f103 057c 	add.w	r5, r3, #124	; 0x7c
    be7a:	462a      	mov	r2, r5
    be7c:	7a19      	ldrb	r1, [r3, #8]
    be7e:	f009 fb9d 	bl	155bc <bt_keys_get_type>
		if (!keys) {
    be82:	b948      	cbnz	r0, be98 <smp_ident_info+0x38>
			BT_ERR("Unable to get keys for %s",
    be84:	4628      	mov	r0, r5
    be86:	f7f8 fc87 	bl	4798 <bt_addr_le_str_real>
    be8a:	2145      	movs	r1, #69	; 0x45
    be8c:	4602      	mov	r2, r0
    be8e:	4808      	ldr	r0, [pc, #32]	; (beb0 <smp_ident_info+0x50>)
    be90:	f006 f85a 	bl	11f48 <printk>
			return BT_SMP_ERR_UNSPECIFIED;
    be94:	2008      	movs	r0, #8
}
    be96:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->irk.val, req->irk, 16);
    be98:	2210      	movs	r2, #16
    be9a:	4631      	mov	r1, r6
    be9c:	302a      	adds	r0, #42	; 0x2a
    be9e:	f007 fb67 	bl	13570 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    bea2:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    bea6:	2109      	movs	r1, #9
    bea8:	f009 f877 	bl	14f9a <atomic_set_bit>
	return 0;
    beac:	2000      	movs	r0, #0
    beae:	e7f2      	b.n	be96 <smp_ident_info+0x36>
    beb0:	0001ab6a 	.word	0x0001ab6a

0000beb4 <smp_encrypt_info>:
{
    beb4:	b570      	push	{r4, r5, r6, lr}
    beb6:	460b      	mov	r3, r1
    beb8:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    beba:	210c      	movs	r1, #12
    bebc:	30b4      	adds	r0, #180	; 0xb4
    bebe:	f009 f852 	bl	14f66 <atomic_test_bit>
    bec2:	b1c0      	cbz	r0, bef6 <smp_encrypt_info+0x42>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    bec4:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    bec6:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    bec8:	2004      	movs	r0, #4
    beca:	f103 057c 	add.w	r5, r3, #124	; 0x7c
    bece:	462a      	mov	r2, r5
    bed0:	7a19      	ldrb	r1, [r3, #8]
    bed2:	f009 fb73 	bl	155bc <bt_keys_get_type>
		if (!keys) {
    bed6:	b948      	cbnz	r0, beec <smp_encrypt_info+0x38>
			BT_ERR("Unable to get keys for %s",
    bed8:	4628      	mov	r0, r5
    beda:	f7f8 fc5d 	bl	4798 <bt_addr_le_str_real>
    bede:	2145      	movs	r1, #69	; 0x45
    bee0:	4602      	mov	r2, r0
    bee2:	4808      	ldr	r0, [pc, #32]	; (bf04 <smp_encrypt_info+0x50>)
    bee4:	f006 f830 	bl	11f48 <printk>
			return BT_SMP_ERR_UNSPECIFIED;
    bee8:	2008      	movs	r0, #8
}
    beea:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
    beec:	2210      	movs	r2, #16
    beee:	4631      	mov	r1, r6
    bef0:	301a      	adds	r0, #26
    bef2:	f007 fb3d 	bl	13570 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
    bef6:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    befa:	2107      	movs	r1, #7
    befc:	f009 f84d 	bl	14f9a <atomic_set_bit>
	return 0;
    bf00:	2000      	movs	r0, #0
    bf02:	e7f2      	b.n	beea <smp_encrypt_info+0x36>
    bf04:	0001ab6a 	.word	0x0001ab6a

0000bf08 <smp_pairing_complete>:
{
    bf08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bf0c:	4604      	mov	r4, r0
	if (!status) {
    bf0e:	460d      	mov	r5, r1
    bf10:	4f24      	ldr	r7, [pc, #144]	; (bfa4 <smp_pairing_complete+0x9c>)
    bf12:	f100 08b4 	add.w	r8, r0, #180	; 0xb4
    bf16:	b9b1      	cbnz	r1, bf46 <smp_pairing_complete+0x3e>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    bf18:	210c      	movs	r1, #12
    bf1a:	4640      	mov	r0, r8
    bf1c:	f009 f823 	bl	14f66 <atomic_test_bit>
		if (bond_flag) {
    bf20:	4605      	mov	r5, r0
    bf22:	b120      	cbz	r0, bf2e <smp_pairing_complete+0x26>
			bt_keys_store(smp->chan.chan.conn->le.keys);
    bf24:	6823      	ldr	r3, [r4, #0]
    bf26:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
    bf2a:	f001 f84d 	bl	cfc8 <bt_keys_store>
		if (bt_auth && bt_auth->pairing_complete) {
    bf2e:	683b      	ldr	r3, [r7, #0]
    bf30:	b123      	cbz	r3, bf3c <smp_pairing_complete+0x34>
    bf32:	699b      	ldr	r3, [r3, #24]
    bf34:	b113      	cbz	r3, bf3c <smp_pairing_complete+0x34>
			bt_auth->pairing_complete(smp->chan.chan.conn,
    bf36:	4629      	mov	r1, r5
			bt_auth->pairing_failed(smp->chan.chan.conn, auth_err);
    bf38:	6820      	ldr	r0, [r4, #0]
    bf3a:	4798      	blx	r3
	smp_reset(smp);
    bf3c:	4620      	mov	r0, r4
}
    bf3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	smp_reset(smp);
    bf42:	f009 b8f5 	b.w	15130 <smp_reset>
	switch (smp_err) {
    bf46:	1e4b      	subs	r3, r1, #1
    bf48:	b2db      	uxtb	r3, r3
    bf4a:	2b0d      	cmp	r3, #13
    bf4c:	bf96      	itet	ls
    bf4e:	4a16      	ldrls	r2, [pc, #88]	; (bfa8 <smp_pairing_complete+0xa0>)
	if (!status) {
    bf50:	2608      	movhi	r6, #8
    bf52:	5cd6      	ldrbls	r6, [r2, r3]
		if (smp->chan.chan.conn->le.keys &&
    bf54:	6803      	ldr	r3, [r0, #0]
    bf56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    bf5a:	b153      	cbz	r3, bf72 <smp_pairing_complete+0x6a>
    bf5c:	7b1b      	ldrb	r3, [r3, #12]
    bf5e:	b9d3      	cbnz	r3, bf96 <smp_pairing_complete+0x8e>
			bt_keys_clear(smp->chan.chan.conn->le.keys);
    bf60:	6823      	ldr	r3, [r4, #0]
    bf62:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
    bf66:	f000 ff95 	bl	ce94 <bt_keys_clear>
			smp->chan.chan.conn->le.keys = NULL;
    bf6a:	2200      	movs	r2, #0
    bf6c:	6823      	ldr	r3, [r4, #0]
    bf6e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    bf72:	2102      	movs	r1, #2
    bf74:	4640      	mov	r0, r8
    bf76:	f008 fff6 	bl	14f66 <atomic_test_bit>
    bf7a:	b920      	cbnz	r0, bf86 <smp_pairing_complete+0x7e>
			bt_conn_security_changed(smp->chan.chan.conn, status,
    bf7c:	4632      	mov	r2, r6
    bf7e:	4629      	mov	r1, r5
    bf80:	6820      	ldr	r0, [r4, #0]
    bf82:	f7fa ffcf 	bl	6f24 <bt_conn_security_changed>
		if (bt_auth && bt_auth->pairing_failed) {
    bf86:	683b      	ldr	r3, [r7, #0]
    bf88:	2b00      	cmp	r3, #0
    bf8a:	d0d7      	beq.n	bf3c <smp_pairing_complete+0x34>
    bf8c:	69db      	ldr	r3, [r3, #28]
    bf8e:	2b00      	cmp	r3, #0
    bf90:	d0d4      	beq.n	bf3c <smp_pairing_complete+0x34>
			bt_auth->pairing_failed(smp->chan.chan.conn, auth_err);
    bf92:	4631      	mov	r1, r6
    bf94:	e7d0      	b.n	bf38 <smp_pairing_complete+0x30>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
    bf96:	2102      	movs	r1, #2
    bf98:	4640      	mov	r0, r8
    bf9a:	f008 ffe4 	bl	14f66 <atomic_test_bit>
		    (!smp->chan.chan.conn->le.keys->enc_size ||
    bf9e:	2800      	cmp	r0, #0
    bfa0:	d1de      	bne.n	bf60 <smp_pairing_complete+0x58>
    bfa2:	e7e6      	b.n	bf72 <smp_pairing_complete+0x6a>
    bfa4:	20000d20 	.word	0x20000d20
    bfa8:	0001ad6a 	.word	0x0001ad6a

0000bfac <bt_smp_dhkey_ready>:
{
    bfac:	b538      	push	{r3, r4, r5, lr}
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    bfae:	4c1c      	ldr	r4, [pc, #112]	; (c020 <bt_smp_dhkey_ready+0x74>)
{
    bfb0:	4605      	mov	r5, r0
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    bfb2:	2107      	movs	r1, #7
    bfb4:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    bfb8:	f008 ffdb 	bl	14f72 <atomic_test_and_clear_bit>
    bfbc:	b370      	cbz	r0, c01c <bt_smp_dhkey_ready+0x70>
	if (!dhkey) {
    bfbe:	b92d      	cbnz	r5, bfcc <bt_smp_dhkey_ready+0x20>
		smp_error(smp, BT_SMP_ERR_DHKEY_CHECK_FAILED);
    bfc0:	210b      	movs	r1, #11
				smp_error(smp, err);
    bfc2:	4620      	mov	r0, r4
}
    bfc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				smp_error(smp, err);
    bfc8:	f009 b8d8 	b.w	1517c <smp_error>
	memcpy(smp->dhkey, dhkey, 32);
    bfcc:	4629      	mov	r1, r5
    bfce:	2220      	movs	r2, #32
    bfd0:	f204 1047 	addw	r0, r4, #327	; 0x147
    bfd4:	f007 facc 	bl	13570 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    bfd8:	2109      	movs	r1, #9
    bfda:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    bfde:	f008 ffc2 	bl	14f66 <atomic_test_bit>
    bfe2:	b128      	cbz	r0, bff0 <bt_smp_dhkey_ready+0x44>
}
    bfe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    bfe8:	2108      	movs	r1, #8
    bfea:	480e      	ldr	r0, [pc, #56]	; (c024 <bt_smp_dhkey_ready+0x78>)
    bfec:	f008 bfd5 	b.w	14f9a <atomic_set_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
    bff0:	210f      	movs	r1, #15
    bff2:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    bff6:	f008 ffb6 	bl	14f66 <atomic_test_bit>
    bffa:	2800      	cmp	r0, #0
    bffc:	d1f2      	bne.n	bfe4 <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
    bffe:	2108      	movs	r1, #8
    c000:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    c004:	f008 ffaf 	bl	14f66 <atomic_test_bit>
    c008:	b140      	cbz	r0, c01c <bt_smp_dhkey_ready+0x70>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    c00a:	6823      	ldr	r3, [r4, #0]
    c00c:	78db      	ldrb	r3, [r3, #3]
    c00e:	b92b      	cbnz	r3, c01c <bt_smp_dhkey_ready+0x70>
			err = compute_and_send_master_dhcheck(smp);
    c010:	4620      	mov	r0, r4
    c012:	f7ff fd27 	bl	ba64 <compute_and_send_master_dhcheck>
			if (err) {
    c016:	4601      	mov	r1, r0
    c018:	2800      	cmp	r0, #0
    c01a:	d1d2      	bne.n	bfc2 <bt_smp_dhkey_ready+0x16>
}
    c01c:	bd38      	pop	{r3, r4, r5, pc}
    c01e:	bf00      	nop
    c020:	20000ffc 	.word	0x20000ffc
    c024:	200010b0 	.word	0x200010b0

0000c028 <bt_smp_recv>:
{
    c028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    c02a:	898b      	ldrh	r3, [r1, #12]
{
    c02c:	4604      	mov	r4, r0
    c02e:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    c030:	b92b      	cbnz	r3, c03e <bt_smp_recv+0x16>
		BT_ERR("Too small SMP PDU received");
    c032:	2145      	movs	r1, #69	; 0x45
    c034:	4825      	ldr	r0, [pc, #148]	; (c0cc <bt_smp_recv+0xa4>)
    c036:	f005 ff87 	bl	11f48 <printk>
}
    c03a:	2000      	movs	r0, #0
    c03c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    c03e:	2101      	movs	r1, #1
    c040:	f105 0008 	add.w	r0, r5, #8
    c044:	f001 fada 	bl	d5fc <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    c048:	2104      	movs	r1, #4
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    c04a:	4606      	mov	r6, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    c04c:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    c050:	f008 ff89 	bl	14f66 <atomic_test_bit>
    c054:	7832      	ldrb	r2, [r6, #0]
    c056:	b120      	cbz	r0, c062 <bt_smp_recv+0x3a>
		BT_WARN("SMP command (code 0x%02x) received after timeout",
    c058:	2157      	movs	r1, #87	; 0x57
    c05a:	481d      	ldr	r0, [pc, #116]	; (c0d0 <bt_smp_recv+0xa8>)
    c05c:	f005 ff74 	bl	11f48 <printk>
		return 0;
    c060:	e7eb      	b.n	c03a <bt_smp_recv+0x12>
	if (hdr->code >= ARRAY_SIZE(handlers) || !handlers[hdr->code].func) {
    c062:	2a0d      	cmp	r2, #13
    c064:	d803      	bhi.n	c06e <bt_smp_recv+0x46>
    c066:	4f1b      	ldr	r7, [pc, #108]	; (c0d4 <bt_smp_recv+0xac>)
    c068:	f857 3032 	ldr.w	r3, [r7, r2, lsl #3]
    c06c:	b943      	cbnz	r3, c080 <bt_smp_recv+0x58>
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
    c06e:	2157      	movs	r1, #87	; 0x57
    c070:	4819      	ldr	r0, [pc, #100]	; (c0d8 <bt_smp_recv+0xb0>)
    c072:	f005 ff69 	bl	11f48 <printk>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    c076:	2107      	movs	r1, #7
		smp_error(smp, err);
    c078:	4620      	mov	r0, r4
    c07a:	f009 f87f 	bl	1517c <smp_error>
    c07e:	e7dc      	b.n	c03a <bt_smp_recv+0x12>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
    c080:	4611      	mov	r1, r2
    c082:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    c086:	f008 ff74 	bl	14f72 <atomic_test_and_clear_bit>
    c08a:	7833      	ldrb	r3, [r6, #0]
    c08c:	b948      	cbnz	r0, c0a2 <bt_smp_recv+0x7a>
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
    c08e:	461a      	mov	r2, r3
    c090:	2157      	movs	r1, #87	; 0x57
    c092:	4812      	ldr	r0, [pc, #72]	; (c0dc <bt_smp_recv+0xb4>)
    c094:	f005 ff58 	bl	11f48 <printk>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    c098:	7833      	ldrb	r3, [r6, #0]
    c09a:	2b05      	cmp	r3, #5
    c09c:	d0cd      	beq.n	c03a <bt_smp_recv+0x12>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    c09e:	2108      	movs	r1, #8
    c0a0:	e7ea      	b.n	c078 <bt_smp_recv+0x50>
	if (buf->len != handlers[hdr->code].expect_len) {
    c0a2:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    c0a6:	89aa      	ldrh	r2, [r5, #12]
    c0a8:	7909      	ldrb	r1, [r1, #4]
    c0aa:	4291      	cmp	r1, r2
    c0ac:	d005      	beq.n	c0ba <bt_smp_recv+0x92>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    c0ae:	2145      	movs	r1, #69	; 0x45
    c0b0:	480b      	ldr	r0, [pc, #44]	; (c0e0 <bt_smp_recv+0xb8>)
    c0b2:	f005 ff49 	bl	11f48 <printk>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    c0b6:	210a      	movs	r1, #10
    c0b8:	e7de      	b.n	c078 <bt_smp_recv+0x50>
	err = handlers[hdr->code].func(smp, buf);
    c0ba:	4629      	mov	r1, r5
    c0bc:	4620      	mov	r0, r4
    c0be:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
    c0c2:	4798      	blx	r3
	if (err) {
    c0c4:	4601      	mov	r1, r0
    c0c6:	2800      	cmp	r0, #0
    c0c8:	d0b7      	beq.n	c03a <bt_smp_recv+0x12>
    c0ca:	e7d5      	b.n	c078 <bt_smp_recv+0x50>
    c0cc:	0001ab89 	.word	0x0001ab89
    c0d0:	0001aba9 	.word	0x0001aba9
    c0d4:	000172c4 	.word	0x000172c4
    c0d8:	0001abdf 	.word	0x0001abdf
    c0dc:	0001abfe 	.word	0x0001abfe
    c0e0:	0001a4b0 	.word	0x0001a4b0

0000c0e4 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
    c0e4:	4b14      	ldr	r3, [pc, #80]	; (c138 <bt_smp_pkey_ready+0x54>)
{
    c0e6:	b510      	push	{r4, lr}
	sc_public_key = pkey;
    c0e8:	6018      	str	r0, [r3, #0]
	if (!pkey) {
    c0ea:	b928      	cbnz	r0, c0f8 <bt_smp_pkey_ready+0x14>
}
    c0ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Public key not available");
    c0f0:	2157      	movs	r1, #87	; 0x57
    c0f2:	4812      	ldr	r0, [pc, #72]	; (c13c <bt_smp_pkey_ready+0x58>)
    c0f4:	f005 bf28 	b.w	11f48 <printk>
	z_impl_k_sem_give(sem);
    c0f8:	4811      	ldr	r0, [pc, #68]	; (c140 <bt_smp_pkey_ready+0x5c>)
    c0fa:	f004 fca1 	bl	10a40 <z_impl_k_sem_give>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c0fe:	4c11      	ldr	r4, [pc, #68]	; (c144 <bt_smp_pkey_ready+0x60>)
    c100:	f104 03b4 	add.w	r3, r4, #180	; 0xb4
    c104:	e8d3 3faf 	lda	r3, [r3]
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    c108:	065b      	lsls	r3, r3, #25
    c10a:	d513      	bpl.n	c134 <bt_smp_pkey_ready+0x50>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    c10c:	6823      	ldr	r3, [r4, #0]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c10e:	78db      	ldrb	r3, [r3, #3]
    c110:	b983      	cbnz	r3, c134 <bt_smp_pkey_ready+0x50>
			err = sc_send_public_key(smp);
    c112:	4620      	mov	r0, r4
    c114:	f7ff fbf6 	bl	b904 <sc_send_public_key>
			if (err) {
    c118:	4601      	mov	r1, r0
    c11a:	b110      	cbz	r0, c122 <bt_smp_pkey_ready+0x3e>
				smp_error(smp, err);
    c11c:	4620      	mov	r0, r4
    c11e:	f009 f82d 	bl	1517c <smp_error>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c122:	4b09      	ldr	r3, [pc, #36]	; (c148 <bt_smp_pkey_ready+0x64>)
    c124:	e8d3 2fef 	ldaex	r2, [r3]
    c128:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    c12c:	e8c3 2fe1 	stlex	r1, r2, [r3]
    c130:	2900      	cmp	r1, #0
    c132:	d1f7      	bne.n	c124 <bt_smp_pkey_ready+0x40>
}
    c134:	bd10      	pop	{r4, pc}
    c136:	bf00      	nop
    c138:	200011b8 	.word	0x200011b8
    c13c:	0001ac1e 	.word	0x0001ac1e
    c140:	20000458 	.word	0x20000458
    c144:	20000ffc 	.word	0x20000ffc
    c148:	200010ac 	.word	0x200010ac

0000c14c <smp_pairing_failed>:
{
    c14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    c14e:	4605      	mov	r5, r0
	struct bt_smp_pairing_fail *req = (void *)buf->data;
    c150:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    c152:	f855 7bb4 	ldr.w	r7, [r5], #180
	BT_ERR("reason 0x%x", req->reason);
    c156:	2145      	movs	r1, #69	; 0x45
{
    c158:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
    c15a:	7832      	ldrb	r2, [r6, #0]
    c15c:	480e      	ldr	r0, [pc, #56]	; (c198 <smp_pairing_failed+0x4c>)
    c15e:	f005 fef3 	bl	11f48 <printk>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    c162:	2109      	movs	r1, #9
    c164:	4628      	mov	r0, r5
    c166:	f008 ff04 	bl	14f72 <atomic_test_and_clear_bit>
    c16a:	b140      	cbz	r0, c17e <smp_pairing_failed+0x32>
		if (bt_auth && bt_auth->cancel) {
    c16c:	4b0b      	ldr	r3, [pc, #44]	; (c19c <smp_pairing_failed+0x50>)
    c16e:	681b      	ldr	r3, [r3, #0]
    c170:	b963      	cbnz	r3, c18c <smp_pairing_failed+0x40>
	smp_pairing_complete(smp, req->reason);
    c172:	4620      	mov	r0, r4
    c174:	7831      	ldrb	r1, [r6, #0]
    c176:	f7ff fec7 	bl	bf08 <smp_pairing_complete>
}
    c17a:	2000      	movs	r0, #0
    c17c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
    c17e:	210a      	movs	r1, #10
    c180:	4628      	mov	r0, r5
    c182:	f008 fef6 	bl	14f72 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    c186:	2800      	cmp	r0, #0
    c188:	d1f0      	bne.n	c16c <smp_pairing_failed+0x20>
    c18a:	e7f2      	b.n	c172 <smp_pairing_failed+0x26>
		if (bt_auth && bt_auth->cancel) {
    c18c:	691b      	ldr	r3, [r3, #16]
    c18e:	2b00      	cmp	r3, #0
    c190:	d0ef      	beq.n	c172 <smp_pairing_failed+0x26>
			bt_auth->cancel(conn);
    c192:	4638      	mov	r0, r7
    c194:	4798      	blx	r3
    c196:	e7ec      	b.n	c172 <smp_pairing_failed+0x26>
    c198:	0001ac3c 	.word	0x0001ac3c
    c19c:	20000d20 	.word	0x20000d20

0000c1a0 <smp_timeout>:
{
    c1a0:	b510      	push	{r4, lr}
    c1a2:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
    c1a4:	2145      	movs	r1, #69	; 0x45
    c1a6:	4807      	ldr	r0, [pc, #28]	; (c1c4 <smp_timeout+0x24>)
    c1a8:	f005 fece 	bl	11f48 <printk>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
    c1ac:	f5a4 70ce 	sub.w	r0, r4, #412	; 0x19c
    c1b0:	2108      	movs	r1, #8
    c1b2:	f7ff fea9 	bl	bf08 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    c1b6:	f1a4 00e8 	sub.w	r0, r4, #232	; 0xe8
    c1ba:	2104      	movs	r1, #4
}
    c1bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    c1c0:	f008 beeb 	b.w	14f9a <atomic_set_bit>
    c1c4:	0001ac4d 	.word	0x0001ac4d

0000c1c8 <smp_master_ident>:
{
    c1c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c1cc:	460b      	mov	r3, r1
    c1ce:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    c1d0:	210c      	movs	r1, #12
	struct bt_conn *conn = smp->chan.chan.conn;
    c1d2:	f850 6bb4 	ldr.w	r6, [r0], #180
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    c1d6:	f008 fec6 	bl	14f66 <atomic_test_bit>
    c1da:	b328      	cbz	r0, c228 <smp_master_ident+0x60>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    c1dc:	f106 087c 	add.w	r8, r6, #124	; 0x7c
    c1e0:	4642      	mov	r2, r8
    c1e2:	2004      	movs	r0, #4
    c1e4:	7a31      	ldrb	r1, [r6, #8]
		struct bt_smp_master_ident *req = (void *)buf->data;
    c1e6:	689f      	ldr	r7, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    c1e8:	f009 f9e8 	bl	155bc <bt_keys_get_type>
		if (!keys) {
    c1ec:	4605      	mov	r5, r0
    c1ee:	b950      	cbnz	r0, c206 <smp_master_ident+0x3e>
			BT_ERR("Unable to get keys for %s",
    c1f0:	4640      	mov	r0, r8
    c1f2:	f7f8 fad1 	bl	4798 <bt_addr_le_str_real>
    c1f6:	2145      	movs	r1, #69	; 0x45
    c1f8:	4602      	mov	r2, r0
    c1fa:	481d      	ldr	r0, [pc, #116]	; (c270 <smp_master_ident+0xa8>)
    c1fc:	f005 fea4 	bl	11f48 <printk>
			return BT_SMP_ERR_UNSPECIFIED;
    c200:	2008      	movs	r0, #8
}
    c202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
    c206:	2202      	movs	r2, #2
    c208:	4639      	mov	r1, r7
    c20a:	3018      	adds	r0, #24
    c20c:	f007 f9b0 	bl	13570 <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
    c210:	2208      	movs	r2, #8
    c212:	1cb9      	adds	r1, r7, #2
    c214:	f105 0010 	add.w	r0, r5, #16
    c218:	f007 f9aa 	bl	13570 <memcpy>
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    c21c:	f894 3199 	ldrb.w	r3, [r4, #409]	; 0x199
    c220:	f023 0301 	bic.w	r3, r3, #1
    c224:	f884 3199 	strb.w	r3, [r4, #409]	; 0x199
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    c228:	f894 3199 	ldrb.w	r3, [r4, #409]	; 0x199
    c22c:	079a      	lsls	r2, r3, #30
    c22e:	d50b      	bpl.n	c248 <smp_master_ident+0x80>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    c230:	2108      	movs	r1, #8
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    c232:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    c236:	f008 feb0 	bl	14f9a <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c23a:	78f3      	ldrb	r3, [r6, #3]
    c23c:	b143      	cbz	r3, c250 <smp_master_ident+0x88>
	if (!smp->local_dist && !smp->remote_dist) {
    c23e:	f8b4 5198 	ldrh.w	r5, [r4, #408]	; 0x198
    c242:	b17d      	cbz	r5, c264 <smp_master_ident+0x9c>
	return 0;
    c244:	2000      	movs	r0, #0
    c246:	e7dc      	b.n	c202 <smp_master_ident+0x3a>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    c248:	075b      	lsls	r3, r3, #29
    c24a:	d5f6      	bpl.n	c23a <smp_master_ident+0x72>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    c24c:	210a      	movs	r1, #10
    c24e:	e7f0      	b.n	c232 <smp_master_ident+0x6a>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    c250:	f894 3199 	ldrb.w	r3, [r4, #409]	; 0x199
    c254:	2b00      	cmp	r3, #0
    c256:	d1f2      	bne.n	c23e <smp_master_ident+0x76>
		err = bt_smp_distribute_keys(smp);
    c258:	4620      	mov	r0, r4
    c25a:	f7ff fb75 	bl	b948 <bt_smp_distribute_keys>
		if (err) {
    c25e:	2800      	cmp	r0, #0
    c260:	d0ed      	beq.n	c23e <smp_master_ident+0x76>
    c262:	e7ce      	b.n	c202 <smp_master_ident+0x3a>
		smp_pairing_complete(smp, 0);
    c264:	4620      	mov	r0, r4
    c266:	4629      	mov	r1, r5
    c268:	f7ff fe4e 	bl	bf08 <smp_pairing_complete>
	return 0;
    c26c:	4628      	mov	r0, r5
    c26e:	e7c8      	b.n	c202 <smp_master_ident+0x3a>
    c270:	0001ab6a 	.word	0x0001ab6a

0000c274 <smp_ident_sent>:
{
    c274:	b510      	push	{r4, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
    c276:	7883      	ldrb	r3, [r0, #2]
    c278:	2b01      	cmp	r3, #1
    c27a:	d121      	bne.n	c2c0 <smp_ident_sent+0x4c>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
    c27c:	2106      	movs	r1, #6
    c27e:	f007 ff67 	bl	14150 <bt_l2cap_le_lookup_tx_cid>
		__ASSERT(chan, "No SMP channel found");
    c282:	4604      	mov	r4, r0
    c284:	b970      	cbnz	r0, c2a4 <smp_ident_sent+0x30>
    c286:	490f      	ldr	r1, [pc, #60]	; (c2c4 <smp_ident_sent+0x50>)
    c288:	f240 330a 	movw	r3, #778	; 0x30a
    c28c:	4a0e      	ldr	r2, [pc, #56]	; (c2c8 <smp_ident_sent+0x54>)
    c28e:	480f      	ldr	r0, [pc, #60]	; (c2cc <smp_ident_sent+0x58>)
    c290:	f005 fe5a 	bl	11f48 <printk>
    c294:	480e      	ldr	r0, [pc, #56]	; (c2d0 <smp_ident_sent+0x5c>)
    c296:	f005 fe57 	bl	11f48 <printk>
    c29a:	f240 310a 	movw	r1, #778	; 0x30a
    c29e:	480a      	ldr	r0, [pc, #40]	; (c2c8 <smp_ident_sent+0x54>)
    c2a0:	f006 f8e8 	bl	12474 <assert_post_action>
		smp->local_dist &= ~dist_complete;
    c2a4:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
    c2a8:	f023 0301 	bic.w	r3, r3, #1
    c2ac:	f884 3198 	strb.w	r3, [r4, #408]	; 0x198
		if (!smp->local_dist && !smp->remote_dist) {
    c2b0:	f8b4 1198 	ldrh.w	r1, [r4, #408]	; 0x198
    c2b4:	b921      	cbnz	r1, c2c0 <smp_ident_sent+0x4c>
			smp_pairing_complete(smp, 0);
    c2b6:	4620      	mov	r0, r4
}
    c2b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_pairing_complete(smp, 0);
    c2bc:	f7ff be24 	b.w	bf08 <smp_pairing_complete>
}
    c2c0:	bd10      	pop	{r4, pc}
    c2c2:	bf00      	nop
    c2c4:	0001a36b 	.word	0x0001a36b
    c2c8:	0001ac5e 	.word	0x0001ac5e
    c2cc:	00017b50 	.word	0x00017b50
    c2d0:	0001ac8d 	.word	0x0001ac8d

0000c2d4 <bt_smp_connected>:
{
    c2d4:	b510      	push	{r4, lr}
    c2d6:	4604      	mov	r4, r0
	k_delayed_work_init(&smp->work, smp_timeout);
    c2d8:	4904      	ldr	r1, [pc, #16]	; (c2ec <bt_smp_connected+0x18>)
    c2da:	f500 70ce 	add.w	r0, r0, #412	; 0x19c
    c2de:	f00a fa3a 	bl	16756 <k_delayed_work_init>
	smp_reset(smp);
    c2e2:	4620      	mov	r0, r4
}
    c2e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
    c2e8:	f008 bf22 	b.w	15130 <smp_reset>
    c2ec:	0000c1a1 	.word	0x0000c1a1

0000c2f0 <smp_send_pairing_confirm>:
{
    c2f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
    c2f2:	f890 40b8 	ldrb.w	r4, [r0, #184]	; 0xb8
{
    c2f6:	4605      	mov	r5, r0
	switch (smp->method) {
    c2f8:	2c02      	cmp	r4, #2
    c2fa:	d824      	bhi.n	c346 <smp_send_pairing_confirm+0x56>
    c2fc:	b14c      	cbz	r4, c312 <smp_send_pairing_confirm+0x22>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    c2fe:	f890 318c 	ldrb.w	r3, [r0, #396]	; 0x18c
    c302:	f8d0 4188 	ldr.w	r4, [r0, #392]	; 0x188
    c306:	40dc      	lsrs	r4, r3
    c308:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
    c30c:	f064 047f 	orn	r4, r4, #127	; 0x7f
    c310:	b2e4      	uxtb	r4, r4
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    c312:	2103      	movs	r1, #3
    c314:	4628      	mov	r0, r5
    c316:	f008 fe4a 	bl	14fae <smp_create_pdu.isra.0>
	if (!buf) {
    c31a:	4606      	mov	r6, r0
    c31c:	b1a8      	cbz	r0, c34a <smp_send_pairing_confirm+0x5a>
	req = net_buf_add(buf, sizeof(*req));
    c31e:	2110      	movs	r1, #16
    c320:	3008      	adds	r0, #8
    c322:	f001 f98d 	bl	d640 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    c326:	9000      	str	r0, [sp, #0]
    c328:	4812      	ldr	r0, [pc, #72]	; (c374 <smp_send_pairing_confirm+0x84>)
    c32a:	4623      	mov	r3, r4
    c32c:	6800      	ldr	r0, [r0, #0]
    c32e:	f105 02d7 	add.w	r2, r5, #215	; 0xd7
    c332:	f205 1107 	addw	r1, r5, #263	; 0x107
    c336:	f008 fdef 	bl	14f18 <smp_f4>
    c33a:	4604      	mov	r4, r0
    c33c:	b148      	cbz	r0, c352 <smp_send_pairing_confirm+0x62>
		net_buf_unref(buf);
    c33e:	4630      	mov	r0, r6
    c340:	f001 f80c 	bl	d35c <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    c344:	e001      	b.n	c34a <smp_send_pairing_confirm+0x5a>
	switch (smp->method) {
    c346:	2c03      	cmp	r4, #3
    c348:	d001      	beq.n	c34e <smp_send_pairing_confirm+0x5e>
		return BT_SMP_ERR_UNSPECIFIED;
    c34a:	2008      	movs	r0, #8
    c34c:	e010      	b.n	c370 <smp_send_pairing_confirm+0x80>
	switch (smp->method) {
    c34e:	2400      	movs	r4, #0
    c350:	e7df      	b.n	c312 <smp_send_pairing_confirm+0x22>
	smp_send(smp, buf, NULL, NULL);
    c352:	4602      	mov	r2, r0
    c354:	4631      	mov	r1, r6
    c356:	4628      	mov	r0, r5
    c358:	f7ff fabc 	bl	b8d4 <smp_send.isra.0>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c35c:	35b4      	adds	r5, #180	; 0xb4
    c35e:	e8d5 3fef 	ldaex	r3, [r5]
    c362:	f023 0301 	bic.w	r3, r3, #1
    c366:	e8c5 3fe2 	stlex	r2, r3, [r5]
    c36a:	2a00      	cmp	r2, #0
    c36c:	d1f7      	bne.n	c35e <smp_send_pairing_confirm+0x6e>
	return 0;
    c36e:	4620      	mov	r0, r4
}
    c370:	b002      	add	sp, #8
    c372:	bd70      	pop	{r4, r5, r6, pc}
    c374:	200011b8 	.word	0x200011b8

0000c378 <smp_public_key>:
{
    c378:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
    c37a:	688d      	ldr	r5, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
    c37c:	f200 1607 	addw	r6, r0, #263	; 0x107
{
    c380:	4604      	mov	r4, r0
	memcpy(smp->pkey, req->x, 32);
    c382:	2220      	movs	r2, #32
    c384:	4629      	mov	r1, r5
    c386:	4630      	mov	r0, r6
    c388:	f007 f8f2 	bl	13570 <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
    c38c:	2220      	movs	r2, #32
    c38e:	f204 1027 	addw	r0, r4, #295	; 0x127
    c392:	18a9      	adds	r1, r5, r2
    c394:	f007 f8ec 	bl	13570 <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
    c398:	2240      	movs	r2, #64	; 0x40
    c39a:	4630      	mov	r0, r6
    c39c:	495a      	ldr	r1, [pc, #360]	; (c508 <smp_public_key+0x190>)
    c39e:	f007 f8d7 	bl	13550 <memcmp>
    c3a2:	b128      	cbz	r0, c3b0 <smp_public_key+0x38>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    c3a4:	6823      	ldr	r3, [r4, #0]
    c3a6:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c3a8:	b323      	cbz	r3, c3f4 <smp_public_key+0x7c>
	return 0;
    c3aa:	2000      	movs	r0, #0
}
    c3ac:	b002      	add	sp, #8
    c3ae:	bd70      	pop	{r4, r5, r6, pc}
		BT_INFO("Remote is using Debug Public key");
    c3b0:	2149      	movs	r1, #73	; 0x49
    c3b2:	4856      	ldr	r0, [pc, #344]	; (c50c <smp_public_key+0x194>)
    c3b4:	f005 fdc8 	bl	11f48 <printk>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    c3b8:	210d      	movs	r1, #13
    c3ba:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    c3be:	f008 fdec 	bl	14f9a <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
    c3c2:	6825      	ldr	r5, [r4, #0]
	if (!conn->le.keys) {
    c3c4:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
    c3c8:	b933      	cbnz	r3, c3d8 <smp_public_key+0x60>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    c3ca:	7a28      	ldrb	r0, [r5, #8]
    c3cc:	f105 017c 	add.w	r1, r5, #124	; 0x7c
    c3d0:	f000 fcc0 	bl	cd54 <bt_keys_get_addr>
    c3d4:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
	if (!conn->le.keys ||
    c3d8:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
    c3dc:	2b00      	cmp	r3, #0
    c3de:	d0e1      	beq.n	c3a4 <smp_public_key+0x2c>
    c3e0:	89da      	ldrh	r2, [r3, #14]
    c3e2:	f002 0224 	and.w	r2, r2, #36	; 0x24
    c3e6:	2a00      	cmp	r2, #0
    c3e8:	d0dc      	beq.n	c3a4 <smp_public_key+0x2c>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
    c3ea:	7b5b      	ldrb	r3, [r3, #13]
    c3ec:	0799      	lsls	r1, r3, #30
    c3ee:	d5d9      	bpl.n	c3a4 <smp_public_key+0x2c>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
    c3f0:	2003      	movs	r0, #3
    c3f2:	e7db      	b.n	c3ac <smp_public_key+0x34>
		switch (smp->method) {
    c3f4:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    c3f8:	2b05      	cmp	r3, #5
    c3fa:	d81a      	bhi.n	c432 <smp_public_key+0xba>
    c3fc:	e8df f003 	tbb	[pc, r3]
    c400:	03134103 	.word	0x03134103
    c404:	4c19      	.short	0x4c19
			atomic_set_bit(&smp->allowed_cmds,
    c406:	2103      	movs	r1, #3
    c408:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    c40c:	f008 fdc5 	bl	14f9a <atomic_set_bit>
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
    c410:	4630      	mov	r0, r6
    c412:	493f      	ldr	r1, [pc, #252]	; (c510 <smp_public_key+0x198>)
    c414:	f7fa fae8 	bl	69e8 <bt_dh_key_gen>
    c418:	b958      	cbnz	r0, c432 <smp_public_key+0xba>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    c41a:	2107      	movs	r1, #7
    c41c:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    c420:	f008 fdbb 	bl	14f9a <atomic_set_bit>
	return 0;
    c424:	e7c1      	b.n	c3aa <smp_public_key+0x32>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    c426:	2104      	movs	r1, #4
    c428:	f504 70c4 	add.w	r0, r4, #392	; 0x188
    c42c:	f7fa fbb4 	bl	6b98 <bt_rand>
    c430:	b108      	cbz	r0, c436 <smp_public_key+0xbe>
		switch (smp->method) {
    c432:	2008      	movs	r0, #8
    c434:	e7ba      	b.n	c3ac <smp_public_key+0x34>
		smp->passkey %= 1000000;
    c436:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
    c43a:	4a36      	ldr	r2, [pc, #216]	; (c514 <smp_public_key+0x19c>)
	if (bt_auth && bt_auth->passkey_display) {
    c43c:	4d36      	ldr	r5, [pc, #216]	; (c518 <smp_public_key+0x1a0>)
		smp->passkey %= 1000000;
    c43e:	fbb1 f3f2 	udiv	r3, r1, r2
    c442:	fb02 1313 	mls	r3, r2, r3, r1
    c446:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
	if (bt_auth && bt_auth->passkey_display) {
    c44a:	682b      	ldr	r3, [r5, #0]
	smp->passkey_round = 0U;
    c44c:	f884 018c 	strb.w	r0, [r4, #396]	; 0x18c
	if (bt_auth && bt_auth->passkey_display) {
    c450:	b163      	cbz	r3, c46c <smp_public_key+0xf4>
    c452:	681b      	ldr	r3, [r3, #0]
    c454:	b153      	cbz	r3, c46c <smp_public_key+0xf4>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    c456:	210a      	movs	r1, #10
    c458:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    c45c:	f008 fd9d 	bl	14f9a <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    c460:	682b      	ldr	r3, [r5, #0]
    c462:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
    c466:	681b      	ldr	r3, [r3, #0]
    c468:	6820      	ldr	r0, [r4, #0]
    c46a:	4798      	blx	r3
			atomic_set_bit(&smp->allowed_cmds,
    c46c:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    c470:	2103      	movs	r1, #3
    c472:	f008 fd92 	bl	14f9a <atomic_set_bit>
			err = smp_send_pairing_confirm(smp);
    c476:	4620      	mov	r0, r4
    c478:	f7ff ff3a 	bl	c2f0 <smp_send_pairing_confirm>
			if (err) {
    c47c:	2800      	cmp	r0, #0
    c47e:	d195      	bne.n	c3ac <smp_public_key+0x34>
    c480:	e7c6      	b.n	c410 <smp_public_key+0x98>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    c482:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    c486:	2109      	movs	r1, #9
    c488:	f008 fd87 	bl	14f9a <atomic_set_bit>
			bt_auth->passkey_entry(smp->chan.chan.conn);
    c48c:	4b22      	ldr	r3, [pc, #136]	; (c518 <smp_public_key+0x1a0>)
    c48e:	6820      	ldr	r0, [r4, #0]
    c490:	681b      	ldr	r3, [r3, #0]
    c492:	685b      	ldr	r3, [r3, #4]
    c494:	4798      	blx	r3
			break;
    c496:	e7bb      	b.n	c410 <smp_public_key+0x98>
			if (bt_rand(smp->prnd, 16)) {
    c498:	2110      	movs	r1, #16
    c49a:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
    c49e:	f7fa fb7b 	bl	6b98 <bt_rand>
    c4a2:	2800      	cmp	r0, #0
    c4a4:	d1c5      	bne.n	c432 <smp_public_key+0xba>
			if (bt_auth && bt_auth->oob_data_request) {
    c4a6:	4d1c      	ldr	r5, [pc, #112]	; (c518 <smp_public_key+0x1a0>)
    c4a8:	682b      	ldr	r3, [r5, #0]
    c4aa:	b32b      	cbz	r3, c4f8 <smp_public_key+0x180>
    c4ac:	68db      	ldr	r3, [r3, #12]
    c4ae:	b31b      	cbz	r3, c4f8 <smp_public_key+0x180>
				struct bt_conn_oob_info info = {
    c4b0:	4b1a      	ldr	r3, [pc, #104]	; (c51c <smp_public_key+0x1a4>)
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    c4b2:	6821      	ldr	r1, [r4, #0]
				struct bt_conn_oob_info info = {
    c4b4:	881b      	ldrh	r3, [r3, #0]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c4b6:	78c9      	ldrb	r1, [r1, #3]
				struct bt_conn_oob_info info = {
    c4b8:	f8ad 3004 	strh.w	r3, [sp, #4]
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    c4bc:	f894 20bb 	ldrb.w	r2, [r4, #187]	; 0xbb
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    c4c0:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c4c4:	b939      	cbnz	r1, c4d6 <smp_public_key+0x15e>
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
    c4c6:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    c4c8:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
    c4cc:	d416      	bmi.n	c4fc <smp_public_key+0x184>
	int oob_config = BT_CONN_OOB_NO_DATA;
    c4ce:	2b00      	cmp	r3, #0
    c4d0:	bf08      	it	eq
    c4d2:	2003      	moveq	r0, #3
    c4d4:	e000      	b.n	c4d8 <smp_public_key+0x160>
    c4d6:	2003      	movs	r0, #3
				smp->oobd_local = NULL;
    c4d8:	2300      	movs	r3, #0
	info->lesc.oob_config = oob_config;
    c4da:	f88d 0005 	strb.w	r0, [sp, #5]
				smp->oobd_remote = NULL;
    c4de:	e9c4 3364 	strd	r3, r3, [r4, #400]	; 0x190
				atomic_set_bit(smp->flags,
    c4e2:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    c4e6:	210b      	movs	r1, #11
    c4e8:	f008 fd57 	bl	14f9a <atomic_set_bit>
				bt_auth->oob_data_request(smp->chan.chan.conn,
    c4ec:	682b      	ldr	r3, [r5, #0]
    c4ee:	6820      	ldr	r0, [r4, #0]
    c4f0:	68db      	ldr	r3, [r3, #12]
    c4f2:	a901      	add	r1, sp, #4
    c4f4:	4798      	blx	r3
			break;
    c4f6:	e78b      	b.n	c410 <smp_public_key+0x98>
				return BT_SMP_ERR_OOB_NOT_AVAIL;
    c4f8:	2002      	movs	r0, #2
    c4fa:	e757      	b.n	c3ac <smp_public_key+0x34>
				     BT_CONN_OOB_BOTH_PEERS :
    c4fc:	2b00      	cmp	r3, #0
    c4fe:	bf0c      	ite	eq
    c500:	2001      	moveq	r0, #1
    c502:	2002      	movne	r0, #2
    c504:	e7e8      	b.n	c4d8 <smp_public_key+0x160>
    c506:	bf00      	nop
    c508:	0001adba 	.word	0x0001adba
    c50c:	0001aca4 	.word	0x0001aca4
    c510:	0000bfad 	.word	0x0000bfad
    c514:	000f4240 	.word	0x000f4240
    c518:	20000d20 	.word	0x20000d20
    c51c:	00016d7e 	.word	0x00016d7e

0000c520 <smp_pairing_rsp>:
{
    c520:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *rsp = (void *)buf->data;
    c524:	688f      	ldr	r7, [r1, #8]
{
    c526:	4604      	mov	r4, r0
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    c528:	78fb      	ldrb	r3, [r7, #3]
    c52a:	3b07      	subs	r3, #7
    c52c:	2b09      	cmp	r3, #9
    c52e:	d904      	bls.n	c53a <smp_pairing_rsp+0x1a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    c530:	2706      	movs	r7, #6
}
    c532:	4638      	mov	r0, r7
    c534:	b002      	add	sp, #8
    c536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	smp->local_dist &= rsp->init_key_dist;
    c53a:	793a      	ldrb	r2, [r7, #4]
    c53c:	f890 3198 	ldrb.w	r3, [r0, #408]	; 0x198
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
    c540:	4639      	mov	r1, r7
	smp->local_dist &= rsp->init_key_dist;
    c542:	4013      	ands	r3, r2
    c544:	f880 3198 	strb.w	r3, [r0, #408]	; 0x198
	smp->remote_dist &= rsp->resp_key_dist;
    c548:	797a      	ldrb	r2, [r7, #5]
    c54a:	f890 3199 	ldrb.w	r3, [r0, #409]	; 0x199
	struct bt_conn *conn = smp->chan.chan.conn;
    c54e:	6806      	ldr	r6, [r0, #0]
	smp->remote_dist &= rsp->resp_key_dist;
    c550:	4013      	ands	r3, r2
    c552:	f880 3199 	strb.w	r3, [r0, #409]	; 0x199
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    c556:	2302      	movs	r3, #2
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
    c558:	2206      	movs	r2, #6
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    c55a:	f880 30c0 	strb.w	r3, [r0, #192]	; 0xc0
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
    c55e:	30c1      	adds	r0, #193	; 0xc1
    c560:	f007 f806 	bl	13570 <memcpy>
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    c564:	78bb      	ldrb	r3, [r7, #2]
    c566:	f104 05b4 	add.w	r5, r4, #180	; 0xb4
    c56a:	0719      	lsls	r1, r3, #28
    c56c:	d507      	bpl.n	c57e <smp_pairing_rsp+0x5e>
    c56e:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
    c572:	071a      	lsls	r2, r3, #28
    c574:	d503      	bpl.n	c57e <smp_pairing_rsp+0x5e>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    c576:	2105      	movs	r1, #5
    c578:	4628      	mov	r0, r5
    c57a:	f008 fd0e 	bl	14f9a <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    c57e:	78bb      	ldrb	r3, [r7, #2]
    c580:	069b      	lsls	r3, r3, #26
    c582:	d507      	bpl.n	c594 <smp_pairing_rsp+0x74>
    c584:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
    c588:	0698      	lsls	r0, r3, #26
    c58a:	d503      	bpl.n	c594 <smp_pairing_rsp+0x74>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    c58c:	2113      	movs	r1, #19
    c58e:	4628      	mov	r0, r5
    c590:	f008 fd03 	bl	14f9a <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    c594:	78bb      	ldrb	r3, [r7, #2]
    c596:	07d9      	lsls	r1, r3, #31
    c598:	d507      	bpl.n	c5aa <smp_pairing_rsp+0x8a>
    c59a:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
    c59e:	07da      	lsls	r2, r3, #31
    c5a0:	d503      	bpl.n	c5aa <smp_pairing_rsp+0x8a>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    c5a2:	210c      	movs	r1, #12
    c5a4:	4628      	mov	r0, r5
    c5a6:	f008 fcf8 	bl	14f9a <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    c5aa:	2105      	movs	r1, #5
    c5ac:	4628      	mov	r0, r5
	smp->method = get_pair_method(smp, rsp->io_capability);
    c5ae:	783f      	ldrb	r7, [r7, #0]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    c5b0:	f008 fcd9 	bl	14f66 <atomic_test_bit>
    c5b4:	f8d4 8000 	ldr.w	r8, [r4]
    c5b8:	2800      	cmp	r0, #0
    c5ba:	d14b      	bne.n	c654 <smp_pairing_rsp+0x134>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    c5bc:	2f04      	cmp	r7, #4
    c5be:	d816      	bhi.n	c5ee <smp_pairing_rsp+0xce>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    c5c0:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    c5c4:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    c5c8:	4318      	orrs	r0, r3
    c5ca:	f010 0004 	ands.w	r0, r0, #4
    c5ce:	d00e      	beq.n	c5ee <smp_pairing_rsp+0xce>
	method = gen_method_legacy[remote_io][get_io_capa()];
    c5d0:	f7ff f908 	bl	b7e4 <get_io_capa>
    c5d4:	4b92      	ldr	r3, [pc, #584]	; (c820 <smp_pairing_rsp+0x300>)
    c5d6:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    c5da:	441f      	add	r7, r3
    c5dc:	5c38      	ldrb	r0, [r7, r0]
	if (method == PASSKEY_ROLE) {
    c5de:	2804      	cmp	r0, #4
    c5e0:	d105      	bne.n	c5ee <smp_pairing_rsp+0xce>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    c5e2:	f898 3003 	ldrb.w	r3, [r8, #3]
			method = PASSKEY_INPUT;
    c5e6:	2b00      	cmp	r3, #0
    c5e8:	bf0c      	ite	eq
    c5ea:	2002      	moveq	r0, #2
    c5ec:	2001      	movne	r0, #1
	smp->method = get_pair_method(smp, rsp->io_capability);
    c5ee:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
	if (!conn->le.keys) {
    c5f2:	f8d8 30a8 	ldr.w	r3, [r8, #168]	; 0xa8
    c5f6:	b93b      	cbnz	r3, c608 <smp_pairing_rsp+0xe8>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    c5f8:	f898 0008 	ldrb.w	r0, [r8, #8]
    c5fc:	f108 017c 	add.w	r1, r8, #124	; 0x7c
    c600:	f000 fba8 	bl	cd54 <bt_keys_get_addr>
    c604:	f8c8 00a8 	str.w	r0, [r8, #168]	; 0xa8
	if (!conn->le.keys ||
    c608:	f8d8 20a8 	ldr.w	r2, [r8, #168]	; 0xa8
    c60c:	2a00      	cmp	r2, #0
    c60e:	d142      	bne.n	c696 <smp_pairing_rsp+0x176>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    c610:	2105      	movs	r1, #5
    c612:	4628      	mov	r0, r5
    c614:	f008 fca7 	bl	14f66 <atomic_test_bit>
    c618:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    c61c:	2800      	cmp	r0, #0
    c61e:	f040 80c0 	bne.w	c7a2 <smp_pairing_rsp+0x282>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    c622:	461f      	mov	r7, r3
    c624:	2b00      	cmp	r3, #0
    c626:	d154      	bne.n	c6d2 <smp_pairing_rsp+0x1b2>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    c628:	210e      	movs	r1, #14
    c62a:	4628      	mov	r0, r5
    c62c:	f008 fc9b 	bl	14f66 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    c630:	2800      	cmp	r0, #0
    c632:	d04e      	beq.n	c6d2 <smp_pairing_rsp+0x1b2>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    c634:	4e7b      	ldr	r6, [pc, #492]	; (c824 <smp_pairing_rsp+0x304>)
    c636:	6833      	ldr	r3, [r6, #0]
    c638:	2b00      	cmp	r3, #0
    c63a:	d04a      	beq.n	c6d2 <smp_pairing_rsp+0x1b2>
	    bt_auth && bt_auth->pairing_confirm) {
    c63c:	695b      	ldr	r3, [r3, #20]
    c63e:	2b00      	cmp	r3, #0
    c640:	d047      	beq.n	c6d2 <smp_pairing_rsp+0x1b2>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    c642:	4628      	mov	r0, r5
    c644:	2109      	movs	r1, #9
    c646:	f008 fca8 	bl	14f9a <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    c64a:	6833      	ldr	r3, [r6, #0]
    c64c:	6820      	ldr	r0, [r4, #0]
    c64e:	695b      	ldr	r3, [r3, #20]
    c650:	4798      	blx	r3
		return 0;
    c652:	e76e      	b.n	c532 <smp_pairing_rsp+0x12>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
    c654:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    c658:	f894 20c3 	ldrb.w	r2, [r4, #195]	; 0xc3
    c65c:	ea00 0302 	and.w	r3, r0, r2
    c660:	071b      	lsls	r3, r3, #28
    c662:	d506      	bpl.n	c672 <smp_pairing_rsp+0x152>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    c664:	f894 10c2 	ldrb.w	r1, [r4, #194]	; 0xc2
    c668:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
    c66c:	430b      	orrs	r3, r1
    c66e:	07d9      	lsls	r1, r3, #31
    c670:	d40d      	bmi.n	c68e <smp_pairing_rsp+0x16e>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    c672:	2f04      	cmp	r7, #4
    c674:	d80d      	bhi.n	c692 <smp_pairing_rsp+0x172>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    c676:	4310      	orrs	r0, r2
    c678:	f010 0004 	ands.w	r0, r0, #4
    c67c:	d0b7      	beq.n	c5ee <smp_pairing_rsp+0xce>
	return gen_method_sc[remote_io][get_io_capa()];
    c67e:	f7ff f8b1 	bl	b7e4 <get_io_capa>
    c682:	4b69      	ldr	r3, [pc, #420]	; (c828 <smp_pairing_rsp+0x308>)
    c684:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    c688:	441f      	add	r7, r3
    c68a:	5c38      	ldrb	r0, [r7, r0]
    c68c:	e7af      	b.n	c5ee <smp_pairing_rsp+0xce>
			return LE_SC_OOB;
    c68e:	2005      	movs	r0, #5
    c690:	e7ad      	b.n	c5ee <smp_pairing_rsp+0xce>
		return JUST_WORKS;
    c692:	2000      	movs	r0, #0
    c694:	e7ab      	b.n	c5ee <smp_pairing_rsp+0xce>
	    !(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
    c696:	89d1      	ldrh	r1, [r2, #14]
	if (!conn->le.keys ||
    c698:	f011 0f24 	tst.w	r1, #36	; 0x24
    c69c:	d0b8      	beq.n	c610 <smp_pairing_rsp+0xf0>
	return MIN(req->max_key_size, rsp->max_key_size);
    c69e:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
    c6a2:	f894 00bd 	ldrb.w	r0, [r4, #189]	; 0xbd
	if (conn->le.keys->enc_size > get_encryption_key_size(smp)) {
    c6a6:	7b12      	ldrb	r2, [r2, #12]
    c6a8:	4283      	cmp	r3, r0
    c6aa:	bf28      	it	cs
    c6ac:	4603      	movcs	r3, r0
    c6ae:	429a      	cmp	r2, r3
    c6b0:	d901      	bls.n	c6b6 <smp_pairing_rsp+0x196>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
    c6b2:	2703      	movs	r7, #3
    c6b4:	e73d      	b.n	c532 <smp_pairing_rsp+0x12>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    c6b6:	068a      	lsls	r2, r1, #26
    c6b8:	d404      	bmi.n	c6c4 <smp_pairing_rsp+0x1a4>
	if (!IS_ENABLED(CONFIG_BT_SMP_ALLOW_UNAUTH_OVERWRITE) &&
    c6ba:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    c6be:	2b00      	cmp	r3, #0
    c6c0:	d1a6      	bne.n	c610 <smp_pairing_rsp+0xf0>
    c6c2:	e7f6      	b.n	c6b2 <smp_pairing_rsp+0x192>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    c6c4:	2105      	movs	r1, #5
    c6c6:	4628      	mov	r0, r5
    c6c8:	f008 fc4d 	bl	14f66 <atomic_test_bit>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    c6cc:	2800      	cmp	r0, #0
    c6ce:	d1f4      	bne.n	c6ba <smp_pairing_rsp+0x19a>
    c6d0:	e7ef      	b.n	c6b2 <smp_pairing_rsp+0x192>
	struct bt_conn *conn = smp->chan.chan.conn;
    c6d2:	6826      	ldr	r6, [r4, #0]
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
    c6d4:	7a30      	ldrb	r0, [r6, #8]
    c6d6:	f106 017c 	add.w	r1, r6, #124	; 0x7c
    c6da:	f000 fbcb 	bl	ce74 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
    c6de:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
    c6e2:	b148      	cbz	r0, c6f8 <smp_pairing_rsp+0x1d8>
    c6e4:	7b43      	ldrb	r3, [r0, #13]
    c6e6:	07db      	lsls	r3, r3, #31
    c6e8:	d506      	bpl.n	c6f8 <smp_pairing_rsp+0x1d8>
    c6ea:	b92a      	cbnz	r2, c6f8 <smp_pairing_rsp+0x1d8>
		BT_ERR("JustWorks failed, authenticated keys present");
    c6ec:	2145      	movs	r1, #69	; 0x45
    c6ee:	484f      	ldr	r0, [pc, #316]	; (c82c <smp_pairing_rsp+0x30c>)
    c6f0:	f005 fc2a 	bl	11f48 <printk>
				return BT_SMP_ERR_UNSPECIFIED;
    c6f4:	2708      	movs	r7, #8
    c6f6:	e71c      	b.n	c532 <smp_pairing_rsp+0x12>
	switch (smp->method) {
    c6f8:	2a01      	cmp	r2, #1
    c6fa:	d03d      	beq.n	c778 <smp_pairing_rsp+0x258>
    c6fc:	2a02      	cmp	r2, #2
    c6fe:	d011      	beq.n	c724 <smp_pairing_rsp+0x204>
    c700:	2a00      	cmp	r2, #0
    c702:	d143      	bne.n	c78c <smp_pairing_rsp+0x26c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    c704:	2109      	movs	r1, #9
    c706:	4628      	mov	r0, r5
    c708:	f008 fc2d 	bl	14f66 <atomic_test_bit>
    c70c:	2800      	cmp	r0, #0
    c70e:	d142      	bne.n	c796 <smp_pairing_rsp+0x276>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    c710:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    c714:	2103      	movs	r1, #3
    c716:	f008 fc40 	bl	14f9a <atomic_set_bit>
		return legacy_send_pairing_confirm(smp);
    c71a:	4620      	mov	r0, r4
    c71c:	f008 fe03 	bl	15326 <legacy_send_pairing_confirm>
	return sc_send_public_key(smp);
    c720:	4607      	mov	r7, r0
    c722:	e706      	b.n	c532 <smp_pairing_rsp+0x12>
			if (bt_rand(&passkey, sizeof(passkey))) {
    c724:	2104      	movs	r1, #4
    c726:	eb0d 0001 	add.w	r0, sp, r1
    c72a:	f7fa fa35 	bl	6b98 <bt_rand>
    c72e:	2800      	cmp	r0, #0
    c730:	d1e0      	bne.n	c6f4 <smp_pairing_rsp+0x1d4>
			passkey %= 1000000;
    c732:	9901      	ldr	r1, [sp, #4]
    c734:	4a3e      	ldr	r2, [pc, #248]	; (c830 <smp_pairing_rsp+0x310>)
		if (bt_auth && bt_auth->passkey_display) {
    c736:	4f3b      	ldr	r7, [pc, #236]	; (c824 <smp_pairing_rsp+0x304>)
			passkey %= 1000000;
    c738:	fbb1 f3f2 	udiv	r3, r1, r2
    c73c:	fb02 1313 	mls	r3, r2, r3, r1
    c740:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
    c742:	683b      	ldr	r3, [r7, #0]
    c744:	b153      	cbz	r3, c75c <smp_pairing_rsp+0x23c>
    c746:	681b      	ldr	r3, [r3, #0]
    c748:	b143      	cbz	r3, c75c <smp_pairing_rsp+0x23c>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    c74a:	210a      	movs	r1, #10
    c74c:	4628      	mov	r0, r5
    c74e:	f008 fc24 	bl	14f9a <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
    c752:	683b      	ldr	r3, [r7, #0]
    c754:	4630      	mov	r0, r6
    c756:	681b      	ldr	r3, [r3, #0]
    c758:	9901      	ldr	r1, [sp, #4]
    c75a:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
    c75c:	9b01      	ldr	r3, [sp, #4]
	dst[1] = val >> 8;
    c75e:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    c762:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
	sys_put_le16(val >> 16, &dst[2]);
    c766:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    c768:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
	dst[1] = val >> 8;
    c76c:	0a1b      	lsrs	r3, r3, #8
    c76e:	f884 20f8 	strb.w	r2, [r4, #248]	; 0xf8
    c772:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
	if (ret) {
    c776:	e7c5      	b.n	c704 <smp_pairing_rsp+0x1e4>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    c778:	4628      	mov	r0, r5
    c77a:	2109      	movs	r1, #9
    c77c:	f008 fc0d 	bl	14f9a <atomic_set_bit>
		bt_auth->passkey_entry(conn);
    c780:	4b28      	ldr	r3, [pc, #160]	; (c824 <smp_pairing_rsp+0x304>)
    c782:	4630      	mov	r0, r6
    c784:	681b      	ldr	r3, [r3, #0]
    c786:	685b      	ldr	r3, [r3, #4]
    c788:	4798      	blx	r3
	if (ret) {
    c78a:	e7bb      	b.n	c704 <smp_pairing_rsp+0x1e4>
		BT_ERR("Unknown pairing method (%u)", smp->method);
    c78c:	2145      	movs	r1, #69	; 0x45
    c78e:	4829      	ldr	r0, [pc, #164]	; (c834 <smp_pairing_rsp+0x314>)
    c790:	f005 fbda 	bl	11f48 <printk>
	if (ret) {
    c794:	e7ae      	b.n	c6f4 <smp_pairing_rsp+0x1d4>
	atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    c796:	2100      	movs	r1, #0
    c798:	4628      	mov	r0, r5
    c79a:	f008 fbfe 	bl	14f9a <atomic_set_bit>
	return 0;
    c79e:	2700      	movs	r7, #0
    c7a0:	e6c7      	b.n	c532 <smp_pairing_rsp+0x12>
	if ((IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) ||
    c7a2:	7ab2      	ldrb	r2, [r6, #10]
    c7a4:	461f      	mov	r7, r3
    c7a6:	2a04      	cmp	r2, #4
    c7a8:	d10b      	bne.n	c7c2 <smp_pairing_rsp+0x2a2>
	     conn->required_sec_level == BT_SECURITY_L4) &&
    c7aa:	2b00      	cmp	r3, #0
    c7ac:	d081      	beq.n	c6b2 <smp_pairing_rsp+0x192>
	return MIN(req->max_key_size, rsp->max_key_size);
    c7ae:	f894 20bd 	ldrb.w	r2, [r4, #189]	; 0xbd
    c7b2:	f894 10c4 	ldrb.w	r1, [r4, #196]	; 0xc4
	     conn->required_sec_level == BT_SECURITY_L4) &&
    c7b6:	428a      	cmp	r2, r1
    c7b8:	bf28      	it	cs
    c7ba:	460a      	movcs	r2, r1
    c7bc:	2a10      	cmp	r2, #16
    c7be:	f47f aeb7 	bne.w	c530 <smp_pairing_rsp+0x10>
	smp->local_dist &= SEND_KEYS_SC;
    c7c2:	2200      	movs	r2, #0
    c7c4:	f884 2198 	strb.w	r2, [r4, #408]	; 0x198
	smp->remote_dist &= RECV_KEYS_SC;
    c7c8:	f894 2199 	ldrb.w	r2, [r4, #409]	; 0x199
    c7cc:	f002 0202 	and.w	r2, r2, #2
    c7d0:	f884 2199 	strb.w	r2, [r4, #409]	; 0x199
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    c7d4:	b95b      	cbnz	r3, c7ee <smp_pairing_rsp+0x2ce>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    c7d6:	210e      	movs	r1, #14
    c7d8:	4628      	mov	r0, r5
    c7da:	f008 fbc4 	bl	14f66 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    c7de:	b130      	cbz	r0, c7ee <smp_pairing_rsp+0x2ce>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    c7e0:	4e10      	ldr	r6, [pc, #64]	; (c824 <smp_pairing_rsp+0x304>)
    c7e2:	6833      	ldr	r3, [r6, #0]
    c7e4:	b11b      	cbz	r3, c7ee <smp_pairing_rsp+0x2ce>
	    bt_auth && bt_auth->pairing_confirm) {
    c7e6:	695b      	ldr	r3, [r3, #20]
    c7e8:	2b00      	cmp	r3, #0
    c7ea:	f47f af2a 	bne.w	c642 <smp_pairing_rsp+0x122>
	if (!sc_public_key) {
    c7ee:	4b12      	ldr	r3, [pc, #72]	; (c838 <smp_pairing_rsp+0x318>)
    c7f0:	681f      	ldr	r7, [r3, #0]
    c7f2:	b927      	cbnz	r7, c7fe <smp_pairing_rsp+0x2de>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    c7f4:	2106      	movs	r1, #6
    c7f6:	4628      	mov	r0, r5
    c7f8:	f008 fbcf 	bl	14f9a <atomic_set_bit>
		return 0;
    c7fc:	e699      	b.n	c532 <smp_pairing_rsp+0x12>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    c7fe:	210c      	movs	r1, #12
    c800:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    c804:	f008 fbc9 	bl	14f9a <atomic_set_bit>
    c808:	e8d0 3fef 	ldaex	r3, [r0]
    c80c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    c810:	e8c0 3fe2 	stlex	r2, r3, [r0]
    c814:	2a00      	cmp	r2, #0
    c816:	d1f7      	bne.n	c808 <smp_pairing_rsp+0x2e8>
	return sc_send_public_key(smp);
    c818:	4620      	mov	r0, r4
    c81a:	f7ff f873 	bl	b904 <sc_send_public_key>
    c81e:	e77f      	b.n	c720 <smp_pairing_rsp+0x200>
    c820:	0001ad78 	.word	0x0001ad78
    c824:	20000d20 	.word	0x20000d20
    c828:	0001ad91 	.word	0x0001ad91
    c82c:	0001acca 	.word	0x0001acca
    c830:	000f4240 	.word	0x000f4240
    c834:	0001acfc 	.word	0x0001acfc
    c838:	200011b8 	.word	0x200011b8

0000c83c <smp_pairing_random>:
{
    c83c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c840:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    c842:	f100 07e7 	add.w	r7, r0, #231	; 0xe7
    c846:	2210      	movs	r2, #16
    c848:	6889      	ldr	r1, [r1, #8]
{
    c84a:	b09e      	sub	sp, #120	; 0x78
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    c84c:	4638      	mov	r0, r7
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    c84e:	f104 06b4 	add.w	r6, r4, #180	; 0xb4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    c852:	f006 fe8d 	bl	13570 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    c856:	2105      	movs	r1, #5
    c858:	4630      	mov	r0, r6
    c85a:	f008 fb84 	bl	14f66 <atomic_test_bit>
    c85e:	f8d4 9000 	ldr.w	r9, [r4]
    c862:	2800      	cmp	r0, #0
    c864:	d157      	bne.n	c916 <smp_pairing_random+0xda>
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    c866:	f109 038a 	add.w	r3, r9, #138	; 0x8a
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    c86a:	f104 0af7 	add.w	sl, r4, #247	; 0xf7
    c86e:	f10d 0828 	add.w	r8, sp, #40	; 0x28
    c872:	9301      	str	r3, [sp, #4]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    c874:	f109 0383 	add.w	r3, r9, #131	; 0x83
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    c878:	9300      	str	r3, [sp, #0]
    c87a:	4639      	mov	r1, r7
    c87c:	4650      	mov	r0, sl
    c87e:	f8cd 8008 	str.w	r8, [sp, #8]
    c882:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
    c886:	f104 02b9 	add.w	r2, r4, #185	; 0xb9
    c88a:	f008 fcf1 	bl	15270 <smp_c1>
	if (err) {
    c88e:	2800      	cmp	r0, #0
    c890:	d13a      	bne.n	c908 <smp_pairing_random+0xcc>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    c892:	2210      	movs	r2, #16
    c894:	4641      	mov	r1, r8
    c896:	f104 00c7 	add.w	r0, r4, #199	; 0xc7
    c89a:	f006 fe59 	bl	13550 <memcmp>
    c89e:	2800      	cmp	r0, #0
    c8a0:	d173      	bne.n	c98a <smp_pairing_random+0x14e>
	    conn->role == BT_HCI_ROLE_MASTER) {
    c8a2:	f899 5003 	ldrb.w	r5, [r9, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c8a6:	2d00      	cmp	r5, #0
    c8a8:	f040 80db 	bne.w	ca62 <smp_pairing_random+0x226>
	memcpy(out, r2, 8);
    c8ac:	2208      	movs	r2, #8
    c8ae:	f104 01d7 	add.w	r1, r4, #215	; 0xd7
    c8b2:	4640      	mov	r0, r8
    c8b4:	f006 fe5c 	bl	13570 <memcpy>
	memcpy(out + 8, r1, 8);
    c8b8:	2208      	movs	r2, #8
    c8ba:	4639      	mov	r1, r7
    c8bc:	a80c      	add	r0, sp, #48	; 0x30
    c8be:	f006 fe57 	bl	13570 <memcpy>
	return bt_encrypt_le(k, out, out);
    c8c2:	4642      	mov	r2, r8
    c8c4:	4641      	mov	r1, r8
    c8c6:	4650      	mov	r0, sl
    c8c8:	f007 f903 	bl	13ad2 <bt_encrypt_le>
		if (err) {
    c8cc:	b9e0      	cbnz	r0, c908 <smp_pairing_random+0xcc>
		(void)memset(ediv, 0, sizeof(ediv));
    c8ce:	2202      	movs	r2, #2
    c8d0:	4629      	mov	r1, r5
    c8d2:	a805      	add	r0, sp, #20
    c8d4:	f006 fe77 	bl	135c6 <memset>
		(void)memset(rand, 0, sizeof(rand));
    c8d8:	2208      	movs	r2, #8
    c8da:	4629      	mov	r1, r5
    c8dc:	a806      	add	r0, sp, #24
    c8de:	f006 fe72 	bl	135c6 <memset>
	return MIN(req->max_key_size, rsp->max_key_size);
    c8e2:	f894 20c4 	ldrb.w	r2, [r4, #196]	; 0xc4
    c8e6:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
		if (bt_conn_le_start_encryption(conn, rand, ediv, tmp,
    c8ea:	4648      	mov	r0, r9
    c8ec:	429a      	cmp	r2, r3
    c8ee:	bf94      	ite	ls
    c8f0:	9200      	strls	r2, [sp, #0]
    c8f2:	9300      	strhi	r3, [sp, #0]
    c8f4:	a906      	add	r1, sp, #24
    c8f6:	4643      	mov	r3, r8
    c8f8:	aa05      	add	r2, sp, #20
    c8fa:	f007 f959 	bl	13bb0 <bt_conn_le_start_encryption>
    c8fe:	b128      	cbz	r0, c90c <smp_pairing_random+0xd0>
			BT_ERR("Failed to start encryption");
    c900:	2145      	movs	r1, #69	; 0x45
    c902:	485f      	ldr	r0, [pc, #380]	; (ca80 <smp_pairing_random+0x244>)
    c904:	f005 fb20 	bl	11f48 <printk>
				return BT_SMP_ERR_UNSPECIFIED;
    c908:	2508      	movs	r5, #8
    c90a:	e03f      	b.n	c98c <smp_pairing_random+0x150>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    c90c:	2101      	movs	r1, #1
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    c90e:	4630      	mov	r0, r6
    c910:	f008 fb43 	bl	14f9a <atomic_set_bit>
			return 0;
    c914:	e03a      	b.n	c98c <smp_pairing_random+0x150>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    c916:	f899 5003 	ldrb.w	r5, [r9, #3]
    c91a:	2d00      	cmp	r5, #0
    c91c:	f040 80ae 	bne.w	ca7c <smp_pairing_random+0x240>
	switch (smp->method) {
    c920:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    c924:	2b05      	cmp	r3, #5
    c926:	d8ef      	bhi.n	c908 <smp_pairing_random+0xcc>
    c928:	a201      	add	r2, pc, #4	; (adr r2, c930 <smp_pairing_random+0xf4>)
    c92a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c92e:	bf00      	nop
    c930:	0000c995 	.word	0x0000c995
    c934:	0000c949 	.word	0x0000c949
    c938:	0000c949 	.word	0x0000c949
    c93c:	0000c995 	.word	0x0000c995
    c940:	0000c909 	.word	0x0000c909
    c944:	0000ca67 	.word	0x0000ca67
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    c948:	f894 218c 	ldrb.w	r2, [r4, #396]	; 0x18c
    c94c:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
    c950:	40d3      	lsrs	r3, r2
    c952:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
    c956:	f063 037f 	orn	r3, r3, #127	; 0x7f
    c95a:	b2db      	uxtb	r3, r3
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    c95c:	f8df 912c 	ldr.w	r9, [pc, #300]	; ca8c <smp_pairing_random+0x250>
    c960:	f10d 0828 	add.w	r8, sp, #40	; 0x28
    c964:	f204 1a07 	addw	sl, r4, #263	; 0x107
    c968:	f8cd 8000 	str.w	r8, [sp]
    c96c:	463a      	mov	r2, r7
    c96e:	4650      	mov	r0, sl
    c970:	f8d9 1000 	ldr.w	r1, [r9]
    c974:	f008 fad0 	bl	14f18 <smp_f4>
    c978:	2800      	cmp	r0, #0
    c97a:	d1c5      	bne.n	c908 <smp_pairing_random+0xcc>
	if (memcmp(smp->pcnf, cfm, 16)) {
    c97c:	2210      	movs	r2, #16
    c97e:	4641      	mov	r1, r8
    c980:	f104 00c7 	add.w	r0, r4, #199	; 0xc7
    c984:	f006 fde4 	bl	13550 <memcmp>
    c988:	b130      	cbz	r0, c998 <smp_pairing_random+0x15c>
		return BT_SMP_ERR_CONFIRM_FAILED;
    c98a:	2504      	movs	r5, #4
}
    c98c:	4628      	mov	r0, r5
    c98e:	b01e      	add	sp, #120	; 0x78
    c990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (smp->method) {
    c994:	2300      	movs	r3, #0
    c996:	e7e1      	b.n	c95c <smp_pairing_random+0x120>
		switch (smp->method) {
    c998:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    c99c:	2b05      	cmp	r3, #5
    c99e:	d8b3      	bhi.n	c908 <smp_pairing_random+0xcc>
    c9a0:	a201      	add	r2, pc, #4	; (adr r2, c9a8 <smp_pairing_random+0x16c>)
    c9a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c9a6:	bf00      	nop
    c9a8:	0000ca67 	.word	0x0000ca67
    c9ac:	0000ca33 	.word	0x0000ca33
    c9b0:	0000ca33 	.word	0x0000ca33
    c9b4:	0000c9c1 	.word	0x0000c9c1
    c9b8:	0000c909 	.word	0x0000c909
    c9bc:	0000ca67 	.word	0x0000ca67
	sys_memcpy_swap(m, u, 32);
    c9c0:	2220      	movs	r2, #32
    c9c2:	4640      	mov	r0, r8
    c9c4:	f8d9 1000 	ldr.w	r1, [r9]
    c9c8:	f7fe ff32 	bl	b830 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    c9cc:	2220      	movs	r2, #32
    c9ce:	4651      	mov	r1, sl
    c9d0:	a812      	add	r0, sp, #72	; 0x48
    c9d2:	f7fe ff2d 	bl	b830 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
    c9d6:	2210      	movs	r2, #16
    c9d8:	4639      	mov	r1, r7
    c9da:	a81a      	add	r0, sp, #104	; 0x68
    c9dc:	f7fe ff28 	bl	b830 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
    c9e0:	2210      	movs	r2, #16
    c9e2:	f104 01d7 	add.w	r1, r4, #215	; 0xd7
    c9e6:	a806      	add	r0, sp, #24
    c9e8:	f7fe ff22 	bl	b830 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    c9ec:	ab06      	add	r3, sp, #24
    c9ee:	2250      	movs	r2, #80	; 0x50
    c9f0:	4641      	mov	r1, r8
    c9f2:	4618      	mov	r0, r3
    c9f4:	f008 fa00 	bl	14df8 <bt_smp_aes_cmac>
	if (err) {
    c9f8:	2800      	cmp	r0, #0
    c9fa:	d185      	bne.n	c908 <smp_pairing_random+0xcc>
	memcpy(passkey, xs + 12, 4);
    c9fc:	a909      	add	r1, sp, #36	; 0x24
    c9fe:	2204      	movs	r2, #4
    ca00:	a805      	add	r0, sp, #20
    ca02:	f006 fdb5 	bl	13570 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    ca06:	9b05      	ldr	r3, [sp, #20]
    ca08:	491e      	ldr	r1, [pc, #120]	; (ca84 <smp_pairing_random+0x248>)
    ca0a:	ba1b      	rev	r3, r3
    ca0c:	fbb3 f2f1 	udiv	r2, r3, r1
    ca10:	fb01 3312 	mls	r3, r1, r2, r3
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    ca14:	4630      	mov	r0, r6
    ca16:	2109      	movs	r1, #9
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    ca18:	9305      	str	r3, [sp, #20]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    ca1a:	f008 fabe 	bl	14f9a <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    ca1e:	2108      	movs	r1, #8
    ca20:	f008 fabb 	bl	14f9a <atomic_set_bit>
			bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    ca24:	4b18      	ldr	r3, [pc, #96]	; (ca88 <smp_pairing_random+0x24c>)
    ca26:	9905      	ldr	r1, [sp, #20]
    ca28:	681b      	ldr	r3, [r3, #0]
    ca2a:	6820      	ldr	r0, [r4, #0]
    ca2c:	689b      	ldr	r3, [r3, #8]
    ca2e:	4798      	blx	r3
			return 0;
    ca30:	e7ac      	b.n	c98c <smp_pairing_random+0x150>
			smp->passkey_round++;
    ca32:	f894 318c 	ldrb.w	r3, [r4, #396]	; 0x18c
    ca36:	3301      	adds	r3, #1
    ca38:	b2db      	uxtb	r3, r3
			if (smp->passkey_round == 20U) {
    ca3a:	2b14      	cmp	r3, #20
			smp->passkey_round++;
    ca3c:	f884 318c 	strb.w	r3, [r4, #396]	; 0x18c
			if (smp->passkey_round == 20U) {
    ca40:	d011      	beq.n	ca66 <smp_pairing_random+0x22a>
			if (bt_rand(smp->prnd, 16)) {
    ca42:	2110      	movs	r1, #16
    ca44:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
    ca48:	f7fa f8a6 	bl	6b98 <bt_rand>
    ca4c:	2800      	cmp	r0, #0
    ca4e:	f47f af5b 	bne.w	c908 <smp_pairing_random+0xcc>
			atomic_set_bit(&smp->allowed_cmds,
    ca52:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    ca56:	2103      	movs	r1, #3
    ca58:	f008 fa9f 	bl	14f9a <atomic_set_bit>
			return smp_send_pairing_confirm(smp);
    ca5c:	4620      	mov	r0, r4
    ca5e:	f7ff fc47 	bl	c2f0 <smp_send_pairing_confirm>
		return compute_and_send_master_dhcheck(smp);
    ca62:	4605      	mov	r5, r0
    ca64:	e792      	b.n	c98c <smp_pairing_random+0x150>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    ca66:	2107      	movs	r1, #7
    ca68:	4630      	mov	r0, r6
    ca6a:	f008 fa7c 	bl	14f66 <atomic_test_bit>
    ca6e:	b108      	cbz	r0, ca74 <smp_pairing_random+0x238>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    ca70:	2108      	movs	r1, #8
    ca72:	e74c      	b.n	c90e <smp_pairing_random+0xd2>
		return compute_and_send_master_dhcheck(smp);
    ca74:	4620      	mov	r0, r4
    ca76:	f7fe fff5 	bl	ba64 <compute_and_send_master_dhcheck>
    ca7a:	e7f2      	b.n	ca62 <smp_pairing_random+0x226>
	return BT_SMP_ERR_PAIRING_NOTSUPP;
    ca7c:	2505      	movs	r5, #5
    ca7e:	e785      	b.n	c98c <smp_pairing_random+0x150>
    ca80:	0001ad1d 	.word	0x0001ad1d
    ca84:	000f4240 	.word	0x000f4240
    ca88:	20000d20 	.word	0x20000d20
    ca8c:	200011b8 	.word	0x200011b8

0000ca90 <smp_ident_addr_info>:
{
    ca90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
    ca94:	688f      	ldr	r7, [r1, #8]
{
    ca96:	4605      	mov	r5, r0
	return BT_ADDR_IS_RPA(&addr->a);
}

static inline bool bt_addr_le_is_identity(const bt_addr_le_t *addr)
{
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    ca98:	783b      	ldrb	r3, [r7, #0]
	struct bt_conn *conn = smp->chan.chan.conn;
    ca9a:	6804      	ldr	r4, [r0, #0]
    ca9c:	b1c3      	cbz	r3, cad0 <smp_ident_addr_info+0x40>
	if (!bt_addr_le_is_identity(&req->addr)) {
    ca9e:	79bb      	ldrb	r3, [r7, #6]
    caa0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    caa4:	2bc0      	cmp	r3, #192	; 0xc0
    caa6:	d013      	beq.n	cad0 <smp_ident_addr_info+0x40>
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
    caa8:	4638      	mov	r0, r7
    caaa:	f7f7 fe75 	bl	4798 <bt_addr_le_str_real>
    caae:	2145      	movs	r1, #69	; 0x45
    cab0:	4602      	mov	r2, r0
    cab2:	483e      	ldr	r0, [pc, #248]	; (cbac <smp_ident_addr_info+0x11c>)
    cab4:	f005 fa48 	bl	11f48 <printk>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
    cab8:	f104 007c 	add.w	r0, r4, #124	; 0x7c
    cabc:	f7f7 fe6c 	bl	4798 <bt_addr_le_str_real>
    cac0:	2145      	movs	r1, #69	; 0x45
    cac2:	4602      	mov	r2, r0
    cac4:	483a      	ldr	r0, [pc, #232]	; (cbb0 <smp_ident_addr_info+0x120>)
    cac6:	f005 fa3f 	bl	11f48 <printk>
		return BT_SMP_ERR_INVALID_PARAMS;
    caca:	200a      	movs	r0, #10
}
    cacc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    cad0:	210c      	movs	r1, #12
    cad2:	f105 00b4 	add.w	r0, r5, #180	; 0xb4
    cad6:	f008 fa46 	bl	14f66 <atomic_test_bit>
    cada:	2800      	cmp	r0, #0
    cadc:	d03e      	beq.n	cb5c <smp_ident_addr_info+0xcc>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    cade:	f104 087c 	add.w	r8, r4, #124	; 0x7c
    cae2:	4642      	mov	r2, r8
    cae4:	2002      	movs	r0, #2
    cae6:	7a21      	ldrb	r1, [r4, #8]
    cae8:	f008 fd68 	bl	155bc <bt_keys_get_type>
		if (!keys) {
    caec:	4606      	mov	r6, r0
    caee:	b948      	cbnz	r0, cb04 <smp_ident_addr_info+0x74>
			BT_ERR("Unable to get keys for %s",
    caf0:	4640      	mov	r0, r8
    caf2:	f7f7 fe51 	bl	4798 <bt_addr_le_str_real>
    caf6:	2145      	movs	r1, #69	; 0x45
    caf8:	4602      	mov	r2, r0
    cafa:	482e      	ldr	r0, [pc, #184]	; (cbb4 <smp_ident_addr_info+0x124>)
    cafc:	f005 fa24 	bl	11f48 <printk>
			return BT_SMP_ERR_UNSPECIFIED;
    cb00:	2008      	movs	r0, #8
    cb02:	e7e3      	b.n	cacc <smp_ident_addr_info+0x3c>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    cb04:	78e3      	ldrb	r3, [r4, #3]
    cb06:	2b00      	cmp	r3, #0
    cb08:	d13c      	bne.n	cb84 <smp_ident_addr_info+0xf4>
			dst = &conn->le.resp_addr;
    cb0a:	f104 018a 	add.w	r1, r4, #138	; 0x8a
	if (addr->type != BT_ADDR_LE_RANDOM) {
    cb0e:	780b      	ldrb	r3, [r1, #0]
    cb10:	2b01      	cmp	r3, #1
    cb12:	d120      	bne.n	cb56 <smp_ident_addr_info+0xc6>
		if (bt_addr_le_is_rpa(dst)) {
    cb14:	798b      	ldrb	r3, [r1, #6]
    cb16:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    cb1a:	2b40      	cmp	r3, #64	; 0x40
    cb1c:	d11b      	bne.n	cb56 <smp_ident_addr_info+0xc6>
	memcpy(dst, src, sizeof(*dst));
    cb1e:	2206      	movs	r2, #6
    cb20:	3101      	adds	r1, #1
    cb22:	f106 003a 	add.w	r0, r6, #58	; 0x3a
    cb26:	f006 fd23 	bl	13570 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    cb2a:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
    cb2e:	b193      	cbz	r3, cb56 <smp_ident_addr_info+0xc6>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
    cb30:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
    cb34:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    cb38:	2bc0      	cmp	r3, #192	; 0xc0
    cb3a:	d00c      	beq.n	cb56 <smp_ident_addr_info+0xc6>
	memcpy(dst, src, sizeof(*dst));
    cb3c:	2207      	movs	r2, #7
    cb3e:	4639      	mov	r1, r7
    cb40:	1c70      	adds	r0, r6, #1
    cb42:	f006 fd15 	bl	13570 <memcpy>
    cb46:	2207      	movs	r2, #7
    cb48:	4639      	mov	r1, r7
    cb4a:	4640      	mov	r0, r8
    cb4c:	f006 fd10 	bl	13570 <memcpy>
				bt_conn_identity_resolved(conn);
    cb50:	4620      	mov	r0, r4
    cb52:	f7fa f9cd 	bl	6ef0 <bt_conn_identity_resolved>
		bt_id_add(keys);
    cb56:	4630      	mov	r0, r6
    cb58:	f7f8 fd40 	bl	55dc <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    cb5c:	f895 3199 	ldrb.w	r3, [r5, #409]	; 0x199
    cb60:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    cb64:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    cb66:	f885 2199 	strb.w	r2, [r5, #409]	; 0x199
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    cb6a:	d504      	bpl.n	cb76 <smp_ident_addr_info+0xe6>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    cb6c:	210a      	movs	r1, #10
    cb6e:	f105 00b0 	add.w	r0, r5, #176	; 0xb0
    cb72:	f008 fa12 	bl	14f9a <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    cb76:	78e3      	ldrb	r3, [r4, #3]
    cb78:	b13b      	cbz	r3, cb8a <smp_ident_addr_info+0xfa>
	if (!smp->local_dist && !smp->remote_dist) {
    cb7a:	f8b5 4198 	ldrh.w	r4, [r5, #408]	; 0x198
    cb7e:	b174      	cbz	r4, cb9e <smp_ident_addr_info+0x10e>
	return 0;
    cb80:	2000      	movs	r0, #0
    cb82:	e7a3      	b.n	cacc <smp_ident_addr_info+0x3c>
			dst = &conn->le.init_addr;
    cb84:	f104 0183 	add.w	r1, r4, #131	; 0x83
    cb88:	e7c1      	b.n	cb0e <smp_ident_addr_info+0x7e>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    cb8a:	f895 3199 	ldrb.w	r3, [r5, #409]	; 0x199
    cb8e:	2b00      	cmp	r3, #0
    cb90:	d1f3      	bne.n	cb7a <smp_ident_addr_info+0xea>
		err = bt_smp_distribute_keys(smp);
    cb92:	4628      	mov	r0, r5
    cb94:	f7fe fed8 	bl	b948 <bt_smp_distribute_keys>
		if (err) {
    cb98:	2800      	cmp	r0, #0
    cb9a:	d0ee      	beq.n	cb7a <smp_ident_addr_info+0xea>
    cb9c:	e796      	b.n	cacc <smp_ident_addr_info+0x3c>
		smp_pairing_complete(smp, 0);
    cb9e:	4628      	mov	r0, r5
    cba0:	4621      	mov	r1, r4
    cba2:	f7ff f9b1 	bl	bf08 <smp_pairing_complete>
	return 0;
    cba6:	4620      	mov	r0, r4
    cba8:	e790      	b.n	cacc <smp_ident_addr_info+0x3c>
    cbaa:	bf00      	nop
    cbac:	0001ad3d 	.word	0x0001ad3d
    cbb0:	0001ad56 	.word	0x0001ad56
    cbb4:	0001ab6a 	.word	0x0001ab6a

0000cbb8 <bt_smp_auth_pairing_confirm>:
{
    cbb8:	b570      	push	{r4, r5, r6, lr}
    cbba:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
    cbbc:	f7fe fe66 	bl	b88c <smp_chan_get>
	if (!smp) {
    cbc0:	4605      	mov	r5, r0
    cbc2:	b910      	cbnz	r0, cbca <bt_smp_auth_pairing_confirm+0x12>
		return -EINVAL;
    cbc4:	f06f 0015 	mvn.w	r0, #21
}
    cbc8:	bd70      	pop	{r4, r5, r6, pc}
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER)) {
    cbca:	f100 06b4 	add.w	r6, r0, #180	; 0xb4
    cbce:	2109      	movs	r1, #9
    cbd0:	4630      	mov	r0, r6
    cbd2:	f008 f9ce 	bl	14f72 <atomic_test_and_clear_bit>
    cbd6:	2800      	cmp	r0, #0
    cbd8:	d0f4      	beq.n	cbc4 <bt_smp_auth_pairing_confirm+0xc>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    cbda:	78e3      	ldrb	r3, [r4, #3]
    cbdc:	b9a3      	cbnz	r3, cc08 <bt_smp_auth_pairing_confirm+0x50>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    cbde:	2105      	movs	r1, #5
    cbe0:	4630      	mov	r0, r6
    cbe2:	f008 f9c0 	bl	14f66 <atomic_test_bit>
    cbe6:	b940      	cbnz	r0, cbfa <bt_smp_auth_pairing_confirm+0x42>
			atomic_set_bit(&smp->allowed_cmds,
    cbe8:	f105 00b0 	add.w	r0, r5, #176	; 0xb0
    cbec:	2103      	movs	r1, #3
    cbee:	f008 f9d4 	bl	14f9a <atomic_set_bit>
			return legacy_send_pairing_confirm(smp);
    cbf2:	4628      	mov	r0, r5
    cbf4:	f008 fb97 	bl	15326 <legacy_send_pairing_confirm>
    cbf8:	e7e6      	b.n	cbc8 <bt_smp_auth_pairing_confirm+0x10>
		if (!sc_public_key) {
    cbfa:	4b09      	ldr	r3, [pc, #36]	; (cc20 <bt_smp_auth_pairing_confirm+0x68>)
    cbfc:	681c      	ldr	r4, [r3, #0]
    cbfe:	b92c      	cbnz	r4, cc0c <bt_smp_auth_pairing_confirm+0x54>
			atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    cc00:	2106      	movs	r1, #6
    cc02:	4630      	mov	r0, r6
    cc04:	f008 f9c9 	bl	14f9a <atomic_set_bit>
	return 0;
    cc08:	2000      	movs	r0, #0
    cc0a:	e7dd      	b.n	cbc8 <bt_smp_auth_pairing_confirm+0x10>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    cc0c:	f105 00b0 	add.w	r0, r5, #176	; 0xb0
    cc10:	210c      	movs	r1, #12
    cc12:	f008 f9c2 	bl	14f9a <atomic_set_bit>
		return sc_send_public_key(smp);
    cc16:	4628      	mov	r0, r5
    cc18:	f7fe fe74 	bl	b904 <sc_send_public_key>
    cc1c:	e7d4      	b.n	cbc8 <bt_smp_auth_pairing_confirm+0x10>
    cc1e:	bf00      	nop
    cc20:	200011b8 	.word	0x200011b8

0000cc24 <bt_smp_update_keys>:
{
    cc24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cc26:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
    cc28:	f7fe fe30 	bl	b88c <smp_chan_get>
	if (!smp) {
    cc2c:	4605      	mov	r5, r0
    cc2e:	2800      	cmp	r0, #0
    cc30:	d076      	beq.n	cd20 <bt_smp_update_keys+0xfc>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    cc32:	f100 06b4 	add.w	r6, r0, #180	; 0xb4
    cc36:	2103      	movs	r1, #3
    cc38:	4630      	mov	r0, r6
    cc3a:	f008 f994 	bl	14f66 <atomic_test_bit>
    cc3e:	2800      	cmp	r0, #0
    cc40:	d06e      	beq.n	cd20 <bt_smp_update_keys+0xfc>
	if (conn->le.keys) {
    cc42:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
    cc46:	b108      	cbz	r0, cc4c <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
    cc48:	f000 f924 	bl	ce94 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    cc4c:	f104 077c 	add.w	r7, r4, #124	; 0x7c
    cc50:	4639      	mov	r1, r7
    cc52:	7a20      	ldrb	r0, [r4, #8]
    cc54:	f000 f87e 	bl	cd54 <bt_keys_get_addr>
    cc58:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
	if (!conn->le.keys) {
    cc5c:	b968      	cbnz	r0, cc7a <bt_smp_update_keys+0x56>
		BT_ERR("Unable to get keys for %s",
    cc5e:	4638      	mov	r0, r7
    cc60:	f7f7 fd9a 	bl	4798 <bt_addr_le_str_real>
    cc64:	2145      	movs	r1, #69	; 0x45
    cc66:	4602      	mov	r2, r0
    cc68:	482e      	ldr	r0, [pc, #184]	; (cd24 <bt_smp_update_keys+0x100>)
    cc6a:	f005 f96d 	bl	11f48 <printk>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    cc6e:	4628      	mov	r0, r5
}
    cc70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    cc74:	2108      	movs	r1, #8
    cc76:	f008 ba81 	b.w	1517c <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
    cc7a:	210d      	movs	r1, #13
    cc7c:	4630      	mov	r0, r6
    cc7e:	f008 f972 	bl	14f66 <atomic_test_bit>
    cc82:	b128      	cbz	r0, cc90 <bt_smp_update_keys+0x6c>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
    cc84:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
    cc88:	7b53      	ldrb	r3, [r2, #13]
    cc8a:	f043 0302 	orr.w	r3, r3, #2
    cc8e:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
    cc90:	f895 10b8 	ldrb.w	r1, [r5, #184]	; 0xb8
    cc94:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
    cc98:	2903      	cmp	r1, #3
    cc9a:	7b53      	ldrb	r3, [r2, #13]
    cc9c:	d838      	bhi.n	cd10 <bt_smp_update_keys+0xec>
    cc9e:	b3c9      	cbz	r1, cd14 <bt_smp_update_keys+0xf0>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
    cca0:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
    cca4:	7353      	strb	r3, [r2, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
    cca6:	f895 30c4 	ldrb.w	r3, [r5, #196]	; 0xc4
    ccaa:	f895 10bd 	ldrb.w	r1, [r5, #189]	; 0xbd
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    ccae:	4630      	mov	r0, r6
	return MIN(req->max_key_size, rsp->max_key_size);
    ccb0:	428b      	cmp	r3, r1
    ccb2:	bf28      	it	cs
    ccb4:	460b      	movcs	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    ccb6:	2105      	movs	r1, #5
	conn->le.keys->enc_size = get_encryption_key_size(smp);
    ccb8:	7313      	strb	r3, [r2, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    ccba:	f008 f954 	bl	14f66 <atomic_test_bit>
    ccbe:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
		conn->le.keys->flags |= BT_KEYS_SC;
    ccc2:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    ccc4:	b348      	cbz	r0, cd1a <bt_smp_update_keys+0xf6>
		conn->le.keys->flags |= BT_KEYS_SC;
    ccc6:	f042 0210 	orr.w	r2, r2, #16
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    ccca:	210c      	movs	r1, #12
    cccc:	4630      	mov	r0, r6
		conn->le.keys->flags |= BT_KEYS_SC;
    ccce:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    ccd0:	f008 f949 	bl	14f66 <atomic_test_bit>
    ccd4:	b320      	cbz	r0, cd20 <bt_smp_update_keys+0xfc>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
    ccd6:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
    ccda:	2120      	movs	r1, #32
    ccdc:	f008 fc7e 	bl	155dc <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
    cce0:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
    cce4:	f105 01f7 	add.w	r1, r5, #247	; 0xf7
    cce8:	2210      	movs	r2, #16
    ccea:	301a      	adds	r0, #26
    ccec:	f006 fc40 	bl	13570 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
    ccf0:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
    ccf4:	2208      	movs	r2, #8
    ccf6:	2100      	movs	r1, #0
    ccf8:	3010      	adds	r0, #16
    ccfa:	f006 fc64 	bl	135c6 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
    ccfe:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
    cd02:	2202      	movs	r2, #2
}
    cd04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
    cd08:	2100      	movs	r1, #0
    cd0a:	3018      	adds	r0, #24
    cd0c:	f006 bc5b 	b.w	135c6 <memset>
	switch (smp->method) {
    cd10:	2905      	cmp	r1, #5
    cd12:	d0c5      	beq.n	cca0 <bt_smp_update_keys+0x7c>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
    cd14:	f023 0301 	bic.w	r3, r3, #1
    cd18:	e7c4      	b.n	cca4 <bt_smp_update_keys+0x80>
		conn->le.keys->flags &= ~BT_KEYS_SC;
    cd1a:	f022 0210 	bic.w	r2, r2, #16
    cd1e:	735a      	strb	r2, [r3, #13]
}
    cd20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cd22:	bf00      	nop
    cd24:	0001ab6a 	.word	0x0001ab6a

0000cd28 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
    cd28:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    cd2a:	4b07      	ldr	r3, [pc, #28]	; (cd48 <bt_smp_init+0x20>)
			"exposes a security vulnerability!");
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	bt_pub_key_gen(&pub_key_cb);
    cd2c:	4807      	ldr	r0, [pc, #28]	; (cd4c <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    cd2e:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
    cd32:	f003 0306 	and.w	r3, r3, #6
    cd36:	1f9a      	subs	r2, r3, #6
    cd38:	4253      	negs	r3, r2
    cd3a:	4153      	adcs	r3, r2
    cd3c:	4a04      	ldr	r2, [pc, #16]	; (cd50 <bt_smp_init+0x28>)
    cd3e:	7013      	strb	r3, [r2, #0]
	bt_pub_key_gen(&pub_key_cb);
    cd40:	f7f9 fe04 	bl	694c <bt_pub_key_gen>

	return smp_self_test();
}
    cd44:	2000      	movs	r0, #0
    cd46:	bd08      	pop	{r3, pc}
    cd48:	20000000 	.word	0x20000000
    cd4c:	20000284 	.word	0x20000284
    cd50:	20001f86 	.word	0x20001f86

0000cd54 <bt_keys_get_addr>:
static u32_t aging_counter_val;
static struct bt_keys *last_keys_updated;
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(u8_t id, const bt_addr_le_t *addr)
{
    cd54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    cd56:	4c11      	ldr	r4, [pc, #68]	; (cd9c <bt_keys_get_addr+0x48>)
{
    cd58:	4605      	mov	r5, r0
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    cd5a:	7823      	ldrb	r3, [r4, #0]
{
    cd5c:	460e      	mov	r6, r1
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    cd5e:	4283      	cmp	r3, r0
    cd60:	4627      	mov	r7, r4
    cd62:	d00b      	beq.n	cd7c <bt_keys_get_addr+0x28>
			return keys;
		}

		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    cd64:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
    cd66:	2207      	movs	r2, #7
    cd68:	4669      	mov	r1, sp
    cd6a:	480d      	ldr	r0, [pc, #52]	; (cda0 <bt_keys_get_addr+0x4c>)
    cd6c:	9400      	str	r4, [sp, #0]
    cd6e:	f8cd 4003 	str.w	r4, [sp, #3]
    cd72:	f006 fbed 	bl	13550 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
    cd76:	b140      	cbz	r0, cd8a <bt_keys_get_addr+0x36>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
    cd78:	4620      	mov	r0, r4
    cd7a:	e00d      	b.n	cd98 <bt_keys_get_addr+0x44>
    cd7c:	2207      	movs	r2, #7
    cd7e:	1c60      	adds	r0, r4, #1
    cd80:	f006 fbe6 	bl	13550 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    cd84:	2800      	cmp	r0, #0
    cd86:	d1ed      	bne.n	cd64 <bt_keys_get_addr+0x10>
    cd88:	e7f6      	b.n	cd78 <bt_keys_get_addr+0x24>
	memcpy(dst, src, sizeof(*dst));
    cd8a:	2207      	movs	r2, #7
    cd8c:	4631      	mov	r1, r6
    cd8e:	4804      	ldr	r0, [pc, #16]	; (cda0 <bt_keys_get_addr+0x4c>)
		keys->id = id;
    cd90:	703d      	strb	r5, [r7, #0]
    cd92:	f006 fbed 	bl	13570 <memcpy>
		return keys;
    cd96:	4801      	ldr	r0, [pc, #4]	; (cd9c <bt_keys_get_addr+0x48>)
}
    cd98:	b003      	add	sp, #12
    cd9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cd9c:	200011bc 	.word	0x200011bc
    cda0:	200011bd 	.word	0x200011bd

0000cda4 <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
    cda4:	460b      	mov	r3, r1
    cda6:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
    cda8:	4a04      	ldr	r2, [pc, #16]	; (cdbc <bt_keys_foreach+0x18>)
{
    cdaa:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
    cdac:	89d4      	ldrh	r4, [r2, #14]
    cdae:	4204      	tst	r4, r0
    cdb0:	d002      	beq.n	cdb8 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
    cdb2:	4610      	mov	r0, r2
		}
	}
}
    cdb4:	bc10      	pop	{r4}
			func(&key_pool[i], data);
    cdb6:	4718      	bx	r3
}
    cdb8:	bc10      	pop	{r4}
    cdba:	4770      	bx	lr
    cdbc:	200011bc 	.word	0x200011bc

0000cdc0 <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
    cdc0:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
    cdc2:	2200      	movs	r2, #0
    cdc4:	2002      	movs	r0, #2
    cdc6:	4902      	ldr	r1, [pc, #8]	; (cdd0 <keys_commit+0x10>)
    cdc8:	f7ff ffec 	bl	cda4 <bt_keys_foreach>
	}

	return 0;
}
    cdcc:	2000      	movs	r0, #0
    cdce:	bd08      	pop	{r3, pc}
    cdd0:	000155b9 	.word	0x000155b9

0000cdd4 <bt_keys_find>:
{
    cdd4:	b510      	push	{r4, lr}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    cdd6:	4c09      	ldr	r4, [pc, #36]	; (cdfc <bt_keys_find+0x28>)
{
    cdd8:	460b      	mov	r3, r1
    cdda:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    cddc:	89e2      	ldrh	r2, [r4, #14]
    cdde:	4202      	tst	r2, r0
    cde0:	d007      	beq.n	cdf2 <bt_keys_find+0x1e>
    cde2:	7822      	ldrb	r2, [r4, #0]
    cde4:	429a      	cmp	r2, r3
    cde6:	d104      	bne.n	cdf2 <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
    cde8:	2207      	movs	r2, #7
    cdea:	1c60      	adds	r0, r4, #1
    cdec:	f006 fbb0 	bl	13550 <memcmp>
    cdf0:	b108      	cbz	r0, cdf6 <bt_keys_find+0x22>
	return NULL;
    cdf2:	2000      	movs	r0, #0
}
    cdf4:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    cdf6:	4620      	mov	r0, r4
    cdf8:	e7fc      	b.n	cdf4 <bt_keys_find+0x20>
    cdfa:	bf00      	nop
    cdfc:	200011bc 	.word	0x200011bc

0000ce00 <bt_keys_find_irk>:
{
    ce00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
    ce02:	780b      	ldrb	r3, [r1, #0]
    ce04:	4607      	mov	r7, r0
    ce06:	2b01      	cmp	r3, #1
    ce08:	460c      	mov	r4, r1
    ce0a:	d001      	beq.n	ce10 <bt_keys_find_irk+0x10>
		return NULL;
    ce0c:	2000      	movs	r0, #0
}
    ce0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
    ce10:	798b      	ldrb	r3, [r1, #6]
    ce12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    ce16:	2b40      	cmp	r3, #64	; 0x40
    ce18:	d1f8      	bne.n	ce0c <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    ce1a:	4d13      	ldr	r5, [pc, #76]	; (ce68 <bt_keys_find_irk+0x68>)
    ce1c:	89eb      	ldrh	r3, [r5, #14]
    ce1e:	462e      	mov	r6, r5
    ce20:	f013 0f02 	tst.w	r3, #2
    ce24:	d0f2      	beq.n	ce0c <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
    ce26:	7833      	ldrb	r3, [r6, #0]
    ce28:	42bb      	cmp	r3, r7
    ce2a:	d10b      	bne.n	ce44 <bt_keys_find_irk+0x44>
	return memcmp(a, b, sizeof(*a));
    ce2c:	2206      	movs	r2, #6
    ce2e:	f106 013a 	add.w	r1, r6, #58	; 0x3a
    ce32:	1c60      	adds	r0, r4, #1
    ce34:	f006 fb8c 	bl	13550 <memcmp>
    ce38:	b908      	cbnz	r0, ce3e <bt_keys_find_irk+0x3e>
			return &key_pool[i];
    ce3a:	4628      	mov	r0, r5
    ce3c:	e7e7      	b.n	ce0e <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    ce3e:	89f3      	ldrh	r3, [r6, #14]
    ce40:	079b      	lsls	r3, r3, #30
    ce42:	d5e3      	bpl.n	ce0c <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
    ce44:	7833      	ldrb	r3, [r6, #0]
    ce46:	42bb      	cmp	r3, r7
    ce48:	d1e0      	bne.n	ce0c <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    ce4a:	3401      	adds	r4, #1
    ce4c:	4621      	mov	r1, r4
    ce4e:	4807      	ldr	r0, [pc, #28]	; (ce6c <bt_keys_find_irk+0x6c>)
    ce50:	f006 fbdf 	bl	13612 <bt_rpa_irk_matches>
    ce54:	2800      	cmp	r0, #0
    ce56:	d0d9      	beq.n	ce0c <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
    ce58:	2206      	movs	r2, #6
    ce5a:	4621      	mov	r1, r4
    ce5c:	4804      	ldr	r0, [pc, #16]	; (ce70 <bt_keys_find_irk+0x70>)
    ce5e:	f006 fb87 	bl	13570 <memcpy>
			return &key_pool[i];
    ce62:	4801      	ldr	r0, [pc, #4]	; (ce68 <bt_keys_find_irk+0x68>)
}
    ce64:	e7d3      	b.n	ce0e <bt_keys_find_irk+0xe>
    ce66:	bf00      	nop
    ce68:	200011bc 	.word	0x200011bc
    ce6c:	200011e6 	.word	0x200011e6
    ce70:	200011f6 	.word	0x200011f6

0000ce74 <bt_keys_find_addr>:
{
    ce74:	b510      	push	{r4, lr}
		if (key_pool[i].id == id &&
    ce76:	4c06      	ldr	r4, [pc, #24]	; (ce90 <bt_keys_find_addr+0x1c>)
    ce78:	7823      	ldrb	r3, [r4, #0]
    ce7a:	4283      	cmp	r3, r0
    ce7c:	d104      	bne.n	ce88 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
    ce7e:	2207      	movs	r2, #7
    ce80:	1c60      	adds	r0, r4, #1
    ce82:	f006 fb65 	bl	13550 <memcmp>
    ce86:	b108      	cbz	r0, ce8c <bt_keys_find_addr+0x18>
	return NULL;
    ce88:	2000      	movs	r0, #0
}
    ce8a:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    ce8c:	4620      	mov	r0, r4
    ce8e:	e7fc      	b.n	ce8a <bt_keys_find_addr+0x16>
    ce90:	200011bc 	.word	0x200011bc

0000ce94 <bt_keys_clear>:
{
    ce94:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
    ce96:	7a03      	ldrb	r3, [r0, #8]
{
    ce98:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
    ce9a:	075b      	lsls	r3, r3, #29
{
    ce9c:	b08c      	sub	sp, #48	; 0x30
	if (keys->state & BT_KEYS_ID_ADDED) {
    ce9e:	d501      	bpl.n	cea4 <bt_keys_clear+0x10>
		bt_id_del(keys);
    cea0:	f7f8 fc56 	bl	5750 <bt_id_del>
		if (keys->id) {
    cea4:	4625      	mov	r5, r4
    cea6:	f815 2b01 	ldrb.w	r2, [r5], #1
    ceaa:	b1aa      	cbz	r2, ced8 <bt_keys_clear+0x44>
			u8_to_dec(id, sizeof(id), keys->id);
    ceac:	ae02      	add	r6, sp, #8
    ceae:	2104      	movs	r1, #4
    ceb0:	4630      	mov	r0, r6
    ceb2:	f004 ffb3 	bl	11e1c <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
    ceb6:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
    ceb8:	462b      	mov	r3, r5
    ceba:	2124      	movs	r1, #36	; 0x24
    cebc:	4a07      	ldr	r2, [pc, #28]	; (cedc <bt_keys_clear+0x48>)
    cebe:	a803      	add	r0, sp, #12
    cec0:	f7f7 fd0a 	bl	48d8 <bt_settings_encode_key>
		settings_delete(key);
    cec4:	a803      	add	r0, sp, #12
    cec6:	f005 fc0e 	bl	126e6 <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
    ceca:	225c      	movs	r2, #92	; 0x5c
    cecc:	2100      	movs	r1, #0
    cece:	4620      	mov	r0, r4
    ced0:	f006 fb79 	bl	135c6 <memset>
}
    ced4:	b00c      	add	sp, #48	; 0x30
    ced6:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "keys",
    ced8:	9200      	str	r2, [sp, #0]
    ceda:	e7ed      	b.n	ceb8 <bt_keys_clear+0x24>
    cedc:	0001aeb2 	.word	0x0001aeb2

0000cee0 <keys_set>:
{
    cee0:	b570      	push	{r4, r5, r6, lr}
    cee2:	4605      	mov	r5, r0
    cee4:	4614      	mov	r4, r2
    cee6:	4618      	mov	r0, r3
    cee8:	b098      	sub	sp, #96	; 0x60
	if (!name) {
    ceea:	b945      	cbnz	r5, cefe <keys_set+0x1e>
		BT_ERR("Insufficient number of arguments");
    ceec:	2145      	movs	r1, #69	; 0x45
    ceee:	4830      	ldr	r0, [pc, #192]	; (cfb0 <keys_set+0xd0>)
    cef0:	f005 f82a 	bl	11f48 <printk>
		return -EINVAL;
    cef4:	f06f 0415 	mvn.w	r4, #21
}
    cef8:	4620      	mov	r0, r4
    cefa:	b018      	add	sp, #96	; 0x60
    cefc:	bd70      	pop	{r4, r5, r6, pc}
	len = read_cb(cb_arg, val, sizeof(val));
    cefe:	2250      	movs	r2, #80	; 0x50
    cf00:	a904      	add	r1, sp, #16
    cf02:	47a0      	blx	r4
	if (len < 0) {
    cf04:	1e04      	subs	r4, r0, #0
    cf06:	da05      	bge.n	cf14 <keys_set+0x34>
		BT_ERR("Failed to read value (err %zd)", len);
    cf08:	4622      	mov	r2, r4
    cf0a:	2145      	movs	r1, #69	; 0x45
    cf0c:	4829      	ldr	r0, [pc, #164]	; (cfb4 <keys_set+0xd4>)
    cf0e:	f005 f81b 	bl	11f48 <printk>
    cf12:	e7ef      	b.n	cef4 <keys_set+0x14>
	err = bt_settings_decode_key(name, &addr);
    cf14:	4628      	mov	r0, r5
    cf16:	a902      	add	r1, sp, #8
    cf18:	f006 fba1 	bl	1365e <bt_settings_decode_key>
	if (err) {
    cf1c:	4606      	mov	r6, r0
    cf1e:	b118      	cbz	r0, cf28 <keys_set+0x48>
		BT_ERR("Unable to decode address %s", name);
    cf20:	462a      	mov	r2, r5
    cf22:	2145      	movs	r1, #69	; 0x45
    cf24:	4824      	ldr	r0, [pc, #144]	; (cfb8 <keys_set+0xd8>)
    cf26:	e7f2      	b.n	cf0e <keys_set+0x2e>
	settings_name_next(name, &next);
    cf28:	4628      	mov	r0, r5
    cf2a:	a901      	add	r1, sp, #4
    cf2c:	f005 fc02 	bl	12734 <settings_name_next>
	if (!next) {
    cf30:	9801      	ldr	r0, [sp, #4]
    cf32:	b120      	cbz	r0, cf3e <keys_set+0x5e>
		id = strtol(next, NULL, 10);
    cf34:	220a      	movs	r2, #10
    cf36:	4631      	mov	r1, r6
    cf38:	f006 fa55 	bl	133e6 <strtol>
    cf3c:	b2c0      	uxtb	r0, r0
	if (!len) {
    cf3e:	b99c      	cbnz	r4, cf68 <keys_set+0x88>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
    cf40:	4601      	mov	r1, r0
    cf42:	aa02      	add	r2, sp, #8
    cf44:	203f      	movs	r0, #63	; 0x3f
    cf46:	f7ff ff45 	bl	cdd4 <bt_keys_find>
		if (keys) {
    cf4a:	b120      	cbz	r0, cf56 <keys_set+0x76>
			(void)memset(keys, 0, sizeof(*keys));
    cf4c:	225c      	movs	r2, #92	; 0x5c
    cf4e:	4621      	mov	r1, r4
    cf50:	f006 fb39 	bl	135c6 <memset>
			BT_DBG("Cleared keys for %s", bt_addr_le_str(&addr));
    cf54:	e7d0      	b.n	cef8 <keys_set+0x18>
			BT_WARN("Unable to find deleted keys for %s",
    cf56:	a802      	add	r0, sp, #8
    cf58:	f7f7 fc1e 	bl	4798 <bt_addr_le_str_real>
    cf5c:	2157      	movs	r1, #87	; 0x57
    cf5e:	4602      	mov	r2, r0
    cf60:	4816      	ldr	r0, [pc, #88]	; (cfbc <keys_set+0xdc>)
    cf62:	f004 fff1 	bl	11f48 <printk>
    cf66:	e7c7      	b.n	cef8 <keys_set+0x18>
	keys = bt_keys_get_addr(id, &addr);
    cf68:	a902      	add	r1, sp, #8
    cf6a:	f7ff fef3 	bl	cd54 <bt_keys_get_addr>
	if (!keys) {
    cf6e:	4605      	mov	r5, r0
    cf70:	b950      	cbnz	r0, cf88 <keys_set+0xa8>
		BT_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
    cf72:	a802      	add	r0, sp, #8
    cf74:	f7f7 fc10 	bl	4798 <bt_addr_le_str_real>
    cf78:	2145      	movs	r1, #69	; 0x45
    cf7a:	4602      	mov	r2, r0
    cf7c:	4810      	ldr	r0, [pc, #64]	; (cfc0 <keys_set+0xe0>)
    cf7e:	f004 ffe3 	bl	11f48 <printk>
		return -ENOMEM;
    cf82:	f06f 040b 	mvn.w	r4, #11
    cf86:	e7b7      	b.n	cef8 <keys_set+0x18>
	if (len != BT_KEYS_STORAGE_LEN) {
    cf88:	2c50      	cmp	r4, #80	; 0x50
    cf8a:	d009      	beq.n	cfa0 <keys_set+0xc0>
			BT_ERR("Invalid key length %zd != %zu", len,
    cf8c:	2350      	movs	r3, #80	; 0x50
    cf8e:	4622      	mov	r2, r4
    cf90:	2145      	movs	r1, #69	; 0x45
    cf92:	480c      	ldr	r0, [pc, #48]	; (cfc4 <keys_set+0xe4>)
    cf94:	f004 ffd8 	bl	11f48 <printk>
			bt_keys_clear(keys);
    cf98:	4628      	mov	r0, r5
    cf9a:	f7ff ff7b 	bl	ce94 <bt_keys_clear>
			return -EINVAL;
    cf9e:	e7a9      	b.n	cef4 <keys_set+0x14>
		memcpy(keys->storage_start, val, len);
    cfa0:	4622      	mov	r2, r4
    cfa2:	a904      	add	r1, sp, #16
    cfa4:	300c      	adds	r0, #12
    cfa6:	f006 fae3 	bl	13570 <memcpy>
	return 0;
    cfaa:	2400      	movs	r4, #0
    cfac:	e7a4      	b.n	cef8 <keys_set+0x18>
    cfae:	bf00      	nop
    cfb0:	00018ef5 	.word	0x00018ef5
    cfb4:	0001adfa 	.word	0x0001adfa
    cfb8:	0001a6ce 	.word	0x0001a6ce
    cfbc:	0001ae1e 	.word	0x0001ae1e
    cfc0:	0001ae46 	.word	0x0001ae46
    cfc4:	0001ae6a 	.word	0x0001ae6a

0000cfc8 <bt_keys_store>:
{
    cfc8:	b570      	push	{r4, r5, r6, lr}
	if (keys->id) {
    cfca:	4605      	mov	r5, r0
    cfcc:	f815 2b01 	ldrb.w	r2, [r5], #1
{
    cfd0:	4604      	mov	r4, r0
    cfd2:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
    cfd4:	b1da      	cbz	r2, d00e <bt_keys_store+0x46>
		u8_to_dec(id, sizeof(id), keys->id);
    cfd6:	ae02      	add	r6, sp, #8
    cfd8:	2104      	movs	r1, #4
    cfda:	4630      	mov	r0, r6
    cfdc:	f004 ff1e 	bl	11e1c <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
    cfe0:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
    cfe2:	462b      	mov	r3, r5
    cfe4:	2124      	movs	r1, #36	; 0x24
    cfe6:	4a0b      	ldr	r2, [pc, #44]	; (d014 <bt_keys_store+0x4c>)
    cfe8:	a803      	add	r0, sp, #12
    cfea:	f7f7 fc75 	bl	48d8 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
    cfee:	f104 010c 	add.w	r1, r4, #12
    cff2:	2250      	movs	r2, #80	; 0x50
    cff4:	a803      	add	r0, sp, #12
    cff6:	f7f4 fe13 	bl	1c20 <settings_save_one>
	if (err) {
    cffa:	4604      	mov	r4, r0
    cffc:	b120      	cbz	r0, d008 <bt_keys_store+0x40>
		BT_ERR("Failed to save keys (err %d)", err);
    cffe:	4602      	mov	r2, r0
    d000:	2145      	movs	r1, #69	; 0x45
    d002:	4805      	ldr	r0, [pc, #20]	; (d018 <bt_keys_store+0x50>)
    d004:	f004 ffa0 	bl	11f48 <printk>
}
    d008:	4620      	mov	r0, r4
    d00a:	b00c      	add	sp, #48	; 0x30
    d00c:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
    d00e:	9200      	str	r2, [sp, #0]
    d010:	e7e7      	b.n	cfe2 <bt_keys_store+0x1a>
    d012:	bf00      	nop
    d014:	0001aeb2 	.word	0x0001aeb2
    d018:	0001ae8d 	.word	0x0001ae8d

0000d01c <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
    d01c:	222c      	movs	r2, #44	; 0x2c
    d01e:	4b02      	ldr	r3, [pc, #8]	; (d028 <net_buf_pool_get+0xc>)
    d020:	fb02 3000 	mla	r0, r2, r0, r3
    d024:	4770      	bx	lr
    d026:	bf00      	nop
    d028:	20000500 	.word	0x20000500

0000d02c <net_buf_id>:

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	return buf - pool->__bufs;
    d02c:	212c      	movs	r1, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    d02e:	7983      	ldrb	r3, [r0, #6]
	return buf - pool->__bufs;
    d030:	4a04      	ldr	r2, [pc, #16]	; (d044 <net_buf_id+0x18>)
    d032:	fb01 2303 	mla	r3, r1, r3, r2
    d036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d038:	1ac0      	subs	r0, r0, r3
}
    d03a:	4b03      	ldr	r3, [pc, #12]	; (d048 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
    d03c:	10c0      	asrs	r0, r0, #3
}
    d03e:	4358      	muls	r0, r3
    d040:	4770      	bx	lr
    d042:	bf00      	nop
    d044:	20000500 	.word	0x20000500
    d048:	aaaaaaab 	.word	0xaaaaaaab

0000d04c <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static u8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
    d04c:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    d04e:	242c      	movs	r4, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    d050:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    d052:	4a09      	ldr	r2, [pc, #36]	; (d078 <fixed_data_alloc+0x2c>)
    d054:	fb04 2303 	mla	r3, r4, r3, r2
    d058:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	*size = MIN(fixed->data_size, *size);
    d05a:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    d05c:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
    d05e:	6823      	ldr	r3, [r4, #0]
    d060:	429a      	cmp	r2, r3
    d062:	bf94      	ite	ls
    d064:	600a      	strls	r2, [r1, #0]
    d066:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
    d068:	f7ff ffe0 	bl	d02c <net_buf_id>
    d06c:	e9d4 2300 	ldrd	r2, r3, [r4]
}
    d070:	fb02 3000 	mla	r0, r2, r0, r3
    d074:	bd10      	pop	{r4, pc}
    d076:	bf00      	nop
    d078:	20000500 	.word	0x20000500

0000d07c <net_buf_reset>:
{
    d07c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
    d07e:	7943      	ldrb	r3, [r0, #5]
{
    d080:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
    d082:	b14b      	cbz	r3, d098 <net_buf_reset+0x1c>
    d084:	490d      	ldr	r1, [pc, #52]	; (d0bc <net_buf_reset+0x40>)
    d086:	480e      	ldr	r0, [pc, #56]	; (d0c0 <net_buf_reset+0x44>)
    d088:	234f      	movs	r3, #79	; 0x4f
    d08a:	4a0e      	ldr	r2, [pc, #56]	; (d0c4 <net_buf_reset+0x48>)
    d08c:	f004 ff5c 	bl	11f48 <printk>
    d090:	214f      	movs	r1, #79	; 0x4f
    d092:	480c      	ldr	r0, [pc, #48]	; (d0c4 <net_buf_reset+0x48>)
    d094:	f005 f9ee 	bl	12474 <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
    d098:	6823      	ldr	r3, [r4, #0]
    d09a:	b14b      	cbz	r3, d0b0 <net_buf_reset+0x34>
    d09c:	490a      	ldr	r1, [pc, #40]	; (d0c8 <net_buf_reset+0x4c>)
    d09e:	4808      	ldr	r0, [pc, #32]	; (d0c0 <net_buf_reset+0x44>)
    d0a0:	2350      	movs	r3, #80	; 0x50
    d0a2:	4a08      	ldr	r2, [pc, #32]	; (d0c4 <net_buf_reset+0x48>)
    d0a4:	f004 ff50 	bl	11f48 <printk>
    d0a8:	2150      	movs	r1, #80	; 0x50
    d0aa:	4806      	ldr	r0, [pc, #24]	; (d0c4 <net_buf_reset+0x48>)
    d0ac:	f005 f9e2 	bl	12474 <assert_post_action>
	buf->len  = 0U;
    d0b0:	2300      	movs	r3, #0
    d0b2:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
    d0b4:	6923      	ldr	r3, [r4, #16]
    d0b6:	60a3      	str	r3, [r4, #8]
}
    d0b8:	bd10      	pop	{r4, pc}
    d0ba:	bf00      	nop
    d0bc:	0001aee3 	.word	0x0001aee3
    d0c0:	00017b50 	.word	0x00017b50
    d0c4:	0001aebf 	.word	0x0001aebf
    d0c8:	0001aef4 	.word	0x0001aef4

0000d0cc <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
    d0cc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    d0d0:	4605      	mov	r5, r0
    d0d2:	9101      	str	r1, [sp, #4]
	u64_t end = z_timeout_end_calc(timeout);
    d0d4:	4610      	mov	r0, r2
    d0d6:	4619      	mov	r1, r3
{
    d0d8:	4616      	mov	r6, r2
    d0da:	461f      	mov	r7, r3
	u64_t end = z_timeout_end_calc(timeout);
    d0dc:	f009 fb49 	bl	16772 <z_timeout_end_calc>
    d0e0:	4680      	mov	r8, r0
    d0e2:	4689      	mov	r9, r1
	struct net_buf *buf;
	unsigned int key;

	__ASSERT_NO_MSG(pool);
    d0e4:	b94d      	cbnz	r5, d0fa <net_buf_alloc_len+0x2e>
    d0e6:	494d      	ldr	r1, [pc, #308]	; (d21c <net_buf_alloc_len+0x150>)
    d0e8:	484d      	ldr	r0, [pc, #308]	; (d220 <net_buf_alloc_len+0x154>)
    d0ea:	23f1      	movs	r3, #241	; 0xf1
    d0ec:	4a4d      	ldr	r2, [pc, #308]	; (d224 <net_buf_alloc_len+0x158>)
    d0ee:	f004 ff2b 	bl	11f48 <printk>
    d0f2:	21f1      	movs	r1, #241	; 0xf1
    d0f4:	484b      	ldr	r0, [pc, #300]	; (d224 <net_buf_alloc_len+0x158>)
    d0f6:	f005 f9bd 	bl	12474 <assert_post_action>
	__asm__ volatile(
    d0fa:	f04f 0320 	mov.w	r3, #32
    d0fe:	f3ef 8a11 	mrs	sl, BASEPRI
    d102:	f383 8811 	msr	BASEPRI, r3
    d106:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
    d10a:	8beb      	ldrh	r3, [r5, #30]
    d10c:	2b00      	cmp	r3, #0
    d10e:	d055      	beq.n	d1bc <net_buf_alloc_len+0xf0>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
    d110:	8baa      	ldrh	r2, [r5, #28]
    d112:	429a      	cmp	r2, r3
    d114:	d93e      	bls.n	d194 <net_buf_alloc_len+0xc8>
	return z_impl_k_queue_get(queue, timeout);
    d116:	2200      	movs	r2, #0
    d118:	2300      	movs	r3, #0
    d11a:	4628      	mov	r0, r5
    d11c:	f002 facc 	bl	f6b8 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
    d120:	4604      	mov	r4, r0
    d122:	2800      	cmp	r0, #0
    d124:	d036      	beq.n	d194 <net_buf_alloc_len+0xc8>
	__asm__ volatile(
    d126:	f38a 8811 	msr	BASEPRI, sl
    d12a:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
    d12e:	f8dd a004 	ldr.w	sl, [sp, #4]
    d132:	f1ba 0f00 	cmp.w	sl, #0
    d136:	d06d      	beq.n	d214 <net_buf_alloc_len+0x148>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    d138:	ea56 0307 	orrs.w	r3, r6, r7
    d13c:	d010      	beq.n	d160 <net_buf_alloc_len+0x94>
    d13e:	1c7b      	adds	r3, r7, #1
    d140:	bf08      	it	eq
    d142:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    d146:	d00b      	beq.n	d160 <net_buf_alloc_len+0x94>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			s64_t remaining = end - z_tick_get();
    d148:	f004 fa66 	bl	11618 <z_tick_get>
    d14c:	ebb8 0600 	subs.w	r6, r8, r0
    d150:	eb69 0701 	sbc.w	r7, r9, r1
    d154:	2e00      	cmp	r6, #0
    d156:	f177 0300 	sbcs.w	r3, r7, #0
    d15a:	bfbc      	itt	lt
    d15c:	2600      	movlt	r6, #0
    d15e:	2700      	movlt	r7, #0
	return pool->alloc->cb->alloc(buf, size, timeout);
    d160:	f04f 092c 	mov.w	r9, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    d164:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
    d166:	f8df 80c0 	ldr.w	r8, [pc, #192]	; d228 <net_buf_alloc_len+0x15c>
    d16a:	4632      	mov	r2, r6
    d16c:	fb09 8303 	mla	r3, r9, r3, r8
    d170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d172:	4620      	mov	r0, r4
    d174:	681b      	ldr	r3, [r3, #0]
    d176:	a901      	add	r1, sp, #4
    d178:	681d      	ldr	r5, [r3, #0]
    d17a:	463b      	mov	r3, r7
    d17c:	47a8      	blx	r5
    d17e:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
    d180:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
    d182:	bb58      	cbnz	r0, d1dc <net_buf_alloc_len+0x110>
	k_lifo_put(&pool->free, buf);
    d184:	79a0      	ldrb	r0, [r4, #6]
    d186:	4621      	mov	r1, r4
    d188:	fb00 8009 	mla	r0, r0, r9, r8
    d18c:	f009 fa30 	bl	165f0 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
    d190:	462c      	mov	r4, r5
}
    d192:	e01f      	b.n	d1d4 <net_buf_alloc_len+0x108>
		uninit_count = pool->uninit_count--;
    d194:	8be8      	ldrh	r0, [r5, #30]
    d196:	1e43      	subs	r3, r0, #1
    d198:	83eb      	strh	r3, [r5, #30]
    d19a:	f38a 8811 	msr	BASEPRI, sl
    d19e:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
    d1a2:	2318      	movs	r3, #24
    d1a4:	8bac      	ldrh	r4, [r5, #28]
    d1a6:	1a24      	subs	r4, r4, r0
    d1a8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    d1aa:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
    d1ae:	481e      	ldr	r0, [pc, #120]	; (d228 <net_buf_alloc_len+0x15c>)
    d1b0:	4b1e      	ldr	r3, [pc, #120]	; (d22c <net_buf_alloc_len+0x160>)
    d1b2:	1a2d      	subs	r5, r5, r0
    d1b4:	10ad      	asrs	r5, r5, #2
    d1b6:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
    d1b8:	71a5      	strb	r5, [r4, #6]
		goto success;
    d1ba:	e7b8      	b.n	d12e <net_buf_alloc_len+0x62>
    d1bc:	f38a 8811 	msr	BASEPRI, sl
    d1c0:	f3bf 8f6f 	isb	sy
    d1c4:	4632      	mov	r2, r6
    d1c6:	463b      	mov	r3, r7
    d1c8:	4628      	mov	r0, r5
    d1ca:	f002 fa75 	bl	f6b8 <z_impl_k_queue_get>
	if (!buf) {
    d1ce:	4604      	mov	r4, r0
    d1d0:	2800      	cmp	r0, #0
    d1d2:	d1ac      	bne.n	d12e <net_buf_alloc_len+0x62>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	pool->avail_count--;
	__ASSERT_NO_MSG(pool->avail_count >= 0);
#endif
	return buf;
}
    d1d4:	4620      	mov	r0, r4
    d1d6:	b002      	add	sp, #8
    d1d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		NET_BUF_ASSERT(req_size <= size);
    d1dc:	9b01      	ldr	r3, [sp, #4]
    d1de:	459a      	cmp	sl, r3
    d1e0:	d90e      	bls.n	d200 <net_buf_alloc_len+0x134>
    d1e2:	4913      	ldr	r1, [pc, #76]	; (d230 <net_buf_alloc_len+0x164>)
    d1e4:	f240 1351 	movw	r3, #337	; 0x151
    d1e8:	4a0e      	ldr	r2, [pc, #56]	; (d224 <net_buf_alloc_len+0x158>)
    d1ea:	480d      	ldr	r0, [pc, #52]	; (d220 <net_buf_alloc_len+0x154>)
    d1ec:	f004 feac 	bl	11f48 <printk>
    d1f0:	4810      	ldr	r0, [pc, #64]	; (d234 <net_buf_alloc_len+0x168>)
    d1f2:	f004 fea9 	bl	11f48 <printk>
    d1f6:	f240 1151 	movw	r1, #337	; 0x151
    d1fa:	480a      	ldr	r0, [pc, #40]	; (d224 <net_buf_alloc_len+0x158>)
    d1fc:	f005 f93a 	bl	12474 <assert_post_action>
	buf->frags = NULL;
    d200:	2300      	movs	r3, #0
    d202:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
    d204:	2301      	movs	r3, #1
    d206:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
    d208:	9b01      	ldr	r3, [sp, #4]
	net_buf_reset(buf);
    d20a:	4620      	mov	r0, r4
	buf->size  = size;
    d20c:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
    d20e:	f7ff ff35 	bl	d07c <net_buf_reset>
	return buf;
    d212:	e7df      	b.n	d1d4 <net_buf_alloc_len+0x108>
		buf->__buf = NULL;
    d214:	f8c4 a010 	str.w	sl, [r4, #16]
    d218:	e7f2      	b.n	d200 <net_buf_alloc_len+0x134>
    d21a:	bf00      	nop
    d21c:	0001af0e 	.word	0x0001af0e
    d220:	00017b50 	.word	0x00017b50
    d224:	0001aebf 	.word	0x0001aebf
    d228:	20000500 	.word	0x20000500
    d22c:	ba2e8ba3 	.word	0xba2e8ba3
    d230:	0001af13 	.word	0x0001af13
    d234:	0001af24 	.word	0x0001af24

0000d238 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
    d238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d23c:	4606      	mov	r6, r0
    d23e:	f002 fa3b 	bl	f6b8 <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
    d242:	4605      	mov	r5, r0
    d244:	b150      	cbz	r0, d25c <net_buf_get+0x24>
    d246:	4604      	mov	r4, r0
	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);
    d248:	4f12      	ldr	r7, [pc, #72]	; (d294 <net_buf_get+0x5c>)
    d24a:	f8df 804c 	ldr.w	r8, [pc, #76]	; d298 <net_buf_get+0x60>
    d24e:	f8df 904c 	ldr.w	r9, [pc, #76]	; d29c <net_buf_get+0x64>
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
    d252:	7963      	ldrb	r3, [r4, #5]
    d254:	f013 0301 	ands.w	r3, r3, #1
    d258:	d103      	bne.n	d262 <net_buf_get+0x2a>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
    d25a:	6023      	str	r3, [r4, #0]

	return buf;
}
    d25c:	4628      	mov	r0, r5
    d25e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d262:	2200      	movs	r2, #0
    d264:	2300      	movs	r3, #0
    d266:	4630      	mov	r0, r6
    d268:	f002 fa26 	bl	f6b8 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
    d26c:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
    d26e:	b958      	cbnz	r0, d288 <net_buf_get+0x50>
    d270:	4641      	mov	r1, r8
    d272:	4648      	mov	r0, r9
    d274:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    d278:	463a      	mov	r2, r7
    d27a:	f004 fe65 	bl	11f48 <printk>
    d27e:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    d282:	4638      	mov	r0, r7
    d284:	f005 f8f6 	bl	12474 <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
    d288:	7963      	ldrb	r3, [r4, #5]
    d28a:	f023 0301 	bic.w	r3, r3, #1
    d28e:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
    d290:	6824      	ldr	r4, [r4, #0]
    d292:	e7de      	b.n	d252 <net_buf_get+0x1a>
    d294:	0001aebf 	.word	0x0001aebf
    d298:	0001af27 	.word	0x0001af27
    d29c:	00017b50 	.word	0x00017b50

0000d2a0 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
    d2a0:	b538      	push	{r3, r4, r5, lr}
    d2a2:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
    d2a4:	4604      	mov	r4, r0
    d2a6:	b958      	cbnz	r0, d2c0 <net_buf_simple_reserve+0x20>
    d2a8:	490e      	ldr	r1, [pc, #56]	; (d2e4 <net_buf_simple_reserve+0x44>)
    d2aa:	480f      	ldr	r0, [pc, #60]	; (d2e8 <net_buf_simple_reserve+0x48>)
    d2ac:	f240 13bf 	movw	r3, #447	; 0x1bf
    d2b0:	4a0e      	ldr	r2, [pc, #56]	; (d2ec <net_buf_simple_reserve+0x4c>)
    d2b2:	f004 fe49 	bl	11f48 <printk>
    d2b6:	f240 11bf 	movw	r1, #447	; 0x1bf
    d2ba:	480c      	ldr	r0, [pc, #48]	; (d2ec <net_buf_simple_reserve+0x4c>)
    d2bc:	f005 f8da 	bl	12474 <assert_post_action>
	__ASSERT_NO_MSG(buf->len == 0U);
    d2c0:	88a3      	ldrh	r3, [r4, #4]
    d2c2:	b15b      	cbz	r3, d2dc <net_buf_simple_reserve+0x3c>
    d2c4:	490a      	ldr	r1, [pc, #40]	; (d2f0 <net_buf_simple_reserve+0x50>)
    d2c6:	4808      	ldr	r0, [pc, #32]	; (d2e8 <net_buf_simple_reserve+0x48>)
    d2c8:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
    d2cc:	4a07      	ldr	r2, [pc, #28]	; (d2ec <net_buf_simple_reserve+0x4c>)
    d2ce:	f004 fe3b 	bl	11f48 <printk>
    d2d2:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
    d2d6:	4805      	ldr	r0, [pc, #20]	; (d2ec <net_buf_simple_reserve+0x4c>)
    d2d8:	f005 f8cc 	bl	12474 <assert_post_action>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
    d2dc:	68a3      	ldr	r3, [r4, #8]
    d2de:	442b      	add	r3, r5
    d2e0:	6023      	str	r3, [r4, #0]
}
    d2e2:	bd38      	pop	{r3, r4, r5, pc}
    d2e4:	0001afce 	.word	0x0001afce
    d2e8:	00017b50 	.word	0x00017b50
    d2ec:	0001aebf 	.word	0x0001aebf
    d2f0:	0001af33 	.word	0x0001af33

0000d2f4 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
    d2f4:	b538      	push	{r3, r4, r5, lr}
    d2f6:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
    d2f8:	4605      	mov	r5, r0
    d2fa:	b958      	cbnz	r0, d314 <net_buf_put+0x20>
    d2fc:	4913      	ldr	r1, [pc, #76]	; (d34c <net_buf_put+0x58>)
    d2fe:	4814      	ldr	r0, [pc, #80]	; (d350 <net_buf_put+0x5c>)
    d300:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
    d304:	4a13      	ldr	r2, [pc, #76]	; (d354 <net_buf_put+0x60>)
    d306:	f004 fe1f 	bl	11f48 <printk>
    d30a:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
    d30e:	4811      	ldr	r0, [pc, #68]	; (d354 <net_buf_put+0x60>)
    d310:	f005 f8b0 	bl	12474 <assert_post_action>
	__ASSERT_NO_MSG(buf);
    d314:	b95c      	cbnz	r4, d32e <net_buf_put+0x3a>
    d316:	4910      	ldr	r1, [pc, #64]	; (d358 <net_buf_put+0x64>)
    d318:	480d      	ldr	r0, [pc, #52]	; (d350 <net_buf_put+0x5c>)
    d31a:	f240 13fd 	movw	r3, #509	; 0x1fd
    d31e:	4a0d      	ldr	r2, [pc, #52]	; (d354 <net_buf_put+0x60>)
    d320:	f004 fe12 	bl	11f48 <printk>
    d324:	f240 11fd 	movw	r1, #509	; 0x1fd
    d328:	480a      	ldr	r0, [pc, #40]	; (d354 <net_buf_put+0x60>)
    d32a:	f005 f8a3 	bl	12474 <assert_post_action>
{
    d32e:	4622      	mov	r2, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
    d330:	6811      	ldr	r1, [r2, #0]
    d332:	b929      	cbnz	r1, d340 <net_buf_put+0x4c>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
    d334:	4621      	mov	r1, r4
    d336:	4628      	mov	r0, r5
}
    d338:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_fifo_put_list(fifo, buf, tail);
    d33c:	f002 b95e 	b.w	f5fc <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
    d340:	7953      	ldrb	r3, [r2, #5]
    d342:	f043 0301 	orr.w	r3, r3, #1
    d346:	7153      	strb	r3, [r2, #5]
    d348:	460a      	mov	r2, r1
    d34a:	e7f1      	b.n	d330 <net_buf_put+0x3c>
    d34c:	0001af42 	.word	0x0001af42
    d350:	00017b50 	.word	0x00017b50
    d354:	0001aebf 	.word	0x0001aebf
    d358:	0001afce 	.word	0x0001afce

0000d35c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    d35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
    d360:	4605      	mov	r5, r0
    d362:	b328      	cbz	r0, d3b0 <net_buf_unref+0x54>
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
    d364:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
    d366:	f04f 082c 	mov.w	r8, #44	; 0x2c
    d36a:	4e1b      	ldr	r6, [pc, #108]	; (d3d8 <net_buf_unref+0x7c>)
		struct net_buf *frags = buf->frags;
    d36c:	462c      	mov	r4, r5
		if (--buf->ref > 0) {
    d36e:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
    d370:	682d      	ldr	r5, [r5, #0]
		if (--buf->ref > 0) {
    d372:	3b01      	subs	r3, #1
    d374:	b2db      	uxtb	r3, r3
    d376:	7123      	strb	r3, [r4, #4]
    d378:	b9c3      	cbnz	r3, d3ac <net_buf_unref+0x50>
		if (buf->__buf) {
    d37a:	6921      	ldr	r1, [r4, #16]
    d37c:	b159      	cbz	r1, d396 <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
    d37e:	7963      	ldrb	r3, [r4, #5]
    d380:	079b      	lsls	r3, r3, #30
    d382:	d407      	bmi.n	d394 <net_buf_unref+0x38>
	pool->alloc->cb->unref(buf, data);
    d384:	79a3      	ldrb	r3, [r4, #6]
    d386:	4620      	mov	r0, r4
    d388:	fb08 6303 	mla	r3, r8, r3, r6
    d38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d38e:	681b      	ldr	r3, [r3, #0]
    d390:	689b      	ldr	r3, [r3, #8]
    d392:	4798      	blx	r3
			buf->__buf = NULL;
    d394:	6127      	str	r7, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
    d396:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
    d398:	60a7      	str	r7, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		__ASSERT_NO_MSG(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
    d39a:	fb08 6300 	mla	r3, r8, r0, r6
    d39e:	6a1b      	ldr	r3, [r3, #32]
		buf->frags = NULL;
    d3a0:	6027      	str	r7, [r4, #0]
		if (pool->destroy) {
    d3a2:	b19b      	cbz	r3, d3cc <net_buf_unref+0x70>
			pool->destroy(buf);
    d3a4:	4620      	mov	r0, r4
    d3a6:	4798      	blx	r3
	while (buf) {
    d3a8:	2d00      	cmp	r5, #0
    d3aa:	d1df      	bne.n	d36c <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
    d3ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
    d3b0:	490a      	ldr	r1, [pc, #40]	; (d3dc <net_buf_unref+0x80>)
    d3b2:	480b      	ldr	r0, [pc, #44]	; (d3e0 <net_buf_unref+0x84>)
    d3b4:	f44f 7303 	mov.w	r3, #524	; 0x20c
    d3b8:	4a0a      	ldr	r2, [pc, #40]	; (d3e4 <net_buf_unref+0x88>)
    d3ba:	f004 fdc5 	bl	11f48 <printk>
}
    d3be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
    d3c2:	f44f 7103 	mov.w	r1, #524	; 0x20c
    d3c6:	4807      	ldr	r0, [pc, #28]	; (d3e4 <net_buf_unref+0x88>)
    d3c8:	f005 b854 	b.w	12474 <assert_post_action>
	k_lifo_put(&pool->free, buf);
    d3cc:	4621      	mov	r1, r4
    d3ce:	fb00 6008 	mla	r0, r0, r8, r6
    d3d2:	f009 f90d 	bl	165f0 <k_queue_prepend>
}
    d3d6:	e7e7      	b.n	d3a8 <net_buf_unref+0x4c>
    d3d8:	20000500 	.word	0x20000500
    d3dc:	0001afce 	.word	0x0001afce
    d3e0:	00017b50 	.word	0x00017b50
    d3e4:	0001aebf 	.word	0x0001aebf

0000d3e8 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
    d3e8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
    d3ea:	4604      	mov	r4, r0
    d3ec:	b958      	cbnz	r0, d406 <net_buf_ref+0x1e>
    d3ee:	4908      	ldr	r1, [pc, #32]	; (d410 <net_buf_ref+0x28>)
    d3f0:	4808      	ldr	r0, [pc, #32]	; (d414 <net_buf_ref+0x2c>)
    d3f2:	f240 233b 	movw	r3, #571	; 0x23b
    d3f6:	4a08      	ldr	r2, [pc, #32]	; (d418 <net_buf_ref+0x30>)
    d3f8:	f004 fda6 	bl	11f48 <printk>
    d3fc:	f240 213b 	movw	r1, #571	; 0x23b
    d400:	4805      	ldr	r0, [pc, #20]	; (d418 <net_buf_ref+0x30>)
    d402:	f005 f837 	bl	12474 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
    d406:	7923      	ldrb	r3, [r4, #4]
	return buf;
}
    d408:	4620      	mov	r0, r4
	buf->ref++;
    d40a:	3301      	adds	r3, #1
    d40c:	7123      	strb	r3, [r4, #4]
}
    d40e:	bd10      	pop	{r4, pc}
    d410:	0001afce 	.word	0x0001afce
    d414:	00017b50 	.word	0x00017b50
    d418:	0001aebf 	.word	0x0001aebf

0000d41c <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
    d41c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
    d41e:	4604      	mov	r4, r0
    d420:	b958      	cbnz	r0, d43a <net_buf_frag_last+0x1e>
    d422:	4908      	ldr	r1, [pc, #32]	; (d444 <net_buf_frag_last+0x28>)
    d424:	4808      	ldr	r0, [pc, #32]	; (d448 <net_buf_frag_last+0x2c>)
    d426:	f44f 731e 	mov.w	r3, #632	; 0x278
    d42a:	4a08      	ldr	r2, [pc, #32]	; (d44c <net_buf_frag_last+0x30>)
    d42c:	f004 fd8c 	bl	11f48 <printk>
    d430:	f44f 711e 	mov.w	r1, #632	; 0x278
    d434:	4805      	ldr	r0, [pc, #20]	; (d44c <net_buf_frag_last+0x30>)
    d436:	f005 f81d 	bl	12474 <assert_post_action>

	while (buf->frags) {
    d43a:	4620      	mov	r0, r4
    d43c:	6824      	ldr	r4, [r4, #0]
    d43e:	2c00      	cmp	r4, #0
    d440:	d1fb      	bne.n	d43a <net_buf_frag_last+0x1e>
		buf = buf->frags;
	}

	return buf;
}
    d442:	bd10      	pop	{r4, pc}
    d444:	0001afce 	.word	0x0001afce
    d448:	00017b50 	.word	0x00017b50
    d44c:	0001aebf 	.word	0x0001aebf

0000d450 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
    d450:	b538      	push	{r3, r4, r5, lr}
    d452:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
    d454:	4604      	mov	r4, r0
    d456:	b958      	cbnz	r0, d470 <net_buf_frag_insert+0x20>
    d458:	4910      	ldr	r1, [pc, #64]	; (d49c <net_buf_frag_insert+0x4c>)
    d45a:	4811      	ldr	r0, [pc, #68]	; (d4a0 <net_buf_frag_insert+0x50>)
    d45c:	f240 2383 	movw	r3, #643	; 0x283
    d460:	4a10      	ldr	r2, [pc, #64]	; (d4a4 <net_buf_frag_insert+0x54>)
    d462:	f004 fd71 	bl	11f48 <printk>
    d466:	f240 2183 	movw	r1, #643	; 0x283
    d46a:	480e      	ldr	r0, [pc, #56]	; (d4a4 <net_buf_frag_insert+0x54>)
    d46c:	f005 f802 	bl	12474 <assert_post_action>
	__ASSERT_NO_MSG(frag);
    d470:	b95d      	cbnz	r5, d48a <net_buf_frag_insert+0x3a>
    d472:	490d      	ldr	r1, [pc, #52]	; (d4a8 <net_buf_frag_insert+0x58>)
    d474:	480a      	ldr	r0, [pc, #40]	; (d4a0 <net_buf_frag_insert+0x50>)
    d476:	f44f 7321 	mov.w	r3, #644	; 0x284
    d47a:	4a0a      	ldr	r2, [pc, #40]	; (d4a4 <net_buf_frag_insert+0x54>)
    d47c:	f004 fd64 	bl	11f48 <printk>
    d480:	f44f 7121 	mov.w	r1, #644	; 0x284
    d484:	4807      	ldr	r0, [pc, #28]	; (d4a4 <net_buf_frag_insert+0x54>)
    d486:	f004 fff5 	bl	12474 <assert_post_action>

	if (parent->frags) {
    d48a:	6823      	ldr	r3, [r4, #0]
    d48c:	b123      	cbz	r3, d498 <net_buf_frag_insert+0x48>
		net_buf_frag_last(frag)->frags = parent->frags;
    d48e:	4628      	mov	r0, r5
    d490:	f7ff ffc4 	bl	d41c <net_buf_frag_last>
    d494:	6823      	ldr	r3, [r4, #0]
    d496:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
    d498:	6025      	str	r5, [r4, #0]
}
    d49a:	bd38      	pop	{r3, r4, r5, pc}
    d49c:	0001af47 	.word	0x0001af47
    d4a0:	00017b50 	.word	0x00017b50
    d4a4:	0001aebf 	.word	0x0001aebf
    d4a8:	0001af6d 	.word	0x0001af6d

0000d4ac <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
    d4ac:	b538      	push	{r3, r4, r5, lr}
    d4ae:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frag);
    d4b0:	460d      	mov	r5, r1
    d4b2:	b959      	cbnz	r1, d4cc <net_buf_frag_add+0x20>
    d4b4:	490c      	ldr	r1, [pc, #48]	; (d4e8 <net_buf_frag_add+0x3c>)
    d4b6:	480d      	ldr	r0, [pc, #52]	; (d4ec <net_buf_frag_add+0x40>)
    d4b8:	f240 238f 	movw	r3, #655	; 0x28f
    d4bc:	4a0c      	ldr	r2, [pc, #48]	; (d4f0 <net_buf_frag_add+0x44>)
    d4be:	f004 fd43 	bl	11f48 <printk>
    d4c2:	f240 218f 	movw	r1, #655	; 0x28f
    d4c6:	480a      	ldr	r0, [pc, #40]	; (d4f0 <net_buf_frag_add+0x44>)
    d4c8:	f004 ffd4 	bl	12474 <assert_post_action>

	if (!head) {
    d4cc:	b924      	cbnz	r4, d4d8 <net_buf_frag_add+0x2c>
		return net_buf_ref(frag);
    d4ce:	4628      	mov	r0, r5
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
    d4d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
    d4d4:	f7ff bf88 	b.w	d3e8 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
    d4d8:	4620      	mov	r0, r4
    d4da:	f7ff ff9f 	bl	d41c <net_buf_frag_last>
    d4de:	4629      	mov	r1, r5
    d4e0:	f7ff ffb6 	bl	d450 <net_buf_frag_insert>
}
    d4e4:	4620      	mov	r0, r4
    d4e6:	bd38      	pop	{r3, r4, r5, pc}
    d4e8:	0001af6d 	.word	0x0001af6d
    d4ec:	00017b50 	.word	0x00017b50
    d4f0:	0001aebf 	.word	0x0001aebf

0000d4f4 <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
    d4f4:	b538      	push	{r3, r4, r5, lr}
    d4f6:	4605      	mov	r5, r0
	struct net_buf *next_frag;

	__ASSERT_NO_MSG(frag);
    d4f8:	460c      	mov	r4, r1
    d4fa:	b959      	cbnz	r1, d514 <net_buf_frag_del+0x20>
    d4fc:	4919      	ldr	r1, [pc, #100]	; (d564 <net_buf_frag_del+0x70>)
    d4fe:	481a      	ldr	r0, [pc, #104]	; (d568 <net_buf_frag_del+0x74>)
    d500:	f44f 7329 	mov.w	r3, #676	; 0x2a4
    d504:	4a19      	ldr	r2, [pc, #100]	; (d56c <net_buf_frag_del+0x78>)
    d506:	f004 fd1f 	bl	11f48 <printk>
    d50a:	f44f 7129 	mov.w	r1, #676	; 0x2a4
    d50e:	4817      	ldr	r0, [pc, #92]	; (d56c <net_buf_frag_del+0x78>)
    d510:	f004 ffb0 	bl	12474 <assert_post_action>

	if (parent) {
    d514:	b1f5      	cbz	r5, d554 <net_buf_frag_del+0x60>
		__ASSERT_NO_MSG(parent->frags);
    d516:	682b      	ldr	r3, [r5, #0]
    d518:	b95b      	cbnz	r3, d532 <net_buf_frag_del+0x3e>
    d51a:	4915      	ldr	r1, [pc, #84]	; (d570 <net_buf_frag_del+0x7c>)
    d51c:	4812      	ldr	r0, [pc, #72]	; (d568 <net_buf_frag_del+0x74>)
    d51e:	f240 23a7 	movw	r3, #679	; 0x2a7
    d522:	4a12      	ldr	r2, [pc, #72]	; (d56c <net_buf_frag_del+0x78>)
    d524:	f004 fd10 	bl	11f48 <printk>
    d528:	f240 21a7 	movw	r1, #679	; 0x2a7
    d52c:	480f      	ldr	r0, [pc, #60]	; (d56c <net_buf_frag_del+0x78>)
    d52e:	f004 ffa1 	bl	12474 <assert_post_action>
		__ASSERT_NO_MSG(parent->frags == frag);
    d532:	682b      	ldr	r3, [r5, #0]
    d534:	42a3      	cmp	r3, r4
    d536:	d00b      	beq.n	d550 <net_buf_frag_del+0x5c>
    d538:	490e      	ldr	r1, [pc, #56]	; (d574 <net_buf_frag_del+0x80>)
    d53a:	480b      	ldr	r0, [pc, #44]	; (d568 <net_buf_frag_del+0x74>)
    d53c:	f44f 732a 	mov.w	r3, #680	; 0x2a8
    d540:	4a0a      	ldr	r2, [pc, #40]	; (d56c <net_buf_frag_del+0x78>)
    d542:	f004 fd01 	bl	11f48 <printk>
    d546:	f44f 712a 	mov.w	r1, #680	; 0x2a8
    d54a:	4808      	ldr	r0, [pc, #32]	; (d56c <net_buf_frag_del+0x78>)
    d54c:	f004 ff92 	bl	12474 <assert_post_action>
		parent->frags = frag->frags;
    d550:	6823      	ldr	r3, [r4, #0]
    d552:	602b      	str	r3, [r5, #0]
	}

	next_frag = frag->frags;

	frag->frags = NULL;
    d554:	2300      	movs	r3, #0
	next_frag = frag->frags;
    d556:	6825      	ldr	r5, [r4, #0]

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
    d558:	4620      	mov	r0, r4
	frag->frags = NULL;
    d55a:	6023      	str	r3, [r4, #0]
	net_buf_unref(frag);
    d55c:	f7ff fefe 	bl	d35c <net_buf_unref>
#endif

	return next_frag;
}
    d560:	4628      	mov	r0, r5
    d562:	bd38      	pop	{r3, r4, r5, pc}
    d564:	0001af6d 	.word	0x0001af6d
    d568:	00017b50 	.word	0x00017b50
    d56c:	0001aebf 	.word	0x0001aebf
    d570:	0001af4e 	.word	0x0001af4e
    d574:	0001af5c 	.word	0x0001af5c

0000d578 <net_buf_simple_push>:

	sys_put_be64(val, net_buf_simple_add(buf, sizeof(val)));
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
    d578:	b538      	push	{r3, r4, r5, lr}
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
    d57a:	6882      	ldr	r2, [r0, #8]
    d57c:	6803      	ldr	r3, [r0, #0]
{
    d57e:	4604      	mov	r4, r0
	return buf->data - buf->__buf;
    d580:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
    d582:	4299      	cmp	r1, r3
{
    d584:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
    d586:	d90b      	bls.n	d5a0 <net_buf_simple_push+0x28>
    d588:	4909      	ldr	r1, [pc, #36]	; (d5b0 <net_buf_simple_push+0x38>)
    d58a:	480a      	ldr	r0, [pc, #40]	; (d5b4 <net_buf_simple_push+0x3c>)
    d58c:	f240 337d 	movw	r3, #893	; 0x37d
    d590:	4a09      	ldr	r2, [pc, #36]	; (d5b8 <net_buf_simple_push+0x40>)
    d592:	f004 fcd9 	bl	11f48 <printk>
    d596:	f240 317d 	movw	r1, #893	; 0x37d
    d59a:	4807      	ldr	r0, [pc, #28]	; (d5b8 <net_buf_simple_push+0x40>)
    d59c:	f004 ff6a 	bl	12474 <assert_post_action>
	buf->data -= len;
    d5a0:	6820      	ldr	r0, [r4, #0]
	buf->len += len;
    d5a2:	88a1      	ldrh	r1, [r4, #4]
	buf->data -= len;
    d5a4:	1b40      	subs	r0, r0, r5
	buf->len += len;
    d5a6:	440d      	add	r5, r1
	buf->data -= len;
    d5a8:	6020      	str	r0, [r4, #0]
	buf->len += len;
    d5aa:	80a5      	strh	r5, [r4, #4]
}
    d5ac:	bd38      	pop	{r3, r4, r5, pc}
    d5ae:	bf00      	nop
    d5b0:	0001af72 	.word	0x0001af72
    d5b4:	00017b50 	.word	0x00017b50
    d5b8:	0001aebf 	.word	0x0001aebf

0000d5bc <net_buf_simple_pull>:
{
    d5bc:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf->len >= len);
    d5be:	8883      	ldrh	r3, [r0, #4]
{
    d5c0:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->len >= len);
    d5c2:	428b      	cmp	r3, r1
{
    d5c4:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
    d5c6:	d20b      	bcs.n	d5e0 <net_buf_simple_pull+0x24>
    d5c8:	4909      	ldr	r1, [pc, #36]	; (d5f0 <net_buf_simple_pull+0x34>)
    d5ca:	480a      	ldr	r0, [pc, #40]	; (d5f4 <net_buf_simple_pull+0x38>)
    d5cc:	f240 33d5 	movw	r3, #981	; 0x3d5
    d5d0:	4a09      	ldr	r2, [pc, #36]	; (d5f8 <net_buf_simple_pull+0x3c>)
    d5d2:	f004 fcb9 	bl	11f48 <printk>
    d5d6:	f240 31d5 	movw	r1, #981	; 0x3d5
    d5da:	4807      	ldr	r0, [pc, #28]	; (d5f8 <net_buf_simple_pull+0x3c>)
    d5dc:	f004 ff4a 	bl	12474 <assert_post_action>
	buf->len -= len;
    d5e0:	88a3      	ldrh	r3, [r4, #4]
	return buf->data += len;
    d5e2:	6820      	ldr	r0, [r4, #0]
	buf->len -= len;
    d5e4:	1b5b      	subs	r3, r3, r5
	return buf->data += len;
    d5e6:	4428      	add	r0, r5
	buf->len -= len;
    d5e8:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
    d5ea:	6020      	str	r0, [r4, #0]
}
    d5ec:	bd38      	pop	{r3, r4, r5, pc}
    d5ee:	bf00      	nop
    d5f0:	0001af96 	.word	0x0001af96
    d5f4:	00017b50 	.word	0x00017b50
    d5f8:	0001aebf 	.word	0x0001aebf

0000d5fc <net_buf_simple_pull_mem>:
	__ASSERT_NO_MSG(buf->len >= len);
    d5fc:	8883      	ldrh	r3, [r0, #4]
{
    d5fe:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(buf->len >= len);
    d600:	428b      	cmp	r3, r1
{
    d602:	4604      	mov	r4, r0
    d604:	460d      	mov	r5, r1
	void *data = buf->data;
    d606:	6806      	ldr	r6, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
    d608:	d20b      	bcs.n	d622 <net_buf_simple_pull_mem+0x26>
    d60a:	490a      	ldr	r1, [pc, #40]	; (d634 <net_buf_simple_pull_mem+0x38>)
    d60c:	480a      	ldr	r0, [pc, #40]	; (d638 <net_buf_simple_pull_mem+0x3c>)
    d60e:	f240 33e1 	movw	r3, #993	; 0x3e1
    d612:	4a0a      	ldr	r2, [pc, #40]	; (d63c <net_buf_simple_pull_mem+0x40>)
    d614:	f004 fc98 	bl	11f48 <printk>
    d618:	f240 31e1 	movw	r1, #993	; 0x3e1
    d61c:	4807      	ldr	r0, [pc, #28]	; (d63c <net_buf_simple_pull_mem+0x40>)
    d61e:	f004 ff29 	bl	12474 <assert_post_action>
	buf->len -= len;
    d622:	88a3      	ldrh	r3, [r4, #4]
	buf->data += len;
    d624:	6821      	ldr	r1, [r4, #0]
	buf->len -= len;
    d626:	1b5b      	subs	r3, r3, r5
	buf->data += len;
    d628:	4429      	add	r1, r5
}
    d62a:	4630      	mov	r0, r6
	buf->len -= len;
    d62c:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
    d62e:	6021      	str	r1, [r4, #0]
}
    d630:	bd70      	pop	{r4, r5, r6, pc}
    d632:	bf00      	nop
    d634:	0001af96 	.word	0x0001af96
    d638:	00017b50 	.word	0x00017b50
    d63c:	0001aebf 	.word	0x0001aebf

0000d640 <net_buf_simple_add>:
{
    d640:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
    d642:	6803      	ldr	r3, [r0, #0]
    d644:	8886      	ldrh	r6, [r0, #4]
    d646:	4604      	mov	r4, r0
    d648:	460d      	mov	r5, r1
    d64a:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
    d64c:	f007 fff4 	bl	15638 <net_buf_simple_tailroom>
    d650:	4288      	cmp	r0, r1
    d652:	d20b      	bcs.n	d66c <net_buf_simple_add+0x2c>
    d654:	4908      	ldr	r1, [pc, #32]	; (d678 <net_buf_simple_add+0x38>)
    d656:	4809      	ldr	r0, [pc, #36]	; (d67c <net_buf_simple_add+0x3c>)
    d658:	f240 3319 	movw	r3, #793	; 0x319
    d65c:	4a08      	ldr	r2, [pc, #32]	; (d680 <net_buf_simple_add+0x40>)
    d65e:	f004 fc73 	bl	11f48 <printk>
    d662:	f240 3119 	movw	r1, #793	; 0x319
    d666:	4806      	ldr	r0, [pc, #24]	; (d680 <net_buf_simple_add+0x40>)
    d668:	f004 ff04 	bl	12474 <assert_post_action>
	buf->len += len;
    d66c:	88a1      	ldrh	r1, [r4, #4]
}
    d66e:	4630      	mov	r0, r6
	buf->len += len;
    d670:	440d      	add	r5, r1
    d672:	80a5      	strh	r5, [r4, #4]
}
    d674:	bd70      	pop	{r4, r5, r6, pc}
    d676:	bf00      	nop
    d678:	0001afa6 	.word	0x0001afa6
    d67c:	00017b50 	.word	0x00017b50
    d680:	0001aebf 	.word	0x0001aebf

0000d684 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    d684:	6802      	ldr	r2, [r0, #0]
{
    d686:	b510      	push	{r4, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
    d688:	0953      	lsrs	r3, r2, #5
{
    d68a:	4604      	mov	r4, r0
    switch (port)
    d68c:	d01e      	beq.n	d6cc <nrf_gpio_pin_port_decode+0x48>
    d68e:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    d690:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d694:	bf18      	it	ne
    d696:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
    d698:	f002 021f 	and.w	r2, r2, #31

    return (mask & (1UL << pin_number)) ? true : false;
    d69c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    d69e:	07db      	lsls	r3, r3, #31
    d6a0:	d40b      	bmi.n	d6ba <nrf_gpio_pin_port_decode+0x36>
    d6a2:	490c      	ldr	r1, [pc, #48]	; (d6d4 <nrf_gpio_pin_port_decode+0x50>)
    d6a4:	480c      	ldr	r0, [pc, #48]	; (d6d8 <nrf_gpio_pin_port_decode+0x54>)
    d6a6:	f240 230d 	movw	r3, #525	; 0x20d
    d6aa:	4a0c      	ldr	r2, [pc, #48]	; (d6dc <nrf_gpio_pin_port_decode+0x58>)
    d6ac:	f004 fc4c 	bl	11f48 <printk>
    d6b0:	f240 210d 	movw	r1, #525	; 0x20d
    d6b4:	4809      	ldr	r0, [pc, #36]	; (d6dc <nrf_gpio_pin_port_decode+0x58>)
    d6b6:	f004 fedd 	bl	12474 <assert_post_action>
    if (*p_pin < P0_PIN_NUM)
    d6ba:	6823      	ldr	r3, [r4, #0]
    d6bc:	2b1f      	cmp	r3, #31
        *p_pin = *p_pin & 0x1F;
    d6be:	bf85      	ittet	hi
    d6c0:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
    d6c4:	4806      	ldrhi	r0, [pc, #24]	; (d6e0 <nrf_gpio_pin_port_decode+0x5c>)
        return NRF_P0;
    d6c6:	4807      	ldrls	r0, [pc, #28]	; (d6e4 <nrf_gpio_pin_port_decode+0x60>)
        *p_pin = *p_pin & 0x1F;
    d6c8:	6023      	strhi	r3, [r4, #0]
}
    d6ca:	bd10      	pop	{r4, pc}
    switch (port)
    d6cc:	f04f 33ff 	mov.w	r3, #4294967295
    d6d0:	e7e2      	b.n	d698 <nrf_gpio_pin_port_decode+0x14>
    d6d2:	bf00      	nop
    d6d4:	0001b005 	.word	0x0001b005
    d6d8:	00017b50 	.word	0x00017b50
    d6dc:	0001afd2 	.word	0x0001afd2
    d6e0:	50842800 	.word	0x50842800
    d6e4:	50842500 	.word	0x50842500

0000d6e8 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    d6e8:	b570      	push	{r4, r5, r6, lr}
    d6ea:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    d6ec:	460c      	mov	r4, r1
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    d6ee:	68c5      	ldr	r5, [r0, #12]
    d6f0:	b961      	cbnz	r1, d70c <gpio_nrfx_manage_callback+0x24>
    d6f2:	4922      	ldr	r1, [pc, #136]	; (d77c <gpio_nrfx_manage_callback+0x94>)
    d6f4:	2324      	movs	r3, #36	; 0x24
    d6f6:	4a22      	ldr	r2, [pc, #136]	; (d780 <gpio_nrfx_manage_callback+0x98>)
    d6f8:	4822      	ldr	r0, [pc, #136]	; (d784 <gpio_nrfx_manage_callback+0x9c>)
    d6fa:	f004 fc25 	bl	11f48 <printk>
    d6fe:	4822      	ldr	r0, [pc, #136]	; (d788 <gpio_nrfx_manage_callback+0xa0>)
    d700:	f004 fc22 	bl	11f48 <printk>
    d704:	2124      	movs	r1, #36	; 0x24
    d706:	481e      	ldr	r0, [pc, #120]	; (d780 <gpio_nrfx_manage_callback+0x98>)
    d708:	f004 feb4 	bl	12474 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    d70c:	6863      	ldr	r3, [r4, #4]
    d70e:	b963      	cbnz	r3, d72a <gpio_nrfx_manage_callback+0x42>
    d710:	491e      	ldr	r1, [pc, #120]	; (d78c <gpio_nrfx_manage_callback+0xa4>)
    d712:	2325      	movs	r3, #37	; 0x25
    d714:	4a1a      	ldr	r2, [pc, #104]	; (d780 <gpio_nrfx_manage_callback+0x98>)
    d716:	481b      	ldr	r0, [pc, #108]	; (d784 <gpio_nrfx_manage_callback+0x9c>)
    d718:	f004 fc16 	bl	11f48 <printk>
    d71c:	481c      	ldr	r0, [pc, #112]	; (d790 <gpio_nrfx_manage_callback+0xa8>)
    d71e:	f004 fc13 	bl	11f48 <printk>
    d722:	2125      	movs	r1, #37	; 0x25
    d724:	4816      	ldr	r0, [pc, #88]	; (d780 <gpio_nrfx_manage_callback+0x98>)
    d726:	f004 fea5 	bl	12474 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
    d72a:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    d72c:	b15b      	cbz	r3, d746 <gpio_nrfx_manage_callback+0x5e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    d72e:	2200      	movs	r2, #0
    d730:	429c      	cmp	r4, r3
    d732:	d113      	bne.n	d75c <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
    d734:	6823      	ldr	r3, [r4, #0]
    d736:	b95a      	cbnz	r2, d750 <gpio_nrfx_manage_callback+0x68>
    d738:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
    d73a:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    d73c:	4294      	cmp	r4, r2
    d73e:	d100      	bne.n	d742 <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
    d740:	60ab      	str	r3, [r5, #8]
	parent->next = child;
    d742:	2300      	movs	r3, #0
    d744:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    d746:	b976      	cbnz	r6, d766 <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    d748:	2000      	movs	r0, #0
				     callback, set);
}
    d74a:	bd70      	pop	{r4, r5, r6, pc}
    d74c:	460b      	mov	r3, r1
    d74e:	e7ef      	b.n	d730 <gpio_nrfx_manage_callback+0x48>
    d750:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    d752:	68ab      	ldr	r3, [r5, #8]
    d754:	429c      	cmp	r4, r3
	list->tail = node;
    d756:	bf08      	it	eq
    d758:	60aa      	streq	r2, [r5, #8]
}
    d75a:	e7f2      	b.n	d742 <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    d75c:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    d75e:	461a      	mov	r2, r3
    d760:	2900      	cmp	r1, #0
    d762:	d1f3      	bne.n	d74c <gpio_nrfx_manage_callback+0x64>
			if (!set) {
    d764:	b13e      	cbz	r6, d776 <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
    d766:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    d768:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    d76a:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
    d76c:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    d76e:	2800      	cmp	r0, #0
    d770:	d1ea      	bne.n	d748 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    d772:	60ac      	str	r4, [r5, #8]
}
    d774:	e7e9      	b.n	d74a <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
    d776:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    d77a:	e7e6      	b.n	d74a <gpio_nrfx_manage_callback+0x62>
    d77c:	0001b055 	.word	0x0001b055
    d780:	0001b028 	.word	0x0001b028
    d784:	00017b50 	.word	0x00017b50
    d788:	0001b05e 	.word	0x0001b05e
    d78c:	0001b06d 	.word	0x0001b06d
    d790:	0001b07f 	.word	0x0001b07f

0000d794 <fire_callbacks>:

	return out;
}

static inline void fire_callbacks(struct device *port, u32_t pins)
{
    d794:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct gpio_nrfx_data *data = get_port_data(port);
    d798:	f8d0 800c 	ldr.w	r8, [r0, #12]
{
    d79c:	4606      	mov	r6, r0
	/* Instead of calling the common gpio_fire_callbacks() function,
	 * iterate the list of callbacks locally, to be able to perform
	 * additional masking of the pins and to call handlers only for
	 * the currently enabled callbacks.
	 */
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    d79e:	f8d8 4004 	ldr.w	r4, [r8, #4]
{
    d7a2:	460f      	mov	r7, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    d7a4:	b33c      	cbz	r4, d7f6 <fire_callbacks+0x62>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    d7a6:	6825      	ldr	r5, [r4, #0]
		/* Check currently enabled callbacks (data->int_en) in each
		 * iteration, as some callbacks may get disabled also in any
		 * of the handlers called here.
		 */
		if ((cb->pin_mask & pins) & data->int_en) {
			__ASSERT(cb->handler, "No callback handler!");
    d7a8:	f8df 9054 	ldr.w	r9, [pc, #84]	; d800 <fire_callbacks+0x6c>
    d7ac:	f8df a054 	ldr.w	sl, [pc, #84]	; d804 <fire_callbacks+0x70>
    d7b0:	f8df b054 	ldr.w	fp, [pc, #84]	; d808 <fire_callbacks+0x74>
		if ((cb->pin_mask & pins) & data->int_en) {
    d7b4:	f8d8 3010 	ldr.w	r3, [r8, #16]
    d7b8:	68a2      	ldr	r2, [r4, #8]
    d7ba:	403b      	ands	r3, r7
    d7bc:	4213      	tst	r3, r2
    d7be:	d016      	beq.n	d7ee <fire_callbacks+0x5a>
			__ASSERT(cb->handler, "No callback handler!");
    d7c0:	6863      	ldr	r3, [r4, #4]
    d7c2:	b973      	cbnz	r3, d7e2 <fire_callbacks+0x4e>
    d7c4:	4651      	mov	r1, sl
    d7c6:	f240 13a7 	movw	r3, #423	; 0x1a7
    d7ca:	464a      	mov	r2, r9
    d7cc:	4658      	mov	r0, fp
    d7ce:	f004 fbbb 	bl	11f48 <printk>
    d7d2:	480a      	ldr	r0, [pc, #40]	; (d7fc <fire_callbacks+0x68>)
    d7d4:	f004 fbb8 	bl	11f48 <printk>
    d7d8:	f240 11a7 	movw	r1, #423	; 0x1a7
    d7dc:	4648      	mov	r0, r9
    d7de:	f004 fe49 	bl	12474 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    d7e2:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    d7e6:	4621      	mov	r1, r4
    d7e8:	4630      	mov	r0, r6
    d7ea:	403a      	ands	r2, r7
    d7ec:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    d7ee:	b115      	cbz	r5, d7f6 <fire_callbacks+0x62>
    d7f0:	462c      	mov	r4, r5
    d7f2:	682d      	ldr	r5, [r5, #0]
    d7f4:	e7de      	b.n	d7b4 <fire_callbacks+0x20>
		}
	}
}
    d7f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d7fa:	bf00      	nop
    d7fc:	0001b07f 	.word	0x0001b07f
    d800:	0001b096 	.word	0x0001b096
    d804:	0001b0c2 	.word	0x0001b0c2
    d808:	00017b50 	.word	0x00017b50

0000d80c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(struct device *port)
{
    d80c:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    d80e:	4b09      	ldr	r3, [pc, #36]	; (d834 <gpio_nrfx_init+0x28>)
    d810:	781a      	ldrb	r2, [r3, #0]
    d812:	b96a      	cbnz	r2, d830 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    d814:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    d816:	200d      	movs	r0, #13
		gpio_initialized = true;
    d818:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    d81a:	2105      	movs	r1, #5
    d81c:	f7f6 f9ee 	bl	3bfc <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    d820:	200d      	movs	r0, #13
    d822:	f7f6 f9db 	bl	3bdc <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    d826:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    d82a:	4b03      	ldr	r3, [pc, #12]	; (d838 <gpio_nrfx_init+0x2c>)
    d82c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    d830:	2000      	movs	r0, #0
    d832:	bd08      	pop	{r3, pc}
    d834:	20001f87 	.word	0x20001f87
    d838:	5000d000 	.word	0x5000d000

0000d83c <gpiote_pin_int_cfg>:
{
    d83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    d83e:	6843      	ldr	r3, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
    d840:	68c7      	ldr	r7, [r0, #12]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    d842:	7a18      	ldrb	r0, [r3, #8]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    d844:	2300      	movs	r3, #0
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    d846:	f001 051f 	and.w	r5, r1, #31
{
    d84a:	460e      	mov	r6, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    d84c:	4946      	ldr	r1, [pc, #280]	; (d968 <gpiote_pin_int_cfg+0x12c>)
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    d84e:	ea45 1540 	orr.w	r5, r5, r0, lsl #5
    d852:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
    d856:	b2d2      	uxtb	r2, r2
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    d858:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    d85c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    d860:	f3c0 2005 	ubfx	r0, r0, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    d864:	4285      	cmp	r5, r0
    d866:	d169      	bne.n	d93c <gpiote_pin_int_cfg+0x100>
		    && (intenset & BIT(i))) {
    d868:	fa22 f003 	lsr.w	r0, r2, r3
    d86c:	07c0      	lsls	r0, r0, #31
    d86e:	d565      	bpl.n	d93c <gpiote_pin_int_cfg+0x100>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    d870:	009a      	lsls	r2, r3, #2
    d872:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    d876:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    d87a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    d87e:	f020 0001 	bic.w	r0, r0, #1
    d882:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    d886:	2201      	movs	r2, #1
    d888:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENCLR = mask;
    d88c:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    d890:	4628      	mov	r0, r5
    d892:	2100      	movs	r1, #0
    d894:	f007 ff41 	bl	1571a <nrf_gpio_cfg_sense_set>
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
    d898:	68fb      	ldr	r3, [r7, #12]
    d89a:	40f3      	lsrs	r3, r6
    d89c:	f013 0001 	ands.w	r0, r3, #1
    d8a0:	d04b      	beq.n	d93a <gpiote_pin_int_cfg+0xfe>
    d8a2:	693b      	ldr	r3, [r7, #16]
    d8a4:	40f3      	lsrs	r3, r6
    d8a6:	f013 0001 	ands.w	r0, r3, #1
    d8aa:	d046      	beq.n	d93a <gpiote_pin_int_cfg+0xfe>
		if (data->trig_edge & BIT(pin)) {
    d8ac:	69bb      	ldr	r3, [r7, #24]
    d8ae:	40f3      	lsrs	r3, r6
    d8b0:	f013 0401 	ands.w	r4, r3, #1
    d8b4:	d04c      	beq.n	d950 <gpiote_pin_int_cfg+0x114>
			if (data->double_edge & BIT(pin)) {
    d8b6:	69fb      	ldr	r3, [r7, #28]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    d8b8:	2400      	movs	r4, #0
			if (data->double_edge & BIT(pin)) {
    d8ba:	40f3      	lsrs	r3, r6
    d8bc:	07db      	lsls	r3, r3, #31
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    d8be:	bf4c      	ite	mi
    d8c0:	2603      	movmi	r6, #3
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    d8c2:	6979      	ldrpl	r1, [r7, #20]
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
    d8c4:	4f28      	ldr	r7, [pc, #160]	; (d968 <gpiote_pin_int_cfg+0x12c>)
    d8c6:	bf5f      	itttt	pl
    d8c8:	fa21 f606 	lsrpl.w	r6, r1, r6
    d8cc:	f006 0601 	andpl.w	r6, r6, #1
    d8d0:	f1c6 0602 	rsbpl	r6, r6, #2
    d8d4:	b2f6      	uxtbpl	r6, r6
    d8d6:	f504 73a2 	add.w	r3, r4, #324	; 0x144
    d8da:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
    d8de:	f010 0003 	ands.w	r0, r0, #3
    d8e2:	d12f      	bne.n	d944 <gpiote_pin_int_cfg+0x108>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    d8e4:	00a2      	lsls	r2, r4, #2
    d8e6:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    d8ea:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    d8ee:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    d8f2:	022d      	lsls	r5, r5, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    d8f4:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    d8f8:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    d8fc:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    d900:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    d904:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
    d908:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    d90c:	430e      	orrs	r6, r1
			nrf_gpiote_event_t evt =
    d90e:	f104 0140 	add.w	r1, r4, #64	; 0x40
    d912:	0089      	lsls	r1, r1, #2
    return ((uint32_t)p_reg + event);
    d914:	b289      	uxth	r1, r1
    d916:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    d91a:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    d91e:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    d922:	6008      	str	r0, [r1, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    d924:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    d928:	f041 0101 	orr.w	r1, r1, #1
    d92c:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    d930:	2201      	movs	r2, #1
    d932:	fa02 f404 	lsl.w	r4, r2, r4
    p_reg->INTENSET = mask;
    d936:	f8c7 4304 	str.w	r4, [r7, #772]	; 0x304
}
    d93a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    d93c:	3301      	adds	r3, #1
    d93e:	2b08      	cmp	r3, #8
    d940:	d18a      	bne.n	d858 <gpiote_pin_int_cfg+0x1c>
    d942:	e7a5      	b.n	d890 <gpiote_pin_int_cfg+0x54>
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    d944:	3401      	adds	r4, #1
    d946:	2c08      	cmp	r4, #8
    d948:	d1c5      	bne.n	d8d6 <gpiote_pin_int_cfg+0x9a>
	return -ENODEV;
    d94a:	f06f 0012 	mvn.w	r0, #18
    d94e:	e7f4      	b.n	d93a <gpiote_pin_int_cfg+0xfe>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    d950:	6979      	ldr	r1, [r7, #20]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    d952:	4628      	mov	r0, r5
	if ((BIT(pin) & data->int_active_level) != 0U) {
    d954:	40f1      	lsrs	r1, r6
    d956:	f001 0101 	and.w	r1, r1, #1
    d95a:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    d95e:	b2c9      	uxtb	r1, r1
    d960:	f007 fedb 	bl	1571a <nrf_gpio_cfg_sense_set>
	int res = 0;
    d964:	4620      	mov	r0, r4
    d966:	e7e8      	b.n	d93a <gpiote_pin_int_cfg+0xfe>
    d968:	5000d000 	.word	0x5000d000

0000d96c <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    d96c:	4b2e      	ldr	r3, [pc, #184]	; (da28 <gpio_nrfx_config+0xbc>)
{
    d96e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    d970:	4c2e      	ldr	r4, [pc, #184]	; (da2c <gpio_nrfx_config+0xc0>)
    d972:	4013      	ands	r3, r2
    d974:	42a3      	cmp	r3, r4
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d976:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    d978:	d044      	beq.n	da04 <gpio_nrfx_config+0x98>
    d97a:	d80e      	bhi.n	d99a <gpio_nrfx_config+0x2e>
    d97c:	2b06      	cmp	r3, #6
    d97e:	d043      	beq.n	da08 <gpio_nrfx_config+0x9c>
    d980:	d806      	bhi.n	d990 <gpio_nrfx_config+0x24>
    d982:	2b00      	cmp	r3, #0
    d984:	d040      	beq.n	da08 <gpio_nrfx_config+0x9c>
    d986:	2b02      	cmp	r3, #2
    d988:	d040      	beq.n	da0c <gpio_nrfx_config+0xa0>
    d98a:	f06f 0015 	mvn.w	r0, #21
    d98e:	e037      	b.n	da00 <gpio_nrfx_config+0x94>
    d990:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    d994:	d1f9      	bne.n	d98a <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0S1;
    d996:	2401      	movs	r4, #1
    d998:	e009      	b.n	d9ae <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    d99a:	4c25      	ldr	r4, [pc, #148]	; (da30 <gpio_nrfx_config+0xc4>)
    d99c:	42a3      	cmp	r3, r4
    d99e:	d037      	beq.n	da10 <gpio_nrfx_config+0xa4>
    d9a0:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    d9a4:	d036      	beq.n	da14 <gpio_nrfx_config+0xa8>
    d9a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    d9aa:	d1ee      	bne.n	d98a <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_S0H1;
    d9ac:	2402      	movs	r4, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    d9ae:	06d5      	lsls	r5, r2, #27
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    d9b0:	f482 7380 	eor.w	r3, r2, #256	; 0x100
		pull = NRF_GPIO_PIN_PULLUP;
    d9b4:	bf4c      	ite	mi
    d9b6:	2603      	movmi	r6, #3
		pull = NRF_GPIO_PIN_NOPULL;
    d9b8:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    d9bc:	f3c3 2700 	ubfx	r7, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    d9c0:	0593      	lsls	r3, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
    d9c2:	f3c2 2540 	ubfx	r5, r2, #9, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    d9c6:	d507      	bpl.n	d9d8 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    d9c8:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d9ca:	f8d0 c004 	ldr.w	ip, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    d9ce:	d523      	bpl.n	da18 <gpio_nrfx_config+0xac>
			nrf_gpio_port_out_set(reg, BIT(pin));
    d9d0:	2301      	movs	r3, #1
    d9d2:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    d9d4:	f8cc 3008 	str.w	r3, [ip, #8]
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
    d9d8:	7a03      	ldrb	r3, [r0, #8]
    d9da:	f001 011f 	and.w	r1, r1, #31
    d9de:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    d9e2:	a801      	add	r0, sp, #4
    d9e4:	9101      	str	r1, [sp, #4]
    d9e6:	f7ff fe4d 	bl	d684 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    d9ea:	9a01      	ldr	r2, [sp, #4]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    d9ec:	ea45 0347 	orr.w	r3, r5, r7, lsl #1
    d9f0:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    d9f4:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    d9f8:	3280      	adds	r2, #128	; 0x80
    d9fa:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	return 0;
    d9fe:	2000      	movs	r0, #0
}
    da00:	b003      	add	sp, #12
    da02:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
    da04:	2407      	movs	r4, #7
    da06:	e7d2      	b.n	d9ae <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    da08:	461c      	mov	r4, r3
    da0a:	e7d0      	b.n	d9ae <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
    da0c:	2404      	movs	r4, #4
    da0e:	e7ce      	b.n	d9ae <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
    da10:	2405      	movs	r4, #5
    da12:	e7cc      	b.n	d9ae <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_H0H1;
    da14:	2403      	movs	r4, #3
    da16:	e7ca      	b.n	d9ae <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    da18:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    da1a:	bf42      	ittt	mi
    da1c:	2301      	movmi	r3, #1
    da1e:	408b      	lslmi	r3, r1
    p_reg->OUTCLR = clr_mask;
    da20:	f8cc 300c 	strmi.w	r3, [ip, #12]
}
    da24:	e7d8      	b.n	d9d8 <gpio_nrfx_config+0x6c>
    da26:	bf00      	nop
    da28:	00f00006 	.word	0x00f00006
    da2c:	00100006 	.word	0x00100006
    da30:	00400002 	.word	0x00400002

0000da34 <gpiote_event_handler>:
{
    da34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	u32_t fired_triggers[GPIO_COUNT] = {0};
    da36:	2500      	movs	r5, #0
    da38:	e9cd 5500 	strd	r5, r5, [sp]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    da3c:	4e24      	ldr	r6, [pc, #144]	; (dad0 <gpiote_event_handler+0x9c>)
    da3e:	6834      	ldr	r4, [r6, #0]
	if (port_event) {
    da40:	b144      	cbz	r4, da54 <gpiote_event_handler+0x20>
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p0));
    da42:	4824      	ldr	r0, [pc, #144]	; (dad4 <gpiote_event_handler+0xa0>)
    da44:	f007 fe7c 	bl	15740 <check_level_trigger_pins>
		fired_triggers[0] =
    da48:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p1));
    da4a:	4823      	ldr	r0, [pc, #140]	; (dad8 <gpiote_event_handler+0xa4>)
    da4c:	f007 fe78 	bl	15740 <check_level_trigger_pins>
		fired_triggers[1] =
    da50:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    da52:	6035      	str	r5, [r6, #0]
{
    da54:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    da56:	2601      	movs	r6, #1
    da58:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
    da5a:	4d20      	ldr	r5, [pc, #128]	; (dadc <gpiote_event_handler+0xa8>)
    da5c:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
    da60:	fa06 f102 	lsl.w	r1, r6, r2
    da64:	4219      	tst	r1, r3
    da66:	d01a      	beq.n	da9e <gpiote_event_handler+0x6a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    da68:	0091      	lsls	r1, r2, #2
    da6a:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    da6e:	f501 4151 	add.w	r1, r1, #53504	; 0xd100
    da72:	680b      	ldr	r3, [r1, #0]
    da74:	b19b      	cbz	r3, da9e <gpiote_event_handler+0x6a>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    da76:	f502 73a2 	add.w	r3, r2, #324	; 0x144
    da7a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    da7e:	af02      	add	r7, sp, #8
    da80:	f3c3 3040 	ubfx	r0, r3, #13, #1
    da84:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    da88:	f850 7c08 	ldr.w	r7, [r0, #-8]
    da8c:	f3c3 2304 	ubfx	r3, r3, #8, #5
    da90:	fa06 f303 	lsl.w	r3, r6, r3
    da94:	433b      	orrs	r3, r7
    da96:	f840 3c08 	str.w	r3, [r0, #-8]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    da9a:	f8c1 c000 	str.w	ip, [r1]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    da9e:	3201      	adds	r2, #1
    daa0:	2a08      	cmp	r2, #8
    daa2:	d1db      	bne.n	da5c <gpiote_event_handler+0x28>
	if (fired_triggers[0]) {
    daa4:	9900      	ldr	r1, [sp, #0]
    daa6:	b111      	cbz	r1, daae <gpiote_event_handler+0x7a>
		fire_callbacks(DEVICE_GET(gpio_nrfx_p0), fired_triggers[0]);
    daa8:	480a      	ldr	r0, [pc, #40]	; (dad4 <gpiote_event_handler+0xa0>)
    daaa:	f7ff fe73 	bl	d794 <fire_callbacks>
	if (fired_triggers[1]) {
    daae:	9901      	ldr	r1, [sp, #4]
    dab0:	b111      	cbz	r1, dab8 <gpiote_event_handler+0x84>
		fire_callbacks(DEVICE_GET(gpio_nrfx_p1), fired_triggers[1]);
    dab2:	4809      	ldr	r0, [pc, #36]	; (dad8 <gpiote_event_handler+0xa4>)
    dab4:	f7ff fe6e 	bl	d794 <fire_callbacks>
	if (port_event) {
    dab8:	b144      	cbz	r4, dacc <gpiote_event_handler+0x98>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p0));
    daba:	4806      	ldr	r0, [pc, #24]	; (dad4 <gpiote_event_handler+0xa0>)
    dabc:	f007 fec8 	bl	15850 <cfg_level_pins>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
    dac0:	4805      	ldr	r0, [pc, #20]	; (dad8 <gpiote_event_handler+0xa4>)
}
    dac2:	b003      	add	sp, #12
    dac4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
    dac8:	f007 bec2 	b.w	15850 <cfg_level_pins>
}
    dacc:	b003      	add	sp, #12
    dace:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dad0:	5000d17c 	.word	0x5000d17c
    dad4:	20000390 	.word	0x20000390
    dad8:	200003a0 	.word	0x200003a0
    dadc:	5000d000 	.word	0x5000d000

0000dae0 <vipm_nrf_1_register_callback>:
		    &vipm_nrf_##_idx##_driver_api)

#define VIPM_DEVICE(_idx, _)						\
	IF_ENABLED(CONFIG_IPM_MSG_CH_##_idx##_ENABLE, (VIPM_DEVICE_1(_idx);))

UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
    dae0:	4b01      	ldr	r3, [pc, #4]	; (dae8 <vipm_nrf_1_register_callback+0x8>)
    dae2:	6059      	str	r1, [r3, #4]
    dae4:	645a      	str	r2, [r3, #68]	; 0x44
    dae6:	4770      	bx	lr
    dae8:	20001260 	.word	0x20001260

0000daec <vipm_nrf_0_set_enabled>:
    daec:	b508      	push	{r3, lr}
    daee:	2145      	movs	r1, #69	; 0x45
    daf0:	4802      	ldr	r0, [pc, #8]	; (dafc <vipm_nrf_0_set_enabled+0x10>)
    daf2:	f004 fa29 	bl	11f48 <printk>
    daf6:	f06f 0015 	mvn.w	r0, #21
    dafa:	bd08      	pop	{r3, pc}
    dafc:	0001b0dc 	.word	0x0001b0dc

0000db00 <vipm_nrf_0_register_callback>:
    db00:	2157      	movs	r1, #87	; 0x57
    db02:	4801      	ldr	r0, [pc, #4]	; (db08 <vipm_nrf_0_register_callback+0x8>)
    db04:	f004 ba20 	b.w	11f48 <printk>
    db08:	0001b0fd 	.word	0x0001b0fd

0000db0c <vipm_nrf_1_send>:
    db0c:	b508      	push	{r3, lr}
    db0e:	2145      	movs	r1, #69	; 0x45
    db10:	4802      	ldr	r0, [pc, #8]	; (db1c <vipm_nrf_1_send+0x10>)
    db12:	f004 fa19 	bl	11f48 <printk>
    db16:	f06f 0015 	mvn.w	r0, #21
    db1a:	bd08      	pop	{r3, pc}
    db1c:	0001b134 	.word	0x0001b134

0000db20 <vipm_nrf_init>:
{
    db20:	b538      	push	{r3, r4, r5, lr}
	if (!nrfx_vipm_data.ipm_init) {
    db22:	4d0b      	ldr	r5, [pc, #44]	; (db50 <vipm_nrf_init+0x30>)
    db24:	f895 4080 	ldrb.w	r4, [r5, #128]	; 0x80
    db28:	b97c      	cbnz	r4, db4a <vipm_nrf_init+0x2a>
{
	/* Init IPC */
#if IS_ENABLED(CONFIG_IPM_NRF_SINGLE_INSTANCE)
	nrfx_ipc_init(0, nrfx_ipc_handler, (void *)&nrfx_ipm_data);
#else
	nrfx_ipc_init(0, vipm_dispatcher, (void *)&nrfx_ipm_data);
    db2a:	4a0a      	ldr	r2, [pc, #40]	; (db54 <vipm_nrf_init+0x34>)
    db2c:	490a      	ldr	r1, [pc, #40]	; (db58 <vipm_nrf_init+0x38>)
    db2e:	4620      	mov	r0, r4
    db30:	f000 fa88 	bl	e044 <nrfx_ipc_init>
#endif
	IRQ_CONNECT(DT_INST_IRQN(0),
    db34:	4622      	mov	r2, r4
    db36:	2101      	movs	r1, #1
    db38:	202a      	movs	r0, #42	; 0x2a
    db3a:	f7f6 f85f 	bl	3bfc <z_arm_irq_priority_set>
		    DT_INST_IRQ(0, priority),
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	/* Set up signals and channels */
	nrfx_ipc_config_load(&ipc_cfg);
    db3e:	4807      	ldr	r0, [pc, #28]	; (db5c <vipm_nrf_init+0x3c>)
    db40:	f000 faa8 	bl	e094 <nrfx_ipc_config_load>
		nrfx_vipm_data.ipm_init = true;
    db44:	2301      	movs	r3, #1
    db46:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
}
    db4a:	2000      	movs	r0, #0
    db4c:	bd38      	pop	{r3, r4, r5, pc}
    db4e:	bf00      	nop
    db50:	20001260 	.word	0x20001260
    db54:	20001258 	.word	0x20001258
    db58:	0000db61 	.word	0x0000db61
    db5c:	000173a0 	.word	0x000173a0

0000db60 <vipm_dispatcher>:
{
    db60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    db64:	4605      	mov	r5, r0
		__ASSERT(event_idx < NRFX_IPC_ID_MAX_VALUE,
    db66:	4e17      	ldr	r6, [pc, #92]	; (dbc4 <vipm_dispatcher+0x64>)
    db68:	4f17      	ldr	r7, [pc, #92]	; (dbc8 <vipm_dispatcher+0x68>)
    db6a:	f8df 8068 	ldr.w	r8, [pc, #104]	; dbd4 <vipm_dispatcher+0x74>
	while (event_mask) {
    db6e:	b90d      	cbnz	r5, db74 <vipm_dispatcher+0x14>
}
    db70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    db74:	fa95 f4a5 	rbit	r4, r5
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
    db78:	b314      	cbz	r4, dbc0 <vipm_dispatcher+0x60>
  {
    return 32U;
  }
  return __builtin_clz(value);
    db7a:	fab4 f384 	clz	r3, r4
		__ASSERT(event_idx < NRFX_IPC_ID_MAX_VALUE,
    db7e:	2b0f      	cmp	r3, #15
    db80:	461c      	mov	r4, r3
    db82:	dd0d      	ble.n	dba0 <vipm_dispatcher+0x40>
    db84:	2383      	movs	r3, #131	; 0x83
    db86:	4632      	mov	r2, r6
    db88:	4639      	mov	r1, r7
    db8a:	4640      	mov	r0, r8
    db8c:	f004 f9dc 	bl	11f48 <printk>
    db90:	4621      	mov	r1, r4
    db92:	480e      	ldr	r0, [pc, #56]	; (dbcc <vipm_dispatcher+0x6c>)
    db94:	f004 f9d8 	bl	11f48 <printk>
    db98:	2183      	movs	r1, #131	; 0x83
    db9a:	4630      	mov	r0, r6
    db9c:	f004 fc6a 	bl	12474 <assert_post_action>
		event_mask &= ~BIT(event_idx);
    dba0:	2301      	movs	r3, #1
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
    dba2:	480b      	ldr	r0, [pc, #44]	; (dbd0 <vipm_dispatcher+0x70>)
		event_mask &= ~BIT(event_idx);
    dba4:	40a3      	lsls	r3, r4
    dba6:	ea25 0503 	bic.w	r5, r5, r3
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
    dbaa:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
    dbae:	2b00      	cmp	r3, #0
    dbb0:	d0dd      	beq.n	db6e <vipm_dispatcher+0xe>
			nrfx_vipm_data.callback[event_idx]
    dbb2:	2200      	movs	r2, #0
    dbb4:	3410      	adds	r4, #16
    dbb6:	4611      	mov	r1, r2
    dbb8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    dbbc:	4798      	blx	r3
    dbbe:	e7d6      	b.n	db6e <vipm_dispatcher+0xe>
    return 32U;
    dbc0:	2420      	movs	r4, #32
    dbc2:	e7df      	b.n	db84 <vipm_dispatcher+0x24>
    dbc4:	0001b155 	.word	0x0001b155
    dbc8:	0001b183 	.word	0x0001b183
    dbcc:	0001b192 	.word	0x0001b192
    dbd0:	20001260 	.word	0x20001260
    dbd4:	00017b50 	.word	0x00017b50

0000dbd8 <vipm_nrf_0_send>:
UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
    dbd8:	2a10      	cmp	r2, #16
    dbda:	b508      	push	{r3, lr}
    dbdc:	d810      	bhi.n	dc00 <vipm_nrf_0_send+0x28>
    dbde:	b11a      	cbz	r2, dbe8 <vipm_nrf_0_send+0x10>
    dbe0:	2157      	movs	r1, #87	; 0x57
    dbe2:	4809      	ldr	r0, [pc, #36]	; (dc08 <vipm_nrf_0_send+0x30>)
    dbe4:	f004 f9b0 	bl	11f48 <printk>
    dbe8:	9b02      	ldr	r3, [sp, #8]
    dbea:	2b00      	cmp	r3, #0
    dbec:	dd03      	ble.n	dbf6 <vipm_nrf_0_send+0x1e>
    dbee:	2157      	movs	r1, #87	; 0x57
    dbf0:	4806      	ldr	r0, [pc, #24]	; (dc0c <vipm_nrf_0_send+0x34>)
    dbf2:	f004 f9a9 	bl	11f48 <printk>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ipc_task_trigger(NRF_IPC_Type * p_reg, nrf_ipc_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dbf6:	2201      	movs	r2, #1
    dbf8:	2000      	movs	r0, #0
    dbfa:	4b05      	ldr	r3, [pc, #20]	; (dc10 <vipm_nrf_0_send+0x38>)
    dbfc:	601a      	str	r2, [r3, #0]
    dbfe:	bd08      	pop	{r3, pc}
    dc00:	f06f 0015 	mvn.w	r0, #21
    dc04:	e7fb      	b.n	dbfe <vipm_nrf_0_send+0x26>
    dc06:	bf00      	nop
    dc08:	0001b1aa 	.word	0x0001b1aa
    dc0c:	0001b1e3 	.word	0x0001b1e3
    dc10:	5002a000 	.word	0x5002a000

0000dc14 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    dc14:	4b02      	ldr	r3, [pc, #8]	; (dc20 <flash_nrf_pages_layout+0xc>)
    dc16:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    dc18:	2301      	movs	r3, #1
    dc1a:	6013      	str	r3, [r2, #0]
}
    dc1c:	4770      	bx	lr
    dc1e:	bf00      	nop
    dc20:	200012e8 	.word	0x200012e8

0000dc24 <flash_nrf_erase>:
{
    dc24:	b570      	push	{r4, r5, r6, lr}
    dc26:	460d      	mov	r5, r1
    dc28:	4614      	mov	r4, r2
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
    dc2a:	f008 f877 	bl	15d1c <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
    dc2e:	4621      	mov	r1, r4
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
    dc30:	4606      	mov	r6, r0
	if (is_regular_addr_valid(addr, size)) {
    dc32:	4628      	mov	r0, r5
    dc34:	f007 fe54 	bl	158e0 <is_regular_addr_valid>
    dc38:	b300      	cbz	r0, dc7c <flash_nrf_erase+0x58>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    dc3a:	fbb5 f3f6 	udiv	r3, r5, r6
    dc3e:	fb06 5313 	mls	r3, r6, r3, r5
    dc42:	b9db      	cbnz	r3, dc7c <flash_nrf_erase+0x58>
    dc44:	fbb4 f3f6 	udiv	r3, r4, r6
    dc48:	fb06 4013 	mls	r0, r6, r3, r4
    dc4c:	b9b0      	cbnz	r0, dc7c <flash_nrf_erase+0x58>
		if (!n_pages) {
    dc4e:	42a6      	cmp	r6, r4
    dc50:	d813      	bhi.n	dc7a <flash_nrf_erase+0x56>
	return z_impl_k_sem_take(sem, timeout);
    dc52:	f04f 32ff 	mov.w	r2, #4294967295
    dc56:	f04f 33ff 	mov.w	r3, #4294967295
    dc5a:	480a      	ldr	r0, [pc, #40]	; (dc84 <flash_nrf_erase+0x60>)
    dc5c:	f002 ff34 	bl	10ac8 <z_impl_k_sem_take>

#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

static int erase_op(void *context)
{
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
    dc60:	f008 f85c 	bl	15d1c <nrfx_nvmc_flash_page_size_get>
    dc64:	4606      	mov	r6, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    dc66:	4628      	mov	r0, r5
    dc68:	f000 fad6 	bl	e218 <nrfx_nvmc_page_erase>
				break;
			}
		}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

	} while (e_ctx->len > 0);
    dc6c:	1ba4      	subs	r4, r4, r6
    dc6e:	4435      	add	r5, r6
    dc70:	d1f9      	bne.n	dc66 <flash_nrf_erase+0x42>
	z_impl_k_sem_give(sem);
    dc72:	4804      	ldr	r0, [pc, #16]	; (dc84 <flash_nrf_erase+0x60>)
    dc74:	f002 fee4 	bl	10a40 <z_impl_k_sem_give>
	return ret;
    dc78:	4620      	mov	r0, r4
}
    dc7a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    dc7c:	f06f 0015 	mvn.w	r0, #21
    dc80:	e7fb      	b.n	dc7a <flash_nrf_erase+0x56>
    dc82:	bf00      	nop
    dc84:	200012f0 	.word	0x200012f0

0000dc88 <nrf_flash_init>:
{
    dc88:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    dc8a:	2201      	movs	r2, #1
    dc8c:	4806      	ldr	r0, [pc, #24]	; (dca8 <nrf_flash_init+0x20>)
    dc8e:	4611      	mov	r1, r2
    dc90:	f008 fce8 	bl	16664 <z_impl_k_sem_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    dc94:	f008 f845 	bl	15d22 <nrfx_nvmc_flash_page_count_get>
    dc98:	4c04      	ldr	r4, [pc, #16]	; (dcac <nrf_flash_init+0x24>)
    dc9a:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    dc9c:	f008 f83e 	bl	15d1c <nrfx_nvmc_flash_page_size_get>
    dca0:	6060      	str	r0, [r4, #4]
}
    dca2:	2000      	movs	r0, #0
    dca4:	bd10      	pop	{r4, pc}
    dca6:	bf00      	nop
    dca8:	200012f0 	.word	0x200012f0
    dcac:	200012e8 	.word	0x200012e8

0000dcb0 <flash_nrf_write>:
{
    dcb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dcb2:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
    dcb4:	4619      	mov	r1, r3
    dcb6:	4630      	mov	r0, r6
{
    dcb8:	4617      	mov	r7, r2
    dcba:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    dcbc:	f007 fe10 	bl	158e0 <is_regular_addr_valid>
    dcc0:	b308      	cbz	r0, dd06 <flash_nrf_write+0x56>
	return (data & 0x3) ? false : true;
    dcc2:	ea46 0504 	orr.w	r5, r6, r4
	if (!is_aligned_32(addr) || (len % sizeof(u32_t))) {
    dcc6:	f015 0503 	ands.w	r5, r5, #3
    dcca:	d11c      	bne.n	dd06 <flash_nrf_write+0x56>
	if (!len) {
    dccc:	b1f4      	cbz	r4, dd0c <flash_nrf_write+0x5c>
	return z_impl_k_sem_take(sem, timeout);
    dcce:	f04f 32ff 	mov.w	r2, #4294967295
    dcd2:	f04f 33ff 	mov.w	r3, #4294967295
    dcd6:	480e      	ldr	r0, [pc, #56]	; (dd10 <flash_nrf_write+0x60>)
    dcd8:	f002 fef6 	bl	10ac8 <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
    dcdc:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(u32_t)) {
    dce0:	42a5      	cmp	r5, r4
    dce2:	eb06 0005 	add.w	r0, r6, r5
    dce6:	d109      	bne.n	dcfc <flash_nrf_write+0x4c>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    dce8:	4a0a      	ldr	r2, [pc, #40]	; (dd14 <flash_nrf_write+0x64>)
    dcea:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    dcee:	07db      	lsls	r3, r3, #31
    dcf0:	d5fb      	bpl.n	dcea <flash_nrf_write+0x3a>
	z_impl_k_sem_give(sem);
    dcf2:	4807      	ldr	r0, [pc, #28]	; (dd10 <flash_nrf_write+0x60>)
    dcf4:	f002 fea4 	bl	10a40 <z_impl_k_sem_give>
    dcf8:	2000      	movs	r0, #0
}
    dcfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nrfx_nvmc_word_write(w_ctx->flash_addr,
    dcfc:	5979      	ldr	r1, [r7, r5]
    dcfe:	f000 fac3 	bl	e288 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
    dd02:	3504      	adds	r5, #4
}
    dd04:	e7ec      	b.n	dce0 <flash_nrf_write+0x30>
		return -EINVAL;
    dd06:	f06f 0015 	mvn.w	r0, #21
    dd0a:	e7f6      	b.n	dcfa <flash_nrf_write+0x4a>
		return 0;
    dd0c:	4620      	mov	r0, r4
    dd0e:	e7f4      	b.n	dcfa <flash_nrf_write+0x4a>
    dd10:	200012f0 	.word	0x200012f0
    dd14:	50039000 	.word	0x50039000

0000dd18 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
    dd18:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    dd1a:	794b      	ldrb	r3, [r1, #5]
    dd1c:	2b01      	cmp	r3, #1
    dd1e:	d02b      	beq.n	dd78 <uarte_nrfx_configure+0x60>
    dd20:	2b03      	cmp	r3, #3
    dd22:	d126      	bne.n	dd72 <uarte_nrfx_configure+0x5a>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    dd24:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    dd26:	798b      	ldrb	r3, [r1, #6]
    dd28:	2b03      	cmp	r3, #3
    dd2a:	d122      	bne.n	dd72 <uarte_nrfx_configure+0x5a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    dd2c:	79cd      	ldrb	r5, [r1, #7]
    dd2e:	b125      	cbz	r5, dd3a <uarte_nrfx_configure+0x22>
    dd30:	2d01      	cmp	r5, #1
    dd32:	d11e      	bne.n	dd72 <uarte_nrfx_configure+0x5a>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    dd34:	6843      	ldr	r3, [r0, #4]
    dd36:	791b      	ldrb	r3, [r3, #4]
    dd38:	b1db      	cbz	r3, dd72 <uarte_nrfx_configure+0x5a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    dd3a:	790a      	ldrb	r2, [r1, #4]
    dd3c:	2a01      	cmp	r2, #1
    dd3e:	d01d      	beq.n	dd7c <uarte_nrfx_configure+0x64>
    dd40:	2a02      	cmp	r2, #2
    dd42:	d01f      	beq.n	dd84 <uarte_nrfx_configure+0x6c>
    dd44:	b9aa      	cbnz	r2, dd72 <uarte_nrfx_configure+0x5a>
    dd46:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    dd48:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    dd4a:	6846      	ldr	r6, [r0, #4]
	switch (baudrate) {
    dd4c:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    dd50:	6836      	ldr	r6, [r6, #0]
	switch (baudrate) {
    dd52:	d06d      	beq.n	de30 <uarte_nrfx_configure+0x118>
    dd54:	d833      	bhi.n	ddbe <uarte_nrfx_configure+0xa6>
    dd56:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    dd5a:	d06c      	beq.n	de36 <uarte_nrfx_configure+0x11e>
    dd5c:	d81c      	bhi.n	dd98 <uarte_nrfx_configure+0x80>
    dd5e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    dd62:	d06a      	beq.n	de3a <uarte_nrfx_configure+0x122>
    dd64:	d810      	bhi.n	dd88 <uarte_nrfx_configure+0x70>
    dd66:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    dd6a:	d069      	beq.n	de40 <uarte_nrfx_configure+0x128>
    dd6c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    dd70:	d069      	beq.n	de46 <uarte_nrfx_configure+0x12e>
    dd72:	f06f 0022 	mvn.w	r0, #34	; 0x22
    dd76:	e05a      	b.n	de2e <uarte_nrfx_configure+0x116>
	switch (cfg->stop_bits) {
    dd78:	2700      	movs	r7, #0
    dd7a:	e7d4      	b.n	dd26 <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    dd7c:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    dd80:	220e      	movs	r2, #14
    dd82:	e7e1      	b.n	dd48 <uarte_nrfx_configure+0x30>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    dd84:	2400      	movs	r4, #0
    dd86:	e7fb      	b.n	dd80 <uarte_nrfx_configure+0x68>
	switch (baudrate) {
    dd88:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    dd8c:	d05e      	beq.n	de4c <uarte_nrfx_configure+0x134>
    dd8e:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    dd92:	d1ee      	bne.n	dd72 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    dd94:	4b38      	ldr	r3, [pc, #224]	; (de78 <uarte_nrfx_configure+0x160>)
    dd96:	e03e      	b.n	de16 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    dd98:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    dd9c:	d059      	beq.n	de52 <uarte_nrfx_configure+0x13a>
    dd9e:	d807      	bhi.n	ddb0 <uarte_nrfx_configure+0x98>
    dda0:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    dda4:	d057      	beq.n	de56 <uarte_nrfx_configure+0x13e>
    dda6:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    ddaa:	d1e2      	bne.n	dd72 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    ddac:	4b33      	ldr	r3, [pc, #204]	; (de7c <uarte_nrfx_configure+0x164>)
    ddae:	e032      	b.n	de16 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    ddb0:	f647 2c12 	movw	ip, #31250	; 0x7a12
    ddb4:	4563      	cmp	r3, ip
    ddb6:	d1dc      	bne.n	dd72 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    ddb8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    ddbc:	e02b      	b.n	de16 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    ddbe:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    ddc2:	d04a      	beq.n	de5a <uarte_nrfx_configure+0x142>
    ddc4:	d813      	bhi.n	ddee <uarte_nrfx_configure+0xd6>
    ddc6:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    ddca:	d049      	beq.n	de60 <uarte_nrfx_configure+0x148>
    ddcc:	d809      	bhi.n	dde2 <uarte_nrfx_configure+0xca>
    ddce:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
    ddd2:	4563      	cmp	r3, ip
    ddd4:	d046      	beq.n	de64 <uarte_nrfx_configure+0x14c>
    ddd6:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    ddda:	d1ca      	bne.n	dd72 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    dddc:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    dde0:	e019      	b.n	de16 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    dde2:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    dde6:	d1c4      	bne.n	dd72 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    dde8:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    ddec:	e013      	b.n	de16 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    ddee:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    ddf2:	d03a      	beq.n	de6a <uarte_nrfx_configure+0x152>
    ddf4:	d809      	bhi.n	de0a <uarte_nrfx_configure+0xf2>
    ddf6:	f8df c098 	ldr.w	ip, [pc, #152]	; de90 <uarte_nrfx_configure+0x178>
    ddfa:	4563      	cmp	r3, ip
    ddfc:	d038      	beq.n	de70 <uarte_nrfx_configure+0x158>
    ddfe:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    de02:	d1b6      	bne.n	dd72 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    de04:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    de08:	e005      	b.n	de16 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    de0a:	f8df c088 	ldr.w	ip, [pc, #136]	; de94 <uarte_nrfx_configure+0x17c>
    de0e:	4563      	cmp	r3, ip
    de10:	d1af      	bne.n	dd72 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    de12:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    de16:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
    de1a:	432c      	orrs	r4, r5
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    de1c:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->stop
    de1e:	433a      	orrs	r2, r7
                    | (uint32_t)p_cfg->hwfc;
    de20:	4322      	orrs	r2, r4
    de22:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    de24:	f8c6 256c 	str.w	r2, [r6, #1388]	; 0x56c
    de28:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    de2c:	2000      	movs	r0, #0
}
    de2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    de30:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    de34:	e7ef      	b.n	de16 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    de36:	4b12      	ldr	r3, [pc, #72]	; (de80 <uarte_nrfx_configure+0x168>)
    de38:	e7ed      	b.n	de16 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    de3a:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    de3e:	e7ea      	b.n	de16 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = 0x00014000;
    de40:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    de44:	e7e7      	b.n	de16 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    de46:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    de4a:	e7e4      	b.n	de16 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    de4c:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    de50:	e7e1      	b.n	de16 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    de52:	4b0c      	ldr	r3, [pc, #48]	; (de84 <uarte_nrfx_configure+0x16c>)
    de54:	e7df      	b.n	de16 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    de56:	4b0c      	ldr	r3, [pc, #48]	; (de88 <uarte_nrfx_configure+0x170>)
    de58:	e7dd      	b.n	de16 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    de5a:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    de5e:	e7da      	b.n	de16 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    de60:	4b0a      	ldr	r3, [pc, #40]	; (de8c <uarte_nrfx_configure+0x174>)
    de62:	e7d8      	b.n	de16 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    de64:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    de68:	e7d5      	b.n	de16 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    de6a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    de6e:	e7d2      	b.n	de16 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    de70:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    de74:	e7cf      	b.n	de16 <uarte_nrfx_configure+0xfe>
    de76:	bf00      	nop
    de78:	0013b000 	.word	0x0013b000
    de7c:	004ea000 	.word	0x004ea000
    de80:	00275000 	.word	0x00275000
    de84:	0075c000 	.word	0x0075c000
    de88:	003af000 	.word	0x003af000
    de8c:	013a9000 	.word	0x013a9000
    de90:	0003d090 	.word	0x0003d090
    de94:	000f4240 	.word	0x000f4240

0000de98 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    de98:	6802      	ldr	r2, [r0, #0]
{
    de9a:	b510      	push	{r4, lr}
    switch (port)
    de9c:	0953      	lsrs	r3, r2, #5
{
    de9e:	4604      	mov	r4, r0
    switch (port)
    dea0:	d01e      	beq.n	dee0 <nrf_gpio_pin_port_decode+0x48>
    dea2:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    dea4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dea8:	bf18      	it	ne
    deaa:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    deac:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    deb0:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    deb2:	07db      	lsls	r3, r3, #31
    deb4:	d40b      	bmi.n	dece <nrf_gpio_pin_port_decode+0x36>
    deb6:	490c      	ldr	r1, [pc, #48]	; (dee8 <nrf_gpio_pin_port_decode+0x50>)
    deb8:	480c      	ldr	r0, [pc, #48]	; (deec <nrf_gpio_pin_port_decode+0x54>)
    deba:	f240 230d 	movw	r3, #525	; 0x20d
    debe:	4a0c      	ldr	r2, [pc, #48]	; (def0 <nrf_gpio_pin_port_decode+0x58>)
    dec0:	f004 f842 	bl	11f48 <printk>
    dec4:	f240 210d 	movw	r1, #525	; 0x20d
    dec8:	4809      	ldr	r0, [pc, #36]	; (def0 <nrf_gpio_pin_port_decode+0x58>)
    deca:	f004 fad3 	bl	12474 <assert_post_action>
    if (*p_pin < P0_PIN_NUM)
    dece:	6823      	ldr	r3, [r4, #0]
    ded0:	2b1f      	cmp	r3, #31
        *p_pin = *p_pin & 0x1F;
    ded2:	bf85      	ittet	hi
    ded4:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
    ded8:	4806      	ldrhi	r0, [pc, #24]	; (def4 <nrf_gpio_pin_port_decode+0x5c>)
        return NRF_P0;
    deda:	4807      	ldrls	r0, [pc, #28]	; (def8 <nrf_gpio_pin_port_decode+0x60>)
        *p_pin = *p_pin & 0x1F;
    dedc:	6023      	strhi	r3, [r4, #0]
}
    dede:	bd10      	pop	{r4, pc}
    switch (port)
    dee0:	f04f 33ff 	mov.w	r3, #4294967295
    dee4:	e7e2      	b.n	deac <nrf_gpio_pin_port_decode+0x14>
    dee6:	bf00      	nop
    dee8:	0001b005 	.word	0x0001b005
    deec:	00017b50 	.word	0x00017b50
    def0:	0001afd2 	.word	0x0001afd2
    def4:	50842800 	.word	0x50842800
    def8:	50842500 	.word	0x50842500

0000defc <k_sys_fatal_error_handler>:
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
    defc:	4803      	ldr	r0, [pc, #12]	; (df0c <k_sys_fatal_error_handler+0x10>)
    defe:	2145      	movs	r1, #69	; 0x45
{
    df00:	b508      	push	{r3, lr}
	LOG_ERR("Resetting system");
    df02:	f004 f821 	bl	11f48 <printk>
	sys_arch_reboot(0);
    df06:	2000      	movs	r0, #0
    df08:	f7f6 f98c 	bl	4224 <sys_arch_reboot>

	CODE_UNREACHABLE;
    df0c:	0001b236 	.word	0x0001b236

0000df10 <nrf53_errata_42>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA_APPLICATION) || defined (DEVELOP_IN_NRF5340_APPLICATION)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    df10:	4b05      	ldr	r3, [pc, #20]	; (df28 <nrf53_errata_42+0x18>)
    df12:	6818      	ldr	r0, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    df14:	3b04      	subs	r3, #4
        #endif
        #if defined (NRF5340_XXAA_APPLICATION) || defined (DEVELOP_IN_NRF5340_APPLICATION)
            if (var1 == 0x07)
    df16:	681b      	ldr	r3, [r3, #0]
    df18:	2b07      	cmp	r3, #7
    df1a:	d103      	bne.n	df24 <nrf53_errata_42+0x14>
            {
                switch(var2)
    df1c:	1e83      	subs	r3, r0, #2
    df1e:	4258      	negs	r0, r3
    df20:	4158      	adcs	r0, r3
    df22:	4770      	bx	lr
                    case 0x03ul:
                        return false;
                }
            }
        #endif
        return false;
    df24:	2000      	movs	r0, #0
    #endif
}
    df26:	4770      	bx	lr
    df28:	00ff0134 	.word	0x00ff0134

0000df2c <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
    df2c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    df30:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
    df34:	4b03      	ldr	r3, [pc, #12]	; (df44 <SystemCoreClockUpdate+0x18>)
    df36:	f002 0201 	and.w	r2, r2, #1
    df3a:	40d3      	lsrs	r3, r2
    df3c:	4a02      	ldr	r2, [pc, #8]	; (df48 <SystemCoreClockUpdate+0x1c>)
    df3e:	6013      	str	r3, [r2, #0]
#endif
}
    df40:	4770      	bx	lr
    df42:	bf00      	nop
    df44:	07a12000 	.word	0x07a12000
    df48:	200002b0 	.word	0x200002b0

0000df4c <SystemInit>:

void SystemInit(void)
{
    df4c:	b508      	push	{r3, lr}
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    df4e:	f7ff ffdf 	bl	df10 <nrf53_errata_42>
    df52:	b148      	cbz	r0, df68 <SystemInit+0x1c>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    df54:	4b33      	ldr	r3, [pc, #204]	; (e024 <SystemInit+0xd8>)
    df56:	681a      	ldr	r2, [r3, #0]
    df58:	b932      	cbnz	r2, df68 <SystemInit+0x1c>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    df5a:	210d      	movs	r1, #13
    df5c:	6019      	str	r1, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    df5e:	2101      	movs	r1, #1
    df60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    df64:	6019      	str	r1, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    df66:	601a      	str	r2, [r3, #0]
{
    df68:	2200      	movs	r2, #0
    df6a:	00d3      	lsls	r3, r2, #3
    df6c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    df70:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    df74:	3101      	adds	r1, #1
    df76:	d007      	beq.n	df88 <SystemInit+0x3c>
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    df78:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    df7c:	3201      	adds	r2, #1
            *NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    df7e:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    df82:	2a20      	cmp	r2, #32
            *NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    df84:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    df86:	d1f0      	bne.n	df6a <SystemInit+0x1e>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    df88:	f7ff ffc2 	bl	df10 <nrf53_errata_42>
    df8c:	2800      	cmp	r0, #0
    df8e:	d142      	bne.n	e016 <SystemInit+0xca>
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    df90:	f7ff ffbe 	bl	df10 <nrf53_errata_42>
    df94:	b138      	cbz	r0, dfa6 <SystemInit+0x5a>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    df96:	4b24      	ldr	r3, [pc, #144]	; (e028 <SystemInit+0xdc>)
    df98:	4a24      	ldr	r2, [pc, #144]	; (e02c <SystemInit+0xe0>)
    df9a:	601a      	str	r2, [r3, #0]
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    df9c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    dfa0:	2201      	movs	r2, #1
    dfa2:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
    dfa6:	f7ff ffb3 	bl	df10 <nrf53_errata_42>
    dfaa:	b110      	cbz	r0, dfb2 <SystemInit+0x66>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    dfac:	2200      	movs	r2, #0
    dfae:	4b20      	ldr	r3, [pc, #128]	; (e030 <SystemInit+0xe4>)
    dfb0:	601a      	str	r2, [r3, #0]
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    dfb2:	f7ff ffad 	bl	df10 <nrf53_errata_42>
    dfb6:	b150      	cbz	r0, dfce <SystemInit+0x82>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    dfb8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    dfbc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    dfc0:	07d1      	lsls	r1, r2, #31
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    dfc2:	bf42      	ittt	mi
    dfc4:	2200      	movmi	r2, #0
    dfc6:	f8c3 2114 	strmi.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    dfca:	f8c3 2118 	strmi.w	r2, [r3, #280]	; 0x118
        return false;
    #else
        #if defined (NRF5340_XXAA_APPLICATION) || defined (DEVELOP_IN_NRF5340_APPLICATION)\
         || defined (NRF5340_XXAA_NETWORK) || defined (DEVELOP_IN_NRF5340_NETWORK)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    dfce:	4b19      	ldr	r3, [pc, #100]	; (e034 <SystemInit+0xe8>)
                uint32_t var2 = *(uint32_t *)0x01FF0134ul;
            #endif
        #endif
        #if defined (NRF5340_XXAA_APPLICATION) || defined (DEVELOP_IN_NRF5340_APPLICATION)\
         || defined (NRF5340_XXAA_NETWORK) || defined (DEVELOP_IN_NRF5340_NETWORK)
            if (var1 == 0x07)
    dfd0:	681b      	ldr	r3, [r3, #0]
    dfd2:	2b07      	cmp	r3, #7
    dfd4:	d10e      	bne.n	dff4 <SystemInit+0xa8>
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    dfd6:	4b18      	ldr	r3, [pc, #96]	; (e038 <SystemInit+0xec>)
            {
                switch(var2)
    dfd8:	681b      	ldr	r3, [r3, #0]
    dfda:	3b02      	subs	r3, #2
    dfdc:	2b01      	cmp	r3, #1
    dfde:	d809      	bhi.n	dff4 <SystemInit+0xa8>

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    dfe0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    dfe4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    dfe8:	07d2      	lsls	r2, r2, #31
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    dfea:	bf44      	itt	mi
    dfec:	f06f 0201 	mvnmi.w	r2, #1
    dff0:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    dff4:	f7ff ff8c 	bl	df10 <nrf53_errata_42>
    dff8:	b110      	cbz	r0, e000 <SystemInit+0xb4>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    dffa:	2265      	movs	r2, #101	; 0x65
    dffc:	4b0f      	ldr	r3, [pc, #60]	; (e03c <SystemInit+0xf0>)
    dffe:	601a      	str	r2, [r3, #0]

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    e000:	4a0f      	ldr	r2, [pc, #60]	; (e040 <SystemInit+0xf4>)
    e002:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    e006:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    e00a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
}
    e00e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SystemCoreClockUpdate();
    e012:	f7ff bf8b 	b.w	df2c <SystemCoreClockUpdate>
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    e016:	2229      	movs	r2, #41	; 0x29
    e018:	4b08      	ldr	r3, [pc, #32]	; (e03c <SystemInit+0xf0>)
    e01a:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    e01c:	2203      	movs	r2, #3
    e01e:	631a      	str	r2, [r3, #48]	; 0x30
    e020:	e7b6      	b.n	df90 <SystemInit+0x44>
    e022:	bf00      	nop
    e024:	50004a20 	.word	0x50004a20
    e028:	50039530 	.word	0x50039530
    e02c:	beef0044 	.word	0xbeef0044
    e030:	5003254c 	.word	0x5003254c
    e034:	00ff0130 	.word	0x00ff0130
    e038:	00ff0134 	.word	0x00ff0134
    e03c:	5000470c 	.word	0x5000470c
    e040:	e000ed00 	.word	0xe000ed00

0000e044 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
    e044:	b570      	push	{r4, r5, r6, lr}
    e046:	4616      	mov	r6, r2
    NRFX_ASSERT(handler);
    e048:	460d      	mov	r5, r1
    e04a:	b949      	cbnz	r1, e060 <nrfx_ipc_init+0x1c>
    e04c:	490b      	ldr	r1, [pc, #44]	; (e07c <nrfx_ipc_init+0x38>)
    e04e:	480c      	ldr	r0, [pc, #48]	; (e080 <nrfx_ipc_init+0x3c>)
    e050:	2332      	movs	r3, #50	; 0x32
    e052:	4a0c      	ldr	r2, [pc, #48]	; (e084 <nrfx_ipc_init+0x40>)
    e054:	f003 ff78 	bl	11f48 <printk>
    e058:	2132      	movs	r1, #50	; 0x32
    e05a:	480a      	ldr	r0, [pc, #40]	; (e084 <nrfx_ipc_init+0x40>)
    e05c:	f004 fa0a 	bl	12474 <assert_post_action>
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    e060:	4c09      	ldr	r4, [pc, #36]	; (e088 <nrfx_ipc_init+0x44>)
    e062:	7923      	ldrb	r3, [r4, #4]
    e064:	b943      	cbnz	r3, e078 <nrfx_ipc_init+0x34>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
    e066:	202a      	movs	r0, #42	; 0x2a
    e068:	f7f5 fdb8 	bl	3bdc <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    e06c:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
    e06e:	4807      	ldr	r0, [pc, #28]	; (e08c <nrfx_ipc_init+0x48>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    e070:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
    e072:	6025      	str	r5, [r4, #0]
    m_ipc_cb.p_context = p_context;
    e074:	60a6      	str	r6, [r4, #8]
}
    e076:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
    e078:	4805      	ldr	r0, [pc, #20]	; (e090 <nrfx_ipc_init+0x4c>)
    e07a:	e7fc      	b.n	e076 <nrfx_ipc_init+0x32>
    e07c:	0001b0c6 	.word	0x0001b0c6
    e080:	00017b50 	.word	0x00017b50
    e084:	0001b258 	.word	0x0001b258
    e088:	20001308 	.word	0x20001308
    e08c:	0bad0000 	.word	0x0bad0000
    e090:	0bad000c 	.word	0x0bad000c

0000e094 <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
    e094:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
    e096:	4604      	mov	r4, r0
    e098:	b948      	cbnz	r0, e0ae <nrfx_ipc_config_load+0x1a>
    e09a:	491a      	ldr	r1, [pc, #104]	; (e104 <nrfx_ipc_config_load+0x70>)
    e09c:	481a      	ldr	r0, [pc, #104]	; (e108 <nrfx_ipc_config_load+0x74>)
    e09e:	2344      	movs	r3, #68	; 0x44
    e0a0:	4a1a      	ldr	r2, [pc, #104]	; (e10c <nrfx_ipc_config_load+0x78>)
    e0a2:	f003 ff51 	bl	11f48 <printk>
    e0a6:	2144      	movs	r1, #68	; 0x44
    e0a8:	4818      	ldr	r0, [pc, #96]	; (e10c <nrfx_ipc_config_load+0x78>)
    e0aa:	f004 f9e3 	bl	12474 <assert_post_action>
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    e0ae:	4b18      	ldr	r3, [pc, #96]	; (e110 <nrfx_ipc_config_load+0x7c>)
    e0b0:	791b      	ldrb	r3, [r3, #4]
    e0b2:	2b01      	cmp	r3, #1
    e0b4:	d009      	beq.n	e0ca <nrfx_ipc_config_load+0x36>
    e0b6:	4917      	ldr	r1, [pc, #92]	; (e114 <nrfx_ipc_config_load+0x80>)
    e0b8:	4813      	ldr	r0, [pc, #76]	; (e108 <nrfx_ipc_config_load+0x74>)
    e0ba:	2345      	movs	r3, #69	; 0x45
    e0bc:	4a13      	ldr	r2, [pc, #76]	; (e10c <nrfx_ipc_config_load+0x78>)
    e0be:	f003 ff43 	bl	11f48 <printk>
    e0c2:	2145      	movs	r1, #69	; 0x45
    e0c4:	4811      	ldr	r0, [pc, #68]	; (e10c <nrfx_ipc_config_load+0x78>)
    e0c6:	f004 f9d5 	bl	12474 <assert_post_action>
{
    e0ca:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
    e0cc:	4a12      	ldr	r2, [pc, #72]	; (e118 <nrfx_ipc_config_load+0x84>)

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
    e0ce:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
    e0d2:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
    e0d6:	3301      	adds	r3, #1
    e0d8:	2b10      	cmp	r3, #16
    e0da:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
    e0de:	d1f6      	bne.n	e0ce <nrfx_ipc_config_load+0x3a>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
    e0e0:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
    e0e2:	4a0d      	ldr	r2, [pc, #52]	; (e118 <nrfx_ipc_config_load+0x84>)
    e0e4:	f104 0140 	add.w	r1, r4, #64	; 0x40
    e0e8:	f503 70b2 	add.w	r0, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
    e0ec:	f851 5b04 	ldr.w	r5, [r1], #4
    for (i = 0; i < IPC_CONF_NUM; ++i)
    e0f0:	3301      	adds	r3, #1
    e0f2:	2b10      	cmp	r3, #16
    e0f4:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    e0f8:	d1f6      	bne.n	e0e8 <nrfx_ipc_config_load+0x54>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
    e0fa:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    p_reg->INTENSET = mask;
    e0fe:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    e102:	bd38      	pop	{r3, r4, r5, pc}
    e104:	0001b293 	.word	0x0001b293
    e108:	00017b50 	.word	0x00017b50
    e10c:	0001b258 	.word	0x0001b258
    e110:	20001308 	.word	0x20001308
    e114:	0001b29c 	.word	0x0001b29c
    e118:	5002a000 	.word	0x5002a000

0000e11c <nrfx_ipc_receive_event_enable>:
    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    e11c:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    e11e:	4b0b      	ldr	r3, [pc, #44]	; (e14c <nrfx_ipc_receive_event_enable+0x30>)
{
    e120:	4604      	mov	r4, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    e122:	791b      	ldrb	r3, [r3, #4]
    e124:	2b01      	cmp	r3, #1
    e126:	d009      	beq.n	e13c <nrfx_ipc_receive_event_enable+0x20>
    e128:	4909      	ldr	r1, [pc, #36]	; (e150 <nrfx_ipc_receive_event_enable+0x34>)
    e12a:	480a      	ldr	r0, [pc, #40]	; (e154 <nrfx_ipc_receive_event_enable+0x38>)
    e12c:	236a      	movs	r3, #106	; 0x6a
    e12e:	4a0a      	ldr	r2, [pc, #40]	; (e158 <nrfx_ipc_receive_event_enable+0x3c>)
    e130:	f003 ff0a 	bl	11f48 <printk>
    e134:	216a      	movs	r1, #106	; 0x6a
    e136:	4808      	ldr	r0, [pc, #32]	; (e158 <nrfx_ipc_receive_event_enable+0x3c>)
    e138:	f004 f99c 	bl	12474 <assert_post_action>
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
    e13c:	2301      	movs	r3, #1
    e13e:	fa03 f404 	lsl.w	r4, r3, r4
    e142:	4b06      	ldr	r3, [pc, #24]	; (e15c <nrfx_ipc_receive_event_enable+0x40>)
    e144:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
}
    e148:	bd10      	pop	{r4, pc}
    e14a:	bf00      	nop
    e14c:	20001308 	.word	0x20001308
    e150:	0001b29c 	.word	0x0001b29c
    e154:	00017b50 	.word	0x00017b50
    e158:	0001b258 	.word	0x0001b258
    e15c:	5002a000 	.word	0x5002a000

0000e160 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    e160:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    e162:	4b0b      	ldr	r3, [pc, #44]	; (e190 <nrfx_ipc_receive_event_disable+0x30>)
{
    e164:	4604      	mov	r4, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    e166:	791b      	ldrb	r3, [r3, #4]
    e168:	2b01      	cmp	r3, #1
    e16a:	d009      	beq.n	e180 <nrfx_ipc_receive_event_disable+0x20>
    e16c:	4909      	ldr	r1, [pc, #36]	; (e194 <nrfx_ipc_receive_event_disable+0x34>)
    e16e:	480a      	ldr	r0, [pc, #40]	; (e198 <nrfx_ipc_receive_event_disable+0x38>)
    e170:	2370      	movs	r3, #112	; 0x70
    e172:	4a0a      	ldr	r2, [pc, #40]	; (e19c <nrfx_ipc_receive_event_disable+0x3c>)
    e174:	f003 fee8 	bl	11f48 <printk>
    e178:	2170      	movs	r1, #112	; 0x70
    e17a:	4808      	ldr	r0, [pc, #32]	; (e19c <nrfx_ipc_receive_event_disable+0x3c>)
    e17c:	f004 f97a 	bl	12474 <assert_post_action>
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
    e180:	2301      	movs	r3, #1
    e182:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->INTENCLR = mask;
    e186:	4b06      	ldr	r3, [pc, #24]	; (e1a0 <nrfx_ipc_receive_event_disable+0x40>)
    e188:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
}
    e18c:	bd10      	pop	{r4, pc}
    e18e:	bf00      	nop
    e190:	20001308 	.word	0x20001308
    e194:	0001b29c 	.word	0x0001b29c
    e198:	00017b50 	.word	0x00017b50
    e19c:	0001b258 	.word	0x0001b258
    e1a0:	5002a000 	.word	0x5002a000

0000e1a4 <nrfx_ipc_irq_handler>:
    return p_reg->INTPEND;
    e1a4:	4b16      	ldr	r3, [pc, #88]	; (e200 <nrfx_ipc_irq_handler+0x5c>)
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
    e1a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e1aa:	f8d3 630c 	ldr.w	r6, [r3, #780]	; 0x30c
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    e1ae:	f8df 9060 	ldr.w	r9, [pc, #96]	; e210 <nrfx_ipc_irq_handler+0x6c>
    // Get the information about events that fire this interrupt
    uint32_t events_map = nrf_ipc_int_pending_get(NRF_IPC);

    // Clear these events
    uint32_t bitmask = events_map;
    e1b2:	4635      	mov	r5, r6
    e1b4:	4f13      	ldr	r7, [pc, #76]	; (e204 <nrfx_ipc_irq_handler+0x60>)
    e1b6:	f8df 805c 	ldr.w	r8, [pc, #92]	; e214 <nrfx_ipc_irq_handler+0x70>
    while (bitmask)
    e1ba:	b935      	cbnz	r5, e1ca <nrfx_ipc_irq_handler+0x26>
        bitmask &= ~(1UL << event_idx);
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
    e1bc:	4b12      	ldr	r3, [pc, #72]	; (e208 <nrfx_ipc_irq_handler+0x64>)
    e1be:	4630      	mov	r0, r6
}
    e1c0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
    e1c4:	681a      	ldr	r2, [r3, #0]
    e1c6:	6899      	ldr	r1, [r3, #8]
    e1c8:	4710      	bx	r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    e1ca:	fa95 f4a5 	rbit	r4, r5
        bitmask &= ~(1UL << event_idx);
    e1ce:	2301      	movs	r3, #1
  return __builtin_clz(value);
    e1d0:	fab4 f484 	clz	r4, r4
    e1d4:	40a3      	lsls	r3, r4
    e1d6:	2c0f      	cmp	r4, #15
    e1d8:	ea25 0503 	bic.w	r5, r5, r3
    e1dc:	d90b      	bls.n	e1f6 <nrfx_ipc_irq_handler+0x52>
    e1de:	4639      	mov	r1, r7
    e1e0:	4640      	mov	r0, r8
    e1e2:	f240 13e5 	movw	r3, #485	; 0x1e5
    e1e6:	464a      	mov	r2, r9
    e1e8:	f003 feae 	bl	11f48 <printk>
    e1ec:	f240 11e5 	movw	r1, #485	; 0x1e5
    e1f0:	4648      	mov	r0, r9
    e1f2:	f004 f93f 	bl	12474 <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e1f6:	2200      	movs	r2, #0
    e1f8:	4b04      	ldr	r3, [pc, #16]	; (e20c <nrfx_ipc_irq_handler+0x68>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    e1fa:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e1fc:	511a      	str	r2, [r3, r4]
}
    e1fe:	e7dc      	b.n	e1ba <nrfx_ipc_irq_handler+0x16>
    e200:	5002a000 	.word	0x5002a000
    e204:	0001b2fb 	.word	0x0001b2fb
    e208:	20001308 	.word	0x20001308
    e20c:	5002a100 	.word	0x5002a100
    e210:	0001b2c9 	.word	0x0001b2c9
    e214:	00017b50 	.word	0x00017b50

0000e218 <nrfx_nvmc_page_erase>:
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
    e218:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
{
    e21c:	b510      	push	{r4, lr}
    e21e:	4604      	mov	r4, r0
    NRFX_ASSERT(((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
    e220:	d310      	bcc.n	e244 <nrfx_nvmc_page_erase+0x2c>
    e222:	f100 437f 	add.w	r3, r0, #4278190080	; 0xff000000
    e226:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e22a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    e22e:	d309      	bcc.n	e244 <nrfx_nvmc_page_erase+0x2c>
    e230:	490f      	ldr	r1, [pc, #60]	; (e270 <nrfx_nvmc_page_erase+0x58>)
    e232:	4810      	ldr	r0, [pc, #64]	; (e274 <nrfx_nvmc_page_erase+0x5c>)
    e234:	23e1      	movs	r3, #225	; 0xe1
    e236:	4a10      	ldr	r2, [pc, #64]	; (e278 <nrfx_nvmc_page_erase+0x60>)
    e238:	f003 fe86 	bl	11f48 <printk>
    e23c:	21e1      	movs	r1, #225	; 0xe1
    e23e:	480e      	ldr	r0, [pc, #56]	; (e278 <nrfx_nvmc_page_erase+0x60>)
    e240:	f004 f918 	bl	12474 <assert_post_action>
    return !(addr % flash_page_size_get());
    e244:	f3c4 030b 	ubfx	r3, r4, #0, #12
#if !defined(NRF_TRUSTZONE_NONSECURE)
     || ((addr - (uint32_t)NRF_UICR) < sizeof(NRF_UICR_Type))
#endif
    );

    if (!is_page_aligned_check(addr))
    e248:	b97b      	cbnz	r3, e26a <nrfx_nvmc_page_erase+0x52>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
    e24a:	2202      	movs	r2, #2
    e24c:	4b0b      	ldr	r3, [pc, #44]	; (e27c <nrfx_nvmc_page_erase+0x64>)
    e24e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
    e252:	f04f 32ff 	mov.w	r2, #4294967295
    e256:	6022      	str	r2, [r4, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    e258:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    e25c:	07d2      	lsls	r2, r2, #31
    e25e:	d5fb      	bpl.n	e258 <nrfx_nvmc_page_erase+0x40>
    p_reg->CONFIG = (uint32_t)mode;
    e260:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
    e262:	4807      	ldr	r0, [pc, #28]	; (e280 <nrfx_nvmc_page_erase+0x68>)
    e264:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    e268:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_ADDR;
    e26a:	4806      	ldr	r0, [pc, #24]	; (e284 <nrfx_nvmc_page_erase+0x6c>)
    e26c:	e7fc      	b.n	e268 <nrfx_nvmc_page_erase+0x50>
    e26e:	bf00      	nop
    e270:	0001b362 	.word	0x0001b362
    e274:	00017b50 	.word	0x00017b50
    e278:	0001b306 	.word	0x0001b306
    e27c:	50039000 	.word	0x50039000
    e280:	0bad0000 	.word	0x0bad0000
    e284:	0bad000a 	.word	0x0bad000a

0000e288 <nrfx_nvmc_word_write>:
    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    NRFX_ASSERT(((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
    e288:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
{
    e28c:	b538      	push	{r3, r4, r5, lr}
    e28e:	4604      	mov	r4, r0
    e290:	460d      	mov	r5, r1
    NRFX_ASSERT(((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
    e292:	d312      	bcc.n	e2ba <nrfx_nvmc_word_write+0x32>
    e294:	f100 437f 	add.w	r3, r0, #4278190080	; 0xff000000
    e298:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e29c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    e2a0:	d30b      	bcc.n	e2ba <nrfx_nvmc_word_write+0x32>
    e2a2:	4914      	ldr	r1, [pc, #80]	; (e2f4 <nrfx_nvmc_word_write+0x6c>)
    e2a4:	4814      	ldr	r0, [pc, #80]	; (e2f8 <nrfx_nvmc_word_write+0x70>)
    e2a6:	f240 138b 	movw	r3, #395	; 0x18b
    e2aa:	4a14      	ldr	r2, [pc, #80]	; (e2fc <nrfx_nvmc_word_write+0x74>)
    e2ac:	f003 fe4c 	bl	11f48 <printk>
    e2b0:	f240 118b 	movw	r1, #395	; 0x18b
    e2b4:	4811      	ldr	r0, [pc, #68]	; (e2fc <nrfx_nvmc_word_write+0x74>)
    e2b6:	f004 f8dd 	bl	12474 <assert_post_action>
#if !defined(NRF_TRUSTZONE_NONSECURE)
     || ((addr - (uint32_t)NRF_UICR) < sizeof(NRF_UICR_Type))
#endif
    );
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
    e2ba:	07a1      	lsls	r1, r4, #30
    e2bc:	d00b      	beq.n	e2d6 <nrfx_nvmc_word_write+0x4e>
    e2be:	4910      	ldr	r1, [pc, #64]	; (e300 <nrfx_nvmc_word_write+0x78>)
    e2c0:	480d      	ldr	r0, [pc, #52]	; (e2f8 <nrfx_nvmc_word_write+0x70>)
    e2c2:	f44f 73c8 	mov.w	r3, #400	; 0x190
    e2c6:	4a0d      	ldr	r2, [pc, #52]	; (e2fc <nrfx_nvmc_word_write+0x74>)
    e2c8:	f003 fe3e 	bl	11f48 <printk>
    e2cc:	f44f 71c8 	mov.w	r1, #400	; 0x190
    e2d0:	480a      	ldr	r0, [pc, #40]	; (e2fc <nrfx_nvmc_word_write+0x74>)
    e2d2:	f004 f8cf 	bl	12474 <assert_post_action>
    e2d6:	2201      	movs	r2, #1
    e2d8:	4b0a      	ldr	r3, [pc, #40]	; (e304 <nrfx_nvmc_word_write+0x7c>)
    e2da:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    e2de:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    e2e2:	07d2      	lsls	r2, r2, #31
    e2e4:	d5fb      	bpl.n	e2de <nrfx_nvmc_word_write+0x56>
    *(volatile uint32_t *)addr = value;
    e2e6:	6025      	str	r5, [r4, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    e2e8:	f3bf 8f5f 	dmb	sy
    p_reg->CONFIG = (uint32_t)mode;
    e2ec:	2200      	movs	r2, #0
    e2ee:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nvmc_write_mode_set();

    nvmc_word_write(addr, value);

    nvmc_readonly_mode_set();
}
    e2f2:	bd38      	pop	{r3, r4, r5, pc}
    e2f4:	0001b362 	.word	0x0001b362
    e2f8:	00017b50 	.word	0x00017b50
    e2fc:	0001b306 	.word	0x0001b306
    e300:	0001b3d8 	.word	0x0001b3d8
    e304:	50039000 	.word	0x50039000

0000e308 <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
    e308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e30c:	460e      	mov	r6, r1
    e30e:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
    e310:	4d0c      	ldr	r5, [pc, #48]	; (e344 <metal_generic_dev_open+0x3c>)
    e312:	f855 4f18 	ldr.w	r4, [r5, #24]!
    e316:	42ac      	cmp	r4, r5
    e318:	d103      	bne.n	e322 <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
    e31a:	f06f 0012 	mvn.w	r0, #18
    e31e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
    e322:	4631      	mov	r1, r6
    e324:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
    e328:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
    e32c:	f005 f8f5 	bl	1351a <strcmp>
    e330:	b930      	cbnz	r0, e340 <metal_generic_dev_open+0x38>
			return metal_generic_dev_sys_open(dev);
    e332:	4640      	mov	r0, r8
			*device = dev;
    e334:	f8c7 8000 	str.w	r8, [r7]
}
    e338:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
    e33c:	f007 bdcb 	b.w	15ed6 <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
    e340:	6824      	ldr	r4, [r4, #0]
    e342:	e7e8      	b.n	e316 <metal_generic_dev_open+0xe>
    e344:	20001314 	.word	0x20001314

0000e348 <metal_bus_find>:
{
    e348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e34c:	4607      	mov	r7, r0
    e34e:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
    e350:	4e0b      	ldr	r6, [pc, #44]	; (e380 <metal_bus_find+0x38>)
    e352:	f856 4f08 	ldr.w	r4, [r6, #8]!
    e356:	42b4      	cmp	r4, r6
    e358:	d102      	bne.n	e360 <metal_bus_find+0x18>
	return -ENOENT;
    e35a:	f06f 0001 	mvn.w	r0, #1
    e35e:	e00a      	b.n	e376 <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
    e360:	4639      	mov	r1, r7
    e362:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
    e366:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
    e36a:	f005 f8d6 	bl	1351a <strcmp>
    e36e:	b920      	cbnz	r0, e37a <metal_bus_find+0x32>
    e370:	b11d      	cbz	r5, e37a <metal_bus_find+0x32>
			*result = bus;
    e372:	f8c5 8000 	str.w	r8, [r5]
}
    e376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
    e37a:	6824      	ldr	r4, [r4, #0]
    e37c:	e7eb      	b.n	e356 <metal_bus_find+0xe>
    e37e:	bf00      	nop
    e380:	20001314 	.word	0x20001314

0000e384 <metal_bus_register>:
{
    e384:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
    e386:	4604      	mov	r4, r0
    e388:	b910      	cbnz	r0, e390 <metal_bus_register+0xc>
		return -EINVAL;
    e38a:	f06f 0015 	mvn.w	r0, #21
}
    e38e:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
    e390:	6800      	ldr	r0, [r0, #0]
    e392:	2800      	cmp	r0, #0
    e394:	d0f9      	beq.n	e38a <metal_bus_register+0x6>
    e396:	f005 f8b9 	bl	1350c <strlen>
    e39a:	2800      	cmp	r0, #0
    e39c:	d0f5      	beq.n	e38a <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
    e39e:	2100      	movs	r1, #0
    e3a0:	6820      	ldr	r0, [r4, #0]
    e3a2:	f7ff ffd1 	bl	e348 <metal_bus_find>
    e3a6:	b1c0      	cbz	r0, e3da <metal_bus_register+0x56>
	metal_list_init(&bus->devices);
    e3a8:	f104 031c 	add.w	r3, r4, #28
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
	list->prev = list;
	list->next = list;
    e3ac:	e9c4 3307 	strd	r3, r3, [r4, #28]
}

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
	new_node->prev = node->prev;
    e3b0:	4b0c      	ldr	r3, [pc, #48]	; (e3e4 <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
    e3b2:	f104 0224 	add.w	r2, r4, #36	; 0x24
    e3b6:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
    e3b8:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
    e3bc:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
    e3be:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
    e3c0:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
    e3c2:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
    e3c4:	781a      	ldrb	r2, [r3, #0]
    e3c6:	2a06      	cmp	r2, #6
    e3c8:	d905      	bls.n	e3d6 <metal_bus_register+0x52>
    e3ca:	685b      	ldr	r3, [r3, #4]
    e3cc:	b143      	cbz	r3, e3e0 <metal_bus_register+0x5c>
    e3ce:	2007      	movs	r0, #7
    e3d0:	6822      	ldr	r2, [r4, #0]
    e3d2:	4905      	ldr	r1, [pc, #20]	; (e3e8 <metal_bus_register+0x64>)
    e3d4:	4798      	blx	r3
	return 0;
    e3d6:	2000      	movs	r0, #0
    e3d8:	e7d9      	b.n	e38e <metal_bus_register+0xa>
		return -EEXIST;
    e3da:	f06f 0010 	mvn.w	r0, #16
    e3de:	e7d6      	b.n	e38e <metal_bus_register+0xa>
	return 0;
    e3e0:	4618      	mov	r0, r3
    e3e2:	e7d4      	b.n	e38e <metal_bus_register+0xa>
    e3e4:	20001314 	.word	0x20001314
    e3e8:	0001b401 	.word	0x0001b401

0000e3ec <metal_register_generic_device>:
{
    e3ec:	b510      	push	{r4, lr}
    e3ee:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
    e3f0:	6800      	ldr	r0, [r0, #0]
    e3f2:	b910      	cbnz	r0, e3fa <metal_register_generic_device+0xe>
		return -EINVAL;
    e3f4:	f06f 0015 	mvn.w	r0, #21
}
    e3f8:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
    e3fa:	f005 f887 	bl	1350c <strlen>
    e3fe:	2800      	cmp	r0, #0
    e400:	d0f8      	beq.n	e3f4 <metal_register_generic_device+0x8>
    e402:	68a3      	ldr	r3, [r4, #8]
    e404:	2b01      	cmp	r3, #1
    e406:	d8f5      	bhi.n	e3f4 <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
    e408:	4b06      	ldr	r3, [pc, #24]	; (e424 <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
    e40a:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
    e40e:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
    e410:	4b05      	ldr	r3, [pc, #20]	; (e428 <metal_register_generic_device+0x3c>)
    e412:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
    e414:	f103 0018 	add.w	r0, r3, #24
    e418:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
    e41a:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
    e41c:	61d9      	str	r1, [r3, #28]
	return 0;
    e41e:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
    e420:	6011      	str	r1, [r2, #0]
}
    e422:	e7e9      	b.n	e3f8 <metal_register_generic_device+0xc>
    e424:	200002b4 	.word	0x200002b4
    e428:	20001314 	.word	0x20001314

0000e42c <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
    e42c:	b538      	push	{r3, r4, r5, lr}
    e42e:	4605      	mov	r5, r0
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
    e430:	4c0d      	ldr	r4, [pc, #52]	; (e468 <metal_init+0x3c>)
    e432:	2220      	movs	r2, #32
    e434:	4620      	mov	r0, r4
    e436:	2100      	movs	r1, #0
    e438:	f005 f8c5 	bl	135c6 <memset>

	_metal.common.log_handler   = params->log_handler;
    e43c:	682b      	ldr	r3, [r5, #0]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
    e43e:	4628      	mov	r0, r5
	_metal.common.log_handler   = params->log_handler;
    e440:	6063      	str	r3, [r4, #4]
	_metal.common.log_level     = params->log_level;
    e442:	4623      	mov	r3, r4
    e444:	792a      	ldrb	r2, [r5, #4]
    e446:	f803 2b08 	strb.w	r2, [r3], #8
	list->next = list;
    e44a:	e9c4 3302 	strd	r3, r3, [r4, #8]
	list->prev = list;
    e44e:	f104 0310 	add.w	r3, r4, #16
	list->next = list;
    e452:	e9c4 3304 	strd	r3, r3, [r4, #16]
	list->prev = list;
    e456:	f104 0318 	add.w	r3, r4, #24
	list->next = list;
    e45a:	e9c4 3306 	strd	r3, r3, [r4, #24]
	if (error)
		return error;

	return error;
}
    e45e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	error = metal_sys_init(params);
    e462:	f000 b803 	b.w	e46c <metal_sys_init>
    e466:	bf00      	nop
    e468:	20001314 	.word	0x20001314

0000e46c <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
    e46c:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
    e46e:	4802      	ldr	r0, [pc, #8]	; (e478 <metal_sys_init+0xc>)
    e470:	f7ff ff88 	bl	e384 <metal_bus_register>
	return 0;
}
    e474:	2000      	movs	r0, #0
    e476:	bd08      	pop	{r3, pc}
    e478:	200002b4 	.word	0x200002b4

0000e47c <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
    e47c:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
    e47e:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
    e480:	2b06      	cmp	r3, #6
{
    e482:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
    e484:	bf88      	it	hi
    e486:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
    e488:	4b09      	ldr	r3, [pc, #36]	; (e4b0 <metal_zephyr_log_handler+0x34>)
{
    e48a:	ac05      	add	r4, sp, #20
    e48c:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
    e490:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
    e494:	4807      	ldr	r0, [pc, #28]	; (e4b4 <metal_zephyr_log_handler+0x38>)
    e496:	f003 fd57 	bl	11f48 <printk>

	va_start(args, format);
	vprintk(format, args);
    e49a:	4621      	mov	r1, r4
    e49c:	4628      	mov	r0, r5
	va_start(args, format);
    e49e:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
    e4a0:	f7f2 ffac 	bl	13fc <vprintk>
	va_end(args);
}
    e4a4:	b002      	add	sp, #8
    e4a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    e4aa:	b003      	add	sp, #12
    e4ac:	4770      	bx	lr
    e4ae:	bf00      	nop
    e4b0:	000174b8 	.word	0x000174b8
    e4b4:	00018f8f 	.word	0x00018f8f

0000e4b8 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
    e4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e4bc:	b087      	sub	sp, #28
    e4be:	9305      	str	r3, [sp, #20]
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
    e4c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
    e4c2:	4606      	mov	r6, r0
	if (nvqs > num_vrings)
    e4c4:	4293      	cmp	r3, r2
{
    e4c6:	4617      	mov	r7, r2
	if (nvqs > num_vrings)
    e4c8:	d342      	bcc.n	e550 <virtio_create_virtqueues+0x98>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
    e4ca:	2500      	movs	r5, #0
		vring_info = &vdev->vrings_info[i];
    e4cc:	f04f 0b18 	mov.w	fp, #24
	for (i = 0; i < nvqs; i++) {
    e4d0:	42bd      	cmp	r5, r7
    e4d2:	d103      	bne.n	e4dc <virtio_create_virtqueues+0x24>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
    e4d4:	2000      	movs	r0, #0
}
    e4d6:	b007      	add	sp, #28
    e4d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
    e4dc:	fb0b f805 	mul.w	r8, fp, r5
    e4e0:	f8d6 902c 	ldr.w	r9, [r6, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_MASTER) {
    e4e4:	69b2      	ldr	r2, [r6, #24]
		vring_info = &vdev->vrings_info[i];
    e4e6:	eb09 0408 	add.w	r4, r9, r8
		vring_alloc = &vring_info->info;
    e4ea:	f104 0a04 	add.w	sl, r4, #4
		if (vdev->role == VIRTIO_DEV_MASTER) {
    e4ee:	b9ca      	cbnz	r2, e524 <virtio_create_virtqueues+0x6c>
			struct metal_io_region *io = vring_info->io;
    e4f0:	6960      	ldr	r0, [r4, #20]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
    e4f2:	6863      	ldr	r3, [r4, #4]
    e4f4:	6801      	ldr	r1, [r0, #0]
			metal_io_block_set(io, offset, 0,
    e4f6:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
    e4fa:	1a59      	subs	r1, r3, r1
						      vring_alloc->align));
    e4fc:	68a3      	ldr	r3, [r4, #8]
static inline int vring_size(unsigned int num, unsigned long align)
{
	int size;

	size = num * sizeof(struct vring_desc);
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
    e4fe:	f10c 0e03 	add.w	lr, ip, #3
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
    e502:	1e5c      	subs	r4, r3, #1
    e504:	eb04 140c 	add.w	r4, r4, ip, lsl #4
    e508:	eb04 044e 	add.w	r4, r4, lr, lsl #1
    e50c:	425b      	negs	r3, r3
    e50e:	4023      	ands	r3, r4
			metal_io_block_set(io, offset, 0,
    e510:	6884      	ldr	r4, [r0, #8]
	size += sizeof(struct vring_used) +
    e512:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
    e516:	42a1      	cmp	r1, r4
    e518:	bf28      	it	cs
    e51a:	f04f 31ff 	movcs.w	r1, #4294967295
    e51e:	3306      	adds	r3, #6
    e520:	f007 fca0 	bl	15e64 <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
    e524:	f859 3008 	ldr.w	r3, [r9, r8]
    e528:	9a05      	ldr	r2, [sp, #20]
    e52a:	9302      	str	r3, [sp, #8]
    e52c:	6a33      	ldr	r3, [r6, #32]
    e52e:	4630      	mov	r0, r6
    e530:	6a1b      	ldr	r3, [r3, #32]
    e532:	b2a9      	uxth	r1, r5
    e534:	9301      	str	r3, [sp, #4]
    e536:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e538:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    e53c:	9300      	str	r3, [sp, #0]
    e53e:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
    e542:	4653      	mov	r3, sl
    e544:	f007 fce4 	bl	15f10 <virtqueue_create>
		if (ret)
    e548:	2800      	cmp	r0, #0
    e54a:	d1c4      	bne.n	e4d6 <virtio_create_virtqueues+0x1e>
	for (i = 0; i < nvqs; i++) {
    e54c:	3501      	adds	r5, #1
    e54e:	e7bf      	b.n	e4d0 <virtio_create_virtqueues+0x18>
		return ERROR_VQUEUE_INVLD_PARAM;
    e550:	4800      	ldr	r0, [pc, #0]	; (e554 <virtio_create_virtqueues+0x9c>)
    e552:	e7c0      	b.n	e4d6 <virtio_create_virtqueues+0x1e>
    e554:	fffff440 	.word	0xfffff440

0000e558 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
    e558:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
    e55a:	8944      	ldrh	r4, [r0, #10]
    e55c:	428c      	cmp	r4, r1
    e55e:	d312      	bcc.n	e586 <virtqueue_add_consumed_buffer+0x2e>
		return ERROR_VRING_NO_BUFF;
	}

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
    e560:	6a03      	ldr	r3, [r0, #32]
    e562:	3c01      	subs	r4, #1
    e564:	885d      	ldrh	r5, [r3, #2]
    e566:	402c      	ands	r4, r5
    e568:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
	used_desc->len = len;
    e56c:	609a      	str	r2, [r3, #8]
	used_desc->id = head_idx;
    e56e:	6059      	str	r1, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
    e570:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
    e574:	6a02      	ldr	r2, [r0, #32]
    e576:	8853      	ldrh	r3, [r2, #2]
    e578:	3301      	adds	r3, #1
    e57a:	8053      	strh	r3, [r2, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
    e57c:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
    e57e:	3301      	adds	r3, #1
    e580:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
    e582:	2000      	movs	r0, #0
}
    e584:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
    e586:	4801      	ldr	r0, [pc, #4]	; (e58c <virtqueue_add_consumed_buffer+0x34>)
    e588:	e7fc      	b.n	e584 <virtqueue_add_consumed_buffer+0x2c>
    e58a:	bf00      	nop
    e58c:	fffff441 	.word	0xfffff441

0000e590 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
    e590:	b430      	push	{r4, r5}
    e592:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
    e594:	b148      	cbz	r0, e5aa <rpmsg_send_offchannel_raw+0x1a>
    e596:	6a00      	ldr	r0, [r0, #32]
    e598:	b138      	cbz	r0, e5aa <rpmsg_send_offchannel_raw+0x1a>
    e59a:	b133      	cbz	r3, e5aa <rpmsg_send_offchannel_raw+0x1a>
    e59c:	3401      	adds	r4, #1
    e59e:	d004      	beq.n	e5aa <rpmsg_send_offchannel_raw+0x1a>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
    e5a0:	6f44      	ldr	r4, [r0, #116]	; 0x74
    e5a2:	b114      	cbz	r4, e5aa <rpmsg_send_offchannel_raw+0x1a>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
    e5a4:	46a4      	mov	ip, r4
						      size, wait);

	return RPMSG_ERR_PARAM;
}
    e5a6:	bc30      	pop	{r4, r5}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
    e5a8:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
    e5aa:	4801      	ldr	r0, [pc, #4]	; (e5b0 <rpmsg_send_offchannel_raw+0x20>)
}
    e5ac:	bc30      	pop	{r4, r5}
    e5ae:	4770      	bx	lr
    e5b0:	fffff82d 	.word	0xfffff82d

0000e5b4 <rpmsg_create_ept>:
}

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
    e5b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e5b8:	460e      	mov	r6, r1
    e5ba:	4690      	mov	r8, r2
    e5bc:	461d      	mov	r5, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept)
    e5be:	4604      	mov	r4, r0
    e5c0:	2800      	cmp	r0, #0
    e5c2:	d066      	beq.n	e692 <rpmsg_create_ept+0xde>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
    e5c4:	f101 0758 	add.w	r7, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
    e5c8:	4638      	mov	r0, r7
    e5ca:	f007 fe58 	bl	1627e <__metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
    e5ce:	1c69      	adds	r1, r5, #1
    e5d0:	f106 0248 	add.w	r2, r6, #72	; 0x48
    e5d4:	d059      	beq.n	e68a <rpmsg_create_ept+0xd6>
	if (addr < size)
    e5d6:	2d7f      	cmp	r5, #127	; 0x7f
    e5d8:	dc59      	bgt.n	e68e <rpmsg_create_ept+0xda>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
}

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
    e5da:	0969      	lsrs	r1, r5, #5
    e5dc:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
    e5e0:	f005 0c1f 	and.w	ip, r5, #31
    e5e4:	fa20 f30c 	lsr.w	r3, r0, ip
		status = rpmsg_is_address_set(rdev->bitmap,
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
    e5e8:	07db      	lsls	r3, r3, #31
    e5ea:	d506      	bpl.n	e5fa <rpmsg_create_ept+0x46>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
					  src);
		} else if (status > 0) {
			status = RPMSG_SUCCESS;
    e5ec:	2500      	movs	r5, #0
    e5ee:	4638      	mov	r0, r7
    e5f0:	f002 fa26 	bl	10a40 <z_impl_k_sem_give>
	}

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
    e5f4:	4628      	mov	r0, r5
    e5f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
    e5fa:	2301      	movs	r3, #1
    e5fc:	fa03 f30c 	lsl.w	r3, r3, ip
	bitmap[bit / METAL_BITS_PER_ULONG] |=
    e600:	4303      	orrs	r3, r0
    e602:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
    e606:	4924      	ldr	r1, [pc, #144]	; (e698 <rpmsg_create_ept+0xe4>)
    e608:	2220      	movs	r2, #32
    e60a:	f1b8 0f00 	cmp.w	r8, #0
    e60e:	bf18      	it	ne
    e610:	4641      	movne	r1, r8
    e612:	4620      	mov	r0, r4
    e614:	f004 ff67 	bl	134e6 <strncpy>
	ept->addr = src;
	ept->dest_addr = dest;
    e618:	9b06      	ldr	r3, [sp, #24]
	rpmsg_register_endpoint(rdev, ept);
    e61a:	4621      	mov	r1, r4
    e61c:	62a3      	str	r3, [r4, #40]	; 0x28
	ept->cb = cb;
    e61e:	9b07      	ldr	r3, [sp, #28]
    e620:	4630      	mov	r0, r6
    e622:	62e3      	str	r3, [r4, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
    e624:	9b08      	ldr	r3, [sp, #32]
	ept->addr = src;
    e626:	6265      	str	r5, [r4, #36]	; 0x24
	ept->ns_unbind_cb = ns_unbind_cb;
    e628:	6323      	str	r3, [r4, #48]	; 0x30
    e62a:	f007 fe77 	bl	1631c <rpmsg_register_endpoint>
	if (rdev->support_ns && ept->dest_addr == RPMSG_ADDR_ANY) {
    e62e:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
    e632:	2b00      	cmp	r3, #0
    e634:	d0da      	beq.n	e5ec <rpmsg_create_ept+0x38>
    e636:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    e638:	3301      	adds	r3, #1
    e63a:	d1d7      	bne.n	e5ec <rpmsg_create_ept+0x38>
    e63c:	4638      	mov	r0, r7
    e63e:	f002 f9ff 	bl	10a40 <z_impl_k_sem_give>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
    e642:	2100      	movs	r1, #0
    e644:	4620      	mov	r0, r4
    e646:	f007 fe20 	bl	1628a <rpmsg_send_ns_message>
    e64a:	4605      	mov	r5, r0
    e64c:	4638      	mov	r0, r7
    e64e:	f007 fe16 	bl	1627e <__metal_mutex_acquire>
		if (status)
    e652:	2d00      	cmp	r5, #0
    e654:	d0cb      	beq.n	e5ee <rpmsg_create_ept+0x3a>
			rpmsg_unregister_endpoint(ept);
    e656:	4620      	mov	r0, r4
    e658:	f007 fdf3 	bl	16242 <rpmsg_unregister_endpoint>
    e65c:	e7c7      	b.n	e5ee <rpmsg_create_ept+0x3a>
{
	unsigned int bit;

	for (bit = start;
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit++)
    e65e:	3301      	adds	r3, #1
	for (bit = start;
    e660:	2b80      	cmp	r3, #128	; 0x80
    e662:	d0d0      	beq.n	e606 <rpmsg_create_ept+0x52>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
    e664:	0959      	lsrs	r1, r3, #5
    e666:	eb02 0e81 	add.w	lr, r2, r1, lsl #2
    e66a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
    e66e:	f003 0c1f 	and.w	ip, r3, #31
    e672:	fa21 f00c 	lsr.w	r0, r1, ip
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
    e676:	07c0      	lsls	r0, r0, #31
    e678:	d4f1      	bmi.n	e65e <rpmsg_create_ept+0xaa>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
    e67a:	2001      	movs	r0, #1
    e67c:	fa00 f00c 	lsl.w	r0, r0, ip
	bitmap[bit / METAL_BITS_PER_ULONG] |=
    e680:	4308      	orrs	r0, r1
}
    e682:	461d      	mov	r5, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
    e684:	f8ce 0000 	str.w	r0, [lr]
}
    e688:	e7bd      	b.n	e606 <rpmsg_create_ept+0x52>
	for (bit = start;
    e68a:	2300      	movs	r3, #0
    e68c:	e7ea      	b.n	e664 <rpmsg_create_ept+0xb0>
		return RPMSG_ERR_PARAM;
    e68e:	4d03      	ldr	r5, [pc, #12]	; (e69c <rpmsg_create_ept+0xe8>)
    e690:	e7ad      	b.n	e5ee <rpmsg_create_ept+0x3a>
		return RPMSG_ERR_PARAM;
    e692:	4d02      	ldr	r5, [pc, #8]	; (e69c <rpmsg_create_ept+0xe8>)
    e694:	e7ae      	b.n	e5f4 <rpmsg_create_ept+0x40>
    e696:	bf00      	nop
    e698:	0001af26 	.word	0x0001af26
    e69c:	fffff82d 	.word	0xfffff82d

0000e6a0 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
    e6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e6a4:	4604      	mov	r4, r0
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	status = rpmsg_virtio_get_status(rvdev);
    e6a6:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
{
    e6a8:	469b      	mov	fp, r3
	rvdev->vdev->func->set_status(rvdev->vdev, status);
}

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_status(rvdev->vdev);
    e6aa:	6a03      	ldr	r3, [r0, #32]
    e6ac:	b08d      	sub	sp, #52	; 0x34
    e6ae:	681b      	ldr	r3, [r3, #0]
    e6b0:	4692      	mov	sl, r2
    e6b2:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
    e6b6:	9103      	str	r1, [sp, #12]
    e6b8:	4798      	blx	r3
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
    e6ba:	0743      	lsls	r3, r0, #29
    e6bc:	f140 8089 	bpl.w	e7d2 <rpmsg_virtio_send_offchannel_raw+0x132>
		return RPMSG_ERR_DEV_STATE;
	}

	if (wait)
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
    e6c0:	f643 2398 	movw	r3, #15000	; 0x3a98
    e6c4:	2f00      	cmp	r7, #0
    e6c6:	bf18      	it	ne
    e6c8:	461f      	movne	r7, r3

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
    e6ca:	f104 0858 	add.w	r8, r4, #88	; 0x58
    e6ce:	4640      	mov	r0, r8
    e6d0:	f007 fe63 	bl	1639a <__metal_mutex_acquire>
	return rvdev->vdev->role;
    e6d4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    e6d6:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
    e6d8:	b373      	cbz	r3, e738 <rpmsg_virtio_send_offchannel_raw+0x98>
	if (role == RPMSG_REMOTE) {
    e6da:	2b01      	cmp	r3, #1
    e6dc:	d108      	bne.n	e6f0 <rpmsg_virtio_send_offchannel_raw+0x50>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
    e6de:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    e6e2:	f007 fd96 	bl	16212 <virtqueue_get_desc_size>
    e6e6:	3810      	subs	r0, #16
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
		if (avail_size && size > avail_size) {
    e6e8:	2800      	cmp	r0, #0
    e6ea:	ea20 79e0 	bic.w	r9, r0, r0, asr #31
    e6ee:	dc25      	bgt.n	e73c <rpmsg_virtio_send_offchannel_raw+0x9c>
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
    e6f0:	f04f 0900 	mov.w	r9, #0
    e6f4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    e6f6:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
    e6f8:	bb3b      	cbnz	r3, e74a <rpmsg_virtio_send_offchannel_raw+0xaa>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
    e6fa:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    e6fe:	f10d 0212 	add.w	r2, sp, #18
    e702:	a905      	add	r1, sp, #20
    e704:	f007 fc94 	bl	16030 <virtqueue_get_buffer>
		if (!data) {
    e708:	4605      	mov	r5, r0
    e70a:	b948      	cbnz	r0, e720 <rpmsg_virtio_send_offchannel_raw+0x80>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
    e70c:	f44f 7100 	mov.w	r1, #512	; 0x200
    e710:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    e714:	f007 fef0 	bl	164f8 <rpmsg_virtio_shm_pool_get_buffer>
			*len = RPMSG_BUFFER_SIZE;
    e718:	f44f 7300 	mov.w	r3, #512	; 0x200
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
    e71c:	4605      	mov	r5, r0
			*len = RPMSG_BUFFER_SIZE;
    e71e:	9305      	str	r3, [sp, #20]
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
    e720:	4640      	mov	r0, r8
    e722:	f007 fe22 	bl	1636a <k_sem_give>
			return RPMSG_ERR_BUFF_SIZE;
		}

		buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len, &idx);
		metal_mutex_release(&rdev->lock);
		if (buffer || !tick_count)
    e726:	2d00      	cmp	r5, #0
    e728:	d157      	bne.n	e7da <rpmsg_virtio_send_offchannel_raw+0x13a>
    e72a:	2f00      	cmp	r7, #0
    e72c:	d053      	beq.n	e7d6 <rpmsg_virtio_send_offchannel_raw+0x136>
			break;
		if (avail_size != 0)
    e72e:	f1b9 0f00 	cmp.w	r9, #0
    e732:	d108      	bne.n	e746 <rpmsg_virtio_send_offchannel_raw+0xa6>
			return RPMSG_ERR_BUFF_SIZE;
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
		tick_count--;
    e734:	3f01      	subs	r7, #1
	while (1) {
    e736:	e7ca      	b.n	e6ce <rpmsg_virtio_send_offchannel_raw+0x2e>
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
    e738:	f44f 79f8 	mov.w	r9, #496	; 0x1f0
		if (avail_size && size > avail_size) {
    e73c:	454e      	cmp	r6, r9
    e73e:	ddd9      	ble.n	e6f4 <rpmsg_virtio_send_offchannel_raw+0x54>
    e740:	4640      	mov	r0, r8
    e742:	f007 fe12 	bl	1636a <k_sem_give>
			return RPMSG_ERR_BUFF_SIZE;
    e746:	4e31      	ldr	r6, [pc, #196]	; (e80c <rpmsg_virtio_send_offchannel_raw+0x16c>)
    e748:	e03f      	b.n	e7ca <rpmsg_virtio_send_offchannel_raw+0x12a>
	if (role == RPMSG_REMOTE) {
    e74a:	2b01      	cmp	r3, #1
    e74c:	d108      	bne.n	e760 <rpmsg_virtio_send_offchannel_raw+0xc0>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
    e74e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    e752:	aa05      	add	r2, sp, #20
    e754:	f10d 0112 	add.w	r1, sp, #18
    e758:	f007 fca4 	bl	160a4 <virtqueue_get_available_buffer>
    e75c:	4605      	mov	r5, r0
    e75e:	e7df      	b.n	e720 <rpmsg_virtio_send_offchannel_raw+0x80>
	void *data = NULL;
    e760:	2500      	movs	r5, #0
    e762:	e7dd      	b.n	e720 <rpmsg_virtio_send_offchannel_raw+0x80>
    e764:	683b      	ldr	r3, [r7, #0]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
    e766:	68b8      	ldr	r0, [r7, #8]
	io = rvdev->shbuf_io;
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");

	status = metal_io_block_write(io,
    e768:	f105 0110 	add.w	r1, r5, #16
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
    e76c:	1ac9      	subs	r1, r1, r3
    e76e:	4281      	cmp	r1, r0
    e770:	bf28      	it	cs
    e772:	f04f 31ff 	movcs.w	r1, #4294967295
    e776:	4633      	mov	r3, r6
    e778:	465a      	mov	r2, fp
    e77a:	4638      	mov	r0, r7
    e77c:	f007 fb37 	bl	15dee <metal_io_block_write>
				      metal_io_virt_to_offset(io,
						RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\r\n");
    e780:	4286      	cmp	r6, r0
    e782:	d000      	beq.n	e786 <rpmsg_virtio_send_offchannel_raw+0xe6>
    e784:	e7fe      	b.n	e784 <rpmsg_virtio_send_offchannel_raw+0xe4>
    e786:	4640      	mov	r0, r8
    e788:	f007 fe07 	bl	1639a <__metal_mutex_acquire>
    e78c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
	metal_mutex_acquire(&rdev->lock);

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
    e78e:	9a05      	ldr	r2, [sp, #20]
    e790:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
    e792:	b953      	cbnz	r3, e7aa <rpmsg_virtio_send_offchannel_raw+0x10a>
		vqbuf.len = len;
    e794:	e9cd 5206 	strd	r5, r2, [sp, #24]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
    e798:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    e79c:	2201      	movs	r2, #1
    e79e:	9500      	str	r5, [sp, #0]
    e7a0:	a906      	add	r1, sp, #24
    e7a2:	f007 fbe5 	bl	15f70 <virtqueue_add_buffer>
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
    e7a6:	b148      	cbz	r0, e7bc <rpmsg_virtio_send_offchannel_raw+0x11c>
    e7a8:	e7fe      	b.n	e7a8 <rpmsg_virtio_send_offchannel_raw+0x108>
	if (role == RPMSG_REMOTE) {
    e7aa:	2b01      	cmp	r3, #1
    e7ac:	d106      	bne.n	e7bc <rpmsg_virtio_send_offchannel_raw+0x11c>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
    e7ae:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    e7b2:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    e7b6:	f7ff fecf 	bl	e558 <virtqueue_add_consumed_buffer>
    e7ba:	e7f4      	b.n	e7a6 <rpmsg_virtio_send_offchannel_raw+0x106>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
    e7bc:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    e7c0:	f007 fcef 	bl	161a2 <virtqueue_kick>
    e7c4:	4640      	mov	r0, r8
    e7c6:	f007 fdd0 	bl	1636a <k_sem_give>

	metal_mutex_release(&rdev->lock);

	return size;
}
    e7ca:	4630      	mov	r0, r6
    e7cc:	b00d      	add	sp, #52	; 0x34
    e7ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return RPMSG_ERR_DEV_STATE;
    e7d2:	4e0f      	ldr	r6, [pc, #60]	; (e810 <rpmsg_virtio_send_offchannel_raw+0x170>)
    e7d4:	e7f9      	b.n	e7ca <rpmsg_virtio_send_offchannel_raw+0x12a>
		return RPMSG_ERR_NO_BUFF;
    e7d6:	4e0f      	ldr	r6, [pc, #60]	; (e814 <rpmsg_virtio_send_offchannel_raw+0x174>)
    e7d8:	e7f7      	b.n	e7ca <rpmsg_virtio_send_offchannel_raw+0x12a>
	rp_hdr.src = src;
    e7da:	9b03      	ldr	r3, [sp, #12]
	io = rvdev->shbuf_io;
    e7dc:	f8d4 7088 	ldr.w	r7, [r4, #136]	; 0x88
	rp_hdr.src = src;
    e7e0:	9308      	str	r3, [sp, #32]
	rp_hdr.reserved = 0;
    e7e2:	2300      	movs	r3, #0
    e7e4:	6839      	ldr	r1, [r7, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
    e7e6:	68b8      	ldr	r0, [r7, #8]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
    e7e8:	1a69      	subs	r1, r5, r1
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
    e7ea:	4281      	cmp	r1, r0
    e7ec:	bf28      	it	cs
    e7ee:	f04f 31ff 	movcs.w	r1, #4294967295
	rp_hdr.reserved = 0;
    e7f2:	930a      	str	r3, [sp, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
    e7f4:	4638      	mov	r0, r7
    e7f6:	2310      	movs	r3, #16
    e7f8:	aa08      	add	r2, sp, #32
	rp_hdr.dst = dst;
    e7fa:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
	rp_hdr.len = size;
    e7fe:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
    e802:	f007 faf4 	bl	15dee <metal_io_block_write>
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
    e806:	2810      	cmp	r0, #16
    e808:	d0ac      	beq.n	e764 <rpmsg_virtio_send_offchannel_raw+0xc4>
    e80a:	e7fe      	b.n	e80a <rpmsg_virtio_send_offchannel_raw+0x16a>
    e80c:	fffff82b 	.word	0xfffff82b
    e810:	fffff82c 	.word	0xfffff82c
    e814:	fffff82e 	.word	0xfffff82e

0000e818 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
    e818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e81c:	460d      	mov	r5, r1
    e81e:	b088      	sub	sp, #32
    e820:	4617      	mov	r7, r2
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
	memset(rdev, 0, sizeof(*rdev));
    e822:	2100      	movs	r1, #0
    e824:	227c      	movs	r2, #124	; 0x7c
{
    e826:	4604      	mov	r4, r0
    e828:	461e      	mov	r6, r3
    e82a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
	memset(rdev, 0, sizeof(*rdev));
    e82e:	f004 feca 	bl	135c6 <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
    e832:	2201      	movs	r2, #1
    e834:	f104 0058 	add.w	r0, r4, #88	; 0x58
    e838:	4611      	mov	r1, r2
    e83a:	f007 ff13 	bl	16664 <z_impl_k_sem_init>
	metal_mutex_init(&rdev->lock);
	rvdev->vdev = vdev;
	rdev->ns_bind_cb = ns_bind_cb;
	vdev->priv = rvdev;
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
    e83e:	4b5e      	ldr	r3, [pc, #376]	; (e9b8 <rpmsg_init_vdev+0x1a0>)
	rvdev->vdev = vdev;
    e840:	67e5      	str	r5, [r4, #124]	; 0x7c
	rdev->ns_bind_cb = ns_bind_cb;
    e842:	6727      	str	r7, [r4, #112]	; 0x70
	vdev->priv = rvdev;
    e844:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
    e846:	6763      	str	r3, [r4, #116]	; 0x74
    e848:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    e84a:	f8d3 8018 	ldr.w	r8, [r3, #24]
	role = rpmsg_virtio_get_role(rvdev);

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
    e84e:	f1b8 0f01 	cmp.w	r8, #1
    e852:	d020      	beq.n	e896 <rpmsg_init_vdev+0x7e>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
    e854:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
    e856:	6a03      	ldr	r3, [r0, #32]
    e858:	689b      	ldr	r3, [r3, #8]
    e85a:	4798      	blx	r3
    e85c:	2300      	movs	r3, #0
    e85e:	6128      	str	r0, [r5, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
    e860:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
    e864:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
    e866:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
    e86a:	f1b8 0f00 	cmp.w	r8, #0
    e86e:	d01e      	beq.n	e8ae <rpmsg_init_vdev+0x96>
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
    e870:	f1b8 0f01 	cmp.w	r8, #1
    e874:	d133      	bne.n	e8de <rpmsg_init_vdev+0xc6>
		vq_names[0] = "tx_vq";
    e876:	4b51      	ldr	r3, [pc, #324]	; (e9bc <rpmsg_init_vdev+0x1a4>)
    e878:	9302      	str	r3, [sp, #8]
		vq_names[1] = "rx_vq";
    e87a:	4b51      	ldr	r3, [pc, #324]	; (e9c0 <rpmsg_init_vdev+0x1a8>)
    e87c:	9303      	str	r3, [sp, #12]
		callback[0] = rpmsg_virtio_tx_callback;
    e87e:	4b51      	ldr	r3, [pc, #324]	; (e9c4 <rpmsg_init_vdev+0x1ac>)
    e880:	9304      	str	r3, [sp, #16]
		callback[1] = rpmsg_virtio_rx_callback;
    e882:	4b51      	ldr	r3, [pc, #324]	; (e9c8 <rpmsg_init_vdev+0x1b0>)
    e884:	9305      	str	r3, [sp, #20]
		rvdev->rvq  = vdev->vrings_info[1].vq;
    e886:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    e888:	699a      	ldr	r2, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
    e88a:	681b      	ldr	r3, [r3, #0]
		rvdev->rvq  = vdev->vrings_info[1].vq;
    e88c:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		rvdev->svq  = vdev->vrings_info[0].vq;
    e890:	e023      	b.n	e8da <rpmsg_init_vdev+0xc2>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
    e892:	0743      	lsls	r3, r0, #29
    e894:	d4de      	bmi.n	e854 <rpmsg_init_vdev+0x3c>
		status = rpmsg_virtio_get_status(rvdev);
    e896:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	return rvdev->vdev->func->get_status(rvdev->vdev);
    e898:	6a03      	ldr	r3, [r0, #32]
    e89a:	681b      	ldr	r3, [r3, #0]
    e89c:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
    e89e:	0642      	lsls	r2, r0, #25
    e8a0:	d5f7      	bpl.n	e892 <rpmsg_init_vdev+0x7a>
			rpmsg_virtio_set_status(rvdev, 0);
    e8a2:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	rvdev->vdev->func->set_status(rvdev->vdev, status);
    e8a4:	2100      	movs	r1, #0
    e8a6:	6a03      	ldr	r3, [r0, #32]
    e8a8:	685b      	ldr	r3, [r3, #4]
    e8aa:	4798      	blx	r3
}
    e8ac:	e7f3      	b.n	e896 <rpmsg_init_vdev+0x7e>
		if (!shpool)
    e8ae:	f1b9 0f00 	cmp.w	r9, #0
    e8b2:	d07d      	beq.n	e9b0 <rpmsg_init_vdev+0x198>
		if (!shpool->size)
    e8b4:	f8d9 3008 	ldr.w	r3, [r9, #8]
    e8b8:	2b00      	cmp	r3, #0
    e8ba:	d07b      	beq.n	e9b4 <rpmsg_init_vdev+0x19c>
		vq_names[0] = "rx_vq";
    e8bc:	4b40      	ldr	r3, [pc, #256]	; (e9c0 <rpmsg_init_vdev+0x1a8>)
		rvdev->shpool = shpool;
    e8be:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
		vq_names[0] = "rx_vq";
    e8c2:	9302      	str	r3, [sp, #8]
		vq_names[1] = "tx_vq";
    e8c4:	4b3d      	ldr	r3, [pc, #244]	; (e9bc <rpmsg_init_vdev+0x1a4>)
    e8c6:	9303      	str	r3, [sp, #12]
		callback[0] = rpmsg_virtio_rx_callback;
    e8c8:	4b3f      	ldr	r3, [pc, #252]	; (e9c8 <rpmsg_init_vdev+0x1b0>)
    e8ca:	9304      	str	r3, [sp, #16]
		callback[1] = rpmsg_virtio_tx_callback;
    e8cc:	4b3d      	ldr	r3, [pc, #244]	; (e9c4 <rpmsg_init_vdev+0x1ac>)
    e8ce:	9305      	str	r3, [sp, #20]
		rvdev->rvq  = vdev->vrings_info[0].vq;
    e8d0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    e8d2:	681a      	ldr	r2, [r3, #0]
		rvdev->svq  = vdev->vrings_info[1].vq;
    e8d4:	699b      	ldr	r3, [r3, #24]
		rvdev->rvq  = vdev->vrings_info[0].vq;
    e8d6:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		rvdev->svq  = vdev->vrings_info[0].vq;
    e8da:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
    e8de:	ab04      	add	r3, sp, #16
    e8e0:	9300      	str	r3, [sp, #0]
    e8e2:	2202      	movs	r2, #2
    e8e4:	2100      	movs	r1, #0
    e8e6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
    e8e8:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    e8ec:	ab02      	add	r3, sp, #8
    e8ee:	f7ff fde3 	bl	e4b8 <virtio_create_virtqueues>

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
    e8f2:	4607      	mov	r7, r0
    e8f4:	2800      	cmp	r0, #0
    e8f6:	d157      	bne.n	e9a8 <rpmsg_init_vdev+0x190>

	/*
	 * Suppress "tx-complete" interrupts
	 * since send method use busy loop when buffer pool exhaust
	 */
	virtqueue_disable_cb(rvdev->svq);
    e8f8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    e8fc:	f007 fc27 	bl	1614e <virtqueue_disable_cb>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
    e900:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		vq->shm_io = shm_io;
    e902:	681a      	ldr	r2, [r3, #0]
    e904:	699b      	ldr	r3, [r3, #24]
    e906:	6296      	str	r6, [r2, #40]	; 0x28
    e908:	629e      	str	r6, [r3, #40]	; 0x28
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
    e90a:	f1b8 0f00 	cmp.w	r8, #0
    e90e:	d108      	bne.n	e922 <rpmsg_init_vdev+0x10a>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
    e910:	f44f 7300 	mov.w	r3, #512	; 0x200
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
    e914:	46c2      	mov	sl, r8
		vqbuf.len = RPMSG_BUFFER_SIZE;
    e916:	9307      	str	r3, [sp, #28]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
    e918:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    e91c:	895b      	ldrh	r3, [r3, #10]
    e91e:	4553      	cmp	r3, sl
    e920:	d81f      	bhi.n	e962 <rpmsg_init_vdev+0x14a>

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if (rdev->support_ns) {
    e922:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    e926:	e9c4 4400 	strd	r4, r4, [r4]
    e92a:	b18b      	cbz	r3, e950 <rpmsg_init_vdev+0x138>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
    e92c:	f104 0508 	add.w	r5, r4, #8
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
    e930:	4926      	ldr	r1, [pc, #152]	; (e9cc <rpmsg_init_vdev+0x1b4>)
    e932:	2220      	movs	r2, #32
    e934:	4628      	mov	r0, r5
    e936:	f004 fdd6 	bl	134e6 <strncpy>
	ept->addr = src;
    e93a:	2335      	movs	r3, #53	; 0x35
	ept->dest_addr = dest;
    e93c:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
	ept->cb = cb;
    e940:	4b23      	ldr	r3, [pc, #140]	; (e9d0 <rpmsg_init_vdev+0x1b8>)
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		rpmsg_register_endpoint(rdev, &rdev->ns_ept);
    e942:	4629      	mov	r1, r5
    e944:	6363      	str	r3, [r4, #52]	; 0x34
	ept->ns_unbind_cb = ns_unbind_cb;
    e946:	2300      	movs	r3, #0
    e948:	4620      	mov	r0, r4
    e94a:	63a3      	str	r3, [r4, #56]	; 0x38
    e94c:	f007 fce6 	bl	1631c <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
    e950:	f1b8 0f00 	cmp.w	r8, #0
    e954:	d128      	bne.n	e9a8 <rpmsg_init_vdev+0x190>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
    e956:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	rvdev->vdev->func->set_status(rvdev->vdev, status);
    e958:	2104      	movs	r1, #4
    e95a:	6a03      	ldr	r3, [r0, #32]
    e95c:	685b      	ldr	r3, [r3, #4]
    e95e:	4798      	blx	r3
}
    e960:	e022      	b.n	e9a8 <rpmsg_init_vdev+0x190>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
    e962:	f44f 7100 	mov.w	r1, #512	; 0x200
    e966:	4648      	mov	r0, r9
    e968:	f007 fdc6 	bl	164f8 <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
    e96c:	4605      	mov	r5, r0
    e96e:	b1c8      	cbz	r0, e9a4 <rpmsg_init_vdev+0x18c>
    e970:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
    e972:	9006      	str	r0, [sp, #24]
    e974:	1a41      	subs	r1, r0, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
    e976:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
    e978:	f44f 7300 	mov.w	r3, #512	; 0x200
    e97c:	4281      	cmp	r1, r0
    e97e:	bf28      	it	cs
    e980:	f04f 31ff 	movcs.w	r1, #4294967295
    e984:	2200      	movs	r2, #0
    e986:	4630      	mov	r0, r6
    e988:	f007 fa6c 	bl	15e64 <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
    e98c:	2301      	movs	r3, #1
    e98e:	2200      	movs	r2, #0
    e990:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    e994:	9500      	str	r5, [sp, #0]
    e996:	a906      	add	r1, sp, #24
    e998:	f007 faea 	bl	15f70 <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
    e99c:	b918      	cbnz	r0, e9a6 <rpmsg_init_vdev+0x18e>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
    e99e:	f10a 0a01 	add.w	sl, sl, #1
    e9a2:	e7b9      	b.n	e918 <rpmsg_init_vdev+0x100>
				return RPMSG_ERR_NO_BUFF;
    e9a4:	480b      	ldr	r0, [pc, #44]	; (e9d4 <rpmsg_init_vdev+0x1bc>)
    e9a6:	4607      	mov	r7, r0
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
}
    e9a8:	4638      	mov	r0, r7
    e9aa:	b008      	add	sp, #32
    e9ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return RPMSG_ERR_PARAM;
    e9b0:	4f09      	ldr	r7, [pc, #36]	; (e9d8 <rpmsg_init_vdev+0x1c0>)
    e9b2:	e7f9      	b.n	e9a8 <rpmsg_init_vdev+0x190>
			return RPMSG_ERR_NO_BUFF;
    e9b4:	4f07      	ldr	r7, [pc, #28]	; (e9d4 <rpmsg_init_vdev+0x1bc>)
    e9b6:	e7f7      	b.n	e9a8 <rpmsg_init_vdev+0x190>
    e9b8:	0000e6a1 	.word	0x0000e6a1
    e9bc:	0001b4b2 	.word	0x0001b4b2
    e9c0:	0001b4ac 	.word	0x0001b4ac
    e9c4:	00016369 	.word	0x00016369
    e9c8:	00016439 	.word	0x00016439
    e9cc:	0001b4b8 	.word	0x0001b4b8
    e9d0:	000163a7 	.word	0x000163a7
    e9d4:	fffff82e 	.word	0xfffff82e
    e9d8:	fffff82d 	.word	0xfffff82d

0000e9dc <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(s32_t level)
{
    e9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			if (dev) {
				/* Initialization failed. Clear the API struct
				 * so that device_get_binding() will not succeed
				 * for it.
				 */
				dev->driver_api = NULL;
    e9de:	2700      	movs	r7, #0
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    e9e0:	4b08      	ldr	r3, [pc, #32]	; (ea04 <z_sys_init_run_level+0x28>)
    e9e2:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    e9e6:	3001      	adds	r0, #1
    e9e8:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    e9ec:	42a6      	cmp	r6, r4
    e9ee:	d800      	bhi.n	e9f2 <z_sys_init_run_level+0x16>
			}
		}
	}
}
    e9f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		retval = entry->init(dev);
    e9f2:	e9d4 3500 	ldrd	r3, r5, [r4]
    e9f6:	4628      	mov	r0, r5
    e9f8:	4798      	blx	r3
		if (retval != 0) {
    e9fa:	b108      	cbz	r0, ea00 <z_sys_init_run_level+0x24>
			if (dev) {
    e9fc:	b105      	cbz	r5, ea00 <z_sys_init_run_level+0x24>
				dev->driver_api = NULL;
    e9fe:	60af      	str	r7, [r5, #8]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    ea00:	3408      	adds	r4, #8
    ea02:	e7f3      	b.n	e9ec <z_sys_init_run_level+0x10>
    ea04:	000174d8 	.word	0x000174d8

0000ea08 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
    ea08:	4b0f      	ldr	r3, [pc, #60]	; (ea48 <z_impl_device_get_binding+0x40>)
{
    ea0a:	b570      	push	{r4, r5, r6, lr}
    ea0c:	4605      	mov	r5, r0
    ea0e:	461e      	mov	r6, r3
	for (dev = __device_start; dev != __device_end; dev++) {
    ea10:	4c0e      	ldr	r4, [pc, #56]	; (ea4c <z_impl_device_get_binding+0x44>)
    ea12:	429c      	cmp	r4, r3
    ea14:	d104      	bne.n	ea20 <z_impl_device_get_binding+0x18>
		    (dev->name == name)) {
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
    ea16:	4c0d      	ldr	r4, [pc, #52]	; (ea4c <z_impl_device_get_binding+0x44>)
    ea18:	42b4      	cmp	r4, r6
    ea1a:	d108      	bne.n	ea2e <z_impl_device_get_binding+0x26>
		    (strcmp(name, dev->name) == 0)) {
			return dev;
		}
	}

	return NULL;
    ea1c:	2400      	movs	r4, #0
    ea1e:	e010      	b.n	ea42 <z_impl_device_get_binding+0x3a>
		if ((dev->driver_api != NULL) &&
    ea20:	68a2      	ldr	r2, [r4, #8]
    ea22:	b112      	cbz	r2, ea2a <z_impl_device_get_binding+0x22>
    ea24:	6822      	ldr	r2, [r4, #0]
    ea26:	42aa      	cmp	r2, r5
    ea28:	d00b      	beq.n	ea42 <z_impl_device_get_binding+0x3a>
	for (dev = __device_start; dev != __device_end; dev++) {
    ea2a:	3410      	adds	r4, #16
    ea2c:	e7f1      	b.n	ea12 <z_impl_device_get_binding+0xa>
		if ((dev->driver_api != NULL) &&
    ea2e:	68a3      	ldr	r3, [r4, #8]
    ea30:	b90b      	cbnz	r3, ea36 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    ea32:	3410      	adds	r4, #16
    ea34:	e7f0      	b.n	ea18 <z_impl_device_get_binding+0x10>
		    (strcmp(name, dev->name) == 0)) {
    ea36:	4628      	mov	r0, r5
    ea38:	6821      	ldr	r1, [r4, #0]
    ea3a:	f004 fd6e 	bl	1351a <strcmp>
		if ((dev->driver_api != NULL) &&
    ea3e:	2800      	cmp	r0, #0
    ea40:	d1f7      	bne.n	ea32 <z_impl_device_get_binding+0x2a>
}
    ea42:	4620      	mov	r0, r4
    ea44:	bd70      	pop	{r4, r5, r6, pc}
    ea46:	bf00      	nop
    ea48:	200003c0 	.word	0x200003c0
    ea4c:	20000340 	.word	0x20000340

0000ea50 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    ea50:	4b01      	ldr	r3, [pc, #4]	; (ea58 <z_impl_z_errno+0x8>)
    ea52:	6898      	ldr	r0, [r3, #8]
}
    ea54:	305c      	adds	r0, #92	; 0x5c
    ea56:	4770      	bx	lr
    ea58:	20001d84 	.word	0x20001d84

0000ea5c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    ea5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ea5e:	4604      	mov	r4, r0
    ea60:	460e      	mov	r6, r1
	__asm__ volatile(
    ea62:	f04f 0320 	mov.w	r3, #32
    ea66:	f3ef 8711 	mrs	r7, BASEPRI
    ea6a:	f383 8811 	msr	BASEPRI, r3
    ea6e:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    ea72:	f001 ffdf 	bl	10a34 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    ea76:	2200      	movs	r2, #0
    ea78:	2c04      	cmp	r4, #4
    ea7a:	bf98      	it	ls
    ea7c:	4b21      	ldrls	r3, [pc, #132]	; (eb04 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa4>)
    ea7e:	4605      	mov	r5, r0
	switch (reason) {
    ea80:	bf94      	ite	ls
    ea82:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
    ea86:	4b20      	ldrhi	r3, [pc, #128]	; (eb08 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa8>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    ea88:	9200      	str	r2, [sp, #0]
    ea8a:	2145      	movs	r1, #69	; 0x45
    ea8c:	4622      	mov	r2, r4
    ea8e:	481f      	ldr	r0, [pc, #124]	; (eb0c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xac>)
    ea90:	f003 fa5a 	bl	11f48 <printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    ea94:	b13e      	cbz	r6, eaa6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x46>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    ea96:	69f3      	ldr	r3, [r6, #28]
    ea98:	f3c3 0308 	ubfx	r3, r3, #0, #9
    ea9c:	b11b      	cbz	r3, eaa6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x46>
		LOG_ERR("Fault during interrupt handling\n");
    ea9e:	2145      	movs	r1, #69	; 0x45
    eaa0:	481b      	ldr	r0, [pc, #108]	; (eb10 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb0>)
    eaa2:	f003 fa51 	bl	11f48 <printk>
	const char *thread_name = k_thread_name_get(thread);
    eaa6:	4628      	mov	r0, r5
    eaa8:	f007 fdf7 	bl	1669a <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
    eaac:	4603      	mov	r3, r0
    eaae:	b330      	cbz	r0, eafe <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9e>
    eab0:	7801      	ldrb	r1, [r0, #0]
		thread_name = "unknown";
    eab2:	4a18      	ldr	r2, [pc, #96]	; (eb14 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb4>)
    eab4:	2900      	cmp	r1, #0
    eab6:	bf08      	it	eq
    eab8:	4613      	moveq	r3, r2
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    eaba:	462a      	mov	r2, r5
    eabc:	2145      	movs	r1, #69	; 0x45
    eabe:	4816      	ldr	r0, [pc, #88]	; (eb18 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb8>)
    eac0:	f003 fa42 	bl	11f48 <printk>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
    eac4:	4631      	mov	r1, r6
    eac6:	4620      	mov	r0, r4
    eac8:	f7ff fa18 	bl	defc <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    eacc:	2c04      	cmp	r4, #4
    eace:	d10c      	bne.n	eaea <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8a>
    ead0:	4912      	ldr	r1, [pc, #72]	; (eb1c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbc>)
    ead2:	238b      	movs	r3, #139	; 0x8b
    ead4:	4a12      	ldr	r2, [pc, #72]	; (eb20 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc0>)
    ead6:	4813      	ldr	r0, [pc, #76]	; (eb24 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc4>)
    ead8:	f003 fa36 	bl	11f48 <printk>
    eadc:	4812      	ldr	r0, [pc, #72]	; (eb28 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc8>)
    eade:	f003 fa33 	bl	11f48 <printk>
    eae2:	218b      	movs	r1, #139	; 0x8b
    eae4:	480e      	ldr	r0, [pc, #56]	; (eb20 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc0>)
    eae6:	f003 fcc5 	bl	12474 <assert_post_action>
	__asm__ volatile(
    eaea:	f387 8811 	msr	BASEPRI, r7
    eaee:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    eaf2:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    eaf4:	b003      	add	sp, #12
    eaf6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    eafa:	f7f5 bbb1 	b.w	4260 <z_impl_k_thread_abort>
		thread_name = "unknown";
    eafe:	4b05      	ldr	r3, [pc, #20]	; (eb14 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb4>)
    eb00:	e7db      	b.n	eaba <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5a>
    eb02:	bf00      	nop
    eb04:	000174f0 	.word	0x000174f0
    eb08:	0001b4bb 	.word	0x0001b4bb
    eb0c:	0001b4d1 	.word	0x0001b4d1
    eb10:	0001b4fe 	.word	0x0001b4fe
    eb14:	0001b4c9 	.word	0x0001b4c9
    eb18:	0001b524 	.word	0x0001b524
    eb1c:	0001b563 	.word	0x0001b563
    eb20:	0001b541 	.word	0x0001b541
    eb24:	00017b50 	.word	0x00017b50
    eb28:	0001b580 	.word	0x0001b580

0000eb2c <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    eb2c:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    eb2e:	4d0b      	ldr	r5, [pc, #44]	; (eb5c <idle+0x30>)
	__asm__ volatile(
    eb30:	f04f 0220 	mov.w	r2, #32
    eb34:	f3ef 8311 	mrs	r3, BASEPRI
    eb38:	f382 8811 	msr	BASEPRI, r2
    eb3c:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
    eb40:	f002 fc22 	bl	11388 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    eb44:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
    eb46:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    eb48:	2802      	cmp	r0, #2
    eb4a:	bfd8      	it	le
    eb4c:	4608      	movle	r0, r1
    eb4e:	f002 fc63 	bl	11418 <z_set_timeout_expiry>
	_kernel.idle = ticks;
    eb52:	622c      	str	r4, [r5, #32]
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    eb54:	f7f5 f8c2 	bl	3cdc <arch_cpu_idle>
}
    eb58:	e7ea      	b.n	eb30 <idle+0x4>
    eb5a:	bf00      	nop
    eb5c:	20001d84 	.word	0x20001d84

0000eb60 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    eb60:	4802      	ldr	r0, [pc, #8]	; (eb6c <z_bss_zero+0xc>)
    eb62:	4a03      	ldr	r2, [pc, #12]	; (eb70 <z_bss_zero+0x10>)
    eb64:	2100      	movs	r1, #0
    eb66:	1a12      	subs	r2, r2, r0
    eb68:	f004 bd2d 	b.w	135c6 <memset>
    eb6c:	20000690 	.word	0x20000690
    eb70:	20001fac 	.word	0x20001fac

0000eb74 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    eb74:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    eb76:	4806      	ldr	r0, [pc, #24]	; (eb90 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    eb78:	4a06      	ldr	r2, [pc, #24]	; (eb94 <z_data_copy+0x20>)
    eb7a:	4907      	ldr	r1, [pc, #28]	; (eb98 <z_data_copy+0x24>)
    eb7c:	1a12      	subs	r2, r2, r0
    eb7e:	f004 fcf7 	bl	13570 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    eb82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    eb86:	4a05      	ldr	r2, [pc, #20]	; (eb9c <z_data_copy+0x28>)
    eb88:	4905      	ldr	r1, [pc, #20]	; (eba0 <z_data_copy+0x2c>)
    eb8a:	4806      	ldr	r0, [pc, #24]	; (eba4 <z_data_copy+0x30>)
    eb8c:	f004 bcf0 	b.w	13570 <memcpy>
    eb90:	20000000 	.word	0x20000000
    eb94:	2000068c 	.word	0x2000068c
    eb98:	0001bc68 	.word	0x0001bc68
    eb9c:	00000000 	.word	0x00000000
    eba0:	0001bc68 	.word	0x0001bc68
    eba4:	20000000 	.word	0x20000000

0000eba8 <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
    eba8:	2201      	movs	r2, #1
{
    ebaa:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    ebac:	4b0b      	ldr	r3, [pc, #44]	; (ebdc <bg_thread_main+0x34>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    ebae:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    ebb0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    ebb2:	f7ff ff13 	bl	e9dc <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    ebb6:	4a0a      	ldr	r2, [pc, #40]	; (ebe0 <bg_thread_main+0x38>)
    ebb8:	490a      	ldr	r1, [pc, #40]	; (ebe4 <bg_thread_main+0x3c>)
    ebba:	480b      	ldr	r0, [pc, #44]	; (ebe8 <bg_thread_main+0x40>)
    ebbc:	f003 f9c4 	bl	11f48 <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    ebc0:	2003      	movs	r0, #3
    ebc2:	f7ff ff0b 	bl	e9dc <z_sys_init_run_level>

	z_init_static_threads();
    ebc6:	f002 f8c7 	bl	10d58 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    ebca:	f7f2 f999 	bl	f00 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    ebce:	4a07      	ldr	r2, [pc, #28]	; (ebec <bg_thread_main+0x44>)
    ebd0:	7b13      	ldrb	r3, [r2, #12]
    ebd2:	f023 0301 	bic.w	r3, r3, #1
    ebd6:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    ebd8:	bd08      	pop	{r3, pc}
    ebda:	bf00      	nop
    ebdc:	20001fa8 	.word	0x20001fa8
    ebe0:	0001af26 	.word	0x0001af26
    ebe4:	0001b5ff 	.word	0x0001b5ff
    ebe8:	0001b60f 	.word	0x0001b60f
    ebec:	200013a8 	.word	0x200013a8

0000ebf0 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    ebf0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(z_interrupt_stacks[0])) +
    ebf4:	4b36      	ldr	r3, [pc, #216]	; (ecd0 <z_cstart+0xe0>)
    ebf6:	b0a5      	sub	sp, #148	; 0x94
    ebf8:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    ebfc:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    ec00:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ec04:	2400      	movs	r4, #0
    ec06:	23e0      	movs	r3, #224	; 0xe0
    ec08:	4d32      	ldr	r5, [pc, #200]	; (ecd4 <z_cstart+0xe4>)
	z_setup_new_thread(&z_main_thread, z_main_stack,
    ec0a:	f04f 0b01 	mov.w	fp, #1
    ec0e:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    ec12:	77ec      	strb	r4, [r5, #31]
    ec14:	762c      	strb	r4, [r5, #24]
    ec16:	766c      	strb	r4, [r5, #25]
    ec18:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    ec1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
    ec1c:	4e2e      	ldr	r6, [pc, #184]	; (ecd8 <z_cstart+0xe8>)
    ec1e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    ec22:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    ec24:	f7f5 fae4 	bl	41f0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    ec28:	f7f5 f852 	bl	3cd0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    ec2c:	f04f 33ff 	mov.w	r3, #4294967295
    ec30:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    ec32:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    ec34:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = 0;
#endif

	_current_cpu->current = dummy_thread;
    ec38:	4d28      	ldr	r5, [pc, #160]	; (ecdc <z_cstart+0xec>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    ec3a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	_current_cpu->current = dummy_thread;
    ec3e:	ab07      	add	r3, sp, #28
    ec40:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    ec42:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
    ec44:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
    ec48:	f7ff fec8 	bl	e9dc <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    ec4c:	2001      	movs	r0, #1
    ec4e:	f7ff fec5 	bl	e9dc <z_sys_init_run_level>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    ec52:	f8df a09c 	ldr.w	sl, [pc, #156]	; ecf0 <z_cstart+0x100>
	z_sched_init();
    ec56:	f001 fd65 	bl	10724 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    ec5a:	f8df 8098 	ldr.w	r8, [pc, #152]	; ecf4 <z_cstart+0x104>
    ec5e:	4b20      	ldr	r3, [pc, #128]	; (ece0 <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
    ec60:	626e      	str	r6, [r5, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
    ec62:	f44f 6280 	mov.w	r2, #1024	; 0x400
    ec66:	4641      	mov	r1, r8
    ec68:	4630      	mov	r0, r6
    ec6a:	9305      	str	r3, [sp, #20]
    ec6c:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    ec70:	4653      	mov	r3, sl
    ec72:	e9cd 4401 	strd	r4, r4, [sp, #4]
    ec76:	9400      	str	r4, [sp, #0]
    ec78:	f001 ffc8 	bl	10c0c <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    ec7c:	7b73      	ldrb	r3, [r6, #13]
	z_ready_thread(&z_main_thread);
    ec7e:	4630      	mov	r0, r6
    ec80:	f023 0304 	bic.w	r3, r3, #4
    ec84:	7373      	strb	r3, [r6, #13]
    ec86:	f001 f835 	bl	fcf4 <z_ready_thread>
	z_setup_new_thread(thread, stack,
    ec8a:	230f      	movs	r3, #15
    ec8c:	4f15      	ldr	r7, [pc, #84]	; (ece4 <z_cstart+0xf4>)
    ec8e:	f44f 72a0 	mov.w	r2, #320	; 0x140
    ec92:	4638      	mov	r0, r7
    ec94:	e9cd 4302 	strd	r4, r3, [sp, #8]
    ec98:	4913      	ldr	r1, [pc, #76]	; (ece8 <z_cstart+0xf8>)
    ec9a:	4b14      	ldr	r3, [pc, #80]	; (ecec <z_cstart+0xfc>)
    ec9c:	e9cd b404 	strd	fp, r4, [sp, #16]
    eca0:	e9cd 4400 	strd	r4, r4, [sp]
    eca4:	f001 ffb2 	bl	10c0c <z_setup_new_thread>
    eca8:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
    ecaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
    ecae:	f023 0304 	bic.w	r3, r3, #4
    ecb2:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    ecb4:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
    ecb8:	e9c5 3306 	strd	r3, r3, [r5, #24]
    ecbc:	4641      	mov	r1, r8
    ecbe:	4653      	mov	r3, sl
    ecc0:	4630      	mov	r0, r6
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    ecc2:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
    ecc4:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
    ecc6:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
    ecca:	f7f4 ffe3 	bl	3c94 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    ecce:	bf00      	nop
    ecd0:	200037d8 	.word	0x200037d8
    ecd4:	e000ed00 	.word	0xe000ed00
    ecd8:	200013a8 	.word	0x200013a8
    ecdc:	20001d84 	.word	0x20001d84
    ece0:	0001b636 	.word	0x0001b636
    ece4:	20001334 	.word	0x20001334
    ece8:	20003698 	.word	0x20003698
    ecec:	0000eb2d 	.word	0x0000eb2d
    ecf0:	0000eba9 	.word	0x0000eba9
    ecf4:	20003298 	.word	0x20003298

0000ecf8 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(struct device *unused)
{
    ecf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    ecfa:	4d0f      	ldr	r5, [pc, #60]	; (ed38 <statics_init+0x40>)
    ecfc:	4c0f      	ldr	r4, [pc, #60]	; (ed3c <statics_init+0x44>)
    ecfe:	462f      	mov	r7, r5
    ed00:	4e0f      	ldr	r6, [pc, #60]	; (ed40 <statics_init+0x48>)
    ed02:	42ac      	cmp	r4, r5
    ed04:	d90c      	bls.n	ed20 <statics_init+0x28>
    ed06:	490f      	ldr	r1, [pc, #60]	; (ed44 <statics_init+0x4c>)
    ed08:	2315      	movs	r3, #21
    ed0a:	4632      	mov	r2, r6
    ed0c:	480e      	ldr	r0, [pc, #56]	; (ed48 <statics_init+0x50>)
    ed0e:	f003 f91b 	bl	11f48 <printk>
    ed12:	480e      	ldr	r0, [pc, #56]	; (ed4c <statics_init+0x54>)
    ed14:	f003 f918 	bl	11f48 <printk>
    ed18:	2115      	movs	r1, #21
    ed1a:	4630      	mov	r0, r6
    ed1c:	f003 fbaa 	bl	12474 <assert_post_action>
    ed20:	42bc      	cmp	r4, r7
    ed22:	d301      	bcc.n	ed28 <statics_init+0x30>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
    ed24:	2000      	movs	r0, #0
    ed26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    ed28:	4620      	mov	r0, r4
    ed2a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    ed2e:	f007 fbf8 	bl	16522 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    ed32:	3418      	adds	r4, #24
    ed34:	e7e5      	b.n	ed02 <statics_init+0xa>
    ed36:	bf00      	nop
    ed38:	20000410 	.word	0x20000410
    ed3c:	200003f8 	.word	0x200003f8
    ed40:	0001b63e 	.word	0x0001b63e
    ed44:	0001b660 	.word	0x0001b660
    ed48:	00017b50 	.word	0x00017b50
    ed4c:	00017b6d 	.word	0x00017b6d

0000ed50 <k_heap_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
    ed50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ed54:	4606      	mov	r6, r0
    ed56:	b087      	sub	sp, #28
    ed58:	468a      	mov	sl, r1
	s64_t now, end = z_timeout_end_calc(timeout);
    ed5a:	4610      	mov	r0, r2
    ed5c:	4619      	mov	r1, r3
{
    ed5e:	4690      	mov	r8, r2
    ed60:	4699      	mov	r9, r3
	s64_t now, end = z_timeout_end_calc(timeout);
    ed62:	f007 fd06 	bl	16772 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    ed66:	f106 0414 	add.w	r4, r6, #20
	s64_t now, end = z_timeout_end_calc(timeout);
    ed6a:	e9cd 0104 	strd	r0, r1, [sp, #16]
    ed6e:	f04f 0320 	mov.w	r3, #32
    ed72:	f3ef 8511 	mrs	r5, BASEPRI
    ed76:	f383 8811 	msr	BASEPRI, r3
    ed7a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ed7e:	4620      	mov	r0, r4
    ed80:	f002 f878 	bl	10e74 <z_spin_lock_valid>
    ed84:	b968      	cbnz	r0, eda2 <k_heap_alloc+0x52>
    ed86:	235c      	movs	r3, #92	; 0x5c
    ed88:	4a3f      	ldr	r2, [pc, #252]	; (ee88 <k_heap_alloc+0x138>)
    ed8a:	4940      	ldr	r1, [pc, #256]	; (ee8c <k_heap_alloc+0x13c>)
    ed8c:	4840      	ldr	r0, [pc, #256]	; (ee90 <k_heap_alloc+0x140>)
    ed8e:	f003 f8db 	bl	11f48 <printk>
    ed92:	4621      	mov	r1, r4
    ed94:	483f      	ldr	r0, [pc, #252]	; (ee94 <k_heap_alloc+0x144>)
    ed96:	f003 f8d7 	bl	11f48 <printk>
    ed9a:	215c      	movs	r1, #92	; 0x5c
    ed9c:	483a      	ldr	r0, [pc, #232]	; (ee88 <k_heap_alloc+0x138>)
    ed9e:	f003 fb69 	bl	12474 <assert_post_action>
	z_spin_lock_set_owner(l);
    eda2:	4620      	mov	r0, r4
    eda4:	f002 f882 	bl	10eac <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    eda8:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
    edac:	b17b      	cbz	r3, edce <k_heap_alloc+0x7e>
    edae:	ea58 0309 	orrs.w	r3, r8, r9
    edb2:	d00c      	beq.n	edce <k_heap_alloc+0x7e>
    edb4:	4938      	ldr	r1, [pc, #224]	; (ee98 <k_heap_alloc+0x148>)
    edb6:	2323      	movs	r3, #35	; 0x23
    edb8:	4a38      	ldr	r2, [pc, #224]	; (ee9c <k_heap_alloc+0x14c>)
    edba:	4835      	ldr	r0, [pc, #212]	; (ee90 <k_heap_alloc+0x140>)
    edbc:	f003 f8c4 	bl	11f48 <printk>
    edc0:	4837      	ldr	r0, [pc, #220]	; (eea0 <k_heap_alloc+0x150>)
    edc2:	f003 f8c1 	bl	11f48 <printk>
    edc6:	2123      	movs	r1, #35	; 0x23
    edc8:	4834      	ldr	r0, [pc, #208]	; (ee9c <k_heap_alloc+0x14c>)
    edca:	f003 fb53 	bl	12474 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    edce:	f8df 80b8 	ldr.w	r8, [pc, #184]	; ee88 <k_heap_alloc+0x138>
    edd2:	f8df 90b8 	ldr.w	r9, [pc, #184]	; ee8c <k_heap_alloc+0x13c>
    edd6:	f8df b0b8 	ldr.w	fp, [pc, #184]	; ee90 <k_heap_alloc+0x140>

	while (ret == NULL) {
		ret = sys_heap_alloc(&h->heap, bytes);
    edda:	4651      	mov	r1, sl
    eddc:	4630      	mov	r0, r6
    edde:	f003 faad 	bl	1233c <sys_heap_alloc>
    ede2:	4607      	mov	r7, r0

		now = z_tick_get();
    ede4:	f002 fc18 	bl	11618 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
    ede8:	b1cf      	cbz	r7, ee1e <k_heap_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    edea:	4620      	mov	r0, r4
    edec:	f002 f850 	bl	10e90 <z_spin_unlock_valid>
    edf0:	b968      	cbnz	r0, ee0e <k_heap_alloc+0xbe>
    edf2:	2384      	movs	r3, #132	; 0x84
    edf4:	4a24      	ldr	r2, [pc, #144]	; (ee88 <k_heap_alloc+0x138>)
    edf6:	492b      	ldr	r1, [pc, #172]	; (eea4 <k_heap_alloc+0x154>)
    edf8:	4825      	ldr	r0, [pc, #148]	; (ee90 <k_heap_alloc+0x140>)
    edfa:	f003 f8a5 	bl	11f48 <printk>
    edfe:	4621      	mov	r1, r4
    ee00:	4829      	ldr	r0, [pc, #164]	; (eea8 <k_heap_alloc+0x158>)
    ee02:	f003 f8a1 	bl	11f48 <printk>
    ee06:	2184      	movs	r1, #132	; 0x84
    ee08:	481f      	ldr	r0, [pc, #124]	; (ee88 <k_heap_alloc+0x138>)
    ee0a:	f003 fb33 	bl	12474 <assert_post_action>
	__asm__ volatile(
    ee0e:	f385 8811 	msr	BASEPRI, r5
    ee12:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
    ee16:	4638      	mov	r0, r7
    ee18:	b007      	add	sp, #28
    ee1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
    ee1e:	9b04      	ldr	r3, [sp, #16]
    ee20:	1a1b      	subs	r3, r3, r0
    ee22:	9302      	str	r3, [sp, #8]
    ee24:	9b05      	ldr	r3, [sp, #20]
    ee26:	eb63 0301 	sbc.w	r3, r3, r1
    ee2a:	9303      	str	r3, [sp, #12]
    ee2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    ee30:	2a01      	cmp	r2, #1
    ee32:	f173 0300 	sbcs.w	r3, r3, #0
    ee36:	dbd8      	blt.n	edea <k_heap_alloc+0x9a>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    ee38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    ee3c:	4629      	mov	r1, r5
    ee3e:	e9cd 2300 	strd	r2, r3, [sp]
    ee42:	4620      	mov	r0, r4
    ee44:	f106 020c 	add.w	r2, r6, #12
    ee48:	f001 fb1c 	bl	10484 <z_pend_curr>
	__asm__ volatile(
    ee4c:	f04f 0320 	mov.w	r3, #32
    ee50:	f3ef 8511 	mrs	r5, BASEPRI
    ee54:	f383 8811 	msr	BASEPRI, r3
    ee58:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ee5c:	4620      	mov	r0, r4
    ee5e:	f002 f809 	bl	10e74 <z_spin_lock_valid>
    ee62:	b968      	cbnz	r0, ee80 <k_heap_alloc+0x130>
    ee64:	235c      	movs	r3, #92	; 0x5c
    ee66:	4642      	mov	r2, r8
    ee68:	4649      	mov	r1, r9
    ee6a:	4658      	mov	r0, fp
    ee6c:	f003 f86c 	bl	11f48 <printk>
    ee70:	4621      	mov	r1, r4
    ee72:	4808      	ldr	r0, [pc, #32]	; (ee94 <k_heap_alloc+0x144>)
    ee74:	f003 f868 	bl	11f48 <printk>
    ee78:	215c      	movs	r1, #92	; 0x5c
    ee7a:	4640      	mov	r0, r8
    ee7c:	f003 fafa 	bl	12474 <assert_post_action>
	z_spin_lock_set_owner(l);
    ee80:	4620      	mov	r0, r4
    ee82:	f002 f813 	bl	10eac <z_spin_lock_set_owner>
	return k;
    ee86:	e7a8      	b.n	edda <k_heap_alloc+0x8a>
    ee88:	00017fdb 	.word	0x00017fdb
    ee8c:	00018001 	.word	0x00018001
    ee90:	00017b50 	.word	0x00017b50
    ee94:	00018016 	.word	0x00018016
    ee98:	0001b676 	.word	0x0001b676
    ee9c:	0001b63e 	.word	0x0001b63e
    eea0:	0001af24 	.word	0x0001af24
    eea4:	0001802e 	.word	0x0001802e
    eea8:	00018045 	.word	0x00018045

0000eeac <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
    eeac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eeae:	4605      	mov	r5, r0
    eeb0:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    eeb2:	f100 0414 	add.w	r4, r0, #20
    eeb6:	f04f 0320 	mov.w	r3, #32
    eeba:	f3ef 8711 	mrs	r7, BASEPRI
    eebe:	f383 8811 	msr	BASEPRI, r3
    eec2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    eec6:	4620      	mov	r0, r4
    eec8:	f001 ffd4 	bl	10e74 <z_spin_lock_valid>
    eecc:	b968      	cbnz	r0, eeea <k_heap_free+0x3e>
    eece:	235c      	movs	r3, #92	; 0x5c
    eed0:	4a1a      	ldr	r2, [pc, #104]	; (ef3c <k_heap_free+0x90>)
    eed2:	491b      	ldr	r1, [pc, #108]	; (ef40 <k_heap_free+0x94>)
    eed4:	481b      	ldr	r0, [pc, #108]	; (ef44 <k_heap_free+0x98>)
    eed6:	f003 f837 	bl	11f48 <printk>
    eeda:	4621      	mov	r1, r4
    eedc:	481a      	ldr	r0, [pc, #104]	; (ef48 <k_heap_free+0x9c>)
    eede:	f003 f833 	bl	11f48 <printk>
    eee2:	215c      	movs	r1, #92	; 0x5c
    eee4:	4815      	ldr	r0, [pc, #84]	; (ef3c <k_heap_free+0x90>)
    eee6:	f003 fac5 	bl	12474 <assert_post_action>
	z_spin_lock_set_owner(l);
    eeea:	4620      	mov	r0, r4
    eeec:	f001 ffde 	bl	10eac <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
    eef0:	4628      	mov	r0, r5
    eef2:	4631      	mov	r1, r6
    eef4:	f003 f96f 	bl	121d6 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
    eef8:	f105 000c 	add.w	r0, r5, #12
    eefc:	f007 fba2 	bl	16644 <z_unpend_all>
    ef00:	b128      	cbz	r0, ef0e <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
    ef02:	4639      	mov	r1, r7
    ef04:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    ef06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
    ef0a:	f000 bcd1 	b.w	f8b0 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ef0e:	4620      	mov	r0, r4
    ef10:	f001 ffbe 	bl	10e90 <z_spin_unlock_valid>
    ef14:	b968      	cbnz	r0, ef32 <k_heap_free+0x86>
    ef16:	2384      	movs	r3, #132	; 0x84
    ef18:	4a08      	ldr	r2, [pc, #32]	; (ef3c <k_heap_free+0x90>)
    ef1a:	490c      	ldr	r1, [pc, #48]	; (ef4c <k_heap_free+0xa0>)
    ef1c:	4809      	ldr	r0, [pc, #36]	; (ef44 <k_heap_free+0x98>)
    ef1e:	f003 f813 	bl	11f48 <printk>
    ef22:	4621      	mov	r1, r4
    ef24:	480a      	ldr	r0, [pc, #40]	; (ef50 <k_heap_free+0xa4>)
    ef26:	f003 f80f 	bl	11f48 <printk>
    ef2a:	2184      	movs	r1, #132	; 0x84
    ef2c:	4803      	ldr	r0, [pc, #12]	; (ef3c <k_heap_free+0x90>)
    ef2e:	f003 faa1 	bl	12474 <assert_post_action>
	__asm__ volatile(
    ef32:	f387 8811 	msr	BASEPRI, r7
    ef36:	f3bf 8f6f 	isb	sy
}
    ef3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ef3c:	00017fdb 	.word	0x00017fdb
    ef40:	00018001 	.word	0x00018001
    ef44:	00017b50 	.word	0x00017b50
    ef48:	00018016 	.word	0x00018016
    ef4c:	0001802e 	.word	0x0001802e
    ef50:	00018045 	.word	0x00018045

0000ef54 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
    ef54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    ef58:	4d16      	ldr	r5, [pc, #88]	; (efb4 <init_mem_slab_module+0x60>)
    ef5a:	4c17      	ldr	r4, [pc, #92]	; (efb8 <init_mem_slab_module+0x64>)
    ef5c:	46a8      	mov	r8, r5
    ef5e:	4e17      	ldr	r6, [pc, #92]	; (efbc <init_mem_slab_module+0x68>)
    ef60:	42ac      	cmp	r4, r5
    ef62:	d90c      	bls.n	ef7e <init_mem_slab_module+0x2a>
    ef64:	4916      	ldr	r1, [pc, #88]	; (efc0 <init_mem_slab_module+0x6c>)
    ef66:	2342      	movs	r3, #66	; 0x42
    ef68:	4632      	mov	r2, r6
    ef6a:	4816      	ldr	r0, [pc, #88]	; (efc4 <init_mem_slab_module+0x70>)
    ef6c:	f002 ffec 	bl	11f48 <printk>
    ef70:	4815      	ldr	r0, [pc, #84]	; (efc8 <init_mem_slab_module+0x74>)
    ef72:	f002 ffe9 	bl	11f48 <printk>
    ef76:	2142      	movs	r1, #66	; 0x42
    ef78:	4630      	mov	r0, r6
    ef7a:	f003 fa7b 	bl	12474 <assert_post_action>
    ef7e:	4544      	cmp	r4, r8
    ef80:	d302      	bcc.n	ef88 <init_mem_slab_module+0x34>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
    ef82:	2000      	movs	r0, #0
	return rc;
}
    ef84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    ef88:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    ef8c:	ea41 0302 	orr.w	r3, r1, r2
    ef90:	f013 0303 	ands.w	r3, r3, #3
    ef94:	d10b      	bne.n	efae <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
    ef96:	68a0      	ldr	r0, [r4, #8]
	slab->free_list = NULL;
    ef98:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    ef9a:	4283      	cmp	r3, r0
    ef9c:	d101      	bne.n	efa2 <init_mem_slab_module+0x4e>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    ef9e:	341c      	adds	r4, #28
    efa0:	e7de      	b.n	ef60 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
    efa2:	6967      	ldr	r7, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    efa4:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
    efa6:	600f      	str	r7, [r1, #0]
		slab->free_list = p;
    efa8:	6161      	str	r1, [r4, #20]
		p += slab->block_size;
    efaa:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    efac:	e7f5      	b.n	ef9a <init_mem_slab_module+0x46>
		return -EINVAL;
    efae:	f06f 0015 	mvn.w	r0, #21
	return rc;
    efb2:	e7e7      	b.n	ef84 <init_mem_slab_module+0x30>
    efb4:	200003f8 	.word	0x200003f8
    efb8:	200003c0 	.word	0x200003c0
    efbc:	0001b6bb 	.word	0x0001b6bb
    efc0:	0001b6e0 	.word	0x0001b6e0
    efc4:	00017b50 	.word	0x00017b50
    efc8:	00017b6d 	.word	0x00017b6d

0000efcc <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    efcc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    efd0:	4604      	mov	r4, r0
    efd2:	460d      	mov	r5, r1
    efd4:	4616      	mov	r6, r2
    efd6:	461f      	mov	r7, r3
	__asm__ volatile(
    efd8:	f04f 0320 	mov.w	r3, #32
    efdc:	f3ef 8811 	mrs	r8, BASEPRI
    efe0:	f383 8811 	msr	BASEPRI, r3
    efe4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    efe8:	4826      	ldr	r0, [pc, #152]	; (f084 <k_mem_slab_alloc+0xb8>)
    efea:	f001 ff43 	bl	10e74 <z_spin_lock_valid>
    efee:	b968      	cbnz	r0, f00c <k_mem_slab_alloc+0x40>
    eff0:	235c      	movs	r3, #92	; 0x5c
    eff2:	4a25      	ldr	r2, [pc, #148]	; (f088 <k_mem_slab_alloc+0xbc>)
    eff4:	4925      	ldr	r1, [pc, #148]	; (f08c <k_mem_slab_alloc+0xc0>)
    eff6:	4826      	ldr	r0, [pc, #152]	; (f090 <k_mem_slab_alloc+0xc4>)
    eff8:	f002 ffa6 	bl	11f48 <printk>
    effc:	4921      	ldr	r1, [pc, #132]	; (f084 <k_mem_slab_alloc+0xb8>)
    effe:	4825      	ldr	r0, [pc, #148]	; (f094 <k_mem_slab_alloc+0xc8>)
    f000:	f002 ffa2 	bl	11f48 <printk>
    f004:	215c      	movs	r1, #92	; 0x5c
    f006:	4820      	ldr	r0, [pc, #128]	; (f088 <k_mem_slab_alloc+0xbc>)
    f008:	f003 fa34 	bl	12474 <assert_post_action>
	z_spin_lock_set_owner(l);
    f00c:	481d      	ldr	r0, [pc, #116]	; (f084 <k_mem_slab_alloc+0xb8>)
    f00e:	f001 ff4d 	bl	10eac <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
    f012:	6963      	ldr	r3, [r4, #20]
    f014:	b1eb      	cbz	r3, f052 <k_mem_slab_alloc+0x86>
		/* take a free block */
		*mem = slab->free_list;
    f016:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
    f018:	681b      	ldr	r3, [r3, #0]
    f01a:	6163      	str	r3, [r4, #20]
		slab->num_used++;
    f01c:	69a3      	ldr	r3, [r4, #24]
    f01e:	3301      	adds	r3, #1
    f020:	61a3      	str	r3, [r4, #24]
		result = 0;
    f022:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f024:	4817      	ldr	r0, [pc, #92]	; (f084 <k_mem_slab_alloc+0xb8>)
    f026:	f001 ff33 	bl	10e90 <z_spin_unlock_valid>
    f02a:	b968      	cbnz	r0, f048 <k_mem_slab_alloc+0x7c>
    f02c:	2384      	movs	r3, #132	; 0x84
    f02e:	4a16      	ldr	r2, [pc, #88]	; (f088 <k_mem_slab_alloc+0xbc>)
    f030:	4919      	ldr	r1, [pc, #100]	; (f098 <k_mem_slab_alloc+0xcc>)
    f032:	4817      	ldr	r0, [pc, #92]	; (f090 <k_mem_slab_alloc+0xc4>)
    f034:	f002 ff88 	bl	11f48 <printk>
    f038:	4912      	ldr	r1, [pc, #72]	; (f084 <k_mem_slab_alloc+0xb8>)
    f03a:	4818      	ldr	r0, [pc, #96]	; (f09c <k_mem_slab_alloc+0xd0>)
    f03c:	f002 ff84 	bl	11f48 <printk>
    f040:	2184      	movs	r1, #132	; 0x84
    f042:	4811      	ldr	r0, [pc, #68]	; (f088 <k_mem_slab_alloc+0xbc>)
    f044:	f003 fa16 	bl	12474 <assert_post_action>
	__asm__ volatile(
    f048:	f388 8811 	msr	BASEPRI, r8
    f04c:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
    f050:	e013      	b.n	f07a <k_mem_slab_alloc+0xae>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    f052:	ea56 0207 	orrs.w	r2, r6, r7
    f056:	d103      	bne.n	f060 <k_mem_slab_alloc+0x94>
		result = -ENOMEM;
    f058:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
    f05c:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
    f05e:	e7e1      	b.n	f024 <k_mem_slab_alloc+0x58>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
    f060:	4622      	mov	r2, r4
    f062:	4641      	mov	r1, r8
    f064:	e9cd 6700 	strd	r6, r7, [sp]
    f068:	4806      	ldr	r0, [pc, #24]	; (f084 <k_mem_slab_alloc+0xb8>)
    f06a:	f001 fa0b 	bl	10484 <z_pend_curr>
		if (result == 0) {
    f06e:	4604      	mov	r4, r0
    f070:	b918      	cbnz	r0, f07a <k_mem_slab_alloc+0xae>
			*mem = _current->base.swap_data;
    f072:	4b0b      	ldr	r3, [pc, #44]	; (f0a0 <k_mem_slab_alloc+0xd4>)
    f074:	689b      	ldr	r3, [r3, #8]
    f076:	695b      	ldr	r3, [r3, #20]
    f078:	602b      	str	r3, [r5, #0]
}
    f07a:	4620      	mov	r0, r4
    f07c:	b002      	add	sp, #8
    f07e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f082:	bf00      	nop
    f084:	2000141c 	.word	0x2000141c
    f088:	00017fdb 	.word	0x00017fdb
    f08c:	00018001 	.word	0x00018001
    f090:	00017b50 	.word	0x00017b50
    f094:	00018016 	.word	0x00018016
    f098:	0001802e 	.word	0x0001802e
    f09c:	00018045 	.word	0x00018045
    f0a0:	20001d84 	.word	0x20001d84

0000f0a4 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    f0a4:	b570      	push	{r4, r5, r6, lr}
    f0a6:	4604      	mov	r4, r0
    f0a8:	460d      	mov	r5, r1
	__asm__ volatile(
    f0aa:	f04f 0320 	mov.w	r3, #32
    f0ae:	f3ef 8611 	mrs	r6, BASEPRI
    f0b2:	f383 8811 	msr	BASEPRI, r3
    f0b6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f0ba:	4822      	ldr	r0, [pc, #136]	; (f144 <k_mem_slab_free+0xa0>)
    f0bc:	f001 feda 	bl	10e74 <z_spin_lock_valid>
    f0c0:	b968      	cbnz	r0, f0de <k_mem_slab_free+0x3a>
    f0c2:	235c      	movs	r3, #92	; 0x5c
    f0c4:	4a20      	ldr	r2, [pc, #128]	; (f148 <k_mem_slab_free+0xa4>)
    f0c6:	4921      	ldr	r1, [pc, #132]	; (f14c <k_mem_slab_free+0xa8>)
    f0c8:	4821      	ldr	r0, [pc, #132]	; (f150 <k_mem_slab_free+0xac>)
    f0ca:	f002 ff3d 	bl	11f48 <printk>
    f0ce:	491d      	ldr	r1, [pc, #116]	; (f144 <k_mem_slab_free+0xa0>)
    f0d0:	4820      	ldr	r0, [pc, #128]	; (f154 <k_mem_slab_free+0xb0>)
    f0d2:	f002 ff39 	bl	11f48 <printk>
    f0d6:	215c      	movs	r1, #92	; 0x5c
    f0d8:	481b      	ldr	r0, [pc, #108]	; (f148 <k_mem_slab_free+0xa4>)
    f0da:	f003 f9cb 	bl	12474 <assert_post_action>
	z_spin_lock_set_owner(l);
    f0de:	4819      	ldr	r0, [pc, #100]	; (f144 <k_mem_slab_free+0xa0>)
    f0e0:	f001 fee4 	bl	10eac <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    f0e4:	4620      	mov	r0, r4
    f0e6:	f001 fa8d 	bl	10604 <z_unpend_first_thread>

	if (pending_thread != NULL) {
    f0ea:	b158      	cbz	r0, f104 <k_mem_slab_free+0x60>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    f0ec:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    f0ee:	682a      	ldr	r2, [r5, #0]
    f0f0:	6701      	str	r1, [r0, #112]	; 0x70
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    f0f2:	6142      	str	r2, [r0, #20]
		z_ready_thread(pending_thread);
    f0f4:	f000 fdfe 	bl	fcf4 <z_ready_thread>
		z_reschedule(&lock, key);
    f0f8:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
    f0fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
    f0fe:	4811      	ldr	r0, [pc, #68]	; (f144 <k_mem_slab_free+0xa0>)
    f100:	f000 bbd6 	b.w	f8b0 <z_reschedule>
		**(char ***)mem = slab->free_list;
    f104:	682b      	ldr	r3, [r5, #0]
    f106:	6962      	ldr	r2, [r4, #20]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f108:	480e      	ldr	r0, [pc, #56]	; (f144 <k_mem_slab_free+0xa0>)
    f10a:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
    f10c:	682b      	ldr	r3, [r5, #0]
    f10e:	6163      	str	r3, [r4, #20]
		slab->num_used--;
    f110:	69a3      	ldr	r3, [r4, #24]
    f112:	3b01      	subs	r3, #1
    f114:	61a3      	str	r3, [r4, #24]
    f116:	f001 febb 	bl	10e90 <z_spin_unlock_valid>
    f11a:	b968      	cbnz	r0, f138 <k_mem_slab_free+0x94>
    f11c:	2384      	movs	r3, #132	; 0x84
    f11e:	4a0a      	ldr	r2, [pc, #40]	; (f148 <k_mem_slab_free+0xa4>)
    f120:	490d      	ldr	r1, [pc, #52]	; (f158 <k_mem_slab_free+0xb4>)
    f122:	480b      	ldr	r0, [pc, #44]	; (f150 <k_mem_slab_free+0xac>)
    f124:	f002 ff10 	bl	11f48 <printk>
    f128:	4906      	ldr	r1, [pc, #24]	; (f144 <k_mem_slab_free+0xa0>)
    f12a:	480c      	ldr	r0, [pc, #48]	; (f15c <k_mem_slab_free+0xb8>)
    f12c:	f002 ff0c 	bl	11f48 <printk>
    f130:	2184      	movs	r1, #132	; 0x84
    f132:	4805      	ldr	r0, [pc, #20]	; (f148 <k_mem_slab_free+0xa4>)
    f134:	f003 f99e 	bl	12474 <assert_post_action>
	__asm__ volatile(
    f138:	f386 8811 	msr	BASEPRI, r6
    f13c:	f3bf 8f6f 	isb	sy
}
    f140:	bd70      	pop	{r4, r5, r6, pc}
    f142:	bf00      	nop
    f144:	2000141c 	.word	0x2000141c
    f148:	00017fdb 	.word	0x00017fdb
    f14c:	00018001 	.word	0x00018001
    f150:	00017b50 	.word	0x00017b50
    f154:	00018016 	.word	0x00018016
    f158:	0001802e 	.word	0x0001802e
    f15c:	00018045 	.word	0x00018045

0000f160 <k_malloc>:
K_MEM_POOL_DEFINE(_heap_mem_pool, CONFIG_HEAP_MEM_POOL_MIN_SIZE,
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
    f160:	4601      	mov	r1, r0
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
    f162:	4801      	ldr	r0, [pc, #4]	; (f168 <k_malloc+0x8>)
    f164:	f007 ba02 	b.w	1656c <k_mem_pool_malloc>
    f168:	200002e0 	.word	0x200002e0

0000f16c <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
    f16c:	b510      	push	{r4, lr}
    f16e:	4604      	mov	r4, r0
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
    f170:	f007 fa88 	bl	16684 <k_is_in_isr>
    f174:	b948      	cbnz	r0, f18a <z_thread_malloc+0x1e>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
    f176:	4b06      	ldr	r3, [pc, #24]	; (f190 <z_thread_malloc+0x24>)
    f178:	689b      	ldr	r3, [r3, #8]
    f17a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	}

	if (pool) {
    f17c:	b13b      	cbz	r3, f18e <z_thread_malloc+0x22>
		ret = k_mem_pool_malloc(pool, size);
    f17e:	4621      	mov	r1, r4
	} else {
		ret = NULL;
	}

	return ret;
}
    f180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = k_mem_pool_malloc(pool, size);
    f184:	4618      	mov	r0, r3
    f186:	f007 b9f1 	b.w	1656c <k_mem_pool_malloc>
		pool = _HEAP_MEM_POOL;
    f18a:	4b02      	ldr	r3, [pc, #8]	; (f194 <z_thread_malloc+0x28>)
    f18c:	e7f7      	b.n	f17e <z_thread_malloc+0x12>
}
    f18e:	bd10      	pop	{r4, pc}
    f190:	20001d84 	.word	0x20001d84
    f194:	200002e0 	.word	0x200002e0

0000f198 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    f198:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    f19c:	4604      	mov	r4, r0
    f19e:	4616      	mov	r6, r2
    f1a0:	461f      	mov	r7, r3
	__asm__ volatile(
    f1a2:	f04f 0320 	mov.w	r3, #32
    f1a6:	f3ef 8811 	mrs	r8, BASEPRI
    f1aa:	f383 8811 	msr	BASEPRI, r3
    f1ae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f1b2:	4863      	ldr	r0, [pc, #396]	; (f340 <z_impl_k_mutex_lock+0x1a8>)
    f1b4:	f001 fe5e 	bl	10e74 <z_spin_lock_valid>
    f1b8:	b968      	cbnz	r0, f1d6 <z_impl_k_mutex_lock+0x3e>
    f1ba:	235c      	movs	r3, #92	; 0x5c
    f1bc:	4a61      	ldr	r2, [pc, #388]	; (f344 <z_impl_k_mutex_lock+0x1ac>)
    f1be:	4962      	ldr	r1, [pc, #392]	; (f348 <z_impl_k_mutex_lock+0x1b0>)
    f1c0:	4862      	ldr	r0, [pc, #392]	; (f34c <z_impl_k_mutex_lock+0x1b4>)
    f1c2:	f002 fec1 	bl	11f48 <printk>
    f1c6:	495e      	ldr	r1, [pc, #376]	; (f340 <z_impl_k_mutex_lock+0x1a8>)
    f1c8:	4861      	ldr	r0, [pc, #388]	; (f350 <z_impl_k_mutex_lock+0x1b8>)
    f1ca:	f002 febd 	bl	11f48 <printk>
    f1ce:	215c      	movs	r1, #92	; 0x5c
    f1d0:	485c      	ldr	r0, [pc, #368]	; (f344 <z_impl_k_mutex_lock+0x1ac>)
    f1d2:	f003 f94f 	bl	12474 <assert_post_action>
	z_spin_lock_set_owner(l);
    f1d6:	485a      	ldr	r0, [pc, #360]	; (f340 <z_impl_k_mutex_lock+0x1a8>)
    f1d8:	f001 fe68 	bl	10eac <z_spin_lock_set_owner>
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    f1dc:	68e3      	ldr	r3, [r4, #12]
    f1de:	4a5d      	ldr	r2, [pc, #372]	; (f354 <z_impl_k_mutex_lock+0x1bc>)
    f1e0:	b1fb      	cbz	r3, f222 <z_impl_k_mutex_lock+0x8a>
    f1e2:	68a0      	ldr	r0, [r4, #8]
    f1e4:	6891      	ldr	r1, [r2, #8]
    f1e6:	4288      	cmp	r0, r1
    f1e8:	d03d      	beq.n	f266 <z_impl_k_mutex_lock+0xce>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    f1ea:	ea56 0307 	orrs.w	r3, r6, r7
    f1ee:	d13c      	bne.n	f26a <z_impl_k_mutex_lock+0xd2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f1f0:	4853      	ldr	r0, [pc, #332]	; (f340 <z_impl_k_mutex_lock+0x1a8>)
    f1f2:	f001 fe4d 	bl	10e90 <z_spin_unlock_valid>
    f1f6:	b968      	cbnz	r0, f214 <z_impl_k_mutex_lock+0x7c>
    f1f8:	2384      	movs	r3, #132	; 0x84
    f1fa:	4a52      	ldr	r2, [pc, #328]	; (f344 <z_impl_k_mutex_lock+0x1ac>)
    f1fc:	4956      	ldr	r1, [pc, #344]	; (f358 <z_impl_k_mutex_lock+0x1c0>)
    f1fe:	4853      	ldr	r0, [pc, #332]	; (f34c <z_impl_k_mutex_lock+0x1b4>)
    f200:	f002 fea2 	bl	11f48 <printk>
    f204:	494e      	ldr	r1, [pc, #312]	; (f340 <z_impl_k_mutex_lock+0x1a8>)
    f206:	4855      	ldr	r0, [pc, #340]	; (f35c <z_impl_k_mutex_lock+0x1c4>)
    f208:	f002 fe9e 	bl	11f48 <printk>
    f20c:	2184      	movs	r1, #132	; 0x84
    f20e:	484d      	ldr	r0, [pc, #308]	; (f344 <z_impl_k_mutex_lock+0x1ac>)
    f210:	f003 f930 	bl	12474 <assert_post_action>
	__asm__ volatile(
    f214:	f388 8811 	msr	BASEPRI, r8
    f218:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
    f21c:	f06f 000f 	mvn.w	r0, #15
    f220:	e01e      	b.n	f260 <z_impl_k_mutex_lock+0xc8>
					_current->base.prio :
    f222:	6891      	ldr	r1, [r2, #8]
    f224:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    f228:	3301      	adds	r3, #1
    f22a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    f22c:	6893      	ldr	r3, [r2, #8]
    f22e:	4844      	ldr	r0, [pc, #272]	; (f340 <z_impl_k_mutex_lock+0x1a8>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    f230:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    f232:	60a3      	str	r3, [r4, #8]
    f234:	f001 fe2c 	bl	10e90 <z_spin_unlock_valid>
    f238:	b968      	cbnz	r0, f256 <z_impl_k_mutex_lock+0xbe>
    f23a:	2384      	movs	r3, #132	; 0x84
    f23c:	4a41      	ldr	r2, [pc, #260]	; (f344 <z_impl_k_mutex_lock+0x1ac>)
    f23e:	4946      	ldr	r1, [pc, #280]	; (f358 <z_impl_k_mutex_lock+0x1c0>)
    f240:	4842      	ldr	r0, [pc, #264]	; (f34c <z_impl_k_mutex_lock+0x1b4>)
    f242:	f002 fe81 	bl	11f48 <printk>
    f246:	493e      	ldr	r1, [pc, #248]	; (f340 <z_impl_k_mutex_lock+0x1a8>)
    f248:	4844      	ldr	r0, [pc, #272]	; (f35c <z_impl_k_mutex_lock+0x1c4>)
    f24a:	f002 fe7d 	bl	11f48 <printk>
    f24e:	2184      	movs	r1, #132	; 0x84
    f250:	483c      	ldr	r0, [pc, #240]	; (f344 <z_impl_k_mutex_lock+0x1ac>)
    f252:	f003 f90f 	bl	12474 <assert_post_action>
    f256:	f388 8811 	msr	BASEPRI, r8
    f25a:	f3bf 8f6f 	isb	sy
		return 0;
    f25e:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    f260:	b002      	add	sp, #8
    f262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    f266:	6921      	ldr	r1, [r4, #16]
    f268:	e7de      	b.n	f228 <z_impl_k_mutex_lock+0x90>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    f26a:	f990 300e 	ldrsb.w	r3, [r0, #14]
    f26e:	f991 100e 	ldrsb.w	r1, [r1, #14]
    f272:	4299      	cmp	r1, r3
    f274:	bfa8      	it	ge
    f276:	4619      	movge	r1, r3
    f278:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    f27c:	428b      	cmp	r3, r1
    f27e:	dd41      	ble.n	f304 <z_impl_k_mutex_lock+0x16c>
		return z_set_prio(mutex->owner, new_prio);
    f280:	f001 f930 	bl	104e4 <z_set_prio>
    f284:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    f286:	4622      	mov	r2, r4
    f288:	4641      	mov	r1, r8
    f28a:	e9cd 6700 	strd	r6, r7, [sp]
    f28e:	482c      	ldr	r0, [pc, #176]	; (f340 <z_impl_k_mutex_lock+0x1a8>)
    f290:	f001 f8f8 	bl	10484 <z_pend_curr>
	if (got_mutex == 0) {
    f294:	2800      	cmp	r0, #0
    f296:	d0e3      	beq.n	f260 <z_impl_k_mutex_lock+0xc8>
	__asm__ volatile(
    f298:	f04f 0320 	mov.w	r3, #32
    f29c:	f3ef 8611 	mrs	r6, BASEPRI
    f2a0:	f383 8811 	msr	BASEPRI, r3
    f2a4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f2a8:	4825      	ldr	r0, [pc, #148]	; (f340 <z_impl_k_mutex_lock+0x1a8>)
    f2aa:	f001 fde3 	bl	10e74 <z_spin_lock_valid>
    f2ae:	b968      	cbnz	r0, f2cc <z_impl_k_mutex_lock+0x134>
    f2b0:	235c      	movs	r3, #92	; 0x5c
    f2b2:	4a24      	ldr	r2, [pc, #144]	; (f344 <z_impl_k_mutex_lock+0x1ac>)
    f2b4:	4924      	ldr	r1, [pc, #144]	; (f348 <z_impl_k_mutex_lock+0x1b0>)
    f2b6:	4825      	ldr	r0, [pc, #148]	; (f34c <z_impl_k_mutex_lock+0x1b4>)
    f2b8:	f002 fe46 	bl	11f48 <printk>
    f2bc:	4920      	ldr	r1, [pc, #128]	; (f340 <z_impl_k_mutex_lock+0x1a8>)
    f2be:	4824      	ldr	r0, [pc, #144]	; (f350 <z_impl_k_mutex_lock+0x1b8>)
    f2c0:	f002 fe42 	bl	11f48 <printk>
    f2c4:	215c      	movs	r1, #92	; 0x5c
    f2c6:	481f      	ldr	r0, [pc, #124]	; (f344 <z_impl_k_mutex_lock+0x1ac>)
    f2c8:	f003 f8d4 	bl	12474 <assert_post_action>
	z_spin_lock_set_owner(l);
    f2cc:	481c      	ldr	r0, [pc, #112]	; (f340 <z_impl_k_mutex_lock+0x1a8>)
    f2ce:	f001 fded 	bl	10eac <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    f2d2:	6823      	ldr	r3, [r4, #0]
    f2d4:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f2d6:	429c      	cmp	r4, r3
    f2d8:	d007      	beq.n	f2ea <z_impl_k_mutex_lock+0x152>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    f2da:	b133      	cbz	r3, f2ea <z_impl_k_mutex_lock+0x152>
    f2dc:	f993 300e 	ldrsb.w	r3, [r3, #14]
    f2e0:	4299      	cmp	r1, r3
    f2e2:	bfa8      	it	ge
    f2e4:	4619      	movge	r1, r3
    f2e6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    f2ea:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    f2ec:	f990 300e 	ldrsb.w	r3, [r0, #14]
    f2f0:	4299      	cmp	r1, r3
    f2f2:	d109      	bne.n	f308 <z_impl_k_mutex_lock+0x170>
	if (resched) {
    f2f4:	b16d      	cbz	r5, f312 <z_impl_k_mutex_lock+0x17a>
		z_reschedule(&lock, key);
    f2f6:	4631      	mov	r1, r6
    f2f8:	4811      	ldr	r0, [pc, #68]	; (f340 <z_impl_k_mutex_lock+0x1a8>)
    f2fa:	f000 fad9 	bl	f8b0 <z_reschedule>
	return -EAGAIN;
    f2fe:	f06f 000a 	mvn.w	r0, #10
    f302:	e7ad      	b.n	f260 <z_impl_k_mutex_lock+0xc8>
	bool resched = false;
    f304:	2500      	movs	r5, #0
    f306:	e7be      	b.n	f286 <z_impl_k_mutex_lock+0xee>
		return z_set_prio(mutex->owner, new_prio);
    f308:	f001 f8ec 	bl	104e4 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    f30c:	2800      	cmp	r0, #0
    f30e:	d1f2      	bne.n	f2f6 <z_impl_k_mutex_lock+0x15e>
    f310:	e7f0      	b.n	f2f4 <z_impl_k_mutex_lock+0x15c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f312:	480b      	ldr	r0, [pc, #44]	; (f340 <z_impl_k_mutex_lock+0x1a8>)
    f314:	f001 fdbc 	bl	10e90 <z_spin_unlock_valid>
    f318:	b968      	cbnz	r0, f336 <z_impl_k_mutex_lock+0x19e>
    f31a:	2384      	movs	r3, #132	; 0x84
    f31c:	4a09      	ldr	r2, [pc, #36]	; (f344 <z_impl_k_mutex_lock+0x1ac>)
    f31e:	490e      	ldr	r1, [pc, #56]	; (f358 <z_impl_k_mutex_lock+0x1c0>)
    f320:	480a      	ldr	r0, [pc, #40]	; (f34c <z_impl_k_mutex_lock+0x1b4>)
    f322:	f002 fe11 	bl	11f48 <printk>
    f326:	4906      	ldr	r1, [pc, #24]	; (f340 <z_impl_k_mutex_lock+0x1a8>)
    f328:	480c      	ldr	r0, [pc, #48]	; (f35c <z_impl_k_mutex_lock+0x1c4>)
    f32a:	f002 fe0d 	bl	11f48 <printk>
    f32e:	2184      	movs	r1, #132	; 0x84
    f330:	4804      	ldr	r0, [pc, #16]	; (f344 <z_impl_k_mutex_lock+0x1ac>)
    f332:	f003 f89f 	bl	12474 <assert_post_action>
	__asm__ volatile(
    f336:	f386 8811 	msr	BASEPRI, r6
    f33a:	f3bf 8f6f 	isb	sy
    f33e:	e7de      	b.n	f2fe <z_impl_k_mutex_lock+0x166>
    f340:	20001d80 	.word	0x20001d80
    f344:	00017fdb 	.word	0x00017fdb
    f348:	00018001 	.word	0x00018001
    f34c:	00017b50 	.word	0x00017b50
    f350:	00018016 	.word	0x00018016
    f354:	20001d84 	.word	0x20001d84
    f358:	0001802e 	.word	0x0001802e
    f35c:	00018045 	.word	0x00018045

0000f360 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    f360:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	CHECKIF(mutex->owner == NULL) {
    f362:	6883      	ldr	r3, [r0, #8]
{
    f364:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    f366:	2b00      	cmp	r3, #0
    f368:	f000 8091 	beq.w	f48e <z_impl_k_mutex_unlock+0x12e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    f36c:	4d4b      	ldr	r5, [pc, #300]	; (f49c <z_impl_k_mutex_unlock+0x13c>)
    f36e:	68aa      	ldr	r2, [r5, #8]
    f370:	4293      	cmp	r3, r2
    f372:	f040 808f 	bne.w	f494 <z_impl_k_mutex_unlock+0x134>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    f376:	68c3      	ldr	r3, [r0, #12]
    f378:	b94b      	cbnz	r3, f38e <z_impl_k_mutex_unlock+0x2e>
    f37a:	4949      	ldr	r1, [pc, #292]	; (f4a0 <z_impl_k_mutex_unlock+0x140>)
    f37c:	4849      	ldr	r0, [pc, #292]	; (f4a4 <z_impl_k_mutex_unlock+0x144>)
    f37e:	23e6      	movs	r3, #230	; 0xe6
    f380:	4a49      	ldr	r2, [pc, #292]	; (f4a8 <z_impl_k_mutex_unlock+0x148>)
    f382:	f002 fde1 	bl	11f48 <printk>
    f386:	21e6      	movs	r1, #230	; 0xe6
    f388:	4847      	ldr	r0, [pc, #284]	; (f4a8 <z_impl_k_mutex_unlock+0x148>)
    f38a:	f003 f873 	bl	12474 <assert_post_action>
    f38e:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
    f392:	b173      	cbz	r3, f3b2 <z_impl_k_mutex_unlock+0x52>
    f394:	4945      	ldr	r1, [pc, #276]	; (f4ac <z_impl_k_mutex_unlock+0x14c>)
    f396:	f240 130b 	movw	r3, #267	; 0x10b
    f39a:	4a45      	ldr	r2, [pc, #276]	; (f4b0 <z_impl_k_mutex_unlock+0x150>)
    f39c:	4841      	ldr	r0, [pc, #260]	; (f4a4 <z_impl_k_mutex_unlock+0x144>)
    f39e:	f002 fdd3 	bl	11f48 <printk>
    f3a2:	4844      	ldr	r0, [pc, #272]	; (f4b4 <z_impl_k_mutex_unlock+0x154>)
    f3a4:	f002 fdd0 	bl	11f48 <printk>
    f3a8:	f240 110b 	movw	r1, #267	; 0x10b
    f3ac:	4840      	ldr	r0, [pc, #256]	; (f4b0 <z_impl_k_mutex_unlock+0x150>)
    f3ae:	f003 f861 	bl	12474 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
    f3b2:	68ab      	ldr	r3, [r5, #8]
    f3b4:	7bdb      	ldrb	r3, [r3, #15]
    f3b6:	2b01      	cmp	r3, #1
    f3b8:	d10e      	bne.n	f3d8 <z_impl_k_mutex_unlock+0x78>
    f3ba:	493f      	ldr	r1, [pc, #252]	; (f4b8 <z_impl_k_mutex_unlock+0x158>)
    f3bc:	f44f 7386 	mov.w	r3, #268	; 0x10c
    f3c0:	4a3b      	ldr	r2, [pc, #236]	; (f4b0 <z_impl_k_mutex_unlock+0x150>)
    f3c2:	4838      	ldr	r0, [pc, #224]	; (f4a4 <z_impl_k_mutex_unlock+0x144>)
    f3c4:	f002 fdc0 	bl	11f48 <printk>
    f3c8:	483a      	ldr	r0, [pc, #232]	; (f4b4 <z_impl_k_mutex_unlock+0x154>)
    f3ca:	f002 fdbd 	bl	11f48 <printk>
    f3ce:	f44f 7186 	mov.w	r1, #268	; 0x10c
    f3d2:	4837      	ldr	r0, [pc, #220]	; (f4b0 <z_impl_k_mutex_unlock+0x150>)
    f3d4:	f003 f84e 	bl	12474 <assert_post_action>

	--_current->base.sched_locked;
    f3d8:	68aa      	ldr	r2, [r5, #8]
    f3da:	7bd3      	ldrb	r3, [r2, #15]
    f3dc:	3b01      	subs	r3, #1
    f3de:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
    f3e0:	68e3      	ldr	r3, [r4, #12]
    f3e2:	2b01      	cmp	r3, #1
    f3e4:	d005      	beq.n	f3f2 <z_impl_k_mutex_unlock+0x92>
		mutex->lock_count--;
    f3e6:	3b01      	subs	r3, #1
    f3e8:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
    f3ea:	f000 fbbd 	bl	fb68 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
    f3ee:	2000      	movs	r0, #0
}
    f3f0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    f3f2:	f04f 0320 	mov.w	r3, #32
    f3f6:	f3ef 8511 	mrs	r5, BASEPRI
    f3fa:	f383 8811 	msr	BASEPRI, r3
    f3fe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f402:	482e      	ldr	r0, [pc, #184]	; (f4bc <z_impl_k_mutex_unlock+0x15c>)
    f404:	f001 fd36 	bl	10e74 <z_spin_lock_valid>
    f408:	b968      	cbnz	r0, f426 <z_impl_k_mutex_unlock+0xc6>
    f40a:	235c      	movs	r3, #92	; 0x5c
    f40c:	4a2c      	ldr	r2, [pc, #176]	; (f4c0 <z_impl_k_mutex_unlock+0x160>)
    f40e:	492d      	ldr	r1, [pc, #180]	; (f4c4 <z_impl_k_mutex_unlock+0x164>)
    f410:	4824      	ldr	r0, [pc, #144]	; (f4a4 <z_impl_k_mutex_unlock+0x144>)
    f412:	f002 fd99 	bl	11f48 <printk>
    f416:	4929      	ldr	r1, [pc, #164]	; (f4bc <z_impl_k_mutex_unlock+0x15c>)
    f418:	482b      	ldr	r0, [pc, #172]	; (f4c8 <z_impl_k_mutex_unlock+0x168>)
    f41a:	f002 fd95 	bl	11f48 <printk>
    f41e:	215c      	movs	r1, #92	; 0x5c
    f420:	4827      	ldr	r0, [pc, #156]	; (f4c0 <z_impl_k_mutex_unlock+0x160>)
    f422:	f003 f827 	bl	12474 <assert_post_action>
	z_spin_lock_set_owner(l);
    f426:	4825      	ldr	r0, [pc, #148]	; (f4bc <z_impl_k_mutex_unlock+0x15c>)
    f428:	f001 fd40 	bl	10eac <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    f42c:	68a0      	ldr	r0, [r4, #8]
    f42e:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
    f430:	f990 300e 	ldrsb.w	r3, [r0, #14]
    f434:	4299      	cmp	r1, r3
    f436:	d001      	beq.n	f43c <z_impl_k_mutex_unlock+0xdc>
		return z_set_prio(mutex->owner, new_prio);
    f438:	f001 f854 	bl	104e4 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    f43c:	4620      	mov	r0, r4
    f43e:	f001 f8e1 	bl	10604 <z_unpend_first_thread>
	mutex->owner = new_owner;
    f442:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    f444:	b158      	cbz	r0, f45e <z_impl_k_mutex_unlock+0xfe>
		mutex->owner_orig_prio = new_owner->base.prio;
    f446:	f990 200e 	ldrsb.w	r2, [r0, #14]
    f44a:	6122      	str	r2, [r4, #16]
    f44c:	2200      	movs	r2, #0
    f44e:	6702      	str	r2, [r0, #112]	; 0x70
		z_ready_thread(new_owner);
    f450:	f000 fc50 	bl	fcf4 <z_ready_thread>
		z_reschedule(&lock, key);
    f454:	4629      	mov	r1, r5
    f456:	4819      	ldr	r0, [pc, #100]	; (f4bc <z_impl_k_mutex_unlock+0x15c>)
    f458:	f000 fa2a 	bl	f8b0 <z_reschedule>
    f45c:	e7c5      	b.n	f3ea <z_impl_k_mutex_unlock+0x8a>
		mutex->lock_count = 0U;
    f45e:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f460:	4816      	ldr	r0, [pc, #88]	; (f4bc <z_impl_k_mutex_unlock+0x15c>)
    f462:	f001 fd15 	bl	10e90 <z_spin_unlock_valid>
    f466:	b968      	cbnz	r0, f484 <z_impl_k_mutex_unlock+0x124>
    f468:	2384      	movs	r3, #132	; 0x84
    f46a:	4a15      	ldr	r2, [pc, #84]	; (f4c0 <z_impl_k_mutex_unlock+0x160>)
    f46c:	4917      	ldr	r1, [pc, #92]	; (f4cc <z_impl_k_mutex_unlock+0x16c>)
    f46e:	480d      	ldr	r0, [pc, #52]	; (f4a4 <z_impl_k_mutex_unlock+0x144>)
    f470:	f002 fd6a 	bl	11f48 <printk>
    f474:	4911      	ldr	r1, [pc, #68]	; (f4bc <z_impl_k_mutex_unlock+0x15c>)
    f476:	4816      	ldr	r0, [pc, #88]	; (f4d0 <z_impl_k_mutex_unlock+0x170>)
    f478:	f002 fd66 	bl	11f48 <printk>
    f47c:	2184      	movs	r1, #132	; 0x84
    f47e:	4810      	ldr	r0, [pc, #64]	; (f4c0 <z_impl_k_mutex_unlock+0x160>)
    f480:	f002 fff8 	bl	12474 <assert_post_action>
	__asm__ volatile(
    f484:	f385 8811 	msr	BASEPRI, r5
    f488:	f3bf 8f6f 	isb	sy
    f48c:	e7ad      	b.n	f3ea <z_impl_k_mutex_unlock+0x8a>
		return -EINVAL;
    f48e:	f06f 0015 	mvn.w	r0, #21
    f492:	e7ad      	b.n	f3f0 <z_impl_k_mutex_unlock+0x90>
		return -EPERM;
    f494:	f04f 30ff 	mov.w	r0, #4294967295
    f498:	e7aa      	b.n	f3f0 <z_impl_k_mutex_unlock+0x90>
    f49a:	bf00      	nop
    f49c:	20001d84 	.word	0x20001d84
    f4a0:	0001b71f 	.word	0x0001b71f
    f4a4:	00017b50 	.word	0x00017b50
    f4a8:	0001b6fd 	.word	0x0001b6fd
    f4ac:	0001b761 	.word	0x0001b761
    f4b0:	0001b736 	.word	0x0001b736
    f4b4:	0001af24 	.word	0x0001af24
    f4b8:	0001b773 	.word	0x0001b773
    f4bc:	20001d80 	.word	0x20001d80
    f4c0:	00017fdb 	.word	0x00017fdb
    f4c4:	00018001 	.word	0x00018001
    f4c8:	00018016 	.word	0x00018016
    f4cc:	0001802e 	.word	0x0001802e
    f4d0:	00018045 	.word	0x00018045

0000f4d4 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
    f4d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f4d8:	4604      	mov	r4, r0
    f4da:	460e      	mov	r6, r1
    f4dc:	4690      	mov	r8, r2
    f4de:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    f4e0:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    f4e4:	f04f 0320 	mov.w	r3, #32
    f4e8:	f3ef 8711 	mrs	r7, BASEPRI
    f4ec:	f383 8811 	msr	BASEPRI, r3
    f4f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f4f4:	4628      	mov	r0, r5
    f4f6:	f001 fcbd 	bl	10e74 <z_spin_lock_valid>
    f4fa:	b968      	cbnz	r0, f518 <queue_insert+0x44>
    f4fc:	235c      	movs	r3, #92	; 0x5c
    f4fe:	4a39      	ldr	r2, [pc, #228]	; (f5e4 <queue_insert+0x110>)
    f500:	4939      	ldr	r1, [pc, #228]	; (f5e8 <queue_insert+0x114>)
    f502:	483a      	ldr	r0, [pc, #232]	; (f5ec <queue_insert+0x118>)
    f504:	f002 fd20 	bl	11f48 <printk>
    f508:	4629      	mov	r1, r5
    f50a:	4839      	ldr	r0, [pc, #228]	; (f5f0 <queue_insert+0x11c>)
    f50c:	f002 fd1c 	bl	11f48 <printk>
    f510:	215c      	movs	r1, #92	; 0x5c
    f512:	4834      	ldr	r0, [pc, #208]	; (f5e4 <queue_insert+0x110>)
    f514:	f002 ffae 	bl	12474 <assert_post_action>
	z_spin_lock_set_owner(l);
    f518:	4628      	mov	r0, r5
    f51a:	f001 fcc7 	bl	10eac <z_spin_lock_set_owner>
	struct k_thread *first_pending_thread;

	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
    f51e:	f104 000c 	add.w	r0, r4, #12
    f522:	f001 f86f 	bl	10604 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
    f526:	b158      	cbz	r0, f540 <queue_insert+0x6c>
    f528:	2400      	movs	r4, #0
    f52a:	f8c0 8014 	str.w	r8, [r0, #20]
    f52e:	6704      	str	r4, [r0, #112]	; 0x70
	z_ready_thread(thread);
    f530:	f000 fbe0 	bl	fcf4 <z_ready_thread>
		sys_sfnode_init(data, 0x0);
	}

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
    f534:	4628      	mov	r0, r5
    f536:	4639      	mov	r1, r7
    f538:	f000 f9ba 	bl	f8b0 <z_reschedule>
	return 0;
    f53c:	2000      	movs	r0, #0
    f53e:	e01e      	b.n	f57e <queue_insert+0xaa>
	if (alloc) {
    f540:	f1b9 0f00 	cmp.w	r9, #0
    f544:	d02d      	beq.n	f5a2 <queue_insert+0xce>
		anode = z_thread_malloc(sizeof(*anode));
    f546:	2008      	movs	r0, #8
    f548:	f7ff fe10 	bl	f16c <z_thread_malloc>
		if (anode == NULL) {
    f54c:	b9c8      	cbnz	r0, f582 <queue_insert+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f54e:	4628      	mov	r0, r5
    f550:	f001 fc9e 	bl	10e90 <z_spin_unlock_valid>
    f554:	b968      	cbnz	r0, f572 <queue_insert+0x9e>
    f556:	2384      	movs	r3, #132	; 0x84
    f558:	4a22      	ldr	r2, [pc, #136]	; (f5e4 <queue_insert+0x110>)
    f55a:	4926      	ldr	r1, [pc, #152]	; (f5f4 <queue_insert+0x120>)
    f55c:	4823      	ldr	r0, [pc, #140]	; (f5ec <queue_insert+0x118>)
    f55e:	f002 fcf3 	bl	11f48 <printk>
    f562:	4629      	mov	r1, r5
    f564:	4824      	ldr	r0, [pc, #144]	; (f5f8 <queue_insert+0x124>)
    f566:	f002 fcef 	bl	11f48 <printk>
    f56a:	2184      	movs	r1, #132	; 0x84
    f56c:	481d      	ldr	r0, [pc, #116]	; (f5e4 <queue_insert+0x110>)
    f56e:	f002 ff81 	bl	12474 <assert_post_action>
	__asm__ volatile(
    f572:	f387 8811 	msr	BASEPRI, r7
    f576:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
    f57a:	f06f 000b 	mvn.w	r0, #11
}
    f57e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
    f582:	2301      	movs	r3, #1
		anode->data = data;
    f584:	f8c0 8004 	str.w	r8, [r0, #4]
    f588:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
    f58a:	6803      	ldr	r3, [r0, #0]
    f58c:	f003 0303 	and.w	r3, r3, #3
    f590:	b95e      	cbnz	r6, f5aa <queue_insert+0xd6>
	parent->next_and_flags = cur_flags | (unative_t)child;
    f592:	6822      	ldr	r2, [r4, #0]
    f594:	4313      	orrs	r3, r2
    f596:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    f598:	6863      	ldr	r3, [r4, #4]
	list->head = node;
    f59a:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    f59c:	b973      	cbnz	r3, f5bc <queue_insert+0xe8>
	list->tail = node;
    f59e:	6060      	str	r0, [r4, #4]
}
    f5a0:	e00c      	b.n	f5bc <queue_insert+0xe8>
}
    f5a2:	4640      	mov	r0, r8
	node->next_and_flags = flags;
    f5a4:	f8c8 9000 	str.w	r9, [r8]
}
    f5a8:	e7ef      	b.n	f58a <queue_insert+0xb6>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    f5aa:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    f5ac:	f032 0203 	bics.w	r2, r2, #3
    f5b0:	d110      	bne.n	f5d4 <queue_insert+0x100>
Z_GENLIST_APPEND(sflist, sfnode)
    f5b2:	6862      	ldr	r2, [r4, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
    f5b4:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
    f5b6:	b93a      	cbnz	r2, f5c8 <queue_insert+0xf4>
	list->head = node;
    f5b8:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
    f5bc:	2104      	movs	r1, #4
    f5be:	f104 0014 	add.w	r0, r4, #20
    f5c2:	f007 f948 	bl	16856 <z_handle_obj_poll_events>
    f5c6:	e7b5      	b.n	f534 <queue_insert+0x60>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    f5c8:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    f5ca:	f003 0303 	and.w	r3, r3, #3
    f5ce:	4303      	orrs	r3, r0
    f5d0:	6013      	str	r3, [r2, #0]
    f5d2:	e7e4      	b.n	f59e <queue_insert+0xca>
    f5d4:	4313      	orrs	r3, r2
    f5d6:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    f5d8:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    f5da:	f003 0303 	and.w	r3, r3, #3
    f5de:	4303      	orrs	r3, r0
    f5e0:	6033      	str	r3, [r6, #0]
}
    f5e2:	e7eb      	b.n	f5bc <queue_insert+0xe8>
    f5e4:	00017fdb 	.word	0x00017fdb
    f5e8:	00018001 	.word	0x00018001
    f5ec:	00017b50 	.word	0x00017b50
    f5f0:	00018016 	.word	0x00018016
    f5f4:	0001802e 	.word	0x0001802e
    f5f8:	00018045 	.word	0x00018045

0000f5fc <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
    f5fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f600:	4605      	mov	r5, r0
    f602:	4617      	mov	r7, r2
	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
    f604:	460c      	mov	r4, r1
    f606:	2900      	cmp	r1, #0
    f608:	d04a      	beq.n	f6a0 <k_queue_append_list+0xa4>
    f60a:	2a00      	cmp	r2, #0
    f60c:	d048      	beq.n	f6a0 <k_queue_append_list+0xa4>
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    f60e:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    f612:	f04f 0320 	mov.w	r3, #32
    f616:	f3ef 8911 	mrs	r9, BASEPRI
    f61a:	f383 8811 	msr	BASEPRI, r3
    f61e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f622:	4630      	mov	r0, r6
    f624:	f001 fc26 	bl	10e74 <z_spin_lock_valid>
    f628:	b968      	cbnz	r0, f646 <k_queue_append_list+0x4a>
    f62a:	235c      	movs	r3, #92	; 0x5c
    f62c:	4a1e      	ldr	r2, [pc, #120]	; (f6a8 <k_queue_append_list+0xac>)
    f62e:	491f      	ldr	r1, [pc, #124]	; (f6ac <k_queue_append_list+0xb0>)
    f630:	481f      	ldr	r0, [pc, #124]	; (f6b0 <k_queue_append_list+0xb4>)
    f632:	f002 fc89 	bl	11f48 <printk>
    f636:	4631      	mov	r1, r6
    f638:	481e      	ldr	r0, [pc, #120]	; (f6b4 <k_queue_append_list+0xb8>)
    f63a:	f002 fc85 	bl	11f48 <printk>
    f63e:	215c      	movs	r1, #92	; 0x5c
    f640:	4819      	ldr	r0, [pc, #100]	; (f6a8 <k_queue_append_list+0xac>)
    f642:	f002 ff17 	bl	12474 <assert_post_action>
	z_spin_lock_set_owner(l);
    f646:	4630      	mov	r0, r6
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
    f648:	f105 080c 	add.w	r8, r5, #12
    f64c:	f001 fc2e 	bl	10eac <z_spin_lock_set_owner>
    f650:	4640      	mov	r0, r8
    f652:	f000 ffd7 	bl	10604 <z_unpend_first_thread>
    f656:	f04f 0a00 	mov.w	sl, #0
	}

	while ((head != NULL) && (thread != NULL)) {
    f65a:	b920      	cbnz	r0, f666 <k_queue_append_list+0x6a>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
    f65c:	686b      	ldr	r3, [r5, #4]
    f65e:	b9cb      	cbnz	r3, f694 <k_queue_append_list+0x98>
	list->head = node;
    f660:	602c      	str	r4, [r5, #0]
	list->tail = node;
    f662:	606f      	str	r7, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
    f664:	e00a      	b.n	f67c <k_queue_append_list+0x80>
    f666:	6144      	str	r4, [r0, #20]
    f668:	f8c0 a070 	str.w	sl, [r0, #112]	; 0x70
	z_ready_thread(thread);
    f66c:	f000 fb42 	bl	fcf4 <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
    f670:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
    f672:	4640      	mov	r0, r8
    f674:	f000 ffc6 	bl	10604 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
    f678:	2c00      	cmp	r4, #0
    f67a:	d1ee      	bne.n	f65a <k_queue_append_list+0x5e>
	z_handle_obj_poll_events(&queue->poll_events, state);
    f67c:	2104      	movs	r1, #4
    f67e:	f105 0014 	add.w	r0, r5, #20
    f682:	f007 f8e8 	bl	16856 <z_handle_obj_poll_events>
	if (head != NULL) {
		sys_sflist_append_list(&queue->data_q, head, tail);
	}

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
    f686:	4630      	mov	r0, r6
    f688:	4649      	mov	r1, r9
    f68a:	f000 f911 	bl	f8b0 <z_reschedule>
	return 0;
    f68e:	2000      	movs	r0, #0
}
    f690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    f694:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    f696:	f001 0103 	and.w	r1, r1, #3
    f69a:	430c      	orrs	r4, r1
    f69c:	601c      	str	r4, [r3, #0]
}
    f69e:	e7e0      	b.n	f662 <k_queue_append_list+0x66>
		return -EINVAL;
    f6a0:	f06f 0015 	mvn.w	r0, #21
    f6a4:	e7f4      	b.n	f690 <k_queue_append_list+0x94>
    f6a6:	bf00      	nop
    f6a8:	00017fdb 	.word	0x00017fdb
    f6ac:	00018001 	.word	0x00018001
    f6b0:	00017b50 	.word	0x00017b50
    f6b4:	00018016 	.word	0x00018016

0000f6b8 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    f6b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    f6bc:	4606      	mov	r6, r0
    f6be:	4690      	mov	r8, r2
    f6c0:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    f6c2:	f100 0508 	add.w	r5, r0, #8
    f6c6:	f04f 0320 	mov.w	r3, #32
    f6ca:	f3ef 8711 	mrs	r7, BASEPRI
    f6ce:	f383 8811 	msr	BASEPRI, r3
    f6d2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f6d6:	4628      	mov	r0, r5
    f6d8:	f001 fbcc 	bl	10e74 <z_spin_lock_valid>
    f6dc:	b968      	cbnz	r0, f6fa <z_impl_k_queue_get+0x42>
    f6de:	235c      	movs	r3, #92	; 0x5c
    f6e0:	4a25      	ldr	r2, [pc, #148]	; (f778 <z_impl_k_queue_get+0xc0>)
    f6e2:	4926      	ldr	r1, [pc, #152]	; (f77c <z_impl_k_queue_get+0xc4>)
    f6e4:	4826      	ldr	r0, [pc, #152]	; (f780 <z_impl_k_queue_get+0xc8>)
    f6e6:	f002 fc2f 	bl	11f48 <printk>
    f6ea:	4629      	mov	r1, r5
    f6ec:	4825      	ldr	r0, [pc, #148]	; (f784 <z_impl_k_queue_get+0xcc>)
    f6ee:	f002 fc2b 	bl	11f48 <printk>
    f6f2:	215c      	movs	r1, #92	; 0x5c
    f6f4:	4820      	ldr	r0, [pc, #128]	; (f778 <z_impl_k_queue_get+0xc0>)
    f6f6:	f002 febd 	bl	12474 <assert_post_action>
	z_spin_lock_set_owner(l);
    f6fa:	4628      	mov	r0, r5
    f6fc:	f001 fbd6 	bl	10eac <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
    f700:	6834      	ldr	r4, [r6, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    f702:	b33c      	cbz	r4, f754 <z_impl_k_queue_get+0x9c>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    f704:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    f706:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    f708:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    f70c:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    f70e:	4620      	mov	r0, r4
    f710:	f04f 0101 	mov.w	r1, #1
	list->head = node;
    f714:	6033      	str	r3, [r6, #0]
	list->tail = node;
    f716:	bf08      	it	eq
    f718:	6073      	streq	r3, [r6, #4]
    f71a:	f006 ff4b 	bl	165b4 <z_queue_node_peek>
    f71e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f720:	4628      	mov	r0, r5
    f722:	f001 fbb5 	bl	10e90 <z_spin_unlock_valid>
    f726:	b968      	cbnz	r0, f744 <z_impl_k_queue_get+0x8c>
    f728:	2384      	movs	r3, #132	; 0x84
    f72a:	4a13      	ldr	r2, [pc, #76]	; (f778 <z_impl_k_queue_get+0xc0>)
    f72c:	4916      	ldr	r1, [pc, #88]	; (f788 <z_impl_k_queue_get+0xd0>)
    f72e:	4814      	ldr	r0, [pc, #80]	; (f780 <z_impl_k_queue_get+0xc8>)
    f730:	f002 fc0a 	bl	11f48 <printk>
    f734:	4629      	mov	r1, r5
    f736:	4815      	ldr	r0, [pc, #84]	; (f78c <z_impl_k_queue_get+0xd4>)
    f738:	f002 fc06 	bl	11f48 <printk>
    f73c:	2184      	movs	r1, #132	; 0x84
    f73e:	480e      	ldr	r0, [pc, #56]	; (f778 <z_impl_k_queue_get+0xc0>)
    f740:	f002 fe98 	bl	12474 <assert_post_action>
	__asm__ volatile(
    f744:	f387 8811 	msr	BASEPRI, r7
    f748:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    f74c:	4620      	mov	r0, r4
    f74e:	b003      	add	sp, #12
    f750:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    f754:	ea58 0309 	orrs.w	r3, r8, r9
    f758:	d0e2      	beq.n	f720 <z_impl_k_queue_get+0x68>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    f75a:	4639      	mov	r1, r7
    f75c:	4628      	mov	r0, r5
    f75e:	e9cd 8900 	strd	r8, r9, [sp]
    f762:	f106 020c 	add.w	r2, r6, #12
    f766:	f000 fe8d 	bl	10484 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    f76a:	2800      	cmp	r0, #0
    f76c:	d1ee      	bne.n	f74c <z_impl_k_queue_get+0x94>
    f76e:	4b08      	ldr	r3, [pc, #32]	; (f790 <z_impl_k_queue_get+0xd8>)
    f770:	689b      	ldr	r3, [r3, #8]
    f772:	695c      	ldr	r4, [r3, #20]
    f774:	e7ea      	b.n	f74c <z_impl_k_queue_get+0x94>
    f776:	bf00      	nop
    f778:	00017fdb 	.word	0x00017fdb
    f77c:	00018001 	.word	0x00018001
    f780:	00017b50 	.word	0x00017b50
    f784:	00018016 	.word	0x00018016
    f788:	0001802e 	.word	0x0001802e
    f78c:	00018045 	.word	0x00018045
    f790:	20001d84 	.word	0x20001d84

0000f794 <pended_on.isra.0>:
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
    f794:	6803      	ldr	r3, [r0, #0]
static _wait_q_t *pended_on(struct k_thread *thread)
    f796:	b510      	push	{r4, lr}
    f798:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    f79a:	b95b      	cbnz	r3, f7b4 <pended_on.isra.0+0x20>
    f79c:	4906      	ldr	r1, [pc, #24]	; (f7b8 <pended_on.isra.0+0x24>)
    f79e:	4807      	ldr	r0, [pc, #28]	; (f7bc <pended_on.isra.0+0x28>)
    f7a0:	f240 13d9 	movw	r3, #473	; 0x1d9
    f7a4:	4a06      	ldr	r2, [pc, #24]	; (f7c0 <pended_on.isra.0+0x2c>)
    f7a6:	f002 fbcf 	bl	11f48 <printk>
    f7aa:	f240 11d9 	movw	r1, #473	; 0x1d9
    f7ae:	4804      	ldr	r0, [pc, #16]	; (f7c0 <pended_on.isra.0+0x2c>)
    f7b0:	f002 fe60 	bl	12474 <assert_post_action>

	return thread->base.pended_on;
}
    f7b4:	6820      	ldr	r0, [r4, #0]
    f7b6:	bd10      	pop	{r4, pc}
    f7b8:	0001b7c5 	.word	0x0001b7c5
    f7bc:	00017b50 	.word	0x00017b50
    f7c0:	0001b7a3 	.word	0x0001b7a3

0000f7c4 <z_reset_time_slice>:
{
    f7c4:	b510      	push	{r4, lr}
	if (slice_time != 0) {
    f7c6:	4c08      	ldr	r4, [pc, #32]	; (f7e8 <z_reset_time_slice+0x24>)
    f7c8:	6823      	ldr	r3, [r4, #0]
    f7ca:	b15b      	cbz	r3, f7e4 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    f7cc:	f7f3 f8c4 	bl	2958 <z_clock_elapsed>
    f7d0:	4603      	mov	r3, r0
    f7d2:	6820      	ldr	r0, [r4, #0]
    f7d4:	4a05      	ldr	r2, [pc, #20]	; (f7ec <z_reset_time_slice+0x28>)
    f7d6:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
    f7d8:	2100      	movs	r1, #0
}
    f7da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    f7de:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    f7e0:	f001 be1a 	b.w	11418 <z_set_timeout_expiry>
}
    f7e4:	bd10      	pop	{r4, pc}
    f7e6:	bf00      	nop
    f7e8:	20001dc0 	.word	0x20001dc0
    f7ec:	20001d84 	.word	0x20001d84

0000f7f0 <k_sched_time_slice_set>:
{
    f7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f7f2:	4605      	mov	r5, r0
    f7f4:	460c      	mov	r4, r1
	__asm__ volatile(
    f7f6:	f04f 0320 	mov.w	r3, #32
    f7fa:	f3ef 8611 	mrs	r6, BASEPRI
    f7fe:	f383 8811 	msr	BASEPRI, r3
    f802:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f806:	4820      	ldr	r0, [pc, #128]	; (f888 <k_sched_time_slice_set+0x98>)
    f808:	f001 fb34 	bl	10e74 <z_spin_lock_valid>
    f80c:	b968      	cbnz	r0, f82a <k_sched_time_slice_set+0x3a>
    f80e:	235c      	movs	r3, #92	; 0x5c
    f810:	4a1e      	ldr	r2, [pc, #120]	; (f88c <k_sched_time_slice_set+0x9c>)
    f812:	491f      	ldr	r1, [pc, #124]	; (f890 <k_sched_time_slice_set+0xa0>)
    f814:	481f      	ldr	r0, [pc, #124]	; (f894 <k_sched_time_slice_set+0xa4>)
    f816:	f002 fb97 	bl	11f48 <printk>
    f81a:	491b      	ldr	r1, [pc, #108]	; (f888 <k_sched_time_slice_set+0x98>)
    f81c:	481e      	ldr	r0, [pc, #120]	; (f898 <k_sched_time_slice_set+0xa8>)
    f81e:	f002 fb93 	bl	11f48 <printk>
    f822:	215c      	movs	r1, #92	; 0x5c
    f824:	4819      	ldr	r0, [pc, #100]	; (f88c <k_sched_time_slice_set+0x9c>)
    f826:	f002 fe25 	bl	12474 <assert_post_action>
	z_spin_lock_set_owner(l);
    f82a:	4817      	ldr	r0, [pc, #92]	; (f888 <k_sched_time_slice_set+0x98>)
    f82c:	f001 fb3e 	bl	10eac <z_spin_lock_set_owner>
    f830:	f44f 4700 	mov.w	r7, #32768	; 0x8000
		_current_cpu->slice_ticks = 0;
    f834:	2200      	movs	r2, #0
    f836:	f240 30e7 	movw	r0, #999	; 0x3e7
    f83a:	2100      	movs	r1, #0
    f83c:	4b17      	ldr	r3, [pc, #92]	; (f89c <k_sched_time_slice_set+0xac>)
    f83e:	fbe7 0105 	umlal	r0, r1, r7, r5
    f842:	611a      	str	r2, [r3, #16]
    f844:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f848:	2300      	movs	r3, #0
    f84a:	f7f0 fc85 	bl	158 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    f84e:	4b14      	ldr	r3, [pc, #80]	; (f8a0 <k_sched_time_slice_set+0xb0>)
    f850:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    f852:	4b14      	ldr	r3, [pc, #80]	; (f8a4 <k_sched_time_slice_set+0xb4>)
    f854:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
    f856:	f7ff ffb5 	bl	f7c4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f85a:	480b      	ldr	r0, [pc, #44]	; (f888 <k_sched_time_slice_set+0x98>)
    f85c:	f001 fb18 	bl	10e90 <z_spin_unlock_valid>
    f860:	b968      	cbnz	r0, f87e <k_sched_time_slice_set+0x8e>
    f862:	2384      	movs	r3, #132	; 0x84
    f864:	4a09      	ldr	r2, [pc, #36]	; (f88c <k_sched_time_slice_set+0x9c>)
    f866:	4910      	ldr	r1, [pc, #64]	; (f8a8 <k_sched_time_slice_set+0xb8>)
    f868:	480a      	ldr	r0, [pc, #40]	; (f894 <k_sched_time_slice_set+0xa4>)
    f86a:	f002 fb6d 	bl	11f48 <printk>
    f86e:	4906      	ldr	r1, [pc, #24]	; (f888 <k_sched_time_slice_set+0x98>)
    f870:	480e      	ldr	r0, [pc, #56]	; (f8ac <k_sched_time_slice_set+0xbc>)
    f872:	f002 fb69 	bl	11f48 <printk>
    f876:	2184      	movs	r1, #132	; 0x84
    f878:	4804      	ldr	r0, [pc, #16]	; (f88c <k_sched_time_slice_set+0x9c>)
    f87a:	f002 fdfb 	bl	12474 <assert_post_action>
	__asm__ volatile(
    f87e:	f386 8811 	msr	BASEPRI, r6
    f882:	f3bf 8f6f 	isb	sy
}
    f886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f888:	20001db8 	.word	0x20001db8
    f88c:	00017fdb 	.word	0x00017fdb
    f890:	00018001 	.word	0x00018001
    f894:	00017b50 	.word	0x00017b50
    f898:	00018016 	.word	0x00018016
    f89c:	20001d84 	.word	0x20001d84
    f8a0:	20001dc0 	.word	0x20001dc0
    f8a4:	20001dbc 	.word	0x20001dbc
    f8a8:	0001802e 	.word	0x0001802e
    f8ac:	00018045 	.word	0x00018045

0000f8b0 <z_reschedule>:

	return arch_irq_unlocked(key) && !arch_is_in_isr();
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    f8b0:	b538      	push	{r3, r4, r5, lr}
    f8b2:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    f8b4:	460d      	mov	r5, r1
    f8b6:	b9c1      	cbnz	r1, f8ea <z_reschedule+0x3a>
    f8b8:	f3ef 8305 	mrs	r3, IPSR
    f8bc:	b9ab      	cbnz	r3, f8ea <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f8be:	f001 fae7 	bl	10e90 <z_spin_unlock_valid>
    f8c2:	b968      	cbnz	r0, f8e0 <z_reschedule+0x30>
    f8c4:	239b      	movs	r3, #155	; 0x9b
    f8c6:	4a14      	ldr	r2, [pc, #80]	; (f918 <z_reschedule+0x68>)
    f8c8:	4914      	ldr	r1, [pc, #80]	; (f91c <z_reschedule+0x6c>)
    f8ca:	4815      	ldr	r0, [pc, #84]	; (f920 <z_reschedule+0x70>)
    f8cc:	f002 fb3c 	bl	11f48 <printk>
    f8d0:	4621      	mov	r1, r4
    f8d2:	4814      	ldr	r0, [pc, #80]	; (f924 <z_reschedule+0x74>)
    f8d4:	f002 fb38 	bl	11f48 <printk>
    f8d8:	219b      	movs	r1, #155	; 0x9b
    f8da:	480f      	ldr	r0, [pc, #60]	; (f918 <z_reschedule+0x68>)
    f8dc:	f002 fdca 	bl	12474 <assert_post_action>
	if (resched(key.key)) {
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    f8e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
    f8e4:	2000      	movs	r0, #0
    f8e6:	f7f4 b923 	b.w	3b30 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f8ea:	4620      	mov	r0, r4
    f8ec:	f001 fad0 	bl	10e90 <z_spin_unlock_valid>
    f8f0:	b968      	cbnz	r0, f90e <z_reschedule+0x5e>
    f8f2:	2384      	movs	r3, #132	; 0x84
    f8f4:	4a08      	ldr	r2, [pc, #32]	; (f918 <z_reschedule+0x68>)
    f8f6:	4909      	ldr	r1, [pc, #36]	; (f91c <z_reschedule+0x6c>)
    f8f8:	4809      	ldr	r0, [pc, #36]	; (f920 <z_reschedule+0x70>)
    f8fa:	f002 fb25 	bl	11f48 <printk>
    f8fe:	4621      	mov	r1, r4
    f900:	4808      	ldr	r0, [pc, #32]	; (f924 <z_reschedule+0x74>)
    f902:	f002 fb21 	bl	11f48 <printk>
    f906:	2184      	movs	r1, #132	; 0x84
    f908:	4803      	ldr	r0, [pc, #12]	; (f918 <z_reschedule+0x68>)
    f90a:	f002 fdb3 	bl	12474 <assert_post_action>
    f90e:	f385 8811 	msr	BASEPRI, r5
    f912:	f3bf 8f6f 	isb	sy
    f916:	bd38      	pop	{r3, r4, r5, pc}
    f918:	00017fdb 	.word	0x00017fdb
    f91c:	0001802e 	.word	0x0001802e
    f920:	00017b50 	.word	0x00017b50
    f924:	00018045 	.word	0x00018045

0000f928 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    f928:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    f92a:	f04f 0320 	mov.w	r3, #32
    f92e:	f3ef 8511 	mrs	r5, BASEPRI
    f932:	f383 8811 	msr	BASEPRI, r3
    f936:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f93a:	482b      	ldr	r0, [pc, #172]	; (f9e8 <k_sched_lock+0xc0>)
    f93c:	f001 fa9a 	bl	10e74 <z_spin_lock_valid>
    f940:	b968      	cbnz	r0, f95e <k_sched_lock+0x36>
    f942:	235c      	movs	r3, #92	; 0x5c
    f944:	4a29      	ldr	r2, [pc, #164]	; (f9ec <k_sched_lock+0xc4>)
    f946:	492a      	ldr	r1, [pc, #168]	; (f9f0 <k_sched_lock+0xc8>)
    f948:	482a      	ldr	r0, [pc, #168]	; (f9f4 <k_sched_lock+0xcc>)
    f94a:	f002 fafd 	bl	11f48 <printk>
    f94e:	4926      	ldr	r1, [pc, #152]	; (f9e8 <k_sched_lock+0xc0>)
    f950:	4829      	ldr	r0, [pc, #164]	; (f9f8 <k_sched_lock+0xd0>)
    f952:	f002 faf9 	bl	11f48 <printk>
    f956:	215c      	movs	r1, #92	; 0x5c
    f958:	4824      	ldr	r0, [pc, #144]	; (f9ec <k_sched_lock+0xc4>)
    f95a:	f002 fd8b 	bl	12474 <assert_post_action>
	z_spin_lock_set_owner(l);
    f95e:	4822      	ldr	r0, [pc, #136]	; (f9e8 <k_sched_lock+0xc0>)
    f960:	f001 faa4 	bl	10eac <z_spin_lock_set_owner>
    f964:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    f968:	b173      	cbz	r3, f988 <k_sched_lock+0x60>
    f96a:	4924      	ldr	r1, [pc, #144]	; (f9fc <k_sched_lock+0xd4>)
    f96c:	f240 130b 	movw	r3, #267	; 0x10b
    f970:	4a23      	ldr	r2, [pc, #140]	; (fa00 <k_sched_lock+0xd8>)
    f972:	4820      	ldr	r0, [pc, #128]	; (f9f4 <k_sched_lock+0xcc>)
    f974:	f002 fae8 	bl	11f48 <printk>
    f978:	4822      	ldr	r0, [pc, #136]	; (fa04 <k_sched_lock+0xdc>)
    f97a:	f002 fae5 	bl	11f48 <printk>
    f97e:	f240 110b 	movw	r1, #267	; 0x10b
    f982:	481f      	ldr	r0, [pc, #124]	; (fa00 <k_sched_lock+0xd8>)
    f984:	f002 fd76 	bl	12474 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
    f988:	4c1f      	ldr	r4, [pc, #124]	; (fa08 <k_sched_lock+0xe0>)
    f98a:	68a2      	ldr	r2, [r4, #8]
    f98c:	7bd2      	ldrb	r2, [r2, #15]
    f98e:	2a01      	cmp	r2, #1
    f990:	d10e      	bne.n	f9b0 <k_sched_lock+0x88>
    f992:	491e      	ldr	r1, [pc, #120]	; (fa0c <k_sched_lock+0xe4>)
    f994:	f44f 7386 	mov.w	r3, #268	; 0x10c
    f998:	4a19      	ldr	r2, [pc, #100]	; (fa00 <k_sched_lock+0xd8>)
    f99a:	4816      	ldr	r0, [pc, #88]	; (f9f4 <k_sched_lock+0xcc>)
    f99c:	f002 fad4 	bl	11f48 <printk>
    f9a0:	4818      	ldr	r0, [pc, #96]	; (fa04 <k_sched_lock+0xdc>)
    f9a2:	f002 fad1 	bl	11f48 <printk>
    f9a6:	f44f 7186 	mov.w	r1, #268	; 0x10c
    f9aa:	4815      	ldr	r0, [pc, #84]	; (fa00 <k_sched_lock+0xd8>)
    f9ac:	f002 fd62 	bl	12474 <assert_post_action>
	--_current->base.sched_locked;
    f9b0:	68a2      	ldr	r2, [r4, #8]
    f9b2:	7bd3      	ldrb	r3, [r2, #15]
    f9b4:	3b01      	subs	r3, #1
    f9b6:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f9b8:	480b      	ldr	r0, [pc, #44]	; (f9e8 <k_sched_lock+0xc0>)
    f9ba:	f001 fa69 	bl	10e90 <z_spin_unlock_valid>
    f9be:	b968      	cbnz	r0, f9dc <k_sched_lock+0xb4>
    f9c0:	2384      	movs	r3, #132	; 0x84
    f9c2:	4a0a      	ldr	r2, [pc, #40]	; (f9ec <k_sched_lock+0xc4>)
    f9c4:	4912      	ldr	r1, [pc, #72]	; (fa10 <k_sched_lock+0xe8>)
    f9c6:	480b      	ldr	r0, [pc, #44]	; (f9f4 <k_sched_lock+0xcc>)
    f9c8:	f002 fabe 	bl	11f48 <printk>
    f9cc:	4906      	ldr	r1, [pc, #24]	; (f9e8 <k_sched_lock+0xc0>)
    f9ce:	4811      	ldr	r0, [pc, #68]	; (fa14 <k_sched_lock+0xec>)
    f9d0:	f002 faba 	bl	11f48 <printk>
    f9d4:	2184      	movs	r1, #132	; 0x84
    f9d6:	4805      	ldr	r0, [pc, #20]	; (f9ec <k_sched_lock+0xc4>)
    f9d8:	f002 fd4c 	bl	12474 <assert_post_action>
	__asm__ volatile(
    f9dc:	f385 8811 	msr	BASEPRI, r5
    f9e0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    f9e4:	bd38      	pop	{r3, r4, r5, pc}
    f9e6:	bf00      	nop
    f9e8:	20001db8 	.word	0x20001db8
    f9ec:	00017fdb 	.word	0x00017fdb
    f9f0:	00018001 	.word	0x00018001
    f9f4:	00017b50 	.word	0x00017b50
    f9f8:	00018016 	.word	0x00018016
    f9fc:	0001b761 	.word	0x0001b761
    fa00:	0001b736 	.word	0x0001b736
    fa04:	0001af24 	.word	0x0001af24
    fa08:	20001d84 	.word	0x20001d84
    fa0c:	0001b773 	.word	0x0001b773
    fa10:	0001802e 	.word	0x0001802e
    fa14:	00018045 	.word	0x00018045

0000fa18 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    fa18:	4b11      	ldr	r3, [pc, #68]	; (fa60 <z_priq_dumb_remove+0x48>)
{
    fa1a:	b510      	push	{r4, lr}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    fa1c:	f103 0228 	add.w	r2, r3, #40	; 0x28
    fa20:	4282      	cmp	r2, r0
{
    fa22:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    fa24:	d105      	bne.n	fa32 <z_priq_dumb_remove+0x1a>
    fa26:	689b      	ldr	r3, [r3, #8]
    fa28:	428b      	cmp	r3, r1
    fa2a:	d102      	bne.n	fa32 <z_priq_dumb_remove+0x1a>
    fa2c:	7b4b      	ldrb	r3, [r1, #13]
    fa2e:	06db      	lsls	r3, r3, #27
    fa30:	d115      	bne.n	fa5e <z_priq_dumb_remove+0x46>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    fa32:	4b0c      	ldr	r3, [pc, #48]	; (fa64 <z_priq_dumb_remove+0x4c>)
    fa34:	429c      	cmp	r4, r3
    fa36:	d10b      	bne.n	fa50 <z_priq_dumb_remove+0x38>
    fa38:	490b      	ldr	r1, [pc, #44]	; (fa68 <z_priq_dumb_remove+0x50>)
    fa3a:	480c      	ldr	r0, [pc, #48]	; (fa6c <z_priq_dumb_remove+0x54>)
    fa3c:	f240 336b 	movw	r3, #875	; 0x36b
    fa40:	4a0b      	ldr	r2, [pc, #44]	; (fa70 <z_priq_dumb_remove+0x58>)
    fa42:	f002 fa81 	bl	11f48 <printk>
    fa46:	f240 316b 	movw	r1, #875	; 0x36b
    fa4a:	4809      	ldr	r0, [pc, #36]	; (fa70 <z_priq_dumb_remove+0x58>)
    fa4c:	f002 fd12 	bl	12474 <assert_post_action>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    fa50:	e9d4 3200 	ldrd	r3, r2, [r4]
    fa54:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    fa56:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    fa58:	2300      	movs	r3, #0
	node->prev = NULL;
    fa5a:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    fa5e:	bd10      	pop	{r4, pc}
    fa60:	20001d84 	.word	0x20001d84
    fa64:	20001334 	.word	0x20001334
    fa68:	0001b7dc 	.word	0x0001b7dc
    fa6c:	00017b50 	.word	0x00017b50
    fa70:	0001b7a3 	.word	0x0001b7a3

0000fa74 <z_unpend_thread>:
{
    fa74:	b538      	push	{r3, r4, r5, lr}
    fa76:	4604      	mov	r4, r0
	__asm__ volatile(
    fa78:	f04f 0320 	mov.w	r3, #32
    fa7c:	f3ef 8511 	mrs	r5, BASEPRI
    fa80:	f383 8811 	msr	BASEPRI, r3
    fa84:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    fa88:	481e      	ldr	r0, [pc, #120]	; (fb04 <z_unpend_thread+0x90>)
    fa8a:	f001 f9f3 	bl	10e74 <z_spin_lock_valid>
    fa8e:	b968      	cbnz	r0, faac <z_unpend_thread+0x38>
    fa90:	235c      	movs	r3, #92	; 0x5c
    fa92:	4a1d      	ldr	r2, [pc, #116]	; (fb08 <z_unpend_thread+0x94>)
    fa94:	491d      	ldr	r1, [pc, #116]	; (fb0c <z_unpend_thread+0x98>)
    fa96:	481e      	ldr	r0, [pc, #120]	; (fb10 <z_unpend_thread+0x9c>)
    fa98:	f002 fa56 	bl	11f48 <printk>
    fa9c:	4919      	ldr	r1, [pc, #100]	; (fb04 <z_unpend_thread+0x90>)
    fa9e:	481d      	ldr	r0, [pc, #116]	; (fb14 <z_unpend_thread+0xa0>)
    faa0:	f002 fa52 	bl	11f48 <printk>
    faa4:	215c      	movs	r1, #92	; 0x5c
    faa6:	4818      	ldr	r0, [pc, #96]	; (fb08 <z_unpend_thread+0x94>)
    faa8:	f002 fce4 	bl	12474 <assert_post_action>
	z_spin_lock_set_owner(l);
    faac:	4815      	ldr	r0, [pc, #84]	; (fb04 <z_unpend_thread+0x90>)
    faae:	f001 f9fd 	bl	10eac <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    fab2:	f104 0008 	add.w	r0, r4, #8
    fab6:	f7ff fe6d 	bl	f794 <pended_on.isra.0>
    faba:	4621      	mov	r1, r4
    fabc:	f7ff ffac 	bl	fa18 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    fac0:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fac2:	4810      	ldr	r0, [pc, #64]	; (fb04 <z_unpend_thread+0x90>)
    fac4:	f023 0302 	bic.w	r3, r3, #2
    fac8:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
    faca:	2300      	movs	r3, #0
    facc:	60a3      	str	r3, [r4, #8]
    face:	f001 f9df 	bl	10e90 <z_spin_unlock_valid>
    fad2:	b968      	cbnz	r0, faf0 <z_unpend_thread+0x7c>
    fad4:	2384      	movs	r3, #132	; 0x84
    fad6:	4a0c      	ldr	r2, [pc, #48]	; (fb08 <z_unpend_thread+0x94>)
    fad8:	490f      	ldr	r1, [pc, #60]	; (fb18 <z_unpend_thread+0xa4>)
    fada:	480d      	ldr	r0, [pc, #52]	; (fb10 <z_unpend_thread+0x9c>)
    fadc:	f002 fa34 	bl	11f48 <printk>
    fae0:	4908      	ldr	r1, [pc, #32]	; (fb04 <z_unpend_thread+0x90>)
    fae2:	480e      	ldr	r0, [pc, #56]	; (fb1c <z_unpend_thread+0xa8>)
    fae4:	f002 fa30 	bl	11f48 <printk>
    fae8:	2184      	movs	r1, #132	; 0x84
    faea:	4807      	ldr	r0, [pc, #28]	; (fb08 <z_unpend_thread+0x94>)
    faec:	f002 fcc2 	bl	12474 <assert_post_action>
	__asm__ volatile(
    faf0:	f385 8811 	msr	BASEPRI, r5
    faf4:	f3bf 8f6f 	isb	sy
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    faf8:	f104 0018 	add.w	r0, r4, #24
}
    fafc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    fb00:	f001 bbf4 	b.w	112ec <z_abort_timeout>
    fb04:	20001db8 	.word	0x20001db8
    fb08:	00017fdb 	.word	0x00017fdb
    fb0c:	00018001 	.word	0x00018001
    fb10:	00017b50 	.word	0x00017b50
    fb14:	00018016 	.word	0x00018016
    fb18:	0001802e 	.word	0x0001802e
    fb1c:	00018045 	.word	0x00018045

0000fb20 <update_cache>:
{
    fb20:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    fb22:	4c10      	ldr	r4, [pc, #64]	; (fb64 <update_cache+0x44>)
{
    fb24:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    fb26:	f104 0028 	add.w	r0, r4, #40	; 0x28
    fb2a:	f006 fd85 	bl	16638 <z_priq_dumb_best>
    fb2e:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
    fb30:	68a3      	ldr	r3, [r4, #8]
    fb32:	7b59      	ldrb	r1, [r3, #13]
    fb34:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
    fb36:	bf44      	itt	mi
    fb38:	f041 0108 	orrmi.w	r1, r1, #8
    fb3c:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
    fb3e:	b905      	cbnz	r5, fb42 <update_cache+0x22>
    fb40:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
    fb42:	b94e      	cbnz	r6, fb58 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
    fb44:	7b5a      	ldrb	r2, [r3, #13]
    fb46:	06d2      	lsls	r2, r2, #27
    fb48:	d106      	bne.n	fb58 <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    fb4a:	69aa      	ldr	r2, [r5, #24]
    fb4c:	b922      	cbnz	r2, fb58 <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
    fb4e:	89da      	ldrh	r2, [r3, #14]
    fb50:	2a7f      	cmp	r2, #127	; 0x7f
    fb52:	d901      	bls.n	fb58 <update_cache+0x38>
		_kernel.ready_q.cache = _current;
    fb54:	6263      	str	r3, [r4, #36]	; 0x24
}
    fb56:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
    fb58:	42ab      	cmp	r3, r5
    fb5a:	d001      	beq.n	fb60 <update_cache+0x40>
			z_reset_time_slice();
    fb5c:	f7ff fe32 	bl	f7c4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    fb60:	6265      	str	r5, [r4, #36]	; 0x24
}
    fb62:	e7f8      	b.n	fb56 <update_cache+0x36>
    fb64:	20001d84 	.word	0x20001d84

0000fb68 <k_sched_unlock>:
{
    fb68:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    fb6a:	f04f 0320 	mov.w	r3, #32
    fb6e:	f3ef 8511 	mrs	r5, BASEPRI
    fb72:	f383 8811 	msr	BASEPRI, r3
    fb76:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    fb7a:	482d      	ldr	r0, [pc, #180]	; (fc30 <k_sched_unlock+0xc8>)
    fb7c:	f001 f97a 	bl	10e74 <z_spin_lock_valid>
    fb80:	b968      	cbnz	r0, fb9e <k_sched_unlock+0x36>
    fb82:	235c      	movs	r3, #92	; 0x5c
    fb84:	4a2b      	ldr	r2, [pc, #172]	; (fc34 <k_sched_unlock+0xcc>)
    fb86:	492c      	ldr	r1, [pc, #176]	; (fc38 <k_sched_unlock+0xd0>)
    fb88:	482c      	ldr	r0, [pc, #176]	; (fc3c <k_sched_unlock+0xd4>)
    fb8a:	f002 f9dd 	bl	11f48 <printk>
    fb8e:	4928      	ldr	r1, [pc, #160]	; (fc30 <k_sched_unlock+0xc8>)
    fb90:	482b      	ldr	r0, [pc, #172]	; (fc40 <k_sched_unlock+0xd8>)
    fb92:	f002 f9d9 	bl	11f48 <printk>
    fb96:	215c      	movs	r1, #92	; 0x5c
    fb98:	4826      	ldr	r0, [pc, #152]	; (fc34 <k_sched_unlock+0xcc>)
    fb9a:	f002 fc6b 	bl	12474 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0, "");
    fb9e:	4c29      	ldr	r4, [pc, #164]	; (fc44 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
    fba0:	4823      	ldr	r0, [pc, #140]	; (fc30 <k_sched_unlock+0xc8>)
    fba2:	f001 f983 	bl	10eac <z_spin_lock_set_owner>
    fba6:	68a2      	ldr	r2, [r4, #8]
    fba8:	7bd2      	ldrb	r2, [r2, #15]
    fbaa:	b972      	cbnz	r2, fbca <k_sched_unlock+0x62>
    fbac:	4926      	ldr	r1, [pc, #152]	; (fc48 <k_sched_unlock+0xe0>)
    fbae:	f240 330a 	movw	r3, #778	; 0x30a
    fbb2:	4a26      	ldr	r2, [pc, #152]	; (fc4c <k_sched_unlock+0xe4>)
    fbb4:	4821      	ldr	r0, [pc, #132]	; (fc3c <k_sched_unlock+0xd4>)
    fbb6:	f002 f9c7 	bl	11f48 <printk>
    fbba:	4825      	ldr	r0, [pc, #148]	; (fc50 <k_sched_unlock+0xe8>)
    fbbc:	f002 f9c4 	bl	11f48 <printk>
    fbc0:	f240 310a 	movw	r1, #778	; 0x30a
    fbc4:	4821      	ldr	r0, [pc, #132]	; (fc4c <k_sched_unlock+0xe4>)
    fbc6:	f002 fc55 	bl	12474 <assert_post_action>
    fbca:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    fbce:	b173      	cbz	r3, fbee <k_sched_unlock+0x86>
    fbd0:	4920      	ldr	r1, [pc, #128]	; (fc54 <k_sched_unlock+0xec>)
    fbd2:	f240 330b 	movw	r3, #779	; 0x30b
    fbd6:	4a1d      	ldr	r2, [pc, #116]	; (fc4c <k_sched_unlock+0xe4>)
    fbd8:	4818      	ldr	r0, [pc, #96]	; (fc3c <k_sched_unlock+0xd4>)
    fbda:	f002 f9b5 	bl	11f48 <printk>
    fbde:	481c      	ldr	r0, [pc, #112]	; (fc50 <k_sched_unlock+0xe8>)
    fbe0:	f002 f9b2 	bl	11f48 <printk>
    fbe4:	f240 310b 	movw	r1, #779	; 0x30b
    fbe8:	4818      	ldr	r0, [pc, #96]	; (fc4c <k_sched_unlock+0xe4>)
    fbea:	f002 fc43 	bl	12474 <assert_post_action>
		++_current->base.sched_locked;
    fbee:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
    fbf0:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    fbf2:	7bd3      	ldrb	r3, [r2, #15]
    fbf4:	3301      	adds	r3, #1
    fbf6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    fbf8:	f7ff ff92 	bl	fb20 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fbfc:	480c      	ldr	r0, [pc, #48]	; (fc30 <k_sched_unlock+0xc8>)
    fbfe:	f001 f947 	bl	10e90 <z_spin_unlock_valid>
    fc02:	b968      	cbnz	r0, fc20 <k_sched_unlock+0xb8>
    fc04:	2384      	movs	r3, #132	; 0x84
    fc06:	4a0b      	ldr	r2, [pc, #44]	; (fc34 <k_sched_unlock+0xcc>)
    fc08:	4913      	ldr	r1, [pc, #76]	; (fc58 <k_sched_unlock+0xf0>)
    fc0a:	480c      	ldr	r0, [pc, #48]	; (fc3c <k_sched_unlock+0xd4>)
    fc0c:	f002 f99c 	bl	11f48 <printk>
    fc10:	4907      	ldr	r1, [pc, #28]	; (fc30 <k_sched_unlock+0xc8>)
    fc12:	4812      	ldr	r0, [pc, #72]	; (fc5c <k_sched_unlock+0xf4>)
    fc14:	f002 f998 	bl	11f48 <printk>
    fc18:	2184      	movs	r1, #132	; 0x84
    fc1a:	4806      	ldr	r0, [pc, #24]	; (fc34 <k_sched_unlock+0xcc>)
    fc1c:	f002 fc2a 	bl	12474 <assert_post_action>
	__asm__ volatile(
    fc20:	f385 8811 	msr	BASEPRI, r5
    fc24:	f3bf 8f6f 	isb	sy
}
    fc28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    fc2c:	f006 bcfa 	b.w	16624 <z_reschedule_unlocked>
    fc30:	20001db8 	.word	0x20001db8
    fc34:	00017fdb 	.word	0x00017fdb
    fc38:	00018001 	.word	0x00018001
    fc3c:	00017b50 	.word	0x00017b50
    fc40:	00018016 	.word	0x00018016
    fc44:	20001d84 	.word	0x20001d84
    fc48:	0001b7fd 	.word	0x0001b7fd
    fc4c:	0001b7a3 	.word	0x0001b7a3
    fc50:	0001af24 	.word	0x0001af24
    fc54:	0001b761 	.word	0x0001b761
    fc58:	0001802e 	.word	0x0001802e
    fc5c:	00018045 	.word	0x00018045

0000fc60 <ready_thread>:
{
    fc60:	b570      	push	{r4, r5, r6, lr}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    fc62:	7b43      	ldrb	r3, [r0, #13]
    fc64:	4604      	mov	r4, r0
    fc66:	06db      	lsls	r3, r3, #27
    fc68:	d138      	bne.n	fcdc <ready_thread+0x7c>
	if (z_is_thread_ready(thread)) {
    fc6a:	6983      	ldr	r3, [r0, #24]
    fc6c:	2b00      	cmp	r3, #0
    fc6e:	d135      	bne.n	fcdc <ready_thread+0x7c>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    fc70:	4b1b      	ldr	r3, [pc, #108]	; (fce0 <ready_thread+0x80>)
    fc72:	4298      	cmp	r0, r3
    fc74:	d10b      	bne.n	fc8e <ready_thread+0x2e>
    fc76:	491b      	ldr	r1, [pc, #108]	; (fce4 <ready_thread+0x84>)
    fc78:	481b      	ldr	r0, [pc, #108]	; (fce8 <ready_thread+0x88>)
    fc7a:	f240 3355 	movw	r3, #853	; 0x355
    fc7e:	4a1b      	ldr	r2, [pc, #108]	; (fcec <ready_thread+0x8c>)
    fc80:	f002 f962 	bl	11f48 <printk>
    fc84:	f240 3155 	movw	r1, #853	; 0x355
    fc88:	4818      	ldr	r0, [pc, #96]	; (fcec <ready_thread+0x8c>)
    fc8a:	f002 fbf3 	bl	12474 <assert_post_action>
	return list->head == list;
    fc8e:	4a18      	ldr	r2, [pc, #96]	; (fcf0 <ready_thread+0x90>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fc90:	f102 0128 	add.w	r1, r2, #40	; 0x28
    fc94:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
    fc98:	428b      	cmp	r3, r1
    fc9a:	d019      	beq.n	fcd0 <ready_thread+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fc9c:	b1c3      	cbz	r3, fcd0 <ready_thread+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
    fc9e:	f994 500e 	ldrsb.w	r5, [r4, #14]
    fca2:	f993 600e 	ldrsb.w	r6, [r3, #14]
    fca6:	42ae      	cmp	r6, r5
    fca8:	dd0d      	ble.n	fcc6 <ready_thread+0x66>
	node->prev = successor->prev;
    fcaa:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    fcac:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    fcb0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    fcb2:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
    fcb4:	7b63      	ldrb	r3, [r4, #13]
		update_cache(0);
    fcb6:	2000      	movs	r0, #0
    fcb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    fcbc:	7363      	strb	r3, [r4, #13]
}
    fcbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    fcc2:	f7ff bf2d 	b.w	fb20 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    fcc6:	4298      	cmp	r0, r3
    fcc8:	d002      	beq.n	fcd0 <ready_thread+0x70>
    fcca:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fccc:	2b00      	cmp	r3, #0
    fcce:	d1e8      	bne.n	fca2 <ready_thread+0x42>
	node->prev = list->tail;
    fcd0:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
    fcd4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    fcd6:	601c      	str	r4, [r3, #0]
	list->tail = node;
    fcd8:	62d4      	str	r4, [r2, #44]	; 0x2c
}
    fcda:	e7eb      	b.n	fcb4 <ready_thread+0x54>
}
    fcdc:	bd70      	pop	{r4, r5, r6, pc}
    fcde:	bf00      	nop
    fce0:	20001334 	.word	0x20001334
    fce4:	0001b7dc 	.word	0x0001b7dc
    fce8:	00017b50 	.word	0x00017b50
    fcec:	0001b7a3 	.word	0x0001b7a3
    fcf0:	20001d84 	.word	0x20001d84

0000fcf4 <z_ready_thread>:
{
    fcf4:	b538      	push	{r3, r4, r5, lr}
    fcf6:	4604      	mov	r4, r0
	__asm__ volatile(
    fcf8:	f04f 0320 	mov.w	r3, #32
    fcfc:	f3ef 8511 	mrs	r5, BASEPRI
    fd00:	f383 8811 	msr	BASEPRI, r3
    fd04:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    fd08:	4817      	ldr	r0, [pc, #92]	; (fd68 <z_ready_thread+0x74>)
    fd0a:	f001 f8b3 	bl	10e74 <z_spin_lock_valid>
    fd0e:	b968      	cbnz	r0, fd2c <z_ready_thread+0x38>
    fd10:	235c      	movs	r3, #92	; 0x5c
    fd12:	4a16      	ldr	r2, [pc, #88]	; (fd6c <z_ready_thread+0x78>)
    fd14:	4916      	ldr	r1, [pc, #88]	; (fd70 <z_ready_thread+0x7c>)
    fd16:	4817      	ldr	r0, [pc, #92]	; (fd74 <z_ready_thread+0x80>)
    fd18:	f002 f916 	bl	11f48 <printk>
    fd1c:	4912      	ldr	r1, [pc, #72]	; (fd68 <z_ready_thread+0x74>)
    fd1e:	4816      	ldr	r0, [pc, #88]	; (fd78 <z_ready_thread+0x84>)
    fd20:	f002 f912 	bl	11f48 <printk>
    fd24:	215c      	movs	r1, #92	; 0x5c
    fd26:	4811      	ldr	r0, [pc, #68]	; (fd6c <z_ready_thread+0x78>)
    fd28:	f002 fba4 	bl	12474 <assert_post_action>
	z_spin_lock_set_owner(l);
    fd2c:	480e      	ldr	r0, [pc, #56]	; (fd68 <z_ready_thread+0x74>)
    fd2e:	f001 f8bd 	bl	10eac <z_spin_lock_set_owner>
		ready_thread(thread);
    fd32:	4620      	mov	r0, r4
    fd34:	f7ff ff94 	bl	fc60 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fd38:	480b      	ldr	r0, [pc, #44]	; (fd68 <z_ready_thread+0x74>)
    fd3a:	f001 f8a9 	bl	10e90 <z_spin_unlock_valid>
    fd3e:	b968      	cbnz	r0, fd5c <z_ready_thread+0x68>
    fd40:	2384      	movs	r3, #132	; 0x84
    fd42:	4a0a      	ldr	r2, [pc, #40]	; (fd6c <z_ready_thread+0x78>)
    fd44:	490d      	ldr	r1, [pc, #52]	; (fd7c <z_ready_thread+0x88>)
    fd46:	480b      	ldr	r0, [pc, #44]	; (fd74 <z_ready_thread+0x80>)
    fd48:	f002 f8fe 	bl	11f48 <printk>
    fd4c:	4906      	ldr	r1, [pc, #24]	; (fd68 <z_ready_thread+0x74>)
    fd4e:	480c      	ldr	r0, [pc, #48]	; (fd80 <z_ready_thread+0x8c>)
    fd50:	f002 f8fa 	bl	11f48 <printk>
    fd54:	2184      	movs	r1, #132	; 0x84
    fd56:	4805      	ldr	r0, [pc, #20]	; (fd6c <z_ready_thread+0x78>)
    fd58:	f002 fb8c 	bl	12474 <assert_post_action>
	__asm__ volatile(
    fd5c:	f385 8811 	msr	BASEPRI, r5
    fd60:	f3bf 8f6f 	isb	sy
}
    fd64:	bd38      	pop	{r3, r4, r5, pc}
    fd66:	bf00      	nop
    fd68:	20001db8 	.word	0x20001db8
    fd6c:	00017fdb 	.word	0x00017fdb
    fd70:	00018001 	.word	0x00018001
    fd74:	00017b50 	.word	0x00017b50
    fd78:	00018016 	.word	0x00018016
    fd7c:	0001802e 	.word	0x0001802e
    fd80:	00018045 	.word	0x00018045

0000fd84 <z_thread_timeout>:
	if (thread->base.pended_on != NULL) {
    fd84:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
    fd88:	b570      	push	{r4, r5, r6, lr}
    fd8a:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    fd8c:	f1a0 0518 	sub.w	r5, r0, #24
	if (thread->base.pended_on != NULL) {
    fd90:	2b00      	cmp	r3, #0
    fd92:	d042      	beq.n	fe1a <z_thread_timeout+0x96>
	__asm__ volatile(
    fd94:	f04f 0320 	mov.w	r3, #32
    fd98:	f3ef 8611 	mrs	r6, BASEPRI
    fd9c:	f383 8811 	msr	BASEPRI, r3
    fda0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    fda4:	4822      	ldr	r0, [pc, #136]	; (fe30 <z_thread_timeout+0xac>)
    fda6:	f001 f865 	bl	10e74 <z_spin_lock_valid>
    fdaa:	b968      	cbnz	r0, fdc8 <z_thread_timeout+0x44>
    fdac:	235c      	movs	r3, #92	; 0x5c
    fdae:	4a21      	ldr	r2, [pc, #132]	; (fe34 <z_thread_timeout+0xb0>)
    fdb0:	4921      	ldr	r1, [pc, #132]	; (fe38 <z_thread_timeout+0xb4>)
    fdb2:	4822      	ldr	r0, [pc, #136]	; (fe3c <z_thread_timeout+0xb8>)
    fdb4:	f002 f8c8 	bl	11f48 <printk>
    fdb8:	491d      	ldr	r1, [pc, #116]	; (fe30 <z_thread_timeout+0xac>)
    fdba:	4821      	ldr	r0, [pc, #132]	; (fe40 <z_thread_timeout+0xbc>)
    fdbc:	f002 f8c4 	bl	11f48 <printk>
    fdc0:	215c      	movs	r1, #92	; 0x5c
    fdc2:	481c      	ldr	r0, [pc, #112]	; (fe34 <z_thread_timeout+0xb0>)
    fdc4:	f002 fb56 	bl	12474 <assert_post_action>
	z_spin_lock_set_owner(l);
    fdc8:	4819      	ldr	r0, [pc, #100]	; (fe30 <z_thread_timeout+0xac>)
    fdca:	f001 f86f 	bl	10eac <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    fdce:	f1a4 0010 	sub.w	r0, r4, #16
    fdd2:	f7ff fcdf 	bl	f794 <pended_on.isra.0>
    fdd6:	4629      	mov	r1, r5
    fdd8:	f7ff fe1e 	bl	fa18 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    fddc:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fde0:	4813      	ldr	r0, [pc, #76]	; (fe30 <z_thread_timeout+0xac>)
    fde2:	f023 0302 	bic.w	r3, r3, #2
    fde6:	f804 3c0b 	strb.w	r3, [r4, #-11]
		thread->base.pended_on = NULL;
    fdea:	2300      	movs	r3, #0
    fdec:	f844 3c10 	str.w	r3, [r4, #-16]
    fdf0:	f001 f84e 	bl	10e90 <z_spin_unlock_valid>
    fdf4:	b968      	cbnz	r0, fe12 <z_thread_timeout+0x8e>
    fdf6:	2384      	movs	r3, #132	; 0x84
    fdf8:	4a0e      	ldr	r2, [pc, #56]	; (fe34 <z_thread_timeout+0xb0>)
    fdfa:	4912      	ldr	r1, [pc, #72]	; (fe44 <z_thread_timeout+0xc0>)
    fdfc:	480f      	ldr	r0, [pc, #60]	; (fe3c <z_thread_timeout+0xb8>)
    fdfe:	f002 f8a3 	bl	11f48 <printk>
    fe02:	490b      	ldr	r1, [pc, #44]	; (fe30 <z_thread_timeout+0xac>)
    fe04:	4810      	ldr	r0, [pc, #64]	; (fe48 <z_thread_timeout+0xc4>)
    fe06:	f002 f89f 	bl	11f48 <printk>
    fe0a:	2184      	movs	r1, #132	; 0x84
    fe0c:	4809      	ldr	r0, [pc, #36]	; (fe34 <z_thread_timeout+0xb0>)
    fe0e:	f002 fb31 	bl	12474 <assert_post_action>
	__asm__ volatile(
    fe12:	f386 8811 	msr	BASEPRI, r6
    fe16:	f3bf 8f6f 	isb	sy
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    fe1a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	z_ready_thread(thread);
    fe1e:	4628      	mov	r0, r5
    fe20:	f023 0314 	bic.w	r3, r3, #20
    fe24:	f804 3c0b 	strb.w	r3, [r4, #-11]
}
    fe28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    fe2c:	f7ff bf62 	b.w	fcf4 <z_ready_thread>
    fe30:	20001db8 	.word	0x20001db8
    fe34:	00017fdb 	.word	0x00017fdb
    fe38:	00018001 	.word	0x00018001
    fe3c:	00017b50 	.word	0x00017b50
    fe40:	00018016 	.word	0x00018016
    fe44:	0001802e 	.word	0x0001802e
    fe48:	00018045 	.word	0x00018045

0000fe4c <z_sched_start>:
{
    fe4c:	b538      	push	{r3, r4, r5, lr}
    fe4e:	4604      	mov	r4, r0
	__asm__ volatile(
    fe50:	f04f 0320 	mov.w	r3, #32
    fe54:	f3ef 8511 	mrs	r5, BASEPRI
    fe58:	f383 8811 	msr	BASEPRI, r3
    fe5c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    fe60:	481d      	ldr	r0, [pc, #116]	; (fed8 <z_sched_start+0x8c>)
    fe62:	f001 f807 	bl	10e74 <z_spin_lock_valid>
    fe66:	b968      	cbnz	r0, fe84 <z_sched_start+0x38>
    fe68:	235c      	movs	r3, #92	; 0x5c
    fe6a:	4a1c      	ldr	r2, [pc, #112]	; (fedc <z_sched_start+0x90>)
    fe6c:	491c      	ldr	r1, [pc, #112]	; (fee0 <z_sched_start+0x94>)
    fe6e:	481d      	ldr	r0, [pc, #116]	; (fee4 <z_sched_start+0x98>)
    fe70:	f002 f86a 	bl	11f48 <printk>
    fe74:	4918      	ldr	r1, [pc, #96]	; (fed8 <z_sched_start+0x8c>)
    fe76:	481c      	ldr	r0, [pc, #112]	; (fee8 <z_sched_start+0x9c>)
    fe78:	f002 f866 	bl	11f48 <printk>
    fe7c:	215c      	movs	r1, #92	; 0x5c
    fe7e:	4817      	ldr	r0, [pc, #92]	; (fedc <z_sched_start+0x90>)
    fe80:	f002 faf8 	bl	12474 <assert_post_action>
	z_spin_lock_set_owner(l);
    fe84:	4814      	ldr	r0, [pc, #80]	; (fed8 <z_sched_start+0x8c>)
    fe86:	f001 f811 	bl	10eac <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
    fe8a:	7b63      	ldrb	r3, [r4, #13]
    fe8c:	075a      	lsls	r2, r3, #29
    fe8e:	d416      	bmi.n	febe <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fe90:	4811      	ldr	r0, [pc, #68]	; (fed8 <z_sched_start+0x8c>)
    fe92:	f000 fffd 	bl	10e90 <z_spin_unlock_valid>
    fe96:	b968      	cbnz	r0, feb4 <z_sched_start+0x68>
    fe98:	2384      	movs	r3, #132	; 0x84
    fe9a:	4a10      	ldr	r2, [pc, #64]	; (fedc <z_sched_start+0x90>)
    fe9c:	4913      	ldr	r1, [pc, #76]	; (feec <z_sched_start+0xa0>)
    fe9e:	4811      	ldr	r0, [pc, #68]	; (fee4 <z_sched_start+0x98>)
    fea0:	f002 f852 	bl	11f48 <printk>
    fea4:	490c      	ldr	r1, [pc, #48]	; (fed8 <z_sched_start+0x8c>)
    fea6:	4812      	ldr	r0, [pc, #72]	; (fef0 <z_sched_start+0xa4>)
    fea8:	f002 f84e 	bl	11f48 <printk>
    feac:	2184      	movs	r1, #132	; 0x84
    feae:	480b      	ldr	r0, [pc, #44]	; (fedc <z_sched_start+0x90>)
    feb0:	f002 fae0 	bl	12474 <assert_post_action>
	__asm__ volatile(
    feb4:	f385 8811 	msr	BASEPRI, r5
    feb8:	f3bf 8f6f 	isb	sy
}
    febc:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    febe:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    fec2:	4620      	mov	r0, r4
    fec4:	7363      	strb	r3, [r4, #13]
    fec6:	f7ff fecb 	bl	fc60 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    feca:	4629      	mov	r1, r5
}
    fecc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    fed0:	4801      	ldr	r0, [pc, #4]	; (fed8 <z_sched_start+0x8c>)
    fed2:	f7ff bced 	b.w	f8b0 <z_reschedule>
    fed6:	bf00      	nop
    fed8:	20001db8 	.word	0x20001db8
    fedc:	00017fdb 	.word	0x00017fdb
    fee0:	00018001 	.word	0x00018001
    fee4:	00017b50 	.word	0x00017b50
    fee8:	00018016 	.word	0x00018016
    feec:	0001802e 	.word	0x0001802e
    fef0:	00018045 	.word	0x00018045

0000fef4 <z_move_thread_to_end_of_prio_q>:
{
    fef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fef6:	4604      	mov	r4, r0
	__asm__ volatile(
    fef8:	f04f 0320 	mov.w	r3, #32
    fefc:	f3ef 8511 	mrs	r5, BASEPRI
    ff00:	f383 8811 	msr	BASEPRI, r3
    ff04:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ff08:	4835      	ldr	r0, [pc, #212]	; (ffe0 <z_move_thread_to_end_of_prio_q+0xec>)
    ff0a:	f000 ffb3 	bl	10e74 <z_spin_lock_valid>
    ff0e:	b968      	cbnz	r0, ff2c <z_move_thread_to_end_of_prio_q+0x38>
    ff10:	235c      	movs	r3, #92	; 0x5c
    ff12:	4a34      	ldr	r2, [pc, #208]	; (ffe4 <z_move_thread_to_end_of_prio_q+0xf0>)
    ff14:	4934      	ldr	r1, [pc, #208]	; (ffe8 <z_move_thread_to_end_of_prio_q+0xf4>)
    ff16:	4835      	ldr	r0, [pc, #212]	; (ffec <z_move_thread_to_end_of_prio_q+0xf8>)
    ff18:	f002 f816 	bl	11f48 <printk>
    ff1c:	4930      	ldr	r1, [pc, #192]	; (ffe0 <z_move_thread_to_end_of_prio_q+0xec>)
    ff1e:	4834      	ldr	r0, [pc, #208]	; (fff0 <z_move_thread_to_end_of_prio_q+0xfc>)
    ff20:	f002 f812 	bl	11f48 <printk>
    ff24:	215c      	movs	r1, #92	; 0x5c
    ff26:	482f      	ldr	r0, [pc, #188]	; (ffe4 <z_move_thread_to_end_of_prio_q+0xf0>)
    ff28:	f002 faa4 	bl	12474 <assert_post_action>
	z_spin_lock_set_owner(l);
    ff2c:	482c      	ldr	r0, [pc, #176]	; (ffe0 <z_move_thread_to_end_of_prio_q+0xec>)
    ff2e:	f000 ffbd 	bl	10eac <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    ff32:	f994 300d 	ldrsb.w	r3, [r4, #13]
    ff36:	2b00      	cmp	r3, #0
    ff38:	da03      	bge.n	ff42 <z_move_thread_to_end_of_prio_q+0x4e>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    ff3a:	4621      	mov	r1, r4
    ff3c:	482d      	ldr	r0, [pc, #180]	; (fff4 <z_move_thread_to_end_of_prio_q+0x100>)
    ff3e:	f7ff fd6b 	bl	fa18 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    ff42:	4b2d      	ldr	r3, [pc, #180]	; (fff8 <z_move_thread_to_end_of_prio_q+0x104>)
    ff44:	429c      	cmp	r4, r3
    ff46:	d10b      	bne.n	ff60 <z_move_thread_to_end_of_prio_q+0x6c>
    ff48:	492c      	ldr	r1, [pc, #176]	; (fffc <z_move_thread_to_end_of_prio_q+0x108>)
    ff4a:	4828      	ldr	r0, [pc, #160]	; (ffec <z_move_thread_to_end_of_prio_q+0xf8>)
    ff4c:	f240 3355 	movw	r3, #853	; 0x355
    ff50:	4a2b      	ldr	r2, [pc, #172]	; (10000 <z_move_thread_to_end_of_prio_q+0x10c>)
    ff52:	f001 fff9 	bl	11f48 <printk>
    ff56:	f240 3155 	movw	r1, #853	; 0x355
    ff5a:	4829      	ldr	r0, [pc, #164]	; (10000 <z_move_thread_to_end_of_prio_q+0x10c>)
    ff5c:	f002 fa8a 	bl	12474 <assert_post_action>
	return list->head == list;
    ff60:	4a28      	ldr	r2, [pc, #160]	; (10004 <z_move_thread_to_end_of_prio_q+0x110>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ff62:	f102 0128 	add.w	r1, r2, #40	; 0x28
    ff66:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
    ff6a:	428b      	cmp	r3, r1
    ff6c:	d032      	beq.n	ffd4 <z_move_thread_to_end_of_prio_q+0xe0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ff6e:	2b00      	cmp	r3, #0
    ff70:	d030      	beq.n	ffd4 <z_move_thread_to_end_of_prio_q+0xe0>
	if (thread_1->base.prio < thread_2->base.prio) {
    ff72:	f994 600e 	ldrsb.w	r6, [r4, #14]
    ff76:	f993 700e 	ldrsb.w	r7, [r3, #14]
    ff7a:	42b7      	cmp	r7, r6
    ff7c:	dd25      	ble.n	ffca <z_move_thread_to_end_of_prio_q+0xd6>
	node->prev = successor->prev;
    ff7e:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    ff80:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
    ff84:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    ff86:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
    ff88:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
    ff8a:	6890      	ldr	r0, [r2, #8]
    ff8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ff90:	7363      	strb	r3, [r4, #13]
    ff92:	1b03      	subs	r3, r0, r4
    ff94:	4258      	negs	r0, r3
    ff96:	4158      	adcs	r0, r3
    ff98:	f7ff fdc2 	bl	fb20 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ff9c:	4810      	ldr	r0, [pc, #64]	; (ffe0 <z_move_thread_to_end_of_prio_q+0xec>)
    ff9e:	f000 ff77 	bl	10e90 <z_spin_unlock_valid>
    ffa2:	b968      	cbnz	r0, ffc0 <z_move_thread_to_end_of_prio_q+0xcc>
    ffa4:	2384      	movs	r3, #132	; 0x84
    ffa6:	4a0f      	ldr	r2, [pc, #60]	; (ffe4 <z_move_thread_to_end_of_prio_q+0xf0>)
    ffa8:	4917      	ldr	r1, [pc, #92]	; (10008 <z_move_thread_to_end_of_prio_q+0x114>)
    ffaa:	4810      	ldr	r0, [pc, #64]	; (ffec <z_move_thread_to_end_of_prio_q+0xf8>)
    ffac:	f001 ffcc 	bl	11f48 <printk>
    ffb0:	490b      	ldr	r1, [pc, #44]	; (ffe0 <z_move_thread_to_end_of_prio_q+0xec>)
    ffb2:	4816      	ldr	r0, [pc, #88]	; (1000c <z_move_thread_to_end_of_prio_q+0x118>)
    ffb4:	f001 ffc8 	bl	11f48 <printk>
    ffb8:	2184      	movs	r1, #132	; 0x84
    ffba:	480a      	ldr	r0, [pc, #40]	; (ffe4 <z_move_thread_to_end_of_prio_q+0xf0>)
    ffbc:	f002 fa5a 	bl	12474 <assert_post_action>
	__asm__ volatile(
    ffc0:	f385 8811 	msr	BASEPRI, r5
    ffc4:	f3bf 8f6f 	isb	sy
}
    ffc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    ffca:	4298      	cmp	r0, r3
    ffcc:	d002      	beq.n	ffd4 <z_move_thread_to_end_of_prio_q+0xe0>
    ffce:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ffd0:	2b00      	cmp	r3, #0
    ffd2:	d1d0      	bne.n	ff76 <z_move_thread_to_end_of_prio_q+0x82>
	node->prev = list->tail;
    ffd4:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
    ffd8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    ffda:	601c      	str	r4, [r3, #0]
	list->tail = node;
    ffdc:	62d4      	str	r4, [r2, #44]	; 0x2c
}
    ffde:	e7d3      	b.n	ff88 <z_move_thread_to_end_of_prio_q+0x94>
    ffe0:	20001db8 	.word	0x20001db8
    ffe4:	00017fdb 	.word	0x00017fdb
    ffe8:	00018001 	.word	0x00018001
    ffec:	00017b50 	.word	0x00017b50
    fff0:	00018016 	.word	0x00018016
    fff4:	20001dac 	.word	0x20001dac
    fff8:	20001334 	.word	0x20001334
    fffc:	0001b7dc 	.word	0x0001b7dc
   10000:	0001b7a3 	.word	0x0001b7a3
   10004:	20001d84 	.word	0x20001d84
   10008:	0001802e 	.word	0x0001802e
   1000c:	00018045 	.word	0x00018045

00010010 <z_time_slice>:
{
   10010:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   10012:	4a15      	ldr	r2, [pc, #84]	; (10068 <z_time_slice+0x58>)
   10014:	4b15      	ldr	r3, [pc, #84]	; (1006c <z_time_slice+0x5c>)
   10016:	6814      	ldr	r4, [r2, #0]
{
   10018:	4601      	mov	r1, r0
	if (pending_current == _current) {
   1001a:	6898      	ldr	r0, [r3, #8]
   1001c:	42a0      	cmp	r0, r4
   1001e:	461c      	mov	r4, r3
   10020:	d103      	bne.n	1002a <z_time_slice+0x1a>
}
   10022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   10026:	f7ff bbcd 	b.w	f7c4 <z_reset_time_slice>
	pending_current = NULL;
   1002a:	2500      	movs	r5, #0
   1002c:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1002e:	4a10      	ldr	r2, [pc, #64]	; (10070 <z_time_slice+0x60>)
   10030:	6812      	ldr	r2, [r2, #0]
   10032:	b1b2      	cbz	r2, 10062 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   10034:	89c2      	ldrh	r2, [r0, #14]
   10036:	2a7f      	cmp	r2, #127	; 0x7f
   10038:	d813      	bhi.n	10062 <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1003a:	4a0e      	ldr	r2, [pc, #56]	; (10074 <z_time_slice+0x64>)
   1003c:	f990 500e 	ldrsb.w	r5, [r0, #14]
   10040:	6812      	ldr	r2, [r2, #0]
   10042:	4295      	cmp	r5, r2
   10044:	db0d      	blt.n	10062 <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
   10046:	4a0c      	ldr	r2, [pc, #48]	; (10078 <z_time_slice+0x68>)
   10048:	4290      	cmp	r0, r2
   1004a:	d00a      	beq.n	10062 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   1004c:	6982      	ldr	r2, [r0, #24]
   1004e:	b942      	cbnz	r2, 10062 <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   10050:	691a      	ldr	r2, [r3, #16]
   10052:	428a      	cmp	r2, r1
   10054:	dc02      	bgt.n	1005c <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   10056:	f7ff ff4d 	bl	fef4 <z_move_thread_to_end_of_prio_q>
   1005a:	e7e2      	b.n	10022 <z_time_slice+0x12>
			_current_cpu->slice_ticks -= ticks;
   1005c:	1a52      	subs	r2, r2, r1
   1005e:	611a      	str	r2, [r3, #16]
}
   10060:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   10062:	2300      	movs	r3, #0
   10064:	6123      	str	r3, [r4, #16]
   10066:	e7fb      	b.n	10060 <z_time_slice+0x50>
   10068:	20001db4 	.word	0x20001db4
   1006c:	20001d84 	.word	0x20001d84
   10070:	20001dc0 	.word	0x20001dc0
   10074:	20001dbc 	.word	0x20001dbc
   10078:	20001334 	.word	0x20001334

0001007c <z_impl_k_thread_suspend>:
{
   1007c:	b570      	push	{r4, r5, r6, lr}
   1007e:	4604      	mov	r4, r0
   10080:	3018      	adds	r0, #24
   10082:	f001 f933 	bl	112ec <z_abort_timeout>
	__asm__ volatile(
   10086:	f04f 0320 	mov.w	r3, #32
   1008a:	f3ef 8611 	mrs	r6, BASEPRI
   1008e:	f383 8811 	msr	BASEPRI, r3
   10092:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10096:	4825      	ldr	r0, [pc, #148]	; (1012c <z_impl_k_thread_suspend+0xb0>)
   10098:	f000 feec 	bl	10e74 <z_spin_lock_valid>
   1009c:	b968      	cbnz	r0, 100ba <z_impl_k_thread_suspend+0x3e>
   1009e:	235c      	movs	r3, #92	; 0x5c
   100a0:	4a23      	ldr	r2, [pc, #140]	; (10130 <z_impl_k_thread_suspend+0xb4>)
   100a2:	4924      	ldr	r1, [pc, #144]	; (10134 <z_impl_k_thread_suspend+0xb8>)
   100a4:	4824      	ldr	r0, [pc, #144]	; (10138 <z_impl_k_thread_suspend+0xbc>)
   100a6:	f001 ff4f 	bl	11f48 <printk>
   100aa:	4920      	ldr	r1, [pc, #128]	; (1012c <z_impl_k_thread_suspend+0xb0>)
   100ac:	4823      	ldr	r0, [pc, #140]	; (1013c <z_impl_k_thread_suspend+0xc0>)
   100ae:	f001 ff4b 	bl	11f48 <printk>
   100b2:	215c      	movs	r1, #92	; 0x5c
   100b4:	481e      	ldr	r0, [pc, #120]	; (10130 <z_impl_k_thread_suspend+0xb4>)
   100b6:	f002 f9dd 	bl	12474 <assert_post_action>
	z_spin_lock_set_owner(l);
   100ba:	481c      	ldr	r0, [pc, #112]	; (1012c <z_impl_k_thread_suspend+0xb0>)
   100bc:	f000 fef6 	bl	10eac <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   100c0:	f994 300d 	ldrsb.w	r3, [r4, #13]
   100c4:	2b00      	cmp	r3, #0
   100c6:	da07      	bge.n	100d8 <z_impl_k_thread_suspend+0x5c>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   100c8:	4621      	mov	r1, r4
   100ca:	481d      	ldr	r0, [pc, #116]	; (10140 <z_impl_k_thread_suspend+0xc4>)
   100cc:	f7ff fca4 	bl	fa18 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   100d0:	7b63      	ldrb	r3, [r4, #13]
   100d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   100d6:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   100d8:	4d1a      	ldr	r5, [pc, #104]	; (10144 <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   100da:	7b63      	ldrb	r3, [r4, #13]
   100dc:	68a8      	ldr	r0, [r5, #8]
   100de:	f043 0310 	orr.w	r3, r3, #16
   100e2:	7363      	strb	r3, [r4, #13]
   100e4:	1b03      	subs	r3, r0, r4
   100e6:	4258      	negs	r0, r3
   100e8:	4158      	adcs	r0, r3
   100ea:	f7ff fd19 	bl	fb20 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   100ee:	480f      	ldr	r0, [pc, #60]	; (1012c <z_impl_k_thread_suspend+0xb0>)
   100f0:	f000 fece 	bl	10e90 <z_spin_unlock_valid>
   100f4:	b968      	cbnz	r0, 10112 <z_impl_k_thread_suspend+0x96>
   100f6:	2384      	movs	r3, #132	; 0x84
   100f8:	4a0d      	ldr	r2, [pc, #52]	; (10130 <z_impl_k_thread_suspend+0xb4>)
   100fa:	4913      	ldr	r1, [pc, #76]	; (10148 <z_impl_k_thread_suspend+0xcc>)
   100fc:	480e      	ldr	r0, [pc, #56]	; (10138 <z_impl_k_thread_suspend+0xbc>)
   100fe:	f001 ff23 	bl	11f48 <printk>
   10102:	490a      	ldr	r1, [pc, #40]	; (1012c <z_impl_k_thread_suspend+0xb0>)
   10104:	4811      	ldr	r0, [pc, #68]	; (1014c <z_impl_k_thread_suspend+0xd0>)
   10106:	f001 ff1f 	bl	11f48 <printk>
   1010a:	2184      	movs	r1, #132	; 0x84
   1010c:	4808      	ldr	r0, [pc, #32]	; (10130 <z_impl_k_thread_suspend+0xb4>)
   1010e:	f002 f9b1 	bl	12474 <assert_post_action>
	__asm__ volatile(
   10112:	f386 8811 	msr	BASEPRI, r6
   10116:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1011a:	68ab      	ldr	r3, [r5, #8]
   1011c:	42a3      	cmp	r3, r4
   1011e:	d103      	bne.n	10128 <z_impl_k_thread_suspend+0xac>
}
   10120:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   10124:	f006 ba7e 	b.w	16624 <z_reschedule_unlocked>
}
   10128:	bd70      	pop	{r4, r5, r6, pc}
   1012a:	bf00      	nop
   1012c:	20001db8 	.word	0x20001db8
   10130:	00017fdb 	.word	0x00017fdb
   10134:	00018001 	.word	0x00018001
   10138:	00017b50 	.word	0x00017b50
   1013c:	00018016 	.word	0x00018016
   10140:	20001dac 	.word	0x20001dac
   10144:	20001d84 	.word	0x20001d84
   10148:	0001802e 	.word	0x0001802e
   1014c:	00018045 	.word	0x00018045

00010150 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   10150:	6d83      	ldr	r3, [r0, #88]	; 0x58
{
   10152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10156:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   10158:	b103      	cbz	r3, 1015c <z_thread_single_abort+0xc>
		thread->fn_abort();
   1015a:	4798      	blx	r3
   1015c:	f104 0018 	add.w	r0, r4, #24
   10160:	f001 f8c4 	bl	112ec <z_abort_timeout>
	__asm__ volatile(
   10164:	f04f 0320 	mov.w	r3, #32
   10168:	f3ef 8611 	mrs	r6, BASEPRI
   1016c:	f383 8811 	msr	BASEPRI, r3
   10170:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10174:	4839      	ldr	r0, [pc, #228]	; (1025c <z_thread_single_abort+0x10c>)
   10176:	f000 fe7d 	bl	10e74 <z_spin_lock_valid>
   1017a:	b968      	cbnz	r0, 10198 <z_thread_single_abort+0x48>
   1017c:	235c      	movs	r3, #92	; 0x5c
   1017e:	4a38      	ldr	r2, [pc, #224]	; (10260 <z_thread_single_abort+0x110>)
   10180:	4938      	ldr	r1, [pc, #224]	; (10264 <z_thread_single_abort+0x114>)
   10182:	4839      	ldr	r0, [pc, #228]	; (10268 <z_thread_single_abort+0x118>)
   10184:	f001 fee0 	bl	11f48 <printk>
   10188:	4934      	ldr	r1, [pc, #208]	; (1025c <z_thread_single_abort+0x10c>)
   1018a:	4838      	ldr	r0, [pc, #224]	; (1026c <z_thread_single_abort+0x11c>)
   1018c:	f001 fedc 	bl	11f48 <printk>
   10190:	215c      	movs	r1, #92	; 0x5c
   10192:	4833      	ldr	r0, [pc, #204]	; (10260 <z_thread_single_abort+0x110>)
   10194:	f002 f96e 	bl	12474 <assert_post_action>
	z_spin_lock_set_owner(l);
   10198:	4830      	ldr	r0, [pc, #192]	; (1025c <z_thread_single_abort+0x10c>)
   1019a:	f000 fe87 	bl	10eac <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1019e:	7b63      	ldrb	r3, [r4, #13]
   101a0:	06d8      	lsls	r0, r3, #27
   101a2:	d136      	bne.n	10212 <z_thread_single_abort+0xc2>
		if (z_is_thread_ready(thread)) {
   101a4:	69a2      	ldr	r2, [r4, #24]
   101a6:	2a00      	cmp	r2, #0
   101a8:	d133      	bne.n	10212 <z_thread_single_abort+0xc2>
			if (z_is_thread_queued(thread)) {
   101aa:	0619      	lsls	r1, r3, #24
   101ac:	d507      	bpl.n	101be <z_thread_single_abort+0x6e>
				_priq_run_remove(&_kernel.ready_q.runq,
   101ae:	4621      	mov	r1, r4
   101b0:	482f      	ldr	r0, [pc, #188]	; (10270 <z_thread_single_abort+0x120>)
   101b2:	f7ff fc31 	bl	fa18 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   101b6:	7b63      	ldrb	r3, [r4, #13]
   101b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   101bc:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   101be:	4b2d      	ldr	r3, [pc, #180]	; (10274 <z_thread_single_abort+0x124>)
   101c0:	6898      	ldr	r0, [r3, #8]
   101c2:	1b02      	subs	r2, r0, r4
   101c4:	4250      	negs	r0, r2
   101c6:	4150      	adcs	r0, r2
   101c8:	f7ff fcaa 	bl	fb20 <update_cache>
			waiter->base.pended_on = NULL;
   101cc:	2700      	movs	r7, #0
		thread->base.thread_state |= mask;
   101ce:	7b63      	ldrb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   101d0:	f104 0828 	add.w	r8, r4, #40	; 0x28
   101d4:	f043 0308 	orr.w	r3, r3, #8
   101d8:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   101da:	6aa5      	ldr	r5, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   101dc:	4545      	cmp	r5, r8
   101de:	d000      	beq.n	101e2 <z_thread_single_abort+0x92>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   101e0:	bb3d      	cbnz	r5, 10232 <z_thread_single_abort+0xe2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   101e2:	481e      	ldr	r0, [pc, #120]	; (1025c <z_thread_single_abort+0x10c>)
   101e4:	f000 fe54 	bl	10e90 <z_spin_unlock_valid>
   101e8:	b968      	cbnz	r0, 10206 <z_thread_single_abort+0xb6>
   101ea:	2384      	movs	r3, #132	; 0x84
   101ec:	4a1c      	ldr	r2, [pc, #112]	; (10260 <z_thread_single_abort+0x110>)
   101ee:	4922      	ldr	r1, [pc, #136]	; (10278 <z_thread_single_abort+0x128>)
   101f0:	481d      	ldr	r0, [pc, #116]	; (10268 <z_thread_single_abort+0x118>)
   101f2:	f001 fea9 	bl	11f48 <printk>
   101f6:	4919      	ldr	r1, [pc, #100]	; (1025c <z_thread_single_abort+0x10c>)
   101f8:	4820      	ldr	r0, [pc, #128]	; (1027c <z_thread_single_abort+0x12c>)
   101fa:	f001 fea5 	bl	11f48 <printk>
   101fe:	2184      	movs	r1, #132	; 0x84
   10200:	4817      	ldr	r0, [pc, #92]	; (10260 <z_thread_single_abort+0x110>)
   10202:	f002 f937 	bl	12474 <assert_post_action>
	__asm__ volatile(
   10206:	f386 8811 	msr	BASEPRI, r6
   1020a:	f3bf 8f6f 	isb	sy
}
   1020e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
   10212:	079b      	lsls	r3, r3, #30
   10214:	d5da      	bpl.n	101cc <z_thread_single_abort+0x7c>
				_priq_wait_remove(&pended_on(thread)->waitq,
   10216:	f104 0008 	add.w	r0, r4, #8
   1021a:	f7ff fabb 	bl	f794 <pended_on.isra.0>
   1021e:	4621      	mov	r1, r4
   10220:	f7ff fbfa 	bl	fa18 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   10224:	7b63      	ldrb	r3, [r4, #13]
   10226:	f023 0302 	bic.w	r3, r3, #2
   1022a:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   1022c:	2300      	movs	r3, #0
   1022e:	60a3      	str	r3, [r4, #8]
   10230:	e7cc      	b.n	101cc <z_thread_single_abort+0x7c>
   10232:	f105 0018 	add.w	r0, r5, #24
   10236:	f001 f859 	bl	112ec <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   1023a:	f105 0008 	add.w	r0, r5, #8
   1023e:	f7ff faa9 	bl	f794 <pended_on.isra.0>
   10242:	4629      	mov	r1, r5
   10244:	f7ff fbe8 	bl	fa18 <z_priq_dumb_remove>
   10248:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
   1024a:	4628      	mov	r0, r5
   1024c:	f023 0302 	bic.w	r3, r3, #2
   10250:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   10252:	60af      	str	r7, [r5, #8]
   10254:	672f      	str	r7, [r5, #112]	; 0x70
			ready_thread(waiter);
   10256:	f7ff fd03 	bl	fc60 <ready_thread>
   1025a:	e7be      	b.n	101da <z_thread_single_abort+0x8a>
   1025c:	20001db8 	.word	0x20001db8
   10260:	00017fdb 	.word	0x00017fdb
   10264:	00018001 	.word	0x00018001
   10268:	00017b50 	.word	0x00017b50
   1026c:	00018016 	.word	0x00018016
   10270:	20001dac 	.word	0x20001dac
   10274:	20001d84 	.word	0x20001d84
   10278:	0001802e 	.word	0x0001802e
   1027c:	00018045 	.word	0x00018045

00010280 <unready_thread>:
{
   10280:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   10282:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   10286:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   10288:	2b00      	cmp	r3, #0
   1028a:	da07      	bge.n	1029c <unready_thread+0x1c>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1028c:	4601      	mov	r1, r0
   1028e:	4808      	ldr	r0, [pc, #32]	; (102b0 <unready_thread+0x30>)
   10290:	f7ff fbc2 	bl	fa18 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   10294:	7b63      	ldrb	r3, [r4, #13]
   10296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1029a:	7363      	strb	r3, [r4, #13]
	update_cache(thread == _current);
   1029c:	4b05      	ldr	r3, [pc, #20]	; (102b4 <unready_thread+0x34>)
   1029e:	6898      	ldr	r0, [r3, #8]
   102a0:	1b03      	subs	r3, r0, r4
   102a2:	4258      	negs	r0, r3
   102a4:	4158      	adcs	r0, r3
}
   102a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   102aa:	f7ff bc39 	b.w	fb20 <update_cache>
   102ae:	bf00      	nop
   102b0:	20001dac 	.word	0x20001dac
   102b4:	20001d84 	.word	0x20001d84

000102b8 <z_remove_thread_from_ready_q>:
{
   102b8:	b538      	push	{r3, r4, r5, lr}
   102ba:	4604      	mov	r4, r0
	__asm__ volatile(
   102bc:	f04f 0320 	mov.w	r3, #32
   102c0:	f3ef 8511 	mrs	r5, BASEPRI
   102c4:	f383 8811 	msr	BASEPRI, r3
   102c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   102cc:	4817      	ldr	r0, [pc, #92]	; (1032c <z_remove_thread_from_ready_q+0x74>)
   102ce:	f000 fdd1 	bl	10e74 <z_spin_lock_valid>
   102d2:	b968      	cbnz	r0, 102f0 <z_remove_thread_from_ready_q+0x38>
   102d4:	235c      	movs	r3, #92	; 0x5c
   102d6:	4a16      	ldr	r2, [pc, #88]	; (10330 <z_remove_thread_from_ready_q+0x78>)
   102d8:	4916      	ldr	r1, [pc, #88]	; (10334 <z_remove_thread_from_ready_q+0x7c>)
   102da:	4817      	ldr	r0, [pc, #92]	; (10338 <z_remove_thread_from_ready_q+0x80>)
   102dc:	f001 fe34 	bl	11f48 <printk>
   102e0:	4912      	ldr	r1, [pc, #72]	; (1032c <z_remove_thread_from_ready_q+0x74>)
   102e2:	4816      	ldr	r0, [pc, #88]	; (1033c <z_remove_thread_from_ready_q+0x84>)
   102e4:	f001 fe30 	bl	11f48 <printk>
   102e8:	215c      	movs	r1, #92	; 0x5c
   102ea:	4811      	ldr	r0, [pc, #68]	; (10330 <z_remove_thread_from_ready_q+0x78>)
   102ec:	f002 f8c2 	bl	12474 <assert_post_action>
	z_spin_lock_set_owner(l);
   102f0:	480e      	ldr	r0, [pc, #56]	; (1032c <z_remove_thread_from_ready_q+0x74>)
   102f2:	f000 fddb 	bl	10eac <z_spin_lock_set_owner>
		unready_thread(thread);
   102f6:	4620      	mov	r0, r4
   102f8:	f7ff ffc2 	bl	10280 <unready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   102fc:	480b      	ldr	r0, [pc, #44]	; (1032c <z_remove_thread_from_ready_q+0x74>)
   102fe:	f000 fdc7 	bl	10e90 <z_spin_unlock_valid>
   10302:	b968      	cbnz	r0, 10320 <z_remove_thread_from_ready_q+0x68>
   10304:	2384      	movs	r3, #132	; 0x84
   10306:	4a0a      	ldr	r2, [pc, #40]	; (10330 <z_remove_thread_from_ready_q+0x78>)
   10308:	490d      	ldr	r1, [pc, #52]	; (10340 <z_remove_thread_from_ready_q+0x88>)
   1030a:	480b      	ldr	r0, [pc, #44]	; (10338 <z_remove_thread_from_ready_q+0x80>)
   1030c:	f001 fe1c 	bl	11f48 <printk>
   10310:	4906      	ldr	r1, [pc, #24]	; (1032c <z_remove_thread_from_ready_q+0x74>)
   10312:	480c      	ldr	r0, [pc, #48]	; (10344 <z_remove_thread_from_ready_q+0x8c>)
   10314:	f001 fe18 	bl	11f48 <printk>
   10318:	2184      	movs	r1, #132	; 0x84
   1031a:	4805      	ldr	r0, [pc, #20]	; (10330 <z_remove_thread_from_ready_q+0x78>)
   1031c:	f002 f8aa 	bl	12474 <assert_post_action>
	__asm__ volatile(
   10320:	f385 8811 	msr	BASEPRI, r5
   10324:	f3bf 8f6f 	isb	sy
}
   10328:	bd38      	pop	{r3, r4, r5, pc}
   1032a:	bf00      	nop
   1032c:	20001db8 	.word	0x20001db8
   10330:	00017fdb 	.word	0x00017fdb
   10334:	00018001 	.word	0x00018001
   10338:	00017b50 	.word	0x00017b50
   1033c:	00018016 	.word	0x00018016
   10340:	0001802e 	.word	0x0001802e
   10344:	00018045 	.word	0x00018045

00010348 <add_to_waitq_locked>:
{
   10348:	b538      	push	{r3, r4, r5, lr}
   1034a:	4604      	mov	r4, r0
   1034c:	460d      	mov	r5, r1
	unready_thread(thread);
   1034e:	f7ff ff97 	bl	10280 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   10352:	7b63      	ldrb	r3, [r4, #13]
   10354:	f043 0302 	orr.w	r3, r3, #2
   10358:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1035a:	b1f5      	cbz	r5, 1039a <add_to_waitq_locked+0x52>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1035c:	4b16      	ldr	r3, [pc, #88]	; (103b8 <add_to_waitq_locked+0x70>)
		thread->base.pended_on = wait_q;
   1035e:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   10360:	429c      	cmp	r4, r3
   10362:	d10b      	bne.n	1037c <add_to_waitq_locked+0x34>
   10364:	4915      	ldr	r1, [pc, #84]	; (103bc <add_to_waitq_locked+0x74>)
   10366:	4816      	ldr	r0, [pc, #88]	; (103c0 <add_to_waitq_locked+0x78>)
   10368:	f240 3355 	movw	r3, #853	; 0x355
   1036c:	4a15      	ldr	r2, [pc, #84]	; (103c4 <add_to_waitq_locked+0x7c>)
   1036e:	f001 fdeb 	bl	11f48 <printk>
   10372:	f240 3155 	movw	r1, #853	; 0x355
   10376:	4813      	ldr	r0, [pc, #76]	; (103c4 <add_to_waitq_locked+0x7c>)
   10378:	f002 f87c 	bl	12474 <assert_post_action>
	return list->head == list;
   1037c:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1037e:	429d      	cmp	r5, r3
   10380:	d012      	beq.n	103a8 <add_to_waitq_locked+0x60>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10382:	b18b      	cbz	r3, 103a8 <add_to_waitq_locked+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
   10384:	f994 200e 	ldrsb.w	r2, [r4, #14]
   10388:	f993 100e 	ldrsb.w	r1, [r3, #14]
   1038c:	4291      	cmp	r1, r2
   1038e:	dd05      	ble.n	1039c <add_to_waitq_locked+0x54>
	node->prev = successor->prev;
   10390:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   10392:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   10396:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   10398:	605c      	str	r4, [r3, #4]
}
   1039a:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   1039c:	6869      	ldr	r1, [r5, #4]
   1039e:	428b      	cmp	r3, r1
   103a0:	d002      	beq.n	103a8 <add_to_waitq_locked+0x60>
   103a2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   103a4:	2b00      	cmp	r3, #0
   103a6:	d1ef      	bne.n	10388 <add_to_waitq_locked+0x40>
	node->prev = list->tail;
   103a8:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   103aa:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   103ac:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   103ae:	686b      	ldr	r3, [r5, #4]
   103b0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   103b2:	606c      	str	r4, [r5, #4]
}
   103b4:	e7f1      	b.n	1039a <add_to_waitq_locked+0x52>
   103b6:	bf00      	nop
   103b8:	20001334 	.word	0x20001334
   103bc:	0001b7dc 	.word	0x0001b7dc
   103c0:	00017b50 	.word	0x00017b50
   103c4:	0001b7a3 	.word	0x0001b7a3

000103c8 <pend>:
{
   103c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   103cc:	4604      	mov	r4, r0
   103ce:	460d      	mov	r5, r1
   103d0:	4616      	mov	r6, r2
   103d2:	461f      	mov	r7, r3
	__asm__ volatile(
   103d4:	f04f 0320 	mov.w	r3, #32
   103d8:	f3ef 8811 	mrs	r8, BASEPRI
   103dc:	f383 8811 	msr	BASEPRI, r3
   103e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   103e4:	481f      	ldr	r0, [pc, #124]	; (10464 <pend+0x9c>)
   103e6:	f000 fd45 	bl	10e74 <z_spin_lock_valid>
   103ea:	b968      	cbnz	r0, 10408 <pend+0x40>
   103ec:	235c      	movs	r3, #92	; 0x5c
   103ee:	4a1e      	ldr	r2, [pc, #120]	; (10468 <pend+0xa0>)
   103f0:	491e      	ldr	r1, [pc, #120]	; (1046c <pend+0xa4>)
   103f2:	481f      	ldr	r0, [pc, #124]	; (10470 <pend+0xa8>)
   103f4:	f001 fda8 	bl	11f48 <printk>
   103f8:	491a      	ldr	r1, [pc, #104]	; (10464 <pend+0x9c>)
   103fa:	481e      	ldr	r0, [pc, #120]	; (10474 <pend+0xac>)
   103fc:	f001 fda4 	bl	11f48 <printk>
   10400:	215c      	movs	r1, #92	; 0x5c
   10402:	4819      	ldr	r0, [pc, #100]	; (10468 <pend+0xa0>)
   10404:	f002 f836 	bl	12474 <assert_post_action>
	z_spin_lock_set_owner(l);
   10408:	4816      	ldr	r0, [pc, #88]	; (10464 <pend+0x9c>)
   1040a:	f000 fd4f 	bl	10eac <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   1040e:	4620      	mov	r0, r4
   10410:	4629      	mov	r1, r5
   10412:	f7ff ff99 	bl	10348 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10416:	4813      	ldr	r0, [pc, #76]	; (10464 <pend+0x9c>)
   10418:	f000 fd3a 	bl	10e90 <z_spin_unlock_valid>
   1041c:	b968      	cbnz	r0, 1043a <pend+0x72>
   1041e:	2384      	movs	r3, #132	; 0x84
   10420:	4a11      	ldr	r2, [pc, #68]	; (10468 <pend+0xa0>)
   10422:	4915      	ldr	r1, [pc, #84]	; (10478 <pend+0xb0>)
   10424:	4812      	ldr	r0, [pc, #72]	; (10470 <pend+0xa8>)
   10426:	f001 fd8f 	bl	11f48 <printk>
   1042a:	490e      	ldr	r1, [pc, #56]	; (10464 <pend+0x9c>)
   1042c:	4813      	ldr	r0, [pc, #76]	; (1047c <pend+0xb4>)
   1042e:	f001 fd8b 	bl	11f48 <printk>
   10432:	2184      	movs	r1, #132	; 0x84
   10434:	480c      	ldr	r0, [pc, #48]	; (10468 <pend+0xa0>)
   10436:	f002 f81d 	bl	12474 <assert_post_action>
	__asm__ volatile(
   1043a:	f388 8811 	msr	BASEPRI, r8
   1043e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   10442:	1c7b      	adds	r3, r7, #1
   10444:	bf08      	it	eq
   10446:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1044a:	d008      	beq.n	1045e <pend+0x96>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1044c:	4632      	mov	r2, r6
   1044e:	463b      	mov	r3, r7
   10450:	f104 0018 	add.w	r0, r4, #24
   10454:	490a      	ldr	r1, [pc, #40]	; (10480 <pend+0xb8>)
}
   10456:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1045a:	f000 be69 	b.w	11130 <z_add_timeout>
   1045e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10462:	bf00      	nop
   10464:	20001db8 	.word	0x20001db8
   10468:	00017fdb 	.word	0x00017fdb
   1046c:	00018001 	.word	0x00018001
   10470:	00017b50 	.word	0x00017b50
   10474:	00018016 	.word	0x00018016
   10478:	0001802e 	.word	0x0001802e
   1047c:	00018045 	.word	0x00018045
   10480:	0000fd85 	.word	0x0000fd85

00010484 <z_pend_curr>:
{
   10484:	b538      	push	{r3, r4, r5, lr}
   10486:	4604      	mov	r4, r0
	pending_current = _current;
   10488:	4b10      	ldr	r3, [pc, #64]	; (104cc <z_pend_curr+0x48>)
{
   1048a:	460d      	mov	r5, r1
	pending_current = _current;
   1048c:	6898      	ldr	r0, [r3, #8]
   1048e:	4b10      	ldr	r3, [pc, #64]	; (104d0 <z_pend_curr+0x4c>)
{
   10490:	4611      	mov	r1, r2
	pending_current = _current;
   10492:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   10494:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   10498:	f7ff ff96 	bl	103c8 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1049c:	4620      	mov	r0, r4
   1049e:	f000 fcf7 	bl	10e90 <z_spin_unlock_valid>
   104a2:	b968      	cbnz	r0, 104c0 <z_pend_curr+0x3c>
   104a4:	239b      	movs	r3, #155	; 0x9b
   104a6:	4a0b      	ldr	r2, [pc, #44]	; (104d4 <z_pend_curr+0x50>)
   104a8:	490b      	ldr	r1, [pc, #44]	; (104d8 <z_pend_curr+0x54>)
   104aa:	480c      	ldr	r0, [pc, #48]	; (104dc <z_pend_curr+0x58>)
   104ac:	f001 fd4c 	bl	11f48 <printk>
   104b0:	4621      	mov	r1, r4
   104b2:	480b      	ldr	r0, [pc, #44]	; (104e0 <z_pend_curr+0x5c>)
   104b4:	f001 fd48 	bl	11f48 <printk>
   104b8:	219b      	movs	r1, #155	; 0x9b
   104ba:	4806      	ldr	r0, [pc, #24]	; (104d4 <z_pend_curr+0x50>)
   104bc:	f001 ffda 	bl	12474 <assert_post_action>
   104c0:	4628      	mov	r0, r5
}
   104c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   104c6:	f7f3 bb33 	b.w	3b30 <arch_swap>
   104ca:	bf00      	nop
   104cc:	20001d84 	.word	0x20001d84
   104d0:	20001db4 	.word	0x20001db4
   104d4:	00017fdb 	.word	0x00017fdb
   104d8:	0001802e 	.word	0x0001802e
   104dc:	00017b50 	.word	0x00017b50
   104e0:	00018045 	.word	0x00018045

000104e4 <z_set_prio>:
{
   104e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   104e6:	4604      	mov	r4, r0
   104e8:	460d      	mov	r5, r1
	__asm__ volatile(
   104ea:	f04f 0320 	mov.w	r3, #32
   104ee:	f3ef 8611 	mrs	r6, BASEPRI
   104f2:	f383 8811 	msr	BASEPRI, r3
   104f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   104fa:	4836      	ldr	r0, [pc, #216]	; (105d4 <z_set_prio+0xf0>)
   104fc:	f000 fcba 	bl	10e74 <z_spin_lock_valid>
   10500:	b968      	cbnz	r0, 1051e <z_set_prio+0x3a>
   10502:	235c      	movs	r3, #92	; 0x5c
   10504:	4a34      	ldr	r2, [pc, #208]	; (105d8 <z_set_prio+0xf4>)
   10506:	4935      	ldr	r1, [pc, #212]	; (105dc <z_set_prio+0xf8>)
   10508:	4835      	ldr	r0, [pc, #212]	; (105e0 <z_set_prio+0xfc>)
   1050a:	f001 fd1d 	bl	11f48 <printk>
   1050e:	4931      	ldr	r1, [pc, #196]	; (105d4 <z_set_prio+0xf0>)
   10510:	4834      	ldr	r0, [pc, #208]	; (105e4 <z_set_prio+0x100>)
   10512:	f001 fd19 	bl	11f48 <printk>
   10516:	215c      	movs	r1, #92	; 0x5c
   10518:	482f      	ldr	r0, [pc, #188]	; (105d8 <z_set_prio+0xf4>)
   1051a:	f001 ffab 	bl	12474 <assert_post_action>
	z_spin_lock_set_owner(l);
   1051e:	482d      	ldr	r0, [pc, #180]	; (105d4 <z_set_prio+0xf0>)
   10520:	f000 fcc4 	bl	10eac <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   10524:	7b63      	ldrb	r3, [r4, #13]
   10526:	b26d      	sxtb	r5, r5
   10528:	06db      	lsls	r3, r3, #27
   1052a:	d150      	bne.n	105ce <z_set_prio+0xea>
		if (need_sched) {
   1052c:	69a3      	ldr	r3, [r4, #24]
   1052e:	2b00      	cmp	r3, #0
   10530:	d14d      	bne.n	105ce <z_set_prio+0xea>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   10532:	4621      	mov	r1, r4
   10534:	482c      	ldr	r0, [pc, #176]	; (105e8 <z_set_prio+0x104>)
   10536:	f7ff fa6f 	bl	fa18 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1053a:	4b2c      	ldr	r3, [pc, #176]	; (105ec <z_set_prio+0x108>)
				thread->base.prio = prio;
   1053c:	73a5      	strb	r5, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1053e:	429c      	cmp	r4, r3
   10540:	d10b      	bne.n	1055a <z_set_prio+0x76>
   10542:	492b      	ldr	r1, [pc, #172]	; (105f0 <z_set_prio+0x10c>)
   10544:	4826      	ldr	r0, [pc, #152]	; (105e0 <z_set_prio+0xfc>)
   10546:	f240 3355 	movw	r3, #853	; 0x355
   1054a:	4a2a      	ldr	r2, [pc, #168]	; (105f4 <z_set_prio+0x110>)
   1054c:	f001 fcfc 	bl	11f48 <printk>
   10550:	f240 3155 	movw	r1, #853	; 0x355
   10554:	4827      	ldr	r0, [pc, #156]	; (105f4 <z_set_prio+0x110>)
   10556:	f001 ff8d 	bl	12474 <assert_post_action>
	return list->head == list;
   1055a:	4a27      	ldr	r2, [pc, #156]	; (105f8 <z_set_prio+0x114>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1055c:	f102 0128 	add.w	r1, r2, #40	; 0x28
   10560:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   10564:	428b      	cmp	r3, r1
   10566:	d02c      	beq.n	105c2 <z_set_prio+0xde>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10568:	b35b      	cbz	r3, 105c2 <z_set_prio+0xde>
	if (thread_1->base.prio < thread_2->base.prio) {
   1056a:	f994 500e 	ldrsb.w	r5, [r4, #14]
   1056e:	f993 700e 	ldrsb.w	r7, [r3, #14]
   10572:	42af      	cmp	r7, r5
   10574:	dd20      	ble.n	105b8 <z_set_prio+0xd4>
	node->prev = successor->prev;
   10576:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   10578:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1057c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1057e:	605c      	str	r4, [r3, #4]
			update_cache(1);
   10580:	2001      	movs	r0, #1
   10582:	f7ff facd 	bl	fb20 <update_cache>
   10586:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10588:	4812      	ldr	r0, [pc, #72]	; (105d4 <z_set_prio+0xf0>)
   1058a:	f000 fc81 	bl	10e90 <z_spin_unlock_valid>
   1058e:	b968      	cbnz	r0, 105ac <z_set_prio+0xc8>
   10590:	2384      	movs	r3, #132	; 0x84
   10592:	4a11      	ldr	r2, [pc, #68]	; (105d8 <z_set_prio+0xf4>)
   10594:	4919      	ldr	r1, [pc, #100]	; (105fc <z_set_prio+0x118>)
   10596:	4812      	ldr	r0, [pc, #72]	; (105e0 <z_set_prio+0xfc>)
   10598:	f001 fcd6 	bl	11f48 <printk>
   1059c:	490d      	ldr	r1, [pc, #52]	; (105d4 <z_set_prio+0xf0>)
   1059e:	4818      	ldr	r0, [pc, #96]	; (10600 <z_set_prio+0x11c>)
   105a0:	f001 fcd2 	bl	11f48 <printk>
   105a4:	2184      	movs	r1, #132	; 0x84
   105a6:	480c      	ldr	r0, [pc, #48]	; (105d8 <z_set_prio+0xf4>)
   105a8:	f001 ff64 	bl	12474 <assert_post_action>
	__asm__ volatile(
   105ac:	f386 8811 	msr	BASEPRI, r6
   105b0:	f3bf 8f6f 	isb	sy
}
   105b4:	4620      	mov	r0, r4
   105b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   105b8:	4298      	cmp	r0, r3
   105ba:	d002      	beq.n	105c2 <z_set_prio+0xde>
   105bc:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   105be:	2b00      	cmp	r3, #0
   105c0:	d1d5      	bne.n	1056e <z_set_prio+0x8a>
	node->prev = list->tail;
   105c2:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   105c6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   105c8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   105ca:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   105cc:	e7d8      	b.n	10580 <z_set_prio+0x9c>
			thread->base.prio = prio;
   105ce:	73a5      	strb	r5, [r4, #14]
   105d0:	2400      	movs	r4, #0
   105d2:	e7d9      	b.n	10588 <z_set_prio+0xa4>
   105d4:	20001db8 	.word	0x20001db8
   105d8:	00017fdb 	.word	0x00017fdb
   105dc:	00018001 	.word	0x00018001
   105e0:	00017b50 	.word	0x00017b50
   105e4:	00018016 	.word	0x00018016
   105e8:	20001dac 	.word	0x20001dac
   105ec:	20001334 	.word	0x20001334
   105f0:	0001b7dc 	.word	0x0001b7dc
   105f4:	0001b7a3 	.word	0x0001b7a3
   105f8:	20001d84 	.word	0x20001d84
   105fc:	0001802e 	.word	0x0001802e
   10600:	00018045 	.word	0x00018045

00010604 <z_unpend_first_thread>:
{
   10604:	b538      	push	{r3, r4, r5, lr}
   10606:	4604      	mov	r4, r0
	__asm__ volatile(
   10608:	f04f 0320 	mov.w	r3, #32
   1060c:	f3ef 8511 	mrs	r5, BASEPRI
   10610:	f383 8811 	msr	BASEPRI, r3
   10614:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10618:	483b      	ldr	r0, [pc, #236]	; (10708 <z_unpend_first_thread+0x104>)
   1061a:	f000 fc2b 	bl	10e74 <z_spin_lock_valid>
   1061e:	b968      	cbnz	r0, 1063c <z_unpend_first_thread+0x38>
   10620:	235c      	movs	r3, #92	; 0x5c
   10622:	4a3a      	ldr	r2, [pc, #232]	; (1070c <z_unpend_first_thread+0x108>)
   10624:	493a      	ldr	r1, [pc, #232]	; (10710 <z_unpend_first_thread+0x10c>)
   10626:	483b      	ldr	r0, [pc, #236]	; (10714 <z_unpend_first_thread+0x110>)
   10628:	f001 fc8e 	bl	11f48 <printk>
   1062c:	4936      	ldr	r1, [pc, #216]	; (10708 <z_unpend_first_thread+0x104>)
   1062e:	483a      	ldr	r0, [pc, #232]	; (10718 <z_unpend_first_thread+0x114>)
   10630:	f001 fc8a 	bl	11f48 <printk>
   10634:	215c      	movs	r1, #92	; 0x5c
   10636:	4835      	ldr	r0, [pc, #212]	; (1070c <z_unpend_first_thread+0x108>)
   10638:	f001 ff1c 	bl	12474 <assert_post_action>
	z_spin_lock_set_owner(l);
   1063c:	4832      	ldr	r0, [pc, #200]	; (10708 <z_unpend_first_thread+0x104>)
   1063e:	f000 fc35 	bl	10eac <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   10642:	4620      	mov	r0, r4
   10644:	f005 fff8 	bl	16638 <z_priq_dumb_best>
   10648:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1064a:	482f      	ldr	r0, [pc, #188]	; (10708 <z_unpend_first_thread+0x104>)
   1064c:	f000 fc20 	bl	10e90 <z_spin_unlock_valid>
   10650:	b968      	cbnz	r0, 1066e <z_unpend_first_thread+0x6a>
   10652:	2384      	movs	r3, #132	; 0x84
   10654:	4a2d      	ldr	r2, [pc, #180]	; (1070c <z_unpend_first_thread+0x108>)
   10656:	4931      	ldr	r1, [pc, #196]	; (1071c <z_unpend_first_thread+0x118>)
   10658:	482e      	ldr	r0, [pc, #184]	; (10714 <z_unpend_first_thread+0x110>)
   1065a:	f001 fc75 	bl	11f48 <printk>
   1065e:	492a      	ldr	r1, [pc, #168]	; (10708 <z_unpend_first_thread+0x104>)
   10660:	482f      	ldr	r0, [pc, #188]	; (10720 <z_unpend_first_thread+0x11c>)
   10662:	f001 fc71 	bl	11f48 <printk>
   10666:	2184      	movs	r1, #132	; 0x84
   10668:	4828      	ldr	r0, [pc, #160]	; (1070c <z_unpend_first_thread+0x108>)
   1066a:	f001 ff03 	bl	12474 <assert_post_action>
	__asm__ volatile(
   1066e:	f385 8811 	msr	BASEPRI, r5
   10672:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   10676:	2c00      	cmp	r4, #0
   10678:	d043      	beq.n	10702 <z_unpend_first_thread+0xfe>
	__asm__ volatile(
   1067a:	f04f 0320 	mov.w	r3, #32
   1067e:	f3ef 8511 	mrs	r5, BASEPRI
   10682:	f383 8811 	msr	BASEPRI, r3
   10686:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1068a:	481f      	ldr	r0, [pc, #124]	; (10708 <z_unpend_first_thread+0x104>)
   1068c:	f000 fbf2 	bl	10e74 <z_spin_lock_valid>
   10690:	b968      	cbnz	r0, 106ae <z_unpend_first_thread+0xaa>
   10692:	235c      	movs	r3, #92	; 0x5c
   10694:	4a1d      	ldr	r2, [pc, #116]	; (1070c <z_unpend_first_thread+0x108>)
   10696:	491e      	ldr	r1, [pc, #120]	; (10710 <z_unpend_first_thread+0x10c>)
   10698:	481e      	ldr	r0, [pc, #120]	; (10714 <z_unpend_first_thread+0x110>)
   1069a:	f001 fc55 	bl	11f48 <printk>
   1069e:	491a      	ldr	r1, [pc, #104]	; (10708 <z_unpend_first_thread+0x104>)
   106a0:	481d      	ldr	r0, [pc, #116]	; (10718 <z_unpend_first_thread+0x114>)
   106a2:	f001 fc51 	bl	11f48 <printk>
   106a6:	215c      	movs	r1, #92	; 0x5c
   106a8:	4818      	ldr	r0, [pc, #96]	; (1070c <z_unpend_first_thread+0x108>)
   106aa:	f001 fee3 	bl	12474 <assert_post_action>
	z_spin_lock_set_owner(l);
   106ae:	4816      	ldr	r0, [pc, #88]	; (10708 <z_unpend_first_thread+0x104>)
   106b0:	f000 fbfc 	bl	10eac <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   106b4:	f104 0008 	add.w	r0, r4, #8
   106b8:	f7ff f86c 	bl	f794 <pended_on.isra.0>
   106bc:	4621      	mov	r1, r4
   106be:	f7ff f9ab 	bl	fa18 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   106c2:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   106c4:	4810      	ldr	r0, [pc, #64]	; (10708 <z_unpend_first_thread+0x104>)
   106c6:	f023 0302 	bic.w	r3, r3, #2
   106ca:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
   106cc:	2300      	movs	r3, #0
   106ce:	60a3      	str	r3, [r4, #8]
   106d0:	f000 fbde 	bl	10e90 <z_spin_unlock_valid>
   106d4:	b968      	cbnz	r0, 106f2 <z_unpend_first_thread+0xee>
   106d6:	2384      	movs	r3, #132	; 0x84
   106d8:	4a0c      	ldr	r2, [pc, #48]	; (1070c <z_unpend_first_thread+0x108>)
   106da:	4910      	ldr	r1, [pc, #64]	; (1071c <z_unpend_first_thread+0x118>)
   106dc:	480d      	ldr	r0, [pc, #52]	; (10714 <z_unpend_first_thread+0x110>)
   106de:	f001 fc33 	bl	11f48 <printk>
   106e2:	4909      	ldr	r1, [pc, #36]	; (10708 <z_unpend_first_thread+0x104>)
   106e4:	480e      	ldr	r0, [pc, #56]	; (10720 <z_unpend_first_thread+0x11c>)
   106e6:	f001 fc2f 	bl	11f48 <printk>
   106ea:	2184      	movs	r1, #132	; 0x84
   106ec:	4807      	ldr	r0, [pc, #28]	; (1070c <z_unpend_first_thread+0x108>)
   106ee:	f001 fec1 	bl	12474 <assert_post_action>
	__asm__ volatile(
   106f2:	f385 8811 	msr	BASEPRI, r5
   106f6:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   106fa:	f104 0018 	add.w	r0, r4, #24
   106fe:	f000 fdf5 	bl	112ec <z_abort_timeout>
}
   10702:	4620      	mov	r0, r4
   10704:	bd38      	pop	{r3, r4, r5, pc}
   10706:	bf00      	nop
   10708:	20001db8 	.word	0x20001db8
   1070c:	00017fdb 	.word	0x00017fdb
   10710:	00018001 	.word	0x00018001
   10714:	00017b50 	.word	0x00017b50
   10718:	00018016 	.word	0x00018016
   1071c:	0001802e 	.word	0x0001802e
   10720:	00018045 	.word	0x00018045

00010724 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   10724:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   10726:	4b04      	ldr	r3, [pc, #16]	; (10738 <z_sched_init+0x14>)
   10728:	4608      	mov	r0, r1
   1072a:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   1072e:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   10732:	f7ff b85d 	b.w	f7f0 <k_sched_time_slice_set>
   10736:	bf00      	nop
   10738:	20001d84 	.word	0x20001d84

0001073c <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   1073c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1073e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   10742:	b173      	cbz	r3, 10762 <z_impl_k_yield+0x26>
   10744:	4945      	ldr	r1, [pc, #276]	; (1085c <z_impl_k_yield+0x120>)
   10746:	f44f 638c 	mov.w	r3, #1120	; 0x460
   1074a:	4a45      	ldr	r2, [pc, #276]	; (10860 <z_impl_k_yield+0x124>)
   1074c:	4845      	ldr	r0, [pc, #276]	; (10864 <z_impl_k_yield+0x128>)
   1074e:	f001 fbfb 	bl	11f48 <printk>
   10752:	4845      	ldr	r0, [pc, #276]	; (10868 <z_impl_k_yield+0x12c>)
   10754:	f001 fbf8 	bl	11f48 <printk>
   10758:	f44f 618c 	mov.w	r1, #1120	; 0x460
   1075c:	4840      	ldr	r0, [pc, #256]	; (10860 <z_impl_k_yield+0x124>)
   1075e:	f001 fe89 	bl	12474 <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   10762:	4c42      	ldr	r4, [pc, #264]	; (1086c <z_impl_k_yield+0x130>)
   10764:	4e42      	ldr	r6, [pc, #264]	; (10870 <z_impl_k_yield+0x134>)
   10766:	68a2      	ldr	r2, [r4, #8]
   10768:	42b2      	cmp	r2, r6
   1076a:	d05f      	beq.n	1082c <z_impl_k_yield+0xf0>
	__asm__ volatile(
   1076c:	f04f 0320 	mov.w	r3, #32
   10770:	f3ef 8711 	mrs	r7, BASEPRI
   10774:	f383 8811 	msr	BASEPRI, r3
   10778:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1077c:	483d      	ldr	r0, [pc, #244]	; (10874 <z_impl_k_yield+0x138>)
   1077e:	f000 fb79 	bl	10e74 <z_spin_lock_valid>
   10782:	b968      	cbnz	r0, 107a0 <z_impl_k_yield+0x64>
   10784:	235c      	movs	r3, #92	; 0x5c
   10786:	4a3c      	ldr	r2, [pc, #240]	; (10878 <z_impl_k_yield+0x13c>)
   10788:	493c      	ldr	r1, [pc, #240]	; (1087c <z_impl_k_yield+0x140>)
   1078a:	4836      	ldr	r0, [pc, #216]	; (10864 <z_impl_k_yield+0x128>)
   1078c:	f001 fbdc 	bl	11f48 <printk>
   10790:	4938      	ldr	r1, [pc, #224]	; (10874 <z_impl_k_yield+0x138>)
   10792:	483b      	ldr	r0, [pc, #236]	; (10880 <z_impl_k_yield+0x144>)
   10794:	f001 fbd8 	bl	11f48 <printk>
   10798:	215c      	movs	r1, #92	; 0x5c
   1079a:	4837      	ldr	r0, [pc, #220]	; (10878 <z_impl_k_yield+0x13c>)
   1079c:	f001 fe6a 	bl	12474 <assert_post_action>
	z_spin_lock_set_owner(l);
   107a0:	4834      	ldr	r0, [pc, #208]	; (10874 <z_impl_k_yield+0x138>)
   107a2:	f000 fb83 	bl	10eac <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   107a6:	68a1      	ldr	r1, [r4, #8]
   107a8:	4836      	ldr	r0, [pc, #216]	; (10884 <z_impl_k_yield+0x148>)
   107aa:	f7ff f935 	bl	fa18 <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   107ae:	68a5      	ldr	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   107b0:	42b5      	cmp	r5, r6
   107b2:	d10b      	bne.n	107cc <z_impl_k_yield+0x90>
   107b4:	4934      	ldr	r1, [pc, #208]	; (10888 <z_impl_k_yield+0x14c>)
   107b6:	482b      	ldr	r0, [pc, #172]	; (10864 <z_impl_k_yield+0x128>)
   107b8:	f240 3355 	movw	r3, #853	; 0x355
   107bc:	4a28      	ldr	r2, [pc, #160]	; (10860 <z_impl_k_yield+0x124>)
   107be:	f001 fbc3 	bl	11f48 <printk>
   107c2:	f240 3155 	movw	r1, #853	; 0x355
   107c6:	4826      	ldr	r0, [pc, #152]	; (10860 <z_impl_k_yield+0x124>)
   107c8:	f001 fe54 	bl	12474 <assert_post_action>
	return list->head == list;
   107cc:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   107d0:	4a2c      	ldr	r2, [pc, #176]	; (10884 <z_impl_k_yield+0x148>)
   107d2:	4293      	cmp	r3, r2
   107d4:	d03b      	beq.n	1084e <z_impl_k_yield+0x112>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   107d6:	2b00      	cmp	r3, #0
   107d8:	d039      	beq.n	1084e <z_impl_k_yield+0x112>
	if (thread_1->base.prio < thread_2->base.prio) {
   107da:	f995 000e 	ldrsb.w	r0, [r5, #14]
   107de:	f993 600e 	ldrsb.w	r6, [r3, #14]
   107e2:	4286      	cmp	r6, r0
   107e4:	dd2e      	ble.n	10844 <z_impl_k_yield+0x108>
	node->prev = successor->prev;
   107e6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   107e8:	e9c5 3200 	strd	r3, r2, [r5]
	successor->prev->next = node;
   107ec:	6015      	str	r5, [r2, #0]
	successor->prev = node;
   107ee:	605d      	str	r5, [r3, #4]
			z_mark_thread_as_queued(_current);
   107f0:	68a2      	ldr	r2, [r4, #8]
			update_cache(1);
   107f2:	2001      	movs	r0, #1
	thread->base.thread_state |= states;
   107f4:	7b53      	ldrb	r3, [r2, #13]
   107f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
   107fa:	7353      	strb	r3, [r2, #13]
   107fc:	f7ff f990 	bl	fb20 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10800:	481c      	ldr	r0, [pc, #112]	; (10874 <z_impl_k_yield+0x138>)
   10802:	f000 fb45 	bl	10e90 <z_spin_unlock_valid>
   10806:	b968      	cbnz	r0, 10824 <z_impl_k_yield+0xe8>
   10808:	2384      	movs	r3, #132	; 0x84
   1080a:	4a1b      	ldr	r2, [pc, #108]	; (10878 <z_impl_k_yield+0x13c>)
   1080c:	491f      	ldr	r1, [pc, #124]	; (1088c <z_impl_k_yield+0x150>)
   1080e:	4815      	ldr	r0, [pc, #84]	; (10864 <z_impl_k_yield+0x128>)
   10810:	f001 fb9a 	bl	11f48 <printk>
   10814:	4917      	ldr	r1, [pc, #92]	; (10874 <z_impl_k_yield+0x138>)
   10816:	481e      	ldr	r0, [pc, #120]	; (10890 <z_impl_k_yield+0x154>)
   10818:	f001 fb96 	bl	11f48 <printk>
   1081c:	2184      	movs	r1, #132	; 0x84
   1081e:	4816      	ldr	r0, [pc, #88]	; (10878 <z_impl_k_yield+0x13c>)
   10820:	f001 fe28 	bl	12474 <assert_post_action>
	__asm__ volatile(
   10824:	f387 8811 	msr	BASEPRI, r7
   10828:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1082c:	f04f 0320 	mov.w	r3, #32
   10830:	f3ef 8011 	mrs	r0, BASEPRI
   10834:	f383 8811 	msr	BASEPRI, r3
   10838:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   1083c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   10840:	f7f3 b976 	b.w	3b30 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   10844:	4299      	cmp	r1, r3
   10846:	d002      	beq.n	1084e <z_impl_k_yield+0x112>
   10848:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1084a:	2b00      	cmp	r3, #0
   1084c:	d1c7      	bne.n	107de <z_impl_k_yield+0xa2>
	node->prev = list->tail;
   1084e:	e9c5 2100 	strd	r2, r1, [r5]
	list->tail->next = node;
   10852:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   10854:	601d      	str	r5, [r3, #0]
	list->tail = node;
   10856:	62e5      	str	r5, [r4, #44]	; 0x2c
}
   10858:	e7ca      	b.n	107f0 <z_impl_k_yield+0xb4>
   1085a:	bf00      	nop
   1085c:	0001b761 	.word	0x0001b761
   10860:	0001b7a3 	.word	0x0001b7a3
   10864:	00017b50 	.word	0x00017b50
   10868:	0001af24 	.word	0x0001af24
   1086c:	20001d84 	.word	0x20001d84
   10870:	20001334 	.word	0x20001334
   10874:	20001db8 	.word	0x20001db8
   10878:	00017fdb 	.word	0x00017fdb
   1087c:	00018001 	.word	0x00018001
   10880:	00018016 	.word	0x00018016
   10884:	20001dac 	.word	0x20001dac
   10888:	0001b7dc 	.word	0x0001b7dc
   1088c:	0001802e 	.word	0x0001802e
   10890:	00018045 	.word	0x00018045

00010894 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
{
   10894:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   10898:	4604      	mov	r4, r0
   1089a:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	u32_t expected_wakeup_time;

	__ASSERT(!arch_is_in_isr(), "");
   1089e:	b173      	cbz	r3, 108be <z_tick_sleep+0x2a>
   108a0:	493c      	ldr	r1, [pc, #240]	; (10994 <z_tick_sleep+0x100>)
   108a2:	f240 437e 	movw	r3, #1150	; 0x47e
   108a6:	4a3c      	ldr	r2, [pc, #240]	; (10998 <z_tick_sleep+0x104>)
   108a8:	483c      	ldr	r0, [pc, #240]	; (1099c <z_tick_sleep+0x108>)
   108aa:	f001 fb4d 	bl	11f48 <printk>
   108ae:	483c      	ldr	r0, [pc, #240]	; (109a0 <z_tick_sleep+0x10c>)
   108b0:	f001 fb4a 	bl	11f48 <printk>
   108b4:	f240 417e 	movw	r1, #1150	; 0x47e
   108b8:	4837      	ldr	r0, [pc, #220]	; (10998 <z_tick_sleep+0x104>)
   108ba:	f001 fddb 	bl	12474 <assert_post_action>

	K_DEBUG("thread %p for %d ticks\n", _current, ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   108be:	b92c      	cbnz	r4, 108cc <z_tick_sleep+0x38>
	z_impl_k_yield();
   108c0:	f7ff ff3c 	bl	1073c <z_impl_k_yield>
		return ticks;
	}
#endif

	return 0;
}
   108c4:	4620      	mov	r0, r4
   108c6:	b002      	add	sp, #8
   108c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_time = ticks + z_tick_get_32();
   108cc:	f005 ff4b 	bl	16766 <z_tick_get_32>
	struct k_spinlock local_lock = {};
   108d0:	2300      	movs	r3, #0
	timeout = Z_TIMEOUT_TICKS(ticks);
   108d2:	4626      	mov	r6, r4
   108d4:	17e7      	asrs	r7, r4, #31
	struct k_spinlock local_lock = {};
   108d6:	9301      	str	r3, [sp, #4]
	expected_wakeup_time = ticks + z_tick_get_32();
   108d8:	4404      	add	r4, r0
   108da:	f04f 0320 	mov.w	r3, #32
   108de:	f3ef 8811 	mrs	r8, BASEPRI
   108e2:	f383 8811 	msr	BASEPRI, r3
   108e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   108ea:	a801      	add	r0, sp, #4
   108ec:	f000 fac2 	bl	10e74 <z_spin_lock_valid>
   108f0:	b968      	cbnz	r0, 1090e <z_tick_sleep+0x7a>
   108f2:	235c      	movs	r3, #92	; 0x5c
   108f4:	4a2b      	ldr	r2, [pc, #172]	; (109a4 <z_tick_sleep+0x110>)
   108f6:	492c      	ldr	r1, [pc, #176]	; (109a8 <z_tick_sleep+0x114>)
   108f8:	4828      	ldr	r0, [pc, #160]	; (1099c <z_tick_sleep+0x108>)
   108fa:	f001 fb25 	bl	11f48 <printk>
   108fe:	482b      	ldr	r0, [pc, #172]	; (109ac <z_tick_sleep+0x118>)
   10900:	a901      	add	r1, sp, #4
   10902:	f001 fb21 	bl	11f48 <printk>
   10906:	215c      	movs	r1, #92	; 0x5c
   10908:	4826      	ldr	r0, [pc, #152]	; (109a4 <z_tick_sleep+0x110>)
   1090a:	f001 fdb3 	bl	12474 <assert_post_action>
	pending_current = _current;
   1090e:	4d28      	ldr	r5, [pc, #160]	; (109b0 <z_tick_sleep+0x11c>)
	z_spin_lock_set_owner(l);
   10910:	a801      	add	r0, sp, #4
   10912:	f000 facb 	bl	10eac <z_spin_lock_set_owner>
   10916:	68a8      	ldr	r0, [r5, #8]
   10918:	4b26      	ldr	r3, [pc, #152]	; (109b4 <z_tick_sleep+0x120>)
   1091a:	6018      	str	r0, [r3, #0]
	z_remove_thread_from_ready_q(_current);
   1091c:	f7ff fccc 	bl	102b8 <z_remove_thread_from_ready_q>
	z_add_thread_timeout(_current, timeout);
   10920:	68a8      	ldr	r0, [r5, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   10922:	4632      	mov	r2, r6
   10924:	463b      	mov	r3, r7
   10926:	3018      	adds	r0, #24
   10928:	4923      	ldr	r1, [pc, #140]	; (109b8 <z_tick_sleep+0x124>)
   1092a:	f000 fc01 	bl	11130 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1092e:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10930:	a801      	add	r0, sp, #4
	thread->base.thread_state |= _THREAD_SUSPENDED;
   10932:	7b53      	ldrb	r3, [r2, #13]
   10934:	f043 0310 	orr.w	r3, r3, #16
   10938:	7353      	strb	r3, [r2, #13]
   1093a:	f000 faa9 	bl	10e90 <z_spin_unlock_valid>
   1093e:	b968      	cbnz	r0, 1095c <z_tick_sleep+0xc8>
   10940:	239b      	movs	r3, #155	; 0x9b
   10942:	4a18      	ldr	r2, [pc, #96]	; (109a4 <z_tick_sleep+0x110>)
   10944:	491d      	ldr	r1, [pc, #116]	; (109bc <z_tick_sleep+0x128>)
   10946:	4815      	ldr	r0, [pc, #84]	; (1099c <z_tick_sleep+0x108>)
   10948:	f001 fafe 	bl	11f48 <printk>
   1094c:	481c      	ldr	r0, [pc, #112]	; (109c0 <z_tick_sleep+0x12c>)
   1094e:	a901      	add	r1, sp, #4
   10950:	f001 fafa 	bl	11f48 <printk>
   10954:	219b      	movs	r1, #155	; 0x9b
   10956:	4813      	ldr	r0, [pc, #76]	; (109a4 <z_tick_sleep+0x110>)
   10958:	f001 fd8c 	bl	12474 <assert_post_action>
   1095c:	4640      	mov	r0, r8
   1095e:	f7f3 f8e7 	bl	3b30 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   10962:	68ab      	ldr	r3, [r5, #8]
   10964:	7b5b      	ldrb	r3, [r3, #13]
   10966:	06db      	lsls	r3, r3, #27
   10968:	d50e      	bpl.n	10988 <z_tick_sleep+0xf4>
   1096a:	4916      	ldr	r1, [pc, #88]	; (109c4 <z_tick_sleep+0x130>)
   1096c:	f240 43a3 	movw	r3, #1187	; 0x4a3
   10970:	4a09      	ldr	r2, [pc, #36]	; (10998 <z_tick_sleep+0x104>)
   10972:	480a      	ldr	r0, [pc, #40]	; (1099c <z_tick_sleep+0x108>)
   10974:	f001 fae8 	bl	11f48 <printk>
   10978:	4809      	ldr	r0, [pc, #36]	; (109a0 <z_tick_sleep+0x10c>)
   1097a:	f001 fae5 	bl	11f48 <printk>
   1097e:	f240 41a3 	movw	r1, #1187	; 0x4a3
   10982:	4805      	ldr	r0, [pc, #20]	; (10998 <z_tick_sleep+0x104>)
   10984:	f001 fd76 	bl	12474 <assert_post_action>
	ticks = expected_wakeup_time - z_tick_get_32();
   10988:	f005 feed 	bl	16766 <z_tick_get_32>
   1098c:	1a24      	subs	r4, r4, r0
   1098e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   10992:	e797      	b.n	108c4 <z_tick_sleep+0x30>
   10994:	0001b761 	.word	0x0001b761
   10998:	0001b7a3 	.word	0x0001b7a3
   1099c:	00017b50 	.word	0x00017b50
   109a0:	0001af24 	.word	0x0001af24
   109a4:	00017fdb 	.word	0x00017fdb
   109a8:	00018001 	.word	0x00018001
   109ac:	00018016 	.word	0x00018016
   109b0:	20001d84 	.word	0x20001d84
   109b4:	20001db4 	.word	0x20001db4
   109b8:	0000fd85 	.word	0x0000fd85
   109bc:	0001802e 	.word	0x0001802e
   109c0:	00018045 	.word	0x00018045
   109c4:	0001b82d 	.word	0x0001b82d

000109c8 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(k_timeout_t timeout)
{
   109c8:	b538      	push	{r3, r4, r5, lr}
   109ca:	4604      	mov	r4, r0
   109cc:	460d      	mov	r5, r1
   109ce:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   109d2:	b173      	cbz	r3, 109f2 <z_impl_k_sleep+0x2a>
   109d4:	4912      	ldr	r1, [pc, #72]	; (10a20 <z_impl_k_sleep+0x58>)
   109d6:	f240 43b2 	movw	r3, #1202	; 0x4b2
   109da:	4a12      	ldr	r2, [pc, #72]	; (10a24 <z_impl_k_sleep+0x5c>)
   109dc:	4812      	ldr	r0, [pc, #72]	; (10a28 <z_impl_k_sleep+0x60>)
   109de:	f001 fab3 	bl	11f48 <printk>
   109e2:	4812      	ldr	r0, [pc, #72]	; (10a2c <z_impl_k_sleep+0x64>)
   109e4:	f001 fab0 	bl	11f48 <printk>
   109e8:	f240 41b2 	movw	r1, #1202	; 0x4b2
   109ec:	480d      	ldr	r0, [pc, #52]	; (10a24 <z_impl_k_sleep+0x5c>)
   109ee:	f001 fd41 	bl	12474 <assert_post_action>

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   109f2:	3501      	adds	r5, #1
   109f4:	bf08      	it	eq
   109f6:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   109fa:	d106      	bne.n	10a0a <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
   109fc:	4b0c      	ldr	r3, [pc, #48]	; (10a30 <z_impl_k_sleep+0x68>)
   109fe:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   10a00:	f7ff fb3c 	bl	1007c <z_impl_k_thread_suspend>
		return (s32_t) K_TICKS_FOREVER;
   10a04:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
   10a08:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   10a0a:	4620      	mov	r0, r4
   10a0c:	f7ff ff42 	bl	10894 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   10a10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   10a14:	fb80 3403 	smull	r3, r4, r0, r3
   10a18:	0bd8      	lsrs	r0, r3, #15
   10a1a:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   10a1e:	e7f3      	b.n	10a08 <z_impl_k_sleep+0x40>
   10a20:	0001b761 	.word	0x0001b761
   10a24:	0001b7a3 	.word	0x0001b7a3
   10a28:	00017b50 	.word	0x00017b50
   10a2c:	0001af24 	.word	0x0001af24
   10a30:	20001d84 	.word	0x20001d84

00010a34 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   10a34:	4b01      	ldr	r3, [pc, #4]	; (10a3c <z_impl_k_current_get+0x8>)
   10a36:	6898      	ldr	r0, [r3, #8]
   10a38:	4770      	bx	lr
   10a3a:	bf00      	nop
   10a3c:	20001d84 	.word	0x20001d84

00010a40 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   10a40:	b538      	push	{r3, r4, r5, lr}
   10a42:	4604      	mov	r4, r0
   10a44:	f04f 0320 	mov.w	r3, #32
   10a48:	f3ef 8511 	mrs	r5, BASEPRI
   10a4c:	f383 8811 	msr	BASEPRI, r3
   10a50:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10a54:	4817      	ldr	r0, [pc, #92]	; (10ab4 <z_impl_k_sem_give+0x74>)
   10a56:	f000 fa0d 	bl	10e74 <z_spin_lock_valid>
   10a5a:	b968      	cbnz	r0, 10a78 <z_impl_k_sem_give+0x38>
   10a5c:	235c      	movs	r3, #92	; 0x5c
   10a5e:	4a16      	ldr	r2, [pc, #88]	; (10ab8 <z_impl_k_sem_give+0x78>)
   10a60:	4916      	ldr	r1, [pc, #88]	; (10abc <z_impl_k_sem_give+0x7c>)
   10a62:	4817      	ldr	r0, [pc, #92]	; (10ac0 <z_impl_k_sem_give+0x80>)
   10a64:	f001 fa70 	bl	11f48 <printk>
   10a68:	4912      	ldr	r1, [pc, #72]	; (10ab4 <z_impl_k_sem_give+0x74>)
   10a6a:	4816      	ldr	r0, [pc, #88]	; (10ac4 <z_impl_k_sem_give+0x84>)
   10a6c:	f001 fa6c 	bl	11f48 <printk>
   10a70:	215c      	movs	r1, #92	; 0x5c
   10a72:	4811      	ldr	r0, [pc, #68]	; (10ab8 <z_impl_k_sem_give+0x78>)
   10a74:	f001 fcfe 	bl	12474 <assert_post_action>
	z_spin_lock_set_owner(l);
   10a78:	480e      	ldr	r0, [pc, #56]	; (10ab4 <z_impl_k_sem_give+0x74>)
   10a7a:	f000 fa17 	bl	10eac <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   10a7e:	4620      	mov	r0, r4
   10a80:	f7ff fdc0 	bl	10604 <z_unpend_first_thread>

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);

	if (thread != NULL) {
   10a84:	b148      	cbz	r0, 10a9a <z_impl_k_sem_give+0x5a>
   10a86:	2200      	movs	r2, #0
   10a88:	6702      	str	r2, [r0, #112]	; 0x70
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   10a8a:	f7ff f933 	bl	fcf4 <z_ready_thread>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   10a8e:	4629      	mov	r1, r5
}
   10a90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   10a94:	4807      	ldr	r0, [pc, #28]	; (10ab4 <z_impl_k_sem_give+0x74>)
   10a96:	f7fe bf0b 	b.w	f8b0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   10a9a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   10a9e:	429a      	cmp	r2, r3
   10aa0:	bf18      	it	ne
   10aa2:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   10aa4:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   10aa6:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   10aa8:	f104 0010 	add.w	r0, r4, #16
   10aac:	f005 fed3 	bl	16856 <z_handle_obj_poll_events>
}
   10ab0:	e7ed      	b.n	10a8e <z_impl_k_sem_give+0x4e>
   10ab2:	bf00      	nop
   10ab4:	20001dc4 	.word	0x20001dc4
   10ab8:	00017fdb 	.word	0x00017fdb
   10abc:	00018001 	.word	0x00018001
   10ac0:	00017b50 	.word	0x00017b50
   10ac4:	00018016 	.word	0x00018016

00010ac8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   10ac8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10aca:	4604      	mov	r4, r0
   10acc:	4616      	mov	r6, r2
   10ace:	461f      	mov	r7, r3
   10ad0:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   10ad4:	b17b      	cbz	r3, 10af6 <z_impl_k_sem_take+0x2e>
   10ad6:	ea56 0307 	orrs.w	r3, r6, r7
   10ada:	d00c      	beq.n	10af6 <z_impl_k_sem_take+0x2e>
   10adc:	4935      	ldr	r1, [pc, #212]	; (10bb4 <z_impl_k_sem_take+0xec>)
   10ade:	238c      	movs	r3, #140	; 0x8c
   10ae0:	4a35      	ldr	r2, [pc, #212]	; (10bb8 <z_impl_k_sem_take+0xf0>)
   10ae2:	4836      	ldr	r0, [pc, #216]	; (10bbc <z_impl_k_sem_take+0xf4>)
   10ae4:	f001 fa30 	bl	11f48 <printk>
   10ae8:	4835      	ldr	r0, [pc, #212]	; (10bc0 <z_impl_k_sem_take+0xf8>)
   10aea:	f001 fa2d 	bl	11f48 <printk>
   10aee:	218c      	movs	r1, #140	; 0x8c
   10af0:	4831      	ldr	r0, [pc, #196]	; (10bb8 <z_impl_k_sem_take+0xf0>)
   10af2:	f001 fcbf 	bl	12474 <assert_post_action>
   10af6:	f04f 0320 	mov.w	r3, #32
   10afa:	f3ef 8511 	mrs	r5, BASEPRI
   10afe:	f383 8811 	msr	BASEPRI, r3
   10b02:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10b06:	482f      	ldr	r0, [pc, #188]	; (10bc4 <z_impl_k_sem_take+0xfc>)
   10b08:	f000 f9b4 	bl	10e74 <z_spin_lock_valid>
   10b0c:	b968      	cbnz	r0, 10b2a <z_impl_k_sem_take+0x62>
   10b0e:	235c      	movs	r3, #92	; 0x5c
   10b10:	4a2d      	ldr	r2, [pc, #180]	; (10bc8 <z_impl_k_sem_take+0x100>)
   10b12:	492e      	ldr	r1, [pc, #184]	; (10bcc <z_impl_k_sem_take+0x104>)
   10b14:	4829      	ldr	r0, [pc, #164]	; (10bbc <z_impl_k_sem_take+0xf4>)
   10b16:	f001 fa17 	bl	11f48 <printk>
   10b1a:	492a      	ldr	r1, [pc, #168]	; (10bc4 <z_impl_k_sem_take+0xfc>)
   10b1c:	482c      	ldr	r0, [pc, #176]	; (10bd0 <z_impl_k_sem_take+0x108>)
   10b1e:	f001 fa13 	bl	11f48 <printk>
   10b22:	215c      	movs	r1, #92	; 0x5c
   10b24:	4828      	ldr	r0, [pc, #160]	; (10bc8 <z_impl_k_sem_take+0x100>)
   10b26:	f001 fca5 	bl	12474 <assert_post_action>
	z_spin_lock_set_owner(l);
   10b2a:	4826      	ldr	r0, [pc, #152]	; (10bc4 <z_impl_k_sem_take+0xfc>)
   10b2c:	f000 f9be 	bl	10eac <z_spin_lock_set_owner>
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   10b30:	68a3      	ldr	r3, [r4, #8]
   10b32:	b1d3      	cbz	r3, 10b6a <z_impl_k_sem_take+0xa2>
		sem->count--;
   10b34:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10b36:	4823      	ldr	r0, [pc, #140]	; (10bc4 <z_impl_k_sem_take+0xfc>)
   10b38:	60a3      	str	r3, [r4, #8]
   10b3a:	f000 f9a9 	bl	10e90 <z_spin_unlock_valid>
   10b3e:	b968      	cbnz	r0, 10b5c <z_impl_k_sem_take+0x94>
   10b40:	2384      	movs	r3, #132	; 0x84
   10b42:	4a21      	ldr	r2, [pc, #132]	; (10bc8 <z_impl_k_sem_take+0x100>)
   10b44:	4923      	ldr	r1, [pc, #140]	; (10bd4 <z_impl_k_sem_take+0x10c>)
   10b46:	481d      	ldr	r0, [pc, #116]	; (10bbc <z_impl_k_sem_take+0xf4>)
   10b48:	f001 f9fe 	bl	11f48 <printk>
   10b4c:	491d      	ldr	r1, [pc, #116]	; (10bc4 <z_impl_k_sem_take+0xfc>)
   10b4e:	4822      	ldr	r0, [pc, #136]	; (10bd8 <z_impl_k_sem_take+0x110>)
   10b50:	f001 f9fa 	bl	11f48 <printk>
   10b54:	2184      	movs	r1, #132	; 0x84
   10b56:	481c      	ldr	r0, [pc, #112]	; (10bc8 <z_impl_k_sem_take+0x100>)
   10b58:	f001 fc8c 	bl	12474 <assert_post_action>
	__asm__ volatile(
   10b5c:	f385 8811 	msr	BASEPRI, r5
   10b60:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   10b64:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   10b66:	b003      	add	sp, #12
   10b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   10b6a:	ea56 0307 	orrs.w	r3, r6, r7
   10b6e:	d118      	bne.n	10ba2 <z_impl_k_sem_take+0xda>
   10b70:	4814      	ldr	r0, [pc, #80]	; (10bc4 <z_impl_k_sem_take+0xfc>)
   10b72:	f000 f98d 	bl	10e90 <z_spin_unlock_valid>
   10b76:	b968      	cbnz	r0, 10b94 <z_impl_k_sem_take+0xcc>
   10b78:	2384      	movs	r3, #132	; 0x84
   10b7a:	4a13      	ldr	r2, [pc, #76]	; (10bc8 <z_impl_k_sem_take+0x100>)
   10b7c:	4915      	ldr	r1, [pc, #84]	; (10bd4 <z_impl_k_sem_take+0x10c>)
   10b7e:	480f      	ldr	r0, [pc, #60]	; (10bbc <z_impl_k_sem_take+0xf4>)
   10b80:	f001 f9e2 	bl	11f48 <printk>
   10b84:	490f      	ldr	r1, [pc, #60]	; (10bc4 <z_impl_k_sem_take+0xfc>)
   10b86:	4814      	ldr	r0, [pc, #80]	; (10bd8 <z_impl_k_sem_take+0x110>)
   10b88:	f001 f9de 	bl	11f48 <printk>
   10b8c:	2184      	movs	r1, #132	; 0x84
   10b8e:	480e      	ldr	r0, [pc, #56]	; (10bc8 <z_impl_k_sem_take+0x100>)
   10b90:	f001 fc70 	bl	12474 <assert_post_action>
   10b94:	f385 8811 	msr	BASEPRI, r5
   10b98:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   10b9c:	f06f 000f 	mvn.w	r0, #15
   10ba0:	e7e1      	b.n	10b66 <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   10ba2:	4622      	mov	r2, r4
   10ba4:	4629      	mov	r1, r5
   10ba6:	e9cd 6700 	strd	r6, r7, [sp]
   10baa:	4806      	ldr	r0, [pc, #24]	; (10bc4 <z_impl_k_sem_take+0xfc>)
   10bac:	f7ff fc6a 	bl	10484 <z_pend_curr>
	return ret;
   10bb0:	e7d9      	b.n	10b66 <z_impl_k_sem_take+0x9e>
   10bb2:	bf00      	nop
   10bb4:	0001b88d 	.word	0x0001b88d
   10bb8:	0001b86d 	.word	0x0001b86d
   10bbc:	00017b50 	.word	0x00017b50
   10bc0:	0001af24 	.word	0x0001af24
   10bc4:	20001dc4 	.word	0x20001dc4
   10bc8:	00017fdb 	.word	0x00017fdb
   10bcc:	00018001 	.word	0x00018001
   10bd0:	00018016 	.word	0x00018016
   10bd4:	0001802e 	.word	0x0001802e
   10bd8:	00018045 	.word	0x00018045

00010bdc <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   10bdc:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   10bde:	4c08      	ldr	r4, [pc, #32]	; (10c00 <k_sys_work_q_init+0x24>)
   10be0:	f04f 33ff 	mov.w	r3, #4294967295
   10be4:	f44f 6200 	mov.w	r2, #2048	; 0x800
   10be8:	4620      	mov	r0, r4
   10bea:	4906      	ldr	r1, [pc, #24]	; (10c04 <k_sys_work_q_init+0x28>)
   10bec:	f000 f966 	bl	10ebc <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   10bf0:	4905      	ldr	r1, [pc, #20]	; (10c08 <k_sys_work_q_init+0x2c>)
   10bf2:	f104 001c 	add.w	r0, r4, #28
   10bf6:	f005 fd4d 	bl	16694 <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   10bfa:	2000      	movs	r0, #0
   10bfc:	bd10      	pop	{r4, pc}
   10bfe:	bf00      	nop
   10c00:	20001dc8 	.word	0x20001dc8
   10c04:	20003fd8 	.word	0x20003fd8
   10c08:	0001b8da 	.word	0x0001b8da

00010c0c <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   10c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10c10:	b086      	sub	sp, #24
   10c12:	e9dd 6a11 	ldrd	r6, sl, [sp, #68]	; 0x44
	Z_ASSERT_VALID_PRIO(prio, entry);
   10c16:	2e0f      	cmp	r6, #15
{
   10c18:	4604      	mov	r4, r0
   10c1a:	4688      	mov	r8, r1
   10c1c:	4691      	mov	r9, r2
   10c1e:	461f      	mov	r7, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   10c20:	d127      	bne.n	10c72 <z_setup_new_thread+0x66>
   10c22:	4b20      	ldr	r3, [pc, #128]	; (10ca4 <z_setup_new_thread+0x98>)
   10c24:	429f      	cmp	r7, r3
   10c26:	d128      	bne.n	10c7a <z_setup_new_thread+0x6e>
	sys_dlist_init(&w->waitq);
   10c28:	f104 0328 	add.w	r3, r4, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   10c2c:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
	thread_base->thread_state = (u8_t)initial_state;
   10c30:	2304      	movs	r3, #4

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
   10c32:	2500      	movs	r5, #0
	thread_base->thread_state = (u8_t)initial_state;
   10c34:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   10c36:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10c38:	464a      	mov	r2, r9
   10c3a:	9302      	str	r3, [sp, #8]
   10c3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10c3e:	4641      	mov	r1, r8
   10c40:	9301      	str	r3, [sp, #4]
   10c42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10c44:	4620      	mov	r0, r4
   10c46:	9300      	str	r3, [sp, #0]
	node->prev = NULL;
   10c48:	e9c4 5506 	strd	r5, r5, [r4, #24]
   10c4c:	463b      	mov	r3, r7
   10c4e:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	thread_base->user_options = (u8_t)options;
   10c52:	f884 a00c 	strb.w	sl, [r4, #12]
	thread_base->prio = priority;
   10c56:	73a6      	strb	r6, [r4, #14]
	thread_base->sched_locked = 0U;
   10c58:	73e5      	strb	r5, [r4, #15]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   10c5a:	f7f3 f801 	bl	3c60 <arch_new_thread>
	if (!_current) {
   10c5e:	4b12      	ldr	r3, [pc, #72]	; (10ca8 <z_setup_new_thread+0x9c>)
	new_thread->fn_abort = NULL;
   10c60:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
	if (!_current) {
   10c64:	689b      	ldr	r3, [r3, #8]
   10c66:	b103      	cbz	r3, 10c6a <z_setup_new_thread+0x5e>
	new_thread->resource_pool = _current->resource_pool;
   10c68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   10c6a:	66a3      	str	r3, [r4, #104]	; 0x68
}
   10c6c:	b006      	add	sp, #24
   10c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   10c72:	f106 0310 	add.w	r3, r6, #16
   10c76:	2b1e      	cmp	r3, #30
   10c78:	d9d6      	bls.n	10c28 <z_setup_new_thread+0x1c>
   10c7a:	f44f 73e7 	mov.w	r3, #462	; 0x1ce
   10c7e:	4a0b      	ldr	r2, [pc, #44]	; (10cac <z_setup_new_thread+0xa0>)
   10c80:	490b      	ldr	r1, [pc, #44]	; (10cb0 <z_setup_new_thread+0xa4>)
   10c82:	480c      	ldr	r0, [pc, #48]	; (10cb4 <z_setup_new_thread+0xa8>)
   10c84:	f001 f960 	bl	11f48 <printk>
   10c88:	4631      	mov	r1, r6
   10c8a:	f06f 030f 	mvn.w	r3, #15
   10c8e:	220e      	movs	r2, #14
   10c90:	4809      	ldr	r0, [pc, #36]	; (10cb8 <z_setup_new_thread+0xac>)
   10c92:	f001 f959 	bl	11f48 <printk>
   10c96:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
   10c9a:	4804      	ldr	r0, [pc, #16]	; (10cac <z_setup_new_thread+0xa0>)
   10c9c:	f001 fbea 	bl	12474 <assert_post_action>
   10ca0:	e7c2      	b.n	10c28 <z_setup_new_thread+0x1c>
   10ca2:	bf00      	nop
   10ca4:	0000eb2d 	.word	0x0000eb2d
   10ca8:	20001d84 	.word	0x20001d84
   10cac:	0001b8e3 	.word	0x0001b8e3
   10cb0:	0001b906 	.word	0x0001b906
   10cb4:	00017b50 	.word	0x00017b50
   10cb8:	0001b986 	.word	0x0001b986

00010cbc <z_impl_k_thread_create>:
{
   10cbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10cc0:	b087      	sub	sp, #28
   10cc2:	4604      	mov	r4, r0
   10cc4:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
   10cc8:	460d      	mov	r5, r1
   10cca:	4690      	mov	r8, r2
   10ccc:	4699      	mov	r9, r3
   10cce:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   10cd2:	b173      	cbz	r3, 10cf2 <z_impl_k_thread_create+0x36>
   10cd4:	491b      	ldr	r1, [pc, #108]	; (10d44 <z_impl_k_thread_create+0x88>)
   10cd6:	f240 2343 	movw	r3, #579	; 0x243
   10cda:	4a1b      	ldr	r2, [pc, #108]	; (10d48 <z_impl_k_thread_create+0x8c>)
   10cdc:	481b      	ldr	r0, [pc, #108]	; (10d4c <z_impl_k_thread_create+0x90>)
   10cde:	f001 f933 	bl	11f48 <printk>
   10ce2:	481b      	ldr	r0, [pc, #108]	; (10d50 <z_impl_k_thread_create+0x94>)
   10ce4:	f001 f930 	bl	11f48 <printk>
   10ce8:	f240 2143 	movw	r1, #579	; 0x243
   10cec:	4816      	ldr	r0, [pc, #88]	; (10d48 <z_impl_k_thread_create+0x8c>)
   10cee:	f001 fbc1 	bl	12474 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   10cf2:	2300      	movs	r3, #0
   10cf4:	9305      	str	r3, [sp, #20]
   10cf6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   10cf8:	4642      	mov	r2, r8
   10cfa:	9304      	str	r3, [sp, #16]
   10cfc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10cfe:	4629      	mov	r1, r5
   10d00:	9303      	str	r3, [sp, #12]
   10d02:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10d04:	4620      	mov	r0, r4
   10d06:	9302      	str	r3, [sp, #8]
   10d08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10d0a:	9301      	str	r3, [sp, #4]
   10d0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10d0e:	9300      	str	r3, [sp, #0]
   10d10:	464b      	mov	r3, r9
   10d12:	f7ff ff7b 	bl	10c0c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   10d16:	1c7b      	adds	r3, r7, #1
   10d18:	bf08      	it	eq
   10d1a:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   10d1e:	d005      	beq.n	10d2c <z_impl_k_thread_create+0x70>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   10d20:	ea56 0307 	orrs.w	r3, r6, r7
   10d24:	d106      	bne.n	10d34 <z_impl_k_thread_create+0x78>
	z_sched_start(thread);
   10d26:	4620      	mov	r0, r4
   10d28:	f7ff f890 	bl	fe4c <z_sched_start>
}
   10d2c:	4620      	mov	r0, r4
   10d2e:	b007      	add	sp, #28
   10d30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10d34:	4632      	mov	r2, r6
   10d36:	463b      	mov	r3, r7
   10d38:	4906      	ldr	r1, [pc, #24]	; (10d54 <z_impl_k_thread_create+0x98>)
   10d3a:	f104 0018 	add.w	r0, r4, #24
   10d3e:	f000 f9f7 	bl	11130 <z_add_timeout>
   10d42:	e7f3      	b.n	10d2c <z_impl_k_thread_create+0x70>
   10d44:	0001b761 	.word	0x0001b761
   10d48:	0001b8e3 	.word	0x0001b8e3
   10d4c:	00017b50 	.word	0x00017b50
   10d50:	0001b9b7 	.word	0x0001b9b7
   10d54:	0000fd85 	.word	0x0000fd85

00010d58 <z_init_static_threads>:
{
   10d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   10d5c:	f8df 9110 	ldr.w	r9, [pc, #272]	; 10e70 <z_init_static_threads+0x118>
   10d60:	4d3d      	ldr	r5, [pc, #244]	; (10e58 <z_init_static_threads+0x100>)
   10d62:	46c8      	mov	r8, r9
   10d64:	f8df a100 	ldr.w	sl, [pc, #256]	; 10e68 <z_init_static_threads+0x110>
{
   10d68:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   10d6a:	454d      	cmp	r5, r9
   10d6c:	d90e      	bls.n	10d8c <z_init_static_threads+0x34>
   10d6e:	493b      	ldr	r1, [pc, #236]	; (10e5c <z_init_static_threads+0x104>)
   10d70:	f44f 732a 	mov.w	r3, #680	; 0x2a8
   10d74:	4652      	mov	r2, sl
   10d76:	483a      	ldr	r0, [pc, #232]	; (10e60 <z_init_static_threads+0x108>)
   10d78:	f001 f8e6 	bl	11f48 <printk>
   10d7c:	4839      	ldr	r0, [pc, #228]	; (10e64 <z_init_static_threads+0x10c>)
   10d7e:	f001 f8e3 	bl	11f48 <printk>
   10d82:	f44f 712a 	mov.w	r1, #680	; 0x2a8
   10d86:	4650      	mov	r0, sl
   10d88:	f001 fb74 	bl	12474 <assert_post_action>
   10d8c:	4545      	cmp	r5, r8
   10d8e:	f105 0430 	add.w	r4, r5, #48	; 0x30
   10d92:	d31f      	bcc.n	10dd4 <z_init_static_threads+0x7c>
	k_sched_lock();
   10d94:	f7fe fdc8 	bl	f928 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   10d98:	4c2f      	ldr	r4, [pc, #188]	; (10e58 <z_init_static_threads+0x100>)
   10d9a:	4d33      	ldr	r5, [pc, #204]	; (10e68 <z_init_static_threads+0x110>)
   10d9c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 10e5c <z_init_static_threads+0x104>
   10da0:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 10e60 <z_init_static_threads+0x108>
   10da4:	4544      	cmp	r4, r8
   10da6:	d90e      	bls.n	10dc6 <z_init_static_threads+0x6e>
   10da8:	4651      	mov	r1, sl
   10daa:	f240 23c7 	movw	r3, #711	; 0x2c7
   10dae:	462a      	mov	r2, r5
   10db0:	4658      	mov	r0, fp
   10db2:	f001 f8c9 	bl	11f48 <printk>
   10db6:	482b      	ldr	r0, [pc, #172]	; (10e64 <z_init_static_threads+0x10c>)
   10db8:	f001 f8c6 	bl	11f48 <printk>
   10dbc:	f240 21c7 	movw	r1, #711	; 0x2c7
   10dc0:	4628      	mov	r0, r5
   10dc2:	f001 fb57 	bl	12474 <assert_post_action>
   10dc6:	4544      	cmp	r4, r8
   10dc8:	d321      	bcc.n	10e0e <z_init_static_threads+0xb6>
}
   10dca:	b007      	add	sp, #28
   10dcc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
   10dd0:	f7fe beca 	b.w	fb68 <k_sched_unlock>
		z_setup_new_thread(
   10dd4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   10dd8:	9305      	str	r3, [sp, #20]
   10dda:	f854 3c10 	ldr.w	r3, [r4, #-16]
   10dde:	9304      	str	r3, [sp, #16]
   10de0:	f854 3c14 	ldr.w	r3, [r4, #-20]
   10de4:	9303      	str	r3, [sp, #12]
   10de6:	f854 3c18 	ldr.w	r3, [r4, #-24]
   10dea:	9302      	str	r3, [sp, #8]
   10dec:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   10df0:	9301      	str	r3, [sp, #4]
   10df2:	f854 3c20 	ldr.w	r3, [r4, #-32]
   10df6:	9300      	str	r3, [sp, #0]
   10df8:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   10dfc:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   10e00:	f7ff ff04 	bl	10c0c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   10e04:	f854 3c30 	ldr.w	r3, [r4, #-48]
   10e08:	655d      	str	r5, [r3, #84]	; 0x54
   10e0a:	4625      	mov	r5, r4
   10e0c:	e7ad      	b.n	10d6a <z_init_static_threads+0x12>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   10e0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10e10:	1c5a      	adds	r2, r3, #1
   10e12:	d017      	beq.n	10e44 <z_init_static_threads+0xec>
			return (u32_t)((t * to_hz + off) / from_hz);
   10e14:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   10e18:	f240 30e7 	movw	r0, #999	; 0x3e7
   10e1c:	2100      	movs	r1, #0
					    K_MSEC(thread_data->init_delay));
   10e1e:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   10e22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10e26:	2300      	movs	r3, #0
   10e28:	fbce 010c 	smlal	r0, r1, lr, ip
   10e2c:	f7ef f994 	bl	158 <__aeabi_uldivmod>
   10e30:	2700      	movs	r7, #0
   10e32:	4606      	mov	r6, r0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   10e34:	ea56 0307 	orrs.w	r3, r6, r7
			schedule_new_thread(thread_data->init_thread,
   10e38:	f8d4 9000 	ldr.w	r9, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   10e3c:	d104      	bne.n	10e48 <z_init_static_threads+0xf0>
	z_sched_start(thread);
   10e3e:	4648      	mov	r0, r9
   10e40:	f7ff f804 	bl	fe4c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   10e44:	3430      	adds	r4, #48	; 0x30
   10e46:	e7ad      	b.n	10da4 <z_init_static_threads+0x4c>
   10e48:	4602      	mov	r2, r0
   10e4a:	463b      	mov	r3, r7
   10e4c:	4907      	ldr	r1, [pc, #28]	; (10e6c <z_init_static_threads+0x114>)
   10e4e:	f109 0018 	add.w	r0, r9, #24
   10e52:	f000 f96d 	bl	11130 <z_add_timeout>
   10e56:	e7f5      	b.n	10e44 <z_init_static_threads+0xec>
   10e58:	200003c0 	.word	0x200003c0
   10e5c:	0001b9dc 	.word	0x0001b9dc
   10e60:	00017b50 	.word	0x00017b50
   10e64:	00017b6d 	.word	0x00017b6d
   10e68:	0001b8e3 	.word	0x0001b8e3
   10e6c:	0000fd85 	.word	0x0000fd85
   10e70:	200003c0 	.word	0x200003c0

00010e74 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   10e74:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   10e76:	b138      	cbz	r0, 10e88 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3) == _current_cpu->id) {
   10e78:	4b04      	ldr	r3, [pc, #16]	; (10e8c <z_spin_lock_valid+0x18>)
   10e7a:	f000 0003 	and.w	r0, r0, #3
   10e7e:	7d1b      	ldrb	r3, [r3, #20]
   10e80:	1ac0      	subs	r0, r0, r3
   10e82:	bf18      	it	ne
   10e84:	2001      	movne	r0, #1
   10e86:	4770      	bx	lr
			return false;
		}
	}
	return true;
   10e88:	2001      	movs	r0, #1
}
   10e8a:	4770      	bx	lr
   10e8c:	20001d84 	.word	0x20001d84

00010e90 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   10e90:	4905      	ldr	r1, [pc, #20]	; (10ea8 <z_spin_unlock_valid+0x18>)
{
   10e92:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   10e94:	688a      	ldr	r2, [r1, #8]
   10e96:	7d08      	ldrb	r0, [r1, #20]
   10e98:	6819      	ldr	r1, [r3, #0]
   10e9a:	4302      	orrs	r2, r0
   10e9c:	2000      	movs	r0, #0
   10e9e:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   10ea0:	bf04      	itt	eq
   10ea2:	6018      	streq	r0, [r3, #0]
	return true;
   10ea4:	2001      	moveq	r0, #1
}
   10ea6:	4770      	bx	lr
   10ea8:	20001d84 	.word	0x20001d84

00010eac <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   10eac:	4a02      	ldr	r2, [pc, #8]	; (10eb8 <z_spin_lock_set_owner+0xc>)
   10eae:	7d11      	ldrb	r1, [r2, #20]
   10eb0:	6893      	ldr	r3, [r2, #8]
   10eb2:	430b      	orrs	r3, r1
   10eb4:	6003      	str	r3, [r0, #0]
}
   10eb6:	4770      	bx	lr
   10eb8:	20001d84 	.word	0x20001d84

00010ebc <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   10ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10ec0:	4604      	mov	r4, r0
   10ec2:	b088      	sub	sp, #32
   10ec4:	460d      	mov	r5, r1
   10ec6:	4616      	mov	r6, r2
   10ec8:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
   10eca:	f005 fb7f 	bl	165cc <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   10ece:	f104 081c 	add.w	r8, r4, #28
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   10ed2:	2200      	movs	r2, #0
   10ed4:	2300      	movs	r3, #0
   10ed6:	e9cd 7203 	strd	r7, r2, [sp, #12]
   10eda:	e9cd 2306 	strd	r2, r3, [sp, #24]
   10ede:	e9cd 2201 	strd	r2, r2, [sp, #4]
   10ee2:	4629      	mov	r1, r5
   10ee4:	4632      	mov	r2, r6
   10ee6:	4640      	mov	r0, r8
   10ee8:	4b05      	ldr	r3, [pc, #20]	; (10f00 <k_work_q_start+0x44>)
   10eea:	9400      	str	r4, [sp, #0]
   10eec:	f7ff fee6 	bl	10cbc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   10ef0:	4640      	mov	r0, r8
   10ef2:	4904      	ldr	r1, [pc, #16]	; (10f04 <k_work_q_start+0x48>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   10ef4:	b008      	add	sp, #32
   10ef6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   10efa:	f005 bbcb 	b.w	16694 <z_impl_k_thread_name_set>
   10efe:	bf00      	nop
   10f00:	00011f91 	.word	0x00011f91
   10f04:	0001ba09 	.word	0x0001ba09

00010f08 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   10f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10f0c:	4680      	mov	r8, r0
   10f0e:	460d      	mov	r5, r1
   10f10:	4616      	mov	r6, r2
   10f12:	461f      	mov	r7, r3
	__asm__ volatile(
   10f14:	f04f 0320 	mov.w	r3, #32
   10f18:	f3ef 8911 	mrs	r9, BASEPRI
   10f1c:	f383 8811 	msr	BASEPRI, r3
   10f20:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10f24:	4835      	ldr	r0, [pc, #212]	; (10ffc <k_delayed_work_submit_to_queue+0xf4>)
   10f26:	f7ff ffa5 	bl	10e74 <z_spin_lock_valid>
   10f2a:	b968      	cbnz	r0, 10f48 <k_delayed_work_submit_to_queue+0x40>
   10f2c:	235c      	movs	r3, #92	; 0x5c
   10f2e:	4a34      	ldr	r2, [pc, #208]	; (11000 <k_delayed_work_submit_to_queue+0xf8>)
   10f30:	4934      	ldr	r1, [pc, #208]	; (11004 <k_delayed_work_submit_to_queue+0xfc>)
   10f32:	4835      	ldr	r0, [pc, #212]	; (11008 <k_delayed_work_submit_to_queue+0x100>)
   10f34:	f001 f808 	bl	11f48 <printk>
   10f38:	4930      	ldr	r1, [pc, #192]	; (10ffc <k_delayed_work_submit_to_queue+0xf4>)
   10f3a:	4834      	ldr	r0, [pc, #208]	; (1100c <k_delayed_work_submit_to_queue+0x104>)
   10f3c:	f001 f804 	bl	11f48 <printk>
   10f40:	215c      	movs	r1, #92	; 0x5c
   10f42:	482f      	ldr	r0, [pc, #188]	; (11000 <k_delayed_work_submit_to_queue+0xf8>)
   10f44:	f001 fa96 	bl	12474 <assert_post_action>
	z_spin_lock_set_owner(l);
   10f48:	482c      	ldr	r0, [pc, #176]	; (10ffc <k_delayed_work_submit_to_queue+0xf4>)
   10f4a:	f7ff ffaf 	bl	10eac <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   10f4e:	69eb      	ldr	r3, [r5, #28]
   10f50:	b30b      	cbz	r3, 10f96 <k_delayed_work_submit_to_queue+0x8e>
   10f52:	4543      	cmp	r3, r8
   10f54:	d14e      	bne.n	10ff4 <k_delayed_work_submit_to_queue+0xec>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   10f56:	4628      	mov	r0, r5
   10f58:	f005 fbba 	bl	166d0 <work_cancel>
		/* -EALREADY indicates the work has already completed so this
		 * is likely a recurring work.
		 */
		if (err == -EALREADY) {
   10f5c:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
   10f60:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   10f62:	d01b      	beq.n	10f9c <k_delayed_work_submit_to_queue+0x94>
			err = 0;
		} else if (err < 0) {
   10f64:	2800      	cmp	r0, #0
   10f66:	da1a      	bge.n	10f9e <k_delayed_work_submit_to_queue+0x96>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10f68:	4824      	ldr	r0, [pc, #144]	; (10ffc <k_delayed_work_submit_to_queue+0xf4>)
   10f6a:	f7ff ff91 	bl	10e90 <z_spin_unlock_valid>
   10f6e:	b968      	cbnz	r0, 10f8c <k_delayed_work_submit_to_queue+0x84>
   10f70:	2384      	movs	r3, #132	; 0x84
   10f72:	4a23      	ldr	r2, [pc, #140]	; (11000 <k_delayed_work_submit_to_queue+0xf8>)
   10f74:	4926      	ldr	r1, [pc, #152]	; (11010 <k_delayed_work_submit_to_queue+0x108>)
   10f76:	4824      	ldr	r0, [pc, #144]	; (11008 <k_delayed_work_submit_to_queue+0x100>)
   10f78:	f000 ffe6 	bl	11f48 <printk>
   10f7c:	491f      	ldr	r1, [pc, #124]	; (10ffc <k_delayed_work_submit_to_queue+0xf4>)
   10f7e:	4825      	ldr	r0, [pc, #148]	; (11014 <k_delayed_work_submit_to_queue+0x10c>)
   10f80:	f000 ffe2 	bl	11f48 <printk>
   10f84:	2184      	movs	r1, #132	; 0x84
   10f86:	481e      	ldr	r0, [pc, #120]	; (11000 <k_delayed_work_submit_to_queue+0xf8>)
   10f88:	f001 fa74 	bl	12474 <assert_post_action>
	__asm__ volatile(
   10f8c:	f389 8811 	msr	BASEPRI, r9
   10f90:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   10f94:	e023      	b.n	10fde <k_delayed_work_submit_to_queue+0xd6>
	if (work->work_q == work_q) {
   10f96:	f1b8 0f00 	cmp.w	r8, #0
   10f9a:	d0dc      	beq.n	10f56 <k_delayed_work_submit_to_queue+0x4e>
	int err = 0;
   10f9c:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   10f9e:	ea56 0307 	orrs.w	r3, r6, r7
	work->work_q = work_q;
   10fa2:	f8c5 801c 	str.w	r8, [r5, #28]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   10fa6:	d11d      	bne.n	10fe4 <k_delayed_work_submit_to_queue+0xdc>
   10fa8:	4814      	ldr	r0, [pc, #80]	; (10ffc <k_delayed_work_submit_to_queue+0xf4>)
   10faa:	f7ff ff71 	bl	10e90 <z_spin_unlock_valid>
   10fae:	b968      	cbnz	r0, 10fcc <k_delayed_work_submit_to_queue+0xc4>
   10fb0:	2384      	movs	r3, #132	; 0x84
   10fb2:	4a13      	ldr	r2, [pc, #76]	; (11000 <k_delayed_work_submit_to_queue+0xf8>)
   10fb4:	4916      	ldr	r1, [pc, #88]	; (11010 <k_delayed_work_submit_to_queue+0x108>)
   10fb6:	4814      	ldr	r0, [pc, #80]	; (11008 <k_delayed_work_submit_to_queue+0x100>)
   10fb8:	f000 ffc6 	bl	11f48 <printk>
   10fbc:	490f      	ldr	r1, [pc, #60]	; (10ffc <k_delayed_work_submit_to_queue+0xf4>)
   10fbe:	4815      	ldr	r0, [pc, #84]	; (11014 <k_delayed_work_submit_to_queue+0x10c>)
   10fc0:	f000 ffc2 	bl	11f48 <printk>
   10fc4:	2184      	movs	r1, #132	; 0x84
   10fc6:	480e      	ldr	r0, [pc, #56]	; (11000 <k_delayed_work_submit_to_queue+0xf8>)
   10fc8:	f001 fa54 	bl	12474 <assert_post_action>
   10fcc:	f389 8811 	msr	BASEPRI, r9
   10fd0:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   10fd4:	4629      	mov	r1, r5
   10fd6:	4640      	mov	r0, r8
   10fd8:	f005 fb61 	bl	1669e <k_work_submit_to_queue>
		return 0;
   10fdc:	2400      	movs	r4, #0
}
   10fde:	4620      	mov	r0, r4
   10fe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   10fe4:	4632      	mov	r2, r6
   10fe6:	463b      	mov	r3, r7
   10fe8:	490b      	ldr	r1, [pc, #44]	; (11018 <k_delayed_work_submit_to_queue+0x110>)
   10fea:	f105 000c 	add.w	r0, r5, #12
   10fee:	f000 f89f 	bl	11130 <z_add_timeout>
   10ff2:	e7b9      	b.n	10f68 <k_delayed_work_submit_to_queue+0x60>
		err = -EADDRINUSE;
   10ff4:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   10ff8:	e7b6      	b.n	10f68 <k_delayed_work_submit_to_queue+0x60>
   10ffa:	bf00      	nop
   10ffc:	20001e58 	.word	0x20001e58
   11000:	00017fdb 	.word	0x00017fdb
   11004:	00018001 	.word	0x00018001
   11008:	00017b50 	.word	0x00017b50
   1100c:	00018016 	.word	0x00018016
   11010:	0001802e 	.word	0x0001802e
   11014:	00018045 	.word	0x00018045
   11018:	000166c7 	.word	0x000166c7

0001101c <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   1101c:	b538      	push	{r3, r4, r5, lr}
	if (!work->work_q) {
   1101e:	69c3      	ldr	r3, [r0, #28]
{
   11020:	4604      	mov	r4, r0
	if (!work->work_q) {
   11022:	2b00      	cmp	r3, #0
   11024:	d038      	beq.n	11098 <k_delayed_work_cancel+0x7c>
	__asm__ volatile(
   11026:	f04f 0320 	mov.w	r3, #32
   1102a:	f3ef 8511 	mrs	r5, BASEPRI
   1102e:	f383 8811 	msr	BASEPRI, r3
   11032:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11036:	481a      	ldr	r0, [pc, #104]	; (110a0 <k_delayed_work_cancel+0x84>)
   11038:	f7ff ff1c 	bl	10e74 <z_spin_lock_valid>
   1103c:	b968      	cbnz	r0, 1105a <k_delayed_work_cancel+0x3e>
   1103e:	235c      	movs	r3, #92	; 0x5c
   11040:	4a18      	ldr	r2, [pc, #96]	; (110a4 <k_delayed_work_cancel+0x88>)
   11042:	4919      	ldr	r1, [pc, #100]	; (110a8 <k_delayed_work_cancel+0x8c>)
   11044:	4819      	ldr	r0, [pc, #100]	; (110ac <k_delayed_work_cancel+0x90>)
   11046:	f000 ff7f 	bl	11f48 <printk>
   1104a:	4915      	ldr	r1, [pc, #84]	; (110a0 <k_delayed_work_cancel+0x84>)
   1104c:	4818      	ldr	r0, [pc, #96]	; (110b0 <k_delayed_work_cancel+0x94>)
   1104e:	f000 ff7b 	bl	11f48 <printk>
   11052:	215c      	movs	r1, #92	; 0x5c
   11054:	4813      	ldr	r0, [pc, #76]	; (110a4 <k_delayed_work_cancel+0x88>)
   11056:	f001 fa0d 	bl	12474 <assert_post_action>
	z_spin_lock_set_owner(l);
   1105a:	4811      	ldr	r0, [pc, #68]	; (110a0 <k_delayed_work_cancel+0x84>)
   1105c:	f7ff ff26 	bl	10eac <z_spin_lock_set_owner>
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = work_cancel(work);
   11060:	4620      	mov	r0, r4
   11062:	f005 fb35 	bl	166d0 <work_cancel>
   11066:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11068:	480d      	ldr	r0, [pc, #52]	; (110a0 <k_delayed_work_cancel+0x84>)
   1106a:	f7ff ff11 	bl	10e90 <z_spin_unlock_valid>
   1106e:	b968      	cbnz	r0, 1108c <k_delayed_work_cancel+0x70>
   11070:	2384      	movs	r3, #132	; 0x84
   11072:	4a0c      	ldr	r2, [pc, #48]	; (110a4 <k_delayed_work_cancel+0x88>)
   11074:	490f      	ldr	r1, [pc, #60]	; (110b4 <k_delayed_work_cancel+0x98>)
   11076:	480d      	ldr	r0, [pc, #52]	; (110ac <k_delayed_work_cancel+0x90>)
   11078:	f000 ff66 	bl	11f48 <printk>
   1107c:	4908      	ldr	r1, [pc, #32]	; (110a0 <k_delayed_work_cancel+0x84>)
   1107e:	480e      	ldr	r0, [pc, #56]	; (110b8 <k_delayed_work_cancel+0x9c>)
   11080:	f000 ff62 	bl	11f48 <printk>
   11084:	2184      	movs	r1, #132	; 0x84
   11086:	4807      	ldr	r0, [pc, #28]	; (110a4 <k_delayed_work_cancel+0x88>)
   11088:	f001 f9f4 	bl	12474 <assert_post_action>
	__asm__ volatile(
   1108c:	f385 8811 	msr	BASEPRI, r5
   11090:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   11094:	4620      	mov	r0, r4
   11096:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   11098:	f06f 0415 	mvn.w	r4, #21
   1109c:	e7fa      	b.n	11094 <k_delayed_work_cancel+0x78>
   1109e:	bf00      	nop
   110a0:	20001e58 	.word	0x20001e58
   110a4:	00017fdb 	.word	0x00017fdb
   110a8:	00018001 	.word	0x00018001
   110ac:	00017b50 	.word	0x00017b50
   110b0:	00018016 	.word	0x00018016
   110b4:	0001802e 	.word	0x0001802e
   110b8:	00018045 	.word	0x00018045

000110bc <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   110bc:	4b03      	ldr	r3, [pc, #12]	; (110cc <elapsed+0x10>)
   110be:	681b      	ldr	r3, [r3, #0]
   110c0:	b90b      	cbnz	r3, 110c6 <elapsed+0xa>
   110c2:	f7f1 bc49 	b.w	2958 <z_clock_elapsed>
}
   110c6:	2000      	movs	r0, #0
   110c8:	4770      	bx	lr
   110ca:	bf00      	nop
   110cc:	20001e5c 	.word	0x20001e5c

000110d0 <next_timeout>:
	return list->head == list;
   110d0:	4b0b      	ldr	r3, [pc, #44]	; (11100 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   110d2:	b510      	push	{r4, lr}
   110d4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   110d6:	429c      	cmp	r4, r3
   110d8:	bf08      	it	eq
   110da:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   110dc:	f7ff ffee 	bl	110bc <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   110e0:	b154      	cbz	r4, 110f8 <next_timeout+0x28>
   110e2:	68a3      	ldr	r3, [r4, #8]
   110e4:	1a18      	subs	r0, r3, r0
   110e6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   110ea:	4b06      	ldr	r3, [pc, #24]	; (11104 <next_timeout+0x34>)
   110ec:	691b      	ldr	r3, [r3, #16]
   110ee:	b113      	cbz	r3, 110f6 <next_timeout+0x26>
   110f0:	4298      	cmp	r0, r3
   110f2:	bfa8      	it	ge
   110f4:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   110f6:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   110f8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   110fc:	e7f5      	b.n	110ea <next_timeout+0x1a>
   110fe:	bf00      	nop
   11100:	200002e4 	.word	0x200002e4
   11104:	20001d84 	.word	0x20001d84

00011108 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   11108:	6803      	ldr	r3, [r0, #0]
   1110a:	b140      	cbz	r0, 1111e <remove_timeout+0x16>
   1110c:	4a07      	ldr	r2, [pc, #28]	; (1112c <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   1110e:	6852      	ldr	r2, [r2, #4]
   11110:	4290      	cmp	r0, r2
   11112:	d004      	beq.n	1111e <remove_timeout+0x16>
	if (next(t) != NULL) {
   11114:	b11b      	cbz	r3, 1111e <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   11116:	689a      	ldr	r2, [r3, #8]
   11118:	6881      	ldr	r1, [r0, #8]
   1111a:	440a      	add	r2, r1
   1111c:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   1111e:	6842      	ldr	r2, [r0, #4]
   11120:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   11122:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   11124:	2300      	movs	r3, #0
	node->prev = NULL;
   11126:	e9c0 3300 	strd	r3, r3, [r0]
}
   1112a:	4770      	bx	lr
   1112c:	200002e4 	.word	0x200002e4

00011130 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   11130:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11134:	9101      	str	r1, [sp, #4]
   11136:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   11138:	1c4b      	adds	r3, r1, #1
   1113a:	bf08      	it	eq
   1113c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   11140:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   11142:	f000 80ad 	beq.w	112a0 <z_add_timeout+0x170>
#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   11146:	f06f 0301 	mvn.w	r3, #1
   1114a:	f04f 3bff 	mov.w	fp, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
   1114e:	1c54      	adds	r4, r2, #1
   11150:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   11154:	ebb3 0804 	subs.w	r8, r3, r4
   11158:	eb6b 0905 	sbc.w	r9, fp, r5
   1115c:	f1b8 0f00 	cmp.w	r8, #0
   11160:	f179 0300 	sbcs.w	r3, r9, #0
   11164:	db0f      	blt.n	11186 <z_add_timeout+0x56>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   11166:	f7ff ffa9 	bl	110bc <elapsed>
   1116a:	f06f 0301 	mvn.w	r3, #1
   1116e:	4a52      	ldr	r2, [pc, #328]	; (112b8 <z_add_timeout+0x188>)
   11170:	e9d2 1c00 	ldrd	r1, ip, [r2]
   11174:	1a5b      	subs	r3, r3, r1
   11176:	eb6b 020c 	sbc.w	r2, fp, ip
   1117a:	1b1e      	subs	r6, r3, r4
   1117c:	eb62 0705 	sbc.w	r7, r2, r5
   11180:	1a34      	subs	r4, r6, r0
   11182:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   11186:	f8da 3000 	ldr.w	r3, [sl]
   1118a:	b163      	cbz	r3, 111a6 <z_add_timeout+0x76>
   1118c:	494b      	ldr	r1, [pc, #300]	; (112bc <z_add_timeout+0x18c>)
   1118e:	2367      	movs	r3, #103	; 0x67
   11190:	4a4b      	ldr	r2, [pc, #300]	; (112c0 <z_add_timeout+0x190>)
   11192:	484c      	ldr	r0, [pc, #304]	; (112c4 <z_add_timeout+0x194>)
   11194:	f000 fed8 	bl	11f48 <printk>
   11198:	484b      	ldr	r0, [pc, #300]	; (112c8 <z_add_timeout+0x198>)
   1119a:	f000 fed5 	bl	11f48 <printk>
   1119e:	2167      	movs	r1, #103	; 0x67
   111a0:	4847      	ldr	r0, [pc, #284]	; (112c0 <z_add_timeout+0x190>)
   111a2:	f001 f967 	bl	12474 <assert_post_action>
	to->fn = fn;
   111a6:	9b01      	ldr	r3, [sp, #4]
	ticks = MAX(1, ticks);
   111a8:	2c01      	cmp	r4, #1
	to->fn = fn;
   111aa:	f8ca 300c 	str.w	r3, [sl, #12]
	ticks = MAX(1, ticks);
   111ae:	f175 0300 	sbcs.w	r3, r5, #0
   111b2:	bfb8      	it	lt
   111b4:	2401      	movlt	r4, #1
	__asm__ volatile(
   111b6:	f04f 0320 	mov.w	r3, #32
   111ba:	f3ef 8611 	mrs	r6, BASEPRI
   111be:	f383 8811 	msr	BASEPRI, r3
   111c2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   111c6:	4841      	ldr	r0, [pc, #260]	; (112cc <z_add_timeout+0x19c>)
   111c8:	f7ff fe54 	bl	10e74 <z_spin_lock_valid>
   111cc:	b968      	cbnz	r0, 111ea <z_add_timeout+0xba>
   111ce:	235c      	movs	r3, #92	; 0x5c
   111d0:	4a3f      	ldr	r2, [pc, #252]	; (112d0 <z_add_timeout+0x1a0>)
   111d2:	4940      	ldr	r1, [pc, #256]	; (112d4 <z_add_timeout+0x1a4>)
   111d4:	483b      	ldr	r0, [pc, #236]	; (112c4 <z_add_timeout+0x194>)
   111d6:	f000 feb7 	bl	11f48 <printk>
   111da:	493c      	ldr	r1, [pc, #240]	; (112cc <z_add_timeout+0x19c>)
   111dc:	483e      	ldr	r0, [pc, #248]	; (112d8 <z_add_timeout+0x1a8>)
   111de:	f000 feb3 	bl	11f48 <printk>
   111e2:	215c      	movs	r1, #92	; 0x5c
   111e4:	483a      	ldr	r0, [pc, #232]	; (112d0 <z_add_timeout+0x1a0>)
   111e6:	f001 f945 	bl	12474 <assert_post_action>
	z_spin_lock_set_owner(l);
   111ea:	4838      	ldr	r0, [pc, #224]	; (112cc <z_add_timeout+0x19c>)
   111ec:	f7ff fe5e 	bl	10eac <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   111f0:	f7ff ff64 	bl	110bc <elapsed>
   111f4:	4420      	add	r0, r4
	return list->head == list;
   111f6:	4c39      	ldr	r4, [pc, #228]	; (112dc <z_add_timeout+0x1ac>)
   111f8:	f8ca 0008 	str.w	r0, [sl, #8]
   111fc:	6825      	ldr	r5, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   111fe:	42a5      	cmp	r5, r4
   11200:	d005      	beq.n	1120e <z_add_timeout+0xde>
		for (t = first(); t != NULL; t = next(t)) {
			__ASSERT(t->dticks >= 0, "");
   11202:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 112c0 <z_add_timeout+0x190>
   11206:	4f36      	ldr	r7, [pc, #216]	; (112e0 <z_add_timeout+0x1b0>)
   11208:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 112c4 <z_add_timeout+0x194>
		for (t = first(); t != NULL; t = next(t)) {
   1120c:	b955      	cbnz	r5, 11224 <z_add_timeout+0xf4>
	node->prev = list->tail;
   1120e:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   11210:	f8ca 4000 	str.w	r4, [sl]
	node->prev = list->tail;
   11214:	f8ca 3004 	str.w	r3, [sl, #4]
	list->tail->next = node;
   11218:	6863      	ldr	r3, [r4, #4]
   1121a:	f8c3 a000 	str.w	sl, [r3]
	list->tail = node;
   1121e:	f8c4 a004 	str.w	sl, [r4, #4]
}
   11222:	e01d      	b.n	11260 <z_add_timeout+0x130>
			__ASSERT(t->dticks >= 0, "");
   11224:	68ab      	ldr	r3, [r5, #8]
   11226:	2b00      	cmp	r3, #0
   11228:	da0c      	bge.n	11244 <z_add_timeout+0x114>
   1122a:	4639      	mov	r1, r7
   1122c:	2370      	movs	r3, #112	; 0x70
   1122e:	464a      	mov	r2, r9
   11230:	4640      	mov	r0, r8
   11232:	f000 fe89 	bl	11f48 <printk>
   11236:	4824      	ldr	r0, [pc, #144]	; (112c8 <z_add_timeout+0x198>)
   11238:	f000 fe86 	bl	11f48 <printk>
   1123c:	2170      	movs	r1, #112	; 0x70
   1123e:	4648      	mov	r0, r9
   11240:	f001 f918 	bl	12474 <assert_post_action>

			if (t->dticks > to->dticks) {
   11244:	68aa      	ldr	r2, [r5, #8]
   11246:	f8da 3008 	ldr.w	r3, [sl, #8]
   1124a:	429a      	cmp	r2, r3
   1124c:	dd2b      	ble.n	112a6 <z_add_timeout+0x176>
				t->dticks -= to->dticks;
   1124e:	1ad3      	subs	r3, r2, r3
   11250:	60ab      	str	r3, [r5, #8]
	node->prev = successor->prev;
   11252:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   11254:	e9ca 5300 	strd	r5, r3, [sl]
	successor->prev->next = node;
   11258:	f8c3 a000 	str.w	sl, [r3]
	successor->prev = node;
   1125c:	f8c5 a004 	str.w	sl, [r5, #4]
	return list->head == list;
   11260:	6823      	ldr	r3, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11262:	42a3      	cmp	r3, r4
   11264:	d006      	beq.n	11274 <z_add_timeout+0x144>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   11266:	459a      	cmp	sl, r3
   11268:	d104      	bne.n	11274 <z_add_timeout+0x144>
			z_clock_set_timeout(next_timeout(), false);
   1126a:	f7ff ff31 	bl	110d0 <next_timeout>
   1126e:	2100      	movs	r1, #0
   11270:	f7f1 fb0e 	bl	2890 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11274:	4815      	ldr	r0, [pc, #84]	; (112cc <z_add_timeout+0x19c>)
   11276:	f7ff fe0b 	bl	10e90 <z_spin_unlock_valid>
   1127a:	b968      	cbnz	r0, 11298 <z_add_timeout+0x168>
   1127c:	2384      	movs	r3, #132	; 0x84
   1127e:	4a14      	ldr	r2, [pc, #80]	; (112d0 <z_add_timeout+0x1a0>)
   11280:	4918      	ldr	r1, [pc, #96]	; (112e4 <z_add_timeout+0x1b4>)
   11282:	4810      	ldr	r0, [pc, #64]	; (112c4 <z_add_timeout+0x194>)
   11284:	f000 fe60 	bl	11f48 <printk>
   11288:	4910      	ldr	r1, [pc, #64]	; (112cc <z_add_timeout+0x19c>)
   1128a:	4817      	ldr	r0, [pc, #92]	; (112e8 <z_add_timeout+0x1b8>)
   1128c:	f000 fe5c 	bl	11f48 <printk>
   11290:	2184      	movs	r1, #132	; 0x84
   11292:	480f      	ldr	r0, [pc, #60]	; (112d0 <z_add_timeout+0x1a0>)
   11294:	f001 f8ee 	bl	12474 <assert_post_action>
	__asm__ volatile(
   11298:	f386 8811 	msr	BASEPRI, r6
   1129c:	f3bf 8f6f 	isb	sy
		}
	}
}
   112a0:	b003      	add	sp, #12
   112a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   112a6:	1a9b      	subs	r3, r3, r2
   112a8:	f8ca 3008 	str.w	r3, [sl, #8]
	return (node == list->tail) ? NULL : node->next;
   112ac:	6863      	ldr	r3, [r4, #4]
   112ae:	429d      	cmp	r5, r3
   112b0:	d0ad      	beq.n	1120e <z_add_timeout+0xde>
   112b2:	682d      	ldr	r5, [r5, #0]
   112b4:	e7aa      	b.n	1120c <z_add_timeout+0xdc>
   112b6:	bf00      	nop
   112b8:	200007f8 	.word	0x200007f8
   112bc:	0001ba37 	.word	0x0001ba37
   112c0:	0001ba13 	.word	0x0001ba13
   112c4:	00017b50 	.word	0x00017b50
   112c8:	0001af24 	.word	0x0001af24
   112cc:	20001e60 	.word	0x20001e60
   112d0:	00017fdb 	.word	0x00017fdb
   112d4:	00018001 	.word	0x00018001
   112d8:	00018016 	.word	0x00018016
   112dc:	200002e4 	.word	0x200002e4
   112e0:	0001ba57 	.word	0x0001ba57
   112e4:	0001802e 	.word	0x0001802e
   112e8:	00018045 	.word	0x00018045

000112ec <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   112ec:	b538      	push	{r3, r4, r5, lr}
   112ee:	4604      	mov	r4, r0
	__asm__ volatile(
   112f0:	f04f 0320 	mov.w	r3, #32
   112f4:	f3ef 8511 	mrs	r5, BASEPRI
   112f8:	f383 8811 	msr	BASEPRI, r3
   112fc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11300:	481a      	ldr	r0, [pc, #104]	; (1136c <z_abort_timeout+0x80>)
   11302:	f7ff fdb7 	bl	10e74 <z_spin_lock_valid>
   11306:	b968      	cbnz	r0, 11324 <z_abort_timeout+0x38>
   11308:	235c      	movs	r3, #92	; 0x5c
   1130a:	4a19      	ldr	r2, [pc, #100]	; (11370 <z_abort_timeout+0x84>)
   1130c:	4919      	ldr	r1, [pc, #100]	; (11374 <z_abort_timeout+0x88>)
   1130e:	481a      	ldr	r0, [pc, #104]	; (11378 <z_abort_timeout+0x8c>)
   11310:	f000 fe1a 	bl	11f48 <printk>
   11314:	4915      	ldr	r1, [pc, #84]	; (1136c <z_abort_timeout+0x80>)
   11316:	4819      	ldr	r0, [pc, #100]	; (1137c <z_abort_timeout+0x90>)
   11318:	f000 fe16 	bl	11f48 <printk>
   1131c:	215c      	movs	r1, #92	; 0x5c
   1131e:	4814      	ldr	r0, [pc, #80]	; (11370 <z_abort_timeout+0x84>)
   11320:	f001 f8a8 	bl	12474 <assert_post_action>
	z_spin_lock_set_owner(l);
   11324:	4811      	ldr	r0, [pc, #68]	; (1136c <z_abort_timeout+0x80>)
   11326:	f7ff fdc1 	bl	10eac <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   1132a:	6823      	ldr	r3, [r4, #0]
   1132c:	b1db      	cbz	r3, 11366 <z_abort_timeout+0x7a>
			remove_timeout(to);
   1132e:	4620      	mov	r0, r4
   11330:	f7ff feea 	bl	11108 <remove_timeout>
			ret = 0;
   11334:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11336:	480d      	ldr	r0, [pc, #52]	; (1136c <z_abort_timeout+0x80>)
   11338:	f7ff fdaa 	bl	10e90 <z_spin_unlock_valid>
   1133c:	b968      	cbnz	r0, 1135a <z_abort_timeout+0x6e>
   1133e:	2384      	movs	r3, #132	; 0x84
   11340:	4a0b      	ldr	r2, [pc, #44]	; (11370 <z_abort_timeout+0x84>)
   11342:	490f      	ldr	r1, [pc, #60]	; (11380 <z_abort_timeout+0x94>)
   11344:	480c      	ldr	r0, [pc, #48]	; (11378 <z_abort_timeout+0x8c>)
   11346:	f000 fdff 	bl	11f48 <printk>
   1134a:	4908      	ldr	r1, [pc, #32]	; (1136c <z_abort_timeout+0x80>)
   1134c:	480d      	ldr	r0, [pc, #52]	; (11384 <z_abort_timeout+0x98>)
   1134e:	f000 fdfb 	bl	11f48 <printk>
   11352:	2184      	movs	r1, #132	; 0x84
   11354:	4806      	ldr	r0, [pc, #24]	; (11370 <z_abort_timeout+0x84>)
   11356:	f001 f88d 	bl	12474 <assert_post_action>
	__asm__ volatile(
   1135a:	f385 8811 	msr	BASEPRI, r5
   1135e:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   11362:	4620      	mov	r0, r4
   11364:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   11366:	f06f 0415 	mvn.w	r4, #21
   1136a:	e7e4      	b.n	11336 <z_abort_timeout+0x4a>
   1136c:	20001e60 	.word	0x20001e60
   11370:	00017fdb 	.word	0x00017fdb
   11374:	00018001 	.word	0x00018001
   11378:	00017b50 	.word	0x00017b50
   1137c:	00018016 	.word	0x00018016
   11380:	0001802e 	.word	0x0001802e
   11384:	00018045 	.word	0x00018045

00011388 <z_get_next_timeout_expiry>:

	return ticks;
}

s32_t z_get_next_timeout_expiry(void)
{
   11388:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1138a:	f04f 0320 	mov.w	r3, #32
   1138e:	f3ef 8511 	mrs	r5, BASEPRI
   11392:	f383 8811 	msr	BASEPRI, r3
   11396:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1139a:	4818      	ldr	r0, [pc, #96]	; (113fc <z_get_next_timeout_expiry+0x74>)
   1139c:	f7ff fd6a 	bl	10e74 <z_spin_lock_valid>
   113a0:	b968      	cbnz	r0, 113be <z_get_next_timeout_expiry+0x36>
   113a2:	235c      	movs	r3, #92	; 0x5c
   113a4:	4a16      	ldr	r2, [pc, #88]	; (11400 <z_get_next_timeout_expiry+0x78>)
   113a6:	4917      	ldr	r1, [pc, #92]	; (11404 <z_get_next_timeout_expiry+0x7c>)
   113a8:	4817      	ldr	r0, [pc, #92]	; (11408 <z_get_next_timeout_expiry+0x80>)
   113aa:	f000 fdcd 	bl	11f48 <printk>
   113ae:	4913      	ldr	r1, [pc, #76]	; (113fc <z_get_next_timeout_expiry+0x74>)
   113b0:	4816      	ldr	r0, [pc, #88]	; (1140c <z_get_next_timeout_expiry+0x84>)
   113b2:	f000 fdc9 	bl	11f48 <printk>
   113b6:	215c      	movs	r1, #92	; 0x5c
   113b8:	4811      	ldr	r0, [pc, #68]	; (11400 <z_get_next_timeout_expiry+0x78>)
   113ba:	f001 f85b 	bl	12474 <assert_post_action>
	z_spin_lock_set_owner(l);
   113be:	480f      	ldr	r0, [pc, #60]	; (113fc <z_get_next_timeout_expiry+0x74>)
   113c0:	f7ff fd74 	bl	10eac <z_spin_lock_set_owner>
	s32_t ret = (s32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   113c4:	f7ff fe84 	bl	110d0 <next_timeout>
   113c8:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   113ca:	480c      	ldr	r0, [pc, #48]	; (113fc <z_get_next_timeout_expiry+0x74>)
   113cc:	f7ff fd60 	bl	10e90 <z_spin_unlock_valid>
   113d0:	b968      	cbnz	r0, 113ee <z_get_next_timeout_expiry+0x66>
   113d2:	2384      	movs	r3, #132	; 0x84
   113d4:	4a0a      	ldr	r2, [pc, #40]	; (11400 <z_get_next_timeout_expiry+0x78>)
   113d6:	490e      	ldr	r1, [pc, #56]	; (11410 <z_get_next_timeout_expiry+0x88>)
   113d8:	480b      	ldr	r0, [pc, #44]	; (11408 <z_get_next_timeout_expiry+0x80>)
   113da:	f000 fdb5 	bl	11f48 <printk>
   113de:	4907      	ldr	r1, [pc, #28]	; (113fc <z_get_next_timeout_expiry+0x74>)
   113e0:	480c      	ldr	r0, [pc, #48]	; (11414 <z_get_next_timeout_expiry+0x8c>)
   113e2:	f000 fdb1 	bl	11f48 <printk>
   113e6:	2184      	movs	r1, #132	; 0x84
   113e8:	4805      	ldr	r0, [pc, #20]	; (11400 <z_get_next_timeout_expiry+0x78>)
   113ea:	f001 f843 	bl	12474 <assert_post_action>
	__asm__ volatile(
   113ee:	f385 8811 	msr	BASEPRI, r5
   113f2:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   113f6:	4620      	mov	r0, r4
   113f8:	bd38      	pop	{r3, r4, r5, pc}
   113fa:	bf00      	nop
   113fc:	20001e60 	.word	0x20001e60
   11400:	00017fdb 	.word	0x00017fdb
   11404:	00018001 	.word	0x00018001
   11408:	00017b50 	.word	0x00017b50
   1140c:	00018016 	.word	0x00018016
   11410:	0001802e 	.word	0x0001802e
   11414:	00018045 	.word	0x00018045

00011418 <z_set_timeout_expiry>:

void z_set_timeout_expiry(s32_t ticks, bool idle)
{
   11418:	b570      	push	{r4, r5, r6, lr}
   1141a:	4604      	mov	r4, r0
   1141c:	460d      	mov	r5, r1
	__asm__ volatile(
   1141e:	f04f 0320 	mov.w	r3, #32
   11422:	f3ef 8611 	mrs	r6, BASEPRI
   11426:	f383 8811 	msr	BASEPRI, r3
   1142a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1142e:	481b      	ldr	r0, [pc, #108]	; (1149c <z_set_timeout_expiry+0x84>)
   11430:	f7ff fd20 	bl	10e74 <z_spin_lock_valid>
   11434:	b968      	cbnz	r0, 11452 <z_set_timeout_expiry+0x3a>
   11436:	235c      	movs	r3, #92	; 0x5c
   11438:	4a19      	ldr	r2, [pc, #100]	; (114a0 <z_set_timeout_expiry+0x88>)
   1143a:	491a      	ldr	r1, [pc, #104]	; (114a4 <z_set_timeout_expiry+0x8c>)
   1143c:	481a      	ldr	r0, [pc, #104]	; (114a8 <z_set_timeout_expiry+0x90>)
   1143e:	f000 fd83 	bl	11f48 <printk>
   11442:	4916      	ldr	r1, [pc, #88]	; (1149c <z_set_timeout_expiry+0x84>)
   11444:	4819      	ldr	r0, [pc, #100]	; (114ac <z_set_timeout_expiry+0x94>)
   11446:	f000 fd7f 	bl	11f48 <printk>
   1144a:	215c      	movs	r1, #92	; 0x5c
   1144c:	4814      	ldr	r0, [pc, #80]	; (114a0 <z_set_timeout_expiry+0x88>)
   1144e:	f001 f811 	bl	12474 <assert_post_action>
	z_spin_lock_set_owner(l);
   11452:	4812      	ldr	r0, [pc, #72]	; (1149c <z_set_timeout_expiry+0x84>)
   11454:	f7ff fd2a 	bl	10eac <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next = next_timeout();
   11458:	f7ff fe3a 	bl	110d0 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1145c:	2801      	cmp	r0, #1
   1145e:	dd05      	ble.n	1146c <z_set_timeout_expiry+0x54>
   11460:	42a0      	cmp	r0, r4
   11462:	dd03      	ble.n	1146c <z_set_timeout_expiry+0x54>
			z_clock_set_timeout(ticks, idle);
   11464:	4629      	mov	r1, r5
   11466:	4620      	mov	r0, r4
   11468:	f7f1 fa12 	bl	2890 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1146c:	480b      	ldr	r0, [pc, #44]	; (1149c <z_set_timeout_expiry+0x84>)
   1146e:	f7ff fd0f 	bl	10e90 <z_spin_unlock_valid>
   11472:	b968      	cbnz	r0, 11490 <z_set_timeout_expiry+0x78>
   11474:	2384      	movs	r3, #132	; 0x84
   11476:	4a0a      	ldr	r2, [pc, #40]	; (114a0 <z_set_timeout_expiry+0x88>)
   11478:	490d      	ldr	r1, [pc, #52]	; (114b0 <z_set_timeout_expiry+0x98>)
   1147a:	480b      	ldr	r0, [pc, #44]	; (114a8 <z_set_timeout_expiry+0x90>)
   1147c:	f000 fd64 	bl	11f48 <printk>
   11480:	4906      	ldr	r1, [pc, #24]	; (1149c <z_set_timeout_expiry+0x84>)
   11482:	480c      	ldr	r0, [pc, #48]	; (114b4 <z_set_timeout_expiry+0x9c>)
   11484:	f000 fd60 	bl	11f48 <printk>
   11488:	2184      	movs	r1, #132	; 0x84
   1148a:	4805      	ldr	r0, [pc, #20]	; (114a0 <z_set_timeout_expiry+0x88>)
   1148c:	f000 fff2 	bl	12474 <assert_post_action>
	__asm__ volatile(
   11490:	f386 8811 	msr	BASEPRI, r6
   11494:	f3bf 8f6f 	isb	sy
		}
	}
}
   11498:	bd70      	pop	{r4, r5, r6, pc}
   1149a:	bf00      	nop
   1149c:	20001e60 	.word	0x20001e60
   114a0:	00017fdb 	.word	0x00017fdb
   114a4:	00018001 	.word	0x00018001
   114a8:	00017b50 	.word	0x00017b50
   114ac:	00018016 	.word	0x00018016
   114b0:	0001802e 	.word	0x0001802e
   114b4:	00018045 	.word	0x00018045

000114b8 <z_clock_announce>:

void z_clock_announce(s32_t ticks)
{
   114b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   114bc:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   114be:	f7fe fda7 	bl	10010 <z_time_slice>
	__asm__ volatile(
   114c2:	f04f 0320 	mov.w	r3, #32
   114c6:	f3ef 8511 	mrs	r5, BASEPRI
   114ca:	f383 8811 	msr	BASEPRI, r3
   114ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   114d2:	4847      	ldr	r0, [pc, #284]	; (115f0 <z_clock_announce+0x138>)
   114d4:	f7ff fcce 	bl	10e74 <z_spin_lock_valid>
   114d8:	b968      	cbnz	r0, 114f6 <z_clock_announce+0x3e>
   114da:	235c      	movs	r3, #92	; 0x5c
   114dc:	4a45      	ldr	r2, [pc, #276]	; (115f4 <z_clock_announce+0x13c>)
   114de:	4946      	ldr	r1, [pc, #280]	; (115f8 <z_clock_announce+0x140>)
   114e0:	4846      	ldr	r0, [pc, #280]	; (115fc <z_clock_announce+0x144>)
   114e2:	f000 fd31 	bl	11f48 <printk>
   114e6:	4942      	ldr	r1, [pc, #264]	; (115f0 <z_clock_announce+0x138>)
   114e8:	4845      	ldr	r0, [pc, #276]	; (11600 <z_clock_announce+0x148>)
   114ea:	f000 fd2d 	bl	11f48 <printk>
   114ee:	215c      	movs	r1, #92	; 0x5c
   114f0:	4840      	ldr	r0, [pc, #256]	; (115f4 <z_clock_announce+0x13c>)
   114f2:	f000 ffbf 	bl	12474 <assert_post_action>
	z_spin_lock_set_owner(l);
   114f6:	4f43      	ldr	r7, [pc, #268]	; (11604 <z_clock_announce+0x14c>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   114f8:	4e43      	ldr	r6, [pc, #268]	; (11608 <z_clock_announce+0x150>)
   114fa:	46b9      	mov	r9, r7
   114fc:	483c      	ldr	r0, [pc, #240]	; (115f0 <z_clock_announce+0x138>)
	return list->head == list;
   114fe:	f8df 8114 	ldr.w	r8, [pc, #276]	; 11614 <z_clock_announce+0x15c>
   11502:	f7ff fcd3 	bl	10eac <z_spin_lock_set_owner>
   11506:	6034      	str	r4, [r6, #0]
   11508:	f8d8 4000 	ldr.w	r4, [r8]
   1150c:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1150e:	4544      	cmp	r4, r8
   11510:	e9d7 0100 	ldrd	r0, r1, [r7]
   11514:	d005      	beq.n	11522 <z_clock_announce+0x6a>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   11516:	b124      	cbz	r4, 11522 <z_clock_announce+0x6a>
   11518:	68a3      	ldr	r3, [r4, #8]
   1151a:	4293      	cmp	r3, r2
   1151c:	dd25      	ble.n	1156a <z_clock_announce+0xb2>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1151e:	1a9b      	subs	r3, r3, r2
   11520:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   11522:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   11524:	1880      	adds	r0, r0, r2
   11526:	eb41 71e2 	adc.w	r1, r1, r2, asr #31
   1152a:	e9c9 0100 	strd	r0, r1, [r9]
	announce_remaining = 0;
   1152e:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   11530:	f7ff fdce 	bl	110d0 <next_timeout>
   11534:	4621      	mov	r1, r4
   11536:	f7f1 f9ab 	bl	2890 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1153a:	482d      	ldr	r0, [pc, #180]	; (115f0 <z_clock_announce+0x138>)
   1153c:	f7ff fca8 	bl	10e90 <z_spin_unlock_valid>
   11540:	b968      	cbnz	r0, 1155e <z_clock_announce+0xa6>
   11542:	2384      	movs	r3, #132	; 0x84
   11544:	4a2b      	ldr	r2, [pc, #172]	; (115f4 <z_clock_announce+0x13c>)
   11546:	4931      	ldr	r1, [pc, #196]	; (1160c <z_clock_announce+0x154>)
   11548:	482c      	ldr	r0, [pc, #176]	; (115fc <z_clock_announce+0x144>)
   1154a:	f000 fcfd 	bl	11f48 <printk>
   1154e:	4928      	ldr	r1, [pc, #160]	; (115f0 <z_clock_announce+0x138>)
   11550:	482f      	ldr	r0, [pc, #188]	; (11610 <z_clock_announce+0x158>)
   11552:	f000 fcf9 	bl	11f48 <printk>
   11556:	2184      	movs	r1, #132	; 0x84
   11558:	4826      	ldr	r0, [pc, #152]	; (115f4 <z_clock_announce+0x13c>)
   1155a:	f000 ff8b 	bl	12474 <assert_post_action>
	__asm__ volatile(
   1155e:	f385 8811 	msr	BASEPRI, r5
   11562:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   11566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   1156a:	18c0      	adds	r0, r0, r3
   1156c:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
		announce_remaining -= dt;
   11570:	1ad3      	subs	r3, r2, r3
   11572:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   11574:	2300      	movs	r3, #0
		curr_tick += dt;
   11576:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   1157a:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   1157c:	4620      	mov	r0, r4
   1157e:	f7ff fdc3 	bl	11108 <remove_timeout>
   11582:	481b      	ldr	r0, [pc, #108]	; (115f0 <z_clock_announce+0x138>)
   11584:	f7ff fc84 	bl	10e90 <z_spin_unlock_valid>
   11588:	b968      	cbnz	r0, 115a6 <z_clock_announce+0xee>
   1158a:	2384      	movs	r3, #132	; 0x84
   1158c:	4a19      	ldr	r2, [pc, #100]	; (115f4 <z_clock_announce+0x13c>)
   1158e:	491f      	ldr	r1, [pc, #124]	; (1160c <z_clock_announce+0x154>)
   11590:	481a      	ldr	r0, [pc, #104]	; (115fc <z_clock_announce+0x144>)
   11592:	f000 fcd9 	bl	11f48 <printk>
   11596:	4916      	ldr	r1, [pc, #88]	; (115f0 <z_clock_announce+0x138>)
   11598:	481d      	ldr	r0, [pc, #116]	; (11610 <z_clock_announce+0x158>)
   1159a:	f000 fcd5 	bl	11f48 <printk>
   1159e:	2184      	movs	r1, #132	; 0x84
   115a0:	4814      	ldr	r0, [pc, #80]	; (115f4 <z_clock_announce+0x13c>)
   115a2:	f000 ff67 	bl	12474 <assert_post_action>
   115a6:	f385 8811 	msr	BASEPRI, r5
   115aa:	f3bf 8f6f 	isb	sy
		t->fn(t);
   115ae:	4620      	mov	r0, r4
   115b0:	68e3      	ldr	r3, [r4, #12]
   115b2:	4798      	blx	r3
	__asm__ volatile(
   115b4:	f04f 0320 	mov.w	r3, #32
   115b8:	f3ef 8511 	mrs	r5, BASEPRI
   115bc:	f383 8811 	msr	BASEPRI, r3
   115c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   115c4:	480a      	ldr	r0, [pc, #40]	; (115f0 <z_clock_announce+0x138>)
   115c6:	f7ff fc55 	bl	10e74 <z_spin_lock_valid>
   115ca:	b968      	cbnz	r0, 115e8 <z_clock_announce+0x130>
   115cc:	235c      	movs	r3, #92	; 0x5c
   115ce:	4a09      	ldr	r2, [pc, #36]	; (115f4 <z_clock_announce+0x13c>)
   115d0:	4909      	ldr	r1, [pc, #36]	; (115f8 <z_clock_announce+0x140>)
   115d2:	480a      	ldr	r0, [pc, #40]	; (115fc <z_clock_announce+0x144>)
   115d4:	f000 fcb8 	bl	11f48 <printk>
   115d8:	4905      	ldr	r1, [pc, #20]	; (115f0 <z_clock_announce+0x138>)
   115da:	4809      	ldr	r0, [pc, #36]	; (11600 <z_clock_announce+0x148>)
   115dc:	f000 fcb4 	bl	11f48 <printk>
   115e0:	215c      	movs	r1, #92	; 0x5c
   115e2:	4804      	ldr	r0, [pc, #16]	; (115f4 <z_clock_announce+0x13c>)
   115e4:	f000 ff46 	bl	12474 <assert_post_action>
	z_spin_lock_set_owner(l);
   115e8:	4801      	ldr	r0, [pc, #4]	; (115f0 <z_clock_announce+0x138>)
   115ea:	f7ff fc5f 	bl	10eac <z_spin_lock_set_owner>
	return k;
   115ee:	e78b      	b.n	11508 <z_clock_announce+0x50>
   115f0:	20001e60 	.word	0x20001e60
   115f4:	00017fdb 	.word	0x00017fdb
   115f8:	00018001 	.word	0x00018001
   115fc:	00017b50 	.word	0x00017b50
   11600:	00018016 	.word	0x00018016
   11604:	200007f8 	.word	0x200007f8
   11608:	20001e5c 	.word	0x20001e5c
   1160c:	0001802e 	.word	0x0001802e
   11610:	00018045 	.word	0x00018045
   11614:	200002e4 	.word	0x200002e4

00011618 <z_tick_get>:

s64_t z_tick_get(void)
{
   11618:	b570      	push	{r4, r5, r6, lr}
   1161a:	f04f 0320 	mov.w	r3, #32
   1161e:	f3ef 8611 	mrs	r6, BASEPRI
   11622:	f383 8811 	msr	BASEPRI, r3
   11626:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1162a:	481b      	ldr	r0, [pc, #108]	; (11698 <z_tick_get+0x80>)
   1162c:	f7ff fc22 	bl	10e74 <z_spin_lock_valid>
   11630:	b968      	cbnz	r0, 1164e <z_tick_get+0x36>
   11632:	235c      	movs	r3, #92	; 0x5c
   11634:	4a19      	ldr	r2, [pc, #100]	; (1169c <z_tick_get+0x84>)
   11636:	491a      	ldr	r1, [pc, #104]	; (116a0 <z_tick_get+0x88>)
   11638:	481a      	ldr	r0, [pc, #104]	; (116a4 <z_tick_get+0x8c>)
   1163a:	f000 fc85 	bl	11f48 <printk>
   1163e:	4916      	ldr	r1, [pc, #88]	; (11698 <z_tick_get+0x80>)
   11640:	4819      	ldr	r0, [pc, #100]	; (116a8 <z_tick_get+0x90>)
   11642:	f000 fc81 	bl	11f48 <printk>
   11646:	215c      	movs	r1, #92	; 0x5c
   11648:	4814      	ldr	r0, [pc, #80]	; (1169c <z_tick_get+0x84>)
   1164a:	f000 ff13 	bl	12474 <assert_post_action>
	z_spin_lock_set_owner(l);
   1164e:	4812      	ldr	r0, [pc, #72]	; (11698 <z_tick_get+0x80>)
   11650:	f7ff fc2c 	bl	10eac <z_spin_lock_set_owner>
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   11654:	f7f1 f980 	bl	2958 <z_clock_elapsed>
   11658:	4b14      	ldr	r3, [pc, #80]	; (116ac <z_tick_get+0x94>)
   1165a:	e9d3 4500 	ldrd	r4, r5, [r3]
   1165e:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11660:	480d      	ldr	r0, [pc, #52]	; (11698 <z_tick_get+0x80>)
   11662:	f145 0500 	adc.w	r5, r5, #0
   11666:	f7ff fc13 	bl	10e90 <z_spin_unlock_valid>
   1166a:	b968      	cbnz	r0, 11688 <z_tick_get+0x70>
   1166c:	2384      	movs	r3, #132	; 0x84
   1166e:	4a0b      	ldr	r2, [pc, #44]	; (1169c <z_tick_get+0x84>)
   11670:	490f      	ldr	r1, [pc, #60]	; (116b0 <z_tick_get+0x98>)
   11672:	480c      	ldr	r0, [pc, #48]	; (116a4 <z_tick_get+0x8c>)
   11674:	f000 fc68 	bl	11f48 <printk>
   11678:	4907      	ldr	r1, [pc, #28]	; (11698 <z_tick_get+0x80>)
   1167a:	480e      	ldr	r0, [pc, #56]	; (116b4 <z_tick_get+0x9c>)
   1167c:	f000 fc64 	bl	11f48 <printk>
   11680:	2184      	movs	r1, #132	; 0x84
   11682:	4806      	ldr	r0, [pc, #24]	; (1169c <z_tick_get+0x84>)
   11684:	f000 fef6 	bl	12474 <assert_post_action>
	__asm__ volatile(
   11688:	f386 8811 	msr	BASEPRI, r6
   1168c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   11690:	4620      	mov	r0, r4
   11692:	4629      	mov	r1, r5
   11694:	bd70      	pop	{r4, r5, r6, pc}
   11696:	bf00      	nop
   11698:	20001e60 	.word	0x20001e60
   1169c:	00017fdb 	.word	0x00017fdb
   116a0:	00018001 	.word	0x00018001
   116a4:	00017b50 	.word	0x00017b50
   116a8:	00018016 	.word	0x00018016
   116ac:	200007f8 	.word	0x200007f8
   116b0:	0001802e 	.word	0x0001802e
   116b4:	00018045 	.word	0x00018045

000116b8 <k_poll_poller_cb>:

	return events_registered;
}

static int k_poll_poller_cb(struct k_poll_event *event, u32_t state)
{
   116b8:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   116ba:	6883      	ldr	r3, [r0, #8]
{
   116bc:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   116be:	685c      	ldr	r4, [r3, #4]

	__ASSERT(thread != NULL, "poller should have a thread\n");
   116c0:	b964      	cbnz	r4, 116dc <k_poll_poller_cb+0x24>
   116c2:	4915      	ldr	r1, [pc, #84]	; (11718 <k_poll_poller_cb+0x60>)
   116c4:	23e0      	movs	r3, #224	; 0xe0
   116c6:	4a15      	ldr	r2, [pc, #84]	; (1171c <k_poll_poller_cb+0x64>)
   116c8:	4815      	ldr	r0, [pc, #84]	; (11720 <k_poll_poller_cb+0x68>)
   116ca:	f000 fc3d 	bl	11f48 <printk>
   116ce:	4815      	ldr	r0, [pc, #84]	; (11724 <k_poll_poller_cb+0x6c>)
   116d0:	f000 fc3a 	bl	11f48 <printk>
   116d4:	21e0      	movs	r1, #224	; 0xe0
   116d6:	4811      	ldr	r0, [pc, #68]	; (1171c <k_poll_poller_cb+0x64>)
   116d8:	f000 fecc 	bl	12474 <assert_post_action>

	if (!z_is_thread_pending(thread)) {
   116dc:	7b63      	ldrb	r3, [r4, #13]
   116de:	079a      	lsls	r2, r3, #30
   116e0:	d50e      	bpl.n	11700 <k_poll_poller_cb+0x48>
		return 0;
	}

	if (z_is_thread_timeout_expired(thread)) {
   116e2:	6a23      	ldr	r3, [r4, #32]
   116e4:	3302      	adds	r3, #2
   116e6:	d014      	beq.n	11712 <k_poll_poller_cb+0x5a>
		return -EAGAIN;
	}

	z_unpend_thread(thread);
   116e8:	4620      	mov	r0, r4
   116ea:	f7fe f9c3 	bl	fa74 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   116ee:	2d08      	cmp	r5, #8
   116f0:	bf0c      	ite	eq
   116f2:	f06f 0303 	mvneq.w	r3, #3
   116f6:	2300      	movne	r3, #0
   116f8:	6723      	str	r3, [r4, #112]	; 0x70
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   116fa:	7b63      	ldrb	r3, [r4, #13]
   116fc:	06db      	lsls	r3, r3, #27
   116fe:	d001      	beq.n	11704 <k_poll_poller_cb+0x4c>
		state == K_POLL_STATE_CANCELLED ? -EINTR : 0);

	if (!z_is_thread_ready(thread)) {
		return 0;
   11700:	2000      	movs	r0, #0
	}

	z_ready_thread(thread);

	return 0;
}
   11702:	bd38      	pop	{r3, r4, r5, pc}
	if (!z_is_thread_ready(thread)) {
   11704:	69a5      	ldr	r5, [r4, #24]
   11706:	2d00      	cmp	r5, #0
   11708:	d1fa      	bne.n	11700 <k_poll_poller_cb+0x48>
	z_ready_thread(thread);
   1170a:	4620      	mov	r0, r4
   1170c:	f7fe faf2 	bl	fcf4 <z_ready_thread>
	return 0;
   11710:	e7f6      	b.n	11700 <k_poll_poller_cb+0x48>
		return -EAGAIN;
   11712:	f06f 000a 	mvn.w	r0, #10
   11716:	e7f4      	b.n	11702 <k_poll_poller_cb+0x4a>
   11718:	0001ba87 	.word	0x0001ba87
   1171c:	0001ba66 	.word	0x0001ba66
   11720:	00017b50 	.word	0x00017b50
   11724:	0001ba9d 	.word	0x0001ba9d

00011728 <clear_event_registrations>:
{
   11728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1172c:	2414      	movs	r4, #20
   1172e:	4680      	mov	r8, r0
   11730:	4616      	mov	r6, r2
	while (num_events--) {
   11732:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   11736:	4d48      	ldr	r5, [pc, #288]	; (11858 <clear_event_registrations+0x130>)
   11738:	f8df 9158 	ldr.w	r9, [pc, #344]	; 11894 <clear_event_registrations+0x16c>
   1173c:	4f47      	ldr	r7, [pc, #284]	; (1185c <clear_event_registrations+0x134>)
	while (num_events--) {
   1173e:	4544      	cmp	r4, r8
   11740:	d101      	bne.n	11746 <clear_event_registrations+0x1e>
}
   11742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   11746:	2300      	movs	r3, #0
   11748:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   1174c:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   11750:	f003 030f 	and.w	r3, r3, #15
   11754:	2b04      	cmp	r3, #4
   11756:	d83d      	bhi.n	117d4 <clear_event_registrations+0xac>
   11758:	e8df f003 	tbb	[pc, r3]
   1175c:	3c032d49 	.word	0x3c032d49
   11760:	1e          	.byte	0x1e
   11761:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   11762:	f854 3c04 	ldr.w	r3, [r4, #-4]
   11766:	b963      	cbnz	r3, 11782 <clear_event_registrations+0x5a>
   11768:	493d      	ldr	r1, [pc, #244]	; (11860 <clear_event_registrations+0x138>)
   1176a:	2396      	movs	r3, #150	; 0x96
   1176c:	462a      	mov	r2, r5
   1176e:	4638      	mov	r0, r7
   11770:	f000 fbea 	bl	11f48 <printk>
   11774:	483b      	ldr	r0, [pc, #236]	; (11864 <clear_event_registrations+0x13c>)
   11776:	f000 fbe7 	bl	11f48 <printk>
   1177a:	2196      	movs	r1, #150	; 0x96
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1177c:	4628      	mov	r0, r5
   1177e:	f000 fe79 	bl	12474 <assert_post_action>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   11782:	f854 3c14 	ldr.w	r3, [r4, #-20]
   11786:	b393      	cbz	r3, 117ee <clear_event_registrations+0xc6>
	node->prev->next = node->next;
   11788:	f854 2c10 	ldr.w	r2, [r4, #-16]
   1178c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1178e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   11790:	2300      	movs	r3, #0
	node->prev = NULL;
   11792:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   11796:	e02a      	b.n	117ee <clear_event_registrations+0xc6>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   11798:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1179c:	2b00      	cmp	r3, #0
   1179e:	d1f0      	bne.n	11782 <clear_event_registrations+0x5a>
   117a0:	4931      	ldr	r1, [pc, #196]	; (11868 <clear_event_registrations+0x140>)
   117a2:	239a      	movs	r3, #154	; 0x9a
   117a4:	462a      	mov	r2, r5
   117a6:	4638      	mov	r0, r7
   117a8:	f000 fbce 	bl	11f48 <printk>
   117ac:	482f      	ldr	r0, [pc, #188]	; (1186c <clear_event_registrations+0x144>)
   117ae:	f000 fbcb 	bl	11f48 <printk>
   117b2:	219a      	movs	r1, #154	; 0x9a
   117b4:	e7e2      	b.n	1177c <clear_event_registrations+0x54>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   117b6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   117ba:	2b00      	cmp	r3, #0
   117bc:	d1e1      	bne.n	11782 <clear_event_registrations+0x5a>
   117be:	492c      	ldr	r1, [pc, #176]	; (11870 <clear_event_registrations+0x148>)
   117c0:	239e      	movs	r3, #158	; 0x9e
   117c2:	462a      	mov	r2, r5
   117c4:	4638      	mov	r0, r7
   117c6:	f000 fbbf 	bl	11f48 <printk>
   117ca:	482a      	ldr	r0, [pc, #168]	; (11874 <clear_event_registrations+0x14c>)
   117cc:	f000 fbbc 	bl	11f48 <printk>
   117d0:	219e      	movs	r1, #158	; 0x9e
   117d2:	e7d3      	b.n	1177c <clear_event_registrations+0x54>
		__ASSERT(false, "invalid event type\n");
   117d4:	4649      	mov	r1, r9
   117d6:	23a5      	movs	r3, #165	; 0xa5
   117d8:	462a      	mov	r2, r5
   117da:	4638      	mov	r0, r7
   117dc:	f000 fbb4 	bl	11f48 <printk>
   117e0:	4825      	ldr	r0, [pc, #148]	; (11878 <clear_event_registrations+0x150>)
   117e2:	f000 fbb1 	bl	11f48 <printk>
   117e6:	21a5      	movs	r1, #165	; 0xa5
   117e8:	4628      	mov	r0, r5
   117ea:	f000 fe43 	bl	12474 <assert_post_action>
   117ee:	4823      	ldr	r0, [pc, #140]	; (1187c <clear_event_registrations+0x154>)
   117f0:	f7ff fb4e 	bl	10e90 <z_spin_unlock_valid>
   117f4:	b968      	cbnz	r0, 11812 <clear_event_registrations+0xea>
   117f6:	2384      	movs	r3, #132	; 0x84
   117f8:	4638      	mov	r0, r7
   117fa:	4a21      	ldr	r2, [pc, #132]	; (11880 <clear_event_registrations+0x158>)
   117fc:	4921      	ldr	r1, [pc, #132]	; (11884 <clear_event_registrations+0x15c>)
   117fe:	f000 fba3 	bl	11f48 <printk>
   11802:	491e      	ldr	r1, [pc, #120]	; (1187c <clear_event_registrations+0x154>)
   11804:	4820      	ldr	r0, [pc, #128]	; (11888 <clear_event_registrations+0x160>)
   11806:	f000 fb9f 	bl	11f48 <printk>
   1180a:	2184      	movs	r1, #132	; 0x84
   1180c:	481c      	ldr	r0, [pc, #112]	; (11880 <clear_event_registrations+0x158>)
   1180e:	f000 fe31 	bl	12474 <assert_post_action>
   11812:	f386 8811 	msr	BASEPRI, r6
   11816:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1181a:	f04f 0320 	mov.w	r3, #32
   1181e:	f3ef 8611 	mrs	r6, BASEPRI
   11822:	f383 8811 	msr	BASEPRI, r3
   11826:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1182a:	4814      	ldr	r0, [pc, #80]	; (1187c <clear_event_registrations+0x154>)
   1182c:	f7ff fb22 	bl	10e74 <z_spin_lock_valid>
   11830:	b968      	cbnz	r0, 1184e <clear_event_registrations+0x126>
   11832:	235c      	movs	r3, #92	; 0x5c
   11834:	4638      	mov	r0, r7
   11836:	4a12      	ldr	r2, [pc, #72]	; (11880 <clear_event_registrations+0x158>)
   11838:	4914      	ldr	r1, [pc, #80]	; (1188c <clear_event_registrations+0x164>)
   1183a:	f000 fb85 	bl	11f48 <printk>
   1183e:	490f      	ldr	r1, [pc, #60]	; (1187c <clear_event_registrations+0x154>)
   11840:	4813      	ldr	r0, [pc, #76]	; (11890 <clear_event_registrations+0x168>)
   11842:	f000 fb81 	bl	11f48 <printk>
   11846:	215c      	movs	r1, #92	; 0x5c
   11848:	480d      	ldr	r0, [pc, #52]	; (11880 <clear_event_registrations+0x158>)
   1184a:	f000 fe13 	bl	12474 <assert_post_action>
	z_spin_lock_set_owner(l);
   1184e:	480b      	ldr	r0, [pc, #44]	; (1187c <clear_event_registrations+0x154>)
   11850:	f7ff fb2c 	bl	10eac <z_spin_lock_set_owner>
	return k;
   11854:	3c14      	subs	r4, #20
   11856:	e772      	b.n	1173e <clear_event_registrations+0x16>
   11858:	0001ba66 	.word	0x0001ba66
   1185c:	00017b50 	.word	0x00017b50
   11860:	0001babc 	.word	0x0001babc
   11864:	0001bad6 	.word	0x0001bad6
   11868:	0001baeb 	.word	0x0001baeb
   1186c:	0001bb07 	.word	0x0001bb07
   11870:	0001bb18 	.word	0x0001bb18
   11874:	0001bb35 	.word	0x0001bb35
   11878:	0001bb4c 	.word	0x0001bb4c
   1187c:	20001e64 	.word	0x20001e64
   11880:	00017fdb 	.word	0x00017fdb
   11884:	0001802e 	.word	0x0001802e
   11888:	00018045 	.word	0x00018045
   1188c:	00018001 	.word	0x00018001
   11890:	00018016 	.word	0x00018016
   11894:	0001b82b 	.word	0x0001b82b

00011898 <register_events>:
{
   11898:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   1189c:	2700      	movs	r7, #0
{
   1189e:	4615      	mov	r5, r2
   118a0:	4604      	mov	r4, r0
	int events_registered = 0;
   118a2:	46b9      	mov	r9, r7
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   118a4:	4e6a      	ldr	r6, [pc, #424]	; (11a50 <register_events+0x1b8>)
   118a6:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 11a8c <register_events+0x1f4>
   118aa:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 11a90 <register_events+0x1f8>
{
   118ae:	9100      	str	r1, [sp, #0]
   118b0:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   118b2:	9b00      	ldr	r3, [sp, #0]
   118b4:	429f      	cmp	r7, r3
   118b6:	db03      	blt.n	118c0 <register_events+0x28>
}
   118b8:	4648      	mov	r0, r9
   118ba:	b003      	add	sp, #12
   118bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   118c0:	f04f 0320 	mov.w	r3, #32
   118c4:	f3ef 8b11 	mrs	fp, BASEPRI
   118c8:	f383 8811 	msr	BASEPRI, r3
   118cc:	f3bf 8f6f 	isb	sy
   118d0:	4630      	mov	r0, r6
   118d2:	f7ff facf 	bl	10e74 <z_spin_lock_valid>
   118d6:	b968      	cbnz	r0, 118f4 <register_events+0x5c>
   118d8:	235c      	movs	r3, #92	; 0x5c
   118da:	4642      	mov	r2, r8
   118dc:	4651      	mov	r1, sl
   118de:	485d      	ldr	r0, [pc, #372]	; (11a54 <register_events+0x1bc>)
   118e0:	f000 fb32 	bl	11f48 <printk>
   118e4:	4631      	mov	r1, r6
   118e6:	485c      	ldr	r0, [pc, #368]	; (11a58 <register_events+0x1c0>)
   118e8:	f000 fb2e 	bl	11f48 <printk>
   118ec:	215c      	movs	r1, #92	; 0x5c
   118ee:	4640      	mov	r0, r8
   118f0:	f000 fdc0 	bl	12474 <assert_post_action>
	z_spin_lock_set_owner(l);
   118f4:	4630      	mov	r0, r6
   118f6:	f7ff fad9 	bl	10eac <z_spin_lock_set_owner>
	switch (event->type) {
   118fa:	7b63      	ldrb	r3, [r4, #13]
   118fc:	f003 030f 	and.w	r3, r3, #15
   11900:	2b04      	cmp	r3, #4
   11902:	d844      	bhi.n	1198e <register_events+0xf6>
   11904:	e8df f003 	tbb	[pc, r3]
   11908:	43033d2d 	.word	0x43033d2d
   1190c:	2a          	.byte	0x2a
   1190d:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0) {
   1190e:	6923      	ldr	r3, [r4, #16]
   11910:	689b      	ldr	r3, [r3, #8]
   11912:	b333      	cbz	r3, 11962 <register_events+0xca>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   11914:	2202      	movs	r2, #2
	event->poller = NULL;
   11916:	2100      	movs	r1, #0
	event->state |= state;
   11918:	68e3      	ldr	r3, [r4, #12]
	event->poller = NULL;
   1191a:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   1191c:	f3c3 3004 	ubfx	r0, r3, #12, #5
   11920:	4302      	orrs	r2, r0
   11922:	f362 3310 	bfi	r3, r2, #12, #5
   11926:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   11928:	7029      	strb	r1, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1192a:	4630      	mov	r0, r6
   1192c:	f7ff fab0 	bl	10e90 <z_spin_unlock_valid>
   11930:	b968      	cbnz	r0, 1194e <register_events+0xb6>
   11932:	2384      	movs	r3, #132	; 0x84
   11934:	4642      	mov	r2, r8
   11936:	4949      	ldr	r1, [pc, #292]	; (11a5c <register_events+0x1c4>)
   11938:	4846      	ldr	r0, [pc, #280]	; (11a54 <register_events+0x1bc>)
   1193a:	f000 fb05 	bl	11f48 <printk>
   1193e:	4631      	mov	r1, r6
   11940:	4847      	ldr	r0, [pc, #284]	; (11a60 <register_events+0x1c8>)
   11942:	f000 fb01 	bl	11f48 <printk>
   11946:	2184      	movs	r1, #132	; 0x84
   11948:	4640      	mov	r0, r8
   1194a:	f000 fd93 	bl	12474 <assert_post_action>
	__asm__ volatile(
   1194e:	f38b 8811 	msr	BASEPRI, fp
   11952:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   11956:	3701      	adds	r7, #1
   11958:	3414      	adds	r4, #20
   1195a:	e7aa      	b.n	118b2 <register_events+0x1a>
		if (!k_queue_is_empty(event->queue)) {
   1195c:	6923      	ldr	r3, [r4, #16]
   1195e:	681b      	ldr	r3, [r3, #0]
   11960:	bb33      	cbnz	r3, 119b0 <register_events+0x118>
		} else if (!just_check && poller->is_polling) {
   11962:	9b01      	ldr	r3, [sp, #4]
   11964:	2b00      	cmp	r3, #0
   11966:	d1e0      	bne.n	1192a <register_events+0x92>
   11968:	782b      	ldrb	r3, [r5, #0]
   1196a:	2b00      	cmp	r3, #0
   1196c:	d0dd      	beq.n	1192a <register_events+0x92>
	switch (event->type) {
   1196e:	7b63      	ldrb	r3, [r4, #13]
   11970:	f003 030f 	and.w	r3, r3, #15
   11974:	2b04      	cmp	r3, #4
   11976:	d85d      	bhi.n	11a34 <register_events+0x19c>
   11978:	e8df f003 	tbb	[pc, r3]
   1197c:	5c1c4931 	.word	0x5c1c4931
   11980:	35          	.byte	0x35
   11981:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   11982:	6923      	ldr	r3, [r4, #16]
   11984:	689b      	ldr	r3, [r3, #8]
   11986:	2b00      	cmp	r3, #0
   11988:	d0eb      	beq.n	11962 <register_events+0xca>
			*state = K_POLL_STATE_SIGNALED;
   1198a:	2201      	movs	r2, #1
   1198c:	e7c3      	b.n	11916 <register_events+0x7e>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   1198e:	2350      	movs	r3, #80	; 0x50
   11990:	4a34      	ldr	r2, [pc, #208]	; (11a64 <register_events+0x1cc>)
   11992:	4935      	ldr	r1, [pc, #212]	; (11a68 <register_events+0x1d0>)
   11994:	482f      	ldr	r0, [pc, #188]	; (11a54 <register_events+0x1bc>)
   11996:	f000 fad7 	bl	11f48 <printk>
   1199a:	7b61      	ldrb	r1, [r4, #13]
   1199c:	4833      	ldr	r0, [pc, #204]	; (11a6c <register_events+0x1d4>)
   1199e:	f001 010f 	and.w	r1, r1, #15
   119a2:	f000 fad1 	bl	11f48 <printk>
   119a6:	2150      	movs	r1, #80	; 0x50
   119a8:	482e      	ldr	r0, [pc, #184]	; (11a64 <register_events+0x1cc>)
   119aa:	f000 fd63 	bl	12474 <assert_post_action>
		break;
   119ae:	e7d8      	b.n	11962 <register_events+0xca>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   119b0:	2204      	movs	r2, #4
   119b2:	e7b0      	b.n	11916 <register_events+0x7e>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   119b4:	6923      	ldr	r3, [r4, #16]
   119b6:	b963      	cbnz	r3, 119d2 <register_events+0x13a>
   119b8:	492d      	ldr	r1, [pc, #180]	; (11a70 <register_events+0x1d8>)
   119ba:	2375      	movs	r3, #117	; 0x75
   119bc:	4a29      	ldr	r2, [pc, #164]	; (11a64 <register_events+0x1cc>)
   119be:	4825      	ldr	r0, [pc, #148]	; (11a54 <register_events+0x1bc>)
   119c0:	f000 fac2 	bl	11f48 <printk>
   119c4:	482b      	ldr	r0, [pc, #172]	; (11a74 <register_events+0x1dc>)
   119c6:	f000 fabf 	bl	11f48 <printk>
   119ca:	2175      	movs	r1, #117	; 0x75
   119cc:	4825      	ldr	r0, [pc, #148]	; (11a64 <register_events+0x1cc>)
   119ce:	f000 fd51 	bl	12474 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   119d2:	462a      	mov	r2, r5
   119d4:	4621      	mov	r1, r4
   119d6:	6920      	ldr	r0, [r4, #16]
   119d8:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   119da:	f004 ff0e 	bl	167fa <add_event>
	event->poller = poller;
   119de:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
   119e0:	f109 0901 	add.w	r9, r9, #1
   119e4:	e7a1      	b.n	1192a <register_events+0x92>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   119e6:	6923      	ldr	r3, [r4, #16]
   119e8:	b963      	cbnz	r3, 11a04 <register_events+0x16c>
   119ea:	4923      	ldr	r1, [pc, #140]	; (11a78 <register_events+0x1e0>)
   119ec:	2379      	movs	r3, #121	; 0x79
   119ee:	4a1d      	ldr	r2, [pc, #116]	; (11a64 <register_events+0x1cc>)
   119f0:	4818      	ldr	r0, [pc, #96]	; (11a54 <register_events+0x1bc>)
   119f2:	f000 faa9 	bl	11f48 <printk>
   119f6:	4821      	ldr	r0, [pc, #132]	; (11a7c <register_events+0x1e4>)
   119f8:	f000 faa6 	bl	11f48 <printk>
   119fc:	2179      	movs	r1, #121	; 0x79
   119fe:	4819      	ldr	r0, [pc, #100]	; (11a64 <register_events+0x1cc>)
   11a00:	f000 fd38 	bl	12474 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   11a04:	6920      	ldr	r0, [r4, #16]
   11a06:	462a      	mov	r2, r5
   11a08:	4621      	mov	r1, r4
   11a0a:	3014      	adds	r0, #20
   11a0c:	e7e5      	b.n	119da <register_events+0x142>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   11a0e:	6923      	ldr	r3, [r4, #16]
   11a10:	b963      	cbnz	r3, 11a2c <register_events+0x194>
   11a12:	491b      	ldr	r1, [pc, #108]	; (11a80 <register_events+0x1e8>)
   11a14:	237d      	movs	r3, #125	; 0x7d
   11a16:	4a13      	ldr	r2, [pc, #76]	; (11a64 <register_events+0x1cc>)
   11a18:	480e      	ldr	r0, [pc, #56]	; (11a54 <register_events+0x1bc>)
   11a1a:	f000 fa95 	bl	11f48 <printk>
   11a1e:	4819      	ldr	r0, [pc, #100]	; (11a84 <register_events+0x1ec>)
   11a20:	f000 fa92 	bl	11f48 <printk>
   11a24:	217d      	movs	r1, #125	; 0x7d
   11a26:	480f      	ldr	r0, [pc, #60]	; (11a64 <register_events+0x1cc>)
   11a28:	f000 fd24 	bl	12474 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   11a2c:	462a      	mov	r2, r5
   11a2e:	4621      	mov	r1, r4
   11a30:	6920      	ldr	r0, [r4, #16]
   11a32:	e7d2      	b.n	119da <register_events+0x142>
		__ASSERT(false, "invalid event type\n");
   11a34:	2384      	movs	r3, #132	; 0x84
   11a36:	4a0b      	ldr	r2, [pc, #44]	; (11a64 <register_events+0x1cc>)
   11a38:	490b      	ldr	r1, [pc, #44]	; (11a68 <register_events+0x1d0>)
   11a3a:	4806      	ldr	r0, [pc, #24]	; (11a54 <register_events+0x1bc>)
   11a3c:	f000 fa84 	bl	11f48 <printk>
   11a40:	4811      	ldr	r0, [pc, #68]	; (11a88 <register_events+0x1f0>)
   11a42:	f000 fa81 	bl	11f48 <printk>
   11a46:	2184      	movs	r1, #132	; 0x84
   11a48:	4806      	ldr	r0, [pc, #24]	; (11a64 <register_events+0x1cc>)
   11a4a:	f000 fd13 	bl	12474 <assert_post_action>
		break;
   11a4e:	e7c6      	b.n	119de <register_events+0x146>
   11a50:	20001e64 	.word	0x20001e64
   11a54:	00017b50 	.word	0x00017b50
   11a58:	00018016 	.word	0x00018016
   11a5c:	0001802e 	.word	0x0001802e
   11a60:	00018045 	.word	0x00018045
   11a64:	0001ba66 	.word	0x0001ba66
   11a68:	0001b82b 	.word	0x0001b82b
   11a6c:	0001bb62 	.word	0x0001bb62
   11a70:	0001babc 	.word	0x0001babc
   11a74:	0001bad6 	.word	0x0001bad6
   11a78:	0001baeb 	.word	0x0001baeb
   11a7c:	0001bb07 	.word	0x0001bb07
   11a80:	0001bb18 	.word	0x0001bb18
   11a84:	0001bb35 	.word	0x0001bb35
   11a88:	0001bb4c 	.word	0x0001bb4c
   11a8c:	00017fdb 	.word	0x00017fdb
   11a90:	00018001 	.word	0x00018001

00011a94 <k_poll_event_init>:
{
   11a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11a96:	4605      	mov	r5, r0
   11a98:	460f      	mov	r7, r1
   11a9a:	461e      	mov	r6, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   11a9c:	4614      	mov	r4, r2
   11a9e:	b162      	cbz	r2, 11aba <k_poll_event_init+0x26>
   11aa0:	491b      	ldr	r1, [pc, #108]	; (11b10 <k_poll_event_init+0x7c>)
   11aa2:	2329      	movs	r3, #41	; 0x29
   11aa4:	4a1b      	ldr	r2, [pc, #108]	; (11b14 <k_poll_event_init+0x80>)
   11aa6:	481c      	ldr	r0, [pc, #112]	; (11b18 <k_poll_event_init+0x84>)
   11aa8:	f000 fa4e 	bl	11f48 <printk>
   11aac:	481b      	ldr	r0, [pc, #108]	; (11b1c <k_poll_event_init+0x88>)
   11aae:	f000 fa4b 	bl	11f48 <printk>
   11ab2:	2129      	movs	r1, #41	; 0x29
   11ab4:	4817      	ldr	r0, [pc, #92]	; (11b14 <k_poll_event_init+0x80>)
   11ab6:	f000 fcdd 	bl	12474 <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   11aba:	2f0f      	cmp	r7, #15
   11abc:	d90c      	bls.n	11ad8 <k_poll_event_init+0x44>
   11abe:	4918      	ldr	r1, [pc, #96]	; (11b20 <k_poll_event_init+0x8c>)
   11ac0:	232b      	movs	r3, #43	; 0x2b
   11ac2:	4a14      	ldr	r2, [pc, #80]	; (11b14 <k_poll_event_init+0x80>)
   11ac4:	4814      	ldr	r0, [pc, #80]	; (11b18 <k_poll_event_init+0x84>)
   11ac6:	f000 fa3f 	bl	11f48 <printk>
   11aca:	4816      	ldr	r0, [pc, #88]	; (11b24 <k_poll_event_init+0x90>)
   11acc:	f000 fa3c 	bl	11f48 <printk>
   11ad0:	212b      	movs	r1, #43	; 0x2b
   11ad2:	4810      	ldr	r0, [pc, #64]	; (11b14 <k_poll_event_init+0x80>)
   11ad4:	f000 fcce 	bl	12474 <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   11ad8:	b966      	cbnz	r6, 11af4 <k_poll_event_init+0x60>
   11ada:	4913      	ldr	r1, [pc, #76]	; (11b28 <k_poll_event_init+0x94>)
   11adc:	232c      	movs	r3, #44	; 0x2c
   11ade:	4a0d      	ldr	r2, [pc, #52]	; (11b14 <k_poll_event_init+0x80>)
   11ae0:	480d      	ldr	r0, [pc, #52]	; (11b18 <k_poll_event_init+0x84>)
   11ae2:	f000 fa31 	bl	11f48 <printk>
   11ae6:	4811      	ldr	r0, [pc, #68]	; (11b2c <k_poll_event_init+0x98>)
   11ae8:	f000 fa2e 	bl	11f48 <printk>
   11aec:	212c      	movs	r1, #44	; 0x2c
   11aee:	4809      	ldr	r0, [pc, #36]	; (11b14 <k_poll_event_init+0x80>)
   11af0:	f000 fcc0 	bl	12474 <assert_post_action>
	event->poller = NULL;
   11af4:	2300      	movs	r3, #0
	event->type = type;
   11af6:	0464      	lsls	r4, r4, #17
   11af8:	023f      	lsls	r7, r7, #8
	event->poller = NULL;
   11afa:	60ab      	str	r3, [r5, #8]
	event->type = type;
   11afc:	f404 3400 	and.w	r4, r4, #131072	; 0x20000
   11b00:	7b2b      	ldrb	r3, [r5, #12]
   11b02:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
   11b06:	433c      	orrs	r4, r7
   11b08:	431c      	orrs	r4, r3
	event->obj = obj;
   11b0a:	e9c5 4603 	strd	r4, r6, [r5, #12]
}
   11b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11b10:	0001bb7f 	.word	0x0001bb7f
   11b14:	0001ba66 	.word	0x0001ba66
   11b18:	00017b50 	.word	0x00017b50
   11b1c:	0001bb9f 	.word	0x0001bb9f
   11b20:	0001bbc5 	.word	0x0001bbc5
   11b24:	0001bbe9 	.word	0x0001bbe9
   11b28:	0001bbf9 	.word	0x0001bbf9
   11b2c:	0001bc0c 	.word	0x0001bc0c

00011b30 <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   11b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11b34:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   11b36:	2301      	movs	r3, #1
{
   11b38:	b088      	sub	sp, #32
	struct _poller poller = { .is_polling = true,
   11b3a:	f88d 3014 	strb.w	r3, [sp, #20]
				  .thread     = _current,
   11b3e:	4b74      	ldr	r3, [pc, #464]	; (11d10 <z_impl_k_poll+0x1e0>)
{
   11b40:	4604      	mov	r4, r0
	struct _poller poller = { .is_polling = true,
   11b42:	689b      	ldr	r3, [r3, #8]
{
   11b44:	460d      	mov	r5, r1
	struct _poller poller = { .is_polling = true,
   11b46:	9306      	str	r3, [sp, #24]
   11b48:	4b72      	ldr	r3, [pc, #456]	; (11d14 <z_impl_k_poll+0x1e4>)
{
   11b4a:	4616      	mov	r6, r2
	struct _poller poller = { .is_polling = true,
   11b4c:	9307      	str	r3, [sp, #28]
   11b4e:	f3ef 8305 	mrs	r3, IPSR
				  .cb         = k_poll_poller_cb };

	__ASSERT(!arch_is_in_isr(), "");
   11b52:	b173      	cbz	r3, 11b72 <z_impl_k_poll+0x42>
   11b54:	4970      	ldr	r1, [pc, #448]	; (11d18 <z_impl_k_poll+0x1e8>)
   11b56:	f44f 7380 	mov.w	r3, #256	; 0x100
   11b5a:	4a70      	ldr	r2, [pc, #448]	; (11d1c <z_impl_k_poll+0x1ec>)
   11b5c:	4870      	ldr	r0, [pc, #448]	; (11d20 <z_impl_k_poll+0x1f0>)
   11b5e:	f000 f9f3 	bl	11f48 <printk>
   11b62:	4870      	ldr	r0, [pc, #448]	; (11d24 <z_impl_k_poll+0x1f4>)
   11b64:	f000 f9f0 	bl	11f48 <printk>
   11b68:	f44f 7180 	mov.w	r1, #256	; 0x100
   11b6c:	486b      	ldr	r0, [pc, #428]	; (11d1c <z_impl_k_poll+0x1ec>)
   11b6e:	f000 fc81 	bl	12474 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   11b72:	b974      	cbnz	r4, 11b92 <z_impl_k_poll+0x62>
   11b74:	496c      	ldr	r1, [pc, #432]	; (11d28 <z_impl_k_poll+0x1f8>)
   11b76:	f240 1301 	movw	r3, #257	; 0x101
   11b7a:	4a68      	ldr	r2, [pc, #416]	; (11d1c <z_impl_k_poll+0x1ec>)
   11b7c:	4868      	ldr	r0, [pc, #416]	; (11d20 <z_impl_k_poll+0x1f0>)
   11b7e:	f000 f9e3 	bl	11f48 <printk>
   11b82:	486a      	ldr	r0, [pc, #424]	; (11d2c <z_impl_k_poll+0x1fc>)
   11b84:	f000 f9e0 	bl	11f48 <printk>
   11b88:	f240 1101 	movw	r1, #257	; 0x101
   11b8c:	4863      	ldr	r0, [pc, #396]	; (11d1c <z_impl_k_poll+0x1ec>)
   11b8e:	f000 fc71 	bl	12474 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   11b92:	2d00      	cmp	r5, #0
   11b94:	da0e      	bge.n	11bb4 <z_impl_k_poll+0x84>
   11b96:	4966      	ldr	r1, [pc, #408]	; (11d30 <z_impl_k_poll+0x200>)
   11b98:	f44f 7381 	mov.w	r3, #258	; 0x102
   11b9c:	4a5f      	ldr	r2, [pc, #380]	; (11d1c <z_impl_k_poll+0x1ec>)
   11b9e:	4860      	ldr	r0, [pc, #384]	; (11d20 <z_impl_k_poll+0x1f0>)
   11ba0:	f000 f9d2 	bl	11f48 <printk>
   11ba4:	4863      	ldr	r0, [pc, #396]	; (11d34 <z_impl_k_poll+0x204>)
   11ba6:	f000 f9cf 	bl	11f48 <printk>
   11baa:	f44f 7181 	mov.w	r1, #258	; 0x102
   11bae:	485b      	ldr	r0, [pc, #364]	; (11d1c <z_impl_k_poll+0x1ec>)
   11bb0:	f000 fc60 	bl	12474 <assert_post_action>

	events_registered = register_events(events, num_events, &poller,
   11bb4:	ea56 0307 	orrs.w	r3, r6, r7
   11bb8:	bf0c      	ite	eq
   11bba:	2301      	moveq	r3, #1
   11bbc:	2300      	movne	r3, #0
   11bbe:	4629      	mov	r1, r5
   11bc0:	4620      	mov	r0, r4
   11bc2:	aa05      	add	r2, sp, #20
   11bc4:	f7ff fe68 	bl	11898 <register_events>
   11bc8:	4680      	mov	r8, r0
	__asm__ volatile(
   11bca:	f04f 0320 	mov.w	r3, #32
   11bce:	f3ef 8511 	mrs	r5, BASEPRI
   11bd2:	f383 8811 	msr	BASEPRI, r3
   11bd6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11bda:	4857      	ldr	r0, [pc, #348]	; (11d38 <z_impl_k_poll+0x208>)
   11bdc:	f7ff f94a 	bl	10e74 <z_spin_lock_valid>
   11be0:	b968      	cbnz	r0, 11bfe <z_impl_k_poll+0xce>
   11be2:	235c      	movs	r3, #92	; 0x5c
   11be4:	4a55      	ldr	r2, [pc, #340]	; (11d3c <z_impl_k_poll+0x20c>)
   11be6:	4956      	ldr	r1, [pc, #344]	; (11d40 <z_impl_k_poll+0x210>)
   11be8:	484d      	ldr	r0, [pc, #308]	; (11d20 <z_impl_k_poll+0x1f0>)
   11bea:	f000 f9ad 	bl	11f48 <printk>
   11bee:	4952      	ldr	r1, [pc, #328]	; (11d38 <z_impl_k_poll+0x208>)
   11bf0:	4854      	ldr	r0, [pc, #336]	; (11d44 <z_impl_k_poll+0x214>)
   11bf2:	f000 f9a9 	bl	11f48 <printk>
   11bf6:	215c      	movs	r1, #92	; 0x5c
   11bf8:	4850      	ldr	r0, [pc, #320]	; (11d3c <z_impl_k_poll+0x20c>)
   11bfa:	f000 fc3b 	bl	12474 <assert_post_action>
	z_spin_lock_set_owner(l);
   11bfe:	484e      	ldr	r0, [pc, #312]	; (11d38 <z_impl_k_poll+0x208>)
   11c00:	f7ff f954 	bl	10eac <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   11c04:	f89d 3014 	ldrb.w	r3, [sp, #20]
   11c08:	b9fb      	cbnz	r3, 11c4a <z_impl_k_poll+0x11a>
		clear_event_registrations(events, events_registered, key);
   11c0a:	4620      	mov	r0, r4
   11c0c:	462a      	mov	r2, r5
   11c0e:	4641      	mov	r1, r8
   11c10:	f7ff fd8a 	bl	11728 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11c14:	4848      	ldr	r0, [pc, #288]	; (11d38 <z_impl_k_poll+0x208>)
   11c16:	f7ff f93b 	bl	10e90 <z_spin_unlock_valid>
   11c1a:	b968      	cbnz	r0, 11c38 <z_impl_k_poll+0x108>
   11c1c:	2384      	movs	r3, #132	; 0x84
   11c1e:	4a47      	ldr	r2, [pc, #284]	; (11d3c <z_impl_k_poll+0x20c>)
   11c20:	4949      	ldr	r1, [pc, #292]	; (11d48 <z_impl_k_poll+0x218>)
   11c22:	483f      	ldr	r0, [pc, #252]	; (11d20 <z_impl_k_poll+0x1f0>)
   11c24:	f000 f990 	bl	11f48 <printk>
   11c28:	4943      	ldr	r1, [pc, #268]	; (11d38 <z_impl_k_poll+0x208>)
   11c2a:	4848      	ldr	r0, [pc, #288]	; (11d4c <z_impl_k_poll+0x21c>)
   11c2c:	f000 f98c 	bl	11f48 <printk>
   11c30:	2184      	movs	r1, #132	; 0x84
   11c32:	4842      	ldr	r0, [pc, #264]	; (11d3c <z_impl_k_poll+0x20c>)
   11c34:	f000 fc1e 	bl	12474 <assert_post_action>
	__asm__ volatile(
   11c38:	f385 8811 	msr	BASEPRI, r5
   11c3c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		return 0;
   11c40:	2500      	movs	r5, #0
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   11c42:	4628      	mov	r0, r5
   11c44:	b008      	add	sp, #32
   11c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	poller.is_polling = false;
   11c4a:	2300      	movs	r3, #0
   11c4c:	f88d 3014 	strb.w	r3, [sp, #20]
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   11c50:	ea56 0307 	orrs.w	r3, r6, r7
   11c54:	d118      	bne.n	11c88 <z_impl_k_poll+0x158>
   11c56:	4838      	ldr	r0, [pc, #224]	; (11d38 <z_impl_k_poll+0x208>)
   11c58:	f7ff f91a 	bl	10e90 <z_spin_unlock_valid>
   11c5c:	b968      	cbnz	r0, 11c7a <z_impl_k_poll+0x14a>
   11c5e:	2384      	movs	r3, #132	; 0x84
   11c60:	4a36      	ldr	r2, [pc, #216]	; (11d3c <z_impl_k_poll+0x20c>)
   11c62:	4939      	ldr	r1, [pc, #228]	; (11d48 <z_impl_k_poll+0x218>)
   11c64:	482e      	ldr	r0, [pc, #184]	; (11d20 <z_impl_k_poll+0x1f0>)
   11c66:	f000 f96f 	bl	11f48 <printk>
   11c6a:	4933      	ldr	r1, [pc, #204]	; (11d38 <z_impl_k_poll+0x208>)
   11c6c:	4837      	ldr	r0, [pc, #220]	; (11d4c <z_impl_k_poll+0x21c>)
   11c6e:	f000 f96b 	bl	11f48 <printk>
   11c72:	2184      	movs	r1, #132	; 0x84
   11c74:	4831      	ldr	r0, [pc, #196]	; (11d3c <z_impl_k_poll+0x20c>)
   11c76:	f000 fbfd 	bl	12474 <assert_post_action>
   11c7a:	f385 8811 	msr	BASEPRI, r5
   11c7e:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   11c82:	f06f 050a 	mvn.w	r5, #10
   11c86:	e7dc      	b.n	11c42 <z_impl_k_poll+0x112>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   11c88:	4629      	mov	r1, r5
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   11c8a:	aa03      	add	r2, sp, #12
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   11c8c:	e9cd 6700 	strd	r6, r7, [sp]
   11c90:	4829      	ldr	r0, [pc, #164]	; (11d38 <z_impl_k_poll+0x208>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   11c92:	e9cd 2203 	strd	r2, r2, [sp, #12]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   11c96:	f7fe fbf5 	bl	10484 <z_pend_curr>
   11c9a:	4605      	mov	r5, r0
	__asm__ volatile(
   11c9c:	f04f 0320 	mov.w	r3, #32
   11ca0:	f3ef 8611 	mrs	r6, BASEPRI
   11ca4:	f383 8811 	msr	BASEPRI, r3
   11ca8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11cac:	4822      	ldr	r0, [pc, #136]	; (11d38 <z_impl_k_poll+0x208>)
   11cae:	f7ff f8e1 	bl	10e74 <z_spin_lock_valid>
   11cb2:	b968      	cbnz	r0, 11cd0 <z_impl_k_poll+0x1a0>
   11cb4:	235c      	movs	r3, #92	; 0x5c
   11cb6:	4a21      	ldr	r2, [pc, #132]	; (11d3c <z_impl_k_poll+0x20c>)
   11cb8:	4921      	ldr	r1, [pc, #132]	; (11d40 <z_impl_k_poll+0x210>)
   11cba:	4819      	ldr	r0, [pc, #100]	; (11d20 <z_impl_k_poll+0x1f0>)
   11cbc:	f000 f944 	bl	11f48 <printk>
   11cc0:	491d      	ldr	r1, [pc, #116]	; (11d38 <z_impl_k_poll+0x208>)
   11cc2:	4820      	ldr	r0, [pc, #128]	; (11d44 <z_impl_k_poll+0x214>)
   11cc4:	f000 f940 	bl	11f48 <printk>
   11cc8:	215c      	movs	r1, #92	; 0x5c
   11cca:	481c      	ldr	r0, [pc, #112]	; (11d3c <z_impl_k_poll+0x20c>)
   11ccc:	f000 fbd2 	bl	12474 <assert_post_action>
	z_spin_lock_set_owner(l);
   11cd0:	4819      	ldr	r0, [pc, #100]	; (11d38 <z_impl_k_poll+0x208>)
   11cd2:	f7ff f8eb 	bl	10eac <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   11cd6:	4620      	mov	r0, r4
   11cd8:	4632      	mov	r2, r6
   11cda:	4641      	mov	r1, r8
   11cdc:	f7ff fd24 	bl	11728 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11ce0:	4815      	ldr	r0, [pc, #84]	; (11d38 <z_impl_k_poll+0x208>)
   11ce2:	f7ff f8d5 	bl	10e90 <z_spin_unlock_valid>
   11ce6:	b968      	cbnz	r0, 11d04 <z_impl_k_poll+0x1d4>
   11ce8:	2384      	movs	r3, #132	; 0x84
   11cea:	4a14      	ldr	r2, [pc, #80]	; (11d3c <z_impl_k_poll+0x20c>)
   11cec:	4916      	ldr	r1, [pc, #88]	; (11d48 <z_impl_k_poll+0x218>)
   11cee:	480c      	ldr	r0, [pc, #48]	; (11d20 <z_impl_k_poll+0x1f0>)
   11cf0:	f000 f92a 	bl	11f48 <printk>
   11cf4:	4910      	ldr	r1, [pc, #64]	; (11d38 <z_impl_k_poll+0x208>)
   11cf6:	4815      	ldr	r0, [pc, #84]	; (11d4c <z_impl_k_poll+0x21c>)
   11cf8:	f000 f926 	bl	11f48 <printk>
   11cfc:	2184      	movs	r1, #132	; 0x84
   11cfe:	480f      	ldr	r0, [pc, #60]	; (11d3c <z_impl_k_poll+0x20c>)
   11d00:	f000 fbb8 	bl	12474 <assert_post_action>
	__asm__ volatile(
   11d04:	f386 8811 	msr	BASEPRI, r6
   11d08:	f3bf 8f6f 	isb	sy
	return swap_rc;
   11d0c:	e799      	b.n	11c42 <z_impl_k_poll+0x112>
   11d0e:	bf00      	nop
   11d10:	20001d84 	.word	0x20001d84
   11d14:	000116b9 	.word	0x000116b9
   11d18:	0001b761 	.word	0x0001b761
   11d1c:	0001ba66 	.word	0x0001ba66
   11d20:	00017b50 	.word	0x00017b50
   11d24:	0001af24 	.word	0x0001af24
   11d28:	0001bc26 	.word	0x0001bc26
   11d2c:	0001bc3c 	.word	0x0001bc3c
   11d30:	0001bc4b 	.word	0x0001bc4b
   11d34:	0001bc5b 	.word	0x0001bc5b
   11d38:	20001e64 	.word	0x20001e64
   11d3c:	00017fdb 	.word	0x00017fdb
   11d40:	00018001 	.word	0x00018001
   11d44:	00018016 	.word	0x00018016
   11d48:	0001802e 	.word	0x0001802e
   11d4c:	00018045 	.word	0x00018045

00011d50 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   11d50:	b570      	push	{r4, r5, r6, lr}
   11d52:	4604      	mov	r4, r0
   11d54:	460d      	mov	r5, r1
	__asm__ volatile(
   11d56:	f04f 0320 	mov.w	r3, #32
   11d5a:	f3ef 8611 	mrs	r6, BASEPRI
   11d5e:	f383 8811 	msr	BASEPRI, r3
   11d62:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11d66:	4821      	ldr	r0, [pc, #132]	; (11dec <z_impl_k_poll_signal_raise+0x9c>)
   11d68:	f7ff f884 	bl	10e74 <z_spin_lock_valid>
   11d6c:	b968      	cbnz	r0, 11d8a <z_impl_k_poll_signal_raise+0x3a>
   11d6e:	235c      	movs	r3, #92	; 0x5c
   11d70:	4a1f      	ldr	r2, [pc, #124]	; (11df0 <z_impl_k_poll_signal_raise+0xa0>)
   11d72:	4920      	ldr	r1, [pc, #128]	; (11df4 <z_impl_k_poll_signal_raise+0xa4>)
   11d74:	4820      	ldr	r0, [pc, #128]	; (11df8 <z_impl_k_poll_signal_raise+0xa8>)
   11d76:	f000 f8e7 	bl	11f48 <printk>
   11d7a:	491c      	ldr	r1, [pc, #112]	; (11dec <z_impl_k_poll_signal_raise+0x9c>)
   11d7c:	481f      	ldr	r0, [pc, #124]	; (11dfc <z_impl_k_poll_signal_raise+0xac>)
   11d7e:	f000 f8e3 	bl	11f48 <printk>
   11d82:	215c      	movs	r1, #92	; 0x5c
   11d84:	481a      	ldr	r0, [pc, #104]	; (11df0 <z_impl_k_poll_signal_raise+0xa0>)
   11d86:	f000 fb75 	bl	12474 <assert_post_action>
	z_spin_lock_set_owner(l);
   11d8a:	4818      	ldr	r0, [pc, #96]	; (11dec <z_impl_k_poll_signal_raise+0x9c>)
   11d8c:	f7ff f88e 	bl	10eac <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
	signal->signaled = 1U;
   11d90:	2101      	movs	r1, #1
	return list->head == list;
   11d92:	6820      	ldr	r0, [r4, #0]
	signal->result = result;
   11d94:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   11d96:	4284      	cmp	r4, r0
	signal->signaled = 1U;
   11d98:	60a1      	str	r1, [r4, #8]
   11d9a:	d117      	bne.n	11dcc <z_impl_k_poll_signal_raise+0x7c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11d9c:	4813      	ldr	r0, [pc, #76]	; (11dec <z_impl_k_poll_signal_raise+0x9c>)
   11d9e:	f7ff f877 	bl	10e90 <z_spin_unlock_valid>
   11da2:	b968      	cbnz	r0, 11dc0 <z_impl_k_poll_signal_raise+0x70>
   11da4:	2384      	movs	r3, #132	; 0x84
   11da6:	4a12      	ldr	r2, [pc, #72]	; (11df0 <z_impl_k_poll_signal_raise+0xa0>)
   11da8:	4915      	ldr	r1, [pc, #84]	; (11e00 <z_impl_k_poll_signal_raise+0xb0>)
   11daa:	4813      	ldr	r0, [pc, #76]	; (11df8 <z_impl_k_poll_signal_raise+0xa8>)
   11dac:	f000 f8cc 	bl	11f48 <printk>
   11db0:	490e      	ldr	r1, [pc, #56]	; (11dec <z_impl_k_poll_signal_raise+0x9c>)
   11db2:	4814      	ldr	r0, [pc, #80]	; (11e04 <z_impl_k_poll_signal_raise+0xb4>)
   11db4:	f000 f8c8 	bl	11f48 <printk>
   11db8:	2184      	movs	r1, #132	; 0x84
   11dba:	480d      	ldr	r0, [pc, #52]	; (11df0 <z_impl_k_poll_signal_raise+0xa0>)
   11dbc:	f000 fb5a 	bl	12474 <assert_post_action>
	__asm__ volatile(
   11dc0:	f386 8811 	msr	BASEPRI, r6
   11dc4:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   11dc8:	2400      	movs	r4, #0
   11dca:	e00d      	b.n	11de8 <z_impl_k_poll_signal_raise+0x98>
	node->prev->next = node->next;
   11dcc:	e9d0 3200 	ldrd	r3, r2, [r0]
   11dd0:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   11dd2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   11dd4:	2300      	movs	r3, #0
	node->prev = NULL;
   11dd6:	e9c0 3300 	strd	r3, r3, [r0]
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   11dda:	f004 fcf3 	bl	167c4 <signal_poll_event>

	z_reschedule(&lock, key);
   11dde:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   11de0:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   11de2:	4802      	ldr	r0, [pc, #8]	; (11dec <z_impl_k_poll_signal_raise+0x9c>)
   11de4:	f7fd fd64 	bl	f8b0 <z_reschedule>
	return rc;
}
   11de8:	4620      	mov	r0, r4
   11dea:	bd70      	pop	{r4, r5, r6, pc}
   11dec:	20001e64 	.word	0x20001e64
   11df0:	00017fdb 	.word	0x00017fdb
   11df4:	00018001 	.word	0x00018001
   11df8:	00017b50 	.word	0x00017b50
   11dfc:	00018016 	.word	0x00018016
   11e00:	0001802e 	.word	0x0001802e
   11e04:	00018045 	.word	0x00018045

00011e08 <z_impl_uart_irq_rx_enable>:
	if (api->irq_rx_enable) {
   11e08:	6883      	ldr	r3, [r0, #8]
   11e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11e0c:	b103      	cbz	r3, 11e10 <z_impl_uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   11e0e:	4718      	bx	r3
}
   11e10:	4770      	bx	lr

00011e12 <uart_irq_tx_disable>:
	if (api->irq_tx_disable) {
   11e12:	6883      	ldr	r3, [r0, #8]
   11e14:	6a1b      	ldr	r3, [r3, #32]
   11e16:	b103      	cbz	r3, 11e1a <uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
   11e18:	4718      	bx	r3
}
   11e1a:	4770      	bx	lr

00011e1c <u8_to_dec>:
 */

#include <sys/util.h>

u8_t u8_to_dec(char *buf, u8_t buflen, u8_t value)
{
   11e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   11e1e:	f04f 0c0a 	mov.w	ip, #10
{
   11e22:	4605      	mov	r5, r0
	while (buflen > 0 && divisor > 0) {
   11e24:	2604      	movs	r6, #4
	u8_t num_digits = 0;
   11e26:	2000      	movs	r0, #0
	u8_t divisor = 100;
   11e28:	2464      	movs	r4, #100	; 0x64
	while (buflen > 0 && divisor > 0) {
   11e2a:	b111      	cbz	r1, 11e32 <u8_to_dec+0x16>
   11e2c:	3e01      	subs	r6, #1
   11e2e:	d101      	bne.n	11e34 <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   11e30:	702e      	strb	r6, [r5, #0]
	}

	return num_digits;
}
   11e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
		digit = value / divisor;
   11e34:	fbb2 f7f4 	udiv	r7, r2, r4
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   11e38:	42a2      	cmp	r2, r4
		digit = value / divisor;
   11e3a:	b2fb      	uxtb	r3, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   11e3c:	d202      	bcs.n	11e44 <u8_to_dec+0x28>
   11e3e:	2c01      	cmp	r4, #1
   11e40:	d000      	beq.n	11e44 <u8_to_dec+0x28>
   11e42:	b130      	cbz	r0, 11e52 <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   11e44:	3330      	adds	r3, #48	; 0x30
   11e46:	f805 3b01 	strb.w	r3, [r5], #1
			buflen--;
   11e4a:	3901      	subs	r1, #1
			num_digits++;
   11e4c:	1c43      	adds	r3, r0, #1
			buflen--;
   11e4e:	b2c9      	uxtb	r1, r1
			num_digits++;
   11e50:	b2d8      	uxtb	r0, r3
		value -= digit * divisor;
   11e52:	fb04 2217 	mls	r2, r4, r7, r2
		divisor /= 10;
   11e56:	fbb4 f4fc 	udiv	r4, r4, ip
   11e5a:	b2d2      	uxtb	r2, r2
   11e5c:	e7e5      	b.n	11e2a <u8_to_dec+0xe>

00011e5e <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, u8_t *x)
{
	if (c >= '0' && c <= '9') {
   11e5e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   11e62:	b2db      	uxtb	r3, r3
   11e64:	2b09      	cmp	r3, #9
   11e66:	d802      	bhi.n	11e6e <char2hex+0x10>
		*x = c - '0';
   11e68:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   11e6a:	2000      	movs	r0, #0
   11e6c:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   11e6e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   11e72:	2b05      	cmp	r3, #5
   11e74:	d802      	bhi.n	11e7c <char2hex+0x1e>
		*x = c - 'a' + 10;
   11e76:	3857      	subs	r0, #87	; 0x57
   11e78:	7008      	strb	r0, [r1, #0]
   11e7a:	e7f6      	b.n	11e6a <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   11e7c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   11e80:	2b05      	cmp	r3, #5
   11e82:	d801      	bhi.n	11e88 <char2hex+0x2a>
		*x = c - 'A' + 10;
   11e84:	3837      	subs	r0, #55	; 0x37
   11e86:	e7f7      	b.n	11e78 <char2hex+0x1a>
		return -EINVAL;
   11e88:	f06f 0015 	mvn.w	r0, #21
}
   11e8c:	4770      	bx	lr

00011e8e <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, u8_t *buf, size_t buflen)
{
   11e8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11e90:	4604      	mov	r4, r0
	u8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   11e92:	f001 0001 	and.w	r0, r1, #1
   11e96:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   11e9a:	429d      	cmp	r5, r3
   11e9c:	ea4f 0651 	mov.w	r6, r1, lsr #1
   11ea0:	d903      	bls.n	11eaa <hex2bin+0x1c>
		return 0;
   11ea2:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   11ea4:	4628      	mov	r0, r5
   11ea6:	b003      	add	sp, #12
   11ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   11eaa:	b158      	cbz	r0, 11ec4 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   11eac:	7820      	ldrb	r0, [r4, #0]
   11eae:	f10d 0107 	add.w	r1, sp, #7
   11eb2:	f7ff ffd4 	bl	11e5e <char2hex>
   11eb6:	2800      	cmp	r0, #0
   11eb8:	dbf3      	blt.n	11ea2 <hex2bin+0x14>
		buf[0] = dec;
   11eba:	f89d 3007 	ldrb.w	r3, [sp, #7]
		hex++;
   11ebe:	3401      	adds	r4, #1
		buf[0] = dec;
   11ec0:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   11ec4:	3401      	adds	r4, #1
   11ec6:	4416      	add	r6, r2
   11ec8:	42b2      	cmp	r2, r6
   11eca:	d0eb      	beq.n	11ea4 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   11ecc:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   11ed0:	f10d 0107 	add.w	r1, sp, #7
   11ed4:	f7ff ffc3 	bl	11e5e <char2hex>
   11ed8:	2800      	cmp	r0, #0
   11eda:	dbe2      	blt.n	11ea2 <hex2bin+0x14>
		buf[i] = dec << 4;
   11edc:	f89d 3007 	ldrb.w	r3, [sp, #7]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   11ee0:	f10d 0107 	add.w	r1, sp, #7
		buf[i] = dec << 4;
   11ee4:	011b      	lsls	r3, r3, #4
   11ee6:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   11ee8:	f814 0b02 	ldrb.w	r0, [r4], #2
   11eec:	f7ff ffb7 	bl	11e5e <char2hex>
   11ef0:	2800      	cmp	r0, #0
   11ef2:	dbd6      	blt.n	11ea2 <hex2bin+0x14>
		buf[i] += dec;
   11ef4:	7813      	ldrb	r3, [r2, #0]
   11ef6:	f89d 1007 	ldrb.w	r1, [sp, #7]
   11efa:	440b      	add	r3, r1
   11efc:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   11f00:	e7e2      	b.n	11ec8 <hex2bin+0x3a>

00011f02 <arch_printk_char_out>:
}
   11f02:	2000      	movs	r0, #0
   11f04:	4770      	bx	lr

00011f06 <print_err>:
{
   11f06:	b570      	push	{r4, r5, r6, lr}
   11f08:	460d      	mov	r5, r1
   11f0a:	4604      	mov	r4, r0
	out('E', ctx);
   11f0c:	2045      	movs	r0, #69	; 0x45
   11f0e:	47a0      	blx	r4
	out('R', ctx);
   11f10:	4629      	mov	r1, r5
   11f12:	2052      	movs	r0, #82	; 0x52
   11f14:	47a0      	blx	r4
	out('R', ctx);
   11f16:	4629      	mov	r1, r5
   11f18:	4623      	mov	r3, r4
}
   11f1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   11f1e:	2052      	movs	r0, #82	; 0x52
   11f20:	4718      	bx	r3

00011f22 <str_out>:
{
   11f22:	b530      	push	{r4, r5, lr}
   11f24:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   11f26:	680c      	ldr	r4, [r1, #0]
   11f28:	1c55      	adds	r5, r2, #1
   11f2a:	b114      	cbz	r4, 11f32 <str_out+0x10>
   11f2c:	684b      	ldr	r3, [r1, #4]
   11f2e:	4293      	cmp	r3, r2
   11f30:	dc01      	bgt.n	11f36 <str_out+0x14>
		ctx->count++;
   11f32:	608d      	str	r5, [r1, #8]
}
   11f34:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   11f36:	3b01      	subs	r3, #1
   11f38:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   11f3a:	bf08      	it	eq
   11f3c:	2200      	moveq	r2, #0
   11f3e:	608d      	str	r5, [r1, #8]
   11f40:	bf0c      	ite	eq
   11f42:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   11f44:	54a0      	strbne	r0, [r4, r2]
   11f46:	e7f5      	b.n	11f34 <str_out+0x12>

00011f48 <printk>:
{
   11f48:	b40f      	push	{r0, r1, r2, r3}
   11f4a:	b507      	push	{r0, r1, r2, lr}
   11f4c:	a904      	add	r1, sp, #16
   11f4e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   11f52:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   11f54:	f7ef fa52 	bl	13fc <vprintk>
}
   11f58:	b003      	add	sp, #12
   11f5a:	f85d eb04 	ldr.w	lr, [sp], #4
   11f5e:	b004      	add	sp, #16
   11f60:	4770      	bx	lr

00011f62 <snprintk>:
{
   11f62:	b40c      	push	{r2, r3}
   11f64:	b507      	push	{r0, r1, r2, lr}
   11f66:	ab04      	add	r3, sp, #16
   11f68:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   11f6c:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   11f6e:	f7ef fa53 	bl	1418 <vsnprintk>
}
   11f72:	b003      	add	sp, #12
   11f74:	f85d eb04 	ldr.w	lr, [sp], #4
   11f78:	b002      	add	sp, #8
   11f7a:	4770      	bx	lr

00011f7c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   11f7c:	4604      	mov	r4, r0
   11f7e:	b508      	push	{r3, lr}
   11f80:	4608      	mov	r0, r1
   11f82:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   11f84:	461a      	mov	r2, r3
   11f86:	47a0      	blx	r4
	return z_impl_k_current_get();
   11f88:	f7fe fd54 	bl	10a34 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   11f8c:	f7f2 f968 	bl	4260 <z_impl_k_thread_abort>

00011f90 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   11f90:	b510      	push	{r4, lr}
   11f92:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   11f94:	f04f 33ff 	mov.w	r3, #4294967295
   11f98:	f04f 32ff 	mov.w	r2, #4294967295
   11f9c:	4620      	mov	r0, r4
   11f9e:	f7fd fb8b 	bl	f6b8 <z_impl_k_queue_get>
   11fa2:	4603      	mov	r3, r0
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   11fa4:	2800      	cmp	r0, #0
   11fa6:	d0f5      	beq.n	11f94 <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   11fa8:	6842      	ldr	r2, [r0, #4]
   11faa:	3308      	adds	r3, #8
   11fac:	e8d3 1fef 	ldaex	r1, [r3]
   11fb0:	f021 0c01 	bic.w	ip, r1, #1
   11fb4:	e8c3 cfee 	stlex	lr, ip, [r3]
   11fb8:	f1be 0f00 	cmp.w	lr, #0
   11fbc:	d1f6      	bne.n	11fac <z_work_q_main+0x1c>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   11fbe:	07cb      	lsls	r3, r1, #31
   11fc0:	d500      	bpl.n	11fc4 <z_work_q_main+0x34>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   11fc2:	4790      	blx	r2
	z_impl_k_yield();
   11fc4:	f7fe fbba 	bl	1073c <z_impl_k_yield>
   11fc8:	e7e4      	b.n	11f94 <z_work_q_main+0x4>

00011fca <chunk_field>:
}

static inline size_t chunk_field(struct z_heap *h, chunkid_t c,
				 enum chunk_fields f)
{
	void *cmem = &h->buf[c];
   11fca:	6803      	ldr	r3, [r0, #0]
   11fcc:	eb03 01c1 	add.w	r1, r3, r1, lsl #3

	if (big_heap(h)) {
   11fd0:	6883      	ldr	r3, [r0, #8]
   11fd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((u32_t *)cmem)[f];
   11fd6:	bf2c      	ite	cs
   11fd8:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((u16_t *)cmem)[f];
   11fdc:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   11fe0:	4770      	bx	lr

00011fe2 <chunk_set>:

static inline void chunk_set(struct z_heap *h, chunkid_t c,
			     enum chunk_fields f, chunkid_t val)
{
   11fe2:	b510      	push	{r4, lr}
	CHECK(c >= h->chunk0 && c < h->len);
	CHECK((val & ~((h->size_mask << 1) + 1)) == 0);
	CHECK((val & h->size_mask) < h->len);

	void *cmem = &h->buf[c];
   11fe4:	6804      	ldr	r4, [r0, #0]

	if (big_heap(h)) {
   11fe6:	6880      	ldr	r0, [r0, #8]
	void *cmem = &h->buf[c];
   11fe8:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if (big_heap(h)) {
   11fec:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((u32_t *)cmem)[f] = (u32_t) val;
   11ff0:	bf2c      	ite	cs
   11ff2:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		((u16_t *)cmem)[f] = (u16_t) val;
   11ff6:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   11ffa:	bd10      	pop	{r4, pc}

00011ffc <right_chunk>:
{
	return c - left_size(h, c);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
   11ffc:	b538      	push	{r3, r4, r5, lr}
   11ffe:	4605      	mov	r5, r0
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   12000:	2200      	movs	r2, #0
{
   12002:	460c      	mov	r4, r1
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   12004:	f7ff ffe1 	bl	11fca <chunk_field>
   12008:	68eb      	ldr	r3, [r5, #12]
   1200a:	4018      	ands	r0, r3
	return c + size(h, c);
}
   1200c:	4420      	add	r0, r4
   1200e:	bd38      	pop	{r3, r4, r5, pc}

00012010 <free_list_remove>:
	return ret;
}

static void free_list_remove(struct z_heap *h, int bidx,
			     chunkid_t c)
{
   12010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct z_heap_bucket *b = &h->buckets[bidx];
   12014:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   12018:	4616      	mov	r6, r2
	struct z_heap_bucket *b = &h->buckets[bidx];
   1201a:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
	CHECK(b->next != 0);
	CHECK(b->list_size > 0);
	CHECK((((h->avail_buckets & (1 << bidx)) == 0)
	       == (h->buckets[bidx].next == 0)));

	b->list_size--;
   1201e:	6853      	ldr	r3, [r2, #4]
{
   12020:	4604      	mov	r4, r0
	b->list_size--;
   12022:	3b01      	subs	r3, #1
{
   12024:	460d      	mov	r5, r1
	b->list_size--;
   12026:	6053      	str	r3, [r2, #4]

	if (b->list_size == 0) {
   12028:	b953      	cbnz	r3, 12040 <free_list_remove+0x30>
		h->avail_buckets &= ~(1 << bidx);
   1202a:	2201      	movs	r2, #1
   1202c:	fa02 f101 	lsl.w	r1, r2, r1
   12030:	6942      	ldr	r2, [r0, #20]
   12032:	ea22 0201 	bic.w	r2, r2, r1
   12036:	6142      	str	r2, [r0, #20]
		b->next = 0;
   12038:	f848 3035 	str.w	r3, [r8, r5, lsl #3]

		b->next = second;
		chunk_set(h, first, FREE_NEXT, second);
		chunk_set(h, second, FREE_PREV, first);
	}
}
   1203c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   12040:	4631      	mov	r1, r6
   12042:	2202      	movs	r2, #2
   12044:	f7ff ffc1 	bl	11fca <chunk_field>
	return chunk_field(h, c, FREE_NEXT);
   12048:	4631      	mov	r1, r6
	return chunk_field(h, c, FREE_PREV);
   1204a:	4607      	mov	r7, r0
	return chunk_field(h, c, FREE_NEXT);
   1204c:	2203      	movs	r2, #3
   1204e:	4620      	mov	r0, r4
   12050:	f7ff ffbb 	bl	11fca <chunk_field>
   12054:	4606      	mov	r6, r0
		chunk_set(h, first, FREE_NEXT, second);
   12056:	4603      	mov	r3, r0
   12058:	4639      	mov	r1, r7
		b->next = second;
   1205a:	f848 0035 	str.w	r0, [r8, r5, lsl #3]
		chunk_set(h, first, FREE_NEXT, second);
   1205e:	2203      	movs	r2, #3
   12060:	4620      	mov	r0, r4
   12062:	f7ff ffbe 	bl	11fe2 <chunk_set>
		chunk_set(h, second, FREE_PREV, first);
   12066:	463b      	mov	r3, r7
   12068:	4631      	mov	r1, r6
   1206a:	4620      	mov	r0, r4
}
   1206c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		chunk_set(h, second, FREE_PREV, first);
   12070:	2202      	movs	r2, #2
   12072:	f7ff bfb6 	b.w	11fe2 <chunk_set>

00012076 <free_list_add>:

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   12076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1207a:	4604      	mov	r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   1207c:	2200      	movs	r2, #0
   1207e:	460d      	mov	r5, r1
   12080:	f7ff ffa3 	bl	11fca <chunk_field>
   12084:	68e2      	ldr	r2, [r4, #12]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   12086:	68a3      	ldr	r3, [r4, #8]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   12088:	4010      	ands	r0, r2
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   1208a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
}

static int bucket_idx(struct z_heap *h, size_t sz)
{
	/* A chunk of size 2 is the minimum size on big heaps */
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   1208e:	fab0 f280 	clz	r2, r0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   12092:	bf34      	ite	cc
   12094:	2000      	movcc	r0, #0
   12096:	2001      	movcs	r0, #1
	int b = bucket_idx(h, size(h, c));

	if (h->buckets[b].list_size++ == 0) {
   12098:	6863      	ldr	r3, [r4, #4]
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   1209a:	f1c0 001f 	rsb	r0, r0, #31
   1209e:	1a80      	subs	r0, r0, r2
   120a0:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   120a4:	684a      	ldr	r2, [r1, #4]
   120a6:	1c56      	adds	r6, r2, #1
   120a8:	604e      	str	r6, [r1, #4]
   120aa:	b9a2      	cbnz	r2, 120d6 <free_list_add+0x60>
		CHECK(h->buckets[b].next == 0);
		CHECK((h->avail_buckets & (1 << b)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << b);
   120ac:	2201      	movs	r2, #1
   120ae:	fa02 f100 	lsl.w	r1, r2, r0
   120b2:	6962      	ldr	r2, [r4, #20]
   120b4:	430a      	orrs	r2, r1
   120b6:	6162      	str	r2, [r4, #20]
		h->buckets[b].next = c;
		chunk_set(h, c, FREE_PREV, c);
   120b8:	4629      	mov	r1, r5
		h->buckets[b].next = c;
   120ba:	f843 5030 	str.w	r5, [r3, r0, lsl #3]
		chunk_set(h, c, FREE_PREV, c);
   120be:	2202      	movs	r2, #2
   120c0:	462b      	mov	r3, r5
   120c2:	4620      	mov	r0, r4
   120c4:	f7ff ff8d 	bl	11fe2 <chunk_set>
		chunk_set(h, c, FREE_NEXT, c);
   120c8:	2203      	movs	r2, #3
   120ca:	4629      	mov	r1, r5
		chunkid_t first = free_prev(h, second);

		chunk_set(h, c, FREE_PREV, first);
		chunk_set(h, c, FREE_NEXT, second);
		chunk_set(h, first, FREE_NEXT, c);
		chunk_set(h, second, FREE_PREV, c);
   120cc:	4620      	mov	r0, r4
	}

	CHECK(h->avail_buckets & (1 << bucket_idx(h, size(h, c))));
}
   120ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		chunk_set(h, second, FREE_PREV, c);
   120d2:	f7ff bf86 	b.w	11fe2 <chunk_set>
		chunkid_t second = h->buckets[b].next;
   120d6:	f853 7030 	ldr.w	r7, [r3, r0, lsl #3]
	return chunk_field(h, c, FREE_PREV);
   120da:	2202      	movs	r2, #2
   120dc:	4639      	mov	r1, r7
   120de:	4620      	mov	r0, r4
   120e0:	f7ff ff73 	bl	11fca <chunk_field>
   120e4:	4606      	mov	r6, r0
		chunk_set(h, c, FREE_PREV, first);
   120e6:	4603      	mov	r3, r0
   120e8:	2202      	movs	r2, #2
   120ea:	4629      	mov	r1, r5
   120ec:	4620      	mov	r0, r4
   120ee:	f7ff ff78 	bl	11fe2 <chunk_set>
		chunk_set(h, c, FREE_NEXT, second);
   120f2:	463b      	mov	r3, r7
   120f4:	2203      	movs	r2, #3
   120f6:	4629      	mov	r1, r5
   120f8:	4620      	mov	r0, r4
   120fa:	f7ff ff72 	bl	11fe2 <chunk_set>
		chunk_set(h, first, FREE_NEXT, c);
   120fe:	2203      	movs	r2, #3
   12100:	4631      	mov	r1, r6
   12102:	462b      	mov	r3, r5
   12104:	4620      	mov	r0, r4
   12106:	f7ff ff6c 	bl	11fe2 <chunk_set>
		chunk_set(h, second, FREE_PREV, c);
   1210a:	2202      	movs	r2, #2
   1210c:	4639      	mov	r1, r7
   1210e:	e7dd      	b.n	120cc <free_list_add+0x56>

00012110 <split_alloc>:

/* Allocates (fit check has already been perfomred) from the next
 * chunk at the specified bucket level
 */
static void *split_alloc(struct z_heap *h, int bidx, size_t sz)
{
   12110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12114:	4604      	mov	r4, r0
	CHECK(h->buckets[bidx].next != 0
	      && sz <= size(h, h->buckets[bidx].next));

	chunkid_t c = h->buckets[bidx].next;
   12116:	6843      	ldr	r3, [r0, #4]
{
   12118:	4617      	mov	r7, r2
	chunkid_t c = h->buckets[bidx].next;
   1211a:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]

	free_list_remove(h, bidx, c);
   1211e:	462a      	mov	r2, r5
   12120:	f7ff ff76 	bl	12010 <free_list_remove>
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   12124:	2200      	movs	r2, #0
   12126:	4629      	mov	r1, r5
   12128:	4620      	mov	r0, r4
   1212a:	f7ff ff4e 	bl	11fca <chunk_field>
	/* Split off remainder if it's usefully large */
	size_t rem = size(h, c) - sz;

	CHECK(rem < h->len);

	if (rem >= (big_heap(h) ? 2 : 1)) {
   1212e:	68a3      	ldr	r3, [r4, #8]
   12130:	68e6      	ldr	r6, [r4, #12]
   12132:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   12136:	bf2c      	ite	cs
   12138:	2302      	movcs	r3, #2
   1213a:	2301      	movcc	r3, #1
   1213c:	4006      	ands	r6, r0
	size_t rem = size(h, c) - sz;
   1213e:	1bf6      	subs	r6, r6, r7
	if (rem >= (big_heap(h) ? 2 : 1)) {
   12140:	42b3      	cmp	r3, r6
   12142:	d82d      	bhi.n	121a0 <split_alloc+0x90>
		chunkid_t c2 = c + sz;
		chunkid_t c3 = right_chunk(h, c);
   12144:	4629      	mov	r1, r5
   12146:	4620      	mov	r0, r4
   12148:	f7ff ff58 	bl	11ffc <right_chunk>
		chunkid_t c2 = c + sz;
   1214c:	eb05 0807 	add.w	r8, r5, r7

		chunk_set(h, c, SIZE_AND_USED, sz);
   12150:	463b      	mov	r3, r7
   12152:	2200      	movs	r2, #0
   12154:	4629      	mov	r1, r5
		chunkid_t c3 = right_chunk(h, c);
   12156:	4681      	mov	r9, r0
		chunk_set(h, c, SIZE_AND_USED, sz);
   12158:	4620      	mov	r0, r4
   1215a:	f7ff ff42 	bl	11fe2 <chunk_set>
		chunk_set(h, c2, SIZE_AND_USED, rem);
   1215e:	4633      	mov	r3, r6
   12160:	2200      	movs	r2, #0
   12162:	4641      	mov	r1, r8
   12164:	4620      	mov	r0, r4
   12166:	f7ff ff3c 	bl	11fe2 <chunk_set>
		chunk_set(h, c2, LEFT_SIZE, sz);
   1216a:	463b      	mov	r3, r7
   1216c:	2201      	movs	r2, #1
   1216e:	4641      	mov	r1, r8
   12170:	4620      	mov	r0, r4
   12172:	f7ff ff36 	bl	11fe2 <chunk_set>
   12176:	2200      	movs	r2, #0
   12178:	4641      	mov	r1, r8
   1217a:	4620      	mov	r0, r4
   1217c:	f7ff ff25 	bl	11fca <chunk_field>
   12180:	68e3      	ldr	r3, [r4, #12]
		if (!last_chunk(h, c2)) {
   12182:	68a2      	ldr	r2, [r4, #8]
   12184:	4003      	ands	r3, r0
	return (c + size(h, c)) == h->len;
   12186:	4443      	add	r3, r8
		if (!last_chunk(h, c2)) {
   12188:	4293      	cmp	r3, r2
   1218a:	d005      	beq.n	12198 <split_alloc+0x88>
			chunk_set(h, c3, LEFT_SIZE, rem);
   1218c:	4633      	mov	r3, r6
   1218e:	2201      	movs	r2, #1
   12190:	4649      	mov	r1, r9
   12192:	4620      	mov	r0, r4
   12194:	f7ff ff25 	bl	11fe2 <chunk_set>
		}
		free_list_add(h, c2);
   12198:	4641      	mov	r1, r8
   1219a:	4620      	mov	r0, r4
   1219c:	f7ff ff6b 	bl	12076 <free_list_add>
   121a0:	4629      	mov	r1, r5
   121a2:	2200      	movs	r2, #0
   121a4:	4620      	mov	r0, r4
   121a6:	f7ff ff10 	bl	11fca <chunk_field>
   121aa:	68e2      	ldr	r2, [r4, #12]
	chunk_set(h, c, SIZE_AND_USED,
   121ac:	4629      	mov	r1, r5
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   121ae:	ea00 0302 	and.w	r3, r0, r2
		  size(h, c) | (used ? (h->size_mask + 1) : 0));
   121b2:	3201      	adds	r2, #1
	chunk_set(h, c, SIZE_AND_USED,
   121b4:	4620      	mov	r0, r4
   121b6:	4313      	orrs	r3, r2
   121b8:	2200      	movs	r2, #0
   121ba:	f7ff ff12 	bl	11fe2 <chunk_set>
	return big_heap(h) ? 8 : 4;
   121be:	68a3      	ldr	r3, [r4, #8]
	u8_t *ret = ((u8_t *)&h->buf[c]) + chunk_header_bytes(h);
   121c0:	6820      	ldr	r0, [r4, #0]
   121c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   121c6:	bf2c      	ite	cs
   121c8:	2308      	movcs	r3, #8
   121ca:	2304      	movcc	r3, #4
   121cc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
	}

	chunk_set_used(h, c, true);

	return chunk_mem(h, c);
}
   121d0:	4428      	add	r0, r5
   121d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000121d6 <sys_heap_free>:

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   121d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (mem == NULL) {
   121da:	2900      	cmp	r1, #0
   121dc:	f000 80ac 	beq.w	12338 <sys_heap_free+0x162>
		return; /* ISO C free() semantics */
	}

	struct z_heap *h = heap->heap;
   121e0:	6804      	ldr	r4, [r0, #0]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   121e2:	2200      	movs	r2, #0
	return big_heap(h) ? 8 : 4;
   121e4:	68a7      	ldr	r7, [r4, #8]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   121e6:	4620      	mov	r0, r4
	return big_heap(h) ? 8 : 4;
   121e8:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   121ec:	bf2c      	ite	cs
   121ee:	2508      	movcs	r5, #8
   121f0:	2504      	movcc	r5, #4
	chunkid_t c = ((u8_t *)mem - chunk_header_bytes(h)
   121f2:	1b4d      	subs	r5, r1, r5
		       - (u8_t *)h->buf) / CHUNK_UNIT;
   121f4:	6821      	ldr	r1, [r4, #0]
   121f6:	1a6d      	subs	r5, r5, r1
   121f8:	bf48      	it	mi
   121fa:	3507      	addmi	r5, #7
   121fc:	10ed      	asrs	r5, r5, #3
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   121fe:	4629      	mov	r1, r5
   12200:	f7ff fee3 	bl	11fca <chunk_field>
   12204:	68e6      	ldr	r6, [r4, #12]
   12206:	ea06 0800 	and.w	r8, r6, r0
	return (c + size(h, c)) == h->len;
   1220a:	eb05 0308 	add.w	r3, r5, r8

	/* Merge with right chunk?  We can just absorb it. */
	if (!last_chunk(h, c) && !used(h, right_chunk(h, c))) {
   1220e:	42bb      	cmp	r3, r7
   12210:	d036      	beq.n	12280 <sys_heap_free+0xaa>
   12212:	4629      	mov	r1, r5
   12214:	4620      	mov	r0, r4
   12216:	f7ff fef1 	bl	11ffc <right_chunk>
	return (chunk_field(h, c, SIZE_AND_USED) & ~h->size_mask) != 0;
   1221a:	2200      	movs	r2, #0
   1221c:	4601      	mov	r1, r0
   1221e:	4682      	mov	sl, r0
   12220:	4620      	mov	r0, r4
   12222:	f7ff fed2 	bl	11fca <chunk_field>
   12226:	ea30 0906 	bics.w	r9, r0, r6
   1222a:	d129      	bne.n	12280 <sys_heap_free+0xaa>
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   1222c:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   12230:	bf34      	ite	cc
   12232:	2700      	movcc	r7, #0
   12234:	2701      	movcs	r7, #1
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   12236:	4006      	ands	r6, r0
		chunkid_t rc = right_chunk(h, c);
		size_t newsz = size(h, c) + size(h, rc);
   12238:	44b0      	add	r8, r6
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   1223a:	fab6 f686 	clz	r6, r6
   1223e:	f1c7 071f 	rsb	r7, r7, #31

		free_list_remove(h, bucket_idx(h, size(h, rc)), rc);
   12242:	4652      	mov	r2, sl
   12244:	4620      	mov	r0, r4
   12246:	1bb9      	subs	r1, r7, r6
   12248:	f7ff fee2 	bl	12010 <free_list_remove>
		chunk_set(h, c, SIZE_AND_USED, newsz);
   1224c:	4643      	mov	r3, r8
   1224e:	464a      	mov	r2, r9
   12250:	4629      	mov	r1, r5
   12252:	4620      	mov	r0, r4
   12254:	f7ff fec5 	bl	11fe2 <chunk_set>
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   12258:	4629      	mov	r1, r5
   1225a:	4620      	mov	r0, r4
   1225c:	f7ff feb5 	bl	11fca <chunk_field>
   12260:	68e3      	ldr	r3, [r4, #12]
   12262:	4018      	ands	r0, r3
		if (!last_chunk(h, c)) {
   12264:	68a3      	ldr	r3, [r4, #8]
	return (c + size(h, c)) == h->len;
   12266:	4428      	add	r0, r5
		if (!last_chunk(h, c)) {
   12268:	4283      	cmp	r3, r0
   1226a:	d009      	beq.n	12280 <sys_heap_free+0xaa>
			chunk_set(h, right_chunk(h, c), LEFT_SIZE, newsz);
   1226c:	4629      	mov	r1, r5
   1226e:	4620      	mov	r0, r4
   12270:	f7ff fec4 	bl	11ffc <right_chunk>
   12274:	4643      	mov	r3, r8
   12276:	4601      	mov	r1, r0
   12278:	2201      	movs	r2, #1
   1227a:	4620      	mov	r0, r4
   1227c:	f7ff feb1 	bl	11fe2 <chunk_set>
		}
	}

	/* Merge with left chunk?  It absorbs us. */
	if (c != h->chunk0 && !used(h, left_chunk(h, c))) {
   12280:	6923      	ldr	r3, [r4, #16]
   12282:	42ab      	cmp	r3, r5
   12284:	d046      	beq.n	12314 <sys_heap_free+0x13e>
	return chunk_field(h, c, LEFT_SIZE);
   12286:	2201      	movs	r2, #1
   12288:	4629      	mov	r1, r5
   1228a:	4620      	mov	r0, r4
   1228c:	f7ff fe9d 	bl	11fca <chunk_field>
	return c - left_size(h, c);
   12290:	1a2f      	subs	r7, r5, r0
	return (chunk_field(h, c, SIZE_AND_USED) & ~h->size_mask) != 0;
   12292:	2200      	movs	r2, #0
   12294:	4639      	mov	r1, r7
   12296:	4620      	mov	r0, r4
   12298:	f7ff fe97 	bl	11fca <chunk_field>
   1229c:	f8d4 800c 	ldr.w	r8, [r4, #12]
   122a0:	4606      	mov	r6, r0
   122a2:	ea30 0908 	bics.w	r9, r0, r8
   122a6:	d135      	bne.n	12314 <sys_heap_free+0x13e>
   122a8:	464a      	mov	r2, r9
   122aa:	4629      	mov	r1, r5
   122ac:	4620      	mov	r0, r4
   122ae:	f7ff fe8c 	bl	11fca <chunk_field>
   122b2:	4682      	mov	sl, r0
		chunkid_t lc = left_chunk(h, c);
		chunkid_t rc = right_chunk(h, c);
   122b4:	4629      	mov	r1, r5
   122b6:	4620      	mov	r0, r4
   122b8:	f7ff fea0 	bl	11ffc <right_chunk>
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   122bc:	68a1      	ldr	r1, [r4, #8]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   122be:	ea06 0608 	and.w	r6, r6, r8
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   122c2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   122c6:	bf34      	ite	cc
   122c8:	2100      	movcc	r1, #0
   122ca:	2101      	movcs	r1, #1
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   122cc:	ea08 080a 	and.w	r8, r8, sl
		size_t csz = size(h, c);
		size_t merged_sz = csz + size(h, lc);
   122d0:	44b0      	add	r8, r6
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   122d2:	fab6 f686 	clz	r6, r6
   122d6:	f1c1 011f 	rsb	r1, r1, #31

		free_list_remove(h, bucket_idx(h, size(h, lc)), lc);
   122da:	463a      	mov	r2, r7
   122dc:	1b89      	subs	r1, r1, r6
		chunkid_t rc = right_chunk(h, c);
   122de:	4605      	mov	r5, r0
		free_list_remove(h, bucket_idx(h, size(h, lc)), lc);
   122e0:	4620      	mov	r0, r4
   122e2:	f7ff fe95 	bl	12010 <free_list_remove>
		chunk_set(h, lc, SIZE_AND_USED, merged_sz);
   122e6:	4643      	mov	r3, r8
   122e8:	464a      	mov	r2, r9
   122ea:	4639      	mov	r1, r7
   122ec:	4620      	mov	r0, r4
   122ee:	f7ff fe78 	bl	11fe2 <chunk_set>
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   122f2:	4639      	mov	r1, r7
   122f4:	4620      	mov	r0, r4
   122f6:	f7ff fe68 	bl	11fca <chunk_field>
   122fa:	68e3      	ldr	r3, [r4, #12]
   122fc:	4018      	ands	r0, r3
		if (!last_chunk(h, lc)) {
   122fe:	68a3      	ldr	r3, [r4, #8]
	return (c + size(h, c)) == h->len;
   12300:	4438      	add	r0, r7
		if (!last_chunk(h, lc)) {
   12302:	4298      	cmp	r0, r3
   12304:	d005      	beq.n	12312 <sys_heap_free+0x13c>
			chunk_set(h, rc, LEFT_SIZE, merged_sz);
   12306:	4643      	mov	r3, r8
   12308:	2201      	movs	r2, #1
   1230a:	4629      	mov	r1, r5
   1230c:	4620      	mov	r0, r4
   1230e:	f7ff fe68 	bl	11fe2 <chunk_set>
		}

		c = lc;
   12312:	463d      	mov	r5, r7
   12314:	4629      	mov	r1, r5
   12316:	2200      	movs	r2, #0
   12318:	4620      	mov	r0, r4
   1231a:	f7ff fe56 	bl	11fca <chunk_field>
   1231e:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, SIZE_AND_USED,
   12320:	4629      	mov	r1, r5
   12322:	4003      	ands	r3, r0
   12324:	2200      	movs	r2, #0
   12326:	4620      	mov	r0, r4
   12328:	f7ff fe5b 	bl	11fe2 <chunk_set>
	}

	chunk_set_used(h, c, false);
	free_list_add(h, c);
   1232c:	4629      	mov	r1, r5
   1232e:	4620      	mov	r0, r4
}
   12330:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	free_list_add(h, c);
   12334:	f7ff be9f 	b.w	12076 <free_list_add>
}
   12338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001233c <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1233c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct z_heap *h = heap->heap;
   12340:	6804      	ldr	r4, [r0, #0]
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   12342:	1dcd      	adds	r5, r1, #7
	return big_heap(h) ? 8 : 4;
   12344:	68a2      	ldr	r2, [r4, #8]
   12346:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1234a:	bf2c      	ite	cs
   1234c:	2308      	movcs	r3, #8
   1234e:	2304      	movcc	r3, #4
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   12350:	441d      	add	r5, r3
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   12352:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   12356:	ea4f 05d5 	mov.w	r5, r5, lsr #3
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   1235a:	fab5 f685 	clz	r6, r5
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   1235e:	bf34      	ite	cc
   12360:	2300      	movcc	r3, #0
   12362:	2301      	movcs	r3, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   12364:	441e      	add	r6, r3
   12366:	f1c6 081f 	rsb	r8, r6, #31
	size_t sz = bytes_to_chunksz(h, bytes);
	int bi = bucket_idx(h, sz);
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bytes == 0 || bi > bucket_idx(h, h->len)) {
   1236a:	2900      	cmp	r1, #0
   1236c:	d03b      	beq.n	123e6 <sys_heap_alloc+0xaa>
   1236e:	fab2 f282 	clz	r2, r2
   12372:	f1c3 031f 	rsb	r3, r3, #31
   12376:	1a9b      	subs	r3, r3, r2
   12378:	4598      	cmp	r8, r3
   1237a:	dc34      	bgt.n	123e6 <sys_heap_alloc+0xaa>
	struct z_heap_bucket *b = &h->buckets[bi];
   1237c:	6867      	ldr	r7, [r4, #4]
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	int loops = MIN(b->list_size, CONFIG_SYS_HEAP_ALLOC_LOOPS);

	for (int i = 0; i < loops; i++) {
   1237e:	f04f 0a00 	mov.w	sl, #0
	struct z_heap_bucket *b = &h->buckets[bi];
   12382:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
	int loops = MIN(b->list_size, CONFIG_SYS_HEAP_ALLOC_LOOPS);
   12386:	687b      	ldr	r3, [r7, #4]
   12388:	2b03      	cmp	r3, #3
   1238a:	bf28      	it	cs
   1238c:	2303      	movcs	r3, #3
   1238e:	4699      	mov	r9, r3
	for (int i = 0; i < loops; i++) {
   12390:	45ca      	cmp	sl, r9
   12392:	db0d      	blt.n	123b0 <sys_heap_alloc+0x74>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   12394:	f04f 31ff 	mov.w	r1, #4294967295
   12398:	6963      	ldr	r3, [r4, #20]
   1239a:	f1c6 0620 	rsb	r6, r6, #32
   1239e:	40b1      	lsls	r1, r6

	if ((bmask & h->avail_buckets) != 0) {
   123a0:	4019      	ands	r1, r3
   123a2:	d020      	beq.n	123e6 <sys_heap_alloc+0xaa>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);

		return split_alloc(h, minbucket, sz);
   123a4:	fa91 f1a1 	rbit	r1, r1
   123a8:	462a      	mov	r2, r5
   123aa:	fab1 f181 	clz	r1, r1
   123ae:	e00c      	b.n	123ca <sys_heap_alloc+0x8e>
		if (size(h, b->next) >= sz) {
   123b0:	f8d7 b000 	ldr.w	fp, [r7]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   123b4:	2200      	movs	r2, #0
   123b6:	4659      	mov	r1, fp
   123b8:	4620      	mov	r0, r4
   123ba:	f7ff fe06 	bl	11fca <chunk_field>
   123be:	68e3      	ldr	r3, [r4, #12]
   123c0:	4018      	ands	r0, r3
   123c2:	42a8      	cmp	r0, r5
   123c4:	d306      	bcc.n	123d4 <sys_heap_alloc+0x98>
			return split_alloc(h, bi, sz);
   123c6:	462a      	mov	r2, r5
   123c8:	4641      	mov	r1, r8
		return split_alloc(h, minbucket, sz);
   123ca:	4620      	mov	r0, r4
	}

	return NULL;
}
   123cc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return split_alloc(h, minbucket, sz);
   123d0:	f7ff be9e 	b.w	12110 <split_alloc>
	return chunk_field(h, c, FREE_NEXT);
   123d4:	2203      	movs	r2, #3
   123d6:	4659      	mov	r1, fp
   123d8:	4620      	mov	r0, r4
   123da:	f7ff fdf6 	bl	11fca <chunk_field>
	for (int i = 0; i < loops; i++) {
   123de:	f10a 0a01 	add.w	sl, sl, #1
		b->next = free_next(h, b->next);
   123e2:	6038      	str	r0, [r7, #0]
	for (int i = 0; i < loops; i++) {
   123e4:	e7d4      	b.n	12390 <sys_heap_alloc+0x54>
}
   123e6:	2000      	movs	r0, #0
   123e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000123ec <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   123ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	CHECK(bytes < 0x800000000ULL);
#endif

	/* Round the start up, the end down */
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
   123ee:	188b      	adds	r3, r1, r2

	heap->heap = (struct z_heap *)addr;
	h->buf = (u64_t *)addr;
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
	h->len = buf_sz;
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   123f0:	f647 72ff 	movw	r2, #32767	; 0x7fff
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
   123f4:	1dcc      	adds	r4, r1, #7
   123f6:	f024 0407 	bic.w	r4, r4, #7
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
   123fa:	f023 0307 	bic.w	r3, r3, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   123fe:	1b1b      	subs	r3, r3, r4
   12400:	08db      	lsrs	r3, r3, #3
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   12402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   12406:	bf2c      	ite	cs
   12408:	f06f 4100 	mvncs.w	r1, #2147483648	; 0x80000000
   1240c:	4611      	movcc	r1, r2
	heap->heap = (struct z_heap *)addr;
   1240e:	6004      	str	r4, [r0, #0]
	h->avail_buckets = 0;
   12410:	2000      	movs	r0, #0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   12412:	4293      	cmp	r3, r2
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   12414:	60e1      	str	r1, [r4, #12]
   12416:	bf94      	ite	ls
   12418:	2100      	movls	r1, #0
   1241a:	2101      	movhi	r1, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   1241c:	fab3 f683 	clz	r6, r3
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   12420:	4617      	mov	r7, r2
				* sizeof(struct z_heap_bucket));

	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);

	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
		heap->heap->buckets[i].list_size = 0;
   12422:	4684      	mov	ip, r0
	size_t buckets_bytes = ((bucket_idx(h, buf_sz) + 1)
   12424:	f1c1 0120 	rsb	r1, r1, #32
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
   12428:	f104 0518 	add.w	r5, r4, #24
	size_t buckets_bytes = ((bucket_idx(h, buf_sz) + 1)
   1242c:	1b89      	subs	r1, r1, r6
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   1242e:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
	h->len = buf_sz;
   12432:	e9c4 5301 	strd	r5, r3, [r4, #4]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
   12436:	3103      	adds	r1, #3
	h->buf = (u64_t *)addr;
   12438:	6024      	str	r4, [r4, #0]
	h->avail_buckets = 0;
   1243a:	6160      	str	r0, [r4, #20]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
   1243c:	6121      	str	r1, [r4, #16]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   1243e:	68a2      	ldr	r2, [r4, #8]
   12440:	42ba      	cmp	r2, r7
   12442:	bf94      	ite	ls
   12444:	2200      	movls	r2, #0
   12446:	2201      	movhi	r2, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   12448:	f1c2 021f 	rsb	r2, r2, #31
   1244c:	1b92      	subs	r2, r2, r6
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
   1244e:	4290      	cmp	r0, r2
   12450:	dd0a      	ble.n	12468 <sys_heap_init+0x7c>
		heap->heap->buckets[i].next = 0;
	}

	chunk_set(h, h->chunk0, SIZE_AND_USED, buf_sz - h->chunk0);
   12452:	4620      	mov	r0, r4
   12454:	1a5b      	subs	r3, r3, r1
   12456:	2200      	movs	r2, #0
   12458:	f7ff fdc3 	bl	11fe2 <chunk_set>
	free_list_add(h, h->chunk0);
   1245c:	4620      	mov	r0, r4
   1245e:	6921      	ldr	r1, [r4, #16]
}
   12460:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, h->chunk0);
   12464:	f7ff be07 	b.w	12076 <free_list_add>
		heap->heap->buckets[i].list_size = 0;
   12468:	f8c5 c004 	str.w	ip, [r5, #4]
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
   1246c:	3001      	adds	r0, #1
		heap->heap->buckets[i].next = 0;
   1246e:	f845 cb08 	str.w	ip, [r5], #8
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
   12472:	e7e4      	b.n	1243e <sys_heap_init+0x52>

00012474 <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   12474:	4040      	eors	r0, r0
   12476:	f380 8811 	msr	BASEPRI, r0
   1247a:	f04f 0004 	mov.w	r0, #4
   1247e:	df02      	svc	2
}
   12480:	4770      	bx	lr

00012482 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   12482:	4770      	bx	lr

00012484 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   12484:	f7fb bd62 	b.w	df4c <SystemInit>

00012488 <flash_write_protection_set>:
	return api->write_protection(dev, enable);
   12488:	6883      	ldr	r3, [r0, #8]
   1248a:	68db      	ldr	r3, [r3, #12]
   1248c:	4718      	bx	r3

0001248e <nvs_flash_rd>:
{
   1248e:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   12490:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   12492:	8984      	ldrh	r4, [r0, #12]
   12494:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   12496:	fa16 f181 	uxtah	r1, r6, r1
   1249a:	fb05 1104 	mla	r1, r5, r4, r1
	rc = flash_read(fs->flash_device, offset, data, len);
   1249e:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return api->read(dev, offset, data, len);
   124a0:	6884      	ldr	r4, [r0, #8]
   124a2:	6824      	ldr	r4, [r4, #0]
   124a4:	46a4      	mov	ip, r4
}
   124a6:	bc70      	pop	{r4, r5, r6}
   124a8:	4760      	bx	ip

000124aa <nvs_flash_block_cmp>:
{
   124aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   124ae:	4681      	mov	r9, r0
   124b0:	460e      	mov	r6, r1
   124b2:	4617      	mov	r7, r2
   124b4:	461c      	mov	r4, r3
	block_size = NVS_BLOCK_SIZE & ~(fs->write_block_size - 1U);
   124b6:	7c05      	ldrb	r5, [r0, #16]
{
   124b8:	b089      	sub	sp, #36	; 0x24
	block_size = NVS_BLOCK_SIZE & ~(fs->write_block_size - 1U);
   124ba:	426d      	negs	r5, r5
   124bc:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   124c0:	b91c      	cbnz	r4, 124ca <nvs_flash_block_cmp+0x20>
	return 0;
   124c2:	4620      	mov	r0, r4
}
   124c4:	b009      	add	sp, #36	; 0x24
   124c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   124ca:	42ac      	cmp	r4, r5
   124cc:	46a0      	mov	r8, r4
   124ce:	bf28      	it	cs
   124d0:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   124d2:	466a      	mov	r2, sp
   124d4:	4643      	mov	r3, r8
   124d6:	4631      	mov	r1, r6
   124d8:	4648      	mov	r0, r9
   124da:	f7ff ffd8 	bl	1248e <nvs_flash_rd>
		if (rc) {
   124de:	2800      	cmp	r0, #0
   124e0:	d1f0      	bne.n	124c4 <nvs_flash_block_cmp+0x1a>
		rc = memcmp(data8, buf, bytes_to_cmp);
   124e2:	4642      	mov	r2, r8
   124e4:	4669      	mov	r1, sp
   124e6:	4638      	mov	r0, r7
   124e8:	f001 f832 	bl	13550 <memcmp>
		if (rc) {
   124ec:	b920      	cbnz	r0, 124f8 <nvs_flash_block_cmp+0x4e>
		len -= bytes_to_cmp;
   124ee:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   124f2:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   124f4:	4447      	add	r7, r8
   124f6:	e7e3      	b.n	124c0 <nvs_flash_block_cmp+0x16>
			return 1;
   124f8:	2001      	movs	r0, #1
   124fa:	e7e3      	b.n	124c4 <nvs_flash_block_cmp+0x1a>

000124fc <nvs_ate_crc8_check>:
{
   124fc:	b510      	push	{r4, lr}
   124fe:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   12500:	4601      	mov	r1, r0
   12502:	2207      	movs	r2, #7
   12504:	20ff      	movs	r0, #255	; 0xff
   12506:	f7ee fd71 	bl	fec <crc8_ccitt>
	if (crc8 == entry->crc8) {
   1250a:	79e3      	ldrb	r3, [r4, #7]
}
   1250c:	1a18      	subs	r0, r3, r0
   1250e:	bf18      	it	ne
   12510:	2001      	movne	r0, #1
   12512:	bd10      	pop	{r4, pc}

00012514 <nvs_ate_crc8_update>:
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   12514:	4601      	mov	r1, r0
{
   12516:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   12518:	2207      	movs	r2, #7
{
   1251a:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   1251c:	20ff      	movs	r0, #255	; 0xff
   1251e:	f7ee fd65 	bl	fec <crc8_ccitt>
	entry->crc8 = crc8;
   12522:	71e0      	strb	r0, [r4, #7]
}
   12524:	bd10      	pop	{r4, pc}

00012526 <nvs_al_size.isra.0>:
static inline size_t nvs_al_size(struct nvs_fs *fs, size_t len)
   12526:	4603      	mov	r3, r0
   12528:	4608      	mov	r0, r1
	if (fs->write_block_size <= 1U) {
   1252a:	2b01      	cmp	r3, #1
	return (len + (fs->write_block_size - 1U)) & ~(fs->write_block_size - 1U);
   1252c:	bf81      	itttt	hi
   1252e:	f103 31ff 	addhi.w	r1, r3, #4294967295
   12532:	1809      	addhi	r1, r1, r0
   12534:	4258      	neghi	r0, r3
   12536:	4008      	andhi	r0, r1
}
   12538:	4770      	bx	lr

0001253a <nvs_sector_advance.isra.0>:
	*addr += (1 << ADDR_SECT_SHIFT);
   1253a:	680b      	ldr	r3, [r1, #0]
   1253c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   12540:	0c1a      	lsrs	r2, r3, #16
   12542:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   12546:	bf08      	it	eq
   12548:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   1254c:	600b      	str	r3, [r1, #0]
}
   1254e:	4770      	bx	lr

00012550 <nvs_flash_cmp_const.constprop.0>:
static int nvs_flash_cmp_const(struct nvs_fs *fs, u32_t addr, u8_t value,
   12550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	block_size = NVS_BLOCK_SIZE & ~(fs->write_block_size - 1U);
   12554:	7c05      	ldrb	r5, [r0, #16]
static int nvs_flash_cmp_const(struct nvs_fs *fs, u32_t addr, u8_t value,
   12556:	b088      	sub	sp, #32
	block_size = NVS_BLOCK_SIZE & ~(fs->write_block_size - 1U);
   12558:	426d      	negs	r5, r5
   1255a:	f005 0520 	and.w	r5, r5, #32
static int nvs_flash_cmp_const(struct nvs_fs *fs, u32_t addr, u8_t value,
   1255e:	4607      	mov	r7, r0
   12560:	460e      	mov	r6, r1
   12562:	4614      	mov	r4, r2
	(void)memset(cmp, value, block_size);
   12564:	21ff      	movs	r1, #255	; 0xff
   12566:	462a      	mov	r2, r5
   12568:	4668      	mov	r0, sp
   1256a:	f001 f82c 	bl	135c6 <memset>
	while (len) {
   1256e:	b91c      	cbnz	r4, 12578 <nvs_flash_cmp_const.constprop.0+0x28>
	return 0;
   12570:	4620      	mov	r0, r4
}
   12572:	b008      	add	sp, #32
   12574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   12578:	42a5      	cmp	r5, r4
   1257a:	46a8      	mov	r8, r5
   1257c:	bf28      	it	cs
   1257e:	46a0      	movcs	r8, r4
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   12580:	466a      	mov	r2, sp
   12582:	4643      	mov	r3, r8
   12584:	4631      	mov	r1, r6
   12586:	4638      	mov	r0, r7
   12588:	f7ff ff8f 	bl	124aa <nvs_flash_block_cmp>
		if (rc) {
   1258c:	2800      	cmp	r0, #0
   1258e:	d1f0      	bne.n	12572 <nvs_flash_cmp_const.constprop.0+0x22>
		len -= bytes_to_cmp;
   12590:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   12594:	4446      	add	r6, r8
   12596:	e7ea      	b.n	1256e <nvs_flash_cmp_const.constprop.0+0x1e>

00012598 <nvs_flash_erase_sector>:
{
   12598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	addr &= ADDR_SECT_MASK;
   1259c:	0c0e      	lsrs	r6, r1, #16
   1259e:	0436      	lsls	r6, r6, #16
	rc = nvs_flash_cmp_const(fs, addr, 0xff, fs->sector_size);
   125a0:	4631      	mov	r1, r6
   125a2:	8982      	ldrh	r2, [r0, #12]
{
   125a4:	4605      	mov	r5, r0
	rc = nvs_flash_cmp_const(fs, addr, 0xff, fs->sector_size);
   125a6:	f7ff ffd3 	bl	12550 <nvs_flash_cmp_const.constprop.0>
	if (rc <= 0) {
   125aa:	1e04      	subs	r4, r0, #0
   125ac:	dd17      	ble.n	125de <nvs_flash_erase_sector+0x46>
	rc = flash_write_protection_set(fs->flash_device, 0);
   125ae:	2100      	movs	r1, #0
   125b0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	offset = fs->offset;
   125b2:	682f      	ldr	r7, [r5, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   125b4:	f8b5 800c 	ldrh.w	r8, [r5, #12]
	rc = flash_write_protection_set(fs->flash_device, 0);
   125b8:	f7ff ff66 	bl	12488 <flash_write_protection_set>
	if (rc) {
   125bc:	4604      	mov	r4, r0
   125be:	b970      	cbnz	r0, 125de <nvs_flash_erase_sector+0x46>
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   125c0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   125c2:	89aa      	ldrh	r2, [r5, #12]
	return api->erase(dev, offset, size);
   125c4:	6883      	ldr	r3, [r0, #8]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   125c6:	0c31      	lsrs	r1, r6, #16
   125c8:	fb08 7101 	mla	r1, r8, r1, r7
   125cc:	689b      	ldr	r3, [r3, #8]
   125ce:	4798      	blx	r3
	if (rc) {
   125d0:	4604      	mov	r4, r0
   125d2:	b920      	cbnz	r0, 125de <nvs_flash_erase_sector+0x46>
	(void) flash_write_protection_set(fs->flash_device, 1);
   125d4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	return api->write_protection(dev, enable);
   125d6:	6883      	ldr	r3, [r0, #8]
   125d8:	2101      	movs	r1, #1
   125da:	68db      	ldr	r3, [r3, #12]
   125dc:	4798      	blx	r3
}
   125de:	4620      	mov	r0, r4
   125e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000125e4 <nvs_flash_al_wrt.part.0>:
static int nvs_flash_al_wrt(struct nvs_fs *fs, u32_t addr, const void *data,
   125e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   125e8:	4605      	mov	r5, r0
   125ea:	460c      	mov	r4, r1
	offset = fs->offset;
   125ec:	f8d0 a000 	ldr.w	sl, [r0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   125f0:	8987      	ldrh	r7, [r0, #12]
static int nvs_flash_al_wrt(struct nvs_fs *fs, u32_t addr, const void *data,
   125f2:	b088      	sub	sp, #32
	rc = flash_write_protection_set(fs->flash_device, 0);
   125f4:	2100      	movs	r1, #0
   125f6:	6a80      	ldr	r0, [r0, #40]	; 0x28
static int nvs_flash_al_wrt(struct nvs_fs *fs, u32_t addr, const void *data,
   125f8:	4690      	mov	r8, r2
   125fa:	461e      	mov	r6, r3
	rc = flash_write_protection_set(fs->flash_device, 0);
   125fc:	f7ff ff44 	bl	12488 <flash_write_protection_set>
	if (rc) {
   12600:	bb78      	cbnz	r0, 12662 <nvs_flash_al_wrt.part.0+0x7e>
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   12602:	ea4f 4914 	mov.w	r9, r4, lsr #16
	offset += addr & ADDR_OFFS_MASK;
   12606:	fa1a f484 	uxtah	r4, sl, r4
   1260a:	fb07 4909 	mla	r9, r7, r9, r4
	blen = len & ~(fs->write_block_size - 1U);
   1260e:	7c2f      	ldrb	r7, [r5, #16]
   12610:	427f      	negs	r7, r7
	if (blen > 0) {
   12612:	4037      	ands	r7, r6
   12614:	d00b      	beq.n	1262e <nvs_flash_al_wrt.part.0+0x4a>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   12616:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	return api->write(dev, offset, data, len);
   12618:	6883      	ldr	r3, [r0, #8]
   1261a:	4642      	mov	r2, r8
   1261c:	685c      	ldr	r4, [r3, #4]
   1261e:	4649      	mov	r1, r9
   12620:	463b      	mov	r3, r7
   12622:	47a0      	blx	r4
		if (rc) {
   12624:	4604      	mov	r4, r0
   12626:	b9b8      	cbnz	r0, 12658 <nvs_flash_al_wrt.part.0+0x74>
		len -= blen;
   12628:	1bf6      	subs	r6, r6, r7
		offset += blen;
   1262a:	44b9      	add	r9, r7
		data8 += blen;
   1262c:	44b8      	add	r8, r7
	if (len) {
   1262e:	b1de      	cbz	r6, 12668 <nvs_flash_al_wrt.part.0+0x84>
		memcpy(buf, data8, len);
   12630:	4632      	mov	r2, r6
   12632:	4641      	mov	r1, r8
   12634:	4668      	mov	r0, sp
   12636:	f000 ff9b 	bl	13570 <memcpy>
		(void)memset(buf + len, 0xff, fs->write_block_size - len);
   1263a:	7c2a      	ldrb	r2, [r5, #16]
   1263c:	21ff      	movs	r1, #255	; 0xff
   1263e:	1b92      	subs	r2, r2, r6
   12640:	eb0d 0006 	add.w	r0, sp, r6
   12644:	f000 ffbf 	bl	135c6 <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   12648:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   1264a:	7c2b      	ldrb	r3, [r5, #16]
   1264c:	6882      	ldr	r2, [r0, #8]
   1264e:	4649      	mov	r1, r9
   12650:	6854      	ldr	r4, [r2, #4]
   12652:	466a      	mov	r2, sp
   12654:	47a0      	blx	r4
   12656:	4604      	mov	r4, r0
	(void) flash_write_protection_set(fs->flash_device, 1);
   12658:	2101      	movs	r1, #1
   1265a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   1265c:	f7ff ff14 	bl	12488 <flash_write_protection_set>
	return rc;
   12660:	4620      	mov	r0, r4
}
   12662:	b008      	add	sp, #32
   12664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
end:
   12668:	4634      	mov	r4, r6
   1266a:	e7f5      	b.n	12658 <nvs_flash_al_wrt.part.0+0x74>

0001266c <nvs_flash_ate_wrt>:
{
   1266c:	b510      	push	{r4, lr}
   1266e:	460a      	mov	r2, r1
	if (!len) {
   12670:	2308      	movs	r3, #8
   12672:	6841      	ldr	r1, [r0, #4]
{
   12674:	4604      	mov	r4, r0
   12676:	f7ff ffb5 	bl	125e4 <nvs_flash_al_wrt.part.0>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   1267a:	2108      	movs	r1, #8
   1267c:	4602      	mov	r2, r0
   1267e:	7c20      	ldrb	r0, [r4, #16]
   12680:	f7ff ff51 	bl	12526 <nvs_al_size.isra.0>
   12684:	6863      	ldr	r3, [r4, #4]
   12686:	1a1b      	subs	r3, r3, r0
   12688:	6063      	str	r3, [r4, #4]
}
   1268a:	4610      	mov	r0, r2
   1268c:	bd10      	pop	{r4, pc}

0001268e <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   1268e:	2300      	movs	r3, #0
   12690:	461a      	mov	r2, r3
   12692:	f7ef b93b 	b.w	190c <nvs_write>

00012696 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, u16_t id, void *data, size_t len)
{
   12696:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   12698:	2400      	movs	r4, #0
   1269a:	9400      	str	r4, [sp, #0]
   1269c:	f7ef fa0e 	bl	1abc <nvs_read_hist>
	return rc;
}
   126a0:	b002      	add	sp, #8
   126a2:	bd10      	pop	{r4, pc}

000126a4 <get_sectors_cb>:
{
   126a4:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   126a6:	6802      	ldr	r2, [r0, #0]
   126a8:	684c      	ldr	r4, [r1, #4]
   126aa:	42a2      	cmp	r2, r4
   126ac:	d316      	bcc.n	126dc <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   126ae:	688b      	ldr	r3, [r1, #8]
   126b0:	4423      	add	r3, r4
   126b2:	429a      	cmp	r2, r3
   126b4:	d206      	bcs.n	126c4 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   126b6:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   126ba:	42ab      	cmp	r3, r5
   126bc:	d304      	bcc.n	126c8 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   126be:	f06f 030b 	mvn.w	r3, #11
   126c2:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   126c4:	2000      	movs	r0, #0
   126c6:	e00a      	b.n	126de <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   126c8:	68cd      	ldr	r5, [r1, #12]
   126ca:	1b12      	subs	r2, r2, r4
   126cc:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   126d0:	6842      	ldr	r2, [r0, #4]
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   126d2:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
	data->ret_idx++;
   126d6:	3301      	adds	r3, #1
	ret[data->ret_idx].fs_size = info->size;
   126d8:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   126da:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   126dc:	2001      	movs	r0, #1
}
   126de:	bd70      	pop	{r4, r5, r6, pc}

000126e0 <settings_load>:
	return settings_load_subtree(NULL);
   126e0:	2000      	movs	r0, #0
   126e2:	f7ef bad7 	b.w	1c94 <settings_load_subtree>

000126e6 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   126e6:	2200      	movs	r2, #0
   126e8:	4611      	mov	r1, r2
   126ea:	f7ef ba99 	b.w	1c20 <settings_save_one>

000126ee <settings_name_steq>:
{
   126ee:	4603      	mov	r3, r0
   126f0:	b530      	push	{r4, r5, lr}
   126f2:	4608      	mov	r0, r1
	if (next) {
   126f4:	b10a      	cbz	r2, 126fa <settings_name_steq+0xc>
		*next = NULL;
   126f6:	2100      	movs	r1, #0
   126f8:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   126fa:	b163      	cbz	r3, 12716 <settings_name_steq+0x28>
   126fc:	b190      	cbz	r0, 12724 <settings_name_steq+0x36>
   126fe:	1e41      	subs	r1, r0, #1
   12700:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   12702:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   12706:	4604      	mov	r4, r0
   12708:	f810 3b01 	ldrb.w	r3, [r0], #1
   1270c:	b15d      	cbz	r5, 12726 <settings_name_steq+0x38>
   1270e:	429d      	cmp	r5, r3
   12710:	d101      	bne.n	12716 <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   12712:	2d3d      	cmp	r5, #61	; 0x3d
   12714:	d1f5      	bne.n	12702 <settings_name_steq+0x14>
	return 0;
   12716:	2000      	movs	r0, #0
   12718:	e004      	b.n	12724 <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   1271a:	2b3d      	cmp	r3, #61	; 0x3d
   1271c:	d008      	beq.n	12730 <settings_name_steq+0x42>
   1271e:	fab3 f083 	clz	r0, r3
   12722:	0940      	lsrs	r0, r0, #5
}
   12724:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   12726:	2b2f      	cmp	r3, #47	; 0x2f
   12728:	d1f7      	bne.n	1271a <settings_name_steq+0x2c>
		if (next) {
   1272a:	b10a      	cbz	r2, 12730 <settings_name_steq+0x42>
			*next = name + 1;
   1272c:	3401      	adds	r4, #1
   1272e:	6014      	str	r4, [r2, #0]
		return 1;
   12730:	2001      	movs	r0, #1
   12732:	e7f7      	b.n	12724 <settings_name_steq+0x36>

00012734 <settings_name_next>:
{
   12734:	4603      	mov	r3, r0
   12736:	b530      	push	{r4, r5, lr}
	if (next) {
   12738:	b109      	cbz	r1, 1273e <settings_name_next+0xa>
		*next = NULL;
   1273a:	2200      	movs	r2, #0
   1273c:	600a      	str	r2, [r1, #0]
	if (!name) {
   1273e:	b16b      	cbz	r3, 1275c <settings_name_next+0x28>
   12740:	461a      	mov	r2, r3
   12742:	4614      	mov	r4, r2
   12744:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   12746:	f812 5b01 	ldrb.w	r5, [r2], #1
   1274a:	b135      	cbz	r5, 1275a <settings_name_next+0x26>
   1274c:	2d3d      	cmp	r5, #61	; 0x3d
   1274e:	d004      	beq.n	1275a <settings_name_next+0x26>
   12750:	2d2f      	cmp	r5, #47	; 0x2f
   12752:	d1f6      	bne.n	12742 <settings_name_next+0xe>
		if (next) {
   12754:	b109      	cbz	r1, 1275a <settings_name_next+0x26>
			*next = name + 1;
   12756:	3401      	adds	r4, #1
   12758:	600c      	str	r4, [r1, #0]
}
   1275a:	bd30      	pop	{r4, r5, pc}
		return 0;
   1275c:	4618      	mov	r0, r3
   1275e:	e7fc      	b.n	1275a <settings_name_next+0x26>

00012760 <settings_nvs_read_fn>:
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   12760:	4613      	mov	r3, r2
{
   12762:	b510      	push	{r4, lr}
   12764:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   12766:	460a      	mov	r2, r1
   12768:	8881      	ldrh	r1, [r0, #4]
   1276a:	6800      	ldr	r0, [r0, #0]
   1276c:	f7ff ff93 	bl	12696 <nvs_read>
}
   12770:	42a0      	cmp	r0, r4
   12772:	bfa8      	it	ge
   12774:	4620      	movge	r0, r4
   12776:	bd10      	pop	{r4, pc}

00012778 <settings_nvs_save>:
{
   12778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1277c:	b097      	sub	sp, #92	; 0x5c
   1277e:	4604      	mov	r4, r0
   12780:	469b      	mov	fp, r3
	if (!name) {
   12782:	4689      	mov	r9, r1
{
   12784:	9201      	str	r2, [sp, #4]
	if (!name) {
   12786:	2900      	cmp	r1, #0
   12788:	d066      	beq.n	12858 <settings_nvs_save+0xe0>
	delete = ((value == NULL) || (val_len == 0));
   1278a:	b1da      	cbz	r2, 127c4 <settings_nvs_save+0x4c>
   1278c:	fabb f78b 	clz	r7, fp
   12790:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   12792:	8ea5      	ldrh	r5, [r4, #52]	; 0x34
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   12794:	f104 0a08 	add.w	sl, r4, #8
	name_id = cf->last_name_id + 1;
   12798:	3501      	adds	r5, #1
   1279a:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   1279c:	46a8      	mov	r8, r5
		name_id--;
   1279e:	1e6e      	subs	r6, r5, #1
   127a0:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   127a2:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   127a6:	d02d      	beq.n	12804 <settings_nvs_save+0x8c>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   127a8:	234a      	movs	r3, #74	; 0x4a
   127aa:	4631      	mov	r1, r6
   127ac:	4650      	mov	r0, sl
   127ae:	aa03      	add	r2, sp, #12
   127b0:	f7ff ff71 	bl	12696 <nvs_read>
		if (rc < 0) {
   127b4:	2800      	cmp	r0, #0
   127b6:	da07      	bge.n	127c8 <settings_nvs_save+0x50>
			if (rc == -ENOENT) {
   127b8:	f110 0f02 	cmn.w	r0, #2
   127bc:	bf08      	it	eq
   127be:	46b0      	moveq	r8, r6
   127c0:	4635      	mov	r5, r6
   127c2:	e7ec      	b.n	1279e <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   127c4:	2701      	movs	r7, #1
   127c6:	e7e4      	b.n	12792 <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   127c8:	ab16      	add	r3, sp, #88	; 0x58
   127ca:	4418      	add	r0, r3
   127cc:	2300      	movs	r3, #0
		if (strcmp(name, rdname)) {
   127ce:	a903      	add	r1, sp, #12
		rdname[rc] = '\0';
   127d0:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   127d4:	4648      	mov	r0, r9
   127d6:	f000 fea0 	bl	1351a <strcmp>
   127da:	2800      	cmp	r0, #0
   127dc:	d1f0      	bne.n	127c0 <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   127de:	b3cf      	cbz	r7, 12854 <settings_nvs_save+0xdc>
   127e0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   127e2:	42b3      	cmp	r3, r6
   127e4:	d140      	bne.n	12868 <settings_nvs_save+0xf0>
			cf->last_name_id--;
   127e6:	4622      	mov	r2, r4
   127e8:	1e73      	subs	r3, r6, #1
   127ea:	f822 3f34 	strh.w	r3, [r2, #52]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   127ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   127f2:	2302      	movs	r3, #2
   127f4:	4650      	mov	r0, sl
   127f6:	f7ef f889 	bl	190c <nvs_write>
			if (rc < 0) {
   127fa:	2800      	cmp	r0, #0
   127fc:	da34      	bge.n	12868 <settings_nvs_save+0xf0>
}
   127fe:	b017      	add	sp, #92	; 0x5c
   12800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   12804:	bb5f      	cbnz	r7, 1285e <settings_nvs_save+0xe6>
	write_name = true;
   12806:	2701      	movs	r7, #1
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   12808:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   1280c:	d029      	beq.n	12862 <settings_nvs_save+0xea>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   1280e:	f104 0508 	add.w	r5, r4, #8
   12812:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   12816:	465b      	mov	r3, fp
   12818:	4628      	mov	r0, r5
   1281a:	9a01      	ldr	r2, [sp, #4]
   1281c:	b289      	uxth	r1, r1
   1281e:	f7ef f875 	bl	190c <nvs_write>
	if (write_name) {
   12822:	b157      	cbz	r7, 1283a <settings_nvs_save+0xc2>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   12824:	4648      	mov	r0, r9
   12826:	f000 fe71 	bl	1350c <strlen>
   1282a:	464a      	mov	r2, r9
   1282c:	4603      	mov	r3, r0
   1282e:	4641      	mov	r1, r8
   12830:	4628      	mov	r0, r5
   12832:	f7ef f86b 	bl	190c <nvs_write>
		if (rc < 0) {
   12836:	2800      	cmp	r0, #0
   12838:	dbe1      	blt.n	127fe <settings_nvs_save+0x86>
	if (write_name_id > cf->last_name_id) {
   1283a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   1283c:	4543      	cmp	r3, r8
   1283e:	d220      	bcs.n	12882 <settings_nvs_save+0x10a>
		cf->last_name_id = write_name_id;
   12840:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   12842:	2302      	movs	r3, #2
   12844:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   12848:	4628      	mov	r0, r5
		cf->last_name_id = write_name_id;
   1284a:	f822 8f34 	strh.w	r8, [r2, #52]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   1284e:	f7ef f85d 	bl	190c <nvs_write>
   12852:	e016      	b.n	12882 <settings_nvs_save+0x10a>
   12854:	46b0      	mov	r8, r6
   12856:	e7d7      	b.n	12808 <settings_nvs_save+0x90>
		return -EINVAL;
   12858:	f06f 0015 	mvn.w	r0, #21
   1285c:	e7cf      	b.n	127fe <settings_nvs_save+0x86>
		return 0;
   1285e:	2000      	movs	r0, #0
   12860:	e7cd      	b.n	127fe <settings_nvs_save+0x86>
		return -ENOMEM;
   12862:	f06f 000b 	mvn.w	r0, #11
   12866:	e7ca      	b.n	127fe <settings_nvs_save+0x86>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   12868:	4631      	mov	r1, r6
   1286a:	4650      	mov	r0, sl
   1286c:	f7ff ff0f 	bl	1268e <nvs_delete>
			if (rc >= 0) {
   12870:	2800      	cmp	r0, #0
   12872:	dbc4      	blt.n	127fe <settings_nvs_save+0x86>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   12874:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   12878:	313f      	adds	r1, #63	; 0x3f
   1287a:	4650      	mov	r0, sl
   1287c:	b289      	uxth	r1, r1
   1287e:	f7ff ff06 	bl	1268e <nvs_delete>
	if (rc < 0) {
   12882:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   12886:	e7ba      	b.n	127fe <settings_nvs_save+0x86>

00012888 <settings_nvs_backend_init>:
{
   12888:	b573      	push	{r0, r1, r4, r5, r6, lr}
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   1288a:	f100 0608 	add.w	r6, r0, #8
   1288e:	6b81      	ldr	r1, [r0, #56]	; 0x38
{
   12890:	4604      	mov	r4, r0
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   12892:	4630      	mov	r0, r6
   12894:	f7ee ff18 	bl	16c8 <nvs_init>
	if (rc) {
   12898:	4605      	mov	r5, r0
   1289a:	b970      	cbnz	r0, 128ba <settings_nvs_backend_init+0x32>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   1289c:	2302      	movs	r3, #2
   1289e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   128a2:	4630      	mov	r0, r6
   128a4:	f10d 0206 	add.w	r2, sp, #6
   128a8:	f7ff fef5 	bl	12696 <nvs_read>
	if (rc < 0) {
   128ac:	2800      	cmp	r0, #0
		cf->last_name_id = NVS_NAMECNT_ID;
   128ae:	bfb4      	ite	lt
   128b0:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
		cf->last_name_id = last_name_id;
   128b4:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
   128b8:	86a3      	strh	r3, [r4, #52]	; 0x34
}
   128ba:	4628      	mov	r0, r5
   128bc:	b002      	add	sp, #8
   128be:	bd70      	pop	{r4, r5, r6, pc}

000128c0 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   128c0:	2200      	movs	r2, #0
   128c2:	f7ef bc3b 	b.w	213c <clock_async_start>

000128c6 <clk_init>:
{
   128c6:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   128c8:	2200      	movs	r2, #0
{
   128ca:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   128cc:	2101      	movs	r1, #1
   128ce:	2005      	movs	r0, #5
   128d0:	f7f1 f994 	bl	3bfc <z_arm_irq_priority_set>
	irq_enable(DT_INST_IRQN(0));
   128d4:	2005      	movs	r0, #5
   128d6:	f7f1 f981 	bl	3bdc <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
   128da:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   128de:	2202      	movs	r2, #2
   128e0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
   128e4:	2203      	movs	r2, #3
	list->head = NULL;
   128e6:	2000      	movs	r0, #0
   128e8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		sys_slist_init(&(get_sub_data(dev, i)->list));
   128ec:	68e3      	ldr	r3, [r4, #12]
	list->tail = NULL;
   128ee:	e9c3 0000 	strd	r0, r0, [r3]
   128f2:	68e3      	ldr	r3, [r4, #12]
   128f4:	e9c3 0003 	strd	r0, r0, [r3, #12]
}
   128f8:	bd10      	pop	{r4, pc}

000128fa <bt_rpmsg_open>:
	return bt_rpmsg_platform_init();
   128fa:	f7ef be4b 	b.w	2594 <bt_rpmsg_platform_init>

000128fe <virtio_get_status>:
}
   128fe:	2004      	movs	r0, #4
   12900:	4770      	bx	lr

00012902 <virtio_get_features>:
}
   12902:	2001      	movs	r0, #1
   12904:	4770      	bx	lr

00012906 <virtio_set_features>:
}
   12906:	4770      	bx	lr

00012908 <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   12908:	f003 bd12 	b.w	16330 <rpmsg_destroy_ept>

0001290c <endpoint_cb>:
{
   1290c:	b508      	push	{r3, lr}
   1290e:	4608      	mov	r0, r1
	bt_rpmsg_rx(data, len);
   12910:	4611      	mov	r1, r2
   12912:	f7ef fd5f 	bl	23d4 <bt_rpmsg_rx>
}
   12916:	2000      	movs	r0, #0
   12918:	bd08      	pop	{r3, pc}

0001291a <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   1291a:	4770      	bx	lr

0001291c <attr_find_by_handle>:
{
   1291c:	b570      	push	{r4, r5, r6, lr}
   1291e:	4604      	mov	r4, r0
	if (!dm->cur_attr_id) {
   12920:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   12924:	b1a8      	cbz	r0, 12952 <attr_find_by_handle+0x36>
	ssize_t lower = 0;
   12926:	2600      	movs	r6, #0
	ssize_t upper = dm->cur_attr_id - 1;
   12928:	3801      	subs	r0, #1
	while (upper >= lower) {
   1292a:	4286      	cmp	r6, r0
   1292c:	dd01      	ble.n	12932 <attr_find_by_handle+0x16>
		return NULL;
   1292e:	2000      	movs	r0, #0
   12930:	e00f      	b.n	12952 <attr_find_by_handle+0x36>
		size_t m = (lower + upper) / 2;
   12932:	1832      	adds	r2, r6, r0
   12934:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   12938:	1052      	asrs	r2, r2, #1
		if (cur_attr->handle < handle) {
   1293a:	1cd5      	adds	r5, r2, #3
   1293c:	00eb      	lsls	r3, r5, #3
   1293e:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
   12942:	892d      	ldrh	r5, [r5, #8]
   12944:	428d      	cmp	r5, r1
   12946:	d201      	bcs.n	1294c <attr_find_by_handle+0x30>
			lower = m + 1;
   12948:	1c56      	adds	r6, r2, #1
   1294a:	e7ee      	b.n	1292a <attr_find_by_handle+0xe>
		} else if (cur_attr->handle > handle) {
   1294c:	d802      	bhi.n	12954 <attr_find_by_handle+0x38>
		struct bt_gatt_dm_attr *cur_attr = &dm->attrs[m];
   1294e:	3304      	adds	r3, #4
   12950:	18e0      	adds	r0, r4, r3
}
   12952:	bd70      	pop	{r4, r5, r6, pc}
			upper = m - 1;
   12954:	1e50      	subs	r0, r2, #1
   12956:	e7e8      	b.n	1292a <attr_find_by_handle+0xe>

00012958 <svc_attr_memory_release>:
	dm->cur_attr_id = 0;
   12958:	2300      	movs	r3, #0
{
   1295a:	b510      	push	{r4, lr}
   1295c:	4604      	mov	r4, r0
	dm->cur_attr_id = 0;
   1295e:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
Z_GENLIST_IS_EMPTY(slist)
   12962:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
	while (!sys_slist_is_empty(&dm->chunk_list)) {
   12966:	b910      	cbnz	r0, 1296e <svc_attr_memory_release+0x16>
	dm->cur_chunk_len = 0;
   12968:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
}
   1296c:	bd10      	pop	{r4, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1296e:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
   12972:	6803      	ldr	r3, [r0, #0]
   12974:	4290      	cmp	r0, r2
	list->head = node;
   12976:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
	list->tail = node;
   1297a:	bf08      	it	eq
   1297c:	f8c4 3140 	streq.w	r3, [r4, #320]	; 0x140
		k_free(item);
   12980:	f003 fe0c 	bl	1659c <k_free>
   12984:	e7ed      	b.n	12962 <svc_attr_memory_release+0xa>

00012986 <atomic_and>:
{
   12986:	4603      	mov	r3, r0
}
   12988:	e8d3 0fef 	ldaex	r0, [r3]
   1298c:	ea00 0201 	and.w	r2, r0, r1
   12990:	e8c3 2fec 	stlex	ip, r2, [r3]
   12994:	f1bc 0f00 	cmp.w	ip, #0
   12998:	d1f6      	bne.n	12988 <atomic_and+0x2>
   1299a:	4770      	bx	lr

0001299c <discovery_complete_not_found>:
{
   1299c:	b510      	push	{r4, lr}
   1299e:	4604      	mov	r4, r0
	svc_attr_memory_release(dm);
   129a0:	f7ff ffda 	bl	12958 <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   129a4:	f06f 0101 	mvn.w	r1, #1
   129a8:	f504 709c 	add.w	r0, r4, #312	; 0x138
   129ac:	f7ff ffeb 	bl	12986 <atomic_and>
	if (dm->callback->service_not_found) {
   129b0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   129b4:	685b      	ldr	r3, [r3, #4]
   129b6:	b123      	cbz	r3, 129c2 <discovery_complete_not_found+0x26>
		dm->callback->service_not_found(dm->conn, dm->context);
   129b8:	e9d4 0100 	ldrd	r0, r1, [r4]
}
   129bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		dm->callback->service_not_found(dm->conn, dm->context);
   129c0:	4718      	bx	r3
}
   129c2:	bd10      	pop	{r4, pc}

000129c4 <bt_gatt_dm_attr_service_val>:
{
   129c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   129c6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   129ca:	2400      	movs	r4, #0
{
   129cc:	4605      	mov	r5, r0
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   129ce:	6801      	ldr	r1, [r0, #0]
   129d0:	4668      	mov	r0, sp
   129d2:	f88d 4000 	strb.w	r4, [sp]
   129d6:	f8ad 3002 	strh.w	r3, [sp, #2]
   129da:	f000 fe64 	bl	136a6 <bt_uuid_cmp>
   129de:	b918      	cbnz	r0, 129e8 <bt_gatt_dm_attr_service_val+0x24>
		return &((struct bt_gatt_service_val *)attr->uuid)[-1];
   129e0:	6828      	ldr	r0, [r5, #0]
   129e2:	3808      	subs	r0, #8
}
   129e4:	b003      	add	sp, #12
   129e6:	bd30      	pop	{r4, r5, pc}
	    (!bt_uuid_cmp(BT_UUID_GATT_SECONDARY, attr->uuid))) {
   129e8:	f642 0301 	movw	r3, #10241	; 0x2801
   129ec:	6829      	ldr	r1, [r5, #0]
   129ee:	a801      	add	r0, sp, #4
   129f0:	f88d 4004 	strb.w	r4, [sp, #4]
   129f4:	f8ad 3006 	strh.w	r3, [sp, #6]
   129f8:	f000 fe55 	bl	136a6 <bt_uuid_cmp>
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   129fc:	2800      	cmp	r0, #0
   129fe:	d0ef      	beq.n	129e0 <bt_gatt_dm_attr_service_val+0x1c>
	return NULL;
   12a00:	4620      	mov	r0, r4
   12a02:	e7ef      	b.n	129e4 <bt_gatt_dm_attr_service_val+0x20>

00012a04 <bt_gatt_dm_attr_chrc_val>:
{
   12a04:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   12a06:	f642 0303 	movw	r3, #10243	; 0x2803
   12a0a:	2400      	movs	r4, #0
{
   12a0c:	4605      	mov	r5, r0
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   12a0e:	6801      	ldr	r1, [r0, #0]
   12a10:	a801      	add	r0, sp, #4
   12a12:	f88d 4004 	strb.w	r4, [sp, #4]
   12a16:	f8ad 3006 	strh.w	r3, [sp, #6]
   12a1a:	f000 fe44 	bl	136a6 <bt_uuid_cmp>
   12a1e:	b918      	cbnz	r0, 12a28 <bt_gatt_dm_attr_chrc_val+0x24>
		return &((struct bt_gatt_chrc *)attr->uuid)[-1];
   12a20:	6828      	ldr	r0, [r5, #0]
   12a22:	3808      	subs	r0, #8
}
   12a24:	b003      	add	sp, #12
   12a26:	bd30      	pop	{r4, r5, pc}
	return NULL;
   12a28:	4620      	mov	r0, r4
   12a2a:	e7fb      	b.n	12a24 <bt_gatt_dm_attr_chrc_val+0x20>

00012a2c <bt_gatt_dm_conn_get>:
}
   12a2c:	6800      	ldr	r0, [r0, #0]
   12a2e:	4770      	bx	lr

00012a30 <bt_gatt_dm_service_get>:
}
   12a30:	301c      	adds	r0, #28
   12a32:	4770      	bx	lr

00012a34 <bt_gatt_dm_char_next>:
{
   12a34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12a36:	f100 051c 	add.w	r5, r0, #28
	if (!prev) {
   12a3a:	b131      	cbz	r1, 12a4a <bt_gatt_dm_char_next+0x16>
	if (dm->attrs <= prev) {
   12a3c:	42a9      	cmp	r1, r5
   12a3e:	d203      	bcs.n	12a48 <bt_gatt_dm_char_next+0x14>
	return NULL;
   12a40:	2500      	movs	r5, #0
}
   12a42:	4628      	mov	r0, r5
   12a44:	b003      	add	sp, #12
   12a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12a48:	460d      	mov	r5, r1
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   12a4a:	2600      	movs	r6, #0
   12a4c:	f642 0703 	movw	r7, #10243	; 0x2803
		const struct bt_gatt_dm_attr *const end =
   12a50:	f8d0 4134 	ldr.w	r4, [r0, #308]	; 0x134
   12a54:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   12a58:	f100 041c 	add.w	r4, r0, #28
		while (++prev < end) {
   12a5c:	3508      	adds	r5, #8
   12a5e:	42ac      	cmp	r4, r5
   12a60:	d9ee      	bls.n	12a40 <bt_gatt_dm_char_next+0xc>
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   12a62:	6829      	ldr	r1, [r5, #0]
   12a64:	a801      	add	r0, sp, #4
   12a66:	f88d 6004 	strb.w	r6, [sp, #4]
   12a6a:	f8ad 7006 	strh.w	r7, [sp, #6]
   12a6e:	f000 fe1a 	bl	136a6 <bt_uuid_cmp>
   12a72:	2800      	cmp	r0, #0
   12a74:	d1f2      	bne.n	12a5c <bt_gatt_dm_char_next+0x28>
   12a76:	e7e4      	b.n	12a42 <bt_gatt_dm_char_next+0xe>

00012a78 <bt_gatt_dm_attr_next>:
{
   12a78:	4602      	mov	r2, r0
   12a7a:	f100 031c 	add.w	r3, r0, #28
	if (!prev) {
   12a7e:	b111      	cbz	r1, 12a86 <bt_gatt_dm_attr_next+0xe>
	if (dm->attrs <= prev) {
   12a80:	4299      	cmp	r1, r3
   12a82:	d30b      	bcc.n	12a9c <bt_gatt_dm_attr_next+0x24>
   12a84:	460b      	mov	r3, r1
		if (++prev < end) {
   12a86:	f103 0008 	add.w	r0, r3, #8
		const struct bt_gatt_dm_attr *const end =
   12a8a:	f8d2 3134 	ldr.w	r3, [r2, #308]	; 0x134
   12a8e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   12a92:	321c      	adds	r2, #28
	return NULL;
   12a94:	4290      	cmp	r0, r2
   12a96:	bf28      	it	cs
   12a98:	2000      	movcs	r0, #0
   12a9a:	4770      	bx	lr
   12a9c:	2000      	movs	r0, #0
}
   12a9e:	4770      	bx	lr

00012aa0 <bt_gatt_dm_desc_next>:
{
   12aa0:	b513      	push	{r0, r1, r4, lr}
	const struct bt_gatt_dm_attr *curr = bt_gatt_dm_attr_next(dm, prev);
   12aa2:	f7ff ffe9 	bl	12a78 <bt_gatt_dm_attr_next>
	if (curr && !bt_uuid_cmp(BT_UUID_GATT_CHRC, curr->uuid)) {
   12aa6:	4604      	mov	r4, r0
   12aa8:	b158      	cbz	r0, 12ac2 <bt_gatt_dm_desc_next+0x22>
   12aaa:	2300      	movs	r3, #0
   12aac:	f88d 3004 	strb.w	r3, [sp, #4]
   12ab0:	f642 0303 	movw	r3, #10243	; 0x2803
   12ab4:	6801      	ldr	r1, [r0, #0]
   12ab6:	a801      	add	r0, sp, #4
   12ab8:	f8ad 3006 	strh.w	r3, [sp, #6]
   12abc:	f000 fdf3 	bl	136a6 <bt_uuid_cmp>
   12ac0:	b900      	cbnz	r0, 12ac4 <bt_gatt_dm_desc_next+0x24>
		curr = NULL;
   12ac2:	2400      	movs	r4, #0
}
   12ac4:	4620      	mov	r0, r4
   12ac6:	b002      	add	sp, #8
   12ac8:	bd10      	pop	{r4, pc}

00012aca <bt_gatt_dm_desc_by_uuid>:
{
   12aca:	b570      	push	{r4, r5, r6, lr}
   12acc:	4605      	mov	r5, r0
   12ace:	4616      	mov	r6, r2
	const struct bt_gatt_dm_attr *curr = attr_chrc;
   12ad0:	460c      	mov	r4, r1
	while ((curr = bt_gatt_dm_desc_next(dm, curr)) != NULL) {
   12ad2:	4621      	mov	r1, r4
   12ad4:	4628      	mov	r0, r5
   12ad6:	f7ff ffe3 	bl	12aa0 <bt_gatt_dm_desc_next>
   12ada:	4604      	mov	r4, r0
   12adc:	b128      	cbz	r0, 12aea <bt_gatt_dm_desc_by_uuid+0x20>
		if (!bt_uuid_cmp(uuid, curr->uuid)) {
   12ade:	4630      	mov	r0, r6
   12ae0:	6821      	ldr	r1, [r4, #0]
   12ae2:	f000 fde0 	bl	136a6 <bt_uuid_cmp>
   12ae6:	2800      	cmp	r0, #0
   12ae8:	d1f3      	bne.n	12ad2 <bt_gatt_dm_desc_by_uuid+0x8>
}
   12aea:	4620      	mov	r0, r4
   12aec:	bd70      	pop	{r4, r5, r6, pc}

00012aee <bt_gatt_dm_data_release>:

	return err;
}

int bt_gatt_dm_data_release(struct bt_gatt_dm *dm)
{
   12aee:	b510      	push	{r4, lr}
	if (!atomic_test_and_clear_bit(dm->state_flags,
   12af0:	f500 749c 	add.w	r4, r0, #312	; 0x138
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12af4:	e8d4 3fef 	ldaex	r3, [r4]
   12af8:	f023 0202 	bic.w	r2, r3, #2
   12afc:	e8c4 2fe1 	stlex	r1, r2, [r4]
   12b00:	2900      	cmp	r1, #0
   12b02:	d1f7      	bne.n	12af4 <bt_gatt_dm_data_release+0x6>
   12b04:	079b      	lsls	r3, r3, #30
   12b06:	d508      	bpl.n	12b1a <bt_gatt_dm_data_release+0x2c>
				       STATE_ATTRS_RELEASE_PENDING)) {
		return -EALREADY;
	}

	svc_attr_memory_release(dm);
   12b08:	f7ff ff26 	bl	12958 <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12b0c:	f06f 0101 	mvn.w	r1, #1
   12b10:	4620      	mov	r0, r4
   12b12:	f7ff ff38 	bl	12986 <atomic_and>
	atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);

	return 0;
   12b16:	2000      	movs	r0, #0
}
   12b18:	bd10      	pop	{r4, pc}
		return -EALREADY;
   12b1a:	f06f 0044 	mvn.w	r0, #68	; 0x44
   12b1e:	e7fb      	b.n	12b18 <bt_gatt_dm_data_release+0x2a>

00012b20 <bt_scan_stop>:
	return bt_le_scan_stop();
   12b20:	f7f3 be7a 	b.w	6818 <bt_le_scan_stop>

00012b24 <on_sent>:
{
   12b24:	4613      	mov	r3, r2
   12b26:	4608      	mov	r0, r1
	data = params->data;
   12b28:	6891      	ldr	r1, [r2, #8]
	length = params->length;
   12b2a:	8992      	ldrh	r2, [r2, #12]
{
   12b2c:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12b2e:	f1a3 0420 	sub.w	r4, r3, #32
   12b32:	e8d4 cfef 	ldaex	ip, [r4]
   12b36:	f02c 0c04 	bic.w	ip, ip, #4
   12b3a:	e8c4 cfee 	stlex	lr, ip, [r4]
   12b3e:	f1be 0f00 	cmp.w	lr, #0
   12b42:	d1f6      	bne.n	12b32 <on_sent+0xe>
	if (nus_c->cbs.data_sent) {
   12b44:	695b      	ldr	r3, [r3, #20]
   12b46:	b113      	cbz	r3, 12b4e <on_sent+0x2a>
}
   12b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		nus_c->cbs.data_sent(err, data, length);
   12b4c:	4718      	bx	r3
}
   12b4e:	bd10      	pop	{r4, pc}

00012b50 <on_received>:
{
   12b50:	4608      	mov	r0, r1
   12b52:	b510      	push	{r4, lr}
   12b54:	4619      	mov	r1, r3
	if (!data) {
   12b56:	4614      	mov	r4, r2
   12b58:	b97a      	cbnz	r2, 12b7a <on_received+0x2a>
		params->value_handle = 0;
   12b5a:	8082      	strh	r2, [r0, #4]
   12b5c:	f1a0 030c 	sub.w	r3, r0, #12
   12b60:	e8d3 2fef 	ldaex	r2, [r3]
   12b64:	f022 0202 	bic.w	r2, r2, #2
   12b68:	e8c3 2fe1 	stlex	r1, r2, [r3]
   12b6c:	2900      	cmp	r1, #0
   12b6e:	d1f7      	bne.n	12b60 <on_received+0x10>
		if (nus_c->cbs.tx_notif_disabled) {
   12b70:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   12b72:	b108      	cbz	r0, 12b78 <on_received+0x28>
			nus_c->cbs.tx_notif_disabled();
   12b74:	4780      	blx	r0
   12b76:	4620      	mov	r0, r4
}
   12b78:	bd10      	pop	{r4, pc}
	if (nus_c->cbs.data_received) {
   12b7a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   12b7c:	b11b      	cbz	r3, 12b86 <on_received+0x36>
}
   12b7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return nus_c->cbs.data_received(data, length);
   12b82:	4610      	mov	r0, r2
   12b84:	4718      	bx	r3
	return BT_GATT_ITER_CONTINUE;
   12b86:	2001      	movs	r0, #1
   12b88:	e7f6      	b.n	12b78 <on_received+0x28>

00012b8a <bt_gatt_nus_c_init>:
{
   12b8a:	b510      	push	{r4, lr}
	if (!nus_c || !nus_c_init) {
   12b8c:	b198      	cbz	r0, 12bb6 <bt_gatt_nus_c_init+0x2c>
   12b8e:	b191      	cbz	r1, 12bb6 <bt_gatt_nus_c_init+0x2c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12b90:	1d03      	adds	r3, r0, #4
   12b92:	e8d3 4fef 	ldaex	r4, [r3]
   12b96:	f044 0201 	orr.w	r2, r4, #1
   12b9a:	e8c3 2fec 	stlex	ip, r2, [r3]
   12b9e:	f1bc 0f00 	cmp.w	ip, #0
   12ba2:	d1f6      	bne.n	12b92 <bt_gatt_nus_c_init+0x8>
	if (atomic_test_and_set_bit(&nus_c->state, NUS_C_INITIALIZED)) {
   12ba4:	f014 0401 	ands.w	r4, r4, #1
   12ba8:	d108      	bne.n	12bbc <bt_gatt_nus_c_init+0x32>
	memcpy(&nus_c->cbs, &nus_c_init->cbs, sizeof(nus_c->cbs));
   12baa:	220c      	movs	r2, #12
   12bac:	3034      	adds	r0, #52	; 0x34
   12bae:	f000 fcdf 	bl	13570 <memcpy>
}
   12bb2:	4620      	mov	r0, r4
   12bb4:	bd10      	pop	{r4, pc}
		return -EINVAL;
   12bb6:	f06f 0415 	mvn.w	r4, #21
   12bba:	e7fa      	b.n	12bb2 <bt_gatt_nus_c_init+0x28>
		return -EALREADY;
   12bbc:	f06f 0444 	mvn.w	r4, #68	; 0x44
   12bc0:	e7f7      	b.n	12bb2 <bt_gatt_nus_c_init+0x28>

00012bc2 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   12bc2:	b538      	push	{r3, r4, r5, lr}
   12bc4:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   12bc6:	42ab      	cmp	r3, r5
{
   12bc8:	4611      	mov	r1, r2
   12bca:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   12bcc:	d804      	bhi.n	12bd8 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   12bce:	461a      	mov	r2, r3
   12bd0:	f000 fcce 	bl	13570 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   12bd4:	4620      	mov	r0, r4
   12bd6:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   12bd8:	2400      	movs	r4, #0
   12bda:	e7fb      	b.n	12bd4 <_copy+0x12>

00012bdc <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   12bdc:	f000 bcf3 	b.w	135c6 <memset>

00012be0 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   12be0:	09c3      	lsrs	r3, r0, #7
   12be2:	005a      	lsls	r2, r3, #1
   12be4:	4413      	add	r3, r2
   12be6:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   12bea:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   12bee:	b2c0      	uxtb	r0, r0
   12bf0:	4770      	bx	lr

00012bf2 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   12bf2:	78cb      	ldrb	r3, [r1, #3]
   12bf4:	7802      	ldrb	r2, [r0, #0]
   12bf6:	4053      	eors	r3, r2
   12bf8:	7003      	strb	r3, [r0, #0]
   12bfa:	884b      	ldrh	r3, [r1, #2]
   12bfc:	7842      	ldrb	r2, [r0, #1]
   12bfe:	4053      	eors	r3, r2
   12c00:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   12c02:	680a      	ldr	r2, [r1, #0]
   12c04:	7883      	ldrb	r3, [r0, #2]
   12c06:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   12c0a:	7083      	strb	r3, [r0, #2]
   12c0c:	680a      	ldr	r2, [r1, #0]
   12c0e:	78c3      	ldrb	r3, [r0, #3]
   12c10:	4053      	eors	r3, r2
   12c12:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   12c14:	79cb      	ldrb	r3, [r1, #7]
   12c16:	7902      	ldrb	r2, [r0, #4]
   12c18:	4053      	eors	r3, r2
   12c1a:	7103      	strb	r3, [r0, #4]
   12c1c:	88cb      	ldrh	r3, [r1, #6]
   12c1e:	7942      	ldrb	r2, [r0, #5]
   12c20:	4053      	eors	r3, r2
   12c22:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   12c24:	684a      	ldr	r2, [r1, #4]
   12c26:	7983      	ldrb	r3, [r0, #6]
   12c28:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   12c2c:	7183      	strb	r3, [r0, #6]
   12c2e:	684a      	ldr	r2, [r1, #4]
   12c30:	79c3      	ldrb	r3, [r0, #7]
   12c32:	4053      	eors	r3, r2
   12c34:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   12c36:	7acb      	ldrb	r3, [r1, #11]
   12c38:	7a02      	ldrb	r2, [r0, #8]
   12c3a:	4053      	eors	r3, r2
   12c3c:	7203      	strb	r3, [r0, #8]
   12c3e:	7a42      	ldrb	r2, [r0, #9]
   12c40:	894b      	ldrh	r3, [r1, #10]
   12c42:	4053      	eors	r3, r2
   12c44:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   12c46:	688a      	ldr	r2, [r1, #8]
   12c48:	7a83      	ldrb	r3, [r0, #10]
   12c4a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   12c4e:	7283      	strb	r3, [r0, #10]
   12c50:	688a      	ldr	r2, [r1, #8]
   12c52:	7ac3      	ldrb	r3, [r0, #11]
   12c54:	4053      	eors	r3, r2
   12c56:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   12c58:	7bcb      	ldrb	r3, [r1, #15]
   12c5a:	7b02      	ldrb	r2, [r0, #12]
   12c5c:	4053      	eors	r3, r2
   12c5e:	7303      	strb	r3, [r0, #12]
   12c60:	89cb      	ldrh	r3, [r1, #14]
   12c62:	7b42      	ldrb	r2, [r0, #13]
   12c64:	4053      	eors	r3, r2
   12c66:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   12c68:	68ca      	ldr	r2, [r1, #12]
   12c6a:	7b83      	ldrb	r3, [r0, #14]
   12c6c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   12c70:	7383      	strb	r3, [r0, #14]
   12c72:	68ca      	ldr	r2, [r1, #12]
   12c74:	7bc3      	ldrb	r3, [r0, #15]
   12c76:	4053      	eors	r3, r2
   12c78:	73c3      	strb	r3, [r0, #15]
}
   12c7a:	4770      	bx	lr

00012c7c <shift_rows>:
{
   12c7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   12c7e:	7802      	ldrb	r2, [r0, #0]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   12c80:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   12c82:	f88d 2000 	strb.w	r2, [sp]
   12c86:	7942      	ldrb	r2, [r0, #5]
   12c88:	f88d 2001 	strb.w	r2, [sp, #1]
   12c8c:	7a82      	ldrb	r2, [r0, #10]
   12c8e:	f88d 2002 	strb.w	r2, [sp, #2]
   12c92:	7bc2      	ldrb	r2, [r0, #15]
   12c94:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   12c98:	7902      	ldrb	r2, [r0, #4]
   12c9a:	f88d 2004 	strb.w	r2, [sp, #4]
   12c9e:	7a42      	ldrb	r2, [r0, #9]
   12ca0:	f88d 2005 	strb.w	r2, [sp, #5]
   12ca4:	7b82      	ldrb	r2, [r0, #14]
   12ca6:	f88d 2006 	strb.w	r2, [sp, #6]
   12caa:	78c2      	ldrb	r2, [r0, #3]
   12cac:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   12cb0:	7a02      	ldrb	r2, [r0, #8]
   12cb2:	f88d 2008 	strb.w	r2, [sp, #8]
   12cb6:	7b42      	ldrb	r2, [r0, #13]
   12cb8:	f88d 2009 	strb.w	r2, [sp, #9]
   12cbc:	7882      	ldrb	r2, [r0, #2]
   12cbe:	f88d 200a 	strb.w	r2, [sp, #10]
   12cc2:	79c2      	ldrb	r2, [r0, #7]
   12cc4:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   12cc8:	7b02      	ldrb	r2, [r0, #12]
   12cca:	f88d 200c 	strb.w	r2, [sp, #12]
   12cce:	7842      	ldrb	r2, [r0, #1]
   12cd0:	f88d 200d 	strb.w	r2, [sp, #13]
   12cd4:	7982      	ldrb	r2, [r0, #6]
   12cd6:	f88d 200e 	strb.w	r2, [sp, #14]
   12cda:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   12cde:	2310      	movs	r3, #16
   12ce0:	466a      	mov	r2, sp
   12ce2:	4619      	mov	r1, r3
   12ce4:	f7ff ff6d 	bl	12bc2 <_copy>
}
   12ce8:	b005      	add	sp, #20
   12cea:	f85d fb04 	ldr.w	pc, [sp], #4

00012cee <mult_row_column>:
{
   12cee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12cf0:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   12cf2:	7808      	ldrb	r0, [r1, #0]
{
   12cf4:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   12cf6:	f7ff ff73 	bl	12be0 <_double_byte>
   12cfa:	4605      	mov	r5, r0
   12cfc:	7860      	ldrb	r0, [r4, #1]
   12cfe:	f7ff ff6f 	bl	12be0 <_double_byte>
   12d02:	78a2      	ldrb	r2, [r4, #2]
   12d04:	7863      	ldrb	r3, [r4, #1]
   12d06:	4053      	eors	r3, r2
   12d08:	78e2      	ldrb	r2, [r4, #3]
   12d0a:	4053      	eors	r3, r2
   12d0c:	405d      	eors	r5, r3
   12d0e:	4045      	eors	r5, r0
   12d10:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   12d12:	7860      	ldrb	r0, [r4, #1]
   12d14:	7827      	ldrb	r7, [r4, #0]
   12d16:	f7ff ff63 	bl	12be0 <_double_byte>
   12d1a:	4605      	mov	r5, r0
   12d1c:	78a0      	ldrb	r0, [r4, #2]
   12d1e:	f7ff ff5f 	bl	12be0 <_double_byte>
   12d22:	78a3      	ldrb	r3, [r4, #2]
   12d24:	405f      	eors	r7, r3
   12d26:	78e3      	ldrb	r3, [r4, #3]
   12d28:	405f      	eors	r7, r3
   12d2a:	407d      	eors	r5, r7
   12d2c:	4045      	eors	r5, r0
   12d2e:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   12d30:	78a0      	ldrb	r0, [r4, #2]
   12d32:	7865      	ldrb	r5, [r4, #1]
   12d34:	7827      	ldrb	r7, [r4, #0]
   12d36:	f7ff ff53 	bl	12be0 <_double_byte>
   12d3a:	406f      	eors	r7, r5
   12d3c:	4605      	mov	r5, r0
   12d3e:	78e0      	ldrb	r0, [r4, #3]
   12d40:	f7ff ff4e 	bl	12be0 <_double_byte>
   12d44:	78e3      	ldrb	r3, [r4, #3]
   12d46:	405f      	eors	r7, r3
   12d48:	407d      	eors	r5, r7
   12d4a:	4045      	eors	r5, r0
   12d4c:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   12d4e:	7820      	ldrb	r0, [r4, #0]
   12d50:	f7ff ff46 	bl	12be0 <_double_byte>
   12d54:	7863      	ldrb	r3, [r4, #1]
   12d56:	7825      	ldrb	r5, [r4, #0]
   12d58:	405d      	eors	r5, r3
   12d5a:	78a3      	ldrb	r3, [r4, #2]
   12d5c:	405d      	eors	r5, r3
   12d5e:	4045      	eors	r5, r0
   12d60:	78e0      	ldrb	r0, [r4, #3]
   12d62:	f7ff ff3d 	bl	12be0 <_double_byte>
   12d66:	b2ed      	uxtb	r5, r5
   12d68:	4045      	eors	r5, r0
   12d6a:	70f5      	strb	r5, [r6, #3]
}
   12d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00012d6e <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   12d6e:	460a      	mov	r2, r1
{
   12d70:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   12d72:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   12d76:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   12d78:	2b00      	cmp	r3, #0
   12d7a:	bfb4      	ite	lt
   12d7c:	2387      	movlt	r3, #135	; 0x87
   12d7e:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   12d80:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   12d84:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   12d88:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   12d8a:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   12d8e:	d002      	beq.n	12d96 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   12d90:	7813      	ldrb	r3, [r2, #0]
   12d92:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   12d94:	e7f4      	b.n	12d80 <gf_double+0x12>
	}
}
   12d96:	bd10      	pop	{r4, pc}

00012d98 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   12d98:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   12d9a:	b120      	cbz	r0, 12da6 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   12d9c:	2258      	movs	r2, #88	; 0x58
   12d9e:	2100      	movs	r1, #0
   12da0:	f7ff ff1c 	bl	12bdc <_set>
   12da4:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   12da6:	bd08      	pop	{r3, pc}

00012da8 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   12da8:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   12daa:	4604      	mov	r4, r0
   12dac:	b188      	cbz	r0, 12dd2 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   12dae:	2210      	movs	r2, #16
   12db0:	2100      	movs	r1, #0
   12db2:	f7ff ff13 	bl	12bdc <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   12db6:	2210      	movs	r2, #16
   12db8:	f104 0030 	add.w	r0, r4, #48	; 0x30
   12dbc:	2100      	movs	r1, #0
   12dbe:	f7ff ff0d 	bl	12bdc <_set>
	s->leftover_offset = 0;
   12dc2:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   12dc4:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   12dc6:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   12dc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   12dcc:	2001      	movs	r0, #1
   12dce:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   12dd2:	bd10      	pop	{r4, pc}

00012dd4 <tc_cmac_setup>:
{
   12dd4:	b570      	push	{r4, r5, r6, lr}
   12dd6:	460d      	mov	r5, r1
   12dd8:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   12dda:	4604      	mov	r4, r0
   12ddc:	b310      	cbz	r0, 12e24 <tc_cmac_setup+0x50>
   12dde:	b311      	cbz	r1, 12e26 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   12de0:	2258      	movs	r2, #88	; 0x58
   12de2:	2100      	movs	r1, #0
   12de4:	f7ff fefa 	bl	12bdc <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   12de8:	4629      	mov	r1, r5
   12dea:	4630      	mov	r0, r6
	s->sched = sched;
   12dec:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   12dee:	f7f0 fccf 	bl	3790 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   12df2:	2210      	movs	r2, #16
   12df4:	2100      	movs	r1, #0
   12df6:	4620      	mov	r0, r4
   12df8:	f7ff fef0 	bl	12bdc <_set>
	gf_double (s->K1, s->iv);
   12dfc:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   12e00:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   12e02:	4621      	mov	r1, r4
   12e04:	4620      	mov	r0, r4
   12e06:	f7f0 fd17 	bl	3838 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   12e0a:	4621      	mov	r1, r4
   12e0c:	4628      	mov	r0, r5
   12e0e:	f7ff ffae 	bl	12d6e <gf_double>
	gf_double (s->K2, s->K1);
   12e12:	4629      	mov	r1, r5
   12e14:	f104 0020 	add.w	r0, r4, #32
   12e18:	f7ff ffa9 	bl	12d6e <gf_double>
	tc_cmac_init(s);
   12e1c:	4620      	mov	r0, r4
   12e1e:	f7ff ffc3 	bl	12da8 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   12e22:	2001      	movs	r0, #1
}
   12e24:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   12e26:	4608      	mov	r0, r1
   12e28:	e7fc      	b.n	12e24 <tc_cmac_setup+0x50>

00012e2a <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   12e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12e2e:	460d      	mov	r5, r1
   12e30:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   12e32:	4604      	mov	r4, r0
   12e34:	2800      	cmp	r0, #0
   12e36:	d062      	beq.n	12efe <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   12e38:	b912      	cbnz	r2, 12e40 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   12e3a:	2001      	movs	r0, #1
}
   12e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   12e40:	2900      	cmp	r1, #0
   12e42:	d05c      	beq.n	12efe <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   12e44:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   12e48:	ea50 0301 	orrs.w	r3, r0, r1
   12e4c:	d057      	beq.n	12efe <tc_cmac_update+0xd4>
	s->countdown--;
   12e4e:	f110 32ff 	adds.w	r2, r0, #4294967295
	if (s->leftover_offset > 0) {
   12e52:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   12e56:	f141 33ff 	adc.w	r3, r1, #4294967295
   12e5a:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   12e5e:	f1b8 0f00 	cmp.w	r8, #0
   12e62:	d02a      	beq.n	12eba <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   12e64:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   12e68:	f108 0030 	add.w	r0, r8, #48	; 0x30
   12e6c:	42be      	cmp	r6, r7
   12e6e:	4420      	add	r0, r4
   12e70:	d208      	bcs.n	12e84 <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   12e72:	462a      	mov	r2, r5
   12e74:	4633      	mov	r3, r6
   12e76:	4631      	mov	r1, r6
   12e78:	f7ff fea3 	bl	12bc2 <_copy>
			s->leftover_offset += data_length;
   12e7c:	6c62      	ldr	r2, [r4, #68]	; 0x44
   12e7e:	4432      	add	r2, r6
   12e80:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   12e82:	e7da      	b.n	12e3a <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   12e84:	463b      	mov	r3, r7
   12e86:	462a      	mov	r2, r5
   12e88:	4639      	mov	r1, r7
   12e8a:	f7ff fe9a 	bl	12bc2 <_copy>
		s->leftover_offset = 0;
   12e8e:	2300      	movs	r3, #0
   12e90:	3e10      	subs	r6, #16
   12e92:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   12e94:	4446      	add	r6, r8
		data += remaining_space;
   12e96:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   12e98:	1e63      	subs	r3, r4, #1
   12e9a:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   12e9e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   12ea2:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   12ea6:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   12ea8:	ea82 0200 	eor.w	r2, r2, r0
   12eac:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   12eae:	d1f6      	bne.n	12e9e <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   12eb0:	4621      	mov	r1, r4
   12eb2:	4620      	mov	r0, r4
   12eb4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   12eb6:	f7f0 fcbf 	bl	3838 <tc_aes_encrypt>
   12eba:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   12ebe:	2e10      	cmp	r6, #16
   12ec0:	d80a      	bhi.n	12ed8 <tc_cmac_update+0xae>
	if (data_length > 0) {
   12ec2:	2e00      	cmp	r6, #0
   12ec4:	d0b9      	beq.n	12e3a <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   12ec6:	4633      	mov	r3, r6
   12ec8:	462a      	mov	r2, r5
   12eca:	4631      	mov	r1, r6
   12ecc:	f104 0030 	add.w	r0, r4, #48	; 0x30
   12ed0:	f7ff fe77 	bl	12bc2 <_copy>
		s->leftover_offset = data_length;
   12ed4:	6466      	str	r6, [r4, #68]	; 0x44
   12ed6:	e7b0      	b.n	12e3a <tc_cmac_update+0x10>
   12ed8:	1e63      	subs	r3, r4, #1
   12eda:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   12edc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   12ee0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   12ee4:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   12ee6:	ea82 0200 	eor.w	r2, r2, r0
   12eea:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   12eec:	d1f6      	bne.n	12edc <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   12eee:	4621      	mov	r1, r4
   12ef0:	4620      	mov	r0, r4
   12ef2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   12ef4:	f7f0 fca0 	bl	3838 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   12ef8:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   12efa:	3e10      	subs	r6, #16
   12efc:	e7df      	b.n	12ebe <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   12efe:	2000      	movs	r0, #0
   12f00:	e79c      	b.n	12e3c <tc_cmac_update+0x12>

00012f02 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   12f02:	b570      	push	{r4, r5, r6, lr}
   12f04:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   12f06:	4605      	mov	r5, r0
   12f08:	b1f0      	cbz	r0, 12f48 <tc_cmac_final+0x46>
   12f0a:	b371      	cbz	r1, 12f6a <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   12f0c:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   12f0e:	2a10      	cmp	r2, #16
   12f10:	d11b      	bne.n	12f4a <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   12f12:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   12f14:	1e63      	subs	r3, r4, #1
   12f16:	3901      	subs	r1, #1
   12f18:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   12f1c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   12f20:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   12f24:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   12f26:	ea82 0206 	eor.w	r2, r2, r6
   12f2a:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   12f2e:	ea82 0206 	eor.w	r2, r2, r6
   12f32:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   12f34:	d1f2      	bne.n	12f1c <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   12f36:	4621      	mov	r1, r4
   12f38:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   12f3a:	4628      	mov	r0, r5
   12f3c:	f7f0 fc7c 	bl	3838 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   12f40:	4620      	mov	r0, r4
   12f42:	f7ff ff29 	bl	12d98 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   12f46:	2001      	movs	r0, #1
}
   12f48:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   12f4a:	f102 0030 	add.w	r0, r2, #48	; 0x30
   12f4e:	2100      	movs	r1, #0
   12f50:	f1c2 0210 	rsb	r2, r2, #16
   12f54:	4420      	add	r0, r4
   12f56:	f7ff fe41 	bl	12bdc <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   12f5a:	2280      	movs	r2, #128	; 0x80
   12f5c:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   12f5e:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   12f62:	4423      	add	r3, r4
   12f64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   12f68:	e7d4      	b.n	12f14 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   12f6a:	4608      	mov	r0, r1
   12f6c:	e7ec      	b.n	12f48 <tc_cmac_final+0x46>

00012f6e <tc_sha256_update>:
{
   12f6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12f70:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   12f72:	b110      	cbz	r0, 12f7a <tc_sha256_update+0xc>
   12f74:	b1f9      	cbz	r1, 12fb6 <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   12f76:	b90a      	cbnz	r2, 12f7c <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   12f78:	2001      	movs	r0, #1
}
   12f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   12f7c:	2600      	movs	r6, #0
   12f7e:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   12f80:	f100 0728 	add.w	r7, r0, #40	; 0x28
	while (datalen-- > 0) {
   12f84:	42a5      	cmp	r5, r4
   12f86:	d0f7      	beq.n	12f78 <tc_sha256_update+0xa>
		s->leftover[s->leftover_offset++] = *(data++);
   12f88:	6e83      	ldr	r3, [r0, #104]	; 0x68
   12f8a:	1c5a      	adds	r2, r3, #1
   12f8c:	6682      	str	r2, [r0, #104]	; 0x68
   12f8e:	f814 1b01 	ldrb.w	r1, [r4], #1
   12f92:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   12f94:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   12f96:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   12f9a:	d9f3      	bls.n	12f84 <tc_sha256_update+0x16>
			compress(s->iv, s->leftover);
   12f9c:	4639      	mov	r1, r7
   12f9e:	f7f0 fcb5 	bl	390c <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   12fa2:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   12fa6:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   12faa:	f142 0200 	adc.w	r2, r2, #0
   12fae:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   12fb2:	6686      	str	r6, [r0, #104]	; 0x68
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   12fb4:	e7e6      	b.n	12f84 <tc_sha256_update+0x16>
		return TC_CRYPTO_FAIL;
   12fb6:	4608      	mov	r0, r1
   12fb8:	e7df      	b.n	12f7a <tc_sha256_update+0xc>

00012fba <tc_sha256_final>:
{
   12fba:	b570      	push	{r4, r5, r6, lr}
   12fbc:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   12fbe:	4605      	mov	r5, r0
   12fc0:	2800      	cmp	r0, #0
   12fc2:	d054      	beq.n	1306e <tc_sha256_final+0xb4>
   12fc4:	2900      	cmp	r1, #0
   12fc6:	d053      	beq.n	13070 <tc_sha256_final+0xb6>
	s->bits_hashed += (s->leftover_offset << 3);
   12fc8:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
   12fcc:	6e89      	ldr	r1, [r1, #104]	; 0x68
   12fce:	f104 0628 	add.w	r6, r4, #40	; 0x28
   12fd2:	00c8      	lsls	r0, r1, #3
   12fd4:	1812      	adds	r2, r2, r0
   12fd6:	f143 0300 	adc.w	r3, r3, #0
   12fda:	e9c4 2308 	strd	r2, r3, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   12fde:	2380      	movs	r3, #128	; 0x80
   12fe0:	1c48      	adds	r0, r1, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   12fe2:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   12fe4:	4421      	add	r1, r4
   12fe6:	66a0      	str	r0, [r4, #104]	; 0x68
   12fe8:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   12fec:	d90b      	bls.n	13006 <tc_sha256_final+0x4c>
		_set(s->leftover + s->leftover_offset, 0x00,
   12fee:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   12ff2:	2100      	movs	r1, #0
   12ff4:	4430      	add	r0, r6
   12ff6:	f7ff fdf1 	bl	12bdc <_set>
		compress(s->iv, s->leftover);
   12ffa:	4631      	mov	r1, r6
   12ffc:	4620      	mov	r0, r4
   12ffe:	f7f0 fc85 	bl	390c <compress>
		s->leftover_offset = 0;
   13002:	2300      	movs	r3, #0
   13004:	66a3      	str	r3, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   13006:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   13008:	2100      	movs	r1, #0
   1300a:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   1300e:	4430      	add	r0, r6
   13010:	f7ff fde4 	bl	12bdc <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   13014:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   13016:	4631      	mov	r1, r6
   13018:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   1301a:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   1301c:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   1301e:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   13020:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   13024:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   13028:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   1302a:	0e1b      	lsrs	r3, r3, #24
	compress(s->iv, s->leftover);
   1302c:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   1302e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   13032:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   13036:	f7f0 fc69 	bl	390c <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1303a:	1f26      	subs	r6, r4, #4
   1303c:	1d2b      	adds	r3, r5, #4
   1303e:	f105 0024 	add.w	r0, r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   13042:	f856 2f04 	ldr.w	r2, [r6, #4]!
		*digest++ = (uint8_t)(t >> 24);
   13046:	3304      	adds	r3, #4
   13048:	0e11      	lsrs	r1, r2, #24
   1304a:	f803 1c08 	strb.w	r1, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   1304e:	0c11      	lsrs	r1, r2, #16
   13050:	f803 1c07 	strb.w	r1, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   13054:	0a11      	lsrs	r1, r2, #8
   13056:	f803 1c06 	strb.w	r1, [r3, #-6]
		*digest++ = (uint8_t)(t);
   1305a:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1305e:	4283      	cmp	r3, r0
   13060:	d1ef      	bne.n	13042 <tc_sha256_final+0x88>
	_set(s, 0, sizeof(*s));
   13062:	4620      	mov	r0, r4
   13064:	2270      	movs	r2, #112	; 0x70
   13066:	2100      	movs	r1, #0
   13068:	f7ff fdb8 	bl	12bdc <_set>
	return TC_CRYPTO_SUCCESS;
   1306c:	2001      	movs	r0, #1
}
   1306e:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   13070:	4608      	mov	r0, r1
   13072:	e7fc      	b.n	1306e <tc_sha256_final+0xb4>

00013074 <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   13074:	b530      	push	{r4, r5, lr}
   13076:	1e43      	subs	r3, r0, #1
   13078:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   1307a:	42a9      	cmp	r1, r5
   1307c:	d106      	bne.n	1308c <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   1307e:	2136      	movs	r1, #54	; 0x36
   13080:	245c      	movs	r4, #92	; 0x5c
   13082:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   13084:	1a13      	subs	r3, r2, r0
   13086:	2b3f      	cmp	r3, #63	; 0x3f
   13088:	d90c      	bls.n	130a4 <rekey+0x30>
	}
}
   1308a:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   1308c:	780c      	ldrb	r4, [r1, #0]
   1308e:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   13092:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   13096:	f811 4b01 	ldrb.w	r4, [r1], #1
   1309a:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   1309e:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   130a2:	e7ea      	b.n	1307a <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   130a4:	f802 1b01 	strb.w	r1, [r2], #1
   130a8:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   130ac:	e7ea      	b.n	13084 <rekey+0x10>

000130ae <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   130ae:	b5f0      	push	{r4, r5, r6, r7, lr}
   130b0:	460e      	mov	r6, r1
   130b2:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   130b4:	4605      	mov	r5, r0
{
   130b6:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   130b8:	b1b8      	cbz	r0, 130ea <tc_hmac_set_key+0x3c>
   130ba:	b341      	cbz	r1, 1310e <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   130bc:	b34a      	cbz	r2, 13112 <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   130be:	2a40      	cmp	r2, #64	; 0x40
   130c0:	f100 0770 	add.w	r7, r0, #112	; 0x70
   130c4:	d813      	bhi.n	130ee <tc_hmac_set_key+0x40>
		 * certain timing attacks. Without these dummy calls,
		 * adversaries would be able to learn whether the key_size is
		 * greater than TC_SHA256_BLOCK_SIZE by measuring the time
		 * consumed in this process.
		 */
		(void)tc_sha256_init(&dummy_state.hash_state);
   130c6:	a810      	add	r0, sp, #64	; 0x40
   130c8:	f7f0 fd06 	bl	3ad8 <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   130cc:	4622      	mov	r2, r4
   130ce:	4669      	mov	r1, sp
   130d0:	a810      	add	r0, sp, #64	; 0x40
   130d2:	f7ff ff4c 	bl	12f6e <tc_sha256_update>
				       dummy_key,
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   130d6:	a910      	add	r1, sp, #64	; 0x40
   130d8:	a834      	add	r0, sp, #208	; 0xd0
   130da:	f7ff ff6e 	bl	12fba <tc_sha256_final>
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   130de:	4622      	mov	r2, r4
   130e0:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   130e2:	4638      	mov	r0, r7
   130e4:	f7ff ffc6 	bl	13074 <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   130e8:	2001      	movs	r0, #1
}
   130ea:	b04d      	add	sp, #308	; 0x134
   130ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   130ee:	f7f0 fcf3 	bl	3ad8 <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   130f2:	4622      	mov	r2, r4
   130f4:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   130f6:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   130fa:	4628      	mov	r0, r5
   130fc:	f7ff ff37 	bl	12f6e <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   13100:	4629      	mov	r1, r5
   13102:	4620      	mov	r0, r4
   13104:	f7ff ff59 	bl	12fba <tc_sha256_final>
		rekey(ctx->key,
   13108:	2220      	movs	r2, #32
   1310a:	4621      	mov	r1, r4
   1310c:	e7e9      	b.n	130e2 <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   1310e:	4608      	mov	r0, r1
   13110:	e7eb      	b.n	130ea <tc_hmac_set_key+0x3c>
   13112:	4610      	mov	r0, r2
   13114:	e7e9      	b.n	130ea <tc_hmac_set_key+0x3c>

00013116 <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   13116:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   13118:	4604      	mov	r4, r0
   1311a:	b140      	cbz	r0, 1312e <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   1311c:	f7f0 fcdc 	bl	3ad8 <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   13120:	2240      	movs	r2, #64	; 0x40
   13122:	4620      	mov	r0, r4
   13124:	f104 0170 	add.w	r1, r4, #112	; 0x70
   13128:	f7ff ff21 	bl	12f6e <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   1312c:	2001      	movs	r0, #1
}
   1312e:	bd10      	pop	{r4, pc}

00013130 <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   13130:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   13132:	b110      	cbz	r0, 1313a <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   13134:	f7ff ff1b 	bl	12f6e <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   13138:	2001      	movs	r0, #1
}
   1313a:	bd08      	pop	{r3, pc}

0001313c <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   1313c:	b570      	push	{r4, r5, r6, lr}
   1313e:	460e      	mov	r6, r1
   13140:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   13142:	4605      	mov	r5, r0
   13144:	b1f0      	cbz	r0, 13184 <tc_hmac_final+0x48>
   13146:	2920      	cmp	r1, #32
   13148:	d11c      	bne.n	13184 <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   1314a:	b1ea      	cbz	r2, 13188 <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   1314c:	4611      	mov	r1, r2
   1314e:	f7ff ff34 	bl	12fba <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   13152:	4620      	mov	r0, r4
   13154:	f7f0 fcc0 	bl	3ad8 <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   13158:	2240      	movs	r2, #64	; 0x40
   1315a:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   1315e:	4620      	mov	r0, r4
   13160:	f7ff ff05 	bl	12f6e <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   13164:	4632      	mov	r2, r6
   13166:	4629      	mov	r1, r5
   13168:	4620      	mov	r0, r4
   1316a:	f7ff ff00 	bl	12f6e <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   1316e:	4621      	mov	r1, r4
   13170:	4628      	mov	r0, r5
   13172:	f7ff ff22 	bl	12fba <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   13176:	4620      	mov	r0, r4
   13178:	22f0      	movs	r2, #240	; 0xf0
   1317a:	2100      	movs	r1, #0
   1317c:	f7ff fd2e 	bl	12bdc <_set>

	return TC_CRYPTO_SUCCESS;
   13180:	2001      	movs	r0, #1
}
   13182:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   13184:	2000      	movs	r0, #0
   13186:	e7fc      	b.n	13182 <tc_hmac_final+0x46>
   13188:	4610      	mov	r0, r2
   1318a:	e7fa      	b.n	13182 <tc_hmac_final+0x46>

0001318c <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   1318c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13190:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   13192:	f04f 0b01 	mov.w	fp, #1
{
   13196:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   13198:	2300      	movs	r3, #0
{
   1319a:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1319c:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   131a0:	4631      	mov	r1, r6
{
   131a2:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   131a4:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   131a6:	f88d 3006 	strb.w	r3, [sp, #6]
{
   131aa:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   131ae:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   131b2:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   131b6:	f7ff ff7a 	bl	130ae <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   131ba:	4620      	mov	r0, r4
   131bc:	f7ff ffab 	bl	13116 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   131c0:	2220      	movs	r2, #32
   131c2:	4629      	mov	r1, r5
   131c4:	4620      	mov	r0, r4
   131c6:	f7ff ffb3 	bl	13130 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   131ca:	465a      	mov	r2, fp
   131cc:	4620      	mov	r0, r4
   131ce:	f10d 0106 	add.w	r1, sp, #6
   131d2:	f7ff ffad 	bl	13130 <tc_hmac_update>

	if (data && datalen)
   131d6:	f1b8 0f00 	cmp.w	r8, #0
   131da:	d007      	beq.n	131ec <update+0x60>
   131dc:	f1b9 0f00 	cmp.w	r9, #0
   131e0:	d004      	beq.n	131ec <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   131e2:	464a      	mov	r2, r9
   131e4:	4641      	mov	r1, r8
   131e6:	4620      	mov	r0, r4
   131e8:	f7ff ffa2 	bl	13130 <tc_hmac_update>
	if (additional_data && additional_datalen)
   131ec:	b13f      	cbz	r7, 131fe <update+0x72>
   131ee:	f1ba 0f00 	cmp.w	sl, #0
   131f2:	d004      	beq.n	131fe <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   131f4:	4652      	mov	r2, sl
   131f6:	4639      	mov	r1, r7
   131f8:	4620      	mov	r0, r4
   131fa:	f7ff ff99 	bl	13130 <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   131fe:	4622      	mov	r2, r4
   13200:	2120      	movs	r1, #32
   13202:	4630      	mov	r0, r6
   13204:	f7ff ff9a 	bl	1313c <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   13208:	2220      	movs	r2, #32
   1320a:	4631      	mov	r1, r6
   1320c:	4620      	mov	r0, r4
   1320e:	f7ff ff4e 	bl	130ae <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   13212:	4620      	mov	r0, r4
   13214:	f7ff ff7f 	bl	13116 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   13218:	2220      	movs	r2, #32
   1321a:	4629      	mov	r1, r5
   1321c:	4620      	mov	r0, r4
   1321e:	f7ff ff87 	bl	13130 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   13222:	4622      	mov	r2, r4
   13224:	2120      	movs	r1, #32
   13226:	4628      	mov	r0, r5
   13228:	f7ff ff88 	bl	1313c <tc_hmac_final>

	if (data == 0 || datalen == 0)
   1322c:	f1b8 0f00 	cmp.w	r8, #0
   13230:	d03a      	beq.n	132a8 <update+0x11c>
   13232:	f1b9 0f00 	cmp.w	r9, #0
   13236:	d037      	beq.n	132a8 <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   13238:	2220      	movs	r2, #32
   1323a:	4631      	mov	r1, r6
   1323c:	4620      	mov	r0, r4
   1323e:	f7ff ff36 	bl	130ae <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   13242:	4620      	mov	r0, r4
   13244:	f7ff ff67 	bl	13116 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   13248:	2220      	movs	r2, #32
   1324a:	4629      	mov	r1, r5
   1324c:	4620      	mov	r0, r4
   1324e:	f7ff ff6f 	bl	13130 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   13252:	2201      	movs	r2, #1
   13254:	f10d 0107 	add.w	r1, sp, #7
   13258:	4620      	mov	r0, r4
   1325a:	f7ff ff69 	bl	13130 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   1325e:	464a      	mov	r2, r9
   13260:	4641      	mov	r1, r8
   13262:	4620      	mov	r0, r4
   13264:	f7ff ff64 	bl	13130 <tc_hmac_update>
	if (additional_data && additional_datalen)
   13268:	b13f      	cbz	r7, 1327a <update+0xee>
   1326a:	f1ba 0f00 	cmp.w	sl, #0
   1326e:	d004      	beq.n	1327a <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   13270:	4652      	mov	r2, sl
   13272:	4639      	mov	r1, r7
   13274:	4620      	mov	r0, r4
   13276:	f7ff ff5b 	bl	13130 <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   1327a:	4622      	mov	r2, r4
   1327c:	2120      	movs	r1, #32
   1327e:	4630      	mov	r0, r6
   13280:	f7ff ff5c 	bl	1313c <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   13284:	2220      	movs	r2, #32
   13286:	4631      	mov	r1, r6
   13288:	4620      	mov	r0, r4
   1328a:	f7ff ff10 	bl	130ae <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   1328e:	4620      	mov	r0, r4
   13290:	f7ff ff41 	bl	13116 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   13294:	2220      	movs	r2, #32
   13296:	4629      	mov	r1, r5
   13298:	4620      	mov	r0, r4
   1329a:	f7ff ff49 	bl	13130 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1329e:	4622      	mov	r2, r4
   132a0:	2120      	movs	r1, #32
   132a2:	4628      	mov	r0, r5
   132a4:	f7ff ff4a 	bl	1313c <tc_hmac_final>
}
   132a8:	b003      	add	sp, #12
   132aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000132ae <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   132ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   132b0:	460c      	mov	r4, r1
   132b2:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   132b4:	4605      	mov	r5, r0
   132b6:	b1b0      	cbz	r0, 132e6 <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   132b8:	b1b9      	cbz	r1, 132ea <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   132ba:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   132bc:	2220      	movs	r2, #32
   132be:	2100      	movs	r1, #0
   132c0:	30f0      	adds	r0, #240	; 0xf0
   132c2:	f7ff fc8b 	bl	12bdc <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   132c6:	2220      	movs	r2, #32
   132c8:	2101      	movs	r1, #1
   132ca:	f505 7088 	add.w	r0, r5, #272	; 0x110
   132ce:	f7ff fc85 	bl	12bdc <_set>
	update(prng, personalization, plen, 0, 0);
   132d2:	4628      	mov	r0, r5
   132d4:	4633      	mov	r3, r6
   132d6:	463a      	mov	r2, r7
   132d8:	4621      	mov	r1, r4
   132da:	9600      	str	r6, [sp, #0]
   132dc:	f7ff ff56 	bl	1318c <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   132e0:	2001      	movs	r0, #1
	prng->countdown = 0;
   132e2:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   132e6:	b003      	add	sp, #12
   132e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   132ea:	4608      	mov	r0, r1
   132ec:	e7fb      	b.n	132e6 <tc_hmac_prng_init+0x38>

000132ee <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   132ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   132f0:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   132f2:	4605      	mov	r5, r0
   132f4:	b180      	cbz	r0, 13318 <tc_hmac_prng_reseed+0x2a>
   132f6:	b179      	cbz	r1, 13318 <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   132f8:	2a1f      	cmp	r2, #31
   132fa:	d90d      	bls.n	13318 <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   132fc:	b153      	cbz	r3, 13314 <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   132fe:	b16c      	cbz	r4, 1331c <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   13300:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   13302:	f7ff ff43 	bl	1318c <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   13306:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   1330a:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   1330c:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   13310:	b003      	add	sp, #12
   13312:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   13314:	9300      	str	r3, [sp, #0]
   13316:	e7f4      	b.n	13302 <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   13318:	2000      	movs	r0, #0
   1331a:	e7f9      	b.n	13310 <tc_hmac_prng_reseed+0x22>
   1331c:	4620      	mov	r0, r4
   1331e:	e7f7      	b.n	13310 <tc_hmac_prng_reseed+0x22>

00013320 <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   13320:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   13324:	460d      	mov	r5, r1
   13326:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   13328:	4680      	mov	r8, r0
   1332a:	b3d8      	cbz	r0, 133a4 <tc_hmac_prng_generate+0x84>
   1332c:	b3d2      	cbz	r2, 133a4 <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   1332e:	1e4b      	subs	r3, r1, #1
   13330:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   13334:	d236      	bcs.n	133a4 <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   13336:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   1333a:	b3ab      	cbz	r3, 133a8 <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   1333c:	3b01      	subs	r3, #1
   1333e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   13342:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   13346:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1334a:	2220      	movs	r2, #32
   1334c:	4649      	mov	r1, r9
   1334e:	4620      	mov	r0, r4
   13350:	f7ff fead 	bl	130ae <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   13354:	4620      	mov	r0, r4
   13356:	f7ff fede 	bl	13116 <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1335a:	2220      	movs	r2, #32
   1335c:	4639      	mov	r1, r7
   1335e:	4620      	mov	r0, r4
   13360:	f7ff fee6 	bl	13130 <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   13364:	4622      	mov	r2, r4
   13366:	2120      	movs	r1, #32
   13368:	4638      	mov	r0, r7
   1336a:	f7ff fee7 	bl	1313c <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   1336e:	2d20      	cmp	r5, #32
   13370:	462e      	mov	r6, r5
   13372:	bf28      	it	cs
   13374:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   13376:	4640      	mov	r0, r8
   13378:	4633      	mov	r3, r6
   1337a:	463a      	mov	r2, r7
   1337c:	4631      	mov	r1, r6
   1337e:	f7ff fc20 	bl	12bc2 <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   13382:	2d20      	cmp	r5, #32
   13384:	bf38      	it	cc
   13386:	2520      	movcc	r5, #32
	while (outlen != 0) {
   13388:	3d20      	subs	r5, #32
		out += bufferlen;
   1338a:	44b0      	add	r8, r6
	while (outlen != 0) {
   1338c:	d1dd      	bne.n	1334a <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   1338e:	4620      	mov	r0, r4
   13390:	462b      	mov	r3, r5
   13392:	462a      	mov	r2, r5
   13394:	4629      	mov	r1, r5
   13396:	9500      	str	r5, [sp, #0]
   13398:	f7ff fef8 	bl	1318c <update>

	return TC_CRYPTO_SUCCESS;
   1339c:	2001      	movs	r0, #1
}
   1339e:	b003      	add	sp, #12
   133a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   133a4:	2000      	movs	r0, #0
   133a6:	e7fa      	b.n	1339e <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   133a8:	f04f 30ff 	mov.w	r0, #4294967295
   133ac:	e7f7      	b.n	1339e <tc_hmac_prng_generate+0x7e>

000133ae <z_irq_spurious>:
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   133ae:	2100      	movs	r1, #0
   133b0:	2001      	movs	r0, #1
   133b2:	f7f0 bca1 	b.w	3cf8 <z_arm_fatal_error>

000133b6 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   133b6:	6e03      	ldr	r3, [r0, #96]	; 0x60
   133b8:	f383 880b 	msr	PSPLIM, r3
}
   133bc:	4770      	bx	lr

000133be <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   133be:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   133c0:	6800      	ldr	r0, [r0, #0]
   133c2:	f7f0 bc99 	b.w	3cf8 <z_arm_fatal_error>

000133c6 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   133c6:	b508      	push	{r3, lr}
	handler();
   133c8:	f7f0 fcc4 	bl	3d54 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   133cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   133d0:	f7f0 bf1a 	b.w	4208 <z_arm_exc_exit>

000133d4 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   133d4:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   133d8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   133dc:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   133de:	bf08      	it	eq
   133e0:	f06f 0015 	mvneq.w	r0, #21
   133e4:	4770      	bx	lr

000133e6 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   133e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   133ea:	4684      	mov	ip, r0
   133ec:	4688      	mov	r8, r1
	register const char *s = nptr;
   133ee:	4601      	mov	r1, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   133f0:	460c      	mov	r4, r1
   133f2:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
}

static inline int isspace(int c)
{
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   133f6:	2b20      	cmp	r3, #32
   133f8:	d033      	beq.n	13462 <strtol+0x7c>
   133fa:	f1a3 0009 	sub.w	r0, r3, #9
   133fe:	2804      	cmp	r0, #4
   13400:	d92f      	bls.n	13462 <strtol+0x7c>
	} while (isspace(c));
	if (c == '-') {
   13402:	2b2d      	cmp	r3, #45	; 0x2d
   13404:	d12f      	bne.n	13466 <strtol+0x80>
		neg = 1;
		c = *s++;
   13406:	784b      	ldrb	r3, [r1, #1]
   13408:	1c8c      	adds	r4, r1, #2
		neg = 1;
   1340a:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1340c:	2a00      	cmp	r2, #0
   1340e:	d05c      	beq.n	134ca <strtol+0xe4>
   13410:	2a10      	cmp	r2, #16
   13412:	d109      	bne.n	13428 <strtol+0x42>
   13414:	2b30      	cmp	r3, #48	; 0x30
   13416:	d107      	bne.n	13428 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   13418:	7823      	ldrb	r3, [r4, #0]
   1341a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1341e:	2b58      	cmp	r3, #88	; 0x58
   13420:	d14e      	bne.n	134c0 <strtol+0xda>
		c = s[1];
		s += 2;
		base = 16;
   13422:	2210      	movs	r2, #16
		c = s[1];
   13424:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   13426:	3402      	adds	r4, #2
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   13428:	2600      	movs	r6, #0
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   1342a:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   1342e:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
   13430:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   13434:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   13436:	fb02 791e 	mls	r9, r2, lr, r7
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1343a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1343e:	2d09      	cmp	r5, #9
   13440:	d817      	bhi.n	13472 <strtol+0x8c>
			c -= '0';
   13442:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   13444:	429a      	cmp	r2, r3
   13446:	dd24      	ble.n	13492 <strtol+0xac>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   13448:	1c75      	adds	r5, r6, #1
   1344a:	d007      	beq.n	1345c <strtol+0x76>
   1344c:	4570      	cmp	r0, lr
   1344e:	d81d      	bhi.n	1348c <strtol+0xa6>
   13450:	d101      	bne.n	13456 <strtol+0x70>
   13452:	454b      	cmp	r3, r9
   13454:	dc1a      	bgt.n	1348c <strtol+0xa6>
			any = -1;
		} else {
			any = 1;
   13456:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   13458:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   1345c:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   13460:	e7eb      	b.n	1343a <strtol+0x54>
{
   13462:	4621      	mov	r1, r4
   13464:	e7c4      	b.n	133f0 <strtol+0xa>
	} else if (c == '+') {
   13466:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   13468:	bf04      	itt	eq
   1346a:	784b      	ldrbeq	r3, [r1, #1]
   1346c:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   1346e:	2100      	movs	r1, #0
   13470:	e7cc      	b.n	1340c <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   13472:	f043 0520 	orr.w	r5, r3, #32
   13476:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   13478:	2d19      	cmp	r5, #25
   1347a:	d80a      	bhi.n	13492 <strtol+0xac>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1347c:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   13480:	2d1a      	cmp	r5, #26
   13482:	bf34      	ite	cc
   13484:	2537      	movcc	r5, #55	; 0x37
   13486:	2557      	movcs	r5, #87	; 0x57
   13488:	1b5b      	subs	r3, r3, r5
   1348a:	e7db      	b.n	13444 <strtol+0x5e>
			any = -1;
   1348c:	f04f 36ff 	mov.w	r6, #4294967295
   13490:	e7e4      	b.n	1345c <strtol+0x76>
		}
	}

	if (any < 0) {
   13492:	1c73      	adds	r3, r6, #1
   13494:	d109      	bne.n	134aa <strtol+0xc4>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   13496:	f7fb fadb 	bl	ea50 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   1349a:	2326      	movs	r3, #38	; 0x26
   1349c:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   1349e:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   134a0:	f1b8 0f00 	cmp.w	r8, #0
   134a4:	d107      	bne.n	134b6 <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   134a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   134aa:	b101      	cbz	r1, 134ae <strtol+0xc8>
		acc = -acc;
   134ac:	4240      	negs	r0, r0
	if (endptr != NULL) {
   134ae:	f1b8 0f00 	cmp.w	r8, #0
   134b2:	d0f8      	beq.n	134a6 <strtol+0xc0>
		*endptr = (char *)(any ? s - 1 : nptr);
   134b4:	b10e      	cbz	r6, 134ba <strtol+0xd4>
   134b6:	f104 3cff 	add.w	ip, r4, #4294967295
   134ba:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   134be:	e7f2      	b.n	134a6 <strtol+0xc0>
	if (base == 0) {
   134c0:	2330      	movs	r3, #48	; 0x30
   134c2:	2a00      	cmp	r2, #0
   134c4:	d1b0      	bne.n	13428 <strtol+0x42>
		base = c == '0' ? 8 : 10;
   134c6:	2208      	movs	r2, #8
   134c8:	e7ae      	b.n	13428 <strtol+0x42>
	if ((base == 0 || base == 16) &&
   134ca:	2b30      	cmp	r3, #48	; 0x30
   134cc:	d0a4      	beq.n	13418 <strtol+0x32>
		base = c == '0' ? 8 : 10;
   134ce:	220a      	movs	r2, #10
   134d0:	e7aa      	b.n	13428 <strtol+0x42>

000134d2 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   134d2:	4603      	mov	r3, r0
   134d4:	3901      	subs	r1, #1
   134d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   134da:	b90a      	cbnz	r2, 134e0 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   134dc:	701a      	strb	r2, [r3, #0]

	return dest;
}
   134de:	4770      	bx	lr
		*d = *s;
   134e0:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   134e4:	e7f7      	b.n	134d6 <strcpy+0x4>

000134e6 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   134e6:	b570      	push	{r4, r5, r6, lr}
   134e8:	4605      	mov	r5, r0
   134ea:	3901      	subs	r1, #1
   134ec:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   134ee:	b142      	cbz	r2, 13502 <strncpy+0x1c>
   134f0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   134f4:	1e56      	subs	r6, r2, #1
   134f6:	b92b      	cbnz	r3, 13504 <strncpy+0x1e>
   134f8:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   134fa:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   134fe:	42a2      	cmp	r2, r4
   13500:	d1fb      	bne.n	134fa <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   13502:	bd70      	pop	{r4, r5, r6, pc}
		n--;
   13504:	4632      	mov	r2, r6
		*d = *s;
   13506:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   1350a:	e7ef      	b.n	134ec <strncpy+0x6>

0001350c <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1350c:	4603      	mov	r3, r0
	size_t n = 0;
   1350e:	2000      	movs	r0, #0

	while (*s != '\0') {
   13510:	5c1a      	ldrb	r2, [r3, r0]
   13512:	b902      	cbnz	r2, 13516 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   13514:	4770      	bx	lr
		n++;
   13516:	3001      	adds	r0, #1
   13518:	e7fa      	b.n	13510 <strlen+0x4>

0001351a <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1351a:	1e43      	subs	r3, r0, #1
   1351c:	3901      	subs	r1, #1
   1351e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   13522:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   13526:	4282      	cmp	r2, r0
   13528:	d101      	bne.n	1352e <strcmp+0x14>
   1352a:	2a00      	cmp	r2, #0
   1352c:	d1f7      	bne.n	1351e <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1352e:	1a10      	subs	r0, r2, r0
   13530:	4770      	bx	lr

00013532 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   13532:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   13534:	2400      	movs	r4, #0
   13536:	42a2      	cmp	r2, r4
   13538:	d008      	beq.n	1354c <strncmp+0x1a>
   1353a:	5d03      	ldrb	r3, [r0, r4]
   1353c:	5d0d      	ldrb	r5, [r1, r4]
   1353e:	42ab      	cmp	r3, r5
   13540:	d102      	bne.n	13548 <strncmp+0x16>
   13542:	3401      	adds	r4, #1
   13544:	2b00      	cmp	r3, #0
   13546:	d1f6      	bne.n	13536 <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   13548:	1b58      	subs	r0, r3, r5
   1354a:	e000      	b.n	1354e <strncmp+0x1c>
   1354c:	2000      	movs	r0, #0
}
   1354e:	bd30      	pop	{r4, r5, pc}

00013550 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   13550:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   13552:	b15a      	cbz	r2, 1356c <memcmp+0x1c>
   13554:	3901      	subs	r1, #1
   13556:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   13558:	f810 2b01 	ldrb.w	r2, [r0], #1
   1355c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   13560:	42a0      	cmp	r0, r4
   13562:	d001      	beq.n	13568 <memcmp+0x18>
   13564:	429a      	cmp	r2, r3
   13566:	d0f7      	beq.n	13558 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   13568:	1ad0      	subs	r0, r2, r3
}
   1356a:	bd10      	pop	{r4, pc}
		return 0;
   1356c:	4610      	mov	r0, r2
   1356e:	e7fc      	b.n	1356a <memcmp+0x1a>

00013570 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   13570:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   13572:	ea81 0400 	eor.w	r4, r1, r0
   13576:	07a5      	lsls	r5, r4, #30
   13578:	4603      	mov	r3, r0
   1357a:	d00b      	beq.n	13594 <memcpy+0x24>
   1357c:	3b01      	subs	r3, #1
   1357e:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   13580:	4291      	cmp	r1, r2
   13582:	d11b      	bne.n	135bc <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   13584:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   13586:	2a00      	cmp	r2, #0
   13588:	d0fc      	beq.n	13584 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1358a:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   1358e:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   13590:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   13594:	079c      	lsls	r4, r3, #30
   13596:	d1f6      	bne.n	13586 <memcpy+0x16>
   13598:	f022 0403 	bic.w	r4, r2, #3
   1359c:	1f1d      	subs	r5, r3, #4
   1359e:	0896      	lsrs	r6, r2, #2
   135a0:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   135a2:	42b9      	cmp	r1, r7
   135a4:	d105      	bne.n	135b2 <memcpy+0x42>
   135a6:	f06f 0503 	mvn.w	r5, #3
   135aa:	4423      	add	r3, r4
   135ac:	fb05 2206 	mla	r2, r5, r6, r2
   135b0:	e7e4      	b.n	1357c <memcpy+0xc>
			*(d_word++) = *(s_word++);
   135b2:	f851 cb04 	ldr.w	ip, [r1], #4
   135b6:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   135ba:	e7f2      	b.n	135a2 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   135bc:	f811 4b01 	ldrb.w	r4, [r1], #1
   135c0:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   135c4:	e7dc      	b.n	13580 <memcpy+0x10>

000135c6 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   135c6:	4603      	mov	r3, r0
{
   135c8:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
   135ca:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   135cc:	079c      	lsls	r4, r3, #30
   135ce:	d111      	bne.n	135f4 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   135d0:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   135d4:	f022 0603 	bic.w	r6, r2, #3
   135d8:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   135dc:	441e      	add	r6, r3
   135de:	0894      	lsrs	r4, r2, #2
   135e0:	42b3      	cmp	r3, r6
   135e2:	d10d      	bne.n	13600 <memset+0x3a>
   135e4:	f06f 0503 	mvn.w	r5, #3
   135e8:	fb05 2204 	mla	r2, r5, r4, r2
   135ec:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   135ee:	4293      	cmp	r3, r2
   135f0:	d109      	bne.n	13606 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   135f2:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   135f4:	2a00      	cmp	r2, #0
   135f6:	d0fc      	beq.n	135f2 <memset+0x2c>
		*(d_byte++) = c_byte;
   135f8:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   135fc:	3a01      	subs	r2, #1
   135fe:	e7e5      	b.n	135cc <memset+0x6>
		*(d_word++) = c_word;
   13600:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   13604:	e7ec      	b.n	135e0 <memset+0x1a>
		*(d_byte++) = c_byte;
   13606:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1360a:	e7f0      	b.n	135ee <memset+0x28>

0001360c <_stdout_hook_default>:
}
   1360c:	f04f 30ff 	mov.w	r0, #4294967295
   13610:	4770      	bx	lr

00013612 <bt_rpa_irk_matches>:

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   13612:	2203      	movs	r2, #3
	return 0;
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
   13614:	b530      	push	{r4, r5, lr}
   13616:	4605      	mov	r5, r0
   13618:	b087      	sub	sp, #28
   1361a:	460c      	mov	r4, r1
	memcpy(res, r, 3);
   1361c:	a802      	add	r0, sp, #8
   1361e:	4411      	add	r1, r2
   13620:	f7ff ffa6 	bl	13570 <memcpy>
	(void)memset(res + 3, 0, 13);
   13624:	220d      	movs	r2, #13
   13626:	2100      	movs	r1, #0
   13628:	f10d 000b 	add.w	r0, sp, #11
   1362c:	f7ff ffcb 	bl	135c6 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   13630:	aa02      	add	r2, sp, #8
   13632:	4611      	mov	r1, r2
   13634:	4628      	mov	r0, r5
   13636:	f000 fa4c 	bl	13ad2 <bt_encrypt_le>
	if (err) {
   1363a:	b970      	cbnz	r0, 1365a <bt_rpa_irk_matches+0x48>
	memcpy(out, res, 3);
   1363c:	2203      	movs	r2, #3
   1363e:	a902      	add	r1, sp, #8
   13640:	a801      	add	r0, sp, #4
   13642:	f7ff ff95 	bl	13570 <memcpy>
	err = ah(irk, addr->val + 3, hash);
	if (err) {
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   13646:	2203      	movs	r2, #3
   13648:	4620      	mov	r0, r4
   1364a:	a901      	add	r1, sp, #4
   1364c:	f7ff ff80 	bl	13550 <memcmp>
   13650:	fab0 f080 	clz	r0, r0
   13654:	0940      	lsrs	r0, r0, #5
}
   13656:	b007      	add	sp, #28
   13658:	bd30      	pop	{r4, r5, pc}
		return false;
   1365a:	2000      	movs	r0, #0
   1365c:	e7fb      	b.n	13656 <bt_rpa_irk_matches+0x44>

0001365e <bt_settings_decode_key>:
{
   1365e:	b570      	push	{r4, r5, r6, lr}
   13660:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   13662:	2100      	movs	r1, #0
{
   13664:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   13666:	f7ff f865 	bl	12734 <settings_name_next>
   1366a:	280d      	cmp	r0, #13
   1366c:	d118      	bne.n	136a0 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   1366e:	7b23      	ldrb	r3, [r4, #12]
   13670:	2b30      	cmp	r3, #48	; 0x30
   13672:	d111      	bne.n	13698 <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   13674:	2300      	movs	r3, #0
   13676:	702b      	strb	r3, [r5, #0]
   13678:	f104 060c 	add.w	r6, r4, #12
   1367c:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   1367e:	462a      	mov	r2, r5
   13680:	4620      	mov	r0, r4
   13682:	2301      	movs	r3, #1
   13684:	2102      	movs	r1, #2
   13686:	3402      	adds	r4, #2
   13688:	f7fe fc01 	bl	11e8e <hex2bin>
	for (u8_t i = 0; i < 6; i++) {
   1368c:	42b4      	cmp	r4, r6
   1368e:	f105 35ff 	add.w	r5, r5, #4294967295
   13692:	d1f4      	bne.n	1367e <bt_settings_decode_key+0x20>
	return 0;
   13694:	2000      	movs	r0, #0
}
   13696:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   13698:	2b31      	cmp	r3, #49	; 0x31
   1369a:	d101      	bne.n	136a0 <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   1369c:	2301      	movs	r3, #1
   1369e:	e7ea      	b.n	13676 <bt_settings_decode_key+0x18>
		return -EINVAL;
   136a0:	f06f 0015 	mvn.w	r0, #21
   136a4:	e7f7      	b.n	13696 <bt_settings_decode_key+0x38>

000136a6 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   136a6:	b510      	push	{r4, lr}
   136a8:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   136aa:	7801      	ldrb	r1, [r0, #0]
   136ac:	7822      	ldrb	r2, [r4, #0]
{
   136ae:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   136b0:	428a      	cmp	r2, r1
   136b2:	d00e      	beq.n	136d2 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   136b4:	4669      	mov	r1, sp
   136b6:	f7f1 f98f 	bl	49d8 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   136ba:	4620      	mov	r0, r4
   136bc:	a905      	add	r1, sp, #20
   136be:	f7f1 f98b 	bl	49d8 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   136c2:	2210      	movs	r2, #16
   136c4:	f10d 0115 	add.w	r1, sp, #21
   136c8:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   136cc:	f7ff ff40 	bl	13550 <memcmp>
   136d0:	e007      	b.n	136e2 <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   136d2:	2a01      	cmp	r2, #1
   136d4:	d007      	beq.n	136e6 <bt_uuid_cmp+0x40>
   136d6:	2a02      	cmp	r2, #2
   136d8:	d008      	beq.n	136ec <bt_uuid_cmp+0x46>
   136da:	b95a      	cbnz	r2, 136f4 <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   136dc:	8840      	ldrh	r0, [r0, #2]
   136de:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   136e0:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   136e2:	b00a      	add	sp, #40	; 0x28
   136e4:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   136e6:	6840      	ldr	r0, [r0, #4]
   136e8:	6863      	ldr	r3, [r4, #4]
   136ea:	e7f9      	b.n	136e0 <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   136ec:	2210      	movs	r2, #16
   136ee:	1c61      	adds	r1, r4, #1
   136f0:	3001      	adds	r0, #1
   136f2:	e7eb      	b.n	136cc <bt_uuid_cmp+0x26>
	switch (u1->type) {
   136f4:	f06f 0015 	mvn.w	r0, #21
   136f8:	e7f3      	b.n	136e2 <bt_uuid_cmp+0x3c>

000136fa <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const u8_t *data, u8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   136fa:	2a04      	cmp	r2, #4
{
   136fc:	b538      	push	{r3, r4, r5, lr}
   136fe:	460c      	mov	r4, r1
	switch (data_len) {
   13700:	d00d      	beq.n	1371e <bt_uuid_create+0x24>
   13702:	2a10      	cmp	r2, #16
   13704:	d019      	beq.n	1373a <bt_uuid_create+0x40>
   13706:	2a02      	cmp	r2, #2
   13708:	f04f 0300 	mov.w	r3, #0
   1370c:	d11b      	bne.n	13746 <bt_uuid_create+0x4c>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   1370e:	7003      	strb	r3, [r0, #0]
	return ((u16_t)src[1] << 8) | src[0];
   13710:	784a      	ldrb	r2, [r1, #1]
   13712:	780b      	ldrb	r3, [r1, #0]
   13714:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   13718:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1371a:	2001      	movs	r0, #1
}
   1371c:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   1371e:	2301      	movs	r3, #1
   13720:	7003      	strb	r3, [r0, #0]
   13722:	78a2      	ldrb	r2, [r4, #2]
   13724:	78c9      	ldrb	r1, [r1, #3]
   13726:	7865      	ldrb	r5, [r4, #1]
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   13728:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((u16_t)src[1] << 8) | src[0];
   1372c:	7822      	ldrb	r2, [r4, #0]
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1372e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   13732:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   13736:	6042      	str	r2, [r0, #4]
		break;
   13738:	e7ef      	b.n	1371a <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
   1373a:	2302      	movs	r3, #2
   1373c:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   13740:	f7ff ff16 	bl	13570 <memcpy>
		break;
   13744:	e7e9      	b.n	1371a <bt_uuid_create+0x20>
	switch (data_len) {
   13746:	4618      	mov	r0, r3
   13748:	e7e8      	b.n	1371c <bt_uuid_create+0x22>

0001374a <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline u8_t bt_hci_evt_get_flags(u8_t evt)
{
	switch (evt) {
   1374a:	280f      	cmp	r0, #15
   1374c:	d806      	bhi.n	1375c <bt_hci_evt_get_flags+0x12>
   1374e:	280d      	cmp	r0, #13
   13750:	d80b      	bhi.n	1376a <bt_hci_evt_get_flags+0x20>
   13752:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   13754:	bf14      	ite	ne
   13756:	2002      	movne	r0, #2
   13758:	2003      	moveq	r0, #3
   1375a:	4770      	bx	lr
	switch (evt) {
   1375c:	2813      	cmp	r0, #19
   1375e:	d004      	beq.n	1376a <bt_hci_evt_get_flags+0x20>
   13760:	281a      	cmp	r0, #26
   13762:	bf14      	ite	ne
   13764:	2002      	movne	r0, #2
   13766:	2001      	moveq	r0, #1
   13768:	4770      	bx	lr
   1376a:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   1376c:	4770      	bx	lr

0001376e <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1376e:	e8d0 0faf 	lda	r0, [r0]
}
   13772:	4770      	bx	lr

00013774 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   13774:	2207      	movs	r2, #7
   13776:	f7ff befb 	b.w	13570 <memcpy>

0001377a <atomic_or>:
{
   1377a:	4603      	mov	r3, r0
}
   1377c:	e8d3 0fef 	ldaex	r0, [r3]
   13780:	ea40 0201 	orr.w	r2, r0, r1
   13784:	e8c3 2fec 	stlex	ip, r2, [r3]
   13788:	f1bc 0f00 	cmp.w	ip, #0
   1378c:	d1f6      	bne.n	1377c <atomic_or+0x2>
   1378e:	4770      	bx	lr

00013790 <atomic_test_and_set_bit>:
{
   13790:	b508      	push	{r3, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   13792:	2301      	movs	r3, #1
   13794:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   13798:	f7ff ffef 	bl	1377a <atomic_or>
	return (old & mask) != 0;
   1379c:	4201      	tst	r1, r0
}
   1379e:	bf14      	ite	ne
   137a0:	2001      	movne	r0, #1
   137a2:	2000      	moveq	r0, #0
   137a4:	bd08      	pop	{r3, pc}

000137a6 <atomic_and>:
{
   137a6:	4603      	mov	r3, r0
}
   137a8:	e8d3 0fef 	ldaex	r0, [r3]
   137ac:	ea00 0201 	and.w	r2, r0, r1
   137b0:	e8c3 2fec 	stlex	ip, r2, [r3]
   137b4:	f1bc 0f00 	cmp.w	ip, #0
   137b8:	d1f6      	bne.n	137a8 <atomic_and+0x2>
   137ba:	4770      	bx	lr

000137bc <atomic_set_bit_to>:
 * @param val true for 1, false for 0.
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
   137bc:	460b      	mov	r3, r1
   137be:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   137c0:	f001 041f 	and.w	r4, r1, #31
   137c4:	2101      	movs	r1, #1
   137c6:	095b      	lsrs	r3, r3, #5
   137c8:	40a1      	lsls	r1, r4

	if (val) {
   137ca:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   137ce:	b112      	cbz	r2, 137d6 <atomic_set_bit_to+0x1a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
   137d0:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   137d2:	f7ff bfd2 	b.w	1377a <atomic_or>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   137d6:	43c9      	mvns	r1, r1
}
   137d8:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   137da:	f7ff bfe4 	b.w	137a6 <atomic_and>

000137de <sys_put_le64>:
	dst[1] = val >> 8;
   137de:	f3c0 2307 	ubfx	r3, r0, #8, #8
   137e2:	7053      	strb	r3, [r2, #1]
	dst[0] = val;
   137e4:	2300      	movs	r3, #0
   137e6:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   137e8:	0e00      	lsrs	r0, r0, #24
   137ea:	70d0      	strb	r0, [r2, #3]
   137ec:	f3c1 2007 	ubfx	r0, r1, #8, #8
   137f0:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   137f2:	7093      	strb	r3, [r2, #2]
   137f4:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   137f6:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   137f8:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   137fa:	71d1      	strb	r1, [r2, #7]
}
   137fc:	4770      	bx	lr

000137fe <le_adv_set_private_addr.isra.0>:
static int le_set_private_addr(u8_t id)
   137fe:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   13800:	2106      	movs	r1, #6
   13802:	4668      	mov	r0, sp
   13804:	f7f3 f9c8 	bl	6b98 <bt_rand>
	if (err) {
   13808:	b940      	cbnz	r0, 1381c <le_adv_set_private_addr.isra.0+0x1e>
	nrpa.val[5] &= 0x3f;
   1380a:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   1380e:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
   13810:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   13814:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   13818:	f7f1 fd58 	bl	52cc <set_random_address>
}
   1381c:	b003      	add	sp, #12
   1381e:	f85d fb04 	ldr.w	pc, [sp], #4

00013822 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   13822:	f100 0314 	add.w	r3, r0, #20
{
   13826:	b510      	push	{r4, lr}
   13828:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1382a:	4618      	mov	r0, r3
   1382c:	f7ff ff9f 	bl	1376e <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   13830:	0642      	lsls	r2, r0, #25
   13832:	d50a      	bpl.n	1384a <adv_pause_enabled+0x28>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13834:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   13838:	4618      	mov	r0, r3
   1383a:	f7ff ff9e 	bl	1377a <atomic_or>
	return set_le_adv_enable_legacy(adv, enable);
   1383e:	4620      	mov	r0, r4
}
   13840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   13844:	2100      	movs	r1, #0
   13846:	f7f1 bd81 	b.w	534c <set_le_adv_enable_legacy>
}
   1384a:	bd10      	pop	{r4, pc}

0001384c <adv_unpause_enabled>:
{
   1384c:	b510      	push	{r4, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1384e:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   13852:	4604      	mov	r4, r0
   13854:	3014      	adds	r0, #20
   13856:	f7ff ffa6 	bl	137a6 <atomic_and>
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   1385a:	04c3      	lsls	r3, r0, #19
   1385c:	d505      	bpl.n	1386a <adv_unpause_enabled+0x1e>
	return set_le_adv_enable_legacy(adv, enable);
   1385e:	4620      	mov	r0, r4
}
   13860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   13864:	2101      	movs	r1, #1
   13866:	f7f1 bd71 	b.w	534c <set_le_adv_enable_legacy>
}
   1386a:	bd10      	pop	{r4, pc}

0001386c <hci_id_add.isra.0>:
static int hci_id_add(u8_t id, const bt_addr_le_t *addr, u8_t peer_irk[16])
   1386c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1386e:	4607      	mov	r7, r0
   13870:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   13872:	f242 0027 	movw	r0, #8231	; 0x2027
   13876:	2127      	movs	r1, #39	; 0x27
   13878:	f7f1 fc50 	bl	511c <bt_hci_cmd_create>
	if (!buf) {
   1387c:	4604      	mov	r4, r0
   1387e:	b1d0      	cbz	r0, 138b6 <hci_id_add.isra.0+0x4a>
	cp = net_buf_add(buf, sizeof(*cp));
   13880:	2127      	movs	r1, #39	; 0x27
   13882:	3008      	adds	r0, #8
   13884:	f7f9 fedc 	bl	d640 <net_buf_simple_add>
   13888:	4605      	mov	r5, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   1388a:	4639      	mov	r1, r7
   1388c:	f7ff ff72 	bl	13774 <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   13890:	4631      	mov	r1, r6
   13892:	2210      	movs	r2, #16
   13894:	1de8      	adds	r0, r5, #7
   13896:	f7ff fe6b 	bl	13570 <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   1389a:	2210      	movs	r2, #16
   1389c:	2100      	movs	r1, #0
   1389e:	f105 0017 	add.w	r0, r5, #23
   138a2:	f7ff fe90 	bl	135c6 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   138a6:	4621      	mov	r1, r4
}
   138a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   138ac:	2200      	movs	r2, #0
   138ae:	f242 0027 	movw	r0, #8231	; 0x2027
   138b2:	f7f1 bc7d 	b.w	51b0 <bt_hci_cmd_send_sync>
}
   138b6:	f06f 0036 	mvn.w	r0, #54	; 0x36
   138ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000138bc <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   138bc:	7a03      	ldrb	r3, [r0, #8]
   138be:	075b      	lsls	r3, r3, #29
   138c0:	d504      	bpl.n	138cc <keys_add_id+0x10>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   138c2:	f100 012a 	add.w	r1, r0, #42	; 0x2a
   138c6:	3001      	adds	r0, #1
   138c8:	f7ff bfd0 	b.w	1386c <hci_id_add.isra.0>
}
   138cc:	4770      	bx	lr

000138ce <addr_res_enable>:
{
   138ce:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   138d0:	2101      	movs	r1, #1
{
   138d2:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   138d4:	f242 002d 	movw	r0, #8237	; 0x202d
   138d8:	f7f1 fc20 	bl	511c <bt_hci_cmd_create>
	if (!buf) {
   138dc:	4604      	mov	r4, r0
   138de:	b158      	cbz	r0, 138f8 <addr_res_enable+0x2a>
	net_buf_add_u8(buf, enable);
   138e0:	4629      	mov	r1, r5
   138e2:	3008      	adds	r0, #8
   138e4:	f001 febc 	bl	15660 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   138e8:	4621      	mov	r1, r4
}
   138ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   138ee:	2200      	movs	r2, #0
   138f0:	f242 002d 	movw	r0, #8237	; 0x202d
   138f4:	f7f1 bc5c 	b.w	51b0 <bt_hci_cmd_send_sync>
}
   138f8:	f06f 0036 	mvn.w	r0, #54	; 0x36
   138fc:	bd38      	pop	{r3, r4, r5, pc}

000138fe <set_le_scan_enable>:
	return set_le_scan_enable_legacy(enable);
   138fe:	f7f1 bd53 	b.w	53a8 <set_le_scan_enable_legacy>

00013902 <bt_lookup_id_addr>:
{
   13902:	b510      	push	{r4, lr}
   13904:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   13906:	f7f9 fa7b 	bl	ce00 <bt_keys_find_irk>
		if (keys) {
   1390a:	b100      	cbz	r0, 1390e <bt_lookup_id_addr+0xc>
			return &keys->addr;
   1390c:	1c44      	adds	r4, r0, #1
}
   1390e:	4620      	mov	r0, r4
   13910:	bd10      	pop	{r4, pc}

00013912 <bt_le_scan_random_addr_check>:
}
   13912:	2001      	movs	r0, #1
   13914:	4770      	bx	lr

00013916 <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   13916:	f7f1 bdd1 	b.w	54bc <bt_le_create_conn_legacy>

0001391a <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1391a:	8802      	ldrh	r2, [r0, #0]
   1391c:	8843      	ldrh	r3, [r0, #2]
{
   1391e:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   13920:	429a      	cmp	r2, r3
   13922:	d818      	bhi.n	13956 <bt_le_conn_params_valid+0x3c>
   13924:	2a05      	cmp	r2, #5
   13926:	d916      	bls.n	13956 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   13928:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   1392c:	d813      	bhi.n	13956 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   1392e:	8884      	ldrh	r4, [r0, #4]
   13930:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   13934:	d20f      	bcs.n	13956 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   13936:	88c1      	ldrh	r1, [r0, #6]
   13938:	f640 4076 	movw	r0, #3190	; 0xc76
   1393c:	f1a1 020a 	sub.w	r2, r1, #10
   13940:	b292      	uxth	r2, r2
   13942:	4282      	cmp	r2, r0
   13944:	d807      	bhi.n	13956 <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   13946:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   1394a:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   1394e:	bf34      	ite	cc
   13950:	2001      	movcc	r0, #1
   13952:	2000      	movcs	r0, #0
}
   13954:	bd10      	pop	{r4, pc}
		return false;
   13956:	2000      	movs	r0, #0
   13958:	e7fc      	b.n	13954 <bt_le_conn_params_valid+0x3a>

0001395a <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   1395a:	7a03      	ldrb	r3, [r0, #8]
   1395c:	07d9      	lsls	r1, r3, #31
   1395e:	d504      	bpl.n	1396a <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   13960:	f023 0301 	bic.w	r3, r3, #1
   13964:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   13966:	f7f1 be39 	b.w	55dc <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   1396a:	0799      	lsls	r1, r3, #30
   1396c:	d504      	bpl.n	13978 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   1396e:	f023 0302 	bic.w	r3, r3, #2
   13972:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   13974:	f7f1 beec 	b.w	5750 <bt_id_del>
}
   13978:	4770      	bx	lr

0001397a <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
   1397a:	2301      	movs	r3, #1
{
   1397c:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1397e:	2106      	movs	r1, #6
{
   13980:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   13982:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   13986:	f7f3 f907 	bl	6b98 <bt_rand>
	if (err) {
   1398a:	b918      	cbnz	r0, 13994 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
   1398c:	79a3      	ldrb	r3, [r4, #6]
   1398e:	f063 033f 	orn	r3, r3, #63	; 0x3f
   13992:	71a3      	strb	r3, [r4, #6]
}
   13994:	bd10      	pop	{r4, pc}

00013996 <bt_hci_disconnect>:
{
   13996:	b570      	push	{r4, r5, r6, lr}
   13998:	4606      	mov	r6, r0
   1399a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1399c:	f240 4006 	movw	r0, #1030	; 0x406
   139a0:	2103      	movs	r1, #3
   139a2:	f7f1 fbbb 	bl	511c <bt_hci_cmd_create>
	if (!buf) {
   139a6:	4604      	mov	r4, r0
   139a8:	b160      	cbz	r0, 139c4 <bt_hci_disconnect+0x2e>
	disconn = net_buf_add(buf, sizeof(*disconn));
   139aa:	2103      	movs	r1, #3
   139ac:	3008      	adds	r0, #8
   139ae:	f7f9 fe47 	bl	d640 <net_buf_simple_add>
	disconn->reason = reason;
   139b2:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   139b4:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
   139b6:	4621      	mov	r1, r4
}
   139b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
   139bc:	f240 4006 	movw	r0, #1030	; 0x406
   139c0:	f7f2 b92e 	b.w	5c20 <bt_hci_cmd_send>
}
   139c4:	f06f 0036 	mvn.w	r0, #54	; 0x36
   139c8:	bd70      	pop	{r4, r5, r6, pc}

000139ca <bt_le_set_data_len>:
{
   139ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   139cc:	4607      	mov	r7, r0
   139ce:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   139d0:	f242 0022 	movw	r0, #8226	; 0x2022
   139d4:	2106      	movs	r1, #6
{
   139d6:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   139d8:	f7f1 fba0 	bl	511c <bt_hci_cmd_create>
	if (!buf) {
   139dc:	4604      	mov	r4, r0
   139de:	b170      	cbz	r0, 139fe <bt_le_set_data_len+0x34>
	cp = net_buf_add(buf, sizeof(*cp));
   139e0:	2106      	movs	r1, #6
   139e2:	3008      	adds	r0, #8
   139e4:	f7f9 fe2c 	bl	d640 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   139e8:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   139ea:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(conn->handle);
   139ec:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   139ee:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   139f0:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   139f2:	f242 0022 	movw	r0, #8226	; 0x2022
}
   139f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   139fa:	f7f2 b911 	b.w	5c20 <bt_hci_cmd_send>
}
   139fe:	f06f 0036 	mvn.w	r0, #54	; 0x36
   13a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00013a04 <bt_le_set_phy>:
{
   13a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13a06:	4607      	mov	r7, r0
   13a08:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   13a0a:	f242 0032 	movw	r0, #8242	; 0x2032
   13a0e:	2107      	movs	r1, #7
{
   13a10:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   13a12:	f7f1 fb83 	bl	511c <bt_hci_cmd_create>
	if (!buf) {
   13a16:	4604      	mov	r4, r0
   13a18:	b198      	cbz	r0, 13a42 <bt_le_set_phy+0x3e>
	cp = net_buf_add(buf, sizeof(*cp));
   13a1a:	2107      	movs	r1, #7
   13a1c:	3008      	adds	r0, #8
   13a1e:	f7f9 fe0f 	bl	d640 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   13a22:	883a      	ldrh	r2, [r7, #0]
	cp = net_buf_add(buf, sizeof(*cp));
   13a24:	4603      	mov	r3, r0
	cp->handle = sys_cpu_to_le16(conn->handle);
   13a26:	8002      	strh	r2, [r0, #0]
	cp->all_phys = 0U;
   13a28:	2000      	movs	r0, #0
	cp->tx_phys = pref_tx_phy;
   13a2a:	70de      	strb	r6, [r3, #3]
	cp->all_phys = 0U;
   13a2c:	7098      	strb	r0, [r3, #2]
	cp->rx_phys = pref_rx_phy;
   13a2e:	711d      	strb	r5, [r3, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
   13a30:	7158      	strb	r0, [r3, #5]
   13a32:	7198      	strb	r0, [r3, #6]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   13a34:	4621      	mov	r1, r4
}
   13a36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   13a3a:	f242 0032 	movw	r0, #8242	; 0x2032
   13a3e:	f7f2 b8ef 	b.w	5c20 <bt_hci_cmd_send>
}
   13a42:	f06f 0036 	mvn.w	r0, #54	; 0x36
   13a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00013a48 <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   13a48:	6880      	ldr	r0, [r0, #8]
   13a4a:	f7f2 ba6b 	b.w	5f24 <enh_conn_complete>

00013a4e <le_legacy_conn_complete>:
{
   13a4e:	b510      	push	{r4, lr}
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   13a50:	2400      	movs	r4, #0
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   13a52:	6881      	ldr	r1, [r0, #8]
{
   13a54:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   13a56:	780b      	ldrb	r3, [r1, #0]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   13a58:	a803      	add	r0, sp, #12
	enh.status         = evt->status;
   13a5a:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   13a5e:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   13a62:	3104      	adds	r1, #4
	enh.handle         = evt->handle;
   13a64:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   13a68:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   13a6c:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   13a70:	f8b1 3007 	ldrh.w	r3, [r1, #7]
   13a74:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   13a78:	f8b1 3009 	ldrh.w	r3, [r1, #9]
   13a7c:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   13a80:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   13a84:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   13a88:	7b4b      	ldrb	r3, [r1, #13]
   13a8a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   13a8e:	f7ff fe71 	bl	13774 <bt_addr_le_copy>
	memcpy(dst, src, sizeof(*dst));
   13a92:	4669      	mov	r1, sp
   13a94:	2206      	movs	r2, #6
   13a96:	f10d 0013 	add.w	r0, sp, #19
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   13a9a:	9400      	str	r4, [sp, #0]
   13a9c:	f8ad 4004 	strh.w	r4, [sp, #4]
   13aa0:	f7ff fd66 	bl	13570 <memcpy>
   13aa4:	2206      	movs	r2, #6
   13aa6:	4669      	mov	r1, sp
   13aa8:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   13aac:	9400      	str	r4, [sp, #0]
   13aae:	f8ad 4004 	strh.w	r4, [sp, #4]
   13ab2:	f7ff fd5d 	bl	13570 <memcpy>
	enh_conn_complete(&enh);
   13ab6:	a802      	add	r0, sp, #8
   13ab8:	f7f2 fa34 	bl	5f24 <enh_conn_complete>
}
   13abc:	b00a      	add	sp, #40	; 0x28
   13abe:	bd10      	pop	{r4, pc}

00013ac0 <bt_addr_le_is_bonded>:
{
   13ac0:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   13ac2:	f7f9 f9d7 	bl	ce74 <bt_keys_find_addr>
		return keys && keys->keys;
   13ac6:	b118      	cbz	r0, 13ad0 <bt_addr_le_is_bonded+0x10>
   13ac8:	89c0      	ldrh	r0, [r0, #14]
   13aca:	3800      	subs	r0, #0
   13acc:	bf18      	it	ne
   13ace:	2001      	movne	r0, #1
}
   13ad0:	bd08      	pop	{r3, pc}

00013ad2 <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
   13ad2:	b530      	push	{r4, r5, lr}
   13ad4:	b0b1      	sub	sp, #196	; 0xc4
   13ad6:	460d      	mov	r5, r1
	u8_t tmp[16];

	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	sys_memcpy_swap(tmp, key, 16);
   13ad8:	4601      	mov	r1, r0
   13ada:	4668      	mov	r0, sp
{
   13adc:	4614      	mov	r4, r2
	sys_memcpy_swap(tmp, key, 16);
   13ade:	f7f2 ffff 	bl	6ae0 <sys_memcpy_swap.constprop.0>

	if (tc_aes128_set_encrypt_key(&s, tmp) == TC_CRYPTO_FAIL) {
   13ae2:	4669      	mov	r1, sp
   13ae4:	a804      	add	r0, sp, #16
   13ae6:	f7ef fe53 	bl	3790 <tc_aes128_set_encrypt_key>
   13aea:	b1c0      	cbz	r0, 13b1e <bt_encrypt_le+0x4c>
		return -EINVAL;
	}

	sys_memcpy_swap(tmp, plaintext, 16);
   13aec:	4629      	mov	r1, r5
   13aee:	4668      	mov	r0, sp
   13af0:	f7f2 fff6 	bl	6ae0 <sys_memcpy_swap.constprop.0>

	if (tc_aes_encrypt(enc_data, tmp, &s) == TC_CRYPTO_FAIL) {
   13af4:	4669      	mov	r1, sp
   13af6:	4620      	mov	r0, r4
   13af8:	aa04      	add	r2, sp, #16
   13afa:	f7ef fe9d 	bl	3838 <tc_aes_encrypt>
   13afe:	b170      	cbz	r0, 13b1e <bt_encrypt_le+0x4c>
   13b00:	1e63      	subs	r3, r4, #1
   13b02:	f104 0210 	add.w	r2, r4, #16
   13b06:	3407      	adds	r4, #7
		u8_t tmp = ((u8_t *)buf)[i];
   13b08:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
   13b0c:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   13b10:	42a3      	cmp	r3, r4
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
   13b12:	7018      	strb	r0, [r3, #0]
		((u8_t *)buf)[length - 1 - i] = tmp;
   13b14:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   13b16:	d1f7      	bne.n	13b08 <bt_encrypt_le+0x36>

	sys_mem_swap(enc_data, 16);

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
   13b18:	2000      	movs	r0, #0
}
   13b1a:	b031      	add	sp, #196	; 0xc4
   13b1c:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   13b1e:	f06f 0015 	mvn.w	r0, #21
   13b22:	e7fa      	b.n	13b1a <bt_encrypt_le+0x48>

00013b24 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13b24:	e8d0 0faf 	lda	r0, [r0]
}
   13b28:	4770      	bx	lr

00013b2a <bt_conn_reset_rx_state>:
	if (!conn->rx_len) {
   13b2a:	89c3      	ldrh	r3, [r0, #14]
{
   13b2c:	b510      	push	{r4, lr}
   13b2e:	4604      	mov	r4, r0
	if (!conn->rx_len) {
   13b30:	b12b      	cbz	r3, 13b3e <bt_conn_reset_rx_state+0x14>
	net_buf_unref(conn->rx);
   13b32:	6900      	ldr	r0, [r0, #16]
   13b34:	f7f9 fc12 	bl	d35c <net_buf_unref>
	conn->rx = NULL;
   13b38:	2300      	movs	r3, #0
   13b3a:	6123      	str	r3, [r4, #16]
	conn->rx_len = 0U;
   13b3c:	81e3      	strh	r3, [r4, #14]
}
   13b3e:	bd10      	pop	{r4, pc}

00013b40 <atomic_dec>:
{
   13b40:	4603      	mov	r3, r0
}
   13b42:	e8d3 0fef 	ldaex	r0, [r3]
   13b46:	1e42      	subs	r2, r0, #1
   13b48:	e8c3 2fe1 	stlex	r1, r2, [r3]
   13b4c:	2900      	cmp	r1, #0
   13b4e:	d1f8      	bne.n	13b42 <atomic_dec+0x2>
   13b50:	4770      	bx	lr

00013b52 <atomic_inc>:
{
   13b52:	4603      	mov	r3, r0
}
   13b54:	e8d3 0fef 	ldaex	r0, [r3]
   13b58:	1c42      	adds	r2, r0, #1
   13b5a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   13b5e:	2900      	cmp	r1, #0
   13b60:	d1f8      	bne.n	13b54 <atomic_inc+0x2>
   13b62:	4770      	bx	lr

00013b64 <tx_notify>:
{
   13b64:	b570      	push	{r4, r5, r6, lr}
   13b66:	4604      	mov	r4, r0
	__asm__ volatile(
   13b68:	f04f 0220 	mov.w	r2, #32
   13b6c:	f3ef 8311 	mrs	r3, BASEPRI
   13b70:	f382 8811 	msr	BASEPRI, r2
   13b74:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   13b78:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   13b7a:	b920      	cbnz	r0, 13b86 <tx_notify+0x22>
	__asm__ volatile(
   13b7c:	f383 8811 	msr	BASEPRI, r3
   13b80:	f3bf 8f6f 	isb	sy
}
   13b84:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13b86:	6a61      	ldr	r1, [r4, #36]	; 0x24
   13b88:	6802      	ldr	r2, [r0, #0]
   13b8a:	4288      	cmp	r0, r1
	list->tail = node;
   13b8c:	bf08      	it	eq
   13b8e:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
   13b90:	6222      	str	r2, [r4, #32]
   13b92:	f383 8811 	msr	BASEPRI, r3
   13b96:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   13b9a:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   13b9e:	f7f3 f813 	bl	6bc8 <tx_free>
		cb(conn, user_data);
   13ba2:	4631      	mov	r1, r6
   13ba4:	4620      	mov	r0, r4
   13ba6:	47a8      	blx	r5
	while (1) {
   13ba8:	e7de      	b.n	13b68 <tx_notify+0x4>

00013baa <tx_complete_work>:
	tx_notify(conn);
   13baa:	3828      	subs	r0, #40	; 0x28
   13bac:	f7ff bfda 	b.w	13b64 <tx_notify>

00013bb0 <bt_conn_le_start_encryption>:
{
   13bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13bb4:	4682      	mov	sl, r0
   13bb6:	4689      	mov	r9, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   13bb8:	f242 0019 	movw	r0, #8217	; 0x2019
   13bbc:	211c      	movs	r1, #28
{
   13bbe:	4690      	mov	r8, r2
   13bc0:	461f      	mov	r7, r3
   13bc2:	9e08      	ldr	r6, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   13bc4:	f7f1 faaa 	bl	511c <bt_hci_cmd_create>
	if (!buf) {
   13bc8:	4605      	mov	r5, r0
   13bca:	b340      	cbz	r0, 13c1e <bt_conn_le_start_encryption+0x6e>
	cp = net_buf_add(buf, sizeof(*cp));
   13bcc:	211c      	movs	r1, #28
   13bce:	3008      	adds	r0, #8
   13bd0:	f7f9 fd36 	bl	d640 <net_buf_simple_add>
   13bd4:	4604      	mov	r4, r0
	cp->handle = sys_cpu_to_le16(conn->handle);
   13bd6:	f8ba 3000 	ldrh.w	r3, [sl]
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   13bda:	2208      	movs	r2, #8
	cp->handle = sys_cpu_to_le16(conn->handle);
   13bdc:	f820 3b02 	strh.w	r3, [r0], #2
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   13be0:	4649      	mov	r1, r9
   13be2:	f7ff fcc5 	bl	13570 <memcpy>
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   13be6:	2202      	movs	r2, #2
   13be8:	4641      	mov	r1, r8
   13bea:	f104 000a 	add.w	r0, r4, #10
	memcpy(cp->ltk, ltk, len);
   13bee:	340c      	adds	r4, #12
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   13bf0:	f7ff fcbe 	bl	13570 <memcpy>
	memcpy(cp->ltk, ltk, len);
   13bf4:	4632      	mov	r2, r6
   13bf6:	4639      	mov	r1, r7
   13bf8:	4620      	mov	r0, r4
   13bfa:	f7ff fcb9 	bl	13570 <memcpy>
	if (len < sizeof(cp->ltk)) {
   13bfe:	2e0f      	cmp	r6, #15
   13c00:	d805      	bhi.n	13c0e <bt_conn_le_start_encryption+0x5e>
		(void)memset(cp->ltk + len, 0, sizeof(cp->ltk) - len);
   13c02:	2100      	movs	r1, #0
   13c04:	f1c6 0210 	rsb	r2, r6, #16
   13c08:	19a0      	adds	r0, r4, r6
   13c0a:	f7ff fcdc 	bl	135c6 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   13c0e:	4629      	mov	r1, r5
}
   13c10:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   13c14:	2200      	movs	r2, #0
   13c16:	f242 0019 	movw	r0, #8217	; 0x2019
   13c1a:	f7f1 bac9 	b.w	51b0 <bt_hci_cmd_send_sync>
}
   13c1e:	f06f 0036 	mvn.w	r0, #54	; 0x36
   13c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00013c26 <bt_conn_set_security>:
{
   13c26:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   13c28:	7b43      	ldrb	r3, [r0, #13]
{
   13c2a:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   13c2c:	2b07      	cmp	r3, #7
   13c2e:	d124      	bne.n	13c7a <bt_conn_set_security+0x54>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   13c30:	7a43      	ldrb	r3, [r0, #9]
   13c32:	428b      	cmp	r3, r1
   13c34:	d224      	bcs.n	13c80 <bt_conn_set_security+0x5a>
   13c36:	7a83      	ldrb	r3, [r0, #10]
   13c38:	428b      	cmp	r3, r1
   13c3a:	d221      	bcs.n	13c80 <bt_conn_set_security+0x5a>
	if (val) {
   13c3c:	060a      	lsls	r2, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   13c3e:	f100 0304 	add.w	r3, r0, #4
   13c42:	d511      	bpl.n	13c68 <bt_conn_set_security+0x42>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13c44:	e8d3 2fef 	ldaex	r2, [r3]
   13c48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   13c4c:	e8c3 2fe0 	stlex	r0, r2, [r3]
   13c50:	2800      	cmp	r0, #0
   13c52:	d1f7      	bne.n	13c44 <bt_conn_set_security+0x1e>
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   13c54:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		return bt_smp_start_security(conn);
   13c58:	4620      	mov	r0, r4
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   13c5a:	72a1      	strb	r1, [r4, #10]
		return bt_smp_start_security(conn);
   13c5c:	f001 fc45 	bl	154ea <bt_smp_start_security>
	if (err) {
   13c60:	b108      	cbz	r0, 13c66 <bt_conn_set_security+0x40>
		conn->required_sec_level = conn->sec_level;
   13c62:	7a63      	ldrb	r3, [r4, #9]
   13c64:	72a3      	strb	r3, [r4, #10]
}
   13c66:	bd10      	pop	{r4, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13c68:	e8d3 2fef 	ldaex	r2, [r3]
   13c6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   13c70:	e8c3 2fe0 	stlex	r0, r2, [r3]
   13c74:	2800      	cmp	r0, #0
   13c76:	d0ed      	beq.n	13c54 <bt_conn_set_security+0x2e>
   13c78:	e7f6      	b.n	13c68 <bt_conn_set_security+0x42>
		return -ENOTCONN;
   13c7a:	f06f 0038 	mvn.w	r0, #56	; 0x38
   13c7e:	e7f2      	b.n	13c66 <bt_conn_set_security+0x40>
		return 0;
   13c80:	2000      	movs	r0, #0
   13c82:	e7f0      	b.n	13c66 <bt_conn_set_security+0x40>

00013c84 <bt_conn_get_security>:
}
   13c84:	7a40      	ldrb	r0, [r0, #9]
   13c86:	4770      	bx	lr

00013c88 <bt_conn_is_peer_addr_le>:
{
   13c88:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   13c8a:	7a03      	ldrb	r3, [r0, #8]
{
   13c8c:	4604      	mov	r4, r0
	if (id != conn->id) {
   13c8e:	428b      	cmp	r3, r1
{
   13c90:	4615      	mov	r5, r2
	if (id != conn->id) {
   13c92:	d115      	bne.n	13cc0 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   13c94:	f100 017c 	add.w	r1, r0, #124	; 0x7c
   13c98:	2207      	movs	r2, #7
   13c9a:	4628      	mov	r0, r5
   13c9c:	f7ff fc58 	bl	13550 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   13ca0:	b180      	cbz	r0, 13cc4 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   13ca2:	78e3      	ldrb	r3, [r4, #3]
   13ca4:	2207      	movs	r2, #7
   13ca6:	b943      	cbnz	r3, 13cba <bt_conn_is_peer_addr_le+0x32>
   13ca8:	f104 018a 	add.w	r1, r4, #138	; 0x8a
   13cac:	4628      	mov	r0, r5
   13cae:	f7ff fc4f 	bl	13550 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   13cb2:	fab0 f080 	clz	r0, r0
   13cb6:	0940      	lsrs	r0, r0, #5
}
   13cb8:	bd38      	pop	{r3, r4, r5, pc}
   13cba:	f104 0183 	add.w	r1, r4, #131	; 0x83
   13cbe:	e7f5      	b.n	13cac <bt_conn_is_peer_addr_le+0x24>
		return false;
   13cc0:	2000      	movs	r0, #0
   13cc2:	e7f9      	b.n	13cb8 <bt_conn_is_peer_addr_le+0x30>
		return true;
   13cc4:	2001      	movs	r0, #1
   13cc6:	e7f7      	b.n	13cb8 <bt_conn_is_peer_addr_le+0x30>

00013cc8 <bt_conn_ref>:
{
   13cc8:	b510      	push	{r4, lr}
   13cca:	4604      	mov	r4, r0
	atomic_val_t old = atomic_inc(&conn->ref);
   13ccc:	3058      	adds	r0, #88	; 0x58
   13cce:	f7ff ff40 	bl	13b52 <atomic_inc>
}
   13cd2:	4620      	mov	r0, r4
   13cd4:	bd10      	pop	{r4, pc}

00013cd6 <bt_conn_unref>:
	atomic_val_t old = atomic_dec(&conn->ref);
   13cd6:	3058      	adds	r0, #88	; 0x58
   13cd8:	f7ff bf32 	b.w	13b40 <atomic_dec>

00013cdc <bt_conn_get_dst>:
}
   13cdc:	307c      	adds	r0, #124	; 0x7c
   13cde:	4770      	bx	lr

00013ce0 <bt_conn_le_conn_update>:
{
   13ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13ce2:	4607      	mov	r7, r0
   13ce4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   13ce6:	f242 0013 	movw	r0, #8211	; 0x2013
   13cea:	210e      	movs	r1, #14
   13cec:	f7f1 fa16 	bl	511c <bt_hci_cmd_create>
	if (!buf) {
   13cf0:	4606      	mov	r6, r0
   13cf2:	b1d0      	cbz	r0, 13d2a <bt_conn_le_conn_update+0x4a>
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   13cf4:	210e      	movs	r1, #14
   13cf6:	3008      	adds	r0, #8
   13cf8:	f7f9 fca2 	bl	d640 <net_buf_simple_add>
   13cfc:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   13cfe:	220e      	movs	r2, #14
   13d00:	2100      	movs	r1, #0
   13d02:	f7ff fc60 	bl	135c6 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   13d06:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   13d08:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   13d0a:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   13d0c:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   13d0e:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   13d10:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   13d12:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   13d14:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   13d18:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   13d1a:	88ab      	ldrh	r3, [r5, #4]
   13d1c:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   13d1e:	88eb      	ldrh	r3, [r5, #6]
   13d20:	8123      	strh	r3, [r4, #8]
}
   13d22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   13d26:	f7f1 ba43 	b.w	51b0 <bt_hci_cmd_send_sync>
}
   13d2a:	f06f 0036 	mvn.w	r0, #54	; 0x36
   13d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00013d30 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   13d30:	6813      	ldr	r3, [r2, #0]
   13d32:	b939      	cbnz	r1, 13d44 <sys_slist_remove+0x14>
   13d34:	6841      	ldr	r1, [r0, #4]
	list->head = node;
   13d36:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   13d38:	428a      	cmp	r2, r1
   13d3a:	d100      	bne.n	13d3e <sys_slist_remove+0xe>
	list->tail = node;
   13d3c:	6043      	str	r3, [r0, #4]
	parent->next = child;
   13d3e:	2300      	movs	r3, #0
   13d40:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   13d42:	4770      	bx	lr
	parent->next = child;
   13d44:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   13d46:	6843      	ldr	r3, [r0, #4]
   13d48:	429a      	cmp	r2, r3
	list->tail = node;
   13d4a:	bf08      	it	eq
   13d4c:	6041      	streq	r1, [r0, #4]
}
   13d4e:	e7f6      	b.n	13d3e <sys_slist_remove+0xe>

00013d50 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   13d50:	4603      	mov	r3, r0
	size_t bytes = 0;
   13d52:	2000      	movs	r0, #0

	while (buf) {
   13d54:	b903      	cbnz	r3, 13d58 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   13d56:	4770      	bx	lr
		bytes += buf->len;
   13d58:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   13d5a:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   13d5c:	4410      	add	r0, r2
		buf = buf->frags;
   13d5e:	e7f9      	b.n	13d54 <net_buf_frags_len+0x4>

00013d60 <__l2cap_lookup_ident>:
{
   13d60:	b538      	push	{r3, r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   13d62:	6d04      	ldr	r4, [r0, #80]	; 0x50
{
   13d64:	460b      	mov	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   13d66:	b164      	cbz	r4, 13d82 <__l2cap_lookup_ident+0x22>
   13d68:	2100      	movs	r1, #0
   13d6a:	3c08      	subs	r4, #8
   13d6c:	b14c      	cbz	r4, 13d82 <__l2cap_lookup_ident+0x22>
		if (chan->ident == ident) {
   13d6e:	f894 5038 	ldrb.w	r5, [r4, #56]	; 0x38
   13d72:	429d      	cmp	r5, r3
   13d74:	d107      	bne.n	13d86 <__l2cap_lookup_ident+0x26>
			if (remove) {
   13d76:	b122      	cbz	r2, 13d82 <__l2cap_lookup_ident+0x22>
				sys_slist_remove(&conn->channels, prev,
   13d78:	f104 0208 	add.w	r2, r4, #8
   13d7c:	3050      	adds	r0, #80	; 0x50
   13d7e:	f7ff ffd7 	bl	13d30 <sys_slist_remove>
}
   13d82:	4620      	mov	r0, r4
   13d84:	bd38      	pop	{r3, r4, r5, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   13d86:	f114 0108 	adds.w	r1, r4, #8
   13d8a:	d004      	beq.n	13d96 <__l2cap_lookup_ident+0x36>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   13d8c:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   13d8e:	2c00      	cmp	r4, #0
   13d90:	d0f7      	beq.n	13d82 <__l2cap_lookup_ident+0x22>
   13d92:	3c08      	subs	r4, #8
   13d94:	e7ea      	b.n	13d6c <__l2cap_lookup_ident+0xc>
	return NULL;
   13d96:	460c      	mov	r4, r1
   13d98:	e7f3      	b.n	13d82 <__l2cap_lookup_ident+0x22>

00013d9a <l2cap_remove_rx_cid>:
	if (!L2CAP_LE_CID_IS_DYN(cid)) {
   13d9a:	f1a1 0240 	sub.w	r2, r1, #64	; 0x40
   13d9e:	2a3f      	cmp	r2, #63	; 0x3f
{
   13da0:	b538      	push	{r3, r4, r5, lr}
   13da2:	460b      	mov	r3, r1
	if (!L2CAP_LE_CID_IS_DYN(cid)) {
   13da4:	d815      	bhi.n	13dd2 <l2cap_remove_rx_cid+0x38>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   13da6:	6d04      	ldr	r4, [r0, #80]	; 0x50
   13da8:	b154      	cbz	r4, 13dc0 <l2cap_remove_rx_cid+0x26>
   13daa:	2100      	movs	r1, #0
   13dac:	3c08      	subs	r4, #8
   13dae:	b13c      	cbz	r4, 13dc0 <l2cap_remove_rx_cid+0x26>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   13db0:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
   13db2:	f104 0208 	add.w	r2, r4, #8
   13db6:	429d      	cmp	r5, r3
   13db8:	d104      	bne.n	13dc4 <l2cap_remove_rx_cid+0x2a>
			sys_slist_remove(&conn->channels, prev, &chan->node);
   13dba:	3050      	adds	r0, #80	; 0x50
   13dbc:	f7ff ffb8 	bl	13d30 <sys_slist_remove>
}
   13dc0:	4620      	mov	r0, r4
   13dc2:	bd38      	pop	{r3, r4, r5, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   13dc4:	b13a      	cbz	r2, 13dd6 <l2cap_remove_rx_cid+0x3c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   13dc6:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   13dc8:	2c00      	cmp	r4, #0
   13dca:	d0f9      	beq.n	13dc0 <l2cap_remove_rx_cid+0x26>
   13dcc:	4611      	mov	r1, r2
   13dce:	3c08      	subs	r4, #8
   13dd0:	e7ed      	b.n	13dae <l2cap_remove_rx_cid+0x14>
		return NULL;
   13dd2:	2400      	movs	r4, #0
   13dd4:	e7f4      	b.n	13dc0 <l2cap_remove_rx_cid+0x26>
   13dd6:	4614      	mov	r4, r2
   13dd8:	e7f2      	b.n	13dc0 <l2cap_remove_rx_cid+0x26>

00013dda <l2cap_alloc_frag>:
	frag = chan->chan.ops->alloc_buf(&chan->chan);
   13dda:	6853      	ldr	r3, [r2, #4]
{
   13ddc:	4610      	mov	r0, r2
	frag = chan->chan.ops->alloc_buf(&chan->chan);
   13dde:	68db      	ldr	r3, [r3, #12]
   13de0:	4718      	bx	r3

00013de2 <l2cap_connected>:
}
   13de2:	4770      	bx	lr

00013de4 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13de4:	e8d0 0faf 	lda	r0, [r0]
}
   13de8:	4770      	bx	lr

00013dea <atomic_add>:
{
   13dea:	4603      	mov	r3, r0
}
   13dec:	e8d3 0fef 	ldaex	r0, [r3]
   13df0:	1842      	adds	r2, r0, r1
   13df2:	e8c3 2fec 	stlex	ip, r2, [r3]
   13df6:	f1bc 0f00 	cmp.w	ip, #0
   13dfa:	d1f7      	bne.n	13dec <atomic_add+0x2>
   13dfc:	4770      	bx	lr

00013dfe <l2cap_chan_destroy>:
{
   13dfe:	b570      	push	{r4, r5, r6, lr}
   13e00:	4604      	mov	r4, r0
	k_delayed_work_cancel(&chan->rtx_work);
   13e02:	3010      	adds	r0, #16
   13e04:	f7fd f90a 	bl	1101c <k_delayed_work_cancel>
	if (ch->tx_buf) {
   13e08:	6f20      	ldr	r0, [r4, #112]	; 0x70
   13e0a:	b118      	cbz	r0, 13e14 <l2cap_chan_destroy+0x16>
		net_buf_unref(ch->tx_buf);
   13e0c:	f7f9 faa6 	bl	d35c <net_buf_unref>
		ch->tx_buf = NULL;
   13e10:	2300      	movs	r3, #0
   13e12:	6723      	str	r3, [r4, #112]	; 0x70
	while ((buf = net_buf_get(&ch->tx_queue, K_NO_WAIT))) {
   13e14:	f104 0554 	add.w	r5, r4, #84	; 0x54
   13e18:	2200      	movs	r2, #0
   13e1a:	2300      	movs	r3, #0
   13e1c:	4628      	mov	r0, r5
   13e1e:	f7f9 fa0b 	bl	d238 <net_buf_get>
   13e22:	b990      	cbnz	r0, 13e4a <l2cap_chan_destroy+0x4c>
	while ((buf = net_buf_get(&ch->rx_queue, K_NO_WAIT))) {
   13e24:	f104 0694 	add.w	r6, r4, #148	; 0x94
   13e28:	2200      	movs	r2, #0
   13e2a:	2300      	movs	r3, #0
   13e2c:	4630      	mov	r0, r6
   13e2e:	f7f9 fa03 	bl	d238 <net_buf_get>
   13e32:	4605      	mov	r5, r0
   13e34:	b960      	cbnz	r0, 13e50 <l2cap_chan_destroy+0x52>
	if (ch->_sdu) {
   13e36:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
   13e3a:	b128      	cbz	r0, 13e48 <l2cap_chan_destroy+0x4a>
		net_buf_unref(ch->_sdu);
   13e3c:	f7f9 fa8e 	bl	d35c <net_buf_unref>
		ch->_sdu = NULL;
   13e40:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
		ch->_sdu_len = 0U;
   13e44:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
}
   13e48:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   13e4a:	f7f9 fa87 	bl	d35c <net_buf_unref>
   13e4e:	e7e3      	b.n	13e18 <l2cap_chan_destroy+0x1a>
		net_buf_unref(buf);
   13e50:	f7f9 fa84 	bl	d35c <net_buf_unref>
   13e54:	e7e8      	b.n	13e28 <l2cap_chan_destroy+0x2a>

00013e56 <l2cap_chan_rx_init>:
	if (!chan->rx.mtu) {
   13e56:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
   13e58:	b90b      	cbnz	r3, 13e5e <l2cap_chan_rx_init+0x8>
		chan->rx.mtu = L2CAP_MAX_LE_MTU;
   13e5a:	23f5      	movs	r3, #245	; 0xf5
   13e5c:	87c3      	strh	r3, [r0, #62]	; 0x3e
	if (!chan->rx.init_credits) {
   13e5e:	f8b0 2042 	ldrh.w	r2, [r0, #66]	; 0x42
   13e62:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
   13e64:	b94a      	cbnz	r2, 13e7a <l2cap_chan_rx_init+0x24>
		if (chan->chan.ops->alloc_buf) {
   13e66:	6842      	ldr	r2, [r0, #4]
   13e68:	68d2      	ldr	r2, [r2, #12]
   13e6a:	b1aa      	cbz	r2, 13e98 <l2cap_chan_rx_init+0x42>
						 (L2CAP_MAX_LE_MPS - 1)) /
   13e6c:	21f7      	movs	r1, #247	; 0xf7
			chan->rx.init_credits = (chan->rx.mtu +
   13e6e:	f103 02f6 	add.w	r2, r3, #246	; 0xf6
						 (L2CAP_MAX_LE_MPS - 1)) /
   13e72:	fbb2 f2f1 	udiv	r2, r2, r1
			chan->rx.init_credits = L2CAP_LE_MAX_CREDITS;
   13e76:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
	chan->rx.mps = MIN(chan->rx.mtu + 2, L2CAP_MAX_LE_MPS);
   13e7a:	3302      	adds	r3, #2
   13e7c:	2bf7      	cmp	r3, #247	; 0xf7
   13e7e:	bfa8      	it	ge
   13e80:	23f7      	movge	r3, #247	; 0xf7
   13e82:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   13e86:	2300      	movs	r3, #0
   13e88:	3044      	adds	r0, #68	; 0x44
   13e8a:	e8d0 2fef 	ldaex	r2, [r0]
   13e8e:	e8c0 3fe1 	stlex	r1, r3, [r0]
   13e92:	2900      	cmp	r1, #0
   13e94:	d1f9      	bne.n	13e8a <l2cap_chan_rx_init+0x34>
}
   13e96:	4770      	bx	lr
			chan->rx.init_credits = L2CAP_LE_MAX_CREDITS;
   13e98:	2205      	movs	r2, #5
   13e9a:	e7ec      	b.n	13e76 <l2cap_chan_rx_init+0x20>

00013e9c <l2cap_disconnected>:
   13e9c:	4770      	bx	lr

00013e9e <l2cap_chan_tx_give_credits>:
{
   13e9e:	b510      	push	{r4, lr}
   13ea0:	4604      	mov	r4, r0
	atomic_add(&chan->tx.credits, credits);
   13ea2:	3050      	adds	r0, #80	; 0x50
   13ea4:	f7ff ffa1 	bl	13dea <atomic_add>
	if (!atomic_test_and_set_bit(chan->chan.status, BT_L2CAP_STATUS_OUT) &&
   13ea8:	f104 0130 	add.w	r1, r4, #48	; 0x30
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13eac:	e8d1 3fef 	ldaex	r3, [r1]
   13eb0:	f043 0201 	orr.w	r2, r3, #1
   13eb4:	e8c1 2fe0 	stlex	r0, r2, [r1]
   13eb8:	2800      	cmp	r0, #0
   13eba:	d1f7      	bne.n	13eac <l2cap_chan_tx_give_credits+0xe>
   13ebc:	07db      	lsls	r3, r3, #31
   13ebe:	d406      	bmi.n	13ece <l2cap_chan_tx_give_credits+0x30>
	    chan->chan.ops->status) {
   13ec0:	6863      	ldr	r3, [r4, #4]
   13ec2:	699b      	ldr	r3, [r3, #24]
	if (!atomic_test_and_set_bit(chan->chan.status, BT_L2CAP_STATUS_OUT) &&
   13ec4:	b11b      	cbz	r3, 13ece <l2cap_chan_tx_give_credits+0x30>
		chan->chan.ops->status(&chan->chan, chan->chan.status);
   13ec6:	4620      	mov	r0, r4
}
   13ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->chan.ops->status(&chan->chan, chan->chan.status);
   13ecc:	4718      	bx	r3
}
   13ece:	bd10      	pop	{r4, pc}

00013ed0 <l2cap_chan_tx_resume>:
{
   13ed0:	b508      	push	{r3, lr}
   13ed2:	4603      	mov	r3, r0
	if (!atomic_get(&ch->tx.credits) ||
   13ed4:	3050      	adds	r0, #80	; 0x50
   13ed6:	f7ff ff85 	bl	13de4 <atomic_get>
   13eda:	b148      	cbz	r0, 13ef0 <l2cap_chan_tx_resume+0x20>
   13edc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   13ede:	b90a      	cbnz	r2, 13ee4 <l2cap_chan_tx_resume+0x14>
	    (k_fifo_is_empty(&ch->tx_queue) && !ch->tx_buf)) {
   13ee0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   13ee2:	b12a      	cbz	r2, 13ef0 <l2cap_chan_tx_resume+0x20>
	k_work_submit_to_queue(&k_sys_work_q, work);
   13ee4:	f103 0074 	add.w	r0, r3, #116	; 0x74
}
   13ee8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   13eec:	f7f3 be1e 	b.w	7b2c <k_work_submit_to_queue.constprop.0>
   13ef0:	bd08      	pop	{r3, pc}

00013ef2 <l2cap_chan_seg_sent>:
	l2cap_chan_tx_resume(BT_L2CAP_LE_CHAN(chan));
   13ef2:	4608      	mov	r0, r1
   13ef4:	f7ff bfec 	b.w	13ed0 <l2cap_chan_tx_resume>

00013ef8 <l2cap_chan_sdu_sent>:
	if (chan->ops->sent) {
   13ef8:	684b      	ldr	r3, [r1, #4]
{
   13efa:	b510      	push	{r4, lr}
	if (chan->ops->sent) {
   13efc:	695b      	ldr	r3, [r3, #20]
{
   13efe:	460c      	mov	r4, r1
	if (chan->ops->sent) {
   13f00:	b10b      	cbz	r3, 13f06 <l2cap_chan_sdu_sent+0xe>
		chan->ops->sent(chan);
   13f02:	4608      	mov	r0, r1
   13f04:	4798      	blx	r3
	l2cap_chan_tx_resume(BT_L2CAP_LE_CHAN(chan));
   13f06:	4620      	mov	r0, r4
}
   13f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	l2cap_chan_tx_resume(BT_L2CAP_LE_CHAN(chan));
   13f0c:	f7ff bfe0 	b.w	13ed0 <l2cap_chan_tx_resume>

00013f10 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   13f10:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   13f12:	b410      	push	{r4}
   13f14:	460c      	mov	r4, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   13f16:	b113      	cbz	r3, 13f1e <bt_l2cap_chan_remove+0xe>
   13f18:	2100      	movs	r1, #0
   13f1a:	3b08      	subs	r3, #8
   13f1c:	b90b      	cbnz	r3, 13f22 <bt_l2cap_chan_remove+0x12>
}
   13f1e:	bc10      	pop	{r4}
   13f20:	4770      	bx	lr
		if (chan == ch) {
   13f22:	42a3      	cmp	r3, r4
   13f24:	f103 0208 	add.w	r2, r3, #8
   13f28:	d103      	bne.n	13f32 <bt_l2cap_chan_remove+0x22>
}
   13f2a:	bc10      	pop	{r4}
			sys_slist_remove(&conn->channels, prev, &chan->node);
   13f2c:	3050      	adds	r0, #80	; 0x50
   13f2e:	f7ff beff 	b.w	13d30 <sys_slist_remove>
Z_GENLIST_PEEK_NEXT(slist, snode)
   13f32:	2a00      	cmp	r2, #0
   13f34:	d0f3      	beq.n	13f1e <bt_l2cap_chan_remove+0xe>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   13f36:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   13f38:	2b00      	cmp	r3, #0
   13f3a:	d0f0      	beq.n	13f1e <bt_l2cap_chan_remove+0xe>
   13f3c:	4611      	mov	r1, r2
   13f3e:	3b08      	subs	r3, #8
   13f40:	e7ec      	b.n	13f1c <bt_l2cap_chan_remove+0xc>

00013f42 <bt_l2cap_chan_del>:
	if (!chan->conn) {
   13f42:	6803      	ldr	r3, [r0, #0]
{
   13f44:	b510      	push	{r4, lr}
   13f46:	4604      	mov	r4, r0
	if (!chan->conn) {
   13f48:	b12b      	cbz	r3, 13f56 <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
   13f4a:	6843      	ldr	r3, [r0, #4]
   13f4c:	685b      	ldr	r3, [r3, #4]
   13f4e:	b103      	cbz	r3, 13f52 <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
   13f50:	4798      	blx	r3
	chan->conn = NULL;
   13f52:	2300      	movs	r3, #0
   13f54:	6023      	str	r3, [r4, #0]
	chan->state = state;
   13f56:	2300      	movs	r3, #0
   13f58:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	chan->psm = 0U;
   13f5c:	86e3      	strh	r3, [r4, #54]	; 0x36
	if (chan->destroy) {
   13f5e:	68e3      	ldr	r3, [r4, #12]
   13f60:	b11b      	cbz	r3, 13f6a <bt_l2cap_chan_del+0x28>
		chan->destroy(chan);
   13f62:	4620      	mov	r0, r4
}
   13f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->destroy(chan);
   13f68:	4718      	bx	r3
}
   13f6a:	bd10      	pop	{r4, pc}

00013f6c <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   13f6c:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   13f6e:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   13f70:	b18b      	cbz	r3, 13f96 <bt_l2cap_disconnected+0x2a>
   13f72:	f1b3 0008 	subs.w	r0, r3, #8
   13f76:	d00e      	beq.n	13f96 <bt_l2cap_disconnected+0x2a>
   13f78:	681c      	ldr	r4, [r3, #0]
   13f7a:	b104      	cbz	r4, 13f7e <bt_l2cap_disconnected+0x12>
   13f7c:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   13f7e:	f7ff ffe0 	bl	13f42 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   13f82:	b144      	cbz	r4, 13f96 <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   13f84:	f114 0308 	adds.w	r3, r4, #8
   13f88:	d002      	beq.n	13f90 <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   13f8a:	68a3      	ldr	r3, [r4, #8]
   13f8c:	b103      	cbz	r3, 13f90 <bt_l2cap_disconnected+0x24>
   13f8e:	3b08      	subs	r3, #8
{
   13f90:	4620      	mov	r0, r4
   13f92:	461c      	mov	r4, r3
   13f94:	e7f3      	b.n	13f7e <bt_l2cap_disconnected+0x12>
}
   13f96:	bd10      	pop	{r4, pc}

00013f98 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   13f98:	3104      	adds	r1, #4
   13f9a:	f7f3 bbeb 	b.w	7774 <bt_conn_create_pdu_timeout>

00013f9e <bt_l2cap_send_cb>:
{
   13f9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13fa2:	4614      	mov	r4, r2
   13fa4:	4605      	mov	r5, r0
   13fa6:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
   13fa8:	f102 0008 	add.w	r0, r2, #8
   13fac:	2104      	movs	r1, #4
{
   13fae:	461e      	mov	r6, r3
   13fb0:	f8dd 8018 	ldr.w	r8, [sp, #24]
	hdr = net_buf_push(buf, sizeof(*hdr));
   13fb4:	f7f9 fae0 	bl	d578 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   13fb8:	89a2      	ldrh	r2, [r4, #12]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   13fba:	4643      	mov	r3, r8
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   13fbc:	3a04      	subs	r2, #4
   13fbe:	8002      	strh	r2, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
   13fc0:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   13fc2:	4632      	mov	r2, r6
   13fc4:	4621      	mov	r1, r4
   13fc6:	4628      	mov	r0, r5
}
   13fc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   13fcc:	f7f3 b838 	b.w	7040 <bt_conn_send_cb>

00013fd0 <l2cap_chan_le_send_sdu>:
{
   13fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	total_len = net_buf_frags_len(*buf) + sent;
   13fd4:	680c      	ldr	r4, [r1, #0]
{
   13fd6:	4607      	mov	r7, r0
	total_len = net_buf_frags_len(*buf) + sent;
   13fd8:	4620      	mov	r0, r4
{
   13fda:	4616      	mov	r6, r2
   13fdc:	4688      	mov	r8, r1
	total_len = net_buf_frags_len(*buf) + sent;
   13fde:	f7ff feb7 	bl	13d50 <net_buf_frags_len>
	if (total_len > ch->tx.mtu) {
   13fe2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
	total_len = net_buf_frags_len(*buf) + sent;
   13fe6:	eb06 0900 	add.w	r9, r6, r0
	if (total_len > ch->tx.mtu) {
   13fea:	454b      	cmp	r3, r9
   13fec:	db2e      	blt.n	1404c <l2cap_chan_le_send_sdu+0x7c>
	if (!frag->len && frag->frags) {
   13fee:	89a3      	ldrh	r3, [r4, #12]
   13ff0:	b91b      	cbnz	r3, 13ffa <l2cap_chan_le_send_sdu+0x2a>
   13ff2:	6823      	ldr	r3, [r4, #0]
   13ff4:	2b00      	cmp	r3, #0
   13ff6:	bf18      	it	ne
   13ff8:	461c      	movne	r4, r3
	if (!sent) {
   13ffa:	b986      	cbnz	r6, 1401e <l2cap_chan_le_send_sdu+0x4e>
		ret = l2cap_chan_le_send(ch, frag, BT_L2CAP_SDU_HDR_LEN);
   13ffc:	2202      	movs	r2, #2
   13ffe:	4621      	mov	r1, r4
   14000:	4638      	mov	r0, r7
   14002:	f7f3 fdbd 	bl	7b80 <l2cap_chan_le_send>
		if (ret < 0) {
   14006:	1e05      	subs	r5, r0, #0
   14008:	da08      	bge.n	1401c <l2cap_chan_le_send_sdu+0x4c>
			if (ret == -EAGAIN) {
   1400a:	f115 0f0b 	cmn.w	r5, #11
				data_sent(frag)->len = sent;
   1400e:	bf08      	it	eq
   14010:	82a6      	strheq	r6, [r4, #20]
			*buf = frag;
   14012:	f8c8 4000 	str.w	r4, [r8]
}
   14016:	4628      	mov	r0, r5
   14018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		sent = ret;
   1401c:	b2ae      	uxth	r6, r5
	if (!frag->len && frag->frags) {
   1401e:	2500      	movs	r5, #0
	for (ret = 0; sent < total_len; sent += ret) {
   14020:	454e      	cmp	r6, r9
   14022:	db03      	blt.n	1402c <l2cap_chan_le_send_sdu+0x5c>
	net_buf_unref(frag);
   14024:	4620      	mov	r0, r4
   14026:	f7f9 f999 	bl	d35c <net_buf_unref>
	return ret;
   1402a:	e7f4      	b.n	14016 <l2cap_chan_le_send_sdu+0x46>
		if (!frag->len) {
   1402c:	89a0      	ldrh	r0, [r4, #12]
   1402e:	b918      	cbnz	r0, 14038 <l2cap_chan_le_send_sdu+0x68>
			frag = net_buf_frag_del(NULL, frag);
   14030:	4621      	mov	r1, r4
   14032:	f7f9 fa5f 	bl	d4f4 <net_buf_frag_del>
   14036:	4604      	mov	r4, r0
		ret = l2cap_chan_le_send(ch, frag, 0);
   14038:	2200      	movs	r2, #0
   1403a:	4621      	mov	r1, r4
   1403c:	4638      	mov	r0, r7
   1403e:	f7f3 fd9f 	bl	7b80 <l2cap_chan_le_send>
		if (ret < 0) {
   14042:	1e05      	subs	r5, r0, #0
   14044:	dbe1      	blt.n	1400a <l2cap_chan_le_send_sdu+0x3a>
	for (ret = 0; sent < total_len; sent += ret) {
   14046:	442e      	add	r6, r5
   14048:	b2b6      	uxth	r6, r6
   1404a:	e7e9      	b.n	14020 <l2cap_chan_le_send_sdu+0x50>
		return -EMSGSIZE;
   1404c:	f06f 0523 	mvn.w	r5, #35	; 0x23
   14050:	e7e1      	b.n	14016 <l2cap_chan_le_send_sdu+0x46>

00014052 <l2cap_chan_tx_process>:
{
   14052:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14054:	4604      	mov	r4, r0
		ch->tx_buf = NULL;
   14056:	2700      	movs	r7, #0
	ch = CONTAINER_OF(work, struct bt_l2cap_le_chan, tx_work);
   14058:	f1a0 0574 	sub.w	r5, r0, #116	; 0x74
	return net_buf_get(&ch->tx_queue, K_NO_WAIT);
   1405c:	f1a0 0620 	sub.w	r6, r0, #32
	if (ch->tx_buf) {
   14060:	f854 0c04 	ldr.w	r0, [r4, #-4]
   14064:	b188      	cbz	r0, 1408a <l2cap_chan_tx_process+0x38>
		ch->tx_buf = NULL;
   14066:	f844 7c04 	str.w	r7, [r4, #-4]
	while ((buf = l2cap_chan_le_get_tx_buf(ch))) {
   1406a:	9001      	str	r0, [sp, #4]
   1406c:	b158      	cbz	r0, 14086 <l2cap_chan_tx_process+0x34>
		sent = l2cap_chan_le_send_sdu(ch, &buf, sent);
   1406e:	8a82      	ldrh	r2, [r0, #20]
   14070:	a901      	add	r1, sp, #4
   14072:	4628      	mov	r0, r5
   14074:	f7ff ffac 	bl	13fd0 <l2cap_chan_le_send_sdu>
		if (sent < 0) {
   14078:	2800      	cmp	r0, #0
   1407a:	daf1      	bge.n	14060 <l2cap_chan_tx_process+0xe>
			if (sent == -EAGAIN) {
   1407c:	300b      	adds	r0, #11
   1407e:	d102      	bne.n	14086 <l2cap_chan_tx_process+0x34>
				ch->tx_buf = buf;
   14080:	9b01      	ldr	r3, [sp, #4]
   14082:	f844 3c04 	str.w	r3, [r4, #-4]
}
   14086:	b003      	add	sp, #12
   14088:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_get(&ch->tx_queue, K_NO_WAIT);
   1408a:	2200      	movs	r2, #0
   1408c:	2300      	movs	r3, #0
   1408e:	4630      	mov	r0, r6
   14090:	f7f9 f8d2 	bl	d238 <net_buf_get>
   14094:	e7e9      	b.n	1406a <l2cap_chan_tx_process+0x18>

00014096 <bt_l2cap_send.constprop.0>:
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   14096:	2300      	movs	r3, #0
static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
   14098:	b507      	push	{r0, r1, r2, lr}
   1409a:	460a      	mov	r2, r1
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   1409c:	9300      	str	r3, [sp, #0]
   1409e:	2105      	movs	r1, #5
   140a0:	f7ff ff7d 	bl	13f9e <bt_l2cap_send_cb>
}
   140a4:	b003      	add	sp, #12
   140a6:	f85d fb04 	ldr.w	pc, [sp], #4

000140aa <l2cap_send_reject>:
{
   140aa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   140ae:	f89d 9020 	ldrb.w	r9, [sp, #32]
   140b2:	4606      	mov	r6, r0
   140b4:	4617      	mov	r7, r2
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   140b6:	2001      	movs	r0, #1
   140b8:	f109 0202 	add.w	r2, r9, #2
{
   140bc:	461d      	mov	r5, r3
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   140be:	f7f3 fcf3 	bl	7aa8 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   140c2:	4604      	mov	r4, r0
   140c4:	b190      	cbz	r0, 140ec <l2cap_send_reject+0x42>
	rej = net_buf_add(buf, sizeof(*rej));
   140c6:	f100 0808 	add.w	r8, r0, #8
   140ca:	2102      	movs	r1, #2
   140cc:	4640      	mov	r0, r8
   140ce:	f7f9 fab7 	bl	d640 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   140d2:	8007      	strh	r7, [r0, #0]
	if (data) {
   140d4:	b125      	cbz	r5, 140e0 <l2cap_send_reject+0x36>
		net_buf_add_mem(buf, data, data_len);
   140d6:	464a      	mov	r2, r9
   140d8:	4629      	mov	r1, r5
   140da:	4640      	mov	r0, r8
   140dc:	f001 fab4 	bl	15648 <net_buf_simple_add_mem>
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
   140e0:	4621      	mov	r1, r4
   140e2:	4630      	mov	r0, r6
}
   140e4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
   140e8:	f7ff bfd5 	b.w	14096 <bt_l2cap_send.constprop.0>
}
   140ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000140f0 <bt_l2cap_security_changed>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   140f0:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   140f2:	b570      	push	{r4, r5, r6, lr}
   140f4:	460e      	mov	r6, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   140f6:	b353      	cbz	r3, 1414e <bt_l2cap_security_changed+0x5e>
   140f8:	f1b3 0508 	subs.w	r5, r3, #8
   140fc:	d027      	beq.n	1414e <bt_l2cap_security_changed+0x5e>
   140fe:	681c      	ldr	r4, [r3, #0]
   14100:	b104      	cbz	r4, 14104 <bt_l2cap_security_changed+0x14>
   14102:	3c08      	subs	r4, #8
	if (chan->state != BT_L2CAP_CONNECT || chan->ident) {
   14104:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
   14108:	2b01      	cmp	r3, #1
   1410a:	d10a      	bne.n	14122 <bt_l2cap_security_changed+0x32>
   1410c:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   14110:	b93b      	cbnz	r3, 14122 <bt_l2cap_security_changed+0x32>
	if (status) {
   14112:	b1b6      	cbz	r6, 14142 <bt_l2cap_security_changed+0x52>
	bt_l2cap_chan_remove(chan->conn, chan);
   14114:	6828      	ldr	r0, [r5, #0]
   14116:	4629      	mov	r1, r5
   14118:	f7ff fefa 	bl	13f10 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(chan);
   1411c:	4628      	mov	r0, r5
   1411e:	f7ff ff10 	bl	13f42 <bt_l2cap_chan_del>
		if (chan->ops->encrypt_change) {
   14122:	686b      	ldr	r3, [r5, #4]
   14124:	689b      	ldr	r3, [r3, #8]
   14126:	b113      	cbz	r3, 1412e <bt_l2cap_security_changed+0x3e>
			chan->ops->encrypt_change(chan, hci_status);
   14128:	4631      	mov	r1, r6
   1412a:	4628      	mov	r0, r5
   1412c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1412e:	b174      	cbz	r4, 1414e <bt_l2cap_security_changed+0x5e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   14130:	f114 0308 	adds.w	r3, r4, #8
   14134:	d002      	beq.n	1413c <bt_l2cap_security_changed+0x4c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   14136:	68a3      	ldr	r3, [r4, #8]
   14138:	b103      	cbz	r3, 1413c <bt_l2cap_security_changed+0x4c>
   1413a:	3b08      	subs	r3, #8
{
   1413c:	4625      	mov	r5, r4
   1413e:	461c      	mov	r4, r3
   14140:	e7e0      	b.n	14104 <bt_l2cap_security_changed+0x14>
	err = l2cap_le_conn_req(BT_L2CAP_LE_CHAN(chan));
   14142:	4628      	mov	r0, r5
   14144:	f7f3 fdf0 	bl	7d28 <l2cap_le_conn_req>
	if (err) {
   14148:	2800      	cmp	r0, #0
   1414a:	d0ea      	beq.n	14122 <bt_l2cap_security_changed+0x32>
   1414c:	e7e2      	b.n	14114 <bt_l2cap_security_changed+0x24>
}
   1414e:	bd70      	pop	{r4, r5, r6, pc}

00014150 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   14150:	6d00      	ldr	r0, [r0, #80]	; 0x50
   14152:	b160      	cbz	r0, 1416e <bt_l2cap_le_lookup_tx_cid+0x1e>
   14154:	3808      	subs	r0, #8
   14156:	b900      	cbnz	r0, 1415a <bt_l2cap_le_lookup_tx_cid+0xa>
   14158:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1415a:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   1415e:	428b      	cmp	r3, r1
   14160:	d005      	beq.n	1416e <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   14162:	f110 0308 	adds.w	r3, r0, #8
   14166:	d001      	beq.n	1416c <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   14168:	6880      	ldr	r0, [r0, #8]
   1416a:	e7f2      	b.n	14152 <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   1416c:	4618      	mov	r0, r3
}
   1416e:	4770      	bx	lr

00014170 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   14170:	6d00      	ldr	r0, [r0, #80]	; 0x50
   14172:	b158      	cbz	r0, 1418c <bt_l2cap_le_lookup_rx_cid+0x1c>
   14174:	3808      	subs	r0, #8
   14176:	b900      	cbnz	r0, 1417a <bt_l2cap_le_lookup_rx_cid+0xa>
   14178:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1417a:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
   1417c:	428b      	cmp	r3, r1
   1417e:	d005      	beq.n	1418c <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   14180:	f110 0308 	adds.w	r3, r0, #8
   14184:	d001      	beq.n	1418a <bt_l2cap_le_lookup_rx_cid+0x1a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   14186:	6880      	ldr	r0, [r0, #8]
   14188:	e7f3      	b.n	14172 <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   1418a:	4618      	mov	r0, r3
}
   1418c:	4770      	bx	lr

0001418e <bt_l2cap_update_conn_param>:
{
   1418e:	b570      	push	{r4, r5, r6, lr}
   14190:	460c      	mov	r4, r1
   14192:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   14194:	f7f3 fc52 	bl	7a3c <get_ident>
   14198:	2208      	movs	r2, #8
   1419a:	4601      	mov	r1, r0
   1419c:	2012      	movs	r0, #18
   1419e:	f7f3 fc83 	bl	7aa8 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   141a2:	4605      	mov	r5, r0
   141a4:	b188      	cbz	r0, 141ca <bt_l2cap_update_conn_param+0x3c>
	req = net_buf_add(buf, sizeof(*req));
   141a6:	2108      	movs	r1, #8
   141a8:	4408      	add	r0, r1
   141aa:	f7f9 fa49 	bl	d640 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   141ae:	8822      	ldrh	r2, [r4, #0]
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
   141b0:	4629      	mov	r1, r5
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   141b2:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   141b4:	8862      	ldrh	r2, [r4, #2]
   141b6:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   141b8:	88a2      	ldrh	r2, [r4, #4]
   141ba:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   141bc:	88e2      	ldrh	r2, [r4, #6]
   141be:	80c2      	strh	r2, [r0, #6]
	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
   141c0:	4630      	mov	r0, r6
   141c2:	f7ff ff68 	bl	14096 <bt_l2cap_send.constprop.0>
	return 0;
   141c6:	2000      	movs	r0, #0
}
   141c8:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   141ca:	f06f 000b 	mvn.w	r0, #11
   141ce:	e7fb      	b.n	141c8 <bt_l2cap_update_conn_param+0x3a>

000141d0 <bt_l2cap_init>:
}
   141d0:	4770      	bx	lr

000141d2 <att_op_get_type>:
	switch (op) {
   141d2:	281e      	cmp	r0, #30
   141d4:	d816      	bhi.n	14204 <att_op_get_type+0x32>
   141d6:	b308      	cbz	r0, 1421c <att_op_get_type+0x4a>
   141d8:	1e43      	subs	r3, r0, #1
   141da:	2b1d      	cmp	r3, #29
   141dc:	d81e      	bhi.n	1421c <att_op_get_type+0x4a>
   141de:	e8df f003 	tbb	[pc, r3]
   141e2:	2317      	.short	0x2317
   141e4:	23172317 	.word	0x23172317
   141e8:	23172317 	.word	0x23172317
   141ec:	23172317 	.word	0x23172317
   141f0:	23172317 	.word	0x23172317
   141f4:	231d1d17 	.word	0x231d1d17
   141f8:	1d172317 	.word	0x1d172317
   141fc:	0f1b1d19 	.word	0x0f1b1d19
   14200:	2004      	movs	r0, #4
   14202:	4770      	bx	lr
   14204:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   14208:	2b52      	cmp	r3, #82	; 0x52
   1420a:	d107      	bne.n	1421c <att_op_get_type+0x4a>
		return ATT_COMMAND;
   1420c:	2000      	movs	r0, #0
}
   1420e:	4770      	bx	lr
		return ATT_RESPONSE;
   14210:	2002      	movs	r0, #2
   14212:	4770      	bx	lr
		return ATT_NOTIFICATION;
   14214:	2003      	movs	r0, #3
   14216:	4770      	bx	lr
		return ATT_INDICATION;
   14218:	2005      	movs	r0, #5
   1421a:	4770      	bx	lr
		return ATT_COMMAND;
   1421c:	f010 0f40 	tst.w	r0, #64	; 0x40
   14220:	bf0c      	ite	eq
   14222:	2006      	moveq	r0, #6
   14224:	2000      	movne	r0, #0
   14226:	4770      	bx	lr
		return ATT_REQUEST;
   14228:	2001      	movs	r0, #1
   1422a:	4770      	bx	lr

0001422c <att_notify>:
{
   1422c:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
   1422e:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
   14230:	f101 0008 	add.w	r0, r1, #8
{
   14234:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
   14236:	f001 f9f3 	bl	15620 <net_buf_simple_pull_le16>
	bt_gatt_notification(conn, handle, buf->data, buf->len);
   1423a:	89a3      	ldrh	r3, [r4, #12]
	handle = net_buf_pull_le16(buf);
   1423c:	4601      	mov	r1, r0
	bt_gatt_notification(conn, handle, buf->data, buf->len);
   1423e:	68a2      	ldr	r2, [r4, #8]
   14240:	4628      	mov	r0, r5
   14242:	f000 fd85 	bl	14d50 <bt_gatt_notification>
}
   14246:	2000      	movs	r0, #0
   14248:	bd38      	pop	{r3, r4, r5, pc}

0001424a <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(u16_t start_handle, u16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   1424a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1424c:	e9cd 2301 	strd	r2, r3, [sp, #4]
   14250:	2300      	movs	r3, #0
   14252:	461a      	mov	r2, r3
   14254:	9300      	str	r3, [sp, #0]
   14256:	f7f6 f87d 	bl	a354 <bt_gatt_foreach_attr_type>
				  user_data);
}
   1425a:	b005      	add	sp, #20
   1425c:	f85d fb04 	ldr.w	pc, [sp], #4

00014260 <find_info_cb>:
	if (!data->rsp) {
   14260:	688b      	ldr	r3, [r1, #8]
{
   14262:	b570      	push	{r4, r5, r6, lr}
   14264:	4605      	mov	r5, r0
   14266:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
   14268:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
   1426a:	b963      	cbnz	r3, 14286 <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1426c:	6848      	ldr	r0, [r1, #4]
   1426e:	2101      	movs	r1, #1
   14270:	3008      	adds	r0, #8
   14272:	f7f9 f9e5 	bl	d640 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   14276:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   14278:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1427a:	781b      	ldrb	r3, [r3, #0]
   1427c:	2b00      	cmp	r3, #0
   1427e:	bf0c      	ite	eq
   14280:	2301      	moveq	r3, #1
   14282:	2302      	movne	r3, #2
   14284:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   14286:	68a3      	ldr	r3, [r4, #8]
   14288:	781b      	ldrb	r3, [r3, #0]
   1428a:	2b01      	cmp	r3, #1
   1428c:	d003      	beq.n	14296 <find_info_cb+0x36>
   1428e:	2b02      	cmp	r3, #2
   14290:	d01a      	beq.n	142c8 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   14292:	2000      	movs	r0, #0
   14294:	e017      	b.n	142c6 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   14296:	682b      	ldr	r3, [r5, #0]
   14298:	781b      	ldrb	r3, [r3, #0]
   1429a:	2b00      	cmp	r3, #0
   1429c:	d1f9      	bne.n	14292 <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1429e:	6860      	ldr	r0, [r4, #4]
   142a0:	2104      	movs	r1, #4
   142a2:	3008      	adds	r0, #8
   142a4:	f7f9 f9cc 	bl	d640 <net_buf_simple_add>
		data->info16->handle = sys_cpu_to_le16(attr->handle);
   142a8:	8a2b      	ldrh	r3, [r5, #16]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   142aa:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
   142ac:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   142ae:	682b      	ldr	r3, [r5, #0]
   142b0:	885b      	ldrh	r3, [r3, #2]
   142b2:	8043      	strh	r3, [r0, #2]
		if (att->chan.tx.mtu - data->buf->len >
   142b4:	6863      	ldr	r3, [r4, #4]
   142b6:	f8b6 004a 	ldrh.w	r0, [r6, #74]	; 0x4a
   142ba:	899b      	ldrh	r3, [r3, #12]
   142bc:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   142be:	2804      	cmp	r0, #4
   142c0:	bf94      	ite	ls
   142c2:	2000      	movls	r0, #0
   142c4:	2001      	movhi	r0, #1
}
   142c6:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   142c8:	682b      	ldr	r3, [r5, #0]
   142ca:	781b      	ldrb	r3, [r3, #0]
   142cc:	2b02      	cmp	r3, #2
   142ce:	d1e0      	bne.n	14292 <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   142d0:	6860      	ldr	r0, [r4, #4]
   142d2:	2112      	movs	r1, #18
   142d4:	3008      	adds	r0, #8
   142d6:	f7f9 f9b3 	bl	d640 <net_buf_simple_add>
		data->info128->handle = sys_cpu_to_le16(attr->handle);
   142da:	8a2b      	ldrh	r3, [r5, #16]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   142dc:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   142de:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   142e0:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(attr->handle);
   142e2:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   142e6:	3101      	adds	r1, #1
   142e8:	f7ff f942 	bl	13570 <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
   142ec:	6863      	ldr	r3, [r4, #4]
   142ee:	f8b6 004a 	ldrh.w	r0, [r6, #74]	; 0x4a
   142f2:	899b      	ldrh	r3, [r3, #12]
   142f4:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   142f6:	2812      	cmp	r0, #18
   142f8:	e7e2      	b.n	142c0 <find_info_cb+0x60>

000142fa <read_group_cb>:
{
   142fa:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   142fe:	f04f 0800 	mov.w	r8, #0
   14302:	f44f 5320 	mov.w	r3, #10240	; 0x2800
	struct bt_att *att = data->att;
   14306:	680e      	ldr	r6, [r1, #0]
{
   14308:	4605      	mov	r5, r0
   1430a:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1430c:	6800      	ldr	r0, [r0, #0]
   1430e:	a902      	add	r1, sp, #8
	struct bt_conn *conn = att->chan.chan.conn;
   14310:	6837      	ldr	r7, [r6, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   14312:	f88d 8008 	strb.w	r8, [sp, #8]
   14316:	f8ad 300a 	strh.w	r3, [sp, #10]
   1431a:	f7ff f9c4 	bl	136a6 <bt_uuid_cmp>
   1431e:	b198      	cbz	r0, 14348 <read_group_cb+0x4e>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   14320:	f642 0301 	movw	r3, #10241	; 0x2801
   14324:	6828      	ldr	r0, [r5, #0]
   14326:	a903      	add	r1, sp, #12
   14328:	f88d 800c 	strb.w	r8, [sp, #12]
   1432c:	f8ad 300e 	strh.w	r3, [sp, #14]
   14330:	f7ff f9b9 	bl	136a6 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   14334:	b140      	cbz	r0, 14348 <read_group_cb+0x4e>
		if (data->group &&
   14336:	6923      	ldr	r3, [r4, #16]
   14338:	b123      	cbz	r3, 14344 <read_group_cb+0x4a>
		    attr->handle > sys_le16_to_cpu(data->group->end_handle)) {
   1433a:	8a2a      	ldrh	r2, [r5, #16]
		if (data->group &&
   1433c:	8859      	ldrh	r1, [r3, #2]
   1433e:	4291      	cmp	r1, r2
   14340:	d200      	bcs.n	14344 <read_group_cb+0x4a>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
   14342:	805a      	strh	r2, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   14344:	2001      	movs	r0, #1
   14346:	e012      	b.n	1436e <read_group_cb+0x74>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   14348:	6861      	ldr	r1, [r4, #4]
   1434a:	6828      	ldr	r0, [r5, #0]
   1434c:	f7ff f9ab 	bl	136a6 <bt_uuid_cmp>
   14350:	b110      	cbz	r0, 14358 <read_group_cb+0x5e>
		data->group = NULL;
   14352:	2300      	movs	r3, #0
   14354:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   14356:	e7f5      	b.n	14344 <read_group_cb+0x4a>
	if (data->rsp->len &&
   14358:	68e3      	ldr	r3, [r4, #12]
   1435a:	68a0      	ldr	r0, [r4, #8]
   1435c:	781a      	ldrb	r2, [r3, #0]
   1435e:	b14a      	cbz	r2, 14374 <read_group_cb+0x7a>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
   14360:	f8b6 304a 	ldrh.w	r3, [r6, #74]	; 0x4a
   14364:	8981      	ldrh	r1, [r0, #12]
   14366:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   14368:	4293      	cmp	r3, r2
   1436a:	da03      	bge.n	14374 <read_group_cb+0x7a>
		return BT_GATT_ITER_STOP;
   1436c:	2000      	movs	r0, #0
}
   1436e:	b004      	add	sp, #16
   14370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   14374:	2104      	movs	r1, #4
   14376:	3008      	adds	r0, #8
   14378:	f7f9 f962 	bl	d640 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
   1437c:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1437e:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
   14380:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
   14382:	8043      	strh	r3, [r0, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   14384:	f8b6 304a 	ldrh.w	r3, [r6, #74]	; 0x4a
   14388:	2600      	movs	r6, #0
   1438a:	68a1      	ldr	r1, [r4, #8]
   1438c:	4638      	mov	r0, r7
   1438e:	898a      	ldrh	r2, [r1, #12]
   14390:	6889      	ldr	r1, [r1, #8]
   14392:	1a9b      	subs	r3, r3, r2
   14394:	9600      	str	r6, [sp, #0]
   14396:	440a      	add	r2, r1
   14398:	f8d5 8004 	ldr.w	r8, [r5, #4]
   1439c:	4629      	mov	r1, r5
   1439e:	b29b      	uxth	r3, r3
   143a0:	47c0      	blx	r8
	if (read < 0) {
   143a2:	1e01      	subs	r1, r0, #0
   143a4:	dbe2      	blt.n	1436c <read_group_cb+0x72>
	if (!data->rsp->len) {
   143a6:	68e5      	ldr	r5, [r4, #12]
   143a8:	68a0      	ldr	r0, [r4, #8]
   143aa:	782a      	ldrb	r2, [r5, #0]
   143ac:	1d0b      	adds	r3, r1, #4
   143ae:	b922      	cbnz	r2, 143ba <read_group_cb+0xc0>
		data->rsp->len = read + sizeof(*data->group);
   143b0:	702b      	strb	r3, [r5, #0]
	net_buf_add(data->buf, read);
   143b2:	3008      	adds	r0, #8
   143b4:	f7f9 f944 	bl	d640 <net_buf_simple_add>
   143b8:	e7c4      	b.n	14344 <read_group_cb+0x4a>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   143ba:	429a      	cmp	r2, r3
   143bc:	d0f9      	beq.n	143b2 <read_group_cb+0xb8>
		data->buf->len -= sizeof(*data->group);
   143be:	8983      	ldrh	r3, [r0, #12]
   143c0:	3b04      	subs	r3, #4
   143c2:	8183      	strh	r3, [r0, #12]
		return false;
   143c4:	e7d2      	b.n	1436c <read_group_cb+0x72>

000143c6 <read_type_cb>:
{
   143c6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att *att = data->att;
   143ca:	f8d1 8000 	ldr.w	r8, [r1]
{
   143ce:	4606      	mov	r6, r0
   143d0:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   143d2:	6800      	ldr	r0, [r0, #0]
   143d4:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = att->chan.chan.conn;
   143d6:	f8d8 9000 	ldr.w	r9, [r8]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   143da:	f7ff f964 	bl	136a6 <bt_uuid_cmp>
   143de:	4607      	mov	r7, r0
   143e0:	2800      	cmp	r0, #0
   143e2:	d14a      	bne.n	1447a <read_type_cb+0xb4>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   143e4:	2215      	movs	r2, #21
   143e6:	4631      	mov	r1, r6
   143e8:	4648      	mov	r0, r9
   143ea:	f000 fc1e 	bl	14c2a <bt_gatt_check_perm>
   143ee:	4604      	mov	r4, r0
   143f0:	7528      	strb	r0, [r5, #20]
	if (data->err) {
   143f2:	b140      	cbz	r0, 14406 <read_type_cb+0x40>
		if (data->rsp->len) {
   143f4:	68eb      	ldr	r3, [r5, #12]
   143f6:	781c      	ldrb	r4, [r3, #0]
   143f8:	b10c      	cbz	r4, 143fe <read_type_cb+0x38>
		return BT_GATT_ITER_STOP;
   143fa:	463c      	mov	r4, r7
			data->err = 0x00;
   143fc:	752f      	strb	r7, [r5, #20]
}
   143fe:	4620      	mov	r0, r4
   14400:	b003      	add	sp, #12
   14402:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(data->buf, sizeof(*data->item));
   14406:	68a8      	ldr	r0, [r5, #8]
   14408:	2102      	movs	r1, #2
   1440a:	3008      	adds	r0, #8
   1440c:	f7f9 f918 	bl	d640 <net_buf_simple_add>
	data->item->handle = sys_cpu_to_le16(attr->handle);
   14410:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   14412:	68a9      	ldr	r1, [r5, #8]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
   14414:	6128      	str	r0, [r5, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   14416:	898a      	ldrh	r2, [r1, #12]
	data->item->handle = sys_cpu_to_le16(attr->handle);
   14418:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   1441a:	f8b8 304a 	ldrh.w	r3, [r8, #74]	; 0x4a
   1441e:	6889      	ldr	r1, [r1, #8]
   14420:	1a9b      	subs	r3, r3, r2
   14422:	9400      	str	r4, [sp, #0]
   14424:	440a      	add	r2, r1
   14426:	4648      	mov	r0, r9
   14428:	4631      	mov	r1, r6
   1442a:	6877      	ldr	r7, [r6, #4]
   1442c:	b29b      	uxth	r3, r3
   1442e:	47b8      	blx	r7
	if (read < 0) {
   14430:	1e01      	subs	r1, r0, #0
   14432:	da07      	bge.n	14444 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   14434:	f111 0fff 	cmn.w	r1, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   14438:	bf32      	itee	cc
   1443a:	210e      	movcc	r1, #14
		return -err;
   1443c:	4249      	negcs	r1, r1
   1443e:	b2c9      	uxtbcs	r1, r1
		data->err = err_to_att(read);
   14440:	7529      	strb	r1, [r5, #20]
		return BT_GATT_ITER_STOP;
   14442:	e7dc      	b.n	143fe <read_type_cb+0x38>
	if (!data->rsp->len) {
   14444:	68ee      	ldr	r6, [r5, #12]
   14446:	68a8      	ldr	r0, [r5, #8]
   14448:	7832      	ldrb	r2, [r6, #0]
   1444a:	1c8b      	adds	r3, r1, #2
   1444c:	b97a      	cbnz	r2, 1446e <read_type_cb+0xa8>
		data->rsp->len = read + sizeof(*data->item);
   1444e:	7033      	strb	r3, [r6, #0]
	net_buf_add(data->buf, read);
   14450:	3008      	adds	r0, #8
   14452:	f7f9 f8f5 	bl	d640 <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
   14456:	68ab      	ldr	r3, [r5, #8]
   14458:	f8b8 404a 	ldrh.w	r4, [r8, #74]	; 0x4a
   1445c:	8998      	ldrh	r0, [r3, #12]
   1445e:	68eb      	ldr	r3, [r5, #12]
   14460:	1a24      	subs	r4, r4, r0
   14462:	7818      	ldrb	r0, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   14464:	4284      	cmp	r4, r0
   14466:	bfd4      	ite	le
   14468:	2400      	movle	r4, #0
   1446a:	2401      	movgt	r4, #1
   1446c:	e7c7      	b.n	143fe <read_type_cb+0x38>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1446e:	429a      	cmp	r2, r3
   14470:	d0ee      	beq.n	14450 <read_type_cb+0x8a>
		data->buf->len -= sizeof(*data->item);
   14472:	8983      	ldrh	r3, [r0, #12]
   14474:	3b02      	subs	r3, #2
   14476:	8183      	strh	r3, [r0, #12]
		return BT_GATT_ITER_STOP;
   14478:	e7c1      	b.n	143fe <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   1447a:	2401      	movs	r4, #1
   1447c:	e7bf      	b.n	143fe <read_type_cb+0x38>

0001447e <att_pdu_sent>:
{
   1447e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14482:	4607      	mov	r7, r0
	struct bt_att *att = att_get(conn);
   14484:	f7f4 fa0c 	bl	88a0 <att_get>
   14488:	4605      	mov	r5, r0
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1448a:	f100 08f8 	add.w	r8, r0, #248	; 0xf8
   1448e:	2200      	movs	r2, #0
   14490:	2300      	movs	r3, #0
   14492:	4640      	mov	r0, r8
   14494:	f7f8 fed0 	bl	d238 <net_buf_get>
   14498:	4604      	mov	r4, r0
   1449a:	b928      	cbnz	r0, 144a8 <att_pdu_sent+0x2a>
	z_impl_k_sem_give(sem);
   1449c:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
}
   144a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   144a4:	f7fc bacc 	b.w	10a40 <z_impl_k_sem_give>
		if (att->req && att->req->buf == buf) {
   144a8:	f8d5 60b4 	ldr.w	r6, [r5, #180]	; 0xb4
   144ac:	b14e      	cbz	r6, 144c2 <att_pdu_sent+0x44>
   144ae:	6933      	ldr	r3, [r6, #16]
   144b0:	42a3      	cmp	r3, r4
   144b2:	d106      	bne.n	144c2 <att_pdu_sent+0x44>
	state->offset = net_buf_simple_headroom(buf);
   144b4:	f104 0008 	add.w	r0, r4, #8
   144b8:	f001 f8ba 	bl	15630 <net_buf_simple_headroom>
	state->len = buf->len;
   144bc:	89a3      	ldrh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   144be:	81b0      	strh	r0, [r6, #12]
	state->len = buf->len;
   144c0:	81f3      	strh	r3, [r6, #14]
		if (!att_send(conn, buf, NULL, NULL)) {
   144c2:	2300      	movs	r3, #0
   144c4:	4621      	mov	r1, r4
   144c6:	461a      	mov	r2, r3
   144c8:	4638      	mov	r0, r7
   144ca:	f7f4 f9bf 	bl	884c <att_send>
   144ce:	2800      	cmp	r0, #0
   144d0:	d1dd      	bne.n	1448e <att_pdu_sent+0x10>
}
   144d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000144d6 <att_cfm_sent>:
{
   144d6:	b538      	push	{r3, r4, r5, lr}
   144d8:	4604      	mov	r4, r0
   144da:	460d      	mov	r5, r1
	struct bt_att *att = att_get(conn);
   144dc:	f7f4 f9e0 	bl	88a0 <att_get>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   144e0:	f100 03b0 	add.w	r3, r0, #176	; 0xb0
   144e4:	e8d3 2fef 	ldaex	r2, [r3]
   144e8:	f022 0202 	bic.w	r2, r2, #2
   144ec:	e8c3 2fe1 	stlex	r1, r2, [r3]
   144f0:	2900      	cmp	r1, #0
   144f2:	d1f7      	bne.n	144e4 <att_cfm_sent+0xe>
	att_pdu_sent(conn, user_data);
   144f4:	4629      	mov	r1, r5
   144f6:	4620      	mov	r0, r4
}
   144f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	att_pdu_sent(conn, user_data);
   144fc:	f7ff bfbf 	b.w	1447e <att_pdu_sent>

00014500 <att_rsp_sent>:
{
   14500:	b538      	push	{r3, r4, r5, lr}
   14502:	4604      	mov	r4, r0
   14504:	460d      	mov	r5, r1
	struct bt_att *att = att_get(conn);
   14506:	f7f4 f9cb 	bl	88a0 <att_get>
   1450a:	f100 03b0 	add.w	r3, r0, #176	; 0xb0
   1450e:	e8d3 2fef 	ldaex	r2, [r3]
   14512:	f022 0201 	bic.w	r2, r2, #1
   14516:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1451a:	2900      	cmp	r1, #0
   1451c:	d1f7      	bne.n	1450e <att_rsp_sent+0xe>
	att_pdu_sent(conn, user_data);
   1451e:	4629      	mov	r1, r5
   14520:	4620      	mov	r0, r4
}
   14522:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	att_pdu_sent(conn, user_data);
   14526:	f7ff bfaa 	b.w	1447e <att_pdu_sent>

0001452a <write_cb>:
{
   1452a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1452c:	460c      	mov	r4, r1
   1452e:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   14530:	4601      	mov	r1, r0
   14532:	222a      	movs	r2, #42	; 0x2a
   14534:	6820      	ldr	r0, [r4, #0]
   14536:	f000 fb78 	bl	14c2a <bt_gatt_check_perm>
   1453a:	4605      	mov	r5, r0
   1453c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1453e:	bb00      	cbnz	r0, 14582 <write_cb+0x58>
	if (!data->req) {
   14540:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   14542:	4631      	mov	r1, r6
	if (!data->req) {
   14544:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   14546:	bf14      	ite	ne
   14548:	2300      	movne	r3, #0
   1454a:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1454c:	9301      	str	r3, [sp, #4]
   1454e:	8a63      	ldrh	r3, [r4, #18]
   14550:	68b7      	ldr	r7, [r6, #8]
   14552:	9300      	str	r3, [sp, #0]
   14554:	68e2      	ldr	r2, [r4, #12]
   14556:	8a23      	ldrh	r3, [r4, #16]
   14558:	6820      	ldr	r0, [r4, #0]
   1455a:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1455c:	1e03      	subs	r3, r0, #0
   1455e:	db05      	blt.n	1456c <write_cb+0x42>
   14560:	8a22      	ldrh	r2, [r4, #16]
   14562:	4293      	cmp	r3, r2
   14564:	d10b      	bne.n	1457e <write_cb+0x54>
	data->err = 0U;
   14566:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   14568:	2501      	movs	r5, #1
   1456a:	e005      	b.n	14578 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   1456c:	f113 0fff 	cmn.w	r3, #255	; 0xff
   14570:	d305      	bcc.n	1457e <write_cb+0x54>
		return -err;
   14572:	425b      	negs	r3, r3
   14574:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   14576:	7523      	strb	r3, [r4, #20]
}
   14578:	4628      	mov	r0, r5
   1457a:	b003      	add	sp, #12
   1457c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   1457e:	230e      	movs	r3, #14
   14580:	e7f9      	b.n	14576 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   14582:	2500      	movs	r5, #0
   14584:	e7f8      	b.n	14578 <write_cb+0x4e>

00014586 <read_cb>:
{
   14586:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1458a:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1458c:	6888      	ldr	r0, [r1, #8]
	struct bt_att *att = data->att;
   1458e:	f8d1 9000 	ldr.w	r9, [r1]
{
   14592:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   14594:	3008      	adds	r0, #8
   14596:	2100      	movs	r1, #0
	struct bt_conn *conn = att->chan.chan.conn;
   14598:	f8d9 8000 	ldr.w	r8, [r9]
	data->err = 0x00;
   1459c:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1459e:	f7f9 f84f 	bl	d640 <net_buf_simple_add>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   145a2:	2215      	movs	r2, #21
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   145a4:	60e0      	str	r0, [r4, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   145a6:	4631      	mov	r1, r6
   145a8:	4640      	mov	r0, r8
	data->err = 0x00;
   145aa:	7427      	strb	r7, [r4, #16]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   145ac:	f000 fb3d 	bl	14c2a <bt_gatt_check_perm>
   145b0:	4605      	mov	r5, r0
   145b2:	7420      	strb	r0, [r4, #16]
	if (data->err) {
   145b4:	bb00      	cbnz	r0, 145f8 <read_cb+0x72>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   145b6:	68a1      	ldr	r1, [r4, #8]
   145b8:	f8b9 304a 	ldrh.w	r3, [r9, #74]	; 0x4a
   145bc:	898a      	ldrh	r2, [r1, #12]
   145be:	88a0      	ldrh	r0, [r4, #4]
   145c0:	6889      	ldr	r1, [r1, #8]
   145c2:	1a9b      	subs	r3, r3, r2
   145c4:	9000      	str	r0, [sp, #0]
   145c6:	440a      	add	r2, r1
   145c8:	4640      	mov	r0, r8
   145ca:	4631      	mov	r1, r6
   145cc:	6877      	ldr	r7, [r6, #4]
   145ce:	b29b      	uxth	r3, r3
   145d0:	47b8      	blx	r7
	if (read < 0) {
   145d2:	1e01      	subs	r1, r0, #0
   145d4:	da0a      	bge.n	145ec <read_cb+0x66>
	if (err < 0 && err >= -0xff) {
   145d6:	f111 0fff 	cmn.w	r1, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   145da:	bf32      	itee	cc
   145dc:	210e      	movcc	r1, #14
		return -err;
   145de:	4249      	negcs	r1, r1
   145e0:	b2c9      	uxtbcs	r1, r1
		data->err = err_to_att(read);
   145e2:	7421      	strb	r1, [r4, #16]
}
   145e4:	4628      	mov	r0, r5
   145e6:	b003      	add	sp, #12
   145e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_add(data->buf, read);
   145ec:	68a0      	ldr	r0, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   145ee:	2501      	movs	r5, #1
	net_buf_add(data->buf, read);
   145f0:	3008      	adds	r0, #8
   145f2:	f7f9 f825 	bl	d640 <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
   145f6:	e7f5      	b.n	145e4 <read_cb+0x5e>
		return BT_GATT_ITER_STOP;
   145f8:	463d      	mov	r5, r7
   145fa:	e7f3      	b.n	145e4 <read_cb+0x5e>

000145fc <att_write_cmd>:
{
   145fc:	b530      	push	{r4, r5, lr}
   145fe:	460c      	mov	r4, r1
   14600:	b085      	sub	sp, #20
	struct bt_conn *conn = att->chan.chan.conn;
   14602:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
   14604:	f101 0008 	add.w	r0, r1, #8
   14608:	f001 f80a 	bl	15620 <net_buf_simple_pull_le16>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
   1460c:	89a2      	ldrh	r2, [r4, #12]
	handle = net_buf_pull_le16(buf);
   1460e:	4603      	mov	r3, r0
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
   14610:	9202      	str	r2, [sp, #8]
   14612:	68a2      	ldr	r2, [r4, #8]
   14614:	4628      	mov	r0, r5
   14616:	9201      	str	r2, [sp, #4]
   14618:	2200      	movs	r2, #0
   1461a:	4611      	mov	r1, r2
   1461c:	9200      	str	r2, [sp, #0]
   1461e:	f7f4 fbb1 	bl	8d84 <att_write_rsp>
}
   14622:	b005      	add	sp, #20
   14624:	bd30      	pop	{r4, r5, pc}

00014626 <att_write_req>:
{
   14626:	b530      	push	{r4, r5, lr}
   14628:	460c      	mov	r4, r1
   1462a:	b085      	sub	sp, #20
	struct bt_conn *conn = att->chan.chan.conn;
   1462c:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
   1462e:	f101 0008 	add.w	r0, r1, #8
   14632:	f000 fff5 	bl	15620 <net_buf_simple_pull_le16>
	return att_write_rsp(conn, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   14636:	89a2      	ldrh	r2, [r4, #12]
	handle = net_buf_pull_le16(buf);
   14638:	4603      	mov	r3, r0
	return att_write_rsp(conn, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1463a:	9202      	str	r2, [sp, #8]
   1463c:	68a2      	ldr	r2, [r4, #8]
   1463e:	2112      	movs	r1, #18
   14640:	9201      	str	r2, [sp, #4]
   14642:	2200      	movs	r2, #0
   14644:	4628      	mov	r0, r5
   14646:	9200      	str	r2, [sp, #0]
   14648:	2213      	movs	r2, #19
   1464a:	f7f4 fb9b 	bl	8d84 <att_write_rsp>
}
   1464e:	b005      	add	sp, #20
   14650:	bd30      	pop	{r4, r5, pc}

00014652 <att_read_blob_req>:
{
   14652:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   14654:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
   14656:	210c      	movs	r1, #12
   14658:	8813      	ldrh	r3, [r2, #0]
   1465a:	8852      	ldrh	r2, [r2, #2]
   1465c:	9200      	str	r2, [sp, #0]
   1465e:	220d      	movs	r2, #13
   14660:	f7f4 fd78 	bl	9154 <att_read_rsp>
}
   14664:	b003      	add	sp, #12
   14666:	f85d fb04 	ldr.w	pc, [sp], #4

0001466a <att_read_req>:
{
   1466a:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1466c:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   1466e:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   14670:	210a      	movs	r1, #10
   14672:	881b      	ldrh	r3, [r3, #0]
   14674:	9200      	str	r2, [sp, #0]
   14676:	220b      	movs	r2, #11
   14678:	f7f4 fd6c 	bl	9154 <att_read_rsp>
}
   1467c:	b003      	add	sp, #12
   1467e:	f85d fb04 	ldr.w	pc, [sp], #4

00014682 <bt_att_init>:
	bt_gatt_init();
   14682:	f7f5 bdef 	b.w	a264 <bt_gatt_init>

00014686 <bt_att_get_mtu>:
{
   14686:	b508      	push	{r3, lr}
	att = att_chan_get(conn);
   14688:	f7f4 f9f0 	bl	8a6c <att_chan_get>
	if (!att) {
   1468c:	b108      	cbz	r0, 14692 <bt_att_get_mtu+0xc>
	return att->chan.tx.mtu;
   1468e:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
}
   14692:	bd08      	pop	{r3, pc}

00014694 <att_req_destroy>:
{
   14694:	b510      	push	{r4, lr}
   14696:	4604      	mov	r4, r0
	if (req->buf) {
   14698:	6900      	ldr	r0, [r0, #16]
   1469a:	b108      	cbz	r0, 146a0 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   1469c:	f7f8 fe5e 	bl	d35c <net_buf_unref>
	if (req->destroy) {
   146a0:	68a3      	ldr	r3, [r4, #8]
   146a2:	b10b      	cbz	r3, 146a8 <att_req_destroy+0x14>
		req->destroy(req);
   146a4:	4620      	mov	r0, r4
   146a6:	4798      	blx	r3
	bt_att_req_free(req);
   146a8:	4620      	mov	r0, r4
}
   146aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   146ae:	f7f4 becb 	b.w	9448 <bt_att_req_free>

000146b2 <att_handle_find_info_rsp>:
	return att_handle_rsp(att, buf->data, buf->len, 0);
   146b2:	898a      	ldrh	r2, [r1, #12]
   146b4:	2300      	movs	r3, #0
   146b6:	6889      	ldr	r1, [r1, #8]
   146b8:	f7f4 bed2 	b.w	9460 <att_handle_rsp>

000146bc <att_handle_find_type_rsp>:
   146bc:	f7ff bff9 	b.w	146b2 <att_handle_find_info_rsp>

000146c0 <att_handle_read_type_rsp>:
   146c0:	f7ff bff7 	b.w	146b2 <att_handle_find_info_rsp>

000146c4 <att_handle_read_rsp>:
   146c4:	f7ff bff5 	b.w	146b2 <att_handle_find_info_rsp>

000146c8 <att_handle_read_blob_rsp>:
   146c8:	f7ff bff3 	b.w	146b2 <att_handle_find_info_rsp>

000146cc <att_handle_read_mult_rsp>:
   146cc:	f7ff bff1 	b.w	146b2 <att_handle_find_info_rsp>

000146d0 <att_handle_read_group_rsp>:
   146d0:	f7ff bfef 	b.w	146b2 <att_handle_find_info_rsp>

000146d4 <att_handle_write_rsp>:
   146d4:	f7ff bfed 	b.w	146b2 <att_handle_find_info_rsp>

000146d8 <att_handle_prepare_write_rsp>:
   146d8:	f7ff bfeb 	b.w	146b2 <att_handle_find_info_rsp>

000146dc <att_handle_exec_write_rsp>:
   146dc:	f7ff bfe9 	b.w	146b2 <att_handle_find_info_rsp>

000146e0 <att_confirm>:
   146e0:	f7ff bfe7 	b.w	146b2 <att_handle_find_info_rsp>

000146e4 <att_mtu_rsp>:
{
   146e4:	b410      	push	{r4}
   146e6:	460c      	mov	r4, r1
	if (!att) {
   146e8:	b190      	cbz	r0, 14710 <att_mtu_rsp+0x2c>
	rsp = (void *)buf->data;
   146ea:	6889      	ldr	r1, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
   146ec:	880a      	ldrh	r2, [r1, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   146ee:	2a16      	cmp	r2, #22
   146f0:	d805      	bhi.n	146fe <att_mtu_rsp+0x1a>
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   146f2:	2200      	movs	r2, #0
   146f4:	2304      	movs	r3, #4
   146f6:	4611      	mov	r1, r2
}
   146f8:	bc10      	pop	{r4}
	return att_handle_rsp(att, rsp, buf->len, 0);
   146fa:	f7f4 beb1 	b.w	9460 <att_handle_rsp>
	att->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   146fe:	2af7      	cmp	r2, #247	; 0xf7
   14700:	bf28      	it	cs
   14702:	22f7      	movcs	r2, #247	; 0xf7
	return att_handle_rsp(att, rsp, buf->len, 0);
   14704:	2300      	movs	r3, #0
	att->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   14706:	87c2      	strh	r2, [r0, #62]	; 0x3e
	att->chan.tx.mtu = att->chan.rx.mtu;
   14708:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
	return att_handle_rsp(att, rsp, buf->len, 0);
   1470c:	89a2      	ldrh	r2, [r4, #12]
   1470e:	e7f3      	b.n	146f8 <att_mtu_rsp+0x14>
}
   14710:	bc10      	pop	{r4}
   14712:	4770      	bx	lr

00014714 <att_reset>:
{
   14714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14716:	4604      	mov	r4, r0
	while ((buf = k_fifo_get(&att->prep_queue, K_NO_WAIT))) {
   14718:	f500 758a 	add.w	r5, r0, #276	; 0x114
	return z_impl_k_queue_get(queue, timeout);
   1471c:	2200      	movs	r2, #0
   1471e:	2300      	movs	r3, #0
   14720:	4628      	mov	r0, r5
   14722:	f7fa ffc9 	bl	f6b8 <z_impl_k_queue_get>
   14726:	bb20      	cbnz	r0, 14772 <att_reset+0x5e>
	while ((buf = k_fifo_get(&att->tx_queue, K_NO_WAIT))) {
   14728:	f104 05f8 	add.w	r5, r4, #248	; 0xf8
   1472c:	2200      	movs	r2, #0
   1472e:	2300      	movs	r3, #0
   14730:	4628      	mov	r0, r5
   14732:	f7fa ffc1 	bl	f6b8 <z_impl_k_queue_get>
   14736:	b9f8      	cbnz	r0, 14778 <att_reset+0x64>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14738:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
   1473c:	e8d3 2fef 	ldaex	r2, [r3]
   14740:	f042 0204 	orr.w	r2, r2, #4
   14744:	e8c3 2fe1 	stlex	r1, r2, [r3]
   14748:	2900      	cmp	r1, #0
   1474a:	d1f7      	bne.n	1473c <att_reset+0x28>
   1474c:	250a      	movs	r5, #10
		k_sem_give(&att->tx_sem);
   1474e:	f104 06e0 	add.w	r6, r4, #224	; 0xe0
	z_impl_k_sem_give(sem);
   14752:	4630      	mov	r0, r6
   14754:	f7fc f974 	bl	10a40 <z_impl_k_sem_give>
	for (i = 0; i < CONFIG_BT_ATT_TX_MAX; i++) {
   14758:	3d01      	subs	r5, #1
   1475a:	d1fa      	bne.n	14752 <att_reset+0x3e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   1475c:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
   14760:	b96d      	cbnz	r5, 1477e <att_reset+0x6a>
	list->head = NULL;
   14762:	2200      	movs	r2, #0
	if (!att->req) {
   14764:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
	list->tail = NULL;
   14768:	e9c4 222e 	strd	r2, r2, [r4, #184]	; 0xb8
   1476c:	b9cb      	cbnz	r3, 147a2 <att_reset+0x8e>
}
   1476e:	b003      	add	sp, #12
   14770:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   14772:	f7f8 fdf3 	bl	d35c <net_buf_unref>
   14776:	e7d1      	b.n	1471c <att_reset+0x8>
		net_buf_unref(buf);
   14778:	f7f8 fdf0 	bl	d35c <net_buf_unref>
   1477c:	e7d6      	b.n	1472c <att_reset+0x18>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1477e:	682e      	ldr	r6, [r5, #0]
		if (req->func) {
   14780:	686f      	ldr	r7, [r5, #4]
   14782:	b137      	cbz	r7, 14792 <att_reset+0x7e>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   14784:	69ab      	ldr	r3, [r5, #24]
   14786:	210e      	movs	r1, #14
   14788:	9300      	str	r3, [sp, #0]
   1478a:	2300      	movs	r3, #0
   1478c:	461a      	mov	r2, r3
   1478e:	4618      	mov	r0, r3
   14790:	47b8      	blx	r7
		att_req_destroy(req);
   14792:	4628      	mov	r0, r5
   14794:	f7ff ff7e 	bl	14694 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   14798:	2e00      	cmp	r6, #0
   1479a:	d0e2      	beq.n	14762 <att_reset+0x4e>
   1479c:	4635      	mov	r5, r6
   1479e:	6836      	ldr	r6, [r6, #0]
   147a0:	e7ee      	b.n	14780 <att_reset+0x6c>
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
   147a2:	230e      	movs	r3, #14
   147a4:	4611      	mov	r1, r2
   147a6:	4620      	mov	r0, r4
}
   147a8:	b003      	add	sp, #12
   147aa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
   147ae:	f7f4 be57 	b.w	9460 <att_handle_rsp>

000147b2 <bt_att_disconnected>:
{
   147b2:	b510      	push	{r4, lr}
   147b4:	4604      	mov	r4, r0
	att_reset(att);
   147b6:	f7ff ffad 	bl	14714 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   147ba:	6820      	ldr	r0, [r4, #0]
}
   147bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_disconnected(ch->chan.conn);
   147c0:	f7f6 bf70 	b.w	b6a4 <bt_gatt_disconnected>

000147c4 <gatt_ccc_changed>:
{
   147c4:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   147c6:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   147c8:	895a      	ldrh	r2, [r3, #10]
   147ca:	428a      	cmp	r2, r1
   147cc:	d003      	beq.n	147d6 <gatt_ccc_changed+0x12>
		ccc->value = value;
   147ce:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   147d0:	68db      	ldr	r3, [r3, #12]
   147d2:	b103      	cbz	r3, 147d6 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   147d4:	4718      	bx	r3
}
   147d6:	4770      	bx	lr

000147d8 <gatt_indicate_rsp>:
{
   147d8:	b410      	push	{r4}
   147da:	9b01      	ldr	r3, [sp, #4]
   147dc:	460a      	mov	r2, r1
	params->func(conn, params->attr, err);
   147de:	e9d3 1401 	ldrd	r1, r4, [r3, #4]
   147e2:	4623      	mov	r3, r4
}
   147e4:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
   147e6:	4718      	bx	r3

000147e8 <gatt_write_rsp>:
{
   147e8:	9a00      	ldr	r2, [sp, #0]
	params->func(conn, err, params);
   147ea:	6813      	ldr	r3, [r2, #0]
   147ec:	4718      	bx	r3

000147ee <gen_hash_m>:
{
   147ee:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   147f0:	6807      	ldr	r7, [r0, #0]
{
   147f2:	4605      	mov	r5, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   147f4:	783e      	ldrb	r6, [r7, #0]
{
   147f6:	460c      	mov	r4, r1
   147f8:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   147fa:	b10e      	cbz	r6, 14800 <gen_hash_m+0x12>
	switch (u16->val) {
   147fc:	2601      	movs	r6, #1
   147fe:	e015      	b.n	1482c <gen_hash_m+0x3e>
   14800:	887b      	ldrh	r3, [r7, #2]
   14802:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   14806:	d004      	beq.n	14812 <gen_hash_m+0x24>
   14808:	d813      	bhi.n	14832 <gen_hash_m+0x44>
   1480a:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1480e:	2b03      	cmp	r3, #3
   14810:	d8f4      	bhi.n	147fc <gen_hash_m+0xe>
		value = sys_cpu_to_le16(attr->handle);
   14812:	8a2b      	ldrh	r3, [r5, #16]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   14814:	2202      	movs	r2, #2
   14816:	4620      	mov	r0, r4
   14818:	f10d 010e 	add.w	r1, sp, #14
		value = sys_cpu_to_le16(attr->handle);
   1481c:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   14820:	f7fe fb03 	bl	12e2a <tc_cmac_update>
   14824:	b9e8      	cbnz	r0, 14862 <gen_hash_m+0x74>
			state->err = -EINVAL;
   14826:	f06f 0315 	mvn.w	r3, #21
   1482a:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1482c:	4630      	mov	r0, r6
   1482e:	b009      	add	sp, #36	; 0x24
   14830:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   14832:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   14836:	33ff      	adds	r3, #255	; 0xff
   14838:	b29b      	uxth	r3, r3
   1483a:	2b04      	cmp	r3, #4
   1483c:	d8de      	bhi.n	147fc <gen_hash_m+0xe>
		value = sys_cpu_to_le16(attr->handle);
   1483e:	8a03      	ldrh	r3, [r0, #16]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   14840:	2202      	movs	r2, #2
   14842:	4620      	mov	r0, r4
   14844:	f10d 010e 	add.w	r1, sp, #14
		value = sys_cpu_to_le16(attr->handle);
   14848:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1484c:	f7fe faed 	bl	12e2a <tc_cmac_update>
   14850:	2800      	cmp	r0, #0
   14852:	d0e8      	beq.n	14826 <gen_hash_m+0x38>
		value = sys_cpu_to_le16(u16->val);
   14854:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   14856:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   14858:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1485c:	f10d 010e 	add.w	r1, sp, #14
   14860:	e017      	b.n	14892 <gen_hash_m+0xa4>
		value = sys_cpu_to_le16(u16->val);
   14862:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   14864:	2202      	movs	r2, #2
   14866:	4620      	mov	r0, r4
   14868:	f10d 010e 	add.w	r1, sp, #14
		value = sys_cpu_to_le16(u16->val);
   1486c:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   14870:	f7fe fadb 	bl	12e2a <tc_cmac_update>
   14874:	2800      	cmp	r0, #0
   14876:	d0d6      	beq.n	14826 <gen_hash_m+0x38>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   14878:	2000      	movs	r0, #0
   1487a:	2310      	movs	r3, #16
   1487c:	4629      	mov	r1, r5
   1487e:	eb0d 0203 	add.w	r2, sp, r3
   14882:	686f      	ldr	r7, [r5, #4]
   14884:	9000      	str	r0, [sp, #0]
   14886:	47b8      	blx	r7
		if (len < 0) {
   14888:	1e02      	subs	r2, r0, #0
   1488a:	da01      	bge.n	14890 <gen_hash_m+0xa2>
			state->err = len;
   1488c:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1488e:	e7cd      	b.n	1482c <gen_hash_m+0x3e>
		if (tc_cmac_update(&state->state, data, len) ==
   14890:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   14892:	4620      	mov	r0, r4
   14894:	f7fe fac9 	bl	12e2a <tc_cmac_update>
   14898:	2800      	cmp	r0, #0
   1489a:	d1af      	bne.n	147fc <gen_hash_m+0xe>
   1489c:	e7c3      	b.n	14826 <gen_hash_m+0x38>

0001489e <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1489e:	2207      	movs	r2, #7
   148a0:	f7fe be66 	b.w	13570 <memcpy>

000148a4 <clear_ccc_cfg>:
{
   148a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   148a6:	2500      	movs	r5, #0
{
   148a8:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   148aa:	4669      	mov	r1, sp
   148ac:	3001      	adds	r0, #1
   148ae:	9500      	str	r5, [sp, #0]
   148b0:	f8cd 5003 	str.w	r5, [sp, #3]
   148b4:	f7ff fff3 	bl	1489e <bt_addr_le_copy>
	cfg->id = 0U;
   148b8:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   148ba:	8125      	strh	r5, [r4, #8]
}
   148bc:	b003      	add	sp, #12
   148be:	bd30      	pop	{r4, r5, pc}

000148c0 <atomic_and>:
{
   148c0:	4603      	mov	r3, r0
}
   148c2:	e8d3 0fef 	ldaex	r0, [r3]
   148c6:	ea00 0201 	and.w	r2, r0, r1
   148ca:	e8c3 2fec 	stlex	ip, r2, [r3]
   148ce:	f1bc 0f00 	cmp.w	ip, #0
   148d2:	d1f6      	bne.n	148c2 <atomic_and+0x2>
   148d4:	4770      	bx	lr

000148d6 <gatt_sub_remove.part.0>:
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   148d6:	2300      	movs	r3, #0
static void gatt_sub_remove(struct bt_conn *conn, struct gatt_sub *sub,
   148d8:	b507      	push	{r0, r1, r2, lr}
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   148da:	3001      	adds	r0, #1
   148dc:	4669      	mov	r1, sp
   148de:	9300      	str	r3, [sp, #0]
   148e0:	f8cd 3003 	str.w	r3, [sp, #3]
   148e4:	f7ff ffdb 	bl	1489e <bt_addr_le_copy>
}
   148e8:	b003      	add	sp, #12
   148ea:	f85d fb04 	ldr.w	pc, [sp], #4

000148ee <clear_cf_cfg>:
{
   148ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
   148f0:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   148f2:	2500      	movs	r5, #0
   148f4:	4669      	mov	r1, sp
   148f6:	3001      	adds	r0, #1
   148f8:	9500      	str	r5, [sp, #0]
   148fa:	f8cd 5003 	str.w	r5, [sp, #3]
   148fe:	f7ff ffce 	bl	1489e <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   14902:	f104 0008 	add.w	r0, r4, #8
   14906:	2201      	movs	r2, #1
   14908:	4629      	mov	r1, r5
   1490a:	f7fe fe5c 	bl	135c6 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1490e:	340c      	adds	r4, #12
   14910:	e8d4 3fef 	ldaex	r3, [r4]
   14914:	e8c4 5fe2 	stlex	r2, r5, [r4]
   14918:	2a00      	cmp	r2, #0
   1491a:	d1f9      	bne.n	14910 <clear_cf_cfg+0x22>
}
   1491c:	b003      	add	sp, #12
   1491e:	bd30      	pop	{r4, r5, pc}

00014920 <match_uuid>:
   14920:	6008      	str	r0, [r1, #0]
   14922:	2000      	movs	r0, #0
   14924:	4770      	bx	lr

00014926 <ccc_find_cfg>:
{
   14926:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   14928:	7803      	ldrb	r3, [r0, #0]
{
   1492a:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   1492c:	4293      	cmp	r3, r2
   1492e:	d001      	beq.n	14934 <ccc_find_cfg+0xe>
	return NULL;
   14930:	2000      	movs	r0, #0
}
   14932:	bd10      	pop	{r4, pc}
	return memcmp(a, b, sizeof(*a));
   14934:	2207      	movs	r2, #7
   14936:	3001      	adds	r0, #1
   14938:	f7fe fe0a 	bl	13550 <memcmp>
		if (id == ccc->cfg[i].id &&
   1493c:	2800      	cmp	r0, #0
   1493e:	d1f7      	bne.n	14930 <ccc_find_cfg+0xa>
			return &ccc->cfg[i];
   14940:	4620      	mov	r0, r4
   14942:	e7f6      	b.n	14932 <ccc_find_cfg+0xc>

00014944 <find_ccc_cfg>:
{
   14944:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14946:	460c      	mov	r4, r1
   14948:	1c4d      	adds	r5, r1, #1
		if (conn) {
   1494a:	b148      	cbz	r0, 14960 <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1494c:	462a      	mov	r2, r5
   1494e:	7809      	ldrb	r1, [r1, #0]
   14950:	f7ff f99a 	bl	13c88 <bt_conn_is_peer_addr_le>
   14954:	2800      	cmp	r0, #0
	return NULL;
   14956:	bf08      	it	eq
   14958:	2400      	moveq	r4, #0
}
   1495a:	4620      	mov	r0, r4
   1495c:	b003      	add	sp, #12
   1495e:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   14960:	9000      	str	r0, [sp, #0]
   14962:	2207      	movs	r2, #7
   14964:	f8cd 0003 	str.w	r0, [sp, #3]
   14968:	4669      	mov	r1, sp
   1496a:	4628      	mov	r0, r5
   1496c:	f7fe fdf0 	bl	13550 <memcmp>
   14970:	2800      	cmp	r0, #0
	return NULL;
   14972:	bf18      	it	ne
   14974:	2400      	movne	r4, #0
   14976:	e7f0      	b.n	1495a <find_ccc_cfg+0x16>

00014978 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   14978:	2301      	movs	r3, #1
   1497a:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1497c:	e8d0 2fef 	ldaex	r2, [r0]
   14980:	431a      	orrs	r2, r3
   14982:	e8c0 2fe1 	stlex	r1, r2, [r0]
   14986:	2900      	cmp	r1, #0
   14988:	d1f8      	bne.n	1497c <atomic_set_bit+0x4>
}
   1498a:	4770      	bx	lr

0001498c <sc_restore_rsp>:
{
   1498c:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   1498e:	f7f5 faab 	bl	9ee8 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   14992:	b140      	cbz	r0, 149a6 <sc_restore_rsp+0x1a>
   14994:	7a03      	ldrb	r3, [r0, #8]
   14996:	07db      	lsls	r3, r3, #31
   14998:	d505      	bpl.n	149a6 <sc_restore_rsp+0x1a>
}
   1499a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1499e:	2100      	movs	r1, #0
   149a0:	300c      	adds	r0, #12
   149a2:	f7ff bfe9 	b.w	14978 <atomic_set_bit>
}
   149a6:	bd08      	pop	{r3, pc}

000149a8 <read_appearance>:
{
   149a8:	b513      	push	{r0, r1, r4, lr}
   149aa:	4610      	mov	r0, r2
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
   149ac:	2200      	movs	r2, #0
{
   149ae:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
   149b2:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   149b6:	2902      	cmp	r1, #2
   149b8:	d80d      	bhi.n	149d6 <read_appearance+0x2e>
	len = MIN(buf_len, value_len - offset);
   149ba:	f1c1 0402 	rsb	r4, r1, #2
   149be:	429c      	cmp	r4, r3
   149c0:	bfa8      	it	ge
   149c2:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
   149c4:	f10d 0306 	add.w	r3, sp, #6
   149c8:	4622      	mov	r2, r4
   149ca:	4419      	add	r1, r3
   149cc:	f7fe fdd0 	bl	13570 <memcpy>
}
   149d0:	4620      	mov	r0, r4
   149d2:	b002      	add	sp, #8
   149d4:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   149d6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   149da:	e7f9      	b.n	149d0 <read_appearance+0x28>

000149dc <read_name>:
{
   149dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   149e0:	4698      	mov	r8, r3
   149e2:	4615      	mov	r5, r2
   149e4:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	const char *name = bt_get_name();
   149e8:	f7f1 fdc6 	bl	6578 <bt_get_name>
   149ec:	4607      	mov	r7, r0
				 strlen(name));
   149ee:	f7fe fd8d 	bl	1350c <strlen>
	if (offset > value_len) {
   149f2:	b283      	uxth	r3, r0
   149f4:	42b3      	cmp	r3, r6
   149f6:	d30c      	bcc.n	14a12 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   149f8:	1b9c      	subs	r4, r3, r6
   149fa:	4544      	cmp	r4, r8
   149fc:	bfa8      	it	ge
   149fe:	4644      	movge	r4, r8
   14a00:	b2a4      	uxth	r4, r4
	memcpy(buf, (u8_t *)value + offset, len);
   14a02:	4622      	mov	r2, r4
   14a04:	4628      	mov	r0, r5
   14a06:	19b9      	adds	r1, r7, r6
   14a08:	f7fe fdb2 	bl	13570 <memcpy>
}
   14a0c:	4620      	mov	r0, r4
   14a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   14a12:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   14a16:	e7f9      	b.n	14a0c <read_name+0x30>

00014a18 <cf_read>:
{
   14a18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14a1a:	461f      	mov	r7, r3
	u8_t data[1] = {};
   14a1c:	2300      	movs	r3, #0
{
   14a1e:	4615      	mov	r5, r2
   14a20:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	u8_t data[1] = {};
   14a24:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg = find_cf_cfg(conn);
   14a28:	f7f5 fa5e 	bl	9ee8 <find_cf_cfg>
	if (cfg) {
   14a2c:	b128      	cbz	r0, 14a3a <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   14a2e:	f100 0108 	add.w	r1, r0, #8
   14a32:	2201      	movs	r2, #1
   14a34:	a801      	add	r0, sp, #4
   14a36:	f7fe fd9b 	bl	13570 <memcpy>
	if (offset > value_len) {
   14a3a:	2e01      	cmp	r6, #1
   14a3c:	d80d      	bhi.n	14a5a <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   14a3e:	f1c6 0401 	rsb	r4, r6, #1
   14a42:	42bc      	cmp	r4, r7
   14a44:	bfa8      	it	ge
   14a46:	463c      	movge	r4, r7
	memcpy(buf, (u8_t *)value + offset, len);
   14a48:	ab01      	add	r3, sp, #4
   14a4a:	4622      	mov	r2, r4
   14a4c:	4628      	mov	r0, r5
   14a4e:	1999      	adds	r1, r3, r6
   14a50:	f7fe fd8e 	bl	13570 <memcpy>
}
   14a54:	4620      	mov	r0, r4
   14a56:	b003      	add	sp, #12
   14a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   14a5a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   14a5e:	e7f9      	b.n	14a54 <cf_read+0x3c>

00014a60 <bt_gatt_attr_read_ccc>:
{
   14a60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   14a62:	68c9      	ldr	r1, [r1, #12]
{
   14a64:	4615      	mov	r5, r2
   14a66:	461f      	mov	r7, r3
   14a68:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	cfg = find_ccc_cfg(conn, ccc);
   14a6c:	f7ff ff6a 	bl	14944 <find_ccc_cfg>
	if (cfg) {
   14a70:	b100      	cbz	r0, 14a74 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   14a72:	8900      	ldrh	r0, [r0, #8]
	if (offset > value_len) {
   14a74:	2e02      	cmp	r6, #2
   14a76:	f8ad 0006 	strh.w	r0, [sp, #6]
   14a7a:	d80e      	bhi.n	14a9a <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   14a7c:	f1c6 0402 	rsb	r4, r6, #2
   14a80:	42bc      	cmp	r4, r7
   14a82:	bfa8      	it	ge
   14a84:	463c      	movge	r4, r7
	memcpy(buf, (u8_t *)value + offset, len);
   14a86:	f10d 0306 	add.w	r3, sp, #6
   14a8a:	4622      	mov	r2, r4
   14a8c:	4628      	mov	r0, r5
   14a8e:	1999      	adds	r1, r3, r6
   14a90:	f7fe fd6e 	bl	13570 <memcpy>
}
   14a94:	4620      	mov	r0, r4
   14a96:	b003      	add	sp, #12
   14a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   14a9a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   14a9e:	e7f9      	b.n	14a94 <bt_gatt_attr_read_ccc+0x34>

00014aa0 <bt_gatt_attr_read_service>:
{
   14aa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   14aa2:	68c9      	ldr	r1, [r1, #12]
{
   14aa4:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   14aa6:	780b      	ldrb	r3, [r1, #0]
{
   14aa8:	4610      	mov	r0, r2
   14aaa:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   14aae:	b993      	cbnz	r3, 14ad6 <bt_gatt_attr_read_service+0x36>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   14ab0:	884b      	ldrh	r3, [r1, #2]
	if (offset > value_len) {
   14ab2:	2d02      	cmp	r5, #2
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   14ab4:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   14ab8:	d819      	bhi.n	14aee <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   14aba:	f1c5 0202 	rsb	r2, r5, #2
   14abe:	4294      	cmp	r4, r2
   14ac0:	bfa8      	it	ge
   14ac2:	4614      	movge	r4, r2
	memcpy(buf, (u8_t *)value + offset, len);
   14ac4:	4622      	mov	r2, r4
   14ac6:	f10d 0306 	add.w	r3, sp, #6
   14aca:	1959      	adds	r1, r3, r5
   14acc:	f7fe fd50 	bl	13570 <memcpy>
}
   14ad0:	4620      	mov	r0, r4
   14ad2:	b003      	add	sp, #12
   14ad4:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   14ad6:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   14ad8:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   14adc:	d807      	bhi.n	14aee <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   14ade:	f1c5 0210 	rsb	r2, r5, #16
   14ae2:	4294      	cmp	r4, r2
   14ae4:	bfa8      	it	ge
   14ae6:	4614      	movge	r4, r2
	memcpy(buf, (u8_t *)value + offset, len);
   14ae8:	4429      	add	r1, r5
   14aea:	4622      	mov	r2, r4
   14aec:	e7ee      	b.n	14acc <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   14aee:	f06f 0406 	mvn.w	r4, #6
   14af2:	e7ed      	b.n	14ad0 <bt_gatt_attr_read_service+0x30>

00014af4 <gatt_sub_remove>:
{
   14af4:	b538      	push	{r3, r4, r5, lr}
   14af6:	460c      	mov	r4, r1
	if (params) {
   14af8:	4619      	mov	r1, r3
   14afa:	b16b      	cbz	r3, 14b18 <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   14afc:	f103 0510 	add.w	r5, r3, #16
Z_GENLIST_REMOVE(slist, snode)
   14b00:	691b      	ldr	r3, [r3, #16]
   14b02:	b982      	cbnz	r2, 14b26 <gatt_sub_remove+0x32>
   14b04:	68e2      	ldr	r2, [r4, #12]
	list->head = node;
   14b06:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   14b08:	4295      	cmp	r5, r2
   14b0a:	d100      	bne.n	14b0e <gatt_sub_remove+0x1a>
	list->tail = node;
   14b0c:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   14b0e:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   14b10:	680d      	ldr	r5, [r1, #0]
   14b12:	461a      	mov	r2, r3
   14b14:	610b      	str	r3, [r1, #16]
   14b16:	47a8      	blx	r5
	if (sys_slist_is_empty(&sub->list)) {
   14b18:	68a3      	ldr	r3, [r4, #8]
   14b1a:	b953      	cbnz	r3, 14b32 <gatt_sub_remove+0x3e>
   14b1c:	4620      	mov	r0, r4
}
   14b1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   14b22:	f7ff bed8 	b.w	148d6 <gatt_sub_remove.part.0>
   14b26:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   14b28:	68e3      	ldr	r3, [r4, #12]
   14b2a:	429d      	cmp	r5, r3
	list->tail = node;
   14b2c:	bf08      	it	eq
   14b2e:	60e2      	streq	r2, [r4, #12]
}
   14b30:	e7ed      	b.n	14b0e <gatt_sub_remove+0x1a>
   14b32:	bd38      	pop	{r3, r4, r5, pc}

00014b34 <gatt_write_ccc_rsp>:
{
   14b34:	b570      	push	{r4, r5, r6, lr}
   14b36:	460e      	mov	r6, r1
   14b38:	9c04      	ldr	r4, [sp, #16]
   14b3a:	4605      	mov	r5, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14b3c:	f06f 0104 	mvn.w	r1, #4
   14b40:	f104 000c 	add.w	r0, r4, #12
   14b44:	f7ff febc 	bl	148c0 <atomic_and>
	if (err) {
   14b48:	b1b6      	cbz	r6, 14b78 <gatt_write_ccc_rsp+0x44>
		sub = gatt_sub_find(conn);
   14b4a:	2100      	movs	r1, #0
   14b4c:	4628      	mov	r0, r5
   14b4e:	f7f5 f843 	bl	9bd8 <gatt_sub_find_free>
		if (!sub) {
   14b52:	4601      	mov	r1, r0
   14b54:	b1d0      	cbz	r0, 14b8c <gatt_write_ccc_rsp+0x58>
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
   14b56:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   14b58:	b1c3      	cbz	r3, 14b8c <gatt_write_ccc_rsp+0x58>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   14b5a:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   14b5c:	f104 0010 	add.w	r0, r4, #16
   14b60:	4283      	cmp	r3, r0
   14b62:	d105      	bne.n	14b70 <gatt_write_ccc_rsp+0x3c>
				gatt_sub_remove(conn, sub, tmp, params);
   14b64:	4623      	mov	r3, r4
   14b66:	4628      	mov	r0, r5
}
   14b68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				gatt_sub_remove(conn, sub, tmp, params);
   14b6c:	f7ff bfc2 	b.w	14af4 <gatt_sub_remove>
Z_GENLIST_PEEK_NEXT(slist, snode)
   14b70:	b162      	cbz	r2, 14b8c <gatt_write_ccc_rsp+0x58>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   14b72:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   14b74:	6812      	ldr	r2, [r2, #0]
   14b76:	e7f3      	b.n	14b60 <gatt_write_ccc_rsp+0x2c>
	} else if (!params->value) {
   14b78:	8923      	ldrh	r3, [r4, #8]
   14b7a:	b93b      	cbnz	r3, 14b8c <gatt_write_ccc_rsp+0x58>
		params->notify(conn, params, NULL, 0);
   14b7c:	6826      	ldr	r6, [r4, #0]
   14b7e:	4621      	mov	r1, r4
   14b80:	4628      	mov	r0, r5
   14b82:	46b4      	mov	ip, r6
}
   14b84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		params->notify(conn, params, NULL, 0);
   14b88:	461a      	mov	r2, r3
   14b8a:	4760      	bx	ip
}
   14b8c:	bd70      	pop	{r4, r5, r6, pc}

00014b8e <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   14b8e:	2a02      	cmp	r2, #2
{
   14b90:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   14b92:	d108      	bne.n	14ba6 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   14b94:	2300      	movs	r3, #0
   14b96:	f100 017c 	add.w	r1, r0, #124	; 0x7c
   14b9a:	461a      	mov	r2, r3
   14b9c:	7a00      	ldrb	r0, [r0, #8]
   14b9e:	f7f5 f877 	bl	9c90 <sc_save>
}
   14ba2:	2002      	movs	r0, #2
   14ba4:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   14ba6:	f7f5 faf5 	bl	a194 <sc_clear>
   14baa:	e7fa      	b.n	14ba2 <sc_ccc_cfg_write+0x14>

00014bac <bt_gatt_attr_read_chrc>:
{
   14bac:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   14bae:	68cf      	ldr	r7, [r1, #12]
{
   14bb0:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   14bb2:	79bb      	ldrb	r3, [r7, #6]
{
   14bb4:	b087      	sub	sp, #28
   14bb6:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   14bb8:	f88d 3004 	strb.w	r3, [sp, #4]
{
   14bbc:	4615      	mov	r5, r2
   14bbe:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   14bc2:	f7f5 fbaf 	bl	a324 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   14bc6:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   14bc8:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   14bcc:	780b      	ldrb	r3, [r1, #0]
   14bce:	b99b      	cbnz	r3, 14bf8 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   14bd0:	884b      	ldrh	r3, [r1, #2]
		value_len += 2U;
   14bd2:	2105      	movs	r1, #5
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   14bd4:	f8ad 3007 	strh.w	r3, [sp, #7]
	if (offset > value_len) {
   14bd8:	42b1      	cmp	r1, r6
   14bda:	d315      	bcc.n	14c08 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   14bdc:	1b89      	subs	r1, r1, r6
   14bde:	42a1      	cmp	r1, r4
   14be0:	bfa8      	it	ge
   14be2:	4621      	movge	r1, r4
	memcpy(buf, (u8_t *)value + offset, len);
   14be4:	ab01      	add	r3, sp, #4
   14be6:	b28c      	uxth	r4, r1
   14be8:	4622      	mov	r2, r4
   14bea:	4628      	mov	r0, r5
   14bec:	1999      	adds	r1, r3, r6
   14bee:	f7fe fcbf 	bl	13570 <memcpy>
}
   14bf2:	4620      	mov	r0, r4
   14bf4:	b007      	add	sp, #28
   14bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   14bf8:	3101      	adds	r1, #1
   14bfa:	2210      	movs	r2, #16
   14bfc:	f10d 0007 	add.w	r0, sp, #7
   14c00:	f7fe fcb6 	bl	13570 <memcpy>
		value_len += 16U;
   14c04:	2113      	movs	r1, #19
   14c06:	e7e7      	b.n	14bd8 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   14c08:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   14c0c:	e7f1      	b.n	14bf2 <bt_gatt_attr_read_chrc+0x46>

00014c0e <bt_gatt_foreach_attr>:
{
   14c0e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   14c10:	e9cd 2301 	strd	r2, r3, [sp, #4]
   14c14:	2300      	movs	r3, #0
   14c16:	461a      	mov	r2, r3
   14c18:	9300      	str	r3, [sp, #0]
   14c1a:	f7f5 fb9b 	bl	a354 <bt_gatt_foreach_attr_type>
}
   14c1e:	b005      	add	sp, #20
   14c20:	f85d fb04 	ldr.w	pc, [sp], #4

00014c24 <db_hash_process>:
	db_hash_gen(true);
   14c24:	2001      	movs	r0, #1
   14c26:	f7f5 bc0f 	b.w	a448 <db_hash_gen>

00014c2a <bt_gatt_check_perm>:
{
   14c2a:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   14c2c:	07d4      	lsls	r4, r2, #31
{
   14c2e:	4605      	mov	r5, r0
   14c30:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   14c32:	d504      	bpl.n	14c3e <bt_gatt_check_perm+0x14>
   14c34:	f010 0f15 	tst.w	r0, #21
   14c38:	d01e      	beq.n	14c78 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   14c3a:	684b      	ldr	r3, [r1, #4]
   14c3c:	b1e3      	cbz	r3, 14c78 <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   14c3e:	0793      	lsls	r3, r2, #30
   14c40:	d504      	bpl.n	14c4c <bt_gatt_check_perm+0x22>
   14c42:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   14c46:	d019      	beq.n	14c7c <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   14c48:	688b      	ldr	r3, [r1, #8]
   14c4a:	b1bb      	cbz	r3, 14c7c <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   14c4c:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   14c50:	f014 0f30 	tst.w	r4, #48	; 0x30
   14c54:	d103      	bne.n	14c5e <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   14c56:	f014 000c 	ands.w	r0, r4, #12
   14c5a:	d107      	bne.n	14c6c <bt_gatt_check_perm+0x42>
}
   14c5c:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   14c5e:	4628      	mov	r0, r5
   14c60:	f7ff f810 	bl	13c84 <bt_conn_get_security>
   14c64:	2802      	cmp	r0, #2
   14c66:	d8f6      	bhi.n	14c56 <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   14c68:	2005      	movs	r0, #5
   14c6a:	e7f7      	b.n	14c5c <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   14c6c:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   14c6e:	2b00      	cmp	r3, #0
   14c70:	bf14      	ite	ne
   14c72:	2000      	movne	r0, #0
   14c74:	200f      	moveq	r0, #15
   14c76:	e7f1      	b.n	14c5c <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   14c78:	2002      	movs	r0, #2
   14c7a:	e7ef      	b.n	14c5c <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   14c7c:	2003      	movs	r0, #3
   14c7e:	e7ed      	b.n	14c5c <bt_gatt_check_perm+0x32>

00014c80 <gatt_discover_next>:
{
   14c80:	b570      	push	{r4, r5, r6, lr}
   14c82:	4605      	mov	r5, r0
   14c84:	4614      	mov	r4, r2
	if (!last_handle)
   14c86:	b929      	cbnz	r1, 14c94 <gatt_discover_next+0x14>
	if (!bt_gatt_discover(conn, params)) {
   14c88:	4621      	mov	r1, r4
   14c8a:	4628      	mov	r0, r5
   14c8c:	f7f5 fe48 	bl	a920 <bt_gatt_discover>
   14c90:	b928      	cbnz	r0, 14c9e <gatt_discover_next+0x1e>
}
   14c92:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   14c94:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14c98:	4291      	cmp	r1, r2
   14c9a:	d107      	bne.n	14cac <gatt_discover_next+0x2c>
	params->start_handle = last_handle;
   14c9c:	8121      	strh	r1, [r4, #8]
	params->func(conn, NULL, params);
   14c9e:	4622      	mov	r2, r4
   14ca0:	4628      	mov	r0, r5
   14ca2:	6863      	ldr	r3, [r4, #4]
   14ca4:	2100      	movs	r1, #0
}
   14ca6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   14caa:	4718      	bx	r3
	if (params->start_handle > params->end_handle) {
   14cac:	89e2      	ldrh	r2, [r4, #14]
		params->start_handle++;
   14cae:	1c4b      	adds	r3, r1, #1
   14cb0:	b29b      	uxth	r3, r3
	if (params->start_handle > params->end_handle) {
   14cb2:	429a      	cmp	r2, r3
		params->start_handle++;
   14cb4:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
   14cb6:	d2e7      	bcs.n	14c88 <gatt_discover_next+0x8>
   14cb8:	e7f1      	b.n	14c9e <gatt_discover_next+0x1e>

00014cba <gatt_find_type_rsp>:
{
   14cba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14cbe:	b088      	sub	sp, #32
   14cc0:	4607      	mov	r7, r0
   14cc2:	4690      	mov	r8, r2
   14cc4:	461d      	mov	r5, r3
	if (err) {
   14cc6:	460c      	mov	r4, r1
{
   14cc8:	9e10      	ldr	r6, [sp, #64]	; 0x40
	if (err) {
   14cca:	2900      	cmp	r1, #0
   14ccc:	d13a      	bne.n	14d44 <gatt_find_type_rsp+0x8a>
	u16_t end_handle = 0U, start_handle;
   14cce:	4689      	mov	r9, r1
		struct bt_gatt_attr attr = {};
   14cd0:	468a      	mov	sl, r1
	for (i = 0U; length >= sizeof(rsp->list[i]);
   14cd2:	2d03      	cmp	r5, #3
   14cd4:	d809      	bhi.n	14cea <gatt_find_type_rsp+0x30>
	if (length > 0) {
   14cd6:	2d00      	cmp	r5, #0
   14cd8:	d134      	bne.n	14d44 <gatt_find_type_rsp+0x8a>
	gatt_discover_next(conn, end_handle, params);
   14cda:	4632      	mov	r2, r6
   14cdc:	4649      	mov	r1, r9
   14cde:	4638      	mov	r0, r7
   14ce0:	f7ff ffce 	bl	14c80 <gatt_discover_next>
}
   14ce4:	b008      	add	sp, #32
   14ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		struct bt_gatt_attr attr = {};
   14cea:	2210      	movs	r2, #16
   14cec:	2100      	movs	r1, #0
   14cee:	eb0d 0002 	add.w	r0, sp, r2
   14cf2:	f7fe fc68 	bl	135c6 <memset>
		start_handle = sys_le16_to_cpu(rsp->list[i].start_handle);
   14cf6:	b2e3      	uxtb	r3, r4
   14cf8:	f838 2023 	ldrh.w	r2, [r8, r3, lsl #2]
		end_handle = sys_le16_to_cpu(rsp->list[i].end_handle);
   14cfc:	eb08 0183 	add.w	r1, r8, r3, lsl #2
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   14d00:	7c33      	ldrb	r3, [r6, #16]
		end_handle = sys_le16_to_cpu(rsp->list[i].end_handle);
   14d02:	f8b1 9002 	ldrh.w	r9, [r1, #2]
			uuid_svc.val = BT_UUID_16(BT_UUID_GATT_SECONDARY)->val;
   14d06:	2b00      	cmp	r3, #0
   14d08:	f642 0301 	movw	r3, #10241	; 0x2801
   14d0c:	bf08      	it	eq
   14d0e:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
   14d12:	f8ad 3002 	strh.w	r3, [sp, #2]
		value.uuid = params->uuid;
   14d16:	6833      	ldr	r3, [r6, #0]
		attr.handle = start_handle;
   14d18:	f8ad 201c 	strh.w	r2, [sp, #28]
		value.uuid = params->uuid;
   14d1c:	9301      	str	r3, [sp, #4]
		attr.user_data = &value;
   14d1e:	ab01      	add	r3, sp, #4
   14d20:	9306      	str	r3, [sp, #24]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14d22:	4632      	mov	r2, r6
   14d24:	4638      	mov	r0, r7
   14d26:	6873      	ldr	r3, [r6, #4]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   14d28:	f88d a000 	strb.w	sl, [sp]
		value.end_handle = end_handle;
   14d2c:	f8ad 9008 	strh.w	r9, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
   14d30:	f8cd d00c 	str.w	sp, [sp, #12]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14d34:	a903      	add	r1, sp, #12
   14d36:	4798      	blx	r3
   14d38:	3401      	adds	r4, #1
   14d3a:	2800      	cmp	r0, #0
   14d3c:	d0d2      	beq.n	14ce4 <gatt_find_type_rsp+0x2a>
	     i++, length -=  sizeof(rsp->list[i])) {
   14d3e:	3d04      	subs	r5, #4
   14d40:	b2ad      	uxth	r5, r5
   14d42:	e7c6      	b.n	14cd2 <gatt_find_type_rsp+0x18>
	params->func(conn, NULL, params);
   14d44:	4632      	mov	r2, r6
   14d46:	2100      	movs	r1, #0
   14d48:	4638      	mov	r0, r7
   14d4a:	6873      	ldr	r3, [r6, #4]
   14d4c:	4798      	blx	r3
   14d4e:	e7c9      	b.n	14ce4 <gatt_find_type_rsp+0x2a>

00014d50 <bt_gatt_notification>:
{
   14d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14d54:	4688      	mov	r8, r1
	sub = gatt_sub_find(conn);
   14d56:	2100      	movs	r1, #0
{
   14d58:	4607      	mov	r7, r0
   14d5a:	4691      	mov	r9, r2
   14d5c:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   14d5e:	f7f4 ff3b 	bl	9bd8 <gatt_sub_find_free>
	if (!sub) {
   14d62:	b1f8      	cbz	r0, 14da4 <bt_gatt_notification+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   14d64:	6883      	ldr	r3, [r0, #8]
   14d66:	b1eb      	cbz	r3, 14da4 <bt_gatt_notification+0x54>
   14d68:	f1b3 0610 	subs.w	r6, r3, #16
   14d6c:	d01a      	beq.n	14da4 <bt_gatt_notification+0x54>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   14d6e:	681c      	ldr	r4, [r3, #0]
   14d70:	b104      	cbz	r4, 14d74 <bt_gatt_notification+0x24>
   14d72:	3c10      	subs	r4, #16
		if (handle != params->value_handle) {
   14d74:	88b3      	ldrh	r3, [r6, #4]
   14d76:	4543      	cmp	r3, r8
   14d78:	d10a      	bne.n	14d90 <bt_gatt_notification+0x40>
		if (params->notify(conn, params, data, length) ==
   14d7a:	4653      	mov	r3, sl
   14d7c:	464a      	mov	r2, r9
   14d7e:	4631      	mov	r1, r6
   14d80:	4638      	mov	r0, r7
   14d82:	6835      	ldr	r5, [r6, #0]
   14d84:	47a8      	blx	r5
   14d86:	b918      	cbnz	r0, 14d90 <bt_gatt_notification+0x40>
			bt_gatt_unsubscribe(conn, params);
   14d88:	4631      	mov	r1, r6
   14d8a:	4638      	mov	r0, r7
   14d8c:	f7f6 fb16 	bl	b3bc <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   14d90:	b144      	cbz	r4, 14da4 <bt_gatt_notification+0x54>
Z_GENLIST_PEEK_NEXT(slist, snode)
   14d92:	f114 0510 	adds.w	r5, r4, #16
   14d96:	d002      	beq.n	14d9e <bt_gatt_notification+0x4e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   14d98:	6925      	ldr	r5, [r4, #16]
   14d9a:	b105      	cbz	r5, 14d9e <bt_gatt_notification+0x4e>
   14d9c:	3d10      	subs	r5, #16
{
   14d9e:	4626      	mov	r6, r4
   14da0:	462c      	mov	r4, r5
   14da2:	e7e7      	b.n	14d74 <bt_gatt_notification+0x24>
}
   14da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00014da8 <bt_gatt_change_aware>:
{
   14da8:	b570      	push	{r4, r5, r6, lr}
   14daa:	460d      	mov	r5, r1
	cfg = find_cf_cfg(conn);
   14dac:	f7f5 f89c 	bl	9ee8 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   14db0:	b910      	cbnz	r0, 14db8 <bt_gatt_change_aware+0x10>
		return true;
   14db2:	2501      	movs	r5, #1
}
   14db4:	4628      	mov	r0, r5
   14db6:	bd70      	pop	{r4, r5, r6, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   14db8:	7a03      	ldrb	r3, [r0, #8]
   14dba:	07da      	lsls	r2, r3, #31
   14dbc:	d5f9      	bpl.n	14db2 <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   14dbe:	f100 040c 	add.w	r4, r0, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14dc2:	e8d4 1faf 	lda	r1, [r4]
   14dc6:	f011 0601 	ands.w	r6, r1, #1
   14dca:	d1f2      	bne.n	14db2 <bt_gatt_change_aware+0xa>
	if (!req) {
   14dcc:	2d00      	cmp	r5, #0
   14dce:	d0f1      	beq.n	14db4 <bt_gatt_change_aware+0xc>
   14dd0:	e8d4 3faf 	lda	r3, [r4]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   14dd4:	f3c3 0540 	ubfx	r5, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   14dd8:	079b      	lsls	r3, r3, #30
   14dda:	d509      	bpl.n	14df0 <bt_gatt_change_aware+0x48>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14ddc:	f06f 0102 	mvn.w	r1, #2
   14de0:	4620      	mov	r0, r4
   14de2:	f7ff fd6d 	bl	148c0 <atomic_and>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   14de6:	4631      	mov	r1, r6
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   14de8:	4620      	mov	r0, r4
   14dea:	f7ff fdc5 	bl	14978 <atomic_set_bit>
	return false;
   14dee:	e7e1      	b.n	14db4 <bt_gatt_change_aware+0xc>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   14df0:	2101      	movs	r1, #1
   14df2:	e7f9      	b.n	14de8 <bt_gatt_change_aware+0x40>

00014df4 <smp_pairing_req>:
}
   14df4:	2007      	movs	r0, #7
   14df6:	4770      	bx	lr

00014df8 <bt_smp_aes_cmac>:
{
   14df8:	b570      	push	{r4, r5, r6, lr}
   14dfa:	b0c2      	sub	sp, #264	; 0x108
   14dfc:	460d      	mov	r5, r1
   14dfe:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   14e00:	4601      	mov	r1, r0
   14e02:	aa16      	add	r2, sp, #88	; 0x58
   14e04:	4668      	mov	r0, sp
{
   14e06:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   14e08:	f7fd ffe4 	bl	12dd4 <tc_cmac_setup>
   14e0c:	b150      	cbz	r0, 14e24 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   14e0e:	4632      	mov	r2, r6
   14e10:	4629      	mov	r1, r5
   14e12:	4668      	mov	r0, sp
   14e14:	f7fe f809 	bl	12e2a <tc_cmac_update>
   14e18:	b120      	cbz	r0, 14e24 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   14e1a:	4669      	mov	r1, sp
   14e1c:	4620      	mov	r0, r4
   14e1e:	f7fe f870 	bl	12f02 <tc_cmac_final>
   14e22:	b918      	cbnz	r0, 14e2c <bt_smp_aes_cmac+0x34>
		return -EIO;
   14e24:	f06f 0004 	mvn.w	r0, #4
}
   14e28:	b042      	add	sp, #264	; 0x108
   14e2a:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   14e2c:	2000      	movs	r0, #0
   14e2e:	e7fb      	b.n	14e28 <bt_smp_aes_cmac+0x30>

00014e30 <bt_smp_disconnected>:
{
   14e30:	b538      	push	{r3, r4, r5, lr}
	struct bt_keys *keys = chan->conn->le.keys;
   14e32:	6803      	ldr	r3, [r0, #0]
{
   14e34:	4604      	mov	r4, r0
	struct bt_keys *keys = chan->conn->le.keys;
   14e36:	f8d3 50a8 	ldr.w	r5, [r3, #168]	; 0xa8
	k_delayed_work_cancel(&smp->work);
   14e3a:	f500 70ce 	add.w	r0, r0, #412	; 0x19c
   14e3e:	f7fc f8ed 	bl	1101c <k_delayed_work_cancel>
	if (keys) {
   14e42:	b13d      	cbz	r5, 14e54 <bt_smp_disconnected+0x24>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   14e44:	89eb      	ldrh	r3, [r5, #14]
   14e46:	b113      	cbz	r3, 14e4e <bt_smp_disconnected+0x1e>
   14e48:	7b6b      	ldrb	r3, [r5, #13]
   14e4a:	079b      	lsls	r3, r3, #30
   14e4c:	d502      	bpl.n	14e54 <bt_smp_disconnected+0x24>
			bt_keys_clear(keys);
   14e4e:	4628      	mov	r0, r5
   14e50:	f7f8 f820 	bl	ce94 <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   14e54:	4620      	mov	r0, r4
}
   14e56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	(void)memset(smp, 0, sizeof(*smp));
   14e5a:	f44f 72de 	mov.w	r2, #444	; 0x1bc
   14e5e:	2100      	movs	r1, #0
   14e60:	f7fe bbb1 	b.w	135c6 <memset>

00014e64 <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   14e64:	b510      	push	{r4, lr}
   14e66:	1e43      	subs	r3, r0, #1
   14e68:	f100 0210 	add.w	r2, r0, #16
   14e6c:	3007      	adds	r0, #7
		u8_t tmp = ((u8_t *)buf)[i];
   14e6e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
   14e72:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   14e76:	4283      	cmp	r3, r0
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
   14e78:	701c      	strb	r4, [r3, #0]
		((u8_t *)buf)[length - 1 - i] = tmp;
   14e7a:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   14e7c:	d1f7      	bne.n	14e6e <sys_mem_swap.constprop.0+0xa>
	}
}
   14e7e:	bd10      	pop	{r4, pc}

00014e80 <smp_f6>:
{
   14e80:	b5f0      	push	{r4, r5, r6, r7, lr}
   14e82:	4616      	mov	r6, r2
   14e84:	461c      	mov	r4, r3
   14e86:	4605      	mov	r5, r0
   14e88:	b097      	sub	sp, #92	; 0x5c
	sys_memcpy_swap(m, n1, 16);
   14e8a:	2210      	movs	r2, #16
   14e8c:	a805      	add	r0, sp, #20
{
   14e8e:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   14e90:	f7f6 fcce 	bl	b830 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   14e94:	2210      	movs	r2, #16
   14e96:	4631      	mov	r1, r6
   14e98:	a809      	add	r0, sp, #36	; 0x24
   14e9a:	f7f6 fcc9 	bl	b830 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   14e9e:	4621      	mov	r1, r4
   14ea0:	2210      	movs	r2, #16
   14ea2:	a80d      	add	r0, sp, #52	; 0x34
   14ea4:	f7f6 fcc4 	bl	b830 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   14ea8:	2203      	movs	r2, #3
   14eaa:	991c      	ldr	r1, [sp, #112]	; 0x70
   14eac:	a811      	add	r0, sp, #68	; 0x44
   14eae:	f7f6 fcbf 	bl	b830 <sys_memcpy_swap>
	m[51] = a1->type;
   14eb2:	9c1d      	ldr	r4, [sp, #116]	; 0x74
	memcpy(m + 52, a1->a.val, 6);
   14eb4:	2206      	movs	r2, #6
	m[51] = a1->type;
   14eb6:	f814 3b01 	ldrb.w	r3, [r4], #1
	memcpy(m + 52, a1->a.val, 6);
   14eba:	a812      	add	r0, sp, #72	; 0x48
   14ebc:	4621      	mov	r1, r4
	m[51] = a1->type;
   14ebe:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   14ec2:	f7fe fb55 	bl	13570 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   14ec6:	4621      	mov	r1, r4
   14ec8:	2206      	movs	r2, #6
   14eca:	a812      	add	r0, sp, #72	; 0x48
   14ecc:	f7f6 fcb0 	bl	b830 <sys_memcpy_swap>
	m[58] = a2->type;
   14ed0:	9c1e      	ldr	r4, [sp, #120]	; 0x78
	memcpy(m + 59, a2->a.val, 6);
   14ed2:	2206      	movs	r2, #6
	m[58] = a2->type;
   14ed4:	f814 3b01 	ldrb.w	r3, [r4], #1
	memcpy(m + 59, a2->a.val, 6);
   14ed8:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   14edc:	4621      	mov	r1, r4
	m[58] = a2->type;
   14ede:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   14ee2:	f7fe fb45 	bl	13570 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   14ee6:	4621      	mov	r1, r4
   14ee8:	2206      	movs	r2, #6
   14eea:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   14eee:	f7f6 fc9f 	bl	b830 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   14ef2:	2210      	movs	r2, #16
   14ef4:	4629      	mov	r1, r5
   14ef6:	a801      	add	r0, sp, #4
   14ef8:	f7f6 fc9a 	bl	b830 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   14efc:	463b      	mov	r3, r7
   14efe:	2241      	movs	r2, #65	; 0x41
   14f00:	a905      	add	r1, sp, #20
   14f02:	a801      	add	r0, sp, #4
   14f04:	f7ff ff78 	bl	14df8 <bt_smp_aes_cmac>
	if (err) {
   14f08:	4604      	mov	r4, r0
   14f0a:	b910      	cbnz	r0, 14f12 <smp_f6+0x92>
	sys_mem_swap(check, 16);
   14f0c:	4638      	mov	r0, r7
   14f0e:	f7ff ffa9 	bl	14e64 <sys_mem_swap.constprop.0>
}
   14f12:	4620      	mov	r0, r4
   14f14:	b017      	add	sp, #92	; 0x5c
   14f16:	bdf0      	pop	{r4, r5, r6, r7, pc}

00014f18 <smp_f4>:
{
   14f18:	b5f0      	push	{r4, r5, r6, r7, lr}
   14f1a:	460e      	mov	r6, r1
   14f1c:	4614      	mov	r4, r2
   14f1e:	461d      	mov	r5, r3
   14f20:	b097      	sub	sp, #92	; 0x5c
	sys_memcpy_swap(m, u, 32);
   14f22:	4601      	mov	r1, r0
   14f24:	2220      	movs	r2, #32
   14f26:	a805      	add	r0, sp, #20
{
   14f28:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   14f2a:	f7f6 fc81 	bl	b830 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   14f2e:	2220      	movs	r2, #32
   14f30:	4631      	mov	r1, r6
   14f32:	a80d      	add	r0, sp, #52	; 0x34
   14f34:	f7f6 fc7c 	bl	b830 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   14f38:	4621      	mov	r1, r4
   14f3a:	2210      	movs	r2, #16
   14f3c:	a801      	add	r0, sp, #4
	m[64] = z;
   14f3e:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   14f42:	f7f6 fc75 	bl	b830 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   14f46:	463b      	mov	r3, r7
   14f48:	2241      	movs	r2, #65	; 0x41
   14f4a:	a905      	add	r1, sp, #20
   14f4c:	a801      	add	r0, sp, #4
   14f4e:	f7ff ff53 	bl	14df8 <bt_smp_aes_cmac>
	if (err) {
   14f52:	4604      	mov	r4, r0
   14f54:	b910      	cbnz	r0, 14f5c <smp_f4+0x44>
	sys_mem_swap(res, 16);
   14f56:	4638      	mov	r0, r7
   14f58:	f7ff ff84 	bl	14e64 <sys_mem_swap.constprop.0>
}
   14f5c:	4620      	mov	r0, r4
   14f5e:	b017      	add	sp, #92	; 0x5c
   14f60:	bdf0      	pop	{r4, r5, r6, r7, pc}

00014f62 <smp_signing_info>:
   14f62:	2007      	movs	r0, #7
   14f64:	4770      	bx	lr

00014f66 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14f66:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   14f6a:	4108      	asrs	r0, r1
}
   14f6c:	f000 0001 	and.w	r0, r0, #1
   14f70:	4770      	bx	lr

00014f72 <atomic_test_and_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   14f72:	2301      	movs	r3, #1
   14f74:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14f78:	43ca      	mvns	r2, r1
{
   14f7a:	b500      	push	{lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14f7c:	e8d0 3fef 	ldaex	r3, [r0]
   14f80:	ea03 0c02 	and.w	ip, r3, r2
   14f84:	e8c0 cfee 	stlex	lr, ip, [r0]
   14f88:	f1be 0f00 	cmp.w	lr, #0
   14f8c:	d1f6      	bne.n	14f7c <atomic_test_and_clear_bit+0xa>
	return (old & mask) != 0;
   14f8e:	420b      	tst	r3, r1
}
   14f90:	bf14      	ite	ne
   14f92:	2001      	movne	r0, #1
   14f94:	2000      	moveq	r0, #0
   14f96:	f85d fb04 	ldr.w	pc, [sp], #4

00014f9a <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   14f9a:	2301      	movs	r3, #1
   14f9c:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14f9e:	e8d0 2fef 	ldaex	r2, [r0]
   14fa2:	431a      	orrs	r2, r3
   14fa4:	e8c0 2fe1 	stlex	r1, r2, [r0]
   14fa8:	2900      	cmp	r1, #0
   14faa:	d1f8      	bne.n	14f9e <atomic_set_bit+0x4>
}
   14fac:	4770      	bx	lr

00014fae <smp_create_pdu.isra.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, u8_t op, size_t len)
   14fae:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   14fb0:	f100 05b4 	add.w	r5, r0, #180	; 0xb4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, u8_t op, size_t len)
   14fb4:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   14fb6:	4628      	mov	r0, r5
   14fb8:	2104      	movs	r1, #4
   14fba:	f7ff ffd4 	bl	14f66 <atomic_test_bit>
   14fbe:	b168      	cbz	r0, 14fdc <smp_create_pdu.isra.0+0x2e>
		timeout = K_NO_WAIT;
   14fc0:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   14fc2:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   14fc4:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   14fc6:	4608      	mov	r0, r1
   14fc8:	f7fe ffe6 	bl	13f98 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   14fcc:	4604      	mov	r4, r0
   14fce:	b940      	cbnz	r0, 14fe2 <smp_create_pdu.isra.0+0x34>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   14fd0:	2104      	movs	r1, #4
   14fd2:	4628      	mov	r0, r5
   14fd4:	f7ff ffe1 	bl	14f9a <atomic_set_bit>
}
   14fd8:	4620      	mov	r0, r4
   14fda:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   14fdc:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   14fe0:	e7ef      	b.n	14fc2 <smp_create_pdu.isra.0+0x14>
	hdr = net_buf_add(buf, sizeof(*hdr));
   14fe2:	2101      	movs	r1, #1
   14fe4:	3008      	adds	r0, #8
   14fe6:	f7f8 fb2b 	bl	d640 <net_buf_simple_add>
	hdr->code = op;
   14fea:	7006      	strb	r6, [r0, #0]
	return buf;
   14fec:	e7f4      	b.n	14fd8 <smp_create_pdu.isra.0+0x2a>

00014fee <smp_send_pairing_random>:
{
   14fee:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   14ff0:	2104      	movs	r1, #4
{
   14ff2:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   14ff4:	f7ff ffdb 	bl	14fae <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   14ff8:	4604      	mov	r4, r0
   14ffa:	b178      	cbz	r0, 1501c <smp_send_pairing_random+0x2e>
	req = net_buf_add(rsp_buf, sizeof(*req));
   14ffc:	2110      	movs	r1, #16
   14ffe:	3008      	adds	r0, #8
   15000:	f7f8 fb1e 	bl	d640 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   15004:	2210      	movs	r2, #16
   15006:	f105 01d7 	add.w	r1, r5, #215	; 0xd7
   1500a:	f7fe fab1 	bl	13570 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   1500e:	4628      	mov	r0, r5
   15010:	2200      	movs	r2, #0
   15012:	4621      	mov	r1, r4
   15014:	f7f6 fc5e 	bl	b8d4 <smp_send.isra.0>
	return 0;
   15018:	2000      	movs	r0, #0
}
   1501a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1501c:	2008      	movs	r0, #8
   1501e:	e7fc      	b.n	1501a <smp_send_pairing_random+0x2c>

00015020 <smp_pairing_confirm>:
{
   15020:	b510      	push	{r4, lr}
   15022:	4604      	mov	r4, r0
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   15024:	6889      	ldr	r1, [r1, #8]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15026:	f100 03b4 	add.w	r3, r0, #180	; 0xb4
   1502a:	e8d3 2fef 	ldaex	r2, [r3]
   1502e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
   15032:	e8c3 2fe0 	stlex	r0, r2, [r3]
   15036:	2800      	cmp	r0, #0
   15038:	d1f7      	bne.n	1502a <smp_pairing_confirm+0xa>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   1503a:	2210      	movs	r2, #16
   1503c:	f104 00c7 	add.w	r0, r4, #199	; 0xc7
   15040:	f7fe fa96 	bl	13570 <memcpy>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   15044:	6823      	ldr	r3, [r4, #0]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   15046:	78db      	ldrb	r3, [r3, #3]
   15048:	b94b      	cbnz	r3, 1505e <smp_pairing_confirm+0x3e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1504a:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   1504e:	2104      	movs	r1, #4
   15050:	f7ff ffa3 	bl	14f9a <atomic_set_bit>
		return smp_send_pairing_random(smp);
   15054:	4620      	mov	r0, r4
}
   15056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return smp_send_pairing_random(smp);
   1505a:	f7ff bfc8 	b.w	14fee <smp_send_pairing_random>
}
   1505e:	2000      	movs	r0, #0
   15060:	bd10      	pop	{r4, pc}

00015062 <smp_dhkey_check>:
{
   15062:	b5f0      	push	{r4, r5, r6, r7, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   15064:	6803      	ldr	r3, [r0, #0]
{
   15066:	4604      	mov	r4, r0
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   15068:	78dd      	ldrb	r5, [r3, #3]
{
   1506a:	b091      	sub	sp, #68	; 0x44
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1506c:	2d00      	cmp	r5, #0
   1506e:	d15d      	bne.n	1512c <smp_dhkey_check+0xca>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   15070:	688f      	ldr	r7, [r1, #8]
		(void)memset(r, 0, sizeof(r));
   15072:	2210      	movs	r2, #16
   15074:	4629      	mov	r1, r5
   15076:	a80c      	add	r0, sp, #48	; 0x30
   15078:	f7fe faa5 	bl	135c6 <memset>
		switch (smp->method) {
   1507c:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
   15080:	2b05      	cmp	r3, #5
   15082:	d81f      	bhi.n	150c4 <smp_dhkey_check+0x62>
   15084:	e8df f003 	tbb	[pc, r3]
   15088:	09030309 	.word	0x09030309
   1508c:	201e      	.short	0x201e
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1508e:	2204      	movs	r2, #4
   15090:	f504 71c4 	add.w	r1, r4, #392	; 0x188
				memcpy(r, smp->oobd_local->r, sizeof(r));
   15094:	a80c      	add	r0, sp, #48	; 0x30
   15096:	f7fe fa6b 	bl	13570 <memcpy>
			   &smp->chan.chan.conn->le.resp_addr,
   1509a:	4622      	mov	r2, r4
   1509c:	f852 3bd7 	ldr.w	r3, [r2], #215
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
   150a0:	ae08      	add	r6, sp, #32
			   &smp->chan.chan.conn->le.init_addr, e)) {
   150a2:	f103 0183 	add.w	r1, r3, #131	; 0x83
			   &smp->chan.chan.conn->le.resp_addr,
   150a6:	338a      	adds	r3, #138	; 0x8a
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
   150a8:	9301      	str	r3, [sp, #4]
   150aa:	f104 03c1 	add.w	r3, r4, #193	; 0xc1
   150ae:	9102      	str	r1, [sp, #8]
   150b0:	9300      	str	r3, [sp, #0]
   150b2:	9603      	str	r6, [sp, #12]
   150b4:	ab0c      	add	r3, sp, #48	; 0x30
   150b6:	f104 01e7 	add.w	r1, r4, #231	; 0xe7
   150ba:	f204 1077 	addw	r0, r4, #375	; 0x177
   150be:	f7ff fedf 	bl	14e80 <smp_f6>
   150c2:	b138      	cbz	r0, 150d4 <smp_dhkey_check+0x72>
		switch (smp->method) {
   150c4:	2508      	movs	r5, #8
   150c6:	e02c      	b.n	15122 <smp_dhkey_check+0xc0>
			if (smp->oobd_local) {
   150c8:	f8d4 1190 	ldr.w	r1, [r4, #400]	; 0x190
   150cc:	2900      	cmp	r1, #0
   150ce:	d0e4      	beq.n	1509a <smp_dhkey_check+0x38>
				memcpy(r, smp->oobd_local->r, sizeof(r));
   150d0:	2210      	movs	r2, #16
   150d2:	e7df      	b.n	15094 <smp_dhkey_check+0x32>
		if (memcmp(e, req->e, 16)) {
   150d4:	4630      	mov	r0, r6
   150d6:	2210      	movs	r2, #16
   150d8:	4639      	mov	r1, r7
   150da:	f7fe fa39 	bl	13550 <memcmp>
   150de:	4606      	mov	r6, r0
   150e0:	bb10      	cbnz	r0, 15128 <smp_dhkey_check+0xc6>
	return MIN(req->max_key_size, rsp->max_key_size);
   150e2:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
   150e6:	f894 70bd 	ldrb.w	r7, [r4, #189]	; 0xbd
		(void)memset(ediv, 0, sizeof(ediv));
   150ea:	4601      	mov	r1, r0
	return MIN(req->max_key_size, rsp->max_key_size);
   150ec:	429f      	cmp	r7, r3
   150ee:	bf28      	it	cs
   150f0:	461f      	movcs	r7, r3
		(void)memset(ediv, 0, sizeof(ediv));
   150f2:	2202      	movs	r2, #2
   150f4:	a805      	add	r0, sp, #20
   150f6:	f7fe fa66 	bl	135c6 <memset>
		(void)memset(rand, 0, sizeof(rand));
   150fa:	2208      	movs	r2, #8
   150fc:	4631      	mov	r1, r6
   150fe:	a806      	add	r0, sp, #24
   15100:	f7fe fa61 	bl	135c6 <memset>
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, rand, ediv,
   15104:	6820      	ldr	r0, [r4, #0]
   15106:	9700      	str	r7, [sp, #0]
   15108:	f104 03f7 	add.w	r3, r4, #247	; 0xf7
   1510c:	aa05      	add	r2, sp, #20
   1510e:	a906      	add	r1, sp, #24
   15110:	f7fe fd4e 	bl	13bb0 <bt_conn_le_start_encryption>
   15114:	2800      	cmp	r0, #0
   15116:	dbd5      	blt.n	150c4 <smp_dhkey_check+0x62>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   15118:	2101      	movs	r1, #1
   1511a:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
   1511e:	f7ff ff3c 	bl	14f9a <atomic_set_bit>
}
   15122:	4628      	mov	r0, r5
   15124:	b011      	add	sp, #68	; 0x44
   15126:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   15128:	250b      	movs	r5, #11
   1512a:	e7fa      	b.n	15122 <smp_dhkey_check+0xc0>
	return 0;
   1512c:	2500      	movs	r5, #0
   1512e:	e7f8      	b.n	15122 <smp_dhkey_check+0xc0>

00015130 <smp_reset>:
{
   15130:	b538      	push	{r3, r4, r5, lr}
   15132:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   15134:	6805      	ldr	r5, [r0, #0]
	k_delayed_work_cancel(&smp->work);
   15136:	f500 70ce 	add.w	r0, r0, #412	; 0x19c
   1513a:	f7fb ff6f 	bl	1101c <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
   1513e:	2300      	movs	r3, #0
	atomic_set(&smp->allowed_cmds, 0);
   15140:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
	smp->method = JUST_WORKS;
   15144:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   15148:	e8d0 2fef 	ldaex	r2, [r0]
   1514c:	e8c0 3fe1 	stlex	r1, r3, [r0]
   15150:	2900      	cmp	r1, #0
   15152:	d1f9      	bne.n	15148 <smp_reset+0x18>
   15154:	34b4      	adds	r4, #180	; 0xb4
   15156:	e8d4 2fef 	ldaex	r2, [r4]
   1515a:	e8c4 3fe1 	stlex	r1, r3, [r4]
   1515e:	2900      	cmp	r1, #0
   15160:	d1f9      	bne.n	15156 <smp_reset+0x26>
	if (conn->required_sec_level != conn->sec_level) {
   15162:	7a6b      	ldrb	r3, [r5, #9]
   15164:	7aaa      	ldrb	r2, [r5, #10]
   15166:	429a      	cmp	r2, r3
		conn->required_sec_level = conn->sec_level;
   15168:	bf18      	it	ne
   1516a:	72ab      	strbne	r3, [r5, #10]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1516c:	78eb      	ldrb	r3, [r5, #3]
   1516e:	b923      	cbnz	r3, 1517a <smp_reset+0x4a>
}
   15170:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   15174:	210b      	movs	r1, #11
   15176:	f7ff bf10 	b.w	14f9a <atomic_set_bit>
}
   1517a:	bd38      	pop	{r3, r4, r5, pc}

0001517c <smp_error>:
{
   1517c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1517e:	4606      	mov	r6, r0
   15180:	460c      	mov	r4, r1
	smp_pairing_complete(smp, reason);
   15182:	f7f6 fec1 	bl	bf08 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   15186:	2105      	movs	r1, #5
   15188:	4630      	mov	r0, r6
   1518a:	f7ff ff10 	bl	14fae <smp_create_pdu.isra.0>
	if (!buf) {
   1518e:	4605      	mov	r5, r0
   15190:	b178      	cbz	r0, 151b2 <smp_error+0x36>
	rsp = net_buf_add(buf, sizeof(*rsp));
   15192:	2101      	movs	r1, #1
   15194:	3008      	adds	r0, #8
   15196:	f7f8 fa53 	bl	d640 <net_buf_simple_add>
	rsp->reason = reason;
   1519a:	7004      	strb	r4, [r0, #0]
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   1519c:	2400      	movs	r4, #0
   1519e:	462a      	mov	r2, r5
   151a0:	4623      	mov	r3, r4
   151a2:	2106      	movs	r1, #6
   151a4:	6830      	ldr	r0, [r6, #0]
   151a6:	9400      	str	r4, [sp, #0]
   151a8:	f7fe fef9 	bl	13f9e <bt_l2cap_send_cb>
	return 0;
   151ac:	4620      	mov	r0, r4
}
   151ae:	b002      	add	sp, #8
   151b0:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   151b2:	f06f 0036 	mvn.w	r0, #54	; 0x36
   151b6:	e7fa      	b.n	151ae <smp_error+0x32>

000151b8 <bt_smp_encrypt_change>:
{
   151b8:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn = chan->conn;
   151ba:	4605      	mov	r5, r0
{
   151bc:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->conn;
   151be:	f855 6bb4 	ldr.w	r6, [r5], #180
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   151c2:	e8d5 3fef 	ldaex	r3, [r5]
   151c6:	f023 0302 	bic.w	r3, r3, #2
   151ca:	e8c5 3fe2 	stlex	r2, r3, [r5]
   151ce:	2a00      	cmp	r2, #0
   151d0:	d1f7      	bne.n	151c2 <bt_smp_encrypt_change+0xa>
	if (hci_status) {
   151d2:	2900      	cmp	r1, #0
   151d4:	d14b      	bne.n	1526e <bt_smp_encrypt_change+0xb6>
	if (!conn->encrypt) {
   151d6:	7af3      	ldrb	r3, [r6, #11]
   151d8:	2b00      	cmp	r3, #0
   151da:	d048      	beq.n	1526e <bt_smp_encrypt_change+0xb6>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   151dc:	2103      	movs	r1, #3
   151de:	4628      	mov	r0, r5
   151e0:	f7ff fec1 	bl	14f66 <atomic_test_bit>
   151e4:	b920      	cbnz	r0, 151f0 <bt_smp_encrypt_change+0x38>
		smp_reset(smp);
   151e6:	4620      	mov	r0, r4
}
   151e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		smp_reset(smp);
   151ec:	f7ff bfa0 	b.w	15130 <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   151f0:	2105      	movs	r1, #5
   151f2:	4628      	mov	r0, r5
   151f4:	f7ff feb7 	bl	14f66 <atomic_test_bit>
   151f8:	b198      	cbz	r0, 15222 <bt_smp_encrypt_change+0x6a>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   151fa:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
   151fe:	071b      	lsls	r3, r3, #28
   15200:	d507      	bpl.n	15212 <bt_smp_encrypt_change+0x5a>
   15202:	f894 3199 	ldrb.w	r3, [r4, #409]	; 0x199
   15206:	0718      	lsls	r0, r3, #28
   15208:	d503      	bpl.n	15212 <bt_smp_encrypt_change+0x5a>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   1520a:	2110      	movs	r1, #16
   1520c:	4628      	mov	r0, r5
   1520e:	f7ff fec4 	bl	14f9a <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   15212:	f8b4 3198 	ldrh.w	r3, [r4, #408]	; 0x198
   15216:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   1521a:	f023 0308 	bic.w	r3, r3, #8
   1521e:	f8a4 3198 	strh.w	r3, [r4, #408]	; 0x198
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   15222:	f894 3199 	ldrb.w	r3, [r4, #409]	; 0x199
   15226:	07d9      	lsls	r1, r3, #31
   15228:	d519      	bpl.n	1525e <bt_smp_encrypt_change+0xa6>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   1522a:	2106      	movs	r1, #6
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1522c:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   15230:	f7ff feb3 	bl	14f9a <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   15234:	2102      	movs	r1, #2
   15236:	4628      	mov	r0, r5
   15238:	f7ff feaf 	bl	14f9a <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1523c:	78f3      	ldrb	r3, [r6, #3]
   1523e:	b913      	cbnz	r3, 15246 <bt_smp_encrypt_change+0x8e>
	    conn->role == BT_HCI_ROLE_MASTER && smp->remote_dist) {
   15240:	f894 3199 	ldrb.w	r3, [r4, #409]	; 0x199
   15244:	b99b      	cbnz	r3, 1526e <bt_smp_encrypt_change+0xb6>
	if (bt_smp_distribute_keys(smp)) {
   15246:	4620      	mov	r0, r4
   15248:	f7f6 fb7e 	bl	b948 <bt_smp_distribute_keys>
   1524c:	b978      	cbnz	r0, 1526e <bt_smp_encrypt_change+0xb6>
	if (!smp->local_dist && !smp->remote_dist) {
   1524e:	f8b4 1198 	ldrh.w	r1, [r4, #408]	; 0x198
   15252:	b961      	cbnz	r1, 1526e <bt_smp_encrypt_change+0xb6>
		smp_pairing_complete(smp, 0);
   15254:	4620      	mov	r0, r4
}
   15256:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		smp_pairing_complete(smp, 0);
   1525a:	f7f6 be55 	b.w	bf08 <smp_pairing_complete>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1525e:	079a      	lsls	r2, r3, #30
   15260:	d501      	bpl.n	15266 <bt_smp_encrypt_change+0xae>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   15262:	2108      	movs	r1, #8
   15264:	e7e2      	b.n	1522c <bt_smp_encrypt_change+0x74>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   15266:	075b      	lsls	r3, r3, #29
   15268:	d5e4      	bpl.n	15234 <bt_smp_encrypt_change+0x7c>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1526a:	210a      	movs	r1, #10
   1526c:	e7de      	b.n	1522c <bt_smp_encrypt_change+0x74>
}
   1526e:	bd70      	pop	{r4, r5, r6, pc}

00015270 <smp_c1>:
{
   15270:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15274:	4699      	mov	r9, r3
   15276:	b089      	sub	sp, #36	; 0x24
   15278:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
	p1[0] = ia->type;
   1527c:	783b      	ldrb	r3, [r7, #0]
{
   1527e:	460c      	mov	r4, r1
	p1[0] = ia->type;
   15280:	f88d 3000 	strb.w	r3, [sp]
	p1[1] = ra->type;
   15284:	f898 3000 	ldrb.w	r3, [r8]
{
   15288:	4611      	mov	r1, r2
   1528a:	9d12      	ldr	r5, [sp, #72]	; 0x48
	memcpy(p1 + 2, preq, 7);
   1528c:	2207      	movs	r2, #7
{
   1528e:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   15290:	f10d 0002 	add.w	r0, sp, #2
	p1[1] = ra->type;
   15294:	f88d 3001 	strb.w	r3, [sp, #1]
	memcpy(p1 + 2, preq, 7);
   15298:	f7fe f96a 	bl	13570 <memcpy>
	memcpy(p1 + 9, pres, 7);
   1529c:	2207      	movs	r2, #7
   1529e:	4649      	mov	r1, r9
   152a0:	f10d 0009 	add.w	r0, sp, #9
   152a4:	f7fe f964 	bl	13570 <memcpy>
	while (len--) {
   152a8:	4629      	mov	r1, r5
   152aa:	466a      	mov	r2, sp
   152ac:	f104 0010 	add.w	r0, r4, #16
   152b0:	4284      	cmp	r4, r0
   152b2:	d127      	bne.n	15304 <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   152b4:	462a      	mov	r2, r5
   152b6:	4629      	mov	r1, r5
   152b8:	4630      	mov	r0, r6
   152ba:	f7fe fc0a 	bl	13ad2 <bt_encrypt_le>
	if (err) {
   152be:	4604      	mov	r4, r0
   152c0:	b9e0      	cbnz	r0, 152fc <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   152c2:	2206      	movs	r2, #6
   152c4:	f108 0101 	add.w	r1, r8, #1
   152c8:	a804      	add	r0, sp, #16
   152ca:	f7fe f951 	bl	13570 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   152ce:	2206      	movs	r2, #6
   152d0:	1c79      	adds	r1, r7, #1
   152d2:	f10d 0016 	add.w	r0, sp, #22
   152d6:	f7fe f94b 	bl	13570 <memcpy>
	(void)memset(p2 + 12, 0, 4);
   152da:	2204      	movs	r2, #4
   152dc:	4621      	mov	r1, r4
   152de:	a807      	add	r0, sp, #28
   152e0:	f7fe f971 	bl	135c6 <memset>
	while (len--) {
   152e4:	462a      	mov	r2, r5
   152e6:	f105 0010 	add.w	r0, r5, #16
   152ea:	ab04      	add	r3, sp, #16
   152ec:	4282      	cmp	r2, r0
   152ee:	d112      	bne.n	15316 <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   152f0:	462a      	mov	r2, r5
   152f2:	4629      	mov	r1, r5
   152f4:	4630      	mov	r0, r6
   152f6:	f7fe fbec 	bl	13ad2 <bt_encrypt_le>
   152fa:	4604      	mov	r4, r0
}
   152fc:	4620      	mov	r0, r4
   152fe:	b009      	add	sp, #36	; 0x24
   15300:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   15304:	f814 3b01 	ldrb.w	r3, [r4], #1
   15308:	f812 cb01 	ldrb.w	ip, [r2], #1
   1530c:	ea83 030c 	eor.w	r3, r3, ip
   15310:	f801 3b01 	strb.w	r3, [r1], #1
   15314:	e7cc      	b.n	152b0 <smp_c1+0x40>
   15316:	f812 1b01 	ldrb.w	r1, [r2], #1
   1531a:	f813 4b01 	ldrb.w	r4, [r3], #1
   1531e:	4061      	eors	r1, r4
   15320:	f802 1c01 	strb.w	r1, [r2, #-1]
   15324:	e7e2      	b.n	152ec <smp_c1+0x7c>

00015326 <legacy_send_pairing_confirm>:
{
   15326:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   15328:	2103      	movs	r1, #3
{
   1532a:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1532c:	6805      	ldr	r5, [r0, #0]
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1532e:	f7ff fe3e 	bl	14fae <smp_create_pdu.isra.0>
	if (!buf) {
   15332:	4606      	mov	r6, r0
   15334:	b1c0      	cbz	r0, 15368 <legacy_send_pairing_confirm+0x42>
	req = net_buf_add(buf, sizeof(*req));
   15336:	2110      	movs	r1, #16
   15338:	3008      	adds	r0, #8
   1533a:	f7f8 f981 	bl	d640 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   1533e:	f105 038a 	add.w	r3, r5, #138	; 0x8a
   15342:	3583      	adds	r5, #131	; 0x83
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   15344:	9002      	str	r0, [sp, #8]
   15346:	9301      	str	r3, [sp, #4]
   15348:	9500      	str	r5, [sp, #0]
   1534a:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
   1534e:	f104 02b9 	add.w	r2, r4, #185	; 0xb9
   15352:	f104 01d7 	add.w	r1, r4, #215	; 0xd7
   15356:	f104 00f7 	add.w	r0, r4, #247	; 0xf7
   1535a:	f7ff ff89 	bl	15270 <smp_c1>
   1535e:	4605      	mov	r5, r0
   15360:	b120      	cbz	r0, 1536c <legacy_send_pairing_confirm+0x46>
		net_buf_unref(buf);
   15362:	4630      	mov	r0, r6
   15364:	f7f7 fffa 	bl	d35c <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   15368:	2008      	movs	r0, #8
   1536a:	e00e      	b.n	1538a <legacy_send_pairing_confirm+0x64>
	smp_send(smp, buf, NULL, NULL);
   1536c:	4602      	mov	r2, r0
   1536e:	4631      	mov	r1, r6
   15370:	4620      	mov	r0, r4
   15372:	f7f6 faaf 	bl	b8d4 <smp_send.isra.0>
   15376:	34b4      	adds	r4, #180	; 0xb4
   15378:	e8d4 3fef 	ldaex	r3, [r4]
   1537c:	f023 0301 	bic.w	r3, r3, #1
   15380:	e8c4 3fe2 	stlex	r2, r3, [r4]
   15384:	2a00      	cmp	r2, #0
   15386:	d1f7      	bne.n	15378 <legacy_send_pairing_confirm+0x52>
	return 0;
   15388:	4628      	mov	r0, r5
}
   1538a:	b004      	add	sp, #16
   1538c:	bd70      	pop	{r4, r5, r6, pc}

0001538e <bt_smp_request_ltk>:
{
   1538e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   15392:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   15394:	4604      	mov	r4, r0
   15396:	e9cd 2300 	strd	r2, r3, [sp]
	smp = smp_chan_get(conn);
   1539a:	f7f6 fa77 	bl	b88c <smp_chan_get>
	if (!smp) {
   1539e:	4605      	mov	r5, r0
   153a0:	2800      	cmp	r0, #0
   153a2:	f000 809d 	beq.w	154e0 <bt_smp_request_ltk+0x152>
	if (ediv == 0U && rand == 0U &&
   153a6:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   153aa:	f1b9 0f00 	cmp.w	r9, #0
   153ae:	d12d      	bne.n	1540c <bt_smp_request_ltk+0x7e>
   153b0:	e9dd 2300 	ldrd	r2, r3, [sp]
   153b4:	4313      	orrs	r3, r2
   153b6:	d129      	bne.n	1540c <bt_smp_request_ltk+0x7e>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   153b8:	f100 08b4 	add.w	r8, r0, #180	; 0xb4
   153bc:	2103      	movs	r1, #3
   153be:	4640      	mov	r0, r8
   153c0:	f7ff fdd1 	bl	14f66 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   153c4:	b310      	cbz	r0, 1540c <bt_smp_request_ltk+0x7e>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   153c6:	2101      	movs	r1, #1
   153c8:	4640      	mov	r0, r8
   153ca:	f7ff fdcc 	bl	14f66 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   153ce:	4606      	mov	r6, r0
   153d0:	b1e0      	cbz	r0, 1540c <bt_smp_request_ltk+0x7e>
	return MIN(req->max_key_size, rsp->max_key_size);
   153d2:	f895 40c4 	ldrb.w	r4, [r5, #196]	; 0xc4
   153d6:	f895 30bd 	ldrb.w	r3, [r5, #189]	; 0xbd
		memcpy(ltk, smp->tk, enc_size);
   153da:	4638      	mov	r0, r7
	return MIN(req->max_key_size, rsp->max_key_size);
   153dc:	429c      	cmp	r4, r3
   153de:	bf28      	it	cs
   153e0:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   153e2:	f105 01f7 	add.w	r1, r5, #247	; 0xf7
   153e6:	4622      	mov	r2, r4
   153e8:	f7fe f8c2 	bl	13570 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   153ec:	2c0f      	cmp	r4, #15
   153ee:	d805      	bhi.n	153fc <bt_smp_request_ltk+0x6e>
			(void)memset(ltk + enc_size, 0,
   153f0:	4649      	mov	r1, r9
   153f2:	f1c4 0210 	rsb	r2, r4, #16
   153f6:	1938      	adds	r0, r7, r4
   153f8:	f7fe f8e5 	bl	135c6 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   153fc:	2101      	movs	r1, #1
   153fe:	4640      	mov	r0, r8
   15400:	f7ff fdcb 	bl	14f9a <atomic_set_bit>
}
   15404:	4630      	mov	r0, r6
   15406:	b003      	add	sp, #12
   15408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   1540c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   15410:	b983      	cbnz	r3, 15434 <bt_smp_request_ltk+0xa6>
					     &conn->le.dst);
   15412:	f104 067c 	add.w	r6, r4, #124	; 0x7c
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   15416:	4632      	mov	r2, r6
   15418:	2020      	movs	r0, #32
   1541a:	7a21      	ldrb	r1, [r4, #8]
   1541c:	f7f7 fcda 	bl	cdd4 <bt_keys_find>
   15420:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
		if (!conn->le.keys) {
   15424:	b930      	cbnz	r0, 15434 <bt_smp_request_ltk+0xa6>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
   15426:	4632      	mov	r2, r6
   15428:	2001      	movs	r0, #1
   1542a:	7a21      	ldrb	r1, [r4, #8]
   1542c:	f7f7 fcd2 	bl	cdd4 <bt_keys_find>
   15430:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
	if (ediv == 0U && rand == 0U &&
   15434:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
   15438:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   1543c:	b9ce      	cbnz	r6, 15472 <bt_smp_request_ltk+0xe4>
   1543e:	e9dd 2300 	ldrd	r2, r3, [sp]
   15442:	4313      	orrs	r3, r2
   15444:	d115      	bne.n	15472 <bt_smp_request_ltk+0xe4>
   15446:	2800      	cmp	r0, #0
   15448:	d03c      	beq.n	154c4 <bt_smp_request_ltk+0x136>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   1544a:	89c3      	ldrh	r3, [r0, #14]
   1544c:	069a      	lsls	r2, r3, #26
   1544e:	d511      	bpl.n	15474 <bt_smp_request_ltk+0xe6>
		enc_size = conn->le.keys->enc_size;
   15450:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   15452:	f100 011a 	add.w	r1, r0, #26
   15456:	4622      	mov	r2, r4
   15458:	4638      	mov	r0, r7
   1545a:	f7fe f889 	bl	13570 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   1545e:	2c0f      	cmp	r4, #15
   15460:	d805      	bhi.n	1546e <bt_smp_request_ltk+0xe0>
			(void)memset(ltk + enc_size, 0,
   15462:	4631      	mov	r1, r6
   15464:	f1c4 0210 	rsb	r2, r4, #16
   15468:	1938      	adds	r0, r7, r4
   1546a:	f7fe f8ac 	bl	135c6 <memset>
		return true;
   1546e:	2601      	movs	r6, #1
   15470:	e7c8      	b.n	15404 <bt_smp_request_ltk+0x76>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   15472:	b338      	cbz	r0, 154c4 <bt_smp_request_ltk+0x136>
   15474:	89c3      	ldrh	r3, [r0, #14]
   15476:	07db      	lsls	r3, r3, #31
   15478:	d524      	bpl.n	154c4 <bt_smp_request_ltk+0x136>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   1547a:	2208      	movs	r2, #8
   1547c:	4669      	mov	r1, sp
   1547e:	3040      	adds	r0, #64	; 0x40
   15480:	f7fe f866 	bl	13550 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   15484:	b9f0      	cbnz	r0, 154c4 <bt_smp_request_ltk+0x136>
	    !memcmp(conn->le.keys->slave_ltk.ediv, &ediv, 2)) {
   15486:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   1548a:	2202      	movs	r2, #2
   1548c:	a90a      	add	r1, sp, #40	; 0x28
   1548e:	3048      	adds	r0, #72	; 0x48
   15490:	f7fe f85e 	bl	13550 <memcmp>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   15494:	4606      	mov	r6, r0
   15496:	b9a8      	cbnz	r0, 154c4 <bt_smp_request_ltk+0x136>
		enc_size = conn->le.keys->enc_size;
   15498:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   1549c:	4638      	mov	r0, r7
		enc_size = conn->le.keys->enc_size;
   1549e:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   154a0:	314a      	adds	r1, #74	; 0x4a
   154a2:	4622      	mov	r2, r4
   154a4:	f7fe f864 	bl	13570 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   154a8:	2c0f      	cmp	r4, #15
   154aa:	d805      	bhi.n	154b8 <bt_smp_request_ltk+0x12a>
			(void)memset(ltk + enc_size, 0,
   154ac:	4631      	mov	r1, r6
   154ae:	f1c4 0210 	rsb	r2, r4, #16
   154b2:	1938      	adds	r0, r7, r4
   154b4:	f7fe f887 	bl	135c6 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   154b8:	2101      	movs	r1, #1
   154ba:	f105 00b4 	add.w	r0, r5, #180	; 0xb4
   154be:	f7ff fd6c 	bl	14f9a <atomic_set_bit>
		return true;
   154c2:	e7d4      	b.n	1546e <bt_smp_request_ltk+0xe0>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   154c4:	210e      	movs	r1, #14
   154c6:	f105 00b4 	add.w	r0, r5, #180	; 0xb4
   154ca:	f7ff fd4c 	bl	14f66 <atomic_test_bit>
   154ce:	b120      	cbz	r0, 154da <bt_smp_request_ltk+0x14c>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   154d0:	2202      	movs	r2, #2
   154d2:	2106      	movs	r1, #6
   154d4:	4620      	mov	r0, r4
   154d6:	f7f1 fd25 	bl	6f24 <bt_conn_security_changed>
	smp_reset(smp);
   154da:	4628      	mov	r0, r5
   154dc:	f7ff fe28 	bl	15130 <smp_reset>
	return false;
   154e0:	2600      	movs	r6, #0
   154e2:	e78f      	b.n	15404 <bt_smp_request_ltk+0x76>

000154e4 <bt_smp_sign>:
   154e4:	f06f 0022 	mvn.w	r0, #34	; 0x22
   154e8:	4770      	bx	lr

000154ea <bt_smp_start_security>:
{
   154ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (conn->role) {
   154ec:	78c3      	ldrb	r3, [r0, #3]
{
   154ee:	4604      	mov	r4, r0
	switch (conn->role) {
   154f0:	2b00      	cmp	r3, #0
   154f2:	d15b      	bne.n	155ac <bt_smp_start_security+0xc2>
		smp = smp_chan_get(conn);
   154f4:	f7f6 f9ca 	bl	b88c <smp_chan_get>
		if (!smp) {
   154f8:	4605      	mov	r5, r0
   154fa:	2800      	cmp	r0, #0
   154fc:	d059      	beq.n	155b2 <bt_smp_start_security+0xc8>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   154fe:	210b      	movs	r1, #11
   15500:	1d20      	adds	r0, r4, #4
   15502:	f7ff fd30 	bl	14f66 <atomic_test_bit>
   15506:	bb00      	cbnz	r0, 1554a <bt_smp_start_security+0x60>
	if (!conn->le.keys) {
   15508:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1550c:	b983      	cbnz	r3, 15530 <bt_smp_start_security+0x46>
						     conn->id, &conn->le.dst);
   1550e:	f104 067c 	add.w	r6, r4, #124	; 0x7c
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   15512:	4632      	mov	r2, r6
   15514:	2020      	movs	r0, #32
   15516:	7a21      	ldrb	r1, [r4, #8]
   15518:	f7f7 fc5c 	bl	cdd4 <bt_keys_find>
   1551c:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
		if (!conn->le.keys) {
   15520:	b930      	cbnz	r0, 15530 <bt_smp_start_security+0x46>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   15522:	4632      	mov	r2, r6
   15524:	2004      	movs	r0, #4
   15526:	7a21      	ldrb	r1, [r4, #8]
   15528:	f7f7 fc54 	bl	cdd4 <bt_keys_find>
   1552c:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
	if (!conn->le.keys ||
   15530:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   15534:	b14b      	cbz	r3, 1554a <bt_smp_start_security+0x60>
   15536:	89da      	ldrh	r2, [r3, #14]
   15538:	f002 0224 	and.w	r2, r2, #36	; 0x24
   1553c:	b12a      	cbz	r2, 1554a <bt_smp_start_security+0x60>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   1553e:	7aa2      	ldrb	r2, [r4, #10]
   15540:	2a02      	cmp	r2, #2
   15542:	d908      	bls.n	15556 <bt_smp_start_security+0x6c>
   15544:	7b5b      	ldrb	r3, [r3, #13]
   15546:	07db      	lsls	r3, r3, #31
   15548:	d405      	bmi.n	15556 <bt_smp_start_security+0x6c>
			return smp_send_pairing_req(conn);
   1554a:	4620      	mov	r0, r4
}
   1554c:	b002      	add	sp, #8
   1554e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			return smp_send_pairing_req(conn);
   15552:	f7f6 bb3f 	b.w	bbd4 <smp_send_pairing_req>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   15556:	f105 06b4 	add.w	r6, r5, #180	; 0xb4
   1555a:	2103      	movs	r1, #3
   1555c:	4630      	mov	r0, r6
   1555e:	f7ff fd02 	bl	14f66 <atomic_test_bit>
   15562:	b120      	cbz	r0, 1556e <bt_smp_start_security+0x84>
			return -EBUSY;
   15564:	f06f 040f 	mvn.w	r4, #15
}
   15568:	4620      	mov	r0, r4
   1556a:	b002      	add	sp, #8
   1556c:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1556e:	2101      	movs	r1, #1
   15570:	4630      	mov	r0, r6
   15572:	f7ff fcf8 	bl	14f66 <atomic_test_bit>
   15576:	2800      	cmp	r0, #0
   15578:	d1f4      	bne.n	15564 <bt_smp_start_security+0x7a>
						  conn->le.keys->ltk.rand,
   1557a:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
		err = bt_conn_le_start_encryption(conn,
   1557e:	4620      	mov	r0, r4
   15580:	7b0b      	ldrb	r3, [r1, #12]
   15582:	f101 0218 	add.w	r2, r1, #24
   15586:	9300      	str	r3, [sp, #0]
   15588:	f101 031a 	add.w	r3, r1, #26
   1558c:	3110      	adds	r1, #16
   1558e:	f7fe fb0f 	bl	13bb0 <bt_conn_le_start_encryption>
		if (err) {
   15592:	4604      	mov	r4, r0
   15594:	2800      	cmp	r0, #0
   15596:	d1e7      	bne.n	15568 <bt_smp_start_security+0x7e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   15598:	f105 00b0 	add.w	r0, r5, #176	; 0xb0
   1559c:	210b      	movs	r1, #11
   1559e:	f7ff fcfc 	bl	14f9a <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   155a2:	2101      	movs	r1, #1
   155a4:	4630      	mov	r0, r6
   155a6:	f7ff fcf8 	bl	14f9a <atomic_set_bit>
		return 0;
   155aa:	e7dd      	b.n	15568 <bt_smp_start_security+0x7e>
		return -EINVAL;
   155ac:	f06f 0415 	mvn.w	r4, #21
   155b0:	e7da      	b.n	15568 <bt_smp_start_security+0x7e>
			return -ENOTCONN;
   155b2:	f06f 0438 	mvn.w	r4, #56	; 0x38
   155b6:	e7d7      	b.n	15568 <bt_smp_start_security+0x7e>

000155b8 <id_add>:
	bt_id_add(keys);
   155b8:	f7f0 b810 	b.w	55dc <bt_id_add>

000155bc <bt_keys_get_type>:
{
   155bc:	b570      	push	{r4, r5, r6, lr}
   155be:	4604      	mov	r4, r0
   155c0:	460d      	mov	r5, r1
   155c2:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   155c4:	f7f7 fc06 	bl	cdd4 <bt_keys_find>
	if (keys) {
   155c8:	b938      	cbnz	r0, 155da <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   155ca:	4631      	mov	r1, r6
   155cc:	4628      	mov	r0, r5
   155ce:	f7f7 fbc1 	bl	cd54 <bt_keys_get_addr>
	if (!keys) {
   155d2:	b110      	cbz	r0, 155da <bt_keys_get_type+0x1e>
	keys->keys |= type;
   155d4:	89c3      	ldrh	r3, [r0, #14]
   155d6:	431c      	orrs	r4, r3
   155d8:	81c4      	strh	r4, [r0, #14]
}
   155da:	bd70      	pop	{r4, r5, r6, pc}

000155dc <bt_keys_add_type>:
	keys->keys |= type;
   155dc:	89c3      	ldrh	r3, [r0, #14]
   155de:	4319      	orrs	r1, r3
   155e0:	81c1      	strh	r1, [r0, #14]
}
   155e2:	4770      	bx	lr

000155e4 <fixed_data_unref>:
}
   155e4:	4770      	bx	lr

000155e6 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   155e6:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   155e8:	6849      	ldr	r1, [r1, #4]
   155ea:	6809      	ldr	r1, [r1, #0]
   155ec:	f7f7 bd6e 	b.w	d0cc <net_buf_alloc_len>

000155f0 <net_buf_simple_push_le16>:
{
   155f0:	b510      	push	{r4, lr}
   155f2:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_push(buf, sizeof(val)));
   155f4:	2102      	movs	r1, #2
   155f6:	f7f7 ffbf 	bl	d578 <net_buf_simple_push>
	dst[0] = val;
   155fa:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   155fc:	0a24      	lsrs	r4, r4, #8
   155fe:	7044      	strb	r4, [r0, #1]
}
   15600:	bd10      	pop	{r4, pc}

00015602 <net_buf_simple_push_u8>:
{
   15602:	b510      	push	{r4, lr}
   15604:	460c      	mov	r4, r1
	u8_t *data = net_buf_simple_push(buf, 1);
   15606:	2101      	movs	r1, #1
   15608:	f7f7 ffb6 	bl	d578 <net_buf_simple_push>
	*data = val;
   1560c:	7004      	strb	r4, [r0, #0]
}
   1560e:	bd10      	pop	{r4, pc}

00015610 <net_buf_simple_pull_u8>:
{
   15610:	b510      	push	{r4, lr}
	val = buf->data[0];
   15612:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   15614:	2101      	movs	r1, #1
	val = buf->data[0];
   15616:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   15618:	f7f7 ffd0 	bl	d5bc <net_buf_simple_pull>
}
   1561c:	4620      	mov	r0, r4
   1561e:	bd10      	pop	{r4, pc}

00015620 <net_buf_simple_pull_le16>:
{
   15620:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((u16_t *)buf->data);
   15622:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   15624:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
   15626:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   15628:	f7f7 ffc8 	bl	d5bc <net_buf_simple_pull>
}
   1562c:	4620      	mov	r0, r4
   1562e:	bd10      	pop	{r4, pc}

00015630 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   15630:	6802      	ldr	r2, [r0, #0]
   15632:	6880      	ldr	r0, [r0, #8]
}
   15634:	1a10      	subs	r0, r2, r0
   15636:	4770      	bx	lr

00015638 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   15638:	8883      	ldrh	r3, [r0, #4]
   1563a:	88c2      	ldrh	r2, [r0, #6]
   1563c:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1563e:	6803      	ldr	r3, [r0, #0]
   15640:	6880      	ldr	r0, [r0, #8]
   15642:	1a18      	subs	r0, r3, r0
}
   15644:	1a10      	subs	r0, r2, r0
   15646:	4770      	bx	lr

00015648 <net_buf_simple_add_mem>:
{
   15648:	b538      	push	{r3, r4, r5, lr}
   1564a:	460d      	mov	r5, r1
   1564c:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1564e:	4611      	mov	r1, r2
   15650:	f7f7 fff6 	bl	d640 <net_buf_simple_add>
   15654:	4622      	mov	r2, r4
   15656:	4629      	mov	r1, r5
}
   15658:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1565c:	f7fd bf88 	b.w	13570 <memcpy>

00015660 <net_buf_simple_add_u8>:
{
   15660:	b510      	push	{r4, lr}
   15662:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   15664:	2101      	movs	r1, #1
   15666:	f7f7 ffeb 	bl	d640 <net_buf_simple_add>
	*u8 = val;
   1566a:	7004      	strb	r4, [r0, #0]
}
   1566c:	bd10      	pop	{r4, pc}

0001566e <net_buf_simple_add_le16>:
{
   1566e:	b510      	push	{r4, lr}
   15670:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   15672:	2102      	movs	r1, #2
   15674:	f7f7 ffe4 	bl	d640 <net_buf_simple_add>
	dst[0] = val;
   15678:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   1567a:	0a24      	lsrs	r4, r4, #8
   1567c:	7044      	strb	r4, [r0, #1]
}
   1567e:	bd10      	pop	{r4, pc}

00015680 <net_buf_append_bytes>:
{
   15680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15684:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   15686:	4680      	mov	r8, r0
   15688:	460e      	mov	r6, r1
   1568a:	4617      	mov	r7, r2
	struct net_buf *frag = net_buf_frag_last(buf);
   1568c:	f7f7 fec6 	bl	d41c <net_buf_frag_last>
	size_t added_len = 0;
   15690:	f04f 0900 	mov.w	r9, #0
	struct net_buf *frag = net_buf_frag_last(buf);
   15694:	4604      	mov	r4, r0
		u16_t count = MIN(len, net_buf_tailroom(frag));
   15696:	3408      	adds	r4, #8
   15698:	4620      	mov	r0, r4
   1569a:	f7ff ffcd 	bl	15638 <net_buf_simple_tailroom>
   1569e:	42b0      	cmp	r0, r6
   156a0:	bf94      	ite	ls
   156a2:	fa1f fa80 	uxthls.w	sl, r0
   156a6:	fa1f fa86 	uxthhi.w	sl, r6
		net_buf_add_mem(frag, value8, count);
   156aa:	4639      	mov	r1, r7
   156ac:	4652      	mov	r2, sl
   156ae:	4620      	mov	r0, r4
   156b0:	f7ff ffca 	bl	15648 <net_buf_simple_add_mem>
		if (len == 0) {
   156b4:	ebb6 060a 	subs.w	r6, r6, sl
		added_len += count;
   156b8:	44d1      	add	r9, sl
		value8 += count;
   156ba:	4457      	add	r7, sl
		if (len == 0) {
   156bc:	d00a      	beq.n	156d4 <net_buf_append_bytes+0x54>
		frag = allocate_cb(timeout, user_data);
   156be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   156c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   156c4:	47a8      	blx	r5
		if (!frag) {
   156c6:	4604      	mov	r4, r0
   156c8:	b120      	cbz	r0, 156d4 <net_buf_append_bytes+0x54>
		net_buf_frag_add(buf, frag);
   156ca:	4601      	mov	r1, r0
   156cc:	4640      	mov	r0, r8
   156ce:	f7f7 feed 	bl	d4ac <net_buf_frag_add>
	do {
   156d2:	e7e0      	b.n	15696 <net_buf_append_bytes+0x16>
}
   156d4:	4648      	mov	r0, r9
   156d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000156da <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   156da:	6843      	ldr	r3, [r0, #4]
}
   156dc:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   156de:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   156e0:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   156e2:	600b      	str	r3, [r1, #0]
}
   156e4:	4770      	bx	lr

000156e6 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   156e6:	6843      	ldr	r3, [r0, #4]
   156e8:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   156ea:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   156ec:	4042      	eors	r2, r0
   156ee:	400a      	ands	r2, r1
   156f0:	4042      	eors	r2, r0
    p_reg->OUT = value;
   156f2:	605a      	str	r2, [r3, #4]
}
   156f4:	2000      	movs	r0, #0
   156f6:	4770      	bx	lr

000156f8 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   156f8:	6843      	ldr	r3, [r0, #4]
}
   156fa:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   156fc:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   156fe:	6099      	str	r1, [r3, #8]
}
   15700:	4770      	bx	lr

00015702 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   15702:	6843      	ldr	r3, [r0, #4]
}
   15704:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   15706:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   15708:	60d9      	str	r1, [r3, #12]
}
   1570a:	4770      	bx	lr

0001570c <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1570c:	6843      	ldr	r3, [r0, #4]
}
   1570e:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   15710:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   15712:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   15714:	404b      	eors	r3, r1
    p_reg->OUT = value;
   15716:	6053      	str	r3, [r2, #4]
}
   15718:	4770      	bx	lr

0001571a <nrf_gpio_cfg_sense_set>:
{
   1571a:	b513      	push	{r0, r1, r4, lr}
   1571c:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1571e:	a801      	add	r0, sp, #4
{
   15720:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15722:	f7f7 ffaf 	bl	d684 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   15726:	9b01      	ldr	r3, [sp, #4]
   15728:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1572c:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   15730:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   15734:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   15738:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   1573c:	b002      	add	sp, #8
   1573e:	bd10      	pop	{r4, pc}

00015740 <check_level_trigger_pins>:
{
   15740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u32_t bit = 1U << pin;
   15744:	2601      	movs	r6, #1
	u32_t pin = 0U;
   15746:	2700      	movs	r7, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   15748:	68c3      	ldr	r3, [r0, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   1574a:	f8d0 8004 	ldr.w	r8, [r0, #4]
	u32_t out = data->int_en & data->pin_int_en;
   1574e:	e9d3 2403 	ldrd	r2, r4, [r3, #12]
   15752:	4014      	ands	r4, r2
	out &= ~data->trig_edge & ~data->double_edge;
   15754:	e9d3 2106 	ldrd	r2, r1, [r3, #24]
   15758:	430a      	orrs	r2, r1
   1575a:	ea24 0402 	bic.w	r4, r4, r2
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   1575e:	f8d8 2004 	ldr.w	r2, [r8, #4]
	u32_t pin_states = ~(port_in ^ data->int_active_level);
   15762:	695b      	ldr	r3, [r3, #20]
    return p_reg->IN;
   15764:	6915      	ldr	r5, [r2, #16]
   15766:	405d      	eors	r5, r3
	u32_t out = pin_states & level_pins;
   15768:	ea24 0505 	bic.w	r5, r4, r5
	while (level_pins) {
   1576c:	b914      	cbnz	r4, 15774 <check_level_trigger_pins+0x34>
}
   1576e:	4628      	mov	r0, r5
   15770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   15774:	4234      	tst	r4, r6
   15776:	d00a      	beq.n	1578e <check_level_trigger_pins+0x4e>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   15778:	f898 3008 	ldrb.w	r3, [r8, #8]
   1577c:	f007 001f 	and.w	r0, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   15780:	2100      	movs	r1, #0
   15782:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   15786:	f7ff ffc8 	bl	1571a <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1578a:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   1578e:	3701      	adds	r7, #1
		bit <<= 1;
   15790:	0076      	lsls	r6, r6, #1
   15792:	e7eb      	b.n	1576c <check_level_trigger_pins+0x2c>

00015794 <gpio_nrfx_pin_disable_callback>:
	WRITE_BIT(data->int_en, pin, enable);
   15794:	2301      	movs	r3, #1
{
   15796:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
   15798:	68c4      	ldr	r4, [r0, #12]
	WRITE_BIT(data->int_en, pin, enable);
   1579a:	fa03 f201 	lsl.w	r2, r3, r1
   1579e:	6923      	ldr	r3, [r4, #16]
   157a0:	ea23 0302 	bic.w	r3, r3, r2
   157a4:	6123      	str	r3, [r4, #16]
}
   157a6:	bc10      	pop	{r4}
	return gpiote_pin_int_cfg(port, pin);
   157a8:	f7f8 b848 	b.w	d83c <gpiote_pin_int_cfg>

000157ac <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
   157ac:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   157b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   157b4:	4606      	mov	r6, r0
   157b6:	460f      	mov	r7, r1
   157b8:	4690      	mov	r8, r2
   157ba:	4699      	mov	r9, r3
	struct gpio_nrfx_data *data = get_port_data(port);
   157bc:	68c4      	ldr	r4, [r0, #12]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   157be:	d13a      	bne.n	15836 <gpio_nrfx_pin_interrupt_configure+0x8a>
	u32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   157c0:	6843      	ldr	r3, [r0, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   157c2:	a801      	add	r0, sp, #4
   157c4:	7a1a      	ldrb	r2, [r3, #8]
   157c6:	f001 031f 	and.w	r3, r1, #31
   157ca:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   157ce:	9301      	str	r3, [sp, #4]
   157d0:	f7f7 ff58 	bl	d684 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   157d4:	9b01      	ldr	r3, [sp, #4]
   157d6:	3380      	adds	r3, #128	; 0x80
   157d8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   157dc:	07db      	lsls	r3, r3, #31
   157de:	d434      	bmi.n	1584a <gpio_nrfx_pin_interrupt_configure+0x9e>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   157e0:	2501      	movs	r5, #1
   157e2:	68e3      	ldr	r3, [r4, #12]
   157e4:	40bd      	lsls	r5, r7
   157e6:	431d      	orrs	r5, r3
   157e8:	60e5      	str	r5, [r4, #12]
	WRITE_BIT(data->int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   157ea:	2501      	movs	r5, #1
   157ec:	6923      	ldr	r3, [r4, #16]
   157ee:	40bd      	lsls	r5, r7
   157f0:	f5b8 5f00 	cmp.w	r8, #8192	; 0x2000
   157f4:	bf14      	ite	ne
   157f6:	432b      	orrne	r3, r5
   157f8:	43ab      	biceq	r3, r5
   157fa:	6123      	str	r3, [r4, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   157fc:	69a3      	ldr	r3, [r4, #24]
   157fe:	f5b8 3fa0 	cmp.w	r8, #81920	; 0x14000
   15802:	bf0c      	ite	eq
   15804:	432b      	orreq	r3, r5
   15806:	43ab      	bicne	r3, r5
   15808:	61a3      	str	r3, [r4, #24]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1580a:	69e3      	ldr	r3, [r4, #28]
   1580c:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
   15810:	bf0c      	ite	eq
   15812:	432b      	orreq	r3, r5
   15814:	43ab      	bicne	r3, r5
   15816:	61e3      	str	r3, [r4, #28]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   15818:	6963      	ldr	r3, [r4, #20]
   1581a:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
   1581e:	bf0c      	ite	eq
   15820:	431d      	orreq	r5, r3
   15822:	ea23 0505 	bicne.w	r5, r3, r5
	return gpiote_pin_int_cfg(port, pin);
   15826:	4639      	mov	r1, r7
   15828:	4630      	mov	r0, r6
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1582a:	6165      	str	r5, [r4, #20]
	return gpiote_pin_int_cfg(port, pin);
   1582c:	f7f8 f806 	bl	d83c <gpiote_pin_int_cfg>
}
   15830:	b003      	add	sp, #12
   15832:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   15836:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1583a:	d1d1      	bne.n	157e0 <gpio_nrfx_pin_interrupt_configure+0x34>
   1583c:	2501      	movs	r5, #1
   1583e:	fa05 f301 	lsl.w	r3, r5, r1
   15842:	68e5      	ldr	r5, [r4, #12]
   15844:	ea25 0503 	bic.w	r5, r5, r3
   15848:	e7ce      	b.n	157e8 <gpio_nrfx_pin_interrupt_configure+0x3c>
		return -ENOTSUP;
   1584a:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1584e:	e7ef      	b.n	15830 <gpio_nrfx_pin_interrupt_configure+0x84>

00015850 <cfg_level_pins>:
{
   15850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u32_t bit = 1U << pin;
   15854:	2701      	movs	r7, #1
	u32_t pin = 0U;
   15856:	2600      	movs	r6, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
   15858:	68c5      	ldr	r5, [r0, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   1585a:	f8d0 8004 	ldr.w	r8, [r0, #4]
	u32_t out = data->int_en & data->pin_int_en;
   1585e:	e9d5 3403 	ldrd	r3, r4, [r5, #12]
   15862:	401c      	ands	r4, r3
	out &= ~data->trig_edge & ~data->double_edge;
   15864:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
   15868:	4313      	orrs	r3, r2
   1586a:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
   1586e:	b90c      	cbnz	r4, 15874 <cfg_level_pins+0x24>
}
   15870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   15874:	4227      	tst	r7, r4
   15876:	d010      	beq.n	1589a <cfg_level_pins+0x4a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   15878:	6969      	ldr	r1, [r5, #20]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1587a:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1587e:	40f1      	lsrs	r1, r6
   15880:	f001 0101 	and.w	r1, r1, #1
   15884:	f1c1 0103 	rsb	r1, r1, #3
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   15888:	f006 001f 	and.w	r0, r6, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1588c:	b2c9      	uxtb	r1, r1
   1588e:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   15892:	f7ff ff42 	bl	1571a <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   15896:	ea24 0407 	bic.w	r4, r4, r7
		++pin;
   1589a:	3601      	adds	r6, #1
		bit <<= 1;
   1589c:	007f      	lsls	r7, r7, #1
   1589e:	e7e6      	b.n	1586e <cfg_level_pins+0x1e>

000158a0 <gpio_nrfx_pin_enable_callback>:
	WRITE_BIT(data->int_en, pin, enable);
   158a0:	2301      	movs	r3, #1
{
   158a2:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
   158a4:	68c4      	ldr	r4, [r0, #12]
	WRITE_BIT(data->int_en, pin, enable);
   158a6:	fa03 f201 	lsl.w	r2, r3, r1
   158aa:	6923      	ldr	r3, [r4, #16]
   158ac:	4313      	orrs	r3, r2
   158ae:	6123      	str	r3, [r4, #16]
}
   158b0:	bc10      	pop	{r4}
	return gpiote_pin_int_cfg(port, pin);
   158b2:	f7f7 bfc3 	b.w	d83c <gpiote_pin_int_cfg>

000158b6 <vipm_nrf_max_data_size_get>:
static inline int z_impl_ipm_max_data_size_get(struct device *ipmdev)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->driver_api;

	return api->max_data_size_get(ipmdev);
   158b6:	6883      	ldr	r3, [r0, #8]
   158b8:	689b      	ldr	r3, [r3, #8]
   158ba:	4718      	bx	r3

000158bc <vipm_nrf_max_id_val_get>:
}
   158bc:	2000      	movs	r0, #0
   158be:	4770      	bx	lr

000158c0 <vipm_nrf_1_set_enabled>:
UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   158c0:	b508      	push	{r3, lr}
   158c2:	b139      	cbz	r1, 158d4 <vipm_nrf_1_set_enabled+0x14>
   158c4:	202a      	movs	r0, #42	; 0x2a
   158c6:	f7ee f989 	bl	3bdc <arch_irq_enable>
   158ca:	2001      	movs	r0, #1
   158cc:	f7f8 fc26 	bl	e11c <nrfx_ipc_receive_event_enable>
   158d0:	2000      	movs	r0, #0
   158d2:	bd08      	pop	{r3, pc}
   158d4:	2001      	movs	r0, #1
   158d6:	f7f8 fc43 	bl	e160 <nrfx_ipc_receive_event_disable>
   158da:	e7f9      	b.n	158d0 <vipm_nrf_1_set_enabled+0x10>

000158dc <flash_nrf_write_protection>:
}
   158dc:	2000      	movs	r0, #0
   158de:	4770      	bx	lr

000158e0 <is_regular_addr_valid>:
{
   158e0:	b538      	push	{r3, r4, r5, lr}
   158e2:	4604      	mov	r4, r0
   158e4:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   158e6:	f000 fa16 	bl	15d16 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   158ea:	4284      	cmp	r4, r0
   158ec:	d209      	bcs.n	15902 <is_regular_addr_valid+0x22>
   158ee:	2c00      	cmp	r4, #0
   158f0:	db07      	blt.n	15902 <is_regular_addr_valid+0x22>
	    addr < 0 ||
   158f2:	42a8      	cmp	r0, r5
   158f4:	d305      	bcc.n	15902 <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   158f6:	442c      	add	r4, r5
	    len > flash_size ||
   158f8:	4284      	cmp	r4, r0
   158fa:	bf8c      	ite	hi
   158fc:	2000      	movhi	r0, #0
   158fe:	2001      	movls	r0, #1
}
   15900:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   15902:	2000      	movs	r0, #0
   15904:	e7fc      	b.n	15900 <is_regular_addr_valid+0x20>

00015906 <flash_nrf_read>:
{
   15906:	b570      	push	{r4, r5, r6, lr}
   15908:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   1590a:	4619      	mov	r1, r3
   1590c:	4628      	mov	r0, r5
{
   1590e:	4616      	mov	r6, r2
   15910:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   15912:	f7ff ffe5 	bl	158e0 <is_regular_addr_valid>
   15916:	b138      	cbz	r0, 15928 <flash_nrf_read+0x22>
	if (!len) {
   15918:	b14c      	cbz	r4, 1592e <flash_nrf_read+0x28>
	memcpy(data, (void *)addr, len);
   1591a:	4622      	mov	r2, r4
   1591c:	4629      	mov	r1, r5
   1591e:	4630      	mov	r0, r6
   15920:	f7fd fe26 	bl	13570 <memcpy>
	return 0;
   15924:	2000      	movs	r0, #0
}
   15926:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   15928:	f06f 0015 	mvn.w	r0, #21
   1592c:	e7fb      	b.n	15926 <flash_nrf_read+0x20>
		return 0;
   1592e:	4620      	mov	r0, r4
   15930:	e7f9      	b.n	15926 <flash_nrf_read+0x20>

00015932 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
   15932:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   15936:	461e      	mov	r6, r3
	off_t group_offs = 0;
	u32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
   15938:	6883      	ldr	r3, [r0, #8]
{
   1593a:	460c      	mov	r4, r1
	api->page_layout(dev, &layout, &layout_size);
   1593c:	691b      	ldr	r3, [r3, #16]
   1593e:	4669      	mov	r1, sp
{
   15940:	4617      	mov	r7, r2
	api->page_layout(dev, &layout, &layout_size);
   15942:	aa01      	add	r2, sp, #4
   15944:	4798      	blx	r3

	while (layout_size--) {
   15946:	e9dd 1000 	ldrd	r1, r0, [sp]
   1594a:	2300      	movs	r3, #0
	off_t end = 0;
   1594c:	461d      	mov	r5, r3
	off_t group_offs = 0;
   1594e:	469e      	mov	lr, r3
	size_t page_count = 0;
   15950:	469c      	mov	ip, r3
   15952:	f100 38ff 	add.w	r8, r0, #4294967295
	while (layout_size--) {
   15956:	f1b8 3fff 	cmp.w	r8, #4294967295
   1595a:	d102      	bne.n	15962 <flash_get_page_info+0x30>
		page_count += layout->pages_count;

		layout++;
	}

	return -EINVAL; /* page of the index doesn't exist */
   1595c:	f06f 0015 	mvn.w	r0, #21
   15960:	e018      	b.n	15994 <flash_get_page_info+0x62>
		if (use_addr) {
   15962:	680a      	ldr	r2, [r1, #0]
   15964:	b1cf      	cbz	r7, 1599a <flash_get_page_info+0x68>
			end += layout->pages_count * layout->pages_size;
   15966:	6848      	ldr	r0, [r1, #4]
   15968:	fb00 5502 	mla	r5, r0, r2, r5
		if (offs < end) {
   1596c:	42a5      	cmp	r5, r4
   1596e:	f108 38ff 	add.w	r8, r8, #4294967295
   15972:	dd17      	ble.n	159a4 <flash_get_page_info+0x72>
   15974:	b103      	cbz	r3, 15978 <flash_get_page_info+0x46>
   15976:	9100      	str	r1, [sp, #0]
			info->size = layout->pages_size;
   15978:	9b00      	ldr	r3, [sp, #0]
   1597a:	685b      	ldr	r3, [r3, #4]
   1597c:	6073      	str	r3, [r6, #4]
			if (use_addr) {
   1597e:	b177      	cbz	r7, 1599e <flash_get_page_info+0x6c>
				num_in_group = (offs - group_offs) /
   15980:	eba4 040e 	sub.w	r4, r4, lr
   15984:	fbb4 f4f3 	udiv	r4, r4, r3
			return 0;
   15988:	2000      	movs	r0, #0
			info->start_offset = group_offs +
   1598a:	fb04 e303 	mla	r3, r4, r3, lr
			info->index = page_count + num_in_group;
   1598e:	4464      	add	r4, ip
			info->start_offset = group_offs +
   15990:	6033      	str	r3, [r6, #0]
			info->index = page_count + num_in_group;
   15992:	60b4      	str	r4, [r6, #8]
}
   15994:	b002      	add	sp, #8
   15996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			end += layout->pages_count;
   1599a:	4415      	add	r5, r2
   1599c:	e7e6      	b.n	1596c <flash_get_page_info+0x3a>
				num_in_group = offs - page_count;
   1599e:	eba4 040c 	sub.w	r4, r4, ip
   159a2:	e7f1      	b.n	15988 <flash_get_page_info+0x56>
		group_offs += layout->pages_count * layout->pages_size;
   159a4:	684b      	ldr	r3, [r1, #4]
		page_count += layout->pages_count;
   159a6:	4494      	add	ip, r2
		group_offs += layout->pages_count * layout->pages_size;
   159a8:	fb03 ee02 	mla	lr, r3, r2, lr
		layout++;
   159ac:	3108      	adds	r1, #8
   159ae:	2301      	movs	r3, #1
   159b0:	e7d1      	b.n	15956 <flash_get_page_info+0x24>

000159b2 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(struct device *dev, off_t offs,
				      struct flash_pages_info *info)
{
   159b2:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, true, info);
   159b4:	2201      	movs	r2, #1
   159b6:	f7ff bfbc 	b.w	15932 <flash_get_page_info>

000159ba <flash_page_foreach>:

	return count;
}

void flash_page_foreach(struct device *dev, flash_page_cb cb, void *data)
{
   159ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->driver_api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
   159be:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
   159c0:	6883      	ldr	r3, [r0, #8]
{
   159c2:	b086      	sub	sp, #24
   159c4:	4688      	mov	r8, r1
   159c6:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   159c8:	691b      	ldr	r3, [r3, #16]
   159ca:	aa02      	add	r2, sp, #8
   159cc:	a901      	add	r1, sp, #4
   159ce:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
   159d0:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   159d2:	4625      	mov	r5, r4
   159d4:	9b02      	ldr	r3, [sp, #8]
   159d6:	42ab      	cmp	r3, r5
   159d8:	d802      	bhi.n	159e0 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   159da:	b006      	add	sp, #24
   159dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
   159e0:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
   159e2:	9f01      	ldr	r7, [sp, #4]
   159e4:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
   159e8:	687b      	ldr	r3, [r7, #4]
   159ea:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   159ec:	683a      	ldr	r2, [r7, #0]
   159ee:	eb0a 0306 	add.w	r3, sl, r6
   159f2:	42b2      	cmp	r2, r6
   159f4:	d802      	bhi.n	159fc <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   159f6:	469a      	mov	sl, r3
   159f8:	3501      	adds	r5, #1
   159fa:	e7eb      	b.n	159d4 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   159fc:	4649      	mov	r1, r9
   159fe:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   15a00:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   15a02:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   15a04:	47c0      	blx	r8
   15a06:	2800      	cmp	r0, #0
   15a08:	d0e7      	beq.n	159da <flash_page_foreach+0x20>
			off += page_info.size;
   15a0a:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   15a0c:	3601      	adds	r6, #1
			off += page_info.size;
   15a0e:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   15a10:	e7ec      	b.n	159ec <flash_page_foreach+0x32>

00015a12 <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   15a12:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   15a14:	6843      	ldr	r3, [r0, #4]
	if (data->int_driven->disable_tx_irq &&
   15a16:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   15a18:	681b      	ldr	r3, [r3, #0]
	if (data->int_driven->disable_tx_irq &&
   15a1a:	7b91      	ldrb	r1, [r2, #14]
   15a1c:	b159      	cbz	r1, 15a36 <uarte_nrfx_isr_int+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15a1e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   15a22:	b141      	cbz	r1, 15a36 <uarte_nrfx_isr_int+0x24>
    p_reg->INTENCLR = mask;
   15a24:	f44f 7180 	mov.w	r1, #256	; 0x100
   15a28:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15a2c:	2101      	movs	r1, #1
   15a2e:	60d9      	str	r1, [r3, #12]
		data->int_driven->disable_tx_irq = false;
   15a30:	2300      	movs	r3, #0
   15a32:	7393      	strb	r3, [r2, #14]
		return;
   15a34:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15a36:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   15a3a:	b111      	cbz	r1, 15a42 <uarte_nrfx_isr_int+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15a3c:	2100      	movs	r1, #0
   15a3e:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   15a42:	6813      	ldr	r3, [r2, #0]
   15a44:	b10b      	cbz	r3, 15a4a <uarte_nrfx_isr_int+0x38>
		data->int_driven->cb(data->int_driven->cb_data);
   15a46:	6850      	ldr	r0, [r2, #4]
   15a48:	4718      	bx	r3
}
   15a4a:	4770      	bx	lr

00015a4c <uarte_nrfx_config_get>:

static int uarte_nrfx_config_get(struct device *dev, struct uart_config *cfg)
{
   15a4c:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   15a4e:	68c2      	ldr	r2, [r0, #12]
   15a50:	e892 0003 	ldmia.w	r2, {r0, r1}
   15a54:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
}
   15a58:	2000      	movs	r0, #0
   15a5a:	4770      	bx	lr

00015a5c <uarte_nrfx_err_check>:
	return config->uarte_regs;
   15a5c:	6843      	ldr	r3, [r0, #4]
   15a5e:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   15a60:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   15a64:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
static int uarte_nrfx_err_check(struct device *dev)
{
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	/* register bitfields maps to the defines in uart.h */
	return nrf_uarte_errorsrc_get_and_clear(uarte);
}
   15a68:	4770      	bx	lr

00015a6a <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   15a6a:	6843      	ldr	r3, [r0, #4]
 * @return 0 if a character arrived, -1 if the input buffer is empty.
 */
static int uarte_nrfx_poll_in(struct device *dev, unsigned char *c)
{

	const struct uarte_nrfx_data *data = get_dev_data(dev);
   15a6c:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   15a6e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15a70:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (data->async) {
		return -ENOTSUP;
	}
#endif

	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   15a74:	b138      	cbz	r0, 15a86 <uarte_nrfx_poll_in+0x1c>
		return -1;
	}

	*c = data->rx_data;
   15a76:	7c12      	ldrb	r2, [r2, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15a78:	2000      	movs	r0, #0
   15a7a:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15a7c:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15a7e:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15a82:	601a      	str	r2, [r3, #0]

	/* clear the interrupt */
	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);

	return 0;
   15a84:	4770      	bx	lr
		return -1;
   15a86:	f04f 30ff 	mov.w	r0, #4294967295
}
   15a8a:	4770      	bx	lr

00015a8c <uarte_nrfx_fifo_fill>:
#ifdef UARTE_INTERRUPT_DRIVEN
/** Interrupt driven FIFO fill function */
static int uarte_nrfx_fifo_fill(struct device *dev,
				const u8_t *tx_data,
				int len)
{
   15a8c:	4603      	mov	r3, r0
	return config->uarte_regs;
   15a8e:	6840      	ldr	r0, [r0, #4]
{
   15a90:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   15a92:	6804      	ldr	r4, [r0, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15a94:	f8d4 0120 	ldr.w	r0, [r4, #288]	; 0x120
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   15a98:	b190      	cbz	r0, 15ac0 <uarte_nrfx_fifo_fill+0x34>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   15a9a:	68dd      	ldr	r5, [r3, #12]
		return 0;
	}

	if (len > data->int_driven->tx_buff_size) {
   15a9c:	68ab      	ldr	r3, [r5, #8]
   15a9e:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15aa0:	2300      	movs	r3, #0
   15aa2:	4290      	cmp	r0, r2
   15aa4:	bfa8      	it	ge
   15aa6:	4610      	movge	r0, r2
   15aa8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
	}

	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDTX);

	/* Copy data to RAM buffer for EasyDMA transfer */
	for (int i = 0; i < len; i++) {
   15aac:	68aa      	ldr	r2, [r5, #8]
   15aae:	4283      	cmp	r3, r0
   15ab0:	6892      	ldr	r2, [r2, #8]
   15ab2:	db06      	blt.n	15ac2 <uarte_nrfx_fifo_fill+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15ab4:	2301      	movs	r3, #1

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   15ab6:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   15aba:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15abe:	60a3      	str	r3, [r4, #8]
	nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, len);

	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTTX);

	return len;
}
   15ac0:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   15ac2:	5cce      	ldrb	r6, [r1, r3]
   15ac4:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
   15ac6:	3301      	adds	r3, #1
   15ac8:	e7f0      	b.n	15aac <uarte_nrfx_fifo_fill+0x20>

00015aca <uarte_nrfx_fifo_read>:
	return config->uarte_regs;
   15aca:	6842      	ldr	r2, [r0, #4]

/** Interrupt driven FIFO read function */
static int uarte_nrfx_fifo_read(struct device *dev,
				u8_t *rx_data,
				const int size)
{
   15acc:	4603      	mov	r3, r0
	return config->uarte_regs;
   15ace:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15ad0:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
	int num_rx = 0;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	const struct uarte_nrfx_data *data = get_dev_data(dev);

	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   15ad4:	b138      	cbz	r0, 15ae6 <uarte_nrfx_fifo_read+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15ad6:	2000      	movs	r0, #0
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   15ad8:	68db      	ldr	r3, [r3, #12]
   15ada:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15ade:	2001      	movs	r0, #1
		/* Clear the interrupt */
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

		/* Receive a character */
		rx_data[num_rx++] = (u8_t)data->rx_data;
   15ae0:	7c1b      	ldrb	r3, [r3, #16]
   15ae2:	700b      	strb	r3, [r1, #0]
   15ae4:	6010      	str	r0, [r2, #0]

		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
	}

	return num_rx;
}
   15ae6:	4770      	bx	lr

00015ae8 <uarte_nrfx_irq_tx_enable>:
static void uarte_nrfx_irq_tx_enable(struct device *dev)
{
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	data->int_driven->disable_tx_irq = false;
   15ae8:	2100      	movs	r1, #0
   15aea:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   15aec:	6843      	ldr	r3, [r0, #4]
	data->int_driven->disable_tx_irq = false;
   15aee:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   15af0:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   15af2:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   15af4:	f44f 7280 	mov.w	r2, #256	; 0x100
   15af8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
}
   15afc:	4770      	bx	lr

00015afe <uarte_nrfx_irq_tx_disable>:
/** Interrupt driven transfer disabling function */
static void uarte_nrfx_irq_tx_disable(struct device *dev)
{
	struct uarte_nrfx_data *data = get_dev_data(dev);
	/* TX IRQ will be disabled after current transmission is finished */
	data->int_driven->disable_tx_irq = true;
   15afe:	2201      	movs	r2, #1
   15b00:	68c3      	ldr	r3, [r0, #12]
   15b02:	689b      	ldr	r3, [r3, #8]
   15b04:	739a      	strb	r2, [r3, #14]
}
   15b06:	4770      	bx	lr

00015b08 <uarte_nrfx_irq_tx_ready_complete>:
	/* ENDTX flag is always on so that ISR is called when we enable TX IRQ.
	 * Because of that we have to explicitly check if ENDTX interrupt is
	 * enabled, otherwise this function would always return true no matter
	 * what would be the source of interrupt.
	 */
	return !data->int_driven->disable_tx_irq &&
   15b08:	68c3      	ldr	r3, [r0, #12]
   15b0a:	689b      	ldr	r3, [r3, #8]
   15b0c:	7b9b      	ldrb	r3, [r3, #14]
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   15b0e:	b94b      	cbnz	r3, 15b24 <uarte_nrfx_irq_tx_ready_complete+0x1c>
	return config->uarte_regs;
   15b10:	6843      	ldr	r3, [r0, #4]
   15b12:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15b14:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return !data->int_driven->disable_tx_irq &&
   15b18:	b128      	cbz	r0, 15b26 <uarte_nrfx_irq_tx_ready_complete+0x1e>
    return p_reg->INTENSET & mask;
   15b1a:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   15b1e:	f3c0 2000 	ubfx	r0, r0, #8, #1
   15b22:	4770      	bx	lr
   15b24:	2000      	movs	r0, #0
	       nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK);
}
   15b26:	4770      	bx	lr

00015b28 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   15b28:	6843      	ldr	r3, [r0, #4]
   15b2a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15b2c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
static int uarte_nrfx_irq_rx_ready(struct device *dev)
{
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX);
}
   15b30:	3800      	subs	r0, #0
   15b32:	bf18      	it	ne
   15b34:	2001      	movne	r0, #1
   15b36:	4770      	bx	lr

00015b38 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   15b38:	2210      	movs	r2, #16
	return config->uarte_regs;
   15b3a:	6843      	ldr	r3, [r0, #4]
   15b3c:	681b      	ldr	r3, [r3, #0]
   15b3e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
static void uarte_nrfx_irq_rx_enable(struct device *dev)
{
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDRX_MASK);
}
   15b42:	4770      	bx	lr

00015b44 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   15b44:	2210      	movs	r2, #16
	return config->uarte_regs;
   15b46:	6843      	ldr	r3, [r0, #4]
   15b48:	681b      	ldr	r3, [r3, #0]
   15b4a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
static void uarte_nrfx_irq_rx_disable(struct device *dev)
{
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	nrf_uarte_int_disable(uarte, NRF_UARTE_INT_ENDRX_MASK);
}
   15b4e:	4770      	bx	lr

00015b50 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   15b50:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   15b54:	6843      	ldr	r3, [r0, #4]
   15b56:	681b      	ldr	r3, [r3, #0]
   15b58:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
static void uarte_nrfx_irq_err_enable(struct device *dev)
{
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ERROR_MASK);
}
   15b5c:	4770      	bx	lr

00015b5e <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   15b5e:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   15b62:	6843      	ldr	r3, [r0, #4]
   15b64:	681b      	ldr	r3, [r3, #0]
   15b66:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
static void uarte_nrfx_irq_err_disable(struct device *dev)
{
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	nrf_uarte_int_disable(uarte, NRF_UARTE_INT_ERROR_MASK);
}
   15b6a:	4770      	bx	lr

00015b6c <uarte_nrfx_irq_update>:

/** Interrupt driven interrupt update function */
static int uarte_nrfx_irq_update(struct device *dev)
{
	return 1;
}
   15b6c:	2001      	movs	r0, #1
   15b6e:	4770      	bx	lr

00015b70 <uarte_nrfx_irq_callback_set>:
					uart_irq_callback_user_data_t cb,
					void *cb_data)
{
	struct uarte_nrfx_data *data = get_dev_data(dev);

	data->int_driven->cb = cb;
   15b70:	68c3      	ldr	r3, [r0, #12]
   15b72:	689b      	ldr	r3, [r3, #8]
	data->int_driven->cb_data = cb_data;
   15b74:	e9c3 1200 	strd	r1, r2, [r3]
}
   15b78:	4770      	bx	lr

00015b7a <uarte_nrfx_irq_is_pending>:
{
   15b7a:	b508      	push	{r3, lr}
	return config->uarte_regs;
   15b7c:	6843      	ldr	r3, [r0, #4]
{
   15b7e:	4602      	mov	r2, r0
	return config->uarte_regs;
   15b80:	6819      	ldr	r1, [r3, #0]
    return p_reg->INTENSET & mask;
   15b82:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   15b86:	05db      	lsls	r3, r3, #23
   15b88:	d405      	bmi.n	15b96 <uarte_nrfx_irq_is_pending+0x1c>
   15b8a:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   15b8e:	f010 0010 	ands.w	r0, r0, #16
   15b92:	d106      	bne.n	15ba2 <uarte_nrfx_irq_is_pending+0x28>
}
   15b94:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   15b96:	f7ff ffb7 	bl	15b08 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   15b9a:	2800      	cmp	r0, #0
   15b9c:	d0f5      	beq.n	15b8a <uarte_nrfx_irq_is_pending+0x10>
		||
   15b9e:	2001      	movs	r0, #1
   15ba0:	e7f8      	b.n	15b94 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   15ba2:	4610      	mov	r0, r2
   15ba4:	f7ff ffc0 	bl	15b28 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   15ba8:	3800      	subs	r0, #0
   15baa:	bf18      	it	ne
   15bac:	2001      	movne	r0, #1
   15bae:	e7f1      	b.n	15b94 <uarte_nrfx_irq_is_pending+0x1a>

00015bb0 <uarte_nrfx_poll_out>:
{
   15bb0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   15bb4:	6843      	ldr	r3, [r0, #4]
{
   15bb6:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   15bba:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   15bbc:	68c6      	ldr	r6, [r0, #12]
	if (!k_is_in_isr()) {
   15bbe:	f000 fd61 	bl	16684 <k_is_in_isr>
   15bc2:	b9c0      	cbnz	r0, 15bf6 <uarte_nrfx_poll_out+0x46>
		lock = &data->poll_out_lock;
   15bc4:	2564      	movs	r5, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   15bc6:	f04f 0801 	mov.w	r8, #1
   15bca:	f106 070c 	add.w	r7, r6, #12
   15bce:	e8d7 3fef 	ldaex	r3, [r7]
   15bd2:	2b00      	cmp	r3, #0
   15bd4:	d103      	bne.n	15bde <uarte_nrfx_poll_out+0x2e>
   15bd6:	e8c7 8fe2 	stlex	r2, r8, [r7]
   15bda:	2a00      	cmp	r2, #0
   15bdc:	d1f7      	bne.n	15bce <uarte_nrfx_poll_out+0x1e>
		while (atomic_cas((atomic_t *) lock,
   15bde:	d00c      	beq.n	15bfa <uarte_nrfx_poll_out+0x4a>
	return z_impl_k_sleep(timeout);
   15be0:	2021      	movs	r0, #33	; 0x21
   15be2:	2100      	movs	r1, #0
   15be4:	3d01      	subs	r5, #1
   15be6:	f7fa feef 	bl	109c8 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   15bea:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   15bee:	d1ee      	bne.n	15bce <uarte_nrfx_poll_out+0x1e>
}
   15bf0:	b002      	add	sp, #8
   15bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*lock = 1;
   15bf6:	2301      	movs	r3, #1
   15bf8:	60f3      	str	r3, [r6, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15bfa:	2300      	movs	r3, #0
   15bfc:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   15c00:	f10d 0307 	add.w	r3, sp, #7
   15c04:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   15c08:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15c0a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    p_reg->TXD.MAXCNT = length;
   15c0e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15c12:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15c14:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
   15c18:	b923      	cbnz	r3, 15c24 <uarte_nrfx_poll_out+0x74>
   15c1a:	2001      	movs	r0, #1
   15c1c:	f000 f879 	bl	15d12 <nrfx_busy_wait>
   15c20:	3d01      	subs	r5, #1
   15c22:	d1f7      	bne.n	15c14 <uarte_nrfx_poll_out+0x64>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15c24:	2301      	movs	r3, #1
   15c26:	60e3      	str	r3, [r4, #12]
	*lock = 0;
   15c28:	2300      	movs	r3, #0
   15c2a:	60f3      	str	r3, [r6, #12]
   15c2c:	e7e0      	b.n	15bf0 <uarte_nrfx_poll_out+0x40>

00015c2e <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   15c2e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c32:	4606      	mov	r6, r0
   15c34:	2714      	movs	r7, #20
   15c36:	2101      	movs	r1, #1
   15c38:	2200      	movs	r2, #0
   15c3a:	2008      	movs	r0, #8
   15c3c:	f7ed ffde 	bl	3bfc <z_arm_irq_priority_set>
   15c40:	2008      	movs	r0, #8
   15c42:	f7ed ffcb 	bl	3bdc <arch_irq_enable>
	return config->uarte_regs;
   15c46:	6873      	ldr	r3, [r6, #4]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15c48:	2501      	movs	r5, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15c4a:	a801      	add	r0, sp, #4
   15c4c:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   15c4e:	f8d6 800c 	ldr.w	r8, [r6, #12]
        nrf_gpio_pin_set(pin_number);
   15c52:	9701      	str	r7, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15c54:	f7f8 f920 	bl	de98 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15c58:	9b01      	ldr	r3, [sp, #4]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15c5a:	f04f 0a03 	mov.w	sl, #3
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15c5e:	fa05 f303 	lsl.w	r3, r5, r3
    p_reg->OUTSET = set_mask;
   15c62:	6083      	str	r3, [r0, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15c64:	a801      	add	r0, sp, #4
   15c66:	9701      	str	r7, [sp, #4]
   15c68:	f7f8 f916 	bl	de98 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15c6c:	f04f 0b16 	mov.w	fp, #22
   15c70:	9b01      	ldr	r3, [sp, #4]
   15c72:	f04f 0900 	mov.w	r9, #0
   15c76:	3380      	adds	r3, #128	; 0x80
   15c78:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15c7c:	a801      	add	r0, sp, #4
   15c7e:	f8cd b004 	str.w	fp, [sp, #4]
   15c82:	f7f8 f909 	bl	de98 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15c86:	9b01      	ldr	r3, [sp, #4]
   15c88:	3380      	adds	r3, #128	; 0x80
   15c8a:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
   15c8e:	f8c4 750c 	str.w	r7, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   15c92:	2713      	movs	r7, #19
   15c94:	f8c4 b514 	str.w	fp, [r4, #1300]	; 0x514
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15c98:	a801      	add	r0, sp, #4
   15c9a:	9701      	str	r7, [sp, #4]
   15c9c:	f7f8 f8fc 	bl	de98 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15ca0:	9b01      	ldr	r3, [sp, #4]
   15ca2:	fa05 f303 	lsl.w	r3, r5, r3
    p_reg->OUTSET = set_mask;
   15ca6:	6083      	str	r3, [r0, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15ca8:	a801      	add	r0, sp, #4
   15caa:	9701      	str	r7, [sp, #4]
   15cac:	f7f8 f8f4 	bl	de98 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15cb0:	9b01      	ldr	r3, [sp, #4]
   15cb2:	3380      	adds	r3, #128	; 0x80
   15cb4:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   15cb8:	f04f 0a15 	mov.w	sl, #21
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15cbc:	a801      	add	r0, sp, #4
   15cbe:	f8cd a004 	str.w	sl, [sp, #4]
   15cc2:	f7f8 f8e9 	bl	de98 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15cc6:	9b01      	ldr	r3, [sp, #4]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   15cc8:	68f1      	ldr	r1, [r6, #12]
   15cca:	3380      	adds	r3, #128	; 0x80
   15ccc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   15cd0:	f8c4 7508 	str.w	r7, [r4, #1288]	; 0x508
   15cd4:	4630      	mov	r0, r6
    p_reg->PSEL.CTS = pselcts;
   15cd6:	f8c4 a510 	str.w	sl, [r4, #1296]	; 0x510
   15cda:	f7f8 f81d 	bl	dd18 <uarte_nrfx_configure>
	if (err) {
   15cde:	b9a0      	cbnz	r0, 15d0a <uarte_0_init+0xdc>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   15ce0:	2308      	movs	r3, #8
   15ce2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   15ce6:	f108 0310 	add.w	r3, r8, #16
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15cea:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   15cee:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
   15cf2:	f8d8 3008 	ldr.w	r3, [r8, #8]
    p_reg->RXD.MAXCNT = length;
   15cf6:	f8c4 5538 	str.w	r5, [r4, #1336]	; 0x538
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   15cfa:	689b      	ldr	r3, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15cfc:	6025      	str	r5, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   15cfe:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   15d02:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15d06:	60a5      	str	r5, [r4, #8]
   15d08:	60e5      	str	r5, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   15d0a:	b003      	add	sp, #12
   15d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015d10 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   15d10:	4700      	bx	r0

00015d12 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   15d12:	f000 bcbd 	b.w	16690 <z_impl_k_busy_wait>

00015d16 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   15d16:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   15d1a:	4770      	bx	lr

00015d1c <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   15d1c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   15d20:	4770      	bx	lr

00015d22 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   15d22:	f44f 7080 	mov.w	r0, #256	; 0x100
   15d26:	4770      	bx	lr

00015d28 <metal_device_open>:
{
   15d28:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15d2a:	460c      	mov	r4, r1
   15d2c:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
   15d2e:	4606      	mov	r6, r0
   15d30:	b918      	cbnz	r0, 15d3a <metal_device_open+0x12>
		return -EINVAL;
   15d32:	f06f 0015 	mvn.w	r0, #21
}
   15d36:	b002      	add	sp, #8
   15d38:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
   15d3a:	f7fd fbe7 	bl	1350c <strlen>
   15d3e:	2800      	cmp	r0, #0
   15d40:	d0f7      	beq.n	15d32 <metal_device_open+0xa>
   15d42:	2c00      	cmp	r4, #0
   15d44:	d0f5      	beq.n	15d32 <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
   15d46:	4620      	mov	r0, r4
   15d48:	f7fd fbe0 	bl	1350c <strlen>
   15d4c:	2800      	cmp	r0, #0
   15d4e:	d0f0      	beq.n	15d32 <metal_device_open+0xa>
   15d50:	2d00      	cmp	r5, #0
   15d52:	d0ee      	beq.n	15d32 <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
   15d54:	4630      	mov	r0, r6
   15d56:	a901      	add	r1, sp, #4
   15d58:	f7f8 faf6 	bl	e348 <metal_bus_find>
	if (error)
   15d5c:	2800      	cmp	r0, #0
   15d5e:	d1ea      	bne.n	15d36 <metal_device_open+0xe>
	if (!bus->ops.dev_open)
   15d60:	9801      	ldr	r0, [sp, #4]
   15d62:	6883      	ldr	r3, [r0, #8]
   15d64:	b11b      	cbz	r3, 15d6e <metal_device_open+0x46>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   15d66:	462a      	mov	r2, r5
   15d68:	4621      	mov	r1, r4
   15d6a:	4798      	blx	r3
	if (error)
   15d6c:	e7e3      	b.n	15d36 <metal_device_open+0xe>
		return -ENODEV;
   15d6e:	f06f 0012 	mvn.w	r0, #18
   15d72:	e7e0      	b.n	15d36 <metal_device_open+0xe>

00015d74 <metal_io_block_read>:
	metal_sys_io_mem_map(io);
}

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   15d74:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   15d76:	6804      	ldr	r4, [r0, #0]
   15d78:	6885      	ldr	r5, [r0, #8]
		: NULL);
   15d7a:	1c66      	adds	r6, r4, #1
   15d7c:	d00f      	beq.n	15d9e <metal_io_block_read+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   15d7e:	42a9      	cmp	r1, r5
   15d80:	d232      	bcs.n	15de8 <metal_io_block_read+0x74>
		: NULL);
   15d82:	440c      	add	r4, r1
	unsigned char *dest = dst;
	int retlen;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   15d84:	185e      	adds	r6, r3, r1
   15d86:	42ae      	cmp	r6, r5
		len = io->size - offset;
   15d88:	bf88      	it	hi
   15d8a:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   15d8c:	6a05      	ldr	r5, [r0, #32]
   15d8e:	b155      	cbz	r5, 15da6 <metal_io_block_read+0x32>
		retlen = (*io->ops.block_read)(
   15d90:	9300      	str	r3, [sp, #0]
   15d92:	2305      	movs	r3, #5
   15d94:	47a8      	blx	r5
   15d96:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   15d98:	4618      	mov	r0, r3
   15d9a:	b002      	add	sp, #8
   15d9c:	bd70      	pop	{r4, r5, r6, pc}
	if (offset >= io->size)
   15d9e:	42a9      	cmp	r1, r5
   15da0:	d222      	bcs.n	15de8 <metal_io_block_read+0x74>
   15da2:	2400      	movs	r4, #0
   15da4:	e7ee      	b.n	15d84 <metal_io_block_read+0x10>
		atomic_thread_fence(memory_order_seq_cst);
   15da6:	f3bf 8f5b 	dmb	ish
		while ( len && (
   15daa:	4621      	mov	r1, r4
   15dac:	4618      	mov	r0, r3
   15dae:	2800      	cmp	r0, #0
   15db0:	d0f2      	beq.n	15d98 <metal_io_block_read+0x24>
			((uintptr_t)dest % sizeof(int)) ||
   15db2:	ea42 0401 	orr.w	r4, r2, r1
   15db6:	07a4      	lsls	r4, r4, #30
   15db8:	d10a      	bne.n	15dd0 <metal_io_block_read+0x5c>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   15dba:	2803      	cmp	r0, #3
   15dbc:	dc0e      	bgt.n	15ddc <metal_io_block_read+0x68>
   15dbe:	3901      	subs	r1, #1
   15dc0:	4410      	add	r0, r2
		for (; len != 0; dest++, ptr++, len--)
   15dc2:	4282      	cmp	r2, r0
   15dc4:	d0e8      	beq.n	15d98 <metal_io_block_read+0x24>
				*(const unsigned char *)ptr;
   15dc6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
			*(unsigned char *)dest =
   15dca:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   15dce:	e7f8      	b.n	15dc2 <metal_io_block_read+0x4e>
				*(const unsigned char *)ptr;
   15dd0:	f811 4b01 	ldrb.w	r4, [r1], #1
			len--;
   15dd4:	3801      	subs	r0, #1
			*(unsigned char *)dest =
   15dd6:	f802 4b01 	strb.w	r4, [r2], #1
			len--;
   15dda:	e7e8      	b.n	15dae <metal_io_block_read+0x3a>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   15ddc:	f851 4b04 	ldr.w	r4, [r1], #4
   15de0:	3804      	subs	r0, #4
   15de2:	f842 4b04 	str.w	r4, [r2], #4
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   15de6:	e7e8      	b.n	15dba <metal_io_block_read+0x46>
		return -ERANGE;
   15de8:	f06f 0325 	mvn.w	r3, #37	; 0x25
   15dec:	e7d4      	b.n	15d98 <metal_io_block_read+0x24>

00015dee <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   15dee:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   15df0:	6804      	ldr	r4, [r0, #0]
   15df2:	6885      	ldr	r5, [r0, #8]
		: NULL);
   15df4:	1c66      	adds	r6, r4, #1
   15df6:	d00e      	beq.n	15e16 <metal_io_block_write+0x28>
	return (io->virt != METAL_BAD_VA && offset < io->size
   15df8:	42a9      	cmp	r1, r5
   15dfa:	d230      	bcs.n	15e5e <metal_io_block_write+0x70>
		: NULL);
   15dfc:	440c      	add	r4, r1
	const unsigned char *source = src;
	int retlen;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   15dfe:	185e      	adds	r6, r3, r1
   15e00:	42ae      	cmp	r6, r5
		len = io->size - offset;
   15e02:	bf88      	it	hi
   15e04:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   15e06:	6a45      	ldr	r5, [r0, #36]	; 0x24
   15e08:	b94d      	cbnz	r5, 15e1e <metal_io_block_write+0x30>
   15e0a:	4619      	mov	r1, r3
		retlen = (*io->ops.block_write)(
			io, offset, src, memory_order_seq_cst, len);
	} else {
		while ( len && (
   15e0c:	b991      	cbnz	r1, 15e34 <metal_io_block_write+0x46>
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
		for (; len != 0; ptr++, source++, len--)
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
   15e0e:	f3bf 8f5b 	dmb	ish
	retlen = len;
   15e12:	4618      	mov	r0, r3
   15e14:	e006      	b.n	15e24 <metal_io_block_write+0x36>
	if (offset >= io->size)
   15e16:	42a9      	cmp	r1, r5
   15e18:	d221      	bcs.n	15e5e <metal_io_block_write+0x70>
   15e1a:	2400      	movs	r4, #0
   15e1c:	e7ef      	b.n	15dfe <metal_io_block_write+0x10>
		retlen = (*io->ops.block_write)(
   15e1e:	9300      	str	r3, [sp, #0]
   15e20:	2305      	movs	r3, #5
   15e22:	47a8      	blx	r5
	}
	return retlen;
}
   15e24:	b002      	add	sp, #8
   15e26:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
   15e28:	f812 0b01 	ldrb.w	r0, [r2], #1
			len--;
   15e2c:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
   15e2e:	f804 0b01 	strb.w	r0, [r4], #1
			len--;
   15e32:	e7eb      	b.n	15e0c <metal_io_block_write+0x1e>
			((uintptr_t)ptr % sizeof(int)) ||
   15e34:	ea44 0002 	orr.w	r0, r4, r2
   15e38:	0780      	lsls	r0, r0, #30
   15e3a:	d1f5      	bne.n	15e28 <metal_io_block_write+0x3a>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   15e3c:	2903      	cmp	r1, #3
   15e3e:	dc08      	bgt.n	15e52 <metal_io_block_write+0x64>
   15e40:	3a01      	subs	r2, #1
   15e42:	4421      	add	r1, r4
		for (; len != 0; ptr++, source++, len--)
   15e44:	428c      	cmp	r4, r1
   15e46:	d0e2      	beq.n	15e0e <metal_io_block_write+0x20>
				*(const unsigned char *)source;
   15e48:	f812 0f01 	ldrb.w	r0, [r2, #1]!
			*(unsigned char *)ptr =
   15e4c:	f804 0b01 	strb.w	r0, [r4], #1
		for (; len != 0; ptr++, source++, len--)
   15e50:	e7f8      	b.n	15e44 <metal_io_block_write+0x56>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   15e52:	f852 0b04 	ldr.w	r0, [r2], #4
   15e56:	3904      	subs	r1, #4
   15e58:	f844 0b04 	str.w	r0, [r4], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   15e5c:	e7ee      	b.n	15e3c <metal_io_block_write+0x4e>
		return -ERANGE;
   15e5e:	f06f 0025 	mvn.w	r0, #37	; 0x25
   15e62:	e7df      	b.n	15e24 <metal_io_block_write+0x36>

00015e64 <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   15e64:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   15e66:	6804      	ldr	r4, [r0, #0]
   15e68:	461d      	mov	r5, r3
		: NULL);
   15e6a:	1c66      	adds	r6, r4, #1
   15e6c:	6883      	ldr	r3, [r0, #8]
   15e6e:	d00e      	beq.n	15e8e <metal_io_block_set+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   15e70:	4299      	cmp	r1, r3
   15e72:	d22d      	bcs.n	15ed0 <metal_io_block_set+0x6c>
		: NULL);
   15e74:	440c      	add	r4, r1
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   15e76:	186e      	adds	r6, r5, r1
   15e78:	429e      	cmp	r6, r3
		len = io->size - offset;
	retlen = len;
	if (io->ops.block_set) {
   15e7a:	6a86      	ldr	r6, [r0, #40]	; 0x28
		len = io->size - offset;
   15e7c:	bf88      	it	hi
   15e7e:	1a5d      	subhi	r5, r3, r1
	if (io->ops.block_set) {
   15e80:	b186      	cbz	r6, 15ea4 <metal_io_block_set+0x40>
		(*io->ops.block_set)(
   15e82:	2305      	movs	r3, #5
   15e84:	9500      	str	r5, [sp, #0]
   15e86:	47b0      	blx	r6
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   15e88:	4628      	mov	r0, r5
   15e8a:	b002      	add	sp, #8
   15e8c:	bd70      	pop	{r4, r5, r6, pc}
	if (offset >= io->size)
   15e8e:	4299      	cmp	r1, r3
   15e90:	d21e      	bcs.n	15ed0 <metal_io_block_set+0x6c>
   15e92:	2400      	movs	r4, #0
   15e94:	e7ef      	b.n	15e76 <metal_io_block_set+0x12>
			*(unsigned char *)ptr = (unsigned char) value;
   15e96:	f804 2b01 	strb.w	r2, [r4], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   15e9a:	3b01      	subs	r3, #1
   15e9c:	b923      	cbnz	r3, 15ea8 <metal_io_block_set+0x44>
		atomic_thread_fence(memory_order_seq_cst);
   15e9e:	f3bf 8f5b 	dmb	ish
   15ea2:	e7f1      	b.n	15e88 <metal_io_block_set+0x24>
   15ea4:	462b      	mov	r3, r5
   15ea6:	e7f9      	b.n	15e9c <metal_io_block_set+0x38>
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   15ea8:	07a1      	lsls	r1, r4, #30
   15eaa:	d1f4      	bne.n	15e96 <metal_io_block_set+0x32>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   15eac:	0611      	lsls	r1, r2, #24
   15eae:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   15eb2:	4311      	orrs	r1, r2
   15eb4:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   15eb8:	2b03      	cmp	r3, #3
   15eba:	dc05      	bgt.n	15ec8 <metal_io_block_set+0x64>
   15ebc:	4423      	add	r3, r4
		for (; len != 0; ptr++, len--)
   15ebe:	429c      	cmp	r4, r3
   15ec0:	d0ed      	beq.n	15e9e <metal_io_block_set+0x3a>
			*(unsigned char *)ptr = (unsigned char) value;
   15ec2:	f804 2b01 	strb.w	r2, [r4], #1
		for (; len != 0; ptr++, len--)
   15ec6:	e7fa      	b.n	15ebe <metal_io_block_set+0x5a>
			*(unsigned int *)ptr = cint;
   15ec8:	f844 1b04 	str.w	r1, [r4], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   15ecc:	3b04      	subs	r3, #4
   15ece:	e7f3      	b.n	15eb8 <metal_io_block_set+0x54>
		return -ERANGE;
   15ed0:	f06f 0525 	mvn.w	r5, #37	; 0x25
   15ed4:	e7d8      	b.n	15e88 <metal_io_block_set+0x24>

00015ed6 <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   15ed6:	2000      	movs	r0, #0
   15ed8:	4770      	bx	lr

00015eda <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   15eda:	b430      	push	{r4, r5}
	if (!io->ops.offset_to_phys) {
   15edc:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   15ede:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
   15ee0:	b984      	cbnz	r4, 15f04 <metal_io_phys+0x2a>
		unsigned long page = (io->page_shift >=
   15ee2:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
		return (io->physmap && offset < io->size
   15ee4:	6845      	ldr	r5, [r0, #4]
				     0 : offset >> io->page_shift);
   15ee6:	291f      	cmp	r1, #31
   15ee8:	bf98      	it	ls
   15eea:	fa23 f401 	lsrls.w	r4, r3, r1
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
   15eee:	b165      	cbz	r5, 15f0a <metal_io_phys+0x30>
		return (io->physmap && offset < io->size
   15ef0:	6881      	ldr	r1, [r0, #8]
   15ef2:	428b      	cmp	r3, r1
   15ef4:	d209      	bcs.n	15f0a <metal_io_phys+0x30>
			? io->physmap[page] + (offset & io->page_mask)
   15ef6:	6900      	ldr	r0, [r0, #16]
   15ef8:	4003      	ands	r3, r0
			: METAL_BAD_PHYS);
   15efa:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   15efe:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
   15f00:	bc30      	pop	{r4, r5}
   15f02:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
   15f04:	4623      	mov	r3, r4
}
   15f06:	bc30      	pop	{r4, r5}
	return io->ops.offset_to_phys(io, offset);
   15f08:	4718      	bx	r3
			: METAL_BAD_PHYS);
   15f0a:	f04f 30ff 	mov.w	r0, #4294967295
   15f0e:	e7f7      	b.n	15f00 <metal_io_phys+0x26>

00015f10 <virtqueue_create>:
{
   15f10:	b570      	push	{r4, r5, r6, lr}
   15f12:	9c06      	ldr	r4, [sp, #24]
		vq->vq_queue_index = id;
   15f14:	8121      	strh	r1, [r4, #8]
		vq->callback = callback;
   15f16:	9904      	ldr	r1, [sp, #16]
		vq->vq_name = name;
   15f18:	e9c4 0200 	strd	r0, r2, [r4]
		vq->vq_nentries = ring->num_descs;
   15f1c:	891a      	ldrh	r2, [r3, #8]
		vq->callback = callback;
   15f1e:	60e1      	str	r1, [r4, #12]
		vq->notify = notify;
   15f20:	9905      	ldr	r1, [sp, #20]
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   15f22:	1c96      	adds	r6, r2, #2
   15f24:	6121      	str	r1, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   15f26:	e9d3 1500 	ldrd	r1, r5, [r3]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   15f2a:	eb01 1302 	add.w	r3, r1, r2, lsl #4
   15f2e:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   15f30:	eb03 0346 	add.w	r3, r3, r6, lsl #1
	      align - 1) & ~(align - 1));
   15f34:	1c6e      	adds	r6, r5, #1
   15f36:	4433      	add	r3, r6
   15f38:	426d      	negs	r5, r5
   15f3a:	402b      	ands	r3, r5
	vr->used = (struct vring_used *)
   15f3c:	6223      	str	r3, [r4, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_SLAVE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   15f3e:	6983      	ldr	r3, [r0, #24]
	vr->desc = (struct vring_desc *)p;
   15f40:	e9c4 2105 	strd	r2, r1, [r4, #20]
		vq->vq_nentries = ring->num_descs;
   15f44:	8162      	strh	r2, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   15f46:	84a2      	strh	r2, [r4, #36]	; 0x24
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   15f48:	b96b      	cbnz	r3, 15f66 <virtqueue_create+0x56>
		int i;

		for (i = 0; i < size - 1; i++)
   15f4a:	3a01      	subs	r2, #1
   15f4c:	4293      	cmp	r3, r2
   15f4e:	eb01 1003 	add.w	r0, r1, r3, lsl #4
   15f52:	db0a      	blt.n	15f6a <virtqueue_create+0x5a>
			vr->desc[i].next = i + 1;
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   15f54:	2300      	movs	r3, #0
   15f56:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   15f5a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   15f5e:	7393      	strb	r3, [r2, #14]
   15f60:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   15f64:	73d3      	strb	r3, [r2, #15]
}
   15f66:	2000      	movs	r0, #0
   15f68:	bd70      	pop	{r4, r5, r6, pc}
			vr->desc[i].next = i + 1;
   15f6a:	3301      	adds	r3, #1
   15f6c:	81c3      	strh	r3, [r0, #14]
		for (i = 0; i < size - 1; i++)
   15f6e:	e7ed      	b.n	15f4c <virtqueue_create+0x3c>

00015f70 <virtqueue_add_buffer>:
{
   15f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   15f74:	2700      	movs	r7, #0
		head_idx = vq->vq_desc_head_idx;
   15f76:	f8b0 b02c 	ldrh.w	fp, [r0, #44]	; 0x2c
{
   15f7a:	4604      	mov	r4, r0
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   15f7c:	465d      	mov	r5, fp
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   15f7e:	46ba      	mov	sl, r7
{
   15f80:	b085      	sub	sp, #20
	needed = readable + writable;
   15f82:	18d6      	adds	r6, r2, r3
{
   15f84:	4691      	mov	r9, r2
		dxp->cookie = cookie;
   15f86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   15f88:	eb00 03cb 	add.w	r3, r0, fp, lsl #3
   15f8c:	635a      	str	r2, [r3, #52]	; 0x34
		dxp->ndescs = needed;
   15f8e:	871e      	strh	r6, [r3, #56]	; 0x38
		if (i < needed - 1)
   15f90:	1e72      	subs	r2, r6, #1
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   15f92:	6983      	ldr	r3, [r0, #24]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   15f94:	f101 0804 	add.w	r8, r1, #4
		if (i < needed - 1)
   15f98:	9201      	str	r2, [sp, #4]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   15f9a:	42be      	cmp	r6, r7
   15f9c:	dc19      	bgt.n	15fd2 <virtqueue_add_buffer+0x62>
		vq->vq_free_cnt -= needed;
   15f9e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   15fa0:	8962      	ldrh	r2, [r4, #10]
		vq->vq_free_cnt -= needed;
   15fa2:	1b9e      	subs	r6, r3, r6
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   15fa4:	69e3      	ldr	r3, [r4, #28]
		vq->vq_desc_head_idx = idx;
   15fa6:	85a5      	strh	r5, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   15fa8:	84a6      	strh	r6, [r4, #36]	; 0x24
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   15faa:	1e51      	subs	r1, r2, #1
   15fac:	885a      	ldrh	r2, [r3, #2]
}
   15fae:	2000      	movs	r0, #0
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   15fb0:	400a      	ands	r2, r1
   15fb2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   15fb6:	f8a3 b004 	strh.w	fp, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
   15fba:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.avail->idx++;
   15fbe:	69e2      	ldr	r2, [r4, #28]
   15fc0:	8853      	ldrh	r3, [r2, #2]
   15fc2:	3301      	adds	r3, #1
   15fc4:	8053      	strh	r3, [r2, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   15fc6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   15fc8:	3301      	adds	r3, #1
   15fca:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   15fcc:	b005      	add	sp, #20
   15fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   15fd2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		dp = &desc[idx];
   15fd4:	012a      	lsls	r2, r5, #4
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   15fd6:	f858 1c04 	ldr.w	r1, [r8, #-4]
   15fda:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   15fde:	9302      	str	r3, [sp, #8]
   15fe0:	6803      	ldr	r3, [r0, #0]
   15fe2:	9203      	str	r2, [sp, #12]
   15fe4:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   15fe6:	6883      	ldr	r3, [r0, #8]
   15fe8:	f108 0808 	add.w	r8, r8, #8
   15fec:	4299      	cmp	r1, r3
   15fee:	bf28      	it	cs
   15ff0:	f04f 31ff 	movcs.w	r1, #4294967295
   15ff4:	f7ff ff71 	bl	15eda <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   15ff8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   15ffc:	5098      	str	r0, [r3, r2]
		dp->len = buf_list[i].len;
   15ffe:	f858 2c08 	ldr.w	r2, [r8, #-8]
			dp->flags |= VRING_DESC_F_NEXT;
   16002:	f885 a00d 	strb.w	sl, [r5, #13]
		dp->len = buf_list[i].len;
   16006:	60aa      	str	r2, [r5, #8]
		if (i < needed - 1)
   16008:	9a01      	ldr	r2, [sp, #4]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   1600a:	f8c5 a004 	str.w	sl, [r5, #4]
		if (i < needed - 1)
   1600e:	4297      	cmp	r7, r2
			dp->flags |= VRING_DESC_F_NEXT;
   16010:	bfb6      	itet	lt
   16012:	2201      	movlt	r2, #1
		dp->flags = 0;
   16014:	f885 a00c 	strbge.w	sl, [r5, #12]
			dp->flags |= VRING_DESC_F_NEXT;
   16018:	732a      	strblt	r2, [r5, #12]
		if (i >= readable)
   1601a:	45b9      	cmp	r9, r7
			dp->flags |= VRING_DESC_F_WRITE;
   1601c:	bfd8      	it	le
   1601e:	89aa      	ldrhle	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   16020:	f107 0701 	add.w	r7, r7, #1
			dp->flags |= VRING_DESC_F_WRITE;
   16024:	bfdc      	itt	le
   16026:	f042 0202 	orrle.w	r2, r2, #2
   1602a:	81aa      	strhle	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1602c:	89ed      	ldrh	r5, [r5, #14]
   1602e:	e7b4      	b.n	15f9a <virtqueue_add_buffer+0x2a>

00016030 <virtqueue_get_buffer>:
{
   16030:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   16032:	b350      	cbz	r0, 1608a <virtqueue_get_buffer+0x5a>
   16034:	6a05      	ldr	r5, [r0, #32]
   16036:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   16038:	886c      	ldrh	r4, [r5, #2]
   1603a:	429c      	cmp	r4, r3
   1603c:	d030      	beq.n	160a0 <virtqueue_get_buffer+0x70>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   1603e:	1c5c      	adds	r4, r3, #1
   16040:	85c4      	strh	r4, [r0, #46]	; 0x2e
   16042:	8944      	ldrh	r4, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
   16044:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   16048:	3c01      	subs	r4, #1
   1604a:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
   1604c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   16050:	686b      	ldr	r3, [r5, #4]
   16052:	b29e      	uxth	r6, r3
	if (len)
   16054:	b109      	cbz	r1, 1605a <virtqueue_get_buffer+0x2a>
		*len = uep->len;
   16056:	68ad      	ldr	r5, [r5, #8]
   16058:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
   1605a:	f8d0 c018 	ldr.w	ip, [r0, #24]
   1605e:	b29b      	uxth	r3, r3
   16060:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
   16064:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   16068:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
   1606a:	8c87      	ldrh	r7, [r0, #36]	; 0x24
   1606c:	442f      	add	r7, r5
	dxp->ndescs--;
   1606e:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
   16070:	8487      	strh	r7, [r0, #36]	; 0x24
	dxp->ndescs--;
   16072:	871d      	strh	r5, [r3, #56]	; 0x38
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   16074:	898d      	ldrh	r5, [r1, #12]
   16076:	076f      	lsls	r7, r5, #29
   16078:	d50e      	bpl.n	16098 <virtqueue_get_buffer+0x68>
	dp->next = vq->vq_desc_head_idx;
   1607a:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   1607c:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
   1607e:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
   16080:	8586      	strh	r6, [r0, #44]	; 0x2c
	cookie = vq->vq_descx[desc_idx].cookie;
   16082:	6b58      	ldr	r0, [r3, #52]	; 0x34
	vq->vq_descx[desc_idx].cookie = NULL;
   16084:	6359      	str	r1, [r3, #52]	; 0x34
	if (idx)
   16086:	b102      	cbz	r2, 1608a <virtqueue_get_buffer+0x5a>
		*idx = used_idx;
   16088:	8014      	strh	r4, [r2, #0]
}
   1608a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
   1608c:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
			dp = &vq->vq_ring.desc[dp->next];
   1608e:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
   16090:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
   16092:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
   16096:	871d      	strh	r5, [r3, #56]	; 0x38
		while (dp->flags & VRING_DESC_F_NEXT) {
   16098:	898d      	ldrh	r5, [r1, #12]
   1609a:	07ed      	lsls	r5, r5, #31
   1609c:	d4f6      	bmi.n	1608c <virtqueue_get_buffer+0x5c>
   1609e:	e7ec      	b.n	1607a <virtqueue_get_buffer+0x4a>
		return NULL;
   160a0:	2000      	movs	r0, #0
   160a2:	e7f2      	b.n	1608a <virtqueue_get_buffer+0x5a>

000160a4 <virtqueue_get_available_buffer>:
{
   160a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	atomic_thread_fence(memory_order_seq_cst);
   160a8:	f3bf 8f5b 	dmb	ish
{
   160ac:	4617      	mov	r7, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   160ae:	69c2      	ldr	r2, [r0, #28]
{
   160b0:	460e      	mov	r6, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   160b2:	8853      	ldrh	r3, [r2, #2]
   160b4:	8e01      	ldrh	r1, [r0, #48]	; 0x30
{
   160b6:	4605      	mov	r5, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   160b8:	428b      	cmp	r3, r1
   160ba:	d046      	beq.n	1614a <virtqueue_get_available_buffer+0xa6>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   160bc:	1c4b      	adds	r3, r1, #1
   160be:	8603      	strh	r3, [r0, #48]	; 0x30
   160c0:	8943      	ldrh	r3, [r0, #10]
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   160c2:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   160c6:	3b01      	subs	r3, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   160c8:	400b      	ands	r3, r1
   160ca:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   160ce:	889a      	ldrh	r2, [r3, #4]
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   160d0:	6983      	ldr	r3, [r0, #24]
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   160d2:	b291      	uxth	r1, r2
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   160d4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   160d8:	8032      	strh	r2, [r6, #0]
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   160da:	f8d3 9000 	ldr.w	r9, [r3]
	if (!io->ops.phys_to_offset) {
   160de:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
   160e2:	bb5b      	cbnz	r3, 1613c <virtqueue_get_available_buffer+0x98>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   160e4:	f8d8 4010 	ldr.w	r4, [r8, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   160e8:	1c62      	adds	r2, r4, #1
   160ea:	bf09      	itett	eq
   160ec:	f8d8 3004 	ldreq.w	r3, [r8, #4]
   160f0:	ea09 0404 	andne.w	r4, r9, r4
   160f4:	681c      	ldreq	r4, [r3, #0]
   160f6:	eba9 0404 	subeq.w	r4, r9, r4
			if (metal_io_phys(io, offset) == phys)
   160fa:	4621      	mov	r1, r4
   160fc:	4640      	mov	r0, r8
   160fe:	f7ff feec 	bl	15eda <metal_io_phys>
   16102:	4581      	cmp	r9, r0
   16104:	d009      	beq.n	1611a <virtqueue_get_available_buffer+0x76>
			offset += io->page_mask + 1;
   16106:	f8d8 3010 	ldr.w	r3, [r8, #16]
   1610a:	3301      	adds	r3, #1
   1610c:	441c      	add	r4, r3
		} while (offset < io->size);
   1610e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   16112:	429c      	cmp	r4, r3
   16114:	d3f1      	bcc.n	160fa <virtqueue_get_available_buffer+0x56>
		return METAL_BAD_OFFSET;
   16116:	f04f 34ff 	mov.w	r4, #4294967295
	return (io->virt != METAL_BAD_VA && offset < io->size
   1611a:	f8d8 0000 	ldr.w	r0, [r8]
		: NULL);
   1611e:	1c43      	adds	r3, r0, #1
   16120:	d011      	beq.n	16146 <virtqueue_get_available_buffer+0xa2>
	return (io->virt != METAL_BAD_VA && offset < io->size
   16122:	f8d8 3008 	ldr.w	r3, [r8, #8]
   16126:	42a3      	cmp	r3, r4
   16128:	d90d      	bls.n	16146 <virtqueue_get_available_buffer+0xa2>
		: NULL);
   1612a:	4420      	add	r0, r4
	*len = vq->vq_ring.desc[*avail_idx].len;
   1612c:	8832      	ldrh	r2, [r6, #0]
   1612e:	69ab      	ldr	r3, [r5, #24]
   16130:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   16134:	689b      	ldr	r3, [r3, #8]
   16136:	603b      	str	r3, [r7, #0]
}
   16138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (*io->ops.phys_to_offset)(io, phys);
   1613c:	4649      	mov	r1, r9
   1613e:	4640      	mov	r0, r8
   16140:	4798      	blx	r3
   16142:	4604      	mov	r4, r0
   16144:	e7e9      	b.n	1611a <virtqueue_get_available_buffer+0x76>
		: NULL);
   16146:	2000      	movs	r0, #0
   16148:	e7f0      	b.n	1612c <virtqueue_get_available_buffer+0x88>
		return NULL;
   1614a:	2000      	movs	r0, #0
   1614c:	e7f4      	b.n	16138 <virtqueue_get_available_buffer+0x94>

0001614e <virtqueue_disable_cb>:
{
   1614e:	b530      	push	{r4, r5, lr}
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   16150:	2500      	movs	r5, #0
   16152:	6802      	ldr	r2, [r0, #0]
   16154:	6993      	ldr	r3, [r2, #24]
   16156:	6912      	ldr	r2, [r2, #16]
   16158:	f002 5400 	and.w	r4, r2, #536870912	; 0x20000000
   1615c:	ea54 0205 	orrs.w	r2, r4, r5
   16160:	d014      	beq.n	1618c <virtqueue_disable_cb+0x3e>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   16162:	b94b      	cbnz	r3, 16178 <virtqueue_disable_cb+0x2a>
			vring_used_event(&vq->vq_ring) =
   16164:	69c2      	ldr	r2, [r0, #28]
   16166:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   16168:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   1616a:	8940      	ldrh	r0, [r0, #10]
			vring_used_event(&vq->vq_ring) =
   1616c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   16170:	1a1b      	subs	r3, r3, r0
			vring_avail_event(&vq->vq_ring) =
   16172:	3b01      	subs	r3, #1
   16174:	8093      	strh	r3, [r2, #4]
}
   16176:	bd30      	pop	{r4, r5, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
   16178:	2b01      	cmp	r3, #1
   1617a:	d1fc      	bne.n	16176 <virtqueue_disable_cb+0x28>
			vring_avail_event(&vq->vq_ring) =
   1617c:	6a02      	ldr	r2, [r0, #32]
   1617e:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   16180:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   16182:	8940      	ldrh	r0, [r0, #10]
			vring_avail_event(&vq->vq_ring) =
   16184:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
			    vq->vq_available_idx - vq->vq_nentries - 1;
   16188:	1a1b      	subs	r3, r3, r0
   1618a:	e7f2      	b.n	16172 <virtqueue_disable_cb+0x24>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
   1618c:	b92b      	cbnz	r3, 1619a <virtqueue_disable_cb+0x4c>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   1618e:	69c2      	ldr	r2, [r0, #28]
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   16190:	8813      	ldrh	r3, [r2, #0]
   16192:	f043 0301 	orr.w	r3, r3, #1
   16196:	8013      	strh	r3, [r2, #0]
}
   16198:	e7ed      	b.n	16176 <virtqueue_disable_cb+0x28>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
   1619a:	2b01      	cmp	r3, #1
   1619c:	d1eb      	bne.n	16176 <virtqueue_disable_cb+0x28>
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   1619e:	6a02      	ldr	r2, [r0, #32]
   161a0:	e7f6      	b.n	16190 <virtqueue_disable_cb+0x42>

000161a2 <virtqueue_kick>:
{
   161a2:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
   161a4:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   161a8:	2300      	movs	r3, #0
   161aa:	6801      	ldr	r1, [r0, #0]
{
   161ac:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   161ae:	6908      	ldr	r0, [r1, #16]
   161b0:	f000 5200 	and.w	r2, r0, #536870912	; 0x20000000
   161b4:	4313      	orrs	r3, r2
   161b6:	698b      	ldr	r3, [r1, #24]
   161b8:	d020      	beq.n	161fc <virtqueue_kick+0x5a>
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   161ba:	b9b3      	cbnz	r3, 161ea <virtqueue_kick+0x48>
			new_idx = vq->vq_ring.avail->idx;
   161bc:	69e3      	ldr	r3, [r4, #28]
			prev_idx = new_idx - vq->vq_queued_cnt;
			event_idx = vring_avail_event(&vq->vq_ring);
   161be:	6961      	ldr	r1, [r4, #20]
			new_idx = vq->vq_ring.avail->idx;
   161c0:	885a      	ldrh	r2, [r3, #2]
			event_idx = vring_avail_event(&vq->vq_ring);
   161c2:	6a23      	ldr	r3, [r4, #32]
   161c4:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			event_idx = vring_used_event(&vq->vq_ring);
   161c8:	889b      	ldrh	r3, [r3, #4]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   161ca:	1ad2      	subs	r2, r2, r3
   161cc:	3a01      	subs	r2, #1
   161ce:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   161d0:	b292      	uxth	r2, r2
   161d2:	4293      	cmp	r3, r2
   161d4:	bf94      	ite	ls
   161d6:	2300      	movls	r3, #0
   161d8:	2301      	movhi	r3, #1
	if (vq_ring_must_notify(vq))
   161da:	b11b      	cbz	r3, 161e4 <virtqueue_kick+0x42>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
   161dc:	6923      	ldr	r3, [r4, #16]
   161de:	b10b      	cbz	r3, 161e4 <virtqueue_kick+0x42>
		vq->notify(vq);
   161e0:	4620      	mov	r0, r4
   161e2:	4798      	blx	r3
	vq->vq_queued_cnt = 0;
   161e4:	2300      	movs	r3, #0
   161e6:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   161e8:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
   161ea:	2b01      	cmp	r3, #1
   161ec:	d1fa      	bne.n	161e4 <virtqueue_kick+0x42>
			new_idx = vq->vq_ring.used->idx;
   161ee:	6a23      	ldr	r3, [r4, #32]
			event_idx = vring_used_event(&vq->vq_ring);
   161f0:	6961      	ldr	r1, [r4, #20]
			new_idx = vq->vq_ring.used->idx;
   161f2:	885a      	ldrh	r2, [r3, #2]
			event_idx = vring_used_event(&vq->vq_ring);
   161f4:	69e3      	ldr	r3, [r4, #28]
   161f6:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   161fa:	e7e5      	b.n	161c8 <virtqueue_kick+0x26>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
   161fc:	b92b      	cbnz	r3, 1620a <virtqueue_kick+0x68>
			return (vq->vq_ring.used->flags &
   161fe:	6a23      	ldr	r3, [r4, #32]
			return (vq->vq_ring.avail->flags &
   16200:	881b      	ldrh	r3, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   16202:	43db      	mvns	r3, r3
   16204:	f003 0301 	and.w	r3, r3, #1
   16208:	e7e7      	b.n	161da <virtqueue_kick+0x38>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
   1620a:	2b01      	cmp	r3, #1
   1620c:	d1ea      	bne.n	161e4 <virtqueue_kick+0x42>
			return (vq->vq_ring.avail->flags &
   1620e:	69e3      	ldr	r3, [r4, #28]
   16210:	e7f6      	b.n	16200 <virtqueue_kick+0x5e>

00016212 <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   16212:	69c2      	ldr	r2, [r0, #28]
   16214:	8e01      	ldrh	r1, [r0, #48]	; 0x30
   16216:	8853      	ldrh	r3, [r2, #2]
   16218:	428b      	cmp	r3, r1
   1621a:	d00a      	beq.n	16232 <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
   1621c:	8943      	ldrh	r3, [r0, #10]
   1621e:	3b01      	subs	r3, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
   16220:	400b      	ands	r3, r1
   16222:	eb02 0343 	add.w	r3, r2, r3, lsl #1
	len = vq->vq_ring.desc[avail_idx].len;
   16226:	889a      	ldrh	r2, [r3, #4]
   16228:	6983      	ldr	r3, [r0, #24]
   1622a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1622e:	6898      	ldr	r0, [r3, #8]
	return len;
   16230:	4770      	bx	lr
		return 0;
   16232:	2000      	movs	r0, #0
}
   16234:	4770      	bx	lr

00016236 <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
   16236:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   1623a:	68c3      	ldr	r3, [r0, #12]
   1623c:	b103      	cbz	r3, 16240 <virtqueue_notification+0xa>
		vq->callback(vq);
   1623e:	4718      	bx	r3
}
   16240:	4770      	bx	lr

00016242 <rpmsg_unregister_endpoint>:
{
   16242:	b510      	push	{r4, lr}
	if (!ept)
   16244:	b1d0      	cbz	r0, 1627c <rpmsg_unregister_endpoint+0x3a>
	if (ept->addr != RPMSG_ADDR_ANY)
   16246:	6a43      	ldr	r3, [r0, #36]	; 0x24
   16248:	1c5a      	adds	r2, r3, #1
   1624a:	d00f      	beq.n	1626c <rpmsg_unregister_endpoint+0x2a>
	if (addr < size)
   1624c:	2b7f      	cmp	r3, #127	; 0x7f
   1624e:	dc0d      	bgt.n	1626c <rpmsg_unregister_endpoint+0x2a>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   16250:	2101      	movs	r1, #1
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   16252:	6a02      	ldr	r2, [r0, #32]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   16254:	095c      	lsrs	r4, r3, #5
   16256:	3248      	adds	r2, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   16258:	f003 031f 	and.w	r3, r3, #31
   1625c:	fa01 f303 	lsl.w	r3, r1, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   16260:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
   16264:	ea21 0103 	bic.w	r1, r1, r3
   16268:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
	metal_list_del(&ept->node);
   1626c:	f100 0334 	add.w	r3, r0, #52	; 0x34
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   16270:	e9d0 120d 	ldrd	r1, r2, [r0, #52]	; 0x34
   16274:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   16276:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
   16278:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
}
   1627c:	bd10      	pop	{r4, pc}

0001627e <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   1627e:	f04f 32ff 	mov.w	r2, #4294967295
   16282:	f04f 33ff 	mov.w	r3, #4294967295
   16286:	f7fa bc1f 	b.w	10ac8 <z_impl_k_sem_take>

0001628a <rpmsg_send_ns_message>:
{
   1628a:	b510      	push	{r4, lr}
	ns_msg.addr = ept->addr;
   1628c:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
   1628e:	b08c      	sub	sp, #48	; 0x30
   16290:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   16292:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   16294:	2220      	movs	r2, #32
   16296:	4601      	mov	r1, r0
   16298:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
   1629a:	930a      	str	r3, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   1629c:	f7fd f923 	bl	134e6 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   162a0:	2328      	movs	r3, #40	; 0x28
   162a2:	2201      	movs	r2, #1
   162a4:	4620      	mov	r0, r4
   162a6:	e9cd 3200 	strd	r3, r2, [sp]
   162aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
   162ac:	2235      	movs	r2, #53	; 0x35
   162ae:	ab02      	add	r3, sp, #8
   162b0:	f7f8 f96e 	bl	e590 <rpmsg_send_offchannel_raw>
}
   162b4:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   162b8:	b00c      	add	sp, #48	; 0x30
   162ba:	bd10      	pop	{r4, pc}

000162bc <rpmsg_get_endpoint>:
{
   162bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   162c0:	4680      	mov	r8, r0
   162c2:	4689      	mov	r9, r1
   162c4:	4615      	mov	r5, r2
   162c6:	461e      	mov	r6, r3
	metal_list_for_each(&rdev->endpoints, node) {
   162c8:	6807      	ldr	r7, [r0, #0]
   162ca:	45b8      	cmp	r8, r7
   162cc:	d101      	bne.n	162d2 <rpmsg_get_endpoint+0x16>
	return NULL;
   162ce:	2400      	movs	r4, #0
   162d0:	e021      	b.n	16316 <rpmsg_get_endpoint+0x5a>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   162d2:	1c69      	adds	r1, r5, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   162d4:	f1a7 0434 	sub.w	r4, r7, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   162d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   162da:	d006      	beq.n	162ea <rpmsg_get_endpoint+0x2e>
   162dc:	429d      	cmp	r5, r3
		if (addr == ept->addr && dest_addr == ept->dest_addr)
   162de:	d01a      	beq.n	16316 <rpmsg_get_endpoint+0x5a>
		if (name)
   162e0:	f1b9 0f00 	cmp.w	r9, #0
   162e4:	d106      	bne.n	162f4 <rpmsg_get_endpoint+0x38>
	metal_list_for_each(&rdev->endpoints, node) {
   162e6:	683f      	ldr	r7, [r7, #0]
   162e8:	e7ef      	b.n	162ca <rpmsg_get_endpoint+0xe>
		if (addr == ept->addr && dest_addr == ept->dest_addr)
   162ea:	3301      	adds	r3, #1
   162ec:	d1f8      	bne.n	162e0 <rpmsg_get_endpoint+0x24>
   162ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   162f0:	42b3      	cmp	r3, r6
   162f2:	e7f4      	b.n	162de <rpmsg_get_endpoint+0x22>
			name_match = !strncmp(ept->name, name,
   162f4:	2220      	movs	r2, #32
   162f6:	4649      	mov	r1, r9
   162f8:	4620      	mov	r0, r4
   162fa:	f7fd f91a 	bl	13532 <strncmp>
		if (!name || !name_match)
   162fe:	2800      	cmp	r0, #0
   16300:	d1f1      	bne.n	162e6 <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   16302:	1c72      	adds	r2, r6, #1
   16304:	d002      	beq.n	1630c <rpmsg_get_endpoint+0x50>
   16306:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   16308:	42b3      	cmp	r3, r6
   1630a:	d004      	beq.n	16316 <rpmsg_get_endpoint+0x5a>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   1630c:	1c6b      	adds	r3, r5, #1
   1630e:	d1ea      	bne.n	162e6 <rpmsg_get_endpoint+0x2a>
   16310:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   16312:	3301      	adds	r3, #1
   16314:	d1e7      	bne.n	162e6 <rpmsg_get_endpoint+0x2a>
}
   16316:	4620      	mov	r0, r4
   16318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001631c <rpmsg_register_endpoint>:
	new_node->prev = node->prev;
   1631c:	6842      	ldr	r2, [r0, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   1631e:	f101 0334 	add.w	r3, r1, #52	; 0x34
	new_node->next = node;
   16322:	e9c1 020d 	strd	r0, r2, [r1, #52]	; 0x34
	ept->rdev = rdev;
   16326:	6208      	str	r0, [r1, #32]
	new_node->next->prev = new_node;
   16328:	6043      	str	r3, [r0, #4]
	new_node->prev->next = new_node;
   1632a:	6b8a      	ldr	r2, [r1, #56]	; 0x38
   1632c:	6013      	str	r3, [r2, #0]
}
   1632e:	4770      	bx	lr

00016330 <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
   16330:	b538      	push	{r3, r4, r5, lr}
	struct rpmsg_device *rdev;

	if (!ept)
   16332:	4604      	mov	r4, r0
   16334:	b1b8      	cbz	r0, 16366 <rpmsg_destroy_ept+0x36>
		return;

	rdev = ept->rdev;
	if (ept->name[0] && rdev->support_ns && ept->addr != RPMSG_NS_EPT_ADDR)
   16336:	7803      	ldrb	r3, [r0, #0]
	rdev = ept->rdev;
   16338:	6a05      	ldr	r5, [r0, #32]
	if (ept->name[0] && rdev->support_ns && ept->addr != RPMSG_NS_EPT_ADDR)
   1633a:	b143      	cbz	r3, 1634e <rpmsg_destroy_ept+0x1e>
   1633c:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
   16340:	b12b      	cbz	r3, 1634e <rpmsg_destroy_ept+0x1e>
   16342:	6a43      	ldr	r3, [r0, #36]	; 0x24
   16344:	2b35      	cmp	r3, #53	; 0x35
   16346:	d002      	beq.n	1634e <rpmsg_destroy_ept+0x1e>
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   16348:	2101      	movs	r1, #1
   1634a:	f7ff ff9e 	bl	1628a <rpmsg_send_ns_message>
	metal_mutex_acquire(&rdev->lock);
   1634e:	3558      	adds	r5, #88	; 0x58
   16350:	4628      	mov	r0, r5
   16352:	f7ff ff94 	bl	1627e <__metal_mutex_acquire>
	rpmsg_unregister_endpoint(ept);
   16356:	4620      	mov	r0, r4
   16358:	f7ff ff73 	bl	16242 <rpmsg_unregister_endpoint>
	z_impl_k_sem_give(sem);
   1635c:	4628      	mov	r0, r5
	metal_mutex_release(&rdev->lock);
}
   1635e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   16362:	f7fa bb6d 	b.w	10a40 <z_impl_k_sem_give>
   16366:	bd38      	pop	{r3, r4, r5, pc}

00016368 <rpmsg_virtio_tx_callback>:
}
   16368:	4770      	bx	lr

0001636a <k_sem_give>:
   1636a:	f7fa bb69 	b.w	10a40 <z_impl_k_sem_give>

0001636e <rpmsg_virtio_get_rx_buffer>:
{
   1636e:	b430      	push	{r4, r5}
	return rvdev->vdev->role;
   16370:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
   16372:	4613      	mov	r3, r2
   16374:	69ad      	ldr	r5, [r5, #24]
	if (role == RPMSG_MASTER) {
   16376:	b925      	cbnz	r5, 16382 <rpmsg_virtio_get_rx_buffer+0x14>
}
   16378:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   1637a:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   1637e:	f7ff be57 	b.w	16030 <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
   16382:	2d01      	cmp	r5, #1
   16384:	d106      	bne.n	16394 <rpmsg_virtio_get_rx_buffer+0x26>
}
   16386:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   16388:	460a      	mov	r2, r1
   1638a:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   1638e:	4619      	mov	r1, r3
   16390:	f7ff be88 	b.w	160a4 <virtqueue_get_available_buffer>
}
   16394:	2000      	movs	r0, #0
   16396:	bc30      	pop	{r4, r5}
   16398:	4770      	bx	lr

0001639a <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   1639a:	f04f 32ff 	mov.w	r2, #4294967295
   1639e:	f04f 33ff 	mov.w	r3, #4294967295
   163a2:	f7fa bb91 	b.w	10ac8 <z_impl_k_sem_take>

000163a6 <rpmsg_virtio_ns_callback>:
{
   163a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (len != sizeof(*ns_msg))
   163aa:	2a28      	cmp	r2, #40	; 0x28
{
   163ac:	4680      	mov	r8, r0
   163ae:	460e      	mov	r6, r1
   163b0:	b089      	sub	sp, #36	; 0x24
	if (len != sizeof(*ns_msg))
   163b2:	d12b      	bne.n	1640c <rpmsg_virtio_ns_callback+0x66>
	struct rpmsg_device *rdev = ept->rdev;
   163b4:	6a05      	ldr	r5, [r0, #32]
	metal_io_block_read(io,
   163b6:	2320      	movs	r3, #32
	struct metal_io_region *io = rvdev->shbuf_io;
   163b8:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
	metal_io_block_read(io,
   163bc:	466a      	mov	r2, sp
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   163be:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   163c0:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   163c2:	1a71      	subs	r1, r6, r1
   163c4:	42a1      	cmp	r1, r4
   163c6:	bf28      	it	cs
   163c8:	f04f 31ff 	movcs.w	r1, #4294967295
   163cc:	f7ff fcd2 	bl	15d74 <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
   163d0:	f105 0758 	add.w	r7, r5, #88	; 0x58
	dest = ns_msg->addr;
   163d4:	f8d6 9020 	ldr.w	r9, [r6, #32]
   163d8:	4638      	mov	r0, r7
   163da:	f7ff ffde 	bl	1639a <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   163de:	464b      	mov	r3, r9
   163e0:	f04f 32ff 	mov.w	r2, #4294967295
   163e4:	4669      	mov	r1, sp
   163e6:	4628      	mov	r0, r5
   163e8:	f7ff ff68 	bl	162bc <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   163ec:	6a73      	ldr	r3, [r6, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   163ee:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   163f0:	07db      	lsls	r3, r3, #31
   163f2:	d50f      	bpl.n	16414 <rpmsg_virtio_ns_callback+0x6e>
		if (_ept)
   163f4:	b110      	cbz	r0, 163fc <rpmsg_virtio_ns_callback+0x56>
			_ept->dest_addr = RPMSG_ADDR_ANY;
   163f6:	f04f 33ff 	mov.w	r3, #4294967295
   163fa:	6283      	str	r3, [r0, #40]	; 0x28
   163fc:	4638      	mov	r0, r7
   163fe:	f7ff ffb4 	bl	1636a <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   16402:	b11c      	cbz	r4, 1640c <rpmsg_virtio_ns_callback+0x66>
   16404:	6b23      	ldr	r3, [r4, #48]	; 0x30
   16406:	b10b      	cbz	r3, 1640c <rpmsg_virtio_ns_callback+0x66>
			_ept->ns_unbind_cb(ept);
   16408:	4640      	mov	r0, r8
   1640a:	4798      	blx	r3
}
   1640c:	2000      	movs	r0, #0
   1640e:	b009      	add	sp, #36	; 0x24
   16410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!_ept) {
   16414:	b950      	cbnz	r0, 1642c <rpmsg_virtio_ns_callback+0x86>
   16416:	4638      	mov	r0, r7
   16418:	f7ff ffa7 	bl	1636a <k_sem_give>
			if (rdev->ns_bind_cb)
   1641c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   1641e:	2b00      	cmp	r3, #0
   16420:	d0f4      	beq.n	1640c <rpmsg_virtio_ns_callback+0x66>
				rdev->ns_bind_cb(rdev, name, dest);
   16422:	464a      	mov	r2, r9
   16424:	4669      	mov	r1, sp
   16426:	4628      	mov	r0, r5
   16428:	4798      	blx	r3
   1642a:	e7ef      	b.n	1640c <rpmsg_virtio_ns_callback+0x66>
			_ept->dest_addr = dest;
   1642c:	f8c0 9028 	str.w	r9, [r0, #40]	; 0x28
   16430:	4638      	mov	r0, r7
   16432:	f7ff ff9a 	bl	1636a <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   16436:	e7e9      	b.n	1640c <rpmsg_virtio_ns_callback+0x66>

00016438 <rpmsg_virtio_rx_callback>:
{
   16438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   1643c:	6803      	ldr	r3, [r0, #0]
{
   1643e:	b086      	sub	sp, #24
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   16440:	6a5e      	ldr	r6, [r3, #36]	; 0x24
	metal_mutex_acquire(&rdev->lock);
   16442:	f106 0758 	add.w	r7, r6, #88	; 0x58
	__metal_mutex_acquire(mutex);
   16446:	4638      	mov	r0, r7
   16448:	f7ff ffa7 	bl	1639a <__metal_mutex_acquire>
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   1644c:	4630      	mov	r0, r6
   1644e:	f10d 020a 	add.w	r2, sp, #10
   16452:	a903      	add	r1, sp, #12
   16454:	f7ff ff8b 	bl	1636e <rpmsg_virtio_get_rx_buffer>
   16458:	4604      	mov	r4, r0
   1645a:	4638      	mov	r0, r7
   1645c:	f7ff ff85 	bl	1636a <k_sem_give>
	while (rp_hdr) {
   16460:	b914      	cbnz	r4, 16468 <rpmsg_virtio_rx_callback+0x30>
}
   16462:	b006      	add	sp, #24
   16464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16468:	4638      	mov	r0, r7
   1646a:	f7ff ff96 	bl	1639a <__metal_mutex_acquire>
			     struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   1646e:	f04f 33ff 	mov.w	r3, #4294967295
   16472:	2100      	movs	r1, #0
   16474:	4630      	mov	r0, r6
   16476:	6862      	ldr	r2, [r4, #4]
   16478:	f7ff ff20 	bl	162bc <rpmsg_get_endpoint>
   1647c:	4605      	mov	r5, r0
   1647e:	4638      	mov	r0, r7
   16480:	f7ff ff73 	bl	1636a <k_sem_give>
		if (ept) {
   16484:	b185      	cbz	r5, 164a8 <rpmsg_virtio_rx_callback+0x70>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   16486:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   16488:	6823      	ldr	r3, [r4, #0]
   1648a:	3201      	adds	r2, #1
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1648c:	6be9      	ldr	r1, [r5, #60]	; 0x3c
				ept->dest_addr = rp_hdr->src;
   1648e:	bf08      	it	eq
   16490:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   16492:	89a2      	ldrh	r2, [r4, #12]
   16494:	9100      	str	r1, [sp, #0]
   16496:	4628      	mov	r0, r5
   16498:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
   1649c:	f104 0110 	add.w	r1, r4, #16
   164a0:	47c0      	blx	r8
			RPMSG_ASSERT(status >= 0,
   164a2:	2800      	cmp	r0, #0
   164a4:	da00      	bge.n	164a8 <rpmsg_virtio_rx_callback+0x70>
   164a6:	e7fe      	b.n	164a6 <rpmsg_virtio_rx_callback+0x6e>
   164a8:	4638      	mov	r0, r7
   164aa:	f7ff ff76 	bl	1639a <__metal_mutex_acquire>
   164ae:	6ff2      	ldr	r2, [r6, #124]	; 0x7c
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   164b0:	9b03      	ldr	r3, [sp, #12]
   164b2:	6992      	ldr	r2, [r2, #24]
	if (role == RPMSG_MASTER) {
   164b4:	b9b2      	cbnz	r2, 164e4 <rpmsg_virtio_rx_callback+0xac>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   164b6:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
   164b8:	e9cd 4304 	strd	r4, r3, [sp, #16]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   164bc:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   164c0:	2301      	movs	r3, #1
   164c2:	a904      	add	r1, sp, #16
   164c4:	f7ff fd54 	bl	15f70 <virtqueue_add_buffer>
		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   164c8:	4630      	mov	r0, r6
   164ca:	f10d 020a 	add.w	r2, sp, #10
   164ce:	a903      	add	r1, sp, #12
   164d0:	f7ff ff4d 	bl	1636e <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   164d4:	4604      	mov	r4, r0
   164d6:	2800      	cmp	r0, #0
   164d8:	d1bf      	bne.n	1645a <rpmsg_virtio_rx_callback+0x22>
			virtqueue_kick(rvdev->rvq);
   164da:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   164de:	f7ff fe60 	bl	161a2 <virtqueue_kick>
   164e2:	e7ba      	b.n	1645a <rpmsg_virtio_rx_callback+0x22>
	if (role == RPMSG_REMOTE) {
   164e4:	2a01      	cmp	r2, #1
   164e6:	d1ef      	bne.n	164c8 <rpmsg_virtio_rx_callback+0x90>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   164e8:	461a      	mov	r2, r3
   164ea:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   164ee:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   164f2:	f7f8 f831 	bl	e558 <virtqueue_add_consumed_buffer>
   164f6:	e7e7      	b.n	164c8 <rpmsg_virtio_rx_callback+0x90>

000164f8 <rpmsg_virtio_shm_pool_get_buffer>:
{
   164f8:	4603      	mov	r3, r0
	if (shpool->avail < size)
   164fa:	6842      	ldr	r2, [r0, #4]
{
   164fc:	b510      	push	{r4, lr}
	if (shpool->avail < size)
   164fe:	428a      	cmp	r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   16500:	bf29      	itett	cs
   16502:	6880      	ldrcs	r0, [r0, #8]
		return NULL;
   16504:	2000      	movcc	r0, #0
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   16506:	1a84      	subcs	r4, r0, r2
   16508:	6818      	ldrcs	r0, [r3, #0]
	shpool->avail -= size;
   1650a:	bf22      	ittt	cs
   1650c:	1a52      	subcs	r2, r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1650e:	1900      	addcs	r0, r0, r4
	shpool->avail -= size;
   16510:	605a      	strcs	r2, [r3, #4]
}
   16512:	bd10      	pop	{r4, pc}

00016514 <rpmsg_virtio_init_shm_pool>:
	if (!shpool)
   16514:	b110      	cbz	r0, 1651c <rpmsg_virtio_init_shm_pool+0x8>
	shpool->avail = size;
   16516:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
   1651a:	6001      	str	r1, [r0, #0]
}
   1651c:	4770      	bx	lr

0001651e <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   1651e:	f7fc b9fc 	b.w	1291a <z_clock_idle_exit>

00016522 <k_heap_init>:
{
   16522:	b410      	push	{r4}
   16524:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   16528:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1652c:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1652e:	f7fb bf5d 	b.w	123ec <sys_heap_init>

00016532 <k_mem_pool_alloc>:
 * backend.
 */

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, k_timeout_t timeout)
{
   16532:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16534:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   16538:	4614      	mov	r4, r2
	block->id.heap = p->heap;
   1653a:	6800      	ldr	r0, [r0, #0]
{
   1653c:	460d      	mov	r5, r1
	block->id.heap = p->heap;
   1653e:	6048      	str	r0, [r1, #4]
	block->data = k_heap_alloc(p->heap, size, timeout);
   16540:	4632      	mov	r2, r6
   16542:	463b      	mov	r3, r7
   16544:	4621      	mov	r1, r4
   16546:	f7f8 fc03 	bl	ed50 <k_heap_alloc>
   1654a:	6028      	str	r0, [r5, #0]

	/* The legacy API returns -EAGAIN on timeout expiration, but
	 * -ENOMEM if the timeout was K_NO_WAIT. Don't ask.
	 */
	if (size != 0 && block->data == NULL) {
   1654c:	b144      	cbz	r4, 16560 <k_mem_pool_alloc+0x2e>
   1654e:	b938      	cbnz	r0, 16560 <k_mem_pool_alloc+0x2e>
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
   16550:	ea56 0307 	orrs.w	r3, r6, r7
   16554:	bf0c      	ite	eq
   16556:	f06f 000b 	mvneq.w	r0, #11
   1655a:	f06f 000a 	mvnne.w	r0, #10
	} else {
		return 0;
	}
}
   1655e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   16560:	2000      	movs	r0, #0
   16562:	e7fc      	b.n	1655e <k_mem_pool_alloc+0x2c>

00016564 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
	k_heap_free(id->heap, id->data);
   16564:	e9d0 1000 	ldrd	r1, r0, [r0]
   16568:	f7f8 bca0 	b.w	eeac <k_heap_free>

0001656c <k_mem_pool_malloc>:
{
   1656c:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1656e:	2408      	movs	r4, #8
   16570:	190a      	adds	r2, r1, r4
   16572:	d208      	bcs.n	16586 <k_mem_pool_malloc+0x1a>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   16574:	2600      	movs	r6, #0
   16576:	2700      	movs	r7, #0
   16578:	eb0d 0104 	add.w	r1, sp, r4
   1657c:	e9cd 6700 	strd	r6, r7, [sp]
   16580:	f7ff ffd7 	bl	16532 <k_mem_pool_alloc>
   16584:	b110      	cbz	r0, 1658c <k_mem_pool_malloc+0x20>
		return NULL;
   16586:	2000      	movs	r0, #0
}
   16588:	b004      	add	sp, #16
   1658a:	bdd0      	pop	{r4, r6, r7, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   1658c:	4622      	mov	r2, r4
   1658e:	9802      	ldr	r0, [sp, #8]
   16590:	a902      	add	r1, sp, #8
   16592:	f7fc ffed 	bl	13570 <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   16596:	9802      	ldr	r0, [sp, #8]
   16598:	3008      	adds	r0, #8
   1659a:	e7f5      	b.n	16588 <k_mem_pool_malloc+0x1c>

0001659c <k_free>:
	if (ptr != NULL) {
   1659c:	b110      	cbz	r0, 165a4 <k_free+0x8>
		k_mem_pool_free_id(ptr);
   1659e:	3808      	subs	r0, #8
   165a0:	f7ff bfe0 	b.w	16564 <k_mem_pool_free_id>
}
   165a4:	4770      	bx	lr

000165a6 <z_impl_k_mutex_init>:
{
   165a6:	4603      	mov	r3, r0
	mutex->owner = NULL;
   165a8:	2000      	movs	r0, #0
   165aa:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   165ae:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   165b2:	4770      	bx	lr

000165b4 <z_queue_node_peek>:
{
   165b4:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   165b6:	4604      	mov	r4, r0
   165b8:	b130      	cbz	r0, 165c8 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   165ba:	6802      	ldr	r2, [r0, #0]
   165bc:	0793      	lsls	r3, r2, #30
   165be:	d003      	beq.n	165c8 <z_queue_node_peek+0x14>
		ret = anode->data;
   165c0:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   165c2:	b109      	cbz	r1, 165c8 <z_queue_node_peek+0x14>
			k_free(anode);
   165c4:	f7ff ffea 	bl	1659c <k_free>
}
   165c8:	4620      	mov	r0, r4
   165ca:	bd10      	pop	{r4, pc}

000165cc <z_impl_k_queue_init>:
	list->head = NULL;
   165cc:	2300      	movs	r3, #0
	list->tail = NULL;
   165ce:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   165d2:	6083      	str	r3, [r0, #8]
   165d4:	f100 030c 	add.w	r3, r0, #12
   165d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   165dc:	f100 0314 	add.w	r3, r0, #20
   165e0:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   165e4:	4770      	bx	lr

000165e6 <k_queue_append>:
{
   165e6:	460a      	mov	r2, r1
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   165e8:	2300      	movs	r3, #0
   165ea:	6841      	ldr	r1, [r0, #4]
   165ec:	f7f8 bf72 	b.w	f4d4 <queue_insert>

000165f0 <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false);
   165f0:	2300      	movs	r3, #0
{
   165f2:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false);
   165f4:	4619      	mov	r1, r3
   165f6:	f7f8 bf6d 	b.w	f4d4 <queue_insert>

000165fa <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   165fa:	f990 000e 	ldrsb.w	r0, [r0, #14]
   165fe:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   16602:	4298      	cmp	r0, r3
   16604:	bfac      	ite	ge
   16606:	2000      	movge	r0, #0
   16608:	2001      	movlt	r0, #1
   1660a:	4770      	bx	lr

0001660c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1660c:	4603      	mov	r3, r0
   1660e:	b920      	cbnz	r0, 1661a <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   16610:	f3ef 8205 	mrs	r2, IPSR
   16614:	b90a      	cbnz	r2, 1661a <z_reschedule_irqlock+0xe>
   16616:	f7ed ba8b 	b.w	3b30 <arch_swap>
   1661a:	f383 8811 	msr	BASEPRI, r3
   1661e:	f3bf 8f6f 	isb	sy
}
   16622:	4770      	bx	lr

00016624 <z_reschedule_unlocked>:
	__asm__ volatile(
   16624:	f04f 0320 	mov.w	r3, #32
   16628:	f3ef 8011 	mrs	r0, BASEPRI
   1662c:	f383 8811 	msr	BASEPRI, r3
   16630:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   16634:	f7ff bfea 	b.w	1660c <z_reschedule_irqlock>

00016638 <z_priq_dumb_best>:
	return list->head == list;
   16638:	6803      	ldr	r3, [r0, #0]
}
   1663a:	4298      	cmp	r0, r3
   1663c:	bf14      	ite	ne
   1663e:	4618      	movne	r0, r3
   16640:	2000      	moveq	r0, #0
   16642:	4770      	bx	lr

00016644 <z_unpend_all>:
{
   16644:	b538      	push	{r3, r4, r5, lr}
   16646:	4605      	mov	r5, r0
	int need_sched = 0;
   16648:	2000      	movs	r0, #0
   1664a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1664c:	42a5      	cmp	r5, r4
   1664e:	d000      	beq.n	16652 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   16650:	b904      	cbnz	r4, 16654 <z_unpend_all+0x10>
}
   16652:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   16654:	4620      	mov	r0, r4
   16656:	f7f9 fa0d 	bl	fa74 <z_unpend_thread>
		z_ready_thread(thread);
   1665a:	4620      	mov	r0, r4
   1665c:	f7f9 fb4a 	bl	fcf4 <z_ready_thread>
		need_sched = 1;
   16660:	2001      	movs	r0, #1
   16662:	e7f2      	b.n	1664a <z_unpend_all+0x6>

00016664 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   16664:	b15a      	cbz	r2, 1667e <z_impl_k_sem_init+0x1a>
   16666:	428a      	cmp	r2, r1
   16668:	d309      	bcc.n	1667e <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1666a:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1666e:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   16672:	e9c0 0000 	strd	r0, r0, [r0]
   16676:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1667a:	2000      	movs	r0, #0
   1667c:	4770      	bx	lr
		return -EINVAL;
   1667e:	f06f 0015 	mvn.w	r0, #21
}
   16682:	4770      	bx	lr

00016684 <k_is_in_isr>:
   16684:	f3ef 8005 	mrs	r0, IPSR
}
   16688:	3800      	subs	r0, #0
   1668a:	bf18      	it	ne
   1668c:	2001      	movne	r0, #1
   1668e:	4770      	bx	lr

00016690 <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   16690:	f7ea bef4 	b.w	147c <arch_busy_wait>

00016694 <z_impl_k_thread_name_set>:
}
   16694:	f06f 0046 	mvn.w	r0, #70	; 0x46
   16698:	4770      	bx	lr

0001669a <k_thread_name_get>:
}
   1669a:	2000      	movs	r0, #0
   1669c:	4770      	bx	lr

0001669e <k_work_submit_to_queue>:
{
   1669e:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   166a0:	f101 0308 	add.w	r3, r1, #8
   166a4:	e8d3 2fef 	ldaex	r2, [r3]
   166a8:	f042 0c01 	orr.w	ip, r2, #1
   166ac:	e8c3 cfee 	stlex	lr, ip, [r3]
   166b0:	f1be 0f00 	cmp.w	lr, #0
   166b4:	d1f6      	bne.n	166a4 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   166b6:	07d3      	lsls	r3, r2, #31
   166b8:	d403      	bmi.n	166c2 <k_work_submit_to_queue+0x24>
}
   166ba:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   166be:	f7ff bf92 	b.w	165e6 <k_queue_append>
}
   166c2:	f85d fb04 	ldr.w	pc, [sp], #4

000166c6 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   166c6:	f1a0 010c 	sub.w	r1, r0, #12
   166ca:	6900      	ldr	r0, [r0, #16]
   166cc:	f7ff bfe7 	b.w	1669e <k_work_submit_to_queue>

000166d0 <work_cancel>:
	CHECKIF(work->work_q == NULL) {
   166d0:	69c3      	ldr	r3, [r0, #28]
{
   166d2:	b570      	push	{r4, r5, r6, lr}
   166d4:	4604      	mov	r4, r0
	CHECKIF(work->work_q == NULL) {
   166d6:	b913      	cbnz	r3, 166de <work_cancel+0xe>
		return -EALREADY;
   166d8:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
   166dc:	bd70      	pop	{r4, r5, r6, pc}
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   166de:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   166e2:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   166e6:	07db      	lsls	r3, r3, #31
   166e8:	d52f      	bpl.n	1674a <work_cancel+0x7a>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   166ea:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   166ec:	69c2      	ldr	r2, [r0, #28]
   166ee:	6813      	ldr	r3, [r2, #0]
   166f0:	b913      	cbnz	r3, 166f8 <work_cancel+0x28>
			return -EINVAL;
   166f2:	f06f 0015 	mvn.w	r0, #21
   166f6:	e7f1      	b.n	166dc <work_cancel+0xc>
   166f8:	429c      	cmp	r4, r3
   166fa:	d121      	bne.n	16740 <work_cancel+0x70>
Z_GENLIST_REMOVE(sflist, sfnode)
   166fc:	6823      	ldr	r3, [r4, #0]
   166fe:	6856      	ldr	r6, [r2, #4]
   16700:	f023 0003 	bic.w	r0, r3, #3
   16704:	b991      	cbnz	r1, 1672c <work_cancel+0x5c>
   16706:	42b4      	cmp	r4, r6
	list->head = node;
   16708:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   1670a:	d100      	bne.n	1670e <work_cancel+0x3e>
	list->tail = node;
   1670c:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1670e:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   16710:	f003 0303 	and.w	r3, r3, #3
   16714:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   16716:	2000      	movs	r0, #0
   16718:	61e0      	str	r0, [r4, #28]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1671a:	e8d5 3fef 	ldaex	r3, [r5]
   1671e:	f023 0301 	bic.w	r3, r3, #1
   16722:	e8c5 3fe2 	stlex	r2, r3, [r5]
   16726:	2a00      	cmp	r2, #0
   16728:	d0d8      	beq.n	166dc <work_cancel+0xc>
   1672a:	e7f6      	b.n	1671a <work_cancel+0x4a>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1672c:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   1672e:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   16730:	f003 0303 	and.w	r3, r3, #3
   16734:	ea43 0300 	orr.w	r3, r3, r0
   16738:	600b      	str	r3, [r1, #0]
	list->tail = node;
   1673a:	bf08      	it	eq
   1673c:	6051      	streq	r1, [r2, #4]
}
   1673e:	e7e6      	b.n	1670e <work_cancel+0x3e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   16740:	6818      	ldr	r0, [r3, #0]
   16742:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   16744:	f020 0303 	bic.w	r3, r0, #3
   16748:	e7d2      	b.n	166f0 <work_cancel+0x20>
		int err = z_abort_timeout(&work->timeout);
   1674a:	300c      	adds	r0, #12
   1674c:	f7fa fdce 	bl	112ec <z_abort_timeout>
		if (err) {
   16750:	2800      	cmp	r0, #0
   16752:	d0e0      	beq.n	16716 <work_cancel+0x46>
   16754:	e7c0      	b.n	166d8 <work_cancel+0x8>

00016756 <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   16756:	2300      	movs	r3, #0
   16758:	e9c0 3100 	strd	r3, r1, [r0]
	node->next = NULL;
   1675c:	e9c0 3302 	strd	r3, r3, [r0, #8]
	node->prev = NULL;
   16760:	6103      	str	r3, [r0, #16]
	work->work_q = NULL;
   16762:	61c3      	str	r3, [r0, #28]
}
   16764:	4770      	bx	lr

00016766 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   16766:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   16768:	f7fa ff56 	bl	11618 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   1676c:	bd08      	pop	{r3, pc}

0001676e <z_impl_k_uptime_ticks>:

s64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   1676e:	f7fa bf53 	b.w	11618 <z_tick_get>

00016772 <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
u64_t z_timeout_end_calc(k_timeout_t timeout)
{
   16772:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   16774:	1c4b      	adds	r3, r1, #1
   16776:	bf08      	it	eq
   16778:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1677c:	4604      	mov	r4, r0
   1677e:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   16780:	d013      	beq.n	167aa <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   16782:	ea54 0105 	orrs.w	r1, r4, r5
   16786:	d103      	bne.n	16790 <z_timeout_end_calc+0x1e>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
#endif
	return z_tick_get() + MAX(1, dt);
}
   16788:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   1678c:	f7fa bf44 	b.w	11618 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   16790:	f06f 0101 	mvn.w	r1, #1
   16794:	1a0a      	subs	r2, r1, r0
   16796:	f04f 31ff 	mov.w	r1, #4294967295
   1679a:	eb61 0305 	sbc.w	r3, r1, r5
   1679e:	2a00      	cmp	r2, #0
   167a0:	f173 0100 	sbcs.w	r1, r3, #0
   167a4:	db02      	blt.n	167ac <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   167a6:	4610      	mov	r0, r2
   167a8:	4619      	mov	r1, r3
}
   167aa:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   167ac:	f7fa ff34 	bl	11618 <z_tick_get>
   167b0:	2c01      	cmp	r4, #1
   167b2:	f175 0300 	sbcs.w	r3, r5, #0
   167b6:	bfbc      	itt	lt
   167b8:	2401      	movlt	r4, #1
   167ba:	2500      	movlt	r5, #0
   167bc:	1820      	adds	r0, r4, r0
   167be:	eb45 0101 	adc.w	r1, r5, r1
   167c2:	e7f2      	b.n	167aa <z_timeout_end_calc+0x38>

000167c4 <signal_poll_event>:
{
   167c4:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   167c6:	6884      	ldr	r4, [r0, #8]
{
   167c8:	4605      	mov	r5, r0
   167ca:	460e      	mov	r6, r1
	if (poller) {
   167cc:	b19c      	cbz	r4, 167f6 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   167ce:	68a3      	ldr	r3, [r4, #8]
   167d0:	b95b      	cbnz	r3, 167ea <signal_poll_event+0x26>
	int retcode = 0;
   167d2:	4618      	mov	r0, r3
		poller->is_polling = false;
   167d4:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   167d6:	2300      	movs	r3, #0
   167d8:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   167da:	68eb      	ldr	r3, [r5, #12]
   167dc:	f3c3 3104 	ubfx	r1, r3, #12, #5
   167e0:	430e      	orrs	r6, r1
   167e2:	f366 3310 	bfi	r3, r6, #12, #5
   167e6:	60eb      	str	r3, [r5, #12]
	return retcode;
   167e8:	e004      	b.n	167f4 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   167ea:	4798      	blx	r3
		poller->is_polling = false;
   167ec:	2300      	movs	r3, #0
		if (retcode < 0) {
   167ee:	2800      	cmp	r0, #0
		poller->is_polling = false;
   167f0:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   167f2:	daf0      	bge.n	167d6 <signal_poll_event+0x12>
}
   167f4:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   167f6:	4620      	mov	r0, r4
   167f8:	e7ed      	b.n	167d6 <signal_poll_event+0x12>

000167fa <add_event>:
{
   167fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   167fc:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   167fe:	e9d0 2300 	ldrd	r2, r3, [r0]
   16802:	4290      	cmp	r0, r2
   16804:	4604      	mov	r4, r0
   16806:	460d      	mov	r5, r1
   16808:	d106      	bne.n	16818 <add_event+0x1e>
	node->prev = list->tail;
   1680a:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   1680c:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   1680e:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   16810:	6863      	ldr	r3, [r4, #4]
   16812:	601d      	str	r5, [r3, #0]
	list->tail = node;
   16814:	6065      	str	r5, [r4, #4]
}
   16816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   16818:	2b00      	cmp	r3, #0
   1681a:	d0f6      	beq.n	1680a <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   1681c:	689b      	ldr	r3, [r3, #8]
   1681e:	6879      	ldr	r1, [r7, #4]
   16820:	6858      	ldr	r0, [r3, #4]
   16822:	f7ff feea 	bl	165fa <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   16826:	2800      	cmp	r0, #0
   16828:	d1ef      	bne.n	1680a <add_event+0x10>
	return list->head == list;
   1682a:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1682c:	42b4      	cmp	r4, r6
   1682e:	d0ec      	beq.n	1680a <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   16830:	2e00      	cmp	r6, #0
   16832:	d0ea      	beq.n	1680a <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   16834:	68b3      	ldr	r3, [r6, #8]
   16836:	6878      	ldr	r0, [r7, #4]
   16838:	6859      	ldr	r1, [r3, #4]
   1683a:	f7ff fede 	bl	165fa <z_is_t1_higher_prio_than_t2>
   1683e:	b128      	cbz	r0, 1684c <add_event+0x52>
	node->prev = successor->prev;
   16840:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   16842:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   16846:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   16848:	6075      	str	r5, [r6, #4]
			return;
   1684a:	e7e4      	b.n	16816 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   1684c:	6863      	ldr	r3, [r4, #4]
   1684e:	429e      	cmp	r6, r3
   16850:	d0db      	beq.n	1680a <add_event+0x10>
   16852:	6836      	ldr	r6, [r6, #0]
   16854:	e7ec      	b.n	16830 <add_event+0x36>

00016856 <z_handle_obj_poll_events>:
{
   16856:	4603      	mov	r3, r0
	return list->head == list;
   16858:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1685a:	4283      	cmp	r3, r0
   1685c:	d008      	beq.n	16870 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   1685e:	e9d0 3200 	ldrd	r3, r2, [r0]
   16862:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   16864:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   16866:	2300      	movs	r3, #0
	node->prev = NULL;
   16868:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   1686c:	f7ff bfaa 	b.w	167c4 <signal_poll_event>
}
   16870:	4770      	bx	lr

00016872 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   16872:	4770      	bx	lr
